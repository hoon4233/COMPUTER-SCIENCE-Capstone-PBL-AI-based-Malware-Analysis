import os
import time
import pickle
import numpy as np
from nltk.util import ngrams

MALWARE_PATH = "../../data/opcode/malware/"
NORMAL_PATH = "../../data/opcode/normal/"
VOCAB_PATH = "../03_vocab/vocab.pickle"
WHITELIST_PATH = "../04_whitelist/whitelist.pickle"
MAL_ENCOD_PATH = "./malware/"
NOR_ENCOD_PATH = "./normal/"
MAX_FILE_SIZE = 40000
N_OF_GRAMS = 3
CHECK_POINT = 100

X64_FILE_PATH = "../x86_ins.pickle"
with open(X64_FILE_PATH, 'rb') as f :
    X86_INS = pickle.load(f)

def file_encoding(file_path, N):
    global MAX_FILE_SIZE
    with open(VOCAB_PATH, 'rb') as f:
        VOCAB = pickle.load(f)
    with open(WHITELIST_PATH, 'rb') as f:
        WHITELIST = pickle.load(f)

    with open(file_path, 'r') as f :
        result = np.zeros(MAX_FILE_SIZE)
        opcodes = [ code.strip() for code in f.readlines() if code.strip() in X86_INS   ]
        n_gram = ngrams(opcodes, N)
        idx = 0
        for gram in n_gram :
            if idx == MAX_FILE_SIZE :
                break
            if gram in WHITELIST :
                continue
            try :
                result[idx] = float(VOCAB[gram])
            except KeyError :
                continue
            idx += 1
    return result

def testForOneFile():
    global MALWARE_PATH, N_OF_GRAMS
    files = [file for file in os.listdir(MALWARE_PATH) if file.endswith(".txt")]
    for file in files:
        with open('test_for_one_file.txt', 'w') as f:
            f.write(f"File_name : {file} \n")
            ret = list(file_encoding(MALWARE_PATH+file, N_OF_GRAMS))
            f.write(f"Entire : {ret} \n")
            f.write(f"Slicing : {ret[:4018]} \n")
        break

# 파이토치에서 학습데이터 어떻게 들고 있는지 찾아보고 해야할듯
def makeTrainingSet(file_path, file_type, result_path, num_of_files):
    global N_OF_GRAMS, CHECK_POINT
    files = [file for file in os.listdir(file_path) if file.endswith(".txt")]
    count = 0
    for file in files:
        ret = list(file_encoding(file_path + file, N_OF_GRAMS))
        with open( result_path + file +'.pickle', 'wb') as f:
            pickle.dump(ret, f)
        count += 1
        if count % CHECK_POINT == 0 :
            print(f"DO {CHECK_POINT} for {file_type}")
            # break
        if count == num_of_files :
            break
    print(f"Finish makeTrainingSet for {file_type} ")


start_time = time.time()
# testForOneFile()
makeTrainingSet(MALWARE_PATH, "Malware", MAL_ENCOD_PATH, 1800)
makeTrainingSet(NORMAL_PATH, "Noraml", NOR_ENCOD_PATH, 1800)
with open('execution_time.txt', 'a') as f:
    f.write("Execution time :" + str(time.time()-start_time) + "\n")

# # pickle read test
# files = [file for file in os.listdir(MAL_ENCOD_PATH) if file.endswith(".pickle")]
# for file in files :
#     with open(MAL_ENCOD_PATH+file, 'rb') as f :
#         print(file)
#         print(pickle.load(f)[:100])
#         break