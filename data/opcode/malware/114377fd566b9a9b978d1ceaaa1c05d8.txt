stc
repz
loop
pop
push
sahf
mov
adc
enter
inc
ja
popa
inc
addr16
xor
stos
fwait
gs
loop
pop
add
mov
jae
or
enter
in
xor
imul
mov
push
jmp
ss
mov
mov
ss
inc
jnp
jmp
in
cmp
lods
mov
adc
or
dec
aaa
xchg
lock
loopne
pusha
inc
ds
pop
adc
enter
mov
in
sbb
fld
enter
xchg
push
out
cmp
(bad)
xchg
test
pusha
inc
ds
mov
sbb
inc
adc
cs
xor
sub
xor
xchg
aad
xor
loopne
retf
cdq
sub
mov
mov
xchg
inc
jo
loop
aas
cdq
adc
mov
xchg
(bad)
mov
imul
mov
out
xor
sahf
data16
add
mov
cdq
imul
inc
test
mov
js
adc
mov
mov
js
adc
lahf
bound
in
cpuid
sub
mov
adc
js
adc
cmc
pop
mov
aaa
aaa
addr16
ins
xchg
ins
cdq
xor
cmp
sbb
mov
inc
and
not
in
and
lock
xchg
aaa
mov
popa
inc
aas
fs
mov
inc
out
mov
fs
mov
in
pop
or
arpl
pusha
cli
cld
ss
in
jmp
add
mov
sbb
xor
and
imul
repz
mov
adc
xor
imul
cmp
test
enter
out
mov
xchg
mov
and
adc
ror
jns
jno
cmp
push
ror
xor
imul
push
(bad)
mov
imul
pop
mov
xchg
sub
push
pop
push
mov
enter
inc
(bad)
js
mov
pop
mov
xor
inc
push
adc
xor
ds
push
cli
cmp
(bad)
cmovns
ss
not
add
pop
adc
loopne
push
imul
xor
jl
xor
xchg
std
sbb
dec
js
adc
enter
js
adc
dec
test
xchg
cwde
fisttp
adc
xor
stos
lods
nop
adc
xor
imul
dec
fs
lods
sbb
pushf
mov
aad
enter
retf
pop
adc
enter
enter
pop
jae
and
lock
xchg
aaa
inc
push
pop
or
jl
xor
cmc
loopne
ret
mov
add
mov
in
cmp
mov
in
cmp
xor
sub
adc
lds
mov
mov
in
xchg
cwde
fisttp
push
les
in
xchg
enter
stc
repz
adc
cmp
mov
(bad)
fidiv
int3
fwait
scas
dec
cmc
add
(bad)
mov
pop
or
add
inc
loopne
mov
gs
lods
inc
fsub
jmp
mov
adc
div
sbb
imul
test
imul
ja
imul
add
or
push
xchg
mov
inc
add
mov
adc
push
int3
addr16
and
enter
int3
add
adc
outs
xchg
leave
inc
adc
imul
aam
sub
mov
dec
aaa
add
inc
loopne
bound
jo
loope
mov
or
out
cmp
pop
adc
rcr
adc
xor
ins
stc
repz
pop
aaa
inc
or
aam
adc
xor
xor
enter
aaa
inc
out
or
lds
stc
repz
(bad)
stc
repz
or
jmp
cli
sar
(bad)
xchg
test
pusha
inc
ds
inc
push
rcr
fsub
inc
jmp
mov
lock
ins
mov
push
out
dec
push
jmp
xor
stos
aaa
data16
jno
sub
xor
loop
cmp
xlat
fmul
in
sub
mov
push
jmp
xor
push
xchg
mov
mov
out
int
push
xchg
and
fwait
sub
mov
xchg
mov
leave
xor
icebp
hlt
pusha
(bad)
aaa
jbe
loop
cmp
sub
adc
retf
xor
shl
int3
adc
ins
dec
mov
jo
adc
(bad)
sbb
lahf
mov
add
aaa
pop
adc
int
loopne
xor
loopne
iret
in
xchg
aaa
int3
pop
sbb
lea
fwait
test
sti
in
sub
adc
retf
mov
xor
xchg
enter
aas
fadd
loopne
sbb
loop
cmp
ins
leave
xor
xchg
(bad)
and
in
loopne
sbb
loopne
iret
in
xchg
aaa
mov
xchg
ins
leave
xor
xchg
enter
enter
xchg
push
idiv
fwait
gs
loop
aas
lods
jecxz
push
add
cmp
hlt
loopne
iret
fwait
scas
stc
(bad)
and
imul
loopne
or
bound
xchg
iret
bnd
loope
fwait
mov
or
jge
jne
mov
in
sub
cmc
push
jno
ins
dec
xor
lock
loopne
bound
sahf
fs
xor
hlt
push
xchg
ret
adc
pop
jo
dec
imul
jbe
loopne
iret
and
mov
cmp
cmp
in
or
adc
mov
or
and
mov
mov
cdq
sub
cmc
push
jno
mov
cmp
xchg
push
idiv
fwait
gs
loop
and
xchg
clc
push
jmp
dec
jbe
sub
xor
xchg
int
cmps
sub
mov
push
popa
(bad)
lea
push
inc
leave
cmp
jbe
add
inc
pop
pop
or
js
or
adc
inc
icebp
and
or
add
inc
loopne
bound
inc
sbb
add
mov
xchg
inc
hlt
in
ins
mov
inc
push
add
fist
sub
mov
jp
sub
aas
and
xchg
aaa
arpl
aas
and
in
xchg
aaa
mov
dec
xchg
ins
fld
sahf
fs
xor
mov
xchg
loope
fwait
scas
aaa
inc
sbb
inc
cmc
js
mov
xor
cmp
xor
and
imul
mov
adc
cmp
xchg
lock
loopne
bound
sahf
fs
sbb
mov
sub
lea
adc
inc
hlt
xchg
push
push
nop
push
imul
nop
push
imul
int3
fs
inc
sub
cmp
mov
mov
jmp
mov
cli
js
xor
ss
push
imul
and
inc
aas
lahf
mov
push
xchg
xchg
adc
out
xor
imul
mov
add
mov
mov
sub
inc
jbe
loopne
add
pusha
adc
test
or
aas
mov
pop
push
add
mov
xchg
sbb
xor
mov
scas
shl
(bad)
xlat
sbb
dec
repz
cmp
mov
add
enter
dec
fcomp
enter
shr
cmc
or
ins
stc
repz
add
cli
xchg
ss
in
xor
outs
jno
xor
test
or
mov
adc
fcomi
sbb
xor
lahf
mov
sbb
mov
jmp
stos
dec
push
outs
fisttp
xor
dec
push
push
mov
adc
mov
push
imul
cmc
adc
mov
cmps
sub
mov
xchg
mov
int
loopne
mov
cmc
imul
mov
jno
cmp
in
aas
sar
jmp
jp
aaa
xor
in
shr
xchg
aaa
arpl
sbb
fcmovnu
sbb
xor
mov
mov
in
cmp
pop
jmp
gs
int3
in
imul
scas
mov
enter
leave
xor
loopne
xor
loopne
mov
xchg
in
adc
(bad)
mov
int3
arpl
loopne
iret
xchg
adc
xor
imul
xor
xor
push
mov
push
imul
pop
xchg
stos
fwait
cmp
imul
xor
adc
iret
mov
adc
imul
xchg
inc
jmp
mov
lock
and
imul
jmp
stos
scas
hlt
push
mov
xor
sub
push
cdq
cwde
mov
add
das
mov
imul
dec
sbb
mov
inc
loop
int3
inc
dec
inc
jbe
call
enter
popf
pop
mov
mov
jp
sub
loop
ret
inc
loop
int3
push
push
enter
inc
jbe
pusha
or
call
enter
aaa
int
cmp
mov
enter
aaa
movs
xchg
xor
sbb
hlt
pop
adc
aaa
xor
loop
aas
sub
adc
in
xchg
mov
xor
sahf
sub
in
loopne
mov
cmc
imul
mov
jno
cmp
in
aas
ror
xchg
inc
jbe
push
(bad)
retf
sbb
xchg
dec
push
mov
mov
adc
adc
icebp
loopne
jecxz
xchg
aaa
mov
fld
and
inc
aas
lahf
mov
pop
adc
fwait
scas
stc
lds
xchg
inc
hlt
xchg
or
xor
pop
int3
cmp
jecxz
xor
pusha
adc
scas
(bad)
iret
adc
xor
xchg
inc
hlt
stc
sbb
ret
cmp
mov
mov
es
int3
mov
xchg
enter
inc
ja
push
mov
cli
cmp
cmp
imul
xor
adc
repz
out
imul
xchg
adc
xor
imul
fisttp
retf
in
inc
jbe
loopne
mov
xchg
enter
aam
leave
sbb
retf
loop
cmp
push
int3
mov
int3
mov
xchg
enter
xor
sbb
hlt
add
dec
or
xchg
aaa
mov
xchg
enter
enter
mov
jae
add
inc
fwait
xchg
leave
retf
fwait
scas
mov
aaa
js
mov
xor
enter
and
imul
xor
mov
pop
adc
jbe
loopne
mov
xchg
mov
jmp
or
in
mov
mov
xor
add
mov
adc
cmp
push
imul
pop
adc
fmul
inc
enter
xor
sub
enter
xchg
cli
sar
(bad)
stos
ror
adc
fwait
gs
rcl
lock
or
leave
jmp
stos
push
mov
xchg
ss
adc
sub
push
imul
mov
in
in
imul
xchg
aaa
arpl
call
shl
in
sbb
jmp
mov
lock
and
enter
enter
add
in
xchg
inc
jmp
mov
lock
fadd
in
xchg
inc
mov
xchg
ss
inc
or
neg
jmp
mov
enter
sub
in
xchg
cwde
xchg
mov
mov
inc
loop
int3
inc
and
out
pusha
or
call
enter
aaa
int
cmp
mov
in
cmp
in
jge
xor
imul
repz
imul
lahf
in
or
in
xchg
cwde
xchg
mov
mov
inc
loop
int3
inc
adc
out
pusha
or
outs
shl
add
xchg
xchg
ss
cli
je
int3
in
jmp
scas
xchg
aaa
int
loop
(bad)
in
xchg
aaa
nop
inc
leave
mov
xchg
adc
imul
inc
enter
imul
cmp
dec
mov
aam
int3
in
xchg
enter
retf
jmp
aaa
xor
imul
into
in
xchg
aaa
arpl
jge
int3
in
jmp
scas
(bad)
int
rcr
pop
adc
rcr
xchg
inc
lock
xchg
aaa
push
in
xchg
enter
(bad)
xor
imul
int
sub
int
cmp
fistp
enter
les
xchg
push
aaa
pop
cmp
adc
xchg
cmps
xchg
ss
adc
cmc
pop
cmps
sub
xor
imul
js
mov
pop
inc
leave
mov
cli
stc
ds
in
jmp
adc
push
rcl
inc
mov
xchg
ss
inc
cmp
int3
adc
cmp
in
jl
in
xchg
leave
xor
imul
xchg
push
imul
mov
gs
int3
in
imul
pop
stos
mov
int3
in
xchg
lahf
(bad)
lahf
aaa
int3
xchg
lods
les
in
xchg
enter
movzx
imul
sahf
repnz
pop
inc
leave
mov
cli
gs
in
jmp
adc
jno
push
imul
inc
and
neg
push
aaa
int3
adc
cmp
in
jl
in
xchg
leave
xor
imul
xchg
push
imul
mov
gs
int3
in
imul
pop
stos
mov
int3
in
xchg
lahf
fstp
lods
les
in
xchg
enter
movzx
imul
cmps
repnz
pop
inc
leave
mov
cli
loope
int3
in
jmp
adc
aaa
int
push
pop
push
adc
rcr
xchg
inc
lock
mov
pop
inc
leave
mov
cli
cmp
or
das
xchg
aaa
xor
sbb
aaa
int
push
leave
pop
push
mov
jp
push
(bad)
in
xchg
dec
neg
push
aaa
int3
adc
ja
push
enter
aaa
int
and
out
aaa
mov
gs
int3
in
imul
pop
bound
xor
(bad)
popf
aaa
int3
xchg
lods
les
in
xchg
enter
movzx
imul
int3
in
xchg
enter
int
cmps
sub
xor
xchg
cwde
fcmovnbe
xchg
aaa
int3
dec
sbb
pop
sbb
push
enter
mov
xchg
stos
jbe
adc
mov
xchg
ss
adc
inc
jmp
mov
cmps
xchg
ss
fwait
stos
inc
mov
xchg
ss
inc
loop
out
in
xchg
aaa
arpl
loopne
iret
sbb
enter
jo
in
xchg
cwde
mov
in
cmp
in
ds
jmp
mov
lock
adc
xor
imul
adc
adc
retf
mov
mov
dec
mov
inc
xchg
adc
mov
inc
les
adc
movzx
imul
int3
adc
xor
xchg
cwde
mov
in
cmp
retf
int3
inc
loop
int3
inc
jne
fadd
xor
sbb
in
xchg
cwde
pop
or
int3
in
xchg
cwde
mov
adc
xor
dec
push
push
imul
int
cmp
(bad)
xchg
ss
inc
loop
int3
test
(bad)
iret
xchg
stos
lods
pop
adc
repz
imul
inc
loop
jecxz
xchg
aaa
arpl
loopne
iret
sbb
retf
xor
in
fucomi
xchg
aaa
arpl
xchg
cwde
mov
fwait
sub
mov
shr
mov
adc
loop
imul
xor
in
xlat
in
xchg
aaa
arpl
xchg
cwde
mov
fwait
sub
cmp
dec
pop
adc
mov
sub
xor
jmp
in
fdiv
int3
in
xchg
mov
mov
in
cmp
movs
jle
enter
dec
xchg
(bad)
xchg
ss
adc
mov
xor
rcr
aas
adc
rcr
xchg
inc
lock
fsub
in
xchg
inc
mov
xchg
ss
inc
add
mov
xchg
ss
inc
adc
(bad)
movzx
imul
fwait
in
push
int3
in
xchg
inc
mov
xchg
ss
inc
in
mov
(bad)
jns
aam
ins
enter
ins
mov
in
jmp
adc
shl
aaa
fs
push
aaa
fs
iret
fwait
mov
jmp
stos
dec
dec
out
imul
xor
xchg
enter
aaa
int
cmp
mov
in
cmp
in
jge
xor
imul
lock
xor
test
enter
pusha
int3
in
xchg
cwde
mov
in
cmp
in
movs
mov
and
xor
sbb
imul
adc
mov
xor
xor
push
push
enter
dec
inc
in
xchg
aaa
xor
loop
sub
aaa
mov
in
in
mov
xchg
aaa
arpl
xchg
dec
fild
loopne
mov
imul
xchg
ss
xchg
test
mov
adc
xchg
cdq
aam
int3
in
xchg
lahf
mov
fwait
sub
mov
shr
mov
adc
pop
adc
mov
loope
int
imul
inc
add
mov
xchg
ss
inc
loop
int3
push
push
enter
inc
jbe
pusha
or
jne
xor
jmp
sbb
imul
inc
add
int3
cmps
popf
aaa
int
loop
mov
cdq
push
aaa
fs
(bad)
iret
fwait
mov
jmp
stos
dec
dec
out
imul
xor
push
in
xchg
aaa
cmp
imul
adc
cmc
adc
mov
in
cmp
xchg
ss
cli
les
int3
in
jmp
scas
xor
adc
icebp
loopne
imul
aaa
mov
in
xchg
aaa
xor
imul
int3
adc
xor
aaa
xchg
in
xor
pop
dec
mov
int3
in
xchg
cwde
fist
lods
fdivr
shl
inc
into
in
xchg
aaa
mov
xchg
mov
jmp
dec
retf
in
xchg
aaa
int3
cmps
xor
dec
push
in
xchg
aaa
arpl
xchg
inc
mov
xchg
aaa
int
cmp
enter
mov
mov
int3
in
xchg
cwde
pop
dec
mov
int3
in
xchg
cwde
(bad)
enter
fdivr
shr
jne
in
xchg
aaa
xor
jo
punpckhwd
(bad)
icebp
loopne
outs
in
xchg
aaa
mov
in
xchg
aaa
arpl
xchg
dec
sub
aaa
mov
in
push
dec
sub
aaa
cmp
fs
in
loop
lahf
in
xchg
aaa
arpl
loop
xchg
in
xchg
aaa
arpl
call
enter
aaa
int
loop
xlat
in
xchg
aaa
or
dec
call
scas
cdq
aaa
int
imul
mov
in
cmp
in
aas
shl
imul
and
jmp
fnstenv
int
loopne
mov
mov
mov
int3
in
xchg
cwde
mov
cdq
in
adc
in
xchg
cwde
mov
cdq
in
adc
in
xchg
cwde
mov
xchg
stos
cwde
daa
adc
mov
xchg
ss
inc
loop
int3
inc
popa
and
in
aaa
ins
dec
xor
lock
loopne
pop
in
add
imul
xor
cmp
adc
and
inc
aas
lahf
mov
neg
daa
push
mov
fwait
xchg
leave
int
sbb
hlt
push
xchg
enter
mov
(bad)
enter
int3
mov
enter
sub
push
mov
repnz
xlat
cli
adc
int3
in
jmp
addr16
xor
in
xchg
aaa
fdiv
scas
(bad)
rcl
imul
lock
or
hlt
push
mov
sub
add
sahf
xor
and
xchg
aaa
int3
in
xchg
xchg
ins
dec
clc
inc
jbe
or
enter
int3
xor
and
jl
retf
cmp
jl
adc
enter
push
pop
push
imul
mov
jbe
enter
inc
(bad)
xchg
test
pusha
inc
loop
cmp
shl
push
adc
rcr
xchg
int
cmps
sub
mov
sub
xor
imul
adc
in
or
dec
shl
test
adc
xor
loopne
xor
loopne
hlt
pop
sub
enter
cmp
imul
movs
ins
mov
sbb
imul
cmp
sbb
xor
xchg
in
mov
fisttp
lods
push
imul
xchg
stc
repz
push
call
mov
ins
mov
sub
mov
sti
push
retf
jmp
enter
lock
inc
retf
lahf
int
mov
enter
imul
pop
push
push
jb
or
pop
push
push
jb
loopne
sbb
loopne
ficomp
imul
in
ins
lock
push
imul
int3
pop
sbb
int
lea
enter
stc
repz
push
retf
xor
call
enter
push
jb
jns
jae
sub
xchg
add
mov
sti
pop
aaa
int3
in
lahf
int
lea
enter
stc
repz
js
xor
shl
adc
rcr
jmp
enter
aaa
int3
in
lahf
int
lea
enter
stc
repz
or
adc
or
ins
imul
jb
popa
push
xchg
push
leave
mov
sti
mov
int3
in
lahf
int
lea
enter
stc
repz
aam
xor
loopne
sbb
loopne
mov
jno
jb
push
mov
adc
xor
fnsave
int3
in
lahf
int
lea
enter
stc
repz
clc
retf
call
enter
push
jb
imul
push
lock
adc
xor
loope
int3
in
xchg
int
cmps
sub
int3
pop
push
push
jb
call
enter
push
jb
sub
xor
imul
xor
ins
lock
push
imul
xchg
shr
imul
jb
jmp
push
imul
xchg
push
lock
adc
push
imul
xchg
(bad)
hlt
mov
adc
push
imul
int3
pop
sbb
int
lea
enter
enter
add
(bad)
or
adc
mov
rol
dec
ds
mov
xor
cmp
ss
xor
data16
inc
leave
mov
sbb
ret
dec
adc
ror
xor
adc
enter
aaa
pop
xchg
test
lds
lea
enter
aaa
data16
fisttp
push
push
jb
sub
pop
push
push
jb
call
enter
push
jb
sub
and
test
enter
sub
in
ins
mov
ss
mov
push
dec
repnz
mov
mov
imul
loopne
cmp
ins
mov
repz
mov
pop
sbb
adc
sub
sub
cmp
sub
push
shr
xor
imul
in
ins
shl
mov
loop
or
sub
push
xchg
imul
ja
sub
xor
popa
pop
jae
jmp
addr16
dec
in
mov
xor
sbb
mov
adc
int3
inc
ss
enter
loope
fwait
test
ret
push
jecxz
xchg
div
mov
sbb
sub
mov
outs
inc
jbe
jmp
lds
adc
sub
aaa
xchg
dec
les
or
cmp
jl
mov
call
int3
pop
gs
jae
enter
imul
xor
dec
ret
enter
les
or
cmp
jl
mov
call
int3
pop
gs
jae
enter
imul
xor
aaa
data16
jmp
ins
pop
jae
pop
or
gs
push
imul
(bad)
fwait
test
push
idiv
sahf
lods
xor
xchg
sbb
aas
sbb
imul
jno
add
mov
and
add
mov
sahf
fcmovnbe
ss
push
(bad)
cmc
loopne
iret
fwait
scas
mov
gs
rcl
push
imul
xor
retf
push
imul
xor
retf
push
imul
xor
retf
push
imul
dec
aaa
add
inc
loopne
mov
add
add
ins
dec
lock
enter
mov
mov
sub
mov
pop
xor
(bad)
fisttp
imul
jmp
stos
dec
push
(bad)
imul
aad
cmp
adc
mov
xchg
enter
leave
xor
jmp
cmps
sub
mov
mov
lds
adc
lods
out
scas
(bad)
jmp
imul
xor
imul
jno
loopne
shr
ins
mov
jbe
imul
adc
adc
retf
hlt
push
(bad)
xor
imul
scas
in
jecxz
ins
enter
ins
mov
adc
xor
jl
scas
push
imul
lahf
sub
arpl
inc
jbe
cmp
aaa
js
aaa
inc
test
jbe
cmp
inc
mov
lea
loopne
enter
mov
xor
sbb
pop
adc
enter
into
int3
lea
clc
jae
enter
mov
xlat
cli
sub
xor
xchg
int
cmps
sub
mov
fld
idiv
aaa
es
mov
cdq
sub
fcomp
shl
adc
rcr
ss
push
imul
and
aad
xor
ss
inc
icebp
cmp
lea
fwait
sub
mov
jmp
mov
cli
add
pop
adc
leave
mov
push
sbb
arpl
aaa
inc
sbb
enter
and
cdq
sub
mov
inc
xchg
add
inc
loopne
lods
jbe
or
loopne
add
loopne
int3
pop
sbb
mov
es
mov
dec
xor
data16
mov
push
cmp
mov
data16
test
push
cmc
int3
adc
inc
es
and
imul
ja
imul
adc
inc
push
data16
and
imul
ja
ins
cmc
int3
adc
cmp
arpl
xor
loop
and
jge
mov
in
imul
test
ins
stos
(bad)
push
imul
icebp
sbb
imul
add
or
loope
xor
loopne
mov
imul
push
jg
icebp
adc
xchg
or
movs
jge
or
sbb
mov
sbb
or
cmp
sub
pop
shl
aaa
pop
add
cmp
mov
enter
aaa
pop
sar
pop
mov
cwde
fld
xor
add
pushf
and
push
loope
adc
mov
ins
inc
jbe
loop
and
xchg
dec
fist
loop
(bad)
fwait
jge
xor
imul
jbe
add
daa
xchg
push
int
scas
sub
xor
dec
jbe
push
aaa
int3
pop
sbb
hlt
or
jmp
js
xchg
dec
fist
jmp
mov
xchg
push
into
aaa
addr16
inc
retf
xchg
or
(bad)
sbb
enter
inc
retf
xchg
or
inc
add
adc
push
jns
sub
fst
jmp
adc
mov
push
retf
loopne
jnp
push
into
xor
inc
retf
xchg
or
inc
inc
loopne
mov
push
unpcklps
jne
xchg
dec
fist
data16
adc
and
adc
xor
or
adc
mov
xchg
inc
data16
pushf
and
push
loope
adc
(bad)
retf
cdq
sub
mov
jmp
mov
adc
cvttps2pi
popa
fwait
xchg
xor
loopne
mov
imul
push
dec
fist
jmp
sti
mov
sbb
push
mov
xor
sbb
enter
and
dec
imul
add
leave
xchg
or
push
jl
xor
imul
test
xchg
aaa
ins
dec
xor
lock
loopne
mov
gs
gs
xchg
int
cmps
sub
mov
and
div
addr16
(bad)
mov
or
mov
or
jne
sub
push
cli
push
xor
scas
mov
xor
jmp
push
imul
rcl
loop
es
mov
and
cwde
fild
xchg
int
cmps
sub
cmp
ins
xlat
push
cli
imul
ficom
imul
iret
adc
(bad)
iret
cwde
jge
mov
out
enter
imul
fdiv
ins
(bad)
mov
adc
(bad)
retf
fwait
fwait
leave
jmp
adc
cmp
push
ja
mov
adc
push
imul
ficom
loope
fwait
xchg
leave
jmp
push
loopne
retf
aam
sti
ficomp
cmp
mov
cmps
sub
mov
xchg
loope
lahf
cmp
dec
fist
loopne
retf
aam
and
adc
gs
mov
int3
es
(bad)
push
imul
mov
gs
ins
dec
mov
jo
aaa
imul
xor
lahf
fist
aaa
int3
aam
sub
in
xchg
enter
enter
enter
iret
cmc
xchg
mov
int3
in
push
aaa
int3
adc
int
cmps
sub
xor
aam
in
in
xchg
enter
jle
loope
aaa
int3
xchg
push
int
scas
sub
xor
dec
mov
mov
int3
adc
cmp
in
xchg
dec
movhps
je
adc
xor
aaa
mov
int3
xchg
aaa
pop
fsub
aas
pop
push
je
adc
and
dec
imul
int3
in
loopne
cmps
inc
lock
sbb
xchg
aaa
pop
fdiv
aas
pop
mov
jno
cmp
rcl
loopne
xchg
int3
xchg
aaa
int3
es
stos
push
imul
mov
in
loopne
es
mov
xchg
in
cmp
in
xchg
leave
cmp
in
cmp
in
xchg
mov
ss
ror
jle
xchg
aaa
cmc
xchg
call
xchg
sub
xchg
push
fst
sub
xor
imul
int3
in
test
xor
sub
mov
in
xchg
int
cmps
sub
mov
mov
int3
in
imul
xor
or
int3
in
loopne
jmp
xchg
aaa
int3
pop
sbb
pop
out
xchg
aaa
mov
ror
enter
inc
mov
xchg
int3
and
fdiv
adc
and
imul
xor
(bad)
aam
fsubr
xchg
(bad)
mov
imul
(bad)
std
xchg
aaa
inc
(bad)
mov
xchg
aaa
arpl
test
xor
xchg
int
cmps
sub
mov
test
int3
in
imul
pop
in
xchg
enter
and
in
xchg
aaa
xchg
mov
int3
cli
dec
xor
in
jmp
rcr
push
int3
in
imul
stc
sub
int3
fwait
mov
fst
test
xor
cmp
mov
push
push
jl
jmp
mov
imul
mov
xchg
retf
xor
sbb
mov
adc
mov
mov
int3
stc
daa
dec
lock
xor
imul
int3
dec
call
aaa
xor
push
push
int3
in
inc
aaa
int3
adc
mov
xchg
int3
sbb
xchg
aaa
data16
in
in
xchg
and
push
push
xor
xchg
aaa
repnz
dec
pop
jae
loopne
(bad)
std
xchg
aaa
mov
popf
daa
int3
in
imul
ror
and
ror
inc
aas
add
inc
es
mov
int3
cdq
cld
cmp
in
xchg
or
adc
adc
sti
imul
adc
iret
adc
dec
(bad)
std
xchg
aaa
mov
popf
daa
int3
in
imul
int3
pop
sbb
jne
int
aaa
xor
mov
fistp
ds
push
icebp
adc
movlps
mov
in
jmp
mov
push
cmps
mov
aam
adc
dec
cmps
int3
xchg
aaa
mov
in
loop
cmps
int3
xchg
aaa
xor
loopne
mov
xchg
lds
int3
in
loop
out
xchg
aaa
mov
in
add
mov
in
cmp
xchg
mov
int3
cli
lods
lahf
xor
loop
out
xchg
aaa
or
sbb
mov
in
loopne
xchg
xchg
aaa
xor
jmp
aaa
xor
mov
pop
adc
pop
xchg
xchg
aaa
repnz
gs
test
aas
inc
add
xor
imul
int3
stc
repnz
data16
sar
aaa
repnz
mov
int3
cmp
sbb
in
xchg
inc
aas
pop
pop
pop
jae
data16
loope
aaa
int3
ror
call
cmps
out
aaa
int3
jp
fdiv
adc
and
fst
int3
in
pusha
or
or
xor
jmp
dec
or
imul
int3
in
data16
das
or
adc
leave
cmp
push
leave
xor
adc
adc
mov
xchg
int3
cdq
jge
xor
imul
ja
ins
inc
mov
mov
int3
aam
imul
xchg
enter
pop
int3
in
ins
inc
xchg
mov
int3
fwait
cdq
xor
cdq
dec
fist
jmp
inc
ret
xchg
or
daa
fwait
cdq
dec
fist
jmp
inc
ret
xchg
or
cmp
int3
pop
sbb
jle
mov
aaa
int3
ror
ins
jmp
mov
aaa
int3
adc
xor
adc
mov
adc
fucomi
in
add
loopne
xlat
int
aaa
fcom
loop
(bad)
std
xchg
aaa
xor
inc
cmp
sub
sub
in
xchg
mov
in
in
xchg
leave
cmp
cld
imul
xchg
or
adc
je
mov
aaa
int3
aam
enter
leave
xor
imul
push
adc
xor
sbb
mov
push
retf
xor
imul
push
push
imul
mov
push
int
adc
inc
adc
and
sbb
xchg
aaa
cmp
push
ins
mov
popa
leave
inc
push
data16
loope
aaa
int3
inc
xchg
jge
int
aaa
int3
cmps
mov
mov
neg
jmp
aaa
xor
dec
xchg
out
aaa
int3
adc
pop
(bad)
std
xchg
aaa
repnz
or
repz
out
loop
es
mov
int3
fwait
ins
fxch
xchg
popf
daa
int3
in
call
aaa
xor
imul
inc
cmps
sub
fidivr
cmp
in
xchg
leave
cmp
in
cmp
in
xchg
mov
ss
ror
sbb
xchg
aaa
ins
dec
xor
lock
loopne
mov
push
fwait
gs
loop
cmp
sub
cmc
push
mov
ror
imul
dec
mul
std
inc
scas
sub
mov
imul
pop
jmp
out
pop
dec
mov
jno
adc
shl
pop
mov
jno
adc
shl
mov
adc
jbe
push
and
inc
sahf
bnd
lea
aaa
stc
arpl
in
dec
dec
in
mov
xor
sahf
lods
retf
fwait
sub
mov
in
and
adc
data16
mov
(bad)
dec
mov
push
xchg
leave
cmp
sub
push
shr
xor
inc
jbe
loopne
xor
loopne
retf
sbb
test
xor
ins
dec
jbe
push
inc
icebp
xchg
mov
mov
ins
mov
inc
sbb
xor
ins
dec
jbe
push
ds
test
iret
mov
ins
mov
xor
test
dec
xor
imul
mov
inc
xchg
mov
in
leave
or
dec
jbe
ins
dec
jbe
push
(bad)
mov
xchg
aaa
int3
aam
cmp
xor
sub
dec
jbe
push
cmp
xor
lea
jmp
retf
sbb
imul
jbe
push
xchg
ins
dec
mov
cdq
arpl
lahf
mov
dec
ret
jecxz
inc
or
xor
mov
out
loopne
pop
in
imul
(bad)
enter
dec
sti
in
sub
adc
retf
and
outs
push
ja
push
dec
int3
adc
and
mov
dec
aaa
xchg
cli
sar
(bad)
stos
ins
call
bound
imul
rcl
imul
xor
mov
out
mov
int3
fwait
scas
inc
inc
push
aas
aaa
inc
sbb
dec
xor
xchg
aaa
arpl
add
xor
xchg
aaa
arpl
enterw
or
and
inc
hlt
dec
aaa
add
inc
loopne
lods
fwait
mov
test
imul
int3
addr16
mov
xor
ss
lock
loopne
mov
jns
gs
(bad)
ins
es
pop
dec
hlt
ja
enter
mov
pop
adc
enter
enter
aaa
inc
sbb
inc
cmc
xchg
xchg
aaa
inc
or
mov
adc
dec
adc
pop
or
jae
xor
cmc
loopne
(bad)
fwait
scas
mov
bound
imul
js
and
imul
fisub
imul
(bad)
fwait
scas
mov
xor
inc
jbe
loopne
ret
stc
outs
inc
jbe
loopne
ret
in
sbb
pusha
in
sbb
gs
jl
xor
aas
and
imul
xor
adc
ins
dec
mov
dec
fistp
cmp
test
jmp
xor
imul
xor
xchg
mov
xor
loopne
mov
xchg
mov
push
stos
adc
xor
sahf
das
mov
js
mov
fcmovnbe
cmp
xor
jmp
adc
mov
inc
xchg
call
js
xor
add
mov
adc
cmp
push
imul
arpl
imul
out
(bad)
(bad)
fwait
scas
jo
adc
ins
dec
xor
lock
loopne
bound
lahf
mov
stc
retf
fwait
scas
mov
xor
add
pop
adc
enter
enter
rcr
cmp
xor
sbb
add
xor
jmp
hlt
js
mov
fstp
cmp
xor
inc
jbe
cmp
inc
add
dec
bound
imul
fcom
xor
jmp
data16
mov
inc
sbb
lds
xchg
sub
mov
imul
fcom
push
les
loop
iret
fwait
stos
leave
icebp
fwait
cmp
pusha
in
sbb
pop
push
mov
xor
add
rcl
and
(bad)
jns
call
push
ja
pop
daa
mov
xor
jmp
outs
cmp
cvttps2pi
aaa
aam
neg
outs
cdq
inc
jbe
loopne
xor
loopne
iret
inc
add
rcl
and
imul
ins
dec
mov
cdq
pusha
inc
ds
outs
sbb
mov
fcom
mov
xchg
push
or
sub
(bad)
enter
aaa
fadd
data16
sub
mov
(bad)
cmp
xor
sahf
mov
jno
sbb
mov
cmp
xchg
push
imul
and
inc
aas
lahf
mov
mov
jmp
stos
scas
hlt
push
mov
xor
or
xor
adc
mov
adc
retf
xor
imul
jmp
stos
dec
dec
add
xor
or
jbe
data16
adc
(bad)
int3
stc
inc
jo
jl
enter
(bad)
out
fwait
stos
mov
shl
jbe
jmp
int3
mov
test
mov
cs
adc
movs
int3
adc
mov
adc
mov
push
imul
sub
shl
jle
in
data16
pop
cwde
dec
repz
(bad)
fist
ins
dec
pop
cli
imul
push
mov
jmp
stos
inc
jbe
data16
cdq
cmp
cmp
jnp
jecxz
test
mov
and
mov
sbb
mov
into
push
les
popa
mov
(bad)
or
push
lea
call
cmp
sub
mov
inc
popa
loope
adc
mov
dec
mov
pop
mov
push
imul
adc
inc
out
push
pop
mov
stc
pop
mov
cmp
add
stc
pop
mov
cmp
jae
stc
pop
mov
cmp
jae
stc
pop
mov
cmp
inc
enter
adc
adc
mov
mov
and
stc
pop
mov
cmp
add
stc
pop
mov
cmp
or
stc
pop
mov
cmp
push
cmp
mov
add
mov
adc
xor
pop
mov
cs
mov
adc
inc
sub
and
mov
sbb
pop
mov
cmp
lock
stc
pop
mov
cmp
fild
test
dec
or
stc
pop
mov
cmp
mov
jne
jnp
out
xchg
enter
pushf
mov
out
push
enter
sbb
push
imul
push
cmp
mov
push
imul
xor
mov
jmp
mov
inc
out
xor
stc
pop
sbb
stc
pop
mov
cmp
arpl
loopne
mov
in
pop
mov
cmp
imul
rol
pop
add
stc
pop
mov
cmp
shl
stc
pop
mov
push
imul
sbb
mov
mov
mov
sar
pop
mov
cmp
arpl
loopne
mov
in
pop
mov
cmp
imul
and
cmps
pop
pop
add
stc
pop
mov
cmp
shl
stc
pop
mov
cmp
push
sti
push
fxch
in
stos
or
mov
cmp
mov
push
gs
pop
mov
iret
fwait
sub
mov
(bad)
loopne
xlat
fwait
sub
add
loopne
rcr
mov
retf
iret
je
(bad)
ret
adc
(bad)
adc
mov
or
mov
out
loopne
xor
cmp
pop
in
aaa
push
stos
inc
jmpw
enter
cmc
push
xchg
enter
dec
jl
imul
adc
xor
imul
mov
in
inc
repnz
sub
stos
in
inc
icebp
call
inc
pusha
jge
dec
gs
jmp
cdq
mov
jns
test
loope
call
rcl
imul
xor
sub
test
data16
call
loop
iret
fwait
stos
stc
icebp
fwait
cmp
pop
sbb
pop
xor
imul
pop
imul
arpl
in
rcr
cwde
fcmovnbe
daa
enter
inc
jbe
cmp
adc
enter
in
mov
enter
xor
push
movs
inc
jbe
jmp
sbb
push
push
cmp
addr16
int3
in
ss
push
imul
and
inc
aas
lahf
lea
cdq
stc
ret
fwait
scas
and
imul
(bad)
clc
push
or
or
xor
call
jno
imul
mov
addr16
and
(bad)
popa
inc
lock
enter
mov
ror
mov
jecxz
das
shl
loopne
jl
adc
fs
mov
int3
es
pusha
mov
inc
in
adc
push
imul
xor
aam
xor
sub
arpl
add
mov
jne
adc
(bad)
iret
stc
jle
cmc
das
and
xor
loop
jecxz
sub
add
jmp
push
imul
xor
sub
inc
retf
enter
imul
retf
retf
cdq
jl
mov
stc
and
mov
int
scas
sub
or
mov
xor
loopne
out
cli
enter
loop
out
sbb
data16
ror
cmc
jecxz
sub
fist
adc
ins
and
xor
xchg
inc
icebp
sbb
jns
in
push
adc
push
imul
js
mov
mov
scas
sub
arpl
je
xor
jmp
adc
(bad)
(bad)
stc
jle
cmc
adc
fwait
mov
jbe
loop
jecxz
sub
add
jmp
push
imul
xor
sub
inc
retf
enter
imul
loop
cmp
push
cdq
inc
es
aam
xor
jns
jbe
ins
imul
pop
mov
jno
push
(bad)
ret
pusha
mov
in
adc
push
imul
rcr
sub
mov
adc
les
fwait
mov
push
(bad)
aam
xor
mov
xchg
(bad)
sub
mov
std
push
and
fwait
cdq
aas
aad
sub
mov
cli
cmp
adc
push
imul
pop
adc
enter
enter
enter
aaa
inc
sbb
inc
jbe
add
mov
mov
lea
test
enter
cs
in
sbb
fistp
enter
xor
imul
push
imul
and
adc
pusha
inc
ds
jb
(bad)
mov
xchg
test
mov
sbb
enter
aad
int
enter
enter
inc
mov
xchg
aaa
int3
fwait
scas
and
pop
imul
and
or
clc
test
xor
nop
xlat
sbb
loopne
push
scas
dec
hlt
push
loopne
mov
in
call
enter
leave
fdivr
or
adc
test
jb
pop
or
bound
xchg
iret
bnd
loope
fwait
mov
or
std
cmc
int3
in
xchg
aaa
mov
xchg
leave
mov
mov
aaa
int3
adc
inc
icebp
in
leave
inc
sbb
dec
ss
xchg
aaa
add
in
into
int3
in
xchg
cli
mov
in
cmp
pop
out
mov
lahf
in
xor
in
xchg
cwde
fstp
xor
scas
mov
xor
mov
xor
dec
enter
arpl
ins
xor
loopne
(bad)
out
xchg
aaa
mov
aam
mov
jno
cmp
add
enter
dec
ret
out
xchg
aaa
arpl
shl
adc
xor
out
aaa
int3
cli
xor
xor
xchg
jge
out
xchg
aaa
fnsetpm(287
das
enter
mov
pop
iret
mov
xor
xchg
cwde
fneni(8087
and
xor
imul
inc
add
push
imul
inc
add
xor
jmp
enter
jl
adc
or
push
imul
int3
in
cmp
fisttp
imul
in
push
imul
mov
popa
enter
or
dec
aaa
xchg
cli
sar
(bad)
inc
cmp
daa
lods
dec
adc
loopne
int3
pop
sbb
(bad)
dec
imul
mov
push
xchg
cwde
pop
adc
div
sbb
imul
push
pop
imul
int3
push
jmp
xor
adc
xor
push
fmul
addr16
and
enter
and
imul
lock
loopne
lods
pop
push
jmp
pusha
push
imul
inc
push
xchg
mov
int3
addr16
and
adc
mov
jno
outs
sar
(bad)
inc
(bad)
daa
jge
sbb
and
mov
arpl
sbb
int3
addr16
inc
sbb
dec
test
loopne
bound
ja
aas
in
mov
mov
(bad)
retf
inc
in
iret
inc
add
pop
adc
retf
imul
cmp
int3
xor
pusha
or
pop
or
and
sbb
int3
addr16
xor
sbb
int3
addr16
and
sbb
and
sbb
std
jmp
mov
xor
pop
or
mov
dec
fild
aas
lahf
mov
or
inc
jbe
(bad)
aas
jbe
or
adc
fdiv
adc
inc
hlt
aam
enter
cwde
pop
or
xor
aaa
inc
push
xchg
mov
xor
pusha
or
pop
or
cs
sub
mov
inc
add
xor
pusha
or
xchg
mov
xor
pop
or
or
in
adc
aam
sub
mov
cli
test
jbe
ss
cli
sar
(bad)
inc
cmp
mov
jmp
jno
imul
push
imul
iret
(bad)
sub
or
mov
retf
fwait
scas
stc
repz
xor
adc
rdpmc
adc
xor
mov
jno
sub
(bad)
sub
cmp
sbb
add
sbb
jmp
iret
(bad)
sub
fistp
xor
dec
mov
add
fwait
mov
inc
ja
ins
inc
es
mov
fwait
cmp
lock
loopne
bound
sahf
fs
sbb
mov
out
and
iret
fwait
stos
loope
fwait
cmp
mov
cs
lds
loopne
sbb
cmp
adc
and
gs
retf
cmp
int3
xor
call
enter
dec
repz
div
lods
shr
inc
dec
cvttps2pi
adc
outs
ret
loop
and
imul
xor
or
mov
out
loopne
jae
push
inc
ret
adc
enter
dec
pop
out
and
xor
pusha
aaa
inc
pavgb
xor
cmp
inc
add
inc
jbe
loopne
add
loopne
iret
fwait
mov
retf
stc
(bad)
stc
repz
outs
dec
jbe
retf
adc
xchg
push
imul
and
inc
aas
lahf
mov
jl
cld
mov
aam
and
push
xchg
inc
hlt
ret
mov
sbb
mov
xor
loopne
(bad)
xchg
xchg
vmovdqa
test
pop
dec
ret
arpl
inc
sbb
aaa
and
cmp
ins
sti
jne
sbb
inc
test
enter
jg
in
data16
sub
xor
mov
push
push
inc
loopne
mov
imul
neg
repnz
push
data16
pop
mov
or
pop
dec
mov
xor
je
adc
test
data16
in
push
(bad)
retf
pusha
mov
ss
push
not
test
adc
mov
enter
jbe
imul
mov
fdivr
xor
jmp
xchg
int3
and
out
xchg
enter
cmp
in
xchg
aaa
arpl
sbb
fist
lods
sar
pop
or
das
(bad)
enter
xor
in
xchg
enter
and
push
imul
cmp
imul
jo
imul
stos
jo
xor
sahf
ins
retf
in
xchg
aaa
mov
in
loop
jmp
xchg
aaa
pop
scas
mov
into
in
pop
inc
cmps
(bad)
xchg
xor
xor
imul
mov
xchg
xchg
aaa
int
shr
aad
in
sbb
out
xchg
inc
cmc
in
sbb
pop
push
push
mov
adc
cmp
loop
push
mov
ficom
dec
sti
in
sub
adc
retf
mov
int3
out
xchg
leave
leave
inc
xor
in
push
imul
jbe
imul
push
imul
int3
cli
in
xor
jmp
adc
ret
imul
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
add
add
stos
in
dec
leave
pop
adc
(bad)
enter
enter
aas
retf
jne
in
xchg
aaa
fs
pop
jno
and
push
imul
sub
hlt
loopne
sti
in
xchg
aaa
mov
adc
cmp
imul
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
push
imul
add
sub
int3
cmps
xchg
aaa
int
sbb
neg
add
adc
stos
in
dec
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
push
imul
ret
in
inc
mov
xchg
xor
test
imul
xor
ins
mov
cli
loopne
xor
shr
(bad)
jmp
inc
mov
xchg
ss
inc
add
in
push
imul
int3
addr16
mov
mov
in
cmp
arpl
add
cli
and
adc
(bad)
jmp
xor
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
and
in
push
imul
int3
cli
cmp
xor
jmp
fwait
scas
and
push
imul
xor
ins
mov
jp
sub
xchg
jge
in
xchg
aaa
fstp
sub
rcr
mov
in
fdiv
in
xchg
and
imul
loopne
imul
xor
ins
mov
cli
test
xor
shr
(bad)
jmp
inc
mov
xchg
ss
inc
add
in
push
imul
mov
je
xor
adc
adc
stos
in
call
aam
int3
out
xchg
lahf
fild
push
int3
out
xchg
cwde
int3
addr16
mov
xchg
ss
inc
add
in
push
imul
fisttp
enter
enter
aas
retf
int
xor
jno
adc
stos
in
call
mov
fs
sub
xor
jmp
adc
ret
imul
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
or
dec
imul
xor
lock
retf
int
add
add
push
imul
int3
cli
jo
xor
jmp
adc
ret
imul
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
cmp
sbb
pop
in
push
imul
iret
in
xchg
aaa
arpl
push
jno
cmp
adc
mov
jge
mov
sbb
xor
ins
mov
jp
push
jno
xchg
jge
in
xchg
aaa
(bad)
lods
ror
pop
rcl
and
enter
enter
xor
jp
sub
xchg
jge
in
xchg
aaa
fld
xor
sub
xor
lock
retf
int
xor
jno
adc
stos
in
call
mov
fs
dec
mov
adc
or
xchg
adc
xor
imul
adc
push
mov
imul
imul
into
in
imul
int3
out
xchg
retf
mov
xchg
xor
int3
in
xchg
mov
int3
out
xchg
retf
mov
fcomip
or
imul
icebp
jae
inc
retf
stos
jae
xor
rol
rcl
or
xchg
aaa
into
in
loopne
mov
or
int3
in
mov
mov
in
and
jge
ret
cmp
jo
out
xchg
dec
mov
imul
int3
in
xchg
aaa
xchg
xchg
ss
in
sbb
mov
in
cmp
out
xchg
ss
inc
add
pop
sub
xor
sub
xor
lock
retf
int
add
xchg
in
push
imul
int3
cli
and
xor
jmp
fwait
scas
and
push
imul
xor
ins
mov
jp
push
jno
xchg
jge
in
xchg
aaa
(bad)
sub
xor
sub
xor
lock
retf
int
add
cmp
push
imul
int3
cli
xchg
mov
adc
or
xchg
in
je
out
xchg
dec
xor
imul
int3
cdq
in
xor
in
xchg
icebp
mov
xchg
xor
int
xchg
inc
mov
xchg
xor
ret
fwait
scas
and
push
jne
mov
xchg
ss
sti
xor
xor
jmp
aaa
xor
imul
cdq
sub
adc
xor
in
xchg
(bad)
mov
push
xor
in
xchg
inc
mov
xchg
xor
pop
dec
mov
xor
xchg
cwde
fistp
xor
popf
aaa
into
in
jmp
adc
mov
lods
xchg
xor
or
imul
inc
data16
lods
xchg
xor
(bad)
in
xchg
aaa
arpl
xor
xor
in
(bad)
in
xchg
aaa
arpl
shl
in
jmp
out
xchg
aaa
xchg
xchg
ss
in
sbb
int3
cmps
cdq
aaa
into
in
loop
iret
in
xchg
aaa
arpl
push
jno
cmp
call
(bad)
jno
xlat
push
imul
mov
xchg
aaa
mov
in
loopne
(bad)
enter
aas
retf
int
add
xchg
in
push
imul
int3
cli
lods
div
adc
or
cli
call
ret
imul
outs
jp
clc
int3
sub
int3
cmps
xchg
aaa
int
sub
sbb
jno
adc
stos
in
dec
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
imul
xchg
xchg
xor
xor
call
enter
aaa
int
in
xor
xchg
aaa
arpl
fdiv
int3
in
xchg
fist
sahf
aaa
int3
xchg
lods
les
in
pusha
or
in
ss
in
add
in
push
imul
int3
cli
inc
div
adc
or
cli
xor
adc
ret
imul
outs
jp
outs
int3
sub
int3
cmps
xchg
aaa
int
add
neg
or
in
dec
leave
pop
adc
pop
fnstenv
xor
in
xchg
and
sub
enter
inc
ret
cmp
div
adc
ret
imul
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
xor
sbb
cli
in
push
imul
int3
cli
int3
div
adc
or
cli
or
xor
rol
xor
imul
outs
dec
and
enter
enter
xor
aam
int3
in
xchg
lahf
pop
sub
mov
inc
add
adc
cmp
imul
leave
pop
adc
pop
dec
mov
xor
fdiv
in
xchg
and
imul
fnsave
enter
div
adc
ret
imul
outs
jp
clc
int3
sub
int3
cmps
xchg
aaa
int
sub
neg
adc
adc
stos
in
dec
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
das
imul
test
imul
xor
ins
mov
cli
int3
cmc
xor
shr
(bad)
jmp
inc
mov
xchg
ss
inc
add
in
push
imul
pop
cmp
xor
in
xchg
and
(bad)
popa
inc
ret
in
inc
mov
xchg
xor
push
das
imul
xor
ins
mov
jp
sub
xchg
jge
in
xchg
aaa
fist
lods
rcr
mov
in
fdiv
in
xchg
and
enter
and
das
imul
xor
ins
mov
jp
sub
xchg
jge
in
xchg
aaa
fistp
enter
rcr
mov
in
fdiv
in
xchg
and
imul
ret
cmp
hlt
xor
rol
xor
imul
outs
jp
ret
repnz
int3
cmps
xchg
aaa
int
add
neg
in
in
in
xchg
aaa
arpl
xchg
cwde
pop
adc
add
adc
test
imul
in
dec
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
cs
ret
cmp
push
jno
xchg
jge
in
xchg
aaa
(bad)
lods
rcr
push
enter
enter
aas
retf
int
add
cmp
push
imul
int3
cli
in
xor
jmp
adc
and
adc
(bad)
jmp
pop
mov
jns
xor
ds
mov
xchg
ss
inc
add
out
push
imul
fisttp
enter
aas
retf
int
add
cmp
push
imul
int3
cli
push
hlt
xor
jmp
adc
aaa
fstp
push
enter
sar
sub
cmp
imul
leave
pop
adc
pop
loop
mov
in
fdiv
in
xchg
and
sub
mov
popa
and
sbb
xor
ins
mov
cli
shl
adc
stos
xor
imul
out
xchg
ss
inc
add
in
push
imul
pop
ret
xor
fdiv
in
xchg
and
popa
mov
xor
mov
xor
mov
xor
loopne
fucomi
xchg
aaa
mov
add
jge
in
xchg
aaa
(bad)
inc
mov
xchg
ss
inc
cmp
xchg
xchg
ss
in
fsub
int3
out
xchg
and
xor
add
imul
int3
cli
mov
cmp
hlt
loopne
mov
xchg
aaa
mov
and
test
into
in
ss
push
imul
and
adc
lods
xor
dec
jp
xor
jmp
fsubr
call
enter
aaa
arpl
adc
int3
in
xchg
aaa
arpl
mov
xor
add
pop
xchg
mov
xor
xchg
cwde
pop
adc
mov
mov
int3
in
jmp
cwde
sub
movhps
jbe
adc
lock
push
imul
mov
aad
int3
in
add
out
push
imul
xor
enter
mov
div
loopne
add
loopne
ins
fld
and
adc
pusha
inc
ds
add
mov
js
xor
mov
xchg
xchg
aaa
int3
fwait
scas
dec
xchg
mov
cmp
test
dec
mov
push
popa
inc
aaa
pop
push
dec
mov
jmp
mov
xchg
scas
int
cli
sbb
xor
loop
cmp
loopne
xchg
out
xchg
aaa
gs
xor
xor
loopne
dec
out
xchg
aaa
int3
cmps
leave
xor
add
imul
out
xchg
aaa
mov
inc
imul
fwait
cld
push
into
in
xchg
inc
retf
cmp
loopne
adc
mov
xchg
aaa
int3
in
fsubr
in
xchg
and
sbb
stos
out
xchg
aaa
fist
enter
sar
in
cmp
loop
inc
out
xchg
aaa
mov
inc
imul
fwait
cld
inc
into
in
xchg
mov
(bad)
pop
enter
pop
into
in
xchg
mov
mov
xchg
aaa
int3
inc
cmp
retf
and
std
xor
cmp
pop
sub
pop
push
push
jl
in
xchg
cwde
pop
mov
fst
adc
retf
jmp
aaa
mov
dec
shl
fs
fcmovnb
pop
enter
and
imul
int3
jp
leave
xor
in
iret
in
xchg
aaa
arpl
xchg
cwde
fistp
pop
into
in
xchg
aaa
xchg
fadd
xchg
aaa
xchg
fcom
in
xchg
aaa
xchg
in
xchg
xchg
aaa
arpl
push
cmp
in
jmp
in
xchg
shl
fs
fstp
enter
and
adc
pop
mov
mov
lahf
in
xor
in
xchg
cwde
fcmovnb
push
enter
stc
retf
fwait
scas
inc
mov
xchg
aaa
int3
inc
in
iret
in
xchg
aaa
arpl
aam
xor
sbb
mov
xchg
aaa
int3
xchg
scas
leave
push
adc
ja
imul
inc
xor
test
xchg
aaa
ja
imul
xor
mov
jle
aaa
int3
fwait
scas
movzx
xchg
aaa
int3
adc
xor
fucomi
xchg
aaa
xor
jmp
data16
hlt
xchg
xor
mov
push
mov
mov
xchg
aaa
arpl
mov
int3
in
xor
mov
aaa
int3
inc
in
mov
xchg
aaa
arpl
mov
xor
mov
int
xchg
cwde
pop
adc
shl
in
xor
imul
int3
cli
mov
daa
stos
or
int3
cmps
std
xor
in
push
imul
int3
in
cmp
hlt
and
jns
mov
xchg
aaa
int3
adc
xor
in
xchg
aaa
arpl
adc
adc
inc
lock
retf
xor
add
jns
aaa
int3
adc
dec
pop
out
xchg
aaa
movhps
add
leave
sbb
enter
cld
xor
jmp
data16
fild
xor
sahf
das
mov
in
loopne
pop
push
push
xor
in
xchg
cwde
pusha
cli
lods
cld
xor
add
pop
js
mov
lahf
in
xor
in
xchg
cwde
fstp
aaa
int3
xchg
lods
les
in
xchg
enter
dec
xchg
mov
xor
loopne
fadd
ins
scas
out
xchg
aaa
xor
imul
into
in
xchg
enter
xor
pop
es
xor
aas
and
xchg
jge
out
xchg
aaa
fcmovne
pop
enter
ins
into
in
xchg
and
xchg
cmc
xor
mov
aad
xchg
push
inc
loopne
mov
jge
gs
loop
daa
lods
dec
into
leave
or
xor
cmc
loopne
ret
fwait
scas
stc
retf
fwait
scas
aaa
inc
sbb
inc
icebp
je
popf
int
sbb
fcmovne
pop
enter
scas
mov
add
inc
icebp
je
popf
lds
or
adc
icebp
je
popf
(bad)
xchg
xchg
adc
test
mov
mov
inc
ja
inc
cwde
pop
adc
inc
cmc
and
(bad)
cmps
shl
(bad)
fistp
xchg
inc
hlt
js
inc
jbe
cmp
push
cmp
loopne
imul
inc
sbb
cmp
inc
pop
enter
les
outs
int
inc
or
jbe
in
xor
out
in
and
cmp
adc
imul
mov
push
xchg
inc
ja
ins
mov
sub
int3
add
imul
inc
add
imul
mov
jmp
mov
imul
gs
and
xor
aas
and
imul
ins
dec
mov
jo
or
pop
enter
lahf
mov
sbb
push
dec
(bad)
repnz
aaa
jae
imul
xor
in
(bad)
repnz
aaa
arpl
xchg
cwde
pop
je
mov
cli
mov
xor
loopne
cmp
dec
stos
adc
mov
aad
aaa
xchg
mov
int3
cli
fdivr
xor
jmp
in
fadd
shr
xchg
aaa
inc
push
sbb
(bad)
cmc
loopne
mov
xchg
aaa
mov
stc
aaa
movzx
jbe
xor
xchg
cwde
mov
in
cmp
xor
test
rol
imul
pop
adc
neg
pusha
or
xchg
jge
repnz
aaa
int3
addr16
cmp
sahf
das
mov
in
loopne
add
sub
aaa
stc
int
repz
aaa
xchg
cli
sar
(bad)
stos
jne
xor
and
loop
cmp
or
imul
in
in
xchg
inc
cmc
cmp
int3
xor
imul
mov
push
jmp
xor
enter
cli
data16
in
jmp
adc
and
enter
jo
jb
enter
dec
ret
int
aaa
mov
in
loopne
mov
aam
xchg
push
imul
inc
or
neg
sub
adc
stos
in
dec
leave
pop
adc
pop
loop
mov
lahf
in
enter
cwde
fist
pop
enter
shl
xor
adc
stos
in
dec
leave
pop
adc
(bad)
enter
aas
retf
jne
repnz
aaa
fs
adc
adc
jne
repnz
aaa
fs
hlt
sti
xor
jmp
adc
ret
imul
outs
jge
ret
repnz
mov
in
cmp
test
imul
add
sub
mov
in
cmp
mov
imul
ret
in
inc
mov
mov
int3
fwait
scas
and
imul
xor
ins
mov
jp
sub
in
xor
xchg
aaa
arpl
cmp
xor
jmp
adc
ret
imul
outs
inc
and
and
mov
enter
xor
aam
shr
xchg
lahf
pop
dec
mov
xor
xchg
lahf
fnsetpm(287
pop
enter
fmul
addr16
and
sub
mov
in
cmp
mov
in
cmp
loopne
imul
and
enter
enter
xor
jp
sub
in
xor
xchg
aaa
arpl
mov
or
jp
pop
jno
in
xor
xchg
aaa
arpl
aam
xor
jmp
adc
inc
and
mov
imul
mov
ins
mov
jp
sub
in
xor
xchg
aaa
arpl
clc
cli
xor
jmp
adc
dec
xor
xchg
aaa
arpl
adc
xor
jmp
adc
ret
imul
outs
inc
and
imul
xor
aam
shr
xchg
lahf
pop
dec
mov
xor
xchg
lahf
fisttp
enter
fcomp
mov
xor
xchg
cwde
fstp
enter
rcr
pop
enter
enter
aas
retf
int
push
add
rcl
inc
mov
mov
int3
inc
add
neg
loopne
sbb
loopne
pop
pop
mov
xor
xchg
cwde
(bad)
pop
enter
rcr
pop
enter
enter
aas
retf
int
push
add
rcl
inc
mov
mov
int3
inc
add
neg
add
in
push
imul
inc
cmp
cmp
stos
in
dec
leave
pop
adc
pop
loop
mov
lahf
in
enter
cwde
fistp
shl
xchg
mov
shr
xchg
cwde
pop
cmp
mov
lahf
in
enter
cwde
fist
xor
pop
enter
enter
aas
retf
int
push
add
rcl
inc
mov
mov
int3
inc
or
push
imul
inc
cmp
neg
rcl
sub
imul
in
in
xchg
inc
cmc
cli
mov
xor
rol
xor
imul
outs
jge
ret
repnz
mov
in
cmp
enter
mov
popa
and
push
xor
call
enter
enter
lahf
pop
add
mov
lahf
aam
shr
xchg
lahf
(bad)
fcomp
xchg
pop
enter
enter
aas
retf
int
push
add
rcl
inc
mov
mov
int3
inc
sub
add
out
push
imul
inc
sbb
sbb
or
enter
enter
enter
aas
retf
int
push
add
rcl
inc
mov
mov
int3
inc
sub
adc
cmp
imul
leave
pop
adc
fistp
enter
enter
aas
retf
jne
repnz
aaa
fs
adc
adc
jne
repnz
aaa
fs
ins
clc
xor
jmp
adc
dec
xor
xchg
aaa
arpl
jl
xor
jmp
js
mov
xor
imul
iret
int
aaa
mov
cs
adc
dec
xor
xchg
aaa
arpl
jl
xor
add
mov
in
ds
mov
in
ds
xchg
mov
int3
cli
test
xor
xchg
jge
int
aaa
fist
mov
push
loopne
(bad)
hlt
loopne
xlat
int
aaa
mov
fld
and
push
imul
js
test
jmp
scas
out
xchg
aaa
xor
lahf
dec
les
xor
pusha
cli
shl
adc
popf
cmp
cld
pop
into
in
xchg
jo
adc
(bad)
cmc
loopne
mov
xchg
aaa
mov
adc
fld
inc
enter
cmp
in
add
in
imul
mov
in
add
pop
adc
dec
xchg
out
xchg
aaa
arpl
movs
out
adc
int3
xor
imul
inc
add
push
imul
mov
retf
sub
pop
sbb
enter
leave
xor
in
iret
in
xchg
aaa
arpl
xchg
cwde
fist
xor
sahf
das
mov
in
loopne
int3
cmps
leave
xor
mov
xchg
aaa
int3
inc
sbb
neg
pusha
or
adc
xor
add
push
imul
inc
and
xchg
aaa
int3
inc
in
iret
in
xchg
aaa
arpl
lock
adc
inc
mov
xchg
aaa
int3
fwait
xchg
loope
fwait
scas
mov
mov
xchg
aaa
int3
inc
adc
test
loopne
hlt
xchg
shl
int3
in
sub
dec
xlat
in
xchg
aaa
xor
imul
int3
in
imul
adc
xor
jmp
int3
in
cmp
jecxz
xchg
aaa
push
in
ins
into
in
xchg
cwde
mov
in
cmp
adc
mov
mov
xchg
aaa
int3
inc
add
fist
inc
enter
(bad)
mov
push
pusha
into
in
xchg
and
cmp
mov
enter
inc
mov
xchg
aaa
int3
fwait
scas
aaa
xchg
jnp
jno
add
mov
xchg
aaa
int3
inc
and
scas
dec
dec
jmp
inc
dec
hlt
pop
push
enter
xor
in
xchg
cwde
pop
addr16
xor
dec
jecxz
adc
push
cmp
sbb
pop
cli
push
xor
add
xor
jmp
aaa
xor
xchg
hlt
ss
mov
(bad)
xor
imul
xor
leave
xor
in
mov
inc
add
retf
and
mov
mov
in
cmp
push
mov
gs
int3
in
imul
xor
in
mov
inc
sbb
sbb
cmp
(bad)
xor
add
int3
cmps
std
xor
mov
cli
and
xor
in
scas
out
xchg
aaa
arpl
fcomp
xchg
and
les
aas
mov
enter
xor
sbb
imul
xor
ret
out
push
imul
cmp
sbb
pop
sbb
loope
adc
push
scas
out
xchg
aaa
mov
push
fwait
mov
in
fcomp
xchg
and
lds
and
cdq
in
push
into
in
xchg
dec
(bad)
cmp
int3
in
sbb
neg
loopne
(bad)
cmc
loopne
inc
jmp
aas
and
cmp
hlt
xchg
cmc
xor
xor
in
xchg
xchg
aaa
arpl
aam
xor
add
int3
cmps
int
int3
in
xor
retf
cmp
ins
into
in
xchg
and
cmp
mov
in
ss
push
inc
loopne
mov
jns
gs
loop
cmp
loopne
(bad)
cmc
loopne
retf
fwait
scas
fistp
xor
and
imul
adc
pop
push
cmp
xor
ss
inc
jbe
loopne
pusha
cli
jo
xor
xchg
mov
xor
enter
fild
enter
xor
js
sahf
pop
outs
aaa
mov
js
mov
xor
loopne
mov
aad
aaa
gs
fsub
xor
in
iret
inc
aas
and
add
xor
loop
iret
stc
outs
inc
retf
cmp
xchg
cli
sar
(bad)
stos
ins
fdiv
adc
sahf
lods
lahf
int3
sbb
pop
xor
fwait
in
xor
in
xchg
inc
hlt
js
aaa
inc
sbb
inc
cmc
fwait
xchg
leave
retf
fwait
scas
rol
ins
stc
repz
sub
mov
in
cmp
xor
aaa
inc
push
in
xor
xchg
aaa
arpl
and
in
jmp
adc
fidiv
adc
retf
lock
adc
push
fdivr
cmp
(bad)
xchg
test
lods
ins
loopne
aas
call
enter
xor
and
aad
jg
in
cmp
mov
movs
inc
enter
cmp
js
mov
int3
daa
jmp
fcomp
adc
test
dec
repz
mov
mov
cwde
inc
enter
sar
adc
mov
adc
push
test
adc
cvtpi2ps
sub
cmp
sub
mov
fs
dec
mov
push
daa
in
jo
retf
cmp
mov
xor
mov
xor
mov
pop
adc
enter
fcomp
cmp
enter
mov
int3
daa
in
imul
imul
js
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
stc
retf
fwait
scas
mov
int3
daa
inc
push
jb
cmp
xor
int3
daa
dec
push
jb
sub
xor
int3
daa
stc
imul
fcomp
adc
xor
int3
daa
sbb
enter
inc
retf
cmp
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
sahf
pop
and
enter
enter
leave
retf
fwait
scas
xchg
ins
sar
(bad)
inc
ds
dec
(bad)
fdivr
push
xchg
inc
hlt
js
aaa
push
cli
hlt
mov
cli
push
out
xor
retf
push
imul
fisttp
dec
enter
aaa
push
xchg
enter
jo
xor
retf
push
imul
mov
sub
fistp
enter
stc
retf
fwait
scas
mov
lods
push
imul
nop
test
adc
xor
daa
inc
push
jb
sub
push
imul
nop
adc
mov
jp
dec
jae
add
daa
jne
jae
or
iret
in
pop
loopne
push
imul
nop
push
mov
jp
dec
jae
add
daa
inc
push
jb
adc
pop
call
mov
imul
xor
dec
jae
add
daa
dec
push
jb
xor
hlt
js
aaa
push
xchg
enter
xor
xor
retf
push
imul
mov
sub
fistp
xor
or
mov
push
aas
lahf
mov
xor
xchg
scas
and
imul
mov
aam
and
push
imul
nop
sbb
mov
xchg
xchg
inc
and
(bad)
enter
loope
fwait
scas
mov
lods
push
imul
arpl
cdq
cwde
pop
adc
enter
dec
arpl
pop
jno
add
call
adc
fstp
enter
push
int3
daa
pop
push
jb
add
arpl
inc
jbe
inc
(bad)
ret
xchg
sub
inc
add
push
imul
push
adc
aaa
lea
enter
std
pop
lea
enter
std
ja
sub
pop
sub
cdq
sub
sbb
dec
(bad)
mov
cmp
jmp
mov
jp
adc
add
fld
or
adc
enter
enter
int
adc
enter
enter
enter
mov
daa
cli
xchg
in
xor
loopne
mov
mov
leave
gs
aaa
push
push
test
adc
enter
push
jb
add
int3
daa
sub
fcomp
imul
js
mov
xor
movs
call
leave
sub
pop
adc
imul
enter
std
pop
lea
enter
std
ja
sub
pop
add
jmp
adc
dec
js
mov
pop
or
adc
add
fild
dec
enter
imul
enter
push
jb
add
int3
daa
sub
fcomp
push
enter
loopne
adc
arpl
adc
add
call
cli
mov
xor
retf
push
imul
js
aaa
push
test
push
leave
mov
js
mov
pop
lods
imul
xor
imul
jno
add
fisttp
jge
jb
add
int3
daa
pop
push
jb
add
int3
daa
or
adc
lods
pop
jbe
bound
adc
daa
jp
enter
adc
push
imul
pop
adc
fisttp
mov
xor
mov
arpl
inc
in
xor
add
xor
leave
xor
xchg
std
fisttp
dec
enter
aaa
push
test
jb
mov
jp
leave
xor
add
pop
mov
adc
pop
into
mov
xor
adc
add
fist
dec
enter
imul
loopne
pop
adc
enter
std
push
mov
enter
enter
mov
pop
mov
push
mov
add
push
imul
adc
imul
daa
xchg
aaa
int3
js
aaa
push
test
push
leave
mov
js
mov
xor
add
xor
imul
jno
add
fist
stc
imul
aas
ret
xor
pop
adc
enter
std
ja
sub
pop
add
dec
xor
imul
xor
enter
fwait
jmp
leave
sub
pop
adc
imul
enter
std
pop
lea
enter
std
ja
sub
pop
add
scas
pop
or
xor
enter
enter
mov
pop
enter
js
and
imul
xor
aaa
push
test
push
leave
mov
js
mov
pop
and
xor
mov
pop
add
adc
add
fcmovnu
dec
enter
push
jb
loopne
xor
loopne
pop
adc
enter
std
ja
sub
pop
add
sahf
pop
pop
push
enter
enter
mov
pop
enter
js
and
retf
js
aaa
push
test
jb
mov
js
mov
pop
sub
js
mov
pop
into
mov
xor
adc
add
xor
imul
nop
xchg
enter
imul
xor
aaa
push
jb
mov
js
mov
pop
shr
xor
mov
pop
or
xor
adc
add
xor
imul
nop
push
cld
mov
fwait
xchg
loope
fwait
scas
mov
lods
push
imul
sub
mov
pop
push
add
xor
sub
pop
adc
retf
adc
sbb
xchg
std
pop
lea
enter
std
push
mov
enter
lods
pop
out
enter
mov
pop
into
mov
xor
adc
add
xor
imul
nop
xor
mov
js
aaa
push
test
push
leave
mov
js
mov
pop
mov
ja
xor
jmp
mov
jp
adc
add
(bad)
xor
and
(bad)
cmc
loopne
fistp
xchg
aaa
ins
dec
mov
dec
fild
aas
lahf
mov
dec
or
xchg
xchg
(bad)
leave
sub
int3
addr16
and
in
aaa
mov
push
imul
nop
sbb
mov
fwait
xchg
loope
fwait
scas
mov
lods
push
imul
mov
cli
test
xor
call
enter
std
pop
lea
enter
inc
jbe
inc
(bad)
mov
cmp
imul
in
push
imul
xor
shr
xor
retf
push
imul
xor
hlt
mov
loop
and
add
pop
push
add
xor
sub
pop
enter
js
and
push
test
adc
xor
pop
cld
lods
push
imul
pop
adc
mov
loop
and
add
xor
sub
pop
enter
js
and
imul
xor
mov
xor
mov
xor
mov
pop
adc
enter
(bad)
nop
dec
enter
mov
int3
daa
ins
push
jb
sub
xor
pop
cld
lods
push
imul
push
js
mov
xor
jmp
mov
jp
adc
add
fcmovnb
jbe
xor
loopne
add
loopne
pop
push
imul
jb
sbb
enter
adc
mov
adc
push
cli
hlt
mov
cli
adc
xor
jmp
enter
mov
jge
imul
jb
adc
jp
leave
xor
xchg
std
fisttp
jbe
xor
aaa
push
test
jb
mov
jp
leave
xor
add
pop
push
add
arpl
pop
jno
add
push
imul
xchg
push
imul
js
aaa
push
test
jb
mov
jp
leave
xor
add
pop
push
add
adc
xor
jmp
mov
jp
adc
add
fucomi
ja
xor
and
lods
push
imul
and
enter
cmps
pop
push
push
enter
fwait
jmp
leave
sub
pop
adc
imul
enter
xor
daa
pop
push
jb
add
int3
daa
sub
fcomp
add
adc
lock
pop
adc
arpl
adc
add
call
cli
adc
xor
retf
push
imul
xor
pop
mov
jp
enter
push
push
jp
enter
fucomi
push
imul
sub
(bad)
adc
enter
std
ja
sub
pop
add
sahf
pop
stos
imul
xor
add
xor
cmp
pop
enter
js
and
or
enter
mov
js
aaa
push
test
push
leave
mov
js
mov
pop
hlt
imul
xor
imul
jno
add
fcmovnb
je
xor
add
int3
daa
pop
push
jb
add
int3
daa
sub
fcomp
imul
xor
add
pop
adc
arpl
adc
add
call
cli
lock
adc
push
xor
pop
cld
lods
push
imul
sub
enter
in
push
add
xor
sub
pop
adc
retf
sub
mov
xchg
fdiv
adc
enter
push
jb
add
int3
daa
or
adc
rcr
add
xor
sub
pop
adc
retf
sub
sbb
xchg
std
pop
lea
enter
std
push
mov
enter
lods
pop
dec
add
pop
adc
arpl
pop
jno
add
jmp
adc
(bad)
jne
xor
add
int3
daa
pop
push
jb
add
int3
daa
sub
fistp
imul
xor
add
pop
adc
arpl
adc
add
jmp
aam
adc
push
nop
push
imul
mov
aad
add
in
xchg
xchg
ins
fld
and
inc
aas
lahf
mov
sbb
push
xchg
scas
sti
cmp
imul
pop
adc
retf
pop
adc
mov
sbb
fistp
dec
int
dec
cmps
adc
pop
adc
and
shl
xor
jmp
xor
jmp
push
imul
arpl
sub
arpl
sbb
pop
das
fisttp
xor
xchg
dec
test
and
xor
sbb
pop
inc
mov
xor
adc
xchg
mov
(bad)
lods
sar
inc
mov
jbe
cmp
inc
add
cmc
xchg
mov
fild
lods
ror
in
inc
jbe
loopne
ins
dec
xor
lock
loopne
mov
popa
leave
xor
cmp
sub
adc
xchg
mov
imul
pusha
or
mov
aam
and
adc
cmp
imul
loopne
xor
mov
xchg
leave
inc
add
jne
push
imul
inc
sub
dec
in
imul
adc
dec
xor
xchg
aaa
arpl
shl
adc
mov
adc
pop
out
mov
lahf
in
enter
cwde
fnsetpm(287
jle
xor
imul
jp
jns
adc
dec
xor
xchg
aaa
arpl
mov
xor
jmp
fstp
fmul
int3
in
xchg
cwde
fcmovnbe
jle
xor
js
js
sub
mov
in
cmp
cwde
add
xchg
iret
inc
add
lods
adc
mov
xchg
aaa
int3
inc
sbb
pop
out
xchg
aaa
int3
fwait
scas
dec
dec
in
popa
mov
jno
in
xor
xchg
aaa
arpl
sbb
xor
jmp
fstp
fmul
int3
in
xchg
cwde
fisttp
enter
aaa
cmp
mov
mov
in
cmp
jo
imul
inc
add
leave
adc
aaa
int3
inc
and
ret
cmp
aaa
aas
addr16
adc
imul
cmp
imul
inc
add
icebp
adc
aaa
int3
inc
xor
dec
in
addr16
jno
in
xor
xchg
aaa
arpl
mov
xor
add
pop
adc
mov
push
imul
int3
in
cmp
fcmovnbe
lea
int3
jp
adc
add
push
imul
int3
jp
out
cmp
sub
cmp
cmp
hlt
loopne
retf
in
xchg
aaa
mov
in
xchg
xchg
push
inc
loopne
pusha
inc
ds
inc
sbb
ins
bound
xchg
inc
hlt
fwait
sahf
sahf
fld
enter
into
xor
and
std
xchg
aaa
mov
popa
shl
popa
mov
sub
imul
(bad)
xchg
test
cmp
imul
ret
and
mov
mov
in
loopne
pop
pusha
fisttp
(bad)
in
xchg
cwde
fild
enter
shl
adc
(bad)
xor
imul
jmp
int3
in
push
jp
adc
dec
fsubp
xchg
aaa
arpl
sbb
adc
jne
jmp
cmc
mov
test
int3
in
cmp
cld
pop
imul
mov
jmp
aam
sub
mov
in
cmp
pushf
pop
imul
int3
in
ins
mov
jno
in
fsubp
xchg
aaa
arpl
cld
fnsave
adc
jne
jmp
sub
test
int3
in
cmp
dec
pop
imul
xor
jmp
aaa
xor
mov
test
int3
in
cmp
push
scas
call
jp
jnp
adc
dec
fsubp
xchg
aaa
arpl
sub
xor
jmp
aaa
cmp
mov
mov
in
cmp
adc
imul
mov
jmp
mov
xchg
test
int3
in
cmp
xor
imul
int3
in
arpl
jno
in
fsubp
xchg
aaa
arpl
test
xor
jmp
aaa
cmp
mov
mov
in
cmp
loopne
imul
mov
in
loopne
mov
call
jp
jnp
adc
dec
fsubp
xchg
aaa
arpl
(bad)
fdiv
adc
jne
jmp
xor
test
int3
in
cmp
mov
scas
call
jp
jl
adc
dec
fsubp
xchg
aaa
arpl
adc
xor
add
mov
sahf
aaa
int3
inc
or
ret
in
inc
mov
sahf
aaa
int3
fwait
scas
mov
pop
popf
fisttp
int3
in
jmp
in
xchg
dec
mov
xchg
aaa
int3
and
aas
int3
in
imul
xor
scas
dec
cmc
ja
enter
mov
jno
sub
neg
loopne
fucomip
xchg
aaa
cmp
dec
in
adc
ficom
push
xor
xchg
enter
retf
jmp
aaa
or
imul
sub
sbb
imul
int3
in
imul
inc
add
jmp
aaa
int3
inc
add
push
shl
adc
aad
in
adc
in
xchg
inc
cmc
xchg
aam
retf
in
xchg
enter
lock
imul
fwait
test
(bad)
xchg
iret
bnd
loope
fwait
mov
repz
xchg
aaa
int3
sbb
imul
adc
pop
or
xor
adc
in
iret
in
xchg
aaa
arpl
shl
adc
es
push
imul
xor
adc
in
iret
jmp
xor
jmp
push
imul
int3
in
cmp
sub
imul
mov
in
loopne
mov
in
cmp
mov
in
cmp
test
mov
xor
xchg
cwde
fcmovnu
jle
xor
xchg
ss
in
cmp
cmp
imul
int3
in
jmp
jmp
jno
in
iret
jmp
xor
jmp
out
xchg
aaa
int3
inc
sub
jp
adc
in
iret
out
xchg
aaa
arpl
in
int3
in
jmp
jnp
enter
xor
in
xchg
dec
repz
cmp
in
imul
retf
in
xchg
jo
add
(bad)
hlt
loopne
out
xchg
aaa
mov
jmp
xor
imul
int3
jp
imul
imul
inc
xor
test
imul
inc
and
mov
xchg
aaa
int3
inc
and
mov
sahf
aaa
int3
stc
dec
inc
mov
sahf
aaa
int3
xchg
aad
iret
in
xchg
aaa
sbb
jns
mov
sahf
aaa
int3
aam
int
in
xchg
aaa
xor
data16
mov
xchg
aam
(bad)
in
xchg
retf
inc
ret
call
enter
xor
in
in
iret
in
xchg
aaa
arpl
adc
in
iret
in
xchg
aaa
arpl
adc
xor
jmp
in
xchg
cwde
fcmovnbe
jp
xor
xchg
inc
mov
xchg
aaa
int3
inc
cmp
ret
int3
lahf
adc
mov
int3
jnp
xor
xchg
jo
sub
(bad)
hlt
loopne
jmp
xchg
aaa
mov
jmp
retf
in
xchg
and
imul
int3
in
cmp
pop
add
mov
in
ds
mov
xchg
aaa
int3
lahf
adc
and
imul
inc
add
int3
cmps
popf
xor
in
add
push
imul
arpl
mov
dec
iret
out
xchg
aaa
arpl
jge
jmp
int3
xchg
lods
les
xchg
outs
xor
fucomip
xchg
aaa
fild
enter
stos
adc
jae
jb
fstp
jl
xor
leavew
in
xchg
xchg
ins
dec
mov
inc
(bad)
stos
or
xor
cmp
inc
sar
aaa
iret
inc
dec
fcom
enter
js
adc
enter
xlat
xor
jl
xor
loopne
xchg
cld
xchg
aaa
cmp
sbb
fnstenv
adc
leave
fucomi
jge
xor
adc
retf
mov
lea
enter
push
jb
std
enter
cmp
push
hlt
mov
cli
xor
xor
add
xor
imul
xor
pop
fnstenv
adc
and
pop
imul
mov
adc
mov
xchg
int3
inc
xchg
mov
xor
add
pop
or
xor
xchg
cwde
fisttp
repnz
int3
xchg
lods
fmul
in
xchg
enter
(bad)
xor
imul
sbb
enter
jl
adc
or
imul
xor
cmp
in
or
adc
mov
cmpxchg
sub
call
mov
test
int3
adc
enter
jne
call
stos
and
or
clc
test
xor
nop
xlat
sbb
loopne
push
scas
dec
cmc
jae
cmp
in
xchg
dec
mov
test
int3
adc
dec
test
xchg
aaa
bndldx
or
adc
aaa
xor
dec
fdiv
adc
or
shr
cmp
in
xchg
sti
cmc
xchg
(bad)
and
mov
test
int3
inc
add
push
imul
int3
in
cmp
xor
imul
nop
(bad)
xchg
aaa
arpl
xchg
cwde
fistp
enter
imul
xchg
cwde
fild
aaa
int3
xchg
call
mov
aaa
int3
inc
or
add
mov
in
cmp
int3
add
mov
rol
leave
fstp
enterw
adc
add
push
imul
xor
hlt
(bad)
adc
adc
retf
mov
in
in
aaa
les
enter
enter
ins
pop
cmps
mov
xor
imul
imul
xor
xchg
inc
push
push
mov
enter
scas
xchg
jp
adc
add
push
imul
xor
push
(bad)
adc
adc
retf
mov
in
in
mov
sub
mov
imul
pop
mov
mov
jp
imul
imul
xor
xlat
and
cmc
les
enter
enter
inc
jmp
mov
lock
mov
xor
mov
pop
adc
mov
cli
in
xor
loopne
xchg
mov
(bad)
sub
int3
sbb
rcr
int3
in
cmp
je
imul
int3
in
jmp
adc
pop
adc
mov
mov
xchg
mov
xor
add
mov
adc
cmp
push
imul
cmp
imul
xor
in
mov
dec
xchg
xchg
aaa
arpl
add
xor
in
xchg
xchg
aaa
mov
xchg
mov
jmp
enter
sahf
arpl
xchg
lahf
int3
frstor
dec
sbb
in
mov
retf
mov
fstp
enter
cmps
xor
sahf
sub
in
loop
xchg
xchg
aaa
mov
cli
cwde
lds
adc
int
leave
sub
mov
adc
push
jb
loopne
call
imul
adc
xor
fadd
xor
loopne
out
mov
jmp
stos
mov
pop
adc
inc
jbe
scas
(bad)
out
adc
xor
and
mov
mov
icebp
loopne
cmp
aaa
mov
in
loopne
hlt
push
aad
xor
imul
xor
scas
(bad)
sti
adc
xor
stos
inc
jbe
cmp
inc
sbb
xchg
std
pop
lea
enter
enter
enter
enter
add
jp
adc
add
call
cli
mov
xor
retf
push
imul
jp
js
adc
enter
aam
adc
xor
jae
int3
in
jmp
adc
adc
mov
jno
cmp
retf
arpl
push
dec
lahf
call
mov
aas
adc
xor
pop
lahf
call
es
in
ins
enter
adc
retf
mov
in
cmp
mov
add
retf
pop
inc
fisttp
xor
xchg
dec
test
jmp
aad
movs
xchg
leave
xor
imul
mov
jno
xor
in
fwait
cld
xchg
aaa
arpl
mov
jae
add
pop
adc
cwde
(bad)
enter
pusha
fucomp
xchg
cwde
pop
adc
enter
mov
js
mov
xor
cmp
jo
imul
xor
imul
add
enter
(bad)
xlat
inc
sbb
mov
lock
sub
arpl
clc
(bad)
xor
add
pop
adc
enter
cwde
fstp
enter
mov
cli
sar
data16
mov
cs
inc
aas
lahf
mov
ins
sbb
cmps
xor
sahf
das
mov
cdq
sub
mov
jns
mov
push
dec
retf
adc
pop
adc
fimul
js
xor
dec
push
adc
push
add
xor
cmc
and
imul
xor
push
lock
imul
xor
push
shl
jmp
sbb
imul
jno
adc
mov
xchg
aaa
int3
fwait
xchg
leave
retf
fwait
scas
mov
int3
cmps
xor
test
xchg
aaa
mov
in
cmp
xchg
xchg
aaa
int3
cli
mov
xor
pusha
or
in
enter
dec
imul
xchg
aaa
arpl
pop
mov
push
imul
mov
in
inc
dec
out
xchg
aaa
mov
ins
inc
cmps
ficom
into
in
xchg
icebp
jecxz
jbe
mov
xchg
aaa
int3
cmp
adc
in
xchg
dec
fist
loop
jecxz
xchg
aaa
sbb
push
sbb
add
mov
in
inc
dec
jmp
xchg
aaa
arpl
xchg
jecxz
(bad)
xchg
aaa
int3
inc
add
pop
adc
enter
enter
loope
fwait
scas
dec
push
jbe
mov
adc
mov
jbe
mov
mov
jl
adc
xor
jmp
jno
imul
adc
int3
daa
add
sub
mov
sbb
push
enter
mov
imul
aaa
push
and
xor
loopne
sbb
loopne
xchg
adc
mov
sub
cmp
pop
iret
xor
add
fcmovnb
gs
iret
xor
enter
imul
int3
addr16
and
push
imul
mov
in
loopne
ficom
outs
enter
fdivr
in
call
enter
imul
mov
pop
sbb
hlt
or
pop
push
jb
sbb
push
jb
sbb
imul
in
or
adc
aam
pop
leave
imul
fmul
pop
gs
jb
sbb
push
jb
dec
cdq
adc
enter
mov
xor
loop
(bad)
in
xchg
aaa
or
adc
fmul
pop
leave
imul
ror
pop
push
jb
sbb
pop
mov
sbb
fistp
xchg
aaa
int3
adc
les
adc
por
enter
xor
xchg
into
xchg
aaa
int3
adc
dec
jmp
xchg
aaa
arpl
add
xor
loopne
xlat
out
xchg
aaa
fisubr
outs
enter
stc
retf
fwait
scas
mov
mov
in
cmp
push
cli
hlt
mov
cli
movs
ret
jmp
aaa
xor
mov
pusha
retf
pop
adc
aaa
push
cli
hlt
mov
cli
mov
xor
adc
adc
mov
xchg
aaa
int3
call
mov
xchg
aaa
int3
adc
cmc
inc
cmps
sub
xor
imul
int3
in
cmp
push
xchg
enter
add
xor
in
into
in
xchg
aaa
mov
xchg
mov
jmp
xor
pusha
je
xor
sub
in
into
in
xchg
aaa
pusha
cli
xchg
pop
int3
in
jmp
adc
pop
adc
enter
mov
js
and
in
imul
imul
mov
enter
inc
mov
xchg
aaa
int3
fwait
scas
inc
mov
xchg
aaa
int3
inc
in
ret
aaa
arpl
adc
in
ret
aaa
arpl
add
xor
jmp
adc
dec
into
in
xchg
aaa
arpl
pop
aam
push
imul
mov
xchg
ss
in
imul
jno
add
fld
enter
aam
push
imul
(bad)
ins
enter
xor
sti
in
sub
adc
retf
fadd
add
pop
adc
das
in
imul
das
xchg
enter
enter
int3
xor
scas
dec
iret
in
xchg
aaa
xor
push
mov
out
xchg
aaa
int3
cs
mov
cs
mov
js
mov
jno
add
fcmovnu
pusha
enter
aam
push
imul
fisub
enter
xor
in
xchg
leave
mov
in
push
fadd
call
enter
ss
in
cmp
jecxz
aaa
int3
inc
add
jmp
imul
inc
xor
adc
mov
xchg
aaa
int3
inc
xchg
std
mov
sub
fcomi
popa
enter
xor
inc
xor
enter
pmulhuw
mov
xor
xchg
std
mov
sub
fucomi
popa
enter
retf
xor
in
into
in
xchg
aaa
arpl
xchg
cwde
pop
aas
mov
xor
xchg
cwde
fisttp
(bad)
enter
fcomp
imul
int
xchg
cwde
int3
daa
inc
push
jb
or
xchg
aaa
int3
adc
pop
adc
enter
mov
js
and
sbb
int3
daa
inc
push
jb
adc
imul
xor
in
into
in
xchg
aaa
arpl
xchg
cwde
pop
mov
mov
lahf
in
cmp
in
xchg
cwde
(bad)
lods
fcomp
imul
int
xchg
cwde
int3
daa
inc
push
jb
adc
mov
xchg
aaa
int3
adc
pop
adc
enter
mov
js
and
inc
push
jb
cmp
push
adc
mov
in
jmp
adc
mov
push
adc
mov
jno
add
fild
enter
loopne
push
imul
(bad)
imul
aam
xor
in
xchg
enter
jle
jmp
in
int
in
xchg
aaa
mov
int3
movntps
call
pop
ds
and
sbb
int3
daa
inc
push
jb
or
mov
imul
int3
in
push
aaa
int3
cs
mov
imul
inc
in
ret
aaa
arpl
adc
in
ret
aaa
arpl
lods
shl
jmp
adc
dec
into
in
xchg
aaa
arpl
pop
call
sbb
imul
int3
in
imul
jno
add
fisttp
pop
call
je
imul
xor
in
xor
in
xchg
enter
jle
call
in
int
in
xchg
aaa
mov
int3
movntps
call
pop
cld
mov
and
imul
jb
add
xor
imul
int3
in
push
aaa
int3
xchg
mov
leave
xor
mov
mov
imul
int3
in
cmp
jecxz
aaa
int3
inc
add
jmp
imul
inc
xor
add
and
imul
into
in
xchg
inc
mov
xchg
aaa
int3
fwait
scas
mov
aaa
js
mov
xor
mov
imul
int3
in
add
pop
adc
enter
ss
in
sbb
(bad)
fisttp
mov
adc
add
push
jmp
xor
xchg
fwait
pop
and
mov
in
fdivr
int
xchg
and
pop
imul
fucomip
xchg
aaa
arpl
mov
int3
cmps
cdq
ss
in
and
xchg
aaa
int3
xchg
mov
leave
xor
mov
into
in
xchg
call
xchg
fwait
int3
cmps
cdq
ss
in
or
lahf
in
and
in
xchg
cwde
pop
adc
cmp
push
imul
int3
cli
or
xor
xchg
jge
in
xchg
aaa
fucomi
push
xor
pop
mov
adc
enter
enter
enter
enter
mov
(bad)
cmp
in
xchg
inc
retf
and
mov
xchg
xchg
aaa
int3
cli
(bad)
int3
xor
in
mov
ficom
enter
or
in
fucomip
xchg
aaa
popa
inc
add
push
imul
int3
cli
test
xor
add
mov
in
cmp
jno
xchg
jge
in
xchg
aaa
fcmovnb
ins
enter
stc
retf
fwait
scas
aaa
xchg
xchg
aaa
int3
cli
or
xor
scas
int
cmps
sub
xor
imul
pop
jle
mov
jp
adc
add
xor
imul
xchg
lods
rcr
xchg
std
cmp
ins
enter
stc
retf
fwait
scas
and
in
sbb
int3
addr16
inc
push
xchg
mov
xor
ss
push
inc
loopne
mov
gs
gs
loop
cmp
loopne
xor
loopne
mov
adc
cmp
mov
mov
sbb
hlt
adc
or
in
imul
adc
adc
hlt
jmp
pop
and
in
pop
dec
xchg
push
imul
or
jmp
ret
int3
daa
inc
push
jb
cmp
bound
push
push
cld
mov
cli
or
xor
push
std
das
xchg
enter
std
sbb
ins
enter
aas
aam
sub
mov
lea
enter
std
adc
ins
enter
call
daa
xchg
push
mov
inc
sbb
enter
enter
call
adc
imul
mov
sub
fucomi
push
xor
gs
push
imul
(bad)
fwait
scas
stc
call
push
imul
push
xchg
enter
outs
inc
cs
fwait
scas
repz
test
test
push
imul
push
cmp
mov
outs
inc
cs
mov
sub
push
imul
push
xchg
enter
outs
inc
cs
test
in
sbb
int3
addr16
inc
push
aas
(bad)
xor
outs
inc
retf
cmp
xchg
cli
sar
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
sbb
pop
xor
xor
sbb
iret
sbb
(bad)
fcom
cs
or
sbb
(bad)
lea
jmp
push
data16
sbb
call
fcmovnbe
imul
pop
adc
and
xchg
aaa
ins
fld
fdiv
adc
adc
aaa
ss
enter
mov
aaa
ss
sub
adc
addr16
stc
rep
xchg
aaa
int3
in
out
xor
mov
xchg
inc
ja
popa
pop
mov
mov
dec
in
sub
enter
aaa
push
push
call
adc
push
push
call
adc
push
pop
call
adc
push
pop
call
adc
push
inc
call
adc
push
inc
call
adc
push
dec
call
adc
push
dec
call
adc
push
jb
mov
cmp
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
imul
xor
.byte
