mov
stc
retf
jmp
cmp
cmp
cmp
xor
stos
xchg
pop
jl
inc
cmc
div
mov
push
scas
outs
mov
popa
jle
ja
jnp
int
jg
pop
push
pop
mov
add
out
push
es
ss
jmp
mov
mov
mov
fnstcw
push
pop
fld
stos
addr16
and
pushf
xchg
arpl
pop
push
(bad)
mov
neg
mov
and
add
and
adc
jp
(bad)
sub
shl
jecxz
jecxz
mov
sub
stos
into
lods
xor
ins
ja
in
add
clc
scas
fiadd
sbb
fldcw
mov
retf
mov
leave
cdq
mov
retf
(bad)
out
in
aaa
outs
mov
jl
lea
fistp
sbb
jge
iret
movs
mov
mov
rol
clc
push
pop
mov
ficomp
mov
psrad
pop
mov
inc
xchg
pop
add
add
jmp
imul
jmp
pusha
lea
je
xadd
sub
clc
mov
bsr
aas
adc
mov
shr
add
shr
adc
shl
clc
mov
cmp
bt
or
pusha
push
pushf
lea
jne
je
neg
movsx
add
bsr
sub
neg
add
cmp
shrd
shr
ror
mov
jmp
add
pushf
not
not
not
not
jmp
pop
setg
mov
mov
mov
pusha
bswap
bswap
mov
mov
pushf
push
ret
sub
clc
bt
cmp
pushf
lea
jae
pusha
pusha
lea
jmp
inc
sbb
in
call
hlt
push
sub
and
push
dec
aad
mov
dec
cmc
push
pop
es
push
cmp
cmp
popf
inc
xchg
and
add
jmp
hlt
mov
cmp
pop
pop
retf
scas
jmp
xchg
xchg
das
mov
stos
sbb
xor
cmp
pop
or
push
mov
or
jmp
sub
xor
jb
iret
cmps
mov
repz
sub
dec
outs
dec
push
imul
pop
dec
inc
(bad)
jp
setnp
imul
pop
jo
sub
pushf
xchg
pop
mov
stos
mov
pusha
mov
lea
pushf
lea
jge
push
push
lea
call
jmp
add
inc
gs
gs
popa
addr16
add
test
push
sbb
sbb
cmp
call
pop
xchg
add
cmp
dec
test
mov
mov
xchg
or
xor
in
cwde
pop
and
addr16
or
xchg
cmp
iret
pop
xchg
daa
sbb
xor
xchg
cld
mov
push
imul
or
cld
adc
arpl
adc
or
and
mov
in
sbb
cmp
pop
jne
(bad)
call
xchg
adc
inc
inc
sbb
adc
sub
fs
rol
icebp
xor
mov
xchg
mov
push
sub
push
jle
fnsave
pop
repz
lods
outs
xor
xlat
outs
cs
(bad)
call
xchg
sti
shl
(bad)
lahf
fist
iret
inc
jmp
jae
inc
push
xor
pop
pop
pop
fisub
jmp
sbb
dec
mov
push
dec
push
jmp
stc
jg
push
out
int
add
test
int
test
enter
mov
dec
jno
fisubr
sbb
shr
xor
sbb
pop
aaa
sub
jecxz
sub
addr16
push
imul
int
outs
dec
adc
pop
pop
(bad)
mov
cli
inc
test
add
push
repz
sub
out
and
xchg
jge
(bad)
stos
adc
(bad)
jmp
jle
push
pop
dec
not
ss
out
sub
jmp
jnp
fisub
xchg
or
sub
outs
(bad)
inc
and
jg
jmp
mov
shl
xchg
int
ins
das
dec
or
pop
icebp
dec
rol
(bad)
mov
cmc
nop
gs
add
ins
adc
inc
pushf
xlat
movs
jle
mov
ins
inc
fcomip
imul
dec
sub
movs
shl
imul
sub
cmp
pushf
popa
cli
out
icebp
test
mov
shr
aaa
lock
xchg
cmp
mov
clc
ror
jb
pop
add
movs
icebp
fidiv
test
lea
mov
and
int
pop
push
and
mov
outs
fnstcw
xchg
cmps
mov
jnp
sbb
shr
mov
data16
adc
bound
or
retf
lahf
push
cmp
pop
hlt
mov
and
mov
and
data16
and
adc
lods
dec
rcr
xor
or
test
adc
lea
mov
jnp
add
cmp
xchg
jbe
jmp
in
scas
add
push
or
push
cwde
mov
inc
add
arpl
adc
nop
dec
enter
das
add
(bad)
stos
and
std
aad
gs
div
cdq
pop
mov
or
add
adc
cs
xchg
mov
pop
mov
rcl
dec
imul
push
pop
shl
jle
stos
add
mov
inc
adc
mov
pop
dec
add
ds
dec
and
cmp
xlat
mov
test
clc
and
(bad)
aam
adc
(bad)
fcmovnb
repnz
jp
sub
and
dec
xor
enter
pushf
stos
les
inc
cmps
call
dec
adc
dec
jmp
pop
mov
adc
call
lods
add
mov
sub
pop
or
pop
int
cmp
cmc
xchg
cs
pop
jl
repnz
mov
jecxz
mov
iret
enter
ret
sbb
or
xor
out
pop
test
nop
adc
sub
(bad)
call
adc
jae
out
cli
add
(bad)
fdivr
jp
push
jp
dec
sbb
aam
sbb
lea
(bad)
cmc
enter
into
das
test
mov
sub
in
leave
sbb
bound
dec
repnz
inc
lea
pop
jne
add
jmp
lea
je
push
jmp
jecxz
xor
sub
add
mov
retf
inc
sahf
xchg
fdivr
enter
fucomip
or
add
ret
and
push
in
cli
xor
xchg
mov
xor
inc
addr16
mov
fstp
xchg
mov
enter
adc
lods
(bad)
adc
mov
fwait
out
dec
pop
imul
ss
test
sbb
popa
cld
sbb
cmp
cdq
(bad)
jmp
outs
repnz
and
enter
dec
shr
ins
xor
test
(bad)
leave
and
or
mov
mov
push
adc
or
mov
call
fst
lods
jbe
xor
cmp
fstp
test
pop
adc
(bad)
lds
adc
out
int
lds
mov
jae
mov
mov
pop
lock
mov
adc
lods
mov
pushf
and
add
push
cmp
mov
push
pushf
enterw
cmp
dec
mov
sub
aam
movs
mov
idiv
xor
or
retf
inc
into
and
sub
push
cmp
scas
and
in
pop
mov
into
in
out
fwait
pop
cmps
sub
mov
cdq
mov
in
jo
and
into
in
xchg
mov
psubq
or
pop
jle
jmp
mov
jb
push
(bad)
pop
adc
lods
cmc
es
fdiv
mov
pop
test
and
call
jnp
push
jl
push
lods
in
call
cmps
loope
rcr
(bad)
int
mov
jmp
call
adc
xor
cwde
mov
repnz
aad
sbb
mov
daa
or
addr16
mov
loopne
mov
inc
and
int
je
add
fs
jae
sets
call
lea
jb
pushf
push
push
ret
cs
jno
call
int
xchg
leave
sar
adc
jns
dec
daa
sar
mov
js
inc
jmp
sub
dec
dec
mov
arpl
les
sbb
push
je
sbb
xor
cmc
das
cmp
icebp
outs
jbe
xor
clc
cmps
xchg
jb
sbb
mov
js
lea
retf
add
sub
std
jae
loop
aaa
pop
add
scas
cwde
cmps
popf
pusha
retf
test
jmp
xlat
add
mov
add
dec
es
sti
test
daa
call
mov
dec
pop
push
sub
clc
xchg
cwde
stos
add
cmp
dec
jp
js
jle
sub
dec
ret
dec
push
sbb
clc
dec
mov
je
pop
cmps
mov
xchg
ffreep
xchg
mov
andnps
add
call
mov
cmp
pop
cli
enter
idiv
xchg
aaa
mov
mov
pop
push
fbstp
mov
or
and
mov
movs
call
sbb
ins
xchg
lods
gs
fld
cld
cmp
cwde
adc
cli
std
cmp
cld
xchg
dec
and
fwait
mov
adc
inc
sub
mov
test
cmp
xchg
sub
in
or
stc
lds
add
rol
and
cmp
sub
jl
add
pop
jbe
cwde
daa
call
xor
cmps
(bad)
sbb
mov
xchg
call
call
xor
xchg
pushf
sub
cmps
dec
xor
lea
popf
(bad)
cmc
std
sbb
xchg
jnp
pop
adc
pop
sbb
inc
xor
and
mov
xor
jo
and
mov
jp
jmp
fdivr
add
mov
and
mov
adc
rcl
aam
xor
xchg
cmc
mov
dec
xchg
jne
iret
sub
sub
shl
xor
mul
stc
and
call
call
jno
mov
(bad)
in
stos
sar
jne
dec
add
aas
ret
add
add
sar
add
setge
call
jmp
ja
fucom
es
bound
sub
fsubr
loopne
nop
repz
mov
jmp
push
cmp
fcom
rcl
add
fdivr
push
dec
sbb
inc
out
in
mov
(bad)
mov
movs
inc
jnp
outs
not
retf
arpl
test
push
or
inc
cs
adc
inc
das
jge
rcr
xchg
(bad)
cld
test
icebp
scas
add
dec
loope
frstor
jno
lods
push
test
out
pop
sub
in
dec
mov
sti
jb
int3
mov
mov
cmp
push
pop
adc
fcom
mov
mov
mov
out
outs
lods
sub
push
sbb
mov
jmp
neg
jmp
lea
je
call
push
call
jg
mov
and
sahf
pop
xchg
out
scas
cmp
fild
xor
bound
xchg
pop
ror
mov
aas
(bad)
adc
div
loop
imul
lods
pop
sahf
push
inc
out
cmps
or
enter
adc
arpl
ds
mov
jmp
outs
sahf
and
shr
cs
cmps
loop
inc
bound
cs
jecxz
aas
jnp
jo
shl
pop
inc
pop
pop
imul
les
sub
pop
cs
cli
je
out
scas
lods
rcl
sub
xor
frstor
mov
call
or
dec
test
test
mov
cmp
mov
inc
dec
sub
sub
in
xchg
jb
add
adc
inc
lea
jmp
call
bsf
test
mov
movzx
mov
test
cmp
rcr
mov
pusha
cmc
repnz
call
add
push
jns
push
gs
ins
ins
outs
arpl
jb
outs
addr16
outs
add
movs
call
std
ins
and
push
dec
repnz
ds
and
in
adc
sbb
punpckhwd
arpl
adc
les
mov
pusha
cmps
pextrw
mov
and
loopne
scas
push
movs
cdq
inc
sub
xchg
push
xor
in
dec
xlat
or
(bad)
dec
aas
inc
or
cld
inc
mov
adc
adc
cwde
mov
test
inc
cli
add
xor
and
xor
xchg
fidivr
adc
adc
cmp
out
adc
mov
mov
inc
lods
sbb
loop
push
adc
mov
sub
xchg
xor
xor
mov
fistp
mov
call
xchg
sub
inc
adc
cld
push
ror
jns
add
dec
stc
out
out
adc
(bad)
out
in
and
mov
addr16
dec
int
and
ins
imul
sbb
pop
jns
cmp
mov
or
cmp
test
jg
mov
(bad)
jnp
imul
mov
and
sub
xchg
cs
mov
cmps
test
mov
xor
adc
pop
sti
pop
xor
ret
inc
aam
clc
push
pop
inc
or
(bad)
adc
sbb
cmp
ja
xor
mov
ror
pop
dec
jbe
inc
inc
sub
sub
pop
and
aam
mov
adc
imul
jg
adc
cmps
(bad)
cmps
mov
cmps
cmps
or
data16
sbb
je
fcom
mov
or
in
push
lahf
or
cld
mov
or
sub
push
pop
call
fistp
mov
cmp
js
js
dec
xchg
and
push
data16
call
dec
(bad)
iret
push
and
push
adc
scas
fcomp
(bad)
xchg
pop
jno
(bad)
jae
mov
gs
out
lds
push
pushf
push
lea
call
pushf
cmc
cmp
pushf
sub
lea
js
push
push
lea
jne
push
call
call
call
movzx
pop
pusha
push
ret
pushf
mov
pushf
pushf
push
mov
mov
push
push
pusha
lea
jmp
cmp
shr
cdq
sub
and
lods
loop
es
cmps
xor
mov
dec
movs
std
xchg
sbb
inc
aas
neg
add
arpl
f2xm1
jmp
les
retf
or
sub
adc
push
aas
and
jns
das
call
xchg
das
pop
and
aas
add
inc
popf
leave
mov
or
add
mov
popa
enter
ins
into
(bad)
popa
fmul
cmp
mov
les
xchg
sub
ja
dec
jbe
mov
retf
dec
add
das
sar
aam
scas
jo
adc
mov
mov
es
sbb
xchg
sub
je
adc
loop
jnp
call
lea
je
cmc
call
retf
xor
cdq
sub
jle
sbb
cmp
ins
push
lahf
adc
ds
loop
(bad)
aam
mov
lods
sbb
dec
std
mov
(bad)
or
outs
aas
popf
push
jg
and
inc
inc
jl
addr16
scas
jmp
aam
in
(bad)
pop
sti
imul
or
call
push
scas
jae
sbb
dec
aas
jne
outs
fistp
pushf
pop
test
mov
adc
push
ret
cvtdq2ps
imul
and
dec
push
jle
xchg
(bad)
in
shl
in
or
xchg
mov
cmp
mov
xchg
dec
(bad)
(bad)
fist
lods
cdq
cmps
out
in
cmps
loope
lock
mov
inc
and
addr16
fld
push
dec
in
dec
loop
fistp
ins
retf
mov
adc
(bad)
das
sahf
jg
iret
or
sbb
xchg
loope
iret
mov
jnp
mov
sub
and
and
pop
or
pop
cdq
xor
cmp
(bad)
sbb
sub
cmps
dec
daa
ins
xor
mov
sub
push
scas
mov
xor
sbb
mov
mov
or
nop
and
xlat
(bad)
out
xchg
cli
push
(bad)
shl
jbe
dec
ret
sbb
pop
aad
pop
popa
jns
cmps
popf
sub
adc
das
pop
xor
mov
std
xchg
adc
add
sub
xor
xchg
sbb
pop
or
jb
or
add
cmps
lock
ja
pushf
call
(bad)
repnz
ficomp
mov
cmp
cmp
cmps
push
jne
cli
ror
neg
jb
inc
xor
pop
mov
push
imul
jne
add
pop
ja
adc
fld
adc
dec
add
in
or
pop
dec
xor
dec
fbstp
ins
mov
cs
stos
sbb
dec
inc
ja
push
pop
out
jno
in
or
push
mov
ins
ret
and
jp
push
or
fist
jb
outs
dec
push
lods
dec
fwait
pop
push
push
sbb
sbb
movzx
movzx
mov
jmp
je
jp
ficomp
or
mov
fadd
mov
xchg
std
leave
add
inc
mov
(bad)
ds
cmps
jnp
in
addr16
inc
movs
ss
neg
aad
mov
test
sub
daa
mov
dec
loop
xchg
mov
pop
jle
sub
stos
pop
movs
retf
test
inc
mov
scas
adc
stos
cmps
repz
dec
ja
jbe
rcr
xor
dec
sar
mov
mov
sbb
xchg
test
fcomp
shl
or
sub
pop
pop
aas
out
call
movs
cli
ds
jg
ins
inc
cwde
int
jne
pusha
mov
fstp
sar
inc
xchg
addr16
lahf
adc
dec
xchg
fmul
mov
mov
pop
psrlq
(bad)
div
dec
je
jp
out
push
ins
out
sbb
sub
and
mov
xor
xchg
arpl
rcl
popf
test
cmp
arpl
mov
dec
retf
sub
xor
pop
in
push
mov
and
cmps
xor
cmp
add
cdq
sub
movs
jge
cs
add
mov
dec
push
xlat
cdq
sub
xchg
adc
inc
test
in
dec
cmp
xor
hlt
iret
test
inc
xor
pop
dec
inc
pop
pop
test
sub
cld
push
dec
sbb
xchg
dec
call
adc
mov
test
jae
ds
cld
jmp
into
mov
cmp
jmp
and
cs
ins
cmps
pop
cs
jo
mov
mov
or
fucomp
add
leave
test
jl
ins
pop
sbb
jmp
ror
cmp
hlt
pushf
mov
sbb
cwde
shl
cwde
xor
jmp
dec
xchg
sub
scas
ficom
ror
add
es
adc
mov
nop
cmp
mov
mov
mov
mov
push
js
push
je
retf
or
dec
mov
retf
push
lea
jae
adc
sbb
stc
push
mov
xor
sar
rcl
cmp
mov
bt
shl
btc
mov
cmp
test
sub
cmc
bt
call
retf
push
mov
out
shr
test
fdiv
mov
mov
aad
in
mov
mov
add
lea
sbb
movs
jle
rcl
sub
dec
je
fld
mov
add
in
jb
(bad)
movs
cli
xlat
push
dec
add
in
pop
jmp
cmp
(bad)
int3
bound
in
shl
mov
add
cmp
in
ins
lods
test
xor
aaa
xchg
mov
addr16
arpl
aas
jb
pop
lock
imul
adc
and
sar
jae
cmp
aam
popa
mov
push
mov
jle
out
stos
call
test
mov
cmc
ficomp
push
ins
mov
enter
mov
xchg
cmp
jge
inc
pop
sub
mov
stos
ficomp
mov
imul
inc
dec
enterw
std
lock
mov
and
xchg
dec
lods
popf
xor
dec
lea
test
mov
inc
mov
jmp
adc
mov
inc
or
lods
mov
movs
aaa
cmp
aas
add
scas
in
lea
mov
ins
mov
push
or
xchg
mov
mov
call
(bad)
sub
mov
loope
enter
hlt
sub
push
lock
rcl
stos
hlt
fild
jmp
dec
xchg
dec
popf
jns
cmp
inc
jl
aad
lods
ins
xchg
cmp
jno
jmp
adc
xchg
jmp
test
imul
push
call
pop
add
loope
das
jno
mov
rcr
push
push
repnz
sub
mov
bound
mov
add
out
mov
sbb
addr16
jecxz
cmps
jg
movs
jne
jmp
fild
je
scas
adc
call
xchg
daa
xchg
pushf
rcr
sbb
fcmovb
jne
mov
pop
lods
or
jo
cld
lds
push
aad
mov
iret
jmp
mov
mov
test
fwait
repz
sub
jmp
inc
outs
push
aad
sub
push
mov
or
daa
jg
outs
and
out
das
mov
mov
xchg
ins
fist
push
push
dec
mov
ins
and
push
or
in
dec
mov
adc
fs
(bad)
outs
xlat
sub
shr
sar
mov
add
xchg
retf
xchg
or
sub
dec
mov
(bad)
adc
aaa
mov
retf
cmps
mov
push
je
push
cli
cmp
push
cld
cmps
add
jae
jne
into
test
imul
jnp
test
mov
mov
les
push
or
jmp
mov
add
sub
jmp
mov
pop
mov
inc
(bad)
sti
sub
ret
adc
and
xchg
das
adc
sub
outs
lea
jne
call
push
aad
aam
sub
inc
(bad)
movs
call
mov
lods
aad
lods
je
sub
mov
sub
out
stos
gs
or
test
inc
lea
push
cld
xchg
inc
lock
fisubr
mov
xor
stos
xchg
dec
movs
or
not
pslld
inc
xor
sti
push
mov
jno
jne
cmp
je
sub
retf
das
das
sub
sbb
movs
rcl
mov
inc
fcmovne
dec
and
out
fucomi
fstp
dec
adc
xlat
jmp
mov
jl
push
out
push
pop
xor
xor
imul
pusha
test
pusha
add
push
mov
mov
mov
lea
jmp
jmp
repnz
jmp
jmp
clc
neg
call
data16
adc
mov
call
popa
ret
fiadd
mov
lea
fwait
mov
enter
cmp
xchg
mov
cmp
mov
push
sub
ds
cwde
test
jg
inc
enter
sahf
or
adc
or
loope
dec
dec
out
push
test
popa
fbld
inc
xor
cmp
jns
inc
hlt
pop
int3
push
mov
popa
jno
mov
xchg
dec
sub
in
inc
les
adc
rcl
repz
jae
mov
xchg
ins
push
or
mov
rol
jne
test
imul
imul
cld
sbb
sbb
dec
inc
push
push
mov
xchg
push
xchg
sti
(bad)
(bad)
sahf
and
mov
jnp
call
cld
and
xlat
movs
mov
ret
arpl
dec
popa
push
jmp
jmp
mov
add
(bad)
or
pop
popf
ficom
inc
pop
stos
not
mov
xor
jmp
add
jge
rcl
xchg
test
lea
jmp
xchg
ss
fdiv
fst
push
cwde
push
inc
mov
and
xor
movs
test
mov
pop
jl
les
jge
adc
stc
cld
jbe
int3
dec
arpl
cwde
cmp
imul
pop
xchg
in
mov
popa
(bad)
sbb
mov
dec
icebp
cmp
mov
mov
jge
and
pop
fcmovnu
inc
cmps
stos
push
pshufw
hlt
clc
jae
ficom
shl
mov
jge
push
sub
cwde
adc
mov
adc
sub
dec
outs
lahf
mov
mov
cld
push
pushf
mov
jno
dec
xchg
stos
xchg
out
es
int3
add
dec
stos
std
aad
jno
fstp
dec
pop
mov
(bad)
or
or
cmp
stos
cmp
stos
and
stos
jmp
add
cmp
inc
xchg
mov
jae
loop
jae
add
sbb
cmp
jnp
xchg
pushf
or
cs
ror
sbb
pushf
cmps
lods
cmp
stos
jecxz
dec
sar
popf
push
bound
fisttp
inc
pushf
fsubr
and
fnstsw
sub
retf
fldenv
inc
xchg
stos
sbb
push
js
jne
push
loop
pop
adc
retf
ret
stos
adc
test
retf
add
js
inc
pop
jp
adc
cli
sub
outs
cmps
test
sub
(bad)
ss
jns
cdq
sub
mov
gs
fisttp
pop
xchg
stc
std
add
jmp
mov
aas
sbb
je
push
(bad)
cmp
mov
jno
(bad)
add
dec
push
repz
xchg
cli
ret
push
gs
int
icebp
pusha
jns
out
js
bnd
cmc
pop
lahf
mov
aas
dec
cmps
jge
dec
jbe
mov
out
pop
out
push
fst
pushf
lea
je
stc
call
pushf
mov
bswap
pushf
mov
push
mov
movzx
call
nop
mov
sub
jae
lahf
xchg
push
jb
fist
mov
ret
jb
ror
lahf
lock
outs
outs
in
inc
xor
dec
jb
jp
dec
xor
xchg
imul
fiadd
jl
sti
enter
lods
or
mov
xor
adc
xor
int3
test
(bad)
or
je
scas
lods
mov
(bad)
(bad)
pusha
retf
mov
stos
imul
adc
fbld
adc
js
je
pop
xchg
cwde
icebp
stc
(bad)
pop
push
jbe
and
sub
and
adc
or
lods
mov
cmps
add
das
aad
lock
adc
mov
inc
and
mov
or
repnz
add
(bad)
(bad)
call
movsx
mov
mov
cwde
lea
mov
mov
mov
pusha
mov
mov
pusha
mov
mov
push
pushf
push
ret
into
iret
icebp
iret
rcr
imul
pop
sbb
fcmovnu
xchg
push
and
loop
xchg
cmp
pop
dec
test
mov
mov
pop
call
push
ins
xchg
and
and
scas
jnp
ja
dec
rsqrtps
aam
xchg
lods
clc
(bad)
out
push
imul
add
sar
and
ja
ds
outs
popf
mov
fs
(bad)
jge
sbb
inc
fstp
pop
jmp
pushf
push
hlt
mov
inc
mov
je
push
retf
mov
sbb
dec
sub
adc
cmps
popf
xor
lea
cmp
pop
add
int
sub
inc
cmps
imul
arpl
pop
addr16
jecxz
mov
jae
xlat
retf
pop
sbb
out
push
(bad)
imul
test
cwde
add
push
jns
jmp
dec
jmp
and
ds
out
in
sti
leave
clc
sub
pop
xor
pushf
mov
mov
aas
jne
(bad)
jb
sub
mov
nop
sub
pop
fs
aad
shl
cli
dec
xchg
enter
cs
mov
rcr
fisttp
xlat
cmp
mov
push
stos
ss
xchg
cld
jnp
mov
add
neg
hlt
cmp
dec
hlt
fucom
ficom
sub
mov
cmp
pop
std
int
sbb
pop
mov
outs
shr
sbb
sub
sub
or
dec
outs
bound
jg
push
jecxz
jp
movs
lea
mov
mov
mov
(bad)
pop
leave
mov
fisubr
fcomp
div
test
ins
pop
lods
push
ds
outs
test
add
mov
int3
out
pushf
(bad)
cmp
bound
push
mov
addr16
mov
dec
popf
pusha
stc
push
mov
jp
or
sub
sub
mov
pushf
test
dec
hlt
test
scas
into
push
in
retf
shr
imul
sbb
bound
sbb
(bad)
outs
adc
pop
jg
adc
into
les
push
or
xlat
push
into
mov
das
outs
mov
adc
mov
lods
mov
adc
sti
cmp
xor
mov
jns
out
rcr
shl
aaa
cs
push
lea
jne
push
stos
mov
mov
lea
jmp
pushf
stc
bt
sub
bt
push
mov
bt
cmp
call
(bad)
and
lock
cmp
push
cli
or
sbb
push
out
add
sub
push
cmp
lock
push
xchg
aas
ret
idiv
arpl
add
or
push
pop
inc
cwde
ret
inc
cmp
pop
dec
jns
sub
out
inc
lea
jl
cmp
inc
push
or
mov
sbb
or
dec
pop
add
fstp
fcomp
fiadd
add
lahf
lahf
movs
mov
mov
repz
pop
addr16
mov
movs
fst
push
sbb
or
add
out
jl
call
sub
stos
std
aad
sub
ret
movs
push
jg
movs
cli
sub
mov
sub
imul
add
retf
fwait
rol
mov
sub
aam
test
xrelease
cmp
mov
pushf
lea
jb
cmc
cmp
jmp
pop
pop
in
ror
cdq
sub
push
lods
sbb
imul
jb
rcr
or
out
and
enter
fistp
test
pop
cdq
add
jmp
ret
sub
add
adc
add
inc
out
vxorps
xor
or
add
test
or
adc
call
rcl
add
lahf
cmp
gs
xor
xchg
cmp
xlat
stos
les
jnp
cmp
imul
jge
(bad)
xchg
stos
sbb
cmp
out
out
in
fist
leave
push
add
iret
call
repz
push
dec
xor
sub
mov
mov
lods
pushf
call
ds
pop
leave
cdq
sub
or
fadd
scas
push
pop
sbb
scas
and
int3
lods
adc
mov
lods
loop
and
xor
ss
mov
adc
pop
push
and
sub
into
and
mov
inc
fwait
je
xchg
test
add
mov
mov
mov
sub
(bad)
cmp
sbb
(bad)
add
outs
and
xchg
push
fsub
sbb
mov
ss
mov
in
leave
xchg
xchg
fstp
mov
in
mov
mov
pop
outs
jge
dec
push
and
mov
add
cwde
and
adc
lea
xor
mov
(bad)
fninit
jns
call
jmp
sahf
arpl
add
enter
mov
pusha
jo
fldcw
and
shr
call
fbld
sub
and
pop
push
fisubr
dec
fst
xchg
mov
test
adc
mov
rcl
push
cmp
cmp
pop
xlat
call
jecxz
or
xchg
ss
sbb
cs
add
xchg
shl
mov
lea
call
push
push
adc
pusha
call
push
lea
jae
shl
bsr
push
jmp
lods
gs
enter
pop
ins
mov
les
dec
or
xlat
mov
mov
fwait
or
sub
cmp
adc
xchg
mov
dec
inc
shl
retf
inc
sbb
stc
inc
xchg
sbb
sbb
test
or
lahf
mov
dec
fsubr
sub
js
pop
ins
rol
fbstp
inc
sbb
jl
sbb
retf
bound
mov
out
xchg
lods
movzx
btc
sub
shr
mov
jmp
in
out
retf
cdq
sub
push
push
(bad)
mov
fwait
scas
pop
lahf
xchg
enter
(bad)
neg
adc
mov
in
xor
inc
lahf
movs
mov
adc
cld
(bad)
dec
adc
lods
inc
jg
jne
xchg
data16
fldenv
imul
and
jb
les
lahf
scas
es
sbb
lock
jo
and
mov
out
movs
mov
cmp
call
rol
push
bt
jmp
inc
call
neg
jmp
pop
pop
jmp
push
push
mov
lea
movsx
mov
jmp
mov
cdq
sub
leave
xor
push
rcr
stc
push
jl
add
popa
(bad)
push
jmp
mov
or
ror
arpl
fwait
aaa
push
push
cs
iret
xor
in
inc
ins
out
test
in
xlat
mov
popa
pop
pop
es
retf
mov
pop
test
jle
addr16
popf
in
(bad)
xchg
add
imul
(bad)
dec
mov
cmps
inc
cmp
cmp
jae
inc
movs
test
mov
icebp
inc
stos
sub
(bad)
repnz
mov
sbb
jge
jecxz
xor
mov
pop
retf
jecxz
mov
inc
mov
retf
pop
popf
push
ror
lods
(bad)
dec
xchg
inc
mov
(bad)
fs
int3
cmp
cmp
psrad
push
stos
sbb
add
pop
notrack
adc
xchg
sti
movs
mov
inc
ins
outs
sub
add
adc
add
push
push
int3
mov
cwde
int
push
dec
loopne
iret
jl
inc
jg
mov
adc
(bad)
out
retf
pop
sbb
xchg
push
pop
inc
sub
adc
cli
dec
popa
std
push
inc
fistp
mov
cmp
xchg
imul
ds
sbb
outs
xchg
add
or
aaa
fwait
sar
cmc
lahf
cdq
push
aad
xor
jl
hlt
dec
inc
out
sti
push
mov
lea
je
cmc
cmp
sub
cmc
jmp
mov
inc
call
mov
inc
push
pusha
stc
not
pushf
cmc
mov
add
clc
not
cmc
cmc
call
pop
cmps
add
push
int3
push
fs
aam
ja
arpl
mov
mov
push
sahf
fs
frstor
jge
mov
(bad)
not
inc
dec
imul
fidiv
xchg
sbb
mov
cmp
icebp
lods
jnp
dec
sti
push
adc
xchg
push
(bad)
scas
in
xchg
lea
inc
stos
loopne
int3
cmp
gs
mov
mov
xchg
lods
icebp
in
dec
xor
xor
cld
je
stos
or
ins
jle
mov
adc
and
cmp
inc
sub
(bad)
pop
xchg
fist
jae
push
fcomp
pop
xchg
(bad)
jb
fild
not
jmp
pusha
clc
bt
cmp
cmp
pop
lea
lea
lahf
cwde
mov
mov
push
pushf
lea
ja
jmp
test
pushf
push
mov
call
dec
add
retf
sub
stos
mov
fild
movs
dec
jecxz
mov
push
ret
aaa
jnp
and
and
push
lea
mov
retf
into
mov
outs
pusha
push
das
dec
sbb
cmp
hlt
mov
pop
test
jmp
xchg
mov
pop
jecxz
cdq
lock
call
jae
out
xchg
fistp
add
imul
jb
or
jecxz
scas
xchg
cmp
dec
fdiv
mov
pop
add
sahf
push
popf
push
jmp
repz
and
es
and
push
or
ds
mov
sbb
and
sbb
add
cld
add
pushf
retf
les
xchg
in
lods
std
mov
pop
add
xchg
pop
cmps
(bad)
cdq
sub
fsubr
xchg
and
sub
retf
pop
push
jae
lahf
pop
scas
pop
sub
jg
mov
jp
aad
(bad)
fistp
sti
xchg
aaa
test
mov
mov
push
jns
jg
daa
std
jle
pop
repnz
sub
ret
mov
cld
int3
mov
or
imul
in
xchg
dec
outs
out
fwait
sub
pusha
pop
mov
stos
clc
mov
sub
out
or
jns
cmp
jg
or
xchg
call
push
jp
dec
add
cld
test
or
arpl
or
and
shr
pusha
mov
test
jmp
fwait
ror
(bad)
cdq
sub
cmp
mov
js
jge
sub
dec
shr
push
aam
mov
adc
sub
dec
cmp
test
call
push
xchg
cmp
mov
add
lds
out
jmp
mov
inc
repz
jle
(bad)
and
lahf
aad
outs
jg
mov
cmp
dec
mov
add
enter
loop
arpl
jle
ficom
add
repnz
adc
les
cli
test
in
lods
fsub
ins
xchg
dec
stos
add
cmp
test
xor
sti
pop
xor
cli
xchg
aaa
sahf
lock
test
pop
fdiv
inc
scas
push
sbb
xchg
dec
add
gs
xor
fs
ins
add
fimul
rcr
out
in
sbb
mov
(bad)
lea
xchg
cli
in
push
fadd
sbb
jns
dec
add
and
push
clc
xor
cli
out
test
xchg
jg
mov
lds
loopne
mov
jle
xor
and
sub
sub
xor
cld
(bad)
dec
inc
dec
mov
das
mov
std
(bad)
dec
stos
punpckldq
adc
test
fadd
sbb
test
push
inc
pop
movs
dec
aas
cli
(bad)
fst
ins
je
fdiv
or
dec
ss
pop
fisub
adc
mov
sbb
mov
add
fs
ja
or
bt
cmc
sub
shr
bsr
bswap
add
shl
jno
pushf
bts
mov
xor
mov
call
shl
sub
mov
es
jmp
arpl
pop
mov
or
xor
ins
pop
mov
int
(bad)
cmp
mov
shr
mov
jne
adc
icebp
dec
sbb
rcr
xor
xchg
or
dec
xchg
sub
mov
addr16
fwait
sbb
pop
int
mov
stc
xor
(bad)
jmp
enter
sub
mov
shr
jge
push
cmp
idiv
push
test
jno
and
loope
push
mov
lock
sbb
bound
pop
xlat
fbstp
dec
aam
loopne
jg
push
lock
pop
xor
cmps
test
sub
not
rcl
shld
add
lea
test
pushf
clc
sub
test
cmp
bt
push
pop
stc
cmp
pushf
pushf
pushf
call
mov
xor
shl
not
dec
mov
bt
cmp
pushf
cmp
repnz
push
pushf
push
pushf
lea
jne
movsx
push
mov
mov
cwde
seto
pusha
mov
pusha
lahf
lea
mov
mov
mov
lea
jmp
gs
push
ret
cdq
sub
shr
out
int3
add
cmp
in
sbb
or
test
pop
imul
mov
lods
jbe
mov
pop
mov
xor
add
icebp
bound
and
enter
(bad)
fdiv
inc
out
out
(bad)
ror
fidiv
sbb
dec
mov
ins
test
jecxz
movs
mov
into
mov
ja
(bad)
push
xor
xchg
push
(bad)
icebp
xchg
mov
cmp
sub
out
xchg
mov
sti
scas
xchg
mov
jg
and
or
aad
pop
inc
or
mov
pop
outs
jbe
pop
mov
in
and
jmp
cmp
sub
popa
pop
xor
fucomp
add
xchg
xchg
xor
sub
sub
mov
aaa
jg
in
ret
dec
out
or
xor
sbb
mov
mov
test
pop
and
xor
test
rep
rol
ds
cwde
cdq
ficom
add
test
push
mov
inc
sub
or
dec
fild
loop
ja
es
nop
loop
stc
sbb
fwait
cld
int
dec
adc
push
add
rcr
test
aam
xor
arpl
or
(bad)
(bad)
or
dec
rcr
pop
add
retf
std
cdq
sub
push
ja
cli
mov
das
repz
adc
mov
mov
jo
xor
(bad)
mov
imul
pop
test
es
mov
mov
dec
fdivr
or
mov
ja
push
clc
popf
and
mov
ja
ror
mov
jnp
mov
push
sub
dec
xor
adc
mov
dec
xchg
mov
fsub
and
in
adc
sar
and
mov
add
jp
push
out
ret
div
(bad)
loopne
xchg
mov
inc
ja
xor
sub
or
add
bsf
mov
rcl
mov
jmp
mov
mov
lea
je
jmp
repz
cmc
cld
cdq
sub
mov
mov
jne
cmp
popa
push
(bad)
hlt
pop
js
mov
pop
scas
jecxz
imul
mov
add
adc
imul
or
outs
(bad)
jmp
jle
or
jo
das
push
retf
ret
add
into
out
mov
jo
stos
mov
sub
add
inc
xor
std
adc
clc
aas
test
in
add
xchg
cld
push
mov
mov
lock
push
cmp
pop
pusha
adc
jo
shr
in
mov
data16
add
in
fsub
shr
enter
mov
cmp
xchg
pop
(bad)
fwait
in
rol
movs
dec
call
ficom
push
push
pop
mov
add
call
fsub
inc
pusha
lds
pusha
dec
test
mov
hlt
movs
retf
inc
adc
mov
cmps
test
fwait
shr
cli
pop
out
pop
test
gs
jnp
jmp
shl
inc
xchg
dec
cmp
fld
shl
mov
clc
mov
mov
aam
push
jo
ret
pop
jl
arpl
push
(bad)
int3
cld
retf
cli
jp
pop
(bad)
int3
ja
xchg
aaa
popf
sbb
es
aaa
ins
ror
es
cdq
mov
daa
and
pop
and
or
into
sar
ja
pusha
clc
push
pusha
imul
bt
cmp
bt
bt
add
mov
lea
jmp
jmp
test
cdq
sub
addr16
fdiv
cmp
pop
(bad)
rol
sti
sti
scas
mov
sahf
or
mov
mov
xchg
sahf
jo
out
push
xchg
or
(bad)
fisub
xchg
scas
cli
inc
push
adc
ds
mov
inc
cmps
inc
shl
rol
mov
test
add
mov
test
into
call
mov
cmp
jp
inc
repnz
aad
imul
idiv
scas
xchg
cs
retw
ss
popa
(bad)
js
sub
pop
push
jno
jge
popa
sub
sbb
cmp
stc
pop
xchg
or
aaa
add
pop
push
aam
movs
mov
out
sbb
(bad)
cdq
sub
mov
out
jle
outs
movs
daa
or
inc
ficom
(bad)
sbb
movs
mov
aas
mov
mov
imul
lods
sbb
out
sar
nop
repz
sti
js
adc
sbb
or
lods
ds
fwait
ja
add
cmp
lea
fild
mov
into
xor
into
daa
dec
adc
aaa
mov
loop
rcr
inc
mov
mov
mov
xor
xor
jecxz
mov
jbe
lock
inc
out
lahf
clc
aam
or
mov
push
xor
mov
jmp
pushf
mov
bt
sub
push
push
pop
bt
mov
bt
mov
cmp
jmp
push
lea
ja
pusha
mov
inc
not
not
inc
neg
or
jmp
jne
btr
sub
dec
sub
clc
inc
rol
das
mov
shr
add
rol
mov
jmp
imul
gs
xor
cs
ins
add
mov
clc
pushf
pushf
jmp
adc
sub
mov
lds
inc
cdq
sub
cdq
movs
mov
sub
cs
adc
jb
push
fdiv
mov
rcl
mov
and
ficom
das
mov
sbb
adc
cs
fdiv
dec
je
cdq
ss
fwait
push
mov
mov
mov
sub
cmp
adc
nop
sbb
adc
or
pushf
xchg
bnd
sub
pop
cs
stc
retf
ret
ins
es
xchg
lds
and
push
scas
push
call
cwde
pop
call
mov
dec
push
pop
mov
jmp
outs
(bad)
clc
cdq
sub
pinsrw
cmp
das
mov
sbb
adc
sub
lahf
loopne
dec
ss
mov
sbb
xor
in
test
stc
add
pop
lahf
push
mul
pop
cmp
ret
mov
int3
fst
ins
popa
pop
jae
movs
lea
mov
cmp
sbb
mov
inc
mov
inc
shr
sar
mov
mov
sbb
inc
mov
sbb
sub
adc
pop
inc
int3
pop
mov
and
sar
ins
or
hlt
dec
ret
pop
sbb
fprem1
stc
call
bt
ror
clc
stc
mov
call
push
mov
sub
shr
movs
in
sub
ss
or
sbb
push
xchg
loope
add
cmps
adc
mov
stc
repnz
movs
ins
leave
jl
adc
rcr
cwde
add
fcomp
add
cmp
mov
inc
push
jle
mul
sbb
retf
inc
jmp
xor
cmc
jmp
mov
add
inc
(bad)
pop
lds
mov
lock
pop
lahf
sub
sbb
or
sbb
lods
add
jmp
cmp
adc
daa
lods
ds
popa
lds
mov
cdq
loope
or
push
lods
push
mov
nop
pusha
inc
mov
int
mov
je
add
pop
dec
scas
mov
cld
sbb
or
dec
sbb
jbe
jns
int3
pop
fcom
fidivr
cmp
clc
xchg
sbb
sbb
aas
popa
dec
push
mov
mov
out
adc
cmps
or
pop
mov
inc
hlt
in
data16
enter
add
jmp
ja
outs
lahf
ja
dec
pop
mov
cmp
sbb
xor
lea
jae
test
bt
bt
sub
pushf
lea
call
pusha
pusha
lea
jae
clc
pusha
sub
mov
push
pusha
lea
call
pusha
jmp
loop
cmp
cdq
sub
mov
jne
and
movs
out
dec
mov
dec
hlt
lea
adc
cwde
push
scas
dec
sahf
(bad)
ins
cmp
xor
jl
and
sub
leave
or
sbb
iret
psadbw
add
mov
xchg
jno
enter
or
push
adc
pop
sti
add
mov
iret
cmps
cmp
int3
inc
mov
mov
jo
cld
inc
in
pushf
cmps
popf
mov
fisub
inc
pop
push
mov
cmp
fnstcw
fwait
daa
dec
call
and
leave
push
jne
mov
std
dec
push
mov
sub
jae
stos
xchg
and
xchg
push
inc
(bad)
jo
xor
push
ja
cmp
not
aas
xor
lock
pop
sub
jle
rol
out
xchg
or
in
sub
mov
xchg
cld
mov
jae
int3
fidivr
xor
popa
inc
mov
pop
sbb
push
div
in
mov
mov
sbb
test
pop
hlt
sahf
inc
fdiv
cmp
rol
or
rol
jo
out
push
add
mov
call
dec
sbb
imul
mov
shl
call
call
mov
mov
in
in
jmp
inc
xchg
xchg
int
jmp
jno
mov
bound
mov
mov
shl
retf
and
dec
mov
inc
mov
lahf
push
jnp
inc
cmps
clc
fwait
retf
aad
sbb
shr
inc
loop
mov
pop
push
jl
mov
movs
scas
jo
dec
pop
dec
inc
(bad)
ja
or
in
(bad)
(bad)
out
jns
test
dec
cmp
fsub
sub
adc
dec
pop
mov
inc
je
jge
repz
adc
(bad)
adc
pop
adc
cmp
(bad)
pop
(bad)
int3
mov
dec
mov
frstor
hlt
dec
neg
int3
push
mov
cmp
call
fcom
jns
sub
add
adc
jp
add
shr
add
(bad)
dec
add
mov
mov
aaa
outs
push
out
movs
or
fst
retf
lock
fadd
mov
mov
test
xchg
shl
(bad)
outs
dec
inc
push
daa
dec
out
cmp
pop
js
or
pop
jae
fwait
jecxz
mov
inc
jecxz
icebp
push
imul
xchg
xor
loopne
in
(bad)
iret
inc
je
push
mov
cmp
xchg
call
bound
sbb
jne
jb
jl
mov
adc
pop
cld
(bad)
and
gs
pusha
sub
cli
ds
pop
mov
sub
aas
xchg
iret
jmp
loopne
das
sub
push
add
idiv
(bad)
jmp
xchg
mov
mov
pop
mov
dec
loop
mov
push
out
movs
lahf
push
(bad)
mov
push
adc
cmp
sub
or
add
xor
adc
adc
inc
inc
xor
mov
repz
adc
xor
cmp
iret
mov
jmp
out
add
pop
imul
push
mov
push
xchg
jne
xor
daa
sar
xor
aad
shr
mov
call
inc
cmp
test
test
not
clc
cmc
call
adc
sub
push
sbb
lods
lock
jno
mov
sub
adc
out
or
xchg
jge
cs
pop
repz
(bad)
call
fidivr
in
mov
out
cmps
jecxz
ret
daa
jnp
in
jecxz
cld
and
mov
(bad)
jp
fisttp
inc
stos
(bad)
adc
inc
mov
pop
pushf
xor
ja
leave
xlat
and
jp
cdq
and
(bad)
push
movs
or
push
hlt
xchg
(bad)
cld
adc
pop
jae
pop
xchg
loope
and
push
inc
sub
dec
es
cmp
repz
jnp
mov
and
ror
add
imul
inc
popa
into
scas
and
push
push
fmul
add
adc
xchg
cmp
in
test
sar
sar
cmp
popf
adc
mov
mov
mov
retf
mov
adc
loop
xor
cs
scas
dec
pop
out
dec
inc
mov
aad
lock
or
les
jp
test
(bad)
cmc
xchg
add
adc
das
lods
call
mov
mov
test
mov
test
mov
dec
adc
mov
pop
xor
test
cmp
sbb
mov
ss
xchg
mov
outs
mov
mov
jnp
(bad)
es
jmp
(bad)
jae
arpl
ror
mov
push
sub
push
jmp
push
pusha
push
lea
jae
clc
call
pop
repnz
leave
lock
sub
pop
adc
jno
xchg
or
jne
jo
fld
pop
test
xchg
dec
inc
mov
cmc
stos
add
or
leave
mov
sub
xor
je
push
leave
and
dec
ficomp
lds
sub
cmp
shr
mov
xor
sub
jecxz
icebp
test
dec
mov
sbb
cmc
inc
sti
test
xor
adc
push
adc
or
mov
in
mov
sbb
jmp
inc
test
out
xor
add
data16
ja
sbb
(bad)
fdiv
dec
fnstsw
cli
add
dec
sbb
push
lods
call
push
lea
je
cmc
test
cmp
pusha
call
call
data16
int
cdq
sub
sbb
push
imul
sbb
leave
fucom
fs
fs
adc
fsub
sahf
and
mul
add
add
xchg
mov
dec
or
scas
and
scas
xor
xor
mov
pushf
xchg
mov
(bad)
scas
imul
mov
pop
sbb
fcmovnbe
retf
rcr
mov
push
jbe
leave
push
cmc
add
nop
sub
call
jbe
leave
arpl
leave
aaa
push
pusha
sub
xor
loop
daa
ds
adc
push
movs
lds
sub
add
and
ins
jae
or
ss
mov
cli
mov
retf
imul
jmp
call
sbb
test
cdq
sub
data16
in
xchg
adc
std
aad
cmp
or
or
hlt
rol
dec
call
sub
xchg
lahf
inc
enter
int
inc
sahf
call
imul
loopne
push
in
sahf
int
xchg
inc
dec
ror
fisub
dec
test
repz
and
fisttp
leave
mov
call
sbb
adc
pop
iret
push
rcr
pop
(bad)
movs
ins
sbb
mov
fs
scas
add
(bad)
ja
dec
jg
fxch
mov
cmc
mov
loop
sub
and
in
cmp
dec
test
sub
dec
xchg
xor
int3
inc
fild
aas
add
cmp
inc
cmps
or
push
pop
pusha
jp
les
sbb
dec
or
data16
add
add
mov
pop
cli
fsub
jbe
xor
outs
out
jno
cmp
icebp
ror
add
mov
inc
jg
sbb
fidiv
add
daa
int3
and
sti
mov
inc
dec
inc
pop
mov
test
inc
ror
fbstp
or
lock
or
shl
ror
pop
jae
push
inc
sbb
lahf
(bad)
or
fs
pop
fmul
sub
retf
and
sub
lods
lds
adc
add
popf
xor
iret
mov
mov
mov
mov
inc
sbb
mov
jg
dec
jb
cdq
sub
push
movs
xor
in
rcr
out
outs
enter
(bad)
int
pop
xchg
out
lods
xor
inc
push
and
mov
test
jo
adc
xor
mov
cmc
sbb
stc
loope
mov
mov
jnp
push
jae
fisub
jle
xchg
loope
ins
movs
and
jecxz
lahf
and
pop
inc
outs
inc
pop
lock
and
call
or
(bad)
pop
fs
shr
in
cdq
sub
push
(bad)
fs
imul
rcl
and
loope
xlat
call
into
cmps
retf
out
inc
scas
sbb
dec
(bad)
jae
adc
ret
iret
adc
fcmovnb
xlat
adc
ja
out
outs
inc
push
ds
jo
adc
xchg
jbe
xchg
cld
(bad)
cmp
popf
dec
mov
mov
mov
sbb
aad
icebp
sbb
or
popa
out
adc
push
adc
and
std
inc
jl
push
pushf
cmp
aam
pushf
xchg
add
sahf
xchg
mov
or
push
gs
cld
xor
push
movs
inc
sbb
or
pusha
popf
push
sar
test
xchg
sub
add
adc
cs
rcr
(bad)
retf
add
bound
stc
jmp
or
push
out
out
cdq
sub
lds
mov
push
sbb
adc
jb
xchg
mov
pushf
movs
xor
xchg
dec
aad
repz
xchg
arpl
mov
jmp
nop
jge
xor
pop
gs
fnstsw
jne
stos
cmp
mov
add
xchg
inc
stc
or
adc
test
adc
mov
retf
aam
pop
jno
fisub
mov
out
test
popa
push
sbb
dec
cmc
pop
push
add
mov
jnp
mov
fisubr
cmps
mov
jmp
adc
call
test
adc
pop
pushfw
ss
sar
mov
mov
in
add
movs
lea
shl
ret
push
lea
pushf
jmp
xor
sub
arpl
stos
nop
push
mov
xchg
xchg
sbb
js
iret
pop
aad
cmp
inc
sub
mov
hlt
shr
mov
add
adc
xchg
pop
xchg
sub
call
xchg
(bad)
outs
push
(bad)
mov
popa
int3
push
ja
pop
xor
xlat
or
ror
mov
xor
loope
repz
pop
mov
fcomi
push
in
jnp
mov
leave
lods
push
pop
sub
mov
ins
or
xchg
mov
push
dec
fbstp
inc
mov
mov
cld
(bad)
jnp
clc
pop
adc
(bad)
cmp
xor
fild
mov
mov
ret
gs
rcl
(bad)
js
icebp
dec
cld
xor
cmp
js
fsub
(bad)
retf
cmp
or
pop
mov
mov
(bad)
stc
std
inc
or
mov
mov
add
(bad)
pop
xor
fs
mov
je
dec
or
push
xor
test
push
ds
mov
es
mov
inc
pop
mov
xor
and
inc
lods
repnz
pop
scas
fwait
arpl
push
jmp
(bad)
jl
leave
call
xchg
and
popf
loop
(bad)
scas
jno
movs
inc
cmp
sub
sub
xchg
fisubr
sbb
sub
bound
sar
sub
pop
bound
cmp
cdq
sub
cmp
inc
mov
das
jecxz
inc
mov
ja
repz
call
test
fsubr
jg
mov
inc
cmp
inc
sbb
inc
sbb
stos
sub
shl
lds
ins
sub
sahf
cdq
pop
in
dec
jmp
pop
xor
pop
gs
cmc
jo
test
mov
or
fimul
xchg
xor
add
cs
fcomp
sbb
or
jmp
and
leave
xor
push
mov
enter
je
jmp
or
mov
mov
cdq
sub
loop
stos
pop
pop
adc
ret
dec
movs
xchg
sahf
out
popf
push
iret
ret
jmp
mov
jecxz
jae
ins
movs
mov
clc
test
inc
mov
push
je
test
mov
inc
cmp
daa
cmp
push
inc
pusha
ror
push
or
inc
pop
add
(bad)
or
lods
shl
rcl
push
push
push
stos
(bad)
aaa
adc
pop
push
dec
shr
cld
xor
nop
push
mov
ins
inc
sub
push
arpl
add
dec
mov
and
push
in
xchg
mov
push
(bad)
mov
cli
test
out
ret
pop
popf
vpcmpgtd
mov
adc
fiadd
sub
sti
sbb
jecxz
xor
cwde
fsub
mov
sub
(bad)
jmp
mov
lock
sbb
ins
inc
sti
push
inc
push
sbb
enter
mov
stos
xchg
leave
xor
sbb
cmps
iret
call
in
xor
enter
push
cmp
fwait
xor
rcr
sbb
retf
xor
cmp
lods
mov
pop
dec
aad
movs
jmp
sub
sub
jmp
add
lea
jno
pusha
mov
dec
call
rcr
es
cmp
jb
(bad)
idiv
mov
dec
add
pop
lahf
xchg
mov
adc
push
(bad)
in
cmp
jb
or
popf
test
stos
int
addr16
mov
dec
je
inc
mov
inc
mov
cli
sbb
mov
inc
mov
cmc
mov
nop
das
cmp
sar
hlt
in
inc
or
scas
je
imul
pop
leave
mov
mov
jae
push
jge
xchg
adc
stos
loop
cmpxchg
into
sar
mov
dec
inc
push
push
into
fcomp
loope
jns
fcomp
jmp
aam
stos
mov
sub
stos
arpl
jo
mov
inc
addr16
sbb
or
sbb
or
push
push
and
xor
mov
cwde
and
and
mov
mov
sub
icebp
test
in
out
dec
add
out
test
dec
(bad)
pop
cmp
add
add
and
data16
push
mov
and
add
xor
jl
stos
and
adc
mov
lods
add
retf
mov
in
sbb
jmp
fldz
loopne
dec
ficomp
adc
adc
std
icebp
(bad)
les
popf
daa
inc
xchg
xor
ins
jl
xor
jbe
in
sub
adc
xor
dec
in
or
in
(bad)
jbe
inc
mov
call
outs
daa
ja
xchg
push
inc
add
movs
dec
retf
mov
add
arpl
lahf
(bad)
out
icebp
scas
add
mov
repnz
out
movs
mov
test
out
sub
inc
in
mov
dec
fcomp
test
(bad)
mov
neg
mov
jge
je
sbb
div
jmp
jo
pop
neg
cmps
aam
lock
inc
dec
jbe
rcl
adc
retf
adc
mov
mov
mov
neg
cmp
shr
rcl
mov
pushf
bt
clc
test
add
push
mov
cmc
cmc
test
pushf
push
pushf
lea
je
pusha
add
call
imul
pusha
cmc
bt
add
pushf
lea
jmp
inc
mov
in
in
sub
stos
cld
out
xor
sub
rcl
mov
pusha
scas
jbe
loope
in
call
jns
adc
xchg
retf
fs
pop
pop
jmp
call
in
loop
and
jg
out
je
test
pop
movs
fidiv
fsubr
push
ja
xchg
scas
xor
pop
aam
jbe
lods
adc
adc
inc
popa
mov
jp
push
sbb
mov
cwde
cmps
popf
nop
(bad)
and
inc
jo
adc
clc
xchg
test
mov
in
add
add
jle
out
push
cwde
fisub
add
test
arpl
(bad)
inc
inc
and
lds
repnz
sbb
pusha
mov
push
pushf
pushf
lea
jmp
bswap
movzx
mov
mov
mov
call
pushf
jmp
dec
shl
out
sub
push
test
xor
fldcw
or
xchg
rcr
inc
ds
cdq
push
inc
in
in
sti
mov
(bad)
add
cmp
inc
push
mov
sub
(bad)
jle
adc
mov
mov
pop
fdivr
sbb
pop
test
fisubr
enter
les
inc
out
or
sub
sub
push
fdivr
and
sbb
mov
lahf
add
jo
clc
inc
sub
push
pop
fadd
inc
ficomp
loopne
pop
movs
pop
loope
xchg
jmp
dec
mov
sub
mov
fstp
test
mov
adc
pusha
mov
pusha
pushf
lea
jmp
shr
sar
shld
inc
sbb
mov
bts
add
pop
call
cmc
cmp
jmp
cmp
cmc
add
pushf
pusha
bt
cmp
movzx
cmp
neg
lea
mov
mov
cmp
push
add
jmp
pusha
jmp
mov
sub
mov
div
jge
aad
add
rcl
leave
mov
mov
adc
pusha
push
mov
xchg
add
in
loop
jge
(bad)
retf
call
inc
cs
push
les
fucomi
or
xor
lds
ins
mov
outs
mov
ret
pop
iret
movs
jae
enter
or
icebp
stc
ret
dec
data16
cwde
mov
mov
pop
push
(bad)
cld
push
push
pop
xor
repnz
pushf
mov
or
retf
cwde
test
pop
mov
jne
mov
jmp
sbb
push
sbb
cmp
xor
(bad)
fcom
and
repz
mov
and
sub
push
jl
enter
(bad)
pop
add
cmp
ja
(bad)
sahf
das
xchg
imul
inc
int3
jo
mov
adc
cs
fadd
fistp
in
fs
gs
and
or
sahf
cmp
or
popa
test
mov
add
sub
jo
mov
mov
lea
mov
jno
movs
ror
sbb
sbb
sahf
sbb
fst
call
hlt
int3
je
jmp
cmps
push
sub
and
loopne
in
in
push
test
sub
ds
dec
pop
jbe
mov
cld
(bad)
and
sbb
sub
js
in
cmps
jmp
imul
fild
jb
jnp
mov
jmp
mov
jecxz
fld
sbb
cmp
xor
cmp
rcr
cmp
(bad)
cld
sub
out
adc
mov
and
ret
ret
mov
xor
mov
sub
cmp
xchg
fdivrp
scas
scas
mov
fidivr
mov
ret
mov
push
enter
mov
mov
sub
arpl
jns
jmp
hlt
pushf
imul
push
jae
das
(bad)
jg
je
pushf
rcl
cmc
add
and
sub
add
sub
clc
shr
shl
neg
clc
mov
setbe
call
call
das
xor
add
cdq
mov
(bad)
sub
loope
dec
push
sub
inc
xchg
adc
mov
push
sub
in
xlat
dec
xor
dec
out
xchg
fld
fld
adc
xchg
adc
mov
adc
scas
push
xchg
mov
jp
ins
or
movs
outs
mov
inc
aad
mov
(bad)
xchg
dec
pop
xchg
sub
adc
imul
xchg
icebp
mov
mov
iret
aad
cs
mov
std
iret
jns
call
adc
mov
jl
std
xchg
dec
xchg
push
sub
cld
adc
push
mov
and
adc
fs
jle
int3
cdq
mov
xor
xchg
xchg
sbb
cdq
sub
cwde
jb
push
je
aad
jno
(bad)
jp
xchg
inc
(bad)
jmp
dec
and
push
(bad)
and
int3
add
inc
mov
mov
dec
adc
or
hlt
adc
sahf
mov
mov
jmp
out
jg
jmp
cmp
hlt
movs
iret
fisub
xlat
mov
jg
je
dec
retf
sub
push
mul
repz
push
imul
ins
outs
mov
aad
in
mov
scas
jmp
cmc
or
cmc
dec
fidiv
(bad)
clc
mov
loop
enter
cmp
retf
dec
push
push
arpl
test
popf
fld
out
(bad)
xor
fnstsw
push
jmp
xchg
sub
mov
inc
call
data16
(bad)
retf
imul
pop
mov
and
icebp
mov
add
mov
in
pop
or
aaa
cmp
clc
das
movs
out
pop
scas
cmp
xchg
pop
cs
or
rcl
(bad)
shl
push
cwde
push
jp
push
push
sbb
(bad)
sbb
mov
ins
retf
xor
js
outs
rcr
push
nop
mov
xchg
dec
push
mov
or
mov
or
nop
push
out
pop
inc
sar
dec
push
mov
div
scas
jl
push
call
rcl
(bad)
call
fidivr
sbb
pushf
jmp
fld
shr
popf
cdq
sub
cmp
icebp
or
retf
mov
inc
mov
sbb
jbe
outs
test
fadd
fisttp
leave
jmp
les
dec
mov
or
pushf
in
loop
bnd
fadd
or
sar
dec
lods
xor
scas
push
pop
mov
jno
aas
gs
shr
push
jecxz
mov
repz
adc
call
adc
outs
jns
cmp
hlt
mov
add
gs
mov
and
pop
(bad)
jnp
dec
mov
scas
dec
fnsave
dec
or
pop
or
js
xchg
test
(bad)
ds
push
or
(bad)
sbb
aad
jmp
das
inc
push
iret
shl
sub
and
jne
mov
movs
loop
dec
dec
add
xor
outs
cmp
xor
fisttp
or
scas
loopne
inc
in
add
call
call
and
xchg
mov
add
aad
jno
add
mov
pushf
test
sbb
call
pushf
mov
push
mov
push
ret
add
cdq
sub
push
(bad)
pusha
sbb
push
sub
jo
cmp
in
mov
fs
and
mov
push
sahf
jne
enter
adc
push
jmp
mov
dec
out
dec
movs
clc
ins
push
cmc
inc
jge
dec
repnz
mov
das
push
arpl
push
data16
std
dec
sub
iret
outs
inc
cmp
pushf
push
mov
dec
fwait
aas
outs
test
mov
mov
or
in
cmp
cld
lods
loop
fild
inc
add
pop
fsubr
and
repnz
xor
rcr
mov
jmp
dec
add
imul
out
lods
add
pop
mov
(bad)
dec
sbb
pop
mov
ins
xor
int
mov
sbb
sahf
cdq
sub
(bad)
arpl
repnz
pop
(bad)
jmp
mov
loop
jmp
mov
mov
xor
inc
cmp
fnstsw
fsub
cmp
lods
data16
dec
enter
pop
push
and
jmp
add
into
sbb
cmp
aas
cmp
mov
or
ffreep
ds
adc
cmc
loop
test
jle
mov
pop
cmc
in
les
jnp
jge
add
xlat
mov
int
dec
inc
std
stos
call
push
sti
repz
mov
dec
push
jmp
ins
xor
mov
push
xchg
mov
mov
mov
sti
sub
pop
xor
jo
int
adc
test
nop
stos
mov
dec
mov
dec
and
sbb
adc
js
mov
(bad)
daa
sbb
pop
and
mov
mov
or
xchg
sti
push
cmp
add
ds
mov
pop
xor
nop
pop
fcmovnb
fld
push
xchg
dec
push
dec
in
cmps
je
in
sahf
es
jp
mov
bnd
mov
cdq
sub
jo
sub
push
mov
dec
adc
xor
dec
adc
add
inc
int
fs
sbb
or
ror
mov
mov
inc
sub
sbb
xchg
and
push
pusha
xor
es
outs
cmp
addr16
jmp
push
cld
idiv
fcmovb
add
jp
add
add
repz
and
stc
aad
inc
jge
pop
test
call
inc
cmps
sti
repz
out
(bad)
adc
shr
cmc
sub
jle
sbb
es
cdq
push
xchg
adc
cwde
jo
mov
ror
add
jmp
mov
cdq
sub
cwde
inc
mov
bound
dec
adc
xor
jmp
dec
jno
into
and
and
les
mov
sbb
enter
mov
xor
je
loope
retf
leave
inc
(bad)
rcr
cmp
scas
adc
outs
jno
push
xor
scas
and
repnz
test
adc
call
push
lahf
mov
xchg
inc
adc
mov
rol
(bad)
jecxz
add
cmps
xor
inc
leave
jne
pop
das
and
xor
xchg
mov
adc
fisttp
and
pushf
mov
push
pusha
mov
pushf
pushf
pushf
pushf
push
ret
lea
jae
pushf
lea
jne
jmp
pushf
pushf
mov
mov
mov
push
ret
lea
call
jmp
add
and
aas
pusha
or
(bad)
push
fidiv
sbb
sti
sti
scas
mov
mov
dec
loop
jo
xchg
or
das
ror
jns
dec
mov
les
xor
pop
jbe
sbb
fs
inc
jge
jmp
pop
sbb
test
xor
pop
sbb
dec
inc
jno
icebp
inc
push
add
xor
adc
push
pop
aas
(bad)
jle
xlat
addr16
das
(bad)
fisub
sbb
sub
cmp
hlt
pop
lds
ffree
jp
call
(bad)
aaa
mov
mov
test
addr16
push
dec
(bad)
ret
jmp
cmp
push
bt
sub
clc
push
pop
pushf
lea
jo
cmp
jmp
lahf
jo
dec
call
aas
out
loop
push
or
mov
stos
jnp
jb
iret
adc
imul
repz
mov
fs
cmps
loop
scas
mov
add
shr
and
repnz
imul
xchg
cmc
mov
add
push
outs
ins
jb
popa
cmp
sub
addr16
js
or
ins
mov
jo
adc
push
cmc
jl
adc
movs
jb
jle
xor
or
mov
pop
inc
fild
fldcw
jae
test
out
sar
adc
into
sub
sub
mov
js
in
loopne
adc
lods
cdq
gs
not
mov
call
pusha
push
mov
jmp
push
lea
jbe
and
sub
bswap
mov
sar
mov
pushf
add
btc
shr
bt
and
sbb
shl
mov
cmc
shr
add
not
movzx
mov
lea
call
lea
jae
jmp
pusha
stc
mov
cmp
adc
mov
test
pushf
cmp
pushf
mov
lea
jbe
pusha
mov
inc
movsx
add
not
sar
bswap
movsx
mov
neg
pushf
add
sbb
shrd
mov
rcr
bsf
jmp
pop
jecxz
test
std
inc
into
mov
adc
test
push
cdq
mov
jne
stc
lods
gs
push
mov
bnd
xor
jno
popa
pause
adc
pop
mov
adc
adc
stos
adc
cmp
pop
out
xor
jmp
imul
push
mov
mov
movs
pop
lods
and
mov
imul
or
rcl
mov
rol
and
movs
std
mov
cmp
and
lods
push
dec
pop
mov
jb
or
jns
mov
fwait
loop
pop
gs
movs
int
in
add
inc
jge
aaa
adc
adc
outs
jg
pop
addr16
push
xchg
sub
add
jmp
xchg
cdq
sub
jmp
cmp
enter
enter
in
xchg
cdq
fs
rol
add
and
sbb
push
sbb
sbb
mov
fimul
sub
ror
xchg
mov
cmp
lods
scas
imul
or
pop
or
xchg
dec
bound
and
push
inc
pusha
into
dec
jo
push
push
add
sbb
arpl
push
mov
fsub
and
cmp
xchg
and
adc
out
out
out
and
lods
(bad)
loope
call
cdq
sub
stos
in
push
sahf
out
jae
(bad)
test
jl
shl
and
cdq
mov
jno
push
and
aas
mov
mov
xchg
lock
js
les
jmp
imul
sbb
mov
retf
cmp
fcmove
nop
jo
out
repnz
inc
sbb
dec
bsf
std
out
aam
dec
popf
add
mov
mov
jg
adc
sub
aam
sbb
jns
mov
imul
test
cdq
outs
xchg
sub
in
sub
cmps
lahf
xorps
xor
in
mov
daa
pop
add
xchg
push
pop
movs
ret
mov
mov
sti
ror
sbb
jmp
ror
bt
add
cmc
rol
cmp
add
pushf
cmp
mov
stc
mov
pushf
cmp
add
bt
push
test
push
push
jmp
lea
je
clc
sub
stc
pushf
stc
bt
cmp
pusha
call
loop
in
addr16
cdq
sub
loop
outs
push
ds
jg
xchg
cmp
(bad)
das
xchg
cmps
fnsave
fiadd
mov
jne
(bad)
in
ss
(bad)
aam
test
inc
add
mov
xchg
pop
sub
aam
adc
xor
xchg
shr
jmp
inc
into
icebp
jl
hlt
add
mov
and
fisttp
ret
push
(bad)
pop
inc
mov
inc
fiadd
ss
cmc
fisubr
mov
pop
mov
dec
sbb
ficomp
adc
ss
ret
mul
cmp
outs
cmps
adc
mov
mov
(bad)
mov
or
xchg
xchg
aas
add
ins
push
mov
push
pcmpgtb
add
or
mov
sbb
test
nop
mov
fwait
loop
outs
mov
mov
push
and
xchg
sbb
jge
sub
daa
stos
bound
mov
and
cmp
fbstp
push
mov
dec
or
pop
push
data16
dec
xchg
or
and
pusha
add
ja
or
popf
and
pusha
dec
push
dec
jge
mov
or
js
xchg
imul
aad
in
stc
adc
cli
scas
mov
dec
pop
lock
sbb
xchg
add
pushf
lea
jmp
mov
mov
mov
mov
mov
push
mov
lea
jmp
push
mov
lea
je
shr
sar
cmp
adc
add
push
add
btr
mov
mov
add
call
jecxz
nop
sbb
pop
jbe
into
pop
cmps
sbb
arpl
or
pop
inc
mov
sahf
arpl
aam
jo
adc
dec
or
sbb
jmp
mov
cmp
push
retf
sahf
xchg
push
fwait
movs
fild
add
imul
scas
xor
(bad)
dec
test
sti
arpl
aad
fucomi
and
outs
sub
adc
out
push
fstp
mov
pop
jg
push
cmp
and
push
call
div
lahf
adc
push
nop
jmp
mov
inc
jle
sahf
aad
out
pop
outs
test
inc
adc
mov
int3
loope
dec
mov
and
ror
pop
and
dec
cld
cmp
or
xchg
test
push
int3
push
and
ds
jae
aaa
outs
and
pop
fs
int3
mov
bnd
jno
mov
lods
and
inc
ror
jo
mov
test
and
sbb
movs
enter
icebp
test
xor
pop
movs
jg
dec
push
(bad)
mov
rcr
inc
dec
or
jg
call
inc
push
inc
mov
or
jo
pop
ret
mov
std
pop
mov
scas
pushf
in
sbb
pop
test
jb
std
xchg
mov
jge
dec
mov
pop
dec
ins
push
out
xchg
daa
mov
aaa
pop
or
mov
add
sub
inc
cli
fneni(8087
pop
jg
repnz
push
pop
movs
sbb
and
or
cmp
sbb
cmp
adc
rcr
push
fcmovb
pushf
xor
lahf
idiv
es
push
fidiv
push
int
ins
xor
and
inc
stos
push
add
dec
retf
push
pushf
fucomp
jl
mov
adc
mov
xor
cli
cmp
mov
jmp
cmps
call
mov
adc
pop
ficom
sub
stos
mov
or
mov
rcr
sub
dec
mov
pop
movs
std
mov
adc
loop
cmp
adc
addr16
mov
xchg
sar
cmp
ss
or
push
lea
jb
jmp
push
sub
xchg
xchg
cdq
sub
sbb
sub
loopne
in
sar
xor
mov
push
push
lahf
jecxz
scas
mov
orps
fs
adc
inc
pop
push
(bad)
push
cmps
xchg
jge
enter
retf
shr
jno
inc
stos
clc
xchg
ror
push
push
int
sbb
jmp
fmulp
cli
ja
gs
xchg
or
fisubr
xchg
push
shr
in
out
scas
mov
in
in
bound
or
dec
int
in
and
mov
mov
xorps
xchg
dec
out
mov
mov
sbb
sahf
cmps
mov
add
lea
fs
daa
imul
and
sub
cmp
ficom
lahf
mov
cmp
add
xchg
rol
(bad)
xchg
aad
and
loopne
inc
test
inc
xchg
ret
fwait
xchg
je
cmps
repnz
jp
stos
(bad)
xchg
push
clc
push
and
mov
(bad)
(bad)
fnsave
int3
jmp
mov
inc
jne
mov
mov
xor
mov
or
sub
and
movs
stc
lods
mov
inc
cmc
push
mov
mov
sub
cwde
xor
inc
jns
dec
or
mov
or
cwde
test
mov
push
push
sub
aas
stos
ins
clc
std
loop
cwde
pop
push
xor
mov
arpl
mov
aad
icebp
in
cmps
cld
out
fist
mov
aaa
(bad)
sub
dec
hlt
mov
mov
bound
test
je
xchg
push
push
push
add
or
fst
retf
or
repnz
and
pop
push
outs
ins
gs
jne
xor
cs
ins
add
xor
stc
add
clc
cmp
jmp
jmp
bsr
btc
push
lea
mov
xor
inc
inc
mov
rcl
mov
stc
sar
rol
xor
push
call
sub
mov
cmc
stc
stc
ror
test
pushf
sub
pusha
call
cmp
inc
dec
pop
rdpmc
and
mov
aaa
jmp
sbb
mov
or
pushf
(bad)
jle
mov
sbb
aam
push
nop
test
push
or
sbb
adc
mov
cld
jbe
jno
repz
outs
iret
dec
inc
inc
xor
dec
syscall
jns
add
xor
not
das
jbe
out
dec
(bad)
push
push
mov
pop
xor
xor
inc
push
cmps
fadd
scas
clc
lods
adc
inc
jl
pop
push
les
cmp
icebp
inc
sub
outs
cdq
xor
enter
xor
popf
xchg
mov
mov
stos
pop
out
ficomp
add
pop
adc
in
xor
mov
ds
out
inc
push
cmp
pop
adc
jge
test
mov
add
xor
sub
jge
ret
push
xchg
stos
call
shr
xchg
ins
push
push
fsub
out
inc
xor
jae
mov
in
push
and
xchg
sub
addr16
sar
adc
scas
loopne
pop
in
push
loop
imul
jb
push
shr
and
pusha
inc
add
aam
adc
sar
test
imul
mov
call
xor
call
(bad)
lock
inc
in
dec
mov
test
mov
lea
movzx
setb
pop
movsx
pop
pusha
pusha
pushf
mov
mov
jmp
push
inc
call
adc
pusha
pushf
lea
jmp
push
and
jne
cdq
sub
in
and
mov
outs
add
xchg
pop
fist
mov
adc
add
push
(bad)
ror
jmp
or
lds
mov
push
out
fs
ret
jae
lods
sub
sub
aam
cmps
pop
mov
dec
cmp
cmps
repnz
adc
outs
call
je
hlt
stos
add
xchg
pop
push
sti
mov
cwde
inc
xchg
mov
pop
push
add
push
popf
gs
popa
pop
sbb
jecxz
shr
(bad)
int
in
rol
and
jnp
mov
aas
repz
test
inc
stc
lods
push
pop
call
repz
inc
push
rcr
pop
or
mov
std
adc
add
pushf
cmps
cdq
mov
retf
mov
sbb
cmps
push
lea
in
xor
pop
cmp
sub
sub
mov
cmp
in
xchg
in
inc
cld
gs
ret
cmp
mov
cmps
fimul
pop
dec
cmp
xchg
mov
pop
adc
cmp
daa
jl
call
push
mov
cmp
push
dec
push
adc
sbb
inc
sbb
cmp
sbb
pushf
retf
pushf
rol
cmp
lea
jbe
pusha
pushf
push
lea
je
jmp
bt
imul
jmp
jmp
je
pushf
lods
jmp
cli
xor
mov
out
rol
sti
pop
lahf
pop
scas
push
xchg
mov
xchg
and
sbb
push
cli
adc
imul
add
aaa
push
xchg
pop
xchg
add
xchg
shr
push
pushf
lods
push
movs
neg
nop
xchg
sub
out
cmp
mov
push
jne
arpl
jge
pop
pop
sahf
imul
push
dec
push
and
xor
adc
xchg
add
pop
jnp
mov
dec
pop
(bad)
adc
push
test
pop
and
outs
stc
xor
sbb
enter
jp
jnp
scas
in
test
sub
(bad)
lods
jmp
lea
je
pushf
pusha
lea
jmp
sub
cdq
sub
or
inc
imul
push
sub
push
dec
test
lock
pop
jb
push
ins
les
sub
mov
sub
fisttp
mov
test
add
imul
adc
mov
pop
daa
out
icebp
test
fnsave
lds
dec
fstp
xchg
addr16
sbb
sub
inc
mov
add
pop
lds
dec
cmp
cmp
je
rcr
stc
inc
pop
dec
repz
pop
and
cmp
mov
jb
jmp
inc
push
sbb
dec
or
pusha
ja
mov
lock
lds
mov
in
leave
loop
div
(bad)
jmp
out
jl
mov
sbb
lds
xor
add
pop
out
inc
loope
stos
inc
mov
ss
cwde
ret
popa
loop
(bad)
ret
aas
test
jae
add
pop
pop
stos
sub
cmc
and
add
inc
inc
(bad)
xchg
jle
imul
jbe
inc
out
sub
(bad)
mov
movs
sahf
mov
out
sbb
jge
xchg
mov
cdq
movs
cmp
popa
lock
jmp
mov
mov
test
mul
pop
nop
push
test
retf
inc
push
push
sbb
stos
jecxz
sub
cld
add
mov
cdq
sub
les
cmp
pusha
into
jae
inc
jnp
call
sahf
test
arpl
xor
scas
cmps
sbb
fwait
push
cmps
repnz
inc
xor
mov
movs
retf
sub
jae
mov
and
add
rcr
mov
sti
mov
icebp
xor
test
imul
sub
loop
or
test
mov
pop
int
sub
inc
fsubrp
mov
xchg
dec
mov
xor
mov
sbb
add
ret
fwait
xchg
cmp
fwait
xchg
sub
dec
jg
das
enter
and
cs
retf
sub
(bad)
lods
and
ror
inc
hlt
inc
bound
inc
and
fisttp
loopne
or
jo
cli
adc
sub
es
test
out
jmp
push
clc
push
les
sub
aaa
inc
in
es
xchg
cmps
(bad)
cmp
push
mov
push
xchg
pop
jg
adc
cld
push
mov
push
pop
retf
test
lea
(bad)
sbb
add
in
std
jg
fist
(bad)
popf
add
xchg
rcr
retf
xor
push
jo
mov
mov
adc
adc
jmp
push
xchg
add
inc
fistp
stc
mov
cmp
mov
lods
cld
mov
loope
push
inc
in
mov
inc
push
push
pop
loop
adc
cmp
mov
rcl
lea
loope
sub
adc
and
adc
add
scas
hlt
es
xchg
retf
daa
fwait
cmp
repnz
mov
retf
rcr
and
fbld
outs
in
aam
fwait
xor
mov
cmp
stos
test
test
or
pop
and
inc
pop
push
test
sbb
adc
mov
loope
cwde
mov
es
mov
ins
add
(bad)
jmp
sub
push
or
xor
jae
es
(bad)
push
cmp
fisubr
mov
repz
jl
xchg
addr16
ret
jmp
sub
lds
pop
jns
pushf
xor
add
mov
jge
xchg
xlat
push
stos
mov
push
bound
push
imul
mov
xor
fs
jb
pushf
add
jge
pushf
cmp
cmp
jmp
movzx
mov
bts
rcr
mov
pusha
clc
pusha
bt
cmp
pushf
mov
push
lea
jne
lahf
xor
sets
mov
pusha
shl
pusha
jmp
pushf
pusha
lea
ja
push
sub
xor
pushf
rcr
lea
add
lea
bsr
mov
clc
setns
mov
cmc
cmc
test
bt
repnz
call
pusha
xor
add
dec
jmp
shr
mov
pushf
cmp
clc
cmp
pushf
lea
je
cmc
push
push
cmp
pusha
call
neg
push
cmc
call
scas
adc
pop
xchg
mov
pop
es
mov
add
ins
xchg
dec
xchg
cwde
mov
inc
pop
adc
pop
int3
hlt
xor
shr
sub
sub
movs
inc
jmp
daa
or
in
lea
inc
jl
jmp
mov
mov
mov
xchg
xor
xor
mov
dec
and
enter
ja
mov
cmp
jne
xchg
pop
shr
fidiv
mov
(bad)
mov
enter
dec
mov
aas
retf
ret
stos
into
imul
inc
into
add
cdq
sub
mov
imul
jns
sbb
adc
mov
jl
sbb
data16
mov
sub
and
lds
jbe
pushfw
adc
push
aam
mov
(bad)
jmp
push
(bad)
mov
out
daa
mov
cmp
and
pop
mov
inc
jl
mov
stos
repz
and
fstp
push
adc
popf
xor
in
mov
std
jle
in
push
adc
repnz
cld
(bad)
fmul
and
mov
mov
add
ins
mov
das
mov
lods
nop
cmp
jnp
mov
cwde
ds
mov
call
fisub
sub
cmp
mov
pushf
loope
lods
leave
loop
inc
fcom
mov
push
(bad)
jl
and
adc
add
mov
jge
shl
icebp
push
pop
add
fstp
mov
das
and
push
sti
pusha
in
clc
pusha
cmp
jmp
or
xchg
dec
jo
cwde
sub
mov
xchg
icebp
leave
mov
add
test
inc
nop
add
rcr
mov
and
xor
xchg
adc
ds
mov
shr
retf
bt
pusha
cmp
jmp
push
rol
push
bt
clc
bt
neg
mov
ror
bt
clc
bt
call
cmp
xchg
call
stc
call
add
inc
gs
outs
fs
gs
popa
outs
fs
gs
add
enter
cdq
sub
lea
xchg
sahf
movs
(bad)
jne
mov
cmc
movs
jle
jbe
dec
aam
mov
loope
lock
aaa
test
jmp
push
mov
dec
scas
std
ins
mov
mov
mov
pop
cmp
push
out
xchg
xor
daa
popf
jo
addr16
retf
sbb
dec
in
push
int
jno
(bad)
int
into
stos
xor
inc
outs
cwde
or
mov
stc
nop
dec
mov
loopne
stc
mov
xor
jmp
sbb
xor
mov
stc
call
mov
ss
sub
ss
out
xchg
shr
cld
push
in
adc
inc
stc
not
stc
call
xchg
jns
push
sbb
ins
xchg
mov
jecxz
mov
iret
shr
add
mov
sbb
mov
or
es
add
xchg
lea
aaa
bound
ins
cmp
fst
inc
pop
sahf
push
stc
or
inc
dec
inc
clc
lds
mov
add
mov
in
ins
stos
adc
mov
shl
dec
lods
and
sbb
sbb
(bad)
(bad)
aas
cdq
xchg
fwait
cmp
pusha
inc
pop
mul
xor
int3
test
add
gs
sbb
cmc
mov
leave
cmp
pusha
lea
je
pusha
pushf
mov
lea
jmp
mov
pushf
lea
call
jno
push
push
mov
adc
push
jmp
push
lods
mov
jmp
xchg
js
add
cs
mov
xchg
mov
aas
pusha
sbb
pop
pusha
pop
sub
push
or
dec
and
int3
das
test
mov
loop
xchg
test
inc
mov
repz
push
mov
mov
sahf
loopne
inc
idiv
aas
sub
clc
push
xchg
inc
dec
in
mov
das
shl
(bad)
push
or
pop
aam
pop
and
in
mov
adc
lods
xchg
push
mov
xor
std
rol
sub
aas
add
and
sti
inc
mov
in
push
vucomiss
(bad)
sbb
std
inc
jmp
sub
sbb
cli
test
xor
cmp
icebp
jns
add
lds
mul
mov
push
jl
push
sub
sub
and
xlat
imul
sub
int3
and
lea
pop
les
mov
push
cs
ss
adc
pop
cmc
call
js
test
rcr
jmp
jo
mov
add
fisttp
sar
inc
fiadd
jle
or
jl
push
jo
in
mov
popa
imul
xchg
cmp
test
fwait
dec
cmp
outs
mov
(bad)
inc
inc
loope
cmp
mov
cmp
jmp
mov
je
mov
sbb
xchg
sub
pop
xor
sbb
xor
loope
cmp
add
test
adc
pop
push
lock
std
std
xchg
fcmovb
out
jbe
test
retf
aas
sub
mov
pop
popf
ss
sub
dec
jge
cmp
xchg
dec
dec
inc
mov
dec
aam
push
les
jmp
es
test
mov
jg
xor
movs
shr
xchg
push
mov
movs
adc
mov
mov
and
jo
jmp
pop
ror
xor
sub
test
adc
mov
test
xor
jle
ret
(bad)
loop
cli
cmp
int3
xchg
dec
mov
pop
lock
jno
leave
and
sbb
cmp
stos
arpl
or
rcr
lea
mov
lahf
repz
inc
cdq
sub
sub
cmc
inc
jo
mov
loope
stos
push
data16
jl
hlt
sub
xor
pop
xor
jb
jmp
pop
inc
xor
mov
shl
fimul
call
cmp
es
cmp
or
inc
pop
or
jne
enter
cmp
or
add
stc
add
lea
cmp
clc
call
jae
gs
ins
xor
cs
ins
add
sub
(bad)
stc
inc
or
shl
enter
in
jmp
loope
xchg
push
loope
shr
mov
pop
aaa
mov
stc
pop
sub
mov
xchg
jbe
cmp
lds
not
test
nop
sub
aas
test
lods
dec
mov
fst
pop
repz
inc
cs
out
sbb
add
sbb
es
push
sbb
lahf
int
pop
ins
adc
int3
dec
add
adc
scas
pop
in
sbb
xor
mov
aas
jecxz
icebp
adc
or
aaa
pop
push
jo
or
inc
adc
pop
pop
jge
clc
int
dec
jle
push
imul
sahf
mov
cmps
fs
outs
mov
arpl
std
fs
daa
gs
nop
in
gs
mov
push
jmp
push
lock
std
std
xchg
arpl
out
ret
jae
retf
(bad)
enter
das
outs
and
pop
jmp
mov
jo
in
mov
push
aam
pop
iret
add
loopne
sub
xlat
test
dec
xchg
mov
fld1
add
out
repz
xchg
push
jbe
les
mov
test
xor
mov
fisttp
ss
pop
lea
call
push
push
add
clc
not
mov
push
popfw
mov
jmp
clc
setns
mov
test
pusha
clc
and
test
push
add
mov
lea
jmp
sub
push
rol
test
neg
push
cmc
ror
pushf
call
dec
fbld
cdq
sub
add
cmovg
inc
mov
xchg
xlat
retf
jecxz
cdq
mov
call
repz
lds
call
jl
jo
cmp
scas
sub
fdivr
lods
fistp
(bad)
jns
dec
push
cmc
stos
xchg
sbb
std
xchg
outs
sub
add
rcr
jbe
jle
sub
mov
or
stos
xchg
or
std
xchg
push
xchg
ficomp
jnp
xchg
call
cs
dec
fst
sub
pop
cmp
test
(bad)
outs
sub
mov
push
mov
mov
jmp
dec
jns
sbb
mov
jbe
pop
aam
jnp
sbb
add
fucomip
aas
push
pushf
pusha
mov
push
mov
pushf
pushf
lea
jmp
push
push
xchg
stos
mov
jmp
mov
inc
std
pop
push
add
movs
xor
icebp
jno
dec
gs
dec
cdq
xchg
sahf
movs
sbb
mov
and
loop
popa
mov
ror
mov
cmp
or
cmp
pop
or
mov
hlt
daa
xchg
jl
mov
jg
and
fild
mov
cmp
jmp
xchg
inc
lahf
xor
jnp
xor
repz
sti
lds
loope
pop
mov
dec
mov
mov
ja
(bad)
mov
xchg
adc
mov
sbb
js
mov
hlt
cmp
inc
pop
jecxz
int
out
retf
sbb
shl
add
jmp
inc
pusha
pushf
jmp
sub
clc
stc
stc
cmp
push
mov
push
lea
ja
pusha
cmc
jmp
call
dec
push
jb
mov
sub
(bad)
mov
dec
loop
and
cmp
jle
es
pop
and
fsub
js
inc
std
stos
dec
inc
clc
inc
neg
les
xor
jne
xor
sub
pop
adc
mov
sub
dec
data16
mov
jnp
fwait
popa
scas
shl
xchg
add
ins
and
pushf
xor
inc
ins
xchg
in
fwait
je
mov
ja
(bad)
call
in
add
mov
aas
outs
les
xchg
shr
jne
(bad)
cmp
test
xchg
sbb
test
pushf
jecxz
ficom
ja
icebp
popa
cmp
dec
pop
ds
lahf
mov
fld
aas
outs
xor
inc
add
mov
pop
pop
retf
mov
ins
jnp
ret
sub
(bad)
push
add
add
fmul
fmul
mov
repnz
scas
xor
xor
xor
sbb
push
and
push
push
and
push
push
pusha
mov
mov
mov
push
ins
sub
mov
xor
xor
aaa
stos
add
popf
mov
adc
mov
fimul
es
aaa
cmp
sub
sub
cmp
mov
jecxz
mov
sbb
cmps
xlat
xchg
sub
xor
xor
and
movs
call
outs
adc
jecxz
(bad)
or
cs
pop
mov
lea
ja
clc
jmp
add
push
jmp
mov
lea
jae
inc
mov
jmp
pop
test
mov
pop
data16
bound
add
int3
outs
in
cwde
ds
ror
sub
ret
mov
pop
inc
clc
sub
fwait
aaa
ret
adc
dec
sub
sbb
not
push
js
adc
pop
or
pop
loope
outs
push
ins
(bad)
mov
into
sbb
mov
movs
sbb
adc
(bad)
std
adc
push
stos
in
retf
out
mov
sbb
movs
inc
mov
mov
inc
cmc
xchg
mov
jnp
not
mov
hlt
leave
push
xchg
jl
sub
xchg
rcr
sub
jle
imul
jle
add
hlt
add
movs
or
cmp
int3
mov
or
cmps
(bad)
push
ja
daa
das
xchg
mov
daa
call
sub
cs
(bad)
jae
mov
sar
adc
adc
sbb
icebp
pop
outs
in
inc
call
cmp
aas
mov
(bad)
mov
pop
ja
jo
outs
push
jb
arpl
jae
mov
mov
sub
pusha
cmp
mov
cmp
repnz
mov
lea
jne
sbb
xor
pushf
mov
cmp
pusha
push
call
sahf
les
push
jmp
das
fld
(bad)
xor
retf
rcr
xor
outs
jae
mov
xchg
or
lock
push
add
adc
adc
mov
pop
xchg
shl
daa
call
xor
repnz
add
push
sbb
sub
int3
push
int3
es
pushf
mov
mov
xchg
sti
scas
mov
add
cdq
int
mov
fbld
(bad)
shr
xchg
outs
mov
les
and
fild
and
in
fmul
fimul
and
sbb
sbb
and
ror
loopne
jmp
xor
and
test
add
push
mov
jl
pop
xor
pop
mov
xchg
and
xchg
push
pushf
aam
sbb
(bad)
aam
nop
mov
out
mov
jl
sbb
mov
sbb
call
icebp
push
pusha
xchg
jmp
into
adc
sbb
leave
jmp
xchg
mov
dec
xor
and
jmp
ins
stos
push
sbb
movs
and
fucomi
xchg
or
inc
xchg
repnz
push
cwde
mov
sti
dec
pushf
xor
xor
aam
and
pop
out
xchg
fs
movs
xchg
sbb
in
data16
loope
movs
call
stc
jl
sbb
dec
retf
repnz
fwait
cmp
jae
fdiv
mov
cmps
xchg
aad
movs
pop
sbb
stos
aam
or
sub
jmp
mov
(bad)
out
test
xchg
sahf
pusha
mov
jmp
mov
popf
scas
cld
out
mov
loop
pop
clc
sbb
xor
xor
and
lods
or
or
mov
cmps
loopne
push
call
aaa
adc
adc
movs
es
int
fnstenv
fwait
popf
jmp
cmp
sti
aam
and
jl
sbb
or
xor
cwde
repz
cli
mov
fstp
scas
cdq
cmp
lahf
adc
pop
and
pop
mov
outs
aaa
clc
mov
fwait
pop
cwde
push
data16
es
sahf
cmp
push
mov
inc
xchg
push
push
into
mov
pop
dec
xchg
adc
adc
pop
(bad)
call
sbb
xchg
mov
(bad)
xchg
add
shl
xchg
xchg
enter
fidivr
pop
(bad)
cdq
mov
push
pop
adc
mov
es
pop
cmps
js
lods
cmp
mov
sbb
loope
cmp
jmp
push
cmp
rcl
pop
fstp
jg
mov
mov
xor
xor
push
(bad)
pop
cmp
loopne
mov
xor
jl
(bad)
pop
mov
loop
push
adc
mov
cwde
jl
sbb
pop
xchg
sbb
in
dec
fwait
call
icebp
sub
fiadd
mov
dec
xchg
cmp
popf
xchg
rcr
push
mov
mov
mov
inc
dec
ins
(bad)
push
and
call
movs
inc
jmp
xor
inc
sti
clc
test
rcr
or
and
out
xchg
les
xor
movs
mov
sbb
push
test
pushf
test
jmp
mov
sbb
fstp
(bad)
pop
or
(bad)
cmpxchg
repz
cmp
test
xchg
(bad)
mov
push
je
push
mov
jae
ror
cmps
mov
pop
lahf
pop
ficom
mov
cdq
adc
les
fistp
iret
rol
ja
mov
retf
repz
pop
cmp
aas
out
xor
mov
xchg
sub
jl
dec
stc
in
fisubr
loop
in
dec
popf
cmp
add
sub
mov
js
sub
mov
mov
test
xchg
inc
pushf
jle
popf
test
cs
and
popf
xor
popf
outs
ja
arpl
inc
push
mov
pop
cwde
and
call
add
int
mov
jmp
and
push
mov
cmp
jmp
out
fadd
add
inc
mov
dec
aas
ds
xchg
mov
jle
pop
and
test
adc
pop
(bad)
mov
push
pop
out
gs
loop
cmps
call
fs
pop
jbe
call
push
jmp
inc
repnz
ret
movs
adc
ds
jmp
xchg
movs
in
stc
push
fimul
pop
mov
hlt
sar
mov
jo
mov
int3
sbb
ret
xchg
sbb
lahf
jns
inc
in
test
push
sbb
push
xor
loope
sub
mov
(bad)
mov
je
in
push
(bad)
mov
int3
popa
inc
sbb
mov
xor
int3
inc
mov
cwde
jl
movs
xchg
sbb
adc
push
mov
bound
je
test
sbb
mov
(bad)
xchg
mov
xlat
test
clc
mov
jge
aam
and
mov
and
push
sbb
into
xor
sti
mov
mov
add
jg
call
shl
cmp
cmp
aad
push
in
daa
sub
inc
cmp
jmp
mov
in
loopne
sti
or
sub
push
pushf
call
cwde
mov
rcr
mov
and
or
call
mov
in
pop
test
(bad)
ins
mov
shr
adc
clc
pop
movs
sbb
mov
adc
loop
mov
idiv
leave
test
ins
cmp
retf
and
out
or
mov
adc
mov
stc
leave
mov
mov
stos
xor
sbb
xor
mov
popf
into
jl
push
sub
sbb
xchg
movs
fmul
js
pop
fadd
imul
adc
xor
xchg
or
cmps
sar
inc
mov
xor
push
gs
pop
mov
push
out
aam
sbb
sub
pushf
and
fcomp
cmps
sub
loope
shl
ja
fcomp
(bad)
pop
push
loopne
test
pop
push
std
add
cwde
(bad)
test
add
cmps
mov
enter
movs
into
xchg
movs
or
jl
xchg
mov
ss
adc
push
jnp
mov
cdq
mov
fisubr
sbb
push
dec
mov
mov
fcom
clc
xchg
div
or
jl
fmul
sbb
push
cmp
cwde
or
adc
jecxz
call
and
inc
add
jg
fstp
retf
pop
loopne
push
fwait
sbb
push
fsubr
fnstsw
pusha
fdiv
xlat
aam
sbb
fisttp
cmps
mov
xor
xchg
(bad)
retf
adc
les
std
pop
pop
clc
leave
sub
pop
push
fidiv
cmps
fdivp
(bad)
fild
or
sahf
inc
call
pop
out
nop
jecxz
pop
fistp
stos
adc
mov
mov
scas
ror
pushf
jg
pop
aaa
out
aam
lahf
(bad)
cdq
fdivr
mul
mov
std
test
stos
or
xor
jge
mov
pusha
lds
sahf
mov
int3
push
pushf
push
adc
cli
mov
hlt
sub
fnstenv
addr16
mov
sbb
ror
inc
mov
cli
pop
fmul
call
fwait
or
js
ins
sub
add
xchg
push
shr
push
retf
jno
popf
in
adc
aaa
das
and
pop
jmp
fistp
sbb
pushf
jge
cmc
mov
sub
in
pop
mov
pushw
cmp
pop
inc
push
sbb
dec
je
mov
adc
fwait
mov
sbb
mov
mov
mov
(bad)
imul
fs
sub
push
adc
daa
mov
ffreep
ror
or
jge
movs
je
cdq
cli
mov
xor
cwde
jg
xor
jge
push
mov
jb
mov
mov
cwde
jge
mov
mov
fwait
cli
mov
les
stc
lds
test
xlat
test
xchg
jl
mov
(bad)
fwait
jl
mov
hlt
cld
stos
mov
cmps
fsubr
jl
sti
es
cmp
mov
shl
scas
mov
popa
or
or
push
jl
dec
jmp
mov
push
jg
out
rcl
movs
jge
mov
movs
mov
ja
xor
pop
mov
cdq
sub
adc
xchg
fadd
je
dec
mov
xchg
adc
lods
sub
cdq
push
test
data16
(bad)
fdivr
nop
mov
js
lea
mov
pop
aam
adc
sub
pop
stc
into
push
jbe
push
fdiv
lds
push
mov
call
jl
int
mov
call
retf
(bad)
jne
out
dec
jne
loop
sbb
out
ror
fst
xchg
pop
enter
sahf
pop
push
xor
cmp
mov
pop
xchg
dec
jbe
jl
cs
mov
pop
mov
cwde
cwde
xor
pop
push
pop
pop
xchg
dec
push
loope
outs
adc
sbb
mov
push
mov
lods
pop
cwde
mov
mov
imul
in
les
adc
mov
cmp
fbstp
cli
aam
and
repnz
sbb
lds
push
adc
data16
call
mov
sbb
inc
sub
jge
sub
in
sti
cwde
in
xchg
jle
jnp
(bad)
sub
sahf
mov
cs
hlt
mov
stos
jge
mov
mov
daa
ret
ins
lahf
add
inc
xchg
jle
ret
pop
fidivr
and
adc
fucom
and
jmp
sbb
jge
scas
adc
sbb
lods
test
fmul
(bad)
sahf
lods
icebp
movs
xchg
push
iret
lahf
push
jecxz
shl
xchg
adc
loopne
xchg
and
(bad)
adc
fwait
mov
addr16
adc
push
xchg
mov
mov
in
xchg
popf
bound
push
mov
in
outs
mov
(bad)
pop
mov
jge
jne
and
cwde
push
sbb
sub
in
ja
push
mov
xchg
cld
pushf
adc
fdiv
push
ja
sub
cmp
hlt
sbb
pop
es
cld
adc
sbb
mov
clc
mov
sar
(bad)
cmp
jne
mov
scas
ror
xchg
pop
imul
dec
call
pop
and
loopne
inc
fmul
fprem1
hlt
(bad)
test
jne
pop
adc
leave
rcr
sub
test
out
das
jle
cmc
mov
jp
mov
hlt
sbb
test
and
mov
lods
cmp
jns
in
hlt
sub
sbb
mov
in
xchg
popf
(bad)
shl
or
clc
mov
adc
mov
xchg
pop
adc
jns
test
data16
cmp
loopne
push
cld
in
sar
(bad)
mov
shl
(bad)
or
es
pop
mov
xor
sbb
inc
xchg
pop
test
call
xchg
sbb
in
rcr
lahf
jl
mov
ror
sbb
movs
xor
cld
add
sbb
jmp
dec
pop
sub
jp
cmps
xchg
jmp
retf
stos
push
push
cmp
mov
xchg
jp
shl
fisttp
or
mov
shl
inc
pusha
shr
pop
call
push
fcmovnbe
hlt
aam
aas
loopne
add
fst
fwait
data16
xchg
push
loop
mov
fild
and
addr16
xchg
push
cli
mov
mov
daa
add
xor
test
sbb
fiadd
cwde
jo
cwde
mov
fisubr
out
inc
jl
sub
mov
test
cmps
jp
jb
call
mov
inc
test
aas
iret
test
mov
or
fidiv
mov
cmps
adc
mov
lea
add
xchg
fidivr
and
lea
xchg
adc
sbb
sub
adc
xor
data16
xchg
jne
adc
sbb
in
mov
pusha
sbb
retf
sub
(bad)
xchg
fisttp
mov
in
pop
mov
cwde
shl
fcomip
mov
push
stos
(bad)
mov
mov
pop
rcl
out
les
pop
lods
enter
cmc
push
(bad)
in
mov
call
cmp
call
sub
js
cmc
not
popa
pushf
adc
dec
xor
stc
shl
mov
push
sbb
xchg
xchg
aad
hlt
mov
lods
jge
pop
pop
add
sub
sub
mov
in
mov
jmp
jmp
arpl
mov
cdq
inc
test
mov
adc
js
sub
les
aam
sbb
fsubr
jge
scas
mov
call
pop
lods
aaa
jp
enter
stos
jo
xor
mov
imul
fs
int
sbb
adc
fwait
cld
popa
xor
xor
mov
cwde
ror
inc
push
sbb
dec
inc
fisubr
call
scas
sbb
xor
test
mov
cmp
mov
jp
add
fld
pop
test
adc
jae
ret
adc
sbb
lahf
mov
xchg
gs
ins
and
arpl
mov
les
xor
pop
popf
das
pop
adc
and
pop
or
mov
inc
inc
jno
lods
push
(bad)
jge
rcr
and
pop
cld
add
pop
push
in
pop
push
push
lea
xor
gs
xchg
mov
push
pop
mov
jl
pop
jl
rcl
jmp
xchg
jp
sub
mov
in
ins
adc
and
mov
lods
adc
or
hlt
jl
mov
addr16
pop
cmc
dec
dec
pop
xchg
pop
js
cmps
mov
and
dec
scas
shr
jb
(bad)
jb
fwait
adc
lods
ins
mov
jl
cmp
or
xor
pushf
xchg
push
not
dec
pop
mov
outs
(bad)
fmul
mov
jl
clc
cld
mov
lahf
pop
fimul
lods
jge
mov
out
push
mov
cmovo
mov
pop
popf
push
jmp
addr16
sub
pop
mov
cmp
rcl
fbld
cmps
rcl
mov
sbb
loopne
adc
hlt
adc
adc
(bad)
in
je
sar
and
test
pushf
inc
push
pop
lods
sbb
mov
mov
push
mov
jge
sti
xchg
in
mov
sahf
call
ret
xchg
pop
cmps
mov
dec
lods
hlt
pop
call
(bad)
lock
fcom
lahf
scas
add
(bad)
xchg
in
fsubr
cld
lahf
das
inc
es
pop
out
lods
jge
xchg
lahf
xchg
pop
and
push
pop
mov
arpl
popf
fs
loopne
mov
hlt
inc
cld
cmps
in
hlt
sub
mov
imul
(bad)
ja
mov
mov
leave
arpl
pop
in
mov
sub
cwde
dec
adc
nop
cmp
lds
loope
or
xchg
jns
mov
cmp
sub
adc
jmp
xchg
movs
and
mov
mov
das
xchg
mov
icebp
shl
fisub
fbstp
fsubr
push
call
repnz
ds
lahf
sbb
sahf
and
ficom
ins
push
aad
mov
(bad)
in
lds
mov
sub
fldenv
mov
cmps
retf
not
xor
shl
jecxz
cdq
das
mov
hlt
jmp
adc
sub
outs
sbb
popf
adc
mov
and
lahf
jge
test
add
fwait
js
hlt
cmp
mov
dec
dec
test
jge
pop
fs
outs
ret
pop
popa
xchg
fcomp
adc
dec
cmps
push
jne
cwde
nop
retf
xor
inc
loop
cmp
sub
test
cdq
leave
mov
call
pushf
xor
mov
out
cwde
cmp
(bad)
jl
call
jge
mov
iret
call
pop
in
pop
loop
pop
mov
outs
jmp
fidiv
lds
push
xchg
movs
cld
adc
cwde
mov
mov
sbb
jl
jb
mov
fucom
mov
add
mov
jge
fs
mov
movs
jge
fsubr
call
jle
xor
sar
ins
push
xor
mul
retf
hlt
stos
mov
cmp
daa
ret
cmps
pop
fwait
(bad)
xchg
xchg
adc
(bad)
dec
test
je
cdq
cli
pop
sub
cdq
clc
sbb
movs
mov
jp
mov
xor
and
mov
ret
fdivr
pop
cmp
out
scas
inc
mov
sbb
lahf
mov
out
les
leave
out
sti
stc
mov
call
xchg
cmps
movs
je
pop
outs
jae
push
sbb
adc
add
aas
fwait
sbb
xor
imul
and
jge
sbb
mov
xor
sbb
ret
jge
and
sbb
mov
push
mov
dec
pop
hlt
in
mov
jbe
mov
ficom
pop
sub
mov
or
inc
xchg
jne
push
xor
jl
add
or
mov
lds
jmp
imul
inc
inc
inc
out
rcr
jnp
pop
in
sbb
dec
sbb
push
dec
pusha
push
outs
addr16
lods
and
in
data16
fcom
jge
retf
mov
clc
inc
fdivr
(bad)
call
fwait
sbb
fist
repz
test
scas
sub
cmps
xor
cmps
jl
call
sar
(bad)
dec
mov
jle
xor
jl
call
imul
jge
out
push
jecxz
call
dec
sub
sbb
call
std
ss
mov
je
or
jae
pop
jo
add
or
pop
mov
and
xlat
gs
add
fnstcw
test
call
adc
cwde
cld
arpl
cmps
enter
jno
mov
neg
movs
add
sbb
push
enter
lods
leave
push
cld
jo
push
cmps
loop
clc
mov
cld
xchg
scas
das
xchg
fcmovu
mov
repnz
lods
icebp
idiv
cmp
jge
stc
mov
out
inc
in
arpl
pop
add
scas
sar
jge
cwde
fistp
mov
call
sub
mov
retf
mov
add
jl
lahf
mov
das
adc
adc
xor
ss
fwait
aam
mov
push
lds
enter
scas
mov
sbb
add
nop
pop
xchg
sub
adc
(bad)
mov
leave
xchg
(bad)
cmp
hlt
(bad)
jl
mov
(bad)
fidivr
ins
mov
cli
enter
je
jp
rcr
es
xor
fld
clc
aam
mov
mov
in
xor
add
jl
enter
and
push
cld
outs
pop
inc
inc
mov
sub
lahf
and
inc
inc
jge
push
(bad)
cmps
mov
cmp
ja
pop
scas
mov
(bad)
int3
push
hlt
sub
adc
jnp
ror
sahf
dec
in
pop
sub
stos
push
push
in
jbe
add
daa
cld
jmp
mov
enter
retf
and
and
aad
sbb
mov
push
jbe
xchg
push
lods
mov
sbb
clc
sbb
lea
jecxz
sbb
fst
(bad)
cmp
mov
out
xor
(bad)
retf
mov
hlt
cmp
xchg
mov
into
enter
cmp
out
inc
push
mov
movs
dec
std
push
popf
loop
jmp
cmp
jl
fucomp
(bad)
sub
add
inc
repz
mov
jns
test
xor
mov
shl
scas
xchg
mov
mov
data16
aam
cmp
ret
jns
and
mov
xor
dec
bound
inc
cdq
cmp
and
mov
sub
dec
int3
lahf
iret
or
xor
jecxz
cs
(bad)
jbe
mov
mov
or
fwait
cld
int3
cmp
outs
in
fdiv
dec
mov
std
(bad)
jl
push
pop
mov
pusha
cmp
lahf
xor
xchg
xchg
pop
pop
xchg
aas
outs
jl
sbb
adc
mov
cmp
cmps
mov
(bad)
sbb
mov
enter
xchg
cli
leave
xor
(bad)
into
mov
or
adc
push
sub
jmp
retf
and
ffreep
fdivr
gs
xchg
adc
stos
cmps
xchg
push
push
cmp
pop
pop
in
pop
cmp
cld
dec
(bad)
dec
cmp
mov
jp
sahf
in
movs
test
rcl
lods
fisttp
push
pop
xchg
jge
jg
mov
sbb
fs
jmp
test
rcl
mov
jo
addr16
jns
inc
jecxz
pop
ds
data16
pop
icebp
hlt
mov
jnp
pusha
inc
mov
xor
lock
neg
xchg
push
mov
lahf
test
enter
test
int
mov
mov
mov
xchg
mov
jle
cmp
fcmovu
iret
cwde
out
sub
je
or
xchg
cdq
hlt
mov
call
push
mov
sbb
cmp
pusha
adc
gs
pop
call
inc
push
cmp
or
adc
int
pop
xchg
sub
xor
(bad)
stc
push
inc
jmp
sahf
adc
jecxz
sub
sbb
ror
les
pusha
cmp
cmp
aad
jle
xchg
xor
ja
pushf
repz
test
in
loope
xchg
fldenv
aad
out
repz
jb
icebp
push
ds
sub
cmps
sbb
push
push
out
xor
out
push
fimul
ret
sbb
jge
or
lea
sbb
dec
push
push
lds
fadd
push
cmp
idiv
pop
lods
add
rcl
dec
pushf
movs
xchg
int
pop
push
mov
mov
jno
dec
data16
hlt
cmp
stos
mov
mov
pop
pop
push
loop
jl
movs
retf
adc
out
test
xchg
mov
sbb
pop
call
cmp
movs
xchg
push
dec
rcr
adc
out
ins
mov
jl
mov
push
jmp
jle
jb
stos
jl
mov
in
popf
xchg
ja
sbb
add
repz
push
js
(bad)
hlt
cmps
mov
in
stos
mov
stos
cmp
lahf
adc
hlt
mov
mov
rol
mov
jl
fdivr
and
mov
popf
sbb
pop
ds
les
sahf
cmp
or
stos
cmps
data16
out
jns
popa
call
aam
xchg
cmps
pop
sub
popf
fcomi
cmp
jo
mov
(bad)
bound
or
mov
fdiv
mov
xor
mov
fld
push
sbb
call
push
stos
mov
jmp
in
sub
stc
int3
and
push
shl
cmps
push
xchg
iret
enter
cli
fdiv
test
xchg
jl
mov
(bad)
dec
xchg
adc
sbb
push
inc
adc
mov
jge
es
inc
inc
fdivr
cs
dec
jmp
jnp
cmp
mov
and
cmc
inc
hlt
add
js
aad
add
mov
cld
jb
rol
mov
(bad)
loopne
ficomp
mov
bound
inc
iret
imul
mov
push
dec
ss
mov
sub
fs
pop
mov
pop
lods
sar
clc
mov
push
mov
jae
mov
jb
sub
pop
xchg
dec
mov
mov
adc
jae
addr16
adc
(bad)
dec
cwde
xchg
mov
xor
rol
mov
dec
fmul
pop
popf
sbb
add
jno
stc
aam
pop
sar
bound
movs
dec
jl
aas
dec
cmp
and
mov
push
hlt
pop
or
xor
pushf
int
dec
ja
mov
sub
adc
mov
xor
push
mov
xchg
xor
scas
lock
xchg
push
adc
paddb
mov
loopne
out
mov
jmp
data16
add
(bad)
jnp
mov
hlt
cmc
cmp
jmp
jl
jmp
jne
or
enter
or
movs
pop
mov
mov
xchg
xchg
ret
pushf
pop
xchg
movs
outs
lods
pushf
cwde
scas
fs
ds
stos
cwde
adc
popf
sahf
xchg
ret
sahf
pushf
pop
xor
mov
pushf
loope
mov
inc
adc
cmp
mov
iret
mov
(bad)
int3
movs
sub
stos
cmps
int
test
and
test
sub
pushf
jne
(bad)
rcl
mov
xchg
scas
fcomp
pop
and
adc
push
cld
add
loopne
xlat
sbb
sbb
add
(bad)
mov
jne
inc
xchg
hlt
scas
int3
mov
cli
pop
mov
ja
push
jmp
sub
push
mov
in
fsubr
xchg
mov
fs
outs
jl
pop
jns
sbb
cs
fild
push
fldenv
mov
sahf
xchg
or
scas
movs
sub
in
xchg
js
cmps
icebp
push
mov
movs
mov
pop
jmp
sti
fs
and
mov
shr
adc
call
lea
and
sbb
les
ja
jge
sub
aas
test
rcr
add
push
(bad)
jmp
cdq
jnp
mov
sahf
jbe
sbb
fwait
mov
out
call
enter
pusha
rcr
cdq
pop
push
pusha
pop
gs
fist
ficomp
dec
and
cld
push
jo
iret
jl
call
sub
fwait
push
call
xor
aaa
pop
adc
jg
or
push
ficom
ins
sub
mov
aas
sbb
pusha
push
aad
mov
test
or
icebp
cdq
enter
adc
mov
mov
popa
cli
push
repnz
jnp
mov
movs
pop
cmp
mov
pop
jb
lahf
shr
sbb
adc
iret
cmps
or
and
fwait
adc
pop
xchg
hlt
adc
pop
inc
push
sahf
jmp
push
cmp
fstp
shr
push
out
aad
dec
and
nop
les
or
leave
test
js
xor
pop
jl
inc
aas
in
push
pop
push
(bad)
cwde
mov
(bad)
cdq
pop
xor
push
out
loope
into
xchg
iret
aam
mov
repnz
push
cs
cld
lock
popf
addr16
add
int3
les
pushf
dec
imul
jle
imul
jmp
(bad)
fistp
out
jge
(bad)
xor
sbb
das
inc
xor
mov
js
ins
pop
jb
hlt
push
xchg
jl
inc
lods
mov
dec
xchg
loop
ror
sbb
gs
addr16
sar
mov
and
call
enter
cli
in
data16
mov
pop
push
inc
xor
pop
movs
xchg
popf
(bad)
pop
shl
jns
mov
xor
jbe
rol
bound
sub
cld
dec
cmps
cmc
pop
cmp
xchg
xor
xor
lods
data16
and
mov
call
sbb
fs
xchg
adc
mov
lods
mov
cld
and
test
mov
mov
cmps
movs
inc
jne
ins
jne
cmp
ret
cdq
test
enter
jbe
shr
jge
push
pop
jmp
mov
loopne
les
retf
enter
cwde
js
das
xor
rcl
add
hlt
cmp
add
xor
arpl
sub
sbb
add
pop
nop
mov
pop
in
xchg
fs
or
loope
(bad)
stos
aaa
jg
mov
in
out
call
rcr
clc
fwait
aaa
sub
lods
jmp
les
jae
hlt
aas
jmp
cdq
xor
ja
out
push
push
pop
mov
add
(bad)
cld
mov
or
mov
and
cmp
xor
ins
es
adc
xor
retf
idiv
xlat
cmp
xor
jmp
xchg
cdq
frstor
add
imul
dec
dec
in
sub
lea
push
fstp
add
mov
sbb
cwde
call
ror
fisub
ret
pop
jecxz
adc
inc
hlt
mov
mov
not
imul
cmps
js
in
bound
cmp
cdq
dec
pusha
jle
mov
pop
ror
int3
mov
je
fdivr
fld
int
adc
mov
sbb
ds
dec
or
shl
(bad)
ret
dec
shl
adc
rol
jl
xor
cmp
sbb
cmp
out
call
movs
mov
push
hlt
daa
ins
outs
scas
jbe
lock
stc
sub
jns
cwde
jb
movs
dec
inc
mov
sbb
rcl
pop
xor
mov
mov
(bad)
(bad)
sub
pushw
jmp
or
sbb
call
and
and
ja
sub
lea
jge
inc
push
in
inc
jmp
add
jl
xchg
neg
xchg
pushf
xlat
cwde
in
jbe
data16
outs
fadd
daa
push
xchg
js
jecxz
cwde
test
xchg
cli
lds
or
addr16
sub
pop
mov
int3
pop
jmp
or
repnz
imul
jge
or
int3
ins
(bad)
(bad)
xchg
sub
in
sbb
aad
(bad)
repnz
aas
xor
mov
mov
std
pop
sbb
cmp
push
dec
sbb
sub
pop
jno
or
outs
xchg
dec
test
mov
add
xor
jg
inc
mov
cwde
sub
pop
pop
in
xor
and
leave
mov
aad
mov
ja
mov
(bad)
aad
cmp
xchg
jno
and
das
sar
outs
cld
cdq
loop
ret
(bad)
cli
inc
in
jle
sbb
fistp
test
mov
retf
sub
test
in
in
jl
ds
sar
lahf
or
or
outs
sub
loop
out
fsub
ins
out
inc
(bad)
shr
cld
and
cld
cdq
cmp
inc
push
das
fldenv
not
shr
mov
jg
inc
movs
jae
int3
pop
cwde
js
addr16
iret
sbb
pop
mov
aad
mov
fs
lock
lock
leave
imul
lds
push
cmp
add
shl
lea
xchg
shr
or
dec
jbe
sub
adc
test
pop
dec
cmps
cdq
sbb
xchg
ja
ss
call
xor
int
mul
pop
jp
call
enter
movs
les
mov
dec
jns
in
mov
jge
int
xchg
jle
les
pop
pop
fist
push
test
mov
cmps
jae
outs
ret
mov
or
mov
fdivr
cld
ss
and
mov
pop
icebp
stos
xchg
and
arpl
fsub
fsub
std
mov
cmp
sbb
cmc
adc
js
pop
lods
jl
cmp
cli
aam
jecxz
and
pop
xchg
pop
lahf
mov
push
nop
and
pop
arpl
mov
jl
jo
push
aas
and
cli
ins
test
lea
jecxz
leave
sbb
gs
mov
fcomp
mov
sbb
add
dec
fnstenv
mov
pushf
mov
fld
mov
aad
xchg
inc
jle
mov
xor
addr16
call
into
arpl
aad
lea
mov
call
mov
pushf
sar
jl
es
jge
cmp
gs
stos
xor
jnp
mov
cdq
sbb
pop
loopne
out
jae
xchg
stos
stc
sbb
cmp
fidivr
xchg
xor
add
fdivr
enter
pop
jnp
fistp
mov
jl
dec
pop
cs
lds
fcomip
fisttp
fmul
mov
pop
(bad)
clc
mov
es
cmps
lahf
pushf
jl
idiv
les
test
dec
test
mov
adc
push
or
div
xchg
pop
mov
ins
and
enter
pop
sti
lea
push
jno
pushf
fs
mov
sbb
mov
xchg
icebp
jne
movs
popa
xchg
mov
cmps
jge
dec
cmps
lea
adc
xor
cmp
cmps
les
or
pusha
enter
and
jnp
out
jge
add
pop
mov
mov
xor
fnsave
ins
mov
repz
aam
cld
push
into
jbe
sbb
lods
out
pusha
pop
mov
pop
mov
lahf
mov
out
test
mov
mov
mov
lods
lea
je
jmp
jge
test
imul
mov
fisubr
jne
jae
inc
push
pop
(bad)
jns
fcomp
ins
popa
dec
dec
(bad)
mov
xchg
sub
jns
adc
mov
pop
fdivr
dec
jmp
or
repnz
fst
movs
pop
retw
cwde
xor
push
pop
ret
fistp
call
cld
mov
out
icebp
jae
mov
jp
mov
(bad)
xchg
adc
xchg
xchg
pop
data16
and
rcr
jno
sbb
cmps
xchg
xor
push
xchg
cmp
(bad)
test
adc
jle
lods
imul
add
cld
enter
clc
cmps
int3
push
shl
sub
push
push
xchg
jecxz
test
(bad)
cld
in
sub
cs
jge
adc
js
test
arpl
xor
mov
add
push
mov
lods
popf
mov
push
sbb
shl
pop
sbb
pop
fwait
mov
js
cwde
push
and
jo
test
jl
fcomp
mov
test
add
mov
loop
inc
ss
lahf
es
test
push
mov
shr
iret
pop
outs
mov
retf
test
out
cmp
inc
test
retf
popf
xor
mov
add
pushf
push
jl
push
and
push
in
jle
mov
fs
sbb
cs
hlt
mov
pop
push
clc
xor
push
cmp
or
push
xchg
repz
sub
push
jnp
jl
mov
adc
out
je
jl
mov
enter
pushf
in
cmp
jno
addr16
out
das
mov
lock
cmps
lods
jmp
pop
xor
loope
pop
fmul
fdivr
lahf
xchg
inc
jae
pop
jno
call
ror
test
push
test
push
sub
xor
scas
adc
adc
mov
fstp
clc
leave
loopne
inc
push
loopne
push
(bad)
repnz
xor
test
mov
pusha
add
xchg
out
int3
fstp
xchg
aam
adc
cld
rep
jp
dec
and
aad
into
aam
xlat
(bad)
push
in
or
and
fcom
cmp
sbb
rcr
and
sar
push
dec
sub
add
cld
or
std
pop
and
mov
jl
push
sbb
in
push
mov
inc
in
sub
adc
jmp
pop
push
lahf
mov
outs
shr
clc
add
movs
adc
jmp
cli
aam
ins
out
jl
jp
cmp
jmp
or
test
push
sbb
aas
xchg
mov
rcl
push
cmp
jp
push
jl
hlt
mov
sub
mov
sbb
cmp
out
les
mov
aam
pop
sbb
inc
inc
mov
sub
push
aam
jge
mov
ficomp
push
dec
rcl
in
xor
inc
jge
data16
mov
sub
pop
jp
test
inc
rol
or
mov
adc
inc
xchg
aad
rcr
enter
xchg
sar
fwait
xchg
jne
test
or
xchg
jnp
push
or
jl
dec
stc
fsub
pop
std
jne
mul
retf
pop
mov
and
jno
jmp
inc
addr16
push
(bad)
or
or
fdiv
mov
cmc
mov
mov
into
cld
jg
call
dec
jnp
dec
jl
jecxz
and
(bad)
fmul
jmp
xchg
nop
push
mov
or
sbb
mov
pop
enter
shr
cmc
and
pushf
jge
shl
push
hlt
movs
mov
cld
fnstenv
popf
push
xor
sub
mov
data16
mov
inc
jl
cmp
adc
mov
cmp
shl
or
jmp
sar
test
rcr
xor
lods
dec
shl
pop
jge
jno
xchg
les
jnp
ss
jg
xchg
mov
mov
adc
xchg
pushf
xor
pop
aam
movs
pop
pop
and
ja
imul
aam
and
mov
out
scas
and
fnsave
hlt
outs
aam
(bad)
es
imul
cmps
stos
sub
in
and
xor
dec
rol
push
cmp
ror
mov
imul
push
cld
xchg
xchg
hlt
sbb
mov
pop
rol
adc
mov
(bad)
mov
inc
add
rcl
or
div
test
jno
shl
lds
mov
fld
out
sahf
les
sbb
xor
int3
cs
xchg
adc
adc
push
xor
jl
outs
cld
cwde
jne
daa
mov
add
push
jl
sti
push
jb
xchg
(bad)
shl
je
add
mov
cld
mov
jl
fild
cdq
mov
aam
inc
cs
mov
push
(bad)
jns
pop
cld
sahf
hlt
pop
cmp
add
sets
aam
mov
loopne
cld
mov
cld
outs
add
test
sub
mov
xchg
jl
sub
pop
es
stos
jge
ins
mov
dec
jne
mov
es
scas
sbb
push
mov
sahf
or
inc
cdq
pop
movs
xor
popa
jge
or
mov
fadd
mov
fcom
xchg
test
sbb
mov
xchg
in
mov
leave
and
jmp
mov
or
cmp
rcr
and
std
and
jge
push
mov
cld
test
xchg
pushf
xor
and
inc
(bad)
clc
and
les
cld
popf
xchg
dec
push
lahf
mov
(bad)
pop
cs
in
xor
clc
lahf
jl
push
fwait
test
ja
mov
mov
sub
mov
or
mov
adc
test
mov
push
sahf
dec
stos
arpl
add
not
sbb
cmps
cmps
aad
pop
fs
push
push
ins
push
mov
ins
xor
call
cwde
pushf
xor
ss
mov
hlt
sbb
xchg
aam
xor
and
sbb
movs
or
adc
jl
cmp
adc
adc
in
lods
push
scas
xor
jge
fadd
dec
cmps
pop
adc
jge
ficomp
movs
popf
ins
lds
jno
fwait
imul
or
lods
pushf
xor
push
mov
sbb
mov
outs
add
pop
adc
cmps
nop
mov
push
jb
pop
jl
stc
or
leave
pop
shl
bound
hlt
mov
aas
sbb
ins
stos
pop
mov
mov
das
outs
and
ret
sub
push
inc
push
add
shl
sub
jmp
sbb
mov
dec
loope
call
fist
mov
add
fdivr
inc
xor
jnp
mov
popf
call
ss
nop
stos
cld
mov
xchg
sbb
jne
movs
lahf
idiv
jge
jbe
adc
sbb
nop
popf
xor
cwde
add
sbb
xchg
inc
push
mov
jno
or
adc
mov
sbb
cs
test
sub
xor
pop
in
mov
mov
sbb
ja
ffree
xchg
pop
lds
hlt
out
push
xchg
shl
(bad)
mov
jg
push
shr
xlat
mov
test
aam
jecxz
xor
xchg
mov
test
fwait
lods
sbb
mov
shl
jb
dec
pop
add
jge
push
mov
pop
dec
cmp
pop
add
sbb
outs
or
pop
out
sub
pop
icebp
in
and
push
mov
mov
or
out
inc
and
test
fs
test
mov
popa
sbb
mov
jge
push
pusha
fcomp
call
movs
jb
pop
sbb
inc
pushf
fcmove
cmp
mov
clc
nop
inc
and
add
call
sbb
ds
mov
xor
call
push
sub
dec
mov
loop
mov
cmps
sbb
mov
sahf
aaa
mov
push
dec
test
sbb
xchg
pop
adc
push
xor
in
es
jecxz
inc
xlat
cmp
push
lods
popf
addr16
imul
dec
mov
rcr
(bad)
pop
jge
sub
div
jecxz
mov
jge
loopne
stos
(bad)
sbb
enter
xchg
ret
pushf
ins
cmps
jle
outs
ins
inc
sbb
enter
jl
imul
inc
fs
xor
hlt
call
push
cli
adc
(bad)
push
(bad)
loopne
jle
fcom
clc
ins
mov
dec
aam
pop
mov
xchg
and
ds
sbb
mov
dec
arpl
push
dec
test
rcl
push
in
mov
pop
push
mov
shl
out
mov
dec
call
in
xor
mov
adc
popf
sub
aas
or
xchg
sub
mov
push
test
cmps
mov
jge
mov
jl
add
inc
push
pop
inc
and
mov
lds
mov
push
pop
ins
adc
fs
dec
jle
sbb
push
xor
test
sub
cmp
lods
mov
dec
and
cmc
sbb
xlat
aam
mov
mov
les
push
mov
cmp
call
pushf
psadbw
lahf
jne
mov
test
outs
adc
adc
jge
pushf
cmp
sbb
jmp
mov
jge
add
push
rcr
push
mov
and
mov
loop
ins
out
popf
xchg
not
popf
outs
pushf
fwait
jl
pop
pop
mov
push
inc
pushf
rcl
mov
ins
push
movs
lea
adc
mov
pop
popf
mov
push
jmp
int3
jl
jl
gs
fwait
mov
push
dec
push
fiadd
rol
sbb
je
push
neg
xchg
fnstenv
push
je
jmp
clc
retf
popf
push
xor
call
xor
test
outs
or
push
xchg
leave
xchg
xor
test
(bad)
int
sub
sub
jge
inc
imul
xchg
mov
shl
fcomp
scas
push
jge
stc
cwde
push
sbb
call
adc
lahf
in
dec
bound
xchg
mov
jmp
pop
lea
mov
es
xchg
adc
inc
mov
inc
pop
in
int
sub
call
ror
fcom
adc
call
or
and
out
mov
mov
popa
ror
xchg
scas
cmp
ja
(bad)
lods
stc
xchg
jnp
addr16
pop
mov
pushf
push
cmps
sbb
dec
xchg
icebp
aaa
jecxz
xchg
in
xchg
fidiv
cmp
push
hlt
adc
xor
xchg
inc
pop
cs
popa
neg
or
stos
jg
je
dec
test
aaa
mov
xchg
and
mov
ds
xchg
sar
xchg
jae
pop
xchg
jo
adc
xchg
jb
data16
xchg
push
shl
add
ret
daa
xchg
retf
(bad)
movlps
adc
xchg
outs
jmp
mov
xchg
test
jge
gs
or
test
nop
inc
mov
call
cmps
sub
test
sub
push
xchg
ins
dec
jl
xor
xchg
fsubrp
nop
fisub
or
jp
fwait
(bad)
fmul
xchg
outs
xlat
cmp
inc
add
mov
shl
or
lods
cdq
xchg
jl
jbe
sub
xchg
sti
out
pushf
call
mov
hlt
test
sbb
and
jmp
jmp
cmp
inc
xor
aam
out
jae
mov
repnz
mov
(bad)
push
enter
dec
scas
int3
jp
loop
push
add
fwait
enter
adc
mov
xor
push
das
repz
fwait
add
jg
in
jl
adc
je
imul
add
adc
jl
jbe
(bad)
xchg
pop
rcr
mov
out
xlat
jmp
push
in
lahf
jno
mov
in
pop
inc
out
cmp
jecxz
ins
out
jnp
std
sbb
pusha
cmc
jmp
sub
fwait
jp
xchg
mov
fldenv
(bad)
fld
(bad)
fs
pop
lea
xor
in
dec
ror
jae
mov
(bad)
sbb
sbb
dec
les
stos
adc
mov
lahf
into
push
push
aam
dec
add
xor
call
hlt
(bad)
dec
pop
sub
mov
inc
loopne
lea
xor
adc
xor
add
pop
push
test
mov
loop
idiv
addr16
fldenv
xor
xchg
xchg
push
aas
rcl
fdivrp
sbb
inc
dec
adc
mov
cwde
popa
or
ror
mov
loopne
jl
push
adc
mov
mov
test
test
imul
jp
in
cmp
ja
jo
inc
in
cmc
int
mov
push
xchg
pop
add
and
xchg
(bad)
cmp
inc
add
jecxz
icebp
push
dec
xchg
loopne
or
stc
jae
xchg
les
and
inc
cmp
xchg
scas
mov
es
popf
addr16
out
or
stos
pop
mov
loopne
push
cmp
mov
xchg
rol
repz
aaa
es
jmp
add
pop
push
cmp
pop
mov
shr
adc
cmps
pusha
call
xchg
jns
pop
enter
mov
sti
mov
popf
pop
jbe
push
sbb
dec
dec
mov
imul
mov
hlt
xlat
repnz
enter
sub
outs
mov
ins
sub
sub
mov
mov
test
jae
or
lds
out
enter
loop
mov
cmps
adc
fwait
and
add
xchg
(bad)
jle
sbb
adc
inc
hlt
adc
push
ror
xchg
jge
jb
push
mov
and
fisttp
xchg
xlat
test
stos
shl
rol
mov
pop
lds
ret
sbb
loope
clc
jbe
mov
pop
and
push
fs
js
jmp
cdq
jge
popf
test
add
int3
movs
in
push
sbb
jle
les
fnstsw
fs
dec
pop
and
push
test
js
sbb
lock
ror
sbb
cwde
pop
xchg
sub
jecxz
push
sub
in
popf
cmp
mov
mov
add
cmp
scas
sub
cli
push
retf
pushf
mov
cmc
sbb
mov
jnp
fidivr
and
inc
cmp
jmp
fsub
pop
mov
iret
xor
call
dec
xchg
cdq
dec
and
aad
je
push
(bad)
adc
lods
ret
loopne
(bad)
sbb
sub
loop
(bad)
(bad)
into
cld
sub
adc
push
push
adc
popf
pop
cli
mov
cdq
jae
push
sbb
mov
sbb
inc
xchg
fcomp
sbb
mov
hlt
repnz
test
xchg
mov
cld
sbb
pusha
push
sbb
loop
xchg
test
shr
fcomip
jge
mov
jne
cld
test
ret
sbb
sub
pushf
mov
repz
fs
pop
jmp
xor
cmp
retf
hlt
daa
and
mov
and
movs
jge
aad
jmp
in
cmp
inc
leave
push
jl
cdq
dec
mov
pop
sbb
sahf
lock
mov
ja
pusha
push
inc
outs
jl
mov
jl
xor
jl
(bad)
mov
repz
cld
stos
loop
xor
lods
popf
les
in
jl
je
call
mov
das
aad
out
jle
cmp
int
mov
jno
jl
sbb
xchg
cmps
dec
pushf
aad
or
sub
xchg
(bad)
mov
out
mov
mov
pop
adc
add
and
and
sbb
cld
dec
xor
and
sti
in
sbb
mov
jp
popf
xchg
fsub
sub
push
hlt
mov
shl
xchg
(bad)
adc
in
into
fwait
push
(bad)
imul
ds
push
cmps
pop
sbb
pop
loop
repnz
dec
add
and
jmp
add
sub
popf
xor
(bad)
jmp
in
push
hlt
xor
and
xchg
sar
fwait
ss
jno
xchg
and
mov
fs
stos
addr16
pop
inc
(bad)
pushf
adc
sbb
xchg
xor
rcr
imul
lea
mov
xchg
xchg
add
dec
xchg
stos
les
xor
cmps
push
test
fimul
test
cmps
std
cwde
cmc
call
push
and
arpl
(bad)
loope
adc
cmps
test
pop
lahf
(bad)
sti
cmps
daa
and
mov
mov
aad
jmp
ja
fisub
fnstsw
adc
(bad)
pushf
ror
add
mov
aad
push
in
push
xchg
xchg
xchg
jnp
push
aad
ss
push
out
push
leave
cmp
mov
mov
push
out
push
xlat
call
mov
lock
aaa
push
mov
fwait
pop
and
sub
aad
xchg
or
xchg
int
mov
pop
and
inc
push
ret
xchg
jbe
pop
sub
sbb
and
nop
sbb
imul
das
add
sahf
pop
mov
js
int3
shr
aam
xchg
pushf
popf
push
aas
add
mov
popa
jg
cld
mov
add
adc
adc
(bad)
sahf
cmp
xchg
pop
jmp
adc
sub
mov
jmp
movs
pop
lea
cmp
xchg
addr16
test
dec
mov
(bad)
mov
cwde
add
pop
repnz
jg
add
je
push
lods
scas
lea
jbe
int
adc
mov
and
call
or
mov
mov
mov
ret
fist
xchg
xchg
movs
inc
popa
movs
shl
outs
ds
es
cmps
out
sbb
jmp
lods
mov
cmps
dec
(bad)
cmps
shl
mov
pushf
sub
lea
cdq
xchg
xchg
mov
and
mov
mov
pop
mov
mov
cwde
aas
cs
cmps
or
adc
movs
pop
dec
inc
xchg
inc
xchg
adc
jl
aam
stos
xchg
xchg
xchg
jb
pushf
dec
movs
outs
scas
xor
jbe
mov
cmp
mov
inc
imul
retf
nop
jl
sub
loopne
jno
mov
icebp
adc
jle
outs
adc
jno
fwait
arpl
aam
and
in
mov
push
dec
retf
xchg
daa
fld
sbb
xchg
jl
in
js
arpl
bound
adc
cbw
xchg
cmc
jg
or
jle
adc
sar
aam
or
jmp
mov
cmps
jae
cmp
xchg
pop
movs
clc
sub
test
mov
cld
bound
sub
push
jecxz
jp
push
xchg
jle
loopne
es
mov
mov
adc
leave
aam
(bad)
stos
movs
sbb
xchg
inc
idiv
adc
test
or
jnp
cdq
pop
sbb
jo
ret
cdq
in
inc
scas
inc
iret
in
ficom
adc
shl
mov
xor
fcomp
js
lods
xchg
mov
adc
jge
add
jae
xchg
push
sbb
mov
and
jmp
jbe
(bad)
sbb
jo
movs
call
xor
mov
cwde
mov
jl
mov
test
sahf
lea
jecxz
and
adc
jo
adc
repz
mov
cmp
mov
fs
fs
and
adc
js
jl
sahf
jmp
je
(bad)
js
push
jmp
sub
lods
jo
aam
stc
jmp
add
push
(bad)
or
sbb
jb
movs
lds
jb
out
test
jo
cs
or
cmp
adc
pushf
push
sub
jp
sbb
je
dec
movs
enter
(bad)
in
das
sub
outs
inc
dec
pop
sti
and
jo
mov
aam
les
and
in
lods
mov
inc
add
push
cmps
test
add
mov
inc
cld
in
nop
pop
hlt
(bad)
int3
jnp
in
(bad)
(bad)
lock
and
xchg
aad
mov
xor
and
inc
pop
imul
cld
(bad)
mov
clc
fsub
test
dec
(bad)
hlt
cld
lods
rcr
mov
xor
aas
loopne
aam
adc
sub
xor
or
mov
jo
dec
cmps
les
pop
sbb
mov
lods
cld
cmp
nop
sti
dec
pop
(bad)
dec
(bad)
lods
loopne
push
inc
xor
in
xor
mov
and
xor
push
nop
and
sbb
pop
cmps
cwde
loope
int3
sub
mov
sbb
imul
std
xor
push
(bad)
dec
js
and
test
(bad)
lods
sbb
lods
loope
popf
add
cld
pop
mov
push
pop
add
xchg
daa
mov
push
ds
dec
jns
mov
int3
mov
xchg
out
inc
or
xchg
dec
rcr
fwait
popa
sub
out
icebp
sbb
movs
rol
fcom
dec
pop
and
inc
or
lea
dec
sbb
inc
add
mov
xchg
xor
sub
repz
test
jno
pop
pop
jnp
xchg
xor
ins
mov
test
pop
sahf
fwait
push
pop
clc
and
add
mov
cld
inc
sub
pop
jge
es
mov
mov
aaa
mov
cmps
jmp
into
or
and
std
xor
cmp
cmps
xchg
mov
push
fmul
movs
test
cmc
jl
mov
jne
sbb
test
call
in
xchg
inc
adc
mov
mov
fwait
add
movs
rcl
xchg
bound
pop
addr16
pop
push
xchg
in
ret
inc
sbb
daa
cmp
push
xchg
test
or
cmp
push
jp
inc
xchg
jle
xor
(bad)
fcom
test
clc
sub
jl
or
movs
outs
sub
add
dec
stos
xchg
xlat
inc
sub
add
hlt
cmps
mov
rcr
inc
cmc
ror
jge
inc
call
(bad)
mov
popf
jne
mov
call
pop
mov
cwde
jge
retf
mov
adc
bound
xchg
push
cwde
jae
jg
adc
call
mov
jmp
(bad)
mov
test
je
pop
mov
xchg
jl
cmp
jl
and
arpl
les
fsubrp
lahf
xchg
repnz
xchg
fwait
ja
jbe
pusha
enter
pushf
cmps
add
sub
mov
out
sbb
xor
xchg
data16
or
xchg
cmp
js
xchg
mov
fdivr
mov
outs
xchg
in
push
sub
or
enter
add
jle
dec
inc
mov
sbb
pusha
es
fs
jo
fcom
je
add
adc
add
jno
pop
out
popf
jns
xor
mov
xchg
fadd
dec
xchg
push
xchg
or
lea
loope
mov
mov
xor
inc
sbb
xchg
and
sub
cmps
sbb
sub
xchg
sub
sbb
adc
inc
js
mov
jl
and
jmp
stos
sub
or
jnp
push
stc
and
cdq
xchg
ins
inc
dec
imul
push
or
retf
fbld
xor
add
hlt
fs
rcr
inc
cmps
mov
xchg
dec
push
rcl
test
xchg
fwait
or
movs
(bad)
push
sbb
(bad)
and
int
cmp
mov
jl
in
pusha
fnstcw
mov
js
mov
jns
in
nop
pop
ret
nop
xchg
out
xchg
pop
xchg
xchg
inc
ss
out
xor
rcl
sbb
push
and
shl
push
mov
xchg
cmp
or
hlt
call
call
xchg
jae
inc
mov
mov
push
test
mov
lahf
out
sqrtps
stos
jge
repz
mov
mov
lock
ins
(bad)
adc
add
out
xchg
xchg
sbb
pusha
fs
cmps
mov
aad
adc
int
adc
mov
and
std
xchg
popa
cld
frstor
cmp
les
ret
xchg
ror
imul
push
(bad)
out
cld
ror
cmp
adc
dec
shl
in
das
repz
imul
mov
jo
or
pop
push
inc
xchg
mov
mov
push
xchg
aam
and
inc
jmp
jle
gs
mov
xor
push
xchg
loopne
mov
dec
in
cmp
retf
and
cwde
push
add
stc
fiadd
scas
xchg
cmp
and
loopne
in
ficom
jmp
or
sub
jne
rcl
cs
fwait
scas
int3
ins
(bad)
push
xor
mov
adc
retf
gs
js
xchg
cdq
xor
xchg
aaa
or
mov
push
test
xchg
cmp
cmp
adc
jbe
xchg
pushf
in
mov
xchg
mov
mov
jno
rcl
xchg
(bad)
retf
adc
aas
xchg
rcr
adc
out
jp
jbe
ja
jle
stc
dec
xchg
jl
sbb
xchg
or
mov
shl
xchg
hlt
jg
retf
sub
xchg
xlat
sbb
int3
and
popf
jne
ret
ds
sar
sbb
cdq
pop
mov
adc
repz
mov
aaa
xchg
pusha
inc
outs
xchg
dec
jle
loope
mov
push
shl
sub
lahf
jbe
xchg
xchg
js
js
xor
fbstp
je
sti
inc
jl
and
fstp
or
frstor
popf
dec
adc
xchg
mov
xchg
sbb
rol
xchg
push
je
mov
scas
out
inc
popa
(bad)
mov
and
mov
imul
inc
in
xchg
fst
or
cmp
cmp
jmp
cmp
aam
ins
mov
and
iret
pop
xor
adc
loop
call
xchg
pushf
dec
add
data16
lea
int
mov
sub
ficom
add
in
stc
lods
popf
jp
mov
mov
cld
addr16
mov
xchg
and
sbb
in
pop
loop
dec
imul
or
xchg
retf
push
mov
mov
jmp
adc
mov
jge
shl
cmp
jge
leave
shl
lock
hlt
fstp
mov
les
sub
retf
cmps
inc
xchg
xchg
test
and
fdivr
adc
cli
mov
add
xchg
dec
test
xlat
lods
mov
call
mov
lds
sbb
std
ins
mov
call
addr16
xchg
sar
pop
sub
push
xchg
adc
js
mov
jl
dec
hlt
lds
add
push
xchg
shl
in
ds
mov
cmp
adc
xchg
fwait
cmp
push
mov
fcom
mov
imul
rcr
test
mov
mov
add
push
movs
cmp
iret
fs
ds
fild
jp
mov
xchg
retf
aam
jnp
hlt
mov
adc
inc
sub
(bad)
test
inc
add
inc
xchg
leave
inc
ins
cmps
adc
in
xchg
clc
add
rcl
xchg
je
hlt
sub
xchg
fwait
add
add
xor
mov
or
jg
gs
xchg
jge
mov
jge
(bad)
in
push
xchg
outs
imul
xchg
movs
fist
fst
pop
mov
dec
js
aam
and
shr
repnz
or
cld
(bad)
xchg
push
scas
ins
out
cmp
sub
out
push
pop
addr16
(bad)
or
xchg
dec
xor
test
out
adc
cmp
pop
xor
mov
dec
int
xchg
xchg
sahf
cmps
loopne
and
pop
add
fist
hlt
adc
adc
xchg
fs
mov
dec
adc
cmps
dec
mov
sbb
add
retf
popa
xchg
jb
mov
xchg
std
add
enter
and
icebp
dec
sub
fadd
lock
dec
dec
sub
ficom
in
add
mov
mov
xchg
fisttp
dec
xlat
xchg
ins
out
mov
xchg
jns
fcomp
xchg
mov
shl
movs
fadd
or
pop
fwait
nop
ret
mov
mov
ins
enter
push
jmp
push
adc
arpl
test
xchg
loopne
test
pop
sbb
sbb
jge
xchg
pushf
jbe
cld
dec
jno
adc
sahf
int
push
or
les
inc
jl
outs
je
cld
(bad)
xchg
xchg
dec
sub
sbb
sbb
les
inc
lea
retf
(bad)
jno
adc
repnz
cmp
push
pop
out
mov
xchg
movs
push
rcl
xchg
ja
jecxz
lds
mov
or
or
push
test
pop
dec
cli
stos
test
push
pushf
and
jl
sub
call
sbb
int3
inc
add
pushf
stos
enter
dec
cmp
jp
sti
(bad)
cld
pop
add
in
add
cmp
xchg
inc
lock
test
and
and
xor
sbb
push
push
mov
aad
je
(bad)
lea
pop
fisubr
xchg
and
retf
out
scas
sbb
aam
cld
lahf
xor
lock
scas
mov
lea
repz
mov
and
das
sbb
adc
push
sbb
mov
js
out
xchg
cmp
sbb
or
aam
les
inc
mov
enter
mov
loopne
xchg
stos
inc
pop
dec
leave
and
adc
cld
adc
aad
lds
sar
dec
out
inc
hlt
and
lds
sbb
rol
imul
sbb
test
repz
je
sub
outs
imul
inc
les
es
push
int
cmc
outs
mov
cdq
jmp
sub
arpl
cmp
inc
nop
into
or
jne
push
cs
call
mov
addr16
push
sub
xor
cmp
cmp
(bad)
xchg
cmps
jae
hlt
out
xchg
(bad)
shl
outs
les
jmp
imul
push
js
push
shr
cmp
dec
sbb
je
cmp
in
jge
inc
cdq
test
lock
nop
in
mov
cmp
push
pop
fldz
lods
repnz
fs
gs
add
pop
xchg
je
xor
test
stc
sub
xchg
mov
jo
js
jl
test
lea
addr16
hlt
xlat
add
sbb
jl
mov
pop
stos
cwde
mov
(bad)
fwait
adc
and
push
mov
sbb
and
ficom
fadd
clc
pushf
cmp
bound
cld
push
push
xor
call
(bad)
jae
jne
mov
jo
arpl
xor
adc
and
call
into
sbb
lods
sar
aaa
mov
bound
call
mov
adc
shr
fcmovnu
xchg
xlat
mov
out
pop
xchg
pop
test
in
test
xor
jno
cmp
mov
fcomp
enter
out
les
sbb
mov
xor
test
dec
inc
sbb
fild
cld
jl
push
fcom
sub
(bad)
cwde
xchg
mov
pop
clc
leave
and
cmp
lahf
push
sbb
stos
test
xor
ds
sub
int
hlt
call
mov
pusha
xchg
shl
mov
out
adc
jl
inc
mov
hlt
pop
ret
xchg
hlt
add
xchg
lods
cld
and
push
xchg
stc
sbb
cmp
xchg
iretw
push
jmp
inc
outs
add
hlt
mov
sub
lds
and
pop
sbb
xchg
ret
ins
in
sub
lea
idiv
jmp
test
pushf
mov
(bad)
push
shl
mov
sbb
out
add
mov
stos
jmp
inc
xchg
pusha
sub
push
dec
xchg
mov
adc
pop
(bad)
xchg
inc
or
mov
hlt
jmp
icebp
jp
add
ja
xchg
xchg
sub
jge
xchg
in
rol
mov
xchg
xchg
fisttp
adc
clc
xchg
repnz
pop
pop
or
dec
shr
xchg
je
mov
cmps
cwde
mov
sbb
push
pop
mov
xchg
lea
xor
iret
sbb
jmp
stos
and
xchg
gs
out
(bad)
adc
sub
mov
outs
xchg
(bad)
out
je
push
pop
scas
hlt
xchg
popf
dec
push
jg
xchg
cmp
mov
mov
jo
sbb
pop
xchg
sub
nop
jne
outs
xor
addr16
xchg
cmp
movs
push
adc
and
xchg
or
mov
test
dec
lds
movs
xchg
pop
xchg
or
xchg
ja
sbb
adc
popf
mov
pop
out
sub
(bad)
fst
inc
adc
xchg
mov
dec
aam
outs
or
push
mov
xor
xchg
jl
or
hlt
push
sub
mov
mov
(bad)
js
jl
mov
jge
pop
call
xchg
jp
ja
scas
aas
dec
js
cmc
jl
imul
mov
out
pop
inc
mov
lods
outs
call
mov
sub
push
cli
(bad)
(bad)
jle
or
and
fucomp
jmp
jcxz
fdivr
clc
jge
ret
loopne
pop
pop
xchg
addr16
jle
and
adc
hlt
in
popa
int3
into
out
sbb
jl
mov
enter
test
jnp
lock
sbb
xchg
into
inc
or
clc
std
loop
xor
mov
xor
sti
mov
cmp
push
lods
jb
inc
or
cwde
adc
adc
hlt
sbb
ficom
ja
sbb
jle
sbb
mov
fnstenv
jge
inc
add
stos
push
mov
jp
mov
adc
jne
sbb
(bad)
xchg
in
aas
dec
lods
cmp
aad
movs
add
cmp
ror
pop
das
test
cmps
test
popf
jl
xor
es
sub
fs
xor
in
(bad)
jnp
and
lods
mov
xchg
test
mov
pushf
ss
popf
push
hlt
cld
adc
or
retf
fisub
sbb
pop
adc
push
dec
push
aam
clc
loop
add
cmp
imul
xor
(bad)
popf
fs
push
jno
jl
arpl
adc
sub
(bad)
(bad)
(bad)
fist
or
jl
mov
lods
cmps
pushf
call
pop
mov
adc
les
rcl
xchg
andps
or
mov
pop
xchg
ret
fstp
jmp
ret
pop
(bad)
jmp
jge
mov
popf
mov
sub
imul
ins
hlt
lock
and
mov
pusha
dec
xchg
mov
sbb
lock
fmulp
mov
xor
(bad)
ins
xor
popf
in
pop
ret
imul
inc
jno
ins
imul
push
scas
aam
rcr
pop
dec
xor
mov
dec
pop
push
add
fsub
fidiv
in
nop
popf
inc
into
push
ds
adc
cli
adc
pusha
jb
sbb
iret
fwait
sub
stc
dec
sub
pop
mov
sub
push
add
(bad)
in
jno
mov
jg
dec
adc
das
mov
aas
mov
push
nop
fstp
pushf
adc
jecxz
in
fsub
push
push
cmps
das
pop
cmp
adc
fwait
mov
cs
or
test
bound
inc
mov
mov
sbb
pop
test
test
xor
pop
cmp
cmps
dec
ficom
or
fsub
push
mov
mov
out
shr
imul
enter
pop
xchg
fwait
jge
in
jle
add
sbb
push
lea
es
hlt
pop
and
loope
pop
jmp
sub
shl
inc
mov
and
sub
mov
mov
xchg
mov
push
and
ror
jmp
cmp
popa
jbe
imul
lea
and
ins
mov
push
test
lods
mov
sbb
pop
ret
cmp
cmps
sbb
add
adc
and
call
ss
js
js
cmc
and
dec
mov
pushf
fcmovb
and
das
cmp
loopne
mov
cld
outs
xchg
sub
xor
sub
loopne
std
mov
sar
xor
fs
jl
clc
dec
mov
mov
jge
bound
add
push
jle
mov
data16
pop
pop
or
add
xchg
jl
lods
stos
sahf
jge
out
sbb
(bad)
test
sub
mov
and
popf
xor
call
(bad)
sbb
dec
xor
test
xchg
fucomi
pusha
std
xor
std
cwde
jmp
(bad)
iret
or
xlat
sar
xor
xchg
cld
(bad)
cmps
xchg
mov
in
inc
sub
lods
lds
push
and
jecxz
pushf
sbb
movs
ds
stos
lea
adc
sub
dec
mov
jge
sbb
and
sub
popf
xor
sbb
dec
fcom
les
dec
push
pop
aam
jmp
in
jns
aad
in
(bad)
call
leave
push
jne
dec
fisttp
bnd
and
mov
mov
pop
call
pop
or
repz
pop
(bad)
lods
ss
mov
mov
fstp
pop
aaa
or
sbb
xor
mov
ficom
sub
jne
test
cld
les
fmul
(bad)
cli
mov
sahf
mov
push
into
adc
xor
vandps
mov
xor
xchg
push
loope
mov
hlt
cmps
aas
cmp
hlt
int
adc
outs
xchg
push
mov
dec
fdecstp
mov
sbb
cmp
movs
icebp
pop
fmul
xor
rcl
mov
fmul
jmp
(bad)
retf
fsubr
pop
sub
jg
sbb
or
push
aad
js
les
fsubr
test
mov
mov
fwait
call
xlat
mov
xor
jge
or
sbb
jns
stos
xchg
mov
adc
pushf
sbb
mov
test
xchg
dec
push
pushf
mov
in
push
popf
jge
mov
shr
stc
sub
sub
inc
(bad)
mov
mov
jl
add
sub
xchg
fadd
jge
es
or
xchg
fistp
jne
xlat
aam
lods
push
add
(bad)
call
jmp
fisttp
jge
inc
aad
into
rcr
ds
imul
xchg
push
pop
cwde
repz
je
fcom
movs
jg
sbb
in
lods
push
mov
pop
jp
mov
or
sub
cmps
sar
jmp
aam
sbb
(bad)
xor
sbb
pop
(bad)
xor
iret
pop
adc
daa
jmp
pop
cmp
ficomp
daa
test
ja
sar
outs
adc
in
aas
xchg
and
mov
repz
jl
and
cmp
mov
and
or
call
push
loop
enter
nop
push
ret
ret
add
jmp
and
xor
dec
ds
fcom
sbb
icebp
dec
je
das
rol
(bad)
test
xor
les
addr16
loop
xor
push
fcomp
mov
retf
ss
mov
push
pmuludq
int3
push
add
sbb
cld
add
loop
std
jmp
les
push
jno
xlat
clc
ins
pop
sub
lahf
jl
fidiv
xchg
fxtract
inc
jmp
dec
jle
(bad)
mov
ret
mov
daa
mov
push
jae
push
mov
pop
icebp
mov
hlt
leave
mov
ja
in
popf
rcr
cmp
out
cmp
jge
aaa
mov
mov
adc
jle
(bad)
outs
add
enter
jmp
arpl
push
mov
and
xchg
jl
mov
out
je
mov
int
jb
fs
sbb
and
scas
mov
xchg
rcl
sbb
mov
in
nop
stos
push
jge
icebp
sbb
inc
and
(bad)
push
jl
jb
and
fwait
aaa
ret
jle
(bad)
lds
mov
data16
rcl
dec
dec
ds
ror
xor
idiv
mov
jb
xor
js
movs
test
aad
push
fsubr
les
adc
dec
xor
sahf
xor
adc
mov
sbb
xor
cs
rcl
sbb
xchg
rcr
xchg
jae
jmp
(bad)
call
cmps
jae
lock
inc
test
call
enter
jl
loopne
xor
push
test
push
inc
lea
fwait
ret
inc
sub
test
fwait
push
retf
and
and
jo
sbb
call
or
retf
shr
and
stos
ret
dec
bound
fmul
outs
adc
popf
fbld
dec
cmps
jl
xor
in
sub
popf
xchg
leave
sub
pop
cmp
push
popa
pop
xchg
(bad)
push
pop
sub
fsub
mov
push
leave
imul
inc
mov
les
hlt
or
xchg
loope
cld
fs
rcr
stos
jnp
sti
popf
pushf
push
mov
nop
ror
mov
outs
mov
cdq
push
mov
out
xor
sbb
dec
call
lahf
push
jl
(bad)
mov
jo
icebp
or
bound
out
adc
fwait
mov
jbe
hlt
jnp
mov
or
sbb
nop
sbb
pop
mov
adc
pop
test
out
add
sar
test
and
ja
jmp
fcmovu
mov
sahf
mov
test
adc
pop
push
cmp
xor
mov
pushf
neg
les
rcl
mov
xchg
sbb
or
into
push
cmps
xchg
int
out
mov
pop
out
mov
or
mov
push
push
jg
pop
sbb
fs
dec
xchg
pop
lods
popa
int
xchg
(bad)
sti
and
aad
xchg
pusha
jne
adc
int
adc
aas
xchg
movs
outs
int3
xchg
pop
sub
(bad)
push
cmp
loop
(bad)
shl
dec
mov
mov
jg
adc
and
int
outs
aaa
cmp
xchg
aas
ja
mov
add
mov
ins
push
xor
retf
xor
inc
pop
lods
mov
int3
mov
mov
ret
push
ja
jl
push
mov
push
adc
or
lahf
retf
jnp
lds
adc
or
cld
out
mov
xchg
xchg
out
icebp
adc
pop
iret
mov
ret
sahf
add
test
lock
stos
push
jle
dec
aam
data16
enter
and
xchg
cli
pop
pushf
leave
pop
push
mov
mov
inc
mov
inc
js
adc
mov
adc
out
mov
jle
xchg
lahf
pop
in
ja
add
push
pop
jmp
mov
iret
repz
add
cmc
xchg
push
movs
jmp
hlt
repz
in
mov
sahf
push
or
xchg
push
repz
adc
sbb
mov
jmp
les
and
cmp
movs
pop
or
mov
cmps
sub
xchg
mov
xchg
jmp
fwait
imul
cld
and
xchg
cld
repnz
xor
in
and
mov
shl
les
xor
or
pop
xor
aam
inc
aad
cmp
rcr
jle
loopne
add
xchg
sbb
cdq
stos
sub
sbb
shl
sub
xlat
mov
mov
xchg
into
xlat
les
pop
addr16
sar
dec
jmp
ret
sub
xchg
adc
mul
xchg
aaa
es
and
out
mov
pop
loopne
xchg
xor
cmp
xchg
popf
mov
jl
lods
xor
out
jecxz
bound
and
pop
loop
mov
loope
movs
je
sar
in
sub
test
xchg
xchg
jo
pop
xchg
int
mov
fsubr
xor
fld
ja
adc
ror
xor
hlt
fistp
xor
push
outs
fimul
xor
in
jno
push
popf
fstp
mov
xchg
xchg
pop
or
xchg
pushf
rcl
or
fwait
sub
xchg
mov
mov
sbb
or
stos
pop
xchg
cmps
cmp
adc
pop
movs
push
or
cwde
jecxz
jge
push
adc
pop
out
das
xchg
xchg
outs
xchg
push
xchg
pop
mov
inc
std
rcl
in
daa
xchg
dec
bound
fs
mov
adc
adc
add
xchg
push
push
mov
xchg
imul
pop
imul
or
add
mov
js
push
(bad)
adc
push
push
mov
xchg
cmp
fcom
pop
mov
or
jae
fmul
pop
shl
dec
shl
leave
add
xor
and
sub
mov
or
xor
mov
push
daa
aas
add
xchg
push
mov
mov
sbb
in
mov
pop
cmp
stos
jae
sub
mov
pop
sbb
lock
push
sub
test
call
push
aad
lds
and
stos
xlat
sbb
data16
je
dec
jecxz
out
cmc
rcr
jl
mov
xor
fwait
mov
push
std
in
mov
cld
imul
mov
xchg
hlt
fldenv
add
out
pushf
sar
int3
pop
push
jge
es
push
xchg
lahf
cld
jecxz
je
pop
and
sub
das
mov
push
lods
sub
xor
(bad)
mov
pop
into
mov
sbb
mov
push
dec
xchg
sbb
jle
ficomp
sub
jge
push
cmp
push
and
je
sub
xchg
movs
inc
add
mov
inc
jnp
dec
(bad)
push
stos
sub
dec
jbe
(bad)
mov
ss
shl
xchg
out
mov
pop
mov
adc
rcr
shl
cmp
xchg
mov
test
pop
int
or
xchg
movs
inc
push
or
sar
rcl
fbld
in
mov
dec
sub
xor
mov
or
lahf
cmps
and
and
cmp
cld
cs
inc
inc
xchg
addr16
mov
xchg
jne
adc
dec
xchg
add
xor
xchg
push
jno
jg
retf
dec
out
sahf
idiv
pop
xchg
push
add
sbb
and
scas
xchg
data16
inc
xor
xlat
aaa
aas
xchg
das
inc
dec
mov
arpl
cmp
nop
sub
mov
mov
mov
mov
jmp
data16
dec
ins
mov
push
xchg
shl
push
mov
cli
pop
sar
jmp
pop
mov
popf
in
fcmovne
or
clc
cli
lods
sbb
(bad)
fcmovb
jmp
enter
lods
jmp
out
push
dec
sar
loope
mov
(bad)
fwait
mov
sbb
sahf
sub
and
pop
js
sub
pop
inc
sbb
popf
mov
leave
xchg
cdq
loop
xchg
aam
push
jo
and
div
and
fs
fcom
push
scas
mov
sahf
mov
lods
faddp
andps
loopne
inc
and
mul
aam
adc
fwait
cmps
xchg
and
leave
mov
hlt
stos
lock
cwde
inc
ds
or
lods
not
retf
mov
hlt
inc
mov
cmp
xchg
repnz
das
les
mov
loop
mov
pop
xchg
adc
cmps
shl
jmp
xchg
jp
push
dec
xor
jnp
(bad)
fxch
aam
mov
shl
mov
sbb
or
fsub
xchg
aas
or
jmp
xchg
lahf
pop
sbb
xor
arpl
push
add
xchg
xchg
rcr
push
mov
repz
pop
and
icebp
push
je
mov
jbe
popf
pop
push
xchg
push
cld
mov
out
push
lods
sbb
jecxz
xchg
push
ja
cs
ret
mov
ficom
cdq
add
icebp
cld
xchg
xchg
(bad)
ins
mov
out
ins
jl
mov
add
xor
pusha
cmps
and
push
mov
out
jmp
test
out
cdq
repnz
add
mov
pop
nop
stos
loopne
xchg
adc
out
enter
xchg
xchg
shr
or
mov
lods
cmps
es
xchg
adc
pusha
call
sub
xchg
add
lahf
or
pop
bound
xlat
jb
lsl
mov
mov
movs
pop
(bad)
cmps
mov
jmp
push
(bad)
in
add
and
xchg
adc
and
lds
pop
psubb
imul
and
sbb
in
xchg
mov
je
xchg
push
call
ror
sar
loop
fwait
adc
or
dec
push
or
loope
dec
and
icebp
(bad)
or
jecxz
cmp
lahf
jl
out
xchg
nop
shr
jl
cmps
mov
stos
les
nop
xlat
or
or
inc
pop
mov
enter
push
fmul
push
jge
(bad)
mov
cmp
les
sub
jp
xchg
retf
sbb
cmc
cld
ja
xchg
or
dec
inc
xchg
jl
fldcw
dec
adc
bswap
sub
movs
cld
cmp
(bad)
aas
daa
cmps
fsubr
mov
fisttp
xchg
add
aad
mov
jge
mov
add
xor
test
fcomp
aad
out
sub
or
rcr
xlat
or
cs
mov
mov
push
sbb
xchg
gs
sub
sti
(bad)
neg
push
loop
xor
(bad)
adc
test
std
out
ret
mov
in
push
add
outs
mov
fisub
cld
mov
das
int
nop
dec
jecxz
hlt
sbb
cwde
call
adc
test
adc
adc
scas
mov
data16
mov
mov
xor
repnz
sub
fimul
add
imul
mov
pop
in
push
dec
cmc
retf
loopne
dec
dec
lahf
sbb
int3
je
sub
cmp
pop
popf
jl
repz
scas
jp
and
cli
xor
sbb
pushf
cmp
xlat
xchg
in
xchg
push
nop
or
fbld
jns
into
cwde
cmp
hlt
(bad)
push
inc
loop
and
sbb
adc
push
and
mov
and
xor
mov
xchg
loop
adc
and
mov
mov
cli
mov
xchg
push
ret
test
sbb
dec
fstp
adc
jl
(bad)
jbe
xchg
mov
jmp
push
sbb
mov
jmp
repnz
xor
cmps
sbb
ins
dec
fs
add
gs
xchg
lods
mov
push
jl
punpcklbw
aam
xchg
mov
movs
(bad)
mov
je
ficom
popf
shl
mov
mov
(bad)
call
sbb
gs
pushf
mov
fs
jns
jl
std
in
fs
cmp
mov
pusha
pop
or
(bad)
pop
aam
jns
lock
ss
popf
fsub
scas
bound
sbb
icebp
xchg
fld
lock
repnz
movs
out
(bad)
jae
add
fidiv
test
imul
outs
adc
and
sub
dec
popf
fbld
out
lahf
push
xchg
dec
cmp
movs
leave
push
lea
fs
sahf
adc
test
minps
repnz
stos
pop
in
je
fucomp
lods
test
inc
sub
fisubr
addr16
jb
mov
psubw
and
retf
loope
ins
push
pop
sub
inc
sub
pushf
pop
div
popf
pop
xor
cdq
jl
adc
shl
jmp
xchg
jge
scas
and
sub
jae
add
sbb
jne
sbb
nop
adc
push
(bad)
cli
int
hlt
adc
addr16
lock
and
or
mov
mov
iret
and
xlat
push
add
sub
ja
inc
pop
div
xchg
xor
outs
cld
add
fidivr
dec
add
sbb
inc
(bad)
popf
das
push
cld
pop
movs
scas
je
inc
and
adc
std
lods
sub
pushf
(bad)
ffree
jl
(bad)
xchg
aaa
pop
pop
call
imul
out
(bad)
(bad)
inc
mov
call
xor
jmp
mov
gs
jmp
dec
xor
dec
fsub
mov
sbb
in
mov
jmp
push
and
je
mov
out
mov
sbb
jge
mov
inc
jmp
cld
(bad)
mov
mov
clc
mov
xor
mov
sbb
and
es
lahf
mov
out
inc
call
dec
jge
(bad)
movs
dec
fwait
sub
rcr
sub
sbb
scas
cdq
(bad)
hlt
xchg
mov
jl
cdq
pop
ss
in
cmp
bound
pusha
std
jmp
dec
push
cmp
xchg
push
ret
aam
xor
dec
mov
cmc
fst
(bad)
scas
sbb
and
mov
and
sar
outs
or
fstp
xchg
das
adc
popf
mov
(bad)
cld
dec
sub
ret
adc
mov
fs
rcl
mov
mov
daa
ror
cs
dec
lock
xlat
sub
xchg
cmc
(bad)
jnp
js
xchg
add
test
out
push
sub
bnd
add
cmp
xchg
cld
xchg
pop
cwde
jmp
cwde
das
sbb
cmp
es
jecxz
sbb
mov
add
mov
ja
test
xor
xor
add
pop
mov
pushf
jbe
mov
adc
dec
xor
ret
jl
or
shl
adc
lock
lods
pop
enter
push
and
mov
adc
lods
test
movs
out
je
inc
aas
fwait
in
shr
arpl
mov
push
xchg
xchg
adc
in
clc
(bad)
or
fstp
std
sub
add
xchg
mov
js
stos
mov
push
adc
leave
shr
pop
test
lods
mov
test
ja
std
loopne
jb
dec
pop
inc
out
arpl
push
popa
clc
cmp
icebp
xor
call
cwde
xchg
(bad)
dec
out
inc
mov
xor
enter
lods
xor
mov
xchg
mov
mov
push
jmp
or
repnz
mov
ds
les
adc
stos
test
pop
cdq
dec
ins
sbb
fs
pop
sbb
repnz
or
adc
mov
xchg
push
stos
xchg
popf
mov
scas
repz
inc
dec
jl
cs
inc
and
and
or
les
mov
mov
bnd
xor
jge
iret
adc
(bad)
xor
sub
inc
adc
adc
xor
mov
jg
inc
(bad)
mov
add
clc
mov
hlt
lds
lods
xlat
gs
mov
rcl
pop
pop
cli
shr
dec
shl
cmps
ror
xor
cld
lahf
ss
add
fsub
add
push
fcom
pop
loopne
in
je
mov
or
daa
jb
inc
sub
jg
in
(bad)
lods
dec
stos
stos
push
fistp
jge
or
push
cwd
mov
push
sbb
inc
xchg
fist
mov
sub
fisubr
cmp
mov
int3
pop
sub
jle
int
hlt
add
jl
sbb
xchg
adc
dec
call
jl
push
xor
dec
xor
test
and
dec
add
adc
dec
(bad)
xor
aaa
and
sahf
inc
lds
mov
mov
sbb
mov
cmp
cmp
xor
int3
stos
jge
xchg
inc
mov
js
dec
(bad)
loope
or
or
mov
out
pop
add
popa
jmp
shl
movs
jno
imul
mov
sbb
mov
xor
je
push
lds
dec
sbb
mov
je
out
ss
int3
xchg
aad
cmp
stos
sub
jbe
(bad)
jl
push
mov
repnz
xor
mov
call
fmul
data16
call
mov
popf
xor
mov
adc
cmc
mov
data16
arpl
fbstp
loope
jno
cwde
jle
adc
inc
push
imul
xchg
xchg
push
arpl
in
and
xchg
rcl
cmps
mov
push
or
xchg
and
or
cmps
popf
jl
push
cdq
(bad)
ins
cmp
cld
sbb
imul
imul
sub
jp
std
(bad)
dec
jl
sbb
retf
jecxz
dec
in
in
sbb
cmp
retf
inc
jno
ret
xchg
jl
add
std
cmps
test
dec
fsubr
mov
dec
lock
fnstsw
aad
gs
ins
add
inc
add
pop
es
or
pop
mov
lods
scas
xlat
jl
call
stos
add
call
mov
cwde
mov
sbb
(bad)
retf
in
jge
dec
sbb
and
in
or
fcomp
shr
repnz
sbb
jmp
in
dec
and
pop
js
push
(bad)
sbb
ja
lods
call
out
mov
aad
rcl
stos
fwait
js
cld
mov
inc
(bad)
push
cmps
pop
adc
and
jo
jge
retf
jnp
aaa
adc
adc
leave
and
daa
xchg
mov
scas
cli
stos
iret
xchg
adc
cmp
xchg
and
xchg
int3
inc
mov
and
push
ins
pop
xor
sub
cmp
xchg
push
jp
(bad)
pop
retf
xor
xchg
dec
jecxz
or
mov
pop
push
(bad)
mov
xchg
mov
out
(bad)
push
outs
lods
xchg
or
call
mov
mov
dec
aaa
popa
xchg
sub
sbb
push
outs
add
cmp
xchg
sbb
xor
lods
daa
mov
push
push
or
push
lock
arpl
sub
fisttp
shl
les
(bad)
jge
test
push
cwde
xchg
xchg
in
js
bt
(bad)
and
add
call
or
movs
fsubr
jle
adc
hlt
das
xor
clc
test
xchg
add
xchg
mov
into
dec
inc
xchg
cmp
cmp
mov
jb
xor
xchg
xor
dec
es
mov
xchg
or
fmul
pop
mov
add
std
lea
fcos
mov
movups
repz
xchg
jae
xor
push
out
fs
or
aam
jb
sub
repz
xchg
das
mov
inc
xor
fs
mov
es
in
test
pop
into
mul
sbb
push
test
inc
xor
pushf
jl
daa
ror
add
jge
ficomp
scas
ss
sub
and
xchg
out
mov
sar
movs
adc
jge
mov
mov
jmp
call
pop
cmp
icebp
enter
mov
push
mov
add
mov
or
push
sub
call
xchg
or
sub
xchg
cdq
pop
das
rol
push
pusha
mov
outs
pop
fwait
cwde
adc
rcr
clc
sbb
lock
movs
cld
stc
pusha
push
jecxz
adc
sbb
cmps
pop
jmp
and
and
xlat
pop
jl
mov
cli
int
jp
pop
(bad)
jge
pop
(bad)
push
lods
loope
xchg
(bad)
and
jmp
lahf
repz
adc
pop
mov
add
shr
aam
lea
push
mov
mov
int
cli
xchg
repz
ror
(bad)
push
ret
stos
xchg
jl
dec
daa
cmp
jle
cs
(bad)
int
clc
ss
xor
stc
repz
pop
ror
rcr
stos
cmps
push
mov
mov
movs
stos
jl
mov
adc
cmps
sahf
pusha
test
mov
test
adc
jnp
xchg
sbb
cdq
hlt
fs
ret
jge
call
fwait
jge
inc
xor
push
das
bound
cmp
adc
sub
xchg
hlt
int3
stos
add
xchg
out
xor
sub
or
ret
xchg
je
test
mov
push
mov
fdiv
stos
bound
jg
int
sbb
(bad)
cwde
dec
xor
pop
retf
adc
mov
out
in
aam
fisub
xchg
sub
cli
mov
mov
es
mov
outs
call
sub
ficom
stos
fldenv
test
xchg
mov
fistp
ror
pop
xchg
repnz
mov
mov
xlat
xchg
xchg
aam
jnp
ror
stos
sub
xchg
retf
and
mov
cmp
sub
fwait
movs
xor
lods
inc
out
hlt
xchg
std
jg
popa
fs
pop
mov
mov
dec
and
cs
mov
dec
aam
stos
jne
xchg
push
sbb
push
mov
cs
mov
xchg
mov
jl
dec
mov
xor
(bad)
ins
xchg
push
inc
shl
jp
inc
xchg
pop
mov
imul
mov
pop
mov
mov
int3
jno
loop
cmp
das
xchg
int3
jo
test
ss
ins
dec
push
int3
jge
mov
jmp
adc
push
mov
inc
add
call
sar
adc
ins
push
xchg
je
mov
cmp
xchg
push
(bad)
sti
push
sub
das
mov
mov
hlt
mov
pushf
push
sub
jmp
xchg
xchg
outs
mov
jnp
jecxz
push
pop
xor
aas
mov
mov
nop
pop
retf
cmps
dec
fdiv
xchg
and
mov
test
shr
or
or
adc
mov
pop
out
mov
xchg
pop
jb
pop
and
cdq
mov
aam
xor
ins
ret
sub
adc
fidiv
pop
xchg
push
and
mov
mov
cmp
xchg
xchg
scas
call
jb
sbb
mov
jns
fist
repz
xchg
out
mov
xchg
xchg
dec
(bad)
fld
out
rol
xor
jo
xchg
mov
cdq
ret
jae
xchg
sub
jbe
pusha
adc
adc
jne
pop
jmp
or
push
repz
mov
jl
mov
aad
imul
jno
mov
in
cld
sbb
fsubr
and
or
aas
aam
push
xchg
ret
inc
into
pop
jg
scas
test
jb
bt
cmps
mov
std
retf
xchg
inc
jg
iret
cmp
leave
jl
cmp
dec
pusha
mov
or
rcr
or
jns
mov
gs
adc
sahf
jb
(bad)
fst
mov
push
mov
pop
xchg
aam
push
push
std
enter
repnz
adc
pop
fs
mov
inc
cmps
iret
outs
xlat
jbe
xchg
in
cmp
jae
hlt
mov
xchg
pop
rep
cdq
sbb
push
test
jle
es
mov
aam
je
call
xchg
sbb
and
stos
leave
ret
jg
push
inc
push
(bad)
xchg
fnstenv
call
push
xchg
in
rcl
dec
or
xchg
call
and
xchg
mov
cwde
int
adc
dec
dec
adc
fistp
hlt
or
push
mov
pop
pusha
dec
jae
xchg
js
pop
sahf
pop
jns
lods
cmp
pop
jmp
cmps
xchg
inc
out
test
stc
sbb
out
mov
push
bound
frstor
sub
add
out
dec
out
cmp
pop
and
mov
inc
dec
sti
pop
xchg
cmp
mov
push
cmp
out
out
(bad)
push
xchg
jmp
hlt
xchg
(bad)
in
or
push
adc
lods
mov
push
rcl
pop
paddsb
push
mov
cli
push
sbb
and
leave
lahf
(bad)
ds
pop
rcl
xor
add
iret
mov
add
xchg
neg
mov
shr
xchg
xor
fistp
xchg
jecxz
adc
mov
ficom
cld
xor
ja
mov
aam
adc
mov
adc
jns
fcomp
outs
mov
je
add
test
loop
and
test
scas
jmp
ss
dec
imul
jge
retf
aaa
add
fnsave
enter
sub
xor
in
retf
nop
sub
das
xchg
outs
popa
cmp
add
mul
or
pop
shl
jg
jg
outs
xchg
dec
push
lds
mov
(bad)
mov
add
js
sub
popf
xchg
gs
lods
and
sbb
cli
mov
jp
mov
sub
xchg
shr
cwde
fimul
xchg
jle
jbe
mov
jmp
ja
fst
test
(bad)
outs
pop
popf
jns
mov
retf
int3
aad
inc
jg
xchg
rcl
xchg
pop
in
xor
inc
sub
xchg
or
jnp
idiv
pop
mov
rol
or
imul
jo
cli
dec
test
adc
mov
cmc
xchg
push
mov
jmp
push
xchg
stos
sti
mov
js
xchg
and
mov
xchg
pusha
mov
lea
xor
in
xchg
sbb
jl
cmps
add
sub
adc
mov
pushf
data16
cmp
xchg
pop
add
fwait
pushf
xchg
mov
or
xchg
sbb
gs
mov
push
jnp
mov
jg
fdivr
(bad)
xchg
repnz
test
aam
mov
(bad)
stc
aam
repz
test
arpl
add
loope
push
cmp
fwait
imul
dec
sub
xor
xor
int
dec
fnstcw
test
and
pop
pop
sub
adc
push
xchg
cmc
bnd
jne
in
int3
cmps
cwde
pop
loope
add
nop
adc
cs
es
inc
fcom
hlt
push
and
pop
push
cwde
jmp
push
adc
loope
xchg
lds
and
or
xchg
push
ins
test
(bad)
mov
adc
push
das
fs
or
ret
stos
fisttp
jge
fisttp
mov
xchg
shl
dec
out
adc
sub
or
cmps
nop
xor
xchg
mov
jl
xchg
movs
rcr
ret
dec
arpl
mov
cmp
lock
mov
ins
adc
addr16
cmp
mov
ret
stos
repz
popf
and
mov
xchg
mov
sub
cwde
adc
iret
fst
icebp
xchg
xchg
inc
fisubr
div
xchg
xor
dec
dec
cmp
out
test
mov
scas
sbb
dec
mov
xchg
xchg
fwait
xor
out
sub
popf
cmp
das
xchg
jae
xor
jl
daa
xor
or
fwait
in
jge
sbb
cmp
cld
popf
addr16
mov
int
int
bound
sub
fnsave
mov
mov
xchg
movs
adc
mov
adc
push
loop
daa
push
out
(bad)
das
pop
icebp
(bad)
jne
pop
pandn
xor
xor
push
into
imul
call
jge
jae
clc
loop
and
mov
aam
xchg
icebp
out
xor
pop
mov
sbb
mov
shr
movs
stos
clc
outs
out
and
jns
and
jl
loopne
loop
in
jl
loop
je
dec
mov
lahf
loopne
cwde
adc
(bad)
add
jge
dec
or
ret
sbb
add
(bad)
adc
or
lahf
jl
out
repnz
es
movs
mov
imul
sub
test
rcl
mov
mov
mov
adc
sbb
jl
push
repz
aad
push
lds
(bad)
aad
xchg
in
and
into
cs
xlat
loop
mov
push
(bad)
xchg
inc
sub
fst
mov
adc
adc
cwde
and
adc
mov
je
sbb
stos
push
mov
ja
dec
out
adc
push
mov
lods
icebp
and
psubusb
daa
stos
pop
xchg
pop
sub
xchg
push
cmp
sbb
mov
gs
nop
repz
cmc
pusha
or
xchg
aad
xor
pop
setne
dec
cli
xor
mov
dec
scas
movs
push
xchg
leave
pop
cdq
bound
or
and
push
bnd
loop
push
cmps
pop
xchg
xor
dec
pop
fsubr
jbe
ja
xchg
jg
lea
pop
(bad)
xchg
jmp
jmp
inc
xchg
repz
and
or
cmps
cmps
dec
aam
push
xchg
int3
shr
in
cmp
push
mov
inc
outs
das
js
imul
(bad)
ds
test
dec
(bad)
(bad)
mov
js
xor
or
xchg
push
enter
in
cli
shl
hlt
std
and
movs
xchg
xchg
pop
and
xor
fadd
xlat
xchg
push
retf
les
push
mov
int
(bad)
xchg
mov
jne
mov
test
adc
xchg
cmps
loop
setnp
mov
les
movs
or
test
in
es
(bad)
mov
push
clc
imul
xchg
aam
push
(bad)
or
scas
push
popf
ficom
or
add
sub
push
out
jno
push
frstor
and
jge
and
and
mov
xchg
imul
lds
mov
xchg
int3
mov
dec
cmc
and
fs
int3
jp
xchg
pop
xchg
or
sbb
lahf
cwde
xor
int
xchg
adc
xchg
push
mov
cmp
icebp
icebp
sbb
bound
fcomp
mov
mov
popf
pop
leave
add
mov
jae
adc
mov
jg
mov
icebp
xchg
inc
and
cdq
lock
xor
and
fild
sbb
into
or
test
inc
(bad)
push
cdq
pop
push
out
jb
pop
loopne
movs
xchg
les
xchg
jle
mov
sub
out
into
jne
mov
imul
xchg
pusha
push
in
hlt
out
les
xchg
clts
xchg
scas
pop
xor
xchg
inc
sub
jb
jnp
fist
sbb
mov
push
sbb
inc
and
xchg
cdq
mov
(bad)
shl
fs
xor
xchg
mov
add
sbb
ds
daa
leave
test
and
cdq
in
fist
das
inc
add
pop
cmp
out
cmps
fisub
(bad)
pop
ffreep
aad
push
ins
inc
jmp
test
xchg
shl
inc
mov
cmps
cmp
xchg
fmul
xchg
clc
cdq
mov
mov
mov
movs
inc
nop
retf
adc
cmc
or
aaa
inc
mov
ja
imul
jecxz
and
stos
and
mov
rcl
mov
lahf
clc
cmps
mov
xchg
adc
(bad)
sar
xchg
fidiv
jmp
inc
pop
adc
xchg
lds
xchg
xchg
test
test
dec
lea
sub
push
mov
sub
fidiv
nop
or
jo
xchg
dec
sbb
pop
ss
iret
xchg
shl
cmps
sti
xchg
das
mov
int
push
adc
sub
add
mov
outs
leave
lahf
(bad)
je
push
or
and
sbb
loopne
xchg
std
sub
daa
xchg
imul
scas
mov
mov
xchg
lea
int3
mov
stos
rcl
fadd
aad
jns
ja
mov
xchg
(bad)
and
cmp
push
imul
repnz
xchg
(bad)
pop
mov
and
and
xor
push
inc
xchg
(bad)
out
inc
xor
sahf
fs
push
xchg
xchg
mov
retf
sub
push
sbb
stos
mov
sub
cmp
adc
sbb
pop
xchg
shr
and
imul
xchg
pop
push
xlat
cli
xchg
push
xchg
loope
push
retf
ins
stos
jge
inc
xchg
movs
cmps
cmp
jae
hlt
jmp
imul
sti
jne
pop
je
inc
je
xchg
push
test
cmps
ror
sbb
pushf
jle
fldenv
inc
ins
js
xchg
cmc
cmp
lds
dec
ins
and
jle
jnp
push
push
cmc
or
lock
sub
pop
xchg
xchg
sub
mov
fld
aam
les
cwde
into
mov
xchg
and
mov
sub
or
test
xor
dec
sahf
mov
fcom
mov
pusha
jg
xor
sub
and
(bad)
fdivr
xchg
dec
sub
pop
sbb
sbb
ret
cld
xchg
(bad)
outs
cmp
call
out
sbb
aas
and
mov
(bad)
fwait
mov
lea
test
dec
imul
mov
dec
and
fcomp
aam
call
cwde
xchg
(bad)
xchg
and
xchg
hlt
leave
mov
mov
rcl
cmp
adc
xchg
sub
xor
adc
rcl
(bad)
push
pop
dec
adc
add
cmp
mov
inc
repz
pushf
and
push
dec
popa
pop
mov
aaa
mov
jns
jns
icebp
xchg
fwait
cld
imul
fisubr
add
inc
retf
mov
adc
cwde
fidivr
fmul
inc
pop
mov
sub
outs
jl
rcl
dec
sbb
cmp
jl
mov
sub
int
or
lahf
jmp
mov
push
add
daa
mov
(bad)
adc
ins
popa
jbe
cmp
xchg
outs
mov
lods
mov
sar
dec
xchg
push
out
adc
mov
sbb
adc
adc
add
mov
add
movs
ret
and
mov
sar
and
adc
add
ret
jl
sub
xchg
sbb
gs
into
or
mov
not
mov
mov
jo
call
outs
fwait
mov
retf
sete
js
push
push
lods
mov
xor
nop
cdq
and
pop
ins
js
xchg
sti
jmp
xchg
pop
loopne
mov
push
out
xor
xchg
jg
mov
nop
or
inc
or
jp
push
cwde
fwait
ja
inc
stos
or
jbe
xchg
gs
(bad)
call
and
jp
js
shr
ficom
sbb
xchg
cmp
xchg
ja
test
in
and
xchg
dec
mov
mov
inc
mov
pop
add
enter
add
mov
imul
push
jmp
xchg
les
mov
repnz
mov
fwait
test
je
movs
int
fs
mov
inc
aaa
mov
retf
rcr
dec
cmps
inc
ja
jge
mov
aaa
xchg
out
mov
cmp
inc
ins
imul
add
inc
clc
sub
scas
jmp
xor
stos
sub
jnp
movs
or
pop
inc
xchg
mov
and
mov
xor
cdq
jp
inc
cmp
addr16
or
scas
and
repz
push
push
push
aas
pop
pop
mov
adc
sbb
fwait
cdq
mov
xchg
loop
jge
pusha
pop
fmul
xchg
xchg
cmp
dec
fistp
int
out
xchg
and
push
pop
test
mov
fwait
xor
hlt
outs
enter
jns
hlt
pop
out
cmp
rol
loope
dec
daa
mov
and
adc
arpl
pop
outs
jle
nop
xor
push
sub
es
je
adc
repz
pop
in
jmp
imul
call
mov
xchg
dec
loope
movs
cmp
xchg
iret
jecxz
mov
xchg
pop
outs
imul
leave
rcl
sub
imul
loope
stos
mov
jmp
arpl
mov
jge
xchg
outs
adc
jno
pop
xchg
mov
(bad)
outs
xchg
add
fistp
sub
push
(bad)
pop
add
pop
inc
in
add
cdq
add
dec
sub
mov
sbb
or
and
fiadd
xchg
mov
push
sbb
jl
xchg
and
dec
retf
xchg
hlt
dec
jnp
inc
pop
daa
push
mov
add
mov
int3
xor
cmp
stos
adc
shl
dec
and
or
daa
retf
call
jb
stc
lahf
cmps
pop
xchg
xchg
adc
nop
sub
cmp
xlat
and
nop
adc
retf
xor
sar
pop
nop
je
or
xchg
jbe
aas
add
push
loop
data16
int3
xchg
or
outs
ret
fwait
rcpps
cmps
mov
xchg
adc
mov
xor
add
out
jnp
adc
mov
stos
and
mov
jg
inc
sbb
dec
or
add
lods
out
cmps
int3
aas
neg
xchg
fs
jbe
xchg
fdivr
dec
stos
xchg
inc
popf
or
xchg
adc
xchg
or
push
sbb
xor
mov
ss
out
sbb
sbb
push
cwde
jbe
test
and
js
xchg
mul
mov
nop
jg
xchg
bound
inc
cld
shl
into
clc
mov
or
jo
xchg
cwde
retf
mov
(bad)
cli
inc
push
sbb
push
fcom
test
cmp
fsubr
mov
dec
inc
push
repnz
xor
lods
jg
mov
stos
in
sub
sub
xor
sbb
and
adc
push
stos
call
xchg
mov
ret
push
and
in
jbe
mov
stos
loop
pop
(bad)
mov
je
xor
pop
mov
mov
js
cmp
inc
fwait
clc
hlt
outs
xor
fisub
pop
jp
aaa
dec
dec
nop
ds
xor
sar
inc
rcr
iret
xchg
out
cmp
retf
xchg
xor
mov
mov
mov
aam
xchg
and
(bad)
(bad)
les
adc
jns
xchg
inc
ja
cwde
xor
xchg
out
mov
adc
add
(bad)
xchg
dec
push
cmps
pop
mov
xchg
cwde
call
clc
sbb
nop
add
cmp
(bad)
outs
pop
sub
mov
xchg
xor
cli
push
out
shl
out
shl
aaa
xchg
xor
xchg
(bad)
in
test
mov
loope
fst
popa
nop
or
nop
mov
adc
mov
lahf
or
pop
aam
mov
or
pop
dec
jmp
mov
xchg
fld
in
aas
test
xchg
mov
cmp
xchg
push
pop
push
jl
xor
inc
xchg
xor
packuswb
push
hlt
loopne
out
jmp
dec
out
in
dec
pop
scas
aaa
push
and
xchg
xchg
(bad)
js
mov
out
fs
fisttp
xchg
out
loope
test
mov
push
rcl
pop
aas
aam
stos
scas
test
xchg
mov
mov
sti
call
outs
or
mov
add
pop
xchg
fcomip
xchg
xchg
fstp
xchg
cmp
les
sbb
stos
cdq
sub
sahf
cld
outs
xchg
mov
push
inc
stos
push
or
push
cli
xchg
mov
addr16
cmps
inc
je
xchg
iret
(bad)
jle
ret
add
fwait
and
jecxz
sbb
jnp
ffree
aaa
lahf
out
stc
push
xchg
sbb
je
jns
lods
fwait
cmp
push
outs
pop
mov
retf
nop
fidiv
mov
lods
xchg
jbe
or
es
dec
jno
je
push
xchg
pop
sti
adc
jl
cmp
leave
hlt
xchg
out
add
cld
sbb
les
aas
je
mov
lahf
repnz
fimul
in
xchg
(bad)
sbb
xor
xchg
jmp
dec
xchg
and
add
push
sub
cwde
fdivr
lods
stos
push
add
xchg
xchg
cs
mov
mov
xchg
xlat
stos
addr16
out
imul
retf
sbb
pop
adc
add
sahf
xchg
aam
outs
aaa
adc
jecxz
sub
outs
xor
xchg
iret
test
(bad)
out
xor
mov
jnp
aam
and
ret
or
pop
(bad)
fadd
loop
sti
(bad)
test
inc
inc
pop
mov
jnp
xchg
cwde
int3
push
jbe
add
fisubr
jnp
pop
fmul
pop
add
retf
pop
stos
sar
lock
adc
pop
xor
xchg
mov
and
fs
aas
xchg
lods
sub
dec
fldenv
jbe
adc
jo
pop
xchg
adc
test
fld
sar
cdq
movs
pop
sbb
loop
pop
add
rcr
or
les
cs
add
push
outs
hlt
repnz
icebp
hlt
push
inc
pop
rol
and
fdivr
xchg
imul
mov
dec
xchg
push
fwait
enter
outs
mov
push
inc
pusha
xchg
push
fcmovnb
rcr
aam
lods
das
xchg
cmps
cmp
push
rol
jnp
mov
je
dec
and
into
rcl
enter
cmp
pop
mov
sbb
fs
pop
xchg
cmp
jl
stc
xchg
test
outs
mov
iret
push
push
and
xchg
mov
data16
imul
xchg
lods
outs
xor
jns
adc
push
cwde
leave
xor
dec
xchg
add
sbb
mov
xchg
dec
in
inc
lock
sub
sbb
jns
mov
fdiv
push
cli
xchg
mov
ret
loope
rcl
pop
cmps
lds
inc
push
daa
xchg
add
adc
js
xchg
lock
jmp
test
dec
loope
cdq
call
pop
rol
mov
sbb
jp
jecxz
mov
xchg
mov
icebp
sub
push
push
pop
(bad)
shl
aad
inc
xchg
in
cmps
sub
rcl
sub
scas
mov
xor
iret
sar
jg
lock
repnz
jp
(bad)
stos
fst
ins
cmps
icebp
sahf
stos
push
xchg
(bad)
in
fsubr
xchg
xchg
cmpneqps
outs
lahf
fisub
xchg
cmp
xchg
lods
and
or
pop
sbb
movs
aad
or
jge
mov
mov
popf
dec
inc
sbb
adc
sbb
xchg
sub
jo
dec
xchg
adc
adc
cmp
mov
(bad)
add
and
jbe
js
xchg
xor
mov
ret
lahf
repz
cld
mov
push
cdq
popf
lea
aas
sub
hlt
jmp
(bad)
int
mov
jge
adc
inc
dec
push
or
mov
dec
test
jg
bound
pop
dec
add
in
mov
test
xor
xlat
xchg
dec
repnz
test
in
sub
jne
sahf
push
sahf
xor
stc
shr
or
imul
mov
mov
pop
sbb
xor
arpl
sub
mov
test
xchg
jbe
sbb
aas
js
pushf
cmp
je
and
int3
in
mov
or
jl
fimul
xor
int3
cmps
(bad)
loop
cmc
fwait
jl
es
movs
dec
lods
movs
aad
and
retf
xor
adc
mov
hlt
test
sbb
dec
or
mov
jmp
push
sahf
sub
mov
mov
sbb
mov
pop
mov
xchg
ds
test
ins
mov
and
xchg
jne
lea
mov
xchg
ret
push
cmps
xchg
popf
mov
cmps
and
mov
(bad)
je
dec
gs
add
adc
lea
add
xchg
call
rcl
repz
inc
lock
icebp
push
sub
or
nop
fs
and
xchg
add
cs
(bad)
and
aam
mov
dec
pop
xchg
add
and
cmp
xchg
mov
pop
sub
sub
mov
movs
jp
mov
mov
dec
sub
push
cmp
bound
mov
movs
fwait
imul
push
fldcw
push
xchg
push
adc
xchg
fnsave
push
aas
or
pop
neg
adc
xor
call
dec
push
xor
mov
inc
add
and
jg
and
and
jmp
dec
pop
fldcw
dec
bnd
push
jl
xlat
aam
int3
test
sbb
cmp
xor
test
out
xchg
rol
adc
clc
cli
push
add
push
ret
and
int3
fidivr
cmps
cmp
je
jmp
xchg
jp
mov
test
loopne
iret
mov
rcl
sbb
xor
xor
adc
test
mov
or
aad
cmc
fstp
lds
xchg
pop
bound
idiv
pop
xchg
daa
or
test
fwait
out
mov
stc
loopne
mov
in
inc
dec
in
fist
push
xchg
xchg
sub
scas
sub
jl
inc
pop
jmp
jp
dec
div
xchg
inc
repnz
loope
pop
popf
mov
imul
stos
push
dec
cmp
dec
xchg
add
ss
(bad)
jl
sar
push
push
out
aad
mov
inc
enter
or
bound
imul
xchg
xchg
push
cmp
push
out
mov
mov
jns
inc
sub
adc
or
fst
xchg
retf
test
inc
ror
clc
in
mov
jns
in
stc
jb
or
inc
cs
xchg
jne
stos
pop
xor
cmps
shl
mov
push
mov
sar
div
xchg
dec
inc
push
mov
cmp
push
in
push
sub
jmp
mov
rcr
cmp
pop
fbstp
pusha
fnstcw
or
test
xchg
and
xchg
ds
(bad)
lahf
adc
mov
or
xchg
jmp
rol
movs
push
mov
outs
mov
or
xchg
cld
shr
xchg
call
cmps
dec
test
clc
jg
lea
dec
xchg
neg
jbe
cli
add
jnp
fcom
add
not
gs
sub
xchg
test
and
sbb
js
or
loopne
and
je
sbb
pop
xchg
mov
into
push
ficomp
pop
jmp
cmps
je
sub
adc
sbb
in
dec
lea
into
adc
stos
adc
xor
add
fs
adc
inc
sub
pop
pop
jbe
loop
retf
clc
sub
stos
out
mov
int3
pop
stos
repnz
data16
loopne
cli
mov
inc
mov
cld
mov
push
imul
dec
push
fwait
in
and
adc
aad
or
xchg
mov
gs
adc
fstp
adc
lahf
int
test
push
xchg
or
in
dec
pushf
xchg
jmp
clc
loopne
fwait
shr
adc
(bad)
lea
aad
mov
pop
jae
adc
pop
adc
push
out
fimul
mov
sbb
xchg
jecxz
icebp
js
xchg
leave
mov
sbb
mov
js
xchg
xchg
ror
mov
xchg
ret
mov
xchg
sub
dec
push
jle
lock
je
test
fistp
adc
je
outs
enter
test
push
(bad)
rcr
pop
(bad)
xchg
nop
xchg
popf
dec
inc
and
xchg
push
ret
test
test
cmps
mov
aam
cmp
inc
ds
stos
(bad)
ret
(bad)
into
not
cmp
or
dec
mov
xchg
mov
int3
rcl
xchg
jle
es
mov
das
push
xchg
stos
cmp
xor
mov
adc
mov
andps
and
xchg
add
js
jecxz
mov
shl
adc
retf
lahf
mov
lds
cmp
lea
sub
add
xchg
retf
fiadd
xchg
add
jns
popa
sub
lock
sbb
clc
jp
and
lahf
rcr
sti
popf
fldcw
hlt
cmc
jmp
xchg
call
out
jl
pop
fst
dec
test
xchg
dec
xor
addr16
call
lahf
xchg
lock
push
sbb
(bad)
std
jle
xchg
jbe
jle
shl
mov
fstp
leave
push
add
js
nop
cmp
mov
mov
mov
shr
xchg
and
mov
rcr
xchg
mov
jl
mov
mov
adc
cmp
jnp
fidivr
adc
out
jl
(bad)
je
aam
into
ret
and
ds
fst
xchg
sub
lar
push
cmp
adc
sub
imul
pop
repz
retf
dec
popa
sub
stos
(bad)
pop
xchg
fidivr
push
mov
jae
imul
xchg
xchg
loope
dec
out
lea
ror
xchg
mov
inc
ja
jecxz
lahf
and
mov
adc
push
add
popa
xchg
adc
aas
sub
addr16
push
cwde
(bad)
and
mov
int3
xor
adc
adc
xchg
gs
imul
xor
popa
jmp
out
pusha
call
js
shl
jbe
test
jmp
cmps
ds
push
push
cld
or
push
nop
dec
jns
or
or
ror
jnp
adc
and
xchg
ror
cmp
add
(bad)
nop
dec
mov
push
xchg
stos
xchg
ins
xlat
je
sub
lock
xchg
ins
and
aam
rcr
out
mov
xchg
cwde
cdq
popf
mov
jnp
sti
mov
stc
inc
adc
sub
and
mov
sidtd
fwait
push
xchg
ret
sub
movs
pop
(bad)
jmp
pop
or
dec
repnz
xchg
dec
es
or
shr
movs
xor
clc
cmps
jl
adc
jns
arpl
mov
retf
out
clc
stos
out
nop
jmp
jg
jae
fldcw
enter
repnz
cmp
shl
ins
or
retf
jl
movs
scas
push
in
xchg
jmp
adc
push
into
jle
jnp
add
or
ret
jge
lock
out
call
xor
stc
nop
addr16
pop
das
ss
mov
mov
test
scas
jl
or
xchg
into
mov
inc
in
stos
mov
mov
sub
dec
mov
stc
test
mov
in
xchg
fxtract
adc
fmul
imul
(bad)
(bad)
clc
xor
dec
scas
stos
jmp
push
adc
sahf
stos
sub
cmps
mov
fisub
enter
sbb
jl
pop
add
test
int3
add
gs
xor
mov
xchg
xchg
jmp
xor
dec
int3
(bad)
adc
push
cli
jmp
in
pushf
or
cmps
nop
cld
xchg
cld
xor
(bad)
dec
jge
mov
icebp
push
mov
(bad)
cmc
lahf
xor
jo
add
pop
adc
mov
mov
adc
out
rcr
scas
xchg
hlt
jl
fwait
push
mul
mov
xchg
push
and
or
(bad)
push
test
jmp
dec
mov
iret
cmps
mov
jge
loopne
ins
dec
push
sub
lods
movs
out
daa
xchg
xchg
sahf
xchg
jge
jo
call
int
lods
imul
xor
mov
pop
iret
sub
mov
fnstsw
mov
inc
and
shl
jl
mov
push
jle
test
cld
arpl
test
pop
mov
cmp
mov
or
fcomp
repz
(bad)
iret
adc
ret
shl
and
retf
or
sbb
pop
jo
in
in
out
inc
jmp
neg
retf
adc
inc
pop
adc
push
aam
cmps
push
sahf
mov
push
sahf
jge
mov
adc
(bad)
ror
fld
dec
jle
add
mov
nop
cmp
mov
jg
pop
fbld
adc
pop
or
popf
cmp
mov
push
fidiv
in
stos
cmps
adc
and
add
mov
push
jge
icebp
mov
mov
mov
(bad)
icebp
je
jge
out
jle
jbe
sahf
xor
xchg
jo
adc
xchg
jne
add
jne
mov
xor
dec
add
cmps
sub
pop
clc
lods
fimul
in
jge
inc
sbb
xor
jns
adc
add
xchg
enter
add
mov
cmp
cmp
mov
push
lea
aas
ins
loopne
fiadd
lods
hlt
push
aam
lods
mov
sbb
nop
mov
ja
pop
push
nop
loopne
cdq
les
(bad)
jge
repz
pop
popf
je
out
out
xchg
xchg
jecxz
sub
lahf
xchg
imul
dec
ins
pusha
adc
(bad)
lahf
or
fldenv
sub
lds
in
fidivr
aaa
xlat
dec
test
add
fist
and
or
mov
xchg
out
push
mov
sub
jmp
mov
push
arpl
lock
in
mov
push
neg
adc
fmul
dec
mov
into
push
aam
out
jg
jno
mov
je
scas
not
xchg
fisttp
pop
aad
push
sbb
push
ins
xchg
in
add
sub
mov
cs
adc
xchg
ins
sbb
loope
fstp
ja
sub
loope
dec
ret
sbb
outs
and
inc
jg
cld
push
test
sbb
push
jl
scas
ins
rcr
fs
xor
xchg
cmove
stos
xor
jle
cmp
jp
repnz
dec
stc
mov
hlt
pop
daa
pushf
fwait
xor
sub
std
loope
adc
repnz
hlt
aam
ins
sub
es
int3
cmp
mov
pop
fild
cdq
adc
xchg
pusha
sbb
in
jbe
jo
mov
add
mov
jge
aam
jge
push
jb
aad
inc
gs
mov
sub
movs
in
pop
pop
cmps
out
jmp
adc
jecxz
push
mov
sub
(bad)
icebp
and
fimul
or
jecxz
ret
xchg
pop
pop
jne
pop
mov
call
iret
and
mov
pop
jge
mov
xor
sbb
ins
scas
and
push
icebp
pusha
scas
call
(bad)
fs
and
loopne
int3
in
popf
xchg
push
aam
and
test
pop
xor
adc
jle
test
mov
rol
xchg
adc
jne
xor
cmp
pop
and
jp
loopne
or
es
popf
(bad)
lea
inc
test
xchg
mov
pop
mov
xchg
sbb
repnz
je
mov
test
jl
xor
xchg
ss
and
inc
inc
xor
dec
jmp
cli
add
mov
push
add
ret
push
lahf
sub
icebp
and
mov
dec
sar
repz
xchg
push
in
stos
mov
retf
sub
push
push
sar
sbb
jo
sub
xor
add
sti
aas
std
xchg
xchg
push
mov
dec
lods
sub
out
shl
retf
or
test
sbb
pop
mov
adc
aam
xchg
in
out
arpl
pop
ror
stc
ror
dec
xchg
sahf
inc
popf
test
add
inc
lock
je
adc
mov
jecxz
vmovhpd
jo
cmps
loop
in
aad
arpl
dec
ja
data16
je
aas
or
aam
mov
add
shl
jmp
cmp
cs
loope
mov
ss
pop
jnp
push
lahf
movs
push
xchg
jmp
jae
xchg
xchg
inc
push
sbb
or
iret
xchg
ret
ja
jne
and
ins
xchg
shl
mov
out
xlat
jecxz
sbb
idiv
xchg
push
jae
clc
stos
jns
add
into
adc
jp
or
outs
xchg
dec
arpl
or
popf
inc
hlt
xor
mov
push
dec
lahf
je
pop
shl
sub
xchg
outs
cwde
into
add
out
sbb
xchg
mov
pop
ret
xchg
pop
movs
hlt
xchg
outs
push
ja
push
pushf
mov
adc
aaa
and
mov
scas
js
push
add
xchg
sahf
push
cs
je
mov
xchg
push
xor
pop
test
mov
lds
(bad)
rcl
mov
push
sbb
adc
in
sbb
scas
inc
mov
das
out
inc
nop
out
fcmovnb
xchg
or
retf
test
jecxz
es
jge
test
adc
mov
xchg
add
fild
pop
xor
mov
sahf
ins
fst
lds
mov
sub
inc
mov
cmp
xchg
loop
scas
pop
test
push
add
sub
std
pop
adc
ins
push
xor
xchg
sahf
pusha
mov
call
out
jmp
jo
mov
adc
cmp
mov
scas
push
nop
cmp
sub
mov
mov
ficom
push
(bad)
cdq
adc
mov
jecxz
xchg
mov
sbb
das
xchg
adc
jge
sub
cmp
xchg
xchg
ffreep
jl
(bad)
retf
repz
pop
xchg
cmps
and
sbb
mov
mov
xchg
jmp
mov
jb
mov
lods
adc
cmp
push
je
add
inc
cdq
xchg
dec
push
xchg
add
dec
shl
icebp
push
int
pop
ss
or
xchg
sub
clc
and
xchg
adc
retf
movs
mov
add
jae
mov
mov
sbb
inc
dec
add
xchg
stos
jo
fucom
popf
inc
add
pop
xchg
mov
nop
es
xchg
add
jnp
inc
pop
xchg
push
add
stc
xor
test
je
xchg
cmps
pop
pop
gs
xchg
sub
neg
push
xchg
out
sbb
loope
imul
ret
aas
test
mov
or
cmp
xlat
mov
and
fist
ficom
mov
mov
mov
xlat
sub
popf
and
jb
push
cmp
xchg
mov
adc
push
push
inc
pop
push
call
jb
mov
sahf
mov
mov
mov
stos
retf
mov
movs
add
push
xor
jno
jno
push
cmp
mov
push
and
sub
adc
inc
adc
cmp
jo
test
xchg
sbb
sub
in
push
fldenv
out
jae
push
mov
inc
jb
test
push
and
push
out
xchg
dec
(bad)
jecxz
icebp
xchg
xor
mov
xor
dec
mov
xchg
push
rcl
inc
mov
js
push
imul
push
loop
xor
dec
mov
out
jne
xchg
out
jmp
xchg
xchg
test
inc
icebp
sub
sar
pop
aas
cs
jo
jmp
in
and
test
mov
and
jbe
xchg
mov
(bad)
xchg
and
push
push
repz
cdq
xchg
add
adc
or
leave
push
mov
adc
ret
out
mov
push
(bad)
aas
xchg
pop
inc
jg
xchg
push
sub
mov
pop
ficom
or
and
cwde
in
pop
sub
pop
sbb
push
xchg
cdq
mov
pop
mov
push
jae
sub
call
xchg
adc
xchg
mov
inc
test
mov
(bad)
xchg
sub
xchg
mov
jno
sub
stos
jnp
xchg
sar
dec
push
xchg
inc
inc
pushf
cmps
jmp
or
outs
xchg
mov
mov
ins
sbb
and
or
stos
stos
dec
mov
mov
cmp
fwait
iret
mov
jae
mov
sub
mov
cmp
call
adc
xchg
push
dec
mov
fbld
xchg
into
cmp
sbb
cmps
cmps
mov
shl
sbb
js
xchg
(bad)
repz
aaa
imul
xchg
jle
(bad)
mov
add
and
out
jae
(bad)
cmps
push
in
cdq
in
mov
mov
mov
ja
pop
jmp
call
mov
fimul
push
jl
rol
cmps
jnp
lods
or
loopne
gs
jl
(bad)
sub
repnz
xor
adc
cmp
lds
les
jecxz
jns
pop
fsubr
movs
repz
xor
or
leave
mov
push
sbb
mov
imul
scas
and
int3
jge
xor
inc
xchg
sub
hlt
cmp
mov
fisttp
out
xchg
fnstcw
xchg
xchg
shl
jnp
mov
jle
adc
adc
pop
xchg
push
xchg
xchg
pusha
add
xchg
and
test
adc
or
mov
mov
jns
int3
jp
fist
stos
inc
btc
add
xchg
fucomp
stc
sub
test
adc
xchg
pop
mov
push
sahf
xchg
cmp
and
prefetch
clc
xchg
rcr
pusha
inc
movs
push
mov
xchg
jno
xchg
pop
pop
clc
in
xor
inc
pop
mov
pop
xor
xor
pop
push
xchg
mov
xor
js
test
enter
jno
add
(bad)
pusha
xchg
push
mov
and
ficomp
xchg
pop
lea
pop
mov
mov
mov
cmp
movs
icebp
psubsw
mov
jb
fstp
add
std
test
mov
xchg
jbe
xor
loopne
pop
cdq
xor
fcomp
xor
in
dec
test
imul
aas
xchg
dec
out
call
and
jmp
fadd
dec
jle
fs
pop
scas
aad
fiadd
(bad)
mov
mov
dec
es
push
xchg
repnz
aam
fsub
jae
(bad)
push
hlt
fdivr
add
lahf
mov
xchg
addr16
dec
test
cmp
adc
js
lea
fwait
mov
pop
ja
cwde
outs
sbb
test
(bad)
pop
call
out
xchg
cli
mov
push
push
jmp
cmp
test
aaa
sbb
in
cmp
mov
or
cdq
test
adc
(bad)
(bad)
jo
aad
sbb
aam
jp
into
and
lahf
call
mov
popa
inc
cmps
mov
adc
adc
or
xchg
popf
jbe
pop
imul
ret
sub
inc
hlt
xor
jns
mov
inc
aad
dec
push
ror
mov
xchg
xlat
sar
scas
repz
xchg
mov
fidiv
in
and
into
inc
not
popf
mov
ins
out
jo
mov
int3
adc
add
push
std
or
cmp
les
ss
jge
xchg
jmp
fadd
mov
out
mov
or
xor
mov
es
je
mov
scas
lahf
call
xor
fdivr
hlt
xchg
fbstp
push
pop
out
out
xor
and
cmps
test
test
sbb
lods
call
test
std
push
jecxz
inc
repz
or
adc
pop
jl
cmps
add
int
repnz
out
sti
ins
rcr
cmps
fdivr
aaa
and
(bad)
pop
psubd
shl
pushf
rol
cmps
nop
jbe
out
adc
ret
fcomp
test
fwait
jg
neg
lahf
add
push
jge
psadbw
jmp
ja
ret
out
mov
pop
movs
add
cdq
xchg
rsm
xlat
call
mov
adc
test
sbb
sub
sbb
inc
mov
jge
mov
jmp
and
les
mov
fs
adc
xchg
and
stc
push
adc
fldenv
bnd
mov
lods
pushf
dec
or
sub
rep
add
cmps
lahf
mov
not
mov
mov
out
neg
pop
pusha
mov
cmc
jp
inc
lods
movs
add
cli
inc
push
jb
add
daa
mov
retf
push
xchg
inc
sbb
inc
jge
jg
dec
movs
xor
inc
(bad)
pop
cld
and
mov
adc
adc
jmp
loope
mov
jl
inc
xchg
bound
dec
jmp
ja
iret
ret
ds
out
(bad)
neg
inc
bound
jecxz
mov
inc
push
rcl
xchg
jmp
ucomisd
cmps
test
ss
add
mov
xor
mov
push
push
ret
inc
rcl
jmp
retf
inc
call
and
in
and
adc
xor
mov
or
popa
call
sub
xchg
jge
mov
jns
and
jo
xchg
mov
inc
repnz
add
imul
hlt
cmp
ficom
test
ins
xchg
in
xor
xchg
retf
pop
xchg
(bad)
xchg
lahf
arpl
jl
mov
pusha
(bad)
aas
or
xchg
bound
notrack
and
in
xchg
fst
outs
mov
in
jae
inc
xchg
pop
aaa
fwait
xor
mov
in
push
std
rcl
dec
fs
sbb
adc
mov
imul
mov
cmp
arpl
mov
cld
mov
aas
fidiv
xchg
loop
add
ja
jno
xor
and
inc
add
xchg
sub
mov
mov
xchg
and
xchg
les
dec
outs
xor
cmp
in
out
pop
fwait
mov
inc
xchg
popf
cdq
aad
test
(bad)
in
push
repnz
xchg
pusha
add
adc
mov
sub
xchg
cmps
mov
clc
xchg
lods
and
int3
push
push
rcl
adc
cli
xlat
xor
mov
cmps
adc
cwde
mov
pop
mov
add
jnp
ror
xchg
inc
inc
repnz
adc
hlt
psubsb
jle
xchg
int3
or
xchg
adc
out
cmp
popa
or
aad
dec
mov
xchg
mul
mov
ss
xchg
pop
cmp
push
(bad)
and
add
sahf
cmp
push
in
or
xchg
sub
imul
daa
call
adc
popa
dec
or
jbe
arpl
sub
sbb
fisttp
test
lea
retf
cdq
inc
pop
push
adc
push
mov
adc
xchg
sbb
add
rol
aas
inc
push
dec
mov
cld
repz
mov
sbb
cld
loopne
jae
inc
inc
cdq
movs
hlt
mov
es
jl
pop
mov
fidivr
push
mov
and
aas
mov
dec
(bad)
icebp
and
outs
aam
adc
push
sbb
test
les
xor
push
xchg
jbe
fs
pop
mov
xchg
pop
push
sbb
jle
ja
sbb
bound
xchg
int
push
ins
inc
push
pop
xchg
xor
and
cmc
daa
sbb
shl
lds
fisubr
stc
dec
mov
or
call
int
push
pushf
repz
test
cmps
js
push
or
sbb
aaa
jmp
xor
jmp
or
jge
mov
sub
fiadd
icebp
inc
cwde
clc
adc
add
out
bound
mov
les
fistp
in
ret
dec
je
pop
lock
mov
test
sub
dec
xor
and
mov
and
jp
xchg
pushf
mov
and
sbb
sbb
movs
mov
les
or
mov
mov
cmps
sbb
lahf
and
push
data16
mov
stos
or
dec
(bad)
jb
push
mov
push
mov
mov
pop
mov
in
pop
sbb
dec
sub
jmp
xchg
push
dec
aas
sahf
or
retf
in
sbb
call
add
ss
in
fs
into
jecxz
inc
out
pusha
mov
call
cs
imul
mov
popf
fisubr
and
sbb
data16
xchg
sbb
add
sbb
mov
mov
pushf
aad
jge
push
and
cmp
fsub
je
sub
xchg
adc
push
mov
xor
xchg
xchg
outs
adc
push
jmp
fwait
adc
cmp
call
mov
inc
test
jmp
lds
adc
and
adc
stos
cdq
dec
hlt
cwde
push
mov
test
movs
out
mov
wbinvd
push
cmp
hlt
mov
daa
(bad)
test
nop
jp
mov
mov
push
call
inc
int3
es
popf
cmps
adc
jecxz
jg
push
stc
in
pop
rol
outs
mov
jno
jmp
pop
sub
scas
ds
es
cmp
data16
mov
xchg
jb
cmp
mov
adc
adc
fidiv
pop
xchg
outs
xchg
sub
retf
or
push
mov
xchg
shl
gs
pop
or
fmul
and
xor
nop
mov
addr16
push
outs
mov
xchg
out
add
sbb
xor
arpl
rcl
aam
push
aas
stc
xchg
sbb
xchg
sbb
xor
or
aaa
xchg
and
cli
pop
jae
shl
clc
mov
(bad)
ficom
cli
in
adc
and
mov
adc
mov
ret
dec
pop
sar
je
cld
iret
ins
push
inc
std
push
test
ja
jmp
mov
mov
int3
cmp
imul
xor
sub
mov
mov
jle
jae
jl
test
rcl
es
cs
rcl
mov
push
pop
ins
call
jmp
adc
mov
ss
cmps
scas
mov
mov
xor
cmc
jb
jns
sub
mov
aam
sub
xchg
mov
sbb
sub
lds
scas
push
mov
jb
jecxz
and
test
ins
mov
shl
jmp
inc
fsub
out
(bad)
jg
ds
fnsave
pushf
pop
cld
inc
dec
(bad)
xor
cwde
mov
out
lea
cs
xchg
mov
mov
push
cmp
mov
aaa
push
mov
mov
fcomp
(bad)
hlt
icebp
mov
push
pop
push
add
hlt
jmp
jno
out
mov
ja
(bad)
stos
push
(bad)
out
pop
aam
jnp
inc
inc
rcr
rcl
fs
jge
jecxz
mov
inc
call
jno
push
icebp
pop
mov
and
mov
inc
add
stos
(bad)
push
push
out
inc
fwait
ja
je
inc
call
xchg
leave
or
mov
arpl
pop
jle
and
or
lahf
ins
jmp
push
push
ja
add
cmps
xchg
sahf
push
xchg
xchg
pop
adc
pop
xchg
push
test
mov
arpl
je
xchg
ja
or
(bad)
adc
jp
and
adc
nop
into
push
jl
test
mov
lods
push
jl
mov
call
dec
or
xchg
add
movs
xchg
sbb
fdiv
jne
jmp
in
xchg
push
or
jl
add
mov
add
loop
mov
dec
xchg
or
jo
push
fadd
fwait
jl
clc
mov
call
sbb
stos
sub
lods
in
test
ror
pop
pop
dec
pop
call
enter
dec
dec
out
sbb
cwde
popf
lods
out
jno
or
loope
pop
clc
mov
push
stos
aad
iret
jb
call
dec
inc
and
adc
(bad)
mov
loope
mov
mov
adc
cwde
adc
mov
or
aam
cwde
lods
jge
aaa
cmps
adc
mov
xor
pop
hlt
add
xchg
pop
scas
jge
mov
mov
lds
adc
sub
in
pop
lods
xor
or
nop
mov
xchg
pop
ins
xchg
mov
jmp
xbegin
mov
sub
and
mov
loope
cmp
scas
xchg
mov
xor
fwait
add
stc
mov
or
iret
xor
cmc
adc
out
fstp
xor
shl
xlat
sub
fcom
lea
push
mov
push
jae
out
clc
dec
dec
xchg
sub
mov
xchg
sbb
sbb
xchg
xor
outs
jmp
shl
scas
jl
cmp
(bad)
stos
sahf
repnz
sub
mov
and
cmp
iret
xchg
outs
ja
push
call
mov
push
inc
retf
push
aam
mov
sbb
jg
sahf
sbb
cmps
icebp
rcr
cld
xchg
mov
and
in
rcr
int3
scas
or
(bad)
pop
mov
push
sbb
(bad)
sbb
jge
mov
lods
jl
xchg
xchg
leave
mov
in
sbb
mov
mov
ret
cmps
mov
xchg
in
lods
xchg
nop
aad
push
fild
mov
dec
xchg
and
test
mov
jmp
fistp
mov
xor
scas
rcl
adc
jge
cld
sar
mov
in
movs
pop
(bad)
cmp
inc
cmp
mov
push
cmc
xlat
jl
ret
mov
and
jp
call
xchg
push
je
or
sahf
pop
bound
sbb
add
(bad)
in
out
jmp
aad
mov
mov
stc
inc
pop
int
test
push
mov
pushf
cmps
mov
ds
adc
jmp
xchg
push
dec
mov
iret
(bad)
fwait
clc
cli
push
mov
jmp
push
pop
pop
retf
enter
dec
mov
add
iret
xchg
arpl
mov
mov
test
dec
fbld
cdq
xchg
loope
jge
loope
sbb
retf
push
and
cwde
(bad)
adc
fsub
xchg
in
retf
lds
jl
mov
xchg
jge
scas
and
jmp
mov
fistp
es
mov
push
fs
ja
cmp
cmp
mov
cld
cmp
push
dec
out
cli
pop
out
xor
sbb
enter
icebp
pop
je
cmp
push
movs
stos
mov
mov
or
xchg
jge
pop
mov
pop
mov
jb
leave
mov
mov
pop
fld
or
adc
or
adc
call
mov
ins
je
mov
xor
movs
shr
or
adc
not
retf
rcr
in
adc
(bad)
mov
xchg
or
mov
jmp
mov
js
mov
xchg
jb
jo
jmp
shl
(bad)
mov
mov
push
mov
dec
mov
outs
xchg
mov
and
inc
jg
jmp
sub
jl
test
mov
jmp
(bad)
pop
call
cwde
push
lods
iret
pop
adc
mov
sub
call
mov
jl
mov
repz
and
add
fistp
enter
dec
je
and
aad
pop
xchg
xchg
push
xchg
ror
push
fldenv
mov
sbb
pop
inc
nop
repz
jo
mov
cmps
sar
inc
mov
sar
jo
mov
pop
mov
gs
mov
inc
mov
mov
jg
mov
test
sar
sub
(bad)
cmps
mov
lock
cmps
jl
mov
and
sbb
mov
in
sbb
jl
lods
fs
fsubr
xlat
aas
adc
imul
call
adc
jmp
cld
adc
mov
movs
ds
popf
adc
in
mov
dec
jne
mov
int3
mov
xor
jge
sub
mov
mov
xchg
adc
mov
hlt
xchg
retf
sbb
cmc
setns
stos
(bad)
movs
pop
pushf
mov
not
int
mov
fwait
xchg
sar
addr16
or
arpl
sub
repnz
enter
test
and
push
loop
or
pop
mov
sbb
ret
out
xchg
ds
push
mov
sbb
jecxz
enter
fld1
(bad)
push
lods
test
jmp
lock
sahf
or
lahf
test
or
pop
out
xchg
push
and
xor
add
or
retf
jl
pop
push
pop
iret
je
pop
scas
dec
in
ds
mov
mov
or
sbb
fdivr
sar
cmp
mov
pop
stc
nop
(bad)
cmp
imul
pop
sbb
rcl
push
xchg
aaa
xchg
xor
pop
je
xchg
imul
push
sar
jl
mov
jmp
ffreep
nop
call
shr
cdq
sub
push
mov
int
in
call
cdq
dec
(bad)
repz
(bad)
in
xchg
loop
cdq
mov
add
test
cmp
(bad)
in
dec
or
cmp
and
mov
dec
cld
test
repz
mov
inc
jbe
jmp
mov
aad
xchg
pop
outs
(bad)
les
jl
dec
mov
pushf
or
(bad)
adc
out
mov
push
and
cmc
and
xchg
and
dec
push
div
dec
scas
dec
out
fucomp
clc
test
fs
aam
pushf
sbb
push
fdiv
(bad)
cdq
stos
call
shl
mov
call
mov
mov
add
push
mov
mov
mov
sahf
cmp
pop
scas
cmps
repz
mov
repz
cmp
sub
loop
push
cwde
ja
ja
je
jge
mov
scas
mov
xchg
jne
lds
push
adc
cmc
enter
sub
movs
push
mov
xlat
lods
mov
hlt
mov
mov
inc
clc
mov
es
mov
fsubr
test
inc
or
(bad)
pop
sub
scas
adc
es
mov
les
jo
sub
daa
pop
inc
lods
in
pop
sbb
fstp
xchg
popf
popa
aas
dec
pop
daa
mov
mov
pop
or
loope
fdivr
mov
add
mov
sub
sar
add
gs
jae
xchg
or
or
dec
lods
ret
adc
mov
xchg
sub
scas
or
lea
test
repnz
pushf
icebp
pop
ds
cmps
les
test
jbe
hlt
lea
xchg
mov
push
and
jne
cdq
mov
pop
cwde
push
pop
sub
(bad)
movs
sbb
aaa
sti
mov
movs
ins
nop
loopne
lahf
sub
sub
ficom
mov
dec
pop
test
mul
(bad)
rcr
dec
mov
xchg
cs
shr
xchg
int3
fmul
pusha
mov
lods
cmps
movs
mov
mov
mov
and
sub
and
stos
fsub
stos
fsub
cwde
add
xchg
inc
(bad)
mov
add
movs
mov
and
cmp
mov
pop
xchg
pop
cmps
cld
cmp
cmps
(bad)
mov
lods
(bad)
fs
jge
sbb
sbb
test
je
mov
and
test
mov
nop
cmp
cmps
aam
popf
jo
xlat
sar
je
and
sbb
inc
out
outs
xor
mov
jmp
and
mov
adc
inc
fmul
shr
aaa
lock
mov
fadd
dec
mov
fcomp
push
cmp
mov
(bad)
movs
lods
ret
test
cmps
movs
ret
mov
and
xor
mov
popf
pushf
aam
mov
sub
dec
mov
movs
sbb
mov
inc
push
cmp
jne
jmp
je
shl
ja
aam
jge
inc
hlt
cmps
jl
movs
sbb
fwait
xchg
pop
leave
jg
pop
inc
rcr
je
aaa
xor
or
cli
shl
sbb
sbb
loop
jns
rcr
(bad)
popf
stos
dec
mov
xchg
lahf
xchg
cdq
test
cld
ss
cmc
pop
gs
or
adc
mov
push
sub
retf
movs
mov
mov
pop
fidiv
push
pop
jg
repz
in
test
jmp
sbb
(bad)
mov
mov
mov
xor
leave
or
and
loopne
xchg
jl
mov
cmp
fild
adc
xchg
call
enter
mov
push
mov
pop
mov
push
(bad)
lods
push
adc
pusha
cld
cmp
stc
sub
mov
int
loope
mov
int
fisttp
mov
(bad)
and
xchg
cmp
inc
clc
sbb
adc
in
pop
mov
xlat
lock
retf
cs
jmp
hlt
sub
cmps
(bad)
cmc
mul
call
aam
mov
aad
jns
mov
or
add
enter
sbb
in
jl
xchg
fucomp
jo
stc
cmp
inc
outs
push
adc
aad
out
push
dec
das
adc
nop
sbb
int
pop
pushf
xchg
(bad)
shl
pop
scas
sar
inc
mov
cwde
jl
dec
out
test
mul
adc
mov
lahf
ins
pop
mov
lds
retf
pop
jg
sbb
push
cmp
mov
pop
inc
test
call
fadd
(bad)
and
in
push
(bad)
fs
xor
or
or
mov
mov
mov
xchg
shl
iret
stc
cmps
repz
lods
cdq
sub
xchg
es
and
mov
fidiv
cmp
and
push
sbb
pushf
shl
arpl
jno
aas
xchg
dec
hlt
ret
adc
rol
mov
rcr
lock
movs
aam
or
mov
sbb
test
and
(bad)
jmp
ret
neg
push
(bad)
pop
add
xchg
out
and
jl
push
mov
or
mov
sahf
movs
(bad)
aam
sbb
cdq
and
mov
mov
sbb
movs
mov
and
xor
call
mov
mov
(bad)
mov
lahf
mov
js
mov
push
xchg
test
or
or
inc
add
sti
jno
gs
or
movs
jg
loop
outs
outs
out
pop
rcl
call
(bad)
das
mov
std
ret
xchg
test
mov
retf
fst
mov
mov
push
and
push
mov
mov
xor
sbb
fadd
adc
jmp
sahf
jg
push
mov
sub
pop
and
mov
xor
and
in
mov
or
pop
(bad)
lods
or
gs
nop
jg
retf
pop
mov
jle
push
mov
aad
iret
arpl
push
je
repz
popf
popa
out
jl
mov
pop
push
dec
mov
rcr
pop
mov
xor
add
mov
adc
sbb
stos
pop
or
inc
outs
fcomp
xor
sub
mov
fistp
leave
cmp
sbb
push
js
imul
cld
jo
or
into
fsub
fidiv
cld
pop
inc
ret
les
sar
jg
pop
ins
les
shl
test
push
pop
mov
and
test
dec
lods
ret
arpl
or
or
int3
sub
add
add
icebp
test
or
jp
mov
xchg
jg
jno
fmul
cmps
add
js
fs
movq
ret
stos
push
xor
jg
rcr
lahf
jg
clc
mov
pop
mov
inc
imul
sbb
(bad)
mov
mov
nop
js
enter
in
ins
test
dec
mov
and
push
(bad)
rol
sbb
mov
lods
jge
clc
test
retf
pop
push
or
jp
test
movs
xchg
out
mov
lods
jns
cdq
xchg
cmps
cli
(bad)
mov
xlat
mov
into
sub
xchg
(bad)
data16
cs
sbb
sub
call
pop
cmp
test
push
mov
push
cmc
mov
jge
jne
(bad)
sbb
call
add
and
les
jg
xor
mov
rcl
adc
(bad)
mov
iret
pushf
lods
fmul
mov
xchg
fild
and
repnz
jl
lahf
pop
pop
pushf
and
cwde
pop
push
test
or
sti
(bad)
xchg
(bad)
call
pop
out
cli
pop
into
(bad)
or
add
xchg
lods
jl
fstp
cs
and
fcom
push
or
push
sbb
mov
dec
xchg
mov
pushf
sbb
fisttp
ror
add
cmp
pushf
sub
aaa
cwde
inc
jno
cli
ds
xchg
jg
int
fdivr
sbb
inc
mov
repnz
cdq
mov
ficom
test
pushf
cli
mov
int
pop
loope
mov
and
fwait
popf
sub
push
es
(bad)
test
jp
pop
arpl
mov
jmp
xchg
cld
mov
mov
mov
outs
and
sbb
or
xchg
test
sub
es
push
xor
nop
mov
or
ret
mov
mov
pop
fimul
pop
les
out
sbb
enter
sahf
xchg
mov
mov
ret
fistp
dec
cli
daa
fnstenv
aam
aaa
jmp
pushf
movs
lods
arpl
sub
push
mov
loopne
jae
sub
jg
out
sar
xchg
xchg
adc
sbb
adc
xor
cmps
pop
inc
lods
push
test
fcom
(bad)
jp
pop
inc
adc
das
lahf
fistp
pop
stos
dec
mov
mov
imul
xchg
mov
ss
movs
iret
mov
cmps
sahf
mov
(bad)
test
retf
inc
mov
gs
xor
jl
dec
in
push
(bad)
and
hlt
aas
(bad)
xchg
(bad)
jl
aaa
in
push
inc
and
push
ds
pop
sbb
cmps
outs
jb
sbb
shl
inc
inc
mov
int
(bad)
or
mov
lds
push
xchg
dec
retf
fidiv
adc
dec
retf
sbb
add
lods
push
lahf
push
loopne
push
and
fcom
pop
mov
pop
rcl
xchg
sbb
(bad)
push
adc
lahf
mov
mov
clc
cs
mov
jecxz
push
adc
push
push
shl
push
sub
or
fstp
retf
cdq
mov
in
neg
mov
popa
jmp
lahf
mov
(bad)
pause
push
std
fistp
pop
pop
pop
movs
inc
loope
xchg
inc
jmp
cli
out
test
fstp
xlat
xchg
push
sbb
add
xchg
in
fimul
addr16
int3
and
repz
popf
pop
xchg
loopne
pop
(bad)
seto
movs
push
loope
and
out
shl
mov
sbb
mov
add
inc
sub
sub
repz
in
mov
mov
jl
sub
aad
scas
xchg
fldcw
xor
rcr
fadd
xchg
in
or
push
sub
sub
sbb
cli
sbb
enter
and
mov
adc
mov
test
les
test
mov
pushf
cmp
je
fiadd
pop
lods
sar
sbb
std
cmp
cmp
retf
inc
and
add
push
mov
mov
arpl
stos
dec
ss
in
mov
ret
push
loopne
mov
and
(bad)
ins
fild
pop
push
push
fistp
push
sub
retf
in
sub
pushf
test
sar
call
mov
jl
sbb
in
inc
syscall
nop
mov
and
(bad)
stos
jae
mov
call
fwait
stos
fbstp
xlat
out
stos
test
scas
movs
mov
stc
xor
mov
shld
inc
stos
ret
mov
lds
mov
adc
pop
aad
lods
mov
leave
ret
mov
fdivr
ret
mov
sbb
rcr
jmp
pop
test
call
xchg
(bad)
xchg
fistp
mov
jl
mov
sbb
jp
outs
js
movs
nop
in
jmp
xlat
mov
and
sub
push
in
and
(bad)
pop
daa
popf
xchg
xor
mov
adc
mov
retf
fsub
xor
clc
xchg
sub
(bad)
fldcw
add
xor
inc
push
in
fxch
mov
mov
push
sub
or
sub
pop
mov
adc
mul
sub
mov
into
outs
adc
lods
lods
(bad)
mov
add
push
sbb
mov
clc
mov
inc
push
out
mov
mov
add
cld
mov
mov
adc
sbb
call
mov
popa
fidivr
aaa
loope
mov
movs
jmp
enter
rol
iret
lods
aam
fcmovb
mov
movs
mov
fcomp
cmc
lock
mov
popf
shr
adc
retw
push
loope
ret
enter
nop
cli
mov
seto
pop
fxch
cmp
sbb
sub
iret
retf
jge
test
inc
jmp
call
mov
mov
aaa
in
jne
les
lods
xchg
aas
push
pushf
sub
pop
and
loop
shr
stc
pushf
xor
test
sub
repnz
sbb
pop
movs
mov
addr16
pop
mov
popf
in
pusha
jmp
cdq
inc
dec
xor
sub
mov
iret
data16
inc
test
sahf
ins
cld
sbb
dec
test
pop
jbe
js
pushf
aaa
fsub
mov
clc
loopne
movs
push
mov
dec
xchg
std
aaa
pop
inc
sub
pop
mov
cmps
loopne
neg
push
xlat
jmp
call
enter
cmc
push
call
dec
in
ret
sbb
in
mov
sub
inc
in
mov
ds
jl
fsub
lods
in
loopne
(bad)
shl
es
lds
sahf
cld
mov
in
arpl
loop
aaa
sbb
fdiv
loopne
adc
pushf
xor
(bad)
(bad)
shl
mov
test
scas
fwait
jl
lds
(bad)
mul
ror
sbb
sbb
fs
jnp
stos
jmp
mov
jne
int3
xchg
and
cld
nop
sbb
sbb
mov
stos
push
mov
cdq
mov
test
xchg
popf
mov
sahf
pushf
std
cmps
mov
mov
dec
mov
aam
pop
mov
push
mov
mov
mov
sahf
xor
aad
inc
and
push
movs
cmp
lea
pusha
push
or
and
sbb
fdiv
mov
test
xchg
pop
mov
jmp
rcr
and
xchg
adc
(bad)
je
data16
add
retf
and
sar
cwde
or
hlt
pop
mov
popf
pusha
mov
jg
aad
aad
in
mov
mov
(bad)
sub
shr
cli
sbb
(bad)
ds
mov
xchg
and
dec
movs
fstp
movs
xor
mov
mov
and
mov
mov
loope
cmps
and
add
int
lods
loop
test
and
sahf
pop
adc
push
pop
test
stos
jl
sbb
mov
mov
push
adc
push
sbb
lahf
sub
or
inc
mov
fdivrp
mov
cmps
mov
pop
mov
mov
lds
cwde
mov
fwait
mov
push
cdq
push
fdiv
popa
or
in
mov
das
(bad)
mov
xor
mov
aas
outs
xchg
sti
(bad)
fadd
xchg
xchg
hlt
mov
dec
retf
outs
clc
jl
push
mov
fucom
in
add
jmp
pusha
call
adc
push
fidiv
in
cmp
and
mov
adc
cmc
sar
je
int3
fnstcw
stos
xchg
fcomp
nop
sub
mov
stos
jno
sbb
sahf
jmp
cmp
lsl
jmp
push
fcomp
mov
fnsave
pop
jae
sbb
mov
mov
sub
mov
test
inc
dec
nop
enter
loopne
push
pop
jl
std
jg
add
sbb
mov
in
inc
cmps
cdq
pop
and
je
cmps
mov
mov
pop
sub
mov
stos
mov
sub
nop
or
mov
nop
jecxz
inc
push
stos
pop
pop
sub
cwde
popa
adc
repz
aad
pop
(bad)
rol
and
adc
icebp
in
movs
clc
int3
sbb
cmps
cdq
fcomp
(bad)
mov
push
mov
mov
movs
neg
fimul
sbb
pop
mov
jbe
sahf
mov
and
jne
push
movs
push
(bad)
repnz
fs
imul
cs
mov
push
jge
and
mov
bound
jns
neg
fldcw
sub
or
pop
xchg
jl
adc
jmp
ja
aaa
add
lds
cwde
lea
adc
nop
shr
in
movs
jg
and
es
popf
movs
int3
fldpi
xor
jg
sub
mov
loop
aaa
sbb
aaa
in
pushf
xchg
pop
jnp
mov
xchg
push
(bad)
call
sub
cld
mov
mov
sub
mov
mov
mov
movs
sub
xor
dec
fs
push
pusha
mov
and
mov
and
sbb
pop
idiv
push
lods
inc
push
sbb
and
sbb
imul
pop
jl
mov
js
pop
sub
fwait
pop
push
ds
inc
out
push
test
push
aaa
aam
pop
ins
out
xor
mov
and
pop
xlat
int3
mov
xor
xchg
push
cmp
(bad)
int3
inc
add
addr16
fldcw
xchg
sbb
popf
out
mov
fmul
sbb
jl
xchg
xchg
icebp
(bad)
je
mov
shr
out
inc
mov
xchg
jmp
pop
inc
call
hlt
shr
shl
pop
push
loop
mov
push
and
dec
(bad)
jecxz
mov
xchg
pop
aam
(bad)
in
(bad)
loopne
ins
daa
test
leave
out
js
addr16
adc
cld
mov
xor
inc
daa
clc
inc
pop
loop
call
or
(bad)
jmp
jp
mov
mov
pop
lahf
pop
sbb
sbb
jbe
inc
aad
jmp
adc
mov
mov
mov
and
mov
or
in
cmps
int3
sub
mov
enter
popf
call
rol
sbb
(bad)
xor
cwde
lods
aad
cld
cmp
fadd
dec
test
xor
push
cld
hlt
fstp
sahf
and
jb
push
daa
mov
xor
cld
cwde
and
push
or
pop
cdq
adc
fwait
xchg
out
arpl
out
fwait
xlat
out
cld
and
and
call
in
sahf
jl
fsub
int3
stos
fst
mov
cmp
(bad)
or
scas
popf
ret
cmc
or
pop
aam
dec
or
pusha
adc
pop
in
shr
sub
movs
mov
sbb
cld
sbb
in
mov
xlat
loopne
mul
mov
cdq
cld
movs
mov
gs
hlt
sub
or
(bad)
dec
cmp
mov
mov
and
in
loopne
cmp
out
cmp
stc
sbb
call
or
stos
es
or
stos
cld
fadd
sar
pop
xor
and
movs
adc
es
sub
mov
mov
repz
loop
cwde
sbb
ret
xor
adc
push
(bad)
push
movs
jmp
dec
rcr
les
jnp
and
js
aas
ja
pop
xchg
popf
pop
cli
arpl
imul
xchg
mov
dec
xor
jo
or
sar
sahf
pop
mov
mov
out
sub
aad
(bad)
lods
mov
push
pop
push
cwde
imul
pop
dec
jne
push
and
aad
je
jne
jnp
sbb
or
and
out
push
les
(bad)
jo
(bad)
pop
xor
popf
loopne
jg
(bad)
cmps
push
pop
xor
sbb
mov
cmps
shr
jecxz
xlat
sbb
movs
cwde
jmp
lds
into
inc
sar
xchg
mov
xlat
lock
xchg
pop
clc
fmul
pushaw
mov
xor
xchg
int
jb
out
lea
pop
or
jmp
fisub
aad
adc
cdq
dec
fs
test
add
arpl
jb
loopne
jecxz
jb
sbb
fidiv
push
and
sbb
cmp
inc
(bad)
data16
mov
push
jae
xchg
mov
int
push
in
inc
stos
out
dec
add
fisttp
std
cmps
jo
mov
inc
cmc
mov
shr
call
rcl
mov
sbb
and
and
adc
call
in
daa
fs
or
dec
stos
loopne
mov
test
repnz
cmps
fld
ret
mov
repnz
pop
mov
inc
(bad)
dec
movs
and
enter
mov
jo
cmps
add
jne
xor
push
sbb
jl
lods
dec
xlat
mov
pop
pushf
in
fsub
xchg
xchg
clc
mov
mov
les
sub
push
pushf
ret
rcr
popf
pop
jmp
mov
push
pop
xchg
je
sbb
stos
ror
pop
sub
pop
fdivr
lods
jl
(bad)
(bad)
pop
mov
mov
xor
sub
popf
jb
mov
mov
sub
jg
sbb
test
dec
popf
mov
jge
mov
int
sub
data16
and
inc
stos
mov
jge
and
int
dec
pop
dec
ds
fwait
and
cmps
push
out
jg
mov
pop
mov
xchg
mov
in
pop
mov
or
lds
sahf
jmp
sahf
xchg
mov
mov
(bad)
and
mov
and
je
cmp
idiv
nop
repnz
pop
mov
call
pop
sbb
mov
push
sub
test
stc
je
lds
inc
psubusb
jle
cmps
cmp
mov
xchg
in
cmp
or
inc
movs
popf
cdq
pop
loop
mov
fcom
or
mov
jg
push
sbb
cmp
(bad)
stos
sbb
movs
mov
push
xor
dec
add
pop
loope
stos
or
lods
fldcw
mov
enter
lods
xchg
fld
push
mov
test
mov
or
mov
add
lahf
dec
jmp
adc
adc
and
xchg
hlt
push
lods
mov
pop
mov
ret
mov
jno
pop
nop
jg
loope
mov
dec
psrad
sub
sbb
mov
pop
mov
cwde
sub
test
pop
sbb
mov
push
mov
test
xchg
out
in
jl
shr
mov
mov
mov
push
sbb
jg
dec
inc
in
mov
add
int
fwait
cmc
hlt
lock
mov
out
into
jno
es
mov
or
pop
popa
scas
or
dec
sbb
sbb
mov
call
outs
jecxz
push
stos
mov
shl
cwde
adc
shr
push
in
pop
ins
or
pop
adc
call
add
cmp
adc
xlat
enter
test
xor
pop
icebp
shl
gs
adc
mov
jns
lods
mov
icebp
test
push
(bad)
push
jmp
rcl
lods
dec
pop
push
call
xlat
mov
jo
inc
(bad)
ins
mov
std
icebp
leave
jns
jmp
xor
sbb
mov
add
rcr
push
cmps
dec
ja
push
xlat
arpl
movs
cmps
cmps
jl
test
mov
(bad)
and
and
movs
and
sbb
bound
or
sbb
test
mov
rcr
xor
mov
and
je
pop
xor
inc
sub
dec
adc
icebp
out
mov
mov
cmc
popf
ret
je
lds
xchg
push
jl
repnz
stos
mov
dec
js
lock
sbb
jno
loop
call
add
and
xchg
or
mov
jge
outs
pop
test
xchg
aas
or
into
sahf
xchg
and
mov
push
and
scas
mov
leave
dec
call
lahf
ret
mov
xor
cmp
movs
sub
ins
fmul
xchg
jg
sahf
adc
sbb
and
in
mov
pop
test
pop
mov
xchg
fdivr
jge
rcr
loopne
mov
jb
mov
add
cmps
cmp
pop
pop
push
or
into
sahf
cld
xor
push
add
lods
aam
sbb
pushf
cmp
push
pop
imul
movs
mov
mov
pushf
cmp
jmp
mov
in
dec
fsub
retf
lods
adc
test
cwde
into
pop
adc
shl
adc
(bad)
mov
(bad)
movs
cmp
push
push
fdivr
jae
cmps
sahf
movs
std
mov
movs
add
mov
movs
jg
in
movs
jne
mov
pop
movs
in
mov
inc
loopne
cmp
icebp
xchg
sbb
les
mov
arpl
aad
movs
cmp
aad
sbb
cmp
daa
jb
mov
jo
cmps
dec
sbb
mov
and
dec
inc
jge
daa
mov
(bad)
sbb
fadd
mov
mov
and
mov
or
test
mov
mov
pop
out
nop
aad
pop
xchg
pop
cdq
cmp
xor
push
sbb
sub
aaa
and
sbb
test
mov
or
mov
push
push
int
call
icebp
cmp
cld
sub
push
mov
fisub
add
pop
mov
pop
fst
les
ins
pop
inc
pop
xor
or
sbb
pop
movs
adc
xor
in
cmp
popf
aaa
nop
inc
inc
pop
aas
and
aam
mov
fisub
xchg
lahf
jne
cmp
inc
call
mov
mov
jns
push
test
scas
mov
pop
into
jg
pop
jle
mov
push
sub
or
mov
repnz
xchg
imul
cmp
pushf
inc
ret
mov
cmps
mov
mov
jb
mov
cmp
mov
or
sahf
or
loopne
dec
sbb
inc
int
mov
or
inc
cmps
and
cdq
jg
pop
mov
xor
mov
add
or
je
es
daa
lahf
aam
dec
inc
sbb
cld
aam
repz
sahf
rcr
pop
cli
cs
jecxz
xchg
jb
xlat
mov
out
jge
scas
stos
or
fdivr
pop
idiv
fprem1
jg
int
mov
mov
nop
push
es
adc
jmp
adc
xchg
jmp
pop
push
popf
rcl
sahf
inc
stc
shl
sub
sub
mov
cmp
push
clc
push
cmps
mov
stc
rol
mov
test
jbe
lods
mov
mov
cmp
pop
or
nop
(bad)
(bad)
pop
jge
jl
es
xor
sbb
ret
rol
jbe
dec
daa
mov
jmp
xor
pop
mov
fwait
mov
jl
xchg
call
test
data16
pop
fs
mov
aas
and
movs
add
jmp
dec
fsub
mov
mov
or
(bad)
stos
dec
or
inc
push
movs
sti
sbb
call
cmc
or
mov
imul
xchg
(bad)
out
mov
scas
adc
pop
movs
mov
ins
pop
add
outs
cmp
mov
outs
push
inc
or
loop
mov
scas
pop
sub
mov
lahf
push
or
dec
inc
sub
fisubr
mov
or
fsub
repnz
loopne
push
mov
dec
xchg
inc
xchg
sbb
loop
push
(bad)
inc
xchg
fnstsw
inc
and
pop
cmp
fwait
pop
bound
scas
gs
aam
fmulp
mov
push
dec
mov
mov
jbe
cdq
sbb
mov
mov
ficom
adc
fdivr
inc
jg
xchg
push
or
or
out
xchg
popf
dec
mov
push
push
jo
pop
jbe
or
repz
push
mov
dec
pop
(bad)
js
mov
xor
mov
xor
in
rcr
rcr
fdivr
dec
ins
sbb
adc
js
sub
rol
dec
add
and
inc
fnstsw
pop
and
push
xor
mov
test
inc
jmp
popf
adc
sub
push
cmp
daa
push
out
in
in
(bad)
adc
pop
sbb
push
dec
cmp
xchg
cmp
movs
sar
addr16
cmp
test
add
xor
mov
(bad)
lock
fcom
nop
int
ret
mov
aad
in
mov
std
push
in
mov
xchg
xchg
adc
add
(bad)
enter
mov
pushf
lods
and
out
mov
cli
test
(bad)
cdq
les
fwait
push
mov
icebp
push
xor
ret
lods
les
out
fldcw
adc
and
movs
push
fsub
pop
test
cmc
mov
mov
pop
cmc
push
jne
ins
popf
lock
out
sbb
xlat
sbb
mov
lods
sbb
add
inc
(bad)
sbb
pop
int3
mov
frstor
ror
sbb
xchg
dec
push
pop
mov
push
pop
inc
lods
jno
push
stos
in
stos
icebp
dec
out
mov
pop
mov
aam
in
(bad)
xlat
sbb
stos
lods
pop
mov
les
lods
jg
mov
xor
int3
push
cvtdq2ps
mov
mov
cmc
pop
add
gs
test
pop
jp
push
push
loopne
cwde
adc
jb
mov
aam
sub
cmp
fstp
rol
xchg
mov
push
fcom
fcmovbe
mov
imul
dec
nop
pushf
loope
mov
jbe
mov
or
and
push
jge
pop
stc
dec
and
shl
movs
movs
lahf
jmp
fwait
popf
jecxz
mov
sbb
lahf
add
sbb
hlt
and
add
sti
jno
adc
or
dec
push
xlat
adc
fisttp
retf
jge
cmp
sbb
leave
dec
fs
push
in
sub
pop
mov
mov
xor
cdq
fwait
xchg
stc
lahf
imul
xor
movs
in
(bad)
aam
sbb
test
cmp
stos
mov
pop
popa
xor
clc
xchg
xchg
addr16
dec
ins
dec
ins
retf
pop
test
inc
mov
xlat
xchg
out
out
iret
arpl
leave
mov
push
movs
sub
sahf
jnp
int
xchg
fs
pop
push
mov
push
in
in
jmp
mul
ret
jge
xchg
mov
inc
xchg
in
jmp
mov
xor
stos
add
mov
out
mov
fsubr
push
repnz
ds
out
jns
sub
imul
je
xchg
xor
stos
call
and
dec
fwait
jae
xchg
in
outs
out
adc
ja
aam
ss
icebp
jl
aam
test
dec
push
push
mov
mov
cwde
or
jge
sbb
cmps
je
jl
sub
lods
jl
cmp
fbld
popa
cld
push
pop
xchg
mov
push
mov
cmps
enter
jo
jl
test
test
fiadd
(bad)
repnz
cmp
mov
mov
shl
sar
mov
and
(bad)
je
cmp
clc
push
adc
mov
cdq
aad
or
test
and
push
shr
in
mov
repnz
bound
jmp
mov
pop
mov
mov
jb
les
pop
jnp
push
adc
mov
loop
(bad)
sbb
cmp
in
cld
test
(bad)
xchg
retf
mov
and
test
push
sbb
pop
call
icebp
push
in
shl
adc
pusha
(bad)
mov
aam
cmps
mov
fxch
mov
es
iret
test
mov
data16
jg
cmp
cwde
clc
fsub
mov
pop
shl
mov
lods
cld
aam
jl
aam
sub
test
dec
adc
or
xor
(bad)
cld
rol
jns
mov
jge
dec
dec
cmp
jo
test
mov
neg
fst
cld
fcomp
(bad)
mov
lea
aaa
cmps
lods
cld
es
mov
lahf
pushf
outs
and
daa
mov
(bad)
outs
xlat
lahf
int
push
sub
jnp
pop
push
lods
in
push
adc
movs
xor
push
(bad)
pushf
jno
stos
in
js
ins
xor
or
cmp
jmp
fbstp
hlt
js
je
sbb
aad
cmp
retf
int
or
sahf
xor
adc
and
imul
imul
mov
je
shr
jb
stos
ret
stos
jg
mov
dec
jb
jmp
movs
sbb
jecxz
xor
push
xchg
and
mov
mov
mov
mov
adc
pop
(bad)
mov
push
sbb
sahf
pop
cmp
retfw
ins
mov
cmp
add
aad
(bad)
fmul
not
push
mov
jbe
push
mov
aad
cmps
in
mov
mov
popf
mov
arpl
aaa
pop
pop
add
sti
movs
or
and
xor
mov
inc
mov
(bad)
int
aam
mov
push
mov
iret
pop
inc
mov
and
sbb
and
pop
jg
les
xor
mov
pop
scas
mov
pushf
mov
int3
stos
enter
in
int3
adc
add
pusha
cli
add
lahf
test
fs
xor
and
cwde
xor
mov
adc
xchg
pop
in
je
fcmovu
out
mov
jl
(bad)
sub
hlt
xchg
loope
int
mov
pop
cdq
and
(bad)
es
adc
mov
mov
out
push
movs
xchg
push
pop
lds
push
int
aam
adc
jg
call
add
add
and
inc
pushf
std
add
pushf
in
push
xchg
cwde
cmp
ds
inc
lahf
push
and
sub
repnz
mov
push
mov
pop
jp
add
call
int
sub
neg
cwde
mov
and
rol
pop
scas
xchg
ficomp
cwde
mov
cdq
mov
xchg
out
addr16
xlat
adc
cwde
sub
push
pop
pop
sub
mov
lahf
push
fsub
adc
add
sbb
out
dec
inc
stos
xlat
fistp
xchg
call
sar
xchg
xchg
fcmovbe
jg
mov
int3
sub
es
mov
xchg
xchg
das
(bad)
xchg
mov
clc
test
jl
sub
loope
or
test
xchg
dec
add
mov
push
push
sub
sbb
lods
and
or
fld
xor
sbb
or
push
jbe
cmp
pop
icebp
mov
adc
adc
repnz
jns
xchg
cdq
jl
arpl
jo
leave
push
cld
xlat
jmp
dec
cmp
lods
jnp
jge
aam
popf
ror
xchg
fist
cmp
mov
push
and
mov
or
cwde
mov
mov
sbb
shl
push
sbb
out
jg
test
je
xlat
adc
ror
lds
in
fstp
stc
ror
mov
sbb
rcl
cmp
jl
cmp
mov
adc
adc
jmp
adc
jl
mov
cdq
jmp
pop
in
out
in
test
in
int3
cld
mov
inc
adc
sub
push
popf
imul
or
xor
jg
in
aas
dec
fsubr
gs
or
jmp
shl
cmps
jl
shl
and
pop
cmp
in
int3
(bad)
out
nop
dec
scas
xchg
ficom
jae
outs
or
retf
push
cmp
jl
jle
mov
push
sub
dec
and
jge
add
aam
jge
rcr
leave
ja
lods
fs
arpl
xchg
xchg
jg
sub
jg
(bad)
fcmovbe
(bad)
or
jne
imul
int3
mov
mov
pop
pop
fcomp
fistp
dec
cmps
fst
adc
jns
test
mov
pop
pushf
pop
and
adc
fisttp
push
lods
sbb
iret
inc
jns
mov
enter
push
fs
mov
xchg
(bad)
outs
retf
ds
jge
std
xchg
add
(bad)
ins
sbb
jge
dec
or
pushf
repnz
aad
pop
mov
mov
mov
mov
sbb
mov
sub
stos
sbb
pusha
test
mov
cmps
out
adc
push
fstp
and
lods
or
cmp
cs
dec
adc
add
rol
ficomp
adc
(bad)
push
cmp
xchg
dec
mov
mov
sti
add
in
push
sbb
xchg
jmp
push
aad
xchg
test
fdiv
sub
push
fldcw
and
test
dec
retf
inc
xor
push
jmp
(bad)
outs
js
xor
or
xor
jg
es
sub
(bad)
jg
ficomp
hlt
(bad)
xchg
in
aaa
xor
jg
cmp
xor
out
inc
(bad)
or
iret
xor
pop
cli
int
or
jge
cmp
pop
outs
imul
daa
mov
aam
(bad)
jmp
(bad)
cs
test
sub
nop
mov
sbb
mov
mov
adc
jl
jb
mov
mov
in
push
test
or
lahf
jg
cmp
es
fild
dec
cmp
test
mov
push
push
(bad)
int3
mov
jne
aam
mov
mov
jl
mov
dec
lahf
fistp
(bad)
inc
jne
rcr
js
les
push
pop
sub
in
ret
dec
fsub
push
cdq
jmp
jle
pop
or
pop
xchg
xchg
push
test
in
(bad)
loopne
and
es
std
pop
(bad)
push
std
jl
shr
or
mov
aaa
push
ret
xchg
icebp
ret
mov
push
jmp
push
jns
out
rcl
cmp
pop
movs
and
(bad)
test
push
dec
shl
cmp
in
pop
add
test
xlat
iret
int
adc
(bad)
sbb
ficom
lahf
cmp
daa
adc
pop
es
xchg
dec
push
xchg
repnz
sub
xor
je
pop
int3
out
pop
ja
xchg
ins
jmp
pop
push
sub
outs
iret
mov
push
sub
pop
std
pushf
retf
push
mov
std
out
mov
mov
loop
inc
cdq
sbb
jl
jle
movs
xchg
pop
add
sbb
hlt
xor
inc
cmps
dec
sbb
sbb
mov
movs
xor
gs
xchg
(bad)
iret
imul
call
inc
adc
scas
clc
int
(bad)
mov
xchg
jae
and
jbe
push
call
xor
popf
pop
push
(bad)
pop
sub
shl
movs
(bad)
adc
in
pushf
shl
mov
shl
sbb
test
sbb
fcomp
cmp
cmp
pushf
loopne
cmp
xchg
and
outs
jns
sbb
nop
mov
dec
test
xchg
jmp
sbb
clc
rol
push
cld
mov
jnp
cmps
clc
scas
xor
mov
adc
and
repz
inc
lds
(bad)
pop
popfw
stc
jl
dec
push
xchg
add
test
aaa
lods
int3
fs
test
mov
dec
inc
mov
jb
out
and
in
jb
call
js
push
jbe
push
stc
mov
pop
xchg
xchg
arpl
mov
rep
stc
add
out
movs
mov
mov
sub
loope
mov
stos
fcom
retf
sbb
out
jne
push
cmps
jp
(bad)
push
jecxz
inc
push
mov
sbb
push
cmp
test
imul
add
or
ret
adc
mov
in
les
adc
loope
sbb
pop
test
mov
sbb
into
rcl
pop
mov
dec
add
jg
sub
stc
ror
fisub
cld
pop
pushf
jl
and
dec
daa
mov
sbb
and
mov
mov
je
in
mov
mov
push
cdq
pop
jl
mov
sbb
pop
mov
fdivr
fcomp
dec
mov
int
rol
cmps
jmp
pop
jl
mov
cmp
cwde
stc
mov
xchg
out
push
loop
aam
ja
jmp
out
sbb
mov
hlt
fsubrp
(bad)
nop
jl
inc
push
test
pop
pop
and
cmp
movs
push
jmp
in
movs
in
and
xchg
fld
mov
jecxz
dec
jg
sbb
je
test
push
xchg
cmc
repnz
out
stos
ror
or
adc
xchg
les
lods
stos
jl
(bad)
ins
mov
xchg
mov
jle
push
imul
jecxz
xchg
retf
or
call
inc
mov
cmps
pop
adc
push
mov
jl
push
addr16
pushf
movs
aam
mov
pop
jp
xor
or
cmps
jp
jle
retf
ret
xchg
inc
neg
sti
sbb
push
adc
sar
lds
(bad)
adc
xchg
sbb
mov
mov
push
lds
add
(bad)
in
xchg
xchg
xor
mov
mov
pop
cmps
jg
or
sbb
mov
or
jo
and
icebp
retf
js
add
retf
ret
xor
push
inc
mov
outs
movs
jl
pop
pop
imul
xchg
sbb
mov
clc
dec
push
dec
movs
(bad)
jecxz
xor
fstp
mov
jge
pop
repz
jg
cs
mov
pusha
sub
fadd
frstor
jg
xor
in
movs
mov
gs
xchg
mov
nop
push
xor
arpl
hlt
dec
and
imul
sbb
(bad)
xchg
out
mov
pop
cmps
sbb
mov
nop
enter
jl
popf
mov
or
cwde
into
ficom
fwait
ror
xchg
(bad)
aad
pop
fild
(bad)
add
xchg
adc
mov
pop
addr16
and
xchg
cwde
mov
xchg
popf
or
jg
and
je
scas
xor
dec
pop
test
cwde
mov
xor
push
pop
xchg
arpl
retf
mov
les
push
cmp
mov
xchg
(bad)
and
sbb
and
mov
retf
xchg
fcomip
iret
jb
xchg
pop
jge
and
retf
iret
push
mov
repnz
cwde
mov
lea
(bad)
adc
in
sub
loopne
cwde
or
sub
lds
and
dec
inc
cld
retf
inc
pop
add
fld
or
stos
xchg
jg
sub
mov
xchg
std
je
jl
icebp
fwait
and
popa
fdivp
mov
and
hlt
push
es
xchg
push
icebp
cmps
(bad)
mov
adc
sbb
leave
jmp
retf
lods
mov
cmp
lods
or
jmp
out
clc
pop
mov
(bad)
jle
sbb
popf
movs
sub
mov
(bad)
(bad)
cmp
je
xchg
and
mov
cwde
mov
(bad)
push
or
xchg
push
jne
xchg
fsub
out
xchg
push
mov
mov
cmp
pop
aam
movs
mov
pop
cmp
lods
in
sbb
xchg
(bad)
mov
or
mov
sub
xchg
nop
stc
out
cmp
add
dec
stos
cmps
test
movs
cmp
clc
add
pop
test
movs
and
fsubr
inc
pop
push
push
mov
cdq
shl
test
mov
aaa
call
push
lods
sbb
xor
icebp
mov
xor
repnz
test
enter
call
retf
in
shr
jmp
push
jl
je
popa
xchg
ret
iret
cmp
mov
movs
shl
clc
mov
jge
(bad)
push
sbb
sbb
or
inc
cmp
sub
mov
cmps
xchg
or
das
pop
loop
cmc
rol
xor
neg
fistp
sbb
pop
dec
out
in
pop
addr16
cmps
movs
scas
dec
push
adc
mov
push
std
jp
pop
mov
les
out
xlat
aam
in
sahf
push
sbb
or
and
push
jnp
data16
dec
loopne
xchg
xor
mov
fisub
xor
jge
jmp
or
clc
xchg
mov
rcl
pop
fmul
mov
sahf
xchg
scas
mov
sub
xor
in
mov
jl
mov
fisttp
pop
ja
xor
jecxz
rcr
into
dec
mov
mov
stos
clc
xor
mov
push
cmps
mov
push
fcmovbe
jp
sub
mov
sbb
adc
xchg
popf
or
sub
jle
data16
sti
lahf
ja
jb
lahf
ins
(bad)
bound
popf
or
mov
stos
push
jle
pop
mov
adc
(bad)
test
mov
mov
arpl
mov
jnp
pop
cmps
xchg
ins
jne
and
outs
xchg
nop
push
lea
add
adc
repz
je
lea
les
xchg
dec
jne
and
mov
test
mov
icebp
and
xchg
dec
xor
sbb
rol
jl
mov
out
adc
jle
push
jecxz
xchg
(bad)
cwde
jecxz
lds
dec
and
mov
(bad)
shl
mov
out
push
jp
iret
mov
or
fisub
push
xchg
adc
arpl
cmc
rcr
ds
popa
jecxz
sar
push
fsubr
rcr
sbb
nop
pop
add
and
jl
outs
aas
inc
je
mov
mov
mov
sub
or
mov
mov
dec
loop
fbld
add
(bad)
es
shl
repnz
mov
or
mov
lods
call
in
xchg
movs
bound
sbb
loop
call
or
add
or
push
retf
xchg
jo
mov
mov
or
(bad)
xchg
jmp
mov
and
bound
and
movs
mov
pop
or
pop
fstp
lods
nop
cld
loope
jne
sbb
xchg
inc
add
sbb
mov
test
mov
sbb
add
xchg
or
jg
or
mov
cmp
lods
test
pop
scas
iret
mov
cs
nop
loope
sahf
pop
push
test
xchg
popa
iret
ins
push
jl
pushf
sbb
pop
mov
in
mov
jbe
jg
jmp
mov
ror
sbb
mov
ins
cmc
clc
test
adc
cmp
jl
adc
in
adc
int3
ror
jns
mov
dec
mov
mov
add
mov
adc
mov
arpl
mov
int
aad
int
cmp
mov
and
cwde
jg
dec
add
and
xchg
mov
or
(bad)
mov
aam
pop
fild
sbb
mov
daa
sahf
mov
mov
cmps
daa
ds
dec
and
loopne
xchg
pop
adc
and
adc
arpl
int3
leave
or
sbb
je
xchg
mov
jnp
lea
rcr
mov
ss
ins
fdivrp
or
pop
bnd
retf
mov
mov
mov
fnstenv
xlat
in
adc
cs
mov
adc
pop
and
enter
popf
iret
cmp
cmp
mov
movs
xchg
sbb
pusha
ret
stos
sbb
lahf
sbb
movs
std
mov
rol
mov
shl
psrad
cld
out
add
xchg
cmps
jle
push
int
(bad)
loopne
jns
jge
inc
mov
sar
jo
mov
stos
mov
mov
jge
mov
(bad)
hlt
mov
xor
jne
xchg
or
push
sbb
pop
pop
push
xchg
pushf
xchg
data16
jbe
mov
xchg
inc
out
mov
repz
daa
mov
pop
scas
push
jmp
pop
lea
sbb
into
cmp
jmp
cmp
push
push
leave
shr
enter
int3
(bad)
xchg
arpl
int3
movs
shr
(bad)
mov
mov
movs
arpl
and
fnstsw
mov
lods
mov
mov
movs
sbb
mov
push
mov
adc
mov
or
sahf
sbb
pop
lods
scas
nop
push
xchg
xor
inc
shl
into
mov
jmp
pop
jne
(bad)
xchg
(bad)
sbb
rol
mov
jl
(bad)
(bad)
jmp
push
xchg
(bad)
push
jg
jb
adc
not
mov
mov
jl
mov
ret
fcmovne
pop
mov
inc
movs
and
imul
xchg
mov
jo
cmp
sub
test
dec
push
mov
xchg
pop
and
adc
jbe
xor
ins
push
stos
jle
mov
or
fcomp
xchg
push
xchg
jge
ins
inc
push
sub
xor
call
xchg
movs
xor
sub
fstp
test
leave
mov
pushf
retf
jecxz
mov
mov
cs
sbb
lods
les
sbb
xlat
mov
xchg
jp
rol
stos
jnp
addr16
fcom
cmp
push
dec
scas
sbb
jecxz
call
sbb
(bad)
lock
das
lods
hlt
jne
mov
or
xlat
pop
rol
mov
xor
pop
arpl
pushf
(bad)
sti
or
test
pop
jmp
pusha
sbb
stos
sar
lahf
xlat
(bad)
mov
movs
retf
pop
and
rol
movs
mov
sub
xlat
stos
mov
movs
lahf
pop
xor
movs
pop
xor
mov
cmp
jae
mov
jmp
fs
fsub
pushf
push
test
clc
ds
xchg
inc
iret
leave
lods
aas
cmps
mov
sub
mov
or
mov
pop
clc
pop
test
mov
cwde
mov
xchg
ror
lods
mov
les
adc
and
or
xchg
cmp
xchg
sahf
repnz
sub
mov
test
inc
jmp
repnz
pop
popa
fsubr
pop
sbb
push
mov
mov
out
add
mov
jns
cmps
xor
in
lods
xchg
and
adc
in
lahf
inc
xchg
shl
stos
mov
xchg
and
inc
xchg
sbb
xchg
ins
xchg
mov
not
(bad)
sahf
ss
mov
xchg
(bad)
pop
xchg
bound
mov
stos
pop
push
fld
outs
ret
in
pop
mov
adc
(bad)
or
push
xchg
jmp
je
loop
movs
mov
cmp
(bad)
lods
fwait
pop
xchg
out
dec
or
add
cwde
out
cmp
adc
nop
or
mov
and
mov
jg
and
xchg
cdq
cli
mov
xchg
sahf
pop
xchg
in
nop
mov
and
in
stos
lods
(bad)
frstor
fimul
xor
in
jns
pop
(bad)
call
(bad)
sbb
jl
addr16
cmp
xor
jl
xor
cmps
in
and
inc
cld
mov
mov
cmps
ins
adc
fs
mov
out
add
lods
adc
iret
xor
repz
push
mov
addr16
aad
mov
aam
pushf
repnz
pop
adc
in
repz
cmp
cmps
fst
push
pop
aas
push
xchg
and
ins
jl
hlt
sub
retf
xchg
fcmove
mov
out
adc
out
retf
jl
xchg
les
int3
and
shr
add
or
clc
or
push
out
retf
xor
aam
js
fstp
repnz
adc
int
call
adc
aaa
mov
jecxz
inc
adc
icebp
out
pusha
inc
cmp
arpl
movs
xchg
fdiv
fwait
sbb
jne
sbb
push
mov
cmp
or
fisub
or
jmp
mov
and
mov
jl
jl
(bad)
cmp
jmp
mov
popf
or
xchg
mov
ror
cmc
or
stc
push
cld
fnsave
(bad)
lods
ins
in
sub
lock
shl
test
pop
lahf
push
in
jge
jb
mov
and
ss
ret
jns
fdivr
repz
enter
int3
cdq
mov
movs
aam
icebp
mov
ret
mov
ret
in
aam
test
cmps
mov
inc
iret
pop
push
repz
imul
pop
cdq
fnstenv
in
fdivr
inc
pop
lods
(bad)
mov
cld
or
outs
outs
js
sub
push
mov
loopne
test
in
mov
pushf
sbb
jl
sbb
mov
cmc
xchg
adc
xor
jg
cdq
xchg
or
pop
addr16
pop
dec
cld
pop
mov
jg
sub
mov
fsubr
rcr
shl
pop
test
mov
xor
stos
cmp
mov
cdq
loop
cmp
shr
aas
leave
in
sbb
push
sub
mov
fwait
mov
outs
int3
lods
js
mov
fsub
mov
sahf
jno
dec
push
inc
cwde
jno
jecxz
mov
outs
lds
shl
dec
add
faddp
aaa
mov
fldenv
pop
int
mov
lods
jno
adc
enter
fsub
sar
stos
inc
mov
ds
xchg
fidiv
and
adc
(bad)
and
jmp
jp
pop
fnstenv
push
sub
call
jl
std
ja
add
adc
dec
adc
ins
mov
cld
aam
pop
mov
jl
pop
pushf
cmps
xchg
(bad)
mov
xor
mov
enter
adc
test
sbb
add
xor
into
pop
mov
loopne
fldcw
fadd
in
nop
in
xchg
pop
xlat
cdq
test
jo
in
repz
cdq
test
mov
or
sbb
aaa
mov
or
mov
mov
call
adc
mov
je
popf
adc
sub
in
fcmovb
xor
mov
imul
mov
in
sbb
movs
popf
imul
nop
inc
mov
fcomp
test
inc
lods
mov
xlat
bound
mov
pop
mov
sahf
(bad)
out
test
xor
mov
mov
sub
xchg
cmps
and
repz
mov
jmp
mov
xor
pop
neg
mov
mov
lock
icebp
rol
retf
add
mov
or
cwde
xor
or
and
sbb
sbb
cwde
popf
or
fst
scas
movs
dec
lods
movs
mov
clc
loop
mov
jb
xor
fcmovnbe
retf
in
mov
outs
fdivr
pop
jl
fiadd
lods
mov
popa
movs
sbb
(bad)
ss
cmp
pop
sbb
push
add
and
mov
lods
xchg
mov
push
(bad)
and
adc
ret
imul
dec
sub
gs
adc
gs
mov
sbb
sar
fadd
cld
xlat
fwait
xchg
fidiv
mov
(bad)
enter
out
(bad)
and
cmc
pushf
push
out
cld
sub
xchg
jl
je
dec
in
push
in
mul
iret
jae
imul
jo
sub
in
xchg
jl
test
cwde
fmulp
jl
cmps
jp
sbb
nop
inc
ret
stos
xchg
hlt
mov
mov
xor
fdivr
ret
add
lds
push
pop
shl
xor
sub
ret
dec
jbe
or
push
(bad)
shl
fimul
movs
jmp
cs
cmps
jl
lods
fstp
arpl
xchg
jg
xlat
dec
mov
xchg
jmp
aad
jl
adc
(bad)
or
cmps
idiv
xor
in
push
(bad)
leave
inc
std
in
arpl
out
jl
daa
push
cmps
push
and
les
outs
jmp
xchg
adc
lea
xchg
bound
sub
je
pop
cmps
mov
dec
shl
pop
sbb
cmps
cmp
pop
adc
pushf
xor
and
sub
inc
out
mov
mov
lea
pop
adc
test
fdiv
xchg
mov
jle
push
dec
mov
jmp
std
mov
sahf
pop
push
jg
outs
popf
mov
xchg
mov
ret
jp
sbb
test
jmp
jl
loop
push
mov
scas
pop
loope
(bad)
aaa
je
push
dec
mov
adc
lock
xchg
mov
lods
in
aad
js
daa
or
out
arpl
shl
jns
dec
call
int
sbb
mov
pop
xlat
mov
retf
les
ins
nop
jne
dec
sahf
lods
jge
jmp
ret
sbb
pop
es
dec
add
xchg
xchg
pop
push
in
mov
(bad)
push
mov
shl
mov
cwde
cld
mov
call
pop
in
es
mov
pop
mov
xchg
mov
popf
adc
std
fwait
or
xchg
(bad)
xchg
in
cmps
fwait
lods
mov
retf
loopne
aam
push
sbb
fsubr
mov
mov
je
fwait
scas
sbb
ss
movs
hlt
cld
in
and
pushf
sub
sbb
and
xlat
mov
ret
inc
std
jne
daa
movs
int
and
mov
or
cmp
es
sti
xchg
mov
cli
mov
inc
out
adc
sahf
outs
jp
mov
pop
or
push
out
cli
fwait
in
sbb
mov
loope
adc
imul
mul
xchg
das
jl
inc
mov
and
mov
sbb
aam
pop
outs
mov
xchg
arpl
sbb
out
call
fnsave
rol
adc
jg
xor
sbb
js
out
and
aam
loope
sub
ins
mov
shr
mov
cmps
cmp
popa
lock
add
sub
in
cmp
adc
cmp
push
(bad)
stos
dec
adc
inc
(bad)
mov
mov
inc
les
rol
clc
int3
xlat
mov
pop
push
mov
sti
out
popa
sahf
call
add
inc
jl
stc
mov
fs
movs
int
(bad)
xchg
and
scas
aaa
fwait
hlt
mov
and
sub
push
ja
xor
inc
(bad)
and
dec
mov
ja
sub
aam
inc
jnp
mov
jl
std
repz
imul
cld
ss
mov
or
call
int
jb
sbb
shl
inc
mov
int
mov
and
aad
test
push
cmps
mov
enter
fdiv
jge
(bad)
cmps
cmp
xor
pop
mov
and
out
fild
mov
(bad)
mov
mov
div
ss
stos
pop
cmp
call
fcmovu
loopne
call
sub
es
call
sahf
dec
call
mov
sbb
sub
adc
cmps
out
dec
jl
mov
mov
out
cmps
add
pushf
xchg
mov
fs
xchg
outs
inc
aam
and
ds
or
test
loopne
dec
jge
xchg
pop
lods
mov
mov
fcomp
xlat
shl
ficomp
pop
imul
stos
inc
push
pushf
mov
add
mov
pushf
je
test
je
dec
jmp
jg
je
not
outs
out
je
shr
adc
lahf
pop
addr16
fmul
shr
aad
xchg
(bad)
loopne
mov
pop
rcl
call
cmp
fst
mov
cld
jmp
pushf
test
mov
aas
push
mov
mov
pop
and
jge
dec
or
dec
cmp
sub
(bad)
adc
mov
leave
fcom
jb
mov
and
xchg
dec
mov
jg
jl
add
pop
mov
sub
rcr
sbb
(bad)
repnz
inc
mov
daa
loope
stos
(bad)
aam
shl
push
jmp
les
int3
sbb
or
cmps
fnstcw
repnz
fistp
cmps
lahf
inc
pop
nop
shl
pop
push
stos
shl
jg
test
or
mov
scas
jb
aam
jl
inc
xor
pop
stos
pop
mov
mov
mov
sub
pop
mov
dec
pop
ror
mov
stos
inc
mov
not
scas
jge
inc
lods
adc
loop
(bad)
add
adc
inc
mov
test
push
push
pusha
cmps
movs
outs
mov
stos
sub
push
js
jg
mul
mov
stos
bound
inc
mov
shr
sbb
movs
rcl
or
pop
sbb
(bad)
and
mov
cvtdq2ps
lods
scas
jg
movs
scas
cwde
and
aam
cmps
xchg
aaa
in
test
mov
or
mov
jl
cmp
cmp
jbe
inc
mov
fsub
aas
mov
fadd
imul
jb
mov
mov
aad
jne
or
mov
sti
xor
(bad)
test
xchg
jns
push
jp
pop
push
adc
test
scas
mov
push
dec
xchg
rol
in
lods
mov
jmp
push
lods
push
cdq
(bad)
scas
repz
(bad)
in
in
shld
stos
sbb
mov
xor
lea
xchg
call
fdiv
jmp
push
dec
or
jbe
or
jae
fidiv
pop
(bad)
mov
xchg
sbb
push
sbb
cmp
adc
adc
xchg
xchg
leave
and
sti
out
xor
xchg
int
mov
push
mov
xchg
inc
mov
bound
movs
in
lds
adc
cmp
sahf
pop
pop
mov
out
jl
repz
adc
xchg
cwde
out
push
mov
adc
fld
cli
fnstsw
into
int
mov
mov
in
lods
adc
adc
and
aad
xor
rcl
out
inc
jo
inc
loope
jo
test
adc
out
ret
xor
jmp
ficomp
cmp
aas
jns
cmps
xchg
cmp
fldenv
cs
jecxz
xchg
sub
pop
ficom
retf
aaa
pop
cmp
sbb
lods
cmp
and
sub
and
mov
rol
aas
jl
cmp
loop
fwait
push
rcl
add
in
fnstcw
in
shl
aam
les
js
pushf
xor
movs
xchg
pushf
jnp
call
icebp
mov
ret
and
cmps
dec
ins
xlat
or
fwait
cmp
sbb
xchg
and
sbb
cwde
or
cmps
jbe
push
loopne
mov
je
mov
sbb
mov
in
add
xlat
sbb
adc
fs
mov
and
call
imul
xchg
jg
jmp
cs
data16
shr
sbb
mov
dec
ins
(bad)
scas
nop
adc
shl
rol
sbb
adc
pop
call
pop
xchg
test
cmp
ficom
push
add
fwait
xchg
test
and
mov
cmps
mov
stos
xor
dec
add
mov
test
adc
int
pop
or
xlat
push
out
jecxz
sahf
mov
scas
mov
fistp
pop
cmp
inc
add
adc
jle
popf
mov
out
push
rcr
push
jns
popa
iret
in
push
mov
xchg
repnz
or
outs
fcomp
sub
xchg
pop
sbb
lods
stos
jl
cmp
scas
and
or
shl
in
dec
(bad)
xchg
add
inc
xchg
mov
mov
xchg
cmps
mov
ffree
lahf
add
mov
into
adc
test
pushf
movs
fwait
jl
jp
vsubps
gs
lods
lock
gs
outs
aaa
jle
ins
lahf
pop
mov
hlt
sub
fwait
jp
lock
push
mov
test
popf
loop
mov
mov
test
outs
jle
sti
ret
pop
inc
inc
mov
push
movs
sar
in
das
lahf
pop
sbb
lods
cwde
mov
out
mov
and
out
retfw
inc
in
jmp
cdq
xchg
imul
mov
daa
cwde
push
fs
xchg
jae
fidivr
ret
fld
test
je
lods
fucomip
jb
scas
test
mov
call
mov
cmp
jge
sbb
shl
popf
adc
mov
push
or
cmps
je
std
cmp
add
mov
lds
addr16
data16
push
sub
repz
and
adc
movs
shr
out
mov
adc
inc
(bad)
scas
les
ins
fwait
ret
mov
in
mov
push
inc
js
xchg
cmp
in
push
out
cmps
loopne
in
mov
sbb
repz
mov
es
popf
jl
dec
cmps
sbb
xor
pop
cmps
mov
cmp
sbb
xor
sbb
nop
daa
mov
test
push
inc
mov
pop
cmps
or
call
stos
fst
movs
addr16
cdq
imul
ss
sub
icebp
push
(bad)
fadd
stos
sbb
sbb
xor
pop
xor
or
sub
sbb
loope
mov
(bad)
mov
mul
loope
test
in
test
outs
loop
sub
jmp
inc
cdq
and
inc
mov
ins
fmul
fmul
push
and
sbb
retf
inc
inc
aam
sub
inc
retf
push
ja
ss
data16
add
fdiv
cmp
mov
sbb
pop
fnstcw
mov
test
add
mov
dec
cmp
jmp
sar
or
mov
xor
scas
repnz
pusha
mov
mov
rcl
stos
mov
adc
and
push
and
xchg
imul
stos
xor
retf
pop
dec
imul
sbb
int
test
in
dec
xchg
aad
xchg
push
adc
jle
add
mov
fsubr
icebp
jae
je
jge
fcom
clc
pop
mov
lds
jmp
sahf
lods
ins
popf
or
xchg
mov
mov
fwait
sahf
(bad)
pop
push
mov
ds
mov
xchg
cld
int3
cs
dec
pop
xor
xor
pushf
dec
jns
and
pop
sbb
mov
mov
mov
mov
test
cmp
iret
pop
xchg
aam
push
jl
mov
xchg
das
lods
inc
test
jns
jae
add
shl
repnz
imul
xchg
stos
rol
lahf
fs
xchg
dec
outs
push
popf
aaa
sub
push
in
push
cld
lds
add
cmp
sub
ja
cmp
push
enter
ror
jp
sub
std
sbb
dec
leave
cwde
sbb
jg
ret
lea
pop
shr
adc
aam
inc
out
add
inc
xchg
fimul
cmp
pop
pop
or
sub
call
mov
mov
cmps
imul
inc
and
xchg
jge
lock
or
cwde
sbb
xchg
cmps
std
cwde
mov
xchg
mov
adc
dec
add
jle
mov
cmp
sahf
aam
in
hlt
sbb
add
xchg
or
fmul
inc
outs
push
test
shr
aad
jbe
add
movs
xlat
pop
into
mov
das
mov
cmc
rol
into
pop
dec
sbb
sbb
cmp
pop
ret
(bad)
pop
pop
inc
test
ret
aaa
stos
adc
movs
hlt
xchg
mov
cmps
in
adc
mov
and
aaa
jno
aaa
dec
sub
cdq
retf
dec
cwde
call
call
cli
and
xlat
pop
movs
mov
pop
cdq
xor
mov
movs
xor
cdq
fstp
inc
push
cmp
cmp
je
jge
cdq
pop
lods
xchg
cdq
xor
pop
(bad)
mov
pop
mov
ret
test
sbb
fcomp
bound
add
out
or
adc
call
sbb
les
rcr
mov
add
fstp
cld
test
sahf
movs
or
(bad)
ss
test
mov
sbb
pop
mov
mov
sub
mov
loope
xchg
aad
pusha
add
xchg
dec
xchg
sub
icebp
inc
xor
(bad)
fsubr
ins
push
out
mov
sbb
pushf
push
test
xchg
jmp
loopne
dec
adc
sti
int3
cwde
or
stc
loope
imul
into
aas
adc
iret
xor
or
hlt
or
mov
pmulhrsw
mov
pushf
or
pop
fcomp
mov
mov
jg
dec
sub
int
or
pop
(bad)
movs
adc
fs
in
int
dec
int
pushf
cmp
mov
inc
and
jg
loopne
pop
add
mov
jp
fwait
in
in
icebp
mov
sti
mov
mov
adc
mov
out
pop
sub
test
add
xchg
or
leave
cmp
sbb
(bad)
pushf
xor
out
mov
jg
inc
mov
sahf
mov
adc
ficomp
jl
das
sub
jmp
jle
mov
lods
jl
das
xor
sub
mov
pop
sub
xor
sbb
les
or
xor
mov
xchg
pop
je
dec
add
sub
shl
sbb
add
repz
mov
sbb
movs
cmps
scas
dec
shr
fisttp
int3
js
ins
sub
dec
sub
mov
add
out
aad
int3
inc
push
or
xchg
xor
fs
popa
dec
pop
jo
push
stos
jg
or
movs
xor
adc
repnz
int
fst
or
cwde
cmp
and
sar
nop
xor
inc
cmp
pop
add
xor
stos
xchg
xlat
imul
push
dec
cmp
(bad)
adc
jl
cwde
mov
jmp
inc
outs
out
pop
in
adc
add
xchg
sti
mov
adc
push
inc
push
test
in
lds
jge
lahf
xor
cmp
into
or
push
jecxz
and
mov
dec
mov
push
cdq
inc
out
mov
push
pop
sti
add
repz
push
ror
or
push
in
push
mov
ss
fsub
xchg
int
or
pop
mov
rol
mov
and
xchg
adc
jo
adc
mov
repnz
or
imul
addr16
fmul
sbb
jg
dec
jno
in
in
scas
mov
sub
xor
adc
in
cmp
mov
aam
cmp
int
push
sub
sbb
rol
add
lahf
mov
pop
or
or
sbb
jbe
mov
aas
and
sbb
inc
xor
cwde
into
leave
popf
and
in
lds
cmps
adc
push
mov
sbb
sub
fs
in
xor
scas
loop
out
mov
test
mov
test
(bad)
stos
nop
nop
lahf
cmps
or
ins
sti
inc
stos
mov
or
xor
jmp
(bad)
pop
and
mov
pop
inc
aam
mov
rol
int
call
cmp
lods
int
shr
ret
loope
add
fnstenv
cmp
cmp
je
sbb
clc
push
push
adc
and
sahf
jo
mov
xor
mov
and
jmp
sbb
shr
lods
jl
(bad)
sub
lods
cmp
out
aam
test
je
stos
and
and
dec
inc
leave
test
scas
out
lahf
push
ret
imul
cmp
xlat
add
and
mov
cmp
adc
jle
mov
or
stos
retf
ds
js
loop
pushf
dec
add
adc
in
repz
stos
push
mov
xor
xchg
mov
sub
cmps
or
out
cmp
out
(bad)
ds
mov
push
repnz
fadd
or
and
cwde
push
push
xchg
jge
jnp
movs
xchg
and
or
dec
(bad)
stos
repnz
xchg
add
movs
out
sub
out
pop
pop
jg
lahf
mov
cld
rcr
adc
sbb
sbb
xchg
popf
push
fs
std
retf
jmp
nop
jl
(bad)
inc
je
sub
iret
in
sar
dec
fdivrp
or
loopne
(bad)
adc
xor
sub
cmp
jmp
call
jge
pop
mov
xchg
inc
mov
sub
cs
mov
pop
sub
add
pop
pop
test
mov
push
repnz
hlt
es
or
xchg
xchg
jg
jl
fidivr
push
enter
es
sti
mov
rep
movs
imul
sbb
jge
mov
jp
aas
int3
push
adc
in
test
rcl
pusha
inc
mov
out
mov
dec
mov
adc
out
dec
mov
xlat
cld
mov
or
test
xchg
sub
jnp
call
jp
and
lahf
je
lahf
or
sbb
pop
stos
cmps
or
xchg
mov
ins
push
mov
and
cld
loop
aam
sbb
xchg
fst
mov
data16
repnz
mov
jne
pop
jecxz
inc
xacquire
and
repnz
ret
mov
inc
dec
call
jb
add
sub
test
fisub
or
push
loop
lods
inc
ins
jne
add
lock
xor
jg
dec
cld
mov
neg
test
fcomp
(bad)
in
mov
rcl
loope
cmp
pushf
mov
jno
jns
mov
(bad)
sub
retf
daa
movs
and
cwde
mov
push
in
rcr
pop
retf
adc
cdq
jg
imul
movs
mov
inc
push
fst
es
mov
not
jo
in
jl
cli
mov
dec
push
jl
sub
rcl
fsub
scas
fisttp
mov
call
and
das
mov
into
jecxz
lahf
fcmovu
call
ret
jnp
lods
and
mov
mov
xor
gs
add
push
and
in
adc
mov
in
xor
popf
mov
inc
pop
cmps
lahf
mov
inc
stos
fadd
mov
jae
jle
mov
scas
or
push
dec
sub
js
scas
add
repnz
dec
mov
inc
imul
jmp
daa
inc
and
pushf
movs
aam
adc
dec
and
movs
mov
and
pushf
mov
outs
or
loope
sbb
and
mov
out
ins
mov
and
std
sbb
or
mov
mov
mov
ror
mov
lahf
adc
daa
mov
inc
call
xchg
pusha
push
inc
ret
aam
(bad)
loop
xchg
xor
jl
lods
call
cs
adc
aam
stos
into
sahf
mov
call
pusha
push
push
aaa
mov
jne
dec
mov
inc
mov
aam
xlat
mov
in
jnp
adc
aas
push
pop
cmp
mov
in
mov
in
shl
mov
mov
xlat
fadd
mov
outs
lds
lahf
lahf
push
mov
std
cli
or
or
fsub
lds
mov
jmp
pop
push
repnz
push
leave
loopne
in
or
fisubr
and
movs
in
xchg
mov
scas
repnz
pushf
(bad)
loope
xor
xchg
data16
mov
adc
jmp
lock
fild
retf
push
clc
mov
mov
mov
test
pushf
cmp
std
icebp
ret
in
std
push
arpl
aad
in
pushf
lods
ficomp
push
cwde
mov
push
scas
and
fild
cs
add
cmps
jecxz
push
pop
sub
sub
xor
aas
loopne
out
adc
xchg
jbe
mov
movs
xor
scas
gs
data16
or
mov
int
push
fcomip
xchg
adc
jne
aam
test
out
rol
stos
(bad)
mov
stos
cmp
dec
scas
hlt
mov
sub
xor
jo
sbb
std
ss
retf
mov
mov
js
push
xchg
mov
and
push
mov
je
gs
cdq
xlat
in
aas
imul
pop
xchg
fdivr
xor
pop
lds
cwde
mov
ret
shr
aam
mov
pop
or
push
jmp
adc
call
push
nop
mov
das
push
sbb
ds
cmps
mov
mov
ror
dec
cmps
stos
mov
shr
mov
int
xchg
mov
in
dec
jo
into
xchg
lock
je
arpl
push
mov
fnstsw
ins
enter
je
mov
sahf
mov
xchg
ins
daa
dec
sti
inc
imul
outs
adc
loopne
or
shl
lods
and
stos
out
fwait
je
or
aas
jp
mov
movs
fstp
push
pusha
pop
fidiv
xor
pop
loop
test
sbb
shr
inc
mov
outs
jge
frstor
adc
mov
push
xchg
mov
mov
cmps
push
inc
cmps
cmps
dec
mov
mov
scas
adc
cmps
lahf
pop
pop
in
add
jge
and
fcom
pop
pop
mov
jno
sbb
fldcw
cmp
in
xlat
pop
out
scas
jbe
stos
loopne
fcom
shr
or
and
in
push
fldcw
shl
mov
stc
sbb
cmc
movs
sbb
adc
fst
cmps
mov
in
stos
sti
mov
iret
adc
pop
jge
or
test
test
xchg
pop
mov
test
sbb
lock
les
cld
mov
xor
imul
inc
cmc
jg
or
in
cmp
sbb
cmps
fistp
or
adc
inc
test
sbb
and
dec
retf
in
dec
mov
addr16
call
leave
xchg
ins
aaa
and
aad
cdq
add
call
fs
test
es
aad
scas
shl
push
push
movs
aaa
xor
das
lds
rep
xlat
enter
mov
cmps
sahf
xchg
imul
mov
shl
pop
es
adc
pushf
inc
jae
les
and
outs
repz
lods
xor
mov
xchg
push
lods
lahf
inc
inc
les
push
xchg
push
mov
adc
out
mov
xchg
dec
data16
hlt
cmps
int
fwait
and
popa
xchg
push
inc
inc
ss
out
movs
and
lods
jb
and
mov
sub
cmps
add
sbb
xor
js
sbb
inc
adc
add
(bad)
(bad)
popf
adc
sub
mov
adc
dec
pop
and
repz
dec
ins
cmp
imul
mov
xchg
mov
aam
sub
cli
int3
movs
ficomp
pushf
xor
mov
xchg
repnz
jb
cmp
adc
cmc
jle
sbb
jp
xor
je
xchg
movs
int
and
xchg
mov
push
lods
cmps
or
xchg
add
fwait
loop
xchg
lahf
xor
(bad)
lods
ins
push
rcl
push
mov
xchg
push
mov
add
je
fidivr
es
rcl
push
mov
mov
inc
(bad)
jl
test
jg
mov
cmc
xchg
in
xchg
inc
clc
fist
lock
xor
popf
lahf
xchg
sub
cld
sbb
and
mov
lahf
xchg
mov
out
fdiv
fsubr
clc
cld
pushf
mov
push
push
pop
pop
pushf
mov
mov
lods
cmps
mov
mov
mov
test
(bad)
call
adc
sahf
lahf
mov
movs
movs
cmps
cmps
test
xchg
stos
stos
lods
lods
scas
scas
mov
xchg
mov
mov
mov
mov
mov
rcl
enter
retf
int3
int
iret
rcl
xchg
rcl
aam
(bad)
xlat
fcomp
xchg
fcmovu
(bad)
(bad)
loopne
xchg
loop
in
out
call
in
out
xchg
out
lock
repnz
cmc
not
cld
std
(bad)
xchg
inc
add
add
or
or
adc
adc
add
add
fsubp
mov
mov
sub
mov
mov
(bad)
mov
xchg
inc
data16
dec
shl
mov
pushf
out
or
cmc
xchg
or
aad
mov
push
or
std
add
mov
push
rol
or
mov
loopne
out
cmps
and
add
fnsave
jecxz
loope
mov
out
les
popf
scas
fwait
aad
mov
add
add
imul
inc
add
jno
xor
mov
add
or
scas
adc
(bad)
movs
cld
ret
mov
jae
repnz
inc
imul
sahf
in
or
int3
outs
mov
(bad)
stos
repnz
dec
repnz
in
add
cli
push
outs
setl
stos
imul
and
sbb
or
mov
aaa
cli
sbb
pop
add
inc
jl
(bad)
cmp
adc
push
sub
push
shr
or
stc
mov
and
jle
repz
sahf
call
and
mov
js
add
inc
aaa
ret
cld
jp
xor
adc
(bad)
stc
fs
arpl
push
xchg
scas
mov
ds
add
sub
shl
sar
xor
mov
cmp
cmp
sar
fxch
retf
call
cmc
std
clc
nop
mov
(bad)
cmps
xlat
add
(bad)
stc
sahf
popf
xor
cwde
retf
loop
scas
ret
fistp
les
(bad)
nop
es
cmc
push
out
mov
dec
or
ret
(bad)
xor
xor
mov
mov
int3
mov
sub
push
cmp
pop
pop
push
cld
xor
inc
jbe
retf
dec
js
or
dec
sbb
int
dec
sahf
jmp
int3
push
leave
test
or
mov
leave
fmul
xor
mov
repz
in
or
ret
xor
fwait
push
jno
ja
hlt
(bad)
mov
mov
push
mov
sbb
out
pop
int3
popa
and
push
cmp
scas
cmp
cbw
mov
or
cld
push
mov
mov
(bad)
out
lods
and
jo
dec
or
mov
fiadd
inc
jnp
out
jns
pop
sub
xor
mov
enter
mov
or
xchg
pop
test
(bad)
(bad)
mov
dec
jmp
int3
and
mov
cmp
mov
(bad)
stos
cli
fistp
movs
inc
add
adc
sub
leave
clc
ins
push
sub
dec
lods
cli
shr
sub
xlat
mov
loopne
mov
ret
rol
pop
sti
cmp
xlat
in
ss
add
jne
(bad)
fldenv
in
mov
add
jmp
pop
add
(bad)
and
mov
mov
es
bound
cdq
daa
jmp
call
(bad)
cmp
mov
push
sahf
add
push
push
push
xchg
cdq
adc
xor
xor
cwde
mov
sbb
and
pop
and
daa
jl
xchg
test
fs
int3
fdiv
gs
adc
xchg
mov
clc
xchg
ret
rcr
and
xchg
out
xchg
pop
retf
ficom
xchg
pop
xchg
xchg
mov
test
mov
loop
mov
xchg
cmp
xor
push
adc
xchg
push
pop
sbb
sbb
sbb
xchg
push
pop
and
and
and
xchg
es
sub
sub
sub
xchg
cs
xor
xor
xor
xchg
ss
cmp
cmp
cmp
xchg
ds
inc
inc
inc
inc
inc
inc
xchg
inc
inc
dec
dec
dec
dec
dec
dec
xchg
dec
dec
push
push
push
push
push
push
xchg
push
push
pop
pop
pop
pop
pop
pop
xchg
pop
pop
pusha
popa
bound
gs
addr16
imul
outs
jo
jb
je
xchg
jbe
js
jp
jl
xchg
jle
add
xchg
mov
xchg
xchg
xchg
call
xchg
(bad)
jns
sub
jecxz
jl
push
fsub
into
add
jnp
cmp
fabs
push
popf
or
ret
pop
mov
call
aad
inc
mov
mov
test
pop
jecxz
retf
out
mov
or
out
add
jmp
aad
push
std
add
cld
sbb
stc
or
push
ficom
inc
lahf
gs
hlt
movs
in
call
lods
fadd
aam
aad
push
fsub
outs
adc
ss
sahf
(bad)
call
test
stc
xchg
or
in
out
loope
xor
rcl
int3
pushf
les
(bad)
push
pop
or
xchg
test
pop
sub
fld
test
shl
pop
xchg
pcmpgtd
xor
in
adc
or
test
movs
cmps
fcomi
push
cmp
sti
xchg
outs
or
clc
jmp
mov
fsub
jbe
mov
jmp
out
loop
loopne
inc
inc
push
mov
inc
pop
inc
fdivr
cmp
das
fcomp
push
sahf
dec
add
add
(bad)
push
mov
fmul
ret
cmp
mov
xchg
call
clc
hlt
inc
arpl
mov
mov
(bad)
das
or
hlt
ja
add
mov
mov
outs
or
adc
fild
hlt
mov
and
jne
or
repz
jg
imul
jbe
mov
hlt
jb
jge
push
jle
jmp
out
mov
cmp
mov
cli
pop
add
jae
cwde
scas
out
icebp
in
sbb
dec
mov
and
lock
mov
pop
retf
pop
cmp
mov
outs
add
out
jo
or
dec
mov
(bad)
mov
mov
fcomp
leave
add
hlt
push
mov
and
ret
ins
jp
inc
rol
aad
retf
cmp
sub
sar
jne
mov
xor
nop
sub
cmp
in
mov
pop
call
sub
stc
cli
cmc
ins
aaa
cmp
aam
push
mov
jp
lods
cmp
sub
pop
lods
xchg
and
fmul
cmp
cli
mov
clc
adc
sahf
rcr
pushf
mov
rcr
mov
frstor
clc
popf
adc
mov
dec
sti
pushf
movs
fnop
mov
fadd
ror
mov
mov
scas
jmp
fidivr
cmp
mov
rcr
cwde
and
fsub
mov
ins
push
jbe
(bad)
mov
lods
push
fsubr
add
retf
movs
ins
xchg
xchg
(bad)
mov
and
js
scas
lods
sbb
test
dec
adc
mov
mov
fs
pop
sbb
xor
sub
or
clc
(bad)
aad
mov
cld
cmps
loopne
add
cli
clc
popf
and
cli
hlt
movs
lock
xchg
cmps
call
and
int3
enter
sar
mov
fsubr
mov
fcom
mov
jl
js
je
jo
sbb
pusha
fcomp
mov
fadd
sbb
or
hlt
and
movs
je
xchg
push
mov
lock
fsubr
pop
and
fdivr
sbb
cld
(bad)
and
mov
fdivr
sbb
clc
cmps
aam
test
jl
adc
sbb
movs
fdivr
add
outs
add
add
cwde
fst
les
int3
fwait
hlt
fwait
pushf
xchg
retf
les
jmp
sbb
stos
jle
push
cld
ins
xchg
cmps
or
jns
xchg
sbb
rcl
mov
int3
int3
call
das
push
xchg
movs
addr16
xchg
xchg
test
cmp
(bad)
mov
fcomp
and
mov
(bad)
pop
add
jo
dec
xchg
inc
add
mov
adc
jne
int3
pop
loop
push
sbb
loop
sub
int3
jg
cmps
xchg
lea
call
pop
mov
mov
xlat
xor
jmp
inc
inc
leave
cdq
cmp
fbld
cmp
sub
mov
shr
or
push
call
test
aam
int3
(bad)
cld
lods
loope
scas
(bad)
xlat
les
es
rol
les
mov
stos
jae
int3
pop
mov
mov
stos
das
mov
adc
adc
sub
int3
pushf
(bad)
xchg
fsubr
fcom
xchg
xchg
sbb
jmp
into
xchg
add
shl
mov
adc
sbb
shl
imul
neg
or
push
xlat
mov
(bad)
lods
retf
dec
cmp
aaa
push
movs
mov
test
test
sub
sbb
les
lds
fistp
mov
push
ins
mov
clc
loop
ss
xchg
arpl
pop
cmps
mov
enter
push
jne
push
inc
cmc
inc
lods
fcmovnu
call
fcomp
push
push
in
in
mul
stos
jecxz
or
mov
xchg
jg
mov
adc
addr16
out
test
sbb
and
mov
imul
shl
inc
jecxz
pop
fiadd
movs
push
mov
out
or
dec
cmp
lea
out
cmps
sar
push
or
idiv
les
ret
enter
add
xchg
jecxz
inc
mov
add
loop
(bad)
out
loope
add
or
fs
push
cdq
mov
inc
sub
test
mov
add
mov
mov
pusha
cmp
mov
mul
int3
test
xor
retf
imul
mov
popf
lock
ror
jmp
shl
in
xlat
inc
arpl
mov
fcom
es
cmc
outs
adc
and
cmp
lods
aam
les
call
pop
imul
xchg
push
gs
mov
xchg
scas
pop
cmp
xor
jnp
les
mov
gs
loopne
mov
(bad)
repz
sub
xchg
xchg
int
cld
repnz
shr
retf
or
adc
mov
xchg
in
loopne
je
int
or
and
pop
out
dec
push
adc
mov
or
dec
(bad)
loopne
icebp
or
ret
neg
gs
rcl
mov
ins
xchg
mov
add
mov
jmp
aad
push
mov
lods
add
mov
inc
mov
pop
cmp
in
or
into
cmp
pop
(bad)
(bad)
call
stos
mov
clc
popf
cmp
clc
(bad)
(bad)
movs
js
movs
aam
movs
test
cdq
cwde
adc
mov
and
sahf
and
js
or
out
inc
push
adc
xchg
jl
jne
sub
or
xchg
add
pop
in
iret
or
fst
mov
cmp
adc
fsubr
into
jecxz
add
dec
daa
add
xchg
in
push
mov
pushf
in
(bad)
imul
int3
stos
std
pop
pusha
ja
xchg
cmp
jg
push
and
push
test
push
movs
fist
fdivrp
es
loop
mov
jecxz
adc
or
push
cmp
pushf
dec
mov
bound
or
repz
xchg
dec
adc
inc
test
rcl
mov
es
jmp
xchg
movs
rcr
xor
out
in
sbb
idiv
repz
adc
mov
stos
(bad)
mov
call
cmc
mov
adc
push
jmp
loopne
js
out
pop
aad
mov
jb
call
and
(bad)
and
out
push
xor
test
ret
push
jmp
or
mov
cwde
adc
push
push
cmc
dec
movs
or
aaa
mov
xchg
add
aam
pushf
enter
mov
mov
xchg
loopne
mov
pop
popf
shl
inc
xchg
int3
shl
cld
push
in
div
test
(bad)
xlat
xchg
and
mov
and
cmp
dec
and
sar
fidivr
lea
jne
pop
js
adc
(bad)
shl
and
mov
mov
rcl
mov
pop
movs
cmp
lods
jl
jns
add
rcl
mov
sub
popf
lock
rcr
(bad)
jmp
je
call
pushf
repnz
clc
arpl
fdivr
add
and
xchg
fdivr
test
xor
adc
mov
enter
adc
mov
test
enter
sbb
shl
int3
fsub
movs
out
shl
xchg
test
push
sti
cmp
loop
mov
adc
pop
arpl
or
and
xor
mov
jecxz
push
lds
mov
adc
aas
push
push
add
mov
push
test
mov
pop
add
adc
or
je
loope
push
adc
sbb
push
out
mov
test
jmp
test
sub
and
mov
inc
scas
or
sbb
aas
mov
push
jge
mov
xchg
push
xchg
mov
push
fidiv
mov
mov
push
mov
mov
mov
pop
mov
mov
movs
shl
pop
jp
in
adc
mov
inc
movs
mov
das
movs
out
xlat
mov
adc
pushf
int3
mov
(bad)
xor
(bad)
xchg
adc
push
xchg
adc
lods
add
jbe
xchg
outs
(bad)
cs
fiadd
repnz
and
xchg
or
cmp
js
pop
popf
pop
and
(bad)
scas
popf
ret
fsubr
cmp
xor
jp
xchg
sbb
inc
movs
mov
cli
sbb
fadd
loop
mov
mov
pop
popf
in
js
dec
pop
sbb
adc
mov
sar
mov
add
and
ds
outs
test
inc
adc
mov
mov
fcom
sub
js
xchg
inc
movs
stos
mov
fmul
aam
out
idiv
inc
mov
fsub
sbb
xchg
mov
dec
(bad)
leave
mov
xchg
ins
inc
xor
les
mov
pop
ret
test
and
je
leave
add
xchg
jg
in
mov
xchg
mov
int3
sub
xor
xchg
mov
aad
jne
add
mov
fs
imul
shl
or
popa
in
int3
arpl
in
xchg
push
jne
jmp
sbb
xchg
push
fnsave
mov
loop
jmp
cdq
sbb
popa
pop
sbb
in
cwde
or
dec
jmp
jae
xchg
push
sti
pop
(bad)
adc
xchg
cwde
loopne
ss
mov
or
dec
and
in
mov
in
and
fldenv
xchg
jmp
mov
arpl
aam
sub
push
cld
cmp
xor
into
xchg
imul
mov
fcmove
icebp
xchg
stos
pop
and
or
mov
mov
xchg
rol
cmps
cmp
cmp
icebp
int3
sub
or
xchg
bound
addr16
rol
xchg
out
cmp
xchg
xchg
jmp
pop
lds
xor
je
xchg
adc
rcl
das
mov
xchg
or
xchg
test
mov
jae
xchg
push
cmp
jbe
jnp
icebp
pushf
shr
and
out
xchg
inc
cmp
xchg
inc
add
stc
icebp
sti
ret
xchg
repnz
(bad)
mov
push
jge
sub
xor
aaa
aad
jbe
push
inc
mov
dec
add
pop
mov
mov
dec
mov
jmp
inc
jecxz
add
adc
push
call
cdq
inc
sub
xchg
loope
aas
sbb
(bad)
hlt
mov
mov
ror
push
int
push
call
xchg
icebp
or
add
push
xor
mov
ins
xchg
add
das
mov
push
mov
cli
and
mov
dec
or
shl
adc
xchg
imul
js
and
push
jnp
or
push
adc
push
xchg
inc
sub
(bad)
repnz
cmp
aas
mov
and
dec
cmp
xchg
adc
pop
int3
xchg
not
pop
dec
mov
mov
(bad)
adc
sbb
in
xchg
mov
pushf
xchg
neg
daa
xor
dec
outs
nop
pop
xor
out
lods
mov
je
xchg
iret
neg
imul
clc
add
and
mov
ja
xchg
pop
jo
jmp
xchg
mov
sbb
jl
mov
mov
sbb
push
cmc
aad
xchg
test
dec
es
sbb
xchg
jmp
lahf
mov
hlt
mov
es
xchg
mov
iret
xor
and
push
push
jmp
imul
xchg
loop
fstp
xchg
call
mov
mov
stc
pusha
popa
or
xchg
jg
out
sub
mov
jns
scas
sbb
xchg
je
xchg
jmp
jle
jg
test
mov
data16
or
pop
pop
push
movs
xchg
(bad)
fdivr
jns
xor
aam
rcr
repnz
ins
lock
dec
push
xchg
and
test
in
(bad)
cmp
pop
adc
xchg
mov
mov
xor
in
pop
xchg
fwait
mov
repnz
int
adc
lods
imul
sbb
add
and
push
xchg
stc
push
mov
mov
movs
inc
sub
rcl
or
int3
(bad)
mov
mov
jnp
ins
cdq
rol
pop
cmc
shl
and
push
mov
xchg
xchg
mov
sar
sahf
mov
xor
xchg
das
xor
imul
lds
gs
push
call
pop
and
inc
pop
pop
mov
xchg
into
popf
ja
hlt
(bad)
mov
mov
xor
(bad)
jl
int3
call
js
les
loop
in
xchg
push
sti
xor
call
int3
jno
fwait
xchg
xor
and
mov
push
mul
adc
lods
cmp
xor
cmc
mov
adc
xchg
sub
xchg
loope
inc
cmc
sub
xchg
pop
xchg
(bad)
in
mov
add
les
or
adc
jmp
push
out
pmulhuw
mov
xchg
adc
or
dec
dec
es
xlat
cmp
ja
push
imul
xchg
scas
test
cmp
mov
mov
stos
add
test
out
dec
and
dec
or
push
xchg
popf
sbb
movs
add
adc
adc
mov
jecxz
cmp
xchg
push
fs
call
retfw
loop
mov
into
std
inc
in
and
xchg
cmp
ret
dec
cli
sbb
cmc
adc
jae
mov
adc
fld
push
xchg
aad
(bad)
in
xchg
mov
xor
sbb
mov
cwde
cli
inc
fwait
fwait
push
leave
fmul
add
adc
mov
fcom
ins
sub
retf
imul
or
jle
sub
jo
arpl
mov
bnd
pusha
aas
xor
push
cmp
mov
xchg
push
xchg
retf
movs
call
out
inc
outs
sbb
sti
mov
sub
xchg
in
mov
xchg
or
cmp
push
fmul
in
add
xchg
xchg
cli
xor
adc
cmp
cdq
pusha
nop
loopne
pop
icebp
xor
mov
nop
cmp
jecxz
jl
call
sub
clc
xchg
loopne
idiv
sub
dec
adc
xchg
leave
jmp
xor
xchg
sbb
imul
mov
xchg
mov
pop
add
xchg
xor
cwde
(bad)
(bad)
jge
int3
dec
les
jecxz
inc
mov
adc
cwde
loop
sub
add
sub
imul
fmul
mov
inc
push
and
fwait
pusha
test
hlt
vpaddsb
(bad)
loopne
pushf
nop
xchg
jns
mov
push
aam
mov
xchg
dec
inc
fwait
pusha
jle
or
iret
sub
adc
outs
ja
push
add
xchg
retf
shl
dec
loopne
xlat
hlt
cld
xor
jle
push
mov
popf
dec
jmp
xchg
or
out
popa
lods
xchg
cmp
jo
fwait
push
and
mov
outs
push
sbb
mov
repz
pop
fiadd
out
adc
stos
adc
in
out
les
fist
into
rcl
shl
rcl
sahf
and
cmps
repnz
mov
je
cs
js
pusha
in
in
mov
jl
int3
lock
mov
scas
xchg
shr
sub
out
fs
jmp
mov
sub
mov
xor
cli
fadd
sub
imul
daa
cmp
aam
xchg
repz
lock
lahf
jl
xchg
aaa
push
(bad)
push
sub
push
jnp
xchg
cmp
pop
test
pop
xchg
test
stos
cmps
xor
iret
jbe
and
icebp
int
pop
cmp
(bad)
xchg
jno
dec
inc
push
push
or
jne
push
mov
adc
add
sub
jns
push
adc
jl
fwait
mov
cs
inc
push
out
test
xchg
hlt
jno
inc
mov
ror
xchg
sbb
mov
jae
push
or
aas
xchg
mov
(bad)
mov
int
cmp
nop
mov
das
imul
add
xchg
mov
sub
push
push
mov
cmp
fwait
outs
jb
enter
xor
out
sahf
xchg
dec
sti
xchg
repnz
xchg
inc
adc
fwait
mov
xchg
(bad)
inc
repnz
sub
sub
cmp
mov
ret
cs
xlat
xchg
jl
outs
(bad)
xor
ins
xchg
mov
sbb
fbld
xchg
jmp
shl
cdq
mov
cwde
lahf
cli
nop
pop
test
lods
xchg
mov
cld
inc
je
jmp
xchg
jo
jns
cmp
xor
mov
pop
xchg
inc
cwde
(bad)
add
inc
lods
or
adc
mov
mov
cwde
mov
cmc
sbb
dec
rcl
cmp
rcr
fcom
or
mov
arpl
test
cvtps2pi
xchg
outs
jmp
push
mov
mov
xchg
mov
cli
adc
shl
push
mov
add
xchg
pop
repz
cmp
xchg
or
mov
outs
sub
bound
push
pop
xchg
clc
rol
pop
neg
or
jnp
lahf
nop
adc
pushf
fucom
cmp
cmps
ror
xor
jae
mov
div
mov
loopne
cmp
inc
outs
push
push
stos
add
clc
and
adc
or
xchg
(bad)
rol
mov
xchg
cmp
daa
pusha
leave
xchg
add
enter
fisub
popa
push
mov
in
fldenv
inc
lea
fcomp
adc
in
rcr
sbb
cmp
xchg
xchg
adc
mov
jle
jp
dec
std
jecxz
push
pusha
jb
mov
jmp
into
xchg
push
int3
aad
in
xor
xchg
jne
inc
shl
xor
imul
out
pushf
out
sbb
push
xchg
iret
scas
cmps
dec
mov
pop
sbb
pand
les
xchg
push
dec
lds
ror
adc
dec
mov
mov
xchg
xor
xlat
xrelease
push
dec
cdq
loop
xor
jmp
mov
enter
cmp
fwait
scas
pusha
or
lahf
cmp
xchg
dec
leave
aad
mov
js
xchg
test
leave
mov
add
jl
cwde
shl
dec
sbb
rcl
mov
and
and
push
test
xchg
clc
xchg
pop
in
or
push
xchg
aas
stos
out
cmps
cld
stos
and
xchg
jne
dec
and
mov
dec
xchg
repz
jmp
jmp
aam
jmp
lds
xlat
push
xchg
cwde
cld
push
pushf
xchg
stos
cmp
pop
not
mov
dec
dec
call
xlat
retf
ror
mov
jbe
in
jae
pop
mov
mov
shl
jmp
sbb
(bad)
fst
(bad)
xchg
shl
in
mov
stos
daa
pop
sbb
dec
push
inc
leave
(bad)
sahf
dec
ins
scas
adc
bound
jp
dec
cli
stc
test
sbb
popa
fmul
add
fadd
xor
sub
js
out
jnp
inc
movs
and
loope
(bad)
mov
or
scas
mov
jns
sub
add
push
fst
jle
call
xchg
inc
imul
addr16
cs
cmp
jbe
sbb
push
(bad)
sbb
enter
ds
jne
sub
bound
add
xchg
mov
push
hlt
pop
push
xchg
jmp
pop
cmp
ret
scas
jg
sbb
cs
inc
out
xchg
mov
loopne
mov
xchg
imul
call
xchg
loop
push
jle
and
int
cdq
push
or
xchg
push
sahf
cmp
inc
(bad)
pop
pop
jle
fwait
or
bound
aad
cwde
mov
push
xor
xchg
jnp
xchg
mov
xchg
mov
nop
aad
mov
jmp
aam
push
mov
jne
repz
xlat
aam
imul
enter
movs
leave
dec
xlat
mov
out
sbb
cmp
mov
cwde
fstp
xor
xchg
cwde
pushf
cmp
xchg
lods
push
or
cmp
pushf
mov
cmp
movs
aam
xlat
adc
cmp
push
aaa
outs
jns
popa
xor
cmp
and
dec
arpl
ss
scas
iret
jns
jl
out
out
cdq
and
ficomp
outs
repnz
push
repz
(bad)
sbb
ret
ins
jb
lea
inc
loopne
sbb
dec
xchg
xchg
mov
push
sahf
sbb
jmp
ret
inc
test
pop
mov
lods
(bad)
aad
popa
push
xchg
and
xchg
pushf
mov
fs
stos
popf
xchg
int
loopne
cwde
sbb
mov
mov
fsub
mov
xchg
mov
test
cmps
cmps
cs
cwde
lods
mov
leave
sub
and
in
mov
pushf
pop
jmp
stc
in
(bad)
adc
sub
mov
push
inc
pop
call
sub
pop
and
sbb
mov
fdivr
xor
and
jns
(bad)
mov
int
mov
js
xor
mov
test
movs
adc
ins
(bad)
and
aam
(bad)
mov
js
pop
(bad)
push
mov
cmps
fsubr
lods
sbb
enter
nop
fldenv
mov
sbb
mov
lods
and
mov
mov
xlat
fdiv
enter
mov
fcom
pushf
cmp
sub
cmps
adc
jb
jns
mov
mov
and
jge
lods
js
mov
les
and
lahf
inc
lods
push
fsub
out
push
pusha
fcomp
push
cmps
dec
mov
xor
sbb
add
add
hlt
lock
in
loopne
fdiv
cmp
fdiv
mov
in
test
jo
fs
popf
cwde
mov
inc
cmp
cmp
adc
ins
ret
movs
aam
jmp
popa
cmc
mov
xchg
xchg
daa
pusha
mov
add
out
inc
mov
ret
sbb
ins
sbb
in
call
fcom
xchg
lahf
movs
and
js
cwde
and
es
ror
and
mov
fmul
out
sub
fmul
push
jns
pop
popf
loop
add
enter
push
or
addr16
ret
mov
loope
add
cwde
aaa
nop
pop
loope
outs
adc
in
(bad)
pop
fnstsw
fisttp
or
sbb
stc
push
mov
mov
repz
mov
or
clc
(bad)
sub
push
movntq
fdiv
mov
xchg
cdq
mov
adc
dec
in
mov
(bad)
(bad)
mov
push
gs
and
push
aam
jmp
movs
stc
sti
or
xlat
fadd
push
inc
and
mov
ror
jmp
sub
(bad)
(bad)
fcos
repz
jbe
repz
or
stc
nop
mov
sar
aam
ds
pushf
xchg
pop
pusha
xor
popf
mov
inc
fwait
push
mov
sub
sbb
mov
es
scas
je
xchg
mov
mov
xor
in
push
and
cmp
pop
adc
or
xchg
out
fdiv
push
cmp
in
adc
inc
cmps
lds
xchg
imul
xchg
int3
call
mov
xchg
arpl
pop
xor
mul
(bad)
(bad)
cwde
inc
xchg
sbb
add
xchg
ss
loopne
xchg
std
sub
bt
pop
sub
pop
es
iret
xchg
repnz
xchg
mov
pop
inc
and
xchg
inc
push
xchg
test
out
test
sbb
mov
xor
ss
fisubr
xchg
enter
mov
pop
adc
mov
pop
les
adc
fnsave
rol
xchg
std
hlt
mov
xchg
repnz
pop
div
push
cld
shl
fwait
xchg
aam
pop
sbb
inc
les
add
xor
jmp
ins
fiadd
test
push
mov
js
nop
int
mov
pop
xchg
push
push
loopne
sbb
(bad)
sti
inc
aam
inc
gs
fwait
cmp
stos
push
or
adc
pop
and
jle
(bad)
fwait
ja
sbb
push
imul
std
arpl
ins
xlat
ss
mov
test
cdq
xchg
dec
fs
xor
xchg
stos
rcl
ins
xor
mov
cs
mov
add
adc
shr
loopne
xchg
mov
sbb
inc
xchg
fwait
mov
add
xchg
mov
adc
xchg
xor
push
mov
pop
or
aas
push
inc
adc
mov
enter
es
dec
mov
push
pop
sub
pop
(bad)
imul
sbb
xchg
(bad)
je
rol
(bad)
aas
xchg
xchg
retf
sbb
sub
adc
pusha
or
sahf
xchg
push
test
cwde
mov
(bad)
loop
inc
aam
stos
vpunpcklwd
ins
mov
outs
enter
sti
cmp
pop
pop
xchg
aaa
sahf
dec
ret
icebp
jne
xchg
jmp
int
in
popf
cli
sub
dec
xchg
ror
xchg
mov
and
leave
pop
adc
mov
scas
retf
dec
aam
and
jmp
paddusb
call
xchg
bound
inc
jb
and
push
addr16
mov
push
fwait
leave
add
test
shl
pop
cld
adc
not
inc
xor
retf
push
cmc
xor
std
xchg
and
mov
fwait
imul
inc
sub
xor
scas
int
ret
jns
xchg
jmp
xchg
mov
xchg
jle
int
add
fwait
scas
das
xchg
xor
ins
mov
mov
je
xor
aam
ja
mov
ss
inc
cmp
lds
fistp
int
cs
push
sub
sti
adc
mov
pop
outs
nop
fs
test
aam
push
lods
retf
jae
pop
push
lahf
mov
sub
xchg
jmp
loope
in
xchg
test
mov
xlat
fcom
and
dec
jge
xchg
lods
(bad)
(bad)
and
test
fisubr
in
cmp
fadd
jmp
int
not
sbb
pop
jle
int3
lock
jg
xchg
jnp
or
std
xchg
cwde
fisub
imul
je
xchg
adc
adc
or
popa
sbb
aad
mov
repz
xor
xor
push
jno
es
sbb
pop
into
inc
ds
sub
pop
jno
mov
sbb
xchg
jae
mov
clc
xchg
cmp
pop
mov
xchg
mov
xchg
(bad)
jmp
or
xchg
dec
sar
xchg
mov
inc
mov
std
jbe
adc
or
mov
push
mov
dec
xchg
jg
mov
sbb
mov
xchg
in
xor
mov
hlt
adc
inc
into
cmps
xchg
ds
and
mov
pop
call
mov
test
loopne
ret
mov
push
lods
push
mov
and
push
in
js
mov
fwait
pop
cwde
rcl
es
add
aam
loopne
or
inc
sub
shr
shl
outs
cmp
sbb
pop
xor
jl
xchg
daa
xor
push
sub
mov
mov
xor
and
int
test
push
add
inc
dec
cs
dec
or
inc
jno
push
cmp
loope
push
ins
jno
xchg
push
xchg
cmps
scas
stos
xchg
adc
es
popf
push
cdq
fstp
or
sub
add
sbb
xchg
xchg
lods
loope
sbb
jp
popf
call
jmp
repz
fist
(bad)
adc
sti
rcl
xchg
pop
hlt
push
jle
push
sbb
lods
daa
pusha
cmp
rcl
dec
fsubr
test
xchg
aam
pop
mov
xchg
fldenv
and
xchg
add
jne
xchg
mov
adc
adc
ds
iret
retf
xchg
dec
dec
(bad)
rcr
or
cmp
addr16
mov
in
aad
mov
cmps
mov
push
aaa
add
mov
ficom
adc
mov
aas
xchg
sub
sbb
loope
jp
xchg
sti
das
add
sub
xchg
popf
mov
pop
xor
cmp
dec
mov
cld
shr
xchg
loope
daa
out
adc
je
push
or
leave
and
scas
mov
mov
adc
xor
jne
or
xchg
in
push
xor
test
xchg
int
pop
xchg
jp
jne
jmp
mov
xchg
test
push
int
xchg
and
repnz
icebp
(bad)
sbb
fsub
dec
xchg
adc
pop
or
in
jecxz
mov
lahf
push
ins
ficom
adc
jbe
aas
inc
mov
cdq
or
mov
nop
xchg
sbb
sub
je
test
imul
sub
int3
ss
pop
psrlw
push
in
pop
xchg
popa
es
pusha
inc
xlat
pop
(bad)
xchg
cmp
cmp
jae
mov
xchg
xor
lea
sbb
sti
ffreep
jbe
iret
xchg
cld
mov
adc
mov
pop
call
mov
push
mov
out
stos
je
or
pop
in
push
dec
dec
fs
xchg
cmp
cmp
fbstp
push
adc
pop
scas
lea
xchg
xchg
imul
mov
shr
lea
std
dec
ret
adc
movs
(bad)
xor
imul
jecxz
call
sbb
adc
out
fisubr
push
iret
xchg
pop
mov
adc
mov
loopne
cdq
comiss
xor
loope
mov
pop
jne
push
xchg
mov
(bad)
push
mov
inc
xchg
daa
pop
push
xchg
retf
xchg
(bad)
mov
test
lods
cmps
cmp
push
in
sbb
jle
cmps
xchg
test
sbb
or
jne
jmp
mov
fwait
xchg
les
inc
fisub
pop
dec
push
lock
int
jne
lods
ss
mov
call
sub
push
fs
pop
es
add
mov
dec
movs
ror
shr
aam
pop
pop
sub
inc
xchg
fdiv
inc
xchg
inc
xchg
(bad)
test
mov
enter
lods
loop
fcom
int3
xchg
hlt
cmps
mov
sub
pop
add
ror
nop
int
movs
push
adc
push
sbb
imul
aas
mov
fwait
in
pushf
inc
cwde
adc
lods
fs
imul
xchg
cld
sub
popa
pop
pop
(bad)
fcmovb
out
mov
xor
xor
clc
push
pushf
xchg
xchg
inc
enter
hlt
test
ds
mov
inc
stos
ror
fnstenv
pop
inc
rcr
xchg
and
in
sbb
mov
pop
push
xor
in
jl
xchg
aam
call
inc
ss
retf
mov
push
test
out
scas
sub
into
sbb
mov
push
xor
mov
mov
les
adc
inc
div
test
adc
xchg
jo
cdq
push
dec
push
scas
leave
jle
xchg
dec
call
iret
(bad)
pop
xchg
fimul
ja
mov
pop
xor
mov
call
mov
dec
mov
jmp
or
sub
scas
fs
mov
les
es
mov
pusha
out
lea
call
pop
les
cdq
adc
cmps
xchg
ror
mov
lock
xchg
inc
jno
xor
fcomi
pop
xchg
xchg
cld
mov
cwde
in
aas
sub
adc
cmp
pop
xchg
ds
in
clc
push
mov
xor
pop
add
jns
and
fnstcw
aaa
push
(bad)
ja
int3
repz
mov
or
sbb
or
scas
cs
retf
and
push
aad
xchg
xor
mul
les
xchg
pop
cmp
(bad)
mov
xor
int3
push
mov
mov
call
fcmovu
sbb
scas
dec
loop
fbstp
adc
in
imul
xchg
ret
mov
fild
shl
inc
hlt
clc
stc
xchg
inc
cld
dec
mov
add
xchg
inc
in
(bad)
addr16
call
popa
pop
and
xor
sbb
jne
fst
pop
fwait
rcl
inc
inc
lahf
mov
sti
push
addr16
xchg
mov
mov
add
lods
lock
in
mov
xchg
(bad)
jmp
retf
bound
adc
cld
je
push
mov
jge
inc
rcl
xchg
xchg
(bad)
xlat
mov
js
les
enter
push
stos
(bad)
mov
adc
xchg
(bad)
jmp
jg
test
push
jae
enter
in
loopne
xchg
lahf
ds
mov
addr16
sub
bound
nop
test
fdivr
xor
push
xor
mov
mov
inc
or
stos
pusha
xchg
call
push
add
xchg
mov
adc
in
jo
add
pop
int
fs
inc
out
movs
xchg
stc
mov
mov
mov
(bad)
arpl
addr16
mov
mov
aam
lahf
xchg
xchg
pop
and
arpl
out
dec
das
in
call
inc
out
cmps
inc
fst
pop
xor
xchg
pusha
xchg
rcr
mov
in
pop
push
dec
xchg
mov
jmp
pushf
xchg
pop
mov
jg
jbe
inc
loopne
push
pop
fnsave
xchg
or
cmps
pusha
mov
xchg
mov
test
xchg
retf
mov
or
adc
pop
cmp
xchg
xchg
dec
int
cld
cs
(bad)
xchg
xchg
test
mov
test
sub
cdq
xchg
mov
call
mov
jae
ss
mov
add
pop
sub
jle
add
std
xchg
rcr
aam
movs
xchg
les
push
adc
sbb
xor
add
fdiv
xchg
push
leave
scas
stos
sub
mov
out
mov
int
or
sete
int
pop
push
xchg
ds
fwait
or
push
inc
lds
fsubr
mov
dec
dec
add
popf
mov
bnd
dec
mov
mov
dec
mov
jg
mov
je
or
xchg
mov
xchg
inc
imul
cmp
pop
mov
mov
hlt
shl
bound
in
mov
mov
dec
pop
push
xchg
outs
dec
iret
jge
std
cs
aas
push
stos
mov
xchg
mov
test
jmp
gs
cmp
jp
jne
out
ins
adc
dec
mov
mov
xchg
test
xor
aam
int3
cmps
in
adc
cs
mov
jb
xchg
mov
aam
aas
add
or
dec
adc
push
mov
icebp
mov
ret
leave
push
sbb
adc
dec
outs
pusha
push
rcr
xor
imul
dec
sub
int3
rcl
jmp
cmp
and
sbb
push
mov
cli
xchg
or
lock
mov
xchg
fimul
dec
mov
xchg
sub
mov
xchg
push
sbb
pop
mov
sbb
clc
aam
(bad)
mov
stos
mov
push
inc
pop
mov
aam
in
add
xchg
repnz
fcom
mov
mov
fbld
fwait
scas
xchg
jg
rcr
and
stos
xchg
enter
mov
aam
mov
mov
sub
xor
mov
pop
adc
sti
imul
mov
repz
xchg
ins
xor
xchg
into
movs
aam
test
pusha
lds
and
test
shr
push
jno
in
in
xor
aaa
cdq
movs
(bad)
pop
and
les
xchg
addr16
cmc
cmps
cmp
cmp
arpl
add
cs
ss
cmps
pop
test
adc
mov
mov
retf
inc
je
dec
fcom
xchg
pop
mov
(bad)
fisubr
pop
test
mov
stc
std
push
imul
pop
sub
js
pop
iret
cmps
loopne
mov
sbb
test
shl
repnz
mov
inc
or
(bad)
push
sbb
ret
xor
cmp
sbb
xchg
jne
shl
or
xchg
adc
imul
mov
in
xchg
sub
jp
(bad)
fld
mov
jne
push
cmp
daa
mov
mov
push
arpl
xchg
aas
imul
push
sub
cld
fcom
aad
mov
sbb
std
shl
mov
rep
in
mov
jb
scas
stos
je
xchg
leave
std
or
sub
pop
xchg
call
cmp
xchg
and
(bad)
xchg
sti
lock
xchg
std
sub
inc
jp
or
xor
pop
and
dec
hlt
mov
dec
xchg
sbb
jne
div
jae
jno
pop
dec
cli
ret
mov
xchg
mov
push
push
dec
(bad)
xchg
(bad)
mov
sbb
xchg
pop
int3
cmp
out
xchg
and
sar
mov
inc
push
sahf
dec
mov
push
test
adc
pop
fwait
or
xchg
movs
add
outs
and
into
ret
sub
test
mov
mov
mov
ret
retf
jp
in
mov
pop
jno
clc
rcr
repz
push
not
rcl
pop
pop
xchg
sub
out
sub
ins
and
xchg
mov
mov
lahf
stos
xlat
mov
add
enter
xor
xchg
mov
retf
jno
(bad)
xchg
or
scas
xchg
jae
iret
and
call
nop
xor
pop
mov
fs
mov
js
jge
inc
in
add
mov
cmp
mov
inc
stos
or
clc
xchg
jmp
cmp
call
shr
fwait
inc
sub
jl
fyl2xp1
scas
sub
rcr
push
add
adc
loope
push
inc
cmps
xchg
cld
adc
cmp
push
stc
xchg
cmp
sub
xchg
in
xlat
or
jmp
jge
cmp
dec
mov
test
les
loop
sub
push
xor
add
push
mov
jl
pushf
enter
push
jno
push
pop
int3
xchg
add
in
xchg
inc
sub
sahf
mov
stos
xchg
int3
test
je
icebp
loopne
cmps
sbb
xchg
into
retf
and
mov
test
mov
out
jmp
mov
mov
add
mov
je
fs
xchg
data16
pop
hlt
cs
or
mov
mov
xchg
stc
es
and
int3
push
pop
lahf
sbb
inc
xchg
je
(bad)
(bad)
ret
rcr
in
mov
int3
xchg
add
das
mov
les
enter
pop
mov
jbe
pop
or
ret
call
cmp
dec
xchg
adc
add
in
xchg
das
xchg
out
popa
ds
shl
mov
je
mov
xchg
xchg
pusha
sahf
xchg
test
mov
ins
xchg
in
int3
lock
fstp
mov
mov
adc
xor
dec
xchg
jbe
clc
cmp
pop
movs
add
sahf
adc
push
cmc
xchg
sbb
xchg
add
add
stc
push
out
mov
push
hlt
adc
sti
mov
test
xchg
xchg
scas
xlat
daa
mov
fwait
pop
adc
jmp
out
push
xchg
call
shl
sbb
mov
pop
xchg
(bad)
mov
mov
aas
or
retf
xchg
(bad)
mov
movs
jb
cmps
push
retf
adc
cwde
jns
mov
xchg
xor
jb
or
pop
add
int3
mov
les
enter
xchg
mov
mov
mov
sub
xchg
mov
jmp
xchg
cmp
and
loop
push
jb
xchg
adc
fisubr
fisttp
mov
add
fwait
adc
and
aad
xchg
outs
mov
lahf
jecxz
inc
add
out
inc
and
lea
fist
xchg
in
xor
inc
fnsave
in
out
je
movs
mov
sbb
jmp
push
xor
mov
xchg
sub
xchg
pop
adc
and
adc
pop
push
xchg
sub
and
mul
mov
xlat
das
retf
mov
jns
xchg
fwait
imul
or
jnp
and
ss
int
mov
xor
mov
in
(bad)
xchg
push
pop
out
lods
(bad)
out
mov
mov
mov
xchg
adc
jecxz
in
jmp
movs
es
call
fwait
out
mov
pushf
cmp
push
fwait
sub
or
stos
pop
jmp
cwde
push
cs
aaa
jnp
in
lds
mov
mov
dec
mov
repz
rol
xchg
dec
outs
mov
or
int3
pextrw
dec
inc
cwde
sbb
cdq
(bad)
stos
in
mov
push
in
mov
je
jbe
int3
xchg
xchg
ins
pop
jo
jne
in
xchg
inc
sub
add
push
mov
ins
pop
mov
or
xchg
dec
int3
mov
stos
(bad)
pop
adc
lahf
test
xchg
dec
add
cwde
adc
shl
push
iret
push
fwait
sbb
xchg
jp
jnp
pop
xor
(bad)
sub
js
xchg
in
inc
xchg
sbb
sub
xor
xchg
add
outs
xor
enter
call
add
loopne
cmps
xchg
pop
xor
(bad)
in
sbb
test
sbb
adc
cli
cld
push
or
push
aaa
or
xchg
push
jle
jbe
jmp
xchg
ret
pop
lahf
and
lods
mov
pop
imul
adc
mov
addr16
aaa
lock
ret
daa
std
and
sub
pop
mov
push
jne
ins
jmp
mov
xor
sub
sub
mov
lea
scas
push
xchg
sti
movs
into
or
adc
ja
mov
xchg
call
shr
xchg
fadd
jecxz
push
pusha
xor
xchg
scas
or
inc
xchg
cmps
cmp
je
std
data16
push
xor
push
xor
push
mov
hlt
or
xchg
sahf
jge
inc
adc
inc
fidiv
into
xor
sub
adc
pop
jecxz
fs
and
cdq
xor
push
(bad)
leave
xchg
in
add
stos
push
xor
scas
sub
push
cmp
mov
fucomi
xchg
and
jo
(bad)
xchg
int3
jb
rcl
xor
xchg
popf
test
inc
xchg
stc
jno
pop
cmp
test
addr16
push
push
cmp
movs
mov
pop
cmp
xchg
call
push
xchg
and
and
xchg
icebp
cli
dec
addr16
pop
hlt
cmp
and
(bad)
loopne
push
in
fwait
xor
and
xchg
aad
mov
shl
mov
xchg
or
inc
mov
sti
pop
push
aam
jl
xchg
jecxz
adc
stc
lea
add
inc
jo
loopne
sub
sbb
cmc
jno
aad
or
mov
add
adc
ss
xchg
or
sub
imul
pop
xor
mov
loopne
mov
mov
mov
xor
lahf
jae
xchg
out
jmp
lea
std
retf
inc
xchg
sbb
or
pop
inc
sub
imul
rcl
in
add
xor
push
cmp
scas
(bad)
ror
pop
push
xchg
push
and
mov
or
aam
mov
pushf
fistp
pop
fiadd
mov
sbb
retf
xchg
out
cwde
test
jbe
in
sti
sbb
(bad)
ror
adc
mov
icebp
and
add
inc
cmps
neg
jp
nop
cwde
xchg
(bad)
loop
jl
loope
je
lods
bound
arpl
xchg
stos
iret
sub
push
ins
mov
popf
es
push
int
lahf
js
je
adc
pop
bound
addr16
(bad)
(bad)
xchg
inc
xabort
les
fwait
daa
shr
sub
mov
mov
add
cli
fwait
(bad)
pop
pop
cmp
fbstp
and
je
mov
jl
mov
(bad)
popa
movs
xor
or
mov
xchg
(bad)
lea
loope
pop
pop
xchg
or
ja
mov
push
inc
les
jae
jnp
rcl
pop
jl
mov
enter
and
cld
div
test
icebp
ja
rcl
and
add
xchg
cmp
fistp
imul
sahf
mov
fstp
pop
adc
add
pop
adc
pop
inc
add
fadd
xchg
fnsave
scas
es
mov
xor
jecxz
xchg
pop
retf
iret
test
(bad)
mov
xchg
leave
es
sbb
lds
or
int3
cmp
lea
lods
mov
dec
push
les
push
frstor
mov
js
add
in
jno
and
scas
sbb
lahf
ficomp
add
adc
(bad)
les
cmps
sbb
xchg
aam
jo
mov
and
mov
mov
out
xchg
cmc
fimul
inc
and
imul
push
(bad)
adc
fsubp
jecxz
cwde
scas
test
cwde
mov
xchg
mov
mov
nop
sbb
xchg
xchg
cmp
mov
dec
or
pop
and
and
sbb
stos
xchg
loope
ror
retf
jle
jbe
call
mov
xchg
inc
popf
xchg
sub
ins
and
xor
fidivr
cmp
cmp
xchg
pop
sbb
loope
int
xchg
xor
cmps
stos
xlat
add
add
cmp
hlt
xchg
(bad)
call
xchg
fld
outs
in
cmc
jl
loop
int3
inc
xchg
les
xchg
imul
sub
xchg
data16
and
(bad)
lock
mov
xchg
and
cmps
xor
mov
inc
push
or
add
idiv
mov
mov
in
xchg
pop
mov
inc
sbb
xchg
mov
ret
xchg
into
add
gs
outs
mov
mov
mov
mov
cdq
popf
cmp
aam
nop
out
cmp
cmp
jno
dec
arpl
sbb
stos
(bad)
sbb
int3
mov
inc
mov
cmp
into
mov
ins
out
mov
inc
ret
sbb
push
cmps
std
mov
inc
xchg
pop
dec
inc
pop
fsub
xchg
push
sbb
movs
xchg
in
leave
out
sti
ds
nop
dec
xchg
and
ins
ret
fwait
xchg
pop
mov
add
cwde
ret
and
and
xchg
pop
push
scas
adc
mov
xchg
adc
sbb
lods
xchg
fs
gs
pushf
dec
pop
xchg
(bad)
out
push
inc
enter
dec
xchg
cmp
pop
pop
add
sbb
xchg
sub
xor
xchg
rol
xor
(bad)
push
addr16
add
sbb
dec
jmp
sar
and
add
scas
iret
add
cwde
xor
rol
call
xchg
dec
in
out
aad
xchg
jmp
cmc
test
cwde
not
mov
mov
mov
fadd
ins
neg
xchg
xchg
jge
xchg
loope
and
outs
in
xlat
std
fptan
popa
xchg
sub
popf
mov
shr
fs
in
cmp
mov
daa
out
fwait
scas
out
and
sub
xor
dec
cmp
mov
or
xchg
dec
sub
fdivr
repz
pop
push
xchg
(bad)
adc
retf
mov
inc
arpl
xchg
adc
sbb
and
sti
ror
xchg
cmp
jbe
jmp
mov
daa
cmp
scas
popf
cdq
je
mov
push
ret
cmps
cmp
arpl
fild
stos
xchg
sub
loope
inc
sub
xlat
pop
retf
xchg
inc
ins
es
pushf
out
push
repz
mov
cdq
xchg
dec
push
add
adc
imul
jmp
pop
aas
or
jmp
pop
xchg
sahf
mov
js
(bad)
clc
retf
fwait
or
(bad)
sub
sbb
imul
aam
arpl
or
xchg
jle
ins
sahf
mov
sbb
xchg
enter
imul
les
(bad)
and
out
xchg
popa
cmp
sbb
sbb
add
xor
push
xchg
push
adc
bound
or
xchg
cmp
push
xchg
scas
mov
imul
xchg
std
(bad)
and
ins
frstor
or
lods
scas
or
push
adc
xchg
pushf
and
push
fnsave
dec
mov
mov
test
xchg
and
mov
in
xchg
sub
inc
out
sub
push
mov
ins
icebp
nop
cld
cmps
and
bound
pop
mov
xchg
fldcw
aas
xchg
xor
xor
test
mov
cld
add
mov
sub
adc
lss
sub
clc
in
fwait
xchg
jb
jne
mov
repz
lahf
mov
ret
rcl
sbb
or
rcr
retf
lods
mov
test
push
xchg
fidiv
sub
mov
popa
cmp
adc
mov
je
mov
adc
iret
cmp
nop
mov
xor
fidivr
pushf
stc
popf
cmc
call
sub
je
movs
xchg
adc
fnstcw
or
cli
bound
xchg
stos
and
adc
or
in
ror
jmp
mov
xchg
retf
sbb
sbb
jno
mov
or
cmp
cli
mov
xchg
jp
fadd
dec
push
in
xchg
mov
sub
fstp
cld
sbb
sbb
(bad)
xchg
out
clc
fldcw
and
xchg
jle
push
cmp
push
mov
arpl
xchg
popf
loope
mov
xchg
out
inc
pop
das
pushf
shr
dec
jl
push
test
test
pop
cmp
dec
dec
push
add
fisubr
xchg
movs
test
mov
xchg
inc
je
jns
mov
popf
jl
jge
jp
push
imul
scas
test
push
lahf
adc
or
pop
fimul
call
sbb
js
outs
jmp
inc
xor
cld
mov
mov
xor
fidivr
xchg
and
cmp
cwde
xor
out
scas
sub
fst
imul
xchg
mov
or
jno
hlt
stos
stc
xchg
xchg
or
(bad)
cmp
addr16
std
stos
mov
aad
bound
xchg
sti
dec
and
xchg
xchg
repnz
sbb
pop
xchg
mov
mov
xchg
int3
sar
clc
in
xchg
add
mov
int
xor
or
jl
pop
cmp
mov
aam
or
das
cmps
shl
aaa
pop
xchg
push
push
test
call
aam
xchg
add
fisub
jmp
dec
lea
sbb
mov
jl
and
dec
pop
lea
leave
xchg
test
adc
cdq
adc
fidiv
call
xor
popf
jmp
xchg
xchg
pop
repz
xchg
inc
cli
pop
mov
xchg
loop
and
xlat
cmp
cwde
xchg
inc
or
jecxz
and
(bad)
mov
sub
into
(bad)
(bad)
xchg
xchg
aas
pop
jmp
rcl
or
cld
mov
fdivr
fsubr
mov
mov
dec
gs
dec
rcl
adc
pop
cwde
or
rol
rcr
pusha
adc
cmp
push
mov
jp
stos
cmp
cmp
mov
out
xchg
xchg
inc
and
mov
jbe
ss
test
call
pop
fnsave
xchg
clc
fisub
xchg
shl
dec
xchg
xchg
icebp
inc
je
jns
mov
xchg
enter
jl
jge
push
jp
push
and
cli
inc
pop
jne
leave
mov
pop
outs
jno
and
cdq
adc
jge
mov
inc
inc
call
xchg
cs
jmp
mov
cmps
(bad)
loopne
xchg
dec
aaa
cli
pop
xchg
mov
fistp
cmp
cmp
sahf
scas
outs
push
jp
sbb
add
(bad)
inc
sbb
fmul
iret
cmps
mov
mov
xchg
xchg
xor
sub
inc
in
ror
lahf
jno
hlt
xchg
out
or
clc
lods
cwde
cld
cdq
std
scas
push
jp
xchg
fmul
dec
sbb
xchg
mov
push
add
adc
call
and
xor
cmp
jp
cmp
cmp
pop
push
leave
loop
xchg
cmps
es
mov
(bad)
jb
into
mov
xchg
and
xchg
mov
and
xchg
fstp
je
call
mov
cmp
xor
rcr
lds
mov
dec
adc
(bad)
xchg
in
inc
xor
js
out
(bad)
xchg
pop
cmp
xor
xchg
mov
test
xor
inc
in
lds
outs
cmps
into
xor
(bad)
loop
xchg
paddb
push
mov
or
push
add
mov
xchg
(bad)
or
xchg
shl
mov
ficomp
mov
test
xor
mov
mov
push
sub
cwde
adc
(bad)
rcr
fist
dec
enter
mov
xchg
inc
xlat
pusha
neg
cmps
lock
ins
cwde
pop
scas
mov
push
ret
xchg
and
cmps
fwait
cmp
cmp
inc
jge
cwde
mov
xchg
push
jp
cwde
iret
or
ret
test
xchg
cmp
push
xchg
inc
sub
push
leave
cmc
xchg
mov
jp
add
inc
scas
xor
sbb
nop
push
xchg
ins
xchg
mov
mov
rcl
lahf
mov
xor
test
ror
adc
cli
jo
(bad)
sbb
notrack
push
xchg
das
inc
push
or
dec
pop
(bad)
xchg
(bad)
out
pushf
fistp
or
xchg
lods
mov
imul
fidiv
add
xor
add
push
mov
push
mov
sub
fs
or
into
stos
cld
xchg
jle
push
and
xor
pusha
jmp
imul
pop
sahf
sete
iret
mov
dec
mov
aas
xor
lahf
les
xchg
(bad)
jge
imul
xor
ret
ret
sub
pop
hlt
stos
pushf
lods
cs
out
ds
xchg
adc
fsin
dec
xchg
pusha
imul
xor
shl
adc
nop
loopne
xchg
pop
mov
sub
jnp
sbb
mov
xor
clc
lds
add
clc
mov
hlt
jb
push
out
adc
xchg
movs
gs
mov
loop
ins
xchg
imul
and
xchg
xchg
sbb
sbb
dec
imul
xchg
in
mov
jae
adc
mov
std
cld
leave
cwde
js
stos
xor
bound
std
pop
pop
xchg
jmp
lea
scas
push
out
cld
xchg
in
je
add
popa
mov
xchg
cmp
xchg
pop
stc
xor
inc
cmc
or
xchg
and
popa
cld
jno
xchg
std
xchg
push
mov
and
xchg
dec
das
mov
dec
xchg
inc
stos
rcl
adc
mov
pop
xor
es
mov
aam
push
push
mov
mov
and
xchg
ja
iret
xor
xchg
and
retf
movs
test
fimul
or
or
test
out
loop
push
push
add
(bad)
jge
sbb
enter
xchg
or
movs
les
and
push
dec
jo
test
add
xchg
mov
mov
push
sbb
in
out
add
cmp
sbb
inc
mov
jne
inc
add
test
stc
jmp
ret
inc
xchg
add
test
bound
sbb
popf
sbb
add
int3
add
mov
or
cmps
xchg
and
je
adc
or
or
aam
adc
movs
dec
(bad)
push
test
and
ret
into
add
xchg
or
jle
aaa
pop
ficom
inc
pop
in
xchg
les
mov
push
jmp
adc
add
vpshlb
inc
ss
push
and
pop
xchg
mov
and
add
inc
lahf
xchg
cs
(bad)
xchg
push
call
shl
aam
ret
int
xchg
(bad)
retf
xchg
pop
xchg
xchg
inc
pop
movs
in
cwde
mov
outs
imul
push
int
xchg
pusha
jge
sbb
not
xor
xchg
(bad)
inc
jnp
pop
lds
(bad)
(bad)
mov
in
xor
mov
hlt
cwde
icebp
shl
and
mov
xchg
dec
pop
aam
push
xchg
xor
fbstp
push
in
and
push
pushf
push
retf
scas
push
xchg
xor
pusha
test
call
pop
xor
mov
mov
and
jmp
and
daa
enter
lahf
sar
adc
add
adc
cdq
out
adc
pop
inc
out
jbe
xchg
dec
in
xchg
jmp
mov
pop
popf
xchg
jecxz
and
mov
and
test
jmp
xor
int
inc
mov
add
xchg
stos
xor
loope
add
adc
xchg
cmps
mov
jmp
adc
stos
adc
and
ins
or
push
jg
xchg
int
and
mov
(bad)
xchg
dec
(bad)
jae
fisttp
mov
outs
out
xchg
xchg
add
jmp
mov
iret
xchg
aad
daa
jnp
jp
xchg
and
mov
or
mov
es
xchg
inc
or
stos
popf
sub
xchg
pop
daa
dec
(bad)
out
imul
xchg
xor
sti
pop
and
push
nop
mov
mov
stos
and
shl
mov
enter
sub
fs
test
and
xchg
jo
push
push
push
jae
(bad)
xchg
mov
loopne
hlt
or
xchg
and
cdq
in
fs
data16
sbb
xchg
les
ins
adc
mov
mov
mov
pop
call
xchg
sbb
dec
stc
mov
mov
leave
mov
adc
cmp
xlat
mov
or
sub
xor
adc
sti
jae
jno
xchg
leave
popa
adc
dec
ss
xchg
bnd
sbb
cwde
dec
arpl
fisttp
mov
xchg
retf
pop
xchg
fisub
adc
cmps
icebp
ins
mov
mov
aam
dec
adc
(bad)
stos
add
inc
push
addr16
mov
inc
sub
aad
sar
xchg
jb
jae
int3
in
mov
retf
jbe
jnp
adc
call
adc
mov
fwait
cmps
xchg
fimul
sti
sbb
imul
xchg
lahf
dec
add
add
arpl
leave
std
dec
hlt
or
popf
jae
lea
(bad)
xchg
dec
pop
rcl
pop
and
sub
lods
gs
stos
sbb
cmps
mov
fmul
xchg
sbb
jp
xchg
ins
pop
(bad)
int
iretw
sbb
idiv
xchg
cmp
or
add
pop
adc
in
adc
and
adc
mov
in
dec
xor
and
lds
call
mov
aam
sbb
fwait
sti
scas
hlt
scas
fcom
sar
mov
shr
jbe
push
xchg
mov
sub
es
sub
test
pop
aaa
mov
xchg
(bad)
lock
dec
or
mov
neg
xor
pop
adc
xchg
push
cmp
das
fs
lods
ds
sub
push
adc
in
test
gs
std
pop
mov
pop
stc
dec
mov
int3
imul
fwait
mov
fimul
dec
xor
push
jmp
mov
pop
mov
loope
lock
xchg
aad
mov
xchg
loop
jg
and
fldcw
rcl
inc
sbb
dec
push
push
add
push
stos
mov
out
mov
push
push
lahf
push
repnz
fcmovnu
xchg
jecxz
adc
sub
mov
mov
xor
xchg
xchg
pop
mov
mov
xchg
inc
retf
rcl
mov
mov
hlt
imul
xor
out
ins
xchg
xor
jmp
mov
shl
int
in
adc
mov
es
pop
shl
or
mov
add
sar
imul
cmc
jno
mov
and
bnd
push
mov
movs
stos
xchg
out
into
xchg
mov
retf
ins
rcl
push
outs
xchg
std
dec
(bad)
and
sbb
push
rcl
addr16
cdq
(bad)
and
rcr
adc
mov
dec
push
cmc
ret
xchg
dec
jge
movs
fdivr
xchg
sub
cwde
xchg
popf
not
mov
fnstsw
jl
lahf
push
out
dec
xchg
fdivr
lahf
sub
xchg
in
mov
push
pushf
pop
mov
add
jb
fbld
dec
(bad)
xchg
gs
or
pop
test
or
add
in
outs
ret
scas
rol
mov
loopne
into
repz
cdq
lds
test
fdiv
mov
pop
les
mulps
jbe
lds
xchg
shl
in
es
cmp
addr16
pop
pop
inc
mov
mov
push
xor
push
fidivr
sti
inc
xchg
jno
mov
cmp
inc
cmp
xor
xchg
cmp
and
test
jbe
and
inc
adc
cli
aam
xor
mov
xchg
adc
aam
pushw
out
mov
jecxz
sub
xor
dec
push
or
add
xchg
dec
call
add
and
fldenv
aam
adc
icebp
xchg
xchg
adc
bound
add
sbb
add
and
outs
xchg
js
lds
out
je
call
xchg
aam
mov
jmp
mov
jmp
inc
mov
sar
xchg
jbe
sbb
cld
out
or
sub
mov
ja
adc
(bad)
aaa
xchg
xor
xchg
mov
rol
ins
aam
xchg
int
push
jl
add
sahf
repz
xor
or
imul
loope
sub
mov
xlat
outs
adc
and
daa
push
xchg
push
clc
adc
in
fs
xchg
push
pop
cmp
xchg
cmps
sahf
xchg
push
sub
pop
mov
pusha
pop
xchg
push
mov
ret
push
sbb
mov
and
mov
fcmovne
shr
cmp
popa
xchg
movs
inc
(bad)
cmp
inc
xchg
mov
mov
xchg
pusha
(bad)
cdq
jno
in
mov
arpl
mov
xor
scas
fwait
sbb
or
xchg
outs
iret
jmp
test
sub
cmp
push
or
hlt
add
cmpps
rcl
jmp
fwait
mov
dec
add
xchg
fbstp
xor
dec
jnp
sbb
cmp
xor
xchg
stc
cmp
xchg
(bad)
movs
xchg
mov
push
stos
mov
jmp
fild
pop
jmp
cld
daa
xchg
inc
adc
cs
icebp
rcr
xchg
ficom
sahf
aaa
mov
imul
icebp
test
xchg
stos
mov
dec
mov
inc
jl
lds
xchg
sbb
xor
out
dec
call
xchg
dec
mov
xchg
push
fstp
xchg
pushf
call
xchg
repz
test
inc
ins
sub
inc
dec
sub
not
fs
mov
fmul
or
cmp
repnz
ret
lds
ins
dec
push
add
addr16
fwait
hlt
mov
xchg
(bad)
and
dec
jmp
pop
and
ret
mov
mov
adc
in
pusha
ficomp
cmp
repnz
das
dec
sub
xchg
ss
or
psrlq
sbb
adc
xchg
or
inc
fwait
imul
mov
push
pop
xor
mov
lahf
add
(bad)
push
pop
mov
xchg
xchg
jno
or
into
jge
stos
xchg
inc
imul
aaa
jns
push
mov
jmp
bound
xchg
repnz
mov
mov
ja
mov
cmp
add
xchg
or
retf
push
(bad)
cli
xor
dec
retf
xchg
stos
or
xchg
jnp
call
adc
xor
inc
es
push
(bad)
xlat
push
sub
nop
xchg
int
adc
jg
fcomp
push
adc
imul
paddusw
xchg
xlat
popa
sbb
call
xor
xor
and
sbb
xchg
adc
mov
ins
lock
cmps
mov
aam
jae
das
and
rcr
movs
xchg
pop
std
pop
xchg
outs
mov
dec
xchg
xor
stos
mov
xchg
fcomip
jns
mov
sub
adc
lock
sbb
mov
and
xlat
or
pop
dec
push
jp
xchg
das
ret
aaa
int
test
(bad)
mov
push
outs
cld
adc
jbe
and
fwait
pop
mov
sti
mov
xchg
pop
shl
and
test
into
cmps
or
or
sub
mov
pop
dec
or
dec
cmp
scas
cmp
cmps
push
sbb
test
popf
xchg
int3
adc
(bad)
inc
popf
loope
inc
gs
xchg
dec
and
xchg
xor
xor
xchg
mov
rol
jno
jmp
cmps
lods
xchg
pop
inc
retf
and
add
xchg
shr
leave
mov
adc
xchg
dec
inc
xchg
test
aam
in
cld
xchg
mov
pop
adc
add
mov
pop
mov
dec
data16
cmp
out
outs
aam
sub
xchg
cmc
add
je
add
jbe
scas
je
xchg
mov
rcl
xchg
dec
pusha
les
inc
jle
mov
lds
je
mov
fmul
and
in
xchg
cwde
ins
inc
ja
xlat
xchg
in
mov
mov
js
cli
inc
jecxz
push
push
or
fisttp
enter
not
xor
ror
xchg
cli
into
les
xchg
and
inc
add
or
jo
mov
hlt
movs
mov
aam
mov
and
fcomp
stc
daa
mov
cmp
push
pop
mov
mov
cdq
xchg
jg
push
call
movs
or
sub
xchg
test
push
mov
jae
sub
and
call
or
xchg
inc
cs
pop
fsubp
xor
cld
mov
cmp
adc
ficomp
iret
sbb
cmp
jl
inc
stos
and
jecxz
push
or
add
mov
test
mov
cmps
rcr
jge
xchg
aam
or
xor
ret
jecxz
inc
push
or
(bad)
fdivp
aam
inc
data16
cmp
mov
das
adc
xchg
scas
iret
pop
ja
pushf
adc
and
imul
dec
xchg
loop
shl
hlt
jl
leave
ret
je
iret
jle
xchg
or
mov
imul
mov
inc
mov
dec
mov
dec
xchg
(bad)
aam
inc
fsub
mov
push
pop
fs
mov
push
jge
nop
mov
jno
add
dec
push
and
fdivr
inc
xchg
pop
rcl
xchg
sub
cmp
fcmovb
setae
push
add
mov
xchg
rcr
popf
and
and
xchg
cmc
mov
jnp
(bad)
xchg
jne
into
(bad)
ins
xor
neg
sbb
add
push
xchg
mov
mov
and
xchg
retf
arpl
leave
lock
xchg
imul
int
add
xchg
outs
push
mov
mov
mov
in
xor
ins
lods
xor
sbb
scas
xchg
(bad)
xor
mov
mov
cwde
sti
sar
(bad)
aad
pop
fistp
or
aad
scas
xor
sub
nop
adc
bswap
lock
hlt
xchg
(bad)
stos
outs
aas
repnz
adc
ret
addr16
sbb
shl
cmps
int
jmp
test
nop
sub
in
mov
movs
test
mov
xchg
dec
jg
and
test
pop
ffree
and
neg
xchg
movs
xor
sbb
xchg
das
jae
or
mov
xchg
cmp
sbb
or
ret
adc
loopne
cwde
cli
mov
mov
push
lock
les
xchg
fs
jne
push
ss
push
gs
mov
js
cmps
push
dec
cmp
sbb
xchg
in
enter
(bad)
pop
sar
xchg
adc
lock
loop
and
mov
and
push
ss
gs
jmp
in
jmp
jge
jg
pushf
xchg
pusha
lahf
xlat
xchg
(bad)
pop
sub
sbb
test
xchg
and
shr
fwait
(bad)
pop
inc
or
mov
jno
xchg
movs
out
push
and
adc
jbe
push
adc
sbb
sub
popf
inc
sbb
fcomi
sub
jmp
and
lock
push
cmp
push
retf
xchg
mov
leave
add
inc
xchg
cld
mov
xor
jae
mov
mov
test
movs
seta
mov
mov
cs
or
xchg
test
call
ins
aam
(bad)
xor
aas
imul
mov
sbb
aad
adc
daa
out
repz
inc
call
into
mov
xchg
fistp
sahf
jno
fs
xchg
xor
inc
and
pop
adc
and
cld
sub
les
mov
xchg
jmp
jle
add
iret
xchg
push
cmps
sbb
into
gs
les
and
shl
inc
inc
ins
call
xor
xor
scas
aaa
cli
mov
jg
dec
arpl
popf
xchg
sbb
ret
(bad)
or
or
bound
mov
fadd
pop
stc
mov
or
test
dec
xchg
dec
cmp
pop
retf
lods
xchg
push
fidiv
xor
mov
xchg
sub
mov
lock
xchg
ret
call
mov
addr16
inc
int3
mov
or
xchg
fld
scas
shr
fwait
sbb
sbb
mov
fsubr
and
lods
xlat
(bad)
mov
or
or
xchg
add
cmc
add
outs
mov
jo
xchg
sub
frstor
rcl
in
popf
jne
and
adc
pop
jge
jae
adc
sbb
int3
push
pop
stos
add
mov
daa
test
ret
xchg
push
jg
or
sbb
aaa
jo
mov
retf
shl
(bad)
cli
add
ret
adc
(bad)
pushf
pop
fwait
sbb
icebp
test
(bad)
mov
or
pop
xchg
sub
nop
fadd
jbe
xchg
arpl
hlt
lahf
call
cmps
cmp
xchg
aaa
mov
jb
xchg
pop
adc
ins
lea
add
in
dec
adc
dec
fld
adc
pop
mov
sbb
pop
pop
mov
sbb
nop
pop
adc
adc
xor
inc
js
adc
lahf
add
out
xchg
push
push
inc
pop
fwait
out
xchg
pop
dec
adc
mov
ins
cli
fwait
mov
xchg
adc
mov
lods
push
mov
xchg
in
out
fldcw
movs
std
gs
test
jmp
or
push
push
mov
fisub
cwde
mov
or
imul
pushf
add
xchg
je
stc
fidiv
mov
push
fist
push
aam
dec
xchg
(bad)
xchg
out
sti
lahf
js
fwait
add
fwait
scas
(bad)
push
(bad)
ret
cmps
xchg
or
je
push
jle
xchg
xor
das
add
dec
loop
and
fadd
xchg
aaa
or
jbe
mov
pop
xchg
mov
xchg
pop
ds
out
shr
aaa
pop
(bad)
popf
xchg
stos
mov
sbb
mov
test
in
(bad)
jo
or
xchg
add
scas
sub
xchg
arpl
xchg
xchg
cmp
xchg
xor
scas
sar
jns
xchg
nop
inc
sti
jo
clc
pop
add
and
xor
sub
mov
xchg
dec
rcr
scas
sbb
cmp
mov
or
std
mov
sti
fcom
dec
rol
addr16
pop
sub
mov
sbb
fs
adc
retf
out
test
push
gs
sar
fsubr
xchg
sbb
js
push
(bad)
cwde
xchg
mov
call
imul
scas
xor
adc
adc
jle
fwait
(bad)
scas
jnp
data16
adc
ret
call
xor
mov
into
pop
mov
sbb
test
lea
jmp
push
inc
sbb
repnz
xchg
mov
aam
xchg
xor
ret
xlat
xchg
dec
sbb
enter
xchg
outs
xchg
cmp
jae
in
mov
fwait
xchg
shl
jmp
pop
popa
and
xchg
fidivr
mov
mov
jmp
sub
adc
cmc
adc
xchg
jne
test
xchg
clc
cs
sub
in
xor
mov
mov
dec
test
and
xchg
(bad)
ins
and
jno
push
add
inc
daa
xor
fcmovnu
jb
and
aaa
jl
add
inc
mov
jno
mov
imul
lahf
mov
xchg
sti
mov
push
xchg
mov
stos
iret
ret
es
daa
jge
or
sbb
push
outs
jne
add
xchg
pop
cmps
inc
sbb
shr
pop
fwait
jmp
fs
lea
gs
sbb
pop
(bad)
(bad)
loope
rcl
or
jne
rcr
xor
enter
push
clc
ins
pop
dec
pop
mov
dec
das
inc
shl
iret
push
imul
xor
out
hlt
jle
cmps
lahf
sbb
inc
aaa
xchg
hlt
xor
add
data16
cwde
loope
mov
ror
pop
xchg
xor
push
xor
sbb
xchg
or
add
outs
push
and
add
jecxz
out
bound
enter
xchg
mov
jbe
sar
push
dec
pop
call
push
(bad)
jle
jno
adc
dec
mov
jp
sbb
popf
jecxz
pop
addr16
jo
cmp
jb
xchg
dec
out
pop
cmps
xchg
dec
add
mov
pusha
ret
in
add
aaa
rol
inc
ret
push
pushf
pop
push
int
add
ja
pop
shr
or
jmp
lds
cmp
test
mov
mov
xchg
and
pop
mov
jb
inc
dec
mul
cdq
ins
bound
pop
and
adc
je
add
xor
xor
mov
xchg
mov
push
fwait
sar
mov
pushf
and
mov
lods
or
sbb
add
pushf
pop
shl
cmps
mov
sub
jecxz
xchg
pop
leave
add
or
ret
push
xchg
xor
xchg
push
das
out
sub
cli
sub
add
xlat
sar
pop
and
fs
mov
cs
aas
push
and
inc
jnp
jp
add
sti
jb
out
mov
in
scas
inc
loop
jg
inc
adc
mov
or
add
outs
(bad)
sub
mov
adc
sub
inc
xchg
push
jmp
xchg
mov
xchg
xor
mov
add
aam
movs
arpl
mov
imul
inc
iret
aam
hlt
mov
and
or
xchg
icebp
lods
aad
dec
add
xchg
cmp
stos
and
and
pop
cmp
pop
into
push
mov
cmp
push
xchg
and
ret
dec
js
fwait
test
sub
outs
out
(bad)
fs
jle
retf
aad
mul
fldcw
add
daa
std
stc
pop
sbb
and
mov
rol
xchg
mov
inc
je
push
arpl
rcl
inc
fst
add
cs
(bad)
xchg
inc
and
js
push
in
ret
fs
mov
pop
push
in
cmp
jnp
stos
ja
sub
lods
adc
lock
inc
aam
sbb
sar
mov
xchg
push
bound
je
mov
nop
adc
or
xor
jo
shl
mov
sbb
mov
adc
push
bound
popa
pop
fistp
push
mov
test
movs
add
cmp
pop
stos
into
iret
lahf
adc
mov
ror
mov
pop
ret
fwait
adc
pop
push
mov
xchg
test
dec
lock
enter
inc
cmps
aam
mov
lahf
jecxz
in
scas
and
repz
aas
sbb
xchg
mov
(bad)
xor
jg
stc
and
xchg
push
jmp
jp
xchg
loopne
pop
adc
(bad)
jl
lock
cs
int
push
xchg
dec
dec
pop
push
sbb
adc
fiadd
jge
jmp
fld
test
xchg
lahf
mov
mov
hlt
add
xchg
retf
fstp
leave
cli
mov
dec
cmp
hlt
loopne
sbb
sar
adc
aas
aaa
scas
add
ja
(bad)
jecxz
xchg
ret
int
nop
daa
push
mov
pop
call
and
lock
xchg
test
and
and
nop
xchg
scas
cli
outs
in
add
repz
push
(bad)
and
movs
jecxz
jbe
pop
and
ja
xchg
pop
inc
aam
loope
fwait
sbb
adc
je
movs
inc
mov
push
xchg
or
push
adc
into
aaa
adc
mov
xchg
hlt
nop
mov
cdq
jnp
cmp
and
fisub
pop
pop
loop
(bad)
bnd
adc
mov
pop
adc
jecxz
aam
icebp
(bad)
sub
sbb
dec
gs
xchg
sub
iret
out
cmps
fist
cmp
inc
xchg
daa
xlat
jmp
out
mov
outs
xchg
aad
stc
push
or
neg
dec
fisubr
adc
cwde
jo
enter
mov
dec
xchg
inc
push
pop
push
pop
das
pop
push
lods
inc
leave
outs
sub
cmp
and
and
lods
xchg
sbb
dec
xchg
xor
gs
data16
cmp
push
mov
in
das
dec
sbb
loopne
jge
ret
cwde
ins
inc
pop
adc
(bad)
call
mov
or
test
xchg
pop
adc
xor
mov
out
adc
retf
mov
inc
add
mov
mov
fnstcw
mov
mov
sahf
repz
arpl
mov
push
adc
fisttp
xchg
outs
mov
dec
pop
xchg
lock
stos
add
push
es
cmps
ret
mov
les
repnz
fwait
cld
movs
jmp
cs
xchg
repz
pop
fyl2x
add
inc
lea
cmps
xchg
cmp
ret
cmps
nop
shr
jg
fcmovbe
inc
mov
cmp
iret
fcomp
jnp
test
les
test
not
mov
clc
aas
sub
xchg
cdq
in
jmp
add
xchg
dec
popa
int
sub
js
push
dec
inc
sbb
add
mov
xchg
xchg
js
stc
xlat
push
pop
dec
mov
xlat
sbb
mov
xchg
fcom
add
icebp
or
ja
jg
aam
fmul
(bad)
xchg
popa
sub
fidiv
rcl
jmp
xor
scas
call
adc
jle
xchg
icebp
mov
mov
stos
and
mov
push
mov
cmps
in
inc
rcl
xchg
rcr
xor
inc
stos
cmps
cdq
daa
sbb
mov
fwait
test
enter
mov
out
aaa
ret
push
and
mov
cmp
lods
cdq
(bad)
retf
xor
call
pop
loopne
xchg
fstp
mov
cld
mov
jg
or
(bad)
sbb
xchg
pusha
xchg
cmp
in
mov
popf
sub
test
push
pop
lds
adc
jae
int
pop
xchg
jbe
mov
fs
mov
xchg
push
stc
xchg
dec
fdivr
inc
shr
test
or
jbe
cdq
je
stc
xchg
or
mov
arpl
adc
test
xchg
daa
pop
mov
add
lds
hlt
arpl
push
das
or
aas
sbb
shl
test
jnp
mov
push
pop
mov
in
nop
mov
inc
cmp
sub
xchg
jns
adc
popf
mov
push
adc
popa
jmp
mov
into
pop
push
mov
add
push
push
jg
cmc
test
popa
cmp
mov
fst
cli
xchg
dec
in
sub
add
xor
pop
push
xchg
test
xchg
sub
daa
and
call
enter
xchg
adc
loopne
iret
fcom
push
loope
xchg
mov
js
outs
mov
hlt
addr16
jbe
jge
mov
je
cwde
mov
into
mov
xchg
test
aam
movs
push
ins
jmp
xlat
sbb
pop
data16
xchg
cmp
aad
mov
cmc
daa
or
mov
data16
xchg
es
hlt
scas
mov
test
inc
aam
sub
sbb
mov
in
sbb
add
aad
inc
xor
jne
hlt
daa
out
mov
pop
stc
loop
adc
sar
aaa
mov
xchg
add
bound
and
pop
xor
push
fcom
mov
aam
mov
cmps
adc
call
sub
lock
stos
ja
fld
adc
xchg
mov
(bad)
sub
mov
shl
imul
stos
xchg
and
jmp
movs
xchg
stc
cmp
lods
gs
fcmovb
test
adc
aas
pop
test
sub
fbstp
cmp
jns
mov
sub
fidiv
nop
aam
mov
mov
je
mov
ss
js
sti
xchg
adc
pop
pushf
in
or
or
int
inc
xchg
clc
push
mov
rcl
(bad)
jp
int
scas
xchg
fisub
adc
pop
aad
ret
inc
mov
fst
ss
jp
push
jae
out
nop
adc
sbb
mov
sub
xchg
aad
mov
pop
xor
and
nop
jo
daa
mov
pop
sub
push
(bad)
div
pop
xchg
sbb
stos
xchg
jl
and
inc
hlt
sahf
mov
mov
das
xchg
repnz
mov
shl
and
repz
popa
aam
leave
dec
xchg
aaa
mov
and
ret
push
fistp
sub
jp
and
nop
fs
scas
dec
inc
je
mov
scas
pop
dec
rcr
push
dec
gs
test
cdq
xor
pop
data16
push
xchg
and
test
(bad)
cmps
adc
into
mov
idiv
cmp
xchg
(bad)
dec
pushf
loopne
mov
xchg
iret
mov
xor
lds
dec
mov
push
add
fs
out
xchg
and
mov
test
adc
ret
xchg
rcl
xor
xchg
clc
cmc
jmp
cmps
xchg
mov
and
xor
iret
adc
push
mov
dec
or
imul
mov
inc
sub
hlt
call
xchg
pop
adc
and
mov
das
addr16
and
leave
fsubr
xor
adc
int3
add
jb
xchg
and
push
movs
xchg
adc
push
cmp
aas
jmp
dec
xchg
mov
scas
fsubrp
xchg
cdq
sub
aaa
push
xchg
xor
xor
sub
mov
aad
push
je
xchg
jl
sar
sbb
ja
xchg
jp
jmp
inc
cmps
pop
adc
push
jo
adc
pop
sub
inc
pushf
xor
wbinvd
jb
stc
les
xchg
xchg
mov
pop
mov
push
or
dec
mov
pusha
sub
out
xchg
inc
inc
sahf
sbb
adc
cmp
inc
mov
cmp
hlt
mov
popf
leave
and
mov
mov
jno
data16
cmp
out
stos
sti
inc
popf
stos
mov
out
mov
leave
sbb
sti
xchg
jmp
fiadd
cli
pushf
push
adc
pop
(bad)
mov
or
test
cmps
outs
jge
leave
ja
push
cmps
imul
lahf
stc
or
dec
xchg
mov
jnp
sti
(bad)
and
xchg
mov
std
cld
lea
jle
push
xchg
into
je
add
fild
mov
call
mov
sub
mov
pop
sbb
aad
js
add
push
jae
push
dec
jne
fnstenv
dec
xchg
stos
mov
jbe
and
or
into
ins
je
inc
and
ror
repnz
fwait
inc
arpl
nop
fcom
jbe
or
jnp
xor
dec
js
(bad)
stc
fld
and
mov
mov
xchg
nop
pop
aam
mov
gs
mov
aad
and
xchg
jbe
push
pop
sti
mov
xchg
add
mov
popf
lea
mov
lods
loope
daa
dec
sahf
test
in
leave
add
xor
sbb
or
xchg
mov
and
add
xor
xchg
imul
out
xchg
and
add
or
in
std
push
repnz
faddp
data16
icebp
adc
scas
and
mov
lds
add
mov
lds
pop
mov
call
xchg
ror
dec
imul
cmc
mov
jo
mov
mov
sar
lahf
xchg
pop
dec
rcl
hlt
pop
cwde
jmp
push
cmp
nop
mov
imul
xchg
std
cmc
(bad)
pop
mov
sbb
fbld
sub
rol
mov
jb
adc
mov
mov
xchg
int
mov
pop
shr
cmp
dec
cld
imul
cmps
adc
cmp
push
xchg
pop
xor
out
out
lds
xchg
outs
cmp
repnz
sbb
push
push
push
pop
js
mov
int
lahf
push
push
shr
enter
push
inc
xchg
out
mov
call
add
dec
jbe
mov
mov
mov
inc
enter
je
retf
pop
xchg
push
cmps
fnstsw
inc
inc
xchg
pop
movs
mov
lods
inc
xor
out
sbb
mov
test
pushf
jmp
js
pop
xchg
cmp
dec
dec
inc
je
loop
xchg
ins
leave
iret
(bad)
xchg
rcr
or
add
jge
jno
push
mov
add
jne
pusha
mov
in
push
xchg
adc
fistp
aad
pop
mov
lahf
repz
popf
and
fs
xchg
cmp
imul
outs
push
int
pop
inc
xchg
inc
lock
inc
cmp
cli
xchg
mov
rcr
xchg
mov
jmp
int3
xchg
mov
jne
add
sbb
repz
pop
xchg
dec
jecxz
adc
sti
adc
mov
xchg
adc
rol
mov
xor
xchg
and
sub
das
shl
xchg
aaa
mov
ss
xchg
xchg
mov
cmp
and
pop
rcl
pushf
fist
fsubr
fwait
mov
push
jecxz
xchg
mov
xchg
pop
cs
dec
popa
and
xchg
inc
dec
ror
loop
mov
and
adc
push
test
fwait
and
adc
rcr
bnd
scas
neg
pop
xchg
xlat
xchg
cmp
sbb
adc
adc
xchg
and
ret
div
cmp
test
mov
dec
ja
cs
sbb
cmp
in
add
mov
fst
inc
ins
jbe
dec
add
inc
push
xchg
(bad)
imul
inc
retf
nop
cs
daa
xchg
pop
jecxz
jmp
(bad)
repz
frstor
in
mov
add
rcl
and
pop
and
pop
mov
je
cmp
inc
mov
rol
pop
fwait
cli
sub
popf
addr16
push
xchg
call
test
xchg
xor
xor
outs
inc
sbb
xchg
jb
popf
xor
imul
cdq
inc
stc
mov
xor
iret
movs
clc
push
inc
ret
mov
jp
xchg
push
adc
lods
sub
in
ins
(bad)
xor
mov
or
mov
mov
push
pushf
sbb
pop
pop
gs
out
addr16
jmp
pop
jl
adc
jge
popf
mov
adc
cmps
push
xchg
ja
jecxz
out
movs
dec
sub
adc
repz
xchg
xchg
push
pop
pop
out
outs
xor
xchg
cld
sbb
and
cmp
xchg
call
dec
inc
outs
xchg
(bad)
jmp
push
test
mov
xchg
call
sub
or
pop
jo
cwde
xchg
mov
stc
cmp
adc
retf
or
neg
cmp
adc
fdiv
jp
adc
mov
xchg
test
adc
jmp
fistp
xchg
lods
sub
adc
ja
xor
out
retf
mov
mov
xchg
jecxz
dec
adc
and
cmp
dec
je
popf
enter
or
inc
push
loopne
je
dec
add
mov
mov
fwait
test
mov
in
adc
mov
xor
ins
(bad)
in
repz
jp
(bad)
xchg
dec
cdq
ja
xchg
push
dec
sbb
sub
inc
mov
std
cld
xchg
jae
aaa
pop
ficom
(bad)
inc
xchg
js
sbb
out
dec
add
mov
xor
inc
mov
mov
xchg
push
xchg
push
aas
hlt
lods
ins
fdivr
xchg
int
xchg
stos
popa
ficom
and
push
xchg
xor
das
test
xchg
in
mov
cmp
xor
sbb
or
adc
xchg
adc
(bad)
ins
sub
xchg
push
add
lds
push
arpl
mov
fist
push
je
xchg
jo
in
inc
dec
mov
imul
loope
jns
fs
test
test
inc
pop
sub
ins
shl
int
sub
scas
fcom
mov
and
out
hlt
stos
push
mov
icebp
mov
enter
xchg
sub
sbb
push
xchg
inc
and
sbb
hlt
push
dec
aam
mov
mov
add
pop
stc
lea
sbb
jo
jmp
stos
mov
movs
push
xchg
retf
bound
(bad)
cli
xchg
ja
xchg
mov
fild
xchg
adc
js
test
lods
mov
pop
call
xchg
xor
sub
mov
leave
xchg
popf
push
and
mov
sub
cli
mov
call
lea
or
nop
mov
mov
mov
arpl
lods
retf
shl
or
lock
sub
stos
not
int
outs
jns
mov
movs
cmp
xchg
jne
popa
jnp
xor
lea
pop
not
cmp
scas
in
lea
das
jle
xchg
mov
lds
jne
pop
fwait
sbb
mov
or
pop
rcr
fisttp
and
push
push
jg
xchg
stc
hlt
jecxz
mov
imul
test
les
jbe
and
addr16
(bad)
xor
loopne
push
cmps
push
push
test
push
xchg
in
nop
cmp
adc
in
mov
aam
mov
pop
sti
cmp
(bad)
hlt
sub
inc
mov
bound
xor
and
adc
mov
les
scas
lods
inc
add
(bad)
int
xchg
mov
mov
xchg
add
cmp
ret
add
test
pop
pop
outs
pop
fcomp
loope
xor
ins
ds
pop
mov
push
xchg
repz
mov
retf
pop
adc
mov
jnp
mov
mov
dec
pop
xchg
(bad)
push
je
xor
xchg
mov
push
call
retf
and
pusha
push
sub
jg
sbb
lgs
mul
nop
dec
xor
cs
add
mov
jbe
inc
inc
dec
test
jne
ss
lds
inc
cmp
sub
je
das
arpl
sbb
pushf
out
inc
fsubr
cmps
mov
fsub
push
je
ja
inc
dec
xchg
push
adc
jmp
cmp
xchg
hlt
arpl
push
cmps
push
fwait
xor
cld
pop
and
jbe
xchg
(bad)
popf
call
js
sbb
fwait
cmp
xor
xchg
mov
xor
mov
inc
xchg
out
retf
daa
mov
jbe
jge
jl
ret
inc
xchg
xor
fwait
into
(bad)
ins
js
imul
ins
loop
mov
jp
xchg
push
pusha
pop
jge
and
sbb
push
int3
out
pop
xor
lock
retf
add
adc
xchg
ror
and
xor
test
in
mov
aaa
popf
mov
ins
push
in
shl
cmps
inc
or
ficom
pop
int3
or
mov
out
push
push
mov
shr
es
lods
xchg
pop
int
test
jg
movs
imul
xchg
iret
jae
arpl
test
xchg
aaa
push
fst
mov
xchg
pop
arpl
dec
xchg
loop
jl
pop
movs
fs
mov
je
pop
test
push
mov
rcl
adc
sub
cdq
jns
xor
xchg
jp
mov
popa
jl
inc
xchg
inc
shr
mov
cmp
mov
sub
mov
(bad)
ficom
and
adc
xchg
sahf
sub
aaa
xchg
rcr
dec
or
pop
adc
dec
repnz
mov
pusha
xchg
in
push
push
aaa
in
push
pop
xchg
jno
adc
and
pop
xchg
stos
inc
mov
jge
fcomi
retf
(bad)
jmp
push
das
dec
xor
mov
nop
jl
inc
or
jno
adc
mov
ret
and
sahf
xchg
in
cmps
lods
mov
fld
adc
mov
xchg
cmovle
(bad)
adc
inc
(bad)
bnd
adc
stos
das
jbe
xchg
pop
inc
stos
dec
aam
(bad)
repnz
cmp
push
imul
jbe
jge
add
or
push
pusha
jle
pop
xchg
pushf
into
add
cmp
mov
in
pop
or
xchg
or
fdiv
cmps
repz
xchg
out
idiv
lods
xor
mov
sbb
xlat
lea
repz
xchg
jp
cs
inc
mov
sbb
jl
outs
out
pop
es
push
push
addr16
xchg
dec
lock
stos
adc
rcl
add
xchg
scas
and
adc
into
push
pop
jb
mov
cmp
arpl
push
xor
and
pop
aam
and
or
ins
adc
je
leave
enter
mov
mov
jle
xchg
loopne
mov
sub
xchg
cmp
lods
mov
mov
adc
sub
mov
jle
dec
and
cs
push
xlat
js
pop
add
call
cdq
adc
fist
push
jnp
mov
inc
pop
sub
loope
ins
xor
xchg
xchg
mov
ins
xchg
jbe
cdq
cmp
xchg
cmps
fld
or
fbld
adc
leave
out
adc
xchg
add
xor
inc
int
mov
and
sbb
dec
jecxz
fldl2t
mov
cs
mov
out
mov
les
xchg
and
ins
test
ret
cmps
or
clc
loop
mov
arpl
sahf
and
xchg
and
inc
push
fist
add
mov
int3
and
push
add
inc
jnp
aad
or
dec
mov
imul
imul
adc
xchg
lock
ror
cwde
mov
add
or
add
xchg
in
mov
lods
cmp
push
(bad)
xchg
enter
fsub
ins
jne
lea
or
sbb
cli
test
sub
js
dec
(bad)
sbb
xchg
stos
jle
bound
sbb
mov
mov
and
fstp
test
ret
mov
bound
cmps
add
pop
xchg
sbb
mov
sar
mov
mov
xchg
ins
shl
push
mov
aad
xchg
mov
dec
not
rcl
fist
ins
jae
stos
clc
test
cdq
xchg
push
out
pop
dec
push
jmp
imul
cmp
scas
test
or
cmp
xchg
lock
xor
adc
in
test
sahf
pop
cs
jmp
(bad)
push
(bad)
addr16
jae
push
inc
retf
faddp
pop
rcr
call
sti
scas
ins
xchg
mov
mov
xchg
push
aam
leave
cmps
fbstp
mov
mov
in
mov
mov
in
jae
arpl
pop
xchg
xchg
mov
leave
adc
stos
cmp
xchg
cwde
and
ret
inc
dec
out
pop
fmulp
fwait
sbb
jbe
lahf
xchg
shl
xchg
sbb
mov
push
push
inc
out
pop
xor
or
dec
jle
mov
hlt
outs
inc
xchg
scas
in
push
jne
lea
movs
lods
dec
mov
rcr
pop
xchg
xchg
in
sub
popa
inc
lods
xchg
add
adc
ror
sti
push
mov
scas
xchg
xor
aad
ficom
into
inc
mov
xor
and
xchg
adc
cmp
jnp
(bad)
shr
jg
push
jecxz
xchg
push
dec
mov
repz
sahf
pusha
repnz
fwait
stos
stos
in
jne
nop
lahf
jecxz
or
and
xchg
in
pop
test
iret
mov
fisubr
faddp
xor
cwde
lahf
dec
xchg
icebp
outs
mov
(bad)
or
xchg
sti
loop
mov
add
(bad)
jg
mov
xchg
ret
cmp
mov
mov
or
lock
mov
test
adc
xchg
xor
(bad)
add
or
xchg
mov
in
mov
xor
adc
aaa
dec
in
cmps
ja
ss
adc
popf
add
push
repz
sub
in
fwait
cmp
xchg
iret
adc
jg
stos
xchg
(bad)
pop
fild
xchg
loop
in
sbb
mov
test
mov
inc
push
xchg
push
(bad)
or
fmul
add
arpl
pop
sbb
rol
jle
jns
adc
cli
int3
jno
xor
frstor
scas
jne
loop
adc
bound
fs
push
push
adc
sub
cmp
out
xor
inc
bound
mov
push
xchg
jge
or
mov
or
cmp
jo
or
xchg
push
dec
and
(bad)
(bad)
fucomip
push
xchg
(bad)
sbb
xchg
daa
fwait
test
inc
xchg
xor
push
xor
cmc
jmp
sub
movs
loop
fwait
or
test
and
xchg
add
push
fcmovnb
xchg
mov
mov
adc
jg
cmps
int3
xlat
push
cwde
inc
xor
int
push
shr
pop
hlt
std
cli
js
jmp
xchg
inc
cmp
adc
aas
add
xchg
fisub
nop
xchg
and
push
test
mov
xor
xchg
ds
xchg
sub
fild
mov
imul
pop
and
mov
and
xchg
popf
and
jp
cmps
xchg
ror
stos
sbb
adc
daa
mov
aam
enter
in
cld
pop
aad
add
xchg
lods
or
mov
stc
xlat
and
dec
popf
cmps
lock
das
fistp
xchg
jnp
stos
sub
xchg
rcr
in
push
inc
adc
sub
(bad)
fimul
push
cwde
dec
cmps
pop
gs
and
adc
test
fcomp
pop
inc
xchg
jmp
mov
xchg
aad
inc
xor
ds
xchg
pop
sahf
jnp
(bad)
xor
sbb
xor
mov
call
jno
cmps
cdq
in
stos
psllq
popf
stc
call
xchg
cs
jmp
lea
add
repnz
xchg
cli
imul
mov
neg
(bad)
jo
loopne
aam
fnstcw
push
xlat
xlat
fnstsw
popf
add
sbb
cdq
ret
iret
or
xlat
cdq
adc
movs
add
cli
movs
jmp
fadd
lahf
add
scas
adc
sbb
out
outs
inc
xlat
or
xlat
movs
(bad)
push
sbb
xchg
xor
xchg
pop
sbb
jp
(bad)
cmp
cmp
movs
lahf
inc
adc
xchg
into
mov
inc
jb
stos
lods
shr
xlat
sar
xlat
xchg
stos
call
xchg
inc
dec
test
pminub
mov
adc
push
icebp
(bad)
je
and
enter
xchg
jl
jge
(bad)
gs
mov
cmps
arpl
cmp
js
shr
mov
fisttp
lahf
in
fcom
xlat
cdq
jo
xchg
mov
ret
popa
mov
or
xlat
mov
jns
push
xchg
xlat
into
fcmovb
retf
add
repz
and
hlt
movs
les
cmps
jle
cmc
aam
sar
cli
cmps
fwait
jmp
leave
jae
xlat
mov
xchg
push
adc
sub
xchg
push
jns
mov
inc
call
dec
ret
in
xchg
test
cmp
movs
xlat
cmp
or
xchg
cmp
mov
sbb
aam
push
das
mov
xchg
xlat
inc
pop
cmp
mov
inc
pop
jl
inc
test
mov
js
adc
xlat
sbb
xor
jp
push
lahf
and
xchg
scas
test
cs
mov
loopne
in
call
pushf
add
xchg
xlat
mov
jmp
pop
push
mov
jne
aas
cmps
icebp
mov
cdq
cmp
adc
xor
sbb
jmp
xchg
ffree
fcmovb
retf
mov
xchg
mov
xor
or
adc
cwde
cmps
stc
cwde
or
je
mov
stos
pop
jp
inc
xlat
adc
out
in
xchg
fwait
test
sbb
pop
in
xlat
fadd
adc
imul
cmp
jae
push
fidivr
aam
and
mov
xchg
adc
shr
dec
pop
loope
xchg
add
call
add
enter
test
xchg
pusha
je
mov
ja
pushf
jl
jge
sbb
inc
xlat
mov
xchg
(bad)
lea
adc
stos
fsubrp
pop
fisubr
neg
xchg
sbb
js
jmp
(bad)
mov
mov
push
xlat
xchg
addr16
jecxz
mov
xchg
adc
loop
xchg
xchg
mov
(bad)
jmp
fdivr
retf
add
adc
shl
jmp
dec
push
and
into
std
xchg
dec
ja
jmp
push
dec
das
add
mov
cmp
aas
push
cmp
je
ficomp
cmps
sub
xchg
pop
or
and
and
(bad)
sub
xchg
(bad)
in
and
xchg
js
jecxz
dec
adc
mov
mov
cmp
mov
je
push
fstp
push
repz
imul
xchg
jns
inc
sub
gs
stos
nop
inc
into
xor
rol
mov
xchg
fcom
(bad)
fldcw
in
fiadd
push
test
xchg
scas
fdiv
call
lods
jecxz
imul
fs
ja
pop
push
daa
cmps
push
movs
adc
inc
xchg
std
ins
scas
mov
stc
add
retf
outs
inc
xchg
pop
sbb
js
inc
into
cmp
jne
iret
or
push
cmp
stc
sub
push
push
cmp
cmp
push
stos
in
xchg
jne
std
ret
jecxz
jl
xchg
jno
lea
clc
push
add
xlat
ja
xchg
push
push
push
xchg
shl
mov
xchg
lods
jbe
adc
push
in
aad
or
cmp
shl
pop
out
je
adc
mov
rcl
lea
dec
jns
ins
sahf
or
mov
xchg
xor
or
xor
xchg
mov
fstp
jl
rcl
add
(bad)
mov
cmp
or
loope
inc
movs
sahf
xchg
sub
gs
iret
mov
adc
jne
int
lahf
imul
pop
add
js
xchg
fld
retf
mov
mov
sbb
add
xchg
lock
jae
inc
mov
adc
rcr
pop
fisttp
sbb
inc
add
and
std
xor
xchg
in
sbb
fcmovnb
add
out
daa
xchg
(bad)
xor
popa
fcom
pop
xchg
ds
hlt
mov
ins
fwait
mov
hlt
or
scas
pop
js
cmp
dec
sbb
lahf
pop
aam
cwde
mov
lds
mov
xor
and
dec
xchg
data16
repnz
(bad)
mov
xchg
and
jmp
js
xor
xchg
fldcw
jp
mov
loopne
mov
sub
pop
ins
xchg
adc
and
xchg
lahf
aaa
adc
xchg
retf
inc
in
mov
pop
push
in
or
or
mov
mov
adc
in
xchg
push
fidiv
xchg
out
xchg
addr16
(bad)
nop
pop
mov
lahf
mov
in
pop
xchg
dec
push
scas
out
arpl
popf
or
xchg
dec
add
mov
jnp
mov
bound
call
xchg
jo
jmp
pop
xchg
xchg
dec
je
jbe
ss
scas
loopne
adc
idiv
mov
retf
test
and
or
jle
pop
mov
nop
jae
xchg
push
xchg
inc
mov
xor
mov
jbe
xchg
mov
out
push
(bad)
mov
(bad)
aam
add
dec
fs
fwait
mov
sub
mov
push
into
xor
pop
push
xchg
outs
adc
mov
int3
sahf
shl
jae
add
xchg
cdq
xor
fisub
fwait
mov
popf
fstp
jmp
scas
cmp
sar
(bad)
(bad)
int3
xchg
je
clc
sub
das
bound
sahf
and
sar
aam
fdivr
jo
push
xchg
cmps
and
pop
das
sbb
or
fisubr
loop
in
xor
js
jge
cmp
je
mov
les
arpl
xchg
out
mov
or
dec
xchg
ja
ins
or
and
enter
sub
xchg
movs
xor
in
sub
xchg
imul
mov
push
fstp
pop
inc
add
stc
cmps
(bad)
lods
dec
ins
xchg
cli
in
popa
mov
inc
add
ss
pop
dec
out
pop
pop
or
inc
sub
dec
std
dec
loop
les
in
inc
pop
popf
jnp
xchg
dec
xchg
jge
aas
jecxz
js
xor
das
test
add
popf
pop
inc
retf
mov
xchg
cmp
xlat
fwait
test
sub
shl
popf
lea
mov
popf
xchg
cmp
push
sbb
test
ror
repnz
icebp
test
xchg
(bad)
and
pop
in
test
xchg
pop
add
test
dec
test
cmp
sar
xchg
shl
pop
mov
xor
xchg
add
je
jl
cmc
adc
lahf
clc
push
pusha
and
sahf
push
pop
fsub
sbb
jb
loopne
fist
rol
mov
mov
add
cmps
mov
test
aad
inc
mov
or
cdq
adc
jl
xchg
pop
(bad)
adc
xchg
arpl
in
lahf
loope
and
or
ja
pushf
mov
dec
aaa
sbb
stos
pop
sbb
push
xor
scas
adc
jmp
fs
mov
jecxz
les
or
or
(bad)
stos
mov
sbb
mov
shr
fwait
cmps
cmp
cwde
fisttp
imul
or
or
int3
aam
sub
out
adc
cld
push
push
adc
mov
and
cmps
inc
mov
xor
leave
lods
cmc
cdq
js
xlat
xchg
dec
or
ror
pushf
pop
adc
xor
bound
int3
jmp
adc
mov
xchg
hlt
outs
cwde
xor
rcl
push
mov
sbb
cmp
mov
pop
icebp
xchg
movs
push
test
jecxz
addr16
mov
in
loope
mov
push
jl
push
std
int3
and
lahf
push
sub
test
and
mov
pop
into
push
xchg
outs
scas
inc
call
xchg
cmp
movs
in
sub
pop
stos
xor
cmp
xchg
xchg
stc
pop
adc
push
add
faddp
repnz
call
fld
xchg
loopne
out
aam
aad
lods
xchg
mov
stos
pop
cdq
(bad)
jg
jle
sbb
xchg
push
out
iret
lahf
add
jo
push
ja
cmps
jmp
push
sti
popa
test
xor
pop
xchg
add
rol
bt
outs
enter
adc
mov
push
retf
push
icebp
je
xchg
repz
outs
pop
out
mov
jle
ret
(bad)
xchg
(bad)
cmp
or
mov
push
xchg
mov
pop
or
add
push
rcl
cmp
push
aam
push
aaa
lods
cli
xchg
add
or
gs
mov
jg
fdivrp
xchg
xchg
adc
mov
xor
pop
in
inc
test
push
repz
xchg
fbld
inc
xchg
dec
mov
(bad)
adc
leave
retf
mov
dec
fcom
sahf
push
or
xchg
addr16
push
mov
js
fwait
and
fwait
arpl
scas
pop
add
(bad)
xchg
adc
xlat
cmp
push
out
cmc
ja
(bad)
in
outs
xchg
xor
iret
pop
mov
mov
imul
(bad)
pop
xor
xchg
loop
hlt
push
repnz
adc
push
aam
dec
ret
out
xchg
xor
push
(bad)
mov
mov
xchg
mov
cmps
mov
sub
aaa
xchg
xor
xchg
jmp
mov
mov
adc
rcr
ret
cmps
imul
shl
pop
jecxz
out
push
xlat
dec
outs
loopne
retf
shl
mov
rcl
add
jnp
cwde
icebp
int
pop
ja
ds
mov
jmp
sbb
stos
enter
test
xchg
nop
or
jle
xchg
mov
aam
and
sub
dec
sub
dec
dec
mov
fsub
fwait
mov
mov
aam
dec
jle
or
mov
inc
pop
dec
sbb
mov
out
and
xchg
fdivr
outs
xchg
xchg
pop
adc
sbb
sub
hlt
xchg
hlt
retf
jge
test
imul
jp
sub
scas
cdq
push
pop
add
xchg
jne
out
hlt
and
jmp
enter
rcr
sbb
mov
in
mov
sbb
cld
inc
imul
push
inc
xchg
xchg
and
sbb
or
stos
mov
fwait
sti
iret
xchg
fwait
mov
cld
aam
adc
(bad)
dec
xchg
xchg
inc
cmp
int
(bad)
ret
push
hlt
ins
aaa
imul
hlt
daa
mov
push
lds
call
push
gs
and
or
fwait
js
xor
mov
sbb
test
xchg
sbb
pop
fldenv
ret
cwde
xor
sbb
icebp
nop
xor
sub
jne
sti
jl
and
mov
lock
xlat
nop
rcr
out
lea
scas
mov
mov
lea
lea
jge
pop
xor
fcomp
int3
ja
sbb
xchg
xor
add
xchg
es
mov
cld
lods
sbb
enter
xlat
fidivr
mov
aas
call
add
pop
pop
stos
in
fnsave
adc
sub
sbb
push
fs
test
mov
mov
mov
popa
inc
cmc
fwait
and
sub
cld
push
sub
ja
iret
sahf
leave
dec
xchg
outs
push
and
rcr
rcl
mov
add
push
(bad)
sub
std
cdq
jmp
outs
xor
clc
jae
rol
inc
mov
ror
add
ds
dec
les
into
pop
les
(bad)
fcmovne
xchg
ficom
xlat
call
es
stos
out
mov
sbb
cmp
and
iret
jb
sub
dec
mov
inc
fstp
icebp
leave
div
xchg
push
enter
mov
xchg
or
hlt
je
ficom
out
jae
ins
fwait
out
and
mov
jg
mov
in
xchg
ja
add
ds
mov
xchg
loopne
(bad)
jns
xchg
pop
bound
push
xchg
or
dec
seta
pop
push
xor
xchg
adc
and
ror
jle
ja
jl
shl
pop
xchg
loopne
(bad)
out
shl
xchg
pop
add
cmps
cwde
outs
cmp
mov
rcl
adc
lahf
es
sbb
xchg
push
push
push
pushf
pop
pop
xchg
lock
call
ret
jecxz
loopne
dec
mov
xchg
jns
stos
gs
dec
hlt
in
sahf
xchg
mov
mov
clc
ss
(bad)
adc
inc
cmp
cmp
push
xchg
pop
add
enter
sub
fild
setge
fistp
xchg
jp
mov
xchg
sub
lea
jo
xchg
dec
xchg
jge
pop
pop
mov
xchg
jg
lods
dec
pop
add
jnp
cwde
cmps
sahf
clc
pusha
sub
mov
fst
jo
aam
pop
imul
push
cmp
inc
mov
fwait
jmp
les
mov
ins
mov
jno
(bad)
(bad)
xchg
sbb
and
xchg
rcl
mov
mov
pop
and
fild
retf
leave
xchg
les
sbb
mov
xchg
pop
sar
xor
dec
cmp
(bad)
cwde
out
fs
xor
push
std
clc
mov
call
add
je
inc
xor
xor
xchg
pushf
cld
mov
cmp
(bad)
push
pop
push
cmc
mov
sub
mov
adc
mov
sbb
xchg
cli
mov
dec
into
cwde
sub
stc
outs
xor
xchg
cmp
addr16
test
pusha
mov
or
xchg
and
es
push
imul
jno
sub
movs
gs
sub
idiv
mov
jp
adc
adc
push
js
adc
cwde
mov
stos
jle
mov
fld
dec
or
(bad)
in
or
ror
jae
rol
xchg
enter
mov
test
jle
aam
rcr
loopne
xchg
and
mov
sub
or
sub
or
adc
dec
or
or
sbb
jmp
rcl
stos
xchg
bnd
sbb
xor
ss
je
mov
push
cmps
dec
cmp
xchg
cmp
sbb
fnstcw
shr
adc
mov
cmp
(bad)
xchg
mov
push
test
mov
xor
adc
xchg
int3
jecxz
jmp
lock
std
sub
rep
push
icebp
mov
cmc
mov
call
fwait
jbe
pop
mov
icebp
push
test
xchg
fbld
repnz
sbb
jp
jmp
and
out
dec
and
jbe
xchg
or
jmp
fisubr
adc
nop
shl
jle
popf
mov
lahf
xchg
test
retf
retf
nop
xchg
xor
jnp
out
xchg
dec
cmps
inc
mov
xchg
pop
pushf
inc
cmp
and
int
add
inc
lods
mov
adc
add
mov
hlt
pushf
pop
add
push
mov
mov
inc
or
push
pop
cmps
add
push
call
out
imul
and
xchg
movs
sub
loope
xchg
xchg
test
sbb
sbb
sbb
cmp
and
retf
mov
inc
jp
stos
jmp
cdq
int3
fmul
lahf
mov
call
in
(bad)
or
movs
push
push
dec
fwait
jg
sub
xor
xchg
pop
xchg
into
js
cmp
mov
xchg
cmp
push
in
push
adc
mov
(bad)
dec
jbe
mov
sbb
mov
int
je
sub
popa
in
cmp
ret
sbb
ins
pop
or
std
fnstsw
jl
loopne
cmps
and
ficomp
jge
add
cli
xchg
mov
push
and
fstp
lods
sbb
xor
xor
mov
adc
lea
xlat
dec
lods
xchg
pushf
outs
shl
dec
pop
icebp
scas
fild
fwait
mov
xchg
test
mov
xchg
arpl
mov
sub
pop
(bad)
pushf
mov
sbb
cmps
jmp
std
(bad)
jb
adc
or
aaa
dec
dec
shl
je
movs
sbb
cmc
sub
rcl
movs
adc
out
movs
nop
cld
pop
mov
clc
sub
xchg
enter
not
call
jne
push
pushf
in
bound
icebp
or
cmp
and
sbb
cmps
clc
inc
mov
sbb
fwait
cdq
ficomp
jle
mov
push
ins
std
rcl
(bad)
arpl
retf
lods
cdq
xchg
mov
repnz
xchg
ja
pop
(bad)
popf
cdq
mov
(bad)
jle
cmp
dec
inc
xchg
add
push
mov
pop
scas
ins
and
outs
cmc
pop
xchg
xchg
(bad)
mov
fisubr
push
fwait
jb
inc
(bad)
ffree
jge
data16
fbld
daa
xchg
mov
push
imul
xchg
push
lea
push
xchg
imul
or
sbb
jbe
mov
xchg
xlat
daa
or
add
adc
enter
inc
adc
xchg
xchg
retf
or
mov
scas
(bad)
adc
js
mov
xor
adc
xor
push
mov
ins
push
loope
(bad)
fbstp
and
push
mov
sahf
mov
inc
out
aas
aaa
ins
xchg
iret
out
mov
xchg
retf
or
(bad)
cmp
cmp
add
sti
lock
fwait
xchg
pop
adc
dec
sbb
xchg
pushf
xchg
push
mov
mov
xchg
test
push
repz
adc
popf
mov
pop
(bad)
das
(bad)
or
enter
icebp
cmp
ins
es
in
mov
inc
loop
jle
call
xchg
dec
ins
sub
jmp
mov
jns
adc
fwait
add
bound
inc
push
cwde
loopne
pmuludq
loopne
out
or
mov
movs
out
xlat
xor
jge
sub
dec
mov
pop
adc
cmp
mov
sahf
cld
sub
les
movs
fstp
push
fmul
(bad)
sub
jl
jae
inc
movs
outs
xor
xor
mov
xchg
push
push
mov
fdivrp
cwde
lock
xor
inc
xor
mov
adc
mov
pusha
call
lds
out
adc
push
sbb
(bad)
mov
mov
adc
mov
dec
xor
cmp
lahf
xchg
push
jmp
inc
(bad)
push
push
xchg
mov
data16
add
lds
js
shr
jle
ret
push
xor
rcr
aas
xlat
adc
add
dec
push
and
mov
fwait
xchg
mov
movs
dec
sbb
push
jmp
pop
xor
mov
je
xlat
mov
aam
ror
xchg
lods
icebp
xchg
in
mov
cmc
hlt
push
icebp
xchg
daa
add
(bad)
xchg
mov
xchg
xor
sbb
div
xchg
dec
xor
imul
je
imul
xchg
clc
(bad)
imul
retf
xchg
push
sbb
inc
mov
dec
cmp
jnp
pop
repnz
xchg
lods
loop
out
repz
or
cmps
mov
mov
stos
lods
cmps
ret
dec
adc
rcl
hlt
outs
xchg
sub
and
or
in
xor
daa
out
xchg
pop
and
test
sbb
cld
lahf
stos
mov
mov
pop
sbb
pop
adc
and
pop
scas
fcomp
fdivrp
mov
mov
jl
ins
popf
add
mov
call
and
(bad)
int3
xchg
jl
inc
test
mov
jl
push
xchg
add
ins
push
test
mov
and
movs
fadd
stc
sbb
jmp
push
adc
push
neg
mov
ficom
pop
xchg
inc
in
xor
xor
xchg
and
push
mov
push
jnp
mov
inc
(bad)
ja
inc
pop
movs
push
xchg
inc
mov
or
add
or
xchg
pop
dec
xor
jne
jmp
dec
push
xchg
mov
push
enter
ins
sbb
push
jecxz
fisttp
adc
inc
mov
or
imul
xchg
lods
stos
je
or
psubusb
add
push
pop
xchg
inc
push
or
or
xor
lahf
movs
test
adc
or
aaa
outs
xchg
bnd
xor
mov
imul
test
mov
dec
mov
daa
mov
dec
aas
pop
sub
adc
xchg
or
test
addr16
fsub
cmp
push
mul
ss
or
rcl
dec
cmp
mov
or
pop
das
jns
nop
aaa
stos
xchg
pop
addr16
into
inc
mov
fcmovnb
pop
test
test
jecxz
inc
out
xchg
nop
push
or
push
aad
or
fld
in
repz
je
add
xor
sti
xchg
push
mov
das
mov
mov
rol
xchg
inc
xor
xchg
ret
and
in
ror
daa
and
mov
push
cld
leave
add
cli
es
fldcw
sbb
or
jb
cwde
xor
sub
mov
jl
out
push
xor
jmp
nop
jl
les
cdq
mov
xor
aas
int
int3
(bad)
sbb
push
mov
popf
stos
lahf
adc
fwait
ret
les
clc
jnp
lahf
sti
pushf
jae
adc
cld
call
xchg
sbb
imul
xchg
mov
mov
(bad)
imul
add
jo
mov
mov
xchg
cmp
jnp
retf
xchg
xchg
rcr
popf
mov
hlt
pop
sbb
dec
cmp
dec
jo
xchg
mov
scas
and
xchg
dec
ss
loop
push
fdiv
shl
jne
sub
xor
or
xchg
add
and
or
sub
sub
xor
xor
(bad)
iret
mov
or
push
mov
jae
or
inc
bound
fld
sub
mov
repnz
add
push
test
cmp
xlat
xchg
sub
nop
int
xchg
mov
data16
out
test
pop
xchg
sub
mov
jecxz
mov
xor
push
and
push
ret
ja
ror
lods
mov
push
pop
int3
xchg
std
jle
xchg
mov
jae
les
cmp
mov
xchg
jno
and
xchg
adc
test
pop
xchg
mov
hlt
leave
jno
sbb
sbb
mov
rcl
call
out
(bad)
shl
sub
fwait
ds
inc
push
je
shl
sub
jmp
xchg
and
movs
iret
xor
call
sahf
cmp
shr
dec
mov
and
xchg
push
mov
nop
hlt
dec
fst
hlt
dec
pop
sbb
or
sti
and
aas
xchg
xchg
aam
icebp
or
fistp
adc
jp
xchg
in
rcl
fstp
adc
mov
lods
xchg
xor
int3
shr
jp
xor
js
aaa
cmps
dec
rcl
jne
ficom
cmp
rol
xor
test
je
jno
xchg
or
jle
in
lea
xchg
mov
(bad)
xchg
(bad)
mov
icebp
lods
ins
les
jmp
dec
popa
fwait
ret
mov
inc
xlat
sbb
scas
xchg
xor
ins
jae
add
or
xchg
push
xchg
or
sbb
pop
pusha
xchg
fld
mov
cwde
loopne
out
xchg
fisttp
mov
cmps
repz
(bad)
mov
pusha
add
xor
(bad)
(bad)
xchg
shl
outs
xchg
mov
inc
iret
fwait
xchg
sbb
adc
mov
imul
data16
int
gs
mov
in
jbe
cld
xor
call
daa
test
nop
xchg
test
outs
cmp
into
mov
xor
adc
xchg
mov
mov
stc
mov
or
dec
push
test
mov
push
cwde
fisttp
pop
push
rol
aas
inc
outs
adc
mov
in
jl
shr
push
xlat
xchg
jbe
mov
xchg
fcmovbe
outs
test
push
xchg
xchg
inc
ret
pop
xchg
adc
arpl
push
call
out
fwait
xchg
mov
neg
or
mov
pop
ss
mov
push
pop
repnz
push
xchg
sub
arpl
xchg
mov
test
stos
jns
mov
pop
pop
mov
sbb
lods
fstp
sub
xor
push
stos
adc
mov
and
aad
xchg
pop
mov
ror
jp
xchg
hlt
loop
and
mov
ja
adc
leave
or
les
xchg
jl
inc
push
fwait
(bad)
sti
int
mov
mov
int
inc
xchg
mov
sub
adc
clc
sbb
add
xchg
and
pop
xchg
pop
cmc
jge
cdq
inc
cwde
lea
adc
push
es
inc
test
xor
iret
or
jo
stc
add
adc
mov
out
push
add
inc
mov
and
xchg
arpl
iret
mov
dec
adc
int
jo
enter
mov
test
(bad)
pop
xchg
out
xchg
mov
adc
(bad)
add
bnd
loope
dec
xchg
mov
jno
adc
gs
pop
xor
cmp
mov
jo
popa
and
jns
jae
call
xor
jmp
daa
mov
lds
add
pusha
jle
popf
add
loop
inc
xchg
mov
sub
cld
popf
ins
and
cmp
jg
(bad)
stc
dec
mov
psrld
xchg
mov
xchg
std
push
mov
mov
xchg
sub
pop
aam
mov
fs
addr16
mov
bound
jecxz
xor
test
mov
adc
nop
adc
aam
sub
rcr
shl
mov
mov
sti
int3
call
push
popf
push
sub
(bad)
cmps
mov
fwait
jg
cmps
cwde
xor
jge
xchg
push
fimul
mov
adc
ror
xor
adc
pop
js
add
cmps
cmp
pushf
test
iret
xchg
jle
push
scas
sar
or
icebp
xor
test
push
xchg
scas
sbb
test
push
in
xchg
mov
mov
xchg
popa
push
fisttp
(bad)
stos
cli
jno
repz
scas
call
xchg
adc
push
mov
ins
(bad)
xchg
sbb
xchg
in
sbb
xchg
imul
pop
ja
cmps
fcmovnbe
in
ins
mov
mov
add
xchg
sub
cmp
mov
mov
mov
(bad)
popa
jl
xor
sbb
push
(bad)
fist
add
xchg
cwde
std
shl
ret
daa
lahf
push
(bad)
xchg
pop
fcom
push
pusha
popf
push
pushf
(bad)
mov
sbb
aad
fdivr
dec
xchg
imul
test
cmp
addr16
jb
push
sub
xchg
cmps
or
sub
popf
mov
in
imul
outs
mov
or
push
scas
sbb
ficomp
je
pusha
mov
jo
fs
inc
pop
mov
xor
out
pop
ins
cdq
xchg
fistp
mov
xchg
mov
cwde
push
xchg
pushf
jae
dec
repnz
pop
mov
je
add
adc
xchg
sbb
push
sbb
cmp
push
sbb
mov
pop
jge
cld
jmp
push
lea
popf
por
mov
add
popf
and
and
dec
call
push
shl
icebp
and
cld
in
jno
push
mov
fwait
mov
pop
inc
inc
sbb
mov
aam
mov
hlt
loopne
xor
or
nop
or
adc
xor
dec
ret
ins
jno
jmp
jge
mov
mov
fnstenv
xchg
xchg
mov
std
fistp
mov
shl
adc
add
push
call
mov
pushf
xor
sbb
add
sar
add
in
cmps
and
xchg
jo
pop
xor
js
je
mov
sbb
call
iret
mov
test
pop
push
in
ins
fist
jb
movs
ret
loopne
sbb
xchg
ror
int
pop
popf
sbb
loopne
adc
jecxz
scas
or
inc
mov
push
test
dec
lahf
sbb
and
or
add
jb
fwait
mov
out
xlat
xor
adc
jl
xchg
test
call
dec
rcl
xchg
in
xor
popa
inc
cdq
sar
mov
jo
int
(bad)
fwait
push
and
je
mov
lock
push
pop
mov
push
repz
xchg
pop
xchg
mov
and
out
nop
adc
outs
mov
cs
xchg
mov
mov
imul
sbb
mov
div
dec
mov
cmc
enter
adc
stos
xchg
xchg
mov
pop
or
mov
xchg
fsub
sbb
repz
stos
mov
jne
cmp
les
ret
push
inc
xchg
stc
jbe
inc
adc
xchg
add
out
push
(bad)
fwait
mov
fisttp
xchg
call
jnp
cmp
sar
push
push
cmp
dec
retf
aam
je
mov
add
inc
in
loop
mov
mov
adc
shl
xlat
push
push
into
pop
sub
cmp
stos
std
cmps
xchg
je
dec
inc
icebp
xchg
(bad)
xchg
pop
and
xchg
inc
xchg
fcmovbe
test
xchg
fxch
mov
sub
xchg
lods
(bad)
xchg
fcmovb
push
out
ss
xchg
jns
out
scas
mov
jge
pop
xor
pop
lock
lods
mov
addr16
in
je
cmp
iret
dec
mov
lods
jecxz
mov
test
es
push
ret
jp
dec
hlt
jno
retf
les
xor
push
adc
jecxz
mov
out
je
out
cld
adc
pop
lahf
out
test
sub
addr16
lock
cdq
xchg
mov
jg
fist
imul
repz
xchg
enter
xchg
or
ret
push
add
mov
cmp
rcr
jp
xchg
push
sub
pusha
out
xchg
sahf
test
xchg
inc
xor
cmp
inc
adc
xchg
mov
repnz
push
hlt
fdiv
test
inc
(bad)
xchg
xcrypt-cbc
cmps
xchg
mov
mov
int3
add
cmp
xchg
not
push
mov
xchg
repz
sub
jmp
xchg
popa
adc
jnp
inc
adc
push
add
rcl
test
adc
xchg
push
push
iret
sbb
dec
xor
or
rcl
repz
loopne
jp
jmp
mov
mov
xchg
push
pop
data16
int
fist
in
jbe
jp
data16
inc
xchg
rcl
sub
int3
jb
(bad)
outs
mov
cmps
cmp
pop
aaa
loopne
jmp
stos
pop
in
js
cmps
sub
xor
adc
dec
ss
fst
int
gs
into
lods
xchg
jns
push
fstp
(bad)
mov
xchg
dec
inc
jmp
ficom
fwait
ror
aas
fs
lahf
dec
in
inc
mov
jge
adc
dec
ficom
fpatan
xchg
pop
lds
(bad)
mov
call
adc
xchg
shl
ins
pop
xchg
jnp
xor
vdivpd
call
(bad)
cld
fild
(bad)
out
je
clc
outs
xchg
push
jge
in
add
pushf
ins
xchg
sbb
fwait
mov
into
push
in
addr16
or
xchg
adc
mov
xchg
adc
inc
shl
mov
pop
adc
sahf
test
xchg
xchg
movs
(bad)
pop
adc
ins
xchg
aas
xchg
lahf
xor
pusha
mov
ins
mov
mov
repnz
fwait
push
adc
(bad)
sub
icebp
push
cmps
jae
nop
fidivr
xchg
xchg
or
sbb
xchg
stos
adc
and
xor
xor
xor
jo
xchg
mov
pop
push
pop
gs
xchg
mov
shl
mov
fstp
aad
fwait
in
int3
movs
dec
or
pop
and
jmp
pop
xchg
sub
cdq
pop
fcom
push
or
mov
xchg
movs
push
and
vmread
dec
xchg
mov
pop
cmc
adc
shr
inc
mov
outs
icebp
movs
mov
daa
jl
xchg
jecxz
cmp
xchg
and
rol
sbb
mov
mov
push
cmp
jne
leave
xchg
cwde
sub
pop
jns
xchg
fdiv
xor
xor
mov
xchg
add
sub
jno
or
data16
adc
hlt
in
out
or
pop
push
xchg
pop
and
sbb
cmp
fcomp
adc
dec
xor
mov
xor
push
lods
enter
xchg
pop
xchg
xor
sti
js
xchg
sub
push
push
es
xchg
loope
xor
lea
push
pop
stc
cld
in
or
test
jbe
ficomp
and
inc
or
je
nop
jmp
cmps
mov
loop
adc
push
out
mov
jg
adc
add
stc
pop
jp
xchg
(bad)
ds
aam
and
pop
sbb
push
jno
mov
fs
cwde
mov
ror
popf
xchg
sub
mov
out
in
adc
mov
or
out
test
or
cmp
push
fwait
xchg
inc
jmp
sub
push
pop
xor
push
pop
into
psubsb
xor
mov
pop
scas
adc
xchg
fild
cmps
jmp
stos
mov
push
adc
xchg
adc
push
shl
cwde
inc
adc
repz
inc
hlt
jo
fdiv
adc
outs
xchg
pop
mov
pop
cli
cmp
inc
or
hlt
dec
aam
xchg
inc
pop
mov
stos
sub
dec
push
or
fist
test
xor
call
pop
mov
xchg
mov
fsubr
add
sbb
xchg
aas
test
mov
loope
mov
add
pop
fdiv
push
cld
cmp
mov
mov
sbb
xchg
and
pop
xchg
xor
and
pushf
jge
cmps
mov
pop
adc
lahf
xchg
pushf
jmp
dec
jle
sahf
dec
pop
add
stos
ins
or
retf
xchg
ret
pop
js
xchg
pop
and
repz
retf
scas
jge
cmc
js
das
push
ja
dec
popf
retf
jl
cdq
pop
mov
enter
daa
pop
ret
call
mov
push
and
inc
cld
add
in
jmp
pop
test
leave
int
push
jge
test
popa
(bad)
jo
add
mov
cmps
pushf
xchg
mov
cdq
sbb
mov
ror
pop
adc
dec
in
cmp
pop
cmps
jl
sub
stc
push
gs
sbb
stos
fwait
ss
sti
cdq
aam
call
push
mov
movs
daa
jmp
mov
and
pop
pop
add
adc
push
ss
hlt
jl
enter
pushf
jmp
jmp
(bad)
jge
ror
mov
or
addr16
xor
mov
jecxz
mov
je
mov
les
pushf
sbb
mov
mov
fwait
mov
sub
xchg
inc
test
enter
mov
pushf
push
mov
xchg
sbb
stc
or
adc
pop
mov
out
out
mov
es
adc
xchg
or
xor
mov
push
sbb
test
jecxz
in
cmp
jns
call
xor
pop
pop
mov
adc
in
jnp
xor
xchg
xchg
jmp
pushf
es
mov
xchg
mov
mov
adc
imul
pop
dec
jb
jb
jno
cmps
daa
jmp
jge
jno
xlat
cmps
xor
scas
cld
cdq
imul
cmps
jle
cmp
loop
jp
mov
ret
aam
jl
cmc
mov
aas
mov
mov
fcmovnu
clc
inc
mov
jns
mov
pop
cli
inc
shr
jg
or
xor
fisttp
mov
xchg
clc
retf
sti
sub
loopne
sbb
lock
xchg
in
jmp
mov
icebp
fbstp
sbb
xlat
pop
es
loopne
clc
add
sahf
push
xchg
mov
ror
jp
mov
and
or
xchg
cmp
lahf
(bad)
cld
fmul
add
out
xchg
cmp
or
jle
mov
lods
ds
bound
shl
adc
jmp
pop
addr16
xor
mov
aam
fldenv
xlat
fdivr
(bad)
loope
push
ret
gs
sbb
xchg
shl
cwde
jns
daa
xor
loopne
jp
mov
scas
jmp
adc
adc
arpl
sub
xor
mov
lds
outs
jecxz
pop
xchg
mov
pop
cmp
fs
sub
xchg
cmp
dec
sub
sbb
inc
bnd
push
pusha
and
jmp
scas
aad
cwde
loopne
js
sub
pop
xchg
mov
in
push
push
cwde
int
sbb
adc
outs
lahf
xchg
pop
sub
jae
mov
mov
rol
lahf
jo
and
lods
adc
movs
popf
mov
sub
gs
test
jnp
push
xor
xchg
and
retf
jg
jae
cmp
pop
lods
xchg
sub
outs
jmp
(bad)
js
loopne
out
icebp
add
(bad)
xchg
xchg
xchg
inc
lods
aaa
aas
dec
sbb
push
js
mov
out
add
je
mov
ret
in
xlat
sahf
test
ficomp
cld
jle
ret
push
aam
add
out
or
cmp
sar
in
xor
mov
sbb
in
or
call
mov
xor
inc
dec
cmp
inc
rcr
xchg
outs
jmp
xor
jge
mov
jecxz
xchg
sahf
movs
mov
mov
sub
ss
test
xchg
mov
adc
in
xchg
and
retf
into
adc
(bad)
loopne
sti
jge
test
dec
leave
add
sub
add
jecxz
mov
popf
lods
xchg
fcmovbe
(bad)
xor
lds
fwait
sbb
cmp
adc
fldenv
je
in
into
push
(bad)
xchg
pop
or
sti
fstp
rcr
loop
xor
lahf
stc
push
sbb
mov
ror
cli
nop
push
sbb
pop
jg
mov
or
loop
into
pusha
jne
dec
mov
mov
and
sub
mov
fist
loop
clc
shr
scas
mov
push
push
in
push
add
xchg
sub
jo
cld
dec
daa
aam
jl
inc
mov
je
pushf
ret
rcl
sub
call
adc
jecxz
xchg
xchg
test
lods
loopne
pushf
mov
xchg
xchg
(bad)
arpl
enter
lods
sar
mov
sub
dec
mov
sbb
xchg
xchg
jns
ret
cwde
mov
or
xchg
(bad)
xchg
mov
daa
pop
pop
fwait
adc
call
ins
jle
xchg
jg
fidivr
rol
repnz
cmp
fwait
out
cdq
dec
jmp
jne
cmc
xchg
ja
imul
neg
push
fdivr
xchg
cld
loopne
es
mov
mov
or
push
aam
fdivr
mov
jl
inc
xchg
(bad)
fistp
jo
jno
adc
cld
xchg
shr
scas
pop
xchg
std
inc
lods
cmp
ja
dec
xchg
inc
imul
sbb
inc
and
push
jp
pop
popa
pop
fiadd
ret
mov
fwait
loopne
popf
lahf
pop
lds
sbb
lock
fwait
(bad)
push
popf
sbb
or
xchg
shr
les
jns
push
mov
stc
ss
mov
popa
xlat
adc
jns
dec
inc
push
and
mov
mov
jge
movs
adc
push
sub
and
xchg
mov
sub
aam
push
xchg
xchg
cmps
push
xchg
mov
push
out
add
mov
nop
aas
xchg
xchg
fadd
and
jle
or
je
dec
sbb
pop
rcl
dec
xchg
mov
xlat
mov
sbb
sbb
and
ins
xor
mov
mov
xor
dec
lahf
iret
cmps
and
rep
xchg
cmp
loop
pop
in
sub
dec
inc
mov
mov
cmc
inc
sbb
push
mov
cmp
xchg
sbb
in
or
mov
mov
div
adc
cmp
push
mov
or
inc
xchg
xchg
ja
jno
cwde
daa
js
xchg
in
les
bound
push
sti
xor
inc
ficomp
and
icebp
arpl
xchg
neg
adc
jecxz
fidivr
xor
cwde
in
mov
adc
mov
lods
sbb
jmp
pop
pop
jmp
aad
in
xchg
fcom
cli
push
cmps
jbe
xchg
xchg
jnp
ds
popf
xchg
lock
push
jmp
stos
fwait
scas
jg
pop
int3
xchg
into
sbb
bnd
in
mov
mov
xchg
pop
and
mov
stos
or
mov
int
add
xor
movs
inc
stc
adc
popf
ret
mov
fninit
les
jp
adc
mov
aam
cmc
aam
out
xchg
xlat
mov
out
jmp
int
stos
test
mov
cmp
xchg
mov
stos
cwde
leave
shl
ret
jge
imul
mov
cdq
nop
adc
cmp
mov
xchg
loope
lods
jmp
test
lods
shl
(bad)
xchg
icebp
xchg
push
(bad)
xchg
in
mov
sbb
sar
xchg
mov
push
iret
push
push
call
inc
enter
xchg
xchg
pop
ins
das
add
mov
cmp
rcr
xchg
jl
xor
je
rol
rol
inc
xchg
int3
fisub
xchg
mov
cmp
pop
loop
add
add
std
fst
push
push
popa
xchg
mov
scas
add
xchg
stc
sbb
or
mov
cld
mov
je
fs
jae
lea
sub
lds
mov
adc
shl
jle
cmps
cmp
add
cwde
lds
fdivp
adc
and
in
xchg
sub
mov
inc
mov
pusha
push
jo
test
xchg
inc
push
adc
and
xor
xchg
out
rcr
xchg
test
push
mov
mov
int3
iret
jns
xchg
leave
xchg
jle
push
popf
adc
sbb
xchg
std
dec
test
inc
jg
or
cdq
test
aas
cli
sbb
ret
hlt
aam
adc
pop
mov
je
jp
cmp
xchg
jae
push
pop
out
inc
sub
cwde
sbb
aas
adc
cmps
jmp
mov
je
into
mov
adc
sbb
fist
adc
loopne
sub
cmp
adc
pop
push
or
fadd
pusha
xchg
fimul
add
push
sub
out
inc
cmp
lods
lea
and
je
idiv
mov
adc
pop
(bad)
xlat
dec
push
xor
mov
pop
std
jg
xchg
jnp
sub
lock
fsub
and
(bad)
push
mov
test
add
adc
jb
sub
pusha
sbb
mov
cmp
ror
lahf
int
adc
ins
and
in
inc
mov
sahf
ds
inc
sar
xchg
cli
loopne
inc
ss
push
mov
dec
jp
sub
dec
aam
sub
(bad)
fwait
xor
push
aaa
fs
add
xchg
or
xchg
and
nop
push
movs
or
int
xor
fnstcw
mov
into
data16
mov
xchg
jl
and
nop
enter
inc
inc
out
hlt
jge
cdq
arpl
push
pop
sub
sar
jbe
ins
cli
mov
outs
xchg
sub
mov
xor
and
out
fst
gs
icebp
push
aad
cs
xchg
xchg
push
cmc
or
pusha
xchg
mov
mov
nop
dec
adc
lds
or
xchg
sbb
sti
jo
pop
mov
add
adc
jnp
xchg
ja
into
xchg
aaa
mov
sub
sub
data16
push
pop
mov
inc
ins
shl
xchg
xchg
inc
in
movs
stc
jbe
call
daa
rcl
cmp
push
pop
jg
push
pop
out
(bad)
sar
cmp
fild
jg
mov
lahf
fucom
or
xchg
xchg
adc
jmp
adc
test
shl
sub
lods
jge
push
cmps
push
sbb
hlt
adc
push
sahf
pushf
sbb
sar
adc
movs
inc
jge
jae
in
jp
cwde
sbb
shr
mov
int3
adc
mov
xor
call
retf
popa
push
and
sub
cmp
gs
dec
push
int3
cdq
in
mov
xchg
sub
cwde
sbb
inc
outs
shl
and
pusha
mov
pop
or
popf
int
mov
call
jecxz
cwde
(bad)
call
jb
(bad)
fs
mov
fwait
cmp
and
jl
jge
rcl
sub
sbb
in
push
int
(bad)
aad
jge
pop
mov
cmp
jp
js
adc
or
in
push
imul
movs
hlt
sbb
outs
pop
(bad)
mov
xchg
and
lea
mov
je
mov
fwait
mov
and
loop
int3
push
jbe
rcr
jns
lea
rol
jle
sar
int
dec
mov
std
xchg
jge
sub
jmp
popf
mov
or
cmps
std
xchg
push
fld
inc
dec
xchg
mov
adc
jmp
adc
pop
inc
fwait
(bad)
xchg
aaa
popf
sub
fisub
xchg
ret
jle
and
stos
sub
je
xchg
sub
test
add
stos
add
fwait
xchg
xchg
addr16
lods
xchg
or
xchg
(bad)
mov
inc
sub
xchg
ds
cld
cmp
mov
jnp
or
xor
ficom
sbb
cmps
mov
out
jp
int3
mov
pop
pop
shr
and
test
dec
shr
adc
xor
pop
push
xchg
adc
addr16
pushw
fcomp
ret
xchg
jmp
scas
(bad)
pop
shr
pop
xchg
movs
retf
fld
jp
(bad)
or
xchg
cdq
sahf
int3
rol
(bad)
push
pop
push
jns
das
fsubr
push
ss
mov
mov
sub
mov
and
xchg
repnz
imul
movs
lea
mov
retf
cmp
sub
inc
xchg
adc
mov
stos
shl
ret
sub
sbb
jmp
mov
div
pusha
push
cmps
pushf
hlt
inc
call
push
adc
mov
mov
and
push
push
adc
xchg
cli
sbb
aam
rcr
sbb
push
inc
push
xor
sbb
pop
fsubr
xor
cld
push
cs
cmp
xchg
xor
sbb
sbb
mov
cmps
jl
nop
popf
mov
push
jmp
add
sub
fs
lods
jmp
cmp
xchg
cdq
push
les
rcr
jmp
pushf
and
fistp
xchg
add
sub
inc
not
leave
or
sbb
jo
xchg
push
pop
jmp
pop
pop
cwde
retf
push
daa
or
lahf
jge
push
xchg
(bad)
cwde
test
cmps
mov
ins
or
popa
and
pop
add
jns
inc
jg
mov
add
push
shl
adc
cwde
xchg
mov
out
and
xchg
sahf
mov
jge
test
shl
push
and
outs
pop
push
adc
and
(bad)
xchg
mov
inc
stc
xchg
ins
push
mov
jle
rep
sbb
mov
adc
ins
pop
fsubr
xchg
push
pop
test
jge
lods
mov
xchg
pop
out
push
ins
and
mov
sbb
test
and
aas
cmp
xor
or
ret
pop
int3
lds
(bad)
fstp
xchg
movs
xor
jl
pusha
xchg
or
and
imul
mov
mov
outs
jl
sub
pop
lds
stos
xchg
dec
jg
fidivr
mov
or
sahf
xchg
aaa
test
or
xor
xchg
shr
jge
pop
cmps
adc
loop
jle
and
xchg
neg
xchg
scas
or
xchg
(bad)
lea
and
jle
xchg
xor
mov
(bad)
dec
xchg
and
cmp
mov
inc
mov
sbb
rcl
icebp
test
push
sub
ja
dec
adc
xor
fist
jno
lahf
cmp
xchg
ins
jmp
loope
xchg
pmulhuw
test
jp
mov
xchg
sub
out
test
inc
ror
fcom
pushf
inc
adc
jo
outs
xor
push
jge
pop
test
test
jo
mov
mov
sar
aas
movs
add
int
mov
pop
inc
mov
(bad)
xchg
stos
pop
pusha
iret
aaa
loope
add
retf
xchg
loopne
jmp
loope
sub
cmp
popa
dec
xchg
(bad)
aas
out
test
(bad)
or
rcr
mov
inc
pop
pusha
jae
stos
or
fcomp
pop
xchg
push
(bad)
and
pushf
or
aaa
adc
popa
pop
mov
test
xchg
repz
daa
cmp
ret
test
out
daa
cmps
out
xchg
out
ret
jle
dec
sub
adc
and
mov
rol
xchg
ret
fadd
cwde
hlt
sbb
mov
pop
adc
push
adc
aad
(bad)
cld
in
push
mov
jl
mov
push
js
mov
cmp
out
or
mov
movs
jle
in
pop
jl
mov
sbb
adc
pop
jnp
xchg
fwait
mov
pop
push
mov
xchg
call
xchg
test
inc
lahf
adc
and
bound
loopne
(bad)
mov
test
bnd
jecxz
aad
adc
movs
out
or
cwde
aas
mov
push
mov
jge
stos
inc
les
ret
cmp
and
cmp
mov
daa
jmp
shl
jmp
outs
xchg
out
mov
hlt
aad
xchg
into
loopne
retf
add
add
cwde
mov
nop
cmp
cmp
test
sar
sahf
sar
in
xchg
imul
push
aam
mov
cmp
imul
add
adc
bound
ret
iret
leave
and
mov
xchg
cmp
jge
sub
das
dec
daa
(bad)
in
fwait
out
add
mov
pop
adc
ret
mov
fld
cdq
fmul
sbb
fadd
pop
xchg
jmp
adc
sbb
cmp
push
jl
in
bswap
rcl
sub
jge
cmp
cmp
cdq
sub
das
jnp
les
xchg
ins
sbb
or
adc
movs
hlt
ret
es
mov
mov
loopne
sbb
push
xchg
mov
inc
jb
test
push
xor
xchg
pop
hlt
iret
(bad)
jl
pusha
inc
push
in
les
int3
in
imul
test
xchg
neg
imul
int3
xchg
std
icebp
fadd
cmc
pop
push
movzx
pop
adc
lods
mov
adc
fucomp
(bad)
pushf
leave
call
clc
pop
jae
mov
call
or
cmp
or
mov
mov
js
ss
push
sub
(bad)
sar
or
icebp
sbb
jbe
cmps
push
lods
out
inc
hlt
jo
sbb
mov
jl
and
ins
push
adc
mov
mov
cmp
sub
lock
popf
test
mov
int
xor
pop
jge
add
out
lea
mov
jb
xchg
push
and
inc
push
xlat
xchg
in
and
pop
imul
in
cmp
cli
xor
sbb
sahf
cld
int
push
arpl
into
cmps
shr
in
(bad)
dec
lods
jno
aad
jl
inc
xchg
lds
and
sahf
push
sar
xor
sub
adc
ret
or
sbb
das
fldenv
nop
or
xchg
push
xchg
push
dec
in
jno
mov
dec
xor
fcom
jecxz
ins
loopne
(bad)
test
xor
xor
xchg
jp
clc
push
jecxz
cmp
xchg
enter
xchg
push
setle
clc
test
in
iret
jmp
mov
outs
popa
sbb
dec
retf
mov
inc
adc
sub
jne
mov
mov
sub
pop
mov
jmp
(bad)
xchg
adc
mov
jne
mov
and
hlt
xchg
jno
xchg
cmp
inc
ds
push
adc
jle
call
inc
push
leave
xchg
lock
mov
enter
js
popa
out
inc
imul
pop
rol
pop
xchg
add
fs
mov
sbb
in
aad
fmul
sti
stos
push
pop
out
shl
hlt
pop
inc
enter
movs
fcom
ins
aad
push
popf
sbb
cli
cmp
push
pop
xchg
mov
pop
bound
mov
dec
mov
fwait
push
imul
jae
enter
xchg
popa
outs
arpl
or
hlt
dec
fwait
(bad)
sbb
jp
mov
cmc
in
and
ja
pop
xchg
add
mov
push
sahf
es
jns
shl
add
jmp
(bad)
xchg
shl
stos
cmp
mov
je
lds
mov
xchg
xchg
imul
push
fsub
pop
and
das
fcom
sub
cmps
jae
shl
and
xchg
pop
add
sbb
lahf
shl
cmp
xchg
push
idiv
and
push
xchg
adc
rcr
ret
cwde
push
xchg
outs
push
xor
(bad)
into
adc
push
cmp
xchg
loopne
push
rol
(bad)
mov
push
ficom
mov
scas
loop
cmp
pop
jo
lahf
aam
fwait
adc
sub
mov
pop
inc
cmps
int3
push
test
add
xchg
mov
mov
xchg
mov
pop
xchg
mov
xchg
jge
mov
pop
(bad)
das
fisttp
adc
mov
jle
adc
imul
int
sbb
int3
jmp
sub
jnp
lock
and
xchg
fwait
xlat
push
(bad)
pop
pop
scas
add
pop
or
jmp
mov
into
xchg
jp
popf
test
mov
mov
repnz
adc
xor
jb
cmps
add
aad
mov
jo
scas
jle
sub
jecxz
jns
gs
std
or
pop
arpl
repnz
and
neg
rcr
(bad)
pop
mov
pop
cdq
dec
icebp
push
xor
cmps
aam
(bad)
arpl
pop
jg
adc
jns
jecxz
sub
mov
rep
mov
xor
xor
call
ja
movs
daa
hlt
lds
fcomip
pop
inc
stos
pop
push
stos
dec
inc
adc
mov
pushf
hlt
xchg
jge
pop
and
movs
jmp
mov
fmul
js
add
sub
mov
int
xor
or
sbb
jmp
push
hlt
inc
jl
in
sbb
jge
mov
lods
and
out
sbb
push
xchg
lahf
hlt
inc
lock
int
push
pop
sub
inc
cmp
xchg
(bad)
cld
mov
push
int3
sub
mov
test
adc
jno
out
dec
pop
sbb
stos
je
cwde
push
push
aaa
adc
fsubp
and
bound
sub
loopne
aam
shl
and
pop
xor
test
cld
inc
repz
fcomp
mov
test
xchg
sbb
jge
repnz
adc
arpl
sub
adc
sub
dec
mov
data16
pop
movs
jmp
xchg
mov
gs
test
xchg
ins
cmp
adc
cdq
sbb
push
jmp
mov
imul
jmp
mov
or
or
pushaw
mov
jmp
call
mov
push
imul
and
ror
and
loopne
hlt
xor
xor
inc
sub
mov
or
outs
cld
sar
not
pop
mov
push
imul
in
xchg
push
repz
jl
test
fdivr
jge
shr
sbb
fcom
pushf
mov
call
mul
xchg
ror
xchg
cmps
push
pop
adc
mov
mov
mov
or
inc
mov
push
mov
stos
mov
xor
push
push
repz
sbb
mov
movs
popf
xchg
mov
inc
mov
mov
push
hlt
icebp
lods
adc
sub
jp
fistp
mov
hlt
jge
sbb
jne
xor
sbb
movs
lahf
pop
dec
mov
aam
std
jg
inc
stos
dec
or
push
inc
xchg
push
xchg
leave
adc
inc
jmp
lds
ror
icebp
sbb
cdq
enter
and
mov
ins
mov
or
jl
fs
scas
bound
sbb
sub
clc
sub
or
and
es
add
cmp
in
test
jmp
sub
in
mov
(bad)
enter
cmc
inc
lahf
sets
int3
mov
adc
mov
mov
jge
aas
(bad)
out
mov
syscall
fnstsw
cdq
dec
push
mov
jl
mov
pop
xchg
pop
sbb
pop
pusha
shr
movs
(bad)
xor
mov
jle
and
jg
imul
dec
pop
xchg
test
sbb
mov
cdq
rcl
push
call
xchg
ror
in
push
push
pop
xchg
fst
xchg
into
adc
pusha
es
retf
(bad)
sub
leave
push
mov
aas
cmp
repz
je
lods
pop
das
inc
js
xchg
or
sub
retf
mov
or
jb
xchg
lds
jecxz
mov
xchg
dec
shr
add
jmp
xchg
mov
pop
inc
push
mov
shl
stos
aad
inc
pop
jbe
xchg
push
test
and
outs
scas
and
je
cmps
pop
jnp
xchg
mov
dec
xlat
in
or
and
xchg
mov
and
fld
lods
jmp
cmc
js
mov
jg
out
outs
xchg
sub
sbb
xchg
test
test
fs
cld
adc
mov
pop
xor
push
add
stc
xchg
adc
inc
lahf
lds
xchg
push
push
or
arpl
lea
mov
out
xor
shl
test
mov
ins
out
test
jne
leave
jae
repnz
movs
fldenv
test
in
es
xchg
cmps
and
shl
mov
test
or
clc
push
mov
arpl
ins
ins
mov
(bad)
mov
js
and
sub
hlt
imul
adc
mov
ret
sub
mov
(bad)
push
lahf
mov
jmp
cdq
mov
cs
out
hlt
mov
fst
dec
xchg
(bad)
adc
jle
xchg
outs
pop
dec
cmps
sub
mov
xchg
test
xlat
dec
mov
jne
xchg
jge
xor
cwde
loop
cmps
adc
jecxz
jae
call
push
dec
add
inc
not
xchg
aad
in
pop
loopne
dec
retf
sar
pop
repz
inc
test
mov
xchg
mov
enter
je
adc
jecxz
sbb
ins
xchg
js
mov
xchg
test
jmp
aas
fiadd
out
popf
lea
call
fistp
call
xchg
aad
inc
movs
xor
dec
add
xchg
ds
iret
pop
sbb
push
movs
adc
inc
sub
je
aaa
or
arpl
lahf
pop
in
cmp
iret
call
dec
js
clc
mov
repnz
(bad)
test
pushf
xchg
sti
call
loop
pusha
sbb
mov
call
aam
mov
or
xchg
pop
es
dec
or
scas
xchg
or
ficom
imul
shr
mov
loope
mov
xchg
jae
pop
call
add
adc
ins
mov
jg
push
std
gs
adc
mov
mov
push
fwait
mov
xchg
push
mov
xor
sub
in
pop
and
pushf
jbe
jmp
pop
push
adc
mov
pop
iret
xlat
stos
imul
mov
sti
mov
xchg
fbstp
jno
jbe
mov
mov
cdq
lea
or
adc
shl
xchg
bound
js
je
movs
ficomp
pop
sbb
lds
push
xchg
arpl
push
fistp
(bad)
adc
push
xchg
mov
fs
push
pop
push
inc
outs
mov
or
xchg
add
mov
xchg
outs
xor
and
xor
jmp
jg
push
mov
fstp
out
xchg
or
daa
jno
or
xchg
rcl
bound
add
xor
addr16
or
shr
mov
popf
push
xchg
lods
push
or
hlt
pusha
sbb
xchg
add
fcom
shl
and
dec
adc
jl
ss
jne
fwait
cmp
xor
(bad)
fwait
jae
and
xchg
(bad)
test
stc
cmp
jge
stos
(bad)
rol
ins
sbb
inc
push
push
cld
pop
xchg
nop
gs
mov
(bad)
fcomp
push
outs
xor
and
aam
in
popf
add
cli
and
cmp
xor
lahf
fs
into
call
mov
mov
push
iret
mov
inc
int
ds
push
pop
das
(bad)
xchg
neg
imul
sub
sbb
int3
in
test
xchg
and
pop
popf
cmc
cld
daa
xchg
sbb
jns
mov
aad
cdq
cli
jge
mov
je
scas
rol
or
repnz
ficomp
sub
xlat
adc
adc
inc
add
jl
and
lock
js
adc
mov
popf
std
jmp
mov
xchg
sub
cmps
sub
ins
mov
dec
fwait
adc
and
xor
out
jne
pop
push
mov
test
cmp
out
mov
rcl
lds
xchg
dec
and
xor
dec
push
(bad)
popf
cdq
adc
pusha
nop
xchg
daa
push
or
adc
push
add
cli
ret
jge
jg
js
push
xchg
(bad)
fbstp
xor
into
or
cmp
and
and
xor
aam
sbb
cmp
imul
leave
fiadd
shl
sub
sub
xchg
xchg
mov
icebp
and
xchg
jns
ja
rcl
mov
xchg
mov
adc
fisubr
push
in
cmps
outs
(bad)
dec
mov
or
icebp
in
jmp
xchg
(bad)
adc
inc
(bad)
and
icebp
ja
xchg
dec
xor
xlat
cmp
add
cmps
fist
(bad)
cmp
rcr
repz
fiadd
dec
(bad)
cwde
mov
dec
jae
aam
pop
xor
aam
leave
xor
jmp
js
pop
fiadd
mov
push
pop
jg
imul
sbb
xchg
es
jne
inc
xchg
nop
addr16
mov
aad
inc
push
adc
shl
imul
imul
dec
fst
(bad)
out
xchg
cmp
xchg
xchg
sbb
jmp
cdq
std
out
and
push
loope
xchg
dec
div
je
add
mov
iret
xchg
(bad)
lods
jmp
sbb
call
test
mov
test
fs
jns
retf
jae
movs
push
popf
hlt
gs
sbb
push
sar
push
aas
cwde
repnz
xchg
rcr
dec
mov
dec
clc
adc
mov
std
and
mov
push
cdq
shl
sub
mov
push
enter
adc
sbb
fwait
xchg
jle
xchg
cmp
es
ins
test
lea
test
dec
sub
adc
or
stos
mov
loop
and
scas
call
inc
dec
or
cmp
retf
sub
xchg
mov
rol
pop
adc
stos
in
mov
push
sub
and
or
jle
lods
xchg
push
(bad)
fstp
das
lods
inc
adc
xchg
adc
mov
in
hlt
inc
sub
xchg
dec
shr
iret
lahf
mov
setnp
sub
add
ins
mov
sub
mov
shl
xchg
and
add
fwait
add
(bad)
mov
mov
lods
test
or
adc
xchg
xchg
pop
xchg
fwait
xchg
inc
and
sbb
mov
push
cmp
xchg
in
ja
loope
dec
(bad)
xchg
sub
xchg
fwait
jmp
adc
adc
cmp
out
fwait
dec
xchg
adc
fucomi
xor
xchg
adc
pop
enter
xchg
imul
sub
xchg
ret
dec
lahf
lea
xchg
popf
in
dec
mov
lahf
and
and
jmp
clc
adc
xor
xor
xchg
ficomp
xchg
bound
and
or
xchg
sbb
(bad)
jmp
xchg
jne
in
pop
outs
test
mov
pop
adc
xchg
sbb
lods
jne
mov
cdq
fcomip
fst
jl
and
sbb
neg
ja
cmp
mov
scas
xchg
inc
(bad)
dec
retf
and
xchg
pop
and
stc
xchg
push
and
jl
lods
stos
jns
int3
je
mov
or
in
call
fwait
out
imul
fwait
loop
cmps
cmp
arpl
retf
not
in
xchg
out
movs
cwde
clc
jg
ret
fwait
out
add
(bad)
int
pop
push
xchg
jecxz
stos
ror
pop
fcom
add
and
popf
pop
xchg
pop
repnz
inc
pop
cmp
inc
xor
mov
cmp
pop
test
repz
inc
or
lea
xchg
add
in
(bad)
fild
jb
mov
es
int3
jecxz
add
add
mov
jno
cmp
inc
inc
ds
or
xchg
cli
xchg
jge
popa
sbb
cwde
xchg
(bad)
out
inc
mov
movs
(bad)
adc
xchg
sar
jge
iret
fcom
mov
data16
xchg
test
lds
(bad)
in
jge
xchg
cli
arpl
jb
pop
mov
xchg
in
xchg
scas
jl
ins
sub
sbb
and
pusha
mov
(bad)
push
xchg
popa
xchg
sub
inc
jg
and
lock
jnp
or
and
cld
sub
xchg
dec
adc
xor
add
arpl
cmps
xchg
xlat
inc
test
xchg
les
mov
sahf
repz
stos
xchg
rcr
push
in
mov
call
xchg
stos
xor
inc
mov
and
sub
adc
into
lock
aad
nop
mov
mov
(bad)
(bad)
xchg
mov
cdq
mov
mov
xchg
lods
sub
lds
adc
test
dec
out
mov
xchg
mov
or
in
mov
push
ret
adc
add
loopne
mov
cwde
sar
mov
sbb
sub
xor
pop
xchg
fs
icebp
imul
int3
ret
jp
test
movs
push
xchg
mov
mov
cmps
xchg
mov
jl
lock
cli
ins
xchg
leave
test
(bad)
out
xchg
jo
int
nop
mov
enter
cmp
cmp
(bad)
int3
xchg
pop
loope
jle
cmps
sti
ja
push
imul
out
ret
movs
repnz
mov
jge
add
add
fstp
add
loope
pop
sti
sub
pop
out
dec
xchg
and
or
push
loop
add
ins
inc
xchg
xchg
sub
push
mov
scas
cmp
std
dec
out
xchg
test
or
arpl
cmp
push
retf
rcl
aad
and
fist
push
xchg
push
sbb
clc
iret
fs
imul
xor
xor
imul
mov
mov
xchg
add
fdivrp
repnz
jl
adc
push
cwde
movs
pop
cli
nop
adc
sbb
pop
test
fs
out
push
pop
or
sti
iret
popf
dec
sub
(bad)
in
xchg
cld
jecxz
ret
ins
and
jmp
lahf
loop
dec
mov
cmp
gs
push
jmp
xor
jl
repz
xchg
sbb
adc
ja
xchg
mov
cli
push
sbb
call
cdq
xchg
int3
lds
sbb
repnz
mov
sbb
cmp
cld
and
(bad)
mov
xor
pop
xor
js
les
stc
les
sub
retf
rcr
cmc
fidiv
(bad)
push
hlt
jge
pusha
mov
dec
sbb
sbb
sub
xor
xchg
and
ficom
pop
cmps
ss
adc
xchg
inc
mov
mov
(bad)
jmp
inc
mov
pop
or
cmps
jl
mov
or
jge
sub
inc
nop
ror
dec
add
push
mov
out
cdq
push
(bad)
mov
and
jl
pop
xor
add
push
lea
mul
mov
xor
ficomp
dec
or
in
sub
xchg
and
mov
mov
mov
repnz
xchg
fidivr
hlt
clc
xor
out
push
and
gs
sub
xor
fwait
ins
mov
sbb
sbb
pop
mov
inc
push
nop
mov
xor
sbb
stos
mov
jecxz
xchg
xchg
cld
popa
in
cmps
ja
std
call
outs
ins
and
aad
aam
retf
dec
adc
mov
sbb
add
mov
repz
cli
sbb
pop
adc
popf
lea
or
leave
xor
sahf
repnz
cmp
imul
or
inc
jmp
fwait
mov
mov
aam
and
cdq
stc
pop
xchg
sbb
push
sbb
xchg
xchg
adc
push
adc
aad
sbb
jnp
push
push
sbb
jge
ficomp
xlat
mov
xor
add
int3
push
aam
jle
(bad)
lea
and
xor
inc
imul
mov
lds
(bad)
iret
cmps
mov
js
repz
cwde
in
fwait
pop
stc
xchg
push
popf
sub
sahf
push
and
hlt
xchg
xchg
cmp
popa
lock
xchg
loopne
sub
sbb
jne
push
adc
or
movs
dec
lds
and
sub
popf
iret
and
xchg
sbb
cmp
aam
shr
fwait
push
xchg
aas
or
inc
adc
lods
cmc
fwait
mov
and
rcl
cmps
xor
xchg
push
nop
movs
(bad)
(bad)
je
jmp
lods
push
dec
jne
mov
shl
mov
(bad)
rol
xchg
ret
push
sbb
mov
iret
sbb
loope
or
mov
cmp
xchg
adc
cmp
(bad)
hlt
adc
in
(bad)
fisubr
or
xchg
out
mov
adc
push
xchg
sti
add
cmp
cs
jl
ficomp
mov
aad
ins
jle
xlat
imul
je
push
pop
ss
sub
xor
add
loop
jp
repnz
mov
cmp
or
dec
(bad)
mov
aam
xchg
fistp
lea
pop
adc
aas
ss
inc
ins
xchg
adc
jne
mov
sub
jmp
inc
loope
jl
mov
pop
sub
xchg
outs
idiv
mov
mov
adc
push
xchg
lahf
rol
xchg
xor
mov
popf
mov
xchg
jae
ins
jno
mov
xchg
cmp
inc
clc
pop
fwait
push
pop
shr
xchg
and
stc
icebp
jbe
jno
push
push
(bad)
aaa
jle
repnz
xor
mov
fcom
push
adc
add
xchg
add
push
or
ror
adc
jns
icebp
mov
sbb
in
es
sub
xchg
jmp
jb
and
int
out
xchg
sbb
mov
and
lods
or
pushf
(bad)
adc
mov
xchg
and
dec
sub
xchg
ss
mov
lods
sbb
movs
bound
neg
sbb
xchg
hlt
mov
inc
jge
mov
out
int
push
enter
xchg
add
fisubr
xchg
jnp
adc
stos
fsubr
xor
mov
add
add
xor
cwde
movs
mov
sar
vxorps
xchg
aas
popf
and
cdq
cmp
cmps
cmps
xor
ds
loope
inc
push
imul
mov
add
or
fild
leave
xor
xchg
cmp
retf
mov
sub
test
cmp
mov
test
ins
les
sub
adc
sbb
mov
mov
jbe
jb
int3
mov
ds
xrelease
test
mov
cld
repnz
into
mov
xchg
test
pushf
or
push
xchg
adc
movs
pop
mov
imul
mov
das
fwait
fwait
into
sub
push
loop
in
int3
xor
bound
inc
dec
jp
mov
mov
mov
mov
fist
stc
xchg
pop
xchg
sub
cld
xchg
jmp
inc
xchg
dec
xchg
push
push
push
rcl
mov
xchg
hlt
push
test
xchg
es
popf
daa
imul
sahf
xchg
cs
outs
inc
lods
loopne
out
xor
out
jne
cdq
or
xor
in
jbe
jp
mov
mov
mov
mov
push
sub
bnd
out
push
retf
fadd
call
nop
enter
jnp
xchg
popf
inc
icebp
jle
paddq
push
push
mov
xchg
lock
push
jnp
mov
mov
stos
sub
inc
(bad)
dec
or
jecxz
dec
push
popf
pop
rcr
and
jl
fist
jmp
push
icebp
popf
dec
icebp
xchg
xchg
dec
xchg
data16
icebp
sbb
xor
mov
iret
sbb
lock
fsubr
(bad)
inc
xchg
ret
inc
xor
pusha
jp
push
adc
mov
mov
jne
cld
rcl
pop
loop
or
pop
outs
aaa
cmp
ds
loopne
call
pop
adc
push
scas
cdq
mov
addr16
std
mov
lock
(bad)
aam
imul
push
fisubr
les
jge
(bad)
push
jle
fisub
test
aad
int3
in
xor
mov
fs
cld
fsubr
shl
jle
ins
dec
mov
push
ror
dec
cmp
mov
mov
cmps
data16
das
push
pop
mov
test
into
cmp
xor
mov
mov
dec
inc
sbb
loopne
leave
bound
cmps
cwde
int3
(bad)
hlt
cmp
inc
xchg
test
xor
mov
int3
imul
add
xchg
sar
scas
ja
arpl
outs
ret
popa
or
pop
xchg
inc
or
in
addr16
jno
xchg
xor
pop
adc
call
xor
scas
dec
adc
cmp
mov
pusha
adc
mov
and
adc
lds
daa
das
lahf
popf
movs
xor
inc
and
push
mov
in
xchg
mov
adc
xor
(bad)
xchg
sub
adc
lods
int3
test
sahf
xchg
pop
std
pop
js
mov
xchg
(bad)
cmp
xchg
adc
mov
daa
test
bnd
cmp
imul
xchg
leave
xchg
add
call
dec
dec
xchg
inc
xlat
xchg
retf
mov
pop
push
and
clc
xchg
enter
dec
xchg
ins
mov
cmp
xchg
adc
jmp
hlt
push
xchg
push
outs
adc
jbe
stos
hlt
cdq
sub
fist
inc
cli
jmp
jecxz
out
sbb
mov
mov
ins
pop
les
outs
xchg
mov
(bad)
or
nop
pop
xchg
cmp
push
dec
rcl
mul
push
xchg
inc
ret
jmp
ss
dec
push
inc
jae
ror
and
jecxz
cmp
sub
mov
push
ins
sbb
jle
fisub
loope
pop
add
push
jl
xchg
pop
push
mov
sbb
adc
mov
lahf
in
lods
pusha
mov
and
clc
xchg
push
rcl
or
xlat
cmp
or
(bad)
fist
cmps
mov
mov
mov
xor
hlt
xchg
sbb
and
fs
jle
pusha
mov
or
mov
fisttp
xchg
cmp
mov
lock
pop
xchg
xor
loope
sbb
mov
cmp
dec
and
cmp
shl
mov
jmp
jl
test
in
(bad)
mov
lods
xor
and
xchg
sahf
pushf
add
push
sub
dec
in
xchg
jnp
pusha
(bad)
jae
repnz
pushf
sub
imul
mov
imul
hlt
jb
or
xchg
sub
pushf
cli
push
shr
into
and
dec
nop
mov
push
imul
or
into
cmp
xchg
and
inc
sti
addr16
dec
xchg
sbb
cmp
mov
and
mov
push
or
xchg
push
mov
(bad)
aas
xor
hlt
mov
sti
xchg
cmc
bound
mov
xchg
data16
mov
dec
ret
in
mov
jg
int3
jg
sub
xchg
in
cli
mov
mov
cmps
fdivr
repz
push
dec
(bad)
mov
cmp
mov
aad
rol
sbb
movs
loopne
ficom
enter
(bad)
mov
and
cmp
jmp
out
je
adc
out
loop
mov
xchg
fcom
in
mov
fisttp
xchg
inc
lods
outs
or
push
jge
jmp
imul
xchg
mov
aaa
std
push
inc
push
xchg
inc
dec
xchg
out
js
pop
ins
push
sete
or
fist
out
mov
stos
jo
daa
fld
fst
cmp
sbb
(bad)
aam
adc
jmp
pop
xchg
lea
lods
xchg
mov
or
inc
mov
xor
(bad)
iret
and
mov
sbb
div
jmp
(bad)
fdiv
cli
jne
daa
push
in
xor
outs
mov
mov
xchg
xchg
jmp
js
dec
xor
ss
xchg
into
push
je
jno
in
xchg
and
bound
arpl
cmc
imul
mov
mov
xchg
add
mov
xor
push
push
mov
les
xchg
jg
lahf
adc
retf
inc
lahf
add
add
into
mov
sar
pop
mov
shl
test
mov
or
hlt
cld
inc
sbb
fdiv
push
xor
cld
test
add
pusha
cmp
sub
retf
cdq
pushf
sahf
pop
test
cli
xchg
adc
icebp
mov
adc
in
pop
xchg
push
repz
loopne
outs
add
push
sub
pushf
retf
cwde
repz
jl
outs
mov
push
mov
jmp
rep
pop
xchg
stc
in
test
xchg
mov
fs
jl
add
pop
add
mov
cwde
stos
and
outs
sbb
mov
sub
hlt
push
mov
jnp
adc
addr16
pop
lods
cmp
scas
push
sbb
mov
xchg
ja
ficom
push
mov
cmp
inc
xchg
dec
rol
call
jae
aad
fs
inc
adc
int
jl
xchg
add
lahf
xchg
mov
loop
add
cmp
ror
or
call
push
arpl
jl
mov
mov
sub
lea
or
jl
std
inc
(bad)
ins
adc
mov
inc
inc
mov
add
xchg
or
pushf
cmp
pop
jle
ret
push
int3
cld
jbe
jl
xor
(bad)
call
jle
in
xor
aaa
sbb
mov
mov
cmp
xchg
or
cdq
mov
mov
call
cmp
clc
pushf
pop
sahf
adc
rep
ins
sar
fadd
adc
lods
mov
push
cmp
shl
hlt
ja
mov
jge
clc
sahf
mov
dec
les
cdq
daa
ret
cmp
xchg
cmps
cld
ja
add
xor
fmul
pop
pushf
xor
dec
mov
and
xor
add
add
pop
inc
retf
lock
les
mov
shl
xlat
scas
out
xor
je
mov
mov
retf
add
enter
popf
xchg
imul
xchg
xchg
jb
es
mov
mov
sbb
popa
xchg
out
xor
je
jp
xchg
pop
jg
mov
scas
fcomp
data16
ins
cmp
cmps
or
loopne
push
xchg
push
aas
(bad)
sub
push
(bad)
in
repz
dec
retf
lock
push
je
xchg
fdivr
sbb
xchg
data16
mov
std
inc
adc
xchg
ret
jae
xchg
mov
push
(bad)
in
jle
inc
in
jbe
lahf
popa
fisub
dec
xchg
pop
or
daa
xchg
(bad)
repnz
dec
pop
clc
xchg
jo
jmp
into
dec
inc
nop
xchg
pop
pop
or
ror
xchg
xor
movs
cmp
cwde
adc
cli
lock
inc
jecxz
mov
mov
adc
fst
test
jle
rcr
loopne
push
pop
iret
rcr
jp
inc
mov
(bad)
xchg
int3
imul
dec
bound
xchg
mov
cmp
hlt
test
fcom
dec
out
inc
xchg
mov
les
cs
dec
loop
ror
xor
jmp
inc
adc
test
sub
popa
adc
clc
jae
sti
loop
and
push
mov
icebp
mov
inc
xlat
lods
fldcw
rol
mov
cmp
je
fsub
xchg
arpl
dec
pop
xchg
sub
jmp
aad
mov
cld
in
data16
stos
loopne
sbb
lahf
lods
in
dec
(bad)
rcl
ins
adc
test
pop
popf
retf
and
repnz
neg
fwait
and
xor
popa
mov
mov
icebp
or
or
dec
imul
jg
out
stos
and
xchg
hlt
push
push
sbb
xchg
push
xchg
fdiv
sar
xchg
cmps
fistp
mov
xchg
jp
pop
daa
imul
ret
jnp
dec
xor
mov
je
mov
xchg
outs
clc
out
hlt
into
test
jl
jns
and
(bad)
into
push
test
adc
xchg
imul
loope
xchg
test
xchg
jecxz
mov
pop
adc
cwde
inc
mov
mov
fwait
adc
imul
dec
push
imul
lea
pop
mov
jge
int
addr16
cs
popf
rcr
dec
pop
adc
clc
cmp
xchg
push
test
loope
adc
pop
inc
mov
xchg
jge
dec
cld
pop
addr16
sub
push
mov
and
es
ss
pop
jo
adc
inc
xchg
and
jge
cmc
xor
mov
pop
xchg
call
inc
sbb
cmps
cmp
dec
xchg
int
das
mov
stos
adc
jne
xor
jge
call
push
mov
push
inc
fidiv
pop
fldenv
sub
add
into
test
xchg
xchg
out
or
test
push
mov
in
sahf
cmps
push
sub
into
xchg
addr16
enter
daa
sbb
pop
jp
push
cli
xchg
les
imul
cmp
ret
sbb
cdq
xchg
out
es
pop
fdiv
xor
or
out
mov
scas
dec
stc
lahf
dec
sbb
push
and
daa
pop
and
xor
sbb
dec
in
push
shr
leave
add
mov
mov
or
repz
pop
and
jp
jg
push
aam
cmc
in
rol
jle
rcr
(bad)
iret
xchg
push
mov
repnz
mov
adc
mov
xchg
adc
add
push
xor
inc
into
lds
sar
nop
les
scas
mov
add
push
test
cld
jbe
pop
xchg
xchg
cld
jl
dec
mov
aam
cmp
sub
sbb
(bad)
fidivr
xchg
scas
(bad)
xor
adc
into
sub
or
xchg
jecxz
push
mov
pop
mov
in
adc
dec
movs
add
cdq
mov
es
mov
test
pop
cmp
xor
cmc
pop
lods
sbb
test
or
jl
pop
cwde
or
xchg
push
xchg
jmp
pop
jge
loopne
pushf
mov
(bad)
fmul
js
(bad)
xchg
stos
stc
fimul
dec
jb
sbb
ret
mov
movs
enter
push
pop
mov
imul
ret
(bad)
push
mov
movs
sbb
pop
fcmovne
hlt
pop
and
sub
pop
cmps
mov
sub
push
jmp
movs
mov
or
data16
mov
pop
pop
jge
push
pop
mov
movs
mov
sti
psubsw
mov
imul
jp
mov
cmps
in
adc
jge
out
add
aam
jge
ret
fadd
scas
jl
clc
jl
fisubr
mov
pusha
loop
js
outs
in
jbe
jno
jge
or
out
stos
mov
fwait
mov
xchg
adc
gs
xor
js
xchg
mov
xchg
adc
jo
mov
retf
call
std
pop
loop
sbb
sbb
xchg
int3
mov
in
test
adc
test
sbb
icebp
cs
cdq
outs
jb
jb
(bad)
sbb
or
xchg
adc
jnp
mov
shl
pop
cld
fs
add
xchg
xlat
push
movs
int3
mov
and
xor
mov
cmps
loop
mov
mov
xchg
test
and
in
mov
sbb
stos
jge
mov
fwait
dec
rcr
lahf
retf
sbb
xchg
sub
dec
mov
movs
push
jl
aam
xor
or
fcomp
cmp
cs
add
sub
jmp
xchg
dec
pop
(bad)
sub
ret
mov
(bad)
in
jl
mov
xchg
lods
sbb
jo
inc
stc
push
xchg
pop
add
mov
ss
xchg
mov
inc
lds
mov
xchg
jmp
sub
pop
rcl
or
pop
mov
and
xchg
jg
scas
jecxz
xlat
stos
ror
repz
aad
aas
(bad)
mov
out
test
push
cdq
push
js
out
or
outs
push
push
in
jne
pop
xchg
xor
sahf
sbb
inc
retf
xchg
adc
fsubr
xchg
or
popf
mov
or
popf
in
sbb
xchg
adc
fld
js
cmp
xchg
sub
add
xchg
sbb
mov
push
cdq
push
adc
sbb
jle
or
icebp
cmp
pushf
sub
sub
xchg
aam
call
xor
add
shr
xchg
jmp
pop
mov
xchg
retf
outs
les
cmc
ins
leave
cmp
loopne
xchg
call
pop
mov
movs
sbb
and
sub
sub
adc
xor
bound
enter
mov
and
push
jp
hlt
fcomp
xchg
fidiv
or
dec
(bad)
lahf
push
mov
pop
dec
xchg
adc
ins
xchg
jno
js
or
sbb
push
inc
add
arpl
icebp
fwait
sti
test
mov
fs
cld
dec
outs
fidiv
(bad)
repz
sahf
jae
adc
sbb
pusha
aas
adc
jne
ja
fist
cmp
imul
jno
xchg
sahf
xchg
add
mov
push
mov
mov
inc
mov
fisttp
outs
aam
sub
jb
xchg
and
or
pushf
das
sbb
xchg
dec
mov
ret
cmps
fld
ss
mov
adc
test
popa
xchg
repnz
cs
sti
jg
dec
lock
mov
xor
mov
pop
sbb
adc
(bad)
push
mov
xchg
add
lock
lds
int
fadd
pop
pop
fistp
pop
xlat
add
push
lods
and
xchg
mov
(bad)
push
adc
shl
dec
mov
sub
scas
push
adc
inc
fs
or
fstp
das
adc
or
call
sub
fdiv
pop
pop
scas
jb
xchg
fst
jp
lahf
xchg
xor
data16
xor
(bad)
sar
inc
xor
test
call
dec
xchg
or
rcr
retf
mov
or
imul
sub
xchg
popf
and
test
push
movs
fdivr
ret
scas
sbb
leave
jl
daa
xchg
dec
mov
xor
jge
hlt
shl
clc
js
stos
mov
lahf
sbb
xchg
mov
mov
sub
jmp
sub
cmps
push
mov
push
or
in
int
dec
sub
adc
adc
jge
pop
jle
adc
sbb
add
movs
sub
xor
mov
add
mov
mov
mov
lods
hlt
mov
ret
or
popa
mov
jl
dec
lods
push
sbb
in
sbb
ror
add
cdq
ins
sbb
out
test
fstp
je
loope
sub
pop
push
in
es
xchg
xor
js
ret
xchg
push
push
icebp
sbb
sub
mov
ud1
mov
cli
adc
sub
xchg
adc
mov
dec
push
out
aas
hlt
shr
rcr
and
xchg
stos
jg
xchg
std
nop
(bad)
sbb
push
icebp
xor
xchg
push
xchg
movs
ins
int
mov
inc
adc
mov
std
cwd
(bad)
pop
add
mov
mov
push
xchg
fucom
xchg
jmp
jl
out
push
pop
cld
stos
add
es
sub
xchg
cmp
ret
sub
lahf
sbb
xor
xchg
out
aam
mov
fwait
or
or
lods
push
sub
out
push
ins
adc
dec
mov
jno
add
or
xor
dec
xchg
jmp
fwait
(bad)
dec
inc
xchg
xor
fwait
xchg
test
and
and
fs
gs
loopne
pop
(bad)
mov
jno
mov
int3
int
(bad)
mov
mov
jne
jl
xchg
call
stc
jl
sahf
adc
dec
cmp
xchg
jbe
ss
cmp
pop
xor
xchg
or
rcl
push
xor
daa
mov
adc
sub
rcl
jns
dec
adc
xchg
cmp
shr
retf
inc
add
test
cmp
scas
pop
xor
and
jmp
out
cdq
xchg
lods
cmps
jecxz
jp
imul
xchg
add
mov
shr
push
jnp
xchg
mov
leave
popf
xor
sti
xchg
dec
push
inc
out
mov
jg
push
add
mov
dec
clc
ss
movs
pop
aaa
and
jge
and
pop
cwde
push
mov
dec
add
fwait
in
call
out
jno
or
push
imul
xchg
jmp
les
xchg
(bad)
aam
mov
loopne
outs
lahf
shr
xchg
cli
pop
inc
jae
test
push
fnstsw
add
pop
mov
sbb
jno
test
scas
mov
cmp
pop
frstor
xchg
pop
mov
pusha
sub
adc
cli
ins
jns
fwait
mov
pop
adc
mov
arpl
mov
jnp
ins
lods
mov
dec
xchg
dec
ss
inc
jo
inc
cs
out
and
adc
std
je
mov
inc
dec
repnz
xchg
or
es
ja
cli
popf
cwde
mov
ins
push
imul
xchg
dec
fcom
sbb
mov
add
mov
cli
je
or
cmp
jmp
fcom
mov
scas
inc
hlt
pop
inc
rcr
mov
cld
jbe
int3
loopne
int3
jl
add
jmp
xor
cwde
hlt
stos
dec
dec
mov
xchg
xchg
call
adc
sub
mov
jl
retf
cmp
outs
sar
stos
and
repnz
push
sbb
cld
xchg
pop
pop
imul
cwde
sbb
in
outs
lea
int3
rcr
xchg
mov
adc
mov
ins
jl
or
ins
cli
push
pushf
jp
mov
mov
gs
pop
xchg
mov
popf
push
outs
jne
popw
jbe
iret
or
int
outs
mov
fwait
cmp
test
mov
mov
(bad)
outs
aad
add
xchg
push
mov
loopne
mov
je
ss
jp
dec
jecxz
push
mov
imul
jmp
ficomp
and
rcl
pop
mov
data16
in
inc
cdq
fdivr
ja
mov
add
into
out
gs
ja
jbe
xchg
imul
daa
dec
and
push
hlt
in
xor
fdivp
imul
lods
xchg
adc
nop
mov
pushf
adc
xchg
test
sbb
(bad)
or
aam
movs
mov
call
pop
and
mov
xchg
iret
and
add
adc
in
stos
jns
or
push
hlt
jne
enter
mov
jl
cmp
repnz
test
xchg
xchg
pop
cmp
pop
xchg
mov
outs
jae
add
mov
mov
in
movs
cld
pop
xchg
inc
lods
mov
test
mov
jecxz
nop
mov
dec
add
jns
or
sub
mov
pop
(bad)
shr
ins
in
loopne
sahf
adc
cwde
jnp
jnp
add
jmp
test
das
div
xchg
sbb
fs
jl
xchg
dec
cmp
shl
and
les
cmps
cmp
inc
xor
xchg
hlt
xchg
or
push
sbb
les
mov
int
jo
xchg
dec
(bad)
fcomp
ds
fucomi
dec
fwait
mov
xchg
fs
and
mov
cmp
jne
loop
inc
fwait
jp
mov
mov
pop
popf
cld
(bad)
iret
out
outs
mov
cmps
xchg
xchg
cmp
loop
xchg
fmul
cmc
aad
mov
cdq
stos
add
mov
ja
dec
xchg
shr
cld
aad
and
stos
ds
imul
mov
pop
mov
xchg
fwait
push
out
int3
bound
mov
lds
mov
adc
out
mov
push
rol
pop
adc
or
loope
xlat
xchg
mov
dec
mov
popa
add
xchg
nop
xor
and
sbb
aam
arpl
cmp
jns
inc
xor
nop
pop
popf
test
les
popf
mov
cmp
push
push
push
fcom
movs
xchg
add
rep
or
inc
imul
scas
xor
hlt
pop
or
dec
lahf
push
fadd
lea
mov
xchg
stos
mov
pop
pop
cmp
inc
mov
dec
mov
bound
lds
cwde
pop
inc
add
push
mov
je
mov
(bad)
pop
mov
cmp
call
jg
ret
inc
push
fadd
xor
(bad)
hlt
call
call
fwait
or
dec
test
int
cld
mov
aad
sub
inc
imul
inc
mov
sub
jo
rcr
xchg
cmp
test
mov
jmp
xchg
scas
inc
popa
cdq
in
add
sbb
cmp
xchg
fiadd
push
mov
hlt
pop
loop
pop
lods
xchg
jmp
cmp
or
stos
mov
fwait
and
jle
sbb
cmps
popf
(bad)
repnz
push
mov
mov
clc
push
mov
sub
dec
ss
inc
sbb
loope
mov
adc
je
xchg
fidiv
mov
xchg
mov
ds
xchg
sbb
mov
addr16
scas
adc
fsub
push
xchg
rcl
jge
shld
inc
out
push
xor
xchg
dec
ins
js
sub
sbb
inc
jge
cli
punpcklbw
lahf
hlt
sub
loop
clc
push
out
loop
adc
stos
add
lods
jmp
mov
movs
jl
data16
pop
popa
sar
icebp
cdq
mov
(bad)
cld
mov
cld
or
xchg
mov
push
or
(bad)
xchg
sub
sub
(bad)
xor
xchg
push
push
rcr
add
pushf
cld
mov
pop
xchg
inc
jmp
fwait
popf
ficomp
jmp
jne
into
pop
xbegin
hlt
out
xchg
cmp
call
hlt
fmul
push
sub
mov
pusha
push
mov
pop
pop
je
xchg
push
xchg
mov
jae
xor
xchg
fsub
sar
dec
mov
icebp
push
add
or
not
xchg
jg
dec
mov
xor
scas
rcr
add
nop
ja
std
das
in
mov
push
sub
push
loope
and
adc
cmps
xchg
cmps
inc
jg
add
(bad)
cmp
es
lods
push
fdivp
ja
or
cld
adc
loopne
sbb
cmp
inc
mov
dec
mov
mov
jmp
(bad)
mov
test
dec
jl
cmps
stos
(bad)
pop
rcr
lahf
inc
les
retf
mov
test
adc
adc
xchg
sub
xchg
dec
mov
lock
js
cmps
xchg
je
xchg
sub
les
mov
aam
aam
retf
jecxz
les
mov
lods
loope
ins
test
inc
mov
cs
xchg
jecxz
or
in
mov
jle
scas
add
les
add
xchg
mov
retf
sahf
repz
cmp
push
test
test
leave
mov
jl
shl
xchg
xchg
pop
inc
cmps
xchg
mov
nop
dec
test
addr16
or
pop
nop
mov
inc
add
cmp
sbb
xchg
or
rcr
ins
add
xchg
and
ss
xor
dec
xchg
mov
mov
out
inc
sbb
mov
aad
sbb
ret
nop
cdq
mov
mov
enter
jp
fwait
xchg
stos
mov
fs
adc
xchg
mov
repnz
xchg
call
pop
xchg
imul
repnz
mov
mov
aaa
or
jne
add
xchg
push
mov
test
adc
push
inc
adc
sub
leave
sub
aam
pop
test
pop
(bad)
ficom
inc
mov
xchg
sbb
mov
in
xchg
cdq
ficom
xchg
fwait
fwait
(bad)
jnp
or
xchg
lahf
pop
and
(bad)
xchg
popf
mov
sbb
jb
mov
add
push
imul
cld
mov
aam
mov
xor
ins
sbb
mov
sahf
icebp
out
js
xchg
stos
cmp
sbb
mov
xor
lea
xchg
jl
mov
iret
ss
cld
lock
repnz
mov
shr
adc
sbb
mov
mov
les
mov
xchg
ret
jne
dec
jge
pusha
xchg
push
push
mov
aam
inc
adc
adc
cmp
xchg
ins
mov
pop
adc
mov
push
push
xor
jo
imul
xchg
cmp
loopne
mov
mov
dec
lahf
sbb
inc
cmps
jae
push
xchg
mov
mov
ins
sbb
les
retf
or
sub
mov
xchg
test
xchg
fstp
inc
jae
xchg
jno
(bad)
mov
repz
push
pushf
xchg
sub
(bad)
mov
(bad)
ficom
mov
pop
test
loop
fist
and
xchg
add
lock
mov
inc
aas
adc
sbb
sbb
cdq
xchg
ds
movs
mov
xchg
imul
ja
stos
push
(bad)
dec
imul
push
adc
aas
cmps
sub
pop
pusha
mov
test
hlt
push
sbb
push
pop
ins
aas
sbb
mov
int3
xor
scas
pop
retf
das
jmp
xchg
mov
cli
push
add
sbb
cmp
add
in
sub
xchg
dec
arpl
jecxz
retf
ins
pop
ss
jl
jmp
and
dec
xchg
xchg
push
dec
popf
cmp
inc
pop
shl
xchg
mov
js
rcl
ss
inc
sub
add
jne
clc
jae
push
hlt
or
jbe
out
push
push
xchg
adc
jno
sub
pop
(bad)
imul
mov
inc
dec
iret
xchg
retf
sbb
inc
mov
cmp
jne
inc
mov
adc
je
in
dec
dec
xchg
jmp
xor
inc
call
add
xor
retf
xchg
lahf
fdivrp
bound
ins
hlt
repnz
outs
xchg
xchg
and
ins
sub
dec
jl
xlat
cmps
movs
or
cli
ret
dec
pop
sbb
jl
jmp
cdq
and
sub
adc
rol
je
or
test
dec
pop
sub
adc
mov
push
fldenv
jg
jmp
mov
lock
push
adc
cld
push
inc
shl
ins
sub
jl
je
or
mov
xchg
aam
mov
mov
lea
jno
sbb
mov
push
mov
js
(bad)
(bad)
cld
or
xchg
mov
and
into
shr
fsubr
jb
loopne
add
mov
pop
test
mov
pop
aaa
je
(bad)
cmps
inc
jne
xchg
aad
mov
mov
mov
mov
stos
in
sbb
dec
sbb
and
shr
push
mov
dec
scas
mov
cmps
add
sbb
outs
mov
fs
repz
idiv
iret
in
in
data16
sbb
iret
call
ins
or
xchg
call
dec
fwait
cwde
in
mov
mov
cli
addr16
mov
cld
inc
jbe
inc
jl
repz
push
xchg
fcmove
cli
sbb
pushf
repz
push
mov
and
mov
sahf
sahf
xor
mov
mov
push
pop
sbb
mov
sub
out
jns
push
push
in
xchg
jge
jns
sbb
shr
cmc
call
xchg
lock
mov
push
or
sub
mov
jmp
inc
nop
mov
xlat
sbb
dec
jl
push
jbe
pusha
shr
cwde
xor
jno
cmp
aas
pop
lds
mov
ret
or
add
mov
adc
out
aad
stos
stos
enter
and
cmc
stos
jnp
cmp
cmp
outs
out
jl
cmp
sub
adc
sti
adc
clc
int3
jns
das
xchg
xchg
(bad)
mov
sub
jp
add
lahf
xchg
xchg
int3
out
adc
and
stos
sub
shl
jmp
hlt
dec
(bad)
in
sub
in
sbb
loopne
xlat
mov
in
xchg
mov
sub
push
pop
xchg
enter
push
aam
movs
xchg
add
mov
xchg
iret
adc
xchg
nop
or
mov
cmps
xchg
btr
rol
cmp
xchg
cmp
ds
dec
loope
shl
iret
jns
xchg
xlat
sub
imul
sub
(bad)
shr
mov
dec
and
or
mov
cmp
test
inc
les
sbb
je
xchg
xchg
ins
pusha
dec
lea
add
mov
in
and
push
xchg
xlat
jo
and
pop
gs
xchg
outs
pusha
mov
call
popf
cwde
xchg
inc
jns
xor
push
int3
xchg
pop
(bad)
pop
imul
test
add
ins
jp
jg
sti
in
xchg
xchg
sbb
mov
xchg
mov
or
cmp
cli
xchg
and
repz
je
jo
xchg
imul
jge
cwde
lea
mov
pop
mov
adc
hlt
mov
and
and
adc
mov
out
test
arpl
int
cmp
nop
cwde
xchg
shl
xchg
jecxz
jl
pop
lahf
adc
xor
outs
pop
popa
ret
in
inc
and
mov
into
xchg
mov
jae
sbb
jp
lods
ins
shr
sar
pop
dec
fisubr
push
xchg
jecxz
jnp
mov
sub
xchg
lea
inc
lods
push
mov
push
xchg
jp
hlt
cmp
pusha
pop
xchg
and
int3
dec
jle
xchg
ja
sbb
sub
mov
dec
mov
cmp
inc
push
xchg
and
pop
jb
clc
or
xchg
out
mov
xchg
mov
xor
popa
test
fbstp
inc
add
mov
movs
mov
or
inc
pop
loop
adc
add
pop
aam
mov
push
or
xor
iret
push
outs
adc
mov
gs
sti
daa
mov
xchg
push
xchg
scas
ss
jle
std
lahf
adc
xor
test
pop
push
cmps
mov
and
xor
xchg
push
jecxz
jge
hlt
dec
rcr
shl
out
sub
aam
ror
sbb
stos
mov
add
sbb
push
xchg
xor
xchg
xchg
add
sbb
jge
jmp
xor
push
xor
(bad)
popf
enter
popf
jl
retf
(bad)
aad
sbb
inc
add
xchg
bound
cmps
mov
add
jg
(bad)
push
mov
push
or
retf
movs
in
mov
push
inc
icebp
xchg
enter
adc
shl
sbb
jge
call
rcr
popf
cmp
push
sbb
movs
retf
add
dec
pop
pop
adc
ins
inc
es
push
xchg
in
mov
fadd
bound
jmp
sbb
inc
test
jp
xchg
and
call
ds
call
ds
jge
in
mov
add
jl
mov
out
mov
jno
nop
ret
mov
stos
jl
sbb
jmp
push
into
outs
adc
es
pushf
sub
jbe
repz
test
mov
cwde
cld
mov
inc
retf
cmps
(bad)
jge
(bad)
xor
and
mov
sbb
sbb
mov
cmp
mov
ror
xchg
or
daa
dec
add
sbb
xchg
cld
aas
dec
in
adc
(bad)
jl
jecxz
xor
sub
in
scas
call
add
add
sbb
cmp
and
cld
iret
adc
add
add
add
rcr
mov
push
not
mov
rcl
fadd
out
and
(bad)
in
sbb
dec
mov
pop
adc
aad
sar
push
mov
or
shl
pushf
xor
adc
add
mov
inc
push
enter
adc
or
fcmovnu
js
mov
shl
adc
int
imul
xchg
push
outs
outs
or
(bad)
mov
push
cwde
xlat
xor
push
xchg
xchg
jecxz
xor
push
(bad)
popa
and
xchg
and
outs
fdiv
out
cdq
xchg
mov
popf
in
not
cmc
push
fcom
jae
test
mov
jnp
xchg
xchg
aaa
test
adc
adc
xchg
ins
cmps
mov
gs
inc
xchg
xchg
std
out
int
mov
(bad)
sbb
mov
mov
ins
cmp
pop
sub
or
pop
sbb
xchg
pop
mov
ret
mov
ds
mov
xor
pushf
mov
jnp
das
xchg
cmc
pusha
popf
inc
(bad)
(bad)
push
in
cdq
sbb
inc
int3
ss
pop
xchg
pop
mov
push
inc
lea
mov
cmp
xor
jnp
add
lods
push
ja
mov
sar
xor
adc
(bad)
in
movs
cdq
not
nop
inc
sti
xchg
jge
test
or
int3
jg
fwait
outs
das
jp
xchg
ret
or
jl
jle
inc
cmps
xchg
push
retf
fwait
icebp
jbe
lea
mov
pop
jge
stc
fisttp
jo
add
fwait
sets
xchg
stc
mov
sbb
push
dec
mov
popa
push
push
push
add
xchg
or
ins
test
push
int
pop
adc
or
je
mov
cmps
cs
ret
xchg
scas
push
std
mov
retf
arpl
sbb
adc
mov
push
loopne
aam
xchg
lock
jnp
aas
repz
fwait
into
repnz
add
mov
pop
test
cmp
jp
xchg
stos
jge
or
lds
movs
xchg
sub
sahf
mov
pop
iret
xchg
fadd
out
mov
jb
(bad)
hlt
cmps
inc
xchg
sub
sub
and
outs
scas
addr16
mov
ret
xchg
lea
psrlq
scas
std
jp
pop
dec
mov
jb
adc
push
mov
movs
bound
push
mov
pop
jg
xchg
lahf
outs
cld
clc
mov
xor
data16
inc
adc
jl
jecxz
pop
sub
push
jmp
test
and
add
cmps
in
mov
popa
mov
mov
dec
push
lea
sbb
loop
aad
sbb
jno
iret
test
add
aam
mov
adc
push
rcr
push
xlat
das
fsubr
pop
push
fs
or
hlt
test
out
lahf
adc
int
pop
es
lds
jge
pop
out
call
(bad)
jmp
dec
push
test
lods
add
mov
ins
and
out
out
fldcw
sub
(bad)
shr
lds
icebp
jl
stos
fcom
psadbw
push
shl
jmp
mov
jge
lock
(bad)
int
xchg
mov
adc
mov
aam
jno
push
and
repnz
test
push
xchg
ret
in
cmp
shl
ins
imul
add
fdivr
jg
leave
and
mov
jl
adc
jp
push
push
or
xor
lods
mov
ret
cwde
dec
imul
and
mov
sub
out
stos
sub
push
add
jge
out
fsub
mov
clc
dec
sub
lods
dec
out
adc
xor
dec
dec
(bad)
push
sar
cmp
adc
cwde
push
jo
dec
xchg
aam
(bad)
jmp
xchg
pop
sbb
cdq
(bad)
cli
ins
sub
sbb
sbb
cwde
lea
and
push
sbb
cmps
call
int
adc
adc
mov
cmp
push
lds
xchg
idiv
js
data16
or
cmp
push
xchg
mov
popf
mov
test
ja
pop
or
mov
mov
push
cmp
cmp
mov
jl
push
push
cmp
dec
mov
test
mov
mov
mov
sar
sub
or
and
jle
ret
xchg
xor
leave
xlat
pop
imul
pop
add
adc
add
xor
rcr
call
sub
daa
dec
ret
cwde
sub
aas
jmp
sahf
sbb
inc
lods
jle
popa
jge
ins
dec
cmp
gs
adc
fwait
push
loop
mov
ds
in
sbb
mov
pop
mov
in
popa
mov
cmc
jno
rcl
fs
std
mov
jo
ss
adc
jns
dec
adc
retf
std
xchg
mov
xchg
push
push
ins
movs
push
cmps
inc
mov
cld
jl
cmc
pop
(bad)
cwde
pop
sub
push
fistp
ficom
lods
imul
cmp
sub
cmc
lock
sub
mov
jge
mov
std
mov
rcl
push
nop
mov
jl
mov
sbb
sub
sbb
push
stos
int3
mov
int3
jle
jmp
cwde
add
sbb
sub
push
aad
adc
mov
cwde
cld
call
cmp
mov
mov
adc
mov
popf
cmps
aaa
nop
jb
xchg
call
jmp
lock
(bad)
fdiv
or
xchg
stos
jo
and
in
xchg
aam
sbb
ss
xchg
aaa
dec
jmp
mov
add
jae
addr16
jecxz
imul
je
cmps
xchg
outs
in
dec
pusha
test
pop
xchg
pop
bound
jbe
fs
and
xchg
test
push
out
xchg
retf
dec
or
setae
gs
or
ins
pop
loopne
retf
adc
ins
jg
out
mov
call
or
jb
xchg
ss
movs
lods
and
out
adc
lock
pop
ins
mov
jl
push
push
fcomi
mov
inc
mov
inc
addr16
loopne
nop
xchg
enter
jp
fwait
dec
je
fild
mov
cmp
mov
popf
sub
push
(bad)
adc
jl
dec
xchg
mov
in
aaa
xchg
fbstp
movs
cmp
cmps
xchg
add
add
sub
test
jle
xchg
pop
dec
jle
jl
hlt
cwde
xchg
push
cli
sub
jno
xchg
lods
aad
pop
cmp
push
les
jp
add
and
mov
mov
lds
lods
int
xchg
repnz
or
out
fwait
sub
xor
hlt
fnsave
jnp
inc
xchg
loopne
dec
ins
loop
test
jne
data16
pop
cli
retf
adc
xchg
mov
inc
icebp
dec
xchg
test
stc
jae
neg
mov
xchg
add
(bad)
popw
ja
das
in
inc
xchg
cld
hlt
sub
push
or
xchg
cmp
mov
fdivp
js
push
mov
movs
ja
pop
ins
(bad)
mov
cmp
nop
add
lods
(bad)
ds
inc
jecxz
push
and
xchg
(bad)
jnp
int
hlt
sahf
mov
mov
xchg
int3
mov
push
pop
mov
lds
pop
shr
xchg
add
mov
xchg
inc
jge
fidivr
gs
iret
add
lock
cmp
xor
adc
pop
cmc
pushf
mov
adc
push
sub
retf
fwait
mov
xor
or
jb
mov
dec
out
je
jae
mov
cmps
push
loop
pop
aad
fucomi
mov
xlat
dec
or
clc
outs
mov
adc
jmp
fist
loop
mov
xchg
adc
daa
ret
aam
mov
cwde
jge
pop
push
in
icebp
pushf
hlt
pop
cmp
push
and
add
cdq
loop
xchg
and
daa
in
inc
xchg
stos
test
xchg
lock
sub
add
sub
cmp
xchg
and
xchg
jne
movs
pop
sub
cmp
mov
js
fwait
xlat
inc
mov
jge
dec
xchg
adc
sti
or
pop
mov
add
inc
mov
sub
push
inc
push
add
fldenv
jecxz
or
ret
shl
or
xchg
mov
dec
cmps
jl
les
nop
repnz
lea
clc
xchg
add
fucomp
fwait
dec
jl
aas
or
hlt
xchg
lods
ins
test
jg
sub
xchg
jbe
adc
cmp
out
sbb
ins
adc
sub
xchg
inc
imul
out
xchg
addr16
sbb
mov
xchg
ja
jne
xchg
scas
lods
dec
adc
xchg
jb
mov
push
xchg
aam
xor
mov
adc
pop
adc
xchg
jg
mov
inc
or
jbe
xchg
hlt
xchg
idiv
adc
mov
ret
xrelease
xchg
sbb
mov
js
(bad)
rol
movs
add
xchg
xchg
ss
cmps
pop
and
mov
out
and
aad
sbb
lods
pop
test
sbb
xchg
pop
fwait
xchg
ret
mov
xor
xchg
push
repnz
fldenv
pop
int3
ss
xchg
call
dec
pop
xor
loopne
mov
xchg
dec
cdq
cmovl
jmp
mov
push
sbb
and
push
and
xchg
jg
dec
clc
sar
icebp
dec
xchg
sbb
cmp
xchg
or
pop
sub
std
imul
adc
inc
aaa
mov
xchg
cmp
int
jp
daa
mov
ja
dec
cmp
sbb
stc
pop
sub
call
mov
inc
pop
dec
stos
rcl
and
push
cmps
imul
sbb
and
jae
loop
jno
push
push
iret
inc
imul
sub
xchg
bound
loope
mov
mov
cdq
aaa
iret
xchg
jnp
sub
xchg
movs
pop
and
cli
lods
mov
js
mov
push
sub
xchg
mov
(bad)
cdq
test
push
(bad)
mov
push
cmp
xor
push
popf
stos
mov
mov
lock
pop
xor
adc
ret
xchg
cmc
and
or
ja
adc
adc
imul
nop
adc
push
hlt
xchg
das
nop
and
xchg
mov
rcl
jg
pop
xchg
mov
ins
and
pop
push
sub
lock
jne
(bad)
not
lods
or
mov
xchg
xchg
rol
push
xor
jl
adc
sub
and
fisttp
in
int3
popf
mov
push
es
test
loopne
test
mov
dec
ret
retf
int
call
xor
(bad)
hlt
sbb
push
iret
cmp
inc
sahf
push
data16
retf
adc
mov
fst
cmp
pop
lea
repnz
xchg
aam
(bad)
xlat
xor
(bad)
pop
xchg
repz
jnp
dec
dec
mov
retf
push
int3
ds
imul
adc
sub
and
dec
stos
imul
or
cmp
das
lahf
and
pop
pop
jno
pop
and
jne
or
dec
adc
sbb
xchg
ins
into
neg
xchg
stos
and
sbb
dec
in
mov
xchg
sbb
push
xchg
and
xlat
sub
imul
jns
repnz
jmp
xchg
std
imul
scas
xchg
sar
cmp
xchg
xchg
dec
or
ds
mov
xchg
push
cmp
test
xchg
and
push
iret
iret
das
xchg
and
mov
into
ret
sbb
loopne
xchg
xchg
in
mov
inc
jle
push
scas
mov
push
push
into
out
mov
inc
xor
mov
lock
jmp
fwait
cmps
enter
les
mov
adc
inc
test
jns
sub
dec
jp
std
movs
jae
jg
xchg
outs
enter
lods
xlat
push
pop
repz
js
and
das
in
and
dec
fwait
jne
sahf
lock
neg
mov
add
push
mov
aam
das
mov
fldenv
xchg
pop
int
pop
push
ficom
sbb
fbld
test
push
and
add
lock
add
xchg
push
jo
or
or
ins
pop
jbe
das
dec
xchg
inc
add
mov
daa
fucom
(bad)
js
inc
sub
jp
dec
(bad)
es
sub
jmp
adc
(bad)
cmp
in
pop
popa
mov
jb
cmps
cmp
push
xchg
loope
mov
xchg
imul
mov
inc
cmc
(bad)
int3
stc
shl
lods
xchg
jns
or
sub
fs
add
and
add
neg
mov
leave
cmp
xchg
cli
out
or
clc
mov
xor
cmp
nop
mov
(bad)
xor
arpl
sbb
dec
aas
mov
pop
push
xor
xchg
add
js
xchg
inc
sti
out
mov
xchg
popa
aam
inc
sbb
mov
xchg
out
inc
arpl
out
je
popf
jl
sbb
in
push
js
mov
dec
gs
xchg
pop
cmp
cmp
fsub
xor
cmp
jl
ja
sub
mov
inc
loop
dec
out
sbb
xchg
gs
div
fs
push
xchg
das
xor
cld
xchg
sub
sbb
or
jno
xchg
pop
test
dec
xchg
stc
fs
(bad)
sub
bound
out
call
push
mov
(bad)
and
jle
push
nop
sbb
sub
mov
and
xchg
or
add
test
ds
sub
loope
adc
add
cmp
xchg
cdq
dec
retf
inc
rcr
xchg
jb
(bad)
fld
xchg
add
mov
sub
pusha
std
dec
xchg
inc
mov
xor
shl
or
stos
ins
mov
sub
pop
xchg
imul
mov
sbb
xchg
mov
fldlg2
jb
(bad)
sub
jl
loope
xchg
loope
shr
inc
and
loopne
(bad)
xchg
cmps
movntq
dec
call
cmp
cli
lahf
jo
xlat
call
fmul
inc
xchg
jl
mov
and
push
and
hlt
xchg
push
or
ins
or
cmp
cdq
pop
xchg
inc
jne
sub
pop
in
fdiv
adc
int
neg
rol
jb
mov
out
fst
lea
add
push
xchg
gs
mov
jae
xor
or
xchg
sbb
sbb
xor
mov
adc
xchg
xchg
adc
inc
rol
lock
or
xor
mov
adc
arpl
mul
or
add
dec
test
out
push
mov
data16
xchg
push
(bad)
stc
adc
out
mov
test
mov
enter
(bad)
push
cwde
cmps
add
and
and
xchg
dec
cmps
mov
iret
inc
cmp
push
call
jbe
in
(bad)
sub
add
xchg
jp
xor
dec
scas
fs
int3
imul
dec
jb
cwde
sti
sbb
lea
adc
mov
push
enter
inc
mov
mov
imul
dec
pop
xchg
out
mov
or
hlt
aad
sub
ficom
mov
mov
stos
pusha
dec
pop
jecxz
xchg
mov
jge
dec
xor
inc
sub
mov
mov
sbb
jle
mov
mov
xchg
aaa
mov
sar
imul
mov
stos
cmp
sub
pop
rcl
ror
in
(bad)
aam
adc
(bad)
xchg
sbb
ins
test
add
fwait
inc
lods
jne
int
xor
sub
cld
xchg
movs
popa
scas
push
(bad)
pop
cmps
push
(bad)
addr16
xchg
call
lea
retf
leave
cmps
cli
xchg
enter
scas
jae
popf
push
lock
fwait
out
add
fadd
xchg
js
or
mov
pop
leave
popf
inc
bound
mov
xchg
xor
xchg
mov
repnz
fcmovnu
xchg
cmp
out
arpl
cmps
mov
xchg
push
imul
xchg
xor
xchg
fstp
sahf
adc
sub
pmulhw
add
inc
xchg
pop
ins
jbe
int3
inc
lahf
add
(bad)
sbb
cli
xlat
xchg
imul
lahf
mov
mov
test
xchg
sub
das
in
xchg
aad
sar
or
push
ret
xchg
and
fwait
push
movs
jno
mov
(bad)
popf
jne
adc
xchg
psubq
sub
mov
popf
and
int
xchg
test
pushf
mov
out
sub
mov
aam
movs
push
or
pop
xchg
int3
pop
fs
mov
jno
ret
xchg
add
xor
stos
iret
imul
(bad)
xchg
test
addr16
inc
xchg
dec
sahf
push
nop
cli
adc
ins
cmp
dec
sar
xchg
iret
cmps
icebp
and
fstp
and
mov
dec
ret
ror
out
movs
lahf
xchg
clc
adc
in
fild
sub
stos
test
adc
dec
cld
mov
aaa
das
push
sub
je
add
scas
pop
dec
xchg
test
jle
adc
xor
and
push
pop
dec
mov
js
jl
or
jnp
xor
int
cs
add
xchg
mov
dec
jmp
addr16
dec
bswap
and
xchg
into
cmp
inc
pop
imul
ficomp
inc
add
inc
les
xchg
js
sub
out
pop
adc
fild
mov
inc
push
cld
stos
mov
rol
das
jae
dec
xchg
and
xchg
adc
push
add
cdq
push
inc
mov
mov
imul
cmp
dec
xor
bound
xchg
pusha
push
pop
out
cmc
aam
xchg
mov
xor
test
in
(bad)
out
pop
test
xchg
adc
mov
popf
mov
xchg
mov
adc
mov
mov
and
jecxz
mov
dec
enter
hlt
push
bound
inc
scas
je
(bad)
fsub
imul
(bad)
mov
push
mov
movs
mov
test
xchg
in
or
bnd
mov
xor
out
mov
pop
mov
adc
frstor
lea
(bad)
outs
cmc
xchg
test
jno
mov
sbb
sub
sbb
fcmovu
sbb
lahf
xor
mov
mov
mov
ror
xchg
xchg
(bad)
mov
mov
mov
pop
push
mov
or
mov
mov
es
inc
imul
xchg
xor
int3
xor
cwde
jmp
adc
out
fisubr
(bad)
aam
mov
pop
hlt
mov
jbe
imul
jecxz
ret
xchg
xchg
pop
cmc
loopne
add
mov
mov
fdiv
lea
hlt
ret
mov
cmc
and
sbb
fs
jge
mov
adc
je
call
js
mov
movs
cwde
push
sbb
aad
sub
addr16
xchg
out
xchg
push
sti
sub
in
gs
xchg
mov
inc
push
sub
in
mov
pop
imul
(bad)
xchg
xchg
mov
lds
imul
iret
gs
rcl
mov
mov
xchg
dec
push
xchg
xlat
add
xchg
daa
(bad)
sbb
rcl
xor
cmc
push
mov
sub
jo
loop
stc
les
aam
retf
mov
xchg
xchg
aaa
adc
lods
cs
xchg
es
push
gs
pusha
ja
in
cmp
lods
cmp
js
push
xchg
test
pop
pop
inc
fwait
int
adc
leave
scas
pop
inc
adc
or
jle
mov
push
in
(bad)
inc
nop
cmp
fimul
scas
pop
push
xchg
je
fwait
sbb
in
or
loope
mov
daa
in
xchg
adc
ja
bnd
es
jl
pop
lods
sahf
pop
ja
push
sti
mov
xchg
movs
cdq
push
call
cmps
sar
jl
test
iret
inc
sub
dec
out
fwait
xchg
call
mov
push
(bad)
inc
pop
xchg
pop
adc
div
push
xchg
push
ss
mov
or
xchg
xchg
inc
sbb
sahf
xchg
ins
adc
mov
or
cdq
add
lea
mov
test
fnsave
arpl
adc
jno
je
outs
addr16
aad
shl
loopne
pop
fidiv
sti
lock
in
mov
jmp
inc
push
lahf
call
xchg
add
test
push
cwde
xor
xlat
out
xchg
dec
sbb
xor
mov
xchg
adc
cmps
mov
sbb
scas
cmp
xchg
jnp
icebp
pushf
push
rcl
or
je
mov
xchg
fisub
push
adc
jl
mov
fwait
sub
cmp
mov
sbb
int3
cdq
pop
scas
les
out
nop
push
inc
jno
sbb
dec
jne
add
mov
loop
daa
push
xchg
adc
and
push
jmp
sbb
jbe
cmc
enter
pop
loop
adc
iret
aas
(bad)
xchg
jmp
mov
pushf
sar
ds
rcl
xor
lahf
into
dec
xchg
sub
lds
imul
mov
loope
sub
gs
ss
int
xchg
dec
ror
xchg
xchg
in
mov
cld
fisttp
int3
pop
xchg
jmp
push
stc
mov
test
cmp
mov
and
mov
repz
sub
mov
mov
cmp
ret
imul
jns
bnd
sbb
jb
in
sti
or
inc
pop
(bad)
mov
je
mov
es
repnz
adc
nop
pop
mov
mov
and
ret
mov
xchg
adc
out
aam
mov
pop
mov
adc
xchg
cmp
xchg
test
leave
push
sub
addr16
or
cmp
adc
sahf
movs
(bad)
ds
adc
mov
loope
inc
ret
inc
cmp
jne
push
movs
aas
mov
xchg
fs
cmps
xchg
daa
pop
sub
call
or
xor
sahf
inc
fs
shr
adc
int
out
jge
cs
sub
aas
jp
iret
(bad)
fnsave
pop
adc
outs
mov
ins
mov
dec
test
pop
mov
sbb
pushf
ins
jns
sbb
xor
mov
sub
mov
push
jb
mov
(bad)
ror
enter
sub
fdivr
sbb
nop
pop
pop
lods
dec
les
inc
leave
mov
mov
scas
repnz
and
hlt
pushf
mov
ret
ret
hlt
and
aaa
fwait
cmp
out
icebp
mov
fs
xchg
test
mov
hlt
leave
test
rcl
xor
fisttp
lahf
fdivr
loope
loope
jl
scas
xchg
cwde
pop
test
mov
iret
(bad)
adc
je
pop
ss
xor
ss
in
int3
mov
lods
jl
lahf
test
adc
mov
cmp
adc
xor
push
add
and
xchg
jmp
adc
stos
(bad)
loop
cmp
xchg
cmp
popf
or
xchg
imul
mov
mov
xchg
pop
sbb
leave
imul
sar
retf
mov
xchg
cwde
cmp
mov
retf
xor
cmps
imul
out
and
pushf
arpl
mov
fdivr
xchg
push
aas
mov
in
cdq
xchg
loopne
lahf
mov
gs
neg
add
mov
fbstp
push
pusha
xchg
adc
call
jle
xchg
dec
push
dec
out
mov
test
adc
xchg
xlat
(bad)
into
xor
rcl
mov
imul
mov
mov
inc
fwait
mov
mov
jne
jmp
inc
xchg
pop
out
movs
sub
xchg
std
rcr
loopne
gs
int3
bound
adc
fwait
repz
add
xor
mov
xchg
rcr
add
push
jmp
mov
call
cmps
xchg
fnstcw
ss
cmps
or
(bad)
sahf
sub
xor
pop
mov
popf
rcr
mov
addr16
adc
xor
into
or
push
dec
xchg
xchg
mov
lahf
xchg
repz
add
xchg
mov
mov
ficom
sbb
cmp
scas
(bad)
jno
popa
sbb
loop
xchg
xchg
aas
and
or
div
je
add
xor
and
cdq
fcom
xor
mov
mov
adc
js
inc
mov
stos
dec
xor
add
pushf
and
xchg
repz
int
movs
shl
cwde
or
pusha
xchg
cmp
mov
mov
fsub
xchg
cdq
mov
inc
jmp
into
mov
aas
lods
fst
(bad)
cmp
mov
out
lock
int3
js
pop
(bad)
(bad)
xchg
sbb
in
rol
inc
test
lds
dec
int3
cmps
adc
in
movs
aaa
into
inc
outs
xchg
sbb
ucomisd
jg
xchg
fmul
and
scas
push
inc
add
cmp
fbstp
xchg
(bad)
push
ja
frstor
sbb
sbb
add
adc
scas
inc
cmp
in
xchg
xchg
aaa
aam
lods
xchg
jae
sub
popf
icebp
daa
test
or
cmp
bound
mov
inc
adc
lahf
fdivr
fwait
stos
and
aam
dec
mov
xor
imul
arpl
sub
push
jge
add
cmp
jg
xchg
xor
ficom
scas
mov
lea
and
sub
push
inc
int3
mov
daa
(bad)
pop
and
xchg
pop
cmc
mov
push
movs
movs
mov
rcl
mov
add
stos
mov
aad
dec
cmp
adc
in
mov
pop
inc
jns
mov
fucomip
jl
or
loope
xor
sbb
imul
mov
cdq
(bad)
data16
pop
aam
leave
and
test
mov
call
inc
add
xchg
aas
xor
cs
xchg
push
(bad)
sti
(bad)
cmp
jl
pop
lahf
loope
adc
or
sahf
daa
(bad)
outs
fwait
jg
fcomip
pop
add
cld
push
xor
add
xchg
fdiv
cdq
xchg
(bad)
ret
(bad)
or
jp
xchg
jne
int3
cmp
mov
xchg
sub
pop
xchg
jb
cmp
sbb
mov
inc
stos
sbb
unpcklps
or
xchg
clc
nop
pop
cmps
arpl
hlt
xchg
mov
xchg
cld
cmc
loop
call
repz
ret
cwde
xchg
sbb
adc
xlat
and
add
stos
hlt
call
mov
mov
push
mov
inc
cdq
and
sti
xchg
push
mov
mov
loope
mov
jp
adc
mov
adc
cld
cmp
and
xchg
cmp
and
cmps
dec
jnp
call
pop
pushf
into
xor
stc
les
cmc
xchg
jecxz
dec
push
and
inc
inc
xchg
hlt
mov
adc
and
add
loop
mov
sub
popf
cld
xchg
push
in
shr
retf
push
add
xor
fxch
ds
cmp
push
adc
imul
fdivr
loopne
inc
mov
adc
ins
dec
mov
mov
adc
xchg
mov
sub
lods
shl
push
xchg
push
sbb
jnp
mov
sbb
pop
test
addr16
xchg
out
cmp
pop
mov
dec
call
push
int3
push
adc
(bad)
inc
add
pop
jb
and
sbb
aad
sub
imul
mov
mov
pop
mov
ins
and
jmp
out
scas
sub
aad
jge
jle
pop
jecxz
xchg
xchg
mov
(bad)
sub
adc
xchg
stc
lods
lds
cmp
in
cmps
jl
jne
and
pusha
stos
or
add
shr
out
pop
mov
out
cmp
adc
gs
push
mov
fadd
mov
xchg
nop
int
es
adc
add
inc
mov
xchg
icebp
ja
jle
cmp
sub
and
jge
mov
fwait
mov
or
iret
jae
into
and
xchg
push
pop
cmp
mov
push
jnp
inc
rcl
mov
xchg
sub
fwait
push
fist
mov
das
mov
aad
xchg
std
es
mov
mov
outs
into
pop
and
mov
rol
pushf
enter
and
test
adc
ja
push
push
iret
mov
mov
fdiv
stos
rcl
or
ror
and
hlt
dec
dec
xor
daa
ins
mov
leave
ss
adc
sar
or
xchg
mov
cmp
inc
in
mov
jbe
test
pop
hlt
mov
sbb
cmp
push
dec
fstp
aas
pop
add
xor
cmp
pop
xor
das
loop
push
mov
outs
mov
rol
sbb
sub
retf
aas
xchg
jmp
xchg
mov
mov
inc
ror
jne
aam
push
(bad)
xchg
push
sub
xchg
xchg
int
loop
(bad)
sub
in
jbe
pop
cli
rol
cs
popa
pop
cdq
bnd
adc
stos
dec
ds
sub
jl
rcl
rcr
nop
jne
jnp
jb
dec
or
lahf
int
pop
xchg
das
cmps
imul
fs
stos
sbb
add
push
out
je
mov
repz
mov
call
in
cmp
xchg
ins
fidiv
popa
stos
mov
ret
sbb
mov
mov
fcomp
and
push
cmp
xchg
xchg
cld
mov
out
dec
mov
pop
sbb
ret
sbb
push
(bad)
mov
xor
repnz
das
inc
arpl
outs
jmp
jnp
data16
xchg
imul
cmc
mov
inc
retf
bnd
mov
mov
inc
push
cmp
or
xchg
in
(bad)
out
and
push
int3
inc
retf
cmp
bound
dec
push
repz
sub
xor
pop
and
into
mov
and
mov
xchg
clc
adc
cmps
xchg
jb
lods
add
xchg
fstp
into
imul
mov
push
in
xchg
cli
cmp
shl
xchg
mov
mov
mov
test
cmp
or
pushf
iret
fs
fwait
je
dec
xchg
call
jns
push
ins
push
int3
call
add
and
fcmovne
pop
or
mov
jmp
jbe
xchg
xor
sub
mov
push
xchg
mov
repz
(bad)
ds
outs
rcl
daa
rcl
adc
pusha
mov
sub
xchg
mov
push
dec
add
stc
imul
pop
xchg
pop
hlt
xchg
jp
ins
push
pop
hlt
(bad)
cmp
cmp
in
push
mov
jbe
add
mov
cmp
int3
stos
ret
aam
cmp
fwait
pop
test
adc
jmp
sahf
jge
push
icebp
push
xchg
xchg
jae
cld
pop
out
arpl
lea
out
lock
cdq
les
es
cmp
int
mov
fwait
cmp
jb
cdq
out
pop
das
cwde
int3
mov
dec
popf
push
mov
adc
test
and
scas
xor
and
jnp
mov
hlt
call
hlt
dec
(bad)
aam
mov
cld
shl
cs
push
xchg
cmp
jge
mov
xchg
test
dec
sbb
mov
into
daa
jp
or
and
ja
mov
mov
repnz
je
jge
les
push
dec
adc
lods
or
lods
les
sar
fidiv
(bad)
aam
sbb
pop
or
jl
or
xor
mov
loop
sahf
pop
scas
es
xchg
in
xor
mov
mov
call
pop
in
sete
push
mov
scas
mov
dec
sbb
ins
mov
push
jo
xchg
add
xchg
push
retf
pop
pop
aas
adc
sti
push
fwait
or
push
and
fucom
xchg
jne
pusha
push
sbb
inc
movs
xchg
je
and
xchg
sbb
jo
xchg
mov
movs
rol
xchg
setno
cmp
inc
xchg
mov
add
inc
jmp
dec
jbe
or
xchg
rcl
pop
arpl
inc
jecxz
je
and
sbb
(bad)
mov
add
xchg
mov
mov
loopne
cdq
add
mov
pop
outs
xor
sub
pusha
push
call
sbb
fisttp
shl
frstor
jp
mov
nop
scas
lea
xchg
loopne
lds
push
mov
mov
xchg
pushf
add
rcr
movs
push
add
xchg
and
ins
push
(bad)
cmp
mov
hlt
shl
xchg
pop
or
jecxz
push
(bad)
js
addr16
xor
mov
push
or
cdq
sbb
jle
mov
jbe
add
retf
jne
inc
xlat
icebp
test
push
in
les
pusha
int3
sub
scas
aad
dec
xchg
movs
ins
xchg
shr
icebp
xchg
gs
mov
mov
scas
int
daa
jl
sub
in
mov
mov
inc
adc
cmp
(bad)
or
icebp
xchg
mov
jnp
push
xchg
add
fs
test
and
push
out
mov
not
or
xor
pop
hlt
dec
mov
mov
cmp
repnz
jmp
push
sub
inc
cld
gs
dec
shl
xchg
call
adc
sub
cli
out
cdq
inc
add
cmps
mov
ret
sbb
scas
xor
jns
push
jl
push
hlt
jno
cld
(bad)
pushf
int3
adc
sub
jg
dec
fsubr
imul
jae
ret
push
xchg
push
xor
lods
ins
stos
push
cwde
stos
jl
aad
inc
les
sbb
push
fidiv
dec
or
adc
shr
jl
cld
jno
jmp
mov
pop
or
cmp
ins
pop
stos
mov
mov
push
mov
pop
cmp
mov
xchg
jge
dec
aam
out
or
aad
mov
pop
adc
sbb
jl
fild
adc
dec
add
in
ins
into
call
add
in
jmp
jno
in
cwde
hlt
and
push
inc
mov
in
nop
rol
push
fcom
sbb
int
in
cli
push
lds
xchg
xor
ret
sub
add
mov
xchg
xchg
jl
and
inc
jp
dec
adc
push
out
xchg
in
inc
jns
out
les
adc
adc
pushf
jl
imul
cmps
outs
xchg
xchg
lock
fisubr
sub
retf
sbb
pop
fcom
dec
mov
mov
add
mov
jns
test
ror
std
cwde
adc
jne
xor
mov
sahf
call
xchg
loopne
lahf
dec
adc
jg
mov
xlat
jmp
fwait
and
(bad)
into
inc
xchg
inc
sub
mov
add
adc
inc
push
xchg
inc
out
not
cwde
xchg
dec
xchg
push
sub
data16
jb
xchg
push
outs
mov
mov
add
leave
test
mov
shl
arpl
push
imul
(bad)
jg
pop
dec
lds
cmps
pop
jmp
mov
xchg
push
mov
aaa
mov
retf
into
outs
cwde
pop
xchg
cld
xor
dec
test
add
xchg
and
inc
repz
repnz
imul
sbb
test
stos
retf
push
and
into
(bad)
test
aad
jns
xor
sub
add
xchg
aaa
pop
int3
mov
pop
xchg
and
dec
cld
sbb
ja
xchg
and
add
(bad)
mov
xor
and
cld
jl
cdq
std
cmp
out
fs
les
inc
iret
cmp
add
ss
pop
mov
aaa
fistp
inc
xchg
lock
xor
hlt
mov
and
xor
aam
and
popf
arpl
scas
pop
jns
pop
call
setae
sbb
dec
and
xchg
mov
mov
cmp
and
adc
repnz
mov
in
fist
frstor
xor
fdivr
stos
mov
push
icebp
xchg
mov
mov
cmps
or
(bad)
hlt
ins
jge
scas
popf
cdq
adc
cwde
cmps
jmp
pop
push
push
xchg
les
jg
mov
add
inc
cmps
pop
mov
xor
out
xchg
or
lock
cli
out
pop
int
push
ss
xor
mov
es
in
push
ficomp
clc
aam
sbb
repz
xor
aas
adc
add
sti
popf
sub
fist
mov
lahf
cmp
cmp
shl
aam
repnz
cmps
inc
pop
stos
aas
xchg
mov
ja
mov
mov
cmc
xchg
jo
add
or
push
sbb
pop
xor
test
jnp
out
and
nop
jmp
mov
int3
xchg
sti
push
push
xchg
adc
cmp
xchg
adc
mov
clc
xchg
xor
adc
push
push
push
or
sbb
mov
inc
adc
xchg
mov
pop
lods
loope
push
xchg
(bad)
cs
sti
adc
cdq
push
clc
mov
xchg
gs
imul
adc
xchg
push
hlt
mov
dec
jbe
inc
aam
xchg
mov
call
in
test
movs
je
xchg
sar
aam
sub
hlt
stos
mov
cmps
push
adc
push
call
test
mov
iret
mov
jl
add
adc
dec
push
mov
adc
inc
xchg
int
xchg
sbb
sbb
push
cs
pop
jle
jmp
xchg
int3
ja
cli
mov
mov
pop
stos
xchg
inc
xchg
adc
cli
aad
xor
xchg
data16
test
push
inc
xchg
xor
inc
lods
xlat
pusha
fisttp
pushf
cmp
arpl
(bad)
xor
or
fst
jne
xchg
add
adc
push
fcomp
jb
sub
sar
ror
out
xchg
call
push
jl
and
cdq
enter
push
mov
sub
xor
inc
sbb
and
div
dec
test
xor
dec
pop
mov
(bad)
scas
aaa
add
xor
jae
mov
shl
push
scas
inc
xor
rcl
mov
jae
pop
xchg
inc
pop
cmp
push
or
jge
cdq
fcom
adc
movs
dec
ins
push
xchg
mov
mov
adc
cld
test
repz
fdiv
mov
xchg
scas
sub
dec
cmp
clc
inc
mov
mov
mov
mov
xor
add
stos
shr
mov
xchg
jbe
mov
and
xchg
xor
pop
(bad)
nop
into
fwait
dec
scas
jp
test
mov
imul
or
mov
or
shr
adc
adc
xchg
xchg
(bad)
mov
xchg
mov
xor
shl
cld
xchg
xchg
pop
adc
shl
lods
mov
push
fcom
jns
pop
or
adc
ja
cmp
jle
mov
push
cmp
sbb
xchg
cmp
dec
mov
add
aam
test
and
mov
stos
xchg
mov
retf
mov
add
xchg
in
push
sbb
sbb
and
cwde
push
dec
xchg
loop
dec
mov
mov
xor
ficom
fnsave
pop
mov
add
xor
(bad)
cmp
dec
sbb
mov
adc
cwde
ds
xchg
push
inc
sub
add
jp
jne
jle
mov
push
sbb
push
or
mov
dec
out
mov
sub
cmp
lea
aam
sti
fbstp
sbb
jmp
jge
imul
popf
sub
stc
sub
js
pop
sbb
mov
jl
movs
cmc
sub
in
loopne
mov
inc
jno
adc
jecxz
(bad)
call
pushf
cli
popf
mov
add
sbb
xor
jmp
pop
mov
or
je
mov
mov
mov
adc
lds
aam
fstp
cmp
mov
lahf
adc
shr
cmp
cmp
xchg
cld
xchg
std
mov
mov
pop
jp
fdiv
dec
sub
xchg
scas
adc
sbb
xchg
lahf
push
cld
jp
or
clc
in
xchg
push
and
xchg
into
xchg
aaa
xchg
mov
xchg
cmp
sahf
loope
adc
test
push
das
mov
aaa
pop
cmp
sbb
pop
xchg
inc
pop
inc
pop
jne
add
add
jo
mov
mov
aam
sbb
mov
xor
push
push
fwait
and
cli
dec
pop
and
fwait
test
outs
adc
xchg
add
call
mov
mov
sbb
js
xchg
jmp
inc
xor
xchg
mov
mov
jl
pop
mov
mov
lods
jae
jp
push
(bad)
xor
aam
add
repnz
fdiv
bound
sub
int3
mov
and
xchg
cmp
adc
jl
mov
xchg
dec
sbb
xchg
movs
adc
sbb
sub
jns
jl
dec
jp
xchg
sar
clc
stc
imul
int3
mov
adc
dec
dec
mov
jp
popf
cmp
cmp
xchg
and
mov
mov
pushf
xchg
shr
cmp
push
xchg
test
call
fisttp
push
add
fisubr
lods
test
dec
and
xor
xchg
pop
ja
sbb
loop
xor
cli
dec
pop
mov
adc
stos
fsubr
push
mov
popf
mov
mov
pop
jp
pop
mov
xlat
jg
aaa
cmp
push
mov
es
xchg
leave
cwde
pop
or
push
push
repz
fnstenv
pop
adc
jp
ficomp
adc
adc
repnz
fsub
stc
fist
sbb
xchg
cli
mov
aad
fcomp
popf
add
xchg
test
cmp
xchg
push
push
sbb
ss
sete
mov
xor
cmp
or
pop
cmp
sub
loope
mov
mov
inc
ds
adc
push
push
push
pop
xchg
pop
push
test
call
xchg
push
dec
xor
lahf
fisub
das
dec
fidiv
push
ret
test
pop
ja
aaa
and
cmp
scas
xchg
xor
loopne
sub
xor
repz
inc
push
aam
jge
mov
es
shl
in
in
hlt
fst
hlt
cli
sbb
add
sub
in
push
jle
mov
pop
shl
call
nop
adc
mov
push
mov
sub
push
mov
and
push
ins
sub
rcr
and
jl
loopne
sub
(bad)
cmp
mov
push
jmp
lahf
xor
out
and
or
repnz
cmps
jp
cmp
mov
sar
cs
inc
lods
xchg
add
cmps
fisttp
mov
push
adc
stos
pop
jmp
outs
xchg
xor
aam
or
mov
inc
call
push
pusha
repnz
into
dec
inc
stos
ror
mov
pop
inc
aaa
in
xchg
(bad)
mov
adc
fwait
xor
repnz
xchg
out
enter
and
xchg
jge
mov
xchg
or
cmp
pusha
pop
jbe
aad
adc
or
mov
sar
adc
cdq
sub
ss
sub
sbb
pop
dec
in
movs
xor
pop
xchg
mul
enter
jl
xchg
dec
fs
xchg
jmp
je
and
fistp
cwde
hlt
pop
xor
cmp
fwait
lods
cmc
shl
leave
icebp
int
adc
mov
push
add
or
and
retf
ins
cli
pop
movs
loop
sbb
call
mov
pop
adc
js
rcr
ror
imul
sbb
xchg
xchg
jg
jb
lds
jmp
js
cmp
xor
xchg
popf
pop
dec
mov
mov
aam
add
sar
ret
xor
jecxz
nop
lahf
and
std
mov
xor
outs
lock
sbb
and
ins
xchg
or
and
js
dec
or
jle
out
daa
sbb
mov
ror
mov
jne
adc
dec
rcr
push
mov
shl
mov
scas
outs
xor
xchg
ret
call
dec
xchg
jecxz
mov
xchg
jno
xor
test
and
xchg
dec
shr
push
ss
mov
pop
imul
or
mov
mov
pop
popf
test
in
mov
ret
xor
fist
(bad)
stc
xchg
sbb
outs
cli
test
jp
pop
and
jle
and
dec
loop
rol
ficom
cmps
fidiv
mov
or
out
test
nop
(bad)
jg
les
jmp
dec
push
and
mov
inc
xchg
cwde
pusha
push
imul
movs
xchg
shl
daa
(bad)
pop
xor
xchg
sub
rol
in
jg
pop
push
mov
aad
adc
push
shr
inc
xchg
retf
jl
in
pop
leave
mov
mov
xlat
ror
mov
xchg
mov
ret
rol
ins
div
xchg
cli
test
pop
aad
les
les
or
mov
leave
pop
nop
(bad)
mov
xchg
call
push
mov
ficomp
loopne
sbb
or
in
mov
pop
jb
or
shl
adc
pop
adc
movs
shl
popf
jge
dec
mov
retf
jo
xchg
pop
push
loopne
stos
daa
push
cld
xchg
rol
lahf
mov
dec
jno
push
in
dec
out
arpl
scas
push
sub
repnz
addr16
jo
mov
push
call
jo
scas
jge
or
mov
and
sub
pop
ret
loope
call
jmp
inc
jns
iret
int3
and
and
and
jge
adc
mov
test
push
cld
add
push
inc
lods
ds
fbld
in
pop
xor
jl
enter
xor
mov
cmps
and
das
mov
scas
xchg
mov
pop
ror
pop
dec
and
sub
pop
adc
fwait
jp
mov
pop
xchg
mov
int
movs
jns
retf
add
fisttp
in
push
jnp
sbb
pop
sbb
js
fsubr
bound
mov
push
jno
push
mov
cli
aad
and
adc
or
or
sub
stos
inc
jmp
sub
scas
mov
test
xor
or
xchg
icebp
sub
push
xchg
push
sbb
jl
xor
mov
adc
ds
mov
into
dec
fs
sti
xlat
mov
out
sahf
fiadd
fucomp
xchg
pop
add
mov
push
xor
sbb
imul
out
mov
xchg
fsub
jl
jb
xchg
int3
pop
cmp
cmps
sahf
or
xchg
adc
ins
(bad)
or
and
mov
jp
leave
cmps
out
call
adc
ja
cli
mov
int3
cld
adc
jge
mov
retf
and
stos
(bad)
in
sbb
imul
pop
call
hlt
push
mul
aam
jbe
cmp
and
sub
pop
dec
push
inc
aam
icebp
mov
pop
pop
fcomp
jne
push
test
mov
mov
cmp
aam
mov
inc
cli
xor
sti
add
hlt
xchg
pop
test
or
popf
xor
pop
xchg
pushf
fcom
shl
out
dec
les
mov
sub
retf
out
sbb
sub
pop
cmp
jmp
or
xchg
mov
in
(bad)
xchg
in
test
xor
push
cs
jnp
mov
in
xchg
dec
inc
pop
gs
dec
and
xchg
fistp
stos
cmps
inc
xor
and
imul
and
dec
es
imul
jmp
sub
sbb
xlat
aas
(bad)
fsub
leave
jle
adc
fcomp
(bad)
loopne
mov
aad
xchg
push
inc
mov
add
das
call
xchg
dec
xor
pushf
xchg
adc
xchg
mov
xchg
pop
xchg
pop
xor
dec
mov
push
push
xchg
mov
out
xchg
dec
sbb
push
sub
loopne
and
dec
mov
adc
enter
rcl
rcl
leave
stos
bound
sbb
adc
push
lods
dec
rcl
ins
in
lods
push
adc
fadd
xchg
pop
stc
jae
sbb
and
sub
mov
adc
xchg
test
mov
xchg
pop
pop
push
lods
je
in
xchg
mov
scas
and
adc
pop
xor
fwait
in
mov
and
jp
mov
ds
adc
int3
sbb
clc
mov
pop
(bad)
hlt
jge
xor
sbb
xchg
or
jmp
pop
mov
je
aam
bnd
jns
push
int3
hlt
outs
jl
cmps
and
sbb
add
aad
xchg
push
xchg
sub
in
sub
fwait
and
push
mov
mov
je
xchg
sti
bound
adc
cmps
mov
dec
cdq
xchg
cmp
push
push
add
xchg
jge
xor
(bad)
push
mov
xchg
aad
repz
stos
popf
shl
jmp
mov
cwde
fst
fidivr
xor
ins
mov
sahf
aam
ret
adc
in
adc
dec
xchg
push
fucom
push
jmp
data16
jb
or
cwde
push
ins
jg
add
xchg
mov
or
fadd
int3
xchg
mov
sahf
add
cmps
mov
mov
cwde
dec
dec
scas
xchg
push
mov
adc
adc
inc
and
js
mov
mov
adc
das
add
in
ret
fsub
xchg
loope
ds
(bad)
loopne
xchg
imul
repnz
pop
jae
dec
xchg
jne
mov
(bad)
inc
xchg
pop
iret
out
push
enter
jle
fistp
lods
mov
adc
cld
adc
fwait
in
neg
inc
jecxz
cld
repz
call
push
push
les
xchg
js
je
mov
lock
xchg
inc
stos
xchg
out
jbe
lods
xlat
inc
popf
in
push
jae
xchg
in
pop
pop
add
pop
rol
aaa
jbe
mov
lods
adc
fdivr
xchg
or
cmc
aam
movs
pop
jns
adc
push
shr
loopne
or
fwait
mov
(bad)
test
aaa
jnp
cdq
pushf
mov
adc
push
ds
loope
xchg
and
push
(bad)
repnz
xor
mov
adc
jmp
mov
call
ret
inc
xchg
js
outs
mov
call
adc
cmp
push
out
mov
pop
sub
jl
xchg
dec
jbe
in
stc
les
or
fwait
pop
sbb
mov
add
cdq
push
push
xchg
push
(bad)
daa
rcl
xchg
pop
cmps
fiadd
jns
cwde
xchg
sti
pop
je
push
loop
stos
aas
mov
xchg
jmp
fst
aad
aaa
sti
aam
clc
mov
xchg
adc
fnstcw
push
test
sar
pop
mov
jmp
dec
pop
lods
mov
mov
mov
dec
lods
sbb
xor
cmp
pop
adc
sahf
inc
pop
imul
fsub
ret
xchg
fld
cmp
cmp
or
pop
or
mov
mov
inc
fdiv
mov
jno
sub
jge
inc
jecxz
sub
mov
ror
gs
inc
mov
xor
or
popf
pop
inc
jmp
xchg
loopne
cmps
sbb
je
ds
push
les
out
cld
sub
pop
mov
fs
shl
adc
mov
scas
out
jmp
ins
pop
mov
jge
push
push
rcl
mov
mov
stc
mov
xor
cmp
jge
jno
(bad)
mov
lods
jl
hlt
ja
adc
rcr
into
mov
push
jo
jg
xchg
push
nop
jmp
pop
mov
or
dec
lahf
push
pop
push
jecxz
sbb
jle
mov
(bad)
repnz
push
aaa
fwait
inc
inc
jbe
pop
in
clc
gs
xchg
cdq
bnd
stos
repz
stos
mov
scas
or
ins
pop
cmps
jge
mov
push
test
and
cld
hlt
iret
mov
dec
jl
das
out
push
lahf
mov
nop
pop
and
fidiv
xlat
lock
imul
and
xor
pop
mov
sbb
retf
mov
cmp
ins
mov
js
out
rcr
popf
push
jno
push
or
and
xor
inc
adc
xchg
retf
ds
and
enter
mov
jnp
pop
push
jl
xor
add
pop
adc
xchg
xchg
jecxz
mov
mov
push
add
jno
hlt
scas
xchg
imul
adc
mov
xchg
scas
sub
xor
int
cld
xchg
push
clc
cmp
mov
xchg
xor
rcl
mov
rcl
dec
jno
adc
movs
mov
fidivr
stos
mov
in
ds
dec
xchg
push
push
sub
or
mov
or
xchg
dec
cmp
ins
test
in
les
jne
sbb
pop
fs
push
dec
mov
sbb
inc
xchg
gs
xchg
pop
cmps
clc
inc
fwait
push
xor
mov
and
jmp
cli
nop
jge
retf
imul
push
ins
xor
dec
add
xchg
outs
jmp
mov
sahf
xchg
ficomp
bound
addr16
nop
sub
popa
cmp
das
mov
lea
jmp
shl
dec
je
xchg
or
sahf
inc
int3
inc
test
pop
sti
sbb
xchg
cmp
adc
mov
xchg
mov
nop
popf
jo
and
xor
push
mov
xchg
or
fwait
je
pop
xchg
call
pop
jmp
(bad)
pop
sbb
dec
or
jp
sub
stos
cmp
jl
push
xchg
mov
push
mov
inc
daa
and
mov
jnp
lods
repnz
cmps
hlt
mov
or
pop
ret
fld
(bad)
cmc
push
in
pushf
das
xchg
or
push
mov
mov
lods
push
mov
(bad)
add
lock
inc
jl
sbb
xchg
sti
(bad)
cmp
hlt
xchg
xchg
popf
jmp
xchg
add
dec
inc
cwde
mov
or
adc
fimul
jne
(bad)
cmp
hlt
adc
push
pop
mov
arpl
xor
ficomp
push
or
inc
call
lock
add
and
jnp
add
adc
jp
xchg
and
dec
jmp
xchg
or
shr
adc
push
pop
or
lahf
push
xchg
dec
vfnmsubpd
movs
movs
fist
fild
adc
lea
xchg
hlt
pop
cmps
push
call
xor
jo
test
xchg
pop
shl
(bad)
les
or
push
sub
in
sub
hlt
cmp
xchg
icebp
xor
rcr
imul
dec
iret
int
jge
cmp
push
in
sbb
cmp
sahf
inc
mov
and
in
or
xchg
xlat
cdq
pop
xchg
push
pusha
mov
jge
sub
xchg
and
hlt
cmp
xor
clc
enter
hlt
(bad)
fs
sub
clc
hlt
rol
pop
inc
push
mov
xor
mov
outs
hlt
sahf
loopne
popa
xchg
mov
pop
add
into
mov
or
icebp
mov
sbb
xchg
mov
es
inc
xchg
(bad)
cmps
or
xchg
mov
out
mov
ss
inc
and
btc
mov
jmp
ds
add
push
lods
mov
adc
xchg
loope
mov
inc
xchg
rol
test
aad
ins
push
out
push
ret
ins
ret
std
cdq
cmp
cdq
inc
mov
or
jecxz
ins
mov
sub
mov
icebp
pop
inc
pusha
jl
mov
or
cmp
int3
out
xchg
mov
inc
mov
mov
loopne
aam
cmps
or
fwait
in
aas
jnp
(bad)
cli
je
(bad)
fcom
jp
add
iret
or
xchg
fmul
ins
das
dec
loopne
pushf
int3
push
fs
dec
repz
imul
fbld
clc
iret
xchg
or
mov
or
sbb
icebp
fadd
(bad)
xchg
xchg
lock
fisttp
test
scas
dec
jno
push
xchg
xor
sbb
nop
mov
mov
gs
loopne
pop
mov
out
xchg
push
into
cld
mov
inc
(bad)
or
mov
loopne
aam
dec
xchg
xor
mov
sti
inc
stos
int
lods
mov
cmp
aam
jl
stos
lahf
push
mov
jne
les
push
stos
popf
jl
xor
int3
aam
sub
xor
xchg
mov
popf
dec
jae
mov
in
mov
int3
xchg
call
xchg
sti
mov
jg
ret
sub
ja
mov
mov
lds
sbb
jns
pop
xchg
mov
popf
mov
in
jbe
lahf
imul
jno
xchg
sub
xchg
jp
adc
adc
xchg
enter
mov
push
cmp
lods
leave
xchg
xchg
cmp
mov
por
stos
nop
jmp
addr16
fwait
es
ja
les
jbe
iret
xchg
mov
adc
mov
adc
mov
fistp
shl
mov
mov
inc
xchg
sub
(bad)
call
xchg
add
aaa
mov
sbb
retf
pop
jge
jb
mov
rcl
js
xchg
jo
mov
dec
xchg
outs
pop
xchg
enter
jno
jnp
xchg
sub
inc
xchg
or
mov
jl
and
adc
ret
loop
cmps
xchg
das
cs
adc
ja
jecxz
inc
sub
mov
cmc
xchg
rcl
imul
push
cmp
mov
mul
jnp
cwde
push
vmread
mov
cmp
(bad)
xchg
ss
add
jge
xor
xchg
les
cmp
or
cmp
dec
xlat
mov
xor
enter
inc
xchg
adc
dec
mov
xchg
dec
stos
sub
mov
lea
gs
mov
or
jl
mov
ins
mov
fadd
test
or
fwait
(bad)
mov
mov
xchg
xchg
jo
mov
sbb
xor
xchg
ss
jecxz
stos
fmul
sub
and
jns
mov
mov
ficom
in
cmp
cmp
or
jns
test
lea
cdq
ficom
arpl
sbb
out
push
add
jge
mov
test
fstp
pop
push
sub
xchg
adc
outs
mov
xchg
dec
arpl
jmp
xchg
or
mov
in
adc
jbe
inc
sub
adc
mov
adc
adc
hlt
inc
dec
mov
mov
dec
jo
test
hlt
inc
mov
jl
xchg
mov
stc
push
push
dec
test
xchg
xor
shl
xchg
mov
or
pop
xchg
inc
cs
cli
and
xchg
test
pop
loopne
fst
sub
(bad)
adc
cmp
sbb
imul
adc
movs
fld
std
inc
int3
jne
xchg
clc
adc
fcom
push
xchg
sbb
hlt
or
call
cld
call
lahf
lock
xchg
pop
pop
xor
dec
fs
adc
mov
lock
mov
sub
adc
call
push
loop
mov
shr
sbb
scas
addr16
or
movs
shl
fwait
push
inc
cmp
in
cmp
mov
adc
sbb
xchg
repz
xor
ficom
sub
loope
movs
or
stos
in
mov
adc
shl
add
sub
mov
out
lock
mov
mov
mov
cdq
pop
imul
movs
push
int
or
xor
dec
xchg
lods
and
sbb
mov
pop
mov
adc
xchg
cmp
mov
stos
push
mov
adc
sbb
(bad)
pop
and
clc
stc
adc
hlt
cmp
and
aad
das
in
xchg
test
mov
shl
(bad)
data16
mov
stc
mov
push
mov
stos
xchg
popf
jecxz
jp
adc
in
adc
(bad)
clc
in
xchg
adc
popf
cmps
xchg
out
push
xor
mov
xor
pusha
retf
rcr
bound
inc
dec
jge
adc
push
adc
bound
mov
shl
push
outs
pop
add
mov
adc
pop
fwait
xchg
xor
pop
cmp
push
mov
ret
addr16
jbe
fisub
adc
mov
add
xchg
xchg
sub
mov
stos
pop
pop
iret
mov
and
cwde
imul
dec
push
adc
push
ins
test
(bad)
call
jg
retf
xlat
xchg
outs
push
and
xchg
mov
xchg
cmp
pop
movs
sub
pop
adc
inc
fild
iret
je
loopne
scas
adc
and
jle
or
cmps
mov
popf
push
push
mov
xchg
loope
fsubrp
mov
push
fwait
push
ret
nop
xchg
push
cmp
mov
scas
(bad)
dec
cmc
cwde
mov
lods
mov
das
pop
jo
jl
ja
xchg
fimul
jmp
popf
(bad)
fmul
not
mov
fs
jl
xchg
cmc
call
cmp
dec
add
nop
cmp
inc
arpl
pop
or
xchg
xchg
push
out
push
retf
mov
lea
enter
and
(bad)
xchg
cdq
mov
and
adc
xor
and
lods
dec
js
and
bound
repnz
imul
dec
xor
jecxz
xchg
inc
jle
and
aas
jae
in
je
add
mov
fs
out
ins
in
out
pusha
cmp
arpl
add
cmp
rcl
xchg
jl
lahf
mov
jle
push
mov
jns
fisubr
dec
aam
loopne
cmps
or
cmp
mov
cmp
xchg
aaa
and
mov
xchg
aaa
mov
and
inc
cmp
adc
sub
pop
xchg
fwait
fwait
xchg
scas
cmp
or
adc
mov
cwde
shl
std
xchg
cli
push
adc
cdq
popf
hlt
sahf
mov
xchg
pop
dec
cmp
ficomp
push
push
sbb
repz
pop
and
sbb
sbb
push
add
jo
stc
xchg
mov
out
dec
jo
sete
xor
jp
inc
inc
mov
mov
push
je
mov
pusha
test
in
ins
dec
xchg
dec
jp
jmp
stos
sub
xchg
shl
push
int3
and
mov
xchg
lock
cmp
mov
ret
sub
fs
and
imul
inc
ret
stos
mov
xlat
(bad)
and
xchg
test
es
imul
xchg
push
push
stos
inc
sahf
movs
push
out
xchg
stos
xchg
aaa
push
loop
xchg
inc
sar
sub
xchg
imul
mov
stos
scas
not
stc
out
adc
jle
dec
xchg
mov
leave
ins
push
dec
dec
pushf
xchg
mov
rcl
adc
xor
cmps
lods
adc
xchg
and
imul
adc
push
(bad)
jge
mov
pop
jl
(bad)
and
in
fwait
xchg
cmc
cmp
mov
fwait
cs
xchg
dec
(bad)
mov
sbb
(bad)
pop
les
mov
lahf
mov
rcl
jmp
and
jecxz
pushf
cmp
jmp
xchg
adc
sub
dec
add
fist
pusha
xchg
ins
test
lods
xchg
push
hlt
xchg
mov
leave
xchg
mov
ss
xchg
sub
sub
inc
in
pop
push
xchg
add
lahf
repnz
outs
xchg
fucom
jge
push
cdq
arpl
push
mov
pop
jo
mov
sahf
mov
aam
nop
mov
mov
xchg
fs
mov
fwait
jbe
in
push
test
xor
adc
imul
clc
pop
xchg
(bad)
cmp
(bad)
ds
xchg
pop
jge
aam
sbb
mov
jne
outs
les
aam
leave
lods
adc
xchg
cdq
cmp
adc
sar
cmc
or
gs
(bad)
jg
xchg
mov
cmp
xchg
fmul
push
pop
lahf
sbb
aas
movs
xchg
adc
iret
mul
xchg
(bad)
xchg
mov
jmp
test
jb
mov
xchg
mov
mov
sub
or
inc
sbb
je
inc
jns
or
sub
mov
nop
push
pop
repnz
inc
aam
(bad)
in
push
hlt
daa
jo
aad
xchg
into
ins
repz
mov
pusha
fwait
xchg
cld
cmp
fs
or
adc
fsub
lods
add
pop
fistp
xchg
test
and
rcr
hlt
movs
test
loop
xchg
inc
mov
cmps
aas
jb
xchg
stos
mov
sbb
pop
mov
call
mov
xchg
inc
adc
push
adc
cmp
mov
mov
add
add
dec
loope
cmp
and
or
xchg
jmp
push
mov
and
xchg
(bad)
xor
sti
push
pop
retf
xchg
inc
mov
popf
dec
xchg
in
scas
pop
add
xchg
pop
push
stc
mov
or
lock
cmp
mov
adc
hlt
je
loop
movs
inc
daa
pushf
imul
cs
ret
aaa
call
cmp
dec
jnp
and
mov
aaa
xchg
mov
inc
jp
xchg
fndisi(8087
fcomp
ins
jo
pop
and
jns
out
sub
mov
repz
daa
xchg
dec
push
add
pushf
ret
push
in
xchg
mov
inc
test
and
pop
rcr
bound
les
jg
aad
shl
mov
fist
xchg
out
out
(bad)
sub
xchg
clc
or
call
call
idiv
add
xchg
popa
jno
pop
(bad)
push
sbb
cmp
sub
fldcw
xchg
pop
cmp
push
or
dec
addr16
dec
aad
sbb
retf
add
sbb
xchg
adc
sub
xchg
stc
scas
jae
mov
iret
xchg
sub
pop
imul
add
mov
jg
(bad)
jge
sub
adc
mov
fcomp
xchg
add
and
sbb
test
jno
mov
mov
das
adc
sbb
inc
(bad)
xchg
lods
je
fisttp
or
lea
cwde
or
hlt
scas
stc
jle
xchg
stos
sbb
int
das
xchg
fistp
adc
cmp
stos
sub
js
pop
xchg
aad
popf
in
leave
je
jl
addr16
lahf
fsub
xchg
sub
xor
mov
loope
jo
push
and
(bad)
out
aad
out
xchg
sub
scas
or
inc
pop
add
add
add
cdq
or
push
and
mov
mov
adc
mov
rcl
ffreep
pop
fwait
jns
xchg
scas
push
add
ins
sub
out
jnp
ret
jo
sti
xchg
pop
mov
dec
add
xchg
xchg
aaa
hlt
inc
jmp
jmp
push
leave
int3
(bad)
xchg
xor
in
jno
or
xchg
and
mov
loope
cmp
xor
pop
mov
push
inc
out
fwait
retf
push
scas
and
and
es
mov
mov
sbb
daa
add
xor
push
xchg
mov
xabort
xchg
adc
and
lock
pop
addr16
test
ret
push
xor
add
xchg
hlt
mov
mov
mov
mov
cmp
iret
(bad)
fwait
test
aas
sbb
das
mov
cmp
jp
cwde
cmp
aam
adc
mov
loopne
call
push
mov
aam
sub
pop
pop
mov
nop
and
fwait
movs
inc
popa
in
push
xor
retf
cmp
repnz
pop
clc
sub
push
in
int
mov
ins
mov
xchg
push
leave
pop
xlat
inc
xchg
les
rcr
push
sub
cwde
mov
adc
pop
fs
mov
(bad)
push
outs
dec
rol
jb
shl
stos
cmp
xchg
out
loope
xor
mov
jae
(bad)
push
add
cmp
stc
js
xchg
ins
out
clc
jnp
xchg
aam
xchg
sbb
xchg
sahf
dec
mov
aam
in
xchg
leave
(bad)
sub
cmp
out
fdivrp
xchg
or
mov
rcr
dec
xchg
sbb
ja
and
jne
cmp
xor
in
add
ds
jl
sub
popf
retf
scas
and
xchg
or
das
test
mov
mov
push
cld
xchg
out
mov
cli
adc
sbb
adc
and
(bad)
or
xchg
ja
add
push
(bad)
jo
xchg
xchg
call
push
pop
sub
mov
pop
popa
xchg
inc
in
cmp
cmp
mov
(bad)
outs
test
inc
add
xchg
cs
ror
xchg
in
mov
xlat
mov
adc
add
aad
push
aam
rol
mov
dec
mov
adc
out
xchg
pop
and
out
sub
fwait
adc
mov
dec
xchg
outs
xor
xchg
lds
mov
and
add
xor
xchg
xor
inc
push
jne
mov
mov
fsub
mov
js
popa
push
stos
loop
mov
ret
es
jno
fucomip
clc
lds
pop
mov
jb
rcl
push
mov
cmp
imul
leave
pop
cdq
hlt
in
das
rcl
inc
dec
ins
xchg
mov
test
mov
aam
call
xor
or
clc
push
mov
xchg
out
fcomp
mov
(bad)
test
into
add
ins
adc
nop
xor
int
arpl
les
and
inc
sbb
xchg
fs
fld
call
sbb
sbb
pop
into
xor
mov
jb
push
inc
or
xor
movs
ds
jno
loopne
cmp
jl
or
loopne
push
xchg
(bad)
jbe
cmps
mov
dec
sub
dec
pop
sbb
adc
cmp
(bad)
and
in
adc
and
or
push
cwde
cdq
dec
shl
mov
sbb
sahf
stos
enter
mov
adc
aaa
mov
sbb
fwait
mov
push
pop
sbb
xor
adc
(bad)
cmp
arpl
sbb
shr
stc
ss
adc
aaa
pop
push
push
pop
and
mov
std
lea
fs
hlt
stos
mov
mov
sbb
mov
jl
lods
call
sbb
sbb
test
pop
std
push
dec
pop
sub
imul
(bad)
xchg
mov
jge
shl
xor
jl
mov
inc
das
sub
jno
mov
cld
mov
test
call
adc
or
mov
pusha
(bad)
stc
or
sbb
nop
div
add
cld
nop
out
les
mov
popa
xor
addr16
and
adc
xor
js
mov
jmp
hlt
inc
imul
es
das
ja
xchg
lods
btc
jmp
loope
out
in
sub
mov
test
icebp
scas
das
xchg
lods
adc
push
xor
xchg
es
jge
clc
in
ror
or
pop
or
mov
xor
cmp
in
scas
cdq
adc
les
ss
push
xor
ins
jl
mov
nop
js
(bad)
jmp
xor
jge
jmp
mov
jl
sbb
scas
or
jb
sub
dec
jge
dec
pop
jns
stos
xchg
ins
shr
dec
xchg
fistp
or
int3
push
cld
or
dec
mov
xlat
fistp
cs
in
sahf
adc
test
sbb
fwait
mov
ins
fiadd
pop
xchg
outs
pop
push
cmps
sub
(bad)
dec
out
inc
jg
rcl
lods
mov
jecxz
fst
not
repz
sbb
cmp
push
es
int3
adc
mov
mov
cld
push
iret
mov
xchg
inc
outs
adc
xchg
sub
xchg
push
inc
dec
xchg
cmp
add
ja
scas
pop
ficom
std
das
inc
xchg
data16
pusha
nop
ficom
(bad)
fstp
ins
xor
test
push
adc
(bad)
xchg
nop
inc
jno
dec
daa
xchg
jecxz
fsub
and
cld
scas
clc
aam
xchg
xchg
cmp
dec
mov
xor
xchg
adc
sub
cmp
xor
repnz
popf
mov
daa
jge
jmp
test
xor
je
lahf
scas
out
xor
lods
sbb
lods
add
push
je
jbe
into
and
adc
xchg
shl
and
mov
jge
loope
xchg
js
mov
cmps
sub
test
cmp
inc
mov
movs
adc
xor
xchg
jp
jbe
xchg
sbb
mov
stc
scas
je
ss
pop
cdq
inc
mov
or
push
add
push
jns
sbb
xchg
cmp
mov
imul
retf
icebp
or
popa
fldenv
xor
in
(bad)
cli
js
mov
and
xchg
push
pop
ins
sub
cmps
adc
pop
inc
xchg
mov
xchg
inc
mov
adc
xchg
or
daa
dec
ror
out
je
and
sub
jg
push
jmp
sti
pop
xchg
nop
mov
pop
mov
inc
xchg
push
or
mov
sub
rcl
jg
aam
popa
mov
pop
mov
mov
pusha
push
cs
sbb
fs
or
xchg
jno
fwait
dec
js
push
out
jns
shl
cmc
pushf
sub
inc
arpl
lock
adc
adc
mov
out
mov
mov
xor
in
sub
dec
xchg
enter
inc
jmp
jo
add
lahf
xor
int3
std
cmc
adc
mov
pop
sbb
xchg
dec
mov
jns
mov
mov
mov
xchg
iret
jmp
je
add
sub
in
sub
xchg
ficom
lock
xchg
jno
stc
push
xor
lea
popa
scas
js
iret
adc
adc
xchg
out
mov
jle
cmp
xchg
xor
mov
cmp
jns
leave
and
int
mov
push
add
call
sub
or
mov
aad
add
aam
sbb
inc
fidivr
test
xchg
push
push
pop
mov
bound
es
test
mov
jo
hlt
lods
fwait
sub
pop
xchg
stc
stos
cmovnp
(bad)
in
mov
sub
cmp
call
mov
xchg
test
fist
push
sbb
stos
xor
push
inc
inc
pop
xchg
arpl
movs
push
fmul
out
scas
das
sub
cmps
lahf
out
xchg
add
sub
jecxz
add
mov
xchg
call
cwde
test
aam
jnp
pop
inc
xchg
es
adc
lahf
inc
mov
mov
ss
arpl
mov
pop
adc
in
out
xor
xchg
mov
fld
cmp
(bad)
dec
pop
movs
lea
xchg
cld
lods
push
loop
cs
mov
jne
call
out
push
xchg
mov
or
xchg
pop
test
and
fcmovu
adc
mov
sahf
sbb
mov
xchg
not
in
pop
(bad)
xchg
iret
das
jecxz
cwde
cmps
xchg
imul
inc
inc
fild
mov
mov
add
inc
adc
jne
sbb
xor
xchg
cmp
cmc
push
test
popf
jl
xor
movs
into
bound
mov
je
pop
fwait
xchg
jp
sbb
scas
cmp
push
cdq
test
jg
scas
popf
in
je
add
ss
xchg
inc
mov
ins
test
push
mov
mov
in
out
scas
imul
and
add
dec
shl
retf
mov
cmps
test
push
mov
rcl
pop
jp
xchg
xchg
mov
loop
mov
jno
cmp
and
xchg
jmp
and
sub
cmp
sbb
and
cld
mov
cmps
int3
retf
sbb
aaa
mov
movs
mov
movs
xor
imul
pop
fdiv
mov
imul
movs
jl
xlat
pop
lods
jg
sahf
dec
ins
sub
mov
jecxz
mov
jecxz
jl
mov
das
jb
sbb
mov
lds
sbb
popf
dec
sub
stos
jge
fs
call
test
add
mov
mov
add
cmps
inc
sbb
pop
mov
std
adc
pop
sub
cld
adc
push
inc
pop
iret
loopne
(bad)
sbb
ror
mov
aad
sub
arpl
adc
fidivr
push
jno
mov
outs
xchg
xor
pop
mov
inc
jne
pop
mov
sbb
cdq
cld
fsub
fs
addr16
(bad)
pop
in
movs
xor
mov
xchg
imul
rcl
xchg
or
stc
cwde
addr16
adc
xor
fimul
js
lods
ds
xchg
pop
xor
xchg
outs
add
sub
stos
lahf
pushf
hlt
adc
data16
fisubr
mov
mov
adc
(bad)
lds
jl
sbb
mov
(bad)
(bad)
mov
cmp
xchg
jno
mov
lea
or
cwde
jmp
jns
rol
retf
pop
adc
imul
clc
and
sbb
mov
add
xor
and
push
and
les
jle
in
cmp
xchg
pop
enter
xchg
pop
movs
in
adc
ja
fs
mov
cmp
aam
jl
rcl
xor
mov
jge
out
mov
pushf
dec
cld
outs
cwde
mov
mov
and
xor
sbb
adc
and
xchg
inc
xor
cli
dec
xor
(bad)
popf
add
sahf
popf
hlt
jge
cmp
mov
push
cmp
jge
test
xor
adc
das
fldl2e
jle
pop
loop
sbb
push
scas
data16
xchg
xor
xor
in
mov
cmp
imul
sar
fbstp
scas
sbb
das
cmp
les
addr16
xchg
fimul
pop
xchg
jl
add
hlt
pop
out
inc
sub
(bad)
arpl
or
mov
dec
test
ss
js
lods
add
and
fsubp
xchg
sar
add
cmp
movs
xchg
inc
dec
sar
dec
fistp
push
xchg
cmps
adc
sti
popf
mov
stc
icebp
push
mov
sub
inc
(bad)
push
fild
inc
fadd
in
xchg
and
out
adc
xchg
jmp
push
mov
ret
mov
outs
mov
cmps
scas
shl
cmp
and
and
push
inc
mov
les
sahf
inc
pop
cld
ss
aaa
pop
jl
inc
xchg
push
pusha
lods
inc
shl
pop
push
stos
or
xchg
xchg
pop
cmps
or
jno
mov
mov
xchg
pop
adc
shr
xchg
and
je
push
dec
xchg
mov
lock
pop
inc
sbb
dec
xchg
movs
xor
mov
xchg
add
mov
pop
dec
mov
dec
pop
std
jp
ins
js
or
adc
iret
adc
push
pop
into
clc
sbb
xchg
div
pop
popf
dec
push
pop
adc
xchg
sub
push
outs
add
or
icebp
aam
xchg
in
imul
sub
dec
cwde
mov
push
dec
or
sub
or
sub
pop
in
cmps
mov
adc
aas
pop
xchg
repnz
retf
pusha
cmp
div
pop
cmc
outs
xchg
out
icebp
bound
in
fdivr
aaa
test
cdq
cmc
inc
test
rol
xchg
xlat
jbe
dec
jo
ror
test
popa
or
aad
je
jle
push
jmp
mov
xor
xchg
jecxz
mov
inc
xchg
mov
loop
cmp
les
xchg
or
iret
xor
ds
nop
xchg
repnz
sti
dec
sub
xchg
fs
push
adc
or
push
lock
aam
test
mov
cmp
jg
outs
int3
pop
jmp
mov
popf
movs
std
jno
repz
fwait
outs
inc
stos
loope
xchg
pop
(bad)
rcr
adc
xchg
(bad)
out
cs
mov
lods
cmps
xchg
dec
pusha
lds
inc
mov
cli
inc
mov
cdq
rcl
inc
lahf
xchg
sbb
ret
push
je
popf
call
ins
adc
dec
cmp
mov
sub
mov
adc
les
idiv
pop
adc
cmp
push
xchg
jg
inc
mov
les
dec
xchg
dec
aas
ret
mov
add
call
xchg
ds
enter
jae
mov
xchg
(bad)
pop
or
(bad)
jl
popf
mov
cmc
adc
movs
(bad)
out
xchg
into
inc
push
imul
xchg
ds
js
mov
lahf
xlat
xchg
mov
imul
daa
pop
push
(bad)
jnp
pop
movs
jnp
cmp
xor
adc
fwait
mov
loopne
dec
jmp
inc
cwde
push
sbb
xchg
fisttp
stos
aas
scas
jp
xchg
shl
fisubr
lahf
or
push
xchg
jg
pop
jge
cmps
push
fs
cwde
push
inc
rol
mov
fdiv
xchg
pop
xor
loopne
push
test
or
ret
in
ret
int
xchg
jbe
jb
mov
push
stc
das
push
fsubr
mov
cmp
push
fwait
or
adc
js
sbb
inc
mov
lods
inc
icebp
mov
mov
mov
shr
loopne
nop
xchg
(bad)
nop
jne
dec
jne
div
fidivr
adc
cmp
mov
test
loop
jns
pushf
xor
popa
pop
les
stos
xchg
lea
sbb
mov
rcr
lods
mov
push
es
inc
jo
and
call
xchg
iret
adc
lock
pop
leave
xchg
outs
fwait
or
imul
out
jbe
bound
(bad)
sub
rol
xchg
mov
jne
fs
jg
cmps
dec
imul
and
xchg
test
xchg
sub
jmp
jge
jbe
push
dec
adc
adc
xchg
pop
or
pop
nop
xchg
stc
in
jl
adc
xchg
(bad)
jmp
inc
mov
adc
inc
loope
xchg
and
xchg
gs
push
punpcklbw
cli
push
bound
in
es
data16
cmp
jmp
xchg
mov
iret
ja
jmp
mov
inc
loopne
cld
xchg
mov
and
add
mov
cmp
je
lahf
add
push
mov
xor
mov
test
push
rcl
push
mov
out
loop
not
push
cld
mov
repz
and
pop
xor
xchg
inc
out
sbb
pop
jns
xchg
jl
or
fldenv
add
int
imul
ds
outs
jne
xor
jmp
sbb
call
xor
lock
jb
adc
cmp
sbb
pop
adc
adc
test
mov
adc
xchg
pop
repnz
mov
fstp
adc
iret
mov
ds
and
cdq
or
xchg
and
(bad)
adc
cld
mov
xchg
(bad)
sub
mov
mov
xchg
popa
inc
out
je
mov
or
adc
pop
cmp
js
mov
xor
ficom
in
xor
das
hlt
call
push
repz
mov
pop
pushf
adc
and
or
mov
push
shl
mov
push
lods
and
fst
test
bound
xor
call
enter
icebp
xchg
jno
pop
fwait
mov
xchg
fstp
rcl
adc
lea
push
push
sub
jbe
scas
out
xchg
or
add
push
or
repnz
adc
pop
add
add
and
or
push
out
mov
mov
lahf
xchg
mov
push
imul
sbb
xor
stos
jl
loope
inc
out
fist
enter
add
push
dec
dec
sub
pop
xchg
cmp
cld
imul
and
repnz
stos
addr16
jecxz
(bad)
xchg
mov
imul
test
push
lahf
out
ret
into
hlt
stos
loopne
xchg
retf
cmp
or
or
mov
fsub
repnz
push
mov
cmp
dec
xchg
sti
or
pushf
cmc
popa
es
in
pop
and
mov
(bad)
into
and
push
out
arpl
pushf
mov
lahf
es
(bad)
pop
bsf
cwde
cld
mov
cs
cmp
mov
sbb
ret
xchg
push
xor
add
jg
scas
or
test
cmp
jecxz
xchg
push
pop
xchg
cdq
mov
hlt
test
sbb
adc
das
sahf
push
xchg
sbb
dec
inc
adc
cwde
inc
je
cli
xchg
jmp
xchg
mov
inc
scas
inc
nop
pushf
in
sub
jle
fcomp
xchg
lods
shl
or
sub
adc
adc
inc
ins
int3
mov
add
fist
fcmovnb
jge
(bad)
push
sub
aaa
jne
xchg
and
add
in
(bad)
popf
rol
jge
mov
sahf
out
jns
outs
fcmovne
mov
xchg
loop
out
jl
loopne
lea
cli
sbb
xlat
sbb
out
jno
popf
in
jl
inc
adc
xchg
ret
fist
push
nop
dec
adc
sub
xchg
cs
sub
add
inc
hlt
pop
ret
or
inc
sti
push
cli
push
mov
add
sbb
fild
imul
std
retf
imul
dec
sbb
push
mov
and
push
push
xchg
clc
mov
mov
call
mov
push
fmul
sub
xchg
test
xchg
xor
icebp
dec
jl
(bad)
repz
sar
dec
sbb
mov
shl
adc
bound
and
mov
pop
adc
inc
jge
push
test
int3
stc
arpl
cmp
mov
(bad)
jae
jnp
out
pushf
pop
adc
in
xchg
aaa
out
dec
or
mov
lods
mov
(bad)
jb
rcl
add
mov
xchg
dec
lock
push
sbb
stos
add
ins
push
xchg
lods
push
or
xor
in
mov
bound
iret
pop
(bad)
pcmpeqb
imul
adc
leave
cmc
cli
mov
xchg
ins
cmp
xchg
in
sub
in
loopne
adc
xchg
iret
xchg
(bad)
(bad)
mov
sub
push
adc
lods
add
add
in
push
and
xchg
(bad)
mov
mov
ret
aam
adc
xchg
sub
inc
add
into
or
pop
xchg
lock
jbe
ret
aam
fs
popa
rcl
jnp
jo
stos
add
jl
or
aaa
movs
xchg
push
repz
sub
xchg
out
cld
(bad)
push
mov
test
outs
call
outs
cmp
xchg
mov
sub
adc
test
call
aad
ins
xor
aam
gs
je
mov
stos
pusha
jne
cmps
loopne
fs
fsub
xchg
dec
je
lock
mov
mov
sub
xchg
xor
fiadd
lock
std
cmp
xchg
or
pop
scas
xchg
xchg
popf
loop
add
xchg
mov
xchg
fisub
inc
repz
cmp
pop
stos
sub
fwait
and
aam
mov
aad
pushf
mov
push
repz
ins
test
test
cmc
xchg
push
pop
popf
scas
adc
movs
cmc
fsub
jecxz
cmp
and
inc
rcr
inc
sbb
aas
je
div
add
jge
xchg
push
xchg
mov
fldcw
loopne
cld
aam
sahf
loopne
push
mov
adc
cmp
inc
aaa
jge
shl
sub
call
jl
adc
xor
mov
std
mov
push
test
or
out
int3
mov
push
(bad)
xchg
xchg
aad
cld
mov
inc
jmp
out
loopne
xor
jb
dec
rcl
stos
rol
bound
es
mov
mov
cmp
mov
mov
pop
and
push
adc
nop
mov
or
outs
adc
add
add
and
pop
xor
pop
mov
sub
jns
dec
pop
xchg
lds
std
rcr
pop
iret
test
nop
xchg
rol
or
push
imul
inc
mov
xchg
add
mov
push
aam
adc
cwde
mov
cmp
xchg
push
imul
jge
lods
push
push
fs
mov
adc
mov
pop
add
dec
popf
xchg
add
movs
xchg
mov
adc
inc
xchg
and
mov
xchg
pop
aaa
sti
out
imul
and
xor
pop
xchg
push
or
cmp
je
push
xchg
cmps
sub
cmc
dec
adc
lods
mov
pop
or
cmps
push
lock
jg
mov
test
xor
adc
test
sti
daa
xchg
dec
dec
icebp
pushf
xchg
pop
push
int3
xor
jne
xchg
leave
xchg
jbe
jno
add
jg
push
fwait
sahf
push
sub
movs
push
and
xchg
arpl
pop
std
xchg
mov
push
mov
xchg
and
push
pop
xchg
cld
popf
clc
fiadd
xor
dec
jg
jle
ss
mov
(bad)
(bad)
imul
dec
mov
mov
in
into
ja
mov
mov
sub
pop
loop
mov
hlt
mov
bound
or
xor
stos
fadd
xchg
mov
popa
cdq
sub
mov
jae
push
sbb
xor
xor
leave
dec
xchg
out
sbb
lods
sub
xchg
inc
xor
xchg
pop
sub
shl
add
repz
jno
bound
movs
xchg
xchg
or
lock
es
stc
hlt
aas
jmp
inc
fist
mov
jbe
inc
mov
xchg
fldcw
lods
lds
pop
dec
and
xchg
hlt
leave
mov
enter
cmps
cmps
add
mov
xor
xchg
lea
jecxz
sti
nop
stos
adc
sbb
dec
xchg
retf
cmp
adc
mov
mov
cmp
dec
cwde
test
push
(bad)
aam
enter
in
int
jecxz
(bad)
dec
inc
mov
push
sbb
cmp
ja
imul
paddsw
stos
bound
dec
xchg
mov
in
(bad)
add
xchg
ret
retf
lock
xchg
pop
test
jne
xchg
pop
push
sbb
out
rcr
add
and
jo
rcl
mov
icebp
xchg
int
enter
pop
xor
lahf
pop
(bad)
pusha
jo
jae
add
and
xchg
movs
std
pop
pusha
outs
repz
dec
add
enter
pop
stos
mov
jo
pop
xchg
packsswb
xchg
mov
xor
movs
lods
and
or
aam
pop
and
or
fiadd
push
call
ret
pusha
int3
pop
xchg
mov
add
mov
mov
fist
xchg
push
push
and
fwait
into
sub
xchg
xchg
xchg
das
scas
mov
ret
xchg
rcl
aaa
clc
cmps
sti
mov
mov
lahf
sbb
fstp
mov
jnp
aaa
mov
xchg
(bad)
mov
xchg
pusha
dec
stos
xchg
pop
call
jle
popf
int
and
fdiv
xchg
loopne
add
sar
adc
mov
fcom
inc
push
sbb
adc
test
iret
or
xchg
repnz
mov
xor
xor
mov
arpl
lds
xchg
fisttp
xchg
mov
hlt
ins
stos
mov
push
lods
mov
hlt
push
or
clc
iret
sub
dec
xchg
data16
in
std
mov
xchg
ss
push
adc
mov
test
hlt
push
stc
lahf
stos
js
adc
or
xchg
aad
dec
mov
sub
xchg
push
(bad)
int3
xor
xchg
ins
inc
test
adc
data16
xchg
sbb
cmp
xchg
gs
mov
and
mov
sbb
jb
cmp
hlt
xchg
(bad)
sub
jecxz
pop
repnz
and
ins
in
stos
loop
cmp
nop
xchg
sbb
in
and
int3
xchg
lds
nop
rol
retf
inc
popf
inc
stc
jmp
mov
ins
(bad)
sbb
aam
and
xor
sub
mov
and
fimul
sub
lahf
fwait
cmp
mov
bound
xchg
das
shr
loopne
lock
test
hlt
pop
call
jo
(bad)
xchg
fdivr
mov
xchg
cmp
test
pushf
mov
xchg
fst
pop
push
push
mov
xchg
movs
jmp
xchg
outs
mov
adc
dec
loopne
jmp
int3
lea
adc
shr
cdq
mov
dec
nop
in
add
imul
push
cli
mov
xchg
cdq
push
fmul
sbb
ficomp
push
xor
pop
ror
in
xchg
leave
mov
dec
ret
sar
add
out
xchg
mov
push
cmp
dec
and
sahf
in
sub
adc
imul
adc
push
data16
and
imul
inc
xor
shl
imul
dec
adc
ficom
popa
into
cwde
mov
and
fcmovbe
sub
adc
and
(bad)
mov
jge
sti
add
push
xchg
rol
jl
adc
out
fld
repnz
daa
push
sbb
(bad)
pop
scas
fsubr
jge
call
dec
dec
rcr
dec
xor
sub
or
sbb
cld
push
rcr
dec
sub
and
fcmovu
jge
sbb
push
add
jns
out
int
dec
pop
jb
xchg
outs
fcomp
mov
inc
jb
iret
(bad)
jae
or
mov
repz
mov
mov
jle
mov
cmp
push
aas
xchg
imul
dec
mov
xor
push
retf
popf
daa
movs
aas
xchg
push
lods
jge
int3
pop
imul
js
icebp
hlt
movs
push
push
cdq
push
addr16
gs
cmp
dec
hlt
cmps
cdq
xchg
les
mov
pushf
pop
les
dec
out
jns
xchg
jp
and
or
sub
xchg
jb
inc
xchg
cmp
es
push
das
xchg
xchg
push
in
fisub
dec
xchg
jns
jmp
les
rcl
cdq
fild
xchg
fsubrp
add
mov
fwait
cmp
pop
adc
mov
(bad)
xchg
push
iret
xchg
imul
inc
aam
dec
xor
xchg
push
test
sub
push
mov
sub
or
mov
fsub
sub
inc
inc
xchg
enter
mov
cli
sub
mov
mov
or
mov
add
fs
dec
xchg
enter
mov
scas
(bad)
cmc
cmp
test
(bad)
xchg
dec
loop
movs
nop
outs
xchg
shl
je
data16
call
std
cmp
add
call
addr16
lahf
icebp
(bad)
enter
test
cwde
mov
adc
or
and
xchg
cmp
mov
jmp
adc
and
aam
xlat
mov
cdq
test
sar
jnp
movs
xor
push
nop
jp
mov
mov
rcr
or
stc
sar
in
mov
fist
ds
dec
test
cmp
jl
sub
data16
inc
(bad)
inc
add
test
sub
jne
adc
mov
dec
fisub
cwde
jno
not
xor
rol
adc
xchg
sbb
or
sub
not
jo
popf
cmp
iret
adc
into
test
mov
or
pop
jb
cld
fadd
scas
das
mov
dec
push
jmp
stos
fdivr
xchg
in
movs
stos
iret
aaa
xchg
imul
xchg
in
mov
xchg
inc
int3
xchg
sahf
je
adc
add
jg
ror
xchg
mov
(bad)
sbb
mov
je
push
shr
rcl
or
or
scas
sub
mov
inc
retf
aam
ficomp
sub
xchg
adc
xchg
or
in
into
sbb
push
mov
mov
test
xchg
and
fdivr
mov
(bad)
cld
sub
fistp
pop
adc
adc
and
jbe
int3
lods
add
push
adc
aas
repz
ret
leave
in
and
pop
push
sbb
add
ss
mov
or
add
mov
or
xorps
jb
xchg
mov
mov
cmp
cli
xchg
mov
mov
cdq
in
dec
adc
movs
mov
xchg
sbb
pusha
daa
inc
adc
rcr
push
and
push
cmp
and
out
adc
popf
leave
lock
or
into
stos
iret
adc
mov
sete
add
in
mov
in
or
mov
mov
es
xor
pop
and
push
xchg
lea
push
cmp
rcl
(bad)
imul
js
rcl
cmc
or
jle
lock
fcomp
add
push
lds
xchg
mov
xor
jmp
adc
or
test
mov
xor
xchg
lahf
jne
mov
fucom
cld
lods
ins
test
xchg
xchg
jns
retf
pop
cmps
fwait
mov
test
lds
xchg
rcr
ret
xor
jmp
popf
inc
sbb
fst
cmps
sbb
popa
fidivr
lea
jg
aam
or
mov
mov
adc
fbld
pop
into
or
icebp
xchg
lods
mov
mov
stos
or
dec
cwde
push
xor
mov
bound
cmp
in
jmp
dec
cmp
mov
push
sbb
lea
inc
repnz
jmp
pop
in
pop
and
ins
xchg
popf
or
jne
push
add
mov
and
push
cdq
mov
lods
sbb
aam
hlt
int
xchg
jae
clc
pop
fild
dec
pop
jge
out
or
mov
push
pop
xchg
mov
out
pop
adc
mov
sub
push
cmps
cwde
jmp
(bad)
popf
call
cmps
adc
loop
cmp
pop
mov
adc
inc
push
xor
xor
repnz
cld
aam
stos
fisttp
repz
gs
xor
mov
pop
add
xchg
xor
imul
and
adc
xchg
and
push
mov
dec
inc
xchg
jne
xchg
ja
pushf
cmp
inc
pop
add
ss
inc
jmp
sbb
fwait
mov
adc
push
rcl
jmp
jge
in
and
inc
xchg
test
jge
repnz
mov
in
dec
inc
sub
lods
call
int
pop
pop
pop
xchg
lods
add
js
xchg
lods
cmp
xor
mov
xor
out
iret
adc
out
mov
out
popf
jmp
pop
jmp
adc
or
xchg
test
adc
stc
sar
mov
fidiv
push
pop
adc
jle
sub
dec
adc
in
xor
scas
(bad)
rol
es
cmps
iret
jae
mov
cwde
mov
pusha
sub
inc
xchg
cmps
xor
dec
test
mov
je
inc
jnp
fcom
inc
and
sub
pop
xchg
lea
lahf
pop
(bad)
shr
and
sahf
repz
xor
fcom
mov
aad
aas
cmp
imul
inc
push
and
xchg
add
xchg
out
or
ins
test
inc
xchg
mov
rcr
fs
and
call
add
and
ror
jno
gs
sbb
adc
in
cmp
sbb
cld
ror
mov
xchg
lahf
arpl
jbe
das
outs
jb
fisttp
mov
cmps
cmp
xchg
xchg
test
and
nop
mov
cli
rcl
rcl
mov
mov
xchg
or
scas
neg
jne
fcom
dec
sbb
xchg
les
sbb
fwait
out
cli
mov
popf
xchg
mov
test
xor
sbb
mov
xchg
xchg
push
pop
gs
xlat
repz
mov
lea
cdq
les
in
xchg
add
fs
cdq
push
test
aad
cmps
and
xchg
cli
ja
out
clc
push
xchg
les
mov
cmp
push
jp
fstp
mov
jbe
adc
xchg
dec
in
frstor
xchg
jb
aam
inc
dec
lods
sub
imul
fdiv
mov
loope
(bad)
popf
pop
add
lahf
pop
data16
aad
sub
cld
pop
in
lods
xchg
pusha
scas
add
dec
cmp
add
pop
mov
fidiv
mov
xlat
sub
cld
ret
or
jb
xchg
pushf
shl
dec
xchg
add
adc
xchg
adc
in
ret
fidiv
xor
lods
adc
ins
iret
inc
add
jnp
pop
xchg
loop
jle
push
push
xor
xchg
imul
es
inc
lods
mov
cmc
push
push
mov
fnstsw
or
adc
arpl
aaa
xchg
daa
dec
test
xchg
iret
nop
add
jns
fdiv
lea
jno
out
addr16
or
mov
lock
xchg
jmp
xchg
mov
sub
mul
xchg
loopne
sahf
push
adc
test
cmp
into
inc
neg
sti
sub
cld
jmp
jmp
cmp
push
ins
pop
adc
add
mov
mov
in
push
scas
sahf
sub
cwde
call
frstor
inc
adc
dec
cdq
sbb
rcl
dec
xchg
cli
mov
mov
cmps
xchg
sbb
mov
adc
in
or
xchg
mov
mov
inc
push
test
leave
add
test
xchg
jns
mov
popf
popa
imul
jmp
loop
(bad)
out
inc
dec
dec
xchg
jnp
(bad)
test
pop
in
nop
ins
idiv
dec
mov
jl
adc
push
xor
cmp
xor
imul
pop
dec
mov
or
cwde
out
push
fs
pop
fcmovb
fsubp
xor
jge
mov
cwde
inc
outs
push
jb
sbb
sub
xchg
xchg
test
shr
jae
and
mov
push
movs
push
sub
sub
(bad)
loopne
dec
inc
leave
lods
jno
mov
adc
adc
pop
jmp
add
mov
idiv
es
push
imul
je
nop
xchg
bound
call
sub
arpl
into
mov
xchg
test
and
xchg
push
push
hlt
jbe
stos
pop
int
daa
inc
ins
fld
cwde
xchg
add
xchg
mov
scas
es
xchg
sbb
adc
xchg
add
outs
clc
and
mov
xchg
mov
mov
pop
xchg
out
lods
sub
xchg
dec
fld
sti
jbe
xchg
jae
add
sub
xchg
and
add
outs
imul
inc
adc
xor
xor
mov
sbb
lods
not
inc
push
test
bound
je
jg
into
mov
mov
xchg
fwait
mov
push
test
inc
aam
sbb
or
aaa
call
popf
jl
cli
adc
sub
or
js
adc
and
ss
and
jmp
ja
stos
jp
inc
cwde
fidivr
aam
es
mov
add
pushf
dec
jl
(bad)
adc
fcomp
add
lds
pop
pop
jge
or
xchg
add
outs
test
rol
rcr
mov
mov
(bad)
xchg
jo
cmps
add
outs
adc
adc
fistp
push
fwait
mov
add
iret
xchg
xlat
js
push
adc
xchg
repz
daa
rcr
pop
cs
adc
push
xchg
jecxz
dec
fwait
(bad)
je
jecxz
cmp
xchg
daa
cmc
sahf
pop
adc
xchg
arpl
(bad)
js
fwait
push
add
sub
loopne
adc
inc
add
mov
push
mov
xchg
xchg
xlat
enter
push
cmp
inc
adc
sahf
mov
xchg
jno
and
dec
cwde
cs
mov
adc
inc
stos
scas
movs
mov
sbb
movs
jecxz
test
and
outs
xchg
fwait
push
vpunpckhwd
fsub
xchg
lods
sbb
in
xchg
cvtpi2ps
sub
xor
jp
stos
adc
lods
add
int3
or
enter
mov
or
test
(bad)
cs
ror
push
xchg
adc
add
in
mov
xchg
ins
xor
xchg
jb
mov
jmp
cwde
jmp
cld
cs
jne
xchg
push
mov
je
mov
adc
and
fsubr
xchg
xor
add
mul
mov
sbb
stos
push
test
push
mov
jns
push
hlt
mov
gs
sbb
cmps
fsubr
and
jecxz
imul
(bad)
xchg
push
and
repnz
pushf
je
int
adc
jl
dec
in
xchg
hlt
cld
xchg
push
movs
mov
fistp
aas
les
push
mov
gs
pop
and
xor
inc
adc
cmovs
mov
pop
and
jne
popf
not
mov
rcr
inc
xor
mov
jle
scas
sub
mov
ss
loopne
jae
sub
dec
mov
dec
stos
xchg
mov
or
xchg
sbb
sub
rol
fisubr
xor
mov
je
inc
cmp
test
mov
xchg
mov
cmps
sub
test
xchg
mov
pop
mov
inc
xlat
pop
inc
sbb
sti
enter
push
test
and
fistp
loop
repnz
fs
sbb
data16
push
mov
mov
pop
cmp
xchg
and
pop
inc
mov
mov
mov
loope
inc
mov
sbb
in
xchg
xor
xor
shl
inc
xchg
jns
icebp
push
adc
push
push
xchg
scas
fiadd
jecxz
(bad)
out
fwait
jne
xchg
call
jmp
mov
out
cmp
adc
xchg
jmp
xchg
xchg
push
jae
je
or
adc
scas
ja
outs
xchg
cmps
test
mov
mov
je
push
arpl
xor
daa
cmps
add
cdq
rcl
pop
adc
mov
repz
out
mov
(bad)
jnp
adc
add
mov
inc
xlat
mov
imul
dec
(bad)
pop
ror
ss
sub
js
nop
xchg
jbe
add
push
xchg
sub
push
mov
jb
cmps
je
xor
xchg
pop
sub
rcl
mov
mov
adc
outs
xchg
xchg
dec
lods
sub
icebp
xor
push
icebp
xor
cli
mov
les
shl
xchg
push
and
pop
iret
adc
adc
add
jno
jns
mov
sti
in
aam
leave
xchg
dec
xchg
mov
mov
inc
or
clc
sbb
out
shl
adc
shr
aas
jbe
xchg
jmp
sbb
aaa
mov
daa
rcl
outs
loopne
xlat
std
cmp
or
xchg
cmp
xchg
lock
cmc
dec
jo
xchg
jle
xchg
or
inc
mov
push
sub
jns
scas
loop
xchg
daa
add
pop
push
mov
mov
(bad)
into
jl
mov
das
push
aaa
(bad)
shr
call
jae
xchg
jno
jnp
js
ins
push
test
xchg
push
aam
sub
mov
sbb
mov
(bad)
cmps
movs
xchg
movs
js
mov
xchg
mov
sbb
lock
ror
ds
ins
and
jl
lsl
inc
in
faddp
sub
push
xchg
mov
sub
xchg
cmp
xchg
or
in
pop
pop
outs
mov
jns
cmpps
std
push
mov
push
(bad)
sbb
jle
adc
and
mov
cli
push
sbb
inc
retf
mov
and
sub
adc
repz
(bad)
mov
mov
sete
jmp
xchg
dec
inc
test
sub
mov
mov
outs
mov
jbe
(bad)
jl
je
stc
push
mov
xor
pop
loopne
movs
xchg
mov
aas
adc
(bad)
and
dec
and
mov
out
push
push
ret
cli
mov
lods
mov
or
mov
jae
mov
aas
push
pavgb
outs
add
idiv
loope
data16
lahf
movs
jl
leave
int
jno
or
js
xchg
shr
sar
xor
and
les
adc
cmp
repz
inc
mov
and
sub
rol
adc
jbe
cmp
sub
adc
call
or
cld
jb
aam
jge
jl
sbb
or
add
fist
aam
jl
dec
stos
cdq
mov
jbe
sub
sbb
fimul
jl
loop
jmp
xchg
loopne
and
test
sub
cld
lods
in
dec
lock
scas
add
rol
fnsave
jmp
push
xchg
in
xlat
mov
mov
es
xchg
imul
(bad)
xor
adc
push
stc
sub
out
stc
sbb
jmp
jae
jae
das
loope
mov
sbb
or
and
mov
add
push
fwait
retf
mov
dec
mov
jecxz
shl
ds
cmp
or
xchg
mov
mov
sub
push
xchg
sub
call
lock
push
adc
jge
shr
cmp
jecxz
xchg
mov
lea
and
rcr
push
push
inc
mov
or
xor
xor
dec
xchg
xor
hlt
sub
push
adc
out
test
or
in
add
inc
cmps
pushf
mov
xchg
inc
shl
sbb
(bad)
mov
lods
push
stos
sbb
xlat
mov
mov
pusha
adc
or
mov
pop
repz
mov
jb
jecxz
pop
sbb
xchg
mov
adc
cwde
jge
pop
fistp
sub
inc
push
add
shl
or
adc
cld
jmp
stos
enter
xchg
jmp
xor
sar
call
xor
sbb
jmp
adc
inc
cs
(bad)
and
cld
fild
aam
inc
mov
ret
dec
loopne
ror
mov
(bad)
jmp
pop
das
fadd
adc
inc
inc
(bad)
sub
mov
stc
inc
xor
jo
iret
mov
mov
gs
adc
cwde
inc
pop
inc
add
frndint
(bad)
std
pop
sbb
rcl
sub
xor
jge
xchg
rol
aaa
ret
xor
repz
mov
sbb
xchg
adc
loopne
test
les
pop
retf
dec
cmc
xor
sar
jge
fdivrp
aam
push
cmps
push
push
mov
fsub
out
outs
jns
shl
xor
mov
nop
adc
jmp
inc
clc
adc
movs
cmc
adc
gs
test
xor
inc
sbb
ja
xor
aad
add
inc
cld
cmps
adc
jo
xor
jge
frstor
dec
sbb
pop
loop
jl
mov
cli
mov
adc
int
and
stc
jno
rol
mov
jge
ins
mov
xor
les
daa
adc
(bad)
out
nop
push
push
xchg
mov
add
ret
mov
inc
add
xchg
push
loope
pushf
jmp
cmp
and
cmp
(bad)
mov
xchg
or
sbb
adc
aad
pop
mov
push
and
adc
dec
xchg
ins
jo
nop
push
xlat
xchg
and
enter
jecxz
mov
xchg
ret
jns
test
in
lock
rol
stos
mov
sbb
fistp
xchg
stos
adc
in
out
xchg
mov
lahf
imul
pop
and
sahf
sbb
test
or
cmp
aas
xchg
sbb
rcl
leave
int3
hlt
scas
outs
test
xor
xor
fcomi
pop
jb
sub
xlat
shr
mov
lock
jb
inc
mov
xchg
ror
fld
mov
stc
xchg
mov
or
xchg
push
leave
xchg
cmp
xchg
sbb
lods
pop
jns
xor
jp
pop
xchg
or
cmp
jmp
mov
xchg
jge
fucom
mov
inc
or
sti
int
mov
sub
push
ret
je
xchg
(bad)
dec
ret
fwait
jecxz
ficom
aam
add
test
addr16
mov
inc
out
inc
dec
or
push
into
mov
pop
loope
add
inc
in
test
scas
sbb
fistp
xchg
in
stos
imul
cmp
push
test
(bad)
sbb
es
mov
cmp
add
je
fild
fnstsw
scas
loop
jbe
inc
mov
ror
mov
adc
repnz
mov
jo
lahf
xlat
cmp
loope
out
or
stc
stos
mov
out
mov
and
fnstsw
add
and
xchg
cmp
bts
or
jne
mov
and
xor
and
gs
mov
push
ror
fprem
xchg
ins
add
notrack
push
and
xor
xchg
bnd
jmp
je
(bad)
sar
push
mov
fld
sbb
mov
shr
mov
adc
mov
stos
xchg
dec
data16
adc
popf
ins
iret
neg
mov
cwde
and
hlt
cmp
int
movups
sbb
xchg
mov
mov
dec
xchg
call
retf
lock
and
jmp
iret
hlt
test
sub
ss
clc
xchg
sbb
jnp
pushf
sub
outs
add
xchg
sbb
ins
out
sti
scas
xchg
imul
dec
arpl
jbe
sub
int
ss
xchg
xlat
ret
ins
mov
lahf
mov
lea
fucomi
push
mov
stos
inc
fdiv
fwait
movs
add
and
xchg
push
or
lds
sub
js
xchg
dec
arpl
cmp
pusha
ins
xchg
adc
jl
fnstsw
pusha
xor
add
cdq
mov
inc
fwait
popf
inc
jg
icebp
push
pop
imul
fdivr
cmp
dec
sub
adc
pop
xchg
pop
cmp
out
idiv
and
iret
dec
fimul
imul
xchg
dec
jl
rol
push
cmp
add
xor
dec
xlat
pop
push
xor
(bad)
ror
push
mov
sub
aad
es
inc
xlat
in
adc
rol
btc
sbb
adc
mov
mov
xor
out
adc
rcl
cs
xchg
repnz
das
ret
les
or
jl
dec
hlt
mov
xor
or
hlt
clc
(bad)
cmps
adc
cs
cld
and
dec
data16
dec
inc
mov
or
mov
xlat
mov
inc
adc
dec
hlt
int3
fst
inc
scas
aas
xchg
or
out
cmps
mov
and
fadd
loopne
psubd
movs
fstp
adc
fistp
xchg
push
inc
loop
mov
or
push
pop
xchg
sbb
push
mov
mov
ins
add
mov
mov
inc
shl
jmp
lods
dec
mov
lods
xchg
lock
std
inc
dec
xchg
fst
pop
cmp
data16
xchg
and
jae
xchg
inc
sbb
mov
fs
fwait
ds
xchg
xchg
ins
or
(bad)
mov
into
inc
push
cli
pushf
sbb
dec
ret
cmps
out
(bad)
pop
xchg
aas
lds
push
aas
jo
and
inc
iret
mov
fwait
int3
loop
dec
stos
repnz
das
pop
loopne
mov
push
add
cmp
xchg
push
test
in
and
inc
out
hlt
push
add
xchg
mov
les
jge
jnp
mov
or
imul
dec
in
je
das
lock
xor
xchg
xchg
pusha
mov
mov
(bad)
icebp
mov
mov
sub
xor
jb
inc
adc
adc
cmp
cmp
add
out
mov
clc
mov
repz
xchg
inc
jns
sbb
cmp
mov
in
push
in
pop
out
ja
cmp
fistp
adc
imul
lea
xlat
mulps
mov
clc
repnz
call
xchg
gs
add
fbstp
fist
cmp
xchg
fnsave
dec
in
mov
mov
in
popa
sub
lds
ss
lds
add
sub
sub
xor
or
icebp
adc
sbb
movs
(bad)
mov
xlat
into
xor
dec
lock
add
repz
adc
in
ret
dec
mov
xchg
pushf
jbe
test
mov
dec
xchg
lods
outs
or
shl
repnz
rcl
xchg
mov
or
sbb
pop
sub
mov
loope
and
sar
hlt
mov
cmps
mov
ret
xor
mov
cmp
pop
xor
jg
jmp
xchg
hlt
pop
inc
adc
arpl
das
mov
fadd
adc
xor
pop
push
xchg
lods
ss
ret
out
cli
dec
out
pop
mov
and
rcl
lods
arpl
cmp
xchg
jle
xchg
popf
enter
iret
mov
pop
jmp
repnz
xchg
arpl
mov
cmp
xor
mov
sub
lods
inc
pusha
xchg
mov
jmp
xchg
loopne
(bad)
loope
inc
xchg
arpl
inc
into
cld
stos
xchg
xchg
pop
rol
mov
inc
std
nop
shr
cmc
sub
adc
in
xor
cmps
lods
or
xchg
jb
clc
xchg
pop
ret
xchg
xor
jnp
add
xchg
adc
lea
sub
enter
xchg
mov
xchg
ss
icebp
ffree
mul
adc
pop
pop
jecxz
xchg
adc
jle
out
fwait
(bad)
call
iret
dec
inc
push
adc
xchg
xchg
sti
mov
popa
cmp
push
popf
cmp
mov
xchg
adc
cmp
jae
dec
fwait
adc
jmp
mov
hlt
cwde
(bad)
and
add
lahf
push
in
fs
jge
adc
dec
pop
aad
lea
outs
mov
jne
leave
rcr
xchg
inc
add
cmc
xchg
mov
je
xchg
push
xchg
mov
jne
cmps
mov
fdivr
xchg
cmps
cmp
push
lods
adc
mov
stos
add
xchg
xchg
dec
dec
push
jp
fcom
je
out
cmps
xchg
nop
and
sub
adc
pop
mov
push
loop
scas
jae
push
les
fwait
and
jbe
loop
jb
data16
(bad)
(bad)
sub
into
hlt
push
pop
xor
or
pusha
jl
pop
jecxz
xchg
imul
adc
add
pop
jo
mov
imul
mov
sbb
inc
xchg
push
fstp
scas
fadd
xchg
xchg
sbb
inc
push
xchg
mov
xor
popf
mov
sar
push
xchg
loopne
arpl
loop
and
les
js
mov
xlat
scas
push
xchg
push
(bad)
dec
dec
dec
stos
xchg
and
je
(bad)
(bad)
cdq
adc
loopne
xchg
scas
enter
dec
xchg
(bad)
jecxz
sti
pop
dec
jl
mov
js
xchg
cmp
shl
mov
scas
test
mov
fs
xchg
and
mov
push
push
repz
shl
mov
dec
loopne
test
out
dec
jne
mov
js
xchg
test
cld
push
sub
pop
movs
hlt
add
into
imul
dec
stos
mov
(bad)
mov
jb
imul
xchg
or
mov
call
enter
inc
push
gs
es
daa
mov
aam
xchg
sti
xor
ins
pop
jo
jecxz
(bad)
stos
mov
xchg
repz
je
test
dec
iret
xchg
pop
adc
mov
xchg
sub
jbe
adc
scas
mov
loope
je
xchg
push
or
cwde
mov
cs
push
fdiv
xlat
push
push
fwait
shl
pop
pop
mov
fldcw
lea
push
dec
fwait
push
pop
xchg
mov
mov
addr16
fisubr
out
mov
shl
call
aam
(bad)
lahf
retf
xor
jge
jne
dec
xchg
mov
loop
push
mov
mov
fwait
sub
int3
pop
add
add
xlat
adc
pusha
dec
lock
xor
xor
hlt
ins
(bad)
(bad)
std
fimul
adc
xchg
sub
repz
std
inc
sysret
push
push
pop
inc
and
xor
jno
jmp
inc
movs
mov
cwde
nop
cmps
xchg
fist
retf
adc
sbb
sahf
add
xchg
frstor
fbstp
dec
push
dec
popf
mov
rol
add
jmp
repz
push
dec
or
add
inc
mov
xchg
std
jne
sbb
aam
xor
xor
cmp
mov
fdivr
pop
fidiv
mov
xor
push
jle
jp
leave
add
lahf
nop
adc
and
aam
pop
daa
sub
in
jp
sahf
retf
sub
adc
sahf
sub
jl
cmp
mov
bound
adc
push
ror
fist
test
xchg
les
addr16
ficom
dec
xchg
inc
xor
ins
lods
xchg
and
ja
mov
(bad)
hlt
(bad)
sub
lea
dec
jmp
xchg
jmp
push
mov
sub
js
xchg
mov
pop
icebp
fadd
xchg
xchg
(bad)
mov
dec
outs
scas
xchg
loop
stos
test
mov
xchg
iret
dec
repnz
jb
mov
mov
pushf
addr16
sub
fild
test
shl
cmps
sub
jp
(bad)
fisubr
xchg
call
xor
je
adc
inc
(bad)
daa
dec
pop
inc
adc
xchg
xchg
ja
cld
(bad)
sti
mov
retf
pop
add
xchg
mov
dec
cmp
jbe
and
mov
in
test
sbb
(bad)
inc
(bad)
inc
push
ja
les
cmp
push
mov
lahf
mov
pop
into
js
rcr
xor
(bad)
(bad)
cmp
mov
mov
mov
push
pop
jmp
jmp
retf
cdq
in
into
cwde
add
rcr
std
into
fwait
shl
mov
inc
jo
mov
scas
and
enter
sub
add
xchg
jl
les
in
outs
mov
cdq
pop
adc
sbb
push
stos
pop
xchg
mov
fnstsw
mov
scas
xor
idiv
shr
mov
jnp
jo
jecxz
cmps
imul
stos
xchg
push
fsubr
xchg
test
bound
dec
addr16
nop
adc
push
cmp
clc
scas
in
and
xchg
data16
pop
mov
xchg
cdq
(bad)
call
xor
retf
jecxz
sbb
cmp
mov
xor
mov
cld
push
stc
sub
adc
pop
dec
add
mov
std
adc
ret
cmps
inc
adc
lods
and
xor
ja
xor
adc
lds
movs
mov
addr16
fwait
push
icebp
movs
jle
aam
sub
xchg
fwait
cmp
gs
in
xchg
and
aas
push
mov
dec
or
mov
adc
xchg
cld
movs
icebp
xor
ins
push
imul
jecxz
lock
push
dec
xchg
pop
adc
out
dec
je
push
push
cmp
mov
test
dec
call
xchg
and
mov
push
dec
ret
inc
ret
imul
cdq
sbb
pop
xchg
dec
loope
dec
shl
gs
jne
xchg
push
enter
pop
dec
mov
mov
std
mov
call
ds
int3
jl
cmc
aas
mov
mov
ffree
movs
xchg
ins
mov
adc
push
pop
sbb
jmp
out
push
push
nop
cs
push
pop
jno
jmp
jg
add
jl
xchg
mov
in
mov
jmp
lahf
push
lock
int
or
push
sub
mov
hlt
push
sub
jge
repz
adc
daa
in
je
xchg
cli
dec
sbb
pusha
shl
aam
mov
pop
dec
or
mov
xchg
jge
icebp
adc
jle
fiadd
push
test
pushf
cmp
inc
mov
cmp
ret
cld
ins
adc
push
popf
pop
leave
sbb
pop
jecxz
shl
movs
hlt
jge
fistp
push
test
add
loopne
mov
inc
fisub
xor
adc
jnp
push
lods
jb
lock
inc
xchg
cs
xchg
mov
push
mov
inc
leave
sbb
push
xor
out
jmp
fld
loop
mov
fimul
cmp
and
cld
in
xchg
xor
sahf
and
pop
lds
jl
mov
add
add
scas
jge
jecxz
xchg
test
ret
jae
push
arpl
shl
jmp
xchg
mov
clc
dec
push
mov
dec
inc
mov
scas
ds
xchg
mov
xchg
shl
jmp
adc
rcl
loop
pop
or
les
jge
fld
pushf
adc
xchg
lods
sbb
lds
repz
sub
and
jnp
repnz
jl
inc
cwde
out
lods
pop
or
sbb
xor
cld
sbb
xchg
psrlw
xchg
mov
add
fstp
push
and
jle
mov
or
push
adc
xchg
sti
cmovne
jnp
adc
xchg
cdq
inc
add
xchg
xchg
xchg
pop
jle
or
ret
fwait
scas
cmp
mov
es
stos
out
cwde
test
push
cli
adc
(bad)
out
icebp
rol
xchg
int3
es
or
in
fcomp
mov
push
xchg
fisub
push
shl
cwde
add
stos
out
fild
inc
fwait
sub
aam
add
mov
jmp
aam
sub
leave
push
push
xchg
sbb
dec
pop
sub
in
push
sub
xlat
fistp
cmc
inc
dec
call
mov
and
mov
xchg
jbe
movs
xchg
(bad)
mov
xchg
punpcklbw
pushf
and
pop
mov
stos
inc
sbb
cmc
push
in
(bad)
jbe
inc
ret
mov
lods
jmp
arpl
xchg
fimul
push
push
mov
fidiv
cs
xchg
fsub
dec
xchg
sub
push
cmps
jecxz
xchg
push
arpl
jno
aad
(bad)
into
dec
mov
sbb
dec
mov
stc
pop
(bad)
dec
xchg
js
cdq
dec
xchg
or
ja
gs
dec
mov
mov
imul
test
or
ins
mov
lahf
iret
pop
xchg
lods
sahf
(bad)
stos
xchg
or
cmp
stos
retf
test
jl
inc
xchg
int
js
cmp
sar
popa
xchg
xchg
cmp
or
xor
out
aam
jae
jno
stos
cmp
lahf
jecxz
fnstcw
or
not
xchg
mov
fnstsw
std
mov
pop
sbb
xchg
ss
bound
xlat
in
adc
movs
or
xchg
cmp
dec
dec
lods
dec
(bad)
(bad)
sti
jg
rcl
mov
and
aad
adc
cmp
xor
sbb
fwait
in
sub
xchg
aad
dec
iret
popf
pop
adc
in
xchg
xchg
mov
dec
cld
xchg
mov
jno
push
or
lods
repnz
cmc
xchg
xchg
inc
push
inc
jns
xchg
push
jge
or
adc
sub
inc
jns
inc
or
mov
hlt
push
pushf
(bad)
push
jbe
cmp
xchg
or
jmp
xor
fild
in
out
push
pop
xchg
inc
jle
mov
sub
jae
sbb
sbb
repz
pop
test
mov
cmps
mov
movs
or
push
leave
shl
xchg
cmp
or
inc
mov
mov
xlat
jl
stos
pop
xor
gs
lahf
shl
stos
shl
dec
or
add
dec
mov
jle
xchg
adc
(bad)
xor
aaa
push
mov
xor
out
cwde
push
data16
cwde
xchg
int3
cld
pushf
jns
add
loop
push
dec
pop
mov
int3
or
xor
mov
cmps
fwait
js
push
push
adc
sbb
repnz
sub
mov
(bad)
cmps
clc
jg
inc
dec
jnp
dec
jge
jmp
cmps
adc
jl
hlt
inc
xlat
sub
jle
pop
xchg
out
inc
mov
sub
loop
or
xlat
push
mov
enter
mov
dec
dec
lock
xchg
push
out
cmp
push
ret
or
sbb
cdq
sahf
sbb
inc
stos
push
mov
xchg
(bad)
fnstsw
ret
pop
(bad)
aam
gs
mov
scas
jnp
push
pop
les
xchg
xchg
inc
lea
mov
clc
inc
int3
inc
pop
dec
fwait
or
imul
xor
jle
or
mov
and
pop
or
cmps
push
in
xchg
shr
fdiv
pop
in
mov
je
xor
jle
in
mov
adc
sub
pop
add
jo
shl
adc
cmp
sub
ins
cli
dec
adc
xlat
shr
xchg
(bad)
mov
mov
sar
and
add
inc
out
sbb
out
adc
aaa
lock
(bad)
jmp
(bad)
cmps
dec
call
inc
stos
(bad)
aad
in
test
push
outs
xchg
(bad)
and
or
popa
data16
lock
xchg
movs
xor
shl
iret
xor
imul
hlt
push
xchg
xchg
push
xchg
or
test
jo
and
xchg
hlt
mov
jl
test
shl
mov
cdq
xchg
add
cld
(bad)
in
lahf
pop
lods
icebp
cmps
adc
iret
xchg
repnz
or
das
mov
xchg
pop
add
xchg
adc
adc
mov
add
xchg
cld
jbe
add
sub
mov
mov
xor
aas
jecxz
into
neg
fsubp
nop
movs
xchg
adc
fst
scas
outs
cs
cmp
push
mov
test
pushf
sub
and
xchg
xor
jo
mov
cld
stc
adc
jge
lahf
fdiv
js
sub
cld
mov
repnz
stos
das
adc
xchg
fwait
mov
jge
adc
xchg
mov
clc
pusha
mov
xchg
push
into
cwde
mov
pop
outs
mov
xor
mov
and
mov
jmp
push
rcl
mov
xchg
xchg
mov
idiv
xchg
repz
scas
loope
ficomp
inc
dec
(bad)
cwde
adc
xchg
and
xchg
enter
lds
in
jo
sub
jmp
jmp
ins
push
add
sti
out
mov
inc
mov
mov
inc
cmps
adc
jge
adc
test
sub
xchg
ja
push
sahf
data16
fcomp
xchg
xchg
into
hlt
icebp
jmp
fldcw
cmps
ret
push
jmp
sub
xor
xchg
adc
cld
cmps
les
xchg
ds
and
pushf
dec
imul
out
push
aaa
daa
push
popa
xor
dec
push
out
lods
pop
cmps
xchg
fisttp
in
adc
loope
addr16
mov
push
fdiv
jge
jbe
ins
and
cwde
loopne
xor
jnp
dec
and
imul
mov
hlt
cld
(bad)
std
rcr
mov
rcl
xchg
in
xor
inc
sbb
(bad)
out
adc
lds
stos
data16
xchg
sbb
cld
sub
sbb
loop
mov
retf
adc
jge
inc
xor
fisubr
and
cmp
ins
cdq
mov
mov
mov
cmp
mov
push
es
mov
mov
out
and
test
icebp
mov
push
test
or
mov
mov
push
ficom
popf
icebp
in
push
int
or
aam
mov
pop
mov
add
adc
es
lea
cmp
sbb
lahf
ret
mov
inc
mov
pop
sbb
popf
sbb
out
gs
mov
std
mov
cdq
cld
mov
mov
mov
sub
in
test
inc
sbb
pop
xchg
out
jl
cmc
cmp
jge
int3
xor
xchg
push
mov
loopne
xor
xchg
push
pop
mov
fisttp
pop
ret
xor
dec
jns
js
pop
mov
jne
push
adc
and
mov
test
test
sbb
add
test
sbb
jmp
xchg
fst
cli
pop
iret
jl
repnz
in
xchg
sub
jmp
stos
mov
iret
hlt
sub
push
jp
pop
mov
jge
dec
data16
mov
jae
cld
cdq
aas
fwait
inc
push
hlt
cmc
inc
in
cmp
test
sub
inc
sbb
pop
fwait
mov
jmp
popf
pop
and
fnstenv
(bad)
cmps
and
mov
ins
adc
not
js
sbb
dec
mov
je
sti
hlt
jl
int
push
cld
fldenv
jmp
ins
cwde
(bad)
sbb
xchg
sub
dec
in
outs
adc
movs
dec
out
add
cmp
sbb
mov
pop
clc
inc
ret
data16
push
outs
frstor
int3
add
lds
hlt
mov
fsubr
ret
and
mov
cmp
cmp
add
ret
inc
lahf
jp
aam
int3
sbb
push
sub
jge
or
jmp
shl
in
hlt
sub
aam
mul
sbb
dec
jmp
mov
xor
or
(bad)
adc
adc
leave
or
and
jge
mov
out
and
int3
xchg
jge
mov
pop
fs
jl
bnd
popa
rol
ret
dec
in
mov
xchg
mov
jle
push
repz
movs
popa
sahf
push
xor
xor
test
jns
mov
jne
and
inc
add
inc
mov
popf
cmc
gs
jnp
out
and
mov
in
fcom
bound
hlt
call
lds
mov
mov
inc
inc
dec
fs
(bad)
sbb
pop
jb
in
test
cwde
adc
ins
imul
and
xchg
enter
sub
nop
xor
xchg
lea
xchg
bound
cmps
cdq
inc
add
loop
adc
lods
push
rcl
loopne
add
dec
or
ror
xchg
push
sbb
pop
xchg
sar
movs
arpl
pop
xor
sti
stos
std
xchg
jb
mov
pushf
fwait
xor
add
inc
(bad)
in
xchg
fs
dec
lods
mov
jbe
fld
xchg
or
les
stos
dec
adc
shr
push
or
add
xchg
adc
(bad)
mov
ins
cld
sub
test
mov
adc
mov
std
mov
xchg
stos
cmp
and
ret
leave
popa
push
idiv
in
popf
mov
shr
inc
imul
stc
cmp
push
mov
cld
xchg
sbb
stos
jnp
test
xchg
jb
xor
enter
mov
dec
adc
std
int3
pop
sub
push
adc
out
mov
xchg
test
or
call
arpl
jo
call
xchg
dec
gs
iret
aaa
mov
fild
push
xchg
add
pop
push
sbb
and
push
rcr
pop
fucomp
mov
cmps
jl
xchg
cmps
aam
retf
aad
mov
inc
inc
jecxz
retf
cld
cmps
leave
adc
push
pop
pushf
imul
jge
jl
inc
pop
in
aad
xchg
cli
adc
xchg
hlt
sbb
(bad)
ds
icebp
out
out
out
pushf
aam
movs
(bad)
inc
and
xor
mov
loop
add
and
mov
loopne
mov
jl
dec
in
inc
inc
xchg
xchg
xchg
xchg
cld
not
push
mov
adc
mov
jns
and
leave
movs
cmps
in
ror
mov
pop
sahf
imul
stc
ror
popa
jg
jge
in
jl
scas
pop
aam
dec
pop
dec
jbe
jbe
js
xchg
inc
stos
adc
ret
pop
pop
fiadd
mov
jl
sub
adc
sbb
inc
push
stos
add
jge
daa
sub
cwde
xor
jle
pop
push
add
jp
pop
ins
adc
jbe
and
ss
ficom
inc
aas
xchg
adc
add
mov
xor
jo
test
inc
retf
add
mov
jne
das
hlt
jnp
push
out
push
(bad)
xchg
mov
mov
rcl
movs
pop
inc
popf
cmp
add
ficom
mov
push
inc
(bad)
xchg
rol
test
mov
sahf
push
in
mul
mov
aad
xchg
test
lods
xor
push
outs
lds
stos
pushf
xor
and
rcl
test
xchg
mov
not
pop
xchg
lahf
mov
repnz
mov
jo
pop
xchg
icebp
push
adc
adc
cmp
jl
call
mov
test
adc
pop
out
mov
std
xchg
fnstsw
xchg
jae
popf
cmp
stos
cwde
push
ficom
sub
mov
cmp
fiadd
inc
in
xor
xchg
pop
push
sbb
repnz
cmps
mov
and
adc
mov
push
xchg
mov
adc
ins
and
into
mov
dec
add
add
mov
dec
hlt
push
sbb
cmp
pop
repz
adc
enter
arpl
mov
xchg
sbb
pop
dec
sbb
xchg
jb
outs
aaa
cld
or
cmps
xchg
fisttp
push
shl
xchg
jnp
cli
mov
pushf
ss
xchg
std
sub
imul
lds
js
cli
sub
int3
mov
pop
retf
repnz
cmp
rcr
xchg
(bad)
and
mov
stc
xchg
rcl
repnz
sbb
xor
pop
data16
mov
jmp
jg
cdq
les
hlt
or
xchg
sbb
jp
sub
ja
sar
mov
cmp
mov
pop
xchg
(bad)
outs
sar
loope
ret
int
pop
push
add
lahf
aam
push
mov
mov
add
pop
inc
stos
in
pusha
sbb
xchg
outs
or
xchg
rcr
adc
repz
dec
inc
jnp
in
arpl
aas
push
xchg
aad
lods
imul
jmp
or
mov
jl
in
xchg
pop
adc
jg
scas
frstor
xchg
outs
mov
scas
inc
inc
cmps
mov
sbb
aas
mov
or
jb
test
clc
lods
cmps
je
call
push
pop
loop
xchg
das
fcomp
mov
enter
bound
jle
inc
lahf
adc
cld
xchg
aad
jl
ret
cmp
es
push
pushf
mov
inc
cwde
mov
cmp
push
push
(bad)
fcmovbe
in
movs
jge
repnz
xor
je
sar
mov
lea
jl
call
data16
jmp
mov
mov
xchg
sar
add
and
dec
rcr
int3
push
popf
jge
out
ja
js
ret
call
jne
sbb
hlt
mov
sbb
in
ins
mov
jne
jae
jge
adc
(bad)
xchg
cld
inc
clc
sar
push
shl
sbb
mov
lock
cld
je
xchg
imul
hlt
sbb
xchg
nop
dec
and
or
jno
icebp
jb
mov
push
mov
dec
inc
ret
stc
mov
push
jmp
cmp
xchg
leave
lea
jl
and
push
loope
(bad)
xor
or
xchg
(bad)
icebp
pop
repz
cld
lods
sti
stos
test
in
rol
push
sbb
add
mov
jns
sub
mov
xchg
js
addr16
in
stos
mov
fadd
mov
pop
call
(bad)
lock
jge
mov
sub
xchg
fwait
dec
call
jge
mov
xchg
xor
and
adc
inc
mov
dec
pop
ins
push
pusha
dec
adc
sbb
inc
pop
in
dec
fdiv
aaa
xchg
hlt
jl
out
xor
push
fld
cli
adc
xchg
into
(bad)
fist
xor
xor
es
sbb
mov
push
sub
int
dec
adc
push
and
jge
clc
mov
cmps
push
push
push
xor
sbb
out
xor
cmps
mov
push
stos
fidiv
jl
dec
and
dec
inc
xor
out
sbb
(bad)
movs
cmps
jl
or
in
cmc
adc
and
or
cmc
xchg
xchg
jl
dec
leave
adc
call
pop
jmp
jne
cli
ja
cmc
cmps
into
in
int
sar
mov
add
scas
jmp
inc
push
mov
lahf
adc
mov
jbe
cdq
pop
dec
mov
xchg
push
xor
es
mov
(bad)
fidivr
push
sub
lds
cwde
or
repnz
outs
sub
or
mov
mov
pop
ins
pop
(bad)
call
fwait
movs
mov
fild
push
out
lods
movs
push
xor
popf
jge
rcl
ins
xor
mov
mov
fsub
push
inc
je
rcl
jbe
ror
loop
cmp
or
(bad)
loopne
paddq
xor
mov
ins
out
pop
ds
mov
mov
jns
lods
xchg
nop
mov
fnsave
mov
(bad)
call
ficomp
push
sub
inc
aam
imul
xchg
pop
pop
adc
mov
jg
push
and
cdq
mov
fwait
cld
cwde
out
cmp
hlt
push
test
repnz
mov
xchg
cld
dec
iret
rcl
pop
sar
sub
cmc
nop
jp
in
stos
sbb
push
push
out
xchg
inc
fistp
hlt
push
xchg
out
sub
lods
or
dec
sub
and
lahf
inc
aas
mov
pop
dec
push
neg
mov
xchg
push
dec
ds
lahf
iret
out
mov
xchg
and
sbb
fsub
fisttp
jne
hlt
iret
and
iret
adc
dec
sbb
jle
ins
xor
add
ror
in
sub
out
xor
push
and
mov
adc
rcr
test
mov
(bad)
call
jno
add
adc
pop
cwde
push
xchg
test
mov
mov
adc
dec
loopne
adc
xchg
or
arpl
xchg
je
repz
pop
or
outs
jge
xchg
dec
mov
bound
(bad)
or
xchg
and
or
xor
addr16
nop
cmps
xchg
adc
push
loopne
or
mov
aam
pusha
gs
jo
aas
aam
daa
popf
xchg
shl
mov
jmp
outs
ins
mov
mov
and
sbb
mov
mov
ins
xor
mov
repz
push
sbb
mov
outs
cmps
sahf
cmp
xchg
stos
and
xchg
xor
jo
test
in
xchg
test
loopne
aas
dec
mov
ffreep
mov
shl
sar
ins
mov
cmp
sbb
mov
aam
dec
add
pushf
mov
mov
sbb
je
aas
xchg
xchg
(bad)
jecxz
test
rcl
xchg
mov
cmp
xchg
jecxz
dec
cmp
imul
les
mov
and
rol
ret
test
sar
add
and
je
push
xchg
cmps
test
data16
test
xchg
repz
adc
int
mov
pop
pop
xchg
in
popa
xor
push
sahf
dec
dec
pop
ret
loopne
jno
lds
into
xchg
iret
imul
inc
dec
fsubr
xchg
out
mov
and
shl
inc
jmp
out
out
sbb
xchg
outs
push
add
and
xchg
jg
test
clc
add
nop
mov
push
hlt
fbstp
dec
movs
rcr
add
xor
pop
arpl
and
cdq
ds
xor
fst
(bad)
cli
add
imul
pushf
imul
sub
xchg
arpl
xchg
ins
jle
test
bound
cmp
and
cmp
or
les
push
outs
pop
xchg
sub
xor
ret
xchg
jecxz
mov
ins
(bad)
mov
sbb
stos
pop
arpl
and
mov
mov
sub
or
stos
xchg
pop
(bad)
cmps
mov
out
ret
mov
mov
cmp
xchg
in
inc
popf
push
inc
pop
mov
mov
ins
inc
retf
sub
dec
lods
scas
ins
or
xchg
adc
sti
mov
mov
xchg
mov
pop
scas
dec
shr
jno
je
mov
stos
push
push
adc
mov
push
clc
daa
fild
sbb
je
aam
sbb
mov
jo
aam
nop
pop
xor
bound
les
into
icebp
arpl
fwait
movs
test
jl
dec
xor
jb
dec
mov
cmps
jl
add
icebp
adc
mov
xchg
ss
lahf
int
mov
xchg
mov
fwait
mov
xor
outs
hlt
xor
nop
cmp
ins
imul
mov
xchg
mov
mov
cmp
jg
pop
jno
push
daa
xor
fcmovu
xor
fidiv
mov
jb
adc
ds
sub
loope
or
xor
fs
les
xor
(bad)
es
xor
test
clc
jmp
dec
lahf
jne
sub
sbb
or
xchg
sub
cmp
push
dec
sbb
aam
fcmovbe
dec
popf
xchg
cmp
xchg
fprem
pop
pop
cmp
push
fcomp
xchg
add
bound
jmp
xchg
jecxz
jge
ret
xor
jbe
dec
ror
sub
retf
(bad)
js
ret
dec
fsubp
hlt
dec
push
inc
xchg
mov
ss
loop
mov
mov
xchg
cld
push
adc
test
cmc
xchg
push
sub
xchg
rcl
xor
repnz
jecxz
cmp
push
ficom
rcr
xchg
xor
push
scas
mov
mov
inc
(bad)
loope
cmp
xchg
xchg
jae
in
dec
sub
mov
or
cmp
mov
cmp
repnz
fsubrp
ja
mov
sub
xchg
xchg
mov
jl
fcomp
out
jne
cli
pushf
inc
pop
mov
das
arpl
test
aad
mov
dec
cmp
out
fadd
sahf
jmp
and
inc
hlt
cmp
mov
hlt
push
cmp
lds
inc
xor
retf
fwait
imul
call
xchg
std
or
sbb
sbb
mov
fimul
xchg
pop
cmp
cmps
dec
xchg
pop
jge
push
cmp
mov
dec
scas
js
dec
mov
cwde
inc
mov
sub
outs
rcr
push
sbb
cmps
xchg
movs
inc
mov
add
or
je
push
xchg
out
mov
(bad)
lea
jbe
cwde
mov
lahf
test
xchg
lock
xchg
movs
jge
dec
call
xchg
in
mov
xchg
dec
sub
mov
pop
lahf
jge
mov
popa
mov
gs
xor
jmp
sub
mov
enter
outs
inc
pop
fwait
push
fbstp
xchg
xchg
push
push
pop
pop
lahf
loop
hlt
(bad)
popf
mov
or
pop
icebp
pushf
icebp
add
jecxz
popf
dec
lea
adc
mov
mov
lea
hlt
in
shl
mov
add
xor
sbb
(bad)
xchg
push
sbb
pusha
and
adc
lahf
les
retf
push
loope
sahf
sub
adc
xchg
xor
pop
ror
mov
lock
xchg
mov
jbe
jb
fcom
jp
jge
xlat
adc
mov
int3
jl
push
out
cdq
dec
repz
gs
scas
push
and
cmp
(bad)
repnz
cmp
cmp
cld
(bad)
nop
loope
add
add
push
xchg
std
lods
cmp
movs
ins
mov
jmp
or
shr
sbb
push
pushf
lods
shl
pop
cmp
aam
mov
mov
call
push
xor
pop
xor
sub
mov
in
sbb
ds
test
inc
test
lds
test
push
outs
sbb
into
dec
fwait
std
jnp
dec
mov
mov
call
mov
adc
add
das
xor
xchg
daa
and
push
jo
jle
mov
aam
adc
lods
ret
ins
mov
or
int3
cmp
(bad)
fild
clc
mov
aas
or
mov
xchg
lods
gs
mov
mov
sahf
loopne
les
outs
pop
jb
jp
mov
jge
icebp
enter
pop
outs
int
push
jnp
retf
sar
add
sub
cmp
scas
xchg
dec
mov
rcr
into
dec
call
test
lods
ins
jne
dec
or
push
stos
fldcw
push
or
xchg
dec
push
adc
sbb
cmps
cmp
pop
mov
adc
xchg
sub
xchg
inc
popf
xchg
in
or
popa
adc
xchg
sbb
xor
ins
jmp
xchg
sub
cmp
and
xchg
les
jmp
out
fild
xchg
push
mov
mov
retf
pop
test
sub
out
outs
into
daa
push
in
outs
les
mov
ror
mov
xchg
push
or
(bad)
pop
mov
xchg
mov
not
ret
xchg
jb
pand
cmp
and
gs
dec
shl
ret
test
fild
je
mov
sbb
jle
leave
retf
test
imul
pop
rcl
mov
in
xchg
push
sbb
addr16
(bad)
and
pusha
loop
jbe
popa
add
xor
xchg
mov
icebp
push
pusha
cmps
pcmpgtw
fst
pop
sub
jne
pop
test
imul
test
xchg
jge
loopne
jmp
xchg
cmp
(bad)
or
cmp
jnp
sub
mov
lods
inc
das
in
inc
out
pushf
cdq
xchg
push
jle
and
push
movs
sbb
jp
mov
ret
mov
movs
push
bound
xchg
(bad)
xchg
arpl
aas
sub
and
les
fcomp
shl
jg
add
xchg
mov
xchg
jl
imul
add
xor
dec
mov
dec
movs
loope
or
adc
mov
arpl
dec
push
sub
cld
sub
test
inc
push
sbb
sbb
stos
je
popf
xor
jae
inc
xor
jp
and
fsub
cwde
push
fcmovnbe
jb
sbb
cmp
bswap
jp
in
push
push
push
bnd
inc
or
cmovge
rcr
ds
jge
in
sub
js
xchg
push
jo
jge
push
clc
arpl
in
sub
(bad)
xchg
out
ror
push
lock
or
popa
inc
add
pop
stos
out
fnstcw
push
fimul
fstp
jmp
sub
dec
sbb
out
rol
or
xchg
jl
sar
pop
ja
mov
call
xor
push
rcl
cdq
test
mov
cmps
jmp
pop
cs
add
xchg
call
push
aad
jge
(bad)
cdq
fyl2x
hlt
jl
pop
call
out
les
push
sub
test
test
fs
cmps
mov
fistp
jmp
mov
sbb
push
call
sahf
push
sbb
pop
mov
jge
push
rol
pop
test
aam
xor
and
inc
sbb
sahf
fiadd
pop
in
pop
movs
mov
data16
jne
stos
call
call
mov
sbb
jl
jl
mov
shl
dec
cs
push
push
data16
stc
add
xor
ret
aaa
je
jne
je
sub
and
mov
fnstsw
fdiv
mov
inc
xchg
jmp
(bad)
xchg
jge
fistp
push
stos
lods
int3
mov
jmp
int3
cld
rol
pop
pop
lahf
shl
mov
call
xchg
xchg
lods
jmp
je
add
jns
ins
rcr
push
mov
cmc
xor
aam
mov
xchg
sti
(bad)
hlt
jb
xchg
jne
mov
push
or
scas
scas
mov
adc
xchg
sub
test
xchg
sbb
out
xchg
pusha
mov
mov
xchg
stc
cli
jecxz
and
imul
mov
push
sti
popf
jg
sbb
ins
rcl
mov
mov
jae
sbb
shl
les
je
xchg
xchg
jne
rcl
adc
and
test
jg
mov
fidiv
imul
jmp
or
div
fs
dec
cs
add
and
and
jno
add
xchg
push
divps
and
pop
xchg
stc
cmp
jb
mov
call
xchg
jne
and
pop
adc
scas
aam
jmp
mov
push
scas
jbe
dec
out
xor
loope
sbb
mov
test
shl
jae
pop
enter
cmps
ror
and
dec
sbb
pop
lahf
adc
xchg
dec
add
out
pop
cmp
xor
adc
add
fs
xchg
sbb
push
ret
add
(bad)
popf
mov
sti
and
nop
inc
xchg
mov
in
inc
sub
hlt
iret
push
adc
dec
inc
lods
ins
mov
jne
dec
in
xchg
stos
lock
jbe
fcom
xlat
adc
test
and
arpl
fnstsw
inc
pop
xchg
and
sub
xchg
loopne
jmp
mov
lds
imul
ds
sar
pop
mov
push
fist
xchg
mov
popf
adc
in
cmp
neg
xor
push
ret
add
(bad)
xor
call
xchg
jecxz
in
mov
fiadd
mov
sub
out
cmps
xchg
shl
out
mov
pop
enter
pop
mov
fwait
jns
push
dec
inc
je
lea
mov
in
sbb
cmc
imul
xchg
clc
int
sbb
and
jnp
(bad)
pop
mov
arpl
cmps
pushf
xchg
xor
mov
dec
mov
cmp
(bad)
xchg
xchg
pushf
ins
mov
fs
jno
jl
cmp
sub
adc
pop
add
ret
in
and
in
add
ret
jge
in
int
mov
xchg
test
les
push
fs
cmps
xchg
inc
call
dec
and
inc
xchg
fist
jmp
cs
das
push
push
into
dec
xchg
adc
leave
(bad)
aam
outs
lods
jmp
jg
hlt
stc
sar
ret
inc
xchg
aam
inc
and
xchg
push
js
fcom
cmp
mov
and
sub
cs
adc
(bad)
pop
daa
jmp
xchg
and
adc
and
aas
jge
bound
dec
or
je
out
repz
dec
into
xchg
repnz
jecxz
nop
jbe
mov
stos
inc
in
mov
inc
(bad)
pop
int3
cmps
mov
sbb
ret
jne
popf
sub
mov
push
lea
fisub
ficom
xchg
retf
push
add
daa
xchg
sahf
pop
mov
sbb
rcr
mov
push
push
ror
test
ins
sbb
or
dec
and
das
mov
xchg
cmps
mov
mov
ins
fs
bound
mov
and
inc
jmp
mov
or
jae
xchg
mov
sbb
movs
xor
dec
loope
mov
fisttp
rcr
aam
sbb
mov
xor
aaa
xchg
cld
jb
jp
xor
test
xor
or
fst
mov
mov
cmc
pop
or
sub
adc
pop
adc
sbb
or
(bad)
in
push
push
inc
xchg
imul
jne
mov
xchg
mov
xchg
xchg
jecxz
xor
cdq
mov
xchg
add
sub
adc
xchg
xchg
loopne
jnp
xor
mov
xor
js
xchg
rol
outs
adc
and
data16
cmc
xchg
dec
fst
rcl
jbe
repnz
ret
and
sar
mov
xchg
add
jb
fst
int
pop
lods
sbb
call
inc
jnp
sbb
pop
retf
jo
mov
out
push
and
jb
call
pop
and
daa
pop
adc
bound
cmp
pop
in
xchg
test
or
scas
sar
xor
xchg
sub
jg
jmp
xor
mov
movs
and
mov
push
scas
xchg
inc
cmp
jl
rcl
add
xchg
lahf
gs
inc
mov
dec
cld
mov
xor
xchg
mov
into
xchg
daa
nop
dec
or
fcom
mov
rcr
ja
sbb
cmp
fnstsw
pushf
test
cdq
add
mov
xchg
xor
mov
dec
fidiv
int
and
or
mov
mov
push
ds
test
sar
cmc
sub
out
aaa
sub
daa
sbb
mov
inc
push
mov
xchg
jns
push
adc
hlt
loopne
xchg
outs
and
addr16
sbb
repz
repnz
sub
fistp
adc
adc
(bad)
int3
sub
cmp
mov
push
std
cmovno
xchg
adc
ficom
jmp
sbb
stos
inc
fidiv
xlat
xchg
or
shr
and
add
mov
inc
mov
xchg
fisttp
xchg
in
inc
mov
sar
add
pop
nop
mov
inc
mov
sub
pop
popf
xor
test
mov
int3
xor
(bad)
div
xlat
dec
arpl
adc
jae
xchg
add
xchg
(bad)
dec
nop
inc
xchg
cmp
cdq
test
xchg
fadd
ins
sub
aam
adc
or
loopne
scas
xchg
xchg
je
mov
jle
xchg
and
push
aaa
mov
xchg
cmp
popf
adc
pop
sbb
jl
gs
sbb
loopne
stos
dec
jle
popa
pop
dec
ret
xchg
sub
push
mov
pusha
xor
jge
xor
push
mov
adc
std
fdivr
push
mov
push
out
add
inc
push
adc
or
pop
push
dec
push
rcl
xchg
sbb
push
rcr
mov
mov
imul
lahf
sbb
shl
inc
neg
xlat
mov
rcr
inc
xchg
xchg
cwde
mov
jl
mov
fdivrp
jno
mov
cmp
mov
ins
push
sbb
jmp
loopne
add
rcr
in
je
xor
cmp
aam
scas
and
test
dec
call
mov
xchg
fcmovb
dec
test
bound
adc
dec
lea
pop
mov
pop
add
push
rol
xchg
inc
pop
jl
xlat
mov
xchg
(bad)
out
and
lods
mov
or
ins
jmp
xor
jb
mov
inc
xor
fsub
loopne
cmps
shl
xor
repz
push
dec
inc
enter
ja
shl
pop
jb
adc
sub
sub
stc
pop
call
dec
(bad)
sub
pop
pop
lahf
shr
fnstcw
xor
mov
std
adc
push
push
and
(bad)
leave
sub
sbb
push
in
adc
pop
shr
or
jge
idiv
sbb
loopne
sbb
xor
push
hlt
neg
jl
outs
push
or
stc
xor
sbb
les
arpl
inc
adc
mov
push
cmps
mov
sub
repz
cmp
xlat
sbb
in
iret
xchg
push
outs
(bad)
and
push
xchg
popf
(bad)
scas
pshufw
add
adc
xchg
cdq
in
stos
bnd
pushf
fcomp
mov
mov
and
fs
dec
xor
retf
xchg
inc
cli
cmp
fsubr
push
(bad)
lds
xchg
inc
lds
popf
mov
cmps
sub
push
fmul
mov
pop
sar
in
iret
add
hlt
xchg
xchg
stc
cmps
or
dec
out
jl
xchg
mov
jmp
fdiv
xchg
nop
add
xchg
lahf
adc
sbb
pop
adc
sbb
or
rol
clc
xchg
loopne
mov
ins
psrlw
cmp
xchg
repnz
cmp
cwde
mov
and
fwait
ins
das
lock
push
inc
mov
test
call
pop
jne
fld
xchg
clc
fisub
jmp
cmp
xchg
inc
je
jns
mov
popf
jl
xchg
and
sub
xor
fdivrp
cmp
pop
leave
mov
xchg
adc
neg
mov
inc
aam
mov
push
inc
call
sub
xor
xchg
retf
pop
cli
cmp
xchg
stos
xchg
popa
(bad)
cmp
sbb
cld
inc
cli
test
iret
popf
lods
jl
mov
gs
cdq
xlat
fbstp
dec
aad
in
xor
movs
test
push
repz
xchg
aad
mov
hlt
lock
adc
test
mov
sub
les
pushf
rcr
push
push
add
call
mov
stos
iret
lds
xchg
and
in
mov
in
push
mov
je
nop
cmp
sub
icebp
lods
test
pop
cdq
pushf
push
inc
pop
call
cmp
xor
xchg
fbld
cmp
jno
jg
xor
popa
(bad)
push
dec
(bad)
xor
loope
lock
mov
aam
ja
mov
popa
in
pop
adc
xchg
ret
call
sub
sbb
fisub
cmp
pop
pushf
ja
in
xchg
lds
daa
xor
test
sbb
movs
inc
pushf
pop
dec
fs
cs
shr
xchg
daa
or
sub
into
mov
loope
mov
xchg
or
mov
push
xor
fwait
and
dec
xacquire
push
sahf
(bad)
or
mov
xchg
mov
mov
into
push
xchg
mov
ret
inc
je
in
xor
jmp
cmp
fwait
mov
arpl
pop
mov
or
popa
mov
add
(bad)
xor
shl
mov
lods
cmp
sbb
push
mov
sti
adc
pop
xchg
sbb
sbb
gs
pop
loope
add
xor
push
call
out
xor
loope
pop
scas
push
enter
dec
jecxz
mov
jge
retf
std
addr16
sub
mov
pop
or
mov
and
push
cmp
rol
cmps
sbb
mov
ds
mov
mov
jmp
mov
push
(bad)
call
jmp
jnp
mov
aaa
sub
ds
push
hlt
sbb
fsubp
cdq
lahf
pop
or
xor
cmps
adc
jnp
or
inc
cmp
and
jmp
sbb
mov
dec
cmp
cmps
movs
sbb
push
fidivr
ret
jno
shl
adc
sbb
fidiv
cld
data16
xlat
jl
ins
call
xchg
mov
jge
mov
push
jb
ins
or
sbb
mov
js
cmps
mov
cmps
mov
ror
adc
mov
xchg
mov
sub
mov
add
je
xchg
xchg
push
xchg
jnp
sub
xor
inc
jl
push
(bad)
xchg
mov
into
adc
xchg
sahf
mov
mov
sti
mov
jle
inc
jle
mov
data16
jne
jnp
xchg
add
xchg
fidivr
sub
mov
xchg
cmc
aam
cmp
fwait
int3
jmp
push
pusha
outs
cmp
popf
xor
jno
out
out
(bad)
jne
lods
pop
mov
dec
sbb
dec
xor
mov
and
inc
sub
std
add
fwait
push
div
lods
sub
fs
mov
xor
sbb
push
imul
mov
lahf
cld
or
nop
xchg
fcomp
cmp
movs
or
adc
hlt
push
(bad)
xchg
mov
and
gs
mov
cld
stos
jnp
push
mov
push
xor
jmp
lock
mov
or
lds
sbb
into
mov
adc
cmc
popf
aad
pop
cs
dec
dec
sub
xchg
adc
je
in
xchg
push
inc
cli
adc
dec
ffree
mov
xchg
xchg
hlt
pop
stos
retf
inc
js
les
adc
jo
scas
test
dec
add
test
fistp
rol
mov
stos
xchg
test
dec
cli
pop
addr16
rcl
sub
fcmovne
push
sub
imul
(bad)
and
or
xchg
mov
inc
iret
xchg
in
(bad)
cwde
ror
fcom
add
xchg
ror
push
gs
sbb
in
adc
adc
in
mov
aam
cwde
push
call
popa
retf
cdq
fidiv
ret
xchg
dec
retf
nop
xchg
xchg
dec
pop
adc
or
dec
sti
fistp
shr
sar
inc
shr
in
lahf
sahf
sub
fwait
(bad)
mov
cs
loopne
jmp
mov
shr
dec
sbb
mov
idiv
mov
jg
mov
mov
mov
(bad)
mov
and
movs
hlt
out
adc
aam
xchg
(bad)
fistp
cmc
ret
xchg
sub
loop
rcl
jmp
push
daa
pop
mov
sbb
jge
mov
aam
mov
and
dec
shl
mov
sahf
(bad)
xchg
pop
dec
jmp
cld
xor
enter
or
adc
pushf
cdq
std
ficom
xchg
add
push
fnsave
push
loope
dec
jb
sub
mov
adc
in
xchg
xchg
jno
mov
jmp
add
inc
lods
xor
aaa
fild
push
cmp
sub
cdq
add
xchg
add
retf
jl
and
call
xchg
test
dec
push
sbb
mov
dec
xchg
sar
retf
inc
lds
aad
jae
pop
fsub
in
inc
fst
pop
(bad)
mov
xor
fcomp
pop
xchg
push
sbb
xor
les
xchg
mov
pop
dec
or
jp
imul
retf
dec
stc
xor
xchg
into
jno
neg
xchg
push
test
je
sbb
mov
xor
jnp
adc
pop
mov
jb
aad
cwde
xchg
pop
out
xchg
mov
pop
fcom
xchg
jne
mov
in
(bad)
fist
cld
push
ret
leave
cmp
push
dec
push
adc
cmp
jno
imul
add
outs
mov
adc
xchg
push
or
lea
mov
jno
inc
xor
mov
into
mov
adc
faddp
fs
mov
out
div
cwde
lahf
es
mov
adc
jl
and
fist
les
add
cdq
mov
lahf
lods
pop
mov
push
les
cld
sbb
adc
cli
sub
push
mov
xor
aam
inc
jmp
test
xchg
into
adc
sbb
sub
loopne
or
cmp
mov
push
mov
push
int
leave
adc
adc
sahf
cli
(bad)
pop
xchg
push
adc
pop
lahf
mov
jecxz
jp
fisttp
leave
cmp
mov
mov
and
xchg
out
fcmove
retf
push
in
js
and
retf
lea
ret
mov
adc
pop
adc
push
fist
pop
xchg
call
mov
pop
xchg
leave
cmp
sbb
call
xor
xchg
hlt
sbb
jg
mov
scas
cmp
in
inc
inc
movs
pusha
jg
rol
mov
sub
movs
mov
ins
inc
lahf
jge
daa
jmp
or
aam
repz
and
into
push
test
or
dec
in
xchg
cmpps
daa
cmp
pop
and
gs
or
call
in
stos
jecxz
fwait
std
fdiv
mov
ja
stos
and
mov
jmp
out
cmc
popf
sbb
cmp
adc
lahf
aam
push
inc
push
push
pop
jb
sbb
and
adc
jl
movs
sub
jecxz
sbb
loopne
fimul
mov
ds
xchg
cmp
in
repz
in
mov
jns
ret
push
les
add
xor
(bad)
and
and
pusha
arpl
push
stos
cmp
add
ss
mov
and
jne
mov
(bad)
jle
cmp
jg
mov
imul
xchg
push
pop
sub
mov
push
dec
sbb
pop
pop
mov
(bad)
int
ret
inc
mov
es
xchg
add
inc
xor
sub
dec
aas
mov
sbb
mov
iret
cld
sub
pop
sbb
cld
imul
sub
imul
gs
pop
or
and
xchg
push
pop
jl
xor
in
shl
cld
xchg
out
repnz
xchg
fcmovb
test
adc
lods
mov
(bad)
dec
xor
fdivr
mov
test
fadd
js
sbb
dec
lea
dec
call
repnz
fld
lahf
mov
jmp
loop
xchg
and
je
or
xor
test
lods
popf
jae
mov
jl
xlat
xchg
dec
xor
sub
sub
mov
mov
sar
mov
es
shr
dec
je
or
js
sub
cmps
mov
sbb
and
xchg
xor
leave
aas
mov
neg
mov
adc
test
mov
daa
jg
stc
(bad)
xchg
std
cmp
push
xlat
mov
xchg
int3
lds
mov
mov
pop
xchg
jge
sahf
cmp
std
and
daa
adc
stos
nop
movs
push
push
int3
mov
xchg
int3
xor
out
(bad)
jae
retf
mov
or
add
cdq
mov
fldcw
retf
pop
jnp
sahf
mov
test
sbb
xchg
mov
and
xchg
imul
pop
dec
les
out
lock
shl
adc
mov
sub
ret
xchg
mov
(bad)
je
fwait
xchg
jbe
lahf
mov
std
fcmovu
mov
int
mov
fwait
call
xchg
and
cmp
jno
add
cmp
int3
pop
mov
xchg
(bad)
in
ret
mov
sub
cmp
shr
and
(bad)
scas
ret
and
xlat
jb
out
das
fs
fld
inc
xchg
sbb
cmp
arpl
sbb
or
xchg
pop
dec
xor
sub
jp
xchg
sar
shl
pop
clc
fsubr
addr16
push
dec
sti
icebp
jnp
mov
xchg
cmp
xchg
jb
daa
pop
fistp
jmp
sub
ret
xchg
arpl
xchg
adc
popa
jo
fwait
cmc
cmp
adc
sub
add
jo
ret
ins
and
xchg
fdiv
lea
vunpcklps
mov
mov
and
pop
inc
and
lods
aam
mov
mov
push
dec
retf
fwait
push
daa
or
fs
jbe
xchg
test
xchg
mov
ja
xlat
sbb
xor
push
or
mov
or
jle
cmc
pusha
mov
xchg
jo
inc
dec
ss
sbb
mov
fs
pop
stos
test
push
and
test
mov
pop
jge
mov
fdivr
pop
add
data16
or
and
push
in
ins
mov
jge
pop
xchg
aam
push
pushf
dec
data16
cld
ficomp
js
add
lds
pop
jae
sar
mov
xor
in
fst
or
xchg
int3
cld
and
jnp
jb
(bad)
push
test
loop
cwde
adc
mov
jno
cwde
or
jge
jnp
push
mov
add
pop
pop
mov
fcmovu
cmp
add
dec
nop
cmps
and
test
or
jl
sar
gs
mov
push
mov
es
cld
xchg
cmps
mov
mov
dec
add
pop
xchg
cmp
pop
or
sub
rcl
in
ret
pusha
pop
adc
je
(bad)
xchg
or
sub
push
cdq
mov
jnp
jbe
cmp
ret
jge
jle
out
lea
adc
xchg
sub
mov
aas
in
inc
rol
jbe
push
xchg
hlt
imul
xchg
cmps
stos
adc
xor
call
sbb
loop
ret
xchg
aas
movs
inc
push
dec
pop
fbld
dec
xor
or
pop
xchg
push
xchg
fsub
imul
add
fwait
dec
or
cmps
test
sub
cmp
sbb
dec
inc
dec
cmps
sar
xchg
test
int3
das
addr16
loope
popa
xchg
and
hlt
push
and
jmp
repz
sbb
xor
call
xchg
dec
add
sbb
fsin
jb
stos
jnp
cmp
adc
(bad)
ror
rol
inc
sub
cdq
fs
out
xor
cmp
mov
adc
add
jmp
xchg
xor
ficomp
push
adc
repnz
iret
mov
arpl
xchg
xchg
not
xchg
xchg
and
dec
jne
mov
test
push
xchg
imul
repz
cwde
shl
(bad)
retf
test
sbb
xchg
(bad)
in
mov
mov
in
inc
mov
cmp
loop
inc
das
retf
in
sar
fwait
dec
jmp
fcomp
sub
mov
mov
adc
ja
jmp
xchg
fimul
inc
mov
lahf
sub
fwait
jb
and
lock
or
dec
lahf
jnp
arpl
mov
xchg
outs
xlat
(bad)
push
cmps
lods
es
xchg
loope
fisttp
xchg
dec
pop
iret
pop
ins
xchg
pop
sub
cmp
push
lock
dec
inc
mov
mov
xor
push
or
test
ret
or
xchg
and
pop
pop
cs
jecxz
enter
xchg
ret
xchg
inc
fild
sbb
mov
in
sbb
call
rcr
pop
je
mov
and
outs
mov
inc
ror
btr
fist
dec
sub
in
sahf
mov
cmp
xchg
jnp
add
pop
pop
das
xchg
call
enter
test
mov
fstp
repnz
xchg
arpl
movs
cs
xchg
vpmaddwd
pop
call
sub
xchg
dec
xchg
hlt
cmp
enter
(bad)
cmps
or
push
jae
adc
sbb
lea
push
pop
mov
xchg
data16
aam
jg
enter
outs
adc
xchg
mov
and
xchg
dec
pusha
or
sbb
xchg
loopne
adc
iret
sbb
call
cmc
vmread
jmp
ss
xchg
rep
aam
icebp
pop
cmc
jle
in
push
xlat
xchg
push
stos
lahf
movs
or
out
pop
mov
daa
or
jp
adc
and
pusha
test
std
sub
sbb
daa
test
xchg
cmc
inc
div
loopne
or
adc
jmp
fwait
imul
popf
mov
xor
adc
sub
mov
xchg
xchg
gs
iret
lahf
lea
and
rcr
repz
adc
sbb
xlat
jne
jb
dec
stc
sub
popf
push
jmp
mov
lods
es
(bad)
jmp
ret
nop
mov
sbb
cwde
cli
lds
outs
daa
fwait
jl
pop
loope
daa
sub
popf
dec
sbb
aas
sbb
les
xor
inc
push
cwde
ss
or
ja
mov
dec
add
cwde
sub
lock
and
mov
cs
in
fwait
mov
je
nop
mov
sbb
fsub
sbb
xchg
xchg
cmp
cmps
adc
sbb
neg
xchg
sar
jecxz
imul
jp
xchg
sbb
jne
add
js
pop
inc
outs
jbe
push
xchg
sahf
ss
lods
int
jp
fcmove
nop
rcl
inc
jbe
cmp
das
iret
inc
add
inc
xor
push
add
lods
push
xchg
mov
retf
imul
xor
jbe
cdq
(bad)
mov
cmp
cmc
xchg
push
aam
aad
fiadd
jmp
mov
loop
mov
push
push
and
xchg
aam
push
mov
or
jg
std
xchg
adc
jg
dec
leave
sbb
or
push
jl
mov
cdq
push
cmp
xchg
call
aad
aam
dec
adc
mov
add
(bad)
(bad)
aam
mov
cwde
xchg
adc
ret
popa
int3
clc
add
je
mov
hlt
fiadd
jp
ficom
psubusb
xchg
dec
xchg
or
xor
inc
out
mov
xchg
pop
sub
sbb
xchg
(bad)
jge
and
push
pop
arpl
jecxz
add
jo
mov
jg
xchg
inc
in
jle
mov
fdivp
aam
inc
dec
es
mov
int
aam
adc
arpl
cs
fsub
dec
call
pop
sub
pop
xchg
fdivp
or
cmps
and
pop
xor
test
arpl
in
out
fild
pop
push
fld
pop
and
(bad)
xchg
ror
(bad)
cwde
ins
jnp
jl
xchg
mov
dec
jg
fadd
(bad)
or
call
jb
ret
aaa
ins
adc
sub
idiv
mov
add
push
rcr
jle
mov
dec
int3
inc
adc
call
sbb
js
push
jg
push
fwait
cmp
xchg
dec
fiadd
mov
hlt
and
scas
cdq
rol
pop
push
icebp
pop
hlt
jne
sub
(bad)
mov
sbb
inc
jg
xchg
(bad)
mov
pushf
lea
in
mov
fdiv
aam
sti
lock
call
mov
bound
repz
cwde
ret
push
xchg
inc
jecxz
mov
ror
ins
sub
fwait
jae
sti
mov
adc
js
xchg
or
adc
xchg
mov
pop
xchg
test
es
adc
sbb
jo
adc
jb
loope
fdivr
dec
pop
mov
mov
push
fldcw
xchg
int3
es
dec
lea
int
test
xchg
dec
cmps
inc
in
sbb
lock
hlt
sahf
jge
leavew
mov
int
stos
adc
ds
retf
sub
or
movs
jl
cmova
sbb
fstp
lahf
stos
dec
push
xchg
ss
sar
aaa
dec
pop
dec
(bad)
jns
adc
lahf
jge
fimul
fsubr
retf
pop
sbb
out
adc
and
popf
xor
out
ds
and
rcr
jns
xor
pop
sti
lds
icebp
clc
or
int
std
inc
xchg
jb
xor
sbb
jmp
adc
call
imul
sahf
cmp
cmps
pop
lea
mov
outs
enter
adc
shl
sbb
std
(bad)
push
add
jge
rcr
xor
push
sub
pushf
ja
int3
jl
cmps
and
xchg
jbe
int
lock
std
mov
test
cmps
sar
jne
jo
call
cdq
adc
or
addr16
sub
inc
and
sub
fcomp
in
inc
xchg
ins
sbb
xchg
sbb
jg
sub
mov
dec
pop
mov
popf
jnp
ds
xchg
pop
cmp
xchg
sbb
and
cmps
or
repnz
out
jge
lahf
push
les
ror
pop
push
sub
xchg
adc
imul
jmp
retf
pop
cwde
pop
inc
pop
stc
stos
aam
inc
(bad)
nop
nop
int
(bad)
jmp
inc
shr
shr
stos
sbb
sub
mov
adc
cwde
aas
cmp
pop
mov
pop
jle
add
fcomp
dec
mov
fsub
fsub
xchg
and
and
dec
adc
cmp
les
xchg
and
mov
mov
hlt
cdq
push
push
ss
rcl
sbb
cmp
out
popf
(bad)
jge
scas
jge
jns
test
stc
fmul
jg
sub
(bad)
jnp
stos
xchg
jmp
lahf
pop
loope
mov
push
out
fadd
(bad)
mov
pop
xor
ja
cdq
cli
lds
xchg
out
xchg
push
pop
inc
xchg
test
test
mov
mov
pmulhuw
mov
repnz
mov
(bad)
xchg
sbb
jl
xchg
sbb
mov
ss
out
gs
xor
data16
inc
sub
cmps
adc
jmp
pop
xor
int3
cmp
repnz
scas
add
mov
aaa
sti
jb
mov
mov
xor
push
stc
test
ja
data16
cmps
loope
or
repnz
popf
mov
sub
hlt
dec
xchg
jl
ins
sub
mov
mov
xchg
pop
xchg
rcr
mov
mov
or
ins
mov
xchg
call
sub
xchg
shl
add
mov
inc
pop
mov
std
ret
mov
inc
adc
xchg
mov
xchg
je
push
mov
push
repz
mov
je
gs
ret
lods
jge
int
pop
(bad)
xchg
sbb
sub
pop
test
and
adc
inc
mov
mov
pop
or
lods
xchg
jg
jb
pop
icebp
push
dec
inc
ret
inc
daa
cs
nop
call
pop
loop
xchg
sahf
xchg
or
outs
scas
movs
bound
or
xchg
sub
in
xor
mov
test
mov
int3
cwde
rol
mov
lock
sub
stc
xchg
icebp
and
test
aam
or
jmp
adc
pop
xchg
ret
and
xor
or
push
je
bnd
iret
das
dec
(bad)
pushf
fadd
sbb
dec
xchg
out
hlt
fisubr
add
aaa
in
sbb
mov
xor
mov
xchg
int
dec
(bad)
fistp
sbb
add
test
adc
in
sti
out
add
cmp
mov
push
retf
daa
fild
push
movs
xlat
stos
inc
aas
(bad)
sbb
lahf
dec
repz
pop
ret
or
push
(bad)
jo
dec
cmp
adc
xchg
push
stos
in
xchg
mov
aaa
and
loopne
ffree
xchg
push
sets
fst
mov
xchg
xor
outs
mov
mov
and
idiv
push
xchg
repnz
inc
sbb
imul
cwde
add
popa
cmp
bound
(bad)
adc
mov
pop
test
xor
dec
int
and
adc
iret
div
sbb
je
stos
pop
cmp
cmp
xchg
test
or
or
adc
hlt
js
lock
pop
pop
into
test
adc
in
out
ins
rol
test
retf
(bad)
into
sub
es
je
xchg
pop
xor
add
sbb
and
xchg
pushf
cs
cmp
xchg
xchg
jecxz
mov
jge
add
or
jae
(bad)
pop
xchg
pushw
shl
cdq
mov
sbb
sahf
aad
xor
pop
mov
adc
push
(bad)
aaa
lods
xchg
callw
add
xchg
nop
repnz
inc
mov
test
cli
jno
cmc
test
and
popa
(bad)
xchg
dec
aam
push
push
iret
push
aas
nop
es
outs
pushf
add
jge
sbb
lods
je
dec
jl
rcl
dec
and
cld
js
js
popf
in
or
or
jle
arpl
fst
mov
adc
sub
adc
xor
in
clc
jle
loope
add
stos
lods
outs
dec
fnstsw
hlt
add
or
xchg
or
nop
adc
and
in
sbb
jne
rcl
shl
sahf
hlt
test
scas
jl
pop
rcr
lahf
cmp
and
dec
jne
xor
cs
xchg
cmps
xchg
xor
jg
xchg
sbb
mov
mov
pop
jge
inc
add
test
dec
add
jo
std
fwait
xor
stos
or
jae
sbb
out
sub
mov
jl
or
cwde
adc
les
stos
sbb
neg
adc
mov
and
inc
add
fbld
stos
mov
sub
pop
push
loopne
add
jg
scas
jge
lods
aam
mov
sbb
cld
shl
aaa
push
popf
ret
fist
shl
or
dec
sub
mov
jp
pushf
push
jecxz
rcl
int3
jl
jnp
inc
cmc
xchg
mov
cmp
adc
sahf
jecxz
dec
into
jmp
adc
mov
pop
cld
cmp
lods
cdq
in
lahf
(bad)
div
enter
es
call
lea
dec
cmp
push
test
xor
inc
repnz
ss
repz
aam
pushf
(bad)
xchg
xrelease
jp
test
push
jl
mov
outs
cwde
ret
cwde
cmp
mov
sub
jmp
fst
fwait
xchg
add
push
jno
jno
ret
not
imul
push
mov
test
sub
jg
dec
fldenv
xchg
fild
xor
je
ret
lahf
cdq
mov
adc
pop
mov
push
inc
xchg
repnz
push
stos
ret
or
and
sub
cdq
jo
pop
int3
inc
xchg
ins
fdivr
arpl
or
push
and
aam
sbb
fwait
pop
loop
dec
add
cs
cmp
xchg
sbb
ss
jl
add
outs
mov
xchg
inc
js
mov
sub
pop
fmul
add
out
xlat
vmovaps
fstp
(bad)
push
cmp
mov
xchg
lds
test
jmp
dec
jp
xchg
xchg
cli
inc
pop
sbb
shr
mov
mov
xor
xchg
stos
add
xchg
retf
dec
mov
(bad)
jbe
stos
(bad)
and
jp
(bad)
mov
dec
imul
je
movs
mov
add
int
lahf
pop
add
add
adc
hlt
pop
xchg
sbb
mul
sahf
inc
in
je
fsub
xchg
or
xchg
cmp
jmp
or
add
sti
pop
xor
or
or
fwait
jns
jge
dec
mov
test
mov
imul
jecxz
hlt
xor
test
loop
push
or
xchg
xor
cmp
mov
mov
add
xchg
pop
cmp
aas
enter
daa
sub
mov
jg
push
cmp
xchg
jge
(bad)
aam
adc
and
sub
call
mov
lock
inc
xchg
pusha
xchg
aas
adc
imul
icebp
mov
stos
adc
cmp
xchg
pop
adc
ret
imul
dec
or
dec
in
jne
cld
cmp
and
je
sbb
jns
dec
push
mov
(bad)
out
xchg
dec
push
popa
mov
jbe
pop
xchg
inc
mov
cmps
(bad)
pop
retf
xchg
popf
loope
ja
adc
cmp
outs
mov
xchg
cmc
or
lahf
cs
outs
scas
adc
movs
inc
rcr
jl
mov
add
mov
inc
xor
dec
call
add
dec
aam
jecxz
xchg
repz
mov
cmp
rcr
(bad)
xchg
dec
lock
js
or
int
lahf
mov
out
xor
xor
pushf
mov
(bad)
fmul
xchg
inc
and
(bad)
jo
xchg
ret
jns
jge
aaa
add
xchg
mov
push
into
test
gs
(bad)
cli
dec
popf
mul
jp
add
mov
xchg
jle
fidiv
and
push
mov
xchg
jg
jl
cdq
ficom
retf
rcr
push
xchg
sbb
mov
or
rcr
inc
adc
bound
xchg
dec
repnz
ret
cmp
xchg
out
sub
xchg
sbb
movs
sbb
jmp
int
imul
repz
sub
xchg
pushf
test
mov
dec
jo
jbe
adc
xor
(bad)
jnp
fwait
xor
movs
jns
inc
sti
xchg
leave
mov
ins
cdq
mov
or
(bad)
xchg
ja
pop
outs
pop
cmp
mov
push
and
shl
adc
cmp
out
std
stos
sar
add
and
mov
int3
xor
mov
cdq
pop
add
cmc
and
inc
jns
loopne
jne
in
push
mov
loope
adc
cmc
int3
push
xchg
inc
mov
aaa
lea
xor
xchg
sbb
mov
xor
jmp
lsl
mov
xchg
or
mov
sbb
fcomp
arpl
mov
xchg
or
dec
leave
hlt
adc
push
clc
jp
mov
xor
adc
lea
mov
xchg
scas
ins
test
and
out
mov
mov
bound
push
mov
xchg
inc
int3
out
sti
not
lods
mov
cmps
fadd
mov
mov
inc
adc
xchg
dec
fsub
dec
outs
or
loop
add
mov
sbb
mov
adc
adc
mov
fwait
test
inc
into
bound
pop
cdq
cmp
aas
adc
add
aam
loope
cmc
adc
cdq
xchg
xchg
adc
call
xchg
sub
cwde
imul
and
xchg
icebp
cmc
pop
xchg
push
stos
xchg
xor
adc
adc
mov
xchg
add
pop
xor
dec
xchg
and
add
xchg
push
ffreep
fs
sub
movs
adc
aaa
xchg
je
(bad)
loopne
xor
or
sbb
push
mov
(bad)
mov
fs
je
adc
add
retf
push
mov
push
inc
xchg
jp
xchg
hlt
out
movs
inc
lds
adc
push
mov
jns
push
sbb
add
dec
in
push
pushf
and
pop
xchg
pop
cmc
bnd
fisub
mov
loop
inc
les
jbe
add
(bad)
movs
add
push
repz
push
in
adc
ficomp
pop
stc
xchg
sub
aad
xchg
xor
psubsb
jns
adc
pop
into
xchg
push
jo
sub
xchg
(bad)
aam
mov
fisubr
loop
sbb
rol
outs
in
xchg
cld
mov
pop
jmp
and
adc
xor
jecxz
(bad)
rol
push
lock
jge
call
call
jnp
ins
outs
xchg
cmp
sub
cld
adc
xchg
pop
aaa
lahf
inc
xor
in
mov
cmps
das
pop
xchg
mov
sbb
fwait
jl
adc
mov
call
movs
mov
pop
jecxz
je
sbb
and
pop
mov
aas
jbe
xchg
iret
in
cld
sbb
scas
int3
ss
cwde
jge
lods
cdq
clc
dec
xor
jmp
xchg
cld
std
sbb
xor
cmp
pop
jmp
out
in
aam
je
sub
aaa
xchg
mov
push
pop
mov
pop
(bad)
pop
rcr
or
sub
out
xchg
push
jmp
sub
xchg
pop
adc
ins
sar
push
xchg
fwait
pop
stos
ficom
jl
and
dec
vmwrite
sahf
jne
fwait
mov
ret
or
repz
addr16
push
jns
mov
xchg
mov
cli
xor
(bad)
cld
js
dec
cmps
jbe
xor
test
ficom
jg
(bad)
imul
dec
jp
mov
jbe
xchg
ins
mov
push
jge
push
cmps
xchg
and
jl
ror
ss
or
inc
out
call
cmp
xchg
mov
jge
movs
add
mov
mov
cmps
sub
loop
push
int
jbe
jp
mov
sbb
popf
shr
mov
ins
inc
jl
push
(bad)
cmp
add
fist
mov
push
pop
mov
call
and
cmps
lock
ss
int3
sub
outs
jg
pop
addr16
popf
fs
jmp
and
arpl
xchg
inc
xchg
xchg
dec
popf
xchg
mov
pop
mov
push
lock
pop
fdiv
add
and
push
retf
popf
int3
(bad)
add
ja
and
mov
pop
aas
ret
xchg
pop
sbb
and
or
ret
stc
mov
inc
fst
scas
clc
(bad)
or
lahf
mov
adc
xor
push
xor
lock
adc
clc
retf
sbb
hlt
jb
mov
inc
xchg
lods
xchg
jmp
iret
xchg
imul
ss
out
sub
data16
test
scas
movs
jnp
adc
lea
aaa
(bad)
sub
push
xchg
push
cld
xchg
test
sub
jmpw
mov
int3
sbb
jecxz
pop
lods
adc
dec
(bad)
mov
jg
fdiv
ret
adc
fwait
cmp
jl
shl
sbb
out
pusha
xor
jge
mov
xchg
dec
pusha
nop
sar
jo
mov
retf
push
les
mov
cmp
xchg
aaa
popf
popf
adc
ficom
jecxz
imul
cmps
adc
sub
lods
mov
call
dec
mov
icebp
lahf
adc
in
push
and
cmp
cld
xchg
adc
xor
mov
jge
or
jmp
(bad)
sbb
cmc
daa
call
add
mov
xchg
push
imul
sub
xchg
aas
xchg
push
adc
loope
jle
cli
pop
call
int
pop
sar
scas
ficom
cmp
push
mov
inc
ja
push
and
scas
outs
ficom
and
xchg
lods
lock
in
sbb
xchg
and
leave
mov
push
inc
mov
xchg
aas
mov
xchg
stos
sub
lods
ins
dec
xor
inc
xchg
jmp
data16
cdq
xchg
ret
shl
pusha
push
loop
cmps
nop
sub
ss
data16
fs
inc
fst
xchg
les
loopne
int
sahf
xchg
mov
outs
cwde
inc
mov
mov
adc
inc
inc
or
sub
ret
push
sub
fistp
xlat
ss
(bad)
push
jg
pop
test
add
xchg
loop
fdivr
xchg
push
fwait
and
pop
sbb
js
shl
lahf
icebp
xchg
xchg
or
pop
inc
cmps
fstp
dec
adc
jae
jns
jl
xchg
mov
dec
in
or
(bad)
xchg
arpl
(bad)
mov
xchg
add
sbb
repz
call
test
call
xchg
cld
jle
fbld
cmp
push
ds
call
sub
imul
sub
inc
loopne
xchg
sbb
adc
adc
scas
iret
call
xchg
xchg
xchg
mov
call
out
pop
xchg
fld
adc
and
icebp
jae
(bad)
stos
test
int
shl
cmc
sub
stc
sbb
sbb
jp
dec
add
idiv
out
push
sub
fwait
xor
inc
jl
fs
cdq
xchg
mov
mov
loop
mov
xchg
mov
(bad)
sub
xor
mov
in
xchg
pop
push
ret
call
nop
cli
xchg
pushf
push
pop
popf
(bad)
mov
add
enter
sahf
jecxz
retf
mov
mov
xchg
retf
fs
fldlg2
fmul
repz
hlt
pop
sbb
xor
not
cmps
test
mov
lods
xor
std
cmp
and
sti
mov
aas
nop
dec
lock
fucomp
xchg
and
mov
cmps
xchg
jmp
sahf
fldenv
mov
fwait
sti
xor
xchg
sbb
fiadd
div
cwde
xchg
sahf
or
cmp
into
xchg
jo
add
sbb
jge
ins
jle
dec
mov
mul
mov
jle
fldenv
sbb
xchg
sub
mov
bnd
jl
pop
push
push
call
mov
data16
imul
in
repnz
or
jmp
retf
aam
mov
mov
sar
test
lods
cld
pushf
add
dec
jle
into
mov
outs
pusha
xchg
mov
push
dec
(bad)
lock
aas
ja
fimul
movs
dec
nop
call
sahf
test
and
mov
movs
mov
cwde
inc
sub
add
push
push
ins
in
dec
addr16
cmp
and
cmc
nop
add
fstp
call
fdivr
call
cdq
scas
cmps
jmp
gs
or
xchg
out
call
retf
outs
int3
and
enter
mov
mov
push
aaa
adc
das
popf
pop
rol
mov
js
xchg
aad
int
lods
lds
mov
call
xchg
jmp
(bad)
xchg
adc
jns
imul
jb
es
push
add
pop
xchg
or
movs
cmp
ss
lock
not
test
adc
sar
int3
sub
inc
jae
jmp
out
xor
mov
mov
sbb
shl
pop
scas
xchg
dec
lahf
fucomip
fidivr
add
stos
(bad)
xchg
ds
repnz
and
retf
xchg
pop
pop
rol
sub
icebp
or
jle
mov
(bad)
call
mov
xor
push
addr16
test
inc
cmp
push
xchg
and
test
xor
ins
or
mov
cmp
test
dec
in
xchg
jns
aam
repnz
cmps
xchg
mov
fstp
inc
xchg
mov
mov
xchg
xchg
imul
(bad)
mov
push
mov
inc
adc
cmp
test
mov
xlat
scas
ret
mov
push
mov
mov
inc
dec
xchg
sbb
and
(bad)
jge
test
sar
(bad)
adc
mov
push
enter
cs
xlat
and
es
sbb
pop
xchg
ret
stos
inc
or
ja
cli
xchg
and
cmps
pop
idiv
adc
mov
mov
fcom
cmp
hlt
out
cmps
adc
fadd
nop
xchg
neg
je
mov
add
jns
stos
mov
inc
cmp
mov
test
and
xchg
mov
aas
outs
data16
call
bsr
jns
out
dec
sbb
add
pop
xchg
fwait
lock
or
adc
sub
mov
aam
es
repz
dec
xchg
mov
xchg
int
out
ins
neg
fld
push
test
imul
ficomp
fild
and
stos
xchg
mov
xchg
jnp
fwait
cmp
ret
fist
in
xchg
pop
adc
iret
mov
mov
cmp
aam
cdq
cmps
js
dec
xchg
pop
jge
aas
inc
pop
xchg
push
repnz
clc
sub
xchg
xchg
fwait
pop
iret
fs
(bad)
xchg
sbb
or
push
jmp
xchg
dec
sub
xor
push
adc
pop
popf
cmps
in
xor
mov
mov
adc
jecxz
adc
cmc
ret
sbb
adc
push
and
xchg
pop
xchg
inc
push
pop
repnz
jg
out
xchg
adc
sar
outs
je
daa
xchg
adc
(bad)
ds
jge
adc
or
cmp
mov
aaa
or
sbb
mov
lahf
sbb
mov
mov
cmc
jns
bound
xchg
cmp
inc
(bad)
retf
stc
add
repnz
ror
ja
push
dec
xchg
sahf
(bad)
jle
add
ret
lock
lock
pop
adc
mov
rcl
xchg
cmp
adc
sahf
ret
mov
inc
scas
inc
and
cwde
in
mov
push
jno
and
jg
xchg
pop
xchg
xchg
lods
adc
adc
std
mov
arpl
ins
mov
stos
mov
lahf
adc
pop
(bad)
test
mov
xchg
jle
lods
or
sbb
xchg
cmp
fwait
js
es
xchg
cmp
movs
test
daa
sub
adc
stc
cmps
aam
ds
lods
dec
add
lahf
pop
jle
xchg
inc
movs
movs
aaa
push
into
mov
cwde
jmp
pop
jns
adc
or
(bad)
cmp
mov
push
mov
sbb
rcl
out
push
ret
cmc
cmp
lahf
jo
ret
or
cs
jl
aad
add
enter
jge
sub
mov
dec
or
out
mov
jge
jb
lods
jl
mov
cld
(bad)
cmps
cmps
push
mov
neg
and
cmps
mov
rol
xor
pop
xor
shl
adc
dec
mov
(bad)
jnp
mov
inc
mov
in
sbb
call
sbb
fwait
stos
sbb
ins
push
push
test
rcl
cmc
xchg
arpl
(bad)
mov
mov
or
push
fist
add
test
fbstp
mov
popf
lea
xor
jmp
js
aam
test
ror
mov
sbb
push
lahf
push
aad
cmps
cs
fwait
cmp
or
inc
ret
(bad)
retf
push
clc
inc
and
jmp
mov
or
jbe
fimul
shl
sub
cdq
(bad)
je
mov
dec
ficom
jle
xchg
push
mov
rol
test
das
gs
sub
in
or
cmps
call
cmp
fdiv
mov
paddusb
xor
js
icebp
push
or
je
(bad)
jge
mov
aas
cmp
std
stos
pop
nop
jo
jns
ret
cmps
dec
pop
(bad)
pop
or
test
cwde
adc
aad
repnz
cld
popf
pop
xor
lea
fisubr
mov
iret
xor
cmps
pop
jmp
adc
pop
movs
mov
xor
pop
adc
int3
in
ror
push
cmps
sub
push
stos
jge
push
and
jns
shr
jl
inc
ds
inc
movs
mov
inc
mov
push
or
data16
jl
push
out
lea
inc
or
sar
and
and
rcr
gs
shl
push
lea
cmc
mov
sub
cmp
sbb
jl
hlt
out
pop
movs
adc
mov
xchg
cmp
loope
mov
test
cdq
pop
dec
mov
jge
dec
mov
xchg
les
mov
(bad)
mov
xor
cdq
outs
dec
xor
cdq
pop
das
sahf
adc
js
(bad)
fistp
sub
pop
loopne
std
mov
out
xor
adc
lods
jge
fadd
cwde
sar
aad
lods
iret
test
adc
call
xchg
push
cld
mov
sub
out
gs
enter
xor
rcl
mov
cdq
dec
adc
push
in
cwde
xchg
and
jecxz
pop
push
lods
sahf
jmp
fsubr
lds
adc
sbb
pop
adc
push
mov
push
and
jge
push
je
and
mov
inc
xchg
or
ds
aad
pop
xchg
lahf
dec
(bad)
cmp
push
and
sar
xchg
and
jp
mov
das
stos
xchg
fld
cmp
shl
mov
call
mov
add
and
ins
shr
mov
xchg
fist
in
loope
xchg
mov
aaa
test
mov
int3
jmp
jo
pop
xchg
mov
sub
out
setb
xchg
pop
jmp
xchg
(bad)
(bad)
mov
hlt
cli
les
or
rcl
fs
mov
in
cdq
xchg
cs
stos
xor
inc
js
fdiv
jne
push
jns
add
push
xchg
and
aaa
xchg
test
push
sub
or
xor
ror
inc
mov
cmp
lahf
scas
push
xchg
pop
xchg
lea
(bad)
pop
push
lahf
push
aas
xlat
sbb
push
xchg
hlt
in
mov
push
es
mov
popa
movs
ja
push
dec
jle
xchg
inc
mov
ret
push
xchg
fst
jmp
xor
mov
and
xchg
push
xor
out
xchg
(bad)
cmp
test
pop
das
xchg
je
inc
fcom
jnp
(bad)
xchg
(bad)
aaa
cmp
jno
dec
sbb
popa
pushf
cld
(bad)
mov
loope
iret
push
movs
fwait
mov
mov
jo
push
push
js
shl
test
ficom
xchg
dec
pushf
aam
xor
sbb
in
cmp
ret
jle
mov
add
int3
push
push
xchg
adc
mov
push
(bad)
jbe
fwait
sahf
mov
test
inc
cmps
fisub
mov
bnd
fs
inc
and
rol
cmps
xchg
je
jb
clc
or
pop
jmp
xchg
jnp
pop
push
adc
mov
addr16
xor
cmc
mov
maxps
icebp
data16
ss
mov
sbb
sub
fwait
ja
mov
outs
sbb
fcomip
inc
adc
pop
lods
adc
outs
and
sub
jle
daa
into
fisttp
mov
mov
aam
retf
shl
push
mov
or
inc
push
xchg
adc
mov
cmp
popf
out
add
lea
pop
mov
icebp
fwait
repnz
mov
mov
or
xchg
push
dec
jle
xor
jl
pushf
ficom
dec
sbb
mov
test
test
fcmovne
sbb
stos
enter
ficomp
call
dec
ins
cmps
mov
(bad)
sbb
int
nop
xchg
dec
push
or
sar
xchg
adc
push
sub
out
hlt
cld
mov
cmp
pop
int
xchg
xor
outs
sbb
sbb
push
hlt
jne
inc
aam
(bad)
in
scas
cmp
jmp
not
mov
std
sahf
sbb
xchg
ins
ret
in
shr
les
dec
fs
adc
dec
fwait
ja
std
popf
fdivp
mov
push
xchg
and
lahf
shr
ins
mov
add
jl
scas
inc
ja
cmp
adc
sbb
sti
hlt
lods
sahf
test
daa
je
mov
push
test
jnp
call
jecxz
inc
in
push
sar
or
fist
sub
mov
xor
push
sbb
mov
mov
xchg
aas
mov
jl
push
mov
fs
btr
push
inc
jl
dec
je
dec
jecxz
jmp
rol
clc
cmp
test
and
ds
hlt
ins
out
mov
aad
cwde
pushf
mov
mov
shl
jnp
fwait
rol
out
adc
retf
pushf
(bad)
push
mul
je
mov
mov
out
or
jge
xchg
inc
cmps
lds
xchg
add
leave
dec
ins
cmp
and
pop
mov
or
add
push
call
cs
xchg
xor
scas
xchg
cmp
dec
xor
push
push
mov
sub
loope
lods
push
rcr
lock
(bad)
aas
dec
mov
nop
xor
mov
and
sub
scas
call
xchg
xor
ja
inc
fs
xchg
sub
jbe
push
pop
pop
mov
cwde
cs
test
xchg
mov
arpl
xchg
inc
xor
fwait
rcl
(bad)
pop
xchg
nop
fucomi
scas
mov
in
test
sbb
or
mov
xchg
adc
(bad)
outs
lods
cmc
mov
lock
cmp
inc
mov
int
push
(bad)
ins
cwde
mov
aam
xchg
xchg
daa
dec
xchg
pop
jne
rcl
xchg
(bad)
fnsave
bound
leave
push
xlat
xor
ret
mov
cmps
in
not
mov
ins
ret
test
mov
jp
jl
out
cdq
inc
fwait
cmps
mov
jl
cwde
stos
mov
push
arpl
push
push
pop
adc
jle
clc
mov
loopne
mov
(bad)
pop
or
push
pop
sub
fmul
xchg
sub
push
inc
cmp
mov
jne
test
or
out
cwde
dec
mov
(bad)
sahf
lea
push
mov
das
por
mov
ins
xchg
(bad)
mov
repz
and
xor
jb
mov
xchg
aam
test
add
adc
dec
mov
inc
ficom
push
pusha
pop
std
pop
xchg
or
jl
mov
jns
or
xchg
dec
xchg
mov
lahf
fild
sub
cmps
mov
cmp
xchg
popf
jle
pop
jno
into
jg
shl
movzx
call
ret
inc
retf
xchg
bound
sbb
sub
aas
fwait
int3
or
retf
xchg
imul
mov
popf
shl
(bad)
xchg
adc
shl
stos
idiv
adc
mov
test
push
les
jbe
dec
fisub
mov
stos
and
inc
xchg
inc
mov
punpckhdq
add
rcr
call
mov
bound
jnp
div
lods
push
arpl
mov
or
xchg
push
ins
test
not
and
mov
inc
dec
cmp
loop
xchg
or
xor
mov
jl
or
push
xchg
sbb
frstor
lods
cli
pop
xchg
jle
mov
into
xchg
addr16
sub
(bad)
shr
fwait
out
jecxz
lahf
pop
add
imul
clc
xchg
icebp
push
add
push
call
repz
es
fild
mov
loopne
adc
mov
cwde
in
dec
je
enter
xor
out
fisubr
icebp
jmp
fcom
xchg
sbb
jle
or
add
mov
xor
jmp
and
pushf
inc
mov
stos
jo
mov
loop
pop
xchg
fwait
mov
jne
movs
jmp
imul
mov
jmp
dec
jmp
jae
retf
mov
jg
repnz
mov
sub
in
fwait
hlt
pop
loope
lods
sbb
push
das
mov
inc
ret
sbb
(bad)
or
enter
cmp
hlt
push
xor
call
xor
mov
dec
ret
inc
adc
push
fs
mov
call
call
test
not
pop
gs
stos
jbe
fcom
add
pop
xchg
test
sbb
retf
xchg
dec
loop
fsub
setnp
cmp
push
lds
xchg
xchg
cmps
dec
dec
xchg
rcr
int
xchg
idiv
push
jg
movs
iret
xchg
ins
repz
xlat
or
pop
mov
or
mov
ret
pop
xchg
cmp
lock
mov
adc
sbb
mov
mov
pop
xchg
sub
into
cmp
test
push
sub
(bad)
jno
repz
adc
xchg
cmp
lock
jbe
xchg
mov
shl
pop
dec
lea
mov
mov
push
aas
les
dec
and
push
ins
push
adc
pop
xchg
jmp
sub
call
cmp
rcl
out
lock
jg
frstor
mov
xchg
sbb
inc
fisttp
mov
rol
pop
icebp
mov
inc
fcom
ficomp
xor
arpl
adc
inc
cwde
xor
jno
xchg
or
fcom
add
loop
mov
imul
out
sub
ret
xor
je
movs
xchg
xor
dec
and
call
inc
jmp
cld
xchg
adc
popf
sti
mov
inc
inc
in
(bad)
push
(bad)
jge
add
mov
mov
mov
ins
aaa
xchg
and
les
retf
ret
mov
cdq
cli
adc
je
fsubr
xchg
cdq
retf
mov
adc
pushf
lds
mov
ins
xor
xchg
rol
not
jg
mov
push
sbb
mov
je
mov
sar
in
mov
xchg
fwait
ror
popa
test
xchg
xor
cmp
enter
shl
push
jae
pop
add
ret
fmul
inc
xchg
arpl
or
push
dec
mov
mov
into
dec
sbb
pop
push
loopne
pop
push
not
jb
pop
ret
aam
jp
mul
das
sub
xchg
jle
imul
repnz
lahf
repz
shr
add
clc
rol
int3
xchg
pop
push
pop
xchg
sti
xor
hlt
xchg
dec
sub
test
scas
js
xchg
cli
fld
push
int
add
out
adc
sbb
cmp
not
scas
pop
xor
adc
mov
in
stos
in
mov
xchg
xchg
mov
test
(bad)
mov
ja
arpl
add
cmp
aam
pop
xor
ins
xchg
xchg
mov
test
ret
(bad)
fild
xchg
sbb
mov
xor
jbe
imul
adc
cmove
mov
push
xchg
adc
ins
mov
or
js
xchg
pop
adc
mov
xchg
jmp
dec
stc
jmp
mov
and
xchg
pop
cs
xchg
jle
out
test
mov
xchg
icebp
test
retf
jg
xchg
cdq
ins
leave
mov
popf
adc
xchg
iret
pop
pop
outs
stos
lahf
xchg
or
repnz
hlt
std
pop
xchg
jg
sub
frstor
mov
push
rol
outs
inc
xchg
sti
or
in
shr
xchg
movs
sbb
stos
adc
xor
je
lahf
aas
fidivr
inc
push
mov
sbb
inc
mov
push
and
pop
jge
xlat
adc
sub
das
pop
out
repz
mov
and
aaa
call
cld
in
jl
or
push
and
loop
adc
jle
mov
loope
sahf
aas
fwait
push
call
jl
xchg
int3
shl
push
ficomp
loop
cmp
dec
(bad)
jno
gs
add
push
shl
jge
test
popf
add
inc
adc
push
jg
sbb
push
js
pop
jmp
cld
push
mov
call
mov
fcom
hlt
dec
jae
jmp
aas
xchg
mov
fimul
dec
jae
mov
test
fwait
jg
dec
test
and
rcl
xor
or
adc
add
test
jbe
xor
cmc
sbb
sub
xchg
ret
mov
sbb
ins
jecxz
xchg
call
inc
xchg
(bad)
push
jmp
in
nop
lds
sbb
fstp
adc
adc
xchg
out
ins
imul
jne
and
add
mov
inc
jp
out
aad
test
mov
mov
data16
xchg
cs
clc
loop
enter
dec
mov
mov
sbb
icebp
sbb
fisubr
test
pop
xchg
mov
loop
rol
xor
and
int
je
adc
sahf
xchg
cli
sub
adc
fwait
hlt
jecxz
or
sbb
stc
in
xor
cli
(bad)
jmp
xor
cmp
cld
add
into
sub
and
out
add
ja
jmp
daa
sar
dec
or
adc
sub
inc
xchg
pop
lods
and
lds
add
jne
pop
pop
mov
mov
xchg
push
aaa
sub
and
loopne
cmc
pop
dec
xchg
movs
outs
jo
pop
pop
js
xchg
push
movs
push
fs
in
nop
rcl
inc
or
aam
dec
sbb
fidivr
mov
in
addr16
xor
and
inc
scas
dec
mov
push
fwait
in
jns
lods
jge
adc
mov
pusha
mov
push
lock
je
jbe
xchg
in
cmp
out
pop
adc
xchg
iret
sub
shl
xor
mov
(bad)
je
xchg
xor
dec
int
movs
aad
xchg
enter
or
je
scas
xchg
mov
add
lea
shr
fist
push
cld
fstp
jg
adc
lea
(bad)
neg
repnz
xchg
xchg
cmp
xor
dec
sbb
(bad)
dec
mov
ror
and
loopne
jmp
les
adc
nop
iret
pop
push
dec
cmp
sub
mov
test
push
rcl
in
(bad)
in
rep
les
push
scas
xchg
hlt
call
cld
adc
rol
push
mov
mov
in
pop
iret
adc
pop
sti
jno
stos
sbb
mov
jnp
(bad)
popa
push
xchg
pop
xchg
adc
dec
pop
xor
inc
add
fcomp
adc
add
in
mov
or
sub
adc
iret
xor
pop
and
push
xchg
jg
xchg
nop
enter
shl
outs
xlat
mov
or
dec
xchg
mov
loop
mov
jmp
shl
ins
adc
retf
push
aas
js
mov
mov
mov
push
int
sub
pop
pop
push
and
pusha
stos
aam
ds
push
or
scas
xchg
push
ja
mov
pop
add
dec
(bad)
popf
fldenv
bound
push
imul
jb
enter
push
iret
sub
cld
push
push
xchg
mov
les
popf
inc
inc
jmp
adc
shl
popf
mov
mov
stos
push
pop
mov
inc
xchg
inc
jp
nop
fnstcw
rcl
test
inc
sub
xchg
(bad)
push
repnz
cmp
shr
out
add
cdq
xor
cmp
xchg
push
lods
cmps
jae
fmul
pushf
mov
test
xor
xchg
call
lds
shr
xchg
jl
bound
and
es
test
cmp
inc
xchg
push
ins
push
or
push
adc
enter
fbld
push
int3
test
jg
xor
lds
mov
cmps
xchg
cmp
mov
mov
inc
and
push
or
(bad)
call
mov
push
jno
push
adc
mov
sbb
stos
nop
aas
xchg
mov
inc
and
mov
mov
stc
fcomp
add
adc
jnp
mov
repz
jo
addr16
mov
test
sbb
inc
je
(bad)
aas
xchg
jo
inc
test
dec
not
cdq
stos
cmp
shl
mov
adc
cmp
mov
push
(bad)
mov
ret
xchg
ins
pusha
loop
sub
into
ja
cmp
fsub
sub
xor
xor
(bad)
inc
pop
cmp
inc
pop
into
mov
pusha
sbb
aam
push
mov
push
pusha
jecxz
jle
xchg
mov
call
adc
in
xchg
push
jl
adc
sub
inc
xchg
ins
out
adc
add
mov
(bad)
repz
fisttp
adc
adc
jne
mul
mov
ds
xchg
out
dec
push
and
pop
xchg
and
stc
mov
mov
jmp
sbb
xchg
cld
or
xchg
mov
lds
in
mov
test
push
xchg
nop
cmp
dec
cs
repnz
sub
xchg
arpl
inc
movs
jae
push
mov
sub
inc
cmp
test
ins
enter
push
cmps
jmp
gs
mov
std
mov
data16
call
xchg
call
fcomi
outs
xchg
push
aad
inc
lods
mov
dec
int
scas
adc
in
or
ins
and
jmp
call
inc
ja
mov
aaa
xor
leave
mov
cmp
add
mov
xchg
cld
or
ror
es
fs
jge
loop
push
cmp
pop
add
xchg
popf
mov
gs
iret
je
jge
test
push
imul
mov
fbld
cmps
fwait
mov
fs
cmp
xchg
out
jbe
scas
es
xchg
scas
xlat
or
arpl
or
pushf
rol
cmp
pop
call
xor
sbb
xchg
pop
jbe
or
gs
xchg
push
(bad)
mov
inc
xchg
dec
sub
fcom
and
inc
out
cmp
pop
nop
mov
push
loope
push
cmp
xchg
mov
jne
xchg
xchg
imul
xchg
mov
inc
inc
xchg
popf
xchg
mov
fdiv
xchg
scas
push
add
aaa
jns
xchg
xchg
call
xchg
push
lea
jo
std
or
mov
ret
ins
pushf
jno
jmp
mov
adc
in
push
mov
sbb
pop
dec
xchg
inc
scas
push
ret
xchg
adc
and
pop
stc
sbb
sbb
imul
and
add
mov
fiadd
pushf
neg
xor
lods
lock
lock
sti
fstp
xor
sar
ficom
cld
inc
cmps
call
mov
and
jg
sbb
or
add
test
ins
jmp
jmp
inc
xchg
pop
stc
push
pop
add
xchg
sub
cmp
in
fiadd
xchg
xlat
add
or
jno
mov
cmp
dec
or
repnz
test
in
adc
mov
cs
sub
cmc
fnstcw
rcr
xchg
das
ss
and
loopne
xchg
scas
xchg
inc
inc
dec
hlt
sub
cdq
push
adc
mov
mov
sub
bound
cld
cdq
xchg
movs
test
fucomip
xchg
sbb
cmp
mov
xchg
inc
rol
retf
addr16
cmc
xchg
push
aam
mov
mov
push
test
fisubr
mov
cmp
xchg
push
pushf
aas
mov
mov
arpl
or
popa
aaa
xchg
jecxz
movs
cmps
xchg
adc
push
dec
fstp
inc
fwait
jge
cmp
lock
dec
mov
mov
int3
neg
add
shl
adc
mov
out
xchg
dec
push
into
pop
iret
out
pop
xchg
imul
inc
ins
push
or
or
or
dec
cmp
ja
aas
call
popf
je
push
add
mov
out
(bad)
xchg
push
int3
jp
xchg
rol
in
ficom
test
xchg
cdq
movs
sbb
mov
xchg
mov
scas
sub
loopne
adc
cmp
into
jne
push
aam
mov
cmc
ins
inc
add
jae
xchg
sub
popa
mov
cmp
movs
pop
cld
push
int
rcr
xchg
or
dec
push
(bad)
hlt
cmp
not
xchg
pop
mov
nop
and
mov
leave
mov
add
imul
xchg
inc
xlat
out
test
into
adc
retf
xchg
mov
mov
dec
mov
test
mov
pop
push
push
mov
and
or
popf
dec
stos
adc
(bad)
mov
push
inc
int
sub
(bad)
xchg
rcr
stos
lock
loop
jns
xchg
jle
or
in
sbb
cmp
jns
xor
mov
and
push
xor
in
sbb
test
xchg
rcl
sbb
enter
shl
push
pop
rcr
push
ins
arpl
icebp
or
xchg
push
mov
or
cmps
push
out
xchg
cmps
clc
lock
xchg
jno
hlt
popf
test
dec
jnp
fmul
add
and
mov
cmps
jl
inc
inc
mov
shl
(bad)
outs
ins
pop
dec
jno
not
fnstsw
fsub
call
mov
dec
push
jp
adc
mov
cmp
jge
icebp
adc
adc
int3
cmp
test
sub
push
fnsave
sub
mov
es
cwde
jle
ror
sbb
adc
repnz
sub
push
mov
stos
and
out
inc
in
jp
mov
hlt
pushf
fwait
adc
pop
sub
xchg
xor
nop
and
not
jmp
shr
into
xchg
dec
shl
xchg
ins
push
call
cmp
mov
xchg
and
jne
neg
xchg
cdq
xor
fbstp
popa
sub
int
pop
movs
xchg
fsub
push
aad
aaa
jb
mov
jae
ins
cmp
jp
xor
out
dec
jne
sbb
jmp
cmp
into
sbb
xchg
mov
pusha
xchg
inc
sbb
ja
stos
or
push
idiv
int
dec
sub
push
xchg
sub
inc
mov
(bad)
fst
(bad)
ja
js
outs
mov
cmp
adc
or
jmp
loopne
fwait
call
ss
add
push
in
push
scas
xchg
aaa
test
inc
xchg
add
cmp
add
inc
sub
sbb
jl
xchg
aas
xchg
and
add
bound
std
xchg
push
outs
adc
fmul
aad
fwait
ja
jmp
xchg
xchg
pop
dec
hlt
jl
cld
xchg
and
dec
or
xchg
sahf
mov
je
fs
mov
test
cmp
(bad)
mov
xor
loopne
cmp
sahf
mov
bound
lea
cdq
test
out
aas
cwde
mov
sub
arpl
jmp
mov
adc
jle
jge
movs
lahf
in
dec
jmp
icebp
jge
retf
adc
mov
adc
dec
fidivr
and
sar
jge
pop
dec
cwde
(bad)
ror
nop
adc
push
loope
mov
mov
dec
and
pop
add
mov
stc
jmp
lods
jne
enter
mov
in
imul
call
fdivrp
or
aaa
sahf
lgs
mov
rcr
mov
jp
scas
fst
pop
xchg
mov
les
cmc
mov
jl
cmp
sahf
cld
jbe
mov
das
mov
cmp
add
add
sbb
mov
mov
test
mov
mov
adc
xor
xor
cld
retf
xor
mov
inc
mov
in
ins
icebp
jo
sbb
jle
and
call
sub
xor
jl
shr
lods
pop
fidiv
dec
js
mov
push
sbb
mov
mov
sti
or
fwait
cmps
jl
xor
and
mov
gs
pop
dec
xor
nop
sahf
mov
idiv
and
ret
clc
push
ror
ds
xchg
cmps
push
mov
and
(bad)
mov
xlat
jl
add
(bad)
pop
shl
shl
call
loop
nop
mov
xor
fist
xchg
mov
stos
push
inc
push
xor
dec
inc
dec
pop
int
fwait
push
mov
aam
cmps
jl
ret
adc
cwde
test
push
mov
and
xchg
data16
adc
pop
shl
mov
and
adc
icebp
sub
int
push
xchg
or
and
jmp
enter
(bad)
sbb
cwde
lahf
inc
int
das
test
pushf
outs
icebp
xchg
and
cmp
ss
rcl
jb
xchg
cli
loop
sub
cmp
fwait
outs
and
ss
mov
xchg
inc
push
adc
rol
call
jmp
daa
xchg
mov
or
xchg
add
es
and
push
xor
movs
rcr
pop
in
xor
dec
inc
push
cwde
imul
(bad)
push
ret
rcl
or
add
or
xchg
push
stc
outs
dec
out
iret
pop
in
gs
xchg
or
mov
retf
cmc
mov
out
cmp
jmp
scas
gs
ds
inc
pop
adc
xchg
in
scas
and
push
movs
ds
cld
sub
adc
bound
mov
nop
lds
mov
cmc
mov
clc
mov
or
jl
pop
jns
cdq
inc
and
int3
ret
movs
retf
xchg
fidiv
xor
mov
fld
idiv
jmp
xchg
fwait
fwait
bswap
test
push
mov
iret
mov
xchg
bound
mov
and
mov
mov
cmp
sub
xchg
cld
adc
push
push
adc
xor
imul
mov
js
jge
adc
dec
sub
sbb
or
push
mov
mov
add
gs
push
cmps
ret
sbb
jp
fwait
repz
pop
xchg
sbb
ja
sar
adc
push
pop
mov
adc
out
xchg
mov
gs
pop
push
sub
jl
cmp
(bad)
cmps
ds
std
mov
retf
push
jle
(bad)
dec
adc
loop
cmp
xchg
lahf
jge
jl
arpl
or
arpl
cmps
push
movs
xchg
pop
jne
mov
fist
and
neg
aam
xchg
push
inc
sti
xlat
fwait
out
in
cmp
(bad)
pop
jno
jl
pusha
push
addr16
and
imul
xor
mov
mov
inc
out
xor
(bad)
fldcw
mov
sub
(bad)
and
xor
dec
mov
gs
mov
mov
push
popf
jecxz
lea
test
pop
xchg
in
xor
ins
fadd
sub
test
js
fs
fistp
popf
push
pop
sbb
aaa
mov
lds
ja
cld
aam
hlt
dec
imul
adc
in
add
dec
push
xor
icebp
test
adc
dec
jmp
xchg
dec
inc
jns
pop
or
jl
in
cdq
add
mov
sbb
vpminub
aaa
fild
outs
fbld
xchg
fsub
and
test
mov
xchg
sahf
les
repz
jnp
sar
pop
es
xchg
adc
sub
jmp
mov
enter
mov
loop
aam
xor
mov
rcr
or
outs
dec
je
push
push
sbb
xchg
adc
cmp
mov
daa
rcr
jns
les
jl
fist
sbb
lods
sbb
xchg
inc
sub
je
jge
stos
lods
into
jl
jp
jne
push
test
jno
sub
add
enter
repnz
mov
repnz
xor
inc
push
xor
stc
cmp
movs
fistp
mov
xlat
cdq
adc
lods
sub
jl
mov
icebp
sub
sub
mov
in
(bad)
sahf
jl
pop
icebp
call
lea
and
jl
add
mov
push
rcl
adc
mov
call
xchg
fadd
js
xchg
push
push
mov
je
aaa
das
enter
(bad)
ja
loop
xchg
ins
cdq
xchg
rcr
mov
pop
adc
ror
outs
(bad)
imul
xchg
xor
stos
xchg
xor
scas
shl
ds
mov
loop
repz
ja
mov
inc
mov
mov
loop
(bad)
dec
cli
leave
aas
xchg
dec
ret
mov
fsubr
add
mov
stc
or
call
cmp
sbb
aad
shl
fwait
ds
fiadd
sub
jg
mov
je
push
aas
into
repz
xchg
ss
pop
bound
in
xor
rcl
mov
adc
push
rol
sti
lock
fadd
fisubr
adc
pushf
mov
xchg
cmp
int
test
pop
adc
fwait
pop
movs
jne
and
enter
push
jbe
and
aam
(bad)
mov
es
call
cmp
mov
adc
mov
xchg
mov
xor
push
(bad)
sbb
test
mov
xor
fnsave
mov
cmp
xlat
retf
push
adc
inc
inc
test
int
xchg
lock
sar
mov
push
pop
inc
sub
pushf
dec
mov
icebp
(bad)
xor
adc
push
mov
lods
and
adc
pop
js
xchg
scas
ret
test
cwde
mov
and
push
in
inc
outs
or
cmps
mov
pop
and
loop
sub
fldenv
arpl
into
in
fwait
imul
bound
pop
mov
mov
fnstcw
sbb
mov
cmp
jns
jle
sti
gs
mov
push
loop
sub
xchg
leave
mov
push
test
ret
aas
retf
xchg
lods
and
outs
dec
int
test
or
jmp
aam
or
xchg
cmp
jmp
inc
daa
xlat
or
cwde
ficomp
enter
mov
adc
icebp
jmp
xchg
mov
add
xchg
mov
xchg
pop
outs
push
jp
xchg
sbb
jno
xchg
adc
in
cmp
ret
cdq
xchg
pop
shl
pop
push
push
aad
cmp
or
xchg
xchg
mov
push
sbb
or
mov
inc
sub
pop
repz
cdq
in
xchg
dec
ror
dec
xchg
int
call
inc
xchg
mov
addr16
xchg
add
popa
pop
enter
add
in
push
daa
out
xchg
popf
xor
outs
adc
cs
mov
inc
test
mov
out
mov
out
int
ficom
in
xchg
test
cld
icebp
fsubr
mov
mov
mov
mov
ficom
jle
int3
(bad)
xchg
push
psubd
inc
cwde
ret
and
dec
les
adc
adc
fdiv
pop
pop
inc
push
call
das
sbb
jne
jb
in
pop
stos
pop
xchg
(bad)
jle
and
cld
dec
xchg
enter
mov
fs
out
dec
fist
xchg
aaa
push
sbb
shl
inc
dec
nop
adc
inc
pop
sub
xchg
adc
and
push
mov
mov
fs
jl
outs
aam
xchg
into
aam
or
xchg
push
push
inc
std
in
xchg
lock
jmp
fwait
lds
ja
adc
jl
mov
(bad)
cmp
popf
jge
gs
popf
pop
or
dec
jmp
or
sub
or
ret
push
lahf
cwde
cmp
imul
sub
aad
sbb
sub
cmps
movs
movs
push
and
xchg
sbb
mov
int
mov
mov
outs
xor
aam
jmp
xchg
add
bound
or
jmp
dec
xor
popf
xchg
push
stos
test
cdq
jl
jg
mov
xchg
pop
pusha
cmp
and
cmp
in
dec
in
mov
ror
sbb
stos
rcr
cwde
cmc
pop
hlt
shl
shl
mov
data16
pop
repz
dec
iret
lahf
call
and
mov
fwait
pop
pop
les
jecxz
pop
imul
nop
pop
sbb
mov
pop
mov
xchg
sbb
sbb
or
xor
popa
sub
fsubrp
hlt
movs
and
lods
ficom
adc
pop
pop
out
push
inc
cmp
mov
xchg
pop
sbb
and
push
outs
sbb
cmps
add
test
xchg
cwde
xchg
arpl
push
sbb
nop
jl
sub
lea
ret
out
xchg
and
dec
pusha
pop
mov
add
push
shld
mov
sahf
loop
inc
lahf
mov
or
call
dec
sbb
jo
or
mov
sub
sbb
mov
fdiv
mov
stos
mov
dec
mov
cmps
jl
pop
adc
lahf
fild
mov
hlt
(bad)
mov
xchg
dec
add
sbb
lds
and
in
jl
fxch
int3
mov
es
(bad)
pop
jmp
xor
cmp
fs
sbb
pop
xchg
hlt
mov
mov
cwde
mov
aas
ja
pop
jo
addr16
in
and
mov
repnz
clc
xchg
cld
(bad)
mov
jmp
push
mov
xor
fs
xor
mov
xchg
mov
jge
inc
jmp
jp
out
test
xchg
sub
data16
jmp
mov
xchg
dec
mov
jae
arpl
mov
sahf
int
out
xchg
imul
(bad)
xchg
xlat
push
inc
jl
mov
xchg
mov
cli
or
retf
jae
sub
inc
test
mov
push
cmp
ds
mov
mov
and
xchg
adc
mov
popf
cmps
nop
fadd
cmp
scas
fs
push
gs
xchg
pop
xchg
sub
xchg
les
cmps
dec
push
mov
xchg
xor
out
iret
xlat
lock
push
jns
outs
lahf
xchg
pop
pop
jmp
arpl
into
das
enter
or
add
xchg
or
xchg
cmp
test
xchg
es
xor
push
or
stos
cmp
xchg
and
adc
lds
into
cdq
movs
mov
mov
xchg
fs
xchg
lock
mov
outs
dec
cld
movs
inc
jmp
cmc
jno
sar
(bad)
xchg
mov
and
mov
or
sar
add
jmp
pusha
mov
xchg
mov
dec
ret
jge
xchg
jne
gs
out
adc
hlt
pop
push
fs
mov
leave
push
(bad)
xchg
sar
sbb
fst
xchg
cmp
xchg
mov
push
mov
mov
retf
jg
out
cmc
or
(bad)
jo
push
adc
enter
and
cmc
adc
inc
xchg
sbb
in
jne
xchg
inc
dec
(bad)
or
mov
fwait
jno
adc
je
or
ja
mov
test
xchg
pushf
push
xchg
sub
mov
and
xchg
repz
push
in
xchg
cli
js
cmps
(bad)
jg
xchg
sub
sbb
aam
jmp
icebp
xchg
imul
out
push
js
jns
mov
xchg
mov
adc
add
jecxz
mov
popa
mov
adc
dec
jb
add
loop
das
xchg
outs
cmps
xchg
(bad)
inc
and
push
mov
cmp
push
dec
xchg
push
stos
int3
mov
sbb
xchg
mov
scas
cmps
dec
lock
xchg
dec
and
(bad)
(bad)
in
mov
sti
aam
xchg
adc
jle
cs
pop
hlt
test
push
xchg
cmps
push
ret
xchg
mov
or
mov
enter
fadd
or
shl
(bad)
and
cmps
sbb
mov
(bad)
imul
push
xchg
fwait
out
jnp
(bad)
pop
icebp
dec
int
pop
xchg
shr
pmuludq
retf
seto
xchg
es
xabort
jae
cmp
inc
cmp
lahf
rol
mov
(bad)
int3
std
cdq
shr
xor
mov
shr
sbb
and
(bad)
hlt
jmp
rol
rol
sub
mov
or
arpl
sbb
fs
mov
cmp
inc
jmp
pop
(bad)
div
das
test
cmp
loopne
scas
inc
ror
(bad)
sub
adc
loopne
cmc
xchg
and
test
addr16
mov
xor
add
or
push
in
pushf
push
test
and
pusha
sbb
in
in
in
jl
vzeroall
cld
icebp
xchg
ret
retf
fs
loop
or
pop
xor
std
popf
or
cwde
inc
in
pop
in
push
cmps
jecxz
adc
add
sub
out
jle
les
jge
icebp
in
fisubr
mov
adc
xor
pop
fwait
or
sbb
lods
mov
inc
daa
push
inc
popf
imul
inc
je
sahf
inc
pop
into
mov
aaa
xchg
sti
into
dec
setae
daa
cmp
jle
fsub
pop
imul
das
xor
out
out
xor
fwait
push
dec
rcl
iret
jae
retf
sub
in
and
movs
clc
shl
ret
inc
inc
xchg
pop
popa
cmc
mov
and
scas
sbb
mov
mov
and
sub
loop
scas
add
xchg
rcr
mov
das
push
pusha
xchg
mov
push
in
sub
pop
adc
mov
mov
aam
jns
in
dec
loopne
dec
xchg
ins
mov
jmp
add
cld
adc
jmp
sbb
pop
popa
adc
jecxz
iret
mov
xchg
push
pushf
outs
jns
mov
push
dec
mov
jae
(bad)
sbb
mov
stc
sub
clc
sahf
ja
jl
jbe
ins
xor
or
mov
scas
xchg
nop
xchg
loopne
es
mov
adc
jmp
xchg
fs
pushf
jno
popf
mov
popa
in
in
in
das
push
sahf
or
mov
out
inc
fisub
outs
adc
push
or
loop
and
xchg
test
sahf
pop
inc
js
mov
xchg
mov
fist
(bad)
jge
xchg
xchg
push
jle
xor
popa
xchg
mov
pusha
xchg
cmp
popf
movs
aad
push
ds
rep
or
mov
xchg
sbb
ror
fst
sbb
sub
mov
mov
xchg
ret
nop
xchg
mov
mov
stos
adc
or
xchg
jmp
pop
mov
or
popa
mov
xor
scas
aam
test
mov
std
clc
push
xchg
cli
jl
iret
push
xchg
loopne
call
jb
(bad)
pop
dec
ficom
shl
xchg
mov
dec
pop
mov
not
sbb
sub
sub
inc
rcl
cmp
cmp
ret
lahf
mov
inc
push
adc
ror
sbb
xchg
icebp
js
inc
push
xchg
imul
scas
fwait
xchg
ret
pusha
cmp
jecxz
mov
xchg
test
sub
inc
jl
cdq
or
cmps
ror
inc
inc
lahf
and
xchg
and
mov
jl
into
cdq
jae
loop
xchg
adc
loop
and
sub
mov
cli
pop
jecxz
xchg
rol
xchg
(bad)
cmp
int3
xchg
stc
in
pop
push
or
repz
pop
cld
js
stos
inc
jecxz
inc
stos
sahf
test
pop
ja
nop
ret
mov
fsub
iret
jle
(bad)
outs
mov
loop
sti
jge
adc
fld
stc
pushf
adc
in
adc
mov
es
cld
scas
dec
jmp
cli
mov
movs
sbb
jmp
jle
sbb
mov
dec
inc
and
mov
(bad)
sub
in
fdivr
mov
stc
in
leave
ins
ds
or
outs
dec
xor
daa
in
cld
mov
jle
sbb
stos
call
cwde
dec
daa
cmc
fsubr
jnp
cmc
mov
cmc
or
ret
xchg
rcr
neg
and
adc
pop
lds
ins
mov
cmp
cli
dec
xlat
in
push
xchg
mov
pop
scas
je
mov
cld
push
push
out
adc
mov
push
sub
mov
repz
cmp
test
mov
xchg
out
leave
adc
xor
sub
(bad)
pop
xchg
add
add
retf
inc
xchg
aaa
or
pushf
mov
sub
stos
inc
add
inc
int3
adc
pop
pop
scas
mov
and
push
xchg
je
push
xor
cli
xchg
fst
cdq
repnz
xchg
cmc
adc
cdq
xchg
mov
fimul
adc
xor
xchg
jnp
push
sbb
pop
xchg
in
sti
mov
push
xchg
pop
mov
sbb
jle
xchg
mov
jle
adc
popa
and
pop
pop
cmps
or
adc
shl
mov
xchg
retf
mov
jle
jae
mov
cdq
int
(bad)
cld
aas
xchg
test
inc
cmps
scas
xchg
jnp
jo
cwde
les
ds
push
mov
sete
daa
mov
push
xchg
cmp
in
inc
xchg
call
mov
xor
mov
not
push
popa
sahf
ret
xor
mov
lds
jnp
pushf
jp
test
mov
rcl
jnp
jl
sub
dec
adc
loope
iret
or
sbb
stos
mov
cmps
mov
and
arpl
pop
push
mov
loop
cmp
ins
jge
pop
adc
mov
mov
sub
adc
sbb
fwait
pop
xchg
cwde
in
inc
push
pushf
imul
add
pop
push
enter
xchg
mov
aam
call
fwait
retf
add
add
adc
ss
imul
push
clc
test
hlt
xchg
sbb
lods
js
outs
imul
ds
adc
mov
jp
dec
mov
pop
ss
movs
sar
mov
sub
mov
pop
pop
adc
ja
push
aam
mov
cmc
push
xchg
and
push
cmps
and
cdq
sub
mov
jp
es
les
inc
xor
xchg
push
js
push
mov
ins
xchg
push
(bad)
int3
cmc
add
arpl
push
mov
mov
and
dec
addr16
aam
pop
pop
mov
pop
sub
hlt
xchg
mov
dec
jbe
xchg
mov
das
into
and
shr
ins
lds
sub
jl
xchg
push
leave
das
int3
mov
xor
pop
scas
add
jo
sbb
je
push
int3
test
xchg
lods
lock
pop
in
inc
stos
xchg
lds
jo
xchg
sbb
rcr
int
sbb
das
xchg
bound
call
(bad)
jbe
lahf
or
push
jg
neg
popa
bound
jno
push
cld
retf
jb
jmp
mov
(bad)
fbstp
xchg
dec
fnstsw
fadd
int3
cmp
adc
or
pop
sbb
adc
cmp
addr16
pop
int
test
pop
push
sub
clc
imul
inc
into
dec
xchg
fsub
fs
jle
stos
cmps
mov
jg
dec
cwde
jnp
xchg
pop
dec
out
iret
adc
ins
jo
lock
push
test
xchg
out
pop
or
inc
mov
dec
mov
into
add
out
les
mov
mov
add
mov
stos
imul
xlat
push
fistp
and
xchg
pop
push
inc
ror
dec
jecxz
cmp
xchg
or
add
test
adc
or
push
mov
xchg
icebp
movs
lods
jge
jle
rcr
adc
(bad)
es
iret
adc
jae
cmp
out
mov
xor
sbb
call
xchg
sub
cmp
xchg
out
xor
repz
iret
xor
xchg
inc
pop
mov
adc
outs
aam
adc
or
aad
mov
loop
add
movs
jle
popf
or
js
push
pop
lock
je
xchg
cmc
xchg
(bad)
das
jnp
dec
xchg
inc
pop
mov
xor
jl
xchg
ret
inc
or
jmp
out
lods
push
inc
xchg
add
pop
lahf
cmps
loopne
xchg
pusha
sub
or
add
jl
push
pop
push
fbld
aam
mov
mov
rcr
inc
fs
bound
shl
sub
(bad)
pop
pop
fsub
xchg
icebp
xchg
mov
add
not
push
stc
inc
sbb
sub
dec
das
pusha
adc
xchg
push
movs
add
mov
fsub
mov
pop
xchg
lock
scas
sbb
fcomp
iret
arpl
mov
mov
and
inc
out
xchg
xor
jmp
scas
outs
je
jb
lock
ret
ins
test
xchg
add
sub
cdq
mov
ins
push
pushf
xchg
sub
lea
bnd
xor
(bad)
int3
or
adc
mov
cmp
pop
dec
mov
inc
ja
add
or
xor
nop
push
cmp
aaa
cmps
lds
add
add
mov
aam
jl
xchg
idiv
je
jbe
sbb
fisttp
mov
iret
cli
aam
repz
adc
xchg
jne
pop
ins
pop
mov
sub
mov
dec
xchg
lds
retf
fimul
aam
mov
add
push
lock
call
daa
xor
and
inc
dec
jno
adc
enter
and
sbb
dec
xchg
dec
or
iret
adc
sbb
and
aaa
js
xchg
mov
int
punpckhbw
imul
fimul
xchg
and
sub
inc
js
add
int
loope
std
shl
out
mov
push
rcl
into
pop
add
cdq
jge
fst
mov
cmps
cwde
ins
retf
inc
outs
cdq
mov
push
test
inc
cwde
aaa
sub
int
mov
and
push
cs
mov
in
shr
test
stos
mov
bound
jge
add
jne
stc
fadd
xchg
(bad)
lods
add
xor
mov
xchg
or
bound
int3
dec
push
jmp
repz
in
mov
pop
jl
adc
xchg
xchg
loopne
push
fwait
mov
(bad)
fmul
and
inc
pop
pushf
push
(bad)
adc
inc
cmps
iret
ret
ficom
xor
lock
daa
pushf
pop
xchg
fwait
mov
(bad)
fadd
fisttp
out
or
xchg
xchg
aas
ror
jns
lahf
imul
frstor
push
fidiv
repz
icebp
xchg
xlat
(bad)
sar
xchg
xchg
add
xchg
cld
sub
dec
xchg
mov
pusha
mov
pop
xchg
sbb
shl
int
adc
xor
pushf
mov
hlt
adc
jecxz
push
cdq
sub
je
adc
mov
clc
xor
(bad)
xchg
imul
push
mov
jecxz
adc
mov
mov
jnp
outs
(bad)
nop
push
adc
adc
xchg
add
idiv
mov
push
popa
xor
xchg
adc
and
je
loopne
xor
sbb
or
jp
xchg
xchg
xor
and
jmp
aam
mov
lock
int3
xor
mov
xchg
xchg
lods
retf
mov
fs
cld
loopne
outs
rcr
fwait
or
cmp
in
mov
jg
mov
xor
pop
push
push
jne
aas
or
pusha
ins
xchg
retf
mov
hlt
inc
test
cmc
xchg
movs
mov
pop
xchg
mov
add
inc
mov
jnp
xor
xchg
dec
cmp
ss
dec
call
(bad)
push
and
loop
lock
cli
pusha
sbb
ja
inc
ret
mov
js
popf
retf
fisubr
and
push
pusha
test
aam
in
lds
or
enter
fwait
push
adc
into
(bad)
push
add
adc
jbe
mov
in
mov
jl
or
sbb
stos
(bad)
popf
into
in
cli
mov
jmp
dec
xor
adc
popf
test
inc
fsubr
mov
fdivr
cli
pop
js
mov
jl
iret
push
inc
mov
jge
or
mov
adc
in
xchg
mov
sbb
stos
clc
jl
push
jge
idiv
or
es
mov
repnz
call
inc
jmp
clc
lea
xchg
xchg
hlt
(bad)
pushf
jl
aam
in
sbb
mov
int3
(bad)
cwde
cmovo
sub
aam
add
hlt
jbe
out
pushf
into
(bad)
cmps
and
push
xchg
sub
and
fcmovbe
jnp
in
mov
adc
imul
in
leave
sti
push
push
inc
mov
and
rcr
jns
repnz
mov
and
in
jmp
dec
xchg
inc
pop
aas
movs
je
and
retf
(bad)
cmp
outs
scas
xchg
add
cdq
in
push
mov
shr
rcl
jmp
mov
aam
es
sbb
push
cld
and
dec
(bad)
cmps
outs
pop
aaa
and
push
jmp
les
dec
outs
pushf
cmc
jge
adc
stos
add
cmps
loopne
push
cmp
xchg
add
into
mov
adc
adc
push
outs
mov
sbb
inc
ror
push
adc
xor
mov
adc
aas
jmp
xor
adc
ret
repz
push
sub
push
pop
aam
xor
xchg
test
xchg
(bad)
movs
mov
cmp
dec
push
(bad)
fsubr
push
adc
xchg
lods
add
xor
xor
mov
(bad)
pop
xchg
das
fs
adc
(bad)
sub
in
es
xor
fwait
sbb
or
jae
call
out
sbb
scas
jno
stos
nop
xchg
inc
hlt
mov
mov
aam
jmp
xchg
inc
cmps
inc
mov
add
in
mov
int3
xor
fiadd
sub
pusha
xchg
jmp
mov
js
dec
out
add
stos
cmp
cwde
fisubr
cmp
outs
daa
sti
into
(bad)
mov
push
mov
xchg
xchg
ins
es
and
fdiv
xchg
adc
test
adc
and
mov
dec
dec
add
fcom
jns
fisub
out
mov
xor
std
xchg
aam
fimul
push
ret
mul
mov
aad
pop
xor
cmp
mov
and
pop
push
adc
jnp
adc
test
cli
xchg
ja
mov
xchg
gs
movs
into
xor
cmp
jge
mov
sbb
mov
push
xchg
loope
jno
pop
call
adc
retf
xor
xchg
mov
xchg
daa
pop
pusha
out
idiv
into
sti
jb
xchg
sbb
pop
adc
popf
pusha
cmp
add
dec
or
xchg
adc
scas
lea
cmp
mov
das
xchg
mov
nop
jo
xchg
outs
call
mov
inc
enter
in
inc
loopne
test
jl
xchg
pop
ins
fimul
mul
cld
xchg
sbb
jecxz
xchg
push
add
mov
out
sub
enter
in
mov
and
div
sbb
jge
(bad)
rol
pop
aam
push
ret
and
in
xchg
add
ins
xchg
xor
sbb
or
fisttp
pop
jl
adc
jns
or
jmp
xor
xchg
and
(bad)
dec
ins
mov
add
ret
std
mov
inc
sub
in
loop
sub
xchg
out
xor
(bad)
mov
call
jnp
xchg
scas
jecxz
pop
sbb
dec
hlt
cmp
jp
repnz
adc
xchg
outs
jge
inc
mov
sbb
les
clc
xchg
int
mov
push
mov
xchg
dec
das
xchg
aaa
sub
xchg
push
jg
pop
push
pop
push
xchg
add
cli
inc
imul
(bad)
dec
je
adc
adc
jecxz
sub
push
retf
add
xchg
clc
stos
retf
jae
pop
cmp
fisttp
xchg
push
cmps
xchg
fmul
xor
dec
mov
xchg
or
pop
push
add
mov
loop
sbb
cmps
out
test
mov
leave
jbe
xchg
hlt
pop
push
pop
adc
pop
xchg
aam
iret
in
xor
in
inc
dec
xchg
mov
dec
int3
lds
stos
mov
mov
jb
fwait
std
in
push
or
aad
jno
mov
xchg
iret
cmp
xchg
sbb
in
sti
popf
call
test
fsubr
lock
iret
scas
push
pushf
adc
xchg
adc
nop
out
jmp
icebp
lods
retf
and
and
test
jl
out
mov
fwait
add
mov
xchg
cmp
xchg
pop
adc
ficomp
sbb
mov
inc
or
je
inc
es
pop
xchg
mov
int
pop
xchg
jnp
pop
ret
adc
mov
jae
(bad)
test
repnz
das
call
xchg
cld
fiadd
test
das
xchg
lods
jne
cmp
mov
push
jp
pop
and
jl
(bad)
outs
push
mov
adc
xchg
dec
mov
in
shl
xor
xor
xchg
mov
scas
je
or
fst
lahf
inc
inc
mov
xchg
sahf
fist
sub
push
test
stc
and
sar
push
std
jnp
aad
adc
mov
das
mov
jp
mov
je
aad
mov
jo
inc
add
xchg
cmp
adc
mov
mov
shl
xchg
pop
idiv
ja
lea
rol
into
xor
sti
mov
or
cmp
fld
xor
imul
hlt
fwait
leave
shl
fnsave
mov
xchg
test
xor
int3
and
scas
xchg
jecxz
mov
test
aad
mov
movs
ins
jbe
cmps
adc
or
xchg
xchg
ret
shr
jmp
jno
cmp
push
inc
xchg
xchg
shr
push
xchg
outs
mov
pop
sti
jmp
mov
shl
mov
stos
inc
xchg
fwait
xor
cmp
xchg
ret
jnp
daa
and
out
repnz
cli
mov
(bad)
icebp
int
mov
cmp
xchg
call
pusha
xchg
xchg
jge
cli
call
fist
fsubrp
into
sub
jns
sbb
jg
xor
cli
push
push
lahf
arpl
repz
stos
mov
popf
inc
jns
in
xor
xchg
stc
pop
loope
sub
out
jle
je
xchg
out
shr
aad
cmp
pop
int
loopne
ss
stos
movs
dec
gs
or
lods
gs
jmp
fst
pushf
or
fisub
rcr
add
pushf
xchg
mov
inc
dec
je
mov
xchg
(bad)
mov
int3
sti
fsubr
xchg
mov
icebp
in
xchg
fwait
adc
adc
pop
xchg
xchg
pop
xor
xchg
inc
xchg
nop
ja
ins
pop
jns
dec
mov
pop
lods
in
sbb
add
xchg
imul
int3
js
mov
dec
lods
jb
iret
je
sub
int3
mov
xchg
jge
jne
fwait
in
pop
lods
push
jecxz
xor
push
repnz
dec
adc
xor
pop
push
ins
cmc
mov
xchg
push
(bad)
jmp
in
adc
xchg
test
out
xchg
stos
popa
xor
je
mov
jb
mov
sbb
mov
pop
jg
retf
popf
push
push
shl
popf
xor
pushf
jmp
js
popf
push
jmp
lea
or
jge
push
int
adc
into
sbb
mov
ret
in
in
scas
mov
dec
fwait
mov
popf
ret
xchg
ror
inc
push
aam
inc
outs
mov
pop
or
sub
mov
dec
mov
fst
test
dec
mov
(bad)
xor
mov
pop
sbb
sbb
and
push
clc
jb
mov
xor
dec
icebp
stc
cmp
add
pop
in
sub
call
xor
sbb
(bad)
cmps
mov
adc
add
(bad)
data16
loopne
aad
shl
adc
cmps
or
repnz
mov
(bad)
push
sbb
jge
popf
(bad)
mov
fsub
cwde
mov
jbe
xor
jb
repnz
sub
test
cmp
stos
and
data16
les
std
inc
mov
inc
xchg
push
cmovbe
mov
adc
aaa
mov
dec
xchg
movs
bound
inc
fwait
lahf
mov
repz
out
dec
pop
xchg
jmp
push
(bad)
add
pop
ficom
out
neg
jnp
sbb
or
push
adc
fst
xchg
aas
or
cmp
movs
cmp
jns
mov
fwait
(bad)
xchg
aaa
and
mov
or
rcr
xchg
lds
dec
push
mov
imul
xchg
xchg
jne
mov
xor
push
int
mov
xchg
sub
les
xchg
stos
loopne
leave
xchg
test
push
inc
hlt
and
mov
xchg
je
loop
out
and
(bad)
mov
xchg
inc
repz
out
jmp
cmp
inc
pop
fwait
iret
mov
movs
movs
movs
jg
xor
mov
inc
mov
xchg
add
xchg
mov
mov
push
popa
cmp
push
test
push
mov
lock
movs
pop
pop
mov
int
mov
mov
sbb
push
sahf
add
sub
fwait
xor
mov
inc
fidiv
pop
push
fcomp
push
sub
dec
(bad)
jno
pop
inc
adc
pop
push
sub
mov
inc
pop
loope
mov
cmp
push
xchg
jl
aas
hlt
out
dec
push
xchg
xchg
cmps
or
xchg
ins
idiv
sbb
mov
mov
xchg
jo
movs
and
test
fwait
xchg
and
mov
lods
cmp
test
cmp
cmp
ficomp
das
push
adc
mov
or
xchg
xchg
dec
sysenter
xchg
sub
add
xchg
mov
je
in
cmp
add
ror
wrmsr
mov
xor
in
fisub
rcr
pusha
adc
arpl
loope
xor
cld
out
out
jo
lods
imul
daa
out
sub
jmp
mov
aam
icebp
sbb
rcl
jl
push
call
adc
retf
(bad)
pop
out
mov
mov
cli
lahf
jl
mov
jge
jae
or
ret
icebp
mov
adc
cmp
push
dec
push
ins
and
pop
fs
popf
mov
pop
loopne
sbb
jae
into
sbb
cwde
adc
aas
xchg
xchg
push
data16
adc
jno
(bad)
ss
fs
lds
sbb
ret
jmp
sbb
dec
push
pop
ficomp
xor
xchg
mov
adc
inc
xchg
rcl
push
icebp
push
lods
mov
xor
call
mov
pop
inc
mov
movs
and
cmps
shr
leave
jo
jmp
(bad)
jg
xchg
ror
or
xor
aam
pop
dec
outs
repz
call
mov
movd
inc
fadd
dec
out
push
repz
or
imul
inc
cdq
inc
push
cmp
inc
adc
mov
cld
fcom
mov
push
jnp
repnz
rol
xor
jge
jl
or
sbb
std
adc
xor
mov
jbe
movs
mov
repz
xchg
cmc
push
pop
popf
push
hlt
sbb
aad
gs
sbb
xchg
xor
ret
xchg
push
icebp
dec
jno
test
mov
push
pushf
adc
sti
xchg
cmp
ret
mov
(bad)
stos
cmovnp
jle
je
mov
shr
xchg
shl
fisubr
xchg
push
sbb
push
mov
pop
ret
or
mov
push
xchg
setg
inc
nop
lods
ud1
xchg
xchg
addr16
(bad)
cld
mov
and
mov
repz
push
loop
(bad)
enter
ret
stos
in
stos
cmp
imul
xchg
inc
pop
je
jl
push
ins
xchg
dec
and
call
adc
sub
stos
jo
rcr
push
cmps
sar
xchg
jge
mov
mov
pop
jnp
mov
addr16
sub
xchg
dec
sbb
add
xchg
and
cmp
jp
outs
pop
inc
add
xchg
movs
into
shl
sub
outs
or
cmps
cmps
adc
pop
xchg
pusha
pop
mov
js
test
and
jmp
in
adc
xchg
dec
call
mov
xchg
test
adc
or
pushf
jns
icebp
pshufw
ja
mov
lahf
stc
fdiv
add
iret
mov
xchg
(bad)
pop
xchg
push
ja
xchg
mov
sbb
mov
xchg
fwait
das
je
pop
jge
pop
dec
mov
and
mov
xor
inc
mov
jae
in
pusha
jl
loop
(bad)
cdq
repnz
sbb
jge
jnp
fwait
rcr
push
sub
mov
dec
add
data16
xlat
mov
push
popa
dec
(bad)
nop
into
in
ins
into
sbb
mov
push
loope
cwde
add
inc
xchg
mov
pushf
xchg
pop
fs
cmp
adc
mov
adc
imul
stos
les
adc
xchg
push
sahf
ror
adc
cwde
dec
inc
test
xchg
mov
and
cmp
es
jmp
and
enter
fs
mov
mov
cmp
call
lahf
js
push
or
and
imul
in
in
test
adc
adc
sbb
inc
adc
clc
in
test
leave
sbb
aas
xchg
inc
loop
add
mov
shr
dec
push
xchg
jns
mov
lods
lahf
daa
xchg
jae
jo
cld
fisttp
aad
sbb
ret
jle
mov
xor
inc
dec
not
mov
gs
jge
fimul
xchg
mov
repz
fistp
xchg
jg
xchg
out
imul
lea
xchg
lahf
sbb
pop
xchg
xor
jl
icebp
xchg
gs
fsub
in
call
stc
(bad)
mov
xchg
mov
xchg
cwde
add
jl
mov
xchg
xorps
popf
repz
pop
xchg
fcomp
(bad)
sub
mov
xchg
xchg
fistp
push
adc
xchg
ss
mov
xchg
add
pop
sub
push
sbb
jp
xchg
pop
mov
shr
repz
add
and
sbb
out
xor
mov
inc
jne
test
into
adc
lds
dec
pushf
xchg
ret
out
add
pop
fwait
sbb
cmp
stos
add
mov
sub
cli
jnp
nop
add
je
xchg
adc
mov
xchg
inc
test
in
pop
mov
out
and
cmp
jmp
adc
fst
mov
sub
xchg
inc
js
ins
jmp
jl
mov
idiv
ret
aam
mov
mov
imul
pop
mov
mov
mov
and
dec
fs
leave
inc
mov
pop
push
adc
and
push
ret
outs
mov
inc
xchg
or
xchg
adc
test
(bad)
int3
leave
dec
icebp
and
pop
add
fdivr
and
adc
mov
adc
dec
es
hlt
cwde
sub
xchg
out
enter
adc
ins
xor
stc
add
xlat
addr16
cmps
jmp
rcl
dec
daa
xchg
retf
cmps
sbb
push
and
inc
int
xchg
sti
xchg
dec
ficomp
sub
dec
cmp
popf
ja
dec
out
sub
jecxz
or
movzx
cmps
addr16
xchg
cmp
xchg
sti
adc
les
push
into
mov
cwde
xor
xchg
in
jne
cmp
sub
js
push
mov
or
sbb
les
push
mov
stos
out
push
xchg
retf
mov
sub
call
loopne
test
nop
fild
rol
frstor
mov
sub
lods
sbb
pop
mov
xchg
loopne
push
lea
sub
or
bound
fidivr
cmps
push
dec
das
sbb
les
jge
inc
add
rol
push
inc
icebp
loope
outs
aad
xchg
lods
ret
xchg
out
adc
popa
push
retf
(bad)
pop
in
out
into
int
cld
add
inc
(bad)
pop
inc
aas
mov
test
adc
mov
cmp
xchg
push
enter
adc
fcomp
(bad)
rcr
pop
out
test
pop
adc
push
mov
push
xchg
xchg
push
lock
jg
add
mov
push
shr
push
push
mov
jg
cmc
xchg
retf
nop
cmps
pop
jo
push
mov
mov
rcl
ja
fwait
pop
pop
pop
fwait
data16
adc
inc
xor
test
adc
int3
cmp
push
inc
popa
xchg
inc
xchg
inc
mov
add
xchg
psllq
sbb
dec
call
in
neg
into
and
mov
inc
mov
xchg
call
cwde
xor
xchg
sbb
pop
je
mov
cmp
daa
xchg
push
lods
fimul
push
clc
xchg
xchg
mov
add
xchg
aam
enter
out
push
sbb
ficomp
(bad)
sub
push
adc
xchg
cld
xchg
cmps
cdq
popa
(bad)
xchg
(bad)
pop
mov
jg
mov
or
(bad)
pop
stc
push
lods
and
mov
fdivr
loopne
retf
mov
pop
xchg
xchg
jle
sti
(bad)
sub
cmp
xor
and
cmp
in
push
mov
daa
xchg
add
adc
pop
hlt
das
sbb
fwait
jo
hlt
mov
adc
fs
aam
test
xchg
add
dec
cmp
ja
add
adc
jne
stos
xchg
es
out
dec
arpl
repz
and
dec
push
or
mov
add
pop
ss
ret
xchg
shr
cmp
sub
div
mov
cld
mov
ret
dec
xchg
adc
sbb
fwait
xchg
fsubr
ins
and
dec
add
mov
hlt
xchg
test
ins
mov
in
jmp
jns
stos
fmul
xchg
xchg
imul
pop
inc
dec
xchg
dec
xchg
jge
sub
sbb
xchg
cwde
inc
jno
js
mov
int3
and
jo
xchg
outs
ja
add
dec
ss
adc
fidiv
xchg
movs
ret
xchg
adc
(bad)
jmp
cmp
push
pop
sbb
xchg
mov
das
lods
xchg
popa
adc
out
rcl
mov
ins
je
mov
jg
push
sub
pop
or
xchg
pop
cmps
jp
aad
pop
(bad)
fnsave
ds
jnp
outs
(bad)
jg
adc
je
shr
jmp
ror
ret
cli
scas
sub
mov
push
xchg
repnz
inc
dec
(bad)
xchg
and
outs
xchg
mov
xchg
push
(bad)
and
ins
add
add
xchg
outs
arpl
adc
leave
xor
xchg
inc
pop
xchg
and
in
adc
xchg
iret
xchg
mov
pop
fucom
mov
and
lods
push
fisub
inc
loopne
ins
and
mov
rcl
jp
div
mov
xchg
or
pushf
sti
mov
jle
cmps
fistp
jmp
mov
loopne
movs
pop
jmp
ror
mov
mov
pop
xchg
pop
ins
ret
xchg
mov
into
bound
xor
call
or
xchg
mov
xchg
ret
aas
cmps
sbb
mov
or
pop
xor
pop
jns
loope
push
lahf
in
(bad)
cld
jmp
push
sub
jmp
cmps
jbe
adc
mov
(bad)
stos
out
arpl
jp
push
stos
test
out
and
push
or
mov
scas
ins
mov
cwde
add
pop
sbb
out
stos
je
jne
aad
ret
inc
jmp
scas
in
mov
mov
jl
xchg
inc
xchg
sbb
gs
cdq
das
pop
cmps
jl
scas
mov
xor
int3
ja
adc
xchg
jmp
pop
bound
or
in
xor
sar
xor
mov
sbb
xchg
dec
sbb
push
jge
sub
movs
jl
xchg
out
call
sub
sbb
jmp
push
xchg
test
cdq
jg
nop
sbb
xor
and
lahf
push
stc
call
in
jp
adc
push
push
das
xchg
and
pop
je
and
repnz
nop
push
mov
stos
push
data16
addr16
nop
adc
addr16
cwde
nop
sbb
push
pop
sahf
ficom
or
jge
lea
pushf
pop
and
icebp
and
fsubr
stc
rcr
jg
xor
xchg
jae
imul
cmp
nop
es
mov
ret
in
pop
movs
fwait
in
or
pop
cmp
sahf
popf
fwait
xchg
fsubr
jge
add
cld
aas
std
push
dec
imul
repz
push
or
xchg
sbb
and
pop
mov
fwait
lds
mov
popa
sbb
(bad)
push
xchg
add
sbb
fidiv
sbb
mov
cmp
movs
jge
loop
repnz
dec
adc
and
jge
mov
pop
sub
in
or
lahf
pop
clc
add
ja
pop
ret
loop
mov
cmc
aam
xchg
sbb
ds
rcl
bound
mov
pop
cld
aad
addr16
fdiv
std
push
xchg
jbe
stos
pusha
dec
xchg
push
leave
and
mov
xchg
dec
sub
loope
xchg
mov
stc
ins
leave
or
mov
jmp
cdq
xchg
stos
push
call
jmp
shl
sbb
cs
push
xchg
cmps
fs
icebp
bound
mov
sub
inc
call
xchg
and
in
dec
je
jle
jne
ret
ins
outs
add
add
call
adc
sub
scas
test
cdq
movs
loope
cmc
int3
xchg
outs
pop
(bad)
sbb
sbb
ds
(bad)
push
adc
add
mov
stos
and
or
cmp
xchg
lea
xchg
inc
cs
jg
arpl
mov
xchg
mov
mov
push
cdq
or
aaa
lds
in
or
leave
je
sbb
or
adc
pushf
icebp
stc
and
out
repz
mov
jb
push
(bad)
add
xchg
cld
addr16
xchg
xchg
dec
movs
outs
movs
lods
xchg
sbb
xor
pop
mov
inc
mov
dec
loopne
pushf
aaa
test
push
push
xchg
mov
push
rcr
pop
into
xchg
mov
rol
mov
mov
sti
fwait
cmps
cmp
mov
stos
inc
sub
int3
retf
sahf
mov
hlt
(bad)
push
xlat
stos
add
mov
(bad)
js
fwait
mov
mov
adc
pop
xchg
adc
imul
xchg
sub
dec
ss
rcl
movs
mov
push
mov
and
fdivr
(bad)
cld
je
pop
mov
push
shl
push
sub
mov
sahf
or
pop
sbb
pusha
out
sbb
sub
dec
mov
mov
mov
sub
and
push
(bad)
inc
cmp
jo
add
adc
jp
js
test
mov
or
mov
dec
xor
je
dec
imul
sub
add
add
and
xor
push
push
push
push
not
fwait
cld
(bad)
out
fwait
stos
mov
pop
dec
in
inc
outs
ret
xchg
mov
dec
push
lahf
or
xor
adc
daa
pop
xchg
cmp
aas
das
cmps
out
xchg
adc
arpl
aam
xor
xchg
movs
test
mov
jne
scas
or
es
inc
sbb
sahf
fist
movs
stc
aam
add
xchg
adc
(bad)
cmp
fld
xchg
mov
mov
fist
cmp
lahf
js
fnstcw
cmp
ret
out
sub
mov
pop
pushf
fidivr
xchg
and
pusha
ret
(bad)
fidiv
xchg
jne
rcl
ficom
xchg
xchg
xor
push
in
iret
js
adc
bound
popf
fimul
sahf
pop
fs
mov
movs
rol
xchg
call
in
xchg
int
inc
mov
lahf
sbb
mov
jg
add
adc
xchg
int
inc
(bad)
arpl
push
push
scas
inc
jmp
jg
ret
push
cli
in
or
call
cdq
jb
in
xchg
dec
inc
mov
je
ins
xchg
mov
test
not
ror
push
mov
cmc
xchg
out
loopne
arpl
mov
cwde
xchg
xlat
sub
pop
cmp
cld
xchg
jb
icebp
push
push
sbb
in
cmc
xchg
cwde
std
cdq
movs
ror
mov
xchg
jbe
inc
sub
ins
cmps
loope
fild
cmp
hlt
push
fadd
mov
xchg
outs
xor
sbb
cld
dec
sbb
mov
fcom
push
mov
adc
dec
stos
jp
xchg
mov
jecxz
pop
enter
xchg
mov
xchg
or
mul
push
mov
ds
mov
ja
sbb
ss
jnp
adc
inc
call
int
inc
shl
add
lock
popf
les
call
jbe
idiv
xchg
sbb
scas
fwait
movs
int3
xchg
ret
bound
je
lods
sahf
push
and
(bad)
push
xchg
das
sti
fisubr
addr16
xchg
cmp
mov
jo
imul
ror
cdq
mov
cmp
fwait
xlat
popf
adc
sbb
jb
xchg
aas
mov
mov
adc
sbb
dec
retf
inc
and
mov
dec
imul
gs
mov
push
mov
xor
cmp
jae
das
xchg
aaa
jnp
out
test
movs
outs
int3
ss
mov
or
int
fwait
sbb
fucom
jno
fdivr
jl
xchg
mov
retf
mov
stos
add
fisubr
xchg
xchg
imul
jno
adc
into
jns
mov
lods
jge
and
loope
xchg
in
out
mov
inc
mov
mov
nop
(bad)
rcl
push
xor
xchg
xchg
shr
xor
cmp
dec
sub
sbb
aaa
test
inc
ins
movs
and
inc
inc
mov
jo
adc
call
mov
push
aam
loop
inc
cmc
xchg
pop
add
or
sbb
lahf
fwait
jle
and
xchg
retf
ds
popf
call
in
cld
fisub
je
sbb
call
icebp
adc
sbb
xor
in
call
out
add
mov
push
and
fcom
and
outs
fimul
push
xchg
push
sub
bound
pusha
call
xchg
adc
jp
xchg
jmp
xchg
inc
sbb
add
scas
jne
mov
out
xor
je
cmc
xchg
lods
adc
int3
cmp
rol
cdq
mov
sub
inc
aas
arpl
popf
add
leave
push
jp
adc
pop
mov
fwait
scas
push
ds
push
and
out
imul
adc
aam
add
adc
xchg
add
adc
sbb
data16
repz
adc
or
clc
pop
jg
push
aam
xchg
jl
mov
cmp
fs
jp
add
jne
popf
mov
(bad)
and
lock
ret
sbb
mov
xchg
jb
and
xor
loopne
iret
out
xchg
xchg
inc
sbb
cmp
jns
ss
mov
pop
jmp
jmp
mov
loop
not
fimul
call
stc
out
push
dec
jbe
inc
js
mov
inc
popf
xchg
movs
jo
cmc
push
lahf
xchg
test
inc
pop
mov
aaa
jmp
push
je
push
pop
mov
int3
(bad)
loopne
dec
xchg
in
mov
fist
adc
sub
cmps
or
arpl
push
ja
or
dec
adc
repz
loope
psubsb
xchg
xchg
mov
out
hlt
ins
in
push
fidivr
mov
daa
mov
mov
rcl
or
inc
je
jmp
pushf
xchg
mov
dec
mov
or
push
xchg
sbb
mov
ins
xchg
and
js
and
mov
mov
add
test
mov
jno
aam
xor
imul
push
rcl
ins
pop
mov
sahf
and
jnp
scas
adc
cld
xor
es
fsubr
fs
dec
and
jbe
in
mov
jmp
mov
jge
je
mov
ret
pop
jmp
stos
xchg
jne
sbb
ret
jp
push
push
hlt
jl
ret
out
in
cmp
mov
enter
or
mov
xchg
std
ds
push
sti
and
mov
add
gs
jb
dec
mov
mov
push
and
xor
das
xchg
imul
pop
das
cmc
out
lods
xchg
mov
sar
mov
pop
aam
add
(bad)
jmp
mov
xchg
cmps
hlt
scas
push
nop
std
cmp
movs
xchg
mov
dec
xchg
add
dec
pop
lods
mov
jnp
shl
jecxz
inc
sub
xchg
cmps
(bad)
inc
outs
scas
jmp
jge
mov
lock
das
lds
loopne
sbb
cmp
shr
sbb
or
pop
test
cmp
xchg
rcl
pop
loope
popf
leave
xchg
mov
scas
xchg
xchg
icebp
xchg
popa
cmp
imul
xor
sbb
xchg
addr16
or
iret
sub
sbb
pop
xor
popf
push
push
xchg
push
cli
xchg
je
pop
push
aam
les
mov
fwait
cmp
mov
fcomi
mov
lds
les
push
or
sbb
std
push
xchg
jl
pushf
add
xchg
mov
movs
push
cdq
xchg
mov
cmc
pop
and
xor
xchg
push
mov
jecxz
popf
xchg
call
(bad)
xchg
movs
cdq
push
mov
xchg
xchg
shr
sbb
ins
jle
add
xchg
or
mov
jge
ja
sub
pop
dec
xchg
cdq
pop
lds
push
inc
xchg
push
ds
fcom
repnz
loop
sahf
pop
pop
aad
ds
adc
in
fdivr
outs
jmp
loopne
test
jge
or
xchg
pop
pop
xor
call
xor
push
loop
fldenv
je
jle
repnz
push
xchg
arpl
jl
aam
cmc
lds
retf
lods
pop
xchg
fst
xor
inc
call
movs
mov
imul
mov
pushf
xchg
into
(bad)
adc
call
pop
sbb
push
leave
pop
add
mov
xchg
and
out
push
xchg
inc
pop
adc
mov
or
xchg
mov
scas
add
jg
js
adc
and
xchg
stc
sbb
aam
or
xchg
mov
fcom
aam
pop
jae
mov
pushf
lahf
scas
mov
test
int
repnz
or
imul
aaa
fstp
and
aam
push
mov
xchg
nop
xor
bound
xchg
pushf
cmc
std
mov
movs
(bad)
jg
pop
jne
sti
push
gs
(bad)
xchg
fnstenv
call
outs
xchg
hlt
inc
loop
pop
sub
pop
int3
pop
mov
xchg
ret
(bad)
mov
mov
mov
hlt
xchg
scas
nop
xchg
xor
test
xchg
sub
popa
inc
aas
movs
inc
mov
cld
sub
pop
into
retf
mov
mov
dec
adc
les
pop
cmp
repz
jmp
sbb
iret
mov
mov
dec
mov
xchg
jmp
xchg
not
repnz
jl
sbb
ss
add
fwait
fs
jmp
js
xchg
jg
mov
ror
cmps
sti
adc
jae
mov
jp
int
pushf
xchg
pop
popf
inc
xchg
aaa
test
sbb
or
or
inc
in
pop
xlat
fadd
jb
lds
ret
neg
cmp
fnsave
xchg
xchg
ret
sub
pop
add
mov
test
int
aad
push
mov
mov
pop
push
xchg
xor
xor
add
xor
cmp
gs
push
or
adc
or
pusha
rcl
ret
int3
sbb
inc
cwde
adc
ret
ins
xchg
sbb
mov
test
xchg
add
inc
mov
mov
ficom
xchg
sub
call
and
pop
addr16
nop
mov
push
cwde
inc
mov
sbb
les
xchg
sub
lds
xor
leave
ins
les
mov
les
out
test
(bad)
xor
aad
(bad)
imul
xchg
jbe
dec
push
mov
xchg
xor
dec
adc
pop
xchg
sti
cmp
push
and
push
dec
ss
xchg
dec
lahf
or
sub
popf
xchg
iret
mov
les
retf
loopne
fist
cmp
popa
mov
sub
adc
shl
cmp
mov
arpl
mov
popa
cwde
imul
xchg
out
aas
push
ds
imul
sbb
popf
stos
cwde
jno
stos
aam
cmps
ud1
in
ss
rcl
and
leave
popf
test
imul
xchg
xchg
sub
push
or
xor
xor
inc
jecxz
sub
xchg
lods
arpl
icebp
xor
xchg
and
adc
data16
xchg
cmp
inc
xchg
hlt
push
cmp
sub
pushf
jle
xchg
jae
mov
in
dec
(bad)
addr16
ss
sbb
sub
inc
sbb
ja
imul
sub
inc
dec
mov
(bad)
aad
loopne
jl
fistp
adc
xor
xchg
pop
jb
(bad)
sbb
pop
in
sbb
push
arpl
ins
dec
cmp
mov
mov
push
(bad)
pop
lea
sbb
out
mov
mov
mov
mov
pop
mov
cmp
push
(bad)
cli
and
std
add
mov
stos
imul
repnz
push
jbe
(bad)
or
inc
mov
mov
ret
adc
cld
loop
and
cmc
test
scas
xchg
es
jl
jo
movs
in
aam
pop
jmp
stos
out
jge
enter
cmc
sub
jl
clc
aam
cld
stos
adc
sub
jmp
hlt
inc
and
fisttp
in
lods
and
hlt
out
call
hlt
mov
fucomi
dec
adc
(bad)
mov
push
xchg
int
dec
push
cwde
pop
adc
xor
adc
test
leave
inc
shl
xchg
mov
xor
jo
jg
sbb
addr16
sti
(bad)
mov
mov
or
rcl
add
dec
push
sbb
xchg
mov
rcl
mov
xchg
mov
ins
pop
push
fisubr
pushf
mov
push
les
xchg
pop
fwait
lods
fiadd
test
push
mov
loopne
test
sbb
xchg
push
mov
lea
and
fmul
inc
mov
sahf
test
push
in
mov
iret
adc
inc
dec
jbe
push
lea
cmc
test
and
sbb
push
sar
hlt
int
movs
rcr
xchg
sub
cmp
pop
aas
je
popf
and
js
xchg
fld
pop
test
ds
inc
dec
mov
inc
out
dec
push
sbb
xchg
fidivr
jl
xchg
mov
cmps
xchg
cmp
aaa
cs
cmps
mov
push
ins
xchg
lock
rcl
or
sbb
retf
push
mov
xlat
sbb
cdq
xchg
xchg
inc
jnp
je
in
mov
pop
xchg
(bad)
pop
sbb
xlat
ja
mov
inc
cwde
inc
scas
xor
js
mov
inc
popa
cmps
sahf
leave
xchg
mov
cli
ror
loope
mov
pop
pop
pop
cmp
or
hlt
mov
jp
adc
adc
mov
ror
bound
push
jmp
cmps
mov
iret
inc
pop
inc
lahf
js
xchg
jmp
ret
popf
jmp
mov
and
pusha
or
add
std
(bad)
mov
imul
push
push
xchg
inc
lea
repz
inc
jmp
and
add
sbb
mov
call
push
sub
ds
ret
dec
scas
xor
mov
mov
call
ins
xchg
push
aad
cld
ja
retf
and
iret
jns
mov
fsubr
and
stos
jmp
adc
cdq
mov
sub
loope
xor
int
ins
es
dec
dec
or
mov
in
mov
xchg
adc
test
jp
xor
dec
cmp
jmp
xor
dec
xchg
jp
xor
fwait
out
loop
pop
or
scas
push
sbb
xchg
inc
mov
fs
dec
adc
call
mov
in
mov
push
mov
in
(bad)
xor
xchg
addr16
xchg
xchg
(bad)
mov
lahf
and
or
mov
and
push
popf
(bad)
dec
xchg
sar
dec
outs
xchg
scas
and
xchg
jg
test
daa
jno
pop
jmp
icebp
jle
std
mov
sub
pop
not
xchg
pop
paddsb
pusha
out
stc
xchg
cmps
je
in
mov
sub
jecxz
jno
retf
mov
fst
add
iret
xchg
push
xchg
mov
cmp
mov
xlat
popf
jle
sbb
xchg
inc
sub
adc
xchg
pop
jge
hlt
xor
sub
push
mov
aam
mov
pop
xchg
sar
ja
cs
xchg
xchg
mov
inc
popf
mov
pop
in
lods
add
dec
retf
mov
clc
lea
xchg
out
fwait
adc
int
and
add
aam
movs
xchg
js
xchg
xchg
xor
push
out
repz
jge
into
imul
lahf
xchg
cmc
loope
out
call
xor
dec
sahf
dec
test
cmps
jns
mov
and
lahf
jecxz
add
outs
je
pop
out
mov
js
jae
or
gs
xchg
or
movs
xchg
push
add
ins
or
in
and
jmp
fwait
mov
and
sbb
xor
cdq
push
mov
sub
push
fidivr
test
mov
adc
push
(bad)
stc
inc
in
sub
pop
xchg
nop
push
mov
jg
iret
jb
adc
pop
arpl
or
jns
mov
out
je
xchg
(bad)
loopne
adc
mov
or
xchg
(bad)
bound
xchg
data16
outs
jge
je
sbb
and
shl
mov
jmp
aas
js
sbb
push
je
out
ins
xchg
xor
test
xchg
outs
mov
pop
push
call
jmp
xchg
pop
pushf
aad
int3
stos
and
cmp
xchg
mov
fs
or
iret
inc
xchg
test
mov
xor
cwde
mov
dec
fisttp
stos
xchg
jecxz
jecxz
add
fwait
call
xchg
inc
js
lock
inc
stos
jge
pop
sbb
sub
pop
pop
and
jmp
jg
jns
sbb
ins
mov
popf
ss
es
imul
sbb
pop
mov
adc
test
fwait
push
sti
push
push
xchg
clc
adc
or
jge
ja
out
cmp
(bad)
fsubr
sub
xchg
cmp
sub
imul
outs
jnp
repz
adc
icebp
fs
shl
push
xchg
pop
mov
jge
or
pop
add
push
pop
shl
mov
das
inc
les
dec
mov
xchg
push
call
mov
add
inc
cmp
loope
xchg
aam
cld
out
mov
push
sub
dec
test
jmp
adc
mov
jl
xor
and
movs
push
dec
mov
outs
icebp
cmps
popf
xchg
pop
mov
and
push
push
jge
pop
mov
hlt
mov
into
js
push
iret
call
pop
mov
adc
test
test
out
sahf
bound
nop
xchg
mov
mov
push
popf
or
jb
mov
push
sub
mov
rol
mov
cmc
jmp
inc
test
xchg
cld
shl
clc
add
cld
and
dec
fcomip
mov
repz
hlt
xor
push
in
arpl
pop
jge
test
cdq
cmp
and
test
dec
xchg
xchg
repnz
add
in
xchg
mov
into
sub
cs
xchg
sti
sub
dec
adc
test
retf
adc
mov
pushf
xchg
(bad)
fsubr
mov
xchg
mov
ss
pop
aaa
and
xchg
mov
xchg
xor
push
call
cwde
push
out
cmp
xchg
jp
lds
mov
inc
adc
lods
push
adc
xor
stos
mov
add
loopne
mov
mov
rcl
jno
pushf
inc
xchg
dec
retf
shl
div
es
cmp
jno
add
xor
xor
gs
jmp
push
mov
dec
inc
add
and
inc
mov
inc
(bad)
xchg
adc
cmp
dec
adc
inc
mov
dec
test
dec
pop
(bad)
xchg
lahf
or
dec
xchg
daa
sbb
(bad)
sub
mov
bound
pop
aas
adc
xchg
push
sbb
mov
stos
loop
xchg
jp
movs
(bad)
out
nop
xlat
ficomp
cmp
int3
(bad)
pop
xchg
lea
fisubr
daa
sbb
aas
xchg
inc
xor
mov
cdq
lods
jmp
stos
sbb
cmp
xchg
xor
mov
cmps
push
out
cmps
scas
push
push
sub
les
jecxz
mov
and
or
lea
test
cld
mov
(bad)
arpl
push
push
repnz
add
lock
hlt
es
jae
xchg
in
out
jmp
mov
mov
mov
xchg
push
leave
mov
call
xor
cmp
inc
stos
xchg
adc
push
xor
or
mov
push
mov
rcl
xchg
test
rcr
xchg
loop
ss
fs
add
pop
cwde
adc
fdiv
ficom
xchg
(bad)
ds
push
lods
jns
cwde
stc
mov
(bad)
test
das
inc
rcl
aas
inc
jecxz
jg
and
pop
mov
xor
mov
push
jbe
pop
scas
sub
jmp
cmp
mov
xchg
(bad)
jmp
xchg
fwait
mov
push
fs
mov
xchg
jbe
cmp
mov
xchg
out
xlat
mov
mov
lahf
enter
xchg
test
es
or
test
ins
add
cmp
and
fs
js
xchg
and
cmp
stos
ret
push
lods
xchg
jmp
and
xor
rcl
movs
gs
push
mov
cwde
adc
ror
cmps
push
mov
xchg
nop
icebp
and
mov
mov
sbb
add
adc
fidivr
cwde
dec
loope
bound
sbb
mov
cmps
cwde
repnz
data16
ss
jno
mov
push
xchg
test
dec
data16
add
movs
or
cmps
repz
xor
shr
and
shl
mov
(bad)
aad
xchg
xor
adc
pop
xchg
cli
xor
ret
xchg
cmps
cld
mov
sub
pop
cmp
xchg
cdq
in
jae
xor
iret
pusha
dec
inc
xchg
les
int3
fwait
and
test
fs
call
popf
dec
test
dec
xor
sub
das
xor
push
xchg
fdivr
cs
or
popf
xorps
pop
cmp
inc
je
pushf
retf
xchg
push
mov
xchg
mov
sub
mov
(bad)
jp
repz
cmp
cwde
aad
sbb
pop
dec
xchg
jno
adc
sbb
cmp
movs
icebp
loopne
hlt
jl
jno
retf
sub
bound
cld
xchg
xor
mov
mov
aaa
dec
mov
(bad)
fsubr
pop
or
jo
sbb
add
xlat
sub
mov
outs
xchg
xchg
mov
bnd
mov
retf
push
psubb
and
aam
adc
aas
xchg
mov
pcmpgtb
pop
pop
fwait
dec
call
jge
fild
push
xchg
(bad)
sub
pop
xchg
xchg
jnp
ret
cmp
push
xchg
mov
aas
push
push
add
sub
sub
add
(bad)
xchg
ret
aaa
jle
jmp
(bad)
dec
cmps
out
sbb
(bad)
xchg
test
or
fst
(bad)
pop
test
lods
cmps
movzx
out
cli
mov
repnz
icebp
aam
out
or
mov
addr16
or
aad
ds
adc
sub
xchg
stos
inc
cs
mov
fwait
jno
div
into
add
je
adc
pop
dec
mov
xchg
jbe
dec
mov
mov
add
xchg
cmp
add
sub
movs
xchg
jb
dec
xor
int3
xchg
mov
cmps
xor
lds
(bad)
jl
mov
push
hlt
aaa
adc
sbb
xchg
dec
inc
add
and
xchg
dec
test
push
movs
adc
nop
inc
and
xor
fcom
mov
dec
mov
adc
fadd
inc
mov
mov
xchg
ret
cmp
retf
xchg
push
add
ficom
out
popf
inc
xor
fisubr
ss
loopne
fcom
loopne
fdiv
xchg
xor
xlat
pop
cmp
lahf
(bad)
out
jle
sar
fwait
jl
dec
addr16
or
cmps
and
cmp
push
mov
mov
xchg
scas
push
jo
mov
hlt
shl
xor
sbb
aam
mov
(bad)
shr
cmp
ds
xchg
test
call
imul
mov
pop
dec
gs
(bad)
rcl
movs
cmps
jl
jle
retf
cmps
xor
adc
xor
jge
pushf
and
jno
xchg
fs
adc
jmp
je
sub
enter
mov
imul
mov
and
shl
lahf
mov
jno
cmp
cmp
shl
gs
dec
sbb
sbb
shl
mov
push
out
mov
leave
sbb
jl
add
je
int3
pop
ficomp
xchg
mov
sub
dec
inc
fbstp
mov
inc
cmp
xchg
(bad)
imul
sbb
sub
icebp
xchg
adc
arpl
stc
dec
adc
mov
pop
push
or
test
fisttp
jno
dec
push
(bad)
fbstp
push
add
data16
jmp
dec
cmp
(bad)
cmps
loopne
jns
dec
out
cs
lds
in
cdq
loopne
je
in
mov
dec
mov
push
sub
cdq
pop
test
mov
loopne
push
out
inc
out
lahf
push
mov
jl
les
shl
jge
pusha
in
mov
(bad)
mov
xchg
shl
retf
cmp
pop
cmp
xchg
fidivr
sbb
loopne
sahf
int
js
mov
mov
pop
sub
sub
cmp
jge
ja
mov
cwde
sub
iret
inc
sar
xchg
out
cmp
xor
loope
test
scas
shl
dec
push
clc
stos
ret
(bad)
std
sbb
movs
pop
sub
pushf
clc
ret
std
aad
int3
mov
xchg
popf
xor
pusha
fsubr
imul
test
or
hlt
aam
dec
mov
dec
pop
popf
push
and
mov
call
loopne
jl
mov
xchg
outs
pop
es
xor
call
cwde
ds
mov
call
lods
call
mov
mov
out
sub
les
ret
mov
adc
scas
adc
(bad)
jmp
jecxz
dec
mov
xchg
mov
cli
popf
ins
xor
xor
jecxz
hlt
mov
aam
imul
add
or
sti
in
mov
loopne
out
pop
xchg
in
aam
repz
push
icebp
int
aad
les
fsubr
cs
gs
adc
jno
sbb
xchg
inc
sbb
fistp
add
mov
jne
bound
jmp
shl
mov
adc
dec
dec
into
in
sub
pop
div
inc
ja
adc
add
dec
adc
sbb
pop
call
rol
pop
lods
xchg
jmp
cdq
and
mov
add
adc
and
xchg
fcmovu
data16
jnp
cmps
jnp
add
iret
xchg
cmp
xor
xchg
fcom
leave
push
push
sbb
jge
into
int
sbb
ret
jg
pop
sahf
push
cmp
sub
dec
push
cmps
repnz
pusha
movs
push
rcr
fsub
rcr
and
xchg
mov
aad
je
inc
cmp
xchg
std
or
out
jl
dec
lods
jbe
punpcklbw
lea
das
mov
mov
hlt
mov
cmp
call
xchg
jbe
ds
push
jge
xchg
stc
mov
inc
jecxz
jle
xchg
jno
leave
pushf
popf
dec
loopne
pmulhuw
cmp
or
xlat
and
jne
dec
je
mov
jle
push
js
in
stos
jl
xchg
push
call
loope
xchg
retf
mov
xchg
cmp
aaa
and
out
(bad)
pop
lods
sub
adc
inc
and
(bad)
in
add
push
ja
dec
add
cwde
add
xchg
and
mov
push
xchg
jmp
mov
jp
push
xchg
in
test
repz
xchg
clc
mov
sbb
(bad)
xchg
call
ins
cdq
and
fidivr
jle
mov
xchg
jmp
or
gs
xor
mov
sub
xchg
jmp
xchg
adc
cmp
mov
inc
fwait
repnz
sub
retf
sti
dec
aam
and
push
xchg
fisttp
fcom
xchg
sbb
enter
lds
xor
fst
iret
ja
adc
ret
scas
add
mov
je
mov
(bad)
int
sbb
bound
stos
(bad)
hlt
adc
addr16
xchg
push
jmp
sub
ins
mov
clc
repz
inc
xchg
ds
sub
push
sbb
icebp
je
mov
push
xor
out
xchg
add
xor
adc
add
sub
xlat
adc
jp
jo
pop
push
sbb
js
pop
popf
(bad)
scas
imul
push
jmp
cld
cmp
mov
int3
cmp
xchg
dec
add
pop
dec
cld
outs
sbb
stos
sub
int
jo
mov
inc
jno
mov
jb
jne
dec
adc
jmp
mov
test
rcr
mov
push
jno
bound
lock
inc
ret
ret
mov
mov
mov
paddd
jmp
int3
and
jge
inc
mov
arpl
retf
int
cmp
xchg
xor
iret
fld
inc
sub
adc
popa
mov
jmp
popa
mov
ss
cld
jp
rcr
icebp
cmp
sub
aad
sbb
xlat
push
push
xchg
pop
mov
cdq
dec
(bad)
adc
enter
inc
pusha
neg
mov
or
jle
mov
stc
xchg
out
je
hlt
sub
int3
nop
movs
cmp
pop
fnstenv
into
xchg
mov
dec
pop
inc
or
push
jno
xor
pop
inc
or
xchg
test
add
sar
push
imul
pop
stos
out
push
adc
xchg
and
jle
pop
xchg
mov
dec
xchg
inc
in
push
aas
inc
popa
jne
xchg
or
xor
xchg
lods
cmp
and
and
pusha
pop
jp
xchg
movs
jle
daa
sbb
xchg
add
dec
out
mov
inc
sub
addr16
(bad)
dec
mov
clc
push
ins
stc
je
sbb
ins
popf
into
das
or
xchg
push
pop
inc
js
mov
mov
call
xchg
push
sub
or
sub
(bad)
xchg
adc
xchg
aaa
retf
ret
out
test
(bad)
sub
mov
stos
(bad)
imul
xchg
daa
das
movs
or
dec
mov
inc
adc
rol
shr
push
fcom
stos
repz
pushf
mov
mov
inc
mov
jmp
mov
int
mov
aad
ds
jnp
sub
in
cmps
jns
xchg
repz
and
jns
aas
fld
loopne
mul
or
mov
ficom
popf
shl
std
cmps
aaa
inc
sbb
dec
lock
fcom
nop
ins
cmp
hlt
mov
mov
dec
mov
and
lds
into
fnsave
lods
icebp
lea
mov
lahf
push
mov
cmp
sbb
cld
in
inc
les
push
hlt
lahf
adc
pop
cwde
inc
gs
xchg
xchg
mov
xchg
xchg
cmc
mov
shl
push
jo
std
in
scas
fdiv
pop
dec
pcmpgtb
xor
dec
add
aam
adc
mov
je
jle
push
jmp
fadd
push
xchg
xor
fst
push
lock
pop
out
mov
pop
dec
or
sbb
jns
cmp
sub
xchg
gs
mov
aaa
or
jg
and
push
ins
das
xchg
inc
add
in
xchg
push
rol
scas
les
xchg
push
cmp
gs
jl
ds
fwait
push
jmp
test
sub
push
jecxz
pop
daa
imul
aam
add
pop
cdq
jle
xor
fs
push
or
xchg
xchg
hlt
sar
mov
xchg
into
test
clc
xchg
pop
call
lahf
mov
mov
pop
inc
xchg
in
pop
sti
or
xchg
jecxz
ss
push
mov
push
xchg
mov
xchg
dec
mov
aaa
xchg
ss
mov
add
data16
nop
adc
xor
xchg
jnp
mov
mov
movs
jmp
aas
pop
dec
rcl
fist
jo
gs
daa
mov
inc
sbb
arpl
cmp
inc
mov
sub
fwait
pop
dec
mov
iret
xchg
cmp
xchg
mov
fadd
xchg
pop
cdq
xchg
pop
xchg
xchg
ud2
mov
lods
ins
sub
xchg
dec
pop
jae
jo
je
adc
xchg
(bad)
int
cwde
xor
xchg
test
loop
mov
movs
mov
pusha
or
push
jmp
sub
add
movs
test
xchg
dec
adc
arpl
push
pop
adc
pop
jo
fs
cwde
movs
rol
or
hlt
leave
xchg
jno
and
and
xchg
dec
mov
(bad)
es
xchg
in
in
shl
fdivr
xor
bnd
pop
cmp
ret
enter
sbb
iret
push
dec
fwait
xchg
mov
and
sub
jg
sbb
xor
sub
ficom
sub
fwait
pop
mov
push
neg
xchg
or
out
xchg
xchg
add
lea
jne
xor
mov
add
and
stos
jmp
mov
xor
mov
jmp
lock
(bad)
adc
push
(bad)
out
pop
sbb
dec
popf
imul
push
mov
(bad)
adc
aas
push
call
rcr
and
popf
mov
pop
adc
test
test
test
mov
mov
fwait
add
and
xchg
hlt
cld
xchg
cmovne
mov
jge
repnz
xchg
cld
mov
aad
jmp
ins
push
in
lods
jae
sbb
sti
and
sbb
push
(bad)
xchg
sbb
mov
int
inc
in
popf
cmp
or
xchg
or
inc
test
popf
cwde
in
je
lea
es
xchg
xchg
lds
rol
pop
xchg
sub
adc
jbe
movs
xchg
sbb
push
cld
out
test
push
jnp
xchg
mov
jno
in
mov
fwait
pusha
push
je
mov
xor
jg
shr
pusha
sub
es
mov
sbb
cdq
push
and
inc
popf
(bad)
fwait
inc
adc
out
lods
pop
or
stos
add
aaa
cmp
xchg
enter
cwde
out
xchg
scas
fs
adc
lahf
xor
inc
mov
pop
push
xchg
push
xchg
xchg
cmp
adc
mov
aam
push
xchg
addr16
int
shl
mov
outs
mov
pop
aad
sbb
cld
xchg
inc
xor
jo
scas
cmps
imul
sbb
aam
xchg
rol
or
ds
cmp
test
mov
mov
retf
sbb
clc
loop
icebp
mov
lock
adc
xchg
fs
sub
fld
xchg
dec
or
ds
xchg
xchg
add
push
xchg
add
movs
mov
test
sti
retf
cmps
pop
xchg
xchg
mov
repz
xchg
cmp
sbb
mov
dec
xor
aam
int3
xor
int3
mov
mov
adc
movs
jl
test
cmc
adc
add
inc
in
and
call
mov
aad
in
mov
out
jle
cmps
push
loop
push
lds
imul
out
or
sbb
in
xchg
pop
cld
sub
repz
rol
xchg
stos
repz
js
xor
xchg
ror
adc
push
clc
or
test
in
mov
push
pusha
loop
mov
pop
adc
ja
pop
pop
loopne
fisub
frstor
mov
xor
sbb
or
mov
retf
loop
cwde
dec
int3
sbb
fcom
and
xchg
xor
adc
sbb
(bad)
mov
ret
mov
test
or
inc
adc
jg
test
clc
mov
ret
dec
in
sbb
jo
out
mov
xchg
jns
(bad)
dec
xchg
hlt
int3
sbb
iret
cwde
add
retf
jnp
adc
jl
cmps
mov
aaa
and
sbb
mov
pop
push
jne
test
lea
xor
or
loop
xchg
sub
or
xor
xchg
popa
xchg
cmps
mov
xchg
repnz
pop
and
gs
add
cmp
xchg
(bad)
cld
jbe
rcr
pop
pushf
adc
loop
lds
xchg
out
jp
jecxz
xlat
and
pop
lock
ret
mov
sub
ss
sub
jp
mov
push
call
cmps
inc
push
enter
lods
xchg
mov
int3
jnp
mov
inc
mov
je
outs
popf
add
push
rcr
mov
xchg
pop
dec
or
int
cmp
xchg
xchg
mov
sbb
or
loopne
and
mov
xchg
mov
sbb
push
stos
std
mov
xchg
dec
fcomip
pop
xor
int3
(bad)
or
mov
mov
test
fist
rcr
dec
je
lock
pop
inc
sbb
xchg
dec
xor
mov
mov
dec
unpcklps
mov
mov
retf
add
xchg
scas
adc
jne
sub
into
cmp
nop
and
add
retf
cdq
push
ins
mov
iret
pop
rcl
jl
fst
mov
push
jp
xchg
das
push
sub
and
xchg
clc
jo
add
cdq
out
push
test
xchg
data16
movs
bound
imul
sbb
adc
dec
push
push
push
test
arpl
test
mov
aam
pop
mov
ret
(bad)
mov
xor
xchg
es
imul
cmp
add
push
pop
xor
shl
xor
in
dec
arpl
xchg
push
xchg
xorps
mov
sub
and
mov
out
out
fwait
adc
int3
ret
outs
fistp
out
sbb
sub
inc
mov
or
jb
adc
(bad)
or
vcmpps
arpl
adc
jg
repz
xchg
pop
bound
mov
loope
or
mov
mov
jmp
push
xor
outs
aad
scas
xchg
das
mov
push
fcom
imul
push
xor
xor
xchg
jl
movs
xchg
je
fbstp
adc
outs
pop
sti
and
cmp
mul
pop
jecxz
popf
xor
lahf
repnz
mov
or
xlat
mov
je
jge
or
mov
outs
xlat
xchg
xchg
mov
mov
cld
or
(bad)
push
jmp
xchg
adc
pop
mov
ins
sbb
sbb
xchg
fs
cwde
cmp
out
pop
add
mov
mov
pop
xchg
mov
inc
ins
xchg
adc
mov
or
pushf
xor
jl
mov
xchg
in
or
call
dec
cwde
lods
xlat
aas
js
mov
mov
stos
out
out
push
inc
mov
fistp
fst
gs
lds
imul
in
(bad)
dec
adc
ret
and
jl
out
not
bound
mov
push
cmp
int3
call
pop
and
and
repz
xchg
mov
test
ins
std
pop
pop
cmc
ins
mov
jmp
cpuid
call
neg
jecxz
into
fwait
pop
dec
push
mov
popf
fdiv
jl
in
push
ficomp
xor
pop
dec
iret
cld
stos
pop
enter
test
mov
jnp
xchg
and
test
adc
test
(bad)
retf
sbb
xor
xor
icebp
and
shr
mov
adc
imul
push
push
mov
js
xchg
std
xchg
out
xchg
pop
shr
rol
les
add
clc
fnstcw
jmp
movs
mov
xchg
fwait
lods
test
outs
pop
(bad)
mov
fbld
xor
repz
pop
(bad)
arpl
pop
mov
retf
dec
je
mov
leave
popf
int3
xchg
fimul
jmp
test
cmps
shr
call
lea
xchg
jne
mov
and
xchg
fs
cli
int
or
xchg
dec
popf
lock
nop
xchg
scas
ficom
ret
rcl
cdq
jmp
fdivr
mov
xchg
hlt
jb
nop
and
jne
jae
leave
mov
pop
lods
or
xchg
push
jmp
push
inc
ret
pop
xchg
cmps
jl
jbe
(bad)
call
loop
mov
out
mov
pop
jecxz
xor
mov
xor
fs
ds
popa
mov
dec
ins
aam
push
call
test
push
fwait
or
cmp
test
int
repnz
jo
adc
das
cdq
mov
mov
inc
jnp
je
mov
mov
cld
mov
stos
dec
mov
sahf
stos
ins
movs
xchg
pop
jnp
xchg
sbb
cli
add
xchg
test
lods
cmp
call
xchg
ss
pusha
sub
popa
rcl
ret
mov
inc
jno
push
and
test
int3
xchg
sbb
imul
rcl
cwde
xchg
cmc
enter
into
dec
(bad)
arpl
or
rol
inc
outs
(bad)
xchg
jb
dec
xchg
jle
xchg
rcr
jp
push
xchg
xchg
jno
mov
xchg
fdivr
mov
cmp
xchg
mov
dec
or
js
iret
and
(bad)
cmp
in
cwde
xchg
leave
cs
mov
mov
(bad)
fdiv
push
push
adc
xchg
add
and
cdq
xor
cli
dec
adc
fcomp
inc
adc
xchg
icebp
fdiv
or
push
shl
mov
cmp
push
xchg
enter
push
mov
mov
test
inc
pop
fwait
dec
mov
(bad)
cmp
pop
mov
and
xchg
(bad)
sub
lods
mov
scas
xchg
xchg
gs
sahf
adc
adc
pop
cmc
or
pop
(bad)
aam
inc
mov
inc
movs
out
xchg
pop
scas
hlt
ins
or
push
ret
or
ret
stos
xchg
xor
mov
add
xchg
xchg
sti
sub
stos
xor
dec
xchg
stc
out
mov
mov
add
xor
imul
add
sbb
shl
adc
repz
loopne
cli
pop
xchg
inc
adc
or
adc
xchg
movs
gs
inc
xchg
jb
dec
jl
xchg
fcom
outs
fucom
xchg
pushf
scas
xor
idiv
mov
adc
xor
pop
jb
into
and
inc
jnp
xchg
push
(bad)
mov
sbb
push
jp
or
inc
cmp
or
dec
or
test
(bad)
retf
and
sbb
sub
gs
mov
xchg
daa
adc
jno
test
stos
pop
push
sub
out
inc
lahf
pushf
sub
mov
pop
xchg
data16
adc
and
in
xchg
or
mov
jmp
dec
jae
dec
push
xor
ss
leave
ins
lahf
and
cli
test
mov
or
mov
cli
add
mov
sbb
xlat
or
add
xchg
das
js
movs
test
hlt
sahf
xchg
push
stos
sbb
shl
or
push
jae
pop
cmps
xchg
ror
jb
gs
sub
cmp
xchg
icebp
inc
and
mov
push
or
cmp
cmp
jle
ret
jae
pop
int
in
xor
adc
mov
mov
repz
imul
lds
mov
popf
xchg
das
rcl
xchg
int3
jb
call
adc
cmp
xchg
or
mov
xor
ja
jge
movs
(bad)
pusha
sub
xchg
scas
xchg
adc
push
ret
sub
bound
retf
xor
(bad)
mov
push
nop
push
lock
call
jbe
sub
adc
test
ja
jo
aaa
neg
cmp
push
mov
je
adc
mov
mov
je
sbb
adc
mov
inc
bound
dec
lods
ss
lock
jns
xor
dec
add
lahf
sub
mov
dec
xchg
mov
dec
pop
(bad)
xchg
mov
cmps
cmp
add
sub
push
mov
adc
iret
les
cmp
mov
xchg
mov
cmp
adc
mov
in
jmp
imul
jno
pop
pusha
inc
xchg
int
retf
nop
mov
sbb
sub
mov
leave
lahf
push
dec
push
jecxz
rcl
aam
xor
add
mov
mov
lods
jge
pop
lahf
fwait
push
and
adc
dec
test
add
imul
xchg
ret
pusha
and
jne
cmp
je
xchg
mov
jae
sub
xor
test
jo
cmp
pop
lahf
push
mov
mov
mov
je
test
ret
adc
xchg
inc
enter
std
push
xchg
sub
or
xor
mov
jno
xlat
int
sub
cld
fidivr
push
xor
aaa
iret
mov
jp
fiadd
adc
aam
or
jecxz
fcmovb
push
sbb
inc
mov
inc
mov
add
mov
cwde
jmp
adc
lock
stc
shl
fwait
push
push
push
jp
push
xchg
retf
jnp
idiv
rol
fbstp
add
inc
cwde
or
outs
test
push
js
inc
mov
fbstp
push
and
ret
xchg
arpl
pop
push
cmp
jno
int3
out
xchg
sahf
sub
mov
jb
test
stos
xchg
adc
cld
je
or
fs
xor
lea
xchg
or
mov
mov
dec
test
xchg
out
sbb
pop
shl
sbb
jmp
mov
lods
fimul
ror
mov
mov
mov
jle
fild
adc
sub
imul
call
pop
pop
loopne
gs
cmps
in
adc
pushf
jmp
xchg
xchg
loope
lea
pop
vrsqrtss
call
out
dec
jmp
xor
hlt
xchg
aad
out
clc
fcomp
pushf
inc
inc
pusha
les
sar
shl
push
dec
rol
mov
mov
dec
ins
push
sbb
mov
jge
sti
xchg
sbb
daa
adc
cmps
cs
mov
ins
dec
movs
fwait
jl
jns
xchg
push
in
ret
sub
xchg
and
aas
mov
xchg
pop
sub
and
xchg
es
jns
inc
je
stos
retf
mov
xor
ins
dec
pop
push
or
pop
mov
jle
out
cs
outs
aaa
or
lahf
sub
daa
mov
mov
push
xor
cli
ins
cmp
fwait
sub
xor
mov
jne
(bad)
sti
mov
ins
jmp
add
gs
fisub
adc
retf
inc
js
xchg
in
test
or
cmp
jbe
sub
cmp
sub
dec
or
sub
xchg
nop
dec
mov
dec
cwde
out
test
aam
add
outs
xchg
xchg
dec
cmovne
jo
dec
mov
fwait
imul
imul
mov
mov
enter
rep
and
sub
pop
mov
cli
jno
retf
xchg
ja
in
xor
imul
and
and
cwde
lds
popa
je
aaa
call
stc
les
imul
jp
test
adc
xchg
cmc
or
mov
mov
dec
arpl
xchg
pop
cmp
sub
xchg
jbe
mov
mov
or
or
xor
call
pop
aam
push
test
mov
xchg
loope
cmp
mov
mov
mov
mov
push
inc
movs
cdq
push
cwde
dec
xor
add
xchg
daa
push
es
mov
pop
test
aas
pusha
jne
cli
mov
enter
or
adc
push
sub
mov
sub
cmc
fistp
inc
imul
movs
cld
mov
out
dec
sbb
mov
add
mov
lahf
cmps
jmp
out
aaa
aam
ret
hlt
int3
sahf
aad
cmps
sub
enter
imul
and
xchg
push
push
ret
icebp
mov
and
mov
mov
loopne
imul
push
mov
xchg
pop
dec
mov
(bad)
ficomp
adc
mov
and
xlat
in
jne
xchg
push
or
mov
loopne
cmp
mov
push
lock
sbb
mov
sti
xchg
dec
clc
adc
add
stc
jb
shr
dec
dec
push
je
mov
nop
sub
xchg
adc
xchg
das
pop
jle
lahf
fcomp
and
hlt
(bad)
xor
inc
dec
pop
aam
add
sbb
int3
test
inc
jle
sbb
jnp
or
inc
push
mov
add
sahf
inc
jns
leave
mov
xchg
daa
ja
pop
jl
and
retf
lock
mov
(bad)
(bad)
(bad)
sbb
stos
add
xchg
sete
retf
sub
shr
int
adc
shl
push
jmp
xchg
out
stos
xor
fwait
jle
inc
sub
aaa
cli
cmp
fdiv
add
adc
lock
cmp
mov
sbb
inc
xchg
xchg
js
aad
ins
dec
xchg
dec
ja
xor
and
lea
aad
out
push
dec
fsub
sti
les
jmp
inc
mov
je
sbb
cmps
imul
mov
and
xchg
mov
movs
mov
push
sub
xchg
ds
js
fbld
je
inc
jb
in
jp
cmp
pop
fsubr
mov
(bad)
aad
cdq
dec
sahf
inc
in
in
cmp
bound
push
xchg
pop
jle
add
push
and
fbstp
xchg
and
sbb
bsf
jle
fwait
adc
int
sti
lahf
mov
aas
mov
shl
(bad)
push
xor
leave
dec
sbb
loopne
mov
arpl
mov
shl
mov
addr16
jbe
(bad)
adc
mov
movs
int
shl
or
push
xchg
stc
lds
xchg
(bad)
push
xchg
lods
les
dec
hlt
int3
jns
xchg
popf
and
push
mov
push
xchg
lods
jne
and
test
add
push
shr
xchg
mov
mov
cmps
(bad)
(bad)
mov
inc
jns
jg
push
sar
fcom
into
inc
rcr
push
push
aad
inc
mov
xchg
(bad)
adc
push
mov
lea
(bad)
in
add
mov
call
push
jmp
cmp
fisub
ins
call
mov
cmps
sahf
aam
and
test
mov
cmp
sbb
int3
sbb
adc
sbb
adc
push
cmc
mov
push
movs
call
and
xor
imul
fild
mov
pop
xchg
loope
icebp
test
push
xchg
push
out
add
cs
cwde
add
push
xor
add
nop
call
sbb
inc
sub
jecxz
es
lahf
test
lds
imul
xchg
scas
cwde
fcomi
xchg
push
fs
adc
xcrypt-ecb
cmps
mov
loop
aam
cmp
mov
lds
sbb
hlt
test
jo
push
cmps
ins
inc
into
dec
pop
pop
scas
repz
scas
jl
(bad)
pop
add
pop
test
sbb
mov
cmp
mov
xor
add
mov
or
push
or
sbb
push
std
loopne
sbb
icebp
cmp
mov
adc
xchg
push
in
iret
mov
fwait
xchg
stos
pop
dec
bswap
sahf
fild
sbb
xchg
mov
jecxz
adc
int
shr
push
(bad)
sbb
jbe
sahf
repz
sbb
mov
out
sbb
xor
adc
loop
xor
hlt
mov
cli
jg
movs
and
jl
sub
xchg
das
lods
mov
and
lahf
je
push
xchg
sub
mov
sbb
and
xchg
dec
push
loop
cmc
xor
sar
pop
dec
jo
xchg
outs
or
daa
pusha
push
aas
mov
mov
icebp
mov
ja
adc
int
xchg
call
inc
add
retf
dec
xchg
loopne
fmul
inc
jp
xchg
adc
mov
sub
inc
xchg
push
sbb
jp
push
jge
rcl
dec
ret
mov
stos
and
add
and
(bad)
jp
pushf
xchg
xchg
fsubr
lahf
or
xchg
loopne
inc
out
js
or
mov
pop
mov
jns
pop
sbb
loop
call
fwait
cmps
inc
or
aas
arpl
repz
adc
inc
xchg
mov
scas
les
mov
popf
jae
add
xchg
les
pop
(bad)
jo
pop
xchg
mov
cmps
fistp
pop
jns
xor
or
mov
and
dec
xchg
jb
std
mov
aaa
ret
mov
fcmovbe
int3
xchg
stc
sub
jb
cmp
mov
inc
repnz
inc
mov
sbb
xchg
retf
xor
sbb
or
out
push
lods
je
dec
or
adc
and
clc
lods
xchg
xchg
or
mov
arpl
aam
sub
and
jmp
int3
mov
inc
ds
jl
sub
fwait
pusha
addr16
mov
dec
rcl
stc
push
inc
inc
xchg
mov
xchg
mov
mov
hlt
aas
xchg
mov
nop
sub
in
call
jne
pop
retf
pop
sub
add
mov
xchg
jmp
inc
mov
mov
xor
mov
add
mov
data16
mov
cmp
pop
fld
test
push
xchg
pop
outs
mov
mov
dec
jmp
inc
add
cmp
outs
add
fwait
xor
ret
xlat
aam
sahf
jns
xchg
and
in
in
xchg
mov
pop
arpl
fwait
cmc
cmp
hlt
xor
jo
mov
mov
mov
std
adc
or
push
xor
xchg
test
dec
xchg
and
jo
jne
sti
cmp
mov
xchg
push
rcl
movs
dec
or
fidiv
xor
movs
add
xchg
(bad)
cmp
out
mov
mov
inc
xchg
rcr
retf
mov
cs
cmc
push
mov
aam
call
mov
xchg
or
cmps
jge
rol
shr
mov
jne
wbinvd
lahf
mov
ret
outs
hlt
fidivr
fs
lods
adc
mov
mov
into
inc
sti
adc
in
jbe
xchg
pusha
jmp
imul
adc
fwait
test
push
xor
movs
repz
ret
xchg
in
xor
pop
pusha
pop
iret
xchg
inc
fst
pop
das
or
xchg
adc
into
les
jae
sahf
add
std
retf
xor
pusha
enter
rcl
pop
mov
popa
jge
push
xlat
mov
out
neg
sar
mov
daa
std
pop
mov
sti
lea
sbb
shr
xchg
sub
and
aam
mov
xchg
mov
jno
sub
jle
xchg
mov
outs
jmp
sti
fadd
jns
or
sbb
call
pop
and
cmps
clc
shl
popf
dec
xor
mov
push
stos
into
pop
lock
xchg
push
icebp
cmc
sbb
and
loopne
test
imul
push
sub
xchg
jmp
fstp
xchg
push
mov
ret
push
lock
or
xchg
pop
popf
pop
test
jno
ss
push
call
out
cmp
adc
cmp
or
adc
xchg
dec
shl
hlt
imul
lock
xchg
adc
jge
mov
and
cmps
adc
sbb
push
mov
xor
data16
cmp
icebp
xor
dec
mov
clc
cli
mov
jmp
stc
outs
call
cmp
xchg
sbb
fst
adc
pop
jo
sub
out
jg
pop
pop
jbe
xchg
lods
popf
sub
(bad)
jo
xchg
cmps
sbb
mov
mov
rcl
and
push
aam
in
inc
jno
loop
lahf
lods
mov
js
add
xor
(bad)
xchg
xchg
aas
xchg
ja
into
fs
dec
popf
repnz
fcom
(bad)
adc
sbb
outs
stc
mov
hlt
xchg
dec
inc
rol
ja
xchg
lea
inc
sbb
jnp
mov
aam
pushf
pop
aaa
sahf
popf
stos
fwait
adc
loope
jbe
or
and
mov
dec
popa
mov
and
mov
dec
or
repz
lds
xchg
call
jno
loope
xchg
and
mov
in
int
or
dec
pop
pop
add
inc
sub
and
arpl
xlat
aaa
test
out
or
adc
and
in
xor
stc
int
mov
or
aas
imul
xchg
addr16
cs
movs
ins
xchg
xchg
xor
dec
lea
in
adc
sub
outs
xchg
pop
mov
int
xchg
ins
sub
fst
push
adc
sbb
xchg
retf
mov
dec
pop
mov
mov
adc
jns
aam
mov
xchg
cmc
sub
in
push
xchg
and
ins
pop
pusha
mov
cmp
rcl
ds
scas
aam
mov
call
and
cmc
adc
adc
into
xlat
xchg
mov
push
test
mov
xchg
jne
mov
jns
xor
inc
mov
adc
in
hlt
jecxz
loop
ins
xchg
xchg
(bad)
mov
xchg
stc
rcr
pop
xchg
es
inc
int
pop
adc
sbb
cmp
call
(bad)
sub
jne
xchg
xlat
xchg
test
mov
xor
mov
xor
(bad)
adc
jge
pop
cdq
dec
inc
out
add
mov
sbb
int
add
stc
arpl
mov
scas
sub
xchg
push
push
fisubr
movs
adc
jle
xchg
rcr
aas
xchg
jge
mov
xchg
loopne
(bad)
stos
cmc
xor
(bad)
out
jg
ins
jl
inc
stos
mov
xchg
mov
es
adc
pop
adc
sahf
cmps
mov
cld
xchg
sbb
cmp
cmps
cmp
push
or
lods
lds
inc
xchg
dec
je
(bad)
xchg
fistp
ret
fwait
pop
mov
xchg
fisttp
dec
test
leave
cwde
adc
fcom
hlt
or
sub
test
xchg
inc
popf
bound
sub
mov
xchg
pminsw
call
adc
aas
cmp
fwait
mov
stc
xchg
repnz
push
mov
xchg
xor
cmp
lock
inc
mov
push
add
xchg
cmp
retf
push
xchg
adc
int
inc
sahf
inc
fwait
mov
add
js
inc
test
ins
inc
call
xchg
jne
addr16
call
cdq
int
xor
hlt
mov
jnp
fist
xor
mov
or
mov
mov
push
cmp
bound
push
(bad)
xchg
in
fst
emms
loope
aaa
mov
jae
pop
xor
xchg
sar
jmp
lahf
jmp
jae
les
cmp
and
cmp
arpl
dec
sar
cmp
test
and
xchg
arpl
bound
xchg
test
retf
and
mov
xchg
jne
xchg
lahf
mov
cdq
rcl
xchg
pop
mov
mov
xchg
scas
fstp
inc
xchg
cmps
out
es
sub
sti
mov
aam
jp
jmp
or
gs
icebp
xchg
lea
sbb
cmps
dec
jmp
sub
or
ins
push
hlt
pop
fcomp
stos
ins
add
aad
(bad)
sbb
je
mov
outs
gs
adc
xchg
lock
loopne
cli
in
inc
cmps
in
dec
ins
pop
loope
mov
or
ret
sbb
rcr
in
mov
inc
rcl
adc
mov
jmp
xor
popa
push
push
cmp
xor
pushf
lea
test
movs
lahf
adc
popf
aad
adc
call
or
outs
xchg
outs
sti
out
mov
retf
shl
aad
and
test
mov
lahf
and
adc
ins
inc
std
mov
inc
clc
repnz
mov
push
outs
xchg
(bad)
inc
(bad)
push
test
jecxz
movs
in
jno
mov
and
into
mov
cdq
es
add
mov
xchg
cmp
pop
mov
pop
je
and
jle
sbb
in
in
das
push
xchg
cmovle
fcmovnbe
fwait
cmp
xchg
mov
jnp
lea
push
mov
(bad)
ds
sbb
loope
out
xor
fwait
xchg
leave
push
jmp
mov
fisttp
mov
pusha
lahf
dec
enter
xor
push
or
xor
jle
sub
lea
add
mov
aam
pop
enter
sbb
aaa
push
ret
test
and
jge
(bad)
mov
cs
sub
and
nop
xor
dec
mov
ret
and
rcl
movs
and
push
(bad)
mov
sub
mov
xchg
mov
xor
outs
sbb
sbb
cmp
aaa
repz
mov
jb
pop
push
(bad)
dec
fwait
mov
dec
pop
push
scas
jecxz
jge
fsub
cdq
mov
and
mov
xor
outs
inc
mov
push
pop
sub
add
dec
push
adc
or
push
jg
xor
aam
fcom
sbb
jp
push
nop
jmp
sub
xchg
push
add
xchg
(bad)
pop
mov
xchg
cmp
xor
xchg
and
lds
mov
or
lahf
sub
xchg
ret
xchg
or
push
aam
sub
mov
or
xchg
xchg
and
sbb
lods
rcl
sub
ja
and
retf
das
test
sub
(bad)
dec
jecxz
cwde
popa
sbb
mov
jmp
std
or
jae
mov
mov
daa
add
shl
lods
add
adc
dec
fdivr
xchg
xchg
add
mov
mov
rcr
mov
mov
mov
push
inc
rcl
je
inc
sahf
xchg
unpcklps
call
aad
aam
xchg
or
pushf
fild
xchg
add
ins
(bad)
(bad)
pop
adc
mov
sbb
rcl
je
fwait
sub
outs
aam
in
xchg
push
cwde
call
ret
int
pop
lock
jns
std
(bad)
sbb
enter
mov
dec
nop
xchg
add
add
call
pop
mov
mov
out
(bad)
lods
sub
je
inc
into
sub
sbb
ds
mov
xor
jo
nop
ss
mov
clc
push
test
adc
mov
aam
xchg
add
xchg
imul
jge
add
scas
jl
(bad)
mov
adc
mov
pop
cmc
pop
stos
(bad)
fidivr
adc
sub
sbb
jg
pop
int3
mov
pop
sbb
loopne
stos
mov
cmp
popaw
mov
adc
sbb
and
std
jo
sub
add
icebp
out
cmps
xchg
and
mov
loopne
sub
std
bnd
sbb
fstp
cwde
cmp
sub
sub
data16
in
lods
mov
iret
ret
sbb
or
stc
cmps
outs
mov
jg
cmp
xor
push
pop
dec
mov
int3
out
xchg
adc
sub
push
xchg
and
sbb
mov
inc
mov
cmps
scas
xchg
addr16
mov
dec
call
dec
stc
mov
mov
loopne
mov
jge
call
cmc
inc
inc
sbb
clc
sti
xchg
imul
jae
test
xchg
mov
sbb
push
les
leave
test
mov
inc
mov
cmp
aad
push
inc
jb
mov
sub
je
sti
inc
sbb
adc
sbb
xchg
xor
in
mov
jno
fsub
mov
ins
add
pop
sub
fisubr
dec
push
(bad)
iret
push
fidiv
int3
mov
icebp
rcr
daa
cmc
push
adc
fbstp
mov
pop
cmps
xchg
inc
mov
hlt
mov
rcl
xchg
fdiv
mov
ret
sbb
hlt
jmp
xchg
xchg
xlat
hlt
out
pop
outs
mov
or
mov
scas
(bad)
push
adc
or
adc
or
mov
cwde
dec
add
and
adc
mov
mov
repz
sar
scas
daa
mov
in
mov
xchg
push
fwait
push
pop
js
seta
adc
adc
data16
xchg
xor
sbb
lock
cwde
es
(bad)
push
xchg
mov
adc
pop
test
inc
fnstcw
add
and
imul
(bad)
jnp
pop
outs
test
dec
sar
adc
mov
loop
sub
mov
mov
add
movs
sbb
xor
sahf
sub
jge
fcomp
inc
lea
out
ret
mov
sahf
adc
vmread
imul
sti
mov
xchg
hlt
bound
popf
xchg
add
add
repz
adc
mov
cli
lods
jl
xchg
push
out
sub
xchg
xchg
adc
pop
or
sub
pusha
outs
mov
or
jmp
sub
pop
pop
ins
ror
inc
xchg
cli
lods
sahf
push
xor
pushf
in
adc
push
test
repz
ja
jge
jmp
mov
aam
es
mov
xchg
je
xchg
and
xchg
dec
lods
xor
int3
or
ficom
sti
xchg
and
sub
retf
popf
bound
lock
adc
xchg
fld
cmc
mov
lods
xor
cdq
add
les
push
xchg
sbb
sub
loope
in
inc
xor
push
inc
xchg
movs
sar
or
jp
shl
(bad)
jne
mov
bound
xchg
test
dec
scas
cmp
std
xchg
adc
and
xor
xchg
retf
cmp
xchg
rcr
js
lods
sbb
or
adc
pop
(bad)
cld
xchg
cli
pop
int3
xchg
cmp
xchg
outs
sbb
sub
mov
mov
push
mov
add
pop
cs
jbe
ret
(bad)
or
loop
cmp
mov
add
popa
cld
scas
sub
add
mov
or
xchg
push
retf
cs
repz
xchg
rol
xor
sub
int3
ror
shl
les
aam
repnz
xchg
jge
jno
fstp
mov
mov
in
xchg
cmp
test
sub
ret
jl
and
mov
mov
ds
enter
adc
test
sbb
xchg
out
lds
test
stos
xchg
in
cmp
mov
xchg
push
and
icebp
jp
xchg
call
imul
fwait
in
sbb
movs
sbb
inc
rcr
mov
push
xor
push
jmp
bound
out
xchg
cmps
mov
xor
mov
adc
and
xchg
dec
add
pop
inc
xchg
mov
cmp
lea
adc
xchg
aad
jb
outs
stos
xor
sahf
inc
sub
xchg
fadd
ficom
cmp
adc
call
pop
sub
mov
je
lahf
and
retf
xchg
xchg
jecxz
mov
and
shl
mov
ss
inc
or
rol
sub
push
mov
jmp
xor
xchg
stos
push
jp
nop
adc
xor
xchg
scas
and
cmc
xchg
mov
xchg
inc
or
pop
cmp
sbb
stos
adc
mov
pop
rol
inc
jmp
push
aas
jnp
xchg
push
aaa
xchg
(bad)
xchg
mov
frstor
sub
xor
jge
loopne
cmp
mov
(bad)
(bad)
addr16
xchg
aas
out
xchg
push
outs
out
cmps
iret
xchg
jp
cli
mov
and
mov
xor
sbb
jp
cs
mov
dec
add
idiv
adc
loope
or
jbe
mov
xchg
adc
ins
ret
repz
out
arpl
xor
test
xchg
aam
push
jns
jle
dec
inc
fwait
dec
imul
sti
sbb
xchg
jecxz
popa
in
test
xchg
ins
mov
fisttp
test
mov
xor
and
mov
repnz
cld
mov
imul
add
xchg
adc
int3
dec
je
xchg
out
jae
cli
jo
xchg
test
ins
pop
xchg
xor
ror
and
xchg
cmp
mov
popf
lods
xchg
sbb
stc
add
lds
cli
stos
sub
xchg
cmp
xor
test
xchg
and
jge
mov
inc
cmp
fist
scas
rol
sbb
test
mov
xchg
sub
mov
inc
sbb
jo
hlt
jae
mov
adc
xchg
xor
int
xchg
test
push
lock
mov
mov
out
xchg
retf
pop
mov
mov
push
xchg
fs
cmp
push
dec
movs
mov
jae
les
in
mov
pop
inc
out
pop
jge
xchg
iret
jmp
mov
mov
mov
xchg
loope
cdq
mov
adc
or
in
sub
aaa
fwait
js
mov
sahf
shl
call
adc
sub
and
jp
sbb
in
ins
jg
adc
cmps
or
jle
and
popf
xchg
in
sbb
pop
push
aas
push
xchg
stc
in
test
or
repnz
xchg
hlt
out
or
outs
mov
sbb
and
into
xchg
(bad)
out
jbe
aas
scas
pop
mov
pop
mov
bound
push
inc
test
je
setbe
mov
inc
sar
cdq
xchg
push
push
xor
adc
or
cmc
fdivr
xchg
(bad)
cmps
ret
jge
shl
inc
xor
out
and
ss
mov
data16
fmul
pushf
jl
icebp
call
inc
fild
repz
movs
mov
dec
pop
sar
iret
jge
ret
jl
iret
sub
lea
movs
repnz
popa
mov
or
(bad)
and
and
adc
jmp
in
nop
and
push
jge
sbb
(bad)
cmps
lods
test
iret
out
test
or
sti
in
push
and
inc
jns
push
loopne
retf
lahf
mov
xchg
into
and
ret
(bad)
or
push
xchg
push
cmps
xchg
xchg
mov
test
pop
in
pushf
scas
jge
sar
loop
les
lods
inc
jg
call
add
shl
fs
cdq
sub
outs
das
pusha
push
jecxz
jmp
rep
inc
cmps
gs
in
lea
scas
loopne
add
ret
retf
rcl
jge
stc
adc
jmp
aad
mov
push
jge
jg
pop
push
pop
jne
rol
pop
enter
xchg
sar
mov
pop
xchg
ret
es
push
sub
lods
fdiv
mov
jmp
sbb
jbe
js
jge
adc
push
out
dec
add
dec
pop
xchg
sub
loope
imul
out
jle
or
sub
movsx
push
out
repz
pushf
je
adc
sub
(bad)
out
cmp
and
repnz
adc
fist
mov
xlat
and
xchg
pop
inc
cmps
or
stos
cmp
jmp
cmps
clc
adc
out
arpl
nop
pop
cdq
jl
mov
(bad)
sbb
popf
ror
stc
adc
aam
adc
push
cld
retf
stc
adc
cmps
(bad)
cwde
into
ins
xor
jmp
adc
and
sub
neg
fnstenv
repz
xchg
xchg
test
pushf
sbb
xchg
dec
push
retf
push
je
mov
push
add
mov
faddp
jb
pop
mov
xlat
jae
or
jl
mov
xchg
mov
fld
jo
popa
leave
ror
xchg
inc
out
lea
add
push
pushf
push
xor
sbb
pop
jno
mov
sar
xchg
sahf
jnp
cmps
and
xor
fcom
xchg
sub
push
mov
xchg
sub
enter
or
xchg
sbb
push
hlt
lock
and
pop
add
repz
rol
jp
xchg
push
and
mov
xchg
in
dec
jbe
sbb
cmps
ds
pop
jl
xchg
xchg
mov
dec
xor
pop
aas
(bad)
sar
cmp
push
mov
inc
sub
inc
push
fld
adc
mov
shl
(bad)
jl
dec
xchg
sbb
ins
xchg
inc
icebp
mov
and
xchg
in
pop
or
cmp
mov
(bad)
test
add
xchg
leave
add
adc
pop
or
inc
(bad)
test
and
xchg
idiv
ret
cmp
fcom
call
or
popa
mov
xor
add
ja
imul
xchg
mov
popa
xchg
jl
bound
mov
add
pop
and
iret
jl
xchg
loop
xchg
jb
shr
jle
movs
into
std
sbb
mov
xchg
mov
scas
sub
out
mov
jecxz
xchg
fstp
jno
sbb
imul
nop
in
mov
lahf
push
xchg
fwait
or
pop
fs
mov
xchg
cmp
in
std
(bad)
fwait
movs
cmp
dec
mov
rcl
sti
or
push
sbb
cmps
xchg
cmps
pop
stos
mov
hlt
push
pop
scas
adc
inc
in
xchg
(bad)
jg
dec
pop
sbb
(bad)
(bad)
je
pop
xchg
leave
mov
(bad)
mov
push
xchg
push
ds
cmp
xor
xchg
inc
cmp
ja
jg
pop
fcomp
icebp
xchg
hlt
lods
mov
clc
pop
scas
(bad)
xchg
iret
test
sbb
aam
outs
enter
jge
mov
pop
cdq
stos
and
fucomi
jmp
mov
mov
and
mov
aam
inc
adc
sbb
cmp
push
or
or
shr
sbb
dec
cmovo
nop
iret
js
inc
lods
cdq
lods
mov
jl
push
cld
pop
cwde
mov
lock
imul
(bad)
jmp
xor
jbe
xchg
scas
xor
out
xchg
sub
or
loop
adc
adc
in
mov
mov
cmp
fs
loop
(bad)
push
mov
imul
mov
push
jge
sub
mov
test
mov
cdq
add
pop
fidiv
int3
jle
mov
and
loop
sti
jo
outs
xor
pop
and
push
cld
push
mov
mov
push
xchg
or
cmp
pop
or
jno
or
iret
mov
(bad)
std
test
dec
dec
not
jo
test
mov
int3
nop
addr16
sbb
jge
xlat
lea
cmp
mov
je
add
je
mov
out
in
in
adc
pop
jno
adc
movs
fild
cwde
mov
fwait
movs
and
inc
pop
xchg
xchg
sub
and
jl
cmp
repnz
xor
les
dec
mov
xlat
inc
inc
fsubr
jmp
sub
imul
(bad)
loopne
mov
cld
xchg
push
and
aaa
push
adc
icebp
pushf
add
mov
fwait
outs
ret
call
mov
inc
push
scas
xchg
cs
jmp
movs
xchg
ss
in
sub
jge
dec
cdq
daa
sbb
push
mov
out
es
out
aaa
dec
mov
mov
jl
(bad)
sbb
xchg
or
dec
fcom
sbb
mov
mov
sbb
aas
pinsrw
cmp
mov
xor
jl
push
ja
dec
cmp
in
cli
jnp
aad
xor
jl
jno
jge
mov
(bad)
loopne
in
cmps
(bad)
aas
pusha
rcl
hlt
and
cld
dec
lods
xor
dec
jle
cmp
cmp
ret
jbe
repnz
or
jge
daa
pop
mov
xchg
sub
jg
nop
adc
xchg
pop
or
xchg
arpl
dec
add
aas
and
xchg
push
mov
dec
push
xchg
outs
int3
pop
push
into
je
mov
pop
cmp
daa
lods
push
add
mov
adc
repnz
sub
push
jns
pop
jecxz
cmc
mov
mul
inc
fndisi(8087
cs
jecxz
inc
jecxz
push
sar
adc
push
ds
push
lds
adc
aad
mov
mov
cmps
sub
sub
adc
jb
jae
out
push
push
hlt
popf
ja
sahf
jno
jmp
mov
cmp
dec
mov
or
pop
neg
jns
ficom
jmp
mov
xchg
fdivr
xchg
dec
xchg
push
bound
loope
pop
(bad)
fisttp
test
pop
sub
xchg
das
jmp
mov
jb
adc
mov
dec
ds
jmp
mov
in
inc
xor
cmp
cdq
je
shl
xchg
repz
rol
adc
nop
jle
das
aam
test
shr
cmc
in
or
lahf
mov
xchg
cld
xchg
in
lods
mov
mov
enter
and
loop
call
idiv
xchg
repnz
icebp
enter
xchg
xor
or
jo
or
daa
dec
mov
lods
test
xchg
push
adc
inc
xor
mov
jns
jmp
fistp
das
iret
and
pop
xchg
rcl
int3
pop
(bad)
enter
add
mov
xchg
adc
add
jmp
icebp
test
push
xchg
jb
std
leave
das
idiv
pop
shl
push
xchg
sbb
push
dec
mov
shl
dec
add
xchg
pushf
push
out
bound
jo
gs
sub
xchg
es
mov
xchg
or
or
lgs
cmc
ret
and
je
fs
xor
add
xchg
xor
sbb
pusha
jg
ins
arpl
lods
jl
cmps
xchg
stc
rcl
xchg
xor
sar
idiv
add
popf
cmc
xchg
mov
cmp
sahf
xchg
iret
je
ins
cdq
adc
das
xor
dec
push
xchg
sbb
loop
bnd
lock
jb
cmp
(bad)
mov
adc
push
sbb
pop
pop
jmp
aas
loop
enter
pop
iret
ret
xchg
push
cmps
xor
lds
rcr
or
xor
bound
xchg
test
scas
loop
xchg
mov
cmp
sub
pop
xor
adc
xor
mov
cwde
jl
loop
push
push
test
pusha
xchg
pop
xlat
(bad)
sbb
xor
stos
lahf
jl
call
adc
jge
xlat
adc
ins
mov
imul
xchg
retf
lea
xchg
add
xor
fidivr
xchg
out
call
push
cmp
or
mov
(bad)
cdq
(bad)
sub
cld
mul
(bad)
ja
mov
sub
dec
sub
cmp
add
or
jmp
nop
push
xor
mov
fdiv
mov
mov
adc
jmp
stos
mov
(bad)
mov
cld
stos
push
jecxz
je
pop
and
adc
out
cmp
push
out
xchg
imul
leave
jb
fs
push
push
xchg
std
xor
test
sub
sub
adc
xchg
popa
jns
jmp
ret
in
push
cmps
pop
or
adc
std
sbb
cmp
imul
sub
adc
lock
mov
xor
fistp
movs
pushf
sahf
dec
jmp
xchg
scas
les
dec
clc
rcl
sub
add
adc
mov
(bad)
cld
sbb
aas
cwde
adc
cmp
xchg
mov
or
dec
pop
add
push
rcr
jl
jmp
leave
icebp
and
xor
adc
in
or
add
icebp
hlt
push
adc
xchg
addr16
mov
daa
dec
lds
dec
arpl
fmul
mov
xchg
nop
add
xchg
leave
call
xchg
shl
pop
imul
adc
jl
cwde
stos
sbb
jg
push
jmp
(bad)
test
loop
mov
hlt
lahf
stos
cmc
push
bnd
inc
int3
rcl
or
loop
xchg
xor
and
arpl
xchg
mov
xor
fs
ror
or
cmps
dec
jmp
ret
test
and
mov
xchg
or
dec
test
cwde
imul
jbe
inc
cmps
xchg
and
jmp
and
test
and
sub
enter
jp
stos
cmp
fwait
je
jno
pop
rcl
mov
idiv
sti
mov
aaa
pop
pop
js
mov
xchg
ss
add
movs
inc
lock
xchg
xchg
out
rcl
(bad)
fst
sbb
pop
push
ins
mov
shr
xchg
int3
scas
rcr
or
add
lahf
xchg
dec
jle
xor
cli
loope
ins
scas
push
test
dec
xchg
mov
outs
cmp
movlps
in
xchg
and
sbb
xchg
sar
test
je
xchg
mov
hlt
repz
dec
dec
or
stos
xchg
push
jno
mov
int3
out
mov
push
test
(bad)
stos
fistp
scas
je
adc
sbb
stos
mov
dec
ins
or
ds
mov
adc
adc
mov
adc
jmp
xor
jo
lods
hlt
jno
xchg
enter
sbb
cmp
pop
in
push
and
xchg
sub
test
fld
outs
lock
ja
sub
dec
adc
aam
mov
xlat
xchg
inc
or
cdq
sub
mov
mov
or
into
adc
(bad)
sbb
fidivr
push
xchg
xchg
pusha
sub
sbb
sbb
or
inc
xchg
fcmovbe
jbe
pop
sub
js
xchg
mov
xor
jo
cmp
inc
xchg
fdivr
scas
xor
out
test
cmp
jle
(bad)
mov
push
sbb
into
hlt
ficom
xchg
xlat
or
ds
ficomp
cwde
dec
xchg
mov
cmp
cmp
cld
xchg
adc
jns
sbb
xchg
aas
push
out
mov
sub
outs
inc
xchg
(bad)
sub
jo
push
cmp
imul
in
jne
xor
cli
fnsave
xchg
(bad)
fdivr
push
sbb
jl
fmul
popf
cwde
add
call
mov
sub
xchg
into
out
xor
jge
hlt
loopne
xchg
enter
mov
adc
sub
retf
aaa
and
ss
inc
xchg
icebp
out
aam
stc
cs
dec
jmp
mov
mov
jge
and
or
add
fidivr
out
(bad)
push
je
jnp
mov
xchg
mov
push
xchg
or
fisub
jbe
xchg
jp
inc
lahf
sub
sbb
push
adc
push
aaa
loop
xchg
ret
hlt
mov
lea
xchg
int3
adc
add
sub
cmps
sub
inc
dec
xchg
cmps
jnp
cmp
mov
or
aaa
push
outs
xchg
cmp
rcr
jns
cld
sbb
js
retf
dec
sahf
xchg
aam
jo
aas
add
push
or
pop
shl
inc
pop
xchg
add
rcl
xor
inc
repnz
(bad)
out
ret
xchg
adc
push
adc
ins
jp
mov
xor
jge
pusha
inc
in
imul
and
shl
imul
sbb
clc
mov
and
mov
or
(bad)
pop
adc
push
cmc
loopne
push
or
cwde
cmp
jle
sbb
retf
pop
retf
pop
lds
push
xchg
cmp
jle
mov
call
aas
and
mov
add
jmp
xchg
or
push
test
arpl
cld
jbe
dec
sbb
xrelease
cmp
lods
xor
int3
je
outs
aam
imul
dec
adc
push
data16
cmp
sbb
(bad)
sbb
imul
jae
fisub
xchg
(bad)
repnz
mov
rol
ror
lods
xchg
push
inc
xchg
jbe
jp
cld
or
aam
pop
jae
sbb
repz
sbb
xchg
and
xchg
mov
mov
push
adc
dec
inc
sub
jbe
xor
xchg
repnz
dec
test
sub
pop
movs
je
pop
xlat
mov
mov
sbb
mov
test
psllw
cmp
in
pushf
in
xchg
nop
in
hlt
xor
xchg
scas
pop
cld
jmp
(bad)
movs
cli
sbb
inc
cmp
sub
clc
cwde
jl
mov
ret
push
push
xor
jl
lods
cmp
and
sbb
lock
mov
(bad)
loope
rol
aam
sub
lods
adc
jns
push
xor
fst
and
mov
loopne
call
push
ins
int
jne
xchg
mov
jmp
pop
add
clc
dec
cmps
jge
xchg
and
lods
mov
jl
out
xor
xor
inc
xchg
jb
lock
(bad)
rcl
bound
mov
scas
(bad)
neg
push
cwde
mov
out
and
hlt
stos
pusha
lock
and
push
pop
(bad)
shr
xchg
or
je
popf
les
lods
sbb
jecxz
push
jg
adc
sar
dec
out
sub
stos
sbb
xchg
pop
jecxz
inc
pop
xor
adc
xchg
pop
mov
and
(bad)
mov
sub
sub
out
clc
sub
adc
lods
push
add
and
nop
cmp
clc
inc
push
xchg
push
cwde
push
push
lahf
int
push
dec
pop
repnz
ret
pop
jl
or
xchg
pop
sbb
mov
and
loop
xchg
out
push
add
(bad)
sar
xor
xchg
pop
xor
xchg
push
test
jo
add
push
ror
lahf
setae
(bad)
ins
adc
jle
rcl
call
daa
sar
jno
xchg
xchg
dec
push
mov
sbb
mov
and
cmp
cmps
mov
cwde
imul
mov
outs
(bad)
out
inc
adc
inc
and
cwde
xchg
mov
or
imul
jb
add
cmps
or
xchg
mov
js
retf
or
in
fs
loopne
xor
(bad)
push
adc
cli
je
imul
xchg
test
addr16
add
arpl
adc
mov
dec
pusha
pop
daa
je
dec
test
sub
xchg
sbb
mov
lock
arpl
dec
ss
mov
dec
add
in
mov
cmp
sti
mov
cmp
sub
add
in
xor
jb
xor
mov
xchg
call
iret
mov
fcmovu
adc
adc
outs
cmps
sub
ja
int3
add
neg
jp
jo
fstp
shl
jle
xchg
fidivr
out
dec
jmp
(bad)
or
in
xchg
sub
into
mov
mov
mov
xchg
call
add
clc
mov
push
push
xchg
sbb
lock
cmp
or
add
xchg
xor
pop
sub
cmc
int
ret
cmps
iret
xchg
push
adc
test
sub
je
lahf
scas
fcmovne
js
xchg
cmc
in
inc
mov
sbb
test
jmp
mov
popf
fimul
rcl
inc
gs
(bad)
cwde
sub
adc
xchg
loope
xchg
or
shl
pop
xchg
pusha
fwait
fs
dec
pop
xchg
loope
in
sub
mov
xchg
xor
test
icebp
push
jl
aaa
leave
dec
jmp
xchg
retf
or
cld
lds
sub
cld
mov
aas
(bad)
sti
lahf
jl
mov
fadd
clc
xchg
test
dec
out
mov
aam
pop
cmp
jle
and
mov
iret
cmp
and
sub
enter
xchg
pop
fidivr
lahf
retf
ror
mov
pushf
dec
cmc
jp
xchg
bound
rol
mov
push
icebp
fldenv
xchg
out
ror
adc
es
add
jo
jle
cmps
or
and
sub
adc
adc
xchg
rcl
and
mov
shr
push
sbb
pop
mov
mov
jl
mov
and
paddd
neg
pop
push
adc
repnz
push
xchg
jg
bound
loop
xchg
jle
pop
fs
(bad)
pop
fwait
(bad)
out
adc
mov
call
leave
ins
sbb
jns
cdq
push
inc
mov
adc
xor
fmul
cmp
scas
xor
push
mov
imul
xchg
push
inc
lods
ins
(bad)
push
xchg
xchg
cmp
sbb
xchg
popa
cmps
and
fmul
pop
xchg
fwait
(bad)
xchg
push
xor
push
cmp
xchg
mov
je
mov
cmps
ficomp
inc
fldenv
xchg
sbb
jg
pop
or
push
dec
or
fld
jne
dec
mov
adc
push
xchg
sub
inc
push
sub
into
iret
das
xchg
add
cmps
call
push
dec
push
(bad)
scas
mov
push
mov
je
xor
mov
iret
jae
aaa
xchg
mov
gs
(bad)
lea
cdq
jne
mov
addr16
or
das
mov
dec
cli
into
xchg
push
test
or
loop
xor
xchg
(bad)
pop
adc
aas
xor
jmp
pop
xchg
sti
retf
mov
sbb
xchg
lar
mov
enter
mov
cld
inc
xchg
sahf
jns
mov
cmp
test
aaa
xor
imul
adc
mov
test
xor
push
mov
sub
inc
xchg
pop
cmp
retf
push
ror
inc
xchg
in
pop
je
mov
xchg
pop
retf
idiv
cmp
mov
dec
dec
into
not
out
mov
pop
or
loop
(bad)
cld
xchg
xor
ds
mov
ret
shr
imul
pushf
push
stc
int3
and
cmc
fwait
mov
sbb
mov
call
add
repz
push
popf
mov
pop
mov
inc
or
or
(bad)
cmps
jg
dec
xor
retf
mov
add
(bad)
or
cmp
bound
add
dec
stos
inc
out
inc
sub
lahf
push
add
mov
ins
fistp
jb
mov
(bad)
xor
imul
push
mov
mov
mov
xchg
hlt
cld
jmp
repz
loopne
out
xor
outs
out
pop
xchg
out
call
retf
rcr
and
retf
push
mov
xor
sub
jns
lods
jge
mov
cmps
xor
and
inc
jne
lea
ins
mov
rcr
pushf
sbb
or
clc
shl
aam
in
sub
dec
mov
dec
push
(bad)
mov
ss
maskmovq
test
mov
jnp
test
and
cld
add
cdq
mov
sbb
jge
out
mov
call
sar
xchg
mov
loop
(bad)
ins
xor
lods
xor
pop
loop
mov
jmp
mov
push
adc
push
dec
pop
jnp
xchg
fdiv
inc
pop
cmp
and
nop
(bad)
into
adc
xchg
push
push
mov
add
mov
stos
ror
xchg
shl
fist
push
push
mov
pop
out
jae
mov
xchg
mov
push
mov
movs
jne
xchg
and
jl
mov
(bad)
mov
lods
scas
mov
out
cwde
xor
push
xchg
lock
aaa
cmps
pop
jne
pop
and
xchg
mov
jmp
mov
(bad)
outs
push
lods
mov
jbe
add
sbb
or
mov
sbb
push
dec
fwait
xchg
push
pop
hlt
and
mov
(bad)
std
mov
xor
int
xchg
test
in
movs
scas
cmps
dec
shl
mov
test
or
out
int
fs
call
push
daa
push
test
xchg
jns
repz
sbb
mov
jecxz
xor
pop
bnd
mov
js
sub
jae
lahf
retf
push
mov
repz
dec
daa
test
ret
or
pop
xchg
xor
inc
jl
sub
xchg
xchg
pop
popf
stos
add
jnp
mov
mov
fbstp
mov
push
mov
adc
cmp
in
call
scas
stos
hlt
xor
adc
jns
inc
mov
jmp
push
aas
xchg
jo
daa
loop
(bad)
shl
mov
cdq
dec
ror
test
repnz
xor
clc
mov
xchg
retf
fstp
iret
shr
mov
in
and
cmps
mov
mov
rep
mov
and
push
pusha
aad
lock
loopne
inc
in
adc
jmp
test
xchg
mov
jnp
jbe
ins
xor
cmps
mov
xchg
xchg
fstp
pushf
xchg
add
test
stos
xchg
push
cmps
push
clc
outs
push
sbb
push
hlt
push
xchg
mov
test
inc
or
inc
mov
ret
pop
fwait
lods
mov
push
dec
rcr
pop
fisub
cmp
pop
inc
or
ret
test
dec
mov
add
out
pop
loope
inc
push
adc
mov
les
jnp
je
inc
sbb
pop
lahf
xchg
shr
mov
lahf
aaa
ret
call
and
imul
mov
mov
push
or
push
xchg
adc
in
stos
in
repz
nop
dec
pop
jge
xchg
xchg
out
dec
dec
mov
add
in
sub
jo
ins
jno
out
jge
pop
outs
(bad)
das
jno
enter
xchg
fidivr
jp
imul
mov
xchg
jp
mov
dec
cs
xchg
push
repz
mov
xchg
adc
inc
jo
hlt
js
mov
cli
shr
test
jmp
ss
xchg
mov
and
(bad)
into
and
stc
ja
xchg
add
mov
mov
es
fidiv
push
or
xchg
dec
xchg
test
daa
in
xchg
ds
jno
lds
mov
push
xchg
dec
shl
inc
adc
out
lock
test
adc
lods
dec
dec
jne
movs
fistp
jb
movs
xchg
iretw
sbb
mov
jmp
fistp
shl
dec
ficom
mov
xchg
push
mov
lods
xchg
dec
je
pop
cmps
js
push
xchg
retf
mov
movs
fnstenv
stos
imul
xchg
stos
push
int3
mov
cmps
call
bound
scas
xor
or
leave
fisttp
aam
adc
mov
sub
js
in
(bad)
out
jl
outs
loopne
call
mov
xchg
pop
and
push
push
bound
push
dec
mov
cdq
hlt
sub
jmp
jl
aad
adc
cdq
inc
push
sbb
xchg
xchg
jge
jecxz
mov
fcomp
mov
ror
and
xchg
sub
cmc
inc
or
xchg
xor
nop
fcom
push
add
adc
dec
mov
push
sub
and
jp
aas
dec
xchg
push
xchg
mov
xor
popa
bound
jne
and
pop
cmp
xchg
fnsave
es
sbb
int3
xchg
out
push
pop
sar
cs
cmps
sub
xor
mov
add
xchg
test
(bad)
shl
sbb
sub
xchg
das
add
mov
shl
xor
retf
sbb
sbb
and
xchg
sbb
pop
xchg
xchg
in
xchg
aad
mov
pop
clc
(bad)
sbb
xlat
push
push
aad
aad
test
pop
add
call
add
js
sub
xchg
pop
loopne
push
jle
lea
int
jns
aad
cld
or
mov
stos
mov
or
out
mov
scas
jns
inc
ins
xor
fdivr
call
adc
lock
adc
xchg
cmc
mov
dec
push
jge
pop
xchg
cs
loope
shr
and
fwait
pop
xor
(bad)
ins
fist
sub
outs
or
sar
add
stos
or
fsubr
aad
xchg
jb
ficomp
mov
sub
mov
cmp
push
imul
mov
inc
jb
adc
xor
cmp
shl
xchg
push
cmc
leave
push
scas
xchg
call
aaa
xchg
in
jg
aad
stos
mov
add
pop
xchg
retf
repnz
sub
mov
pop
sbb
cdq
jno
xchg
pop
xchg
xor
outs
dec
xchg
xchg
mov
mov
stc
leave
inc
fwait
mov
sbb
and
retf
cmp
bound
scas
mov
in
cmp
mov
sub
jg
sbb
sbb
sbb
sub
adc
mov
in
xchg
and
std
retf
and
int
adc
adc
fwait
pop
adc
sbb
mov
xchg
add
test
xlat
mov
xchg
or
push
pop
or
xchg
lea
xor
test
rol
push
adc
stos
mov
adc
outs
repz
xlat
or
dec
jl
adc
daa
mov
imul
add
hlt
arpl
or
xchg
jp
cwde
push
cmp
jmp
or
push
mov
test
sti
in
add
jp
int
inc
loopne
movs
fwait
scas
test
adc
fcompp
mov
stos
adc
mov
ret
frstor
xchg
pop
popf
mov
and
rol
sub
push
leave
jno
retf
sbb
xchg
ret
inc
mov
pop
aas
icebp
fs
inc
ds
xchg
adc
lahf
mov
jb
push
cwde
jb
gs
xchg
add
jge
push
(bad)
cmp
inc
stos
fwait
out
mov
jl
mov
xchg
jno
mov
xor
movs
ret
xchg
std
pop
or
inc
in
xchg
test
adc
cld
loop
mov
test
jb
mov
and
ja
mov
push
push
mov
pop
mov
retf
pop
mov
out
adc
clc
xor
sub
xchg
xor
xchg
(bad)
mov
sbb
neg
data16
xchg
cmp
sbb
push
xchg
push
bound
xchg
or
add
pop
hlt
aam
(bad)
sub
xchg
aas
xor
gs
dec
aam
pop
push
xchg
(bad)
loop
push
stos
jnp
pop
pop
sub
mov
mov
out
or
iret
xchg
ret
or
arpl
inc
ins
gs
push
xchg
push
mov
(bad)
scas
or
(bad)
nop
out
xchg
add
js
rcr
mov
cmps
cmc
push
pop
push
mov
daa
ret
mov
jnp
test
xchg
xor
mov
mov
jmp
xchg
fdivr
and
sbb
stos
mov
in
js
out
shl
pop
xchg
call
adc
and
(bad)
and
adc
shl
xlat
push
xchg
lock
pop
mov
xchg
or
and
shl
sbb
add
gs
outs
push
mov
jg
loop
push
xchg
(bad)
jl
jle
repz
outs
aad
dec
stos
xchg
or
and
jmp
cwde
mov
test
cmp
sbb
ins
aam
int3
pop
xchg
xchg
inc
sub
push
xchg
in
push
push
pop
push
push
fcomp
sub
xchg
mov
jp
xchg
into
test
(bad)
jmp
(bad)
xchg
shr
stos
shl
cmp
sub
xchg
and
(bad)
sti
xchg
test
shl
mov
inc
xchg
rcr
add
rcl
add
enter
mov
and
dec
xor
stc
or
xchg
(bad)
push
cwde
xor
ja
cdq
jnp
dec
xchg
mov
mov
xchg
into
pushf
pop
push
sti
jo
sbb
ret
jmp
xchg
(bad)
cwde
ins
pop
test
cmp
or
sub
jno
jnp
mov
jns
xchg
pop
fwait
xor
sbb
jle
arpl
inc
adc
push
stos
jno
sub
adc
xchg
imul
sbb
xchg
retf
add
pusha
mov
mov
lods
mov
mov
and
push
lods
xchg
loope
test
mov
je
fimul
jge
pop
xchg
mov
paddusw
lds
repnz
mov
cmp
inc
pop
ss
dec
jge
mov
nop
test
cmp
popa
mov
stos
or
lahf
pop
hlt
dec
xchg
xchg
jmp
cld
repnz
fcomip
(bad)
jge
imul
cmp
sti
pop
cld
sbb
push
adc
dec
mov
lahf
sbb
dec
jp
mov
adc
sbb
pop
scas
sbb
imul
leave
adc
mov
sbb
arpl
cli
adc
es
xchg
sti
inc
movs
dec
jg
mov
retf
outs
pop
repz
mov
shl
xor
out
mov
lock
mov
adc
xchg
sub
hlt
cld
popf
push
call
fxch
sbb
int3
div
push
outs
sbb
ins
fidiv
xor
cmp
in
cdq
cld
ins
adc
(bad)
aaa
les
adc
nop
or
pusha
retf
jge
sbb
cmp
mov
aad
fcmovb
cmc
pushf
icebp
fdiv
in
iret
sbb
mov
pop
loop
(bad)
repz
ins
and
fmul
sub
test
push
xchg
ja
mov
pop
es
sub
mov
mov
sbb
mov
out
sbb
xchg
ins
nop
sub
dec
sub
xor
addr16
mov
nop
and
pop
push
add
inc
out
jle
and
adc
xor
sub
jge
push
ret
jg
les
leave
mov
sbb
ja
cmps
mov
inc
mov
dec
pusha
inc
pushf
lods
jl
jo
mov
lock
push
test
popa
lods
cmp
sub
daa
inc
out
or
cmp
retf
xchg
cld
jo
pushf
ror
xor
inc
jns
stos
inc
and
repz
(bad)
mov
repz
inc
sbb
mov
fcomp
mov
mov
scas
repnz
les
jp
scas
add
pop
dec
fistp
jecxz
xchg
xchg
mov
rcr
stos
xor
jp
std
lds
xchg
dec
or
pop
and
jmp
add
xchg
in
in
or
xchg
push
sub
jbe
xchg
or
adc
pusha
mov
add
push
mov
and
cmp
and
xchg
les
inc
cmp
xchg
mov
shr
pop
enter
xchg
fbld
dec
jne
test
mov
xchg
cmp
adc
push
pop
iret
adc
retf
ds
fsub
push
mov
dec
mov
cwde
xchg
mov
outs
(bad)
jmp
xchg
aad
sub
das
loop
xchg
inc
(bad)
mov
cwde
in
xchg
js
rol
lahf
pop
adc
mov
repz
scas
push
xchg
cli
movs
fld
add
cmps
shl
mov
add
dec
xchg
fild
call
or
hlt
dec
inc
mov
les
add
dec
dec
fist
xchg
mov
xor
je
lea
fadd
je
push
add
ficom
stos
add
sbb
xchg
pop
sub
pop
add
xchg
xchg
jmp
xchg
sub
das
push
mov
xchg
daa
imul
pop
lahf
pop
inc
fistp
inc
or
jns
cmp
fst
pop
cli
ror
add
and
xor
ret
xchg
jle
jg
repz
push
push
popf
imul
sahf
xchg
aad
add
nop
push
ret
xchg
(bad)
imul
mov
outs
sar
xchg
inc
cmp
cli
mov
xchg
stos
icebp
pop
lahf
imul
xchg
aam
scas
jle
pop
xchg
clc
gs
lods
jno
arpl
pop
fbld
fwait
leave
test
ins
jae
lock
mov
ins
sbb
dec
jo
pop
mov
push
mov
adc
xlat
xchg
jge
shr
mov
xchg
pop
xchg
inc
sti
or
push
xor
popa
rcr
xchg
mov
shl
sub
mov
fisub
stos
mov
lock
in
mov
je
add
aad
mov
xchg
call
push
sti
xchg
xchg
push
aaa
movs
and
pop
xchg
inc
scas
in
les
xor
mov
sbb
dec
fwait
push
pop
mov
xchg
je
fisubr
sub
xchg
inc
inc
fdivr
xor
adc
inc
mov
je
xchg
ins
jbe
fnstcw
mov
or
adc
dec
in
ja
xchg
pop
mov
inc
inc
sti
push
xchg
out
(bad)
or
out
call
inc
xchg
or
lahf
add
lea
nop
(bad)
rcl
aam
ret
sbb
scas
xor
test
push
pop
sbb
mov
or
dec
sbb
xchg
in
mov
sub
inc
popf
inc
(bad)
push
sbb
mov
cmp
repz
out
xchg
adc
sbb
pop
lock
in
mov
(bad)
xchg
shl
enter
xchg
sub
adc
and
add
xchg
push
dec
loop
jne
adc
mov
xchg
out
ja
adc
ss
arpl
adc
cmp
xchg
js
add
aaa
or
cmps
sub
push
ds
neg
clc
mov
out
xchg
in
hlt
sub
pcmpeqb
shl
aam
mov
aam
test
int
adc
cmp
fdivr
mov
(bad)
cmc
mov
fdiv
adc
mov
sbb
sbb
pop
mov
ss
add
or
inc
aas
xchg
je
loopne
ror
test
push
ins
enter
rcl
jecxz
jae
inc
inc
push
xor
mov
js
daa
rcl
inc
fwait
loopne
fsubr
mov
movs
popf
mov
mov
enter
test
lea
xchg
loopne
aaa
retf
ja
shl
adc
pop
out
dec
sub
int
xor
xchg
sbb
pusha
sbb
sti
daa
outs
xchg
sbb
(bad)
arpl
aaa
xchg
dec
or
repz
bound
fs
data16
adc
imul
inc
nop
xchg
test
jmp
test
push
mov
xlat
dec
pusha
sub
es
jge
cli
xchg
lahf
mov
fwait
xchg
sbb
call
in
jae
xchg
mov
call
pop
xchg
and
ss
int
lock
cli
mul
into
(bad)
mov
mov
mov
dec
mov
xor
jl
adc
dec
inc
cmp
add
mov
je
fisub
push
ds
sbb
fcom
adc
mov
xchg
popf
cmp
ret
sbb
or
out
push
and
movs
jbe
mov
ins
jg
gs
xchg
out
enter
push
cld
xchg
mov
cmp
pop
fcom
fs
pusha
popf
je
fild
adc
dec
mov
not
push
mov
mov
mov
jnp
xor
in
jae
xchg
pushf
and
cs
sub
in
ss
out
and
jecxz
xor
cmp
dec
test
xchg
xchg
push
hlt
cld
add
mov
xchg
es
xor
aam
mov
hlt
les
imul
mov
sbb
push
jl
or
loop
mov
dec
loop
rcr
dec
sub
rcr
jns
fcmovbe
jl
jbe
js
push
add
cmp
es
mov
repnz
cmp
push
and
push
pop
sbb
call
cli
sub
xchg
sub
pop
scas
sbb
idiv
sub
test
rcl
cwde
dec
in
icebp
xchg
cld
xchg
xor
cmc
adc
cmps
jge
mov
lods
xchg
stos
inc
jmp
or
das
sar
movs
pop
(bad)
shl
jl
mov
cmp
xchg
rcl
adc
js
xchg
fild
pop
ds
inc
mov
xchg
mov
int
dec
xchg
mov
mov
inc
mov
int
sbb
aam
daa
rcr
push
dec
out
xchg
jle
data16
cmp
jne
and
sub
mov
popa
neg
xchg
xchg
sbb
daa
fdiv
xor
mov
cwde
cmps
sti
push
inc
into
xchg
outs
xchg
inc
sbb
or
inc
mov
jbe
jb
repnz
cmp
das
mov
aam
jge
movs
or
int3
mov
gs
pop
sub
stos
pop
sar
hlt
fwait
push
fisub
je
mov
stc
adc
in
xchg
add
mov
adc
mov
mov
add
pop
sar
jb
scas
cwde
les
retf
push
into
xlat
(bad)
mov
mov
retf
scas
mov
sbb
les
ret
mov
mov
add
lahf
and
adc
sahf
fisttp
or
jge
movs
ror
jo
add
out
loop
xchg
mov
(bad)
push
or
adc
sbb
mov
xchg
push
icebp
pop
add
jno
push
scas
xchg
push
scas
mov
retf
adc
ins
push
add
stos
stos
dec
fwait
jae
and
movs
adc
cmp
xchg
mov
push
stc
inc
xchg
push
xchg
lock
mov
mov
test
and
push
in
sub
cmp
push
cwde
add
iret
sbb
xor
ins
push
ret
or
arpl
push
xchg
dec
fptan
mov
js
(bad)
xor
int
jmp
jbe
inc
sbb
jb
je
ins
(bad)
scas
or
stos
mov
loopne
rcl
sub
shr
movs
ret
mov
xor
or
int
xor
add
je
jbe
mov
outs
rcr
fist
cld
and
xchg
div
dec
pop
out
sub
ffree
fs
enter
mov
xor
xchg
(bad)
popf
adc
js
xchg
fwait
mov
(bad)
cmp
mov
mov
cmp
push
pop
xchg
sub
jbe
mov
lods
lds
xchg
inc
fwait
mov
sub
mov
xchg
aad
or
pop
jns
push
xchg
xor
es
xchg
sub
and
xchg
cli
adc
popf
cwde
or
repz
pop
ins
xchg
xor
cmp
and
and
jmp
sbb
inc
pop
sub
into
ins
cwde
xchg
mov
repz
jl
jo
pop
das
stc
push
lods
sbb
ins
cwde
adc
fst
(bad)
int3
xchg
hlt
jge
jbe
xchg
dec
adc
sbb
jl
gs
pushf
daa
push
mov
sub
ret
mov
(bad)
icebp
imul
cdq
xchg
add
in
cmp
push
lock
dec
sub
enter
inc
leave
cwde
jo
inc
sahf
sub
push
(bad)
lahf
sti
aas
xchg
mov
ret
pop
pop
xchg
(bad)
dec
push
clc
fdivp
adc
mov
je
leave
mov
test
stos
push
adc
inc
or
stos
enter
push
in
jns
xchg
adc
xor
sar
call
(bad)
mov
ror
mov
fistp
ficomp
xchg
adc
lea
xchg
push
imul
cmc
gs
pop
icebp
mov
retf
xchg
ret
ja
ds
pop
pusha
sbb
dec
adc
or
gs
inc
xchg
and
xchg
mov
jbe
cs
inc
not
bound
jo
inc
xor
xor
fmul
sub
jmp
addr16
in
or
int
std
xchg
mov
retf
loope
je
neg
xchg
fidiv
sub
xchg
stc
popf
cdq
dec
dec
(bad)
xchg
pop
jecxz
scas
and
iret
aas
je
popf
jle
push
push
mov
jbe
push
pop
iret
mov
fwait
xor
in
cmc
inc
xchg
inc
push
xchg
es
lea
xchg
jle
loope
ins
ficom
sbb
mov
std
xchg
push
cwde
dec
ret
(bad)
aad
push
mov
hlt
dec
sub
sub
xchg
jne
or
das
sub
lods
jns
push
xchg
test
lea
and
int3
mov
xchg
loope
fistp
fcomip
xchg
adc
hlt
cmp
test
pop
mov
pop
int
inc
dec
fcom
xchg
adc
or
xchg
add
add
shl
xchg
stos
pushf
jge
pop
call
mov
mov
shl
lahf
and
add
aaa
rcl
lods
and
sbb
and
mov
in
nop
mov
adc
pop
daa
dec
push
aad
pop
mov
or
mov
jl
movs
jno
rcl
jp
cmp
mov
xor
or
xchg
xchg
mov
not
mov
cs
lods
lock
ss
retf
loop
clc
ins
in
sub
int
pop
mov
xchg
jge
enter
test
jp
lods
pushf
mov
aam
ror
int
xchg
div
stc
ss
xchg
and
fadd
(bad)
adc
mov
cld
fwait
jnp
mov
test
pop
xchg
xchg
xchg
jae
pop
(bad)
mov
jb
and
xlat
leave
arpl
nop
cmp
cmps
pop
mov
mov
adc
pop
daa
mov
shl
pop
xchg
add
scas
mov
test
iret
adc
out
leave
mov
sbb
mov
into
bound
jbe
add
add
inc
rol
mov
out
lods
lods
jp
leave
xchg
inc
(bad)
xchg
nop
popf
xchg
and
lahf
cs
outs
xchg
push
rcr
xchg
mov
sahf
mov
push
inc
or
xchg
push
sbb
movs
ins
or
repnz
or
push
jmp
jle
xchg
(bad)
fmul
icebp
sti
jo
pcmpeqw
sub
sbb
push
stos
ret
aas
popf
mov
jl
sbb
cmps
jge
ins
dec
je
jb
or
mov
lock
xchg
fwait
pop
jg
mov
jle
pop
mov
or
xchg
push
inc
adc
adc
mov
lods
dec
lahf
sub
adc
jb
jp
xchg
cmp
push
fadd
test
sar
repnz
or
pop
fdivp
aam
sbb
es
ror
xchg
mov
cmp
rol
xchg
retf
mov
les
sbb
dec
shr
mov
aaa
xchg
or
cdq
bound
inc
xchg
jmp
(bad)
test
sbb
fwait
add
mov
and
jecxz
push
es
mov
(bad)
xor
pop
arpl
enter
std
or
xchg
stos
sahf
xor
inc
lods
test
jp
push
jmp
add
sbb
xchg
dec
je
aam
jne
dec
xchg
jg
or
das
jnp
fisub
jp
add
mov
xchg
or
scas
pop
mov
js
leave
mov
mov
lahf
push
pop
pop
imul
inc
xchg
idiv
xchg
mov
pop
adc
shl
mov
add
fwait
scas
mov
js
aam
retf
sbb
hlt
xchg
adc
test
addr16
xchg
ss
outs
aad
dec
loopne
xor
ret
push
in
popf
mov
push
int
imul
mov
lods
pop
adc
dec
js
pop
xchg
pop
in
rol
jp
xchg
imul
push
cmp
sub
outs
loopne
(bad)
jle
xchg
mov
add
pop
xchg
jg
xchg
sub
adc
xor
loop
mov
mov
fcmove
(bad)
push
sbb
pusha
aad
inc
js
int
inc
aas
xchg
call
push
jmp
rcl
hlt
outs
lods
cdq
lods
jmp
sub
adc
xchg
dec
jbe
mov
outs
jnp
mov
mov
or
xlat
hlt
arpl
inc
fs
das
xchg
xchg
sub
push
xchg
mov
js
cmp
and
push
xchg
mov
dec
and
dec
stos
loop
xchg
lahf
push
outs
in
jne
stc
dec
in
cmp
in
xor
mov
pushf
pop
jl
mov
and
lds
pop
pop
mov
or
movs
mov
xchg
imul
inc
and
xor
mov
mov
adc
aad
pusha
sar
ds
cld
call
jmp
xchg
sbb
(bad)
pop
add
hlt
sbb
sub
sub
aas
push
int
sub
rcl
mov
xchg
or
test
mov
repnz
mov
push
retw
fcom
push
dec
pop
or
adc
es
stos
or
scas
pop
pusha
fsub
add
nop
cli
je
imul
mov
push
jp
rcl
cmp
nop
stos
sbb
mov
inc
jmp
test
mov
pop
repnz
in
xchg
xchg
sbb
call
push
add
mov
or
mov
aad
sbb
test
rcr
xchg
popf
push
or
(bad)
test
jo
inc
js
mov
xchg
mov
mov
imul
xchg
sub
or
gs
fnstsw
xchg
test
iret
outs
cmps
add
fwait
addr16
mov
jecxz
dec
cmp
add
xchg
aam
mul
leave
adc
pop
rol
dec
icebp
xchg
rcr
or
or
jl
cdq
sub
and
jns
xchg
pusha
pop
ins
xor
pop
fstp
clc
int
data16
jmp
xchg
test
in
nop
inc
stos
xchg
mov
push
(bad)
pusha
jno
xchg
sahf
push
int3
ss
cmp
adc
xchg
nop
lock
(bad)
ins
xchg
xchg
mov
test
and
mov
aad
lock
mov
adc
xor
xchg
adc
xor
cmp
leave
xchg
pop
mov
pop
jge
in
cmp
rcr
jbe
fcmove
rcl
fs
sbb
inc
xchg
lods
cmc
or
rcr
test
enter
adc
pcmpeqb
xchg
ss
adc
mov
enter
and
fdiv
add
test
xor
rcl
pop
and
pop
xchg
pop
aas
ret
push
add
push
in
jl
or
or
enter
mov
dec
out
int3
xor
mov
xchg
gs
cwde
(bad)
enter
ds
ja
cmp
cwde
ret
ins
xchg
mov
repz
sub
cmps
dec
jmp
push
sub
xchg
mov
std
push
xchg
gs
fwait
mov
int3
sahf
xchg
les
stc
les
sar
fcom
xchg
pop
push
jl
xchg
sub
push
jecxz
and
inc
xchg
dec
pop
jb
scas
(bad)
pop
pop
xchg
or
pop
mov
rol
inc
out
jmp
jmp
mov
aas
ret
pop
das
(bad)
iret
hlt
div
mov
and
push
mov
or
xchg
sub
std
ret
adc
jmp
int
sub
popa
and
or
imul
or
(bad)
hlt
or
shl
inc
lea
xchg
xchg
ins
jecxz
pop
jnp
mov
loop
int
shl
xchg
retf
jl
xor
mov
dec
fimul
and
mov
(bad)
adc
(bad)
push
mov
icebp
sub
retf
sbb
cmps
push
cmp
ret
mov
ss
or
popf
xor
xchg
je
in
es
xchg
mov
pusha
mov
push
test
sub
adc
sbb
push
xchg
sbb
data16
xchg
mov
dec
mov
xchg
mov
adc
imul
xchg
mov
iret
call
inc
and
mov
(bad)
out
int
loopne
xchg
pop
aam
in
data16
leave
xchg
iret
aad
sub
call
(bad)
and
jno
movs
retf
adc
pusha
pop
jb
fst
(bad)
aas
fs
ret
and
mov
jge
je
leave
shl
add
rol
push
xchg
js
sub
sub
xor
aaa
xchg
out
sub
push
mov
sub
or
xchg
leave
push
stc
hlt
jg
xor
test
arpl
mov
jae
ins
push
jg
xchg
sbb
xchg
shl
les
mov
not
fwait
test
in
test
xlat
sub
out
jl
loope
or
retf
jmp
fbstp
jp
mov
in
push
mov
push
pop
xor
inc
pusha
fimul
mov
xchg
sub
jl
and
daa
stc
out
out
hlt
sub
add
adc
mov
call
sbb
pop
xchg
jle
or
pop
xor
cdq
sbb
dec
dec
leave
iret
add
adc
fucomi
mov
adc
int3
stc
pop
nop
jno
xchg
jo
add
mov
rcr
ficom
or
push
fcmovne
xchg
mov
and
fiadd
dec
jbe
xchg
push
inc
jns
cs
push
and
cmp
outs
xchg
popf
(bad)
les
and
xchg
add
push
int3
sub
retf
hlt
dec
call
adc
jle
push
xchg
fsub
fs
push
inc
popf
xchg
or
jle
xchg
out
mov
das
push
btc
aaa
xchg
mov
dec
mov
lods
dec
xchg
mov
aaa
out
jne
xlat
adc
xchg
add
add
mov
popf
rcr
mov
push
add
xchg
pop
scas
xchg
aaa
mov
dec
pop
xchg
xchg
out
or
xor
ja
add
inc
aaa
sar
xchg
scas
dec
loop
repnz
mov
add
push
(bad)
jmp
mov
ror
pop
(bad)
mov
mov
mov
cmp
into
in
call
pop
jmp
xor
mov
fs
int3
jle
xchg
dec
mov
xor
sub
mov
xchg
jl
xor
push
jmp
mov
into
clc
lea
and
test
test
nop
shl
adc
cmps
mov
mov
push
xchg
mov
ins
adc
mov
push
inc
sub
imul
xor
mov
gs
or
stos
aaa
aaa
dec
jmp
adc
push
(bad)
in
aaa
imul
pushf
mov
cdq
push
cwde
mov
cmp
jbe
addr16
sub
cld
popf
push
retf
mov
data16
xchg
fs
pop
cwde
xchg
je
push
xchg
cmp
in
arpl
mov
cmc
rcl
(bad)
jmp
lds
push
rcl
lea
and
push
jne
ss
cdq
in
add
leave
or
mov
mov
inc
mov
push
sbb
bound
mov
xchg
add
adc
pop
je
mov
xor
jl
jo
sbb
push
mov
movs
fs
sbb
cwde
outs
xchg
inc
sub
xchg
movs
test
retf
dec
xchg
ror
int3
sbb
cli
pop
xchg
and
es
push
xchg
mov
sbb
push
jbe
hlt
add
adc
ins
jp
jb
mov
xchg
mov
sahf
mov
xchg
in
pop
push
adc
mov
mov
lock
adc
dec
jge
sti
dec
xchg
gs
aam
sub
movs
jno
jle
rcr
mov
je
xchg
fcomp
aam
xor
xchg
call
push
je
push
xchg
je
mov
xor
idiv
xchg
adc
push
(bad)
adc
xchg
popa
pop
dec
mov
mov
pushf
push
and
push
aam
push
lods
xchg
pop
loop
aaa
ret
popa
xchg
(bad)
and
(bad)
js
xchg
xor
out
adc
data16
inc
cmp
shr
lods
xchg
(bad)
dec
xor
ins
int
cmp
pop
mov
xchg
cmp
jne
adc
sub
mov
dec
xchg
stos
jne
or
add
sub
xchg
in
add
adc
jbe
iret
ficomp
sti
cmp
repz
call
push
sbb
xchg
cmc
push
xchg
and
mov
jnp
lods
out
retf
div
or
sub
cld
push
adc
mov
loopne
sbb
dec
cli
xchg
test
pusha
loop
and
int
rcl
out
or
xchg
fldcw
and
loopne
sub
pop
adc
je
ds
xchg
and
jnp
arpl
dec
sub
xor
fiadd
xchg
lods
dec
pop
jo
jns
mov
icebp
std
stc
sub
push
loop
adc
sti
or
dec
repnz
xor
cmp
and
cmp
(bad)
sti
adc
xchg
xor
inc
xor
push
inc
xchg
sbb
adc
adc
in
outs
int3
and
xchg
imul
stos
test
xchg
ror
sub
ss
(bad)
mov
jecxz
pop
xchg
sti
sub
inc
adc
add
(bad)
js
adc
das
dec
adc
mov
jbe
push
cwde
cld
mov
mov
sbb
fnstenv
retw
movs
loope
push
sub
clc
cmp
jne
xor
sbb
test
sbb
xor
xchg
ret
dec
mov
dec
stos
mov
xchg
adc
pop
sbb
outs
addr16
dec
inc
mov
mov
or
(bad)
sub
cwde
cmp
push
mov
icebp
jns
adc
es
rcl
jo
(bad)
or
inc
loope
je
je
icebp
xchg
lods
jmp
xchg
dec
repz
ins
stos
in
xchg
xchg
adc
scas
and
mov
imul
mov
(bad)
xchg
jmp
fist
xchg
add
rdtsc
mov
push
sub
jae
loopne
inc
dec
cmps
dec
sar
xchg
and
(bad)
mov
mov
jg
push
mov
in
push
scas
dec
add
pop
inc
xor
dec
mov
pop
jl
xchg
mov
test
sahf
pop
fs
xchg
pusha
je
dec
cwde
loop
xor
test
xchg
pop
movs
pop
mov
xchg
je
inc
add
test
adc
test
scas
xchg
push
mov
xchg
xchg
fidivr
xchg
dec
push
shr
xchg
add
ficomp
(bad)
xchg
inc
retf
daa
les
je
or
lahf
sbb
push
gs
fs
nop
xchg
fcom
and
pop
(bad)
daa
pop
mov
cmp
adc
lds
adc
pop
test
arpl
retf
loopne
xchg
adc
scas
mov
sbb
inc
imul
iret
mov
cmps
or
fcmovnbe
mov
xchg
push
adc
sbb
jmp
push
mov
into
adc
(bad)
and
xchg
sti
out
xchg
and
call
or
add
xchg
adc
(bad)
mov
dec
repnz
into
dec
out
out
jecxz
mov
(bad)
inc
icebp
xchg
lea
jg
std
cmc
xor
pop
cli
xchg
repnz
and
mov
daa
ds
adc
lahf
mov
xchg
clc
stos
out
movs
mov
sbb
dec
mov
les
idiv
call
xor
xchg
pushf
in
retf
lods
dec
mov
out
mov
ins
or
cmp
int
aad
imul
mov
frstor
fwait
pusha
(bad)
xchg
stos
mov
xchg
popa
jp
(bad)
dec
xchg
out
dec
mov
inc
adc
mov
mov
push
(bad)
aam
adc
sub
xchg
adc
push
imul
mov
xchg
rcl
xlat
sub
ins
and
ins
jmp
stc
xchg
loope
mov
bnd
gs
mov
scas
dec
and
sub
push
ret
or
xchg
cwde
fcom
push
into
repz
repnz
inc
xchg
xchg
push
inc
sub
pop
push
xchg
push
sbb
cld
test
cli
(bad)
mov
je
inc
mov
adc
cdq
aam
ror
or
sub
mov
ds
test
sbb
je
dec
(bad)
les
(bad)
jmp
iret
cdq
xchg
adc
mov
push
stos
push
jbe
xchg
shl
mov
sub
jne
popf
fisttp
xchg
add
pop
dec
call
or
jno
fxtract
adc
fmul
fs
mov
add
sbb
push
mov
into
jne
adc
aas
inc
mov
or
push
pop
sub
sub
in
(bad)
addr16
jmp
stos
fist
xchg
repz
add
ja
idiv
pop
xor
sub
inc
lods
xchg
xlat
inc
test
xor
and
xchg
xor
fistp
adc
mov
xchg
test
cmc
test
cmp
popa
aad
push
ins
xchg
jno
jns
stos
enter
sub
xchg
push
xchg
movs
cmp
aam
add
dec
jne
sub
adc
cmp
aad
xchg
sbb
std
pop
fdivr
sub
sub
ins
inc
or
addr16
into
jp
sbb
test
xor
xchg
lahf
jmp
push
mov
sub
xchg
push
dec
xchg
push
push
adc
call
not
stos
loop
push
bound
mov
fsub
test
add
pop
mov
push
out
stc
sbb
jge
inc
mov
cwde
sbb
in
out
cmp
cwde
xchg
and
xchg
sbb
xor
pop
nop
cmp
inc
into
or
ds
js
rcl
jecxz
xor
fsub
fimul
xor
mov
jl
rol
sbb
push
scas
aas
mov
mov
lock
and
in
add
imul
xchg
or
(bad)
hlt
in
xchg
xchg
clc
sti
sbb
or
or
mov
jne
ins
xchg
or
loopne
aad
pop
test
xchg
gs
imul
inc
in
xor
ins
fild
cmp
add
mov
nop
jno
ret
mov
cwde
inc
clc
bound
mov
imul
out
cmps
adc
xchg
adc
add
lock
movs
cmp
mov
(bad)
loope
jmp
jne
inc
cmp
cmp
inc
xchg
out
pop
xchg
push
xchg
xchg
int
stos
adc
push
add
cmc
mov
mov
adc
arpl
sti
mov
inc
aaa
cmp
movs
arpl
jmp
mov
xchg
jmp
hlt
push
test
lock
mov
or
mov
repnz
and
movs
mov
or
aam
xor
xor
mov
mov
and
xchg
add
fisttp
sub
stos
cmp
icebp
xchg
cmp
cmp
or
jns
imul
cmc
iret
pop
scas
mov
fld
xchg
cmps
movs
xchg
push
ins
pop
inc
xchg
out
lahf
adc
lock
and
hlt
sbb
xchg
mov
sbb
(bad)
stc
mov
lods
jecxz
mov
adc
fist
sar
or
fwait
pop
stos
mov
or
pop
xchg
sbb
adc
pop
xchg
jnp
sar
adc
xchg
xor
ja
cmp
cli
jl
adc
clc
mov
mov
fimul
push
cmps
jns
xchg
test
xchg
lea
cmp
mov
shl
adc
fwait
jecxz
sbb
loopne
push
xchg
loope
in
das
rcl
adc
nop
dec
mov
test
push
xor
fcmovnb
cwde
les
stc
mov
xor
fstp
std
test
iret
xchg
sub
jo
adc
dec
loop
test
push
dec
cmp
push
mov
mov
hlt
out
outs
xor
add
arpl
pop
jp
fs
push
js
add
xchg
push
mov
ins
pop
xchg
out
mov
or
push
outs
dec
mov
(bad)
cmp
xchg
jge
push
and
sbb
in
mov
(bad)
cmp
jg
sub
jne
sbb
cmp
or
xchg
cmp
jle
mov
xor
cmps
pusha
int
stos
ins
xor
outs
and
xchg
lods
sbb
mov
outs
adc
scas
adc
push
mov
sbb
and
or
sar
dec
inc
call
hlt
xchg
retf
dec
pop
dec
xchg
push
int
xchg
rsqrtps
inc
ja
mov
shr
mov
leave
push
imul
(bad)
fidivr
fst
inc
xchg
shr
rol
xor
imul
mov
adc
xchg
adc
xchg
xchg
cs
jge
cmp
aas
xchg
push
or
dec
ins
jp
je
repnz
xchg
sti
pop
jge
repz
lods
stc
xchg
jnp
cmps
add
sar
and
mov
xchg
test
mov
xchg
pop
sbb
jnp
xchg
cmp
or
or
dec
rep
and
xchg
mov
dec
fstp
sbb
addr16
mov
xchg
ds
les
dec
out
push
mov
jo
push
jecxz
mov
(bad)
fmul
lods
js
dec
iret
dec
mov
pop
sti
pop
inc
xchg
fld
loope
cmp
mov
xchg
shr
(bad)
xchg
mov
sub
jno
call
das
mov
pop
adc
xor
jbe
push
scas
daa
idiv
xchg
iret
mov
or
sbb
dec
mov
xchg
inc
leave
loopne
cmps
lahf
xchg
mov
or
adc
cmp
(bad)
cmps
push
retf
lock
jae
jmp
jp
xchg
lods
mov
push
std
xchg
int3
xchg
add
fsub
pop
fwait
and
hlt
pushf
push
sub
shl
mov
add
or
mov
repz
sar
ins
adc
dec
pop
fdiv
jecxz
(bad)
push
sub
mov
les
ror
mov
call
js
sbb
vmovshdup
sub
ret
sub
adc
stos
hlt
xchg
mov
stc
dec
push
enter
mov
mov
push
push
(bad)
pop
outs
pop
aam
xchg
inc
std
hlt
push
xor
adc
sbb
inc
popf
xchg
aad
mov
adc
sbb
loope
adc
mov
xchg
in
nop
mov
pop
mov
adc
jge
push
pop
out
and
and
xchg
outs
mov
ja
out
nop
cmp
rcr
out
fcom
lods
test
xchg
pop
adc
arpl
cmps
mov
mov
je
mov
popa
xchg
sub
repz
(bad)
pop
frstor
xchg
mov
ss
and
mov
pop
mov
test
scas
jmp
jae
sub
movs
adc
repz
sub
pop
sbb
pop
inc
add
mov
hlt
jl
sub
fs
mov
xchg
mov
je
adc
sti
mov
out
and
and
sub
inc
sbb
push
data16
stos
or
call
fidivr
ss
repnz
cs
(bad)
pop
xchg
nop
push
xchg
and
out
mov
pop
mov
push
and
adc
lds
inc
pop
out
xchg
hlt
ins
adc
xchg
pop
lods
daa
jbe
retf
inc
stos
xchg
popf
xchg
sti
and
or
mov
mov
mov
cmps
inc
popa
lods
xchg
fisttp
ins
adc
xor
xchg
and
rcl
ds
scas
push
int
sub
xchg
mov
arpl
pop
test
fwait
mov
and
sub
mov
push
addr16
fmul
mov
data16
ins
clc
outs
jbe
xchg
rcl
retf
(bad)
pop
aaa
lods
xchg
cmp
jo
jns
loop
fs
rol
in
(bad)
inc
repz
push
jle
rol
out
pop
mov
and
retf
mov
(bad)
sbb
cli
and
mov
cmps
fcmovb
sbb
mov
lahf
mov
cmps
fild
repz
ins
test
mov
loopne
push
mov
inc
cmp
shl
jb
cmps
jns
inc
aam
cli
in
(bad)
(bad)
mov
popa
adc
rcr
jmp
pop
test
mov
xchg
jnp
pop
push
pusha
lahf
add
in
clc
xchg
and
cmps
push
adc
fwait
mov
adc
adc
mov
daa
shl
pop
mov
pop
or
ins
lods
xchg
lds
jmp
in
and
mov
xchg
jbe
jp
out
fidivr
xor
retf
sub
xchg
mov
mov
pop
je
stos
xchg
popa
outs
(bad)
std
pop
sub
loope
inc
xchg
es
push
mov
adc
and
push
and
push
xchg
mov
mov
push
pop
jnp
xchg
or
push
pop
sub
or
in
fst
and
xchg
test
out
imul
xlat
adc
data16
and
shl
hlt
adc
inc
jg
mov
test
dec
jge
xchg
call
clc
or
lods
das
sub
sub
sbb
retf
push
cmp
mov
dec
xchg
dec
iret
xor
fdivp
imul
(bad)
cli
xor
pop
fsubr
pop
xchg
aam
cmps
aas
jnp
jno
in
sti
cmp
cmp
jle
jo
cdq
fwait
es
add
aaa
pop
mov
push
sahf
out
mov
std
sub
xlat
xchg
jecxz
enter
pop
popf
cmps
scas
mov
imul
in
fisttp
cmp
add
adc
rcl
(bad)
jmp
xor
gs
push
mov
pop
shr
mov
push
jae
xchg
iret
adc
clc
xchg
sbb
call
inc
das
gs
push
inc
scas
jmp
cs
push
push
sti
int
xor
dec
pop
popa
inc
fld
ins
jmp
adc
xchg
popf
jne
fistp
mov
xlat
test
push
mov
fwait
bound
mov
ins
add
adc
xchg
cmc
inc
jge
inc
popf
jl
xchg
stos
(bad)
mov
jg
loope
ret
call
fsub
and
mov
aaa
mov
outs
xchg
enter
sub
mov
inc
add
push
push
in
jg
mov
imul
stos
sub
pop
add
fprem
add
aad
jo
je
lahf
xchg
mov
lds
jae
xchg
cmp
repz
adc
adc
and
pop
in
test
(bad)
icebp
std
push
aam
sub
push
xor
adc
arpl
jno
or
mov
imul
jo
hlt
movs
jge
loop
sub
sub
call
imul
pop
and
mov
fwait
jg
sbb
mov
and
fmul
jecxz
xor
das
xor
dec
scas
fwait
adc
lods
mov
fbld
xchg
dec
cmp
xor
shl
xchg
jb
jbe
loop
cmp
jmp
pop
push
inc
mov
xchg
mov
sbb
mov
sub
or
shr
outs
ret
add
adc
sbb
jae
xor
nop
(bad)
call
xchg
mov
ja
aas
add
xchg
rcr
clc
and
call
dec
dec
cli
xchg
jmp
xchg
dec
jecxz
out
pop
push
xchg
mov
fiadd
mov
push
shl
(bad)
stos
xor
movs
sub
pop
(bad)
fidiv
cs
ins
jmp
dec
mov
mov
mov
pusha
push
pop
xchg
xchg
mov
lea
adc
aam
sar
xchg
and
pop
out
cmp
xchg
pop
mov
xor
or
fwait
xor
out
rcl
pop
std
mov
je
mov
or
xor
jb
daa
(bad)
sbb
cmps
add
sbb
int3
push
xchg
sahf
push
out
xchg
jae
sbb
les
mov
and
jl
test
xor
sbb
clc
mov
push
aas
repz
inc
out
mov
fld
mov
xchg
pop
dec
nop
es
adc
test
imul
mov
xchg
xchg
aaa
sti
cs
push
and
(bad)
ficom
sbb
addr16
pop
arpl
(bad)
(bad)
push
mov
adc
sbb
sbb
shl
into
test
adc
cwde
clc
jle
push
aas
pop
jnp
xor
add
scas
aaa
or
sub
cs
pop
push
or
lock
cld
into
push
adc
dec
rol
cmp
xchg
mov
cmp
loop
shr
inc
xchg
pop
fstp
arpl
lds
stos
xchg
scas
repnz
push
xchg
or
xchg
in
daa
sub
in
inc
sahf
xchg
cmp
fwait
jg
or
dec
ss
xchg
dec
jns
aam
xchg
cli
mov
mov
jnp
xchg
add
cdq
(bad)
mov
mov
mov
push
dec
call
pop
loopne
mov
push
out
fadd
mov
xor
sbb
cld
dec
mov
out
push
xchg
fisttp
mov
xor
cmp
jne
gs
xchg
sbb
mov
ja
pop
lock
xchg
mov
mov
sub
popf
out
cmp
jb
ins
push
jo
xchg
cli
xor
loop
icebp
xchg
fcom
dec
mul
xlat
mov
out
inc
adc
loop
dec
jae
and
xchg
popf
in
test
lahf
xchg
sbb
xchg
ret
idiv
xchg
xchg
xchg
int3
xchg
inc
fwait
das
out
xor
or
xchg
sub
ss
dec
push
icebp
mov
in
push
cmp
repz
mov
int
enter
and
mov
outs
nop
mov
test
retf
ins
add
xchg
pushf
gs
ret
leave
jecxz
jp
and
lea
adc
jo
xor
mov
cmp
xchg
lock
sbb
cmp
xchg
sub
push
dec
repz
das
in
mov
sbb
xchg
leave
stc
mov
pop
xchg
lods
mov
cwde
repnz
or
xchg
icebp
jmp
or
mov
push
jnp
fwait
imul
scas
dec
mov
js
push
xor
bswap
cmc
sbb
cdq
cmp
scas
ins
fucomip
adc
xchg
mov
cdq
jmp
adc
xchg
mov
mov
mov
push
test
dec
push
sbb
pop
rcl
retf
scas
daa
sub
xchg
mov
jmp
cmp
(bad)
movs
cmps
jl
jbe
jecxz
cmp
rcr
sbb
jle
mov
dec
xchg
xchg
out
push
cmp
inc
out
adc
(bad)
mov
adc
and
sbb
scas
rol
test
(bad)
int3
jae
lods
sbb
(bad)
ja
mov
popa
adc
xchg
pop
sbb
out
cmp
inc
and
mov
push
xchg
fwait
or
xor
shl
xchg
xchg
jge
add
lds
cld
mov
les
add
cli
cdq
rcr
pop
mov
mov
xor
aad
pushf
jge
inc
push
ror
xchg
sbb
jno
xchg
adc
ret
pop
hlt
push
and
loopne
out
adc
adc
inc
test
adc
jae
inc
cmp
rol
sub
adc
add
in
or
sub
pop
or
fcom
out
cwde
mov
scas
dec
adc
push
inc
xchg
jb
xor
cmp
sbb
mov
xchg
cli
dec
ficom
mov
xchg
movs
in
je
in
dec
mov
fisub
xchg
clc
ficomp
add
(bad)
bound
dec
and
fcmovnb
je
inc
push
xchg
mov
push
xchg
lahf
fwait
push
adc
xchg
(bad)
shr
add
outs
je
cmp
xchg
xor
mov
cld
push
fs
jae
xchg
cli
jge
adc
adc
mov
retf
es
dec
or
je
adc
xchg
inc
sub
test
mov
inc
sbb
rcr
and
rcl
(bad)
jp
push
aam
es
xlat
cmp
(bad)
dec
adc
cmp
je
xchg
icebp
rcr
xor
pop
ss
test
test
jbe
xchg
adc
pop
ror
mov
imul
xchg
int3
mov
dec
xchg
add
imul
sbb
imul
mov
mov
push
stc
sbb
inc
mov
iret
xor
daa
sbb
inc
push
xchg
int3
pop
xchg
cmp
mov
cmp
sub
retf
popf
sub
adc
cli
repnz
(bad)
or
icebp
out
mov
inc
add
push
adc
out
neg
xchg
push
adc
push
mov
xchg
dec
std
cmp
mov
jns
jbe
pusha
xchg
cs
movlhps
dec
push
or
retf
mov
xchg
jle
and
push
mov
xchg
std
adc
add
xor
rcr
cwde
int
dec
sub
aam
nop
jge
push
repz
push
xchg
xchg
inc
mov
aam
icebp
cld
mov
mov
fld
aas
je
cmps
xchg
outs
xchg
xchg
or
add
add
sti
xchg
dec
add
(bad)
adc
stos
sbb
retf
aam
jne
adc
xor
pushf
jmp
fisubr
sbb
jge
(bad)
push
(bad)
jl
push
push
sbb
das
aad
or
sar
pop
adc
loop
je
cmps
jl
cs
adc
pop
mov
mov
pop
xchg
lds
inc
shl
mov
es
mov
les
mov
nop
fcmovnb
in
xchg
or
add
pop
inc
push
call
(bad)
xchg
rcl
sub
mov
xor
arpl
pop
xchg
ficomp
mov
out
das
enter
mov
mov
push
xchg
out
mov
inc
dec
mul
sub
cmp
xchg
push
add
add
mov
cmps
rcl
test
push
add
xor
xchg
retf
lods
daa
movs
in
xchg
pop
jle
push
jb
mov
sar
scas
mov
xchg
mov
adc
gs
adc
xchg
xor
(bad)
sub
(bad)
mov
repnz
xchg
mov
imul
cs
dec
rcl
lahf
mov
movs
or
jo
push
inc
jmp
(bad)
xor
sti
retf
mov
into
fisubr
cmp
(bad)
push
inc
adc
ja
nop
je
xchg
sub
cmp
adc
in
mov
int
mov
jmp
xchg
push
sbb
mov
adc
das
ret
mov
jge
xchg
and
rdmsr
repz
xchg
inc
cmp
cmp
int3
not
sub
xchg
out
clc
jecxz
or
fwait
scas
dec
sbb
mov
loopne
xchg
sbb
inc
cwde
sar
movs
fld
xchg
mov
cmps
imul
push
pop
adc
test
int
xor
jne
or
inc
aas
cwde
js
mov
pop
aas
xchg
cs
mov
mov
dec
and
mov
jl
xchg
popf
lock
add
mov
lods
das
mov
dec
mov
in
xlat
fldz
aad
sbb
out
mov
mov
retf
ins
hlt
es
xor
xor
xchg
retf
add
cmovle
sub
sub
cs
les
adc
sbb
aam
shl
mov
out
adc
out
(bad)
jns
push
neg
clc
cwde
(bad)
mov
call
pop
retf
mov
stc
stos
cmps
mov
cli
xchg
jae
out
es
or
xchg
pop
mov
and
cmp
add
xchg
bound
add
push
je
push
and
cmps
xlat
es
cwde
(bad)
ss
sahf
in
adc
sbb
out
dec
aaa
jge
jmp
or
lock
mov
xor
cmps
dec
dec
add
jmp
out
push
jl
test
mov
push
test
repz
aam
xchg
add
jmp
xor
shr
sbb
int3
pop
sbb
cld
scas
mov
jno
jo
xor
push
jl
lds
xor
ffree
mov
xchg
(bad)
loop
test
jge
xor
and
out
mov
fbld
or
lods
test
fldenv
fcmovnb
les
and
mov
test
xchg
and
gs
mov
pop
sbb
jb
xchg
mov
push
sbb
pop
inc
test
popf
pop
hlt
adc
bound
mov
daa
std
jle
adc
adc
or
cmps
sub
rcl
mov
ficom
adc
test
pop
arpl
sbb
cdq
cld
ds
sub
out
(bad)
push
inc
popf
jl
inc
jno
fldcw
push
xchg
xor
adc
ja
jmp
adc
nop
arpl
rcr
cmps
aaa
movs
test
lea
pop
dec
jl
xor
test
lods
and
jp
and
cmp
push
scas
jge
jnp
fwait
hlt
dec
daa
xor
sub
jno
frstor
fcom
mov
cld
into
(bad)
mov
sti
cwde
xchg
cli
mov
mov
enter
outs
cli
xchg
push
gs
adc
sbb
loopne
(bad)
call
add
in
(bad)
int3
fwait
sahf
mov
xor
imul
sbb
es
xor
mov
or
fwait
jb
push
mov
xor
leave
mov
mov
add
lock
mov
cwde
(bad)
push
sbb
es
loope
shl
xchg
cwde
xchg
ds
mov
mov
mov
(bad)
add
or
(bad)
out
pop
pop
mov
test
and
xchg
in
das
jecxz
(bad)
xor
push
jb
clc
pop
movs
mov
repnz
loopne
dec
int
xchg
mov
inc
scas
mov
ret
mov
inc
mov
sub
mov
(bad)
fsub
js
xor
bound
enter
into
cmps
xor
pop
xchg
xchg
and
rol
or
fidivr
jl
xchg
mov
sar
mov
push
mov
sbb
xlat
jbe
add
mov
adc
int3
inc
sub
xchg
movs
mov
or
js
mov
push
xor
jp
stos
xchg
stos
call
push
pop
xchg
pop
jg
ret
bnd
mov
jecxz
pop
fwait
iret
jbe
(bad)
cdq
fcom
inc
sbb
dec
sub
mov
xchg
xchg
out
mov
data16
xor
cli
fcmovnb
jns
mov
xchg
and
in
lahf
adc
jne
xchg
mov
push
(bad)
mov
xchg
sbb
(bad)
lock
mov
xchg
push
dec
adc
cmp
xchg
std
frstor
loopne
mov
mov
sbb
or
push
loop
aam
push
xor
inc
mov
cmp
add
fdiv
cmp
and
or
adc
das
bound
fs
xor
and
leave
xchg
add
sbb
jge
mov
retf
push
(bad)
xlat
jb
xchg
fdivr
jecxz
test
cmps
or
lahf
in
pop
sbb
test
stos
push
lea
jl
cmovb
fst
pop
pop
xchg
jmp
imul
push
jl
repnz
pop
xchg
mov
call
add
popf
fdivr
sbb
jmp
call
mov
push
mov
xor
jl
enter
movhps
inc
jge
mov
jl
lea
and
sub
jmp
shl
jmp
(bad)
(bad)
jns
movs
(bad)
cld
lds
daa
jle
xchg
call
mov
or
retf
mov
fs
loop
pop
pop
into
cmp
pushf
mov
aad
mov
mov
pop
and
ins
loop
sbb
add
cmp
push
adc
xchg
iret
jp
fild
js
not
scas
aam
xchg
and
mov
ret
sbb
cmp
hlt
xchg
mov
shl
xchg
stc
mov
nop
lds
inc
mov
adc
test
jge
test
inc
cmp
push
xchg
ins
push
aaa
mov
out
dec
cmp
inc
sbb
push
mov
idiv
xchg
test
adc
stc
fwait
xchg
lock
ins
js
push
push
seta
xchg
mov
mov
cs
pushf
dec
mov
sbb
mov
rcl
sbb
jle
adc
aas
add
std
leave
xchg
mov
ss
aad
sub
outs
jne
add
xor
retf
inc
mov
mov
loopne
in
mov
push
jbe
xchg
call
gs
retf
mov
xchg
pop
xor
jecxz
js
mov
iret
fst
pop
mov
xchg
push
sbb
sbb
mov
push
xchg
or
cdq
test
cwde
dec
jo
jne
or
dec
dec
ror
retf
push
int3
lods
mov
fdivr
jg
xor
fnstcw
xchg
sub
(bad)
inc
dec
inc
shl
pop
mov
sti
xchg
xchg
fwait
stos
sbb
imul
mov
mov
adc
mov
pop
cwde
stos
cmp
loope
jg
daa
or
and
sub
aas
sub
push
sbb
jl
xchg
int
jge
fisttp
cmc
pushf
cdq
xchg
pop
xor
mov
cmp
js
inc
inc
xchg
jae
pop
jle
mov
in
ror
pushf
xchg
mov
cmp
repnz
lea
xchg
cwde
jb
sub
push
jbe
mov
cdq
stc
in
mov
mov
mov
jns
iret
push
inc
xor
scas
mov
jg
aam
sbb
imul
add
movs
adc
in
xchg
pop
adc
out
test
imul
cmp
cmp
adc
mov
xor
call
stos
scas
imul
jo
xor
sbb
call
shl
cwde
dec
icebp
push
jns
stos
xor
punpckhdq
mov
test
test
dec
pop
xor
lahf
jl
jbe
mov
in
hlt
sbb
cmp
push
loop
jge
xor
jg
call
les
fistp
(bad)
jge
movlhps
sub
mul
add
dec
rcr
push
push
mov
push
push
jb
pop
or
push
adc
jge
ds
push
mov
pusha
cmp
adc
pop
adc
aaa
push
mov
xor
shl
mov
fst
dec
mov
lock
xchg
inc
mov
xor
loope
push
cmp
push
(bad)
adc
cdq
pop
popa
sub
arpl
stos
int3
cmc
outs
out
push
das
fwait
xor
fbstp
cmp
push
mov
jge
sahf
ja
ins
in
outs
test
leave
mov
jg
mov
push
daa
mov
in
or
xchg
mov
adc
pusha
and
or
pop
lahf
dec
jecxz
(bad)
lea
adc
js
ins
jns
xchg
stos
and
cwde
add
adc
fadd
fwait
jmp
add
dec
jmp
xchg
xchg
mov
dec
or
dec
mov
sbb
xchg
test
(bad)
retf
sbb
xchg
xchg
mov
dec
pop
cmp
push
xchg
repz
dec
aad
adc
fwait
lods
xchg
and
out
xchg
jmp
rol
jae
pop
lds
sbb
aas
or
xor
sar
mul
add
aaa
jl
sbb
(bad)
sbb
popa
pop
mov
or
mov
push
test
pop
jle
fdivr
or
stos
or
push
ins
xchg
cld
add
push
dec
adc
or
ds
enter
push
mov
cdq
hlt
push
pop
movs
mov
xchg
mov
mov
pop
mov
in
popa
out
xchg
stc
loopne
outs
scas
not
pop
imul
jno
mov
jmp
ss
aam
adc
jl
sbb
mov
mov
pushf
enter
mov
lods
adc
sbb
dec
jbe
clc
adc
cmc
jge
sbb
jl
sahf
sahf
push
int3
(bad)
hlt
and
cmp
xor
out
fwait
jmp
fwait
sbb
stc
add
sub
pop
xchg
shr
mov
push
push
mov
fst
jge
outs
and
sbb
sahf
outs
mov
mov
out
les
pop
jl
pop
push
out
movs
imul
out
mov
popa
scas
xchg
and
xor
lock
cwde
es
jg
sbb
pushf
xchg
mov
out
push
and
test
dec
adc
(bad)
push
call
je
or
dec
daa
xor
in
fimul
cmps
mov
scas
int3
xchg
push
adc
jbe
mov
sbb
cmp
xchg
xchg
cli
addr16
pop
(bad)
xchg
fs
cld
call
adc
push
lods
std
mov
jns
(bad)
fsubrp
movs
push
xchg
stos
push
gs
xchg
and
test
xor
arpl
aaa
outs
xchg
sbb
ret
cdq
popf
jge
inc
lods
jle
out
and
push
xchg
cmp
dec
inc
(bad)
outs
add
xchg
push
fimul
inc
inc
xor
push
cmps
rcl
sub
mov
sbb
mov
cs
cmp
xor
push
ss
xchg
mov
test
fnstenv
mov
adc
xchg
add
lods
xchg
das
fwait
mov
cmp
mov
call
lock
pushf
out
jb
push
or
pop
push
enter
jbe
push
mov
sahf
xor
adc
jmp
jno
xchg
cwde
xchg
adc
sti
pop
loop
test
xchg
loopne
pop
leave
or
js
push
push
test
jp
xchg
nop
bound
add
jg
cmp
mov
test
aam
cwde
ds
dec
xor
ins
and
lahf
jg
push
popa
xchg
sub
(bad)
bswap
fst
sub
mov
xchg
fsub
add
xchg
inc
pop
xchg
aas
inc
pop
aam
mov
js
mov
jns
cmp
(bad)
sti
iret
pop
out
add
js
xor
gs
add
push
outs
mov
popa
push
sub
push
inc
sub
xchg
(bad)
jo
or
pop
in
mov
imul
test
cwde
push
icebp
xor
jg
inc
jp
nop
adc
sahf
out
dec
cdq
dec
sbb
adc
cmp
mov
mov
lds
xchg
or
mov
add
(bad)
into
das
mov
jle
adc
push
xor
ror
sbb
loopne
mov
rcr
popf
outs
fst
aaa
iret
xchg
push
jns
add
jae
out
add
mov
nop
cmp
ret
or
push
push
cmps
mov
dec
xchg
cmc
out
arpl
push
mov
adc
outs
repz
gs
dec
and
hlt
call
inc
not
add
fisub
mov
xchg
loope
xor
or
adc
jo
adc
inc
ss
push
pop
xchg
call
and
and
mov
ret
scas
push
inc
in
jmp
lahf
cmc
or
mov
mov
add
mov
fcomp
xor
adc
das
adc
xchg
mov
loop
aam
sbb
adc
jnp
ins
mov
ss
xor
pop
adc
ss
xlat
push
cmp
ins
sub
mov
dec
ins
xchg
xor
jl
scas
enter
pop
inc
pop
(bad)
repnz
test
cmp
fiadd
mov
adc
idiv
shl
repz
inc
dec
xchg
(bad)
arpl
push
mov
call
je
jecxz
sahf
jg
jnp
xchg
fwait
je
or
dec
jb
ins
shl
aaa
js
pop
inc
cwde
in
mov
inc
push
sub
sbb
xchg
xchg
adc
(bad)
mov
jnp
test
jecxz
mov
call
or
cmp
adc
call
and
test
xchg
and
in
xchg
mov
xor
aaa
xchg
pop
test
xchg
stos
and
fdivr
pusha
adc
xchg
int3
ror
ret
inc
mov
xchg
ins
sub
pop
pcmpgtb
dec
mov
xor
popf
aas
adc
or
mov
xor
popa
fst
call
pop
jg
mov
fild
stos
or
fwait
xchg
rcl
dec
stc
adc
sbb
adc
push
jno
xor
in
test
sub
dec
cmp
xchg
push
dec
psrlq
stos
jae
cmps
lods
inc
addr16
mov
xor
les
inc
out
mov
xchg
int3
pop
sub
out
(bad)
test
xchg
cmp
xchg
dec
inc
stos
pop
xchg
in
ret
les
jecxz
imul
mov
iret
pushf
mov
loop
lds
xchg
xor
lock
mov
ror
add
in
sar
inc
xchg
dec
ds
inc
mov
clc
mov
adc
fimul
sub
ret
adc
cmp
jmp
or
sub
xchg
mov
xchg
lds
mov
lahf
xchg
bound
mov
lock
cmp
iret
mov
cld
jb
mov
sti
in
nop
imul
mov
imul
adc
inc
pop
fnstcw
(bad)
mov
loope
push
jmp
pop
imul
xchg
je
(bad)
sub
dec
cs
cmp
xchg
je
outs
popf
mov
pop
je
loopne
xchg
test
add
cdq
pop
popa
sub
jo
outs
xor
daa
add
adc
mov
mov
or
xor
jo
cmp
push
xchg
stc
pop
call
mov
dec
fsubr
pop
mov
test
hlt
int
cmc
xchg
in
add
push
in
cmp
cmp
lahf
addr16
rcl
xchg
add
xchg
pop
mov
inc
into
adc
add
aam
cmp
icebp
xchg
hlt
pusha
aaa
sti
mov
(bad)
mov
inc
cmp
inc
mov
mov
and
jmp
and
ror
fst
hlt
ret
std
fwait
xlat
jmp
and
jge
cld
jl
add
inc
int3
push
jb
imul
stos
bound
div
gs
cli
fild
xchg
je
mov
jl
dec
push
int
aaa
shl
sub
mov
fdivr
stos
je
(bad)
rcr
sbb
pop
shl
sbb
or
xor
lds
cmc
pop
cmp
dec
pop
mov
retf
xchg
in
dec
popf
(bad)
cmps
cld
add
addr16
in
repnz
jae
jg
pop
movs
scas
jge
or
mov
jl
cmc
adc
and
pushf
rcl
pusha
mov
jge
in
gs
xchg
(bad)
lock
xchg
ins
pop
dec
xor
shr
xchg
arpl
sbb
imul
cdq
push
iret
inc
out
jle
jae
push
jp
test
ror
leave
fwait
xchg
adc
das
lea
cmp
xchg
je
shl
call
data16
push
jle
mov
call
xchg
xchg
inc
mov
popa
xchg
dec
dec
mov
add
ins
addr16
mov
je
or
xchg
push
mov
fldcw
popa
cld
gs
test
xchg
pusha
jle
jae
call
nop
aad
lahf
inc
and
xchg
cmp
or
fcom
jb
test
fbstp
mov
outs
adc
in
shr
push
pop
ficomp
dec
xchg
inc
jl
pop
(bad)
sti
mov
lods
pop
jmp
outs
xor
rol
in
push
ja
imul
dec
test
int3
loop
fild
xchg
(bad)
adc
pop
sbb
cmps
xchg
cmc
mov
fist
std
out
mov
inc
cmc
pop
xchg
out
mov
sub
sbb
xor
mov
daa
pop
xchg
in
push
scas
fistp
shl
in
or
xlat
and
fisub
sub
shl
xchg
pop
cmp
pop
cdq
gs
jle
push
fs
loop
adc
cmps
xor
dec
xchg
jp
cmp
frstor
inc
pop
or
rcl
into
push
sbb
add
push
or
fmul
push
rcl
mov
cdq
nop
add
adc
sub
xchg
arpl
imul
cmp
inc
stos
adc
loop
jmp
jae
enter
pop
rcl
adc
or
imul
mov
push
fdiv
ins
fisubr
fisubr
test
mov
stos
add
push
mov
clc
lea
bound
or
movs
or
rcl
xchg
or
fwait
jae
and
mov
sbb
or
scas
mov
cmp
pop
push
jb
pop
in
xor
jle
xchg
les
stc
push
adc
in
mov
arpl
mov
ror
cmc
mov
imul
aad
jae
call
test
xor
cwde
lahf
cld
test
int3
hlt
jmp
xchg
fsubr
sbb
pop
out
dec
movs
fmul
shr
ret
xchg
hlt
adc
jae
sbb
cld
outs
into
daa
cmp
jbe
shl
loop
std
ret
push
add
cld
lods
imul
cmc
or
call
adc
jge
and
(bad)
mov
cli
sbb
pop
(bad)
push
mov
push
push
imul
mov
(bad)
out
push
aas
(bad)
repz
out
sbb
cwde
inc
data16
call
adc
retf
xchg
jne
adc
fcmovu
sub
addr16
or
jg
mov
xor
stc
dec
aad
ror
xor
shl
mov
xor
cwde
push
xchg
data16
js
pop
jmp
xchg
mov
adc
ror
into
cmp
xor
fwait
xchg
icebp
sbb
inc
shl
push
and
std
in
xchg
into
xlat
scas
ss
call
inc
cdq
xor
test
je
mov
mov
mov
mov
mov
out
and
mov
xchg
adc
jbe
out
(bad)
sbb
mov
xchg
xchg
aaa
fstp
adc
sub
imul
add
or
ja
iret
xchg
mov
outs
jae
adc
shl
xchg
or
outs
push
out
rcr
adc
fbld
mov
xchg
addr16
(bad)
les
mov
mov
(bad)
rcr
cld
xchg
lock
xor
xchg
(bad)
xchg
dec
jne
mov
xchg
into
adc
pop
pop
int
mov
xchg
push
inc
scas
adc
arpl
mov
push
and
daa
xor
adc
into
adc
out
jne
sbb
sbb
aaa
sahf
xchg
pop
les
jmp
jp
fld
push
push
test
adc
xchg
neg
xchg
sbb
push
adc
repz
jp
stos
imul
mov
sub
cwde
aad
sbb
xchg
sbb
xchg
add
call
ss
imul
imul
jle
inc
or
fwait
cmp
(bad)
jmp
in
mov
movs
lods
ins
in
das
cmp
loop
mov
or
adc
xchg
mov
jns
in
neg
jmp
adc
jp
and
mov
xor
jg
mov
fnstcw
scas
xchg
add
es
mov
jge
outs
sbb
nop
cmps
mov
xchg
ret
pop
pop
xor
lea
jo
shl
sbb
les
dec
lds
cmp
mov
xor
int3
jl
das
xor
loope
fs
sbb
push
cli
int
arpl
cld
mov
aaa
(bad)
pop
jge
lea
inc
add
or
das
cdq
test
sbb
push
pop
and
test
ficomp
jge
xor
imul
adc
or
mov
pop
mov
mov
xor
das
in
sar
lock
gs
loopne
adc
jg
jnp
and
sub
shl
daa
push
adc
cmp
fbstp
(bad)
xchg
retf
movs
jl
clc
(bad)
pop
loop
push
push
cmps
lahf
xchg
dec
dec
push
push
mov
mov
push
cmp
fmul
xor
adc
mov
jo
loop
sti
movs
adc
adc
mov
inc
inc
hlt
or
cmp
adc
add
or
cld
adc
xchg
dec
fcmovb
xchg
cmps
dec
or
das
lea
mov
mov
popf
jo
xchg
cmp
sbb
dec
dec
push
xchg
hlt
mov
clc
daa
shl
hlt
pop
sub
xchg
xchg
enter
adc
js
cmps
push
jnp
test
sbb
arpl
imul
xchg
shr
les
xchg
mov
or
cmp
dec
or
mov
icebp
jae
bnd
aad
or
adc
push
bound
xchg
inc
int
daa
sub
xchg
inc
mov
xor
and
adc
push
and
es
push
mov
mov
jno
cmp
fcom
dec
lods
adc
jge
in
or
xchg
arpl
fistp
pop
cdq
xchg
mov
xchg
test
popf
jae
xchg
cwde
inc
loop
adc
data16
push
inc
mov
push
jl
enter
inc
inc
mov
inc
mov
push
js
adc
xchg
fdivr
or
pop
pop
test
inc
cdq
in
cli
lock
mov
popa
jl
mov
push
test
(bad)
in
mov
cmp
stos
jo
(bad)
cmp
cmc
mov
fcomp
aam
sbb
mov
push
cmps
lods
jle
jl
xchg
mov
inc
ins
fs
pop
xchg
jne
sbb
rcr
mov
xlat
(bad)
je
inc
aam
popf
test
pop
mov
xchg
adc
test
lock
push
out
mov
cld
push
xchg
mov
cmps
push
lods
push
mov
mov
xchg
xchg
jmp
hlt
into
dec
mov
sbb
fwait
ret
repz
frstor
adc
ja
mov
push
js
stos
and
sbb
mov
and
arpl
push
repz
dec
xchg
or
out
fcom
xor
lock
into
dec
pop
xchg
inc
ja
xchg
pop
fwait
daa
mov
push
pop
(bad)
mov
stos
add
lock
fs
xchg
fisttp
aad
and
bound
scas
mov
les
adc
inc
mov
push
in
mov
cmp
ror
or
lock
jns
sub
jb
inc
inc
arpl
jle
xchg
mov
xor
xchg
pop
adc
add
push
jge
and
add
rcl
popa
xor
xchg
in
std
shl
int
ja
jnp
add
jmp
icebp
xor
or
xchg
push
lods
mov
int
adc
xchg
clc
imul
mov
movs
scas
pop
in
sub
xor
xor
add
lsl
imul
dec
sbb
mov
and
sub
shr
jge
cdq
test
xor
daa
cwde
dec
loop
sbb
ds
aad
add
jae
je
scas
xchg
out
jbe
xchg
pushf
lds
fild
xchg
jnp
shl
pusha
add
cmp
(bad)
and
cmp
ret
xor
push
aam
fisttp
sub
xchg
test
push
mov
stos
cmp
mov
push
cmc
mov
jno
hlt
push
(bad)
enter
mov
jae
mov
cmp
jo
xchg
in
push
jnp
repz
mov
xor
sub
mov
pop
cmp
adc
sub
jb
fisttp
aad
pop
push
(bad)
cmps
int3
cwde
sub
nop
dec
xchg
jg
bound
xchg
pop
mov
jle
stos
jge
and
xchg
sbb
or
call
bound
fnstenv
and
sbb
xchg
fisub
jl
adc
jg
cmp
mov
and
push
lock
adc
push
adc
enter
out
mov
xor
test
in
xor
loop
add
out
cwde
or
jge
je
dec
pop
push
or
aam
sbb
js
xchg
xchg
push
fs
mov
xchg
div
push
out
inc
mov
(bad)
jge
outs
call
bound
jl
fcom
jge
pop
or
into
cmp
xchg
jmp
pop
dec
pop
sbb
inc
inc
xchg
xchg
jecxz
pop
and
outs
mov
or
mov
or
xchg
popf
jl
or
or
add
test
call
scas
xchg
xchg
daa
or
fnstsw
rcl
push
(bad)
jae
lahf
mov
jne
stos
and
adc
scas
cmp
push
cmps
xchg
jmp
pop
in
aad
xor
repz
cli
xchg
adc
sub
cdq
xor
movs
add
xchg
(bad)
mov
pop
push
pushf
test
mov
aam
cmps
pop
sub
push
ss
cmp
add
cli
loopne
inc
mov
xchg
sub
dec
push
push
mov
div
arpl
sbb
clc
fst
ret
and
jge
add
inc
xchg
mov
hlt
xchg
lahf
addr16
dec
iret
pop
ins
or
xor
xor
add
fcom
shr
call
popf
gs
add
xchg
not
jmp
xchg
shl
data16
mov
les
out
int
pop
and
cli
mov
jle
xchg
hlt
call
jl
hlt
push
mov
xor
adc
(bad)
repnz
add
xchg
or
add
add
adc
cld
pusha
xchg
ret
mov
push
jle
call
cmp
out
push
inc
sub
xchg
in
or
fbstp
xchg
xchg
adc
and
nop
xor
lahf
inc
dec
test
adc
sti
mov
rcl
cwde
data16
mov
mov
jecxz
inc
xor
dec
fwait
mov
mov
ror
xchg
into
add
push
pop
test
pop
jmp
push
pop
(bad)
into
jg
addr16
xor
or
sub
ja
pop
cmp
or
movs
adc
jecxz
cmp
lahf
jb
xchg
adc
repnz
pop
dec
pop
dec
rcr
int
loop
sbb
enter
fstp
inc
push
pop
ret
adc
sbb
mov
cmp
xchg
or
dec
adc
movs
(bad)
ret
inc
and
popf
inc
xor
xchg
xchg
inc
clc
data16
imul
stc
dec
outs
jmp
test
push
call
inc
xor
adc
pushf
xchg
mov
out
jne
outs
adc
int3
cld
outs
data16
xor
adc
xor
out
stc
adc
out
xchg
fistp
push
pusha
mov
rcr
sbb
dec
mov
mov
repz
xchg
iret
push
lods
xchg
pusha
shr
or
mov
aam
sbb
in
jmp
xchg
xor
retf
ss
stos
and
mov
stc
pop
push
hlt
sub
sub
inc
popf
dec
mov
test
xchg
pop
inc
inc
shl
mov
mov
push
or
push
add
jo
cld
pop
inc
sub
stos
mov
xchg
mov
jne
xor
aam
ss
fwait
ret
mov
jge
(bad)
push
es
sar
pop
inc
lds
adc
(bad)
dec
hlt
adc
mov
pop
pop
mov
in
pusha
or
and
ja
fstp
sub
push
sub
dec
mov
test
fs
fwait
enter
daa
test
lods
and
push
sbb
cmp
mov
sbb
and
out
daa
push
mov
inc
icebp
aaa
repz
jo
shr
push
es
jg
jge
mov
(bad)
cld
pop
bts
mov
adc
pop
clc
nop
xor
std
fimul
iret
int3
rcr
popa
jge
mul
out
js
mov
sahf
dec
hlt
adc
cmp
xchg
adc
jle
add
mov
jbe
xor
mov
jbe
xlat
inc
mov
popf
cmp
(bad)
and
xchg
cmp
sbb
dec
mov
adc
aam
imul
xchg
pop
fcmovne
data16
(bad)
sti
ficom
stos
lea
xchg
cmp
pop
cmp
sub
inc
into
call
sbb
inc
imul
cmc
mov
xchg
in
sti
ins
and
push
xchg
cld
push
fwait
mov
cdq
sbb
jg
xchg
hlt
les
fwait
sbb
xchg
pop
inc
xchg
dec
ficomp
imul
and
int
leave
repz
sbb
les
icebp
xchg
mov
pop
xchg
jnp
sti
iret
gs
jmp
lock
mov
fsub
xchg
pop
aam
call
scas
jnp
dec
mov
(bad)
jl
scas
sti
xchg
add
test
dec
mov
jmp
xchg
icebp
ja
adc
mov
or
mov
lea
sbb
xchg
mov
cmp
std
ret
mov
and
repz
jg
fist
enter
in
sub
dec
call
stos
sahf
hlt
mov
or
push
dec
mov
cld
jp
mov
pop
mov
ret
push
pop
add
mov
mov
pusha
shl
mov
inc
xchg
retf
mov
(bad)
or
xchg
pop
sub
in
xor
mov
test
push
jmp
out
pop
fisubr
pushw
setnp
in
cmp
mov
stc
ror
(bad)
push
sahf
jnp
xchg
mov
sbb
lock
pop
jo
ret
pop
dec
pop
mov
ja
enter
outs
mov
mov
push
push
out
out
fisub
je
adc
fwait
pop
out
imul
idiv
ins
dec
vmovaps
mov
movs
outs
loop
xchg
adc
dec
sahf
push
ss
(bad)
leave
out
mov
fs
popf
stos
sbb
or
xchg
sbb
mov
adc
cmp
in
push
mul
pop
xor
inc
sbb
xchg
xchg
dec
movs
cdq
mov
xchg
dec
fiadd
sbb
sub
(bad)
sub
sub
mov
pop
mov
ja
sub
sub
lock
dec
popf
loope
xchg
cmp
xchg
mov
arpl
adc
iret
xchg
sub
into
leave
sub
cmp
cmp
jmp
fwait
aam
mov
push
js
int
test
cmc
(bad)
mov
mov
add
xchg
xor
sbb
jmp
fs
stc
and
xchg
jl
xchg
(bad)
mov
and
daa
xchg
popf
call
mov
sti
mov
in
sbb
xchg
inc
dec
arpl
mov
fwait
movs
mov
adc
mov
pop
dec
popa
jle
sti
cmp
stc
popf
and
xchg
xchg
(bad)
mov
xchg
xor
sub
xchg
clc
dec
mov
cwde
stos
ret
sub
scas
hlt
add
xchg
add
fcomp
or
lahf
mov
into
jno
sbb
sbb
loop
xchg
int3
lds
shl
push
pusha
daa
cmp
xchg
or
retf
xchg
pop
mov
jmp
push
pusha
aas
adc
mov
repnz
push
retf
popf
icebp
add
mov
outs
jne
xchg
sti
xchg
inc
pop
add
xchg
retw
(bad)
adc
xchg
or
mov
push
adc
mov
cwde
sub
pop
cs
mov
mov
adc
aaa
(bad)
xchg
xchg
mov
mov
stos
call
cld
div
xor
cli
out
fisttp
loopne
int3
fwait
iret
sub
xor
pop
inc
mov
jb
fsubr
out
jmp
fstp
ret
adc
or
mov
xchg
iret
lds
and
xlat
ins
or
adc
sahf
add
adc
(bad)
test
mov
daa
and
xor
stc
mov
xor
xchg
test
outs
fnstsw
mov
ret
dec
daa
mov
xor
jecxz
bound
jmp
(bad)
mov
xchg
ret
pop
mov
rol
dec
xor
cmps
enter
call
(bad)
nop
xchg
xchg
mov
sbb
cmp
aaa
mov
xlat
jb
cmp
inc
ins
push
xchg
cmps
mov
mov
xchg
jmp
sub
xchg
pushf
mov
fidiv
push
popf
fnsave
leave
push
mov
fbstp
cmp
ret
stc
mov
(bad)
lock
cwde
sub
jnp
mov
jg
inc
cmps
jge
inc
add
push
xchg
xor
loop
xlat
adc
jl
xchg
inc
icebp
mov
movs
es
xchg
outs
arpl
out
mov
cmc
pushf
mov
xor
jmp
mov
cs
jbe
or
xor
jae
cmp
test
mov
jb
xchg
xchg
call
mov
fs
cmp
repnz
push
mov
xchg
xor
(bad)
out
loopne
fs
sub
push
sbb
xchg
sbb
mov
(bad)
outs
adc
cmp
jmp
out
(bad)
sub
mov
dec
(bad)
mov
fwait
adc
test
xor
mov
mov
in
mov
dec
xchg
cld
push
(bad)
loopne
pusha
adc
mov
and
(bad)
movs
ins
and
xchg
ja
xchg
pusha
jle
push
cmps
sti
dec
fisub
mov
aaa
out
inc
js
mov
mov
data16
mov
pop
or
clc
mov
xor
add
cmps
mov
inc
xchg
nop
dec
jmp
pop
in
jl
scas
xchg
jp
fwait
xchg
retf
adc
(bad)
adc
mov
xchg
rcr
inc
mov
dec
xor
mov
xchg
or
xor
xchg
and
int3
addr16
xchg
cmp
rol
aam
inc
icebp
xchg
bound
pop
xchg
outs
cs
dec
mov
cwde
inc
(bad)
(bad)
xchg
push
xor
mov
add
push
outs
add
mov
xor
push
push
push
(bad)
les
inc
fwait
adc
arpl
or
jbe
xchg
inc
aam
xchg
bound
inc
push
mov
mov
out
(bad)
xor
loopne
mov
and
sbb
xchg
outs
xchg
sub
push
xor
enter
aam
add
sub
xchg
arpl
xor
xchg
retf
dec
pop
mov
iret
jno
sbb
ja
mov
xor
jecxz
jmp
xchg
ja
dec
adc
jle
stos
or
fst
(bad)
stc
jno
movs
mov
lods
fidiv
xchg
mov
scas
dec
add
add
push
fwait
pop
push
xchg
call
lahf
xor
and
push
sbb
imul
pop
inc
adc
iret
ins
mov
popf
or
stos
sbb
mov
inc
lods
xor
jo
ss
push
test
xchg
cmp
cmps
and
retf
mov
adc
xchg
cmp
dec
shl
in
outs
xchg
aas
cmp
push
xchg
(bad)
cmc
rcr
mov
les
mov
sbb
sub
jge
xchg
and
lods
pop
ins
push
(bad)
xor
mov
xchg
xchg
aad
and
call
retf
(bad)
dec
mov
outs
mov
jl
fldlg2
je
xchg
add
arpl
jo
add
movs
rol
sbb
inc
inc
sahf
lock
cdq
retf
outs
dec
test
xchg
pop
add
jmp
and
xor
enter
jb
xchg
int
(bad)
jmp
xchg
push
ins
sub
pop
mov
xchg
mov
outs
adc
loope
push
or
sbb
ffree
sub
xchg
popa
cmps
adc
test
mov
pop
les
push
dec
xchg
test
add
loope
and
xchg
jno
dec
shl
xchg
push
shl
pushf
xchg
xchg
push
das
aas
js
mov
sahf
mov
in
sub
jmp
popf
shl
mov
xchg
pop
add
js
adc
jle
ins
aam
cmp
dec
dec
cwde
push
xchg
pop
mov
shl
test
cwde
ins
(bad)
mov
aam
stos
pop
inc
sysret
xchg
mov
adc
outs
or
and
pop
enter
(bad)
fwait
pop
jne
hlt
stos
pop
or
fwait
inc
(bad)
aam
xchg
mov
and
lock
das
icebp
dec
ret
xchg
ds
lock
pop
cmps
dec
ss
cmps
xor
xor
outs
dec
pop
cmp
movs
fs
push
push
jo
push
xor
mov
repnz
xor
pop
fistp
jmp
popf
pop
dec
lods
in
sbb
adc
mov
rcr
cli
cld
imul
repnz
jae
loopne
sbb
stos
fwait
cld
movs
in
xor
mov
push
mov
pop
sbb
jge
fiadd
mov
lahf
(bad)
outs
jl
push
push
out
and
std
jne
ret
sub
or
adc
pushf
xchg
in
xchg
cli
mov
std
fadd
aaa
adc
ins
stos
repnz
push
lahf
imul
rcl
shl
(bad)
(bad)
imul
adc
in
es
xchg
xchg
mov
mov
lds
outs
mov
and
shl
sbb
or
pusha
mov
mov
cmc
sbb
fs
mov
les
loop
jl
inc
push
xchg
dec
and
rcl
lahf
test
cdq
imul
leave
aad
stc
inc
aam
iret
(bad)
cwde
xor
retf
mov
enter
mov
pop
je
mov
repz
lods
cmp
repz
jb
ret
retf
call
int3
inc
lock
nop
das
in
test
rcr
and
movs
jge
or
into
je
test
jge
stos
xor
retf
int3
cmc
jae
inc
mov
jns
mov
dec
lea
xchg
out
nop
fbld
lock
inc
xchg
push
cmps
sahf
xchg
jae
jl
push
xchg
idiv
xor
sti
call
call
and
sti
pusha
lahf
xchg
mov
push
cwde
or
adc
mov
loop
jecxz
je
hlt
hlt
sub
leave
jl
repnz
nop
xor
push
sbb
fadd
dec
gs
pop
dec
fmul
scas
xchg
mov
test
test
jge
dec
dec
mov
mov
popa
(bad)
cwde
jmp
movs
sbb
int
sub
cmp
sahf
jmp
push
aad
cmp
aas
dec
mov
push
mov
cmp
in
iret
push
cli
popf
sbb
gs
jl
jne
xor
mov
out
lahf
pop
and
sbb
ror
lds
aas
xchg
xchg
pop
mov
cmps
or
rol
sub
aaa
sub
stos
dec
xchg
jmp
lods
mov
aam
ins
jae
std
xchg
sbb
hlt
dec
push
shr
sbb
push
cli
jmp
push
xchg
lahf
or
push
ds
mov
sub
xchg
jo
jb
adc
add
call
iret
push
push
ja
add
loopne
movs
sahf
and
fisttp
stos
cmp
push
rol
loopne
gs
and
xchg
xchg
push
addr16
mov
sub
in
(bad)
push
cmp
dec
push
cmp
sub
jnp
gs
jmp
and
out
push
and
push
dec
rcr
sub
loope
retf
fisttp
jge
or
or
aad
mov
sbb
je
rol
push
dec
ss
push
pop
and
movs
push
jmp
pop
aas
and
stos
out
jmp
or
cmc
xor
loop
sub
adc
push
adc
movs
sbb
mov
and
jp
push
test
xchg
mov
xor
mov
mov
pop
add
xchg
sar
push
daa
cwde
fdiv
adc
aaa
xchg
xchg
in
push
sub
shr
xchg
mov
out
cmp
dec
test
pop
mov
das
call
adc
mov
xchg
ss
sbb
jecxz
retf
push
popa
cmc
in
xchg
mov
or
leave
out
adc
aaa
fild
push
loopne
xor
ins
sbb
xor
int3
aam
jo
ins
repz
mov
cmp
mov
pusha
mov
ss
and
adc
add
out
xor
adc
stos
pop
lds
jg
ja
sbb
stos
mov
and
pop
mov
mov
cmp
fnsave
push
inc
iret
or
jns
gs
int
test
jecxz
fwait
xchg
jmp
std
xchg
fcom
pop
lahf
add
mov
std
cmp
xor
sub
inc
rcr
push
push
je
inc
jmp
xor
mov
xchg
or
cwde
push
(bad)
std
cmp
add
mov
adc
xchg
dec
hlt
fcmovu
pop
mov
gs
sbb
push
outs
push
xchg
xchg
or
stos
rcr
add
xchg
stos
ja
(bad)
push
sub
xchg
sub
mov
and
rcl
les
loope
jmp
jbe
popa
jecxz
test
lock
xchg
bound
jne
popf
xchg
mov
loop
daa
jbe
xchg
jns
in
stc
xor
mov
mov
mov
jle
jl
push
mov
pop
push
stc
ret
xchg
adc
imul
leave
stos
push
xchg
mov
inc
outs
add
sub
bound
jmp
neg
js
push
cld
repnz
xchg
mov
fdivp
and
enter
dec
dec
xor
push
call
(bad)
push
and
cmps
in
inc
sub
sbb
inc
dec
push
xchg
xor
cmp
jp
cdq
push
lock
jb
pop
xchg
adc
jmp
mov
in
clc
mov
stos
push
mov
fisttp
fidivr
push
mov
ja
sahf
mov
stos
jge
xor
cmp
dec
add
out
sbb
jmp
dec
mov
ss
lock
xchg
loopne
in
or
add
(bad)
(bad)
mov
adc
mov
scas
cmp
cmp
mov
and
push
int
and
cmp
xchg
mov
inc
cmp
xchg
fucomp
xor
stos
xchg
sar
pusha
cmps
in
idiv
add
xchg
out
xchg
xchg
jl
icebp
or
fld
stc
xchg
jmp
test
bound
xchg
pop
nop
pop
js
xchg
cmp
jb
xchg
lea
jmp
ja
retf
sbb
xchg
mov
cld
iret
xchg
scas
push
mov
xchg
es
nop
cmps
inc
out
neg
mov
repz
into
out
pop
adc
in
shl
ret
pop
xchg
jmp
mov
sub
adc
xchg
outs
pop
jmp
popf
test
or
(bad)
repz
pop
and
inc
mov
and
rcr
mov
jle
mov
mov
call
pop
addr16
mov
es
fwait
xchg
sahf
cwde
cs
sub
pusha
imul
data16
adc
push
movs
inc
pop
add
xchg
lock
or
test
jmp
dec
xchg
dec
sub
fldcw
dec
add
and
std
fadd
pop
les
jmp
inc
test
repz
inc
mov
mov
xchg
mov
ss
cdq
(bad)
add
out
jo
push
mov
jbe
xor
push
mov
dec
xchg
mov
lock
aad
cmps
mov
cmp
repz
(bad)
popa
push
add
xchg
int3
je
push
jg
inc
xor
mov
xchg
mov
add
mov
xchg
sub
popa
mov
cmp
cmp
adc
aas
mov
xchg
push
test
inc
mov
ins
(bad)
mov
ss
xchg
xchg
loopne
hlt
fimul
adc
xchg
and
add
cmovl
xor
les
fidiv
sbb
mov
mov
jmp
int3
fwait
dec
and
push
jl
xchg
and
loopne
xchg
cld
pop
dec
push
retf
sbb
inc
gs
repnz
mov
stos
push
push
or
ret
or
jecxz
(bad)
sub
jg
lahf
or
mov
jl
mov
ja
xchg
mov
xchg
xor
jmp
rcl
pusha
xchg
in
push
sbb
mov
mov
loopne
push
xchg
nop
mov
cmp
sbb
test
cmp
mov
mov
sbb
sub
cmp
and
sbb
repz
inc
les
add
lods
hlt
imul
pop
sbb
and
addr16
jno
sub
xchg
push
out
(bad)
or
fwait
mov
lahf
pop
ds
nop
aas
arpl
cmp
mov
xlat
cmps
shr
call
in
push
shl
adc
inc
int3
mov
push
xchg
adc
cdq
popf
je
mov
ret
ret
xchg
daa
outs
inc
(bad)
dec
test
push
and
and
xor
mov
jns
and
mov
jmp
xor
mov
or
ins
jbe
not
fs
xchg
in
cmc
lods
mov
ds
or
retf
mov
sbb
and
cmp
mov
xchg
popf
cmp
sbb
mov
aad
mov
xor
sahf
pop
inc
popa
scas
jno
xchg
push
inc
xchg
int3
mov
jae
addr16
xchg
ret
sub
xchg
jbe
push
movs
rcr
jnp
add
inc
rcl
clc
xchg
fimul
push
sbb
cmp
adc
sbb
push
sbb
xchg
sbb
xlat
psrlq
adc
mov
sbb
xor
mov
and
cld
xchg
retf
inc
mov
add
ret
xchg
push
ret
xor
or
jle
add
into
sbb
jp
mov
js
jl
pop
dec
xchg
test
inc
sub
jo
push
push
mov
jb
jbe
pushf
and
nop
shr
mov
mov
std
xchg
std
int3
mov
lods
out
push
pushfw
pop
ret
push
fnsave
push
mov
xchg
int
arpl
push
data16
xor
or
dec
xchg
and
loope
add
pushf
xchg
scas
ffree
inc
pop
cmps
(bad)
xchg
xchg
aad
addr16
jne
sub
lea
push
in
popf
out
imul
inc
pop
xchg
lods
cmp
test
adc
sbb
sub
sub
or
loopne
xor
fdiv
ud2
xchg
xor
jno
cmp
adc
cwde
mov
test
push
xchg
add
repz
jbe
xchg
stc
or
cmps
sub
fild
popf
xor
addr16
pop
xchg
and
sbb
clc
xchg
xor
fcom
adc
mov
xor
ret
sbb
out
sub
rcl
adc
movs
aam
sbb
gs
test
mov
xchg
div
out
fcomp
pusha
in
mov
pushf
xchg
sub
cmp
push
mov
fwait
sti
mov
fisub
dec
mov
enter
sbb
std
xlat
xchg
sti
dec
fidiv
mov
test
in
cld
cwde
lea
mov
mov
stos
xor
loope
add
adc
rcl
shr
xchg
(bad)
fnop
mov
popf
ins
jg
xor
mov
sbb
push
xchg
fcmove
test
(bad)
xchg
fwait
sub
ja
fwait
mov
enter
sub
cwde
pop
xlat
stos
shl
ror
cwde
mov
pop
xor
adc
push
and
mov
mov
ret
cmps
xchg
jl
mov
mov
xlat
dec
js
inc
fdivr
jmp
pushf
push
mov
push
pop
jbe
arpl
xchg
(bad)
(bad)
shr
das
call
repz
cmps
or
rcl
les
xchg
or
dec
test
xchg
mov
sahf
daa
and
movs
cs
pop
adc
cmc
push
(bad)
xchg
mov
add
mov
test
(bad)
mov
ss
ror
sahf
adc
mov
fs
gs
pusha
dec
cwde
(bad)
mov
in
ret
xor
stc
js
aam
aas
push
test
lea
repz
and
add
popa
jae
xchg
in
mov
in
mov
test
fdivr
inc
mov
out
out
test
sti
mov
xor
mov
rol
lea
ja
stc
hlt
jecxz
add
mov
mov
fdivr
and
movs
mov
xor
xchg
pop
push
jmp
adc
cmps
out
arpl
mov
lock
imul
xchg
sub
add
xchg
pop
and
sub
imul
mov
dec
push
jbe
sbb
or
hlt
sub
jo
ins
pop
div
cld
lods
xchg
xchg
(bad)
stos
xchg
inc
mov
or
mov
xchg
cmp
loopne
test
and
xchg
mov
mov
xchg
xor
and
pop
cwde
jbe
dec
adc
je
dec
je
xchg
sub
jg
cmps
lods
mov
xlat
ror
popa
jp
xchg
mov
pop
adc
xchg
and
out
dec
mov
and
pop
push
call
push
pop
test
adc
popf
jg
fimul
adc
movs
std
sbb
inc
mov
mov
cmps
mov
pop
bound
mov
adc
sbb
and
iret
or
sub
lahf
push
pop
sahf
adc
je
ins
sub
adc
pop
xchg
xchg
(bad)
mov
xor
dec
pop
xchg
lahf
ss
in
sub
mov
fcom
sub
xlat
adc
and
mov
mov
dec
jae
mov
add
sbb
repnz
xor
adc
mov
dec
lock
xchg
add
test
xlat
mov
cmp
mov
test
dec
dec
xchg
mov
mov
push
(bad)
xchg
mov
mov
xchg
xchg
cmc
outs
xlat
mov
xchg
popa
cmp
jge
push
fwait
and
and
lock
enter
mov
aaa
je
popf
pop
jg
sub
call
push
fwait
scas
in
jle
xchg
mov
mov
(bad)
rcl
push
xchg
pop
xchg
movs
pop
sbb
js
not
sbb
push
or
bound
sbb
retf
push
jecxz
pop
mov
push
add
bound
arpl
(bad)
xchg
aas
xchg
and
call
mov
std
ficom
fprem1
xchg
repnz
push
sub
inc
pop
call
push
xchg
popa
cmp
ret
out
movs
or
inc
mov
lahf
repnz
mov
push
cmp
push
pop
push
addr16
cmp
mov
data16
xor
aad
je
xchg
xchg
dec
iret
adc
mov
rcl
dec
mov
loopne
outs
hlt
xchg
inc
pop
xchg
adc
inc
ds
pop
xor
adc
int
leave
sub
icebp
xchg
xchg
cmp
jmp
daa
pushf
inc
mov
xlat
adc
in
mul
xchg
(bad)
cld
jecxz
pop
fdiv
nop
mov
enter
jge
pop
fidivr
cmp
jg
imul
(bad)
mov
add
jecxz
xchg
inc
mov
xchg
nop
ficomp
jmp
das
pop
pop
fsubp
out
ret
and
mov
dec
sti
and
(bad)
in
add
and
push
inc
stos
and
xchg
pop
adc
mov
mov
push
(bad)
pop
hlt
ret
dec
stos
mov
xchg
xor
in
xchg
mov
xchg
pop
leave
mov
je
test
or
repz
xchg
fstp
(bad)
js
inc
sub
aam
and
mov
jle
cmp
mov
xchg
xor
das
xchg
cmp
je
aam
call
out
inc
ret
(bad)
repz
sbb
fs
pop
push
lock
xchg
inc
imul
mov
xchg
enter
rcl
dec
add
pop
test
pop
xchg
cs
xchg
adc
in
and
cmps
sti
dec
std
adc
and
mov
mov
cmp
rcl
lock
ror
inc
fidivr
out
outs
mov
lods
xor
pop
xchg
addr16
(bad)
sbb
xchg
adc
pop
in
xchg
shl
xor
xchg
bnd
nop
fs
sbb
or
xchg
xchg
test
sub
pop
lock
mov
sbb
xchg
aaa
jp
retf
mov
sub
xchg
imul
or
test
jno
fld
mov
or
xchg
es
mov
mov
test
xchg
jecxz
xchg
adc
add
cwde
cmp
xchg
ret
retf
and
das
fst
out
sbb
pop
pop
mov
push
push
test
inc
mov
cmps
dec
push
imul
lea
into
cdq
jmp
push
ror
xor
mov
xor
or
dec
mov
push
push
ds
adc
dec
hlt
inc
xchg
ret
pop
repnz
(bad)
mov
jp
mov
or
popf
cmps
xor
mov
lds
in
popf
mov
movs
mov
adc
mov
sbb
in
dec
xchg
cdq
sahf
stos
cmp
lods
fldenv
fimul
lock
cmps
pop
outs
mov
addr16
mov
adc
cmps
jp
xchg
(bad)
mov
ja
push
jbe
dec
jmp
dec
xchg
test
aaa
stos
jge
push
xchg
loope
loopne
xchg
xchg
outs
cwde
sbb
jl
cmp
test
mov
sub
cmp
(bad)
call
popa
dec
adc
xchg
add
loop
pop
outs
mov
jecxz
mov
xchg
sbb
mov
ret
xchg
xchg
xchg
sbb
or
pop
add
int3
push
fidiv
inc
inc
xchg
pop
movs
icebp
adc
jno
in
xchg
pop
mov
stos
test
cmps
test
sti
mov
neg
xor
xor
mov
rcr
push
or
mov
pop
push
pop
xchg
pop
(bad)
inc
xchg
xchg
stc
mov
clc
xchg
scas
push
js
xchg
cwde
leave
xor
adc
xchg
adc
adc
mov
fbld
(bad)
into
xchg
out
pusha
fucomi
dec
icebp
sbb
movzx
xchg
xor
mov
xchg
push
outs
cmp
bound
pop
mov
mov
mov
aad
pop
rcl
(bad)
sbb
outs
(bad)
xchg
sbb
mov
xchg
xor
or
sbb
and
icebp
jns
cmp
in
and
mov
push
xchg
lods
movs
and
movs
popa
js
xchg
pusha
or
adc
add
hlt
cmc
sub
xchg
jle
jmp
les
pop
(bad)
sahf
sub
and
xlat
(bad)
mov
out
outs
call
jae
xchg
sbb
add
pusha
ss
mov
aam
push
and
mov
adc
icebp
(bad)
daa
push
call
dec
push
add
sub
or
cmp
mov
xor
mov
xchg
xchg
mov
imul
jmp
cdq
movs
jge
mov
sbb
repz
aad
cli
sbb
adc
cdq
push
sbb
dec
ret
xor
das
icebp
pop
repz
push
pop
stc
js
xchg
mov
inc
push
arpl
sbb
sub
mov
fist
call
aad
outs
add
cs
test
je
pop
mov
mov
adc
push
xchg
scas
dec
inc
cli
aam
es
pop
data16
xlat
xchg
retf
jne
hlt
push
dec
xchg
inc
ins
jecxz
mov
nop
call
mov
cdq
int
(bad)
xchg
xchg
cmp
xchg
add
pop
xchg
ffree
jns
adc
not
test
inc
xor
mov
xor
call
sbb
inc
in
(bad)
push
movs
mov
ins
inc
hlt
out
mov
push
popa
or
(bad)
push
retf
rcr
pop
xchg
sti
add
xchg
scas
xor
cwde
and
(bad)
pop
je
push
sbb
movs
push
cwde
addr16
pop
mov
loopne
icebp
adc
xchg
or
push
jns
add
xchg
jb
ret
push
mov
lds
and
mov
stos
mov
test
in
or
push
mov
or
xchg
aaa
movs
pushf
jmp
mov
xchg
mov
in
das
enter
xchg
dec
jnp
sub
jne
(bad)
xchg
pop
xor
sbb
sub
push
rcl
adc
xchg
test
jns
add
mov
inc
je
xor
mov
arpl
test
push
sbb
cwde
gs
retf
jmp
test
(bad)
mov
das
push
xchg
or
mov
pop
xchg
in
popa
or
mov
stos
xchg
mov
arpl
aam
xchg
xchg
repnz
inc
cmp
popa
movs
xchg
xor
mov
jns
nop
push
lods
xchg
pushf
(bad)
clc
(bad)
cmp
aas
xchg
xlat
push
dec
outs
sbb
mov
mov
add
rol
in
sbb
push
jne
out
arpl
jp
cmps
mov
or
mov
scas
repnz
xor
out
push
mov
cmps
push
adc
push
in
popf
push
xchg
not
imul
mov
and
push
xchg
sbb
imul
rcl
mov
xchg
popf
jmp
jbe
mov
push
pusha
xchg
inc
sbb
xchg
jb
sbb
out
jg
xchg
call
xchg
xchg
pusha
jmp
pop
dec
sub
movs
xchg
pop
inc
cli
dec
push
pop
scas
fcom
in
(bad)
xchg
arpl
shr
xchg
pop
neg
imul
adc
xor
sbb
icebp
shr
xor
je
pushf
scas
push
js
frstor
pop
push
cmp
rcl
xchg
push
mov
movs
add
push
push
cmc
xchg
cwde
xor
xchg
pop
stc
xchg
in
lods
popf
mov
stos
and
mov
jmp
sete
nop
fldenv
xchg
es
mov
(bad)
repnz
popf
add
imul
pusha
jp
repz
push
xchg
das
inc
lahf
jae
dec
inc
adc
fmul
dec
xchg
cmp
cmp
mov
cwde
ret
mov
into
mov
inc
fistp
dec
mov
imul
cmp
pushf
mov
xor
adc
gs
dec
mov
addr16
push
bound
and
popf
loope
cmps
sbb
push
or
imul
dec
xchg
lods
daa
inc
cmp
xor
xchg
js
mov
sbb
retf
jmp
sbb
jp
cld
gs
pop
and
jns
movs
push
int3
div
mov
test
sar
add
cdq
adc
xchg
pop
mov
sub
cmp
xor
js
js
xchg
push
cmp
data16
xor
movs
xchg
mov
dec
adc
sar
and
loopne
mov
xchg
sbb
int
push
repnz
push
stos
je
in
dec
inc
adc
inc
(bad)
test
or
xchg
mov
stc
add
xchg
out
mov
and
dec
ds
dec
out
das
sbb
lock
and
adc
jns
mov
daa
dec
lahf
gs
stos
enter
adc
ins
xor
mov
adc
mov
lahf
mov
cmps
push
jo
jl
xchg
ss
mov
inc
repnz
adc
xchg
xchg
repz
mov
fcomp
jg
scas
imul
inc
(bad)
(bad)
push
push
xchg
pop
sbb
cdq
loope
xchg
hlt
test
or
push
push
inc
js
or
sar
in
shl
pop
loop
adc
xor
inc
adc
cld
test
cdq
mov
pusha
mov
mov
shr
push
stos
cwde
jge
stc
push
mov
or
sub
ret
daa
xchg
in
repnz
aam
mov
lock
pusha
mul
mov
outs
movs
stos
mov
cmps
jae
xchg
pinsrw
and
xor
jno
popf
pop
pop
jmp
aad
or
inc
les
mov
dec
pop
sub
stos
mov
outs
mov
mov
cmp
retf
pushf
fmul
pop
or
add
adc
sbb
inc
jmp
and
mov
inc
mov
xchg
(bad)
stos
shl
cmp
xchg
mov
xor
sub
dec
cmp
push
adc
je
sbb
cld
dec
jno
loop
out
inc
popf
adc
in
add
inc
mov
out
push
pop
fwait
dec
cmp
(bad)
jnp
xchg
pushf
push
nop
stos
jae
stos
cmp
loopne
jmp
jbe
repnz
add
test
repz
adc
and
rcr
xchg
mov
inc
lea
mov
cld
pushf
iret
inc
mov
popa
(bad)
mov
movs
mov
jno
add
scas
call
mov
outs
cdq
retf
pop
pushf
add
jle
push
adc
sub
adc
aam
jle
mov
jo
mov
xor
fwait
sbb
cmp
adc
call
fist
aam
lds
and
daa
scas
cmp
repnz
fisub
mov
(bad)
loop
push
xor
movs
test
lods
xchg
pusha
enter
xchg
aas
or
and
or
int
fs
shl
jns
push
mov
mov
adc
inc
ret
xchg
jecxz
sti
push
xchg
push
es
pusha
rcl
cmp
push
in
ret
adc
adc
std
ins
sub
jecxz
jb
jae
pop
ss
pop
sub
hlt
jp
pusha
mov
mov
loopne
mov
popa
xchg
mov
fnsave
rcr
xchg
loop
pushf
mov
sub
adc
xchg
inc
ds
sub
mov
xchg
mov
xchg
stos
or
jno
popf
xchg
mov
adc
popf
adc
or
ins
cs
stos
aam
sub
pop
cdq
inc
int
mov
xlat
xor
jns
pop
xchg
call
jecxz
int
adc
sub
xchg
stc
push
outs
jbe
inc
icebp
xor
mov
cmp
push
dec
jnp
aas
adc
cmps
add
je
sbb
cmp
cmp
ret
or
sbb
xchg
gs
mov
xor
inc
dec
mov
xchg
in
inc
dec
into
lds
out
fdiv
lea
mov
das
mov
push
jbe
mov
dec
inc
push
pop
xlat
xchg
dec
xor
cmp
leave
imul
test
fdivr
jle
xchg
cli
or
daa
and
sbb
int
sub
cmps
in
frstor
pop
sahf
std
sub
aam
mov
xchg
jae
adc
movs
aad
imul
std
(bad)
lods
fimul
int3
aam
sbb
mov
pop
icebp
xchg
cmc
pop
push
daa
mov
cmp
lea
into
or
add
xchg
sub
pop
jl
test
push
add
scas
push
xchg
inc
jle
xchg
retf
and
shr
and
mov
sub
outs
stos
sbb
cdq
dec
mov
pop
xchg
push
ds
repnz
lea
adc
mov
repz
fidiv
imul
mov
es
arpl
cld
sub
das
aam
(bad)
push
bound
aam
ficom
mov
xor
(bad)
aaa
add
mov
jo
mov
pop
xchg
movs
sub
out
xchg
ins
gs
xor
push
test
sbb
fwait
out
sbb
dec
lods
xchg
xchg
or
cmp
pop
push
dec
imul
add
shr
pop
pop
call
sub
dec
mov
out
dec
(bad)
mov
sbb
sbb
xchg
stos
popf
adc
dec
mov
lahf
out
sub
in
repnz
sub
push
sar
push
xor
adc
loop
xchg
xor
or
jne
sbb
jnp
xchg
jge
and
jl
xchg
cdq
push
push
dec
pop
icebp
shr
or
fild
push
sub
mov
sub
xor
push
sbb
test
sub
je
cld
mov
(bad)
popa
jle
bound
dec
push
rcl
adc
call
jns
push
stc
test
data16
push
mov
inc
pop
push
push
add
add
cmp
push
aaa
mov
lahf
adc
pop
lods
(bad)
and
and
adc
imul
js
std
xchg
jne
dec
in
xchg
fst
dec
xchg
in
sbb
or
addr16
dec
sbb
aas
pop
ins
dec
inc
xchg
daa
mov
hlt
out
or
xchg
jg
fs
rol
(bad)
pop
sub
hlt
xor
fst
cmc
leave
sbb
cmp
push
cld
popf
pop
ror
mov
mov
inc
dec
push
ins
jmp
gs
push
aad
dec
loope
sub
push
inc
sti
mov
push
and
mov
cmp
fld
mov
fimul
in
cmps
or
adc
xchg
mov
inc
hlt
jmp
cwde
dec
xor
test
bound
inc
push
push
pop
cmc
mov
js
and
mov
xor
sub
cs
rcl
push
ficom
daa
dec
push
sub
xchg
xchg
cmp
mov
inc
xchg
xor
(bad)
mov
aas
cwde
loop
out
jo
adc
push
sti
mov
mov
popa
sub
xchg
rcl
les
mov
sub
imul
fwait
movs
(bad)
out
sbb
adc
xchg
ror
push
dec
mov
icebp
xchg
cs
xchg
iret
or
sti
xchg
dec
(bad)
lock
daa
jo
pop
(bad)
int
test
loopne
xchg
scas
push
cli
shr
test
jns
repz
mov
xchg
dec
jmp
popf
loopne
add
xchg
dec
popa
push
inc
leave
popf
mov
sbb
sbb
sbb
div
jo
fucomip
cmp
xchg
inc
int
push
jmp
fdivr
or
xchg
lock
adc
out
push
pop
jb
adc
xchg
mov
shl
shl
xchg
ja
push
adc
dec
sbb
into
outs
lods
xchg
inc
sub
jmp
hlt
inc
and
dec
aad
shl
fs
dec
cmp
mov
xor
or
inc
out
stos
xchg
cdq
ss
call
sar
rcr
adc
pusha
pop
addr16
mov
(bad)
sbb
push
lods
sti
xchg
sbb
stos
gs
movs
(bad)
cmps
xchg
repnz
jmp
pop
inc
inc
fidivr
pop
shl
retf
add
xor
fdivr
mov
push
add
push
daa
ja
movs
xchg
scas
mov
inc
or
js
mov
sbb
dec
mov
xor
sub
mov
xchg
adc
xchg
cli
mov
ja
movs
add
mov
adc
xchg
jg
adc
in
xchg
adc
dec
mov
jl
movs
xchg
int3
mov
cwde
jb
dec
xchg
jp
cmc
movs
sub
xchg
into
test
mov
inc
mov
cmps
pushf
adc
add
pop
sahf
aas
mov
or
loopne
in
mov
ja
add
pushf
dec
das
cwde
cmp
mov
ja
mov
push
inc
ret
xchg
xchg
cmp
retf
rcl
(bad)
xchg
inc
push
xchg
shl
ficom
xchg
arpl
in
push
out
icebp
push
addr16
xchg
cld
xchg
dec
sub
add
xlat
retf
sbb
nop
mov
sub
mov
pop
test
pusha
call
into
je
mov
adc
push
les
xchg
daa
xor
mov
int3
dec
(bad)
stc
mov
xor
outs
mov
add
sub
mov
into
sbb
sbb
push
xchg
mov
push
addr16
pop
jb
dec
adc
jmp
sbb
outs
popf
push
push
pusha
xchg
cwd
sahf
mov
or
in
jecxz
call
adc
bnd
mov
sbb
dec
into
cld
(bad)
ficom
mov
mov
xchg
adc
mov
mov
sub
call
shr
imul
jge
sub
cmps
ror
lds
push
cwde
sub
fs
xor
imul
sub
adc
and
add
sbb
loope
cmp
stos
jo
fdivp
scas
or
das
dec
push
stc
shr
ds
nop
fbld
push
arpl
add
xor
hlt
xchg
xor
mov
or
xor
loopne
dec
aad
jl
addr16
pop
xor
fcomp
and
and
repnz
jle
sahf
dec
push
shr
xchg
in
gs
hlt
ret
sbb
mov
es
add
mov
inc
je
pop
pop
into
mov
xchg
xchg
mov
int3
loopne
xchg
sub
mov
and
push
ss
sub
inc
loop
xchg
imul
xchg
ja
aam
pop
mov
add
(bad)
jecxz
rcl
fwait
fs
hlt
add
into
adc
enter
push
fsub
xor
imul
xor
pop
add
add
mov
mov
inc
or
popa
aaa
push
push
fnsave
xchg
dec
stos
imul
push
fwait
cmp
loope
je
dec
jl
sub
test
mov
jle
pop
push
mov
xchg
inc
and
popf
jge
jg
imul
aaa
xchg
xchg
jne
call
mov
rol
adc
mov
repnz
or
fld
xchg
and
addr16
aaa
fwait
jmp
mov
call
xor
and
inc
sbb
stos
call
scas
fldenv
inc
xchg
dec
jle
xor
push
loopne
xchg
test
adc
adc
aam
fwait
dec
movs
dec
xor
xchg
hlt
ja
in
out
and
in
sbb
mov
dec
and
daa
jg
jne
mov
sbb
and
inc
fwait
cmp
xchg
push
push
jae
(bad)
shr
xor
clc
aam
fisub
lahf
push
mul
mov
fs
jbe
mov
push
or
xchg
jne
lahf
fidivr
and
xchg
mov
imul
clc
fcmove
fsub
in
cmp
push
stc
xchg
stos
nop
adc
stos
jl
add
xchg
cmp
jmp
adc
jb
adc
xor
jle
das
xchg
jmp
fimul
add
xchg
adc
cli
cmp
fld
jecxz
(bad)
scas
inc
pop
xchg
pop
div
loope
dec
lock
mov
sub
xchg
mov
sbb
dec
or
dec
xchg
inc
stos
enter
push
push
mov
xor
sub
xchg
or
inc
(bad)
and
jae
jmp
xchg
dec
scas
and
xchg
adc
cmp
pop
mov
sub
fiadd
mov
adc
xchg
test
ja
adc
shr
in
xchg
(bad)
dec
test
scas
xchg
and
push
xor
push
pop
and
test
jmp
out
xor
cmps
repnz
dec
(bad)
stos
clc
popa
stc
xchg
movs
test
jo
xor
frstor
sbb
jae
xchg
out
adc
jmp
iret
mov
movs
jl
push
dec
sti
xchg
inc
sub
add
push
jg
add
imul
mov
xor
pop
imul
int
or
(bad)
xchg
aas
or
ret
jnp
adc
add
pop
dec
xchg
test
sbb
dec
jecxz
cmp
add
dec
mulps
pop
and
mov
ficom
outs
leave
xchg
retf
dec
loope
scas
jecxz
jae
mov
cmp
call
pop
fwait
lock
fadd
ins
inc
es
lods
popf
nop
inc
xchg
add
push
jbe
xchg
in
aaa
lock
data16
sbb
scas
or
movs
gs
add
xchg
pop
jns
cmp
mov
mov
jle
gs
mov
popa
jl
dec
mov
cdq
jnp
jge
cs
inc
ret
popf
jmp
push
leave
mov
dec
stos
retf
inc
fadd
jle
xor
pushf
imul
mov
jg
movs
mov
loop
stos
fwait
or
adc
cmp
js
xchg
xchg
or
or
pop
jo
inc
arpl
ds
fwait
inc
cmps
push
or
imul
fisttp
dec
mov
cmp
out
into
push
in
xchg
mov
dec
dec
fwait
sub
push
inc
aam
pop
(bad)
into
xor
xor
dec
push
dec
out
repnz
xchg
(bad)
sub
xchg
pop
shl
test
adc
jnp
inc
mov
leave
lock
push
scas
stos
mov
pop
push
test
sub
je
imul
iret
pop
mov
sbb
mov
cld
xchg
push
cmps
lock
pop
les
test
mov
xchg
rol
mov
ficomp
mov
push
jmp
imul
push
in
les
xchg
and
jno
xor
stos
jge
jae
lock
ret
adc
fild
dec
xlat
imul
div
dec
pop
pop
iret
(bad)
aas
jmp
or
push
xchg
ja
inc
test
mov
retf
cmc
in
imul
jl
jl
mov
cmps
sbb
lods
(bad)
sbb
in
sub
loop
cmp
jl
sti
and
xor
add
push
jge
cwde
sbb
xlat
mov
stos
imul
inc
cli
mov
adc
jl
(bad)
mov
fs
adc
dec
imul
xor
pop
out
mov
mov
mov
lods
sbb
push
push
and
jb
div
or
out
(bad)
xchg
sbb
dec
push
mov
mov
ins
cmp
lods
movs
popf
jge
pop
jmp
shl
jmp
xor
mov
movs
std
mov
nop
jl
adc
shl
enter
fldcw
popf
adc
mov
cmp
inc
mov
jmp
and
fdivr
cwde
imul
jns
xchg
mov
cli
mov
xor
xchg
push
rcr
sub
dec
sbb
pop
ins
jne
sbb
movs
push
sbb
mov
mov
and
jnp
dec
xlat
iret
sar
mov
xchg
push
popa
lea
into
lods
fnstsw
adc
js
or
mov
inc
repnz
xchg
add
rcr
fwait
dec
nop
pop
std
jo
mov
icebp
mov
mov
mov
in
es
jle
sub
popf
imul
jl
add
mov
mov
retf
adc
mov
push
data16
pop
mov
dec
jmp
cmc
pop
fcom
hlt
jl
mov
push
xchg
test
cld
jge
adc
iret
push
dec
cwde
scas
mov
adc
ret
ins
int3
or
jle
adc
or
stos
nop
fld
das
or
xor
inc
mov
xchg
call
daa
xchg
mov
retf
ret
pop
ja
xlat
jle
outs
add
mov
xchg
in
push
repz
stos
aad
jns
adc
pop
xchg
mov
xlat
sub
lock
mov
stos
mov
fiadd
push
sahf
stc
adc
aam
push
xchg
dec
push
ret
aaa
jecxz
int
xchg
push
stc
adc
mov
inc
cdq
xlat
adc
pop
lods
aaa
xchg
mov
mov
adc
test
mov
xchg
inc
jle
add
or
xor
pop
ficomp
jp
sub
dec
data16
(bad)
push
push
mov
inc
push
jnp
pop
push
adc
jb
xchg
mov
sub
ds
xchg
push
sahf
fadd
cmp
int3
iret
fisttp
call
stos
pop
xchg
inc
mov
in
leave
xchg
push
xchg
xchg
sbb
sub
xchg
mov
retf
adc
xchg
repnz
xor
xchg
cmp
in
test
xchg
jb
dec
sbb
xchg
je
retf
(bad)
pop
pushf
mov
ret
sbb
rcr
xchg
jg
and
mov
test
cld
push
xor
jo
adc
loopne
les
cmp
xchg
jl
push
cwde
cmp
jo
xchg
div
lea
and
dec
cli
xchg
nop
imul
jge
fst
jmp
cs
inc
sbb
iret
cmp
adc
addr16
push
jnp
xchg
push
fisttp
sub
push
xchg
jno
add
inc
mov
cmp
add
cmp
mov
xchg
call
push
fmul
pop
xchg
mov
dec
(bad)
cdq
or
pusha
neg
dec
pop
and
je
cmp
xchg
repnz
xchg
gs
cdq
ret
imul
movs
sub
mov
dec
jne
pop
pushf
inc
or
mov
inc
xchg
cmps
ds
push
pop
mov
repnz
xor
hlt
or
xor
aam
dec
sbb
outs
lock
pop
xchg
mov
push
xchg
arpl
test
dec
jmp
cmp
retf
mov
xchg
push
sub
add
(bad)
push
cmp
pop
ret
(bad)
sub
mov
bound
je
cld
dec
push
dec
mov
std
xchg
and
jl
ficomp
dec
test
les
adc
inc
(bad)
test
lea
xor
les
lock
mov
loop
xor
xchg
cli
sbb
adc
cmp
cld
xor
dec
cmp
lods
push
pushf
jl
cmp
in
inc
add
mov
mov
push
ins
mov
sub
out
mov
call
jmp
mov
cld
adc
hlt
ret
pop
jl
jge
mov
adc
sub
sub
sub
adc
fistp
push
sub
jmp
mov
in
dec
scas
dec
sbb
mov
mov
add
(bad)
aam
xlat
mov
dec
jmp
(bad)
fucomi
es
imul
xchg
cmp
xchg
jmp
icebp
(bad)
add
sub
push
xor
idiv
xchg
mov
leave
xchg
in
sahf
sbb
mov
xchg
xor
xchg
inc
in
fst
mov
cmc
xor
and
push
xchg
push
cmp
mov
cmp
mov
cmp
push
add
sbb
xchg
mov
mov
popf
mov
sbb
adc
sub
jecxz
movs
jns
pop
or
cmps
das
push
outs
or
cld
rcr
aad
or
push
mov
add
jge
lds
sub
das
mov
test
repz
pop
iret
mov
js
adc
mov
cmp
sbb
out
fisttp
xchg
mov
xchg
ins
push
dec
xor
int
in
and
pop
and
xchg
push
fs
xor
iret
dec
mov
sbb
scas
jno
xchg
int
cmc
popf
iret
add
adc
xchg
pop
fwait
xor
clc
mov
xchg
rol
push
xchg
cmp
jle
shl
mov
push
jnp
sbb
xchg
out
nop
out
cmp
sar
mov
inc
xchg
sub
dec
dec
sbb
aam
mov
inc
fcom
xchg
pop
hlt
leave
shr
lahf
test
pop
(bad)
push
rcl
jns
repz
sbb
push
popf
mov
mov
inc
mov
xor
int
ret
push
inc
xchg
and
loopne
xchg
mov
dec
jne
xchg
jg
scas
push
in
jmp
xchg
popf
stc
mov
sub
xchg
jg
pusha
int
push
xor
call
cmps
ds
enter
cmp
in
(bad)
xchg
cmp
push
pop
jecxz
xchg
or
movs
mov
jmp
adc
dec
dec
stos
jo
aas
xchg
add
jmp
add
or
xchg
and
and
jmp
retf
mov
xchg
ret
call
and
mov
cwde
ret
test
cld
xchg
pop
jl
push
sub
repnz
imul
in
fnstcw
sti
xor
sbb
add
faddp
xchg
lods
or
jl
add
fcom
adc
stos
xchg
int
sbb
fimul
(bad)
or
call
shl
and
push
push
xchg
jmp
je
pop
int3
xchg
add
in
fs
stos
pop
dec
mov
pop
ins
xchg
cmc
push
jbe
pop
mov
xor
xchg
imul
push
xchg
iret
arpl
push
xchg
scas
mov
aaa
push
or
fldenv
ds
(bad)
jno
pop
sub
adc
jbe
adc
inc
and
mov
push
dec
or
xchg
bound
mov
je
xor
adc
leave
repz
adc
add
jne
dec
xchg
xor
sub
fld
sub
lahf
jmp
lods
loope
shl
mov
sbb
mov
ja
outs
jbe
add
rcl
(bad)
fcomi
adc
xlat
pop
gs
or
push
iret
push
pop
sbb
mov
sbb
push
pushf
pop
idiv
jne
jle
mov
mov
mov
pop
mov
push
hlt
adc
xchg
lea
xchg
out
mov
jns
push
outs
fwait
js
loope
inc
add
adc
dec
add
jno
je
(bad)
xchg
or
push
mov
cmps
push
adc
xchg
or
xchg
movs
call
jmp
scas
es
jmp
xor
xchg
pop
data16
adc
mov
mov
sub
jo
xchg
lods
fisttp
jl
push
sbb
jne
cmp
xchg
xchg
cmp
(bad)
adc
mov
addr16
adc
mov
ins
dec
adc
ror
sti
mov
mov
outs
stos
xchg
sub
xchg
push
call
inc
cmc
xchg
popa
in
mov
and
gs
retf
inc
add
inc
xchg
fs
mov
push
test
test
xchg
push
ret
arpl
mov
cdq
fdiv
push
clc
push
cmp
xchg
in
add
add
icebp
test
jp
push
js
scas
or
pop
sub
mov
test
pop
dec
xchg
mov
jne
mov
test
xor
scas
xor
aad
xchg
dec
or
jnp
xchg
pop
pop
mov
aad
inc
mov
lds
or
pop
sbb
xlat
fsubr
call
stos
xchg
and
mov
and
adc
xchg
push
scas
xor
fld
jmp
hlt
cmp
clc
cs
jl
ins
and
inc
xchg
sub
xchg
sub
mov
push
hlt
or
pop
repz
xchg
pop
mov
add
xor
(bad)
movs
xchg
mov
jae
dec
push
jnp
repnz
imul
fwait
mov
adc
enter
mov
pop
popa
test
hlt
pop
and
adc
add
test
dec
(bad)
je
movs
(bad)
push
movs
ds
pop
out
lods
(bad)
dec
popa
adc
fwait
xchg
hlt
shl
lods
or
lock
mov
cmp
gs
out
or
and
inc
jg
add
or
mov
mov
adc
mov
push
loop
imul
fwait
or
sub
jno
je
sub
xchg
jmp
outs
and
inc
stos
xchg
pop
pop
jae
mov
and
sbb
mov
ins
shl
xchg
mul
test
or
and
xchg
bound
arpl
mov
fnstsw
mov
xchg
leave
jl
mov
xchg
bnd
sbb
call
fiadd
aam
push
aas
ror
xchg
(bad)
mov
stos
mov
out
mov
mov
int3
pop
dec
xchg
xchg
xor
stos
inc
push
adc
movs
ds
clc
jmp
inc
sti
xchg
daa
dec
adc
aam
popf
mov
aam
dec
ret
dec
js
aam
(bad)
out
dec
je
jl
in
(bad)
sbb
mov
cld
xchg
mov
(bad)
mov
mov
lea
adc
inc
pop
ror
out
(bad)
sbb
(bad)
arpl
xor
adc
loopne
mov
mov
or
test
add
stc
movs
xlat
mov
pusha
sub
push
pop
jae
pop
add
out
scas
fwait
loope
jge
call
mov
sub
cdq
dec
hlt
cli
mov
xor
dec
push
cld
add
ins
fwait
xchg
int3
jge
mov
pop
mov
adc
or
cld
rcl
in
cwde
(bad)
(bad)
mov
adc
stos
imul
ret
mov
les
sub
mov
xchg
cld
mov
mov
addr16
sbb
inc
aam
in
push
sub
ins
jmp
cmp
add
inc
mov
hlt
ja
cdq
push
fdivr
adc
cli
push
lea
cwde
cmp
fbstp
aaa
inc
mov
daa
sar
(bad)
pop
push
fwait
pop
adc
iret
xchg
sbb
mov
adc
mov
aam
and
push
mov
pop
in
pop
mov
mov
jns
fld
or
xor
cmps
lods
repnz
das
inc
lds
and
push
sbb
mov
lds
push
shl
outs
xor
out
hlt
jbe
aam
mov
xchg
clc
hlt
push
mov
xor
cmp
dec
aam
enter
push
mov
pop
ret
mov
add
adc
cmc
int3
pusha
mov
xchg
xor
cmc
mov
sub
xchg
in
mov
mov
mov
icebp
xor
push
imul
jmp
lods
loopne
adc
(bad)
dec
sbb
mov
out
mov
pop
xchg
aam
ret
repnz
jl
mov
movs
adc
imul
adc
call
ins
xchg
mov
jmp
aas
(bad)
fcom
xchg
fs
arpl
clc
or
mov
gs
data16
adc
push
inc
and
xchg
jmp
bound
xor
sar
imul
test
push
std
movs
mov
sbb
shl
pop
jne
xor
sti
push
js
or
push
jl
movs
or
mov
push
pushf
aam
fwait
dec
out
jne
add
stos
jmp
xor
xor
adc
mov
jge
pushf
(bad)
mov
mov
movs
mov
dec
data16
dec
jmp
pop
sahf
es
int3
xchg
shl
sar
js
lods
mov
shl
lods
addr16
push
div
outs
adc
loop
cs
dec
cmp
mov
add
dec
push
dec
pop
mov
imul
aam
mov
cdq
cld
data16
dec
stos
sbb
popf
xchg
jo
inc
add
ins
inc
rol
ret
inc
call
sbb
mov
rol
inc
jg
xchg
pop
ret
sbb
out
hlt
inc
out
nop
cdq
xchg
lahf
mov
jg
cdq
mov
adc
mov
xchg
leave
jno
out
idiv
add
jb
jo
cdq
inc
lahf
adc
lock
int3
xor
ss
cld
jle
je
pop
pushf
xchg
cmp
test
sahf
mov
sub
imul
cmp
xchg
fstp
push
adc
ss
movs
or
popf
leave
(bad)
lahf
test
nop
or
clc
push
or
pop
jle
xchg
shl
jl
cdq
and
sbb
mov
push
popf
test
jae
addr16
pop
jbe
call
xchg
jb
mov
je
cmp
jns
pop
xor
dec
xchg
or
sahf
xchg
enter
mov
push
rcl
lea
and
ins
adc
adc
fst
xor
bound
test
mov
adc
fsubr
pop
dec
or
add
cmp
js
xchg
or
inc
xor
xchg
xchg
call
(bad)
jo
adc
(bad)
pop
popf
xchg
mov
cmp
xor
jb
out
(bad)
call
mov
xchg
stc
mov
add
mov
add
fwait
jne
push
jp
push
or
je
int
xrelease
jne
mov
gs
inc
sub
xor
ss
jmp
mov
pop
xlat
pop
mov
sub
call
imul
jl
call
or
and
xchg
cmp
pop
adc
xchg
loope
or
popf
sub
xchg
dec
xor
sbb
cmp
xchg
jmp
xchg
scas
adc
lock
enter
cmp
push
mov
popf
sbb
xchg
out
pusha
xchg
ret
test
in
fwait
and
adc
retf
xor
jmp
test
sub
or
lods
and
adc
idiv
xchg
call
add
cmp
xor
push
xchg
les
mov
mov
mov
push
sti
push
in
xchg
jno
or
sub
int
xchg
push
jg
pop
adc
setb
xchg
mov
pop
jl
mov
je
jg
push
sub
hlt
ja
cli
nop
dec
mov
xchg
fs
mov
or
mov
mov
inc
call
bound
call
cmp
push
dec
adc
push
imul
pop
loop
sub
xchg
jmp
(bad)
in
mov
ret
pop
xchg
js
inc
xor
(bad)
adc
push
xchg
lods
cmps
adc
sar
xchg
ror
mov
push
pop
xchg
aam
mov
xchg
lea
sub
inc
lahf
jl
data16
xor
hlt
je
(bad)
xlat
xchg
inc
(bad)
int3
mov
sub
stos
and
pusha
adc
aam
mov
jg
push
add
pop
(bad)
loop
push
or
(bad)
adc
adc
movs
mov
loopne
mov
inc
in
xchg
ret
xchg
imul
sar
dec
xchg
cwde
out
hlt
sub
xchg
pop
mov
mov
cmc
adc
adc
test
push
test
or
(bad)
xchg
pop
daa
fimul
loopne
retf
fist
test
rcr
dec
fwait
stc
push
inc
je
xor
inc
mov
pop
pop
sar
xchg
cdq
xor
xor
hlt
call
imul
pop
xchg
movs
dec
mov
clc
call
xchg
xchg
inc
enter
shl
mov
sbb
xchg
inc
push
ins
cmp
jg
js
bound
push
mov
clc
and
dec
adc
pop
not
(bad)
xchg
sbb
xchg
cmp
or
jmp
xchg
sbb
repnz
mov
mov
xchg
push
cmp
mov
adc
mov
xchg
ins
int
or
mov
fst
cmps
loopne
inc
or
adc
add
adc
mov
ror
in
sub
dec
xchg
mov
cdq
sbb
hlt
or
xchg
inc
call
mov
xchg
data16
aam
pop
fild
sub
in
fwait
pop
test
ret
xchg
inc
jg
das
mov
mov
rcl
jmp
test
sbb
shl
ja
adc
push
mov
sbb
inc
sbb
cmp
xlat
js
icebp
xchg
xor
rol
ja
scas
movs
xchg
inc
mov
xlat
arpl
je
fs
inc
jecxz
xchg
cmp
pop
mov
scas
mov
xchg
sub
push
nop
stc
ficom
adc
push
mov
jecxz
xchg
jno
(bad)
gs
ja
dec
xchg
push
lods
(bad)
outs
push
ret
inc
or
test
xchg
dec
jl
jns
xchg
push
cli
(bad)
ror
jbe
xchg
xchg
push
das
imul
sbb
dec
int
out
ror
aad
int3
pop
mov
xchg
jmp
lea
xchg
or
push
in
add
aas
mul
adc
les
bound
xchg
xchg
jl
cmc
sub
add
xchg
ror
pop
test
lds
test
xchg
push
shl
or
xor
not
mov
push
xchg
xchg
cs
adc
aas
xchg
adc
ficom
stos
or
xchg
pop
jb
push
cmp
sbb
(bad)
cmc
inc
hlt
xchg
sbb
sti
repnz
inc
(bad)
xchg
mov
jl
adc
mov
gs
jmp
das
or
repz
cdq
in
or
dec
leave
add
js
jge
inc
mov
mov
cmp
aam
setnp
xchg
hlt
push
or
test
jmp
retf
pusha
iret
mov
fwait
sbb
das
push
arpl
ins
mov
(bad)
fnstsw
or
xchg
jnp
ds
mov
xchg
jl
adc
sub
jge
mov
pusha
(bad)
sub
cmp
inc
xchg
xchg
or
or
shl
xchg
arpl
and
mov
push
or
int
js
popa
cmp
mov
jecxz
hlt
in
fbld
pop
je
daa
mov
adc
xchg
jns
jp
add
je
nop
cli
sub
in
rcr
popf
stos
inc
std
cmc
adc
aam
mov
mov
adc
or
popf
jmp
pop
adc
dec
mov
xchg
xchg
or
imul
push
in
fwait
(bad)
out
jbe
sub
add
xor
pop
daa
cmp
inc
mov
jg
xchg
pop
dec
mov
loop
cmp
xchg
inc
mov
int3
pusha
or
dec
xchg
sbb
xchg
pop
xchg
push
rcr
lea
pop
cdq
dec
repnz
dec
mov
cmp
std
xchg
movs
lea
rcl
hlt
scas
add
push
sub
cmp
dec
jo
jp
xchg
xor
mov
sti
cmp
jecxz
mov
mov
es
sub
je
inc
add
aad
fcomip
(bad)
out
pop
push
pop
xchg
scas
mov
outs
xchg
mov
push
stos
icebp
xchg
cmp
lds
dec
into
adc
imul
or
mov
jne
cld
dec
or
mov
fist
je
outs
in
dec
mov
sub
jl
xchg
xchg
ficomp
jp
mov
dec
scas
das
movs
or
pop
pop
dec
je
xchg
mov
adc
outs
aaa
mov
stos
xlat
cmp
pop
and
shl
cmc
cmp
rcl
lahf
(bad)
lea
mov
sub
jl
repnz
mov
dec
pop
push
add
xchg
daa
add
sub
sub
mov
cdq
sbb
inc
and
xchg
mov
nop
in
xor
loopne
jmp
mov
ss
sti
mov
push
push
les
in
loop
jg
xor
(bad)
xor
jns
dec
cmp
call
sub
lods
adc
ret
mov
ins
lock
dec
in
mov
popf
in
lock
in
and
addr16
add
sub
mov
xor
test
sar
loopne
dec
xor
sbb
popa
imul
call
test
xchg
and
mov
xchg
and
add
xchg
pop
scas
into
sar
xchg
je
jo
cwde
jg
(bad)
cmps
jge
loopne
nop
jp
icebp
int3
push
fimul
std
mov
and
out
mov
mov
cli
dec
aad
inc
sar
xor
mov
fwait
sub
and
repz
or
fisubr
and
jmp
add
fwait
inc
cli
xchg
idiv
(bad)
jmp
dec
jmp
sbb
xchg
cmp
icebp
enter
test
or
xchg
out
daa
pop
jl
xor
hlt
sbb
xchg
mov
sbb
(bad)
test
(bad)
das
sbb
adc
push
lods
inc
inc
jp
push
push
sbb
adc
inc
in
cmp
aam
(bad)
jecxz
push
dec
add
mov
pop
jg
cdq
out
stos
mov
in
adc
mov
xor
loopne
adc
xchg
int
dec
push
inc
adc
xchg
in
stos
sub
aad
outs
aam
(bad)
imul
out
add
icebp
fcmovu
jmp
push
or
dec
addr16
stos
mov
xor
xchg
pop
loop
test
adc
xchg
cmp
sar
mov
mov
std
cs
ret
add
mov
xor
mov
es
xchg
push
mov
xchg
inc
inc
ror
jp
inc
xchg
jnp
dec
lods
iret
es
idiv
jg
lahf
and
enter
mov
inc
or
mov
jmp
pusha
adc
dec
je
and
pop
retf
sbb
test
mov
xor
(bad)
les
cmc
dec
xchg
dec
loopne
scas
aam
mov
mov
mov
mov
test
(bad)
aam
and
cmp
xchg
sbb
mov
sar
adc
ja
dec
sbb
xchg
fldenv
push
sbb
daa
xchg
xchg
pop
aad
loope
xor
std
sub
jns
push
mov
adc
mov
inc
xchg
pop
addr16
fidiv
xchg
sbb
shr
mov
enter
test
adc
dec
push
sub
nop
leave
sub
inc
sub
movs
mov
aam
jmp
in
mov
mov
xor
mov
aam
dec
je
push
push
cmc
test
pop
mov
test
call
mov
push
xchg
ret
mov
mov
test
movs
add
or
fidiv
inc
les
(bad)
pusha
pop
popa
or
scas
jnp
cmp
xchg
add
fisubr
mov
cld
pop
push
cmp
shl
idiv
not
mov
xor
push
enter
mov
in
sar
xchg
int
mov
mov
lods
jne
push
xor
(bad)
jle
cmp
xchg
add
(bad)
in
bound
div
cmp
jbe
(bad)
add
vfrczpd
cmp
pcmpeqd
jg
xchg
mov
push
ins
jo
not
mov
cmp
mov
mov
xchg
sub
nop
les
jle
and
test
cdq
(bad)
xor
inc
test
sbb
push
imul
leave
fcom
adc
xchg
mov
sbb
imul
scas
push
call
mov
hlt
cmp
movs
adc
sub
std
js
cmp
iret
mov
inc
push
and
jo
(bad)
or
inc
jl
lea
fist
nop
or
cmps
push
fcom
sub
retf
dec
push
push
inc
pop
ss
xchg
xchg
pop
cmp
xchg
and
lahf
(bad)
pusha
jae
jmp
inc
je
xor
sbb
xor
in
dec
sbb
xchg
dec
pop
clc
cmp
xchg
mov
push
jbe
(bad)
xor
add
mov
cmps
lea
pop
adc
cmps
iret
cdq
call
lds
jns
ret
adc
sahf
or
push
test
sbb
test
xor
xchg
ret
mov
sub
test
push
pushf
fwait
stc
movs
and
sub
xchg
sbb
jmp
pop
jbe
mov
push
aam
cmp
(bad)
test
ss
xor
neg
xchg
adc
sbb
hlt
out
je
xchg
cmp
push
xchg
xchg
push
pop
xchg
jns
je
fwait
mov
pop
lea
mov
mov
hlt
or
clc
inc
aam
dec
hlt
inc
xchg
xor
test
jne
mov
scas
adc
cmps
sbb
and
jl
mov
xchg
jne
mov
and
js
pushf
sub
or
jae
imul
jecxz
mov
and
stos
push
xchg
xchg
adc
jnp
inc
xor
adc
xor
xchg
xchg
push
enter
jmp
push
aaa
les
mov
js
fidiv
ins
mov
or
shl
xchg
(bad)
cli
push
loope
inc
pop
aaa
xchg
or
mov
into
mov
fwait
jae
cmp
fst
add
retf
aas
add
stc
jl
xchg
inc
stos
xchg
cmp
push
pop
xor
bswap
xchg
rol
add
mov
mov
cdq
ds
shl
mov
xchg
or
lods
retf
adc
sbb
or
cmps
push
in
sub
sub
xchg
add
push
cmps
ins
mov
adc
std
mov
cdq
mov
adc
push
sar
cmp
add
movs
xchg
add
iret
and
out
clc
fmul
xor
jae
ret
mov
jmp
or
xor
int3
adc
add
xchg
in
jns
pop
mov
add
int
(bad)
mov
dec
cmp
fsubp
imul
out
xchg
dec
jmp
xchg
(bad)
test
fist
pushf
mov
jb
or
ja
das
lahf
xchg
mov
loopne
and
imul
jmp
mov
cmp
sub
popa
inc
aaa
xchg
stos
lds
ret
push
fs
pop
jmp
fadd
daa
ins
cwde
cmps
and
adc
and
lahf
jg
fild
inc
mov
xchg
pop
push
or
cwde
inc
(bad)
xchg
jecxz
enter
cmp
xchg
or
xchg
iret
je
pop
adc
pop
jmp
and
xor
push
sahf
xchg
adc
jmp
mov
push
int3
pop
mov
ficomp
ror
add
mov
cmc
in
sub
aam
cli
test
xchg
inc
push
xor
mov
enter
inc
out
sbb
pop
xlat
mov
mov
imul
in
(bad)
xchg
shl
sbb
xchg
outs
xchg
xor
out
test
mov
pop
rol
push
or
dec
pop
sbb
mov
sub
shr
rol
pop
inc
adc
pusha
or
stos
jge
dec
xchg
mov
push
es
jmp
mov
xor
loop
and
jle
cwde
(bad)
lock
ja
cli
pusha
pop
(bad)
mov
mov
xchg
das
cmovp
jne
xchg
xor
leave
idiv
fcmovnb
cmps
fdiv
cli
jge
mov
cmps
popf
lahf
ret
xchg
dec
jbe
fisttp
addr16
adc
in
mov
or
inc
loopne
cmp
fadd
sbb
cmp
cmps
call
xchg
sbb
dec
push
shl
std
fwait
xchg
mov
pop
dec
loopne
je
xchg
daa
mov
adc
loope
add
and
cwde
sub
push
mov
in
jp
cmps
js
jge
cmp
xchg
mov
ficomp
jo
hlt
xchg
pushfw
ret
push
mov
cmp
or
int3
(bad)
sbb
popf
mov
adc
push
xchg
sahf
and
xchg
sbb
push
jmp
push
dec
jmp
bound
cmp
adc
(bad)
xchg
mov
push
or
jle
xchg
outs
inc
xchg
push
mov
inc
mov
xchg
jno
inc
movs
(bad)
xchg
dec
xchg
arpl
sbb
rol
add
aaa
xchg
xor
lods
dec
dec
mov
xchg
mov
(bad)
add
loope
xor
in
or
sub
fadd
jnp
rol
jp
adc
jmp
pop
xchg
mov
dec
xor
adc
loope
dec
cmps
mov
sahf
or
cmp
bound
jo
rcl
pop
xchg
pushf
push
adc
bound
shl
adc
sub
xchg
daa
xor
mov
rcl
lds
adc
jno
add
arpl
les
push
sahf
and
cmp
setne
adc
mov
scas
dec
xchg
cmps
popa
jecxz
jnp
xor
addr16
in
loopne
std
push
leavew
mov
mov
imul
push
ins
jmp
xchg
lds
loopne
xor
rcr
xor
mov
int
cdq
mov
mov
shl
sub
and
adc
in
adc
pushf
fldenv
mov
pop
lahf
aam
enter
ins
es
jns
pusha
xchg
dec
retf
xlat
inc
dec
call
mov
js
not
push
repz
icebp
jp
sub
xchg
push
push
data16
push
cmp
dec
sbb
and
xchg
in
iret
fild
dec
mov
(bad)
adc
outs
xchg
inc
lods
ins
shr
gs
clc
xchg
cli
int3
jne
fdivr
dec
jmp
jge
pop
mov
stc
popa
(bad)
retf
push
xchg
ins
lods
sub
addr16
sti
xchg
mov
in
adc
(bad)
sbb
xchg
test
pop
iret
sti
stos
mov
xchg
sbb
and
stos
jno
mov
clc
shl
cwde
outs
fwait
(bad)
out
add
pop
and
fisubr
rcl
xchg
inc
mov
lahf
stc
aas
pop
or
xchg
jno
adc
mov
cli
dec
pop
jns
lahf
cwde
or
xchg
inc
in
jle
mov
retf
rcr
cmc
or
xchg
mov
and
fwait
mov
neg
bound
repz
cwde
popf
cwde
fnstsw
adc
jbe
or
jge
in
(bad)
dec
mov
dec
jbe
xchg
jnp
test
push
add
cmp
lock
add
mov
adc
or
mov
in
jecxz
xchg
jle
lods
neg
mov
into
push
push
adc
mov
mov
ja
imul
hlt
xchg
xchg
(bad)
cmps
jg
sbb
xor
dec
lahf
iret
jnp
xchg
lods
stos
out
or
cdq
mov
fisttp
cmp
xrelease
ret
inc
shr
shl
fwait
jno
jne
sti
mov
jo
loop
push
pop
adc
xchg
stos
inc
jp
movs
sbb
test
mov
aaa
push
xchg
mov
test
pushf
icebp
dec
popf
xchg
ficom
ss
dec
jbe
mov
pop
and
in
daa
ja
mov
imul
inc
mov
xor
cmps
pop
icebp
mov
xchg
cwde
inc
inc
test
push
mov
mov
xchg
cld
test
xor
sbb
(bad)
lahf
dec
or
das
adc
xchg
cdq
lds
xchg
or
mov
fisttp
data16
fs
xchg
mov
dec
push
push
dec
imul
test
cli
fcom
loope
jmp
lahf
stos
jle
repz
sub
xchg
mov
lea
xchg
xlat
out
sbb
mov
jbe
aaa
stos
dec
ret
into
xchg
cmps
movs
cmc
cs
mov
push
(bad)
shr
or
movs
sahf
stos
cmp
push
xchg
adc
mov
dec
loope
adc
mov
and
addr16
push
clc
jae
fistp
xchg
into
adc
push
and
pop
or
cwde
mov
sub
icebp
aas
pushf
sub
hlt
adc
in
aad
test
les
pop
xchg
pop
sbb
push
mov
cmc
jmp
inc
jnp
pop
mov
add
push
xchg
mov
lea
outs
push
test
jge
add
sub
xchg
adc
pop
dec
clc
mov
adc
jne
push
movs
pop
mov
shl
popf
add
lock
jno
(bad)
mov
add
adc
cdq
test
shr
imul
mov
(bad)
imul
popf
bound
cs
(bad)
mov
mov
xchg
cld
(bad)
push
retf
mov
leave
outs
test
pop
jl
adc
cmovl
lods
fld
cs
and
sbb
rol
xchg
xchg
enter
or
out
xor
dec
stos
mov
jl
mov
cwde
push
pop
dec
pop
xchg
pop
sbb
mov
inc
nop
dec
cwde
fwait
xor
adc
fdivr
xchg
icebp
sbb
mov
add
xchg
or
xchg
adc
ss
clc
and
js
sub
push
rol
or
xchg
cmp
bound
int
push
push
xchg
xchg
mov
(bad)
in
inc
xor
ror
out
xchg
popf
cmp
in
out
nop
scas
call
cmp
test
xchg
adc
in
xabort
xchg
fldenv
(bad)
cmp
into
xchg
mov
xor
lods
add
xchg
in
(bad)
mov
xchg
in
cdq
mov
adc
aas
cwde
(bad)
retf
pushf
mov
cmps
hlt
in
xor
adc
repz
retfw
inc
ret
mov
and
das
xchg
imul
adc
sub
sahf
mov
mov
in
ffree
(bad)
popf
es
movzx
jp
ds
call
in
xchg
cmps
aam
mov
dec
in
xchg
sbb
xor
hlt
test
xchg
daa
jl
lahf
fcomi
jns
xchg
and
mov
lock
or
push
mov
xchg
cmp
add
pop
imul
cmp
fwait
sahf
lods
and
or
ret
jno
lods
enter
pop
xchg
loopne
movs
or
imul
xchg
xchg
xor
inc
cmc
lods
outs
and
xchg
(bad)
jmp
xchg
push
lods
data16
sbb
loop
shr
xchg
fdiv
inc
pop
fiadd
sbb
inc
mov
(bad)
outs
adc
addr16
sub
xchg
xor
xor
sbb
dec
xchg
in
ror
mov
popf
movs
fabs
mov
shr
jl
enter
mov
(bad)
mov
fwait
das
pop
mov
pop
adc
xchg
inc
loope
mov
xchg
mov
mov
sub
lock
out
inc
sbb
push
test
dec
mov
inc
add
js
mov
push
daa
dec
ins
stos
sahf
jge
imul
adc
loop
xchg
inc
out
pop
jmp
xchg
jmp
fidiv
(bad)
aam
les
pop
cli
mov
rcr
push
xchg
clc
out
xchg
retf
dec
fstp
rol
lods
xchg
ins
jns
jg
imul
jl
test
jge
mov
addr16
fistp
nop
lods
inc
lock
gs
stc
repnz
jge
stos
ins
inc
js
push
jmp
xchg
xchg
push
fwait
cmp
push
xchg
ret
popf
pop
aaa
mov
mov
sub
clc
stos
fs
mov
neg
aas
fwait
adc
mov
jo
ds
pop
xchg
pop
ret
scas
stos
rcr
mov
and
shr
adc
jl
sub
mov
test
mov
repz
xchg
jecxz
jne
movs
add
pop
adc
cmp
mov
je
sbb
loop
dec
stos
or
fucomip
push
jg
xchg
cmp
jmp
repz
retf
lods
rol
add
sbb
or
(bad)
mov
xchg
pusha
repnz
mov
scas
lahf
push
inc
mov
lock
aam
sbb
xor
in
jb
mov
adc
mov
sbb
sub
in
arpl
aam
mov
or
mov
div
aam
inc
shl
mov
je
fidiv
add
sub
imul
scas
or
in
es
xchg
pop
int
test
mov
xchg
jbe
inc
mov
lahf
ror
rcl
iret
dec
mov
jmp
xchg
xchg
push
fisubr
xor
xchg
into
leave
dec
mov
cmp
jle
daa
pop
cwde
mov
push
pop
mov
xchg
jg
out
jmp
cmp
sub
xor
ds
mov
test
popf
mov
xor
rcl
mov
mov
and
lea
push
(bad)
inc
inc
xchg
ret
pop
mov
push
out
mov
fwait
inc
mov
call
cmp
mov
(bad)
add
pop
lds
or
xchg
jb
jl
mov
cwde
mov
adc
and
push
sahf
xor
test
xchg
out
pop
mov
ficom
mov
push
das
sub
add
pop
dec
shl
inc
loopne
jecxz
jge
mov
aam
rol
mov
fcom
xchg
sbb
ja
inc
aam
push
mov
outs
adc
das
arpl
rcl
adc
stc
mov
or
adc
xchg
jle
lods
ss
mov
cmp
imul
cld
icebp
fld
xchg
pop
stos
mov
dec
and
jle
adc
cmp
(bad)
mov
test
outs
or
test
cmc
fwait
enter
xchg
int3
arpl
mov
into
out
and
loop
sbb
xchg
test
cwde
addr16
cmp
ja
shl
inc
xchg
mov
es
jns
loop
xchg
dec
pop
retf
push
ror
add
and
mov
jb
aam
lahf
push
xchg
mov
jne
leave
es
mov
jb
mov
(bad)
push
xchg
das
xchg
or
push
cmp
mov
xor
int
xchg
retf
lea
dec
mov
mov
adc
push
sahf
stos
ret
mov
pop
cmp
inc
xchg
cmp
sbb
or
mov
fdiv
pop
fst
hlt
xlat
rcr
adc
pushf
aad
xchg
add
dec
sbb
int3
pop
lods
(bad)
lock
mov
cdq
loope
rcl
xchg
loopne
push
pop
pusha
cmp
iret
adc
pop
or
sar
out
inc
xor
icebp
push
xchg
xor
mov
cmps
aad
rcl
push
out
mov
cmp
fwait
iret
dec
movs
and
lds
scas
pop
mov
pop
idiv
xchg
out
je
sub
mov
sahf
xor
adc
div
jle
adc
lods
sub
cmps
fld
xlat
mov
xor
stos
add
ror
mov
pop
xchg
sahf
jecxz
shl
push
mov
push
inc
xchg
jnp
sbb
add
retf
dec
je
xchg
fst
xlat
adc
xor
pop
add
adc
mov
shl
call
mov
adc
shl
xchg
xor
scas
fdivr
addr16
xchg
in
test
out
xor
pop
inc
xor
xchg
retf
inc
ins
(bad)
lods
cli
nop
test
rcl
cmc
std
fcom
xor
xchg
setno
imul
out
cmp
(bad)
cmps
push
aam
rcl
lods
mov
mov
hlt
mov
xchg
jno
mov
xor
mov
shr
aad
xchg
inc
pop
and
mov
push
sub
mov
arpl
jns
push
rol
sbb
xchg
mov
xchg
sub
mov
stos
xchg
adc
js
dec
ret
pop
xchg
aad
ret
pop
das
sar
test
mov
retf
pop
mov
xchg
fdiv
aas
mov
fcomp
xchg
xchg
or
push
push
fcomp
or
mov
iret
in
mov
pop
xchg
inc
adc
push
hlt
jle
add
push
mov
stos
push
clc
aam
movs
mov
sti
add
dec
xchg
lds
xchg
pop
repz
adc
mov
cmp
mov
push
lods
fcom
cs
push
cmp
lock
pop
xchg
mov
adc
xchg
and
jl
scas
movs
cmp
clc
sti
xchg
cmp
jno
xchg
test
cmc
cmp
repz
dec
cwde
jns
inc
inc
lahf
ret
inc
mov
shr
(bad)
in
rcl
mov
mov
popf
das
cmps
andnps
mov
je
das
mov
fcom
push
push
push
xchg
xlat
rcl
jle
lock
pop
and
mov
inc
and
xchg
rcl
dec
imul
in
xchg
jl
sbb
inc
or
xchg
lods
jp
ins
mov
push
and
(bad)
mov
xchg
call
and
std
inc
mov
push
xor
jg
and
add
stos
icebp
push
cwde
enter
fsubr
test
jo
shr
(bad)
sub
and
sbb
xchg
loopne
add
setb
sbb
mov
inc
fdiv
loopne
xchg
mov
cmp
push
test
xor
dec
cmp
ds
out
or
pop
mov
xchg
mov
mov
mov
imul
inc
hlt
lock
in
cmps
push
(bad)
pop
daa
aad
or
lock
cdq
in
jge
inc
jle
retf
ja
ins
add
adc
repz
mov
test
dec
xor
pusha
mov
adc
add
xor
sub
pop
pushf
pop
xchg
mov
(bad)
loopne
xchg
mov
ret
fwait
movs
xchg
push
iret
add
mov
add
daa
pushf
fwait
or
xor
dec
sub
and
scas
sar
imul
lahf
pop
xlat
in
sahf
pop
stos
and
push
xchg
mov
xor
inc
xchg
inc
pushf
pop
(bad)
lea
ds
sahf
or
into
pop
aad
scas
sub
jecxz
xchg
sbb
test
push
dec
sar
cwde
ret
and
inc
adc
push
pop
out
lock
xchg
inc
inc
lea
fisttp
xchg
mov
xchg
movs
out
dec
je
mov
dec
xchg
push
pushf
(bad)
loopne
ins
lods
add
pop
add
in
jno
jae
mov
adc
rol
gs
push
loope
imul
rcl
(bad)
ret
xor
imul
imul
cmps
push
movs
icebp
dec
cdq
arpl
push
mov
lods
xchg
or
cwde
xchg
aas
inc
int3
leave
jnp
adc
js
mov
test
cwde
and
test
adc
push
(bad)
mov
push
fist
call
sahf
shl
xor
ret
les
cmp
cmps
fwait
ins
test
inc
scas
out
addr16
repz
js
clc
ror
jp
in
xchg
jmp
mov
mov
scas
xchg
jp
pop
jo
(bad)
imul
ja
mov
adc
mov
stos
rcr
jo
leave
fnsave
or
cli
bswap
jecxz
xchg
(bad)
mov
mov
pop
add
lods
scas
(bad)
dec
cmp
bound
push
xchg
adc
jecxz
jns
inc
xchg
lds
movs
addr16
inc
ret
and
ror
stos
movs
es
cmps
iret
push
adc
xchg
aas
xor
add
pop
ss
pop
(bad)
retf
fcom
dec
xchg
dec
fwait
sar
dec
add
push
cmps
xchg
aam
inc
xchg
fcmovnb
pop
inc
xchg
cmp
lea
push
mov
inc
xor
sub
and
lds
xchg
jns
push
push
mov
outs
imul
addr16
xor
stc
mov
pop
xor
inc
ret
arpl
pop
std
imul
fldenv
movs
cdq
aam
lea
adc
stos
(bad)
xlat
push
hlt
push
cmp
popf
dec
(bad)
push
fst
in
xor
inc
dec
cmps
cmc
cs
xchg
or
add
xchg
icebp
jae
mov
popf
mov
rol
stos
test
ror
(bad)
xchg
repnz
adc
pop
ins
jns
mov
push
cs
cdq
mov
mov
cmp
and
dec
popf
sub
scas
jecxz
bound
mov
popf
mov
push
fs
dec
mov
push
repnz
dec
xchg
std
xchg
adc
nop
mov
ret
sbb
scas
mov
mov
dec
xchg
inc
push
mov
repz
mov
xchg
cs
sbb
push
add
enter
inc
data16
sbb
xor
je
and
or
dec
sbb
mul
gs
into
les
push
pushf
xchg
bnd
inc
movs
and
sub
dec
adc
xchg
fsubr
fimul
rcl
cmps
inc
adc
xchg
push
jne
in
rcl
pop
mov
push
mov
pusha
mov
pop
adc
pop
pushf
add
jns
call
pop
push
fdiv
lahf
shr
aad
outs
xchg
mov
xchg
mov
call
repz
movs
xchg
cmps
pusha
mov
inc
sti
mov
mov
xchg
mov
or
mov
js
mov
outs
sub
std
xchg
jmp
inc
fnstenv
inc
add
cdq
rcl
inc
repnz
jecxz
data16
xchg
pusha
or
stos
sbb
xchg
clc
or
lahf
dec
dec
xchg
xchg
mov
cmps
jmp
sbb
jbe
and
arpl
pop
cmps
jo
jle
xor
ds
push
mov
add
or
add
cmp
cdq
fcomp
into
(bad)
jle
or
test
jge
mov
and
push
adc
into
nop
pop
mov
or
xor
jnp
mov
cmp
mov
xchg
xchg
adc
pop
enter
in
cmp
cmp
leave
in
imul
xchg
ret
or
fwait
mov
stos
xchg
add
xchg
fistp
jo
xchg
pop
ja
mov
mov
cmp
fld
imul
jnp
mov
cli
and
retf
repnz
dec
mov
xchg
fisub
cmc
sahf
jno
scas
xor
mov
dec
test
in
cs
movs
aas
mov
lahf
push
es
mov
xchg
jae
jl
dec
mov
mov
xor
(bad)
enter
cdq
retf
mov
sbb
retf
outs
jae
cmps
mov
lods
in
xchg
cld
(bad)
sbb
ret
xchg
mov
inc
mov
jecxz
mov
xchg
outs
retf
jge
add
je
dec
pop
aas
mov
jmp
ror
pop
dec
movs
movs
xchg
and
or
mov
icebp
nop
jl
cmp
xchg
imul
adc
fmul
cwde
push
stc
mov
test
sub
hlt
cmps
int3
jl
cmp
call
sub
xor
rcr
loopne
test
movs
dec
jo
add
loopne
aas
inc
jl
pop
and
xchg
stos
dec
push
popa
sbb
dec
xchg
mov
cli
lds
mov
popf
(bad)
les
push
mov
or
mov
mov
push
xchg
jmp
vunpcklps
aaa
inc
sub
jns
xchg
cmc
enter
lods
xchg
call
test
adc
loopne
sti
push
xchg
ror
jno
cmp
scas
js
xlat
xor
inc
outs
add
in
sub
push
or
popa
sbb
cmps
outs
fcomp
xor
ret
push
xchg
ins
js
mov
cwde
xchg
(bad)
(bad)
mov
test
fs
outs
jnp
sub
lock
xchg
test
mov
stc
jge
mov
fdivr
mov
mov
mov
jbe
sub
stos
mov
push
or
xchg
and
movs
adc
xor
push
dec
mov
fst
sbb
pop
jmp
cmp
mov
sub
or
mov
push
push
xchg
jno
ret
fcom
enter
push
push
ror
jne
push
cmp
xchg
sub
mov
popa
sub
fs
fs
mov
sbb
stos
movntq
fwait
retf
shl
mov
xchg
jp
dec
or
sub
sbb
sub
int
bound
fwait
enter
hlt
(bad)
mov
sub
pop
fwait
neg
mov
int3
scas
xchg
dec
loope
pop
popf
dec
div
adc
arpl
movs
add
xchg
cwde
test
lds
xor
jnp
adc
push
push
or
cwde
popa
gs
pop
jmp
push
mov
fisubr
or
mov
das
repz
jmp
adc
movs
mov
cli
add
mov
and
clc
jae
and
push
xchg
lahf
out
jno
xchg
mov
js
xchg
add
mov
dec
cmp
inc
popa
xchg
(bad)
lods
mov
outs
es
out
or
push
xchg
mov
jns
mov
xor
les
inc
cli
sub
inc
cmps
cmp
dec
unpcklps
cs
jle
scas
popf
mov
mov
and
(bad)
out
xor
hlt
or
jmp
adc
in
retf
popa
xchg
in
fisubr
ficomp
sub
out
hlt
jge
pushf
lds
add
out
ins
je
mov
imul
xchg
(bad)
aad
shl
jnp
xchg
jne
sub
xchg
(bad)
inc
repnz
xchg
call
xchg
fldcw
dec
hlt
xchg
or
addr16
mov
inc
(bad)
dec
dec
push
stos
fild
dec
in
mov
je
jb
jns
loopne
test
popf
mov
jle
sbb
shl
scas
jecxz
jp
stc
fs
push
kmovq
shl
and
xchg
push
dec
cmps
cld
push
loop
sbb
add
fst
nop
pop
fnstcw
out
hlt
xchg
jbe
jmp
mov
jmp
adc
xor
xor
or
stos
arpl
nop
pop
or
std
xchg
xchg
fs
dec
inc
xchg
stos
sbb
mov
ds
inc
mov
pop
addr16
mov
add
popf
or
retf
jmp
or
inc
xchg
jle
aas
xor
push
or
pop
xchg
loopne
mov
jne
mov
push
bound
ja
lock
js
sbb
and
or
dec
cmps
push
(bad)
out
xchg
sti
int
retf
sti
adc
sub
pop
xchg
idiv
or
call
cdq
leave
pushf
mov
fist
imul
xchg
scas
mov
iret
mov
lea
dec
mov
dec
jns
enter
clc
cmp
in
call
jno
sbb
into
addr16
xor
out
adc
int
aad
cli
in
xchg
lock
mov
pop
sahf
movs
cmps
xor
mov
(bad)
test
repz
aam
and
dec
scas
sbb
int3
mov
out
call
pusha
cli
imul
inc
jmp
push
inc
ds
and
xchg
imul
fmul
stos
repz
xchg
xchg
pop
push
sar
jle
pop
stos
sbb
or
mov
xor
movs
and
push
xchg
test
mov
popf
leave
jbe
in
int3
xchg
clc
sub
cmp
jne
arpl
inc
xor
adc
into
sbb
dec
sbb
scas
xchg
mov
sub
aam
ds
or
cwde
adc
dec
push
push
cwde
imul
jns
lea
xchg
jmp
addr16
mov
pop
sbb
pop
jmp
ja
popa
xchg
sar
jl
movs
in
dec
sub
pop
int3
jle
ret
pushf
xor
mov
test
fsubrp
xchg
sbb
sub
in
inc
push
dec
addr16
daa
mov
ror
cwde
mov
add
outs
mov
adc
adc
mov
xchg
lods
aas
jbe
xchg
cmps
call
shl
les
mov
fdivp
add
cmc
mov
push
sahf
lods
cdq
fmul
mov
mov
inc
mov
jmp
nop
mov
je
retf
dec
xchg
cli
pop
mov
adc
and
cmp
cwde
popf
pop
or
push
loopne
xchg
mov
shr
xchg
sub
sbb
fcmovb
retf
add
dec
xchg
fs
hlt
(bad)
stc
mov
pop
cmp
push
std
mov
loope
sbb
movs
fimul
add
xchg
scas
adc
nop
aas
sub
sbb
sbb
or
rcl
(bad)
pop
js
adc
pop
dec
mov
mov
push
fdivr
cmp
sub
sbb
das
pushf
shl
ds
test
adc
pop
xor
mov
rol
fisub
cmp
push
icebp
inc
xchg
je
jns
mov
enter
test
xchg
into
push
and
pop
push
pop
xchg
mov
mov
cdq
adc
fidivr
pushf
stc
popf
xchg
sti
call
js
jns
sar
xchg
(bad)
cmp
add
fmul
mov
mov
mov
xchg
fistp
add
mov
aam
fxch
jmp
fdivr
mov
pop
or
xchg
dec
sub
ret
jno
hlt
ret
movs
stc
ins
(bad)
cmp
sbb
mov
aad
in
outs
jp
ret
fcom
repz
adc
cmps
xchg
std
adc
mov
lea
sbb
or
sar
test
xchg
aad
enter
mov
push
pop
dec
dec
mov
jp
(bad)
cmp
cmp
fwait
shl
mov
jb
lock
push
dec
xchg
xchg
push
test
call
pop
jne
add
cmp
mov
jl
push
je
jns
mov
stos
mov
cs
push
and
leave
call
adc
stos
bnd
fimul
push
call
xchg
adc
jmp
fadd
push
aam
ret
xchg
cli
sbb
mov
popa
mov
test
(bad)
xchg
movs
mov
push
cmps
fcmovb
fist
sub
ret
in
adc
shl
stc
xchg
mov
cmp
xchg
mov
jmp
fsub
dec
push
xchg
cmps
adc
jg
jnp
fs
pop
std
sbb
jp
nop
sbb
call
mov
mov
in
cmp
xchg
cmp
cmp
sub
bound
in
inc
push
das
xchg
scas
shl
inc
pop
ss
sbb
jb
sbb
or
xchg
jle
xchg
icebp
inc
je
xchg
jns
mov
enter
xchg
jl
jge
jp
push
xchg
and
cli
cmp
test
out
stos
test
mov
cdq
stc
std
xchg
gs
xchg
setp
xchg
mov
rcr
js
cld
xchg
add
mov
mov
xchg
xor
push
mov
fldcw
cmp
cwde
stc
or
push
aam
xchg
and
mov
cld
fidivr
repz
jle
cwde
(bad)
jno
hlt
shl
xchg
push
cmp
jmp
mov
hlt
dec
cs
add
mov
jne
ja
sub
fistp
sbb
xchg
sbb
repnz
psubb
imul
cmp
dec
pop
xchg
mov
jp
cmp
and
cmp
fild
mov
adc
ins
sbb
cmp
pop
fwait
std
push
push
adc
mov
nop
cmp
cdq
shl
push
stos
ja
test
xchg
push
clc
and
popf
stos
sbb
sub
push
in
leave
sub
xchg
shl
in
adc
push
enter
xor
dec
jge
in
cld
ror
out
dec
mov
fwait
and
xor
mov
fdivr
mov
mov
adc
cwde
add
leave
sbb
xchg
sub
hlt
sbb
fidiv
popf
cld
sbb
jp
aam
in
ds
and
sub
pop
retf
sbb
mov
test
jle
out
mov
pop
push
add
out
shl
dec
out
into
mov
pop
and
jbe
data16
aam
adc
add
(bad)
sub
jl
push
in
(bad)
enter
mov
or
(bad)
fcmovnu
add
jge
mov
mov
shr
fcomp
cdq
dec
sub
lods
sub
add
dec
xchg
cld
mov
sbb
adc
jg
stos
aam
push
sbb
test
stc
mov
xor
hlt
repz
out
mov
mov
sbb
(bad)
mov
cld
popa
sbb
and
adc
test
rcr
in
pop
and
add
repnz
push
push
cld
add
push
(bad)
sar
ins
sti
jge
inc
xchg
add
in
les
push
out
jl
pop
dec
xchg
(bad)
adc
test
in
pop
(bad)
mov
mov
mov
ror
pop
out
pop
xor
xlat
mov
push
push
in
cwde
and
arpl
xchg
mov
nop
sar
or
scas
jmp
hlt
ret
push
xchg
pushf
test
cmps
jge
jg
fidivr
cmps
or
and
inc
inc
xor
pop
jge
mov
mov
cmps
fst
lea
cld
and
mov
mov
jge
out
loop
out
xor
jl
mov
add
mov
scas
(bad)
mov
mov
mov
out
jl
xchg
dec
into
mov
add
xor
sbb
cmps
and
add
jo
mov
sbb
sahf
iret
hlt
mov
push
ss
cdq
in
xchg
xor
imul
sahf
cld
popf
in
inc
jo
mul
xchg
xchg
push
int3
ficomp
and
in
(bad)
pop
call
loopne
mov
mov
stos
repnz
arpl
fild
mov
(bad)
xor
jmp
call
dec
lock
cmc
xchg
mov
sbb
fmul
retf
inc
cmp
unpcklps
aad
fidiv
fist
jge
inc
sbb
add
test
cmp
lds
es
xlat
addr16
cmps
test
add
xor
mov
inc
das
or
cmps
xor
jmp
pop
xchg
mov
aaa
mov
pop
jmp
imul
(bad)
mov
hlt
pop
push
call
mov
sbb
hlt
test
pop
es
mov
(bad)
xor
adc
pop
jb
outs
cld
xchg
fucomi
mov
and
sub
adc
mov
(bad)
nop
and
mov
enter
adc
stos
fld
in
add
in
ja
ds
fadd
stc
xchg
mov
jge
bound
enter
mov
imul
cli
inc
adc
(bad)
(bad)
add
(bad)
or
addr16
imul
push
lods
mov
cmp
mov
out
es
out
icebp
sub
ret
or
dec
push
cmp
mov
aam
mov
push
aad
jge
loopne
out
pop
mov
mov
hlt
cli
or
mov
shl
dec
mov
lods
and
int3
dec
jl
add
lahf
jno
or
xchg
movs
mov
add
adc
mov
sub
fst
push
inc
leave
aad
mov
push
shl
sub
fdivr
rol
outs
dec
xchg
cmp
clc
push
in
rol
(bad)
repz
add
pop
and
push
(bad)
loop
cld
jmp
inc
push
dec
pop
fsubr
dec
outs
cmp
stos
fwait
or
shl
out
pop
mov
fwait
lods
mov
es
mov
sbb
aam
and
xchg
call
mov
call
popf
in
inc
pop
daa
adc
jbe
or
rcl
ins
xor
dec
div
iret
xchg
stos
push
add
adc
push
jbe
loope
xchg
test
test
sub
adc
movs
je
xchg
lea
dec
popf
shl
jne
jns
out
out
inc
adc
dec
movs
xchg
add
addr16
or
loop
cmp
xchg
repnz
mov
xchg
adc
repz
mov
dec
jg
pop
pop
dec
fst
fwait
out
mov
(bad)
pop
les
rcr
adc
and
mov
dec
adc
fld
xchg
xchg
call
sahf
into
xchg
sti
mov
add
shr
je
mov
and
stc
(bad)
adc
xchg
scas
dec
mov
repz
shl
loope
or
sub
shl
xchg
mov
xchg
ret
lds
sbb
add
enter
sub
in
jbe
xchg
and
adc
out
imul
fwait
and
dec
neg
sahf
mov
add
les
mov
rol
inc
and
adc
pop
or
xchg
ret
or
fmul
sar
sbb
push
cmp
jmp
hlt
pop
push
xchg
adc
bound
jne
je
jle
rcr
enter
xchg
or
mov
xchg
fadd
mov
mov
stc
imul
into
rcr
add
repnz
adc
fs
(bad)
pop
cmps
mov
push
push
ins
call
dec
and
inc
pop
je
sbb
xchg
sbb
test
dec
stos
xchg
stos
out
xor
ror
cmps
test
fisttp
es
adc
popf
xor
xchg
aam
and
push
test
and
popa
pop
and
cld
lahf
or
xor
jmp
sar
sub
or
cmps
sub
inc
fcmovb
aam
(bad)
stc
nop
out
loope
mov
push
cmp
jge
mov
sub
je
jmp
shl
adc
leave
cwde
jge
pop
push
outs
mov
ret
hlt
xchg
lds
test
iret
mov
fidiv
and
ret
cli
xchg
push
imul
mov
xchg
lea
xchg
stos
add
pop
xor
jae
push
sti
bound
es
clc
jbe
aad
nop
and
cdq
in
jge
ss
cs
fs
cmp
mov
lahf
or
xchg
xor
fcom
(bad)
xchg
and
test
rcr
icebp
hlt
push
dec
cdq
pop
dec
fwait
aaa
jg
xchg
adc
push
mov
push
add
in
push
lods
mov
xchg
jle
xchg
sbb
gs
xchg
into
aaa
sbb
mov
icebp
cmc
add
dec
cs
cmp
mov
dec
enter
ror
sbb
nop
cli
pushf
adc
ficom
mov
call
jmp
and
into
push
and
pop
or
xchg
fild
fidiv
into
adc
int
gs
or
inc
cmps
mov
push
hlt
push
mov
xchg
jle
cmc
xor
mov
mov
cmp
enter
jmp
add
lods
and
add
pop
xchg
les
mov
mov
jg
xchg
ja
sahf
add
xchg
lahf
cli
hlt
ret
shl
mov
(bad)
pop
shl
fist
inc
cmps
mov
add
popa
cmp
push
xchg
fld
int
inc
stos
pop
jle
xor
push
pop
aas
xor
push
push
dec
ficom
neg
into
xchg
ja
mov
mov
and
fisttp
sbb
or
xchg
add
mov
enter
sbb
or
mov
pop
xchg
xor
cmp
nop
bound
inc
xor
adc
jl
pop
xchg
sub
nop
int
rol
sbb
cmc
mov
push
mov
push
mov
add
mov
aam
call
add
cld
leave
xchg
xchg
jns
fstp
les
in
xchg
sub
mov
icebp
ret
xchg
push
xchg
mov
add
push
movs
or
xchg
mov
mov
and
and
fcmovne
sbb
push
out
sub
xchg
lahf
inc
jne
pop
jmp
call
push
repnz
addr16
shl
xchg
retf
std
dec
icebp
jae
fwait
in
ficom
adc
inc
movs
jne
(bad)
mov
xchg
or
xchg
sti
movs
add
sbb
pop
int
js
pop
jle
xchg
push
xor
dec
outs
scas
fs
xchg
retf
(bad)
and
push
cdq
xchg
xchg
jg
mov
inc
mov
je
jge
fldl2t
xchg
push
pop
fcmovnbe
les
inc
lods
int
pop
xchg
leave
mov
mov
or
add
in
call
mov
leave
xchg
js
fcomp
xchg
psadbw
es
pop
mov
dec
xchg
mov
adc
xchg
push
dec
xor
dec
mov
pop
and
movs
mov
int
mov
gs
mov
aam
jecxz
mov
and
loopne
xchg
jmp
cli
mov
pop
out
jp
sbb
out
mov
cmps
xchg
push
and
inc
mov
test
mov
fcomp
fst
(bad)
out
cmps
rol
addr16
lods
(bad)
mov
mov
xchg
fimul
add
cli
cmp
fistp
sbb
retf
xchg
hlt
jb
scas
icebp
add
push
xchg
cld
mov
or
xchg
push
cmp
mov
jo
or
lock
jmp
call
jl
xor
mov
scas
fild
dec
out
sub
jge
fwait
mov
adc
xchg
je
add
rcl
dec
cdq
cmp
xor
out
pop
loopne
push
sbb
shl
sbb
js
into
fistp
ds
mov
xchg
mov
and
or
movs
jmp
mov
in
ins
inc
lahf
movs
sbb
add
les
int3
ss
mov
mov
pop
adc
hlt
aas
lock
fcmovb
in
in
push
stos
jge
sbb
mov
cwde
mov
std
push
icebp
nop
test
pop
xchg
jmp
(bad)
xor
shl
jae
jmp
cwde
mov
popf
push
mov
mov
mov
add
xor
shr
in
mov
test
xor
mov
pop
lahf
inc
dec
adc
jecxz
jl
out
(bad)
mov
mov
jo
mov
aam
enter
ins
(bad)
gs
sbb
pop
(bad)
out
mov
lahf
sub
sar
mov
call
rol
cmps
mov
aam
fdiv
sub
das
sbb
xchg
mov
lds
fsubp
jns
xchg
shl
cmp
dec
dec
add
xchg
ins
pop
cmp
es
adc
push
pop
(bad)
ss
jbe
idiv
or
xchg
fdivr
mov
lods
jg
adc
imul
adc
xchg
sub
maxps
adc
scas
jb
mov
fwait
jp
(bad)
or
rcl
xchg
cmp
(bad)
jge
mov
js
or
and
sbb
ficom
xchg
and
xchg
sbb
jge
jbe
addr16
vunpcklps
cmp
test
stos
sbb
and
or
mov
xchg
ins
gs
cmp
jl
and
push
sbb
jbe
fwait
mov
cwde
enter
sbb
xchg
xchg
outs
xchg
stc
fidiv
cmp
fwait
pop
bound
js
cdq
sub
jp
xchg
and
cli
sub
jle
push
xchg
out
mov
lock
xchg
aaa
ror
xchg
pushf
cs
into
test
iret
jbe
stos
int3
test
sub
and
jge
scas
sub
ds
jmp
mov
add
dec
adc
cmps
sbb
jno
jl
adc
int
out
dec
cmp
xchg
or
push
fld
mov
hlt
std
test
jbe
mov
add
es
bound
and
pop
jge
(bad)
push
sahf
mov
or
aam
loopne
cld
push
neg
xchg
xchg
cmp
es
cdq
jge
sbb
push
inc
int
and
mov
mov
cmc
cmps
push
jae
xchg
out
fs
rcr
inc
cs
inc
jge
(bad)
cwde
jo
sti
sub
lahf
cli
int
mov
dec
cmc
ins
pushf
xor
xor
xchg
test
lds
xchg
fadd
jge
fisubr
add
data16
cmp
ret
jl
mov
sbb
test
inc
or
rol
xchg
xchg
mov
pop
(bad)
arpl
pop
or
cmp
retf
imul
xchg
sbb
(bad)
(bad)
mov
mov
xchg
cmp
sbb
push
cwde
xchg
rsm
repz
jnp
pop
ins
mov
pop
xchg
sbb
jecxz
gs
leave
xchg
jg
add
not
daa
outs
xchg
adc
xchg
inc
xchg
or
push
xchg
mov
lods
lods
push
xchg
pop
pop
add
jns
inc
xchg
sub
mov
rcl
dec
and
popf
scas
xchg
cli
mov
daa
mov
xchg
in
out
inc
call
test
sub
xchg
jmp
sbb
nop
sahf
jp
fnstcw
(bad)
std
test
xchg
mov
push
xchg
sar
into
push
js
dec
xchg
(bad)
fcmovne
hlt
mov
push
iret
mov
xor
add
fcom
jle
sahf
xchg
pop
push
stc
jno
jmp
pusha
mov
and
push
or
push
sub
jmp
stos
xor
rcr
inc
test
xchg
call
bndldx
cmp
addr16
mov
cmp
mov
dec
popa
(bad)
icebp
sbb
movs
push
ins
ret
pop
shl
add
xchg
in
stos
dec
fidiv
xchg
push
iretw
sub
mov
mov
shl
sbb
fs
mov
aam
mov
inc
nop
jmp
imul
push
pusha
cmp
sbb
sub
mov
jmp
mov
xchg
inc
fwait
cmovg
cmp
push
xchg
imul
push
sub
hlt
fdiv
inc
mov
popf
retf
adc
inc
scas
aam
arpl
enter
xchg
mov
jno
xlat
jl
call
mov
cli
xor
xchg
mov
and
mov
push
sub
loop
jne
xchg
inc
sub
push
inc
xchg
push
ss
hlt
mov
xor
fsub
popf
inc
xchg
push
adc
xchg
ds
call
shl
xchg
sbb
not
out
xchg
pusha
call
and
mov
push
inc
jp
xor
xchg
inc
mov
and
xchg
push
mov
dec
or
push
xchg
cmp
push
inc
cmp
or
xor
push
test
xchg
mov
pusha
sub
test
mov
rcl
pop
or
mov
into
mov
popf
int3
jmp
ja
mov
xchg
add
xchg
xor
adc
aad
mov
rcr
bound
xchg
inc
sub
in
xor
mov
adc
lds
sahf
xchg
ret
adc
or
mov
ja
fisub
push
xchg
or
lods
std
stos
sub
rcl
sub
imul
mov
xchg
inc
loop
pop
xor
outs
jge
fisub
mov
lods
add
dec
mov
push
mov
mov
call
inc
xchg
ret
push
addr16
add
adc
push
dec
cwde
cmp
add
(bad)
or
fwait
pop
ja
cwde
sub
ret
addr16
push
xor
mov
xchg
ror
xchg
cli
mov
outs
cmc
sbb
lods
xchg
shl
or
fcom
sbb
into
mov
imul
xor
xchg
or
aad
(bad)
jbe
jb
xchg
xchg
xor
fbstp
or
mov
mov
pop
lea
sbb
leave
pop
inc
push
sbb
test
loopne
lock
or
stos
dec
xchg
push
sub
xchg
cs
or
mov
popf
mov
sub
xchg
fnsave
xchg
in
mov
inc
xchg
lea
xor
repnz
push
enter
cli
in
jmp
add
mov
sbb
(bad)
stos
xchg
pop
xor
fwait
ins
loope
and
cs
push
xchg
dec
ja
xlat
xchg
mov
xchg
cwde
jmp
test
sub
sub
repz
js
xlat
pop
pop
retf
and
addr16
or
es
(bad)
imul
mov
mov
mov
fnstenv
xchg
push
dec
xchg
sahf
jg
in
mov
inc
cli
xchg
out
push
aam
jl
mov
repz
ja
scas
int3
adc
pop
mov
mov
fidivr
jne
das
(bad)
push
fs
addr16
adc
mov
fcom
lea
js
xchg
add
test
call
jmp
mov
mov
adc
popf
retf
xchg
stos
xor
xor
je
out
daa
mov
mov
mov
pop
jmp
add
aam
pop
jne
or
push
sub
cdq
jmp
pop
jns
adc
stos
xchg
cmp
sub
xchg
call
and
fwait
aad
clc
mov
and
sbb
pop
xchg
loope
dec
adc
and
push
or
xchg
les
pop
push
arpl
mov
mov
adc
into
and
ficomp
test
(bad)
dec
int3
xchg
mov
imul
jecxz
dec
shl
mov
sub
les
nop
mov
jo
xor
imul
push
sbb
mov
dec
pushf
adc
pop
push
pop
xchg
aas
cmp
fnstcw
aam
hlt
cld
mov
jge
add
adc
push
sti
clc
test
push
cdq
mov
or
enter
jbe
call
cwde
push
(bad)
cmp
cmps
arpl
mov
push
push
ins
mov
sub
cmps
ret
sbb
imul
(bad)
stos
dec
jne
dec
jg
push
movs
jnp
int3
xchg
xlat
iret
shr
sub
outs
push
add
mov
into
int3
and
ds
retf
cmps
pop
hlt
adc
sbb
int3
cmp
(bad)
adc
jmp
sbb
ficom
or
ds
imul
push
stos
jge
xor
sub
xchg
into
sbb
sub
pop
cmp
mov
cs
push
push
pop
inc
test
fsubr
js
scas
mov
and
cli
adc
cld
jl
push
std
aas
xlat
cld
and
hlt
jge
lods
test
mov
cmps
rol
ret
sbb
fst
popf
jae
inc
mov
xchg
fcomp
inc
dec
test
cdq
adc
test
cmps
or
and
movs
je
xor
mov
(bad)
pop
fmul
in
mov
xchg
jp
dec
mov
movs
cld
into
and
sub
add
push
int3
xchg
adc
mov
lds
or
inc
xchg
sbb
and
ds
ss
sub
movs
ret
jo
mov
out
xchg
cld
imul
push
les
xor
xchg
test
fadd
sti
xchg
dec
mov
ja
mov
xchg
imul
cmp
pinsrw
pop
xor
push
push
outs
adc
jmp
xchg
xchg
jnp
or
es
sbb
aam
push
aam
pop
pop
xchg
daa
popf
sub
test
xchg
cmps
jmp
add
dec
add
call
xchg
pop
jmp
xchg
(bad)
cmc
mov
inc
lahf
arpl
aas
sbb
push
sub
jle
ss
stos
call
cmp
xchg
test
test
dec
xor
int3
test
mov
aam
(bad)
cwde
adc
call
push
jbe
out
aaa
outs
je
stc
add
ror
fst
call
xor
inc
call
push
das
xchg
dec
shr
dec
xchg
mov
cmp
call
leave
cmps
xchg
xchg
dec
fwait
lods
mov
push
(bad)
fist
fwait
int3
xchg
or
retf
repz
ins
inc
rcr
shl
je
xchg
adc
movs
pusha
xchg
cmps
leave
lock
jmp
cwde
ins
jbe
test
adc
sub
scas
cdq
mul
jo
adc
inc
xchg
std
xchg
shl
jmp
stos
jnp
add
sti
lahf
jae
clc
pop
jl
mov
repz
sar
adc
xor
shl
stos
and
pop
sub
int3
mov
sbb
dec
push
adc
int3
aaa
pop
or
cdq
mov
jl
add
rcl
inc
repz
jnp
jl
fs
xor
jae
xor
lods
sbb
loopne
jl
loope
adc
dec
mov
and
arpl
adc
fcmovb
popf
adc
xor
mov
push
or
adc
loope
leave
mov
adc
push
lock
sub
push
xchg
cmp
jmp
mov
shl
and
pop
aas
popf
cli
sbb
call
push
push
(bad)
lods
out
xor
imul
out
(bad)
pop
aad
xchg
loopne
xchg
cmps
cld
frstor
dec
pop
shr
sub
stos
mov
rcr
sbb
mov
sub
std
xchg
xchg
stos
xor
jmp
pop
hlt
fucomp
cld
(bad)
int
out
mov
cmp
test
mov
jne
je
repnz
cld
fs
jle
sub
push
push
jge
repz
xchg
jmp
cld
cmovs
(bad)
jmp
mov
mov
ficom
mov
cmp
jg
mov
fimul
shl
mov
jmp
xchg
xor
cdq
fsubr
js
neg
mov
sbb
daa
fcomp
jp
or
mov
fistp
pop
in
mov
jb
mov
dec
or
sahf
scas
sbb
push
jmp
sub
add
push
fcmove
retf
loopne
xor
xchg
push
in
iret
or
hlt
xchg
lahf
stc
lods
or
dec
fistp
cwde
cmp
sar
fcom
cmps
jmp
or
sub
xchg
repnz
nop
add
cli
sbb
sbb
or
sar
cmps
pushf
clc
fidivr
xchg
inc
movnti
push
mov
cmp
sub
sbb
push
inc
pop
inc
mov
sub
xchg
add
ficomp
mov
add
jns
xchg
mov
enter
jl
iret
jge
xchg
sbb
cli
xchg
xchg
pop
cmp
in
je
sub
add
cwde
xlat
cdq
mov
add
or
add
xchg
add
cmp
(bad)
fstp
xchg
popf
add
dec
xchg
int
fdivr
das
popa
mov
inc
or
aas
xchg
add
push
jmp
jb
add
cmc
(bad)
(bad)
movs
add
sbb
xchg
int
cld
cmps
call
cmp
fwait
std
jns
xchg
mov
mov
or
out
mov
xchg
scas
adc
sbb
loopne
clc
sbb
ds
add
fs
adc
(bad)
mov
popf
xor
cmp
xchg
mov
fidivr
cmp
sub
sbb
mov
in
shl
je
jns
adc
aam
enter
pop
mov
stc
xchg
fisubr
xchg
test
dec
sub
cwde
and
mov
inc
pushf
add
push
and
dec
aas
fwait
add
mov
outs
adc
cdq
rcl
mov
pushf
ret
sub
inc
pop
(bad)
mov
adc
mov
shl
add
add
fistp
popa
scas
inc
add
fdivr
xchg
mov
xchg
rcr
jmp
(bad)
inc
add
xchg
retf
jnp
out
sbb
mov
xchg
add
jno
hlt
cmps
sbb
dec
stos
add
std
mov
adc
out
cmps
jb
rcr
popf
add
call
jbe
arpl
adc
jnp
test
xchg
iret
ror
clc
loopne
xchg
mov
pop
cmp
push
mov
cmp
xchg
pop
xchg
mov
out
inc
outs
xchg
das
lods
shl
dec
pop
inc
es
xchg
cmps
call
adc
cwde
push
add
fisub
pushf
add
xchg
push
mov
es
movs
cmps
jl
les
in
and
cli
cwde
(bad)
pop
mov
cmps
aas
xchg
add
and
call
shl
mov
js
popf
jmp
add
retf
loope
xchg
xchg
fidivr
xchg
cwde
cmp
adc
lea
inc
cmps
fmulp
test
popa
xchg
sbb
rcr
(bad)
mov
out
cmp
fst
push
jno
hlt
fwait
sar
xchg
adc
mov
mov
pop
jp
fmul
dec
adc
mov
sbb
sub
push
sbb
sbb
mov
add
sbb
xsha1
cmps
int
xchg
ins
dec
inc
mov
in
push
cmp
(bad)
ror
inc
xchg
cwde
aas
pop
cmp
aad
pop
inc
pop
jl
inc
xchg
dec
add
fisubr
ficom
and
mov
enter
add
mov
pusha
adc
xchg
cli
dec
pop
test
mov
mov
out
xchg
ss
push
xchg
popf
(bad)
call
sbb
movs
sahf
ins
jo
mov
mov
mov
pop
mov
rcl
stos
xchg
popa
push
cmp
aaa
ror
int3
pusha
jl
retf
xchg
mov
ins
push
lods
mov
pop
movs
sub
lods
push
add
xchg
call
add
es
dec
xchg
fcom
mov
xchg
adc
push
mov
iret
add
leave
mov
dec
inc
jle
inc
and
and
inc
test
or
leave
cmp
icebp
xlat
(bad)
jle
xchg
imul
jp
or
xor
adc
adc
popf
mov
outs
xchg
fs
jg
neg
dec
(bad)
push
xchg
sbb
(bad)
loopne
iret
je
jmp
or
mov
sahf
retf
inc
test
daa
xchg
pop
cwde
mov
popf
mov
ror
stc
dec
sbb
push
mov
sbb
outs
(bad)
(bad)
pushf
and
scas
jne
aam
jmp
mov
jle
and
xchg
repz
add
adc
pop
test
xchg
cmps
xchg
in
sbb
imul
loopne
inc
sbb
or
push
mov
jecxz
xchg
outs
(bad)
in
adc
into
das
xchg
clc
xchg
push
psrlq
cmp
and
xor
or
arpl
jg
adc
mov
add
fbld
push
xchg
sub
or
and
fwait
mov
retf
pop
(bad)
mov
add
mov
add
jl
or
js
xchg
test
es
js
mov
(bad)
aas
xchg
pop
xchg
outs
jl
jne
inc
ds
js
push
or
in
adc
test
sub
sbb
sar
out
xchg
pop
jle
movs
fdivr
pop
push
xchg
jb
and
pusha
push
std
xchg
push
pop
pop
rcr
pop
dec
lahf
sub
inc
xchg
xchg
mov
xchg
dec
popa
data16
fs
ret
cs
add
and
xchg
sub
(bad)
(bad)
jge
and
enter
sar
out
mov
mov
mov
js
inc
xchg
into
neg
jecxz
dec
test
xchg
lods
xchg
inc
xchg
int
pop
into
stos
sti
sbb
push
xchg
fimul
hlt
mov
inc
xchg
mov
lea
xchg
fnstenv
adc
jmp
xchg
ret
leave
int
inc
sar
lds
imul
xchg
jecxz
adc
hlt
and
mov
in
mov
sbb
xchg
popa
sub
mov
jnp
(bad)
cdq
xchg
jno
sub
je
xor
nop
xchg
enter
xor
adc
and
adc
pop
not
cmc
cmp
cmps
xor
test
inc
js
data16
xchg
mov
mov
outs
xchg
out
sub
cdq
jg
mov
xor
cs
scas
repz
les
popf
jne
push
cs
add
jg
add
xchg
loope
xchg
data16
in
inc
hlt
out
fucom
scas
sahf
xchg
aaa
push
retf
pop
je
and
scas
pop
out
in
(bad)
arpl
ret
movs
fbstp
pop
cdq
bound
in
test
mov
out
xchg
pop
movs
xchg
inc
push
gs
cmp
popa
xchg
inc
dec
mov
ret
stos
mov
mov
(bad)
and
push
adc
xchg
rcl
repnz
pop
dec
xchg
int
fist
mov
je
(bad)
fidivr
pop
push
or
xchg
push
adc
mov
sar
dec
or
xchg
dec
adc
mov
add
mov
ror
adc
int3
inc
pop
jg
xchg
lods
jne
xlat
pop
cwde
in
call
and
jbe
mov
push
adc
adc
xchg
cmc
outs
fs
push
outs
(bad)
repnz
push
mov
scas
test
addr16
fimul
pop
mov
ja
aam
xor
sub
adc
mov
hlt
mov
mov
sahf
gs
xchg
mov
push
mov
popf
cmp
aad
fistp
xchg
nop
cmps
inc
inc
xor
jl
pop
push
jmp
popf
fsub
ins
aam
mov
mov
mov
xor
(bad)
(bad)
in
(bad)
push
sbb
dec
call
adc
loop
sar
loope
pop
inc
sub
lods
sbb
popf
bnd
call
into
push
adc
pop
mov
out
lods
data16
outs
fs
sub
shl
js
out
hlt
push
add
(bad)
mov
push
popf
test
add
push
adc
fimul
pop
lea
outs
jmp
dec
xchg
stc
popf
cmp
repz
mov
cmps
jle
xor
jmp
scas
movs
cmps
jge
repz
test
mov
or
loope
jl
fstp
xor
pop
mov
outs
xor
adc
mov
dec
or
push
loopne
jae
out
and
or
ret
jbe
stos
push
cmp
push
pop
dec
outs
movs
data16
pushf
ins
mov
out
adc
jge
fisttp
mov
sbb
imul
out
jmp
fnstcw
and
(bad)
and
es
xchg
in
jge
push
lock
pop
sbb
addr16
xor
push
jbe
(bad)
dec
jmp
mov
mov
xchg
xchg
pop
nop
dec
push
mov
push
shl
sbb
fwait
in
pop
pop
in
adc
shr
jmp
stc
fistp
mov
cmp
ret
sbb
add
adc
xchg
xchg
fldz
pop
xchg
cmps
jmp
inc
cmps
lods
xchg
repnz
pop
lahf
test
rol
and
fst
xchg
xlat
sbb
inc
outs
xchg
ret
scas
out
inc
pop
or
xchg
and
push
cli
mov
and
sub
jmp
cmp
cwde
stc
adc
push
fsub
pop
add
movs
push
movs
sbb
mov
xor
mov
add
or
sub
sbb
sbb
bound
jmp
fcom
in
shr
jmp
pop
icebp
jle
mov
xchg
jl
xor
mov
jbe
aam
mov
gs
fdivr
mov
pusha
jbe
xchg
hlt
cld
adc
pop
fidiv
sbb
sbb
add
sbb
mov
sub
aam
cmp
test
cli
jecxz
dec
cmp
test
mov
(bad)
dec
ins
pop
sub
adc
jl
jno
add
hlt
pop
hlt
cld
jnp
pusha
adc
repz
fistp
and
xor
std
cdq
rol
cmp
xchg
or
(bad)
mov
loop
fwait
push
in
dec
jae
es
inc
and
gs
mov
nop
daa
call
outs
push
cld
out
sub
arpl
push
pop
int
cmps
xchg
xor
sbb
pop
cmp
aas
sub
mov
xchg
loope
iret
js
ds
int
cmp
mov
loope
fbld
mov
shl
mov
mov
cdq
adc
mov
out
push
lods
inc
and
jg
mov
(bad)
cld
aam
shl
and
test
ds
xchg
jne
jae
(bad)
aam
into
call
dec
mov
xchg
int3
sub
mov
aam
call
xchg
ror
test
and
xchg
xor
loopne
cmp
adc
fimul
retf
(bad)
out
or
sbb
test
mov
in
jnp
cli
xchg
jae
pop
xchg
js
shl
xchg
call
imul
out
xor
xchg
jl
sbb
pop
adc
ins
fild
pop
xchg
sti
jns
xchg
call
cmps
je
addr16
xchg
sub
push
and
(bad)
adc
and
xor
fwait
movs
ins
jge
sti
fs
lods
sub
lods
xchg
adc
xor
mov
les
mov
out
mov
dec
mov
pop
outs
neg
inc
xor
sbb
mov
out
inc
and
bnd
or
mov
push
jns
xor
jbe
jno
jge
stos
xor
mov
es
adc
retf
pop
cmp
les
(bad)
xchg
pop
sahf
pop
imul
sbb
stos
pop
mov
iret
xor
cli
mov
daa
repnz
loope
jle
(bad)
shl
mov
es
fldcw
push
cmps
xchg
enter
mov
mov
outs
in
not
data16
xchg
retf
movs
xor
or
jns
mov
in
mov
and
test
je
xchg
int3
cmc
mov
add
push
int
xchg
mov
xchg
shl
outs
scas
xchg
pop
in
xchg
adc
ret
push
les
stos
jg
int
adc
loop
mov
(bad)
imul
sub
jae
fimul
xchg
cwde
dec
stos
pop
jo
xor
sub
mov
or
ins
inc
push
enter
movs
push
nop
cmp
xor
inc
xchg
dec
mov
ss
enter
mov
and
fadd
add
pop
mov
enter
mov
xchg
inc
dec
adc
jl
xchg
dec
mov
sti
pause
jle
xchg
clc
pop
test
call
xchg
dec
out
xchg
fs
mov
sbb
inc
neg
cld
daa
(bad)
push
xchg
in
pop
int3
lahf
jle
aam
xchg
je
cmp
mov
shr
xchg
and
aam
popf
pusha
push
and
jae
push
push
jl
fnstenv
xlat
fisttp
(bad)
repz
mov
mov
jae
sub
mov
lods
xor
push
sbb
test
rcr
xchg
cmps
xor
mov
push
arpl
in
fsub
(bad)
push
iret
imul
fmul
mov
bound
xchg
jp
out
ror
jge
xchg
xor
(bad)
fisubr
cmc
in
js
je
xchg
xor
dec
fsub
adc
movs
outs
adc
rol
xchg
add
inc
xchg
sub
adc
out
adc
adc
(bad)
mov
jno
mov
js
xchg
xchg
dec
push
mov
xchg
hlt
jnp
jb
adc
nop
mov
je
adc
in
xchg
pusha
or
mov
jl
xchg
sub
cli
into
pop
jecxz
push
xchg
sbb
jle
add
inc
xchg
and
les
cdq
add
adc
addr16
sti
mov
xchg
jbe
jmp
xchg
sbb
mov
add
ins
mov
in
daa
jae
xchg
gs
xchg
int
cmp
rcl
push
and
pop
push
jae
je
xchg
inc
fwait
sub
adc
addr16
mov
fs
cs
shr
mov
pop
mov
jbe
cmps
(bad)
shl
lds
movs
fist
aas
test
rcr
mov
test
cs
or
out
add
sahf
aaa
lods
xchg
and
inc
test
or
lods
call
push
cdq
loope
xchg
mov
(bad)
jmp
out
loop
movs
push
lods
mov
xchg
fld
jae
mov
mov
jl
fbstp
sbb
pop
jnp
cmp
inc
lds
outs
xchg
pop
es
cmp
xchg
mov
push
xchg
clc
mov
pop
cwde
add
mov
push
adc
adc
jae
mov
call
xchg
(bad)
pop
pop
cmp
fwait
sete
add
xchg
ja
sbb
jmp
fdiv
arpl
outs
xor
cmc
call
xchg
jmp
rcl
cdq
movs
aas
xchg
push
pop
fld
movs
imul
outs
xchg
xchg
mov
test
xchg
cmps
call
fdivr
popf
inc
fs
imul
adc
mov
adc
adc
sbb
xchg
pop
fst
mov
imul
xchg
and
pop
inc
jmp
jecxz
or
xchg
iret
push
cwde
or
xchg
cld
push
repz
je
fwait
mov
imul
jl
repnz
xor
scas
cs
adc
jecxz
sub
mov
fst
mov
mov
ret
jmp
lock
movs
xchg
pop
(bad)
xchg
pushf
mov
in
or
inc
sbb
xchg
mov
enter
mov
pop
mov
push
sbb
sahf
push
sub
fs
push
xchg
jb
cmp
xchg
jmp
loop
jge
jl
ins
pop
pop
nop
sbb
adc
and
pop
call
out
call
xor
(bad)
data16
mov
cmps
pushf
xchg
fsub
rcr
out
retf
sar
ins
xor
push
xchg
adc
out
(bad)
shl
dec
pop
lahf
and
adc
jmp
ret
movs
sbb
dec
xchg
inc
outs
mov
dec
daa
lods
jl
adc
xor
and
out
mov
sti
sbb
cld
popf
dec
mov
mov
xchg
pop
and
pushf
dec
adc
fstp
aam
xchg
cld
outs
or
jo
push
sbb
mov
mov
sbb
jmp
xchg
pop
cld
jae
shr
dec
pop
adc
jmp
mov
in
adc
aaa
test
mov
out
dec
xchg
fidiv
pop
adc
sbb
cwde
jg
add
add
sbb
jns
xor
je
mov
out
xor
inc
sub
dec
cwde
mov
add
lahf
xor
fs
sar
popf
jge
lods
imul
in
cmp
in
xchg
mov
and
xlat
mov
out
pop
leave
imul
(bad)
jnp
xchg
jl
int
aad
aad
out
sar
xor
sbb
xchg
xchg
fwait
lds
outs
jge
paddd
push
in
mov
icebp
cdq
sbb
xchg
cs
add
inc
cmps
jecxz
pop
into
test
mov
xor
or
stc
pop
ds
and
push
out
push
rcl
cmp
cmc
pusha
fnstsw
shl
sub
in
cmps
mov
push
adc
push
adc
arpl
cwde
cmps
fidivr
and
cli
sbb
adc
fwait
push
jg
or
xor
mov
xchg
cwde
movs
addr16
xchg
jo
idiv
aam
jl
jecxz
ss
in
xor
popa
push
jl
data16
dec
fsubr
mov
jg
mov
mov
sbb
sbb
(bad)
fs
rcr
pop
or
addr16
imul
cmps
push
test
add
cld
(bad)
xchg
push
add
mov
and
jb
mov
loopne
scas
ins
adc
pop
iret
mov
dec
ret
pop
mov
mov
not
call
jmp
and
in
sbb
add
into
cmp
and
cmp
add
imul
jg
(bad)
in
ror
mov
cmp
cmps
jge
pop
jg
das
dec
xchg
rol
mov
fdiv
xor
jl
and
mov
mov
or
call
dec
out
mov
sbb
data16
in
addr16
mov
push
sbb
jae
movs
xchg
sahf
lea
mov
sbb
pop
dec
das
mov
clc
mov
dec
les
addr16
push
gs
xor
call
cmp
cmps
imul
mov
call
lds
nop
clc
aas
ins
mov
pop
les
ja
adc
xchg
cwde
jno
inc
test
adc
push
imul
ja
mov
sbb
and
xlat
movs
retf
xchg
mov
sbb
adc
jbe
adc
xchg
xor
inc
adc
push
push
or
pop
and
(bad)
loopne
shl
mov
jl
xchg
pop
xor
adc
sub
mov
dec
or
add
data16
push
inc
jo
jb
fiadd
hlt
pop
(bad)
mov
sti
das
pop
and
sub
mov
add
outs
xchg
push
rcr
sbb
sub
mov
(bad)
out
xchg
sbb
mov
popf
xchg
leave
loope
loop
mov
ja
jb
add
xchg
dec
pop
sub
push
mov
adc
push
dec
imul
int
jge
mov
mov
ins
popa
cmps
call
sbb
repz
hlt
sub
and
ror
mov
push
dec
jnp
inc
xor
das
test
rol
xchg
dec
push
pop
dec
daa
lahf
adc
xchg
into
aaa
mov
icebp
xchg
xor
inc
hlt
push
aas
xchg
(bad)
mov
pop
push
inc
push
push
jmp
inc
fcom
cmp
mov
push
aad
call
xchg
adc
sbb
jnp
lock
xchg
dec
stos
pusha
xlat
arpl
inc
mov
xchg
add
in
movs
pop
mov
xor
repz
scas
dec
imul
adc
movs
in
inc
fwait
add
mov
lea
xchg
xchg
sbb
sti
fistp
into
mov
mov
inc
mov
xchg
pop
out
stos
push
push
int
fcom
les
cmc
push
ror
fwait
mov
cmps
shl
sbb
std
jno
mov
sub
sub
repnz
mov
icebp
or
pop
dec
xchg
(bad)
mov
inc
shl
sbb
cmc
pop
pusha
mov
fsub
(bad)
adc
pop
fld
retf
xchg
test
dec
dec
leave
ins
inc
les
sbb
loope
xor
cmp
rcr
xchg
and
imul
xchg
cmp
lds
xchg
pop
xor
mov
mov
add
shl
push
mov
push
cmps
adc
xor
aas
(bad)
mov
cld
mov
jge
xlat
out
cwde
movs
call
jmp
leave
sub
repnz
xor
out
pop
test
sbb
icebp
jmp
clc
mov
pop
cmovne
or
std
stos
xor
inc
sbb
fld
ror
pop
mov
mov
icebp
clc
cmp
sbb
sbb
shr
daa
pusha
push
in
xor
arpl
lahf
push
(bad)
(bad)
cmp
xlat
scas
add
and
dec
or
sbb
fistp
and
sub
or
nop
jge
fidiv
inc
fst
jmp
jl
out
ret
clc
test
push
call
pop
mov
popf
ins
sbb
cmp
loop
ja
cdq
mov
mov
mov
into
dec
(bad)
sahf
xchg
pop
cld
mov
arpl
mov
movs
in
in
adc
xchg
arpl
adc
mov
pushf
arpl
xchg
xchg
push
fs
xchg
mov
add
jo
cdq
xor
ret
int
mov
rcr
loop
add
mov
dec
mov
xchg
sub
sbb
pop
repz
or
adc
iret
rol
rcr
in
hlt
jge
(bad)
(bad)
cld
xchg
daa
pop
cld
sbb
(bad)
movs
cdq
in
pop
xchg
int3
dec
pop
int
sar
sub
popa
hlt
or
ret
mov
into
mov
push
js
pushf
loopne
fisttp
mov
xor
fcom
test
(bad)
popf
mov
jl
in
pop
or
pushf
mov
iret
leave
push
cli
xchg
sbb
popa
out
addr16
loopne
mov
pop
icebp
mov
jge
cld
js
xchg
cmps
xchg
mov
ret
pushf
inc
jb
mov
iret
cwde
pop
add
xchg
mov
mov
and
push
bound
jge
fist
and
inc
movs
out
std
enter
jge
loop
cdq
or
ins
sub
push
out
les
jmp
test
rcl
pop
fnstsw
adc
mov
and
mov
in
jl
xchg
mov
pop
call
mov
push
pop
addr16
fild
ret
mov
ja
push
sbb
inc
cmps
pushf
push
jne
fs
xor
jmp
mov
loope
dec
inc
icebp
enter
pop
aad
sub
pop
mov
jbe
jge
push
sbb
sbb
(bad)
out
ret
idiv
js
js
mov
push
repz
push
fsubr
mov
imul
icebp
jmp
mov
addr16
cld
imul
xor
push
(bad)
fwait
shl
test
rol
lea
cmp
sbb
mov
push
ret
sar
mov
arpl
bound
mov
add
add
xor
jae
int3
mov
ret
out
shl
stc
dec
in
jl
scas
jne
mov
out
lds
push
iret
adc
pop
dec
push
sbb
pop
xor
(bad)
xchg
(bad)
int
jge
int3
jno
je
xchg
pop
mov
nop
leave
loop
and
xchg
xor
cmp
out
xor
cwde
mov
jmp
stos
sahf
mov
ret
mov
ror
int3
or
jb
movs
mov
test
pop
loopne
movs
xor
fsub
stc
add
dec
cdq
push
cmp
adc
push
dec
adc
cdq
cld
cmp
mov
jne
nop
cld
cdq
enter
jmp
inc
push
mov
dec
push
add
mov
les
dec
cdq
inc
cmp
sar
js
enter
dec
aaa
push
je
sub
pop
(bad)
jl
loopne
mov
adc
mov
lahf
fmul
cmps
sbb
inc
jno
mov
out
and
sbb
out
sbb
pop
lods
pop
jmp
lea
jp
jnp
push
into
jmp
loop
mov
das
cmp
enter
mov
(bad)
cli
push
movs
or
push
aad
push
push
mov
data16
test
jmp
jno
sahf
sbb
xchg
jl
inc
or
adc
jge
pop
daa
pop
sbb
push
aad
jbe
xchg
mov
lahf
xor
xchg
add
adc
sub
(bad)
sti
jno
cdq
inc
xor
xchg
and
jmp
xchg
mov
inc
pusha
out
xchg
enter
fdiv
inc
scas
ret
or
pop
mov
sahf
shr
xor
push
xor
sbb
xchg
mov
dec
or
pop
xlat
push
cmp
dec
or
xchg
fisubr
inc
shr
pop
mov
addr16
aam
and
ds
mov
inc
jbe
je
xchg
and
arpl
xchg
das
sbb
ins
jmp
xor
mov
js
xchg
mov
call
jo
mov
cmp
push
add
xor
movs
cmps
imul
push
cmc
xchg
pop
arpl
adc
add
mov
out
xchg
clc
add
stc
lock
mov
xchg
repz
(bad)
ss
int3
xchg
add
aad
test
xlat
inc
(bad)
jns
push
mov
rol
cld
rcl
(bad)
and
cwde
or
xchg
xor
popf
mov
lea
lahf
out
xchg
jp
movs
(bad)
enter
call
push
es
mov
pop
sahf
pop
fs
lahf
jg
adc
nop
jl
mov
xchg
lock
pop
iret
out
dec
inc
loop
xchg
pop
xchg
cwde
popa
out
jo
cli
jmp
ret
arpl
pop
enter
(bad)
std
pop
mov
pop
test
sub
daa
mov
inc
xchg
dec
jb
retf
pop
dec
inc
pop
shl
adc
ret
mov
stc
std
adc
and
jne
add
sbb
add
mov
mov
ds
sahf
dec
aad
ins
xchg
xchg
in
jno
je
xchg
loopne
and
jl
into
cmp
sub
mov
jae
repnz
mov
je
int
ret
out
xchg
loop
jle
push
xor
xchg
lods
test
jb
or
adc
mov
test
pop
mov
in
mov
add
jne
outs
xchg
test
xchg
mov
push
retf
cdq
sbb
(bad)
or
ins
xor
retf
pop
push
pop
xchg
xchg
hlt
jb
add
js
and
adc
xchg
cmp
in
mov
aam
mov
add
in
sar
fwait
data16
sub
sub
add
xchg
retf
in
or
pop
add
cmps
test
enter
pop
inc
fisttp
pop
xchg
fwait
sbb
(bad)
jge
add
scas
pop
mov
xchg
jmp
imul
sbb
enter
or
ss
xchg
aam
mov
or
mov
sbb
(bad)
mov
cmp
inc
xchg
push
(bad)
in
aad
clc
xor
ret
pushf
adc
fcom
shl
pop
pop
inc
sbb
shr
(bad)
dec
div
xchg
std
cmps
movs
ret
mov
test
fs
jbe
adc
push
pushf
out
xchg
call
(bad)
push
xchg
shl
cmp
add
sahf
mov
int
push
fst
aas
xchg
fs
pop
dec
rcr
fucompp
push
mov
out
mov
js
xchg
cs
int3
pop
fwait
stos
loope
(bad)
cwde
add
rol
and
push
xchg
cmp
dec
jmp
inc
jne
xchg
arpl
pop
les
jle
xchg
fwait
sar
push
cmps
sti
fwait
test
stos
mov
add
push
jle
call
xchg
ds
xor
dec
movs
sar
jle
xchg
(bad)
dec
fcmovnb
inc
xlat
stos
sub
fidiv
mov
pop
cmp
sbb
popa
cmps
adc
adc
fsubr
mov
sar
ins
jne
(bad)
(bad)
sub
mov
cmp
or
pusha
sub
xchg
dec
xchg
pop
xchg
or
xchg
adc
mov
mov
jle
adc
in
jns
jne
(bad)
xor
adc
fimul
mov
push
jecxz
xor
into
xchg
pushf
cmps
ror
push
fsubp
loopne
adc
dec
shl
adc
xchg
rcl
je
xchg
dec
out
xchg
gs
psadbw
push
xchg
dec
pop
mov
jns
and
dec
scas
mov
fs
call
leave
push
pushf
data16
jmp
addr16
rcl
out
dec
jne
sbb
inc
mov
rcl
adc
loop
inc
test
pop
push
repz
and
test
mov
add
lahf
or
push
adc
jo
cmc
xchg
xchg
cdq
cmp
enter
jno
jl
mov
pop
push
ins
scas
cli
cs
add
jecxz
mov
add
dec
xchg
or
and
add
mov
xor
mov
test
icebp
test
jae
iret
(bad)
fiadd
daa
mov
inc
stos
jns
and
mov
xor
cmp
into
xchg
inc
rcl
adc
mov
loopne
or
xor
mov
imul
or
jmp
jg
mov
dec
push
push
fdivr
idiv
adc
sub
dec
mov
loop
call
jge
mov
push
sub
or
mov
out
pop
inc
cwde
loop
adc
adc
mov
stos
inc
mov
mov
xor
ds
iret
fsubr
fsubr
je
sub
adc
push
pop
sub
lea
inc
lock
and
mov
out
ins
pop
sub
div
cmp
mov
sub
and
mov
iret
aam
cld
mov
xor
jmp
jge
enter
jg
les
and
xor
js
(bad)
mov
pop
push
and
ret
mov
movs
test
add
out
ss
fsub
pop
adc
stos
cmc
fwait
mov
adc
jo
adc
jg
or
pop
push
dec
mov
test
jb
and
and
xor
cld
repz
aad
jmp
xchg
out
or
mov
out
je
sbb
fwait
sbb
out
xor
or
cld
push
ret
repz
inc
xor
dec
inc
sbb
ins
inc
enter
cld
mov
mov
xor
mov
jl
pop
sahf
lock
mov
xor
adc
std
ins
int3
retf
ins
xabort
and
xchg
mov
inc
lahf
push
hlt
dec
sub
mov
inc
fs
and
daa
pop
and
add
push
ins
xor
popf
cwde
ins
aad
(bad)
in
inc
mov
call
dec
and
int3
mov
scas
test
dec
pop
stc
aad
push
xchg
and
adc
push
call
stc
pusha
sub
aam
ror
xchg
xchg
clc
jle
(bad)
les
out
mov
adc
xchg
add
sbb
sti
add
add
rcr
ins
mov
pop
aam
adc
in
sti
xchg
mov
test
popf
and
je
pop
jne
call
mov
push
dec
mov
xchg
pop
mov
test
or
inc
xchg
sbb
push
aas
xchg
or
ja
(bad)
out
fistp
add
call
outs
mov
pop
sub
xchg
popf
stc
fstp
clc
aas
fdivr
test
dec
xchg
push
das
dec
lods
loope
push
adc
mov
mov
push
(bad)
sub
ss
out
bound
xchg
sub
scas
xor
fs
jmp
cdq
rol
xchg
out
xor
cld
sbb
jecxz
jns
std
call
add
push
cld
popf
pushf
dec
fnsetpm(287
in
enter
xor
aaa
push
xchg
es
(bad)
xchg
push
jl
jle
test
mov
push
int3
inc
aam
dec
adc
in
mov
pop
ror
add
enter
mov
jb
inc
push
loope
neg
dec
jl
jecxz
xchg
ss
sbb
loope
movs
jl
leave
sbb
fld
mov
mov
or
pop
inc
jl
loop
mov
lods
add
enter
xor
mov
not
nop
cdq
(bad)
push
jecxz
xor
mov
stos
pop
adc
int
jecxz
mov
aaa
mov
adc
lahf
enter
xchg
cmp
sub
inc
jmp
adc
jge
repnz
or
popf
cld
fnstcw
inc
xchg
push
adc
adc
ins
inc
pop
lock
jae
adc
cmps
jmp
cs
les
fs
xor
scas
lods
jle
fcom
xchg
fs
adc
xchg
push
inc
mov
cs
xchg
stc
jae
repnz
mov
cmp
in
call
nop
and
out
mov
cmp
dec
inc
rol
push
les
je
loope
jmp
adc
and
mov
aas
xchg
fs
push
sub
lahf
stos
imul
pusha
mov
xor
inc
sahf
repz
shl
pop
adc
cdq
jae
sub
push
mov
repnz
lock
xchg
cmp
mov
push
xor
sar
iret
dec
xchg
dec
popf
fld
fs
mov
in
xchg
adc
pop
mov
aam
mov
sahf
xchg
xchg
cdq
ret
movs
jbe
std
xchg
inc
daa
shr
xchg
sub
dec
jns
enter
push
inc
xor
stc
stos
push
rcr
leave
sbb
or
pop
nop
mov
xchg
jbe
xchg
or
std
movs
lods
loop
or
lods
ja
cld
add
xchg
rcl
addr16
jb
jg
push
xchg
jnp
pop
ret
sbb
xor
fiadd
xchg
inc
es
adc
test
add
sbb
ret
xchg
mov
jae
or
cdq
or
imul
and
mov
cwde
ins
jns
neg
jbe
lock
or
mov
lds
mov
mov
cmp
nop
add
fist
or
mov
adc
add
jl
pop
aad
xchg
mov
clc
ds
or
and
xor
popa
fld
or
add
xchg
fsubr
outs
iret
mov
xchg
fwait
mov
add
xchg
xchg
les
rcl
jmp
fwait
xchg
je
jb
and
adc
rcl
cmp
imul
test
iret
inc
lahf
mov
outs
adc
push
scas
arpl
pop
lea
inc
inc
push
inc
lds
daa
mov
jne
mov
cwde
mul
add
inc
mov
push
sbb
inc
push
(bad)
mov
aaa
jmp
xor
sub
xor
pusha
xchg
mov
ret
or
and
loop
cld
mov
add
adc
in
jge
sbb
or
adc
sbb
lock
sahf
jle
sub
jae
dec
loop
scas
leave
jo
aad
inc
mov
pusha
loopne
mov
ins
lahf
cdq
mov
jl
lds
xchg
hlt
xor
cmp
les
int
jae
(bad)
hlt
or
xor
cmc
je
lea
ss
(bad)
and
in
adc
jno
out
mov
call
jg
call
cmp
cld
in
cmp
(bad)
bound
rcl
xor
jmp
aad
in
cmc
xor
push
jmp
int3
popf
scas
push
loop
xchg
jl
jmp
jge
fst
adc
icebp
add
leave
pop
sub
out
sub
addr16
mov
stos
adc
out
push
jnp
outs
aad
fs
push
cdq
add
pop
mov
dec
xchg
inc
pushf
cdq
cmp
fiadd
cbw
addr16
xlat
inc
sbb
test
push
xor
or
jge
push
aas
sub
xor
sub
call
cmp
mov
pop
xchg
jb
xor
hlt
add
jecxz
jae
xchg
dec
lods
sbb
mov
aam
adc
out
jecxz
xchg
or
jl
fs
adc
mov
cs
pushf
outs
mov
mov
mov
call
lods
aam
cmp
hlt
cmp
pop
push
ret
or
mov
ins
pop
mov
clc
nop
push
fcos
ins
rcl
sti
pushf
jl
cli
jl
ja
or
bound
or
inc
jmp
sbb
fadd
push
cmps
xor
sbb
xchg
mov
test
mov
leave
ins
sub
outs
lods
ret
push
lahf
push
or
pop
stc
pop
iret
cwde
push
mov
xchg
pop
pop
dec
mov
stos
mov
adc
jg
sub
push
fwait
xchg
popa
push
push
lea
or
(bad)
or
or
fcom
(bad)
xor
lods
pop
mov
mov
adc
pushf
xor
adc
jno
dec
sbb
jbe
mov
push
push
hlt
or
lods
or
cwde
shl
inc
(bad)
push
dec
xor
pop
(bad)
gs
mov
retw
cmp
pop
cmp
cwde
aas
push
imul
push
dec
aas
scas
sub
movs
dec
scas
jl
cmp
push
fldenv
xlat
cwde
lahf
adc
xor
sbb
mov
stos
xchg
mov
add
clc
jl
jmp
pop
cld
xchg
ins
call
ins
sbb
push
xchg
mov
dec
mov
xchg
pop
inc
cmp
and
push
ins
xor
outs
fmul
push
call
jb
repz
adc
or
xchg
imul
push
and
das
mov
es
or
xchg
xlat
mov
mov
xchg
push
sti
arpl
sbb
jae
xchg
push
jg
int3
mov
mov
les
inc
xchg
xor
repnz
inc
push
mov
(bad)
arpl
xchg
push
jmp
mov
xor
jns
push
loopne
mov
js
addr16
xor
ins
mov
xchg
and
jae
push
and
leave
jl
xchg
push
popf
or
xchg
int3
pop
fwait
das
mov
ret
mov
fdiv
and
mov
jg
std
and
in
lods
lahf
xchg
or
daa
out
xlat
outs
push
xchg
cmps
js
xor
in
adc
adc
or
or
and
xchg
inc
ficom
adc
das
push
dec
in
cmp
idiv
mov
mov
imul
cwde
xchg
inc
dec
into
push
pop
fisubr
aad
cdq
xchg
push
push
sti
xchg
scas
cmp
mov
xchg
and
inc
cmps
xchg
mov
cmp
inc
hlt
xchg
in
addr16
add
jb
into
fimul
push
adc
xchg
test
xchg
movs
rcl
loopne
and
arpl
imul
pop
out
hlt
sub
cmp
in
es
and
mov
dec
or
xchg
xchg
mov
cmp
mov
repnz
mov
inc
xchg
sbb
ficom
inc
mov
lea
and
and
pusha
xchg
clc
je
cmc
int
sahf
dec
xchg
retf
sub
and
out
fiadd
push
mov
cmp
lock
xchg
adc
ins
push
xlat
jmp
mov
iret
out
jge
fs
adc
or
mov
and
repz
xchg
and
mov
sbb
jmp
dec
cli
mov
mov
xchg
push
je
xchg
hlt
pusha
xchg
pop
das
int
(bad)
push
mov
test
mov
xchg
cld
or
aaa
pop
test
es
cwde
inc
push
jmp
mov
in
and
jp
outs
rcl
or
pop
dec
pop
popf
adc
mov
add
pop
in
push
push
int
test
mov
repz
adc
jl
mov
into
xchg
pushf
std
jp
test
stc
push
mov
push
mov
adc
add
int3
push
xchg
clc
sbb
dec
adc
push
mov
xchg
xchg
test
into
jp
xor
cmps
jg
cli
pop
into
ja
imul
nop
mov
pop
sub
sbb
mov
fisubr
scas
adc
jmp
sub
aam
push
dec
xchg
sub
and
xchg
adc
dec
sbb
mov
xchg
sbb
jp
push
pop
adc
push
jge
mov
adc
push
inc
sub
add
push
int3
shl
sahf
imul
loope
xchg
push
call
add
jmp
sbb
cmp
(bad)
fadd
int3
stc
or
lar
fwait
inc
adc
es
mov
push
test
push
jnp
and
lock
mov
je
xor
popa
cmps
xchg
cdq
xchg
mov
cmp
clc
cmc
add
or
mov
pop
loopne
inc
adc
mov
mov
aam
jg
sahf
aam
fnstsw
xchg
lahf
xchg
daa
js
rcl
pop
sbb
lock
and
jle
lahf
leave
dec
mov
(bad)
(bad)
call
ins
and
jg
mov
popa
fist
push
jnp
dec
in
fwait
mov
in
cs
mov
and
jle
pop
shr
xchg
or
pop
push
xor
(bad)
dec
sub
jae
xchg
jle
clc
mov
mov
mov
dec
in
sbb
cdq
mov
out
retf
adc
stc
in
xchg
rcr
jle
xchg
fdiv
xchg
repz
fs
movs
test
out
xchg
jecxz
call
mov
sub
xchg
mov
ja
in
test
(bad)
push
inc
repnz
dec
cmp
dec
adc
adc
add
or
inc
mov
enter
js
pop
cmp
les
stc
(bad)
stos
je
ficom
icebp
gs
iret
push
ins
cmp
jnp
into
(bad)
pop
fsub
daa
and
cli
mov
xor
mov
fs
sub
(bad)
fdiv
xlat
scas
push
lods
or
lds
mov
push
mov
stos
dec
lahf
xchg
imul
cmp
xchg
or
fs
xchg
push
pop
mov
push
enter
int3
call
xchg
add
jl
inc
ins
push
xchg
and
dec
mov
sbb
fwait
pop
fs
sub
cmp
mov
xchg
mov
and
add
fcomip
adc
add
fadd
sbb
inc
cmp
sub
dec
(bad)
xchg
xchg
inc
add
lahf
cwde
xchg
jmp
(bad)
icebp
or
xchg
inc
mov
ja
cmp
mov
ins
xchg
aam
jecxz
popf
adc
xchg
les
mov
pop
sbb
cdq
xor
cdq
xchg
and
push
or
fwait
movs
addr16
(bad)
xchg
int3
jge
fwait
xchg
ficomp
cli
jno
test
hlt
mov
fidivr
fwait
ret
scas
outs
mov
push
leave
xchg
popf
cmc
aad
or
add
shl
sbb
ret
mov
xchg
cwde
into
movs
stos
retf
push
pop
sub
dec
xchg
imul
pop
out
ss
out
push
xchg
xor
mov
jle
sar
jb
iret
xchg
inc
dec
repz
jb
mov
cmp
jle
pusha
xchg
bound
(bad)
rcl
pop
or
xchg
cdq
dec
sbb
push
mov
repnz
add
(bad)
fcomi
xor
xchg
sar
jae
fs
mov
push
ret
push
enter
sub
pop
adc
mov
sub
cdq
repz
test
dec
adc
icebp
pop
sub
js
in
int3
cmps
jp
dec
ds
test
fld
ins
jmp
clc
pop
or
xchg
test
mov
jmp
mov
mov
fwait
dec
rcl
mov
inc
push
or
mov
xlat
xchg
jno
inc
outs
xchg
mov
bound
js
loopne
xchg
enter
pop
jno
sbb
jne
push
arpl
hlt
adc
mov
mov
aam
fldcw
test
cmp
jne
xchg
lods
data16
call
gs
and
stc
scas
push
xchg
mov
je
inc
jecxz
inc
xchg
test
retf
outs
mov
cmp
mov
pop
inc
iret
inc
jae
add
xor
xchg
sbb
ret
add
pop
fsub
push
dec
or
cmps
jo
xchg
nop
sub
xor
call
rcr
mov
or
pop
test
(bad)
loop
inc
hlt
cld
and
sbb
mov
jmp
xchg
dec
imul
add
fwait
xor
mov
fisttp
out
aaa
push
xchg
push
rcr
cmc
retf
pop
xor
cmp
jl
ret
adc
ret
mov
cs
fs
sub
xor
xchg
push
push
ss
pop
fwait
in
inc
xor
cmc
aam
movs
cdq
add
pop
sub
cwde
mov
mov
leave
ds
dec
ins
inc
adc
mov
movs
(bad)
mov
cmp
mov
cmp
mov
je
pusha
pop
sbb
push
push
xor
ror
je
dec
push
(bad)
xchg
not
in
nop
push
bound
jecxz
adc
adc
mov
enter
xchg
(bad)
xchg
push
rcl
xchg
adc
add
fsubp
jnp
das
sub
mov
mov
push
mov
push
lods
retf
test
add
push
ret
xor
data16
es
dec
out
or
inc
xchg
(bad)
xor
sbb
sub
movs
xchg
das
fwait
rcl
cmps
push
xchg
cmp
pop
xchg
or
cmp
jl
int3
std
xchg
mov
xor
mov
ja
or
data16
loopne
(bad)
fmulp
xchg
ins
push
adc
adc
push
cmp
mov
add
xchg
add
push
mov
pop
xchg
aaa
mov
push
or
sti
mov
adc
mov
add
iret
rol
pusha
sar
xchg
mov
mov
shr
mov
sbb
dec
out
fst
xor
push
push
inc
sbb
test
ds
xchg
repnz
shl
push
adc
or
sbb
inc
inc
call
outs
or
repz
xor
cmp
fdivr
pop
pop
jg
jl
xchg
dec
or
mov
fwait
or
pop
mov
(bad)
mov
xlat
push
gs
ss
adc
inc
mov
sbb
dec
and
adc
mov
test
pop
pop
bound
ror
loopne
cwde
cmps
jge
repz
repnz
dec
xlat
and
jmp
push
add
cmps
mov
call
and
mov
out
xor
adc
push
movs
cmp
hlt
nop
pop
mov
xlat
call
dec
test
xlat
or
push
bound
shld
aaa
(bad)
hlt
xor
inc
dec
aam
inc
maskmovq
test
rol
ss
mov
fstp
mov
and
ror
lds
(bad)
jno
adc
mov
or
xchg
xchg
xchg
or
push
pop
mov
mov
gs
pop
xchg
pop
icebp
cmp
adc
nop
lods
jl
cli
add
mov
(bad)
out
loopne
sbb
test
mov
adc
cmp
pop
test
js
xchg
ss
loopne
or
xchg
add
jo
xchg
fnsave
xlat
pop
cdq
sbb
xchg
push
shl
in
push
js
adc
xchg
add
mov
pop
xchg
lods
sbb
add
lahf
adc
out
call
inc
xchg
xchg
lods
and
adc
sbb
xchg
or
aas
pop
imul
cmps
adc
push
pusha
push
xor
adc
xchg
add
popa
jbe
das
icebp
inc
shr
push
ins
idiv
xchg
inc
adc
push
mov
retf
xchg
pop
nop
bound
leave
inc
xor
xchg
and
xlat
or
xchg
jg
(bad)
jo
dec
xchg
mov
outs
(bad)
cmp
loope
sahf
xor
fwait
adc
fisub
push
pop
retf
add
sbb
or
adc
test
test
movs
xchg
sub
adc
jo
cld
xchg
jmp
cmp
repz
xchg
jns
shr
lds
ret
adc
sbb
push
ins
xchg
call
pop
xchg
(bad)
int
sahf
inc
(bad)
xchg
fidiv
aas
xchg
rcr
sub
adc
xchg
sbb
(bad)
out
xchg
sub
imul
movs
or
cmps
adc
push
fstp
dec
mov
adc
cmp
imul
mov
mov
popf
outs
pop
inc
or
pop
add
dec
add
sub
mov
xchg
pop
ss
jp
cmps
sub
xchg
xchg
not
mul
xchg
adc
lahf
ins
js
jns
push
and
dec
xchg
sub
adc
lods
or
lea
mov
jg
pop
push
(bad)
push
hlt
xor
dec
fs
add
cld
mov
es
xchg
fbstp
mov
data16
je
int3
in
sti
xchg
cli
add
or
and
adc
xchg
add
pop
jno
xchg
or
mov
dec
leave
inc
or
shr
add
pop
movs
fbstp
mov
hlt
jns
ss
mov
xchg
adc
(bad)
fsub
lds
xchg
cmc
mov
add
int
ja
pop
sub
test
dec
ror
xchg
nop
dec
mov
push
je
in
xor
sbb
lock
mov
pop
jge
outs
dec
hlt
xchg
inc
dec
jge
or
jg
cmp
shl
mov
(bad)
out
pop
cmps
out
scas
cmc
dec
fldenv
out
into
cmps
xor
cmp
loop
fld
mov
lahf
movs
mov
xchg
adc
loop
cmp
xchg
out
lea
xor
sbb
ss
fild
or
pop
shr
lahf
out
iret
mov
xchg
jb
sbb
ins
addr16
cmps
mov
pop
cmp
sub
stos
pop
mov
push
adc
(bad)
test
popf
mov
movs
pop
icebp
mov
xor
shl
adc
push
mov
xchg
enter
jge
sub
xor
lahf
or
inc
jmp
dec
xchg
hlt
jl
das
mov
mov
sbb
fs
nop
cmps
xchg
fldenv
sub
hlt
sub
fwait
mov
sbb
icebp
je
xor
and
in
mov
xchg
cmp
push
inc
sbb
cmps
xchg
popf
jne
cwde
int3
imul
hlt
mov
mov
xchg
cld
dec
mov
mov
push
inc
lea
sub
inc
imul
ficom
inc
xchg
and
cli
sub
mov
(bad)
pop
mov
push
cld
jne
push
and
push
mov
mov
mov
jno
jnp
add
test
mov
popf
cdq
pop
cdq
and
das
dec
mov
push
inc
adc
mov
xchg
jno
loope
or
mov
ret
xchg
or
or
xchg
cmp
push
call
dec
test
and
adc
fwait
movs
sub
enter
ja
loop
push
inc
rcr
inc
jecxz
mov
pop
dec
adc
mov
ds
adc
jmp
and
loopne
jmp
add
clc
in
cmp
rcl
test
and
in
data16
jp
xchg
shufps
or
adc
cmps
sub
fldcw
cmp
call
nop
cmps
(bad)
(bad)
mov
pushf
iret
les
xchg
popf
jge
jg
out
adc
fwait
and
fmul
jmp
mov
or
fs
shl
and
lods
mov
sbb
sbb
jmp
xchg
sti
sbb
jl
mov
les
pop
repz
nop
loop
je
dec
lds
cmp
iret
stos
ror
fist
pop
call
adc
jp
mov
jne
pop
jmp
push
mov
mov
pop
xor
push
jl
popf
cmp
cwde
mov
xchg
addr16
es
adc
ret
pusha
push
mov
repnz
(bad)
and
mov
std
jne
repz
add
enter
push
jge
sbb
cld
popf
and
add
ins
aam
out
cmps
(bad)
jl
push
cld
mov
gs
fstp
jo
stc
cmp
push
mov
sub
cld
sahf
ss
pop
and
jne
ror
test
sub
int3
mov
add
ja
aaa
loop
in
nop
jecxz
(bad)
pop
out
imul
sbb
(bad)
ret
call
push
(bad)
std
jge
int
sub
in
adc
les
sub
shr
pushf
ret
xor
xor
js
jmp
dec
mov
mov
hlt
mov
and
lahf
test
jle
in
xchg
sar
and
stc
pop
xor
cli
adc
jno
mov
cmps
xchg
sub
fs
pop
out
mov
xor
jl
mov
adc
clc
(bad)
lea
pop
adc
inc
test
cdq
pop
and
jmp
addr16
mov
push
shl
inc
sub
dec
and
push
int3
shl
or
jle
push
gs
loop
sub
repnz
dec
leave
pop
fs
outs
pop
cs
cmps
jge
sbb
test
cmp
adc
cmps
in
icebp
fucom
mul
(bad)
xchg
nop
in
mov
sbb
hlt
imul
dec
add
lods
push
not
call
ds
std
fnstsw
std
rcr
mov
mov
dec
and
cwde
push
ret
inc
pop
pop
mov
sub
hlt
sub
in
jp
or
pop
mov
shr
out
int3
loope
xchg
push
mov
sbb
loopne
mov
pop
repz
addr16
out
(bad)
sbb
dec
dec
loope
test
xchg
popa
adc
mov
xchg
and
ficom
fwait
psllq
inc
pop
in
dec
pushf
jmp
pop
cmc
cwde
repnz
mov
retf
stos
call
jmp
adc
sub
push
in
mov
inc
(bad)
ds
xchg
int3
mov
mov
cmp
xchg
cmp
(bad)
out
repz
xchg
clc
push
sbb
xchg
es
scas
jg
sub
push
aaa
mov
xchg
pop
add
cld
imul
xchg
jp
out
js
cmps
push
mov
xchg
(bad)
jae
cmp
and
sbb
aam
retf
stos
mov
push
adc
push
push
mov
mov
(bad)
mov
shr
dec
fwait
adc
xor
jo
out
sub
(bad)
cdq
adc
inc
ror
xchg
xchg
jle
mov
fstp
mov
in
sbb
(bad)
daa
cmp
enter
cmp
call
inc
mov
xor
retf
xchg
dec
sti
mov
cmps
or
test
xchg
pop
scas
xchg
jge
ss
xchg
test
dec
stos
xchg
mov
out
fstp
arpl
repz
iret
xchg
jno
lds
imul
jo
movs
cmc
pop
(bad)
in
mov
inc
jae
and
add
mov
adc
mov
xchg
stos
dec
and
cmps
popf
das
fs
adc
xchg
mov
stc
adc
cmp
mov
rcl
xchg
adc
and
xchg
cwde
pop
xchg
lods
add
retf
dec
push
xor
sbb
cmp
fisubr
fistp
push
xchg
jbe
arpl
mov
test
adc
lea
and
test
mov
into
addr16
push
xchg
mov
add
mov
inc
lds
jno
(bad)
jg
xchg
sub
ret
mov
cdq
outs
adc
sbb
pop
xchg
mov
std
inc
mov
pop
(bad)
xchg
pop
and
in
mov
xchg
fcomi
or
sub
inc
push
fdivrp
and
mov
sub
in
int
cmp
or
push
jge
xchg
mov
xchg
adc
loopne
loop
int
(bad)
jmp
imul
shr
push
or
push
add
(bad)
xrelease
fcom
repnz
pop
mov
jmp
and
and
int
jmp
call
push
ror
mov
mov
adc
push
fcomip
sbb
loop
mov
add
test
xor
sub
shl
fdiv
jae
xchg
outs
scas
and
or
retf
mov
xchg
cs
dec
pop
inc
xchg
cmp
or
jne
add
xchg
jmp
dec
rcr
add
mov
popa
cmc
js
pushf
xchg
ja
jbe
or
icebp
xchg
pop
mov
cmp
pop
mov
icebp
call
(bad)
dec
mov
inc
xchg
test
xchg
out
rcl
cmp
add
cmp
cdq
push
xchg
aas
sub
cli
xor
sbb
jno
or
mov
pop
in
sub
mov
mov
xor
mov
test
ds
scas
sbb
xchg
(bad)
in
call
movs
scas
outs
fs
mov
pop
mov
dec
popa
sbb
pop
or
pop
xchg
cmp
inc
cmp
xchg
bound
and
cmps
jno
mov
xchg
fs
fwait
jmp
inc
je
daa
scas
mov
xchg
fild
sbb
gs
mov
and
loopne
not
sub
push
xchg
lods
push
cmp
shl
sahf
mov
(bad)
cld
rsm
adc
pop
shl
inc
sbb
stc
sahf
leave
pop
out
(bad)
cmc
pop
sbb
jl
jmp
ror
mov
sub
gs
cmc
lock
inc
int
dec
xchg
cmp
ins
lods
sbb
fist
push
loopne
fs
test
push
cwde
fidivr
mov
xchg
imul
sbb
gs
imul
dec
inc
adc
ror
dec
xchg
push
cmp
(bad)
pop
xchg
lods
push
(bad)
js
xor
sbb
mov
movs
xchg
stc
fmul
mov
shl
xchg
das
push
fnstenv
push
add
xchg
xlat
mov
pop
jge
pop
ja
je
es
int
aad
xchg
jne
inc
nop
fwait
arpl
out
xchg
push
inc
xchg
lahf
fbstp
mov
and
dec
aam
xchg
cmp
ins
xchg
xchg
sar
les
push
cmp
cli
repz
sbb
add
jg
or
dec
xchg
sub
sub
lods
rcl
fs
pop
push
fbld
mov
adc
hlt
push
jae
mov
pushf
mov
pop
or
and
int
mov
adc
(bad)
lea
pop
cmc
cmp
jl
inc
xchg
stc
scas
adc
mov
iret
xchg
xchg
jnp
jae
jns
mov
lods
add
(bad)
sbb
mov
xor
dec
cmp
inc
cdq
xor
push
push
movlps
push
fwait
(bad)
pop
cmps
or
and
inc
(bad)
push
mov
push
andnps
outs
adc
pop
adc
adc
popa
cmps
jmp
hlt
mov
dec
jae
xchg
int
sub
fmul
popf
jo
test
repnz
aam
jge
sbb
or
fpatan
iret
cmp
(bad)
sbb
mov
pop
(bad)
int3
add
cli
sbb
inc
push
push
mov
push
retf
ja
sbb
stos
jg
shl
fld
shl
xchg
arpl
pop
mov
int
xchg
out
xchg
ds
jp
hlt
push
push
push
lods
jns
xchg
dec
sub
mov
aad
ss
or
xchg
mov
mov
shl
imul
xor
push
scas
cld
loope
leave
xchg
xchg
(bad)
jge
adc
jge
lahf
jl
sbb
sub
fwait
retf
inc
lds
les
in
xchg
mov
mov
adc
inc
push
js
stos
sbb
xchg
mov
rcl
daa
jne
push
adc
lock
out
xchg
rcr
sbb
imul
into
cmps
xchg
and
jne
and
cmp
sar
push
mov
in
repnz
mov
mov
sub
(bad)
jo
mov
aas
xchg
arpl
popa
repnz
ins
aam
dec
mov
mov
xchg
push
ret
das
int3
ret
adc
cmp
dec
xchg
popf
les
pop
sub
test
ja
daa
xchg
dec
fmul
adc
xor
mov
fsubr
das
fwait
xlat
enter
ins
into
neg
inc
aam
push
push
stos
iret
xchg
dec
cmp
mov
jmp
adc
mov
or
sub
mov
pop
mov
aam
xchg
enter
jne
mov
xchg
sub
adc
mov
jecxz
ficom
push
aas
or
push
pop
(bad)
jmp
mov
int
pop
xchg
or
pusha
test
mov
push
(bad)
sub
(bad)
mov
jmp
(bad)
aaa
shl
es
mov
cdq
(bad)
lock
xchg
movs
dec
rol
sbb
je
xchg
mov
adc
mov
push
into
rcl
adc
jl
aam
push
aas
adc
sar
je
out
rol
push
outs
mov
dec
into
adc
and
adc
pusha
ja
sub
xchg
out
call
lds
(bad)
jno
inc
xor
out
lock
test
stos
push
addr16
mov
xchg
jp
xor
pop
xchg
cmp
test
and
adc
sbb
adc
pop
sub
dec
retf
(bad)
jae
or
(bad)
pushf
push
xcrypt-ofb
cmps
test
lock
mov
dec
int3
inc
push
sar
pop
push
movs
ret
mov
shr
push
in
mov
xchg
fdiv
or
xchg
xchg
fcmovnu
add
xchg
test
xchg
js
xchg
sub
aaa
mov
mov
pop
test
icebp
mov
xchg
fnstcw
inc
mov
scas
mov
je
adc
scas
add
fidiv
lods
sbb
ss
cmps
push
js
(bad)
inc
fcomp
cmp
dec
mov
pop
mov
dec
lds
cmps
jg
inc
(bad)
jbe
push
mov
mov
cmp
push
cmp
cmc
fist
sub
and
cmps
lahf
adc
ds
mov
jo
hlt
jg
sub
out
fwait
pushf
retf
cld
xchg
pop
ret
inc
daa
mov
(bad)
rcl
lods
stc
fist
mov
iret
xor
fwait
mov
cwde
lods
aam
inc
cmp
xchg
inc
out
mov
test
inc
xchg
sbb
adc
(bad)
pop
into
xor
xchg
mov
arpl
or
mov
repnz
enter
add
xor
daa
xor
mov
and
mov
adc
(bad)
push
pop
sbb
aaa
loop
jmp
sahf
dec
xchg
and
pop
fwait
sti
push
ins
leave
movs
xchg
mov
jbe
xchg
cmc
dec
fsub
add
add
les
jbe
neg
in
cmps
dec
je
jl
push
mov
mov
adc
sub
rcr
imul
in
xor
inc
lock
icebp
ret
pop
and
xchg
cwde
sbb
rcl
and
xlat
fwait
cs
xchg
cmp
mov
scas
cmp
sbb
aam
xchg
sub
ret
pop
lea
add
mov
repnz
inc
or
add
pop
push
rcl
xchg
fwait
or
and
xchg
loop
aas
mov
push
loopne
(bad)
mov
rcl
mov
xchg
jp
imul
ror
js
and
movs
repnz
lahf
mov
xchg
out
cmc
mov
mov
or
push
mov
dec
xor
out
cmp
push
nop
jno
inc
xchg
cmps
lea
and
sbb
mov
cmps
push
test
xchg
scas
in
jecxz
jp
bound
call
xchg
adc
pop
js
lods
xchg
loope
mov
mov
xor
sub
jge
inc
into
nop
es
sub
inc
lahf
sbb
xor
add
sbb
add
and
push
cmc
stc
ins
test
xchg
pop
data16
repnz
pop
arpl
inc
sti
jb
inc
into
mov
cdq
pop
sbb
add
adc
mov
stos
mov
push
cmps
mov
out
cmp
inc
test
inc
mov
lahf
cmp
pop
mov
int3
aas
adc
js
bswap
sbb
out
rcr
dec
popa
je
xchg
sub
loopne
neg
cwde
and
je
scas
xchg
jmp
addr16
dec
loop
adc
ins
sub
sbb
xchg
fisub
adc
sbb
xchg
loope
out
push
lea
(bad)
adc
jecxz
mov
out
xchg
push
fidivr
or
mov
je
retf
mov
ja
lahf
mov
push
add
aaa
into
inc
mov
adc
dec
push
sbb
xchg
ret
pop
xchg
sbb
mov
rcl
add
pushf
jg
dec
or
dec
push
data16
jecxz
cmp
imul
rcl
cmps
xchg
sub
and
(bad)
out
or
fs
cwde
push
xchg
sbb
mov
fild
cmp
pop
sahf
pop
mov
popf
mov
xor
jns
loopne
dec
dec
fs
bound
cmps
pop
fld
mov
inc
jp
mov
xchg
das
lods
add
mov
fdivp
neg
lahf
or
sbb
inc
ret
push
gs
rcr
mov
cld
shr
mov
fdiv
sbb
jl
aas
xchg
cmps
jg
std
shr
xchg
imul
xlat
mov
adc
popf
daa
inc
adc
pop
inc
mov
sbb
xchg
(bad)
mov
sbb
mov
addr16
dec
jbe
or
xchg
test
cmps
out
lods
dec
je
stc
adc
iret
fwait
js
repz
aaa
and
pop
adc
cdq
adc
push
int
enter
outs
fs
xor
in
test
fcmovnu
adc
mov
xchg
(bad)
out
xchg
ret
loop
pop
sbb
xchg
jmp
fwait
mov
test
dec
dec
xchg
dec
in
xor
jl
out
and
jp
fwait
mov
xor
(bad)
xchg
(bad)
retf
or
loopne
pop
xchg
psadbw
iret
cmc
sub
push
jns
movs
xchg
xchg
in
add
mov
ss
shr
or
lods
(bad)
movs
gs
ds
xor
das
pop
jno
xchg
mov
stc
jns
cli
mov
xchg
push
cmp
mov
stos
bound
not
xor
xchg
inc
loop
sbb
int
ret
xchg
mov
or
xor
arpl
das
mov
cmc
es
xchg
fild
leave
dec
pop
loop
mov
mov
out
iret
pop
das
xchg
call
enter
xor
xchg
outs
sbb
retf
push
lock
aas
mov
enter
daa
xchg
and
lds
xchg
ins
mov
push
mov
or
xchg
adc
add
cwde
mov
adc
addr16
mov
aam
pop
dec
dec
fcmove
out
adc
inc
pop
loopne
mov
mov
xchg
xchg
sub
(bad)
jbe
jne
xchg
mov
add
stos
dec
imul
mov
fwait
repz
mov
xor
xchg
call
xchg
aas
ret
aad
daa
sub
aam
cwde
and
jl
pop
push
xchg
sub
jmp
in
iret
sbb
jge
fwait
lahf
jl
(bad)
xor
lahf
jge
gs
adc
add
rol
imul
xchg
xor
jmp
stos
inc
xor
popf
imul
xchg
inc
(bad)
mov
cwde
lods
cmp
cwde
cmp
(bad)
in
mov
imul
cwde
add
(bad)
jmp
rcr
mov
imul
imul
jno
jle
(bad)
fisttp
jl
mov
loop
inc
(bad)
xchg
mov
cmp
cmovnp
xchg
movs
adc
sbb
xchg
sub
push
mov
movs
cmp
lock
pop
cmp
lds
cmp
cmp
popf
mov
(bad)
mov
inc
das
(bad)
xchg
mov
cmp
xchg
call
js
xchg
pminub
stos
test
xchg
cmp
pop
jns
mov
xchg
enter
jl
repz
imul
leave
mov
and
repz
jmp
jg
setge
call
adc
imul
inc
add
stos
aad
repz
pushf
imul
fwait
(bad)
xor
adc
(bad)
xlat
scas
and
in
(bad)
fwait
mov
sbb
(bad)
mov
xchg
jl
jecxz
and
inc
shl
nop
imul
fnstsw
mov
scas
cli
cwde
jmp
xchg
push
dec
sbb
in
imul
push
jnp
adc
inc
call
and
mov
jg
xchg
jne
cmp
cmp
movs
movs
loope
mov
das
mov
push
mov
mov
mov
pop
add
xchg
sti
jmp
mov
sbb
(bad)
(bad)
aad
lahf
add
test
outs
jae
hlt
imul
movs
mov
cld
popf
jge
sti
mov
test
sub
xchg
adc
aad
pop
movs
jecxz
call
icebp
mov
stos
push
imul
(bad)
fstp
mov
ss
fst
fcmovb
mov
test
in
push
in
cwde
adc
mov
adc
jne
cdq
enter
jmp
leave
dec
das
mov
(bad)
sbb
pop
push
je
sbb
(bad)
stos
ss
popf
imul
xchg
cmp
jecxz
cwde
ins
xor
cmp
xchg
stc
jp
xor
repnz
dec
imul
imul
fs
cmp
(bad)
jp
shr
dec
sbb
mov
stos
movs
aas
xchg
imul
icebp
test
mov
enter
(bad)
cwde
xor
push
es
inc
or
test
push
inc
imul
or
ss
xor
dec
xchg
mov
pusha
sar
sbb
mov
aam
or
addr16
mov
lods
inc
xchg
imul
or
xchg
adc
pop
sbb
fdivr
pop
fnsave
adc
adc
jno
hlt
idiv
call
jnp
std
jbe
sub
mov
fs
stos
adc
xchg
sub
jle
dec
and
or
or
dec
lea
push
jge
in
jp
sbb
xchg
mov
sbb
or
hlt
push
ins
cmp
xchg
fwait
repz
sar
jnp
push
cmp
lods
xor
mov
stos
movs
je
jbe
dec
in
lods
push
call
mov
cmp
mov
repz
shl
stos
mov
adc
stos
jae
cli
shl
jb
mov
mov
rcl
mov
sub
sbb
adc
xchg
sub
mov
cdq
sbb
cmp
aas
push
ds
popa
jmp
push
and
pop
in
jl
add
jo
adc
rcr
gs
es
inc
stos
push
test
popf
movs
cwde
lea
mov
pushf
cld
push
xchg
addr16
add
jl
adc
adc
cmps
call
mov
imul
xor
pushf
mov
xchg
es
scas
sbb
(bad)
popf
imul
daa
and
jb
sbb
sub
dec
sub
push
fcom
mov
aam
xchg
popf
stos
test
stos
add
fs
les
pop
lahf
dec
ficom
lods
lahf
jbe
out
ret
jae
enter
adc
cli
sti
ins
hlt
and
lock
test
in
iret
rol
out
xchg
aad
pop
neg
hlt
jmp
and
pop
ss
jecxz
inc
inc
jmp
cwde
aam
push
leave
(bad)
jae
xchg
jne
push
add
or
in
fstp
cdq
sub
jge
aas
push
push
add
xor
mov
iret
sbb
test
repnz
std
mov
test
or
sbb
jne
xchg
add
push
cmp
aam
lods
out
sahf
mov
xchg
inc
mov
test
inc
outs
mov
nop
inc
xchg
icebp
mov
xor
xchg
xchg
popf
inc
(bad)
ins
cmp
xchg
aam
nop
outs
retf
test
out
sbb
test
push
(bad)
xchg
in
add
les
push
add
push
int3
or
scas
neg
sbb
push
pop
rol
mov
xchg
pushf
cmc
mov
and
xor
out
push
adc
cwde
sub
(bad)
rcl
mov
xchg
fnstenv
test
and
test
mov
js
pop
and
adc
xchg
mov
or
enter
push
aam
jmp
lods
xchg
fucomip
in
xor
mov
add
call
fwait
jecxz
repnz
xor
xchg
loopne
pop
xchg
int
cdq
mov
(bad)
mov
pop
das
or
or
mov
das
stos
ret
xchg
lea
add
cmps
xchg
cwde
in
sbb
movs
outs
push
inc
cs
dec
fnsave
aam
jb
mov
paddsw
test
fiadd
xchg
sbb
mov
out
stos
test
rcl
inc
hlt
shl
mov
mov
or
sub
inc
xchg
cmpxchg8b
bound
enter
rol
push
xchg
in
adc
jl
rol
daa
xchg
enter
ficom
fst
xchg
repnz
cmps
or
cld
xchg
adc
sub
int
mov
(bad)
mov
cmc
mov
xchg
dec
daa
and
dec
xor
cmps
adc
mov
std
mov
cmps
mov
daa
adc
xchg
mov
lds
fwait
test
pop
inc
inc
shr
adc
xor
jl
dec
xchg
push
ss
cmp
test
cs
inc
mov
test
pushf
mov
popf
mov
xor
ficomp
mov
push
mov
cli
rol
inc
imul
xchg
(bad)
or
inc
js
hlt
xchg
ds
pmaddwd
and
mov
je
pop
xchg
pop
xchg
jg
rcr
cdq
pop
cs
mov
fwait
clc
out
mov
adc
pushf
ds
push
icebp
gs
retf
mov
(bad)
xchg
js
xchg
shr
mov
or
push
pop
mov
test
xlat
fst
out
and
test
(bad)
loopne
lods
pmaxub
aaa
(bad)
xchg
sbb
inc
lea
sar
movs
jl
repz
ss
cmp
loopne
adc
(bad)
lods
dec
and
or
sub
fnstsw
sbb
mov
leave
bound
adc
add
sub
add
jecxz
nop
adc
fwait
dec
mov
test
xchg
clc
lock
leave
dec
nop
enter
and
pop
or
adc
cmp
stos
cmps
pop
retf
ins
out
repnz
mov
xchg
mov
jnp
cwde
dec
mov
dec
dec
or
sti
xchg
or
ficomp
xchg
sbb
mov
aam
cwde
inc
cs
xchg
mov
outs
movs
pop
jle
popa
xchg
loopne
sbb
ja
test
mov
mov
inc
je
in
fistp
xchg
and
push
xchg
push
xlat
ds
add
into
add
mov
xor
les
or
xchg
jb
xchg
sti
lds
pop
adc
ins
adc
push
xchg
jnp
add
call
dec
xor
cmp
jns
or
mov
pop
test
int3
jbe
cs
inc
shl
and
ror
stos
adc
call
lds
jle
xchg
and
xchg
mov
push
add
inc
(bad)
aad
hlt
stos
lahf
jmp
pop
sub
std
and
test
nop
ins
mov
aam
ins
push
call
pushf
(bad)
cli
movs
stc
xchg
cmp
xchg
push
mov
xchg
lock
jecxz
cmc
rcl
xchg
or
or
dec
dec
and
shl
or
test
xchg
call
cmp
xchg
sbb
(bad)
jmp
adc
dec
lods
pop
adc
gs
fst
shr
(bad)
xchg
(bad)
in
jecxz
clc
dec
loopne
push
into
mov
test
jne
int3
mov
xor
adc
add
rol
pop
add
aas
or
lock
mov
aaa
bnd
je
adc
in
dec
mov
shl
push
or
ins
xchg
jge
xchg
aas
mov
inc
xchg
int3
inc
sahf
pop
leave
shl
imul
jns
sbb
xchg
and
lds
xchg
lods
xor
test
dec
xchg
hlt
test
mov
inc
rol
aam
fst
lea
xchg
jge
loope
ret
push
jb
xchg
xchg
mov
xchg
cld
xchg
sub
fimul
sahf
jl
cdq
or
mov
cmps
xchg
fidiv
pop
xchg
inc
dec
xchg
dec
or
mov
push
pop
mov
cmp
mov
mov
or
push
fmul
jb
xor
push
test
sbb
enter
jecxz
scas
push
push
pop
cdq
xor
push
jnp
dec
pop
xchg
inc
jnp
in
scas
movs
call
shl
push
(bad)
popf
mov
lea
or
inc
data16
repnz
xor
mov
push
push
cld
addr16
repz
xchg
mov
cld
mov
cmp
sbb
aaa
push
cld
adc
push
xchg
mov
ret
mov
in
popa
outs
inc
icebp
inc
pop
push
cmp
nop
mov
ja
mov
and
loop
fs
jl
push
pushf
lahf
jge
imul
ret
xchg
and
das
xchg
inc
stos
lods
mov
ficom
ret
ret
pop
xor
and
add
icebp
inc
test
mov
sahf
mov
mov
mov
ds
sub
test
sar
loop
pop
mov
sub
loop
xchg
pop
data16
std
ror
xor
jge
mov
xchg
sbb
cmps
jp
jmp
in
push
cli
fidiv
and
and
push
enter
xchg
hlt
sar
sub
in
xor
push
loope
test
les
hlt
aad
sar
xor
inc
popa
pusha
push
popf
xchg
pop
int3
popf
call
and
call
xchg
pop
mov
pop
stos
js
pop
sbb
mov
mov
xchg
xlat
nop
fwait
mov
pop
clc
push
inc
sub
or
pop
dec
inc
repnz
push
leave
sar
sahf
push
or
enter
jge
sbb
rcl
cld
lods
fcomp
jecxz
or
out
push
neg
ret
inc
fst
lock
loope
adc
inc
loop
into
xor
repnz
ins
mov
push
fisubr
ss
pop
jb
mov
pop
dec
inc
and
cmc
cli
xchg
xchg
mov
sbb
test
mov
adc
out
inc
test
lahf
fbstp
push
cwde
xchg
xchg
pop
int
int3
jl
les
fbstp
ret
xchg
outs
push
xor
xchg
das
push
sbb
mov
push
not
jg
xor
push
dec
popf
cli
mov
sub
jmp
stos
push
inc
ds
or
xchg
push
inc
fwait
in
adc
cdq
es
cmp
cmp
xor
pop
clc
mov
aam
adc
shr
adc
shl
lods
mov
mov
xor
xor
fs
jecxz
das
inc
out
push
xor
or
cmp
xor
pop
push
ror
jns
adc
leave
xchg
ret
addr16
jl
repnz
arpl
cmps
int3
dec
adc
push
jno
popa
dec
cmc
xchg
mov
out
push
aad
ja
mov
fwait
jno
gs
and
hlt
pop
and
jl
dec
xchg
adc
aam
gs
ficom
xchg
pop
daa
outs
mov
mov
hlt
popf
stos
adc
clc
leave
xor
arpl
outs
xchg
pop
jp
shr
jae
mov
fadd
push
fwait
retf
jl
cdq
pop
sti
sbb
retf
mov
mov
pusha
inc
xor
(bad)
adc
mov
mov
mov
sar
jg
mov
test
out
pop
popf
mov
call
dec
adc
pop
jecxz
imul
(bad)
out
mov
mov
dec
in
xchg
pushf
in
fist
cmp
push
lahf
int
mov
xchg
mov
jle
xor
std
dec
mov
adc
mov
pop
inc
stos
push
sbb
std
jg
fcmovnbe
lock
dec
push
mov
test
xor
sub
fisttp
adc
nop
ja
leave
mov
fwait
mov
jmp
in
out
jge
adc
add
fcom
xchg
adc
mov
mov
push
lds
mov
rcl
jge
fbld
cmc
pop
jl
pop
and
mov
call
arpl
push
xchg
cwde
fwait
cmp
cmps
in
cdq
test
cmps
rcl
jb
jnp
push
pop
cmp
(bad)
dec
cmp
xchg
scas
fwait
enter
xlat
stos
retf
repnz
push
nop
inc
ja
pop
call
mov
loope
push
xchg
fwait
push
cmp
rcr
mov
mov
jb
je
xchg
cmps
mov
jmp
cmp
jbe
jmp
mov
sub
inc
or
(bad)
xchg
movs
push
xchg
dec
repnz
xchg
or
xor
or
pop
stc
or
push
xchg
fild
ins
xchg
mov
pushf
nop
push
jle
adc
ret
xor
je
add
jne
lods
jo
(bad)
int3
sbb
push
jp
arpl
cs
aam
push
movs
cmps
mov
imul
xchg
sbb
xor
xchg
retf
pop
cdq
adc
mov
ds
push
push
fmul
jp
ficom
xchg
push
(bad)
js
push
ins
xchg
pop
imul
xchg
pushf
push
sub
fcom
xchg
push
imul
lahf
sub
mov
mov
cmc
pop
repz
sub
mov
xchg
imul
adc
int
sub
mov
jecxz
dec
xchg
pop
enter
clc
lea
call
into
les
nop
cmp
enter
ins
pop
xor
xchg
test
das
mov
iret
add
cld
or
int
popf
repnz
xchg
cmp
sub
mov
faddp
mov
fdiv
in
les
and
xchg
sub
stc
outs
lahf
addr16
xchg
jno
xchg
jecxz
add
sti
push
xchg
enter
(bad)
popf
xor
jl
or
test
jle
mov
push
push
out
xor
cwde
fdivp
mov
adc
push
ud1
push
jge
or
sub
mov
dec
sbb
inc
aad
in
test
adc
push
stc
xchg
es
pop
jmp
data16
pop
(bad)
mov
int
mov
sbb
adc
cmp
jae
adc
cld
xchg
pop
pushf
jmp
into
pop
imul
sbb
fsub
aad
mov
or
stos
cmp
sbb
movs
jl
add
rcr
popf
les
pop
mov
pop
push
shr
(bad)
mov
mov
xchg
rcr
mov
sub
loop
xor
call
pop
in
into
xchg
push
(bad)
pop
or
sti
icebp
mov
dec
cmps
jb
pop
popf
xchg
dec
xchg
pop
out
and
stos
call
pop
and
retf
mov
aas
ja
fnstsw
and
jmp
repnz
mov
lods
xchg
cmp
dec
add
call
sbb
push
jmp
out
sub
aam
daa
xchg
mov
push
mov
or
in
adc
adc
je
sub
iret
ss
jne
xchg
movups
xchg
adc
cdq
pop
mov
rcl
push
add
orps
pop
out
pop
push
push
jp
ret
jns
stos
lods
cmp
(bad)
les
mov
jb
sar
inc
(bad)
push
outs
mov
repz
je
(bad)
out
je
daa
xchg
test
ins
pushf
call
call
idiv
retf
je
jae
arpl
cli
icebp
mov
jecxz
and
xchg
and
mov
mov
jo
adc
sbb
cwde
inc
inc
mov
pop
cmc
and
mov
add
push
adc
lahf
adc
popf
es
xchg
add
movs
movs
mov
xor
jmp
(bad)
push
fbstp
xchg
ret
dec
neg
adc
into
int3
test
(bad)
xchg
in
adc
jge
and
or
xchg
cmp
xor
add
mov
cmps
fldcw
(bad)
in
and
cld
std
inc
mov
inc
imul
push
add
mov
adc
les
cwde
das
movs
bound
pop
lock
lea
pop
jno
or
jl
(bad)
mov
push
addr16
popf
mov
fcom
sub
ins
cmp
cwde
jb
scas
mov
aam
sub
cmp
out
sbb
shl
ror
pop
or
fist
dec
cli
mov
repz
or
xchg
retf
aas
sub
shr
sti
jecxz
jae
fld
rcl
mov
std
xchg
xlat
mov
xchg
(bad)
mov
repz
push
rcl
dec
adc
mov
jmp
sub
pop
mov
aas
sbb
pop
je
or
call
mov
xchg
push
into
idiv
aam
mov
push
aam
test
leave
cmp
xchg
mov
jns
aad
push
xchg
pop
xchg
xorps
dec
sbb
cmp
cs
xchg
xchg
mov
add
cmp
fs
nop
jg
adc
pop
jmp
xchg
dec
aad
dec
mov
xchg
nop
scas
xchg
ins
js
aaa
jmp
je
xchg
(bad)
dec
jns
push
(bad)
xlat
arpl
xchg
xchg
je
repz
cmp
lods
adc
inc
adc
mov
mov
cmp
sahf
movs
inc
stos
jg
xchg
test
fcomp
xchg
mov
mov
jge
mov
mov
xchg
loop
sbb
out
jmp
loop
aam
jmp
dec
or
sbb
xchg
xchg
fst
mov
cmp
arpl
rcl
sbb
dec
sbb
mov
xchg
data16
push
push
jmp
dec
loop
xor
gs
shr
xchg
xchg
lds
jle
not
les
imul
inc
(bad)
xchg
out
dec
cmp
jnp
(bad)
xchg
lock
or
jl
pop
xchg
ficomp
xchg
dec
out
mov
mov
imul
xor
(bad)
xchg
push
and
mov
scas
popf
std
pop
fadd
dec
pop
daa
sbb
(bad)
adc
xchg
dec
dec
add
cmp
nop
cs
cwde
stos
inc
inc
or
jae
pop
xchg
jp
popa
mov
nop
cmps
scas
cdq
adc
shr
adc
in
jbe
sub
cdq
repnz
adc
mov
push
xchg
in
jns
push
imul
sub
hlt
sbb
cwde
adc
in
xor
mov
ror
pusha
pop
xchg
ja
lahf
push
test
or
dec
dec
imul
arpl
div
sahf
ror
ins
sbb
out
sub
inc
lea
pop
int3
jl
jmp
repnz
mov
scas
sub
push
inc
sbb
cmp
sbb
xor
stos
push
pop
mov
dec
scas
les
push
test
in
loope
pop
hlt
and
pop
stos
cs
sub
(bad)
mov
jge
dec
push
cmc
test
sar
jg
pushf
cmps
push
sub
cld
xchg
mov
mov
inc
lahf
mov
(bad)
movs
repz
pop
hlt
jl
int
in
mov
cmp
mov
imul
lods
sub
sbb
shl
call
jl
jge
inc
aam
add
enter
test
ja
sbb
and
(bad)
push
add
cmp
movs
push
mov
(bad)
jno
mov
jnp
loope
jecxz
ror
add
xor
cdq
out
xchg
nop
stc
test
xchg
cli
mov
fadd
xchg
repz
sbb
sbb
cmp
jbe
mov
xchg
in
ret
inc
dec
xchg
std
lods
mov
jmp
cmps
fidiv
cmp
pop
jmp
fs
jg
stc
pop
adc
sti
jb
(bad)
mov
mov
not
inc
je
xchg
mov
jmp
push
pop
mov
inc
aam
xchg
mov
into
push
or
xchg
fnstenv
jp
adc
lock
jnp
outs
in
pop
js
or
iret
dec
push
inc
push
inc
inc
sbb
push
in
inc
mov
jg
adc
mov
movs
in
test
cmc
cwde
sub
push
mov
xor
and
mov
loop
mov
mov
in
push
mov
sbb
xchg
push
imul
mov
imul
mov
xor
xchg
push
adc
cmps
mov
jl
(bad)
ficomp
aaa
std
xchg
jnp
repz
inc
cs
popa
fwait
ins
cmc
js
push
std
pop
sub
xchg
xor
xor
cwde
add
sahf
int
push
daa
jne
ja
ins
xchg
scas
jp
call
aad
cmp
inc
mov
or
in
mov
jge
jge
xor
call
outs
stc
jbe
add
pop
xor
xchg
shl
xchg
push
pushf
(bad)
jns
sub
push
sub
pop
jp
nop
loop
xchg
xchg
jbe
push
mov
pop
add
mov
or
lock
xor
sub
xor
movs
lods
ins
and
js
or
xchg
add
inc
shl
int
xchg
stc
cmp
add
mov
je
or
pop
adc
or
xor
jne
adc
xchg
jle
add
xchg
mov
clc
test
jge
add
pop
or
clc
fwait
push
cmp
adc
cwde
loopne
aad
test
call
pop
mov
test
sahf
jle
pushf
jmp
cdq
fwait
imul
xchg
sbb
stos
or
mov
xchg
aam
mov
xchg
test
xchg
and
push
loopne
adc
fst
xchg
lods
mov
xchg
pop
jo
leave
int
stos
xchg
mov
mov
fdivr
fidiv
jns
gs
push
test
(bad)
pop
xchg
mov
cld
push
mov
setnp
xchg
dec
cmp
test
pop
loopne
push
mov
sub
xchg
fwait
in
data16
jnp
mov
test
dec
ins
mov
sbb
dec
jmp
mov
inc
cmp
test
loop
xchg
mov
pcmpeqw
xchg
dec
(bad)
retf
dec
hlt
dec
jl
push
sub
jae
lahf
int
(bad)
adc
popa
fmul
cmp
jle
repnz
lahf
mov
push
cmp
xchg
jbe
outs
and
xchg
sahf
adc
cld
(bad)
les
fcom
dec
cmc
je
mov
pop
push
inc
(bad)
rcl
in
adc
pusha
sbb
push
inc
xchg
in
fnsave
pop
not
pop
pop
stos
xchg
loop
jg
push
fld
jle
cli
js
xor
mov
jmp
xchg
fld
mov
push
fs
test
jae
cdq
mov
test
pusha
out
jns
add
xchg
test
(bad)
xchg
and
imul
xchg
fild
adc
mov
scas
cmp
pop
in
in
or
sbb
fldcw
push
or
pusha
adc
and
aas
sub
mov
push
pop
dec
call
and
sbb
mov
outs
xchg
fadd
int3
dec
lfs
jl
xor
test
lds
lock
(bad)
stos
jg
ficom
dec
cs
mov
aad
hlt
(bad)
inc
rcl
xchg
cwde
imul
and
cmp
test
mov
xchg
jecxz
int
mov
push
xchg
xchg
aas
into
add
cmp
push
das
pop
inc
xor
nop
inc
xchg
xor
cmp
jbe
(bad)
ret
dec
lods
out
(bad)
xchg
je
gs
pop
xchg
pop
je
mov
push
xchg
adc
sti
jle
in
test
xchg
xchg
push
inc
mov
inc
xor
ret
popf
(bad)
dec
dec
push
fwait
push
sub
mov
ret
fimul
sbb
rcr
cdq
inc
fstp
repz
pop
lods
pop
xor
mov
xchg
cld
loopne
dec
aad
mov
sub
sbb
inc
pop
int
mov
mov
je
call
in
jl
inc
jmp
pop
ror
int3
sbb
pushf
xchg
dec
pop
loop
cmp
jl
cdq
dec
push
movs
outs
iret
addr16
das
push
and
xor
sbb
push
scas
out
jl
icebp
sbb
jge
and
and
xchg
mov
sub
in
dec
(bad)
cmp
cmps
mov
xchg
push
mov
jmp
xor
rcl
xchg
or
stc
xchg
xchg
sbb
push
or
push
xor
xchg
xchg
adc
mov
xchg
adc
jbe
mov
xchg
ins
fild
xchg
jmp
xchg
adc
imul
mov
sbb
push
jbe
mov
aam
clc
dec
or
adc
adc
fwait
jo
add
ret
fwait
ins
out
xor
test
add
mov
or
xchg
dec
pop
pop
int
fwait
call
imul
xchg
sbb
lods
rcl
adc
jns
adc
sbb
or
(bad)
aad
in
pop
xchg
cmps
outs
jl
test
daa
sub
mov
push
adc
aaa
(bad)
xchg
call
inc
mov
add
sbb
test
push
adc
cmp
leave
adc
push
jns
(bad)
xchg
xor
loope
aas
addr16
xchg
push
xchg
ja
pop
imul
dec
jge
adc
inc
std
adc
aam
ror
dec
aas
pop
xchg
jbe
aam
xor
(bad)
mov
xchg
test
xor
int3
ss
gs
bound
cmps
dec
scas
xchg
(bad)
xchg
movs
pop
inc
es
js
xchg
cmp
inc
into
pop
xor
sub
mov
mov
out
ficom
add
inc
(bad)
cmc
mov
dec
sti
arpl
nop
mov
jne
imul
int
sub
mov
movs
ret
stos
xchg
mov
xchg
sbb
cwde
pop
fwait
out
mov
cmps
int3
popa
fwait
ret
xlat
fist
aam
xchg
mov
ins
(bad)
sar
push
lahf
add
dec
xchg
push
aas
fs
sbb
imul
xchg
adc
push
ins
cmp
and
push
inc
cdq
dec
jp
and
push
jmp
xor
int
test
pop
cli
loope
aaa
and
adc
fcomp
xchg
popa
push
cmc
xor
jne
les
int
cdq
cmp
clc
into
lock
inc
ins
repnz
les
xchg
cld
adc
mov
out
aam
push
int3
outs
xor
xchg
ret
clc
adc
mov
addr16
mov
pop
not
aam
mov
jbe
push
xchg
sar
(bad)
sar
in
mov
xchg
mov
or
or
xchg
fld
icebp
cmps
jmp
call
or
xchg
add
push
(bad)
clc
cmp
int
mov
in
call
adc
rcr
test
jp
leave
rcr
and
push
xchg
sbb
add
adc
xchg
xor
push
shl
xchg
int
int3
xor
mov
jecxz
and
movs
sti
(bad)
pusha
adc
dec
cmps
popa
outs
inc
cld
cmp
hlt
jge
xchg
push
push
or
mov
adc
or
xchg
pop
and
inc
mov
add
outs
mov
xchg
fist
xchg
in
out
xchg
int
lods
je
cmp
fcom
jnp
out
sbb
les
mov
pop
shl
call
adc
js
xchg
mov
mov
jmp
in
inc
push
pop
add
stos
cmps
shl
psubusb
mov
or
adc
outs
and
aam
xchg
xchg
nop
ins
fdivr
mov
out
or
xor
jmp
jo
js
lods
loope
shl
inc
repnz
cmp
xchg
add
push
aaa
fsubr
pop
fwait
jns
mov
repz
xchg
mov
fcomp
pop
cmp
js
xchg
lock
sbb
mov
popf
repz
add
inc
push
scas
sub
and
imul
jne
or
and
fwait
add
cwde
lods
movs
(bad)
push
daa
adc
pop
aad
xchg
pop
cmp
mov
fimul
(bad)
pop
shr
or
mov
fst
jne
sbb
call
add
movs
fwait
mov
cmc
enter
mov
ins
mov
jno
aam
dec
jecxz
add
loope
cmc
push
ins
cwde
inc
add
out
(bad)
push
pop
vcvtpd2ps
mov
xchg
cld
cmp
into
ret
js
xchg
frstor
mov
fst
sbb
xchg
pop
data16
test
and
sahf
mov
inc
fnstcw
xchg
fmul
adc
and
repnz
inc
enter
mov
mov
mov
arpl
pop
xor
xchg
pop
adc
sbb
aas
xor
xchg
xor
pop
addr16
das
imul
stos
bnd
push
aam
jge
mov
xchg
ja
ret
mov
xor
xor
in
adc
mov
xchg
cmp
mov
inc
jge
pop
movs
dec
mov
data16
xchg
cmp
sbb
cmp
scas
call
dec
xchg
mov
(bad)
out
je
fild
xchg
outs
js
inc
test
sbb
xor
mov
ficomp
or
lods
jg
in
pop
or
inc
cmps
and
mov
or
mov
dec
mov
jb
xlat
shr
mov
pop
mov
outs
xchg
call
movs
out
xor
aam
push
cmc
in
lea
cs
icebp
mov
sbb
test
ss
inc
xchg
sbb
pop
push
ds
movs
popf
ficom
push
jge
and
stos
cld
xchg
push
test
jne
les
fs
mov
adc
lock
test
mov
fist
sub
xchg
jle
(bad)
into
ja
icebp
mov
jbe
bound
lock
and
in
hlt
jbe
daa
xor
push
pushf
loop
inc
cmp
add
sub
xchg
dec
cdq
cmp
mov
cmp
hlt
icebp
xchg
imul
mov
cmp
mov
into
pop
mov
pop
xchg
inc
fiadd
rcl
add
xchg
sub
ss
into
pushf
icebp
xchg
(bad)
aas
mov
pop
sub
retf
pop
mov
sbb
aam
mov
repnz
adc
sub
inc
jne
out
mov
pop
ins
div
push
(bad)
ja
mov
add
stos
mov
xchg
pushf
leave
mov
adc
arpl
sbb
loop
push
mov
cmp
push
pop
dec
xchg
dec
(bad)
(bad)
js
add
xchg
cwde
mov
mov
sbb
je
push
push
push
clc
jb
adc
in
adc
xlat
ret
(bad)
jmp
xchg
jmp
fs
jge
je
xor
popa
mov
jo
cli
mov
mov
add
dec
jbe
mov
push
mov
jo
xchg
mov
adc
adc
les
inc
xchg
pop
fidiv
sbb
adc
xchg
cmp
hlt
cmc
call
pusha
dec
enter
or
mov
pop
aam
mov
xor
mov
mov
dec
or
ins
jl
jmp
xor
push
nop
sbb
push
mov
push
aam
cli
push
pop
or
loopne
sbb
or
fidivr
mov
dec
scas
rcr
ins
(bad)
mov
ret
jge
mov
push
sub
push
les
mov
xchg
ins
push
imul
cmp
or
xchg
adc
add
retf
sub
xchg
scas
loopne
call
fst
and
test
repnz
xchg
andnps
xor
push
xchg
test
arpl
and
pusha
test
ret
fs
sub
fsub
jne
or
mov
mov
ins
ins
pop
stc
xchg
hlt
and
ror
nop
and
cmp
xor
out
inc
or
popf
fnstcw
aaa
dec
xchg
lods
push
dec
je
enter
lods
xchg
in
push
fadd
nop
jmp
and
adc
cld
dec
xchg
xor
fsubr
nop
adc
sub
scas
sti
stos
jl
es
pop
repnz
jbe
mov
mov
jl
and
cmps
inc
outs
adc
ror
sub
jmp
pop
push
les
mov
nop
mov
aam
data16
fwait
test
mov
ja
cwde
jge
std
mov
ret
push
in
call
popf
xchg
shl
addr16
test
jmp
xchg
rcr
pushf
adc
lods
mov
cmc
push
call
repz
aam
sbb
cmp
addr16
dec
sub
jge
loope
in
mov
mov
in
jnp
out
push
in
mov
(bad)
(bad)
adc
mov
mov
rol
imul
int3
repz
pop
mov
js
mov
inc
pop
popf
mov
repz
jno
xor
xchg
push
xor
je
jge
hlt
inc
stos
int
pop
loope
cmp
movs
jge
in
mov
lds
xchg
jmp
call
test
aam
jle
xchg
call
mov
out
push
outs
and
xchg
jl
mov
jp
addr16
int3
stos
inc
sahf
aam
mov
xchg
mov
sbb
jmp
into
(bad)
xor
cdq
sub
jle
fwait
push
stos
adc
xchg
mov
cwde
out
push
lahf
fnstsw
lock
xchg
loopne
and
mov
pop
and
stos
dec
xchg
inc
fidiv
sar
xchg
add
(bad)
loopne
lea
cdq
cmp
xor
jmp
out
iret
out
in
push
sbb
ficomp
add
jns
xchg
jecxz
and
xor
jo
jno
es
test
mov
pop
mov
in
push
mov
adc
les
popf
mov
enter
and
xchg
sbb
mov
push
jp
xchg
xor
shr
mov
push
div
mov
mov
cdq
xchg
add
mov
data16
cmp
pusha
jb
cmp
outs
adc
jae
shr
pop
or
push
and
jl
cdq
pop
xchg
call
add
popa
xchg
clc
je
in
sbb
sbb
add
sar
repz
pop
ds
cmp
lods
cdq
loopne
pop
ins
add
push
push
pusha
lds
adc
adc
pop
cmp
xchg
fdiv
ds
out
push
outs
mov
sahf
push
not
mov
cmp
and
pop
pop
jmp
xchg
jbe
daa
mov
xchg
pop
movs
sar
mov
adc
xchg
out
repnz
mov
adc
nop
push
jl
es
push
sbb
xor
test
xchg
mov
jecxz
test
fbstp
mov
push
(bad)
cli
arpl
adc
loop
das
inc
into
sub
imul
aaa
inc
out
ja
jno
in
or
mov
and
mov
gs
lds
jbe
and
push
pusha
mov
sub
sub
test
movs
mov
loopne
inc
shr
xchg
mov
mov
adc
iret
pop
mov
add
sahf
lock
mov
addr16
(bad)
jns
xor
mov
xor
icebp
adc
xor
sbb
adc
mov
sti
retf
inc
test
dec
into
mov
bound
fnstcw
adc
mov
pushf
dec
dec
lahf
xor
lahf
jl
out
jno
sar
sti
in
mov
and
sbb
inc
jge
dec
imul
dec
jb
iret
adc
shr
dec
aam
xor
dec
or
xchg
movs
jno
jo
jg
fnstsw
hlt
div
hlt
xlat
cld
cs
rol
int
iret
repnz
mov
mov
mov
lock
push
movs
mov
outs
push
cmp
es
push
jb
scas
out
popf
imul
mov
add
rcl
jl
retf
and
nop
sub
fcomp
xchg
cwde
dec
dec
adc
int3
or
ja
call
xchg
gs
cli
es
dec
mov
ins
imul
cwde
adc
std
js
daa
sbb
enter
(bad)
xor
jl
and
in
aaa
bound
dec
mov
test
inc
push
mov
or
rcr
jb
pop
rol
clc
mov
push
fwait
(bad)
data16
je
in
stos
xlat
jl
xor
or
pop
xchg
push
mov
and
dec
pusha
sub
mov
cli
(bad)
out
je
out
xchg
jo
in
bound
out
pop
adc
mov
ret
pusha
push
mov
rcr
punpcklwd
call
ret
cmps
fist
add
sub
or
into
les
pop
aaa
pop
xchg
ja
(bad)
push
xchg
sub
imul
icebp
test
push
cmps
push
mov
imul
adc
and
(bad)
lock
hlt
mov
ins
jl
stos
icebp
(bad)
xchg
icebp
cmp
es
cmps
dec
stos
test
cwde
xchg
push
imul
jl
mov
cmps
sbb
push
push
xor
jl
lahf
dec
jp
jl
arpl
mov
cld
xchg
test
daa
ficom
ins
mov
fist
dec
fucompp
pop
mov
sti
add
cwde
ss
ins
call
ror
in
mov
adc
xchg
inc
mov
ret
mov
cmp
push
mov
dec
mov
enter
or
rcr
or
mov
in
in
test
cmp
shl
dec
movs
(bad)
and
std
push
ret
das
in
out
ins
push
sar
add
xchg
js
repz
out
bound
xchg
jmp
out
imul
call
mov
popa
test
cld
xchg
adc
adc
jo
outs
push
and
push
pop
inc
shl
dec
aam
leave
dec
xchg
inc
adc
cld
and
mov
dec
call
fcomp
les
sub
cwde
cmc
jl
test
outs
push
or
inc
cmp
push
mov
mov
sar
iret
push
sahf
cmp
aas
into
cwde
out
addr16
and
or
cmp
cs
sbb
imul
pop
push
dec
lock
stc
pop
ds
stc
add
adc
adc
xchg
cmp
push
xor
inc
mov
jge
loop
push
out
addr16
not
mov
sub
or
adc
call
jge
pop
xor
(bad)
repz
outs
rol
cwde
dec
sbb
and
hlt
and
or
imul
pop
jb
lods
dec
sbb
int3
mov
mov
out
add
jl
retf
jmp
push
movs
(bad)
popf
sti
ret
dec
nop
push
xchg
sbb
movs
jecxz
test
add
pop
popf
mov
fst
(bad)
adc
stos
ffreep
scas
and
in
stos
rcl
in
xchg
iret
(bad)
fcmove
retf
cmp
popf
imul
push
js
sbb
pop
xchg
adc
rcl
retf
mov
add
jnp
sbb
movs
std
push
into
sar
loop
sbb
fnsave
aas
push
push
cld
ret
sbb
push
pushf
ret
mov
enter
push
pop
fsubrp
lods
and
repz
pop
xchg
dec
test
lea
fistp
test
sub
and
sbb
pusha
xchg
jge
leave
movs
cmps
outs
mov
repz
pop
cmpps
imul
jno
push
retf
ins
outs
movs
in
stos
lds
retf
out
test
or
fst
inc
mov
push
mov
call
push
loop
fnstenv
in
cwde
and
test
pop
jmp
into
inc
bound
nop
sub
popa
and
and
sub
fcomp
adc
outs
les
es
js
mov
inc
sub
loope
jmp
dec
jb
add
rcr
into
push
test
test
jg
out
cwde
cmc
ss
cwde
into
test
push
pop
jl
mov
or
mov
pop
xchg
pop
(bad)
popf
inc
repnz
cmp
cmp
(bad)
xchg
sub
xor
(bad)
mov
xchg
mov
xor
jnp
mov
mov
mov
or
loop
hlt
jae
jg
bt
repnz
and
mov
jl
or
adc
mov
and
adc
fisttp
in
jp
xchg
in
and
adc
fwait
inc
or
adc
pushf
retf
xor
push
xchg
inc
lods
push
ror
neg
sbb
mov
add
xchg
cmps
xchg
and
jmp
outs
add
xchg
lock
lods
xchg
and
nop
xchg
dec
xchg
mov
push
jno
shr
mov
retf
idiv
mov
sbb
dec
pop
pop
xchg
and
inc
and
ins
sub
enter
ja
xchg
cmp
jl
cmp
and
push
mov
repz
imul
jnp
dec
push
lds
mov
jb
cdq
iret
imul
sub
xchg
(bad)
and
cs
jno
xchg
ins
movs
adc
and
adc
ret
mov
pusha
stc
jns
ins
xlat
popa
add
data16
mov
push
not
xor
mov
add
xchg
das
jecxz
mov
xchg
lods
fnstenv
int
pop
imul
jo
pop
cmp
mov
xchg
or
cmp
outs
movs
mov
xchg
push
cmp
loopne
(bad)
jae
and
xchg
fadd
push
cld
xchg
pop
push
adc
xchg
jb
addr16
pop
dec
mov
stc
and
int
fst
pop
jecxz
retf
sti
mov
pop
mov
pop
fwait
nop
scas
xor
or
mov
stos
icebp
or
retf
mov
and
sub
call
out
or
data16
repz
lock
jmp
fst
cld
(bad)
fwait
push
add
xchg
inc
dec
push
sbb
cdq
and
xchg
push
std
(bad)
mov
inc
pop
aad
shr
or
movs
popf
push
or
pop
adc
xchg
inc
sub
xchg
cmps
sbb
push
(bad)
sub
ds
dec
cwde
jge
rcl
ss
sbb
adc
mul
xor
jl
jmp
stos
in
inc
mov
cmps
pop
in
mov
js
and
loop
ret
cmp
and
hlt
xor
adc
sub
(bad)
imul
cmp
dec
lea
mov
in
push
lock
lods
out
stc
push
push
sbb
xor
loopne
popf
jmp
mov
ror
shl
jl
and
xchg
mov
(bad)
iret
jp
adc
pushf
cmp
ret
fimul
aam
aaa
sub
fild
neg
stos
scas
inc
loop
je
adc
dec
(bad)
xchg
nop
or
(bad)
fs
shr
jp
inc
adc
lods
mov
pushf
xchg
inc
retf
daa
idiv
sub
ret
jl
push
inc
push
cmp
stc
mov
sbb
add
inc
ror
gs
cmp
sbb
pop
ds
movs
data16
mov
adc
xchg
push
outs
call
sub
sub
jl
outs
xchg
js
inc
fcom
jge
fwait
jmp
pop
jbe
je
(bad)
pop
mov
retf
dec
jl
and
fild
fist
adc
mov
and
xchg
push
aaa
idiv
add
or
ret
(bad)
je
outs
loope
pop
xchg
(bad)
push
sub
push
in
push
fdivr
mov
not
loop
push
xchg
fcmovu
lea
call
fdivr
xor
lock
pusha
sahf
sub
test
iret
xor
ins
pop
xchg
lods
jns
pushf
cmc
int
lods
mov
stos
push
sbb
rol
or
int3
scas
cdq
xchg
leave
pushf
xor
cmp
cmp
out
paddusb
xchg
xchg
pop
push
add
movs
or
icebp
dec
mov
jl
dec
sub
idiv
cmps
adc
sahf
lock
bound
pop
pop
adc
ja
popf
and
mov
cmc
cmp
sub
in
xchg
sbb
cmps
mov
fadd
cmps
xchg
jmp
inc
hlt
int3
aaa
sar
or
lahf
mov
pop
hlt
fucomip
xlat
lea
clc
daa
or
jle
rcl
lock
mov
push
jl
cs
(bad)
ficom
jmp
(bad)
popf
jge
or
loopne
rcl
mov
inc
pop
xchg
mov
xchg
cwde
mov
imul
rcr
cs
and
mov
jecxz
clc
xchg
daa
push
mov
adc
jmp
xchg
pop
adc
push
xchg
inc
adc
and
mov
scas
jno
mov
mov
pushf
imul
xchg
and
mov
mov
rcl
mov
fwait
test
mov
movs
push
xor
das
adc
stos
jl
dec
daa
ja
addr16
ins
cmc
(bad)
sahf
sbb
hlt
movs
dec
lahf
xchg
mov
push
frstor
xchg
mov
mov
pop
jne
xchg
and
pop
push
mov
popf
loop
and
adc
jmp
dec
cmp
adc
or
or
jg
add
push
iret
imul
xchg
loope
lea
cs
fwait
add
pop
out
cmp
sar
lds
lods
xchg
jbe
sti
mov
mov
xchg
sub
aas
mov
repz
adc
repnz
cmp
icebp
stos
xchg
or
fwait
inc
loopne
push
cmp
xchg
aam
dec
fdiv
popf
mov
adc
test
popa
xchg
cld
cdq
cmp
or
adc
push
movs
mov
or
retf
mov
mov
xchg
out
cmp
cmp
shl
jne
ret
cmp
jl
retf
xchg
mov
stc
xchg
xchg
sbb
inc
jg
push
outs
int
sbb
les
mov
jno
mov
aam
rcr
mov
loop
repnz
push
add
test
lea
cmp
pop
push
sbb
pusha
ret
and
xchg
fisub
out
test
push
bound
ins
adc
cmp
daa
std
xchg
jbe
adc
xchg
sbb
dec
xchg
mov
bound
sub
xor
xchg
sbb
pop
sub
mov
pop
xchg
movs
mov
mov
cmc
or
loop
add
fidivr
adc
sbb
leave
enter
xchg
bswap
dec
mov
lods
ins
xor
mov
rcl
dec
sub
push
(bad)
nop
repz
jno
adc
adc
cli
dec
push
nop
jae
pusha
mov
xchg
mov
nop
adc
sub
(bad)
mov
sbb
jp
ror
jo
not
popa
enter
push
or
je
pushf
and
jnp
xchg
ins
faddp
mov
loope
addr16
xchg
cmp
out
in
sub
or
add
sub
fucomi
mov
cmp
mov
sahf
les
pusha
cmps
xor
fwait
dec
inc
cwde
ret
popa
cdq
out
mov
scas
fwait
(bad)
loope
mov
ins
xor
mov
fld
cld
sub
stos
push
es
xchg
fild
add
lods
push
ins
fwait
mov
cdq
(bad)
sbb
lds
mov
xchg
xchg
adc
movs
xchg
in
or
lock
xchg
call
dec
outs
push
xchg
gs
ret
jne
addr16
mov
fdiv
sub
inc
mov
ror
in
mov
mov
xor
pop
push
xchg
cdq
not
fmul
cmc
adc
jne
jp
cs
dec
mov
stos
sbb
push
xchg
loop
jo
jl
sbb
jb
(bad)
fmul
or
dec
ret
adc
push
js
test
jge
jo
cmp
popa
mov
mov
inc
aaa
inc
adc
xchg
pushf
in
jle
mov
jge
std
leave
jno
lea
into
inc
pop
xchg
sub
cmp
cmp
push
fisttp
dec
adc
mov
pop
fwait
dec
(bad)
sbb
lea
jnp
pop
xchg
mov
jo
push
aaa
pop
rol
outs
mov
push
xchg
add
push
xchg
ins
push
jae
iret
stos
mov
aas
jo
inc
xor
xor
jge
ror
mov
mov
xlat
das
jl
loope
pop
iret
adc
xchg
loopne
retf
push
cmps
into
dec
not
push
xchg
loop
fidiv
dec
pop
xor
dec
pop
inc
psrld
mov
cmp
fdiv
adc
in
movs
movs
add
ret
xchg
mov
lahf
xchg
lds
es
pop
repnz
xlat
push
iret
and
and
out
fcmovnu
or
rcl
xchg
hlt
and
fld
pop
sub
inc
or
and
shr
adc
push
or
rcl
lahf
xchg
hlt
fisubr
cli
aad
int
mov
inc
pop
call
(bad)
xchg
in
ror
mov
int3
pop
xchg
out
xor
mov
sub
gs
rol
adc
or
inc
cmp
mov
pusha
sbb
retf
jno
push
sbb
mov
test
icebp
xchg
jae
pop
mov
es
sub
xchg
dec
int
dec
jge
test
xchg
fmul
mov
or
loop
pop
add
imul
dec
nop
xor
je
xchg
js
cmp
add
cli
dec
xchg
pop
pop
inc
xchg
fadd
push
aad
jle
jmp
push
stos
(bad)
mov
inc
mov
icebp
push
fwait
mov
xchg
call
aam
inc
ds
ror
cmps
gs
xchg
add
push
jl
xchg
jbe
retf
or
xchg
push
lock
in
fwait
out
ficom
jns
test
jmp
aam
ror
add
out
(bad)
adc
ror
sub
push
mov
aad
sbb
mov
xchg
mov
or
cmp
push
sti
ficomp
scas
adc
mov
ds
(bad)
hlt
mov
repz
mov
push
fsubp
imul
mov
in
mov
add
cmp
rep
cmp
xchg
sbb
mov
push
mov
(bad)
in
cmp
mov
inc
mov
push
movs
sti
push
xchg
cmps
fidivr
das
aam
sub
push
loopne
inc
xchg
(bad)
and
stos
in
rcr
dec
fist
mov
shl
sbb
jl
lock
(bad)
mov
stos
bound
xor
push
in
push
test
mov
mov
repz
jno
sub
fisubr
xchg
pop
pusha
stc
push
and
cmc
xchg
lahf
sbb
call
mov
dec
jae
jne
pop
nop
add
ja
iret
mov
jb
xchg
imul
xchg
xor
shl
mov
loopne
ror
leave
lods
lds
inc
sub
inc
jmp
and
cld
test
xchg
mov
xchg
mov
inc
cdq
xor
rol
cli
call
int3
dec
cdq
xchg
out
leave
push
and
cmp
mov
cmc
mov
inc
mov
pop
(bad)
xchg
aad
pop
sbb
out
inc
dec
(bad)
jp
push
arpl
sbb
daa
xchg
fdivrp
jbe
idiv
sbb
jecxz
push
dec
and
and
inc
mov
inc
xchg
pop
lods
pop
mov
(bad)
pop
push
(bad)
fwait
xchg
or
or
xchg
and
ja
(bad)
adc
enter
mov
scas
dec
mov
xchg
and
hlt
(bad)
jo
adc
cdq
fisttp
push
jbe
sti
aas
xchg
mov
lock
or
mov
cmps
mov
(bad)
fcomp
add
push
jns
es
xchg
stc
mov
in
mov
loope
xchg
mov
adc
repz
jmp
xor
and
push
xchg
sbb
clc
out
daa
xchg
arpl
xchg
imul
jmp
xchg
cmp
outs
xchg
in
std
adc
xor
xchg
sbb
and
xchg
das
cs
add
mov
xchg
push
sahf
add
popa
iret
hlt
nop
xchg
mov
xor
sbb
xchg
push
jmp
in
je
jo
mov
sub
and
mov
push
mov
ficom
dec
gs
cmp
xlat
mov
add
xor
jne
add
push
pop
cs
push
imul
adc
fwait
mov
test
test
push
(bad)
dec
xchg
retf
pop
mov
add
bnd
popf
or
sahf
int3
in
xor
outs
cdq
data16
inc
xor
cwde
sub
test
shr
movs
push
out
ret
out
inc
loopne
fisttp
nop
jle
add
push
mov
mov
jecxz
inc
sub
es
xchg
inc
sub
pop
cs
mov
push
loopne
shl
push
popf
in
shl
or
xor
adc
mov
cli
push
inc
arpl
mov
sub
aas
mov
in
or
mov
cld
out
mov
jmp
mov
sbb
ret
cld
xchg
call
mov
repnz
sub
add
jo
or
lock
fsub
inc
in
out
xor
(bad)
mov
(bad)
mov
call
nop
aaa
mov
xchg
dec
xlat
nop
fcmovne
fidiv
mov
jmp
ret
sub
lock
scas
xor
aam
fld
shr
xlat
pop
aas
mov
add
cmc
retf
or
xchg
shl
hlt
(bad)
stc
hlt
adc
cwde
std
cmp
cld
mov
jmp
cmc
fwait
dec
xor
repnz
mov
cwde
fistp
(bad)
xchg
sbb
aaa
push
call
aas
mov
adc
xchg
xor
cmp
dec
inc
mov
xchg
fidivr
cmp
fisub
sbb
xchg
xor
ss
sti
mov
pop
xchg
test
add
jb
cmp
test
jle
push
je
and
ret
add
jge
jp
push
addr16
cli
dec
pop
jne
xor
(bad)
stos
xrelease
fild
popf
pop
xchg
aaa
cwde
inc
inc
ret
aas
adc
dec
jmp
cmp
shl
cli
push
xchg
mov
out
sbb
mov
(bad)
mov
push
les
pop
jmp
mov
xchg
xchg
jnp
repnz
mov
mov
dec
(bad)
cmp
pop
cmps
or
jmp
dec
and
aaa
xchg
out
xchg
stos
adc
movs
pop
push
sbb
sbb
or
sar
out
clc
in
xchg
es
xchg
mov
cmp
xor
mov
arpl
mov
cmps
mov
cmps
lods
aam
aaa
pop
cmp
sbb
enter
jl
pop
cmp
aaa
xchg
stc
fisub
movs
test
dec
(bad)
(bad)
pop
jns
mov
mov
jge
jp
push
out
sbb
es
fisubr
aaa
mov
fcmove
jbe
cmps
popf
loopne
mov
addr16
pop
mov
mov
jg
mov
je
and
xchg
mov
or
je
xor
js
and
sbb
in
frstor
cld
imul
scas
inc
fwait
aaa
test
cmp
cld
call
repz
fadd
popf
out
call
shr
xor
mov
rcl
cwde
aaa
aad
mov
bswap
mov
pop
xchg
dec
push
mov
cmp
xchg
popf
loope
mov
enter
xchg
adc
push
push
push
pop
pop
push
jg
stc
call
push
dec
xchg
xor
lahf
fisub
das
dec
jmp
mov
jno
cdq
sub
and
and
sub
cs
xchg
xor
hlt
in
imul
popa
mov
ins
push
push
movs
pop
hlt
shl
dec
mov
sub
inc
loopne
out
mov
sbb
mov
mov
jl
sub
lahf
fcomp
mov
adc
push
add
mov
mov
push
mov
stos
hlt
sbb
cwde
cld
cmp
add
loope
pop
mov
hlt
pop
idiv
xchg
xor
lods
shr
mov
aad
cmp
cmp
in
pushf
jl
fild
frstor
mov
mov
add
fdiv
mov
mov
retf
mov
fnstsw
aam
int
ins
xchg
jge
and
xchg
div
iret
(bad)
dec
fmul
add
mov
dec
xchg
test
jge
inc
inc
xchg
lahf
cmps
lods
scas
cmps
dec
into
lahf
sub
fucomi
jmp
sbb
je
stos
or
jae
daa
xchg
shr
scas
xchg
jne
jns
leave
imul
push
test
jo
xchg
jmp
retf
dec
mov
xchg
xor
pusha
(bad)
arpl
fcomip
adc
xor
sub
xchg
xchg
pushf
lds
add
cmp
mov
and
jb
mul
inc
xlat
out
xchg
sub
mov
loopne
call
idiv
xchg
mov
shl
mov
popf
xchg
outs
(bad)
and
xchg
and
ja
xchg
outs
add
es
enter
adc
adc
push
dec
mov
xchg
sbb
(bad)
dec
stos
fist
(bad)
in
xlat
mov
dec
addr16
or
xchg
retf
shl
add
sbb
std
aam
xchg
inc
and
xchg
les
pop
retf
(bad)
xchg
sti
mov
jbe
push
xor
xchg
or
fwait
lahf
das
je
js
repz
xchg
sub
imul
stos
mov
xchg
jecxz
push
cmp
xchg
jbe
pop
sub
(bad)
push
push
xchg
ins
dec
sbb
push
sti
fwait
(bad)
adc
xchg
xchg
pop
nop
out
mov
xor
pushf
ret
retf
xchg
sti
sub
ds
jle
xor
(bad)
adc
lods
mov
push
jne
mov
add
mov
(bad)
outs
adc
mov
inc
xchg
cmp
jmp
arpl
xchg
xor
xchg
xchg
dec
mov
test
pop
add
dec
cmp
lods
jge
div
aam
mov
jp
push
cmps
push
ins
sbb
and
mov
mov
jl
dec
adc
mov
aas
cwde
dec
shl
cmps
jge
mov
cld
mov
sbb
cmp
lahf
jmp
cwde
xchg
cli
cmps
cmc
test
sbb
xor
and
pop
scas
jne
mov
xor
add
adc
sub
popf
add
cmp
lods
jmp
push
sahf
cld
cdq
pop
stos
xchg
mov
push
das
fnstcw
ret
jmp
inc
mov
jno
pop
inc
xchg
sbb
fst
push
xchg
sbb
push
out
fild
aaa
inc
pop
add
mov
xchg
sub
push
mov
sub
push
in
in
mov
sub
and
xor
xchg
movs
cmp
daa
xchg
sub
stos
mov
fwait
xor
in
sbb
cmp
cmps
xchg
pusha
mov
xchg
jb
movs
mov
jge
aam
aam
mov
stos
push
xor
movs
xchg
jl
(bad)
cld
mov
aaa
xchg
jne
ret
movs
sar
or
xchg
repz
inc
dec
xor
and
test
dec
sub
xchg
dec
pop
cmp
pop
(bad)
fs
imul
xchg
adc
push
(bad)
sub
ins
call
xchg
inc
cwde
lods
neg
lock
or
push
xchg
rol
in
push
(bad)
ins
mov
adc
sub
dec
mov
in
dec
push
mov
test
push
xchg
push
cmp
int
jmp
mov
pop
jl
sbb
(bad)
fcomp
add
xchg
fadd
mov
ins
cli
xchg
arpl
dec
cmps
mov
int
adc
jge
pushf
inc
cld
xchg
pop
and
add
mov
jns
mov
xchg
or
cmp
mov
xor
cmc
and
(bad)
add
int
xchg
adc
push
inc
xchg
out
cs
les
test
mov
inc
and
fist
dec
mov
push
stos
fistp
stos
pushf
dec
movs
sub
mov
test
fnstcw
adc
and
loopne
push
and
sti
xchg
outs
or
int3
xchg
adc
das
mov
xchg
cmp
fnsave
adc
movs
es
mov
mov
adc
mov
pop
inc
xchg
ficom
daa
(bad)
cli
cmp
movs
fmul
inc
idiv
inc
and
xchg
loop
(bad)
xchg
scas
mov
mov
xor
inc
or
jmp
test
hlt
mov
push
jge
mov
adc
adc
call
je
in
xor
xchg
popf
mov
fsub
out
into
pushf
das
sbb
aas
arpl
xchg
push
stc
fwait
xchg
pusha
mov
(bad)
mov
aam
jle
out
sub
aad
add
es
mov
xlat
mov
xor
mov
xchg
fdiv
jo
adc
and
int3
jge
cmp
jmp
push
cmps
fsubr
mov
ret
lahf
iret
ja
popa
(bad)
enter
mov
cld
cli
inc
fadd
mov
ret
mov
(bad)
xchg
dec
hlt
sbb
jle
mov
jge
mov
xor
mov
gs
add
div
in
jbe
mov
aad
js
(bad)
stos
cmp
pop
cmp
cmps
jl
inc
push
mov
mov
gs
movs
jmp
loope
push
out
pop
je
dec
mov
paddq
pop
mov
jg
fnstenv
and
and
icebp
sar
and
cmps
inc
or
sub
daa
movs
dec
ins
bound
(bad)
rcr
dec
sub
mov
xor
and
dec
(bad)
rol
push
enter
mov
sbb
sub
inc
jl
std
push
dec
xchg
xchg
rcr
jno
hlt
imul
xor
jle
sar
add
fimul
cmp
dec
divps
jnp
test
push
stos
adc
adc
xlat
test
mov
adc
hlt
shl
nop
rcr
scas
xchg
ss
jge
ret
xlat
sbb
add
rol
pop
mov
inc
(bad)
js
cmps
out
cdq
dec
xchg
jecxz
ret
fst
mov
pushf
pusha
es
lahf
outs
loope
xor
adc
test
sahf
mov
pop
popa
jg
imul
mov
pop
xor
jecxz
jl
stc
xor
out
push
retf
jecxz
movs
cmc
retf
jae
hlt
sbb
inc
imul
ficomp
shr
fwait
xchg
xchg
mov
adc
pop
test
mov
shr
push
popf
mov
xor
ret
test
dec
xchg
and
aaa
test
push
imul
sahf
xchg
aam
pop
das
outs
adc
movs
jo
xchg
movs
cld
ins
jbe
shl
xchg
das
aas
add
ds
and
mov
adc
jmp
and
jle
fcomp
jecxz
mov
sbb
xor
sahf
jmp
xlat
lahf
or
pop
cmp
pop
out
in
cmps
jge
je
ficom
jge
adc
ds
js
dec
(bad)
pop
mov
mov
loopne
repnz
(bad)
loop
xor
stos
push
sub
mov
or
mov
ret
xor
adc
sub
ja
fld
ds
aam
and
adc
sbb
xlat
xor
inc
jecxz
ja
js
arpl
mov
icebp
pop
xor
addr16
dec
nop
sbb
xchg
(bad)
scas
rcr
aad
jmp
xchg
fisttp
lds
sar
cmp
jbe
inc
rcl
mov
or
aaa
xchg
les
and
idiv
xor
loopne
fadd
out
cmp
sub
mov
in
xchg
mov
aad
xchg
fild
sbb
cmp
jo
fcom
popf
les
scas
hlt
jns
or
ret
sbb
jnp
xchg
iret
test
sbb
mov
mov
xchg
lods
gs
pop
idiv
pop
cmps
push
inc
in
ret
jmp
jmp
(bad)
and
push
xchg
icebp
sub
(bad)
sbb
mov
jp
fs
pop
inc
pop
call
aam
sbb
(bad)
cmc
mov
hlt
in
jmp
fs
or
stos
pop
sub
pop
mov
dec
call
sub
fst
cmp
jmp
or
adc
mov
sbb
test
pop
xchg
pop
xor
mov
mov
mov
sbb
test
sub
jne
add
enter
jno
mov
add
fimul
loopne
aam
xchg
sub
xor
(bad)
xchg
adc
inc
pop
jno
cmps
xchg
xchg
mov
xor
mov
xor
or
movs
pushf
in
push
repz
and
stos
lods
data16
xor
xchg
dec
mov
dec
ja
and
int3
xor
inc
xchg
mov
retf
inc
mov
adc
sbb
in
aam
(bad)
ins
idiv
fist
lock
mov
mov
xchg
fwait
adc
movs
icebp
int
xchg
mov
jae
adc
push
sub
mov
dec
and
cmp
cld
setae
js
cmp
into
push
shr
cdq
in
or
int
adc
xchg
mov
push
add
cdq
xor
and
pop
adc
pusha
fmul
fisub
lock
jmp
clc
movs
dec
jmp
adc
cmp
adc
inc
xchg
repz
aad
inc
les
add
mov
in
mov
cdq
jmpw
jle
xchg
test
loopne
pop
add
add
aaa
mov
mov
fwait
jl
sub
(bad)
imul
push
add
dec
xor
ja
xor
mov
je
mov
lock
rep
jnp
pop
call
add
jge
jbe
js
or
enter
lods
pop
cmp
xor
fcom
movs
jl
adc
push
xchg
push
jp
xchg
or
mov
test
imul
add
or
push
test
jl
push
sbb
xor
push
test
icebp
in
jns
fst
inc
add
xchg
outs
mov
cli
ins
fwait
leave
and
xlat
int3
add
mov
xchg
xor
mov
or
inc
xchg
movs
xchg
into
xlat
test
inc
aad
stc
pop
int3
mov
jle
xchg
jmp
xor
xor
ja
fistp
sti
xchg
cmps
xlat
inc
mov
and
aam
movs
push
mov
sbb
pop
ja
loop
cdq
add
inc
(bad)
shr
xchg
push
jbe
mov
popf
mov
fs
mov
mov
xchg
jge
aaa
mov
retf
int
fcom
sbb
sahf
daa
dec
aam
pop
xchg
int3
mov
jecxz
stc
es
and
mov
fnstsw
xchg
mov
cmp
adc
cmps
push
popf
(bad)
fwait
mov
pop
cdq
daa
pop
rcr
inc
adc
ds
mov
mov
call
and
scas
mul
(bad)
aaa
mov
popf
pop
mov
push
aam
in
xchg
lock
jle
pop
ds
mov
int
mov
mov
int3
xor
hlt
ds
ficom
(bad)
hlt
cld
popf
push
pop
inc
arpl
scas
les
xchg
cli
mov
mov
xchg
cld
imul
pop
pop
push
jecxz
je
add
xchg
xchg
lahf
mov
pop
test
dec
mov
out
mov
ret
push
bnd
retf
adc
dec
sbb
cwde
cli
lahf
sub
mov
cmp
pop
pop
xchg
pop
retf
outs
les
fs
push
xor
pop
cwde
idiv
sub
shl
xchg
add
in
xchg
outs
push
fs
aaa
mov
popf
movs
sub
int
xor
xchg
add
mov
pop
int3
aam
ficom
aam
push
rol
xchg
pushf
xchg
(bad)
es
jno
mov
sub
jge
in
mov
pop
fsubr
neg
sub
xchg
(bad)
dec
test
and
in
or
fsubr
and
in
aad
jl
rcr
xchg
cld
jmp
scas
and
out
mov
adc
jmp
(bad)
faddp
sub
add
push
mov
mov
or
xchg
mov
adc
xchg
jb
out
inc
inc
and
add
cmp
cdq
push
inc
push
pusha
jne
out
loopne
inc
xchg
movs
loope
xchg
mov
mov
repnz
inc
enter
mov
adc
and
push
xchg
sub
sbb
jecxz
push
into
test
test
mov
jnp
mov
xchg
fwait
loopne
sti
hlt
repnz
xchg
ja
mov
xor
adc
fimul
and
clc
xor
test
out
adc
fmul
xchg
xchg
mov
or
cmp
xor
mov
xchg
cmps
test
push
push
xor
fwait
scas
sbb
and
cmp
xchg
xchg
sbb
xchg
cs
xchg
clc
pop
les
test
cmps
lds
sbb
jl
ror
std
icebp
xchg
sbb
ror
sbb
mov
pop
jbe
imul
and
arpl
sub
ret
dec
cli
or
in
movs
loope
call
push
mov
je
and
mov
aaa
outs
or
outs
call
inc
stos
lea
mov
nop
and
ret
adc
mov
mov
cmp
outs
push
movs
jge
out
sub
inc
hlt
jmp
bound
push
jp
sbb
sbb
cdq
retf
xchg
jl
push
xchg
lea
inc
ins
pop
mov
xchg
sbb
addr16
mov
fisub
fs
jge
push
and
xchg
xor
mov
sbb
inc
xchg
pusha
or
(bad)
mov
in
sbb
jle
pop
int
enter
outs
icebp
adc
mov
add
mov
jl
xchg
jne
pop
icebp
push
push
jge
mov
xor
hlt
scas
(bad)
fcom
jo
movs
cdq
mov
push
jnp
xchg
cwde
fwait
or
push
mov
aam
pop
push
xchg
dec
inc
push
cmc
fdiv
imul
sbb
xlat
jmp
xchg
pop
or
push
into
arpl
rol
and
in
inc
or
adc
mov
lds
popf
loope
jmp
push
icebp
xchg
scas
mov
fldcw
jae
(bad)
sahf
mov
or
aad
(bad)
xor
cmc
fwait
dec
add
or
xchg
cmps
scas
or
mov
icebp
push
int3
mov
(bad)
sbb
in
test
test
popf
dec
dec
push
jg
imul
lods
jb
shr
pushf
adc
stos
jl
push
and
and
xchg
aam
jo
dec
inc
xchg
lahf
sti
mov
xchg
sub
imul
out
je
ins
jg
xchg
inc
sbb
adc
jmp
xchg
addr16
xchg
jnp
xor
jbe
adc
scas
aaa
xchg
dec
jno
fwait
add
ja
les
mov
mov
jg
rol
movs
push
add
aam
inc
je
into
iret
or
pop
(bad)
dec
popa
sub
jg
fsub
aam
push
hlt
add
inc
xchg
out
jmp
pop
pop
mov
push
jo
(bad)
xchg
and
adc
in
push
mov
outs
test
or
test
mul
movs
xchg
push
ss
or
dec
sbb
out
aam
test
mov
fdivp
pop
mov
add
xchg
and
sahf
mul
inc
or
sbb
xor
xor
pop
push
fiadd
(bad)
push
fst
aas
shr
pop
inc
loope
push
or
fbstp
add
add
(bad)
push
cwde
mov
jb
pushf
(bad)
retf
and
mov
jb
lahf
xor
xchg
jnp
cmp
fisttp
js
addr16
xchg
shl
sub
cmp
je
fcom
cwde
and
xchg
or
(bad)
cmp
fs
rcr
pop
xchg
je
xchg
jle
add
cmps
cmps
aas
xchg
mov
pop
(bad)
int
cmps
lock
jmp
ret
sbb
icebp
fsubr
popa
xor
push
repnz
das
adc
lock
fistp
ret
sub
rcl
sub
xor
in
sbb
xchg
or
xchg
hlt
imul
pop
inc
dec
std
cmps
push
enter
xor
jecxz
cld
sub
push
ds
pop
adc
sub
je
inc
push
popf
cld
(bad)
psllw
pop
test
mov
jns
pusha
jmp
sub
pushf
rol
call
les
test
in
jne
inc
jmp
fwait
sub
push
jb
mov
cmp
mov
inc
xor
lahf
pop
je
sahf
jge
mov
pop
pop
cwde
mov
pop
cmps
jl
or
cs
inc
inc
mov
imul
mov
shl
gs
mov
mov
fistp
cmp
xchg
sub
push
mov
mov
xchg
mov
aas
cwde
xchg
ret
iret
aam
les
ins
xchg
mov
pop
xchg
push
pop
mov
mov
push
stc
(bad)
out
xchg
movs
retf
sahf
inc
mov
ss
jmp
cmp
mov
addr16
push
daa
mov
pop
clc
stos
dec
xchg
jle
pop
sub
and
inc
xchg
xchg
mov
(bad)
xchg
xor
adc
clc
sahf
cwde
js
xchg
sub
or
ins
mov
xchg
push
cmp
xchg
js
in
pushf
cmp
mov
cdq
add
icebp
mov
mov
bound
pushf
fisub
sahf
adc
mov
aaa
imul
out
jp
xchg
(bad)
fs
xlat
push
add
push
std
cdq
aas
push
pop
les
lock
loopne
push
clc
xchg
and
call
sahf
xchg
adc
stos
xor
push
jge
jle
xlat
aad
cmp
imul
adc
xchg
or
stos
scas
or
xchg
sbb
call
push
inc
aas
std
fsub
xchg
icebp
mov
rcl
(bad)
jp
ret
push
je
inc
das
xchg
push
adc
rcr
and
mov
loop
in
xchg
(bad)
add
retf
fcomp
sub
ja
sub
and
je
int
fucomi
in
mov
xchg
xchg
imul
fnstenv
push
mov
retf
sbb
(bad)
xchg
mov
(bad)
(bad)
cmp
or
fistp
rcl
mov
ret
inc
adc
or
sahf
cdq
xchg
sub
(bad)
jl
xchg
jno
xchg
sub
and
xchg
iret
push
fwait
jmp
rcr
mov
xchg
xor
leave
xchg
icebp
(bad)
push
adc
pop
sub
mov
sbb
retf
add
scas
popf
jecxz
lock
fcmovne
(bad)
xlat
ret
ror
addr16
call
xchg
jle
push
jae
(bad)
pop
inc
loopne
scas
push
iret
xchg
mov
rol
push
xchg
outs
adc
sbb
jmp
xchg
dec
add
shl
dec
scas
stc
es
mov
ror
aas
shl
and
xchg
call
jb
icebp
dec
clc
into
xor
push
xchg
pop
pop
inc
sti
push
lea
movs
ret
xchg
out
std
xchg
inc
jo
adc
stc
ja
scas
adc
pop
xor
pusha
and
xchg
aad
mov
jmp
stos
outs
adc
ficomp
xchg
jne
inc
add
cmovl
aaa
add
jmp
cmp
idiv
nop
inc
out
std
test
lahf
jle
cmps
sub
clc
xchg
sbb
fadd
xchg
test
shl
adc
pop
clc
adc
fcomp
sub
and
and
hlt
jne
dec
aaa
das
pop
out
inc
outs
dec
ror
xchg
xchg
cmp
mov
sbb
xchg
mov
lods
aam
pop
jne
inc
and
or
lock
mov
mov
call
xor
push
clc
jae
adc
(bad)
mov
or
cld
repz
lahf
push
and
fwait
xor
ret
inc
xchg
push
cmp
inc
dec
(bad)
sub
pop
bound
ret
emms
adc
mov
mov
push
sub
sub
les
rol
ins
pusha
cli
fstp
int3
xchg
and
mov
lock
je
(bad)
fisttp
outs
xor
dec
arpl
stos
adc
push
dec
jmp
xor
aaa
std
xchg
push
int
retf
idiv
add
xchg
cmovns
cmp
aam
rcl
xchg
pusha
or
ror
xchg
inc
rcr
cwde
cmp
adc
lods
jle
or
jl
in
les
pop
or
mov
sbb
rcl
sub
jl
cmp
adc
add
add
mov
xchg
clc
loop
sbb
jp
(bad)
mov
pop
xchg
adc
mov
xor
imul
push
sbb
cmps
nop
push
add
push
gs
jo
mov
sub
add
dec
out
inc
xchg
loopne
xor
jbe
dec
ss
lods
add
lock
push
xchg
mov
jns
dec
jnp
pop
xchg
lods
and
out
sub
(bad)
jmp
(bad)
sti
movs
fs
outs
cmc
pusha
xor
sub
inc
pop
fbstp
into
xchg
(bad)
and
sbb
dec
test
mov
movs
mov
seta
clc
aad
bound
pop
push
or
sub
arpl
out
pusha
mov
mov
retf
pop
rcl
jne
inc
or
into
or
xor
mov
mov
in
jmp
ja
xchg
or
inc
call
out
sub
push
and
ret
loope
call
xchg
daa
mov
xor
jne
mov
mov
xor
cdq
das
scas
mov
call
add
out
int3
mov
fild
and
xchg
push
(bad)
mov
icebp
out
xchg
hlt
cld
or
xchg
ins
mov
loop
cmp
lods
icebp
sub
add
rol
ds
cdq
cdq
push
or
pushf
push
add
mov
lds
xchg
dec
push
mul
xchg
add
pop
xlat
xchg
xchg
dec
test
xor
mov
aad
jg
inc
add
adc
(bad)
xchg
xlat
call
js
into
cmp
xchg
xchg
mov
xchg
jno
jo
jbe
jmp
adc
je
xor
jne
mov
cmps
fld
fist
mov
ret
xchg
inc
mov
pop
xchg
test
sbb
test
jbe
out
mov
xchg
in
add
stc
aas
rcl
cdq
pop
cmp
pop
inc
inc
push
daa
xchg
movs
pop
cmps
jg
and
xchg
ins
xor
nop
cli
mov
sbb
mov
gs
std
inc
ins
test
xchg
dec
dec
push
xchg
xor
sbb
test
push
mov
scas
not
jae
stos
xchg
mov
add
xor
mov
xchg
xchg
aas
push
adc
and
imul
xor
cmps
fadd
cdq
(bad)
xchg
fdiv
cmp
xlat
add
mov
ret
or
jb
idiv
mov
xchg
xor
enter
ds
inc
mov
rcr
sbb
xchg
adc
data16
jo
mov
imul
mov
xor
lea
xchg
add
mov
mov
sub
(bad)
xchg
jg
inc
sahf
(bad)
imul
xchg
push
fucomip
jecxz
xchg
mov
test
and
xor
repnz
aad
mov
adc
enter
pop
mov
add
bound
xchg
mov
cmps
jmp
mov
cmp
xor
pop
popf
add
xchg
mov
dec
mov
sahf
add
(bad)
xchg
and
dec
fwait
mov
aam
fsubr
lods
xchg
dec
shr
push
fist
xchg
leave
mov
mov
cmp
ss
push
xchg
imul
jmp
jle
je
(bad)
out
or
enter
retf
call
je
and
pop
shr
adc
pop
xchg
mov
daa
arpl
push
retf
ja
hlt
push
inc
cli
fwait
sub
and
add
push
fst
sub
or
push
fwait
mov
xchg
popf
cs
(bad)
arpl
ret
mov
jg
pop
pop
cwde
pop
lahf
in
push
xchg
inc
lock
mov
xor
call
aas
enter
ret
jl
adc
imul
(bad)
push
pop
dec
dec
xchg
(bad)
cmp
sub
daa
loopne
sbb
je
dec
xor
mov
push
inc
das
cmps
mov
add
ds
or
xchg
into
adc
popa
sbb
fs
inc
add
nop
int
jmp
adc
push
fldcw
cmp
xchg
add
cs
adc
dec
fcom
outs
fstp
inc
cmps
mov
pop
xchg
inc
fisub
retf
mov
mov
xchg
jno
mov
inc
xchg
dec
jmp
adc
xchg
ins
mov
inc
aaa
jnp
xchg
into
ret
sbb
pusha
mov
push
jo
cdq
in
fs
(bad)
ds
add
push
xchg
jbe
sar
jne
test
call
or
imul
adc
mov
lea
sub
or
imul
xchg
xchg
dec
inc
icebp
lods
inc
xor
and
mov
adc
xchg
lahf
pop
lods
repz
popf
push
push
xchg
(bad)
jnp
add
cs
in
xor
nop
aaa
xor
std
cdq
sub
or
mov
rcl
adc
pop
and
add
or
jmp
sub
out
sti
adc
fsubr
xchg
mov
pop
push
call
xchg
(bad)
pop
sbb
bnd
xchg
inc
scas
loopne
jg
xchg
push
xchg
mov
pop
(bad)
imul
add
in
cmp
sbb
dec
loopne
and
das
bound
inc
out
adc
sbb
cmp
mov
test
xchg
mov
sub
xchg
jmp
adc
jle
(bad)
mov
xchg
arpl
push
aam
mov
mov
cmc
mov
(bad)
jae
dec
xchg
ss
mov
pusha
mov
xor
sbb
sbb
ret
mov
repnz
xchg
mov
push
mov
enter
icebp
ja
cmps
(bad)
mov
xchg
sbb
sbb
push
ror
xchg
add
popa
(bad)
neg
or
xchg
fs
sbb
retf
mov
adc
inc
adc
mov
sub
aaa
sbb
xchg
add
mov
lds
jno
or
fld
rcl
int
xor
jns
mov
xchg
push
pop
jb
add
cwde
into
dec
inc
push
jnp
xchg
push
retf
xchg
lods
scas
add
loope
inc
jmp
mov
inc
and
(bad)
lea
and
jl
xchg
jne
pop
adc
ins
sub
pushf
xchg
shl
in
jp
jmp
dec
sbb
mov
and
jge
adc
bound
xchg
mov
out
xchg
jnp
outs
aaa
mov
push
xchg
shl
cld
dec
(bad)
sbb
adc
xchg
add
pop
hlt
loope
xchg
bound
xlat
cmp
mov
xchg
dec
or
xor
lahf
xor
fnstenv
rol
mov
mov
cdq
aad
mov
jne
arpl
mov
mov
mov
or
adc
(bad)
jl
xchg
into
pop
aas
sub
mov
or
pop
pop
inc
gs
js
and
mov
xor
sbb
out
mov
push
inc
in
js
rcl
ds
in
xchg
int
xchg
dec
fs
(bad)
fist
cmp
mov
and
add
les
retf
sti
popa
mov
in
shl
adc
sbb
or
xchg
cmp
gs
nop
cmp
in
xchg
pop
(bad)
(bad)
jns
jo
jp
mov
cs
push
in
mov
leave
stos
int
ficomp
fild
out
addr16
mov
jl
repnz
in
fwait
adc
dec
jb
ins
or
mov
jmp
(bad)
fiadd
xchg
sub
pop
dec
xchg
adc
xchg
int3
cdq
mov
bound
push
fwait
sar
iret
out
push
(bad)
js
test
push
repnz
adc
add
jne
nop
or
sub
inc
ja
adc
icebp
xchg
add
hlt
inc
cld
clc
sahf
add
add
mov
add
ss
xchg
adc
xchg
adc
xchg
cmp
cmp
add
test
push
or
dec
ins
popa
xchg
pushf
aaa
mov
cmp
mov
jge
loop
pop
push
sub
inc
adc
fnsave
jo
hlt
das
fstp
std
pop
sbb
jge
clc
sbb
push
sbb
lods
and
les
call
xor
dec
repz
cmps
push
mov
(bad)
lahf
xchg
fist
pusha
push
sub
cmps
scas
test
cmp
mov
les
es
xlat
shl
je
rol
sub
inc
gs
sub
adc
iret
or
xchg
push
sbb
cmp
cs
and
pop
xchg
adc
dec
sbb
jecxz
rcr
mul
cmp
int3
mov
cs
jge
push
and
ds
fcom
fstp
test
outs
adc
popf
push
clc
les
ret
fcom
cmps
lea
scas
pushf
mov
inc
or
adc
mov
fst
sub
repz
pop
push
xchg
mov
mov
lock
jmp
and
inc
xor
test
and
dec
push
lods
cdq
movs
nop
pop
push
push
in
loopne
jg
std
aam
ret
or
cmps
sbb
repz
xchg
adc
xchg
in
jnp
mov
ds
div
dec
jl
test
call
imul
cli
fnstsw
mov
inc
xchg
bound
sar
enter
xchg
outs
pop
ds
and
call
or
arpl
push
push
(bad)
inc
ins
or
out
cmp
adc
xchg
mov
mov
adc
xchg
pop
push
stc
loope
inc
pushf
mov
add
add
pop
aam
or
xchg
inc
inc
push
fwait
in
push
or
jl
mov
(bad)
xor
mov
retf
jbe
xchg
mov
loope
sbb
dec
mov
sar
imul
or
mov
add
pop
adc
xchg
or
int3
sbb
dec
int
fdivr
int3
xchg
fcom
and
mov
mov
add
mov
dec
inc
aam
and
fcom
call
adc
retf
sti
fiadd
mov
(bad)
fidivr
sub
sub
test
neg
call
nop
gs
lea
mov
mov
push
mov
lea
xchg
jae
sub
xchg
mov
(bad)
dec
push
xchg
out
mov
repz
jae
pop
adc
mov
(bad)
mov
div
push
fcomp
adc
fst
push
cdq
mov
into
dec
lods
add
xchg
in
mov
jmp
mov
retf
pop
or
ds
add
gs
ud2
icebp
xchg
dec
sbb
rcr
jo
pop
mov
jne
xchg
and
or
sbb
xchg
adc
pop
shl
int
addr16
ins
out
sbb
dec
aaa
inc
mov
int3
js
xor
mov
and
and
mov
xchg
sbb
test
push
mov
xchg
scas
(bad)
into
and
ins
icebp
fldenv
and
rcl
or
jmp
leave
jmp
sar
xchg
sar
ficomp
and
adc
retf
movhps
fisttp
cdq
loope
xor
leave
inc
hlt
mov
fwait
jle
sub
xchg
inc
jb
lock
or
or
lahf
mov
mov
clc
and
mov
and
pop
adc
adc
mov
lock
xor
popf
sbb
mov
mov
push
mov
sub
in
stos
push
clc
retf
xchg
and
push
adc
xchg
out
pop
dec
or
fld
inc
es
sbb
pusha
ficom
mov
xchg
sbb
xchg
aaa
xlat
sbb
mov
stos
xchg
add
int3
arpl
hlt
mov
push
xchg
(bad)
adc
mov
pushf
xchg
loop
xchg
mov
mov
xchg
rol
pop
test
cmp
jno
mov
dec
xchg
xchg
stos
fwait
scas
mov
in
xchg
cmps
mov
sbb
lahf
bound
or
xchg
sbb
pop
popf
rol
xchg
les
aaa
or
push
mov
mov
aam
mov
xchg
jge
mov
cmp
mov
xchg
mov
and
jmp
inc
outs
fcomp
mov
push
jp
(bad)
in
xchg
cmps
les
fs
repz
cmp
add
jbe
popf
call
xor
lock
xchg
mov
push
mov
push
and
xchg
xchg
imul
sub
shr
out
adc
shl
int3
dec
inc
bound
sbb
mov
cdq
mov
sbb
jg
icebp
lods
movs
hlt
add
popa
push
jl
sub
cwde
adc
es
imul
jl
outs
sub
out
std
pop
mov
mov
retf
out
xor
shl
in
push
inc
cld
shr
xor
add
mov
sub
xor
jne
iret
push
push
adc
jno
mov
jne
inc
cmc
(bad)
cmc
out
aas
dec
jnp
mov
call
not
call
cld
retf
stos
cmp
and
push
xchg
mov
ja
sbb
inc
mov
dec
iret
test
xchg
sbb
mov
jbe
call
(bad)
jmp
das
jae
pop
fldenv
es
out
stc
sbb
popa
cmps
sbb
xchg
ficomp
imul
fwait
mov
adc
xchg
adc
movs
retf
jecxz
adc
ret
sbb
inc
jns
adc
mov
mov
jg
push
bound
cdq
pop
cmps
call
xchg
aaa
repz
mov
or
jl
lock
fist
jne
pop
leave
xchg
loop
add
pop
xchg
cmp
repnz
xchg
fdivr
rcr
jl
outs
fnsave
loope
outs
ss
shl
add
adc
push
xchg
gs
jae
aas
pop
cmp
xor
jns
push
rcr
xchg
mov
push
xchg
ret
xchg
mov
loopne
or
push
or
jo
push
adc
add
mov
push
mov
aam
outs
and
mov
loop
adc
es
data16
in
pushf
outs
jnp
xor
fwait
movs
scas
shl
pop
push
in
mov
jo
repz
sbb
jle
dec
std
dec
leave
or
xchg
cmp
test
fcom
sar
xchg
out
mov
mov
pop
scas
pop
mov
xchg
mov
push
in
mov
(bad)
add
push
pop
adc
pop
sub
aas
xor
stos
adc
mov
push
loop
int3
out
(bad)
retf
dec
addr16
ret
mov
jae
dec
arpl
pop
movs
adc
and
mov
mov
fsub
cwde
adc
push
add
sub
mov
adc
jg
mov
daa
loop
je
adc
adc
idiv
cld
adc
add
mov
xor
xchg
fidivr
scas
sti
fistp
repz
test
mov
js
pop
aad
jnp
xchg
dec
ret
xchg
aas
call
aad
fwait
mov
jnp
adc
rcr
pop
fbstp
test
loope
inc
mov
cdq
pop
popa
ds
cdq
pushf
mov
add
push
mov
mov
dec
xchg
in
cdq
mov
cli
sti
add
and
aam
pushf
adc
(bad)
cmp
add
pop
test
xor
xor
xchg
pushf
ins
lods
ror
pop
stos
rol
iret
mov
ror
pop
mov
dec
bound
icebp
cmp
cwde
add
dec
xor
je
fmul
jp
hlt
mov
fwait
xchg
and
mov
test
xchg
mov
push
jne
cmp
pusha
mov
push
or
jle
xchg
cwde
or
cmps
scas
cmc
xchg
rcr
cmp
push
in
mov
jle
addr16
ret
xchg
pop
jb
mov
inc
fwait
cmps
nop
(bad)
idiv
jmp
hlt
cmp
push
mov
je
cli
add
and
mov
mov
xchg
fisub
js
in
stos
jl
inc
xchg
adc
imul
jns
arpl
or
push
lds
or
xchg
dec
push
mov
sub
xchg
cmp
mov
xchg
xchg
pop
loop
jp
xlat
xchg
lock
mov
pop
aaa
sub
fwait
in
das
daa
les
call
fmul
es
into
cwde
xchg
retf
push
(bad)
jnp
xchg
add
(bad)
cmp
aas
cmp
xchg
sbb
and
mov
cmp
inc
test
jo
pop
dec
jno
mov
out
(bad)
sqrtps
pop
dec
jnp
es
aad
cmps
ds
fwait
movs
xchg
adc
cmp
jecxz
push
fcom
xor
pop
lods
dec
lahf
lods
cmps
hlt
jae
sbb
pop
(bad)
push
movs
xchg
outs
xor
xchg
into
ja
icebp
inc
or
dec
xor
dec
fwait
dec
popf
add
cmp
fwait
sbb
rcl
xchg
ret
data16
dec
imul
jmp
test
mov
and
int
xchg
and
push
jl
inc
mov
and
adc
(bad)
fisttp
cdq
test
mov
jge
ret
fwait
inc
mov
xchg
loope
retf
or
iret
xchg
push
jecxz
dec
pop
mov
jne
push
or
mov
lahf
jl
cs
fadd
xor
clc
stos
mov
dec
cdq
inc
pop
xor
adc
(bad)
iret
jne
mov
jmp
mov
cmc
into
mov
or
xchg
adc
gs
loop
jg
add
retf
arpl
data16
push
int3
repnz
lods
push
test
and
out
adc
push
test
dec
cli
mov
and
cmc
jl
lock
and
nop
dec
inc
ror
cmp
test
or
push
stos
loope
adc
mov
xchg
aad
jl
mov
fiadd
outs
pop
adc
push
in
push
xchg
add
add
(bad)
push
pop
test
inc
cmps
iret
or
or
jl
mov
jb
sub
js
or
stos
addr16
mov
xor
sub
cmp
xchg
push
je
jecxz
or
xchg
mov
pop
aam
ja
and
xor
cli
xchg
pop
test
js
add
pop
add
xchg
loope
ins
xchg
xor
cmp
cli
and
icebp
enter
or
jno
adc
ror
adc
push
sub
xchg
push
int3
xor
ret
dec
xchg
cmps
pop
in
mov
dec
push
addr16
mov
ins
fst
ss
xor
cmp
shl
pop
cdq
dec
mov
loop
ds
jbe
fimul
in
xchg
dec
mov
inc
and
adc
jb
scas
daa
ss
add
cmp
gs
outs
xchg
out
inc
cmps
dec
mov
jne
arpl
inc
int
mov
je
popa
dec
add
dec
push
fld
xchg
in
inc
pushf
jno
push
mov
push
dec
bound
shl
mov
push
mov
retf
out
add
push
pavgw
inc
aas
ret
and
nop
push
scas
loop
dec
or
hlt
cmp
mov
sbb
xchg
adc
ret
sub
xchg
xchg
push
ror
pop
es
lods
nop
mov
cmp
dec
sbb
jecxz
xchg
ds
or
stos
mov
mov
pop
adc
movs
mov
add
int
xor
pxor
xchg
fsub
mov
popf
adc
and
pop
cmp
adc
cli
int3
push
es
adc
rcl
pop
das
jg
jb
xchg
(bad)
xchg
push
xchg
xchg
scas
sbb
dec
pushf
xchg
fwait
mov
jmp
sahf
cwde
aam
sbb
cmp
sbb
lea
inc
loope
adc
dec
mov
bound
add
jne
daa
mov
into
(bad)
xchg
pop
mov
cmp
add
jbe
adc
test
mov
xor
pop
mov
sub
test
xchg
jno
in
push
cmp
popf
xchg
arpl
pop
and
cmc
loop
jl
xchg
pop
sub
sub
sbb
popf
icebp
imul
pop
pop
mov
cld
xchg
pusha
mov
fidiv
outs
cmp
xor
aam
cwde
and
jle
imul
jl
dec
dec
xor
das
out
dec
repnz
adc
hlt
call
xor
out
jge
sbb
ins
jno
mov
add
nop
jle
dec
sub
cld
pop
ins
xor
outs
loop
sub
shl
fwait
mov
in
lea
jnp
ins
sbb
jl
mov
adc
aam
rol
cmps
retf
cmps
add
mov
ss
hlt
jnp
fmul
(bad)
and
sub
not
mov
leave
aad
xor
out
rcl
xchg
inc
add
rcl
test
xchg
sub
arpl
xchg
push
and
sub
(bad)
fistp
fstp
scas
cmp
cs
pop
xchg
jnp
jae
fwait
imul
mov
fild
int3
xchg
jbe
jae
imul
icebp
int
repz
xchg
inc
ins
and
test
rcl
xchg
adc
push
rcl
xchg
scas
xor
or
loopne
and
fadd
(bad)
xchg
enter
out
jne
sbb
sub
cmp
and
fcmovnu
mov
mov
fisub
xchg
xchg
cmp
and
xchg
cdq
test
test
xchg
cmp
arpl
nop
icebp
jne
mov
movs
scas
or
push
mov
(bad)
aam
shl
mov
mov
cli
push
push
sub
clc
loope
sub
daa
xchg
or
sbb
fs
ret
retf
sahf
fwait
lods
daa
cmps
push
int3
aaa
fisttp
ins
mov
mov
jecxz
inc
push
nop
pop
(bad)
es
and
test
and
xor
cdq
mov
cmp
adc
jno
mov
les
mov
dec
fwait
mov
dec
ins
xchg
or
add
jle
xchg
mov
jb
test
push
repz
cmp
add
xchg
cli
pusha
test
inc
fst
mov
pop
pavgw
adc
pop
jae
mov
loopne
xchg
retf
mov
lahf
or
in
out
jae
std
mov
dec
shl
ror
inc
js
push
xchg
and
fld
sbb
sbb
(bad)
xor
xchg
mov
sbb
out
mov
mov
cld
int3
or
dec
movs
push
cmps
mov
push
jmp
pusha
jle
jbe
cmp
jae
sub
aaa
jecxz
lock
ja
lods
fwait
bound
xchg
fist
mov
cwde
aaa
dec
stos
xchg
pop
adc
jbe
sbb
push
enter
fiadd
push
xchg
stos
adc
(bad)
jle
ja
xchg
jmp
dec
push
in
sti
xchg
lahf
mov
jnp
push
fdiv
add
aas
mov
lods
mov
cmp
out
add
dec
imul
(bad)
sbb
test
jle
pop
xor
xchg
mov
xchg
js
cwde
not
sbb
jle
jle
xchg
xchg
push
sbb
outs
xchg
pushf
es
hlt
pop
mov
xchg
sete
cdq
sbb
dec
fwait
pushf
scas
(bad)
sbb
test
int
data16
mov
fstp
rcl
xor
lods
or
iret
sub
cmps
or
lds
inc
mov
lock
mov
xchg
push
xchg
mov
cmps
not
pop
adc
add
sbb
fld
sahf
and
ror
cwde
mov
adc
add
std
xchg
push
shl
fidiv
sub
pop
(bad)
fistp
data16
adc
adc
adc
and
mov
or
xor
pop
push
ror
es
pop
repz
stos
call
fwait
cmp
xor
push
cs
and
sub
int3
movs
push
push
call
enter
fwait
pushf
lds
fsub
wbinvd
and
cdq
jbe
add
fwait
aam
adc
stc
pusha
hlt
aas
sbb
mov
pop
dec
xor
pop
mov
(bad)
sbb
xor
dec
xchg
popf
stos
jl
clc
ins
xor
add
mov
call
pop
cs
jecxz
pop
pushf
and
iret
rol
mov
push
pop
inc
xor
adc
dec
(bad)
adc
push
xchg
clc
xchg
inc
popf
or
lahf
popf
int
adc
in
sub
push
call
addr16
test
push
push
pop
add
js
xchg
retf
jg
mov
pop
mov
stc
xchg
xor
aas
pop
add
cld
lods
loop
test
mov
mov
ret
jae
push
mov
push
inc
movs
jl
stos
mov
cli
xor
xlat
pop
and
lods
stc
add
mov
jl
or
xchg
mov
mov
(bad)
sub
mov
add
adc
ins
xor
fnstsw
loopne
cmps
push
xchg
dec
mov
mov
xchg
add
fild
xor
sub
mov
out
or
in
cmp
dec
mov
imul
mov
(bad)
fst
jmp
lock
shr
cmp
jbe
ins
in
fst
adc
add
sub
lahf
test
adc
xor
mov
adc
dec
hlt
cli
cli
hlt
out
in
mov
add
adc
xchg
xchg
jne
mov
inc
xchg
dec
in
sub
cwde
push
xchg
mov
ins
push
leave
repnz
push
mov
hlt
add
jnp
cmc
xchg
adc
xlat
pop
add
or
adc
retf
cmp
mov
imul
test
fild
adc
jge
(bad)
lock
xchg
ins
pop
push
sbb
xor
(bad)
xchg
mov
mov
adc
js
ds
sti
xchg
adc
popf
inc
dec
fwait
xchg
imul
test
pop
sbb
ss
or
sub
xchg
ret
cwde
mov
xchg
push
(bad)
aam
ds
xchg
sbb
out
popf
adc
mov
sub
sahf
push
xchg
cwde
xchg
pop
in
outs
ror
fwait
ja
ins
call
pop
xchg
shr
cmp
and
jnp
add
xchg
cmp
in
(bad)
xchg
inc
stos
out
or
ret
sub
sbb
cmps
and
and
adc
adc
js
(bad)
xchg
retf
push
ficom
xchg
xor
adc
test
and
xchg
sbb
addr16
fld
sbb
mov
rcr
test
int
pop
xchg
sbb
hlt
dec
add
jge
leave
lods
mov
mov
int3
ret
cmc
push
pop
rcl
xchg
mov
daa
jmp
mov
sti
rol
or
add
xor
cmp
test
cmp
in
mov
test
fs
pop
lods
jmp
and
cmps
push
jge
test
int3
xchg
shr
repz
xchg
adc
xchg
(bad)
xchg
inc
stos
xor
xchg
into
out
imul
cmp
mov
sar
push
call
ja
sbb
arpl
daa
call
xchg
je
por
(bad)
ins
call
mov
xlat
cmps
(bad)
hlt
pop
in
adc
jp
xor
mov
inc
jbe
xchg
movs
cmp
rol
jmp
stos
xchg
xchg
(bad)
cmp
pop
dec
mov
mov
(bad)
sbb
rcl
push
int3
mov
ficom
js
push
lahf
jbe
rep
xchg
mul
xchg
sbb
or
mov
test
imul
sti
xchg
out
pop
aaa
inc
pop
mov
ror
mov
enter
ret
xchg
cmps
cdq
and
xor
sbb
adc
jmp
cs
jge
cmp
movs
int
les
push
adc
xchg
jno
dec
cld
jns
lds
mov
xor
cmp
dec
ins
or
push
mov
push
ficomp
xchg
test
ds
mov
adc
xchg
into
out
jne
dec
enter
mov
arpl
add
adc
inc
add
icebp
jp
xchg
mov
add
or
in
jo
js
outs
movs
sti
lahf
repnz
imul
xchg
(bad)
jmp
xchg
adc
push
stc
add
xchg
repz
adc
xchg
cmp
pop
cwde
mov
lahf
xchg
(bad)
or
pop
in
cmove
xchg
hlt
pop
adc
cmps
xlat
jmp
mov
mov
adc
xchg
sbb
sbb
dec
mov
mov
test
fstp
arpl
and
xchg
inc
xchg
std
or
pop
mov
adc
mov
das
xchg
(bad)
ins
addr16
into
mov
xlat
push
movs
fwait
shl
lods
popa
gs
dec
ins
js
mov
pop
bound
lahf
xchg
mov
pop
jns
cwde
or
mov
push
in
mov
sub
adc
add
sar
mov
inc
push
xchg
loop
push
mov
xchg
test
cmp
fcom
std
lds
xor
loopne
push
repnz
xchg
into
shl
push
imul
xchg
dec
loop
cmp
xlat
mov
dec
cmps
les
push
fs
and
xchg
shufps
cmp
jmp
inc
adc
lahf
sti
add
not
lods
cmp
fidiv
and
cmp
inc
mov
mov
inc
enter
mul
in
jmp
aad
lods
push
mov
mov
(bad)
das
fist
push
cs
xchg
pusha
test
ja
mov
fwait
(bad)
adc
fidiv
ss
sbb
xchg
jp
std
movs
inc
test
add
jl
fbstp
dec
(bad)
xlat
retf
sub
xchg
repnz
in
mov
add
xchg
loop
xchg
inc
mov
aaa
push
xchg
mov
jmp
fwait
xchg
or
cmp
cmp
fist
mov
je
lods
sti
mov
test
jle
cwde
xchg
mov
(bad)
out
push
out
loopne
add
aaa
cmp
mov
das
inc
jmp
sbb
push
xchg
movs
aam
call
stos
addr16
xchg
push
push
cwde
je
out
xor
loopne
cmp
mov
push
mov
add
mov
data16
xchg
mov
adc
xchg
pop
fsubr
lds
add
xchg
int3
pop
adc
mov
dec
xchg
or
ror
mov
push
push
xchg
ins
pop
adc
rcl
fild
nop
jno
ret
fldenv
mov
je
adc
adc
out
xor
mov
call
and
adc
or
mov
inc
xchg
push
(bad)
fstp
sbb
inc
xchg
in
or
adc
mov
iret
int
sub
xor
cmp
inc
nop
cmp
loopne
xchg
jo
bound
aad
sahf
add
cmp
nop
jb
in
ror
sti
xchg
jae
pop
test
xor
xor
outs
inc
test
shl
inc
cmp
xchg
xchg
div
cmp
inc
pop
jbe
xchg
pushf
mov
inc
adc
dec
mov
imul
rcl
xchg
jo
adc
nop
fcom
loopne
adc
push
in
cmp
pop
test
enter
hlt
dec
mov
xchg
jg
ret
outs
loope
cmp
mov
shr
(bad)
xchg
in
mov
movs
fst
aas
mov
lods
pop
les
and
jnp
outs
cwde
jo
inc
mov
push
xor
cld
int
shl
sbb
jl
xchg
stc
sbb
aam
cmps
adc
push
xchg
or
xchg
or
adc
mov
adc
xchg
and
bound
ja
gs
adc
ret
cmps
cwde
lea
adc
mov
xchg
ds
adc
je
xchg
jg
psrlq
pop
scas
mov
je
dec
sub
test
fist
and
xor
add
lds
jb
pop
xchg
jmp
mov
(bad)
out
and
or
fistp
or
out
inc
mov
rcr
repz
cdq
push
hlt
mov
jge
and
push
fwait
cwde
je
mov
mov
jge
inc
xchg
and
inc
pop
cmps
cli
jno
mov
xchg
(bad)
out
dec
inc
mov
push
lods
jae
aaa
mov
dec
cld
movs
stos
rol
mov
out
mov
pmaxsw
dec
adc
jl
lods
cs
gs
pop
cmp
mov
sbb
xchg
loop
push
sub
jle
imul
gs
adc
fnsave
xchg
xchg
fs
rcl
cli
lds
popf
outs
mov
jge
add
jb
not
add
gs
(bad)
out
mov
xchg
(bad)
cs
jp
xchg
sbb
loopne
mov
push
xor
mov
(bad)
xchg
sub
ror
xor
and
ins
je
or
pop
scas
mov
xchg
xchg
(bad)
shr
inc
sbb
test
sub
dec
xchg
je
shr
bound
mov
aam
mov
dec
loop
enter
bound
sbb
mov
xchg
aaa
fsubrp
add
clc
or
xchg
mov
retf
cmps
dec
jne
hlt
jae
push
xchg
pop
adc
mov
stc
push
mov
out
push
jp
cmps
or
iret
adc
cmp
test
mov
sub
pop
call
bound
in
jns
(bad)
hlt
test
and
out
mov
ds
mov
hlt
pop
push
jle
jmp
lahf
jnp
and
add
xchg
sbb
dec
test
push
adc
scas
push
adc
mov
xchg
ret
push
into
lods
ins
es
out
jmp
popa
or
cmp
dec
test
xor
mov
retf
mov
xor
ds
adc
cs
jge
les
mov
ins
or
cmc
push
push
xor
and
adc
mov
mov
sbb
xchg
mov
or
push
das
cmp
shl
push
daa
(bad)
call
ror
adc
inc
add
xchg
or
das
arpl
sbb
push
xchg
(bad)
addr16
mov
inc
mov
mov
xchg
cmp
add
nop
iret
xchg
pop
jae
lea
jg
cmp
adc
push
add
js
and
push
xchg
clc
push
addr16
xchg
sub
and
push
pop
shr
mov
cmps
hlt
ficom
(bad)
and
jbe
outs
xchg
xchg
test
sti
mov
push
or
add
std
rol
xchg
push
inc
jecxz
dec
and
and
xchg
or
push
sub
pop
loop
xchg
clc
js
data16
mov
jae
mov
xchg
shl
push
js
adc
test
jnp
jecxz
and
and
adc
xchg
mov
loopne
(bad)
jno
mov
je
out
push
lock
jb
stos
or
xor
mov
xchg
fisttp
jle
(bad)
fadd
inc
xchg
mov
xchg
or
dec
test
(bad)
jg
scas
das
cwde
ins
movs
push
frstor
fadd
loop
xchg
xor
jge
sub
push
nop
jnp
lahf
hlt
push
stc
(bad)
iret
(bad)
push
les
je
imul
or
inc
mov
imul
add
jle
lods
mul
xchg
sbb
xchg
cmps
das
ret
lock
xchg
addr16
fistp
scas
cmp
push
xchg
ds
sub
add
xchg
adc
push
(bad)
mov
sub
cmps
pop
xchg
adc
xor
xchg
cmp
rcr
lock
fdivr
lods
xor
es
clc
loop
jo
add
loopne
movs
mov
jmp
inc
cmovle
in
mov
nop
push
sbb
(bad)
sub
sbb
xchg
mov
ror
sub
popf
lahf
dec
jge
cs
mov
mov
pop
pop
adc
dec
inc
pop
lods
sbb
adc
and
mov
push
pusha
xor
jl
cli
not
jecxz
pop
dec
pop
adc
lods
add
cld
cwde
mov
hlt
fbld
repnz
jl
push
sbb
pop
sbb
in
in
(bad)
jae
mov
or
push
icebp
cmps
(bad)
xchg
xor
jmp
sbb
cmp
scas
push
repnz
fild
mov
punpckldq
sahf
pushf
jge
mov
sbb
stos
test
push
pop
pop
xor
sti
jmp
sahf
inc
sbb
sti
scas
xchg
or
mov
fsubrp
dec
mov
xor
clc
adc
dec
les
mov
mov
sbb
loop
mov
push
fwait
es
xchg
mov
mov
adc
jge
dec
xchg
retf
sbb
inc
or
nop
cmp
push
sbb
and
pushf
call
cwde
jge
or
gs
sub
jp
imul
lods
test
xor
lods
and
xor
fistp
(bad)
movs
mov
mov
test
test
adc
dec
sahf
mov
js
vpaddusb
push
adc
xor
dec
jne
(bad)
xchg
add
or
xchg
cmp
repz
sahf
push
adc
xchg
loopne
add
inc
push
cs
mov
inc
shl
push
sbb
sbb
pushf
sahf
xchg
aas
xchg
call
sbb
mov
jbe
xchg
test
mov
fwait
fwait
shl
mov
test
adc
lahf
jmp
or
cmps
ret
sar
push
sbb
hlt
ins
push
imul
mov
mov
jecxz
aam
(bad)
ficom
ds
fmul
and
mov
jmp
fisubr
loope
sahf
aad
stos
or
(bad)
mov
cmp
(bad)
iret
sti
cli
adc
dec
mov
rol
out
xchg
les
imul
push
repz
mov
retf
add
not
js
xchg
or
mov
pushf
je
xor
dec
jo
cmp
mov
adc
and
add
xchg
fwait
xor
test
or
xchg
aam
or
mov
sub
inc
dec
dec
push
rcr
popf
retf
add
cld
(bad)
fcom
fwait
nop
aaa
cs
dec
mov
fwait
ja
aas
mov
arpl
aad
jo
cli
out
push
rcr
aaa
ss
mov
scas
cmp
out
jbe
imul
hlt
sub
std
xchg
js
or
je
enter
pushf
jns
cld
push
dec
fmulp
mov
push
sub
ds
stc
mov
(bad)
and
xor
sbb
out
div
xchg
bound
mov
inc
(bad)
imul
aaa
sub
cmp
dec
lea
jecxz
outs
div
(bad)
or
fwait
dec
jb
mov
mov
jbe
adc
mov
retf
xchg
xchg
xor
inc
inc
sub
xchg
xchg
mov
aad
fiadd
inc
(bad)
xchg
xchg
jnp
mov
cmc
jae
xchg
stc
inc
add
mov
mov
pop
xchg
sub
gs
and
iret
ss
(bad)
pop
dec
xchg
xor
xchg
inc
pmulhw
and
retf
out
fld
shr
out
pop
cmps
mov
dec
mov
pop
inc
and
clc
ins
sub
lahf
xchg
popa
mov
in
and
nop
xchg
pusha
xchg
mov
xor
xchg
pushf
push
cmps
mov
and
xchg
clc
in
(bad)
loopne
cmp
sub
xchg
sub
inc
mov
lock
out
mov
xchg
inc
mov
mov
sbb
lds
and
pusha
xchg
dec
dec
pop
dec
jnp
out
xchg
push
pop
iret
lahf
outs
xchg
mov
shl
out
retf
xchg
push
das
cmp
inc
int3
and
xchg
sbb
enter
and
xchg
test
fld
(bad)
lods
ret
ror
int3
rcl
add
xchg
sub
ret
push
xchg
push
sbb
xchg
pop
gs
xchg
fwait
dec
push
xchg
sbb
jge
mov
iret
mov
cld
scas
repz
pop
jl
out
push
dec
mov
pop
dec
movs
loopne
push
ret
push
push
imul
sub
loop
mov
fldenv
cs
xor
rcr
hlt
pop
(bad)
outs
hlt
xchg
(bad)
mov
rcl
data16
mov
sahf
xchg
mov
inc
std
or
pop
shl
sub
data16
jl
aaa
dec
push
or
cld
lock
in
aam
icebp
sbb
jbe
adc
pop
ret
xor
mov
enter
xchg
nop
mov
jl
hlt
dec
and
mov
mov
xchg
xor
jl
out
aam
lock
in
cmc
in
mov
inc
mul
cmc
sbb
pop
adc
rcl
fst
fldenv
mov
inc
(bad)
cmps
retf
pop
dec
bound
or
mov
jae
sbb
xchg
pop
inc
add
mov
(bad)
not
rcr
push
xor
mov
pop
int3
outs
or
xor
dec
imul
test
sub
mov
out
add
mov
(bad)
pop
retf
mov
sbb
shr
and
lahf
inc
sbb
xor
loop
fsubp
xchg
int
mov
sbb
jbe
mov
mov
rep
aaa
gs
enter
fdivr
clc
jge
neg
jno
ins
dec
leave
xchg
shr
int
test
add
jle
xchg
test
movs
scas
lahf
js
cwde
call
sbb
push
add
push
cdq
push
xchg
mov
add
(bad)
mov
lods
mul
mov
fcom
aas
shr
sub
aam
movs
mov
add
mov
aas
xchg
in
ja
mov
jle
xchg
or
pop
and
(bad)
xchg
lock
test
loope
and
inc
ins
ins
cmps
xchg
pop
sub
xor
xchg
xchg
cmps
fisttp
test
lods
leave
mov
adc
cmp
ins
pop
mov
pushf
cli
push
mov
add
retf
xchg
dec
test
xor
cmp
xor
xor
repz
cwde
sbb
push
mov
fidiv
or
sbb
ret
xchg
xchg
jns
push
pop
sahf
cmp
xchg
jnp
lods
call
xchg
retf
jecxz
test
xor
(bad)
jmp
mov
cld
or
push
dec
cmc
xchg
push
fstp
or
hlt
inc
sbb
sti
inc
push
xchg
xchg
ja
ror
daa
out
xchg
push
pop
and
xchg
ins
out
test
fcomp
jmp
mov
and
es
adc
inc
push
int3
jl
ret
xchg
cmps
xlat
mov
push
cdq
clc
sub
retf
jmp
lock
mov
or
push
jae
mov
jmp
aam
retf
ins
imul
gs
lahf
push
aas
mov
imul
sub
fisttp
movs
daa
retf
repz
inc
push
scas
xchg
adc
push
pop
inc
test
in
push
xchg
xor
jl
adc
(bad)
mov
sub
adc
mov
jl
xchg
mov
cmps
paddusw
cmc
push
outs
ss
test
in
pop
(bad)
mov
popa
push
int
xor
retf
adc
mov
icebp
pop
(bad)
sar
(bad)
xchg
mov
and
fidivr
and
mov
mov
pop
xchg
push
sbb
mov
mov
pusha
call
sahf
ins
enter
xchg
fwait
imul
cmp
push
stos
xor
ds
and
shl
not
scas
iret
out
inc
pop
shl
push
pushf
jge
das
adc
stos
rol
scas
fsub
rol
xchg
mov
and
mov
cmp
push
jl
adc
xchg
dec
jge
test
repz
mov
xchg
push
xlat
idiv
cmc
cmp
aad
cmp
jae
sti
jmp
rcl
xchg
cmps
jne
out
xchg
js
mov
enter
(bad)
xchg
lods
mov
rcr
cmp
fwait
in
xchg
adc
cs
xor
add
xchg
sub
imul
mov
mov
and
xor
cld
dec
add
adc
(bad)
cld
in
dec
and
xchg
addr16
push
cli
adc
repz
aad
push
mov
sub
push
mov
xchg
jbe
out
push
pop
mov
push
jle
xchg
jae
sahf
mov
sub
stos
pop
test
and
or
cdq
mov
nop
mov
add
inc
push
and
mov
jno
cmps
jge
xchg
inc
xor
fdiv
in
nop
mov
xchg
push
cmp
int3
jge
pop
xor
add
das
cmp
push
imul
adc
(bad)
mov
dec
jns
jo
mov
fwait
loop
jae
xchg
inc
adc
shr
in
nop
fstp
dec
hlt
lock
gs
jl
inc
inc
push
or
sbb
cmps
jge
mov
xor
repnz
in
aaa
(bad)
jge
jge
adc
lods
and
cmps
adc
aaa
cmc
adc
cli
sbb
std
and
icebp
lods
retf
clc
ins
xchg
push
jne
push
popf
(bad)
outs
test
int
arpl
xchg
fstp
cld
lods
aam
xor
push
out
stos
and
add
imul
jne
shl
pop
and
nop
es
mov
cmps
xor
fwait
or
ins
repz
lahf
pushf
inc
jge
in
stos
jl
sub
sti
enter
jle
xchg
sbb
dec
lock
repz
and
mov
out
pop
xor
test
in
push
lods
dec
sbb
cmp
adc
jecxz
jge
cmp
jl
clc
std
sahf
jmp
sbb
aad
imul
xor
shl
pop
mov
jl
jge
in
test
shl
mov
arpl
xchg
dec
push
dec
xchg
inc
add
and
rcl
mov
xchg
faddp
test
push
xchg
or
test
je
ins
(bad)
xchg
fwait
mov
adc
adc
out
icebp
mov
adc
xchg
aam
ds
(bad)
dec
jecxz
test
loop
xchg
sub
push
dec
cmp
push
pop
cmps
out
movs
mov
xchg
sbb
xchg
sbb
bnd
cdq
or
xchg
bound
pop
aad
jae
sbb
test
retf
add
adc
(bad)
popf
xchg
cdq
aas
mov
jb
outs
push
and
jno
loop
mov
dec
int3
(bad)
js
mov
mov
dec
mov
sbb
leave
int
xor
test
cmp
xor
cmp
test
push
xchg
cld
dec
jl
and
pop
xchg
xchg
aad
daa
xor
icebp
push
idiv
jbe
pop
sbb
mov
popa
push
xor
and
push
and
adc
pusha
mov
push
stos
jmp
mov
xchg
std
sub
jnp
jp
xlat
adc
stos
xchg
mov
outs
pop
ficom
data16
xchg
adc
mov
imul
adc
xchg
adc
(bad)
xchg
push
mov
inc
add
xchg
mov
xor
mov
mov
(bad)
int3
xchg
mov
xor
xor
mov
div
call
out
mov
inc
mov
repz
and
xchg
fbld
xchg
or
out
lea
arpl
aam
shr
cld
int3
jmp
test
cmc
mov
xchg
aad
push
dec
xchg
inc
xchg
add
jb
retf
jae
sbb
mov
push
data16
jbe
out
push
xchg
sub
push
cmps
mov
lods
rcl
pop
retf
mov
cmps
pop
and
sub
xchg
cmp
(bad)
aam
ja
mov
xchg
call
loop
fsubr
mov
pop
add
xchg
mov
pushf
xchg
push
fwait
sub
cdq
jae
call
mov
cmp
xchg
cmp
jmp
lea
adc
cmp
sbb
jg
icebp
adc
add
mov
hlt
stos
cmp
push
loope
mov
mov
outs
or
aam
adc
in
sahf
addr16
pop
fidivr
mov
mov
xchg
test
sar
(bad)
retf
movs
dec
js
xchg
and
fild
leave
or
mov
xor
or
rol
addr16
sbb
mov
mov
adc
pop
xchg
int
std
shl
mov
cmc
or
push
out
iret
jmp
jo
int3
fisub
cwde
loopne
test
mov
stos
in
addr16
adc
in
imul
(bad)
xchg
imul
pop
ficom
pop
in
imul
lods
dec
ds
xor
out
xchg
(bad)
mov
test
xchg
cld
(bad)
out
std
pusha
and
lods
(bad)
sbb
(bad)
or
mov
push
pop
inc
push
stc
push
cmp
aaa
fsub
nop
dec
cmc
mov
fdiv
ror
test
(bad)
push
jmp
lods
cmps
jge
push
aas
mov
add
loop
jle
xchg
int3
pop
xor
jl
fwait
dec
lods
sub
cld
push
and
lods
xor
push
dec
lods
rol
fsub
adc
(bad)
aad
ror
test
hlt
popa
sbb
xchg
push
lea
pop
int3
adc
shr
xor
mov
cld
push
into
or
lahf
cli
jl
or
xchg
sub
jmp
inc
adc
imul
popf
sub
adc
scas
aad
aad
pop
and
mov
or
adc
mov
sbb
fimul
sub
sahf
sub
jl
add
nop
mov
and
popf
rcr
jge
mov
test
dec
pusha
and
jno
add
pop
pop
iret
fs
out
jle
push
jb
sbb
xlat
adc
dec
ins
sbb
jle
dec
lea
call
cli
push
cmp
mov
imul
lahf
jns
sbb
mov
in
sbb
cld
stc
inc
int3
dec
das
sub
popf
jg
cmp
jl
xor
fidiv
dec
sub
js
push
add
fsubr
rcr
popa
pop
mov
xchg
jmp
sbb
movs
pop
inc
(bad)
rcr
mov
fstp
ja
ret
ss
cwde
mov
push
dec
es
pop
es
xchg
sbb
dec
sub
test
xchg
jmp
bound
sub
xchg
std
stc
bound
cs
mov
push
add
sub
sar
pop
xchg
dec
pop
in
pusha
leave
test
je
push
sub
xchg
(bad)
mov
adc
in
dec
stos
imul
es
push
cmps
add
xchg
call
cmp
fcmovb
sbb
mov
sbb
mov
test
stos
dec
idiv
daa
nop
into
xchg
mov
movs
fwait
pop
aaa
dec
repnz
aam
outs
not
mov
clc
cmp
in
xchg
out
hlt
mov
mov
sub
xchg
adc
inc
shl
shl
lahf
push
outs
in
lock
or
je
fdiv
inc
push
cli
xchg
stos
div
pop
mov
dec
sbb
mov
mov
inc
scas
ins
ds
fdiv
add
std
mov
mov
jg
sbb
pop
cmovbe
imul
adc
int3
sahf
inc
call
dec
mov
jo
fwait
mov
xlat
fcom
lea
dec
inc
aam
mov
scas
es
loop
jp
add
repnz
lods
dec
jbe
js
mov
or
ret
or
lea
(bad)
cmp
mov
je
mov
xchg
inc
cdq
into
pop
(bad)
cmc
cmp
jmp
test
(bad)
out
iret
inc
(bad)
xchg
je
sbb
sub
push
add
pushf
mov
jle
xchg
aas
jecxz
test
push
mov
ret
push
fs
xchg
arpl
lahf
xor
in
pop
xor
pop
xchg
es
outs
aaa
xor
sub
lods
xlat
xchg
inc
mov
xor
mov
sbb
test
int
or
inc
mov
rcl
hlt
and
dec
sahf
je
mov
enter
xor
xchg
jecxz
ret
jnp
nop
popf
repz
lds
popa
outs
xchg
dec
ficomp
mov
mov
pop
push
or
push
shl
outs
xchg
cmps
lods
dec
test
nop
aad
not
enter
js
jne
retf
arpl
xor
fwait
ja
imul
not
out
out
pop
xor
sbb
lds
push
sub
xlat
mov
mov
(bad)
ror
mov
or
(bad)
xchg
pop
repz
movs
out
(bad)
xchg
jnp
xor
ror
mov
sub
lahf
or
rcl
cwde
pop
icebp
push
xlat
or
xor
lods
mov
in
movs
out
test
dec
or
jb
ror
es
xchg
xchg
invd
loopne
inc
rcl
adc
xchg
mov
out
dec
outs
inc
hlt
rol
or
les
cmp
push
loopne
add
pop
jb
or
jle
jg
rcl
hlt
xchg
fidivr
ficomp
popf
or
jae
in
jne
ficom
popa
or
pop
movs
xor
mov
(bad)
fcom
xlat
mov
xchg
ins
and
push
xor
(bad)
xchg
push
je
push
sub
pop
xchg
shl
rcl
fist
out
jno
cmp
and
adc
les
nop
or
inc
leave
dec
test
in
mov
gs
inc
lahf
mov
out
xchg
jb
push
(bad)
jmp
jp
sbb
adc
gs
dec
pushf
mov
movs
push
aad
int
in
les
data16
ds
cld
xchg
sbb
jge
jl
mov
and
je
mov
add
xchg
sbb
inc
mov
xchg
(bad)
out
push
ror
xchg
inc
mov
lds
and
adc
aam
add
sti
stos
imul
fwait
les
lds
pop
outs
mov
mov
push
inc
push
adc
inc
or
push
push
repz
xchg
mov
sbb
fstp
cmp
(bad)
inc
or
dec
adc
stos
mov
add
xchg
sub
ss
xchg
int3
cld
xchg
test
add
push
les
sbb
fwait
jge
rol
lds
dec
cmp
jns
lods
push
iret
jle
jge
in
mov
sbb
leave
retf
push
or
je
xchg
jle
frstor
loopne
jmp
add
out
in
mov
cmp
cmps
dec
pop
scas
mov
hlt
int
sub
mov
or
mov
stos
aaa
dec
(bad)
mov
test
dec
xchg
call
pushf
inc
les
adc
add
add
push
pop
xchg
ror
xor
xchg
dec
aam
jns
mov
mov
sbb
repnz
hlt
mov
popf
aaa
jp
xchg
mov
fsubr
mov
lods
xchg
inc
mov
pop
xchg
push
sub
(bad)
icebp
test
ficom
stos
scas
not
sub
lahf
(bad)
mov
push
adc
jmp
or
xlat
pop
jae
les
fwait
cmp
loop
xchg
icebp
fcomp
or
inc
and
xchg
sbb
cmp
xchg
shl
sbb
and
xchg
loop
aaa
cmp
cdq
push
xor
loope
xchg
sqrtps
mov
call
xchg
add
je
xchg
jecxz
cmps
(bad)
cmps
test
sbb
lahf
xchg
rol
aaa
stc
add
pop
nop
aam
cmc
mov
into
test
dec
xchg
shl
mov
xchg
jno
cli
(bad)
add
xor
sbb
dec
test
call
lock
xchg
inc
aad
pop
push
fucom
dec
xchg
rcl
adc
push
movs
xchg
sub
or
in
pop
mov
and
xchg
retf
mov
retf
fcomp
xchg
test
push
adc
gs
inc
cmp
and
push
outs
mov
mov
enter
(bad)
or
jl
loop
sbb
cs
int
in
pop
sub
clc
mov
ret
jmp
adc
xchg
repz
rcr
mov
jns
cli
addr16
or
pop
lea
popa
dec
cmps
lock
fs
or
lea
push
jmp
inc
es
and
mov
xor
scas
adc
jl
call
clc
push
es
pop
and
sbb
jl
scas
xchg
shl
cmp
sub
sbb
ror
inc
pushf
out
cmp
das
sub
jge
nop
xor
mov
or
mov
in
mov
into
jns
int3
and
jp
out
adc
cmp
lods
jp
mov
repnz
(bad)
mov
mov
mov
enter
arpl
or
call
inc
cs
jle
hlt
test
mov
std
adc
and
or
mov
js
pop
cli
lods
test
dec
hlt
mov
fdiv
mov
data16
add
fmul
pcmpeqd
pop
popf
adc
pop
in
lods
mov
outs
loop
pushf
xchg
popf
jge
ja
movs
jmp
sub
push
test
je
sbb
fsub
xor
fadd
loope
cld
inc
popf
mov
mov
rol
pop
xchg
aad
shl
and
ficomp
or
cmp
mov
imul
outs
adc
push
fdivr
xchg
lea
unpckhps
ins
sbb
and
inc
dec
lock
loope
iret
add
inc
arpl
and
mov
ss
es
sub
xor
mov
inc
sbb
pop
retf
sub
loope
jae
mov
mov
call
pop
test
(bad)
call
pop
mov
cmp
(bad)
cmps
jge
lea
in
inc
push
hlt
mov
and
imul
sbb
xor
fnstenv
nop
jmp
test
jge
adc
outs
adc
mov
mov
outs
das
call
mov
xchg
sahf
xor
lea
hlt
jmp
repz
and
mov
mov
in
push
mov
es
mov
scas
cli
outs
imul
mov
adc
fsub
and
(bad)
push
and
sub
and
int3
jge
aad
jne
cmp
and
inc
ret
xchg
xchg
xchg
int3
dec
fs
push
jno
xchg
(bad)
add
adc
sbb
stos
xchg
lock
jle
popf
sub
ss
fisttp
xor
lahf
push
push
hlt
pop
mov
cld
iret
ja
shl
sbb
loopne
ins
movs
mov
mov
xor
mov
xchg
(bad)
inc
sub
out
data16
sbb
bound
dec
xchg
nop
cld
push
std
add
faddp
imul
pop
adc
mov
cdq
hlt
pop
pop
sbb
in
adc
hlt
sbb
push
fwait
dec
pop
cli
and
imul
mov
clc
out
and
xchg
pop
xor
xor
enter
mov
scas
jae
popf
pop
mov
or
mov
popf
inc
mov
mov
add
js
movs
out
iret
je
cld
lahf
mov
sub
pop
sti
call
loopne
cld
adc
sub
pop
pusha
dec
mov
int3
mov
xchg
aad
adc
cdq
int
mov
push
stos
dec
inc
ja
pop
xchg
pop
cdq
in
inc
adc
cmps
sbb
push
pop
jge
jne
dec
and
stos
jl
push
cmp
mov
mov
mov
addr16
jge
mov
dec
repnz
dec
push
cmp
mov
data16
or
scas
and
mov
and
adc
push
stos
mov
fwait
js
push
mov
xchg
pop
mov
push
ja
lds
and
jl
rcr
cld
and
jnp
es
adc
fxtract
adc
(bad)
into
fwait
push
mov
push
div
push
cdq
inc
jae
gs
adc
dec
hlt
xchg
jge
in
cmp
mov
jae
mov
mov
mov
pop
pop
fwait
push
push
iret
inc
call
inc
mov
movs
or
cmp
pop
into
in
push
scas
pop
sub
jle
mov
fist
sahf
pop
stos
mov
xchg
bound
addr16
aas
sbb
sbb
or
push
jg
out
jge
mov
repz
sub
mov
dec
xor
inc
mov
sbb
push
mov
cmp
push
hlt
xchg
sub
cmp
jae
xlat
cmp
inc
div
add
and
adc
xchg
stos
xchg
test
or
nop
aam
ja
inc
outs
dec
mov
mov
data16
xchg
sbb
dec
or
xchg
sar
xor
cmp
in
clc
push
in
test
mov
sar
aam
cmp
add
cdq
aaa
in
or
ret
dec
fnstcw
cmp
push
fsub
cmps
addr16
fisub
mov
popa
xchg
push
imul
test
mov
cs
test
nop
xchg
mov
add
mov
arpl
outs
stos
int3
mov
or
rol
sbb
cmps
push
add
scas
push
(bad)
mov
xlat
xchg
adc
fldenv
fcomp
test
sub
xchg
lahf
push
mov
and
cli
cwde
or
retf
fiadd
out
sub
aaa
into
sbb
inc
mov
xchg
mov
xor
pop
daa
jo
addr16
(bad)
sahf
pushf
in
mov
and
mov
inc
xchg
cmp
xchg
inc
call
jge
push
mov
push
xor
(bad)
mov
lea
push
push
jmp
and
stos
cmp
adc
test
in
push
mov
lds
rcl
pop
pop
mov
mov
hlt
xor
jge
adc
xor
cmp
fsubp
jg
cli
(bad)
jne
sbb
sbb
ins
fmul
inc
sbb
jbe
rcl
data16
mov
and
cwde
jp
add
xchg
lahf
push
xchg
xchg
pop
mov
ins
scas
mov
fwait
jmp
xchg
fisttp
mov
mov
sbb
enter
aaa
(bad)
adc
sub
mov
mov
and
imul
in
pop
in
jne
fdivr
sub
push
xchg
sahf
mov
jmp
shl
int3
mov
push
test
mov
fcmovb
in
sbb
(bad)
iret
xchg
sti
fnstsw
std
xchg
sbb
cmc
dec
add
je
jns
and
mov
pusha
cmps
xchg
stos
outs
pop
xchg
push
push
pop
mov
inc
or
loopne
jmp
adc
xchg
add
dec
popa
mov
neg
pop
mov
xor
pop
adc
xchg
loopne
fwait
or
jb
mov
retf
pop
jns
jle
mul
cmp
xor
push
xchg
xchg
or
push
xchg
push
out
stc
mov
dec
and
jo
xor
lods
and
shr
or
ins
mov
out
adc
jp
jg
or
pop
stc
pop
(bad)
rol
addr16
jmp
xor
pop
loopne
xchg
ret
push
adc
(bad)
mul
ins
adc
rcl
ss
mov
cmp
enter
lea
rol
cmp
jp
into
or
(bad)
push
nop
sbb
(bad)
sbb
xchg
mov
mov
cld
jle
div
and
jge
xor
stos
mov
adc
and
adc
sub
xchg
js
xchg
jecxz
loope
xchg
xchg
pop
pop
mov
push
mov
repnz
adc
fbstp
mov
sub
xchg
std
or
out
mov
cmp
xchg
adc
push
xchg
mov
in
xchg
out
fwait
mov
add
shr
add
xchg
ja
jp
adc
add
imul
repnz
jb
xchg
jle
(bad)
mov
add
fsubr
xchg
nop
cmp
push
shl
jmp
mov
cmps
mov
sbb
xor
push
adc
push
push
and
ins
push
mov
jg
sub
adc
pop
fnstenv
hlt
inc
dec
cmc
push
arpl
das
aaa
xchg
fiadd
leave
call
pop
mov
adc
out
int3
sub
mov
mov
mov
mov
jecxz
and
sub
jge
ret
cld
je
mov
je
enter
rcr
mov
retf
js
mov
pop
mov
cmp
or
iret
push
ret
dec
cli
dec
mov
aad
inc
adc
das
cmp
pusha
dec
sub
imul
hlt
sub
fst
xchg
and
data16
and
sbb
cwde
pop
ret
jge
xchg
data16
jl
jp
scas
dec
dec
mov
and
in
mov
loopne
nop
lods
rcr
dec
test
sbb
pop
mov
add
lods
xor
pusha
xlat
pop
sbb
cld
xor
popf
mov
rcr
cmc
movs
shl
push
push
and
clc
add
in
mov
dec
jns
nop
mov
shr
leave
adc
mov
fbstp
repz
xchg
cld
xchg
mov
into
xchg
xchg
call
adc
in
adc
add
sbb
xchg
xchg
add
mov
jle
xchg
fs
cmp
sbb
retf
dec
mov
push
cmps
mov
sti
aaa
cmp
push
cmps
retf
hlt
mov
test
in
test
fs
mov
fcmovu
adc
sub
xchg
push
cs
push
fimul
dec
sub
out
fdivr
mov
outs
mov
jp
xor
dec
xchg
fisttp
dec
pop
imul
pop
jns
mov
sub
push
lock
(bad)
mov
push
dec
mov
cdq
pop
dec
out
xchg
call
cmps
xor
jecxz
sub
repnz
xchg
neg
loop
stos
dec
inc
retf
lea
inc
xchg
push
cmps
adc
out
test
xor
repz
adc
jle
mov
pop
mul
push
rol
int3
and
xchg
sbb
cdq
cmc
xchg
lea
enter
jg
jp
xchg
cmp
out
and
mov
sahf
aad
loopne
inc
xchg
repnz
cmp
mov
test
xchg
mov
inc
xor
push
add
ror
mov
sbb
xchg
data16
mov
ss
jno
pop
clc
outs
add
mov
add
xchg
adc
dec
adc
inc
dec
ins
cmp
outs
jl
xchg
push
adc
xchg
in
xor
stc
popa
cmp
xchg
leave
add
sbb
arpl
adc
cmp
gs
xor
ja
pop
mov
mov
dec
and
mov
xchg
das
xchg
jmp
mov
pop
inc
mov
shr
mov
xchg
popf
xchg
in
(bad)
or
sub
pop
xchg
jmp
cmps
pop
lods
xchg
das
push
retf
jge
daa
in
xchg
xor
push
xchg
xor
pop
mov
mov
pop
xor
dec
mov
call
jnp
pop
inc
jecxz
xchg
xchg
or
adc
and
pop
push
daa
int3
pop
outs
fwait
mov
xchg
cld
inc
or
jge
jns
shl
adc
int
xchg
(bad)
jecxz
jne
push
loopne
or
jle
sbb
mov
mov
hlt
cli
and
test
jge
or
mov
mov
inc
outs
cli
mov
jg
xchg
sbb
inc
inc
jge
data16
dec
xor
xchg
jae
mov
adc
mov
push
xchg
xchg
loope
in
jbe
std
in
sar
pop
jne
pop
push
pop
outs
aas
add
lahf
jns
fldcw
(bad)
jno
dec
scas
jge
cmp
idiv
les
sbb
adc
sbb
sub
ins
cwde
ins
out
jmp
into
sbb
adc
pop
mov
jne
rol
(bad)
loopne
sbb
sbb
test
xchg
sbb
movs
pop
inc
arpl
cdq
cmp
cmps
call
cmc
pop
dec
xchg
cli
xor
jge
push
xlat
sub
mov
jmp
inc
aad
mov
pop
mov
out
mov
mov
jge
out
shl
mov
lods
int
xchg
adc
adc
sete
sbb
jmp
(bad)
fdiv
mov
xchg
sub
pop
enter
adc
sub
daa
cld
inc
and
dec
add
inc
sbb
cli
(bad)
xchg
sub
data16
(bad)
nop
mov
(bad)
mov
ja
xchg
mov
out
adc
jl
adc
adc
das
cmps
ret
nop
mov
or
mov
or
push
imul
sti
mov
push
daa
dec
mov
xchg
mov
stos
push
test
(bad)
in
mov
ror
cmp
pop
inc
(bad)
or
push
pop
push
mov
pop
lahf
adc
shl
xor
inc
fdiv
pop
adc
cdq
sar
xchg
xchg
add
push
xchg
cmps
aas
jecxz
outs
add
sbb
xor
enter
fnsave
sub
ins
xchg
daa
test
aaa
mov
nop
aas
dec
and
ja
pop
fsubr
and
xor
xchg
mov
cld
fwait
mov
retf
push
xchg
sub
out
and
adc
dec
cld
mov
jg
loopne
xchg
hlt
xor
sbb
cwde
sub
stc
jle
add
sub
push
add
iret
jae
sbb
pop
lods
in
push
inc
cmps
lds
mov
jecxz
mov
loop
fcmovne
pushf
jnp
jl
ror
adc
adc
mov
jns
cmp
(bad)
xchg
enter
and
movs
rcr
data16
(bad)
or
nop
dec
dec
jle
fisttp
sub
mov
or
out
lods
inc
jbe
icebp
enter
lock
shr
in
les
sub
or
lods
inc
imul
ss
pop
popf
sub
aam
add
jge
pop
jbe
lahf
sub
jmp
add
aaa
and
sbb
mov
mov
xchg
imul
clc
sbb
pushf
lods
int3
(bad)
cmp
cwde
bound
sbb
dec
enter
fcomp
jg
push
push
cld
aaa
in
jmp
xchg
xor
add
mov
cmps
mov
retf
sub
xchg
cmp
je
in
popf
inc
ss
xchg
out
add
mov
std
adc
mov
int
test
adc
mov
out
jnp
ror
adc
sbb
mov
cwde
push
mov
call
fisubr
push
cmp
inc
outs
ds
mov
icebp
xor
adc
sub
pop
das
test
sbb
push
into
ja
das
and
mov
inc
out
jb
sbb
inc
xchg
pop
out
bound
les
fisttp
mov
mov
jecxz
movs
cdq
les
jb
in
or
adc
or
xchg
sub
ds
rcr
cmps
hlt
xchg
daa
fdivr
adc
adc
mov
jg
xor
dec
xchg
xchg
push
pop
jmp
cmps
inc
xchg
adc
mov
pop
fadd
loop
sahf
(bad)
cwde
push
jg
xor
jl
cmp
jb
shr
cli
mov
stos
sub
stc
(bad)
out
cwde
aas
push
sbb
in
mov
mov
test
xchg
cwde
or
fisub
mov
jmp
sbb
jl
imul
es
xchg
adc
scas
ds
xchg
pusha
pop
cmp
(bad)
adc
lods
mov
int3
pop
xor
lds
adc
repz
mov
test
das
and
pushf
and
fld
outs
mov
dec
dec
mov
cmp
fld
xchg
xor
fst
mov
data16
xchg
push
xchg
and
mov
cmp
int
jle
fcomp
js
das
jecxz
arpl
dec
add
lahf
adc
bound
into
or
dec
xchg
(bad)
ja
retf
aas
add
jl
popf
push
and
sti
jne
pop
stos
lock
mov
outs
dec
push
or
pop
xchg
mov
cli
daa
rol
inc
xchg
push
in
leave
push
shl
popa
push
cdq
xchg
and
push
cli
ins
(bad)
push
jo
push
xor
jg
mov
xchg
scas
xchg
fiadd
ret
xchg
pop
sbb
mov
dec
sete
or
xchg
dec
fist
cwde
into
out
sub
xchg
pop
xor
es
cmp
jae
mov
test
push
(bad)
aam
cmps
call
xor
mov
xchg
cmp
(bad)
xor
cmp
cli
cld
xchg
aam
pop
test
jmp
lea
add
mov
(bad)
xchg
push
mov
fisttp
iret
pushf
push
jno
mov
push
adc
mov
pop
cwde
rcr
push
nop
pop
adc
aas
pop
or
xor
js
(bad)
xor
dec
jge
cdq
mov
or
lds
hlt
shrd
rcl
xchg
mov
stos
jle
sti
xchg
jmp
push
cdq
jp
mov
mov
xchg
dec
and
in
add
sbb
(bad)
retf
sbb
mov
dec
xchg
stos
mov
jmp
dec
jae
aas
push
pushf
jbe
cmps
xchg
mov
in
mov
rcl
and
int3
loop
scas
pop
dec
jecxz
fidivr
stc
aas
lea
cwde
mov
adc
jecxz
xor
mov
jb
dec
push
xor
sahf
push
xor
into
hlt
xchg
xchg
dec
mov
ins
xor
cwde
cdq
push
push
inc
adc
into
mov
imul
push
cmps
ds
adc
movs
dec
bound
outs
sahf
sbb
call
(bad)
xor
and
add
hlt
jb
(bad)
push
in
push
stos
cmps
lods
jne
(bad)
pushf
jno
call
mov
push
dec
inc
push
popf
scas
lods
mov
not
in
sbb
pop
loopne
clc
out
hlt
jbe
lods
inc
fs
sar
xchg
cmps
xor
jp
add
pop
cwde
popa
or
push
adc
fisttp
mov
aam
xchg
(bad)
sub
test
push
xchg
fst
fidiv
ins
fwait
data16
sub
mov
mov
push
int3
cmps
pop
adc
outs
adc
shl
add
sti
pop
xchg
adc
sbb
push
push
sub
xchg
in
jae
and
mov
mov
jmp
out
dec
in
push
pop
xchg
push
adc
dec
pop
scas
pop
xchg
sub
add
sbb
xchg
enter
sbb
cmp
popf
mov
ds
cmc
xlat
xchg
xchg
popf
bound
cmp
xchg
pop
xor
mov
je
or
ret
mov
(bad)
adc
xchg
mov
jb
arpl
inc
mov
mov
xchg
js
inc
mov
ret
cmp
je
daa
pushf
mov
pop
mov
push
or
xchg
or
test
mov
out
aam
push
xchg
shl
inc
cmp
inc
push
xchg
ror
add
(bad)
xchg
scas
loopne
loop
mov
enter
or
int3
sbb
lahf
push
je
and
imul
lahf
loop
jae
out
repz
daa
xchg
add
mov
xchg
sub
ss
lea
in
mov
mov
ins
mov
mov
push
dec
xor
push
xchg
jno
cdq
xchg
dec
mov
int
loopne
sti
xchg
outs
fcmovnbe
movs
fadd
call
cmp
les
mov
sub
mov
and
sbb
in
(bad)
and
rep
xchg
call
outs
push
jbe
add
pop
jmp
mov
xchg
adc
and
int3
push
xchg
cmp
and
xchg
and
xor
mov
or
xchg
push
xor
push
cmp
fst
popa
fst
xchg
push
xor
add
xchg
add
or
int
fdivp
jo
jne
jnp
add
xchg
xor
pusha
call
lea
or
mov
bound
call
adc
or
xchg
adc
or
pop
jecxz
xchg
gs
pop
xlat
push
or
and
inc
dec
in
xchg
rcl
adc
in
fistp
xchg
fwait
inc
rcr
pop
add
cmp
sbb
mov
xchg
imul
mov
inc
cmc
jle
mov
xchg
cmps
movs
retf
test
mov
push
int
aad
push
xchg
or
sub
mov
and
fwait
bound
aas
lods
add
ficom
(bad)
mov
mov
xchg
aas
aam
rcl
and
arpl
outs
xchg
cmp
shr
lods
dec
das
jbe
xchg
mov
sbb
int3
xchg
mov
cwde
mov
inc
ins
lea
xchg
mov
and
hlt
sbb
mov
int
scas
xchg
js
clc
not
out
xchg
repnz
mov
mov
fcomp
inc
jl
xchg
jnp
je
pushf
popf
(bad)
dec
xchg
mov
stos
je
add
xchg
mov
or
add
mov
dec
xchg
cmp
and
mov
call
pop
and
movs
fdivr
mov
shl
mov
and
and
mov
xor
je
sbb
mov
bound
push
stos
fisttp
ror
xchg
popf
adc
or
xor
fsubr
int
jp
loop
cdq
ds
xor
test
bound
jbe
addr16
pop
inc
mov
fs
in
xchg
pop
xchg
mov
push
lods
pop
pushf
cdq
xchg
push
bnd
mov
test
adc
stos
dec
mov
sahf
aaa
es
mov
lods
adc
mov
inc
xchg
push
cmp
shl
or
push
enter
add
pop
pushf
mov
lahf
repnz
mov
pusha
xor
mov
cwde
mov
xor
pop
int3
xchg
aam
popa
movs
call
jl
ja
cdq
sbb
mov
imul
sbb
mov
mov
push
js
addr16
lahf
pop
mov
fwait
out
into
(bad)
push
xchg
cmp
sti
stos
push
push
inc
sub
ficom
inc
movs
mov
cmp
in
xor
rcr
xchg
push
push
shl
xchg
cmps
cmps
cmp
les
(bad)
mov
into
in
jmp
(bad)
cs
in
xor
adc
pop
shl
xchg
(bad)
loopne
nop
sar
xchg
dec
jl
push
out
sub
lahf
xchg
jge
jecxz
and
mov
xchg
add
adc
dec
je
scas
xchg
inc
pop
mov
scas
xchg
cs
arpl
pop
(bad)
cdq
(bad)
xchg
cmp
xor
mov
je
popf
mov
xchg
rcr
pop
shl
xchg
mov
out
xchg
and
push
fcomp
pop
mov
mov
leave
mov
fwait
dec
sar
movs
gs
dec
jo
sub
movs
push
fnstenv
xchg
adc
or
cmc
lods
sete
jg
push
cmps
jnp
inc
xchg
repz
(bad)
(bad)
lods
ret
pop
mov
fild
xchg
or
mov
stos
or
xchg
ds
int
in
xchg
add
jl
xchg
arpl
out
and
push
xchg
push
xchg
(bad)
mov
lds
dec
data16
mov
cmps
fwait
test
cmp
fld
add
je
hlt
push
inc
fld
movs
xchg
in
add
cmp
in
fcmovbe
and
sahf
fsub
push
mov
xchg
fwait
cmp
test
pop
test
neg
xchg
mov
lods
fldenv
inc
sbb
in
mov
jno
dec
mov
push
pop
in
sbb
sub
shl
hlt
lds
mov
jb
xchg
cmp
push
mov
adc
in
es
test
outs
cmp
shl
jge
les
das
cmp
in
out
fwait
cmp
test
fisubr
push
push
xchg
sbb
mov
xchg
les
cmp
xchg
adc
inc
hlt
pop
outs
div
mov
xchg
call
xor
sub
sub
into
inc
xchg
ret
adc
xchg
pop
in
add
push
pop
xchg
and
jg
mov
xor
xor
retf
rol
cmp
sbb
and
xchg
xchg
dec
adc
add
stos
loop
cmp
iret
daa
fidiv
jmp
jecxz
aad
xchg
jmp
pop
stc
loopne
(bad)
add
mov
mov
rcl
test
jbe
cdq
test
jl
sub
ror
hlt
or
jge
jo
aam
mov
nop
(bad)
cmc
jl
or
xchg
pop
fldcw
sub
ret
push
pop
pop
jl
xchg
out
mov
in
add
into
in
or
jmp
push
jne
(bad)
test
fistp
cmp
and
pushf
sub
(bad)
ins
xor
mov
push
cmps
mov
mov
or
xor
pushf
inc
aad
and
cmp
mov
adc
xchg
fwait
push
out
sub
fld
cmp
mov
shl
test
xchg
(bad)
xchg
or
xor
xchg
ret
pop
or
push
adc
jmp
inc
cmc
shl
sub
fwait
jmp
pushf
(bad)
adc
mov
xor
cwde
mov
adc
in
xchg
leave
fldcw
adc
int3
in
adc
call
xchg
pop
xrelease
mov
cmc
mov
rcl
scas
cmps
mov
inc
int3
imul
bound
add
test
fisttp
inc
xchg
pop
adc
mov
adc
jns
mov
ret
inc
shl
jno
jns
jne
sti
popf
pop
test
icebp
ins
sbb
cld
xchg
in
loopne
cmps
adc
jb
fwait
lock
mov
aad
xchg
cmp
xchg
icebp
jle
jbe
leave
mov
popf
ficom
sbb
outs
pop
shr
test
mov
enter
cmps
ins
scas
or
mov
jmp
and
add
dec
mov
(bad)
in
out
cmps
xchg
shr
sub
sub
aam
loop
cmp
xchg
jmp
je
lds
cmp
xchg
fadd
or
mov
mov
adc
xchg
into
and
jg
neg
enter
test
jmp
ret
js
mov
adc
hlt
adc
stos
icebp
xchg
add
in
lea
sub
sbb
jmp
lods
xchg
cld
mov
lahf
mov
ins
push
xor
aam
and
adc
mov
jge
scas
les
xor
imul
ja
adc
fwait
pop
fsubr
xchg
mov
and
sub
sbb
adc
mov
pop
jmp
(bad)
jae
test
mov
xchg
push
call
lds
cmp
test
mov
outs
in
hlt
mov
(bad)
pushf
push
cmp
dec
leave
xchg
jns
daa
jp
sbb
xchg
mov
ins
push
mov
cmp
aaa
outs
(bad)
repz
(bad)
sti
jg
ret
push
outs
adc
lods
mov
mov
jmp
sub
sub
fidivr
mov
pop
add
repz
push
ror
xchg
cld
push
(bad)
sti
adc
lods
xchg
pop
dec
jmp
out
xchg
xor
sub
stos
popa
xchg
pop
or
fbstp
sahf
int3
xchg
cmc
jmp
or
int
addr16
mov
xchg
mov
mov
xchg
inc
int
out
movs
outs
cmp
sub
sar
jmp
call
fstp
jb
ins
popf
out
xchg
xchg
jbe
push
(bad)
call
call
push
popf
mov
add
mov
aam
add
xchg
sub
and
cmps
xchg
inc
ja
add
jle
xchg
mov
out
sub
adc
push
dec
pop
in
jmp
out
xchg
js
mov
xchg
into
dec
aad
sub
mov
ja
mov
pushf
mov
scas
xor
adc
mov
hlt
outs
xchg
(bad)
xchg
add
rcr
mov
xchg
adc
pop
adc
ja
sahf
xor
xor
push
je
cwde
gs
mov
stos
adc
push
or
pop
xchg
add
into
ds
inc
js
rcl
adc
sbb
dec
mov
xchg
rcl
adc
test
inc
xchg
into
enter
pop
in
popa
repnz
xor
mov
loop
adc
xor
sti
or
xchg
dec
sub
cwde
pushf
mov
jmp
fcomp
ins
and
add
push
cmp
cwde
bound
loopne
xchg
jnp
lods
sbb
xor
xchg
mov
ret
cwde
push
dec
jle
xchg
jecxz
cmps
mov
lods
fst
pop
mov
(bad)
sub
xchg
push
add
je
cmp
dec
loopne
sub
in
mov
popf
xchg
pop
retf
adc
xchg
jge
outs
(bad)
jmp
pushf
or
std
jmp
adc
push
push
mov
sub
pop
fidivr
cmp
fimul
add
inc
pop
jmp
mov
test
xchg
cwde
sbb
loop
shr
(bad)
cmps
int3
mov
mov
and
test
jle
fcomp
sbb
push
sub
inc
and
and
hlt
adc
icebp
lock
add
fld
cld
pop
repnz
fisttp
sbb
or
stos
adc
(bad)
xor
add
pop
add
(bad)
jle
mov
push
mov
mov
retf
das
pop
ror
push
ror
or
mov
retf
ror
clc
loop
jl
fcom
lock
in
call
adc
arpl
jmp
mov
jge
sbb
dec
push
sbb
data16
lahf
jmp
mov
fwait
xchg
gs
int3
bound
xlat
cmp
sbb
jbe
dec
mov
mov
jno
jp
mov
fucomp
repz
adc
aas
cwde
jo
in
test
int3
inc
icebp
pop
out
inc
jmp
push
sub
cmp
(bad)
cmp
mov
aad
loop
mov
ret
gs
imul
adc
test
sbb
jnp
enter
pop
sub
ins
(bad)
mov
jl
ds
cli
push
mov
cvtps2pi
add
test
xor
aaa
fild
pushw
out
clc
popf
ret
(bad)
bnd
or
stc
fadd
fidivr
fwait
xchg
enter
fcomp
hlt
fsubrp
xchg
xor
jecxz
jge
adc
push
imul
stc
xchg
popf
or
mov
sbb
popf
sbb
push
gs
sub
add
cmps
inc
cwde
dec
mov
mov
sbb
push
pushf
(bad)
int
adc
cli
es
gs
cmp
cdq
hlt
push
test
dec
ss
push
and
pushf
xchg
xor
cdq
mov
lahf
ins
in
mov
jl
jge
les
xchg
push
xor
cs
or
add
add
outs
mov
idiv
nop
mov
fbld
xor
out
hlt
jmp
lods
pop
cld
les
(bad)
xor
fst
test
cmp
jl
nop
sub
int3
je
mov
xchg
int
(bad)
xor
or
adc
push
xchg
pusha
xor
xchg
pop
nop
pop
lods
xor
aad
cdq
sbb
es
push
add
out
xchg
inc
mov
pushw
(bad)
je
pop
inc
cmps
call
repz
lahf
add
cld
xchg
retf
and
aam
mov
dec
cwde
jecxz
loop
repz
(bad)
mov
jg
xchg
or
(bad)
rol
adc
call
(bad)
cdq
in
pop
mov
mov
mov
dec
xor
bound
push
adc
popa
sbb
xlat
(bad)
popf
xchg
cmpps
xchg
sbb
dec
cmp
outs
xchg
mov
stos
mov
neg
or
xchg
ds
dec
out
rcr
inc
mov
push
or
or
dec
xchg
leave
jbe
lods
rcl
add
movs
inc
(bad)
mov
in
fcom
sub
jbe
push
ret
xchg
or
mov
xchg
mov
sbb
sub
cmps
cld
pop
rcl
mov
clc
xchg
icebp
jmp
xchg
adc
xchg
xchg
cld
jns
add
push
test
stc
fs
fwait
(bad)
ret
icebp
xor
jb
dec
aas
cdq
push
mov
sub
pop
xchg
sub
js
mov
into
popf
ins
fidiv
in
mov
(bad)
ficom
jp
push
loop
sbb
pop
shl
std
loopne
push
xor
cwde
enter
dec
sahf
inc
adc
popa
fwait
push
fcmovnu
fisubr
in
(bad)
adc
fist
push
pop
test
movs
imul
data16
jns
cmp
fwait
je
call
movs
std
rcl
xor
enter
inc
add
add
cmp
or
push
push
xor
xor
sub
loopne
mov
imul
mov
xchg
pop
mov
and
xchg
iret
mov
aad
sub
fwait
jecxz
rol
sub
mov
xchg
sbb
xor
inc
stos
push
outs
xchg
mov
mov
dec
mov
jbe
rcl
xchg
push
jae
inc
ja
pop
sbb
jp
pushf
xchg
data16
mov
cmps
test
ret
inc
xchg
pop
jns
hlt
outs
inc
into
sub
jp
or
add
(bad)
xchg
push
loope
fcom
out
add
add
xchg
mov
je
xchg
pop
and
retf
xchg
cmc
outs
movs
push
nop
cmp
xchg
or
movs
inc
pushf
and
sub
sbb
xor
add
fisubr
adc
xchg
pop
mov
js
popf
call
and
shr
jnp
xchg
push
push
mov
iret
in
adc
jl
movs
outs
icebp
pushf
mov
xor
call
pop
das
sub
lods
add
mov
aam
ss
enter
pop
cdq
bound
or
leave
push
pushf
xchg
push
xor
test
mov
xchg
mov
fst
xchg
and
mov
fcom
xchg
mov
adc
add
dec
jmp
cmp
xchg
shl
lss
(bad)
hlt
fwait
sbb
dec
inc
and
pop
test
stos
or
add
pusha
mov
adc
or
xor
xchg
in
adc
or
jae
xchg
out
inc
or
cmc
aas
ins
cmp
push
out
repnz
ja
daa
or
pop
mov
in
int3
ret
dec
push
mov
push
nop
mov
daa
mov
aam
idiv
inc
xchg
loop
nop
inc
sub
jge
adc
mov
stos
sahf
cwde
adc
mov
pop
mov
and
stos
aad
stc
lock
inc
adc
lahf
and
inc
lock
pop
repnz
hlt
outs
jl
push
dec
lahf
lahf
mov
out
xchg
jecxz
js
dec
xchg
adc
aas
in
loop
sub
jg
push
sahf
out
js
dec
xchg
jp
mov
add
xchg
cs
je
aam
inc
mov
rcr
cld
push
push
leave
fidiv
push
cmps
jmp
inc
dec
(bad)
cmp
inc
icebp
add
daa
push
push
xchg
jns
pushf
xchg
fst
sbb
xchg
jle
(bad)
xor
jp
push
pop
les
and
adc
mov
jbe
and
xchg
dec
pop
rcl
ror
push
mov
xchg
js
jecxz
outs
or
mov
mov
xor
sbb
ror
rcl
(bad)
ja
std
pop
dec
xor
sub
inc
jle
js
mov
lahf
punpckldq
int3
and
ins
fcom
add
cmp
xchg
jg
fiadd
loopne
mov
pop
jmp
stos
xchg
stos
mov
ss
sar
pusha
mov
xchg
in
inc
and
inc
jg
sbb
mov
inc
xchg
or
mov
nop
dec
popf
shl
adc
(bad)
loopne
xchg
jmp
mov
inc
xchg
sbb
pop
inc
xchg
pushf
sub
cs
adc
retf
cmp
out
jo
cmc
adc
dec
mov
xchg
dec
imul
pop
outs
or
xchg
popf
bound
leave
pop
inc
les
xchg
xchg
push
add
inc
inc
xchg
xlat
jp
mov
les
xchg
fsub
cmp
pop
shl
inc
iret
inc
fcom
fsubrp
pop
jl
xchg
mov
test
push
cmps
jl
xor
cmc
xchg
rcl
jnp
or
call
inc
and
xchg
jns
mov
xor
clc
jecxz
bound
mov
inc
mov
push
pop
inc
mov
fcomp
je
inc
xchg
int3
fbld
xrelease
idiv
test
xchg
fidiv
aas
fldenv
push
shl
addr16
pop
(bad)
jae
mov
and
add
mov
int
leave
fs
popf
outs
popf
dec
push
xchg
in
movs
xchg
rcl
pusha
pop
xchg
xchg
inc
test
out
inc
mov
dec
in
xchg
pop
adc
or
sub
pushf
out
repz
or
loopne
pop
jp
ja
mov
jecxz
sub
pop
xchg
imul
cmp
ins
dec
je
cli
xchg
add
aam
popa
ss
push
int3
movs
test
mov
xor
xor
mov
xchg
fwait
add
imul
repnz
jbe
les
les
jmp
xchg
sbb
adc
leave
data16
fwait
scas
xor
repnz
xchg
inc
inc
arpl
mov
jle
adc
xchg
inc
jmp
(bad)
js
xrelease
adc
xchg
pop
and
retf
scas
sub
inc
stos
sub
pop
or
mov
(bad)
ins
push
mov
into
jecxz
std
icebp
movs
jne
cmp
out
push
cs
test
inc
or
retf
mov
mov
adc
add
sar
cwde
xchg
imul
fst
jge
xchg
jno
pop
and
xchg
(bad)
jmp
cdq
scas
xchg
push
int3
dec
shl
retf
sbb
push
test
hlt
mov
adc
ds
aad
sub
dec
adc
sbb
dec
jae
push
out
daa
les
mov
jnp
mov
mov
inc
sahf
push
lahf
jbe
es
and
cmp
(bad)
xchg
popf
mov
pop
test
bound
es
xchg
iret
mov
jne
pop
cmps
mov
or
xor
sbb
jecxz
popf
lock
ss
ins
ret
xchg
retf
leave
dec
aam
inc
cmp
push
imul
mov
xor
(bad)
xchg
cmps
jo
pop
cld
adc
fdiv
rcr
(bad)
or
adc
add
add
loop
sbb
mov
adc
sub
mov
ret
pop
push
iret
adc
jnp
rol
push
scas
xchg
inc
inc
call
in
nop
cmps
xchg
inc
enter
sbb
icebp
rcr
xchg
jg
pop
test
sbb
inc
out
les
outs
or
movs
adc
jns
xchg
stos
mov
(bad)
fst
int3
in
outs
ja
test
jae
mov
add
mov
jle
lods
adc
stos
aam
pop
xor
xchg
int3
mov
(bad)
popf
xor
outs
inc
xchg
fnstsw
cs
jo
add
push
xchg
lea
imul
pushf
and
ret
xor
lahf
in
mov
or
mov
aad
dec
ins
pop
mov
sub
push
fwait
jnp
mov
mov
ret
aaa
mov
aas
sub
mov
adc
movs
arpl
mov
xchg
mov
and
add
adc
dec
mov
test
dec
hlt
(bad)
(bad)
sub
daa
ret
and
je
add
mov
jo
and
xor
jg
xchg
mov
pushf
jne
cmp
xchg
je
int3
es
pop
dec
sub
adc
inc
(bad)
xchg
cmp
pop
loope
int3
lock
ret
arpl
push
adc
mov
in
lods
popf
dec
cmps
scas
addr16
sub
inc
movs
pusha
movs
or
push
es
(bad)
sub
cmp
outs
and
xlat
jb
scas
mov
imul
and
cwde
hlt
scas
ins
lds
aam
mov
in
cmc
xchg
jmp
leave
dec
jl
adc
lock
pop
pop
pop
xchg
imul
pop
test
sbb
push
cmp
aam
lea
fidiv
jmp
mov
dec
dec
or
cmp
fbld
dec
adc
sbb
mov
mov
xchg
mov
and
xchg
xchg
and
icebp
cmp
xchg
das
(bad)
enter
sbb
push
in
sbb
and
retf
lahf
int
xchg
dec
mov
add
xchg
loope
mov
movs
sub
imul
addr16
fwait
popa
xchg
adc
lock
mov
test
pop
adc
(bad)
jmp
pop
sti
ficom
or
jae
(bad)
xor
fstp
cmp
mov
cli
xchg
jno
pop
mov
aam
pop
outs
iret
sbb
sbb
push
push
xchg
push
jns
loop
int
mov
or
mov
dec
add
or
loopne
xchg
xor
ss
fidiv
in
xchg
int
add
popf
out
data16
mov
jge
or
call
jb
rcl
movnti
xchg
and
inc
repz
test
push
cmp
add
(bad)
cmps
fistp
inc
xchg
dec
and
fstp
xchg
dec
adc
test
mov
inc
loopne
mov
pop
je
and
cwde
pusha
cmp
cmp
sub
rcl
add
ficomp
les
(bad)
hlt
add
inc
js
repz
cdq
xchg
inc
dec
je
xor
push
imul
ja
or
sbb
xchg
push
(bad)
pop
cld
mov
loopne
add
jg
push
jl
sar
enter
sbb
pushf
test
test
outs
add
es
xchg
lods
mov
xchg
adc
call
cmp
or
loope
in
xor
mov
inc
in
mov
mov
sub
popf
scas
daa
icebp
sbb
ins
mov
into
call
sbb
jp
adc
cmp
aam
in
push
arpl
fwait
je
xor
shl
mov
mov
xchg
jle
sbb
mov
outs
and
and
pop
adc
in
lahf
ret
inc
fwait
and
xchg
adc
jo
sbb
inc
xchg
out
push
mov
xchg
or
lahf
test
scas
test
mov
xchg
(bad)
or
ror
xchg
lahf
les
xchg
dec
psadbw
mov
pop
jp
(bad)
jp
dec
add
xchg
cmp
shl
(bad)
mov
das
sbb
test
popf
push
repz
cli
je
xchg
cmp
mov
cs
and
dec
dec
sub
outs
xor
addr16
push
jb
cli
cmp
aaa
mov
aaa
aas
movs
inc
push
lock
xchg
sub
xchg
push
iret
je
xchg
cmp
pop
(bad)
pop
jmp
ja
je
xlat
cmp
cs
xchg
mov
retf
xchg
cli
jo
fs
jmp
ss
and
lods
int3
fdivr
adc
mov
pop
sub
rcl
test
aam
add
and
idiv
pusha
(bad)
cdq
jmp
stos
cmp
pop
pop
hlt
rcl
jns
aam
sete
clc
test
or
addr16
cmp
lds
sub
je
push
mov
cwde
and
fistp
adc
scas
xor
add
xchg
xchg
test
out
aam
jmp
mov
bound
popa
fwait
stc
adc
test
cli
inc
test
mov
jb
jnp
jo
ret
fwait
sub
aaa
mov
xchg
ror
test
mov
aam
push
push
cli
push
xchg
inc
scas
out
out
add
clc
pop
pop
cmps
xchg
daa
and
sub
ss
sbb
xchg
inc
scas
add
jae
into
xchg
dec
mov
jne
cwde
outs
repnz
or
xchg
das
push
or
xchg
loop
mov
adc
inc
jnp
push
sub
fcom
add
pusha
mov
shl
xor
push
mov
outs
repnz
js
sbb
call
jnp
dec
mov
les
ja
xor
sub
movs
mov
push
in
add
in
pop
pushf
add
xchg
test
pop
push
dec
mov
or
(bad)
pop
push
and
enter
movs
jge
add
sub
int3
lods
push
call
cli
dec
sub
fcomp
jle
mov
adc
push
mov
sbb
pop
pop
les
jmp
cmps
xchg
fwait
es
mov
adc
add
jmp
mov
aaa
xchg
(bad)
or
dec
lea
xchg
scas
fwait
cmps
div
mov
pushf
cli
adc
sahf
cdq
mov
sub
xchg
and
sbb
push
inc
stc
cld
mov
cmp
cmp
mov
cmps
std
push
xchg
and
cmp
or
add
mov
(bad)
push
pushf
xchg
pop
xchg
out
outs
lods
xor
int3
inc
xchg
lods
xchg
(bad)
shl
ret
jo
ds
lahf
test
lock
or
inc
cmp
cmc
fbld
mov
mov
out
in
xchg
aam
mov
push
xchg
jle
sbb
movs
jnp
test
or
mov
mov
adc
xchg
das
push
int3
xor
jl
dec
cmp
xchg
mov
xchg
sahf
sub
enter
pop
xor
xlat
pushf
sub
in
ret
in
pop
pop
out
lock
xchg
movs
mov
repnz
mov
push
dec
arpl
shl
fiadd
adc
or
sbb
sbb
push
aad
jnp
pop
aad
(bad)
ret
add
pop
out
cmp
xor
jge
jns
pop
jmp
mov
mov
mov
fcomip
jge
in
sub
add
test
mov
mov
xchg
leave
inc
jno
test
iret
jmp
sub
pop
mov
sbb
imul
test
repnz
shl
outs
hlt
xchg
in
jp
not
adc
or
cmps
cld
mov
push
xor
mov
mov
pop
xchg
xchg
call
test
cmp
imul
push
jp
xchg
mov
scas
dec
test
push
cdq
inc
mov
xchg
sub
mov
repnz
(bad)
or
int3
fsub
xchg
ss
jae
clc
loope
cmp
dec
xlat
cmps
push
scas
ins
into
dec
je
ds
xor
pusha
div
into
inc
add
fild
sbb
push
or
into
pop
in
inc
push
test
ins
inc
and
aam
sbb
lods
xchg
shr
xchg
sbb
add
xchg
xor
pop
pop
xchg
xor
retf
outs
sti
inc
mov
xchg
repnz
xor
sub
adc
ins
or
mov
xchg
mov
push
fadd
mov
fdivp
icebp
std
adc
cmp
add
pop
mov
adc
shl
xchg
clc
out
cmps
sub
mov
xchg
iret
mov
fisubr
xchg
push
dec
int
cld
and
pop
xchg
or
jg
xchg
jno
retf
loope
scas
xchg
push
shl
fidiv
repnz
ja
or
popa
leave
jo
sbb
xor
inc
(bad)
mov
add
mov
cld
xor
sbb
push
or
xchg
cld
out
xor
loop
je
xchg
xchg
adc
add
lea
retf
push
xchg
mov
jb
xchg
or
adc
popa
out
xchg
push
test
movs
xchg
stos
and
(bad)
retf
jae
fs
pop
push
xchg
dec
(bad)
in
pop
inc
xor
fidiv
pinsrw
fwait
jne
or
mov
cmp
xchg
dec
inc
jp
mov
rol
xchg
add
push
xor
ins
lods
push
mov
xchg
dec
pusha
cwde
shr
sub
xchg
aam
push
fwait
(bad)
mul
cwde
xchg
xchg
dec
cmps
lea
mov
enter
xchg
pusha
(bad)
xor
xchg
mov
in
mov
fwait
call
mov
adc
mov
xlat
xchg
outs
jno
mov
adc
xchg
aaa
pop
sbb
inc
sub
push
add
adc
cld
xor
adc
cmp
mov
or
xchg
sbb
or
mov
sahf
ins
ja
or
sbb
jns
sbb
xchg
sub
push
add
xchg
adc
push
cdq
hlt
xchg
sbb
pop
inc
push
lahf
mov
(bad)
icebp
not
test
or
pop
dec
add
test
mov
cdq
in
lea
add
xchg
add
lock
ins
and
es
iret
rcl
jae
inc
and
adc
(bad)
jbe
mov
sbb
jmp
inc
xchg
mov
inc
cdq
mov
xor
xchg
fs
xchg
mov
cmp
sub
mov
jae
inc
cdq
fwait
mov
and
cmp
inc
scas
xchg
xchg
cmp
retf
xor
(bad)
enter
mov
(bad)
bswap
in
inc
push
sar
mov
test
sbb
mov
jle
int3
mov
adc
sbb
mov
sahf
lods
or
push
xchg
add
js
xchg
scas
push
stos
call
mov
sbb
aam
sub
and
jns
ja
rol
lods
mov
ror
js
scas
xchg
jl
mov
push
imul
les
rcl
addr16
mov
xchg
add
mov
push
jne
pop
push
sub
xchg
rol
xchg
mov
mov
xchg
test
data16
pop
and
fnstcw
dec
fs
mov
xor
sub
std
or
pop
outs
je
call
add
pop
push
xchg
dec
sbb
retf
inc
xor
sub
xor
into
or
mov
sub
adc
dec
xor
dec
sub
and
xchg
gs
aam
sbb
adc
push
xchg
sub
xchg
scas
pop
popa
mov
mov
xchg
icebp
fnstsw
add
or
xor
jmp
(bad)
xchg
add
jno
cmp
sub
jns
repnz
les
push
adc
cmp
mov
push
cmp
loope
push
xchg
pop
sub
pop
ffree
gs
push
pop
jbe
adc
jno
popf
add
js
xor
retf
xchg
call
hlt
je
fucomip
xchg
scas
pop
pop
push
sub
in
or
clc
fwait
pop
dec
sar
push
inc
sub
mov
aam
adc
or
dec
xchg
mov
mov
lahf
fcom
into
cmc
xchg
lods
xchg
ds
rol
push
bt
pop
stos
ja
fs
adc
jmp
fwait
mov
mov
test
jae
mov
clc
push
stos
push
cli
repnz
or
cdq
pop
pop
mov
mov
xchg
mov
es
not
mov
dec
jno
vpsrlw
sub
mov
out
mov
ret
dec
hlt
out
mov
push
iret
cwde
movs
jecxz
enter
shl
sub
and
pop
in
mov
aam
fld
push
sti
push
xor
out
icebp
je
mov
xchg
cld
push
jmp
mov
retf
pop
add
gs
sub
jg
lahf
mov
movs
add
enter
xor
mov
pop
fadd
les
data16
pushf
mov
(bad)
xchg
push
and
jmp
aam
add
xor
jb
sbb
xchg
mov
pushf
and
mov
and
es
push
pop
dec
pop
in
rcr
in
cmp
ficom
mov
popa
aas
push
fcomp
add
pop
adc
int3
lock
out
and
ret
cmp
jl
or
mov
sbb
adc
pop
mov
mov
push
hlt
les
mov
inc
xchg
adc
lahf
nop
cmp
mov
clc
popf
repnz
or
shl
cmp
or
push
push
xchg
retf
aam
(bad)
xchg
xor
mov
fadd
fstp
adc
sub
mov
leave
sub
test
into
add
movs
ds
hlt
popa
movs
xchg
mov
push
or
xchg
xlat
and
sub
in
aam
rcl
jmp
fisttp
das
jl
sti
xchg
ins
xor
cmp
xchg
or
push
or
xchg
and
pop
icebp
xchg
sbb
sar
mov
stos
loope
mov
push
xchg
adc
push
cmp
ror
push
xchg
adc
xchg
out
or
cmp
xor
adc
mov
mov
inc
jmp
or
sbb
mov
add
frstor
daa
xor
aad
or
call
xor
mov
into
xchg
add
push
xchg
add
jb
cmp
xchg
dec
aaa
sub
stos
shr
lahf
fcmovnbe
jmp
jne
cmp
rcr
neg
push
inc
stc
xor
icebp
adc
or
sbb
into
sub
push
sub
sbb
xchg
in
je
das
repz
cmps
jge
add
mov
(bad)
arpl
inc
aaa
mov
fs
jge
loopne
sbb
mov
adc
mov
in
mov
adc
dec
jge
cmp
inc
loopne
adc
add
xchg
mov
xor
adc
xchg
outs
rol
inc
xchg
shld
sbb
mov
xchg
pop
pushf
dec
xor
std
sub
cmovs
dec
xchg
stos
pop
mov
xor
xchg
lea
push
ss
addr16
(bad)
mov
sbb
xor
xchg
repz
sub
mov
jbe
xchg
push
ret
stos
out
add
jo
push
mul
jo
fist
ins
sub
xor
popa
push
std
push
fstp
icebp
in
xchg
sub
and
movs
fs
jge
ret
xor
test
push
mov
outs
or
xchg
pop
push
lods
ss
jo
les
xchg
or
mov
add
shr
xchg
rcr
hlt
lahf
xchg
cli
xchg
movs
cmp
outs
lds
inc
mov
loopne
or
ret
xor
xchg
es
imul
sub
(bad)
shr
jno
(bad)
jbe
hlt
cwde
xchg
and
mov
ret
retf
sub
sbb
pushf
jle
adc
pop
mov
mov
in
jg
push
shl
mov
arpl
in
mov
cmps
xchg
fcomp
add
sub
xchg
hlt
and
push
scas
xor
ficom
mov
sbb
xchg
and
or
xchg
shl
fnsave
enter
xchg
mov
mov
iret
cld
mov
test
mov
jno
(bad)
xchg
lods
push
or
aad
cmps
cmps
jge
cmps
push
dec
cmps
jg
int3
xchg
stos
and
loop
int
ins
pop
lahf
jb
cmp
pop
xor
icebp
cmc
in
inc
xchg
gs
sahf
ret
hlt
cmps
in
mov
retf
cmc
fist
push
xor
aad
out
xchg
or
shl
rol
mov
add
mov
xchg
jb
pop
mov
(bad)
sbb
fwait
sar
int3
arpl
je
ret
xchg
fist
adc
clc
nop
xchg
xchg
jecxz
rol
fidiv
jle
xchg
fldz
sub
cdq
jae
cmp
jle
cmp
or
sub
xchg
push
(bad)
xchg
mov
mov
popf
mov
push
ror
sbb
push
fisttp
cdq
mov
fisub
mov
push
imul
cmps
xor
ror
int
aas
loop
das
in
(bad)
xchg
lock
jg
mov
xchg
mov
jbe
out
iret
push
push
jo
xchg
sbb
jns
fild
jno
sti
int3
sub
jg
ret
mov
aam
retf
out
xor
pop
jo
lock
cmp
jmp
aam
jno
cmp
cmps
pusha
vmovss
xchg
ror
inc
cmp
test
cdq
inc
leave
adc
mov
jge
je
mov
jmp
int3
fisttp
in
fimul
popf
jns
stos
sbb
in
rcl
xchg
jmp
push
push
sbb
mov
mov
fisttp
sbb
pop
mov
sbb
mov
xchg
cld
xor
retf
test
dec
jmp
mov
pushf
fs
mov
xchg
dec
scas
xchg
or
pushf
cmps
mov
xor
shr
pop
shl
sbb
movs
dec
push
test
xchg
retf
adc
fwait
cld
or
pop
cmps
push
repz
pop
iret
mov
or
xchg
xchg
cmp
jnp
out
ins
fcom
mov
cli
test
xchg
retf
pop
std
adc
xor
sbb
loope
sbb
scas
test
adc
pop
xlat
mov
outs
xchg
pop
xchg
and
sub
mov
cli
mov
mov
cwde
lods
xor
push
mov
jge
daa
xchg
nop
xchg
pop
pop
call
xchg
mov
outs
pop
pop
mov
mov
sbb
das
or
push
jae
rol
xor
jecxz
push
mov
out
jmp
xchg
test
pushf
jbe
les
cmps
inc
lea
push
push
cmps
ins
xchg
in
mov
dec
mov
mov
push
jmp
test
jb
lds
fst
add
xchg
jecxz
mov
mov
aam
jne
cmps
add
cmps
imul
or
jb
mov
push
dec
push
jp
sub
pop
not
cmp
or
adc
and
pop
fwait
mov
push
cmp
pop
pop
pushf
jns
popa
out
pop
repnz
and
js
not
cmps
sbb
push
retf
xchg
test
shl
shl
dec
mov
push
pop
adc
inc
adc
mov
add
pushf
push
call
mov
test
jns
cwde
test
adc
mov
imul
mov
xchg
stc
pushf
mov
inc
retf
dec
stos
xchg
movs
sub
es
scas
dec
repnz
cmc
shl
push
lock
fwait
jg
pop
push
jae
ins
out
mov
test
xchg
ret
test
jl
clc
or
mov
out
in
mov
dec
mov
fwait
xchg
cmp
call
jecxz
add
mov
push
(bad)
icebp
(bad)
rol
xor
cmc
inc
cmps
gs
aas
stc
jg
cmp
mov
sahf
mov
popf
jb
xchg
aam
(bad)
data16
xchg
jp
call
cmps
inc
add
aas
inc
ss
xchg
inc
sbb
ret
std
xchg
stos
icebp
les
cmps
add
test
xchg
aam
test
gs
adc
popf
dec
adc
fcomp
int
xor
das
add
sbb
adc
jle
adc
dec
fwait
mov
lods
loope
movs
(bad)
or
adc
call
xchg
lea
ror
adc
xchg
(bad)
pop
dec
sti
jno
aam
xchg
xor
cmp
xchg
push
dec
(bad)
xchg
loope
sbb
scas
mov
int3
rcl
xchg
adc
mov
jl
sub
xchg
cmp
jge
outs
cmps
and
cli
push
pop
dec
xor
stc
sbb
test
cwde
mov
adc
fwait
dec
stos
mov
pop
fnstcw
in
je
inc
into
xchg
call
adc
fcom
push
mov
xchg
jnp
pop
xor
clc
retf
lods
xchg
push
add
xlat
xchg
in
or
stos
cwde
dec
fwait
rcl
pop
jl
repnz
cwde
jl
xor
xor
out
sbb
mov
cli
or
ror
outs
iret
or
mov
push
call
xchg
xchg
jmp
xlat
shl
mov
dec
shl
push
lahf
push
fs
fcomp
xchg
out
jl
call
jae
xchg
jb
out
lds
inc
cmp
leave
cld
popa
jl
std
jg
mov
or
test
in
sub
cmps
(bad)
gs
and
jg
daa
sbb
pop
imul
ja
jg
mov
aad
int
jne
xor
out
add
xor
mov
or
in
addr16
daa
mov
stos
add
fimul
jge
cwde
nop
jae
out
inc
mov
inc
jle
and
lds
mov
xchg
sbb
mov
inc
cmc
lea
xchg
jb
or
mov
xchg
add
push
icebp
push
pop
jae
bound
jns
(bad)
mov
sub
xchg
shl
jecxz
sahf
jg
xchg
or
cmp
mov
mov
iret
dec
add
je
daa
xchg
push
sbb
fdiv
inc
inc
int3
jmp
(bad)
pop
ret
mov
push
mov
sub
cmps
ins
xchg
pop
push
or
sbb
pop
mov
jl
push
test
stos
jno
dec
xchg
push
(bad)
js
mov
or
xor
mov
jbe
adc
pop
rcr
(bad)
sub
ins
xor
fld
es
fwait
lea
lds
adc
psllq
orps
pushf
loopne
mov
pop
lea
popa
mov
daa
stc
lods
fisubr
stos
mov
ins
xchg
xchg
or
xchg
pop
add
cdq
popf
icebp
test
mov
call
adc
xchg
pop
mov
fcom
cmp
bound
loope
xchg
lds
lahf
fldcw
xchg
adc
les
lods
xchg
je
jae
adc
fldenv
(bad)
pop
dec
(bad)
stos
imul
mov
lods
cmps
aad
jg
xchg
movs
cmp
and
and
and
push
fwait
aas
sbb
inc
inc
mov
pop
xchg
dec
int3
adc
cmc
inc
std
cdq
mov
pop
or
push
push
icebp
inc
xchg
adc
sub
rcr
jge
and
(bad)
mov
mov
pop
pop
xor
test
sti
sub
mov
dec
cmc
xor
mov
pop
xor
out
xchg
dec
xor
cld
lea
jecxz
adc
fstp
(bad)
pop
sbb
aam
ret
adc
adc
pop
xchg
jge
test
inc
xchg
push
inc
sub
popf
mov
rol
out
jl
ffreep
mov
enter
push
sub
rcl
cld
pop
and
imul
jge
in
inc
push
jb
xchg
stos
cmps
inc
lods
sbb
addr16
push
mov
dec
fs
mov
add
dec
push
and
cmp
sbb
xchg
out
mov
les
inc
lea
out
adc
mov
pop
imul
sbb
dec
inc
test
dec
lea
call
in
jmp
mov
jbe
cwde
jl
add
(bad)
rcr
ins
int3
jge
fs
cld
mov
and
(bad)
xor
pop
shl
adc
test
int
cmps
aaa
adc
or
sub
lods
repnz
fdiv
fisttp
push
icebp
ss
or
push
fist
or
adc
adc
sbb
jle
adc
xchg
nop
jge
mov
xor
jmp
adc
mov
pop
jge
jge
aaa
ret
mov
and
mov
mov
push
adc
ins
sub
add
mov
jns
xchg
jmp
mov
mov
fwait
inc
xor
mov
movs
aad
popf
movs
sub
je
mov
jl
cmc
je
add
(bad)
adc
xor
(bad)
xchg
jns
jb
fcmovne
movs
mov
xor
fs
xor
sbb
es
call
xor
lods
inc
mov
std
jle
repz
xchg
mov
add
mov
cmp
and
rcl
jmp
pop
xor
xchg
aam
fdivp
out
pop
iret
cld
jmp
movs
add
sub
call
jle
adc
or
mov
mov
pop
jmp
rcl
pop
stos
out
sbb
icebp
retf
and
sahf
pop
jecxz
lea
(bad)
lock
fmul
addr16
mov
push
jb
mov
lods
pop
push
and
sahf
movs
mov
dec
and
aam
dec
das
in
jle
addr16
imul
jae
shl
push
pop
jae
daa
fwait
bound
or
sbb
jae
shl
cs
jnp
sub
loop
mov
cld
data16
mov
shl
xchg
push
out
movs
sub
push
mov
xchg
stos
mov
pop
pop
xchg
das
bound
int
xchg
push
stos
add
xchg
pop
cmp
das
xchg
shr
cs
div
stos
and
in
mov
stc
mov
aad
mov
movs
lock
popf
jmp
pop
add
mov
fdiv
inc
repz
nop
fcmovbe
cmp
nop
add
adc
dec
ret
sbb
push
data16
fwait
adc
xchg
fcom
movs
hlt
fcomip
xchg
loop
mov
popa
xchg
cdq
cmps
dec
push
call
xchg
push
dec
push
int3
add
clc
fisttp
mov
call
add
pop
xchg
xchg
and
fwait
push
test
mov
xchg
fwait
add
pop
inc
xchg
pushf
cdq
test
imul
xchg
sbb
mov
xor
sbb
xor
in
jne
mov
xchg
hlt
stos
dec
fwait
repz
push
ret
fcom
inc
(bad)
js
jg
and
lea
cmp
xchg
aas
xor
int
dec
mov
ret
(bad)
xlat
push
cmps
xchg
rcr
js
inc
out
ja
xchg
mov
xchg
xchg
sub
mov
into
cmp
jmp
xchg
out
pop
and
and
adc
sahf
shl
not
shr
fwait
(bad)
sub
and
gs
in
andps
ret
xchg
push
fwait
sbb
jge
int
xchg
scas
jo
sbb
dec
adc
xchg
mov
clc
pop
jbe
test
leave
lea
pop
cli
arpl
add
out
fidivr
xchg
gs
aad
xchg
mov
lahf
inc
pushf
xchg
add
in
dec
mov
jbe
dec
popf
jge
shr
push
fsubr
test
js
add
push
jl
repz
ret
out
adc
inc
call
push
and
into
xchg
push
in
les
movs
jge
ins
enter
mov
and
fdivr
push
adc
imul
(bad)
rcr
stos
hlt
push
out
sub
fmul
cs
inc
bound
push
jecxz
inc
data16
in
lods
inc
jno
mul
les
jb
addr16
xchg
mov
add
hlt
sbb
mov
(bad)
xchg
push
cmp
mov
imul
xchg
(bad)
adc
cmps
out
cwde
mov
mov
adc
aam
fstenv
dec
or
std
add
mov
jmp
xchg
je
test
cdq
aam
ins
adc
mov
icebp
mov
sub
push
jecxz
lods
test
xlat
popf
pop
imul
mov
mov
and
pusha
mov
xchg
sti
jl
loop
in
mov
push
add
mov
aad
aas
aam
add
les
(bad)
xor
jae
xchg
ret
or
mov
mov
and
push
ror
cs
jl
or
jo
sbb
outs
test
ds
pop
mov
fisttp
pop
sahf
or
xchg
push
mov
or
cmp
es
xchg
dec
push
sbb
fcomp
xchg
bound
ja
retf
lock
sbb
lods
test
mov
addr16
outs
inc
adc
jnp
xor
xchg
lds
lods
movs
xchg
cmp
mov
inc
mov
fild
outs
jmp
xlat
cli
sub
pop
adc
pop
or
xchg
aam
mov
loope
adc
repz
cmp
iret
(bad)
or
mov
xchg
fstp
jecxz
gs
inc
retf
jge
mov
push
not
pop
cmp
push
sar
inc
jmp
mov
xchg
push
shl
cld
mov
stos
stos
(bad)
sbb
push
mov
sub
int3
push
xchg
pop
ja
pop
popf
mov
push
fsub
and
ror
int3
sbb
mov
push
fcomp
je
sbb
out
jg
cmp
push
dec
ss
add
sub
adc
push
inc
ss
push
les
hlt
jne
jge
mov
hlt
enter
pop
or
push
jo
sbb
pushf
hlt
mov
loop
pop
cmps
int
fsub
mov
icebp
cmp
xor
loop
sar
int
hlt
jl
jge
pop
stc
and
dec
out
call
out
push
inc
je
dec
add
popf
mov
push
test
jge
jge
jae
and
lods
and
sbb
dec
arpl
aam
jne
xchg
adc
mov
and
(bad)
stos
inc
emms
imul
xchg
out
lahf
mov
iret
loope
mov
leave
outs
into
adc
xchg
sbb
dec
xor
mov
jl
mov
sahf
adc
lock
sbb
in
data16
cs
(bad)
in
jne
mov
inc
xchg
or
scas
jp
cmp
add
cmp
push
xchg
shl
lahf
xchg
int3
test
xchg
scas
cmc
cmp
test
xchg
mov
or
jb
mov
push
mov
dec
lods
sbb
iret
jae
push
push
icebp
mov
cmp
dec
or
or
sbb
or
mov
stc
xchg
mov
sub
lea
ins
pusha
xchg
mov
or
sub
dec
add
pop
xchg
jnp
jbe
jae
cli
and
mov
dec
push
xchg
adc
mov
scas
pop
jb
xchg
jge
sub
fs
push
out
dec
push
adc
adc
xchg
inc
repz
inc
out
adc
xchg
dec
adc
xlat
xchg
arpl
fdivr
push
mov
aad
xchg
push
mov
cmp
out
into
ss
pop
adc
jl
xchg
pop
aaa
iret
loopne
mov
xchg
fisubr
or
out
xchg
sbb
sbb
jge
xchg
das
ror
(bad)
xchg
call
scas
xchg
cmp
xchg
mov
(bad)
not
das
fwait
push
inc
loop
shl
pop
mov
jno
ror
mov
retf
jb
call
stos
movs
fwait
fwait
xor
sub
sbb
stos
clc
out
or
xchg
(bad)
loopne
lahf
inc
or
adc
fbstp
retf
sub
xlat
in
jl
add
sub
xor
test
adc
or
mov
push
mov
hlt
sub
es
jbe
ja
mov
mov
aam
shr
or
xlat
ror
xchg
rcr
or
sbb
xor
cwde
sahf
adc
pusha
cmc
test
rcl
mov
mov
xchg
cmps
and
mov
adc
into
in
mov
add
pop
mov
shl
mov
jne
xchg
aad
mov
icebp
sar
mov
dec
and
dec
out
sar
test
lock
mov
dec
pop
push
mov
mov
sbb
ds
sbb
mov
psllq
cmps
or
call
mov
(bad)
cld
lock
xor
not
mov
fidivr
dec
mov
push
nop
mov
push
in
jmp
ret
adc
push
lock
rcr
push
xchg
xchg
int
ins
or
jbe
jne
ja
jnp
ins
xchg
pop
mov
retf
shr
xchg
add
sti
das
xchg
lahf
add
mov
arpl
fst
add
mov
xor
ror
fcom
mov
shl
inc
sbb
add
xor
jbe
mov
mov
daa
in
and
mov
sbb
sar
test
sub
and
mov
xchg
jp
shl
xchg
call
xchg
adc
inc
iret
pop
je
idiv
sub
xchg
adc
mov
xor
test
push
stos
(bad)
mov
push
cmc
jp
adc
xor
and
aad
xor
ss
jp
adc
jo
adc
popf
enter
mov
mov
sbb
hlt
hlt
jg
repnz
xchg
cmp
jmp
jae
add
in
mul
jg
push
fbld
adc
cmp
imul
call
jno
popf
and
enter
into
aam
adc
shl
nop
pusha
daa
and
sbb
mov
inc
call
cmps
pop
cmp
push
or
sub
adc
xchg
lahf
jp
jnp
push
xchg
aas
(bad)
test
mov
fmul
jle
loope
jg
jmp
ror
sbb
sub
xor
rol
je
push
adc
adc
repnz
xor
test
fwait
cmps
adc
add
js
jmp
cmp
mov
mov
icebp
stc
push
jno
test
pop
ins
xchg
pop
or
mov
pop
jle
call
int
movs
cs
add
xchg
or
sbb
mov
(bad)
cmp
mov
sbb
lods
mov
sub
xchg
loopne
ja
jl
aas
sti
xchg
(bad)
enter
xchg
push
imul
mov
inc
xchg
lock
fidiv
or
pop
ins
mov
adc
(bad)
les
or
adc
add
jno
mov
lods
xor
fs
mov
lods
xchg
push
adc
movs
fcom
fwait
dec
mov
inc
repz
mov
je
fs
xchg
lds
xchg
jmp
into
inc
adc
aad
mov
fsubp
adc
dec
outs
xchg
pop
cmp
push
jmp
inc
push
ja
aaa
fcmovne
xchg
(bad)
pop
pop
sti
rol
mov
fwait
jl
adc
pushf
int3
stos
dec
fcom
jb
jecxz
push
push
or
xchg
add
pop
push
mov
sbb
mov
jmp
ins
xchg
dec
movs
call
loopne
adc
xchg
mov
push
inc
leave
sbb
clc
mov
sub
xchg
xlat
pop
aas
into
ins
adc
mov
add
mov
sub
adc
mov
xor
xchg
adc
loope
pop
stos
mov
pop
mov
bound
sub
retf
ret
sub
push
mov
iret
ret
mov
dec
inc
out
movs
xchg
jmp
jmp
and
xchg
inc
ds
popf
sbb
xchg
mov
or
xchg
sbb
dec
out
xchg
push
inc
in
xchg
ja
add
std
pop
inc
out
into
sti
dec
pop
pop
or
pop
mov
repnz
outs
add
sub
xchg
out
hlt
lods
(bad)
pop
xchg
cmps
or
mov
push
iret
sbb
clc
push
dec
adc
jae
jge
cwde
pop
adc
(bad)
adc
fcom
push
xchg
popa
xchg
cmp
pop
cmp
xlat
inc
xchg
xor
sbb
inc
adc
in
xchg
push
test
sbb
cwde
xchg
jb
out
das
aam
add
xor
js
outs
xchg
mov
or
addr16
repz
sub
xchg
pop
and
cmp
push
jno
mov
adc
fidivr
cmps
rcl
xchg
in
or
stos
lahf
xchg
mov
sbb
fwait
sub
add
inc
inc
mov
inc
call
inc
pop
and
xchg
push
and
mov
add
pusha
cld
rcr
sbb
nop
push
imul
sub
call
sub
add
cmp
xchg
popf
mov
adc
outs
stos
jmp
adc
fistp
adc
test
push
cmp
mov
popa
jmp
lods
pop
cmps
(bad)
scas
xchg
mov
xlat
ins
mov
leave
xchg
iret
ds
pop
daa
jo
sbb
test
xchg
fwait
dec
cmp
les
fcom
push
jp
or
mov
cdq
jge
test
dec
fldenv
test
and
adc
call
xor
pop
or
dec
(bad)
cli
das
shl
mov
cdq
and
(bad)
retf
add
jecxz
mov
add
enter
xlat
dec
pop
aam
stos
jo
loopne
out
mov
inc
mov
xchg
or
in
lock
mov
push
xchg
bound
sub
sub
xchg
jecxz
cmp
dec
aam
sbb
xchg
iret
loop
popa
push
shr
mov
out
(bad)
mov
rcl
std
hlt
out
outs
mov
sti
sub
fwait
sbb
pop
mov
or
loope
jae
pop
dec
jb
push
sbb
xchg
xchg
cmps
add
(bad)
bound
mov
inc
xchg
mov
shr
nop
rcl
or
lea
push
adc
xchg
sbb
(bad)
jo
std
mov
xchg
es
stos
xor
xor
xchg
xchg
sub
arpl
pop
aaa
cmp
xchg
outs
xchg
mov
xchg
jmp
loopne
add
call
sbb
test
ficom
sti
push
cdq
not
jne
mov
pop
xchg
adc
aad
fcom
or
imul
fwait
mov
jle
jp
in
loope
cwde
outs
shr
mov
scas
cmp
jmp
cmps
pop
add
aas
in
mov
mov
xor
pop
add
sbb
outs
cmp
int3
mov
inc
adc
cmp
test
rcl
push
mov
retf
inc
sbb
aam
jecxz
retf
jg
mov
jmp
xor
sbb
ja
es
xor
cmps
dec
fiadd
ror
adc
scas
xchg
nop
mov
jbe
xchg
cs
xchg
push
fwait
cmc
enter
add
mov
xor
test
imul
daa
pop
xchg
lods
(bad)
push
pop
adc
jnp
popf
push
and
mov
add
push
xchg
jmp
jecxz
or
pusha
lds
mov
cmc
mov
fcomp
xor
fidivr
lea
popf
dec
nop
test
adc
xchg
xchg
mov
inc
(bad)
ds
nop
pop
jb
and
push
popf
sahf
sbb
jl
xchg
inc
addr16
in
repnz
dec
jno
mov
add
push
and
rcr
retf
shl
ds
pop
aad
mov
dec
and
imul
ror
adc
xchg
lods
cmps
push
push
in
ins
mov
add
gs
xchg
push
inc
les
sub
adc
jmp
add
adc
jo
mov
sub
mov
fisubr
jmp
jns
aad
or
cli
sub
sbb
sbb
xchg
dec
and
jg
add
mov
iret
fistp
repz
ins
mov
jl
add
pop
int3
iret
add
mov
jmp
mov
aam
lods
push
push
push
hlt
outs
push
fs
mov
lea
call
repnz
fdiv
jge
shr
sub
cld
add
pushf
mov
cmp
inc
cmc
fwait
aad
push
sub
xor
mov
jecxz
daa
dec
xchg
fsubr
mov
sub
test
push
jns
jne
xchg
jmp
mov
std
jae
popf
jae
pop
cdq
mov
aas
cmp
xchg
int3
ds
in
dec
nop
mov
cmp
push
add
xor
sbb
lock
dec
jno
stc
adc
xchg
loop
dec
mov
test
inc
sub
mov
(bad)
call
and
lahf
xchg
adc
popf
mov
sbb
dec
in
mov
xchg
mov
jg
add
push
push
es
push
pop
fwait
adc
shl
dec
push
add
call
test
das
xchg
inc
arpl
mov
and
scas
sar
inc
cdq
xchg
jno
enter
xor
xor
jge
inc
push
ss
adc
(bad)
sahf
sub
xchg
sbb
push
jnp
outs
pop
mov
mov
or
(bad)
enter
pop
cmp
out
gs
jne
and
call
les
ds
mov
test
xchg
mov
lods
sub
xchg
push
mov
mov
adc
xchg
jnp
jmp
xor
(bad)
cmp
inc
xchg
std
icebp
adc
mov
call
xchg
sti
popa
(bad)
jo
fisttp
cmp
pop
mov
adc
sub
xchg
inc
inc
ficomp
xchg
scas
dec
clc
repz
inc
iret
in
sbb
and
mov
lahf
jo
sbb
pop
rcr
dec
test
mov
or
pop
inc
mov
lea
and
shufps
call
sub
sbb
mov
add
in
push
sti
call
adc
cmps
jo
sbb
pushw
mul
mov
into
shl
xchg
js
loopne
pop
xchg
cdq
add
stc
shl
ss
hlt
test
loope
sbb
cmp
adc
ss
lds
fwait
inc
push
fwait
push
sbb
test
inc
jns
push
retf
pop
sub
out
mov
jl
sub
shl
pop
inc
stos
idiv
js
test
xchg
cmps
scas
pusha
out
sbb
xchg
rcl
pop
fild
mov
daa
cld
mov
and
push
sbb
jecxz
mov
mov
aam
(bad)
or
lods
xchg
adc
dec
and
cmps
dec
in
and
shl
add
mov
fs
or
sub
or
nop
jg
mov
sub
mov
test
mov
push
out
cmps
xchg
mov
(bad)
int3
in
mov
jns
xchg
ja
mov
adc
andnps
push
cs
gs
in
cdq
dec
mov
cmps
cmp
adc
jb
jne
jg
cmp
fimul
jns
jbe
leave
sbb
adc
mov
stos
aam
jb
mov
jne
push
popa
(bad)
jno
pusha
in
xchg
dec
loopne
mov
mov
dec
fidiv
mov
add
inc
ins
out
xchg
ret
daa
test
inc
add
ret
aam
repnz
xchg
adc
jae
outs
not
inc
sbb
xchg
faddp
loop
nop
ja
gs
aad
xchg
test
xchg
out
sbb
push
pop
xchg
pop
pop
fwait
jle
imul
xchg
popf
repnz
(bad)
adc
(bad)
call
addr16
push
lods
sti
lods
cmp
inc
rcl
jnp
jno
ret
inc
xchg
popf
pop
cmp
push
xchg
dec
shr
das
sub
cmp
cdq
mov
js
call
mov
xchg
push
cdq
cmps
or
jle
popf
add
int
push
jb
imul
and
xchg
dec
cld
dec
ja
xlat
jb
outs
cli
inc
xor
cmp
and
inc
sahf
hlt
mov
test
xchg
jmp
int
cmps
mov
ins
nop
push
or
xchg
into
adc
and
push
outs
bound
jge
add
xchg
cmp
fimul
hlt
ja
pop
test
mov
inc
xchg
loop
iret
clc
ins
adc
jne
sub
cmp
stos
leave
and
mov
(bad)
jnp
mov
aam
push
into
xchg
push
iret
test
mov
push
ss
test
jmp
sbb
(bad)
lock
rcl
xchg
jnp
jne
xor
shl
cmp
adc
or
aas
mov
add
fwait
push
push
cmps
mov
and
in
or
(bad)
mov
ror
xchg
mov
shl
sbb
pop
push
push
mov
mov
out
mov
jl
stos
mov
out
xor
ror
sar
adc
mov
mov
jmp
(bad)
ins
jmp
pop
and
jl
(bad)
xchg
dec
out
inc
pop
repz
mov
cmp
inc
push
sub
mov
adc
mov
xor
cmps
neg
(bad)
pop
(bad)
mov
call
inc
test
jge
sbb
repnz
xor
lds
or
add
cmp
(bad)
push
cmps
mov
adc
int
adc
mov
jl
cs
fcmovnu
adc
and
add
xchg
pop
test
outs
xchg
imul
push
push
iret
dec
leave
aam
cmps
pop
xor
push
cmp
das
nop
xor
push
jb
fisttp
iret
popa
test
sar
push
mov
pop
sub
fdivr
inc
dec
push
cmps
cmp
hlt
cld
add
test
adc
xchg
movs
int3
xchg
test
dec
and
add
mov
cdq
ins
mov
jge
jo
pop
(bad)
data16
icebp
inc
dec
cmp
bound
retf
aaa
sub
cmps
inc
gs
aam
mov
mov
(bad)
clc
stos
fs
or
push
enter
xor
(bad)
jge
shr
retf
ss
xchg
push
pop
(bad)
mov
sbb
ror
sbb
push
retf
pop
adc
jl
scas
dec
out
add
push
mov
cld
call
fisub
mov
add
cld
sbb
dec
repz
xchg
cmp
push
mov
add
push
jl
mov
les
jne
push
shr
mov
dec
shufps
inc
(bad)
mov
ficom
out
adc
xchg
cmp
dec
ins
xor
shr
inc
fcomip
(bad)
fbstp
push
jns
stos
jb
(bad)
clc
jns
push
pusha
jno
fcmovnu
mov
popf
leave
jge
fisttp
out
lahf
inc
dec
dec
lahf
pusha
mov
aas
or
adc
and
into
jb
mov
jecxz
cli
outs
mov
scas
jge
push
or
mov
cmp
mov
jp
clc
push
mov
inc
add
mov
cmps
pop
pop
push
scas
outs
sbb
sbb
jg
mov
and
lahf
lods
int3
pop
out
fwait
dec
push
xor
aam
and
dec
mov
cwde
cld
pop
enter
and
jae
add
shl
fistp
sbb
inc
inc
pop
cmps
mov
sahf
adc
sbb
ins
and
cmp
jl
and
dec
mov
push
push
jge
rol
dec
loope
gs
mov
push
adc
jmp
pop
jge
cmps
pop
ss
popf
xor
mov
xchg
scas
les
sahf
mov
loope
dec
add
mov
jnp
and
mov
repz
cld
xlat
xchg
pop
adc
adc
pop
xchg
imul
shr
aaa
loope
mov
ins
mov
loopne
xchg
sbb
call
push
call
(bad)
sub
dec
mov
clc
in
sbb
mov
adc
or
cs
and
inc
out
xor
sub
cld
popf
ror
push
cli
jmp
push
cmp
jmp
hlt
mov
stos
xchg
in
call
setge
inc
inc
mov
mov
data16
xchg
xchg
or
cli
addr16
mov
pushf
cmp
adc
shr
mov
sub
cmp
xchg
iret
fst
fidivr
sub
lea
add
mov
or
xchg
mov
std
fdivr
xchg
cmps
jmp
xchg
or
add
xchg
repnz
sbb
loope
cld
sbb
sbb
or
aam
call
and
xchg
pop
cmp
and
xchg
cmp
xchg
cmp
shl
sbb
mov
fiadd
xchg
das
mov
pop
push
jbe
and
dec
pop
mov
dec
xchg
xchg
add
fidiv
mov
dec
xchg
icebp
dec
je
jns
mov
mov
push
or
movs
test
outs
mov
adc
cmps
add
rcr
jmp
pop
add
mov
pop
dec
xor
xchg
mov
mov
jbe
aad
mov
out
mov
imul
push
loopne
mov
mov
fucomp
ficomp
mov
cmp
dec
in
jno
dec
repnz
adc
dec
mov
(bad)
xchg
cli
mov
jp
cmc
adc
pop
adc
sbb
sub
pop
ficomp
jg
lock
cmp
and
mov
xor
cmp
loop
jle
data16
pop
xchg
cmp
sahf
loope
mov
mov
shr
push
inc
fsub
xchg
xchg
call
lock
cdq
cwde
add
fisubr
fld
dec
xor
je
jns
das
mov
jl
sbb
and
and
leave
rol
adc
stos
xchg
loopne
cmp
sbb
mov
inc
data16
in
jl
scas
jo
lahf
test
or
pop
xor
hlt
sbb
dec
xor
sub
xor
push
aam
mov
cmp
push
jbe
ins
addr16
xchg
movs
fadd
icebp
add
test
xchg
mov
xchg
and
in
mov
and
add
xor
into
test
push
xchg
cs
popa
(bad)
pop
cmc
xchg
lods
mov
clc
xchg
adc
loop
out
and
dec
xchg
loopne
in
xchg
mov
mov
aad
inc
mov
rcr
cmp
add
and
xchg
xchg
dec
aaa
lods
sub
jmp
lock
xchg
dec
push
cmps
push
jmp
mov
(bad)
int3
loop
adc
sbb
jo
fisttp
out
cwde
or
test
adc
or
jmp
(bad)
leave
mov
cmp
fst
xchg
mov
mov
push
into
push
push
mov
mov
adc
pop
sbb
add
pop
pop
adc
aam
loope
xchg
popf
ss
dec
inc
add
jmp
and
jecxz
sub
xor
movs
mov
nop
movs
mov
jae
xchg
stos
mov
mov
iret
jl
xchg
ja
add
mov
mul
dec
int
mov
xchg
mov
dec
mov
shl
jl
popf
xchg
movs
add
xor
call
sub
(bad)
push
sub
dec
xchg
stc
lods
mov
shr
pop
pop
jmp
jl
push
sub
out
xorps
sbb
xor
dec
mov
aas
lahf
xchg
and
in
(bad)
push
xchg
stos
pop
jae
push
sar
push
adc
lods
imul
sti
sbb
inc
cmp
lahf
mov
cmp
pop
dec
cmp
lahf
jmp
push
sub
ja
les
pop
lahf
pop
mov
mov
add
ror
popf
hlt
jge
inc
lock
push
fst
cli
(bad)
mov
xchg
popf
sub
sbb
int
xchg
test
mov
jmp
or
xchg
xor
jp
dec
fcomi
mov
sbb
iret
push
std
mov
fcom
mov
int
test
adc
cmp
jmp
scas
sahf
mov
loopne
adc
dec
push
adc
std
sub
aam
xor
pop
jae
adc
ficomp
stc
xchg
icebp
enter
mov
clc
sysenter
test
out
(bad)
scas
pop
jmp
pop
int3
(bad)
not
scas
mov
or
dec
xchg
test
xor
inc
pusha
adc
out
push
les
test
cdq
push
sub
sub
xchg
pusha
lds
inc
icebp
(bad)
aad
jbe
outs
and
xor
jmp
adc
push
xlat
jl
xchg
mov
cli
arpl
add
ja
test
xchg
adc
cwde
aam
js
cmp
adc
xor
xchg
inc
lahf
clc
ja
dec
adc
sti
imul
rcl
mov
inc
daa
mov
mov
popf
test
rcl
sbb
in
popf
pop
cdq
mov
sbb
xor
sub
sbb
adc
sbb
addr16
xor
xchg
js
shl
xor
push
icebp
jne
xchg
jmp
mov
jno
ret
adc
pop
and
loop
xchg
pop
in
cmps
jo
mov
or
jg
xchg
lahf
cmp
and
mov
(bad)
xlat
cmp
mov
dec
fist
cmps
jnp
adc
and
lock
xchg
push
scas
sub
dec
mov
aaa
xchg
mov
jg
mov
movs
mov
jl
mov
fsubr
xor
loope
or
xchg
sar
fidiv
cdq
retf
daa
(bad)
xor
out
xchg
ins
out
jecxz
mov
sub
repz
ss
into
loop
cmp
adc
inc
scas
and
xchg
mov
test
retf
clc
jae
inc
and
mov
push
movs
xor
cmpps
xchg
xchg
mov
jle
push
daa
pop
pusha
xor
xchg
add
ds
or
adc
icebp
xor
and
(bad)
sbb
jnp
aas
jmp
pop
jbe
pop
int3
add
ins
push
ficomp
test
repnz
xchg
push
pusha
and
xor
aad
inc
mov
mov
push
ja
xchg
imul
xchg
mov
mov
cwde
dec
inc
xchg
lock
mov
retf
test
add
mov
cmp
inc
fbld
or
xor
xchg
sub
out
and
dec
push
xchg
int
repz
cmp
xchg
jno
jmp
mov
xchg
jle
push
fisttp
aas
sub
retf
mov
cmp
hlt
(bad)
test
add
aam
mov
stos
xor
ja
int
bound
push
xchg
xchg
lock
xchg
mov
or
cdq
dec
ja
xchg
call
adc
xchg
pop
aam
add
cmps
xchg
rcr
mov
lea
xchg
(bad)
adc
xor
loop
(bad)
adc
mov
mov
in
mov
sub
cwde
add
jbe
sub
adc
xchg
xchg
jo
pop
xchg
adc
out
mov
xchg
mov
sub
aas
xchg
int3
cmp
enter
sbb
xchg
fmulp
leave
mov
xchg
dec
xor
or
inc
inc
jecxz
and
std
push
xchg
push
nop
test
sbb
cld
sahf
sbb
loope
xchg
mov
mov
mov
add
and
push
rol
adc
fs
and
push
jl
repnz
aam
or
pop
dec
rcr
adc
pop
add
movs
int
pop
pop
mov
mov
xor
rcr
es
jne
or
fs
scas
xchg
sbb
add
xchg
jp
test
test
dec
mov
pop
popf
adc
sub
cmp
adc
clc
fldcw
lods
sub
fdivr
test
je
xor
push
cdq
int
call
bound
shr
ret
xchg
cmp
addr16
rcr
(bad)
sbb
out
stos
test
add
xor
push
cs
cwde
sahf
in
js
int3
imul
jo
xchg
dec
pusha
or
cmp
mov
outs
mov
fwait
loop
or
mov
call
out
jno
pop
aad
xchg
add
repnz
fistp
jb
xchg
sub
xchg
add
push
sbb
and
xor
cs
cmp
and
cmp
dec
lahf
xchg
fcom
dec
bswap
arpl
repnz
pop
mov
stos
fbstp
xchg
jbe
adc
or
xchg
pop
add
outs
or
stos
into
clc
mov
add
ins
int
test
xchg
out
adc
mov
clc
cmc
loop
xchg
pop
test
loop
imul
fwait
jne
jns
fst
cmp
lahf
jae
shr
xor
fadd
mov
es
daa
into
pusha
or
xchg
mov
leave
hlt
push
pushf
fist
fwait
and
and
pop
sbb
mov
and
xchg
jmp
fld
add
enter
xchg
dec
or
inc
mov
xchg
and
call
add
mov
mov
imul
inc
imul
xchg
cld
push
push
fdivr
imul
les
fst
into
sbb
mov
mov
imul
push
in
adc
or
data16
(bad)
or
and
add
mov
xchg
in
and
mov
mov
mov
adc
call
cmps
cld
fwait
sub
shl
jge
(bad)
not
hlt
jl
or
xchg
hlt
fadd
aaa
xor
cmps
fcom
cmp
and
inc
xchg
aas
dec
cmp
out
mov
mov
icebp
push
xor
mov
cmps
scas
xchg
mov
popf
popa
jns
mov
test
pushf
data16
es
cmp
mov
sbb
int
adc
outs
mov
int3
push
daa
xor
mov
repz
push
aaa
and
push
pop
mov
cmc
push
adc
loope
repnz
push
lods
ins
sahf
in
dec
xchg
or
and
js
xchg
xchg
push
pusha
and
ret
loope
cmp
neg
aam
imul
fucomi
test
lea
je
adc
and
xchg
dec
fiadd
sub
out
and
add
cld
xchg
pushf
push
dec
(bad)
in
jbe
xchg
(bad)
loopne
pop
fist
scas
movs
xchg
mov
call
mov
xor
ins
shr
in
dec
ja
not
mov
test
mov
repz
and
mov
push
daa
xchg
sti
mov
(bad)
xchg
xchg
pop
dec
mov
or
inc
imul
ficom
mov
movs
cwde
cmp
dec
pop
cdq
xor
in
lahf
adc
loop
add
mov
adc
hlt
fild
out
mov
xchg
cmp
pushf
push
xor
mov
rcl
add
adc
xchg
loop
outs
das
xchg
lds
or
mov
out
sbb
int3
dec
xchg
pop
pop
push
xor
scas
std
push
test
cmps
mov
sub
idiv
call
xchg
mov
mov
std
push
mov
fwait
lods
imul
xchg
xchg
xor
enter
adc
lds
jnp
mov
dec
push
pop
repz
push
fwait
mov
gs
out
cmp
imul
or
inc
outs
scas
xchg
std
sti
jl
sbb
rcr
xor
mul
adc
mov
call
xchg
aaa
int3
mov
ins
jno
loopne
sbb
xchg
mov
pop
jecxz
adc
icebp
int
mov
hlt
iret
popf
lods
ret
push
in
mov
cli
and
cmp
mov
xchg
push
xchg
out
push
add
sub
pop
pop
jae
bnd
mov
jecxz
mov
and
cwde
std
jge
xchg
xor
(bad)
inc
in
push
add
xchg
and
out
in
pop
scas
inc
pop
je
vpmacsww
and
into
das
sti
add
push
mov
mov
mov
enter
retf
in
add
test
ins
fisubr
stc
mov
rol
push
hlt
lock
clc
hlt
xchg
pop
inc
jno
mov
jae
popa
and
pop
cmp
push
cwde
xchg
rcr
mov
aam
int3
jl
jno
mov
xchg
push
adc
out
adc
sub
out
ds
pop
push
jge
jg
shl
dec
stos
mov
loop
test
iret
int3
pop
call
dec
pop
les
andnps
rol
xchg
sub
aaa
xor
sub
cmp
(bad)
in
dec
enter
or
loopne
cmp
mov
cmp
xchg
test
push
add
mov
mov
les
xchg
jne
adc
cmps
mov
inc
es
in
xchg
push
push
ret
aaa
outs
out
jge
add
mov
xchg
push
adc
js
or
xchg
or
lods
sub
xchg
mov
xchg
adc
jno
and
addr16
xor
adc
mov
mov
xor
ror
mov
xor
dec
pop
(bad)
jne
inc
or
sub
pop
mov
xchg
lods
add
cli
dec
nop
dec
xchg
cwde
xlat
mov
mov
sub
test
ins
and
mov
out
xor
sub
push
push
xchg
jp
and
jne
shr
push
movs
xchg
dec
mov
mov
push
pop
stc
xchg
sbb
daa
pop
sar
test
dec
lods
sbb
sbb
sub
fwait
leave
sbb
dec
and
mov
(bad)
mov
xchg
test
(bad)
lock
or
arpl
xchg
push
pop
jnp
scas
xor
inc
scas
adc
fidiv
aaa
iret
xchg
adc
lahf
adc
jbe
sti
cmp
xor
and
xchg
scas
add
lods
aaa
xchg
cmp
es
(bad)
iret
dec
push
jle
mov
shr
aas
adc
and
ds
pop
sbb
cmp
loopne
fcom
cdq
lods
push
sbb
retf
adc
popf
jb
xchg
clc
lock
mov
pop
les
pop
outs
popf
jle
jae
or
rol
das
xchg
add
push
mov
lahf
repnz
loope
jge
lds
mov
xchg
dec
imul
sub
cmp
mov
push
inc
xchg
xchg
xor
imul
scas
jbe
pop
(bad)
fmul
xchg
js
jmp
sahf
add
cld
ja
stc
mov
repz
xchg
adc
add
out
and
xchg
repnz
sahf
pushf
push
cdq
jp
xchg
js
mov
call
adc
rcl
sbb
jp
mov
xchg
mov
sbb
fwait
in
mov
xchg
(bad)
int3
or
dec
xchg
xchg
adc
ds
add
xchg
(bad)
(bad)
xchg
cmp
jg
ins
enter
js
lods
in
aam
aad
dec
xchg
inc
lahf
fsub
xchg
sub
loopne
pop
inc
and
fwait
push
or
mov
sub
dec
adc
push
aad
lods
int3
loopne
sbb
fndisi(8087
test
and
xchg
pop
inc
inc
mov
retf
psubb
dec
push
ins
ja
arpl
pop
add
aas
cmp
rol
xor
cwde
and
scas
daa
cdq
xor
and
mov
arpl
pop
jmp
add
stos
and
jl
jecxz
lods
rcl
adc
push
pop
gs
(bad)
sub
xchg
aad
fcom
xchg
push
push
and
mov
fnstcw
mov
clc
ror
sbb
arpl
(bad)
ins
(bad)
bound
and
xlat
xchg
or
mov
ins
mov
adc
(bad)
out
jl
mov
xchg
mov
rol
jmp
or
push
unpcklps
cmps
sub
repnz
cmp
and
shl
test
test
fcmovne
cmp
cmp
push
sub
jp
cwde
mov
ds
js
sahf
xchg
lahf
cmp
pop
xchg
inc
fldenv
xlat
cmps
or
xchg
jae
push
aas
movs
xor
sbb
push
repz
sub
imul
stc
adc
scas
mov
sti
repz
sub
int3
fist
sub
cmpxchg
sub
inc
loope
xor
in
jge
xor
and
cli
iret
loop
test
pop
push
add
mov
mov
das
mov
icebp
inc
mov
inc
xchg
(bad)
fwait
out
jo
sub
xchg
push
mov
adc
sbb
loop
jne
xchg
enter
inc
xchg
inc
adc
cmc
ja
xchg
mov
std
retf
and
mov
hlt
jb
js
pusha
mov
int3
jne
xchg
leave
mov
imul
mov
jae
push
xchg
add
stos
cld
push
push
adc
push
les
test
mov
lock
add
xor
out
fwait
dec
std
and
rcr
into
add
adc
mov
int3
push
out
fwait
sti
jae
xchg
push
mov
jl
sbb
inc
dec
xchg
push
xchg
out
mov
sub
les
cmp
add
xchg
ficomp
jge
pop
fisub
mov
adc
les
xchg
scas
cmp
jbe
xchg
jae
call
popa
(bad)
sbb
adc
(bad)
bts
out
stos
sbb
push
fs
call
cdq
xchg
sbb
push
xchg
mov
fstp
fnstenv
dec
stos
mov
jg
add
xchg
in
mov
shr
xchg
xor
retf
inc
add
hlt
add
loop
test
push
jmp
mov
push
sahf
xor
pop
sbb
scas
sub
or
repnz
xor
pop
push
mov
dec
mov
test
icebp
sub
jmp
sbb
or
sahf
in
mov
stc
xchg
imul
hlt
ins
sub
xor
xor
xchg
fist
(bad)
and
lods
call
ret
jg
gs
dec
dec
(bad)
dec
sbb
pop
add
push
pop
and
ficomp
mov
frstor
mov
out
jns
mov
nop
sbb
sub
into
xchg
int
loopne
adc
mov
(bad)
cmp
adc
(bad)
sub
fwait
retf
xchg
je
in
inc
xchg
adc
stos
mov
pop
mov
jle
xchg
cmp
addr16
mov
pop
outs
xchg
xchg
test
xchg
lods
push
je
test
lods
ret
inc
ret
adc
push
imul
mov
sub
iret
in
cmp
cmc
cld
xchg
ret
mov
pop
xor
icebp
sbb
je
xchg
jle
cmp
fiadd
ja
sub
or
movs
fisttp
imul
xchg
scas
pop
ret
sbb
pop
cmp
xchg
cmp
pop
jns
retf
pop
shr
in
les
jg
rcr
fdivr
jno
adc
aaa
mov
xchg
mov
fild
jno
mov
pop
sub
or
push
jnp
cld
ins
stos
mov
lods
inc
pop
mov
push
xchg
push
adc
xchg
xchg
or
mov
outs
push
cmps
xchg
push
mov
cmps
push
sub
mov
ret
dec
ins
sbb
mov
xchg
scas
jae
test
ins
arpl
std
cmp
xchg
pusha
lahf
mov
mov
mov
call
mov
fnstenv
cmc
xchg
in
and
rcr
xchg
in
push
sahf
add
mov
(bad)
stc
inc
jno
ret
enter
ret
je
mov
xchg
mov
lods
in
adc
sub
daa
adc
xor
jae
mov
pushf
push
out
sbb
(bad)
mov
gs
jge
iret
pop
int3
aas
out
and
sbb
push
xchg
jl
not
adc
push
push
lods
pop
seta
jl
mov
mov
mov
sbb
stos
adc
or
cdq
popa
repz
jo
inc
dec
lods
xor
sub
loopne
out
push
stos
es
cmps
mov
pop
jb
jecxz
ins
jbe
xor
add
dec
xor
adc
nop
(bad)
or
xchg
scas
xchg
int
xchg
add
repnz
push
test
cmp
sbb
repnz
xlat
(bad)
subps
mov
mov
cdq
lds
icebp
sar
xor
adc
xor
repnz
mov
adc
and
pushf
pop
in
dec
ds
imul
mov
push
xor
push
add
jnp
cld
sbb
mov
test
(bad)
(bad)
xchg
test
ja
mov
in
add
xchg
and
ins
(bad)
fdivr
cs
lods
cmp
sbb
fcom
xchg
or
jmp
xchg
mov
rcl
fbstp
jae
mov
stos
test
mov
rcl
add
cli
lds
popf
or
mov
xchg
xor
xchg
xchg
enter
jns
cmp
and
and
xchg
xor
lds
stc
xchg
inc
rcr
rcl
sbb
cmp
adc
retf
fcmovnu
fadd
retf
and
pop
xchg
jge
sbb
test
fs
xchg
mov
rcl
xor
popa
pop
fcomp
adc
jne
test
ror
fwait
adc
xchg
cmp
sti
xchg
ins
pop
test
and
pop
jl
mov
sbb
jae
xchg
inc
mov
push
pop
cmp
mov
popa
ss
mov
outs
shl
xchg
in
(bad)
popf
inc
cmps
sub
shl
ret
mov
or
or
xchg
mov
test
or
popf
mov
jno
adc
sbb
out
lods
(bad)
or
lds
sub
jge
fdivr
enter
in
pop
push
pop
mov
xchg
rcl
out
mov
outs
aaa
pusha
xchg
sub
xlat
xchg
stc
lea
int
les
mov
(bad)
int
imul
xchg
push
mov
test
xor
dec
jb
lahf
enter
je
cmp
aad
call
loopne
mov
xchg
adc
mov
mov
movs
or
jbe
add
xchg
adc
push
cmp
dec
jp
cmp
cld
(bad)
cmps
cmp
ret
in
pusha
mov
cmp
popf
fwait
enter
(bad)
sti
mov
nop
scas
jnp
sub
cli
pop
ja
xchg
mov
ss
adc
pop
jge
mov
movs
adc
xor
repz
pop
mov
dec
push
aam
and
sub
das
rcl
mov
gs
lock
stos
mov
inc
aaa
lea
inc
xchg
jecxz
leave
test
fld
sbb
xor
cwde
sbb
pop
repz
mov
xchg
xchg
rcr
mov
jbe
push
pop
inc
retf
xchg
lods
fld
pusha
ret
popa
js
fwait
arpl
(bad)
out
aam
mov
xchg
sbb
bound
mov
dec
cmc
xchg
push
adc
mov
jge
adc
mov
cld
out
and
dec
jl
push
pop
(bad)
out
iret
movs
mov
cs
xchg
dec
fcomip
sbb
sbb
push
les
and
int
jae
mov
sbb
(bad)
lahf
pop
das
cmp
jmp
inc
setl
addr16
xor
clc
mov
stc
loop
xchg
mov
adc
sub
inc
fsubp
push
xor
(bad)
out
in
pop
fsubr
push
fimul
scas
mov
cmp
push
mov
xlat
and
mov
(bad)
sub
pop
lea
(bad)
sub
dec
ss
xchg
or
mov
out
jmp
jge
mov
or
cs
inc
mov
sahf
jl
pop
xor
dec
mov
fst
jnp
pop
xchg
pop
sub
call
jne
nop
lock
mov
out
mov
test
mov
dec
inc
neg
cmps
xchg
mov
aaa
jb
mov
sub
and
cwde
inc
jmp
push
das
push
push
(bad)
jnp
add
mov
shl
xchg
or
daa
fwait
adc
mov
(bad)
push
cmp
in
out
jge
xchg
les
in
mov
call
daa
fiadd
stos
adc
jecxz
fist
sub
in
pop
mov
inc
mov
xchg
add
mov
fs
pop
jbe
je
int
rol
fwait
adc
hlt
pusha
or
add
fstp
push
cmp
sbb
or
into
mov
add
pushf
aas
xchg
cmp
sbb
enter
mov
in
push
xchg
sar
inc
lahf
xchg
jecxz
push
mov
daa
jo
sub
sub
les
xchg
test
in
mov
fcmove
sbb
adc
push
fnsave
add
cmps
movsx
cmps
stos
adc
push
jne
xchg
dec
inc
scas
sub
pop
lea
xchg
ins
xchg
pushf
call
ret
jb
and
pop
cmp
(bad)
repz
inc
pop
xchg
or
or
enter
cmps
jmp
xor
xchg
adc
shr
inc
xchg
cmps
cdq
and
xchg
mov
popa
(bad)
out
(bad)
mov
in
inc
mov
sbb
aas
cwde
loop
adc
mov
sbb
mov
stos
in
in
jno
mov
add
push
or
retf
xchg
rcl
mov
cmp
fmulp
sbb
jle
add
and
unpcklps
mov
cmps
mov
jae
xchg
inc
cs
es
jecxz
xchg
(bad)
fst
inc
xor
stos
cmp
inc
pushf
jb
xor
mov
xchg
add
mov
or
test
(bad)
dec
xchg
test
rol
cmps
montmul
cmps
cmp
mov
xchg
(bad)
xchg
jge
pusha
mov
xchg
fwait
push
and
movs
inc
mov
mov
xchg
lahf
pop
add
sub
mov
int
mov
xchg
and
call
test
xchg
shl
outs
xchg
movs
or
jecxz
je
call
push
jp
out
push
xor
rcl
lock
xor
movs
xor
ss
mov
neg
xchg
shl
fiadd
mov
fwait
jg
jns
xor
pop
outs
pushf
jmp
mov
mov
sahf
hlt
into
push
hlt
inc
fsub
sbb
mov
mov
test
les
mov
add
lods
cmc
jl
mov
xchg
dec
je
adc
stos
mov
dec
xchg
cmps
sbb
dec
bound
rol
hlt
fistp
daa
test
sub
adc
shl
dec
pop
add
xchg
or
inc
and
xchg
adc
ja
int
das
mov
test
pop
pop
mov
fs
jge
in
and
or
hlt
lahf
jl
imul
xor
cmps
sar
xor
les
push
jo
sub
(bad)
aaa
test
pop
hlt
sub
pop
dec
dec
outs
ds
mov
jge
enter
jne
pushf
popf
jno
aaa
mov
and
mov
mov
jge
hlt
test
ret
cld
push
scas
iret
xchg
xchg
pop
popa
cli
xchg
mov
cmc
push
pop
data16
in
pop
fs
xor
mov
pop
dec
in
pop
xchg
sub
mov
add
jne
cwde
add
xchg
xor
mov
ret
bound
adc
mov
loope
test
push
mov
fwait
ins
push
fwait
xchg
jno
xchg
retf
addr16
adc
mov
push
dec
ja
mov
push
cmp
pushf
mov
out
stos
cmp
shl
(bad)
pusha
and
outs
jg
push
push
loop
js
faddp
xchg
les
inc
dec
repnz
stc
cmps
inc
or
repz
mov
jl
xor
add
popf
xor
inc
jo
xchg
leave
scas
add
and
rcl
and
xchg
jmp
push
or
das
jecxz
xchg
sbb
and
xchg
(bad)
push
and
dec
xchg
adc
ins
jns
enter
and
fcom
or
fnsave
jne
or
ins
sub
jnp
mov
xor
adc
mov
or
fcom
adc
int
loope
sub
pop
iret
pop
mov
jle
xchg
js
idiv
xchg
lods
inc
ror
sub
push
aam
out
ins
adc
mov
fcomp
ficom
xchg
ja
rol
(bad)
daa
sub
popf
fiadd
jle
jl
cwde
xchg
inc
mov
rcl
test
xor
push
xchg
jmp
lods
mov
push
je
xchg
adc
call
pop
test
xchg
mov
or
push
jg
fwait
jp
adc
imul
push
movs
or
cmp
pop
stc
mov
mov
data16
xchg
cmp
dec
mov
ficomp
push
xchg
jg
xor
(bad)
xchg
(bad)
mov
sub
xchg
std
into
icebp
inc
sbb
mov
test
dec
xchg
xchg
div
jmp
(bad)
(bad)
shl
ja
pop
iret
out
adc
test
mov
mov
call
cmp
int
ret
retf
fsub
in
retf
not
jle
or
jns
rcr
push
retf
js
cdq
lea
dec
jbe
inc
aam
call
xchg
mov
cld
adc
loopne
jle
fcomp
xor
cwde
fld
sbb
xchg
(bad)
es
mov
inc
sbb
xor
xor
sahf
sbb
cmp
js
dec
lock
and
cmp
cli
mov
les
fisttp
mov
jae
ret
cld
jmp
out
lea
adc
cmp
imul
cmp
fucomip
mov
(bad)
cmp
out
stos
call
test
lods
fs
ins
sbb
jne
or
pop
mov
mov
mov
fcos
mov
call
sub
aaa
stos
xlat
daa
sbb
mov
cmp
push
jmp
inc
xchg
xchg
add
and
inc
into
cmp
add
pop
ss
or
cld
popf
mov
ret
das
fbstp
fisub
xchg
shl
inc
xor
push
fwait
ret
in
mov
call
daa
scas
data16
sub
inc
repz
(bad)
mov
mov
pop
mov
cmp
test
jo
icebp
jecxz
inc
fs
loop
mov
xchg
data16
nop
in
test
(bad)
xchg
icebp
adc
mov
and
xor
adc
shl
xchg
shl
loop
sahf
imul
xor
ret
and
mov
add
neg
xchg
call
mov
xchg
ds
scas
je
(bad)
rcl
out
xchg
mov
(bad)
fdiv
lods
gs
sub
xchg
adc
pop
mov
push
arpl
jne
xchg
ins
add
adc
(bad)
xchg
les
pusha
lods
fwait
adc
and
mov
arpl
lods
pop
shl
fwait
xrelease
and
and
add
sbb
pusha
mov
xchg
push
mov
pop
sti
aam
cmp
sahf
cli
and
mov
movs
mov
cmps
jp
das
outs
inc
loop
mov
repnz
popa
out
pop
out
fdiv
icebp
pop
mov
repz
jbe
scas
or
popa
cmp
stos
add
mov
(bad)
jne
data16
imul
add
arpl
pop
pop
add
xchg
xchg
retf
add
jno
dec
xchg
popf
aaa
lods
fs
sub
fadd
dec
xchg
mov
jnp
(bad)
(bad)
xchg
scas
shr
xchg
xchg
out
aas
mov
sti
mov
outs
ret
mov
add
jp
mov
(bad)
mov
xchg
jl
loopne
leave
lds
into
push
sete
dec
or
and
xor
mov
ror
sub
push
not
(bad)
xchg
mov
xor
and
mov
sbb
push
(bad)
sti
(bad)
cmp
xchg
sub
cli
or
xchg
inc
bnd
jb
sub
add
popf
push
test
jg
mov
dec
mov
adc
adc
aam
test
xor
aas
clc
bound
arpl
hlt
outs
push
inc
retf
mov
jge
inc
push
repz
js
fcomp
fs
fadd
jo
xchg
dec
in
xchg
add
lds
push
(bad)
ds
loop
pushf
jbe
and
iret
xchg
jae
dec
loope
test
cwde
into
(bad)
jp
mov
mov
repz
cmp
jne
xchg
jns
adc
mov
stc
shl
in
add
retf
call
jl
out
jnp
fisttp
out
adc
cld
std
or
mov
les
mov
rcl
mov
shl
lock
mov
and
pinsrw
sbb
cs
and
mov
adc
jno
push
test
xchg
jnp
sahf
daa
jle
hlt
rcl
adc
repnz
xchg
(bad)
mov
test
cld
push
jbe
add
lock
xchg
xor
in
ret
sbb
xchg
xchg
xchg
pushf
push
inc
mov
cwde
xchg
pop
mov
push
xchg
xchg
aad
cmp
pop
sar
not
retf
pop
sub
sub
jmp
add
xchg
sbb
test
jae
cmp
add
stos
mov
mov
xchg
sbb
inc
hlt
sub
int
push
dec
daa
sbb
int3
aad
and
jge
in
ins
sbb
mov
xchg
mov
and
js
xchg
cld
out
jge
mov
fnstcw
adc
mov
aam
push
push
imul
ret
jmp
mov
mov
pop
mov
push
xor
xchg
fisttp
aaa
pop
xchg
pusha
or
pop
cli
jno
jbe
lock
mov
dec
dec
(bad)
(bad)
repnz
adc
xchg
out
test
jl
dec
push
loop
jb
pop
je
es
and
dec
cs
cmps
(bad)
cmp
xchg
iret
pushf
ret
inc
push
movs
lods
xchg
loope
add
ss
or
out
dec
daa
add
shl
add
jmp
adc
xchg
xchg
sbb
jns
jl
xchg
movs
xchg
in
(bad)
add
cwde
add
es
retf
hlt
push
dec
addr16
adc
je
xchg
mov
es
arpl
jae
push
xchg
xchg
stos
cmp
sub
test
push
sti
stc
fbstp
ss
dec
inc
xchg
jo
lock
lods
xchg
imul
outs
lea
repz
xchg
and
cdq
cmp
jle
cmp
fwait
test
adc
push
hlt
ss
scas
xchg
mov
xor
xchg
sub
adc
dec
fs
sbb
sub
repz
dec
loopne
add
xchg
mov
mov
or
shl
arpl
xor
repz
ret
ret
push
add
aam
xchg
mov
and
push
mov
out
popf
mov
movs
pop
jns
shl
cld
add
cmc
pop
xchg
sbb
sbb
scas
fwait
call
mov
jecxz
push
in
mov
dec
cmp
sbb
adc
cmc
int
xchg
bound
or
mov
ja
or
mov
mov
and
test
jg
adc
push
adc
mov
aam
adc
loope
jl
adc
sbb
push
xchg
add
or
sub
mov
or
mov
cmp
xchg
cmp
arpl
aam
sub
cmp
loop
mov
cdq
jle
add
int
mov
aad
cmps
fwait
xor
or
cmps
xor
dec
mov
shr
pop
sbb
xchg
outs
jae
test
xchg
test
psubsb
push
sahf
xchg
adc
pop
mov
test
push
es
xchg
dec
lahf
stc
mov
xchg
cmovbe
or
leave
sub
ror
imul
mov
mov
mov
aad
adc
nop
xor
shl
add
xor
nop
mov
push
loop
adc
das
call
aaa
dec
sbb
(bad)
xchg
xor
jns
jle
jecxz
xchg
mov
aad
xchg
clc
inc
dec
sbb
cmp
xchg
cdq
mov
and
jg
jnp
sub
pop
cs
add
or
sub
pop
cmp
icebp
(bad)
mov
jge
dec
sub
dec
movs
xor
mov
sti
lea
cmp
pop
js
ror
mov
mov
xor
jno
xor
mul
xchg
js
cmp
cmps
mov
out
or
in
fs
(bad)
mov
cmc
cwde
jmp
inc
push
xchg
dec
mov
pop
mov
pop
mov
(bad)
ja
shl
xchg
adc
inc
out
aaa
dec
jb
mov
add
pop
aam
xchg
es
ss
popf
sbb
jmp
retf
lods
jne
lods
cmps
dec
std
fcom
adc
cld
mov
mov
xchg
out
sub
shl
cmp
xchg
mov
mov
xchg
pop
outs
and
push
mov
stos
mov
mov
xchg
mov
lahf
repnz
rcl
gs
cmp
push
add
arpl
xchg
xor
loope
dec
add
push
dec
int3
sbb
xchg
dec
aas
cwde
in
or
out
addr16
sbb
mov
sub
je
fisttp
inc
mov
sar
push
jmp
ja
stos
fstp
mov
cmp
cmc
jmp
xor
imul
mov
dec
and
adc
mov
cs
in
lahf
and
mov
mul
push
jle
push
outs
in
push
xor
mov
and
daa
shl
jmp
adc
ins
jge
(bad)
dec
sbb
bound
int
cmp
and
sub
cmc
(bad)
aad
cmp
sbb
and
xchg
mov
add
mov
dec
pushf
cmp
lock
mov
mov
std
mov
(bad)
sub
mov
jo
fs
cld
pop
scas
xchg
sub
daa
es
int3
into
mov
hlt
xchg
hlt
jecxz
sbb
mov
add
mov
sub
and
or
xchg
jo
int3
outs
or
xchg
test
aad
pop
or
xchg
and
sbb
retf
xchg
add
push
xor
mov
ret
sbb
cs
push
dec
xchg
aaa
das
sbb
jg
dec
adc
or
dec
mov
fwait
retf
jecxz
push
call
out
test
adc
pop
daa
pop
push
xor
mov
jge
pop
ds
push
adc
cmp
ficom
xor
push
sub
mov
xchg
push
int
and
outs
cwde
into
add
int3
aas
aad
in
movs
and
(bad)
cmps
cmps
mov
mov
inc
mov
pop
mov
xchg
jo
test
enter
xchg
xlat
add
ss
imul
xchg
xchg
inc
push
mov
in
xchg
xor
mov
jmp
mov
adc
adc
xchg
mov
in
xchg
sbb
imul
xchg
sbb
push
xor
xchg
sti
(bad)
lods
hlt
add
xor
xchg
popa
stos
lods
test
xchg
ret
aam
loopne
inc
mov
out
xchg
cmc
pop
sbb
jge
mov
ins
lods
aam
lock
pop
jo
push
add
pop
sub
inc
loopne
cmps
mov
xor
pop
cmp
retf
cmps
in
and
xchg
(bad)
and
enter
xchg
inc
mov
mov
daa
jne
fwait
jbe
lahf
adc
dec
aam
and
cs
xchg
xchg
sbb
ret
and
mov
push
ret
ja
jle
push
shl
sub
jno
je
call
push
add
sbb
mov
inc
adc
movs
sbb
add
lods
imul
cmp
add
aam
and
iret
imul
pop
hlt
mov
sub
jecxz
lock
ffree
sbb
retf
jle
mov
sbb
xchg
mov
sar
popa
ja
ins
xchg
outs
stos
cli
inc
test
or
movs
push
test
cmps
dec
mov
cld
lahf
jmp
ds
clc
movs
add
dec
data16
shr
cmp
cwde
jge
dec
pop
push
fsubr
pusha
call
xlat
jecxz
mov
adc
xor
arpl
lds
sub
dec
add
cmp
movs
xchg
dec
adc
aam
jl
and
mov
jae
pop
jno
test
fwait
sub
retf
mov
shl
cmp
fsub
adc
push
add
jmp
jne
sbb
imul
nop
mov
not
mov
adc
jp
lock
pop
fs
mov
inc
mov
aam
aam
movs
lahf
rol
ficom
or
out
push
jl
and
xchg
imul
xchg
jp
sahf
xchg
push
cld
add
(bad)
xchg
sub
dec
mov
xchg
mov
sub
dec
fwait
xchg
icebp
aaa
sbb
mov
add
xor
addr16
js
aas
stc
gs
sahf
xor
movs
push
xlat
fwait
xor
add
bnd
sbb
adc
jmp
cmc
push
xchg
mov
stc
iret
dec
mov
mov
or
pop
mov
xchg
inc
inc
(bad)
in
test
sti
fcomi
mov
ja
movs
mov
mov
ds
retf
dec
mov
popa
aad
fiadd
xchg
sbb
mov
xchg
pusha
mov
sub
dec
push
jg
popa
mov
xchg
in
xchg
xchg
mov
pop
cmps
cmp
test
aas
ret
fdiv
(bad)
imul
popf
dec
mov
sub
arpl
xchg
enter
stc
lock
fcmovbe
mov
les
pop
jg
vandps
dec
out
stos
test
adc
xchg
outs
push
pop
test
jno
ds
popa
dec
(bad)
xchg
sub
imul
xchg
je
push
fwait
xor
jmp
cmc
and
sub
cmps
les
aam
adc
xchg
push
in
imul
icebp
jno
sub
test
xor
pop
xchg
push
mov
fscale
rol
fdivr
xor
jecxz
cli
call
mov
rcl
push
ins
inc
xchg
jno
add
mov
push
cmc
cmps
int
mov
and
inc
sahf
arpl
push
(bad)
arpl
xor
or
test
int3
xchg
or
fld
xchg
jmp
sbb
test
xor
daa
push
adc
movs
repnz
test
aam
inc
xor
pop
xchg
cmp
(bad)
xchg
dec
adc
shr
clc
push
mov
xchg
stos
popf
call
adc
cmc
pop
arpl
or
xchg
ret
int3
xchg
and
pop
or
ds
xchg
imul
sbb
icebp
xchg
int
js
adc
add
or
dec
or
inc
mov
jecxz
push
cwde
mov
(bad)
mov
push
mov
or
hlt
mov
aam
fidiv
repnz
in
jp
push
sub
mov
inc
cmp
mov
xchg
fbld
and
mov
adc
inc
xchg
adc
push
mov
icebp
addr16
dec
sub
and
je
xchg
or
aam
out
lds
scas
je
(bad)
jae
mov
inc
push
aam
adc
loopne
sbb
mov
inc
xchg
mov
leave
test
mov
mov
mov
jae
mov
jo
pop
mov
into
inc
adc
ds
fidiv
lods
popaw
fcom
fist
sub
mul
ins
pop
jge
xor
es
fild
lock
xchg
mov
sbb
lahf
xor
rcr
adc
cs
arpl
dec
xchg
push
test
inc
mov
aam
lahf
aad
xchg
xchg
js
(bad)
lahf
repnz
cmp
xchg
pop
or
cmp
sbb
push
cmps
cmp
je
push
test
int
push
in
push
dec
fwait
ret
call
jle
popf
and
mov
mov
jae
daa
xchg
out
scas
repz
fild
cmp
xchg
test
das
iret
test
pop
and
xchg
retf
fcmovbe
cmp
add
into
lods
adc
pop
es
mov
xchg
and
mov
dec
icebp
jp
xchg
sub
add
or
mov
call
push
adc
test
dec
xchg
xor
icebp
add
dec
arpl
pop
mov
mov
xchg
jb
les
xchg
mov
adc
fidiv
inc
sub
stos
idiv
pop
adc
or
pop
ret
dec
sbb
in
push
nop
ret
push
jmp
into
fdivp
mov
sbb
xor
pusha
dec
cld
xchg
push
jae
and
sahf
test
aam
dec
rol
mov
loop
and
lahf
in
dec
aam
jmp
and
or
in
mov
pusha
add
retf
push
mov
and
lods
xchg
sbb
aam
jg
jno
sub
adc
xchg
and
xchg
jns
gs
outs
(bad)
adc
jmp
cwde
fimul
cmp
jge
or
(bad)
(bad)
iret
xchg
sub
adc
push
cld
frstor
lock
test
mov
js
or
hlt
pop
in
sbb
mov
jb
xor
cmp
ret
jmp
mov
pushf
hlt
call
fs
enter
pushf
xchg
inc
mov
mov
xchg
sub
scas
leave
outs
or
(bad)
cmp
movs
ror
stc
mov
sbb
jge
push
lock
dec
(bad)
ds
push
and
xchg
loopne
pop
je
dec
lods
xor
ss
(bad)
mov
push
mov
rcl
mov
inc
or
(bad)
pop
sahf
sbb
pop
push
adc
pop
loopne
jns
push
xchg
jl
inc
aam
cs
and
sub
(bad)
adc
out
ds
jl
pushf
push
inc
mov
push
in
sub
in
in
xor
jl
js
pushf
loopne
jmp
inc
sub
popa
jnp
je
mov
dec
push
pop
stos
test
inc
xor
sbb
mov
fs
das
sub
test
xlat
test
xchg
gs
xchg
rcl
push
adc
xchg
xchg
cmp
sbb
das
mov
mov
mov
xchg
sbb
push
lods
rcr
popf
sti
imul
mov
push
adc
loop
jnp
and
xor
out
xchg
in
test
sahf
lahf
pop
xchg
inc
outs
cmc
enter
or
out
cmps
mov
push
pop
xor
sbb
adc
xchg
sbb
aad
sub
call
cdq
pushf
mov
popf
dec
aas
adc
pop
imul
jo
fwait
in
cmp
sub
pcmpeqb
(bad)
xchg
ja
dec
icebp
sub
jns
(bad)
xchg
int
lea
lock
xchg
stc
pop
xchg
inc
mov
adc
mov
inc
pop
xchg
or
push
adc
xchg
xor
pop
fs
xchg
jge
push
outs
mov
sub
and
xchg
imul
out
push
mov
addr16
ins
ss
int3
jne
mov
xchg
imul
cdq
xlat
cdq
in
mov
adc
out
mov
add
xchg
cdq
mov
xor
pusha
mov
cmps
and
scas
xor
mov
cmc
adc
xor
enter
jge
push
call
in
mul
xchg
test
and
xchg
test
jb
xchg
jo
pusha
mov
aam
int3
aaa
rcr
mov
mov
xchg
retf
push
(bad)
pmulhw
dec
in
mov
fcmovu
adc
cmps
sbb
xchg
inc
int3
cmc
adc
dec
pop
int3
xchg
xchg
add
dec
les
xchg
sub
(bad)
ja
mov
mov
push
rcl
ret
xchg
jecxz
sub
js
aas
enter
push
jle
xchg
data16
out
fisttp
mov
ja
jmp
shl
inc
int3
xchg
push
retf
push
cmp
add
inc
fwait
xor
je
lock
xchg
mov
int3
rol
pop
add
test
xchg
imul
mov
mov
ret
sbb
adc
rcr
jae
nop
sub
je
cmc
lahf
mov
adc
call
sti
inc
or
jbe
dec
push
sub
or
popf
sbb
mov
or
pop
xchg
mov
push
add
sub
retf
stos
xchg
pop
jge
mov
adc
imul
(bad)
inc
xchg
sub
push
pop
sbb
mov
test
mov
and
and
sub
mov
jnp
and
adc
scas
xchg
mov
jne
(bad)
push
dec
into
inc
movs
mov
push
sti
sub
adc
fiadd
int3
ss
mov
push
mov
shl
push
lea
and
xchg
sub
adc
mov
mov
mov
xchg
mov
es
sub
dec
test
cdq
lea
scas
in
xchg
addr16
int3
pushf
pop
test
xchg
aam
jp
fnsave
les
cmp
stos
xchg
dec
jge
test
sbb
les
popf
xchg
and
jg
loop
ss
(bad)
push
stos
xchg
idiv
push
or
adc
lds
mov
pushf
xchg
mov
mov
add
icebp
shl
iret
jmp
adc
adc
fwait
iret
out
push
jl
ins
imul
mov
aam
scas
rol
ds
cmps
pop
push
aas
inc
jp
xchg
jmp
rcl
mov
dec
xchg
mov
leave
mov
adc
xchg
lahf
add
push
and
adc
inc
js
xor
dec
es
xor
xchg
lea
fs
ss
jmp
int3
dec
cld
fwait
mov
test
push
sar
pop
push
xchg
stc
or
or
xchg
dec
or
mov
xchg
and
in
out
adc
adc
ins
dec
mov
or
xchg
pushf
mov
mov
scas
mov
fnsave
mov
push
push
pop
or
xchg
cmp
outs
loope
mov
sbb
sub
pop
fwait
mov
pop
inc
loope
xchg
pop
mov
mov
xchg
push
lock
(bad)
cwde
mov
js
xchg
or
test
stos
inc
jae
xchg
mov
lods
and
fwait
pop
fnstsw
retf
movs
das
push
mov
cmp
rcl
int3
jne
adc
daa
or
cmp
mov
xor
dec
mov
push
or
dec
popa
and
pcmpgtw
jg
cld
mov
xchg
imul
aas
mov
xor
and
push
dec
xchg
js
dec
aad
ficomp
int
rcr
add
mov
jp
into
mov
neg
push
stos
cmp
xor
js
cwde
and
in
jmp
pop
jl
adc
and
and
inc
ins
push
ja
xchg
xchg
test
xor
pop
xor
dec
test
sub
pop
lahf
mov
xlat
fist
xchg
cmp
push
push
mov
jmp
cdq
inc
adc
xchg
dec
push
add
aaa
pop
push
pop
mov
or
xchg
jp
daa
xor
jo
fcom
imul
gs
and
fdivr
iret
xchg
sub
adc
rcl
sbb
test
pop
pop
pop
jo
rol
out
mov
xchg
pop
add
ret
pop
pop
jbe
cwde
cmp
test
mov
xlat
sbb
sar
dec
fld
push
sar
xchg
and
loop
js
adc
mov
xchg
sbb
fwait
mov
repz
aaa
xchg
stc
sahf
pop
mov
stos
jmp
xchg
ds
into
mov
pusha
xchg
aad
pop
mov
test
cmp
xchg
cmps
dec
mov
sbb
(bad)
xchg
mov
dec
addr16
fisubr
xchg
xchg
and
stc
pop
fiadd
cmp
inc
test
gs
addr16
xchg
fisttp
push
mov
xor
cmp
mov
mov
push
fcom
push
shl
jbe
int3
popa
sub
dec
push
shr
push
mov
mov
push
add
cmp
mov
dec
xchg
nop
not
adc
add
vorps
mov
jb
and
xchg
add
scas
hlt
and
out
xor
jne
xchg
test
pop
test
inc
mov
dec
xchg
dec
enter
je
pop
mov
repnz
aam
js
mov
pop
cmc
fst
stos
lea
lds
sbb
(bad)
cmp
push
jl
repnz
mov
pop
ret
sbb
fcmovnbe
dec
xchg
movs
bound
xchg
fsubr
xor
xor
mov
lock
ins
xchg
mov
xchg
cld
cmps
jo
pushf
(bad)
jmp
xchg
jbe
aas
xchg
xor
or
bound
(bad)
fwait
adc
mov
jns
fsub
sbb
mov
sub
xchg
ret
jecxz
test
jo
xchg
stos
bound
cmp
je
lds
pmaxub
icebp
jp
dec
sbb
clc
jl
mov
add
into
retf
cmp
cs
push
adc
mov
add
and
(bad)
adc
out
adc
in
push
fisub
mov
xchg
xchg
in
fwait
stos
cmps
jne
push
pop
mov
ds
cld
shl
mov
lahf
fwait
xor
test
jmp
sbb
bound
dec
sub
cmps
mov
aam
das
mov
sub
push
sbb
xor
mov
push
adc
xchg
adc
imul
out
shl
adc
int
adc
stos
xchg
in
into
ins
lds
rcl
ret
stos
or
(bad)
xchg
arpl
xchg
mov
jg
das
xchg
out
mov
mov
xchg
jb
xchg
or
jae
inc
lahf
into
mov
mov
cwde
pop
pop
mov
ret
xchg
hlt
jo
(bad)
mov
mov
enter
jp
jmp
pop
daa
out
mov
lods
das
mov
or
xchg
cmp
jg
xor
je
xchg
adc
pushf
imul
dec
out
div
inc
retf
adc
int3
hlt
dec
movs
cwde
push
xchg
xchg
jle
(bad)
pop
div
in
ss
ins
sub
xchg
xchg
loop
inc
or
mov
adc
retf
sub
mov
fadd
cdq
dec
fs
das
xchg
mov
test
add
ret
xchg
mov
and
in
cmc
or
ss
mov
sti
sub
and
ins
js
xchg
or
nop
shl
push
push
lock
ins
adc
add
mov
out
dec
sub
mov
js
xchg
adc
mov
mov
loop
mov
inc
mov
mov
out
dec
int
mov
adc
mov
fwait
test
fstp
cmps
mov
mov
xchg
pop
jl
pop
xchg
stos
loop
mov
call
mov
dec
test
sbb
push
sbb
add
push
jmp
aad
xchg
mov
loope
sbb
jecxz
mov
repz
loop
sub
fisttp
aad
cld
dec
popf
ins
data16
std
cld
sbb
ret
ror
mov
xchg
push
cmps
xor
ja
cmp
mov
jnp
repz
push
test
cld
jge
cmp
xor
fcomp
and
jne
or
adc
fcmovnu
sub
arpl
xor
push
gs
mov
lds
inc
xchg
cmp
cmps
jbe
into
stos
jge
pushw
fmul
cwde
xor
mov
jno
sbb
ins
cmp
cdq
dec
xchg
adc
sti
dec
hlt
jbe
and
popf
fistp
fld
adc
imul
add
jbe
(bad)
sbb
das
xor
mov
mov
jle
sti
or
fldcw
mov
in
xor
add
(bad)
pushf
call
into
sbb
xor
push
sbb
dec
cld
movs
cmps
(bad)
sbb
inc
movs
movs
mov
js
cwde
adc
clc
lea
icebp
cs
jo
dec
into
xor
mov
pusha
fidivr
aad
add
fdivr
outs
adc
jb
pop
(bad)
pop
add
sbb
mov
xor
hlt
cmp
adc
mov
sub
cs
jmp
leave
out
mov
test
scas
dec
xchg
dec
in
push
or
xor
jge
add
sbb
std
pop
test
js
xor
adc
push
enter
push
xchg
lds
inc
mov
dec
clc
sub
aas
mov
push
ins
push
enter
mov
jp
adc
jnp
adc
push
jge
bound
jns
mov
jae
test
push
jo
pop
jge
repnz
mov
sub
pop
lahf
cwde
mov
xchg
push
out
imul
stos
test
cmp
pop
jge
xchg
cdq
jge
ret
and
mov
xchg
imul
cld
repz
jg
shl
scas
ror
cmps
shr
dec
sbb
(bad)
dec
les
mov
xor
jmp
jno
pop
add
add
mul
push
sahf
mov
jmp
or
fisub
stos
repz
adc
xor
adc
rol
shl
cwde
sbb
and
movs
jge
hlt
push
sub
mov
out
lock
xchg
inc
stos
scas
mov
cvttps2pi
movs
push
mov
inc
int3
jp
lahf
fdiv
arpl
xchg
add
push
imul
mov
xchg
jle
add
retf
sbb
arpl
sbb
xchg
pop
mov
fisttp
adc
and
cmp
xor
iret
and
pop
hlt
div
jg
int
test
jle
adc
fistp
clc
xchg
sub
mov
or
(bad)
mov
in
xchg
xchg
rcr
jne
xor
ins
cli
push
lock
pusha
bound
mov
pop
idiv
add
fsubr
ins
fstp
les
daa
stc
loop
shl
pop
xchg
jae
add
ror
push
mov
lock
aaa
xchg
sbb
sbb
dec
mov
lds
mov
stc
retf
inc
mov
ret
popf
jo
adc
hlt
fild
xor
add
ret
into
xchg
ss
es
or
push
jle
sbb
xor
or
icebp
xchg
adc
cld
dec
outs
inc
hlt
and
cmp
xchg
mov
ins
xchg
pusha
jge
adc
fldcw
repnz
push
stos
mov
cmps
rol
cmp
push
xchg
and
into
add
cwde
ds
xchg
repnz
(bad)
jnp
out
je
xchg
out
push
test
out
into
int
lahf
ss
je
adc
sbb
pop
data16
adc
lods
push
in
mov
jmp
stos
push
jge
call
mov
xchg
sub
jae
xchg
push
std
outs
xchg
inc
add
push
push
frstor
or
mov
xchg
push
adc
and
js
repnz
dec
scas
cmps
test
mov
pop
inc
sbb
aad
test
mov
imul
push
jae
add
inc
xchg
(bad)
fcmovu
out
ins
or
pop
fucom
out
adc
jecxz
daa
rcl
cwde
xor
xchg
xchg
mov
loope
mov
rcl
ret
movs
dec
fist
les
popa
add
push
and
mov
sub
add
push
cwde
int3
jge
repz
push
mov
shl
mov
mov
cmps
sbb
mov
xor
aaa
jge
es
retf
jl
push
stos
mov
outs
fdiv
scas
jge
jg
pop
sbb
xor
sbb
pop
mov
xchg
aam
cmp
mov
cs
mov
adc
call
int3
jmp
out
mov
push
xor
out
fistp
movs
cdq
out
jge
repnz
sub
xor
stos
mov
pushf
pop
inc
xchg
xchg
xchg
jge
dec
adc
push
out
ins
in
nop
mov
in
sbb
push
js
cwde
stos
jge
xor
frstor
popf
pop
fdiv
(bad)
or
adc
inc
push
lods
xchg
xchg
jl
test
repz
sbb
shl
jbe
xchg
dec
test
adc
mov
movs
(bad)
popa
push
inc
push
loopne
test
mov
push
je
jns
cdq
jb
xchg
out
add
xchg
test
(bad)
sbb
out
xchg
inc
shr
fs
sbb
adc
mov
sti
(bad)
adc
enter
jo
(bad)
jmp
xchg
loop
cmps
popa
pop
lods
repz
out
push
pop
ja
dec
jl
enter
dec
call
ins
pop
add
push
xchg
cmp
or
mov
jecxz
lahf
sbb
call
add
add
stos
fst
sbb
xchg
test
mov
ins
out
aam
or
and
fisttp
movs
add
push
je
pop
and
cmc
xchg
sbb
add
arpl
retf
test
lock
mov
xchg
mov
out
ret
push
lods
out
hlt
push
adc
push
inc
xor
div
repz
xchg
cmp
mov
xchg
or
call
imul
xchg
bnd
aaa
adc
cmps
jnp
call
push
or
xchg
iret
lahf
mov
retf
xchg
xchg
mov
shl
and
xchg
inc
jl
push
jg
test
loop
and
add
jp
fimul
popf
retf
imul
mov
push
clc
xor
mov
xchg
imul
inc
nop
xchg
std
out
js
ror
js
lock
(bad)
and
ins
xchg
jmp
push
movs
add
int
jbe
aad
pusha
(bad)
pop
push
mov
cdq
test
int
lds
mov
xchg
pop
mov
sbb
add
shl
lahf
inc
pop
or
bnd
jbe
test
xor
jle
push
ret
push
bound
fwait
in
mov
fs
xchg
sbb
(bad)
hlt
jb
add
or
xchg
sub
jmp
sbb
cmp
int
cdq
sbb
pop
mov
mov
popf
in
cmps
mov
push
les
adc
pop
(bad)
xor
scas
push
sahf
lea
or
pop
bound
js
lods
jl
push
les
out
aam
jae
cmp
imul
jo
dec
shr
adc
adc
test
scas
mov
int3
aaa
(bad)
xchg
sub
or
(bad)
cmps
test
dec
mov
cmp
rcl
fist
pop
dec
jp
xor
mov
fwait
adc
ficomp
ja
push
repz
loopne
sub
mov
cwde
sub
add
loopne
push
xor
aas
xchg
fs
jae
push
inc
(bad)
xchg
dec
push
aaa
mov
sti
cmps
xchg
jno
outs
das
fdivp
sbb
xchg
cmp
sub
mov
mov
pushf
inc
outs
cmp
sbb
xor
ins
pop
mov
or
je
xchg
jbe
les
in
inc
xlat
nop
mov
aad
jmp
mov
mov
mov
cli
xor
mov
stc
sub
repnz
std
mov
into
push
aas
push
mov
cwde
inc
enter
inc
aad
inc
cmps
mov
jecxz
inc
jns
mov
je
adc
sbb
xchg
loope
add
cli
sub
jbe
aaa
xchg
sub
or
xchg
repnz
pop
sub
arpl
outs
adc
scas
sbb
adc
mov
adc
jecxz
mov
push
and
and
daa
push
inc
sub
(bad)
shr
je
cmc
xchg
mov
not
dec
xchg
repz
push
inc
sbb
icebp
push
and
xchg
mov
sbb
cmps
rcl
clc
loopne
popa
iret
pop
fwait
jmp
adc
cdq
mov
mov
add
rol
loopne
or
sar
cwde
adc
mov
push
pop
out
not
xchg
jae
sahf
scas
and
jne
xchg
inc
mov
mov
adc
inc
inc
mov
xchg
leave
pusha
inc
cmp
aam
pop
and
lock
repz
push
mov
push
cmp
mov
dec
adc
xchg
dec
dec
cli
push
test
rcl
pop
jmp
pushf
outs
fcomp
imul
xchg
mov
pop
push
addr16
out
into
adc
fwait
sbb
movs
test
test
repz
xchg
ins
lods
idiv
mov
out
movs
cmp
xor
fst
aad
cmp
cdq
retf
xchg
pop
push
or
or
std
aam
cs
cdq
(bad)
neg
sbb
jg
daa
lods
popf
push
push
fcomp
pop
lds
ss
int3
cmp
(bad)
retf
jle
cmps
call
sbb
add
in
das
test
aad
add
in
adc
add
pop
mov
lock
into
sete
and
rcl
or
push
lahf
into
mov
mov
test
xchg
sub
in
jp
jns
mov
lea
pop
je
push
dec
xchg
stos
pop
adc
mov
or
aas
inc
cmp
dec
and
inc
mul
shl
adc
dec
jl
cld
loop
adc
retf
mov
push
adc
xor
mov
mov
or
push
outs
not
sbb
ds
xchg
cld
lds
hlt
inc
mov
adc
pop
inc
aaa
inc
xchg
xchg
cld
je
(bad)
out
xor
xchg
inc
imul
dec
iret
fsub
dec
push
adc
xchg
cmc
jge
add
inc
outs
adc
icebp
(bad)
jmp
cmc
les
mov
ret
add
shl
dec
loop
xchg
mov
jmp
jl
push
cmps
test
ret
(bad)
fcomp
dec
dec
cmp
pop
jl
pop
imul
add
jno
dec
cwde
mov
mov
xchg
mov
xor
inc
mov
shr
pop
out
inc
pushf
sub
xchg
add
xor
mov
repz
in
push
imul
mov
mov
loop
sub
mov
mov
std
push
imul
out
sub
dec
es
out
outs
jl
adc
add
xchg
or
sar
ins
xor
leave
xchg
dec
imul
cmc
fist
xor
cs
pop
xchg
(bad)
rol
xor
push
add
xchg
push
and
je
nop
xchg
sub
gs
ds
and
mov
jns
pop
inc
dec
push
fcom
mov
pop
xchg
or
xchg
ss
out
adc
inc
dec
mov
pushf
rcr
inc
cwde
sub
(bad)
push
dec
xor
add
sub
cli
rcr
xor
not
push
mov
div
cmp
push
and
inc
jmp
push
xor
add
and
push
cmp
lea
fbld
pop
mov
pop
push
aam
ins
imul
xchg
fdivr
cld
call
xchg
aam
loopne
in
cmc
bound
pop
repnz
scas
cmp
nop
sub
fcom
mov
ret
xchg
jae
push
or
xchg
add
std
repz
call
and
dec
xchg
scas
inc
mov
cmp
test
xchg
jge
pop
fisub
fnsave
cmps
fucomi
mov
test
mov
mov
outs
repz
ins
cld
in
cmp
xchg
rcr
sbb
xchg
(bad)
lock
fwait
sbb
push
mov
gs
sbb
lea
les
push
sub
fidiv
push
jb
xor
(bad)
xchg
pop
outs
jg
sbb
ror
shl
xchg
popf
(bad)
mov
mov
jg
jae
mov
test
xchg
daa
call
mov
rol
cwde
repnz
movs
fcmovnbe
sbb
leave
jb
adc
ins
jmp
into
mov
int
jge
call
cmp
mov
enter
test
bound
jl
or
aaa
xor
pop
dec
(bad)
xchg
adc
imul
iret
cmp
fsub
jne
aaa
call
or
icebp
jbe
ss
adc
add
jge
sbb
mov
neg
aaa
sub
sbb
nop
es
xchg
cli
mov
xchg
repnz
in
adc
mov
xchg
test
clc
loop
ret
popf
int3
fcmovb
sbb
inc
push
dec
out
js
rol
sbb
mov
sub
inc
andps
fsubr
lock
rcr
dec
sub
dec
jo
push
aaa
pop
leave
rcl
jmp
pop
xor
add
sar
fadd
je
fimul
loopne
movs
adc
adc
pop
fist
and
xor
in
mov
jne
lods
jecxz
sbb
jg
in
leave
jge
pop
(bad)
mov
in
jbe
cmps
cmp
push
jl
jge
pop
and
out
push
repz
pop
inc
add
pop
std
movs
and
sbb
add
xchg
stc
add
jl
mov
xchg
adc
in
cmps
push
dec
ins
(bad)
inc
dec
pop
js
cmps
in
adc
cld
(bad)
int
xchg
jae
pushf
aam
stos
mov
pop
lds
into
xchg
inc
jb
and
and
push
push
popf
push
jg
imul
mov
(bad)
loope
dec
fist
adc
mov
fistp
jge
mov
imul
mov
inc
mov
test
div
adc
(bad)
popf
and
inc
mov
sbb
das
cwde
dec
fild
stos
jl
les
pop
pop
fadd
xor
rcl
jl
jbe
je
sbb
and
sub
and
rcr
inc
nop
jnp
xchg
inc
pop
sbb
stos
or
mov
or
call
mov
pop
outs
and
push
or
sub
add
pop
cmp
push
sbb
int3
js
hlt
dec
cmp
lods
rcl
or
(bad)
and
out
repnz
dec
jmp
dec
in
and
lods
pop
mov
pusha
cmp
aad
stos
push
or
xchg
add
jecxz
ret
scas
xchg
movs
stos
and
mov
cli
adc
pop
xor
loop
xchg
and
xor
mov
pop
test
inc
xchg
in
sbb
ins
add
fs
sbb
push
push
xchg
repz
test
imul
mov
xchg
mov
hlt
mov
mov
and
or
mov
imul
ficom
xchg
out
xor
xor
pushf
popf
(bad)
sbb
cmps
lahf
mov
mov
in
iret
cmp
sbb
xchg
loopne
or
std
leave
rol
and
xor
daa
jne
call
pop
(bad)
pop
jae
cmc
shr
push
adc
jl
mov
mov
mov
mov
mov
cdq
mov
xchg
mov
xchg
push
adc
ret
cmp
add
popf
je
push
jg
je
xor
xchg
inc
sub
push
jbe
popa
xchg
lods
ins
out
stc
in
inc
ret
cmps
xchg
or
or
jne
xchg
pop
shr
fs
dec
icebp
and
fwait
je
jg
sbb
pop
inc
xor
xchg
inc
inc
aad
ins
adc
loope
sub
test
(bad)
inc
push
adc
xlat
rcl
sub
xchg
jecxz
pop
nop
sbb
sahf
xchg
shr
mov
xchg
ror
lods
div
xchg
push
repnz
xchg
mov
cdq
sbb
xchg
repz
sti
fsub
dec
push
xor
mov
cmc
mov
ret
fidivr
sbb
xchg
imul
cmp
adc
or
data16
shl
inc
or
js
lock
lods
or
or
pop
adc
stos
pop
addr16
xchg
(bad)
repz
inc
jp
mov
fidiv
mov
push
adc
call
shl
mov
pop
lods
sbb
test
leave
push
dec
or
fild
push
sub
adc
fadd
mov
xchg
dec
fwait
lods
or
stos
sar
inc
test
imul
fcom
or
pusha
jo
inc
clc
icebp
shl
mov
jne
adc
stc
xchg
sbb
das
dec
and
mov
xchg
push
mov
(bad)
xchg
xchg
(bad)
bnd
xchg
jp
cli
and
mov
pop
adc
sbb
aam
(bad)
xchg
jo
fidivr
push
or
xchg
adc
pop
push
xor
inc
mov
xchg
loop
xor
cs
add
sbb
shl
mov
cwde
pop
cmp
or
add
cmc
fld
mov
or
xor
jp
xchg
push
push
adc
inc
jecxz
ins
xlat
test
test
xchg
popf
aam
jecxz
jno
out
xchg
(bad)
rcl
dec
jge
mov
sub
ss
retf
xchg
loope
xchg
lock
sahf
cwde
int
jb
movs
ds
jge
loop
cmc
xchg
and
and
fldenv
add
loopne
mov
push
mov
not
pop
mov
xchg
iret
frstor
push
push
rcl
xchg
sbb
xchg
ds
test
arpl
mov
mov
xor
mov
gs
retf
dec
cmps
xchg
pop
jp
or
xchg
xchg
xchg
adc
jbe
int3
mov
retf
cmp
nop
retf
shr
sub
test
aas
out
fucomi
stos
cmp
sbb
das
aaa
jmp
mov
adc
xor
mov
mov
adc
or
xchg
in
xor
mov
jl
xor
dec
push
cmps
std
hlt
cmps
ins
mov
xor
mov
lahf
test
pop
push
or
pop
push
neg
jmp
iret
jle
or
inc
add
pop
inc
xchg
shl
sub
sbb
sbb
mov
and
clc
push
add
jbe
sub
push
xchg
daa
in
aas
xchg
sub
icebp
stos
sub
call
ror
cmc
cmps
push
and
leave
jno
shl
xor
jg
shl
fcom
cmps
push
xchg
add
push
movs
dec
dec
xchg
sbb
mov
retf
outs
hlt
ss
cmp
xchg
hlt
xchg
dec
mov
adc
xchg
nop
retf
call
mov
inc
mov
xchg
xchg
dec
stos
js
adc
in
lods
sub
fidivr
xchg
or
xor
pop
in
sub
out
mov
and
cmp
(bad)
xchg
dec
fcmovbe
jbe
add
out
dec
(bad)
and
pop
inc
xor
sbb
push
clc
mov
xchg
cmp
aas
mov
xchg
fmul
bound
xchg
push
mov
(bad)
xchg
jbe
xchg
xor
pop
out
dec
push
jmp
pop
ins
adc
lods
(bad)
adc
mov
adc
sbb
inc
popa
adc
mov
adc
dec
xchg
push
fst
and
or
jne
adc
outs
inc
je
xchg
scas
aaa
sbb
mov
stc
xchg
xor
sub
sti
mov
cmp
scas
cwde
cmps
sub
pop
nop
mov
arpl
jl
loop
xchg
cmp
in
outs
xlat
jbe
cwde
mov
ins
jp
push
fnstcw
xor
dec
xchg
push
sbb
test
sbb
sbb
adc
shr
xor
fst
xor
scas
stos
and
icebp
aam
sbb
jae
sub
mov
out
sbb
xor
sbb
mov
lods
aam
jmp
adc
push
repnz
imul
rcl
xchg
push
addr16
jb
and
cld
adc
mov
ins
rep
mov
jae
cmp
xchg
jmp
and
mov
mov
push
fcom
movs
test
inc
xchg
cwde
jo
jmp
inc
int
std
fmul
inc
dec
popa
xchg
pop
or
or
mov
jp
sub
adc
mov
jb
xor
push
lods
dec
xchg
test
mov
xchg
sub
stos
mov
mov
das
loopne
pop
mov
xchg
ss
in
and
inc
aam
rcl
int
xchg
pop
xor
test
xchg
mov
ins
dec
bound
and
mov
cmp
(bad)
jge
cmp
cs
shl
xchg
and
cli
or
cmp
mov
jns
mov
xchg
push
movs
out
(bad)
push
rcr
in
neg
cmp
int
jp
das
icebp
daa
or
test
iret
pop
xchg
(bad)
call
xchg
rcr
in
lds
nop
aaa
mov
xchg
rcr
mov
dec
stos
xchg
xchg
dec
jns
nop
jmp
inc
test
xchg
cli
cmc
int3
sub
mov
xor
mov
dec
mov
not
mov
repnz
adc
mov
ins
out
jmp
xchg
push
aad
sbb
popf
xchg
mov
pusha
jp
ss
rcr
xchg
aaa
scas
fcomp
ds
cwde
xchg
mov
xchg
repz
adc
cwde
xchg
mov
jb
clc
push
mov
gs
loop
cmps
pushf
dec
xchg
in
rcl
retf
lahf
in
mov
push
arpl
and
xor
adc
shl
shl
add
enter
cmc
sbb
pop
inc
loopne
cmp
adc
out
out
fidiv
mov
and
stos
(bad)
out
int
mov
les
fcmove
je
in
sub
jge
lahf
xor
sbb
sub
xchg
pop
fisttp
mov
bound
outs
push
(bad)
pusha
xor
dec
sub
repz
mov
es
add
pop
xchg
mov
push
xor
cmp
hlt
hlt
adc
fwait
xor
xchg
fistp
sbb
xchg
xor
cmp
cdq
lods
addr16
out
mov
cwde
popf
jns
adc
fsubr
mov
jb
inc
adc
xchg
repnz
add
call
push
pop
je
mov
mov
pusha
sbb
je
out
xchg
sub
hlt
in
int
xchg
and
sahf
xor
lods
xchg
mov
test
iret
adc
(bad)
mov
jge
xchg
das
pop
test
push
ja
das
aam
push
adc
(bad)
fisttp
xchg
rcl
aam
je
out
mov
call
jge
inc
xchg
push
mov
add
cmp
mov
sbb
xchg
sbb
dec
adc
daa
xchg
clc
add
jb
mov
sub
pop
test
cmps
xchg
retf
test
pop
not
dec
pop
mov
pop
add
(bad)
pop
xor
pop
rol
sub
adc
jmp
xchg
pop
call
fdiv
rol
mov
inc
pop
jmp
mov
inc
mov
xchg
mov
iret
mov
jnp
call
xor
xchg
scas
sbb
inc
xor
test
pop
xor
mov
shr
lods
fwait
add
pop
push
cmps
je
jmp
xchg
xor
dec
or
pusha
(bad)
mov
mov
xchg
fdivr
mov
pop
pop
stos
push
addr16
push
(bad)
mov
out
mov
and
pop
das
jo
or
mov
jge
sahf
xchg
ret
xchg
cmovp
stos
mov
fwait
jle
aam
test
jle
jp
lods
jge
push
sub
xchg
adc
in
mov
repz
jge
rcl
dec
stos
call
scas
xchg
hlt
xchg
in
and
mov
or
fdiv
jmp
pop
or
(bad)
inc
pop
outs
xchg
es
xlat
push
and
int3
xor
xchg
(bad)
jmp
call
xchg
pop
adc
pop
inc
fst
xor
mov
add
sar
push
repz
mov
sbb
mov
popf
cmc
cld
inc
pushf
dec
xchg
jl
xchg
mov
xchg
mov
add
dec
xchg
xchg
movs
mov
les
adc
les
cli
or
xchg
adc
scas
cmps
jmp
xchg
(bad)
cmp
add
sar
xchg
icebp
mov
xchg
jmp
add
std
cwde
imul
push
hlt
loopne
fwait
ss
scas
in
add
xchg
sbb
int
dec
xchg
and
pop
mov
pop
stos
and
xchg
mov
in
aam
or
icebp
jmp
mov
add
mov
aam
push
xor
inc
or
pop
xchg
jno
fnsave
xlat
loope
cwde
xchg
jge
xor
jg
repnz
mov
pop
lds
ins
add
mov
rcl
cs
and
mov
in
xchg
adc
xchg
and
xchg
in
inc
in
push
cmps
or
je
fwait
add
fdiv
dec
in
int3
ins
xchg
xchg
pop
in
(bad)
fnstenv
adc
mov
adc
outs
arpl
pop
xchg
push
or
pop
iret
sbb
lods
xchg
popa
xchg
shl
xor
dec
aad
pop
pop
rcl
xchg
xchg
imul
nop
rcl
push
sub
jge
imul
gs
cmp
xchg
test
add
pop
inc
dec
xchg
jg
dec
xchg
imul
hlt
xchg
inc
xor
shl
xlat
retf
ins
push
pop
jg
inc
xchg
cmp
cs
jecxz
les
mov
iret
and
push
out
push
add
xchg
mov
xor
mov
repz
popf
mov
mov
inc
push
sub
fwait
cmp
jge
sub
push
fcmovbe
xchg
mov
aam
add
ss
mov
mov
xchg
push
dec
or
cmp
out
jl
mov
rcl
xchg
and
data16
mov
jae
add
xchg
out
inc
in
retf
mov
fwait
and
mov
test
push
push
and
call
dec
xchg
cwde
(bad)
xor
jp
adc
jg
pop
push
test
pushf
mov
and
movs
int3
xor
lahf
rcr
add
(bad)
rol
ins
stos
mov
and
sub
mov
ret
jl
pop
xchg
shl
mov
cwde
fwait
cmp
cmp
pop
outs
or
xor
out
lahf
push
mov
mov
xor
xchg
lods
int
cli
push
mov
int3
jl
fidivr
dec
mov
mov
(bad)
jb
push
mov
in
jmp
es
cld
mov
jp
jbe
mov
or
jmp
cmc
push
mov
and
or
mov
pop
enter
mov
hlt
push
loopne
sbb
mov
dec
retf
fwait
pop
adc
cmp
inc
jo
lock
into
mov
sbb
push
pop
adc
jmp
movs
mov
xor
(bad)
cmp
jne
aad
xchg
mov
loop
add
push
pop
jge
adc
xchg
ins
dec
es
xchg
push
push
inc
xchg
or
imul
jae
xchg
pushf
sti
pop
jb
or
pop
mov
xchg
out
test
aam
aad
test
imul
and
bnd
sbb
jge
out
rcl
sub
push
adc
or
sti
xchg
sbb
xchg
cmp
call
xchg
(bad)
or
xchg
mov
retf
mov
jg
push
cmp
or
pop
mul
int
mov
mov
call
mov
add
jo
pop
xchg
and
(bad)
mov
cmp
test
rcl
xchg
sub
bound
sub
or
ror
psrad
fs
pop
inc
jecxz
mov
movs
mov
lea
or
ss
fs
xchg
sub
and
stos
jbe
cmps
xchg
cli
mov
jmp
push
adc
jl
push
mov
data16
js
xchg
int3
xchg
push
push
add
in
mov
and
repz
es
xor
es
mov
xchg
adc
sbb
mov
xor
inc
and
pop
add
jge
fdiv
jg
pop
imul
xor
jmp
inc
adc
mov
cmp
mov
mov
jne
xchg
es
pusha
sub
mov
xchg
jg
push
xchg
sub
mov
xor
xchg
dec
ret
jne
jge
mov
test
lds
fist
sbb
xchg
xchg
xchg
or
pop
inc
addr16
xor
mov
sbb
aam
mov
(bad)
xor
in
jno
out
mov
jnp
dec
movs
pushf
out
dec
mov
sar
xor
push
dec
in
and
stos
daa
xchg
pop
cmc
xchg
mov
cmp
dec
sub
mov
push
and
sbb
sbb
fbld
jge
adc
push
xchg
xor
sbb
les
and
adc
jmp
dec
inc
dec
fldenv
je
xor
sbb
cmp
std
jge
gs
sbb
cld
lahf
in
ret
pop
out
stos
pop
ds
xchg
data16
add
aam
xor
sbb
jmp
push
and
sbb
mov
xchg
cmp
sbb
or
jge
add
jbe
xchg
push
push
into
jl
sbb
stos
popf
sar
clc
in
inc
mov
mov
or
clc
push
cli
cs
and
fsubr
and
mov
repz
mov
and
push
cmc
out
mov
mov
pop
dec
cmp
mov
out
cmp
adc
adc
je
cmp
add
jecxz
stc
sbb
fdiv
mov
dec
sbb
(bad)
mov
lahf
xor
cwde
in
mov
sub
mov
in
pushf
fs
xchg
rol
dec
out
(bad)
call
inc
mov
inc
and
ins
out
inc
les
sub
or
xchg
jp
xchg
cmc
les
ja
dec
rcr
mov
sub
add
add
(bad)
pop
xchg
stos
das
arpl
stos
jmp
sbb
xor
shl
and
or
data16
ss
mov
pop
xchg
lea
test
add
mov
pop
jnp
and
dec
xchg
mov
adc
je
adc
pop
scas
ins
adc
xchg
xchg
jp
push
mov
xchg
sbb
(bad)
stc
jb
mov
adc
shl
dec
cmp
pop
aas
in
xchg
sbb
or
mov
push
inc
push
jno
jl
dec
retf
je
setg
push
and
push
adc
call
jae
stc
xchg
pop
cs
aas
push
add
test
mov
cmp
push
clc
fild
arpl
add
push
cdq
add
add
cmp
adc
cld
leave
test
jo
(bad)
sub
mov
lods
hlt
icebp
jg
xchg
shl
ret
inc
adc
dec
pusha
xchg
in
and
(bad)
fdivr
xlat
and
push
es
adc
call
loopne
ss
cmp
dec
fsub
and
je
sbb
push
sbb
popa
mov
call
hlt
xor
jge
sub
jl
in
inc
js
pop
aaa
mov
jg
stc
test
adc
adc
mov
jnp
mov
mov
inc
loop
ds
jp
push
mov
sub
ins
test
and
dec
jb
sub
jb
(bad)
fisttp
and
icebp
xor
in
mov
push
jbe
cli
(bad)
(bad)
loop
sub
aaa
call
aas
lods
sti
or
xor
mov
jmp
inc
dec
adc
sbb
fidivr
xchg
mov
jb
pop
dec
mov
xchg
mov
cmp
fld
dec
(bad)
jb
(bad)
cmc
sbb
aad
outs
add
fwait
stos
(bad)
push
xor
adc
pushf
mov
dec
movs
les
xor
mov
imul
lods
jge
inc
add
fdiv
sbb
jle
sbb
movs
mov
nop
mov
jo
push
inc
out
into
pop
loopne
(bad)
xchg
push
rcl
jb
ss
push
int
sub
adc
js
in
clc
pop
pusha
adc
loope
add
repnz
sub
xchg
sbb
loop
xlat
(bad)
mov
popa
in
ds
push
jns
int3
xchg
jnp
scas
xor
dec
(bad)
fs
and
jp
lock
iret
cs
jge
push
sbb
test
popf
ins
in
scas
(bad)
mov
das
imul
add
arpl
jbe
or
mov
push
js
fwait
lods
jmp
xchg
inc
in
(bad)
div
test
xchg
xchg
push
cmp
sbb
int3
sbb
inc
pop
xchg
shr
cmp
lahf
stos
addr16
es
sub
xchg
cli
scas
ret
sbb
nop
adc
int
bound
jns
push
and
std
adc
popaw
sub
adc
aam
mov
mov
jl
pop
mov
outs
fs
int
and
movs
jmp
loop
mov
out
xor
mov
xchg
ret
hlt
leave
ror
stc
mov
xor
cmp
dec
lock
jmp
xchg
dec
je
push
xchg
sub
ret
xor
jnp
inc
mov
xchg
jno
repz
sub
repnz
xchg
outs
out
xchg
(bad)
or
mov
xlat
inc
mov
into
jg
(bad)
cdq
popf
push
cmps
pop
xchg
aas
xchg
mov
jmp
push
mov
in
xchg
mov
test
pop
adc
imul
inc
call
arpl
movs
add
fidivr
push
or
adc
xchg
fst
pop
stos
mov
call
cwde
xchg
pop
jne
mov
aam
dec
xchg
jae
pop
mov
xchg
xchg
xchg
or
mov
xchg
adc
sub
shr
push
mov
jb
xchg
cmp
(bad)
enter
into
scas
out
mov
inc
xchg
xchg
cs
xchg
aas
mov
in
sub
dec
pop
inc
xchg
sbb
or
outs
xchg
ret
scas
addr16
mov
jmp
gs
xor
adc
retf
in
xor
aam
pop
or
xor
xchg
cmps
and
daa
sbb
xor
mov
push
jne
(bad)
test
xchg
in
xor
add
sar
loop
fidiv
scas
(bad)
xchg
mov
jns
imul
xchg
dec
add
imul
add
adc
pusha
pop
sti
lahf
sbb
and
xchg
jmp
hlt
add
push
add
jo
fs
das
imul
xchg
adc
xchg
xchg
push
xchg
xchg
stos
pop
mov
xlat
pop
cdq
mov
cwde
popa
daa
lods
aaa
jnp
and
add
rcl
mov
gs
sbb
js
dec
xchg
test
sub
xchg
adc
sbb
fistp
cmp
xor
sub
leave
and
mov
xor
lahf
mov
jnp
adc
push
(bad)
fimul
lds
hlt
adc
es
push
mov
push
and
xor
xchg
in
(bad)
imul
popa
cld
stos
pop
dec
movs
lock
imul
inc
mov
mov
sub
jb
das
xchg
push
ds
sbb
xor
dec
inc
fdiv
fs
in
mov
les
dec
push
cmps
repz
xchg
and
adc
dec
test
push
je
add
mov
jp
movs
sar
out
outs
es
xchg
les
shl
cli
push
pop
ja
cmp
popa
lahf
shl
adc
xchg
adc
inc
mov
mov
jnp
mov
xchg
mov
mov
push
cmp
leave
xchg
pushf
xor
(bad)
aad
int
xchg
xlat
repnz
frstor
jns
or
xchg
mov
lock
xchg
pop
pushf
movs
aaa
cmp
in
mov
dec
mov
cmp
push
popf
sub
ds
jmp
dec
out
cmp
mov
xchg
dec
and
out
sub
int
xchg
mov
xor
adc
xchg
inc
jle
pop
imul
repz
inc
out
lods
stc
push
hlt
out
cmps
push
cmp
dec
sbb
jl
sub
cwde
or
cmc
icebp
mov
mov
adc
mov
dec
sub
xchg
cdq
ins
xchg
push
in
aam
mov
hlt
daa
dec
xchg
cli
mov
adc
xchg
and
xchg
sahf
aas
push
xchg
test
(bad)
ins
mov
mov
cmc
push
cmp
cmp
pop
adc
call
loopne
xor
mov
fwait
test
jmp
repnz
mov
mov
test
sub
pop
adc
pop
out
fwait
lods
push
sbb
sbb
push
sub
ins
inc
sbb
les
cmp
adc
int3
xchg
mov
jnp
xchg
scas
jge
sub
push
vsqrtss
rcl
sbb
sub
jge
pop
cmps
xchg
arpl
ins
pushf
sbb
sub
retf
cmps
sti
xor
arpl
pop
es
lods
sbb
cmp
gs
neg
and
and
jne
xchg
mov
rcr
cmps
sub
pop
outs
scas
fcmovb
mov
sub
mov
adc
out
aam
adc
jmp
jne
out
inc
mov
jl
dec
fild
in
popf
lock
mov
outs
mov
(bad)
les
sub
js
jmp
out
sbb
mov
fcmovnb
mov
out
hlt
xchg
movs
sbb
setl
movs
call
hlt
xchg
jmp
sbb
(bad)
mov
imul
adc
push
lock
inc
adc
int
push
adc
add
xchg
sbb
test
out
xchg
mov
dec
imul
pop
movs
mov
movnti
pop
xchg
or
dec
push
lods
dec
je
es
ja
dec
cmp
fwait
and
sbb
push
fadd
jno
add
nop
jmp
mov
rcl
push
rcr
hlt
xchg
dec
mov
into
push
lahf
mov
jnp
adc
rol
rol
jo
mov
retf
gs
xor
cwde
ret
xchg
aam
inc
or
push
mov
pop
mov
(bad)
mov
shl
int
xchg
xchg
push
adc
retf
nop
mov
mov
popf
push
fdiv
iret
push
jae
dec
mov
pop
es
(bad)
xchg
and
sbb
xor
lods
dec
ins
or
xchg
pop
inc
xchg
push
xor
mov
retf
fsub
mov
sub
les
hlt
mov
shl
inc
sbb
xchg
mov
(bad)
sbb
push
idiv
repnz
cmps
clc
hlt
jl
adc
ret
jmp
popf
mov
mov
pop
out
test
add
jmp
cmps
cld
bound
pop
mov
call
mov
fxch
adc
push
push
mov
fwait
or
cmp
jge
sbb
xchg
mov
retf
jmp
sar
out
into
ja
xchg
xchg
xchg
dec
das
mov
xchg
sub
ret
sbb
movs
xchg
es
fwait
out
push
dec
pop
fnsave
inc
jle
cmp
xchg
in
push
xor
xchg
cmp
cmp
adc
jl
aas
mov
push
sbb
into
movs
xchg
push
xchg
pushf
int3
xchg
dec
test
ret
(bad)
or
xor
adc
sbb
pop
xchg
jp
xchg
xchg
sbb
pop
(bad)
rcr
pop
adc
test
push
add
jo
or
and
outs
xor
xchg
push
scas
inc
dec
int
pop
jge
push
nop
adc
pop
inc
add
and
push
fs
push
xchg
dec
cli
and
xchg
rcr
sti
scas
test
pop
ficom
xchg
adc
xchg
inc
mov
cmps
push
div
gs
pop
and
fldlg2
push
push
sbb
aam
push
fst
mov
cmp
mov
xchg
xchg
add
mov
push
or
inc
mov
cwde
cdq
mov
rol
sbb
in
pop
jmp
iret
inc
push
pop
imul
mov
stos
sti
addr16
aad
xchg
or
jp
xor
adc
clc
add
imul
rcl
and
ins
inc
in
fisub
fiadd
cli
mov
dec
pop
xchg
sysenter
sahf
and
call
rcl
xchg
mov
fdiv
int3
jmp
or
jbe
adc
sbb
lock
and
sub
enter
xor
xchg
sar
push
int3
cwde
out
fistp
adc
fwait
pop
cwde
pop
inc
shl
repz
popf
lahf
dec
retf
cld
sbb
icebp
fwait
test
sub
jge
jl
xchg
inc
outs
hlt
adc
push
inc
imul
push
ror
iret
dec
mov
loopne
neg
mov
mov
xchg
cmp
jecxz
jge
sub
popf
mov
xchg
out
cs
or
stos
sahf
cmp
xchg
stos
push
lods
into
(bad)
arpl
int3
dec
aam
mov
int
imul
add
xchg
xchg
(bad)
add
jmp
clc
cwde
scas
stos
ret
test
enter
and
lahf
cmp
or
pop
mov
cmp
push
push
xchg
test
daa
test
test
fwait
aad
hlt
jbe
pop
mov
push
push
push
fild
inc
ja
and
xchg
and
jmp
xchg
cmp
fld
cli
jbe
cmp
pop
push
int
push
(bad)
xchg
(bad)
mov
movs
js
repz
mov
xchg
outs
das
pop
fwait
sub
xchg
cmps
xchg
jnp
push
sbb
inc
push
mov
dec
and
ins
jp
push
daa
add
lahf
popf
les
xchg
push
xchg
repz
or
test
xor
jno
loop
popf
and
icebp
movs
(bad)
jecxz
push
adc
adc
jb
push
adc
xchg
dec
std
add
pop
retf
into
push
in
xchg
cli
imul
push
mov
repnz
cld
and
nop
or
inc
mov
mov
sbb
(bad)
mov
xchg
mov
jle
pop
xchg
stc
fiadd
cmps
dec
mov
in
outs
(bad)
xchg
sbb
cmps
mov
shl
cmp
iret
addr16
add
xchg
jg
gs
push
and
cmps
test
push
cwde
data16
xchg
cs
fadd
xchg
ins
lods
sub
mov
in
xchg
cdq
jecxz
sbb
icebp
xchg
and
int
adc
test
adc
mov
add
mov
xchg
in
sub
and
sbb
xchg
jg
pushf
adc
cwde
jp
push
aas
pop
ds
repz
fwait
scas
mov
sbb
mov
inc
(bad)
pushf
gs
loopne
inc
adc
pop
dec
dec
inc
push
push
xchg
test
loopne
dec
bound
xchg
popa
xor
jmp
xchg
xchg
sar
cs
cmp
icebp
fsub
lea
cmps
sbb
xchg
dec
xchg
pop
mov
sbb
sub
fwait
cmp
push
cmc
hlt
and
sti
push
mov
mov
aad
add
xor
dec
inc
test
iret
mov
and
daa
je
mov
sbb
jmp
adc
xchg
fwait
loopne
jb
mov
clc
(bad)
sub
jge
fdivr
push
xchg
addr16
and
xchg
shl
movs
js
xchg
fisttp
cmps
inc
adc
jp
mov
loope
and
bnd
mov
sbb
lock
push
cmc
add
fist
cmps
out
pop
or
xchg
pop
and
sbb
ret
cmp
lds
xchg
jecxz
mov
repz
push
adc
loope
mov
sbb
iret
xor
mov
push
mov
clc
adc
dec
iret
ret
mov
call
test
sbb
or
pop
int3
scas
xchg
movs
jmp
test
jo
dec
push
lods
xchg
mov
xor
xchg
(bad)
in
pop
mov
call
lahf
and
pop
cld
adc
out
ss
xchg
mov
mov
mov
cld
xchg
adc
push
xchg
retf
dec
rol
fisttp
and
xchg
popf
aam
and
pop
into
lods
std
stos
imul
push
xchg
push
jg
sbb
int3
sbb
xchg
cmc
sub
mov
loop
bound
lods
xchg
inc
mov
and
mov
les
lahf
jecxz
or
cmps
xchg
mov
iret
inc
cmp
test
jp
cmp
pop
ds
mov
out
jmp
xchg
imul
in
ja
not
out
mov
mov
adc
mov
addr16
xchg
push
mov
int
push
push
mov
fist
mov
mov
sub
aaa
mov
xchg
xchg
repz
shl
jo
pop
adc
pop
iret
push
jmp
inc
sbb
inc
pop
ss
adc
inc
push
xchg
in
call
ds
cmp
ret
xchg
jo
or
nop
aad
mov
ins
outs
sbb
xchg
xor
fwait
dec
shl
repnz
or
scas
adc
lea
rdpmc
pop
adc
outs
pop
xor
sbb
arpl
sub
retf
cwde
aas
iret
aaa
pop
inc
adc
jle
xor
cmps
sbb
mov
daa
mov
jne
je
pushf
stos
mov
adc
jb
sahf
loopne
(bad)
outs
imul
aaa
clc
cwde
mov
xchg
retf
mov
adc
int3
cmp
xor
xchg
jge
add
nop
fwait
push
call
stos
aaa
fisubr
adc
mov
dec
repnz
mov
popa
jge
(bad)
sbb
xor
aam
jge
hlt
mov
push
pop
pop
inc
nop
into
lods
xor
mov
or
sub
lods
hlt
mov
pop
mov
adc
je
mov
push
sahf
push
jge
jns
adc
hlt
dec
jbe
cli
adc
mov
hlt
jne
ja
movs
xchg
fldcw
gs
test
jnp
jl
sbb
mov
neg
cmp
or
test
inc
sti
xchg
xlat
inc
push
mov
xor
in
iret
jge
mov
jecxz
xor
jmp
mov
sub
mov
or
jge
pop
lea
repz
loopne
or
fmul
inc
call
sbb
jge
into
lea
es
inc
dec
loop
xor
stos
xor
xchg
cld
bound
xor
in
inc
sahf
ins
jge
xchg
and
jl
add
inc
xchg
mov
test
stos
fiadd
jl
packuswb
pop
jp
(bad)
cmps
lea
mov
jge
and
xchg
sbb
ja
lods
xor
retf
mov
mov
or
sub
sbb
adc
je
pop
jo
cmps
test
stos
dec
es
mov
jne
popa
cmp
xchg
mov
adc
ss
jmp
sub
test
mov
jle
aam
lods
mov
fxch
bound
ja
push
xchg
sbb
adc
adc
adc
dec
les
std
xchg
gs
and
loop
inc
lahf
jl
fs
xchg
inc
lods
out
cdq
mov
push
push
sbb
mov
je
xor
ds
cli
test
dec
jecxz
adc
cmps
jle
fistp
add
adc
aad
imul
fcomp
xchg
(bad)
sub
fcomp
xor
fimul
or
mov
les
call
mov
loopne
xchg
pop
pop
pop
lods
cdq
jmp
xchg
int
loope
add
dec
out
or
push
xchg
dec
or
ret
test
pop
jecxz
nop
ja
push
and
push
cmps
pusha
dec
dec
xchg
sub
sbb
push
je
ja
iret
mov
mov
mov
xchg
daa
mov
push
xor
lds
in
push
ins
xchg
push
jge
test
repnz
xchg
inc
clc
call
jecxz
push
inc
xchg
imul
int
jp
xchg
hlt
enter
scas
sbb
imul
jl
jmp
xchg
mov
push
fs
call
adc
outs
jae
inc
ret
popf
stos
adc
pop
les
into
dec
(bad)
adc
test
ret
into
lahf
and
lods
sub
sahf
inc
popa
fst
jle
lods
jge
pop
add
nop
xchg
gs
dec
pop
sbb
add
jl
jb
inc
jge
cli
leave
jne
xchg
xchg
aam
inc
and
sub
lahf
jge
jno
ins
popf
xchg
cmp
test
mov
xlat
loope
xchg
xchg
cdq
cld
in
jo
xchg
push
loope
pop
ja
push
rcl
push
sbb
les
sti
pop
shl
in
movs
push
xchg
or
xor
sbb
scas
adc
push
stos
jl
fst
pop
enter
imul
cmps
les
les
cld
xchg
mov
xchg
ja
loope
scas
ret
or
push
dec
lock
jl
ficom
sbb
gs
inc
xchg
sub
mov
pop
and
pop
and
hlt
and
xchg
nop
mov
lea
or
pop
das
pop
push
scas
adc
push
out
sbb
in
sub
(bad)
pop
imul
test
(bad)
call
into
inc
push
adc
test
dec
ficom
ficom
dec
xchg
inc
(bad)
fnstsw
stos
xchg
dec
aad
lds
xor
sub
pop
or
adc
jp
xchg
sub
mov
mov
fs
add
inc
xchg
mov
dec
test
xchg
jmp
xchg
xor
call
fcom
int
pop
xchg
dec
loope
jmp
mov
jbe
push
rcl
xchg
icebp
mov
rcr
lock
test
std
test
das
xor
and
cmp
pop
mov
ja
cmp
xchg
dec
jge
xchg
adc
dec
mov
inc
inc
icebp
sahf
push
retf
pop
pop
or
in
push
test
xchg
iret
(bad)
cdq
add
or
and
jle
and
add
js
popf
mov
pop
add
or
cmp
test
jae
push
sbb
adc
pop
sub
pop
mov
mov
aam
mov
xchg
cdq
rol
push
fld
stos
pop
mov
cmps
xcrypt-cfb
cmps
fs
inc
sahf
aam
or
adc
shl
stos
cdq
sub
and
jnp
test
fist
xchg
xor
fidiv
push
inc
adc
xchg
jne
push
enter
stos
cmpxchg
adc
xchg
cmp
cdq
(bad)
ins
push
mov
mov
leave
jo
loop
pop
icebp
xor
mov
mov
mov
or
fstp
shl
mov
xor
sbb
setns
jg
dec
xchg
div
lds
stos
cdq
fdivr
dec
pop
pop
sbb
cmps
and
mov
cmps
pop
xchg
jae
das
out
adc
ret
xchg
xchg
pop
or
mov
shl
xchg
retf
das
loopne
or
mov
dec
stc
les
stos
push
push
xchg
(bad)
add
cdq
loope
mov
push
in
ins
mov
xchg
jge
call
mov
adc
pop
in
xchg
inc
fwait
dec
add
cmp
push
push
xchg
push
xchg
fistp
mov
dec
(bad)
repz
or
pushf
outs
mov
bound
fcmovbe
mov
xchg
in
jne
lds
mov
rol
ins
fwait
jmp
(bad)
repz
xchg
push
or
xchg
test
call
mov
and
add
mov
pop
xchg
xchg
andps
jns
xchg
inc
sub
(bad)
adc
xchg
add
ins
sahf
mov
jmp
mov
leave
loope
pop
xchg
fstp
out
xchg
mov
push
jg
idiv
cmp
rcr
pusha
push
lds
xchg
or
dec
fwait
stos
cwd
repnz
sbb
xchg
test
dec
jbe
cli
sahf
adc
enter
add
faddp
idiv
sub
cmc
xchg
mov
mov
test
xor
adc
hlt
mov
fs
push
pop
cmp
mov
add
loope
mov
dec
mov
or
je
adc
mov
les
mov
mov
and
xchg
push
mov
fwait
push
popf
dec
or
sahf
mov
mov
jae
jne
(bad)
xchg
aaa
push
cmp
repz
xchg
cmp
jge
fcom
xor
int
xchg
movs
imul
and
enter
sbb
aad
test
rcl
sbb
je
imul
repz
out
xchg
in
rcl
repz
push
or
xchg
lahf
cwde
sbb
adc
rcl
jmp
xchg
popa
mov
pop
mov
push
pop
lahf
call
xchg
loop
push
mov
lods
xchg
out
jae
jl
in
sbb
pop
cmc
or
stos
sbb
movs
test
bound
shr
mov
scas
loopne
aad
jge
int3
jae
add
out
cld
(bad)
adc
outs
imul
jge
fisub
shl
jae
(bad)
cmp
xor
imul
mov
push
cli
xchg
push
test
cld
xchg
push
or
lock
scas
imul
sbb
or
sahf
push
jbe
lea
sbb
sbb
sub
xchg
test
rol
push
(bad)
lds
push
cdq
in
jmp
shl
xchg
les
es
adc
ss
push
sar
stos
fwait
jnp
aas
push
mov
shr
mov
cmps
sbb
retf
popf
fs
xchg
mov
call
jns
call
or
cld
sti
into
aas
sub
aas
ss
mov
ret
dec
xlat
pop
cld
sub
popf
and
pop
aas
fidivr
psubusw
mov
cmp
sbb
in
inc
ficom
repnz
adc
mov
pushf
push
and
fs
xchg
clc
xchg
sbb
xchg
dec
jb
mov
fstp
popf
(bad)
xor
pop
dec
fwait
jbe
xchg
sub
mov
sub
mov
rcr
in
aas
hlt
fwait
mov
mov
xor
mov
sub
xchg
fsub
retf
stc
mov
xchg
adc
xchg
fstp
aad
inc
push
ss
loopne
popf
adc
pop
dec
adc
or
mov
jb
ret
adc
and
push
repz
xchg
and
(bad)
jmp
lods
mov
aam
cmp
inc
hlt
int3
loope
adc
ja
fbstp
(bad)
and
in
xchg
jmp
inc
sbb
in
jle
in
outs
xchg
adc
jmp
xchg
push
xchg
movs
div
test
xchg
sbb
pusha
xchg
pop
add
hlt
das
xchg
mov
(bad)
cld
xchg
cmps
(bad)
inc
lahf
lea
xchg
adc
div
cmp
cli
imul
aam
pusha
xchg
test
les
cs
imul
stos
pop
push
mov
stos
adc
pop
xchg
xchg
cld
and
cmc
add
pop
xchg
sbb
es
call
adc
sahf
fsubr
aaa
jnp
iret
xchg
mov
pushf
push
xor
aam
pop
icebp
test
fwait
call
push
aam
inc
jmp
jle
sub
rcl
dec
movs
xchg
xchg
stc
sbb
aas
(bad)
and
cmp
pop
imul
cmp
and
addr16
adc
cmpps
xchg
das
test
cmps
rol
(bad)
mov
xor
ins
hlt
gs
and
movs
test
xor
adc
xchg
ins
in
xchg
and
ffree
sbb
in
or
cmp
pushf
fisubr
mov
nop
out
xchg
mov
outs
js
pop
mov
and
aaa
mov
push
xchg
outs
mov
xchg
xchg
mov
hlt
cmps
mov
xchg
fmul
repz
xchg
mov
rcl
sub
(bad)
js
dec
jne
inc
enter
xchg
sbb
pop
push
pop
add
cmp
pusha
mov
xchg
popf
sub
jmp
pop
iret
xchg
and
add
xchg
arpl
clc
xlat
mov
jg
shl
xor
push
inc
add
jb
inc
retf
and
rcl
inc
stos
dec
mov
ret
scas
je
or
xchg
shr
jae
cmp
test
cmp
call
cmc
call
adc
or
scas
xchg
add
je
ror
sbb
mov
adc
xchg
sub
and
push
pop
fisttp
das
lods
lds
stos
jb
adc
scas
repnz
inc
jae
pop
add
xor
pusha
and
push
rcl
in
retf
xchg
mov
stos
je
mov
or
cmp
lea
inc
aam
xchg
xor
xlat
or
hlt
pop
jl
xchg
imul
push
shl
mov
mov
dec
mov
das
repz
(bad)
xchg
adc
xchg
push
popf
xchg
jp
mov
mov
sub
or
pop
frstor
xchg
inc
cdq
ret
mov
inc
xchg
(bad)
xchg
inc
nop
call
cmp
and
ins
ror
pop
repnz
es
push
xchg
adc
xchg
mov
push
into
fcom
push
(bad)
loopne
into
fcom
(bad)
mov
ret
fs
pop
gs
adc
xchg
in
lahf
scas
addr16
iret
or
ret
test
sub
mov
lahf
mov
mov
cmc
leave
xchg
scas
jo
sub
fs
mov
or
xchg
push
icebp
bound
xchg
mov
push
xchg
mov
cdq
push
pusha
dec
sub
mov
jnp
out
pop
or
test
in
sub
sub
jb
repnz
int3
movs
popf
(bad)
jbe
ret
push
aam
test
stos
lahf
xchg
pop
sar
jb
aaa
dec
addr16
mov
add
or
cdq
je
sbb
(bad)
ja
sub
mov
or
lods
and
xchg
adc
xchg
cmc
mov
push
jge
jmp
fwait
call
in
aaa
adc
aam
xor
pusha
xchg
dec
pop
cs
out
in
(bad)
or
jecxz
inc
pop
nop
js
xchg
cdq
mov
add
adc
dec
xchg
je
sbb
iret
mov
arpl
vphsubbw
pop
add
push
mov
cdq
sbb
shr
push
cmp
popa
jge
cmp
pusha
loop
add
and
push
outs
and
in
lods
mov
test
and
int
int3
stos
ds
and
adc
pop
mov
in
xchg
popf
jno
lds
outs
mov
jbe
mov
imul
xor
xchg
aaa
ins
into
xor
inc
xchg
mov
mov
fmul
pop
mov
cmps
sbb
add
jg
cmps
sub
sbb
je
mov
sub
mov
push
xchg
adc
shl
outs
loopne
xchg
dec
rcr
data16
in
xchg
or
pop
push
inc
pop
test
push
inc
or
mov
xchg
cli
push
xchg
cmps
mov
dec
push
cmc
aam
mov
aas
and
sbb
imul
fild
retf
fsubr
into
hlt
or
xchg
stos
sbb
mov
inc
xchg
sbb
out
movs
es
je
mov
mov
ret
adc
jg
xchg
jl
adc
xor
push
adc
push
fsub
mov
jne
cmps
and
xchg
push
js
xchg
cmps
hlt
cdq
aaa
or
fist
mov
pop
fwait
pop
sbb
sti
in
xchg
rcr
ret
cli
or
mov
imul
les
sub
xor
idiv
or
das
jae
xchg
xor
out
adc
fist
mov
xor
jecxz
sbb
push
rcr
outs
xchg
jae
and
mov
jo
adc
push
mov
and
xchg
xlat
pop
inc
jno
scas
mov
test
jecxz
and
stos
pop
out
pop
fist
and
sbb
xchg
or
adc
pusha
adc
inc
jne
inc
pop
bound
cmp
xchg
andnps
fcom
into
or
gs
mov
pop
out
mov
or
lahf
sbb
push
ret
add
repz
pop
nop
xchg
js
stos
ror
mov
leave
(bad)
call
jns
xchg
out
(bad)
fnstenv
addr16
jg
test
in
imul
add
xchg
ds
adc
pusha
add
cdq
sbb
(bad)
unpcklpd
outs
xor
test
loop
hlt
cmp
jns
push
lea
das
adc
cmp
mov
add
out
ins
or
dec
mov
mov
aam
int
inc
ins
fwait
and
inc
hlt
mov
jo
mov
mov
data16
cwde
loop
bound
imul
fst
mov
xchg
xchg
add
fxtract
cwde
mov
test
xchg
xor
push
mov
pushf
push
mov
dec
or
(bad)
repz
pop
inc
dec
rcl
push
jl
cwde
int3
adc
xchg
xchg
sahf
cmp
ins
push
mov
pop
cmp
or
repnz
in
add
adc
push
js
and
jge
or
pop
stos
adc
inc
mov
jl
sub
mov
ret
in
test
les
cld
popf
mov
sbb
adc
xor
adc
ret
lahf
xor
and
test
cmps
adc
daa
(bad)
stos
lods
fs
xchg
data16
xchg
xchg
ret
dec
fmul
sub
rol
xor
xor
imul
jg
xchg
jge
mov
xor
enter
xchg
test
loopne
or
call
neg
or
ins
push
cmp
xchg
xor
loopne
xchg
stos
lahf
cmps
xchg
mov
or
xchg
icebp
adc
(bad)
xor
aam
xor
das
pushf
mov
adc
add
sub
and
push
or
shr
or
mov
pop
jge
adc
lea
iret
mov
adc
scas
push
and
sbb
dec
sbb
jmp
fsub
jge
loop
fs
inc
bound
mov
retf
test
mov
jge
inc
into
pop
ds
push
ins
movs
xchg
mov
pop
cmp
stos
cmovae
mov
xchg
pop
dec
push
dec
inc
adc
jmp
pop
repz
adc
sbb
cmp
int3
je
inc
mov
xchg
push
repz
cmp
sbb
xchg
pop
out
cmps
mov
adc
dec
test
les
sub
cmp
movs
daa
xor
(bad)
aas
xor
test
out
(bad)
xor
jecxz
add
xchg
dec
inc
add
mov
jne
fwait
mov
mov
xchg
jge
fwait
ret
adc
push
repnz
mov
lods
retf
jbe
out
add
mov
xor
mov
fld
mov
ja
rol
add
pop
dec
cmps
fidiv
cdq
rol
jnp
int
xchg
add
mov
inc
xor
popa
xchg
sub
outs
mov
popa
pusha
xchg
adc
retf
pop
mov
sub
dec
call
lahf
into
arpl
pop
out
aam
movs
jp
xchg
push
out
jmp
mov
cli
jno
test
fwait
add
out
push
sub
out
jbe
mov
dec
pusha
or
fwait
push
hlt
popf
sub
inc
ret
fucomip
and
jns
hlt
ins
aad
mov
and
rcl
ror
(bad)
shr
aad
mov
mov
adc
aas
jp
xchg
fs
js
pop
xor
cmp
sbb
sub
mov
push
(bad)
in
shl
and
xchg
std
mov
enter
(bad)
mov
les
cs
test
inc
jno
retf
pop
ja
and
jl
pop
dec
aam
call
dec
xor
cwde
and
stos
push
jl
xchg
push
loope
mov
and
(bad)
loopne
xchg
scas
ins
xchg
repz
gs
xchg
call
mov
cmc
push
cmps
inc
scas
xchg
fwait
xor
push
push
xor
retf
test
pusha
xchg
fucomip
push
push
jmp
cmp
jnp
jmp
jns
adc
lahf
aas
add
or
inc
ficom
push
mov
jp
xchg
xchg
inc
xor
push
pop
pop
ret
lea
icebp
rcr
mov
jmp
inc
and
hlt
push
popf
jge
mov
popa
cmp
sahf
push
pop
mov
sbb
xor
mov
mov
add
jl
pop
and
movd
aam
jl
xchg
sub
loopne
cmp
mov
cld
jge
scas
push
adc
xor
dec
ret
shl
ficomp
out
lods
data16
push
stos
mov
retf
cmp
cmp
(bad)
in
xlat
lds
sbb
push
push
mov
jl
adc
int
int
adc
fild
lea
xchg
jge
sub
call
mov
test
pop
dec
clc
jo
out
clc
dec
mov
xor
movs
jl
outs
leave
sub
dec
push
pop
repnz
and
jge
push
inc
clc
pop
sbb
pushf
les
call
cmps
cdq
mov
xchg
loopne
addr16
push
dec
sbb
jns
mov
icebp
xchg
fbstp
fcmovu
imul
jnp
aad
mov
xchg
loopne
(bad)
(bad)
push
xchg
add
sub
cmp
mov
mov
xchg
jno
jmp
outs
and
enter
dec
mov
xchg
or
es
mov
or
loop
test
xor
mov
add
jae
fwait
pop
test
mov
adc
xchg
cdq
icebp
ss
(bad)
je
out
popf
or
adc
push
pop
mov
shl
and
out
fisubr
gs
pop
lods
out
dec
bound
dec
mov
loop
cwde
enter
adc
sub
es
add
sub
out
shr
sub
lahf
xchg
test
inc
or
jmp
push
cmp
aaa
mov
or
inc
adc
mov
push
je
add
push
ret
mov
test
call
xchg
stos
add
sub
sub
cmp
add
icebp
adc
jno
xor
fimul
push
pop
fldenv
sub
mov
dec
add
xor
int3
adc
out
int
fldcw
xchg
loopne
adc
cmp
mov
out
xchg
popf
fisubr
shl
aaa
xchg
fnstcw
xchg
pop
cmc
shl
push
fnsave
add
xlat
mov
out
adc
(bad)
mov
mov
or
(bad)
sub
fist
repz
jb
fst
addr16
mov
mov
rcl
and
sub
sbb
cmp
dec
xchg
aas
mov
adc
xchg
push
in
ja
xchg
test
push
cld
mov
inc
xchg
or
fisub
push
mov
mov
out
mov
ficom
dec
or
cmps
test
icebp
mov
adc
lods
ins
test
dec
mov
inc
jp
fist
xchg
in
fs
or
xchg
jae
fadd
xchg
frstor
gs
xchg
cli
loopne
repz
inc
xor
nop
dec
cmp
ds
cmp
adc
fwait
mov
xlat
stos
pop
jno
mov
outs
add
dec
lock
mov
and
shl
lods
rep
int
int
xchg
loopne
sub
imul
gs
pusha
mov
add
xor
movs
aas
stos
dec
xchg
inc
inc
pop
leave
popf
jecxz
pop
js
mov
dec
inc
xchg
sbb
adc
or
jmp
mov
cmp
mov
ret
cmp
xchg
mov
ss
cld
mov
dec
mul
js
add
add
push
mov
sbb
mov
mov
push
mov
mov
ja
inc
or
and
test
dec
xchg
xor
scas
adc
xchg
sbb
cmp
lods
in
xchg
jmp
shl
xchg
fisttp
icebp
xchg
mov
lahf
scas
push
rcr
sbb
cmp
lods
or
pop
stos
int3
mov
and
add
xchg
jns
xor
or
sub
fwait
ret
daa
adc
mov
hlt
add
push
pop
xchg
sub
jp
mov
loop
mov
xchg
cmp
ja
cld
mov
in
sub
xor
lds
lods
in
out
xchg
ficomp
daa
xchg
aas
xor
fs
loope
mov
add
je
test
add
movs
add
xchg
push
xor
outs
push
push
(bad)
jmp
jmp
jmp
dec
sub
pusha
fld
ins
xchg
ret
xchg
sbb
outs
add
in
or
mov
nop
mov
into
push
and
outs
test
out
pop
adc
test
sub
xchg
mov
xor
and
pop
rcl
arpl
inc
jnp
mov
pop
mov
jno
lods
sahf
rcl
jle
les
sub
aam
push
movs
and
push
jne
xchg
xchg
inc
cmp
(bad)
into
shl
loopne
xor
mov
xlat
jno
test
and
add
push
mov
inc
mov
out
mov
xor
retf
icebp
xlat
sbb
cs
test
or
push
cmp
test
xchg
xor
sahf
test
dec
xchg
push
xor
cmp
ror
(bad)
xchg
stos
movs
movs
icebp
mov
dec
adc
lods
mov
jl
stc
rcl
sub
mov
cmc
sbb
stos
jge
(bad)
cmps
dec
xchg
jns
inc
aaa
movs
test
rcr
xchg
push
dec
jmp
mov
in
ror
hlt
(bad)
sti
sar
or
pop
cmp
xchg
ret
cdq
aam
xchg
xchg
ss
test
ds
addr16
cli
in
xchg
pusha
jle
imul
xor
and
add
lods
jge
or
hlt
stos
sar
stos
int
push
xor
jnp
xchg
adc
add
xchg
aaa
pop
inc
adc
xchg
mov
rcl
ror
outs
(bad)
clc
inc
lea
mov
xlat
retf
dec
jmp
push
jp
movs
dec
or
cdq
fistp
daa
sahf
ror
ja
push
cmps
mov
lahf
aaa
push
push
xchg
into
pop
pop
mov
xchg
dec
add
pop
and
jne
out
inc
(bad)
xchg
in
dec
xor
push
mov
adc
push
mov
mov
cdq
inc
mov
mov
aam
mov
dec
pusha
call
and
jp
loopne
mov
adc
cmp
daa
push
push
xchg
call
lea
ins
mov
sub
int
(bad)
xchg
sub
loop
ds
pop
repz
xchg
adc
inc
mov
mov
stos
lahf
xchg
and
mov
stos
mov
xchg
das
popa
cmps
xor
stc
and
adc
and
jnp
jns
cld
loopne
call
outs
mov
sahf
cmps
out
aaa
sti
dec
cmps
mov
mov
in
cmps
sahf
out
ror
maxps
loopne
test
cs
out
stos
out
cmovo
sahf
aad
pusha
push
test
mov
div
cld
dec
pop
(bad)
mov
xchg
shl
and
mov
jmp
aam
adc
es
xchg
dec
dec
or
jp
push
xchg
out
push
ret
pushf
add
xchg
ins
jno
pop
jg
xchg
cdq
or
mov
adc
inc
or
xchg
inc
mov
clc
fwait
and
pop
xchg
in
push
xchg
dec
test
arpl
mov
inc
xchg
cmc
xor
adc
adc
push
imul
lahf
pop
mov
gs
jle
inc
cmp
je
xchg
push
xchg
fwait
cmp
repz
jae
ss
rol
or
and
xchg
xchg
push
aas
adc
xchg
fwait
pop
pop
cli
in
int3
ss
sbb
shr
xchg
adc
push
jno
cmps
imul
popa
fnstsw
lods
mov
cwde
retf
push
pcmpeqw
fsubr
jnp
enter
sahf
test
cmps
or
jmp
aam
inc
push
dec
dec
mov
rcl
pusha
aam
ror
and
lahf
loope
jmp
repz
mov
mov
push
inc
ficomp
sahf
adc
sub
mov
movs
jo
jp
pop
getsec
dec
xchg
cld
pop
dec
jge
or
push
gs
inc
or
cwde
outs
sbb
xor
adc
pushf
push
test
or
fisubr
adc
xchg
xchg
inc
push
pusha
cmp
push
mov
xchg
(bad)
(bad)
(bad)
in
sub
xchg
xchg
rol
shl
and
ja
inc
pop
adc
fwait
rol
in
push
mov
mov
repnz
or
das
jae
addr16
cli
movs
(bad)
xchg
js
dec
outs
dec
(bad)
mov
mov
push
cld
stc
mov
xchg
mov
mov
push
bndldx
pusha
loopne
cmps
xchg
sbb
adc
pop
int3
mov
loope
jmp
cwde
mov
inc
cmp
(bad)
sti
ins
sbb
loop
mov
mov
rcl
aas
dec
xchg
pushf
xchg
(bad)
movsx
cmps
or
jmp
(bad)
xchg
jbe
jecxz
adc
sbb
push
sub
outs
stc
shr
bound
xchg
mov
cmp
in
jne
mov
push
mov
cmp
jmp
fist
xchg
(bad)
and
shl
push
test
ror
jmp
mov
pusha
fwait
mov
push
lods
mov
aam
xor
cdq
cmp
scas
ret
movs
mov
fisttp
sub
and
fnstenv
adc
test
dec
sbb
xchg
or
mov
dec
inc
jbe
cmps
xor
mov
jp
fcomp
jge
hlt
pusha
or
retf
cmps
push
call
xchg
push
push
cmp
jne
mov
popa
mov
ret
nop
xchg
in
xchg
mov
jmp
add
iret
push
adc
outs
(bad)
sbb
fdiv
pop
sub
xchg
ret
fmul
add
(bad)
add
xchg
pop
jnp
loopne
push
scas
aad
cdq
sbb
xor
adc
mov
adc
cld
cmp
(bad)
sub
xchg
lahf
sbb
push
aad
add
adc
sbb
push
data16
add
lea
dec
mov
inc
add
pop
and
sbb
je
pop
mov
cmp
adc
rcl
xor
mov
pop
push
enter
adc
cmp
sub
fdiv
mov
pop
xor
sub
jmp
loop
xchg
jno
xchg
inc
mov
jl
sub
int3
dec
xchg
fwait
push
sub
xor
mov
jg
ffreep
sub
xchg
dec
mov
movs
xor
mov
xchg
ficom
ja
sbb
and
pop
rol
dec
xchg
fs
fmul
sbb
dec
xchg
mov
adc
fimul
loopne
pop
pop
mov
jg
push
inc
loope
in
jmp
sub
xchg
clc
jae
push
jne
xchg
push
adc
dec
add
ins
xor
fs
xchg
jp
(bad)
xchg
mov
std
and
nop
sub
sbb
adc
xor
outs
scas
push
neg
adc
sub
test
jl
imul
cmp
dec
ja
stos
sub
fs
pop
inc
out
xchg
push
imul
xor
in
xchg
out
aas
ret
cli
sub
mov
xchg
retf
mov
imul
xchg
xlat
jle
rcl
rcl
adc
cmc
and
retf
out
fidivr
imul
dec
rcl
int
test
stos
push
out
dec
xchg
xchg
ins
push
ficomp
adc
jmp
mov
clc
call
push
xor
adc
retf
lahf
in
dec
jb
lahf
cmp
movs
mov
adc
fdivr
add
faddp
adc
imul
inc
xchg
sub
pop
outs
test
ficom
mov
dec
xor
xchg
ret
add
gs
xchg
or
jo
pushf
add
jno
dec
into
xor
or
test
sbb
xchg
retf
xchg
icebp
ret
or
adc
push
jnp
push
mov
xor
mov
jl
scas
mov
xchg
jg
scas
push
cdq
test
xchg
xchg
retf
xchg
push
add
enter
sbb
pop
ins
mov
mov
jo
retf
mov
mov
inc
cmp
pushf
adc
mov
sub
or
lods
jp
popf
xchg
retf
fwait
nop
sbb
sub
out
test
movs
call
inc
retf
dec
adc
inc
push
xor
mov
stos
sbb
xchg
int3
xchg
xchg
pop
les
mov
loope
jae
and
je
ret
jb
fist
mov
test
mov
nop
icebp
aad
adc
xchg
inc
pop
xchg
sub
aad
xchg
adc
xchg
dec
pop
fsubr
dec
lahf
inc
int
push
jo
push
xchg
shl
in
jo
sub
sbb
push
jb
xor
inc
jne
test
add
sbb
mov
cmp
push
out
sbb
inc
ins
into
pop
addr16
mul
mov
xchg
sbb
jmp
xchg
test
inc
addr16
fist
ins
jle
xchg
adc
(bad)
mov
jl
jmp
xchg
dec
imul
mov
rol
push
fmul
sahf
popf
and
scas
or
xchg
push
popa
or
pop
jg
inc
xchg
mov
add
arpl
mov
add
test
lods
dec
cmp
xor
jp
out
xchg
outs
xor
rol
in
popf
stc
push
pushf
pop
push
xor
jge
push
and
inc
(bad)
adc
fldcw
sbb
pusha
sbb
push
out
test
ins
cli
out
dec
test
mov
hlt
sbb
jge
xlat
inc
les
(bad)
ret
sbb
hlt
js
jle
add
lods
jge
test
mov
xchg
fwait
pop
push
push
add
dec
imul
cmp
sbb
not
push
and
jge
cmp
cld
test
test
jmp
jp
mov
in
mov
lods
push
imul
jecxz
dec
or
mov
mov
sub
(bad)
and
push
xchg
sbb
dec
add
push
sti
xor
rcr
pushf
movs
jl
inc
xchg
cld
out
sbb
nop
nop
fbld
cmc
aad
cdq
dec
adc
add
xor
sub
sub
ret
pop
sbb
outs
icebp
jmp
mov
scas
mov
or
ds
cli
jmp
call
jg
push
adc
or
addr16
jbe
int
inc
int3
out
ret
cmps
lods
sbb
into
xor
(bad)
sub
sub
imul
mov
jns
and
cmps
jge
jecxz
ficom
mov
ins
call
mov
mov
fcmovne
in
push
pop
movs
pop
inc
pop
mov
popa
(bad)
adc
jl
fisttp
icebp
or
cmc
imul
shl
mov
pop
loop
cmp
aaa
mov
cmp
lahf
jnp
xchg
adc
sbb
mov
mov
xor
jno
movs
jge
(bad)
(bad)
xchg
xchg
xchg
cmc
out
cdq
in
lds
push
pop
cmp
push
xchg
jae
int3
push
lahf
cmp
add
in
adc
(bad)
mov
xor
cli
adc
inc
add
and
neg
pop
cld
call
mov
jle
out
xchg
cmp
mov
ret
les
xchg
jge
cwde
sahf
movs
jb
cld
dec
dec
and
fnstenv
sub
sub
mov
cmp
xchg
adc
sub
dec
cs
ins
das
push
(bad)
pop
jge
jecxz
push
aam
mov
push
movs
jmp
aas
and
test
push
mov
ret
pop
xchg
xor
xchg
in
jl
sbb
pop
dec
aas
push
lahf
jge
out
push
aaa
ins
scas
and
cwde
cld
sub
pop
test
dec
(bad)
test
or
rol
int3
stos
(bad)
jl
jge
pop
in
xchg
cmp
loop
call
les
mov
cdq
sbb
js
xchg
jmp
dec
xor
int3
mov
adc
retf
aas
cli
call
mov
sar
cwde
dec
or
push
loopne
in
iret
out
xchg
jmp
xchg
mov
retf
ror
sub
iret
sub
shl
xchg
scas
stc
add
push
dec
add
xchg
sbb
cli
mov
pop
jp
fsub
mov
sbb
sub
pop
neg
js
mov
fld
cmps
and
jle
xchg
popa
cmp
inc
mov
jp
ret
cmp
cmp
xchg
scas
loope
mov
xchg
fiadd
das
int3
shr
xchg
xor
test
call
or
xchg
cmp
test
xor
jb
je
jns
mov
sti
stc
int3
push
cmps
mov
jb
je
mov
repz
(bad)
mov
pop
xchg
loop
xchg
aas
inc
out
in
inc
adc
push
(bad)
sti
sbb
mov
mov
push
cmps
mov
rcr
mov
lods
fld
adc
faddp
into
xor
mov
mov
add
xchg
jecxz
dec
push
aaa
inc
sbb
dec
(bad)
mov
loopne
xor
mov
jno
adc
xchg
(bad)
push
pusha
mov
cmp
fcom
jge
test
mov
dec
sub
pop
in
xor
cli
sti
movs
jo
push
mov
push
sbb
addr16
or
popf
pop
adc
mov
jmp
xor
push
push
xchg
loope
mov
lods
sbb
xchg
xchg
and
mov
dec
adc
aam
ds
adc
aad
pop
iret
loope
sbb
push
ucomiss
pop
outs
ret
mov
jecxz
or
add
mov
imul
notrack
(bad)
or
and
mov
inc
clc
popf
addr16
add
mov
xchg
stc
in
fild
sub
dec
push
add
sub
sbb
pushf
or
and
xchg
jne
or
cld
repz
in
xchg
loopne
cmp
cmps
xchg
mov
pop
clc
jp
ins
xor
xlat
and
leave
sbb
ins
cli
xor
adc
add
pop
ds
(bad)
jmp
in
mov
add
movs
mov
mov
sub
jg
and
es
adc
fst
in
sbb
and
jae
call
cmps
dec
arpl
(bad)
mul
mov
(bad)
cmp
push
dec
push
xchg
cdq
push
sub
daa
xchg
enter
xchg
call
sahf
test
fs
call
out
pop
pop
xchg
(bad)
in
ret
cld
mov
cli
xor
xchg
and
loope
xchg
cmp
out
push
push
iret
pop
ja
and
cmp
push
push
or
rol
jmp
dec
xor
aam
and
add
outs
dec
test
xchg
imul
jbe
xchg
lahf
xchg
add
cli
or
cld
xchg
push
aam
int3
adc
jge
ffree
fwait
pop
pop
movs
xor
cmps
and
adc
xchg
gs
sar
popf
push
or
mov
mov
(bad)
pop
es
rcl
or
pushf
sbb
sub
pop
in
in
ins
xchg
push
fcmovnbe
jb
jl
call
push
idiv
mov
or
mov
pop
pop
push
sbb
mov
push
adc
jge
mov
int3
cld
lods
pop
lock
fwait
cmp
lea
or
sub
add
dec
ret
sbb
repz
imul
or
push
mov
shr
mov
jne
push
dec
div
retf
jl
es
mov
dec
push
or
and
mov
sbb
rcr
sub
xchg
cmp
in
in
lds
push
ret
shl
dec
jno
xchg
sbb
loopne
xchg
cmp
pushf
aaa
jbe
pop
ja
mov
test
jbe
dec
or
dec
popf
test
lahf
xor
and
dec
mov
mov
jge
in
or
jl
dec
jle
scas
mov
imul
hlt
jge
fmul
fldcw
add
xchg
adc
mov
es
gs
ret
mov
cs
jae
jle
scas
jl
out
popf
fimul
into
xchg
scas
pop
adc
es
(bad)
and
popf
jge
mov
xchg
js
cld
arpl
in
jns
adc
push
cwde
add
and
aam
xor
adc
imul
and
dec
push
xchg
arpl
inc
out
and
das
stos
mov
fwait
pop
jle
btr
push
ret
jne
mov
je
cld
int
cli
pop
mov
mul
sbb
xchg
pop
mov
adc
fcomp
int
add
(bad)
pusha
test
jg
xchg
inc
retf
push
jae
das
xchg
xor
daa
sub
xchg
adc
loopne
push
xchg
inc
in
push
gs
or
(bad)
dec
stos
lahf
in
jmp
lds
mov
and
dec
inc
lahf
nop
icebp
jp
or
xor
(bad)
jnp
leave
outs
mov
mov
push
sub
setb
mov
xchg
push
add
call
push
mov
jno
retf
xchg
out
(bad)
cmps
dec
test
xchg
xchg
iret
cmp
lea
xor
xchg
fimul
jp
xchg
in
dec
jne
cmps
mov
jp
fwait
mov
idiv
aam
aam
and
inc
jg
and
pop
mov
shufps
add
ret
pop
and
xchg
bound
xor
add
xchg
dec
and
xor
pop
retf
mov
xor
in
jo
xchg
cmp
xor
outs
(bad)
xchg
mov
in
mov
adc
add
lock
neg
mov
jnp
and
scas
cmps
xchg
ret
fiadd
or
pop
sbb
push
mov
jbe
sub
aas
je
dec
rcl
scas
xchg
sub
push
inc
sahf
fwait
rep
add
and
ror
mov
icebp
push
xchg
sbb
jmp
push
inc
dec
mov
int
xor
imul
jle
push
mov
fwait
pop
mov
jge
sub
xchg
dec
fdivr
adc
xlat
xchg
enter
cmps
loopne
(bad)
xchg
ins
bound
adc
cmc
mov
ins
or
(bad)
out
js
fsubr
jno
dec
push
mov
mov
xchg
mov
lds
and
and
and
jbe
xchg
mov
loopne
sbb
xchg
sbb
jmp
faddp
cwde
mov
push
push
sbb
mov
pop
fsub
clc
fwait
or
int3
xor
adc
xchg
fs
inc
call
xchg
lods
call
xchg
xchg
outs
sbb
stos
xor
inc
retf
pop
or
push
push
adc
aad
mov
mov
xlat
or
les
outs
iret
arpl
mov
sbb
push
aaa
xchg
xlat
add
data16
scas
xchg
out
adc
es
cmps
xchg
pop
(bad)
jmp
(bad)
je
xchg
icebp
popa
push
or
sub
iret
sub
mov
mov
sahf
jbe
cmp
add
(bad)
mov
imul
xchg
outs
inc
arpl
xchg
xchg
popa
stos
sbb
int
push
adc
mov
push
mov
int3
ins
adc
out
inc
inc
and
leave
pop
adc
es
rcl
iretw
or
xchg
xor
push
xchg
retf
pop
xchg
jae
mov
into
adc
jmp
sbb
dec
adc
aaa
stc
dec
mov
sbb
mov
into
add
test
test
scas
fisttp
nop
lods
daa
xchg
stos
jno
sub
test
mov
push
nop
jnp
fs
inc
test
xchg
(bad)
test
aad
xchg
mov
pop
arpl
shr
jns
cmp
lea
enter
push
call
push
into
xchg
inc
mov
mov
and
sahf
jne
lahf
(bad)
pop
jecxz
xchg
dec
clc
or
mov
and
(bad)
aam
pusha
mov
inc
sbb
dec
dec
cmp
push
cmp
stc
stc
jmp
out
cmp
stos
fwait
sbb
test
push
stos
nop
outs
xor
pop
xchg
mov
call
xchg
sub
ret
or
dec
out
ds
int3
stos
xchg
lock
pop
outs
aaa
call
loop
iret
out
mov
adc
(bad)
nop
bound
push
fwait
and
mov
jp
or
or
cdq
sub
out
imul
ins
dec
push
into
fwait
or
scas
cmp
xchg
movs
std
in
ins
push
inc
mov
add
xchg
sbb
icebp
cmc
jnp
jg
jae
adc
xchg
arpl
mov
xor
sbb
xchg
daa
loopne
sbb
xchg
inc
sub
fwait
jle
in
fucomip
mov
jge
or
mov
dec
or
and
cwde
and
out
push
and
jge
dec
xchg
dec
mov
jle
jmp
adc
push
jge
ss
mov
(bad)
fcomp
pop
enter
pop
ins
push
(bad)
mov
sub
hlt
cmps
pop
add
mov
push
scas
mov
mov
stc
test
movs
xlat
xchg
push
push
movs
lea
iret
xchg
fnsave
fs
js
call
and
xlat
mov
xchg
pop
fcom
or
cmp
pushf
xchg
and
dec
push
push
aaa
loop
aam
movs
mov
mov
mov
enter
jne
sbb
sbb
fldcw
repnz
popf
ret
mov
dec
call
jge
xchg
mov
and
sbb
add
fsub
xchg
iret
push
pop
cmp
cmp
jge
clc
dec
sahf
pop
pop
shl
push
sub
popf
adc
std
xchg
aam
cmp
stos
ss
mov
sbb
jge
stos
ret
push
mov
sbb
ins
mov
stos
sbb
lahf
mov
nop
mov
mov
enter
and
lds
pop
ins
mov
adc
aad
iret
jge
mov
pop
shl
hlt
mov
mov
dec
dec
fsub
fs
mov
sbb
mov
shl
lds
mov
xacquire
and
sbb
mov
push
gs
sahf
sub
sbb
test
add
mov
in
and
imul
cwde
jge
or
push
pop
add
push
mov
sub
mov
push
popa
cwde
push
pop
pop
ficom
or
push
cmp
(bad)
movs
jg
or
mov
out
jl
prefetch
or
loope
ret
bound
mov
xchg
rcr
mov
sbb
xor
sub
jl
or
shufps
stos
sbb
test
call
jmp
xchg
jns
inc
dec
loop
sbb
jl
add
ret
in
pop
fistp
popf
push
jmp
test
dec
mov
arpl
clc
mov
xchg
clc
lods
push
cmp
std
stos
and
aaa
xor
mov
fsubp
push
mov
not
dec
rcr
add
into
(bad)
retf
cmps
add
and
shr
adc
adc
jl
repnz
mov
inc
xchg
add
adc
repnz
pop
fidiv
cmp
jmp
xchg
out
mov
test
int3
jmp
pusha
mov
jne
jno
push
cld
rol
test
mov
rcl
add
xchg
scas
sub
xchg
lock
or
loopne
scas
mov
mov
ds
addr16
sti
cmp
inc
cmps
into
enter
call
xor
mov
sub
and
jl
gs
add
inc
es
jle
movs
ins
pop
cmp
adc
pop
xchg
dec
sub
mov
push
sbb
and
xchg
sti
out
outs
out
sar
xchg
in
cmp
int3
or
aad
sbb
stos
mov
adc
or
xor
cmp
dec
rcl
xchg
sbb
sar
xor
lds
aam
add
shl
xor
add
cli
(bad)
xchg
jmp
xor
std
jb
adc
je
jp
jge
inc
xchg
(bad)
jns
mov
pop
xchg
and
push
add
xchg
cmp
inc
gs
stos
pop
fwait
mov
imul
test
fidivr
jle
outs
or
mov
ficomp
mov
fwait
xor
or
retf
sbb
cmp
test
pop
sub
or
xchg
rol
mov
add
adc
arpl
xchg
dec
shr
cmp
jl
xchg
bnd
inc
ret
or
adc
cli
lahf
fistp
jae
or
mov
push
sbb
push
mov
das
out
test
fwait
mov
in
mov
mov
mov
sbb
addr16
cdq
in
out
push
sub
push
fst
js
dec
int
data16
jae
cmp
xlat
dec
xchg
jbe
inc
cmps
pop
je
std
push
xchg
sti
and
pop
shl
in
ins
popf
mov
fistp
add
sbb
pop
adc
lea
add
cs
mov
sub
push
push
xor
push
pop
cli
add
jne
or
imul
mov
out
xchg
or
mov
in
fs
xchg
ret
les
loopne
add
xchg
shl
fcmovb
enter
outs
retf
clc
pop
mov
xchg
aad
sbb
dec
js
cmps
xchg
sbb
xchg
(bad)
sub
out
not
movs
sahf
ins
xchg
cmp
mov
jae
cs
sbb
xor
xor
cmp
icebp
push
stos
repnz
dec
popf
dec
or
adc
adc
sub
xchg
and
mov
mov
enter
sete
lods
mov
cmps
fstp
leave
stc
add
jae
push
pusha
fucomip
xchg
stos
mov
movs
adc
sti
fst
push
sbb
out
jecxz
or
xchg
dec
sub
out
mov
(bad)
stos
not
fbld
clc
xor
or
xor
xchg
test
xor
into
xchg
out
idiv
into
sbb
imul
je
xchg
daa
add
dec
ret
push
pop
lahf
or
outs
pop
mov
pop
cmps
add
pop
xchg
mov
pop
loope
adc
gs
xchg
inc
xor
pop
ss
cld
sub
cmp
cwde
mov
(bad)
push
(bad)
std
arpl
sbb
lahf
xor
jge
jb
xchg
cld
loop
sar
jl
xchg
push
shl
pop
test
test
enter
lods
lahf
mov
aaa
retf
dec
mov
cdq
mov
int3
xchg
imul
loop
dec
clc
aas
xchg
outs
push
jbe
mov
in
adc
lock
cld
push
adc
adc
repnz
lods
xor
sbb
jl
hlt
pushf
sbb
out
sbb
repz
aas
out
fwait
xchg
out
mov
aaa
inc
mov
ja
cmp
pop
mov
and
ins
add
pop
cmp
mov
jmp
lods
les
sub
icebp
pushf
cmp
ret
xchg
adc
inc
out
aaa
fdiv
repnz
xor
add
add
stos
xchg
and
cmp
jno
ins
test
lock
mov
xchg
repz
sub
popa
or
mov
push
xchg
mov
mov
xchg
xor
mov
aam
in
call
xchg
imul
and
xchg
push
xchg
xchg
dec
push
mov
inc
out
jp
push
xchg
xchg
dec
pop
dec
push
xchg
and
in
ret
jbe
pop
xchg
xchg
loope
push
(bad)
(bad)
cmp
repnz
fs
enter
jmp
arpl
daa
fwait
mov
dec
or
loopne
ds
inc
movs
addr16
adc
int
or
pop
sub
mov
test
mov
iret
xchg
ret
ins
inc
ds
stc
xor
mov
xchg
inc
mov
xchg
or
loope
xchg
(bad)
rol
sub
sub
xchg
sahf
or
fwait
jo
sbb
in
js
or
test
mov
pop
ret
pop
xchg
int3
mov
ja
adc
push
in
xchg
stc
sbb
xor
mov
test
jecxz
sbb
adc
(bad)
je
clc
rcl
inc
pop
les
jmp
(bad)
shl
add
xor
inc
cld
jmp
ret
not
mov
sub
sub
pop
inc
inc
je
xchg
(bad)
cmp
and
mov
cmp
aam
popa
jno
sbb
cwde
pop
adc
repnz
in
aad
push
jo
cmps
dec
mov
push
cwde
bound
ret
or
pop
je
adc
xchg
popf
jg
fnstenv
call
pop
daa
mov
hlt
sub
push
pushf
xchg
sbb
or
js
fs
push
in
xchg
inc
cmc
shl
xchg
lods
mov
mov
fs
mov
adc
loop
adc
push
daa
xchg
fiadd
test
jl
mov
shl
arpl
pusha
xchg
xchg
push
jo
leave
jmp
(bad)
jnp
cwde
cmps
hlt
ficom
fsub
lahf
fwait
movs
icebp
in
les
add
xchg
adc
stos
mov
mov
pop
arpl
es
stos
in
push
pusha
push
lock
mov
add
fild
xlat
dec
movs
mov
xchg
movs
and
cmp
imul
stos
lods
js
movs
mov
(bad)
jecxz
mov
pop
pushf
xor
neg
cld
dec
ret
out
ret
jge
in
sbb
jg
pusha
push
out
xor
jg
jb
enter
cwde
jmp
and
outs
into
inc
xchg
fwait
push
mov
add
stos
or
jge
in
loope
lods
(bad)
mov
or
fistp
arpl
jmp
popf
out
sbb
mov
lods
jl
pop
in
mov
retf
call
push
and
dec
push
fs
or
lods
lods
lock
mov
jo
jle
loop
inc
ds
cmp
clc
hlt
mov
lds
add
fild
and
jl
ins
dec
jge
jecxz
cdq
push
mov
xchg
hlt
sub
xor
mov
push
pop
jg
jl
add
mov
xor
and
xor
lock
arpl
dec
test
je
mov
sahf
ins
jmp
rcr
sub
jae
jge
hlt
add
xchg
jo
mov
stos
mov
mov
les
movs
mov
inc
jmp
daa
dec
and
repnz
lahf
sahf
and
imul
add
test
jnp
in
fbld
mov
popf
or
mov
xchg
mov
xchg
add
dec
cli
xchg
lds
dec
imul
std
mov
xchg
sbb
jno
xchg
xchg
repz
or
fsub
xchg
fdiv
push
out
add
xchg
das
retf
(bad)
sbb
mov
jge
cmp
dec
adc
std
les
add
rcl
dec
adc
dec
popa
dec
fnstcw
out
ror
adc
gs
mov
mov
stc
pop
aam
dec
imul
and
mov
call
sti
aas
cmp
aaa
push
movs
xchg
add
sahf
sub
inc
pop
retf
mov
add
hlt
into
xor
adc
push
rcl
stos
repz
mov
retf
mov
rcr
xor
(bad)
dec
add
les
in
sbb
xchg
pop
in
lods
lea
lock
pop
xchg
leave
imul
movs
fcompp
xchg
pop
mov
push
adc
neg
mov
ins
cdq
call
push
ret
sahf
aam
xor
dec
and
push
xchg
rol
cmps
and
xor
pop
and
or
and
or
outs
xchg
mov
sbb
pop
jae
xchg
(bad)
jle
movs
mov
push
mov
pop
scas
aam
int3
ret
pop
xchg
mov
mov
in
adc
mov
and
lds
dec
xchg
jmp
mov
pop
shr
imul
int
jno
sbb
call
je
das
mov
fbld
(bad)
pop
adc
imul
fs
xor
push
pushf
xchg
mov
aam
ret
and
add
or
rcl
jmp
inc
xchg
outs
sub
pushf
ret
ficom
inc
add
in
mov
xor
sbb
popf
ss
div
sbb
mov
ret
(bad)
and
fcom
in
cmps
les
inc
out
push
sub
mov
cwde
rcl
call
dec
xchg
jle
jns
inc
inc
jle
xchg
push
mul
xchg
sub
cmps
fs
movs
cmp
ret
icebp
adc
fist
loopne
mov
mov
shr
repnz
rcl
iret
inc
xchg
pop
push
sbb
fs
mov
std
ret
and
jge
ins
mov
dec
shr
lods
mov
bound
inc
pop
aaa
cs
mov
mov
dec
push
push
leave
aaa
mov
xor
xchg
jge
xor
sahf
(bad)
push
cwde
mov
add
gs
or
je
outs
xchg
les
mov
dec
pushf
ins
out
add
sbb
retf
pop
fcmovnb
dec
xchg
imul
hlt
shl
je
sub
out
repnz
test
rcr
jae
repz
scas
xor
and
ror
xchg
cmp
mov
call
jbe
xchg
ss
sub
ret
cs
pop
push
int3
push
out
pop
or
mov
adc
enter
jl
imul
or
xchg
aad
lods
sbb
adc
xchg
jge
and
sti
sub
push
mov
sbb
sahf
xchg
add
xchg
xchg
xchg
mov
sbb
xchg
sub
dec
xor
pop
or
rep
xchg
dec
and
test
adc
shl
js
jle
pop
les
inc
sbb
jmp
adc
std
mov
mov
adc
adc
xrelease
pushf
(bad)
xchg
inc
jnp
mov
mov
push
bound
xchg
add
retf
pop
mov
xchg
dec
xlat
jo
xchg
pop
fisubr
mov
xchg
(bad)
stc
adc
nop
sub
xchg
repnz
sar
mov
xchg
fistp
sbb
xchg
ret
fstp
imul
or
(bad)
fs
rep
pop
jo
xor
xchg
push
into
pushf
mov
mov
push
xchg
xchg
add
or
aas
and
dec
mov
inc
mov
iret
pop
jb
rol
push
push
jg
xor
xchg
pop
xchg
aaa
fld
test
repz
mov
fdivr
loope
add
stc
mov
adc
dec
adc
push
ror
cmp
dec
push
mov
fdivr
retf
repnz
dec
push
aad
cwde
push
push
ds
push
dec
mov
dec
fist
cmp
xchg
add
loope
test
inc
mov
idiv
rcl
jmp
add
scas
aad
mov
push
xchg
pop
repz
bnd
adc
and
jb
adc
popa
mov
popf
jp
outs
xchg
push
jns
out
scas
rcl
xchg
mov
mov
(bad)
pushf
push
in
(bad)
mov
xchg
aam
mov
dec
xchg
(bad)
xor
and
xchg
mov
xchg
adc
js
jp
xchg
test
lds
mov
es
xchg
mov
pop
outs
cmp
(bad)
push
mov
sub
inc
mov
add
adc
xor
mul
xchg
test
std
sti
cmp
xchg
fstp
ja
xor
out
iret
add
sar
retf
fdivr
and
mov
not
sahf
jmp
mov
inc
adc
call
inc
test
push
loope
jmp
adc
fwait
and
test
jns
rol
jno
lds
xchg
or
sbb
gs
mov
fcom
je
mov
add
xchg
sbb
inc
jmp
or
pusha
popf
push
repnz
cli
xchg
xor
mov
fstp
cmp
push
sub
scas
jns
imul
repz
jno
test
xchg
mov
mov
xchg
out
add
gs
xchg
adc
and
je
scas
push
add
mov
mov
sub
mov
or
add
cld
xchg
pop
adc
sar
xor
mov
les
add
aam
xchg
mov
xor
mov
imul
cdq
in
shl
mov
inc
fldcw
not
(bad)
leave
je
and
mov
fwait
shr
outs
stos
xchg
inc
int
xchg
xchg
add
loope
mov
or
(bad)
sbb
jl
sbb
in
push
imul
ret
fwait
pop
fwait
shr
mov
cmp
add
mov
(bad)
jnp
iret
jmp
mov
jle
cli
xchg
sbb
into
pop
mov
mov
inc
mov
or
daa
bound
inc
test
enter
jmp
fld
sahf
mov
cld
lahf
xchg
cdq
movs
scas
inc
xchg
add
inc
psubusb
push
adc
pusha
dec
pop
mov
out
push
xchg
or
int
mov
out
daa
enter
xchg
outs
cli
xor
pushf
cdq
xchg
ror
xor
ins
(bad)
in
js
jp
retf
ja
popf
std
les
stc
push
adc
shr
cmp
xchg
jne
pop
out
push
aam
and
mov
sbb
(bad)
dec
jae
xor
push
lods
inc
(bad)
fmul
mov
cmps
xchg
xchg
xchg
dec
pop
dec
fld
xchg
jle
and
dec
rcl
call
dec
call
cs
hlt
int3
xchg
(bad)
fwait
jecxz
and
out
adc
xchg
pop
pop
in
stos
push
jae
xchg
(bad)
fld
call
and
cwde
xlat
jno
xor
fadd
xchg
inc
push
ins
sbb
sub
mov
repnz
dec
dec
sti
push
cmp
lock
ret
gs
adc
adc
mov
push
leave
rcr
fst
xchg
xor
adc
xchg
sbb
inc
jp
sahf
test
xchg
mov
call
push
(bad)
jge
int3
adc
and
cld
and
cmps
pop
push
push
add
fcom
xor
ss
into
cdq
sbb
shl
int3
jge
dec
jmp
jl
pop
add
jmp
mov
xor
mov
cdq
fs
mov
aam
jmp
fimul
lahf
retf
add
cwde
inc
push
adc
jl
retf
dec
hlt
or
sub
int
idiv
(bad)
mov
sbb
jge
ins
ret
fldcw
push
or
xor
icebp
fnsave
pusha
jae
sahf
inc
ret
int
adc
les
ror
adc
int
adc
(bad)
cmp
jl
xor
outs
in
sbb
push
(bad)
mov
dec
mov
stos
movs
cwde
pop
add
cmps
sub
rol
fist
push
jl
jnp
push
pop
dec
mov
xor
inc
in
xor
mov
push
sub
jns
xchg
ins
rcl
sbb
xchg
cli
push
cmp
shl
inc
stos
pop
aas
xchg
pop
xchg
push
mov
retf
out
mov
outs
mov
cmp
rcl
push
sar
ror
adc
cmps
or
sbb
pusha
cmp
xchg
push
scas
mov
ins
pop
repnz
xchg
jo
cmc
inc
push
inc
add
xchg
xor
jae
sbb
js
imul
ja
loope
imul
push
ds
or
pop
mov
xchg
cmp
in
les
add
xchg
dec
in
js
push
imul
adc
mov
je
or
ins
test
xlat
mov
xchg
fimul
retf
inc
mov
fwait
cmps
inc
(bad)
xor
test
xor
pop
imul
push
addr16
dec
and
xchg
lock
xchg
bound
int3
test
cli
cmp
push
jne
xchg
imul
cdq
or
(bad)
push
xchg
push
push
xor
cwde
cmp
mov
inc
add
xchg
inc
jmp
xchg
das
push
push
in
ja
daa
loope
out
and
sub
dec
push
mov
ss
adc
push
pusha
xchg
gs
inc
loope
push
or
fdivr
push
and
add
jns
loopne
out
jmp
je
mov
fwait
dec
lods
cmp
stc
inc
jge
sub
retf
ficomp
mov
push
or
fmul
hlt
loop
nop
ror
pcmpeqb
pop
ret
xchg
sbb
adc
mov
push
jbe
mov
test
xchg
out
and
or
mov
scas
cwde
mov
cmps
ds
mov
adc
mov
lds
mov
xor
imul
sbb
dec
mov
or
stos
jl
mov
outs
dec
lahf
jl
aam
dec
stos
stos
xchg
sub
sbb
bound
pop
int
add
and
ins
pushf
mov
jge
cmp
sub
push
pmulhw
stos
jg
std
jge
lea
mov
cmp
jbe
iret
dec
(bad)
fld
adc
ins
(bad)
addr16
or
push
inc
cmp
aam
push
jg
xchg
mov
std
adc
(bad)
in
push
push
mov
pusha
cmps
mov
jmp
xchg
sbb
mov
adc
sub
push
cld
or
lahf
mov
xchg
shr
mov
test
jle
fwait
mov
push
and
cli
xchg
(bad)
mov
add
imul
mov
hlt
ret
cmc
xchg
in
dec
das
dec
inc
loopne
push
xchg
or
pop
aas
cld
push
(bad)
cmp
pusha
leave
fs
jl
xchg
test
stos
cmp
xchg
in
adc
xchg
cmp
pusha
(bad)
sbb
xchg
ret
xchg
imul
aam
pop
mov
adc
aaa
mov
(bad)
test
xchg
loope
dec
call
mov
nop
jmp
mov
xchg
popa
jb
mov
test
jmp
xchg
xchg
mov
ss
mov
scas
daa
retf
xor
xchg
jl
add
xchg
mov
cmp
xchg
or
jb
mov
pop
inc
adc
xchg
or
in
fst
push
adc
add
dec
fs
ds
push
cmp
into
out
cmps
inc
push
push
jb
xchg
ins
or
sub
stos
in
xchg
lds
mov
loopne
enter
and
fidivr
cmp
and
int
jbe
clc
movs
mov
gs
mov
xchg
pop
stc
arpl
inc
rcl
and
xchg
adc
sub
ins
adc
mov
shl
and
adc
lea
inc
jle
hlt
adc
and
call
xchg
jg
data16
mov
retf
adc
xchg
je
sti
xchg
jmp
xor
xchg
xchg
pop
pop
and
out
sbb
push
xor
rcl
ins
imul
push
add
mov
mov
(bad)
push
out
int
cmps
or
leave
pop
scas
sbb
xchg
xor
mov
mov
xchg
cwde
scas
xor
push
cld
rcl
jns
inc
stos
adc
das
movs
inc
dec
sub
jmp
gs
pop
dec
mov
xchg
cld
push
xor
sahf
lock
and
popf
sub
(bad)
push
lock
dec
xchg
jne
ins
pop
mov
mov
mov
and
out
push
inc
cmps
xchg
inc
repz
xchg
xor
cwde
icebp
loopne
out
es
pop
stos
jl
sbb
cdq
xchg
push
sub
hlt
cmps
mov
dec
sub
push
add
adc
lods
jns
adc
jmp
jbe
in
mov
sub
dec
and
loopne
cmps
jge
test
popa
xchg
cdq
mov
(bad)
cdq
pop
inc
push
lods
sbb
push
pop
adc
add
dec
clc
shl
adc
inc
xchg
stos
mov
(bad)
rcr
lods
adc
mov
cmp
sahf
ja
mov
fdivr
ret
adc
lods
xchg
or
jmp
inc
mov
xchg
cmps
ins
pop
inc
sub
fsubr
cdq
xchg
adc
push
push
adc
and
icebp
ja
scas
int
fwait
pusha
jp
stos
and
xchg
enter
ret
mov
cld
ficomp
ficom
ds
outs
xchg
(bad)
push
(bad)
lock
xchg
dec
mov
repz
adc
cmp
mov
sbb
lock
in
enter
or
pop
push
mov
cmps
icebp
xchg
mov
fdivr
mov
mov
mov
(bad)
sub
xchg
popa
push
outs
sub
pop
mov
xchg
into
inc
cmp
sti
adc
aam
jg
call
push
(bad)
sti
fwait
maxps
push
jg
fadd
xchg
movs
sbb
push
xlat
xchg
fwait
jecxz
adc
rcr
test
retf
stos
xor
imul
int3
out
add
aam
ins
nop
cwde
xlat
fst
pushf
data16
sub
xchg
xchg
pop
cmp
in
vmovupd
xor
iret
aam
std
jmp
rcl
xor
out
inc
xchg
sbb
or
fs
add
sub
repz
push
movs
or
cld
xchg
jbe
fnstcw
sbb
(bad)
pop
xchg
iret
inc
(bad)
(bad)
xchg
(bad)
rcl
add
je
adc
push
jg
scas
sbb
push
mov
test
xchg
mov
push
in
mov
daa
ror
mov
dec
movs
pop
fwait
push
xchg
pop
fs
xchg
jnp
outs
addr16
retf
mov
xlat
mov
lods
adc
adc
cmp
fild
mov
jl
fucom
pop
fstp
mov
xor
ds
test
and
xchg
sub
iret
xchg
jmp
and
mov
pusha
ins
mov
test
cwde
callw
pop
pop
xchg
loopne
bound
xchg
shr
xchg
lods
dec
out
mov
xchg
ret
adc
mov
dec
ret
push
dec
pop
cmps
xchg
and
es
push
imul
mov
(bad)
outs
stos
add
xchg
fst
add
adc
out
jnp
xchg
mov
neg
xchg
sbb
or
xchg
mulps
fimul
cmp
push
retf
fwait
pusha
fild
rcl
adc
xchg
mov
xchg
adc
gs
popf
sub
and
jmp
cdq
push
hlt
dec
and
xchg
pop
add
nop
or
push
out
dec
rol
push
xchg
jns
dec
mov
sub
arpl
fs
sbb
or
imul
test
lahf
jg
fld
push
hlt
js
cmp
push
dec
jbe
cwde
sbb
sbb
ins
cwde
sub
adc
out
or
scas
jge
pop
push
mov
rcl
sbb
jns
pushf
mov
call
mov
aas
ror
out
jbe
out
push
sar
cs
and
cmp
fmul
repz
dec
in
jnp
fsub
shl
cli
cmps
movs
inc
scas
shr
loopne
jge
push
jmp
xchg
mov
and
dec
jb
jle
hlt
or
cmp
in
or
cwde
xchg
adc
sahf
dec
jns
xchg
adc
into
sub
xchg
loop
push
fcomp
adc
sahf
ss
cli
scas
pop
popa
xchg
test
xchg
or
dec
sti
jns
cdq
add
mov
leave
or
push
xchg
test
xchg
sar
sahf
cld
in
lods
mov
mov
and
adc
push
xchg
and
mov
xchg
mov
nop
jno
xchg
in
dec
sub
mov
xor
and
ds
mov
push
jns
dec
js
sub
or
ins
shr
push
adc
mov
cmp
adc
mov
loop
imul
add
inc
xchg
and
fdivp
xchg
cmp
mov
sbb
(bad)
xchg
loop
retf
rcr
sar
jle
xor
pop
xchg
add
add
push
jmp
pop
and
mov
shr
enter
adc
lods
adc
dec
adc
xchg
mov
out
inc
mov
aam
in
adc
push
jno
stos
xchg
div
adc
xchg
jle
bound
xchg
fld
mov
in
xor
mov
rol
mov
ins
inc
pop
and
adc
stc
xor
aaa
xchg
lahf
inc
outs
call
in
inc
xor
push
jno
mov
mov
xor
jo
popf
rcl
adc
mov
cmp
xchg
inc
inc
mov
pop
jbe
mov
jge
test
add
iret
test
aas
xchg
ja
sub
push
push
xchg
lahf
xor
(bad)
xchg
adc
ss
(bad)
ficomp
js
dec
mov
fs
arpl
psrld
xchg
cmp
pop
mov
stos
bound
cmp
fidiv
dec
pop
stc
ret
sti
fimul
or
or
popa
mov
mov
je
cmp
loopne
nop
bound
inc
ds
les
imul
outs
adc
retf
ret
inc
push
mov
sbb
scas
xchg
aad
cmps
push
sub
xchg
xor
jp
push
in
xor
mov
loopne
jecxz
and
pop
xlat
lds
cmp
les
pop
mov
bound
xchg
rcr
and
mov
adc
and
cwde
mov
cmp
and
(bad)
mov
cli
push
outs
out
aam
repz
popf
mov
push
ins
in
adc
popa
xchg
or
xchg
mov
inc
ficomp
xchg
dec
xchg
cwde
pop
cld
push
ret
sbb
and
aam
add
lock
jl
test
int
or
aam
pop
lock
xchg
test
jnp
xchg
fs
push
ret
xor
ins
xchg
std
adc
je
inc
xchg
rcr
dec
cli
cmp
ret
sub
aam
jle
xchg
repnz
fwait
xor
xchg
pop
imul
dec
outs
iret
adc
xchg
jo
cmp
scas
add
xchg
ins
push
je
sahf
and
xor
sbb
pop
mov
jae
stos
sbb
add
pop
je
xchg
dec
pop
fcom
push
push
lock
xchg
adc
push
or
xor
xchg
adc
cmp
and
loopne
mov
jns
ss
pop
jb
xchg
mov
mov
sub
mov
mov
fdiv
push
adc
mov
bound
cmp
inc
(bad)
data16
int
jbe
mov
pop
or
push
pop
addr16
cs
mov
ror
mov
xchg
(bad)
add
fnsave
cmp
div
inc
pop
mov
jecxz
dec
mov
fs
stos
or
enter
mov
xor
add
sbb
mov
lock
and
out
xchg
push
in
fsubr
ja
push
pop
push
adc
iret
lahf
inc
sar
push
loopne
sar
and
xchg
mov
adc
in
xchg
sbb
vmread
xchg
pop
aam
pop
or
cmps
xchg
not
push
xchg
sbb
mov
pop
jmp
aas
jg
cmps
pop
pop
jbe
fist
pusha
lds
adc
out
xchg
(bad)
mov
(bad)
cmc
xchg
push
popa
les
mov
xor
inc
popf
inc
xchg
repz
fs
pop
loope
aam
out
movs
cld
mov
xchg
scas
inc
ja
xor
lods
pop
cli
mov
adc
xor
jle
neg
lds
hlt
pop
lea
int3
pushf
mov
cmc
add
iret
cmps
cmp
fwait
jl
or
cmps
pop
sub
repz
(bad)
call
mov
in
jns
sbb
xor
sub
fs
lea
out
or
mov
(bad)
dec
xchg
dec
or
repz
xor
retf
cmp
sub
xchg
mov
dec
push
inc
push
and
xchg
ins
and
pop
add
push
inc
xchg
outs
(bad)
or
in
(bad)
rcl
xchg
pushf
in
out
out
xchg
mov
bound
mov
aaa
test
inc
dec
movntq
and
int
push
xchg
add
push
xchg
cmps
cmp
mov
mov
mov
fdiv
mov
sbb
lea
sahf
test
test
rcr
or
jmp
xchg
mov
dec
inc
inc
xchg
dec
pop
ror
sti
mov
pop
inc
inc
push
and
add
xchg
add
xor
push
mov
test
aam
cwde
aad
clc
push
inc
dec
sar
sbb
mov
dec
daa
pop
mov
jle
xor
push
nop
bnd
daa
mov
mov
jmp
adc
cmps
test
scas
xor
je
mov
adc
cdq
lock
bswap
ror
stos
fcomp
and
jns
adc
add
sahf
in
mov
aas
adc
lock
mov
adc
cmp
sub
jmp
sbb
sbb
fs
mov
xchg
lahf
pop
jbe
inc
mov
enter
push
jge
ror
cld
push
xor
cwde
pop
clc
fnstsw
xchg
push
shl
je
xchg
outs
add
ins
sbb
xchg
aas
push
jmp
mov
movs
stos
jl
popa
movs
push
cmp
add
call
test
xor
pop
xor
sub
shl
jbe
imul
adc
lea
push
sbb
lahf
jmp
or
lods
sub
fcomi
xchg
adc
dec
jmp
movs
push
xchg
cdq
scas
test
and
inc
test
mov
mul
push
clc
repz
hlt
stos
sbb
ins
xchg
pop
xchg
jmp
sbb
test
mov
(bad)
lahf
sbb
mov
enter
mov
lds
pop
inc
jne
repnz
ins
arpl
fiadd
imul
jp
jl
push
stos
(bad)
ror
cmps
dec
movs
jl
sbb
je
mov
pushw
nop
ficomp
cwde
sub
pop
div
stos
retf
xchg
cli
aad
or
and
hlt
jo
xchg
pop
jge
sub
icebp
jo
cmp
mov
loope
sub
jnp
adc
jl
aam
fmul
sbb
xor
cs
pop
add
test
and
mov
hlt
call
int
adc
xchg
and
dec
sub
enter
mov
sub
adc
add
and
stos
mov
hlt
xchg
mov
pop
mov
ficom
sbb
pop
mov
jnp
pop
stos
push
adc
adc
sbb
inc
dec
in
push
push
hlt
mov
mov
outs
sbb
(bad)
pop
sbb
sbb
xor
lds
test
movs
dec
mov
push
movs
es
sbb
jno
cld
inc
jecxz
push
add
xor
jns
add
mov
dec
lock
sar
fistp
mov
adc
mov
enter
ds
cld
fidivr
add
cdq
cmps
pushf
jl
or
ja
push
add
add
movs
jp
sub
int3
mov
data16
dec
je
ins
xchg
hlt
in
xor
ret
inc
aad
sar
stc
fwait
xchg
(bad)
jbe
in
cld
mov
(bad)
adc
hlt
push
mov
adc
nop
ret
pop
xor
mov
aam
in
inc
popa
fsub
je
push
xlat
ins
in
in
dec
push
fstp
xor
cli
in
push
mov
lods
ja
mov
cmps
mov
aas
sub
and
out
out
movaps
adc
xor
aas
add
jl
fsub
call
sbb
leave
sub
out
xor
outs
out
leave
adc
pop
lahf
mov
pop
call
or
and
push
rcr
cmp
cmps
lock
xlat
loopne
mov
popf
xchg
ds
or
xor
push
les
call
jb
and
xlat
sub
cmps
mov
stos
xchg
inc
jo
dec
(bad)
jbe
in
and
ja
fcomp
sbb
(bad)
hlt
adc
nop
jl
sbb
mov
je
int
push
dec
jecxz
and
push
cmc
add
test
add
cmps
fwait
jmp
cmp
adc
xor
(bad)
iret
jle
xor
and
nop
sbb
sub
xchg
scas
cmp
pop
pop
in
lock
fstp
pop
addr16
mov
dec
xor
add
and
push
iret
fs
adc
jmp
and
adc
dec
cmp
adc
sub
xor
cdq
arpl
inc
ficomp
inc
xchg
pushf
and
adc
jecxz
stos
mov
mov
mov
stos
mov
(bad)
jge
jle
dec
jl
mov
mov
adc
xchg
xor
cmps
(bad)
sbb
(bad)
(bad)
popfw
jmp
loopne
xchg
rcl
jbe
int
outs
pusha
jg
cld
imul
out
and
repnz
mov
aam
xchg
jg
jp
mov
out
call
sbb
mov
push
add
fsubr
je
dec
push
retf
std
or
xor
xlat
pop
sbb
sub
mov
cld
mov
xor
xlat
bswap
iret
imul
mov
mov
mov
mov
adc
xor
jg
xchg
and
rcl
push
rcl
cwde
jo
(bad)
adc
stc
xchg
stos
fdiv
mov
dec
push
push
xchg
in
mov
or
push
sbb
int3
daa
jno
lahf
xchg
cmp
add
fdivr
push
mov
imul
mov
xor
xchg
mov
fbstp
or
movs
push
mov
inc
outs
out
pop
pop
out
jne
mov
sbb
mov
hlt
xchg
lods
cmp
mov
jecxz
push
push
cmp
sub
xchg
jp
scas
test
inc
mov
xchg
push
inc
retf
mov
or
cmp
mov
pusha
sub
pop
jecxz
sar
int3
inc
hlt
mov
xor
jno
stos
or
repnz
ins
mov
stc
nop
xchg
xchg
in
outs
les
(bad)
push
js
push
push
je
aad
popf
rcr
xchg
and
jmp
sub
xchg
fwait
shr
sbb
popf
cwde
or
and
in
icebp
scas
mov
int3
sbb
mov
inc
mov
shr
rol
xchg
ret
mov
mov
or
xchg
xor
dec
stos
pop
addr16
dec
mov
jmp
sbb
add
mov
inc
push
sete
repz
xor
mov
push
xchg
and
xchg
pop
sbb
aas
sub
adc
dec
cdq
mov
mov
xchg
and
lods
sbb
xor
push
fst
pop
adc
mov
jne
xchg
mov
dec
inc
xchg
cmc
in
mov
ins
mov
arpl
xor
xchg
movs
xlat
mov
xchg
jl
mov
(bad)
sar
jp
dec
dec
pop
xchg
stos
jnp
xor
jo
mov
xchg
jns
inc
outs
aaa
scas
pop
inc
or
xchg
stos
mov
inc
pop
call
in
daa
arpl
xchg
add
add
cwde
xchg
in
xchg
aam
inc
scas
mov
xchg
lods
aad
pop
div
rsm
out
je
xchg
ret
adc
add
fmul
xchg
and
push
pusha
pop
or
shl
push
sbb
push
test
(bad)
leave
fwait
out
xchg
cmc
jae
test
jg
fisubr
in
mov
xor
or
ja
lods
loope
mov
or
add
mov
(bad)
sahf
pop
in
ja
cmp
xor
xchg
mov
xchg
(bad)
cmp
xchg
scas
inc
push
push
xchg
xor
rcl
adc
aam
and
int3
and
sahf
frstor
adc
add
icebp
enter
movs
jge
fist
cwde
sar
or
pop
inc
push
call
cmps
jg
mov
pop
adc
sbb
xor
call
inc
xchg
xchg
loop
mov
rol
xchg
test
xor
loope
xchg
cwde
cmp
xor
push
test
adc
xlat
cmc
enter
js
xor
xchg
mov
std
sub
push
and
pop
jmp
int
rcr
jns
ret
sub
into
pop
shl
ins
sub
(bad)
movs
in
mov
into
xor
cmp
cmp
push
sub
mov
das
ja
test
test
je
shl
(bad)
jmp
and
data16
jmp
xchg
xchg
popa
repnz
aad
ret
cdq
test
xchg
jns
nop
xor
imul
pop
cmp
jge
(bad)
rcl
pop
pop
xchg
pusha
mov
dec
mov
or
sub
fisubr
mov
mov
out
xchg
pop
xchg
xchg
and
push
xchg
mov
(bad)
div
jge
sub
cmp
mov
dec
js
(bad)
int3
and
adc
dec
into
pushf
pop
mov
xchg
add
mov
and
sbb
in
(bad)
push
adc
out
fist
push
clc
xchg
dec
push
loopne
xchg
mov
shl
xchg
pusha
push
in
cmp
cwde
mov
xchg
movs
(bad)
mov
std
inc
xchg
cmps
jmp
out
aas
sub
add
jnp
scas
js
push
xchg
add
adc
mov
dec
ja
xchg
outs
add
rcr
pusha
and
or
mov
jp
mov
pushf
dec
xchg
jp
pop
addr16
dec
in
stos
into
xchg
dec
mov
ins
xchg
aam
push
loop
xchg
mov
xchg
and
xchg
shr
pop
pop
in
xor
mov
xor
sub
pusha
sub
xchg
in
idiv
mov
fadd
nop
or
ins
hlt
movs
imul
lods
inc
test
rcr
popf
push
cld
adc
mov
xchg
stos
adc
inc
lea
and
pop
xchg
mov
sub
rol
js
jo
outs
mov
dec
iret
dec
inc
(bad)
(bad)
adc
cmp
ja
scas
leave
sub
or
loope
jp
fwait
mov
in
clc
mov
xor
xchg
xchg
pop
cmps
addr16
and
adc
mov
outs
mov
sar
out
xor
dec
inc
add
add
fwait
xchg
mov
rol
or
loop
mov
fld
(bad)
bnd
(bad)
popa
arpl
adc
(bad)
jg
sti
xchg
nop
mov
loope
xchg
mov
cmps
inc
mov
test
cmp
adc
xor
sbb
push
dec
in
stos
xlat
fwait
les
cli
cmp
outs
dec
adc
cld
ja
add
mov
in
and
cmp
xchg
mov
xchg
mov
jb
pop
lahf
out
gs
(bad)
iret
pop
mov
xchg
sbb
dec
dec
aam
fprem
out
add
xchg
adc
push
mov
dec
mov
aaa
cld
sbb
or
mov
clc
addr16
jb
aam
mov
loopne
pop
mov
out
frstor
xchg
sbb
xor
shl
lahf
mov
push
jmp
cmp
les
cli
sbb
(bad)
pop
mov
loope
test
xor
mov
jne
adc
les
or
and
xor
mov
xchg
xor
int
pop
mov
add
cmp
lea
aad
adc
push
pop
dec
sub
dec
mov
in
je
mov
clc
push
add
test
out
fcomp
push
adc
nop
xchg
fcmovnu
cmp
jno
inc
test
(bad)
add
mov
add
fidiv
icebp
into
fstp
sbb
xchg
or
inc
jmp
dec
arpl
inc
fmul
pop
inc
imul
xchg
jae
gs
stc
push
inc
add
dec
pop
fcom
fs
or
xchg
test
mov
mov
fild
aam
cwde
cmp
inc
jle
sbb
push
xchg
and
in
bound
call
lds
add
ins
push
xchg
pop
dec
and
dec
mov
js
mov
adc
or
fisttp
push
xchg
push
outs
and
(bad)
adc
sbb
adc
mov
adc
scas
xor
pop
and
mov
mov
hlt
pop
sbb
xchg
xor
add
cmp
pop
jo
dec
scas
aaa
(bad)
push
js
xchg
test
retf
pop
fwait
push
mov
jle
add
sahf
pop
and
fcom
call
adc
repz
int
jge
inc
push
xchg
and
retf
(bad)
and
adc
jo
xor
xchg
scas
pop
xchg
jbe
or
jp
pushf
ret
jb
call
fwait
push
or
cmps
adc
arpl
cs
xchg
dec
(bad)
hlt
sub
sbb
mov
mov
stos
fcomp
mov
add
add
aam
cmp
xchg
loop
lds
stos
push
ret
addr16
(bad)
aad
cmps
daa
(bad)
rol
out
dec
jecxz
and
loopne
enter
push
in
add
cs
pop
mov
lods
ss
cld
imul
or
push
sub
pop
mov
ins
daa
xchg
mov
push
jns
addr16
xchg
mov
jae
sbb
movs
xchg
sbb
popf
test
rcr
cmp
stc
fld
sub
xchg
adc
xchg
pop
ja
xchg
push
pop
gs
dec
int
and
and
adc
mov
adc
cmp
(bad)
loopne
xchg
aas
adc
add
xchg
movs
mov
fcmovnb
mov
xchg
adc
pop
mov
pop
push
jl
xchg
adc
lods
dec
imul
adc
int3
popa
cmp
dec
mov
mov
(bad)
pop
out
movs
push
push
mov
jge
fisub
push
dec
lds
daa
adc
xchg
inc
stos
cld
mov
ret
jl
xchg
fiadd
inc
push
mov
dec
cwde
fadd
xchg
and
mov
and
int
ret
and
pusha
dec
push
pop
jl
mov
ins
test
or
mov
xchg
sbb
dec
or
jge
mov
sti
hlt
fisub
les
inc
fs
call
jmp
jl
inc
cli
fdivr
add
ret
and
fadd
add
lea
xor
mov
pop
adc
movs
retf
jb
setl
mov
sbb
mov
and
dec
fbld
mov
or
cmp
jmp
inc
and
test
imul
adc
(bad)
jne
mov
xchg
mov
cmps
stos
mov
(bad)
loopne
dec
or
hlt
cmps
sbb
ret
enter
sahf
jmp
in
jle
xchg
mov
mov
add
into
ja
jecxz
call
stc
push
push
mov
imul
mov
mov
(bad)
push
jne
dec
outs
lahf
loop
push
xor
fstp
pusha
pop
imul
jge
mov
xchg
movs
loop
sbb
sbb
pop
or
sub
jmp
shl
adc
pop
dec
call
dec
xchg
jmp
adc
cmps
outs
jl
mov
push
ins
mov
mov
(bad)
or
jge
cmps
(bad)
movs
xchg
xor
mov
sbb
in
rol
loopne
mov
loope
pushf
arpl
mov
adc
jns
popa
xchg
test
mov
inc
ret
dec
mov
mov
ror
fs
iret
jns
adc
ror
or
push
jno
int
push
in
aam
movs
adc
into
xchg
push
sar
pushf
mov
arpl
ds
xchg
mov
push
xor
lods
cwde
push
or
jne
add
je
mov
add
pop
out
xchg
cmp
dec
out
inc
mov
xchg
inc
adc
pop
fcomp
stos
and
and
aam
call
xchg
mov
pushf
jne
mov
cmp
ins
loop
cmps
jecxz
je
out
sub
ficomp
bound
imul
cdq
out
xchg
mov
sbb
fisttp
pop
xchg
fwait
or
inc
mov
and
aaa
dec
mov
fisub
retf
les
xchg
sub
mov
icebp
xchg
dec
sub
retf
cmp
jae
addr16
cmc
push
in
cs
imul
fs
rcl
and
(bad)
clc
lds
mov
mov
sub
pop
xchg
and
adc
mov
mov
lds
dec
les
jae
cmp
mov
push
pushf
lgs
(bad)
mov
aam
adc
mov
xchg
movs
push
icebp
jae
xchg
adc
adc
xchg
and
inc
xor
aad
stos
or
popf
jns
in
lock
in
int3
shr
jno
jbe
and
scas
pop
xchg
mov
inc
and
xchg
loope
xor
mov
mov
aaa
lods
push
mov
jno
add
mov
mov
js
in
add
prefetchw
mov
(bad)
in
cdq
enter
cmp
test
fs
or
push
addr16
xchg
mov
adc
xchg
clc
sub
ja
xchg
je
loop
adc
adc
stos
push
mov
mov
adc
push
jmp
push
and
or
pop
fistp
sbb
push
adc
xchg
cmp
in
out
xchg
xchg
mov
xchg
inc
xchg
call
lods
(bad)
out
xchg
jl
xor
sub
inc
add
pop
cmp
hlt
add
lds
repz
jge
iret
push
xchg
ins
leave
sbb
add
popf
jl
ret
vphaddubd
les
mov
xor
adc
lods
in
loop
push
(bad)
out
lock
add
mov
mov
nop
dec
xchg
cmp
inc
test
lahf
cmps
mov
jmp
mov
xchg
fcom
and
shl
leave
xor
xchg
and
pop
mov
mov
ins
mov
fwait
xchg
movntq
out
add
adc
push
pop
repnz
and
aam
mov
add
ins
shl
pop
adc
mov
aas
out
jecxz
cmp
jb
fdivrp
mov
adc
push
in
lock
imul
fwait
sbb
les
(bad)
jge
(bad)
fwait
loopne
push
adc
rcl
movs
outs
sbb
xlat
mov
into
sti
sub
pop
cs
mov
cmc
stos
(bad)
push
xchg
stos
xchg
pop
sub
ficomp
add
xchg
inc
xchg
mov
fdiv
rcl
cmps
ret
sub
push
cmp
test
xchg
xchg
ds
(bad)
cld
lods
xchg
dec
push
idiv
das
repz
cmp
mov
aam
movs
(bad)
shr
mov
adc
jp
push
inc
add
ins
xchg
mov
xor
jecxz
jge
mov
cmp
add
jmp
xchg
movs
es
in
sub
push
jne
mov
push
rol
jmp
and
cwde
pop
mov
jae
nop
imul
jnp
enter
xchg
aaa
out
xchg
mov
push
mov
inc
(bad)
xchg
push
imul
mov
icebp
fwait
test
nop
jmp
push
sub
in
sbb
add
ror
je
pop
mov
mov
xchg
adc
sar
jbe
retf
add
imul
(bad)
adc
leave
inc
ss
outs
mov
jo
mov
dec
aam
out
xchg
pop
std
sub
ret
es
rcl
or
xchg
xchg
sahf
xor
lods
(bad)
adc
in
mov
idiv
and
out
movs
lock
xchg
cmp
fadd
or
adc
xchg
fist
cmp
xchg
sbb
and
push
stos
xchg
and
fnsave
cmp
mov
and
outs
cmc
in
jno
fld
mov
cmps
xchg
and
inc
add
stos
stos
cmp
sahf
xor
fwait
adc
adc
hlt
mov
ror
xchg
push
icebp
cwde
dec
ins
xlat
inc
mov
push
cld
rcl
mov
sbb
addr16
inc
pop
retf
pop
jg
ss
sbb
mov
iret
xchg
and
fsub
and
cmp
ins
xchg
sbb
add
in
out
mov
mov
jp
loopne
mov
xchg
push
js
lock
dec
or
(bad)
jecxz
add
sbb
outs
inc
adc
add
cmp
int
or
loop
xchg
addr16
add
stos
jmp
pop
inc
xchg
cli
xchg
push
push
xchg
cmp
loop
int3
jmp
adc
fidiv
xchg
inc
inc
pop
mov
xchg
push
fimul
xchg
jmp
movs
mov
fwait
add
pop
jne
inc
adc
cmps
stc
xchg
sub
and
aam
xchg
outs
xchg
pop
mov
retf
fdivr
adc
dec
jge
mov
adc
loope
jmp
aad
mov
mov
inc
xchg
push
add
xchg
xor
es
pop
pop
jb
xchg
adc
not
pop
sbb
jo
add
xor
inc
int
cwde
mov
into
pop
sahf
and
daa
test
call
daa
push
test
cs
mov
mov
xor
and
jmp
mov
xor
push
or
pushf
jge
lea
inc
ins
in
add
xor
cwde
mov
icebp
mov
out
cmp
imul
cmp
jge
fstp
cdq
cdq
add
cmp
lods
in
mov
or
or
aaa
cmp
sbb
xchg
inc
sbb
push
xor
std
xlat
sub
sbb
mov
ret
mov
test
les
test
out
xchg
sub
push
inc
jge
jmp
mul
push
aam
inc
mov
cld
xchg
mov
adc
loop
dec
fs
push
pop
lock
sbb
mov
out
scas
mov
enter
dec
shl
fisub
add
mov
cmp
inc
xchg
xchg
push
xor
(bad)
rcr
outs
imul
and
sbb
push
mov
xchg
sbb
adc
cdq
dec
sbb
call
sahf
add
push
mov
(bad)
xchg
pop
fs
mov
mov
hlt
and
mov
push
je
scas
pop
add
mov
inc
retf
jmp
sti
int3
int3
(bad)
adc
cmp
pop
loop
mov
aas
das
stos
lahf
jnp
sbb
out
repz
fcmovbe
shl
scas
shr
jle
out
in
ins
imul
pop
pop
xor
(bad)
daa
mov
jl
rcl
popf
lods
in
xchg
or
mov
mov
cmps
test
xchg
iret
inc
bound
mov
sbb
cwde
push
loopne
fwait
xor
(bad)
stos
xlat
popf
imul
(bad)
push
inc
jmp
pusha
xor
es
cdq
mov
xchg
cmp
push
imul
bound
xchg
cdq
mov
idiv
movs
jl
push
call
popf
nop
ds
add
ss
fidivr
daa
inc
dec
mul
jle
stos
xchg
and
inc
pusha
jne
dec
adc
xchg
mov
rcl
stc
xchg
int
mov
push
jne
mov
scas
enter
xor
xchg
jno
dec
sub
out
outs
test
clc
push
mov
and
mov
fsubr
sub
inc
cwde
xchg
nop
xchg
aas
xchg
push
dec
movs
pop
xchg
jecxz
push
or
lods
ins
sbb
sub
push
jae
sti
fistp
dec
enter
xchg
in
mov
mov
xchg
sti
push
daa
ret
popf
mov
sbb
sbb
push
pop
inc
test
cdq
nop
xchg
stos
mov
or
or
mov
xchg
or
xor
lds
xor
push
pop
iret
mov
push
sub
shl
sbb
ret
cmps
lahf
fisttp
rcl
pop
pop
int3
ins
push
das
xchg
stos
pop
cmp
fld
iret
dec
cmp
lds
sub
adc
adc
pop
setnp
xchg
inc
jmp
mov
test
fdiv
sbb
movs
test
mov
pop
mov
adc
and
adc
mov
mov
mov
inc
das
outs
and
jbe
jb
xchg
adc
pop
adc
arpl
lock
cli
xchg
jp
(bad)
cld
ss
das
xchg
out
jge
cs
hlt
addr16
xchg
add
xchg
ins
sub
loope
xchg
idiv
sar
imul
mov
fsub
jnp
movs
shl
xchg
enter
mov
int
mov
push
es
xchg
cmps
adc
pusha
xchg
push
xchg
test
cs
lea
fiadd
sub
and
xchg
outs
ret
sbb
pop
and
cs
mov
or
iret
daa
addr16
loope
and
cmp
mov
jns
mov
cs
and
sbb
xchg
fdiv
cmps
rcl
cwde
xchg
inc
ror
pop
pop
fmul
loope
fstp
mov
std
fst
push
test
sbb
push
daa
dec
in
pop
cdq
ficom
cmp
jb
in
movs
(bad)
ror
movs
jno
adc
adc
lods
mov
bound
mov
add
and
adc
sbb
(bad)
sti
fist
dec
pop
dec
mov
xor
out
bnd
jecxz
sti
xchg
and
hlt
lea
jg
sbb
cld
xor
jle
add
xor
rcl
pop
mov
inc
lods
xchg
je
pop
inc
mov
xchg
int
pop
into
rcl
jns
mov
cmps
xor
mov
xchg
xchg
or
mov
mov
test
push
test
retf
add
xor
rcl
js
xchg
in
call
push
xchg
cmp
stc
call
cwde
mov
mov
fld
or
jecxz
jne
aam
sub
pop
xchg
ror
ja
xchg
jecxz
and
jle
daa
test
dec
add
jg
ins
lods
cmc
add
(bad)
mov
aam
rol
and
dec
fwait
nop
adc
ins
xchg
sahf
xchg
mov
hlt
ret
repnz
xchg
adc
pop
in
jg
mov
aam
jge
mov
nop
xor
les
sbb
xchg
jne
jmp
xchg
cmps
jecxz
xchg
jae
xchg
pop
push
int
ficom
mov
mov
outs
ret
jle
dec
cmps
xchg
test
loopne
fwait
xchg
and
dec
adc
xor
adc
or
and
inc
jae
stos
and
sub
setne
cmp
fcom
pop
(bad)
stos
ja
cmp
and
inc
cld
push
pop
ss
push
ret
in
xchg
stos
jge
xor
test
jnp
mov
dec
jmp
pushf
adc
jp
inc
(bad)
loopne
push
fwait
jmp
and
clc
movs
into
sbb
add
fisttp
(bad)
mov
inc
add
dec
pop
mov
outs
and
mov
das
xchg
jecxz
cs
cmp
scas
or
rcl
or
pop
shr
sahf
push
test
lahf
(bad)
int
dec
jmp
out
jle
cmp
add
or
scas
rol
adc
sahf
test
jle
jbe
mov
ror
dec
ret
arpl
cmp
push
push
jmp
xor
xchg
mov
add
xchg
pushf
push
pop
test
pop
mov
sub
mov
xchg
les
mov
pusha
xor
xchg
or
inc
cmp
popf
pop
push
xchg
sub
mov
jle
xchg
adc
xchg
out
(bad)
xchg
shl
clc
sub
mov
adc
cld
sub
(bad)
fmul
into
sbb
cmps
aas
and
shr
xchg
jnp
int
adc
(bad)
xor
sbb
test
jno
push
mov
sub
and
jge
dec
jmp
stos
retf
jg
scas
cld
sbb
retf
pushf
sub
and
scas
fbstp
(bad)
idiv
pop
jmp
xor
cld
lock
mov
mov
pop
ror
sbb
mov
mov
cs
mov
mov
xchg
out
daa
mov
fwait
out
push
enter
pop
enter
rcl
cmps
push
fcom
jp
or
fild
adc
jp
not
mov
cmp
xor
jb
lock
jg
xor
dec
add
aaa
xchg
xor
adc
xor
mov
xchg
rcr
push
adc
ret
xchg
rep
mov
dec
mov
je
add
and
adc
retf
test
mov
cs
inc
mov
xchg
sub
mov
xchg
iret
aaa
xchg
adc
mov
xchg
mov
dec
inc
cli
ins
not
stos
xchg
nop
mov
sub
xchg
jle
(bad)
sbb
inc
adc
scas
xchg
nop
lods
seta
add
scas
outs
adc
xchg
push
imul
xchg
jbe
adc
push
sub
in
xchg
push
lods
mov
outs
xchg
test
std
push
loop
mov
jp
jle
clc
dec
cli
jg
outs
iret
add
stos
cld
or
out
fimul
mov
dec
jb
and
pop
rcl
or
sub
mov
inc
jle
cmp
mov
push
jae
push
sbb
loop
and
imul
adc
mov
mov
test
jae
fimul
pop
mov
mov
adc
pop
out
jno
mov
stos
iret
push
cmp
adc
xchg
inc
cmp
xor
(bad)
rcl
dec
in
push
pop
xchg
in
xchg
add
sbb
xchg
lahf
adc
dec
xor
jle
pop
adc
push
movs
xchg
loope
out
scas
addr16
adc
pop
dec
les
mov
push
inc
test
fs
xchg
mov
xchg
cdq
mov
cld
push
movlps
inc
xchg
fwait
xchg
ss
adc
in
jl
fwait
pop
hlt
stos
mov
ret
sub
adc
xchg
and
dec
push
pop
das
std
xchg
vpackssdw
aaa
and
xor
pop
pop
xchg
dec
movs
mov
call
ds
fwait
and
dec
push
loopne
xchg
push
pop
xor
cwde
adc
dec
shr
xchg
xchg
push
pop
iret
adc
sbb
xchg
ins
push
sar
(bad)
cld
js
inc
fs
jno
pop
cmps
sti
out
out
out
push
pop
xchg
mov
je
jge
add
inc
jae
pop
icebp
popf
cmp
(bad)
je
in
adc
mov
pusha
(bad)
and
mov
jl
sbb
xchg
mov
mov
mov
shl
xchg
or
lahf
push
pusha
mov
push
pushf
lock
cmp
xchg
and
ret
nop
dec
or
xchg
mov
out
fwait
retf
cmp
sub
add
fldenv
lods
jne
push
mov
jbe
lahf
sub
adc
fld
xchg
mov
and
jns
inc
mov
xlat
mov
xchg
(bad)
jmp
(bad)
shl
test
adc
xchg
jne
or
jo
jp
pop
js
and
imul
adc
clc
cdq
mov
jle
sahf
dec
xchg
add
xchg
and
movs
add
into
mov
cdq
jnp
jne
repnz
stos
push
das
(bad)
cmps
cmp
xor
dec
xchg
(bad)
lds
mov
ror
mov
aas
xlat
xchg
push
push
sub
adc
out
sub
adc
sbb
add
inc
(bad)
adc
mov
imul
mov
xchg
cmps
pop
loop
mov
icebp
ror
pop
stos
cmc
popf
iret
xchg
xor
push
sbb
rcl
in
and
(bad)
xchg
stos
cmps
jmp
or
mov
xchg
jo
retf
(bad)
xchg
or
xchg
add
lock
movs
add
data16
pop
adc
xchg
pop
out
test
movs
repnz
mov
cmps
fbstp
ret
aaa
dec
xchg
retf
lock
ja
pop
repz
xchg
enter
cs
dec
mov
pop
adc
pop
iret
xchg
mov
std
mov
shl
or
inc
fs
inc
call
xchg
mov
add
arpl
in
loop
fcom
cmc
mov
mov
inc
dec
xchg
adc
lods
lock
retf
mov
js
or
nop
xchg
cld
or
adc
xchg
xchg
xor
fisttp
add
dec
xchg
popf
push
mov
nop
sbb
add
rcl
hlt
ins
add
movs
add
mov
nop
jge
xchg
dec
dec
int3
es
add
lock
dec
(bad)
nop
cmp
push
jae
dec
xor
and
rol
jo
jp
jo
add
xchg
ds
mov
stos
sti
mov
and
test
mov
jmp
jmp
dec
push
fcom
fmul
pop
sub
test
mov
ret
sub
xchg
hlt
loopne
inc
jnp
xchg
xor
fwait
xchg
and
dec
fmul
int3
sbb
adc
jb
daa
xchg
lahf
pusha
xor
rcr
pop
sbb
ja
adc
(bad)
mov
and
add
lods
pop
pop
sbb
outs
and
imul
cwde
sahf
cmp
stos
mov
xchg
std
fs
rcl
inc
pop
dec
add
movs
dec
xor
pop
dec
lods
mov
sbb
dec
inc
aam
(bad)
je
inc
in
sub
in
push
js
push
fwait
ror
sti
ror
fsub
add
pop
mov
rcl
xchg
xor
cdq
inc
mov
cld
loopne
mov
pop
repz
aam
popf
addr16
ficom
ds
retf
jbe
cmps
int3
scas
jmp
ins
(bad)
mov
mov
shl
pop
ret
cwde
jnp
xor
adc
mov
push
push
int3
popf
and
adc
sbb
push
jg
fst
int3
or
lahf
fcomp
popa
gs
outs
and
loopne
call
pop
das
hlt
cmp
adc
loope
fucomip
imul
je
and
jno
ds
pusha
cmps
push
jl
and
cmp
xchg
or
rcl
xchg
jmp
xchg
int3
inc
pop
mov
xchg
idiv
imul
sub
cs
call
fcmovbe
inc
mov
jecxz
mov
mov
leave
fistp
push
sti
jecxz
iret
aaa
mov
lods
popf
aam
loope
imul
xchg
xlat
je
cmp
or
dec
pop
dec
mov
xchg
cmps
mov
jl
in
pop
loope
sbb
aas
in
mov
dec
imul
repnz
out
and
bnd
jl
(bad)
aas
getsec
mov
adc
and
dec
cwde
enter
fist
cmp
pushf
cmp
mov
sub
fcomip
push
sub
jbe
mov
adc
xchg
pop
pop
jecxz
call
dec
arpl
ret
test
sub
(bad)
adc
scas
jl
mov
push
into
icebp
xor
adc
push
hlt
dec
sub
popf
repz
pop
lods
pop
add
and
xlat
fild
icebp
gs
shr
fs
push
xchg
push
xor
mov
mov
es
push
(bad)
mov
fiadd
int3
fwait
pushfw
sub
(bad)
jnp
aam
push
xchg
inc
xchg
hlt
ja
idiv
pop
outs
icebp
sti
xchg
sub
stos
or
push
pop
jo
aas
mov
xor
cmp
out
popf
xchg
(bad)
jmp
push
sub
movs
xor
jmp
sbb
push
or
xchg
pop
iret
addr16
sbb
mov
dec
dec
push
adc
in
imul
mov
adc
ss
test
in
outs
add
cld
jle
push
les
xchg
cmp
inc
xchg
cmps
das
sub
xchg
and
jbe
xchg
int3
adc
and
xchg
xchg
cwde
scas
jp
xchg
mov
mov
aam
push
sub
test
in
inc
es
xchg
cmp
add
xlat
xchg
(bad)
(bad)
aad
(bad)
(bad)
je
je
iret
fcom
in
and
pop
rcl
xchg
add
push
jg
in
pusha
cli
and
imul
mov
ror
pop
sub
jne
ret
xor
xchg
fwait
test
jno
popa
aas
xchg
pop
xchg
js
bnd
mov
stc
nop
push
lahf
scas
and
lock
jbe
jge
xor
cli
jecxz
aam
xor
out
or
lods
push
mov
dec
fs
pop
stos
xor
jge
imul
jg
imul
(bad)
cld
or
mul
push
push
jge
xor
js
cld
mov
xchg
jnp
adc
sti
adc
dec
jmp
sub
sbb
inc
pop
jge
hlt
and
test
sub
cwde
jmp
jbe
ds
add
dec
xchg
sub
dec
push
mov
in
adc
ds
add
sbb
xchg
je
cmp
xchg
sar
lea
cdq
mov
cmp
xchg
popf
fs
rcr
jge
or
mov
test
int
cmp
aam
xchg
jns
stos
out
iret
mov
xchg
push
fnstcw
pusha
retf
xor
or
mov
or
push
and
xchg
and
inc
out
jl
dec
xchg
call
fist
mov
fdiv
inc
or
mov
xor
scas
mov
sub
mov
cwde
adc
lods
jmp
aaa
dec
lahf
loope
push
pop
sub
ins
cmps
fcom
sbb
cmp
call
shr
xchg
or
mov
out
loopne
inc
xor
dec
aas
xchg
lods
push
nop
pop
int3
xor
adc
in
mov
mov
pusha
jp
adc
mov
or
popf
mov
test
mov
sbb
popf
(bad)
xchg
jns
mov
jp
daa
xchg
xchg
jno
sbb
jge
fwait
imul
or
cdq
lock
lock
pop
dec
xchg
xchg
sub
mov
leave
xchg
scas
inc
mov
xor
and
cmp
pop
dec
lods
and
xchg
call
mov
mov
hlt
add
leave
cwde
xchg
or
mov
jbe
retf
xchg
pusha
(bad)
enter
mov
inc
gs
ja
jb
fcmovbe
push
push
jl
push
mov
fadd
xchg
lods
iret
inc
mov
int3
nop
(bad)
daa
push
cmp
dec
mov
int3
iret
retf
jg
inc
into
inc
icebp
xchg
js
cld
cmp
cmp
xchg
mov
inc
es
sub
or
pop
xchg
cwde
mov
and
pop
mov
lods
icebp
xchg
mov
pop
outs
bound
xchg
adc
out
inc
mov
mov
(bad)
arpl
xchg
pop
test
das
sbb
or
cmps
mov
xchg
jno
mov
out
imul
mov
xor
outs
jb
jge
fcom
repnz
or
mov
jle
push
jmp
push
sar
sbb
push
call
or
cmp
scas
push
fstp
mov
js
aaa
cwde
jecxz
lahf
and
jl
push
xchg
inc
repnz
push
nop
push
xor
mov
jbe
int3
push
out
adc
jmp
mov
mov
jmp
sbb
fwait
sub
outs
ss
push
(bad)
test
cmp
fwait
cmps
inc
adc
in
inc
xor
adc
cwde
xor
fwait
repz
mov
repnz
scas
mov
jns
adc
scas
jo
sub
mov
pusha
adc
ja
call
mov
lock
fcomp
cld
xor
sbb
jmp
mov
adc
mov
daa
lahf
cmp
call
cmp
xrelease
mov
xor
stos
stc
xchg
or
mov
int3
xchg
adc
or
xchg
pop
enter
stos
push
std
into
jp
xchg
xchg
cli
sbb
and
cdq
push
or
xchg
mov
mov
neg
mov
sbb
adc
xchg
fwait
das
xor
dec
jo
jne
je
repnz
mov
mov
mov
or
and
mov
lahf
cdq
push
pop
or
mov
and
inc
fstp
in
sbb
push
mov
adc
pop
jecxz
adc
cmps
icebp
fcom
movs
fsub
pop
iret
jmp
add
jmp
add
xchg
fistp
sbb
jl
lods
pop
cmc
mov
xchg
jmp
in
push
mov
push
arpl
dec
ins
push
xchg
mov
stos
popf
xchg
inc
xchg
fs
and
fwait
hlt
leave
ror
sbb
pop
and
xlat
mov
cmp
adc
mov
fs
mov
adc
jmp
dec
cmp
pop
xchg
sbb
dec
and
imul
jo
adc
mov
fwait
sub
push
jbe
pop
scas
xchg
fs
leave
fbld
add
add
es
cmps
xchg
and
or
scas
jns
pop
fisubr
sub
push
pushf
stos
jnp
adc
adc
loop
jle
inc
arpl
cld
pop
mov
mov
push
cmps
hlt
nop
dec
sbb
push
xchg
loopne
push
push
shr
fwait
or
(bad)
je
or
movs
arpl
pop
xchg
push
mov
clc
xchg
push
push
sti
xchg
jmp
jmp
stc
push
fwait
add
xchg
mov
jmp
sub
or
inc
ror
je
out
in
lock
stos
jbe
xchg
push
mov
into
xchg
aaa
or
jns
scas
or
fwait
mov
les
call
push
add
xchg
add
and
(bad)
jnp
mov
les
xor
(bad)
xchg
cmp
aaa
clc
popf
xchg
cwde
bound
jns
push
dec
neg
pop
inc
std
inc
sub
lock
js
xchg
jno
push
dec
xor
mov
fldcw
or
stos
out
stc
push
aaa
call
xchg
sub
cmp
sub
and
pop
push
adc
repz
or
sub
sbb
int3
xlat
bound
(bad)
sbb
mov
in
push
mov
jecxz
ror
popf
cmp
adc
cmps
mov
pop
pop
or
or
mov
fsub
outs
mov
(bad)
(bad)
xchg
les
sar
cmp
xchg
or
add
lds
xchg
or
or
push
repnz
xchg
mov
rcl
lea
out
and
cld
cmps
mov
pop
lahf
xchg
inc
mov
xchg
xor
push
scas
je
xchg
jecxz
ins
fwait
ss
das
aad
sbb
jmp
sub
mov
sbb
xchg
cmps
ror
mov
cmp
fs
lock
push
sti
pop
arpl
dec
iret
test
mov
ja
mov
xchg
retf
enter
mov
jg
mov
cmp
mov
inc
jle
aam
jmp
inc
hlt
pop
jl
mov
rol
test
jge
jo
mov
xor
xchg
cmps
push
pop
imul
xor
in
jp
cmp
cmps
shr
in
lods
mov
add
sub
xchg
out
shr
shr
jb
xchg
add
leave
cmps
or
les
cmp
mov
rol
pop
outs
or
xchg
cmp
xor
(bad)
xchg
in
push
ds
das
sub
dec
call
xchg
jle
icebp
jmp
mov
sahf
jne
sub
xor
lea
adc
jg
xor
cwde
xchg
sbb
jp
pop
rcr
xchg
push
push
jg
out
dec
xor
cmc
in
and
adc
adc
inc
fist
dec
push
and
xlat
dec
adc
sbb
(bad)
loopne
sub
jmp
xchg
push
shl
xor
(bad)
pushf
mov
test
ins
mov
push
adc
xchg
pushf
push
xor
pop
mov
sar
outs
je
mov
or
mov
adc
sub
fmul
dec
sbb
xlat
pop
push
jg
adc
cwde
sbb
iret
lods
(bad)
adc
adc
xchg
daa
and
retf
popa
test
je
dec
and
rcl
out
xchg
jl
ins
pop
mov
repz
jmp
outs
xchg
inc
lods
loopne
repnz
ins
xchg
dec
imul
mov
sub
clc
mov
jmp
xchg
(bad)
cdq
jns
sbb
xchg
jmp
mov
scas
inc
xchg
xchg
mov
and
fucomi
mov
fcom
hlt
into
les
jb
arpl
sub
icebp
xor
mov
xchg
mov
outs
sub
mov
into
xchg
sahf
out
mov
mov
int
push
inc
lock
scas
sub
mov
xchg
rol
push
jns
push
adc
xchg
retf
test
mov
mov
rcl
or
xor
iret
jo
popa
jns
and
out
pop
cmc
push
sub
sahf
xor
es
int3
dec
cld
adc
mov
adc
jp
xchg
std
in
sub
aad
(bad)
mov
pusha
push
xchg
push
in
pop
in
fdiv
xchg
add
call
cmp
adc
adc
stos
xchg
pop
les
mov
je
sbb
cld
js
push
lds
and
mov
(bad)
or
mov
das
inc
pop
mov
dec
(bad)
rol
sar
dec
loopne
movs
xchg
pop
retf
pushf
lea
lahf
inc
mov
push
xchg
retf
idiv
ja
test
xchg
hlt
data16
lea
fstp
ret
lods
cmps
call
cmp
jl
xchg
test
pushf
inc
imul
(bad)
setne
sbb
xlat
or
test
push
xchg
mov
xchg
cdq
mov
fimul
push
cs
std
jmp
mov
xchg
cli
push
lea
pop
lock
cwde
pusha
cmp
out
pop
leave
or
call
rol
push
xchg
push
loop
sar
adc
push
iret
ret
ja
sbb
js
seta
(bad)
xchg
rcl
sub
jns
pusha
rol
mov
add
sbb
and
jae
xchg
cdq
pop
mov
xchg
cwde
aaa
xchg
and
sub
xchg
fwait
jb
push
dec
pusha
outs
xchg
add
xchg
test
pop
in
mov
in
es
xchg
pop
mov
sub
dec
inc
cdq
fadd
sahf
shl
cdq
in
jns
push
fist
jno
mov
mov
mov
arpl
push
in
inc
hlt
sub
fxch
inc
mov
pop
out
xchg
aad
xor
push
cdq
loopne
adc
push
pop
jne
mov
sub
adc
outs
push
xchg
push
jb
ficom
pop
addr16
pop
je
cmps
outs
inc
jp
pop
sub
aam
inc
test
test
and
adc
and
pop
jno
adc
je
into
imul
sbb
adc
dec
adc
or
adc
xchg
mov
shl
icebp
mov
xchg
fdivr
inc
pop
rcr
and
xchg
(bad)
mov
into
pop
xchg
das
cmps
cmp
test
imul
loop
xchg
push
pop
jmp
es
cmp
add
loope
jnp
cdq
jae
ret
mov
xchg
ror
pop
push
mov
adc
sbb
sub
stos
xchg
push
jns
jp
sub
sbb
js
sbb
push
pop
div
loop
and
shl
or
xor
xchg
inc
mov
xchg
cmp
adc
cmps
mov
out
xchg
fdivr
xor
dec
mov
sbb
in
dec
cs
pusha
repz
xchg
imul
sub
mov
sti
xchg
daa
addr16
std
inc
jno
pop
adc
movs
sar
or
dec
pop
push
gs
rcl
out
popf
xchg
dec
lods
jns
mov
pop
mov
sub
xchg
and
cdq
aam
popa
sbb
repz
mov
jno
scas
not
outs
mov
add
shr
in
inc
xchg
in
fst
sub
xchg
xchg
ja
aad
ds
inc
mov
lds
cmp
aad
jg
pop
mov
fcom
fst
jmp
lahf
bound
jmp
push
xchg
popf
jl
cmp
pop
ins
xchg
pop
mov
stos
aas
scas
mov
fstp
and
mov
xchg
xor
xchg
mov
loop
cmps
jmp
cli
icebp
xchg
fild
imul
mov
sti
fdivr
xchg
mov
jle
rol
loop
loopne
push
mov
sbb
iret
stc
add
aas
pop
cli
jno
std
dec
or
(bad)
out
mov
adc
jl
mov
loop
lahf
inc
push
adc
call
xchg
inc
cmps
fs
test
sub
mov
jbe
rcr
les
cmc
xor
mov
test
xchg
loopne
mov
int3
cdq
daa
mov
test
xchg
xchg
fistp
jo
xchg
mov
cdq
push
sahf
jle
dec
je
adc
aas
addr16
nop
es
arpl
or
cmp
out
mov
ror
add
je
cld
dec
dec
xchg
jg
jnp
push
mov
inc
leave
cmp
cmps
or
jecxz
outs
arpl
(bad)
jg
xchg
jmp
ret
(bad)
cmp
xchg
inc
adc
test
leave
mov
and
cmp
xchg
adc
into
pop
ins
add
bound
or
sub
stc
xchg
mov
push
push
cdq
popf
hlt
xchg
sahf
adc
sbb
and
xchg
out
xor
repnz
in
fs
div
sub
add
jg
mov
mov
dec
(bad)
lock
xchg
(bad)
mov
mov
clc
outs
js
int3
jb
jbe
xchg
shl
sub
jns
adc
aaa
pop
xor
test
data16
push
outs
jl
sar
xchg
jge
push
mov
cmp
aad
mov
cli
xchg
test
sbb
jno
not
push
mov
cld
or
(bad)
arpl
cmp
daa
rol
les
or
inc
loop
je
adc
fwait
push
aaa
ss
inc
jecxz
adc
clc
xchg
ja
cmc
lea
or
xor
mov
push
arpl
shr
pop
xor
out
rcr
cmp
push
jne
jne
gs
xchg
outs
and
pop
mov
mov
lods
and
jnp
popf
sbb
in
adc
add
(bad)
xchg
cmc
xchg
adc
pop
cmp
ja
iret
xor
or
xor
xchg
ret
xchg
(bad)
daa
inc
cdq
xchg
and
mov
(bad)
xchg
dec
int3
jp
and
scas
rol
jmp
mov
xchg
xor
cmp
jo
xchg
out
cli
and
into
mov
test
gs
xchg
add
sbb
dec
mov
dec
sub
lods
xchg
cmp
fcmovu
loop
push
in
loopne
pop
js
fwait
or
jg
xchg
add
ss
xor
cdq
outs
hlt
jl
sbb
adc
call
in
jno
xor
cmp
ret
mov
push
addr16
cdq
call
push
mov
xor
bound
pop
xchg
xchg
rcr
mov
xchg
adc
outs
dec
push
pop
xor
inc
sbb
jbe
xchg
cmps
or
sub
out
jecxz
xlat
mov
xchg
test
sub
xchg
cld
inc
cmps
dec
and
or
xchg
test
and
retf
xchg
cmp
jo
lahf
enter
xchg
adc
not
push
xchg
sbb
pop
adc
cmp
scas
dec
xchg
xor
pop
fcmove
std
loop
jl
mov
dec
adc
mov
mov
pop
div
sbb
in
repnz
mov
test
xchg
ja
dec
or
xlat
xchg
mov
xchg
jl
push
xchg
loope
xor
popa
mov
jnp
dec
xchg
xchg
inc
or
cdq
push
ds
popa
pusha
push
dec
adc
mov
mov
ins
mov
js
popf
jno
jne
xor
test
je
aas
jb
in
loopne
sub
xlat
jl
outs
sbb
jmp
inc
sub
cmp
mov
mov
dec
dec
xchg
scas
cmp
fcom
mov
je
push
jne
loop
xchg
outs
pop
leave
fisubr
mov
push
jl
fistp
enter
cs
fwait
jne
aam
mov
arpl
xchg
inc
int3
xchg
retf
(bad)
adc
fs
enter
pop
xchg
mov
xor
xor
xchg
imul
cld
jl
enter
test
test
or
adc
aaa
cmps
enter
popa
jp
pop
jbe
popf
push
jge
ret
mov
mov
scas
lea
call
inc
sbb
data16
mov
adc
hlt
ds
adc
pop
cmp
adc
ins
adc
cs
mov
sub
div
daa
xlat
sti
jmp
stos
cwde
into
repz
jge
adc
push
push
into
fisttp
xchg
lods
xor
sbb
shl
lahf
cmps
into
add
add
test
xor
nop
mov
gs
cdq
add
and
ins
xchg
xchg
fild
out
mov
jns
adc
test
jecxz
or
xchg
and
adc
call
xchg
xchg
shl
sbb
nop
push
into
xor
xchg
xchg
xchg
or
fisub
bound
pop
scas
jecxz
pop
(bad)
mov
jmp
sti
sbb
sub
test
xchg
xchg
cmp
ror
or
rsm
or
jg
adc
push
xchg
push
sub
xor
mov
push
xchg
cmp
fs
clc
or
js
xchg
loopne
pop
push
mov
add
fs
repnz
xor
loopne
or
test
jae
clc
push
mov
adc
inc
inc
sbb
repnz
mov
hlt
shr
leave
mov
sbb
dec
sub
mov
stos
adc
pusha
ss
dec
add
lods
mov
xchg
scas
out
push
pushf
cld
sub
mov
ret
or
call
stos
cmp
ins
sbb
(bad)
mov
xchg
fwait
cmp
jl
jl
popf
jge
adc
jge
ror
inc
es
xor
push
push
and
es
xor
pop
sub
(bad)
fcomp
fcmovb
push
mov
xchg
into
sub
jl
rcl
retf
into
xor
popa
inc
jmp
loop
out
jl
fcom
jnp
loop
adc
cmp
ds
jnp
cmp
pop
cld
test
pop
xor
xchg
loopne
dec
mov
push
lods
sub
xchg
jl
icebp
xchg
enter
pop
sbb
push
stos
je
arpl
and
les
jo
xor
out
cmp
int
cmps
xchg
jle
cld
cmp
sub
adc
scas
popa
xchg
inc
stos
inc
cmp
xchg
dec
test
dec
pop
enter
out
fnstsw
in
loope
mov
xchg
pop
shr
adc
je
and
fs
xchg
xor
retf
inc
push
xchg
xlat
pop
push
imul
jns
mov
scas
mov
xchg
xor
push
jecxz
aam
sbb
cmp
or
jl
sar
dec
sub
scas
xchg
icebp
jns
sub
sbb
stos
out
mov
nop
popa
push
push
or
and
cwde
xor
sar
xchg
xchg
rcr
mov
xchg
cs
jmp
aas
stos
xor
dec
mov
jno
sub
jle
xchg
test
(bad)
mov
xchg
jne
cmc
lahf
sbb
mov
add
mov
mov
pop
arpl
push
and
or
xchg
jo
inc
out
hlt
dec
int
xchg
sub
rol
jge
sub
mov
gs
or
mov
fdivr
pushf
nop
pop
mov
inc
(bad)
and
cdq
xchg
xor
mov
dec
xchg
retf
(bad)
cmp
push
cld
pop
aam
mov
mov
pop
push
ror
sbb
ins
mov
fimul
test
jge
mov
or
hlt
xor
or
mov
push
mov
xchg
fldenv
xor
dec
pop
mov
dec
mov
gs
inc
mov
mov
cld
enter
cdq
lods
xchg
retf
push
fcmove
or
cwde
aaa
pop
push
gs
fistp
push
mov
sbb
push
retf
adc
or
repz
mov
cmps
adc
push
cwde
bswap
jl
lahf
inc
mov
inc
adc
dec
inc
lods
fisttp
xchg
and
xchg
xchg
xchg
xor
xor
and
daa
sbb
and
imul
inc
aam
sbb
push
gs
push
fcom
and
add
xor
adc
and
push
stos
mov
pop
cli
add
popf
sub
sub
addr16
mov
mov
rcr
xchg
pusha
xor
jno
xchg
dec
je
sbb
xchg
pop
and
pusha
scas
clc
jl
lahf
ror
(bad)
shr
jmp
bound
xchg
xor
push
fstp
inc
jp
push
pop
sti
xor
xchg
dec
mov
inc
xchg
jle
mov
mov
mov
mov
mov
ret
inc
jle
or
adc
loop
inc
adc
test
jecxz
add
cmp
dec
test
cmps
and
lea
or
lods
repnz
adc
test
imul
adc
pop
aas
movs
(bad)
test
xchg
mov
inc
mov
push
pop
aad
popf
leave
popa
test
mov
mov
xor
cmp
mov
popf
xor
aam
push
pop
xchg
jl
jae
(bad)
add
xchg
fisub
mov
movs
dec
mov
cmps
push
mov
ret
test
clc
or
sub
mov
mov
push
xchg
and
and
loop
sbb
xchg
retf
add
pop
or
jg
gs
out
adc
jecxz
jmp
push
loopne
hlt
mov
cmps
fld
inc
call
push
sub
inc
ins
movs
xchg
jbe
cdq
fldenv
xor
jae
cmp
pop
inc
pusha
push
or
xchg
jmp
sbb
xchg
xchg
test
clc
mov
fwait
dec
cs
out
hlt
or
jmp
fst
fcomp
xchg
sbb
and
mov
sbb
jle
mov
mov
adc
hlt
out
dec
add
or
push
fbstp
mov
or
jns
xchg
cli
push
jbe
fs
push
imul
pop
jle
xchg
xchg
ror
push
pop
mov
bnd
mov
(bad)
pop
xchg
fdivr
xchg
sbb
pop
adc
dec
xor
pushf
xor
mov
sar
mov
push
test
mov
adc
push
jmp
add
sub
aas
fcomp
pop
pop
sti
jno
xchg
cmp
test
xchg
jmp
ret
or
sub
mov
test
imul
mov
ret
sub
push
mov
in
xchg
clc
repz
movs
bound
ret
scas
ja
cmp
test
xchg
pop
sbb
(bad)
and
xchg
outs
xchg
push
sti
adc
xchg
mov
sbb
mul
adc
idiv
xchg
pop
dec
ror
(bad)
xchg
mov
jmp
shl
mov
inc
push
xchg
mov
adc
(bad)
sub
cmp
idiv
mov
jo
sub
fwait
jns
ins
lock
je
mov
cdq
pop
stos
sub
xchg
fcom
xchg
cmp
call
pop
xchg
jge
push
enter
es
arpl
pop
sub
xchg
adc
sub
mov
sbb
cwde
mov
sbb
popa
jecxz
dec
call
adc
pop
lea
add
rcr
xchg
pop
xor
xchg
hlt
push
mov
rcl
jmp
iret
imul
je
dec
test
xchg
lods
rol
dec
inc
pop
cli
loopne
dec
mov
dec
repnz
add
out
ja
imul
xchg
adc
mov
inc
ret
stos
(bad)
fdivr
cmp
sbb
dec
inc
xchg
mov
loop
imul
mov
imul
in
mov
ja
xchg
cmps
dec
mov
arpl
push
fcom
and
cmp
call
cmp
adc
xchg
push
pusha
lds
mov
xchg
cmp
in
jge
sbb
push
add
mov
rcr
outs
imul
xchg
mov
and
cmp
jg
int3
lea
or
ins
xchg
ins
je
repnz
mov
mov
je
bound
xchg
rol
xlat
xchg
lock
inc
sub
xor
and
rcl
xor
mov
repnz
xor
ret
mov
icebp
xchg
jns
and
jnp
xchg
repz
shr
add
xor
jb
adc
cmp
xchg
mov
dec
push
adc
mov
mov
(bad)
cmps
or
outs
imul
xor
adc
cwde
push
nop
outs
push
xchg
pushf
inc
dec
mov
mov
popf
int
push
pop
movs
sbb
xchg
loop
mov
stos
test
mov
and
(bad)
pop
mov
or
cmp
or
dec
xor
sbb
aam
inc
pusha
add
test
(bad)
cmp
xchg
hlt
int3
je
loope
jb
cdq
jge
xchg
aas
mov
shl
in
adc
lods
pushf
push
mov
aad
and
(bad)
cld
sub
adc
loope
pop
and
fs
std
jno
out
cli
adc
xchg
sub
shr
mov
jp
shl
pop
mov
ficom
push
xor
add
nop
sub
aam
cld
mov
gs
fs
les
mov
xor
imul
push
ins
mov
fmul
cs
icebp
jp
xchg
push
lock
sbb
sub
push
inc
std
mov
mov
fbld
mov
sub
enter
mov
sub
xchg
fsub
fcmovb
mov
aam
mov
jecxz
sar
adc
push
sbb
xchg
lock
iret
repz
je
gs
xchg
xchg
mov
inc
push
fs
sub
xor
xchg
lods
icebp
cmps
sbb
and
jns
call
stos
adc
add
xor
xor
loope
test
pop
jae
mov
gs
sbb
int3
push
jbe
mov
jmp
inc
xchg
mov
test
ja
cmps
xlat
lock
push
mov
loop
xchg
add
stos
cmp
push
cmps
lods
sbb
out
or
in
xchg
push
mov
xchg
daa
xchg
ja
aam
enter
xchg
push
(bad)
repz
shl
push
mov
adc
mov
aad
mov
lea
xor
pop
or
xor
cmc
mov
test
aam
out
mov
ret
jmp
fbld
xchg
mov
inc
cmps
add
pop
xor
xor
lods
xchg
pop
push
idiv
(bad)
rcl
scas
sub
mov
int
(bad)
and
lods
mov
clc
adc
mov
jl
pop
mov
cmp
add
mov
les
clc
jae
cdq
adc
(bad)
sti
outs
iret
adc
inc
push
pop
nop
adc
iret
push
call
fucomip
ss
pop
in
mov
aad
popf
imul
xchg
stc
rcr
push
sbb
cmps
fisttp
or
xchg
rcl
sub
xchg
push
dec
loopne
je
pop
ret
ja
lods
push
fsub
dec
mov
hlt
cmp
fwait
mov
lock
cdq
int
nop
out
loope
out
jge
fist
pop
mov
out
push
cmp
or
out
mov
xor
stos
add
les
pusha
xor
movs
and
cmps
out
outs
mov
push
daa
xchg
add
pop
xchg
rol
(bad)
sub
enter
jl
xchg
cwde
jge
mov
cmp
sbb
shl
lea
pop
or
push
into
aaa
xchg
adc
mov
(bad)
cmp
mov
repnz
leave
je
inc
inc
mov
ror
fisub
mov
leave
daa
cmps
push
sbb
cdq
pop
arpl
pop
jmp
mov
push
mov
xchg
dec
mov
push
stc
ret
outs
rcl
pop
dec
shl
xchg
and
sbb
lods
aaa
jnp
in
push
jg
mov
(bad)
xchg
mov
fimul
fwait
xchg
fisttp
adc
scas
scas
dec
push
jno
pop
xchg
mov
out
or
push
or
movs
cdq
push
dec
mov
lods
mov
xor
mov
jbe
xchg
les
in
popf
push
repnz
mov
adc
jp
cmp
int3
mov
fwait
lea
inc
xor
mov
(bad)
pop
jmp
sub
shl
cmp
jno
xchg
aam
int3
or
pop
data16
xchg
mov
and
and
xor
cdq
adc
out
pop
iret
movs
jnp
or
add
jb
xchg
xchg
test
fsubr
into
or
movs
add
enter
ja
sbb
arpl
ret
sbb
ret
ret
or
xchg
mov
or
std
fs
xchg
sub
xchg
(bad)
nop
ret
add
mov
test
inc
test
mov
xchg
xchg
ins
imul
jge
xchg
xchg
mov
jno
ss
xchg
jne
daa
jmp
xlat
shr
inc
adc
sub
push
cmp
fbld
cdq
push
cwde
aaa
xor
jnp
je
stos
(bad)
aad
xchg
mov
mov
mov
mov
sub
mov
push
fwait
cdq
and
pop
stos
jmp
jg
cmp
dec
ret
call
ret
xor
jmp
inc
pop
xchg
les
jle
mov
adc
add
mov
mov
sub
adc
xchg
or
out
xor
xchg
or
sbb
cld
es
xchg
call
add
pushf
xchg
sbb
cmc
xlat
iret
inc
and
add
adc
mov
pusha
sbb
xchg
jmp
rcl
jbe
in
xchg
test
(bad)
cmps
outs
adc
add
aad
rol
in
sbb
sbb
inc
outs
scas
mov
call
enter
jg
sub
xchg
add
xchg
push
adc
mov
adc
adc
mov
mov
icebp
les
pop
imul
ret
mov
ins
(bad)
xor
jns
and
lds
cwde
icebp
js
(bad)
retf
(bad)
not
cli
movs
std
popf
sub
jmp
sbb
scas
mov
sub
or
and
(bad)
lods
xchg
jbe
into
add
pop
sete
scas
daa
stos
mov
sahf
sub
jecxz
movs
pop
(bad)
into
mov
xlat
popf
aam
inc
pushf
cmp
test
std
or
das
inc
xchg
icebp
fst
(bad)
popf
fwait
popa
cdq
fistp
xor
adc
fidivr
loop
std
push
movs
xchg
ins
and
in
sub
xor
fild
fld
jns
(bad)
sahf
lds
mov
lods
cmp
or
and
aaa
push
shl
pop
in
retf
das
ins
shr
ja
sti
and
push
repnz
xchg
xlat
push
push
adc
sar
jge
mov
xor
punpckldq
or
out
jecxz
mov
sbb
push
xchg
add
mov
xchg
xor
xchg
fidiv
ja
xchg
bound
pushf
and
sbb
xchg
loop
mov
push
mov
jne
jnp
cmp
xor
xchg
cmp
sub
sar
xchg
fist
pop
adc
not
ins
outs
lea
movs
inc
add
pop
movs
add
inc
rcl
push
adc
or
pop
and
je
mov
xchg
mov
add
(bad)
enter
adc
dec
push
xor
mov
inc
mov
xchg
sbb
mul
ins
jge
jae
fld
je
pop
adc
int3
pop
(bad)
fdivrp
and
(bad)
sub
cmp
ficomp
pusha
push
mov
jge
push
lea
mov
sbb
lods
mov
adc
in
pop
(bad)
and
dec
inc
retf
inc
mov
or
cmovno
pextrw
mov
xor
retf
xchg
popa
sbb
sbb
sub
xchg
outs
cmp
mov
dec
imul
rol
sbb
pop
push
xchg
mov
ins
icebp
retf
push
mov
fnsave
cwde
(bad)
and
imul
mov
loope
loopne
ins
and
add
mov
mov
xor
lock
ficom
aaa
popa
movs
shr
xchg
lea
(bad)
pusha
outs
add
fbld
imul
cmp
movs
pop
jecxz
adc
fcom
push
sar
pusha
sub
cdq
gs
mov
push
jbe
into
xor
int3
dec
cdq
ins
sahf
xchg
sbb
sub
xchg
out
dec
stos
adc
mov
lods
adc
push
sar
fs
xchg
pushf
adc
xchg
scas
dec
mov
mov
mov
inc
cmp
add
popa
adc
scas
scas
neg
mov
or
ror
mov
dec
add
cmp
(bad)
loopne
sub
(bad)
and
sbb
arpl
xchg
cwde
mov
cld
movs
cmp
and
cdq
repnz
push
call
lods
jno
or
mov
aaa
cwde
mov
push
(bad)
xchg
mov
push
out
aaa
aad
and
js
and
pop
mov
jmp
rcl
in
inc
inc
add
mov
pushf
jl
mov
repnz
push
loope
lods
fnstsw
dec
loop
xchg
gs
cmp
xchg
mov
mov
cli
clc
mov
icebp
aad
mov
mov
lods
int3
fst
lea
pop
jno
sahf
cmp
xchg
mov
inc
(bad)
xor
pop
mov
call
dec
je
imul
jmp
dec
push
ret
pop
mov
ins
xchg
mov
into
stos
mov
retf
shl
and
xchg
leave
and
jne
test
popf
gs
lods
rcr
cli
(bad)
mov
xchg
cwde
sbb
sbb
sub
add
out
xchg
or
xor
or
ja
jmp
(bad)
jl
xchg
push
dec
ficomp
fwait
jp
jle
fs
jge
mov
ins
mov
in
pop
xchg
xor
push
adc
and
dec
loop
cmps
sub
call
in
popf
bound
ja
rcr
mov
push
stc
jnp
sbb
mov
dec
mov
sti
stos
je
xchg
stc
jmp
dec
and
add
xor
sub
mov
hlt
dec
xchg
ins
jo
movs
fldenv
xchg
sti
jp
arpl
xchg
pop
xor
adc
shl
sub
inc
popf
mov
fst
lock
xchg
push
xchg
enter
int
mov
push
cmc
xchg
dec
cmp
shl
add
ins
cmc
out
leave
jo
lods
xchg
sbb
xlat
push
xchg
push
dec
mov
leave
or
loop
fwait
or
fs
xchg
rcl
movs
retf
mov
xchg
outs
les
xchg
in
sbb
xchg
and
xchg
lock
mov
(bad)
push
pusha
out
sbb
xchg
push
and
mov
or
xchg
fmul
in
sbb
push
test
mov
cmps
mov
adc
and
mov
cmp
call
xchg
cmp
xlat
dec
das
xchg
and
pop
inc
add
pop
hlt
fwait
hlt
sbb
psubsb
cmp
dec
ror
sbb
inc
test
sub
jmp
iret
adc
jbe
test
fdiv
xor
dec
jge
mov
jb
mov
(bad)
ja
mov
pop
cdq
jge
push
jg
jge
inc
add
inc
pusha
add
mov
xor
xchg
popf
xlat
mov
adc
les
jecxz
dec
and
pop
shl
dec
pop
mov
xchg
jp
adc
xchg
ds
xor
cwde
adc
pop
sbb
pop
xchg
into
lods
push
push
push
out
xchg
and
sahf
pop
into
dec
mov
adc
js
push
clc
push
jmp
lea
push
xchg
iret
mov
adc
enter
mov
dec
adc
and
sbb
xchg
mov
push
cmp
call
cmps
adc
fidiv
mov
mov
inc
and
xchg
or
jg
enter
cmps
inc
dec
push
popf
les
sbb
xchg
fisttp
inc
xchg
ret
shl
xor
rol
push
xchg
gs
xchg
in
idiv
dec
fwait
adc
out
js
xchg
dec
dec
adc
add
loope
lods
xchg
lea
jae
sub
mov
test
cmp
stos
inc
lods
mov
call
cmp
cwde
or
xchg
les
ret
jae
pop
mov
neg
adc
das
dec
call
jb
add
in
iret
xchg
adc
js
sbb
push
mov
cli
xchg
and
in
mov
push
test
sar
jecxz
jns
and
jb
xchg
jge
pop
jle
cmp
rcr
mov
aam
mul
out
or
pop
xlat
stos
mov
xchg
stc
mov
sub
fisttp
cld
mov
xchg
ret
or
xchg
push
push
and
aad
add
out
or
xchg
mov
xchg
fcom
push
xlat
in
xchg
mov
inc
jns
scas
inc
xchg
cwde
cmp
jbe
fadd
sbb
pop
xchg
sub
imul
mov
cdq
ds
test
mov
push
xchg
dec
cmp
xor
xchg
jo
inc
popf
sti
mov
pop
cmp
push
cld
jp
mov
mov
mov
mov
xchg
sub
cmp
xchg
(bad)
loop
imul
push
scas
pop
add
mov
das
xchg
aam
sbb
mov
xor
imul
je
daa
add
jecxz
dec
nop
aam
pop
mov
xchg
push
cmp
cdq
hlt
loopne
add
fcom
xor
jo
fwait
adc
or
xchg
sbb
bound
inc
sub
movs
pop
mov
xchg
jl
dec
xchg
push
mov
jne
test
fxch
push
repz
cmp
xchg
out
iret
pop
imul
pushf
test
mov
and
fwait
data16
out
lds
movs
jl
xor
mov
icebp
push
jne
cmp
push
in
sub
xchg
push
mov
jbe
ficomp
push
std
cmc
shl
fwait
fwait
adc
xlat
je
add
xchg
adc
push
cmc
pop
xor
hlt
or
and
fwait
test
stos
cwde
mov
push
fwait
mov
hlt
cmovl
mov
lods
movs
push
cmp
xchg
(bad)
cmc
dec
mov
bswap
ins
lods
pop
or
mov
xchg
xor
aas
in
or
fwait
and
aaa
cld
out
pop
xchg
and
add
aam
ret
mov
lahf
dec
dec
or
xchg
sub
push
ins
jno
mov
or
loop
popa
push
mov
movs
pop
push
shl
pop
stc
or
inc
(bad)
cmc
mov
xor
ret
pop
sub
xchg
jae
aad
mov
stos
dec
test
xchg
stc
xchg
out
inc
jp
xchg
enter
cmps
xchg
mov
movs
push
pop
xchg
cmp
inc
dec
cwde
iret
stos
sbb
push
sbb
add
xchg
sbb
push
cmps
hlt
movs
addr16
mov
rol
stc
adc
inc
add
out
xchg
ret
and
inc
dec
jo
outs
test
lock
movs
jb
dec
inc
sbb
test
sbb
call
jg
push
out
and
and
xchg
out
ins
jbe
(bad)
add
ret
mov
in
fwait
test
stos
and
mov
mov
cmps
mov
jno
sbb
imul
retf
mov
xchg
ret
in
pop
and
cli
sbb
cwde
sub
mov
inc
test
jp
xchg
ja
and
cmp
sbb
inc
rcr
mov
outs
jo
cmp
mov
cmps
mov
in
sub
test
int3
mov
out
je
mov
push
and
imul
cli
pop
xchg
jo
and
lea
adc
into
mov
adc
jmp
cld
xchg
cmp
mov
lahf
dec
movs
xchg
xor
pop
cmps
in
xchg
mov
jae
inc
adc
xchg
aad
and
mov
call
inc
fdivrp
aam
call
in
adc
hlt
inc
loop
adc
xchg
sub
push
shr
fbstp
mov
aaa
pop
adc
xor
pop
push
imul
mov
outs
in
call
xchg
retf
hlt
mov
sub
iret
mov
bnd
xchg
mov
retf
les
hlt
mov
xchg
pusha
imul
xchg
jge
cmps
lds
fdivr
(bad)
les
jne
sbb
push
js
fcomi
int3
jo
adc
je
push
push
ret
jg
jmp
pop
push
test
xor
add
pop
xchg
lds
jnp
ja
jg
xchg
mov
scas
not
(bad)
mov
das
sbb
jl
fiadd
(bad)
and
sub
pop
xchg
pop
mov
pushf
xchg
test
(bad)
push
jbe
xchg
xchg
push
sub
pop
(bad)
mov
(bad)
mov
sub
fisttp
jae
cwde
(bad)
jnp
mov
into
cmps
popf
pop
retf
inc
aad
into
mov
(bad)
out
pushf
push
mov
jge
mov
mov
pop
dec
jb
mov
add
xchg
mov
inc
xchg
mov
cmp
adc
pop
cmp
jmp
or
hlt
std
mov
sbb
cmc
inc
jnp
loope
hlt
and
xor
mov
inc
jge
pop
fsub
mov
xchg
jmp
mov
fwait
cmp
adc
dec
(bad)
test
pop
imul
xchg
push
push
hlt
inc
fcmovb
pop
xchg
jle
jecxz
jnp
in
rol
mov
aam
mov
test
loopne
adc
add
xchg
rcr
dec
sahf
mov
add
mov
and
sub
aam
xchg
ss
fsubr
in
popf
jle
xchg
cmp
fwait
cwde
cmp
xor
and
dec
sahf
je
loop
xchg
clc
adc
mov
outs
cmp
and
adc
xchg
mov
mov
adc
mov
cmp
mov
imul
cld
sub
pop
imul
cmp
mov
sbb
sbb
ret
xor
jg
inc
adc
not
jne
pop
jecxz
cmp
movs
jne
jmp
mov
push
jl
xchg
xor
inc
hlt
xor
push
aas
test
xchg
xchg
test
mov
jns
or
pop
fs
adc
jl
push
cmps
inc
jg
pop
xchg
retf
sub
pop
sub
lea
aas
mov
mov
fst
es
imul
aaa
xor
push
adc
movs
mov
pop
mov
movs
aam
stos
mov
jmp
mov
xor
or
pushf
mov
mov
cld
mov
pop
addr16
inc
inc
cmp
shl
xor
mov
cmps
mov
(bad)
dec
and
das
popa
test
outs
mov
mov
cmp
pop
jge
push
pusha
or
cmps
jb
lock
sqrtps
fst
lahf
outs
dec
lods
call
xchg
mov
cs
pop
mov
xchg
mov
fsub
aas
xor
in
retf
cmp
and
mov
adc
or
fcomp
xchg
(bad)
fidivr
int3
mov
ret
cmps
ror
js
fsub
xchg
mov
adc
test
add
outs
push
imul
in
cld
ins
jp
ficomp
(bad)
xchg
in
adc
push
dec
fild
sbb
inc
xchg
jb
xchg
adc
xchg
clc
adc
into
push
xchg
xor
pop
push
ss
xchg
mov
mov
jns
bound
mov
addr16
mov
jo
inc
pop
or
ss
not
push
dec
aas
aaa
xchg
es
sbb
add
xchg
sar
xchg
ss
jle
call
sbb
sbb
or
test
es
and
pop
test
add
pusha
pusha
leave
xchg
xchg
add
lods
outs
fsubr
dec
jg
jle
sub
mov
mov
adc
or
mov
xchg
mov
xchg
hlt
loope
adc
xchg
int3
and
test
shl
repnz
xor
ret
ror
sar
aaa
sahf
xchg
mov
out
add
vmwrite
jmp
xchg
push
push
cmp
mov
clc
imul
mov
enter
pop
xchg
sub
fcomp
mov
inc
ret
adc
pop
inc
mov
je
outs
test
(bad)
jbe
xchg
add
adc
push
mov
xor
dec
jecxz
push
les
mov
enter
gs
lock
inc
xchg
and
or
cmp
xor
add
pop
mov
into
sub
mov
rol
and
xlat
js
add
das
pop
jne
mov
sub
cld
xchg
inc
aas
dec
jae
push
push
add
push
gs
adc
xchg
stc
setp
loopne
xchg
xchg
fsub
cmp
std
(bad)
call
bound
cmp
sbb
in
mov
mov
lea
mov
mov
mov
les
jne
in
push
shl
std
fwait
adc
lods
out
movs
cli
add
xchg
daa
retf
les
pop
sub
and
cdq
sub
add
inc
xchg
fs
jl
addr16
xchg
push
add
test
and
fwait
push
xor
jo
xchg
bound
pop
xchg
into
and
or
cmp
icebp
xchg
mov
adc
sbb
(bad)
push
es
xchg
cmp
xchg
sub
ret
sbb
and
fwait
push
xor
jno
push
xchg
cmps
int3
and
call
unpcklps
cli
idiv
dec
aas
push
cmps
mov
xchg
xchg
inc
xor
loopne
paddq
(bad)
xchg
clc
push
ret
push
cmc
cli
and
das
xchg
push
int3
pop
or
inc
xchg
dec
xchg
mov
out
jge
movs
mov
mov
and
mov
inc
mov
cmp
xchg
mov
mov
loopne
and
or
ret
ja
push
iret
mov
sub
xchg
sub
adc
sub
jae
xor
dec
xchg
clc
or
push
xchg
movs
stos
leave
pop
(bad)
ins
xchg
cmp
xchg
mov
mov
popf
add
mov
outs
xchg
pop
js
xchg
aaa
fisttp
fiadd
loopne
in
xchg
jle
inc
xor
inc
jg
xchg
loop
mov
push
sub
push
xchg
xchg
lahf
jmp
cdq
inc
outs
mov
(bad)
mov
aam
das
jp
test
cmp
push
xchg
ss
lods
es
add
xchg
clc
or
lds
sub
add
lock
daa
push
pop
call
mov
cli
and
add
test
mov
(bad)
inc
adc
xchg
sbb
sub
xchg
loopne
(bad)
jmp
ret
mov
je
add
js
xchg
iret
test
inc
xchg
rcr
mov
cdq
int3
mov
je
jmp
bound
xchg
ret
scas
mov
mov
cmp
jge
mov
les
fiadd
addr16
repnz
xchg
call
ins
xchg
rcr
cmp
xchg
and
and
xchg
outs
xchg
xchg
sahf
loope
lds
call
adc
jo
push
xchg
and
xlat
lock
xchg
xor
das
dec
es
xchg
ret
imul
leave
inc
inc
adc
jg
mov
or
xor
cs
dec
sbb
pop
js
xchg
and
int
pop
mov
aam
fadd
xchg
gs
ret
jg
xchg
xchg
pop
pop
loope
sub
sbb
dec
test
mov
cmps
retf
jne
test
lods
loop
dec
pop
adc
xchg
cld
fild
sbb
cmp
lahf
push
nop
inc
push
mov
into
jmp
rcr
push
call
(bad)
js
jl
icebp
(bad)
pop
into
inc
xchg
nop
inc
cmps
mov
sbb
sar
dec
fidivr
mov
xlat
sub
cmp
mov
inc
fs
sub
push
fs
fdivp
lods
and
jl
inc
jns
sub
adc
(bad)
aad
ins
sbb
or
call
inc
inc
or
rcl
push
pushf
pop
retf
aad
jno
dec
push
les
push
sbb
aaa
pusha
jmp
pop
jge
xor
and
out
mov
lock
dec
ja
lods
loope
loop
jl
sub
xor
pop
in
ds
mov
ss
xor
in
ss
mov
bound
cld
push
rcl
adc
pop
repnz
pushf
addr16
aas
nop
cmp
cmp
mov
aaa
push
das
xchg
cwde
out
bound
and
xor
popf
jl
cwde
xchg
lahf
int3
icebp
fimul
mov
into
xchg
push
xchg
sub
jge
daa
push
cmp
mov
adc
jg
push
rcr
pop
mov
mov
into
ret
or
jl
in
sub
sub
fstp
mov
cld
jmp
dec
dec
push
test
or
js
pushf
es
pop
pop
shr
jmp
add
loopne
clc
cmc
stos
add
(bad)
and
loope
jle
xchg
in
cmp
mov
outs
pop
(bad)
sti
cmp
sub
push
cli
adc
fmul
push
cmps
adc
dec
rcl
fwait
push
in
sbb
lds
xor
mov
jno
pop
xor
lods
xchg
cmp
inc
jns
sub
fbld
ins
(bad)
das
fwait
pushf
sbb
or
add
dec
xchg
lods
test
ss
cmps
mov
lods
sbb
or
dec
adc
pop
xchg
in
sbb
dec
xchg
cmps
test
and
stos
retf
test
dec
les
push
jge
mov
jmp
scas
out
pop
xchg
xlat
ffreep
test
ins
ss
cmp
(bad)
push
and
mov
xchg
jmp
daa
in
xchg
inc
jae
inc
(bad)
retf
dec
mov
clc
(bad)
xor
xchg
sbb
out
js
cdq
sub
std
inc
push
xor
push
pop
xchg
sub
(bad)
jmp
mov
das
push
lock
jns
mov
loop
adc
push
adc
jo
xchg
xor
add
jecxz
ins
xchg
adc
and
aas
add
dec
not
fnstsw
xchg
xlat
test
mov
ja
xor
xrelease
adc
cmp
xchg
ds
xchg
fwait
add
add
xchg
jmp
jmp
pop
mov
mov
push
nop
jge
pop
push
add
adc
adc
sbb
dec
cld
pop
punpcklwd
mov
les
pop
sub
test
add
inc
fwait
cdq
cmps
mov
mov
pop
ret
sub
cmp
imul
(bad)
sbb
aad
arpl
xchg
mov
mov
xchg
inc
xlat
iret
inc
xchg
int
(bad)
je
xor
mov
mov
jecxz
sbb
mov
jb
(bad)
xchg
xchg
sub
pop
xchg
jo
and
fsub
daa
fwait
sti
xlat
xchg
into
pop
cmp
shr
dec
fwait
sbb
xchg
mov
mov
mov
in
cs
test
xor
lds
cmc
fisttp
xchg
imul
xchg
inc
ror
xchg
jp
dec
add
xlat
xchg
popf
repz
cmp
xor
(bad)
and
fcom
inc
iret
xchg
js
(bad)
call
in
xchg
jo
repnz
cmps
aas
ret
add
mov
xor
mov
fs
ror
loope
cs
mov
and
jl
mov
cmps
sbb
(bad)
clc
div
sar
rcr
push
dec
sbb
fst
shr
xchg
inc
dec
int
adc
inc
mov
mov
jecxz
jbe
xchg
cdq
cwde
ss
sbb
xchg
mov
sti
je
out
adc
xchg
fwait
std
mov
push
daa
popf
dec
xchg
jbe
ja
adc
add
xchg
(bad)
(bad)
repz
in
into
xor
lds
fwait
call
xor
ins
dec
mov
jns
adc
repz
movs
inc
test
(bad)
lods
xchg
ja
cli
sub
push
loop
in
das
aam
sbb
ror
dec
and
div
icebp
push
popf
or
pop
aaa
mov
call
shl
fist
in
(bad)
jmp
inc
adc
fwait
inc
into
lahf
test
ficomp
push
adc
aad
lds
pop
pop
repz
xchg
sub
or
xor
enter
mov
cmp
in
or
pop
scas
jb
add
sub
sbb
sti
(bad)
xor
pop
addr16
mov
sub
add
ins
shl
pop
inc
xchg
out
inc
mov
push
adc
mov
xlat
fadd
xor
xchg
ret
hlt
jp
mov
dec
and
add
dec
sub
xchg
fs
mov
xor
loope
or
adc
test
sahf
int
xchg
retf
dec
mov
adc
in
cwde
nop
fdiv
push
sub
pushf
push
xchg
pop
xchg
jge
jbe
inc
scas
xchg
cmps
xchg
and
clc
xchg
jle
pop
lahf
cs
sbb
cmps
ins
aaa
sub
jle
test
loop
mov
jbe
ror
xor
cmp
cmc
lods
mov
icebp
xchg
aam
inc
cwde
pusha
shl
cmp
stos
xchg
xchg
imul
cmp
rcr
xchg
inc
cs
out
call
push
sub
movs
xchg
es
push
cmps
xchg
fsub
xchg
mov
xor
fcom
out
or
jl
mov
imul
xor
mov
cmp
dec
mov
mov
retf
aas
cmps
je
mov
jmp
adc
les
and
jmp
pusha
in
xchg
aad
push
sub
mov
pop
xchg
jo
cwde
push
push
or
das
shl
aam
(bad)
nop
xchg
enter
jecxz
dec
push
aam
or
(bad)
dec
daa
pop
mov
xor
js
or
ficom
lock
hlt
mov
aaa
sbb
add
lock
pop
mov
jmp
push
pop
je
push
add
(bad)
xlat
xchg
aam
push
mov
jle
mov
mov
and
jp
in
leave
ds
pop
js
stos
inc
xor
in
int
iret
sbb
mov
lea
je
rcr
ret
sti
jb
jnp
ja
mov
loopne
not
imul
pop
xchg
push
hlt
ins
pop
ret
mov
aam
cmp
dec
pop
adc
lock
and
mov
or
test
jge
dec
rcl
int
mov
mov
jmp
xchg
outs
cmc
and
lahf
xchg
xchg
sahf
repz
lods
lods
fsubr
mov
or
dec
rcr
hlt
cli
push
test
mov
xchg
pop
push
cmc
movs
(bad)
lock
sti
jge
push
cmp
lahf
int3
aad
or
sar
bound
cli
ret
call
jl
jp
mov
out
adc
sbb
sbb
je
in
sub
lods
loope
out
loope
repz
mov
jp
sahf
jg
scas
xor
outs
mov
or
stc
cld
pop
jae
cmps
sub
mov
ins
pop
ins
out
mov
popa
cld
call
fsub
adc
push
cmc
push
inc
sbb
cmps
cmp
call
jl
or
imul
popa
fs
cld
sbb
sub
sub
adc
xchg
mov
ins
adc
xchg
or
data16
xchg
dec
out
repz
pusha
ja
inc
push
cmp
movs
cdq
pop
or
inc
push
xchg
dec
push
jbe
ja
jnp
xchg
mov
or
lahf
xchg
cld
not
hlt
mov
xor
xsha256
cmps
xchg
jl
xor
fstp
pop
hlt
bound
popf
int
cwde
fist
jl
jmp
cwde
xlat
mov
cmp
or
dec
push
xchg
mov
sbb
pop
mov
sub
xchg
push
mov
push
xchg
das
bound
push
outs
clc
add
add
jnp
stos
xchg
mov
frstor
xchg
fidivr
movs
call
xchg
ja
ret
aas
je
push
adc
xchg
std
call
adc
pop
xchg
push
stos
mov
(bad)
xchg
int3
(bad)
or
rol
stc
inc
les
mov
rcl
push
ret
in
xchg
stos
inc
(bad)
not
push
push
lahf
xchg
mov
pop
rcr
adc
ja
leave
jge
jmp
sub
sbb
and
push
sbb
daa
je
enter
dec
test
xchg
cwde
fiadd
and
jno
push
fwait
add
je
lds
(bad)
cmps
mov
mov
je
popa
fwait
cdq
std
out
ja
adc
dec
mov
stc
xchg
in
dec
pusha
sub
retf
movs
dec
ret
gs
xchg
mov
push
out
xchg
shl
xor
retf
retf
fwait
jb
icebp
add
dec
daa
adc
jne
xchg
fbstp
mov
mov
mov
stc
xchg
fsubr
int3
inc
push
jo
xchg
xor
push
(bad)
fisub
adc
into
xchg
fbld
lea
adc
pop
ror
pop
and
or
xchg
in
mov
rcl
call
mov
xchg
adc
fld
stos
aas
jp
xchg
adc
clc
into
(bad)
(bad)
mov
(bad)
jmp
inc
loope
ja
xchg
adc
dec
cmc
xchg
xchg
fnstcw
jmp
rcr
in
inc
shr
scas
mov
pop
xlat
cmps
fbld
fimul
dec
imul
lods
mov
out
and
ror
fdivr
push
or
(bad)
pop
and
pop
int3
or
test
cmps
jl
ja
cmp
sub
xor
fbstp
add
aad
mov
daa
scas
pop
mov
sahf
xchg
cmp
push
and
mov
push
call
and
mov
cmp
jl
inc
cdq
xchg
adc
pop
push
inc
adc
pop
fs
inc
shl
inc
xchg
imul
fwait
xor
dec
dec
fwait
test
dec
in
shr
ret
dec
xchg
jp
fnstenv
xchg
jbe
sub
xchg
mov
ret
shl
sub
call
dec
cmp
cld
(bad)
mov
push
ds
loopne
mov
sbb
mov
lds
inc
leave
and
sub
aad
loope
jb
cs
retf
xchg
fstp
rol
not
aam
loope
mov
add
(bad)
out
jo
dec
sbb
push
add
pop
sub
popf
jecxz
ret
fwait
adc
xor
mov
pop
pushf
lods
leave
mov
aas
test
xchg
pop
fwait
(bad)
and
mov
xchg
fs
and
jo
sub
xchg
rcr
xchg
sub
inc
hlt
movs
sbb
shl
mov
shl
adc
inc
mov
mov
test
xchg
push
ins
xor
repz
jae
inc
stos
out
cmp
jne
nop
push
into
push
jo
je
lds
jp
stos
mov
shl
enter
leave
pop
jmp
pop
mov
cmp
aam
mov
push
xchg
hlt
cld
xchg
xchg
adc
jg
cmp
push
sub
xchg
dec
mov
mov
pushf
sub
mov
xchg
xchg
repz
leave
mov
mov
mov
push
imul
outs
pop
sub
xchg
test
les
fucomip
xchg
push
jle
dec
mov
or
sbb
jb
mov
add
jecxz
push
xchg
outs
jmp
int
xchg
mov
popf
mov
movs
cmps
xchg
push
mov
xchg
adc
out
movs
push
push
or
retf
dec
mov
pop
inc
push
push
pop
hlt
jg
push
mov
xchg
push
scas
jl
and
leave
inc
xlat
xchg
(bad)
repnz
xor
loop
outs
mov
xchg
sbb
push
aam
pop
ret
mov
dec
mov
dec
daa
ror
xchg
in
adc
neg
jmp
pushf
xchg
mov
pop
imul
pop
fist
mov
inc
or
in
in
xchg
sti
xlat
and
dec
xchg
bswap
dec
dec
xchg
addr16
mov
fs
add
dec
das
fwait
jmp
pop
xlat
xchg
jl
aaa
lahf
xchg
jge
or
shl
push
scas
(bad)
cmc
sub
push
dec
fwait
mov
test
xor
nop
xchg
or
or
xchg
ror
lods
loope
fwait
je
mov
call
jge
in
in
cmps
jl
xchg
push
xor
test
push
xchg
cli
adc
outs
hlt
fimul
in
and
cld
mov
stc
push
sub
es
in
mov
test
and
jl
pop
push
outs
inc
mov
jge
inc
nop
arpl
loopne
pop
or
stc
pop
inc
adc
(bad)
pop
loopne
cwde
or
mov
inc
lods
xchg
aam
int3
sbb
daa
in
xchg
mov
into
test
xchg
addr16
cs
inc
jl
stc
adc
lahf
xchg
mov
test
jo
fld
mov
and
mov
pusha
mov
sbb
data16
fs
retf
xchg
cmp
ins
mov
dec
in
inc
in
das
and
jg
jp
fmul
clc
or
lea
out
fiadd
mov
stos
sub
mov
cdq
pop
aas
or
call
sbb
push
push
inc
lods
arpl
iret
adc
push
int
add
stos
jmp
xor
xchg
popf
push
sar
mov
and
cmps
xchg
push
push
in
sbb
xchg
mov
imul
sbb
xchg
xchg
data16
xor
outs
mov
retf
xchg
add
ss
je
out
cmps
je
dec
xchg
aas
int3
mov
xchg
mov
push
cmp
or
mov
pop
pop
mov
sbb
div
xchg
jl
xor
push
cmps
lock
adc
je
cmp
jp
push
mov
fcomp
or
mov
pop
retf
xchg
xchg
adc
xchg
ss
mov
and
push
mov
add
mov
push
xor
(bad)
mov
mov
push
aad
in
addr16
retf
jl
es
xchg
mov
xor
pop
dec
int3
jge
test
into
sbb
hlt
rol
push
into
shl
pop
inc
push
lock
icebp
xor
(bad)
clc
dec
push
xchg
arpl
data16
test
stos
loope
inc
mov
sub
cdq
cld
dec
mov
inc
push
loope
cwde
jmp
icebp
fwait
ret
adc
in
pop
aad
lods
cdq
jl
call
popa
and
cld
popf
retf
add
ins
dec
data16
add
adc
mov
dec
icebp
cld
fistp
inc
or
jecxz
aam
cli
pop
test
sub
adc
push
inc
stos
mov
xchg
stc
mov
adc
cmc
jo
popa
xchg
add
push
push
mov
push
and
dec
out
shl
adc
into
and
repz
dec
mov
arpl
mov
fwait
scas
add
cmps
adc
data16
popf
bound
out
or
cmp
cmp
jno
mul
xchg
mov
jl
ss
out
(bad)
mov
add
inc
add
pop
fst
popa
inc
pop
pop
stc
ret
fist
ficom
retf
stos
(bad)
xchg
adc
jb
sub
xchg
fidiv
cwde
jle
lds
sub
std
sub
das
pop
iret
xor
jle
push
addr16
aam
mov
cmps
fbld
loope
dec
jns
push
push
cmps
pop
mov
ds
cdq
ror
jmp
shr
push
mov
rcr
dec
adc
ins
sbb
dec
outs
and
fst
pop
adc
daa
dec
xor
or
jmp
sub
and
xchg
push
das
(bad)
into
rcr
xchg
addr16
je
fld
push
clc
inc
and
jb
sbb
cmc
ins
pop
test
fst
shl
inc
xchg
inc
test
add
xchg
or
jae
aaa
mov
adc
xchg
add
jns
ins
dec
ins
mov
xchg
out
xlat
loop
retf
cmps
fwait
sbb
bound
pop
lods
pop
or
pop
loope
xchg
adc
sbb
xchg
sahf
mov
pushf
xor
inc
call
dec
stos
pop
inc
jno
jecxz
xchg
retf
and
cs
call
adc
cwde
daa
outs
xchg
rol
cdq
dec
loop
sub
mov
scas
rcl
xchg
push
pop
je
mov
xchg
mov
cli
xchg
jmp
xchg
pop
xchg
not
and
fwait
cmp
idiv
ficomp
repnz
iret
xchg
jmp
inc
shl
mov
mov
mov
shl
cwde
sbb
cs
adc
sub
jnp
and
outs
pop
jle
jne
pop
push
inc
sbb
push
push
fs
inc
xchg
movhps
das
inc
ret
mov
jg
pushf
stos
test
mov
adc
enter
sub
daa
fstp
or
sbb
ins
ret
pop
jecxz
cmc
imul
or
mov
mov
jp
xchg
(bad)
sbb
and
ds
dec
and
xlat
pop
adc
inc
sub
shl
mov
cld
xor
shl
inc
jge
mov
sbb
adc
xor
xchg
xchg
imul
xor
mov
or
jnp
(bad)
stos
jle
data16
sbb
stc
cmps
dec
xor
push
lods
sbb
test
ret
hlt
xor
adc
loopne
xchg
ss
and
je
add
cmp
xchg
(bad)
fsubrp
aam
test
add
movs
(bad)
push
jle
cdq
jp
jns
mov
sahf
sbb
icebp
stos
or
ins
(bad)
popf
xchg
push
adc
mov
dec
adc
and
xor
add
push
aad
test
push
stos
push
icebp
cmps
call
fidivr
inc
xor
xchg
dec
xchg
shr
adc
aaa
xchg
stos
cmp
or
sti
cmps
inc
aam
sbb
and
fild
stos
pusha
stos
xchg
jmp
jnp
out
adc
mov
xor
pop
mov
stos
xchg
cmp
or
push
in
ret
xlat
xchg
pop
outs
clc
jmp
or
adc
mov
mov
je
pop
retf
sbb
mov
dec
xchg
xchg
das
in
or
xchg
push
inc
mov
add
movs
cwde
push
mov
xchg
aas
push
cmp
mov
mov
dec
in
jnp
mov
mov
clc
mov
je
fsubr
adc
icebp
sbb
mov
xchg
or
sar
in
mov
pop
pop
xor
push
push
mov
dec
xchg
test
xor
xchg
cmp
out
in
xchg
aad
scas
jnp
or
xchg
push
loopne
es
cmp
sub
aas
xchg
xchg
push
xchg
mov
pop
iret
inc
xchg
(bad)
add
out
xor
popa
stc
xchg
les
or
mov
das
popf
lods
cmp
jns
adc
xchg
adc
mov
out
ja
adc
call
dec
rol
mov
cmc
enter
xchg
mov
loop
mov
and
into
inc
inc
pop
xchg
xor
push
pop
repz
mov
jmp
mov
ins
add
lods
sub
jne
cmp
xor
or
pop
xlat
fnsave
xor
push
sbb
sbb
xchg
int
pop
push
sbb
xchg
sub
stos
adc
aam
fst
xchg
in
mov
(bad)
addr16
jnp
imul
adc
cld
adc
sub
cli
imul
lahf
out
jnp
jmp
cs
or
xchg
pop
or
xor
inc
lods
adc
sub
inc
jo
push
mov
mov
fldenv
je
loope
xor
jp
rol
mov
xchg
sub
or
es
add
mov
cmps
mov
pop
sub
sub
mov
jno
sbb
jbe
jne
loop
bound
scas
out
mov
outs
scas
adc
push
gs
add
xchg
jo
mov
mov
cmp
adc
test
xchg
jge
mov
adc
jmp
or
cmps
adc
pop
(bad)
out
xchg
test
pop
loope
mov
mov
xchg
mov
pop
adc
movs
out
inc
add
test
or
cwde
ret
sbb
push
pop
xchg
cwde
lock
xchg
out
aam
icebp
popf
(bad)
pop
test
inc
xchg
mov
les
nop
xchg
xchg
je
bound
add
xor
cmps
pop
sbb
inc
sub
cmp
ds
and
ins
out
jl
mov
push
imul
jmp
mov
jl
push
sub
xor
scas
movs
mov
rcr
jo
xchg
and
ins
movs
hlt
sub
inc
xchg
nop
sbb
mov
mov
call
jl
or
das
dec
dec
mov
jge
sub
in
aam
jmp
dec
mov
jmp
in
test
ror
xchg
and
dec
mov
das
pop
jl
push
dec
mov
and
fidiv
shl
sbb
out
jns
or
es
enter
jmp
sub
fs
int
adc
mov
lock
sub
jo
es
add
xchg
iret
xchg
movs
mov
and
(bad)
fdivrp
mov
jle
jb
sbb
mov
and
mov
xchg
adc
repz
mov
adc
jl
sbb
mov
loop
imul
cmp
fisubr
push
mov
idiv
call
retf
xchg
test
cli
and
mov
or
xchg
mov
loopne
add
and
mov
ins
dec
xor
pop
xchg
add
inc
sub
or
into
shr
mov
data16
aam
sbb
(bad)
ins
cmp
iret
push
rol
push
lahf
xchg
mov
leave
outs
xchg
add
and
xchg
aam
mov
jmp
adc
clc
in
xchg
jmp
cmps
ds
push
cli
push
into
add
or
loop
repnz
cmp
xchg
ja
in
or
sbb
jle
test
cs
adc
mov
adc
shl
popf
int3
pushf
inc
jg
cwde
es
adc
cmp
xchg
imul
mov
aas
xor
xchg
ins
(bad)
ins
push
in
jo
xchg
inc
sti
cmp
(bad)
hlt
xchg
shr
sbb
cmp
cdq
in
xchg
cmp
sti
add
out
test
retf
inc
in
inc
xchg
xchg
inc
add
adc
call
retf
lods
adc
dec
push
test
sbb
jg
int3
nop
mov
lds
sub
xchg
mov
xor
add
and
xchg
fist
lea
ss
out
pushf
dec
adc
adc
(bad)
add
xchg
or
in
ds
sub
sar
cmp
call
or
xchg
popf
xchg
dec
ins
xor
fst
test
imul
int3
add
pop
xchg
and
or
or
inc
xor
loop
frstor
idiv
test
inc
pop
movs
cmp
xchg
lea
push
es
stc
mov
icebp
das
mov
not
xchg
jmp
mov
cmp
sbb
dec
mov
jae
fidiv
stos
inc
inc
test
scas
xchg
pop
xchg
xchg
sbb
dec
xchg
popf
pop
jae
lahf
lock
rcl
fdiv
jbe
pop
ficom
pop
xchg
dec
mov
mov
mov
out
push
cmp
adc
pop
retf
fcmovnb
enter
jl
add
push
shr
adc
jbe
mov
dec
mov
jp
(bad)
fsubp
mov
mov
mov
xchg
push
xchg
xor
sti
ror
call
jge
inc
icebp
xchg
repz
xor
jbe
fldcw
inc
dec
xchg
mov
adc
jecxz
lock
xchg
xor
das
data16
cmps
pop
loope
xor
out
out
cmps
xlat
cmp
jl
sub
push
jb
mov
mov
idiv
jl
sbb
scas
stos
jge
stos
xchg
cmp
push
mov
jl
addr16
ss
hlt
xchg
bsf
int3
(bad)
sbb
push
pop
call
stos
add
pop
dec
fs
stos
jle
lods
fwait
inc
lahf
(bad)
mov
or
fadd
aam
xor
fadd
js
dec
in
pop
ss
sub
xchg
inc
sbb
cmps
pusha
cmp
mov
(bad)
inc
jl
xchg
xchg
cmps
aad
jp
arpl
fwait
xchg
jle
cmp
(bad)
xchg
pop
mov
fst
xchg
add
and
xor
retf
xchg
mov
add
int3
xchg
pop
add
ins
mov
adc
addr16
test
loop
(bad)
out
loope
je
sbb
sahf
mov
imul
dec
rcl
inc
fisub
bound
adc
or
frstpm(287
cmc
jae
or
add
push
mov
pop
lods
or
ja
call
fwait
aad
adc
pop
movzx
rcr
xchg
test
adc
sbb
icebp
push
ins
imul
cli
call
push
in
stos
mov
adc
das
mov
shr
popf
cmp
mov
ds
aaa
mov
lahf
int3
es
pop
jmp
sbb
fiadd
pop
minps
pop
push
mov
xchg
add
ret
aaa
nop
jb
test
jmp
xchg
pop
leave
lahf
fisttp
xchg
jmp
mov
sbb
in
(bad)
lea
test
push
shl
xchg
jae
xor
andnps
ret
jecxz
in
sub
std
xchg
outs
cwde
xchg
xor
push
cld
aas
xchg
test
addr16
and
mov
xchg
xor
push
dec
sti
xor
scas
ja
mov
xchg
cld
dec
mov
pop
push
jle
in
push
mov
lahf
push
dec
mov
(bad)
or
mov
hlt
scas
dec
inc
add
mov
scas
jmp
xchg
test
mov
adc
add
xor
inc
scas
push
cwde
inc
mov
or
add
xchg
cmps
adc
xchg
xchg
xor
loopne
inc
mov
js
mov
xchg
movs
cld
leave
add
test
jnp
stos
out
fld
sub
call
dec
or
rcl
test
mov
rcl
aam
sub
(bad)
popf
lods
jge
jo
push
test
mov
aam
push
pop
xchg
mov
xchg
jge
adc
inc
inc
je
xchg
mov
mov
hlt
pushf
jl
sub
adc
or
jns
ins
sub
lahf
mov
es
mov
xchg
push
mov
sbb
or
aam
inc
shl
int3
lea
xchg
adc
mov
adc
inc
or
cmp
add
xor
push
stos
cmp
jge
(bad)
enter
push
test
popa
inc
xchg
cld
ret
mov
fdiv
add
mov
cmp
lahf
sub
cwde
xchg
je
jge
(bad)
push
lock
movs
mov
bound
ss
sbb
fistp
in
mov
mov
mov
xor
or
dec
pop
jge
jnp
sbb
shr
sub
aad
xchg
dec
in
lahf
push
pop
clc
jbe
pop
xchg
push
pop
out
xor
(bad)
ror
popf
jl
or
pop
sti
movs
sbb
cld
lods
jge
lahf
mov
(bad)
jmp
popa
push
(bad)
div
sub
repnz
fcom
imul
imul
mov
dec
mov
cmps
xchg
sbb
fwait
jmp
dec
cmp
xchg
inc
in
(bad)
mov
xor
pop
push
and
mov
pusha
out
jl
in
mov
lea
loop
xor
pop
inc
jl
hlt
inc
ret
loop
nop
out
dec
lea
inc
jns
jl
cmps
push
jmp
into
popf
fdivr
dec
in
sbb
movs
push
push
fmulp
xlat
(bad)
cld
test
fs
pop
cwde
push
mov
mov
arpl
test
ret
inc
cdq
add
mov
jmp
pop
jmp
retf
pop
pushf
fistp
in
or
cmp
idiv
ins
addr16
cmp
daa
cmc
push
lea
mov
inc
mov
(bad)
scas
sub
stos
mov
lock
cmp
cld
in
xchg
es
sbb
idiv
or
push
lods
xor
xchg
jge
into
push
xchg
ss
jmp
shr
daa
ins
int
loop
and
ret
ds
pop
not
lahf
movs
pop
in
jl
test
(bad)
jl
and
sub
sbb
repnz
sub
dec
rep
add
sti
jge
sbb
and
sub
pushf
aam
fdivr
repnz
test
sub
xchg
push
jmp
mov
dec
ja
in
sbb
test
shl
jge
xchg
and
int
mov
pop
xchg
ins
push
sub
and
cmp
aam
cld
or
push
stc
aas
mov
cmps
loopne
dec
push
int3
sahf
push
add
nop
mov
cmps
sub
gs
and
ds
push
hlt
mov
clc
imul
mov
rol
xchg
pop
sbb
fdivr
and
cdq
dec
jmp
mov
sahf
fwait
aad
mov
pop
shl
or
retf
sub
xchg
xor
push
xchg
sbb
ja
test
pop
loop
and
xchg
cmps
xchg
jae
adc
(bad)
je
push
xchg
mov
test
or
mov
jbe
xlat
gs
ror
es
xchg
sbb
mov
pop
xchg
lock
pop
fwait
xor
xchg
push
shl
sub
xchg
shr
inc
sbb
les
ror
loopne
dec
int3
or
adc
dec
sub
mov
xchg
push
pop
adc
xchg
and
or
mov
and
push
mov
fld
sbb
sub
sub
movs
jbe
mov
scas
xchg
jmp
test
push
popa
hlt
xor
xchg
cwde
mov
mov
xchg
cmp
push
adc
add
add
out
xchg
sub
lock
icebp
xchg
push
xchg
emms
sub
je
mov
cmps
ss
fisttp
add
adc
cmp
jnp
and
les
in
or
xchg
out
in
cld
push
mov
(bad)
mov
push
ja
xchg
(bad)
js
psubw
sub
xchg
aaa
mov
xor
lods
test
fwait
add
je
ret
and
xchg
dec
xor
popf
adc
fwait
(bad)
lds
push
aas
xchg
xchg
mov
adc
xchg
ret
out
aam
es
dec
xchg
lock
(bad)
mov
push
or
int
adc
aad
ss
int3
xchg
aam
xor
outs
xor
cmp
movs
fwait
popf
loope
push
pop
cmps
push
je
fisttp
test
out
xchg
pop
scas
je
xchg
jnp
lock
push
add
cmp
add
in
in
ror
test
scas
enter
cmp
mov
fadd
adc
dec
popa
push
out
mov
repz
sub
xchg
aas
mov
data16
adc
mov
xor
cdq
aad
stc
xchg
ins
ret
or
daa
mov
sahf
arpl
sbb
push
xchg
mov
repz
adc
fidivr
add
ss
xor
mov
push
mov
rcl
sub
push
in
push
ror
mov
mov
in
adc
jge
cmps
or
out
ins
sbb
jmp
mov
bound
push
or
in
jg
gs
inc
xchg
aad
xchg
das
and
int
cmps
cwde
jmp
xor
and
in
xchg
push
lahf
cwde
sbb
add
outs
cmp
ret
jg
idiv
lock
sbb
mov
xchg
push
stos
das
jae
dec
call
push
idiv
xchg
jmp
js
push
xchg
mov
icebp
xchg
(bad)
aam
mov
push
hlt
xchg
je
rcl
rcl
sbb
mov
inc
cmp
int
sbb
test
inc
push
out
push
lea
(bad)
add
loope
xchg
jle
xchg
xchg
xor
pop
test
mov
idiv
inc
pop
das
xchg
pop
sbb
shl
scas
add
ds
lock
xor
adc
(bad)
in
push
shl
sbb
xchg
dec
mov
ss
mov
adc
push
mov
xor
xchg
in
in
pop
jl
into
(bad)
xchg
xlat
std
and
retf
jmp
call
xor
and
xchg
pusha
cmps
inc
(bad)
sbb
cmc
fwait
xchg
pop
lock
xchg
xchg
ins
adc
sbb
stos
push
shl
loopne
cmp
popf
jmp
stc
and
jge
xchg
frstor
in
push
loop
cmps
out
xlat
add
or
lods
je
adc
pop
in
ficomp
adc
xlat
pop
xor
mov
xchg
cmp
push
cdq
loope
inc
test
mov
sbb
mov
ror
xchg
stc
cld
(bad)
adc
in
jae
mov
or
ficom
or
in
push
xchg
ins
es
sahf
fidivr
mov
xor
(bad)
pop
leave
std
lods
fst
pop
inc
arpl
cmp
mov
mov
push
add
cmps
sbb
imul
mov
(bad)
not
adc
iret
dec
ins
add
adc
mov
popa
mov
gs
add
lods
std
not
pusha
cs
xchg
add
and
xor
call
sbb
loope
bound
add
call
mov
xchg
xchg
rcr
les
mul
(bad)
out
aam
mov
adc
inc
test
xchg
test
lea
push
dec
in
(bad)
or
push
mov
dec
push
ret
test
ds
fimul
sub
hlt
in
or
xchg
das
sar
xchg
xchg
aaa
stos
inc
xchg
(bad)
jl
push
xchg
(bad)
sub
or
cmp
xchg
scas
xor
cmp
push
cmp
lods
xchg
sbb
push
scas
aam
stos
pop
in
cmp
xchg
xor
out
jne
mov
in
and
xchg
ret
xchg
aas
inc
iret
adc
inc
xchg
lods
in
ins
fcos
movs
mov
and
sahf
dec
fistp
push
fwait
xor
cwde
sub
mov
cs
call
(bad)
(bad)
or
mov
in
sbb
pop
mov
jnp
xor
stos
add
imul
(bad)
shl
push
adc
ret
inc
xchg
(bad)
in
xchg
sub
nop
adc
adc
dec
stos
lds
mov
add
jbe
xchg
pop
fisttp
sbb
aaa
test
pop
inc
inc
xchg
in
or
dec
imul
adc
repnz
mov
sar
test
pop
jmp
fwait
push
sub
pop
xor
adc
and
dec
mov
xchg
push
cli
push
mov
xchg
fs
fs
fs
jg
or
scas
dec
into
mov
adc
dec
out
add
xchg
push
mov
cmp
xchg
clc
jp
xchg
addr16
icebp
xchg
sub
ds
imul
push
mov
add
sbb
les
fwait
cs
fisubr
(bad)
xchg
cmp
les
arpl
sbb
int3
cmp
aam
pop
add
xchg
push
cwde
xor
jg
adc
add
dec
cmp
sbb
cmp
hlt
push
sub
iret
push
xchg
repnz
xchg
sub
xchg
and
pop
popa
push
xchg
sub
fwait
or
mov
in
test
pop
movs
jnp
in
leave
pop
nop
pop
adc
dec
cmps
cwde
jge
push
ds
mov
pop
mov
lea
adc
jmp
sub
test
dec
cmps
inc
(bad)
popa
loope
jmp
cld
or
xchg
call
jl
push
shr
mov
hlt
inc
test
ins
mov
in
mov
rep
mov
push
lods
mov
aam
icebp
sahf
bound
xchg
repz
dec
stos
adc
inc
out
sub
xor
(bad)
sub
out
dec
mov
mov
aam
test
mov
out
les
xchg
call
jl
xchg
setg
adc
dec
movs
jl
aam
xor
jge
sub
mov
lds
fmul
add
dec
or
xchg
rcl
cmps
jmp
add
sbb
and
mov
mov
int
sbb
sbb
xchg
pop
js
xor
pop
pushf
sbb
fcmovu
movs
add
lods
hlt
or
pop
cmp
loopne
repnz
cmps
adc
out
xchg
push
xchg
sbb
test
bswap
rcr
aas
inc
mov
iret
mov
loop
sbb
inc
int
xlat
loopne
push
push
movs
cmp
or
enter
xchg
sbb
sbb
pushf
push
and
mov
xchg
jg
fld
cmp
xor
mov
ins
cmc
dec
ss
loop
adc
jb
int
outs
push
or
jae
movs
movs
xchg
inc
fist
nop
fcmove
adc
sti
inc
xchg
cmps
iret
jmp
hlt
xchg
popf
cmc
arpl
sahf
xor
push
inc
test
shl
cdq
mov
cmp
dec
xor
sar
sbb
pop
shl
xchg
add
imul
mov
pop
inc
adc
mov
daa
or
inc
xchg
sub
ins
mov
jns
mov
xchg
push
data16
cmps
loopne
aam
ficom
emms
push
dec
aas
dec
xchg
dec
icebp
jae
jg
adc
mov
in
test
cmps
lods
lahf
cs
ins
out
inc
xchg
jmp
out
jns
ror
add
repnz
cli
xchg
sub
jmp
xlat
mov
iret
je
(bad)
xchg
mov
add
pop
pushf
ins
xchg
out
add
hlt
inc
outs
xlat
mov
xchg
xchg
(bad)
gs
test
not
call
inc
adc
mov
lea
aaa
outs
mov
xchg
sbb
mov
nop
fwait
mov
out
mov
cmp
pop
scas
xchg
repz
int3
cmps
call
dec
ret
fstp
mov
pop
fcom
xor
sbb
adc
adc
or
mov
mov
je
push
cmp
xchg
clc
rcr
add
dec
and
and
lock
adc
cmc
fimul
inc
loopne
js
imul
inc
loop
add
pop
xchg
fsub
xor
ins
xchg
enter
jp
lea
mov
pop
scas
fbld
cld
or
iret
push
jo
xor
inc
popa
lahf
ss
xchg
mov
cmp
mov
xchg
mov
test
mov
push
mov
mov
sbb
dec
or
lahf
sub
jge
ins
rol
pop
shl
adc
fwait
jecxz
addr16
loopne
cmp
sbb
sbb
out
fisub
jge
in
xor
stos
sub
xchg
test
iret
and
xchg
lea
push
mov
(bad)
movs
shr
mov
mov
movs
jle
movs
iret
adc
call
ret
adc
ror
add
push
je
pop
xchg
out
mov
call
jb
int
xor
pop
and
les
adc
cdq
mov
cmc
mov
(bad)
adc
in
sub
fwait
sub
mov
xchg
push
mov
xor
sub
and
push
aam
cmp
add
sar
or
cmps
and
cmp
cld
popf
sbb
int3
pop
xchg
mov
cs
jmp
in
icebp
hlt
popf
jge
or
(bad)
aam
mov
repnz
mov
sbb
mov
sub
push
or
and
das
test
icebp
(bad)
mov
pop
and
xor
out
shl
or
lods
pop
xor
add
lods
xchg
aad
in
mov
test
sub
(bad)
movs
mov
jbe
(bad)
cld
jle
inc
out
mov
jne
add
and
sub
call
push
and
pop
dec
inc
lds
inc
xchg
inc
xor
add
call
ret
das
mov
cmp
adc
xchg
inc
mov
pop
ret
cmp
sub
add
mov
mov
hlt
out
xchg
xchg
aaa
cs
adc
hlt
pushf
push
xchg
dec
retf
xor
push
imul
xlat
jl
sbb
cdq
leave
dec
into
out
push
cmp
ret
adc
push
pop
xchg
xchg
popf
mov
jne
xchg
sar
dec
xchg
sub
xchg
sub
push
pusha
jmp
add
xor
not
ins
jns
in
hlt
or
dec
stos
movnti
xchg
test
movs
iret
lea
aam
loopne
cmps
push
ins
xchg
push
cld
push
and
xchg
adc
pop
ror
xor
sub
jbe
pushf
sahf
mov
adc
pop
fs
sub
not
pop
lds
bnd
or
xor
xchg
fstp
xchg
sbb
xlat
mov
test
shl
rcr
test
xchg
lahf
call
mov
inc
rcl
adc
ds
scas
imul
mov
sub
adc
add
mov
cwde
jge
add
rol
mov
je
xchg
push
pushf
jbe
fild
jmp
cdq
imul
fnstcw
sahf
push
imul
sar
mov
mov
xchg
pop
cmp
dec
into
xor
xchg
jle
imul
xchg
xchg
fst
enter
mov
and
test
movs
sbb
xor
jmp
fsubr
js
lahf
pop
cmp
or
push
out
add
xchg
cmp
lods
in
hlt
cld
rol
inc
mov
mov
shl
jmp
fwait
movs
jl
sub
adc
stos
test
push
xchg
repnz
mov
shl
ret
inc
add
fwait
pop
pop
int3
inc
enter
repnz
popf
test
or
jge
mov
imul
into
xchg
lods
popa
and
std
dec
test
xchg
cld
loop
cmps
out
cli
jb
pop
hlt
jl
jo
pop
in
xchg
cmc
jmp
arpl
and
xchg
pop
jae
ss
fist
inc
ins
not
jae
sbb
xchg
mov
sub
sub
xchg
sub
stos
jae
int
mov
(bad)
jmp
(bad)
xchg
add
sbb
mov
xor
and
sar
push
mov
aad
(bad)
mov
mov
retf
data16
mov
xchg
push
outs
xor
imul
mov
or
sbb
into
push
add
jbe
rol
jno
std
push
mov
aad
mov
aam
(bad)
fiadd
push
mov
idiv
mov
mov
call
mov
out
cwde
xchg
xlat
aaa
mov
inc
mov
mov
xor
call
call
retf
xchg
aas
pop
push
jge
in
add
fdiv
xchg
push
ss
jle
sbb
xchg
dec
inc
mov
test
xor
push
xchg
pop
pop
add
(bad)
xchg
mov
push
enter
rol
add
xchg
sub
fdiv
icebp
dec
mov
pop
or
sub
stos
mov
ret
ds
sahf
xor
xchg
jmp
mov
out
add
fnstenv
aam
push
xchg
ficom
iret
dec
cli
fisttp
mov
dec
lahf
or
add
jnp
fs
xchg
xchg
std
popf
and
jb
adc
jo
xchg
sub
aas
cmp
shl
je
add
xchg
adc
or
rcl
xchg
cli
xlat
add
icebp
xchg
enter
jmp
ficom
sbb
push
shl
stos
seta
in
and
nop
je
shl
dec
loope
cmps
cld
dec
sbb
cmp
inc
jbe
fwait
mov
out
xchg
cdq
rcr
dec
ins
xchg
outs
dec
xor
nop
je
out
push
xlat
mov
test
mov
mov
retf
dec
pop
sti
adc
and
mov
clc
cli
stos
sbb
and
pop
mov
sbb
pop
inc
add
loop
xchg
xor
jge
ins
xchg
sub
test
sub
rol
sti
xchg
pop
sti
push
iret
icebp
xchg
mov
fdivr
adc
hlt
mov
sbb
push
dec
mov
xor
pop
repnz
scas
in
jl
std
adc
sar
dec
xchg
inc
cmp
or
loop
xchg
xchg
std
jne
sub
sub
pop
dec
cwde
paddq
fwait
pop
push
jno
lods
ja
pop
and
adc
ds
xor
sub
push
nop
jmp
xchg
dec
add
outs
fcom
mov
pop
mov
add
int3
dec
mov
mov
std
adc
aas
iret
add
shl
aad
cmps
jmp
dec
sbb
(bad)
mov
and
jecxz
cmps
scas
and
xchg
xchg
sub
xor
mov
add
xchg
out
mov
les
sub
xor
mov
test
aam
and
dec
add
mov
or
mov
outs
scas
add
and
mov
lods
and
xchg
dec
xor
cmp
les
add
push
das
les
or
push
xchg
push
rol
push
dec
int
std
adc
adc
test
ror
mov
and
iret
call
xchg
gs
cmc
jne
cmps
xchg
test
xchg
add
add
mov
mov
je
aad
(bad)
jmp
jle
stc
push
adc
pop
dec
xchg
mov
sub
push
je
xchg
mov
mov
iret
xchg
xchg
je
mov
xchg
(bad)
mov
sub
dec
push
add
jp
test
inc
push
sbb
fcom
mov
cli
xchg
cmp
nop
jl
sbb
jmp
int
out
call
and
pop
pop
mov
mov
cmps
test
jno
add
mov
or
out
ss
inc
(bad)
jbe
xchg
pushf
adc
adc
loop
repnz
jmp
lahf
cmps
fwait
jl
enter
in
and
jg
into
adc
xchg
inc
or
or
jle
push
popa
cmp
aas
push
cmp
out
jno
test
pop
int3
gs
retf
add
jbe
ret
test
jge
test
jmp
nop
fisubr
mov
iret
femms
dec
xor
inc
movs
out
jl
fist
jge
mov
push
cmps
jnp
add
cmp
mov
sbb
jp
jge
and
xchg
inc
push
mov
cli
and
xchg
jno
dec
test
mov
out
cmps
dec
fs
pop
mov
sub
mov
test
fldcw
(bad)
push
and
inc
je
xchg
fwait
stc
xor
fbld
and
xchg
pop
leave
dec
scas
mov
jg
sahf
or
inc
mov
xchg
aas
mov
jno
cdq
or
mov
push
(bad)
int3
in
daa
ret
or
push
ja
xchg
fdiv
sub
adc
mov
mov
ficom
repnz
fist
mov
push
fcom
fs
sar
adc
xchg
not
push
lods
and
push
mov
retf
xchg
mov
xchg
outs
push
fsub
dec
repz
xchg
adc
stos
loopne
cmp
imul
inc
out
in
lock
push
mov
sub
push
add
push
xchg
push
lea
fs
adc
fwait
out
xchg
jmp
and
mov
and
call
xchg
xor
add
xchg
dec
scas
pop
mov
rcr
retf
repnz
sbb
push
fadd
bound
daa
shr
xchg
or
xchg
(bad)
jnp
gs
jmp
movs
popf
(bad)
hlt
in
lock
xor
xchg
jg
fmul
cmc
mov
push
pop
jle
test
jl
into
sub
push
xchg
and
shl
push
shr
push
push
push
xchg
ror
mov
jge
movs
mov
out
mov
pop
cld
and
push
xor
sub
dec
cmps
sub
hlt
test
push
jno
loopne
adc
mov
or
add
aam
mov
in
inc
dec
jp
mov
call
fwait
lods
jo
leave
sub
pop
fmul
xchg
add
stos
and
xor
outs
iret
mov
aas
add
sar
ret
add
sbb
cwde
mov
mov
adc
pop
dec
add
sahf
out
lods
in
les
pop
push
jp
dec
inc
jae
mov
sbb
cmps
mov
or
(bad)
popf
in
jl
cmp
dec
retf
or
mov
add
push
cmp
cmps
outs
aas
mov
push
fs
hlt
dec
add
repz
in
(bad)
xchg
enter
fnstenv
xchg
dec
push
sub
clc
mov
adc
dec
js
jne
add
cmp
and
fiadd
scas
out
sub
mov
aaa
ja
jo
mov
push
sbb
or
imul
es
aas
sbb
js
add
pop
mov
adc
ret
cmp
jmp
leave
xchg
pop
fisttp
cmp
dec
mov
xlat
rcr
push
or
jb
iret
cli
lahf
dec
mov
xchg
dec
mov
xchg
xchg
sbb
ins
shl
mov
cmp
pop
pop
xor
xchg
int
pop
pushf
sbb
rcl
test
(bad)
das
sbb
cmps
cmp
xchg
hlt
jb
inc
ficom
imul
loope
fnstsw
xchg
mov
data16
xchg
add
and
xchg
(bad)
dec
fisubr
(bad)
xchg
mov
cwde
push
cmp
int
dec
adc
xchg
(bad)
fdivr
not
shl
xchg
sbb
push
rol
add
fbstp
(bad)
mov
push
pop
cwde
and
stos
loopne
jge
fwait
sub
xchg
lds
jecxz
xchg
xchg
or
in
push
mov
or
clc
popf
xchg
jbe
bound
xor
add
and
xchg
jg
dec
rol
or
xchg
xchg
pop
inc
and
or
or
xchg
movs
adc
adc
cmp
sar
or
mov
sub
jnp
jmp
lods
shl
mov
fwait
push
pop
adc
sbb
mov
scas
int
dec
pop
push
mov
pushf
xchg
sbb
ret
add
cmps
pop
xor
xchg
add
sahf
pop
xchg
cmp
cmc
rcl
inc
jp
hlt
aaa
inc
sub
pop
popa
test
push
in
xchg
add
push
mov
mov
mov
xchg
jo
std
mov
mov
rcr
fcom
inc
js
fwait
test
push
fs
sbb
mov
xchg
push
std
fdiv
(bad)
xchg
(bad)
xchg
ins
leave
pop
(bad)
push
aas
ins
fsubr
aam
jge
sbb
nop
adc
jl
adc
push
adc
sbb
adc
rcr
hlt
(bad)
addr16
mov
pop
ds
inc
or
xchg
pushf
jl
lods
sbb
sub
mov
push
push
dec
fucomp
mov
loope
inc
ds
pop
scas
js
sub
call
adc
jo
sbb
pushf
xor
daa
mov
cmps
mov
out
int
cmp
jp
cmps
call
push
loope
inc
leave
iret
pop
(bad)
loope
(bad)
push
inc
inc
call
jmp
ret
ja
hlt
sub
mov
inc
mov
movs
fbld
adc
cld
adc
(bad)
imul
mov
jp
aad
mov
jb
(bad)
cli
jne
mov
adc
push
add
jl
fs
mov
scas
loopne
nop
nop
inc
or
js
or
es
call
div
movs
or
div
jge
in
adc
lods
fsub
pop
dec
lods
inc
sub
mov
xchg
cld
aam
call
xor
push
xchg
push
sbb
(bad)
sub
mov
jmp
and
dec
mul
(bad)
or
xchg
xchg
pop
inc
movs
ret
daa
test
and
stos
xor
ss
in
push
in
cdq
sub
frstor
loop
xchg
push
mov
push
mov
mov
pop
lds
mov
jg
jle
scas
les
and
dec
shr
xchg
addr16
into
xor
or
jo
neg
adc
out
xchg
xchg
rol
xchg
repz
pop
xor
shl
movs
lods
retf
dec
mov
xchg
adc
xchg
sahf
shl
les
(bad)
jno
xchg
imul
cmp
movs
pop
int
and
imul
dec
mov
shr
inc
mov
dec
aad
(bad)
xor
ficom
jne
ins
or
sbb
ins
adc
bound
xchg
mov
aam
mov
xchg
sbb
sbb
xor
push
dec
adc
cwde
xchg
push
mov
mov
pop
or
pop
or
shr
das
add
xchg
adc
cmp
inc
add
and
shl
hlt
adc
lock
mov
sahf
xor
sub
sbb
ja
and
xchg
cwde
lock
dec
addr16
and
loop
add
int3
in
fild
es
mov
xlat
ins
mov
out
mov
adc
in
cmp
cmp
mov
sub
cmps
jg
mov
ret
xchg
es
cmp
shl
loope
test
and
gs
and
xchg
jge
dec
xchg
xor
pushf
data16
hlt
hlt
cmc
xchg
and
cdq
xor
lock
lods
xchg
hlt
mov
mov
sub
and
clc
jp
xchg
push
ja
js
xchg
xchg
unpcklps
and
push
lods
cmp
push
or
mov
xor
sbb
mov
scas
pop
stos
or
push
lods
mov
push
mov
cmp
and
inc
sub
out
je
and
fstp
mov
fbstp
pop
pop
xchg
sbb
popf
lock
cmp
cwde
int
je
leave
adc
lds
push
push
int3
mov
fisttp
adc
cmps
xor
xchg
mov
mov
(bad)
lods
sbb
pop
sub
stos
mov
jecxz
rcr
mov
or
adc
dec
mov
inc
mov
arpl
or
cmps
call
ins
enter
jecxz
mov
jecxz
icebp
es
adc
les
lds
lahf
push
sbb
cmps
(bad)
xchg
clc
mov
cld
mov
adc
sbb
scas
pop
test
push
cmc
xchg
push
jl
or
in
xchg
lods
neg
push
popf
repz
ds
nop
cld
xchg
jmp
xchg
add
hlt
or
iret
push
lds
inc
sub
dec
xlat
hlt
inc
shl
inc
add
es
shl
and
xchg
or
adc
pop
(bad)
push
(bad)
(bad)
popf
and
sub
mov
xchg
rcr
mov
leave
fwait
add
dec
push
arpl
xchg
adc
add
movs
push
das
xchg
xchg
(bad)
les
push
push
rcr
push
loopne
inc
cs
popf
ss
xlat
(bad)
loopne
jbe
xchg
rol
int3
adc
aas
(bad)
xchg
xor
dec
xchg
sti
cmp
adc
jl
xlat
push
push
pushf
mov
int3
dec
pop
fisubr
sbb
cmps
cmp
and
add
movs
mov
mov
mov
ror
adc
mov
sub
dec
mov
ds
jp
xchg
popf
cmc
aad
or
xchg
xchg
xchg
sub
leave
repnz
popa
test
enter
lea
jne
retf
nop
dec
xchg
cwde
and
jecxz
pop
(bad)
or
fwait
pop
push
cmps
sti
add
fs
cmp
xchg
push
jb
mov
push
dec
int3
add
shl
adc
sbb
les
cmp
(bad)
arpl
inc
add
adc
dec
push
xchg
xchg
sbb
mov
inc
jnp
mov
hlt
xchg
xor
outs
mov
repnz
xchg
mov
jl
mov
adc
push
les
jmp
rcl
inc
popf
mov
rcl
adc
daa
call
xchg
mov
sbb
jo
xchg
adc
and
push
jge
fcom
std
xchg
retf
and
add
es
repz
js
test
xchg
imul
xchg
in
outs
inc
mov
cwde
xor
xchg
in
mov
imul
xchg
retf
xor
and
cmp
ins
fs
xchg
mov
aad
jg
xor
push
enter
sar
inc
popf
inc
mov
aad
mul
lds
das
in
out
mov
imul
shl
mov
stos
jb
push
cld
and
xor
xchg
xor
xor
(bad)
xchg
in
sbb
rol
les
mov
xchg
imul
xchg
(bad)
sub
div
scas
xchg
cmps
addr16
xchg
lds
mov
pop
addr16
adc
and
sub
pop
jge
xchg
hlt
pushf
inc
stos
les
test
cmp
mov
xchg
mov
inc
in
int3
lea
xchg
inc
push
aas
sbb
int
mov
xor
jle
(bad)
pop
inc
dec
pop
pop
or
xchg
sbb
mov
dec
xchg
les
jbe
or
not
and
xor
les
sbb
out
mov
inc
icebp
movs
jno
push
test
add
cmp
cmp
mov
pusha
ja
outs
or
add
xor
jne
mov
sbb
cmc
aad
test
fild
icebp
fwait
scas
out
lods
not
xchg
add
addr16
and
jl
in
lods
lea
push
push
jmp
jecxz
mov
and
loop
stos
jl
into
inc
data16
cwde
or
int
movs
test
aaa
cld
int3
xchg
sbb
stos
loop
inc
(bad)
into
jge
sub
nop
xchg
xor
sbb
and
lods
jge
mov
(bad)
fist
jmp
mov
mov
int3
popf
imul
movs
mov
xchg
in
sti
outs
and
test
lods
loope
dec
cmp
jae
(bad)
mov
shl
push
div
shl
xchg
jmp
mov
outs
lods
mov
cdq
rcl
jo
iret
xchg
cmp
repz
mov
mov
neg
int
ror
pop
or
or
mov
repz
(bad)
ds
ret
inc
repnz
inc
ss
mov
popa
out
push
(bad)
inc
test
push
neg
xchg
mov
movs
(bad)
mov
pop
jmp
inc
test
cwde
rcl
inc
xor
les
pop
arpl
sbb
pop
and
out
pop
jp
in
mov
or
xchg
push
hlt
in
(bad)
xchg
imul
jg
or
pop
leave
push
dec
and
or
ds
int3
loopne
adc
push
mov
popf
(bad)
add
adc
jno
idiv
aam
aaa
psllq
adc
dec
xchg
test
rcr
xchg
js
push
fld
cmc
or
mov
dec
cmp
fwait
jno
adc
jae
sub
sbb
call
pop
jne
xchg
dec
xchg
les
push
retf
mov
je
mov
jp
int3
xchg
dec
sahf
in
cmp
inc
je
push
cmc
(bad)
jp
int
in
adc
and
push
pop
or
mov
xchg
lods
lds
jns
xchg
(bad)
daa
inc
sbb
loopne
std
fdiv
imul
xor
idiv
cld
int
pop
jmp
dec
ja
mov
mov
sahf
test
scas
ja
stos
inc
hlt
xchg
cmp
mov
pop
sbb
push
sub
adc
clc
push
push
sar
out
inc
mov
cwde
mov
xor
mov
push
psrlw
sbb
xchg
mov
les
mov
jge
test
push
loopne
jmp
movs
lods
inc
ret
out
xchg
xor
mov
or
icebp
jmp
jle
jns
gs
mov
mov
cli
shr
das
cdq
cmp
popf
and
xchg
outs
repz
jl
dec
nop
in
rol
popf
outs
int3
push
cli
xchg
popf
mov
cwde
mov
xor
movd
add
sbb
scas
pop
or
movs
ds
test
cmp
imul
jl
dec
xchg
mov
dec
inc
into
mov
mov
jge
dec
xchg
popa
movs
mov
popf
xlat
ins
xchg
loop
and
mov
cld
sbb
xchg
dec
mov
in
push
jb
pop
jl
inc
jl
lods
repz
gs
mov
inc
jg
push
mov
push
sub
cmp
sub
iret
sub
mov
sbb
rcl
mov
pop
xchg
or
test
shr
std
xchg
and
loop
cmp
xchg
pop
inc
into
pusha
mov
xchg
jne
xor
xchg
mov
push
xchg
pop
fld
retf
and
je
xchg
fsubr
fwait
add
xchg
(bad)
jbe
fwait
jmp
fs
adc
fwait
test
icebp
jo
hlt
scas
jge
sbb
mov
adc
into
(bad)
pop
xchg
scas
push
call
and
mov
adc
xor
inc
xchg
push
sub
rcl
sahf
popf
jl
bound
ss
cs
jmp
sbb
mov
aam
jp
xchg
js
xchg
retf
pcmpeqw
add
jns
cmp
xchg
add
je
xchg
out
les
sbb
mov
in
xchg
mov
fidiv
int
mov
jl
fs
call
xchg
dec
cmp
pop
cwde
shl
add
pusha
mov
mov
das
cwde
aad
xchg
jle
sahf
inc
adc
retf
sub
mov
jnp
jmp
xchg
xchg
aad
add
xchg
sbb
sub
aam
das
cmps
dec
cmp
popf
enter
sub
pop
add
mov
sti
jo
inc
in
stc
mov
xchg
and
xchg
adc
add
rcl
stos
int
shl
and
fnstenv
and
mul
std
cmp
out
inc
push
leave
ja
mov
rcl
or
lea
jge
xchg
push
clc
mov
push
jne
fwait
push
xchg
outs
add
mov
test
push
cmp
mov
cmp
sub
xchg
ret
mov
lds
jg
push
mov
xor
cmp
xchg
jne
fnsave
div
fs
or
adc
sbb
ficomp
in
in
inc
xchg
sbb
or
and
sbb
cmp
push
mov
fst
xor
jl
pop
fcom
fld
mov
cwde
adc
cmc
mov
mov
mov
inc
sub
aad
add
mov
js
adc
adc
add
jp
leave
popf
push
mov
pop
not
repz
pop
enter
idiv
and
repnz
ret
dec
push
xor
call
jle
int
lahf
dec
hlt
cld
mov
pusha
sub
mov
in
sub
xchg
xor
ja
or
idiv
call
shr
lds
sahf
cmps
mov
pop
and
adc
cdq
add
mov
mov
jmp
sbb
gs
pop
or
inc
or
loopne
add
add
stc
inc
xchg
mov
in
adc
lds
call
xchg
hlt
jecxz
cmps
push
scas
icebp
adc
pushf
push
ror
pusha
call
xchg
scas
xor
mov
xchg
in
mov
int
inc
jecxz
sub
popf
add
push
xchg
popa
sbb
loop
xchg
inc
ret
pop
stos
push
inc
jne
stos
sub
aam
dec
xlat
mov
adc
add
jp
stc
adc
ret
aas
pop
xor
aam
(bad)
int
push
xchg
fadd
push
sub
sbb
mov
adc
push
fsub
ret
in
adc
push
repnz
mov
sub
xchg
ins
(bad)
mov
mov
sbb
pusha
push
add
xchg
mov
mov
push
cmpps
push
mov
aaa
ja
sahf
sub
pop
mov
mov
(bad)
retf
shl
xchg
pushf
cwde
inc
hlt
lods
ins
popa
adc
cli
fwait
cmp
xchg
xchg
(bad)
jmp
cmp
push
xchg
movs
or
stos
or
nop
jb
cdq
sub
push
dec
hlt
and
repnz
fsubr
adc
sub
lods
aam
push
rcl
and
xchg
int
xchg
mov
xchg
ja
jecxz
popa
dec
mov
adc
xchg
bound
sahf
movs
ret
add
xchg
mov
xchg
jae
jle
xchg
outs
push
pushf
mov
data16
pop
adc
loop
xchg
push
push
jmp
out
xchg
xchg
jg
sbb
fiadd
dec
outs
scas
jp
adc
cmps
or
sahf
sub
sbb
or
jge
mov
nop
push
sete
xchg
lock
push
xchg
xchg
push
cmp
ret
jnp
cmp
xchg
dec
addr16
data16
mov
or
into
adc
in
mov
cdq
xchg
mov
dec
aam
imul
vcmpps
xchg
mov
xchg
push
push
sub
xor
cmps
fisttp
push
pop
xor
pushf
into
cmp
int3
xchg
push
icebp
out
aad
repnz
push
dec
add
mov
xor
out
(bad)
icebp
not
mov
lahf
rcl
xor
xor
xchg
and
sahf
cli
repnz
aam
jmp
int
ss
nop
call
adc
xchg
inc
jb
xchg
or
mov
cwde
into
adc
sbb
mov
sub
out
bound
(bad)
aam
add
sbb
dec
mov
xchg
xor
out
cmps
lock
jns
mov
scas
test
icebp
mov
xchg
stos
add
sbb
push
stos
daa
jns
mov
push
into
adc
xchg
and
popa
push
cdq
inc
test
leave
sahf
or
mov
and
xchg
out
or
es
movs
fwait
arpl
mov
(bad)
jae
push
nop
rcl
push
fstp
mov
shl
or
hlt
jle
ret
or
sub
repnz
fwait
add
adc
(bad)
in
mov
xchg
call
mov
pop
mov
cmp
mov
mov
mov
sti
jecxz
mov
adc
(bad)
out
push
dec
or
dec
and
mov
pop
idiv
gs
test
(bad)
fsqrt
and
fist
fwait
lahf
dec
ins
jno
call
dec
stos
xchg
sub
xchg
xor
jp
push
dec
loop
xchg
xchg
adc
inc
enter
mov
std
cmps
out
ins
jl
xchg
adc
jno
mov
(bad)
out
lea
ss
aas
mov
mov
xor
and
ins
icebp
pushf
xchg
sbb
hlt
pop
cwde
push
jge
xor
jae
fcom
mov
pop
pusha
dec
test
mov
lahf
xchg
pop
dec
nop
loope
sahf
stos
rol
mov
into
inc
adc
mov
pop
mov
ja
ficom
mov
push
mov
pop
and
add
data16
xchg
mov
dec
mov
cdq
sub
inc
pop
test
push
or
xchg
retf
fwait
mov
fs
mov
call
inc
jecxz
mov
gs
dec
and
xchg
les
sub
in
ja
test
lahf
inc
int3
call
mov
ja
pop
xchg
xlat
or
mov
pop
and
push
cli
shl
sbb
fdiv
test
cld
jbe
nop
ins
in
jne
into
add
xchg
xchg
or
pop
repz
xchg
mov
mov
ins
test
cmp
je
pop
mov
mov
cli
(bad)
adc
add
jge
push
dec
cdq
sbb
mov
jbe
mov
mov
mov
aaa
mov
jns
cmp
hlt
int3
jg
jecxz
push
mov
push
es
ss
cli
sbb
popf
in
pop
add
ds
sbb
jne
dec
push
xchg
sbb
push
jns
out
cdq
jno
stos
mov
adc
es
scas
sub
pop
jne
pop
cli
and
xchg
mov
mov
jle
xchg
xchg
mov
lahf
icebp
pop
sub
adc
jns
ins
loopne
fmul
not
jl
xchg
and
push
ret
xchg
inc
adc
adc
xchg
fscale
pop
fiadd
cwde
sub
cmp
lahf
mov
into
add
dec
xchg
loopne
das
sbb
mov
jns
push
imul
pop
add
nop
cmp
into
cmps
jl
aas
lods
jae
xchg
push
fs
(bad)
jle
js
adc
jg
or
rcr
jns
ins
pop
and
add
inc
mov
push
sbb
div
js
xchg
xchg
xor
xchg
xchg
mov
mov
adc
movs
lock
call
icebp
xchg
cdq
scas
dec
popa
ins
(bad)
lea
inc
sub
loop
repnz
mov
xchg
addr16
test
loope
push
push
push
xchg
mov
dec
je
movs
retf
jnp
addr16
xchg
adc
fmul
jb
fwait
inc
dec
ror
mov
ror
mov
xchg
jmp
cmps
push
daa
mov
dec
xor
or
xchg
xor
int3
int
push
into
xchg
jb
loopne
bound
xchg
fist
mov
ins
inc
cmps
xchg
mov
popa
add
leave
scas
mov
je
jns
fcomp
mov
addr16
lds
pop
scas
ror
daa
or
xchg
xchg
leave
xchg
fisub
popf
xchg
fnsave
out
mov
clc
inc
xchg
ret
fist
movs
lahf
xchg
loope
out
or
jbe
xchg
(bad)
test
cmps
sbb
(bad)
xchg
and
xchg
in
xchg
and
idiv
xchg
pop
jo
cmc
outs
adc
les
dec
push
mov
loopne
mov
fadd
movs
dec
xchg
sub
sub
cld
ror
les
pop
pop
xchg
cmc
(bad)
jge
or
cmp
mov
xor
rcl
pop
lds
mov
mov
xchg
fcmovbe
add
pop
rcl
aas
ja
add
jl
scas
xchg
ss
das
rcl
dec
(bad)
shr
jg
adc
ror
xchg
mov
cmp
sub
sbb
fdivr
xor
mov
pop
xchg
data16
sub
outs
pop
fmul
adc
nop
dec
or
in
sbb
cmc
rol
mov
hlt
push
(bad)
or
push
(bad)
jbe
and
dec
outs
fs
ja
jb
in
adc
aas
jne
adc
jle
cdq
jmp
in
ins
xor
imul
jl
lods
xchg
xchg
xchg
adc
jge
jecxz
dec
fst
sbb
lahf
xchg
test
outs
adc
or
jbe
cld
pop
jno
pop
call
push
in
lods
out
jl
dec
dec
lahf
sbb
pop
stos
jge
fsubr
mov
sti
nop
dec
add
retf
(bad)
pop
call
ja
mov
adc
pushf
gs
fisub
inc
iret
jo
add
shl
lds
gs
cmc
mov
mov
leave
in
cli
dec
mov
les
nop
xchg
push
dec
pop
sbb
fisttp
popf
shr
dec
loop
out
inc
xchg
cwde
dec
xchg
mov
add
les
jge
pusha
addr16
push
and
cmp
test
arpl
pushf
xchg
mov
pop
aam
pop
stos
jge
dec
push
xlat
hlt
sub
mov
and
sbb
mov
push
es
mul
lea
movs
dec
xchg
mov
adc
inc
and
cmps
arpl
sbb
jmp
and
sub
and
push
movs
dec
cmps
sbb
pop
mov
out
jge
jecxz
or
iret
mov
test
sbb
mov
mov
mov
push
and
xchg
inc
xchg
or
and
xchg
addr16
or
stc
in
or
cli
adc
ins
imul
pop
(bad)
mov
jge
test
jno
mov
aam
jl
scas
jl
data16
imul
sahf
jmp
inc
fsubp
adc
inc
and
outs
data16
xchg
cld
cmp
add
pop
adc
mov
shr
push
call
cmp
data16
inc
imul
out
aas
nop
out
test
pop
push
sub
pop
jge
pop
push
mov
gs
fcom
sbb
xor
inc
enter
popf
lock
(bad)
repz
shl
stos
out
mov
add
jl
push
call
cld
dec
cmps
push
in
stos
loopne
push
popa
scas
inc
add
adc
sar
loop
push
and
push
dec
jmp
push
icebp
cmps
mov
add
inc
mov
sbb
and
cmp
fcomp
push
mov
sbb
cld
lods
push
adc
jbe
mov
dec
aaa
and
or
out
popf
mov
push
call
cld
rcl
push
test
adc
fsubr
sub
dec
jl
ret
jl
lahf
cmps
xor
push
xchg
leave
icebp
jmp
pusha
add
xchg
dec
sbb
out
cmp
ret
dec
xchg
bound
(bad)
jno
xchg
push
sbb
push
shl
scas
xchg
idiv
dec
ficom
sub
and
xchg
outs
fbstp
unpcklps
pushf
xor
mov
xchg
mov
dec
or
pop
je
push
and
repz
xchg
loopne
xchg
inc
mov
frstor
cmp
or
ins
mov
xchg
sti
and
cmp
stc
and
xor
or
pop
lods
sbb
hlt
and
push
cdq
ror
sub
arpl
retf
push
cmp
and
xor
sbb
sbb
mov
adc
xchg
mov
retf
jnp
iret
xchg
pop
imul
icebp
test
xor
xchg
rol
mov
ins
pop
jo
fstp
repz
fldenv
push
xchg
pop
jl
mov
shr
xchg
adc
repnz
mov
jp
aam
add
cmps
sbb
out
xchg
mov
adc
in
outs
add
push
idiv
add
cmp
sbb
push
lock
fsubr
rcr
imul
jno
pusha
mov
pop
mov
xor
adc
adc
aad
arpl
xchg
mov
cld
call
xchg
dec
lds
sahf
sar
adc
jmp
or
movs
xor
pop
mov
push
gs
xor
popf
push
popf
push
dec
stos
mov
std
ficomp
adc
in
inc
sbb
mov
fiadd
fstp
arpl
pop
or
xchg
jne
std
outs
xor
sahf
adc
inc
je
jle
push
xchg
js
pop
repz
sti
adc
adc
pop
pop
rcl
fwait
daa
and
call
cwde
js
push
xchg
scas
call
in
xchg
or
stos
and
(bad)
xchg
push
aaa
adc
movs
nop
xchg
mov
cmp
les
add
xchg
shl
push
xchg
add
pop
retf
cmp
cdq
hlt
shl
xchg
adc
ficom
sub
pushf
xchg
cwde
sbb
pop
xor
jns
fisttp
push
ret
out
cwde
(bad)
fdivr
push
mov
sub
hlt
or
mov
fstp
dec
pop
cli
sbb
mov
sub
mov
and
(bad)
jle
rcl
push
lds
pop
adc
outs
sub
xchg
mov
es
mov
int
mov
cmp
pop
mov
xchg
add
dec
jns
dec
adc
ss
pop
mov
stos
ret
mov
push
stos
lock
mov
stc
inc
push
or
in
adc
mov
fwait
dec
sbb
test
jo
xor
push
or
clc
xchg
jne
mov
repz
cmc
jae
adc
push
mov
dec
xchg
add
jbe
into
adc
aam
pusha
fwait
sbb
add
in
push
movs
push
mov
les
shr
enter
add
mov
jg
push
iret
fwait
xchg
sbb
addr16
lods
xchg
hlt
and
rcr
mov
push
or
jle
xor
jae
dec
xchg
ds
cmp
loop
bound
pop
(bad)
fisttp
lods
in
and
in
loop
dec
pop
(bad)
pop
cmp
xchg
xchg
add
mov
test
movs
es
jmp
adc
push
outs
je
adc
dec
repz
inc
inc
stos
xchg
fistp
lahf
and
pop
or
mov
data16
test
ror
push
mov
cld
lahf
and
aas
pop
es
jmp
jo
retf
dec
in
aam
jl
sub
jmp
and
mov
push
fist
fsub
jmp
xchg
inc
mov
aad
out
neg
mov
xchg
xchg
sbb
mov
mov
pushw
js
hlt
in
ja
jne
(bad)
(bad)
adc
cmp
jne
add
jl
jmp
and
fstp
lods
shl
je
jae
cld
adc
mov
sbb
mov
mov
dec
iret
pop
push
xor
and
cli
mov
mov
shl
jbe
lods
sbb
mov
call
sbb
jge
mov
sbb
fsub
mov
dec
jb
cmc
jge
pop
adc
dec
mov
js
xchg
jns
int3
test
and
xchg
sbb
fistp
push
scas
mov
(bad)
sbb
mov
xchg
cmps
xchg
jle
repnz
xchg
lahf
inc
imul
repz
pop
js
scas
xchg
clc
jle
jl
iret
lods
sbb
adc
call
nop
pop
test
xchg
push
dec
sar
int3
sub
inc
dec
mov
mov
jecxz
int3
xchg
in
fwait
jns
adc
push
mov
pop
pop
imul
and
cli
cs
fistp
outs
sbb
push
dec
adc
dec
mov
test
jle
mov
dec
mov
jmp
inc
xchg
dec
push
inc
std
mov
(bad)
add
shl
ins
inc
fldenv
arpl
inc
xor
inc
xacquire
(bad)
hlt
retf
inc
popf
and
pop
xchg
fsub
xchg
or
mov
fisub
(bad)
out
xchg
xchg
push
daa
sbb
xchg
repnz
inc
push
cld
cmp
cmp
lds
jmp
cmps
stos
push
xchg
out
aad
in
clc
adc
pop
inc
inc
arpl
enter
push
hlt
out
push
push
stos
xchg
xchg
(bad)
mov
imul
dec
adc
call
and
mov
(bad)
popf
cmp
ds
add
aas
adc
dec
sbb
out
repnz
jle
cmp
test
push
jne
je
imul
adc
jmp
xor
aaa
adc
stos
xor
xchg
(bad)
ffreep
jbe
cwde
xchg
dec
(bad)
(bad)
push
fistp
mov
mov
test
test
je
out
(bad)
jle
call
cld
rcl
inc
adc
mov
mov
mov
(bad)
push
arpl
and
stc
xchg
hlt
add
adc
push
inc
jl
loope
adc
cmp
les
adc
mov
sbb
push
imul
gs
fist
lods
not
jnp
jmp
imul
aam
sub
inc
adc
add
push
loopne
cmp
jo
mov
and
rcl
std
jp
fwait
mov
call
mov
lods
xchg
sahf
mov
pop
jp
inc
push
push
mov
push
adc
in
cdq
outs
scas
es
adc
outs
repz
ds
loopne
into
sub
adc
fwait
pop
sbb
mov
push
adc
jg
mov
fst
test
jne
(bad)
xchg
dec
cmp
and
fist
xchg
sub
jne
bound
adc
lods
pop
pop
xchg
int
aad
arpl
sub
or
stos
dec
xlat
xchg
pop
dec
pop
test
or
fwait
pavgw
xchg
xchg
int3
cmp
sbb
cmp
xchg
in
shl
(bad)
xchg
arpl
and
int3
and
cwde
out
lds
adc
mov
ins
xchg
les
pop
gs
iret
mov
int3
mov
call
sbb
sub
mov
xchg
sbb
or
mov
aam
shr
sub
xchg
and
je
ss
mov
ror
inc
enter
sub
push
add
test
xchg
std
stos
sti
loope
or
push
sbb
mov
inc
or
mov
ror
sub
ldmxcsr
cmp
cdq
and
adc
sbb
push
fs
repnz
ret
and
lods
ins
lods
lock
mov
inc
mov
mov
push
cmp
or
xor
sbb
pop
imul
cmps
shl
xchg
bound
push
loop
dec
push
mov
aad
fistp
js
adc
ss
xchg
pop
sbb
(bad)
cmp
add
retf
nop
jns
(bad)
xchg
outs
adc
dec
stos
fbstp
fwait
mov
movs
imul
push
xchg
push
mov
dec
pop
add
pop
mov
mov
out
push
mov
push
test
ja
cmp
sahf
dec
pop
or
pop
icebp
xchg
mov
xor
iret
dec
xchg
ja
jno
jmp
xchg
fisubr
add
add
jo
hlt
in
push
mov
test
fdiv
adc
ficomp
mov
sub
mov
fucomi
fidivr
ss
int
dec
popf
aad
cmp
cld
xchg
pop
call
into
adc
and
xchg
push
cmps
pop
jle
add
dec
ficomp
lahf
fst
adc
xor
dec
mov
xchg
sbb
mov
jge
xchg
dec
outs
arpl
out
sbb
(bad)
lea
xchg
fadd
cmp
mov
fbstp
push
repnz
jmp
ret
xchg
popf
or
or
pusha
fnstenv
inc
xchg
jb
dec
enter
cmp
(bad)
fcmove
fcomp
not
mov
mov
stos
mov
inc
jo
out
jl
xchg
aam
jns
les
test
fisubr
sahf
cmp
in
hlt
shl
xchg
rol
ins
cli
popf
mov
inc
xchg
xor
mov
xchg
arpl
mov
inc
xchg
inc
cmps
mov
xchg
cmps
dec
xchg
adc
ret
adc
sbb
lock
adc
push
sub
adc
adc
lds
out
mov
addr16
adc
leave
int
pushf
xchg
js
mov
scas
pop
sub
xchg
mov
cli
inc
imul
jno
mov
or
into
pop
push
mov
adc
popa
rcr
mov
or
inc
ret
test
(bad)
dec
push
cmp
daa
jo
xchg
arpl
xchg
sub
or
pop
imul
push
sub
xchg
call
lahf
fdivr
mov
imul
ror
mov
mov
push
pop
xchg
adc
add
xchg
cld
loope
das
cmps
push
cmc
pop
xchg
mov
add
mov
lahf
adc
loop
(bad)
call
imul
xchg
(bad)
sbb
mov
and
pop
sysret
sub
loop
xor
pop
cmps
cmp
jle
sub
(bad)
xor
push
xchg
jne
or
icebp
stos
inc
mov
dec
in
outs
inc
mov
dec
sub
add
inc
popf
test
fistp
mov
nop
rcl
out
xchg
pop
loope
movs
stos
sub
add
sub
mov
sub
loopne
xchg
pop
ficomp
shl
jne
inc
jecxz
push
sbb
sub
popf
push
cmps
cmp
xchg
in
leave
dec
pop
cmps
ds
sub
mov
jbe
cdq
mov
inc
out
xchg
clc
je
packssdw
repz
jl
mov
jge
daa
push
add
jl
mov
mov
push
test
cld
jbe
sar
push
add
xchg
mov
rcr
xor
jmp
pop
add
cmp
mov
mov
std
xchg
stos
jns
xor
and
fyl2x
rol
call
jmp
fild
lahf
outs
add
or
nop
mov
rcl
fistp
pusha
ja
mov
sbb
xchg
es
dec
adc
mov
sub
mov
xchg
ins
nop
adc
aas
mov
sar
outs
hlt
outs
test
jnp
loopne
movs
inc
dec
lods
xchg
out
xchg
aad
sbb
test
(bad)
cmp
inc
sbb
ss
xchg
loope
jge
(bad)
std
mov
ret
dec
xchg
adc
adc
inc
inc
fidiv
mov
iret
fild
push
push
sbb
dec
test
cmp
cdq
jle
xchg
sub
add
pop
std
out
xchg
cmps
sar
xor
jmp
popa
int3
pop
aaa
adc
jecxz
pop
mov
pop
cmps
(bad)
sar
xchg
xchg
mov
sub
popf
mov
(bad)
loopne
lods
xchg
out
add
inc
xchg
mov
call
int3
sbb
dec
and
mov
pop
mov
test
imul
cdq
mov
sub
sbb
mov
scas
fwait
jno
das
or
cmps
xor
mov
out
add
cmp
cdq
popf
cmp
xchg
inc
and
cmc
xor
sbb
adc
cmp
int
jl
cmps
mov
adc
jge
mov
sub
xchg
xchg
cmp
(bad)
hlt
icebp
nop
or
sar
sub
fs
jl
mov
aad
into
xchg
pop
mov
pushf
sbb
shr
cmp
aam
pop
cdq
stos
xor
cmp
add
mov
shr
adc
cmps
dec
sbb
sbb
push
pop
aas
and
lahf
adc
pop
xchg
mov
popa
jo
les
mov
adc
inc
jne
or
hlt
sbb
test
out
(bad)
in
push
mov
xchg
fdiv
lea
dec
jg
jg
nop
hlt
dec
add
mov
es
fsubr
outs
sub
sbb
xchg
sub
mov
(bad)
pop
mov
xor
jg
cmp
sbb
out
jge
out
daa
mov
sub
in
das
xchg
mov
or
jge
stc
push
mov
arpl
iret
cmps
sbb
pop
mov
jp
inc
push
rol
jge
adc
xchg
mov
ja
xor
xor
jmp
movs
push
cwde
je
(bad)
iret
xchg
push
xor
inc
stc
xchg
loopne
shl
xchg
inc
xor
movs
add
xchg
mov
or
pop
xchg
shl
mov
fwait
mov
(bad)
call
rcr
dec
mov
mov
js
push
cmp
dec
lea
mov
fcomp
aas
mov
aaa
sbb
push
adc
adc
imul
sbb
clc
in
inc
mov
fwait
sbb
add
sub
shl
iret
xchg
repz
push
jns
pusha
iret
cdq
jno
dec
jb
mov
arpl
mov
adc
and
shl
out
mov
lods
mov
hlt
popa
loope
sub
mov
adc
out
xchg
rcl
or
test
or
dec
mov
aas
in
mov
push
gs
inc
xchg
sbb
and
mov
ret
cmps
jnp
cmp
fwait
test
hlt
inc
gs
xchg
jl
nop
push
out
xchg
daa
sti
push
xlat
dec
in
mov
mov
sbb
sub
jno
or
xchg
jnp
pop
mov
clc
gs
mov
push
cmps
sub
add
aaa
fwait
stc
(bad)
mov
mov
or
(bad)
bound
xor
and
adc
xor
dec
dec
stc
xor
push
ret
pop
xchg
rcl
mov
mov
enter
mov
loopne
mov
mov
pop
stos
add
or
bnd
lea
in
add
fwait
cmps
inc
lods
ins
mov
pop
xchg
mov
add
fwait
push
adc
xor
mov
xchg
jne
push
(bad)
xchg
cmp
mov
rol
adc
jno
xor
dec
div
xchg
push
fist
aad
pop
xchg
and
jmp
(bad)
push
test
and
mov
and
scas
js
push
outs
arpl
adc
xor
mul
iret
cwde
xchg
push
cmps
pop
leave
outs
cli
sub
fdivr
push
sbb
pop
mov
cdq
cmp
rol
xchg
rcl
loope
add
jecxz
adc
cmps
jne
dec
mov
(bad)
repz
adc
and
popf
dec
jg
or
inc
adc
cmp
adc
sbb
rcr
rcr
fxch
adc
cwde
mov
mov
xchg
cld
push
mov
enter
pusha
cmp
iret
inc
xor
xor
icebp
std
repnz
cld
popf
ja
in
int
les
clc
mov
inc
(bad)
(bad)
pop
xchg
push
jo
pop
mov
rcr
mov
jne
les
ins
mov
sub
mov
test
pop
icebp
nop
lea
je
test
lahf
les
push
sub
cmp
push
les
mov
cdq
push
js
and
mov
outs
jo
shr
nop
arpl
lods
addr16
xchg
es
loopne
push
add
add
ins
cdq
sub
outs
hlt
xchg
jne
imul
lods
mov
int
push
fmul
dec
je
xor
sbb
sub
cwde
jno
mov
and
push
lods
xchg
inc
sahf
pusha
push
pop
xchg
mov
movs
mov
int
test
pop
fwait
pop
jmp
ja
fwait
mov
nop
xchg
dec
or
imul
fist
test
add
cmc
(bad)
or
enter
idiv
repz
mov
or
data16
adc
cmps
ss
inc
xchg
pushf
sbb
xchg
adc
add
xchg
(bad)
mov
xchg
adc
xchg
mov
adc
sbb
sub
jbe
xor
push
push
scas
push
rcl
cmc
cmp
fdivr
fcmovnb
cs
xchg
or
push
mov
adc
nop
pop
xchg
push
inc
xchg
add
jge
xchg
add
jb
xor
add
jns
xor
movs
xor
add
or
cmp
test
adc
fcom
fs
mov
mov
mov
aas
stc
(bad)
iret
cmps
dec
xchg
repz
mov
jo
add
mov
out
xchg
(bad)
pushf
fs
rcr
and
rol
pop
fsub
cld
test
test
imul
sbb
test
shl
xchg
xchg
adc
aaa
dec
cmps
stos
pop
aam
xchg
fcmovnu
cmp
mov
xor
pop
jnp
cmps
imul
daa
xor
xor
test
sub
add
jnp
cmps
xchg
aaa
test
xchg
pop
xchg
pop
cmp
mov
jnp
cmps
aas
iret
out
adc
enter
adc
xchg
pop
mov
xchg
popa
fld
mov
jno
jo
add
std
xchg
cdq
pop
inc
aam
ret
xchg
pop
pop
or
mov
push
ins
call
or
into
mov
daa
pop
std
hlt
lock
add
(bad)
and
loopne
dec
xor
imul
xchg
jl
std
cmp
adc
aad
jns
sbb
int3
or
cmovge
mov
push
cdq
loope
jp
mov
cld
push
lods
and
std
jns
adc
test
jl
movs
jmp
ss
cld
pop
jge
loop
fwait
mov
dec
mov
adc
sub
cld
adc
(bad)
mov
adc
pop
mov
inc
into
stos
cli
mov
mov
in
aas
outs
mov
fwait
xchg
fst
(bad)
mov
repnz
enter
je
mov
sbb
out
sub
xchg
scas
nop
xor
inc
shl
pop
cmp
xchg
stc
pop
xor
outs
push
loopne
jne
in
xchg
sbb
fild
iret
mov
mov
sbb
popf
(bad)
test
jmp
int3
jno
call
fisttp
repz
add
cdq
and
push
popa
pushf
cmp
pop
or
mov
les
lods
stos
sar
pop
and
hlt
lds
mov
pop
xchg
popf
arpl
ins
adc
out
aad
mov
cdq
icebp
mov
cld
jle
xor
daa
xor
pop
xchg
fwait
fs
cdq
ins
xchg
jl
ins
bound
mov
aam
int
pop
std
mov
pop
fwait
sbb
fdivr
shl
dec
sbb
push
inc
dec
xchg
stc
cmc
push
fwait
jnp
es
mov
or
repnz
xor
gs
xor
je
jb
mov
adc
test
jnp
cmp
(bad)
jge
mov
mov
mov
add
mov
lods
pop
imul
jmp
push
push
mov
call
adc
fwait
mov
popf
inc
xchg
les
push
xor
sbb
cs
pop
mov
jb
or
xchg
mov
cmp
imul
sub
daa
or
cld
xchg
and
ins
sub
cmps
xchg
jg
js
test
pop
data16
xchg
and
and
fisubr
pop
add
sbb
jo
xchg
push
stos
dec
or
sbb
fwait
xchg
adc
mov
sub
daa
test
das
mov
jb
adc
jnp
mov
push
dec
sahf
inc
(bad)
dec
inc
xchg
jp
push
add
fs
rol
jbe
addr16
daa
dec
xchg
(bad)
sub
(bad)
pop
mov
dec
xchg
sub
in
xchg
outs
aaa
jbe
add
dec
int3
repnz
(bad)
mov
push
xchg
imul
int
loope
cmps
xchg
adc
mov
xchg
fs
sahf
xor
xchg
ds
hlt
into
stc
rcr
sub
jbe
mov
dec
das
addr16
lock
cs
xchg
es
adc
push
xchg
fstp
push
and
cmpxchg
push
mov
shr
xor
ja
and
add
rol
xchg
mov
stc
add
xor
shl
xor
or
xchg
push
push
jne
xchg
mov
fwait
(bad)
fmul
push
xchg
test
xlat
pop
jle
mov
(bad)
pop
jne
mov
bound
push
or
xchg
dec
fiadd
xchg
aad
xchg
out
lods
cmps
pop
sahf
xor
xchg
in
sbb
aam
pop
inc
xchg
cmp
pop
nop
adc
dec
sub
pop
int3
mov
sub
sti
and
pop
vpcmpgtd
dec
mov
and
add
lea
fcmovb
sub
pusha
push
cmp
mov
jl
retf
pop
mov
in
xchg
repnz
mov
push
fimul
cs
outs
pop
xchg
fstp
or
out
or
adc
xchg
lock
cmps
sahf
push
mov
cmps
xchg
aad
mov
push
xchg
cmp
pop
inc
sbb
ins
dec
pop
shl
cld
jge
jge
retf
xchg
or
(bad)
lahf
ret
or
inc
ja
inc
dec
fstp
(bad)
or
or
(bad)
stc
test
pop
inc
les
ret
cmp
jg
shl
pop
jge
adc
mov
mov
aaa
in
enter
repz
sbb
push
(bad)
loopne
xchg
jae
jl
lds
jg
mov
push
outs
in
lock
repnz
in
sti
fadd
lods
or
sar
popf
std
movs
jae
xchg
mov
fdivr
sbb
sbb
xchg
cmps
rcpps
xchg
daa
fld
xchg
xchg
jns
inc
jp
jle
pop
cmc
fs
je
xchg
mov
pop
add
xchg
inc
xchg
pop
mov
mov
mov
popf
mov
xchg
fbld
sub
shr
mov
pop
sbb
xchg
(bad)
push
dec
fisttp
xchg
push
or
lods
je
dec
xchg
and
outs
add
adc
pop
xchg
loope
sub
(bad)
rcl
gs
(bad)
xchg
(bad)
adc
fdiv
xchg
jae
outs
call
cdq
test
mov
push
retf
push
mov
mov
lods
add
sar
dec
push
not
std
shr
xchg
mov
lahf
call
mov
inc
xchg
loope
jno
stos
scas
ret
dec
xchg
popf
inc
mov
inc
xchg
jmp
mov
xor
ret
ss
push
jne
aad
stos
push
and
pop
ja
xchg
mov
or
nop
cmp
jge
inc
jle
fwait
jmp
fcom
mov
push
rcl
push
(bad)
stos
dec
mov
in
mov
dec
int
xchg
mov
mov
push
into
lea
sbb
stos
retf
test
popa
jnp
cmc
xchg
mov
and
mov
dec
scas
pusha
mov
adc
push
push
xchg
pop
cld
jg
xchg
sbb
push
mov
and
out
xchg
mul
aaa
pop
xchg
cmc
cmps
popa
cmp
xor
add
test
dec
jno
fstp
or
mov
sub
xchg
dec
mov
xchg
push
push
mov
pushfw
repz
add
xchg
shl
xor
pusha
retf
call
aas
add
pop
scas
add
(bad)
adc
or
frstor
hlt
sub
ror
je
cli
sub
sbb
add
mov
hlt
clc
bnd
aas
push
adc
lock
xchg
movs
test
mov
push
push
call
loop
or
dec
cmp
xchg
iret
xchg
in
gs
or
lods
inc
push
xchg
sbb
xlat
mov
xor
xchg
xchg
dec
add
shr
xchg
lahf
pop
mov
push
bound
sbb
data16
jge
xchg
cmp
mov
xchg
push
fst
sbb
icebp
push
lock
dec
xchg
rol
mov
xor
push
pop
mov
push
hlt
xor
cmp
cmps
(bad)
not
jmp
fwait
xchg
mov
dec
retfw
mov
fcomp
bound
sbb
lock
cli
aam
mov
repz
popf
sahf
inc
pop
add
mov
xchg
bound
jmp
call
cmp
xchg
fucomi
pop
jno
xor
ins
or
xchg
xor
sbb
lock
and
rol
inc
fcmovnb
hlt
sub
in
jno
xchg
(bad)
lods
adc
lds
sbb
imul
xchg
cmp
ins
movs
cwde
sbb
call
data16
out
dec
aad
pop
ret
rcr
fidivr
(bad)
and
add
jmp
mov
and
rcr
dec
shl
sub
dec
xchg
(bad)
xchg
ror
aad
pop
inc
jmp
ret
jo
or
mov
sbb
jmp
fs
jecxz
mov
mov
mov
outs
sub
fbld
mov
ret
xchg
int
(bad)
int3
pause
xchg
in
jmp
test
push
sbb
addr16
or
xchg
movs
cmp
ins
test
jbe
add
pushf
jl
mov
ret
push
jnp
xor
push
jne
test
mov
fnstcw
hlt
add
pop
es
pop
cwde
push
jb
(bad)
cmps
cdq
test
inc
jl
xchg
es
dec
gs
shr
pop
shr
sbb
adc
jl
aad
iret
cmp
mov
pop
sub
mov
jle
movs
jle
lock
mov
sub
mov
or
lea
lods
push
sbb
idiv
ficom
push
les
push
adc
xchg
cmp
test
leave
lahf
and
cli
lods
xchg
in
dec
xchg
add
ins
mov
sub
inc
push
sbb
or
add
xchg
ror
ret
dec
or
mov
jne
xchg
out
jmp
cmc
xchg
xchg
xchg
dec
inc
xchg
or
xchg
daa
and
mov
sbb
mov
sbb
mov
and
or
dec
imul
add
xchg
mov
pop
int3
out
mov
mov
popf
sub
inc
xchg
push
or
je
inc
ret
out
xchg
mov
and
or
and
scas
not
and
pop
cmps
or
fmul
push
jmp
aas
cdq
rcl
cs
int
mov
mov
mov
push
js
and
gs
dec
(bad)
mov
ss
loopne
ds
scas
lods
mov
std
fcomp
xor
xchg
fild
pop
retf
pushf
and
psubusb
fisttp
mov
out
pop
xchg
sub
xchg
adc
jmp
xchg
add
mov
aaa
xchg
setae
push
cwde
hlt
cmps
(bad)
xchg
and
iret
jae
aaa
aas
push
xchg
int3
and
cmps
fwait
retf
retf
imul
les
cmps
adc
inc
inc
xchg
xlat
mov
mov
test
sub
fs
in
in
pusha
ja
nop
jb
push
(bad)
call
xchg
pop
aaa
fcmovne
pop
mov
push
xchg
cmp
mov
mov
push
add
in
cmps
dec
xchg
test
lock
mov
inc
xchg
fisubr
(bad)
outs
jmp
and
xor
inc
mov
xor
retf
pop
inc
outs
js
push
xchg
mov
jp
mov
std
jmp
sti
adc
pop
imul
mov
fidivr
sub
xchg
(bad)
mov
rol
xchg
enter
xor
mov
cmps
xchg
push
stos
mov
cmp
xchg
popa
cmc
loop
les
mov
addr16
xchg
fiadd
(bad)
cdq
mov
or
xchg
and
(bad)
cli
scas
xchg
xor
push
xor
outs
add
adc
into
xor
cmp
clc
xchg
in
push
aad
pop
(bad)
push
xchg
jns
outs
inc
out
mov
xchg
mov
and
xchg
iret
pop
(bad)
xchg
sub
or
cmps
xor
fwait
rol
xor
push
mov
add
xchg
inc
pop
aad
push
pop
not
das
scas
loop
sub
mov
(bad)
xchg
adc
aam
lds
dec
inc
add
xchg
out
ja
push
or
inc
xor
push
jmp
cmp
in
xchg
lock
or
fwait
push
jl
cmps
fs
jle
repz
(bad)
inc
or
xchg
xchg
retf
xchg
stos
mov
or
loop
repz
ins
js
xchg
shl
push
je
out
mov
push
mov
mov
jle
or
and
int
sbb
jg
push
shl
mov
rcl
xchg
movs
or
out
gs
inc
xor
cmp
cmps
rol
cdq
ror
add
sahf
rol
mov
les
mov
popa
mov
or
mov
inc
sub
bound
and
dec
enter
xchg
inc
dec
jmp
cdq
(bad)
adc
pop
stos
mov
nop
sub
leave
shr
outs
rcl
or
xchg
cwde
xor
dec
mov
mov
out
mov
mov
cdq
pop
inc
cmc
or
pop
xchg
push
pusha
fnsave
xchg
(bad)
fsubr
push
call
push
leave
xor
cs
xor
inc
fwait
xor
lods
lds
mov
mov
xchg
jl
sub
push
xchg
stos
fimul
and
push
inc
push
jbe
ror
jns
in
test
sbb
lea
sub
cwde
fbld
and
jl
xchg
mov
dec
mov
xchg
lods
pop
sub
call
imul
push
add
push
jb
and
sbb
repnz
pop
xor
ja
xchg
inc
jg
mov
cdq
ret
fs
inc
mov
outs
test
mov
sbb
add
add
sub
inc
les
cwde
adc
push
(bad)
sbb
loopne
mov
loop
ja
and
adc
dec
or
loopne
hlt
add
into
stos
jge
rcl
ret
dec
cmp
mov
mov
out
in
push
test
pusha
cmp
leave
ins
ret
push
mov
adc
sub
mov
pop
jmp
xor
sub
or
adc
dec
push
iret
adc
push
cdq
out
imul
xchg
dec
add
or
and
xchg
cmp
gs
pop
inc
(bad)
and
mov
mov
mov
fisttp
xchg
aas
mov
xchg
cwde
aam
outs
in
xchg
add
xchg
jl
inc
cs
(bad)
fild
test
dec
xchg
pop
jne
pcmpeqb
inc
fmul
xchg
dec
shl
xchg
xchg
dec
add
pop
and
xchg
xor
mov
into
xor
in
xchg
ficom
(bad)
aam
rcl
xchg
not
or
adc
or
xchg
push
dec
pop
xchg
bound
or
or
ins
xchg
inc
jne
cs
jmp
sub
xor
and
jecxz
mov
ret
daa
jg
xchg
jo
lods
adc
jae
mov
ret
xchg
add
pop
daa
or
mov
iret
inc
inc
sbb
das
cmps
xor
mov
jo
cmp
out
mov
cmps
out
pop
ins
xchg
stos
and
or
test
xchg
cwde
mov
les
xchg
push
out
mov
dec
sbb
jl
iret
pop
sbb
loope
xchg
xchg
ins
inc
xor
xchg
mov
adc
cmp
cmp
ror
push
add
sub
mov
test
movs
std
jno
jns
jge
xchg
das
nop
test
mov
scas
aam
push
cmp
nop
jecxz
rol
mov
(bad)
xchg
fst
mov
jecxz
mov
mov
in
push
rcr
or
adc
in
icebp
jbe
mov
or
xchg
dec
push
push
xchg
add
jb
nop
test
inc
xchg
add
aam
fldenv
int
sbb
stos
inc
int
scas
jne
mov
jmp
jge
es
pusha
test
mov
mov
jnp
xchg
rcl
xchg
jg
mov
mov
repz
pusha
or
mov
cmps
inc
pushf
lock
xchg
mov
dec
dec
dec
jo
fwait
pop
out
sub
inc
gs
pop
cmp
rcr
xchg
mov
jge
xchg
std
into
cmps
mov
inc
lods
aaa
mov
xchg
aas
lahf
jecxz
rcl
stos
add
xchg
(bad)
daa
mov
push
xchg
cmps
push
ss
add
repz
out
dec
stc
nop
movs
psubsw
imul
lock
xchg
push
(bad)
retf
in
mov
jnp
ror
dec
arpl
xor
push
ret
lds
stos
adc
mov
push
xchg
jmp
aaa
adc
out
iret
(bad)
jge
cmp
push
cmp
mov
adc
pop
jge
sub
hlt
sbb
xchg
mov
pop
rcl
ret
lock
mov
cli
xchg
enter
cmc
pop
js
add
hlt
dec
stos
adc
xor
mov
mov
push
jno
popa
icebp
je
ins
mov
fst
jns
xchg
push
add
xlat
int
pop
xchg
push
jge
in
mov
xchg
lea
add
xchg
sti
lock
push
push
div
mov
pusha
and
sahf
mov
int3
les
icebp
xchg
mov
mov
jmp
jecxz
pop
icebp
xchg
mov
fwait
cmc
mov
and
test
adc
or
stc
fwait
xchg
ss
aas
jmp
test
add
call
cdq
xchg
pop
imul
push
or
sub
ds
add
pop
mov
pop
scas
xor
mov
cmp
dec
out
lahf
mov
mov
add
stos
mov
cld
mov
popf
aam
jno
scas
repz
lods
mov
lock
xor
fcom
add
inc
into
sbb
xchg
shr
pop
cwde
aad
inc
pop
sbb
rcl
inc
push
mov
xchg
push
xor
pop
adc
xchg
dec
in
sub
xchg
inc
test
cmps
sar
push
push
rcl
sub
dec
xchg
mov
mov
push
xchg
xor
(bad)
jmp
mov
dec
cmp
outs
inc
cmps
in
or
sub
dec
xchg
mov
pop
add
xchg
test
aam
lods
push
lea
popa
cdq
je
mov
push
mov
and
movs
out
xchg
imul
add
sub
test
inc
stos
sub
mov
mov
push
addr16
jle
(bad)
sub
popf
imul
mov
hlt
daa
icebp
dec
xchg
push
test
movs
mov
sub
aas
std
data16
cmps
push
mov
daa
push
ins
mov
test
je
shl
or
popf
neg
inc
mov
and
jle
dec
xchg
sbb
xchg
addr16
call
adc
(bad)
jnp
adc
aas
xchg
or
sti
cmp
mov
jmp
daa
cmp
fldcw
sub
dec
mov
movs
jo
adc
mov
(bad)
and
xchg
pushf
int3
aas
cmp
fs
jo
xchg
add
ja
or
mov
fwait
sahf
xlat
ror
call
scas
xchg
dec
(bad)
mov
xor
sbb
mov
push
mov
inc
stos
mov
push
pusha
loop
cwde
and
xchg
daa
cmp
sbb
and
cmp
sbb
test
xchg
scas
jmp
mov
xor
in
jmp
mov
pop
sbb
and
adc
pushf
xchg
push
pop
call
sbb
pop
dec
popa
dec
adc
xor
pusha
(bad)
rol
aas
out
mov
dec
hlt
mov
mov
fisub
jecxz
inc
rcl
and
mov
ds
adc
push
or
xchg
and
iret
mov
js
cdq
mov
fist
push
aad
fldenv
jae
xchg
or
dec
sub
js
mov
and
sbb
push
xchg
popf
sbb
mov
mov
pop
sete
into
lds
iret
test
iret
cld
adc
sbb
mov
lds
mov
inc
jmp
jecxz
mov
hlt
mov
pop
add
dec
xchg
xchg
cmp
push
jbe
sbb
ja
push
loopne
sti
mov
cwde
pop
sbb
xor
cmc
jp
adc
sbb
xchg
ins
inc
push
mov
dec
and
cmp
pop
ror
adc
push
xchg
push
(bad)
es
sub
fwait
adc
vmovntps
pop
int
adc
push
xchg
mov
mov
aas
xchg
fsub
gs
mov
xchg
push
lock
push
adc
(bad)
ds
xchg
add
dec
xchg
mov
mov
xor
xchg
dec
aaa
mov
movs
mov
(bad)
xchg
sbb
in
cli
sub
in
lahf
enter
jb
lock
outs
pusha
add
xchg
dec
jg
push
pop
pop
cdq
xor
push
jno
fdiv
loop
ror
sbb
push
mov
sbb
adc
xchg
dec
hlt
stc
jno
cwde
and
xchg
xchg
dec
pop
stos
push
xor
call
or
xchg
mov
cwde
in
adc
mov
xchg
and
imul
jg
jbe
and
and
cld
jb
inc
xchg
arpl
mov
out
mov
jae
popf
retf
sbb
mov
je
xchg
jl
repnz
jae
movs
sub
dec
ret
inc
mov
(bad)
adc
cmp
inc
add
loope
icebp
adc
xchg
xor
enter
pop
movs
ret
icebp
aam
retf
xor
xor
xchg
fsubr
sub
mov
xchg
and
mov
rol
fidivr
pusha
push
xchg
cli
xchg
mov
add
jno
cdq
mov
sbb
sti
jae
and
inc
xchg
xor
aam
or
icebp
in
adc
push
pop
ja
loopne
inc
cdq
inc
jl
mov
dec
xor
cld
je
jge
dec
aam
sbb
xchg
cld
dec
mov
mov
xchg
mov
shr
movs
jl
and
loopne
pop
icebp
pop
in
retf
in
test
adc
sub
outs
cmc
or
and
jmp
inc
pop
xchg
and
xor
mov
shl
adc
(bad)
shr
mov
push
push
xor
add
and
pop
cmps
xchg
shl
or
jg
and
int3
jne
lods
and
xchg
sub
pop
stos
fild
arpl
dec
xchg
pop
pop
(bad)
cdq
(bad)
xor
xchg
xchg
xlat
mov
dec
inc
lahf
push
fdivp
mov
mov
add
push
mov
ja
or
pop
je
out
das
xchg
inc
retf
aad
fwait
sbb
inc
fsubr
cdq
cmovg
es
mov
jle
xor
cld
ins
out
xchg
xcrypt-cbc
cmps
push
adc
hlt
fwait
sub
rol
jmp
std
mov
test
xlat
and
sbb
or
in
popa
push
clc
ja
mov
mov
push
sti
mov
jo
mov
nop
cs
adc
inc
mov
mov
push
pop
out
xor
jo
aad
push
clc
call
test
fs
and
xor
sub
pop
pusha
cmp
mov
xchg
sub
stos
pop
sub
addr16
jmp
mov
add
xchg
xchg
cld
(bad)
cmp
in
iret
ins
xchg
call
mov
push
xor
lods
dec
stc
push
xchg
lds
xchg
and
inc
cmp
std
or
lea
pop
push
jl
fadd
xchg
add
inc
cmp
mov
sahf
je
call
test
ds
(bad)
aad
cmp
loope
xchg
test
pushf
js
mov
mov
fidivr
lea
mov
mov
sbb
data16
cmps
push
out
pop
pop
xor
cli
pop
enter
cld
or
push
mov
lods
shl
mov
or
in
lods
mov
cld
imul
fcom
cmc
stos
lea
jge
pop
and
cmps
ret
ds
push
jmp
mov
call
fdivr
fist
push
scas
pop
lea
cdq
inc
sbb
adc
mov
ret
daa
pop
jmp
and
sub
push
add
jl
rol
in
adc
xchg
jle
mov
or
adc
and
inc
ror
(bad)
or
and
inc
jnp
sub
jno
add
mov
pop
or
stc
mov
dec
sub
mov
lea
mov
sbb
jge
test
sahf
hlt
jl
out
mov
jmp
popf
jge
mov
pop
add
mov
mov
pusha
xchg
xchg
jo
les
xor
pop
jle
push
jecxz
cmp
xchg
imul
pop
mov
mov
aam
jae
(bad)
loope
pop
mov
xor
adc
xchg
add
jp
sahf
mov
ret
xchg
lods
pop
das
mov
imul
xchg
movs
(bad)
push
inc
enter
call
xor
pop
mov
dec
jmp
adc
aaa
(bad)
xchg
add
adc
fwait
push
push
fwait
stos
rcr
push
xchg
aam
ss
fiadd
std
and
adc
int
scas
xchg
push
in
(bad)
cld
jmp
xchg
rol
popf
push
aam
cs
daa
xchg
sahf
sbb
mov
lahf
fwait
test
inc
ins
pop
les
imul
rcr
gs
call
xchg
jmp
icebp
mov
test
adc
test
pop
sbb
test
pop
sbb
pop
and
ss
nop
jle
(bad)
xchg
mov
in
xchg
xchg
xor
xchg
(bad)
xchg
fs
clc
fcomip
mov
pop
and
push
cdq
fwait
jnp
call
aas
movs
jo
popf
lahf
ficomp
and
aaa
in
mov
jle
dec
sbb
dec
int3
adc
push
xchg
enter
jmp
xor
push
out
xchg
les
pop
ins
and
jmp
jb
retf
xchg
adc
and
xchg
sbb
ds
push
adc
xchg
rcr
outs
and
pop
and
sbb
ja
nop
repnz
add
ss
adc
sub
mov
inc
aaa
or
inc
movs
dec
dec
out
push
mov
jle
jecxz
outs
shl
sub
jp
or
cmps
ja
ins
movs
mov
js
shl
adc
idiv
xlat
nop
call
adc
enter
push
add
dec
(bad)
jmp
lahf
xchg
mov
scas
ins
pusha
hlt
inc
sub
inc
das
sar
adc
mov
xchg
or
jg
(bad)
(bad)
hlt
ja
repnz
stc
jbe
(bad)
and
mov
mov
lahf
cmp
cmp
or
xchg
mov
dec
pop
sbb
push
cs
dec
sub
fstp
mov
movs
int
mov
fsubp
sub
aam
mov
xchg
or
jnp
and
sub
xchg
xlat
popf
adc
mov
xor
jae
sub
cmp
fmul
cwde
jle
in
xchg
hlt
out
sti
ret
push
xchg
aaa
daa
xor
inc
sbb
pop
nop
cmps
xor
xchg
pop
in
in
mov
dec
jecxz
jp
and
out
push
and
in
shl
push
ja
jmp
stos
xor
paddw
aam
and
icebp
dec
int
xor
mov
adc
add
jmp
sub
xor
test
into
fcomp
xor
and
rcr
push
enter
fwait
dec
stos
in
add
xchg
jnp
xchg
and
xlat
out
xchg
add
iret
jmp
pop
mov
mov
fcom
sbb
jge
and
je
lods
lahf
add
movs
jl
aaa
push
sbb
cs
hlt
(bad)
mov
sar
ret
bound
push
pop
and
push
rol
adc
mov
cmps
sub
sbb
push
jno
and
sbb
repnz
pop
out
push
jle
fimul
xor
mov
dec
jl
cmp
xchg
mov
dec
pop
retf
pop
test
fbstp
pop
sti
push
push
or
nop
cs
pop
hlt
mov
dec
std
(bad)
cli
and
lea
dec
das
ds
in
mov
ficom
(bad)
mov
push
les
fst
gs
adc
xchg
aad
fcomp
pushf
jns
or
test
movs
inc
jecxz
xchg
fidivr
sbb
loop
sbb
and
and
or
jno
push
sahf
dec
pop
and
rcr
jns
xchg
pop
or
inc
jl
sbb
and
call
push
pushw
rcr
sbb
jg
cmp
cmp
sub
pop
pop
adc
jae
shr
xor
cmps
and
sahf
and
pop
lods
sbb
or
pushf
iret
mov
hlt
cld
fdiv
mov
ror
imul
popf
or
retf
push
sub
xor
jl
in
cmp
fwait
mov
hlt
and
cwde
inc
in
mov
in
push
fnstenv
lods
test
gs
jb
xchg
mov
adc
push
mov
pop
jno
pushf
xchg
xchg
stos
and
adc
and
neg
gs
cmp
xor
sub
sbb
int3
add
dec
cmp
mov
add
xchg
ss
or
cmp
xchg
mov
ret
mov
sbb
cmp
daa
pop
(bad)
mov
xchg
mov
retf
or
movs
jmp
cmps
cmp
dec
push
stos
sub
fs
js
jb
xor
xor
test
dec
out
(bad)
aas
int3
fnstenv
sbb
push
or
push
lahf
cmp
neg
xor
add
ins
loopne
nop
cdq
sahf
sub
ret
les
mov
and
fist
leave
mov
arpl
jae
and
mov
pushf
mov
in
movs
shl
out
sub
sbb
lods
cmps
outs
inc
sbb
out
xchg
arpl
mov
xchg
hlt
(bad)
and
les
mov
jecxz
and
mov
inc
xchg
int
pop
ins
outs
adc
retf
int3
ss
push
mov
leave
mov
not
aas
addr16
push
lock
mov
aam
push
lea
or
mov
add
or
dec
xchg
mov
xchg
(bad)
push
sub
xchg
pop
xchg
jmp
popf
and
xchg
mov
mov
div
or
ja
xchg
xlat
leave
xor
sub
call
add
push
fimul
(bad)
sub
xchg
add
fimul
and
mov
xor
clc
xchg
and
jecxz
xchg
mov
outs
(bad)
mov
shr
sbb
cwde
je
xchg
jg
hlt
pushf
das
jbe
imul
pop
int
and
xchg
push
push
out
test
push
push
test
ror
mov
jne
xor
jnp
dec
cdq
cmps
aas
mov
ds
mov
iret
mov
test
popf
jmp
dec
sbb
es
cmp
test
call
int
daa
in
pop
addr16
and
in
mov
cwde
dec
xchg
dec
push
mov
mov
pop
cli
jmp
int
mov
addr16
hlt
cld
and
mov
cdq
mov
add
dec
jno
or
lahf
es
cmps
xchg
movs
sbb
add
cmc
loope
jge
pop
cmps
jmp
(bad)
mov
mov
dec
rol
sub
inc
test
test
pop
push
or
repz
push
movs
push
mov
hlt
jge
or
movs
(bad)
aad
out
push
jle
in
popf
imul
rcr
and
xor
inc
fild
and
jp
lods
test
inc
mov
jmp
cld
cmp
bound
dec
pop
jne
adc
add
jmp
mov
sbb
mov
dec
enter
xchg
imul
repnz
int
push
lea
pop
(bad)
mov
out
(bad)
aaa
mov
test
mov
add
inc
or
mov
jge
call
xor
push
jge
popf
push
test
jnp
cwde
cwde
push
lods
adc
or
lahf
sbb
repnz
cli
cli
scas
jge
push
imul
jl
icebp
nop
sar
cmp
add
outs
add
add
scas
xchg
leave
and
sbb
pop
pop
jmp
or
not
adc
jecxz
cmovle
xchg
mov
cld
mov
out
(bad)
(bad)
xchg
hlt
call
push
scas
mov
adc
mov
std
test
add
lea
je
adc
dec
(bad)
addr16
xchg
xchg
add
rol
mov
or
cmps
pop
mov
adc
mov
push
test
sub
push
loop
nop
push
and
jecxz
xchg
mov
add
jns
stos
mov
mov
jp
add
push
out
rcl
xlat
sbb
pop
cmc
test
enter
inc
jp
mov
mov
or
ficom
push
mov
repnz
hlt
out
mov
inc
xor
xchg
jg
adc
std
mov
rcl
adc
mov
(bad)
scas
int3
lds
je
pop
xchg
lods
(bad)
mov
(bad)
cmc
jo
sbb
push
adc
dec
pushf
(bad)
jne
add
xor
fcmovnbe
or
xchg
dec
mov
bound
and
add
sar
xchg
or
and
pop
ins
mov
sbb
std
jmp
shr
push
dec
xchg
pusha
out
gs
test
xchg
pop
jmp
push
xchg
icebp
cmp
das
jae
cs
jl
inc
gs
push
xchg
cmc
stc
xor
fwait
xchg
sar
and
and
daa
mov
mov
retf
mov
call
je
cmp
int
adc
jae
adc
je
cmp
add
das
and
das
int
lods
(bad)
(bad)
into
ret
xchg
sub
pusha
call
push
dec
mov
xor
outs
add
xchg
lds
nop
sar
imul
inc
pop
xchg
je
lods
loopne
jmp
dec
xchg
test
dec
lea
pop
cmp
fistp
loopne
stc
xchg
jnp
and
int3
pusha
add
xchg
dec
mov
sbb
xchg
jmp
xchg
push
mov
pop
test
dec
in
xchg
repnz
mov
xchg
cwde
and
push
fiadd
lds
xor
test
sti
dec
cmc
mov
nop
dec
xchg
stos
ret
fs
inc
xchg
cmp
je
xchg
push
repz
je
mov
inc
mov
dec
lahf
mov
ins
popf
jecxz
cmp
sbb
(bad)
cmp
push
fldenv
cdq
pop
into
add
push
inc
adc
mov
jo
stc
xor
test
sahf
rcl
lock
adc
out
lods
hlt
jmp
aad
mov
cdq
ret
adc
jge
mov
sbb
mul
cs
cli
movs
ins
mov
push
xchg
xchg
shr
iret
xchg
sbb
dec
pop
pushf
inc
jl
inc
push
add
push
xchg
retf
mov
ins
xchg
outs
ror
cwde
mov
inc
jbe
data16
xchg
sub
inc
mov
jl
lahf
or
std
push
dec
mov
hlt
sbb
jb
nop
jmp
fcom
sbb
out
cwde
pop
jge
fidivr
cmp
push
jl
and
pop
or
or
jmp
pop
push
aam
push
into
lods
jl
jp
pop
jmp
js
and
icebp
cld
dec
bnd
sar
pop
pop
nop
loope
mov
lock
dec
dec
pop
jbe
pop
iret
mov
and
cli
mov
mov
dec
dec
dec
je
addr16
cli
adc
xor
mov
jmp
and
push
in
mov
(bad)
xrelease
call
movs
stos
cmps
jmp
aas
xchg
(bad)
jp
pop
das
adc
xor
jbe
mov
popf
mov
jns
xlat
mov
inc
mov
sahf
lea
imul
push
adc
test
and
and
mov
int
inc
ja
mov
in
jl
ins
fisubr
stos
inc
ins
popf
xor
iret
inc
(bad)
sbb
xchg
sub
jl
pop
and
(bad)
gs
sbb
test
inc
test
mov
(bad)
retf
inc
loop
repz
mov
inc
mov
cwde
test
sub
test
fsub
mov
mov
in
ret
pop
mov
xchg
mov
jmp
call
nop
pop
repnz
sub
mov
jg
push
ds
arpl
push
mov
xchg
stc
cmp
test
and
xchg
mov
hlt
mov
dec
cwde
add
adc
add
(bad)
and
jno
fcom
leave
in
or
mov
push
ins
cmp
sbb
ins
outs
ja
ret
xchg
push
sub
(bad)
repnz
sar
adc
jge
xchg
lock
and
mov
cmp
int
push
or
mov
jo
cld
addr16
fsubr
pusha
push
jbe
push
sbb
outs
push
out
sbb
jge
retf
aas
pop
out
ins
mov
loop
fs
jbe
pop
mov
fwait
sub
jp
call
into
mov
or
lahf
sub
sub
icebp
nop
or
mov
dec
add
adc
fnstsw
mov
nop
mov
xor
xor
xchg
push
push
jge
and
clc
mov
jo
aam
cmp
inc
call
cmp
or
neg
stos
dec
sbb
cdq
cmp
ds
push
inc
ins
movs
(bad)
jnp
push
fdiv
or
xchg
push
and
ins
push
cmp
es
add
fwait
mov
rcl
xchg
dec
das
(bad)
int
mov
icebp
in
(bad)
adc
test
cli
mov
in
xor
mov
repnz
fstp
and
(bad)
dec
xchg
call
(bad)
pushf
scas
xchg
rol
lahf
bound
int3
mov
adc
ret
mov
or
movs
dec
fwait
mov
cdq
xor
movs
mov
retf
pop
jae
xchg
jmp
xor
pop
mov
and
fwait
popa
sub
jl
push
mov
xchg
sbb
fs
cdq
les
push
fwait
pop
xchg
dec
push
adc
loop
add
popf
add
std
mov
xchg
xchg
xchg
js
jp
mov
scas
rcr
jg
out
lock
and
out
pop
rol
iret
mov
dec
or
cmp
cwde
aam
and
xchg
push
mov
and
(bad)
lods
sub
xchg
scas
test
or
loope
xchg
adc
push
jecxz
xor
stc
cld
xor
mov
jmp
adc
or
repnz
out
fs
not
mov
or
xchg
mov
sti
fdivr
fwait
outs
or
mov
idiv
cmc
fwait
test
stos
dec
in
aaa
cmp
pop
xchg
push
(bad)
pop
mov
or
cdq
sbb
aad
add
mov
mov
ret
retf
aam
outs
xchg
push
dec
das
pushf
mov
lods
test
xor
movs
fwait
retf
sbb
push
xchg
jmp
dec
int
mov
adc
cmp
jl
pushf
ret
xchg
mov
add
xchg
adc
sub
iret
or
push
mov
pop
adc
jns
inc
adc
mov
mov
fidiv
cmps
(bad)
inc
ja
adc
or
retf
xchg
ficom
std
cld
fnstenv
sbb
fwait
xor
or
fcomip
mov
adc
aad
aam
in
sar
cmps
test
mov
es
inc
arpl
xor
push
inc
inc
pop
jo
or
cmp
pusha
ret
add
mov
loop
push
scas
movs
cmp
xchg
and
and
add
inc
pop
test
mov
repnz
retf
(bad)
adc
xchg
je
and
add
int
cmc
inc
mov
push
xchg
mov
pop
(bad)
pop
pop
xchg
xchg
repz
jmp
jnp
arpl
or
aam
xor
ficomp
mov
(bad)
call
pop
aas
lods
xchg
rcl
pop
hlt
mov
mov
mov
jle
xchg
dec
shl
test
scas
jecxz
loopne
sete
cli
out
mul
cld
dec
mov
popf
push
jmp
xchg
call
(bad)
cmc
sbb
loop
lea
leave
repz
fdiv
sbb
shr
pushf
test
xor
and
nop
lds
push
mov
xor
lods
mov
leave
lahf
pusha
xor
push
mov
cld
shl
scas
push
test
cmp
jmp
cmp
xor
jns
clc
xchg
mov
(bad)
in
push
inc
cmp
int3
pop
lock
leave
sub
(bad)
clc
rol
mov
xchg
sub
pushf
and
sbb
lahf
adc
repnz
pop
mov
or
(bad)
cmp
in
into
mov
xchg
add
pop
in
hlt
aas
xor
jne
out
sti
or
sub
data16
or
or
pop
out
xor
xchg
cld
sub
jge
aaa
xchg
mov
pusha
das
lahf
mov
js
cli
js
mov
mov
add
icebp
not
xchg
adc
inc
dec
pop
or
fdiv
fist
arpl
jbe
imul
adc
adc
dec
loopne
xor
rcr
cwde
inc
retf
xchg
aaa
mov
mov
xor
dec
cmps
lock
lods
inc
xchg
push
dec
sbb
jg
cld
fs
mov
test
outs
enter
mov
push
push
add
movzx
xor
dec
cdq
xchg
(bad)
sar
std
inc
in
fbstp
xor
dec
test
mov
xchg
mov
or
std
imul
mov
cmp
lock
mov
loopne
out
lahf
xor
mov
dec
sbb
push
aaa
shr
sahf
xchg
mov
dec
adc
inc
call
leave
dec
add
push
cld
popa
push
stc
push
inc
out
add
xlat
mov
xor
inc
(bad)
jne
scas
mov
xchg
stos
xchg
dec
(bad)
jmp
hlt
sahf
outs
fwait
push
or
movs
adc
xchg
icebp
std
shr
dec
sub
lds
jno
popf
add
mov
scas
push
sbb
mov
lods
(bad)
xchg
add
pushf
cdq
cld
mov
xor
jmp
popf
cmps
dec
add
xchg
stc
or
test
fwait
push
je
mov
call
or
into
xchg
push
lock
popa
imul
dec
adc
pop
movs
and
rcl
lock
adc
ins
push
and
hlt
sar
test
stos
jg
pop
in
fs
xchg
inc
std
lods
cdq
sub
popa
push
xchg
xchg
xchg
cmps
dec
xlat
jns
add
call
xchg
add
push
mov
out
mov
xchg
push
mov
or
jecxz
cmp
test
arpl
sub
add
cmp
inc
jns
pop
pusha
inc
or
xchg
dec
add
jg
mov
cmp
xchg
movs
sub
sbb
(bad)
and
push
aam
(bad)
int3
jmp
jbe
xor
gs
and
mov
movs
xchg
aam
ja
inc
jp
xchg
and
mov
jle
jl
xor
(bad)
loope
icebp
fst
adc
stc
outs
or
loop
jb
push
ror
pop
xchg
pop
les
sub
jmp
jo
ret
push
loopne
mov
fsub
test
pop
mov
(bad)
sub
(bad)
in
and
push
mov
adc
cmp
adc
fwait
sub
adc
or
rcr
sbb
call
lods
cmps
push
pop
rol
dec
and
aam
into
adc
pop
jae
rcl
not
es
push
outs
xchg
mov
mov
xchg
mov
adc
stos
sbb
lock
jnp
cli
inc
cmp
and
pop
sub
cmps
into
xor
popa
pop
push
das
mov
xchg
cmps
inc
and
xor
out
pushf
test
xor
test
pop
xchg
popf
(bad)
out
xchg
xchg
mov
mov
push
aam
iret
(bad)
mov
stos
inc
push
ret
mov
or
cmc
bound
xchg
xchg
cmp
call
nop
mov
cdq
cs
ins
mov
or
push
rcl
addr16
mov
imul
xchg
lea
dec
aad
jne
(bad)
pop
mov
retf
scas
arpl
adc
mov
sub
sar
jne
mov
xchg
jb
sub
pop
xchg
jmp
and
sub
mov
add
cmps
nop
adc
pop
loopne
push
push
(bad)
data16
shl
rol
adc
inc
adc
jl
fwait
or
fwait
push
add
popf
mov
int3
sbb
sub
xchg
es
mov
adc
lahf
cmp
jae
ins
xchg
xor
cdq
in
mov
xchg
cmc
jno
in
das
enter
xchg
ror
adc
mov
xor
fsin
xchg
(bad)
xchg
es
xor
pop
std
xchg
cmc
stos
xchg
repnz
adc
fcom
cdq
and
xchg
or
nop
jmp
push
(bad)
sti
bt
and
xor
int
mov
jmp
lea
push
aam
sbb
xchg
fistp
int
and
dec
dec
cmc
out
xchg
mov
dec
and
push
mov
mov
push
imul
ror
ins
push
jle
mov
xor
add
mov
xchg
es
outs
addr16
popf
jecxz
mov
xchg
mov
mov
aam
sbb
mov
lahf
pop
adc
icebp
adc
xchg
jg
js
and
cdq
and
xor
xchg
push
test
ja
js
sub
(bad)
in
mov
adc
stc
test
add
sub
cmp
int3
push
jo
rol
movs
ror
pop
mov
cld
out
fs
inc
int3
ficom
fidiv
jl
xchg
dec
xlat
mov
mov
mov
xchg
repz
pushf
jl
sbb
mov
mov
push
jmp
lea
lahf
pop
icebp
add
daa
lods
lods
scas
dec
mov
pop
das
mov
cmc
xchg
fldenv
add
mov
mov
push
sub
popa
cld
mov
mov
je
jns
loop
xchg
aas
and
or
pop
adc
cs
jb
pop
fist
cwde
xchg
xchg
xchg
adc
cld
mov
dec
cmps
lock
and
repz
xchg
jne
mov
stc
ret
sub
test
cmp
es
xchg
inc
sbb
add
aad
(bad)
adc
jl
xchg
mov
and
push
sub
mov
inc
cmp
xchg
adc
mov
xchg
out
aam
dec
push
sbb
(bad)
and
mov
cmps
lods
cld
mov
and
sbb
aad
mov
lock
jmp
pusha
outs
lock
daa
shl
sbb
dec
fsubr
outs
mov
or
jne
xchg
clc
mov
sahf
hlt
out
xchg
xchg
in
xlat
cmp
shl
jecxz
enter
stos
mov
xchg
jg
fdivp
ror
jbe
xchg
cmp
ds
xchg
lods
xor
cmp
mov
fwait
add
cwde
and
iret
rcl
push
dec
fs
iret
push
mov
inc
push
je
ds
pop
repnz
mov
push
rcl
xchg
inc
xchg
jno
mov
or
stc
xchg
mov
out
fst
mov
add
adc
mov
dec
adc
test
stc
add
mov
into
adc
adc
pop
lods
aas
(bad)
jp
pop
push
sets
jg
mov
sub
sub
inc
je
pop
call
sbb
pusha
xchg
dec
xchg
inc
lahf
mov
add
sbb
popa
movs
bound
sub
sahf
xchg
push
pop
aam
stc
(bad)
hlt
sub
cmp
nop
retf
dec
not
jp
mov
inc
mov
lods
add
pop
jg
inc
jb
xlat
add
bound
clc
jle
pop
stc
mov
or
addr16
xchg
push
pop
adc
add
mov
xor
adc
pop
test
xor
jp
xchg
es
add
in
dec
or
bound
inc
jg
jp
xchg
(bad)
pop
cs
or
nop
dec
stc
rcl
retf
mov
(bad)
mov
adc
les
loopne
(bad)
ret
fisub
sub
cmps
jge
xor
out
cwde
push
add
stos
inc
sub
xor
xchg
push
xchg
in
cld
push
imul
imul
and
push
adc
pop
push
lods
xchg
jmp
xchg
jo
jbe
out
adc
pushf
jnp
jge
clc
inc
mov
inc
imul
adc
movs
jecxz
mov
les
or
mov
adc
movs
inc
jo
(bad)
js
stc
push
(bad)
sbb
pop
jmp
lea
inc
lahf
repz
movs
adc
cmp
inc
jo
pop
loope
push
mov
cmp
sub
sub
pop
cld
jns
or
adc
and
jbe
sbb
xchg
xor
aaa
je
aam
(bad)
out
mov
pop
(bad)
nop
mov
mov
movs
mov
int3
cld
jmp
lods
cmps
fs
and
es
test
(bad)
aad
add
push
fwait
shl
inc
xchg
or
mov
dec
dec
imul
sbb
ss
dec
xor
je
add
ficom
sbb
dec
pop
sbb
repz
push
mov
mov
call
or
sbb
dec
dec
push
shl
jo
jge
test
cmp
xchg
pop
pop
in
jge
test
inc
repnz
shr
cmp
sub
fstp
sbb
lahf
aad
mov
dec
lods
mov
in
mov
fsubr
add
int
mov
cdq
mov
pop
sbb
jnp
fwait
push
inc
and
mov
js
push
mov
outs
xchg
cld
pop
mov
sbb
call
ret
jge
rcr
test
ins
lahf
mov
out
aad
push
mov
ds
jl
(bad)
xchg
or
cld
hlt
mov
cmp
or
jno
cli
sbb
xchg
mov
mov
stos
adc
fwait
les
add
jbe
not
sbb
fwait
cs
or
aam
jmp
dec
pop
nop
mov
mov
xchg
xchg
inc
fwait
call
inc
push
sub
add
hlt
xchg
dec
lea
fist
inc
pop
jmp
in
shr
scas
ret
fadd
xchg
mov
test
add
lea
add
inc
mov
(bad)
jg
jl
popf
cli
sbb
test
ja
dec
xchg
jmp
xchg
jb
or
fidiv
jg
xchg
sub
cmp
inc
enter
push
mov
js
pop
movs
jb
in
xchg
dec
test
adc
test
fwait
out
clc
dec
push
shl
into
mov
xor
jnp
jb
(bad)
jecxz
fwait
sbb
jp
(bad)
mov
pop
mov
sbb
in
jecxz
iret
adc
push
loope
aam
loopne
(bad)
dec
fdiv
ins
xchg
dec
mov
sbb
iret
cli
es
xchg
ret
outs
mov
in
cmc
mov
xor
or
jne
mov
cmp
dec
fdivr
cmp
outs
es
adc
out
mov
xchg
jmp
mov
pushf
mov
xchg
(bad)
adc
push
and
aad
mov
mov
mov
pop
push
mov
xor
push
sub
push
jmp
rcl
das
push
(bad)
sti
das
aam
pop
adc
ret
sub
xchg
sub
gs
retf
lock
or
push
out
cdq
xchg
push
hlt
push
pop
push
xchg
je
stos
cwde
sbb
lahf
(bad)
mov
lods
mov
cmp
xor
(bad)
in
cmp
xor
lods
pushf
loop
and
in
mov
mov
push
ret
dec
retf
fisttp
dec
(bad)
push
loopne
jmp
fisttp
pop
not
adc
leave
sahf
lds
je
mov
pushf
pop
cmp
aad
cmp
cmp
call
fcmovnbe
out
ror
das
inc
and
cli
mov
fadd
cmp
pop
sub
repnz
mov
jne
test
pop
mov
mov
stos
xor
xchg
dec
adc
inc
or
adc
jns
jecxz
outs
push
xchg
frstor
mov
mov
rcl
std
dec
mov
leave
ds
popf
call
xchg
push
(bad)
pop
push
and
fisub
mov
leave
int3
pop
repnz
jl
fsubr
ret
cwde
xchg
daa
imul
arpl
xchg
int
fwait
adc
xchg
push
cmps
xchg
mov
push
cmp
out
sysret
dec
jno
call
xchg
popa
push
lahf
xor
xchg
ficom
stos
push
push
xor
xchg
(bad)
sub
xchg
sbb
in
jnp
das
cmp
xchg
mov
adc
push
mov
adc
jae
push
dec
into
and
hlt
mov
sbb
cmps
xchg
xor
xchg
test
pop
xchg
movs
popf
dec
loop
ja
cmps
adc
out
test
push
mov
adc
jmp
test
mov
pop
pop
xchg
out
pop
(bad)
iret
lds
fdiv
hlt
xchg
dec
jne
jl
sar
and
adc
lock
ins
call
nop
fisub
fcom
cmps
daa
inc
mov
xor
rcl
lahf
aaa
mov
cmp
enter
jb
xchg
inc
cmps
push
inc
ror
xchg
call
lock
jmp
ins
adc
lea
push
in
pop
enter
out
neg
aam
dec
inc
mov
dec
and
sbb
xchg
pop
inc
add
rcr
jne
pop
sub
push
jecxz
lods
mov
xor
clc
ds
xchg
mov
nop
jb
(bad)
push
or
jo
mov
cmp
test
mov
in
xchg
sahf
pusha
iret
jg
or
out
dec
sbb
xor
imul
jecxz
test
jb
adc
cmp
(bad)
sbb
adc
xor
mov
or
mov
xchg
pop
test
in
cmp
out
xor
jb
xchg
jns
xchg
mov
sub
xchg
cmps
jp
ret
not
push
popa
xchg
popf
hlt
mov
mov
lahf
or
push
inc
lds
xchg
dec
add
repz
shr
push
lods
(bad)
(bad)
leave
xchg
sub
sbb
test
fsubr
leave
xchg
icebp
add
daa
cmps
shr
mov
or
shr
lea
dec
dec
xor
adc
js
adc
ret
inc
adc
mov
mov
fs
mov
adc
cmps
push
shl
or
add
push
xchg
sbb
jle
daa
shr
and
inc
cmc
cli
fisub
popa
jecxz
(bad)
cdq
fstp
sbb
dec
jl
mov
and
jl
dec
pop
mov
ins
jnp
fisubr
data16
mov
mov
sbb
stos
push
push
push
pop
sbb
call
ja
pop
fcom
xor
gs
dec
out
xchg
pop
es
fwait
or
mov
push
xor
and
hlt
shr
ins
add
fcomp
popf
sub
nop
sbb
mov
jl
sub
out
data16
jge
mov
fld
(bad)
cli
mov
pop
loop
jl
cmp
je
into
out
jbe
call
pop
cmp
adc
pop
retf
inc
mov
jl
dec
stc
cld
and
push
div
jbe
pop
lahf
mov
xchg
xchg
xor
repz
(bad)
fwait
es
dec
fs
mov
fcomp
push
test
add
aam
push
imul
fs
xchg
lea
sub
xchg
sbb
arpl
int
js
mov
mov
fisub
ins
jmp
push
mov
scas
push
add
mov
out
stos
sub
hlt
les
xchg
adc
in
outs
pop
je
adc
retf
push
adc
out
clc
xor
(bad)
fcom
lds
retf
and
pusha
imul
jbe
mov
add
cmp
ss
inc
or
xchg
icebp
mov
inc
dec
div
(bad)
jne
loopne
mov
je
cmps
in
and
xchg
pop
mov
mov
cld
xlat
out
ins
test
test
jmp
adc
(bad)
iret
cdq
push
and
mov
popa
cmp
fisttp
imul
ja
mov
adc
or
add
dec
dec
inc
jmp
fwait
and
not
out
outs
xlat
xor
jp
xchg
call
and
retf
push
(bad)
stc
lahf
loope
sbb
xchg
adc
fisub
dec
int
adc
ja
das
xchg
mov
inc
sub
adc
push
outs
aam
cmps
mov
cmp
xor
xchg
shl
mov
sbb
adc
mov
xchg
scas
jecxz
mov
fwait
cmp
jp
fld
cmp
jbe
das
and
iret
mov
je
repz
ins
rcl
add
jbe
hlt
push
repz
jl
retf
(bad)
jo
jb
dec
inc
lods
xchg
adc
std
ja
pushf
sar
inc
call
mov
jl
lock
aam
sub
jp
rcl
std
fimul
cmps
add
inc
mov
fs
(bad)
movs
sbb
jb
add
pop
(bad)
not
cld
adc
hlt
(bad)
stos
arpl
sbb
pop
pop
xchg
cmp
pop
cmps
pop
xchg
lods
test
xchg
pop
icebp
and
movs
push
dec
je
loopne
mov
mov
sahf
and
fs
pop
xor
mov
inc
popf
loopne
cli
mov
xchg
mov
les
aam
xchg
and
xor
sub
jp
push
jae
lods
push
add
fs
dec
mov
mov
mov
clc
adc
pop
loopne
cmp
scas
in
mov
out
stos
inc
jmp
test
in
mov
xchg
inc
jle
dec
add
ins
jecxz
mov
fsub
add
movlps
push
imul
cld
add
xlat
jmp
cmp
adc
lds
not
je
mov
icebp
cmps
les
pop
xchg
adc
sub
xchg
call
iret
mov
adc
leave
xchg
js
xchg
sahf
daa
or
sbb
pop
mov
ret
xchg
pop
xor
repz
inc
push
xchg
xchg
cmp
xchg
sbb
pop
lods
aas
dec
lahf
(bad)
into
arpl
adc
cmovle
push
xchg
push
sbb
mov
push
mov
(bad)
jnp
repnz
mov
adc
leave
push
jle
cld
xchg
movs
icebp
add
xor
aas
loopne
jmp
ins
add
clc
ds
test
fwait
les
cmps
jns
les
xchg
ss
(bad)
sub
bound
or
pop
and
jmp
xchg
lea
mov
nop
not
leave
fwait
jmp
xchg
cmps
stos
xor
xchg
aam
cmp
mov
jge
(bad)
fadd
je
or
rcr
xchg
dec
clc
fnstsw
mov
nop
cmp
jmp
xchg
into
je
test
cmp
and
inc
ss
out
sar
movs
xchg
popf
pop
xor
push
dec
hlt
add
pop
xchg
adc
mov
pushf
mov
jge
aam
ins
repz
mov
inc
mov
hlt
mov
add
dec
leave
sar
scas
jae
jl
cwde
mov
shr
xchg
jecxz
loopne
jne
ret
jg
loopne
imul
push
mov
ins
sbb
or
adc
in
jge
(bad)
in
fiadd
mov
je
std
jne
hlt
cmps
call
jp
(bad)
jmp
push
adc
and
out
jne
xchg
mov
mov
fs
out
xchg
je
popf
ds
mov
xor
push
jo
aad
mov
add
(bad)
into
sub
pop
iret
sbb
mov
xchg
or
popa
test
mov
and
pop
mov
mov
retf
shl
sub
cmp
xor
dec
nop
popf
fdivr
push
mov
jae
fs
jno
lods
mov
jge
xchg
retf
mov
frndint
ficom
adc
mov
sahf
push
ds
hlt
mov
je
outs
cmp
pop
or
pcmpgtw
stos
daa
adc
xchg
push
out
into
push
(bad)
xchg
int
inc
es
lea
mov
sub
dec
js
(bad)
xchg
call
or
push
imul
dec
push
inc
rcl
mov
lahf
mov
pop
lea
inc
fs
adc
jl
jne
or
xchg
push
sbb
push
push
(bad)
fimul
loop
push
xor
test
cwde
cmps
or
into
inc
mov
xchg
xchg
test
mov
or
in
and
(bad)
fadd
sub
xchg
retf
xor
xchg
les
cmp
dec
ret
or
sbb
sbb
mov
xor
push
mov
je
rol
in
cmps
in
stc
adc
xchg
adc
mov
jge
dec
test
mov
ret
mov
xchg
int3
cmc
inc
std
(bad)
(bad)
adc
enter
lods
xchg
mov
leave
xchg
push
shl
fst
cld
arpl
ror
push
int
retf
test
xchg
mov
mov
imul
mov
jmp
and
mov
push
xchg
adc
jo
push
or
cmc
out
(bad)
loope
cmp
xchg
gs
xchg
daa
pushf
sub
in
sbb
mov
jmp
cmc
pop
aas
lahf
outs
fwait
pop
adc
mov
xchg
movs
rcr
mov
mov
imul
enter
std
and
and
not
popf
shr
jo
mov
js
xor
out
lods
inc
in
xchg
pop
mov
loopne
push
and
imul
xchg
aad
cwde
fld
push
and
cmp
xchg
scas
inc
(bad)
arpl
or
mov
and
xchg
loope
xchg
movs
adc
and
lods
xchg
outs
cmp
xchg
mov
dec
mov
jmp
push
pop
jno
iret
xchg
cmp
push
xchg
push
fsub
mov
shl
mov
adc
lods
mov
jo
in
es
hlt
scas
call
mov
test
stos
popa
in
or
xor
xchg
mov
jle
mov
push
daa
fsubr
push
xchg
(bad)
fisttp
jno
test
jnp
xchg
call
in
ins
je
lods
push
fst
daa
xchg
(bad)
rol
int
xchg
mov
fdiv
lods
(bad)
dec
int3
lds
push
xchg
xchg
adc
add
mov
mov
cmp
xchg
add
stc
test
pop
mov
cld
adc
lock
adc
mov
push
bound
inc
mov
aam
dec
mov
mov
and
mov
xor
mov
les
adc
ins
jle
xchg
mov
idiv
adc
dec
fld
xchg
or
stos
mov
mov
icebp
nop
push
mov
add
push
cwde
loop
mov
mov
and
push
shl
adc
retf
jb
xchg
jmp
gs
(bad)
iret
ret
xlat
jb
and
mov
mov
sbb
dec
daa
xchg
imul
(bad)
pop
cmp
mov
xchg
je
bound
mov
push
or
nop
leave
lods
pop
call
xchg
pop
test
ror
cli
pop
stos
test
inc
xchg
jmp
xchg
inc
test
out
jp
pop
xchg
add
dec
adc
xor
fwait
stos
or
or
xchg
jmp
adc
jo
imul
mov
jne
push
pop
and
or
in
out
pop
ja
pop
or
repnz
mov
ret
imul
movs
hlt
inc
adc
add
in
mov
xchg
fisttp
stos
add
xchg
xchg
cmp
in
pusha
les
neg
rcl
out
push
xchg
iret
leave
test
in
xchg
jae
pop
or
dec
push
inc
inc
stos
ret
jmp
mov
xor
addr16
in
rcl
les
das
pop
shl
rcl
push
add
jecxz
ins
fist
(bad)
cmps
mov
jae
xchg
xchg
mov
nop
mov
dec
mov
shl
ja
inc
xchg
daa
bound
cmp
mov
sub
rcl
push
cmp
lahf
and
sbb
mov
hlt
pushf
pop
das
xchg
out
popa
ret
cmp
imul
sbb
(bad)
(bad)
cmc
mov
cmp
scas
ret
add
xor
dec
test
inc
mov
gs
inc
fstp
dec
xchg
mov
mov
sbb
add
scas
push
jl
xchg
jb
out
pop
and
popa
lea
adc
popf
fwait
ret
mov
add
(bad)
in
imul
int
movs
mov
scas
les
and
mov
push
xor
dec
test
pushf
jb
hlt
push
hlt
pop
adc
cmps
adc
pop
retf
dec
mov
repz
or
hlt
xchg
movs
cmc
xchg
or
aaa
mov
sti
sbb
xor
xchg
(bad)
jmp
xchg
mov
jle
pop
js
shl
xrelease
dec
adc
xchg
retf
and
xchg
and
xchg
adc
sub
cld
ins
icebp
adc
xchg
mov
popa
jecxz
cmps
fistp
and
xchg
inc
add
mov
dec
inc
adc
fsub
adc
ret
add
add
pop
mov
xchg
xchg
fs
test
sbb
jg
and
cmp
aam
int3
popf
pusha
stos
aam
push
xor
and
adc
shl
adc
sbb
aam
jmp
aam
inc
es
sbb
stc
fild
mov
sub
out
in
scas
sbb
mov
in
lahf
sub
je
bound
jle
or
mov
jl
fst
in
push
jge
sahf
mov
jmp
shr
mov
inc
push
fist
into
xor
scas
mov
sbb
xor
in
jle
mul
mov
pushf
aas
sub
sub
cwde
pop
idiv
mov
popf
mov
add
cmp
or
loopne
outs
sbb
jl
push
pop
loop
out
cs
mov
sbb
inc
mov
repz
imul
test
mov
int3
cmps
jl
cmps
inc
sub
xchg
repnz
xchg
jno
sbb
xor
rcl
fsub
enter
loop
push
add
cwde
xchg
inc
int
xor
jmp
(bad)
cmp
(bad)
fidivr
or
sbb
fsubr
cmp
cwde
(bad)
xchg
or
sub
fldcw
xor
fst
cmp
inc
in
iret
int
jno
hlt
xchg
stc
sahf
or
push
cld
(bad)
pusha
cli
in
adc
leave
dec
sbb
xchg
xor
jnp
(bad)
les
pop
xchg
pop
cli
sbb
sbb
or
lods
push
xchg
imul
mov
xchg
xor
cmp
dec
mov
cmp
sub
sbb
das
lods
ror
jno
dec
pop
inc
push
test
call
pop
xor
jg
xchg
or
jb
jmp
ss
(bad)
icebp
xchg
je
jns
sbb
popf
jl
aam
jp
push
pusha
and
cli
push
pop
jnp
xchg
test
xor
lahf
call
xchg
cli
mov
inc
call
mov
hlt
movs
stc
pop
xchg
(bad)
mov
mov
xchg
aaa
cli
push
mov
sub
inc
add
or
xchg
jecxz
and
aam
(bad)
ret
xchg
ret
popf
fdiv
retf
cmp
mov
shl
popf
fwait
stc
lods
or
dec
add
sub
scas
loopne
inc
xchg
cmps
jmp
dec
xchg
sub
repnz
test
sub
push
sbb
sbb
xchg
retf
rol
clc
and
(bad)
pop
xchg
xchg
adc
ins
dec
xchg
dec
mov
cmp
sub
loope
mov
mov
inc
push
das
lods
ror
xor
cmp
test
call
pop
dec
dec
movs
jle
div
xchg
icebp
push
je
jns
push
mov
enter
jl
sbb
jp
push
aam
pop
dec
leave
in
test
outs
pop
adc
adc
cdq
add
fiadd
sbb
inc
mov
out
xchg
or
xchg
add
shl
mov
sub
lods
xchg
pop
xchg
or
in
scas
push
push
out
xchg
aam
fyl2xp1
jmp
fdivr
adc
mov
popf
iret
jmp
mov
xchg
or
and
scas
cli
aad
in
mov
fmul
xchg
out
in
xchg
in
xor
pop
xchg
sub
fistp
sbb
pushf
sbb
cmp
xchg
jns
mov
push
cmp
cmp
xchg
mov
aam
adc
es
push
aad
pop
mov
push
cmp
push
push
test
call
push
in
fisub
into
mov
and
icebp
hlt
je
jns
mov
cdq
jl
mov
inc
xchg
mov
dec
pop
lock
pushf
test
and
add
fsubrp
pop
fiadd
xchg
call
jl
js
jmp
inc
mov
aad
repz
xchg
aam
pop
mov
sub
mov
cld
cwde
mov
xor
test
aam
rcl
sbb
cmps
int
mov
xchg
xchg
xchg
sbb
ja
sub
in
iret
add
xchg
stc
cdq
or
popf
cld
call
jb
cwde
mov
aad
xchg
scas
adc
sbb
xchg
sub
pop
neg
xchg
sbb
rcr
cld
xchg
aad
rol
and
pusha
xchg
cmp
push
mov
jp
xchg
cmp
cmp
movs
xchg
loope
mov
in
inc
xchg
das
in
ror
adc
test
call
dec
xchg
pop
pminub
mov
xchg
into
gs
dec
push
icebp
push
je
and
mov
fcomp
push
and
nop
es
push
pop
xchg
inc
push
in
int
stos
adc
pushf
popf
pop
sub
xchg
mov
js
jmp
push
jo
mov
mov
inc
push
cli
repz
xchg
xchg
hlt
cld
or
sub
sub
movs
add
test
in
jmp
adc
xor
pop
xor
aad
xchg
push
jb
dec
ficom
adc
call
push
xchg
(bad)
fistp
and
jne
xchg
cmp
mov
cs
jbe
jp
xchg
jns
push
cmps
bound
fadd
call
fisubr
xchg
xchg
jge
add
inc
jg
mov
aad
aam
in
out
sbb
dec
jg
out
adc
xchg
dec
xchg
mov
loopne
xor
(bad)
jbe
popa
call
mov
add
mov
inc
dec
jo
add
repz
pop
cdq
xchg
pop
fwait
push
mov
aas
inc
fs
xchg
xchg
imul
lds
mov
xchg
push
add
xchg
xchg
rcr
mov
inc
adc
int
imul
mov
sbb
les
pop
lods
cmp
xor
dec
test
jo
xchg
mov
adc
xchg
pop
daa
cmp
push
sub
mov
cmp
xor
cmp
stos
out
xchg
jne
pop
test
pop
js
je
xchg
popa
repnz
adc
repz
mov
cmps
push
les
sahf
adc
std
sub
push
xchg
retf
fimul
or
xchg
test
scas
les
cvtps2pd
and
mov
mov
pop
mov
and
in
sbb
shl
cwde
jge
out
mov
cmp
sar
movs
div
inc
sbb
pop
mov
xchg
cld
push
lods
add
mov
lock
jge
jg
iret
xchg
xlat
mov
jmp
ror
xchg
inc
sti
cmp
xchg
fidivr
xor
jl
cmp
inc
xchg
pop
jo
mov
xchg
mov
jns
cmp
inc
xchg
bound
int3
mov
inc
outs
adc
and
call
arpl
imul
and
inc
dec
xchg
ds
enter
xchg
repnz
(bad)
xchg
push
stos
pop
outs
aaa
cmp
jno
jg
jmp
stos
repnz
je
imul
ret
fnsave
sbb
mov
into
movs
sub
and
mov
cmp
dec
es
sahf
or
cdq
jmp
xchg
adc
shl
jae
xchg
(bad)
xchg
ret
inc
jns
or
dec
dec
push
cmps
mov
mov
iret
mov
add
dec
inc
mov
inc
xchg
pop
pop
mov
pop
fbld
jle
adc
xchg
adc
sbb
dec
xchg
mov
lds
pop
rol
mov
jecxz
add
in
xchg
int
repz
sbb
sbb
je
ins
out
mov
out
out
xor
hlt
arpl
inc
dec
xor
iret
push
pop
test
adc
clts
sahf
arpl
xor
cmc
cmps
push
aaa
popa
xor
pop
add
js
and
or
and
xchg
fstp
mov
cs
mov
out
cld
daa
jg
jmp
xchg
adc
pop
add
popf
retf
loop
mov
sub
xchg
push
sub
les
mov
adc
xchg
push
xchg
xlat
mov
inc
sahf
outs
xor
dec
push
stos
int
mov
imul
xchg
adc
push
adc
popa
sahf
mov
jb
and
xlat
jnp
xchg
shl
xchg
movs
pop
(bad)
int3
repnz
cmp
scas
shl
add
bound
sbb
cmp
adc
shr
enter
xchg
cmps
(bad)
(bad)
ret
mov
xchg
and
push
ror
push
xchg
jae
(bad)
mov
rol
and
adc
xchg
inc
test
pop
out
rol
add
sahf
mov
fwait
leave
fistp
ins
fiadd
shr
xchg
dec
hlt
das
cmps
mov
xchg
xor
sete
jnp
jle
and
xchg
xchg
ins
loop
xor
mov
mov
push
push
dec
add
mov
hlt
sub
stos
cli
push
mov
adc
mov
sbb
cmp
xchg
repnz
inc
or
cmp
or
xchg
repz
bound
sar
xor
add
ja
mov
or
sbb
clc
iret
xchg
or
enter
ins
cld
xchg
mov
cmp
fwait
ins
dec
daa
dec
inc
xchg
adc
(bad)
scas
or
sub
test
rcr
stos
sbb
cmp
test
lahf
mov
inc
xchg
ret
xor
xchg
push
jae
cmp
movs
mov
or
test
xchg
sub
push
adc
ret
ficomp
cmp
push
xchg
mov
xor
sub
lahf
cmps
xchg
mov
xchg
mov
icebp
xchg
lods
cdq
xlat
xor
add
(bad)
xlat
retf
dec
js
push
mov
or
pop
push
nop
loop
scas
aad
lods
mov
cmp
push
push
xchg
xor
ror
inc
popa
daa
fmul
dec
sti
and
push
jb
lahf
sbb
jmp
and
test
movs
adc
adc
push
outs
into
jb
mov
cmp
out
inc
add
ficom
pop
inc
aam
add
xor
cmps
iret
adc
stos
xor
mov
dec
(bad)
rcr
test
pop
pop
into
and
scas
icebp
cld
inc
movs
cld
xchg
ss
cmc
or
sbb
inc
test
out
in
push
lods
repz
cmp
aad
xchg
nop
mov
cmps
xchg
mov
push
or
hlt
xor
hlt
test
inc
imul
jl
adc
sti
add
xor
inc
rol
mov
mov
cmp
sub
adc
mov
inc
fsubr
daa
cmp
jg
adc
ret
mov
dec
aad
push
pop
sub
shl
mov
mov
movs
xchg
int
outs
jb
mov
xlat
std
fxam
xor
push
(bad)
xor
fist
mov
mov
fwait
in
out
sbb
mov
fnstsw
xchg
jb
jmp
mov
sbb
or
ds
rcl
mov
push
mov
aam
call
jp
pop
pop
test
xchg
lds
es
movs
cmps
fs
add
in
xchg
xchg
sbb
(bad)
pop
add
out
xor
jbe
mov
inc
mov
popf
ret
stos
outs
je
xchg
and
test
test
sub
xchg
fisub
sbb
lock
xchg
inc
inc
push
xor
jnp
shl
in
scas
call
call
das
xchg
lock
sbb
imul
jecxz
add
fdivr
mov
test
mov
or
mov
sub
fs
ins
jne
adc
(bad)
nop
loopne
mov
adc
ret
push
jg
mov
push
xchg
inc
aad
call
mov
repnz
push
test
lahf
adc
adc
dec
movs
cli
imul
aam
cld
xor
mov
xchg
loopne
ret
stc
inc
xor
sub
movs
cmp
daa
mov
sub
das
fwait
dec
xchg
pop
cli
in
xchg
out
leave
pop
rcr
fsub
fld
repnz
jne
add
xor
jmp
xchg
sub
push
xchg
jg
xchg
dec
mov
imul
push
xor
xchg
(bad)
data16
in
xor
aaa
and
adc
push
das
pop
mul
test
inc
and
cmp
sub
xor
iret
sahf
ins
push
lgs
cmps
out
test
(bad)
int
push
xchg
dec
lods
daa
add
and
(bad)
jmp
pop
push
fs
inc
ret
or
into
mov
add
rcl
inc
ins
nop
xchg
mov
xchg
adc
sub
xchg
jmp
dec
xchg
popf
loope
sub
das
hlt
mov
mov
sti
cmp
jl
sbb
popf
enter
adc
fidiv
jg
fwait
mov
adc
or
mov
mov
cmp
mov
sub
fld
sbb
enter
retf
lock
sti
mov
push
mov
pop
pushf
(bad)
xchg
fsubr
daa
mov
shl
cwde
pop
inc
repnz
mul
fs
and
call
pop
adc
je
(bad)
rcl
inc
adc
or
adc
xchg
mul
es
aas
cwde
out
aam
call
vmovshdup
xchg
lods
imul
cmp
loope
mov
push
or
not
dec
nop
es
pop
imul
bound
pop
fwait
mov
lds
in
mov
ins
sub
iret
mov
stos
or
inc
popa
ficomp
ret
cmps
mov
jecxz
xchg
(bad)
cmc
mov
aam
or
call
int3
stos
adc
pop
adc
dec
add
cmp
mov
inc
hlt
jbe
(bad)
xchg
sti
jg
jb
sar
ins
(bad)
cld
in
add
and
xchg
xchg
dec
(bad)
mov
fisttp
test
xchg
les
in
xor
and
pop
dec
xchg
and
stos
loopne
fcmovnb
adc
cmc
xchg
adc
jp
repz
mov
fist
push
pusha
or
mov
jb
pop
rcl
xlat
push
xchg
dec
mov
sbb
daa
inc
mov
jb
mov
sub
pop
or
movaps
pop
in
pop
fiadd
push
stos
out
das
add
and
int3
mov
mov
gs
mov
pop
cli
sub
dec
movs
cld
scas
xchg
fwait
stos
push
cwde
nop
mov
dec
xlat
(bad)
jl
idiv
mov
xchg
je
sbb
cmps
ja
or
sbb
in
mov
fwait
push
cmp
pusha
xchg
xchg
je
mov
mov
fist
ror
sbb
dec
popa
or
in
sub
jns
add
call
lea
push
ret
loopne
xchg
inc
mov
sub
shl
sbb
retf
lea
push
xchg
xchg
push
fadd
sub
repz
aam
int
pusha
xchg
mov
inc
xor
pop
leave
shr
je
sbb
ss
cmp
jecxz
jns
scas
mov
xor
or
mov
or
add
jns
cmp
mov
lock
fist
stc
or
sbb
(bad)
stos
mul
test
pop
adc
je
cli
push
xchg
xchg
leave
icebp
scas
setns
into
es
xchg
jg
xor
in
inc
mov
push
scas
jo
cmp
add
sti
ror
sub
(bad)
or
jo
pop
xchg
xchg
sbb
sbb
xor
scas
movs
mov
dec
adc
mov
xor
mov
xchg
call
xchg
jbe
mov
pop
enter
movs
sahf
dec
adc
and
adc
mov
popa
gs
in
sbb
int3
inc
cmps
adc
mov
pop
xchg
in
hlt
inc
xacquire
xchg
xchg
push
leave
enter
loop
cdq
mul
and
xor
sub
xlat
in
xchg
add
jno
dec
mov
ror
aam
arpl
aas
jne
jmp
and
(bad)
or
push
inc
mov
xchg
jne
aaa
or
xchg
pop
jae
cli
cmp
cld
inc
outs
fwait
push
test
sbb
xchg
jmp
loope
icebp
xchg
add
or
and
mov
and
mov
sub
mov
lock
mov
mov
sbb
add
popf
icebp
sti
or
pusha
test
in
sub
jbe
fmul
push
xchg
shr
mov
addr16
jbe
adc
(bad)
fwait
push
push
push
cmp
es
stos
xchg
aaa
cmp
popa
or
mov
push
cmp
nop
inc
xchg
stos
sar
push
mov
xchg
in
xchg
repz
stc
jg
ret
sub
and
jecxz
(bad)
test
outs
xchg
xchg
ds
sub
je
imul
push
mov
inc
imul
cmp
xchg
fcmovnb
in
xor
or
(bad)
sbb
(bad)
scas
call
mov
xchg
sbb
pop
sub
mov
shl
shr
and
add
aad
cli
icebp
cmps
pop
xor
add
cwde
and
inc
mov
imul
xchg
stc
sub
dec
sbb
mov
sub
iret
xchg
inc
out
mov
stc
xchg
mul
xor
popf
jecxz
mov
dec
fwait
cmp
movs
(bad)
sub
xchg
add
bound
mul
jp
inc
push
and
dec
(bad)
adc
call
xor
mov
(bad)
cld
out
test
bnd
mov
sub
push
xchg
fistp
mov
xor
cdq
adc
xchg
cmps
mov
cmp
push
aam
jo
cmp
rcl
sahf
scas
test
inc
fs
xchg
clc
sub
fwait
test
inc
mov
add
xchg
xlat
(bad)
out
mov
ficom
lahf
rol
cvtdq2ps
icebp
ret
push
adc
push
enter
xchg
and
imul
mov
mov
push
popf
push
inc
inc
cmps
dec
repz
dec
stc
inc
or
mov
popf
sub
xchg
xchg
jmp
mov
xchg
or
out
rcr
push
in
pop
fwait
sahf
adc
shl
adc
out
movs
dec
lds
jge
lahf
pop
mov
mov
rol
inc
xor
in
and
cmp
xchg
mov
and
xchg
push
scas
es
sub
xchg
and
sar
xchg
push
and
retf
and
rcl
cli
xchg
jb
ret
(bad)
sar
push
and
shr
call
cdq
int
add
arpl
cwde
repnz
pop
mov
cli
adc
sub
pusha
and
jmp
jb
mov
hlt
js
jecxz
arpl
scas
aaa
pop
lahf
test
fwait
pop
je
sti
mov
mov
cmps
in
inc
pop
in
xchg
ror
mov
xchg
sbb
xchg
retf
jo
mov
sbb
es
fbld
stos
cmp
cwde
inc
mov
ja
inc
mov
imul
add
and
jl
cmps
push
jmp
cli
shr
out
xchg
popf
push
adc
shl
movs
fcomp
gs
fisttp
jmp
xchg
fst
shl
lods
mov
adc
int3
imul
test
push
pushf
lea
shl
pop
iret
jg
sub
jl
iret
repnz
mov
sbb
push
jl
adc
jne
jno
push
in
mov
jl
stc
movs
lods
mov
(bad)
mov
sbb
jmp
mov
jle
xchg
jg
retf
push
ss
pop
aaa
jmp
adc
(bad)
mov
cmp
pop
push
pop
sub
ja
inc
sbb
les
add
xor
mov
mov
mov
inc
rol
xlat
mov
mov
cdq
sbb
inc
dec
or
fs
and
retf
ret
movs
push
xchg
mov
pop
addr16
leave
xchg
movs
mov
inc
imul
push
xor
stos
xor
mov
xor
mov
inc
mov
ins
hlt
xchg
lea
jae
in
xchg
call
out
jno
or
adc
rcl
(bad)
sti
das
sbb
fadd
jnp
mov
push
addr16
dec
scas
shl
adc
rol
mov
xchg
fisub
aaa
iret
xchg
loopne
mov
jno
xlat
cmp
jle
jnp
into
mov
shl
and
inc
or
test
xchg
rcr
sbb
pusha
xchg
or
pop
repnz
xor
adc
xchg
ins
daa
lock
(bad)
jg
cmp
xchg
test
mov
dec
jo
enter
or
and
ds
shr
loopne
adc
push
xchg
and
xchg
mov
aas
mov
aam
test
in
sar
mov
xchg
enter
fisttp
push
xchg
mov
imul
repz
and
gs
add
mov
jae
push
push
xchg
lock
cs
fbstp
mov
mov
xor
call
and
fist
aam
stc
mov
or
fwait
retf
daa
(bad)
cmp
mov
fcmovnbe
and
call
mov
fld
enter
xor
pop
ficom
(bad)
xchg
stos
(bad)
test
das
clc
fbld
adc
cdq
push
sbb
lods
call
push
aam
or
jmp
(bad)
popf
jg
adc
xchg
shl
mov
into
call
inc
mov
xchg
xchg
sahf
mov
xor
popf
pop
leave
and
fcomi
pushf
data16
movs
pop
mov
xchg
jmp
xchg
xchg
sub
or
or
retf
cmp
xor
(bad)
mov
iret
dec
push
xor
test
pusha
neg
fwait
pop
push
push
loop
lahf
mov
xchg
sbb
out
cmp
lods
sub
push
jmp
(bad)
xor
test
pop
fstp
das
xchg
xchg
sbb
(bad)
aaa
xchg
(bad)
sti
mov
xchg
cmps
setnp
int
push
jmp
cmp
aaa
xchg
stos
dec
mov
lods
cmp
iret
out
adc
push
jmp
push
stc
mov
xchg
inc
mov
mov
test
mov
lods
stc
daa
jo
loopne
movs
inc
call
pop
in
not
imul
pop
lock
out
je
fcom
inc
sbb
push
xchg
(bad)
iret
mov
inc
mov
jp
in
movs
mov
xchg
sbb
test
nop
fwait
repnz
jo
sbb
cmc
movs
and
loopne
mov
aam
xor
call
or
mov
lods
sti
std
(bad)
scas
cmps
sub
and
dec
out
(bad)
xchg
mov
push
push
xchg
cwde
xchg
mov
pop
adc
mov
dec
bound
pop
mov
xchg
inc
in
jo
outs
xchg
retf
xchg
cdq
mov
push
xchg
int
mov
jecxz
imul
adc
adc
aad
mov
sub
mov
add
xor
jecxz
sbb
sub
dec
cmp
mov
cdq
in
lock
repz
in
xchg
push
xchg
aas
or
ja
movs
xchg
ins
rcl
xchg
rcl
rcr
in
jo
fadd
aam
jbe
std
inc
in
inc
push
popf
inc
call
dec
arpl
cmp
xchg
and
scas
jg
enter
out
bound
pop
inc
hlt
xchg
sub
stos
or
xchg
(bad)
in
int3
fsubr
popa
push
mov
cmps
test
sbb
fs
jae
int
mov
repnz
add
and
push
test
retf
iret
outs
mov
xchg
push
or
cmp
xchg
data16
mov
xchg
dec
mov
sahf
repz
(bad)
test
(bad)
mov
cmp
es
dec
and
stc
push
fwait
sub
pop
(bad)
xchg
sub
psubsb
mov
repnz
dec
pop
stc
shr
add
popf
inc
inc
dec
mov
in
cmp
xor
cmp
mov
(bad)
sub
out
push
cld
inc
jnp
mov
es
cmp
test
pop
lods
xchg
xchg
mov
icebp
sbb
ins
sbb
xchg
sbb
stos
xchg
push
jg
aad
jge
stos
popf
lods
sbb
adc
inc
rcl
mov
jae
mov
xchg
adc
pop
push
mov
stc
jns
push
xchg
inc
popa
push
imul
aad
call
lock
adc
outs
mov
and
test
lods
aad
ret
nop
xchg
dec
call
jo
adc
jl
retf
jl
out
(bad)
adc
inc
jmp
rol
lds
xor
xchg
sahf
ror
into
push
aad
ins
leave
inc
push
pop
cmp
sub
in
in
or
jns
cmp
clc
outs
sub
xchg
adc
cmc
out
push
lock
jno
mov
mov
dec
out
mov
push
sbb
(bad)
outs
rcr
xor
sbb
cmp
sbb
sbb
clc
ins
fldcw
sahf
adc
mul
pop
es
jge
sbb
jl
jns
in
jae
loopne
and
sub
(bad)
and
push
xor
xor
jb
push
mov
jo
jp
mov
push
xor
adc
pop
rcl
cmp
xchg
xchg
ins
dec
xchg
outs
and
cmps
mov
dec
xchg
inc
push
in
cld
xchg
mov
pop
add
mov
lock
loopne
dec
pushf
stos
into
cmp
cld
in
ret
cmp
add
es
cmps
jl
iret
xor
out
mov
pop
push
imul
sub
jbe
pop
fist
jmp
retf
ins
mov
jl
lahf
add
mov
or
ficom
shr
mov
aam
test
push
in
shl
stos
sbb
aas
push
test
jecxz
or
mul
push
mov
in
out
adc
cmp
push
pop
addr16
lds
pushf
dec
lock
adc
fist
or
mov
inc
rcl
mov
arpl
mov
stos
aas
ror
cs
call
mov
retf
fwait
inc
(bad)
jmp
or
and
mov
aad
inc
movs
icebp
xchg
out
cmp
aas
repnz
mov
xchg
rcr
(bad)
pop
fidiv
pushf
lock
pop
arpl
cdq
mov
mov
xor
dec
xchg
xchg
xchg
cmps
pop
jb
jns
enter
mov
dec
jp
retf
lds
outs
cdq
fwait
sub
or
inc
cmp
push
sub
dec
repz
in
sbb
cmp
mov
xchg
gs
pop
mov
xchg
test
xchg
jecxz
stos
scas
pusha
mov
xor
adc
outs
pop
sar
retf
imul
fbld
cmp
mov
xchg
pop
mov
loopne
mov
mov
sbb
fwait
out
cdq
sbb
test
or
push
(bad)
fstp
fwait
mov
xchg
repz
in
rcr
mov
test
and
mov
test
clc
xchg
jmp
xchg
xor
adc
movs
popf
loope
or
dec
nop
push
xchg
mov
cdq
and
mov
xchg
jbe
mov
fisttp
or
jmp
xor
scas
or
sub
inc
loop
inc
xchg
adc
add
xchg
js
add
pop
xchg
pop
mov
mov
mov
dec
xor
fisubr
adc
or
jo
add
xchg
sbb
shl
adc
jnp
mov
retf
test
gs
push
mov
call
aas
mov
xchg
sbb
daa
out
out
adc
jne
gs
cmc
xchg
pop
push
hlt
jl
push
ror
push
xchg
xchg
adc
(bad)
and
js
inc
pushf
mov
leave
adc
adc
pop
jl
mov
fcomp
lahf
or
test
pop
lods
scas
fstp
mov
inc
jg
mov
mov
fisub
mov
(bad)
std
lahf
fsub
or
add
push
pop
xchg
inc
sbb
(bad)
shr
push
mov
push
xchg
out
sti
xchg
popf
sbb
arpl
inc
jns
jnp
jmp
or
(bad)
dec
scas
cmps
in
inc
mov
pop
jecxz
call
aaa
mov
xchg
sub
into
cmp
movs
sti
je
xchg
mov
jne
cmp
jo
loop
mov
test
out
aaa
push
and
sub
lods
xchg
cmps
pusha
test
fwait
and
cmp
push
xchg
scas
inc
ror
xchg
bound
call
adc
inc
in
in
mov
add
outs
and
xchg
xchg
jle
mov
jg
mul
cmps
pop
fwait
loop
sbb
push
xchg
cmp
jae
ret
aas
stc
mov
xor
ret
fdiv
xchg
test
adc
xchg
popf
mov
std
xlat
xchg
lods
icebp
jae
div
cmp
jnp
test
mov
adc
mov
push
sub
xor
sbb
cld
test
add
loope
pop
ffreep
pop
mov
xlat
cmp
cs
(bad)
xchg
outs
std
inc
or
xchg
push
movs
nop
jno
imul
xchg
and
cmps
lds
call
rcl
mov
xchg
sbb
ins
clc
or
xchg
inc
mov
sbb
pavgw
ret
ja
aam
sbb
cmp
fs
add
repz
mov
das
ja
in
or
pop
out
jecxz
push
mov
mov
(bad)
push
stos
push
and
mov
add
popa
xchg
jnp
out
adc
and
das
xchg
xchg
sbb
ret
inc
imul
mov
xchg
iret
mov
sbb
leave
jns
rep
jge
sbb
lods
mov
mov
into
xchg
movs
and
dec
sub
xchg
repnz
lahf
movs
or
mov
sub
jo
add
sub
hlt
push
pop
ss
shl
xchg
fcmovnb
sub
and
xor
xchg
xlat
jecxz
cli
mov
mov
fwait
sub
in
(bad)
push
or
fwait
loop
test
je
cmp
into
ins
out
mov
push
(bad)
adc
cmps
pusha
lahf
xchg
jge
ss
repz
jne
push
rcl
inc
fwait
dec
jl
push
adc
cdq
jns
je
mov
xchg
je
(bad)
shl
xchg
and
pushf
xor
xor
jns
push
loopne
bswap
xchg
test
dec
sti
out
mov
pop
sub
pop
jb
inc
ins
xchg
or
sbb
xchg
mov
lds
xchg
dec
test
pop
and
out
sub
cwde
cmps
sti
xchg
aas
push
imul
sbb
imul
ss
pop
out
pop
call
out
cmps
xchg
fnstsw
and
imul
idiv
test
push
lock
push
pop
xchg
xor
cmps
dec
jg
in
fist
movs
popa
imul
in
dec
mov
rol
jge
xchg
pop
mov
xabort
aad
shr
push
lahf
adc
xchg
inc
jg
push
push
dec
adc
pop
or
mov
jae
adc
mov
jge
std
push
fdivp
push
xchg
xchg
int3
xchg
jmp
or
in
dec
ss
rcr
inc
dec
addr16
or
pop
cmps
or
xor
cmp
mov
pop
cmp
dec
sub
push
xchg
pop
lea
inc
mov
or
shl
(bad)
jge
ffreep
stos
hlt
mov
mov
jge
push
loopne
add
into
jge
mov
add
mov
jno
gs
push
xor
mov
mov
popf
jmp
movs
hlt
jge
jo
push
fnsave
nop
pop
inc
data16
jl
push
pop
or
adc
iret
into
jne
xchg
jp
cwde
mov
loopne
bound
xchg
adc
mov
data16
jae
js
cmc
lods
idiv
fisttp
push
push
fild
dec
hlt
jmp
data16
sar
call
mov
repnz
popa
mov
rcr
sbb
popf
sbb
xchg
sbb
in
mov
pop
and
mov
out
adc
outs
mov
js
fcmovbe
rol
xchg
popf
add
pop
js
adc
popf
adc
cmp
push
xchg
mov
add
ss
sub
cld
popf
mov
pop
xor
pop
mov
(bad)
arpl
xchg
jge
and
dec
in
xor
pop
push
mov
cmp
(bad)
pusha
and
xor
inc
ins
push
xchg
jns
rcl
out
pop
or
sbb
out
out
ins
sbb
mov
fwait
pop
xchg
pop
jmp
cmp
into
addr16
adc
and
mov
sub
adc
nop
sub
push
outs
mov
inc
mov
in
mov
push
ror
sub
xchg
dec
aam
mov
xchg
aaa
ins
inc
(bad)
adc
sqrtps
mov
retf
xchg
mov
pop
cmp
adc
lock
icebp
xchg
(bad)
leave
out
mov
fmul
add
dec
add
scas
sub
jo
arpl
test
adc
fcom
iret
loop
fwait
pop
ins
int
mov
sub
mov
ret
lock
stc
xchg
mov
out
adc
rcr
fist
fs
jecxz
call
add
jb
fist
jl
xor
xchg
in
adc
ficom
add
jle
les
lods
xor
pop
mov
xchg
adc
xor
or
rcr
inc
xchg
jo
push
outs
sub
loop
push
lods
mov
dec
retf
shr
mov
je
dec
call
mov
mov
jo
fistp
xchg
or
fs
xor
jae
sub
xchg
les
xchg
shl
loope
push
xor
ss
mov
jo
mov
in
outs
js
repnz
mov
jmp
icebp
cmps
push
jmp
pop
jmp
sbb
inc
test
fldenv
xchg
sub
fild
pop
lahf
and
daa
sbb
popf
inc
mov
push
movs
cmp
cs
cmp
out
mov
adc
test
add
cmps
je
mov
into
xchg
xor
sbb
inc
dec
xchg
mov
ret
hlt
addr16
jg
cmc
push
mov
mov
mov
xchg
or
add
pop
hlt
es
sbb
xor
stc
mov
repz
sub
jne
sar
dec
fwait
pop
fidiv
fs
imul
push
xchg
and
cli
fucom
test
call
adc
(bad)
inc
lahf
and
mov
xchg
inc
adc
pop
push
bound
fs
adc
pop
jo
(bad)
stos
dec
push
fnstenv
mov
fwait
push
cld
jecxz
faddp
iret
cmp
ror
loopne
aaa
sar
or
xor
sub
out
xchg
stos
pop
jmp
sbb
call
jmp
jg
mov
(bad)
and
xchg
in
mov
out
les
leave
ror
outs
mov
das
sub
(bad)
test
pop
dec
jmp
or
cld
xchg
psubsw
lods
and
ficomp
mov
push
xchg
out
push
lahf
(bad)
int3
jno
repz
cld
jb
cmps
jnp
mov
xchg
int3
mov
push
sar
jb
sbb
(bad)
pop
cwde
icebp
into
mov
je
into
fstp
int3
pop
xchg
sbb
call
(bad)
mov
add
sub
pop
mov
leave
icebp
push
mov
push
mov
push
sbb
push
imul
mov
or
push
xor
or
leave
mov
mov
dec
clc
inc
int
jmp
sbb
jb
loop
pop
ins
push
cld
rcl
repnz
retf
mov
xchg
xor
dec
mov
(bad)
sub
clc
das
lahf
jl
jbe
jno
mov
jb
jle
addr16
dec
stos
les
je
push
adc
ror
aad
(bad)
imul
cmps
dec
je
add
popf
sub
fwait
or
jg
sbb
fisttp
jp
test
xchg
inc
xor
cmc
xor
cmp
ja
push
outs
jl
push
out
adc
mov
mov
jne
js
cmps
enter
ins
je
sbb
xchg
sbb
fadd
sbb
cwde
inc
shl
popf
cmp
mov
jmp
shl
cmps
(bad)
in
add
sbb
cmp
xor
push
pop
or
push
push
add
inc
mov
bound
dec
hlt
leave
pop
das
mov
mov
js
test
clc
retf
dec
adc
enter
movs
ds
cdq
and
aad
xchg
sbb
movs
in
mov
cli
push
ret
jmp
push
ins
call
in
xchg
pushf
mov
int3
xchg
mov
jle
jbe
js
fs
cwde
lock
call
hlt
mov
pop
cmp
push
or
aam
int3
push
(bad)
sbb
jge
dec
cmps
imul
loop
cdq
xor
cmp
mov
pop
jl
sbb
push
adc
pop
enter
test
mov
pop
xor
push
movs
xchg
psubsb
loopne
icebp
mov
mov
pop
pop
mov
pop
xchg
mov
sbb
mov
sar
(bad)
xchg
cmp
add
jae
sub
add
or
xor
push
cmp
fs
sbb
pop
mov
lds
mov
add
sbb
push
mov
push
push
nop
cmp
into
cwde
adc
pop
xchg
mov
stos
mov
popa
sub
or
popf
jae
and
in
xchg
movs
sbb
das
adc
xchg
mov
retf
inc
sbb
pop
push
mov
repnz
xchg
dec
jle
add
hlt
mov
dec
jae
jecxz
xchg
mov
xor
mov
aam
xor
(bad)
xchg
jmp
(bad)
mov
outs
mov
fidiv
loopne
imul
nop
sub
xchg
mov
jne
lods
loopne
adc
xchg
add
movs
push
mov
ficom
xchg
mov
shl
mov
jo
mov
and
repz
mov
setl
outs
and
test
add
bt
pop
lahf
xchg
ja
mov
mov
jno
je
or
movs
jbe
cs
inc
jle
or
fcmove
add
xchg
ins
mov
js
fstp
lock
mov
pop
cmp
leave
hlt
and
aam
mov
stos
loopne
add
fwait
push
mov
dec
jno
dec
movs
jmp
xchg
mov
dec
sbb
dec
in
jp
retf
jns
jg
loope
fs
outs
push
mov
mov
jl
fs
jecxz
mov
sbb
sub
add
adc
push
sbb
ret
hlt
cmps
lods
cmp
aaa
dec
sub
add
dec
adc
jmp
loope
mov
jb
dec
xchg
pushf
fistp
add
adc
push
xchg
test
pop
jmp
dec
jb
icebp
xchg
xor
iret
mov
pop
test
dec
scas
popa
jb
cmp
in
pop
cwde
sub
xchg
dec
mov
fimul
adc
cmp
cwde
les
mov
mov
push
comiss
mov
enter
inc
push
sbb
mov
ret
fwait
stos
pop
out
xchg
cmovns
aaa
xchg
movs
sub
pop
inc
xchg
xor
xchg
jbe
imul
adc
xor
add
and
jno
push
and
xchg
xchg
outs
inc
dec
rol
mov
add
lds
imul
sub
es
xchg
fsubr
leave
loope
jmp
pop
cwde
jl
pop
mov
ja
push
sbb
movs
(bad)
mov
push
test
dec
or
push
push
data16
push
pop
stos
xchg
test
or
adc
movs
sahf
or
ficom
mov
cmp
sub
push
push
jge
dec
push
sbb
adc
mov
in
jmp
mov
xchg
hlt
das
xchg
sub
into
xor
mov
ret
(bad)
xchg
mov
cmc
push
enter
or
scas
mov
push
imul
pop
shl
pop
loop
call
les
pushf
hlt
sub
sbb
xchg
add
adc
mov
mov
pop
and
fwait
or
imul
xchg
adc
jno
xchg
xchg
mov
push
sub
adc
mov
mov
push
xchg
cmc
adc
ins
fldenv
jno
xchg
add
mov
shr
mov
lahf
cmp
add
cs
test
sbb
xchg
daa
push
int
xchg
cmp
popf
mov
cs
inc
popa
mov
outs
je
xchg
push
jg
mov
cli
xor
setnp
(bad)
jl
ss
sub
adc
cdq
mov
stos
outs
scas
xor
js
mov
and
idiv
cmp
pushf
pop
inc
in
pop
aas
xchg
enter
sbb
mov
push
jmp
loope
stos
lea
mov
sub
adc
xchg
(bad)
repz
mov
pop
mov
pop
aam
jmp
cs
loop
inc
rol
xchg
test
pushf
in
mov
cmp
pop
mov
adc
icebp
or
inc
dec
mov
imul
pusha
out
cmps
jl
jnp
mov
movs
fnstenv
test
mov
xchg
cmp
xchg
and
lods
jns
je
in
xor
cdq
or
ror
dec
jle
nop
test
mov
jmp
mov
call
dec
and
sahf
xchg
add
mul
test
add
xor
fcom
stc
mov
mov
mov
mov
dec
xchg
mov
inc
sub
and
push
rcl
jg
xchg
push
(bad)
cld
mov
loope
enter
lds
es
mov
cdq
fimul
(bad)
enter
gs
and
xchg
retf
nop
(bad)
or
scas
push
xchg
fisub
push
xchg
mov
cmp
cmp
aam
mov
sbb
push
repnz
repz
sub
xchg
loopne
push
push
jge
jp
imul
rcl
neg
or
ins
pop
and
aam
dec
mov
cwde
cld
fild
cmps
clc
out
mov
stc
shl
push
addr16
adc
jge
out
hlt
repnz
push
mov
lods
xor
popf
sbb
push
jl
push
xchg
or
xchg
sub
push
mov
adc
add
call
outs
inc
call
int
ficom
fmul
xor
and
aas
mov
xchg
cmp
fwait
xor
(bad)
je
pop
fdiv
mov
sub
mov
xchg
jecxz
js
push
jl
and
sub
sbb
mov
icebp
adc
es
ja
xchg
jb
add
jbe
mov
daa
xchg
push
stc
push
movs
sbb
mov
outs
jns
cmp
test
add
dec
xor
ret
xchg
fbstp
mov
cmp
das
not
dec
add
jbe
in
xchg
mov
aam
clc
pusha
xchg
jmp
gs
lock
std
cmps
mov
mul
pop
inc
or
loopne
or
push
xchg
cs
sub
xlat
pop
inc
sub
or
sbb
clc
lds
xchg
xchg
(bad)
push
scas
in
mov
cwde
es
sti
xchg
mov
test
push
imul
pop
lock
repz
xlat
xchg
lahf
mov
sbb
ret
jnp
lock
jns
retf
and
adc
or
adc
inc
adc
(bad)
add
ss
or
jle
call
push
push
fild
fwait
fwait
into
xchg
push
adc
xor
fwait
jbe
hlt
mov
xchg
push
fwait
fwait
pop
inc
loopne
push
iret
push
scas
retf
xchg
lea
test
mov
ins
sub
lods
(bad)
mov
xor
cdq
xchg
jle
lds
push
into
sub
add
jne
clc
jo
popa
les
repz
mov
add
inc
int
(bad)
xchg
loop
dec
and
mov
hlt
ds
pop
or
xchg
outs
xchg
cmc
cmp
dec
sar
mov
lea
or
xor
or
and
and
mov
mov
les
xor
(bad)
jg
in
inc
fcomp
mov
int3
mov
pop
iret
sub
mov
lidtd
cmps
test
add
loope
js
pop
shr
xchg
lea
mov
jl
fcom
mov
test
cld
outs
adc
sbb
mov
pop
add
retf
repnz
mov
and
(bad)
lahf
dec
mov
pop
fdivr
mov
lds
out
hlt
ror
jge
mov
cwde
mov
and
adc
jb
xchg
adc
(bad)
pop
call
sbb
stos
ret
xchg
mov
daa
outs
xchg
pop
or
xchg
pop
or
dec
repnz
xchg
fisubr
aad
push
out
sbb
fadd
(bad)
shl
cdq
sti
jo
test
out
frstor
xchg
inc
pushf
or
retf
pop
dec
and
xchg
int3
and
jne
xchg
jp
push
push
shl
mov
dec
test
push
or
xchg
(bad)
mov
mov
adc
(bad)
into
pushf
sub
inc
test
sub
xchg
shl
into
(bad)
push
call
mov
int3
xchg
ins
pop
out
lahf
daa
xor
mov
push
stos
inc
into
jmp
popf
aaa
jnp
jb
loope
mov
sti
arpl
adc
and
jecxz
xchg
push
test
xor
cwde
ret
pop
ins
push
cwde
stc
and
cmc
xchg
test
pop
dec
popa
xchg
outs
mov
inc
stos
jne
shl
or
mov
repnz
mov
pop
in
cdq
rol
and
inc
(bad)
fadd
mov
dec
nop
cmc
push
mov
movs
push
adc
pusha
data16
std
dec
xchg
or
bnd
bound
fmul
mov
adc
push
sub
scas
add
and
rcl
inc
pop
mov
not
mov
dec
mov
cmps
fisttp
cmp
and
add
call
xchg
add
cmp
mov
fisttp
xchg
add
jge
jle
ret
cmps
xchg
xor
(bad)
lds
repnz
imul
cmp
xchg
or
popa
xchg
movs
mov
pop
xchg
add
jp
adc
mov
pop
dec
and
repnz
rcl
xchg
popf
push
dec
int3
dec
cmps
rcr
xor
add
sbb
adc
mov
fucomp
sub
adc
mov
(bad)
in
mov
cs
dec
aam
mov
fcom
add
pop
and
mov
inc
mov
call
xchg
repz
stos
fcomp
aad
ret
mov
xchg
cmc
out
adc
cmp
jge
xchg
lea
(bad)
mul
mov
gs
xchg
xchg
icebp
hlt
pop
pop
lahf
sbb
jne
push
jns
cmc
push
movs
mov
(bad)
aad
jge
push
mov
pop
cld
les
fisubr
scas
popf
hlt
push
adc
dec
pop
push
lds
push
or
cwde
in
dec
sub
rol
mov
into
fcmovbe
mov
jl
enter
push
jae
dec
into
mov
addr16
add
mov
pop
bound
test
lea
(bad)
mov
and
adc
cld
adc
push
ror
fwait
mov
out
cmp
sqrtps
repz
pop
addr16
jl
mov
push
dec
or
cdq
adc
pop
fdivr
xchg
call
hlt
cld
push
push
mov
xchg
jecxz
xchg
mov
call
cli
xchg
int3
test
ror
and
rcl
xor
loope
leave
mov
push
aas
cwde
mov
ret
stos
sub
call
jmp
adc
add
push
or
stos
push
(bad)
mov
je
loop
and
or
(bad)
push
pushf
adc
and
loope
jne
mov
sbb
and
xor
jecxz
out
xchg
adc
addr16
dec
nop
test
sahf
mov
xchg
jns
popf
gs
outs
xchg
adc
pop
and
xchg
clc
sub
dec
mov
ds
aas
popa
pop
stc
mov
sar
faddp
push
aas
xchg
xchg
gs
mov
iret
jecxz
mov
mov
repz
hlt
js
cmp
fwait
(bad)
xor
packsswb
cwde
lock
aam
jecxz
xchg
fimul
out
retf
xchg
(bad)
cmp
adc
into
pushf
vpsllw
arpl
push
jo
sbb
mov
ret
pop
add
add
push
aaa
or
push
sub
xchg
xchg
adc
scas
xor
mov
enter
in
lahf
add
retf
xchg
xlat
out
in
aaa
inc
xchg
push
dec
pop
jae
loope
dec
mov
mov
cmp
int
shl
lahf
mov
mov
or
xor
(bad)
jbe
stc
xchg
push
xchg
aam
and
xchg
cmp
fist
xchg
mov
ins
sahf
xchg
(bad)
add
adc
hlt
test
outs
pop
or
sub
and
mov
sbb
cmp
test
in
out
mov
xchg
pushf
adc
lahf
dec
cmp
xchg
call
xor
xchg
inc
js
aam
jo
mov
lahf
mov
push
pop
repz
retf
xchg
fwait
jp
aam
xor
and
adc
xchg
pop
loopne
add
out
xor
adc
mov
xchg
push
fisttp
and
pop
pop
xchg
sub
pop
aas
cmp
in
lds
add
sbb
xor
xchg
loop
jmp
mov
inc
push
add
cdq
outs
push
popf
call
stos
push
xchg
adc
pop
cs
xchg
adc
test
int3
adc
sub
enter
inc
pop
sub
aam
push
mov
(bad)
dec
rcr
mov
jmp
bnd
pop
js
movs
push
inc
adc
mov
dec
mov
xor
rcl
add
mov
xor
fisttp
mov
mov
loope
mov
push
xchg
aad
jae
jge
aad
xchg
rol
test
sbb
or
out
dec
jb
add
leave
outs
jl
fwait
xchg
(bad)
sbb
iret
xchg
or
cmp
mov
cmp
and
sbb
mov
cwde
mov
hlt
jmp
mov
push
sbb
lock
pop
push
dec
call
mov
xchg
mov
cmc
sbb
mov
xchg
les
inc
les
lahf
inc
(bad)
in
push
retf
fsubr
scas
xor
mov
lods
adc
and
hlt
shld
(bad)
jecxz
dec
scas
dec
cmp
dec
pavgw
xor
data16
cmps
xor
pop
scas
xchg
cmp
mov
add
sahf
outs
pop
pop
mov
cmp
push
(bad)
lock
mov
pop
cdq
lea
xchg
cmp
adc
in
ins
in
sbb
push
push
inc
ret
lods
loope
jl
cwde
inc
or
inc
push
mov
imul
jl
inc
xchg
in
jp
jae
adc
iret
xchg
fs
out
dec
rcl
mov
mov
mov
hlt
mov
nop
repnz
push
xchg
inc
sub
inc
push
xlat
fadd
rcl
or
rcr
les
and
sub
pop
mov
xchg
sub
inc
xor
jne
mov
mov
xor
ins
xchg
dec
outs
popa
ret
pop
and
adc
push
cld
je
add
pop
or
xor
cmp
repz
dec
inc
xchg
adc
jle
into
mov
dec
lahf
jmp
jp
jle
movs
sti
mov
mov
jno
xchg
jno
and
and
inc
fwait
out
jle
dec
mov
mov
cmp
mov
cmps
adc
stos
sbb
xchg
loop
mov
in
dec
pop
fst
pop
mov
mov
mov
sar
dec
jns
sbb
jae
icebp
movs
ins
sub
pop
adc
sbb
cld
(bad)
ja
mov
mov
dec
jne
pop
(bad)
retf
hlt
call
adc
mov
adc
hlt
sbb
xchg
add
enter
xchg
cmp
retf
push
sub
lahf
xchg
xlat
daa
sbb
inc
push
stos
sub
pop
xchg
jb
dec
mov
xchg
aad
cli
arpl
mov
scas
outs
mov
je
jmp
xchg
dec
inc
movs
adc
sub
xchg
arpl
test
inc
pop
imul
mov
pop
out
lods
xchg
icebp
xor
in
ins
add
scas
pop
fist
pop
nop
test
sub
not
call
mov
cmps
mov
(bad)
cld
push
xchg
nop
dec
sbb
xchg
lds
les
push
mov
push
iret
loopne
icebp
repnz
aam
xor
xchg
imul
jmp
mov
cwde
pusha
ret
fwait
dec
data16
inc
adc
lahf
pop
cs
xor
dec
loope
ds
aam
push
in
mov
add
xchg
dec
mov
sub
sbb
jb
xchg
cld
dec
test
cmps
push
jmp
dec
xchg
shl
movs
push
movs
js
ror
dec
pop
arpl
retf
adc
lea
sub
pushf
adc
xor
popf
sbb
jns
pop
call
pop
xor
add
jmp
lds
cmp
int
cli
es
xor
les
std
inc
int3
outs
push
dec
adc
mov
xchg
jp
fbld
ja
sbb
jge
or
stos
xor
mov
fldenv
mov
movs
pop
test
and
inc
std
jne
gs
jmp
push
pop
dec
dec
daa
or
loope
sbb
dec
add
push
cmps
fist
bound
outs
stos
mov
sar
hlt
sub
cld
ss
push
dec
(bad)
(bad)
and
lods
cdq
loop
stos
in
call
setge
inc
mov
jmp
(bad)
mov
movs
ror
inc
xchg
cli
addr16
push
xchg
stos
inc
popa
mov
ret
or
nop
movs
sbb
adc
nop
xchg
dec
fdivr
ffree
fisubr
nop
xchg
repnz
pop
iret
in
xchg
jno
hlt
movs
stc
cwde
or
adc
mov
jle
xchg
jp
fadd
dec
push
add
jl
fcom
add
push
nop
int3
mov
and
bound
cmp
sub
xchg
sbb
das
mov
fsubr
xchg
push
test
call
dec
andps
cmp
test
test
clc
enter
nop
xchg
jge
jp
push
push
je
dec
pop
xchg
test
call
sub
call
fidiv
mov
(bad)
xchg
adc
sbb
js
jmp
inc
push
pop
nop
repz
fs
fcom
sbb
popa
fld
dec
or
xchg
xor
(bad)
aam
fcom
dec
(bad)
fnstsw
cmp
inc
sub
in
mov
(bad)
stc
mov
je
cld
fwait
std
mov
mov
nop
nop
mov
cmps
fcom
sub
push
je
mov
nop
shl
leave
mov
test
cmp
dec
inc
mov
cmp
xor
pop
push
mov
or
xchg
mov
xor
test
call
pop
inc
dec
xchg
mov
add
das
cmp
dec
jl
mov
xchg
xor
xchg
les
jge
sbb
push
and
cli
repz
je
add
adc
push
add
xchg
mov
xor
in
(bad)
xchg
and
shl
mov
mov
mov
int3
cmp
cwde
sub
in
xchg
inc
push
xchg
nop
cmps
jae
xchg
nop
(bad)
fld
fcmovb
sub
lahf
sub
mov
or
(bad)
jbe
dec
adc
nop
fst
mov
cmp
or
nop
cmps
mov
jae
jmp
pop
imul
inc
or
ret
shl
nop
xchg
in
mul
cmp
dec
inc
mov
jae
cmc
nop
iret
adc
mov
xchg
in
xchg
arpl
out
cmp
nop
(bad)
xchg
mov
sahf
inc
dec
push
add
xchg
data16
xchg
xchg
dec
je
jns
mov
lahf
enter
mov
push
nop
nop
xchg
cmp
jne
call
(bad)
xchg
push
pusha
fimul
add
rol
sbb
ins
nop
add
mov
xchg
mov
xchg
popa
(bad)
cmp
sbb
sub
push
idiv
inc
mov
out
mov
push
xor
aas
pause
pusha
inc
adc
cld
jge
inc
xchg
call
push
je
stos
arpl
jae
(bad)
cmp
div
or
(bad)
jmp
retf
xor
xchg
lahf
repz
pop
mov
sub
pushf
sbb
add
xchg
cmc
mov
cli
popf
sbb
mov
lea
mov
pop
sub
mov
mov
mov
iret
fnstsw
out
es
and
pop
mov
or
push
or
cmp
shl
aaa
or
xchg
retf
in
in
or
les
call
cld
xor
ret
sbb
pop
lock
add
xchg
imul
pop
cmps
dec
ins
and
xor
(bad)
rcr
inc
out
jge
cld
or
mov
adc
adc
iret
push
mov
jl
and
dec
mov
inc
pop
mov
das
rol
sbb
jmp
inc
mov
and
jp
push
imul
mov
xchg
jo
jge
rcl
sbb
inc
bound
adc
(bad)
push
sub
int
mov
cmps
hlt
sysexit
fwait
das
xor
lds
shl
test
cmp
sbb
push
pop
xor
mov
pop
mov
stos
sbb
bound
call
sbb
push
(bad)
retf
mov
and
adc
adc
pop
iret
xchg
jp
(bad)
or
cwde
cmps
fidivr
cmp
rep
xor
mov
cli
ret
jno
dec
stos
test
hlt
cmp
repnz
hlt
and
out
pop
fist
jmp
push
inc
ins
movs
in
pushf
jmp
push
sahf
pop
xchg
adc
sbb
and
or
cld
ja
pushf
push
pop
imul
fdivr
and
mov
xchg
adc
inc
mov
mov
aaa
cmp
pop
inc
add
ret
and
nop
scas
sbb
inc
pop
rol
jl
cwde
sub
push
pushf
inc
mov
mov
in
xchg
sar
sbb
out
sti
pop
sub
pop
dec
test
sbb
push
jbe
iret
mov
inc
rcr
into
fsub
sub
xor
cmp
xchg
in
add
test
add
sahf
fsub
jae
sbb
xchg
sub
imul
xchg
shl
mov
not
(bad)
clc
cmps
add
repnz
mov
addr16
repz
xchg
cmp
(bad)
adc
in
xchg
ret
push
push
sbb
fwait
sbb
imul
fwait
inc
mov
repz
inc
xchg
mov
lahf
jl
xchg
push
xchg
stos
test
movs
ja
lock
mov
stc
(bad)
xchg
or
pop
mov
cmps
sub
stc
xchg
jmp
push
or
inc
test
push
stos
repnz
dec
xchg
retf
(bad)
pop
fidiv
mov
sub
iret
mov
or
fmul
rol
xchg
outs
loope
xlat
cmp
adc
xchg
or
sub
pop
inc
mov
xor
inc
dec
adc
(bad)
in
xchg
xlat
mov
retf
cdq
test
push
inc
(bad)
ja
jle
xchg
mov
les
std
out
and
and
jns
push
jmp
xchg
sbb
cmp
out
(bad)
into
xchg
add
adc
inc
mov
hlt
xor
xchg
das
lods
xor
leave
rcr
(bad)
xlat
das
adc
xchg
movs
(bad)
sbb
xchg
sahf
cwde
rcl
pop
mov
or
mov
nop
inc
repz
cli
jno
or
fist
test
leave
fwait
jno
adc
test
jg
and
shr
sbb
pop
dec
sbb
sahf
xchg
je
jmp
xchg
sti
inc
sub
cmp
xchg
xlat
(bad)
call
mov
xchg
xchg
jle
add
fwait
mov
fistp
mov
xchg
add
data16
jg
hlt
mov
mov
xor
stos
addr16
mov
and
call
popf
aam
rol
adc
pushf
and
sbb
movs
repnz
dec
and
icebp
push
pop
out
stos
pop
inc
les
push
stos
xor
retf
mov
add
pop
jo
ja
push
jbe
popa
jge
push
mov
cmp
ret
xor
pop
sbb
(bad)
sbb
cmp
xlat
mov
mov
shr
aas
ss
mov
mov
fadd
dec
(bad)
sar
xchg
das
out
or
cmp
je
lahf
loope
jne
lods
fld
fcomip
repz
cld
cld
sbb
mov
or
cmp
loop
sbb
pop
inc
cmps
xor
shl
xchg
and
jg
mov
into
call
mov
mov
cmp
mov
jmp
jge
fimul
push
and
xor
pop
in
in
out
add
enter
sbb
push
push
mov
(bad)
cwde
and
hlt
mov
je
and
daa
mov
mov
out
hlt
test
mov
push
aam
scas
movs
xor
adc
loopne
jno
mov
and
jp
cdq
push
pop
jns
test
and
js
mov
or
and
(bad)
hlt
hlt
test
cdq
inc
hlt
das
push
fstp
add
test
es
mov
stos
jle
popf
xchg
ficom
jp
(bad)
(bad)
daa
jp
loopne
pop
mov
push
inc
push
mov
scas
cmp
and
jmp
(bad)
xchg
push
(bad)
or
adc
aam
(bad)
sub
adc
hlt
mov
jmp
lods
sub
sar
xchg
jge
(bad)
into
jbe
ret
xchg
aad
fwait
add
(bad)
fld
xchg
lods
cmp
adc
xchg
mov
lea
mov
dec
aam
retf
dec
shld
cmp
fwait
les
add
inc
xor
or
add
mov
repnz
sub
or
pop
mov
jle
aam
jmp
mov
lds
call
lods
pop
clc
js
xor
es
icebp
xchg
into
mov
imul
icebp
xchg
jle
sbb
mov
dec
std
aam
stos
push
ds
cmps
or
add
adc
push
xchg
cmp
aaa
iret
xchg
(bad)
movs
into
pop
ror
xchg
jae
xor
popa
inc
xchg
scas
xor
repz
jns
sub
xchg
lods
pushf
sub
cwde
pop
mov
add
ficom
xchg
and
jns
xchg
call
mov
test
adc
fdivr
jo
xor
movs
xchg
push
int3
inc
cmp
nop
pop
retf
lahf
or
sub
and
inc
(bad)
mov
xor
lds
push
xchg
sbb
(bad)
cld
push
or
push
ret
add
xchg
in
rol
push
cmc
mov
xchg
xchg
pop
mov
lahf
jecxz
repnz
fbstp
pop
int
pop
fcom
mov
xchg
or
jno
repz
gs
inc
popf
or
rcr
ja
in
xchg
add
pop
in
mov
push
pop
xor
jg
cwde
retf
xchg
xchg
(bad)
cli
adc
in
imul
(bad)
test
xchg
dec
inc
daa
pop
cwde
xchg
or
adc
mov
cdq
adc
push
clc
push
inc
pop
xchg
dec
push
adc
(bad)
fs
sub
sub
pop
mov
jb
mov
cmp
mov
pop
push
pop
jmp
out
sbb
call
cmp
pop
ret
je
(bad)
idiv
xor
cmp
push
pop
(bad)
jnp
mov
addr16
push
dec
xchg
inc
pop
xchg
fdiv
iret
pop
cs
push
or
test
mov
lds
shl
sar
je
mov
xchg
mov
out
cwde
xchg
push
xchg
mov
jecxz
mov
cmps
inc
js
mov
push
movs
dec
lods
xor
retf
pusha
leave
ins
call
loopne
xchg
gs
fs
add
(bad)
lock
adc
movs
fldenv
rcl
push
loopne
add
sbb
sub
sub
std
rcl
call
lds
cwde
iret
jns
sub
adc
dec
fneni(8087
push
outs
cmps
int3
in
call
and
js
xchg
test
js
retf
inc
xchg
jne
jns
in
das
daa
dec
stos
mov
mov
adc
aam
popa
in
xchg
addr16
enter
fs
stc
das
xlat
xchg
lock
cdq
ins
adc
jge
call
push
fimul
pop
push
cmps
xor
jp
cwde
sub
idiv
test
mov
and
mov
fist
mov
(bad)
hlt
hlt
sahf
nop
jl
movs
loop
aam
pushf
push
xchg
test
je
cmps
scas
or
fwait
mov
mov
call
lods
popa
scas
int3
sbb
push
push
call
push
push
pusha
sub
pop
into
adc
sbb
mov
and
adc
jl
inc
sbb
cwde
cmp
and
icebp
xor
push
rol
mov
mov
ss
xlat
outs
push
xchg
sub
pop
push
mov
cmps
idiv
inc
xchg
and
jo
inc
ret
mov
inc
cmc
pushf
fst
or
dec
adc
pop
push
jb
push
xchg
or
int
mov
ja
pop
sti
xchg
adc
out
or
adc
sub
int3
mov
lea
push
loope
(bad)
pop
jg
xchg
cmp
or
jnp
xor
cs
jge
neg
dec
pop
mov
stos
rcr
xchg
(bad)
push
mov
xchg
and
xor
sbb
xchg
call
daa
sar
xchg
jmp
adc
xor
repnz
fs
xor
ds
les
adc
test
cmc
cmp
nop
push
adc
xchg
jl
mov
ja
gs
sbb
js
test
scas
cmps
aas
xchg
adc
xchg
mov
mov
sub
mov
sahf
push
inc
xchg
add
aas
movs
xor
out
xchg
cmp
iret
sub
pop
pop
shl
adc
mov
cmovbe
mov
out
jmp
and
xchg
jge
sub
sbb
and
movs
stos
in
je
cwde
sbb
mov
jne
push
sbb
mov
xlat
adc
mov
dec
xchg
mov
out
ss
xchg
cmp
inc
outs
pop
xchg
push
call
xchg
mov
inc
(bad)
jmp
pop
ss
xchg
jb
inc
inc
add
outs
xchg
or
(bad)
mov
mov
jp
xchg
or
inc
push
shl
mov
xchg
jno
cmc
jae
and
add
dec
xchg
xor
inc
push
call
scas
(bad)
xor
add
xchg
push
js
das
mov
rcr
out
add
fs
pop
or
sbb
aad
push
xchg
lock
into
sub
pop
fmulp
pop
mov
and
xchg
scas
ins
xor
icebp
push
sub
sub
adc
lea
adc
xchg
leave
cmp
jl
shl
gs
push
rol
ror
arpl
mov
mov
loope
imul
xchg
std
dec
inc
and
push
cld
mov
fsub
enter
jl
xor
sbb
out
popf
lea
sbb
bound
cld
xor
cmp
pop
push
sti
cwde
in
cmp
or
push
(bad)
xchg
pop
xor
call
lea
aam
mov
les
stos
or
(bad)
pop
rol
lods
mov
xchg
test
shr
shl
adc
test
mov
mov
into
les
je
int3
scas
jno
xchg
ret
xchg
shl
movs
cld
push
fmul
mov
shl
push
stos
int
cmp
add
jmp
fistp
lds
mov
xchg
or
ds
cwde
int3
es
or
xchg
push
aam
push
xchg
fcmovne
(bad)
dec
jne
retf
xchg
push
cmp
sbb
jle
ins
xor
ret
mov
jg
jecxz
mov
les
push
and
leave
xchg
fwait
or
xchg
pop
sbb
inc
xchg
jp
xor
addr16
add
xchg
inc
push
cdq
dec
pop
jb
cmp
sub
xchg
cmp
out
ins
call
lods
aad
mov
adc
dec
sub
outs
xor
and
push
je
(bad)
mov
pop
add
xchg
jl
jp
sbb
dec
cmp
cmp
fcmovne
mov
jo
cmp
push
pop
and
shl
xchg
int3
nop
cwde
cmc
xchg
mov
mov
jne
ins
(bad)
lods
stos
jp
out
inc
adc
inc
mov
inc
imul
adc
and
inc
xlat
xchg
inc
sete
test
push
mov
test
aas
push
test
xchg
je
add
and
mov
jnp
cmp
or
xchg
mov
sub
cwde
xchg
add
cmps
xor
cmp
xchg
retf
ins
mov
adc
fsubr
inc
push
mov
mov
popa
or
cwde
inc
imul
enter
or
xchg
jns
xchg
into
inc
adc
nop
xor
cmp
ret
add
xchg
ror
(bad)
repz
das
out
pmaxub
inc
xchg
xchg
jb
outs
xchg
jecxz
push
inc
pop
fwait
lock
rcl
je
push
and
adc
pop
jl
and
cwde
lods
pop
daa
lods
adc
cli
mov
ret
fcom
dec
pop
popf
jge
stos
xrelease
jae
cmps
stos
xor
mov
aam
mov
pusha
lds
movs
mov
mov
mov
jge
jo
pop
sbb
xchg
mov
xor
push
imul
sub
mov
inc
lods
dec
jge
mov
int3
out
rcl
test
xchg
inc
fcmovnbe
lock
nop
shl
dec
js
push
mov
pop
push
mov
xchg
sbb
ret
lock
xchg
jg
sub
pop
sahf
xor
bound
sub
adc
xlat
xchg
cld
cwde
lds
inc
ins
hlt
xchg
jge
sti
mov
pop
hlt
jp
inc
loope
test
sub
pushf
xchg
out
stos
cmp
dec
lds
pop
out
sbb
add
not
or
or
mov
jp
sub
jl
loop
dec
cdq
mov
adc
adc
cld
pushaw
outs
loop
dec
pop
inc
fdiv
es
jns
into
mov
pusha
jl
(bad)
jge
jp
clc
pop
iret
mov
push
repz
mov
sti
jge
adc
sub
mov
ror
and
jns
int3
stos
xor
je
mov
push
sub
repz
cmps
scas
sar
xor
push
adc
push
or
push
jmp
jo
add
inc
cmp
lea
mov
fmul
cwde
xchg
fld
cli
ficomp
loopne
jmp
mov
mov
jno
or
dec
sbb
xchg
inc
mul
(bad)
sub
push
add
mov
and
pusha
inc
adc
push
adc
sub
scas
sub
jbe
nop
sbb
mov
test
hlt
and
sbb
stos
push
xchg
lea
xchg
lahf
cmps
shr
imul
loop
dec
das
stos
jbe
xchg
fwait
stos
jmp
or
xchg
nop
aaa
xor
fild
push
or
rcl
cwde
xchg
lea
mov
ret
test
shl
sub
xchg
sahf
out
mov
ss
sub
cmps
hlt
dec
push
mov
xchg
add
mov
icebp
adc
and
ror
adc
and
loopne
mov
arpl
mov
test
(bad)
cmps
xor
iret
data16
dec
ds
xor
and
push
xchg
mov
xor
push
movs
adc
adc
loopne
test
mov
mov
cmp
gs
adc
retf
das
sti
xchg
shr
(bad)
stc
adc
jle
xchg
jg
mov
gs
xchg
mov
add
mov
dec
lea
cld
add
and
mov
push
cli
pop
ds
xchg
sub
mov
test
xchg
and
shr
pushf
inc
xchg
inc
mov
js
ficom
sbb
jne
aam
mov
xchg
inc
cli
loope
lahf
mov
shl
test
fwait
mov
jp
ret
mov
inc
in
add
mov
pop
xor
sbb
push
stos
pop
sbb
icebp
mov
nop
es
loopne
les
pop
or
xchg
movs
push
jl
fisub
cmp
popf
and
rcr
adc
fadd
repnz
int3
mov
fisttp
hlt
or
not
fs
inc
or
mov
sbb
xlat
xchg
push
and
daa
pusha
xor
adc
mov
mov
push
ror
xlat
fsub
repz
cmp
mov
sub
mov
sbb
leave
xor
xor
jae
call
xchg
dec
adc
fcom
push
sub
cmps
pop
enter
or
mov
pushf
mov
pushf
cwde
stos
inc
in
mov
loop
lock
sub
jmp
mov
imul
outs
ror
mov
push
dec
xchg
mov
(bad)
sub
aas
les
jl
or
pop
mov
inc
push
lods
adc
inc
rcl
pushf
pop
sub
push
mov
out
jmp
xchg
cmp
scas
sbb
in
cmp
cmps
xchg
(bad)
jmp
cmps
add
xchg
sets
lods
sbb
dec
xchg
fistp
scas
nop
pop
lods
je
push
adc
cmp
push
cs
nop
loop
xchg
cmps
or
jmp
xchg
fiadd
or
xchg
das
stos
adc
adc
lock
js
sbb
(bad)
ins
adc
push
sahf
lds
add
mov
push
bound
xchg
jnp
jno
mov
movs
in
mov
cld
xchg
mul
inc
xor
fistp
adc
dec
mov
retf
nop
dec
test
xchg
jl
push
movs
add
xor
dec
adc
cmc
ja
xchg
adc
or
xchg
fldcw
cmps
aaa
cmp
xchg
adc
leave
and
into
or
cmc
or
mov
lods
add
pop
inc
mov
(bad)
jle
or
push
mov
xchg
les
xchg
femms
push
hlt
xchg
in
(bad)
adc
and
dec
scas
inc
ret
or
xor
xor
dec
sbb
xor
sbb
sub
pop
mov
cmp
nop
mov
dec
add
ss
or
ins
xor
(bad)
xchg
dec
cli
sbb
lfs
xchg
test
mov
mov
imul
ret
xchg
in
adc
es
sub
enter
push
xchg
pmulhuw
into
xchg
in
mov
call
adc
sub
mul
jne
in
add
shl
test
inc
jmp
jecxz
shl
js
int3
fwait
lds
xchg
or
mov
xchg
fisub
lahf
sbb
add
mov
sub
lahf
aaa
sbb
pop
movntq
pop
aam
xchg
mov
and
mov
fstp
in
cwde
ret
cwde
addr16
adc
jbe
jle
push
mov
shr
mov
cmp
inc
xchg
push
ret
or
sub
xchg
xchg
pop
dec
mov
pop
xchg
lahf
pop
stc
adc
cdq
popa
xchg
sti
push
inc
jne
gs
shl
sbb
(bad)
aad
inc
mov
inc
int
xor
js
popf
pusha
and
popa
hlt
aam
(bad)
rcl
gs
mov
adc
into
paddb
xchg
(bad)
mov
movs
fcom
or
ret
sbb
xchg
mov
jl
pop
ret
inc
cmp
xchg
into
call
xchg
aad
jp
mov
ja
jl
mov
bound
jp
xchg
int3
stos
outs
sti
dec
fiadd
jmp
adc
or
sub
out
mov
aad
cmp
pop
adc
xor
mov
test
rcr
fwait
and
adc
and
aas
xchg
xchg
movs
adc
pop
push
xchg
cli
movs
or
mov
sub
cwde
mov
mov
fisttp
(bad)
cmp
je
jg
xchg
mov
loopne
imul
test
test
jp
retf
jge
imul
retf
test
push
loope
push
in
dec
mov
ss
mov
xchg
xchg
pop
adc
cmp
sbb
int3
shl
cdq
adc
jae
xchg
xor
loop
mov
call
pop
adc
je
sbb
ins
icebp
jmp
jno
xor
hlt
dec
test
test
add
jge
loop
sbb
xchg
dec
jecxz
dec
mov
jg
cmp
shr
push
sbb
add
(bad)
mov
fnstcw
mov
int3
cdq
cld
stos
mov
fs
cmp
jmp
in
sub
push
xchg
test
mov
icebp
lods
popf
je
test
pop
mov
retf
cmp
inc
popf
out
dec
data16
push
push
xor
(bad)
xor
push
add
(bad)
(bad)
mov
adc
or
in
xchg
mov
rcr
sub
adc
xchg
mov
das
or
xchg
mov
cmp
mov
call
or
stos
sbb
xchg
loope
imul
xor
xor
ins
and
adc
das
out
xchg
and
jo
pushf
out
mov
xchg
sahf
call
sub
fisub
adc
jmp
xor
cdq
cmp
ret
xchg
cmp
lods
push
jl
xchg
int
jns
xchg
add
pushf
dec
sub
(bad)
sti
int3
sbb
mov
and
popf
test
push
jmp
push
or
inc
jp
xchg
xchg
dec
shr
fmul
je
not
xchg
fmul
sahf
cs
sar
retf
not
mov
iret
mov
ret
and
scas
rcl
mov
mov
xchg
call
mov
sete
imul
xchg
(bad)
cwde
adc
in
stc
adc
in
je
jae
adc
sbb
test
fild
pop
int3
mov
xchg
xchg
mov
stc
push
test
jl
in
cmps
xchg
push
inc
test
sbb
mov
pop
daa
lea
les
xchg
sub
out
pusha
dec
push
ficom
lods
pop
mov
aaa
jae
dec
jecxz
jp
mov
xchg
sbb
and
xchg
lea
jge
jp
mov
jl
shr
jno
adc
rcl
mov
sar
and
mov
pop
push
push
xor
sbb
add
fstp
fwait
arpl
out
or
jmp
jp
outs
inc
cmp
rcl
aad
cmp
nop
and
adc
icebp
das
pop
int
ret
inc
cdq
adc
xchg
adc
push
add
cld
pop
pop
xchg
fbld
fcomi
(bad)
daa
xchg
dec
push
xchg
sahf
(bad)
or
fcom
test
popf
aas
xor
call
mov
into
js
ins
test
out
mov
xchg
or
inc
mov
dec
cwde
cs
je
pusha
jnp
xchg
sub
inc
or
pop
and
(bad)
retf
pop
stc
jno
pop
ins
out
jg
xchg
dec
mov
mov
imul
pop
ss
adc
in
inc
repnz
in
outs
or
adc
retf
adc
rcr
rol
mov
sti
loope
adc
add
div
xchg
retf
dec
xchg
cmps
cmp
xchg
fbstp
xor
(bad)
pop
or
add
xchg
mov
xchg
pop
fs
or
add
clc
cmp
ss
dec
test
xchg
mov
fld
sbb
ror
or
push
and
mov
int3
mov
xor
cli
pusha
cmc
popa
aas
xchg
ret
inc
cld
push
mov
ins
inc
and
int3
pop
scas
xchg
icebp
imul
mov
movs
movs
pop
pushf
inc
retf
stos
xor
fcom
dec
mov
push
cld
not
pop
(bad)
mov
pop
dec
int
or
add
sbb
shl
xchg
cmps
sbb
mov
popf
xchg
shl
mov
add
sbb
xchg
dec
sbb
lea
xchg
shl
ret
inc
ins
fdiv
bound
mov
adc
xchg
xchg
mov
push
xchg
loopne
jno
sbb
in
push
xor
sub
xchg
adc
lahf
xchg
mov
mov
aaa
mov
(bad)
stos
xor
push
mov
cli
jbe
adc
sub
push
xchg
mov
seta
mov
mov
xchg
add
repnz
adc
push
adc
scas
fchs
hlt
ins
nop
xchg
movs
cli
add
gs
into
out
ja
push
xor
movs
(bad)
xchg
shr
inc
shr
xlat
or
inc
mov
xchg
fs
adc
sbb
cmp
cmp
ret
aam
daa
mov
fcom
mov
test
fiadd
mov
aam
aas
mov
les
cdq
and
pop
je
ins
and
inc
adc
enter
jmp
aas
and
clc
pop
pop
sub
xchg
push
scas
mov
aaa
xchg
mov
cld
mov
rcl
push
or
mov
out
xchg
mul
rcl
pop
out
jecxz
daa
call
jecxz
rcl
xchg
cld
loopne
mov
push
pop
enter
xchg
into
pushf
sbb
loopne
clc
jl
enter
mov
frstor
pushf
and
imul
test
or
push
inc
jl
sub
mov
cmp
pusha
push
xchg
dec
pop
push
gs
mov
and
aas
pop
xor
pop
iret
arpl
xchg
test
loopne
ret
imul
les
or
xor
shl
pop
xchg
or
jmp
xchg
add
es
or
xchg
rol
stc
or
inc
add
add
mov
fcomp
in
jl
xchg
int3
adc
adc
adc
sub
movs
out
test
into
adc
and
aad
dec
mov
(bad)
out
lea
sbb
add
nop
out
xchg
sub
shr
xor
sar
cmp
adc
xchg
jb
das
adc
out
sub
xchg
dec
adc
add
lahf
(bad)
pop
xchg
and
das
mov
adc
add
stos
inc
std
sbb
and
rol
xchg
jae
mov
fwait
cs
jno
sbb
in
mov
push
mov
add
in
fidiv
xor
mov
std
ja
fwait
and
pop
ficom
js
mov
inc
out
in
test
push
jae
or
aaa
rol
sbb
mov
arpl
pop
xor
push
inc
cld
jbe
mov
aam
mov
pop
popf
xchg
out
sbb
jnp
inc
push
mov
scas
(bad)
xor
jbe
ror
cmp
mov
mov
push
xchg
mul
and
sub
xchg
adc
and
xor
add
dec
mov
jle
dec
xchg
(bad)
push
std
iret
mov
push
stc
sbb
repnz
inc
push
mov
jmp
rol
xchg
push
jge
or
xlat
imul
inc
imul
and
in
dec
shl
xchg
inc
test
xchg
mov
adc
ret
aam
hlt
xlat
sar
and
ds
sub
nop
inc
push
jnp
mov
cld
popf
xor
mov
or
xchg
inc
jg
repz
mov
cmp
dec
ds
xchg
jae
push
hlt
in
ret
inc
dec
pop
out
fadd
lods
mov
shl
mov
push
test
lods
adc
cmp
pop
jne
jecxz
inc
fs
test
je
hlt
sub
inc
imul
push
add
add
jno
push
in
clc
aaa
es
push
sbb
inc
mov
lods
in
jg
fwait
pop
xchg
cli
test
in
test
minps
push
cmp
clc
cwde
int3
cld
cli
sub
hlt
jge
or
cld
jmp
dec
rol
ret
pop
xlat
pop
ss
or
sbb
in
add
xchg
or
push
add
fcomp
pop
adc
and
dec
xchg
in
outs
test
aam
je
mov
int3
and
inc
bound
jecxz
pusha
sub
dec
(bad)
cmps
xchg
jbe
add
sub
or
adc
inc
sahf
adc
dec
outs
mov
cli
into
xchg
or
jge
outs
in
mov
test
jb
std
jno
or
mov
push
ret
lock
scas
fisttp
cmp
xor
mov
scas
ret
popa
mov
jecxz
cmp
fcom
(bad)
and
inc
hlt
mov
aaa
mov
dec
jbe
jae
or
dec
lock
rol
bound
vmovapd
mov
aam
sahf
xchg
jno
jl
push
in
int3
inc
ret
retf
nop
pop
xchg
adc
ds
test
rcr
add
icebp
mov
xchg
sbb
aas
mov
and
loop
lea
add
(bad)
fsubrp
pusha
push
mov
movs
fidiv
xor
push
(bad)
aam
adc
pop
sahf
lods
dec
imul
mov
les
aad
xchg
test
call
jge
fisubr
call
addr16
mov
xor
setns
shl
cmp
adc
adc
mov
retf
pop
xchg
fist
pop
sbb
out
js
jge
mov
lea
add
rcl
fdivr
out
pop
push
aas
mov
pop
jmp
aas
rol
aas
and
aas
pop
mov
fdivr
and
fbld
or
aas
cmps
sub
jmp
mov
iret
mov
add
adc
hlt
(bad)
ror
movs
jle
or
test
jp
push
aas
lahf
lahf
out
out
jmp
jle
test
jmp
fs
out
test
pushf
jl
les
enter
mov
push
push
fst
scas
loope
ja
sbb
mov
xchg
inc
ins
das
test
xor
inc
pop
test
sahf
call
cwde
aas
mov
inc
test
mov
xchg
icebp
cmp
xchg
push
mov
cmp
xchg
pop
jp
push
and
cli
add
scas
test
inc
jno
es
inc
sbb
addr16
cwde
cmc
call
js
xchg
jmp
dec
repz
aad
fmul
jp
movs
inc
cli
push
push
es
xchg
and
cwde
xor
xchg
outs
(bad)
xor
push
aas
in
daa
rcr
or
cmps
mov
xchg
add
xchg
mov
sub
in
ret
iret
add
hlt
stos
stc
xchg
xchg
or
(bad)
cmp
fdiv
pop
jmp
aas
add
out
icebp
xchg
mov
xor
in
mov
mov
rol
call
jnp
adc
jl
xchg
or
xchg
cmp
out
fcom
xchg
inc
jae
movs
shr
cmps
jbe
cmp
inc
dec
jl
xchg
js
xchg
pushf
test
inc
je
jns
mov
stc
inc
inc
in
and
aam
pop
and
inc
stos
call
adc
mov
or
push
xchg
inc
or
sbb
xchg
push
movs
ret
pop
retf
mov
mov
clc
retf
xor
cmps
imul
fistp
add
out
fimul
fnstcw
fdiv
shl
pop
mov
ficom
imul
(bad)
cmp
adc
cli
lods
jmp
fcom
dec
gs
xchg
repnz
daa
jns
inc
mov
sbb
iret
jg
inc
out
movs
imul
loopne
pop
imul
ins
dec
loop
inc
inc
fnsave
sub
out
mov
pop
es
call
xchg
pop
inc
pop
jne
xchg
imul
jo
je
xchg
int
inc
dec
xchg
ds
mov
(bad)
xchg
xchg
adc
and
xchg
aas
mov
pop
outs
dec
ins
aas
xchg
mov
adc
adc
mov
fcmovnb
call
cs
xchg
imul
enter
ror
xchg
jns
push
mov
cmp
or
aam
scas
cmp
mov
(bad)
cmp
shr
aas
mov
xchg
pop
out
mov
cwde
mov
jg
inc
mov
sbb
push
inc
adc
mov
fidivr
stos
sti
dec
fst
xchg
cwde
pop
push
jne
inc
movs
(bad)
shl
adc
and
xchg
xor
cmp
dec
pop
mov
cmp
sub
loope
jg
das
sbb
mov
mov
mov
imul
push
fimul
xchg
dec
sti
or
xchg
in
or
xchg
fs
adc
pop
test
xor
out
ficom
popf
mov
mov
cdq
mov
xchg
fs
jp
dec
push
dec
out
mov
(bad)
xchg
in
jg
gs
mov
pushf
cmps
and
push
xor
cmp
inc
push
xchg
jle
push
popa
sub
mov
adc
mov
mov
pop
stos
push
and
popa
adc
push
or
outs
(bad)
xchg
mov
ja
pusha
imul
or
mov
mov
pop
mov
outs
nop
inc
xchg
in
aaa
cmps
rcr
sub
gs
dec
and
mov
cmp
and
iret
je
jnp
fwait
arpl
mov
es
and
jp
xchg
dec
xchg
mov
psubsb
xchg
icebp
jns
popf
add
lods
stos
inc
movs
into
mov
xor
hlt
jno
jmp
(bad)
int
mov
je
pop
cwde
inc
xchg
cmps
push
sbb
xchg
leave
or
jb
dec
lahf
test
inc
jns
fdivr
push
loopne
xchg
jae
sbb
(bad)
fwait
push
popf
mov
push
sbb
xchg
jg
lds
push
adc
xor
push
xchg
jbe
shl
jo
popf
mov
xchg
and
repnz
or
mov
xchg
push
cdq
or
aaa
adc
pop
push
add
xchg
daa
push
arpl
xchg
cmp
xor
adc
xchg
dec
ds
mov
jge
in
cmp
jno
xor
adc
push
cli
sub
xchg
loopne
test
adc
or
ret
add
xchg
lods
dec
dec
das
lods
lds
pop
xchg
mov
push
jbe
aas
cmps
xchg
xchg
xchg
jle
cwde
or
movs
aam
jo
or
lods
pop
xchg
ss
in
jbe
push
mov
adc
xor
es
test
mov
xchg
fdivr
xchg
repnz
cld
xor
outs
sbb
jmp
setnp
add
mov
aad
xchg
push
(bad)
adc
xchg
outs
inc
pushf
(bad)
and
cmp
xchg
push
mov
sti
sbb
mov
ins
xchg
out
je
call
jecxz
rcr
mov
mov
inc
mov
popa
stc
mov
aaa
xchg
(bad)
cli
fld
int3
dec
and
xchg
fisub
push
pop
cmp
jp
mov
sbb
mov
sahf
mov
ror
in
loopne
add
jge
ss
aad
fsubrp
or
outs
xchg
and
pushf
mov
xlat
clc
xor
arpl
mov
adc
adc
jbe
mov
das
repz
lods
cld
cmp
frstor
ds
inc
adc
jecxz
xor
xchg
jl
jmp
enterw
cwde
imul
mov
je
cld
mov
fninit
jmp
neg
sub
push
stos
mov
mov
pop
xchg
mov
frstor
or
mov
cmp
xchg
fs
adc
mov
test
stos
test
dec
cmp
and
retf
xchg
cmps
les
mov
(bad)
mov
mov
xor
aam
adc
in
jmp
mov
int
or
outs
shl
adc
loopne
xor
pop
pop
imul
push
sub
aam
test
cld
sbb
add
xchg
cmps
sbb
dec
jge
popa
jl
mov
call
inc
les
xchg
in
cdq
mov
sbb
mov
push
cmp
sbb
xchg
addr16
jns
jno
aaa
jbe
lea
or
sbb
xor
aaa
adc
jmp
lock
lds
adc
jge
rcl
mov
xchg
cld
add
push
hlt
xchg
mov
loop
inc
shl
add
mov
dec
lock
cmps
jge
cld
mov
lea
sbb
and
cmp
hlt
fistp
in
sbb
xor
daa
pop
repz
mov
xchg
mov
and
or
sbb
int
outs
leave
xor
pop
jle
mov
or
xor
mov
jl
cmps
dec
clc
sub
cwde
cmp
ins
test
in
in
add
push
dec
sbb
xchg
push
lods
sbb
retf
sbb
mov
push
nop
bound
ror
push
or
mov
inc
call
ja
jle
cli
xchg
fwait
jb
dec
xor
mov
lods
inc
push
shl
les
test
or
xchg
fdivp
es
cwde
lea
sub
xchg
add
cld
and
es
fist
xchg
outs
hlt
fiadd
fist
popf
arpl
sbb
sbb
push
jnp
or
loop
movs
aam
sub
xchg
arpl
xlat
out
mov
retf
xor
xchg
int
sub
mov
xchg
cmp
pop
push
jmp
jecxz
xor
lods
add
bound
fist
aas
xchg
dec
scas
iret
test
push
pop
bound
shl
inc
call
and
dec
xor
mov
add
xchg
jp
dec
jecxz
cmp
imul
push
cli
pop
jne
fild
push
pop
es
dec
pushf
jmp
adc
or
sahf
xchg
fisubr
das
xchg
push
sbb
mov
jmp
xchg
fwait
sti
ret
mov
dec
les
ret
jns
and
shl
ins
mov
fisttp
rol
jle
sub
out
adc
(bad)
pop
adc
jne
std
push
xchg
loop
push
xchg
push
dec
sahf
mov
das
xchg
cmp
daa
push
cmp
imul
xchg
call
xchg
jb
cli
ret
adc
xchg
shl
movs
test
cmp
xchg
xchg
imul
xchg
xchg
int
pop
call
stos
or
mov
lods
(bad)
(bad)
ret
pop
xchg
adc
fld
pop
popf
dec
add
mov
add
stos
cmp
cmps
pop
cmc
icebp
mov
(bad)
(bad)
leave
mov
adc
xchg
push
mov
pushf
lds
push
or
xchg
in
sub
sub
adc
mov
adc
pop
inc
lea
lods
cwde
ret
stos
pusha
mov
cwde
jb
add
loope
bnd
mov
mov
inc
cmp
mov
dec
xchg
cli
sub
enter
and
xchg
sbb
mov
xchg
adc
inc
imul
push
jl
mov
scas
cwde
idiv
jb
pop
mov
cdq
in
mov
jne
adc
pusha
rol
lahf
inc
jno
fdivr
push
dec
mov
jmp
push
cmps
stos
ds
adc
nop
sub
sbb
jmp
mov
push
adc
mov
int
adc
pop
mov
jne
push
sub
es
ins
push
lods
daa
adc
lea
pop
adc
stc
adc
retf
and
dec
hlt
mov
aas
test
pop
cdq
fidiv
pushf
mov
pop
sbb
cmp
hlt
ins
aad
add
mov
outs
mov
and
adc
mov
push
mov
cdq
pop
xchg
outs
mov
push
je
mov
imul
jno
xchg
pusha
iret
push
mov
push
mov
outs
and
int3
xor
xchg
adc
rol
(bad)
fwait
jmp
lods
xchg
sbb
int
mov
push
iret
pop
xchg
adc
mov
nop
mov
and
je
cmps
test
jecxz
out
xchg
cmps
das
xchg
sub
outs
inc
inc
cdq
inc
xor
sahf
push
dec
xchg
push
xchg
iret
push
cmp
aam
adc
mov
test
xor
xchg
js
jecxz
dec
fwait
push
pop
xchg
hlt
aam
test
xor
pop
mov
xchg
xlat
test
cmps
xchg
mov
jge
aad
mov
test
rol
push
inc
xchg
adc
ficomp
mov
xor
lahf
ret
pushf
cmps
jle
fist
xor
loope
pop
push
mov
xchg
xor
or
xchg
sub
clc
xchg
cli
ins
push
adc
outs
hlt
jo
not
mov
leave
jmp
jg
retf
test
or
cmp
inc
cmp
fwait
or
cmp
dec
out
movs
hlt
leave
push
adc
push
hlt
jmp
in
cmp
rcl
mov
popf
pop
repnz
dec
in
dec
inc
aam
mov
mov
pop
int3
cmp
imul
sub
add
xchg
nop
pop
leave
je
add
cwde
push
mov
imul
nop
mov
mov
mov
cmc
aam
xchg
sbb
xchg
adc
loop
lock
aad
and
mov
(bad)
shl
(bad)
mov
cwde
inc
add
clc
cmp
pop
cld
pop
pop
inc
fisubr
mov
xor
mov
daa
mov
icebp
ret
jmp
aaa
push
sti
push
mov
shl
in
xchg
and
fidiv
push
jp
(bad)
mov
and
pop
addr16
(bad)
xchg
repnz
in
cmp
int3
mov
lahf
jne
dec
inc
xor
jns
(bad)
push
xchg
(bad)
push
cmps
pop
aam
aas
pop
mov
mov
adc
and
ds
arpl
outs
dec
push
xchg
dec
inc
lods
retf
hlt
xchg
mov
sub
jae
cld
and
inc
mov
mov
movs
int
jo
stos
xor
dec
xchg
pushf
adc
adc
stos
loopne
lahf
xchg
inc
and
inc
mov
outs
dec
nop
cmp
mov
sbb
lahf
pop
aaa
shl
icebp
and
hlt
mov
je
xor
pop
or
push
dec
inc
movs
ins
inc
lahf
mov
sub
(bad)
cli
add
mov
inc
push
fcom
adc
std
arpl
pop
mov
aaa
inc
retf
xchg
aam
cmp
fs
mov
out
rcl
push
dec
mov
test
inc
xchg
lahf
repz
fstp
sbb
adc
mov
xchg
xchg
sbb
les
imul
jmp
xchg
sahf
and
and
xlat
xchg
stos
ins
adc
movs
js
xchg
mov
jg
leave
popf
cmp
xchg
call
rcr
sti
mov
sahf
je
xchg
fwait
aam
or
jecxz
sbb
mov
xchg
jl
push
out
cmps
xchg
add
out
and
mov
rcr
jg
cli
add
inc
shl
sbb
clc
pop
loope
rol
push
add
push
mov
mov
sar
push
ds
adc
sub
rcl
inc
pop
stos
enter
fwait
loopne
push
xchg
div
xchg
or
sahf
push
add
xchg
mov
mov
push
mov
imul
ss
and
adc
mov
xchg
iret
loopne
sub
les
xchg
mov
repz
sbb
fwait
or
ds
sbb
mov
aam
sub
rcr
sbb
data16
sbb
daa
stos
scas
(bad)
adc
pop
jbe
jge
test
fistp
rcr
push
or
and
mov
xor
pop
sahf
scas
push
ss
sbb
mov
jl
ds
mul
mov
lock
cmc
popf
mov
sub
dec
ins
inc
jb
popf
xchg
cmc
fistp
popa
mov
stos
lock
jmp
push
loopne
dec
stos
xor
jl
jecxz
mov
fsub
push
fwait
nop
fdivr
retf
and
adc
or
inc
cmp
in
mov
sbb
adc
push
ror
xchg
pop
lahf
mov
push
jmp
movs
jge
inc
mov
push
mov
scas
(bad)
pop
and
xchg
xor
idiv
jb
xchg
inc
add
mov
xchg
mov
or
mov
loopne
popf
jg
cli
in
daa
dec
dec
ja
mov
mov
push
xchg
cmp
and
outs
xchg
push
xchg
into
sub
(bad)
xor
inc
xchg
adc
jle
sub
inc
movs
(bad)
mov
mov
adc
push
out
xchg
xchg
fxch
(bad)
xlat
jno
jb
test
cmp
fdiv
xchg
pop
ret
inc
ret
mov
dec
xor
rcl
xchg
outs
add
xchg
xchg
out
fmul
loope
out
or
popf
fwait
jmp
sbb
add
mov
ret
outs
xchg
and
(bad)
and
ror
setns
or
jmp
js
jbe
cwde
fidiv
fs
enter
ins
cmp
sbb
jne
stos
mov
fadd
pop
pop
outs
(bad)
jp
xchg
jbe
retf
(bad)
pusha
repz
daa
cmps
lods
jl
ficom
out
movs
loop
stos
push
fwait
adc
outs
out
fs
jl
mov
sbb
push
mov
aam
(bad)
push
inc
shl
(bad)
outs
pop
aas
das
push
sub
out
mov
add
ficom
and
jl
xchg
adc
pusha
es
scas
add
jb
repz
sbb
mov
and
retf
or
cdq
mov
push
xchg
ret
(bad)
(bad)
(bad)
mov
add
ins
mov
outs
adc
pop
push
cmp
xor
jo
xchg
ror
adc
test
or
loop
cld
jmp
mov
xchg
in
xchg
mov
test
inc
mov
xchg
sbb
mov
repnz
sbb
mov
enter
lock
pop
mov
aas
js
sbb
lods
fist
cld
(bad)
std
jmp
arpl
cmp
jecxz
popf
xlat
mov
in
sbb
sub
push
aas
push
and
sbb
fdivrp
xor
sbb
xchg
or
icebp
sub
xor
mov
sti
movs
cmp
xor
mov
sbb
adc
or
mov
mov
fldenv
cmps
xor
pusha
or
aas
cmp
hlt
aad
loop
and
push
cmps
adc
loope
and
jl
push
dec
mov
jmp
out
mov
adc
mov
pop
enter
adc
mov
stc
loopne
sbb
mov
xor
cdq
mov
jmp
neg
push
xchg
sub
ss
jl
std
mov
fdiv
adc
addr16
mov
loopne
repnz
sbb
and
and
ins
cmc
loope
in
adc
add
mov
daa
xchg
fisttp
test
cs
or
xchg
gs
jae
adc
int3
cdq
(bad)
fbld
mov
fidivr
ficom
iret
xchg
loop
xor
inc
leave
xchg
adc
loopne
into
xchg
add
bound
ss
mov
mov
xchg
xor
jecxz
mov
das
(bad)
add
xchg
xchg
out
dec
test
dec
jecxz
movs
rol
adc
xchg
push
(bad)
rcr
inc
sahf
clc
jecxz
dec
or
rcr
enter
adc
lds
add
stos
push
mov
(bad)
push
scas
mov
xchg
cmp
fcom
or
sub
adc
and
popa
js
pop
in
cli
sbb
pop
cmc
jmp
sbb
sbb
pop
xchg
jle
test
lods
fld
call
sub
xchg
leave
jge
imul
data16
clc
xchg
inc
pushf
pop
mov
mov
xor
(bad)
cmc
inc
in
loope
xchg
mov
xchg
xlat
or
jmp
xchg
dec
imul
mov
xchg
mov
push
cbw
lds
rcr
in
inc
inc
add
je
lea
cwde
push
test
jb
adc
add
xchg
les
sub
test
outs
push
ficom
jne
mov
xor
mov
inc
adc
and
xchg
dec
xchg
shr
xchg
mov
scas
sub
push
xchg
pop
mov
cmp
xchg
adc
push
arpl
outs
push
fwait
cdq
add
cmp
xchg
int
das
mov
xchg
xchg
movs
in
rcr
push
loop
jg
icebp
xor
shr
mov
dec
xchg
xlat
js
xchg
push
or
xor
pop
xchg
outs
outs
and
jle
and
call
mov
xchg
dec
es
aam
and
mov
mov
sub
sbb
addr16
pop
inc
clc
test
dec
xor
mov
cs
xchg
sub
push
sete
sbb
cmc
xchg
out
sub
and
xchg
in
cmp
xchg
aam
pop
xchg
jo
xchg
push
sti
dec
sbb
cmp
or
icebp
push
cmp
dec
retf
cmps
test
ds
outs
dec
cmps
pop
xchg
aad
push
enter
sub
inc
adc
push
dec
pop
cmp
push
lods
hlt
call
aaa
test
out
rcr
out
arpl
in
mov
xchg
(bad)
and
adc
sbb
lock
pop
or
xchg
enter
call
aad
ret
ja
cmps
push
adc
imul
xchg
cmp
push
call
daa
jle
sbb
es
mov
lahf
xor
jge
xchg
xchg
int3
add
loop
(bad)
mov
sbb
and
dec
or
jp
in
xor
mov
pop
movs
std
retf
mov
jo
sub
pop
inc
fwait
push
mov
sub
and
(bad)
ss
sbb
push
out
inc
cwde
fwait
cmp
pop
xchg
adc
loope
push
xchg
retf
das
sbb
push
sub
sbb
mov
jecxz
mov
(bad)
ja
test
xchg
sahf
dec
test
xchg
scas
mov
sub
outs
cmp
xchg
iret
jae
adc
mov
mov
mov
xchg
mov
cmps
push
jae
mov
push
add
push
push
rol
mov
mov
add
add
movs
adc
and
mov
fcom
push
stos
repz
jmp
mov
push
adc
sub
test
test
xchg
ret
jmp
xor
fsincos
mov
pop
repnz
xchg
arpl
mov
adc
gs
cmps
shr
adc
jmp
repz
dec
int3
and
dec
push
retf
xchg
arpl
mov
or
dec
xor
ds
fcom
imul
xchg
(bad)
sahf
sbb
loopne
xor
inc
xor
outs
mul
and
gs
jmp
dec
adc
mov
sbb
push
fsubr
repz
fld
lea
fist
popa
mov
sbb
mov
cmp
xor
jne
jae
stc
jmp
push
sbb
mov
lock
fcom
cmp
mov
mov
(bad)
adc
sbb
mov
call
mov
sbb
push
jmp
push
fdivr
lahf
test
sbb
inc
push
jge
rdtsc
sbb
xchg
dec
jle
iret
and
ja
or
rcl
nop
jge
adc
pop
shl
and
push
xor
sti
add
pop
and
les
(bad)
out
xor
call
mov
push
add
inc
call
les
cmp
(bad)
jl
jmp
lock
jp
xchg
inc
fwait
in
push
and
cdq
cmp
adc
fnsave
loopne
scas
add
fs
scas
xchg
test
aad
dec
(bad)
mov
daa
cdq
ficom
addr16
mov
icebp
push
inc
cdq
test
xlat
jmp
ss
pusha
mov
jl
test
push
pop
dec
sbb
movs
fnstsw
popf
sub
nop
or
adc
push
mov
pop
push
dec
push
dec
in
call
mov
sub
mov
repz
mov
shl
inc
mov
inc
loopne
pop
and
add
shl
jbe
aam
push
xchg
xchg
jle
jecxz
inc
and
adc
cmp
(bad)
in
push
mov
ret
jle
mov
push
cs
ret
clc
test
jp
push
pop
stos
cld
xchg
pop
pop
ins
hlt
mov
scas
loopne
push
imul
dec
lahf
test
bound
(bad)
clc
add
push
pop
push
mov
jl
sbb
jb
jge
call
mov
into
sbb
sub
(bad)
pop
jl
adc
push
inc
loopne
or
xchg
push
sub
ja
or
mov
sub
lds
pop
cwde
mov
aaa
imul
outs
cdq
xor
mov
loopne
out
adc
loope
mov
xor
pusha
mov
mov
(bad)
cmp
loop
into
dec
mov
dec
xchg
ins
hlt
inc
xchg
out
jge
je
fsubr
fidivr
add
pop
popf
sbb
add
cmp
cmp
mov
es
daa
imul
sub
(bad)
aam
jge
ret
pop
cmp
mov
cwde
das
mov
xchg
test
inc
dec
mov
push
test
and
or
xor
aaa
xchg
jo
push
sar
mov
lds
mov
arpl
jae
mov
add
test
xchg
adc
adc
imul
xchg
xchg
push
xchg
pop
and
fcom
aaa
(bad)
shr
xchg
into
test
pop
xchg
sbb
jmp
aam
mov
xor
sti
push
fs
push
int
mov
int3
lea
sbb
cwde
add
mov
(bad)
xchg
adc
idiv
icebp
sbb
push
sub
xchg
out
fsub
pop
fisub
xchg
fbstp
pop
nop
mov
enter
dec
dec
add
aas
stos
pop
pop
jmp
adc
jmp
icebp
xchg
lods
adc
and
mov
ffreep
rcl
mov
mov
enter
mov
rcr
aad
inc
mov
aas
sbb
mov
cmps
xchg
add
adc
sub
stos
iret
lahf
outs
pop
idiv
sahf
xchg
jge
rcl
arpl
cdq
cdq
std
mov
sbb
pop
mov
add
or
push
nop
sbb
fwait
retf
adc
push
int
push
adc
shl
jnp
dec
xchg
add
in
pusha
or
cmp
mov
das
xlat
xor
dec
bound
adc
nop
cwde
in
stos
xchg
dec
aad
jne
sbb
int3
je
retf
and
mov
inc
in
xchg
cs
cdq
dec
(bad)
shl
mov
sahf
or
imul
cmps
pop
xchg
es
loopne
xor
adc
rcl
jmp
imul
cmp
loope
mov
push
mov
push
ins
push
aad
lahf
add
push
mov
cmp
mov
ficom
xchg
popf
sbb
cmps
xchg
cmp
(bad)
push
xchg
ds
xchg
mov
or
mov
jo
es
in
xchg
lds
into
cmps
dec
in
addr16
mov
ret
stos
jnp
xchg
xchg
cli
mov
jbe
popf
aam
pop
test
xchg
in
call
mov
xchg
or
mov
out
push
jmp
xchg
pusha
lahf
adc
mov
xchg
dec
xchg
adc
xchg
aaa
sti
icebp
fwait
add
inc
out
cli
xor
sbb
(bad)
jmp
sub
movs
dec
fwait
add
adc
dec
xchg
xchg
stos
cmc
xor
and
shl
xchg
cmp
xor
mov
loope
inc
mov
jne
ins
dec
pusha
or
mov
xor
jb
or
loope
loopne
xchg
movs
shr
mov
sbb
inc
add
(bad)
scas
cmps
mov
icebp
repz
adc
into
pop
clc
push
xchg
push
xchg
rcl
adc
jecxz
xchg
arpl
outs
xchg
sbb
mov
test
cli
xchg
hlt
mov
out
and
aas
pop
movs
inc
mov
jl
cmps
pop
lahf
test
pop
sbb
xor
dec
and
jbe
or
jl
jg
cld
inc
xlat
mov
(bad)
dec
popa
and
nop
js
movs
jbe
cwde
mov
or
dec
lock
fucomip
mov
and
cmc
xchg
xor
add
adc
cld
and
cwde
mov
in
bound
xchg
jne
lock
xlat
(bad)
sbb
(bad)
call
pop
(bad)
(bad)
out
mov
es
in
cld
sbb
int3
jge
out
loopne
in
shr
out
out
(bad)
popa
xor
cmp
leave
sbb
iret
and
into
les
mov
fs
popf
pop
adc
std
sbb
call
mov
mov
cmps
jge
jmp
jl
xor
xchg
sbb
mov
jge
dec
mov
movs
das
mov
repz
leave
hlt
mov
inc
mov
jge
enter
xor
gs
jg
cmp
addr16
lds
sub
inc
add
push
stos
clc
shl
xchg
xchg
push
xlat
xchg
stc
jne
pop
lahf
xchg
cwde
mov
mov
push
lods
inc
aam
ret
imul
ja
scas
sub
mov
xchg
cmp
rcl
cdq
jl
xor
xchg
mov
mov
cmp
ja
loopne
inc
or
inc
enter
xor
pop
imul
xchg
ret
lahf
aam
mov
sti
cmp
aam
(bad)
pop
inc
bound
(bad)
fadd
adc
stos
lock
mov
ret
nop
dec
cs
mov
gs
pop
jnp
pop
xor
mov
xchg
and
data16
cmp
pop
inc
dec
movs
popa
xor
dec
in
(bad)
sub
push
pop
mov
addr16
psrld
daa
je
sub
out
aam
jbe
mov
call
add
mov
adc
jno
xchg
stos
jecxz
scas
xor
aaa
fwait
pop
or
push
pusha
push
jl
adc
outs
sbb
int
sub
std
mov
sbb
adc
sbb
push
loop
movs
mov
fcomp
pop
adc
mov
mov
ror
cwde
cmp
loop
and
cmps
xor
push
cli
sbb
into
pusha
ins
jl
inc
and
movs
ins
je
lea
cmp
imul
jbe
push
pop
adc
sub
fiadd
jne
dec
cmc
mov
imul
popf
inc
mov
shl
cmps
fisubr
cmp
pushf
aaa
addr16
lahf
lock
pop
xchg
call
xchg
std
retf
xchg
adc
fnstsw
mov
cmp
cmp
sub
iret
xchg
aas
xchg
scas
jae
jg
in
cmp
retf
xchg
mov
lock
push
xchg
mov
test
push
test
push
dec
mov
pop
sbb
cmc
out
nop
add
(bad)
add
xchg
scas
cli
push
bound
add
inc
sub
mov
mov
hlt
inc
cwde
xchg
mov
jno
or
sar
ret
cmp
xchg
lods
imul
ins
xor
into
mov
jne
mov
call
hlt
mov
repz
(bad)
push
enter
les
ficomp
jbe
ins
cs
pop
mov
xchg
xchg
push
lock
pop
popa
xor
mov
jmp
jae
add
rol
movs
inc
xchg
aas
ffreep
dec
push
jle
push
xchg
dec
cmp
xchg
ficom
mov
sbb
in
and
xchg
mov
cmps
adc
test
sub
mov
popa
add
dec
xchg
repnz
jns
movs
fisubr
adc
xor
inc
out
push
sbb
xchg
add
outs
neg
push
sub
mov
adc
adc
xchg
xchg
out
and
pop
xrelease
xor
xchg
fstp
icebp
cmp
jns
pop
jno
or
mov
hlt
loop
xor
push
(bad)
aam
inc
jge
retf
fldcw
cmps
shr
add
or
sub
xchg
jne
lea
jg
xchg
into
nop
ret
pusha
sub
cmp
fisttp
mov
leave
mov
push
ret
xchg
int3
mov
pop
mov
adc
xchg
mov
repz
add
loop
add
stc
(bad)
and
or
xchg
push
dec
cmp
jae
inc
fs
addr16
std
jg
(bad)
aas
adc
or
inc
xor
push
xchg
retf
xchg
and
(bad)
outs
mov
xchg
xchg
xor
mov
dec
out
mov
xchg
mov
stos
add
jg
aas
push
adc
aam
push
and
pop
adc
mov
movs
rcl
pop
pop
push
cli
and
mov
mov
jge
jno
test
out
xchg
mov
sar
outs
mov
dec
fist
pusha
mov
mov
test
inc
xchg
daa
cld
jg
stos
sbb
js
lock
cli
call
adc
lods
pop
out
cmps
mov
ins
fstenv
lahf
jbe
adc
aad
ret
cld
pop
xchg
cmc
loop
sbb
out
mov
xlat
aam
mov
inc
mov
(bad)
mov
ja
das
xchg
pop
imul
stos
mov
push
adc
inc
hlt
jnp
xchg
ja
pop
jno
test
daa
fwait
pop
icebp
leave
(bad)
fidiv
sbb
rcr
fs
les
add
or
mov
sub
xchg
and
mul
aaa
push
sti
add
outs
ret
ja
sbb
xor
pop
leave
mov
sti
add
dec
mov
fs
adc
mov
stc
pop
fiadd
xchg
(bad)
fisub
cdq
or
push
push
ss
mov
xchg
push
jb
inc
xchg
(bad)
loopne
pushf
ja
pop
ret
xchg
or
fwait
cmp
int3
je
ret
xchg
and
not
ins
push
js
scas
jl
imul
mov
(bad)
xor
loop
mov
inc
xchg
stc
jb
call
je
fidiv
lea
popa
push
(bad)
jge
adc
(bad)
cdq
iret
(bad)
and
xchg
jle
mov
dec
mov
adc
je
xchg
movs
inc
out
in
mov
mov
cmp
xchg
je
mov
xchg
ins
rol
aad
iret
pop
out
psubb
mov
xchg
retf
not
int3
stc
lock
cdq
ds
ret
xlat
add
in
js
cmps
cwde
lahf
test
adc
scas
(bad)
push
push
int3
xchg
cli
je
fidivr
leave
xchg
push
jmp
xchg
clc
cmp
cmps
mov
pavgw
sbb
xchg
ja
sbb
aas
add
pop
leave
mov
sub
mov
xchg
stos
and
test
mov
dec
xor
out
in
sub
jg
mov
test
add
enter
xchg
xchg
into
adc
pop
jecxz
lahf
int3
fwait
jmp
inc
mov
push
push
div
and
das
fdivr
scas
xchg
fbld
pop
xchg
cmp
jae
test
iret
adc
xchg
out
test
jns
xchg
xlat
push
hlt
popa
push
mov
aad
pop
sar
vpcmpgtb
retf
xchg
push
dec
cmp
(bad)
mov
xchg
sbb
fcom
xchg
pop
test
pop
adc
pop
(bad)
xchg
push
mov
aaa
cmp
aas
(bad)
test
(bad)
into
jmp
fnsave
int
xor
pop
adc
imul
pushf
popa
cmps
les
dec
cld
popf
fs
inc
fisubr
mov
icebp
imul
sbb
or
ds
add
cmc
sbb
or
jns
mov
ja
inc
mov
mov
sub
cmps
fwait
cld
push
push
sub
push
cdq
sub
mov
or
stos
push
icebp
xor
and
sbb
cmp
pop
cmp
cld
inc
movs
test
jl
add
push
jns
cs
jb
xchg
inc
xchg
push
jne
mov
mov
xchg
inc
popf
shl
sbb
mov
push
fwait
xor
inc
inc
xor
test
sar
and
es
or
ficomp
push
sub
mov
outs
sub
(bad)
aam
inc
fmul
push
sub
pusha
mov
inc
outs
out
lahf
pop
icebp
repz
jl
std
pop
inc
movs
mov
in
fwait
dec
xchg
pop
xor
inc
push
adc
mov
je
adc
jp
nop
sub
pop
pop
test
xlat
ret
int
adc
mov
out
das
jg
mov
cld
les
mov
push
pop
push
mov
fisttp
hlt
hlt
push
push
push
lahf
cli
pop
inc
jnp
or
jne
stos
cld
sub
nop
loop
jmp
scas
jmp
or
and
icebp
sbb
imul
mov
mov
mov
lock
or
xchg
mov
sbb
and
dec
nop
call
adc
pop
test
add
sub
lea
adc
and
in
arpl
enter
in
mov
test
add
sti
adc
adc
add
or
jecxz
xchg
out
cdq
mov
ja
outs
push
iret
push
mov
jl
jmp
inc
or
aaa
cmp
fdivr
imul
xchg
hlt
retf
jmp
aam
outs
xchg
and
neg
pop
adc
and
mov
mov
push
and
sbb
jle
xchg
adc
sar
test
loopne
push
aad
(bad)
sti
into
xchg
(bad)
out
inc
outs
xor
out
xchg
fbld
jle
and
mov
push
jle
xlat
in
cs
mov
loopne
(bad)
pop
outs
push
xchg
cmp
mov
jecxz
mul
(bad)
xor
sahf
adc
jp
jbe
in
and
fwait
sub
push
xor
cmp
and
and
mov
push
in
jl
adc
xchg
adc
je
cmps
jno
pusha
(bad)
aaa
xchg
fistp
xor
and
xchg
int3
arpl
out
adc
sar
xchg
xchg
jmp
pop
xchg
ficom
sar
and
stos
in
mov
cmps
mov
jns
mov
adc
inc
retf
mov
pop
outs
push
or
cmp
mov
cmps
jns
dec
xchg
nop
add
jo
lods
xchg
arpl
pop
push
ja
pop
neg
pusha
sbb
rcr
xchg
arpl
out
sbb
mov
add
mov
xchg
pop
or
fadd
xchg
xchg
xchg
enter
xchg
stc
xor
in
mov
mov
or
cmp
mov
aam
fiadd
push
sbb
push
je
mov
int
mov
loope
adc
cmps
mov
lock
xchg
pop
mov
pop
or
pop
mov
sub
lods
jbe
mov
and
adc
xchg
mov
pushf
push
push
dec
(bad)
in
mov
test
in
sbb
mov
aas
mov
ret
stc
es
sub
imul
mov
addr16
or
pop
lods
adc
adc
sub
ret
cdq
cmc
outs
in
xchg
or
int
mov
xor
in
stos
inc
xchg
out
stc
sub
outs
imul
and
push
xchg
sahf
aam
clc
es
mov
mov
aam
jne
or
popf
and
add
pop
mul
push
jmp
jl
jnp
out
in
adc
test
test
std
test
xchg
nop
xchg
push
xchg
xchg
xchg
(bad)
ror
imul
shl
mov
ret
sbb
xor
adc
mov
push
xor
push
fs
jmp
int
push
(bad)
sar
jge
sub
dec
addr16
stos
cdq
ret
cmp
dec
push
inc
adc
(bad)
gs
in
jb
pop
shl
dec
rcl
xchg
adc
nop
xor
push
std
pop
in
cmp
xchg
xchg
fcom
mov
jbe
scas
or
repnz
push
xor
xchg
popa
jl
xchg
std
jmp
jmp
stos
loop
stos
xchg
add
jae
mov
rcl
xchg
add
jg
pop
xchg
xchg
int3
mov
aaa
push
push
mov
nop
and
xor
aam
test
mov
cld
jmp
jbe
std
es
stc
loopne
dec
popf
pop
sahf
mov
adc
stc
xchg
pop
sub
dec
(bad)
addr16
add
sub
cwde
jbe
mov
jnp
je
jo
xchg
lds
sbb
or
add
adc
sub
stc
mov
aad
xchg
jl
mov
mov
js
mov
cli
popa
lods
stc
xchg
xchg
pop
inc
xchg
push
xor
dec
shl
push
iret
xchg
adc
push
adc
(bad)
arpl
xchg
fadd
call
mov
xchg
xor
ds
push
sahf
xchg
les
pop
jo
sbb
icebp
pop
xchg
xchg
adc
ins
lods
mov
pop
int
jmp
aas
push
xchg
dec
mov
ins
cmps
xchg
pushf
mov
lods
jmp
mov
and
push
ins
xchg
inc
fst
fs
xor
popf
xchg
shr
aaa
sbb
call
scas
fs
sbb
ins
sub
int3
adc
out
out
sbb
dec
mov
push
inc
adc
(bad)
fwait
test
outs
mov
jb
xchg
pop
inc
test
cmp
adc
into
test
lds
repz
ret
ror
lahf
es
scas
mov
xor
lock
(bad)
xchg
push
pop
arpl
xchg
xchg
call
mov
pop
inc
pcmpgtb
or
xchg
fwait
inc
lock
enter
xor
push
mov
jle
adc
push
sub
dec
fwait
dec
sub
xchg
cs
mov
pop
pushf
xchg
test
inc
loopne
pop
jnp
ss
mov
jmp
mov
dec
test
mov
aaa
(bad)
dec
fprem1
jnp
in
pop
dec
jno
cli
retf
cdq
pop
fwait
sbb
and
mov
push
lods
pop
or
xchg
dec
aam
cmp
ds
or
cmps
lahf
je
cwde
mov
xchg
add
in
adc
xchg
shr
mov
xchg
(bad)
cmp
dec
mov
sub
push
xchg
sbb
aad
movs
cs
mov
cmp
neg
add
call
push
daa
out
xchg
outs
jge
push
stc
push
and
adc
ret
or
pusha
cmc
xchg
sub
adc
adc
xchg
or
and
fcom
mov
xor
loopne
jns
adc
pop
cmp
and
jg
sub
inc
cmp
test
test
xchg
mov
fwait
and
popf
lock
loopne
mov
push
add
cld
es
inc
daa
ss
xchg
call
scas
repz
mov
xchg
jge
les
mov
repz
xchg
ret
push
jmp
jg
cwde
adc
inc
sahf
inc
mov
sbb
adc
js
pop
push
push
and
push
jl
xor
pushf
fnstsw
mov
sbb
inc
jl
push
test
clc
mov
jmp
push
outs
data16
pop
fimul
push
dec
pop
dec
pop
xor
mov
pushf
iret
pop
mov
adc
xchg
pop
jge
int3
dec
xchg
and
xchg
or
cli
(bad)
push
mov
mov
call
xchg
jge
dec
pusha
push
add
dec
inc
inc
pop
test
pop
cwde
adc
punpckldq
daa
push
mov
inc
(bad)
xchg
stos
int
movs
nop
dec
xor
xchg
stc
adc
cwde
fisttp
xchg
push
mov
nop
xchg
ja
push
sub
iret
jecxz
inc
aas
lahf
imul
(bad)
in
pop
cmps
or
sub
adc
push
out
fs
dec
cli
sbb
adc
sahf
test
in
or
mov
mov
push
mov
cmp
rcr
add
xchg
ins
cmps
and
xchg
lods
in
jne
add
ror
xor
xchg
imul
not
fwait
out
rcl
xchg
sbb
xor
in
cdq
loop
xchg
mov
push
push
inc
lea
std
jb
loope
jl
sub
push
jge
xchg
push
inc
movs
mov
xchg
jp
xchg
in
inc
mov
mov
mov
xor
pop
test
mov
xchg
dec
std
inc
pop
mov
xchg
add
(bad)
pop
dec
pop
push
mov
jp
stc
sub
or
pushfw
and
inc
inc
ficom
in
add
dec
jmp
nop
cmp
dec
sahf
test
ret
jp
hlt
clc
push
hlt
xchg
stos
xor
lods
mov
mov
sbb
add
push
dec
adc
mov
and
fnstsw
pop
movs
mov
gs
mov
rol
xchg
stos
xor
cmp
xor
xchg
repz
test
cmp
nop
mov
xchg
std
jg
and
and
xchg
inc
pushf
xor
dec
mov
xor
adc
js
in
add
pop
mov
dec
pop
and
dec
daa
outs
add
adc
lahf
iret
add
pop
cli
pusha
push
push
xchg
fs
add
(bad)
cdq
inc
jge
add
xchg
pcmpeqb
fwait
inc
xchg
cmp
addr16
push
xchg
push
xor
popf
sbb
xchg
movs
sar
loop
jl
je
loope
xchg
jne
in
xor
adc
lods
clc
jo
pusha
and
jle
xchg
xor
imul
(bad)
fwait
ret
push
pusha
fwait
sahf
jmp
out
cmps
jg
mov
dec
xchg
iret
inc
mov
adc
or
cld
mov
inc
xchg
ins
mov
mov
xor
fwait
loopne
jne
jmp
sbb
shl
adc
jns
rcr
popf
inc
in
pop
and
dec
sar
and
imul
repnz
xchg
mov
mov
out
pop
xchg
aam
push
bound
adc
xchg
dec
pop
lods
add
adc
out
mov
add
push
cmp
das
mov
cmps
or
lods
movs
pusha
dec
mov
sbb
fidiv
sub
mov
enter
or
test
imul
es
jne
and
xchg
cmp
xchg
cmp
xchg
and
jmp
lock
push
sete
xchg
(bad)
jge
scas
ins
scas
xchg
repz
outs
inc
push
js
cmps
jnp
hlt
and
xchg
sbb
jmp
mov
popa
cdq
ins
test
xchg
xor
cmp
repz
js
jl
in
adc
(bad)
sub
(bad)
push
setne
pop
xchg
int3
hlt
cli
and
and
sbb
push
neg
mov
inc
jb
fidiv
push
xchg
rcr
fld
retf
and
push
and
and
ficom
call
xchg
enter
rol
mov
loop
dec
fstp
add
xor
inc
popf
scas
mov
and
int3
rol
mov
pop
mov
or
jo
ins
inc
push
xchg
dec
lods
inc
push
mov
dec
pop
retf
fs
inc
pop
(bad)
es
leave
add
add
lahf
push
xchg
js
fcom
adc
mov
sar
shl
jle
add
mov
cmp
or
and
xor
rcl
and
mov
mov
andps
les
jmp
mov
jg
adc
pop
sar
jmp
mov
jle
sub
xchg
shl
mov
mov
push
cld
push
ins
push
shl
cmp
adc
idiv
ror
leave
loop
es
test
and
dec
dec
mov
mov
aam
mov
lock
jmp
xchg
push
mov
ins
sahf
mov
cmps
imul
repz
shl
lock
das
jge
call
mov
push
dec
mov
rol
adc
icebp
or
adc
push
lock
jmp
push
cdq
or
cli
mov
iret
add
xchg
fwait
cld
dec
lahf
retf
andnps
out
outs
mov
mov
push
adc
or
xor
pop
push
rcr
pop
in
mov
sahf
mov
mov
jmp
lea
lea
adc
cld
sar
push
xor
aaa
rep
fstp
inc
mov
adc
sbb
ret
add
push
sub
push
pop
cmp
sub
pop
out
jbe
jno
jmp
cmps
loope
loop
lea
pop
jae
xchg
sti
fstp
xor
stos
sub
outs
xchg
ja
jle
push
mov
jae
push
dec
mov
push
jge
mov
sub
lds
in
dec
imul
jmp
dec
xchg
adc
xchg
mov
mov
in
mov
test
pop
dec
addr16
adc
outs
fdiv
retf
xor
mov
sub
jmp
inc
cmp
out
inc
sub
xor
or
push
(bad)
cmc
(bad)
adc
mov
xchg
pop
fdivr
cmp
fidiv
call
test
inc
inc
or
inc
ret
sub
inc
ja
dec
push
jmp
fdivrp
int3
js
adc
jo
not
mov
leave
jg
jmp
mov
xchg
ret
cmp
xchg
ror
xchg
xchg
mov
movs
mov
xchg
fisttp
sti
xchg
mov
dec
cmps
lea
cmp
mov
pop
fs
dec
dec
mov
inc
jg
sub
sub
stc
loope
xchg
jb
mov
call
stos
cvtdq2ps
ins
pusha
sbb
adc
loope
sub
xchg
sbb
ret
icebp
push
int3
mov
adc
pop
out
push
xor
mov
xchg
int3
cmp
call
pop
xchg
xchg
dec
movs
scas
int
sbb
xchg
test
jge
retf
push
mov
xchg
mov
in
arpl
stos
xchg
or
test
(bad)
mov
mov
xchg
lds
mov
ret
jbe
ss
pop
jb
xor
inc
lahf
popf
mov
push
iret
or
and
jnp
mov
mov
mov
inc
adc
mov
mov
movs
out
(bad)
cmp
add
xor
in
jg
pop
imul
add
lahf
and
jmp
xor
push
xor
push
push
out
jo
(bad)
sbb
stc
adc
cdq
pop
adc
test
dec
mov
cwde
fstp
jmp
gs
mov
mov
inc
jl
sub
neg
push
in
cwde
mov
jns
push
shl
push
pop
call
pop
mov
pop
or
xchg
shl
cmp
mov
xchg
div
pop
fld
sbb
daa
sbb
lds
mov
mov
and
std
mov
jle
mov
push
ffreep
jbe
jge
jb
xchg
adc
add
mov
enter
push
lahf
dec
sbb
dec
and
in
adc
push
rol
mov
jl
add
mov
sahf
data16
cdq
mov
iret
dec
imul
mov
sbb
out
jno
call
cld
scas
repz
enter
test
or
and
das
or
or
sahf
loop
sbb
stos
adc
sahf
xor
xchg
push
mov
push
lods
xchg
mov
int
add
or
jle
cmps
cmp
mov
call
out
in
imul
and
sbb
(bad)
jnp
inc
xchg
enter
sub
push
mov
loopne
in
xchg
mov
mov
xchg
test
mov
pop
stos
mov
xchg
push
js
nop
xchg
stc
jmp
mov
adc
push
inc
sub
es
xlat
std
cmp
dec
xchg
adc
(bad)
das
push
jns
push
xchg
shl
xor
push
push
mov
movs
mov
add
aas
fild
fsub
(bad)
cmp
je
cwde
ret
rcr
lahf
xchg
movs
cdq
push
mov
int3
sbb
xor
int
mov
leave
jl
scas
xchg
les
push
cmps
jecxz
xchg
pop
push
sbb
inc
imul
pop
xchg
pop
dec
inc
cdq
jno
or
xchg
daa
in
fiadd
lea
test
xchg
call
aam
or
lahf
sub
repnz
rcr
push
xchg
push
enter
jge
call
hlt
xor
nop
fadd
xchg
add
jmp
test
test
push
pop
push
dec
pop
xchg
xchg
imul
dec
mov
xchg
outs
in
pop
mov
xchg
sti
pop
adc
call
jge
ins
mov
and
addr16
data16
or
cdq
out
popf
xchg
or
sti
and
out
fndisi(8087
fldcw
lea
aaa
fwait
pop
and
es
mov
lahf
sbb
adc
jmp
aad
mov
jo
sbb
mov
out
test
xchg
pushf
add
jmp
cmp
cmp
loope
push
or
fisttp
xchg
xchg
or
mov
mov
xchg
in
cld
jo
call
lods
push
sbb
dec
int3
xchg
stc
sar
ret
mov
(bad)
mov
jb
xchg
fiadd
lods
cmp
mov
js
push
in
ja
and
sbb
dec
xor
(bad)
fmul
and
mov
push
movs
inc
jo
repz
lock
test
xchg
sub
sbb
adc
cli
jne
shr
cmps
data16
xchg
lds
jns
(bad)
xchg
push
sbb
addr16
repz
sub
movs
jb
sub
scas
xchg
or
hlt
sub
mul
xchg
cwde
xor
movs
xchg
shr
fs
cmp
mov
push
push
mov
movs
and
and
retf
jnp
(bad)
lods
push
xchg
dec
call
xchg
push
or
popa
xchg
mov
push
imul
mov
xchg
sbb
mov
mov
xor
cli
dec
xchg
xchg
jp
xchg
movs
sti
dec
out
xchg
in
mov
push
repnz
or
adc
mov
lahf
aas
or
xchg
imul
pop
jae
xor
addr16
inc
in
push
fcomp
xchg
jno
retf
cmp
mov
aaa
ins
test
mov
daa
pop
repz
(bad)
jae
jnp
or
xor
and
sub
lods
xchg
push
daa
xor
out
push
pop
xchg
scas
sub
jge
shl
shl
(bad)
ja
lods
jne
or
icebp
loop
stos
mov
fwait
and
lea
dec
mov
push
enter
mov
push
mov
(bad)
fwait
mov
clc
popa
push
jae
imul
in
pop
in
shr
call
fisub
ins
bound
pop
pop
sbb
add
xchg
retf
jmp
add
xchg
call
sbb
inc
xchg
xor
je
sahf
cwde
xchg
mov
imul
je
xchg
sti
push
mov
lods
xchg
cmp
fwait
outs
shl
iret
(bad)
mov
pop
pop
dec
xchg
and
ins
push
fdivr
and
jecxz
cmp
inc
xor
xchg
xchg
scas
sbb
xchg
xchg
stos
jmp
xchg
cmc
rcr
sbb
push
jge
add
cs
lds
fwait
inc
rol
icebp
sbb
stos
pusha
aad
lods
pop
maskmovq
div
xchg
dec
rcl
mov
or
inc
sub
mov
xchg
push
mov
clc
mov
ret
xchg
popf
pusha
sub
retf
leave
xchg
js
out
lds
xor
(bad)
jmp
cli
or
dec
cdq
sbb
retf
and
ror
xor
and
adc
mov
not
ret
xchg
mov
fdivr
ja
clc
push
pop
or
sub
mov
mov
loopne
mov
ror
push
xchg
xchg
stc
xchg
icebp
xor
lock
mov
xchg
scas
cmp
mov
fcomp
aam
ret
jl
ror
push
cwde
dec
xchg
mov
fwait
xchg
out
push
stos
pop
jmp
add
xchg
popf
mov
sar
cdq
jle
push
push
mov
je
mov
fnstenv
cmps
pop
jle
les
xchg
pop
push
sub
(bad)
ret
ins
iret
lds
xchg
fs
xchg
sbb
adc
pop
sub
jne
int3
pop
inc
push
adc
cmp
shl
inc
mov
mov
mov
iret
push
mov
xchg
les
or
daa
sub
xchg
rcl
inc
xchg
pushf
pusha
mov
xchg
addr16
pop
cdq
push
push
mov
repnz
cld
sub
arpl
and
push
leave
ins
mov
push
adc
xchg
xchg
xchg
jnp
or
sbb
mov
fst
add
xchg
icebp
and
and
mov
outs
not
fwait
inc
movs
pop
xchg
adc
dec
xchg
jl
inc
rcr
stos
mov
inc
xchg
adc
es
push
sub
inc
stc
cmps
xchg
fucom
cmp
mov
add
and
and
jmp
xchg
mov
push
inc
sub
out
sar
xchg
mov
je
scas
xchg
out
iret
mov
xchg
pop
in
(bad)
sbb
cdq
rcr
or
pop
cmp
inc
popf
cwde
inc
add
pop
(bad)
xchg
pop
xor
xchg
cs
pop
rcl
sub
xor
mov
ret
push
cmp
sbb
nop
cli
cmp
and
add
xlat
in
xor
jae
rcl
dec
sbb
cmp
in
and
call
adc
lock
and
xchg
or
jmp
jmp
bound
mov
in
xchg
fidiv
arpl
leave
xor
xchg
cwde
mov
inc
push
or
jb
xchg
cdq
or
xchg
adc
je
dec
sti
mov
shl
fwait
mov
stos
xchg
jge
or
cld
sbb
aam
sbb
or
sub
ds
xchg
cmp
adc
(bad)
mov
add
addr16
rcl
xchg
sbb
adc
sbb
shr
sbb
jne
jbe
cwde
mov
loopne
aad
pop
sub
inc
pop
pushf
ret
cli
jle
pop
xor
ss
jl
jl
xchg
test
hlt
jnp
fwait
xchg
pushf
jbe
sahf
pop
stos
dec
mov
inc
xchg
(bad)
aas
xor
cmp
and
adc
mov
aam
and
pop
movs
rol
and
mov
mov
sbb
adc
sbb
repnz
aad
add
pop
rcl
sub
mov
fwait
push
push
loopne
dec
punpckhbw
xor
aaa
xor
pop
inc
jg
or
mov
cmp
cmps
mov
mov
jo
mov
pushf
xor
(bad)
test
call
jbe
test
fwait
inc
xchg
movs
cmc
mov
mov
jae
adc
sbb
xor
lahf
xchg
hlt
retf
add
xchg
mov
stos
mov
leave
loope
xor
mov
or
xor
pop
ret
sub
xchg
retf
imul
fcmovnbe
fs
cli
jo
or
in
push
add
mov
fsub
mov
add
adc
cmp
out
xchg
out
pop
pop
fdiv
mov
adc
fistp
movs
mov
jo
sub
or
push
mov
fwait
xor
and
imul
pop
xchg
ins
jns
dec
push
fldenv
inc
xchg
popf
cmp
int
pop
sbb
dec
lods
je
push
push
push
pop
inc
rcr
and
loopne
mov
loop
push
adc
inc
retf
xchg
loope
jge
jbe
outs
stc
fs
push
xor
fwait
int3
dec
xchg
into
inc
jo
test
xchg
rol
mov
and
cmp
cmp
sub
rcl
dec
or
xchg
mov
sub
xchg
retf
cdq
rcr
fidivr
xchg
leave
jp
cmp
rcl
xchg
iret
cmp
hlt
mov
sar
(bad)
cmps
and
mov
call
imul
pushf
inc
test
mov
xor
xchg
push
out
sbb
lea
cbw
sbb
aam
retf
mov
jle
jp
data16
aam
adc
or
and
ds
push
pop
addr16
pop
fcomp
jl
sub
sbb
fs
test
push
push
jno
xchg
scas
sahf
mov
sbb
lods
sbb
push
fwait
dec
jmp
mov
sti
rcl
mov
js
cmp
mov
nop
inc
test
mov
mov
push
sub
xrelease
test
pop
mov
fmul
push
aad
cmp
in
sar
cmps
shl
stos
adc
lea
pushf
and
cmps
aaa
neg
ret
ror
rcl
mov
fs
sub
xchg
pushf
imul
xchg
adc
pop
js
scas
inc
xchg
(bad)
aas
push
jnp
sbb
mov
retf
shl
mov
xor
repnz
loope
xchg
sub
bound
cwde
inc
leave
mov
mov
mov
pop
push
movs
fdiv
div
xchg
xchg
or
loop
xchg
mov
fcom
xchg
pop
mov
fidiv
push
pop
sub
(bad)
lock
int3
test
inc
call
setp
rcl
daa
cmps
xchg
(bad)
cmps
jp
ror
dec
mov
stos
fbstp
mov
hlt
inc
pop
xchg
mov
jmp
ret
shr
xchg
adc
dec
(bad)
pop
aaa
xchg
mov
xor
and
jnp
outs
xchg
test
(bad)
mov
mov
xchg
ins
movs
dec
xchg
cmp
jo
mov
sbb
rcl
and
pop
xor
push
test
cmc
xor
jo
dec
xor
mov
movs
fistp
rcl
retf
or
lods
enter
sub
hlt
adc
mov
or
mov
mov
out
and
pop
call
push
xchg
adc
sbb
daa
sub
and
jne
push
jmp
mov
pop
sub
xchg
and
xchg
push
mov
or
or
adc
lods
jmp
int
sub
call
call
xchg
add
push
mov
mov
popa
add
(bad)
dec
sub
xchg
xchg
sahf
iret
daa
cmp
adc
xchg
xchg
icebp
push
out
xchg
inc
fiadd
push
ja
jl
stos
sbb
fwait
mov
push
(bad)
cmc
enter
jnp
(bad)
mov
aam
and
xlat
dec
fwait
jae
xchg
push
repz
jl
ret
adc
mov
pop
enter
pop
imul
not
les
cdq
sbb
mov
enter
clc
iret
cmp
and
ds
sub
push
int
push
inc
xor
in
mov
cli
dec
inc
lods
jl
dec
aam
cld
mov
cmp
push
popf
add
push
xchg
(bad)
popa
xchg
pop
or
jl
test
add
clc
sub
xor
call
pop
xchg
call
cdq
hlt
push
sbb
inc
add
cmp
pop
pop
or
cwde
dec
sub
push
(bad)
int
jge
mov
das
sti
stos
lahf
pop
cwde
and
mov
xchg
repz
imul
mov
push
ss
jmp
and
pop
jo
cmp
jmp
adc
mov
mov
sbb
sub
xchg
neg
jne
ins
(bad)
xor
(bad)
jns
daa
fst
sub
add
or
mov
or
xchg
cmp
adc
popf
dec
pop
cmc
shl
cmp
hlt
(bad)
mov
aaa
sub
jnp
add
jecxz
or
ins
cmp
retf
pop
jge
je
xchg
push
stos
mov
mov
mov
pop
outs
cmc
mov
in
sub
pushf
and
mov
dec
mov
addr16
mov
mov
fst
aas
call
mov
in
or
xchg
fs
inc
int3
adc
(bad)
pop
xchg
lods
or
cmp
aaa
popf
stos
push
mov
add
mov
mov
loop
inc
(bad)
xchg
daa
or
dec
or
xchg
sbb
out
xchg
pushf
sahf
adc
shr
inc
xchg
fld
in
mov
dec
mov
mov
(bad)
mov
adc
fwait
xchg
mov
sub
dec
xchg
repnz
aas
(bad)
sbb
and
popf
adc
jle
fstp
xchg
adc
or
fwait
mov
adc
das
adc
in
cmps
test
adc
std
cmp
mov
dec
sbb
xchg
push
jb
push
dec
test
cdq
or
push
xchg
sbb
mov
pop
std
movs
xor
gs
pop
imul
fldenv
je
int
fwait
mov
cmp
mov
xchg
inc
mov
sub
mov
xchg
mov
(bad)
fsub
jae
fcomip
mov
data16
fild
pop
add
cmps
(bad)
jl
fsubr
mov
gs
in
inc
into
mov
sbb
unpcklps
addr16
pop
ins
out
test
(bad)
ror
jb
xchg
sbb
jbe
push
mov
ret
jbe
inc
in
jnp
jge
jne
xor
sbb
sbb
lea
dec
dec
(bad)
or
or
sbb
pop
gs
xchg
sbb
imul
enter
ret
mov
jo
mov
repnz
dec
mov
add
pop
je
ins
dec
and
(bad)
aad
sbb
hlt
call
jmp
ret
pusha
push
out
les
cmp
add
jecxz
dec
out
xchg
jge
not
std
dec
push
xchg
push
les
lock
cwde
jl
or
sbb
rcr
push
pop
add
jge
hlt
sbb
movs
mov
push
pop
(bad)
movs
push
jmp
loope
xor
jp
adc
mov
call
movs
outs
adc
fwait
bound
push
shr
imul
xor
xor
mov
test
imul
in
bound
int3
adc
pop
mov
xchg
test
aam
dec
xchg
mov
cmp
add
mov
pop
xchg
xor
dec
push
fsubr
shl
data16
lea
rcl
mov
xchg
xor
leave
inc
jp
fwait
and
pop
push
xor
adc
xchg
retf
add
xor
ficom
sar
and
xor
mov
and
pop
outs
call
cmc
ret
push
ins
xchg
sub
clc
xchg
xchg
mov
push
cwde
repnz
jo
xchg
imul
addr16
sub
xchg
js
out
xor
ins
lods
mov
and
rcl
mov
sub
or
fistp
into
xchg
out
not
xchg
(bad)
xchg
jmp
clc
push
add
leave
mov
lods
mov
mov
mov
xchg
and
(bad)
and
mov
inc
mov
mov
(bad)
fst
push
bound
jl
ss
je
sbb
mov
call
xchg
pop
jo
js
adc
push
xchg
xor
cs
add
cmps
test
lock
or
mov
pop
jle
outs
fdiv
jge
fdivp
nop
lods
stos
(bad)
fs
fldenv
fcmovne
add
lahf
movs
xchg
adc
aad
stos
jmp
mov
in
push
push
ret
dec
(bad)
lea
fisubr
xchg
push
mov
or
push
jne
push
adc
sub
mov
nop
xchg
mov
lods
jl
push
(bad)
fisubr
push
mov
pop
push
adc
mov
sbb
retf
call
ret
sbb
inc
aas
in
dec
push
xchg
mov
data16
push
ficom
aam
cwde
mov
nop
shr
mov
and
xchg
cmps
lea
nop
pop
ret
dec
aam
and
test
shr
mov
(bad)
in
vmread
dec
mov
and
push
and
dec
xlat
push
jle
pop
push
push
inc
push
outs
lahf
bnd
nop
imul
popf
addr16
stos
in
sti
(bad)
pushf
cmp
hlt
pop
mov
sbb
mov
into
in
mov
mov
hlt
in
pop
in
pop
mov
in
nop
adc
jnp
test
push
scas
rol
(bad)
movs
mov
in
push
xchg
jge
xchg
mov
or
faddp
inc
and
in
hlt
jmp
dec
mov
push
mov
jbe
daa
xchg
(bad)
push
mov
adc
pop
xor
out
fs
adc
mov
mov
inc
clc
cmp
jno
push
test
leave
push
mov
xchg
std
fyl2x
push
push
push
(bad)
xor
xchg
jno
pop
imul
loope
rcl
pop
and
xchg
pop
jp
pushf
sbb
mov
mov
jno
retf
mov
add
lds
inc
scas
sub
push
ss
sbb
clc
jb
pop
repz
jnp
out
fs
push
xchg
jg
mov
mov
xchg
or
out
mov
mov
scas
push
or
pop
inc
mov
shl
adc
or
lahf
sub
push
retf
mov
sbb
loope
add
movs
popf
(bad)
xchg
pop
ins
cli
push
push
adc
xchg
pushf
icebp
sbb
xor
in
xor
fld
xor
sbb
jle
mov
jl
adc
bound
sbb
pop
sbb
popf
mov
mov
xlat
jnp
xchg
push
xchg
aaa
ror
ins
inc
dec
mov
jne
jecxz
mov
loop
xchg
or
sub
(bad)
xlat
jp
out
pop
xor
(bad)
push
xchg
xchg
into
and
xchg
ret
lock
nop
dec
imul
retf
or
cwde
pop
inc
xor
daa
sub
push
cmps
dec
inc
mov
in
xchg
xchg
inc
retf
sti
jno
scas
js
xchg
pop
aaa
sub
mov
cmp
ror
adc
add
push
mov
xchg
sar
sub
jge
xchg
ins
les
add
popf
cmp
push
jle
ins
cmp
and
stos
out
cmps
and
push
adc
sub
jmp
outs
jg
xor
mov
adc
fadd
xchg
cwde
cmp
push
loope
push
out
mov
outs
xchg
push
aaa
imul
push
loope
stc
pop
popf
cdq
xchg
xchg
fnstsw
movs
jmp
xor
add
scas
jae
inc
retf
sbb
test
leave
nop
(bad)
fimul
das
mov
out
(bad)
je
dec
jne
mov
cdq
mov
repz
test
xor
data16
les
mov
pop
dec
sahf
int3
jge
in
or
fwait
bound
leave
aam
pop
mov
xchg
bound
daa
in
or
push
out
xor
mov
out
test
adc
push
nop
sbb
into
ficom
loope
dec
js
xchg
dec
mov
(bad)
adc
imul
push
idiv
in
cmp
out
hlt
es
inc
cdq
(bad)
out
adc
cdq
inc
jge
inc
or
out
mov
fsubr
mov
xchg
sbb
pop
and
inc
add
mov
push
adc
and
or
xor
sub
stos
sbb
aad
stos
inc
rcl
mov
mov
push
and
jl
push
or
xchg
jmp
ret
push
iret
in
and
push
out
pop
mov
popf
mov
test
jno
pop
imul
icebp
std
sbb
pop
fist
jge
cs
add
sbb
jno
lock
cdq
mov
stos
sbb
mov
mov
pop
lahf
stos
sub
gs
adc
pop
and
jbe
dec
icebp
cmp
sbb
cmp
or
hlt
lods
into
cld
adc
repz
xchg
mov
sar
push
daa
pop
add
shl
not
dec
fadd
and
call
retf
daa
sbb
retf
test
sub
mov
sbb
movs
stos
jge
popf
xor
mov
cmp
mov
shr
jge
adc
(bad)
mov
push
out
mov
repnz
test
popf
icebp
jl
or
stos
jge
cmp
jmp
cmp
dec
(bad)
push
sub
and
mov
push
sub
les
mov
adc
push
inc
add
stos
jge
inc
adc
and
xchg
xchg
nop
cmp
fmul
pop
add
pop
push
rcr
jge
in
sub
dec
outs
sub
jge
fild
cmp
push
lods
pop
jp
cld
push
xor
cwde
mov
scas
pop
cmps
jge
jmp
xor
push
nop
rcl
shr
mov
rcl
(bad)
xchg
ffree
push
popf
jae
xchg
cli
xlat
cmp
and
lods
movs
mov
pusha
aaa
ins
sub
jbe
push
cmp
icebp
movs
lds
pop
repz
out
cdq
push
dec
mov
cmps
and
movs
sub
fs
out
jmp
dec
je
mov
addr16
scas
jge
int
jle
nop
adc
out
sar
mov
push
mov
xchg
aam
xchg
cmps
inc
xchg
xchg
scas
or
push
mov
xchg
push
les
jbe
loop
loopne
add
mov
push
pop
xchg
sub
cmc
sub
add
mov
(bad)
movs
scas
dec
inc
dec
xor
stos
sub
sub
xchg
pusha
dec
cmp
xchg
sub
jns
clc
cmp
retf
pusha
mov
push
pop
int3
(bad)
mov
daa
cmp
adc
adc
rol
xchg
fucomip
or
dec
inc
jle
push
xchg
ja
jbe
popa
retf
and
or
cld
fnstcw
cmps
aam
mov
(bad)
mov
push
pop
sahf
fstp
hlt
out
add
mov
adc
mov
xchg
mov
aas
das
not
mov
pop
jb
shl
fist
fcmove
adc
inc
xor
inc
stos
sub
and
popf
and
mov
jno
sti
int
sbb
stos
adc
jle
lock
(bad)
(bad)
scas
out
or
fwait
aam
adc
rcl
pop
ins
fs
add
or
lahf
retf
cdq
aad
imul
out
xchg
movs
xchg
lods
fst
and
scas
xchg
je
inc
xchg
sbb
std
mov
adc
jae
int
xchg
dec
mov
xor
popf
inc
psrlq
push
push
pop
mov
xchg
outs
inc
jmp
stc
leave
xchg
xchg
movs
call
fs
sbb
mov
adc
ins
sub
dec
(bad)
xchg
popf
jns
pop
mov
xor
mov
xlat
pop
inc
dec
pop
pop
adc
lds
mov
mov
leave
jae
pop
adc
int3
lods
mov
inc
repnz
loope
push
xchg
fidivr
je
out
push
add
xchg
pop
jle
sbb
push
cmps
jnp
ret
gs
sbb
mov
ins
xor
jp
mov
adc
pushf
repnz
sbb
in
dec
test
xchg
jecxz
ja
push
jne
cmp
sar
arpl
aaa
xchg
xchg
pop
and
mov
mov
or
ins
cmp
jae
movs
(bad)
xor
sub
jg
popf
push
cdq
adc
mov
push
xchg
xchg
fwait
shl
aam
add
call
cli
loop
repnz
cs
iret
xchg
pop
neg
sbb
cmps
ror
push
push
std
lea
ror
popa
xchg
cli
(bad)
rdtsc
add
jae
retf
aaa
cwde
jp
jge
sub
cwde
cld
sub
cmc
mov
dec
mov
lahf
inc
out
dec
cwde
jl
sti
mov
scas
inc
sar
adc
lea
mov
loope
cmp
int3
adc
or
hlt
cld
lahf
mov
push
(bad)
outs
push
cs
sar
test
in
mov
enter
xchg
xor
pop
mov
call
ret
ja
setg
adc
mov
bound
jge
aaa
mov
adc
int
push
popa
xchg
(bad)
cdq
xor
pusha
add
cmp
xchg
(bad)
(bad)
mov
and
mov
inc
adc
retf
popf
mov
cmps
bound
icebp
inc
pop
xchg
cld
xchg
cmp
clc
mov
shl
repnz
jmp
sub
test
loop
and
stc
xor
inc
mov
xchg
ret
movs
leave
xchg
adc
loopne
shr
push
mov
(bad)
xchg
fwait
inc
sub
ss
xchg
retf
mov
xchg
arpl
jl
lea
retf
xchg
rcl
xchg
lock
movsx
inc
xor
sahf
test
and
xchg
dec
les
pop
sti
add
fst
or
xchg
in
(bad)
nop
cmp
enter
js
movs
xchg
inc
add
and
xchg
add
mov
xchg
mov
sub
and
mov
or
aam
xchg
clc
fild
fist
xchg
sub
je
lods
push
push
xchg
fcom
rcl
ins
jle
mov
xor
ja
pop
outs
xchg
sar
aad
clc
rcl
stos
jle
fistp
adc
xchg
pop
les
inc
cmps
ins
fsub
mov
mov
cmp
adc
mov
and
push
adc
arpl
push
stos
mov
out
jo
cmp
or
fisttp
fdivr
add
jae
push
xchg
adc
pop
mov
fwait
pop
cwde
jb
dec
lds
call
mov
adc
nop
call
loop
mov
lea
int
dec
adc
es
push
das
jp
cmp
dec
jb
inc
pop
xchg
xchg
ret
int
arpl
pop
xchg
inc
adc
jmp
iret
xchg
mov
imul
mov
cmc
mov
pop
dec
mov
ret
cmps
in
push
mov
pop
ror
push
daa
lods
daa
stos
or
cmps
nop
rcl
gs
xchg
and
loopne
dec
pusha
mov
out
lods
mov
test
sub
movs
xchg
scas
mov
inc
fisttp
hlt
xor
out
shr
pop
(bad)
xchg
lock
xchg
sbb
xchg
add
mov
mov
in
push
mov
push
mov
iret
ror
push
adc
test
xchg
xchg
int3
inc
sub
iret
fisttp
cmps
pop
xchg
stc
jb
mov
and
mov
loopne
mov
jge
xchg
ja
dec
push
xchg
jmp
xor
pop
fnstenv
jl
cs
icebp
sub
dec
inc
cdq
movs
jne
push
xor
jo
xchg
bound
fcmovnu
inc
aam
repnz
xchg
cmps
xor
stos
jge
jl
fmulp
pop
pushf
adc
neg
inc
pushf
shl
sbb
sub
or
sbb
repz
pushf
ret
in
lahf
xor
or
iret
pop
cmps
xor
sbb
xor
sbb
mov
loope
les
aaa
inc
xchg
jmp
(bad)
out
je
mov
sar
into
xor
xor
movs
mov
xchg
jnp
cmp
imul
and
sub
sbb
cmc
and
adc
stc
ficom
sbb
jmp
xchg
arpl
je
push
xor
cmc
in
jmp
outs
sbb
and
fwait
jl
push
cmp
cmc
pushf
out
mov
aam
and
jns
xchg
sub
mov
cmps
mov
(bad)
and
jmp
icebp
or
xchg
test
dec
xchg
scas
inc
dec
xchg
mov
imul
mov
repz
and
xchg
das
xlat
lds
xchg
push
adc
(bad)
and
ret
sub
mov
icebp
jae
sti
cmp
stos
pop
dec
add
mov
fwait
mov
add
pop
lahf
sbb
shr
ret
ret
push
inc
mov
(bad)
aam
jmp
xchg
mov
mov
mov
inc
push
push
out
lds
stc
add
outs
movs
scas
jb
xchg
ficom
adc
push
lahf
xchg
std
pop
push
addr16
rol
stc
xchg
das
cwde
cmp
add
sub
aad
dec
(bad)
push
mov
lds
xchg
ret
inc
push
push
imul
add
(bad)
lock
outs
adc
mov
dec
adc
mov
mov
push
adc
stc
jp
xchg
mov
xchg
retf
aaa
pusha
shr
mov
rcl
fwait
mov
add
pop
int3
inc
xchg
inc
inc
dec
xor
xchg
shr
xchg
inc
sahf
sbb
repz
cmp
jnp
sub
dec
and
rcr
inc
jmp
xchg
jo
jmp
and
outs
adc
dec
je
shr
nop
mov
aam
push
ss
out
dec
je
not
xchg
dec
dec
xchg
add
cmp
ret
inc
fst
in
cmp
and
adc
vmovss
ins
xchg
neg
add
or
ror
in
and
xchg
enter
movs
pusha
test
adc
js
mov
xchg
fadd
es
out
test
leave
sub
fst
loope
aam
mov
push
adc
pushf
fistp
ret
popa
mov
hlt
inc
nop
xor
mov
cmp
je
hlt
jl
mov
adc
pop
lods
cmp
sbb
loope
jl
xchg
test
inc
sub
rcl
mov
not
shl
les
mov
mov
jl
cmp
inc
jae
inc
jle
xchg
fsubr
mov
rcr
mov
pop
jle
adc
lods
push
mov
loope
inc
sbb
sub
xchg
mov
jp
adc
lods
xchg
jmp
mov
and
cdq
fsubr
ins
bound
cdq
cmp
xor
dec
outs
pop
or
mov
lea
adc
pushf
sub
or
sub
loop
popf
push
jge
dec
or
pop
hlt
ds
jl
imul
call
fs
pop
and
mov
push
pusha
movs
jl
test
xchg
xor
sar
sbb
inc
imul
aaa
jne
push
cmc
scas
sbb
sbb
sub
pop
mov
gs
jl
mov
sbb
jmp
call
pop
ror
xchg
jmp
loop
mov
movs
jge
cmc
les
pop
aam
ud2
movs
add
in
(bad)
adc
adc
cmp
xchg
xor
push
mov
jne
add
std
xchg
inc
pop
pop
mov
or
cdq
xchg
xor
cmps
mov
adc
pop
pop
out
sub
xchg
iret
adc
xchg
push
out
jo
jae
sub
xchg
mov
xchg
mov
leave
xor
stos
xor
and
fbstp
clc
dec
fwait
ins
mov
mov
dec
aas
xchg
xchg
pop
outs
cwde
sbb
mul
mov
icebp
inc
dec
sbb
xchg
mov
nop
xor
neg
into
xchg
(bad)
cdq
pavgw
fcomp
fist
push
mov
xchg
hlt
pop
adc
inc
xor
cwde
adc
test
push
fisttp
out
add
aas
movs
into
shr
neg
stc
mov
xchg
push
clc
xchg
test
out
rcl
int3
ins
xchg
sub
je
mov
sub
pop
push
aas
sahf
pop
xlat
sahf
repz
push
xchg
pop
inc
(bad)
nop
adc
lahf
mov
jnp
jle
scas
mov
cmp
gs
das
sbb
xchg
pop
call
ins
or
enter
std
jp
jbe
cli
or
call
mov
inc
out
push
mov
xchg
push
call
outs
mov
movs
lahf
xchg
aas
adc
mov
xor
popf
jl
or
fs
test
pop
mov
jl
adc
popf
xor
cmps
push
out
loop
jbe
cdq
jge
leave
mov
rep
jno
cmps
addr16
loopne
xchg
cmps
push
push
adc
pop
or
pop
jp
les
jmp
lds
hlt
in
pusha
adc
je
mov
adc
int3
loopne
popf
jl
inc
or
aam
cmps
rcr
loopne
and
fbstp
aam
inc
aas
pusha
or
or
mov
leave
cmp
jbe
int3
xor
shl
clc
aam
xor
jl
mov
bound
int
jge
inc
sub
test
xchg
xor
sbb
and
sbb
mov
test
sahf
cwde
or
call
fs
mov
add
and
adc
std
xchg
push
dec
jno
push
ins
push
mov
clc
cmps
out
sub
dec
inc
jl
outs
push
outs
and
(bad)
mov
push
(bad)
iret
push
cwde
es
xchg
in
iret
adc
and
dec
adc
ret
and
stos
test
mov
cdq
cmp
loop
test
in
sar
pop
gs
adc
(bad)
loopne
pop
retf
test
hlt
aas
pop
mov
lea
jl
add
sub
xchg
mov
cwde
dec
add
ret
data16
cli
test
cmp
cmp
sub
sub
mov
cmps
jl
out
pop
int
pop
cld
cmp
mov
cmps
aas
ret
xchg
cli
sub
cmp
and
iret
stc
fst
shr
xor
stos
xchg
push
and
lea
movs
repnz
add
loope
and
push
je
jnp
iret
out
jp
stc
loopne
adc
ret
js
push
cs
daa
lods
test
mov
pop
and
push
push
xchg
mov
out
fwait
pop
lock
mov
ds
jge
push
cmp
rcl
loopne
cmc
jb
xchg
fwait
and
in
add
xchg
xor
jge
mov
ficomp
(bad)
adc
popa
xor
mov
xchg
aaa
pop
mov
cmp
rcl
xchg
fst
loope
adc
pop
call
pop
push
or
pop
sahf
ins
test
xchg
xor
cmps
mov
jns
pop
ret
xchg
cmp
out
aas
push
add
push
ja
ret
ret
adc
adc
xchg
mov
adc
movs
dec
ins
mov
arpl
mov
xchg
mov
inc
xchg
dec
(bad)
je
push
pop
mov
adc
sbb
jns
mov
pop
xchg
sbb
adc
(bad)
je
repnz
mov
dec
cli
inc
and
xchg
sbb
or
dec
gs
mov
jb
pop
mov
clc
outs
add
mov
pop
cwde
lahf
lods
jmp
das
xchg
push
push
shr
push
je
pushf
xchg
push
pop
test
pop
sti
xchg
cmp
dec
scas
es
jns
cdq
jno
shl
enter
repz
xchg
xor
mov
and
mov
sbb
mov
sbb
xchg
sub
inc
xlat
mov
dec
leave
dec
add
fstp
and
cwde
or
fucomp
sub
aad
les
ins
mov
xchg
imul
jle
fnstsw
fwait
je
not
cmp
iret
xchg
mov
mov
mov
stos
cs
arpl
and
adc
xor
mov
sbb
ret
ror
je
push
adc
out
rcl
icebp
stos
int3
and
dec
xchg
cli
mov
es
xchg
xlat
out
mov
dec
jno
xchg
out
mov
and
ss
xchg
adc
pop
dec
into
xor
mov
mov
sub
pop
and
push
xchg
(bad)
sbb
or
sbb
xchg
retf
popf
xor
pop
pop
push
in
jae
mov
xchg
jnp
leave
mov
jg
loop
xor
retf
hlt
icebp
pushf
cmp
sub
mov
jno
mov
ins
mov
out
out
lods
cld
movs
int3
jp
das
xchg
repz
xor
(bad)
xchg
setbe
xchg
dec
adc
xchg
jecxz
add
sub
test
xchg
adc
add
aas
dec
fild
push
hlt
call
not
add
fld
and
pop
ins
push
fist
mov
xchg
mov
lods
fdivr
clc
xchg
nop
stos
mov
mov
test
mov
mov
sbb
in
(bad)
cmp
push
sub
sti
aaa
xor
lea
xchg
and
loopne
add
jmp
lods
ins
out
add
je
sub
or
xchg
sbb
and
cmp
xchg
add
xchg
outs
push
push
test
xchg
mov
pop
lea
loop
jg
sti
push
aam
xchg
sbb
loop
pop
mov
ins
leave
push
retf
add
aam
addr16
mov
sub
adc
and
std
movs
or
mov
call
je
loope
sub
lods
jo
inc
add
mov
jge
shr
xlat
xchg
adc
lahf
(bad)
and
es
xchg
pop
fwait
out
loopne
adc
or
jb
cmp
jmp
loopne
dec
test
dec
mov
mov
iret
or
sbb
ret
sub
xchg
fwait
xchg
sbb
sub
stc
pop
rol
push
into
(bad)
stos
push
sbb
jbe
xchg
sar
idiv
and
das
mov
mov
cwde
or
ss
and
xor
nop
cli
jl
(bad)
mov
jb
sub
pop
inc
out
repz
push
hlt
ins
and
dec
sbb
test
ja
lods
repnz
nop
cmps
pop
xor
fcom
pop
mov
mov
mov
dec
push
xchg
sbb
pushf
sets
stos
mov
xor
fwait
dec
xchg
fidiv
xchg
movs
xchg
ret
out
sub
mov
jae
repnz
xor
push
stos
jnp
lahf
cmps
lods
inc
xor
pop
mov
mov
cs
cli
jg
in
mov
jl
nop
sbb
js
mov
call
or
repz
sar
outs
out
jg
nop
call
pop
or
cmp
pop
cwde
out
xchg
mov
aam
jecxz
mov
and
rcr
dec
xchg
mov
push
pusha
and
sbb
dec
mov
lea
xor
cli
(bad)
jnp
mov
(bad)
aad
test
or
loope
(bad)
fistp
lahf
cdq
mov
(bad)
mov
nop
sub
jbe
mov
jl
out
fmulp
xchg
push
xor
inc
(bad)
hlt
arpl
retf
fwait
test
sbb
jmp
push
inc
or
xchg
scas
dec
sbb
sub
add
(bad)
xchg
adc
les
das
addr16
in
xchg
(bad)
arpl
bnd
cmp
retf
sbb
mov
repz
popf
xchg
imul
sbb
push
inc
adc
or
or
shl
jb
pop
xchg
mov
lahf
mov
dec
in
cwde
in
test
sub
xchg
imul
hlt
mov
jg
dec
out
xor
sahf
sub
out
adc
jo
dec
pop
into
jl
lock
or
push
push
std
mov
push
or
or
test
loop
cmp
cs
jmp
mov
or
aas
jnp
arpl
mov
pop
xor
push
pop
xchg
jg
push
scas
push
mov
sbb
sar
add
dec
push
add
xchg
(bad)
mov
xchg
cmps
in
inc
js
mov
in
cmps
(bad)
cmp
mov
mov
jb
xchg
or
mov
retf
xchg
dec
xor
push
jno
out
stos
movs
xchg
rcl
cmp
pop
retf
mov
xchg
out
imul
(bad)
popf
scas
mov
cmp
stos
push
xlat
dec
sbb
mov
xchg
pop
ss
jl
inc
fadd
gs
xchg
cwde
xchg
pop
jbe
jle
jecxz
mov
xlat
or
inc
push
pop
push
xchg
sti
pop
(bad)
cmp
xchg
shl
push
cmp
mov
jmp
adc
data16
xor
xchg
push
je
jge
dec
loope
mov
push
cli
fdiv
adc
lahf
or
xchg
clc
dec
pop
addr16
imul
shl
cmps
xchg
inc
mov
xor
push
and
retf
sar
and
dec
cmc
xchg
bound
jo
mov
jg
or
fistp
mov
xchg
(bad)
push
aad
inc
test
push
sub
mov
(bad)
stos
mov
push
inc
xchg
adc
and
sti
rcr
in
xchg
cld
push
shl
push
mov
jb
ret
cmps
cld
mov
xchg
shl
enter
fst
xchg
aaa
scas
xlat
dec
fs
xchg
xchg
sbb
adc
leave
jl
nop
cmps
jmp
sbb
mov
mov
ja
setnp
push
push
xchg
cwde
test
ror
mov
jecxz
inc
jge
in
repnz
es
hlt
dec
sbb
xchg
or
jl
les
mov
xchg
lock
lds
rcl
xchg
pop
lahf
inc
mov
cmps
mov
xor
je
push
dec
loop
cmp
and
enter
rol
dec
mov
jge
call
xchg
jp
pop
les
daa
ins
shl
out
call
test
xchg
mov
fnstenv
out
jne
or
jmp
push
xchg
mov
sub
xchg
add
pusha
aas
cmp
lods
pop
add
xchg
out
cld
shr
push
jle
fs
sub
dec
or
movs
into
mov
adc
clc
jno
and
mov
cmp
ss
test
sbb
adc
cmp
add
sbb
xchg
mov
adc
adc
dec
jg
mov
sub
mov
out
inc
popf
mov
mov
cmps
xchg
pop
adc
push
lods
add
add
jmp
clc
and
test
xchg
cwde
sub
aas
xchg
dec
push
out
jno
ret
pushf
mov
scas
pop
push
aad
adc
pop
sbb
test
mov
xchg
out
jmp
cmp
pop
cmp
add
imul
lock
adc
push
mov
fwait
lahf
mov
stos
into
dec
(bad)
xchg
mov
(bad)
repz
hlt
jg
xchg
jmp
sar
or
xchg
loopne
sub
dec
neg
xchg
push
movs
push
or
adc
xchg
mov
and
xchg
movs
mov
std
ss
jmp
stos
into
jl
mov
xlat
adc
repnz
dec
pushf
xchg
add
cld
inc
sar
adc
dec
cwde
lock
mov
xchg
das
mov
jp
push
pop
(bad)
mov
dec
fimul
sti
add
push
stos
push
scas
repz
xor
popf
(bad)
mov
hlt
sub
inc
imul
test
and
loopne
fsub
out
test
add
gs
(bad)
push
add
jp
imul
idiv
cwde
dec
std
adc
and
das
out
jae
xchg
push
fsub
sbb
inc
(bad)
into
pop
adc
in
lds
ins
adc
xlat
fwait
stos
jne
test
pushf
cmps
repz
inc
xchg
lea
imul
sub
dec
inc
dec
cdq
xchg
push
fst
icebp
sub
or
repz
movs
jl
sub
fld
jo
bound
mov
xchg
or
push
or
adc
(bad)
test
inc
xchg
or
cld
mov
iret
daa
inc
sub
xchg
stos
push
jb
sbb
xchg
xchg
add
or
stos
cdq
cmp
push
push
mov
inc
fwait
add
or
aam
fsubr
xchg
gs
or
lahf
dec
add
fs
les
xchg
hlt
sbb
push
mov
pop
sti
and
cmp
scas
inc
xchg
cmp
clc
xchg
jb
mov
or
sbb
and
dec
adc
adc
mov
xchg
xor
jge
add
xchg
int3
rcr
adc
mov
ja
mov
cwde
push
int3
adc
mov
xlat
sar
jl
push
in
lods
adc
sub
sbb
jne
data16
sub
scas
inc
xchg
aas
ja
lock
xchg
loope
out
in
adc
fucom
xor
jmp
xchg
sbb
fwait
jno
lds
sbb
add
mov
xor
or
cmp
bound
pop
mov
xchg
je
ret
xchg
adc
sar
jns
lods
cmp
stos
cwde
jo
and
mov
add
in
add
adc
shl
adc
add
push
int3
es
sbb
push
mov
and
pop
jg
jae
imul
es
ins
inc
std
mov
ret
pop
adc
mov
pop
add
push
test
in
popf
xchg
hlt
push
test
jae
fwait
cmp
xchg
push
push
pop
mov
xchg
xchg
outs
fnstsw
cmp
pop
xchg
pop
and
mov
mov
ror
push
xchg
bound
aaa
dec
push
retf
inc
clc
frstor
fwait
push
icebp
mov
adc
xor
adc
sbb
in
ret
sub
int
inc
adc
sub
repnz
ins
imul
fisub
or
or
and
xchg
iret
inc
inc
neg
pop
adc
out
mov
imul
ror
test
retf
xchg
dec
int3
lods
or
pop
xchg
sub
daa
adc
jne
sub
xchg
aaa
popf
inc
(bad)
nop
les
mov
jne
enter
xchg
dec
fst
loopne
cld
dec
fs
out
mov
test
push
sbb
xchg
popf
loop
xchg
rcl
xor
repz
fsub
and
push
dec
addr16
and
mov
xchg
push
pop
dec
cmp
test
dec
aam
mov
inc
cmps
rol
jno
jle
outs
xlat
cmp
test
mov
mov
neg
adc
and
xchg
jbe
and
ins
mov
mov
push
mov
cmps
dec
push
xchg
sub
sub
pop
dec
xchg
pop
sti
idiv
push
cmps
int3
call
mov
pop
fs
sub
xor
stos
cli
push
xchg
xchg
push
scas
rcl
cmps
imul
dec
idiv
jmp
xchg
cmp
and
mov
sbb
fwait
mov
test
adc
mov
call
lea
lahf
xor
lds
rcl
jo
jne
call
(bad)
mov
push
xchg
aas
in
stos
das
sahf
push
jae
xchg
sbb
push
cs
rcr
test
test
xchg
ret
test
call
std
jne
hlt
dec
jp
cdq
sbb
inc
sbb
cdq
bound
push
push
xor
pop
in
jbe
mov
outs
dec
ret
add
xchg
mov
aad
xchg
mov
push
dec
xlat
rcr
hlt
lods
in
add
cmp
mov
mov
retf
mov
dec
jb
movs
in
mov
sub
cmc
sbb
add
xchg
jo
mov
call
sbb
push
vpcmpgtb
pop
mov
or
lods
xchg
sub
cwde
xor
mov
adc
push
dec
das
cmp
aas
cmps
cmovle
add
imul
xchg
adc
test
xor
add
adc
xor
retf
adc
call
dec
imul
stos
sbb
add
stos
jle
jno
or
or
sar
adc
rol
sti
inc
xchg
movs
movs
fstp
loop
xor
xchg
in
scas
xchg
pusha
in
sbb
fcom
daa
mov
push
repz
and
test
mov
xchg
lock
jnp
jbe
int
test
or
sbb
push
jbe
lods
mov
xor
pop
add
add
int3
pop
repnz
dec
aam
jecxz
jb
rcr
adc
test
imul
or
xchg
or
mov
sub
test
xchg
out
add
xor
repnz
(bad)
sub
int3
inc
rcl
adc
adc
push
xchg
push
pop
mov
mov
sbb
dec
cmp
jmp
jae
cs
pop
xchg
xchg
mov
ficomp
push
or
in
neg
ret
ds
icebp
dec
cli
mov
add
and
div
xchg
je
aad
call
sbb
mov
jo
xchg
push
hlt
xor
aam
mov
push
mov
call
das
imul
xlat
mov
jg
sub
sub
xchg
fistp
fst
and
push
xchg
div
xchg
scas
inc
mov
and
cwde
pop
fwait
sub
lea
cmp
sbb
inc
push
ds
dec
mov
pop
push
inc
imul
jl
mov
xor
inc
(bad)
xchg
xchg
hlt
call
popf
xchg
neg
sbb
sub
inc
stos
and
xchg
cmp
push
jge
rcl
pop
inc
push
fadd
mov
sub
mov
int
scas
mov
xchg
rol
call
mov
xchg
adc
xchg
adc
push
or
rcl
inc
data16
sbb
sub
pop
out
retf
inc
pop
or
lods
ins
sub
not
and
and
mov
jmp
shl
xchg
dec
(bad)
pop
pop
(bad)
jg
lds
call
fisttp
test
mov
fs
fidivr
imul
aad
jmp
fwait
imul
jmp
mov
xchg
adc
int
dec
mov
xchg
mov
mov
xchg
jle
and
imul
xchg
jno
dec
add
in
adc
xchg
stc
mov
mov
push
jmp
push
add
outs
test
push
ret
xchg
aaa
inc
retf
inc
adc
and
xchg
stos
call
xchg
mov
fs
add
rcl
pop
xchg
or
xchg
cmp
rol
add
dec
lahf
out
xchg
mov
fdivr
xchg
xor
cli
arpl
sbb
adc
xor
pop
and
dec
xchg
lahf
inc
pop
mov
inc
(bad)
not
hlt
jle
and
xchg
push
and
pop
pushf
push
inc
repnz
aad
push
adc
sub
jo
hlt
mov
pop
nop
add
repnz
jge
add
sbb
and
loop
dec
adc
test
stos
clc
mov
out
pop
das
mov
xor
inc
add
inc
jbe
cmps
rcr
push
scas
call
pop
int3
dec
imul
pusha
mov
cmps
scas
jmp
movs
cmc
add
push
xor
rol
xchg
mov
or
dec
shr
inc
or
repnz
mov
mov
push
pushf
adc
sbb
cwde
cld
cmp
je
dec
inc
xor
daa
push
sbb
mov
sbb
pop
pop
cmps
dec
ds
and
or
rcl
mov
outs
out
out
push
imul
mov
jne
les
xchg
push
ins
ins
mov
gs
jl
cmp
fsub
pop
icebp
sub
sbb
in
int3
fdivr
push
stos
add
mov
mov
je
jge
add
pop
cmp
cmp
push
pushf
mov
or
xchg
jl
das
jecxz
inc
(bad)
xchg
pop
in
cwde
push
mov
inc
or
in
cmps
jge
in
xchg
jns
ret
shl
fs
lods
jl
outs
loopne
rcr
cwde
xchg
and
jno
jns
inc
dec
xor
pop
popa
div
cmp
imul
movs
fldenv
fwait
fwait
stos
cmp
aam
cld
(bad)
pop
test
xor
xor
icebp
test
adc
cmps
push
jge
hlt
mov
rol
addr16
xchg
inc
xchg
cld
out
mov
jge
dec
mov
pusha
scas
sbb
pop
xor
out
sbb
mov
xor
fwait
xor
xchg
adc
aad
push
fist
(bad)
mov
in
and
add
retf
xchg
jbe
adc
xchg
sbb
data16
retf
or
xchg
xor
jl
cmp
clc
jg
ins
mov
call
dec
(bad)
clc
test
leave
inc
and
dec
js
dec
mov
jb
in
popf
ins
pop
or
outs
jl
ret
inc
adc
fs
repz
xchg
call
in
cmps
mov
jmp
fldenv
cwde
push
js
sub
es
ret
push
sahf
es
aaa
in
sar
jl
sub
popf
mov
fdiv
pop
mov
inc
pop
sbb
sub
jg
push
ret
aam
das
sahf
mov
mov
xchg
rcl
cmps
adc
int3
pop
ficom
and
es
cmc
xor
xchg
jg
mov
dec
outs
or
fwait
inc
push
mov
pushf
hlt
lea
imul
dec
adc
arpl
js
xor
add
adc
retf
dec
add
imul
adc
inc
popa
dec
dec
movs
xchg
inc
push
out
fcom
sub
xlat
mov
inc
pop
push
pushf
pop
push
adc
xchg
(bad)
rcl
retf
push
mov
fwait
and
cmps
mov
jne
popa
mov
and
ins
mov
(bad)
std
jecxz
lahf
adc
(bad)
jbe
xchg
or
lods
pop
mov
jecxz
mov
cdq
xchg
xor
shl
jg
inc
xchg
fwait
inc
dec
jmp
xchg
push
cmp
sub
dec
retf
mov
pop
xchg
push
mov
xchg
data16
pop
mov
mov
mov
cmp
bound
rcl
pop
scas
sub
xchg
push
ficomp
add
mov
shr
sahf
aam
inc
sbb
add
fbstp
aam
bswap
cmp
(bad)
sbb
xchg
push
push
mov
inc
dec
push
xor
jnp
into
jmp
sub
pop
xor
dec
call
pop
adc
push
xchg
jae
cmp
inc
jbe
xor
psrlq
cld
pop
jmp
push
aad
mov
cmps
mov
sub
add
test
add
fwait
pop
outs
adc
mov
and
sahf
cmps
mov
sbb
cld
adc
or
push
sbb
mov
into
mov
mov
jl
jp
fisttp
or
inc
inc
and
push
rcl
loop
xor
enter
rol
xchg
or
inc
and
sbb
bound
mov
jno
stc
repz
and
jns
xchg
push
push
call
mov
fld
pop
xchg
jnp
outs
adc
add
mov
xchg
adc
or
xchg
ror
stc
jne
imul
in
jecxz
mov
xlat
loop
sbb
pop
xchg
mov
mov
xchg
sti
and
jmp
movs
mov
mov
inc
xchg
mov
cmps
cs
pop
xchg
neg
test
sub
mov
scas
jp
push
aam
or
push
push
jmp
add
cld
xchg
or
ss
out
inc
sbb
test
xchg
xor
mov
lods
fwait
ins
push
mov
xor
add
hlt
imul
fwait
jecxz
pop
in
clc
(bad)
xchg
jne
retf
mov
adc
mov
mov
pop
dec
xor
xor
jno
xchg
adc
in
(bad)
xchg
push
rcr
adc
jl
xchg
inc
aas
add
dec
jne
or
fcomp
inc
je
movs
mov
call
cmp
xchg
ficomp
or
xor
inc
int
push
mov
aam
sbb
xor
xchg
sbb
xchg
cmc
lods
mov
adc
push
pop
mov
lods
xchg
sub
mov
fwait
and
jns
js
movs
and
xchg
fild
mov
scas
in
pop
ror
xchg
inc
(bad)
(bad)
adc
or
sbb
ret
mov
retf
adc
dec
xchg
inc
and
rcl
fadd
xchg
jmp
aaa
sbb
leave
ins
xchg
das
xchg
inc
adc
mov
jecxz
inc
pop
xchg
cdq
fs
in
xchg
xor
or
xchg
data16
push
jmp
xchg
mov
les
cmp
lock
or
xchg
add
inc
je
inc
sub
lahf
sbb
sub
xchg
jle
push
xchg
bound
sti
jbe
in
and
loope
xchg
fs
adc
imul
xchg
lock
ja
xchg
and
pop
sahf
inc
popf
mov
sbb
neg
sub
jl
xchg
mov
mov
xchg
inc
imul
cmp
test
mov
jno
pop
dec
ins
rol
les
and
cs
punpckhbw
ret
xchg
bound
sbb
mov
xchg
pop
jge
pop
test
jg
outs
dec
movs
adc
mov
rcl
or
mov
int3
in
dec
inc
and
sub
mov
xchg
pop
std
arpl
or
in
test
out
pop
(bad)
cmps
mov
int3
aad
push
xchg
imul
dec
inc
xchg
jp
fucomip
ins
test
xchg
lods
mov
hlt
xlat
pushf
sub
test
or
mov
and
int
xchg
xlat
pop
dec
into
movs
rcr
push
(bad)
xchg
(bad)
nop
xchg
xchg
aas
xchg
xchg
es
mov
sub
pop
lods
xchg
outs
jle
and
ret
xchg
not
dec
es
fs
push
dec
xor
repnz
inc
sub
rcl
ins
aam
jne
pop
ret
sub
jae
xchg
mov
daa
aas
int
mov
xchg
iret
mov
sahf
jbe
rol
mov
repnz
addr16
stos
dec
repnz
xchg
xchg
dec
jg
mov
scas
mov
sar
neg
lahf
sbb
jle
pop
xchg
hlt
adc
mov
xchg
lahf
mov
adc
nop
out
jge
mov
jp
push
push
dec
es
adc
retf
repnz
out
xor
jle
aas
popa
aaa
cdq
das
cld
xor
clc
xor
out
xchg
add
lock
mov
test
dec
xchg
dec
or
(bad)
sbb
jl
xlat
in
loopne
loope
adc
ror
add
aaa
sbb
jg
retf
leave
xlat
jbe
jmp
cmps
out
imul
scas
sub
ret
or
mov
push
xchg
pop
add
or
jle
retf
in
sub
xchg
(bad)
cwde
sub
xchg
cs
popa
neg
push
jl
mov
hlt
add
sub
sbb
int
xchg
or
retf
(bad)
push
fidivr
mov
jmp
push
pop
rcl
pop
xchg
ins
call
shl
adc
mov
add
sbb
out
retf
movs
push
ror
enter
cld
int3
sub
pushf
push
js
(bad)
xchg
push
or
or
lock
xchg
das
xchg
out
xchg
push
mov
in
sbb
cmps
xor
inc
xchg
pusha
mov
sahf
mov
jae
sbb
and
xchg
adc
lahf
clc
cmps
xchg
das
sbb
xchg
in
test
mov
xchg
ret
pop
int
push
repz
mov
dec
push
mov
adc
and
add
xchg
movs
inc
sbb
ds
cmps
xchg
(bad)
mov
or
shl
push
adc
xchg
(bad)
pop
fnstsw
cs
gs
jge
pop
or
xor
xchg
arpl
retf
or
mov
fdiv
outs
xchg
xor
ret
mov
sahf
pop
cli
xchg
push
add
mov
xchg
fbld
mov
xchg
test
popf
mov
xchg
push
pop
fstp
xlat
(bad)
jmp
nop
inc
dec
test
mov
arpl
jo
into
xchg
pop
mov
sahf
pushf
test
and
mov
cmps
jno
xchg
aaa
add
or
ret
repnz
xchg
cwde
aam
leave
sub
sub
test
cdq
cmc
enter
adc
pop
push
test
sbb
xchg
movs
int
xchg
cmps
mov
push
jo
or
xchg
fst
jns
dec
xchg
in
xchg
retf
rcr
fdivrp
je
add
lahf
sbb
mov
and
push
(bad)
int3
mov
mov
mov
inc
cdq
(bad)
and
adc
jb
xchg
lea
pushf
repnz
mov
sub
dec
and
jns
push
sbb
mov
mov
stos
push
clc
xchg
mov
das
fs
movs
ror
or
ss
pop
lahf
test
stos
xor
leave
xchg
sub
repnz
fcom
into
out
mov
xor
out
pop
pop
mov
xchg
(bad)
pop
push
test
push
in
xchg
pushf
mov
or
cdq
sbb
int3
mov
stc
jbe
outs
jl
adc
repz
xchg
mov
pop
sub
fs
jge
adc
pop
and
pop
push
call
das
nop
xor
ds
adc
jl
cmp
jp
mov
add
aad
cld
add
daa
push
mov
dec
inc
sahf
sub
iret
repz
mov
or
sahf
inc
and
jp
push
add
adc
setl
sbb
enter
jge
jle
test
sbb
ret
cmp
test
call
nop
xchg
arpl
cmp
sub
cwde
ss
jl
fcmove
push
hlt
xchg
and
pop
cmp
lock
xchg
add
fimul
mov
dec
xchg
popa
out
sbb
xchg
adc
test
push
mov
pop
xchg
fisttp
sti
fmul
jb
add
dec
jo
cmps
jecxz
icebp
stos
pop
xor
push
xchg
js
mov
dec
mov
cmps
rcl
xchg
lahf
mov
mov
mov
cmp
fistp
in
dec
cmp
adc
dec
inc
push
jge
cdq
cwde
test
pop
arpl
sbb
xchg
mov
xor
xor
data16
fmulp
mov
xchg
clc
sub
add
(bad)
mov
shr
xchg
fcmovu
je
in
mov
jne
aam
enter
sub
cmps
aas
dec
jns
cmp
(bad)
cmp
xchg
ret
(bad)
ficomp
xor
out
les
push
xchg
(bad)
adc
sub
push
fs
leave
pop
jns
je
nop
add
(bad)
ins
push
mov
push
pop
lahf
adc
adc
je
pop
xchg
push
adc
sbb
xchg
les
or
lahf
test
pop
adc
xchg
icebp
xor
rol
stos
loope
xchg
inc
mov
loopne
mov
enter
or
cmp
cwde
mov
pop
div
or
mov
ror
or
cmps
mov
mov
xlat
stos
xor
and
cmc
xor
xchg
xor
ins
jae
jle
xchg
ja
or
xchg
daa
sbb
in
test
xchg
fadd
mov
mov
or
dec
mov
fiadd
cli
dec
add
adc
iret
arpl
mov
rcr
mov
and
push
scas
sbb
or
mov
popf
sbb
mov
sbb
mov
test
add
mov
ja
ret
shl
mov
push
or
pop
dec
js
lods
push
mov
inc
es
dec
push
sahf
test
jl
bound
xchg
icebp
and
jle
pop
or
jo
xor
sbb
jmp
xchg
jge
test
sub
and
xor
out
inc
lahf
xchg
ficom
js
ret
ror
xchg
add
daa
leave
mov
adc
in
push
das
dec
pop
xchg
and
sbb
movs
in
add
outs
fst
test
lock
enter
mov
sub
or
adc
mov
test
jmp
sub
jge
(bad)
cmp
add
pop
xchg
jmp
mov
mov
sbb
cmp
adc
into
fs
iret
ds
pop
mov
adc
fs
cs
jl
xor
rcl
pop
jle
adc
xchg
fisubr
xor
popa
or
inc
mov
retf
test
xchg
out
sbb
and
or
outs
xchg
repnz
pop
mov
xchg
xchg
pop
xchg
nop
stos
mov
bound
retf
mov
sub
test
lock
adc
adc
cmp
pushf
outs
test
xchg
or
mov
cmp
xlat
fsub
xchg
xchg
or
hlt
push
push
aam
cmp
mov
jmp
jae
cmps
nop
xchg
enter
test
or
inc
xchg
dec
xchg
xor
scas
loope
aam
je
emms
je
xchg
pusha
or
into
pop
jae
jbe
rcr
test
xor
xchg
push
and
es
cmp
fcom
fs
std
push
mov
pop
stos
addr16
xchg
mov
out
cdq
das
fadd
inc
xlat
adc
imul
push
call
pop
mov
or
out
int3
xchg
adc
call
xor
adc
in
test
jle
xor
gs
jl
mov
xchg
repz
xor
dec
xchg
push
test
sti
std
out
or
sbb
pushf
xchg
aaa
iret
loopne
lock
mov
push
sub
jl
xchg
popa
cwde
clc
xor
pop
pop
unpckhps
test
jl
leave
stc
xchg
out
or
pop
cwde
rcr
fist
outs
sti
jns
and
add
into
mov
xchg
and
(bad)
nop
jo
sbb
pop
xchg
push
and
xchg
aad
cmp
shl
outs
and
adc
mov
mov
or
xchg
ret
xor
(bad)
into
pop
js
ss
add
push
out
loop
stos
inc
test
xchg
pop
daa
sbb
xchg
test
stc
adc
xor
and
dec
sub
lods
and
test
adc
push
xchg
xchg
dec
cmps
call
push
xor
sahf
fwait
dec
push
shl
dec
icebp
in
and
adc
xchg
lods
leave
scas
repz
and
(bad)
out
mov
cmp
stos
cmp
mov
adc
cmps
mov
movs
and
ret
ror
mov
push
jo
jecxz
pop
xchg
imul
pop
fwait
sbb
jl
jmp
push
ja
xchg
ficomp
pop
sbb
mov
pop
idiv
fs
jmp
push
rol
xchg
push
mov
xchg
stos
xor
popa
mov
inc
into
ret
test
adc
loopne
xchg
shl
inc
test
push
fcom
mov
xchg
int3
movs
mov
int
mov
and
jnp
cmp
mov
lock
je
xchg
inc
call
xchg
fwait
push
ds
push
lea
xchg
inc
loope
sbb
sub
int
aas
cwde
push
inc
dec
mov
sbb
addr16
lods
sahf
neg
adc
out
sti
xchg
dec
xor
xchg
adc
sbb
or
ret
popa
inc
cmp
das
(bad)
pop
cmp
jecxz
mov
lods
or
xchg
jmp
call
cwde
rcl
mov
loop
and
xchg
cld
neg
daa
jnp
inc
ret
xchg
addr16
push
stos
cmc
clc
xchg
jg
mov
std
jmp
les
mov
inc
xchg
jno
das
enter
js
scas
xchg
cmp
stos
imul
arpl
sahf
mov
push
add
je
xchg
inc
int3
xlat
ret
test
adc
imul
xchg
xor
xor
inc
movs
and
cdq
(bad)
xchg
cwde
pop
mov
xor
cmps
push
xchg
sbb
fmul
out
mov
inc
dec
or
rep
xor
lea
rcl
dec
or
cmp
stos
je
mov
mov
ins
fisub
fmul
mov
mov
xchg
adc
xor
jne
xchg
cld
mov
shl
push
fisubr
push
gs
(bad)
cmps
cmp
les
sar
dec
dec
imul
into
cmps
pop
pop
dec
stos
out
xchg
pop
mov
sti
int3
xchg
fcom
xlat
add
(bad)
xor
les
mov
mov
icebp
mov
addr16
sbb
dec
movs
out
inc
adc
pop
xchg
fstp
(bad)
pop
das
sbb
cmp
or
inc
xchg
stos
jo
imul
dec
push
adc
sub
test
push
stos
dec
ins
mov
sub
xchg
aas
xlat
pop
xor
fcmovb
inc
push
jecxz
pushf
inc
xchg
shr
aas
inc
mov
dec
aas
push
and
xchg
sub
ds
cmp
jae
cmp
push
out
cmps
hlt
pop
jl
cs
mov
dec
adc
in
hlt
mov
int3
push
pop
shl
xor
in
out
aam
in
shl
xor
cli
aas
(bad)
jecxz
test
jbe
call
xchg
sub
lods
arpl
sub
mul
xor
mov
cmp
sar
sbb
cmp
xchg
adc
movs
lods
pop
jns
adc
(bad)
call
mov
xchg
ret
cmp
daa
fucomi
xchg
xchg
pop
pop
lahf
adc
push
mov
es
ds
sub
fadd
and
(bad)
js
icebp
xchg
mov
mov
and
and
mov
push
mov
xchg
mov
xchg
js
lea
sub
push
dec
xor
inc
cmp
aam
xchg
dec
pop
xchg
push
fsub
push
mov
mov
loope
adc
idiv
xchg
mov
in
cld
fisttp
cs
shr
or
(bad)
cmp
mov
xchg
xchg
and
ror
lahf
sub
xchg
and
je
pop
sbb
add
outs
or
xor
stos
mov
out
fcmovnu
les
inc
jle
mov
sub
mov
inc
outs
aam
js
dec
loopne
stos
xchg
mov
addr16
cmp
fmul
lock
mov
xchg
mov
push
adc
sub
bnd
popf
fs
mov
dec
inc
es
push
daa
pushf
mov
jno
mov
out
xor
aad
mov
sbb
mov
mov
lahf
mov
adc
mov
push
jl
sti
inc
pop
xchg
ins
mov
pop
shr
mov
pop
(bad)
mov
lds
inc
xchg
push
stos
or
mov
adc
shl
scas
inc
ins
call
adc
(bad)
lahf
push
fsubp
cmp
popa
int3
xchg
dec
repz
mov
jp
xor
(bad)
mov
dec
repnz
cdq
ror
pushf
cld
popf
ins
clc
adc
jmp
add
push
(bad)
hlt
rcr
imul
ror
outs
hlt
cs
nop
xchg
fld
xchg
jmp
movs
in
into
enter
adc
jb
outs
aaa
ret
jbe
sub
adc
addr16
imul
sub
fsub
xchg
xor
test
xor
mov
pop
xchg
xor
test
stos
inc
dec
push
(bad)
jo
and
ror
push
(bad)
cmp
push
cmps
and
pushf
ins
mov
pop
in
sbb
aad
scas
icebp
add
mov
scas
mov
sub
push
aam
cmp
leave
dec
pop
xchg
add
mov
add
xchg
popf
mov
adc
outs
xchg
sar
rol
cdq
mov
jp
xchg
sub
das
popf
inc
call
in
mov
xchg
cmp
scas
jmp
or
mov
or
sub
xchg
push
cmp
inc
je
repz
mov
mov
iret
xchg
in
cdq
shr
xor
or
dec
inc
imul
aad
mov
dec
(bad)
adc
lock
or
(bad)
adc
aas
inc
push
mov
shr
dec
xchg
xchg
inc
xchg
jl
call
mov
sub
adc
jmp
retf
call
xchg
xor
rcr
add
enter
pop
mov
mov
sti
xchg
fnstenv
jne
push
test
pushf
xchg
pop
inc
(bad)
sub
mov
xchg
dec
std
test
lea
or
call
push
fadd
ret
fiadd
inc
es
rol
rol
add
stos
cld
push
lock
dec
adc
in
or
xor
xchg
cmps
jp
add
xchg
push
push
sub
out
jcxz
popf
sti
add
push
xchg
scas
push
imul
mov
js
mov
xchg
addr16
cmp
mov
xchg
mov
dec
jl
out
xchg
mov
xor
je
test
es
sbb
mov
leave
jle
mov
pop
push
arpl
ins
lods
dec
or
pop
inc
ja
sub
jle
xchg
ret
cld
(bad)
mov
sub
xchg
xchg
jnp
jl
mov
cwde
xchg
mov
and
call
xchg
mov
stos
mov
xchg
ficomp
pop
or
not
push
dec
mov
cmp
mov
rol
jae
mov
xchg
jo
dec
shl
nop
mov
push
mov
xchg
xchg
inc
sbb
xchg
loope
ins
or
leave
jge
ds
xchg
jp
(bad)
xchg
ret
bound
jno
dec
sbb
in
aaa
adc
(bad)
into
fdiv
(bad)
rol
xor
jge
xchg
dec
push
pop
adc
sbb
(bad)
cs
inc
repnz
sub
ffreep
mov
in
int3
lock
js
cmp
mov
mov
sti
mov
enter
dec
push
jno
add
dec
mov
stos
xchg
sub
mov
mov
adc
push
(bad)
stc
loope
imul
adc
xor
dec
xchg
sbb
jp
adc
shr
xchg
lods
cmp
neg
xchg
mul
sub
xchg
cmp
dec
cmp
ret
push
aad
sar
mov
test
xchg
fidivr
test
cdq
popa
cmp
cmps
call
aas
dec
mov
cdq
dec
xchg
mov
scas
shr
loop
hlt
dec
xchg
adc
aam
xchg
jo
out
je
pop
mov
and
push
or
sbb
lock
xchg
shl
leave
adc
rcl
sub
arpl
xchg
(bad)
lock
out
mov
fwait
outs
xchg
mov
or
cmp
pop
cmp
fwait
loopne
gs
pop
movs
loope
push
cld
rol
aad
cmps
xchg
aaa
add
pop
outs
daa
sti
mov
adc
pop
add
push
mov
movs
popf
dec
pusha
cmp
xchg
mov
mov
loopne
dec
hlt
xchg
and
cmp
in
les
adc
dec
fdiv
pusha
xchg
data16
dec
dec
and
loopne
cmps
int3
sbb
sub
sbb
out
mov
test
out
cwde
xor
inc
sbb
dec
fsubr
mov
aad
(bad)
aam
mov
jmp
pop
and
dec
int
mov
sar
mov
fdivp
dec
cdq
outs
jbe
push
xchg
and
xchg
jecxz
jge
(bad)
jl
fucomip
sahf
push
movs
and
pop
ror
out
ins
mov
mov
mov
shr
push
inc
cmp
xchg
lock
xchg
fs
cli
mov
jo
lahf
es
in
fdiv
pop
ror
mov
les
xchg
jno
repnz
and
and
in
jbe
stos
add
sti
mov
inc
jp
mov
or
dec
sub
jmp
xor
push
gs
lea
pop
inc
push
inc
add
sub
movs
and
mov
enter
push
xor
or
xor
sahf
out
push
lods
xchg
xchg
cld
push
cmps
add
fisttp
ret
or
inc
stos
in
inc
adc
int
adc
clc
jecxz
mov
inc
xlat
xlat
dec
mov
scas
fs
push
xor
dec
aam
mov
fisttp
rol
(bad)
cmc
inc
or
xchg
mov
daa
mov
xchg
stos
mov
mov
fwait
adc
retf
les
pop
rcl
sbb
xchg
scas
and
sbb
adc
xchg
mov
inc
sbb
add
jmp
mov
out
add
in
pop
retf
adc
dec
cmp
lahf
inc
mov
imul
cmp
sete
jmp
cmps
dec
inc
mov
fs
pop
or
dec
in
jne
sub
xor
mov
mov
mov
push
inc
retf
stos
pop
xchg
gs
cdq
imul
adc
in
std
mov
idiv
pop
scas
je
test
pop
xchg
jge
rcl
xchg
mov
test
or
mov
mov
sbb
test
add
xchg
(bad)
mov
repnz
mov
arpl
aaa
and
pop
pop
(bad)
ror
pop
xchg
clc
sbb
jno
sub
jb
cmp
ror
das
cmp
mov
xchg
fwait
out
adc
pop
popa
cld
mov
pop
xchg
xlat
adc
mov
lock
gs
rol
int3
mov
in
xchg
xchg
iret
enter
add
mov
xchg
sbb
jnp
and
inc
fmul
(bad)
mov
repnz
sbb
or
mov
cli
xchg
fst
(bad)
nop
int
mov
cwde
popf
repz
lds
pop
push
jp
lods
mov
mov
push
push
dec
imul
scas
mov
ins
mov
or
pusha
dec
adc
mov
rcl
out
dec
xchg
xchg
xor
les
mov
lahf
add
xchg
xchg
mov
push
ins
xchg
cwde
and
sbb
xchg
fst
cli
push
sbb
inc
jo
ds
fadd
mov
cmps
xchg
enter
jb
stos
rcl
add
mov
in
sbb
fwait
and
inc
jle
hlt
jmp
or
xchg
pop
add
sub
mov
stos
mov
xor
imul
xchg
pop
xchg
add
fwait
jmp
cmp
jnp
mov
fist
imul
lahf
cmp
pop
(bad)
sbb
je
sbb
les
xor
and
mov
dec
adc
mov
pop
outs
or
aad
(bad)
xchg
fcom
das
fcomi
or
aaa
adc
xchg
adc
xor
call
(bad)
loopne
mov
loop
(bad)
jmp
xchg
pop
add
xlat
xchg
cwde
push
(bad)
out
fnsave
push
test
out
shr
retf
mov
clc
dec
push
adc
xchg
adc
cdq
loope
dec
dec
sub
mov
cmp
mov
or
test
xchg
push
stos
fimul
jo
push
jbe
loope
sahf
cmc
add
pop
push
hlt
(bad)
out
xchg
sbb
ss
enter
and
cmp
cwde
adc
sub
mov
xchg
or
outs
and
lods
adc
gs
add
adc
sahf
nop
pushf
ret
jmp
jmp
adc
pop
fidivr
leave
outs
pop
jl
loop
inc
fs
sub
xchg
out
ret
dec
fcomi
mov
aaa
(bad)
iret
adc
enter
push
sub
jp
mov
cdq
xor
mov
das
out
dec
lods
sub
fadd
mov
pop
and
mov
inc
cdq
fistp
push
xchg
xchg
or
or
mov
jnp
jecxz
outs
cmps
ficomp
mov
adc
push
push
inc
iret
(bad)
xchg
lds
push
bound
not
sub
sbb
aad
rcr
add
shl
inc
cmp
(bad)
xchg
push
test
aam
push
inc
cld
stos
enter
daa
cmp
mov
jo
iret
ret
mov
push
pop
xchg
dec
fnstcw
push
nop
(bad)
mov
in
movs
aam
pop
sub
dec
xchg
sub
bound
adc
xor
arpl
(bad)
or
fwait
push
inc
pop
inc
xchg
push
sahf
push
cmps
sub
push
xor
jmp
gs
pusha
jl
int
mov
cmp
loop
mov
adc
dec
outs
or
xchg
daa
dec
(bad)
into
test
xor
cmp
mov
int3
dec
and
cmps
fwait
push
mov
mov
je
daa
adc
mov
retf
les
retf
fwait
jns
jno
cld
push
sar
fxch
aam
fld
(bad)
mov
xor
adc
(bad)
test
ror
int
jmp
xchg
mov
push
test
nop
inc
mov
cmp
out
pop
aad
dec
cmps
jae
iret
push
add
retf
and
sbb
sub
ja
in
(bad)
popa
xchg
or
mov
out
js
popf
add
add
pushf
sub
jo
(bad)
ficomp
inc
xchg
jmp
add
pushf
jns
rcl
or
scas
push
das
xchg
out
retf
mov
jo
xchg
mov
push
mov
clc
retf
mov
pushf
shr
test
popf
push
push
mov
xchg
jbe
dec
sbb
leave
mov
sub
scas
xchg
mov
xor
sti
(bad)
sbb
add
test
cmp
xchg
mov
std
stos
arpl
ja
jno
frstor
mov
shr
loope
sbb
adc
xchg
stos
test
add
or
adc
push
cmp
rcr
xor
cmp
enter
test
cmps
cmp
xchg
xlat
dec
adc
mov
pop
and
jl
xchg
sub
xchg
js
jecxz
xchg
push
in
jg
outs
inc
mov
xchg
pop
cmp
push
das
cdq
outs
fs
jbe
clc
lds
(bad)
jl
inc
xchg
in
jo
test
sub
popf
movs
xchg
movhps
push
cmp
addr16
sbb
jmp
aam
outs
xchg
rcl
sub
and
dec
nop
jae
mov
pop
lea
shr
xchg
mov
sub
xchg
adc
mov
xor
mov
or
test
cmp
pop
mov
mov
mov
fcomip
adc
in
jne
call
mov
adc
adc
ret
imul
sti
and
pop
leave
int
lgs
mov
fwait
xchg
sbb
repz
jae
xchg
js
je
sub
pusha
bswap
xor
adc
mov
push
dec
xchg
mov
imul
xchg
mov
pop
xor
lods
xchg
clc
loop
jge
dec
sub
or
jl
lahf
lds
xchg
mov
not
jmp
xor
mov
mov
and
dec
test
outs
movs
push
xchg
outs
hlt
push
jmp
mov
mov
jo
(bad)
rcr
sbb
xchg
xchg
icebp
mov
(bad)
xchg
je
jb
mov
mov
fstp
dec
sub
jno
xchg
push
call
push
(bad)
out
cmps
movs
cmp
jg
pop
mov
sti
and
add
adc
aad
rol
pusha
test
aam
shl
mov
dec
data16
xchg
xchg
push
jno
and
rcl
xor
lock
jle
shr
xchg
test
sub
pushf
xchg
pop
out
ins
ds
xlat
mov
ins
dec
stos
mov
push
pop
xrelease
ins
arpl
xchg
imul
sbb
xlat
aam
fwait
stos
adc
or
scas
loope
arpl
mov
xchg
add
sub
mov
add
lds
stos
and
mov
mov
lahf
add
int
cmp
out
mov
sub
inc
pop
jl
mov
iret
push
call
sbb
js
xchg
xor
jmp
js
xchg
dec
sub
pop
xchg
ins
ja
cwde
outs
cmps
test
pop
daa
mov
and
ss
sbb
stos
(bad)
xchg
cmp
mov
shl
mov
ja
cmp
jmp
frstor
mov
xor
dec
sub
xchg
test
out
ja
dec
ret
xchg
cld
cmc
pop
mov
xchg
mov
push
shl
arpl
xchg
test
fistp
mov
icebp
imul
cmps
jnp
test
xor
js
mov
push
adc
xchg
pop
inc
lods
xlat
lock
or
rcl
out
pop
out
fcom
lock
inc
jp
dec
adc
jae
xchg
fidivr
or
loope
sbb
xchg
adc
inc
sub
sbb
repnz
or
xchg
sub
add
in
stc
out
mov
stc
rol
jl
xchg
xor
push
inc
push
imul
repnz
xchg
sub
(bad)
fst
dec
mov
mov
push
hlt
out
mov
xchg
stos
nop
add
adc
or
imul
add
cmp
mov
push
add
neg
push
dec
test
jmp
xchg
push
mov
mov
lock
aam
into
sub
mov
push
popf
(bad)
cmp
mov
mov
out
pop
adc
hlt
enter
xchg
or
cmp
push
dec
or
push
nop
mov
bound
outs
fsub
mov
jb
es
pop
mov
pop
sbb
data16
dec
in
fst
retf
or
mov
inc
jmp
data16
sahf
or
push
cld
fs
push
aas
adc
sahf
sub
pop
retf
sub
les
mov
fs
hlt
xchg
inc
dec
scas
loop
xchg
mov
imul
xchg
retf
xchg
ds
jp
and
bound
xchg
xor
call
(bad)
in
sub
push
ja
xchg
xorps
cmp
(bad)
mov
fwait
mov
xor
pusha
sub
xchg
jns
loopne
rcr
lods
je
(bad)
scas
dec
rcl
stc
rol
pop
leave
jb
inc
jge
xchg
xor
mov
cld
repz
and
xor
push
inc
out
or
xchg
dec
mov
xor
fs
dec
xchg
mov
push
mov
xchg
jns
jp
push
jne
ss
outs
xchg
(bad)
xor
loopne
mov
cwde
cmp
jecxz
mov
and
dec
mov
and
sub
mov
mov
std
pop
or
mov
in
jae
aam
jno
enter
(bad)
mov
adc
or
adc
add
xchg
ffreep
je
in
xchg
iret
sub
jmp
cs
(bad)
(bad)
icebp
in
add
rol
xchg
mov
(bad)
cmp
push
pop
xchg
pop
or
aaa
aas
xchg
repz
clc
push
mov
popa
sbb
cld
add
gs
xchg
xchg
xor
lea
clc
jae
fwait
adc
cmp
push
add
leave
cmc
lock
cmp
jl
ja
mov
push
loopne
iret
mov
inc
xchg
outs
in
pop
shr
popf
shr
movntps
rcr
mov
xchg
jns
out
adc
(bad)
mov
xchg
add
dec
sub
ret
pop
add
xchg
mov
cmps
push
jae
cmp
inc
xchg
sub
call
push
repnz
sub
(bad)
into
ffree
inc
xchg
dec
jecxz
dec
scas
leave
popf
mov
inc
icebp
mov
and
aam
test
lea
shl
sbb
push
icebp
push
movs
mov
fs
pop
inc
int
ins
popa
inc
into
mov
aam
cld
jle
lods
cmps
inc
jp
pop
movs
nop
loopne
mov
pop
jo
int3
jmp
xchg
aam
or
cmp
inc
jp
cmp
adc
es
lds
dec
xchg
jmp
fwait
push
mov
arpl
push
sbb
outs
sbb
dec
(bad)
xchg
cmps
(bad)
mov
xchg
hlt
ins
push
mov
xchg
out
and
jl
test
sar
aad
add
stc
rcr
dec
or
bound
out
or
xchg
nop
out
sbb
jo
xchg
dec
retf
mov
(bad)
cdq
cmp
outs
cwde
leave
nop
in
xchg
dec
sub
sbb
popf
xchg
ins
mov
push
fdiv
cmps
ss
lock
lahf
jae
inc
sbb
repnz
xchg
mov
in
call
lea
(bad)
sti
sub
shr
xchg
xchg
dec
data16
test
push
xchg
mov
imul
in
xchg
jp
rcl
dec
frstor
(bad)
adc
ret
push
mov
xchg
fidivr
nop
retf
xchg
aas
xor
xor
test
add
inc
pop
push
mov
dec
imul
call
adc
dec
pop
xchg
mov
pop
jle
xchg
movs
fcom
mov
fstp
les
mov
xor
inc
pop
jle
xchg
mov
xor
push
xchg
sub
xchg
mov
xor
sar
lahf
sbb
jmp
sahf
xor
js
sbb
fmul
adc
adc
in
and
dec
outs
xchg
push
sbb
outs
and
not
jle
add
(bad)
jl
out
dec
mov
add
lods
scas
in
push
pop
jge
cdq
xor
enter
in
adc
dec
jg
shl
jmp
fwait
imul
push
push
fs
add
xchg
ror
xchg
movs
fidiv
xor
pop
pop
cli
lds
inc
data16
out
xchg
pop
sub
sbb
mov
push
cmc
out
js
push
mov
pop
aam
jmp
imul
mov
stc
sbb
xor
cdq
lock
mov
mov
xchg
call
sub
test
retf
or
bound
xchg
stos
dec
popa
lods
cmp
cwde
dec
mov
pop
(bad)
adc
mov
dec
sbb
(bad)
fst
add
ret
or
stc
or
xchg
popa
dec
add
pop
cld
mov
xlat
jmp
cs
add
repnz
push
sbb
neg
xchg
sbb
mov
mov
pop
je
adc
cmp
push
mov
cmp
sub
sbb
das
mov
movs
fs
jbe
daa
adc
call
pop
inc
dec
pop
or
mov
icebp
dec
je
adc
enter
pushf
jl
jge
jp
push
mov
mov
scas
test
das
xchg
add
mov
pop
fidivr
adc
xchg
sub
sbb
js
mov
movs
adc
cld
mov
mov
or
sti
mov
jb
pop
cmp
push
frstor
mov
ret
jmp
fdivr
ffree
ficom
pop
scas
mov
in
iret
add
hlt
xchg
stc
xchg
mov
cmp
into
push
mov
aad
in
ret
xchg
sub
scas
sbb
xchg
cdq
pop
or
sbb
or
ror
clc
cmps
out
imul
sbb
mov
cmp
xchg
mul
ss
jmp
test
adc
call
pop
xor
test
add
or
arpl
pop
mov
enter
jl
jge
aad
sbb
and
cli
(bad)
pop
xchg
push
leave
mov
sbb
adc
stos
(bad)
call
pushf
add
xchg
mov
movs
xchg
add
jmp
xchg
mov
fsubr
pop
xor
xchg
add
rcr
int
fdiv
cmp
xor
add
hlt
int3
xchg
stc
cwde
or
mov
sahf
cli
cmps
xchg
jmp
es
mov
mov
pop
xchg
xchg
mov
sbb
mov
popf
aam
cli
and
nop
xchg
xor
cmp
cmp
repz
arpl
sub
loope
mov
mov
inc
adc
mov
imul
aad
mov
(bad)
inc
dec
jnp
adc
daa
cmp
test
dec
push
icebp
and
jns
mov
enter
movs
jl
mov
xor
xlat
mov
outs
jno
adc
mov
call
xchg
lods
popf
fistp
xchg
shr
xchg
fist
or
mov
push
popa
cwde
cmp
cs
fwait
gs
sbb
out
aam
fst
sbb
add
aad
mov
pop
pop
iret
mov
in
add
jno
hlt
popf
idiv
dec
repz
dec
dec
test
jmp
das
loope
cmps
(bad)
or
mov
mov
fs
pop
inc
sub
cli
clc
gs
lods
jge
push
add
xchg
push
or
cs
xor
test
popa
sbb
and
or
ins
cmc
pop
sahf
push
lods
or
mov
(bad)
xor
inc
int
jb
mov
mov
ror
xor
sbb
test
sbb
adc
add
mov
push
jae
hlt
adc
cs
adc
fist
mov
sar
mov
mov
jns
mov
dec
xchg
sbb
js
fwait
mov
jp
mov
cli
clc
out
retf
shr
xchg
xchg
pop
xlat
push
outs
test
fdiv
fcom
dec
inc
jns
push
add
mov
(bad)
xchg
adc
dec
nop
int3
jl
cli
lock
outs
sbb
sar
aam
sub
xchg
dec
int
cdq
adc
sbb
push
jge
xchg
xchg
and
xchg
sub
std
xchg
mov
lods
mov
movs
stos
outs
jl
xchg
enter
ret
sbb
adc
inc
xchg
repz
pusha
daa
aaa
inc
push
xchg
bound
cmp
xchg
pop
and
jl
outs
rcr
xchg
dec
loope
push
int
mov
mov
div
js
aaa
in
fidivr
test
jo
rcl
dec
xchg
inc
push
cmp
lock
jne
xchg
xchg
ret
in
js
mov
push
cmps
mov
xchg
jmp
push
mov
gs
dec
addr16
mov
xchg
mov
sbb
in
adc
add
movs
xchg
int3
xchg
sub
data16
xlat
mov
sbb
inc
jno
cld
add
and
movs
leave
xchg
sahf
or
ficom
xchg
xchg
test
mov
dec
adc
call
push
fs
dec
mov
push
clc
pop
call
push
xor
call
daa
and
fadd
xor
sbb
pop
retf
fwait
aaa
lods
loopne
or
cmp
imul
mov
xchg
cmp
push
fsub
xchg
ror
(bad)
inc
jge
bound
ret
cwde
sbb
xchg
and
cmp
jge
stos
cld
add
pushf
jge
or
mov
and
or
out
and
jecxz
jg
mov
xchg
ds
or
fdivr
mov
adc
js
lds
into
cmp
inc
mov
daa
push
push
repz
cwde
in
dec
aaa
sub
jo
test
cld
cdq
inc
sub
jne
xor
cmc
cmc
cli
sub
loop
mov
adc
pop
ror
imul
in
out
scas
das
stos
movs
bound
xchg
loopne
hlt
aam
in
mov
jbe
mov
leave
add
div
mov
sbb
retf
dec
test
in
or
xchg
jp
mov
mov
adc
jl
xor
adc
xor
call
(bad)
out
loopne
dec
ja
nop
jl
sub
cmp
pop
adc
inc
ds
sub
jno
mov
xor
call
scas
jmp
out
dec
stos
sub
retf
xchg
fwait
addr16
mov
in
inc
jg
mov
push
aad
lods
inc
xor
add
lock
pop
add
mov
jnp
and
retf
enter
mov
fwait
xchg
addr16
jbe
aam
cmp
lock
sub
xor
int
xchg
push
cmps
(bad)
mov
pop
adc
ds
int3
dec
cmps
movs
movs
mov
rol
sub
xchg
cld
sbb
cli
jmp
rol
scas
cmp
or
xor
aad
mov
adc
pop
cmps
cld
push
xchg
mov
push
cmp
hlt
pop
fcom
jecxz
xchg
in
pop
(bad)
out
test
dec
in
stos
(bad)
xchg
jmp
lahf
test
mov
and
mov
icebp
fstp
pop
push
not
push
ror
xchg
lods
inc
push
(bad)
adc
mov
fcom
fld
xchg
mov
add
xchg
test
hlt
ins
jge
sbb
jae
repnz
xchg
ror
xchg
inc
pushf
fwait
inc
mov
cmc
ret
and
lock
mov
test
iret
test
or
push
cmps
test
ror
fist
stos
inc
leave
fwait
mov
xchg
fsubr
hlt
sete
cmp
iret
rcl
pop
retf
loope
enter
ret
inc
push
xor
push
inc
xchg
cmps
adc
lock
das
xchg
out
es
mov
or
xchg
dec
fwait
sub
retf
pop
(bad)
or
add
aam
fild
push
gs
fwait
popa
cld
push
sbb
aam
test
mov
in
stc
fst
ret
xchg
or
loop
or
add
xchg
sahf
sub
push
inc
mov
or
jg
mov
shl
jecxz
or
shl
arpl
icebp
xchg
cwde
mov
mov
dec
xchg
mov
xchg
ficom
les
cmp
xchg
add
ret
and
push
mov
xchg
ja
mov
movs
mov
stc
rcl
test
pop
mov
mov
mov
(bad)
rcr
aam
pop
cmp
rcl
icebp
sub
adc
aam
xchg
call
pop
xor
das
jo
in
xchg
rcl
enter
mov
add
dec
or
fs
outs
(bad)
pop
jnp
fstp
jo
cwde
jg
lods
adc
dec
stos
fdiv
push
jb
mov
imul
cmp
xchg
and
mov
add
and
jl
sub
add
lahf
pop
push
xchg
ins
test
xor
xchg
pop
ss
adc
icebp
arpl
pop
xchg
(bad)
cmp
add
jl
push
mov
mov
sbb
xor
sbb
pop
and
enter
test
adc
rcl
mov
cli
push
xchg
add
xor
xchg
fadd
xchg
popf
sbb
mov
cwde
mov
mov
sub
xchg
pushf
xchg
fsubr
shl
xlat
sbb
iret
std
xchg
cmp
mov
xchg
cmp
outs
cmp
cmp
pop
test
es
xor
repnz
mov
ss
xchg
xor
mov
add
xchg
cmp
ret
daa
push
xor
test
outs
and
xchg
fsubrp
repz
mov
dec
ret
jg
cmp
pop
call
sti
iret
pop
and
push
adc
jns
loope
mov
popa
xchg
dec
out
cwde
dec
inc
push
imul
in
push
mov
sbb
mov
bound
(bad)
aad
jle
pop
stos
xchg
xchg
cmp
lock
mov
bound
xor
inc
(bad)
xchg
repnz
dec
xchg
in
and
jb
popf
mov
jmp
lock
inc
scas
sbb
test
fsubr
xchg
stc
xchg
lock
jmp
imul
add
sahf
sbb
inc
daa
mov
ins
into
jb
sub
(bad)
sub
fldcw
ret
add
push
pop
mov
cld
data16
xlat
push
push
xchg
test
xor
xchg
ds
lahf
js
and
mov
fdiv
xchg
xchg
pop
adc
xlat
bound
mov
shl
aas
inc
in
mov
mov
xor
push
mov
inc
cli
cli
xchg
xor
cmp
adc
lock
xchg
sbb
out
pop
popf
mov
mov
shl
fwait
int3
dec
dec
cmps
xlat
xchg
jl
mov
or
les
sbb
xchg
test
cld
clc
cmps
movs
into
mov
pop
adc
push
adc
jmp
push
fistp
push
mov
or
popa
cdq
lods
(bad)
jo
stos
loopne
jbe
repnz
je
push
fnstsw
cdq
inc
xchg
sbb
scas
retf
xchg
bnd
push
pop
imul
or
xchg
call
xchg
lock
(bad)
bswap
and
xchg
stos
(bad)
or
iret
fwait
sub
mov
aad
inc
mov
sub
xchg
and
in
xchg
xchg
jle
adc
pop
inc
sub
shr
xchg
mov
test
jae
adc
xchg
xchg
lds
mov
or
gs
jge
mov
adc
mov
cmps
pop
call
ins
dec
jbe
jb
cmp
push
fcom
push
movs
shl
cmc
dec
hlt
push
mov
movs
pop
pop
popf
scas
dec
nop
in
sar
and
and
popf
fidivr
adc
enter
push
in
ret
sbb
in
loop
add
jne
xchg
xor
ror
shl
xchg
mov
and
rol
adc
cld
daa
cli
mov
push
sbb
imul
mov
fnstsw
add
xchg
shl
pop
lea
hlt
xor
jge
add
arpl
push
in
xchg
sbb
loope
pusha
mov
pop
popf
mov
out
mov
(bad)
aam
bound
dec
inc
mov
hlt
mov
dec
ss
movs
push
pop
fisttp
inc
jge
rcr
pop
push
sub
add
retf
loopne
call
add
pop
hlt
dec
iret
mov
sbb
mov
fld
xchg
jns
ftst
jno
cs
cmp
pop
push
(bad)
push
jp
sbb
repz
mov
test
push
cmp
mov
cwde
and
jb
xchg
push
jmp
icebp
xchg
sub
cmp
fwait
fwait
pop
add
jns
and
shl
mov
mov
jo
dec
repnz
jl
movs
(bad)
stos
out
mov
mov
fnsave
inc
sbb
jl
and
loopne
adc
nop
jbe
sub
ins
adc
cmp
lea
dec
inc
cdq
addr16
mov
scas
dec
push
dec
fdiv
mov
jnp
fst
push
rcr
ins
in
inc
lods
mov
lea
into
jns
sbb
jecxz
ja
out
xchg
(bad)
push
push
and
push
std
popf
cmp
shr
and
xor
and
mov
xchg
or
xor
cmp
call
dec
ja
push
mov
aad
sub
shl
jb
out
fisttp
or
outs
out
imul
mov
rol
scas
gs
jg
xor
sbb
inc
stos
sbb
fisttp
mov
out
ss
xchg
cmp
mov
dec
adc
data16
mov
fwait
jbe
sbb
movs
push
or
test
xchg
adc
aam
movs
pop
xchg
sub
xchg
ret
arpl
imul
dec
and
arpl
mov
jge
test
xchg
int3
nop
jo
push
mov
jno
mov
bound
mov
inc
les
clc
sbb
fwait
mov
mov
cdq
cmp
adc
sub
mov
or
ss
mov
adc
inc
(bad)
fbstp
jle
jp
and
xchg
retfw
pop
and
test
stos
pop
adc
add
shr
xchg
mov
sti
jmp
imul
repnz
push
stos
xlat
lods
stos
outs
outs
sbb
push
xchg
sub
cmp
mov
mov
cdq
jmp
push
push
pop
sbb
(bad)
loopne
std
add
fs
adc
add
cli
inc
mov
enter
or
xlat
rcr
xchg
outs
mov
out
jmp
pop
jg
es
dec
pushf
aam
call
int3
sbb
xchg
leave
frstor
xchg
inc
dec
clc
xlat
add
call
ins
jg
xchg
call
data16
inc
pusha
jae
cmps
test
jg
push
push
mov
sahf
imul
mov
mov
mov
inc
xor
pop
popa
push
out
leave
dec
xchg
lahf
jl
dec
mov
and
mov
and
out
mov
jge
jmp
inc
(bad)
js
xor
fild
pusha
clc
push
xor
rol
jbe
aad
push
adc
xchg
ror
push
nop
cmp
cli
ds
icebp
pop
jns
mov
mov
push
scas
je
stc
xchg
xor
jne
and
test
jmp
das
std
daa
push
push
lock
gs
mov
int3
je
adc
sub
call
or
clc
or
pushf
movs
adc
add
jae
or
cmp
xchg
sbb
jmp
cwde
sbb
push
xchg
inc
int
mov
xor
stc
xor
xchg
mov
lock
xchg
pop
cvtdq2ps
je
mov
je
and
adc
adc
scas
push
mov
add
xchg
sbb
mov
mov
adc
jne
xor
cld
adc
inc
xchg
hlt
not
mov
out
mov
fisub
and
dec
stc
fwait
sbb
mov
out
mov
xchg
data16
fsub
mov
xchg
add
pop
mov
test
push
mov
bound
rcl
(bad)
call
push
adc
xchg
push
sub
fwait
(bad)
xor
rcl
xor
test
mov
out
xchg
lods
in
aad
adc
xlat
xchg
je
(bad)
ins
push
pavgw
mov
call
jo
cmp
push
sub
pop
lahf
shl
sub
lock
xchg
sar
push
xchg
inc
clc
xchg
lock
dec
gs
fnstsw
repz
or
pop
or
adc
(bad)
and
pushf
pop
cmps
xchg
sub
cmp
xchg
jecxz
xor
mov
je
cmp
sbb
pop
push
add
rcr
hlt
pop
in
xchg
xchg
js
mov
out
xchg
sub
rol
arpl
fs
xchg
push
inc
lods
mov
out
mov
shr
xor
js
stos
push
jne
(bad)
ja
mov
popf
jo
arpl
imul
call
(bad)
test
test
xchg
inc
push
pop
inc
stos
and
dec
in
cmp
les
sbb
xchg
pop
call
int
inc
and
push
jo
aad
cmp
add
addr16
call
and
push
shl
(bad)
xchg
imul
mov
mov
nop
addr16
mov
push
imul
sub
sub
imul
ins
lods
jo
mov
fst
sub
mov
inc
fist
call
push
mov
fbld
adc
shr
xor
mov
jnp
dec
pop
cld
vcvtpd2dq
out
hlt
or
cmc
enter
xchg
mov
jge
xor
xchg
cld
(bad)
arpl
fistp
inc
shl
out
and
mov
pop
push
std
(bad)
pop
push
fisub
ss
push
inc
movs
jmp
push
fsubrp
je
mov
jbe
or
xchg
movs
in
push
xor
pop
dec
ret
push
stos
sbb
stos
jl
nop
sbb
mov
popf
inc
sub
or
pop
jp
mov
outs
inc
push
dec
lods
in
popf
xchg
pusha
inc
in
pop
cld
push
sub
push
mov
mov
sbb
push
(bad)
rcl
into
repz
jmp
out
xor
add
xchg
mov
mov
lahf
sbb
rol
cld
xor
sbb
dec
add
adc
xchg
jo
lock
inc
jnp
xor
xor
fidivr
mov
hlt
inc
out
inc
(bad)
xchg
iret
dec
and
xchg
into
scas
hlt
and
sub
aas
fwait
xchg
push
dec
mov
push
mov
or
or
les
nop
(bad)
xchg
jecxz
fcomi
inc
mov
xchg
out
push
js
mov
ror
mov
into
cwde
lea
push
xchg
inc
mov
or
fst
repnz
out
xchg
outs
in
cmc
arpl
and
sub
pushf
loopne
mov
xchg
fidivr
jb
iret
sti
pusha
push
daa
xchg
out
mov
out
xchg
cs
outs
(bad)
and
xchg
call
test
jnp
adc
xor
dec
push
sahf
daa
xchg
push
jmp
pop
add
fst
push
ss
adc
and
fcom
and
dec
outs
xor
mov
cmc
mov
aam
jne
stc
imul
or
int
mov
fcmovb
dec
add
aam
jmp
mov
cmp
mov
lahf
push
pushf
hlt
lods
loop
hlt
xlat
data16
fwait
pop
sbb
inc
leave
xchg
xchg
and
mov
(bad)
push
shl
movs
fs
mov
mov
rcr
cmp
repnz
inc
mov
dec
imul
popf
pop
sahf
retf
inc
sbb
dec
or
cmc
in
push
hlt
push
push
xchg
mov
rcr
ins
sbb
mov
jle
mov
sbb
mov
in
rep
push
rol
js
repz
push
xchg
hlt
out
sar
(bad)
push
xchg
pop
fwait
loopne
or
xchg
test
sub
lods
ror
hlt
mov
stos
mov
sbb
xchg
xor
ror
pusha
sbb
jge
mov
mov
xor
stos
or
test
cmps
and
add
sbb
jl
imul
mov
jg
pop
outs
xchg
xlat
xor
jge
xor
cld
adc
mov
xor
mov
frstor
ror
(bad)
ds
out
fbld
pop
jge
dec
pop
sbb
dec
pop
ja
mov
call
mov
dec
xchg
sar
aaa
fisubr
ret
mov
mov
lods
jl
push
xchg
idiv
add
cs
mov
adc
out
mov
scas
push
jno
jbe
push
js
dec
dec
test
(bad)
xchg
(bad)
jmp
cdq
pop
in
pop
jecxz
ds
loop
adc
or
stos
xchg
cdq
cli
sbb
cmps
cld
xor
movs
or
data16
sbb
dec
lods
test
mov
inc
hlt
repnz
sub
mov
fbstp
adc
add
pop
mov
mul
mov
fist
push
jae
stc
push
sbb
outs
sbb
push
ds
xor
xlat
xchg
jo
nop
out
push
ja
loopne
jnp
xchg
mov
int3
cs
loop
push
mov
cmps
sbb
xchg
jmp
outs
daa
and
gs
adc
push
xchg
iret
add
inc
js
int3
lods
xchg
(bad)
xchg
fwait
add
jne
lods
xlat
ins
and
mov
xchg
jp
repz
fcom
ffreep
jnp
xchg
cld
push
sahf
or
xchg
dec
jbe
lock
xchg
dec
loopne
les
stos
pop
test
ja
xchg
jge
xor
aam
mov
xchg
out
es
or
pushf
xchg
jecxz
hlt
mov
movs
cmp
sbb
cmp
push
inc
cwde
jmp
cmps
sbb
in
xchg
jl
movs
sbb
call
adc
add
cmps
xchg
pop
adc
inc
xchg
or
fimul
mov
pop
xor
scas
mov
dec
sbb
movs
pop
or
add
adc
loope
or
xlat
imul
neg
pusha
add
add
and
je
mov
xchg
movs
das
jge
xchg
sti
jb
cli
dec
mov
xchg
sub
out
or
(bad)
push
inc
xchg
adc
mov
lods
pushfw
and
xchg
and
mov
call
xor
pop
lods
adc
inc
pusha
mov
xchg
pop
inc
mov
adc
mov
push
dec
pop
fwait
mov
mov
ja
movs
sbb
sbb
xchg
aam
mov
push
xchg
dec
cs
cmp
not
add
push
jmp
adc
stc
stos
push
out
lahf
pop
pop
in
adc
outs
mov
mov
stos
mov
mov
push
fs
mov
ret
sbb
push
lahf
bound
add
push
mov
sub
jbe
xchg
mov
xchg
mov
sub
or
xchg
adc
sbb
xchg
movs
sbb
dec
xchg
fdivrp
jge
lods
cmps
pusha
repz
xchg
dec
and
pop
ret
xchg
pop
mov
push
je
bound
xchg
retf
sahf
dec
or
nop
jmp
xchg
adc
adc
lods
push
je
mov
pop
idiv
mov
jmp
cmp
nop
xor
into
dec
add
inc
xchg
lods
push
mov
jge
nop
xchg
rcr
xchg
mov
aam
int3
add
(bad)
pop
push
sar
dec
in
fwait
cli
adc
mov
in
push
(bad)
into
cmp
or
js
lahf
xchg
pop
pop
mov
pop
sbb
xor
fcmovb
push
push
inc
pop
ds
lds
gs
mov
pop
data16
or
push
mov
push
xchg
sub
into
cld
xchg
xchg
sahf
xchg
jge
hlt
and
jb
xor
data16
pop
sbb
mov
cld
mov
sbb
jae
push
xchg
(bad)
in
mov
mov
push
imul
push
ret
aam
das
push
fwait
push
(bad)
icebp
push
mov
xor
or
movs
mov
pop
ins
dec
add
push
fst
je
rcr
mov
lahf
and
mov
cdq
bound
int
mov
adc
pop
(bad)
aad
xor
ret
jb
bound
dec
fucomip
pushf
mov
cmc
mov
sub
enter
xchg
dec
std
(bad)
fistp
imul
je
jnp
call
or
mov
scas
or
movs
ds
mov
cmps
xchg
xchg
dec
mov
pushf
mov
cld
je
out
xchg
pop
lock
fbstp
xchg
popa
push
mov
push
push
fnsave
mov
loopne
(bad)
enter
ret
test
push
pop
imul
rol
xor
daa
push
xchg
sbb
mov
cmps
sub
aaa
push
mov
jno
xor
(bad)
imul
add
sti
sbb
scas
xchg
je
add
xchg
nop
sub
xchg
mov
pop
xchg
xchg
push
int
in
dec
sub
mov
jbe
cwde
aaa
les
push
cmps
mov
pavgw
lds
push
data16
outs
jnp
pop
xchg
fiadd
pushf
xor
push
mov
mov
fld
mov
and
ss
sar
gs
xlat
and
dec
stc
push
xchg
sub
fstp
loope
pop
adc
mov
sbb
lods
xchg
push
in
jp
in
repz
xchg
push
lea
pop
fbstp
xchg
mov
mov
push
inc
jge
and
outs
rcr
or
xchg
aam
jge
sbb
pop
cmps
mov
pusha
cdq
int3
fwait
dec
imul
mov
pop
gs
stc
lods
mov
loopne
(bad)
mov
lock
mov
mov
cmps
cld
mov
arpl
dec
jle
cmp
mov
mov
int
mov
mov
mov
dec
or
inc
clc
hlt
fstp
fmul
repz
dec
xchg
loopne
add
mov
xchg
or
ret
pop
retf
imul
hlt
mov
das
sbb
adc
dec
out
pop
aam
pop
cmps
add
and
sbb
and
mov
test
xchg
inc
fwait
out
jmp
jnp
sub
fwait
(bad)
dec
test
xchg
fnstsw
repnz
imul
daa
fdivrp
push
and
jl
xchg
cmc
cs
adc
adc
xchg
mov
pusha
loop
out
fs
inc
jnp
mov
fld
xchg
xchg
iret
je
jo
xchg
icebp
add
fistp
mov
test
mov
xor
or
fs
push
add
jge
movs
or
retf
div
clc
ins
jmp
jecxz
loop
xchg
cmp
sbb
out
xchg
push
sbb
fcmove
add
cwde
pop
cdq
xchg
in
ins
aam
mov
and
popf
xor
sub
(bad)
jge
xchg
mov
test
cmp
mov
sbb
and
loop
stos
lods
imul
inc
push
or
cmp
xor
cmps
xchg
stc
lock
and
xchg
cmp
xor
(bad)
imul
fwait
and
mov
fadd
xor
enter
mov
mov
xchg
scas
int3
iret
adc
mov
xchg
daa
dec
ds
fild
pop
push
or
movs
push
mov
fdivr
inc
icebp
hlt
xchg
imul
inc
or
push
or
mov
push
pop
out
out
or
aad
stos
mov
ja
mov
pusha
xchg
sub
js
in
mov
cmp
js
push
pop
out
stos
js
mov
pop
xchg
ins
lods
dec
hlt
sub
mov
ins
ss
pop
rol
rol
sbb
fstp
dec
sub
ins
xchg
and
jb
cmps
add
adc
jns
xchg
mov
lahf
xchg
jne
push
mov
push
in
xor
add
xchg
popf
leave
popa
xchg
push
inc
ss
inc
adc
shl
stc
inc
sbb
sbb
jmp
xor
and
xor
mov
fld
xor
inc
fld
jne
adc
push
inc
push
mov
mov
sub
push
xchg
imul
movs
mov
call
xor
or
repnz
dec
fisttp
call
daa
mov
movs
jge
cli
or
mov
mov
jp
push
jg
push
pop
xor
cwde
cld
stos
xchg
inc
jge
sbb
(bad)
imul
dec
ja
adc
inc
mov
xor
stos
retw
mov
inc
outs
test
call
aam
ds
call
mov
inc
movs
xor
je
jge
cmp
push
xchg
sbb
lea
xchg
(bad)
fistp
adc
ds
hlt
push
pop
div
in
ja
fwait
call
aaa
mov
mov
xor
mov
imul
add
shl
aaa
push
int
cli
cmps
dec
jge
push
retf
in
fs
adc
or
call
sub
mov
lahf
movs
loop
bound
xchg
xor
mov
rcl
inc
out
xchg
mov
pop
cmp
cmp
rcl
out
mov
je
jae
cli
sub
rcl
jns
cdq
push
add
inc
push
aad
mov
add
xchg
(bad)
cmp
xchg
mov
lea
mov
adc
push
jns
out
scas
fisttp
cwde
mov
pushf
test
mov
call
(bad)
mov
rcl
sub
or
xchg
xchg
dec
and
sub
jl
fadd
dec
imul
loope
leave
ds
xchg
or
pusha
jg
xchg
pop
(bad)
xchg
sbb
jmp
add
jle
repnz
push
xchg
stc
jg
mov
stos
loop
ret
jne
mov
adc
out
pop
or
dec
inc
mov
hlt
cmp
xchg
xchg
fisubr
arpl
shl
xchg
test
sub
push
cmp
jp
inc
dec
(bad)
adc
cmp
mov
in
sbb
jecxz
cmps
mov
mov
xchg
xchg
les
call
sub
xchg
pop
aad
js
pop
mov
pop
add
xchg
int
daa
sub
loopne
dec
xchg
sbb
(bad)
push
es
loope
push
(bad)
outs
fsub
jecxz
pop
test
xchg
mov
push
sbb
shl
ds
pop
ficom
or
mov
or
xor
ss
cmc
mov
jne
fnstsw
mov
pop
fstp
inc
push
out
mov
or
sub
and
xchg
test
and
push
cmc
cmp
fild
scas
mov
es
xchg
shl
jae
jge
(bad)
test
add
sar
or
enter
inc
push
(bad)
in
leave
repnz
push
jbe
popf
daa
in
shl
lahf
call
fwait
and
mov
or
xchg
add
mov
jmp
stos
adc
mov
mov
adc
hlt
dec
scas
and
loop
nop
pop
stos
cmc
fcmovnbe
addr16
popa
in
imul
js
mul
pop
out
adc
dec
mov
daa
mov
dec
xchg
xchg
fsin
xchg
or
cmp
ret
lahf
rep
or
rcpps
scas
jmp
fwait
xchg
outs
xchg
and
loopne
nop
bound
popa
mov
or
enter
add
sbb
scas
imul
jp
xchg
jno
mov
inc
xchg
jle
pushf
das
test
dec
cmps
sub
loopne
test
adc
add
std
mov
in
pop
adc
in
clc
xchg
or
sub
stos
lahf
cwde
in
push
gs
inc
push
push
lods
dec
jo
jg
mov
pusha
mov
cmp
icebp
mov
je
mov
(bad)
(bad)
js
sbb
stos
xchg
and
enter
mov
xor
lahf
jp
and
sbb
in
or
cld
push
or
jne
cmp
push
retf
neg
call
sub
push
shl
dec
mov
fwait
adc
mov
fwait
inc
push
xchg
push
sbb
xor
mov
aam
mov
add
and
out
fs
dec
push
inc
rol
sub
inc
cmp
popa
idiv
mov
fstp
xchg
rcr
cmp
pop
push
dec
adc
mov
push
mov
test
mov
mov
ret
(bad)
jnp
rcl
pop
les
fdivr
mov
push
jl
sub
add
fdivr
cli
push
xchg
sub
daa
push
adc
mov
jns
xchg
iret
out
pop
jp
repnz
push
pop
push
adc
xor
push
js
fst
lock
xchg
out
mov
pop
aad
ins
int3
test
repnz
xchg
jge
dec
mov
movs
pop
xchg
mov
pop
push
inc
cs
lods
mov
cmp
(bad)
data16
mov
dec
mov
retf
je
push
jmp
sar
ins
sahf
sub
stos
inc
ds
fiadd
test
xchg
addr16
cli
jno
(bad)
push
xchg
scas
xor
xchg
mov
cmp
fdiv
not
retf
sbb
outs
jno
xchg
mov
push
sub
jmp
inc
xor
rcl
and
cmps
jl
cmp
int
je
xchg
jnp
inc
and
mov
fwait
in
add
jl
jns
(bad)
mov
hlt
dec
fdivr
mov
loop
or
inc
jbe
sar
mov
and
dec
jmp
dec
enter
neg
mov
out
or
mov
mov
sub
push
loop
xchg
mov
adc
cld
or
pop
inc
mov
cmps
jl
jo
rcr
loopne
pop
push
hlt
xor
call
inc
lock
leave
sbb
rcr
pop
aas
enter
adc
rcr
cmc
cli
out
pushf
add
test
cli
xchg
cmp
leave
jge
pop
jmp
lods
fdivr
push
js
jno
movs
lahf
add
mov
pusha
jl
in
mov
and
and
(bad)
out
add
aad
cdq
add
and
imul
ins
lods
mov
pop
jl
out
in
mov
mov
mov
adc
sbb
jmp
add
adc
mov
xchg
into
lahf
test
icebp
jae
out
add
mov
adc
xchg
inc
inc
jg
repnz
xchg
push
mov
adc
push
test
scas
dec
mov
rcl
in
mov
js
jle
xchg
sub
out
xchg
cdq
lods
mov
push
mov
xchg
int
out
push
pop
mov
loop
pop
aaa
and
sub
inc
xchg
aas
push
movs
mov
cli
fwait
or
fs
adc
sbb
sbb
mov
xchg
push
in
add
inc
inc
je
gs
add
mov
adc
push
lods
or
addr16
repnz
push
fimul
in
xchg
sbb
and
movs
rol
xor
push
and
imul
adc
ja
addr16
pop
push
inc
adc
xchg
retf
jl
push
xchg
lock
pop
cmc
retf
pusha
or
push
sbb
and
xchg
jae
xor
jmp
and
or
sbb
outs
icebp
jae
mov
pop
push
inc
sbb
loopne
sub
mov
adc
hlt
mov
pop
popf
mov
fidiv
loope
jge
sbb
enter
sbb
mov
xchg
mov
iret
lahf
jo
push
out
movs
ror
sar
mov
xchg
(bad)
aad
out
jmp
and
aam
mov
jle
hlt
pushf
mov
xchg
jg
outs
retf
jmp
arpl
sbb
pop
mov
rcl
xchg
clc
mov
loopne
pop
hlt
cld
es
dec
mov
sar
lahf
or
sbb
inc
cs
lea
mov
mov
sbb
inc
les
mov
push
xchg
pusha
push
arpl
ins
cwde
mov
ss
push
sub
sbb
mov
sbb
lds
push
sbb
add
lock
scas
mov
add
adc
pop
mov
in
adc
sahf
jl
in
push
loopne
xchg
test
jbe
jmp
cmp
fsub
scas
push
sti
lds
(bad)
test
shl
push
outs
int
cmps
jl
cmp
adc
push
out
retf
ret
pop
dec
movs
mov
je
jae
cli
sbb
popf
jmp
mov
xchg
aam
sbb
pop
cmps
xchg
out
cmp
data16
in
or
int3
or
or
pcmpeqd
shl
call
mov
mov
mov
loop
(bad)
fisub
mov
and
push
mov
(bad)
pusha
mov
xchg
adc
sbb
enter
mov
(bad)
stc
xchg
call
sbb
icebp
xchg
dec
inc
out
ret
dec
mov
repnz
xchg
shl
icebp
je
push
ja
or
dec
pop
jmp
ret
retf
frndint
outs
ss
xchg
aam
xchg
mov
jnp
add
xor
cmps
ins
into
xchg
fdivp
adc
cdq
jo
push
sub
ret
pusha
xchg
scas
out
cs
xchg
ss
mov
push
sbb
nop
jmp
daa
cmps
sahf
sub
adc
push
dec
imul
je
psubusw
add
inc
mov
sub
(bad)
mov
push
mov
adc
out
pop
leave
xchg
repz
test
cli
xchg
dec
dec
or
xchg
les
enter
(bad)
retf
xchg
test
cmc
int
sub
dec
enter
jae
xchg
sbb
push
js
push
sbb
(bad)
retf
xchg
cwde
sbb
fistp
xchg
popf
outs
push
add
xchg
sub
rcl
xchg
data16
loope
dec
popa
movs
push
and
xchg
cmp
mov
dec
adc
nop
imul
inc
xchg
icebp
jp
into
or
fbld
xchg
sub
cmps
fisub
xchg
jbe
data16
iret
inc
fwait
and
fs
jns
fiadd
ror
jp
fwait
cmps
pop
pop
or
popa
nop
mov
mov
or
mov
xor
cmp
aad
cli
stos
jbe
out
fwait
add
mov
(bad)
inc
jb
jp
adc
pop
bound
or
dec
xchg
sar
loopne
push
cmps
xchg
inc
clc
pop
mov
add
or
call
outs
xchg
xchg
jp
scas
add
pop
sahf
mov
and
dec
fwait
icebp
xor
ds
xchg
mov
sar
xchg
pop
push
out
mov
push
sub
and
xchg
mov
gs
or
jnp
sub
dec
xchg
(bad)
loopne
mov
lock
lds
ret
sub
jo
fstp
js
xchg
shl
sbb
loop
clc
setnp
ins
in
pop
xchg
out
push
sub
js
out
dec
cld
out
rol
mov
loop
xor
sbb
in
xchg
les
xor
cdq
xchg
popa
movs
gs
pop
mov
int3
leave
adc
not
out
mov
mov
adc
ds
in
js
xchg
cmp
xchg
cmp
inc
retf
dec
mov
mov
xor
cdq
push
or
into
mov
sbb
cmp
icebp
xchg
xchg
lahf
adc
out
inc
dec
movs
mov
(bad)
(bad)
mov
jle
call
mov
ror
xor
in
xchg
cli
std
in
sub
aas
dec
inc
mov
jge
push
mov
xchg
xor
movs
cwde
inc
xchg
sbb
cmps
cdq
jl
or
push
xchg
cmps
add
and
adc
fisubr
popf
and
cmps
sbb
ret
rcl
ss
dec
and
inc
mov
adc
jge
out
daa
jle
adc
loope
pop
out
dec
into
in
imul
and
jecxz
pop
cmp
sub
xor
out
adc
push
fistp
jge
xchg
mov
cmp
jmp
sub
lea
sub
hlt
cmp
pop
dec
push
mov
xchg
jmp
pop
sbb
pop
push
outs
xchg
aas
mov
mov
pop
mov
test
loope
ret
arpl
hlt
push
scas
mov
inc
in
mov
xchg
fcom
dec
dec
mov
pop
or
mov
mov
cld
pop
and
std
ins
adc
out
in
popf
sbb
xor
sub
and
dec
cld
sbb
lods
movs
fdivr
repnz
imul
pop
loopne
mov
fdiv
or
mov
xchg
and
stos
icebp
push
mov
add
mov
je
mov
test
or
mov
mov
leave
lods
cdq
jge
loop
push
push
adc
out
cmps
mov
push
mov
pop
jmp
das
mov
in
or
cmps
lods
es
fwait
in
into
xchg
push
fwait
add
xchg
cld
fld
test
push
and
pushf
jl
pop
and
scas
mov
mov
and
jl
cmc
mov
fstp
mov
jae
xor
hlt
push
loope
jno
mov
dec
and
pusha
mov
sub
jbe
jmp
push
and
lahf
inc
pop
pusha
dec
xchg
retf
jo
cdq
lds
sbb
sar
int
mov
dec
jbe
xchg
mov
enter
cmps
inc
fsubr
movs
call
in
pop
pop
xchg
push
frstor
pop
jmp
pop
cmps
pushf
xchg
dec
xchg
adc
mov
jp
sub
shr
cmp
rcl
rol
pushf
call
or
jp
jmp
cld
jbe
cmp
jge
sub
in
out
and
outs
add
retf
xor
jge
adc
sar
pop
sbb
jl
test
dec
push
in
push
mov
pop
sbb
xchg
repnz
in
jl
inc
fs
cmc
push
loop
aad
test
shl
mov
js
adc
cld
outs
aas
push
scas
lea
fild
shr
xchg
movs
jns
mov
and
xchg
or
cdq
mov
xchg
mov
xchg
not
sbb
imul
adc
or
stos
je
sbb
inc
mov
stos
cmp
(bad)
xchg
imul
test
fwait
cld
sar
push
test
mov
add
jge
rol
adc
test
into
add
sahf
sbb
repnz
and
push
cld
test
or
scas
mov
mov
call
add
xor
push
push
mov
mov
pop
sub
jbe
cdq
push
pop
xor
fxtract
pop
call
(bad)
dec
jb
fistp
es
sbb
and
and
call
test
arpl
push
lods
fldpi
aam
adc
mov
mov
pushf
ins
loope
popa
mov
fstp
test
sar
xchg
bound
ss
mov
push
xchg
sti
mov
push
lods
pop
xchg
cmp
enter
mov
add
inc
loopne
repz
xchg
sub
sub
xchg
inc
jmp
inc
mov
mov
sub
shl
xchg
xor
or
dec
xchg
mov
cmps
jp
push
(bad)
fwait
xchg
adc
test
add
mov
loopne
mov
into
dec
push
adc
sub
out
fcomip
jns
nop
lds
add
sete
adc
xor
and
xchg
push
fsub
lods
add
sbb
xchg
cmp
retf
push
mov
fwait
js
out
inc
hlt
cmp
xchg
xchg
push
xchg
push
jns
dec
ins
xchg
mov
mov
in
jp
addr16
mov
cs
inc
pop
pmaddwd
xor
xchg
retf
push
out
sub
sub
cmps
push
in
and
inc
aas
cmp
jae
cwde
daa
hlt
cmp
ret
lods
jmp
mov
cmps
mov
push
xchg
leave
adc
sub
sub
xchg
or
ror
push
push
fcom
stc
inc
push
xchg
pop
xchg
int
ret
rcl
pop
les
xor
mov
gs
cmp
inc
mov
push
pop
sub
push
cld
jbe
and
addr16
adc
aaa
dec
xlat
push
and
(bad)
aas
xchg
pop
cli
call
add
mov
xor
dec
jg
ror
in
push
into
icebp
or
jnp
mov
aas
xchg
pop
es
rcr
xchg
add
lods
pushf
xchg
sbb
aam
and
imul
push
mov
rcl
dec
mov
gs
jl
mov
loope
mov
mov
xchg
inc
sbb
test
mov
xchg
inc
out
add
push
daa
lea
xchg
mov
retf
iret
fmul
movs
in
jge
and
mov
je
not
and
pop
outs
clc
xchg
sbb
(bad)
je
jmp
adc
push
dec
mov
or
or
mov
scas
pop
adc
pop
nop
adc
pop
jnp
xchg
xor
data16
or
mov
pop
daa
xchg
inc
cmps
sbb
xchg
jae
pop
paddusw
retf
xchg
movs
sub
xor
cwde
sub
sbb
cmps
ret
and
out
push
dec
out
adc
adc
xchg
(bad)
cmp
pop
push
xchg
neg
pop
and
xchg
mov
xchg
lods
adc
gs
in
jbe
push
sbb
repz
xchg
repnz
shl
add
mov
mov
xor
fwait
mov
fwait
mov
mov
jb
adc
xchg
jl
push
pusha
daa
pop
mov
je
lods
jno
inc
mov
lds
xchg
or
mov
pop
cmps
adc
mov
xchg
push
imul
pop
cld
add
inc
xchg
jp
xchg
mov
xchg
add
mov
xchg
ret
jae
sub
xchg
inc
cmps
or
scas
or
mov
sub
mov
mov
xor
sub
push
cmp
mov
cmps
clc
cmp
mov
cli
add
fadd
jmp
rcr
sbb
pop
nop
push
dec
sahf
mul
inc
pop
sub
(bad)
dec
out
dec
sbb
jg
cmps
lea
addr16
xchg
fsubrp
ds
xchg
pop
mov
test
daa
add
adc
inc
jnp
pop
or
repnz
icebp
xchg
aaa
retf
cmp
fsub
je
mov
fidivr
sbb
xor
ret
xchg
pop
std
jns
in
jne
fwait
xchg
xlat
jo
add
nop
rcl
ss
or
or
sub
jbe
jg
hlt
shr
and
in
mov
push
pop
(bad)
cmps
sbb
mov
bound
push
popf
outs
retf
mov
xchg
cmp
lods
test
les
sub
leave
ds
nop
fiadd
bound
retf
xchg
and
into
mov
test
xchg
xchg
sbb
rcl
daa
adc
mov
mov
jl
out
icebp
cmps
adc
mov
sub
call
addr16
mov
jg
sti
in
retf
loopne
fcomip
sti
ja
jl
inc
mov
ja
mov
and
mov
and
or
or
jnp
sar
popf
ret
div
jge
clc
ret
push
mov
addr16
(bad)
fsub
es
adc
dec
aam
adc
into
dec
je
stos
dec
dec
idiv
jp
xchg
and
sbb
mov
pop
(bad)
sar
dec
sub
push
mov
jl
fidivr
call
mov
addr16
je
jl
jle
ret
das
or
sub
inc
mov
out
cmc
test
adc
ret
repnz
outs
and
shl
xlat
dec
mov
dec
mov
adc
repz
or
out
adc
push
pop
cwde
fwait
sbb
mov
mov
test
sbb
dec
mov
sub
cmp
sbb
movs
push
and
adc
and
jae
fstp
push
dec
push
xor
aam
bound
mov
mov
scas
mov
xchg
call
push
push
jl
ror
lahf
cwde
mov
cli
add
push
jg
pop
nop
sbb
jecxz
ds
xchg
adc
loopne
test
lds
sbb
mov
ret
jl
bnd
push
mov
mov
fdivr
in
add
mov
lea
fs
jecxz
mov
or
pop
outs
sub
loopne
lds
mov
cdq
int3
in
xchg
cld
cmc
and
mov
outs
jge
mov
mov
gs
inc
adc
ds
es
adc
jle
ins
test
mov
test
cld
sbb
fnstsw
aas
ret
push
add
fisttp
and
outs
pop
push
xchg
xchg
mov
mov
xchg
test
xor
cmp
dec
push
(bad)
xchg
test
adc
stos
dec
sahf
mov
dec
pop
mov
sub
je
hlt
xchg
adc
sar
jl
add
and
xchg
sbb
out
lock
imul
call
xchg
ins
mov
xor
pop
inc
fild
ret
iret
nop
stos
xchg
cmp
fst
xchg
inc
shr
push
push
mov
xchg
mov
loop
or
mov
loopne
pop
xchg
dec
loope
xchg
addr16
das
xchg
xchg
mov
pop
call
jg
lea
adc
mov
and
push
add
add
nop
xchg
out
or
je
mov
sub
dec
xchg
adc
and
hlt
jge
ret
mov
fisub
push
dec
fwait
aaa
or
mov
cmps
mov
jg
cmps
scas
cmp
repz
sub
pop
and
mov
jnp
mov
inc
aam
pop
jp
jmp
je
icebp
in
xchg
cvtpi2ps
dec
sbb
lahf
pop
cmps
aad
or
hlt
pop
add
inc
inc
add
imul
push
xchg
ins
or
and
inc
out
mov
(bad)
les
xchg
mov
shl
imul
aaa
scas
dec
sub
pop
or
adc
aam
cld
bound
pop
sahf
pusha
cmp
inc
into
and
out
xchg
add
popf
cmps
outs
(bad)
(bad)
cmp
xchg
jmp
xchg
cmp
ret
mov
je
pop
xchg
and
mov
adc
in
mov
xchg
aas
scas
aaa
lahf
mov
std
loopne
mov
cdq
mov
pop
repnz
clc
push
jnp
sbb
xchg
add
jae
dec
(bad)
stc
push
popf
mov
pop
mov
xchg
cmp
bound
cmc
pop
cmp
(bad)
div
xchg
mov
jno
into
or
mov
outs
aam
cdq
inc
into
cwde
pop
xchg
dec
addr16
xor
sbb
adc
jg
rol
pushf
(bad)
shr
fwait
inc
xchg
xchg
mov
inc
dec
test
or
leave
pop
cld
imul
les
mov
cmps
das
cmp
mov
dec
adc
inc
or
jg
je
cmp
in
jb
cld
sub
in
pop
in
into
repz
hlt
mov
rep
in
dec
xchg
jne
mov
dec
dec
dec
cs
ins
push
push
push
inc
ror
gs
and
cld
int3
mov
ret
xchg
sbb
popf
push
jl
inc
addr16
pop
(bad)
repnz
ins
sbb
jl
lods
xchg
pop
daa
in
aam
adc
jge
scas
mov
daa
loop
mov
or
mov
inc
cmp
call
fwait
jo
pop
pop
or
cmp
push
je
or
mov
xchg
xor
push
js
fwait
daa
sbb
push
xor
adc
repz
pop
imul
adc
xchg
pusha
data16
je
add
push
mov
outs
sbb
arpl
sub
sub
test
mov
lahf
dec
mov
cmp
rcl
jl
push
fisttp
rol
cld
mov
outs
les
xor
cmps
repz
add
sbb
mov
sbb
popf
jae
adc
xchg
jp
sar
cmp
div
xor
push
fwait
xchg
and
dec
sbb
jmp
adc
and
adc
(bad)
push
xchg
jno
jl
stos
pushf
xchg
pushf
cdq
jg
push
xchg
jmp
in
stos
adc
mov
and
inc
pop
lea
mov
fcmovnbe
mov
mov
in
out
sbb
cs
sbb
mov
pop
and
inc
pmulhuw
jmp
mov
mov
test
out
push
stos
mov
fs
iret
xchg
xor
popa
jl
(bad)
mov
push
xchg
int
and
xchg
or
inc
jge
fadd
jl
or
(bad)
push
scas
ds
pushf
clc
jb
adc
movs
int3
(bad)
shl
lock
fsub
xchg
mov
lods
inc
sbb
mov
and
fisttp
dec
and
int3
adc
aad
pop
inc
lea
cmp
fwait
xchg
xchg
inc
cs
mov
pop
ja
lahf
jmp
ss
or
fadd
inc
scas
xchg
iret
loop
add
hlt
jb
mov
pop
aas
je
in
xchg
push
jecxz
add
jae
mov
mov
aad
adc
fwait
inc
xchg
sbb
xchg
adc
loope
add
jnp
out
jp
retf
and
rcl
push
or
xchg
aad
inc
call
dec
fs
jo
and
cmps
fdiv
iret
icebp
ins
aad
fisttp
(bad)
(bad)
mov
xor
push
fwait
ror
sub
cmps
or
mov
aad
xor
pop
sub
sti
fs
std
aad
adc
jmp
test
adc
jnp
xchg
cld
(bad)
pop
cwde
sar
xchg
fs
jmp
cmp
sub
mov
mov
mov
pop
in
popa
mov
xchg
xchg
fwait
adc
cmp
pop
in
xor
bound
loope
outs
mov
lea
xchg
addr16
and
ror
sahf
xchg
cmp
and
mov
or
cld
dec
in
sub
call
mov
xchg
adc
aaa
fist
es
mov
mov
jmp
stc
sub
add
inc
sbb
ja
movs
xchg
call
adc
mov
out
imul
xchg
inc
sbb
mov
shr
pusha
call
jno
push
shl
xchg
movs
(bad)
imul
mov
sub
pop
xchg
sbb
lods
jbe
adc
xchg
or
dec
call
ins
mov
je
inc
fisttp
jae
and
lds
(bad)
mov
in
std
hlt
movs
ror
push
fwait
mov
and
add
adc
xchg
mov
mov
xchg
jmp
outs
(bad)
mov
mov
movs
icebp
xchg
cwde
not
cmp
push
unpckhps
aas
push
cdq
loopne
mov
adc
fist
aad
lahf
shr
out
xchg
imul
(bad)
xor
and
fnstcw
lea
jp
sub
out
mov
xchg
out
push
scas
push
out
dec
xchg
mov
cmp
xchg
mov
pop
(bad)
or
lods
adc
add
ret
cli
aad
pop
adc
(bad)
xchg
mov
or
into
push
je
mov
cmp
or
ins
mov
(bad)
inc
fwait
push
jg
inc
fs
mov
dec
xchg
push
pop
or
out
add
xchg
push
inc
in
lods
dec
iret
pop
shr
xchg
push
mov
jo
xchg
or
pop
dec
in
or
leave
outs
add
ds
cmp
(bad)
(bad)
in
fnstsw
or
xor
movs
xchg
xchg
sub
mov
and
cdq
fwait
ds
aaa
and
sub
jne
inc
mov
xchg
xchg
and
xor
xor
mov
xchg
add
int3
ficom
in
adc
and
adc
jge
xor
push
adc
mov
aam
push
xor
mov
in
xchg
mov
cmp
xchg
adc
iret
sar
dec
mov
imul
mov
out
or
pop
pop
cmp
in
jnp
mov
mov
lods
and
hlt
jbe
push
fwait
push
push
mov
mov
and
xchg
mov
add
sub
fs
pop
jg
fwait
cmp
mov
sbb
mov
adc
stc
cmps
lahf
loopne
outs
mov
xor
mov
sub
xchg
inc
jo
xor
imul
jae
push
sbb
movs
xchg
and
stos
jl
fwait
dec
ret
xchg
pusha
pop
repz
jecxz
add
add
out
inc
cdq
fwait
jle
pop
aad
jmp
push
jmp
clc
loop
jns
in
pop
fs
aam
cmp
or
cdq
lock
stc
loope
push
jae
pop
int
dec
add
ins
fist
jnp
ja
ins
sub
xchg
inc
xchg
adc
fs
push
xchg
and
push
jmp
sbb
lock
mov
aam
jle
jmp
xchg
shl
adc
stos
imul
dec
movs
cmp
jnp
jmp
jns
cwde
popf
mov
dec
movs
scas
and
pop
push
addr16
xor
cmp
mov
add
push
xchg
sbb
loop
xchg
imul
mov
mov
hlt
cmp
adc
xchg
xchg
mov
sub
pusha
mov
ret
jg
push
adc
cdq
inc
mov
ds
test
and
ss
hlt
push
or
arpl
je
pushf
mov
xchg
int
mov
mov
mov
and
cmp
add
mov
ins
pop
test
jge
je
shl
(bad)
pop
imul
les
adc
add
pop
cli
repz
cmp
fisub
out
cwde
cmc
push
jl
adc
jnp
or
jg
ins
xor
or
cmps
mov
mov
sbb
cld
leave
stos
mov
loop
out
and
stos
cmps
mov
int3
jmp
sbb
popf
pop
and
mov
lock
out
add
out
movs
mov
ret
add
pop
inc
push
mov
adc
fwait
ja
inc
and
push
xchg
cs
jg
addr16
movs
rcr
sbb
outs
mov
fdiv
js
stos
xchg
push
or
adc
out
inc
and
mov
mov
adc
lea
mov
cld
push
inc
xor
fiadd
push
and
push
out
pop
jl
or
add
xchg
mov
inc
(bad)
jns
cmc
jl
xor
dec
(bad)
int3
xchg
push
push
dec
cld
imul
sbb
sbb
xor
adc
adc
mov
add
cmps
jge
fiadd
push
scas
popf
cmp
jo
mov
fld
loopne
xchg
cwde
jmp
int3
jp
push
pop
aam
cmp
icebp
lahf
mov
pop
adc
out
mov
xchg
cld
dec
lods
inc
add
xlat
mov
jae
xchg
inc
into
or
lahf
in
std
cmp
mov
xchg
cmp
ret
enter
ficomp
stos
jle
or
rcr
fwait
iret
fwait
scas
cmp
jg
mov
push
(bad)
xchg
scas
arpl
push
mov
sub
pop
in
or
sete
scas
hlt
inc
xor
sub
and
and
sub
mov
xchg
dec
rcr
pop
jmp
sbb
hlt
sbb
lea
or
cmp
xchg
sti
xchg
stos
lahf
mov
adc
(bad)
div
leave
push
push
xchg
dec
jecxz
fwait
retf
sub
mov
cld
fild
xchg
xor
ret
arpl
pushf
retf
in
push
pop
dec
sub
push
sbb
in
mov
cmp
mov
call
movs
xor
pop
cmp
sbb
enter
retf
dec
xchg
mov
out
mov
mov
xchg
sub
cwde
inc
gs
les
inc
xor
fcom
or
xchg
lahf
jecxz
idiv
and
xchg
mov
xlat
or
mov
and
sub
jecxz
inc
lods
sbb
pop
loop
xchg
lds
mov
jno
sub
xor
(bad)
xchg
and
sbb
fwait
push
out
je
mov
ficom
ret
or
stos
jne
sub
stc
std
sub
pop
push
fs
fwait
out
adc
add
or
pcmpeqb
or
(bad)
cdq
add
fst
push
shl
les
cmp
or
not
js
xchg
adc
push
test
stc
xchg
mov
fmul
je
or
into
adc
add
aas
cmps
stos
adc
aas
pop
call
rcr
mov
xchg
mov
xor
mov
aam
popf
mov
lea
or
sub
mov
(bad)
outs
out
mov
lods
mov
xchg
movs
bound
mov
retf
fst
(bad)
sar
dec
mov
jno
popa
adc
jecxz
cmps
ret
fcmovb
(bad)
ss
je
aad
js
fs
cmp
aam
sbb
or
imul
in
inc
and
xchg
out
mov
icebp
std
xchg
mov
fnstsw
les
fdivr
adc
ins
or
mov
nop
xchg
icebp
pop
xchg
xchg
mov
inc
pop
jecxz
push
cli
sub
jns
push
loopne
and
xlat
sub
scas
repz
daa
int3
fwait
sub
pop
fld
xchg
fwait
sub
push
xchg
or
dec
aaa
and
test
pushf
sahf
gs
sub
(bad)
cmp
xchg
retf
add
mov
xchg
cmp
call
scas
xchg
sbb
mul
fld
(bad)
int3
test
test
lods
lock
pop
inc
nop
push
xchg
movs
dec
outs
xchg
je
out
push
cmp
icebp
adc
push
in
cmps
test
pop
sahf
dec
inc
and
cmp
lods
loop
push
pop
mul
inc
xchg
add
lahf
xchg
xor
inc
xchg
xor
aam
mov
mov
cwde
mov
movs
push
aas
push
rcr
adc
pop
das
xor
fidivr
mov
mov
dec
dec
mov
test
not
sti
xchg
fst
mov
adc
fiadd
imul
cmp
mov
pushf
lds
xor
jbe
sbb
mov
jl
lods
xchg
(bad)
int3
repnz
pop
xchg
xchg
push
fcomp
scas
sbb
retf
mov
ficom
cmp
inc
xchg
icebp
sub
pop
(bad)
lahf
xchg
adc
test
mov
jo
ds
stos
push
mov
lods
fucomi
add
push
rcl
mov
pop
jns
or
(bad)
jp
clc
cmp
xchg
sbb
mov
hlt
fs
rcr
neg
jmp
retw
push
mov
sub
jp
in
mov
mov
stos
into
and
das
and
sbb
mov
js
jmp
rcl
or
inc
sbb
in
jp
sub
test
lahf
jp
xchg
and
enter
xor
or
or
pop
pop
xchg
sahf
dec
dec
sub
lds
pushf
ss
jae
adc
mov
dec
xchg
xchg
xchg
jmp
fisubr
and
add
test
cdq
or
pop
pop
out
and
hlt
mov
mov
xchg
cmp
outs
push
sub
jo
jbe
jle
sub
inc
adc
out
out
fwait
xchg
popa
cmp
aaa
rol
xchg
xchg
into
jecxz
sbb
or
xchg
(bad)
adc
sub
stc
mov
xchg
push
xchg
out
xchg
(bad)
adc
mov
mov
arpl
rol
sar
xchg
cmp
mov
jl
pop
xchg
data16
adc
mov
pop
aam
pop
sub
push
xchg
adc
sbb
add
mov
xchg
xor
loop
retf
xchg
enter
retf
jl
cmc
push
sub
das
js
inc
stos
in
repnz
ins
xor
xchg
addr16
mov
cmp
loope
js
ret
mov
xchg
add
xchg
jmp
xor
mov
mov
and
hlt
or
xor
dec
and
or
mov
test
int3
ret
lods
pusha
or
sahf
repz
mov
in
int
ret
pop
sub
leave
jmp
add
mov
sub
inc
cld
mov
fwait
dec
jl
xor
sub
loop
lea
adc
xchg
addr16
jns
xchg
xorps
pop
or
cmp
push
hlt
pop
and
push
mov
mov
lea
jge
fimul
push
pop
pop
push
das
sub
ja
jl
mov
and
jge
cli
setno
cmp
adc
ss
xchg
dec
es
xchg
sub
shl
jmp
pop
ins
pop
inc
mov
xchg
cmp
mov
mov
cmps
xchg
arpl
jecxz
out
xchg
mov
and
xchg
push
sub
(bad)
rol
pushf
mov
rol
mov
jns
xor
mov
adc
mov
ret
and
xchg
ja
mov
pop
mov
aam
call
xchg
adc
inc
aaa
iret
xchg
and
in
jle
ins
xchg
cmp
pop
jmp
lahf
(bad)
icebp
pushf
(bad)
jmp
int
xchg
fisttp
jbe
mov
int3
rol
inc
out
sbb
pop
jne
fwait
lahf
pop
fsub
push
mov
fcmovnb
enter
xor
or
or
rcl
inc
bound
xchg
sbb
gs
aad
into
xchg
retf
rcl
cmps
and
cwde
in
std
int
mov
stos
push
push
cld
xchg
pop
fwait
mov
daa
xchg
ins
div
imul
sub
jo
pop
outs
mov
and
mov
je
or
pop
adc
cmp
sti
jmp
inc
xchg
add
xchg
pop
xchg
sti
fwait
xor
push
int
js
xchg
pop
dec
push
sar
pop
enter
mov
stos
push
fs
scas
popa
add
add
fild
push
mul
outs
mov
int
pop
nop
and
xor
pop
lods
das
add
and
xchg
sbb
cmp
mov
xchg
repnz
sbb
add
sti
xchg
popa
sub
les
sahf
aam
sbb
xchg
pop
cld
movs
retf
into
dec
dec
adc
xor
ret
xor
movs
mov
lahf
jle
retf
in
mov
xchg
mov
inc
pop
mov
ret
xchg
mov
push
xchg
mov
mov
xor
xlat
mov
inc
dec
and
mov
mov
enter
xchg
adc
dec
or
push
pop
push
mov
arpl
inc
mov
push
jo
sub
mov
add
xchg
pop
sbb
ins
add
call
imul
xchg
cmp
loop
mov
mov
xchg
jge
in
jne
mov
movnti
or
xor
les
xchg
ret
(bad)
lods
bound
inc
enter
ja
stos
(bad)
aam
into
cwde
push
sahf
xor
arpl
push
mov
xchg
lods
pop
ss
pushf
ins
ret
pcmpeqd
adc
sbb
fs
xchg
xchg
adc
cmp
sbb
xor
iret
jl
stos
mov
mov
mov
mov
mov
xchg
cmp
xchg
fs
push
xor
xchg
mov
push
xchg
sbb
call
mov
xchg
pop
pop
lods
jmp
in
cmc
adc
adc
xchg
test
xchg
hlt
out
mov
inc
cmp
aas
xchg
aam
dec
lock
xchg
fistp
jo
mov
pushf
fldcw
add
adc
ds
xchg
cmps
rcr
cmp
xchg
push
popf
mov
xchg
add
push
(bad)
inc
pop
pop
and
xchg
cmp
mov
xchg
fadd
mov
cld
pop
push
test
jo
das
xchg
call
sbb
test
xchg
repnz
push
cmps
lock
adc
xchg
xor
jl
or
mov
xor
and
jmp
ret
mov
pusha
push
sbb
cmp
adc
xlat
scas
add
cmp
icebp
xchg
mov
push
lods
cwde
test
dec
jmp
nop
adc
jae
mov
adc
test
fisubr
dec
adc
pop
hlt
pop
sbb
inc
jl
mov
push
mov
int3
xchg
hlt
cld
or
cmps
or
adc
mov
jmp
xor
jl
call
call
add
pop
xchg
mov
push
arpl
sub
xchg
mov
xchg
movs
test
inc
fdiv
mov
adc
sbb
push
inc
out
and
mov
add
scas
mov
faddp
dec
fs
jge
sub
in
push
lfs
jae
xchg
test
pushf
pop
ficomp
ja
shr
sub
ins
out
sub
bound
jl
scas
xor
and
xor
in
push
push
mov
xchg
cld
lds
cwde
out
jl
hlt
xchg
bound
icebp
test
adc
mov
or
jg
cwde
aas
add
or
add
add
adc
lea
mov
mov
jno
inc
lods
xchg
adc
dec
mov
jmp
jl
(bad)
scas
imul
fsubr
hlt
xchg
into
adc
jge
iret
inc
pop
xor
sti
and
jo
xchg
add
push
adc
sub
shr
dec
xchg
mov
shl
and
xor
rcr
xchg
aaa
mov
pop
dec
xchg
in
xchg
and
aas
xor
stos
push
mov
fdiv
jo
or
in
push
pushf
movs
(bad)
jae
push
and
repnz
adc
and
mov
imul
jmp
popf
dec
imul
les
fdivr
stos
icebp
mov
push
hlt
mov
pop
mov
mov
ficomp
mov
xchg
aam
hlt
xchg
fwait
adc
push
fadd
adc
pop
xchg
adc
shl
xor
int
rcr
push
ss
or
xchg
xor
adc
dec
cld
cwde
setge
mov
nop
rcl
(bad)
push
mov
lods
xchg
int
call
mov
and
jnp
cwde
sbb
out
sbb
sbb
jge
push
fs
cmp
cli
pop
out
xor
sbb
mov
push
mov
imul
(bad)
sub
sbb
pop
inc
(bad)
(bad)
mov
fst
mov
lods
xor
adc
mov
sub
sub
loope
sar
sar
cwde
into
fdiv
jg
fwait
sbb
adc
hlt
xchg
jecxz
fadd
mov
jge
rcl
xchg
add
iret
out
loopne
xchg
fstp
xchg
pop
mov
popf
jo
int3
pop
ret
mov
inc
xchg
sub
fwait
sti
pop
bound
mov
inc
cmps
adc
jbe
inc
shl
adc
ret
cs
cmp
add
xchg
aaa
add
cwde
push
jle
adc
cmp
ja
ins
sbb
push
xchg
outs
pop
or
(bad)
pop
push
xchg
loopne
bound
or
lea
pop
xor
adc
push
out
mov
loopne
loop
in
fcomp
mov
xchg
jl
test
call
bound
mov
aaa
xchg
sub
lahf
ror
mov
repnz
dec
sti
xchg
dec
jl
aas
movs
daa
and
sub
pop
in
xchg
inc
dec
xchg
push
mov
push
or
in
ins
pop
xlat
jbe
push
aam
movs
rcl
push
retf
or
add
inc
sub
mov
mov
add
lock
popf
repz
xor
adc
lods
aad
inc
dec
out
mov
cmp
jp
stos
xchg
inc
sahf
push
adc
dec
not
mov
cld
or
cmp
adc
test
cmps
into
adc
and
add
jle
lds
rdmsr
outs
xchg
or
jge
xchg
mov
cmp
ror
mov
cld
mov
int
rcl
xchg
mov
hlt
xor
sar
aam
push
retf
adc
sbb
inc
cmp
das
jg
mov
or
(bad)
les
jle
xchg
shr
and
scas
xchg
(bad)
(bad)
jmp
xchg
sbb
pop
dec
call
xchg
scas
adc
clc
outs
pop
xchg
aad
mov
xor
mov
jno
hlt
les
test
adc
cmps
jg
clc
jle
pushf
push
xchg
adc
outs
or
or
jle
shl
xchg
in
in
jno
jnp
int3
pop
ds
sbb
cwde
retf
xchg
ret
enter
push
adc
jg
fs
and
icebp
adc
enter
je
xchg
mov
cli
movs
lods
mov
adc
sahf
xlat
inc
not
jnp
jecxz
sbb
sub
or
(bad)
aaa
xchg
iret
ins
test
xchg
xchg
mov
scas
outs
inc
and
cwde
push
mov
cmp
jmp
les
fwait
in
adc
adc
mov
aam
mov
lods
outs
xchg
jg
xor
repz
and
call
js
or
cmp
mov
ja
inc
(bad)
mov
xchg
push
and
xchg
push
rcl
and
(bad)
xchg
add
cs
js
xchg
mov
aas
cmps
fistp
jne
popf
mov
push
hlt
movs
out
xchg
pushf
out
mov
xchg
cdq
push
or
and
fimul
xchg
ja
arpl
pop
inc
rcr
cdq
addr16
push
sbb
pop
int3
xchg
mov
cs
and
ins
hlt
leave
shl
fcomp
xchg
sub
pusha
xor
xchg
repnz
or
xor
pop
push
in
mov
lods
sbb
xchg
adc
pop
cmp
xor
xchg
inc
dec
xchg
in
jmp
xor
mov
mul
sar
es
add
push
dec
and
movs
popf
pop
sbb
cmp
jmp
or
pop
adc
xchg
inc
mov
in
sub
xchg
test
sub
ret
inc
dec
sub
popf
or
xor
push
ins
xchg
js
in
leave
jmp
xchg
dec
sub
jnp
cmps
and
pop
scas
sub
dec
xchg
rcr
or
popa
xor
xchg
jecxz
adc
popf
cmc
outs
xchg
movs
push
fucomip
aad
adc
add
xchg
xchg
stos
(bad)
int3
mov
ret
add
fisubr
mov
shl
mov
dec
mov
xchg
xchg
adc
dec
ja
loopne
data16
(bad)
outs
les
push
fdivr
fwait
pop
fisub
dec
cmp
cli
xchg
nop
push
inc
stos
popf
sub
js
mov
pop
ins
mov
sti
mov
dec
cwde
xchg
add
and
mov
sub
adc
stc
fiadd
cmps
inc
jmp
sahf
dec
inc
cmpxchg
scas
pop
adc
mov
movs
adc
sub
es
in
xchg
pop
inc
push
or
test
push
sub
cli
push
je
int
adc
add
jge
popf
outs
xchg
inc
jmp
xchg
test
or
scas
fisttp
je
jae
stc
xor
shl
fisubr
or
push
push
and
xor
xchg
mov
je
shr
sahf
ficom
push
les
cmps
dec
test
or
ins
xor
push
pop
mov
mov
scas
mov
pop
(bad)
fdiv
loop
rcr
jae
adc
or
xchg
lds
mov
jmp
push
push
rcl
loope
popf
cli
adc
sub
add
xchg
jne
in
cmp
xchg
push
and
jle
lds
sahf
and
xchg
xlat
pop
pop
adc
xchg
cmp
jmp
jb
out
call
loop
pop
hlt
lods
int3
xchg
xchg
in
inc
test
int3
movs
popf
into
jmp
mov
stos
add
dec
xchg
sti
xchg
mov
sub
and
test
lods
mov
add
imul
and
fwait
jg
fmul
xchg
ficom
jecxz
inc
bound
aaa
mov
pop
mov
(bad)
sub
xchg
pusha
xchg
and
loope
mov
outs
and
xchg
lods
jle
add
pop
sub
mov
push
retf
xchg
mov
arpl
xor
in
ja
jnp
stos
aas
mov
cmp
mov
xchg
cs
jp
and
push
cmps
in
bound
fs
mov
inc
int3
out
ins
xchg
pop
mov
jo
xchg
inc
call
pop
adc
push
mov
outs
jns
mov
adc
les
xchg
mov
sbb
xchg
mov
push
fimul
je
push
inc
sbb
mov
adc
xchg
jp
mov
push
xchg
out
sbb
ins
retf
mov
add
imul
test
loop
cmp
xchg
xor
sub
sub
add
push
arpl
jnp
repz
mov
inc
inc
inc
mov
xchg
xlat
shl
jo
fnstcw
fist
xchg
mov
adc
jle
inc
xchg
mov
bsf
mov
shl
cmp
xchg
xchg
add
(bad)
(bad)
ds
add
data16
or
stos
jmp
push
xchg
xlat
sub
lods
jo
sbb
popf
test
xor
xchg
and
das
movs
xchg
xor
(bad)
xor
adc
ja
xchg
scas
xlat
iret
enter
mov
adc
jbe
sti
outs
add
leave
cmp
adc
adc
xchg
adc
cli
ss
div
retf
aam
and
xchg
test
scas
ja
ins
es
mov
push
clc
sahf
mov
test
int
cmps
mov
xchg
or
nop
add
cmp
mov
pop
xor
xchg
or
int3
pop
mul
mov
or
xchg
add
hlt
adc
rol
mov
iret
sbb
shl
mov
push
jmp
push
cmp
rcl
and
xchg
sub
push
les
xchg
or
cmp
rcl
mov
push
or
push
ins
sbb
and
push
ficom
sbb
in
push
mov
std
jp
mov
lods
xchg
cmp
ror
mov
je
movs
xchg
int3
xchg
push
mov
xor
ss
pop
lock
popf
sbb
(bad)
sbb
dec
xor
mov
lahf
jl
sahf
push
dec
jmp
retfw
and
lods
or
mov
outs
mov
adc
enter
jg
mov
xchg
or
data16
in
jp
nop
and
jecxz
cmps
sub
in
clc
scas
inc
mov
addr16
push
movs
popa
mov
xor
cli
loop
sar
inc
fnstcw
xchg
cmps
shl
dec
bound
(bad)
nop
mov
dec
popf
pop
pop
inc
lahf
hlt
xor
rcl
push
mov
mov
cld
lahf
ret
pop
mov
int
xor
loop
mov
inc
js
xor
ret
popf
daa
push
mov
sbb
outs
cmps
jmp
popf
xor
jl
arpl
jge
and
test
ins
inc
cmps
mov
inc
mov
sub
cmps
(bad)
cmc
stc
lods
push
test
adc
xor
jmp
test
push
pop
out
pop
cwde
xchg
inc
lahf
push
xchg
add
movlps
mov
jae
in
mov
out
outs
rol
imul
icebp
in
daa
xor
inc
in
ret
fld
sar
xchg
leave
mov
add
sbb
pop
test
jno
pushf
xchg
jmp
mov
je
test
sub
xchg
daa
pusha
mov
sub
xchg
test
xchg
out
pop
adc
and
ror
lods
push
xchg
or
sbb
xchg
lock
adc
fisttp
sub
sti
imul
and
fwait
retf
dec
loope
jns
lods
mov
loop
nop
xchg
cs
dec
sub
pop
or
xchg
outs
inc
jg
lahf
jmp
mov
mov
push
fidivr
std
stos
add
cmps
in
push
or
lea
outs
stos
pop
mov
mov
adc
xchg
mov
call
stc
jno
test
rcr
xchg
cmc
mov
mov
jle
daa
dec
ret
xchg
in
push
inc
dec
pop
pusha
mov
mov
je
adc
and
xor
mov
pop
clc
cdq
sbb
adc
and
mov
sbb
xchg
aas
test
mov
push
repz
xchg
xchg
movs
out
cwde
or
mov
add
and
sub
repnz
ds
add
test
ds
pop
mov
cdq
cdq
jge
test
jp
or
inc
push
fistp
call
xlat
push
adc
and
cwde
int3
out
movs
pop
clc
mul
dec
aam
mov
sar
pop
mov
dec
cmps
inc
mov
jge
mov
mul
fstp
pop
pop
(bad)
jmp
je
nop
mov
xchg
(bad)
push
icebp
dec
xor
out
std
test
xchg
add
jecxz
xchg
sub
sbb
adc
(bad)
jle
cmc
bound
sub
in
jbe
or
test
stos
pop
sbb
in
int3
xchg
pop
adc
(bad)
call
push
and
sbb
test
sub
das
push
mov
dec
int
adc
out
cmc
mov
jo
stos
icebp
in
xchg
mov
xchg
je
xor
cdq
cld
inc
mov
xor
adc
fsubr
call
mov
div
ins
xchg
or
sbb
jnp
repnz
or
fiadd
iret
add
nop
adc
xchg
mov
xchg
jno
push
sub
lods
mov
hlt
ins
xchg
in
fdiv
and
aam
adc
jmp
jnp
inc
mov
shl
cmp
test
xchg
sub
fist
stc
out
js
or
xchg
xor
gs
mov
jnp
jno
jle
sbb
popf
iret
xchg
adc
sub
clc
sub
xchg
inc
dec
(bad)
test
mov
xchg
inc
adc
dec
jnp
dec
xchg
adc
push
repz
add
not
xchg
aaa
cli
mov
and
icebp
fidivr
in
movs
mov
xchg
stos
mov
mov
pop
pop
les
lds
mov
mov
fwait
mov
mov
cmps
push
or
push
jecxz
add
cmp
mov
pop
shr
leave
xchg
scas
bnd
retf
adc
outs
aam
hlt
mov
leave
out
pusha
js
icebp
nop
mov
dec
cdq
xor
in
imul
test
adc
repz
inc
(bad)
int3
mov
jnp
adc
cmps
out
adc
fwait
mov
dec
addr16
xor
jg
xchg
out
mov
or
mov
xchg
je
repz
mov
xchg
dec
es
lock
pop
ins
and
xchg
inc
retf
mov
mov
jo
or
push
mov
pop
arpl
imul
sbb
mov
aam
test
dec
fdiv
cdq
jno
jg
inc
adc
mov
sahf
int3
sbb
pusha
jns
xchg
(bad)
fst
pusha
or
xchg
movs
xchg
adc
mov
xlat
stos
push
xchg
dec
jmp
xchg
and
scas
jp
pop
cmc
ins
xchg
arpl
es
mov
add
mov
push
xchg
and
push
cmp
mov
mov
aam
out
xor
jecxz
and
adc
sub
cmp
movs
mov
test
fisttp
xchg
push
jnp
pop
hlt
jmp
loope
sub
adc
pop
xchg
dec
cmp
pop
pop
cli
xor
mov
jl
xchg
mov
aad
arpl
push
mov
xchg
xchg
add
dec
inc
cwde
fisttp
int3
xchg
outs
mov
fwait
enter
inc
dec
mov
xchg
fdiv
fld
xchg
outs
xchg
out
adc
shl
mov
enter
sahf
fwait
daa
std
pop
cmp
push
repz
cmp
ss
pop
test
cmp
sahf
mov
sbb
test
add
inc
xor
retf
ins
test
push
xchg
add
adc
ja
mov
fistp
in
xlat
cs
adc
dec
sar
mov
push
pop
stos
push
jbe
leave
not
mov
retf
xchg
adc
fsub
mov
or
jnp
fs
fst
ins
push
sbb
lea
xchg
repnz
int
push
imul
push
jle
xchg
arpl
inc
into
out
or
push
dec
xchg
inc
sahf
adc
push
mov
fs
push
mov
not
fcomp
out
repz
xchg
mov
mov
mov
xchg
rcr
xor
mov
adc
mov
dec
and
loopne
cmps
loop
ds
mov
jl
adc
xchg
loope
std
add
ins
xchg
mov
xchg
jmp
pop
push
jb
pop
fld
call
jmp
xchg
repz
push
lea
stos
jecxz
das
xchg
pop
inc
cwde
push
bound
je
call
mov
push
movs
pop
xchg
hlt
xor
xor
push
jbe
mov
mov
cmp
aas
xor
push
mov
int3
pop
xchg
mov
cs
ret
xchg
in
jb
retf
nop
gs
aad
mov
inc
out
(bad)
inc
xchg
dec
repz
js
mov
sbb
cdq
fst
dec
ja
or
test
int3
fwait
mov
hlt
(bad)
adc
imul
inc
xchg
cmp
pop
xchg
mov
pop
fdiv
jns
jl
aaa
xchg
xchg
inc
ror
add
xchg
xchg
cs
cmp
icebp
pop
xchg
inc
sbb
pop
push
mov
stos
mov
push
test
int
fwait
or
(bad)
pop
outs
and
stos
out
xchg
jmp
xchg
call
fistp
inc
shr
push
cmps
push
aam
pop
scas
fdivr
adc
mov
mov
fchs
adc
xchg
pop
add
mov
push
das
popf
imul
leave
mov
xchg
pusha
dec
inc
mov
out
call
mov
fsub
ret
mov
mov
lahf
stc
push
xchg
mov
mov
rcl
sub
push
xor
fst
push
push
cmc
add
jnp
shr
sub
xlat
xchg
lea
mov
xchg
dec
adc
sbb
mov
lods
xchg
mov
icebp
xchg
mov
test
or
in
mov
jns
aam
call
mov
mov
aam
icebp
ins
jno
dec
xchg
inc
fsubr
cli
xchg
pop
in
daa
sbb
(bad)
push
sbb
scas
shl
mov
xchg
not
cli
mov
sbb
xchg
jp
and
pop
test
jns
xchg
iret
push
mov
add
xchg
cmps
fadd
out
jecxz
repnz
cmp
out
dec
xchg
xchg
push
cmc
push
jecxz
jmp
stos
into
test
outs
xchg
push
adc
mov
sti
and
xchg
movs
dec
xchg
cmp
or
xchg
jmp
xchg
push
xor
dec
aad
add
ret
fwait
test
inc
or
mov
xchg
imul
pusha
or
mov
add
ds
push
js
xchg
out
loop
sub
jbe
push
ja
lahf
dec
add
or
jg
sbb
ss
retf
in
rcr
and
adc
repz
adc
sbb
pop
jae
xchg
mov
xchg
(bad)
mov
mov
out
add
pop
stos
aas
ja
xchg
xchg
xchg
add
icebp
into
xchg
jo
retf
xchg
adc
ins
xchg
jns
sub
(bad)
cli
arpl
in
sar
add
(bad)
into
hlt
outs
pop
pop
sahf
xor
(bad)
xor
int
xchg
jge
ss
je
adc
add
xchg
push
push
xor
imul
lds
or
fst
mov
push
mov
mov
stos
aam
lds
hlt
pop
xlat
fwait
pop
idiv
aam
lods
outs
sub
arpl
push
xchg
repz
dec
jns
pop
clc
push
mov
xchg
and
shl
xchg
iret
aas
out
in
fbstp
sbb
push
xor
bound
ss
inc
mov
xchg
lahf
aam
push
ja
inc
adc
jbe
cwde
aam
icebp
ret
jg
push
mov
and
sti
(bad)
cmp
cdq
xchg
out
mov
add
imul
popa
add
outs
scas
sbb
push
push
push
xchg
fild
aad
dec
aam
pop
pop
lds
ror
mov
stos
push
and
push
in
cmp
cmp
ins
mov
jg
aad
test
in
pop
sahf
test
mov
inc
mov
mov
retf
aas
sbb
sub
aas
mov
jne
retf
sub
stc
loopne
fist
pop
or
inc
pushf
aaa
mov
add
js
shl
add
pop
pop
xchg
and
xchg
fwait
sbb
push
push
jmp
push
mov
xchg
dec
push
fcomp
adc
or
jge
mov
xchg
repnz
ret
(bad)
mov
je
and
xchg
xchg
fild
mov
xchg
(bad)
stos
scas
lds
pop
and
lea
icebp
(bad)
outs
pop
inc
cwde
xchg
int3
fld
unpcklps
or
sub
stc
mov
pusha
lea
fimul
jl
cmc
xchg
mov
pop
sbb
and
jp
xor
xchg
in
cmps
int
lea
(bad)
mov
push
sbb
inc
mov
jmp
adc
pop
xchg
xchg
mov
sub
inc
ror
sbb
jge
sbb
dec
sub
xchg
aad
inc
pop
aas
jne
loopne
jns
cwde
adc
jecxz
add
(bad)
cmp
xchg
scas
inc
fadd
cmp
mov
cli
mov
arpl
and
and
mov
js
push
cmp
jl
xchg
lods
jo
add
push
sbb
and
les
outs
lahf
cwde
sbb
xchg
adc
hlt
mov
ror
(bad)
(bad)
fcomp
xchg
int3
into
adc
xchg
mov
sbb
(bad)
sti
retf
pop
lahf
jb
and
or
cmp
jno
pop
mov
sbb
push
stos
and
push
ret
xchg
pop
in
push
fwait
jae
les
int3
es
xchg
jmp
cli
fsubr
mov
push
arpl
push
pop
in
retf
lods
sbb
add
test
adc
xchg
icebp
popf
loope
loopne
jl
dec
or
push
stos
xchg
mov
adc
ins
aam
sub
int
(bad)
es
xchg
xor
sbb
repz
push
mov
pop
retf
repnz
out
fwait
jno
cdq
cmc
in
psubsb
repz
data16
fwait
aam
adc
sub
xchg
or
lea
mov
pop
scas
jne
xchg
push
lods
xchg
mov
cmps
mov
dec
mov
loop
sub
xchg
mov
push
outs
mov
dec
mov
mov
push
(bad)
ins
(bad)
pop
pushf
fwait
enter
mov
sahf
add
or
(bad)
hlt
rcl
aam
mov
sub
sub
adc
sub
xchg
retf
out
add
push
mov
int
cmp
xchg
sti
jle
mov
test
dec
or
ins
push
imul
xchg
mov
bnd
(bad)
in
sub
outs
ss
out
lock
push
push
xor
(bad)
mov
test
ret
dec
jmp
mov
jmp
fcomp
mov
stc
cwde
mov
adc
push
pop
(bad)
inc
jae
jbe
repnz
fsubp
rcl
jmp
into
mov
jl
cmc
jno
gs
push
loope
xchg
(bad)
and
fsubr
int
mov
jge
stos
jns
inc
xchg
mov
or
in
pop
xchg
xchg
out
add
mov
repnz
adc
push
fimul
jle
ret
inc
ds
cli
xchg
dec
jmp
xchg
adc
pop
shl
lock
inc
sbb
jo
add
aad
arpl
cwde
or
movs
jbe
adc
(bad)
adc
imul
mov
aam
loope
gs
xchg
aam
and
fcmovu
xor
jg
or
fdiv
dec
xchg
(bad)
popf
lds
xchg
xchg
dec
sbb
push
pop
cmp
sub
mov
dec
jb
mov
int
xchg
ficomp
cwde
inc
cwde
test
push
sub
fiadd
jne
and
rcl
ret
out
hlt
cwde
xchg
fist
xor
js
cmp
retf
add
fnstenv
inc
add
jmp
push
inc
imul
adc
test
xchg
mov
adc
bound
jno
xchg
xchg
pop
mov
ret
int
inc
dec
lock
inc
popf
fisubr
and
(bad)
sub
xchg
ret
xor
ret
fdivr
mov
fild
add
test
mov
pop
xor
xchg
stc
arpl
push
mov
xchg
nop
dec
pop
cmc
test
xchg
jge
pop
mov
and
add
add
out
nop
not
loop
adc
jae
add
std
jge
push
inc
cmps
sti
and
rcr
xchg
and
adc
data16
iret
fstp
lock
mov
lahf
mov
in
cmp
xchg
mov
out
test
mov
push
clc
pop
inc
dec
iret
xor
push
movs
adc
mov
cmps
push
push
ror
push
repz
fcom
push
pop
xchg
test
lea
xor
cmps
xchg
fucom
pop
fiadd
xor
inc
jl
rol
adc
test
lods
push
fwait
jp
inc
add
les
push
mov
pushw
xchg
cmp
repz
jae
aas
pop
xchg
or
sbb
fisttp
cmp
loope
cmp
mov
push
sbb
jnp
xor
cdq
push
test
jb
(bad)
dec
pop
xchg
cmp
fwait
in
(bad)
fwait
cmc
push
add
call
jb
sbb
adc
iret
mov
ins
js
mov
push
mov
sub
sub
sub
cmp
pop
fisttp
loope
test
sub
movs
dec
adc
xchg
repz
and
das
jmp
jl
shl
fs
xchg
outs
jle
fidiv
lds
fsub
fwait
test
aas
mov
test
popf
adc
xor
mov
xchg
fiadd
adc
sub
(bad)
dec
mov
outs
jo
mov
movs
push
lds
push
dec
cmp
xchg
inc
icebp
ds
sbb
adc
push
rcl
cwde
push
mov
shl
inc
aas
cwde
sbb
pop
push
shr
or
xchg
xchg
jg
lods
push
test
in
gs
sbb
pop
pop
std
or
add
mov
aas
xchg
sahf
push
movs
jg
jmp
and
pushf
test
add
std
retf
mov
xchg
repnz
pushf
adc
add
xchg
shr
fmul
mov
sahf
or
or
inc
scas
test
(bad)
cwde
ret
call
xchg
outs
mov
stc
loope
add
adc
ret
call
pop
es
xor
xchg
xchg
sbb
sub
test
jle
cmps
fsubrp
cmp
shl
mov
jo
and
push
sbb
stos
in
sbb
push
mov
jmp
xor
sbb
push
sbb
jl
repnz
ret
rcl
jge
mov
dec
add
shl
mov
stos
in
in
sbb
cli
sbb
cmp
sub
adc
adc
popa
leave
mov
aam
jns
mov
inc
xor
sbb
push
dec
mov
pop
loopne
mov
pop
dec
xchg
hlt
dec
push
lock
pop
push
jns
out
add
sbb
jl
into
push
xchg
les
popf
movs
frstpm(287
pop
mov
pusha
jb
push
mov
sar
lock
sub
xor
sub
mov
int3
fldcw
pop
sub
aam
jno
xchg
fcmovu
xchg
test
or
call
xchg
lahf
inc
adc
nop
fistp
or
xchg
and
inc
outs
adc
dec
cdq
fmul
pushf
or
push
iret
mul
cs
mov
add
cwde
inc
inc
lods
xchg
cmps
mov
call
xrstors
add
xor
outs
cmps
dec
in
adc
pop
jg
mov
sbb
xchg
xchg
inc
cmps
mov
mov
xor
cli
mov
fdiv
xchg
pop
push
jmp
inc
cmp
lahf
fiadd
test
push
inc
test
inc
mov
les
push
sbb
adc
fldcw
and
sub
cmc
mov
sbb
out
lods
mov
cld
xchg
mov
cmps
jns
loop
cdq
les
pop
test
sbb
cdq
mov
test
loopne
sbb
mov
in
loope
xchg
int3
in
sub
xor
stos
or
enter
mov
push
sub
sub
repz
inc
lahf
aam
xor
fcomp
jmp
ins
icebp
jl
stos
and
sub
fdivr
dec
mov
repnz
lods
sbb
and
add
(bad)
adc
mov
xchg
(bad)
dec
call
pop
loop
inc
retf
enter
es
leave
xchg
inc
add
xor
(bad)
sbb
add
rcr
clc
dec
fcomip
inc
(bad)
popf
aas
push
xchg
xchg
pop
cld
jae
mov
xchg
addr16
fs
pushf
pop
and
iret
mov
sqrtps
pop
pop
xor
jl
mov
add
cld
add
stc
fisubr
pop
int
jnp
xor
lods
adc
adc
xchg
(bad)
ins
fidivr
(bad)
cmps
sub
xor
push
movs
push
pop
fld
in
shl
sbb
mov
add
xor
sbb
out
les
ficomp
out
push
and
xlat
push
sbb
imul
xchg
bnd
loope
sahf
sbb
fdiv
cmp
sbb
mov
aam
test
pop
icebp
jb
ins
add
jg
sbb
std
mov
mov
(bad)
xchg
(bad)
aam
jg
add
test
add
test
mov
pusha
cmp
sahf
push
rcl
nop
icebp
ins
shl
je
outs
mov
popa
sub
test
in
lods
gs
pop
xchg
xchg
scas
mov
and
loope
xchg
out
ins
fadd
fs
xchg
data16
push
sbb
fcomp
(bad)
mov
das
aaa
xchg
mov
scas
test
jbe
xrelease
sti
pop
fwait
iret
jbe
mov
scas
das
xchg
rcl
push
out
or
sbb
stos
jg
dec
mov
jnp
jno
adc
adc
mov
lods
sub
out
fwait
in
cmp
xor
push
dec
xchg
lds
adc
test
mov
cli
xchg
icebp
int
add
mov
jg
cdq
lahf
push
mov
sbb
and
mov
and
jmp
xlat
imul
sub
dec
aas
push
or
bound
popf
xchg
ret
js
mov
xchg
add
clc
mov
mov
aad
cld
leave
popf
jecxz
mov
cmp
mov
loop
mov
daa
adc
push
neg
mov
sahf
enter
adc
xchg
add
xchg
mov
mov
mov
lahf
inc
lahf
mov
jae
pop
cwde
jecxz
fs
xchg
(bad)
adc
jnp
ss
xchg
and
clc
loop
mov
fwait
sub
les
pusha
cmc
stos
xchg
dec
add
jle
jb
mov
cld
push
fcmovb
dec
xchg
add
scas
aam
fs
js
xchg
pop
lahf
jp
arpl
mov
test
iret
sar
fcom
retf
(bad)
imul
aad
scas
or
ja
jae
retf
mov
sar
cmp
sub
inc
cmp
lea
adc
jl
fisttp
jp
call
cld
in
adc
gs
pop
jne
lock
ret
xchg
outs
xor
xchg
inc
xchg
mov
mov
push
rol
call
mov
outs
mov
test
xchg
leave
bound
mov
cmp
jo
sahf
mov
mov
push
xchg
ins
lods
test
xchg
push
xor
ret
adc
out
adc
cld
popf
mov
cwde
das
aam
imul
push
out
dec
rcl
sbb
xchg
je
xor
cmps
enter
jmp
xchg
neg
mov
shl
pop
movs
jmp
and
cwde
pop
das
or
jne
cmp
add
sub
(bad)
call
pop
xor
inc
lods
push
fsub
adc
je
rcl
popf
fcom
adc
sub
xchg
lea
fs
std
mov
popf
jne
frstor
xchg
pop
ss
sbb
out
aaa
dec
bound
xor
lods
adc
int
fdiv
xchg
sti
mov
inc
mov
xchg
(bad)
sub
pusha
mov
mov
fwait
sub
mov
(bad)
sub
cmp
and
fsubr
lods
in
push
jnp
mov
dec
popf
shl
xchg
mov
or
xchg
add
jg
jno
test
in
add
imul
ins
outs
xor
out
arpl
leave
mov
adc
push
stc
ins
fcom
jb
out
mov
mov
call
call
cmp
xchg
pop
aad
xor
fld
xchg
mov
outs
stos
xchg
push
lea
call
inc
mov
pop
and
xchg
cmp
push
jmp
or
popf
and
js
mov
xor
retf
adc
inc
call
jne
pop
mov
hlt
jnp
xchg
call
pop
sbb
xchg
(bad)
lahf
fsubr
add
dec
sbb
adc
pop
enter
xchg
adc
mov
cdq
inc
xor
fwait
sbb
lods
das
dec
xchg
xchg
fisub
loope
jnp
mov
call
and
sahf
xor
or
xchg
xchg
fisub
xchg
scas
sbb
rcpps
aas
jle
sub
and
neg
and
popa
imul
in
(bad)
mov
cmps
je
push
jle
pop
push
out
and
icebp
xchg
leave
cmps
cs
div
movs
adc
and
cwde
xchg
xchg
fcomp
sub
(bad)
retf
xchg
push
pop
or
in
test
clc
xlat
loopne
inc
sub
stc
or
mov
dec
jbe
xor
imul
adc
jp
push
loope
jmp
popa
pop
xor
pop
fisub
fdiv
in
stos
arpl
test
jle
shr
retf
cmp
inc
mov
sub
aas
cwde
arpl
test
popf
fstp
adc
mov
inc
sub
inc
and
cli
cs
out
out
dec
pop
adc
sub
pop
adc
enter
or
sub
mov
cwde
icebp
push
push
daa
retf
popf
dec
jl
adc
jg
das
hlt
imul
inc
call
fwait
inc
mov
push
test
xor
lock
pop
xchg
cmp
lods
(bad)
pop
sahf
jge
hlt
fild
adc
xchg
cmps
loopne
xlat
ror
call
jle
outs
sbb
mov
pop
mov
push
jl
sub
leave
stos
(bad)
jg
and
sar
out
jmp
repnz
aad
mov
mov
clc
lods
movs
aam
out
and
mov
jnp
sbb
rol
stc
adc
into
mov
xor
push
enter
mov
jns
pusha
imul
pushf
mov
je
adc
xchg
push
add
test
(bad)
jae
add
adc
xchg
inc
xor
and
push
xchg
shl
bound
inc
mov
and
lds
cmc
push
adc
push
mov
adc
imul
pop
les
nop
ds
inc
and
mov
pop
mov
mov
cwde
movs
(bad)
push
mov
inc
(bad)
push
jae
es
dec
pop
inc
sti
cmp
xor
lahf
adc
add
jp
btr
mov
mov
ins
mov
in
push
jl
and
xchg
sahf
(bad)
out
sub
mov
fstp
push
xchg
cmp
dec
push
(bad)
xchg
sbb
out
repz
cwde
sub
mov
gs
push
stc
into
adc
dec
je
push
arpl
dec
stos
out
leave
xchg
and
jle
retf
mov
test
xchg
inc
xor
jns
hlt
shl
pop
jge
and
call
xchg
mov
cmp
movs
mov
xor
xchg
inc
outs
(bad)
xchg
mov
loop
jl
imul
mov
ins
and
add
repz
icebp
jl
adc
sbb
mov
daa
ds
add
push
adc
lds
sub
stos
bnd
mov
or
mov
mov
fld
jle
lods
lods
js
or
lahf
jge
xlat
jmp
jp
jmp
add
cld
out
pop
js
dec
sbb
test
or
mov
(bad)
into
add
mov
mov
adc
(bad)
pop
fidivr
int3
psllq
xlat
sbb
lea
or
stos
call
pusha
push
push
stos
xchg
jo
rol
aaa
repnz
adc
xchg
dec
rcl
(bad)
sub
jmp
push
fwait
dec
cmp
test
sub
mov
imul
fstp
fwait
jle
adc
mov
rcr
jmp
cmp
popf
in
call
or
mov
out
mov
push
shl
cld
bound
ficomp
xor
adc
or
mov
dec
xchg
lods
pushf
inc
mov
push
jne
pop
dec
pop
(bad)
fbstp
ins
push
outs
aam
push
xchg
mov
jb
test
jo
lods
xchg
dec
cmp
push
aam
lds
pop
aad
iret
jp
dec
and
jns
fist
idiv
xchg
add
add
mov
xchg
sbb
xchg
imul
inc
jp
lock
mov
xchg
test
rcl
dec
jo
mov
xchg
and
movs
mov
loope
das
sub
xchg
cmps
add
jmp
pop
pop
push
sahf
cmc
mov
or
jbe
xchg
inc
inc
fidiv
cmp
retf
cmp
mov
sub
mov
xchg
jb
xor
and
(bad)
fsub
aaa
push
xor
mov
pop
ds
mov
inc
jns
xchg
jp
mov
shr
xchg
fiadd
add
xchg
(bad)
into
hlt
or
dec
mov
push
sbb
adc
cli
scas
and
xchg
or
jae
outs
or
ins
retf
inc
pop
inc
xchg
jb
(bad)
leave
sub
push
stos
inc
les
call
xchg
(bad)
cld
out
mov
movs
aas
adc
imul
stos
icebp
mov
push
jmp
adc
mov
loopne
xchg
sbb
mov
mov
ds
xchg
add
and
sub
dec
(bad)
(bad)
jecxz
imul
clc
xor
cwde
cmps
repz
fst
lahf
cdq
pusha
sub
xchg
lock
popf
test
adc
jecxz
jns
jbe
mov
es
out
cmp
ror
fistp
stc
push
jg
scas
loopne
cld
jbe
fist
mov
push
pop
and
stos
icebp
add
inc
rol
sbb
sbb
xchg
cmp
mov
mov
jnp
adc
adc
test
fbld
inc
or
addr16
sahf
hlt
xchg
push
in
inc
push
cmp
(bad)
inc
add
movs
icebp
xchg
jl
aad
mov
popa
fld
xchg
outs
pop
or
and
push
mov
jp
mov
inc
sbb
ss
int3
sbb
jb
les
dec
sbb
imul
call
cmps
hlt
dec
xchg
shrd
push
adc
dec
jo
pop
sub
sub
ret
out
inc
loopne
xchg
in
pop
mov
pop
jns
fs
sub
inc
gs
mov
cmps
sbb
xchg
daa
scas
hlt
dec
lods
mov
jae
inc
mov
repz
enter
mov
popf
inc
ss
mov
int
push
pop
movs
pop
scas
mov
pop
dec
mov
xor
pushf
sub
xor
inc
lods
stos
sbb
dec
hlt
push
mov
cmp
retf
in
daa
call
fbld
out
fcomp
push
sbb
adc
cmp
sbb
xor
mov
xchg
pop
imul
xchg
sub
push
in
outs
fcmovnbe
cmp
xchg
in
sbb
xchg
inc
sub
xchg
dec
xor
int
pusha
or
lahf
ja
lock
jbe
cwde
or
add
or
rol
div
add
loopne
retf
cmp
cs
or
or
ss
dec
fnsave
int
ds
push
xor
data16
int3
idiv
jns
pop
pop
pop
xchg
leave
loope
add
aam
test
inc
mov
call
pop
pop
sbb
xchg
add
daa
pop
ds
sub
xor
out
inc
pop
add
out
scas
arpl
xchg
imul
jne
xchg
adc
cmc
inc
xchg
mov
outs
push
in
loope
jb
les
jle
xchg
add
or
bound
adc
not
and
movs
xor
outs
test
mov
mov
fst
inc
sub
xchg
or
cmps
xchg
mov
xchg
and
xchg
jmp
and
add
sti
(bad)
jecxz
cmp
retf
inc
ins
daa
mov
out
xor
mov
xor
enter
rol
mov
mov
xchg
dec
add
imul
sbb
xchg
push
loopne
sub
imul
ss
mov
xchg
or
sbb
xchg
add
inc
jo
xor
mov
icebp
push
inc
xchg
clc
(bad)
push
and
push
test
test
movs
inc
leave
cmps
(bad)
lahf
pop
xchg
mov
mov
xor
lock
out
mov
xchg
xchg
sub
in
pop
sti
pusha
xchg
out
popa
outs
js
test
sbb
jle
inc
xchg
or
sti
mov
jne
dec
inc
cmp
cmp
jmp
lahf
pop
pop
push
aam
icebp
xchg
xchg
cmc
shl
add
lahf
sub
pop
and
xchg
pusha
push
inc
rcl
jmp
cmc
mov
xchg
in
cli
and
adc
push
mov
jg
xchg
or
lds
out
add
jl
xchg
es
sub
mov
push
mov
in
mov
sahf
(bad)
div
mov
xchg
lds
adc
xor
nop
sbb
je
sbb
and
leave
popf
xchg
push
cmc
out
cmp
and
sub
fbstp
xchg
cld
cmp
cli
pop
jl
shr
lea
std
mov
sbb
imul
mov
adc
sub
jl
lock
mov
ds
js
sahf
hlt
in
or
fldenv
cmp
aas
ins
push
jne
inc
sahf
xchg
jl
jb
cmps
cmp
or
jge
ja
imul
push
xor
xchg
xchg
sbb
xor
push
sbb
jge
push
cs
jl
inc
adc
cld
mov
ror
adc
jbe
mov
arpl
jge
icebp
ficom
dec
dec
cdq
jge
enter
test
imul
pop
ins
jne
dec
fmul
push
mov
push
je
mov
pop
jmp
inc
sahf
lahf
arpl
aas
int3
sbb
pusha
sbb
hlt
fsubrp
xchg
jb
cli
test
sub
dec
xchg
scas
and
ins
ss
push
mov
add
cld
xchg
fwait
inc
test
inc
xor
jbe
dec
sub
xor
repz
out
push
fist
mov
xchg
xor
adc
ss
shl
js
fcomp
jns
dec
inc
mov
(bad)
arpl
retf
rol
push
sub
sub
cmps
sbb
push
lahf
pop
xchg
push
iret
cmp
xor
jle
out
cli
xchg
(bad)
mov
xchg
xlat
lea
xchg
test
xchg
mov
mov
sub
cdq
lahf
inc
gs
repnz
out
mov
push
cld
xchg
dec
mov
stos
add
mov
adc
adc
xchg
loope
dec
inc
mul
inc
fcom
rcl
sar
xchg
adc
es
jge
xchg
ret
push
and
dec
test
shl
mov
fiadd
js
lock
movs
ja
sbb
pop
or
movs
clc
and
xchg
xor
loop
xchg
(bad)
adc
sub
repnz
pop
fdivr
sbb
sti
sub
loopne
in
imul
ret
xchg
pop
sti
out
sahf
aaa
sub
xor
icebp
or
inc
imul
call
push
xchg
ins
add
xor
imul
jecxz
shl
jne
out
push
dec
jnp
lea
pop
(bad)
adc
xchg
or
push
nop
xlat
xor
xor
fcmovnb
mov
adc
clc
mov
adc
xchg
sbb
adc
enter
and
sahf
jae
jmp
pop
xchg
push
cli
sbb
jb
es
xor
and
cwde
aaa
pop
add
push
aas
xchg
pop
cdq
fnstenv
outs
xchg
popf
movs
jmp
into
out
call
or
sahf
xchg
mov
and
xchg
sub
xchg
push
mov
ins
sbb
adc
outs
push
xor
mov
xchg
mov
jle
loop
lods
xor
scas
mov
xchg
or
imul
cmp
xchg
jae
pop
call
xchg
xor
fisttp
mov
retf
(bad)
outs
jne
mov
sub
inc
or
adc
daa
xlat
add
outs
xchg
pop
pop
or
dec
adc
arpl
adc
xchg
out
iret
push
(bad)
xchg
aam
mov
push
xchg
mov
mov
bound
mov
loop
(bad)
stos
cmp
shl
push
add
popf
ins
idiv
into
pop
in
not
repz
xchg
jg
outs
ret
xchg
inc
pop
pop
mov
dec
or
aam
test
int
je
hlt
out
fwait
inc
retf
sbb
push
push
ds
adc
mov
mov
dec
enter
rcr
sbb
into
xchg
enter
loop
xor
jo
mov
inc
imul
(bad)
or
inc
xchg
clc
repz
mov
fidivr
sbb
pop
mov
in
call
pop
pop
inc
lahf
scas
das
pushf
leave
adc
ret
mov
add
push
mov
dec
mov
int
xchg
inc
iret
fidiv
jo
push
xchg
icebp
cmp
dec
adc
test
stos
pusha
aad
hlt
fdiv
jbe
sahf
add
ins
loopne
(bad)
js
or
lods
mov
nop
fistp
ret
sbb
mov
mov
sbb
inc
pop
pop
xchg
dec
jne
(bad)
inc
mov
(bad)
cmps
es
adc
xchg
popa
jle
adc
xor
inc
leave
mov
test
xor
push
or
pop
dec
dec
inc
in
test
mov
inc
cmp
sub
and
into
addr16
gs
add
inc
jbe
test
imul
pop
aaa
in
pusha
daa
and
arpl
loopne
and
aam
cwde
fld
es
dec
xchg
fldcw
jge
xchg
lods
mov
jle
in
mov
and
jge
in
xor
dec
cdq
xchg
jge
sbb
dec
jg
xor
call
push
xlat
imul
fmul
sbb
loopne
aas
sar
xchg
nop
inc
adc
sar
dec
(bad)
movs
jb
pushf
dec
sbb
hlt
mov
push
fist
cmps
jg
pop
and
jmp
jl
in
nop
jmp
xchg
push
xor
sbb
mov
and
test
lock
out
mov
in
jl
cld
loopne
push
mov
mov
hlt
stos
push
out
cli
call
pop
inc
test
push
cmp
loop
icebp
xchg
idiv
mov
push
adc
dec
xor
push
xchg
or
mov
int3
ins
fsubr
inc
pushf
call
lds
xchg
mov
(bad)
addr16
jae
xchg
and
sbb
xchg
dec
test
cmps
(bad)
xchg
sbb
scas
push
mov
xchg
fnstsw
xchg
mov
movs
jae
xchg
xor
mov
dec
xchg
cmps
jnp
and
xchg
jae
xchg
test
fwait
cmp
lds
inc
xchg
xor
les
loopne
in
outs
sub
and
fs
fcmovbe
stc
dec
cdq
push
test
mov
mov
int
in
movs
nop
mov
mov
xor
xchg
pop
fxch
adc
xchg
ja
xor
sub
sub
xchg
cli
cmp
pop
jmp
jp
jno
push
xlat
mov
ret
xor
sbb
push
cmp
jle
or
mov
std
mov
call
inc
cmp
(bad)
rcl
gs
dec
or
xor
icebp
(bad)
inc
adc
or
inc
pop
stos
sub
and
outs
mov
in
nop
push
xchg
scas
push
retf
xor
aad
test
xchg
push
nop
les
adc
enter
and
icebp
cmc
push
xchg
stos
pop
jne
mov
mov
adc
or
dec
fsubr
mov
and
xor
out
mov
add
xchg
out
mov
jp
dec
dec
mov
xor
add
dec
movs
std
ror
xchg
je
enter
gs
xor
fld
shl
xchg
inc
and
data16
mov
inc
jg
or
xchg
and
jne
ds
xchg
jmp
(bad)
mov
xchg
es
call
jg
fwait
shl
pop
hlt
push
push
fwait
xor
dec
std
je
scas
in
xchg
xchg
jmp
repnz
int
push
fmul
cmp
daa
out
sub
adc
cmc
mov
adc
xlat
sbb
xchg
sbb
(bad)
adc
inc
cs
mov
xchg
ja
cmp
push
test
sbb
loopne
xchg
inc
out
call
mov
push
imul
or
mov
rcl
addr16
adc
xchg
leave
sar
adc
stos
aaa
jnp
lods
cmp
mov
out
dec
jge
(bad)
sti
xchg
outs
or
add
mov
xchg
adc
pop
hlt
inc
pop
loopne
mov
add
xchg
adc
movs
mov
and
pusha
shl
inc
int3
dec
xchg
(bad)
push
pop
in
and
xchg
jecxz
xchg
push
xchg
inc
aam
jns
mov
xchg
mov
loope
popa
push
test
xchg
fcom
pop
xchg
inc
mov
xchg
(bad)
inc
je
aas
sbb
jbe
out
xchg
jl
and
or
pop
rcl
xor
dec
push
push
stos
mov
mov
sub
fadd
inc
jae
popa
push
add
dec
(bad)
mov
mov
cmps
dec
in
mov
xchg
cmp
push
sbb
adc
call
pop
rcl
mov
xchg
push
sbb
loop
stc
hlt
xor
push
cmp
add
loope
icebp
xchg
jns
inc
mov
std
and
int
add
sub
std
sub
mov
stos
(bad)
adc
fwait
in
imul
sub
xchg
xchg
xor
adc
pushf
je
xchg
mov
or
xchg
inc
lock
push
pop
push
pop
push
xchg
sub
sbb
test
rcr
hlt
push
fcmovnu
enter
cmpps
rcl
ror
mov
xchg
retf
inc
scas
pop
cmps
fwait
retf
and
stc
xor
or
pop
popa
xor
push
sbb
in
mov
mov
das
aaa
adc
gs
push
fwait
cwde
imul
les
sbb
repnz
push
repnz
enter
lahf
call
idiv
xor
push
aaa
xor
inc
jl
add
call
push
mov
loope
and
loop
mov
jp
push
fbld
xchg
xchg
adc
fs
dec
mov
add
sti
xchg
add
(bad)
xor
dec
sub
push
ficom
loopne
(bad)
(bad)
cli
imul
stos
or
jns
sar
pop
push
repz
lock
mov
in
or
xchg
jae
out
sub
and
inc
push
xchg
and
xchg
sti
mov
mov
pop
pop
call
inc
xchg
fwait
xchg
rcl
add
not
ins
stos
ss
sar
jno
mov
pop
lahf
jo
enter
fist
push
or
push
push
addr16
das
mov
fwait
inc
rcr
mov
mov
fsub
ror
mov
inc
loop
out
shl
xchg
cmps
xor
or
lds
fidiv
adc
push
xchg
jno
sbb
sub
adc
jmp
hlt
xchg
cld
sahf
retf
sbb
mov
scas
and
xchg
push
jmp
xchg
xchg
mov
xor
lock
fwait
call
stc
or
cmp
dec
adc
fs
sub
mov
je
mov
and
jl
bound
dec
(bad)
jno
fidivr
jge
push
and
xchg
sub
inc
rol
cmp
jge
or
adc
call
(bad)
mov
push
test
xchg
dec
bnd
(bad)
mov
mov
xor
sbb
push
mov
mov
stc
mov
push
xchg
cmps
sahf
mov
test
retf
sub
pop
jg
adc
and
xor
xlat
mov
pop
xchg
mov
(bad)
dec
mov
fsubr
xchg
loop
cmp
stos
push
mov
sbb
es
bound
pusha
popa
mov
xchg
or
xor
hlt
push
sub
loopne
ins
xchg
mov
dec
rol
hlt
imul
dec
xchg
add
push
ins
fiadd
movs
push
rol
out
xchg
in
jp
addr16
lock
out
idiv
aam
lahf
in
push
adc
in
test
js
and
ret
adc
retf
add
int3
pusha
add
jp
loopne
xchg
test
(bad)
mov
js
and
inc
mov
adc
mov
fwait
xchg
pop
fild
mov
std
xchg
es
fst
dec
sar
inc
and
add
sbb
stc
jb
cmp
sbb
int
sub
xchg
fisubr
loop
je
jl
je
jno
daa
jae
xchg
mov
fcmovb
mov
xor
jge
hlt
shl
call
jl
les
stc
and
pop
inc
ins
sub
mov
sub
(bad)
loop
mov
test
jae
retf
aam
push
fbld
mov
jl
push
inc
xchg
xor
jl
icebp
(bad)
mov
fistp
mov
stc
je
shr
arpl
loopne
xchg
inc
or
xchg
inc
dec
ins
shr
pushf
out
or
fdivr
fwait
nop
xchg
adc
jge
ins
push
lods
jl
shl
pop
or
les
sbb
jge
cs
mov
sbb
ret
in
inc
pop
add
xchg
inc
mov
sub
adc
jge
repnz
push
cli
out
mov
in
pop
jg
mov
push
dec
das
and
lds
ss
jge
(bad)
mov
adc
stos
shl
xor
js
in
aad
lea
inc
dec
and
xrelease
lock
mov
dec
nop
mov
xchg
xchg
jge
mov
xor
mov
lods
neg
adc
sub
push
dec
cld
and
jnp
icebp
xchg
jl
push
mov
or
arpl
and
xor
aas
jb
mul
aas
not
xchg
adc
jno
pop
cwde
and
lds
rcl
mov
out
loop
inc
inc
mov
adc
xchg
int3
in
mov
push
nop
jge
les
or
aas
add
jae
xchg
loop
cmps
sbb
test
jb
jmp
xchg
ds
sbb
call
push
ins
pop
imul
pushf
and
adc
stos
xchg
xchg
jmp
adc
test
inc
popf
lock
jmp
in
xchg
jno
push
and
jmp
sbb
xchg
inc
ds
sub
xchg
cmc
pop
lahf
mov
test
sahf
add
push
bound
stc
cmp
sbb
gs
movs
jno
dec
fcom
mov
pop
pop
xchg
pop
inc
ins
enter
(bad)
sub
ds
pop
pusha
adc
fwait
push
fist
shl
mov
mov
int
adc
hlt
shl
loope
jo
int3
rcr
outs
and
adc
sbb
push
adc
loope
or
push
imul
jo
hlt
or
(bad)
cwde
out
fadd
jge
xor
inc
xchg
or
adc
fwait
lds
mov
push
xchg
mov
dec
sbb
fbld
xchg
inc
or
test
push
sti
mov
int3
js
xchg
add
jns
xchg
xchg
dec
int
(bad)
sub
pop
mov
push
imul
adc
iret
in
hlt
or
xchg
mov
(bad)
into
and
jp
cmps
mov
add
fs
push
mov
test
aaa
scas
mov
pop
xchg
xchg
sub
push
call
push
rcr
rcl
xchg
ds
lock
sbb
loopne
(bad)
xchg
lods
fist
pop
rcr
lea
cs
inc
mov
inc
mov
sbb
push
push
xchg
loopne
idiv
push
cmps
ins
sub
mov
cmp
rol
adc
add
xchg
jbe
pusha
inc
stos
jle
aam
lea
(bad)
fs
push
imul
fsubr
xchg
scas
stos
or
hlt
mov
into
xchg
jne
(bad)
js
sub
push
out
adc
enter
pop
test
xor
je
dec
sub
cmp
or
les
mov
jl
out
cmc
ss
pusha
adc
mov
or
sbb
xchg
push
movs
sub
inc
out
sbb
mov
mov
jnp
jmp
push
xchg
out
test
xchg
cmps
cmp
aaa
xchg
jo
mov
sub
mov
dec
push
lods
dec
adc
aam
shr
inc
adc
sar
xchg
call
(bad)
fst
push
cld
test
jle
adc
mov
mov
mov
ins
in
and
retf
pop
fistp
xchg
sbb
movs
pusha
scas
xchg
cmps
lods
stos
loop
push
jnp
mov
daa
shl
xchg
fld
sbb
lods
mov
cmp
adc
jecxz
and
imul
sbb
xchg
loopne
stos
dec
push
ds
in
loop
xchg
test
pusha
mov
jno
cld
or
xchg
inc
jle
and
push
pop
mov
daa
scas
lods
rcl
xchg
pop
jmp
adc
xchg
addr16
adc
jne
je
mov
pop
ja
int3
mov
mov
idiv
sbb
pop
and
or
cmc
push
enter
ins
dec
call
ret
mov
out
stos
lock
xchg
mov
mul
hlt
dec
push
xchg
pop
xchg
push
push
and
sub
aam
or
inc
pop
into
std
mov
inc
rcl
jmp
add
or
pusha
(bad)
xchg
adc
lds
ror
jle
jns
fs
mov
int3
dec
out
xchg
cmp
ror
jp
dec
jg
lahf
add
pmaxsw
xchg
mov
xchg
lods
out
lods
pop
mov
mov
(bad)
mov
arpl
xor
sbb
and
dec
adc
xchg
stc
dec
xchg
out
cmp
movs
inc
xor
lock
int
test
jmp
retf
mov
adc
shl
mov
jbe
sete
repz
jne
xchg
mov
push
aaa
xor
xchg
ret
out
fstp
push
fwait
into
fbstp
cld
int
popa
mov
jmp
push
cmp
sbb
jbe
jae
sti
xchg
pop
lods
neg
lahf
xor
fwait
test
push
xchg
lods
test
sbb
inc
mov
stos
dec
push
icebp
xchg
cdq
add
dec
lea
xchg
xor
pop
inc
cmps
mov
xchg
rcr
adc
sbb
inc
les
jne
jb
dec
xor
dec
inc
pop
dec
and
cmps
and
(bad)
clc
cli
mov
je
push
ja
pop
fwait
aas
test
or
push
mov
sub
test
int3
aas
js
xchg
daa
adc
cmps
lahf
sub
cs
xchg
mov
xchg
fwait
xor
or
or
jl
test
aam
dec
stos
clc
fcom
lea
pop
sbb
mov
lods
int3
fistp
into
inc
in
nop
cmp
mov
lods
shr
inc
mov
fxtract
adc
fs
adc
fdiv
dec
mov
ins
(bad)
cmp
xor
xchg
shr
sti
fwait
cwde
or
sbb
outs
push
push
test
inc
pop
bound
xchg
inc
cmp
cld
xchg
ins
popf
hlt
out
or
push
adc
push
jb
add
xchg
je
cli
mov
push
sub
sar
cdq
ja
pushf
and
inc
xlat
cdq
mov
hlt
xchg
gs
jo
pop
pop
sub
add
cld
mov
hlt
push
aad
push
sahf
inc
fisttp
stos
adc
mov
cld
das
and
loop
jecxz
not
inc
mov
inc
sbb
jecxz
or
adc
inc
lahf
lods
inc
fcom
cmp
jmp
dec
and
stos
dec
js
mov
cmp
rcl
scas
jp
mov
xchg
add
mov
or
ds
push
aas
xchg
inc
dec
lahf
add
je
inc
jnp
cmp
arpl
aam
xchg
xchg
cmp
dec
jmp
fsub
loope
xchg
imul
mov
jno
ins
sbb
xchg
push
repz
push
and
(bad)
dec
xchg
lock
mov
test
nop
enter
scas
push
lods
xor
mov
fs
div
adc
xchg
push
jge
mov
xchg
out
stos
jmp
cmp
pop
and
xchg
mov
not
sti
sbb
jge
push
sbb
dec
mov
mov
xchg
mov
es
test
cld
rcr
mov
nop
adc
mov
mov
sar
mov
jge
mov
ficomp
repz
xor
jb
cmc
fcomp
std
addr16
push
int3
pop
mov
popf
hlt
jge
fbstp
inc
jl
std
scas
dec
in
mov
mov
out
mov
dec
adc
mov
call
or
sub
movs
mov
jo
fld1
xor
and
xor
push
mov
push
and
push
push
jge
dec
aam
adc
add
imul
pushf
sbb
leave
test
hlt
into
xor
mov
(bad)
dec
in
in
enter
lea
dec
int3
pusha
xor
cwde
dec
cmps
dec
fwait
xlat
inc
sbb
push
movs
sub
add
sar
cmp
leave
mov
dec
xor
ret
pushf
ret
mov
dec
xchg
aas
lods
jl
scas
lock
xchg
mov
inc
stc
ins
xor
ins
push
popf
mov
add
xchg
jnp
sbb
jge
imul
call
cmps
mov
cdq
mov
push
pop
cli
jne
xchg
loopne
js
ins
pop
data16
std
mov
or
adc
jl
xchg
pop
sub
mov
or
test
xchg
push
jp
mov
xchg
and
icebp
stos
addr16
(bad)
iret
xchg
out
push
adc
inc
dec
xlat
lahf
shr
into
aam
les
pop
xchg
mov
rcl
nop
jp
adc
and
(bad)
fwait
std
add
sbb
cmp
test
pop
dec
out
pop
les
pop
fsubr
xchg
sbb
xchg
(bad)
xchg
mov
sti
push
cmp
adc
push
or
jb
je
outs
aam
loopne
jnp
ret
mov
mov
xchg
pop
adc
aam
xchg
pop
and
jno
push
or
mov
jl
pop
xchg
xor
jnp
dec
in
adc
jmp
imul
cmps
adc
jl
shl
shr
arpl
xor
jl
inc
repz
mov
mov
outs
mov
cmc
call
mov
sbb
je
js
xchg
imul
cld
xchg
xchg
inc
fwait
add
mov
xchg
arpl
add
xchg
xchg
addr16
adc
sbb
xchg
cdq
mov
dec
mov
mov
push
sbb
mul
sub
xchg
sti
aas
sar
gs
cdq
mov
fdivr
mov
lea
xchg
lods
shl
fnstsw
mov
mov
and
and
mov
cmp
push
dec
mov
dec
out
cwde
ss
dec
out
xchg
sub
jne
mov
mov
test
mov
xchg
shl
xchg
dec
cdq
into
hlt
outs
and
je
shl
adc
repnz
xchg
in
leave
pushf
scas
or
js
pop
bound
jmp
mov
inc
loopne
add
es
sub
xchg
scas
(bad)
inc
(bad)
jl
sbb
retf
ins
inc
xchg
dec
mov
mov
jne
sbb
dec
les
mov
test
pop
(bad)
push
jno
test
sti
push
xor
sbb
(bad)
cli
(bad)
pop
sahf
xchg
mov
outs
mov
dec
aam
xchg
pop
inc
out
jl
pcmpgtd
ds
and
xor
and
dec
jle
jge
sti
xor
cmp
cdq
and
aam
clc
pushf
fdivr
lods
hlt
aaa
je
adc
pop
pop
mov
out
inc
sub
fcmovu
aad
arpl
pop
mov
data16
push
push
push
adc
pushf
fs
and
mov
and
mov
inc
xchg
sbb
sbb
imul
push
stos
add
call
outs
dec
rcl
aam
cld
(bad)
push
fs
das
mov
cld
loope
ficomp
jl
idiv
mov
pop
and
xor
mov
and
stos
jp
lea
pop
dec
std
xchg
aam
cmp
mov
or
aad
jae
in
lock
lea
jge
fdiv
fsubr
(bad)
int3
jmp
sbb
inc
out
and
pusha
pop
xlat
sbb
nop
sub
sub
test
inc
pop
fidivr
iret
aam
out
xchg
shl
dec
push
jecxz
out
add
sahf
jbe
adc
(bad)
ins
jo
cwde
dec
neg
push
adc
fcom
jl
mov
xchg
sbb
out
sbb
xchg
xchg
lock
jmp
ins
call
retf
xchg
jo
mov
push
cmps
mov
xchg
pop
pop
add
test
fcom
je
daa
ret
shl
mov
lahf
loopne
cmp
in
cmp
inc
xchg
call
add
jns
adc
sahf
repz
lahf
int3
xchg
push
xchg
fstp
mov
ror
arpl
fwait
inc
clc
mov
sub
xchg
imul
pop
mov
or
inc
sub
test
push
inc
sbb
xchg
jp
and
jle
ins
and
test
js
nop
pop
cwde
aas
cmp
lds
or
(bad)
cmps
retf
mov
add
and
test
push
pop
xchg
pop
call
mov
push
int3
inc
jmp
mov
mov
ret
or
cmps
jnp
int
(bad)
test
mov
xchg
test
loopne
xchg
add
xchg
push
or
mov
jb
shl
inc
dec
inc
loopne
dec
repz
enter
daa
xchg
jmp
movs
push
cmp
sti
push
out
sar
xor
imul
adc
das
cmc
neg
jns
nop
(bad)
mov
inc
push
mov
arpl
dec
call
popf
sti
out
or
sub
mov
ficom
into
stos
nop
pop
call
pop
lahf
sahf
pop
or
jl
xchg
aad
push
dec
das
repz
add
sti
inc
xchg
pop
inc
xchg
jns
sub
xchg
mov
mov
cmp
aas
inc
xor
into
sahf
repnz
mov
xchg
loope
adc
leave
sub
sub
pusha
es
xchg
dec
outs
in
test
rol
or
sbb
sub
and
mov
sub
and
mov
into
mov
mov
cli
mov
out
inc
jp
jg
mov
push
push
call
pop
sbb
repnz
mov
lahf
lock
mov
pushf
xor
out
stos
dec
je
cmp
push
and
xlat
loop
out
jne
add
test
out
add
sbb
xchg
cld
mov
mov
sar
jne
sub
jb
mov
jl
mov
adc
cli
sub
hlt
ss
and
xlat
leave
sub
ins
dec
(bad)
(bad)
retf
push
aaa
mov
cmp
cld
mov
cwde
dec
jo
inc
fs
and
push
xchg
and
or
mov
or
push
jno
push
xchg
stos
int3
mov
bound
hlt
idiv
xchg
lods
ss
jmp
test
ins
xor
retf
and
adc
sar
inc
aam
xchg
mov
bound
xchg
add
jmp
int
rcl
or
xchg
cmp
cdq
cwde
clc
adc
and
mov
shr
cdq
xchg
dec
and
inc
inc
shl
and
cmc
hlt
inc
pop
out
xchg
repnz
rcr
xchg
jecxz
enter
lea
popa
sub
mov
pop
pop
push
xor
adc
mov
out
call
fs
dec
unpcklps
xchg
stos
mov
pushf
push
lock
cmp
and
push
add
loope
inc
xchg
fdiv
and
fsub
mov
xchg
sub
xor
stos
xchg
xor
cmp
jbe
mov
lea
or
and
aam
add
jle
jp
call
pop
retf
ins
jecxz
xchg
inc
dec
out
test
mov
xor
aas
xchg
dec
ds
out
addr16
sbb
push
xchg
sbb
mov
sar
xchg
sbb
std
mov
xchg
mov
push
clc
scas
adc
ficom
mov
cmc
pop
jle
cwde
lods
dec
lahf
mov
nop
xchg
xchg
sti
jecxz
dec
inc
lods
or
mov
scas
loop
mov
cmp
not
mov
rcr
stos
and
mov
jl
aam
xor
push
push
int3
inc
push
adc
pop
lahf
cmp
sbb
(bad)
adc
dec
sbb
test
fwait
and
(bad)
loopne
movs
addr16
idiv
jbe
xchg
sbb
mov
aad
sar
test
shl
imul
mov
mov
xchg
ins
sti
movs
jle
cmps
cmp
mov
xchg
js
rcl
stos
out
xchg
mov
jnp
sub
sbb
xor
into
mov
push
mov
xchg
sub
in
retf
repz
pop
test
test
call
xchg
enter
add
mov
stos
mov
push
ja
popa
xchg
xchg
or
and
(bad)
mov
retf
xor
stos
dec
cmp
daa
repnz
sbb
loope
jmp
and
out
gs
dec
cmp
push
jge
jno
data16
mov
es
sbb
jg
mov
jbe
xor
add
jae
add
loopne
xchg
(bad)
fwait
jnp
mov
jmp
dec
sbb
adc
fiadd
jmp
int3
xor
mov
jle
xor
inc
sub
jl
rep
and
push
push
hlt
call
adc
retf
xchg
cmc
out
enter
jl
jno
hlt
sub
xchg
retf
cld
jmp
sbb
sbb
dec
and
xchg
mov
cli
mov
icebp
jns
xchg
fs
repz
pop
add
xchg
movs
cmp
inc
sbb
fsub
mov
out
lock
xchg
les
fwait
jne
addr16
adc
aam
ficom
sbb
sub
arpl
out
movs
xchg
xor
hlt
cmps
mov
ja
pop
inc
adc
scas
inc
xchg
lahf
cmp
loop
dec
xchg
push
dec
mov
out
jnp
pop
adc
inc
movs
in
ins
adc
(bad)
adc
fstp
pop
pop
popf
push
cmps
call
int3
push
add
xchg
movs
(bad)
pop
ror
or
sar
xchg
das
xchg
adc
xchg
(bad)
aam
push
or
mov
xchg
sahf
sbb
fwait
xor
mov
jge
jg
cmp
adc
call
mov
mov
push
out
push
cmps
fstp
cmp
rcl
popf
jne
imul
daa
and
jp
je
cld
dec
pop
mov
push
mov
int3
cdq
adc
xchg
test
push
pop
repnz
call
xor
inc
and
add
stos
xor
pop
push
xchg
lods
loop
pop
cld
mov
add
pop
shl
les
xchg
mov
pop
mov
stos
or
les
sub
fwait
lock
pop
xchg
ret
xor
ror
push
adc
xchg
add
mov
adc
push
(bad)
sub
int
or
leave
inc
push
aam
into
inc
lods
movs
xchg
(bad)
adc
(bad)
jnp
ins
rol
fwait
or
jbe
outs
(bad)
xchg
aaa
mov
cmp
add
mov
push
cmps
pop
xchg
test
add
and
hlt
xchg
xor
push
leave
retf
loop
enter
arpl
xchg
push
dec
add
add
lds
icebp
in
mov
xchg
jae
test
jbe
loop
push
mov
icebp
shl
repz
xchg
or
push
outs
(bad)
cdq
xchg
mov
fbld
test
cmps
adc
out
xchg
mov
popa
stos
stc
pop
fs
arpl
(bad)
inc
js
xchg
pop
(bad)
push
clc
jno
stc
xchg
sti
pop
inc
xchg
mov
push
sbb
xchg
popa
mov
mov
inc
test
sub
lods
shr
inc
mov
push
xor
mov
xchg
in
pop
or
jbe
(bad)
ins
int3
cld
stos
xchg
nop
jge
test
mov
stos
cmps
(bad)
mov
pop
mov
jns
sub
cdq
mov
xchg
dec
adc
pop
push
or
sbb
push
and
mov
xor
test
test
fsubr
aad
cli
jno
sbb
clc
in
mov
mov
test
test
scas
xor
xchg
(bad)
push
dec
cmp
xchg
ins
nop
aad
aaa
push
in
popa
xchg
not
sub
dec
sti
pop
mov
xchg
mov
bound
add
je
mov
adc
movs
(bad)
xchg
pop
fs
dec
sub
adc
push
mov
pop
dec
xchg
(bad)
fs
call
mov
hlt
jg
fadd
xchg
xor
fcom
and
sbb
scas
aam
int3
dec
and
xchg
ja
jle
arpl
mov
(bad)
mov
add
dec
xor
sub
mov
js
fwait
cmp
pop
movs
(bad)
scas
xchg
xor
popa
dec
xor
rcr
ss
xchg
sahf
cdq
lds
test
xchg
push
or
xchg
rcl
movs
fldcw
pop
mov
hlt
pop
hlt
mov
mov
xchg
xchg
out
sbb
fistp
addr16
push
mov
lahf
jno
push
out
fisttp
xchg
pop
aam
shr
mov
sub
in
lock
pop
mov
sub
mov
ret
mov
inc
xchg
fbstp
aam
(bad)
(bad)
jbe
pop
les
xchg
cli
stos
inc
sub
xchg
div
nop
xor
cmps
xchg
imul
jno
mov
inc
xchg
xchg
or
jnp
xchg
add
mov
loopne
(bad)
xchg
sahf
mov
xchg
xor
mov
test
fnsave
mov
xchg
dec
cmp
outs
scas
inc
jae
xchg
add
mov
xchg
cmps
(bad)
aad
or
test
test
jno
xchg
lds
pop
cs
(bad)
stc
cmp
sub
sahf
(bad)
xchg
or
mov
loopne
xor
ds
sahf
adc
xchg
int3
inc
clc
mov
cli
ror
xchg
mov
and
xchg
dec
jmp
cmp
fdivp
imul
fsubr
scas
test
ss
daa
(bad)
repz
xchg
aaa
add
dec
scas
fst
jmp
push
cmps
jecxz
loop
ror
adc
mov
pushf
mov
jmp
sub
loopne
lods
xchg
mov
jae
je
or
(bad)
pop
les
dec
xchg
loop
add
std
mov
jl
xor
sub
fidivr
and
ds
scas
mov
leave
inc
add
sbb
pop
pop
in
inc
xchg
cld
fist
mov
xchg
cmps
pop
sar
or
enter
imul
ficom
mov
push
mov
lock
sbb
test
xor
call
ffree
mov
gs
inc
xchg
cmp
xor
mov
call
arpl
and
mov
mov
sub
je
fisub
iret
xchg
sub
cmp
add
hlt
mov
mov
and
stos
out
fwait
nop
jl
std
dec
xor
outs
add
imul
sub
lahf
cmp
sbb
fcomip
or
call
mov
lock
adc
je
in
or
xchg
mov
xchg
and
mov
inc
fadd
cdq
xchg
mov
out
pusha
loop
mov
leave
and
sbb
xchg
mov
clc
call
repz
xchg
js
(bad)
aam
repnz
jns
daa
xchg
jo
lods
mov
ror
hlt
xchg
stos
dec
stos
aas
das
xchg
push
jbe
inc
hlt
rcr
xchg
mov
loope
jecxz
in
fstp
jno
cmp
loopne
in
out
pop
(bad)
xchg
mov
mov
and
jge
repz
mov
push
push
shl
adc
or
sbb
stos
cmp
arpl
jl
push
xchg
mov
push
fwait
cli
movs
pop
test
or
cld
lds
jge
dec
mov
mov
xor
push
xchg
and
nop
mov
mov
mov
mov
mov
sbb
push
fst
out
arpl
repz
add
popa
aam
mov
add
retf
adc
add
adc
test
aam
imul
dec
jno
cmps
jge
fbld
mov
inc
xlat
sahf
movs
dec
mov
bound
push
xlat
aad
bnd
mov
dec
adc
imul
test
out
sbb
push
xchg
xor
int3
mov
mov
or
push
leave
movs
int3
push
lods
xchg
in
jge
aam
push
cld
call
iret
mov
xchg
xor
test
push
jl
jmp
mov
xor
adc
fdiv
pop
jge
add
stos
int
xchg
push
scas
push
popf
scas
adc
lods
mov
mov
mov
pop
rcr
out
push
(bad)
iret
mov
fdivr
jp
retf
pop
cmps
jo
mov
rcl
pop
inc
jg
cmp
nop
cmp
inc
push
cld
xchg
sub
lods
jmp
xchg
mov
mov
aas
call
jnp
jns
fistp
sub
pop
enter
push
aam
retf
int3
lock
xor
sub
ret
leave
fistp
cmp
stos
jle
fst
push
xor
ror
stos
ret
or
jl
push
mov
imul
xor
lea
add
sbb
call
pop
dec
rcr
dec
fwait
mov
fist
fisub
sar
stc
jl
cli
xor
push
not
fbld
pop
adc
mov
jmp
xor
test
rcr
xor
sub
aaa
lds
jge
loop
inc
sbb
add
call
in
mov
movs
jmp
ds
jg
test
pop
push
cld
clc
mov
stc
jmp
mov
mov
and
jg
jno
jno
push
jmp
test
jb
sbb
lods
out
cwde
push
in
cmp
push
popf
mov
cmp
stos
aam
(bad)
aad
sar
call
fimul
adc
inc
loopne
sub
lds
jb
xchg
xlat
fwait
cs
xchg
jae
(bad)
pop
push
dec
adc
xchg
repnz
xchg
pop
pop
aaa
dec
dec
add
xchg
sbb
sbb
cmp
jge
lea
jno
jo
mov
enter
pop
push
xchg
jmp
and
xchg
std
inc
nop
test
sbb
fwait
ret
es
push
inc
mov
hlt
sysret
dec
out
cmps
daa
test
(bad)
xchg
add
inc
xlat
aaa
and
mov
xchg
scas
and
cmps
sbb
jp
fwait
add
jmp
int
(bad)
dec
into
inc
repnz
mov
push
pusha
mov
add
pushf
cmp
(bad)
cmp
call
xchg
add
dec
xchg
jl
adc
inc
inc
(bad)
sub
xchg
ins
dec
mov
pop
mov
mov
push
in
jne
stos
dec
inc
xchg
xchg
inc
pop
lock
adc
jae
push
xchg
cmp
ss
cmp
xchg
addr16
ja
cmp
mov
push
or
sub
inc
inc
mov
cmp
pop
dec
sub
add
shl
mov
dec
jg
push
enter
(bad)
jmp
xlat
(bad)
push
ja
out
jge
xor
dec
pop
outs
in
out
inc
mov
xor
repnz
inc
not
push
xchg
xchg
(bad)
sar
mov
ror
clc
inc
xchg
push
sahf
inc
jnp
adc
fisttp
(bad)
sub
pop
mov
lahf
xor
pop
sub
dec
mov
cmp
call
ins
mov
test
inc
xor
lds
pop
and
inc
mov
cmps
pop
hlt
cwde
sbb
pop
out
jge
lahf
mov
lods
cmp
sahf
xchg
xor
lahf
jl
sub
pop
imul
jl
in
xor
and
sbb
(bad)
inc
fstp
dec
test
xchg
push
or
(bad)
xor
mov
dec
jne
xchg
xor
lods
pusha
add
adc
mov
jle
adc
je
fiadd
pop
jbe
mov
xchg
sub
mov
push
bound
sub
call
pop
adc
lock
and
mov
or
push
xchg
add
inc
sub
jp
jge
and
add
sub
or
sahf
and
mov
out
data16
(bad)
and
or
mov
lock
add
leave
xor
pushf
iret
test
adc
imul
(bad)
fwait
sub
mov
aas
dec
or
add
xchg
shl
sbb
xchg
(bad)
xor
cmp
nop
mov
stos
mov
push
pop
cwde
(bad)
fcom
(bad)
int3
xlat
mov
adc
or
jmp
xchg
push
(bad)
jne
ds
xchg
mov
push
int
std
(bad)
sub
pop
mov
ret
push
cmp
xchg
ficom
aad
adc
bnd
mov
sub
call
shl
mov
and
xchg
nop
stos
outs
xor
add
icebp
mov
xchg
daa
rcr
xchg
xchg
cld
sbb
push
fwait
idiv
pop
inc
mov
and
inc
jg
xchg
syscall
hlt
outs
xor
jno
xchg
int
sbb
push
dec
inc
stc
loop
nop
adc
push
in
jbe
repnz
adc
pushf
cdq
inc
xchg
mov
dec
push
lock
xchg
daa
pusha
neg
pop
mov
mov
aad
mov
inc
adc
gs
pop
cmc
xchg
cmps
or
mov
inc
xchg
rol
mov
xchg
mov
jecxz
dec
mov
ss
xchg
and
sub
mov
sub
push
nop
xchg
sahf
push
cmps
jl
std
fsubrp
(bad)
push
ret
popa
cmc
inc
xchg
add
dec
inc
out
adc
rcr
movs
push
dec
lds
xchg
push
hlt
xchg
cmp
add
in
sub
cdq
push
xchg
mov
fild
es
xchg
ins
dec
and
mov
loop
adc
pop
xchg
push
inc
sar
xor
retf
stos
test
leave
pop
xchg
push
cmp
mov
adc
loop
imul
cwde
dec
xchg
jge
mov
dec
xchg
sbb
popa
and
inc
push
xchg
aaa
xchg
outs
in
fimul
sub
xchg
mov
sub
sbb
movs
push
pop
jg
test
and
stos
(bad)
stos
dec
push
push
xchg
mov
pop
call
aam
mov
adc
jae
adc
pushf
sub
push
sub
aam
jg
mov
call
xchg
mov
bnd
gs
mov
jno
xchg
cmp
fxch
pop
xchg
pop
cld
jmp
sub
fwait
add
les
loope
pop
sbb
mov
mov
adc
stos
(bad)
iret
mov
lock
or
xchg
loope
mov
push
adc
imul
(bad)
mov
lock
adc
mov
fisubr
neg
ja
outs
jae
xchg
pop
lods
arpl
and
movs
jo
les
mov
xchg
stc
popa
dec
scas
push
jp
add
xchg
push
jo
rcl
adc
loopne
mov
repnz
ja
shl
xchg
aam
loope
jne
xchg
xchg
jmp
xor
ficomp
fwait
pop
or
or
je
pop
mov
and
inc
movs
push
jo
mov
add
adc
mov
cdq
stc
inc
les
stos
imul
add
dec
xchg
outs
jecxz
mov
neg
and
pop
jnp
push
xor
cs
mov
xchg
sub
jp
fadd
cmp
rcl
pop
adc
inc
mov
loopne
mov
loop
sbb
add
push
adc
add
add
jbe
inc
xor
ret
les
jo
jns
xchg
int3
loop
aam
dec
cmc
mov
outs
mov
stos
or
jne
ror
cmp
(bad)
aaa
jno
inc
cmp
push
adc
cmp
es
adc
inc
mov
aad
sbb
push
cdq
xor
xlat
std
xchg
and
mov
cld
call
stos
loopne
xor
push
or
mov
dec
movs
repnz
xchg
jl
mov
and
xchg
jb
xor
xchg
xchg
cs
js
call
dec
mov
fbstp
or
jbe
test
dec
fwait
jo
dec
movs
push
mov
or
push
mov
ss
sbb
push
sbb
cmps
mov
rcr
mov
je
pop
push
jnp
sbb
xor
push
xchg
pop
xlat
push
dec
cmc
movs
adc
jo
or
sbb
push
pop
je
out
hlt
aam
adc
push
and
sbb
rol
xor
aaa
jo
fwait
add
out
movs
mov
outs
popaw
xchg
pop
out
xchg
xchg
(bad)
sub
call
ror
cmc
xchg
sbb
mov
test
add
into
mov
xchg
retf
popa
add
cwde
or
call
into
(bad)
test
add
jmp
and
sbb
mov
adc
clc
jnp
in
(bad)
scas
fwait
sub
addr16
in
jmp
out
pushf
pop
dec
xchg
pop
xlat
mov
leave
js
xchg
jmp
test
or
dec
xchg
sti
mov
retf
xchg
adc
mov
lea
and
jne
out
clc
mov
sbb
(bad)
adc
scas
(bad)
mov
pop
jmp
add
sub
xchg
pop
mul
cmps
and
retf
sbb
(bad)
dec
xchg
in
fwait
nop
fstp
arpl
movs
mov
xchg
sub
aas
or
sahf
push
pop
mov
mov
mov
in
push
mov
xchg
adc
fld
(bad)
out
mov
fidiv
mov
xchg
xor
in
pop
(bad)
xchg
mov
mov
pop
shr
xchg
adc
movs
jmp
enter
hlt
js
sbb
and
mov
xchg
xchg
cmps
dec
into
jbe
adc
xchg
test
push
xchg
hlt
iret
xchg
jne
in
mov
sub
cmp
adc
add
jle
in
push
xor
and
ror
hlt
mov
out
cwde
ins
xchg
neg
add
add
and
mov
sub
(bad)
retf
pusha
(bad)
rcl
or
dec
xchg
movs
pop
in
adc
aad
test
jmp
nop
repz
out
or
xchg
mov
push
cmp
scas
jmp
outs
(bad)
das
mov
mov
neg
mov
dec
mov
cmps
mov
call
fwait
or
test
jl
fcmovne
not
fld
sbb
or
mov
adc
aad
je
xchg
mov
or
xchg
add
pop
sbb
retf
xchg
clc
(bad)
mov
(bad)
mov
ret
mov
lahf
(bad)
push
stos
xor
mov
xchg
sbb
or
lds
pop
test
aam
cmc
frstor
call
or
outs
add
hlt
xchg
sbb
dec
out
jge
cwde
mov
adc
xor
mov
ror
int3
pop
xor
div
xchg
xchg
sahf
out
call
cmp
movs
mov
add
push
add
test
or
pop
(bad)
mov
rcr
pop
fpatan
adc
out
and
loopne
push
fwait
popf
movs
enter
adc
xchg
xchg
repz
mov
out
rcr
dec
aam
lea
hlt
mov
enter
imul
pop
arpl
add
shr
imul
or
inc
dec
mov
div
test
mov
mov
out
(bad)
aaa
aaa
bound
pmullw
xchg
call
xlat
xchg
test
add
icebp
push
jb
mov
push
jmp
mov
dec
mov
add
jne
mov
xchg
das
jbe
dec
js
or
jl
test
lods
popa
push
fnstenv
cmps
int3
pop
loope
mov
or
in
mov
icebp
sub
sub
retf
jl
cwde
(bad)
into
ret
retf
inc
jae
out
in
cmp
add
jb
daa
inc
arpl
cs
dec
mov
test
popa
mov
cmp
test
clc
iret
cmp
push
or
push
leave
pop
mov
jp
imul
sub
adc
push
inc
test
sbb
retf
popf
add
inc
mov
pop
neg
sbb
(bad)
mov
jl
popf
fs
sub
adc
clc
pop
pop
inc
cmp
add
sub
add
dec
setg
pushf
mov
jmp
jmp
call
mov
and
push
pushf
loope
mov
push
cwde
push
mov
sbb
sar
push
adc
inc
sub
lahf
es
inc
xchg
cmp
lods
jbe
cmps
movs
mov
dec
hlt
(bad)
fst
push
or
mov
scas
adc
(bad)
aad
stos
bound
or
cmp
xor
add
hlt
adc
add
js
pushf
cli
mov
jp
pop
mov
in
xor
mov
and
inc
aam
xor
push
inc
mov
xor
test
mov
push
(bad)
xchg
sub
mov
xchg
gs
cmp
jecxz
lods
hlt
mov
stos
out
jae
inc
pop
cmps
out
fild
pop
imul
(bad)
pop
movs
pop
loopne
push
ret
dec
stos
dec
ror
mov
dec
jns
cwde
ror
ret
lahf
mov
pushf
pushf
mov
call
pushf
cmp
push
call
call
dec
outs
adc
mov
out
cvtdq2ps
sbb
xor
retf
dec
xchg
xchg
dec
xchg
call
and
jge
lahf
jg
pop
jno
pop
and
ds
inc
retf
xor
in
fs
adc
or
xchg
iret
xchg
xlat
push
or
jmp
leave
addr16
out
jp
cmp
push
sub
or
mov
out
mov
mov
add
push
jbe
(bad)
out
cmc
jns
lea
adc
ins
and
ins
adc
jo
(bad)
sbb
adc
dec
xchg
inc
xchg
push
cmps
adc
mov
in
lea
jne
call
or
mov
mov
pop
popa
or
hlt
popf
popa
dec
sbb
test
fstp
add
jl
xchg
popf
lods
push
mov
jbe
sbb
xlat
pop
or
xchg
sub
xchg
repnz
or
sbb
loope
xor
mov
dec
cmc
imul
inc
mov
cmps
mov
xchg
pop
mov
or
inc
ret
shr
(bad)
pusha
(bad)
sahf
sbb
fld
xor
mov
pop
rcr
cwde
pusha
push
mov
jecxz
sub
sbb
add
pusha
and
btr
rcl
add
lea
rcl
mov
bt
jmp
ds
mov
cli
mov
fdivr
or
mov
sub
jbe
call
addr16
pusha
sahf
xchg
scas
fs
pop
sub
jl
push
call
push
inc
push
std
icebp
mov
retf
or
daa
mov
ror
outs
sbb
sbb
xchg
jmp
inc
retf
(bad)
scas
ret
push
int
sbb
push
std
inc
retf
cmp
mov
scas
scas
shr
sti
iret
adc
dec
popa
and
std
(bad)
int3
cli
push
dec
and
mov
xor
pop
retf
xchg
sbb
push
fist
jp
push
adc
dec
sub
in
or
cmp
ror
repz
add
dec
jo
outs
push
jb
arpl
jae
outs
imul
stc
cmp
jmp
pop
(bad)
mov
mov
push
mov
test
mov
jne
fnsave
mov
sbb
mov
xchg
jge
test
sbb
nop
xchg
std
mov
add
aaa
stos
inc
aas
aaa
cwde
outs
mov
in
xchg
fist
dec
popa
aaa
and
push
mov
sbb
repnz
jecxz
ins
add
fs
psllw
mov
xchg
in
and
lahf
nop
(bad)
add
add
push
add
daa
mov
inc
cwde
repnz
not
addr16
fnstcw
fld
mov
out
dec
or
pop
pop
mov
fcom
movs
cmp
fcom
pushf
or
add
in
dec
repnz
gs
iret
retf
nop
rol
clc
push
pop
mov
inc
js
cmp
pushf
cmps
outs
pop
mov
fs
xchg
pop
test
mov
mov
cli
clc
jmp
arpl
lds
sub
push
out
aam
lods
inc
call
mov
inc
sbb
stos
in
or
xor
jno
xchg
jg
pushf
cli
jge
jbe
repz
jmp
mov
xchg
cmp
push
dec
pop
pushaw
cs
ss
pop
(bad)
out
nop
push
xchg
cld
imul
ror
mov
stc
cmp
push
pushf
stos
movs
call
push
push
ins
nop
sub
out
or
xchg
ds
(bad)
or
in
jmp
enter
mov
movs
cld
add
or
jmp
inc
(bad)
ss
xor
push
sbb
ins
mov
mov
mov
test
(bad)
dec
ja
dec
repz
xchg
out
xchg
inc
and
push
sub
out
pop
fdivp
push
call
adc
popa
xchg
test
sti
inc
(bad)
jmp
(bad)
jecxz
jae
call
mov
jle
inc
jno
xchg
xchg
ins
gs
jge
icebp
addr16
aaa
dec
inc
mov
addr16
cmp
or
sub
jge
out
push
push
lea
push
jae
mov
xor
mov
lds
mov
mov
mov
cmovo
(bad)
pop
stos
add
mov
iret
inc
mov
iret
mov
mov
sbb
lock
stos
mov
mov
pop
setbe
loop
fstp
repz
mov
into
push
rol
adc
xor
popa
dec
jae
idiv
sbb
ret
(bad)
retf
imul
push
sub
addr16
dec
push
or
ins
pop
neg
sub
bound
mov
xchg
push
dec
jo
popf
xchg
popa
dec
adc
cmc
scas
cwde
push
loop
je
inc
outs
sub
push
dec
loopne
pop
jb
mov
retf
xchg
test
mov
adc
mov
test
add
jbe
pop
ficom
andnps
lods
add
mov
out
lods
mov
(bad)
cmps
iret
xor
pop
jmp
mov
idiv
cmps
push
xchg
xchg
cmp
and
shr
sahf
nop
mov
mov
cmp
pop
mov
popf
xor
(bad)
dec
jge
cmp
or
hlt
inc
in
fs
jno
popf
les
xchg
retf
dec
adc
cmps
imul
addr16
movs
mov
add
push
cwde
sbb
xor
xor
stc
(bad)
pop
sub
cmovle
sub
(bad)
into
cmp
popf
add
xchg
ret
xchg
jmp
les
leave
jnp
icebp
cli
aam
xchg
jmp
inc
adc
stos
out
rcl
in
aad
bound
pop
mov
inc
je
cld
mov
test
lsl
stos
pop
retf
sar
cmp
cmp
sbb
jbe
aas
xchg
cmp
or
retf
fnstsw
sub
jne
ja
or
xchg
mov
and
mov
ds
xchg
xchg
or
lahf
cdq
cmps
xor
inc
xchg
sub
mov
sub
in
lods
cli
and
add
fs
shr
cdq
bound
mov
iret
nop
jmp
pop
(bad)
idiv
mov
fidiv
cmp
ins
add
mov
pop
jp
mov
sahf
and
xlat
fiadd
pop
cmp
out
test
jl
and
xchg
sub
mov
jmp
mov
inc
or
add
mov
(bad)
jne
aad
sbb
fild
ffreep
xchg
ror
cmp
mov
dec
xor
mov
push
lea
jae
jmp
cmc
jmp
and
int3
jne
mov
fisttp
push
cmps
dec
add
ds
pop
into
inc
push
or
inc
std
xor
sbb
enter
mov
das
or
mov
dec
jbe
mov
outs
jns
fdiv
cdq
push
call
pop
sbb
loop
jle
lea
btr
aam
push
pop
out
cs
add
xchg
sub
push
call
sub
aad
xor
adc
adc
es
iret
(bad)
(bad)
xor
dec
sbb
fwait
push
mov
xchg
lock
shr
pop
leave
mov
loop
mov
shl
cmp
aaa
mov
dec
mov
in
dec
inc
imul
pop
sub
out
jmp
sbb
fwait
mov
pmulhw
push
shl
jbe
add
add
jge
xor
push
in
cdq
ror
lods
mov
inc
mov
ret
iret
and
sub
loopne
pop
dec
pop
push
(bad)
sti
mov
repz
and
popa
pushf
cwde
call
iret
pop
retf
(bad)
shl
in
cwde
out
ret
mov
inc
and
aam
push
outs
aam
enter
bound
pop
adc
push
mov
jns
(bad)
add
inc
adc
in
jne
mov
dec
jb
xchg
xchg
aam
in
stos
aad
je
pop
jl
inc
xor
in
sti
jnp
cmc
in
jmp
shl
les
neg
ds
data16
in
sub
mov
inc
cld
call
inc
sahf
or
fidiv
push
out
aas
push
sbb
inc
push
fsub
and
pop
jne
stos
inc
cmp
and
jno
test
into
out
in
cld
dec
xor
mov
aam
mov
push
cmp
mov
mov
in
dec
jge
and
sar
push
cmp
jae
(bad)
jle
dec
inc
outs
retf
in
jno
jg
dec
je
pop
dec
cmc
addr16
lea
mov
repz
aam
loope
jno
mov
icebp
pop
xchg
test
xchg
mov
rcl
push
sub
pop
adc
xor
dec
loop
ja
jmp
sub
stos
dec
dec
push
pop
imul
scas
add
push
pop
jp
or
push
test
xor
nop
sub
rcr
ficomp
cli
call
push
pushf
call
sbb
mov
xor
mov
mov
pop
pop
add
mov
cwde
pop
mov
cmp
int
mov
fimul
repnz
into
mov
sub
outs
js
test
xchg
sub
sub
adc
imul
mov
loope
call
push
jne
out
pop
loopne
cdq
and
dec
aad
pop
scas
cli
inc
inc
data16
loope
add
xchg
lock
mov
adc
fs
cwde
push
pusha
cs
xchg
dec
scas
xor
adc
push
pop
add
sbb
push
mov
outs
mov
mov
xchg
sbb
sbb
jg
cwde
test
retf
jmp
dec
adc
hlt
jb
fild
fisttp
push
sar
or
jmp
dec
xchg
or
dec
gs
adc
std
shl
sub
outs
and
loopne
xcrypt-ecb
mov
xchg
cmp
dec
push
or
push
mov
mov
in
mov
mov
and
test
xlat
loop
xchg
or
mov
iret
test
adc
ds
jbe
pop
mov
dec
bnd
mov
inc
sbb
mov
jno
(bad)
mov
cmp
test
mov
arpl
xor
push
hlt
pop
jae
inc
cwde
cmc
jo
stos
xchg
cmp
jmp
cs
ds
mov
scas
aad
adc
test
and
xchg
rcr
test
xor
mov
pushfw
pop
mov
dec
mov
mov
jmp
lods
or
inc
xor
and
add
jo
cmp
int3
out
mov
daa
stos
scas
dec
fnstsw
call
mov
lea
sbb
test
popa
cmp
cli
sub
(bad)
sti
loope
retf
add
std
repz
hlt
sub
push
push
sub
fild
or
push
or
xor
push
imul
mov
shl
push
inc
xchg
call
inc
mov
mov
inc
or
mov
dec
and
test
mov
jne
jo
adc
fst
jnp
aas
ins
movs
sbb
repnz
pusha
pop
das
out
(bad)
jge
pusha
mov
inc
xlat
dec
adc
mov
lds
sub
inc
cmp
and
fnsave
jmp
sbb
push
ret
jns
call
bound
mov
pop
fwait
adc
mov
ds
icebp
clc
xlat
or
cmp
enter
sub
jg
daa
js
pop
bound
pop
and
mov
mov
mov
cmp
iret
je
(bad)
sub
retf
clc
jbe
dec
dec
fdiv
sti
jg
neg
jmp
mov
js
jne
data16
fsub
and
aam
mov
test
inc
not
jns
ds
jp
push
sbb
sub
adc
outs
pusha
call
and
sub
push
int3
cmps
cmp
lahf
scas
les
push
addr16
sar
stos
jo
push
outs
and
sub
adc
add
sbb
arpl
es
(bad)
cmp
lahf
add
mov
push
test
xor
mov
pusha
push
ror
push
pop
cwde
test
xor
mov
ror
xchg
cmp
les
push
retf
xchg
inc
call
mov
clc
or
push
rcl
sbb
loopne
xor
sub
mov
cmps
lods
jns
(bad)
dec
dec
sbb
dec
shl
mov
ret
dec
imul
xor
pusha
push
lea
jmp
mov
lea
jae
lea
neg
ror
mov
shld
btc
pusha
rcr
mov
bsr
mov
call
cmp
mov
jmp
add
sub
xchg
shr
add
mov
popa
stc
gs
sub
lock
xor
push
inc
inc
sub
add
lds
lahf
lods
inc
mov
adc
loop
cs
sar
and
mov
clc
mov
in
adc
xor
sub
cmp
pushf
out
inc
mov
cwde
out
push
sub
in
and
pushw
sar
out
ss
xchg
push
push
mov
mov
and
in
fdiv
sbb
cmp
retf
mov
mov
loopne
hlt
ja
retf
ret
mov
gs
fwait
loop
cld
inc
out
imul
loope
je
lock
jmp
mov
es
jmp
stc
push
ror
xlat
cs
imul
in
(bad)
jge
inc
mov
jecxz
mov
into
in
or
enter
test
test
stc
stos
jge
jp
xchg
(bad)
mov
cmp
call
dec
xor
jmp
in
sbb
in
push
adc
pop
mov
pop
or
ror
data16
cmps
mov
in
adc
jle
push
inc
mov
mov
ins
ja
cld
in
aam
cmp
xor
sbb
push
movs
mov
in
and
cmp
stc
cmp
test
mov
pushf
lea
je
push
add
cmc
stc
cmp
mov
lea
jb
pushf
lea
jmp
(bad)
mov
das
mov
lods
gs
sub
jno
les
push
mov
(bad)
std
adc
jns
fdiv
cli
fs
push
add
test
cdq
jnp
retf
and
movsx
dec
and
and
pop
sub
and
pop
retf
mov
in
fldenv
push
je
and
int3
div
sbb
push
rcl
xor
pop
cmp
xchg
cmp
outs
push
(bad)
aaa
stos
es
sbb
or
inc
jmp
leave
mov
lahf
push
jb
fs
lods
out
gs
mov
scas
rol
inc
or
jle
add
mov
fidivr
sub
adc
fstp
ja
mov
mov
sbb
bound
adc
mov
or
push
leave
data16
aam
sub
dec
inc
jns
popf
push
adc
mov
add
xor
dec
sbb
jnp
sub
enter
loope
out
cmps
pop
gs
pusha
and
push
aad
scas
lock
mov
dec
and
pop
push
aam
xor
mov
pop
sbb
sar
xchg
outs
add
push
and
(bad)
sbb
test
pop
sbb
push
stos
out
in
dec
neg
ret
cwde
adc
adc
jmp
mov
and
sub
test
and
bound
mov
sub
(bad)
jecxz
imul
in
push
cmp
mov
sub
nop
xlat
cmp
or
fwait
pop
out
pusha
sub
stc
cdq
push
repz
mov
addr16
in
inc
outs
add
xor
push
mov
ror
sahf
jb
fldl2t
test
pop
mov
adc
or
cld
cmp
mov
sbb
mov
xchg
pushf
das
fisub
mov
leave
imul
pop
(bad)
aad
out
ret
cmps
jmp
aas
stos
sar
call
jp
test
ds
(bad)
jmp
rcr
into
neg
mov
push
bt
jmp
jmp
push
call
push
sbb
inc
test
mov
movs
add
sbb
add
dec
mov
jmp
cmp
add
cmps
retf
push
and
xchg
sbb
mov
lahf
adc
xchg
mul
jb
fcomp
add
sar
mov
pop
ret
jge
pop
stos
cmps
into
movs
or
in
sbb
sub
inc
fld
in
stos
add
mov
test
cmps
movs
leavew
mov
stc
gs
mov
loopne
jnp
and
mov
lds
js
fwait
lock
idiv
pop
and
push
mov
fsub
(bad)
test
cs
sbb
aam
mov
cmc
stc
mov
xor
mov
or
addr16
enter
call
add
add
jnp
add
dec
cmp
pop
(bad)
cmp
add
add
int
sbb
add
daa
add
add
add
std
sbb
add
cmp
add
add
retf
add
add
add
add
push
add
sub
add
push
push
add
jbe
add
cmp
pop
jbe
add
cmp
add
add
int3
popa
xor
cwde
arpl
sbb
xor
pop
fisub
mov
mov
xchg
push
rcr
(bad)
clc
xor
loopne
pop
inc
jmp
lahf
and
sar
arpl
pushf
shl
jp
lahf
(bad)
xor
sbb
mov
cdq
sbb
sub
inc
pop
nop
call
jno
sbb
data16
mov
mov
mov
push
pop
std
mov
mov
sub
inc
call
xchg
add
inc
push
rcl
push
add
mov
xchg
mov
and
jg
jne
mov
push
cmps
arpl
xchg
jmp
fsub
jb
fadd
push
not
enter
jmp
push
add
lahf
stc
stos
cmp
dec
out
test
inc
(bad)
jne
fistp
inc
xor
movs
loope
fbld
inc
jge
inc
cmp
inc
mov
jb
or
mov
or
push
cmp
and
fwait
std
stos
xor
lods
int3
in
xor
cmp
and
cmp
sbb
lods
xlat
je
inc
ss
enter
and
in
in
push
xor
jae
pop
or
sub
cdq
mov
pop
mov
enter
mov
ins
jmp
test
mov
inc
jnp
adc
or
adc
jno
mov
push
push
adc
mov
clc
movs
inc
ret
xlat
ret
or
arpl
mov
jns
mov
cs
mov
add
repnz
lods
mov
xchg
rol
call
mov
mov
ins
dec
push
add
mov
stc
xchg
loope
xchg
js
leave
jg
sbb
aaa
jle
mov
(bad)
(bad)
popa
add
cwde
scas
ret
imul
mov
push
sbb
push
test
cmp
into
jno
add
add
test
ins
or
mov
dec
push
push
stc
pusha
in
fist
rcr
bound
dec
inc
pop
retf
sbb
mov
dec
nop
lahf
inc
outs
adc
(bad)
fisttp
gs
xor
sub
test
cli
nop
mov
test
push
jns
mov
sbb
call
sbb
pop
mov
cmps
in
xchg
mov
rcl
or
dec
push
mov
xchg
shl
mov
mov
stos
lods
or
inc
cmp
movs
jne
stos
mov
or
adc
and
loop
lds
lods
add
mov
mov
push
pop
sbb
ja
jbe
int3
stos
pusha
or
aam
fwait
lahf
je
or
ret
inc
cmp
test
rcl
mov
loopne
push
arpl
and
in
cmp
repnz
mov
fiadd
or
in
mov
cdq
enter
mov
mov
fcom
xor
or
stc
xchg
outs
pop
inc
sbb
inc
call
rcr
addr16
sub
dec
ret
bound
and
xor
xlat
jmp
aad
arpl
jb
(bad)
popa
sub
xor
push
and
(bad)
das
or
fild
mov
cmc
cmp
sbb
(bad)
push
jp
mov
jmp
in
mov
push
jnp
xor
loopne
mov
dec
adc
cmp
loopne
or
mov
stc
xor
sub
sbb
aam
cmp
lea
arpl
neg
push
cmp
loope
test
in
dec
das
pop
inc
movs
out
lods
push
pop
test
pop
retf
(bad)
outs
pop
fnstsw
fs
pop
hlt
out
loopne
shl
adc
jne
cmp
fdivr
ss
sbb
paddd
test
add
pop
pop
and
mov
xor
sahf
inc
test
mov
lods
add
mov
lock
mov
xchg
push
in
jno
js
bound
sub
sbb
push
mov
fldcw
imul
aam
stc
in
cdq
sbb
xor
xchg
fisttp
pushf
and
fwait
jmp
into
jg
jmp
test
push
enter
mov
ins
cmp
jbe
(bad)
push
push
test
(bad)
sub
mov
in
xchg
(bad)
test
lahf
gs
pop
add
jns
push
out
icebp
mov
mov
sub
xchg
sub
fist
mov
jnp
or
scas
mov
pushf
sar
push
cvtps2pd
fdiv
cdq
enter
mov
xchg
xor
out
adc
cmp
lods
imul
add
test
ds
bswap
fmul
xor
dec
mov
out
aas
pop
enter
push
and
mov
xchg
inc
mov
xor
inc
jne
and
(bad)
mov
ins
loop
lods
mov
sbb
mov
les
pop
retf
push
pusha
or
out
pusha
inc
and
fiadd
pop
mov
pushf
push
imul
xor
jg
sbb
je
aaa
aam
push
loop
fisubr
icebp
sbb
shl
sahf
sbb
push
pop
lods
mov
xor
mov
mov
mov
pop
cmp
jbe
std
retf
ss
and
dec
sbb
adc
add
fdivrp
dec
out
adc
inc
pop
pushf
invd
ins
mov
ret
aaa
push
cmc
adc
dec
add
xchg
lock
xchg
mov
push
mov
cmps
add
vmwrite
xchg
sar
pop
or
pushf
add
jge
jmp
push
sub
inc
inc
movs
xchg
jl
repnz
stos
aaa
mov
push
sahf
seto
push
stos
iret
out
sahf
xchg
push
push
ss
xor
xlat
aad
inc
lock
sub
adc
imul
add
icebp
push
test
outs
lahf
mov
pushf
sti
in
mov
shl
xor
dec
test
lea
sub
ret
jno
xchg
fincstp
mov
mov
jle
fnsave
icebp
cdq
jns
ins
loopne
sar
cmp
scas
or
pop
xor
sbb
movs
daa
cld
jbe
inc
js
popa
(bad)
dec
js
jae
out
call
adc
push
dec
or
jne
adc
icebp
lock
(bad)
pop
dec
sub
and
inc
xor
ror
pop
je
mov
in
aas
aas
push
pop
or
pushf
jmp
test
ds
adc
xchg
aaa
mov
in
mov
ror
sahf
out
(bad)
sbb
dec
sbb
ss
mov
push
xchg
push
repnz
fidivr
out
gs
dec
sbb
arpl
pop
ins
hlt
and
sbb
jecxz
nop
and
mov
cmp
repz
in
ret
xor
xor
int
jno
push
add
jae
(bad)
cdq
enter
cmc
push
cli
arpl
inc
cmp
pop
push
cwde
mov
pop
cmp
out
add
mov
pop
cmps
ins
push
mov
jo
cli
dec
ja
jmp
aam
call
and
mov
mov
icebp
sbb
add
mov
xchg
cmp
mov
fist
mov
inc
push
test
popf
ins
pop
mov
push
mov
inc
std
dec
mov
out
mov
(bad)
into
cmp
inc
mov
adc
nop
icebp
add
jnp
inc
xor
pop
dec
inc
fimul
add
fwait
push
dec
sti
std
mov
cs
(bad)
xchg
repz
lods
cld
adc
sub
ds
mov
pushf
cmp
iret
jae
mov
or
xor
hlt
cmp
sahf
or
ds
les
jmp
jno
lods
(bad)
popf
aaa
dec
inc
repnz
inc
fnstcw
mov
sbb
test
bound
pushf
xor
push
pop
and
xor
push
fisubr
mov
iret
sbb
mov
lock
sub
adc
sub
call
rol
aas
sbb
dec
repz
add
or
add
jg
cmc
push
pop
dec
mov
or
outs
cmc
dec
fadd
push
xchg
mov
mov
sub
(bad)
iret
jmp
or
sbb
in
cli
mov
leave
hlt
mov
addr16
sbb
outs
adc
xchg
in
pop
mov
mov
jmp
pushf
outs
and
cwde
jmp
jns
pop
dec
jns
pop
in
icebp
cmp
cmp
lods
jg
sub
xchg
and
pop
mov
xor
and
int3
mov
pop
in
pop
popf
mov
mov
cmc
out
daa
rcl
daa
dec
mov
inc
fs
sub
sub
icebp
adc
jnp
mov
(bad)
in
fcmovb
in
jno
inc
lahf
retf
retf
sbb
daa
call
stos
enter
das
or
ss
mov
and
xlat
jle
cmp
push
xlat
ret
fidivr
cmp
aad
xchg
and
mov
lahf
loopne
and
dec
cmp
mov
xchg
push
jmp
push
mov
inc
add
imul
ret
push
pop
pushf
cmps
das
cwde
retf
fsubr
or
xchg
dec
mov
jecxz
jl
(bad)
out
addr16
mov
push
call
and
mov
icebp
adc
jne
jae
cmc
bswap
daa
mov
xor
pop
mov
push
push
xor
mov
test
dec
out
adc
fs
mov
and
and
pop
pop
mov
leave
(bad)
inc
std
xchg
push
scas
push
mov
lock
scas
pop
icebp
xchg
repz
ds
aam
mov
inc
daa
sub
pop
add
add
xchg
xor
mov
pop
pop
jge
or
dec
mov
out
add
fcomp
jmp
xor
push
loop
xor
inc
xor
movs
pop
fsubrp
repnz
cmc
dec
sti
ret
imul
jmp
jno
mov
fwait
call
shr
fdivr
(bad)
fidiv
(bad)
cmc
inc
fisubr
add
js
sub
jbe
push
mov
mov
mov
rcr
jmp
gs
mov
xchg
xor
das
in
popf
ja
int
mov
mov
icebp
or
xchg
leave
scas
pop
xchg
loop
push
test
add
sub
or
sbb
shr
test
cmc
fcom
dec
(bad)
xchg
or
xchg
into
iret
nop
and
fwait
dec
inc
sub
mov
lods
and
mov
push
xor
or
stc
fidiv
jecxz
pop
ins
aad
add
cdq
mov
or
nop
repnz
xor
mov
es
stos
or
mov
fsubp
and
jmp
scas
cli
jno
ins
cmp
cmp
out
sub
mov
sbb
dec
sbb
sbb
mov
mov
adc
jecxz
or
mov
es
scas
or
adc
xor
fwait
sub
lea
inc
ss
push
jmp
dec
xchg
sbb
bound
fild
xor
or
mov
aad
or
ror
sub
jp
(bad)
ins
push
cmp
scas
or
push
mov
or
imul
mov
jl
mov
mov
lock
sub
mov
jmp
aaa
sub
mov
(bad)
adc
add
inc
repz
ins
pop
enter
repnz
inc
xchg
xchg
pop
jnp
sbb
not
push
es
xor
icebp
or
mov
call
xor
inc
cmp
xor
jb
loop
pop
adc
sub
or
mov
or
dec
leave
imul
pop
or
stos
jne
xor
es
in
arpl
push
dec
xchg
pop
nop
ror
push
inc
cmc
mov
and
pop
pop
bswap
push
pop
lock
push
dec
test
nop
and
mov
jae
push
mov
inc
call
dec
xchg
jo
sub
cmp
mov
push
ret
xor
mov
push
shl
xor
mov
push
rcl
xlat
cmc
gs
repnz
xchg
push
js
mov
jp
cmp
(bad)
sub
or
pop
icebp
dec
cdq
mov
xor
sub
jg
push
sub
xor
pop
shrd
fisttp
push
mov
push
xchg
ins
lds
cmp
and
ins
add
dec
jle
mov
lods
jmp
sbb
mov
aad
and
jle
(bad)
in
and
ret
int3
push
aas
outs
push
add
mov
retf
cmps
sub
add
mov
scas
mov
xor
loop
xor
movs
sbb
jmp
jb
enter
loope
dec
inc
inc
jmp
add
js
mov
xchg
cmps
mov
mov
imul
inc
adc
dec
sar
jp
fbstp
mov
cli
xor
mov
cmp
stos
int3
shl
icebp
daa
mov
xchg
es
pushf
xor
test
inc
sbb
in
mov
pop
push
(bad)
in
sub
xchg
or
fnstenv
pop
in
sbb
std
mov
shl
shl
enter
aaa
xchg
sub
data16
das
xor
and
mov
push
fwait
enter
lahf
mov
jl
mov
cmps
data16
sar
out
test
pusha
retf
add
sbb
mov
mov
xor
mov
or
scas
xchg
ret
loopne
ret
and
hlt
leave
loope
adc
push
movs
cmp
pop
and
pop
sub
and
inc
jmp
mov
dec
adc
add
out
lea
dec
es
inc
sub
loop
(bad)
daa
mov
loope
dec
mov
mov
mov
std
mov
cmp
stos
(bad)
pop
push
pop
retf
std
and
sub
neg
stos
test
sub
(bad)
adc
leave
pushf
xchg
shl
mov
hlt
jb
and
pop
cmp
retf
scas
sub
pop
or
ret
cmps
sbb
cmp
pop
call
imul
or
or
fiadd
scas
outs
aad
loope
xlat
inc
dec
out
lock
pop
test
inc
cs
out
iret
mov
pop
aas
sbb
fidivr
cwde
sub
call
and
(bad)
ins
or
mov
inc
mov
test
ins
loope
bound
or
cmps
cld
(bad)
lock
dec
push
xchg
adc
or
das
pop
daa
or
sbb
imul
mov
jbe
mov
xchg
add
jle
push
pushf
es
sub
push
pusha
call
lea
jne
or
shld
movzx
mov
cmp
push
bt
push
cmp
pushf
lea
ja
push
mov
pusha
mov
pushf
movzx
sete
mov
lea
call
pop
pop
leave
jo
scas
sub
mov
leave
sub
inc
add
movs
sub
cmp
call
movs
aaa
bound
inc
push
(bad)
dec
push
push
sbb
xor
adc
mov
out
adc
add
(bad)
jl
imul
popf
lock
(bad)
icebp
out
lahf
mov
(bad)
pop
fs
jns
sbb
pushf
sub
xchg
sub
dec
push
xchg
mov
inc
mov
adc
cli
sub
jmp
sbb
out
push
jmp
popa
jge
jo
adc
nop
mov
ficomp
(bad)
fisttp
popf
and
scas
sub
mov
in
out
push
lods
es
jl
jge
loope
js
add
mov
push
cmp
ret
cmp
add
add
mov
jge
xor
sub
pop
test
mov
fucomp
in
daa
inc
test
bound
iret
mov
arpl
test
fs
sar
lds
ror
mov
nop
xor
(bad)
fisub
popa
fidivr
fld
mov
add
inc
sub
xor
jmp
cwde
mov
les
xchg
or
add
jl
and
sahf
icebp
out
mov
sbb
setg
js
dec
pusha
adc
xchg
pop
jno
pop
mov
jle
cmp
pushf
lea
je
call
lock
fwait
adc
scas
sub
mov
in
js
das
jp
scas
xchg
call
fs
and
jnp
pop
cmps
call
ins
lds
cmp
jo
and
jp
jmp
add
test
mov
aaa
xor
or
jmp
dec
inc
inc
xor
ins
or
jl
rol
push
add
sub
mov
jmp
or
sbb
mov
(bad)
mov
sbb
cld
adc
push
adc
mov
(bad)
pop
and
movs
cmp
aaa
mov
(bad)
push
xchg
retf
inc
retf
lock
je
sbb
jmp
mov
clc
lea
jne
stc
add
call
test
shl
mov
pushf
pushf
cmc
clc
test
push
jmp
out
adc
scas
sub
mov
ret
loopne
jge
movs
mov
leave
shr
cmp
push
ficom
sub
mov
adc
jg
cld
push
popa
pop
(bad)
mov
xchg
aaa
test
sub
pop
push
push
push
int3
mov
mov
loop
outs
add
out
je
pop
add
jb
xor
xchg
retf
ret
adc
xor
rol
or
inc
xchg
les
sbb
add
add
out
mov
cmp
(bad)
repnz
fiadd
retf
das
adc
inc
retf
ss
add
add
fs
call
clc
push
cmp
jmp
shl
dec
and
rcr
mov
cmp
cmp
jmp
call
cmovnp
in
jle
pop
cmp
iret
(bad)
stos
push
das
ja
xor
(bad)
push
xchg
ror
(bad)
(bad)
pop
fcom
shl
push
call
sar
sub
adc
push
xchg
data16
xor
shl
mov
out
push
lds
jle
jno
add
imul
icebp
out
or
sbb
ds
xchg
sub
mov
mov
mov
xchg
repz
sub
stos
sbb
repz
and
xchg
sub
stc
in
daa
daa
aaa
movs
(bad)
inc
ins
push
xchg
sub
aaa
mov
fcomp
jg
arpl
sbb
mov
shl
mov
mov
xchg
sub
scas
sub
mov
push
fwait
aas
mov
addr16
add
sub
cmp
mov
push
cmp
cmp
dec
cmp
cs
mov
cs
nop
add
and
jnp
or
xchg
fst
popf
xor
stos
mov
jg
inc
dec
out
pop
jmp
mov
xchg
mov
cmp
mov
outs
aad
pop
sub
adc
loop
fnstenv
mov
mov
xchg
or
pop
or
mov
mov
das
add
dec
inc
push
call
in
lods
mov
rol
add
clc
pop
adc
mov
mov
push
test
mov
pushf
push
mov
lea
je
cmp
cmp
stc
sub
bt
stc
cmp
stc
cmp
jmp
xor
or
scas
sub
inc
dec
dec
and
mov
dec
(bad)
ins
retf
aam
jnp
in
ret
mov
pushf
xchg
mov
sub
sbb
inc
enter
aas
out
mov
scas
fst
mov
dec
cmps
lds
cwde
sbb
arpl
jge
stc
cmc
xlat
push
push
mov
jmp
cmp
fnsave
xchg
inc
je
dec
jecxz
jmp
sbb
cwde
sub
rcl
inc
enter
mov
scas
fisubr
ss
or
pusha
mov
inc
fcompp
mov
adc
ret
test
movs
cdq
aas
data16
mov
pop
stc
ja
inc
jb
add
cmp
mov
push
push
mov
cmps
jmp
std
icebp
mov
adc
jge
jne
(bad)
push
cmp
lea
push
and
xchg
scas
or
lods
lds
aas
fldcw
aas
jecxz
les
jo
cdq
or
bound
jo
in
add
aad
sahf
jbe
mov
and
rcr
mov
aad
adc
les
lods
mov
sub
inc
xlat
pop
xor
and
inc
(bad)
bound
repz
jg
inc
popf
(bad)
std
mov
call
mov
pop
push
or
xchg
jge
jg
inc
lds
imul
inc
push
(bad)
pop
and
mov
out
pusha
pop
add
sub
or
and
inc
mov
xor
push
(bad)
lahf
jae
(bad)
mov
xchg
aaa
mov
out
dec
push
js
mov
ds
ds
out
fsub
adc
xchg
fistp
mov
sub
int
cld
pop
mov
cmp
cmp
movs
xor
jp
mov
popf
(bad)
mov
je
push
in
adc
out
sti
mov
mov
ds
mov
push
ds
test
jecxz
mov
jmp
pop
xor
call
fstp
sbb
ror
push
shl
jecxz
push
pushf
call
rcr
enter
push
iret
adc
dec
idiv
cmps
mov
xchg
pop
test
fiadd
ret
mov
adc
popa
jb
sbb
pop
xchg
mov
xchg
leave
inc
fidivr
div
mov
push
call
xchg
leave
jb
repnz
push
stc
or
in
and
lods
ins
adc
cld
xor
(bad)
mov
out
push
scas
call
and
cmp
iret
cmp
inc
es
mov
mov
cmp
mov
ds
sbb
add
ins
scas
jns
xor
dec
add
mov
add
mov
fimul
add
mov
push
into
sar
mov
and
call
xchg
dec
and
add
or
dec
inc
dec
xchg
mov
pusha
call
xor
scas
cdq
repz
imul
repz
jns
mov
clc
add
fstp
lods
pop
mov
jmp
dec
les
push
xchg
mov
cld
or
push
lods
dec
arpl
mov
sub
jo
pop
mov
fadd
ins
dec
jmp
jmp
stos
fcom
jmp
fsub
sbb
aas
jg
adc
xor
mov
or
pop
repz
or
shl
in
(bad)
imul
es
jns
or
cmp
movs
mov
adc
sbb
repz
int
ret
mov
test
scas
sub
mov
inc
and
fnstcw
cli
push
out
dec
pop
data16
dec
xor
mov
shr
popa
fxch
xor
iret
nop
ss
aas
fist
add
cmps
or
push
xchg
das
mov
jnp
xlat
repz
(bad)
mov
mov
push
ss
mov
sub
(bad)
mov
jo
dec
sbb
adc
(bad)
movs
sbb
ret
xchg
mov
hlt
ins
out
gs
sub
daa
sub
pop
jae
push
in
jns
gs
push
sbb
jno
adc
stc
sahf
push
cmp
cwde
mov
(bad)
and
and
enter
cmp
sub
cwde
repnz
(bad)
hlt
pop
pusha
lods
shr
jns
dec
jno
mov
mov
inc
xor
and
push
push
das
adc
pop
repz
in
sub
mov
sub
xor
in
fistp
pop
xlat
pop
xor
into
shl
inc
mov
jo
pop
adc
sub
test
sbb
sahf
sbb
(bad)
push
pop
sub
jmp
push
dec
cmp
pusha
mov
rcl
popa
jbe
mov
idiv
shl
sbb
or
xor
call
sub
and
in
add
fs
call
ja
pushf
push
push
lea
jae
pusha
xor
push
pushf
lea
call
pusha
lea
jae
mov
mov
dec
jmp
push
not
inc
add
or
jmp
(bad)
jl
mov
stos
psrlq
lahf
inc
mov
add
into
cmps
or
mov
ret
cmp
jae
add
jae
push
ds
mov
fwait
das
mov
and
repz
pop
mov
das
loope
popa
test
fidivr
add
int
mov
inc
les
cmp
sbb
shl
xchg
jo
and
leave
adc
mov
inc
outs
adc
add
cmp
dec
nop
sbb
xchg
jp
push
fstp
cld
arpl
test
sbb
mov
out
jb
addr16
adc
and
sti
retf
jecxz
ins
lea
cdq
sbb
lahf
mov
(bad)
scas
sub
mov
popf
es
cdq
cld
add
inc
popa
push
cmp
cmp
test
push
fsubr
jb
imul
sbb
ins
sub
in
xchg
cmp
sar
adc
sub
std
movs
stos
jno
mov
mov
pop
bound
jno
jne
clc
xchg
xchg
push
popf
fcmovne
jb
xchg
or
loop
xchg
mov
dec
ret
(bad)
pop
loope
jae
cdq
test
adc
sbb
mov
stos
es
in
scas
add
mov
aam
lock
aam
or
xchg
mov
cwde
xlat
xchg
lods
test
lods
cmp
mov
pop
imul
bound
ins
outs
ins
pop
jo
jb
mov
jne
mov
add
sbb
std
mov
stc
mov
movs
adc
les
mov
leave
retf
int3
int
(bad)
xlat
fcomp
fiadd
xchg
xchg
movs
push
mov
sbb
mov
repnz
nop
les
bound
popf
ins
sub
xchg
popf
xchg
sbb
dec
in
or
or
call
(bad)
sahf
mov
fsubrp
xchg
cwde
adc
cmp
je
xchg
mov
clc
mov
popf
mov
mov
(bad)
and
call
add
sbb
sbb
dec
fcom
pop
mov
fsubr
sbb
mov
nop
sbb
(bad)
movs
mov
mov
mov
sub
and
clc
mov
and
aam
inc
mov
fiadd
mov
sbb
add
push
pop
int3
or
and
pop
fadd
idiv
xor
int3
xor
and
or
in
mov
add
mov
adc
xchg
in
pushf
outs
popf
fsub
xor
movs
bound
cmps
(bad)
clc
mov
aad
jo
pushf
fsubr
mov
adc
and
cmp
pop
cmps
push
dec
mov
fsubr
fadd
jle
xchg
call
aam
mov
popf
shl
ins
sbb
movs
aam
call
in
clc
fsubr
sbb
hlt
fcomp
and
sub
sbb
cmp
adc
dec
inc
sbb
inc
fsubr
cmp
dec
cmps
inc
mov
dec
movs
cwde
jne
push
jge
test
pop
fsub
mov
enter
jo
fcomp
fs
push
ins
mov
jo
popf
fst
je
pushf
fsubr
js
movs
cmps
cmp
test
sbb
test
les
aam
sbb
mov
nop
and
add
sbb
cwde
mov
pushf
mov
fmul
mov
mov
call
clc
sbb
or
mov
pop
sbb
sub
mov
cmp
pop
pop
(bad)
and
lock
mov
and
mov
sar
cwde
ja
aam
push
mov
fs
fcomp
je
enter
sbb
and
call
cwde
clc
fsubr
and
lock
fsubr
and
cmp
pop
cmp
dec
and
pop
or
and
push
and
dec
mov
cwde
js
sbb
fs
jo
sbb
enter
mov
jg
call
and
mov
sbb
sbb
cmp
int3
mov
fadd
sbb
call
hlt
sbb
add
push
mov
mov
cwde
jns
pusha
dec
sbb
pop
fdivr
fmul
je
test
pushf
sbb
cmps
test
mov
sbb
pushf
push
movs
adc
sbb
inc
fcomp
movs
or
push
fdivr
mov
mov
mov
cwde
jp
mov
fadd
and
enter
(bad)
and
hlt
mov
das
movs
sub
int3
(bad)
or
sbb
pop
lods
jl
pushf
cmp
lods
mov
jmp
dec
pusha
push
cmp
mov
int3
cmp
cwde
jnp
aam
sub
cmp
sbb
pop
in
mov
mov
popf
cwde
mov
lods
movs
clc
mov
fcom
sbb
sub
dec
and
jo
sbb
pushf
mov
les
cmp
fld
js
mov
stos
pop
push
fld
mov
fcom
sbb
hlt
fidiv
push
mov
fdiv
hlt
cmps
add
and
xor
cmp
sbb
ins
fdivr
test
fsubr
cwde
mov
lods
and
in
sbb
inc
fcomp
xchg
(bad)
lahf
pushf
in
popf
movs
and
pop
adc
fwait
mov
lods
add
les
fwait
sahf
lods
hlt
(bad)
popf
mov
xor
movs
les
aad
cmps
in
mov
cmps
fwait
iret
mov
mov
cld
fdivr
sbb
popf
fdiv
fsubr
test
test
cmps
or
mov
cmp
cwde
les
loopne
mov
jae
neg
lock
mov
pop
mov
pusha
popf
shl
cmps
add
mov
loopne
mov
call
mov
push
mov
lahf
mov
fdiv
push
mov
pop
out
sbb
xlat
fmul
and
cmps
(bad)
sbb
sahf
fcomp
and
cdq
jmp
pushf
adc
and
pusha
mov
mov
sbb
mov
xor
sbb
add
ret
mov
fsub
loop
nop
retf
xchg
mov
frstor
js
fadd
and
mov
fcom
jbe
in
cmps
lods
mov
int
data16
fdivr
sbb
push
jmp
lock
retf
or
leave
pop
and
stc
mov
mov
jle
icebp
and
adc
add
ror
in
fsub
daa
mov
xchg
popf
enter
push
jo
pop
sbb
mul
les
jp
xchg
out
sbb
xsha1
cmps
iret
mov
mov
fcomp
fistp
jmp
stos
pop
or
sti
mov
fld
add
mov
xchg
repz
mov
xor
adc
add
ret
and
sbb
xchg
js
adc
and
inc
lea
cmp
sub
dec
xchg
cmp
fstp
sub
js
adc
and
rcr
push
pop
xchg
xchg
fist
aaa
lea
mov
js
adc
and
and
fld
pop
outs
lea
mov
lea
mov
js
adc
and
fisttp
inc
pop
or
push
adc
fs
pushf
aaa
or
pop
cmp
adc
movs
rcr
mov
aam
aam
lods
pop
movs
xchg
test
sbb
cli
je
movs
and
(bad)
les
aam
adc
lods
movs
fwait
sbb
movs
cmc
sbb
movs
cwde
sbb
movs
lds
movs
mov
xchg
dec
call
cld
mov
dec
mov
(bad)
(bad)
dec
in
std
add
add
stos
stc
in
mov
push
push
xchg
movs
mov
out
or
jge
add
jg
mov
add
pop
pop
std
mov
lods
test
adc
cmc
clc
stc
or
add
mov
cmps
(bad)
dec
fidiv
push
stc
dec
ret
lods
fdivr
add
hlt
push
inc
jmp
pop
pop
mov
gs
aad
test
ins
or
xor
cmp
xchg
in
scas
imul
cmp
retf
mov
or
fimul
sub
mov
or
add
pop
inc
fidiv
xlat
adc
in
aam
pop
js
sbb
mov
jb
adc
int
cli
addr16
mov
pop
test
fucomip
and
cmp
stos
scas
(bad)
fsqrt
mov
xlat
stos
dec
mov
cli
imul
dec
int
xor
clc
repz
jbe
mov
loop
pushf
pushf
popf
es
fld
(bad)
sbb
push
loopne
loopne
loopne
loopne
loopne
fsubr
int
or
adc
ss
or
add
mov
and
call
jmp
mov
jbe
cmp
outs
push
jo
ltr
and
and
and
sub
and
and
and
sub
nop
hlt
fs
or
imul
lods
fsubr
mov
mov
aam
mov
stos
call
outs
push
xchg
xlat
add
cld
lds
mov
(bad)
fucom
popf
jmp
in
aad
add
sub
or
jae
xchg
xchg
sub
fwait
or
in
sub
aam
mov
add
cmp
xor
sbb
outs
mov
mov
imul
loopne
popf
push
adc
jnp
mov
push
and
movs
dec
hlt
xchg
dec
xchg
push
sbb
js
add
in
adc
pop
sbb
jmp
(bad)
clc
push
lea
push
jecxz
xchg
xchg
test
add
mov
mov
iret
xchg
repnz
std
loopne
aad
imul
fld
cwde
fist
dec
mov
xor
add
(bad)
xchg
push
dec
outs
aam
push
inc
adc
ins
(bad)
or
jae
arpl
shl
inc
les
jb
adc
imul
fs
dec
mov
mov
xchg
inc
jmp
mov
dec
xor
mov
xchg
inc
ins
mov
inc
xchg
sbb
add
movs
loopne
in
xchg
aas
mov
push
rol
cli
dec
xchg
and
jo
call
data16
movs
imul
call
push
popf
fwait
or
lea
and
mov
adc
add
and
jp
in
pop
xlat
(bad)
mov
les
fwait
xchg
cmp
pushf
push
jmp
mov
inc
stc
in
dec
cmps
xchg
jle
push
pop
adc
jno
ffree
outs
test
and
loopne
(bad)
in
cmc
cmps
inc
loope
lahf
ror
sbb
jbe
xchg
dec
push
imul
ins
pop
pop
cmp
(bad)
jge
xlat
nop
xchg
ins
add
ficomp
inc
fs
dec
hlt
outs
pop
rcr
(bad)
repz
ds
xchg
adc
in
aad
int3
mov
sbb
cld
jmp
sbb
push
js
bound
sub
ins
mov
dec
xchg
cmp
pop
stos
rol
adc
iret
lock
dec
inc
add
push
mov
dec
or
jbe
xchg
aam
inc
or
fld
jle
or
xor
xchg
stos
jo
cmps
lahf
div
xchg
iret
clc
sub
inc
mov
push
xchg
arpl
daa
mov
inc
xor
test
aaa
pushf
sbb
xchg
call
xchg
sti
stc
adc
retf
jnp
jmp
xchg
scas
push
sbb
movs
pusha
fidiv
add
adc
sub
stos
imul
daa
gs
int3
out
jae
test
sti
dec
xchg
dec
rcr
xchg
retf
outs
mov
scas
sahf
inc
mov
xchg
test
push
cwde
mov
push
and
jmp
and
lds
and
pop
scas
xchg
pop
cli
push
xor
add
out
or
lahf
dec
dec
stos
xchg
mov
xchg
mov
dec
pop
mov
es
dec
mov
lock
fs
dec
pop
xor
mov
jb
out
inc
xchg
clc
das
mov
xchg
aaa
dec
sahf
daa
add
adc
retf
sbb
fwait
stos
push
cmps
jmp
stos
push
ficom
test
push
dec
jbe
mov
scas
dec
mov
mov
dec
xor
mov
jne
sbb
jbe
test
pop
outs
mov
xchg
stos
push
adc
jne
or
fisttp
jp
les
add
(bad)
mov
cli
lock
xchg
movs
aam
stc
and
inc
not
mov
push
xchg
pop
add
xor
mov
xchg
loop
inc
xchg
int
mov
stos
hlt
fs
std
xchg
(bad)
add
fdivrp
gs
inc
jo
push
cli
lahf
jae
aam
iret
ins
retf
out
push
cmp
jb
arpl
jge
xchg
dec
les
push
dec
or
out
aaa
dec
mov
(bad)
xchg
call
push
xchg
sti
ins
mov
push
cli
inc
dec
xchg
fdivp
pop
xchg
scas
cld
icebp
sub
lahf
dec
xor
push
jae
out
and
sbb
lds
test
(bad)
push
out
mov
(bad)
cmp
jmp
push
ins
pop
fisttp
gs
adc
pop
adc
ja
jecxz
inc
loope
adc
and
pop
xor
sub
sbb
cmps
push
fisub
add
or
aad
xchg
cmc
jmp
jp
or
jp
xchg
mov
sbb
cdq
in
dec
scas
push
lods
add
xchg
das
outs
mov
inc
cs
retf
jbe
mov
mov
aam
jae
aad
xor
sbb
ja
test
inc
cmp
xchg
or
test
xchg
pop
jb
stc
inc
pop
lods
outs
ds
clc
jg
xchg
fcmovu
mov
xchg
rol
mov
mov
popf
xchg
fwait
lahf
add
mov
xchg
mov
jae
push
icebp
pop
add
pop
xchg
dec
dec
mov
ss
or
fwait
and
(bad)
push
xor
xchg
or
add
xchg
xchg
xchg
push
fdivr
scas
rcr
adc
jb
cdq
jecxz
test
sbb
pop
push
pop
mov
call
sub
dec
mov
mov
push
ins
int3
push
mov
pop
xor
loopne
dec
mov
cmp
and
fadd
xchg
imul
test
xchg
call
add
pop
rcl
and
jb
cmp
lahf
jne
daa
pop
sbb
test
push
mov
xchg
or
aam
sbb
stos
lods
mov
test
mov
popf
cmp
xchg
stc
and
pop
jmp
clc
int3
fs
inc
je
jbe
xchg
push
lods
mov
cmp
hlt
xchg
xchg
push
mov
and
add
sbb
aas
xchg
fcomp
test
xchg
adc
mov
fdivr
popf
mov
mov
xchg
out
inc
and
out
jb
stc
or
xchg
xchg
xchg
add
and
xor
pusha
mov
push
pop
ror
adc
or
push
inc
int
mov
ja
sahf
cmp
xchg
dec
popf
sbb
inc
movs
jecxz
xchg
xor
add
ins
add
aam
or
cmps
out
xchg
push
add
popa
adc
or
imul
call
mov
sbb
scas
push
scas
push
aad
xchg
out
dec
out
cld
sub
or
add
mov
shr
xor
fwait
shl
lds
inc
pop
gs
es
stos
pop
mov
les
push
xchg
imul
fwait
inc
popf
cmp
mov
xchg
mov
xor
cmp
mov
mov
(bad)
fidiv
retf
aam
pop
adc
mov
xchg
jns
inc
xchg
xchg
cmp
scas
sti
and
xor
mov
or
pusha
xchg
ins
jl
mov
xor
inc
sub
xchg
adc
sbb
inc
mov
test
mov
(bad)
jne
fmul
retf
push
mov
idiv
mov
dec
js
sub
mov
cmps
sub
mov
dec
pop
add
xor
sbb
icebp
mov
scas
pop
shr
adc
(bad)
sub
sti
xchg
cmp
mov
mul
mov
int3
add
mov
mov
ds
scas
adc
out
(bad)
nop
sub
out
bound
jmp
punpckhbw
push
and
sub
mov
ins
xor
adc
fild
mov
je
or
xchg
into
cmp
call
stc
shl
cmp
and
push
push
je
pop
xchg
test
ins
push
jne
shr
rcl
push
mov
xor
aam
mov
fidivr
jne
xchg
out
dec
(bad)
stc
jo
xchg
out
adc
popf
out
or
inc
and
test
cmps
xchg
xor
push
xchg
mov
retf
(bad)
push
xchg
add
ficom
sar
pop
call
stos
jecxz
dec
in
mov
mov
jne
jmp
scas
sub
fwait
ins
pushf
sahf
shl
rcr
je
add
iret
mov
mov
or
mov
mov
lahf
ret
scas
das
cmc
sub
lods
xchg
pop
xchg
cmps
xchg
sub
cmps
xchg
cmp
pop
movs
xchg
test
shr
push
and
push
stos
je
inc
int3
imul
and
adc
pop
iret
dec
mov
fcom
push
sbb
shl
jge
cmp
xchg
xchg
shr
stos
repnz
into
xor
adc
outs
leave
xchg
cmp
push
jmp
inc
imul
addr16
jno
movs
(bad)
shl
pop
mov
xchg
push
cmp
mov
jl
mov
sub
xchg
or
mov
dec
mov
mov
mov
xchg
inc
shr
mov
inc
mov
aam
mov
add
xchg
sub
mov
jecxz
or
or
jo
adc
stos
pushf
mov
arpl
cmp
adc
daa
mov
(bad)
or
xor
push
xchg
push
ret
sbb
jb
lahf
int3
add
and
out
or
xchg
xchg
out
cld
leave
int3
xchg
popf
pushf
adc
adc
add
cli
aas
xchg
mov
hlt
push
ja
clc
movs
dec
xchg
mov
xchg
and
je
mov
imul
stos
xor
push
dec
or
nop
div
pop
popf
mov
es
xchg
out
loopne
jno
loope
cs
ficom
loop
fldenv
mov
popa
aad
in
adc
(bad)
mov
pop
xlat
xchg
in
test
sti
xchg
(bad)
jmp
jmp
push
jmp
ds
out
jbe
adc
imul
int
out
jae
mov
sbb
sbb
in
hlt
or
(bad)
mov
repnz
add
inc
repz
leave
jne
dec
add
inc
jbe
ins
cmp
ja
inc
sar
call
jns
mov
fidivr
adc
hlt
or
push
retf
xchg
push
lock
jle
dec
cmps
xchg
dec
adc
jmp
mov
(bad)
pop
xor
mov
jge
xchg
pop
push
xchg
jmp
test
mov
sub
mov
jecxz
xchg
hlt
icebp
or
jmp
dec
ins
xchg
mov
ja
outs
xchg
push
mov
jae
data16
jno
(bad)
jo
mov
cli
cmp
push
imul
inc
addr16
scas
xchg
mov
pop
mov
adc
xchg
lods
pop
pusha
jmp
push
ss
addr16
inc
jl
push
xchg
cmp
loope
xor
mov
test
adc
fsub
add
xchg
popa
scas
addr16
arpl
dec
xchg
shl
xchg
and
ret
mov
daa
xor
clc
sub
pop
adc
sub
inc
adc
sub
mov
mov
push
cdq
or
das
adc
cs
leave
sbb
fbld
bnd
xchg
and
pop
arpl
xor
mov
aam
fstp
pop
sbb
clc
cs
push
mov
inc
mov
outs
jo
call
idiv
in
into
xchg
lods
stos
sbb
xchg
fs
sub
cmp
xchg
cwde
cli
lea
cmp
adc
cmps
mov
mov
mov
adc
(bad)
xchg
cmp
jmp
dec
xchg
cmp
mov
xlat
into
xchg
xor
xor
push
xchg
ss
pop
dec
jnp
call
sbb
or
inc
iret
inc
mov
inc
jmp
cld
mov
dec
repz
out
lds
and
jb
pop
je
xchg
push
outs
repnz
push
or
xchg
stc
sti
push
dec
pop
xchg
pop
popf
add
jmp
sub
and
test
or
dec
cs
xor
jecxz
xchg
adc
je
add
xchg
push
push
jno
inc
je
movs
imul
xor
cmp
mov
inc
xchg
(bad)
pop
push
(bad)
inc
cmp
sti
xlat
pushf
push
or
add
adc
test
fwait
dec
cmp
xor
mov
(bad)
and
ss
mov
xchg
inc
pop
fisttp
pushf
rol
xchg
xor
pop
and
fs
sbb
int3
in
mov
jbe
in
sbb
jle
xchg
stc
dec
je
jno
jecxz
scas
arpl
mov
jle
ja
in
out
ins
adc
mov
xor
fsubr
xor
daa
pushf
mov
imul
dec
mov
pop
jg
pop
xor
mov
xchg
dec
adc
mov
cmc
mov
das
jno
push
mov
and
lds
mov
test
xchg
pop
xchg
inc
jne
adc
hlt
push
xchg
call
mov
jp
dec
cmp
xchg
loopne
jnp
gs
adc
(bad)
fmul
sub
shl
inc
pop
mov
xchg
xor
ins
mov
fsub
xchg
addr16
adc
cli
sub
mov
aam
dec
pop
add
sbb
mov
je
adc
int
or
mov
daa
xchg
mov
mov
and
call
lds
loope
mov
arpl
xchg
sbb
sti
stos
das
call
pop
dec
fadd
les
fincstp
xor
pop
pop
stos
cld
retf
push
mov
icebp
xchg
js
in
lock
call
jl
pop
sbb
xchg
stos
int
retf
adc
xor
mov
mov
or
sub
pop
pop
inc
lock
iret
xchg
dec
in
xor
adc
fld
adc
ficomp
xchg
outs
jnp
(bad)
pop
push
and
push
inc
(bad)
in
repz
js
into
(bad)
pop
popf
and
jp
add
mov
push
sbb
dec
cmp
push
stos
xchg
nop
cdq
ret
mov
xchg
mov
or
xor
or
mov
sub
inc
fcom
xchg
xchg
cmp
aad
mov
xchg
sub
sub
mov
clc
lods
jmp
hlt
adc
jnp
dec
mov
repz
popf
push
retf
jge
push
int3
ins
fisub
fs
jae
xchg
and
test
xchg
cwde
xor
cs
cmp
ins
push
xchg
xchg
push
retf
inc
out
xchg
pushf
test
xchg
mov
sbb
dec
or
pop
mov
cmp
xchg
inc
mov
mov
xchg
cmp
cli
pop
ins
movs
xchg
xchg
push
hlt
xchg
inc
arpl
das
pop
xchg
pop
pop
mov
cmp
fld
xchg
lods
cmp
xchg
movs
fstp
sbb
mov
xchg
mov
in
ret
(bad)
enter
popf
outs
inc
mov
jg
pop
xchg
inc
xchg
and
test
adc
in
shr
xchg
mov
sub
xchg
add
call
xor
or
call
xchg
jp
xchg
mov
pop
dec
or
lock
xchg
xchg
in
jge
sub
jmp
push
add
cmc
and
bound
xchg
pop
arpl
adc
inc
sbb
sbb
push
mov
sahf
inc
xor
test
adc
imul
cmps
inc
mov
xor
adc
jns
test
xor
xchg
in
and
xchg
stos
cli
sbb
outs
rol
int
add
adc
jp
inc
(bad)
mov
xchg
scas
(bad)
data16
shr
xchg
(bad)
push
mov
cmp
cmp
mov
dec
cli
test
adc
fwait
les
adc
in
add
xchg
lods
add
mov
jge
cmp
mov
or
imul
xor
dec
loopne
adc
rcr
adc
movs
clc
inc
xchg
push
aad
jb
outs
push
iret
jg
daa
dec
in
sub
pop
cmps
add
jmp
lea
test
lock
jecxz
call
and
mov
loopne
std
movs
repnz
sti
add
fistp
mov
dec
int
leave
adc
mov
inc
sub
outs
xchg
dec
pop
push
push
(bad)
aam
(bad)
xchg
ja
jae
or
mov
shr
mov
xor
into
pop
or
adc
fs
stos
mov
mov
arpl
xchg
sub
mov
xchg
cdq
sbb
pop
mov
lahf
jge
ret
add
sbb
xchg
cld
loopne
push
cmc
mov
dec
xchg
cli
rcl
jo
and
xchg
outs
add
push
xor
sbb
xor
push
js
xchg
dec
push
inc
ja
les
and
sub
adc
rol
and
jp
lock
push
ror
sbb
les
push
loop
call
movhps
pop
jmp
inc
ins
xchg
pop
cmps
dec
jge
pop
push
dec
xchg
jle
dec
sbb
div
dec
ficomp
addr16
xchg
loope
cmc
sahf
jmp
push
fwait
or
jae
aad
ins
sub
xchg
gs
add
mov
dec
add
inc
xchg
sti
sbb
outs
hlt
dec
fcom
mov
ds
sahf
loopne
jno
adc
xchg
cdq
add
mov
movs
ja
mov
cld
dec
mov
mov
push
js
bnd
xchg
mov
inc
fs
mov
xchg
imul
inc
shr
adc
push
dec
add
cs
inc
int
xchg
mov
data16
jle
fcmovne
xor
outs
mov
xchg
pop
ja
lahf
cmps
sub
iret
in
sbb
hlt
out
cmp
mov
popf
xchg
xor
fwait
fwait
xor
mov
aaa
xchg
data16
xchg
std
call
icebp
adc
sti
xchg
pop
lods
add
add
jnp
push
mov
push
out
sti
jno
xchg
pusha
lea
add
push
add
hlt
inc
and
mov
jl
gs
inc
pushf
xchg
ins
push
pop
jecxz
xchg
or
mov
push
jmp
ror
jno
inc
retf
ins
mov
scas
push
loopne
xchg
fimul
jae
adc
sti
mov
mov
std
push
jne
cmc
hlt
xor
cli
pop
scas
mov
xchg
cld
jbe
pusha
mov
lahf
fist
jmp
pop
dec
iret
push
inc
xchg
push
lahf
mov
lock
inc
(bad)
cwde
push
imul
(bad)
xor
out
xchg
jb
mov
clc
push
inc
adc
xor
aam
call
push
fwait
sti
sbb
xchg
push
ficom
jbe
push
test
xchg
inc
mov
int3
es
data16
jns
push
aam
jo
xchg
dec
lahf
outs
jae
sbb
int
test
mov
adc
xchg
dec
mov
jne
into
dec
(bad)
xchg
out
jp
mov
call
and
stc
xor
cmc
push
stos
xchg
add
xor
jbe
imul
call
push
cmp
mov
stos
mov
std
fndisi(8087
rcl
(bad)
fisubr
push
jo
jae
cli
retf
xchg
ins
iret
test
xchg
dec
xor
inc
arpl
les
mov
mov
dec
push
mov
jne
dec
aaa
cmp
popa
imul
mov
ins
sti
outs
xchg
cli
push
ret
ficom
mov
dec
lahf
push
retf
push
mov
cdq
jae
rcl
lods
aam
aad
retf
push
mov
imul
xchg
or
sbb
xchg
aad
pop
pop
ins
push
pushf
gs
push
dec
fisttp
mov
jecxz
push
inc
adc
xor
rcl
push
cmps
xchg
in
ins
mov
or
add
addr16
adc
ret
xchg
jmp
mov
imul
mov
push
scas
loop
das
xchg
cmp
or
retf
jp
icebp
sbb
push
popa
out
mov
mov
ja
xchg
inc
fidiv
mov
jne
push
xchg
jb
call
xchg
inc
ds
xor
call
std
int
xchg
mov
out
sbb
mov
add
retf
pop
icebp
adc
add
sbb
dec
mov
push
dec
sbb
and
xor
stos
xor
dec
mov
rol
int3
pop
xchg
fcom
jb
mov
cdq
jge
adc
or
rcr
call
xchg
push
xchg
and
xchg
jl
push
int3
ins
push
sub
pop
mov
loopne
sub
and
lock
xchg
popf
fldcw
fadd
mov
out
cmovg
call
test
and
jb
sub
pop
pusha
xchg
cmp
mov
daa
xchg
push
imul
dec
call
sbb
xchg
stos
mov
mov
fwait
mov
add
das
stc
xchg
cmps
(bad)
cmp
test
mov
xchg
xchg
and
xor
xchg
cmp
mov
xchg
mov
xor
cmps
add
add
mov
test
mov
cld
ret
ror
fmul
popf
scas
or
(bad)
push
push
(bad)
jb
hlt
adc
xchg
imul
rcl
push
retf
cs
dec
inc
push
call
stc
int
pop
sub
mov
cmp
mov
inc
pop
xchg
sbb
xor
fimul
ins
shl
push
jo
xchg
mov
push
int
add
ins
or
adc
retf
and
xchg
dec
pop
push
scas
sbb
xchg
aad
scas
cld
out
dec
out
xlat
mov
jl
bound
ins
mov
shl
mov
mov
adc
jno
add
xchg
cmps
xor
(bad)
inc
div
gs
pop
stos
pop
or
xchg
sub
fwait
push
xchg
jge
mov
cmp
lds
call
jne
pop
mov
adc
jne
sbb
cli
jb
push
adc
pop
jmp
push
imul
scas
xchg
cmp
and
xor
js
inc
dec
xchg
or
xchg
arpl
adc
cmp
out
arpl
xor
int3
adc
mov
inc
leave
xchg
fwait
test
(bad)
jo
or
in
ror
div
inc
or
mov
data16
mov
je
adc
inc
sub
mov
xor
pop
test
sbb
fisubr
test
movs
sbb
jecxz
xchg
(bad)
adc
cmp
fwait
push
loopne
pop
adc
sub
mov
repnz
mov
test
xchg
scas
nop
jecxz
mov
imul
sub
fst
jne
stos
in
adc
packssdw
cmps
sub
pusha
mov
adc
push
cmps
enter
out
adc
and
repnz
adc
inc
add
fcom
into
cmps
retf
mov
fwait
cmp
(bad)
movs
sar
mov
and
scas
cli
push
fwait
push
mov
je
and
ins
jp
mov
mov
mov
mov
and
adc
dec
std
pop
test
fcmove
out
xchg
or
jo
stc
(bad)
cmp
and
xchg
retf
mov
int3
or
inc
xor
push
shl
daa
mov
xchg
push
les
retf
xchg
sbb
xchg
ficom
in
jmp
cmp
call
adc
jecxz
sbb
mov
movntps
popf
scas
lea
sahf
xor
jnp
(bad)
fist
mov
pop
xchg
repnz
adc
scas
ret
lahf
inc
scas
xchg
xor
push
lods
xchg
std
dec
mov
xchg
mov
movs
inc
mov
loopne
test
xchg
les
push
stos
and
loope
js
xchg
je
and
imul
es
and
lahf
mov
fadd
sbb
repz
adc
rcl
repnz
in
retf
xor
add
shr
adc
lods
cmp
xchg
sbb
sub
(bad)
push
movs
bound
jns
and
jo
cmp
mov
mul
mov
mov
pop
lfs
dec
mov
xchg
mov
mov
rcr
xchg
mov
inc
or
mov
ret
retf
ss
add
and
in
jnp
pop
mov
inc
push
xchg
jo
sub
or
stos
test
adc
dec
xchg
jecxz
mov
not
or
mov
daa
push
cwde
xor
cvtps2pd
add
adc
sbb
int3
mov
jb
cmps
and
xchg
add
add
or
out
std
xchg
xchg
leave
test
test
mov
push
in
mov
mov
xchg
dec
sti
mov
je
mov
test
lahf
mov
ficomp
inc
xchg
and
nop
js
popf
xchg
pop
loopne
dec
es
jno
cmp
pop
cs
fistp
aam
mov
push
mov
(bad)
(bad)
xchg
mov
jp
xlat
xchg
pop
and
jmp
jmp
push
shr
xchg
dec
push
out
push
and
xchg
into
ds
in
test
in
push
adc
push
int
out
mov
xchg
jae
cli
sbb
inc
icebp
jg
enter
xchg
xchg
repnz
out
repz
ret
xchg
add
scas
adc
mov
arpl
out
rol
jnp
or
(bad)
js
push
mov
int3
add
xor
xor
ret
jbe
jge
sbb
jg
retf
jle
lock
xchg
cmps
dec
xchg
test
sub
xchg
xor
scas
movs
xchg
ror
pop
(bad)
mov
xchg
jge
xchg
xchg
adc
jmp
movs
mov
mov
sub
popa
ins
or
hlt
ins
dec
retf
xchg
jmp
nop
sbb
xchg
int
add
xor
pop
jno
mov
jo
fistp
xchg
jmp
sub
dec
imul
xor
(bad)
addr16
(bad)
xchg
mov
xchg
movs
pop
xchg
xor
mov
pop
xchg
lods
aam
push
jmp
pusha
push
xchg
sub
(bad)
push
addr16
ss
shl
inc
cmp
and
xor
inc
push
lahf
movs
test
fwait
xchg
or
add
arpl
scas
bound
test
and
nop
xchg
or
mov
mov
shl
sub
call
jle
sub
push
push
pop
mov
adc
xchg
xor
cmps
sub
mov
add
das
lds
xchg
xchg
and
fcomip
fwait
and
arpl
std
push
adc
add
cwde
fst
sbb
fwait
mov
pop
cs
adc
xchg
inc
jp
jo
sbb
xchg
pusha
call
sbb
imul
fs
mov
sub
cli
xchg
cwde
bound
cmp
lea
xchg
or
inc
mov
or
push
test
ret
xchg
cmp
jmp
aad
xor
mov
xchg
push
sub
adc
pop
fs
call
fwait
dec
push
popa
sbb
inc
mov
fst
inc
pop
stc
jmp
cld
dec
test
xchg
mov
push
jb
push
dec
push
mov
pop
push
out
xchg
repnz
push
sub
cmp
stc
ds
pop
pop
xchg
cmps
dec
inc
and
sub
xchg
retf
jb
(bad)
mov
xor
dec
pop
adc
adc
xchg
jecxz
add
clc
nop
push
xchg
xchg
fisubr
dec
xchg
ins
adc
jae
(bad)
in
mul
xor
mov
add
(bad)
inc
mov
sti
pop
cmp
popa
bound
sar
shl
iret
(bad)
sbb
xor
xchg
pop
and
inc
pop
mov
pushf
xchg
push
fistp
mov
xchg
and
iret
sti
dec
inc
add
xchg
fs
in
std
sub
in
test
jns
sbb
pop
sbb
arpl
jecxz
out
js
sar
mov
aam
aam
ins
mov
cld
test
xchg
xor
mov
mov
jecxz
fld
mov
cmps
pushf
daa
imul
xchg
fs
mov
mov
mov
dec
xchg
fld
adc
xchg
jl
das
test
shl
mov
and
sbb
or
inc
pop
xchg
cmp
push
adc
hlt
sbb
xor
data16
xchg
stos
dec
mov
xchg
jae
gs
jnp
std
adc
maxps
mov
and
cld
pop
cmc
cwde
hlt
mov
xchg
fadd
sub
nop
addr16
and
cmp
adc
outs
retf
scas
xchg
mov
cdq
aam
xchg
cmp
mov
sbb
rcl
sti
imul
xchg
or
daa
add
mov
xor
rcr
dec
fdiv
call
lds
test
je
fcmovb
dec
sbb
sti
mov
add
add
pop
loopne
jb
lea
jmp
xor
pop
je
retf
xchg
or
icebp
retf
pop
xchg
lock
inc
loop
xchg
aam
mov
mov
sbb
stos
retf
pop
adc
push
inc
mov
jge
les
or
pop
je
inc
(bad)
lock
inc
pop
sub
gs
inc
mov
not
fcmovb
mov
add
mov
mov
and
lea
js
repz
mov
pusha
cmp
xchg
popf
pop
mov
add
sbb
cmp
push
aam
cmp
cdq
nop
scas
stos
fnstsw
xchg
push
(bad)
mov
xchg
xchg
xor
or
mov
ins
mov
mov
push
fadd
ret
xchg
je
aad
cmp
jecxz
int
icebp
and
xchg
sub
test
cdq
mov
hlt
jnp
gs
and
jb
jg
popf
jo
push
mov
xchg
fisubr
repnz
xchg
sbb
lds
jge
and
cs
xor
push
xchg
push
ins
inc
cdq
dec
add
test
push
loop
cmp
xchg
dec
bndldx
movs
ins
xchg
popa
mov
lods
nop
ficom
cmp
mov
pop
cli
or
xchg
push
xchg
movs
push
arpl
pop
xchg
pop
pop
das
jmp
test
fist
xchg
movs
repnz
or
sbb
jo
mov
aad
(bad)
ret
or
ror
out
inc
outs
jg
push
add
fnstenv
or
xchg
loopne
fwait
shr
in
sbb
sub
mov
mov
jl
nop
and
stos
or
movs
push
fnstsw
xchg
xchg
sar
dec
pop
adc
and
cmps
fst
shr
mov
je
fcomp
bound
push
aad
int3
add
icebp
adc
sbb
cmp
les
jne
inc
xchg
sahf
xchg
or
std
imul
mov
xor
xchg
int
cmp
sub
lahf
and
cli
stos
cmp
outs
fwait
add
les
addr16
fst
dec
jp
shl
mov
ret
data16
xchg
pop
in
sar
push
xchg
in
and
mov
or
cmc
sub
xchg
xchg
clc
xchg
popf
xchg
fcom
push
jecxz
sub
push
int
mov
xchg
xchg
iret
(bad)
mov
xchg
xchg
ror
sar
ror
ret
mov
xchg
int3
les
into
(bad)
xchg
mov
xchg
ror
xchg
sar
mov
mov
call
stos
shl
retf
mov
cdq
xchg
shl
cwde
xchg
shl
xchg
xchg
mov
scas
mov
xchg
mov
scas
mov
xchg
mov
lods
mov
mov
int3
lods
jo
xor
mov
clc
popf
fcomp
js
fsub
js
fsub
js
fsubr
js
fsubr
js
fdiv
call
pop
nop
lahf
cwde
cwde
movs
mov
fstp
scas
xchg
pushf
cmps
mov
sahf
xchg
lods
mov
mov
call
pusha
cwde
mov
lahf
xchg
cdq
rcl
mov
pop
mov
call
and
pop
mov
es
pushf
add
je
jno
push
mov
mov
sbb
inc
xor
pushf
mov
jg
xor
retf
cwde
ss
repz
mov
push
mov
xchg
adc
outs
ret
push
loop
call
push
dec
mov
xchg
xor
inc
cs
mov
mov
scas
xchg
push
or
mov
arpl
lahf
popa
cwde
push
push
ror
dec
in
push
int3
jne
and
cmp
inc
repnz
arpl
push
out
cmp
push
retf
pop
jg
cld
popa
sahf
aaa
and
adc
dec
dec
hlt
divps
pop
pusha
add
jl
push
sub
cmp
mov
aam
mov
sbb
pop
retf
adc
jp
ret
stos
imul
pop
xchg
popf
mov
xor
cwde
and
rcl
retf
mov
retf
fsubr
es
das
adc
cmp
xchg
js
sbb
mov
inc
(bad)
mov
pop
cdq
dec
imul
retf
add
xor
stc
lahf
neg
cmp
pop
hlt
cwde
inc
and
(bad)
hlt
jmp
call
cmp
adc
dec
adc
adc
mov
mov
fdivr
pop
or
lock
mov
jb
mov
mov
and
cmps
call
mov
ret
mov
mov
ret
mov
mov
sar
nop
ins
fst
loopne
movs
push
inc
cmp
mov
mov
movs
fstp
fist
jns
jmp
xor
mov
shl
inc
inc
sahf
add
sub
xchg
and
and
sub
push
ja
jge
cs
sbb
ja
cmp
jl
popa
cdq
xchg
xchg
add
pushf
inc
xchg
nop
nop
jp
mov
mov
add
jp
daa
sti
xchg
fwait
sbb
cmps
enter
int
(bad)
(bad)
hlt
jp
mov
rcl
cwde
shl
xor
inc
test
sbb
xor
jnp
inc
cwde
push
inc
dec
dec
sub
jp
and
cmp
sahf
push
popa
xor
and
and
js
xor
xor
mov
xor
cwde
dec
mov
and
aam
rcl
push
stos
push
repnz
push
mov
ja
xor
loop
int3
call
iret
stc
icebp
adc
out
popf
mov
xchg
jbe
cmovp
xchg
loope
sahf
sub
inc
in
adc
cmp
addr16
inc
and
(bad)
vpshlb
gs
xor
lods
iret
xchg
xor
bswap
adc
lds
cwde
fiadd
sub
cs
xor
std
add
xchg
xor
push
fwait
mov
dec
jmp
data16
mov
lahf
inc
push
push
push
imul
push
jmp
mov
xchg
movs
lods
inc
leave
and
fbstp
adc
or
dec
mov
js
adc
movs
jmp
cmps
add
daa
mov
mov
push
push
mov
adc
ss
pop
mov
adc
mov
adc
xchg
aas
stc
sub
sbb
shl
lds
xchg
fwait
gs
pop
aaa
push
adc
mov
pop
inc
inc
jmp
lods
jne
adc
xor
dec
sub
inc
(bad)
stos
xchg
sub
jecxz
add
ror
inc
adc
popf
mov
test
iret
jl
inc
inc
or
fld
loope
mov
aaa
(bad)
inc
adc
xchg
mov
mov
add
or
or
adc
cld
cmp
lock
scas
xchg
into
int3
xor
mov
jae
movq
mov
xchg
cmc
xor
shr
in
pop
push
cmp
xchg
scas
cmp
loopne
inc
popf
retf
xchg
shl
jo
xchg
and
xlat
test
push
mov
xchg
in
les
xchg
das
mov
jp
inc
jne
fld
inc
mov
sbb
sbb
or
out
xor
sbb
fdiv
cmp
sbb
xchg
xchg
data16
into
jno
nop
xchg
leave
pusha
cld
xor
sbb
into
jo
mov
lods
jecxz
add
xor
std
push
ss
cmp
aam
test
push
pop
xchg
fistp
push
out
popf
xchg
(bad)
daa
fcomp
and
in
xchg
or
jae
mov
adc
inc
jmp
xchg
mov
and
push
shl
xor
in
and
ficom
repz
mov
scas
add
xor
das
adc
dec
cwde
xchg
xchg
add
pop
mov
xchg
ror
ss
and
cdq
xchg
cmp
sub
mov
or
xchg
jg
loopne
sbb
adc
rcl
test
call
ja
nop
xchg
stos
sbb
xchg
mov
mov
(bad)
and
frstor
xchg
daa
adc
test
nop
in
scas
xchg
cmp
mov
xchg
movs
call
mov
div
xchg
jge
xchg
iret
push
bound
jnp
rcl
mov
xchg
xor
sar
xchg
loop
inc
cwde
cmps
sub
mov
xor
cmp
pop
jg
stos
xchg
(bad)
movs
mov
dec
push
in
ja
jmp
push
mov
cmp
xchg
xlat
int3
test
sahf
into
adc
std
adc
movs
div
mov
xchg
ret
outs
xchg
pop
dec
xchg
push
repz
cmp
add
les
retf
pop
bound
push
rcl
cdq
xlat
fiadd
jns
sbb
push
mov
inc
adc
test
iret
dec
xchg
xchg
xor
sub
push
inc
test
xchg
ins
mov
push
(bad)
mov
xchg
mov
pop
dec
inc
sub
mov
xchg
adc
lahf
cmp
iret
outs
std
pop
mov
fs
adc
les
popf
xchg
mov
mov
(bad)
cli
cld
mov
pop
js
fdiv
xor
pop
pop
stos
mov
jne
sub
dec
add
movs
adc
xchg
mov
sub
enter
xor
loope
or
out
call
pop
in
and
add
jmp
xchg
sub
daa
push
jne
(bad)
xchg
ret
(bad)
fs
clc
adc
mov
cmp
sahf
xchg
or
xchg
cmp
adc
inc
and
je
xor
rcr
popa
aam
movs
pop
enter
pop
sub
loope
lods
fwait
mov
mov
popw
mov
popf
lahf
push
xor
and
and
je
adc
ins
xchg
iret
jp
or
jno
std
pop
xchg
push
je
fild
pushf
hlt
in
xchg
test
ins
sbb
movs
push
push
clc
aam
mov
not
pop
arpl
out
scas
dec
out
mov
mov
xchg
not
test
adc
(bad)
pop
push
nop
sub
leave
fnstcw
(bad)
xchg
and
push
ja
inc
xchg
ins
ins
(bad)
call
mov
fldcw
cmp
fsubr
xchg
ins
adc
popf
sbb
inc
sti
jno
push
push
xchg
cwde
out
xchg
cdq
pop
xchg
and
scas
mov
ja
je
inc
adc
xchg
add
or
fstp
xchg
stc
lods
jnp
mov
imul
pusha
add
pop
and
in
mov
leave
adc
mov
xor
and
stos
xchg
push
xor
lahf
or
xchg
fistp
cmp
inc
mov
iret
jnp
xchg
xchg
out
or
push
xchg
sub
adc
rcl
sbb
jno
test
xchg
pop
das
pop
cmp
push
shl
pop
inc
pop
xchg
cdq
repnz
js
adc
stos
pop
xchg
xchg
daa
jb
inc
or
and
pop
jae
arpl
xchg
retf
pop
mov
rcr
(bad)
aam
pusha
stos
dec
xchg
add
out
call
xchg
push
cmp
mov
mov
or
and
in
xchg
dec
pop
mov
je
push
xor
retf
enter
popf
jecxz
test
das
(bad)
hlt
xchg
out
loopne
push
iret
lea
mov
(bad)
fild
xchg
rcr
inc
mov
sub
pop
lea
sti
xchg
or
xchg
icebp
sahf
sub
sbb
rcl
push
lock
adc
xor
repz
push
in
dec
popa
jne
test
lods
mov
fs
mov
xchg
cmp
inc
pop
icebp
mov
pop
rcl
fisttp
dec
xchg
adc
adc
sbb
xchg
int3
mov
(bad)
data16
xor
mov
xor
lahf
xchg
push
dec
mov
leave
js
dec
xchg
jmp
sti
movs
mov
push
dec
dec
inc
(bad)
pop
and
dec
jecxz
cmp
pop
fsubp
inc
or
xchg
and
xchg
adc
push
inc
xchg
jae
mov
imul
add
mov
mov
or
xchg
ins
dec
or
xor
inc
loope
cmp
stc
cli
ja
ficom
fidiv
mov
test
sub
xchg
fst
xchg
sub
out
adc
mov
(bad)
mov
rcl
add
loop
stos
xchg
jno
dec
cli
cmp
out
jb
jg
fwait
es
pop
inc
or
mov
mov
mov
xchg
push
ins
fdiv
fwait
xchg
pusha
xor
mov
dec
xchg
jecxz
test
xchg
js
cmp
not
cmps
sbb
add
leave
popf
push
arpl
dec
fadd
popf
cmps
hlt
mov
push
sub
mov
inc
jmp
inc
add
add
jg
push
xchg
push
(bad)
mov
sub
xchg
leave
jl
(bad)
mov
cmp
pushf
push
jbe
outs
or
and
in
push
pop
ss
aas
int
scas
ret
xchg
pop
push
cwde
sti
not
nop
mov
pop
mov
mov
jne
movs
xchg
jle
fcomp
or
xchg
jbe
arpl
gs
sbb
aaa
rcl
pop
jecxz
sar
cmp
xor
jno
std
pop
popa
push
push
ds
xchg
test
(bad)
mov
mov
lods
pop
xchg
mov
cmp
cs
retf
xchg
adc
repz
jno
in
xchg
xor
push
cmps
jns
jb
push
rcl
loopne
leave
mov
in
mov
mov
xchg
std
pop
lock
ins
aam
inc
test
in
jg
ror
adc
pusha
bound
sbb
jmp
dec
push
and
mov
pop
enter
push
adc
mul
imul
push
addr16
cmp
(bad)
rcr
push
lea
dec
mov
and
xchg
jmp
jno
lods
dec
nop
rcl
mov
and
push
mov
xchg
(bad)
test
loope
xchg
ret
mov
fbstp
sar
jge
sbb
xchg
xchg
mov
add
sbb
mov
imul
rcl
dec
jno
jmp
pop
jne
inc
(bad)
jecxz
xchg
pushf
push
jb
cmp
inc
fcom
fwait
lock
aas
test
sub
fcomip
ss
xchg
stos
jmp
fwait
dec
xchg
imul
pop
sub
out
or
outs
cld
xor
daa
repnz
call
jg
inc
cmps
fstp
ins
cld
loop
pop
sub
mov
inc
hlt
in
sub
jp
xchg
clc
dec
xor
or
ds
jg
inc
xchg
add
sbb
cwde
and
or
cdq
jmp
push
in
sahf
pop
xchg
sbb
push
or
and
xchg
out
xchg
retf
repnz
push
or
sbb
dec
aam
rol
dec
leave
pushf
sbb
or
jns
(bad)
adc
push
iret
xchg
adc
mov
sub
mov
lock
stos
and
ficomp
out
mov
pop
inc
pop
mov
adc
leave
lods
jl
lahf
fcomp
adc
add
test
mov
lods
mov
or
movs
(bad)
push
mov
lods
inc
push
or
(bad)
and
xchg
lock
push
cmps
xchg
in
daa
xchg
mov
jg
xchg
mov
sbb
and
aam
lock
pop
xchg
dec
repnz
fcomp
jno
xchg
xor
add
xchg
pop
mov
jecxz
xchg
jp
xchg
add
jge
push
dec
fst
aad
pop
xchg
imul
rcr
push
adc
xchg
push
out
xchg
or
std
lods
scas
aaa
add
xchg
out
shl
dec
div
ins
fsubrp
cmp
xchg
xchg
inc
sbb
jo
sub
mov
leave
mov
mov
int3
pop
sub
sahf
lods
xchg
sub
rcl
out
or
or
xchg
push
adc
lahf
xchg
(bad)
jecxz
int
dec
pop
iret
xchg
data16
inc
(bad)
mov
cmp
mov
je
adc
adc
addr16
mov
push
sub
hlt
mov
sti
lea
xchg
ds
add
stc
in
sub
jmp
xchg
clc
leave
pop
(bad)
in
cmp
retf
shr
(bad)
arpl
aad
lahf
xchg
xor
out
sbb
xchg
inc
stos
lods
call
je
adc
xchg
mov
pushf
and
jge
aaa
xchg
jmp
adc
lea
int3
jmp
adc
inc
bound
pop
rol
cwde
mov
xchg
sub
popf
xchg
xchg
mov
xchg
and
(bad)
into
mov
mov
hlt
ja
mov
jmp
xchg
jl
call
xlat
adc
aad
jnp
mov
out
jp
ror
rcl
pop
(bad)
xchg
mov
and
out
test
jg
xlat
add
stos
fwait
mov
loope
sub
mov
xchg
pop
cmps
cwde
xchg
mov
bound
fcomip
adc
fmul
ins
inc
retf
ret
push
jecxz
add
sti
jmp
aaa
pop
mov
or
imul
mov
inc
xchg
fidivr
mov
mov
scas
jmp
imul
in
jae
aam
int3
inc
(bad)
call
xchg
push
scas
int
(bad)
mov
daa
xchg
mov
test
jmp
cmp
call
inc
xchg
pop
dec
dec
ret
das
push
fs
sub
aam
pop
fidivr
ror
adc
pop
or
fstp
lds
dec
jp
and
repnz
xchg
ss
stc
sub
inc
fcom
push
es
dec
cwde
xchg
adc
repz
pop
and
aaa
mov
xchg
push
les
push
popf
xchg
jg
jl
popf
pop
mov
push
mov
push
test
adc
mov
repz
mov
movs
push
jbe
imul
and
pop
jle
cvtps2pi
add
push
sbb
rcr
mov
mov
jp
mov
push
(bad)
gs
test
(bad)
mov
or
test
fbld
push
sti
xchg
aaa
push
inc
mov
xchg
xchg
mov
mov
(bad)
je
cdq
cld
mov
push
add
sbb
das
add
push
mov
dec
push
jo
adc
daa
shr
xchg
add
xchg
pop
sbb
inc
into
shr
push
or
imul
xchg
xchg
jb
es
dec
ficom
cmp
(bad)
xchg
sti
or
hlt
add
cmp
xchg
mov
lock
mov
push
sub
xchg
xchg
retf
sub
test
pop
push
pop
aaa
ror
js
jns
iret
fistp
adc
add
aam
mov
mov
inc
imul
xchg
mov
repz
inc
xchg
or
xchg
add
leave
pop
xchg
(bad)
sub
loope
pop
xchg
or
xchg
xchg
stos
jge
ss
pusha
jae
cli
movs
mov
ret
iret
xchg
clc
xchg
lods
dec
(bad)
push
loopne
xchg
mov
mov
xchg
or
(bad)
shl
je
mov
daa
xchg
pop
ficom
add
int
popf
arpl
lea
xor
nop
loope
xchg
dec
fldcw
repz
lea
cdq
lahf
je
jmp
sub
mov
call
lds
mov
xchg
pop
sub
mov
rcl
jae
mov
jl
call
fidivr
sub
repz
ins
int3
dec
lds
out
mov
gs
loopne
jne
test
lds
sbb
pop
or
test
and
push
scas
call
adc
and
pop
popf
cmp
pop
ja
cmps
bound
mov
xchg
in
in
jmp
mov
adc
xchg
mov
je
cmp
loope
jb
xchg
out
push
lods
hlt
push
and
pop
test
ret
sub
mov
jmp
mov
sub
xchg
test
aas
cwde
call
scas
xchg
out
movs
aaa
xor
in
imul
xchg
jne
sub
sti
iret
pop
xchg
adc
cmc
test
js
or
mov
mov
xchg
and
push
call
addr16
cdq
aad
push
push
dec
not
dec
pop
dec
jnp
sub
int
pop
mov
xchg
mov
icebp
fstp
and
mov
adc
xor
xchg
xor
dec
(bad)
sub
aas
and
iret
movs
cwde
out
les
xchg
xchg
mov
push
inc
outs
xchg
call
frstpm(287
into
xchg
cmp
xor
int
stos
adc
add
push
dec
inc
mov
mov
adc
dec
bound
movs
mov
mov
adc
in
pop
fwait
nop
stc
pop
sbb
nop
mov
enter
adc
jns
mov
adc
jb
call
mov
pop
aam
adc
jge
xor
bswap
in
and
xchg
sbb
sub
outs
fistp
aad
stos
mov
xchg
fnstcw
out
out
pop
shl
xor
jle
pop
xchg
xor
add
fwait
sahf
mov
pusha
in
adc
or
fcom
mov
imul
cmps
cmp
cld
data16
popa
cmp
and
and
xchg
xchg
jmp
sahf
inc
adc
push
dec
adc
mov
cmp
aas
aaa
sar
inc
mov
pop
push
or
movs
xchg
sahf
xchg
imul
jno
(bad)
fisttp
jge
adc
xchg
(bad)
ds
or
push
aam
lea
mov
jl
aam
mov
xchg
and
xchg
inc
movs
mov
or
xchg
call
or
xchg
mov
inc
out
inc
popa
and
vmovaps
add
xchg
fsub
mov
xchg
jne
stos
loope
aad
mov
js
mov
sbb
xchg
dec
call
(bad)
mov
jmp
movs
rcl
hlt
jns
xchg
ss
int
shl
xchg
jge
shl
xchg
push
movs
je
pop
pop
pusha
inc
xchg
mov
popa
fist
xchg
pop
in
mov
dec
mov
and
mov
cld
and
or
push
jbe
adc
jl
xor
sub
adc
mov
lock
xor
add
add
test
pop
(bad)
xchg
xchg
pop
xchg
push
mov
test
out
xchg
push
cs
lods
xchg
add
cmp
sub
(bad)
xchg
es
adc
jg
push
xchg
cld
or
dec
(bad)
xchg
or
test
add
ficomp
sub
inc
or
or
dec
pop
bound
test
xor
mov
hlt
data16
pop
fst
jno
inc
mov
xchg
push
push
push
pop
dec
xchg
addr16
push
push
sub
fld
icebp
adc
jp
lds
(bad)
ins
ins
cmps
ret
call
jmp
add
jne
xchg
cmp
push
mov
jp
sbb
gs
js
xchg
pop
pop
dec
jmp
xchg
lods
mov
jb
jp
fst
test
push
jmp
lds
add
addr16
outs
iret
mov
or
stos
push
pop
xchg
adc
xchg
mov
and
ret
sar
xchg
xor
cmps
mov
or
mov
scas
mov
shl
ror
mov
xchg
push
jmp
cmp
ret
cmps
xor
push
bound
femms
mov
mov
lods
stos
dec
pop
loop
xchg
not
dec
mov
xchg
jo
lahf
imul
sbb
and
cmps
mov
pop
pop
xchg
into
push
xchg
jmp
fs
enter
xor
je
cpuid
push
out
mov
je
jmp
sub
push
xchg
jmp
cmp
or
ror
aad
loopne
in
(bad)
repnz
test
imul
dec
mov
mov
xor
cmp
sahf
addr16
xchg
dec
xchg
sub
push
jg
push
mov
and
(bad)
leave
push
inc
jbe
mov
aam
outs
int
inc
xchg
sbb
lds
dec
pop
das
ret
out
push
sti
cmp
mov
cmp
and
das
cmc
movs
inc
xchg
mov
scas
icebp
addr16
bound
jno
pushf
add
pop
mov
xchg
mov
mov
jne
fs
xchg
push
cmps
xor
pop
enter
mov
cdq
dec
imul
call
loopne
or
xchg
rol
sbb
int3
mov
cmc
xor
sti
fwait
pop
dec
jge
jg
scas
and
shl
jmp
ficom
or
aaa
in
sbb
cmp
call
stos
or
dec
ret
xor
mov
inc
push
mov
dec
rol
push
das
test
ret
xchg
cmps
sub
enter
ror
xor
outs
fldcw
sti
push
adc
add
lds
mov
pop
idiv
mov
xor
inc
lods
inc
ss
pop
cmp
leave
cwde
loopne
aaa
push
sbb
xchg
mov
add
jge
xchg
mov
repnz
inc
add
cmp
ins
popf
iret
sbb
mov
aam
adc
je
(bad)
sub
jno
out
cmc
or
mov
push
ss
nop
jbe
aaa
bound
cmp
jmp
ret
jp
cs
pop
mov
hlt
mov
test
pushf
xchg
jae
hlt
adc
mov
mov
(bad)
pop
xchg
adc
adc
lea
arpl
das
pop
dec
xchg
inc
(bad)
jle
push
push
sar
fnstsw
pop
and
cli
leave
or
xchg
xchg
xchg
pushf
nop
mul
xchg
add
mov
in
movs
hlt
xchg
cmp
imul
loope
or
mov
popf
mov
xor
stc
js
xchg
sub
shl
xchg
lock
fisub
jnp
pop
es
ss
jmp
xchg
mov
retf
aam
loopne
(bad)
mov
fst
outs
scas
adc
fisubr
dec
aas
test
lds
jnp
in
jl
add
shl
and
jmp
sahf
pop
aas
cmp
sub
and
test
push
xchg
push
sub
mov
xor
adc
in
sub
test
push
into
sbb
into
dec
jns
sub
push
fs
inc
mov
bnd
sar
je
push
pusha
xchg
in
mov
xlat
cmps
jmp
jns
movs
shl
push
sbb
sar
pusha
push
popa
mov
pushf
xchg
lds
or
(bad)
fsubr
shl
xchg
mov
(bad)
jp
stos
jmp
aas
outs
adc
in
cdq
and
jge
fsubr
mov
adc
xchg
jge
nop
repz
add
or
or
sbb
popf
sbb
mov
inc
movs
lahf
in
xor
mov
aad
fwait
mov
movs
mov
xor
push
cmp
(bad)
pop
sub
sub
not
iret
and
sahf
cmp
cmps
loop
mov
cmp
cmp
jno
inc
xor
rcr
sbb
xchg
mov
aas
idiv
popf
pop
mov
fcom
xor
mov
add
ficom
(bad)
les
xchg
adc
jp
sti
lods
add
jnp
push
jb
or
cwde
push
fnstenv
fwait
ins
add
ja
push
xchg
ds
inc
call
mov
rcl
aas
into
or
ror
repz
fdiv
fidivr
xchg
add
arpl
hlt
and
dec
or
rol
and
push
or
mul
mov
(bad)
cmc
cmp
aaa
das
cdq
xchg
sti
add
inc
xchg
iret
out
mov
xlat
std
test
xchg
cdq
(bad)
xchg
or
jno
and
xchg
dec
daa
cmps
test
std
push
hlt
sahf
sub
mov
xor
or
add
inc
jo
(bad)
adc
lock
sar
jecxz
and
xchg
stos
sbb
in
cwde
xchg
cdq
fwait
and
mov
adc
shl
jnp
add
xchg
test
test
(bad)
arpl
or
hlt
ret
pusha
sbb
mov
fwait
cmps
pop
cmp
adc
pop
adc
inc
jmp
jbe
sub
dec
rcl
das
push
xor
outs
int
sar
xchg
adc
pop
jne
add
cmps
test
dec
bound
sbb
xchg
mov
cwde
int3
(bad)
aam
mov
and
pop
push
or
hlt
cmps
jge
dec
xchg
inc
in
add
lods
stos
jle
adc
std
adc
es
dec
call
xchg
xor
sub
pop
push
jae
shl
sbb
xchg
int3
adc
cmp
dec
xchg
dec
adc
gs
(bad)
xchg
test
inc
and
mov
adc
popa
xor
ins
jle
xchg
call
pop
xchg
fsub
fwait
nop
inc
vpshlw
jecxz
mov
pop
inc
sub
xor
pop
fwait
xchg
cli
sbb
loopne
aad
in
into
or
call
int
retf
xchg
pop
clc
repz
xchg
sub
pop
adc
xchg
xchg
sub
jbe
push
gs
arpl
sbb
jle
ja
mov
adc
xchg
inc
adc
push
fadd
mov
rcl
fwait
repnz
mov
xor
ds
adc
call
and
sbb
push
lods
pop
jno
cmp
jns
fwait
xchg
imul
fcmovbe
sbb
ficom
xchg
fdiv
iret
arpl
sbb
mov
xchg
jmp
dec
and
leave
test
xchg
xor
xchg
add
mov
int3
jbe
loop
jg
adc
xchg
sbb
(bad)
and
adc
adc
jle
pop
xchg
cwde
sub
push
dec
or
jle
xchg
jmp
int3
mov
or
ret
in
pop
cmps
mov
adc
test
sbb
popa
xchg
(bad)
push
pop
aam
xchg
fist
lods
cmp
xchg
adc
call
xchg
dec
xchg
inc
or
cdq
dec
xchg
ins
repz
dec
stc
repnz
jp
mov
pop
sub
push
adc
sub
sahf
lock
mov
punpcklbw
xchg
std
xchg
cli
stos
test
adc
or
inc
adc
icebp
test
xchg
push
and
cmps
xchg
cmp
xlat
test
rcl
mov
jbe
mov
es
xchg
mov
stos
icebp
push
rcl
mov
push
or
fimul
adc
inc
xchg
int
and
popf
loop
push
mov
cli
nop
adc
add
push
xchg
mov
cs
mov
test
shl
sahf
sub
push
imul
je
sub
xchg
push
(bad)
push
lods
cmp
rol
ret
pop
imul
out
pop
jmp
add
das
xchg
jnp
jle
(bad)
jg
mov
xor
test
adc
loop
loopne
or
jle
or
pop
icebp
retf
hlt
sub
gs
fimul
and
int3
inc
mov
aaa
ficomp
les
adc
inc
xchg
xchg
fwait
mov
pop
xchg
ss
pop
(bad)
leave
movs
mov
loopne
xlat
es
mov
dec
cdq
ins
fdiv
pop
xchg
arpl
fidivr
inc
adc
and
dec
fldcw
rcl
push
popf
xchg
xchg
cmps
mov
mov
and
out
in
xchg
mov
nop
or
ror
mov
into
ins
cmps
xchg
lds
jge
xchg
dec
mov
or
and
mov
(bad)
sbb
cli
fdivr
cwde
xor
loopne
push
xor
mov
addr16
(bad)
test
push
stos
int
adc
fsubp
aam
pop
dec
xchg
xchg
and
add
mov
xchg
mov
test
mov
jmp
xchg
jecxz
adc
mov
mov
mov
jmp
xchg
in
int3
icebp
xchg
push
pop
rol
sete
sub
inc
mov
and
dec
mov
cmp
xchg
fnsave
stos
pop
xchg
je
xchg
shl
sub
mov
add
fnstsw
shl
cwde
mov
cmps
in
sub
xchg
(bad)
adc
int
inc
test
sbb
xchg
scas
rol
push
outs
adc
pop
loope
jbe
mov
push
xchg
cmp
xchg
fcomp
sub
fwait
jno
xor
adc
and
xor
cmp
inc
mov
(bad)
aas
xchg
lahf
inc
cmps
jg
mov
xchg
imul
shl
add
xchg
add
sbb
xchg
fild
sub
xchg
mov
mov
and
(bad)
fwait
sbb
in
inc
ins
adc
test
or
addr16
push
ret
jg
cmp
inc
js
in
push
pop
xchg
cmp
jp
jo
add
mov
xchg
xchg
sbb
mov
out
mov
xchg
repz
in
add
push
fwait
fwait
inc
mov
pop
jmp
test
push
(bad)
ror
xlat
lds
bound
xchg
xchg
sbb
popf
push
out
ins
xchg
mov
test
aaa
jne
jmp
inc
sub
xchg
add
mov
loope
cmp
cwde
mov
adc
adc
call
add
adc
push
xchg
push
push
lahf
mov
push
mov
mov
xchg
inc
pusha
xor
pop
aaa
les
cmp
(bad)
fisttp
cld
xchg
lea
into
dec
add
and
adc
inc
push
push
adc
jns
cmp
and
push
xchg
clc
cmp
fild
out
mov
daa
sbb
leave
not
and
in
xchg
je
xor
push
xchg
jbe
xor
xchg
push
push
(bad)
push
pushf
aas
test
popa
fist
pop
mov
jge
mov
mov
js
add
xchg
dec
popa
sbb
sahf
in
mov
push
ret
shl
lock
mov
push
mov
sbb
sub
rcl
sbb
inc
bound
dec
xchg
jmp
les
xchg
loopne
fwait
adc
(bad)
pop
xchg
push
push
xchg
cmp
mov
xchg
repz
inc
adc
and
add
mov
les
xchg
adc
xchg
outs
into
adc
jb
fisttp
cli
xchg
pop
jae
xchg
pop
pushf
mov
xchg
and
mov
push
mov
xchg
dec
mov
mov
shr
daa
ja
icebp
popa
xchg
xor
in
xchg
shr
xor
jns
mov
fld
gs
jge
nop
aaa
jo
cmp
pop
inc
inc
sbb
push
xchg
dec
adc
mov
ins
cmps
retf
mov
adc
(bad)
xchg
dec
popf
stc
data16
mov
mov
pop
or
add
mov
iret
pop
and
adc
mov
stc
xchg
xchg
sub
cmp
add
dec
dec
push
xchg
xor
adc
inc
sbb
mov
fisubr
push
lods
mov
mov
mov
xchg
mov
(bad)
xchg
sub
and
pusha
mov
movs
iret
mov
jg
fidiv
add
push
jne
stos
ror
mov
adc
mov
dec
out
xchg
pushf
aaa
repz
add
scas
mov
les
jp
xor
push
stos
pushf
mov
sti
sbb
outs
aas
(bad)
lea
inc
mov
sub
test
mov
xchg
cli
sar
(bad)
(bad)
mov
inc
shl
sub
enter
xchg
sub
adc
int3
sahf
loop
jg
push
iret
pop
jbe
sub
xchg
mov
lock
pause
pop
push
dec
pop
movs
xchg
addr16
xor
mov
and
jmp
sbb
inc
push
ret
mov
outs
retf
xchg
fldenv
sbb
nop
int
retf
mov
dec
scas
scas
sbb
int3
add
adc
push
jbe
imul
addps
jno
sub
jp
pop
mov
cmp
or
inc
in
mov
je
scas
xor
xchg
sub
stos
fadd
retf
jg
adc
popf
or
xchg
push
xor
add
push
xchg
in
ror
cmps
xchg
adc
pop
or
jmp
push
js
fwait
adc
mov
xor
xchg
(bad)
test
xor
or
xchg
stos
and
xlat
sub
rep
jmp
xchg
popa
(bad)
neg
das
(bad)
cmp
adc
sbb
jmp
idiv
int
jecxz
leave
(bad)
jmp
ret
xchg
das
push
cld
ds
into
push
sti
mov
cmp
jecxz
xchg
cwde
jmp
outs
mov
ins
xor
or
fwait
shl
jp
hlt
(bad)
pop
ins
xchg
dec
sar
arpl
imul
ins
pushf
bound
mov
loope
stc
into
outs
sbb
adc
and
jnp
add
pushf
mov
mov
inc
outs
xchg
mov
es
mov
xchg
sahf
sbb
in
rcr
scas
sub
mov
xchg
inc
push
push
cmp
xchg
mul
xchg
add
movs
cs
pushf
(bad)
xchg
push
mov
jle
test
push
dec
jns
fisttp
inc
xchg
or
das
inc
or
sahf
or
cs
xchg
push
xchg
push
dec
pop
hlt
daa
or
or
adc
mov
js
xchg
call
pop
gs
retf
aaa
fwait
mov
xor
pop
push
xchg
mov
retf
cmc
mov
fwait
jno
push
xchg
repz
mov
xchg
ret
movs
je
xchg
cmc
lock
es
lea
xchg
mov
dec
xchg
mov
int
or
or
adc
or
push
adc
adc
pop
jl
hlt
(bad)
mov
sub
mov
fldcw
test
mov
ret
movs
into
out
mov
push
mov
cdq
mov
dec
mov
je
rcl
test
mov
xchg
div
shl
dec
adc
xchg
out
mov
pushf
xor
cs
adc
adc
jbe
sar
in
cdq
test
cmps
mov
imul
cmp
and
push
xchg
gs
mov
das
cmps
cmp
inc
retf
jnp
add
xchg
fwait
push
jns
fs
pop
popf
jmp
adc
mov
xor
mov
mov
pop
sub
mov
in
jno
sbb
adc
jmp
xchg
ds
scas
mov
leave
stos
div
push
outs
bound
mov
les
jns
dec
mov
adc
xchg
sub
and
jl
xchg
mov
in
jb
mov
loop
clc
mov
fstp
movs
xchg
dec
pop
mov
dec
ret
pop
adc
hlt
gs
fldcw
pop
xchg
xchg
xor
xor
iret
dec
out
sar
out
loopne
lods
add
(bad)
loop
sub
adc
arpl
mov
call
and
mov
mov
in
popa
pop
sar
adc
push
xchg
xor
sub
adc
jmp
adc
sbb
adc
outs
inc
aam
or
pop
xchg
mov
mov
(bad)
xor
out
xchg
mov
pop
dec
in
push
or
push
mov
xchg
(bad)
and
into
xchg
pop
push
mov
or
add
and
xchg
iret
enter
sub
xchg
mov
or
dec
mov
(bad)
push
pop
xor
in
xchg
inc
lock
stos
punpckhbw
hlt
pusha
dec
mov
xchg
in
dec
popa
test
xlat
xchg
mov
xchg
mov
mov
pop
out
das
jg
jle
cdq
or
xchg
push
popa
jle
jno
mov
jg
cmp
xlat
fistp
out
ins
push
and
hlt
xchg
ja
in
inc
or
movs
xchg
mov
pop
shl
pop
xchg
adc
scas
shl
iret
std
xchg
dec
cmp
sub
push
xchg
jmp
es
pop
lock
(bad)
(bad)
mov
stos
xchg
mov
mov
push
xchg
test
int
test
rcr
loopne
add
fisttp
xchg
stos
loope
jecxz
add
retf
cmovnp
or
in
push
pop
pop
xor
js
or
(bad)
pop
movs
dec
dec
xchg
ds
cwde
aas
xchg
pop
(bad)
popf
fwait
cdq
test
fwait
mov
lods
jb
js
dec
jmp
xor
or
aam
dec
ficom
mov
aam
mov
and
mov
xchg
(bad)
ret
lods
xchg
ficom
jnp
popf
xchg
push
movs
ds
sub
xchg
cli
loopne
xchg
xchg
pop
xor
cmp
adc
inc
popa
add
pop
mov
(bad)
in
cmp
imul
rcl
sbb
imul
add
jmp
test
inc
jne
xchg
stos
xchg
dec
sbb
and
adc
add
in
push
test
cdq
mov
sbb
jae
pop
aaa
xchg
(bad)
jo
mov
jne
mov
dec
xchg
scas
sahf
mov
fst
ja
or
push
jnp
xchg
mov
mov
mov
xchg
jne
icebp
xchg
xlat
pop
cmps
jae
loope
call
sub
dec
clc
mov
fisub
daa
addr16
and
dec
(bad)
mov
or
sbb
pop
into
shl
sub
cmp
mov
pop
xchg
ins
repz
call
add
ret
not
rcl
mov
mov
xchg
pusha
into
clc
(bad)
cld
xchg
mov
push
pusha
popf
or
lea
cmp
test
inc
dec
xchg
dec
sub
and
lahf
mov
sub
cmp
xchg
sbb
add
xchg
cwde
cld
and
les
pop
or
popa
add
inc
push
xchg
repnz
and
push
out
xchg
pop
add
mov
or
inc
or
mov
lea
fstp
sbb
pop
adc
xchg
mov
sbb
adc
xchg
std
mov
sub
es
retf
aas
test
xchg
enter
pusha
or
inc
in
adc
pop
mov
(bad)
and
mov
push
cmps
add
xchg
shl
pop
dec
mov
clc
xchg
push
outs
adc
jle
mov
hlt
adc
cli
xchg
sbb
retf
popf
sub
inc
ror
and
dec
inc
ss
and
xchg
call
ins
arpl
pop
mov
mov
adc
pop
mov
mov
add
jg
add
pop
mov
lahf
rol
xchg
mov
xchg
lds
movs
mov
jmp
xchg
add
jge
mov
lods
dec
loope
mov
add
xchg
jae
test
test
iret
mov
lods
jns
hlt
rcl
sub
xchg
push
into
pop
cmp
jne
jns
cmp
fisttp
xchg
jle
fyl2xp1
std
sbb
pop
xchg
icebp
bound
fwait
js
xchg
cmp
sub
sub
int
xor
cmp
pop
pop
mov
add
jecxz
xchg
inc
jge
repnz
cwde
mov
xchg
fisttp
into
ins
loopne
sbb
xchg
ror
or
mov
pop
addr16
imul
xchg
loop
mov
aam
mov
pusha
jp
dec
xchg
enter
neg
xchg
fwait
add
fs
out
stos
sub
xchg
push
jle
xchg
cmp
les
inc
push
daa
push
mov
fs
stos
imul
imul
pushf
adc
xchg
dec
test
jo
xlat
fwait
in
jnp
mov
fldcw
repnz
push
xchg
mov
sar
mov
in
leave
dec
jg
dec
loopne
fwait
cmp
hlt
push
inc
mov
inc
loope
test
ins
mov
or
adc
std
mov
ds
sbb
in
xchg
sub
mov
cmps
das
popa
lods
ret
mov
jle
adc
mov
xchg
(bad)
xchg
add
das
retf
out
inc
pop
and
and
aam
out
xchg
mov
push
cmc
fmul
fldz
xchg
sbb
xor
adc
xchg
inc
(bad)
fdivr
outs
sbb
jno
mov
push
pop
xchg
push
enter
inc
ins
int3
or
rcl
cmps
aad
and
out
pop
test
pop
add
and
adc
pushf
ins
enter
in
ja
in
(bad)
xchg
mov
mov
jne
retf
jle
jo
cs
bound
mov
in
out
fadd
mov
cmp
push
dec
ins
mov
or
push
pushf
lods
(bad)
out
not
lock
xchg
jae
iret
lahf
push
xor
mov
pop
mov
arpl
iret
mov
adc
in
push
xchg
loopne
mov
out
repnz
rcl
in
cs
fwait
push
mov
mov
arpl
sbb
shr
pop
fist
push
mov
xchg
adc
jp
(bad)
or
cmp
or
gs
retf
fs
cmp
dec
pop
addr16
loopne
(bad)
xchg
inc
in
mov
das
or
mov
sbb
mov
jg
mov
out
clc
dec
shr
jbe
pop
mov
sbb
je
lock
pop
xchg
retf
add
test
fldenv
sahf
xor
gs
cmps
mov
call
jb
xchg
inc
ja
mov
sub
cmp
push
dec
xlat
mov
pop
sbb
test
int3
push
shl
push
jnp
std
mov
iret
mov
push
xchg
test
jns
lods
imul
push
cmp
loope
mov
xchg
je
sub
jnp
mov
stos
pop
fs
pop
add
popf
xor
sub
or
into
rcl
sbb
adc
cwde
jb
sub
mov
addr16
adc
hlt
or
sub
inc
popa
js
cmps
fwait
add
std
pop
das
hlt
pusha
or
inc
repz
aaa
pop
xchg
out
pop
sub
test
xchg
stc
fidiv
xchg
cwde
mov
out
int
outs
cmps
dec
jno
xchg
mov
fs
adc
(bad)
clc
add
jne
or
es
test
cmp
scas
leave
fs
sub
es
jp
icebp
test
xor
sub
ror
pop
frstor
adc
call
lock
fwait
and
or
xchg
cli
scas
ins
cmp
jns
mov
sti
xchg
adc
inc
sbb
xchg
dec
out
fistp
xchg
aad
test
push
xor
stos
push
retf
shl
aam
retf
push
xchg
stc
call
xchg
push
adc
xlat
fisubr
cmps
add
xchg
jg
cmps
pop
xchg
imul
xor
popa
lock
adc
sbb
mov
rcl
or
dec
xchg
mov
jbe
iret
xchg
daa
fs
enter
mov
int3
push
test
pandn
fwait
test
and
movs
dec
sbb
sub
push
xchg
jp
stc
mov
xchg
mov
test
pop
cmp
xchg
jp
fist
iret
outs
(bad)
xchg
xchg
mov
pop
stc
les
xchg
xor
ds
or
fwait
inc
inc
pop
lds
sbb
sahf
sbb
hlt
adc
ror
addr16
mov
mov
pop
shufps
jmp
mov
xchg
bound
cmp
dec
xchg
sbb
popf
lock
xchg
loop
push
inc
int
lock
cmps
sbb
mov
lods
js
adc
shl
gs
xchg
jne
cld
ret
dec
jl
int
inc
push
inc
jo
pop
xchg
(bad)
retf
xchg
out
add
xchg
shr
stos
xchg
enter
push
xchg
jmp
cld
shl
xchg
int
pop
cmp
jnp
cwde
adc
mov
retf
je
ds
push
or
aas
mov
jns
push
xchg
cmp
mov
mov
push
daa
dec
leave
adc
or
pop
adc
mov
jns
rol
aam
dec
fld
xchg
and
movnti
pop
dec
sub
(bad)
hlt
mov
enter
xor
mov
test
jb
mov
aam
push
enter
xchg
scas
aaa
sbb
xor
sub
xchg
push
sbb
adc
inc
jmp
mov
xchg
pop
sbb
jle
xchg
test
inc
mov
cld
ret
jnp
enter
data16
loopne
jae
das
in
inc
(bad)
mov
test
rcl
cmp
adc
adc
and
daa
xchg
sub
ret
push
inc
aam
jmp
adc
sbb
adc
nop
mov
adc
mov
sbb
jle
xchg
jge
mov
adc
add
cmps
rol
les
and
xchg
gs
push
pusha
xchg
adc
pop
pop
push
cli
push
test
sub
std
or
xchg
pop
mov
in
xchg
jbe
fnstsw
xchg
(bad)
out
pop
sub
jge
iret
loope
sbb
retf
mov
dec
les
jnp
dec
xchg
push
test
enter
ss
cmp
xchg
scas
add
xchg
inc
(bad)
mov
stc
inc
inc
push
xchg
clc
xlat
xor
mov
push
cmp
je
inc
xchg
xor
cmc
arpl
inc
seta
and
xchg
popf
push
test
repz
adc
sbb
fwait
retf
mov
dec
movs
sbb
sbb
adc
add
cmps
add
xchg
push
xor
dec
stos
mov
jge
cmc
pop
sbb
fdivr
shl
xchg
pop
adc
iret
mov
test
pop
cmc
add
mov
xor
xor
imul
call
sub
pop
jns
aam
adc
out
push
cwde
xchg
fs
xor
call
xchg
mov
pop
xchg
push
(bad)
or
(bad)
loopne
call
cld
movs
fst
pop
xor
push
and
push
or
cmp
jl
lahf
push
int
xchg
xchg
pop
cwde
stos
loope
ins
push
pop
lods
push
xchg
arpl
and
xchg
jae
push
leave
scas
mov
es
sbb
inc
xchg
movs
jl
sbb
xchg
retf
stos
cld
nop
(bad)
cmp
xchg
push
jne
aaa
jl
ss
xchg
or
mov
scas
xchg
aas
lods
cmp
mov
pop
xchg
push
arpl
lds
mov
adc
xchg
xor
popf
cmp
ret
ins
xchg
xchg
push
test
or
rcl
sahf
xchg
xor
icebp
jl
sub
adc
xchg
loope
sbb
pop
xchg
cdq
in
ficom
pop
adc
and
add
repz
cld
add
rcl
mov
test
inc
xor
push
mov
pop
repnz
mov
mov
xor
int
xlat
fcom
cmc
pop
lods
mov
pusha
adc
ret
sub
movs
into
test
pop
pop
push
shl
or
xchg
or
enter
data16
sub
out
push
jb
mov
addr16
mov
clc
push
ret
div
shl
pushf
in
imul
mov
sbb
nop
pop
push
test
xchg
ins
scas
mov
cmps
push
retf
xchg
push
adc
cmp
pop
outs
clc
pusha
out
jbe
xchg
xchg
push
test
adc
inc
add
sahf
or
sub
ja
push
xchg
dec
iret
out
adc
push
stc
shr
xchg
jae
js
shr
pop
mov
add
lods
cmp
mov
jle
and
int3
xchg
je
jbe
jmp
dec
cwde
mov
push
mov
(bad)
fwait
and
add
dec
std
nop
xchg
sub
push
addr16
mov
adc
out
adc
xchg
idiv
mov
out
xchg
aam
ins
ss
or
cmc
es
push
test
xor
jle
xchg
cmp
sbb
xor
dec
sbb
lahf
xchg
or
push
xchg
mov
or
or
xchg
fs
jnp
mov
and
jb
adc
cld
mov
adc
mov
or
add
push
and
jne
pop
xchg
ins
rol
sar
mov
addr16
xchg
cmc
cmp
test
mov
iret
xchg
or
inc
mov
cmp
ss
sbb
xchg
push
loop
or
in
adc
adc
scas
dec
xchg
sub
cmp
push
and
jmp
ins
fisub
xchg
pop
sub
call
je
push
fst
out
mov
cmps
push
sbb
clc
je
jb
add
jg
shl
inc
shl
cmp
(bad)
and
fst
sub
cmp
cli
js
inc
das
cwde
jge
mov
jg
jecxz
xchg
es
xchg
shr
fcmove
xchg
pop
out
(bad)
sbb
and
and
aam
popa
add
daa
xchg
mov
jno
repnz
in
das
lods
cmp
cmp
jp
pop
rol
push
xor
xchg
jns
fmul
xchg
iret
mov
xor
jae
dec
xchg
pop
ja
loope
xor
mov
mov
inc
ins
inc
mov
into
cmp
(bad)
outs
jb
sub
inc
sar
shr
test
ret
out
mov
movs
jecxz
mov
dec
stc
mov
cmp
xchg
add
push
stos
xchg
out
jb
addr16
stos
xchg
sti
push
pusha
daa
mov
mov
push
push
mov
xchg
sahf
(bad)
ret
pop
xchg
cs
push
xchg
cmp
out
jb
lea
jmp
pop
sbb
nop
popf
rcl
push
pop
pushf
mov
fidivr
retf
xchg
pop
sbb
aas
scas
fist
and
push
ret
and
jno
xchg
push
enter
add
xchg
cmp
sub
push
iret
mov
adc
in
sub
scas
imul
push
jns
dec
cmps
js
jbe
push
inc
mov
icebp
pop
sbb
mov
sbb
xlat
jae
mov
dec
call
into
popa
icebp
pushf
nop
mov
popf
shr
cwde
adc
adc
hlt
xchg
mov
pop
in
fs
test
popf
enter
call
xchg
and
imul
adc
es
pop
pop
shr
adc
inc
loope
jg
jge
sahf
xor
pop
add
adc
loopne
repz
xchg
and
test
push
cmp
or
xor
or
xchg
out
cmp
leave
addr16
mov
test
push
ror
fcomp
xchg
adc
std
sub
nop
shl
jae
pop
enter
sbb
mov
jnp
xchg
ficom
cmp
xchg
add
mov
or
mov
xchg
xor
cwde
fimul
cmc
add
cmp
mov
repnz
cmp
mov
mov
lea
fidiv
sub
cmp
(bad)
out
push
popf
xor
int
and
outs
xchg
xchg
xchg
push
aam
mov
jmp
fs
cmp
xchg
xor
in
in
(bad)
sub
rol
cld
int
adc
dec
stc
push
cmps
xchg
addr16
jns
and
pop
sbb
jo
jle
xchg
dec
jae
inc
lahf
xchg
inc
mov
push
push
pushf
push
and
and
xchg
adc
retf
in
dec
inc
jb
push
fdiv
out
mov
jae
xchg
cmp
push
mov
sbb
not
or
addr16
out
ds
xchg
out
lods
xor
sbb
cli
and
add
test
push
sub
leave
jnp
rol
bnd
xchg
inc
call
mov
loopne
sub
pop
mov
retf
outs
mov
rcr
xchg
sti
int
xchg
test
add
fisub
and
clc
xchg
sub
jmp
in
xchg
gs
scas
js
dec
mov
jns
xor
jae
inc
(bad)
mov
mov
xchg
mov
mov
hlt
ret
mov
push
sbb
push
stos
pop
dec
jmp
fbstp
jl
xchg
mov
xor
(bad)
xchg
adc
ror
je
lahf
adc
adc
xchg
pop
push
fs
lds
pop
fs
loopne
adc
lods
jbe
ret
xchg
loopne
push
xchg
rcr
jo
mov
(bad)
cmp
loopne
or
test
ja
mov
aaa
sub
jne
pop
(bad)
xchg
pusha
lea
dec
loop
dec
in
sub
xchg
dec
fist
addr16
test
adc
mov
and
cmps
xchg
and
lahf
fist
xchg
in
pop
fucomi
ins
push
sbb
xchg
das
aas
mov
fnsave
dec
xchg
or
push
movs
add
pop
pop
sahf
xor
ja
adc
fcmovnu
push
xchg
cmp
icebp
es
xchg
popa
repnz
mov
jge
jae
jmp
cmp
xchg
ins
jmp
scas
and
xor
jmp
(bad)
cwde
xchg
push
dec
cmp
and
lods
xchg
cdq
std
fs
loop
sub
and
shl
scas
xchg
mov
ret
xchg
cmp
jno
sub
and
jmp
js
(bad)
xchg
jecxz
xlat
mov
aas
jbe
push
xor
push
imul
xchg
into
pop
cmc
jno
jg
(bad)
jbe
xchg
ss
push
cmps
test
loop
pop
jmp
jnp
or
inc
xchg
lods
movs
and
test
stos
xchg
lock
add
push
fxch
adc
nop
pop
xchg
fsubr
xchg
scas
cdq
push
mov
dec
fild
mov
hlt
jg
icebp
leave
jnp
jne
push
mov
sub
stos
mov
or
mov
aaa
and
gs
rcr
sar
dec
leave
test
push
inc
cmp
inc
loope
xor
imul
icebp
ja
aas
xlat
push
xchg
in
xchg
mov
mov
sbb
push
test
jecxz
dec
xchg
call
es
fwait
pusha
(bad)
push
(bad)
ins
mov
pop
ss
cmp
xchg
xor
ret
xchg
in
cmp
fidivr
(bad)
cwde
fwait
sbb
add
xchg
loop
sub
jmp
adc
jecxz
popa
gs
or
inc
fsubr
xchg
mov
xchg
xchg
je
xchg
shl
scas
mov
push
mov
sbb
lock
addr16
inc
push
xchg
and
and
add
ds
xchg
pop
inc
bound
xchg
(bad)
(bad)
dec
xlat
xchg
adc
retf
add
pop
dec
mov
mov
dec
in
pop
test
ret
stos
out
xchg
inc
sbb
pusha
xchg
popa
stos
dec
cmp
xchg
pushf
add
in
xor
scas
or
xchg
pop
mov
rol
mov
dec
imul
sub
xchg
mov
and
jbe
mov
stc
mov
cmp
test
mov
pop
mov
or
shl
push
jmp
mov
xchg
sub
imul
fidiv
cmp
adc
sub
xchg
inc
xchg
mov
mov
xchg
adc
lods
adc
pop
retf
push
mov
pushf
shl
addr16
inc
es
int
fdivr
dec
inc
xchg
cmp
sbb
cwde
ja
sti
mov
push
mov
mov
out
add
or
loope
push
hlt
scas
xchg
cdq
pslld
stc
mov
xchg
leave
mov
ds
adc
add
add
and
arpl
dec
mov
or
outs
in
hlt
sbb
xchg
sbb
lods
jno
xchg
out
dec
sbb
je
stos
jo
xchg
inc
mov
hlt
adc
in
mov
call
leave
mov
adc
adc
int
cli
or
push
loop
sbb
xchg
outs
cmp
sub
stos
in
jecxz
out
adc
dec
mov
mov
xor
cmp
xchg
lock
inc
ror
xor
scas
mov
jo
push
add
or
xchg
int
das
sbb
jg
add
mov
push
int3
pop
rcl
nop
jno
xchg
outs
outs
pop
dec
in
inc
push
or
adc
movs
sbb
mov
pop
pop
mov
(bad)
and
jl
push
xor
jo
sti
iret
stc
mov
xchg
add
int3
(bad)
jmp
fst
xchg
hlt
sbb
cmp
dec
je
or
mov
inc
or
js
push
xchg
mov
scas
not
mov
add
out
sub
push
out
or
and
aas
fist
mov
mov
mov
inc
bound
add
cmp
pop
ret
ins
into
psubusb
add
inc
pop
xchg
pop
shl
cmps
fcom
ficom
je
xchg
push
mov
lock
xchg
xchg
ret
lahf
xchg
cwde
sbb
add
pop
add
and
push
xchg
ds
xchg
sub
dec
inc
pop
xchg
mov
adc
int3
and
adc
push
sete
jno
pop
push
push
retf
jmp
push
pop
add
sbb
push
push
cs
jp
aas
mov
pop
lea
xchg
out
mov
gs
ins
or
or
xchg
fdiv
add
mov
jle
adc
dec
mov
jl
mov
(bad)
les
mov
xor
mov
jmp
movs
nop
add
inc
fs
jl
xor
dec
sub
xchg
rcl
aas
lahf
mul
xchg
mov
in
mov
test
mov
mov
xchg
xchg
jno
inc
mov
imul
das
les
ficomp
mov
xchg
sbb
mov
add
jge
rcr
xchg
sub
mov
xchg
(bad)
sbb
sti
inc
xchg
xchg
stos
js
pop
outs
sub
push
push
sub
dec
add
scas
les
push
loopne
inc
popf
push
das
cwde
adc
xor
pushw
xchg
adc
xchg
push
adc
mov
js
xchg
xchg
mov
jecxz
fwait
or
out
cmp
fst
or
leave
dec
xchg
mov
xchg
push
daa
xchg
out
fwait
adc
sub
xchg
pushf
sub
popa
xor
push
aam
or
cmp
inc
popa
out
xchg
lea
jne
xchg
std
jg
out
push
retf
push
mov
mov
inc
push
std
enter
adc
xchg
xor
dec
add
and
sub
fistp
xchg
jno
and
dec
adc
xor
mov
lea
imul
xchg
leave
inc
mov
xor
es
push
jb
pop
(bad)
adc
shl
popf
or
or
xchg
into
test
pop
ss
adc
stc
inc
cmps
jmp
xor
jmp
int
push
pop
xchg
sbb
test
mov
xchg
adc
sub
xchg
sbb
sbb
in
mov
xchg
and
repnz
(bad)
push
mov
xchg
loope
adc
fwait
push
push
nop
mov
jno
cdq
pop
adc
into
lock
pop
mov
int
in
(bad)
call
into
nop
add
lea
leave
nop
pop
sbb
dec
ins
or
inc
xchg
stos
mov
(bad)
xchg
jecxz
mov
not
shr
pop
xchg
xchg
sbb
das
retf
xchg
xchg
push
add
mov
cmp
fwait
adc
add
hlt
mov
je
xchg
jne
addr16
push
clc
iret
xchg
push
push
out
test
xchg
or
cs
(bad)
mov
fcomp
into
inc
jp
xlat
xchg
je
cdq
mov
pop
adc
push
xchg
mov
aam
pop
mov
repz
jecxz
sub
jo
adc
loope
dec
push
lds
jecxz
mov
movs
inc
add
add
push
and
daa
adc
dec
pop
xchg
and
dec
mov
pop
adc
clc
add
pop
jp
xchg
push
sti
add
dec
xchg
fisttp
push
ins
xchg
std
int3
xchg
cmps
pop
(bad)
add
mov
in
cmp
xchg
loop
mov
int
add
dec
sub
push
not
fwait
jecxz
aaa
pop
xchg
mov
cmp
ficomp
lahf
mov
xor
fbld
in
xchg
outs
sub
push
mov
add
mov
and
lock
lahf
xchg
retf
fisubr
adc
test
xchg
bound
or
xor
scas
in
mov
cli
aam
adc
inc
mov
mov
jb
mov
lahf
pop
mov
adc
inc
fcomp
xchg
es
inc
mov
xchg
push
cmps
fbstp
in
mov
mov
outs
push
popa
sti
stos
xchg
aam
or
lods
mov
push
push
jmp
mov
inc
pop
xchg
push
xchg
jecxz
mov
jmp
inc
(bad)
ins
data16
xchg
int3
mov
fwait
and
test
mov
sub
loopne
in
je
xchg
sti
jnp
ins
pusha
mov
mov
mov
pop
mov
fist
dec
std
repnz
mov
das
add
push
int
push
or
(bad)
mov
dec
push
test
mov
hlt
pop
pusha
cmps
imul
inc
btc
xchg
sbb
int
cld
lods
xchg
jae
sar
lahf
and
xchg
xor
stos
pop
in
stc
cmp
xchg
fs
in
xchg
movs
adc
or
sbb
jge
test
push
inc
mov
shr
xchg
jmp
mov
inc
xor
and
dec
xchg
fs
adc
pop
jmp
(bad)
popa
jecxz
push
ficom
cmp
fild
xchg
push
xchg
retf
pop
data16
loopne
or
sti
mov
movs
pop
mov
dec
push
mov
cdq
(bad)
adc
fld
xchg
loope
(bad)
aam
mov
add
dec
cmp
sbb
jb
std
es
inc
add
xchg
imul
or
and
cdq
jge
sub
xchg
add
or
ins
aam
push
adc
dec
adc
push
lods
jge
push
jp
stos
cli
and
xchg
pop
or
cmp
mov
xchg
sbb
lods
(bad)
xchg
bound
out
ja
(bad)
out
stos
fdiv
add
pop
hlt
gs
mov
aam
sub
fnsave
mov
mov
adc
add
xchg
aaa
xor
and
pop
inc
arpl
xor
dec
jbe
jno
outs
movs
frstor
xchg
xlat
es
mov
xchg
or
loope
int
push
adc
scas
rcl
jmp
and
lods
and
outs
lods
daa
mov
and
loopne
cdq
test
ror
jecxz
test
jbe
xor
and
xchg
xchg
hlt
div
popf
push
stos
push
aad
mov
sbb
add
mov
mov
not
xor
jb
or
je
xchg
cmp
ret
cmp
cmp
int
ds
mov
mov
fild
mov
adc
test
jecxz
cmp
xor
add
add
mov
fwait
jmp
ret
stos
inc
mov
jp
setle
arpl
in
mov
fwait
shr
xlat
cmps
or
jmp
cmp
in
sbb
bound
jnp
imul
aam
mov
lds
mov
pushf
xchg
adc
dec
inc
fcom
xchg
push
add
cmps
mov
aam
jb
in
fwait
sbb
dec
pop
mov
mov
ret
rol
xchg
add
jp
adc
int3
fcmovnu
mov
cli
sbb
(bad)
mov
(bad)
xchg
xor
je
add
xchg
stos
xchg
loope
sbb
mov
popf
in
lea
mov
cdq
lods
cmp
xchg
and
lds
inc
sar
shl
sub
in
sbb
xchg
xchg
mov
dec
jne
mov
mov
adc
cmp
add
push
loop
loopne
pop
adc
mov
or
jl
xchg
rcl
mov
imul
adc
pop
js
outs
pusha
cmp
test
xor
inc
push
add
or
hlt
shr
jns
icebp
leave
ret
fisttp
je
test
jmp
and
cmps
xchg
xor
jg
sbb
aad
or
cmc
jo
mov
gs
xor
mov
cmp
sub
jnp
xchg
repnz
in
fsubr
jne
outs
data16
push
inc
mov
dec
jmp
mov
mov
jle
mov
xor
loope
adc
data16
ins
inc
xchg
in
std
xchg
xchg
adc
mov
in
jne
mov
dec
xchg
(bad)
repnz
adc
je
xchg
dec
add
in
fwait
or
rcl
int
out
ja
pop
add
mov
xchg
adc
test
repz
adc
xchg
cmp
int
pusha
push
repnz
mov
sbb
push
xchg
mov
mov
mov
sub
xchg
repnz
in
add
add
push
pushf
jmp
lods
mov
pop
dec
fs
mov
mov
sar
cwde
jae
and
xchg
call
jmp
xchg
push
(bad)
push
outs
mov
hlt
outs
shl
add
dec
xchg
les
xor
mov
stc
in
cwde
cmps
mov
xor
cli
or
or
mov
and
xchg
pop
and
scas
sahf
aas
test
fstp
in
and
fdivr
push
push
fs
pop
xchg
mov
aad
les
mov
aas
inc
jp
out
add
or
fnstcw
loope
dec
or
ror
test
sbb
and
lock
pop
jb
dec
jp
xchg
mov
mov
fwait
mov
call
iret
jge
cmp
aaa
jge
int3
mov
xor
dec
aas
pop
cli
inc
shl
ss
ins
jae
sti
xchg
ret
movs
xchg
mov
out
mov
mov
stc
add
sub
lahf
data16
or
add
xchg
inc
cmp
sub
imul
cmp
popf
mov
cmp
mov
cwde
ss
repz
xchg
mov
cmp
add
xchg
inc
inc
mov
call
cmp
js
loope
int3
daa
mov
pusha
and
mov
xchg
bound
test
or
cmp
hlt
les
sahf
sbb
lods
add
(bad)
xchg
out
mov
cmp
pop
nop
jmp
in
loop
add
and
mov
test
adc
call
or
aam
inc
gs
mov
jge
loop
in
xchg
inc
sbb
or
int3
scas
xchg
pop
call
xchg
xchg
inc
mov
adc
dec
ret
loop
in
xchg
mov
xchg
push
adc
sbb
fcom
loope
fxtract
and
in
pop
das
je
mov
sbb
push
gs
mov
jle
xchg
sub
fucomp
mov
xchg
xchg
xlat
lahf
(bad)
mov
mov
lods
pop
xchg
mov
(bad)
cmp
scas
xchg
mov
arpl
mov
xor
(bad)
ret
mov
or
xchg
jmp
rcl
test
cmp
jb
std
sub
stc
mov
fsub
xchg
xchg
mov
shr
mov
aam
lock
add
inc
add
retf
pop
popa
icebp
push
xor
xor
push
cmp
xchg
js
loop
jb
push
and
lds
cmps
xchg
or
mov
push
jmp
rol
pusha
lea
bound
ror
repnz
shr
cld
xchg
call
fs
(bad)
into
adc
enter
mov
scas
sbb
outs
rcr
mov
fdiv
ret
adc
iret
inc
push
mov
and
ds
(bad)
inc
and
repnz
xchg
mov
je
sub
push
aas
xchg
xchg
add
(bad)
fisubr
dec
mov
je
xchg
or
xor
xchg
call
mov
mov
dec
mov
pushf
ss
test
aam
in
out
fldcw
mov
inc
mov
pop
popa
xchg
shl
xor
aaa
cmp
sub
(bad)
or
sbb
sub
mov
das
int3
mov
xchg
sbb
pop
sti
xchg
in
xchg
jl
fs
mov
test
mov
jae
pop
dec
pop
xchg
xchg
js
adc
(bad)
adc
sbb
mov
sub
cld
xchg
inc
iret
mov
and
sbb
push
loope
adc
mov
or
int3
push
pop
fadd
jne
mov
in
std
and
pop
or
rol
dec
xchg
xchg
imul
pop
in
pop
loop
in
fwait
pop
clc
test
hlt
lods
(bad)
and
or
inc
mov
movs
xchg
(bad)
mov
push
dec
int3
mov
cmp
je
adc
ss
push
fwait
shld
push
mov
out
jmp
cmp
adc
cmc
les
fs
loop
mov
je
pushf
mov
push
push
out
in
mov
add
daa
cmp
mov
pop
push
loopne
adc
(bad)
loope
cwde
mov
adc
shl
and
loopne
adc
pop
(bad)
iret
not
mov
xchg
mov
les
jmp
loope
ins
add
add
rol
xchg
nop
dec
inc
xchg
cdq
mov
ss
shr
xlat
inc
add
or
aaa
adc
sub
cwde
std
mov
xchg
(bad)
stos
push
xchg
mov
imul
mov
(bad)
out
xchg
loopne
gs
push
mov
sub
dec
mov
inc
icebp
mov
cmp
and
jnp
xchg
or
or
xchg
into
jmp
add
jo
fwait
sar
xor
rcr
(bad)
hlt
adc
lock
arpl
lods
mov
gs
jg
sub
mov
dec
pop
movs
xchg
add
lock
lds
xchg
dec
push
(bad)
push
popfw
out
push
push
mov
dec
jno
fs
add
mov
xchg
shl
xchg
cld
mul
mov
fcom
sti
xchg
push
adc
ret
or
jl
xchg
jge
dec
rcr
test
pop
mov
xor
cmp
mov
cmp
sbb
xchg
aas
jg
mov
ja
xchg
adc
and
inc
pop
dec
outs
push
jns
sbb
jge
mov
je
pop
push
sbb
xchg
jp
mov
(bad)
xchg
repz
hlt
mov
adc
pop
fcmovnbe
fwait
gs
call
xchg
(bad)
fadd
adc
mov
and
stc
inc
stos
push
gs
cmp
popa
pop
cmps
jns
push
stos
push
fld
pop
pop
ja
and
jp
and
dec
pop
xchg
out
mov
lods
xor
in
adc
mov
xlat
loopne
pop
aaa
sbb
jb
push
cmc
xchg
jle
push
inc
pop
inc
stos
xchg
xchg
cmp
push
shr
iret
dec
add
add
xchg
push
cmc
sbb
jp
std
jne
shr
adc
cmps
or
sbb
sti
js
mov
lds
dec
or
xchg
out
jge
and
rcr
cmps
(bad)
mov
lea
xchg
sahf
iret
loopne
xor
fs
mov
sbb
xor
es
outs
pusha
stos
ss
mov
push
pop
mov
inc
add
enter
(bad)
push
jg
push
in
mov
aaa
(bad)
mov
(bad)
push
or
or
sub
nop
xchg
inc
in
aaa
xchg
add
adc
retf
push
jl
xchg
and
jb
adc
sub
and
punpckhdq
or
into
dec
inc
xchg
jecxz
fcmovu
ror
mov
mov
repnz
jo
sbb
xchg
scas
int
jmp
xchg
jne
inc
and
fcmovb
inc
dec
cmp
mov
rol
stos
popf
and
xchg
push
jle
(bad)
popa
add
xchg
aad
push
or
repz
pop
pop
xchg
or
fwait
sub
retf
cwde
or
mov
pushf
cmp
xchg
cmp
cmp
retf
pop
popf
sbb
(bad)
rcl
icebp
scas
push
test
xchg
sbb
and
loop
and
arpl
jnp
ret
mov
iret
push
scas
pop
mov
test
ins
in
lock
lods
les
jno
push
mov
xchg
stos
bnd
adc
popa
push
push
mov
scas
sub
dec
xchg
xchg
bound
and
pusha
push
shl
sub
jge
mov
es
jecxz
jmp
inc
mov
mov
push
xchg
xlat
add
nop
jg
xor
into
mov
and
sub
sbb
xchg
das
sbb
sub
mov
ror
xchg
shr
repz
jecxz
add
xchg
inc
jbe
pop
and
and
sub
xchg
dec
xchg
in
or
and
mov
or
cld
gs
test
rcl
fwait
aas
neg
and
pop
gs
sbb
push
(bad)
sbb
mov
jns
dec
les
xchg
mov
xchg
shr
adc
push
xchg
or
push
(bad)
shl
aas
inc
sar
adc
mov
sub
push
and
pop
nop
mov
lods
pusha
pop
into
pop
mov
cli
out
xchg
outs
ja
sub
data16
hlt
vcvtdq2ps
mov
mov
fmulp
outs
xchg
cmp
mov
popf
xchg
sbb
add
inc
js
daa
mov
push
xchg
(bad)
into
popf
xchg
add
xchg
stos
imul
xchg
out
aaa
push
inc
xchg
mov
ret
or
xchg
cmp
pop
mov
or
mov
xlat
push
xchg
arpl
xchg
arpl
jbe
pop
xchg
jl
stos
push
dec
in
ficomp
mov
ins
jp
gs
jb
mov
ret
addr16
loop
adc
test
pop
jge
pushf
mov
lock
je
fist
jge
adc
sub
fwait
mov
fld
inc
mov
xor
cdq
push
add
in
sbb
xlat
mov
mov
(bad)
push
and
sbb
jnp
aaa
cmp
sahf
cli
jbe
push
jmp
je
xchg
cmps
mov
xor
push
mov
xchg
fidivr
lahf
out
fcom
and
push
adc
iret
xchg
es
lahf
lods
pop
ins
jne
xchg
in
aas
int3
ss
(bad)
or
jg
mov
lods
imul
fwait
icebp
xchg
scas
lahf
inc
repnz
xchg
mov
pop
and
or
loope
fs
adc
in
out
sub
adc
xor
into
pop
dec
xchg
jecxz
ficom
pop
fwait
xchg
mov
stos
sub
and
xchg
cmp
sbb
js
scas
jmp
push
xchg
rcl
or
out
mov
add
sub
(bad)
push
pop
push
fs
movs
or
jbe
popa
pop
cmp
or
(bad)
mov
jle
xchg
push
xchg
xor
xor
xchg
sub
call
push
std
pop
outs
xchg
xlat
out
mov
aaa
mov
daa
adc
inc
dec
jmp
stc
mov
fisub
es
cwd
adc
fbld
je
repnz
mov
dec
mov
xchg
push
adc
imul
int
je
clc
cmps
mov
push
imul
movs
sbb
popa
lock
cmp
add
xchg
pop
xor
(bad)
xchg
pop
pusha
adc
enter
pop
xchg
test
push
daa
mov
push
push
loope
mov
push
xchg
inc
icebp
push
mov
xchg
in
push
jmp
sar
xchg
cmp
xchg
test
mov
hlt
xchg
sbb
retf
jmp
xchg
cmp
fld
mov
lock
idiv
dec
jno
mov
sub
(bad)
xor
retf
adc
mov
xchg
xchg
clc
repnz
cwde
and
int
mov
leave
hlt
and
mov
fstp
lahf
inc
fdivr
fs
lock
cmp
enter
dec
mov
pop
sub
xchg
sbb
js
mov
stos
aam
sbb
dec
cmp
iret
sbb
popf
fcom
sahf
retf
dec
xor
mov
sub
mov
bound
inc
jb
pop
lock
jle
xchg
pop
mov
jp
xchg
jmp
cmps
xchg
leave
scas
movs
test
add
jne
pop
gs
jns
mov
push
inc
mov
xchg
daa
out
lds
loope
xchg
aad
cld
mov
sar
xchg
xor
or
sbb
test
xchg
add
std
xchg
outs
push
out
cmp
cld
cmp
je
push
les
dec
cmp
xchg
xor
aas
out
in
pushf
mov
sub
xchg
hlt
int
xchg
jmp
loope
call
aad
mov
in
bound
imul
sbb
std
sahf
stc
lahf
fdiv
js
adc
pop
xchg
and
and
and
outs
push
fwait
add
addr16
mov
jae
fdiv
loop
adc
cmp
pop
mov
inc
adc
ins
and
jne
loop
rcl
pop
clc
cmp
inc
fidiv
cmp
rcl
je
in
in
xchg
sub
mov
rol
pop
test
jp
test
sbb
rcr
xor
loopne
fwait
imul
xchg
push
add
cmp
xchg
adc
and
mov
into
xchg
sub
cmp
xchg
xchg
into
dec
xor
jo
xchg
xchg
jge
push
loopne
mov
cmp
mov
imul
bound
jb
adc
mov
sbb
xchg
fild
aas
std
or
xchg
out
adc
jge
adc
xchg
jp
pop
les
fs
xchg
gs
sbb
xchg
ror
je
(bad)
xchg
mov
xchg
scas
addr16
mov
jl
xchg
add
neg
popf
prefetchwt1
fiadd
xchg
jnp
mov
sub
pop
cli
xchg
enter
pusha
dec
sub
xchg
inc
mov
sub
xchg
mov
cmp
xchg
dec
sbb
or
movs
or
mov
and
jae
ds
mov
gs
cli
je
xchg
sub
dec
repnz
clc
and
xchg
mov
pop
mov
xchg
ret
(bad)
jmp
pop
xor
dec
sar
xchg
mov
aad
xchg
pop
dec
adc
int3
fdivrp
mov
jge
mov
bound
dec
test
mov
hlt
mov
xchg
mov
cmps
test
xchg
push
je
call
xchg
add
pop
xchg
arpl
in
jno
aam
push
ret
fld
xchg
mov
aad
jmp
bound
adc
mov
fdiv
pop
into
sbb
imul
xchg
pop
inc
xor
push
stos
jno
in
sbb
add
ror
(bad)
push
inc
lea
out
cmps
push
js
xchg
xor
sub
es
cmp
xchg
push
cmc
mov
sbb
outs
inc
iret
jae
adc
fwait
sbb
test
xchg
cwde
xor
jo
test
xchg
mul
nop
xor
imul
push
repz
jne
xchg
mov
pop
jo
fldenv
xlat
xchg
mov
pop
call
mov
sub
cmp
imul
leave
bound
shr
xchg
mov
aad
in
push
in
push
jo
adc
std
add
popa
dec
adc
aam
adc
mov
xor
scas
fwait
and
or
sub
mov
sbb
push
adc
mov
xchg
pushf
add
ins
add
or
(bad)
cli
dec
test
cmps
scas
scas
push
xchg
cld
rcl
and
aaa
repnz
inc
popf
mov
cdq
xchg
sar
xor
mov
mov
dec
pop
adc
pop
(bad)
imul
fsub
fstp
xchg
test
rcl
loopne
or
data16
cmp
jle
into
mov
sub
and
xchg
iret
int3
psllq
test
pop
sbb
rcr
and
xchg
test
mov
jle
repz
xchg
popa
xchg
rol
xor
pusha
or
std
dec
xchg
cmp
lea
lods
mov
push
(bad)
xchg
xchg
dec
mov
xchg
dec
adc
test
mov
sub
xchg
call
jecxz
popa
jp
xchg
loopne
leave
mov
scas
les
es
into
lea
xchg
jp
movs
lock
aam
mov
or
adc
or
sub
lods
inc
popa
xchg
dec
add
xchg
lea
ret
in
xchg
mov
test
mov
xor
sub
ss
shl
sbb
(bad)
xchg
movs
dec
mov
fist
push
sub
icebp
shl
fcom
pop
ds
push
xchg
jge
repnz
lahf
mov
es
jae
or
cmp
adc
xchg
mov
xchg
mov
adc
xchg
arpl
mov
pusha
gs
in
or
mov
fistp
sbb
sbb
adc
push
je
inc
push
aam
push
inc
sahf
jecxz
mov
je
ins
sbb
inc
ss
lock
push
push
pop
xchg
xor
xor
loope
pop
aad
dec
iret
ror
mov
movs
jo
xchg
jecxz
xchg
sub
stc
hlt
xchg
sub
scas
or
iret
pop
mov
mov
jo
es
loopne
jle
dec
jmp
adc
test
pop
mov
js
ror
sbb
dec
cmp
xchg
arpl
fs
mov
push
es
mov
jge
mov
bound
fsub
aad
inc
and
pop
int3
mov
repz
adc
xchg
imul
cmp
das
cmp
sti
lods
xchg
fnstsw
clc
inc
dec
je
ja
pop
or
rcl
pop
cmp
mov
and
inc
dec
xchg
sub
nop
dec
aam
or
xor
shl
scas
pop
test
lea
push
jmp
shl
ror
push
jne
es
int3
add
inc
cdq
adc
lods
inc
into
mov
imul
add
inc
xor
repnz
xchg
inc
jbe
jp
fadd
cmp
fcmovnbe
or
mov
sub
push
sub
int3
jle
or
fcmovb
jns
jbe
aam
dec
jge
add
or
push
shr
data16
mov
inc
scas
aad
out
fisubr
xchg
fsubr
dec
add
inc
xchg
mov
and
loopne
dec
xchg
xor
or
fwait
xor
cs
movs
push
sub
push
xchg
cmp
stc
jecxz
adc
loope
pop
test
mov
mov
sbb
repz
mov
dec
fucomp
cmp
imul
cmp
jecxz
adc
test
dec
shl
inc
or
cmp
dec
aaa
cmp
sbb
xchg
adc
push
xchg
push
xchg
shl
mul
xchg
push
or
js
ret
js
xchg
pop
dec
retf
dec
xor
xchg
shr
and
xchg
push
cmps
mov
lock
leave
cmp
popa
push
xchg
sub
lea
push
xchg
scas
in
movs
lods
mov
and
pop
les
ds
cmp
or
aad
out
pop
xchg
push
jae
call
xchg
(bad)
mov
cmps
sti
repnz
sbb
ror
pop
cmp
jbe
sub
clc
xchg
push
cmp
xor
ds
adc
cmp
sub
add
fnsave
or
js
aas
rcr
or
enter
adc
test
fwait
jmp
sbb
xchg
ja
mov
scas
and
adc
fwait
pusha
ins
out
fimul
xchg
xchg
mov
hlt
int
jp
jae
push
imul
add
test
push
popa
and
shr
mov
mul
sbb
clc
mov
xchg
pushf
xchg
movs
and
gs
into
cdq
fdiv
cmc
and
test
fwait
dec
(bad)
cmps
cmp
fs
add
xchg
call
retf
and
xchg
out
adc
pusha
shl
out
xchg
xchg
push
adc
jl
mov
test
xchg
inc
inc
(bad)
fist
jae
inc
and
movs
loopne
xchg
ds
mov
xor
imul
scas
iret
js
mov
xchg
nop
mov
xchg
pop
outs
pop
sub
inc
int3
xchg
xchg
mov
cli
int3
mov
push
and
loop
sub
into
mov
xchg
dec
sbb
mov
fsub
push
ds
xchg
xor
xor
pop
cmc
xchg
dec
add
in
push
xchg
mov
jecxz
aam
inc
out
lods
in
xchg
daa
mov
jbe
inc
loope
sub
shr
xchg
das
xor
cmp
mov
(bad)
or
xchg
push
ret
sbb
sbb
jb
pop
inc
jmp
xchg
loope
push
mov
xlat
mov
(bad)
mov
mov
ss
xchg
bswap
nop
xchg
popa
xchg
sbb
sbb
pop
or
or
pop
mov
aam
(bad)
pop
ret
xor
aaa
nop
in
(bad)
xchg
xchg
add
push
dec
fisttp
mov
xor
pop
iret
mov
int3
fidivr
(bad)
ficomp
mov
lock
out
cdq
xchg
cmc
push
(bad)
mov
popf
loopne
push
sahf
mov
in
ficom
jle
sbb
jl
xchg
mov
or
xchg
js
ret
dec
xchg
dec
fdiv
mov
repnz
jp
inc
push
loope
repnz
imul
repnz
or
fwait
out
mov
pushf
add
pop
sahf
les
adc
push
and
rcl
cmp
mov
rcr
test
out
or
pop
test
pushf
es
and
add
xlat
xchg
mov
push
gs
push
inc
mov
dec
or
mov
sub
pop
ds
pop
xchg
cli
pop
ja
std
mov
dec
mov
cmp
xor
mov
pop
adc
adc
fmul
movs
fcom
mov
xchg
pop
xor
ss
sbb
(bad)
xchg
push
pop
fwait
push
push
push
push
sbb
(bad)
cmovo
aaa
pop
cld
xchg
sub
xchg
pop
xchg
xchg
mov
cdq
out
and
adc
xchg
sar
loope
sub
and
mov
inc
inc
and
mov
mov
xor
dec
push
sbb
xor
push
push
xchg
mov
nop
popf
sbb
scas
mov
cwde
stos
adc
(bad)
fistp
aad
xor
std
push
mov
ins
or
test
ins
call
ror
pusha
test
xchg
je
out
sti
les
xchg
inc
data16
ror
arpl
fcomp
in
clc
push
out
ins
sar
test
cmp
cwde
and
xchg
push
add
sub
fwait
test
mov
mov
mov
neg
mov
jl
(bad)
jmp
shr
lods
stos
xchg
mov
es
fmul
mov
adc
je
xchg
inc
stos
(bad)
xchg
nop
aad
xor
test
das
xchg
neg
aas
call
mov
mov
inc
sub
jl
mov
add
pop
mov
fmul
in
xchg
cmp
mov
test
mov
not
jmp
pusha
imul
add
xchg
test
xor
dec
int3
add
test
das
dec
daa
xchg
into
sbb
adc
fstp
jl
fcomip
sbb
xchg
iret
std
mov
adc
in
add
ja
xchg
popf
add
xchg
repz
xchg
sti
movs
ss
xor
xchg
das
aam
fcmovnb
jb
loope
fiadd
je
adc
stc
test
inc
(bad)
cmc
jmp
in
adc
(bad)
xchg
sti
cli
test
jge
cmp
xchg
ins
cmp
fdivr
pop
mov
sbb
mov
pop
js
sub
ret
and
mov
out
add
mov
mov
push
stos
xchg
jle
push
mov
or
xchg
fild
aam
enter
inc
jns
jno
mov
aaa
pop
sub
dec
jmp
mov
jbe
shl
and
das
leave
adc
mov
add
xchg
sub
test
xchg
aaa
sub
shl
inc
xchg
mov
mov
js
mov
jb
xchg
fisttp
jle
xchg
mov
mov
pop
xchg
test
out
ret
mov
stc
pop
addr16
xchg
and
mov
call
call
push
loope
mov
jmp
retf
iret
inc
mov
lea
mov
mov
sub
rcl
push
pusha
mov
xor
cmp
cdq
sbb
sbb
cmp
push
push
cld
scas
and
xchg
mov
mov
dec
test
fld
hlt
pop
(bad)
mov
sbb
lock
repnz
xor
mov
jmp
loope
hlt
mov
fnstsw
xchg
pop
or
xchg
jge
cmp
or
rcl
mov
mov
adc
xchg
psubb
test
jo
js
repz
xchg
adc
dec
cmp
mov
jno
ret
push
aad
movs
jnp
ins
fisttp
shl
retf
adc
pusha
pop
out
pop
lods
in
addr16
xchg
or
cdq
mov
je
add
xchg
hlt
xor
xor
loope
push
test
inc
push
sub
into
dec
dec
jle
cmp
xchg
ins
xor
xchg
push
pop
adc
dec
cmp
or
jge
movs
pop
int
xchg
aas
cmp
xchg
enter
pop
loop
sahf
bound
pop
jbe
ss
jge
xor
popa
repz
xchg
sub
dec
stos
out
mov
aam
jg
inc
fsubr
mov
pop
stos
rcr
loop
add
xchg
pop
ror
sbb
xlat
fild
xor
push
mov
cmp
retf
or
or
mov
fnstcw
sbb
loop
mov
inc
and
fwait
les
jns
push
in
mov
push
push
jne
(bad)
fdivr
mov
sahf
mov
xchg
aam
bswap
je
test
or
push
scas
dec
push
loope
cmp
sub
mov
test
(bad)
popf
mov
sbb
xchg
je
mov
xlat
mov
mov
into
shl
sbb
mov
test
lahf
add
or
xchg
data16
dec
adc
ja
int3
pop
jge
xchg
add
or
sub
xchg
mov
xchg
loope
push
cs
out
xchg
sub
xchg
movs
inc
rcr
out
gs
push
pop
pop
ret
inc
sub
outs
adc
hlt
jnp
int3
loopne
jg
sbb
outs
pusha
jp
mov
mov
pop
stos
xor
mov
std
shl
sbb
and
rcr
adc
mul
xchg
cmp
xchg
mov
inc
stos
retf
ret
cli
xchg
idiv
cmp
xchg
mov
sbb
adc
dec
or
cmp
xor
jmp
aam
inc
or
(bad)
xchg
ret
je
dec
and
mov
mov
xor
mul
call
mov
jae
ror
imul
xchg
or
(bad)
cmp
lods
cmp
pop
xchg
inc
xchg
push
js
jo
adc
dec
dec
test
sbb
mov
push
xchg
sahf
push
leave
mov
pusha
clc
arpl
fist
xchg
ficom
dec
mov
mov
fimul
adc
jl
shr
mov
push
xchg
pop
lds
mov
xchg
xchg
xchg
adc
inc
dec
int
jbe
and
jg
and
ins
aas
cmp
xchg
pusha
add
fist
mov
jb
xchg
pop
scas
test
add
xor
xchg
xchg
mov
push
(bad)
loopne
in
xchg
dec
mov
push
cs
mov
fwait
mov
xor
sbb
dec
and
fdivr
push
mov
push
mov
jmp
fwait
push
lods
sub
popa
sub
and
adc
xchg
jl
fisttp
sub
test
ins
adc
daa
jae
fwait
call
lods
pop
inc
rcl
adc
xchg
dec
sar
cld
push
ins
mov
sbb
inc
inc
arpl
push
xchg
outs
pusha
shl
and
xchg
mov
stos
xor
iret
xor
cs
icebp
cwde
dec
jp
push
je
xchg
adc
dec
out
pop
aas
mov
mov
test
cmp
or
test
dec
js
xchg
ins
(bad)
call
retf
ret
xor
rcl
pusha
sub
cmp
jns
fs
xchg
(bad)
in
pop
xor
adc
aad
or
scas
dec
pop
aam
fstp
sub
dec
shl
pusha
gs
xchg
mov
pop
sar
xchg
hlt
fs
enter
dec
fadd
dec
mov
outs
dec
lahf
les
xchg
xchg
enter
or
rcl
sahf
iret
lds
xchg
mov
cmps
or
rcl
cmp
pop
push
mov
pop
xchg
xchg
out
test
xchg
gs
jmp
dec
xor
adc
sti
sub
push
xchg
mov
xchg
ror
retf
mov
aam
std
jle
nop
xchg
(bad)
add
xchg
movs
adc
xchg
jns
xchg
fnstcw
sti
adc
xchg
mov
test
xchg
cmp
pop
xchg
jl
xchg
aam
or
daa
icebp
repnz
or
xor
inc
push
push
pop
out
and
dec
xchg
and
inc
movs
mov
sub
xchg
ret
hlt
ins
inc
mov
xor
ror
arpl
pop
xor
mov
aam
push
lods
pusha
xchg
mov
xor
scas
jle
leave
mov
xchg
mov
push
jb
xchg
fcmovnbe
fmul
imul
xchg
jl
inc
das
out
mov
mov
xor
ss
dec
push
jne
fwait
sbb
pop
int3
jl
push
xchg
rcl
je
mov
fwait
imul
jns
loopne
sub
outs
xchg
aas
shr
cmp
cld
mov
jle
sar
pop
inc
adc
retf
pushf
sub
mov
push
out
push
pop
out
jp
loopne
cmp
inc
xchg
or
stos
adc
jns
cmp
pop
shl
(bad)
sub
sub
pushf
into
fs
cwde
and
imul
in
xchg
mov
movs
sbb
mov
sbb
ss
mov
jmp
outs
shl
cmp
cdq
das
jp
mov
fiadd
sbb
daa
iret
sbb
add
xchg
lods
loope
movs
and
test
sbb
dec
inc
jle
mov
mov
and
adc
cmp
xchg
div
and
adc
das
imul
movs
(bad)
mov
retf
xchg
aas
hlt
ins
xchg
inc
shl
adc
add
cli
or
leave
xchg
and
jmp
in
mov
push
lods
pusha
xchg
sub
cmp
enter
xchg
push
jp
aam
jge
jl
lods
arpl
into
inc
fwait
or
xchg
sub
jo
inc
xchg
stc
fidiv
pop
xchg
dec
mov
out
xchg
mov
dec
inc
mov
xor
push
outs
fwait
rol
inc
add
fcomp
nop
xchg
fldcw
cmp
jle
push
ins
jmp
fwait
lds
sbb
lods
add
xor
sbb
shr
bound
mov
mov
push
pop
xchg
shr
jmp
sbb
mov
loope
test
sub
out
outs
adc
lea
cmp
cmp
sub
xchg
dec
sahf
add
test
int
add
clc
push
fwait
and
addr16
dec
fwait
in
sti
xor
cld
aam
inc
mov
lds
loope
add
inc
and
iret
lods
test
(bad)
rcr
aam
inc
in
jmp
cld
mov
imul
xor
cmps
xchg
fs
mov
fisub
imul
pop
cmp
xchg
leave
fdiv
pop
sbb
push
inc
outs
or
not
stc
mov
test
push
adc
ins
bound
icebp
out
into
pusha
lea
push
cmp
xchg
lods
and
fcom
sbb
add
dec
js
pop
inc
push
xchg
shl
push
jo
mov
xchg
dec
cli
dec
xor
loopne
add
in
je
xchg
stc
or
std
test
add
int3
sbb
ins
and
adc
mov
call
xchg
cmp
xor
xchg
pop
enter
dec
fs
sub
test
jo
add
rcl
ret
mov
stc
pop
xlat
sbb
push
cmp
xchg
repz
xor
mov
sbb
xchg
hlt
in
lock
fisttp
es
js
popa
mov
setb
mov
shl
push
aas
jmp
fs
push
xchg
xchg
cdq
test
cld
sub
fwait
out
pop
sub
shl
push
mov
dec
fcom
mov
mov
test
jmp
loop
push
imul
xchg
stos
adc
es
sbb
mov
or
in
pop
aam
mov
fwait
jg
dec
dec
das
je
adc
or
sar
xlat
aas
adc
xchg
rcl
lahf
lahf
jl
in
in
mov
xchg
loopne
xchg
sub
sahf
cmp
test
lea
js
adc
cmp
mov
pop
mov
xchg
mov
jo
test
inc
ins
xor
loope
push
jmp
jae
xchg
push
and
push
mov
dec
dec
mov
neg
sbb
jno
popf
add
call
cmps
cmc
rcl
and
xchg
popf
mov
xchg
jae
mov
jbe
rcl
lahf
cmp
clc
les
inc
in
xor
adc
addr16
add
push
call
jae
loopne
std
shl
push
out
lock
push
xchg
dec
mov
call
adc
mov
repnz
adc
add
test
lds
daa
lods
adc
das
data16
xchg
test
stos
mov
xchg
adc
arpl
adc
nop
pop
xor
adc
cmp
out
pop
test
pop
inc
xchg
jbe
mov
repz
outs
fwait
sub
leave
pop
jle
xchg
ret
aam
ins
retf
xchg
popa
pop
jg
lds
jmp
mov
add
push
xchg
sbb
pop
inc
mov
add
test
(bad)
mov
loop
nop
in
cmp
in
cs
lahf
test
sti
jle
jg
xchg
out
dec
xor
lds
and
jl
jmp
sbb
adc
ins
scas
pop
push
xor
adc
sti
aad
mov
loopne
cld
mov
aam
ins
sahf
xchg
je
adc
loopne
cmp
inc
int
cmps
fwait
scas
dec
bound
jl
leave
mov
imul
sti
push
gs
cmp
pop
mov
dec
fisubr
xor
xchg
fisub
rcr
xchg
addr16
loop
rcl
mov
mov
push
inc
and
mov
sub
mov
bound
dec
xchg
adc
out
mov
mov
mov
ds
xchg
(bad)
cs
iret
xchg
add
cdq
in
in
scas
xchg
inc
mov
cwde
call
stos
xchg
enter
xchg
sbb
or
xor
dec
js
stos
xchg
xchg
dec
aas
ins
lock
call
xchg
jne
mov
jns
hlt
cmp
fnsave
push
push
xchg
icebp
xchg
mov
mov
dec
xchg
ja
pop
mov
fwait
pop
in
pop
out
or
mov
popf
mov
enter
and
test
xchg
mov
movs
sar
dec
pop
xchg
lea
mov
and
xchg
fdivr
mov
cmps
fcom
cmp
outs
aaa
xor
xor
pop
cmc
xchg
in
sar
jns
fsub
icebp
int
mov
ret
lods
std
and
pop
ret
fbstp
xchg
into
out
xchg
movs
inc
js
mov
xchg
lods
and
pusha
xchg
and
data16
xchg
mov
retf
test
xchg
dec
movs
xor
in
or
idiv
dec
push
adc
dec
sub
xor
pop
cmp
push
fsub
test
je
lock
dec
into
cwde
adc
(bad)
xchg
mov
push
mov
xchg
and
dec
das
mov
stos
xchg
fdivr
shr
cwde
scas
test
cmp
xchg
jmp
cmps
(bad)
sub
(bad)
(bad)
rcl
xchg
mov
xchg
call
in
retf
xor
mov
outs
mov
xchg
stos
dec
jbe
jno
sub
fwait
jb
pop
mov
jnp
cli
(bad)
xchg
int3
mov
bound
mov
enter
xchg
xchg
aas
adc
mov
cmps
loop
inc
stos
push
adc
xchg
cdq
cmc
xchg
jae
ds
movs
mov
adc
stos
es
out
push
retf
rcr
xchg
pop
inc
subps
push
xchg
add
lea
jmp
sbb
xchg
adc
adc
nop
xor
jmp
xchg
sbb
ss
mov
test
mov
sub
ins
jge
mov
fs
pop
mov
push
mov
xchg
dec
xor
adc
push
sub
inc
or
mov
mov
repnz
push
outs
fsub
dec
cmps
inc
xchg
adc
pop
push
int
xlat
mov
aam
neg
fwait
addr16
add
push
and
pop
or
add
sub
jo
ds
loopne
lods
adc
pop
fcomp
jl
mov
xor
xchg
scas
repnz
xchg
movs
out
cmp
xchg
mov
push
mov
aas
iret
xchg
and
test
(bad)
dec
daa
addr16
xchg
mov
jmp
pop
xchg
adc
aad
cmp
mov
iret
aam
xchg
jno
jae
fcom
inc
mov
xchg
or
or
les
lahf
xchg
xchg
push
sbb
cmp
neg
and
scas
sbb
icebp
pop
movs
sar
pop
aaa
xchg
cld
xchg
adc
cmc
je
scas
mov
sub
in
jo
rcl
sar
fwait
out
pop
and
jg
xchg
jo
mov
pop
xchg
in
mov
xchg
clc
inc
mov
out
stos
loopne
pop
xchg
lahf
jbe
and
imul
test
sub
(bad)
adc
mov
call
xchg
mov
call
test
stos
loop
movs
xor
aas
cmp
fs
dec
jmp
outs
inc
es
daa
mov
inc
out
pop
push
xchg
data16
mov
ins
dec
adc
loopne
mov
push
(bad)
sbb
xor
or
push
pop
popf
xchg
enter
xor
pop
mov
dec
fwait
das
sahf
bnd
xor
inc
or
xchg
int
arpl
push
(bad)
and
out
pop
fwait
daa
out
outs
jp
fmul
xchg
lahf
or
push
call
mov
test
or
loop
fwait
xchg
xor
or
popf
in
xor
call
arpl
mov
adc
imul
fcmovne
cmp
into
cli
xchg
jmp
push
dec
leave
outs
iret
mov
retf
lahf
xchg
pop
in
jmp
sbb
dec
mov
hlt
rcl
sbb
sbb
add
shl
ror
sbb
sbb
loope
pop
cli
mov
sahf
xchg
jns
icebp
cmp
mov
rcl
in
add
pop
cmps
in
xchg
xchg
fnstcw
(bad)
sub
or
jp
dec
pop
mov
jnp
cmp
out
xchg
xor
test
pusha
xor
xchg
or
push
mov
xchg
sahf
rcl
jmp
inc
movs
adc
cmp
xchg
pushf
rol
jnp
dec
aad
xchg
jo
popf
adc
jecxz
jge
add
mov
es
jmp
xchg
add
js
lahf
shr
cld
adc
adc
stos
jge
jl
sbb
les
mov
bound
or
xchg
mov
and
sar
xchg
int3
jno
ss
shr
add
je
mov
mov
xor
stos
cmp
xchg
xchg
jg
or
fwait
mov
hlt
adc
das
ficom
shr
mov
jmp
je
aaa
popf
sub
mov
fs
aad
and
mov
inc
and
xlat
lea
xchg
ins
in
sti
repnz
cdq
inc
xchg
cld
int3
clc
call
xchg
dec
dec
mov
dec
xchg
test
dec
into
aam
xor
adc
adc
ss
loop
mov
sbb
pop
and
xchg
push
aam
cld
or
cs
cmp
inc
pop
push
xchg
push
dec
in
or
dec
push
push
add
xchg
xchg
scas
lods
xchg
mov
xchg
sbb
inc
pop
xchg
jbe
outs
or
xchg
cwde
(bad)
rcr
stos
adc
js
unpcklps
mov
stc
or
xchg
ret
nop
pop
int3
push
xchg
fsub
fwait
imul
addr16
gs
inc
pop
inc
aam
in
loop
xchg
and
inc
adc
mov
test
(bad)
int
xor
mov
jl
xchg
shr
retf
(bad)
inc
xchg
push
scas
dec
in
xchg
sti
adc
add
retf
jle
dec
in
or
xchg
aaa
cmp
xchg
sahf
cmp
shl
mov
icebp
push
push
repz
dec
outs
adc
jns
pop
mov
add
add
call
pop
aad
cmp
jl
inc
fmul
cs
xchg
or
mov
iret
adc
xchg
pop
add
dec
xor
sub
sub
push
dec
fistp
and
mov
(bad)
(bad)
mov
sti
xchg
jno
sbb
or
out
xor
dec
bnd
(bad)
loop
pop
retf
loope
repz
sub
or
rcr
loop
or
sbb
sbb
jmp
push
mov
jae
or
int3
sub
pop
xor
push
xchg
iret
cmp
rol
xchg
retf
out
dec
sbb
cmp
leave
xchg
dec
call
stos
jo
sbb
jns
std
pop
ja
xchg
add
dec
loope
xchg
das
add
data16
arpl
dec
lea
mov
xlat
rcl
jp
mov
sar
xor
cmp
es
retf
cld
sbb
repz
in
xchg
add
mov
mov
clc
and
inc
cdq
jb
adc
movs
out
in
fwait
inc
sahf
pusha
push
mov
retf
add
dec
mov
xchg
xchg
rol
add
inc
fst
gs
rcl
imul
add
icebp
dec
lock
pop
sub
inc
sar
ins
pop
mov
xchg
sub
sub
and
dec
adc
jb
int
test
sti
(bad)
sub
push
cmp
(bad)
push
xor
xchg
in
fs
fwait
inc
in
int3
xor
dec
pushf
addr16
fs
cmc
shl
push
stc
cmp
push
iret
xchg
adc
pop
jecxz
outs
sub
dec
rcl
mov
(bad)
xchg
in
sub
aam
popf
jle
sbb
mov
mov
addr16
push
ror
(bad)
sbb
ficomp
dec
mov
stos
cs
stc
test
xchg
inc
adc
xchg
hlt
std
sub
sbb
pusha
in
lea
xchg
stos
retf
mov
mov
xor
mov
mov
stc
mov
mov
mov
push
sbb
call
pop
nop
xchg
jae
sub
repz
mov
hlt
scas
aam
fisubr
xchg
mov
adc
cmps
test
mov
xchg
cwde
rcr
xchg
cmp
mov
xchg
xlat
pushf
dec
cmps
xchg
into
imul
xor
scas
pop
mov
inc
call
push
repz
mov
mov
or
jmp
cmp
mov
xchg
jnp
arpl
lock
inc
sbb
repnz
dec
mov
mov
in
xlat
xchg
fwait
jl
sbb
js
je
rcl
das
loop
xchg
xchg
fmulp
repz
adc
inc
out
inc
or
or
jl
xchg
mov
pop
jno
xchg
lds
dec
in
std
fcomi
xchg
or
jecxz
(bad)
lahf
jle
push
add
das
pop
push
pop
hlt
popa
rol
retf
xchg
fadd
xchg
push
outs
jmp
add
nop
lods
(bad)
xchg
cmps
in
push
push
xchg
bound
xor
fwait
imul
int
adc
lods
or
xchg
cmp
jmp
sub
add
rcl
pop
icebp
iret
jno
adc
and
sub
xchg
inc
pop
mov
xchg
adc
rcl
adc
mov
sub
adc
js
xor
mov
xchg
cmp
dec
xchg
stc
mov
ins
sahf
xchg
in
inc
jmp
xchg
inc
je
mov
mov
les
into
sbb
add
data16
mov
in
adc
imul
cmps
mov
add
xchg
xchg
xor
jg
int3
lock
jp
in
push
call
shr
xchg
add
test
jl
mov
hlt
imul
out
(bad)
jmp
push
add
xchg
call
shl
xchg
in
addr16
aam
adc
ins
mov
inc
sbb
push
sbb
imul
fist
pop
mov
mov
adc
mov
xchg
cli
mov
push
adc
int
xchg
jns
call
mov
ud0
push
jo
(bad)
mov
mov
out
xchg
shr
xchg
out
lods
mov
and
xor
loop
fcmovb
mov
ins
or
pop
cmp
(bad)
in
xchg
(bad)
adc
fwait
mov
and
cmc
inc
into
cmp
cdq
add
adc
out
cdq
mov
daa
jo
add
push
and
rcl
cmc
jns
cmp
mov
mov
les
call
clc
sub
xor
adc
lahf
dec
pop
jp
xchg
dec
int3
pushf
jg
xchg
and
mov
aas
scas
call
idiv
jo
sbb
std
cmp
sub
call
xchg
mov
xor
(bad)
xchg
mov
mov
mov
dec
push
cli
leave
sub
push
mul
ds
add
jp
jbe
inc
lods
mov
pop
cdq
push
mov
fist
xchg
pop
pop
xchg
mov
and
int
cmps
xchg
ret
sub
jle
or
mov
lea
repnz
shr
sub
xchg
xor
pushf
jae
cmps
jle
xor
cld
xor
outs
retf
xchg
adc
in
sub
jecxz
add
add
sbb
cwde
inc
clc
xchg
xchg
inc
jp
dec
gs
xchg
inc
mov
ret
xchg
cmc
mov
aam
xchg
xor
test
adc
lahf
mov
push
sub
xchg
es
cmp
or
movlps
scas
xchg
and
xchg
out
push
shl
int3
mov
call
ds
mov
sbb
(bad)
int3
cdq
scas
push
pop
and
mov
fld
in
mov
icebp
call
jns
fldcw
xchg
pushf
or
and
es
xchg
push
cmp
push
sbb
shl
shr
ret
xchg
sbb
(bad)
mov
push
push
and
adc
ret
jle
inc
xchg
sub
aaa
arpl
stos
sub
pshufw
xor
sbb
xchg
ret
lods
shl
hlt
popf
cmps
mov
scas
adc
(bad)
aaa
or
out
inc
movs
gs
inc
xchg
jmp
jl
mov
adc
popf
(bad)
push
in
movs
mov
mov
sub
mov
cmp
cmc
pusha
add
xchg
mov
mov
movs
xchg
cdq
mov
push
add
mov
dec
cmc
mov
lods
push
push
xchg
cmp
std
inc
xchg
scas
ins
mov
pusha
mov
adc
jae
cdq
not
xchg
lds
jns
cwde
pop
xchg
out
push
fwait
xor
(bad)
xchg
mov
push
sub
mov
jmp
push
dec
add
xchg
cmp
xchg
mov
dec
in
push
xchg
inc
add
les
fild
mov
inc
pop
cmps
pop
mov
test
xchg
or
sub
jecxz
xchg
inc
push
ss
mov
xor
push
xchg
ret
sbb
jg
lock
pusha
add
(bad)
daa
call
cmps
xchg
(bad)
push
ins
pop
inc
pop
mov
loop
or
add
fild
retf
(bad)
adc
int3
mov
xchg
lds
mov
sbb
xchg
and
mov
adc
adc
xlat
jns
ins
or
cmp
xchg
mov
jle
jns
retf
addr16
jbe
loop
and
xchg
test
dec
adc
xchg
mov
lods
js
mov
out
mov
rcl
aad
xchg
xor
add
and
movs
test
adc
mov
push
inc
and
or
inc
in
and
sbb
into
xchg
out
or
adc
jp
xchg
xchg
je
xchg
pusha
xor
pushf
out
and
repz
(bad)
ins
adc
int3
fistp
xchg
jno
outs
retf
(bad)
sbb
adc
scas
inc
adc
sub
stc
jb
loope
ret
hlt
xor
or
sub
mov
push
jns
lahf
dec
push
cmp
jae
pop
loopne
and
sahf
xor
scas
aas
sub
xchg
fisttp
outs
cs
out
xchg
clc
call
sbb
xchg
les
push
xor
xchg
outs
mov
out
sub
sbb
mov
dec
mov
mov
jb
ja
mov
out
sub
ret
dec
pop
dec
adc
inc
xor
fwait
ins
jmp
or
mov
xor
pop
mov
popf
fimul
adc
rep
jle
sar
(bad)
xchg
jne
fsubrp
je
xchg
fld
cdq
adc
dec
movs
push
xchg
pop
xchg
push
mov
xchg
clc
xchg
xchg
arpl
or
and
in
xrelease
loopne
je
cmp
nop
daa
ins
jb
mov
ins
aaa
cmp
out
jbe
push
push
jecxz
adc
jbe
rcl
push
jmp
fwait
jo
xor
ins
mov
xor
scas
cmps
mov
pushf
add
mov
lods
je
and
test
inc
fimul
xor
or
mov
mov
loop
out
xchg
ret
push
fisubr
daa
fwait
dec
pop
and
hlt
xchg
out
jge
adc
mov
pop
sete
fbstp
sti
xchg
xchg
inc
pusha
dec
nop
fld
popa
xchg
jmp
jle
adc
cld
mov
sbb
push
pushf
cmp
push
adc
mov
push
xchg
or
xchg
dec
or
mov
xchg
(bad)
or
xchg
imul
inc
mov
bound
ror
test
xlat
ja
sub
adc
mov
fwait
movs
mov
jmp
mov
xchg
aad
sahf
cmp
mov
xor
push
scas
sbb
mov
push
and
iret
in
fimul
adc
stos
or
xchg
not
fcomp
xchg
add
rcr
cmp
mov
pop
js
nop
xchg
ins
mov
jmp
(bad)
pop
xchg
push
inc
adc
repnz
sbb
test
push
(bad)
fcom
cmp
mov
bound
dec
sbb
mov
push
jne
int
pop
xchg
neg
sbb
shl
pop
xchg
out
xchg
out
repnz
cmp
or
sete
pop
lods
mov
dec
xor
xchg
xchg
inc
cmp
jne
fwait
mov
fistp
pusha
cmp
add
push
movs
pop
xchg
clc
and
out
cmps
and
sbb
movs
xchg
push
push
rcr
xchg
ja
or
scas
mov
mov
mov
inc
jle
lods
adc
dec
hlt
dec
imul
(bad)
sti
arpl
jmp
bound
mov
fs
push
and
pop
fwait
outs
mov
mov
repz
xchg
mov
mov
adc
xchg
ds
or
or
data16
xchg
inc
push
xor
rcr
mov
je
retf
fnsave
pop
(bad)
push
mov
or
ret
out
mov
(bad)
xchg
push
cmp
fwait
xchg
fs
cli
mov
xchg
and
sbb
(bad)
and
xchg
add
mov
push
push
sar
bound
inc
stos
xchg
retf
int3
mov
mov
mov
addr16
fs
sub
in
pop
xchg
sahf
ret
push
sbb
inc
stc
fadd
pop
test
mov
in
ins
push
adc
sub
pop
add
mov
movs
and
jmp
cwde
and
push
mov
mov
xchg
es
inc
lahf
cld
inc
mov
push
push
push
cmp
enter
into
jno
sbb
pop
popf
loop
shr
adc
dec
sub
sub
call
sub
jmp
rol
enter
xchg
ss
imul
cs
test
bound
mov
jno
inc
cmc
inc
ins
mov
jae
jb
or
jg
pop
xchg
into
ja
ins
sub
mov
rcr
push
cmps
sahf
or
xchg
movs
or
ret
dec
inc
ja
int3
jecxz
jbe
fsubrp
shl
retf
push
inc
cmp
je
mov
loop
xchg
xor
sahf
jo
loope
pop
imul
stc
xchg
cmp
sub
fwait
shl
mov
xchg
js
cwde
les
lds
cmp
aas
adc
sub
mov
jecxz
aam
iret
jnp
pop
xchg
mov
mov
outs
jp
push
push
adc
int
movs
sub
jg
into
mov
xchg
sub
iret
fsub
sahf
mov
adc
and
fdiv
or
sbb
mov
jecxz
push
xchg
add
mov
cmps
je
dec
jl
(bad)
mov
fisttp
mov
xchg
in
mov
xlat
sbb
push
ror
mov
fcomp
inc
fldenv
gs
cmp
cmp
cs
pop
or
jmp
fsub
aaa
pop
inc
cdq
mov
xchg
and
push
cmp
and
ins
dec
icebp
les
movs
mov
adc
or
lods
test
adc
push
loopne
or
add
sub
add
adc
in
es
and
dec
add
mov
and
inc
jecxz
jo
ret
xchg
inc
add
jmp
xchg
js
ja
mov
retf
pop
dec
or
test
stos
mov
fist
stc
jo
aam
sub
pop
pop
les
adc
sbb
dec
call
add
pop
xlat
sti
xchg
add
pop
xor
or
xchg
cmp
aam
dec
pop
xor
push
in
xchg
mov
out
add
int
xchg
add
jmp
sti
push
pop
jb
fcom
jl
scas
mov
sub
dec
xchg
aad
xchg
xchg
pop
adc
cmp
xchg
cmps
out
jbe
inc
and
fcom
xchg
scas
fadd
dec
jns
jmp
imul
sub
xchg
xor
mov
int
xchg
pushf
in
popa
sub
adc
movs
test
test
shl
adc
retf
add
loopne
movs
int3
aas
int3
adc
shl
xchg
cmps
or
aam
xchg
daa
dec
and
shl
fwait
in
mov
inc
push
int
push
test
dec
pop
(bad)
call
cmc
xchg
ins
pop
push
scas
inc
sahf
xchg
js
xor
inc
loop
fisubr
xchg
icebp
sbb
sub
(bad)
and
mov
inc
in
xchg
stos
aas
jns
or
loope
sbb
outs
aam
mov
(bad)
xchg
pop
int
loopne
aad
xchg
xchg
mov
push
test
xchg
add
dec
rcl
(bad)
cli
cmp
int
xchg
push
mov
sbb
ss
adc
xlat
hlt
cmp
fisubr
aad
xchg
cmp
sub
push
pop
pop
adc
inc
xchg
addr16
mov
xchg
push
sti
xor
dec
aad
in
in
jno
shr
jmp
test
mov
xchg
addr16
fld
xor
pop
adc
leave
pop
mov
mov
pause
push
cmp
add
add
mov
fcmovne
xor
loop
sbb
unpcklps
xchg
dec
jns
test
add
xchg
(bad)
push
dec
(bad)
sub
lds
daa
aam
std
aas
(bad)
adc
cmc
sti
dec
(bad)
fldenv
pop
stc
rcr
jne
and
xor
mov
(bad)
dec
xor
add
jns
leave
cld
pop
xchg
jl
sub
(bad)
aam
pop
push
push
xchg
bound
push
or
mov
add
not
mov
daa
retf
inc
mov
out
pop
and
ret
jo
int
cwde
push
fwait
mov
sub
xchg
mov
jno
mov
scas
ret
or
lahf
pop
mov
inc
dec
push
nop
sbb
mov
sti
outs
add
adc
inc
mov
scas
loope
add
cmp
cmp
scas
call
or
cmp
pop
dec
movs
jmp
jg
sbb
or
test
cmp
stos
xor
retf
push
adc
ja
xchg
add
xchg
call
icebp
ins
test
loopne
sahf
adc
les
xchg
call
cmp
hlt
mov
xchg
test
jb
xchg
pop
add
mov
repz
adc
test
cmps
cmp
dec
mov
and
and
xchg
xchg
pop
fiadd
jle
cs
retf
sbb
or
cmps
in
int3
xchg
addr16
not
pop
rep
and
pop
push
jne
jecxz
jb
mov
mov
jns
rcl
dec
xchg
scas
movs
push
push
cmps
mov
pushf
test
aam
xchg
xchg
sbb
das
mov
fcomp
lea
push
into
cld
mov
push
xchg
retf
pop
adc
nop
mov
push
mov
mov
ret
rcl
or
xchg
xor
xlat
sub
les
pusha
push
imul
jnp
xchg
rol
cmp
sbb
push
sti
lds
lahf
pop
xor
xchg
retf
pop
sbb
fsubr
lock
fwait
jnp
popa
adc
les
inc
sub
imul
aas
fild
add
xchg
sbb
nop
hlt
pop
out
and
xchg
xor
pop
lahf
into
data16
call
or
aaa
fwait
mov
je
mov
ficomp
adc
loope
xor
fisubr
mov
mov
movs
and
mov
imul
ja
jns
aas
retf
jmp
mov
adc
or
das
stos
xor
js
xchg
inc
mov
cmp
mov
or
xlat
or
cmp
xchg
mul
lods
or
cmp
mov
xchg
xchg
pop
xchg
mov
xchg
jns
xor
lods
leave
dec
xchg
sar
in
retf
sbb
xchg
test
sbb
xchg
mov
std
hlt
dec
xchg
dec
fld1
iret
rol
adc
les
dec
int
pop
xor
or
adc
push
(bad)
pop
xchg
or
push
xchg
(bad)
jns
dec
enter
xchg
xor
fwait
pop
xchg
lds
popf
jns
jno
rcl
mov
dec
call
xchg
add
xchg
inc
cdq
aam
xchg
mov
sub
test
sbb
push
or
in
jg
xchg
add
dec
dec
xchg
jl
mov
shr
aas
xchg
add
cmp
xchg
pop
in
inc
mov
in
rol
add
push
ret
rol
pop
xchg
imul
xor
aam
scas
xchg
or
add
iret
ret
jl
daa
dec
jnp
xchg
xchg
cmp
lahf
xchg
pusha
out
adc
hlt
add
sbb
lds
inc
and
sub
mov
xchg
xchg
sahf
test
xchg
rcl
or
lods
push
fs
mov
dec
push
outs
xchg
xchg
inc
retf
mov
and
xlat
(bad)
int
jae
inc
xchg
jge
(bad)
je
sahf
nop
pop
xchg
test
enter
ja
je
xchg
cmps
xor
push
or
jnp
call
fnstcw
hlt
xchg
cmovs
pusha
lea
je
sub
test
xchg
pop
shl
xchg
cmp
daa
loope
repnz
push
xor
cwde
dec
xchg
lock
inc
xchg
xchg
mov
mov
add
xchg
call
mov
adc
stc
jl
loop
leave
dec
ss
push
int3
xchg
pop
inc
std
into
outs
out
aam
mov
push
jg
or
aad
imul
xchg
sbb
shl
vpmullw
cs
mov
ret
fcom
cmp
dec
out
push
xchg
mov
leave
rcl
cmps
arpl
pop
pop
xchg
dec
int
cmp
adc
shr
es
xchg
xor
aam
jle
inc
pop
stc
xchg
jmp
in
push
js
dec
lahf
push
mov
ja
jnp
mov
fdivr
je
xchg
movs
mov
mov
and
add
xor
xchg
outs
pop
out
xchg
mov
pop
ret
mov
add
stc
call
das
outs
sbb
adc
pushf
or
(bad)
adc
push
add
mov
cwde
pop
jae
clc
scas
lods
loopne
jno
xor
mov
repz
add
mov
adc
shr
mov
lods
push
mov
in
sbb
xchg
push
ds
loope
dec
stos
lods
xchg
xchg
xor
in
push
sbb
nop
adc
or
pop
mov
fwait
lds
sub
and
pop
xchg
cmps
iret
mov
lock
jecxz
jmp
(bad)
xor
adc
inc
sub
xchg
push
pop
ins
jg
cmp
mov
sbb
mov
pop
add
xchg
cmp
cld
test
fcomp
mov
push
xchg
add
dec
inc
xor
xchg
(bad)
dec
and
xchg
clc
icebp
pop
dec
outs
inc
xchg
cmps
loopne
fwait
pop
stos
or
push
inc
pop
sbb
jno
mov
into
cmp
cld
cdq
xchg
and
sub
push
mov
xchg
mov
mov
sbb
dec
pop
pop
popf
retf
xchg
loop
lods
sbb
mov
mov
aam
popa
cmp
lods
mov
jge
ss
not
addr16
push
in
fbld
push
mov
mov
hlt
std
loop
shl
xchg
sbb
ficom
cwde
xor
xchg
out
push
jg
mov
addr16
bnd
push
ror
pop
shl
or
sahf
lods
mov
je
daa
add
jmp
out
test
test
daa
xchg
mov
les
xchg
aaa
cmp
pop
xor
scas
lods
xchg
aam
add
jmp
adc
cmp
nop
int3
mov
push
sti
jae
sub
(bad)
int
mov
jo
or
aam
(bad)
ss
push
retf
push
mov
outs
jmp
xchg
pop
pusha
clc
and
mov
cli
jp
jnp
xchg
adc
push
rcl
lahf
xlat
aaa
clc
movs
xor
xor
mov
mov
dec
addr16
xchg
or
sub
fcmovne
aas
cmp
adc
xor
push
jne
dec
sbb
in
call
jmp
pop
out
mov
(bad)
xchg
scas
mov
dec
jge
sub
or
add
sub
dec
xchg
xor
loopne
ja
xchg
adc
bound
fcom
push
xchg
(bad)
mov
adc
inc
xor
hlt
xchg
push
xchg
push
push
adc
fadd
cwde
jp
jle
jecxz
mov
pop
mov
xchg
xchg
call
jae
xchg
push
mov
test
mov
xchg
push
aam
rcl
(bad)
imul
mov
rcl
call
add
dec
add
cld
repnz
mov
mov
mov
loopne
push
sub
es
hlt
popa
movs
xor
std
push
mov
cmps
xchg
fadd
and
mov
ds
test
push
push
fiadd
mov
and
sbb
(bad)
adc
xchg
test
pop
ficom
dec
add
data16
pop
or
movs
scas
in
int3
ret
mov
mov
enter
mov
loopne
push
xchg
pop
jecxz
lahf
retf
fcomp
xchg
inc
int3
or
test
movs
aas
cwde
xor
movs
xchg
inc
inc
xchg
jecxz
test
add
xchg
jo
jb
ret
push
jmp
cmp
movs
pop
in
loop
xchg
popa
cmps
push
mov
xchg
cmp
cmps
imul
movs
icebp
cwde
test
ror
lods
and
int3
jp
xchg
ret
add
xchg
fist
mov
or
mov
mov
xor
loopne
ins
push
xor
xor
movs
mov
inc
repz
mov
and
pop
dec
popa
xchg
push
mov
into
mov
mov
lds
ror
in
xor
push
in
mov
(bad)
mov
mov
xlat
iret
hlt
es
bound
mov
xchg
pop
jnp
sar
nop
ja
dec
xchg
loope
(bad)
adc
daa
pusha
or
xchg
outs
cmps
mov
jbe
pop
aaa
xchg
adc
or
mov
jnp
pop
push
pop
cs
loopne
cwde
cmps
cmp
mov
cmp
xor
aam
pop
in
jno
test
jb
lods
and
test
xlat
js
pop
xchg
int3
dec
(bad)
cmp
loopne
js
dec
aad
jnp
rcr
les
cmp
mov
stos
(bad)
or
inc
push
mov
imul
cs
outs
iret
leave
xchg
xchg
adc
push
xchg
int
fcmovb
std
dec
mov
push
push
or
retf
xchg
sbb
push
or
mov
xchg
sbb
call
xchg
iret
cwde
enter
rcl
ficomp
scas
inc
call
imul
xor
xchg
mov
test
jmp
ret
sbb
cmc
fs
sti
xchg
les
movs
and
xor
pop
push
mov
push
and
xchg
cld
ins
std
cmp
mov
adc
mov
scas
sub
rcr
pop
cwde
and
popf
or
int3
jnp
(bad)
shl
repnz
inc
or
and
shl
mov
pop
adc
mov
sar
add
loope
xor
xchg
not
out
pop
xchg
shl
jo
dec
pop
xor
cld
xchg
mul
dec
xor
ret
sub
sbb
jb
sub
mov
push
retf
pop
outs
xchg
gs
sti
outs
xchg
jmp
mov
jns
xchg
fdivr
ret
mov
cmp
xor
js
rol
adc
enter
retf
cmp
cmp
lods
inc
out
loop
je
imul
iret
pop
mov
mov
out
mov
sahf
xchg
les
and
xchg
xchg
or
xor
mov
sar
fwait
sub
mov
inc
jp
xchg
call
aam
sub
inc
outs
xchg
gs
inc
sbb
jp
cli
jbe
xchg
call
fdivr
test
nop
jbe
push
mov
adc
sub
pop
aam
xchg
gs
out
(bad)
cmp
iret
or
push
stos
cmp
pop
jmp
ret
and
inc
xchg
mov
dec
loope
xchg
fcomp
dec
mov
movs
jp
addr16
sub
out
adc
xchg
std
sub
call
add
rcr
mov
fist
pop
inc
(bad)
push
xchg
xor
adc
mov
je
ins
cmps
popf
and
cmp
lea
mov
xchg
inc
repnz
sub
xchg
and
fimul
xchg
sub
fs
add
jg
aaa
cmp
mov
xchg
ds
out
push
inc
in
mov
xor
call
out
imul
mov
dec
xchg
xor
xor
mov
fwait
shl
push
fdivr
jne
int
loopne
xchg
das
stos
mov
lea
mov
call
repz
mov
out
(bad)
jmp
and
xchg
fild
lods
dec
sbb
mov
xchg
out
or
cmp
mov
xchg
sbb
xor
ret
xchg
cmp
idiv
iret
xchg
mov
push
rol
mov
sbb
xor
cmp
xchg
inc
add
sub
mov
inc
pop
out
aam
data16
mov
xchg
dec
loope
(bad)
addr16
(bad)
popa
sub
xchg
xchg
push
sub
jg
mov
sti
cmp
rcl
loope
xchg
call
or
dec
and
xchg
add
mov
scas
imul
popf
ja
js
xchg
cmp
mov
ret
mov
aam
sub
movntq
pop
push
popa
js
push
xchg
test
lock
shl
outs
add
sub
and
adc
push
ds
xchg
adc
ror
cmp
(bad)
xchg
stc
xchg
adc
repnz
bound
sahf
xchg
shr
(bad)
into
(bad)
call
(bad)
cmc
mov
mov
repz
dec
pop
(bad)
lahf
add
cmp
mov
dec
dec
xchg
enter
jmp
push
pop
std
sbb
sub
fisub
xchg
pushf
test
sbb
pop
dec
dec
push
pop
pushf
sbb
shl
xchg
jle
lahf
fsub
jns
movs
sub
and
push
dec
sti
mov
arpl
fwait
int3
mov
adc
jne
cmc
and
inc
jnp
mov
pop
pop
stos
xchg
inc
in
jle
in
std
ss
imul
fs
(bad)
push
xchg
sbb
hlt
pop
shl
in
retf
dec
mov
test
mov
sub
push
xchg
jne
or
out
or
ror
add
sbb
jbe
test
ret
mul
adc
add
cmp
add
sbb
and
jge
cli
into
pop
xor
ins
push
rol
jo
popa
fwait
cmp
out
hlt
fs
sbb
pusha
pop
xchg
push
in
mov
add
xor
mov
push
call
push
add
and
mul
xchg
mov
xlat
xor
sar
and
clc
or
cwde
ins
pusha
xchg
rol
xchg
add
push
dec
mov
pop
movups
fld
xchg
mov
add
ja
or
jge
or
jno
sub
push
xchg
inc
xchg
(bad)
lahf
mov
add
stos
mov
jl
bound
les
push
sbb
mov
das
sar
pop
jo
je
mov
mov
and
loop
ins
shl
lea
out
mov
jge
adc
pop
in
dec
loop
xchg
neg
or
scas
pop
mov
int3
ficom
icebp
sti
sbb
inc
sbb
aam
xchg
retf
cmps
arpl
les
xchg
cli
ins
pop
jge
mov
rcl
lock
data16
xor
shl
inc
dec
bound
xchg
mov
rcr
xchg
pop
dec
mov
adc
mov
sbb
xchg
xchg
push
test
xchg
push
and
sub
bound
adc
sbb
mov
push
push
ret
pop
xchg
pushf
adc
sub
sbb
pop
or
pop
out
mov
pop
xor
push
mov
cmp
mov
xchg
fs
push
sahf
mov
shl
push
dec
xchg
sub
mov
mov
or
(bad)
daa
adc
mov
push
xor
mov
ja
jg
sbb
and
push
xchg
shr
leave
loopne
mov
mov
sahf
dec
(bad)
push
mov
xchg
das
xchg
sub
xlat
cdq
in
adc
into
adc
cmp
inc
xchg
repz
or
jo
ds
retf
inc
dec
js
xchg
test
mov
push
xchg
push
pop
stos
adc
inc
push
xchg
les
add
mov
in
es
jp
addr16
loop
out
movs
adc
xchg
mov
iret
movs
not
mov
jmp
cmp
fs
mov
mov
xor
ror
mov
sbb
mov
shl
push
pop
cdq
push
fidiv
inc
test
lea
movs
sahf
adc
imul
enter
imul
xchg
sbb
or
mov
adc
cmps
pop
cwde
push
shl
xchg
xchg
scas
cmp
mov
pop
ds
inc
and
fisub
in
or
mov
mov
xchg
daa
loope
mov
sti
sub
aad
sahf
mov
addr16
adc
(bad)
cmp
sbb
js
xchg
loop
dec
dec
jae
mov
push
mov
mov
js
call
jmp
pushf
icebp
mov
stos
adc
jno
adc
retf
retf
push
mov
or
xchg
mov
add
(bad)
std
fwait
sub
sbb
lahf
adc
ds
cwde
adc
fdivr
gs
mov
jl
mov
push
xchg
sub
(bad)
ins
fcom
or
mov
je
mov
push
lds
xchg
adc
cmpxchg
in
fiadd
mov
add
adc
cmp
adc
test
cli
xchg
push
push
mov
call
mov
in
test
cwde
mov
push
pop
ds
xchg
cmc
fs
or
popa
cmps
or
mov
mov
sbb
xor
or
jne
adc
inc
adc
popf
jo
mov
add
arpl
mov
xchg
and
test
test
(bad)
retf
dec
mov
dec
mov
pop
daa
jae
push
cmp
adc
int3
mov
out
lods
inc
mov
in
push
dec
jg
sbb
lahf
sbb
popf
adc
jge
jo
dec
xchg
mov
mov
push
cmc
sbb
jmp
dec
int3
sbb
aad
cmp
dec
aam
pop
(bad)
call
jns
sbb
adc
sbb
jnp
xchg
sahf
pop
or
int3
cs
mov
je
imul
inc
xchg
cmp
jge
sahf
or
mov
or
adc
push
(bad)
jae
inc
xchg
mov
mov
xchg
movs
pop
and
call
xchg
or
mov
inc
xchg
mov
(bad)
cli
(bad)
adc
mov
xchg
jge
push
int
in
mov
fcom
xchg
or
outs
jp
inc
mov
mov
xchg
adc
cwde
daa
data16
pop
push
stos
fst
and
das
xchg
add
out
test
mov
xchg
add
jmp
imul
pop
(bad)
out
xchg
xor
lods
in
movs
test
test
arpl
daa
addr16
or
jmp
or
fdiv
popf
push
std
cmc
add
movs
iret
or
fist
xchg
mov
repnz
xchg
mov
aas
ja
xchg
sbb
ret
imul
outs
push
xchg
and
dec
and
stos
int3
xchg
pop
mov
jmp
xchg
arpl
xor
aaa
xchg
xchg
neg
mov
jecxz
sub
or
cld
sub
les
dec
sbb
push
add
imul
adc
mov
rcr
ret
add
pop
sbb
das
scas
retf
in
in
mov
cs
sbb
mov
sbb
bound
(bad)
hlt
pop
adc
ffreep
hlt
or
pop
or
xchg
cdq
mov
xchg
stc
hlt
dec
fwait
aad
sub
loop
mov
xchg
pop
aas
fdivr
xchg
(bad)
sub
leave
outs
sbb
retf
adc
(bad)
sbb
xchg
cmp
in
hlt
xchg
into
out
mov
repnz
cmps
xchg
(bad)
lods
cli
dec
mov
mov
and
aaa
xor
retf
xchg
fwait
mov
jns
leave
and
adc
cld
cmps
test
mov
pushf
int
dec
scas
loope
in
loop
cmp
dec
les
lea
or
push
aaa
stos
sub
adc
cmc
aam
retf
add
into
lahf
xchg
test
push
scas
fdivr
xchg
and
xchg
enter
add
push
dec
pop
xchg
and
daa
jecxz
xchg
push
cld
lock
fwait
dec
bound
sbb
xchg
adc
rol
jg
cmp
outs
pushf
xchg
mov
les
xchg
or
cli
sbb
xor
jae
push
test
xchg
or
and
das
adc
hlt
sub
std
ret
mov
or
movs
nop
(bad)
xchg
cmps
xchg
xchg
sub
(bad)
pop
xchg
(bad)
aam
mov
stos
arpl
or
xchg
mov
cld
pop
in
dec
push
mov
sub
xchg
xchg
lds
mov
add
mov
add
and
js
push
adc
jbe
adc
cmp
dec
sbb
test
shr
int3
pop
ins
xchg
xchg
ds
aad
push
xchg
outs
push
sub
mov
dec
ror
mov
xchg
sub
arpl
dec
test
ds
dec
adc
push
cmps
test
je
push
movs
fld
fwait
jnp
sub
jge
xchg
ret
mov
pop
jae
adc
into
cmps
les
repnz
adc
icebp
popf
dec
(bad)
imul
push
push
xchg
and
fwait
test
ds
cdq
(bad)
adc
dec
outs
push
gs
jns
dec
xor
ins
(bad)
shr
xchg
xchg
xchg
xor
in
jp
xor
push
test
scas
pusha
loopne
icebp
fwait
xchg
pop
adc
sbb
imul
push
retf
adc
aad
xchg
rcl
int3
xor
jle
push
pop
xchg
leave
add
idiv
scas
xchg
fdivr
rol
push
cwde
imul
sbb
mov
addr16
fld
(bad)
sub
daa
xchg
fs
cmp
mov
shl
lea
setnp
add
int3
jbe
mov
hlt
int
cld
push
ja
sbb
fnstenv
imul
dec
bound
pop
adc
push
adc
sbb
sbb
mov
jae
adc
and
xchg
repz
xchg
test
retf
mov
ins
(bad)
repnz
(bad)
call
pop
pop
mov
hlt
sbb
pop
mov
jmp
pop
pand
mov
jae
xchg
das
into
and
or
(bad)
ficomp
jmp
mov
jne
in
xchg
rcr
mov
xchg
scas
xchg
popf
(bad)
fdiv
test
mov
and
xchg
das
cmp
cmps
jbe
stc
xchg
xchg
sbb
ins
xchg
sub
fstp
jne
lahf
sbb
mov
xchg
loope
xor
std
pushf
inc
adc
adc
retf
mov
xor
xchg
mov
data16
adc
xchg
gs
cmp
xchg
fwait
push
mov
or
push
xlat
sub
sbb
add
(bad)
jnp
xchg
ins
push
ret
or
pop
lds
cdq
imul
shr
mov
popa
adc
sub
adc
(bad)
xchg
test
scas
push
push
out
and
xchg
outs
push
pop
mov
push
popf
and
xchg
lods
into
lea
repz
mov
xor
loopne
stos
xchg
into
dec
js
das
cld
cli
xchg
inc
xchg
pop
inc
lahf
nop
push
or
xor
shr
int
pop
int
pop
and
cmc
xchg
pop
jmp
xchg
das
sbb
push
in
xchg
cdq
lods
pop
setge
mov
daa
adc
mov
mov
adc
push
ins
js
xchg
imul
fstp
adc
xchg
ret
ds
pop
jae
in
add
xor
test
cmp
fnsetpm(287
xchg
xlat
mov
hlt
pop
pusha
and
aaa
cs
mov
dec
or
retf
xor
sub
push
in
les
call
pop
xor
and
jecxz
mov
fst
adc
loopne
mov
push
inc
sub
inc
js
int3
out
popf
fwait
jmp
add
fsubr
adc
stos
movs
je
pop
mov
fs
lock
cmp
mov
stos
in
mov
sub
popa
cmp
mov
(bad)
and
dec
and
retf
aam
inc
xchg
ret
mov
imul
aaa
fcom
retf
sub
fwait
icebp
jnp
mov
pop
adc
sbb
loopne
inc
jmp
inc
xchg
push
mov
dec
mov
nop
push
and
sar
arpl
in
ins
stc
xchg
push
and
xchg
popf
scas
int3
sar
push
and
dec
inc
rcl
xor
push
fmul
aad
xchg
test
cmp
xor
jne
nop
xchg
aam
inc
and
inc
shl
pop
gs
or
stos
call
or
std
dec
not
sub
xchg
iret
pop
test
sbb
stc
fld
cwde
sub
push
mov
cmps
xor
(bad)
push
xchg
outs
push
js
popa
int
call
mov
xchg
in
hlt
fcmovbe
loop
push
mov
mov
xor
push
xchg
push
sbb
pushf
movs
loope
mov
mov
cmp
mov
push
dec
cmp
test
lea
add
ds
xchg
sbb
sbb
nop
sub
ja
xchg
int
ror
and
jmp
push
ins
outs
jns
adc
jno
sbb
push
xchg
xchg
test
icebp
(bad)
dec
jno
xchg
loope
pop
aad
mov
cld
xchg
cs
sub
push
sbb
xchg
iret
sub
mov
ins
xor
and
xchg
pop
mov
xchg
sub
mov
scas
(bad)
xlat
std
fist
cwde
mov
mov
sti
(bad)
je
or
push
stos
dec
xchg
imul
daa
mov
jne
sub
or
jnp
ds
dec
sbb
mov
ficom
xchg
fwait
neg
and
mov
fdiv
mov
and
test
dec
dec
pop
mov
std
inc
or
bound
out
stc
fwait
dec
adc
push
xchg
cmovbe
push
jns
in
jb
not
or
lds
cwde
js
cmps
movs
mov
pop
mov
aas
xlat
int
jge
push
xchg
cmp
(bad)
ds
inc
fsubrp
jns
mov
mov
xor
out
xor
xchg
ss
push
jle
cmp
mov
je
fcom
adc
jp
xchg
jmp
aam
inc
xchg
jno
mov
loopne
jge
sub
xor
xchg
outs
mov
push
mov
loopne
mov
sub
pop
loope
(bad)
xchg
mov
mov
out
jl
std
inc
xor
int
xchg
adc
push
inc
xchg
stos
cmp
mov
out
dec
dec
xchg
jg
mov
ret
push
push
ja
cmps
xchg
in
and
push
mov
clc
repz
xchg
fsubr
mov
xchg
cmp
inc
stos
xchg
je
sub
cmps
adc
pop
jmp
jno
sti
mov
mov
adc
push
xchg
fsub
ss
xchg
cmp
add
(bad)
xchg
ins
pop
jae
xchg
push
ds
jle
dec
call
cld
pop
xor
cmc
ins
aam
xor
lds
and
inc
add
rcr
cld
sti
adc
shl
test
jnp
cld
cwde
test
cmp
out
xchg
mov
xlat
push
mov
fwait
mov
stos
arpl
or
push
xchg
pop
pop
loop
xchg
fwait
pop
aam
pop
mov
dec
outs
sbb
mov
jne
das
std
enter
cld
xor
xchg
push
int3
jnp
nop
popf
cdq
xchg
adc
jb
outs
xchg
stos
and
movs
and
push
in
xchg
dec
adc
xor
xchg
aad
gs
in
xchg
mov
adc
fst
pop
jecxz
xchg
test
retf
cwde
in
cmp
aad
shl
imul
js
xchg
es
dec
retf
test
mov
xchg
inc
and
cmp
add
addr16
adc
cmp
and
movs
fnstcw
mov
and
inc
mov
xchg
popf
xchg
(bad)
mov
xchg
jo
jmp
adc
sub
lods
add
mov
cs
mov
cmp
adc
ror
aad
shr
mov
push
lock
popa
mov
and
inc
fwait
aam
stos
scas
lock
stos
mov
jmp
cmps
dec
xchg
xchg
xor
and
xchg
add
sub
jl
mov
cmps
mov
adc
rcr
xchg
mov
cmps
xchg
call
mov
rcl
or
adc
pop
sbb
mov
xchg
mov
jp
in
lock
(bad)
push
push
dec
xchg
jle
jecxz
sub
add
fldenv
xchg
mov
cmp
mov
je
xchg
lods
jge
adc
test
ficomp
(bad)
bound
mov
mov
shl
pop
popa
inc
xor
or
add
loop
mov
mov
jmp
jecxz
push
xchg
ss
push
retf
sbb
mov
(bad)
bound
lahf
aaa
in
or
ins
mov
mov
out
pop
imul
xchg
js
xchg
cdq
dec
(bad)
add
mov
mov
lods
xchg
es
imul
cdq
sub
xchg
sub
xlat
nop
or
popf
test
popa
fwait
sbb
(bad)
adc
and
mov
jmp
loopne
test
sbb
push
out
add
dec
out
loop
mov
add
aad
add
adc
stos
xchg
inc
movs
repnz
adc
cdq
or
loopne
mov
clc
loop
mov
add
xchg
mov
jb
or
je
lods
addr16
stc
xchg
les
or
xchg
ja
dec
or
shl
adc
sub
leave
pop
mov
hlt
aam
mov
mov
dec
ja
repnz
adc
pop
pop
jmp
es
jg
xor
outs
cmps
push
adc
xchg
nop
cmps
aaa
out
mov
loop
lods
xchg
and
push
xchg
push
(bad)
push
xchg
outs
movs
cmp
add
add
add
and
inc
xor
inc
les
scas
adc
xchg
adc
sbb
ret
or
scas
xchg
pushf
addr16
test
or
xchg
jo
sti
push
sbb
cmp
mov
pop
add
cmp
add
clc
data16
fcom
push
(bad)
setnp
mov
fbstp
adc
xchg
mov
adc
pop
in
mov
arpl
sub
jb
pop
mov
cmp
fsub
sub
xchg
or
jae
xchg
test
or
mov
jne
out
inc
iret
sub
mov
test
(bad)
stos
dec
clc
and
mov
xchg
sbb
retf
out
dec
in
push
popa
adc
xchg
pushf
je
and
jge
pop
jl
xchg
dec
aaa
retf
dec
jmp
enter
xchg
xor
xchg
xchg
xchg
loope
mov
mul
pop
pusha
cmp
xchg
xchg
jmp
cmps
test
cld
int
dec
xchg
pop
jno
push
fdiv
adc
call
add
mov
dec
adc
mov
jecxz
ja
or
add
dec
xchg
push
cmp
cs
test
mov
jle
aam
jmp
mov
xor
mov
scas
inc
cmc
ret
jg
add
sub
dec
xchg
dec
jl
imul
push
pop
xchg
ret
xlat
rol
push
ins
mov
mov
xchg
es
sti
call
cmp
adc
or
xor
jmp
sahf
xor
push
cs
fimul
(bad)
xchg
cli
mov
(bad)
out
jl
add
jno
jmp
mov
xchg
push
addr16
cmp
mov
dec
mov
jg
mov
inc
mov
adc
sub
dec
inc
and
(bad)
aam
les
dec
xchg
outs
xchg
push
push
(bad)
ja
xchg
pop
in
cmp
and
xchg
jno
gs
jmp
pushf
mov
xchg
icebp
jge
arpl
xchg
pop
mov
jl
cmc
and
and
add
xchg
push
xlat
test
xchg
inc
ja
pop
adc
ret
rol
xchg
mov
inc
push
xchg
or
int3
stc
jnp
pop
mov
xchg
call
(bad)
xchg
sbb
cmps
xchg
lds
cli
jl
call
inc
mov
sbb
xchg
shl
cmp
or
pop
xchg
out
cmc
idiv
sahf
sub
mov
js
fst
jae
adc
(bad)
and
in
xor
pop
xchg
lock
or
xchg
cmp
xchg
dec
add
cmps
dec
xchg
inc
xor
shl
and
mov
mov
shl
test
mov
gs
fwait
sbb
jb
shl
inc
xchg
jge
iret
mov
jnp
ins
push
and
cmc
mov
mov
xchg
cld
shl
fsubp
push
jg
sbb
aam
test
cmp
xchg
mov
pushf
jae
sub
inc
sbb
xchg
dec
str
leave
xchg
pop
loopne
push
mov
sub
xchg
inc
nop
mov
js
test
pop
mov
sbb
add
mov
mov
les
mov
xor
mov
or
adc
adc
hlt
mov
sub
xor
push
adc
mov
fcom
js
dec
movs
xor
push
(bad)
mov
loop
outs
push
imul
push
imul
add
dec
cs
aam
(bad)
and
jecxz
mov
loope
dec
mov
xchg
fld
gs
or
jne
inc
xchg
xchg
ds
clc
lahf
add
xchg
or
push
arpl
xchg
add
jmp
ret
xchg
cmp
je
sbb
xchg
imul
adc
inc
adc
adc
fisubr
mov
(bad)
xchg
mov
xchg
fisttp
fs
xchg
arpl
loop
sub
(bad)
sbb
ja
pop
jnp
push
jbe
xchg
add
clc
scas
stos
iret
mov
mov
rcr
popf
(bad)
loopne
xor
xchg
add
mov
xchg
xor
sub
dec
int3
jl
into
push
lahf
push
jne
push
inc
xchg
stos
cmc
cwde
mov
push
mov
mov
mov
cmp
call
aad
xchg
xor
sbb
mov
push
inc
mov
xor
jle
rol
xchg
or
dec
dec
std
aas
popf
dec
mov
pop
xor
loop
je
xlat
adc
cmp
shr
lea
xchg
data16
adc
fisttp
xchg
dec
mov
outs
rcl
dec
into
sbb
add
in
movs
rcl
xchg
rol
jns
xor
and
xchg
bound
mov
mov
adc
hlt
and
xchg
cmps
out
dec
cmp
fcom
add
or
xchg
xchg
push
adc
jle
fist
mov
mov
stos
stos
pop
pmuludq
push
fwait
int
xor
cmp
xchg
dec
push
jno
inc
xchg
or
pop
loope
sub
mov
jb
dec
xchg
lds
pusha
adc
or
fist
push
or
and
sub
xlat
(bad)
hlt
clc
push
adc
xchg
cmps
mov
inc
fs
cs
in
dec
call
xchg
fld
jo
inc
dec
fwait
xor
xchg
pop
cmp
in
dec
ins
rcl
adc
loop
add
add
jbe
rep
scas
inc
fiadd
lahf
stos
int
mov
xchg
mov
out
adc
sti
xchg
popf
inc
push
jl
push
icebp
xor
mov
xchg
gs
bound
jl
or
in
xchg
pop
sub
fsub
fcom
jbe
and
mov
pop
outs
imul
mov
xchg
dec
(bad)
mov
xchg
jnp
stos
add
in
mov
loop
bound
mov
mov
sub
push
pop
rol
pusha
lea
frstor
mov
push
xor
xor
adc
out
repz
jecxz
adc
scas
lods
pop
fwait
sete
dec
push
push
pop
cld
add
mov
mov
imul
lods
ret
xchg
retf
jne
sub
fs
push
jbe
ins
iret
arpl
xor
jmp
stos
mov
popa
cmp
and
es
nop
hlt
add
push
xchg
push
data16
inc
in
pop
sub
inc
or
popf
repz
test
pusha
xchg
cmp
or
pop
jp
js
(bad)
xchg
dec
add
jmp
and
xchg
stos
(bad)
es
xchg
mov
ins
xor
dec
pop
xchg
push
mov
outs
pop
or
test
push
push
and
iret
mov
inc
ss
or
loopne
sub
push
cmps
pop
(bad)
into
xchg
or
(bad)
xchg
jmp
mov
sub
dec
sbb
arpl
pop
call
pop
ror
push
lahf
mov
out
xchg
fldcw
mov
inc
and
adc
sar
mov
pop
mov
cdq
pop
outs
inc
icebp
push
xchg
and
or
jp
or
daa
adc
cmp
cmp
or
repz
jle
(bad)
jno
fcom
xchg
lock
sahf
xchg
or
test
pop
pop
adc
imul
and
sbb
and
sub
xchg
rol
shl
call
or
xchg
stc
mov
int3
jo
xor
cdq
mov
xor
xchg
add
xor
xchg
cmp
jle
rcr
mov
or
push
jnp
outs
mov
pop
jb
jle
or
aas
push
xchg
pop
dec
mov
pusha
fcmovnb
jae
push
inc
sub
mov
or
imul
ds
popa
inc
adc
adc
sbb
adc
jb
ror
xchg
test
jae
xchg
add
jnp
xchg
jg
repnz
fild
call
sub
xchg
mov
inc
sbb
dec
push
xchg
pop
lahf
fisub
xchg
stos
out
xchg
mov
sbb
jl
add
xchg
std
xchg
sbb
mov
js
cmp
adc
and
adc
stos
out
test
push
pop
and
movs
in
scas
pop
ret
rcl
xchg
xchg
xlat
cli
mov
test
ret
imul
inc
adc
xchg
cld
xchg
in
fistp
push
lock
add
(bad)
xchg
movs
pop
data16
nop
add
ror
adc
push
xchg
test
loopne
call
loop
mov
or
pxor
cmp
adc
xchg
pop
enter
push
in
and
cmps
sbb
mov
push
xchg
cmps
dec
arpl
sbb
popa
sbb
lods
xlat
pop
cmp
push
adc
out
dec
cs
mov
dec
adc
sbb
xchg
pop
jg
mov
xchg
data16
adc
xchg
in
jg
imul
inc
mov
mov
xchg
push
and
jp
xlat
push
cmps
enter
repnz
jl
shr
mov
pushf
and
retf
aam
hlt
xchg
in
xchg
scas
retf
cmps
fnstenv
loope
sti
loopne
sbb
mov
adc
jb
xchg
mov
aad
fbld
pop
xchg
sub
pushf
sahf
out
cmp
mov
fwait
leave
aaa
js
xchg
pop
xlat
daa
inc
ficom
ret
xchg
push
or
sub
cmp
pusha
jne
adc
mov
sub
cmps
jne
cmp
lods
push
inc
retf
gs
imul
inc
adc
pusha
mov
jne
push
xchg
cmp
mov
mov
stc
arpl
mov
(bad)
jle
push
inc
pop
xchg
ins
stos
sbb
mov
test
cs
es
shl
xchg
ins
xor
repz
ins
jmp
std
popf
xchg
pop
dec
test
push
mov
cwde
sub
sbb
pop
pop
pop
xchg
jmp
sbb
frstor
aam
xor
addr16
sbb
test
stos
mov
cld
xchg
ins
imul
les
or
icebp
cmp
lods
hlt
aas
scas
fsubr
cwde
inc
mov
hlt
mov
pop
mov
cmp
hlt
adc
popf
xchg
mov
in
out
add
mov
push
or
jmp
pop
loopne
pop
jg
xchg
xor
icebp
sub
or
xchg
push
sbb
pop
loopne
jl
test
movs
xchg
lods
mov
mov
mov
xchg
xor
into
test
lahf
(bad)
push
pop
jbe
fidiv
icebp
xchg
ret
xor
inc
cmp
mov
outs
inc
or
mov
fnstcw
or
into
arpl
icebp
inc
push
dec
pop
cmp
and
xor
pusha
cmps
sbb
xchg
cmc
pop
mov
test
and
adc
aam
cdq
cmps
popf
xchg
fild
daa
sbb
test
mov
lea
cmps
fwait
inc
lahf
jmp
test
jl
imul
(bad)
stos
sbb
push
ins
and
pop
and
in
xchg
or
movs
xchg
enter
ffreep
and
xchg
xchg
inc
xor
push
test
add
js
xchg
imul
movs
mov
sub
aam
push
and
mov
xchg
in
add
sub
xchg
imul
popf
xchg
pusha
jle
mov
pop
mov
into
add
pop
call
dec
xlat
loop
mov
xor
imul
repz
mov
jl
call
sub
ret
adc
sub
hlt
scas
or
icebp
es
cmp
lds
pop
mov
and
xchg
fdivr
cmp
in
adc
jle
sbb
mov
cmps
dec
addr16
ja
mov
test
aam
mov
pop
mov
adc
psubb
xchg
stc
cld
mov
inc
pop
int
xchg
dec
mov
fimul
stos
jl
or
mov
sub
push
pushf
ret
mov
mov
mov
xchg
cmps
sidtd
inc
outs
xchg
xchg
popf
push
outs
or
enter
addr16
mov
cs
xor
dec
sub
and
jb
sub
cmp
xor
mov
fcom
mov
(bad)
fnstenv
mov
test
scas
xchg
sub
retf
cmc
fwait
mov
sbb
xchg
enter
imul
push
invd
dec
xchg
rcl
mov
jbe
cmps
cmps
jo
xchg
add
mov
repz
push
test
fs
dec
jo
xchg
outs
inc
mov
adc
gs
sbb
jne
mov
loopne
xchg
cmp
sahf
retf
xchg
push
jns
jecxz
aaa
test
jae
rcr
test
cdq
jle
cli
test
cmps
stos
jb
sub
xchg
iret
cmp
jmp
mov
pop
mov
jge
xchg
and
(bad)
sbb
fisttp
icebp
(bad)
mov
xchg
stc
pop
mov
or
adc
push
mov
imul
sbb
adc
jg
fidivr
xchg
adc
adc
xchg
stc
and
push
and
add
lock
adc
dec
dec
xchg
(bad)
lock
or
xchg
das
jge
mov
mov
jo
fisubr
cmp
ds
sub
arpl
cwde
adc
cmps
(bad)
mov
pop
mov
jae
mov
(bad)
xor
mov
xor
inc
fwait
std
xchg
hlt
mov
push
cmp
into
inc
loopne
cmps
xchg
xchg
fiadd
adc
xchg
add
and
jmp
adc
jg
test
xchg
ja
arpl
call
loope
inc
std
nop
cdq
mov
out
imul
mov
xchg
pop
sbb
xchg
nop
add
mov
pop
mov
sti
or
xor
sbb
jnp
push
mov
xor
or
imul
mov
xchg
inc
daa
mov
shl
xchg
cmp
movs
inc
push
sub
lock
pop
sub
outs
pop
jbe
int3
xchg
fs
or
addr16
ret
jne
scas
pushf
mov
mov
or
xor
cmp
add
xchg
pop
call
xchg
adc
ret
test
dec
or
xchg
shr
jb
cwde
push
mov
add
mov
xlat
cmp
ds
push
xor
dec
sti
and
lahf
xor
xchg
xchg
push
xchg
out
movs
adc
test
(bad)
je
xor
loope
xchg
pushf
push
sbb
sbb
pop
outs
dec
les
adc
mov
xchg
dec
and
addr16
inc
adc
cmp
mov
xor
push
retf
cmp
pop
xchg
jne
xchg
mov
aam
(bad)
clc
aad
xchg
in
fmul
inc
into
daa
scas
fwait
mov
rcl
jl
stc
mov
mov
imul
adc
pop
mov
shl
mov
xchg
xor
jns
add
int
loop
dec
xchg
jae
rcr
aad
sub
pop
add
aaa
cmp
xchg
mov
pop
stos
movs
xchg
push
dec
sbb
adc
cmp
adc
mov
shr
lods
cmps
sub
and
jl
pop
cmp
in
sub
jle
mov
(bad)
push
std
es
cdq
dec
pop
aaa
xchg
dec
push
jge
mov
outs
xor
out
sub
mov
mov
sub
dec
stos
or
std
fwait
rcl
xor
les
mov
gs
xchg
mov
inc
outs
xchg
repnz
jmp
cmp
pusha
fcmovu
arpl
jp
retf
dec
jnp
cld
retf
xchg
xchg
test
bound
mov
fbstp
ror
aam
fld
test
rcl
es
push
lea
xchg
add
xor
xchg
push
add
add
or
xchg
test
mov
or
xchg
dec
jno
iret
pushf
or
adc
in
fisttp
push
xchg
jg
ss
pop
clc
test
ins
mov
mov
mov
xchg
ret
dec
cmp
push
out
jmp
pop
xlat
push
in
mov
or
adc
adc
xchg
mov
fldcw
xchg
mov
mov
mov
jg
ja
xchg
xlat
call
gs
test
inc
sub
loope
xchg
pop
test
sahf
or
or
mov
hlt
jo
inc
push
mov
dec
xchg
test
pop
imul
scas
retf
ja
mov
add
ins
out
xchg
xchg
xor
mov
imul
lods
mov
adc
in
sahf
inc
cld
aad
xchg
xor
inc
xor
icebp
dec
jmp
call
xchg
dec
push
pop
outs
sbb
stos
dec
(bad)
je
out
xchg
adc
cwde
and
dec
iret
(bad)
faddp
add
ss
pop
pop
dec
int
lock
adc
push
xor
outs
sub
lods
and
xchg
dec
int3
pop
out
push
out
mov
test
loopne
ret
xchg
stc
jno
mov
lods
bound
dec
jnp
sahf
dec
out
mov
jno
js
(bad)
aam
stc
jp
xchg
jns
adc
retf
or
jge
movs
call
mov
adc
js
dec
loopne
sub
cs
aas
hlt
xchg
es
xor
out
lea
jbe
loopne
xchg
xor
push
movs
add
repz
push
dec
(bad)
in
addr16
xchg
(bad)
(bad)
mov
mov
enter
mov
sar
(bad)
repz
mov
xor
arpl
in
jnp
scas
dec
mov
adc
push
xchg
adc
xor
cmc
loopne
xor
xchg
xchg
add
push
das
cmp
push
pop
sub
push
add
add
outs
xchg
icebp
imul
dec
je
popf
push
mov
xchg
in
dec
lods
and
jp
shl
addr16
xchg
sbb
inc
xchg
cdq
scas
mov
(bad)
fst
ins
jecxz
xchg
push
cmp
loopne
push
xchg
shl
xchg
test
push
push
fild
mov
xchg
stc
xchg
cli
push
add
sahf
sbb
jbe
xchg
inc
in
cmp
and
pop
mov
pop
add
ins
in
mov
mov
mov
aaa
push
xchg
xor
ja
xchg
in
pop
xlat
mov
dec
mov
or
xor
sub
mov
dec
or
test
pop
mov
xchg
out
pop
enter
and
push
pop
fwait
or
es
lea
test
test
sub
mov
ss
push
(bad)
jecxz
daa
push
inc
mov
hlt
nop
mov
out
push
pop
fsub
pushf
inc
xor
cmp
dec
jne
jbe
jp
inc
xchg
movs
jb
nop
sbb
xchg
and
inc
xchg
or
lock
xchg
pop
sub
retf
add
xchg
xchg
icebp
cmp
xor
mov
xor
push
outs
test
mov
inc
xchg
push
repnz
call
inc
mov
dec
and
cmc
mov
mov
xor
xchg
je
adc
jmp
xchg
xlat
sti
dec
aad
mov
icebp
xchg
out
nop
sub
pop
(bad)
fdiv
mov
fwait
sahf
cdq
std
xchg
dec
xor
mov
xchg
jmp
call
add
and
sbb
test
out
xchg
dec
in
and
xchg
mov
push
mov
add
xchg
xchg
mov
add
retf
jmp
(bad)
and
pusha
(bad)
je
add
adc
lea
jl
jae
inc
mov
call
sub
push
dec
jo
pop
xchg
in
xchg
std
mov
pop
xchg
pop
jecxz
sbb
imul
into
jl
mov
and
not
dec
call
cld
pop
aam
std
push
sub
mov
adc
sahf
je
lock
aas
jl
lods
push
lods
cwde
movs
cmp
xchg
pop
push
(bad)
jmp
add
(bad)
mov
mov
push
inc
ss
mov
push
fild
mov
xchg
adc
int
arpl
inc
ret
stos
nop
lahf
jmp
mov
inc
xlat
xchg
push
fimul
mov
jbe
xchg
add
sti
das
pop
int
mov
jg
out
sbb
es
or
jbe
jae
inc
retf
mov
pushf
sub
imul
xchg
lods
push
push
sub
fnsave
adc
mov
pop
jnp
add
(bad)
sbb
dec
ret
adc
inc
jnp
arpl
mov
in
cmc
push
adc
xchg
mov
sbb
mov
fs
lock
or
pop
jle
mov
arpl
xchg
xchg
out
or
push
xchg
pop
das
cld
cmps
mov
call
or
xchg
mov
sub
fcmovu
pop
call
xchg
gs
das
pop
jae
pop
stos
xchg
jno
xchg
dec
bound
push
mov
test
push
(bad)
push
xchg
into
leave
jb
sub
mov
test
xchg
scas
cmp
mov
aad
(bad)
test
popa
(bad)
cwde
and
xchg
rcl
xor
out
inc
cmp
jecxz
push
jae
movs
jbe
fdiv
dec
jg
mov
mov
push
lods
add
inc
out
inc
lea
jbe
xchg
sub
mov
loop
shr
mov
sbb
cli
or
inc
rol
pushf
xchg
add
adc
in
inc
mov
fadd
xor
xor
xchg
pop
aad
cwde
inc
sub
(bad)
out
rcl
pusha
adc
mov
xor
xchg
pop
push
xchg
das
in
clc
add
rcl
mov
xchg
movs
and
push
addr16
xchg
xchg
cmp
push
imul
fist
int3
xchg
xchg
inc
sub
xchg
pushf
and
gs
ud1
push
dec
jle
xchg
ins
and
div
inc
xchg
cmc
mov
aam
xchg
mov
xchg
int
cmp
sar
mov
fwait
jl
cwde
clc
rol
mov
adc
data16
xchg
pop
adc
cmp
push
mov
shl
push
aam
xchg
sbb
sbb
or
xchg
push
sub
xchg
sbb
and
jecxz
mov
call
sub
jg
mov
fwait
loop
push
add
(bad)
sub
push
nop
xor
xchg
std
ficom
popf
(bad)
js
lods
push
jl
daa
sub
pop
icebp
mov
sahf
mov
mov
sub
push
scas
out
cmp
xchg
jns
xsha1
cmps
retf
gs
test
icebp
stos
ror
jae
pop
pop
xchg
dec
xchg
sbb
cmp
and
xchg
lods
icebp
dec
adc
sub
(bad)
cmp
movs
dec
lods
not
push
sbb
adc
rol
pop
sub
xchg
pop
add
inc
ret
or
mov
mov
ret
xchg
jae
addr16
fld
and
pop
sbb
cwde
mov
xchg
arpl
fld
iret
xchg
bound
imul
sbb
xchg
lods
add
sbb
movs
xchg
push
aas
pop
jns
and
sub
jp
aam
sbb
push
mov
jb
hlt
es
(bad)
sar
xchg
push
xchg
push
fimul
(bad)
rcl
iret
mov
mov
inc
mov
jo
or
nop
adc
sub
jb
enter
jmp
cli
sub
pop
shr
xchg
lds
sahf
retf
daa
mov
dec
mov
fst
pop
sub
xchg
(bad)
mov
aaa
xchg
xchg
call
adc
xchg
not
add
mov
lds
neg
mov
xor
add
iret
inc
xchg
hlt
ja
rcl
cs
mov
add
xchg
adc
loope
in
int
lods
xor
pop
in
ds
inc
lea
pop
push
or
jnp
ffree
jmp
fstp
and
xchg
adc
jne
jno
ds
mov
xchg
daa
mul
(bad)
xor
and
dec
int
push
push
inc
fmul
mov
loope
dec
xchg
shr
test
popf
fldz
fdiv
push
call
xor
inc
imul
push
leave
cmp
mov
ja
mov
jo
xor
mov
into
retf
cmps
hlt
mov
jmp
sub
int
call
pushf
xchg
imul
aad
mov
mov
cmps
add
std
test
xchg
sub
shr
push
mov
mov
mov
push
cdq
push
aam
(bad)
pop
pop
ja
out
push
arpl
aad
jecxz
jb
(bad)
mov
pop
sbb
pop
or
xlat
nop/reserved
pusha
(bad)
jl
out
dec
in
sub
outs
mov
test
and
dec
pop
mov
(bad)
and
xchg
std
xor
jno
cmp
cli
mov
or
not
xchg
fidivr
(bad)
cmps
jbe
xchg
int
add
iret
inc
or
(bad)
xor
ins
xchg
xchg
nop
imul
arpl
jl
mov
cs
mov
ficom
mov
ins
sub
xchg
popf
sbb
ror
outs
adc
sti
adc
repz
nop
out
lods
cmps
adc
mov
mov
das
mov
ss
clc
adc
cmp
dec
loop
hlt
xchg
dec
mov
adc
fimul
push
sub
and
add
(bad)
adc
jmp
dec
xor
inc
xchg
enter
jl
out
xchg
add
sub
mov
pop
jg
test
jmp
inc
fild
cld
clc
stos
mov
push
test
xchg
dec
mov
hlt
push
or
add
xchg
ret
mov
or
icebp
pop
aaa
cmc
sbb
mov
lahf
sbb
aad
shl
pop
inc
not
outs
test
and
and
or
mov
popa
bound
cwde
cmp
xchg
cld
push
outs
dec
jmp
inc
in
xchg
inc
lock
or
mov
adc
adc
adc
xchg
sbb
imul
ins
inc
inc
fwait
push
sahf
pop
mov
xchg
push
pop
jno
pop
mov
push
jb
jp
xor
add
xchg
jno
(bad)
loope
jae
cs
int3
into
xor
cld
outs
lock
or
xchg
fs
jb
fwait
xchg
dec
jbe
mov
xchg
out
addr16
mov
xchg
pop
retf
imul
mov
xchg
hlt
ja
pop
cmp
jmp
ret
sub
call
and
rol
ret
jl
addr16
jne
mov
mov
add
aad
inc
adc
xchg
leave
xor
test
(bad)
adc
repnz
lahf
mov
or
adc
jno
shl
lds
sub
pushf
xchg
ja
mov
test
rcl
mov
in
xchg
outs
fld
cdq
mov
je
inc
(bad)
pop
mov
add
loopne
cld
sbb
pusha
adc
lds
or
test
aam
stos
aas
adc
xchg
mov
xchg
daa
or
cli
mov
data16
imul
rol
jae
ficom
int
cmp
pop
mov
dec
xchg
mov
lea
in
mov
outs
push
cmps
sbb
xchg
rcl
jne
xchg
mov
sub
adc
outs
repz
and
push
je
or
xchg
mov
xchg
and
inc
sbb
ret
push
dec
mov
nop
fnsave
ins
and
xchg
mov
xchg
push
push
data16
lahf
push
sub
xor
cwde
cmp
js
jno
dec
cmp
xchg
sar
icebp
stos
clc
dec
mov
push
cwde
and
pop
dec
inc
xchg
outs
xchg
pop
ins
jae
call
adc
xchg
cli
addr16
xchg
cmc
retf
movs
mov
add
ss
mov
aaa
rcr
out
xchg
adc
inc
jo
xchg
or
push
push
sub
sub
cmps
cmp
add
pop
outs
adc
nop
push
cwde
fwait
mov
inc
sub
adc
lods
(bad)
xchg
cwde
in
pop
fs
jne
xchg
inc
fist
scas
int3
xor
popf
mov
ret
(bad)
xchg
div
mov
mov
mov
xchg
xchg
aad
inc
fsub
xchg
cwde
mov
xlat
aam
sbb
xor
mov
in
pusha
hlt
sub
(bad)
or
inc
scas
mov
cmp
push
xchg
add
push
retf
dec
sub
xor
lahf
push
rol
cmc
mov
mov
cmps
jle
test
and
leave
movs
adc
inc
cli
xchg
out
sub
lea
jno
js
sar
mov
(bad)
pop
mov
sbb
mov
push
icebp
sub
sub
adc
adc
pop
inc
loopne
into
mov
mov
or
enter
mov
fdivr
aam
and
mov
push
push
sbb
inc
cmp
popa
cdq
stos
dec
xchg
pop
and
push
lods
test
xor
sub
retf
sti
mov
and
pop
loope
xchg
les
iret
xchg
xor
adc
sahf
ficomp
sub
ret
xchg
imul
pop
dec
push
xor
mov
xchg
loope
scas
push
jmp
mov
sbb
cmc
popf
xchg
repz
xor
(bad)
hlt
(bad)
mov
movs
add
sar
lock
rcl
push
and
push
xor
xchg
xor
mov
(bad)
cmp
pop
stc
push
sub
xchg
nop
jge
std
add
xor
outs
fmul
jl
dec
dec
sub
push
inc
dec
mov
mov
xor
popa
iret
sub
(bad)
lahf
xchg
std
stos
mov
sbb
push
xor
(bad)
sbb
add
push
fs
xchg
int3
or
and
inc
jb
fcomp
or
xchg
ror
movs
outs
xchg
adc
jmp
inc
fwait
xor
mov
je
and
cmp
and
movs
ret
sti
mov
aam
cmp
pusha
test
inc
add
xchg
sub
fwait
pop
(bad)
les
fidiv
cmp
xchg
shr
dec
jmp
cdq
enter
mov
xor
or
(bad)
xchg
add
test
xchg
aaa
xchg
add
bound
shl
xchg
out
inc
out
nop
sbb
(bad)
xor
or
aas
lods
pop
mov
hlt
in
inc
dec
test
fwait
push
xchg
xchg
cmp
sub
(bad)
xchg
pop
in
xlat
aaa
cmps
jmp
xor
aas
inc
cmp
test
add
push
fdivr
retf
shl
xchg
or
in
nop
adc
bound
les
call
xchg
test
mov
sar
xchg
add
push
ror
loop
lock
out
cmp
mov
or
mov
add
fisubr
xchg
cli
jbe
retf
cmp
xchg
ds
dec
jl
jo
xchg
add
xlat
cmc
xchg
retf
enter
ja
les
in
dec
xor
cwde
imul
call
xchg
dec
repz
adc
adc
push
mov
push
jmp
in
dec
xchg
mov
rcr
xchg
loope
stc
sub
dec
scas
fcomp
aad
js
sbb
add
nop
mov
push
add
cmp
sub
add
inc
jecxz
xchg
(bad)
mov
dec
cmp
sete
sbb
pop
je
in
adc
sub
xchg
jge
push
pop
out
add
push
fild
ror
movs
mov
cmp
push
adc
test
xchg
fsubr
or
pop
retf
call
xchg
jae
add
xchg
loope
repz
push
imul
mov
jge
push
jl
xchg
daa
cmp
inc
mov
add
xchg
loope
out
fisubr
jl
rcr
xchg
(bad)
xor
cmp
push
push
stos
loopne
repz
cmp
xchg
jae
out
pop
pop
nop
xor
std
icebp
cmc
ret
mov
push
shr
adc
xchg
fidiv
(bad)
hlt
imul
xor
(bad)
dec
xchg
cdq
sub
cmp
das
test
xchg
not
inc
sbb
cld
xchg
mov
(bad)
gs
or
scas
mov
mov
dec
fcmovbe
or
xchg
data16
push
fimul
into
mov
xchg
jnp
in
stos
js
inc
fwait
adc
mov
adc
pop
mov
push
cmp
in
inc
xlat
xchg
je
adc
xchg
dec
cwde
fsub
mov
jmp
(bad)
inc
jns
nop
addps
adc
aaa
xchg
mov
retf
cmp
gs
dec
jl
imul
mov
addr16
movs
sbb
and
pusha
ss
jle
mov
mov
xor
xchg
aad
clc
iret
pusha
jnp
mov
jmp
cmp
inc
mov
lods
push
outs
fwait
sub
mov
pop
xchg
pop
int3
jle
jge
xchg
mov
adc
xor
es
mov
push
pop
jmp
in
bound
ins
jbe
xchg
pop
mov
mov
fwait
int
xchg
aad
mov
retf
jne
and
push
fild
and
not
adc
aad
and
mov
js
mov
xor
dec
cld
add
xchg
pop
jecxz
mov
inc
mov
or
xor
adc
sbb
inc
lahf
lahf
fs
les
fdivr
or
sti
xchg
ss
scas
or
cli
xchg
je
lock
movs
adc
adc
xchg
inc
push
mov
push
add
ins
jl
(bad)
adc
mov
mov
pusha
xchg
icebp
pop
sbb
add
xchg
bound
push
js
or
mov
mov
inc
xor
lahf
pop
out
sbb
and
pause
mov
ret
rol
and
or
xchg
test
dec
cmp
or
cmp
xchg
jle
jl
mov
cmps
int3
push
jmp
test
lods
lahf
jle
mov
xchg
lds
push
fsubr
ret
out
push
loopne
in
cdq
pop
and
adc
or
inc
sbb
js
inc
dec
pusha
idiv
xchg
mov
in
or
jp
xor
js
stos
dec
cli
xchg
pop
jb
mov
mov
loope
sbb
xchg
jns
xchg
add
cmp
mov
jp
or
test
ficom
jne
sbb
call
cmc
push
inc
js
lods
outs
outs
std
mov
mov
(bad)
popf
push
ds
and
jo
mov
test
imul
aam
out
mov
push
xchg
sub
pop
and
xchg
xchg
jmp
ja
ret
test
rol
adc
inc
loopne
xchg
adc
xor
xchg
aam
ins
push
(bad)
fneni(8087
mov
jmp
xchg
fiadd
sub
or
call
mov
js
data16
push
arpl
sar
adc
jmp
sub
int3
sub
sti
xchg
scas
sbb
xchg
cmp
daa
xchg
in
imul
xchg
sbb
mov
adc
cmp
xchg
mov
mov
hlt
out
inc
jne
aad
xchg
fstp
inc
dec
movs
iret
xchg
dec
xor
pop
xchg
out
outs
sbb
xchg
xchg
lock
push
sti
mov
es
call
xchg
cmps
outs
fsubr
mov
jne
xor
shr
in
das
in
jae
xchg
pop
push
lea
cdq
cwde
sbb
or
mov
sub
pop
push
jg
mov
lods
std
ror
cmp
pushf
test
xchg
push
out
xchg
fwait
imul
repnz
pop
fst
cli
fs
mov
push
push
xchg
jnp
jo
or
xchg
fisttp
sub
cmp
add
pop
hlt
aad
xchg
fst
sub
jmp
in
sub
loopne
push
mov
mov
(bad)
sbb
cmp
dec
fdivrp
push
inc
les
xchg
sub
loopne
xchg
dec
fisub
js
lods
scas
mov
cmp
cmp
mov
rol
pop
xchg
es
mov
xchg
adc
add
xchg
add
mov
aas
sbb
ss
xchg
fnstsw
mov
mov
cmp
add
pop
inc
add
dec
jmp
mov
jl
sbb
pop
mov
mov
jno
ds
xchg
rcr
mov
leave
ror
test
mov
xchg
xchg
xchg
fdiv
icebp
and
jmp
adc
ror
adc
xor
inc
scas
adc
cmps
lahf
loopne
fnstsw
out
sbb
and
push
cmp
xchg
xchg
and
xor
int
es
xchg
jne
jns
push
loop
adc
xchg
cmp
ds
jl
cmp
sub
inc
ins
xchg
and
pop
xor
out
sbb
(bad)
xchg
sub
out
mov
xchg
push
ficom
mov
xchg
mov
mov
dec
sbb
icebp
pop
cmps
sub
outs
xchg
loopne
xor
in
iret
call
sub
es
sub
aas
inc
xchg
ins
nop
ja
cmp
movs
loop
iret
neg
mov
pop
mov
dec
enter
cmps
int
xchg
dec
xchg
cmp
mov
dec
(bad)
aad
aad
adc
and
(bad)
inc
add
stc
mov
xor
inc
jno
mov
xchg
pop
(bad)
mov
in
sub
xchg
cmp
arpl
rcl
mov
aam
rol
push
mov
jp
inc
inc
and
js
cmc
inc
es
add
mov
xchg
pop
mov
push
(bad)
mov
pop
sub
pop
ja
mov
fcom
cmp
add
lods
pushf
adc
shl
dec
movs
mov
repnz
mov
sub
pop
inc
dec
test
leave
aam
xchg
or
xor
call
or
jb
add
lahf
ret
xchg
movs
pop
fisttp
xchg
xor
ja
push
push
jl
imul
std
pop
sub
inc
das
loop
aam
pop
gs
pop
movs
inc
scas
xchg
adc
das
lock
fs
je
bound
inc
fild
div
pushf
jge
adc
xchg
outs
or
loop
cmp
mov
(bad)
adc
test
or
imul
cmps
pop
and
int
cmp
mov
loopne
aam
cdq
dec
lahf
daa
cmp
out
or
xchg
sti
xchg
mov
push
test
cmp
sbb
ja
popa
jbe
mov
fwait
jnp
sbb
in
fwait
ret
in
ds
(bad)
mov
mov
add
adc
pusha
jmp
xchg
pop
or
lds
in
test
int
push
sub
jge
mov
jo
sub
xor
xchg
xchg
sti
mov
cmps
pop
ret
int3
inc
adc
mov
jnp
jae
xchg
lea
jo
add
jl
xchg
dec
sbb
mov
sub
push
int
adc
call
pop
inc
lods
xchg
stos
ja
mov
cmp
lock
aaa
and
or
sahf
fidiv
aaa
cmp
fdivr
dec
adc
xchg
sub
mov
mov
lods
push
mov
or
xchg
sub
mov
xchg
frstor
andps
push
xchg
(bad)
sbb
and
fs
mov
xor
lods
push
(bad)
xchg
pop
xchg
leave
inc
rcl
xchg
adc
test
xchg
not
jnp
int3
cmps
ins
mov
and
hlt
mov
dec
xchg
inc
cmp
fnstenv
std
mov
es
fs
cmps
ins
xchg
shr
jae
xchg
in
pop
cmp
push
sub
xchg
or
push
xchg
aad
ja
adc
xor
xchg
outs
daa
and
je
test
mov
xchg
mov
nop
push
xchg
test
sub
scas
add
xor
fcomp
add
push
inc
push
data16
and
sub
xchg
dec
push
xchg
not
cmp
jge
cld
repnz
jmp
in
pop
xchg
sbb
test
mov
sub
fist
fild
fwait
xor
add
pop
dec
dec
xchg
lds
retf
xchg
jge
push
pop
and
mov
hlt
outs
push
ja
xchg
sbb
sahf
repnz
mov
int
cld
and
rcl
scas
shr
stos
mov
loop
mov
int3
cmp
push
dec
push
or
sar
adc
mov
ret
arpl
lock
mov
sbb
xchg
inc
xchg
cmps
scas
rcl
lahf
pop
jns
mov
hlt
push
add
fwait
stc
aam
sahf
push
xor
pusha
in
js
push
les
enter
cmp
pop
mov
lea
push
jmp
xchg
mov
xor
cmp
xchg
leave
xchg
ja
mov
cmp
jnp
loopne
cs
cmps
inc
sti
je
jge
addr16
mov
push
loopne
xchg
imul
adc
inc
sar
adc
jns
mov
pushf
adc
lock
call
adc
or
inc
mov
pop
jbe
imul
ja
add
dec
xchg
aam
fcmovnb
jecxz
jb
je
jo
lods
cmp
cmp
aaa
adc
mov
xchg
mov
stos
pop
(bad)
fisub
xchg
pop
jmp
clc
or
call
push
xchg
xchg
dec
ins
outs
xchg
push
cmp
jle
xchg
mov
add
jae
jo
fwait
and
push
ins
daa
mov
jge
arpl
jmp
push
test
push
lds
inc
xchg
enter
(bad)
pop
cmp
movs
popf
mov
xchg
mov
sub
xchg
cld
stos
jl
pop
xchg
lods
mov
inc
xchg
xor
cli
sbb
push
push
dec
ds
pusha
test
rol
xchg
adc
or
popf
xchg
arpl
and
xchg
retf
push
jbe
aaa
or
xchg
pop
movs
cmp
mov
jp
xchg
clc
jge
dec
cmp
pop
inc
mov
mov
test
inc
xchg
jg
call
mov
inc
dec
and
fwait
ja
mov
mov
pop
call
cmp
xchg
mov
or
add
adc
jae
scas
inc
xchg
clc
xor
(bad)
or
xchg
fwait
aaa
(bad)
pop
mov
cmps
cmp
mov
and
adc
imul
aas
ror
xchg
sbb
inc
in
sbb
xchg
xlat
loope
fs
ret
xor
xchg
inc
mov
xchg
dec
pop
sbb
fld
pop
repz
mov
ja
cmp
xor
in
jle
xchg
pop
cmp
cwde
and
mov
mov
pop
lahf
xchg
mov
sub
or
mov
mov
call
inc
dec
xchg
sahf
jg
or
stos
loope
cmc
ret
push
fwait
add
movs
mov
pop
mov
test
ins
sbb
rcl
cmp
mov
ins
xchg
dec
adc
test
jo
leave
dec
or
jecxz
aas
inc
icebp
rcr
jmp
mov
pop
fwait
xchg
push
dec
(bad)
cld
cmp
retf
imul
push
ret
jl
cmp
dec
xchg
fs
and
lods
sub
aam
(bad)
xchg
lock
xchg
rcl
outs
sub
sar
mov
fwait
daa
xchg
xchg
test
sti
xor
adc
(bad)
xchg
fist
aas
fstp
int
or
cmc
loop
nop
test
sub
clc
inc
daa
fcom
div
out
into
mov
and
mov
cld
je
xchg
push
mov
fild
scas
setnp
gs
call
xchg
jp
in
dec
xor
push
xchg
cmp
test
out
dec
enter
xchg
int3
inc
mov
push
pop
shr
into
xor
xchg
dec
sub
int
push
xor
in
movs
adc
sti
inc
pinsrw
mov
adc
jle
icebp
jmp
lods
add
or
inc
dec
jns
xchg
je
mov
xchg
jge
dec
mov
xchg
retf
cmps
pop
hlt
shl
arpl
inc
ins
ficom
fdiv
pusha
stc
hlt
xchg
les
add
adc
push
fs
and
mov
fisubr
mov
xchg
xor
xchg
in
fwait
and
pop
ja
cmp
jp
cmp
data16
mov
xchg
mov
xchg
pop
nop
adc
jae
adc
xchg
out
rol
sub
scas
xchg
sbb
daa
retf
wbinvd
jnp
jle
shl
or
xchg
inc
clc
pop
push
cwde
mov
adc
enter
shl
mov
jmp
sub
mov
sar
pop
push
adc
fldenv
mov
xchg
test
lahf
bnd
(bad)
xchg
int
or
fcom
xchg
pop
jne
add
ror
xlat
jmp
jl
sbb
and
sub
inc
xchg
neg
xor
inc
sub
mov
jge
push
gs
jle
mov
add
mov
sub
sbb
mov
movs
xchg
inc
retf
sbb
or
xchg
ror
mov
dec
rcr
adc
and
xchg
cmp
dec
push
xchg
xchg
loopne
and
add
inc
arpl
retf
cs
or
movs
gs
(bad)
mov
sub
mov
ficom
mov
cdq
push
into
clc
pop
into
jne
mov
adc
xchg
xor
test
sub
xchg
loop
aad
cmp
nop
and
cmp
xchg
cld
cmp
cmc
xchg
adc
addr16
xchg
mov
mov
xlat
fwait
add
in
push
xchg
cmc
sar
mov
or
xchg
xor
adc
xchg
and
dec
or
cmps
push
in
xchg
xchg
and
stos
xchg
shl
sub
arpl
mov
inc
inc
xchg
xchg
pop
sub
imul
(bad)
xchg
cmp
in
outs
into
push
xchg
lahf
ret
in
cli
or
xchg
dec
and
cmps
out
mov
push
dec
into
jge
stos
shl
add
ja
xchg
sub
jno
adc
mov
hlt
add
aad
pop
pop
mov
adc
xchg
push
mov
movs
inc
adc
aas
mov
rol
cmp
dec
mov
test
xchg
xlat
cli
mov
test
cmc
jp
inc
cwde
pop
sub
jns
push
xchg
inc
xchg
pushf
sbb
jae
popf
call
pop
lods
out
repz
mov
xchg
out
mov
daa
jbe
mov
push
cmp
mov
push
mov
lods
cmps
dec
sbb
nop
mov
lds
lea
xchg
hlt
cwde
aas
and
adc
xchg
sub
(bad)
in
fxch
xchg
xchg
fcomp
add
xchg
mov
nop
and
xchg
xor
xchg
push
call
das
xchg
pop
retf
pop
add
es
ret
test
jmp
gs
mov
and
xchg
cmps
clc
arpl
popa
jnp
dec
xchg
xchg
iret
outs
cwde
mov
pop
xchg
xor
adc
xchg
js
out
and
mov
dec
xchg
cli
xor
or
xchg
xor
hlt
ss
sub
pop
test
stos
mov
xchg
test
mov
mov
dec
int3
movs
shl
retf
mov
pop
or
xchg
or
xchg
jmp
and
mov
jmp
mov
sbb
pop
data16
inc
xchg
daa
clc
jne
retf
jp
in
xchg
mov
ret
cmp
mov
loop
fnstcw
push
dec
daa
xor
mov
xor
mov
sbb
mov
stos
push
daa
push
cli
xchg
lods
sbb
mov
mov
mov
(bad)
xchg
and
sub
test
xchg
into
jbe
or
(bad)
iret
push
sbb
aad
dec
nop
cmp
jbe
pop
pop
mov
retf
xchg
sub
rol
push
das
and
xchg
sbb
jb
loopne
cmps
adc
sbb
mov
in
push
push
adc
dec
lea
mov
xor
ja
je
lock
xchg
aas
xchg
test
mov
(bad)
xchg
and
(bad)
faddp
fwait
or
and
(bad)
imul
mov
xor
neg
aaa
inc
jg
mov
les
ret
mov
xchg
fistp
mov
inc
pop
ss
test
stos
cmc
xchg
pop
aas
frstor
je
push
leave
xchg
int3
pop
out
out
jmp
call
cmp
leave
sub
and
xchg
fild
ficom
inc
ins
test
call
pusha
outs
adc
je
xchg
jl
scas
(bad)
adc
in
ss
popa
push
push
xor
leave
jp
mov
(bad)
sub
fwait
mov
mov
or
ins
add
xchg
loope
xor
mov
inc
mov
push
test
sti
sbb
add
add
cmps
xchg
pop
fstp
xchg
sar
jle
test
outs
sahf
fbld
pop
xor
mov
inc
inc
fcomp
xchg
add
and
lock
xchg
in
imul
cmc
cdq
dec
cwde
xchg
stc
cmp
xchg
mov
xchg
mov
sbb
xchg
inc
add
in
mov
mov
shl
mov
sub
das
std
mov
mov
js
sbb
xor
and
xchg
mov
and
xchg
imul
pop
mov
push
mov
push
pop
adc
dec
nop
int3
pop
test
xchg
outs
test
xchg
xor
movs
stc
mov
es
ficom
idiv
popf
mov
in
fdecstp
ss
sub
or
out
push
adc
sbb
leave
js
sub
mov
xchg
cdq
push
mov
xor
jb
xchg
pop
jne
loop
ja
xchg
mov
pusha
xor
xchg
pop
mov
(bad)
repnz
in
xchg
xchg
mov
rol
pop
adc
xchg
jmp
pop
inc
xchg
in
les
out
(bad)
jmp
int3
push
inc
adc
mov
clc
xchg
movs
xor
fisubr
push
aam
xchg
jecxz
and
push
popa
cmc
add
mov
jne
jmp
retf
mov
dec
jns
sbb
jp
dec
fst
and
or
sbb
sub
push
or
mov
dec
mov
scas
jg
push
aas
push
cmp
arpl
adc
adc
ja
cmps
dec
pop
retf
xchg
sbb
mov
shl
push
dec
inc
ret
mov
ss
or
xchg
(bad)
ret
xor
jmp
push
add
xchg
shl
push
xchg
inc
mov
xchg
in
iret
bound
xchg
retf
je
imul
popf
pop
mov
jb
sbb
adc
xchg
xlat
jo
in
xchg
bound
loope
jno
xchg
cld
jnp
push
leave
in
add
xchg
inc
or
xchg
dec
pop
repz
push
je
xchg
dec
or
in
mov
pop
repz
mov
cs
mov
xor
iret
(bad)
enter
xchg
cdq
adc
xchg
test
push
sbb
mov
push
dec
(bad)
rol
fimul
into
and
or
add
adc
pop
shr
sub
xchg
sub
mov
pop
sbb
pushf
xchg
iret
retf
mov
cmps
(bad)
sbb
adc
repz
sub
cli
pop
push
cdq
gs
ja
fimul
add
push
xchg
cmp
mov
lods
cmps
inc
sbb
mov
mov
ss
mov
inc
or
les
mov
jno
push
dec
mov
das
cmp
(bad)
xor
sub
std
pop
xchg
arpl
in
movs
pop
iret
or
or
bound
ss
jno
mov
and
add
(bad)
loop
cmp
xchg
(bad)
leave
dec
aad
push
aam
and
aam
in
in
add
xchg
xchg
sbb
push
rcr
xchg
sub
dec
ret
cmp
sub
xor
xchg
cdq
shl
sub
(bad)
xchg
push
leave
mov
inc
sbb
mov
data16
mov
addr16
test
ret
jne
jbe
loopne
lods
push
dec
je
sbb
int
mov
stos
mov
ja
jne
inc
pop
pushf
push
xchg
and
xchg
pop
add
in
lds
mov
jle
mov
clc
mov
dec
arpl
or
xor
and
adc
xchg
cmc
nop
into
adc
imul
sub
ds
adc
aas
push
jno
int3
fnstenv
mov
bound
jns
out
push
sti
pop
xlat
call
cmp
in
shl
fs
xchg
cmp
lock
mov
push
cdq
scas
mov
inc
dec
aas
mov
enter
xchg
repz
adc
pop
dec
xchg
adc
int
(bad)
jp
call
xchg
je
dec
fbld
adc
mov
rcl
leave
enter
pop
fs
pop
in
jmp
aas
pop
fst
jo
pop
push
repnz
xchg
dec
sbb
(bad)
jb
mov
pop
pop
sbb
test
fdivr
xchg
adc
add
mov
sbb
mov
cmp
xchg
xchg
icebp
push
push
repz
nop
fcom
xchg
dec
push
or
sub
xchg
test
or
push
js
jo
cmps
out
or
pusha
ins
sti
int
adc
imul
xchg
es
mov
dec
or
in
adc
stc
cmp
(bad)
mov
push
adc
mov
mov
call
inc
stos
xchg
and
inc
xor
push
sub
cmp
punpckldq
dec
xchg
hlt
mov
stos
int3
adc
cmp
xor
inc
pop
xchg
jae
adc
xchg
mov
les
pop
xchg
fwait
xor
jl
dec
stos
mov
aam
cmps
jmp
or
mov
sbb
sub
mov
and
inc
loopne
xchg
(bad)
xor
or
cmp
sub
scas
mov
pop
daa
pusha
mov
mov
jbe
test
enter
call
lods
mov
mov
jl
xchg
movs
mov
xchg
push
pusha
stc
jg
pop
xchg
sub
(bad)
mov
data16
test
loope
xchg
xor
mov
jne
sub
jp
cdq
test
ins
mov
in
xor
or
mov
dec
imul
xchg
iret
arpl
mov
int
mov
nop
aas
xchg
aaa
sti
push
push
arpl
js
stc
xchg
mov
jg
sub
pop
xchg
mov
adc
mov
xchg
sub
es
ret
xor
push
mov
cmp
xchg
popf
add
dec
in
mov
sti
mov
(bad)
out
(bad)
sub
xchg
je
lods
lahf
pop
arpl
jae
adc
mov
mov
jge
cmp
xchg
xchg
mov
or
xchg
in
xchg
cld
inc
rol
xchg
loope
cli
clc
aas
xor
xchg
repz
or
or
xlat
call
push
out
sub
icebp
fwait
(bad)
clc
dec
rcl
sbb
cmp
add
jb
call
out
and
push
and
adc
inc
xor
pop
call
(bad)
jae
jmp
cmp
ds
sub
or
cwde
iret
and
les
pop
mov
jecxz
inc
push
inc
lods
(bad)
add
xchg
jp
fiadd
ja
mov
jno
mov
and
adc
xchg
or
bound
xchg
adc
xor
popa
stos
adc
popf
add
popa
rcr
xchg
sbb
sbb
xchg
ss
(bad)
aad
xchg
push
ja
push
xchg
jns
inc
mov
xchg
mov
jge
enter
int3
xor
add
pop
pop
xchg
test
shl
jmp
inc
fwait
imul
add
sub
gs
mov
xchg
add
das
inc
cmc
jge
xchg
shld
xchg
ficom
iret
sbb
xor
ss
outs
xchg
xchg
ins
push
pop
sti
xor
cdq
add
cwde
hlt
push
shr
lock
not
jecxz
xchg
push
enter
cmp
into
xor
push
xlat
jp
in
fs
ja
xchg
addr16
jb
push
mov
pop
xor
sbb
dec
pusha
adc
outs
mov
int
and
mov
mov
mov
dec
dec
cld
xchg
je
xchg
add
sar
fwait
loope
add
icebp
mov
cmps
add
xchg
test
fstp
pop
(bad)
in
and
xchg
stos
ins
xchg
ss
adc
shl
mov
xor
xchg
iret
retf
ins
jbe
int3
mov
sub
push
(bad)
and
retf
fs
lea
in
(bad)
and
cmp
(bad)
push
fistp
ret
xor
xchg
das
clc
in
out
arpl
xchg
sub
push
fwait
sub
push
dec
mov
ret
mov
push
rcl
xchg
mov
dec
sti
mov
xchg
into
xor
inc
or
xchg
push
pop
ds
hlt
add
or
xchg
jnp
and
mov
retf
mul
mov
js
std
pop
push
idiv
xchg
xor
mov
xchg
inc
cmp
in
cmp
jecxz
jno
fnsetpm(287
cmp
arpl
or
xchg
pop
fwait
sbb
xor
sub
cmp
aaa
cmp
icebp
aam
jle
sti
mov
imul
iret
movs
rol
xchg
fwait
cmp
push
mov
fmul
test
cmp
push
enter
dec
outs
cmps
fistp
sbb
mov
xchg
xchg
mov
(bad)
and
iret
push
into
int
xchg
scas
or
xchg
icebp
xchg
aaa
ja
mul
das
pushf
xchg
movs
jge
ins
or
pop
daa
mov
mov
fidivr
adc
mov
ins
and
rol
cmps
pop
sub
sub
mov
mov
(bad)
lods
mov
data16
jne
xor
jle
adc
xchg
add
inc
pop
loope
cdq
movs
stc
adc
into
adc
jmp
test
cs
mov
mov
jl
aam
cmp
xchg
mov
div
mov
jp
pusha
shl
mov
jb
jno
cmp
loop
movs
or
push
inc
hlt
ret
in
mov
add
outs
leave
sub
mov
lods
dec
jb
xchg
xlat
mov
adc
repz
push
sub
ja
jae
popf
cmp
add
adc
inc
xor
mov
push
fnstsw
mov
sbb
xor
inc
iret
mov
add
adc
fidivr
sbb
call
add
mov
add
xchg
mov
jmp
call
push
xor
fdiv
xor
xchg
retf
js
cmc
inc
repz
xchg
cli
mov
movs
xlat
xchg
cmp
dec
xor
iret
mov
int3
xchg
mov
in
(bad)
fld
rcl
xchg
cld
lea
jns
dec
xchg
nop
pop
xchg
dec
push
bound
fnsave
iret
adc
aam
xchg
xchg
popf
push
adc
pop
and
xchg
add
sbb
mov
xchg
lds
inc
out
cmp
fwait
idiv
mov
xlat
aas
std
inc
add
(bad)
xchg
nop
in
pop
repnz
je
push
xchg
mov
xlat
fist
xchg
mov
sub
data16
dec
cmp
(bad)
xchg
xlat
scas
or
aas
call
test
xchg
xchg
adc
jmp
push
xchg
mov
dec
mov
dec
fld
(bad)
xchg
mov
xor
xchg
mul
mov
mov
push
cmp
hlt
adc
cmovnp
cmc
xor
int3
scas
mov
xchg
lock
ins
and
retf
xchg
mov
push
adc
sbb
push
outs
fs
daa
cmc
int
(bad)
pop
push
or
mov
or
pop
adc
arpl
je
mov
and
cmps
sbb
xchg
gs
adc
xchg
fs
and
push
lds
sbb
and
xchg
dec
mov
pop
popa
jl
sbb
xchg
or
bound
add
fisttp
add
and
xchg
popa
lds
or
int
movs
outs
loop
mov
mov
outs
push
mov
adc
pop
std
imul
xchg
mov
icebp
add
leave
cmp
inc
jecxz
xchg
xor
push
push
sub
out
add
xchg
mov
popa
and
add
add
add
xchg
and
in
cwde
ss
iret
cs
sub
inc
imul
shl
loop
pusha
daa
cld
push
fwait
sbb
js
ins
xchg
sbb
xchg
fild
xlat
xchg
(bad)
in
push
xor
movs
and
stos
lahf
test
xor
lds
scas
std
(bad)
out
and
(bad)
xchg
sub
pusha
mov
repnz
(bad)
xchg
push
and
jg
xchg
mov
or
(bad)
ja
popa
lock
push
(bad)
in
jae
(bad)
mov
sbb
xchg
mov
pop
mov
cmp
in
xchg
mov
jmp
out
xchg
cli
inc
mov
ds
lock
fst
pop
mov
rcl
pop
fcmovnb
xchg
and
sahf
xor
cdq
cmp
rcl
adc
jl
pop
das
add
xchg
or
sub
jno
shl
aad
movs
cmps
mov
sub
outs
xchg
mov
ret
sbb
dec
imul
mov
adc
rcr
mov
pop
adc
cmp
ficomp
mov
xor
jbe
mov
xlat
je
mov
js
xchg
test
dec
mov
adc
mov
or
or
xor
inc
xchg
pop
aas
call
jnp
iret
xchg
lea
add
or
cmp
cld
xchg
mov
in
leave
or
dec
out
mov
aam
addr16
push
mov
in
aam
pusha
xor
add
cmp
add
(bad)
adc
mov
pop
int
mov
xchg
inc
cmps
sbb
imul
mov
adc
mov
xchg
add
sbb
sahf
xchg
test
aam
(bad)
adc
lea
shr
or
fild
xchg
push
sub
jmp
adc
popf
jp
loope
or
in
daa
iret
xchg
jmp
into
mov
sbb
mul
xchg
adc
add
icebp
loopne
mov
jge
xchg
ins
pop
adc
pop
mov
mov
cmps
cmp
mov
jmp
xchg
shl
sbb
or
push
test
cli
imul
cmp
stc
hlt
sub
inc
xchg
inc
in
adc
xchg
push
sub
test
aad
sbb
push
sbb
or
sbb
mov
xchg
(bad)
inc
fcmovnu
fistp
mov
cmp
jb
xor
mov
leave
xchg
mov
sti
adc
int3
jecxz
push
adc
in
jno
mov
xchg
push
mov
xchg
or
mov
xchg
add
xchg
fsub
xlat
sbb
cld
rcl
shl
cmps
cli
call
test
sbb
jae
bound
je
xor
xchg
sub
jne
sbb
jg
cmp
iret
add
jnp
dec
mov
int3
pop
ss
mov
inc
test
jl
(bad)
dec
sbb
fild
lahf
into
xchg
jecxz
out
dec
jb
jp
xchg
popa
sub
mov
cmp
aad
xor
call
js
mov
adc
sub
adc
hlt
daa
xor
or
test
sbb
mov
mov
aas
stos
clc
pop
(bad)
sti
lods
sub
je
xchg
push
(bad)
mov
add
aam
sbb
inc
xchg
push
aas
ins
pop
xor
xor
lods
das
xchg
imul
jo
rcl
jno
stc
xchg
cmc
xchg
push
adc
mov
cmc
fimul
jo
adc
inc
ret
push
mov
dec
xchg
push
sbb
out
sbb
mov
aam
pop
mov
add
add
adc
jb
adc
test
xlat
push
xchg
sar
and
imul
push
lock
aam
mov
jnp
xchg
xchg
xchg
ret
mov
push
xchg
xor
ins
add
jnp
push
iret
cmps
movs
popf
std
outs
sub
imul
pop
jecxz
cmp
or
mov
inc
dec
adc
ja
cwde
xchg
rcl
lock
movs
mov
xchg
arpl
pop
xchg
out
mov
xchg
lock
addr16
mov
popf
outs
pop
in
pop
xchg
push
sub
sahf
xchg
fmulp
loopne
pop
arpl
xor
repz
mov
xchg
dec
dec
imul
mov
adc
or
push
jecxz
xchg
jle
not
shl
xchg
in
stc
rcr
movhps
hlt
and
cmp
jne
aad
cmp
lahf
stc
in
ins
mov
cvtps2pd
call
sbb
mov
adc
shl
mov
(bad)
and
inc
pop
aam
loopne
xchg
cmc
xchg
jle
stos
rcr
xchg
int
sahf
in
sub
xchg
adc
les
jbe
mov
mov
mov
adc
sbb
in
jg
test
std
nop
test
fwait
cmc
out
leave
sbb
mov
jbe
cdq
push
shr
das
inc
push
scas
outs
into
add
test
pop
jle
jl
mov
push
sbb
add
xchg
out
pop
dec
pop
xchg
xchg
dec
neg
adc
pop
push
movs
jge
jns
xchg
in
rcr
cmc
xchg
daa
mov
ss
fsubr
mov
ja
stc
xlat
push
loopne
pop
mov
fwait
jo
bound
dec
test
fwait
ja
and
lock
inc
push
pop
movs
rol
ret
imul
fidiv
imul
xchg
shl
push
xor
hlt
sbb
xchg
add
mov
dec
xchg
jl
mov
mov
adc
and
mov
aam
les
xchg
stc
aas
jb
es
imul
mov
add
xchg
fnstenv
dec
lds
sbb
mov
inc
jmp
scas
sti
xchg
cmp
xor
repz
jne
out
sbb
out
ret
lock
xchg
and
popa
shl
mov
add
push
cwde
outs
ins
xchg
das
and
push
xchg
jns
shr
xchg
push
mov
mov
sbb
arpl
dec
sbb
sbb
stos
mov
inc
in
xchg
into
daa
mov
mov
pop
mov
pushf
xchg
sbb
fadd
xchg
xor
adc
movs
mov
aam
cdq
xchg
jg
fcom
and
xor
cmps
xchg
sub
or
jmp
add
mov
sub
push
and
ds
push
fldenv
and
adc
jg
movs
popa
or
scas
leave
int
xchg
dec
ror
xchg
movs
imul
sbb
rcl
aam
test
push
or
shl
mov
sbb
das
aam
xchg
sub
inc
es
jb
gs
pushf
jmp
xchg
in
test
outs
int3
jnp
jl
mov
retf
scas
fidivr
xchg
test
mov
or
cdq
in
pop
adc
in
sbb
sbb
xchg
xchg
test
sub
popa
xchg
mov
dec
cmp
sahf
into
adc
pop
movs
std
aad
adc
xchg
hlt
sbb
push
loop
loope
xor
in
mov
adc
nop
adc
sti
leave
xor
(bad)
aam
test
mov
cdq
or
cmp
and
cwde
and
outs
xchg
sti
fimul
paddq
xchg
xlat
mov
xchg
nop
xchg
cmps
(bad)
jbe
int
push
xchg
fs
rol
sub
xchg
dec
jo
je
inc
out
xchg
outs
sbb
pop
into
test
sbb
xchg
adc
xor
or
outs
pop
jbe
cmps
fld
iret
xchg
or
mov
mov
push
icebp
mov
(bad)
rcl
add
mov
arpl
mov
jbe
mov
aad
ins
dec
mov
outs
add
xor
mov
xchg
pop
jmp
call
ins
xchg
fmul
mov
adc
xor
stc
imul
xchg
fistp
(bad)
sti
jnp
nop
mov
loope
jmp
mov
jmp
add
and
xchg
or
add
aad
mov
mov
mov
push
shl
xchg
cmp
push
das
mov
pop
ffree
aaa
mov
adc
jns
xchg
push
add
arpl
jmp
sbb
mov
xchg
ret
ins
inc
fidiv
pop
inc
imul
or
aaa
sub
adc
mov
adc
cmp
mov
xchg
outs
xchg
out
cmp
gs
xchg
xchg
or
fwait
or
jmp
xlat
fwait
loope
add
enter
clc
pushw
dec
fst
xor
lods
push
and
xchg
push
fist
xchg
dec
or
(bad)
mov
inc
scas
adc
int
out
or
xor
rcr
cli
sub
push
adc
or
lahf
inc
rcr
mov
mov
cmc
mov
adc
xchg
cli
pop
rcl
sbb
movs
xchg
aaa
push
rol
(bad)
in
xchg
test
enter
push
rcl
mov
xchg
mov
mov
jo
mov
cli
push
les
cmp
das
mov
aas
cmp
sub
mov
pop
jns
jecxz
mov
xchg
(bad)
call
or
xchg
cmp
pop
push
adc
mov
dec
xchg
pop
mov
js
test
push
push
sbb
stos
repnz
pop
mov
mov
fbstp
add
xchg
add
ins
fidivr
sub
call
xchg
cld
xor
or
fwait
leavew
adc
mov
jnp
jmp
lods
aas
dec
sbb
cmc
adc
fwait
cmps
inc
je
xchg
in
lods
bound
ss
es
mov
nop
mov
add
int
mov
cmp
sub
inc
push
ss
mov
or
mov
xor
mov
fs
ins
and
(bad)
jp
add
xlat
das
mov
push
xchg
nop
xchg
cmp
jmp
push
xchg
cs
mov
xchg
shl
or
cwde
lock
xchg
dec
sbb
lds
test
cmc
(bad)
push
and
jl
jae
dec
mov
test
std
mov
scas
js
jmp
inc
cmp
dec
adc
mov
inc
movs
pop
xchg
push
sahf
cwde
dec
xchg
sub
rep
fwait
sub
pop
mov
je
jo
inc
xor
or
adc
leave
outs
adc
lahf
xchg
mov
sahf
mov
sbb
mov
pop
and
push
xchg
jl
xor
stc
add
dec
xchg
ss
mov
stos
xor
add
mov
ja
dec
xchg
xchg
jecxz
adc
xchg
(bad)
mov
cmps
mov
fs
push
cs
xchg
mov
leave
fadd
fist
sub
cmc
ficom
xchg
xchg
pop
and
jbe
jnp
ds
lods
(bad)
or
xchg
pop
mov
fwait
xchg
stos
adc
pop
ja
lahf
xchg
or
xchg
xchg
sub
or
push
retf
push
xchg
popa
mov
mov
fadd
(bad)
bnd
pop
xchg
xchg
mov
cli
xchg
adc
int3
fist
call
test
mov
sti
test
hlt
(bad)
scas
les
xchg
adc
jmp
jge
sti
mov
pop
and
(bad)
or
xchg
xchg
out
mov
lock
jl
pop
dec
bound
nop
mov
mov
fist
jmp
inc
sub
jnp
fld
add
mov
adc
loope
xor
mov
adc
fistp
cld
adc
push
add
adc
xchg
mov
jmp
mov
or
cmp
and
or
(bad)
bnd
mov
test
and
ret
push
add
mov
ror
mov
aas
jne
scas
and
mov
sbb
gs
jg
mov
scas
repnz
sti
xchg
pop
cli
add
push
adc
mov
loop
adc
mov
add
push
mov
repnz
popa
leave
hlt
jbe
push
xchg
mov
dec
lea
fsub
sbb
jge
add
mov
xchg
mov
xchg
test
into
das
push
sbb
jbe
jbe
xchg
jp
push
pop
fstp
call
cmp
add
and
adc
mov
inc
push
imul
push
sbb
(bad)
xlat
popf
xchg
or
cmp
xchg
or
loopne
fs
xchg
mov
mov
enter
dec
and
(bad)
cld
inc
mov
xchg
xor
mov
loop
addr16
mov
aaa
dec
adc
movs
xor
cdq
mov
dec
xchg
ror
daa
sub
ret
(bad)
mov
inc
stos
pop
bound
imul
nop
lahf
(bad)
rcl
call
sbb
adc
xchg
xchg
mov
sti
daa
out
pusha
sub
pop
dec
push
xor
jge
mov
scas
add
pusha
imul
leave
pop
fwait
mov
int
cmps
in
cmp
stos
push
xor
gs
xchg
mov
fwait
test
xchg
cmps
cmp
mov
and
into
retf
in
push
adc
in
adc
adc
shl
xchg
ins
pop
xchg
mov
je
rol
xchg
cmc
cmp
lea
mov
retf
or
push
or
cmp
adc
fs
adc
mov
mov
pushf
adc
jno
pop
cmp
aam
shl
and
or
mov
xor
rcr
shr
mov
jo
push
std
sbb
adc
pop
addr16
mov
imul
mov
dec
loopne
mov
jb
cli
arpl
sub
cmp
adc
fwait
scas
jns
clc
sub
jne
in
jge
xchg
jo
add
push
add
xchg
and
aaa
cmc
daa
xchg
les
or
mov
add
cdq
and
into
sbb
dec
xchg
es
rcr
xchg
imul
mov
or
push
fwait
call
lods
adc
mov
dec
loope
jge
fmulp
push
push
mov
xchg
int3
lods
mov
inc
xchg
mov
adc
stos
dec
cmpxchg
and
pop
mov
clc
mov
xchg
scas
enter
xchg
pop
jae
push
push
mov
into
xlat
mov
call
(bad)
pop
adc
nop
xchg
mov
das
cmc
and
sub
mov
pop
xchg
adc
jmp
or
(bad)
xchg
inc
inc
jns
retf
or
add
out
inc
xchg
test
xor
fwait
pop
jne
pop
xor
stos
lock
out
inc
dec
xor
(bad)
retf
aaa
pop
xchg
xchg
mov
mov
push
sub
pop
fistp
xchg
dec
mov
lods
(bad)
imul
fwait
xchg
xchg
push
xchg
es
inc
cmps
xchg
or
jbe
xchg
pop
sbb
scas
test
test
rcr
xchg
adc
movs
xchg
jmp
cmps
cdq
inc
lods
rcr
mov
cmp
in
push
adc
test
loop
cwde
pusha
or
enter
retf
mov
stos
cwde
adc
test
dec
xchg
mov
dec
nop
xlat
sbb
xor
lahf
outs
mov
and
jb
mov
pop
adc
add
out
addr16
movs
and
sti
jnp
and
pop
sbb
push
pop
or
add
xchg
xchg
cmps
lods
mov
retf
xchg
sub
and
jb
mov
xchg
mov
jo
lds
sbb
es
shl
add
sbb
push
fistp
test
xchg
sub
cmp
(bad)
sub
dec
sti
inc
jne
fsub
icebp
cdq
mov
mov
xchg
dec
or
test
and
cmp
xchg
mov
fcom
xchg
out
add
mov
xchg
push
jmp
pop
adc
in
mov
push
or
dec
mov
out
jns
xchg
add
sub
mov
mov
xchg
cmp
mov
jl
mov
add
ins
xor
xchg
imul
rcl
mov
xchg
mov
pushf
jbe
lods
addr16
xor
and
jae
add
cmp
cmp
mov
loopne
out
ficom
add
mov
nop
push
sbb
xor
cmp
ins
pop
test
mov
mov
mov
and
or
xchg
mov
adc
add
jge
sub
dec
push
ss
xchg
adc
inc
imul
push
je
gs
cdq
push
cmp
push
pop
(bad)
std
mul
xor
sub
mov
vdivpd
loop
mov
cmps
mov
or
inc
xchg
fwait
xor
push
xchg
ins
xor
dec
cmp
test
mov
jmp
xor
hlt
jecxz
xor
pop
inc
cdq
mov
push
xchg
sbb
fwait
cmps
inc
and
add
jns
mov
sti
mov
test
jge
sbb
xchg
pop
jle
ins
mov
aaa
and
xor
add
xchg
pop
cmps
int3
adc
xchg
leave
out
inc
or
xchg
adc
outs
push
dec
pcmpeqw
xchg
(bad)
sub
push
jmp
addr16
add
dec
sub
imul
sar
fs
in
mov
xchg
push
and
sbb
in
sahf
repz
jecxz
adc
xchg
out
push
cdq
mov
pusha
dec
mov
push
sar
ds
mov
jmp
jno
add
fsub
mov
pop
aam
jp
fbstp
iret
mov
jle
mov
hlt
das
imul
jl
lea
(bad)
jbe
movs
scas
int
into
in
mov
xchg
xor
adc
lahf
xchg
sbb
pop
outs
adc
xchg
dec
cmp
adc
loop
neg
jmp
seta
mov
mov
dec
ret
scas
xchg
loopne
jecxz
into
retf
test
arpl
xchg
xchg
push
sbb
shl
or
mov
xchg
xchg
cmp
pop
pop
test
push
pop
leave
xchg
int3
cmps
cld
stos
add
jle
(bad)
and
scas
cs
out
rcr
inc
xchg
(bad)
xchg
mov
daa
stc
test
popf
mov
mov
add
xchg
hlt
mov
sahf
inc
aaa
ret
mov
test
ficom
or
xchg
xchg
gs
outs
or
xor
icebp
jns
pushf
xchg
scas
iret
iret
jle
and
xlat
in
cmp
or
lahf
in
cmc
xor
pop
fwait
cmp
in
daa
into
xchg
fist
retf
mov
or
out
mov
(bad)
scas
jge
xchg
imul
sahf
inc
xchg
jns
sub
test
xchg
jle
pop
push
cwde
aaa
addr16
sar
cmp
mov
ret
mov
cld
xchg
dec
daa
scas
push
adc
rcl
sti
xchg
push
cmpxchg8b
xchg
js
fcmove
fwait
cmp
push
outs
cmp
mov
push
nop
hlt
std
in
les
das
or
mov
aad
xchg
leave
cli
or
das
in
ja
int
push
ret
xor
sbb
pop
popf
out
xchg
push
sub
loop
inc
jno
rcr
adc
xchg
sbb
mov
mov
xlat
mov
loope
outs
add
mov
adc
pop
cmc
sub
loope
mov
sahf
lahf
scas
mov
xchg
sub
sub
out
aam
pop
and
test
push
(bad)
lea
xchg
jle
xchg
call
call
xor
jl
mov
jp
mov
leave
fild
lea
(bad)
xchg
mov
fcomp
outs
push
outs
mov
xchg
rcr
add
sbb
adc
test
scas
and
xchg
mov
pop
data16
jmp
xchg
adc
sbb
mov
dec
or
test
pusha
mov
xchg
mov
xchg
mov
inc
retf
inc
xchg
adc
cli
pop
push
or
loop
xchg
jb
jbe
outs
mov
xor
lds
dec
and
pop
mov
jo
xor
pop
retf
fwait
in
xor
add
xchg
xor
or
(bad)
clc
fidiv
dec
cmp
jge
sub
mov
lds
push
in
xchg
mov
cmp
mov
mov
jmp
aam
mov
movs
adc
in
mov
jne
xchg
test
xchg
xor
retf
sbb
pop
mov
shl
xor
mov
mov
sbb
xchg
mov
xchg
sbb
jae
cmp
jb
xchg
and
cld
adc
(bad)
mov
sbb
xchg
stos
js
sar
or
xlat
and
xchg
lock
addr16
aam
in
gs
mov
int
hlt
sub
iret
dec
xchg
and
cmc
call
xchg
dec
adc
jne
test
xchg
dec
jg
ret
jge
das
adc
int
and
mov
pop
jge
xchg
mov
mov
cmps
xchg
push
pop
outs
dec
icebp
inc
xchg
and
jno
ins
imul
jnp
mov
or
retf
inc
or
rcl
inc
mov
jae
xchg
pop
out
cmp
shr
push
loope
aas
mov
push
mov
pop
cmp
ret
sbb
js
mov
xchg
and
mov
cmp
xchg
in
aad
and
sub
xchg
fstp
not
out
(bad)
les
mov
jns
jno
xchg
add
retf
sub
popf
adc
fwait
pop
push
div
and
dec
sbb
adc
push
adc
pop
dec
mov
add
adc
cmps
sub
or
xchg
mov
dec
pushf
jae
add
inc
xor
jb
addr16
fcomp
xchg
test
in
cld
hlt
cdq
xchg
jmp
xchg
and
xor
jp
fst
add
jmp
jg
fdivr
xor
or
xchg
pop
lods
inc
xor
add
fist
jl
mov
lsl
imul
push
rcl
adc
xchg
bound
pushf
pop
jmp
push
div
out
icebp
xchg
and
sti
shl
fist
jnp
(bad)
xchg
sahf
scas
out
jecxz
jno
xchg
dec
iret
hlt
or
adc
jg
mov
fs
sahf
mov
dec
lea
aad
js
lock
int3
pop
std
adc
sub
inc
xor
push
dec
inc
pop
xchg
xchg
shl
xchg
mov
adc
bound
fbld
cmp
fwait
in
outs
js
mov
adc
mov
adc
and
push
call
sbb
sbb
test
int
fistp
outs
xchg
push
sub
int3
mov
xchg
hlt
xchg
jb
je
pop
xchg
dec
lea
out
jl
fwait
lahf
mov
mov
ficom
and
je
dec
xchg
movs
in
pop
sti
rol
xchg
test
xchg
shr
pop
(bad)
fsub
mov
xor
movs
or
sbb
pop
int3
xchg
xchg
outs
es
adc
sbb
push
jb
lahf
xchg
stc
adc
clc
ins
fsub
test
mov
xchg
cmp
xchg
jno
xchg
std
sub
stos
mov
shl
pop
and
or
or
retf
aas
adc
or
or
mov
and
xchg
(bad)
out
mov
xchg
xchg
sub
arpl
in
hlt
jl
push
add
pop
jns
xchg
push
ds
mov
int3
mov
mov
xor
mov
inc
or
sub
and
into
mov
daa
(bad)
cmp
sahf
jmp
test
jb
mov
pop
aam
outs
xor
or
dec
mov
out
ins
pop
mov
fcmove
jmp
jle
mov
xchg
jno
push
es
test
mov
xlat
cs
xchg
shl
sub
inc
fwait
retf
repnz
ret
xchg
imul
ins
xchg
pop
dec
cmc
out
xchg
jo
jae
jb
mov
push
in
daa
ja
rol
jecxz
push
hlt
js
xor
and
pop
rcr
mov
dec
pop
les
xor
xchg
test
pusha
out
cmps
push
mov
xchg
pop
imul
pushf
xchg
jmp
fs
rcr
sbb
stc
mov
inc
xchg
mov
or
retf
cmp
or
jmp
push
xchg
pop
rcl
sahf
dec
add
add
inc
pop
fs
or
push
jno
(bad)
int
xchg
das
cwde
call
(bad)
iret
in
cmps
pop
mov
cmp
sub
sub
(bad)
fwait
lock
xchg
mov
or
dec
xchg
pop
xor
int
xchg
and
xchg
add
xchg
push
jnp
push
mov
mov
xchg
fild
in
lea
dec
stos
jno
mov
pushf
stos
addr16
add
xchg
(bad)
mov
xchg
aaa
test
stos
xor
gs
mov
dec
pop
xchg
int3
loop
ret
pushf
push
mov
xchg
sub
sbb
mov
bound
pop
scas
xchg
out
icebp
and
xchg
stos
xor
push
xchg
pop
sub
into
cdq
int3
leave
mov
add
xchg
movs
or
(bad)
fcom
adc
jns
mov
iret
test
mov
sub
ret
cmp
xchg
movs
jg
jmp
lock
int3
and
dec
cmp
push
xor
stc
add
ror
jno
dec
dec
xor
xor
sub
test
stos
out
dec
xchg
inc
xchg
fwait
push
hlt
faddp
js
sete
mov
push
jbe
xchg
in
adc
inc
mov
dec
mov
fist
xchg
xchg
mov
dec
push
jns
std
xchg
jae
xchg
clc
mov
pushf
push
out
(bad)
movs
cmp
cmp
fadd
jmp
inc
lahf
jp
mov
mov
cmp
fstp
movs
hlt
into
xlat
loop
xchg
sub
dec
sub
fsub
in
sti
or
xchg
add
mov
adc
lea
js
push
or
push
cmp
mov
repz
aam
enter
out
xchg
dec
and
xor
mov
jmp
xchg
sub
and
sbb
jmp
mov
xchg
dec
jmp
rol
popa
cmps
mov
xor
dec
repnz
fcomp
lods
xchg
inc
loope
mov
mov
mov
mov
push
mov
(bad)
jo
xor
xchg
ret
ror
mov
mov
cmc
fild
imul
and
pushf
sbb
clc
out
imul
mov
xchg
ror
pop
jbe
mov
sub
not
inc
or
loope
mov
cdq
cmps
xchg
or
popf
cld
pop
sub
xchg
xor
enter
jle
mov
jecxz
cmp
cmps
pop
jnp
dec
hlt
jmp
retf
xor
push
xchg
cdq
jmp
add
fst
ficomp
or
aad
je
xchg
ffreep
jbe
dec
mov
mov
mov
fwait
jmp
imul
push
or
aam
out
mov
fwait
(bad)
mov
leave
sbb
and
xchg
xor
or
mov
push
int3
aaa
out
ds
or
sub
pop
mov
xchg
dec
xchg
cmc
(bad)
(bad)
std
and
fistp
xchg
(bad)
add
xchg
pusha
fwait
push
xchg
dec
mov
in
arpl
inc
xor
adc
or
sar
mov
mov
aam
sbb
out
xchg
imul
dec
mov
adc
and
lds
xchg
fiadd
not
shl
adc
or
add
pop
stos
shr
push
xchg
ins
retf
test
mov
scas
test
inc
(bad)
xchg
cmp
mov
adc
xchg
or
inc
dec
popf
push
inc
fs
test
xchg
mov
xor
xchg
imul
(bad)
cmc
dec
in
xchg
cli
test
dec
hlt
xchg
pop
sbb
inc
xchg
out
cmp
test
xchg
xchg
je
jnp
sbb
daa
test
xchg
(bad)
pop
rcl
fwait
mov
in
push
jns
xchg
out
sub
(bad)
or
dec
adc
in
add
adc
mov
xchg
pop
jbe
nop
sub
sbb
xchg
mov
jno
push
adc
shl
out
sete
(bad)
mov
jge
cmps
ficom
ins
xchg
pop
or
adc
movs
dec
sahf
fwait
shl
call
sub
dec
or
or
popa
lea
pop
es
mov
push
sbb
add
pop
aaa
inc
xchg
inc
jge
mov
xchg
sub
jle
lock
ret
pop
nop
ss
and
dec
pop
adc
xlat
inc
sub
(bad)
push
outs
jge
(bad)
jp
ret
mov
push
ja
jns
jnp
mov
add
(bad)
(bad)
mov
xchg
pop
pop
scas
xchg
nop
fiadd
aas
xchg
and
shl
push
rcr
jg
ins
jl
mov
stc
outs
(bad)
xchg
out
repz
pop
aam
sub
mov
pop
jmp
mov
mov
pop
sbb
hlt
es
xchg
add
fist
stos
sti
aad
or
adc
xchg
push
lods
push
push
xor
cmp
xchg
jnp
adc
xchg
daa
sbb
xor
xchg
jecxz
inc
xchg
pop
sub
pusha
xchg
addr16
cmps
mov
repnz
fwait
cwde
or
les
push
fwait
or
fmul
or
aam
mov
and
xchg
inc
je
inc
adc
rcl
and
mov
in
gs
xchg
(bad)
int3
jecxz
jg
cwde
loope
mov
sub
addr16
icebp
xchg
pop
mov
inc
and
push
popf
not
leave
mov
je
jae
out
fwait
popa
xor
pop
inc
and
loope
mov
cmp
push
xor
push
xchg
mov
pop
cmps
daa
cld
lds
in
mov
add
cdq
clc
xchg
xchg
enter
fsubrp
cmp
sub
cmp
icebp
cli
xchg
ins
or
ficom
or
sbb
popa
xor
jb
icebp
(bad)
xchg
fdiv
aad
sbb
ins
retf
jnp
lea
loope
test
jae
cmp
sbb
mov
and
xchg
mov
add
ins
cwde
outs
mov
jno
push
push
sub
jb
push
add
adc
scas
mov
inc
(bad)
iret
xchg
push
outs
jle
pop
dec
(bad)
xchg
inc
mov
xor
xchg
xor
jns
sub
je
jmp
js
fist
shrd
xchg
push
xchg
and
push
xchg
dec
add
pop
lahf
mov
xchg
xchg
(bad)
daa
(bad)
jge
ret
xchg
cwde
push
movs
clc
mov
nop
xchg
jne
scas
fwait
pop
cmp
mov
and
pop
xor
xchg
cld
xchg
lahf
dec
xchg
icebp
ds
clc
adc
pop
dec
add
or
(bad)
lds
cmp
clc
sub
outs
jp
xchg
cmp
push
sub
adc
stc
test
xchg
stos
mov
aam
push
ja
jbe
(bad)
rcr
xchg
sti
push
rol
imul
(bad)
leave
and
rcl
sub
test
inc
cmp
lock
dec
xchg
push
cmp
pop
mov
es
xchg
jg
icebp
ret
sub
call
fisubr
jge
not
into
dec
bound
scas
xchg
hlt
mov
xchg
daa
xchg
movs
stos
jl
in
cmc
xchg
add
cmp
push
push
push
(bad)
cmp
mov
cmp
and
adc
jge
or
aas
enter
jmp
pop
adc
gs
mov
add
mov
xchg
lahf
xor
inc
mov
aad
rcl
xchg
test
jnp
fild
adc
call
rol
xchg
leave
mov
icebp
sub
jl
data16
mov
cmps
xchg
je
mov
lahf
xchg
fs
ins
lods
addr16
fidivr
adc
ja
imul
aaa
sahf
test
add
sub
inc
mov
adc
aaa
mov
inc
lods
jmp
jl
daa
pop
outs
push
ror
or
lahf
je
xchg
inc
neg
jmp
pop
push
nop
icebp
push
sar
xchg
movq
mov
inc
xchg
jne
and
leave
dec
mov
mov
fwait
in
xchg
cli
xchg
push
mov
inc
lock
or
xchg
dec
sub
leave
push
(bad)
mov
xchg
fs
adc
jl
ss
xchg
dec
mov
int
push
push
lods
xchg
cli
adc
fisttp
shl
shr
mov
sahf
add
sbb
jp
add
test
dec
into
xchg
shl
je
xchg
adc
mov
xchg
xchg
add
xchg
mov
into
xchg
call
scas
xchg
and
scas
mov
cmp
bound
dec
xchg
sbb
add
pop
inc
pop
cmp
stos
mov
and
jb
adc
mov
pop
lock
push
jl
xchg
or
mov
xlat
repnz
out
nop
in
adc
fimul
cld
inc
ret
jl
inc
mov
std
jne
(bad)
(bad)
hlt
or
and
imul
stos
pop
retf
lods
sahf
sbb
or
or
adc
movs
mov
retf
xchg
cmp
push
aad
in
jns
test
sub
pop
xchg
ja
hlt
xchg
xchg
xor
jb
add
dec
xchg
mov
enter
aam
xchg
rcr
in
ret
add
fisub
mov
(bad)
push
aam
call
mov
push
jnp
xchg
cmp
je
xchg
fist
or
outs
call
push
in
mov
je
cmp
xor
neg
in
or
jl
and
dec
jb
inc
sub
ret
jp
mov
mov
pop
jbe
int
push
ret
push
xchg
jle
test
fs
mov
retf
outs
ins
xchg
xchg
nop/reserved
shl
xchg
arpl
icebp
lods
movs
sub
mov
cmp
hlt
es
mov
mov
(bad)
call
or
lahf
adc
cmp
pop
xchg
jge
jl
sub
pop
(bad)
xchg
repnz
adc
clc
xchg
inc
js
fnstsw
cmp
sub
xchg
jnp
les
jno
xchg
std
push
stos
or
xchg
jae
je
push
(bad)
xchg
xchg
pop
mov
mov
sahf
pop
les
gs
push
xchg
mov
xor
dec
or
repz
and
and
jg
mov
mov
pop
in
mov
mov
jl
inc
or
sub
cmp
stos
xor
and
or
sahf
jae
xchg
out
add
pop
push
dec
xor
arpl
inc
add
xchg
fdiv
inc
not
das
fisub
cmp
hlt
je
lods
sbb
xchg
bound
dec
jns
push
dec
into
sub
adc
push
xchg
jle
fcmovb
xchg
lods
movs
out
dec
cld
fld
mov
and
xchg
pushaw
add
imul
xchg
adc
lea
mov
aam
lahf
leave
clc
push
nop
mov
retf
jne
fwait
xlat
ret
adc
pusha
icebp
xchg
jle
xchg
fcomip
and
xor
dec
mov
xchg
jle
cmp
das
retf
xor
mov
leave
jne
scas
sub
push
arpl
or
xchg
stos
sbb
and
into
(bad)
cmc
xchg
push
(bad)
popa
xchg
call
lds
push
iret
lock
ins
pop
cmp
test
dec
pushf
or
xchg
dec
jle
push
pop
xchg
mov
xor
out
xchg
sbb
hlt
mov
push
mov
lods
pop
jno
movs
push
cmp
scas
dec
lea
cmp
or
int3
dec
mov
cmp
ins
mov
fs
js
scas
and
dec
push
aam
call
hlt
push
adc
mov
not
xchg
test
lds
xchg
or
call
add
or
enter
out
aad
ds
sbb
push
mov
sahf
sbb
hlt
cmp
sub
xchg
(bad)
xor
retf
mov
enter
add
mov
xchg
xchg
fstp
sub
jle
xchg
test
cmc
sar
mov
cld
dec
push
xchg
push
jmp
lahf
sbb
int
repz
mov
and
ins
aad
loope
retf
sub
bound
push
xor
ficom
fwait
es
sbb
jae
push
mov
out
xchg
cmps
(bad)
and
xor
lahf
mov
int3
mov
xchg
loopne
in
enter
or
mov
pop
sbb
into
mov
xchg
ins
push
sub
sub
mov
mov
retf
push
pop
xor
lods
mov
lods
xchg
call
push
pop
icebp
mov
lahf
scas
jecxz
xchg
lods
mov
out
push
inc
sti
mov
inc
sar
imul
adc
xchg
fadd
into
std
ret
adc
xchg
(bad)
inc
(bad)
sbb
xchg
xchg
cmps
leave
arpl
pop
stos
xchg
push
je
add
aad
fcomp
sbb
cdq
xchg
bound
ret
adc
jnp
mov
sub
std
xor
aam
xor
mov
hlt
inc
mov
xchg
xchg
popa
std
inc
jmp
jo
dec
js
mov
push
inc
fsubr
rcr
test
xchg
cmp
sub
out
call
push
fstp
cs
aad
cmp
test
bound
xchg
pop
xchg
enter
fwait
daa
xchg
jo
jge
push
mov
fnstenv
in
xchg
cmp
mov
ret
cmps
cmp
push
xchg
ss
inc
add
test
scas
mov
mov
aam
arpl
in
mov
sahf
mov
mov
popa
mov
fwait
jae
aas
aaa
ins
jnp
xchg
pop
sub
mov
push
xchg
test
fist
jae
icebp
xchg
ins
add
adc
xor
out
xor
neg
mov
xor
push
shl
(bad)
in
xchg
dec
sub
js
or
xchg
push
lods
std
mov
fwait
mov
fist
xchg
inc
test
dec
clc
xchg
mov
std
jne
out
inc
xchg
add
xchg
jnp
mov
xchg
mov
shl
xchg
dec
dec
mov
xor
outs
fs
xchg
or
push
mov
sbb
adc
mov
aas
rcl
add
call
jge
inc
or
cwde
movs
aam
iret
pop
sbb
aaa
adc
test
cmp
xchg
movs
fwait
xchg
(bad)
cs
mov
pusha
sbb
jns
call
sahf
inc
lods
rcr
pop
add
shr
xchg
dec
(bad)
rcl
icebp
nop
push
xchg
jno
sub
out
rcr
xchg
lock
int
dec
fisttp
xchg
movs
scas
clc
sbb
cli
sti
mov
cmp
lods
push
icebp
js
in
cmp
aaa
sbb
xor
fdiv
stc
mov
rcl
dec
dec
gs
mov
pusha
fst
mov
mov
or
mov
xor
xchg
mov
test
sbb
fsubr
mov
rol
cmp
xchg
mov
mov
scas
jbe
inc
into
imul
jae
out
jmp
add
nop
fdivr
pop
xchg
push
movs
jecxz
dec
xor
fwait
inc
pop
push
or
movs
int3
mov
mov
pop
mov
xchg
or
dec
stos
out
adc
iret
loopne
in
mov
xlat
div
and
mov
ficom
add
adc
push
nop
jp
inc
aad
sti
(bad)
jge
adc
dec
test
sub
ins
scas
xchg
sbb
ret
into
lock
jbe
test
xchg
jg
or
push
jb
adc
out
mov
cld
xchg
iret
and
add
push
ficom
mov
scas
pushf
cmp
push
xor
push
out
pop
jmp
iret
loop
lock
call
sbb
xchg
jle
pop
and
mov
mov
outs
sub
mov
push
xchg
inc
ins
sbb
data16
inc
mov
fmul
cdq
xchg
xlat
in
in
stos
push
pop
test
bound
mov
xor
mov
test
ss
ret
dec
xor
repz
hlt
push
loope
into
(bad)
xchg
cmp
sar
push
xchg
mov
call
bound
jecxz
mov
xchg
dec
adc
ja
adc
nop
xchg
ret
cdq
shl
add
imul
pop
imul
xor
aad
xchg
pop
popf
dec
sub
mov
movs
pop
add
enter
add
pop
scas
retf
std
icebp
sub
xor
push
cmp
dec
(bad)
xchg
or
inc
jne
stos
xchg
inc
arpl
nop
mov
std
mov
imul
mov
mov
pop
(bad)
dec
ds
in
adc
lods
in
dec
xchg
cmps
clc
(bad)
xor
mov
push
lods
push
mov
mov
stos
pop
outs
mov
push
mov
xchg
ret
mov
xchg
into
sbb
mov
mov
jbe
sbb
xchg
jmp
xor
inc
mov
mov
push
xor
fsub
xchg
mov
push
mov
xchg
stos
mov
rol
add
adc
and
daa
call
add
add
xchg
ins
sbb
lods
icebp
xchg
dec
dec
dec
es
int
lea
retf
push
popf
fistp
mov
cmp
xor
adc
xchg
jecxz
push
fs
repnz
aam
div
sub
xchg
xchg
push
dec
arpl
mov
mov
sbb
cs
mov
mov
xor
cmp
rcl
mov
xchg
mov
mov
dec
pop
push
in
jl
popf
fldenv
pop
xor
cmc
xor
mov
icebp
fidivr
jecxz
xchg
jbe
out
pop
inc
and
xchg
std
sbb
mov
mov
xchg
punpckldq
mov
mov
push
adc
sti
xchg
sub
add
data16
adc
xchg
jp
add
adc
data16
xchg
add
jnp
stc
pushf
arpl
ucomiss
xchg
test
add
std
in
ins
mov
xor
mov
popf
or
scas
fcom
xchg
jmp
cdq
sub
jne
imul
rol
and
bound
add
jmp
jne
lds
xchg
and
mov
xchg
aad
call
push
dec
mov
ret
imul
adc
and
popa
xchg
xchg
jmp
inc
and
or
lea
add
pop
jmp
ds
neg
sub
xchg
xchg
(bad)
xor
or
xchg
cs
inc
imul
push
test
xchg
call
dec
mov
cdq
das
xchg
arpl
ret
and
and
(bad)
mov
jnp
xchg
push
jg
push
lods
mov
out
xchg
pushf
sub
xchg
and
mov
in
mov
jg
sbb
inc
add
jo
les
mov
xchg
xor
call
or
pusha
cwde
push
xchg
jbe
xchg
push
inc
int
fadd
xchg
ins
push
cmp
int3
fstp
ret
sub
lods
mov
jmp
or
adc
mov
jge
pop
fcom
stc
xchg
mov
dec
pop
mov
push
add
xchg
cmp
movs
int3
daa
ficomp
ret
stos
outs
mov
xchg
and
pop
xchg
lods
jg
fwait
adc
inc
jl
mov
mov
xchg
add
or
int3
sub
bound
mov
daa
sub
xchg
out
iret
cmps
cwde
js
xor
repz
ins
rcr
xchg
adc
clc
jge
ret
in
xchg
jp
int3
retf
adc
adc
xor
test
push
sbb
xor
mov
or
inc
aam
mov
cmp
push
xchg
(bad)
xor
cmps
add
jbe
xchg
ror
dec
shr
nop
adc
xor
xor
xchg
or
bound
sbb
inc
hlt
add
sub
(bad)
xchg
cmp
nop
idiv
add
jmp
dec
pushf
fist
scas
retf
(bad)
cmc
xchg
sbb
jmp
jb
xchg
pop
out
push
(bad)
sub
push
jp
lahf
js
sbb
or
xchg
int
xchg
pop
outs
call
or
les
lods
sub
xchg
retf
shl
(bad)
out
xchg
adc
push
(bad)
xor
mov
pop
xchg
mov
aad
mov
xor
call
pop
outs
add
adc
mov
ret
sti
jae
mov
inc
aam
mov
xchg
fs
jns
pop
js
xchg
mov
clc
and
int
xchg
dec
mov
push
pop
int
in
clc
in
pop
inc
xchg
pusha
and
bound
fwait
imul
push
stc
push
mov
aaa
(bad)
xchg
in
pop
add
pop
or
fist
ror
fcomp
mov
jmp
ror
enter
xchg
inc
bnd
retf
pop
xchg
call
ficom
sub
mov
addr16
push
ins
fwait
adc
jge
fwait
mov
jmp
lea
ficom
xchg
or
dec
mov
clc
in
sahf
xchg
xor
or
jecxz
push
sbb
xchg
popa
sbb
call
js
cmp
mov
cmp
mov
inc
fwait
jae
add
stos
xchg
ret
push
pushf
xchg
iret
fs
xchg
test
sub
in
adc
adc
cmp
add
or
daa
test
jle
mov
xchg
lfs
xchg
(bad)
push
sub
pop
jmp
(bad)
adc
and
xchg
call
adc
sbb
bound
(bad)
push
je
fisub
cmp
fsubr
pop
sbb
lods
(bad)
aam
nop
pop
mov
pop
out
test
aaa
push
mov
je
mov
popf
pop
adc
icebp
adc
xchg
mov
jb
enter
fwait
adc
push
jmp
int3
xchg
cdq
sbb
mov
xchg
hlt
leave
jbe
pop
mov
mov
rcl
adc
imul
mov
test
pop
popa
mov
in
adc
jg
xchg
jb
(bad)
mov
jmp
xchg
lods
gs
ja
sub
adc
fimul
and
es
pop
mov
jae
fstp
xchg
push
and
clc
and
mov
hlt
je
pushf
cmp
dec
(bad)
push
in
push
pop
outs
jge
xchg
adc
repz
std
test
jecxz
jne
mov
xlat
loopne
int3
xchg
add
and
adc
clc
adc
inc
dec
ins
xchg
or
and
xor
ins
pop
xchg
xchg
pop
xchg
out
fwait
xlat
(bad)
stos
xchg
lock
push
outs
xor
stc
ds
push
gs
dec
xchg
pushf
add
sub
inc
lods
dec
cdq
add
adc
repz
xor
sub
outs
or
xchg
sbb
shl
bound
or
adc
popa
nop
push
push
jo
xor
sahf
and
cmp
xchg
ret
into
xchg
and
xchg
pop
and
es
and
dec
rol
jnp
pop
xchg
test
jge
push
(bad)
out
sbb
and
pop
mov
stos
pop
xchg
jl
push
xor
aad
sub
rcr
xchg
lea
jne
je
xchg
push
sbb
adc
push
inc
adc
add
out
ret
xchg
add
fwait
push
xchg
fcom
popf
cs
adc
scas
setae
xchg
add
add
sbb
popf
ja
sbb
xchg
sbb
loopne
lods
cwde
cdq
icebp
xchg
(bad)
mov
xchg
sbb
int3
jmp
dec
mov
loop
mov
and
fdiv
jmp
and
(bad)
xchg
pop
lods
mov
jne
and
push
mov
in
jp
lahf
xchg
ror
outs
aaa
push
out
cmps
inc
xchg
shl
sbb
vmread
pop
fs
add
xchg
mov
pop
inc
jnp
les
sub
ins
jo
leave
mov
xchg
xchg
mov
into
test
push
xlat
and
lahf
xchg
push
inc
cmp
mov
outs
or
adc
repnz
push
sbb
xchg
xchg
jge
sbb
sub
je
sbb
js
mov
push
adc
push
xchg
out
dec
xchg
fisttp
jp
xchg
out
cmp
jae
aaa
out
xchg
movs
call
ret
cmps
sbb
xchg
push
cmp
jmp
outs
xchg
sbb
test
gs
pop
repz
aad
inc
mov
outs
jae
push
aam
pop
adc
shl
dec
stos
js
push
(bad)
xchg
xchg
mov
cwde
inc
jecxz
outs
sub
test
jbe
imul
adc
adc
les
xor
adc
ds
xchg
and
out
popf
xor
xor
nop
lahf
xchg
mov
iret
or
in
lea
adc
test
xchg
and
inc
lock
lds
shl
sbb
xchg
fcmovnb
mov
pop
mov
jns
repnz
dec
dec
cld
iret
aas
inc
adc
fistp
aad
adc
arpl
xchg
xchg
call
into
xor
and
repz
ret
pop
in
pop
out
shl
xchg
jbe
and
ins
mov
xchg
cmc
push
popf
icebp
sti
daa
movs
fidiv
lea
je
xchg
push
sbb
in
out
sub
sub
jmp
jb
js
fmul
or
movs
ds
xchg
mov
sti
aaa
jl
fist
xchg
dec
add
lods
fisttp
jo
mov
div
sub
fwait
pushf
jb
adc
push
mov
jo
xchg
(bad)
scas
mov
fdiv
sbb
jne
out
mov
mov
jbe
ins
pop
pop
popf
rol
xchg
repz
sbb
jg
mov
push
push
xor
xchg
popa
(bad)
out
js
adc
sub
xchg
lds
inc
xchg
jne
mov
mov
inc
sub
dec
popf
and
cli
(bad)
xchg
push
inc
mov
fcom
add
and
jo
jae
push
scas
(bad)
cli
inc
loopne
xchg
sbb
into
push
div
adc
test
jg
scas
pop
adc
(bad)
mov
push
xchg
(bad)
cs
jns
pop
mov
fst
addr16
pop
xchg
lahf
cmp
repz
into
fwait
mov
xchg
and
mov
xchg
cld
in
push
jno
aas
push
je
jae
xor
ja
and
xchg
cmp
movs
xchg
xchg
push
xchg
nop
xchg
adc
xchg
pop
icebp
push
push
add
(bad)
xchg
pop
pop
and
pop
xchg
loop
xchg
out
pusha
repnz
dec
jb
aam
fisub
in
das
adc
not
rcr
xchg
and
add
push
addr16
xchg
nop
lahf
mov
push
fdiv
xchg
fwait
cmp
test
add
cmp
mov
jmp
xchg
pop
xchg
inc
mov
js
xchg
jge
pop
rcr
jb
xchg
rcr
push
xchg
js
dec
jp
fstp
aaa
int
outs
adc
pop
scas
aad
(bad)
(bad)
mov
bound
ins
dec
aam
in
test
sbb
ds
xchg
xlat
scas
add
(bad)
jns
aas
mov
outs
nop
xchg
out
(bad)
loope
and
mov
and
out
adc
mov
cmp
mov
iret
sti
mov
retf
cmc
cmp
mov
cmp
(bad)
jo
xchg
(bad)
xchg
test
lahf
cmp
mov
jle
sahf
xchg
fisttp
cmps
rcr
iret
lea
dec
mov
mov
adc
jnp
outs
add
pushf
iret
pop
sbb
cwde
cmp
push
xchg
mov
imul
xchg
jne
pop
jmp
retf
fwait
pop
and
push
lea
das
popa
push
int3
in
sub
pop
sub
inc
dec
nop
mov
sti
pop
leave
inc
sbb
ret
neg
lods
jp
xor
and
(bad)
xor
and
pop
xchg
stos
inc
and
sar
sbb
mov
xchg
popf
push
imul
xchg
sub
arpl
mov
or
xchg
(bad)
pop
jnp
fdiv
add
xchg
or
in
ja
xchg
lods
imul
push
or
dec
std
dec
or
pop
fsubr
xchg
jnp
sub
xlat
mov
add
xchg
adc
imul
push
sub
or
mov
lock
dec
xor
mov
xchg
pop
aad
not
ins
xor
xchg
dec
xlat
inc
and
mov
xchg
repz
fidiv
push
hlt
gs
adc
fs
xchg
imul
data16
jl
adc
xchg
mov
adc
push
retf
jge
leave
rcl
push
adc
xchg
add
cdq
(bad)
pop
scas
and
adc
xchg
pop
jno
jmp
sbb
stos
xchg
and
loopne
inc
cmps
and
adc
cwde
push
cmc
cmp
sbb
sub
xchg
div
shr
mov
jmp
xchg
xchg
retf
jbe
fdivr
inc
mov
mov
xchg
and
scas
jae
push
lahf
sahf
outs
pop
add
pop
cwde
sti
adc
push
jnp
mov
or
sbb
lock
xchg
push
out
cmps
jl
iret
stos
cdq
js
xchg
pop
sbb
mov
fistp
dec
in
jmp
test
push
pop
push
xchg
xchg
fdivr
test
(bad)
(bad)
cmp
push
(bad)
shl
fild
push
adc
and
or
cli
xchg
inc
xchg
jae
jl
xor
cld
sar
push
das
mov
fist
jmp
outs
(bad)
dec
lea
loope
or
xor
dec
iret
xor
mov
mov
fsubr
test
jbe
aas
or
xchg
shl
dec
cwde
and
sbb
movs
ja
scas
xchg
cmp
jmp
mov
popa
sbb
cmp
call
adc
push
movs
xor
sbb
inc
mov
shl
sbb
nop
and
sti
xchg
es
ds
bound
xchg
jg
fdivrp
or
cmc
xchg
scas
lock
inc
ins
xchg
inc
cwde
jmp
inc
push
clc
push
lods
fnstcw
xchg
sub
pop
dec
inc
je
xchg
call
imul
xor
movs
aam
outs
lods
lods
xchg
jns
or
dec
xchg
pusha
mov
push
add
enter
jmp
(bad)
cmp
xor
pusha
ds
add
push
and
xchg
movs
std
xchg
or
rep
inc
bound
mov
repnz
lahf
xchg
aaa
lods
mov
xchg
loopne
(bad)
sub
add
cmp
ins
rcr
xchg
jno
cmp
inc
int
out
xchg
aas
xchg
ficomp
adc
or
xchg
jl
and
scas
push
nop
iret
mov
mov
mov
inc
add
pusha
in
sub
or
movs
xchg
fnsave
fcom
add
call
shr
in
std
mov
and
and
push
add
cmps
imul
inc
rcl
loop
popf
ss
in
cli
aas
pop
mov
mov
xchg
das
lds
rcl
cmc
inc
cwde
fwait
shr
shl
jmp
sbb
xchg
std
jno
sbb
pop
in
xchg
mov
cmp
mov
xchg
xchg
adc
sub
or
cmp
dec
into
cmps
mov
hlt
sbb
add
enter
test
push
lahf
rcr
xchg
mov
pop
nop
std
xchg
pop
mul
jo
outs
ret
sub
mov
push
sbb
mov
je
test
icebp
repnz
xchg
(bad)
inc
cmps
adc
cmps
xchg
xchg
not
movs
xchg
aaa
mov
data16
jecxz
xchg
jns
addr16
jo
test
in
and
repz
and
mov
loope
inc
push
popf
shr
mov
xor
jmp
push
pop
nop
xchg
and
cdq
push
cmc
cdq
cmps
cmps
adc
ins
mov
aaa
adc
mov
fcmovne
sbb
adc
cmp
adc
push
into
jg
cmp
jp
add
sbb
sar
add
div
xchg
xchg
cmp
push
xchg
push
pop
lea
lock
sar
adc
cmp
inc
adc
sub
mov
fucompp
cli
(bad)
not
fwait
das
jne
and
cmp
cmp
or
out
leave
std
xchg
imul
in
inc
dec
aam
inc
cmp
xchg
jo
mov
loopne
into
dec
mov
and
sar
adc
or
sub
test
pop
and
fwait
(bad)
jb
pop
sbb
arpl
xchg
lods
adc
mov
addr16
xchg
mov
rcr
push
fs
lods
pop
xchg
aas
stc
rcl
jns
ds
fisttp
sbb
(bad)
test
mov
jns
(bad)
out
int3
jle
jnp
sar
lock
fcom
cmp
jmp
add
mov
xchg
push
mov
ins
scas
mov
lahf
mov
lar
icebp
ret
xor
sbb
xchg
jno
adc
das
or
mov
ret
jne
sbb
jmp
sbb
push
gs
xchg
inc
jl
mov
and
outs
xchg
push
dec
mov
test
arpl
xchg
xchg
icebp
js
shr
mov
cmp
fistp
adc
xlat
repnz
jecxz
or
dec
icebp
dec
jmp
lahf
xor
mov
mov
retf
fld
and
mov
mov
fsubr
xchg
iret
pop
adc
mov
je
retf
jp
mov
adc
ret
push
mov
dec
xchg
push
mov
pop
jb
inc
pop
xchg
cmps
rcr
loope
xchg
inc
lods
mov
xchg
fistp
xchg
lea
adc
mov
xchg
mov
xchg
js
push
sub
xchg
push
mov
popa
sbb
into
arpl
or
inc
mov
dec
rcr
fwait
cld
pop
out
fcmovu
add
mov
mov
inc
cmp
and
mov
adc
sar
mov
push
hlt
jnp
mov
dec
int
ficom
test
cwde
xchg
mov
ins
adc
mul
and
xchg
or
(bad)
and
daa
mov
retf
ins
das
push
and
push
repz
fiadd
inc
in
stos
sub
fimul
pop
nop
fild
call
shl
adc
jmp
jns
xchg
lea
imul
sub
fld
and
mov
push
jbe
adc
icebp
fsub
mov
and
xchg
mov
fwait
push
sub
jmp
addr16
aam
mov
dec
sub
pop
outs
mov
popf
call
add
adc
xor
adc
cmps
xchg
sbb
dec
mov
test
xor
aam
or
stos
jne
cli
shl
pusha
lahf
mov
aad
aas
in
and
in
push
xchg
or
xor
mov
stos
add
push
mov
rcl
jnp
xchg
mov
jo
fadd
sub
aam
bound
mov
dec
adc
mov
mov
sbb
mov
jbe
sbb
jmp
xchg
inc
not
leave
ss
(bad)
enter
(bad)
lods
xor
dec
xchg
cmc
icebp
xchg
nop
sub
adc
mov
push
arpl
sub
mov
mov
xchg
fst
fcomp
mov
pop
stos
jb
xchg
sbb
cmps
repz
stc
sbb
nop
inc
mov
ret
and
ficom
stos
out
int
sbb
movs
inc
mov
jns
loop
std
adc
neg
stos
lea
adc
inc
cmp
xchg
xchg
push
icebp
je
and
mov
scas
xchg
jge
dec
mov
les
outs
(bad)
adc
pop
jl
pop
xchg
sbb
fcomp
fisubr
lods
add
xchg
cmps
add
fnstenv
add
stc
rcl
popa
stos
cmps
or
pop
fnstsw
push
xchg
loop
movs
cld
push
outs
and
pop
rol
fld
arpl
aaa
test
xchg
adc
push
mov
call
ret
inc
push
fwait
push
sahf
xchg
test
inc
dec
push
xchg
cs
iret
sahf
add
xchg
daa
loop
or
xchg
fcomp
adc
inc
mov
jb
jmp
dec
(bad)
out
sar
mov
dec
not
cmp
std
xchg
stos
loop
sbb
and
xor
int3
sar
or
adc
xchg
out
sbb
and
mov
bnd
mov
mov
mov
inc
repz
lds
movs
in
mov
add
push
xor
xchg
(bad)
mov
adc
fwait
mul
rcr
int3
push
pop
cli
push
xchg
in
dec
fcom
data16
ret
(bad)
adc
call
lock
pop
xor
xchg
dec
adc
pop
cmp
pop
(bad)
push
shl
jne
push
xor
fcom
sub
inc
xchg
shl
push
sar
out
mov
xchg
xchg
push
call
cmp
jbe
sub
inc
add
xchg
push
xchg
add
arpl
jb
xchg
sbb
icebp
retf
aam
movs
imul
cmp
jnp
mov
ja
out
push
and
nop
fdivrp
shl
push
inc
retf
daa
xchg
and
sbb
shl
aam
add
loope
mov
add
cli
push
jl
dec
ins
xchg
les
dec
jae
repnz
(bad)
movs
mov
dec
jne
mov
dec
mov
mov
mov
jae
mov
cmp
xor
or
mov
push
dec
in
enter
xchg
pop
xchg
jge
xchg
push
xor
nop
xor
xchg
cs
sub
dec
xchg
adc
jg
add
ins
leave
mov
stos
and
pop
sbb
xchg
test
out
xchg
aad
jmp
imul
lods
sbb
mov
and
rcl
aad
and
and
push
jmp
jbe
mov
and
mov
and
std
fsubr
scas
mov
jge
cmp
in
mov
rcl
inc
shl
sub
scas
xor
cs
mov
rcl
adc
sbb
popa
lds
xchg
dec
jle
lods
pop
into
and
xchg
pop
sub
cmp
std
test
shl
cli
mov
jae
bound
stc
paddsb
push
xchg
popf
pop
retf
mov
popa
xlat
pop
pop
sar
mov
push
xchg
outs
stos
ja
mov
cmp
loopne
pusha
add
push
xor
(bad)
nop
rcl
mov
std
les
xor
xchg
sbb
inc
iret
repz
xchg
loope
mov
add
jg
outs
push
(bad)
fisub
popf
js
mov
in
shr
add
jp
mov
outs
xchg
cwde
adc
adc
xchg
fcmovb
dec
pop
add
or
in
(bad)
(bad)
fmul
xchg
pop
inc
pop
inc
mov
mov
hlt
cld
adc
and
sahf
jl
xchg
or
(bad)
ror
lahf
xchg
hlt
mov
mov
xor
xchg
call
xor
mov
mov
xor
mov
hlt
ret
push
add
xchg
or
mov
adc
les
aad
and
in
pop
dec
xchg
dec
test
and
xor
push
adc
adc
push
sbb
xchg
loopne
repz
mov
jae
xchg
sbb
repz
add
xchg
push
xchg
hlt
aas
lea
cdq
adc
(bad)
mov
pop
lock
and
mov
push
rol
cmp
sub
out
test
xchg
and
std
(bad)
mov
adc
inc
jmp
rcl
pop
pop
daa
adc
leave
adc
and
aaa
mov
in
sahf
sub
fdiv
jne
mov
add
xchg
dec
test
(bad)
retf
xchg
imul
mov
xchg
xchg
jb
adc
stos
pop
dec
lock
imul
js
lock
ins
push
mov
xor
push
mov
aaa
arpl
dec
mov
pusha
jmp
push
iret
add
xchg
inc
or
push
push
xchg
push
popf
xchg
shr
bound
repnz
mov
or
lea
(bad)
push
xchg
cmp
xchg
leave
mov
push
and
push
and
retf
mov
out
push
pop
pcmpeqb
loopne
sub
stos
stos
push
lea
xchg
dec
or
(bad)
test
arpl
adc
pop
xchg
jmp
aaa
icebp
int
xchg
shl
xchg
cmp
xchg
fcom
mov
mov
or
and
int
ficom
xlat
pop
fs
xchg
cmp
push
dec
repnz
int
xchg
push
into
push
push
add
inc
call
test
pop
mov
pop
push
adc
stos
dec
mov
sbb
xchg
fs
outs
sbb
or
xchg
movs
cmp
pop
outs
jns
shl
and
sub
dec
jbe
xchg
test
or
sbb
nop
mov
ds
fwait
shl
ss
xchg
test
ficom
xchg
jmp
mov
out
and
mov
and
jne
pop
xchg
jbe
pop
outs
dec
xor
call
not
sbb
sub
int3
or
adc
(bad)
stos
pop
mov
xchg
pop
jns
fs
mov
sbb
cwde
je
ja
jno
shl
scas
imul
inc
jmp
xchg
mov
sub
pop
xchg
pushf
femms
cmp
mov
jbe
mov
jo
xchg
mov
jmp
xor
dec
dec
je
ret
cmc
mov
xchg
test
pop
(bad)
fs
or
lahf
cmp
push
mov
repnz
dec
xor
outs
adc
and
out
pusha
mov
mov
ret
cmp
sub
int
mov
push
(bad)
ja
in
ret
mov
push
xchg
jmp
inc
mov
mov
lock
cs
and
adc
mov
xor
sti
pop
cdq
adc
pop
xchg
hlt
mov
inc
retf
xchg
xchg
xchg
xor
test
imul
dec
cmp
std
xlat
mov
(bad)
arpl
jmp
in
and
shr
inc
mov
sbb
jl
call
mov
shr
fcom
xchg
mov
jmp
mov
mov
inc
adc
iret
push
and
push
sub
xchg
rcr
sbb
xchg
xchg
cmp
or
push
mov
inc
lock
sar
les
xchg
ins
(bad)
mov
je
xchg
fbld
cmc
(bad)
ds
in
jecxz
xchg
imul
pop
pop
cmp
loop
xchg
fwait
adc
xchg
lods
movs
xor
mov
push
and
scas
lods
xchg
or
xchg
ins
pop
and
pop
jb
mov
into
shr
cli
dec
clc
xchg
adc
cmp
xor
pop
loop
movs
inc
cdq
xchg
ins
test
in
cwde
xchg
and
cmp
jae
imul
mov
xchg
and
rcr
cmc
fistp
les
jle
int3
sub
xchg
and
dec
xchg
scas
in
sub
imul
test
les
xor
or
add
push
inc
cmps
fsub
jno
dec
cmc
dec
aad
pop
retf
sbb
jp
xor
dec
xchg
push
pop
and
ret
lods
cmp
cmps
sub
sub
inc
sar
mov
pop
cmp
xchg
xchg
out
clc
jle
xchg
int3
pop
fcom
and
xchg
pop
shr
nop
repnz
fisubr
push
jecxz
xor
mov
cld
xchg
push
cmp
(bad)
and
xchg
mov
jbe
or
pop
add
lahf
mov
shr
xchg
dec
call
and
(bad)
mov
sbb
or
outs
test
xchg
xchg
sub
pop
mov
mov
xchg
inc
in
pop
shl
dec
pop
sub
xchg
or
push
xchg
sub
pop
sbb
scas
fwait
mov
in
dec
add
aam
dec
sbb
jle
arpl
xchg
mov
scas
push
lods
xchg
and
jb
dec
mov
inc
sub
dec
fwait
shl
loope
and
fst
ins
sar
cmp
xchg
jl
retf
loopne
and
inc
mov
stc
ror
nop
cmp
xchg
push
in
lds
sbb
pop
xor
test
dec
ins
loop
shl
stos
mov
jg
bswap
fs
out
xchg
mov
xor
popf
xchg
lods
or
sub
xchg
jno
jl
mov
mov
test
adc
test
sub
xchg
push
das
push
stc
xchg
rcr
shr
dec
ds
xlat
xchg
lds
sub
add
popa
mov
leave
into
aam
pop
pop
dec
in
pop
cmps
lock
pop
mov
jg
mov
push
(bad)
int3
push
dec
push
xchg
cld
dec
mov
loop
dec
cmc
xchg
scas
sbb
sahf
push
sub
mov
inc
fwait
es
pop
push
lds
ins
jbe
cmp
and
xchg
jmp
sub
je
je
inc
gs
(bad)
dec
mov
movs
icebp
fs
(bad)
mov
cmp
aam
jb
xor
out
dec
or
aam
cmps
cmp
in
pop
iret
dec
les
push
adc
ins
push
jne
jge
jbe
(bad)
or
cmp
aad
xchg
add
lods
and
xchg
in
jns
dec
shl
cmp
aas
mov
test
adc
enter
or
mov
test
xor
add
sbb
lea
mov
shl
xchg
ins
and
mov
shl
sbb
push
mov
mov
cmp
mov
and
dec
mov
pop
pop
(bad)
xlat
cmp
call
dec
fmul
xchg
mov
jge
pop
push
je
es
sub
xchg
shl
sub
jle
mov
fsubr
imul
sbb
rcr
(bad)
mov
retf
pop
aad
pop
into
cmp
iret
lahf
push
mov
(bad)
and
and
and
cmp
dec
stc
inc
xchg
movs
lahf
cmp
add
or
pop
xchg
adc
push
jp
inc
adc
jecxz
mov
push
cs
rcl
mov
cmp
cmp
xchg
inc
scas
cdq
movs
inc
mov
ret
arpl
imul
jge
pop
fs
jp
(bad)
in
into
xchg
fwait
adc
les
test
push
popf
iret
(bad)
cmp
xchg
dec
jmp
mov
xchg
or
je
adc
push
icebp
xchg
test
outs
sbb
mov
scas
dec
aam
int
push
cwde
jmp
aas
xor
inc
xchg
push
push
outs
fdivp
scas
fs
sub
(bad)
(bad)
mov
mov
cmp
fcom
das
pop
dec
ja
in
ret
fwait
in
or
addr16
pusha
mov
(bad)
idiv
cdq
sub
(bad)
enter
and
sbb
mov
fwait
pop
sbb
pushf
mov
arpl
ja
adc
xchg
cmp
rcl
pop
cmp
dec
adc
inc
mov
xchg
(bad)
mov
xchg
fiadd
loop
fdiv
ja
fistp
pop
loopne
adc
bound
xchg
cwde
xchg
pop
add
inc
movs
push
inc
lods
mov
push
cmp
jnp
loopne
xchg
mov
hlt
mov
xchg
je
cdq
inc
pusha
sub
ja
push
inc
scas
daa
imul
xchg
xchg
arpl
rcr
(bad)
popf
xor
jge
sbb
retf
lahf
fs
int
adc
std
mov
ja
jmp
xchg
jne
(bad)
xchg
xchg
mov
xchg
nop
mov
inc
cs
mov
jo
test
xchg
jne
xchg
dec
jl
sbb
xor
sub
sbb
call
xchg
mov
imul
nop
mov
sbb
add
xor
sub
cmps
xchg
pop
popf
pop
fdiv
lahf
sub
fwait
xchg
inc
xchg
scas
movs
mov
daa
xchg
xchg
or
xchg
test
xchg
fldcw
cdq
inc
push
in
cwde
out
xchg
int
repz
sti
std
sub
sbb
int3
int3
cli
adc
mov
icebp
xchg
jb
outs
jne
sub
inc
xchg
test
das
jns
inc
adc
dec
lahf
add
mov
adc
js
(bad)
mov
scas
mov
stos
sti
mov
inc
lahf
xchg
retf
cmovo
and
fcomi
or
xor
jp
into
sbb
out
xchg
push
inc
iret
jecxz
adc
mov
fcom
mov
out
xchg
nop
ja
xchg
mov
pop
pushf
mov
mov
xchg
shl
lods
sbb
pop
xchg
es
mov
xchg
add
and
cmp
dec
(bad)
xor
into
push
xchg
push
or
pop
or
or
jmp
jecxz
add
hlt
xchg
mov
aas
and
mul
inc
xor
sub
and
test
aad
icebp
jp
pop
jp
repz
ja
push
pop
adc
xor
int3
xchg
ins
adc
test
adc
adc
inc
daa
sbb
into
lahf
push
test
push
xchg
call
xchg
ins
cs
lahf
rcl
adc
rcl
jge
xchg
inc
(bad)
pop
sahf
sbb
jo
xchg
dec
imul
push
push
aas
adc
js
dec
in
cmp
mov
xor
jae
jp
sete
jmp
mov
mov
xchg
jne
outs
test
xchg
and
hlt
jne
push
mov
xchg
mov
xor
imul
jae
fld
loopne
push
cmp
pop
aas
xor
xchg
in
xchg
add
dec
lds
mov
and
xchg
popa
daa
(bad)
cmps
sub
mov
sar
xchg
xor
jge
test
xchg
add
xchg
fidiv
or
popa
call
sbb
mov
xchg
pushf
in
out
iret
cmp
ror
inc
push
mov
push
pushw
outs
inc
sbb
cdq
mov
adc
repnz
out
push
dec
push
not
xchg
jmp
ja
pushf
xchg
das
push
mov
retf
mov
cmp
cld
push
mov
fs
sbb
test
int
mov
cwde
xchg
adc
sbb
pop
loope
xchg
in
jge
jne
repnz
xchg
outs
les
and
or
xchg
dec
add
retf
hlt
xchg
ss
in
xchg
mov
je
fisub
daa
mov
mov
hlt
enter
mov
test
pop
popa
cdq
xchg
dec
std
adc
and
adc
mov
mov
cmc
adc
int
sahf
(bad)
fnstcw
jp
mov
sti
pusha
push
xchg
and
cmp
loopne
cmp
lock
or
hlt
xor
(bad)
or
retf
sbb
mov
(bad)
fcmovne
sub
adc
sbb
iret
xor
xchg
outs
mov
or
xchg
scas
add
push
nop
inc
xchg
mov
cmp
xchg
inc
jno
fsub
add
rol
in
and
mov
jg
dec
jb
test
pop
int3
je
pop
lock
fcom
jmp
cmp
mov
lods
xchg
sub
inc
mov
mov
pop
push
(bad)
out
xchg
push
mov
loope
shr
xchg
and
std
push
or
mov
and
pop
dec
xchg
add
xchg
inc
lock
xchg
data16
mov
in
bound
sub
adc
pop
xchg
pusha
scas
sti
push
xchg
out
std
jmp
push
pop
pop
mov
dec
mov
shl
mov
ficom
push
adc
sbb
adc
and
mov
outs
fs
sub
iret
pop
ja
leave
sti
js
iret
xor
int3
mov
pop
add
xchg
pop
es
ins
ret
xchg
dec
and
fbld
sti
sub
push
mov
nop
inc
xchg
push
mov
mov
adc
aas
cmp
and
fdivr
fldcw
(bad)
mov
mov
xor
dec
into
popf
jo
mov
adc
pop
loop
cmp
lea
rcr
addr16
push
xchg
cmps
mov
jb
xchg
(bad)
sbb
icebp
repz
fsub
xchg
or
mov
add
xchg
(bad)
dec
dec
test
xchg
jns
loopne
mov
push
xchg
cmp
sar
xchg
jmp
add
jmp
in
push
jmp
jecxz
cli
inc
cmc
enter
xlat
sbb
add
stos
lahf
or
rcr
fstp
or
mov
out
or
mov
inc
mov
(bad)
test
inc
xchg
push
dec
jno
sub
mov
rol
inc
xchg
sub
jg
fs
mov
mov
sbb
mov
daa
mov
fbstp
push
xor
jl
jb
mov
dec
sbb
dec
xchg
stc
cwde
aaa
bound
sub
mov
or
xchg
push
inc
cmp
sbb
pop
pushf
(bad)
les
xor
dec
xchg
(bad)
push
xchg
jno
push
pop
(bad)
lods
mov
fwait
pop
dec
jo
jle
aas
cmp
jge
out
pop
mov
shr
or
cwde
xchg
jo
aaa
push
xor
mov
xchg
fimul
xor
ret
mov
iret
or
std
xchg
xchg
sub
leave
lahf
dec
sti
xchg
xor
add
aas
xchg
dec
fwait
imul
pop
mov
retf
daa
out
mov
xchg
rcr
mov
lods
and
iret
push
jmp
push
clc
xor
dec
mov
and
inc
fwait
pop
jl
rcl
push
xchg
fsubr
loop
ins
xor
mov
hlt
pop
xor
inc
sub
xchg
int
ss
je
add
inc
movs
cs
mov
int
aam
out
jg
jno
cli
jmp
mov
xchg
inc
sub
jp
xchg
jecxz
cmp
xchg
add
or
xchg
gs
adc
xchg
mov
mov
(bad)
fwait
ins
dec
outs
pop
add
xor
xchg
mov
rcr
push
into
cmp
stos
int
and
fcom
inc
push
xor
je
lods
jno
ret
inc
loopne
div
(bad)
push
dec
inc
mov
xchg
inc
or
lods
arpl
add
xchg
ret
push
cmp
cld
xchg
inc
shr
into
movs
and
fwait
pop
addr16
pop
data16
adc
xchg
aas
sbb
adc
jmp
push
xchg
sub
inc
xchg
mov
inc
mov
xor
retf
or
xchg
(bad)
in
cli
or
gs
and
adc
pop
hlt
push
lahf
push
mov
sub
daa
aam
jmp
xchg
popa
jmp
pop
loop
inc
jae
mov
cmc
or
mov
or
jecxz
sahf
out
adc
test
shr
dec
dec
mov
pop
mov
jbe
pop
xchg
lahf
pop
pop
je
sub
stos
xchg
sub
hlt
or
call
aas
loop
push
cld
xor
jge
inc
xchg
test
xchg
and
xchg
fisttp
ins
push
xchg
inc
hlt
jge
adc
jge
inc
xchg
and
pushf
mov
sbb
nop
push
xchg
ins
push
jo
add
adc
xchg
cmp
mov
stos
xchg
pop
repz
call
xchg
aam
push
mov
jp
adc
dec
adc
xchg
sub
xchg
and
xchg
fimul
xchg
imul
outs
adc
xchg
and
ins
jns
cmp
js
xchg
repz
test
xchg
push
xchg
arpl
xchg
les
bound
mov
or
mov
xchg
add
xor
mov
mov
(bad)
ds
cmps
pop
xchg
mov
push
jmp
push
loop
imul
fidiv
ins
fs
bound
adc
cmps
movs
cmc
jge
and
xchg
cmp
xchg
push
xchg
jbe
ins
shl
mov
pop
iret
mov
pop
xchg
lea
or
adc
and
xchg
and
add
ffreep
sub
cmp
dec
xchg
mul
outs
jno
jnp
mov
xchg
sar
mov
lods
pop
sub
into
push
inc
mov
cmp
and
test
cmc
lods
xor
jmp
xchg
add
lock
xchg
inc
cmp
push
and
xchg
inc
mov
cmc
xchg
jecxz
fisttp
ret
push
lods
xchg
xor
imul
gs
fist
xchg
int
ss
sub
xchg
sbb
push
and
jg
cld
imul
popa
inc
push
inc
xchg
in
ss
add
xchg
inc
imul
pop
imul
xor
xchg
adc
aad
imul
add
mov
lds
push
cld
inc
fwait
jmp
mov
std
xchg
sbb
cwde
in
mov
mov
and
mov
(bad)
push
sbb
imul
lea
test
xchg
xchg
xchg
pop
aaa
mov
xchg
pop
shr
leave
aam
call
mov
loope
mov
imul
pop
adc
sbb
and
inc
test
xchg
xchg
std
pop
push
dec
xchg
(bad)
cs
shl
mov
push
jl
sub
cmp
(bad)
sar
and
sub
(bad)
outs
jo
xchg
sbb
pop
and
xchg
mov
neg
dec
and
sbb
cmp
cmp
es
hlt
ret
retf
lsl
adc
shl
jecxz
ret
stc
add
xchg
xor
cmp
leave
scas
retf
lea
dec
sub
sub
xchg
mov
push
xchg
or
mov
nop
xchg
dec
mov
mov
xchg
cmp
addr16
pop
mov
ret
ret
dec
es
xchg
adc
cmp
add
ja
int
lds
xchg
and
inc
or
in
xchg
and
jnp
and
cmp
les
or
xchg
ret
ror
mov
xor
adc
xchg
push
in
lock
and
mov
mov
push
add
xchg
lahf
shl
jg
cli
les
sahf
add
test
dec
xchg
mov
fs
loop
retf
xchg
sbb
sub
xchg
in
test
fwait
shl
sub
sahf
or
in
je
mov
dec
xchg
rcl
xchg
push
pop
(bad)
cmp
xchg
fcom
xchg
inc
sbb
mov
xchg
xor
out
mov
or
pop
scas
xlat
js
mov
loopne
hlt
jl
in
or
lds
arpl
adc
mov
les
xor
cmp
mov
xor
lds
adc
xchg
in
mov
test
rcl
mov
mov
loop
inc
retf
and
fwait
mov
sbb
ds
xchg
test
out
stos
push
scas
les
adc
xchg
mov
dec
xchg
out
sbb
mov
xchg
xchg
enter
xchg
and
jbe
sbb
sub
mov
xchg
lea
cmps
mov
mov
xchg
icebp
mov
ins
scas
or
push
and
add
repz
ret
data16
cmp
pop
jmp
sbb
fcmovbe
jle
fwait
xchg
rcr
ret
mov
test
out
fs
xchg
xor
imul
popa
jne
pusha
or
not
call
cmps
mov
in
sub
lds
xchg
push
arpl
sub
fwait
mov
adc
sbb
daa
inc
mov
popf
xchg
adc
mov
xchg
push
push
shr
ret
mov
xchg
push
jnp
push
lock
xchg
xchg
pop
xchg
sbb
sub
adc
jge
cmp
mov
adc
div
xchg
loope
push
inc
fistp
jge
sbb
shl
imul
dec
xchg
fadd
pop
fyl2xp1
mov
pop
xor
xlat
and
sbb
dec
movs
rcl
adc
pop
or
dec
movzx
out
mov
jg
cdq
adc
shl
aas
repnz
arpl
int3
js
xchg
fdivr
pop
mov
xchg
icebp
loopne
jl
add
xchg
push
int
push
arpl
outs
(bad)
xchg
(bad)
push
(bad)
sti
call
neg
sbb
pop
jmp
xchg
fsub
mov
jmp
outs
or
popf
adc
xor
shl
cwde
lods
xchg
in
add
jae
mov
xchg
push
mov
mov
in
fisttp
or
xchg
(bad)
add
outs
push
mov
xchg
iret
pop
dec
loop
sub
and
cmp
pushf
aas
pop
call
dec
ret
cwde
or
mov
xchg
adc
xchg
pop
out
mov
in
jo
iret
add
xchg
and
dec
rol
loope
fistp
add
xchg
jmp
adc
in
pop
gs
pop
adc
inc
jp
mov
xchg
pop
ins
psubb
or
data16
fwait
sbb
xchg
sahf
mov
dec
rcl
lods
mov
pop
(bad)
pop
outs
inc
fild
jl
stos
pusha
add
mov
xchg
add
not
xchg
xor
and
cdq
xchg
es
lods
fs
push
lock
outs
adc
mov
lds
(bad)
mov
cli
shl
jmp
mov
mov
test
stos
pop
mov
push
mov
mov
outs
push
jo
es
ret
xor
jl
xchg
adc
(bad)
int
push
mov
mov
hlt
test
inc
js
mov
add
push
enter
fst
fwait
add
adc
lods
mov
int3
mov
mov
lds
cli
dec
adc
lahf
add
xchg
xchg
push
jne
or
mov
sub
add
xchg
call
inc
test
sbb
mov
xchg
pop
ror
xchg
pop
push
xchg
popf
ret
or
lods
xchg
jne
xchg
fnsave
inc
or
test
xlat
inc
jmp
mov
xchg
mov
add
inc
pop
into
mov
popf
xchg
adc
and
jns
int
fwait
push
int
dec
xchg
test
not
fistp
aas
in
enter
mov
lock
js
sub
movs
push
jne
push
cmp
adc
xchg
adc
test
retf
into
sub
push
nop
push
xor
aaa
pop
xchg
ficom
lea
jp
adc
cmc
outs
and
retf
xchg
adc
pop
(bad)
cmps
adc
test
fcomp
cmp
iret
push
cmp
movs
jp
mov
rol
xchg
jne
mov
mov
jecxz
adc
cmp
xor
xchg
mov
clc
(bad)
jbe
fdiv
sub
jne
adc
or
xchg
pop
sbb
(bad)
not
jle
xchg
mov
mov
adc
hlt
mov
push
shl
rcr
push
adc
dec
inc
mov
xchg
lahf
out
xchg
mov
mov
stos
enter
imul
(bad)
pop
sbb
add
stos
xchg
dec
xchg
pop
push
xchg
cmp
pop
sbb
icebp
cdq
mov
mov
mov
jmp
mov
push
ins
inc
add
cs
sub
pop
fsubr
lods
cmp
xchg
loop
test
pushw
scas
xor
push
call
mov
iret
and
or
xchg
je
arpl
jmp
aas
stos
xchg
sar
inc
and
(bad)
scas
int
mov
cmp
repz
shr
dec
xchg
scas
sub
sub
and
jbe
sar
mov
inc
push
mov
mov
stc
xchg
nop
sub
pop
adc
jb
mov
xchg
fwait
call
scas
xchg
out
(bad)
pop
(bad)
cli
out
cs
push
sahf
inc
js
pop
mov
fwait
push
mov
xor
cs
xchg
(bad)
mul
shl
xchg
fild
and
push
add
sbb
pop
das
mov
xchg
pop
fisttp
gs
inc
add
xchg
sub
scas
or
or
xchg
cmp
xchg
cmp
inc
pusha
fidivr
mov
les
xchg
sub
pop
inc
mov
xor
mov
enter
(bad)
cmp
xlat
mov
mov
rcl
shl
test
dec
scas
jns
ds
aam
test
push
adc
push
jo
sbb
ret
pop
pop
or
adc
sahf
test
xchg
and
fcom
jns
mov
mov
sbb
(bad)
bound
sbb
push
adc
fimul
push
mov
jmp
pop
out
loopne
adc
shr
push
cmp
xchg
push
les
cli
inc
scas
xchg
push
sub
js
mov
dec
jne
push
stos
inc
cmp
in
shl
pusha
dec
or
push
fnstcw
and
aam
in
cmp
out
icebp
push
out
ins
or
loopne
xchg
sbb
scas
sub
xchg
mov
and
xchg
sbb
sbb
xchg
cmps
xchg
out
mov
popa
xchg
or
fs
mov
sti
dec
xchg
(bad)
jae
movs
mov
mov
dec
repz
pop
shl
jge
pusha
or
mov
inc
xchg
sub
and
ds
out
mov
fwait
sbb
retf
pop
mov
cmp
adc
mov
ss
add
mov
jo
rcl
jmp
mov
ds
xchg
mov
cld
imul
adc
retf
cmp
adc
cli
sbb
(bad)
mov
xchg
inc
or
loopne
stc
xchg
test
push
adc
mov
pop
int3
fisub
addr16
fisttp
out
xchg
xor
xchg
in
jnp
and
mov
rcr
jp
xchg
xor
lock
mov
mov
adc
pop
outs
push
jno
mov
pop
scas
xchg
outs
xchg
aaa
lods
xor
mov
arpl
adc
mov
je
push
jl
cmp
stos
dec
fimul
retf
or
test
pop
dec
inc
cmp
push
add
stos
cdq
sub
xor
adc
xor
sbb
mov
xchg
xchg
adc
inc
sub
mov
icebp
sbb
cli
xor
retf
mov
test
dec
push
mov
pop
addr16
call
rcl
xchg
push
(bad)
pop
lea
mov
lock
push
les
adc
xor
xchg
jmp
sub
mov
imul
(bad)
sahf
xor
inc
and
adc
loopne
sbb
iret
lods
loopne
clc
xchg
dec
test
xchg
cmp
mov
call
xchg
hlt
stc
loope
std
cli
sub
ficom
ja
mov
sub
xor
cmps
retf
(bad)
push
sbb
mov
or
xchg
(bad)
cmp
fwait
retf
cmp
outs
jbe
jg
inc
sbb
in
push
jg
mov
ins
loope
icebp
aaa
jne
cmp
jp
inc
mov
sub
xchg
adc
pusha
jge
xchg
pop
push
pop
and
movs
jbe
mov
xchg
ror
sbb
cmc
and
xlat
mov
rcl
icebp
clc
cwde
xchg
adc
retf
ret
rcl
inc
xchg
and
pusha
je
sbb
xchg
jecxz
ja
mov
mov
mov
sub
enter
retf
pop
mov
adc
ret
je
loope
xchg
mov
xchg
cmp
hlt
das
jns
and
rcr
xchg
inc
jb
dec
jg
fs
loop
(bad)
int3
mov
push
aaa
cli
mov
es
sbb
sahf
rol
xchg
cmps
pop
shr
dec
xchg
ret
cwde
pop
xchg
sbb
xchg
xchg
nop
aas
or
jmp
sar
xchg
repnz
jnp
mov
loop
jbe
arpl
cmps
xor
addr16
xchg
sahf
mov
fdiv
rol
inc
dec
fsubr
inc
xor
jmp
iret
xchg
push
or
xchg
xchg
inc
out
mov
out
mov
into
and
or
mov
gs
mov
sbb
and
popa
out
sub
pop
push
out
js
sub
push
pop
push
xchg
ror
sub
jne
mov
je
xchg
aas
fwait
push
xchg
dec
dec
xchg
adc
rcl
shl
sbb
test
imul
fsubr
iret
rol
adc
xchg
fwait
sbb
int3
xchg
frstor
aad
fs
out
xchg
and
out
mov
xchg
sbb
jns
les
xchg
adc
stc
mov
retf
into
scas
xchg
pop
fisttp
sub
and
in
xchg
jmp
pop
das
rep
fidivr
xchg
stos
movs
je
dec
lds
inc
and
ror
dec
jle
mov
push
es
pop
mov
retf
xchg
sub
enter
fldcw
pusha
dec
adc
push
xchg
xchg
icebp
mov
mov
fs
xchg
jnp
jle
test
pop
add
int3
and
cwde
mov
jmp
push
jo
repz
pop
mov
aad
(bad)
fsub
sbb
mov
in
cmc
add
or
sub
xchg
std
and
and
xchg
fdivr
sbb
pushf
dec
mov
or
into
xacquire
cmp
mov
mov
iret
or
shl
xchg
rcr
nop
(bad)
mov
mov
dec
xchg
pusha
popa
leave
cmp
gs
push
jle
in
xchg
sub
pop
enter
in
call
pop
adc
sbb
and
xchg
xchg
mov
xchg
push
test
dec
stc
mov
sete
(bad)
das
jno
push
adc
push
xchg
xor
sub
push
and
(bad)
test
int3
mov
or
xlat
arpl
or
add
xchg
push
jg
mov
lock
xchg
adc
aad
(bad)
jae
xchg
mov
xor
shl
adc
adc
mov
and
lea
mov
cmc
jnp
xchg
jbe
ss
add
call
pop
xchg
xor
jne
push
out
xchg
sti
sub
daa
popf
das
in
sub
addr16
xchg
arpl
cmps
aas
pop
shr
xchg
mov
jle
neg
test
test
lods
fld
loope
out
hlt
pop
repz
xchg
retf
pop
add
xchg
cmps
fwait
int3
jg
push
imul
mov
mov
or
xchg
dec
mov
imul
xchg
cmps
mov
xor
xchg
fisttp
scas
add
dec
dec
sub
cmove
cmp
into
data16
push
jp
imul
sbb
aas
inc
popf
es
fwait
leave
adc
fisubr
xchg
mov
sub
pop
mov
xchg
or
fwait
ins
xchg
mov
data16
or
jne
sbb
out
cdq
lahf
cmp
mov
popf
or
xchg
fisub
pusha
jo
out
je
call
ins
not
les
xchg
dec
loop
(bad)
out
fs
mov
adc
inc
js
rcr
dec
add
adc
div
mov
not
test
jmp
in
mov
mov
aad
xchg
mov
push
xor
mov
xchg
std
cmp
cmps
test
inc
movs
adc
bound
or
mov
imul
push
push
and
test
jnp
fwait
rcr
mov
push
leave
mov
mov
xchg
sub
loop
fidivr
xchg
ins
jg
cmps
dec
adc
sub
xor
mov
xchg
jbe
jle
sub
js
sub
mov
inc
jecxz
adc
sub
push
sbb
out
jg
mov
adc
adc
mov
je
push
push
xchg
xchg
xchg
push
and
dec
scas
sbb
pop
fdiv
and
pusha
aam
xchg
sbb
movs
mov
xchg
mov
into
loopne
cdq
xchg
mov
or
das
dec
xchg
mov
jmp
mov
adc
call
add
cmp
inc
outs
je
mov
sub
int3
xchg
in
retf
xor
sbb
fcmovnb
inc
mov
mov
imul
fwait
sbb
aam
xchg
and
ja
aad
call
loopne
pop
jge
sbb
xchg
arpl
jbe
call
push
xchg
or
aad
add
xchg
jnp
cmps
push
add
pop
xchg
pop
ret
push
xchg
xchg
push
out
fcomip
xchg
dec
mov
fidiv
outs
mov
jmp
and
in
mov
hlt
and
clc
and
adc
fcomp
xchg
or
jp
icebp
hlt
pushf
fwait
out
cmc
in
mov
test
sub
adc
(bad)
(bad)
sbb
movs
xchg
je
mov
call
mov
add
add
dec
xchg
xchg
retf
out
movs
xor
jo
cmp
jl
pop
pop
hlt
pop
pop
cmp
pop
lds
ffreep
inc
push
mov
mov
pop
movs
fadd
loop
jns
pop
mov
and
push
adc
hlt
int3
test
out
(bad)
xor
xchg
ret
punpckhbw
rcr
pop
adc
aaa
push
loop
cld
xchg
xchg
add
jmp
mov
icebp
jns
mov
in
xchg
mov
outs
repz
mov
jge
pop
addr16
sbb
adc
jp
xchg
adc
mov
imul
sbb
xchg
push
adc
fwait
push
int
pop
cdq
ins
push
sub
add
inc
(bad)
pushf
cld
mov
xchg
div
xchg
mov
adc
inc
push
scas
mov
repz
inc
aas
jae
pusha
fidiv
stos
xchg
jecxz
leave
pushf
sbb
test
mov
adc
(bad)
fdivr
mov
inc
xchg
or
xor
inc
fwait
mov
adc
push
enter
adc
ins
push
into
int
xchg
imul
in
mov
inc
adc
les
mov
test
iret
xchg
fld
dec
mov
outs
mov
or
cmps
xor
in
movs
xchg
cmp
mov
mov
enter
xchg
stos
mov
out
ja
into
popf
repnz
adc
loop
ret
or
xchg
shl
sub
xor
xchg
lock
xchg
push
sub
pushf
xchg
popa
repz
arpl
mov
aam
mov
movs
mov
jle
sbb
push
xor
lods
xchg
les
clc
or
outs
call
not
mov
inc
cdq
jge
int
xchg
pop
icebp
or
ins
test
jmp
test
rol
(bad)
mov
test
xor
fisubr
sete
mov
std
adc
aaa
mov
xchg
push
loop
icebp
test
dec
xchg
(bad)
mov
mov
cdq
loope
dec
dec
mov
mov
sahf
cmp
sar
xchg
ficom
or
scas
int
(bad)
arpl
or
in
pop
jb
(bad)
es
sbb
mov
jno
ds
sub
mov
int
popf
fiadd
lock
dec
push
(bad)
clc
mov
je
mov
popa
inc
rol
les
adc
dec
add
xor
or
lds
mov
outs
rcl
sbb
xchg
ss
pop
in
rcr
mov
fs
dec
cmps
int
sti
dec
xchg
aam
inc
lods
inc
mov
popf
(bad)
retf
and
push
call
outs
pop
(bad)
jns
or
inc
jl
push
sub
xchg
clc
mov
jp
cdq
jmp
push
xchg
pop
pop
data16
or
xchg
jns
pop
xlat
ss
fisubr
or
add
inc
dec
lock
xchg
pop
les
push
xlat
jge
scas
inc
retf
mov
repz
push
das
gs
push
dec
or
add
xchg
xchg
call
mov
movs
xchg
stos
js
(bad)
cmp
mov
jg
mov
popa
pop
or
shl
ficom
push
mov
loopne
js
je
mov
pushf
cmp
sbb
and
add
clc
mov
je
adc
(bad)
push
xchg
dec
mov
mov
loopne
xor
or
pop
fbstp
sar
ret
mov
cdq
ja
out
stos
pop
adc
cmp
push
xchg
adc
push
jmp
ins
mov
outs
mov
hlt
mov
sbb
fwait
xchg
fld
jp
clc
adc
xchg
push
pop
shl
inc
loop
dec
jmp
data16
inc
hlt
fistp
inc
sar
loop
pop
xchg
xchg
jmp
xchg
out
shr
push
stc
adc
nop
mov
jbe
push
test
stos
mov
push
sbb
xchg
mov
(bad)
(bad)
add
and
in
iret
sbb
repnz
xlat
mov
imul
and
rcl
repz
aaa
fwait
push
scas
imul
mov
adc
jl
cmp
sub
xchg
jle
or
xchg
push
fcomp
or
icebp
dec
dec
ja
mov
jae
xchg
xor
cli
inc
retf
xchg
inc
bound
adc
lea
scas
cld
aam
fs
inc
push
or
add
sbb
js
in
jg
add
xchg
call
jp
mov
popa
jae
xchg
push
mov
and
lahf
xchg
adc
int3
mov
add
dec
mov
mov
mov
or
pop
cdq
dec
fucomp
ins
adc
xor
enter
xchg
iret
into
and
test
or
jbe
mov
repz
loop
add
retf
test
mov
xor
push
push
popa
xchg
mov
enter
outs
xchg
in
add
fstp
cli
lahf
sub
loopne
add
icebp
or
sub
(bad)
fmul
les
adc
xchg
pop
ret
dec
stc
jl
mov
sbb
lds
sub
or
push
fadd
xchg
dec
sbb
mov
nop
xchg
xchg
xchg
cmc
shl
mov
push
in
pop
inc
and
adc
cwde
mov
(bad)
mov
xor
push
ja
call
test
fisttp
sub
sahf
mov
mov
aam
popf
cmps
push
in
xor
rcl
adc
mov
in
fwait
jno
mov
jns
in
or
ins
push
ss
xchg
sysexit
add
mov
stos
mov
jae
fild
inc
icebp
call
es
push
inc
xchg
(bad)
repz
in
sub
daa
mov
out
popa
adc
stos
test
inc
mov
cmp
call
and
adc
inc
xchg
and
aaa
int
sbb
mov
xchg
sbb
adc
xchg
xor
sbb
pop
mov
repz
sub
fdiv
not
int3
cmps
popa
imul
std
cmps
cmp
repnz
or
inc
adc
into
xchg
push
push
mov
adc
push
dec
add
jg
xchg
or
xor
add
mov
xchg
pop
stos
gs
push
xor
cwde
out
call
push
bound
adc
mov
jl
xchg
lods
lea
loopne
cdq
fwait
sbb
mov
add
fwait
xchg
jne
jle
push
jo
add
cmp
outs
jg
mov
cwde
sub
push
cmp
adc
jp
and
sbb
imul
cwde
xchg
inc
xor
mov
ins
pop
daa
into
add
mov
fistp
fs
mov
pop
xchg
xchg
or
adc
test
jle
push
sub
shr
xchg
mov
push
add
mov
out
xchg
not
cmps
dec
jb
xchg
rcr
shr
xor
xchg
mov
jo
and
xlat
xchg
lods
jns
retf
add
or
mov
jae
std
aas
mov
jbe
sub
xchg
inc
pop
inc
jg
xchg
jne
dec
pop
cmp
outs
lds
mov
adc
sbb
xlat
mov
into
cdq
mov
pop
hlt
arpl
dec
mov
movs
hlt
in
xchg
(bad)
mov
xchg
(bad)
jns
test
nop
call
and
add
xchg
(bad)
fsub
jmp
pop
or
dec
add
bound
xchg
xor
fcomip
lods
adc
jnp
pushf
xchg
loop
xchg
xor
jmp
and
and
scas
retf
lahf
int3
movs
xchg
ficomp
nop
(bad)
dec
add
fbld
out
sub
adc
les
add
xchg
add
enter
leave
pop
bound
add
xchg
push
ss
fist
cs
std
dec
push
popw
mov
into
stos
jl
xchg
dec
test
and
pop
repnz
js
fcomp
adc
sahf
sbb
push
or
push
cwde
stos
mov
retf
xchg
arpl
dec
push
ins
outs
mov
dec
or
mov
add
push
retf
and
push
mov
int
xchg
sbb
(bad)
das
scas
lock
mov
pop
push
xchg
fldenv
idiv
push
jp
into
cmps
in
adc
into
pop
mov
ret
repnz
sbb
adc
jl
xchg
adc
dec
cmp
retf
inc
xchg
ret
sbb
cmp
daa
ja
adc
xchg
jl
xor
jmp
(bad)
es
sub
push
dec
inc
inc
xchg
and
adc
xchg
jle
jmp
les
sub
push
push
lods
cmps
xchg
xchg
add
icebp
ss
sbb
xchg
mov
and
xlat
fbstp
lods
in
and
popf
dec
aas
adc
vmwrite
xor
dec
std
sub
xchg
add
(bad)
xor
cmps
xchg
or
(bad)
sub
add
adc
jnp
mov
xchg
xor
xchg
sbb
mov
mov
pop
xchg
stos
out
or
inc
aam
sub
lods
sbb
xchg
inc
inc
mov
dec
xchg
aas
push
push
sbb
cs
(bad)
xchg
cmps
xchg
and
or
clc
xor
icebp
adc
aaa
sbb
mov
lods
push
jae
das
xchg
xchg
(bad)
mov
fwait
jle
mov
jl
hlt
aas
xchg
int
setnp
inc
scas
mov
mov
popa
xchg
pop
mov
test
push
cmp
sub
je
mov
add
movs
xchg
ja
repz
in
bound
adc
sub
or
adc
jmp
arpl
hlt
xor
ret
mov
hlt
mov
sub
aad
mov
call
jmp
fst
cmc
xchg
test
xchg
loope
mov
pop
pop
jp
mov
mov
xchg
imul
les
or
and
xor
icebp
fs
push
mov
mov
mov
cmp
add
push
jl
xor
loop
dec
sbb
call
mov
clc
xlat
scas
fisttp
movups
bound
fs
loop
inc
add
xchg
xchg
aaa
xchg
call
mov
lea
stos
xchg
xchg
mov
jno
push
imul
xchg
std
clc
mov
xor
push
ret
inc
iret
or
aad
js
sub
mov
pop
mov
retf
and
push
lds
xchg
inc
cmp
enter
pusha
xchg
retf
mov
xchg
pusha
pop
inc
aas
push
sub
mov
push
fnstsw
pop
loop
in
cmps
push
mov
rcr
jne
push
push
or
out
movs
cmps
mov
fcom
rcl
or
(bad)
cmp
shl
or
and
movs
inc
out
inc
shl
jecxz
xchg
adc
mov
xchg
add
aaa
pushf
xchg
test
or
nop
push
mov
test
xchg
mov
jmp
cmps
jbe
retf
std
or
cli
xchg
shl
xor
dec
xor
add
and
cmp
ja
out
arpl
iret
push
dec
in
sti
sbb
out
jbe
cmp
inc
mov
fsubr
xchg
inc
cmc
mov
in
push
movs
xchg
adc
test
das
adc
mov
inc
test
mov
sar
mov
jno
ror
adc
mov
scas
pop
cld
aas
fs
ret
xchg
inc
dec
inc
js
jb
icebp
xchg
and
daa
push
xchg
bound
out
popa
inc
out
xchg
jbe
mov
push
mov
jp
or
adc
adc
jo
jmp
and
into
mov
inc
dec
mov
mov
xor
push
dec
(bad)
push
xchg
jmp
add
movs
jmp
cmp
and
test
dec
xchg
lea
xchg
jmp
arpl
xchg
fnsave
cmp
xchg
and
mov
inc
mov
inc
xchg
pop
out
xor
mov
jbe
lods
xchg
pop
and
xchg
stos
fwait
or
pop
add
jge
xchg
fwait
lods
mov
in
ret
in
add
jecxz
test
leave
pusha
xchg
xchg
aaa
sub
mov
mov
test
mov
sti
and
adc
scas
or
or
inc
movs
neg
int
xchg
xchg
add
push
mov
aaa
dec
fld
adc
push
sar
call
in
in
mov
mov
pop
les
pop
jns
inc
ins
test
push
mov
sbb
pop
imul
ins
test
xchg
xchg
cmp
iret
mov
inc
xchg
out
xor
sub
mov
lods
push
mov
std
push
cmps
push
mov
jge
mov
adc
lods
popa
outs
dec
cmp
mov
xchg
nop
mov
pop
and
std
js
mov
daa
test
inc
and
or
adc
lahf
cmp
xor
dec
pop
rol
xchg
push
dec
lock
stos
push
stc
clc
mov
mov
fwait
pop
dec
xchg
pop
scas
fcmovu
addr16
ins
shl
xor
and
xchg
fwait
xlat
xchg
cmp
add
nop
push
mov
aas
push
push
pop
in
adc
pop
xchg
xchg
lock
xchg
mov
adc
dec
xchg
pop
fldcw
mov
xchg
js
xor
mov
mov
sub
or
not
inc
pop
cmc
dec
sbb
jb
mov
hlt
sub
xchg
lods
jmp
outs
jle
test
xchg
mov
std
je
lods
pushf
mov
jge
or
xchg
ins
jecxz
push
push
or
rol
inc
xchg
dec
ja
xchg
mov
mov
test
outs
cs
repnz
pop
call
xchg
xchg
cmp
xchg
fwait
cs
outs
rol
lods
bound
xor
cmp
movs
mov
or
jmp
nop
mov
fist
add
daa
les
sub
(bad)
jbe
inc
nop
inc
mov
cmp
push
cmp
mov
pop
or
test
xchg
mov
sub
sahf
xchg
jo
mov
mov
fist
or
or
and
pop
xchg
fsubr
outs
test
inc
fist
mov
mov
retf
adc
int3
cmp
popa
hlt
jp
pop
mov
xchg
nop
jnp
and
outs
std
fwait
add
pusha
jle
fnstsw
(bad)
adc
jo
jecxz
or
xchg
shr
sub
cdq
xchg
push
or
lds
gs
(bad)
loop
adc
sub
xchg
jg
xor
dec
fwait
and
pop
or
sbb
fldenv
stos
hlt
pop
fcomp
add
xchg
data16
es
(bad)
mov
leave
or
push
cmp
cli
cmc
xchg
cdq
repz
jp
xchg
push
stc
sbb
arpl
xchg
cld
aad
mov
or
mov
adc
pop
jp
(bad)
iret
push
jge
aas
imul
or
xchg
test
push
call
fs
fdiv
out
pop
fwait
and
cmp
push
push
sbb
mov
xchg
in
push
scas
push
mov
adc
js
xchg
and
dec
or
push
bound
add
mov
mov
(bad)
xchg
inc
sub
inc
fdivrp
jbe
adc
sub
fwait
pop
rcl
dec
mov
and
(bad)
xchg
lods
dec
sbb
imul
iret
js
sub
test
jmp
jb
rcr
xchg
lahf
fcmovu
or
and
xor
or
imul
prefetch
or
push
or
inc
test
popa
push
inc
xchg
adc
lods
je
sbb
adc
pop
pop
xchg
cmp
sub
inc
mov
jo
inc
pop
fwait
mov
jns
adc
jno
jae
lods
movs
or
call
sahf
sbb
cmp
neg
je
push
inc
iret
loopne
xchg
rcr
xchg
mov
jecxz
xchg
sti
fs
ficom
inc
aam
xchg
pop
stos
popa
mov
sub
mov
jno
fbld
and
adc
jo
add
adc
xchg
loop
mov
in
enter
mov
xchg
inc
jmp
shr
add
aad
dec
mov
pop
(bad)
jmp
pushf
test
xchg
iret
cmp
jne
jae
xchg
sbb
pop
cmp
mov
mov
cld
xchg
cmp
test
divps
mov
in
xlat
nop
movs
xchg
and
jbe
ret
push
xor
xchg
inc
mov
hlt
xchg
jnp
pop
xor
adc
push
or
jb
cmps
fwait
cmp
inc
xchg
mov
aaa
leave
mov
xchg
mov
xor
test
jmp
adc
addr16
mov
out
sbb
jmp
into
push
jb
jmp
mov
mov
sub
fiadd
xchg
mov
loop
xchg
aaa
inc
or
rcl
xchg
inc
movs
fwait
aam
pop
sbb
xor
push
in
xchg
cmp
dec
sbb
push
and
cmps
fabs
add
push
xchg
inc
bound
idiv
ret
jb
mov
xchg
in
test
pop
xchg
mov
mov
ret
xlat
push
and
mov
and
aad
adc
or
cld
add
mov
mov
test
and
xor
add
push
push
sbb
jno
retf
dec
push
pop
push
cmp
rcr
adc
cld
scas
out
stos
mov
jl
fcmovb
jne
ja
xchg
mov
aaa
push
sbb
fadd
fs
sbb
(bad)
xchg
ror
rol
xchg
sub
ds
cmp
jl
inc
xchg
inc
jnp
push
test
aaa
out
pop
cmp
push
call
sbb
adc
push
xchg
push
fstp
adc
mov
repz
test
inc
mov
push
scas
xchg
add
retf
mov
xchg
cmc
sub
mov
iret
(bad)
daa
add
adc
mov
es
mov
jmp
pushf
push
mov
xor
xlat
mov
aam
sbb
fwait
push
gs
movs
adc
pop
inc
pop
cmp
xchg
into
leave
sbb
add
std
frstor
lods
fnstenv
sbb
adc
std
lock
loope
xchg
xor
mov
add
cdq
cld
xchg
inc
mul
xchg
and
mov
xchg
adc
pop
les
out
adc
add
jge
add
in
jp
cmp
shl
ss
jns
mov
mov
jmp
les
fnstcw
xchg
je
pop
int
push
and
jle
xchg
es
shr
xchg
mov
(bad)
fucomip
xor
jp
xchg
pop
jle
xor
sub
rol
lea
mov
mov
or
in
ins
das
ds
xchg
xchg
dec
jae
ins
test
gs
and
nop
inc
repz
mov
xchg
out
xchg
enter
mov
adc
xchg
(bad)
and
repnz
xlat
xchg
outs
scas
stos
pop
cwde
mov
xchg
sbb
mov
cmp
sub
xchg
daa
out
jl
mov
test
add
mov
pop
and
xchg
cmp
cmps
sahf
xchg
push
stc
test
adc
cmp
into
dec
mov
push
iret
loop
adc
cmps
mov
inc
int
xor
cmp
xchg
or
mov
xchg
inc
gs
adc
imul
repz
cmps
jecxz
mov
push
push
push
cmp
jnp
mov
ins
aas
xor
shl
aas
mov
(bad)
ja
add
xor
mov
dec
and
jne
pop
push
sbb
dec
push
xchg
dec
hlt
(bad)
ret
ins
lds
pop
sub
adc
repz
xchg
jne
xchg
push
jnp
xchg
or
xor
xchg
or
sar
mov
mov
xchg
fwait
mov
cwde
sub
add
xchg
aad
clc
inc
xchg
cmps
dec
jb
movs
xor
mov
xor
in
xchg
push
aam
cdq
stos
idiv
sbb
dec
jns
jmp
imul
cmps
xchg
cmps
and
daa
stos
lock
lods
sub
iret
std
fsub
xchg
mov
mov
adc
pop
in
ins
xlat
mov
pop
inc
pop
adc
pushf
mov
sbb
xchg
push
fldl2t
or
xchg
xchg
cmp
icebp
add
or
dec
hlt
adc
push
push
xchg
mov
mov
mov
jp
adc
pushf
sahf
xor
push
add
xchg
sbb
push
imul
stc
int3
adc
aad
cmp
xchg
push
jg
jmp
xchg
lock
loop
pop
push
test
xor
cmps
xchg
pop
mov
mov
xchg
sbb
mov
xchg
in
leave
and
mov
out
jo
icebp
adc
ins
dec
loop
adc
pop
js
jno
pop
stos
add
lock
xor
mov
jl
xchg
call
pushf
dec
mov
xchg
(bad)
mov
push
mov
jl
mov
or
add
jle
js
hlt
adc
or
add
mov
sbb
jmp
mov
xchg
test
xchg
outs
jl
cdq
push
iret
push
je
fs
daa
in
push
xchg
sbb
inc
push
adc
stos
(bad)
idiv
daa
inc
sub
mov
and
scas
sbb
adc
mov
mov
mov
rcl
jo
fdivr
adc
cdq
xchg
cmp
adc
xor
mov
(bad)
dec
(bad)
hlt
push
inc
pusha
loope
mov
data16
xchg
call
stos
mov
xchg
jg
data16
xchg
and
mov
fcmovnb
sub
cmps
lock
mov
pushf
test
mov
pop
xchg
mov
(bad)
jmp
mov
xchg
jae
(bad)
xchg
in
pop
test
out
test
add
xor
popa
fld
mov
jbe
test
jg
xor
sbb
clc
mov
xchg
push
test
sbb
xchg
mov
test
dec
mov
jl
(bad)
mov
push
mov
jns
xchg
mov
sub
jnp
push
daa
outs
cmps
mov
xchg
mov
fsub
popa
add
pop
popf
xchg
sub
or
outs
rcl
lea
fadd
es
and
pop
fwait
cmp
ins
push
pop
jle
mov
aam
js
int3
ret
out
xchg
ss
or
dec
inc
xor
xchg
jb
cs
fs
jmp
leave
mov
add
pop
jbe
xchg
jmp
pop
jns
in
xor
mov
inc
xchg
loopne
sbb
mov
(bad)
xchg
cmc
nop
push
fnsave
ret
cdq
push
call
push
xchg
jecxz
cld
xchg
xor
xlat
in
xor
daa
xchg
mov
xor
push
mov
jecxz
add
pop
cmp
call
inc
xchg
test
add
sub
adc
push
movs
and
mov
push
pop
adc
hlt
in
icebp
adc
rcr
pop
sub
ror
xchg
xchg
pop
jmp
stos
and
xchg
adc
repnz
cmp
adc
shr
mov
hlt
or
xchg
sub
fld
pusha
xchg
xchg
ja
in
fcomp
repz
mov
add
pop
pop
adc
jnp
aam
outs
enter
in
add
dec
shl
mov
xchg
mov
outs
lods
test
fs
cdq
adc
mov
iret
mov
fistp
int
mov
imul
xchg
sub
mov
lahf
gs
dec
adc
stos
inc
xor
rcl
or
(bad)
xchg
xor
sbb
adc
adc
xchg
mov
daa
jne
sbb
xchg
lahf
(bad)
sar
adc
call
xchg
xchg
pop
and
push
xor
jg
xchg
or
cs
push
inc
xchg
hlt
mov
push
cli
call
xchg
popa
xchg
mov
lea
retf
xchg
imul
push
pop
daa
fwait
mov
jecxz
pushf
push
push
fild
popf
sbb
pop
int3
stos
lea
xchg
push
jmp
xchg
ds
or
loopne
repz
not
data16
rcr
xchg
in
leave
retf
pop
jg
sti
inc
xor
scas
mov
dec
mov
mov
es
and
adc
fimul
stos
(bad)
mov
les
or
mov
mov
mov
and
sbb
pop
(bad)
std
or
inc
mov
add
jmp
loopne
and
mov
rcr
dec
jne
xchg
les
mov
lahf
and
(bad)
ror
jbe
push
sbb
mov
sub
popa
adc
xchg
bound
fs
loopne
rcr
push
out
dec
fwait
lods
xor
scas
imul
add
cmp
xchg
and
in
xchg
fsubp
(bad)
icebp
test
gs
pop
rcl
jb
faddp
mov
fwait
lock
aas
cmps
pop
jne
stc
and
xchg
test
mov
ret
je
sub
pop
add
and
pop
call
mov
and
sbb
add
mov
inc
je
xchg
cwde
push
inc
or
int3
mov
xchg
dec
pop
mov
inc
mov
cli
in
je
test
jmp
imul
add
jp
and
data16
lods
inc
or
xchg
in
pop
aam
add
rcl
cmp
(bad)
fwait
cmp
mov
hlt
add
jle
iret
xchg
jecxz
fdiv
xchg
jnp
mov
xchg
mov
je
inc
leave
mov
pop
mov
xlat
sub
xchg
mov
lahf
cmps
cmps
lods
sub
jecxz
inc
add
push
iret
adc
mov
xchg
pusha
pushf
fistp
ret
cmp
pandn
xchg
jmp
scas
mov
cmp
xchg
out
sub
leave
loopne
jmp
inc
or
fwait
jae
imul
imul
and
stc
xor
cwde
out
adc
std
clc
xchg
lds
jno
pop
addr16
dec
dec
repnz
add
lock
call
dec
mov
fwait
push
test
jg
and
into
call
and
xchg
cwde
lea
pop
adc
(bad)
push
popf
cs
cmp
cmp
retf
xchg
fdivr
mov
lods
or
mov
out
test
into
pop
sub
mov
push
packsswb
adc
inc
add
mov
pop
xchg
adc
bound
in
xchg
and
push
rcl
mov
pop
mov
outs
js
cmp
fwait
les
jnp
mov
or
aad
mov
mov
dec
neg
int
pop
and
inc
test
xchg
sub
sti
xor
sub
mov
inc
imul
jmp
hlt
dec
in
frstor
xchg
(bad)
dec
push
push
and
pop
neg
sar
xchg
mov
jl
or
push
popf
bound
mov
sahf
mov
imul
ror
cmp
lea
test
arpl
or
hlt
adc
call
mov
ja
mov
icebp
lahf
inc
add
dec
push
mov
or
arpl
pop
out
bound
stos
sbb
xchg
pusha
jp
xchg
jge
cmc
xor
xchg
mov
xchg
sub
and
movs
inc
imul
jnp
into
xor
je
imul
test
cmp
and
push
mov
jnp
lock
xor
cmp
dec
xchg
adc
and
stos
push
sbb
cmp
xchg
movs
daa
dec
xchg
jno
shr
mov
dec
jbe
int
adc
retf
(bad)
adc
arpl
pop
add
mov
das
xchg
or
in
jo
or
and
loope
xchg
mov
stc
out
xchg
push
cmc
(bad)
fild
xchg
iret
sahf
mov
pop
imul
mov
jns
fdiv
ret
xor
xchg
inc
mov
pusha
je
ja
xchg
push
inc
inc
pop
imul
xchg
and
popa
xchg
loopne
xchg
xchg
sbb
fistp
fst
scas
into
xlat
rol
rcl
das
retf
mov
adc
xchg
test
mov
enter
(bad)
xchg
ror
pop
sub
cmp
sbb
inc
jno
(bad)
jecxz
aam
in
sub
mov
cwde
xchg
ss
lock
adc
mov
scas
mov
test
xor
int3
test
xchg
add
sti
dec
mov
cmps
inc
fwait
add
mov
add
dec
mov
push
inc
or
aam
mov
scas
dec
imul
inc
sbb
sti
or
and
xor
pop
int3
cld
cmp
mov
fst
dec
jo
xchg
hlt
cmps
sbb
lds
retf
in
jge
int3
xchg
cmps
leave
sbb
aad
dec
pop
pop
mov
cmps
lods
inc
xchg
mov
pusha
jnp
add
mov
fadd
test
call
cdq
mov
mov
push
lea
mov
xchg
jmp
fwait
nop
test
cmp
aam
(bad)
in
mov
sub
pop
add
sbb
out
cmp
mov
ficom
inc
or
arpl
lea
sbb
xchg
ret
int3
jl
pop
xchg
sahf
(bad)
movs
mov
xchg
das
inc
cli
pop
xlat
int
cmp
mov
fbstp
cmp
jb
sub
jmp
fcomp
and
inc
popa
adc
mov
sar
push
adc
push
sbb
int
push
xchg
popa
and
xchg
sbb
rcl
pop
stos
int3
add
fwait
mov
outs
push
xchg
xchg
movs
aad
jl
xchg
(bad)
stos
sub
fwait
pop
shl
or
xchg
add
jb
and
inc
mov
fwait
shl
lahf
push
jp
mov
xlat
mov
xchg
lea
xchg
or
cmp
movs
push
cmps
mov
mov
stos
add
jbe
jae
push
aam
sub
lahf
imul
and
mov
bound
lock
dec
sar
or
or
jae
stos
lahf
and
cmps
xchg
stos
mov
jg
xchg
test
inc
xchg
dec
sbb
add
loopne
stos
xchg
inc
adc
fst
bound
cmp
clc
inc
fldcw
xchg
inc
call
xchg
out
mov
push
test
icebp
dec
in
das
outs
xchg
inc
xchg
outs
xchg
lds
addr16
and
pop
push
push
dec
out
xchg
push
mov
rcl
dec
pop
jp
xchg
int3
out
enter
mov
or
cmp
aad
or
adc
test
mov
iret
jns
xor
lock
lock
dec
xchg
inc
aaa
das
mov
xchg
sbb
loop
push
xchg
lds
dec
shr
out
aam
mov
jae
outs
pop
or
retf
enter
sbb
mov
lods
xchg
adc
mov
imul
mov
test
mov
(bad)
jns
push
cmps
mov
pop
jnp
sti
aaa
xchg
popa
clc
in
ficom
xlat
mov
xchg
adc
enter
jl
xchg
fsub
adc
jb
arpl
xor
lahf
loop
add
pop
aaa
lea
mov
pusha
les
rcl
mov
cmp
xor
out
fwait
push
mov
jmp
cmp
ins
xchg
je
les
add
xchg
addr16
jno
jns
call
das
fwait
sbb
hlt
in
and
xchg
dec
clc
or
xchg
mov
mov
xchg
aaa
add
add
je
or
xchg
mov
push
push
sbb
out
xchg
add
sbb
call
loopne
mov
xchg
jb
inc
dec
cmp
xchg
outs
xchg
pop
cmp
(bad)
xor
jle
in
pushf
mov
pop
xchg
sub
loope
sti
push
xchg
dec
sbb
or
cmp
and
dec
xchg
icebp
jmp
xchg
xor
jae
and
xchg
dec
sbb
clc
inc
lahf
(bad)
mov
popf
push
add
xlat
xor
push
push
ret
dec
xchg
pop
sbb
dec
xor
jnp
ins
sbb
cwde
sub
mov
xchg
and
push
lods
pop
cmp
cld
fild
pop
or
inc
xchg
out
js
adc
jge
imul
aaa
aam
nop
xchg
mov
push
jns
into
jl
and
test
fwait
cmp
test
sar
xor
mov
xchg
test
push
add
shr
lods
jnp
leave
fs
dec
test
adc
xchg
cmps
test
scas
dec
inc
je
add
aad
xlat
data16
fisub
and
scas
test
js
mov
and
adc
mov
rcl
mov
ror
std
xchg
popf
adc
jg
jmp
sub
leave
aam
pop
out
je
xchg
pop
(bad)
stos
mov
aas
fst
jp
inc
fstp
or
push
adc
and
push
nop
loopne
pop
fistp
sbb
and
sub
retf
test
data16
add
aaa
addr16
adc
mov
xor
shr
ficom
in
mov
aad
fs
iret
xchg
add
push
mov
icebp
add
out
mov
hlt
ficom
daa
imul
mov
and
push
inc
sti
mov
rcl
mov
push
cmp
mov
and
push
pusha
imul
aaa
dec
ins
jecxz
call
and
mov
mov
test
sub
(bad)
adc
jb
cmc
test
sbb
in
pop
enter
or
push
adc
fwait
jno
xor
rol
mov
push
inc
adc
xchg
jp
xchg
cmp
into
jb
xor
pop
std
lods
pop
jecxz
add
repnz
fidiv
sbb
stc
jmp
xchg
push
retf
inc
sbb
ret
xchg
mov
imul
dec
rcr
fmul
xor
out
sbb
xor
ss
scas
xchg
in
xchg
ins
jle
sti
jl
ins
jns
pop
add
xchg
imul
xchg
adc
and
test
repnz
dec
dec
push
in
fcom
daa
mov
movs
adc
xchg
les
xchg
fwait
push
call
les
dec
cwde
pusha
fild
xchg
ficom
xchg
rcl
mov
xchg
fdivp
xchg
ins
test
xor
push
iret
ss
into
cld
lock
jno
aam
and
pop
mov
bound
cli
xor
mov
push
mov
sbb
adc
jo
cmp
mov
sbb
cmp
jmp
mov
std
je
movs
outs
cli
aaa
xchg
imul
fcom
shl
dec
xchg
or
test
mov
hlt
mov
fwait
and
in
and
int
mov
push
push
xchg
pop
jp
adc
movs
and
pop
ins
shl
(bad)
xor
push
push
cwde
push
dec
in
dec
test
adc
mov
fwait
jg
add
fisttp
callw
xchg
mov
mov
mov
loope
and
movs
stos
or
daa
push
sub
push
jns
cmp
mov
xchg
pop
mov
fldenv
push
jg
loop
add
bound
xchg
sti
movs
adc
pop
dec
pop
xor
sbb
lods
aad
std
sub
imul
jnp
test
xchg
dec
loop
jle
and
xchg
push
jae
fst
nop
add
mov
icebp
xchg
push
lahf
jmp
cld
ss
das
ins
and
imul
fmul
in
add
shl
retf
sti
inc
xchg
sub
pop
fs
ins
(bad)
or
pusha
adc
aad
xchg
ret
and
jbe
mov
test
out
mov
cld
cmp
xor
fcom
aad
fmulp
jl
xchg
add
mov
xchg
aam
inc
call
fwait
addr16
mov
sar
jecxz
dec
ret
stc
mov
or
mov
push
cdq
xchg
push
jno
adc
add
push
dec
xor
xchg
jmp
sbb
popa
je
sub
test
inc
push
add
aas
adc
test
inc
loopne
pop
jg
dec
enter
cwde
scas
pop
sub
xchg
lods
xchg
cli
iret
out
dec
jle
xchg
jmp
test
pop
pop
retf
mov
pop
inc
xchg
adc
enter
push
les
loop
scas
idiv
(bad)
adc
dec
jne
cmp
aam
out
das
xchg
scas
add
test
neg
setg
xchg
inc
in
sub
(bad)
(bad)
pop
nop
fistp
pop
xor
stos
jg
mov
je
sub
mul
push
sbb
ret
xor
sub
movs
cld
push
sbb
repnz
xchg
jnp
fdiv
xchg
not
loop
mov
xchg
sub
sub
hlt
and
fldln2
xchg
enter
test
adc
cmp
fwait
and
dec
jo
dec
dec
adc
add
addr16
loop
xlat
es
push
inc
xchg
(bad)
ins
xor
fistp
mov
dec
adc
fldcw
add
jne
xchg
push
push
iret
xchg
test
pop
rcr
pop
add
cmp
sti
lods
xchg
mov
pop
sbb
push
cmp
retf
sar
out
push
cmp
cmps
call
mov
gs
mov
cmp
cmps
dec
movs
xchg
and
inc
mov
les
cs
xchg
mov
int
mov
lock
and
stc
push
xchg
jns
ficom
jne
mov
ret
mov
lods
fs
aam
and
push
sbb
popf
je
out
adc
xchg
xchg
jle
adc
retf
test
mov
cmp
cmps
and
mov
je
mov
test
rcl
or
xchg
sbb
xchg
ss
xchg
xchg
and
rcl
iret
mov
mov
xchg
inc
and
std
add
jo
inc
fwait
inc
xchg
out
cwde
enter
stc
xchg
hlt
sub
or
prefetchnta
in
jle
in
xchg
icebp
fwait
dec
outs
pop
push
(bad)
jb
jl
xor
xchg
test
aad
(bad)
movs
fadd
mov
push
and
add
jns
cmps
sub
ficomp
sar
xor
daa
add
jecxz
cmp
lea
imul
adc
mov
xchg
dec
(bad)
push
dec
in
jnp
jp
cmp
stos
in
out
pusha
fwait
push
cmp
jecxz
les
xchg
out
or
repz
mov
xchg
cmp
push
adc
inc
jg
stos
push
fsubr
xchg
rol
adc
push
iret
xor
adc
sbb
int3
mov
jg
in
inc
xchg
pushf
pop
xchg
mov
retf
add
mov
and
je
xchg
inc
sti
adc
add
jno
xchg
aam
mov
mov
dec
enter
call
sbb
mov
xchg
lahf
movs
push
clc
je
call
int
mov
mov
xchg
outs
xchg
jle
cmp
fmul
inc
xchg
mov
lock
in
pop
pop
mov
int3
jmp
inc
sub
adc
push
mov
stos
mov
pop
hlt
xchg
adc
mov
mov
cli
xchg
fimul
mov
xchg
leave
xor
adc
xchg
pop
jns
push
ffreep
cli
mov
cmps
mov
inc
xor
push
and
mov
and
xchg
retf
stos
sub
xor
cmp
xchg
movs
pop
jne
pop
movs
pop
sbb
ret
sub
inc
add
rcr
repnz
mov
push
and
pop
enter
nop
xchg
inc
xchg
pop
xchg
and
sub
push
in
sar
cmps
jo
add
movs
nop
dec
mov
cmp
xchg
adc
add
xchg
cmp
xchg
mov
jp
(bad)
shr
xchg
call
daa
out
jns
lock
out
xchg
xchg
movs
ret
pop
jmp
scas
pushf
dec
mov
rcr
mov
xlat
stos
in
add
shl
scas
cs
ss
push
test
inc
stos
call
xchg
dec
lods
and
rcl
into
cdq
fwait
and
stc
std
mov
aam
je
movs
enter
outs
xchg
inc
mov
sub
mov
gs
xchg
shl
inc
mov
xchg
mov
loop
xlat
retf
mov
loope
pop
xchg
push
lock
push
imul
or
dec
pop
sbb
xor
push
test
pop
adc
mov
sub
cmp
sbb
stos
mov
jno
sub
ror
rcl
ins
push
xor
xchg
ret
jp
pop
data16
je
int3
dec
mov
jge
sub
test
pusha
pop
jecxz
xor
xchg
enter
xchg
lods
add
xor
les
push
push
enter
inc
ja
int3
cmps
retf
mov
out
fnstenv
iret
add
add
outs
pop
adc
sub
into
add
mov
push
stc
das
xchg
shr
inc
push
mov
pop
xchg
jmp
scas
dec
movs
retf
sar
cmp
adc
and
push
ss
out
and
push
cmp
adc
inc
sub
(bad)
sub
cmps
in
mov
rcl
xchg
jmp
loopne
jb
xchg
frstor
hlt
jge
pop
nop
mov
stc
cmp
das
loope
mov
mov
or
dec
into
(bad)
jne
inc
cmp
xchg
ins
idiv
mov
push
iret
(bad)
fist
xor
das
push
dec
add
xchg
mov
icebp
cmps
mov
jb
pop
retf
jae
adc
mov
lods
push
in
bswap
xchg
shl
imul
std
popf
xchg
(bad)
ins
push
in
cld
rol
mov
jb
fstp
test
sbb
mov
mov
xchg
mov
inc
hlt
inc
ins
addr16
inc
inc
mov
jg
icebp
push
xchg
nop
cmp
ins
sub
xchg
mov
daa
add
cmp
pop
int3
pop
push
xchg
in
and
xchg
push
cmp
call
xchg
xchg
out
fsub
cmp
sar
test
ja
or
pop
lea
xchg
in
xchg
jbe
and
mov
jo
outs
test
fwait
dec
fisttp
xchg
inc
or
ret
js
adc
xchg
pop
xchg
xchg
jae
mov
or
jbe
adc
jle
or
ja
xchg
sar
bound
iret
push
cmp
adc
xchg
xchg
or
nop
xchg
cld
xchg
sbb
pop
mov
fisub
jecxz
cmp
push
adc
ins
loop
and
mov
pop
or
jge
movs
sbb
push
inc
mov
push
xchg
mov
jae
test
mov
dec
retf
adc
hlt
cmp
rcl
popa
sar
push
movs
xchg
add
fimul
inc
hlt
sub
movs
scas
fwait
mov
sub
lods
push
loope
in
xchg
adc
retf
ja
dec
mov
loope
fnstsw
out
mov
mov
jge
push
out
xlat
or
loopne
pop
xor
(bad)
call
inc
into
ds
loope
mov
jecxz
mov
mov
sbb
lods
jg
or
clc
mov
loopne
mov
rcl
cli
jle
adc
call
jl
jbe
out
inc
lea
pop
add
in
imul
dec
fbld
fld
dec
or
xchg
jmp
jle
mov
repz
adc
out
xchg
int3
sbb
pop
pushf
in
cmp
add
cmps
and
mov
pop
push
mov
xchg
movs
xlat
mov
test
add
xchg
sti
in
xor
mov
xchg
adc
cld
in
(bad)
aam
out
sub
mov
pop
push
xchg
cmps
mov
sbb
stc
(bad)
es
xchg
out
push
inc
leave
dec
sub
xchg
mov
xlat
(bad)
nop
outs
adc
sbb
or
popf
shl
adc
or
cmps
fmul
fist
xchg
arpl
and
rcr
lahf
hlt
mov
fwait
test
cmp
sbb
jg
pop
push
inc
sub
mov
je
add
or
mov
sbb
cmp
add
xchg
inc
push
xchg
pop
adc
xor
aam
sbb
popf
fs
loop
adc
jmp
push
push
mov
sub
xchg
mov
shl
scas
(bad)
cmc
inc
inc
or
xchg
sub
dec
add
mov
mov
cmps
xchg
fadd
ficom
ret
js
mov
cmps
dec
xlat
es
shl
add
cmp
jmp
mov
call
push
mov
aam
int3
ins
push
add
je
add
adc
pop
ret
sbb
mov
jg
sbb
or
push
push
sub
lahf
das
repz
mov
(bad)
and
or
sub
dec
push
aam
mov
icebp
ja
enter
and
gs
test
ret
mov
jmp
cdq
rcr
shl
ret
mov
pop
iret
in
aaa
movs
xchg
test
stc
repz
or
ins
mov
pushf
push
xchg
shl
pop
mov
sub
mov
xchg
sbb
into
retf
mov
hlt
jp
xchg
cmps
cmps
fld
fwait
jecxz
mov
ret
mov
mov
dec
mov
cmp
imul
cld
dec
mov
mov
fistp
in
fs
jae
xchg
out
les
xchg
jne
xchg
cwde
ds
push
xchg
inc
lea
fcom
or
push
jl
pop
xchg
pop
repz
add
call
and
or
xor
fdiv
ins
jge
jg
gs
push
(bad)
in
call
out
test
std
or
inc
jns
sbb
pop
ins
cwde
xchg
xlat
nop
repnz
cdq
jns
pop
aam
pop
addr16
adc
xchg
aad
sub
jbe
push
test
pop
(bad)
mov
push
pop
int3
lahf
in
adc
dec
jo
xchg
ja
add
ret
stos
test
ret
jmp
scas
jbe
dec
dec
cmp
jge
xchg
push
push
mov
or
(bad)
(bad)
daa
fistp
xchg
sub
je
ins
fcmovne
cld
stos
sbb
aas
cmp
dec
and
xchg
ja
cmp
mov
movs
gs
dec
cmp
idiv
xchg
sub
inc
aad
dec
test
pop
sti
mov
gs
jle
xchg
sbb
push
lea
xchg
cwde
mov
aas
and
xchg
int
jmp
pop
xchg
and
inc
aas
jecxz
lea
std
ins
mov
push
ins
mov
xchg
enter
pop
or
xchg
dec
cmc
or
sbb
mov
push
test
out
xchg
adc
pop
aaa
mov
push
ins
fnstsw
xchg
rcl
push
popa
pushf
leave
mov
xchg
std
inc
pop
enter
add
push
mov
xchg
test
lods
adc
fwait
icebp
inc
mov
in
and
popa
sub
adc
xchg
push
lods
xchg
neg
xor
inc
lods
movs
ret
mov
rcr
dec
test
inc
retf
leave
cs
dec
sbb
jp
xchg
int
in
or
jb
cwde
adc
mul
lods
loopne
mov
mov
and
sbb
cmps
add
rcr
inc
lods
ret
cmp
out
nop
(bad)
xchg
inc
neg
mov
add
adc
mov
xchg
cmps
add
add
xchg
fsqrt
adc
iret
fdivr
cwde
pop
push
add
aas
push
popf
ror
xchg
std
popa
data16
iret
mov
xchg
fs
jmp
mov
cmps
jo
or
pop
jne
push
jae
xchg
bound
push
mov
mov
popa
call
dec
xchg
cmp
jl
gs
lods
or
sub
dec
sub
mov
xor
sub
fisubr
clc
outs
test
leave
mov
mov
dec
push
add
jecxz
xchg
adc
cld
pop
js
scas
push
cdq
aam
out
in
lock
mov
xchg
xchg
cmps
cmp
retf
xchg
std
add
push
sub
mov
sbb
aaa
and
cmp
xor
je
sbb
cs
test
xchg
out
loope
mov
cdq
push
repnz
ret
adc
loope
xchg
mov
movs
fsub
hlt
test
cmp
push
xchg
mov
inc
mov
stos
pushf
sbb
mov
popa
das
cwde
sbb
push
sti
shr
inc
xchg
jns
cmp
loopne
repz
mov
adc
xchg
hlt
ret
(bad)
int3
mov
push
mov
or
xchg
int
adc
mov
int3
mov
xor
add
xchg
ss
hlt
sbb
pop
cld
fsub
or
xchg
mov
fld
push
pop
daa
cmp
sbb
or
xchg
mov
aad
jno
popf
inc
mov
pushf
xchg
mov
xchg
mov
gs
xchg
sahf
cdq
cmp
popa
xchg
out
add
cmp
popf
int3
lea
stos
mov
inc
out
lods
sahf
add
rcr
add
xchg
add
jp
inc
rcr
fwait
das
dec
mov
(bad)
je
dec
in
js
push
xchg
pushf
lea
pop
dec
xchg
mov
sbb
sar
xchg
xor
cmp
jl
inc
adc
push
xlat
dec
xchg
addr16
ret
aam
arpl
bound
mov
dec
push
mov
xchg
aad
jg
and
je
fs
or
ret
add
jbe
leave
aaa
mov
in
je
push
xchg
fimul
mov
sub
loopne
mov
out
and
pop
cwde
push
stos
mov
inc
nop
lds
rol
xchg
jmp
xchg
mov
out
aaa
stc
cli
nop
test
sbb
lods
mov
mov
ror
jns
jg
retf
jne
fld
mov
stc
xchg
clc
or
in
xchg
jae
fxch
sbb
mov
fimul
sbb
cmp
aad
bound
jb
pop
scas
mov
rcr
cs
jne
jmp
push
jnp
push
movs
in
retf
loop
scas
sub
pop
mov
xchg
inc
inc
rol
push
adc
sbb
xchg
pusha
out
mov
adc
sub
in
cmps
mov
push
jo
rcr
in
pop
cs
adc
sar
xor
fistp
int3
inc
stos
adc
mov
shl
lock
mov
xchg
dec
sub
icebp
repnz
push
fist
adc
push
mov
xchg
inc
(bad)
retf
out
lock
fldenv
sub
mov
inc
xchg
fcomp
(bad)
lods
mov
nop
retf
cmc
xchg
lds
push
push
and
dec
rcl
das
inc
aam
aaa
mov
sbb
mov
jne
jnp
inc
out
ins
xchg
lea
rcr
rol
clc
jmp
sub
xlat
rcl
in
mov
fwait
mov
xchg
pop
ret
jge
add
cmc
sti
jb
les
jmp
out
xchg
push
xchg
dec
push
sub
in
and
mov
jbe
scas
out
jne
pop
xchg
pop
jmp
(bad)
hlt
inc
or
pop
sub
mov
not
mov
xchg
test
pop
jl
jge
pop
sub
shr
jbe
mov
int
xlat
xor
clc
pop
xchg
adc
ins
leave
mov
scas
lahf
(bad)
sub
cmp
call
jae
jo
sahf
and
daa
xchg
test
pushf
pop
xchg
jl
push
xor
xchg
div
pusha
adc
call
lahf
scas
jle
adc
popf
mov
mov
add
in
ins
cwde
lea
scas
inc
jl
int
mov
icebp
xchg
cmp
jmp
and
xchg
sub
iret
fs
push
xchg
jle
or
xchg
jmp
push
jbe
xchg
or
ds
adc
inc
xor
mov
lea
xchg
adc
dec
jo
ins
push
sub
xchg
dec
jae
scas
push
jecxz
or
test
ins
add
iret
mov
pop
in
mov
pop
xchg
lock
das
not
sub
pop
int
dec
ss
sub
adc
das
gs
fwait
nop
and
add
hlt
ds
mov
test
add
dec
mov
fwait
push
inc
cmp
mov
retf
xchg
inc
xchg
jno
mov
xlat
ficom
pop
mov
jae
aam
into
or
les
mov
hlt
xchg
mov
sbb
xor
mov
retf
inc
xchg
dec
ja
adc
in
xchg
aas
adc
mov
push
cwde
repnz
leave
fwait
stos
and
pop
jmp
xchg
fwait
js
xor
xor
push
sub
mov
adc
pushaw
fidivr
aad
shr
(bad)
xchg
gs
js
xor
int
cld
inc
stos
mov
pop
xchg
ins
test
arpl
mov
xchg
les
pop
enter
ss
lahf
jl
loope
pushf
jecxz
out
lea
xchg
xchg
movs
mov
xchg
mov
or
xchg
pop
out
push
sub
mov
xchg
pusha
cmps
scas
pop
gs
pop
sbb
cmps
mov
mov
inc
xchg
pop
sbb
and
push
ficom
stos
cld
push
jecxz
mov
mov
mov
arpl
bound
jle
loop
iret
mov
pushf
loopne
mov
push
sub
xchg
pop
xchg
in
mov
iret
xchg
fadd
nop
xchg
je
imul
dec
dec
xor
jbe
mov
test
sbb
push
push
test
bound
fcmovb
out
jmp
xchg
cmp
cmp
shr
test
out
aas
int
sub
mov
stos
adc
dec
outs
mov
cld
lea
adc
ds
sbb
in
lods
or
les
jl
xchg
leave
push
inc
cmp
(bad)
cs
xchg
js
arpl
mov
adc
xor
sub
jo
out
out
xchg
popf
clc
pop
iret
inc
shl
inc
push
push
push
jl
fwait
xlat
adc
daa
movs
out
repz
or
(bad)
movs
xchg
xor
das
jne
lods
mov
cmp
scas
xchg
icebp
xchg
fmul
addr16
xchg
sbb
dec
lea
test
mov
mov
mov
pop
push
push
imul
int3
shr
les
not
fadd
pop
jmp
fwait
repnz
push
shl
push
cli
gs
ffreep
pop
cmps
out
adc
sbb
ins
mov
out
mov
hlt
stos
fwait
std
ds
movs
call
xchg
(bad)
xchg
xor
hlt
mov
int
xchg
or
call
stos
mov
and
cmc
out
cmps
mov
add
scas
loop
arpl
xchg
pop
mov
(bad)
aas
xchg
retf
repz
shl
or
push
inc
push
dec
aaa
mov
adc
(bad)
or
lods
ins
xor
inc
inc
mov
test
movs
pop
add
retf
push
jge
and
aam
fwait
es
add
sbb
mov
xchg
lds
cmp
(bad)
cwde
xchg
jmp
dec
xchg
jecxz
xor
repnz
xchg
push
call
pusha
xchg
push
ins
mov
ds
mov
hlt
fidivr
and
cmc
jmp
dec
xchg
pop
sti
icebp
mov
xchg
movs
adc
(bad)
xor
dec
xchg
jp
jecxz
pop
ds
jmp
sti
or
jle
sbb
mov
xchg
xchg
sub
dec
push
pop
data16
mov
adc
xor
xchg
stos
and
fild
xchg
rol
mov
pop
xor
scas
sar
or
in
lahf
xchg
sti
pop
adc
iret
fwait
adc
(bad)
jle
inc
mov
pusha
leave
aam
mov
push
aad
fwait
xlat
inc
aaa
xor
cmp
xchg
xchg
xor
push
inc
mov
push
out
stos
sub
xchg
dec
sub
fcom
pop
popa
call
ss
ret
in
in
mov
sub
push
fwait
test
shr
xchg
jb
ja
xor
mov
push
adc
outs
call
jp
xchg
mov
xchg
(bad)
jae
rol
std
fwait
pop
adc
dec
fs
jmp
xchg
xor
xor
xchg
mov
mov
in
dec
cmp
adc
xchg
jns
sahf
daa
jbe
xor
jmp
mov
ds
mov
scas
ja
rcl
or
xchg
xchg
jne
(bad)
ds
dec
xchg
dec
jb
xchg
mov
cmp
outs
stc
jle
cmc
pop
es
xchg
aaa
sub
push
xchg
sbb
not
dec
je
cmp
xchg
fsubr
jmp
inc
xchg
cmps
sbb
mov
movs
mov
push
xor
ror
xchg
and
cwde
xchg
push
movs
call
adc
imul
or
gs
adc
aam
mov
enter
es
cdq
xchg
push
ins
(bad)
mov
repnz
mov
mov
jb
loop
dec
jne
cmps
je
maskmovq
mul
pop
popa
mov
xchg
xor
ja
add
mov
bound
shl
int3
xchg
sub
xchg
jmp
mov
push
push
jg
xchg
je
loope
xchg
cmp
mov
xchg
(bad)
xlat
jne
push
mov
clc
inc
push
xor
pmullw
lds
inc
addr16
mov
adc
sub
popf
sbb
fwait
push
fdiv
sub
mov
mov
or
or
lds
xchg
je
mov
stc
mov
xchg
pop
enter
pop
dec
mov
xchg
fcom
ja
sub
aas
ins
add
fsubr
mov
xchg
lds
mov
test
(bad)
xchg
gs
in
sbb
pop
rol
ficomp
mov
in
aam
lahf
aad
mov
cdq
jnp
stos
popa
leave
xchg
xchg
repz
aam
xlat
sbb
mov
loope
rcl
adc
call
xchg
inc
fidivr
cwde
xchg
out
mov
sub
xchg
or
sbb
into
dec
sbb
cmp
and
in
clc
mov
enter
mov
xchg
adc
imul
stos
into
arpl
(bad)
pop
and
fnstsw
test
adc
adc
jl
sub
jge
loopne
fwait
or
add
hlt
retf
or
data16
div
enter
inc
sub
inc
mov
xchg
outs
xchg
(bad)
loopne
cmp
xchg
mov
(bad)
mov
push
test
mov
aas
pop
mov
mov
mov
aaa
out
xor
dec
loope
add
(bad)
call
div
paddsb
jge
pop
xchg
(bad)
aad
cmp
push
and
sub
cwde
dec
cmp
pop
movs
pop
jbe
xchg
adc
jnp
lea
adc
dec
jecxz
pop
(bad)
pop
mov
aam
ins
dec
es
bound
mov
jecxz
cmp
ret
xchg
inc
xor
aam
popa
cmps
enter
(bad)
mov
mov
sar
bnd
xchg
mov
mov
aad
rcr
add
aam
or
loop
cmp
mov
pop
adc
fcom
xchg
mov
aam
ins
sahf
setg
mov
ret
lods
icebp
cmp
out
stos
and
mov
xchg
adc
add
add
xchg
jle
arpl
fwait
adc
je
into
mov
loopne
popf
jbe
xchg
mov
sub
ficomp
loope
into
sub
mov
retf
pop
xchg
in
mov
xchg
xchg
push
and
xchg
lods
xchg
inc
mov
mov
cmp
push
nop
and
mov
xor
mov
jl
hlt
dec
sub
fcom
ret
(bad)
fwait
repnz
pop
mov
jg
pop
sti
adc
jnp
rcl
daa
cwde
push
mov
inc
les
fcmove
sbb
jno
call
pop
inc
lahf
inc
add
sbb
push
loope
out
lods
fs
icebp
jnp
xchg
or
cmp
dec
bound
rcl
xchg
ins
xchg
sub
rsqrtps
jp
not
(bad)
and
pop
leave
mov
xchg
test
push
xchg
das
jno
cmp
xor
in
pop
mov
mov
sub
retf
ret
les
cmp
xchg
or
push
xchg
es
aas
pop
fst
xchg
inc
mov
and
nop
lds
movs
daa
mov
mov
push
into
add
xchg
xchg
out
int3
popf
jecxz
in
cwde
xchg
jl
mov
les
je
loop
push
inc
xchg
mov
inc
mov
xchg
jb
scas
(bad)
xor
cmps
mov
adc
sub
and
shl
xchg
adc
fldcw
pop
or
outs
xchg
xor
jp
cmp
xchg
or
mov
push
mov
lods
mov
loopne
push
icebp
or
(bad)
mov
pop
imul
push
inc
mov
lahf
xchg
cmp
mov
mov
or
sub
xchg
fiadd
test
cmps
fwait
scas
nop
mov
aam
xchg
call
call
fst
pop
xchg
lock
jle
ins
in
jge
mov
(bad)
loope
sub
fcmove
pop
dec
sub
scas
xchg
int3
fwait
pop
and
bound
loop
jb
js
xchg
pop
sbb
test
xchg
pusha
repz
addr16
dec
xchg
lods
mov
in
adc
inc
xchg
arpl
mov
and
(bad)
adc
dec
inc
dec
mov
jg
pop
add
xchg
je
xchg
fmul
jge
and
push
inc
fwait
xor
test
xlat
or
mov
xchg
setp
inc
xchg
(bad)
iret
adc
lods
mov
mov
push
lea
inc
cmp
dec
mov
adc
fild
pop
jl
or
add
dec
cmps
les
sub
repz
jmp
inc
dec
xchg
xchg
mov
out
add
xor
pusha
adc
loopne
rcl
mov
dec
pushf
push
pop
mov
cmp
pop
aas
aam
hlt
mov
cwde
adc
mov
pop
dec
pop
js
push
lds
mov
xchg
fwait
pusha
int
lods
cmp
jo
adc
cdq
es
jns
aas
leave
pop
xchg
lea
and
cmp
scas
into
sbb
hlt
movs
fstp
xchg
scas
or
mov
popf
inc
push
jno
xchg
pop
mov
vunpcklps
xchg
xchg
pop
cmp
inc
cmp
cwde
mov
mov
sub
or
xchg
jae
xor
xchg
inc
imul
sub
pushf
popa
jmp
iret
mov
hlt
pop
outs
daa
mov
mov
add
dec
(bad)
mov
push
or
pusha
hlt
mov
xchg
jno
jbe
cwde
je
hlt
lahf
lods
repz
adc
mov
ret
xchg
xchg
stc
nop
mov
jle
fstp
cdq
sbb
xchg
js
ret
std
cwde
pusha
rcr
dec
xchg
add
adc
xchg
xor
mov
adc
jecxz
xchg
or
aam
mov
push
and
dec
outs
xchg
xchg
out
hlt
adc
test
cvtdq2ps
nop
cdq
mov
adc
inc
ret
xchg
push
and
cdq
js
xchg
sbb
mov
sub
sahf
test
sbb
mov
cmp
test
scas
(bad)
cdq
dec
push
jle
dec
pusha
xchg
repnz
and
and
jl
mov
mov
pop
ficomp
mov
adc
test
mov
dec
dec
xor
xor
push
sbb
cmp
mov
xchg
into
sbb
arpl
xlat
and
das
xchg
stos
jbe
fnstcw
xchg
xchg
mov
sbb
sti
fst
sbb
iret
inc
add
adc
sbb
cmp
push
push
fsub
xchg
jo
rdmsr
mov
fidiv
(bad)
cwde
pushw
jb
mov
add
icebp
sbb
(bad)
inc
sub
xchg
aas
dec
or
mov
and
jnp
push
(bad)
mov
cdq
xor
sbb
pusha
pop
pop
and
xchg
mov
stc
adc
push
leave
xchg
adc
inc
int
test
frstor
sub
mov
div
sbb
sub
sbb
dec
push
push
xchg
or
aad
inc
cld
sub
xchg
add
bndldx
fcmove
xchg
adc
test
and
push
pop
cmp
sar
int3
out
jo
mov
imul
div
inc
aad
adc
stos
retf
mov
clc
push
xchg
test
test
dec
add
or
dec
hlt
dec
mov
xor
sub
mov
mov
cld
sbb
lahf
inc
adc
es
mov
je
fwait
shrd
lahf
imul
xchg
xchg
test
shl
cwde
les
push
mov
mov
popf
inc
xchg
imul
sbb
dec
mov
mov
test
call
xchg
mov
cld
xor
sub
xchg
cmp
xor
cdq
stos
and
mov
data16
mov
(bad)
das
push
aaa
sti
or
xor
adc
fwait
scas
mov
mov
xchg
fwait
mov
mov
push
fnstenv
dec
sbb
add
dec
je
pop
in
out
jb
dec
into
mov
shl
cmp
jo
cwde
jb
sub
and
mov
movs
push
ror
jmp
aad
xchg
cmps
pop
and
ja
push
pop
xor
dec
push
sbb
jo
int
sbb
sub
and
mov
imul
mov
mov
pop
fwait
int
cmovnp
retf
xor
sbb
mov
pop
pop
scas
xchg
out
clc
mov
hlt
xchg
out
mov
sbb
popf
push
xchg
jl
pop
in
ss
inc
sub
aam
xchg
ficomp
jg
lahf
cmp
popa
pushf
or
fdiv
stos
fstp
and
pop
retf
call
cmps
mov
sahf
fisubr
ss
in
pop
cmc
xlat
xchg
movs
cmp
jae
and
jmp
out
add
pop
mov
fcmovb
aam
ins
mov
iret
push
or
adc
into
fcmovb
hlt
mov
fwait
in
sti
fidivr
les
dec
push
and
xchg
clc
jl
retf
jno
lahf
cli
pop
je
mov
movs
cmp
xchg
(bad)
sbb
jmp
data16
stc
stos
sar
xchg
and
imul
test
mov
xchg
fld
repz
mov
loopne
pop
or
push
retf
inc
cdq
ja
xor
sbb
xchg
xchg
push
aas
or
xchg
test
movs
add
mov
cmp
jne
mov
rol
shl
sete
icebp
mov
inc
aas
mov
dec
sahf
fild
sbb
cdq
pop
bound
inc
jo
lock
hlt
addr16
xchg
push
stos
push
(bad)
fwait
dec
leave
stc
and
mov
retf
cmp
or
xchg
(bad)
jbe
out
pop
lods
pushf
fwait
add
push
es
and
stos
pop
mov
loopne
cmp
adc
dec
shl
push
jp
shl
pop
mov
jg
push
sub
jge
mov
cmps
repz
hlt
xchg
movs
dec
pop
jecxz
xchg
push
ror
xchg
sbb
lock
xchg
(bad)
push
jg
adc
xchg
xlat
sub
mov
xchg
sahf
sbb
dec
adc
iret
xor
ss
(bad)
out
jb
mov
sbb
add
mov
iret
mov
rcl
(bad)
jb
xchg
add
stos
jg
fadd
rcl
xrstors
outs
outs
in
ins
sub
mov
mov
fwait
push
lds
(bad)
addr16
int3
push
loopne
mov
cmp
or
jmp
cmp
or
jb
cmps
scas
mov
sbb
adc
stc
add
xchg
test
jle
(bad)
lods
fcom
mov
fwait
mov
push
pusha
cmpps
loopne
xchg
(bad)
jp
push
je
xchg
mov
jmp
push
sbb
shr
xchg
xor
cmp
leave
mov
cmp
sahf
fwait
sbb
jecxz
call
and
imul
cmp
out
out
mov
sbb
xchg
pop
inc
cmp
jl
sbb
push
aaa
mov
jg
ja
js
(bad)
cmps
sbb
fisub
movs
xchg
in
(bad)
xchg
adc
retf
add
xchg
out
loop
xchg
adc
mov
or
imul
jle
mov
in
imul
(bad)
pop
sbb
cdq
inc
dec
add
add
mov
int3
inc
xchg
js
mov
loopne
retf
(bad)
xchg
xchg
and
loope
popf
das
fdivr
mov
xor
inc
(bad)
sti
dec
xchg
bound
std
jge
cmps
sbb
jl
movs
in
cld
mov
pop
aad
cmp
(bad)
cmp
adc
xchg
into
js
sbb
dec
inc
sub
movs
mov
xor
sbb
rcl
aaa
stos
sbb
inc
jne
jno
mov
pop
xchg
dec
inc
jp
daa
add
xchg
ror
int3
mov
xor
icebp
add
dec
xchg
mov
sbb
xchg
test
daa
mov
sti
sbb
sbb
and
mov
mov
inc
ret
add
xchg
push
pop
not
cdq
sar
(bad)
jmp
jmp
mov
add
push
rol
jg
adc
aas
mov
xchg
mul
push
inc
xchg
xlat
and
jo
sti
xchg
sahf
call
cmc
lahf
ror
sbb
mov
fistp
repnz
dec
fst
jge
sub
xchg
fistp
sbb
fwait
loopne
sbb
pushf
arpl
fwait
xchg
imul
pop
xchg
sub
mov
xchg
inc
and
cmps
lods
xchg
into
popf
or
xchg
mov
jmp
repnz
push
popa
rcl
xchg
(bad)
mov
inc
mov
imul
ins
test
call
xchg
mov
bound
in
mov
cwde
cdq
les
add
test
or
inc
xchg
mov
lds
outs
daa
(bad)
xchg
mov
inc
scas
fcom
mov
mov
fwait
xchg
or
out
mov
or
mov
xchg
xchg
mov
shl
lock
xchg
push
pop
aaa
out
inc
movs
lods
and
pop
sbb
add
push
das
aam
pop
jnp
inc
xchg
fsubr
mov
ficom
sub
ror
pop
jecxz
inc
repnz
xchg
jge
cmp
push
sbb
test
sub
les
mov
xchg
aas
clc
pop
je
ret
push
lods
movs
pop
or
aam
je
cdq
fidiv
and
sti
ret
mov
xchg
xor
sub
ror
ins
add
call
jns
neg
adc
pushf
ret
ins
stos
cs
loopne
arpl
xchg
jne
and
ret
xchg
dec
or
mov
cld
mov
jno
jecxz
push
aam
dec
mov
std
xlat
imul
dec
sub
xchg
sti
dec
adc
push
arpl
(bad)
ss
mov
sahf
out
cmc
and
sbb
xor
test
out
adc
test
mov
pop
addr16
ja
jge
stos
dec
xchg
lods
cmps
mov
ret
gs
and
sub
xchg
mov
xchg
mov
mov
xor
(bad)
daa
sbb
dec
jnp
mov
lock
in
fwait
adc
mov
jecxz
push
outs
push
ins
ficom
xchg
fcomp
or
dec
je
and
fwait
jno
popa
adc
fs
jbe
movs
xchg
push
pushf
test
jne
scas
pop
lock
sbb
inc
dec
xchg
mov
lahf
jl
add
aad
xchg
shl
dec
xchg
xchg
ret
in
sbb
inc
call
leave
adc
mov
aad
inc
mov
test
clc
int3
xlat
xchg
sbb
leave
mov
in
pop
mov
jge
push
cmc
jno
loop
lea
cmp
ret
ja
xchg
sbb
sar
loope
rcl
hlt
sub
xchg
stos
int3
rcl
mov
ja
test
sbb
sub
mov
add
sub
push
imul
xchg
arpl
xchg
out
retf
inc
fwait
inc
ja
aaa
pop
je
xor
popf
mov
aam
pop
imul
loope
push
shl
mov
dec
outs
sub
mov
cwde
gs
shl
pop
sti
jmp
dec
ret
cmps
and
push
xchg
ss
sub
not
xchg
pop
xchg
inc
mov
and
inc
add
cmp
push
scas
daa
jne
pop
xchg
jge
test
fwait
push
(bad)
fs
inc
sbb
pop
js
cmp
fucom
aaa
fcom
sub
hlt
fild
jle
xchg
sub
jns
lahf
lock
xchg
idiv
int
sub
push
inc
xchg
repz
(bad)
hlt
pop
push
jbe
bound
stos
adc
xor
into
js
mov
mov
jae
daa
in
xchg
jmp
pusha
or
xchg
mov
pushf
repz
inc
hlt
fmul
cwde
cmp
shr
sbb
mov
arpl
push
mov
lods
push
cmp
and
xchg
jo
lahf
and
pop
scas
xchg
sbb
add
mov
(bad)
mov
mov
xchg
loope
stos
out
loop
jne
adc
cmps
out
adc
jmp
or
in
jns
shl
add
rcl
pop
(bad)
inc
jo
pusha
mov
bound
jp
inc
retf
imul
(bad)
cmps
mov
fwait
xchg
dec
adc
sub
ror
xchg
pop
jbe
mov
gs
xchg
cwde
adc
push
movs
cmc
mov
xchg
aam
xchg
in
mov
jae
cmp
xlat
push
cmp
dec
push
or
pushf
sub
mov
jge
mov
pop
ins
movs
xchg
mov
bndstx
test
dec
cmp
fadd
fiadd
sub
pop
add
jge
adc
(bad)
push
fsubr
jns
pop
xlat
not
int
inc
xor
call
and
jmp
mov
push
xchg
fs
mov
push
imul
sbb
(bad)
retf
not
fidivr
fwait
mov
mov
xchg
xor
in
xchg
js
test
or
imul
loop
jmp
xchg
xor
cmp
call
sub
xchg
int3
imul
push
outs
js
xchg
(bad)
jl
add
jp
xchg
xchg
test
jecxz
shl
imul
xchg
arpl
mov
aad
jmp
xchg
mov
xchg
sub
repz
(bad)
cmps
in
mov
sbb
push
push
pop
and
xchg
movs
cs
xchg
ds
cli
adc
inc
adc
je
ss
fs
pop
jmp
or
sub
pop
cmp
xchg
gs
movs
pop
push
adc
fistp
pop
mov
out
jb
mov
dec
rcr
or
loope
and
xchg
fs
mov
jle
cdq
icebp
fwait
push
arpl
jmp
aam
mov
push
cli
add
jne
fist
aas
or
daa
les
push
pop
aaa
test
add
xchg
mov
(bad)
(bad)
sub
xchg
or
(bad)
das
cmp
test
lahf
inc
sbb
push
jb
add
into
pusha
lods
dec
test
repz
mov
addr16
xchg
ror
repnz
call
inc
xchg
nop
push
sub
add
pop
lea
gs
cli
not
call
scas
xchg
add
or
jecxz
adc
xchg
loopne
movs
and
xor
pop
push
mov
mov
xor
aam
xchg
in
hlt
ror
aam
lock
sbb
bound
loope
test
sbb
mov
setbe
(bad)
mov
call
fmul
pop
imul
ror
in
mov
out
cmp
cmp
xchg
cld
sbb
jmp
scas
xchg
test
int
call
inc
sbb
push
arpl
in
fsubr
mov
cld
mov
sbb
dec
lock
movs
fbld
std
mov
stos
dec
clc
je
sbb
jns
cmp
call
or
push
jmp
mov
cmp
pop
and
add
xchg
sbb
test
lahf
mov
and
sbb
inc
movs
and
push
cmps
xchg
or
xchg
dec
repz
xor
xchg
push
pop
mov
into
xchg
add
movs
dec
test
dec
scas
xor
add
jmp
push
xchg
repnz
cmp
and
sbb
stos
mov
mov
cli
je
inc
xchg
and
pushf
sbb
popf
stc
mov
pop
neg
and
mov
popa
adc
in
xchg
inc
daa
outs
dec
push
adc
mov
(bad)
jle
out
movs
fsub
xchg
push
retf
jb
out
push
mov
and
xchg
dec
cmp
xchg
jmp
push
xchg
test
xchg
or
fwait
adc
call
push
jbe
sub
jmp
dec
jb
lahf
ret
cmps
addr16
stos
(bad)
xlat
mov
shl
out
(bad)
mov
push
ins
xchg
inc
inc
in
jbe
retf
mov
std
pop
xchg
test
retf
or
test
xchg
jo
fwait
inc
mov
mov
iret
cli
sub
xchg
mov
sbb
mov
jge
cmp
test
std
sti
xchg
int
push
dec
fwait
add
xchg
xchg
or
xchg
(bad)
lahf
(bad)
xchg
je
add
push
inc
aad
fs
adc
xchg
push
es
test
and
adc
dec
shl
xchg
inc
ror
gs
cmp
mov
pop
movs
rcl
(bad)
dec
xchg
and
and
je
aaa
nop
add
push
mov
rcr
iret
ret
fmul
or
call
xchg
fsub
jge
repz
xor
jecxz
or
cmp
jno
dec
shl
sub
cwde
sbb
sbb
lahf
and
dec
xchg
dec
ficom
in
data16
xchg
xchg
xchg
sahf
cmc
sbb
movs
in
xchg
mov
ja
pop
mov
dec
bound
jno
xor
or
xchg
cmps
pop
mov
ja
rcr
std
hlt
mov
or
mov
jge
jnp
inc
dec
pop
pop
push
sub
test
xchg
xchg
int
cmp
fwait
icebp
(bad)
ins
push
rcr
pop
popf
loope
rol
call
add
xchg
push
cs
adc
xchg
(bad)
pushf
lds
dec
push
not
adc
inc
test
xchg
dec
push
jecxz
fiadd
jl
icebp
push
fnstenv
pop
movs
push
rol
push
dec
mov
cmp
into
push
push
mov
add
(bad)
bound
int
in
dec
adc
jmp
(bad)
xor
mov
stc
enter
fistp
dec
inc
lods
jmp
test
icebp
fsub
mov
add
dec
sbb
mov
adc
xchg
dec
and
out
and
xchg
pop
(bad)
popf
sar
push
nop
xchg
div
dec
sahf
cli
xor
call
pop
nop
pop
xchg
dec
lahf
pop
or
jb
cmp
movs
mov
nop
in
xchg
xchg
jp
jae
xor
mov
imul
pop
in
push
xchg
pop
in
cs
call
cmp
jno
leave
xchg
jb
pop
pop
inc
add
mov
sar
ins
nop
cmp
xlat
mov
xchg
sub
cmps
(bad)
repnz
mov
rcl
test
xchg
adc
or
xchg
fwait
sbb
inc
xchg
mov
push
test
mov
adc
les
push
ror
push
mov
sub
fs
push
(bad)
push
jle
test
xchg
enter
or
inc
lds
adc
out
or
add
pop
jbe
mov
mov
add
jl
sub
aam
adc
jge
dec
or
xchg
nop
sbb
add
call
faddp
mov
and
mov
fisub
jnp
xor
inc
dec
ins
loopne
frstor
sub
push
hlt
mov
mov
xchg
mov
outs
fst
pop
sub
or
jnp
xchg
xor
cwde
movs
mul
(bad)
jl
add
push
sub
sar
xchg
loopne
repnz
mov
mov
xchg
movs
in
sti
or
aam
xchg
push
pusha
jecxz
xchg
iret
xor
jno
xchg
es
in
test
inc
in
sub
fwait
cmp
jp
add
movs
ficom
adc
out
repz
xchg
or
out
idiv
sub
xchg
mov
aas
addr16
sahf
mov
retf
pop
xchg
jo
outs
jmp
aaa
jno
inc
push
stos
iret
xchg
mov
out
aas
and
pop
xchg
sti
sbb
jle
push
int
xchg
(bad)
popa
mov
cmps
retf
dec
pop
into
mov
xchg
test
fld
mov
or
xchg
cmp
ror
mov
jnp
addr16
pop
leave
dec
mov
pop
movs
adc
out
stc
(bad)
mov
mov
push
rcl
clc
fs
js
xchg
dec
xchg
sbb
mov
sub
xchg
pop
(bad)
cmp
mov
xor
inc
pop
pop
mov
xchg
mov
cmps
or
xchg
xor
lods
xchg
or
outs
adc
lds
fwait
jns
add
ror
push
mov
mov
mov
or
(bad)
sar
fbld
inc
jo
dec
sti
xchg
retf
repz
push
(bad)
mov
(bad)
or
bound
fld
call
cmp
xchg
das
mov
xchg
ss
adc
hlt
out
mov
or
retf
arpl
dec
adc
or
push
xchg
pop
das
shl
xor
jns
in
inc
rcr
xor
xchg
add
xchg
cmp
out
xchg
cdq
rcl
lods
stc
das
xchg
sar
loope
and
inc
xchg
xor
xor
xchg
cmps
inc
mov
ror
adc
or
push
sub
stc
xchg
fsubr
clc
and
xchg
repnz
addr16
scas
mov
rol
xchg
data16
stos
aas
add
xchg
cld
pop
in
mov
in
adc
je
enter
mov
scas
jne
pop
xchg
pop
xchg
push
push
add
xchg
loop
in
(bad)
xor
sti
aam
sbb
in
xchg
push
and
fsub
pop
xchg
pop
test
adc
fadd
lock
movs
mov
xchg
jg
mov
jmp
xchg
pop
inc
inc
movs
jecxz
push
xchg
sub
hlt
add
enter
cmps
mov
(bad)
into
and
xchg
xor
pop
aam
push
add
pop
xchg
clc
outs
cmc
jg
sub
stos
scas
push
(bad)
movs
mov
mov
in
(bad)
fst
sbb
xchg
(bad)
sbb
cli
xchg
mov
pushf
addr16
xchg
push
jno
lock
retf
mov
hlt
scas
push
lods
xor
cwde
inc
cmp
ficom
lds
mov
aaa
add
div
loopne
cwde
int
jp
pushf
xchg
ror
lock
pop
je
mov
pop
pushf
push
xchg
xchg
mov
xchg
push
jge
cld
lods
jnp
(bad)
xchg
loope
dec
das
iret
ret
add
xchg
push
inc
and
call
cmc
adc
push
cdq
jl
mov
sub
leave
and
pop
adc
imul
mov
dec
push
stos
test
dec
xchg
outs
sub
ds
mov
fist
ss
xchg
inc
iret
adc
test
xchg
push
leave
jg
mov
mov
push
inc
push
not
imul
xchg
xchg
mov
repnz
xchg
and
mov
xlat
xchg
or
dec
mov
mov
stos
mov
xchg
popf
fcmove
or
and
xor
mov
xchg
add
aam
outs
outs
inc
mov
gs
jmp
xchg
xadd
out
xchg
sbb
xor
test
(bad)
jo
(bad)
push
xchg
ja
sahf
fdivr
mov
sbb
push
xchg
adc
dec
into
add
movs
stos
mov
test
xchg
sub
xchg
out
dec
psrlw
mov
je
in
sub
jmp
pop
rol
scas
in
jmp
leave
call
add
xchg
push
stos
repnz
mov
es
cli
push
sti
fwait
(bad)
or
sub
or
pop
xchg
cmp
jbe
cmp
add
addr16
into
aam
mov
xor
pop
fneni(8087
inc
int3
nop
xchg
pop
mov
add
pop
xchg
push
xchg
xlat
rcl
fnstsw
imul
adc
sbb
(bad)
pushf
test
bound
mov
xchg
cmp
out
clc
sub
aad
sbb
fwait
cmp
xchg
mov
sbb
xchg
xchg
dec
enter
cmps
popf
adc
xchg
xchg
cmp
pop
cmp
addr16
std
ds
mov
(bad)
xchg
inc
cdq
dec
or
loope
or
mov
fwait
jb
pop
xor
sti
fwait
and
gs
pop
push
call
sbb
adc
xchg
ins
xchg
adc
xchg
xor
aam
mov
or
inc
in
retf
clc
pop
xor
pop
cs
jns
jae
sahf
sbb
xchg
stos
jle
inc
sub
cwde
mov
hlt
jae
pusha
js
xchg
or
push
ins
enter
cdq
sbb
add
js
xchg
sti
push
in
call
lods
push
cmp
xlat
jmp
or
(bad)
popf
add
sti
call
add
fwait
cdq
jnp
jno
hlt
imul
test
cli
cmp
add
iret
(bad)
cwde
shl
int
adc
pop
xlat
mov
lahf
xchg
popf
das
mov
mov
xchg
bound
mov
push
xchg
push
pop
and
sete
or
bound
dec
inc
and
xchg
cmp
pop
popa
out
call
mov
push
stos
xchg
or
and
rcl
xchg
call
sbb
outs
(bad)
xchg
jle
add
mov
dec
fmul
jg
int3
les
into
pusha
and
fwait
pop
cmp
add
xor
lock
cmp
add
retf
and
dec
test
loopne
pxor
cmps
mov
gs
call
xchg
xchg
lea
retf
sahf
mov
xchg
sahf
repz
pop
fs
mov
out
sub
lods
scas
es
dec
in
xchg
lea
fild
xchg
jnp
mov
gs
cmp
retf
and
enter
add
push
ds
push
jne
xor
mov
jecxz
xchg
dec
jl
ins
mov
dec
(bad)
cli
addr16
je
cmc
xchg
adc
mov
mov
arpl
mov
sar
dec
test
mov
(bad)
daa
out
lock
ror
xor
mov
inc
sub
ins
xchg
jl
or
retf
xchg
shl
add
and
out
mov
scas
pop
fcom
sbb
mov
inc
inc
sub
mov
add
mov
outs
repnz
xchg
add
bound
or
clc
fst
or
jbe
xchg
mov
sub
in
xchg
lds
ins
jp
pop
xchg
sbb
inc
mov
pop
out
inc
shr
int3
jmp
test
mov
test
movs
or
jns
ins
push
sub
ja
mov
xchg
shl
add
imul
xor
dec
push
cdq
xchg
ret
push
scas
mov
inc
bound
ja
scas
push
mov
inc
xchg
imul
xchg
in
dec
mov
xchg
cmp
adc
les
movs
cmps
and
mov
cs
cmp
out
cmc
cmp
xchg
push
ds
scas
or
test
sbb
xor
loopne
mov
add
mov
push
cmp
in
out
jp
lahf
loope
pop
fst
mov
aam
loope
into
outs
xchg
mov
clc
jmp
pusha
cli
cwde
pop
sub
cmp
jp
push
xchg
sti
nop
ss
xor
xchg
and
xchg
xchg
cdq
fwait
pop
icebp
es
pop
and
sub
mov
pop
cmps
or
mov
mov
and
mov
fist
cli
mov
jmp
pop
fsubr
xchg
cmp
dec
dec
or
inc
outs
enter
mov
push
lock
cmp
arpl
outs
popa
aad
add
fiadd
(bad)
aas
ins
je
mov
imul
inc
out
adc
lods
cmp
xchg
or
cmp
mov
repz
dec
adc
jne
push
in
xchg
ins
push
sbb
xchg
mov
xchg
shl
mov
pusha
outs
ins
loopne
xor
repz
cmp
xor
adc
imul
rol
or
lods
xchg
and
jmp
shr
nop
or
dec
mov
pop
fwait
xchg
push
repz
jp
icebp
xchg
int
ds
or
mul
push
sub
sub
hlt
ins
mov
xchg
cwde
inc
push
adc
test
add
movs
lahf
aam
push
cmc
sub
(bad)
int
push
outs
cmp
push
jge
lea
mov
fidivr
out
sub
ds
sbb
sub
ins
fwait
out
jmp
mov
xor
pop
xor
jae
cld
scas
xchg
dec
mov
mov
add
xchg
and
xchg
pop
mov
inc
pinsrw
imul
add
arpl
push
fisubr
and
ror
xchg
pop
fimul
push
int3
sub
xchg
sahf
out
mov
mov
cmps
daa
inc
std
xchg
aaa
mov
xchg
out
add
sbb
xchg
adc
adc
xchg
lahf
fstp
jns
add
pop
xchg
sahf
lahf
aas
loopne
dec
mov
mov
rcl
jns
xor
push
pop
int3
outs
sbb
mov
mov
dec
push
or
xchg
xchg
in
inc
inc
mov
adc
in
imul
bound
(bad)
push
push
cld
xchg
scas
push
int
mov
scas
dec
and
bound
mov
ficomp
mov
mov
xor
xchg
push
lods
call
ret
into
cli
mov
adc
push
mov
mov
aam
sbb
add
push
shl
ror
test
pop
js
fwait
xchg
ss
sbb
frstor
adc
jle
ins
xchg
and
push
jmp
pop
cld
mov
xchg
pop
and
push
call
adc
and
add
dec
inc
xchg
imul
xchg
xchg
mov
mov
loop
xor
or
jbe
cmp
aas
mov
dec
test
(bad)
fcomp
into
mov
stc
or
inc
inc
mov
add
push
jo
rcl
dec
test
push
fcomi
imul
jbe
adc
xchg
adc
dec
or
xchg
jge
sar
loope
aad
xchg
xchg
mov
movs
xchg
or
test
(bad)
xchg
dec
cmp
dec
mov
xchg
push
cmps
popa
or
mov
js
xchg
xchg
outs
aam
sub
xchg
movs
(bad)
xchg
jo
test
push
mov
push
mov
push
pop
(bad)
xchg
dec
dec
outs
rcr
inc
or
mov
xchg
jb
fild
cwde
cmp
jae
adc
pop
xchg
imul
add
int
mov
test
ret
das
or
adc
xchg
fsin
sbb
and
sub
in
nop
push
add
loop
cmc
adc
push
int3
inc
scas
fs
stc
neg
pop
inc
add
and
fxch
sbb
adc
xor
test
mov
adc
arpl
jmp
stc
xchg
adc
not
dec
cmps
mov
add
les
and
or
xor
mov
mov
adc
xchg
xchg
lock
(bad)
nop
inc
jmp
mov
ins
out
lahf
mov
iret
test
or
inc
push
arpl
sbb
ds
mov
(bad)
aam
mov
ins
xchg
call
push
mov
sbb
xchg
repnz
mov
inc
popa
adc
add
jge
dec
test
lahf
fwait
mov
or
div
shl
adc
xchg
pop
pop
xchg
xchg
cmp
push
jnp
loope
adc
pop
jmp
xchg
aam
fstp
mov
hlt
or
imul
icebp
and
and
call
xchg
adc
mov
xor
jae
xchg
fsub
or
push
xor
popf
xchg
(bad)
inc
daa
xor
repnz
and
mov
retf
push
popf
lods
(bad)
xchg
xchg
mov
pusha
xchg
or
in
xchg
out
bound
xor
sub
cmp
loopne
mov
jo
xchg
adc
imul
ins
rcl
loope
xchg
xor
cmps
in
cli
push
inc
xchg
sbb
sub
dec
jnp
fwait
xchg
mov
gs
sbb
jne
ret
pop
mov
pop
fistp
lahf
dec
push
adc
xchg
call
jecxz
pop
add
or
xchg
mov
xor
gs
mov
xchg
fild
mov
push
retf
pop
lea
adc
xchg
or
not
dec
jmp
stc
inc
imul
mov
xchg
ins
sbb
pop
stos
(bad)
xchg
sub
mov
or
cdq
cwde
repnz
inc
push
jge
stos
push
mov
ins
push
adc
cmp
sbb
push
mov
xor
cdq
into
les
aam
xor
xchg
test
fwait
sub
loopne
in
xchg
pop
shl
bswap
add
xchg
or
jb
inc
mov
ret
outs
pop
sub
sbb
sub
iret
aas
mul
xchg
jbe
shr
and
pop
je
inc
mov
mov
es
jg
lods
sbb
mov
hlt
(bad)
jns
adc
xchg
push
popa
clc
jl
mov
stos
sbb
arpl
and
popf
pop
loopne
daa
mov
cmp
xchg
aaa
add
js
lods
es
pop
xor
hlt
cs
cmps
push
push
test
pop
pop
jae
retf
nop
pushf
xchg
sbb
lss
pop
js
pop
rcl
add
outs
popf
xor
aad
sbb
adc
jecxz
lea
aam
pop
pop
cmps
call
adc
int
cdq
adc
xchg
xchg
arpl
push
xchg
or
mov
(bad)
xchg
jecxz
fld
sub
cld
gs
aad
je
clc
xchg
pop
jne
xchg
adc
jle
cwde
jecxz
xchg
arpl
shr
xlat
jnp
jae
or
mov
cdq
fcom
popa
test
xchg
adc
pop
repnz
xor
xchg
or
pop
test
(bad)
pop
mov
out
add
test
jecxz
adc
arpl
xchg
inc
shr
fist
das
or
mov
cs
ret
xchg
xchg
out
mov
xor
or
das
xchg
add
push
(bad)
arpl
push
add
cdq
into
xchg
push
stos
ss
(bad)
ret
push
xor
add
jmp
arpl
push
pushf
sub
adc
xchg
pop
cmp
dec
pop
rcl
not
pushf
lods
mov
(bad)
jne
(bad)
add
loopne
cdq
add
dec
adc
xor
jbe
jno
and
addr16
xchg
mov
outs
pop
jns
ror
jne
xlat
and
out
nop
add
xchg
cmp
fnstcw
cmp
idiv
or
cli
xor
lods
xchg
mov
jecxz
pop
fwait
and
mov
cmps
leave
xchg
mov
adc
js
loop
cli
popa
xchg
stos
das
pop
leave
out
aad
loopne
ins
pushf
dec
dec
pop
test
mov
icebp
pop
xchg
xchg
std
or
xchg
xchg
call
xchg
sar
dec
ds
aam
popf
jnp
inc
out
stc
xchg
das
pop
int3
xchg
fnstenv
add
cdq
xchg
mov
enter
fdivp
outs
call
or
or
xchg
fwait
pop
sahf
(bad)
fucompp
in
mov
je
aas
cmc
lahf
ja
adc
adc
push
call
or
xor
pop
or
mov
rol
std
ss
cwde
arpl
or
jae
ins
add
xchg
jno
and
cmps
inc
sub
fstp
call
push
enter
mov
jo
ficom
xchg
outs
test
cmp
jmp
mov
mov
dec
daa
push
mov
xchg
mov
or
bound
iret
mov
xchg
mul
jge
cmp
mov
lods
or
adc
jge
cmp
pop
gs
mov
push
xlat
mov
mov
in
add
mov
add
push
xchg
ret
push
test
dec
push
and
cwde
ret
stos
test
xchg
cmp
int3
or
xchg
inc
mov
(bad)
mov
add
xchg
and
xchg
stos
mov
jle
in
das
mov
push
ror
div
fisub
mov
xchg
cmp
xor
jae
cmp
lods
dec
add
cwde
push
pop
push
adc
mov
xor
ror
mov
ss
cmp
sub
popa
add
add
xchg
xchg
fs
jns
shr
xchg
xchg
or
fs
shl
sbb
push
aas
mov
lahf
mov
mov
xchg
mov
fnstcw
dec
int
out
loope
out
xchg
mov
stc
adc
fwait
mov
call
ss
clc
pop
xchg
xchg
dec
pop
lods
aam
scas
pop
(bad)
jl
push
pop
xchg
loopne
pop
dec
push
sti
shl
imul
mov
inc
cmp
or
jne
mov
xchg
fimul
daa
sbb
imul
jge
add
and
pushf
fs
(bad)
je
mov
das
movs
push
scas
or
push
push
repnz
xchg
cmp
popf
xor
sub
jp
dec
cld
fwait
es
adc
cmp
add
(bad)
dec
sbb
xchg
push
jg
shl
and
je
arpl
fcmovnb
lea
xchg
mov
adc
cld
push
int
nop
cmps
pop
jle
mov
mov
int3
jmp
shl
jl
cs
es
jb
ins
xchg
fidiv
push
retf
mov
mov
lahf
pop
xchg
xchg
or
mov
xchg
jecxz
retf
push
pop
push
add
xchg
ror
dec
popf
arpl
fsub
mov
sub
dec
xchg
jo
fsubrp
mov
lods
or
jne
gs
test
lods
lea
push
xchg
mov
aam
and
push
add
xchg
sbb
mov
mov
ja
retf
xchg
push
push
push
(bad)
mov
mov
push
dec
jae
outs
test
adc
push
mov
scas
xchg
cmpps
pop
scas
xor
mov
les
test
and
mov
in
mov
xchg
jbe
popf
inc
jmp
mov
pop
and
fild
je
mov
xchg
or
jo
xchg
jecxz
push
pop
pusha
(bad)
ja
or
xchg
stos
imul
ret
adc
xchg
in
sub
xchg
adc
pop
mov
sbb
test
jns
xchg
lea
jecxz
xchg
cmp
inc
adc
je
xor
push
test
xor
push
xchg
add
(bad)
cmp
iret
sbb
mov
aam
push
pop
ret
mov
arpl
hlt
add
xchg
lods
jmp
test
add
sub
data16
hlt
pop
lahf
mov
push
jmp
mov
xor
add
jbe
xchg
cs
adc
jns
leave
mov
push
les
mov
retf
add
fwait
jo
push
mov
pop
ins
aad
xchg
cmps
retf
and
xchg
and
fmul
iret
cmp
adc
add
sub
mov
sbb
push
push
sbb
push
or
mov
adc
add
test
in
mov
test
into
cmp
xchg
and
gs
xchg
or
push
int3
xchg
push
push
js
into
cmp
(bad)
xchg
cmp
(bad)
ja
jns
movs
fwait
jge
mov
pop
inc
arpl
(bad)
pop
xchg
test
inc
das
bound
lock
xchg
xchg
out
cmp
jmp
movs
jne
xchg
sahf
repz
mov
sbb
jge
inc
dec
push
ret
xchg
mov
jae
pop
clc
test
adc
in
or
test
xchg
pop
mov
mov
adc
test
pusha
ins
xchg
mov
add
xchg
mov
push
jne
movs
mov
(bad)
pop
cmp
icebp
xchg
ret
push
jmp
jge
pop
jl
fcom
mov
cmp
push
jns
(bad)
nop
add
xchg
mov
popa
push
lods
je
popf
ror
jle
xchg
xchg
std
cmp
rcr
add
jp
retf
pop
lock
loopne
dec
xchg
in
lods
push
icebp
jl
jnp
inc
sti
rcl
ficom
xor
in
clc
movs
mov
push
push
jno
mov
aad
ret
imul
cmps
fcomp
pop
inc
sti
mov
and
adc
cmps
stc
push
lods
cmp
cmp
push
or
xchg
imul
mov
mov
shr
pop
stos
hlt
clc
add
inc
and
dec
pop
cmp
mov
cmps
xchg
inc
lea
loop
ins
xchg
or
into
adc
mov
or
push
sbb
push
stos
cmp
sub
push
repz
and
lea
mov
das
mov
outs
xchg
sti
xchg
cld
pop
mov
fcomp
jle
add
or
xchg
cmps
int3
sbb
icebp
pop
add
mov
push
inc
jecxz
retf
rcl
mov
jns
xchg
sub
cs
test
adc
je
mov
mov
pop
outs
lock
pop
in
je
push
inc
stos
and
mov
push
cmp
xchg
mov
(bad)
mov
stos
out
dec
pusha
push
adc
cmp
push
rol
ret
or
cmc
add
xchg
and
adc
fidivr
cmp
xchg
cwde
xlat
fnstenv
cmc
inc
loope
xchg
mov
mov
xchg
in
imul
adc
int3
xchg
jp
punpckhbw
cmps
jbe
call
xchg
push
es
xchg
adc
sub
jns
pop
jl
cmc
paddb
(bad)
push
push
pop
cmp
(bad)
jp
mov
inc
aas
or
test
or
xchg
rcr
mov
adc
es
mov
sbb
mov
repnz
fstp
je
mov
shl
dec
dec
int
mov
scas
xchg
ror
fwait
or
cmp
cwde
mov
adc
mov
xchg
rcr
push
into
xchg
push
mov
add
and
push
lahf
xchg
(bad)
xlat
cdq
adc
fdiv
inc
pusha
pop
in
fidiv
test
adc
xchg
push
xchg
jne
sub
fwait
test
jbe
or
cmps
sbb
mov
push
push
adc
cmp
push
icebp
push
xchg
pop
cmp
arpl
cmp
adc
retf
mov
test
pop
pop
sub
dec
shl
call
mov
sub
vpsraw
hlt
cmc
xchg
cmps
add
xor
lods
mov
push
xchg
and
out
fild
pop
mov
cdq
cwde
jnp
cmp
(bad)
push
repnz
leave
in
fsub
stos
(bad)
in
sub
add
xor
addr16
xchg
enter
xor
pop
sahf
xchg
sub
call
cmp
jg
lahf
xchg
xlat
sar
xchg
cli
mov
xchg
xchg
je
xor
xchg
aaa
push
or
sbb
xchg
outs
pop
push
lods
in
or
jle
xchg
and
rcr
push
scas
mov
popa
test
xchg
scas
test
xchg
xchg
jmp
(bad)
gs
mov
fs
adc
sahf
into
dec
js
mov
dec
and
sub
xchg
clc
cdq
mov
ss
stos
test
sbb
mov
jle
push
enter
aam
fwait
mov
mov
mov
adc
cmp
cs
arpl
inc
xor
(bad)
jle
xchg
cmp
popa
xchg
fwait
shr
adc
xchg
pop
retf
mov
mov
jae
outs
fisttp
xchg
xchg
mov
neg
icebp
push
mov
aaa
sub
xchg
sub
sbb
out
das
mov
sub
fadd
mov
in
push
dec
xchg
int
repnz
xchg
jmp
jmp
in
push
jg
iret
lock
(bad)
cli
xchg
pop
add
pop
in
(bad)
adc
cld
imul
jl
out
lea
adc
mov
out
cwde
or
shl
adc
in
pop
fnsetpm(287
xchg
jle
add
push
pop
loope
mov
mov
xchg
pushf
or
cmp
and
jmp
xchg
mul
(bad)
mov
mov
pop
dec
xchg
sbb
es
test
xchg
or
test
cmp
push
fisttp
repz
mov
mov
mov
dec
dec
adc
imul
and
cld
push
lods
xchg
sbb
js
jp
mov
xor
push
sbb
movs
lahf
inc
sub
push
push
adc
hlt
cmps
shr
or
imul
nop
(bad)
pop
mov
je
xchg
xchg
popa
jge
cmp
(bad)
cmps
add
ins
ficomp
ins
xchg
stc
retf
in
mov
fwait
enter
inc
fwait
xchg
imul
mov
cs
retf
call
(bad)
xchg
popf
neg
cmp
or
add
ja
mov
inc
hlt
inc
jnp
mov
push
movs
leave
push
fild
mov
fsubrp
mov
(bad)
and
out
cmppd
sub
xchg
sahf
pop
outs
js
shl
lahf
mov
popa
out
xchg
push
mov
shl
sub
dec
enter
daa
cmps
cmc
mov
cmp
or
cmp
rcl
(bad)
test
mov
mov
ret
cmc
lds
iret
lea
inc
rcl
adc
movs
sbb
or
data16
sbb
mov
xchg
xor
lahf
lock
ret
mov
ss
in
(bad)
mov
adc
aam
xor
pop
test
push
or
sub
addr16
mov
adc
fidivr
icebp
aam
inc
test
fwait
es
mov
dec
daa
jbe
rol
mov
xchg
movs
or
pop
dec
push
fwait
jmp
movs
pushf
or
sti
adc
test
fild
xchg
xor
inc
xchg
jmp
xchg
fs
ins
les
imul
mov
dec
(bad)
adc
xchg
mov
in
in
out
xchg
mov
icebp
or
pop
jae
inc
xor
stc
cmps
ret
push
xchg
and
loop
out
xchg
ret
(bad)
jle
ins
cmc
test
xchg
das
dec
dec
pop
bnd
and
mov
push
add
stc
add
and
jp
push
xchg
push
xchg
or
or
enter
iret
inc
hlt
inc
in
call
arpl
cmps
hlt
fldcw
pop
xchg
push
fcom
int3
inc
cmp
dec
call
ins
out
fs
sbb
xchg
sub
leave
fwait
(bad)
sahf
pop
jbe
stos
rol
imul
mov
cmc
sub
aam
enter
mov
adc
in
aaa
jbe
xchg
jb
sub
or
xchg
cmp
mov
loop
arpl
les
cmp
xor
aas
scas
push
lahf
push
cmp
pop
inc
cmps
pusha
dec
jo
and
dec
mov
int
and
bound
sbb
nop
fistp
aas
or
lods
adc
in
fwait
outs
adc
cmp
mov
xor
gs
and
xchg
xchg
xor
pop
xchg
out
bound
ds
xor
sub
push
xchg
iret
cmps
loopne
jae
jecxz
xchg
jnp
(bad)
ror
add
mov
out
xchg
adc
add
out
loope
loopne
inc
xchg
stos
mov
hlt
or
mov
cwde
adc
push
icebp
sbb
xlat
in
adc
mov
and
jbe
push
mov
retf
les
xchg
or
in
std
adc
mov
adc
push
dec
sub
inc
cwde
icebp
sub
adc
das
adc
rcl
mov
sbb
scas
push
outs
fbld
cdq
add
outs
mov
mov
mov
and
out
imul
push
int3
xchg
scas
les
stc
test
xchg
mov
outs
inc
mov
jbe
aaa
inc
inc
sbb
jmp
or
xchg
test
inc
add
cld
(bad)
into
aad
xchg
push
lock
mov
sub
xchg
int
fstp
arpl
jmp
lahf
aam
mov
pop
nop
lock
xchg
icebp
shl
pop
call
fnstenv
mov
xchg
cmp
loope
adc
loopne
pop
add
stos
adc
not
lock
aam
xchg
xor
sbb
xchg
dec
call
pop
jp
ins
mov
rcl
test
sub
dec
xchg
jbe
add
or
mov
push
retf
call
cmovl
mov
xchg
xchg
jl
xor
jb
(bad)
cmps
popa
fld
mov
sub
jae
jge
in
or
es
cmp
and
xor
cmc
in
fwait
call
aam
mov
mov
aam
clc
bound
ror
and
(bad)
xchg
in
enter
lahf
ja
xchg
or
mov
mov
dec
adc
or
test
xchg
dec
int
idiv
ror
xchg
mov
adc
xchg
and
daa
dec
mov
push
and
adc
adc
pop
out
and
push
loopne
addr16
mov
xchg
jle
loop
scas
push
lods
jnp
dec
outs
mov
mov
pop
sub
xchg
je
dec
pop
imul
or
and
ficom
xchg
xor
inc
jmp
add
lock
add
mov
sbb
call
mov
xchg
bound
jns
test
xchg
(bad)
bsr
and
popf
mov
adc
rcl
or
mov
jg
out
cmp
xchg
mov
and
xchg
and
aaa
push
mov
cmp
inc
inc
arpl
pusha
push
xchg
pop
inc
(bad)
push
pop
ucomiss
cmc
imul
aam
ret
mov
xchg
stos
fwait
je
push
gs
xor
mov
mov
mov
dec
xchg
mov
stos
iret
and
sbb
sbb
push
jle
ins
fiadd
pushf
push
xchg
mov
push
or
sub
or
and
dec
jns
adc
add
sbb
xchg
rol
repz
retf
mov
mov
out
mov
rcr
out
xchg
mov
fwait
ss
cmps
aas
fs
test
loope
das
test
xchg
mov
mov
stos
repnz
sbb
xlat
xchg
lahf
adc
ret
push
daa
inc
(bad)
out
mov
jae
mov
setb
xchg
pop
xchg
js
fiadd
mov
inc
lods
movs
mov
das
xchg
cwde
jmp
leave
data16
js
xchg
xor
pop
xor
push
jbe
mov
fdiv
dec
retf
mov
movs
xchg
mov
(bad)
lods
ds
adc
stc
mov
jle
xchg
out
mov
pop
je
inc
xchg
jp
dec
mov
and
push
and
in
imul
mov
pop
sbb
xor
xchg
mov
mov
iret
push
stos
mov
jg
enter
and
movs
jp
mov
jno
sub
je
icebp
xchg
aam
leave
adc
test
push
adc
jmp
outs
xchg
popa
rcr
push
sbb
cmps
or
sub
mov
rol
lea
ins
mov
sbb
pop
shl
jle
adc
jl
test
pop
jecxz
xchg
adc
repz
add
fnstcw
xor
xchg
or
cmp
sub
fwait
call
ret
fsubp
cmp
cmp
xchg
mov
gs
hlt
imul
ja
mov
fisub
mov
xchg
pop
inc
add
ret
icebp
sub
xchg
ficom
lahf
shl
mov
(bad)
xor
mov
mov
dec
lods
xchg
push
sahf
pop
jmp
ss
stc
jl
xchg
sub
or
jge
cmc
cdq
xchg
dec
xchg
ror
xchg
dec
mov
test
(bad)
icebp
pop
cli
retf
mov
xchg
xchg
rcr
xor
push
inc
and
prefetch
jmp
xchg
xor
pop
push
fidiv
test
push
adc
mov
rcl
xchg
mov
(bad)
or
iret
mov
mov
jecxz
(bad)
stos
stc
jp
push
out
pop
ja
mov
xchg
dec
dec
sub
loop
dec
test
lods
gs
js
retf
inc
cmps
fwait
xor
(bad)
jle
xchg
outs
out
cs
xchg
sbb
in
jp
fcom
sbb
in
mov
out
shl
mov
adc
adc
mov
pop
mov
push
pop
and
sub
aam
inc
clc
xchg
push
jp
mov
or
sub
adc
lea
fwait
xchg
aam
and
xchg
out
scas
xchg
xchg
jb
nop
pop
cmp
push
pop
fwait
push
and
cmp
sbb
das
leave
pmuludq
or
cmp
dec
xchg
jg
or
not
xchg
lea
cmp
sub
push
jo
in
test
xchg
dec
sbb
cmp
xchg
mov
popa
repnz
inc
xchg
(bad)
pusha
lods
adc
leave
push
xchg
pop
gs
adc
fst
cs
push
xchg
popa
fwait
cmp
inc
jmp
mov
test
mov
ss
hlt
fild
adc
xchg
mov
mov
sbb
and
or
hlt
jne
fwait
fwait
sbb
and
test
not
movs
ins
js
ret
adc
mov
sub
xchg
mov
xor
gs
(bad)
in
push
inc
rol
mov
or
xor
stos
imul
xchg
and
mov
mov
cs
adc
and
xchg
lahf
lods
sub
fwait
dec
repz
clc
xor
pop
dec
inc
je
nop
sub
jns
mov
or
adc
xchg
mov
xchg
mov
fiadd
xchg
inc
iret
jmp
xchg
js
sahf
adc
add
xchg
scas
in
ret
mov
xchg
cs
sbb
adc
dec
xchg
sub
loope
xchg
imul
out
push
into
sbb
pop
cmp
int
mov
mov
leave
xchg
dec
jg
(bad)
xchg
ret
pop
fwait
mov
in
ja
xchg
fsubr
mov
ins
call
jmp
cmp
scas
mov
xchg
adc
mov
lahf
(bad)
call
ja
mov
je
out
in
js
mov
hlt
fld
xchg
mov
inc
adc
iret
scas
fmul
fcom
push
hlt
xchg
out
adc
xor
inc
imul
ficomp
ficom
sub
push
fisttp
and
dec
cmp
outs
sahf
mov
in
in
and
sub
and
aam
cld
xchg
lods
adc
ss
adc
outs
mul
les
repz
jmp
adc
lods
adc
(bad)
pop
sti
pop
stos
stos
fmul
dec
push
nop
pushf
xchg
shr
push
add
xor
int
mov
loope
jecxz
addr16
mov
inc
add
leave
cmp
lahf
retf
les
inc
loope
mov
jecxz
and
dec
mov
mov
cmp
mul
cdq
pop
sub
popa
ja
adc
dec
clc
hlt
xchg
cmp
std
jmp
stos
mov
add
pop
ret
jmp
in
xchg
movs
imul
(bad)
in
neg
(bad)
pop
or
das
mov
ins
xchg
ror
adc
shr
jae
movs
in
mov
adc
dec
pop
fnsave
cmps
add
fs
xchg
(bad)
scas
in
in
mov
xchg
add
pop
xchg
cmp
jnp
sti
call
inc
xchg
inc
jmp
xchg
icebp
retf
cmp
shr
xchg
xchg
lea
xor
dec
add
fwait
test
aam
jo
repz
xchg
hlt
ja
mov
repnz
ret
and
jge
lods
adc
mov
sub
ins
out
add
ins
adc
imul
setnp
rcl
enter
cld
arpl
sub
xchg
rcl
add
jge
xchg
sbb
aam
add
xchg
fwait
mov
sahf
rep
dec
in
test
imul
fwait
sti
inc
sbb
test
adc
rcl
dec
xchg
in
and
(bad)
mov
mov
adc
pop
nop
leave
sub
xchg
(bad)
sti
hlt
popf
aaa
pushf
cmp
xchg
cmp
adc
ficomp
push
daa
pusha
jge
adc
mov
mov
int
pop
xchg
xchg
out
and
js
cmp
xchg
inc
pop
jecxz
mov
xor
repz
mov
jne
dec
and
xchg
lods
int3
push
mov
stos
pop
sub
xchg
or
ds
loop
xchg
sahf
and
mov
cmp
push
and
xchg
push
repnz
or
xor
pop
(bad)
call
push
ja
ins
pop
stc
pop
shr
lock
jnp
loop
xor
xor
dec
sbb
or
hlt
das
rcl
xor
or
add
pop
mov
jmp
jmp
jns
adc
aas
fnstsw
fwait
push
in
or
add
xchg
test
(bad)
(bad)
arpl
sbb
aam
mov
or
mov
add
push
ds
pusha
xchg
jp
int
xor
or
sbb
xchg
push
adc
mov
jg
pop
xchg
mov
adc
ficom
(bad)
popf
rcl
xchg
je
mov
xchg
dec
mov
mov
and
test
es
xchg
pop
call
dec
inc
push
push
lock
fist
add
or
jp
stos
loop
xchg
xchg
sbb
jns
mov
cld
fmul
test
fst
(bad)
sbb
fcmovnu
fist
arpl
(bad)
gs
fwait
test
push
and
add
xchg
daa
cmps
std
push
push
fwait
sti
in
xchg
push
jmp
scas
and
outs
sub
jl
inc
xor
test
fbld
sbb
mov
xchg
inc
shl
std
mov
sbb
inc
cs
cdq
push
xor
loope
retf
and
into
iret
pop
jno
cdq
jp
test
pop
rcl
and
mov
xchg
cmc
push
add
sub
mov
int
test
mov
fidivr
push
xchg
stos
adc
shl
je
addr16
ins
adc
xor
cld
loope
push
sub
jecxz
mov
movs
mov
cs
sub
aas
je
cmp
arpl
or
adc
dec
xchg
dec
xchg
dec
call
adc
and
sbb
cdq
stc
dec
xchg
dec
or
push
repz
mov
pop
(bad)
mov
xchg
out
cmps
mov
jnp
lea
mov
sbb
imul
push
mov
adc
mov
jecxz
jne
movs
inc
js
xchg
not
dec
mov
mov
xor
fs
test
gs
sub
or
xchg
cmp
jp
xchg
out
pop
aad
lods
push
pop
shl
ins
ret
mov
xchg
mov
cmp
mov
jle
xchg
or
retf
mov
mov
es
call
sar
inc
scas
xchg
int
xlat
fsub
gs
xchg
dec
push
mov
in
out
icebp
sub
mov
stc
mov
je
mov
jge
das
inc
test
jg
xchg
sub
mov
rcl
mov
lods
and
mov
sti
nop
mov
ret
sahf
pop
loop
jbe
mov
aam
inc
add
fwait
add
mov
cmp
xchg
mov
scas
shl
xchg
inc
pop
jl
addr16
fdivr
xchg
ret
cmp
shl
mov
(bad)
xchg
popf
iret
rol
mov
push
aaa
dec
xchg
aam
jne
cmp
pop
jmp
(bad)
pop
fisttp
mov
pop
xchg
cmp
and
cmp
pop
xchg
jecxz
inc
outs
xchg
adc
jbe
cdq
cmp
les
dec
mov
xchg
daa
ds
inc
into
dec
adc
(bad)
dec
stc
inc
lahf
and
xchg
and
mov
lock
xchg
bound
add
sub
pop
imul
pusha
add
adc
movs
fwait
lods
lods
pop
adc
hlt
(bad)
jmp
push
test
adc
sub
xchg
sti
mov
pop
jg
ret
jmp
add
inc
addr16
and
pop
lds
or
ss
adc
inc
repz
dec
cmp
leave
xchg
add
jl
mov
pop
cmps
movs
push
out
popf
add
xchg
mov
mov
popa
xchg
xlat
mov
xchg
inc
xor
inc
xchg
sbb
or
scas
xchg
xchg
pop
push
int
dec
fs
nop
in
xchg
sub
dec
sbb
mov
xchg
sub
and
dec
mov
hlt
ins
push
out
mov
xlat
test
xchg
inc
call
jb
pop
mov
stc
cld
mov
scas
adc
fcomp
mov
ror
js
xchg
scas
into
ja
fidiv
sbb
mov
add
or
je
mov
push
clc
popf
push
xchg
sbb
out
cmp
or
sub
cmc
xor
and
dec
jmp
push
popa
repz
sub
adc
nop
jbe
mov
add
inc
jbe
xchg
cmp
inc
jmp
inc
pop
iret
mov
add
mov
add
xchg
or
mov
or
les
mov
ds
in
(bad)
mov
jl
repz
inc
adc
pusha
jns
xchg
push
sub
pop
push
xchg
ja
mov
inc
pop
pop
outs
rol
xchg
rol
and
xchg
shl
daa
jne
shl
jmp
hlt
and
fstp
nop
adc
stc
dec
cmp
retf
xchg
mov
adc
(bad)
cmp
dec
int
fwait
add
fs
fimul
sbb
inc
push
dec
out
int3
cmp
iret
xor
pop
xor
stos
call
xchg
jecxz
adc
pop
(bad)
mov
test
cli
adc
test
cmps
push
xor
jmp
fwait
(bad)
mov
and
stos
outs
fbld
in
hlt
mov
xchg
fwait
sbb
fs
adc
std
xor
(bad)
xor
jg
nop
test
push
mov
jmp
add
les
push
pop
xor
inc
gs
mov
rcr
mov
inc
ins
fadd
sub
push
and
les
retf
xchg
cwde
inc
call
mov
test
or
dec
push
xchg
ins
push
xchg
mov
enter
add
les
movs
fwait
ret
pusha
cmp
push
(bad)
push
dec
je
mov
sti
inc
fs
mov
arpl
out
xchg
cmp
and
sbb
inc
jge
cmp
shl
shl
mov
pushf
jbe
addr16
(bad)
jmp
dec
xchg
add
outs
out
repz
inc
xchg
jnp
lahf
jle
es
mov
clc
std
adc
mov
out
mov
xchg
mov
dec
int3
sti
xchg
xor
ror
in
lahf
push
std
test
dec
mov
int
fmul
jl
loopne
rcl
arpl
mov
fwait
stc
xchg
adc
out
add
xchg
push
out
mov
es
and
jnp
mov
inc
jmp
je
fmul
and
mov
sub
pop
shr
xchg
xor
(bad)
pop
int3
jg
adc
jmp
mov
xchg
xor
in
ins
xchg
jbe
cdq
mov
xchg
and
les
fabs
into
pop
sub
sbb
xchg
sbb
or
adc
xlat
push
jne
in
mov
xor
sbb
mov
jo
shr
or
out
xchg
dec
mov
jp
ss
xchg
int
push
ficom
cmp
xchg
stos
mov
mov
pop
test
mov
lock
mov
ds
push
xchg
fldcw
and
dec
mov
outs
mov
pop
xchg
mov
lods
sbb
jl
mov
add
adc
in
xor
scas
xchg
int3
dec
leave
iret
push
inc
popa
or
or
loop
jo
jmp
inc
and
aam
lahf
mov
xor
movs
mov
iret
xchg
cmp
int3
fist
sbb
jge
pushf
les
add
or
xlat
rcl
cmp
arpl
xchg
xor
scas
mov
jp
mov
xchg
jecxz
or
sar
push
stos
ret
test
inc
xor
gs
jbe
push
cwde
xchg
repnz
xchg
loop
cs
cmp
mov
jg
and
xor
loope
fist
adc
cmp
push
add
call
rcr
mov
adc
pop
ds
scas
sbb
fld
push
les
mov
fcom
adc
xchg
test
ds
scas
ins
sub
sbb
cmp
cmc
mov
ins
rol
sub
(bad)
mov
arpl
push
xchg
push
mov
xor
xchg
fcom
movs
repnz
stos
xchg
xchg
cmp
xlat
cld
mov
add
jne
adc
enter
xor
outs
(bad)
repz
jmp
push
fs
xchg
mov
cs
adc
cmp
lods
sub
ins
xchg
ins
loopne
dec
rcl
xchg
mov
adc
call
in
cli
loopne
sub
test
add
xlat
mov
(bad)
xchg
mov
ficomp
xchg
rol
rcr
call
clc
dec
mov
sbb
pop
xchg
outs
ins
adc
popa
out
int3
cmps
xchg
xchg
push
dec
xor
pop
mov
aam
xchg
add
fdivr
into
add
fimul
mov
inc
lea
xchg
mov
nop
mov
mov
retf
loopne
fs
xchg
sti
add
mov
retf
test
into
xchg
inc
sbb
pop
inc
pop
sahf
fcom
cmps
ins
jae
enter
sar
test
push
(bad)
dec
sbb
int3
in
xchg
push
retf
clc
les
jmp
inc
daa
sub
icebp
cwde
cmps
nop
or
xchg
shl
or
mov
ror
mov
jns
jbe
xchg
mov
inc
mov
aas
call
es
sbb
and
inc
int
jg
jecxz
xchg
scas
add
push
call
xchg
mov
nop
xchg
and
push
stos
jns
sub
xchg
loop
in
(bad)
(bad)
sub
mov
push
retf
push
scas
outs
or
push
in
mov
add
(bad)
out
aad
dec
xor
pop
pusha
sbb
push
mov
dec
retf
mov
cli
repnz
inc
outs
xor
xchg
repz
cld
xor
lahf
leave
jb
mov
in
adc
in
cmps
jecxz
xchg
std
jmp
xchg
inc
inc
cmps
cmp
sbb
add
mov
mov
xchg
xor
cs
fld
inc
push
fcom
xchg
pop
stos
dec
mov
cmp
bound
xchg
je
mov
sti
mov
repnz
push
push
jmp
inc
push
das
xchg
push
push
mov
(bad)
mov
jnp
icebp
out
add
mov
pop
mov
mov
cmp
ret
jnp
test
xchg
mov
xor
sbb
lods
xchg
adc
sbb
xchg
cmp
mov
rcl
ins
out
loopne
mov
shl
sub
and
outs
xchg
pushf
pop
popa
jne
loope
ror
xchg
mov
xchg
sbb
add
mov
xchg
mov
pop
sbb
stc
pop
dec
rcl
push
and
mov
sbb
pop
mov
or
inc
shl
sar
jmp
fwait
(bad)
and
cwde
bnd
cld
mov
dec
lahf
icebp
out
inc
mov
xchg
ss
xchg
jge
mov
(bad)
xchg
stos
push
pop
fst
or
and
(bad)
in
xchg
fwait
inc
cmp
lods
cld
cmp
mov
aam
cmp
in
rol
in
xor
cmps
xchg
adc
cdq
xchg
adc
push
test
xor
push
arpl
cmp
pop
adc
adc
fs
dec
pop
sub
pop
fldcw
das
add
(bad)
aam
div
and
(bad)
sbb
popf
push
fwait
pop
or
jmp
imul
mov
sbb
adc
cmp
xchg
mov
ins
sbb
cmp
pushf
adc
rcl
jbe
inc
jmp
mov
fwait
cld
xchg
jo
jecxz
fsubr
adc
xchg
iret
ja
(bad)
push
fmul
jle
add
stos
lods
cmp
jns
das
add
jo
pushf
xor
xlat
cmp
pop
mov
mov
aam
lahf
in
out
xchg
mov
jg
movs
mov
jb
out
inc
test
jp
xchg
pop
jo
push
aas
sub
aam
jl
inc
jl
mov
loopne
into
xchg
aaa
stc
hlt
adc
xchg
outs
retfw
mov
jae
cmc
add
mov
mov
out
or
xchg
mov
ss
mov
sub
push
adc
aaa
popf
xchg
int
cwde
out
in
sub
jbe
xchg
mov
(bad)
(bad)
and
pushf
lods
jmp
shl
ins
imul
fdiv
sub
out
push
test
mov
shl
push
xchg
inc
(bad)
xchg
jmp
xor
xor
pavgb
mov
xchg
dec
(bad)
leave
inc
xor
movs
push
xor
into
iret
mov
mov
xchg
fdivr
test
sub
xchg
dec
xor
cli
imul
fdivp
push
xchg
push
ja
adc
sti
das
(bad)
imul
in
sub
das
xchg
push
in
(bad)
sbb
jne
shl
loop
rcr
mov
into
xchg
jmp
arpl
xchg
fucomp
movs
leave
pop
cmp
jl
cmp
mov
test
sbb
cmc
jb
mov
cmp
sbb
paddd
sbb
xchg
inc
fsubr
ins
mov
mov
test
jae
in
xchg
push
(bad)
xchg
fiadd
sub
and
(bad)
fcom
xlat
outs
jne
cmps
(bad)
xchg
adc
mov
mov
sti
sub
xchg
mov
sahf
ss
pop
test
sub
adc
shl
xor
mov
jae
mov
scas
out
jae
test
push
(bad)
and
je
fcomp
adc
and
ret
cmp
jnp
mov
push
shr
adc
dec
loope
xchg
(bad)
mov
jne
dec
mov
push
outs
sahf
push
inc
xchg
adc
in
fwait
inc
sbb
outs
and
out
xlat
je
fwait
xchg
sub
xchg
push
adc
sbb
out
in
pop
inc
fwait
and
or
xor
pop
or
and
ret
js
xchg
jl
and
stos
cmps
fistp
xchg
nop
sbb
iret
jg
jp
popa
popf
push
inc
and
lahf
sub
xchg
xchg
push
xor
(bad)
xchg
sbb
push
mov
xchg
jns
imul
ret
or
call
push
lock
and
repnz
(bad)
sub
dec
sub
pusha
mov
frstor
sbb
xchg
stos
xchg
pusha
and
xor
adc
mov
pop
aaa
mov
push
push
push
rol
cmp
lods
xchg
shl
xlat
xchg
imul
pop
ret
shr
cmp
and
aad
call
pop
xchg
xor
stos
shld
xchg
jl
call
push
sbb
mov
sbb
(bad)
stc
cmp
rcl
dec
repnz
mov
adc
sbb
in
out
mov
aam
fbstp
(bad)
xchg
sub
(bad)
pop
scas
or
dec
xchg
imul
pop
scas
mov
cmp
rcl
xchg
xchg
inc
aam
mov
fxch
cdq
and
aad
xchg
stos
mov
adc
clc
out
pop
xchg
mov
xchg
pop
movs
cmp
hlt
mov
sub
xchg
dec
add
inc
sbb
sahf
pop
fistp
xchg
inc
fs
cs
int
dec
xchg
retf
js
fstp
std
cmps
fisubr
inc
bound
push
mov
jo
xchg
fiadd
retf
pop
fwait
retf
and
inc
clc
cmp
(bad)
fist
leave
(bad)
addr16
test
aaa
xchg
stos
push
daa
test
mov
(bad)
out
jno
add
xor
inc
call
xchg
push
mov
out
xchg
dec
fild
shl
shl
xchg
std
adc
cmp
ins
fptan
mov
dec
inc
fcom
dec
inc
mov
pop
xchg
or
aad
dec
sbb
into
xchg
xor
(bad)
jmp
xchg
loope
adc
inc
inc
inc
cmp
or
xchg
aam
mov
aaa
xchg
sub
adc
xchg
mov
mov
fucom
or
pop
mul
(bad)
fs
push
xchg
repnz
mov
push
hlt
(bad)
mov
push
je
pop
(bad)
in
mov
push
adc
out
xchg
(bad)
rcl
idiv
in
mov
xor
fcom
outs
ins
lahf
pop
xchg
cmp
xchg
xchg
(bad)
jge
sti
xchg
sub
(bad)
jbe
pop
daa
jb
sub
add
sbb
jns
mov
xchg
mov
pop
psrlw
in
dec
xchg
mov
xchg
cmp
mov
mov
lods
les
out
scas
sbb
xchg
cmp
xchg
mov
push
cmp
test
jo
mov
dec
or
jecxz
mov
xor
shl
xor
lea
xchg
adc
and
test
inc
arpl
out
mov
xchg
nop
inc
xchg
retf
test
into
adc
(bad)
xchg
xrelease
js
cmps
imul
enter
js
xchg
pop
and
mov
inc
call
jnp
imul
xchg
or
scas
and
imul
jnp
int
push
out
popa
push
in
push
mov
xchg
jmp
dec
bndldx
outs
fst
mov
xchg
dec
xlat
dec
aam
push
push
xchg
dec
mov
pushfw
jns
push
jae
inc
sbb
jecxz
xchg
jnp
ror
cwde
test
xchg
iret
adc
stos
out
loop
xchg
xor
imul
jmp
ja
ins
push
je
lea
mov
daa
xchg
in
xchg
sbb
xchg
adc
dec
xchg
pop
jmp
xchg
pop
inc
test
outs
lahf
movs
fwait
mov
movs
xor
into
lea
xchg
enter
sti
push
push
xchg
xchg
adc
pop
cld
test
je
add
mov
fdivr
mov
cmp
and
pushf
hlt
ror
fs
jge
push
dec
ins
mov
ss
or
mov
stos
pop
not
xchg
mov
mov
test
inc
push
les
popa
adc
call
cwde
jmp
push
and
shl
jl
sbb
push
gs
jmp
mov
or
rcl
or
lds
test
dec
vpshlb
mov
xlat
xchg
arpl
cmp
dec
mov
daa
xchg
adc
push
loope
(bad)
adc
jge
lea
hlt
(bad)
stos
sbb
test
test
xchg
xchg
push
or
add
mov
xor
and
int
imul
shl
xchg
pop
es
xor
loopne
sbb
std
push
xchg
cli
fdiv
in
dec
lods
fsub
outs
mov
jl
xlat
inc
adc
push
fcom
add
inc
out
dec
mov
sbb
xchg
jns
fcmovu
sub
call
mov
mov
aam
adc
push
stos
adc
adc
hlt
sub
mov
movs
cmps
add
sahf
fwait
adc
pusha
push
aas
cdq
jbe
pop
push
fcom
xlat
xchg
mov
int3
call
sub
imul
test
pop
cdq
jecxz
or
inc
mov
xchg
les
enter
stc
xchg
mov
in
popa
jns
xchg
mov
xchg
retf
sub
xchg
jecxz
je
iret
or
popf
ret
adc
pop
icebp
(bad)
mov
out
out
jmp
xchg
mov
jb
cmp
movs
add
stos
push
lods
jmp
pop
adc
leave
mov
pop
fsubr
push
imul
or
jnp
sahf
mov
xchg
(bad)
xor
add
push
push
icebp
jl
cmps
jne
pop
xchg
fs
or
adc
adc
cli
or
xchg
(bad)
xor
in
mov
jne
xchg
mov
mov
cmp
jns
outs
sub
jbe
and
add
xchg
pop
cmps
test
mov
and
xchg
xchg
adc
inc
push
iret
xor
imul
push
jnp
fild
je
nop
jmp
cld
imul
aaa
cmc
xchg
sbb
enter
cmp
adc
push
in
dec
inc
sub
sbb
adc
pop
push
adc
jg
xchg
rol
jmp
arpl
es
or
aas
pop
xchg
pop
jg
fcomp
xchg
push
mov
je
mov
mov
scas
lahf
es
xchg
add
push
push
(bad)
outs
push
not
call
shl
sbb
cmp
idiv
jnp
push
dec
mov
or
xchg
xchg
xchg
jno
fdivr
sbb
test
push
xchg
std
aam
cwde
sub
data16
movs
and
out
int
sbb
arpl
xchg
(bad)
push
xchg
mov
gs
outs
mov
mov
jge
jns
out
or
xchg
adc
imul
push
pushf
sub
mov
add
mov
aas
and
test
(bad)
dec
enter
xchg
inc
push
ja
aam
jo
xchg
je
push
xor
out
push
stos
xchg
or
enter
pop
cs
jle
xchg
shl
lds
mov
popa
adc
pop
and
pop
jbe
xchg
xchg
stos
stc
mov
hlt
sub
xchg
xor
lock
mov
or
xchg
test
cmp
in
mov
test
xchg
js
cmc
shl
ficomp
mov
sub
dec
push
adc
pop
cmp
xchg
push
je
loope
jg
xor
pop
stc
ret
shr
sub
mov
sub
mov
enter
add
arpl
(bad)
xchg
(bad)
push
xor
inc
repnz
loop
imul
and
xor
dec
jae
nop
loop
rol
or
ins
into
mov
in
loop
xor
not
inc
loope
xchg
(bad)
sbb
js
popf
push
xchg
enter
repz
dec
sub
push
fnstcw
sti
sub
adc
xchg
lds
jge
mov
push
int
adc
inc
ret
test
out
cdq
xchg
je
bswap
sar
and
jb
xchg
mov
cwde
aam
jmp
(bad)
sub
out
xchg
xchg
outs
jg
pop
sub
inc
or
xchg
cmp
fiadd
jge
xor
xchg
or
scas
fnstenv
jo
bound
add
jno
inc
mov
and
sbb
in
add
mov
push
ror
cwde
cli
in
xor
ret
nop
sbb
xchg
mov
(bad)
mov
jno
cwde
add
inc
imul
xor
aam
jne
jae
push
sahf
hlt
fstp
fwait
and
arpl
adc
push
mov
or
mov
lods
fmul
retf
rol
dec
addr16
sbb
aas
jae
xchg
je
mov
mov
imul
or
daa
dec
enter
ins
(bad)
xlat
sbb
std
(bad)
sbb
je
iret
jmp
inc
jl
out
fwait
lahf
rol
add
test
mov
jbe
push
es
push
pusha
mov
outs
push
hlt
add
push
jnp
mov
mov
aam
inc
sub
sbb
(bad)
imul
cwde
cmp
mov
add
cmp
in
ins
scas
xchg
xor
xor
mov
xor
mov
jmp
fs
or
retf
xchg
add
mov
ret
out
hlt
jne
and
mov
mov
mov
mov
pushf
retf
or
xchg
lea
xchg
fild
mov
in
les
mov
inc
aas
mov
xchg
dec
cmc
gs
xor
sbb
xchg
aaa
and
shr
pushf
push
mov
mov
push
push
mov
rcl
xchg
pop
stos
xchg
inc
xor
adc
xor
mov
push
mov
aam
scas
xor
and
push
aam
nop
cli
or
dec
out
and
rcl
cmps
xor
mov
or
arpl
in
je
pushf
jns
dec
xchg
add
(bad)
dec
mov
stos
cwde
adc
int
in
xchg
add
push
aam
loop
xchg
pop
cmp
mov
xchg
out
sub
cwde
xchg
scas
add
push
xor
or
stos
dec
mov
xchg
cmps
or
fsubr
xchg
sbb
mov
xchg
dec
idiv
shr
fwait
shr
push
mov
mov
ins
push
adc
sbb
jmp
mov
ja
mov
nop
clc
ja
jl
xchg
imul
sar
push
and
or
sub
add
add
add
dec
or
mov
xchg
dec
lock
pop
mov
jle
call
popa
frstor
mov
sub
mov
iret
test
mov
push
clc
xchg
aaa
loopne
sub
inc
rcl
test
je
outs
xor
or
cld
add
or
adc
xchg
ret
sub
xchg
sub
sbb
repnz
xchg
jb
outs
dec
pop
out
sub
retf
mov
xchg
lods
add
and
popf
sbb
stos
dec
mov
sub
nop
mov
xchg
pop
jmp
test
js
stos
mov
add
xor
outs
xchg
pop
push
and
push
mov
pop
xchg
fwait
xchg
enter
sbb
mov
xchg
add
and
mov
jo
jb
sahf
add
mov
mov
iret
pop
inc
adc
stos
mov
add
enter
retf
xchg
test
sbb
mov
test
or
inc
enter
loop
mul
jne
and
or
retf
xchg
mov
add
sub
pusha
dec
aad
push
add
(bad)
sub
sbb
inc
test
push
mov
and
loop
mov
(bad)
mov
imul
mov
xchg
jno
cmp
(bad)
sti
loope
fwait
mov
xchg
(bad)
xchg
or
mov
dec
dec
xchg
dec
pop
xchg
hlt
jns
out
adc
jo
in
push
ficom
idiv
aam
cmp
xchg
mov
mov
lock
xchg
lea
jmp
adc
push
sub
stc
xchg
movs
int3
mov
stos
xchg
adc
inc
call
sbb
mov
mov
je
xor
fisub
cli
mov
shl
in
lods
data16
xchg
dec
sti
sbb
xchg
xor
mov
xchg
mov
aad
inc
mov
push
xchg
and
jmp
loope
mov
dec
jle
popa
xchg
aas
mov
xchg
cmp
xchg
or
in
jae
repz
add
int3
iret
fs
dec
dec
push
push
js
ja
xor
adc
imul
aam
xor
mov
cmp
inc
(bad)
fst
js
mov
mov
ins
cmp
jnp
aam
dec
pop
shl
xchg
in
es
or
cwde
call
test
xor
test
loop
xchg
popa
out
fnsave
outs
das
push
xchg
and
or
hlt
sbb
in
js
mov
mov
(bad)
xchg
jno
(bad)
pusha
xchg
mov
pop
inc
xchg
dec
mov
repz
cmps
movs
imul
inc
sbb
(bad)
inc
pop
out
and
dec
jle
mov
mov
and
xor
shr
cmps
add
stc
push
xchg
mov
dec
mov
retf
into
pushf
addr16
mov
or
sahf
mov
xchg
and
cdq
fcmove
lods
in
loopne
pop
(bad)
clc
in
scas
pusha
add
ret
lock
mov
sbb
mov
xchg
pushf
cmp
pop
les
push
inc
mov
std
add
mov
dec
rol
cld
movs
jg
jl
mov
adc
fiadd
cmps
mov
fistp
cmp
sahf
sbb
test
dec
(bad)
push
xchg
aad
enter
sub
rol
stc
and
xchg
jl
arpl
pop
sti
xchg
jne
dec
sub
lea
pop
pop
shr
ror
push
popf
popf
and
push
adc
and
mov
adc
mov
push
adc
mov
add
xchg
and
lea
jmp
fistp
repnz
(bad)
push
xchg
adc
shl
lods
xor
pshufw
sbb
xchg
and
cmp
fadd
js
out
push
inc
cdq
lods
fwait
push
in
rcr
xor
cmps
shl
xchg
dec
cmp
jo
xchg
int
call
push
cmp
shl
mov
mov
retf
cs
inc
ja
frstor
xchg
mov
xchg
dec
jne
sbb
dec
and
pop
sti
fcom
cli
add
pop
or
arpl
xchg
adc
test
loopne
adc
xchg
add
xchg
cmp
test
xchg
idiv
scas
push
sbb
xchg
hlt
lahf
add
push
cdq
sub
dec
ja
push
mov
jbe
xchg
rcl
add
xchg
mov
je
cmp
push
sub
push
pop
xchg
xlat
push
adc
xor
loopne
cmp
mov
adc
(bad)
mov
out
aam
add
sbb
gs
cmps
xor
jecxz
jg
test
mov
(bad)
adc
and
sbb
jne
ins
mov
mov
popf
dec
mov
cmovb
stos
dec
rcl
or
xchg
das
sbb
hlt
xor
bound
sub
ds
mov
push
ror
sub
sub
lea
cdq
or
outs
pop
out
es
inc
jl
retf
xchg
call
aaa
xchg
mov
sbb
cmc
in
inc
dec
int3
test
xchg
cwde
div
ins
pop
push
xchg
test
mov
dec
jmp
jae
imul
loopne
xchg
cld
cdq
icebp
and
fistp
fwait
int3
mov
adc
inc
mov
inc
aad
push
lods
push
pop
mov
outs
jmp
pop
adc
jg
sbb
push
xchg
call
mov
(bad)
adc
jbe
xchg
mov
or
cmp
(bad)
stos
xchg
and
sbb
in
lahf
leave
adc
pop
or
and
inc
mov
out
sub
xchg
xchg
pop
(bad)
outs
sar
dec
push
xchg
(bad)
mov
push
jbe
add
xchg
adc
aaa
jb
in
adc
mov
xchg
loopne
mov
je
cmp
or
addr16
cwde
lods
aam
mov
jp
js
stc
add
sub
mov
cmps
mov
cwde
push
div
popa
xchg
or
and
int3
sti
push
sub
les
mov
hlt
shr
cld
xchg
mov
call
not
ins
in
test
push
xchg
xchg
retf
pop
xchg
push
fstp
xor
stc
pop
xchg
mov
inc
ret
and
cdq
or
push
xchg
shr
xchg
jle
movs
fwait
sbb
push
xor
push
cwde
aaa
rcl
lods
push
xchg
jns
push
es
mov
sbb
mov
dec
retf
adc
test
add
sar
push
xchg
pop
push
popa
mov
ret
stc
sub
inc
icebp
xchg
das
xchg
sbb
jno
and
out
stos
or
or
test
fcom
in
xchg
push
push
outs
mov
adc
inc
push
sar
fwait
repnz
das
addr16
je
les
gs
sub
jmp
adc
mov
lahf
sahf
xchg
jl
adc
add
or
dec
cmps
or
cmps
mov
xchg
dec
push
push
pop
shl
cmc
mov
jg
push
int3
outs
jmp
mov
movs
outs
ins
jmp
xchg
mov
scas
fst
xchg
mov
jne
xchg
ins
imul
call
scas
jg
adc
sbb
xchg
adc
xor
dec
setns
xchg
sbb
xor
adc
fstp
add
mov
fsub
aam
inc
imul
push
sub
bound
cmc
pop
push
fwait
sbb
ins
in
popa
pop
pop
xchg
out
mov
fadd
(bad)
xchg
jno
mov
jge
mov
add
fwait
adc
dec
cmps
jb
xchg
dec
mov
push
or
push
ret
xor
(bad)
mov
ins
aad
in
xchg
cli
cdq
out
pop
or
adc
dec
rcr
mov
sbb
xchg
xchg
dec
push
nop
lds
nop
loop
fwait
pop
dec
or
cmp
mov
xor
les
imul
lods
fstp
js
adc
and
adc
cmps
(bad)
aaa
aam
push
stos
xchg
inc
clc
or
sbb
ja
fwait
jle
imul
out
repnz
lahf
xchg
cli
push
repz
add
or
mov
inc
pop
mov
iret
xor
mov
inc
shl
or
ja
adc
js
add
pop
popa
pop
cli
jl
sbb
xchg
jl
sub
movs
xchg
jp
xchg
shl
lods
xchg
nop
loop
mov
xchg
icebp
inc
shl
pop
aam
daa
cwde
xchg
xchg
and
call
test
shl
xchg
mov
cmovp
cld
aas
cdq
dec
push
xor
push
mov
push
jo
cmp
ret
ja
js
add
outs
ss
jle
pop
test
hlt
xchg
ja
sti
loope
cmp
pop
outs
rol
sbb
xor
mov
clc
lock
stos
adc
xor
push
ror
sbb
adc
and
xchg
lods
loope
ja
adc
cs
add
adc
iret
xchg
fisub
stos
je
sub
pop
dec
hlt
mov
sub
stos
xchg
push
addr16
xchg
pop
mov
dec
push
mov
call
inc
mov
fstp
ss
sub
push
adc
dec
mov
ret
je
push
(bad)
inc
scas
xchg
adc
mov
xor
sbb
mov
and
xchg
or
outs
les
mov
xchg
xor
in
inc
sbb
ins
ins
sub
inc
or
jns
test
xor
adc
ss
fdivrp
sub
int
out
xchg
add
mov
xchg
adc
js
xchg
dec
mov
in
xchg
mov
cmps
push
es
mov
movs
sub
fistp
aaa
scas
add
jecxz
adc
ret
sti
xchg
call
arpl
fisub
cmp
and
xchg
dec
pop
inc
inc
sahf
pop
mov
(bad)
sti
pop
push
xchg
out
adc
mov
lahf
sbb
xchg
repz
jg
dec
xchg
or
in
jb
lods
test
aas
lahf
mov
adc
adc
pop
out
xchg
retf
mov
fsubr
cs
into
mov
call
int3
xchg
(bad)
push
cmps
jmp
xchg
(bad)
clc
push
xor
fnsave
dec
popf
loopne
dec
jns
loope
sbb
lea
xor
mov
mov
pop
or
jne
adc
xchg
jp
sub
call
push
xchg
xchg
and
fsub
loop
fwait
inc
je
(bad)
lahf
aam
mov
cmc
lods
xchg
pop
xchg
stc
shl
les
mov
xchg
sahf
lods
lock
sbb
cmp
xor
scas
push
sub
stc
adc
mov
mov
cmp
mov
(bad)
out
cmp
mov
xor
xor
xchg
adc
idiv
retf
aad
sbb
pushf
mov
scas
mov
inc
jmp
inc
dec
xchg
stos
pop
xchg
and
mov
cmp
aam
das
jmp
push
ret
ss
in
addr16
inc
mov
mov
inc
movs
retf
lds
xchg
mov
mov
inc
push
int3
cmp
add
dec
mov
add
cs
dec
imul
sbb
fiadd
shr
jmp
(bad)
jmp
fs
adc
arpl
mov
call
sub
mov
xchg
out
dec
retf
neg
cwde
or
adc
xchg
xchg
sti
iret
push
lock
ins
cmp
jno
jns
xchg
mov
mov
fs
jmp
bound
dec
push
jl
in
push
(bad)
test
mov
jg
adc
cmp
or
call
fwait
mov
xlat
and
inc
mov
out
cmp
pop
mov
xchg
stos
or
adc
enter
cmp
ja
arpl
es
sahf
ror
pop
dec
loopne
out
mov
in
mov
lods
bound
adc
test
icebp
xchg
add
and
outs
push
(bad)
push
jge
mov
loope
xchg
repnz
xchg
imul
push
arpl
jae
push
push
call
fsubr
jne
dec
fwait
add
jl
nop
sbb
or
and
out
mov
dec
ficom
mov
add
repnz
jle
inc
rcr
out
jl
xlat
call
pushf
pop
sbb
jmp
cli
mov
xchg
and
xor
xchg
or
cmps
rol
data16
out
sub
adc
jbe
hlt
xchg
aaa
es
or
mov
fcom
sbb
pusha
(bad)
sbb
repz
test
xchg
mov
mov
mov
xchg
push
fiadd
dec
and
mov
jb
adc
lea
iret
ficom
fcomp
cmp
adc
aam
ret
outs
xchg
aaa
mov
add
rol
bound
dec
gs
in
jle
mov
lahf
xchg
test
retf
out
xchg
cld
cwde
xor
cdq
sub
xchg
fidiv
dec
inc
push
mov
mov
cmc
js
int
shl
cmp
and
mov
je
popf
call
fbld
xchg
ja
test
div
jle
xchg
mov
cdq
dec
aas
jnp
or
xchg
mov
push
fcmovne
jo
pop
xor
jae
xchg
push
jmp
loopne
ss
push
int
inc
mov
out
xchg
sub
aaa
jl
aas
mov
adc
dec
aad
xor
loop
xor
inc
(bad)
das
xchg
test
mov
aaa
xchg
adc
and
ins
mov
into
xchg
rcr
push
aad
push
bound
(bad)
cmp
jae
inc
or
mov
sahf
mov
add
daa
not
out
and
packsswb
mov
sbb
cmps
push
mov
xor
push
xchg
mov
lock
xchg
stos
inc
sbb
mov
jnp
xchg
fist
test
pop
push
repnz
adc
xchg
stos
ret
or
dec
inc
xchg
jnp
xor
mov
(bad)
ins
xchg
call
xchg
jg
adc
xchg
sbb
fadd
cmp
inc
inc
jecxz
retf
inc
clc
into
out
mov
xchg
inc
add
aad
hlt
std
or
sar
xchg
dec
inc
sbb
xchg
pop
sti
inc
xchg
fidivr
int3
push
cwde
xlat
sub
sbb
mov
xor
ficomp
xchg
add
mov
fidiv
ds
es
test
or
enter
mov
inc
xchg
(bad)
in
inc
jmp
pop
adc
lea
pop
dec
aam
inc
pop
fwait
adc
test
js
out
pop
and
push
push
cmps
and
lods
fwait
inc
lock
pop
pop
xchg
cs
nop
jmp
jno
mov
add
xchg
mov
retf
xor
xchg
call
xchg
xchg
adc
xor
sub
cmp
popa
mov
jbe
xchg
adc
mov
fimul
mov
xchg
push
lods
jmp
xor
push
inc
mov
add
movs
xchg
xor
jl
jmp
adc
out
scas
xchg
not
pop
push
adc
(bad)
mov
imul
or
inc
pop
sub
lock
in
lods
xchg
(bad)
xor
pop
jnp
hlt
mov
das
xchg
fcmovnbe
xor
sti
shr
mov
std
(bad)
cli
cmps
int
cwde
adc
and
ror
xchg
xor
xchg
xlat
test
jbe
xchg
add
sbb
push
retf
cmp
rcl
xchg
add
push
and
push
scas
xchg
or
sub
mov
enter
add
rcr
dec
(bad)
aad
repz
xchg
arpl
or
dec
repnz
xchg
std
sti
jne
cli
ret
(bad)
xchg
lock
out
add
jbe
ins
or
cmc
jecxz
push
sub
push
fst
ja
jae
fistp
loop
jbe
std
cmp
xor
test
int
and
outs
mov
loop
xchg
mov
div
xchg
rol
das
mov
aad
lods
fwait
mov
movs
mov
ret
mov
pop
lahf
arpl
xchg
fist
inc
sbb
cmp
pop
cmp
hlt
fwait
xchg
enter
fsub
ret
xchg
das
add
call
ds
lods
mov
mov
(bad)
(bad)
fmul
xchg
pop
inc
pop
mov
mov
imul
mov
inc
jg
inc
adc
outs
ins
xchg
add
(bad)
or
cmp
xor
in
aaa
(bad)
cmps
sbb
push
or
icebp
or
ja
jg
pop
jns
sub
in
(bad)
lahf
xchg
std
jl
xchg
sti
mov
xor
or
xchg
xchg
xchg
ret
mov
jo
or
fs
cwde
adc
ja
add
or
dec
jecxz
int3
fist
dec
push
mov
in
mov
adc
loopne
popf
xchg
fld
dec
scas
call
adc
pushf
bound
push
hlt
in
or
pusha
inc
repnz
ret
into
in
add
enter
pop
or
xchg
retf
xchg
push
xchg
scas
js
arpl
fist
xchg
jge
popa
mov
pop
jne
fwait
xor
xor
pop
xchg
pop
sbb
cmps
xor
jl
xchg
pop
xchg
and
or
pop
xchg
cld
adc
push
sti
xlat
(bad)
shr
out
xchg
scas
stc
js
test
int3
mov
movs
xchg
mov
(bad)
(bad)
and
shl
jle
and
dec
jae
fisttp
shl
adc
je
xchg
push
xor
xchg
or
arpl
in
push
or
xchg
out
mov
xchg
jecxz
dec
push
jnp
cmp
xchg
pop
popa
jno
or
mov
xchg
adc
mov
or
int
add
xchg
jno
iret
das
xlat
test
(bad)
rcl
jp
fst
ret
jo
int3
int3
sbb
pop
out
mov
sbb
nop
cmp
dec
mov
stc
lahf
sbb
cmps
xchg
test
mov
iret
add
jge
xchg
xchg
(bad)
ins
test
retf
fwait
ret
jbe
pusha
bound
push
add
sub
cwde
xchg
mov
scas
xor
inc
dec
imul
popf
sub
cmp
and
mov
inc
pop
push
popa
addr16
sbb
or
mov
xchg
xchg
sets
adc
pop
jl
xor
push
inc
std
je
cdq
adc
sahf
lods
pop
xchg
or
sbb
xchg
call
pop
add
mov
or
stos
add
es
mov
scas
sahf
dec
and
outs
push
inc
xchg
test
rcl
stos
xchg
(bad)
js
push
sbb
sbb
int3
jne
call
sahf
cmc
sti
cli
mov
xchg
xchg
push
xor
es
adc
mov
pop
outs
cmc
rcl
or
add
repz
or
cmps
mov
loopne
iret
add
xchg
stos
jmp
xor
or
ret
sar
fst
and
jl
pop
loopne
dec
addr16
jbe
pop
cmc
movs
mov
xor
aas
adc
or
dec
and
push
mov
add
dec
mov
xchg
out
ror
sti
mov
popa
(bad)
push
sub
xchg
sub
mov
sub
shl
mov
mov
pop
adc
je
mov
enter
repz
lods
pop
jne
pushf
xchg
add
fisub
(bad)
jge
cmc
call
mov
adc
cmps
mov
cwde
dec
cmps
adc
xchg
sub
in
mov
sub
nop
in
xchg
imul
mov
ja
stos
arpl
cmps
xchg
pop
gs
jl
push
mov
js
dec
(bad)
aam
jmp
xchg
mov
xor
xchg
or
call
cmp
xchg
(bad)
mov
xchg
and
je
push
xchg
pop
pop
xchg
jae
mov
mov
mov
iret
inc
dec
rcl
xor
jmp
(bad)
jmp
rcl
xchg
adc
cmp
sub
xchg
sbb
enter
cmps
jnp
jg
ret
pop
xor
cmp
pop
and
je
hlt
test
and
adc
adc
push
xchg
xor
popa
xchg
lods
push
mov
sub
pop
dec
jp
inc
xchg
lods
mov
out
pop
push
and
sub
dec
stos
outs
and
adc
test
cmp
jns
mov
dec
(bad)
sub
aam
xor
jnp
(bad)
icebp
adc
jl
std
fwait
and
dec
push
xchg
mov
nop
xchg
cdq
jmp
adc
sbb
jl
push
cld
cmp
pop
test
ins
adc
mov
loopne
adc
xor
sub
dec
xchg
in
jne
popf
xchg
gs
xor
mov
mov
scas
mov
cdq
xchg
ficom
icebp
fcom
jle
fst
and
xchg
adc
ret
xchg
aas
xchg
xor
fwait
and
repz
arpl
lods
push
push
adc
cmp
inc
pop
cld
dec
xor
mov
sbb
ins
jno
into
dec
push
shr
adc
cwde
(bad)
cmp
cmp
frstor
sbb
lahf
loop
fimul
xchg
jb
aam
les
mov
pop
loop
xchg
mov
xchg
pop
or
cld
int
popa
movs
pop
hlt
cmps
xor
iret
adc
ficom
retf
xchg
mov
adc
(bad)
lock
aam
xchg
fimul
and
ja
push
mov
adc
push
and
js
rcl
aaa
jnp
mov
mov
mov
mov
adc
and
xchg
pop
jmp
or
mov
movs
in
and
xchg
clc
into
jnp
xchg
inc
sbb
enter
mov
xchg
mov
mov
jecxz
xor
inc
(bad)
jl
add
mov
xchg
not
pop
xchg
xor
jmp
push
ss
sti
dec
and
xchg
fdivp
fldpi
pop
xchg
dec
movs
fwait
dec
(bad)
int
cs
sub
and
xchg
retf
mov
cmp
xchg
dec
adc
xor
mov
jl
popf
mov
sbb
mov
mov
pop
pop
jle
loope
or
push
idiv
mov
push
into
iret
aaa
adc
cdq
jo
test
sub
jmp
push
sbb
xchg
xchg
fimul
dec
test
(bad)
xor
mov
and
xchg
daa
lods
enter
in
pop
cmps
rcl
jp
push
xchg
pop
inc
imul
xchg
push
fcmovnb
fstp
test
push
mov
mov
(bad)
push
push
(bad)
push
cmps
sbb
sub
cld
add
cmp
aad
cmc
rcl
loopne
imul
aad
outs
jmp
aam
ins
ss
xchg
adc
enter
add
mov
mov
fwait
pushf
jbe
es
cmp
add
inc
dec
xor
movs
ja
sub
inc
mov
xchg
rcl
mov
into
enter
fnsave
xchg
test
xchg
jecxz
and
push
pop
rcr
xor
into
sub
dec
mov
pop
mov
mov
rol
pushf
out
mov
push
adc
mov
aad
adc
out
push
cmp
shr
cmps
mov
sbb
inc
jno
ins
xchg
sbb
jle
xor
(bad)
idiv
push
in
xchg
mov
mov
scas
xor
push
dec
and
xchg
add
dec
std
dec
mov
push
pop
cmps
out
add
mov
xor
or
and
pop
xchg
pop
push
push
xor
test
xchg
xlat
lods
ret
inc
xor
out
in
pop
enter
retf
aam
xchg
and
call
fist
add
rcr
xchg
sbb
xchg
xchg
loopne
fs
repz
adc
jmp
push
adc
ret
mov
fstp
xchg
pop
(bad)
jns
or
out
xchg
lds
sahf
mov
sti
mov
dec
jmp
aam
mov
test
mov
and
ret
jb
dec
xchg
xor
pop
test
pop
xchg
out
add
out
cmp
fwait
mov
mov
xor
jnp
push
pop
addr16
mov
cmc
(bad)
xchg
push
adc
add
retf
mov
cwde
sbb
out
push
ret
push
xchg
ins
repnz
fwait
add
jb
jne
pop
cmp
push
cdq
xchg
add
push
pop
xchg
(bad)
rol
and
je
sbb
cdq
jp
fild
pop
or
jle
stos
mov
push
or
mov
pop
inc
mov
xchg
lds
test
in
mov
xor
xor
xchg
xor
rcl
test
out
sbb
rcl
test
mov
(bad)
not
das
test
mov
xchg
movs
dec
imul
and
pop
and
mov
mov
dec
div
xchg
lods
xlat
(bad)
xor
repnz
call
out
adc
dec
cmp
sub
call
call
pop
mov
inc
in
pop
sub
adc
mov
xchg
jmp
je
loop
pop
jp
add
test
es
pop
movs
lds
mov
sub
or
fcom
cmp
jae
inc
xchg
adc
leave
jle
xchg
into
sub
push
dec
adc
icebp
jnp
jo
loope
push
ret
sete
and
in
adc
inc
xor
pop
add
cld
xchg
loope
mov
addr16
jle
mov
stos
jge
xchg
scas
in
jno
sbb
aaa
ja
push
(bad)
je
dec
fst
xchg
inc
(bad)
test
call
loopne
or
dec
shl
int
cmp
xor
xchg
cmp
mov
xchg
push
ret
lods
xchg
out
dec
or
sub
adc
outs
or
and
sub
pusha
and
sub
lea
in
jne
xchg
xor
sub
mov
pop
rcl
fcmovb
inc
xchg
in
outs
std
and
ret
aaa
inc
jle
xchg
stos
js
test
push
movs
xchg
jo
test
pop
xchg
outs
pop
jg
(bad)
and
test
cmp
inc
lds
cmp
mov
mov
les
mov
popf
jmp
mov
jmp
mov
adc
jmp
fsub
dec
cli
add
popa
stos
push
mov
adc
inc
jecxz
arpl
leave
cmp
imul
daa
frstor
call
add
hlt
out
sub
add
inc
pop
arpl
call
daa
aam
std
adc
rcr
xchg
cmp
test
ret
cmps
adc
add
xchg
mov
sbb
adc
xchg
fdivr
xor
pop
cmp
cmp
pop
dec
lea
icebp
jns
mov
jl
mov
ss
xchg
stc
mov
xchg
or
sbb
xchg
mov
mov
sub
xchg
sbb
xor
test
in
xchg
xchg
fmul
bound
fucomi
xchg
outs
sub
jae
in
loope
xchg
xchg
or
cmp
fld
out
mov
icebp
mov
mov
sbb
adc
inc
cmps
sti
xchg
mov
outs
(bad)
fsubp
call
mov
xchg
lea
pop
mov
leave
lahf
mov
or
sub
mov
fisttp
xor
(bad)
repnz
shr
cmp
xor
mov
add
pop
inc
push
cmp
cmp
push
jg
mov
ror
lahf
arpl
or
shl
xchg
ss
xchg
in
lods
fwait
mov
in
push
add
(bad)
adc
adc
or
sbb
ss
inc
aam
pop
adc
pop
addr16
jne
cmp
push
ja
test
fbstp
mov
shl
les
inc
mov
repnz
push
xchg
xor
scas
out
rcr
push
adc
sbb
cmps
or
xchg
adc
out
(bad)
and
pop
xchg
jbe
push
int
jle
dec
xchg
fisttp
fdivr
pop
sbb
xchg
(bad)
mov
xor
fistp
inc
(bad)
mov
shl
pop
mov
xchg
test
int3
and
bound
xchg
jb
retf
call
jle
outs
mov
in
mov
fwait
dec
mov
sbb
(bad)
jnp
jbe
cli
cdq
jl
and
ror
dec
xchg
aaa
jne
mov
xchg
outs
adc
enter
adc
mov
xchg
inc
xchg
sar
lock
xchg
imul
sbb
or
into
inc
out
mov
xchg
pushf
inc
inc
jge
ret
call
ss
dec
cld
xor
jb
add
mov
scas
aaa
xchg
ins
xchg
shl
adc
ss
mov
xchg
push
mov
dec
adc
call
fsub
call
je
sbb
jae
xchg
mov
xchg
test
pop
adc
dec
and
xchg
adc
dec
pop
jg
mov
icebp
aad
dec
xchg
scas
xchg
mov
loopne
xchg
mov
xor
jne
pop
fcom
pusha
inc
ret
ja
xchg
xlat
pop
inc
pop
fcomp
add
xchg
stc
les
jno
test
int3
pop
mov
out
fwait
setno
into
push
adc
inc
push
xchg
add
pusha
repz
or
sbb
(bad)
jmp
enter
push
pusha
jp
jne
add
in
in
xchg
mov
in
pop
sbb
adc
push
fs
xchg
mov
push
pop
lea
jge
sub
cmps
push
jle
sub
test
jp
cmp
imul
mov
push
cmps
push
(bad)
movs
hlt
inc
sbb
jl
pop
mov
call
ja
sar
adc
push
pusha
cmps
fist
adc
jl
xchg
pop
jmp
xchg
xor
aaa
xchg
imul
adc
lods
pop
adc
sub
jg
pop
mov
sub
cmp
jns
mov
add
shr
pop
xchg
aad
inc
loopne
aas
inc
inc
xchg
iret
in
cmc
shr
inc
mov
adc
push
(bad)
nop
imul
xchg
inc
fdivr
enter
mov
add
push
bound
sar
mov
ret
xchg
add
fdiv
lock
xchg
movs
aas
mov
xor
xchg
clc
je
jnp
mov
sub
mov
xchg
cmps
inc
or
mov
or
dec
sbb
mov
cmp
dec
mov
out
xchg
jbe
jmp
pop
jmp
xchg
imul
in
stos
mov
ret
ins
mov
pushf
xchg
jecxz
and
pop
pop
xchg
stc
adc
ja
pop
sub
cmp
hlt
sub
loop
xchg
outs
xchg
js
inc
add
push
xchg
call
push
sbb
xchg
pop
sub
sti
xchg
fmul
gs
(bad)
xchg
mov
mov
xchg
cld
imul
mov
push
cmc
aad
inc
shr
jp
mov
sub
test
mov
in
aam
aaa
ds
fcomp
ja
sub
mov
xchg
xchg
jg
stos
xchg
lea
mov
out
or
ins
and
(bad)
stc
movs
pop
xchg
cmps
je
add
xchg
popf
add
mov
and
and
inc
jnp
xchg
xchg
sbb
mov
xchg
pop
(bad)
push
cmps
cli
jo
xchg
test
push
call
dec
xchg
jp
xchg
sahf
out
loopne
xchg
push
mov
jg
shl
mov
xor
aam
adc
dec
xlat
outs
mov
jmp
xor
inc
sub
xor
in
xchg
mov
and
data16
push
mov
test
mov
scas
sbb
mov
aas
sbb
or
jne
xchg
dec
add
xchg
pop
cwde
mov
xchg
sbb
xchg
xchg
pop
dec
mov
iret
das
jge
and
repz
and
dec
xchg
pop
inc
fld
xor
push
mov
sahf
adc
iret
jnp
xchg
into
cwde
jl
dec
bound
shl
jb
lahf
in
test
xchg
mov
int3
pop
jns
mov
add
xchg
push
fsub
mov
mov
jecxz
mov
jo
into
xchg
add
xor
jge
xchg
neg
fst
int
dec
cmp
stos
jbe
(bad)
xchg
shl
adc
push
dec
ja
inc
cwde
push
data16
mov
and
fdivr
mov
in
mov
inc
ror
inc
aam
pop
fild
test
add
dec
xchg
mov
jg
bound
sub
push
xchg
es
adc
shl
mov
pop
retf
call
inc
or
movs
ins
(bad)
or
and
xchg
xchg
xchg
jle
jge
lods
popa
fwait
mov
push
add
mov
shl
cmps
adc
cs
stos
movs
in
xchg
xor
cmp
jle
rcl
sub
mov
or
push
aas
xor
(bad)
enter
ins
sbb
aaa
les
adc
xchg
fnsave
cmp
xor
xchg
mov
fcom
fldcw
(bad)
cwde
pop
out
cs
push
popf
xchg
pop
mov
into
sbb
push
pop
adc
xor
xor
stos
lahf
(bad)
rcr
mov
xchg
dec
adc
movs
cmp
iret
idiv
xchg
mov
addr16
cld
add
and
inc
push
ror
xchg
mov
jmp
mov
scas
mov
(bad)
fcmovne
mov
xchg
pop
retf
jnp
icebp
pop
push
push
push
dec
cmp
xchg
daa
mov
mov
out
int3
test
mov
arpl
mov
cli
sbb
ins
jbe
stc
push
out
push
dec
inc
inc
xchg
mov
dec
sub
cli
(bad)
xchg
adc
add
test
addr16
xchg
mov
dec
xchg
adc
lock
mov
stos
rcl
jg
addr16
jae
(bad)
or
out
dec
push
jo
adc
out
sub
mov
adc
cmp
call
in
mov
mov
xchg
pop
fsubr
ror
add
or
in
aam
movs
lock
not
jl
sub
mov
or
out
xchg
jmp
fist
jle
mov
inc
and
retf
adc
push
sbb
cmps
dec
xchg
mov
push
xchg
lock
(bad)
or
retf
dec
mov
sub
mov
retf
aam
pop
in
imul
xchg
aam
mov
popf
call
loop
dec
out
ja
mov
inc
xlat
cmp
jns
adc
test
loopne
push
xchg
stc
xor
or
rcr
jg
adc
(bad)
outs
test
xchg
dec
jae
sub
es
repnz
xchg
dec
adc
or
je
cdq
mov
or
xchg
ret
clc
sub
xchg
outs
in
mov
xchg
xor
add
xor
je
mov
int3
mov
mov
into
aam
ficomp
adc
mov
xchg
add
and
inc
(bad)
inc
jl
xchg
or
xchg
(bad)
jo
adc
cmps
mov
or
adc
mov
ja
test
(bad)
(bad)
ins
nop
sub
fld
cmc
dec
test
les
cmps
movs
sbb
pusha
div
mov
push
dec
xchg
jge
clc
arpl
xchg
jbe
pop
pusha
xor
imul
sahf
shl
shl
imul
jb
mov
hlt
repz
cmp
bound
xchg
jecxz
(bad)
idiv
pop
xchg
mov
pop
outs
retf
xchg
jne
mov
inc
icebp
loope
push
mov
xchg
push
xor
test
or
push
fsubr
lds
cdq
and
xchg
pop
repz
mov
retf
push
aam
or
mov
and
aam
js
pop
add
xchg
push
sub
dec
pop
cld
or
xchg
jg
(bad)
fiadd
inc
sub
icebp
mov
pop
sbb
xchg
jb
xor
sbb
inc
push
cdq
out
xchg
sbb
push
iret
call
add
fstp
dec
xchg
push
push
movs
inc
stos
push
sahf
adc
outs
ficom
shl
adc
or
sbb
xchg
xlat
cmp
inc
in
xchg
shl
std
pop
shl
lock
fcmovnb
jmp
xor
and
adc
push
retf
adc
dec
addr16
dec
xor
data16
mov
in
mov
xchg
fistp
xchg
inc
hlt
mov
xchg
adc
xchg
loop
adc
ror
xchg
das
out
fldcw
es
adc
dec
lahf
or
and
jecxz
ss
sbb
mov
neg
jge
test
ins
inc
jne
push
adc
out
pop
cmps
or
hlt
ds
stos
stos
xor
ins
fwait
aas
pop
xor
jle
cs
cmps
jns
or
out
sti
and
push
sub
cmp
xchg
nop
adc
je
je
rcr
xchg
cmp
call
or
push
mov
inc
into
inc
pop
adc
movs
nop
sbb
sbb
pop
fcom
dec
xchg
call
inc
loopne
sbb
cmp
pushf
loopne
rcl
cmp
xchg
push
test
or
inc
and
or
shl
xchg
sub
fstp
xchg
shr
sub
cmp
aaa
movs
xchg
in
dec
adc
inc
fidivr
dec
fwait
int3
inc
mov
sbb
push
push
paddb
inc
jg
test
xchg
dec
pop
loopne
pop
fwait
adc
jb
mov
fistp
or
or
lahf
test
stc
xor
or
add
pushf
and
or
push
fmul
shr
sub
add
dec
xchg
outs
nop
pop
xor
pop
into
cli
jmp
lock
sub
inc
cmp
lahf
stc
out
dec
push
adc
imul
outs
add
frstor
cmp
mov
cmp
xchg
movs
xchg
les
xchg
shr
leave
xchg
sub
retf
test
mov
xchg
add
lds
fnstsw
push
sub
xchg
call
outs
fwait
sbb
and
mov
adc
(bad)
rcl
dec
repz
clc
dec
das
cmps
and
pop
xlat
mov
or
cmp
jns
rcl
or
je
sar
mov
add
hlt
sbb
cwde
xchg
sub
movs
mov
xchg
xchg
out
add
jnp
repz
dec
stos
xchg
jne
cli
cwde
inc
inc
imul
inc
mov
xchg
mov
sbb
test
mov
aam
and
sub
pop
ret
movs
and
or
xchg
ret
adc
push
test
xor
fs
js
xchg
sub
jo
ja
in
cmp
mov
jnp
shl
jo
adc
nop
pop
aas
fucomp
test
leave
fnclex
mov
aam
adc
sub
pcmpeqb
mov
lahf
jns
aaa
sub
push
lods
popf
xchg
pop
pop
sbb
push
nop
(bad)
xchg
xchg
xchg
das
mov
jg
test
dec
sbb
ins
push
push
xor
pop
arpl
(bad)
pop
in
rol
sub
push
push
pop
add
out
cld
inc
push
cmp
mov
cmps
mov
clc
leave
sete
jmp
dec
cmp
(bad)
std
or
cmp
or
jb
xor
mov
xor
enter
push
int3
xchg
fbstp
xchg
in
inc
xor
or
int3
dec
mov
xrelease
xchg
xchg
and
or
xchg
and
stos
cmp
push
lods
and
std
mov
pusha
mov
sbb
push
push
xchg
scas
fadd
jo
hlt
add
test
js
nop
mov
jne
and
xchg
cdq
fcmovne
inc
pop
inc
pushf
xchg
test
or
mov
mov
adc
jp
loop
xchg
sahf
stos
sbb
outs
aaa
cmp
xchg
add
mov
cmp
xchg
xor
sub
xchg
mov
lods
jo
push
je
cmp
dec
(bad)
add
jg
jecxz
inc
mov
xchg
xchg
pop
rol
fsqrt
(bad)
ins
aam
dec
push
and
(bad)
sub
mov
or
retf
aaa
adc
jb
mov
in
adc
pop
repz
dec
gs
jbe
or
add
enter
cmp
adc
stos
dec
mov
jb
pop
retf
dec
scas
pop
add
and
mov
(bad)
xor
xchg
and
repnz
outs
mov
addr16
pop
jno
fstp
pop
fwait
arpl
clc
aad
adc
mov
jle
jp
adc
inc
xor
popa
inc
sbb
not
jl
mov
mov
xor
jno
xchg
xchg
push
dec
mov
inc
mov
mov
shr
xor
sbb
jl
and
cmp
fsubr
xchg
ror
dec
jne
lahf
xchg
mov
out
jnp
(bad)
push
movs
adc
and
xchg
mov
popf
loop
addr16
in
add
bound
into
xchg
pop
jne
mov
and
push
add
push
mov
clc
aam
mov
aas
xchg
pop
adc
jbe
iret
pop
call
mov
iret
xchg
push
scas
or
mov
xchg
js
leave
mov
pop
fwait
mov
cmp
inc
mov
daa
pop
xchg
inc
add
xor
es
mov
mov
xor
xchg
(bad)
jmp
xchg
jge
and
push
cmp
mov
test
lods
sbb
push
call
fst
pop
jl
push
in
or
das
cmp
sub
sub
lahf
aaa
jae
adc
xchg
arpl
inc
add
out
mov
stc
mov
jecxz
int3
(bad)
ret
std
xor
fistp
xchg
cmps
push
and
mov
push
xor
xchg
mov
mov
ins
fs
cmp
test
jmp
pop
mov
mov
xchg
xor
mov
je
adc
(bad)
inc
sbb
dec
stos
xchg
ds
rol
jl
lock
in
mov
inc
pop
hlt
leave
mov
mov
jns
xchg
test
retf
and
stc
xchg
pop
and
out
ins
test
movs
mov
leave
lahf
inc
or
sub
scas
inc
test
mov
aam
nop
adc
(bad)
cmp
inc
rcr
xchg
push
retf
lea
add
in
inc
mov
xchg
mov
lds
xor
xchg
xor
(bad)
xchg
popf
xchg
cmc
xor
and
xchg
mov
clc
xchg
das
pop
(bad)
daa
inc
xchg
adc
loopne
inc
sbb
mov
repz
xor
add
xchg
retf
push
scas
jne
ins
dec
xchg
sbb
push
lds
in
pop
sbb
push
loopne
les
cmp
loop
adc
or
out
les
xchg
fisttp
xchg
loope
mov
xchg
loopne
or
xchg
mov
xchg
ds
jp
mov
inc
dec
add
xchg
imul
aad
in
push
pop
outs
scas
adc
sar
test
mov
adc
sbb
cmp
hlt
std
adc
xchg
or
jmp
sbb
inc
loop
adc
xchg
mov
push
or
into
inc
mov
jl
jmp
push
mov
push
mov
aam
xchg
pop
mov
ins
push
addr16
pop
xchg
xor
gs
inc
xor
rcr
pop
cmp
call
sub
dec
xchg
xlat
(bad)
jno
ficom
test
aad
add
jl
cmc
pop
jo
in
movs
stos
jmp
fs
ret
in
sbb
clc
bswap
cmps
pushf
int3
ins
icebp
xchg
mov
mov
jmp
xchg
mov
repnz
imul
shr
push
enter
and
cmp
adc
cs
neg
pop
dec
and
xchg
sahf
xchg
addr16
fst
xor
or
mov
push
xchg
xchg
out
movs
dec
aad
stc
xchg
fldcw
aam
lock
ss
mov
aam
xor
test
cwde
mov
adc
sahf
jle
jmp
xor
adc
jp
mov
call
push
adc
out
xchg
test
mov
gs
xlat
and
daa
adc
xchg
ins
jno
xchg
adc
xchg
retf
push
es
cld
sub
push
aas
xchg
stos
inc
mov
mov
jb
xchg
std
push
(bad)
xor
out
jae
add
iret
dec
mov
dec
fdiv
call
xor
dec
push
shl
ret
aas
sub
push
pop
push
pop
cmps
call
xchg
push
lock
mov
sbb
popf
mov
pop
xor
xchg
retf
cmp
mov
mov
push
push
popa
movs
push
xor
or
dec
ret
outs
push
mov
aaa
fwait
xchg
aas
in
lahf
jle
jae
push
loop
xor
sbb
push
mov
and
inc
dec
mov
cs
aad
aaa
xchg
and
and
fwait
je
xchg
dec
cwde
test
lods
mov
outs
cmp
push
xor
sbb
xchg
mov
and
stc
loope
or
hlt
stos
fwait
mov
rcl
jnp
or
mov
mov
pop
inc
jo
lods
push
xor
enter
das
or
xchg
daa
aad
mov
mov
cwde
mov
fs
fsubr
adc
adc
test
iret
add
cs
(bad)
mov
mov
adc
out
iret
and
xor
xchg
xchg
dec
adc
xor
pop
mov
xchg
not
jns
push
mov
xchg
(bad)
push
dec
xchg
cmp
mov
es
mov
mov
fs
jbe
sbb
aaa
jo
cwde
popa
outs
je
cmc
push
jl
shr
clc
xlat
cld
das
fsubr
jp
imul
xchg
push
leave
mov
out
jl
add
sub
add
loop
mov
and
mov
daa
mov
fdivr
xlat
sub
add
mov
fdivr
pusha
idiv
nop
shl
mov
cmc
push
cmp
fwait
and
jne
and
xchg
sbb
push
xchg
mov
jl
push
js
or
int
lahf
xchg
jne
leave
das
dec
xchg
repnz
pop
lock
dec
(bad)
lea
push
xchg
out
sbb
jbe
cld
xchg
stos
test
pop
mov
xor
mov
outs
call
loopne
cmp
xchg
imul
mov
rol
jg
or
scas
jo
aas
cmps
ret
cmp
xchg
xor
mov
imul
mov
push
lock
ficom
dec
xor
push
lds
xor
push
pop
pop
ret
pop
xor
and
ins
addr16
xchg
adc
push
int3
popf
add
cmp
ret
xchg
pusha
aas
bound
pusha
mov
sbb
xchg
cmc
rcl
xchg
rcl
jbe
not
pusha
inc
repnz
mov
int
imul
(bad)
iret
push
iret
xchg
sub
popa
push
xlat
je
icebp
cmp
jl
int3
outs
mov
inc
sar
fcomp
mov
mov
mov
mov
out
push
dec
aad
mov
in
pop
xchg
mov
xchg
mov
retf
lea
movs
or
lods
cmp
push
(bad)
sbb
mov
push
fcom
jb
not
adc
jns
xchg
sbb
or
cmp
xchg
cmp
jmp
or
mov
mov
xor
cmp
pushf
inc
ja
lds
pop
pop
xchg
add
adc
xchg
or
or
rcl
es
xchg
xchg
dec
push
mov
fwait
jl
adc
jo
xchg
mov
push
pushf
nop
pop
test
rol
test
push
jbe
and
or
icebp
jge
mov
adc
mov
retf
xchg
xchg
xchg
sbb
(bad)
in
ins
mov
jl
or
jl
jb
pop
repz
test
int
retf
ins
rcl
adc
sysexit
jns
popf
jnp
inc
mov
inc
sub
jbe
and
ds
mov
inc
fs
xchg
icebp
in
xor
add
sub
test
cli
inc
dec
hlt
dec
aas
sahf
pop
mov
inc
xor
and
xchg
enter
jge
adc
xchg
pop
jno
cmp
jmp
xor
xor
inc
jl
jns
clc
aaa
sbb
call
push
ror
(bad)
xchg
pop
sbb
shl
imul
add
inc
mov
ror
xchg
call
inc
xchg
je
in
imul
adc
dec
repz
mov
sahf
ror
ret
pop
xchg
cmps
addr16
add
sub
cmp
push
xor
adc
cmp
xchg
in
data16
sbb
js
mov
xchg
mov
adc
jo
in
sub
jmp
and
xor
sti
out
push
iret
xchg
sbb
push
(bad)
pop
cwde
lds
push
xchg
fdivr
in
js
stos
in
push
push
mov
xchg
jb
jae
or
push
xchg
cmp
and
outs
xchg
test
cmp
xor
inc
xchg
mov
jmp
(bad)
mov
hlt
mov
push
mov
or
shr
xchg
cmp
iret
loope
mov
in
fwait
xchg
and
lahf
fidiv
xchg
(bad)
mul
int3
xchg
lods
mov
es
xchg
and
retf
push
add
xchg
push
push
adc
xlat
xchg
mov
ss
mov
gs
mov
or
adc
repz
ja
or
jbe
inc
popa
stos
(bad)
xchg
sub
ror
xchg
jbe
push
popa
xchg
mov
mov
dec
retf
outs
daa
into
push
ja
shl
sbb
jne
test
xchg
cmc
(bad)
push
rol
xchg
pop
adc
mov
into
push
cmp
xchg
mov
sahf
outs
xchg
addr16
xlat
loope
repz
mov
ret
jbe
and
cmp
xchg
or
aad
not
(bad)
aaa
shl
jae
mov
add
push
sbb
dec
pop
mov
jb
fsub
imul
jecxz
leave
dec
sbb
xlat
out
sbb
call
xchg
sbb
cs
adc
mov
xchg
outs
pop
dec
or
and
sub
iret
data16
stc
and
mov
mov
pop
mov
mov
dec
int3
data16
xchg
mov
mov
imul
xchg
or
pop
push
adc
in
adc
jp
cmp
mov
mov
test
movs
cmps
inc
cld
xchg
lea
ins
icebp
or
adc
mov
mov
xor
xchg
shr
rol
mov
mov
repz
fs
out
xchg
stos
stos
test
les
mov
rcl
jmp
or
sbb
popf
adc
mov
xchg
out
inc
sete
test
nop
cmp
or
dec
and
icebp
sub
xlat
xchg
mov
sub
aam
or
aad
xchg
icebp
and
(bad)
fcom
pop
in
push
inc
mov
adc
adc
xchg
movs
mov
dec
xchg
mov
clc
loopne
xor
aam
mov
adc
outs
fcomp
xchg
lods
push
push
sub
cdq
in
and
call
mov
jg
call
lock
int
adc
push
out
div
jb
ins
enter
inc
xchg
ret
jmp
cs
idiv
push
cmp
mov
rcl
xchg
cmps
push
or
movs
dec
out
or
inc
xchg
lods
ror
(bad)
les
out
cwde
pushf
into
fadd
loope
hlt
or
sub
test
mov
xchg
add
pusha
(bad)
fidiv
and
aaa
popa
in
cmp
mov
lods
xchg
add
mov
fisub
gs
call
es
mov
ja
sbb
test
lock
xchg
add
and
test
push
jp
ror
in
inc
hlt
add
(bad)
fstp
pop
xchg
jecxz
lods
mov
jns
dec
sbb
xchg
mov
jle
mov
mov
mov
push
sbb
xchg
fist
adc
xchg
pop
xlat
bound
add
imul
xchg
and
mov
push
movs
jl
push
lods
jo
test
push
mov
sub
adc
xchg
push
jae
push
dec
push
xchg
fist
cdq
ins
xchg
xor
xor
ficom
fwait
out
sahf
xchg
pop
adc
(bad)
icebp
lds
sbb
dec
xchg
push
test
add
hlt
jg
inc
cmp
add
stc
xchg
mov
mov
push
inc
ins
out
jge
test
rol
loope
fs
or
mov
mov
jae
dec
lds
mov
icebp
lods
sbb
mov
xchg
addr16
dec
or
retf
push
xor
adc
jmp
hlt
nop
mov
gs
push
xchg
leave
xchg
and
test
xchg
adc
jb
inc
cs
bound
push
jg
sar
(bad)
xchg
vmovntpd
retf
push
jmp
sbb
(bad)
and
inc
sbb
nop
pop
push
test
in
adc
mov
jmp
scas
adc
cmp
scas
lock
add
push
test
cwde
cs
ror
ret
dec
push
mov
inc
and
mov
mov
out
mov
jle
mov
bound
sti
inc
pop
test
ja
(bad)
aad
in
outs
and
nop
adc
jp
xchg
movs
push
and
call
xchg
repnz
jo
aas
loope
gs
out
mov
or
mov
and
and
sub
inc
mov
in
or
scas
mov
xchg
mov
inc
mov
iret
(bad)
jne
sbb
xchg
movs
add
xor
xchg
stc
xchg
push
(bad)
arpl
lods
push
xor
ins
sbb
xchg
pop
adc
lods
or
push
jg
out
dec
xchg
fwait
cmp
fstp
push
fst
rol
mov
test
dec
jecxz
out
mov
mov
loop
bound
mov
aam
rcl
inc
aaa
bound
mov
and
(bad)
push
pushf
mov
xchg
cmp
mov
sbb
mov
xor
jge
mov
push
cwde
leave
int3
or
mov
add
cld
into
mov
div
jg
inc
mov
fwait
inc
frstor
mov
xchg
hlt
sub
test
xor
push
rcl
aaa
jg
xchg
jnp
adc
jmp
sub
inc
jne
or
cmp
pop
stos
inc
xchg
repz
push
inc
inc
mov
leave
push
mov
clc
std
xchg
sub
mov
inc
xchg
pop
cmps
dec
or
adc
rcr
mov
in
lods
cmp
push
push
xchg
push
mov
arpl
rcl
int
(bad)
xchg
jo
shl
jno
mov
xchg
xchg
jg
aas
test
adc
loopne
iret
outs
mov
les
not
dec
test
xchg
push
sbb
mov
push
rcl
mov
push
(bad)
jecxz
push
mov
bound
ret
lods
pop
ds
push
aam
out
xor
pop
lock
sbb
fucomi
xchg
or
cmp
fbld
and
jbe
xchg
adc
sbb
and
xchg
mov
add
push
cmp
pop
repz
shl
movs
sbb
je
dec
adc
lea
mov
jae
mov
repz
pop
sbb
pop
jb
fnsave
xor
push
sbb
jmp
inc
cmp
xchg
and
add
test
sub
dec
adc
fimul
rcl
xchg
cmps
cs
cdq
aas
push
adc
icebp
and
xchg
aam
neg
push
push
add
sbb
(bad)
xchg
lahf
and
push
jbe
fnsave
adc
push
fwait
ins
call
sub
jp
xchg
iret
add
popa
in
xchg
rcl
es
stos
and
retf
fimul
xchg
pop
in
dec
and
inc
in
mov
sub
rcr
sub
outs
adc
or
xchg
jge
pop
inc
popf
stos
arpl
jns
aad
xor
inc
ja
shl
or
hlt
je
rcl
cdq
mov
push
ja
mov
fwait
dec
pop
retf
hlt
mov
hlt
mov
int3
cdq
xchg
aam
std
addr16
jl
xchg
mov
jb
int
(bad)
cmps
dec
xlat
xchg
adc
jbe
and
dec
(bad)
lock
mov
add
arpl
cli
jns
and
lods
(bad)
xchg
cs
mov
xlat
xchg
push
xchg
mov
popf
dec
and
ficom
retf
test
sahf
cdq
sti
pop
mov
push
mov
mov
xchg
or
mov
lahf
mov
mov
xchg
je
adc
lds
les
jbe
mov
test
lahf
call
jl
or
xchg
cmps
loope
add
dec
movs
xchg
loopne
les
add
(bad)
fstp
xchg
adc
and
push
(bad)
lahf
cmp
fwait
or
(bad)
icebp
fs
popf
in
adc
xchg
out
cli
jl
sbb
imul
mov
xchg
and
mov
xchg
cld
or
ja
fwait
repnz
sub
in
pop
push
mov
push
xchg
fiadd
icebp
pop
xchg
jmp
jmp
pop
xchg
jb
push
dec
je
or
xchg
cli
retf
fnstcw
cld
pushf
add
jecxz
jp
ss
nop
xchg
bound
mov
not
es
xchg
and
cmp
addr16
mov
ins
mov
mov
xor
cdq
mov
in
int3
mov
push
fcom
sbb
push
jne
ds
and
pop
fwait
imul
repnz
(bad)
(bad)
dec
xchg
ins
xor
ret
or
cmps
retf
pop
mov
add
sub
fnstcw
mov
jmp
loop
adc
adc
cli
pop
sbb
mov
mov
mov
jl
push
push
push
mov
push
ret
cwde
cwde
out
xor
loopne
cmp
mov
xchg
pop
gs
push
imul
mov
movs
pop
xor
std
retf
fwait
dec
call
or
xchg
in
fisttp
std
push
ror
cmps
xchg
ror
pushf
mov
adc
xchg
dec
xor
xchg
imul
sahf
adc
sar
mov
std
ror
je
lds
and
mov
jl
or
sub
stos
adc
mov
or
dec
jmp
xor
sti
adc
hlt
pop
arpl
mov
cmp
and
cmp
imul
scas
ret
rcr
pop
mov
push
or
cmp
jo
cmp
aaa
sub
jb
sub
int3
in
jns
ins
xchg
jae
lock
cmps
rcr
retf
mov
xor
es
xchg
aaa
sti
mov
dec
or
test
popf
xor
sub
lods
pop
cdq
jmp
or
mov
rcl
mov
rol
mov
(bad)
push
cwde
xchg
sbb
loope
sar
jecxz
xchg
outs
unpcklps
jb
imul
fs
pop
(bad)
repz
xchg
push
jnp
lahf
xor
or
mov
popf
push
xchg
in
mov
mov
in
imul
lock
mov
xor
xor
mov
xchg
cmp
mov
rcl
pop
pusha
lds
sahf
push
inc
xchg
ja
lods
les
ins
dec
inc
popf
retf
jg
pop
and
mov
fcomp
push
xchg
dec
fmul
test
in
xchg
jbe
add
dec
cmps
xchg
push
pop
xchg
gs
mov
loop
xchg
mov
or
jbe
fadd
sbb
nop
mov
xchg
add
call
cmp
lds
aam
lahf
mov
out
aam
movs
mov
mov
(bad)
jp
xchg
pop
popa
and
cld
xchg
push
push
adc
xchg
add
(bad)
loop
xchg
mov
movs
dec
ins
(bad)
out
rcl
ret
mov
xchg
fdivr
sbb
and
push
mul
sub
sbb
mov
leave
xchg
jno
loopne
retf
mov
sub
pop
arpl
xchg
ins
pop
dec
out
jmp
xchg
pusha
xchg
pop
or
inc
xor
cmp
add
cmp
out
dec
sub
mul
inc
jns
je
pop
dec
or
dec
nop
rcr
adc
push
cmp
mov
in
pop
sub
adc
stos
sub
mov
add
xchg
ja
push
nop
xchg
and
loope
xchg
xchg
lods
dec
and
pop
push
xchg
push
mov
fwait
into
call
stc
jns
enter
clc
pop
inc
int
jecxz
mov
out
xchg
xchg
and
xchg
adc
aaa
dec
lods
mov
xchg
jge
mov
adc
test
cmp
lea
in
xor
cmp
adc
jg
rcl
mov
cmps
inc
out
jg
ds
adc
xchg
xchg
jmp
(bad)
icebp
mov
mov
sbb
adc
fwait
clc
mov
xchg
inc
sub
fisubr
pop
jno
cmp
mov
fst
inc
xor
and
xchg
dec
lds
cmc
jecxz
xor
shl
mov
sahf
(bad)
int
popf
cmp
enter
fisttp
cmp
cdq
and
call
xchg
dec
push
mov
ret
xchg
adc
aad
mov
lock
push
jmp
fwait
ins
rcl
jge
aam
pop
fcomp
aas
stos
inc
les
mov
cmp
rcl
push
cmc
mov
jnp
or
aad
pop
mov
lods
and
ins
xchg
cld
pop
sub
mov
jl
js
mov
(bad)
jmp
dec
adc
cs
mov
mov
sub
xchg
retf
jmp
sbb
xchg
xor
loope
mov
and
out
repz
inc
out
fld
ins
fwait
jns
adc
jge
xor
add
adc
loop
push
aad
or
aaa
xchg
mov
outs
pop
jae
adc
rcl
jne
xchg
sub
(bad)
mov
inc
adc
test
adc
into
aad
out
inc
call
lods
xchg
ins
push
mov
mov
xchg
movs
inc
pop
push
mov
aaa
fs
test
in
push
cmp
daa
mov
sar
xor
pop
in
je
jo
fcomp
adc
inc
mov
mov
push
xchg
xchg
inc
fnstsw
mov
mov
shl
push
push
mov
pop
inc
sbb
add
fwait
push
fist
sub
xchg
mov
call
popf
xchg
icebp
out
xor
pop
cdq
sub
ins
adc
sbb
iret
std
push
xchg
jno
mov
mov
not
xchg
shr
push
les
cld
psubd
adc
jle
add
repz
fisttp
push
add
pop
les
xchg
sbb
xchg
dec
fcmovnu
fiadd
mov
test
and
sub
xchg
mov
mov
lds
cli
push
shr
cmp
add
lahf
in
mov
hlt
fstp
aas
clc
push
daa
mov
push
xchg
mov
push
mov
int3
cmps
dec
hlt
jo
pop
mov
rcr
(bad)
div
adc
xchg
push
mov
jp
rol
in
add
loopne
or
xchg
xchg
cli
push
jmp
ss
icebp
xchg
fs
mov
into
(bad)
xor
test
and
mov
sub
mov
xchg
inc
mov
adc
mov
cmps
inc
pop
and
test
and
add
hlt
cwde
mov
pop
push
xchg
jecxz
pop
push
xchg
dec
adc
xor
jb
push
sub
adc
loope
xchg
dec
mov
cmp
xchg
dec
je
mov
xchg
out
ins
mov
push
pop
jb
xchg
jae
or
or
xchg
ficom
pop
fxch
jp
jb
sbb
push
xor
xchg
xchg
or
and
(bad)
cmp
xchg
stos
and
mov
movs
xchg
cmp
pop
push
sbb
gs
lahf
sub
loopne
sti
mov
sbb
test
xchg
mov
xchg
adc
lock
jge
xor
mov
retf
or
mov
es
or
mov
sub
ret
cmps
xchg
dec
push
xchg
fwait
jle
or
sub
xchg
je
and
xchg
(bad)
test
jne
xchg
out
int
ror
cmp
dec
(bad)
hlt
shl
push
popa
xchg
jbe
outs
sub
sbb
inc
into
repz
pop
sub
adc
mov
(bad)
push
hlt
jge
cmp
inc
xchg
ins
sub
into
or
scas
inc
in
xchg
nop
xor
mov
adc
sti
or
cmp
push
mov
mov
fild
add
xchg
loopne
aaa
inc
xor
xchg
add
not
out
xor
mov
jmp
fild
sub
inc
dec
(bad)
jae
pop
jge
aas
add
ins
dec
lahf
call
sar
mov
in
push
adc
aam
xchg
push
rcl
fwait
ins
push
popf
addr16
enter
div
jp
add
inc
hlt
cmp
aad
in
xchg
mov
imul
lods
mov
cwde
das
inc
sbb
cmps
loopne
xchg
cdq
fwait
adc
shl
pop
jno
stos
mov
adc
out
sbb
xchg
pop
loope
dec
loop
hlt
mov
dec
mov
adc
cmp
clc
iret
aam
or
test
xchg
icebp
adc
cmp
xchg
jno
ds
dec
(bad)
aas
xchg
ror
icebp
mov
adc
xchg
mov
add
and
call
fdivr
xchg
dec
mov
xchg
stos
xor
xor
mov
adc
adc
pop
mov
cs
xchg
std
in
push
sub
mov
test
xor
xchg
(bad)
stc
xchg
and
cdq
push
xchg
mov
ret
in
mov
mov
retf
xchg
or
jecxz
xchg
sub
aas
mov
ss
loopne
sbb
dec
hlt
rol
(bad)
(bad)
in
repz
jnp
mov
std
pop
mov
dec
xor
jno
test
dec
clc
xchg
test
push
xchg
inc
push
jns
xchg
sub
jbe
mov
xchg
xchg
and
dec
mov
ret
cmp
pop
jmp
mov
dec
fs
mov
push
lahf
out
pop
pop
retf
inc
or
xchg
push
arpl
jl
push
std
xchg
xlat
mul
mov
popa
loope
xchg
stos
or
pop
movs
xchg
shl
sar
lock
(bad)
jp
add
xor
sbb
pop
popf
push
and
test
ficom
pop
scas
push
xchg
imul
inc
jp
add
xchg
and
stos
cmps
shl
pop
sahf
xchg
(bad)
and
xor
mov
out
repz
call
push
fbld
dec
rcr
dec
adc
(bad)
pop
mov
ret
xchg
bound
inc
and
movs
xchg
int
or
push
(bad)
xchg
mov
mov
cmps
xchg
clc
out
jmp
ss
mov
lahf
scas
imul
js
mov
ins
repnz
mov
mov
test
sbb
inc
xchg
pop
or
aam
adc
inc
mov
xor
xchg
ds
int3
adc
push
je
dec
xor
sub
int3
js
(bad)
cmps
adc
sti
inc
mov
and
inc
loope
jae
mov
fistp
test
jnp
xchg
out
adc
jb
arpl
shr
adc
daa
aam
sub
push
shr
test
mov
jge
dec
dec
je
test
and
xchg
add
scas
les
or
repnz
push
clc
fs
daa
mov
push
in
xchg
inc
push
cmps
lock
mov
inc
xchg
pop
push
and
into
inc
push
mov
test
jmp
repnz
sahf
xchg
test
retf
iret
jg
(bad)
es
shr
sub
aad
xchg
or
pop
mul
cli
mov
ret
adc
mov
(bad)
in
mov
mov
jmp
dec
fwait
inc
push
or
push
xor
sti
push
mov
xchg
jp
shl
push
popf
mov
pop
movs
add
xchg
dec
add
xchg
test
btc
jns
xchg
sbb
push
(bad)
pop
test
mov
arpl
mov
xchg
push
daa
cmps
push
mov
xchg
rol
mov
popf
push
jns
(bad)
fidivr
lea
in
mov
jnp
aam
adc
xchg
ficom
pop
mov
jmp
push
shl
mov
out
xchg
pop
retf
push
in
jmp
ficom
imul
sar
rcl
mov
cdq
sbb
adc
jle
cmp
lahf
ins
push
and
xchg
mov
call
ret
movs
repz
stc
inc
aas
mov
push
xchg
leave
daa
mov
rol
hlt
sub
xchg
es
pusha
jl
xchg
adc
bound
cmp
inc
daa
xchg
jns
aas
sbb
push
fist
movs
add
daa
icebp
pop
ss
test
pop
xchg
xchg
lahf
retf
(bad)
fistp
xor
mov
mov
push
mov
clc
ficom
(bad)
pop
mov
xchg
repnz
aaa
mov
loope
and
sbb
loopne
into
xchg
push
adc
in
xchg
xor
pop
mov
ret
push
imul
ret
rcl
enter
jmp
mov
int
rol
jno
sub
je
inc
mov
or
test
out
les
adc
xor
aaa
xlat
retf
xchg
sub
and
mov
and
jecxz
or
xchg
mov
idiv
(bad)
sbb
mov
je
pop
push
xor
les
bound
cmp
push
outs
repnz
ins
xor
rcl
mov
inc
xchg
jmp
dec
xchg
dec
test
shl
add
mov
addr16
cmp
in
adc
mov
xchg
fcmove
mov
es
add
push
xor
or
sub
dec
xchg
jnp
or
xchg
mov
(bad)
ds
xchg
scas
mov
pop
push
xchg
jmp
cmp
xor
xchg
add
arpl
iret
pop
jg
adc
push
push
push
cmp
cmp
xchg
push
outs
aaa
les
adc
lods
push
mov
mov
xchg
nop
dec
in
int
push
xor
jnp
jecxz
dec
push
mov
in
adc
outs
rol
out
mov
(bad)
dec
xor
shr
fsubp
push
mov
(bad)
add
mov
je
mov
mov
lods
stos
xor
les
jbe
xchg
cmps
and
jge
(bad)
pop
xchg
mov
xor
or
cmovae
mov
icebp
test
stos
adc
xchg
stc
pop
mov
mov
sbb
inc
xchg
jge
push
cdq
dec
push
daa
mov
adc
mov
imul
leave
aam
sbb
fwait
push
je
or
sub
mov
sub
stc
xchg
shr
imul
pop
or
iret
inc
xor
ret
mov
inc
xchg
(bad)
ds
(bad)
mov
or
inc
pop
jb
jl
fwait
xchg
inc
in
sub
arpl
pop
mov
retf
add
push
test
xchg
xchg
jmp
clc
push
sbb
jle
je
ss
stc
mov
push
inc
nop
jae
(bad)
xchg
(bad)
pop
shl
cmp
cmp
ret
lea
outs
in
xchg
mov
adc
(bad)
push
mov
sbb
xchg
xor
mov
int3
mov
mov
push
retf
dec
sbb
xchg
out
jbe
or
mov
int
cmp
and
leave
in
adc
add
jecxz
loope
xchg
xor
push
and
mov
push
enter
xchg
shl
test
mov
pop
in
(bad)
xchg
inc
sbb
fwait
add
jae
jo
xchg
jp
add
sub
fist
jne
xchg
cmps
xchg
mov
repz
xchg
push
xchg
and
mov
jb
mov
fnstsw
sbb
(bad)
nop
xor
lods
jae
fist
fdivr
fwait
push
jne
and
test
mov
xor
pop
inc
fmul
xchg
pextrw
or
cmps
mov
out
loopne
jb
inc
mov
mov
aam
aas
mov
xchg
mov
jns
lock
pop
or
xchg
mov
fwait
aad
xchg
jge
xlat
cwde
mov
(bad)
rcl
push
fdiv
mov
mov
inc
jmp
test
mov
cwde
inc
mov
cmp
lds
mov
enter
xor
out
test
xor
dec
scas
(bad)
clc
xchg
add
out
dec
jns
add
test
push
mov
xlat
sti
jmp
sub
test
fwait
cmp
xor
lds
(bad)
push
aam
xchg
hlt
sbb
xchg
ss
jmp
aam
sbb
ins
loopne
daa
jl
push
test
sub
(bad)
int3
push
mov
sub
into
lahf
mov
push
xor
lods
xchg
and
xchg
movs
sbb
mov
aam
mov
pop
daa
or
test
xor
mov
lods
sbb
jl
in
fisub
test
std
pusha
xor
inc
nop
loopne
cli
aaa
scas
out
movs
fmulp
mov
outs
jmp
cmp
sub
fs
mov
add
dec
mov
jae
push
and
push
cmc
adc
ss
xchg
xor
mov
mov
int
repnz
mov
xchg
xchg
ret
repz
adc
rol
mov
sti
push
pop
fwait
adc
ret
mov
imul
add
repz
jae
or
mov
or
shl
fdivr
xchg
pop
jecxz
stc
arpl
mov
xchg
popa
sar
popf
inc
ja
xchg
inc
pop
mov
enter
xchg
mov
out
mov
xchg
add
fidivr
xor
movs
mov
push
adc
mov
dec
inc
cmp
nop
mov
jmp
cmps
dec
jno
xchg
pop
sbb
shl
xchg
push
mov
loope
out
lods
adc
sub
ins
pop
mov
push
cmp
xchg
retf
adc
push
pop
inc
jbe
jle
pop
sub
mov
mov
mov
outs
mov
jmp
aad
cld
sti
dec
jne
jg
rcl
adc
cmc
pop
jg
xchg
inc
pop
not
sbb
fld
stos
lea
pop
idiv
mov
jbe
imul
jmp
pusha
movs
sub
les
add
cmc
mov
pushf
jne
or
mov
cwde
adc
imul
pop
jno
cmp
fld
pop
dec
in
xor
addr16
mov
ins
repz
jp
mov
adc
xchg
scas
test
inc
aas
fnsave
cmp
sub
arpl
xor
sbb
es
ror
jne
leave
cli
xchg
jnp
sub
pop
xchg
jge
or
xchg
jns
jae
xchg
push
inc
dec
sbb
xor
(bad)
or
aad
xchg
mov
outs
adc
mov
mov
pop
mov
jmp
sbb
xchg
stc
int
repnz
cmp
xchg
fadd
(bad)
dec
push
cmc
xchg
test
imul
or
int3
loope
sbb
jl
pop
inc
call
push
or
ins
mov
aam
sub
std
ret
pop
push
jle
les
xchg
mov
retfw
sbb
shl
cmp
xchg
dec
mov
es
mov
xchg
retf
mov
or
push
xchg
adc
push
clc
mov
sbb
xchg
pop
popa
cmp
icebp
xchg
cmps
and
popf
add
xor
call
xchg
push
jecxz
add
bound
iret
into
adc
and
mov
or
popa
jns
lods
repnz
inc
xchg
inc
and
leave
push
sub
shl
mov
fwait
es
sti
aaa
xchg
out
inc
addr16
and
fld
repz
xchg
push
scas
xlat
mov
add
retf
sub
ja
add
stos
push
loope
xchg
jnp
mov
jmp
xchg
clc
and
or
xchg
hlt
pop
ins
mov
mov
retf
adc
fwait
pop
stc
adc
into
fwait
xchg
push
jmp
test
xchg
loopne
fs
pop
jnp
cmp
mov
pop
xchg
mov
pop
xchg
(bad)
xchg
fsub
sub
jo
add
mov
hlt
pop
pop
push
adc
jmp
jae
xchg
int3
mov
(bad)
xchg
cs
push
push
call
push
stos
jge
ret
aam
pop
pop
cmc
int
xor
jb
sbb
test
push
xchg
out
pop
ins
add
aaa
rol
fisttp
nop
cld
xchg
and
push
dec
push
js
xchg
xchg
dec
sbb
and
and
ja
mov
pop
push
mov
push
outs
xchg
or
or
mov
fmul
dec
(bad)
and
mov
scas
lock
rol
xchg
iret
fidiv
stos
and
loopne
fs
sub
imul
hlt
out
mov
pop
fwait
xchg
mov
sti
mov
inc
jbe
xchg
pushf
mov
mov
cwde
adc
loop
fcomp
sub
xchg
or
fs
jns
xchg
imul
dec
jmp
out
and
jno
dec
mov
xchg
mov
adc
mov
pushf
or
push
fistp
cli
ja
mov
stc
es
fbstp
in
sti
ret
fwait
aad
push
je
xchg
mov
inc
gs
jnp
sub
pop
cwde
pop
or
test
dec
xchg
outs
jmp
mov
enter
push
sbb
add
outs
cdq
lds
int3
sub
xchg
(bad)
mov
jl
xchg
pop
test
xor
stos
push
mov
push
out
xchg
repz
push
clc
or
xlat
xchg
call
retf
sbb
pop
push
dec
data16
push
or
es
or
xor
xchg
mov
sub
(bad)
sbb
outs
xlat
fsubp
imul
inc
jl
int
xchg
or
fucom
cmp
sbb
dec
in
loop
les
inc
aam
xchg
inc
pop
dec
xchg
jecxz
jns
cmps
mov
jne
inc
xchg
(bad)
xor
push
or
xchg
mov
iret
inc
mov
loop
aam
jge
sub
mov
sbb
and
int
dec
test
xchg
xor
push
adc
sahf
jne
push
cmp
inc
popf
push
and
xchg
cmp
xchg
stos
lods
dec
jae
push
test
cmp
xlat
mov
repz
mov
inc
cmp
pushf
xchg
mov
pop
mov
xchg
stc
(bad)
(bad)
dec
adc
dec
jae
sub
inc
mov
fs
out
out
sbb
xchg
push
sbb
popf
push
mov
xchg
jle
(bad)
xor
xlat
or
mov
and
fnstsw
aaa
lds
pop
dec
xchg
cli
call
sbb
or
inc
jb
in
fs
ret
dec
xchg
fstp
xchg
xor
icebp
stos
and
xchg
and
sub
arpl
mov
in
or
fwait
push
adc
cmp
jb
arpl
mov
cmp
gs
fcom
xchg
sar
mov
sahf
xchg
push
clc
jl
xor
fild
pushf
jmp
lahf
mov
mov
test
xchg
iret
mov
xchg
popa
repnz
xor
aad
cmps
sbb
rol
xchg
sahf
push
call
mov
stc
les
imul
fld
jecxz
jmp
int3
xchg
mov
out
and
sub
mov
sub
mov
xlat
pslld
ficom
lahf
fnsave
push
stc
cmp
cmps
into
in
sbb
std
cdq
popf
loope
(bad)
sub
fld
out
(bad)
not
push
icebp
add
xor
xchg
sbb
test
ja
aam
jmp
mov
mov
std
xor
fucomi
inc
mov
nop
and
and
xor
(bad)
je
fwait
mov
xor
inc
imul
neg
xor
cmp
adc
rcl
test
pop
cmp
enter
mov
(bad)
cwde
and
mov
pushf
test
inc
adc
lock
(bad)
jle
xchg
ins
call
ss
xchg
lea
mov
pop
xchg
sar
mov
inc
sbb
data16
push
sar
shl
stos
retf
rcl
sbb
sahf
and
or
sub
pop
repnz
outs
les
inc
cld
fstp
xchg
pop
dec
imul
adc
or
fstp
stc
sbb
adc
fmul
movs
xchg
jecxz
and
sub
push
nop
xchg
rcl
aaa
lock
retf
call
sbb
rcr
int3
mov
adc
fwait
mov
es
cwde
das
leave
mov
popf
mov
je
movs
imul
xchg
jne
dec
jns
mov
je
xor
pop
adc
and
ror
cs
xchg
cmps
adc
cmp
add
fild
call
sbb
sbb
je
dec
call
push
aas
mov
(bad)
je
cld
data16
into
ret
xchg
dec
shl
dec
xchg
add
pop
sbb
arpl
lahf
test
fwait
cmp
jno
repz
sti
addr16
xchg
popa
fist
lahf
aad
push
cli
in
inc
repz
xchg
xor
js
dec
adc
xor
push
xchg
or
sbb
xchg
(bad)
int
xor
push
sbb
out
inc
xchg
mov
sub
test
mov
mov
adc
dec
outs
enter
popf
xor
pop
pop
fsub
adc
jl
mov
xchg
sub
xlat
ins
nop
into
int3
fimul
cmp
xor
adc
hlt
fadd
(bad)
in
icebp
or
div
aas
dec
fldcw
sub
mov
test
xchg
ja
cdq
push
xchg
in
xchg
enter
loopne
mov
xchg
(bad)
jg
and
cs
test
mov
mov
jae
jle
pop
xchg
jmp
mov
cmc
xchg
stos
or
fs
ss
loopne
xchg
mov
cmc
jl
cmp
les
mov
pop
adc
xor
mov
xchg
xchg
or
dec
jecxz
xlat
inc
xchg
call
jnp
adc
std
dec
xchg
ror
mov
in
cmp
and
popa
mov
ins
xchg
jp
xchg
int
and
jno
bound
mov
xchg
inc
dec
fstp
xchg
mov
aaa
jl
int3
lods
cdq
xchg
fnsave
(bad)
stc
int
xchg
and
shl
in
pop
sub
push
sub
or
mov
sub
pop
mov
aad
in
jecxz
mov
xchg
dec
jmp
lods
mov
xchg
scas
inc
inc
arpl
and
mov
push
jge
xrelease
fs
sbb
je
das
xchg
fwait
dec
int
mov
les
jle
xchg
(bad)
mov
call
(bad)
or
lock
adc
movs
aad
pop
in
adc
jge
mov
xchg
sbb
out
xor
hlt
push
cmp
data16
adc
push
repz
and
mov
push
lahf
or
sbb
stos
mov
jmp
mov
push
(bad)
mov
adc
and
gs
sub
xchg
sti
xchg
push
inc
fsub
xchg
adc
scas
xchg
mov
jl
push
sbb
arpl
push
push
bound
mov
fst
mov
outs
xchg
jp
lds
std
imul
dec
jle
xchg
test
fst
ret
xchg
xchg
je
jle
mov
jnp
xchg
xor
sahf
xchg
mov
jg
xchg
jns
mov
mov
outs
mov
push
add
jl
stos
pop
dec
retf
aaa
lods
cs
outs
xchg
je
fwait
in
mov
push
add
adc
mov
push
mov
add
push
xchg
stc
lahf
lods
push
mov
andnps
cmp
jne
cld
jmp
inc
aam
int
jns
sbb
aaa
xchg
arpl
cmp
cmp
lock
sbb
pop
add
adc
arpl
push
and
mov
idiv
adc
and
out
pop
stos
xchg
xchg
pop
add
and
lea
test
or
pop
xchg
cmp
sub
add
xchg
pop
mov
xchg
pop
ret
in
cld
lea
out
push
xchg
mov
mov
sub
xchg
xchg
ja
jmp
mov
xor
lds
adc
mov
test
popa
add
stc
ja
push
sub
pop
(bad)
imul
mov
add
aad
and
mov
sub
hlt
xchg
adc
xchg
bound
out
pop
je
and
mov
imul
mov
je
pushf
add
push
xor
test
hlt
stos
jb
mov
pop
xchg
and
add
inc
movs
or
dec
shl
dec
xchg
jb
mov
cmps
add
jmp
test
dec
leave
aad
push
add
xor
cmc
(bad)
pop
add
xchg
dec
xchg
pop
dec
push
ins
fistp
pop
xchg
cmp
popa
les
xor
cs
push
push
and
inc
popf
xor
sbb
mov
arpl
adc
pop
xchg
cmc
add
je
mov
xchg
dec
cmp
rol
xchg
sbb
xor
cmp
adc
lahf
pop
add
xchg
mov
adc
push
repz
pop
adc
xchg
pop
xchg
jmp
xchg
jne
fld
inc
xor
push
jbe
fimul
je
xor
jle
xchg
jns
mov
lock
mov
sbb
mov
xchg
push
jne
neg
dec
sub
lea
test
xchg
clc
mov
mov
lahf
mov
pop
cmps
mov
ficom
add
push
inc
addr16
mov
je
ss
pop
xchg
add
sbb
into
xchg
(bad)
std
mov
and
int3
push
push
xchg
shl
ret
loopne
ss
ins
mov
fs
popa
xchg
inc
aad
ins
mul
mov
stos
call
sbb
data16
es
gs
cdq
sub
aad
int3
test
sub
or
cwde
nop
test
pop
aaa
sub
adc
out
test
nop
and
(bad)
mov
mov
add
push
mov
jbe
add
dec
jecxz
jge
xchg
pop
and
mov
xchg
cmp
dec
add
mov
xchg
mov
sbb
aam
test
(bad)
les
pushf
mov
mov
dec
js
jmp
fcmovnbe
loopne
jecxz
fwait
xor
dec
movs
inc
xchg
pop
pop
cmps
out
mov
imul
(bad)
lods
fwait
outs
cdq
ins
sub
inc
push
repnz
not
(bad)
mov
ror
int3
xchg
outs
loopne
adc
test
xchg
cmp
jo
push
les
inc
xchg
imul
push
cwde
mov
mov
mov
inc
dec
ds
xchg
fs
mov
lods
add
cmp
cmp
xor
mov
sbb
push
xchg
push
push
add
pop
jle
retf
xor
cld
retf
pushf
xchg
ror
int3
push
out
popa
xchg
aas
icebp
sbb
ret
push
std
test
lar
fs
icebp
adc
ret
cwde
xchg
mov
push
push
ficom
je
jmp
push
inc
sbb
jns
test
adc
ret
es
adc
scas
add
iret
xlat
out
xchg
hlt
jp
add
or
icebp
dec
xchg
mov
cmps
dec
xchg
fwait
mov
xor
scas
dec
jbe
xchg
jecxz
movs
ins
out
stc
xchg
push
test
dec
mov
rol
inc
and
fwait
pop
(bad)
mov
xchg
fild
xor
pop
shl
test
and
or
sahf
jns
mov
sub
dec
xchg
push
xchg
mov
or
nop
inc
rcl
fwait
adc
inc
clc
xchg
mov
adc
xchg
sub
ins
adc
repz
movs
int3
cmps
pop
xchg
inc
lea
mov
pop
ret
je
mov
movs
pop
(bad)
push
mov
xchg
ret
mov
xchg
pop
adc
mov
shr
jmp
fidivr
mov
mov
sub
(bad)
into
lods
and
xor
push
std
cdq
xlat
loop
xor
mov
xchg
push
mov
shl
sete
shl
mov
cmp
js
push
and
fisttp
mov
jg
xchg
xor
(bad)
and
pop
rep
xchg
in
xchg
or
xchg
loop
pop
gs
cdq
dec
mov
repz
add
or
sbb
dec
jne
pop
les
call
push
ficom
sbb
or
xor
sub
xor
js
arpl
in
mov
in
das
into
xlat
xchg
sub
(bad)
cmp
pop
or
xchg
not
call
stos
hlt
retf
cmp
(bad)
xchg
or
lea
adc
(bad)
xchg
inc
inc
out
outs
fwait
movs
mov
and
ds
or
jns
xchg
jl
lock
out
xchg
xchg
ja
mov
mov
xchg
cmp
aam
call
jp
xchg
push
xchg
add
mov
rcr
popf
test
call
jp
test
sbb
(bad)
mov
push
lods
and
test
jle
or
mov
xchg
(bad)
imul
sub
cmp
adc
lds
jnp
and
movd
inc
and
clc
hlt
jge
mov
arpl
je
pop
mov
icebp
fs
rcr
das
mov
repz
mov
adc
(bad)
ret
pop
mov
into
mov
repnz
adc
jae
cwde
xchg
xchg
jge
ficomp
adc
lock
sub
test
mov
adc
ja
mov
xor
loopne
cmp
mov
jle
cld
jg
pop
(bad)
xchg
push
sub
add
lahf
in
xchg
and
xor
lods
pusha
jns
pop
or
cmp
xchg
jg
push
stc
push
or
inc
xchg
mov
fs
bound
push
mov
cs
xchg
push
push
test
pop
mov
jmp
mov
sub
jb
les
and
xchg
arpl
retf
or
push
inc
add
lock
mov
push
in
jg
pop
inc
stc
test
adc
xchg
mov
pop
retf
xchg
scas
in
sub
xchg
test
stc
jecxz
adc
fist
cmp
jns
add
xchg
aas
ins
jmp
mov
and
push
not
aaa
xchg
iret
mov
out
cmps
or
xchg
and
pushw
outs
pop
jl
xchg
push
fs
sub
sbb
mov
pop
(bad)
xchg
mov
movs
aam
ret
adc
dec
adc
ja
xchg
sub
jp
xchg
sub
fldenv
jmp
push
es
scas
push
shl
xchg
(bad)
mov
inc
and
adc
and
adc
rep
xchg
jge
pop
push
fs
cmps
xchg
xchg
or
imul
ja
sub
pmaxsw
out
mov
aas
mov
arpl
int3
mov
inc
pop
adc
jo
ds
mov
and
xchg
lds
movs
daa
(bad)
xchg
out
lods
cmps
dec
or
mov
xor
or
adc
push
mov
aaa
inc
inc
in
pop
xchg
mov
or
mov
xchg
mov
mov
dec
jns
fisub
sbb
xor
cmp
scas
jecxz
pop
xchg
aam
add
fimul
rol
cmc
inc
les
push
dec
pop
dec
jns
call
mov
jo
dec
xchg
int
jge
inc
push
mov
xchg
xchg
mov
xchg
mov
cmp
xchg
adc
ins
hlt
pop
mov
and
mov
fisttp
xchg
cs
fisttp
mov
mov
or
(bad)
fdiv
inc
push
xchg
or
inc
cs
jae
sub
add
xchg
xchg
nop
ins
xlat
test
xchg
in
mov
push
mov
sar
push
das
loope
sahf
dec
fwait
xchg
movs
jns
add
rcl
les
xchg
and
not
jb
jbe
and
xchg
jle
mov
into
popf
mov
push
scas
mov
jge
sbb
(bad)
mov
xchg
mov
ins
inc
mov
movs
pop
xchg
arpl
outs
jbe
stc
jl
sub
xchg
mov
jno
ret
ror
das
xchg
adc
xor
cdq
js
fs
hlt
dec
push
and
jne
icebp
xor
pop
mov
out
mov
mov
adc
retf
jbe
je
xchg
and
xchg
(bad)
mov
jne
test
inc
out
push
adc
sbb
inc
add
xchg
mov
xchg
mov
gs
sbb
retf
loope
add
mov
pop
cmp
call
imul
sahf
pop
mov
xchg
das
fimul
popf
xchg
and
je
adc
popf
xlat
test
mov
pop
jecxz
retf
(bad)
xchg
cwde
sti
sbb
push
popa
inc
cdq
or
mov
sbb
pop
xchg
bound
cmp
in
xlat
(bad)
cmp
popa
sub
mov
jl
mov
ins
adc
call
inc
stc
ret
mov
xchg
(bad)
dec
adc
mov
hlt
sbb
push
xchg
add
test
scas
test
dec
js
aas
sub
popa
cmps
jnp
dec
dec
mov
pusha
das
sub
dec
xchg
dec
sbb
rcl
cmp
cmp
and
aaa
dec
lds
cmp
xchg
cmp
add
jo
sbb
in
imul
or
mov
pop
sub
xchg
push
test
sbb
adc
add
or
data16
sub
inc
xchg
into
dec
pushf
push
push
push
xchg
xchg
inc
clc
xchg
(bad)
push
in
mov
cdq
in
xchg
sti
xlat
loopne
ret
iret
adc
push
or
dec
push
lods
adc
add
push
jle
xchg
sub
mov
dec
shr
jnp
adc
sbb
jne
xchg
lds
ds
call
mov
xchg
scas
jae
mov
mov
adc
xor
push
add
inc
pop
or
jbe
xchg
xchg
aad
dec
out
push
xor
js
inc
int3
repz
cmp
push
jge
sar
fisub
adc
mov
sub
outs
mov
das
xchg
push
xchg
adc
push
ins
out
sar
xchg
rcr
out
std
popf
stc
popf
mov
add
into
mov
dec
and
ret
inc
lahf
sbb
xchg
mov
pop
call
fnstsw
push
or
shl
loopne
(bad)
(bad)
and
push
aas
test
xchg
sbb
idiv
in
ret
jle
xor
mov
fnsave
scas
pop
fs
mov
add
fs
js
xchg
mov
xchg
sub
loope
mov
mov
fstp
add
bound
lock
xchg
call
jmp
jl
dec
repz
mov
mov
jge
mov
jo
sub
ins
adc
xchg
stc
pushf
shl
mov
addr16
xchg
xchg
adc
out
xchg
scas
and
pop
sbb
push
sahf
dec
aas
jmp
test
mov
xchg
out
push
ret
(bad)
inc
xchg
push
xchg
loopne
mov
push
or
pop
fwait
out
mov
mov
in
mov
sub
in
mov
aad
arpl
xchg
scas
mov
jg
xchg
dec
or
dec
dec
jp
lea
xchg
sbb
test
xchg
and
fisttp
jns
outs
ins
jnp
out
or
int
leave
fwait
xor
cmps
movs
ja
mov
cld
pop
xchg
pop
jg
add
and
je
dec
fwait
(bad)
in
mov
inc
push
or
pop
jmp
je
in
pop
je
add
adc
push
jnp
xchg
push
pop
fild
dec
jmp
es
jo
jle
xchg
sbb
test
and
fst
jmp
je
pushf
cwde
xchg
dec
cmc
iret
jle
loopne
push
mov
retf
jmp
mov
sbb
xchg
js
adc
jmp
aad
ss
push
cmp
lds
ins
and
fsubr
xchg
enter
and
imul
jbe
jae
sbb
mov
mov
mov
mov
(bad)
in
fcmovne
jmp
aad
pusha
xchg
mov
lea
cmp
pop
cmps
sbb
aaa
xchg
out
push
test
jae
aad
cmp
stos
scas
inc
retf
lahf
loopne
xor
mov
ins
adc
and
xchg
sbb
dec
call
push
jp
push
stos
or
or
mov
dec
ror
es
inc
adc
mov
lds
fwait
ja
adc
fs
scas
int3
xchg
retf
sbb
xchg
cdq
in
ret
adc
fwait
sahf
retf
test
dec
dec
xchg
mov
clc
cmp
or
xlat
lods
lea
jbe
cmp
xchg
pop
mov
and
cmp
pop
mov
push
loope
mov
rcr
iret
add
or
xchg
fwait
pop
push
xchg
scas
sti
les
jge
xor
jo
out
retf
out
xchg
stos
xchg
lock
mov
xchg
mov
jnp
stc
repz
in
cmp
(bad)
jp
sti
ret
mov
xchg
mov
fs
test
xor
dec
cmp
dec
sbb
call
inc
repnz
lods
imul
dec
cmp
js
xchg
pop
xchg
je
mov
xchg
mov
imul
push
add
xlat
jle
xchg
mov
dec
xor
call
std
xchg
jbe
xchg
in
aad
or
pop
mov
or
dec
out
adc
nop
push
(bad)
push
add
stos
xchg
sub
fimul
xchg
ret
loop
aad
fs
mov
aaa
imul
daa
leave
fimul
adc
das
jne
xchg
push
nop
aad
pop
and
pop
adc
xchg
or
dec
rcl
push
xchg
push
fadd
ficomp
ins
mov
add
mov
jl
cmps
call
repz
cmp
xchg
jo
mov
es
sub
(bad)
cmp
pop
xchg
inc
mov
xchg
mov
inc
xchg
js
sub
(bad)
push
mov
(bad)
ret
xchg
popf
jg
add
fadd
retf
sbb
shr
jne
hlt
fld
into
sahf
loope
xchg
jl
lock
mov
ins
xor
xchg
mov
movs
sbb
xchg
sbb
pop
dec
daa
xchg
ret
jbe
lods
leave
jo
in
sub
fwait
and
nop
sbb
and
mov
fwait
cdq
into
xchg
jno
enter
dec
inc
retf
in
(bad)
ins
ret
sar
jmp
ins
inc
lock
mov
jae
xor
jp
adc
mov
sbb
xor
adc
pop
mov
jmp
pop
inc
movs
retf
fild
mov
inc
dec
mov
adc
ret
add
mov
mov
jmp
or
shr
adc
push
pop
jp
xchg
addr16
add
jg
sbb
mov
(bad)
push
shl
sub
and
pop
lea
out
xchg
ffreep
sub
xchg
ret
sti
push
cmc
lods
int3
fnsave
sbb
out
pop
shr
cwde
fwait
jne
pop
push
test
jo
push
js
xchg
stc
ss
xor
jecxz
jp
xchg
std
pop
daa
cmp
mov
adc
jle
and
sub
cmp
dec
imul
lahf
(bad)
scas
ins
mov
pop
add
xchg
icebp
sub
movs
xchg
shl
sti
mov
xchg
jle
pop
fs
and
dec
(bad)
mov
aam
cmp
mov
push
test
push
push
rcl
mov
pushf
data16
inc
(bad)
(bad)
ror
aam
fimul
test
push
fistp
outs
xor
xchg
push
mov
push
mov
xchg
pop
sub
pop
jmp
in
adc
loop
sub
fidiv
fwait
add
hlt
jp
retf
inc
mov
inc
out
gs
fnstcw
mov
shr
xchg
mov
outs
cmp
jno
jecxz
int3
cs
push
cmp
movq
sbb
jno
mov
rcl
jmp
cmc
push
sbb
push
push
xchg
or
or
xchg
call
mov
mov
je
xor
dec
not
mov
fs
mov
pop
mov
popf
xor
pop
movs
xchg
cmp
jecxz
lods
xchg
adc
jb
stc
add
inc
scas
mov
xchg
fadd
lock
ret
xchg
mov
fstp
xchg
xor
out
pop
inc
dec
stos
ins
xchg
mov
lock
in
mov
jne
mov
xchg
xchg
bound
add
imul
dec
ss
push
int
scas
mov
idiv
jmp
xchg
add
mov
adc
movs
push
leave
outs
js
xchg
xchg
jbe
cmp
mov
pop
mov
add
int3
in
icebp
and
iret
fwait
xor
pop
nop
mov
mov
xchg
leave
loop
push
(bad)
div
jb
jbe
sub
lahf
inc
lds
xchg
cs
and
mov
arpl
dec
loope
cmp
adc
dec
cld
mov
adc
or
xchg
add
inc
xor
jnp
sbb
inc
sub
adc
inc
inc
mov
imul
test
es
bound
xchg
xor
pop
and
js
test
xchg
xor
push
pusha
and
dec
ret
add
cmps
scas
cmp
add
bound
fwait
mov
imul
test
rol
repnz
xchg
rcr
rcr
ret
icebp
iret
mov
ja
retf
popf
xchg
test
xchg
dec
aas
jnp
mov
dec
xchg
enter
ss
aaa
mov
pop
mov
out
xchg
push
add
push
xchg
sub
mov
mov
retf
cmc
fistp
sbb
dec
xchg
cmp
mov
add
enter
inc
and
in
xchg
clc
push
popf
pop
xchg
ret
jnp
loop
and
jge
cmp
sar
mov
adc
jne
shr
inc
in
js
pop
xchg
dec
out
xlat
loop
aas
out
lods
xchg
dec
ss
(bad)
xchg
fs
xchg
adc
cmp
mov
add
je
popa
aam
xor
push
and
pop
sub
jnp
adc
adc
stos
pop
xor
test
ds
or
mov
pop
push
imul
pop
lds
xlat
fbstp
adc
adc
mov
out
fs
jge
mov
push
std
gs
dec
xchg
ret
mov
fs
popa
xchg
xchg
jl
addr16
xor
sbb
mov
mov
inc
mov
sar
loopne
into
outs
push
repnz
inc
ds
push
xchg
push
xchg
test
(bad)
ins
xchg
ret
xchg
adc
mov
mov
les
xchg
sti
and
icebp
sbb
cmpxchg
hlt
lahf
pop
jecxz
push
add
mov
xchg
pop
pop
mov
dec
popf
pop
or
call
(bad)
icebp
mov
mov
pop
or
xchg
inc
repnz
fxch
jbe
ret
add
repz
dec
push
popf
aam
inc
cdq
call
pop
xchg
je
jb
or
inc
jle
fstp
xor
xor
xchg
xor
cmp
je
outs
imul
call
sahf
inc
xor
xchg
add
icebp
xchg
sub
lahf
and
add
das
xchg
xlat
add
aad
fs
pop
nop
jg
pop
xchg
pop
rol
cmps
lahf
xchg
mov
sbb
cmc
xchg
lock
ins
(bad)
fiadd
fisttp
out
jmp
push
xchg
lds
pushf
mov
lock
xchg
and
pusha
add
(bad)
ins
inc
cmps
inc
and
mov
xchg
push
push
jp
pop
out
paddsb
scas
mov
and
xchg
popf
jmp
mov
push
icebp
iret
mov
gs
xchg
or
repz
xchg
sbb
xchg
jmp
cmp
adc
add
push
dec
das
xchg
add
mov
push
out
sahf
mov
inc
mov
jno
sti
cwde
mov
mov
adc
(bad)
imul
or
inc
and
xchg
lahf
and
je
loope
xchg
mov
and
in
xchg
dec
bound
mov
cmp
mov
aam
sahf
pop
out
gs
enter
and
fiadd
jns
sti
fs
sbb
pop
icebp
jnp
push
push
xchg
call
mov
push
xor
xor
jne
dec
xchg
das
bnd
pandn
xchg
not
mov
pop
push
loopne
sbb
dec
push
or
addr16
test
js
(bad)
xchg
dec
scas
icebp
fadd
mov
arpl
ret
pop
iret
xchg
adc
mov
jb
fisub
mov
outs
inc
cmp
div
mov
inc
mov
mov
das
cmp
xchg
mov
xchg
hlt
add
mov
push
icebp
jmp
cmp
jae
jb
adc
retf
xchg
jmp
mov
jmp
pop
bound
inc
scas
sbb
mov
out
scas
xchg
adc
jg
nop
cmp
xchg
inc
sahf
pop
int
rol
rcr
jns
loope
mov
push
jbe
xchg
popf
lods
xchg
xchg
jmp
cmc
xchg
js
cdq
add
mov
icebp
xchg
cli
test
pop
clc
(bad)
xchg
xor
jne
call
ins
int
jl
arpl
fsub
or
rcl
jae
cmp
(bad)
movs
or
adc
scas
pop
and
into
dec
inc
fist
or
neg
loopne
xor
jle
xchg
inc
cmp
mov
and
xchg
lock
xchg
cmc
shl
popa
pop
enter
(bad)
cwde
arpl
int3
js
je
xor
or
mov
outs
mov
xchg
xchg
mov
(bad)
call
in
ja
dec
lds
nop
into
aas
xor
shr
into
sbb
and
into
lods
mov
in
push
iret
mov
fcom
xchg
sti
xchg
lea
xchg
dec
enter
xchg
push
out
(bad)
in
xchg
add
es
jp
add
aad
retf
xor
jo
jecxz
jo
ds
in
cmp
hlt
movs
sahf
retf
push
out
xchg
fiadd
and
mov
xchg
add
scas
jmp
cmp
cmc
dec
xchg
dec
mov
or
xchg
call
jnp
xchg
nop
pop
shl
ins
xchg
push
jmp
loope
pop
cmps
adc
inc
dec
ret
xor
mov
mov
xchg
sub
cdq
jle
adc
mov
bound
rcr
int3
dec
pop
clc
add
cmps
fs
mov
push
mov
jb
jg
js
xchg
cmp
fs
push
push
ss
and
xchg
nop
xchg
outs
sbb
movs
mov
or
xor
sub
xor
hlt
add
imul
cmp
aas
out
lea
cmp
and
pop
jl
mov
rcl
mov
adc
dec
pop
xchg
das
and
loope
push
mov
dec
in
add
mov
mov
push
push
and
loopne
adc
cmp
dec
aam
jno
psubusb
inc
pusha
nop
add
xchg
dec
mov
popa
shl
ja
xchg
mov
cmps
mov
and
xchg
pop
mov
push
push
xchg
hlt
mov
pop
sahf
jo
push
cmc
push
sbb
popa
mov
sar
pop
ror
push
mov
outs
(bad)
(bad)
mov
push
xchg
sbb
xor
lea
mov
cmp
or
jle
xchg
pusha
rol
push
inc
nop
jge
fidiv
mov
and
popf
push
xchg
sub
mov
xchg
push
sub
in
mov
push
pop
retf
cmp
lods
adc
test
dec
leave
jae
mov
scas
mov
push
rcl
push
hlt
cmp
arpl
push
jnp
hlt
pop
fs
retf
mov
xor
out
mov
mov
xor
inc
sbb
inc
inc
push
dec
jnp
cmps
xchg
xor
adc
ret
xchg
dec
jle
aaa
xor
sub
xchg
pusha
sub
mov
push
hlt
out
mov
jae
xor
jl
test
inc
sahf
and
adc
push
xchg
xchg
mov
add
aam
fs
jg
xchg
int
or
push
pop
test
div
bound
xor
xchg
xchg
mov
and
add
jb
cmp
lock
mov
movs
xchg
mov
into
jo
xchg
jp
xchg
sub
mov
(bad)
mov
fs
cwde
jb
int3
rcl
push
xchg
(bad)
fistp
xchg
dec
adc
sub
pop
xchg
mov
add
jge
jbe
xor
and
call
and
xchg
popa
pop
into
sub
cmps
dec
and
lods
bound
pushf
fwait
xchg
push
je
(bad)
jg
nop
mov
pop
in
test
gs
jecxz
call
cmp
mov
outs
cwde
sti
or
dec
hlt
pop
mov
adc
loopne
mov
dec
or
jns
push
mov
test
stos
std
imul
or
jae
mov
cli
and
sbb
add
xchg
aam
add
stc
jno
push
jmp
push
xchg
add
hlt
jecxz
xchg
xchg
mov
fsubr
retf
shl
or
and
imul
xchg
icebp
adc
pop
push
xor
add
push
xchg
cmp
cmp
push
add
sahf
nop
pop
(bad)
repz
icebp
movs
xchg
push
dec
fnstenv
xchg
mov
aas
inc
mov
dec
mov
shl
xchg
mov
or
dec
adc
jmp
mov
retf
pop
dec
test
adc
leave
icebp
xchg
jmp
or
in
jle
mov
sub
imul
loop
xchg
sti
test
fcmove
xchg
cmp
xchg
call
mov
or
xor
pop
push
pop
outs
xor
xor
xchg
std
jb
sub
rcl
cs
pop
sbb
sar
(bad)
cli
stc
xchg
push
and
enter
call
pop
xor
xchg
repz
cmp
inc
(bad)
add
jle
mov
push
out
pop
pop
stos
scas
sbb
iret
sbb
iret
ins
mov
je
loop
shr
and
or
xchg
sar
sti
jo
cmps
dec
dec
call
push
adc
test
scas
rcl
ins
xchg
adc
xchg
arpl
sbb
(bad)
pop
xchg
cmp
or
scas
cmp
sbb
xchg
pusha
jg
push
hlt
mov
cmp
test
mov
lods
jg
adc
xchg
sbb
int3
iret
dec
mov
or
mov
std
xor
mov
push
call
fisttp
inc
mov
adc
std
ja
xor
icebp
psubq
lahf
adc
lods
dec
test
xchg
sub
jle
mov
shr
push
retf
xor
fldcw
and
push
cmp
mov
ss
or
test
xchg
jb
inc
leave
inc
ror
push
fwait
push
dec
inc
jno
(bad)
jle
add
cmp
adc
std
mov
inc
mov
(bad)
mov
or
out
xlat
retf
sub
adc
mov
int
out
xchg
cmps
xchg
call
fisttp
mov
scas
aaa
adc
jns
lds
push
mov
cdq
xchg
mov
leave
xchg
or
jmp
push
cmc
jns
je
pop
xchg
int
movs
push
retf
fwait
or
pop
or
aas
ror
cmp
xchg
dec
mov
cdq
and
movs
sti
push
ins
int3
jae
xchg
sub
clc
push
xor
rcl
fnstcw
jns
mov
and
in
xchg
fucompp
les
xchg
add
jb
mov
xchg
leave
aam
sub
and
cmp
idiv
in
mov
mov
push
xor
dec
add
sahf
push
sbb
push
xchg
cmc
ror
aas
aam
xchg
test
xchg
sbb
pop
push
push
imul
cmp
sbb
pop
push
jecxz
adc
fsubr
or
idiv
add
xchg
or
out
loopne
mov
jl
scas
fcom
cs
xchg
mov
cmp
cld
scas
xor
ret
adc
jge
mov
inc
xchg
test
jae
xchg
push
out
scas
pop
jl
fst
loope
or
mov
xchg
add
xchg
jnp
sar
jecxz
shl
push
sub
je
sub
inc
add
fcom
inc
mov
adc
fiadd
xchg
movs
push
sbb
and
pop
xchg
loope
stos
and
nop
pop
xchg
test
push
and
and
imul
sbb
push
mov
and
xchg
inc
int3
jge
adc
hlt
mov
adc
xchg
xor
imul
add
push
xchg
jl
popf
mov
add
add
jns
or
push
out
and
sti
mov
mov
std
mov
xchg
add
sub
call
push
lahf
xchg
hlt
mov
inc
pop
xchg
sar
push
xchg
xor
cmp
xchg
inc
dec
bound
xchg
inc
jb
jno
les
push
inc
cmp
push
add
jl
xchg
fdivrp
scas
sub
repz
and
jnp
adc
mov
push
leave
mov
xchg
mov
push
scas
aad
ds
xchg
jl
inc
cmps
jmp
scas
xchg
add
dec
dec
out
loop
mov
mov
or
or
in
xor
xchg
into
inc
xchg
das
mov
inc
pusha
or
xchg
xor
cmovnp
adc
mov
inc
or
leave
pop
cmps
cmp
sahf
sbb
add
pop
dec
movs
xchg
mov
or
movs
leave
xchg
cmp
jp
adc
pop
xchg
xor
push
lock
mov
jno
push
dec
xchg
sbb
cmp
adc
mov
push
xchg
push
stc
out
xor
push
hlt
jmp
das
pop
pop
push
push
xchg
sbb
dec
xchg
out
sbb
jmp
or
mov
js
push
xchg
ins
cld
add
or
enter
(bad)
cli
xlat
imul
inc
dec
loop
sub
or
jb
xchg
jge
pop
call
push
push
xchg
pop
pop
push
fild
mov
jl
in
es
xchg
call
xchg
fimul
push
mov
xchg
out
div
pop
mov
xrelease
xchg
and
call
scas
xlat
mov
push
je
fwait
hlt
cwde
xor
push
loope
(bad)
mov
or
jecxz
or
inc
xor
and
je
or
loop
sti
add
mov
add
xchg
stos
mov
xlat
add
jo
push
not
adc
test
cmp
stc
xor
pop
xchg
int
mov
xchg
adc
mov
pop
fist
pop
cmps
pop
aaa
fcom
mov
lahf
or
push
jge
and
adc
sub
sbb
cmp
jmp
pop
fdivr
lds
dec
inc
inc
push
(bad)
adc
arpl
mov
fxch
pushf
xor
push
xchg
test
sbb
shl
pop
jp
xchg
out
(bad)
dec
fisttp
loopne
je
sub
cdq
add
mov
push
add
xchg
sub
inc
and
cmp
adc
add
jbe
ss
pop
jecxz
xchg
clc
jmp
mov
mov
lea
ds
push
adc
mov
mov
or
xchg
inc
les
or
mov
fadd
cmp
xchg
dec
mov
push
shr
aad
cmc
ins
loope
not
fs
xchg
rol
jo
out
push
lea
push
mov
mov
xchg
imul
ss
jmp
push
gs
test
sahf
(bad)
push
xlat
mov
out
ds
shl
jl
xchg
ret
pop
rcl
hlt
loop
xchg
xor
outs
inc
je
jecxz
bound
ins
test
dec
stos
dec
fs
inc
pop
ret
dec
xchg
icebp
jle
push
shl
call
push
pop
xchg
cmp
sub
pop
xlat
add
dec
js
inc
xchg
scas
push
stos
inc
xchg
mov
push
sbb
enter
and
xchg
or
stos
fimul
adc
inc
cli
mov
aaa
loopne
jns
jge
push
jecxz
ficom
aad
imul
gs
cs
out
pusha
shr
xchg
xchg
adc
jnp
jmp
mov
sti
shr
les
mov
or
(bad)
fidiv
xchg
movs
mov
xchg
mov
test
(bad)
jae
aas
scas
xchg
clc
cwde
iret
dec
sbb
mov
xchg
pop
das
jge
loop
pop
pop
mov
movs
add
int
mov
aam
call
jg
mov
cmps
enter
pop
pop
(bad)
jmp
std
xchg
sub
imul
sbb
in
mul
out
lock
xchg
ret
outs
xchg
xchg
cmp
mov
int3
push
xchg
test
xor
int3
push
aad
xchg
call
mov
fbld
mov
je
push
out
dec
xchg
cmp
inc
xchg
jo
push
cld
add
or
fisttp
xchg
bound
dec
aam
xchg
dec
nop
xchg
aad
fldcw
or
retf
sub
mov
jo
addr16
push
cmps
xchg
mov
pop
sti
pop
push
or
test
jnp
inc
xchg
fisubr
fwait
les
test
cwde
jle
push
in
imul
jl
adc
dec
mov
int
sahf
and
call
xchg
xor
lods
pop
es
fdivp
mov
xchg
outs
cwde
rcl
aas
loopne
sub
popf
mov
xchg
inc
ret
push
lods
or
mov
push
pop
outs
into
pushf
adc
jbe
jne
in
or
push
xchg
xchg
test
retf
movs
imul
mov
hlt
lods
fwait
adc
test
or
fst
mov
xchg
stos
inc
inc
loope
dec
push
push
std
pop
xchg
scas
cwde
(bad)
js
mov
mov
sti
xchg
test
retf
adc
xlat
(bad)
in
pop
fadd
adc
mov
xchg
inc
not
fwait
mov
leave
push
mov
pusha
cmps
mov
loopne
fsubp
fwait
ja
mov
xor
rcl
enter
mov
jo
mov
mov
inc
jl
fist
cwde
dec
cmp
shl
xchg
sub
mov
ins
and
popf
ins
(bad)
and
ins
lods
push
mov
loop
adc
pop
push
xor
inc
dec
and
push
xchg
lods
addr16
push
movs
xchg
fxch
xchg
sbb
push
cmps
inc
pop
popf
cmp
(bad)
nop
enter
vmovdqu
dec
jo
push
adc
cmp
add
inc
push
in
mov
rcr
loop
pop
fwait
mov
test
aad
loopne
test
sub
mov
mov
das
inc
test
scas
dec
sub
repz
in
mov
xchg
adc
aad
adc
rcr
xchg
movs
aam
or
add
mov
cld
ins
call
xchg
and
mov
and
jle
xchg
(bad)
lods
ins
or
or
stos
pop
inc
(bad)
or
fs
ss
clc
pop
daa
outs
and
pop
(bad)
mov
pushf
mov
sub
mov
ficom
fdivr
jl
scas
test
out
cmp
out
mov
cmps
sub
clc
retf
and
arpl
enter
jge
xchg
jmp
jl
pop
adc
dec
xchg
ins
movs
sub
jg
pop
mov
or
xchg
sbb
push
repnz
cmp
hlt
xor
fnstsw
int3
std
jbe
jl
psubusb
dec
jnp
sbb
jmp
call
mov
xchg
fcom
(bad)
int
mov
cmc
call
pop
add
rol
int3
mov
sub
cmp
and
adc
pop
jl
dec
xchg
int
jno
call
pushf
sahf
mov
retf
and
xchg
idiv
enter
jb
mov
aam
xor
sbb
inc
out
test
ins
mov
lods
cmp
push
push
bound
push
mov
xchg
mov
stc
(bad)
movs
nop
ds
jo
pop
sub
out
sar
xchg
xchg
rcr
xchg
xor
out
pusha
xchg
mov
out
mov
pop
add
mov
xlat
mov
xchg
cmp
xor
push
ret
stos
jg
jb
mov
and
das
rcr
xlat
sbb
popfw
adc
push
je
in
adc
pop
push
loope
in
xchg
ss
pop
or
xchg
clc
mov
push
jle
push
xlat
sti
in
jmp
fist
std
loopne
test
jle
repz
sbb
sub
inc
cdq
mov
nop
xchg
iret
xor
mov
jne
call
inc
mov
dec
dec
mov
inc
ret
cmp
stos
xchg
pop
je
vpmaxsw
rcr
inc
movs
test
push
mov
and
sbb
test
fcomp
cmps
inc
xchg
add
clc
pop
sbb
pushf
nop
ficom
pop
icebp
push
popa
pop
mov
mov
outs
enter
or
imul
adc
ror
xor
out
inc
imul
push
mov
fist
fld
xchg
sbb
dec
xlat
fist
mov
mov
push
xchg
adc
xchg
cmps
lods
es
lock
xchg
pop
mov
mov
lea
xor
ins
push
mov
xor
add
cmps
jns
xchg
shl
(bad)
pop
test
ficomp
inc
xchg
cmp
dec
outs
out
and
xchg
fcomp
pop
inc
ins
dec
aam
(bad)
xchg
cmp
in
mov
cmp
sub
adc
push
enter
xchg
push
int
sub
cmp
inc
cmp
lock
je
pusha
add
mov
xchg
lds
push
aas
in
jp
mov
pop
out
push
mov
push
mov
call
mov
nop
fld
xor
(bad)
mov
xchg
and
cmc
xchg
ret
sbb
xor
mov
inc
ins
xchg
push
push
mov
dec
xchg
test
into
and
cmc
and
sbb
push
shl
add
aaa
xor
xchg
push
out
xchg
(bad)
cmp
hlt
popf
xchg
aas
sub
repz
je
xchg
mov
mov
mov
pop
push
outs
pusha
adc
mov
xchg
imul
mov
mov
mov
ins
and
xchg
imul
mov
xchg
mov
ret
in
inc
jp
dec
add
pop
mov
and
sub
lock
cld
scas
fild
icebp
or
popf
mov
daa
sbb
pop
xchg
xor
ins
call
push
sbb
cmps
sub
xchg
sbb
cmps
mov
je
ret
dec
xchg
sub
jmp
bswap
fwait
ret
mov
dec
int3
or
popf
setns
xchg
push
xchg
ret
stos
pop
or
xchg
cli
pop
retf
add
mov
mov
daa
shl
jmp
(bad)
mul
xchg
rol
shl
xchg
xor
daa
fwait
aas
mov
out
popf
jno
push
int3
adc
mov
pop
xchg
outs
mov
mov
sub
test
cmp
adc
fs
lds
sub
mov
(bad)
hlt
jmp
cmps
jnp
idiv
hlt
sub
cmp
out
fstp
in
xchg
(bad)
or
aaa
js
xchg
outs
aas
cmp
repnz
adc
cmp
sbb
mov
arpl
xchg
pop
jp
pop
leave
mov
mov
les
int3
ficomp
adc
mov
push
sar
push
mov
xchg
inc
xchg
sub
mov
push
xchg
popa
push
sub
das
sar
push
jecxz
ins
dec
(bad)
and
jmp
mov
sahf
retf
cmp
add
not
les
inc
call
jbe
cmp
hlt
push
icebp
iret
lods
xchg
in
dec
shr
retf
scas
rcr
push
or
jp
cmp
hlt
inc
fstp
add
iret
pusha
sbb
xchg
xchg
movs
push
call
xchg
repz
ret
inc
mov
mov
adc
mov
cmc
mov
mov
xchg
mov
inc
and
xlat
not
pop
adc
xchg
icebp
arpl
fnstsw
pop
mov
ret
addr16
push
xchg
fiadd
rol
ins
inc
lock
lahf
or
jne
stc
cmc
mov
inc
mov
push
rcr
xchg
xchg
lds
jns
jae
ja
loopne
hlt
fwait
or
pop
je
popa
stc
jl
mov
xchg
and
loope
outs
pop
push
stc
xchg
(bad)
pop
add
aam
dec
mov
mov
xchg
shr
mov
xor
stos
pushf
push
test
jp
mov
popa
clc
xchg
std
retf
xchg
xchg
sbb
cmps
xchg
add
ds
loop
xchg
push
pushf
call
call
pop
pop
addr16
and
or
ss
mov
xchg
adc
sub
pop
hlt
xchg
test
lods
fist
js
out
xchg
sti
out
int3
(bad)
sar
xlat
adc
pop
stos
shr
xchg
clc
outs
mov
and
popa
data16
retf
or
test
add
xchg
repz
xor
movs
xchg
xchg
sub
push
shr
sbb
ins
mov
in
adc
stos
jo
xchg
cmp
(bad)
lock
hlt
cmp
xchg
ficom
push
xor
pop
fld
push
data16
push
xchg
cmp
scas
jmp
inc
fld
sbb
mov
pop
mov
ja
sahf
and
rcl
pop
or
mov
retf
ja
aam
or
xchg
rcl
fmul
mov
(bad)
or
sbb
xchg
sbb
shl
(bad)
mov
mov
and
or
int
cmp
xchg
test
scas
fst
in
sbb
jo
test
and
add
and
(bad)
fcos
aam
push
and
cmp
stos
and
xor
add
inc
cmp
xchg
call
adc
jns
fs
ja
push
xor
ins
push
push
scas
xchg
in
bound
pop
xchg
push
mul
push
xchg
inc
pop
lar
jmp
icebp
das
test
mov
mov
mov
js
mov
push
lods
xor
jge
push
xchg
aam
ins
pushf
add
xchg
cdq
mov
or
enter
outs
push
movs
shl
inc
mov
push
sub
cmp
bound
loope
dec
ret
sti
pop
lea
pushf
js
or
mov
push
test
out
pop
test
mov
pusha
hlt
xchg
dec
jecxz
mov
and
jmp
in
pop
push
test
mov
scas
lahf
dec
and
mov
jo
std
pop
in
xchg
(bad)
sahf
repnz
dec
jge
cmp
xchg
and
xor
jmp
jg
and
ror
or
sbb
pushf
xor
cdq
add
lock
jnp
jmp
xchg
xchg
mov
jns
and
(bad)
dec
pop
mov
sub
xor
mov
fstp
cmp
outs
sub
add
or
push
bound
mul
xchg
xchg
ret
cmp
sbb
mul
jbe
inc
jno
xchg
adc
(bad)
dec
adc
ds
push
je
in
dec
xchg
out
std
dec
outs
rcl
xchg
bnd
jmp
jp
or
pop
xchg
lea
aaa
xchg
xchg
(bad)
jmp
popf
mov
xchg
mov
pop
adc
fcmovu
mov
xchg
sub
dec
lahf
pop
jl
shl
fnstsw
in
aam
arpl
adc
or
scas
out
mov
xchg
push
ror
stc
jl
test
es
repz
push
pop
mov
mov
push
pop
pop
xchg
xchg
jnp
mov
xchg
repz
(bad)
out
stos
int
je
xchg
iret
mov
jbe
xchg
mov
xchg
mov
outs
adc
and
jp
xor
pop
les
xchg
mov
pop
pop
aam
cs
fisub
xchg
(bad)
dec
xchg
mov
sub
retf
pop
push
cmp
pusha
ficom
mov
dec
iret
push
mov
out
pop
pcmpgtb
cmp
aas
xchg
push
mov
fbstp
aam
lds
gs
lahf
lods
les
test
mov
dec
shr
sub
xchg
cmp
push
xchg
in
bound
test
xchg
sbb
popf
cmp
xchg
loop
mov
in
xchg
mov
push
mov
sbb
xchg
loope
ret
adc
lds
mov
mov
test
pop
xchg
cmc
pop
mov
mov
push
xor
cmp
xchg
stc
dec
loopne
mov
add
(bad)
gs
xchg
cmp
push
idiv
ins
popa
and
imul
jmp
xchg
pop
sar
pop
sbb
lods
dec
xchg
jle
or
jecxz
loope
xchg
add
pop
mov
jg
or
xchg
mov
xchg
enter
mov
and
(bad)
xchg
pop
mov
jle
stc
aaa
pop
jne
xchg
sub
out
sahf
add
or
lods
mov
test
dec
shr
(bad)
adc
pop
and
rcl
xchg
cmp
cmp
es
into
fs
xchg
or
lea
test
xchg
(bad)
das
push
ins
cli
adc
push
dec
xchg
retf
jne
in
shl
test
fwait
xor
(bad)
cdq
xchg
inc
cmp
dec
jne
test
add
xchg
outs
dec
pop
mov
or
mov
in
loopne
jno
xchg
rcr
xchg
int3
cmp
inc
cdq
add
rol
mov
je
and
sub
fwait
jnp
mov
je
sbb
xchg
sub
(bad)
lea
aas
fwait
xchg
retf
js
je
inc
and
sub
dec
push
imul
pop
xor
or
pop
xchg
rol
cmps
int3
adc
mov
xlat
hlt
xchg
sbb
and
push
repz
jno
mov
or
fild
dec
push
test
mov
mov
sbb
adc
push
xchg
hlt
xor
popf
dec
js
mov
aam
and
adc
add
fwait
movs
enter
aam
sub
jle
sar
es
jmp
ds
inc
and
iret
mov
push
cdq
xor
pop
aad
xchg
jl
sti
sbb
jmp
test
xor
call
mov
pop
sub
xor
pop
aaa
adc
mov
push
and
mov
jl
fst
sub
mov
scas
inc
or
dec
ss
xchg
add
and
adc
xchg
fstp
scas
scas
mov
cdq
xchg
pop
mov
shl
pop
sti
xor
jbe
mov
xchg
ds
inc
adc
sbb
push
pushf
xchg
and
ret
aaa
sub
outs
adc
mov
rcr
cmp
int
jns
jmp
outs
add
nop
mov
and
rcl
inc
xchg
mov
mov
das
lock
add
and
sbb
fwait
out
mov
aas
mov
loop
adc
xchg
rcl
imul
addr16
xchg
sub
push
jnp
stc
xchg
mov
jbe
xchg
jae
or
aam
pop
pop
cld
push
jno
imul
dec
js
fld
fwait
mov
stos
and
cmps
xchg
jmp
imul
xchg
aad
xchg
hlt
loope
cmp
ins
test
jnp
xor
aaa
mov
mov
xchg
xchg
stc
mov
xor
pop
push
push
mov
xchg
mov
jg
fdivr
ja
fwait
sub
in
lods
cmp
and
js
add
xchg
dec
leave
daa
gs
mov
aas
add
sub
mov
loop
push
adc
rcl
sub
cmp
lods
aas
ss
sbb
mov
jo
mov
dec
add
jge
xchg
cmp
cmps
lds
xor
adc
je
js
xchg
movs
jo
and
sbb
or
stos
sub
in
jae
xchg
jbe
enter
call
jl
aaa
dec
push
xchg
inc
sbb
jp
test
(bad)
cmp
sbb
js
cmps
xchg
or
xchg
in
les
mov
and
loop
mov
add
sbb
sti
ss
aaa
fisub
rcl
or
xchg
jp
aam
fdivr
rcl
xor
mov
and
cmp
ss
mov
sbb
pop
sbb
cmps
inc
adc
pop
jmp
or
add
cmps
test
test
cmp
cmp
inc
mov
xchg
(bad)
in
xchg
inc
ja
xchg
pop
xchg
iret
out
push
mov
pop
dec
rol
push
adc
xor
pop
shl
xchg
adc
add
and
xor
jge
and
xchg
adc
xchg
lock
xor
pusha
popa
jb
dec
xchg
and
imul
ja
ficom
cmp
xchg
ret
repnz
jmp
sub
jb
xchg
push
xchg
int3
out
xchg
sub
push
addr16
nop
jmp
xchg
cs
sti
sub
stos
jl
dec
xchg
ret
sbb
jmp
jns
push
ins
jp
stc
jmp
xchg
jne
push
lahf
inc
lods
mov
cwde
and
stos
or
fwait
add
je
inc
test
sub
mov
ja
add
loope
stos
xchg
cmp
pop
cwde
xchg
aas
sub
jle
stos
push
jmp
test
xchg
jo
cwde
cmps
retf
jnp
cmc
xchg
lock
mov
inc
outs
and
xchg
mov
scas
push
ficom
rcr
bound
mov
add
stos
fwait
pop
jge
test
xor
push
sub
xchg
sub
ret
popf
mov
test
lods
int
add
es
adc
test
inc
fiadd
out
xchg
pop
sub
sbb
mov
ror
scas
xlat
pop
sar
push
mov
xchg
push
into
fstp
outs
nop
call
push
js
out
imul
adc
div
not
inc
push
inc
js
rcl
(bad)
hlt
pop
dec
imul
mov
cmp
xchg
or
jo
or
xchg
add
inc
outs
jl
and
ja
dec
xor
xchg
lahf
sbb
mov
mov
shl
fwait
or
jne
pop
(bad)
xchg
outs
rcr
xchg
lods
cli
cmp
inc
sbb
adc
bswap
mov
push
neg
sub
add
(bad)
pop
addr16
or
and
ret
hlt
out
adc
cmp
mov
clc
push
mov
movs
xor
in
cmps
ficom
pop
nop
les
xor
xchg
fisub
add
lea
gs
in
jo
ins
xchg
cmp
lahf
mov
xchg
dec
pusha
jecxz
cmp
sbb
xchg
fdiv
inc
and
pop
push
(bad)
mov
hlt
add
xchg
jecxz
sahf
add
loope
ds
daa
push
test
aad
cmps
xchg
inc
jae
in
std
(bad)
xchg
and
jl
dec
fwait
cdq
mov
xor
mov
mov
fsubr
jo
sbb
aam
inc
fcom
lock
push
call
xchg
inc
mov
stc
sub
lds
je
mov
mov
xchg
sub
cmp
stc
sbb
adc
sahf
cmp
lds
rcr
mov
sbb
xor
sbb
cld
jbe
pop
adc
pop
loopne
loope
add
inc
sbb
push
hlt
pop
mov
xchg
ret
addr16
cmp
pop
in
dec
xor
in
cmps
ss
ret
and
aam
xlat
xchg
fbld
pop
pushf
xchg
fs
cmp
cdq
cmps
push
mov
cmps
pop
std
call
je
jns
inc
cld
xchg
daa
and
cwde
mov
push
std
cmp
inc
mov
pop
hlt
sar
xchg
scas
js
loop
in
xchg
stc
xchg
jns
jmp
mov
test
aas
dec
pop
xchg
sub
repz
mov
ds
or
mov
ficomp
jp
(bad)
call
aaa
outs
push
loope
push
push
push
clc
lahf
xchg
sub
xchg
mov
push
inc
mov
dec
adc
xor
retf
mov
adc
push
xor
fist
xchg
fadd
fnsave
jmp
ins
inc
test
jle
xchg
xchg
cmp
cld
cmc
add
cs
outs
dec
into
mov
int
enter
mov
movs
pop
aam
cmp
icebp
sub
jae
test
cli
pop
xchg
pop
adc
outs
xor
inc
ret
mov
addr16
jl
cmp
arpl
inc
sub
inc
push
in
xchg
lods
loop
push
xchg
ss
std
dec
xchg
shr
pop
leave
push
shr
jp
mov
test
sub
xchg
add
das
add
mov
mov
or
jl
add
fwait
xchg
push
stos
arpl
shr
add
cmc
push
xchg
or
jb
sti
xlat
sbb
mov
je
retf
or
hlt
mov
mov
movs
sbb
retf
jb
pop
xchg
lea
in
mov
adc
xchg
aam
(bad)
cld
sbb
xchg
xchg
and
popf
div
xchg
push
sahf
(bad)
xchg
push
retf
xchg
xlat
test
mov
pusha
cwde
or
ror
cld
stos
mov
mov
dec
gs
xchg
sub
nop
mov
pop
or
rcr
rcl
sbb
daa
xchg
push
test
ds
xchg
mov
jbe
in
add
dec
mov
fisubr
mov
aaa
mov
xchg
cmp
pusha
pop
mov
inc
add
sub
imul
mov
xchg
dec
das
pop
xor
mov
sar
xchg
or
sub
mov
shr
push
mov
or
mov
das
pop
fldz
fst
lahf
cmp
sub
sbb
mov
sbb
outs
aas
nop
push
fwait
push
(bad)
into
or
nop
jle
(bad)
movs
fstp
dec
out
xchg
jmp
into
repnz
inc
int3
jl
loopne
mov
xor
mov
pop
or
in
xlat
jmp
fnstcw
mov
retf
cmp
and
mov
xchg
mov
mov
aad
addr16
push
loopne
repnz
xchg
cmp
jl
outs
test
stc
jbe
mov
adc
shl
shl
test
sub
or
adc
inc
dec
dec
xchg
scas
test
xchg
jmp
cmps
test
pop
mov
xchg
sub
add
xchg
inc
dec
dec
inc
shr
repz
push
cmp
jp
and
es
xchg
jle
out
aad
adc
cmp
pop
cmp
or
mov
lahf
inc
inc
inc
inc
add
mov
xchg
lock
nop
pop
aas
test
(bad)
(bad)
mov
mov
outs
int3
ror
fst
sbb
icebp
nop
std
xchg
xchg
adc
das
push
inc
xchg
xchg
ret
pop
inc
rol
jns
jle
hlt
lahf
call
add
aaa
jge
mov
lods
push
test
xchg
movs
leave
(bad)
int
pop
cld
aam
cmp
xchg
push
pop
add
add
inc
and
and
mov
mov
imul
mov
adc
imul
pop
mov
jecxz
xchg
lods
cs
mov
mov
xor
xchg
arpl
cmp
xor
pop
bound
sub
dec
mov
xchg
movs
jl
xchg
cmp
cwde
adc
dec
mov
mov
stos
jecxz
dec
inc
push
in
aam
aas
push
clc
dec
int3
in
xchg
retf
and
sbb
mov
out
cmp
inc
mov
icebp
in
push
add
pop
or
in
jge
shr
das
sar
call
xchg
mov
push
fs
pop
mov
in
pop
test
pusha
mov
xchg
push
inc
dec
cmp
cmp
xor
xchg
jns
mov
in
fwait
sub
jmp
add
adc
cdq
inc
retf
mov
lods
push
add
lahf
xchg
adc
add
xchg
ins
cmp
pop
pop
xor
fisubr
(bad)
xchg
xchg
rcl
mov
or
add
out
je
loopne
retf
fidiv
ret
dec
stc
xchg
mov
sbb
dec
lea
mov
nop
test
mov
xor
xchg
mov
lods
xchg
mov
(bad)
and
mov
not
cmp
mov
sub
outs
(bad)
div
shufps
add
sub
rol
repnz
jnp
fwait
adc
mov
xor
xor
pop
mov
outs
xchg
jle
not
mov
ficom
add
cwde
mov
(bad)
pop
test
cmps
(bad)
and
or
xchg
fimul
sub
pop
in
push
shr
(bad)
push
mov
cmc
inc
inc
sub
nop
js
scas
jb
ds
aaa
je
test
mov
sub
(bad)
retf
outs
sub
daa
test
cmp
xchg
cmp
ffree
sbb
imul
xchg
test
mov
jle
out
pop
dec
cmp
jb
push
xchg
add
mov
daa
xchg
jle
sbb
push
xlat
inc
nop
lods
iret
xchg
cmp
pop
mov
xchg
je
sti
repnz
ret
stos
xchg
jo
push
retf
xchg
and
mov
movs
cmp
xchg
iret
pop
dec
and
das
jle
outs
les
xchg
sbb
out
sub
(bad)
jnp
mov
cdq
push
cmps
int3
addr16
xchg
dec
std
cwde
jp
iret
sete
out
mov
lds
xchg
pop
cmp
ss
call
xchg
enter
xchg
sahf
sti
dec
or
cmp
xchg
imul
xchg
or
sub
stc
and
cdq
cmp
fist
popa
fwait
jl
push
mov
pop
jae
mov
daa
rcl
shl
xchg
or
and
cmp
inc
mov
mov
fwait
and
sbb
in
mov
and
mov
pop
mov
leave
mov
cli
xor
cmp
push
mov
mov
leave
xchg
sahf
aas
aad
mov
sar
popa
out
cs
mov
je
jne
cld
das
xchg
les
scas
fwait
pushf
dec
xor
pop
xchg
ds
or
jo
ret
sbb
xchg
push
fild
sub
xchg
xchg
test
xchg
pop
js
scas
shl
push
push
mov
and
jmp
arpl
in
in
mov
icebp
scas
loope
mov
add
jle
sbb
rcl
movs
rcl
rol
adc
or
fs
pop
in
pop
push
mov
hlt
cmc
and
repz
mov
lock
xchg
sub
test
cmps
pop
mov
xchg
adc
fs
xchg
add
out
gs
mov
rcr
sub
mov
jle
shr
mov
pop
and
adc
hlt
imul
xchg
in
push
fdiv
inc
mov
fwait
jno
cs
inc
bound
std
hlt
ret
dec
add
jmp
mov
out
xchg
aad
and
pop
loopne
xor
lods
add
mov
xchg
std
adc
imul
or
les
rcl
loop
jno
sub
push
call
sbb
sbb
cmp
sub
xor
mov
push
xchg
dec
test
or
stc
retf
mov
xchg
cmp
push
and
push
jl
fwait
jp
jae
xor
ret
ins
xchg
jne
pop
jo
das
lea
sub
fidiv
inc
add
xchg
mov
in
out
loope
pop
jle
push
xor
cmp
xchg
test
call
jo
repz
retf
push
out
fwait
movs
sahf
adc
mov
rol
fldenv
loop
ror
push
ins
xchg
mov
pop
ret
add
xchg
and
and
(bad)
sbb
xchg
push
adc
lods
jle
cmps
adc
xchg
sbb
add
xor
xchg
cdq
shr
scas
mov
out
xchg
lock
xchg
les
in
mov
jmp
arpl
sbb
enter
sub
ret
imul
push
xchg
mov
fdivr
into
fs
in
(bad)
fild
jno
dec
cs
xchg
fisttp
ja
nop
sbb
cdq
xchg
dec
mov
movs
or
mov
and
cmp
xchg
push
in
jb
or
les
mov
pop
cmc
xchg
inc
aas
mov
jb
xchg
dec
js
mov
inc
dec
jmp
cmp
iret
pusha
xchg
sub
ins
push
cwde
inc
mov
add
rol
xchg
mov
pusha
scas
sub
out
xchg
push
int
mov
sbb
sti
adc
xchg
push
ret
test
inc
adc
ret
gs
jo
nop
pop
xchg
scas
mov
pushf
xchg
dec
leave
ror
xchg
or
inc
push
je
in
jle
into
and
adc
retf
imul
mov
je
pop
xchg
mov
mov
jnp
sahf
mov
test
retf
pushf
hlt
inc
imul
in
sahf
xor
sbb
ret
pop
iret
xchg
outs
mov
push
fild
adc
cmp
pop
xchg
jno
(bad)
out
leave
cmp
dec
in
pminsw
test
int
in
mov
cmc
xchg
ins
and
sub
imul
mov
fwait
push
push
mov
sbb
test
adc
pop
aas
movs
ret
xchg
jmp
fsubr
jnp
jg
(bad)
fisttp
ins
xchg
push
xchg
pop
lods
cmps
inc
push
add
mov
js
pop
xor
push
test
mov
inc
iret
fsubr
mov
push
and
repnz
into
(bad)
fadd
push
js
push
repz
sahf
and
repz
push
push
jo
fisub
dec
jmp
push
adc
xchg
je
inc
pop
movs
push
jmp
sub
hlt
(bad)
adc
mov
stos
gs
pop
xchg
mov
int
sub
popa
adc
sbb
mov
shr
push
xchg
xor
shl
jmp
dec
xor
cmp
sbb
je
sbb
(bad)
xchg
mov
std
shl
cmp
xor
xchg
aaa
sbb
inc
push
(bad)
xchg
push
mov
jo
mov
aam
adc
pop
gs
daa
xchg
push
add
xchg
inc
inc
adc
(bad)
out
sub
xchg
(bad)
cmp
xchg
push
push
and
mov
int3
fs
cwde
adc
adc
loop
in
mov
adc
cmp
xchg
(bad)
movnti
lea
push
xchg
fistp
test
gs
cmp
xchg
adc
dec
stos
adc
or
xor
scas
xchg
xor
push
xor
xchg
repz
pop
(bad)
call
sub
xchg
mov
mov
(bad)
xor
dec
xchg
inc
js
repnz
call
mov
(bad)
fwait
mov
out
sub
inc
sbb
pop
dec
xchg
shl
push
mov
adc
cmp
jbe
mov
dec
je
(bad)
retf
xchg
loopne
dec
jae
xchg
dec
aaa
push
push
mov
hlt
int3
aad
sub
rol
nop
xchg
pop
push
fs
lock
mov
lock
scas
sahf
out
mov
or
xchg
mov
or
cmp
xchg
and
pop
xchg
pop
mov
pop
xchg
sbb
popf
xchg
or
xchg
pushf
jecxz
add
stc
mov
and
jge
es
int3
jmp
dec
popa
jo
mov
or
push
int3
mov
mov
pop
ret
jge
cdq
xchg
iret
in
pop
pop
adc
retf
and
repnz
scas
xchg
mov
or
fidiv
mov
fwait
cdq
and
(bad)
push
xchg
imul
cmps
les
loopne
xchg
in
push
dec
jg
rcl
test
sbb
adc
neg
ds
es
in
push
xchg
pop
xor
shr
xchg
retf
neg
push
xchg
cmp
jne
xchg
mov
ja
xchg
xlat
in
xchg
mov
inc
fs
sbb
cmp
pop
mov
push
ja
push
fisub
loope
addr16
data16
mov
and
dec
cdq
xchg
fidivr
mov
push
xchg
sub
shl
loop
fst
mov
inc
xchg
mov
pop
cmp
mov
je
mov
sbb
xor
mov
ss
jnp
imul
icebp
push
mov
xchg
pop
pushf
aad
xchg
lahf
add
and
stos
inc
cmc
mov
fwait
push
lods
mov
pop
xchg
cli
cmp
stos
adc
rol
push
daa
cmp
mov
mov
mov
add
xchg
xor
repnz
fwait
push
push
jmp
and
xchg
jnp
imul
ss
or
xchg
inc
and
std
add
dec
jb
mov
loop
cmp
sub
cld
jp
xchg
ss
mov
shl
push
(bad)
mov
dec
xchg
ror
pop
aam
push
push
mov
xchg
mov
cwde
icebp
jge
xor
gs
xchg
jb
faddp
pusha
jno
(bad)
xchg
push
jo
test
dec
and
(bad)
sbb
mov
xchg
fnstcw
stos
fwait
xchg
pop
outs
loop
ins
push
mov
or
cmovs
xor
mov
adc
push
movs
popa
and
jae
jecxz
out
fwait
push
sub
mov
jns
rcr
add
loope
sub
xchg
jg
test
call
and
int3
fwait
xor
imul
xchg
xchg
movs
ror
dec
repnz
xchg
movs
cmp
pop
xchg
fwait
aad
mov
xchg
imul
pop
rcl
and
inc
mov
(bad)
ror
arpl
nop
jmp
mov
(bad)
fwait
loope
dec
inc
xor
pop
scas
mov
aaa
idiv
or
xchg
cs
dec
and
inc
cwde
test
push
int3
mov
fistp
int3
movs
cmp
and
mov
cmps
daa
rcl
mov
dec
push
cmps
(bad)
or
hlt
xchg
mov
xchg
add
(bad)
jns
cmps
or
xchg
jle
mov
ret
jmp
dec
pop
neg
jg
inc
retf
or
fmul
dec
xchg
sar
out
jnp
cld
xchg
push
sbb
dec
dec
inc
add
or
push
fimul
daa
xor
bound
adc
int
inc
sbb
gs
mov
lods
mov
movs
adc
xchg
mov
jmp
cmpxchg
int
push
les
aad
or
adc
cmp
aam
inc
mov
jg
fcmove
push
xchg
gs
push
retf
pop
add
adc
pop
sub
push
xchg
movs
pusha
mov
or
clc
mov
fwait
mov
mov
mov
mov
xchg
jmp
push
icebp
xchg
outs
add
retf
adc
test
ret
fadd
out
push
sub
rcl
xor
mov
mov
loop
xor
(bad)
xchg
add
and
imul
jp
xchg
and
scas
rcl
mov
xchg
adc
and
xchg
add
inc
cmp
dec
rcl
pop
loope
rcl
xchg
neg
or
jae
loop
sbb
cld
pop
inc
mov
xchg
lds
jle
popa
cmp
(bad)
pop
xor
sbb
test
sti
mov
sub
ss
imul
or
pop
inc
sub
fwait
jge
add
mov
ds
shl
add
xchg
pop
inc
xor
push
push
retf
xchg
mov
iret
pop
xchg
data16
scas
pop
mov
leave
or
pop
cmp
test
xchg
pop
adc
test
cmp
xchg
aam
add
int3
mov
push
xchg
and
or
jecxz
xchg
dec
dec
dec
push
stos
fxch
mov
mov
xchg
shr
mov
arpl
add
xchg
mov
inc
loopne
xchg
popf
iret
popa
or
sbb
int
jge
mov
in
xchg
sub
stc
repnz
mov
mov
loope
cli
mov
xchg
lock
pop
stc
out
or
jp
mov
es
xor
push
in
shl
xchg
xchg
(bad)
or
pop
sbb
loop
sbb
ret
xchg
stos
cdq
(bad)
xchg
mov
xchg
(bad)
das
xchg
push
dec
inc
push
mov
xchg
sbb
movs
mov
dec
int
mov
push
cmc
xchg
mov
adc
test
sti
mov
adc
push
push
mov
mov
mov
adc
int3
arpl
ffree
xchg
cmp
xor
mov
nop
mov
repnz
imul
leave
adc
or
das
add
mov
xchg
dec
loope
call
popf
dec
push
pop
(bad)
adc
mov
(bad)
mov
ret
stos
dec
test
dec
mov
xchg
jno
mov
les
xchg
adc
fmul
dec
xchg
mov
loop
xchg
inc
pop
cmp
rcl
push
mov
xor
outs
xchg
mov
ficomp
adc
les
push
call
xchg
movs
cld
add
out
clc
int3
mov
(bad)
xchg
lock
sbb
xchg
xor
mov
xchg
outs
mov
jmp
aaa
hlt
clc
fcomp
in
loopne
jmp
mov
ins
ds
or
xchg
cmp
xchg
retf
sbb
scas
xchg
add
ret
scas
push
iret
cmp
emms
out
dec
jl
std
sub
mov
gs
mov
jne
jo
jg
sbb
adc
and
imul
xchg
test
push
popf
ins
shl
into
int
and
adc
xchg
inc
icebp
and
cmc
jne
pusha
lahf
aas
xchg
les
call
jmp
fimul
mov
cmc
aas
jg
push
jo
xor
and
cmps
mov
arpl
xchg
ret
ss
mov
gs
sbb
shr
xchg
add
cmp
xchg
jecxz
es
sub
xchg
xchg
int3
sbb
out
(bad)
cmp
sti
cmp
fcmovu
push
adc
fwait
imul
lea
adc
nop
and
xchg
xor
mov
adc
jno
xchg
popa
outs
daa
jae
xchg
dec
dec
mov
lea
fs
push
xchg
push
inc
in
xchg
repnz
or
sbb
jle
xchg
add
test
adc
je
xor
(bad)
retf
jl
adc
adc
push
xchg
mov
dec
fwait
add
dec
and
hlt
inc
(bad)
mov
sahf
aam
jb
pushf
xchg
shl
cwde
iret
mov
out
pop
loope
xchg
push
dec
lock
sahf
mov
jl
loope
clc
ss
test
jp
es
ficom
mul
loop
pop
or
jle
inc
push
xor
push
sbb
and
fld
jmp
mov
stc
push
add
in
jg
adc
outs
xchg
jb
sub
test
in
inc
and
jg
xchg
mov
je
repz
sub
int
retw
daa
xchg
cmp
or
xor
mov
(bad)
jge
jmp
pop
sbb
call
push
out
jae
cwde
xchg
xchg
movntps
call
and
xchg
inc
and
dec
repz
xchg
movs
mov
repnz
push
xchg
push
or
js
xchg
adc
icebp
dec
mov
push
mov
adc
imul
push
mov
jae
pop
sbb
push
imul
stc
adc
xor
sub
stos
xchg
inc
in
ret
mov
mov
cmp
xor
pusha
adc
(bad)
xchg
ror
dec
repnz
jno
(bad)
mov
push
lods
jns
jb
adc
mov
mov
cwde
mov
xlat
jnp
cmp
sub
pop
(bad)
lahf
sti
ins
mov
int
xchg
adc
push
or
xchg
fcom
imul
pop
fwait
xchg
xchg
mov
lods
scas
lahf
cld
lods
mov
jb
call
push
xchg
sbb
out
bound
cdq
cmp
cwde
sahf
pop
add
dec
repnz
mov
mov
(bad)
sahf
dec
je
nop
imul
(bad)
fist
les
inc
call
xchg
inc
or
xchg
jnp
or
mov
daa
xchg
cdq
and
xchg
jne
addr16
push
cmps
ret
mov
outs
lock
(bad)
dec
xchg
sbb
push
mov
dec
or
xchg
cs
jmp
dec
aaa
and
dec
sub
stos
xchg
mov
and
mov
push
mov
or
sbb
retf
jmp
pop
gs
loope
cwde
jns
test
push
mov
sub
xchg
sbb
sbb
push
adc
shr
push
out
cmp
sub
movs
add
cwde
(bad)
pop
stc
ror
pop
push
mov
pusha
xchg
inc
mov
pop
dec
jbe
iret
xchg
jl
fs
and
xchg
es
xor
xchg
call
test
popa
xor
xchg
cli
mov
lods
repnz
hlt
mov
ds
xchg
pop
retf
enter
and
call
fmulp
retf
mov
xchg
sbb
bound
daa
in
das
aaa
mov
int
adc
adc
ficom
cmps
adc
jle
or
movs
call
jp
cmc
jp
cmps
(bad)
xchg
cwde
add
push
push
xchg
pop
dec
pop
add
mov
add
fucomip
and
xchg
xchg
add
sub
xchg
sbb
ret
push
and
fadd
or
and
js
push
dec
je
mov
xchg
aaa
aas
xchg
ins
enter
jb
dec
mov
neg
cmovge
ss
xor
adc
sbb
xchg
sahf
or
les
idiv
xor
enter
jo
xchg
rol
xor
shr
mov
xchg
sbb
inc
(bad)
lea
jle
cwde
sbb
add
adc
add
jmp
in
dec
and
adc
loopne
and
pushf
out
xor
pop
or
nop
out
xchg
inc
or
sbb
(bad)
xchg
daa
mov
push
mov
mov
adc
bound
out
pop
lods
push
or
test
leave
xchg
sti
bound
xchg
xor
sbb
jle
rcl
rcr
in
push
and
inc
lods
and
movs
sbb
pop
xchg
ins
out
popf
bound
scas
xchg
lea
sub
imul
(bad)
rol
and
xchg
sbb
jmp
int3
dec
pop
xchg
cmp
xchg
xor
push
or
clc
sahf
xchg
loop
sbb
ins
mov
xor
jecxz
dec
bound
inc
test
call
mov
mov
sahf
fdivr
enter
in
lods
inc
imul
mov
or
shl
adc
cmp
xor
mov
pop
pop
and
clc
sub
xchg
(bad)
jo
jb
sbb
(bad)
xchg
mov
loope
popf
inc
inc
pop
xor
aas
jo
jle
popa
iret
shr
push
imul
adc
xchg
into
mov
pop
nop
fcom
xor
cmc
dec
xchg
inc
xlat
xchg
mov
pop
or
xchg
mov
inc
mov
xchg
xchg
adc
bnd
popf
xchg
aad
popa
cmp
pop
shl
call
jne
mov
push
xchg
add
or
push
push
or
pushf
cmps
xchg
(bad)
jb
sbb
jns
cmps
inc
add
sub
xor
push
dec
and
rcl
mul
sahf
xchg
(bad)
mov
cmps
fidivr
xor
adc
jmp
test
dec
fwait
jnp
les
fst
fdivp
lahf
or
lea
mov
(bad)
mov
cmovb
cmps
jecxz
mov
adc
pop
sar
xor
jbe
fmul
push
mov
fisub
dec
cld
mov
sahf
xlat
fst
jmp
sub
and
nop
es
cmp
rcl
repnz
pop
pop
outs
and
mov
xchg
pop
scas
outs
fld
test
mov
mov
mov
movs
daa
add
mov
xchg
mov
sbb
int3
sub
mov
(bad)
icebp
push
pop
and
add
cs
adc
xchg
and
cmps
je
and
xchg
push
mov
xchg
and
iret
jno
adc
dec
or
ror
mov
sub
mov
inc
daa
sar
call
mov
mov
je
inc
jl
sub
hlt
retf
data16
xchg
repnz
jne
setne
push
push
sbb
nop
push
mov
addr16
cmp
lea
shr
ins
mov
xchg
adc
push
adc
inc
jmp
sub
and
inc
jp
xchg
imul
dec
cwde
dec
mov
loope
inc
fdiv
or
xchg
pop
in
jns
lods
xchg
mov
fadd
imul
jmp
out
xchg
aaa
and
popf
out
dec
sar
xor
push
(bad)
jge
test
xchg
in
xor
int3
dec
push
mov
inc
pop
xchg
hlt
clc
inc
sbb
sahf
or
xlat
push
xchg
loopne
(bad)
int
hlt
adc
xchg
stos
add
inc
(bad)
shl
mov
mov
je
adc
sbb
shl
add
jp
push
mov
sub
rcl
jle
mov
xchg
mov
xchg
jae
call
jbe
jmp
adc
fsincos
xchg
test
adc
in
cmp
stos
sbb
xchg
inc
jns
mov
cmp
mov
mov
xchg
pop
call
mov
daa
jl
jp
ficom
sub
div
adc
in
push
lahf
call
cli
xchg
xor
adc
xchg
leave
sahf
jo
cwde
sub
scas
pop
aaa
xchg
jns
xor
adc
das
add
ss
inc
inc
lea
xchg
jns
jmp
hlt
daa
mov
(bad)
sbb
xchg
in
cmp
add
aam
gs
dec
add
sbb
cmp
sub
sub
inc
sti
xchg
and
pop
jo
loope
xchg
mov
lods
adc
xchg
scas
mov
adc
jl
aaa
xchg
shr
arpl
in
rcl
sbb
dec
mov
sahf
dec
lock
bound
aad
cmps
xchg
les
imul
dec
xchg
dec
cmp
pop
push
sbb
or
xlat
stos
jae
mov
dec
xchg
test
out
push
fwait
dec
add
push
shl
xor
bound
fdivp
adc
int
or
daa
cmps
jo
repnz
outs
cmp
scas
jmp
cmp
ins
jno
pop
or
arpl
scas
mov
xchg
xchg
out
xchg
repz
out
shl
pop
xchg
loope
jbe
adc
jns
fstp
push
(bad)
scas
xchg
mov
sub
pop
in
push
adc
shl
mov
hlt
call
lock
add
add
inc
mov
arpl
das
iret
ins
mov
sub
or
lahf
les
and
(bad)
(bad)
idiv
loope
int
jge
xor
and
xchg
outs
push
dec
std
fldl2e
xchg
xchg
lds
fs
cmp
popf
jae
repz
(bad)
jns
ror
sub
sbb
out
sti
and
mov
dec
jb
xchg
xchg
neg
push
lahf
out
mov
and
adc
retf
pop
xchg
xchg
add
sbb
cmps
out
and
aas
xchg
aam
pop
xchg
cmp
call
xchg
jno
xor
mov
cli
dec
pop
mov
xchg
mov
mov
add
iret
hlt
sub
mov
shr
sbb
jmp
cmps
or
xchg
mov
mov
inc
in
push
aaa
xchg
je
in
push
aad
or
xor
or
xchg
call
call
psubusb
xchg
xchg
add
dec
test
fist
inc
sub
mov
mov
inc
or
jbe
jns
add
jecxz
cmc
mov
inc
xchg
gs
movs
scas
cmps
inc
xchg
fwait
arpl
fisub
lods
pop
xchg
into
xchg
je
push
mov
adc
test
(bad)
mov
pop
iret
es
push
hlt
cmc
xchg
clc
adc
sub
xor
aam
xor
(bad)
imul
pop
xchg
jmp
outs
das
mov
js
mov
inc
into
retf
mov
arpl
popa
add
add
mov
xchg
ret
fdivr
or
retf
inc
call
xchg
add
ret
arpl
popa
imul
aad
fwait
mov
mov
adc
xchg
pop
sub
sar
cmc
movs
(bad)
repnz
in
imul
mov
in
mov
in
or
and
sub
xchg
dec
(bad)
ror
adc
call
jle
and
xor
inc
mov
(bad)
shr
xchg
repnz
push
(bad)
fst
div
shl
mul
mov
popa
icebp
xchg
push
adc
in
mov
loopne
aam
pop
jl
ds
xchg
xor
enter
mov
shl
pop
test
mov
jmp
adc
push
dec
mov
dec
fcomp
mov
pop
pusha
or
fisttp
xchg
stos
hlt
in
or
inc
movs
xchg
xor
es
mov
mov
shl
add
xlat
xchg
sbb
ret
mov
psubsb
mov
mov
jns
xchg
daa
je
in
cmp
pop
xor
and
aam
cli
in
add
xchg
xchg
cmp
outs
xlat
movs
cmp
jae
inc
cdq
dec
sbb
sbb
ret
test
imul
dec
arpl
or
jg
xchg
cmp
xchg
and
repnz
jmp
lods
mov
outs
sbb
add
mov
adc
fstp
xchg
xor
ror
pop
fwait
inc
icebp
inc
mov
push
(bad)
pop
test
stos
out
rcl
push
int
fwait
xchg
ins
sub
addr16
repnz
adc
jl
pop
or
nop
xchg
mov
mov
inc
rcr
cs
sub
dec
mov
cmc
mov
into
and
xchg
das
stos
mov
cmp
scas
and
add
xchg
xchg
mov
stc
adc
fcom
call
dec
push
pop
and
loope
xor
ja
xchg
inc
icebp
fidivr
fwait
sbb
loop
repnz
fld
repz
cmp
jns
test
(bad)
sub
call
js
fwait
mov
adc
jl
popf
push
call
lea
xchg
sbb
ins
(bad)
mov
xchg
clc
daa
xor
mov
sbb
nop
js
xchg
mov
mov
adc
int3
mov
jp
js
js
push
cmps
loopne
les
push
ja
mov
arpl
or
xchg
stos
xor
pop
mov
pop
into
xchg
popa
aaa
(bad)
rol
add
ja
pop
cwde
cs
mov
sub
mov
je
idiv
aas
mov
push
scas
and
inc
xchg
dec
push
push
xchg
mov
or
and
xchg
es
scas
sub
cwde
cli
cdq
int
lock
inc
cmps
mov
add
mov
add
add
xchg
(bad)
or
cmp
jl
test
ss
push
mov
jns
les
cs
and
mov
xchg
or
cmp
int3
add
push
sbb
dec
add
retf
jmp
jp
pop
sbb
add
xchg
mov
les
jp
sbb
cmp
xchg
sub
test
or
push
std
xchg
push
fisubr
aad
scas
xchg
adc
pop
aaa
push
lods
mov
push
dec
ds
pop
mov
scas
movs
outs
out
push
ficom
xchg
mov
scas
xchg
pop
in
add
call
sbb
cld
test
jmp
lahf
xchg
popf
mov
rcl
pop
sbb
repz
xchg
or
in
mov
out
xchg
lods
loop
daa
dec
int
mov
and
xchg
dec
xchg
lods
int3
or
cmp
mov
push
xchg
clc
lods
jne
sar
or
adc
adc
adc
fimul
xchg
xchg
(bad)
mov
je
sub
adc
ror
adc
js
xchg
add
cmp
jno
xchg
dec
mov
mov
mov
lea
xchg
cwde
(bad)
daa
ficomp
xchg
sub
mov
push
add
cmp
enter
lds
ds
xchg
mov
mov
popf
adc
mov
xchg
(bad)
dec
leave
cmps
ret
es
cli
push
push
(bad)
int3
ja
lock
jge
pop
stos
xchg
fs
sub
pop
add
xchg
xor
and
scas
pop
addr16
mov
xchg
jge
jb
aam
in
xchg
aas
movs
add
cld
xchg
push
or
cmc
mov
pop
shl
sbb
inc
es
adc
add
rcl
fsubr
hlt
push
inc
push
jge
mov
dec
aad
ins
mov
xchg
sub
add
mov
inc
cmp
xor
xchg
js
pop
adc
loop
or
fcom
mov
in
adc
(bad)
jae
test
and
cld
js
xchg
and
ds
and
aad
add
fmul
arpl
sbb
leave
cs
pop
and
fst
iret
lahf
xchg
add
xchg
std
je
in
or
dec
xor
fstp
xchg
sub
das
sahf
cwde
mov
mov
adc
jp
stos
ss
dec
add
pop
int
sahf
xchg
enter
sbb
int
aam
call
mov
nop
xchg
lds
jnp
push
inc
xchg
into
loope
jp
cld
lahf
popf
xchg
push
xchg
add
xchg
xchg
loope
jmp
xchg
je
loopne
xchg
mov
imul
nop
in
xchg
xor
inc
jp
push
sub
mov
mov
sub
mov
dec
movs
xlat
cwde
mov
outs
xchg
sub
ins
out
xchg
mov
and
pop
or
(bad)
xchg
outs
outs
loop
jmp
je
(bad)
mov
aam
cdq
and
ret
mov
shr
xor
mov
rcl
fisttp
in
sbb
enter
ins
adc
out
int3
adc
repz
test
out
mov
fwait
mov
xchg
lods
stc
and
mov
push
xor
mov
aam
cmc
movs
fs
out
movs
fwait
and
out
test
mov
pop
mov
or
out
xchg
jmp
ret
xchg
dec
imul
inc
aas
sbb
fld
test
js
xchg
jb
fisubr
cs
shl
xchg
pusha
sub
sar
leave
bound
push
sub
dec
aam
(bad)
push
ss
and
mov
xchg
icebp
dec
sub
test
xchg
sbb
add
movs
mov
mov
lea
mov
loop
repz
jne
cmp
push
push
adc
syscall
mov
fwait
lahf
inc
sahf
sub
adc
out
hlt
xchg
pop
mov
sbb
jmp
xchg
inc
loop
mov
lea
nop
mov
xchg
pop
imul
push
fs
jp
jbe
xchg
pusha
ins
fdivr
xchg
push
cmp
out
bound
(bad)
loop
ins
je
push
lds
sub
(bad)
xchg
xchg
nop
mov
push
sub
retf
test
popa
adc
mov
loopne
sub
push
nop
test
xchg
add
stos
xchg
inc
pop
or
dec
xor
or
jne
gs
sbb
or
adc
stc
jl
jp
pmulhw
sbb
dec
and
jmp
xchg
dec
jo
push
and
mov
mov
xor
xor
cmp
in
and
sbb
xchg
popf
aas
mov
push
rcl
push
adc
xchg
or
xlat
xchg
cmp
in
retf
mov
mov
int3
les
lea
pop
outs
or
xchg
sub
cmps
in
sub
or
and
jg
sub
repz
je
xchg
inc
call
loop
xchg
cmp
add
out
(bad)
bound
frstor
loopne
adc
pop
ss
call
dec
cmp
outs
test
leave
test
xchg
pop
in
test
xchg
xchg
add
jmp
(bad)
imul
mov
mov
xchg
hlt
fdiv
jl
jne
stos
xchg
(bad)
xchg
sbb
push
cmps
scas
sub
xchg
pop
or
loopne
scas
mov
mov
mov
mov
add
push
xchg
or
push
es
xchg
test
xchg
sub
nop
cwde
xchg
inc
jge
dec
jns
daa
xchg
sbb
cmp
add
shl
in
cld
fsubp
ins
push
mov
inc
je
xchg
cmc
xchg
sti
jno
popa
(bad)
in
pop
cmp
test
pop
xlat
mov
repz
xchg
das
inc
addr16
jecxz
mov
in
std
jmp
rcr
xor
mov
repnz
inc
sar
add
stos
sbb
xchg
add
push
test
in
arpl
lock
aaa
mov
cmps
dec
cmp
pop
xchg
jmp
jns
cmc
xchg
cmps
enter
xchg
dec
jno
test
jp
ja
adc
test
fisttp
es
lods
dec
in
jp
ret
cmps
cmp
or
add
pop
not
pop
jae
xchg
or
or
stc
arpl
xchg
sbb
mov
xor
mov
cmp
push
mov
xchg
test
in
ja
fsubr
or
ret
stos
lods
inc
mov
lods
push
mov
xchg
add
add
ja
pop
out
push
fwait
test
movs
cmp
and
jl
xchg
popa
hlt
push
sti
push
imul
xchg
fisttp
inc
lods
sub
add
pop
xor
mov
adc
xor
arpl
vaddsubps
xchg
push
aam
sub
fmul
xchg
add
xchg
push
add
xchg
aam
xlat
fs
sbb
sub
xor
fld
jl
xchg
fcom
out
(bad)
outs
es
mov
pop
adc
icebp
imul
xchg
je
xchg
jp
pop
int
repz
mov
dec
mov
xor
into
pusha
cmp
xchg
mov
cmp
cs
repnz
lea
pop
xor
loopne
iret
int3
add
ret
in
nop
sub
xchg
dec
jne
mov
xchg
arpl
inc
js
and
sbb
xchg
cwde
fwait
jp
push
pop
sub
jl
xchg
shl
xlat
xchg
dec
ret
cmp
dec
xchg
aas
mov
iret
daa
push
fwait
test
or
or
mov
or
pop
push
call
jp
mov
push
call
cs
jg
push
xchg
or
xor
xchg
mov
cmp
ror
mov
mov
jae
and
(bad)
hlt
call
xor
fwait
dec
xchg
mov
movs
mov
ja
(bad)
pop
test
ss
gs
push
inc
xchg
jp
push
fldcw
push
int
cmps
aaa
shl
scas
xchg
ret
cmc
cmp
xchg
mov
adc
add
js
sbb
imul
jb
mov
test
fimul
sub
test
mov
cmp
and
repnz
xchg
ficomp
mov
hlt
sbb
xchg
in
dec
pop
enter
adc
retf
mov
mov
cmp
aaa
xchg
das
popf
mov
cmp
xchg
outs
in
je
cld
shr
cmp
cmps
in
jp
xchg
mov
or
loopne
rcr
mov
pop
stc
xchg
mov
pop
js
mov
mov
outs
jl
sub
daa
int
scas
pusha
add
push
mov
cdq
dec
xchg
cmps
inc
test
and
adc
mov
xchg
xor
sti
mov
cmps
rcl
aaa
fisubr
push
add
(bad)
js
(bad)
mov
(bad)
lods
or
xchg
ror
popf
into
jo
pop
xchg
or
xchg
xchg
(bad)
addr16
sbb
movs
jle
xchg
jno
clc
ret
loope
cmp
xchg
mov
es
pop
mov
leave
out
lahf
dec
mov
dec
inc
xchg
jo
and
fisubr
jo
push
xchg
daa
mov
mov
push
mov
pop
jge
adc
rol
es
hlt
adc
data16
xchg
fild
xchg
cmp
jl
sbb
addr16
(bad)
(bad)
jge
pop
push
xchg
fwait
dec
dec
fisub
mov
in
xor
mov
addr16
xchg
push
or
rcl
fstp
xchg
fdiv
mov
outs
and
mov
xor
in
loope
jecxz
data16
ret
jb
pop
or
(bad)
push
test
add
xchg
xchg
xor
jmp
pop
xchg
cli
mov
fmul
sahf
push
loope
pop
xchg
mov
je
retf
and
xlat
dec
dec
ficomp
mov
xchg
outs
test
push
dec
xchg
cdq
mov
pushf
aas
clc
pop
scas
cmp
push
xchg
xlat
loope
int
cdq
mov
xchg
and
cwde
mov
sub
adc
movs
add
test
xor
loop
ret
cmp
rcr
xchg
neg
push
xlat
test
imul
mov
ret
xor
or
loop
in
xchg
inc
dec
pop
ret
mov
ret
outs
xchg
lods
xor
shl
fistp
je
xchg
dec
loop
scas
in
inc
fnsave
cmp
mov
jns
aam
add
sbb
jle
mov
or
lea
js
mov
das
mov
mov
mov
pop
out
xchg
imul
ret
xchg
fwait
in
pop
daa
push
add
sbb
xchg
mov
push
ds
fwait
sbb
and
je
dec
es
dec
ret
mov
cmp
int
pushf
xchg
cmp
sti
or
xchg
jmp
xor
outs
pop
mov
xchg
sub
dec
xchg
mov
pushf
cmp
mov
cs
sbb
psraw
xchg
xchg
repz
stc
cmp
movs
xor
iret
or
cwde
mov
dec
cmp
fadd
pop
rcr
xchg
sbb
call
dec
iret
lock
sbb
or
rcl
(bad)
hlt
pop
or
sbb
das
xchg
sbb
pop
add
pop
jl
xchg
int
adc
or
xor
jmp
dec
(bad)
cdq
inc
ret
aas
jbe
mov
jb
xchg
xor
rcl
int3
inc
mov
into
mov
or
sbb
ret
test
adc
rol
sbb
dec
mov
jmp
push
loope
jmp
pushf
daa
xchg
iret
jge
(bad)
dec
js
rcl
mov
scas
pop
dec
cmps
cmp
xchg
push
and
adc
xchg
or
int3
popa
mov
lods
cmp
add
jle
xchg
pop
jg
(bad)
mov
xchg
sbb
jmp
fmul
ins
xchg
arpl
adc
xchg
retf
jne
add
cld
jle
xchg
push
lods
and
jnp
daa
std
fwait
push
lock
push
hlt
stos
adc
cmp
push
push
and
jno
in
inc
cwde
(bad)
call
xchg
aad
mov
jnp
add
aaa
dec
ret
mov
or
mul
call
mov
xchg
bound
outs
mov
stos
jge
mov
xchg
in
loop
loopne
clc
add
ds
sbb
fstp
mov
sub
jne
scas
test
call
lock
shl
jg
xchg
popf
push
add
xchg
movs
je
cmp
ret
xchg
fld
xor
mov
inc
add
movs
xchg
sbb
inc
adc
push
sahf
(bad)
mov
adc
std
outs
pushf
les
xchg
jno
dec
stos
and
cli
push
lds
mov
pushf
xchg
stc
(bad)
add
dec
mov
pop
mov
jmp
scas
add
xchg
mov
and
mov
dec
sub
scas
test
mov
fisub
push
ja
jl
adc
jecxz
xchg
jnp
lea
mov
mov
xchg
or
lods
cmp
stos
and
dec
lahf
test
les
xchg
mov
ins
es
out
shl
sub
pop
xor
sub
and
sub
not
pop
mov
fsubr
xchg
test
aam
xchg
fldcw
pushf
jecxz
lds
mov
or
xchg
and
and
xchg
repnz
sub
in
push
je
popf
mov
inc
xchg
and
mov
aad
test
pop
adc
xchg
pop
leave
mov
mov
push
cmc
imul
jo
outs
xchg
aas
repnz
movs
mov
stc
cwde
cmp
jl
nop
xchg
push
loopne
sbb
cmp
inc
pop
add
xor
mov
sbb
call
push
sub
inc
sbb
call
pushf
(bad)
mov
xchg
and
fldenv
cs
sbb
jge
mov
pop
add
push
xchg
or
loope
sbb
pop
bound
sahf
repz
fwait
lahf
call
imul
mov
xlat
mov
mov
fisttp
jecxz
bound
shr
ins
xchg
je
mov
cmps
lods
js
xchg
mov
sbb
lock
or
jecxz
mov
(bad)
hlt
pop
xor
add
or
xchg
mov
add
xchg
xchg
jno
es
aad
dec
arpl
xchg
sbb
mul
xor
or
xor
je
popa
jmp
fwait
scas
push
iret
fcmovnbe
mov
and
fs
xchg
imul
jno
sub
ficomp
test
dec
add
aad
stc
mov
push
addr16
mov
pop
push
jne
outs
sub
sahf
inc
xchg
xor
xchg
xor
in
or
adc
xor
repnz
rcl
or
fldenv
add
pop
sub
push
ja
sbb
pop
into
mov
adc
or
mov
hlt
or
mov
xchg
sub
adc
xchg
adc
dec
cld
sub
aas
cmps
mov
shl
xchg
std
loop
mov
data16
jp
xchg
in
dec
pop
nop
jae
cmps
xchg
or
out
adc
(bad)
aam
lea
test
mov
adc
push
retf
adc
xchg
fsubr
fcmovu
xchg
out
mov
lds
cmp
pop
out
test
jmp
sub
xchg
add
mov
lods
add
jp
std
push
adc
fadd
jecxz
sub
xchg
lods
into
rcl
jb
xor
fs
adc
sub
xchg
adc
cmp
pusha
add
pushf
(bad)
hlt
ins
add
add
sbb
xchg
movs
js
in
iret
mov
xchg
mov
cld
push
test
pusha
jle
xchg
call
or
mov
mov
push
popa
xchg
test
fistp
in
mov
test
xchg
jns
imul
adc
add
repz
xchg
mov
cmp
jge
add
loop
test
test
jp
mov
xchg
stos
mov
add
add
push
sahf
in
mov
push
enter
inc
sets
mov
xchg
push
call
inc
fst
push
mov
dec
sbb
mov
xor
and
add
fbstp
test
mov
stos
aad
push
cwde
jo
jno
sbb
and
repnz
sbb
xchg
lahf
or
stos
xchg
neg
push
(bad)
xchg
xlat
scas
movs
dec
cmc
add
xchg
addr16
call
push
xchg
xchg
cmp
inc
xchg
(bad)
addr16
xor
sub
xchg
cmc
ins
hlt
or
mov
je
pusha
xchg
aad
dec
dec
mov
pop
xchg
jbe
mov
push
(bad)
adc
xor
stc
xchg
sbb
(bad)
call
cmp
pop
dec
pop
lea
addr16
into
jmp
ja
xchg
das
fdecstp
sbb
mov
adc
dec
dec
add
nop
cmp
bound
ret
push
mov
pop
adc
lods
push
xlat
pop
jmp
xor
inc
or
fdivr
xchg
xchg
cmps
mov
enter
daa
hlt
pop
js
push
ins
int3
lahf
stos
mov
sbb
iret
dec
scas
iret
aaa
and
xchg
xchg
mov
aas
mov
adc
inc
sub
xchg
inc
ins
sbb
repz
aas
adc
bound
std
dec
jmp
iret
jne
stos
add
jnp
xor
gs
bound
or
pushw
int3
imul
ds
test
inc
aad
xchg
and
adc
js
xchg
sub
jmp
ins
scas
adc
rcl
out
xchg
jl
cmps
movs
add
inc
push
jecxz
sahf
xchg
or
imul
sub
js
mov
icebp
pop
outs
aam
adc
xchg
sbb
xchg
push
or
mov
into
fwait
or
fnstsw
popa
adc
xchg
cwde
xchg
aas
inc
jns
mov
sbb
dec
cmc
imul
pop
(bad)
xchg
fcomip
jne
dec
sbb
sub
clc
inc
retf
pop
div
scas
(bad)
(bad)
push
or
repz
icebp
jecxz
mov
ins
mov
mov
xchg
(bad)
and
sub
dec
mov
mov
pop
xchg
fwait
jecxz
enter
push
inc
sub
xchg
arpl
adc
mov
xchg
stos
ja
pop
mov
fwait
rcl
lods
and
pusha
mov
and
push
mov
rcr
call
ins
(bad)
push
xchg
adc
movq
movs
test
pop
ror
inc
rcr
and
clc
push
popf
xor
inc
mov
xchg
dec
outs
pop
into
movs
int
sti
xchg
and
add
pop
adc
sub
jb
movs
pop
popa
ins
out
mov
xchg
mov
aas
addr16
xchg
mov
int
dec
xchg
movs
push
xchg
enter
stos
pop
xchg
sub
mov
mov
movs
mov
pop
hlt
cdq
jecxz
cmps
pop
xchg
fistp
adc
jb
pop
sub
xchg
xor
out
clc
ret
in
dec
xchg
xchg
add
or
shl
pop
xor
(bad)
pop
or
outs
fidivr
mov
push
mov
neg
jbe
mov
jae
or
adc
sub
sub
cld
and
hlt
jl
xchg
out
push
gs
movs
dec
sub
sub
xchg
out
aas
mov
pop
jg
xchg
and
cmp
mov
xchg
xchg
mov
jge
adc
mov
dec
push
xlat
or
jmp
add
sbb
enter
cmp
cmp
push
movs
jle
or
cmp
pusha
gs
lea
nop
loop
pop
mov
cmc
test
jecxz
inc
xor
xchg
in
stc
and
je
sbb
int
or
add
mov
jb
retf
mov
mov
pop
push
in
ins
movs
mov
xchg
xchg
faddp
mov
xchg
xlat
jno
and
cmp
ja
pop
xor
aaa
sub
in
push
xchg
pop
add
xchg
pop
jg
push
push
add
xchg
test
or
xchg
sub
push
or
inc
leave
test
or
xchg
jno
xchg
push
add
jge
xchg
jns
cmp
and
ror
imul
in
xchg
leave
adc
loop
cli
ins
retf
xchg
pusha
xor
jo
loope
mov
jecxz
mov
xchg
iret
gs
adc
clc
mov
test
push
add
mov
cmc
xchg
sbb
push
pop
in
xchg
mov
into
rcl
xchg
mov
js
leave
xchg
xchg
aad
xor
mov
sub
inc
frstor
fadd
pusha
repnz
push
pop
outs
adc
adc
or
and
xchg
sbb
xchg
jns
mov
repnz
adc
cmp
xor
xchg
std
dec
jecxz
inc
cmc
cmp
sbb
jmp
push
pop
scas
sub
xchg
adc
les
mov
jo
jne
outs
mov
mov
adc
push
inc
test
push
out
lods
inc
pop
loop
dec
pop
jbe
mov
dec
pop
pop
jg
mov
push
cli
sub
dec
cmp
jge
xchg
push
cwde
arpl
xlat
mov
xchg
lea
xchg
mov
jnp
ficom
add
sbb
adc
ficom
mov
xchg
xchg
lea
sbb
pusha
mov
adc
or
xchg
popa
fisub
lods
or
add
arpl
xchg
pop
imul
ud0
mov
inc
loopne
push
dec
dec
inc
ja
popf
add
xor
aaa
push
enter
mov
jno
mov
mov
sbb
pop
xchg
push
scas
xchg
dec
or
sbb
xor
fisttp
mov
mov
push
adc
cmp
ret
rcr
movs
fstp
jl
imul
enter
mov
and
(bad)
ins
inc
aad
xchg
bound
xchg
xchg
jl
aad
cmps
xchg
push
std
out
stc
fadd
add
adc
fs
clc
push
mov
dec
mov
sbb
mov
repnz
fcom
xchg
cs
(bad)
stc
dec
cmp
sub
jno
clc
fistp
jae
jmp
mov
or
int
xchg
xchg
and
hlt
dec
pusha
jbe
shl
xchg
adc
test
call
(bad)
hlt
pop
and
push
xchg
(bad)
xchg
xchg
adc
and
or
arpl
dec
or
or
xchg
loop
xchg
in
retf
xchg
or
(bad)
stc
adc
jns
xor
adc
in
aam
das
xchg
jo
adc
pop
lods
xchg
gs
fmul
ja
dec
mov
xchg
mov
les
call
xor
jno
aas
xchg
(bad)
xchg
or
movsx
add
pop
xchg
push
jge
or
or
xchg
inc
and
add
push
ret
mov
sub
rcl
nop
and
xchg
or
daa
lahf
out
pop
xor
push
adc
push
pop
push
dec
mov
inc
(bad)
dec
or
xchg
in
rol
push
popf
mov
adc
push
xchg
xor
xchg
mov
xchg
pop
xchg
and
cmp
lock
sub
jno
cwde
push
mov
loope
lahf
ret
xchg
pop
jmp
dec
cmc
and
imul
setnp
xor
retf
jns
add
xchg
inc
pop
iret
scas
push
rcr
in
xchg
cmc
stos
mov
or
repnz
sbb
dec
mov
jo
sub
test
out
lock
(bad)
cmp
add
cmps
sbb
dec
jg
mov
and
jle
sub
or
into
sbb
xor
lahf
jg
cmp
xchg
xor
fadd
scas
mov
shr
cmc
or
pop
adc
xchg
pop
aad
push
retf
mov
cmp
xchg
adc
mov
je
xlat
imul
cmc
inc
js
xchg
pop
ror
(bad)
fwait
in
adc
jno
add
aad
push
mov
dec
fcmovbe
in
push
mov
xchg
pop
jmp
xchg
fild
xor
pop
xchg
dec
call
cdq
adc
retf
xlat
rcr
sbb
repz
arpl
xchg
and
pop
add
mov
cmps
add
or
sti
jmp
loopne
inc
xchg
lods
mov
inc
xchg
stos
cmp
push
xchg
add
not
stc
sub
repz
inc
pop
pop
xchg
xchg
sub
jle
test
mov
push
xchg
xor
xchg
sbb
jl
jbe
or
xchg
(bad)
pop
jge
cmp
test
cmps
mov
push
movs
xchg
aaa
cs
cmc
xor
in
mov
in
and
add
push
xchg
ja
mov
rcr
(bad)
in
test
add
xchg
mov
lock
sbb
leave
out
aam
or
sub
jp
jmp
push
or
shl
add
inc
movs
push
push
mov
in
mov
(bad)
and
xor
xchg
mov
cwde
xchg
dec
ret
adc
pop
ja
xchg
add
fs
pop
or
adc
push
pop
xchg
frstor
adc
popf
mov
sbb
xor
mov
mov
jne
inc
xchg
push
adc
data16
into
ins
xchg
push
cmc
jg
test
jnp
xchg
ss
sub
shr
adc
lock
pop
fimul
movs
mov
jp
mov
or
fist
jmp
and
jecxz
xchg
fisttp
mov
push
xchg
cdq
nop
jle
into
inc
sbb
fidiv
popf
dec
ss
or
push
sub
or
xchg
nop
aam
int3
pop
xchg
(bad)
push
out
fs
xchg
arpl
and
mov
mov
jp
mov
sub
call
bound
xchg
out
dec
mov
xchg
mov
test
xchg
cmc
ja
aaa
cmp
push
iret
repz
mov
lahf
and
or
xchg
imul
mov
mov
sbb
fs
bnd
sbb
clc
mov
repz
xchg
adc
sbb
inc
lods
ds
das
jb
jne
mov
imul
sbb
repnz
in
inc
js
cmp
retf
int3
mov
jge
retf
lea
out
xchg
push
js
sbb
xchg
pushf
xchg
jb
call
dec
mov
mov
retf
aaa
jecxz
add
imul
unpcklps
or
cld
in
outs
lds
fidivr
jle
push
hlt
sub
adc
ret
sbb
ja
call
aas
fwait
jnp
adc
fwait
pop
je
xchg
cld
pop
xchg
into
xchg
movaps
jle
push
jae
test
mov
xchg
call
pop
fcomi
xchg
xchg
dec
aad
cli
ins
push
xchg
mov
lods
and
das
mov
ds
cs
inc
mov
repz
xchg
imul
ret
cwde
push
xchg
xchg
mov
popa
cmc
pushf
mov
sar
or
or
movs
fldenv
imul
fst
int3
or
lds
icebp
dec
cli
(bad)
sub
popf
pop
out
dec
mov
and
xor
dec
jae
mov
mov
push
in
test
ret
or
pop
icebp
inc
sub
push
bound
leave
mov
shr
les
adc
adc
sbb
inc
mov
dec
ja
je
mov
es
mov
add
(bad)
xchg
sbb
in
sbb
adc
xchg
xchg
pop
adc
popf
cli
sbb
xchg
adc
pop
fwait
inc
mov
push
dec
loop
cdq
in
neg
aam
sbb
mov
jae
cmp
xor
in
xchg
xchg
pusha
mov
push
ins
pop
rol
fistp
pop
clc
int3
jnp
mov
loope
hlt
jb
aam
sub
cli
lahf
add
sbb
xchg
push
mov
mov
inc
arpl
or
or
stos
adc
dec
xchg
rcr
test
inc
cwde
mov
sub
mov
xor
mov
xchg
jp
or
repz
pop
int3
xchg
cmps
stos
adc
loope
xchg
rcr
pop
xchg
aaa
shr
leave
retf
mov
push
or
rol
cpuid
dec
cmp
add
cmc
mov
repnz
mov
pushf
popa
repz
sbb
push
adc
add
cld
es
push
sbb
(bad)
nop
xchg
or
jmp
xchg
inc
sub
cmp
pushf
retf
or
imul
(bad)
lods
xchg
add
mov
adc
inc
test
leave
std
mov
pop
xchg
(bad)
rol
lea
jle
xchg
jg
ja
lock
push
jl
lahf
jns
jmp
push
pop
loop
ins
xchg
inc
pop
jmp
rep
pusha
xchg
adc
dec
mov
fdivp
xchg
rcl
popa
daa
sub
(bad)
and
pop
ret
push
xchg
in
or
add
jecxz
dec
xchg
and
cmc
test
dec
pop
std
inc
xchg
dec
aas
push
imul
cmps
mov
sub
xor
adc
les
lock
adc
or
xchg
mov
push
push
iret
cmp
inc
(bad)
sbb
imul
idiv
daa
in
cli
(bad)
iret
mov
mov
fild
idiv
xchg
or
lods
xchg
scas
mov
pop
inc
fild
sbb
adc
cdq
mov
push
addr16
je
lahf
sbb
ds
mov
mov
xchg
lock
adc
mov
ins
mov
aad
add
or
popf
xchg
or
mov
fwait
sahf
shr
in
stos
xor
push
xor
and
inc
pop
or
imul
push
cmp
inc
outs
and
rcl
sbb
addr16
xchg
push
movs
and
mov
outs
jbe
push
xchg
fstp
mov
push
or
es
aad
or
jle
xchg
mov
mov
xchg
pushf
es
adc
cmp
xchg
xor
stos
ret
das
and
nop
xchg
popa
sub
(bad)
not
sti
xchg
jmp
mov
sub
xchg
xor
sub
loopne
jo
cmp
add
fisubr
dec
cwde
xchg
pop
sbb
nop
pushf
test
gs
sahf
sar
push
and
(bad)
adc
fisubr
xchg
in
(bad)
std
jecxz
xchg
lods
mov
mov
pop
mov
mov
pop
dec
push
ins
sub
fst
xor
outs
js
xchg
mov
and
aaa
fstp
out
cmp
xlat
or
and
xchg
es
xchg
shr
aad
xchg
dec
xchg
cmp
push
pop
loopne
xchg
pop
inc
mov
or
dec
out
fwait
popa
cmp
(bad)
push
std
pushf
fiadd
rcl
out
add
xor
xor
cld
lods
lods
sub
fwait
addr16
and
repz
push
fdiv
lahf
sahf
xchg
xor
pop
xchg
xchg
cmp
pusha
mov
mov
pop
xlat
shr
xchg
cmp
or
jnp
mov
imul
(bad)
idiv
les
ins
lods
in
push
jmp
loope
push
repz
lea
sub
xchg
xchg
inc
add
lds
stos
mov
(bad)
stos
xor
xor
test
add
imul
jns
jecxz
hlt
lahf
repz
or
mov
or
into
ret
pop
mov
test
add
lahf
push
or
xchg
xchg
jmp
push
xchg
xchg
cdq
mov
call
arpl
sub
fst
call
jae
sti
mov
cmp
xchg
(bad)
cmc
inc
cdq
popa
xchg
fdivr
movs
jl
jmp
into
(bad)
iret
push
rcl
std
mov
fwait
ja
je
clc
movs
fimul
adc
sub
jmp
cmp
sbb
cs
sbb
xchg
test
data16
ss
push
shl
inc
int
xor
pop
popf
ret
in
jbe
inc
lahf
xchg
daa
aam
mov
xchg
pop
or
pusha
cmp
out
inc
dec
mov
daa
test
push
lds
stos
xchg
push
add
fiadd
sub
sub
or
mov
shl
cmp
sub
and
or
shl
push
jecxz
sahf
mov
scas
stos
leave
out
(bad)
mov
xchg
scas
push
inc
stc
push
and
xchg
xchg
jae
or
adc
js
retf
and
outs
inc
iret
and
dec
xchg
in
xchg
lock
std
and
jns
xchg
dec
sub
inc
mov
scas
jb
sahf
ret
(bad)
fistp
xchg
sbb
dec
xor
call
dec
push
mov
arpl
je
cwde
out
fwait
leave
inc
ret
inc
mov
add
fst
sbb
mov
xor
mov
mov
inc
sub
fidivr
xchg
ss
adc
xchg
mov
shl
and
pop
xchg
imul
adc
push
xchg
cmp
xchg
or
cs
arpl
xchg
push
sar
stos
in
push
ret
mov
xchg
in
push
push
add
movs
xchg
add
lock
into
xor
cmp
out
dec
enter
inc
js
mov
add
or
mov
(bad)
test
mov
call
repz
xchg
mov
aas
int
les
jnp
mov
and
cmp
adc
mov
hlt
fwait
inc
cmp
adc
jne
mov
push
push
mov
inc
and
icebp
lea
xchg
loope
pop
xor
pxor
xlat
or
cmp
xchg
xchg
call
or
ss
xchg
rcr
adc
scas
iret
dec
xchg
jnp
js
sub
jp
and
mov
aam
shl
mov
loope
dec
sbb
sub
or
jnp
sbb
fwait
call
daa
ds
adc
test
jmp
aaa
or
popa
clc
imul
mov
dec
mov
fxch
fmul
fs
xor
mov
dec
push
or
loop
mov
fsub
arpl
xchg
out
xor
jo
cmc
add
js
xchg
add
ret
pop
sar
nop
xchg
stos
(bad)
xchg
leave
mov
cs
or
js
int
cmp
add
push
call
int
and
mov
xor
mov
lds
inc
cmp
ja
push
mov
mov
dec
sub
add
lods
jne
xchg
xchg
rcl
neg
jmp
xchg
popf
rol
adc
mov
xchg
test
shr
xchg
xor
in
(bad)
into
mov
mov
pop
adc
jmp
dec
push
ins
or
mov
cmc
adc
xchg
push
jmp
xchg
daa
es
mov
ficom
cmp
add
fsub
xchg
in
(bad)
sub
lods
xor
mov
test
and
push
mov
inc
sub
inc
add
jmp
xchg
test
mov
in
in
sbb
addr16
sbb
scas
xchg
movs
mov
(bad)
mov
add
sbb
xlat
mov
or
rol
not
fidiv
adc
jg
or
fwait
sub
pavgb
cmp
mov
int3
aam
mov
les
(bad)
fwait
or
or
mov
div
xchg
fmul
push
nop
inc
inc
lods
fwait
dec
ret
mov
gs
jno
sub
rsqrtps
xchg
jmp
loop
pop
or
lods
jo
xchg
xor
pop
mov
and
xchg
add
cld
(bad)
xchg
sub
mov
enter
lock
jl
mov
dec
push
xchg
dec
loopne
xchg
cli
scas
mov
dec
xor
jo
(bad)
lahf
cmps
xor
ds
dec
xchg
movs
sbb
push
(bad)
push
dec
mov
out
push
addr16
adc
xchg
add
or
mov
dec
int3
add
pop
(bad)
jae
push
or
xchg
neg
retf
mov
stos
mov
xor
adc
xchg
cmp
rcr
and
xchg
or
shl
(bad)
pop
or
sbb
push
imul
jns
adc
inc
mov
sbb
call
cmp
xchg
push
pop
adc
dec
xchg
mov
jns
adc
dec
xchg
pop
sub
xchg
not
adc
and
push
iret
pop
mov
stos
cmp
ret
xchg
pop
xor
fcomi
rol
in
cmps
je
fidiv
dec
inc
test
xchg
inc
cli
cmp
js
cmps
inc
jg
sub
mov
add
mov
cdq
sub
sti
jne
mov
jae
xor
inc
mov
lds
aas
bound
adc
xor
xchg
pop
sahf
cmp
out
xchg
mov
(bad)
jmp
lds
xchg
mov
lock
les
call
aaa
or
adc
xlat
adc
pop
xor
lock
xchg
(bad)
js
mov
int3
(bad)
aam
sbb
cmc
rcl
mov
lea
inc
js
mov
xchg
add
out
inc
ret
dec
push
xchg
shr
mov
cmp
dec
adc
int
enter
neg
xchg
not
jmp
jle
out
movs
xchg
iret
sub
std
xchg
mov
mov
or
stc
xor
sbb
int3
push
dec
and
mov
out
jns
xchg
mov
or
popa
js
arpl
mov
popf
xchg
mov
pop
and
lds
xor
add
retf
ret
cmp
pop
test
cdq
xchg
add
fisub
cmp
push
xchg
ret
(bad)
pop
fsubr
data16
xchg
pushf
jmp
cld
stc
xchg
(bad)
push
xlat
sbb
leave
test
test
es
xchg
cmp
ins
mov
repz
xchg
gs
xor
fwait
xchg
inc
fstp
movs
pop
push
cmp
xchg
xchg
mov
(bad)
outs
aam
jmp
xchg
jg
call
sub
dec
mov
clc
std
xchg
push
inc
xor
mov
cmps
push
scas
mov
fsubr
or
int
xlat
out
cmps
ss
scas
mov
out
idiv
cmps
cmc
bound
mov
inc
xchg
and
aas
mov
nop
aad
int3
or
xchg
mov
xor
movs
scas
cmp
pop
fisub
pop
loop
outs
xchg
(bad)
xchg
in
mov
mov
(bad)
pop
jbe
int3
xchg
xchg
fwait
jmp
fsub
mov
imul
fwait
je
(bad)
ss
in
pushf
popa
dec
xchg
sbb
into
inc
or
pop
adc
xchg
push
adc
into
lea
mov
ins
jbe
call
xor
cmp
lahf
xchg
mov
adc
mov
iret
mov
rcl
mov
push
or
push
jns
jecxz
shl
fstp
or
xchg
cmp
dec
or
sbb
sbb
sahf
add
xchg
test
bound
xchg
dec
loop
and
xchg
pop
icebp
das
aas
imul
xor
sbb
mov
lods
movs
xor
ins
push
dec
ja
and
jl
xchg
and
je
out
push
cmps
call
fwait
xchg
sbb
rol
fadd
cld
inc
push
cmp
xchg
inc
jbe
adc
iret
push
xchg
out
push
les
mov
and
scas
add
xchg
mov
adc
cmp
inc
push
ja
cmps
inc
fs
inc
lock
xchg
outs
fisttp
mov
ss
xchg
mov
push
add
jno
and
and
popf
mov
sbb
pop
push
jl
cmp
xchg
loop
js
and
outs
and
jno
mov
dec
lahf
nop
enter
or
push
fsub
nop
xchg
mov
or
popa
xchg
shl
mov
inc
lods
jo
xchg
das
out
pushf
pop
xlat
or
ins
jb
mov
jno
addr16
xchg
add
repz
push
dec
jbe
sub
mov
xchg
(bad)
xor
xchg
mov
mov
rcl
fidiv
xchg
adc
call
ja
mov
dec
lahf
retf
sub
aas
xchg
or
fsubr
sub
loope
mov
mov
fmul
sub
add
dec
sub
mov
jns
jmp
xchg
jp
(bad)
or
mov
(bad)
stos
add
xchg
xchg
in
out
bound
data16
aam
xchg
sub
push
or
test
cmp
jne
scas
fistp
into
inc
xchg
es
out
outs
stc
fwait
rcl
mov
hlt
inc
inc
and
dec
add
leave
and
lds
hlt
les
mov
add
add
push
mov
loope
aam
dec
xchg
jl
xchg
ror
jl
xchg
xchg
pop
dec
mov
adc
adc
cmp
dec
adc
push
dec
xchg
aam
fwait
push
jno
jbe
outs
and
popa
pop
xor
mov
psrlw
cmp
jl
lahf
xchg
cmps
movs
jb
cmps
arpl
add
pop
xchg
mov
xchg
inc
add
push
imul
data16
ret
frstor
pusha
fdivr
js
mov
test
lock
inc
inc
int3
popa
sub
xchg
jnp
xchg
or
leave
cld
jl
inc
(bad)
xchg
xor
sub
in
xlat
in
pop
mov
jno
pop
xor
je
sbb
outs
xchg
ret
dec
arpl
or
(bad)
mov
jne
fld
loopne
fld
pop
xchg
gs
sti
aad
xor
repnz
cwde
nop
shr
test
sahf
inc
gs
sbb
mov
fst
sbb
pop
lahf
outs
push
lds
adc
lock
adc
dec
pop
push
je
dec
ror
mov
dec
(bad)
aam
mov
pop
sub
fcomp
xchg
inc
inc
(bad)
rcl
rcl
shl
(bad)
xchg
dec
movs
inc
mov
int
sub
ror
dec
xchg
xchg
mov
and
jge
ss
inc
xchg
xor
fisttp
xchg
jne
pop
lock
pop
out
aad
adc
(bad)
push
add
sub
in
retf
mov
je
mov
lods
xchg
dec
dec
iret
pop
adc
(bad)
test
xchg
adc
inc
sub
test
xor
imul
mov
repnz
mov
pop
xchg
push
xlat
push
les
minps
xchg
dec
int
les
jmp
jnp
xor
inc
xor
cli
clc
mov
xchg
(bad)
mov
int3
jle
add
into
je
dec
arpl
mov
iret
daa
xchg
xchg
(bad)
lock
pop
xchg
pop
dec
mov
out
movs
sub
mov
xchg
sub
(bad)
cli
call
push
xchg
ins
or
into
mov
outs
dec
mov
dec
outs
push
loopne
xchg
imul
rcl
push
stos
mov
mov
es
adc
sbb
aas
ins
push
or
nop
iret
or
call
in
cmps
stos
loopne
mov
push
repnz
mov
push
inc
popf
adc
repz
dec
xor
in
imul
xchg
jg
jmp
daa
(bad)
into
jl
xchg
lock
aad
cdq
movs
test
mov
jp
inc
push
dec
shr
repnz
test
int
push
cwde
in
inc
push
xchg
xchg
or
test
sub
outs
sub
fs
stos
xchg
clc
jae
jge
jns
(bad)
xchg
inc
scas
mov
mov
jnp
popf
mov
xchg
jl
pop
cs
bound
je
cmps
pop
lods
rcl
adc
xchg
mov
or
ja
cmp
xchg
inc
sub
xor
shl
push
retf
xchg
fimul
xchg
aam
push
jbe
(bad)
in
cld
add
stos
(bad)
sahf
add
and
and
sbb
ins
imul
xchg
mov
stc
and
(bad)
fcom
jno
adc
cmp
jb
cld
in
test
push
je
test
xchg
cmp
pop
pushf
data16
jae
mov
jne
hlt
ror
and
mov
xchg
popa
js
nop
jmp
cmp
mov
mov
adc
mov
xchg
adc
call
sbb
inc
mov
inc
into
out
pusha
mov
jecxz
push
mov
pop
das
xchg
push
and
inc
call
xchg
lea
mov
lahf
sahf
dec
loopne
adc
in
(bad)
sbb
pop
jle
aad
stos
outs
hlt
add
xchg
sub
mul
pop
jbe
xchg
je
add
test
jno
dec
and
lea
bound
aam
leave
mov
neg
pushf
shr
inc
xor
jns
pop
mov
fdiv
xchg
nop
or
cdq
jo
gs
out
push
out
cmp
mov
mov
xchg
jg
cmps
in
mov
jne
xchg
test
ss
cmc
or
lahf
xchg
daa
add
mov
pusha
xchg
out
xlat
test
das
pop
push
loop
and
sahf
in
jb
cmp
xchg
sub
jmp
xchg
nop
pop
adc
retf
fs
xchg
imul
pop
jno
sub
xchg
mov
adc
push
cmp
mov
mov
dec
xchg
in
xchg
cmp
xchg
xchg
int3
pop
push
int
adc
xchg
outs
pop
mov
sbb
xchg
sub
loope
adc
xchg
fwait
xchg
loopne
dec
fs
mov
xchg
sub
mov
es
xchg
outs
inc
push
lahf
std
test
idiv
mov
imul
mov
xchg
push
push
xor
mov
imul
scas
xor
jne
or
jbe
push
lods
sti
jmp
or
mov
sahf
(bad)
xor
cmps
push
sub
xchg
and
mov
shl
or
mov
cld
ret
fwait
pop
cmp
xor
inc
add
test
mov
imul
loop
adc
mov
adc
or
adc
and
aam
xchg
dec
(bad)
cmc
inc
int3
mov
mov
sub
jecxz
xchg
movs
shl
outs
sbb
push
mov
rcl
jbe
out
sbb
rcl
dec
fs
fwait
xchg
xchg
repz
pop
sub
fcmovb
popf
xor
ret
sahf
xchg
adc
jno
pop
cmc
cmps
lahf
inc
push
repnz
js
xor
stc
mov
pop
xchg
push
fistp
push
ficom
shr
push
hlt
loop
xchg
paddsw
sbb
cdq
sub
das
inc
arpl
xchg
repz
ret
jbe
fwait
retf
xchg
dec
inc
adc
inc
scas
push
mov
xor
and
into
sbb
inc
retf
sub
pop
js
in
mov
push
mov
pop
add
shl
mov
ret
xchg
ins
jge
out
repnz
or
xchg
mov
and
mov
dec
jae
cmp
ffree
sub
lahf
dec
xchg
shr
xor
sbb
enter
ret
outs
mov
adc
xchg
push
inc
mov
add
xchg
lods
outs
cmp
xchg
stos
sub
repnz
stc
ficom
xor
mov
clc
sub
addr16
daa
cs
aad
xor
jl
dec
xchg
mov
mov
mov
mov
enter
xchg
sbb
push
ja
nop
test
sub
outs
cmc
movs
push
xchg
daa
scas
or
xor
pop
out
push
jl
xchg
jo
cmp
sub
mov
jno
inc
xchg
ins
inc
add
out
xchg
(bad)
ja
cmp
retf
jmp
sub
xlat
(bad)
and
out
cmps
test
mov
in
fwait
mov
xor
sbb
cmps
xchg
pop
push
adc
call
xor
loopne
xchg
outs
mov
fs
jl
xchg
jmp
jge
js
add
pop
pop
jno
and
inc
nop
adc
xchg
adc
sub
stos
fwait
bound
and
movs
int3
mov
xor
pop
cmps
int
pop
cmc
mov
loope
and
jb
dec
(bad)
push
cmp
es
mov
aas
lds
push
mov
pop
stos
xlat
push
xchg
adc
pop
jns
bound
pop
leave
inc
out
test
out
imul
pusha
push
or
mov
cli
cmps
mov
loop
rcl
xchg
test
xor
jnp
mov
fdivr
mov
sbb
push
mov
js
sbb
lods
test
shl
jne
sti
adc
cld
and
popf
inc
test
jae
retf
int3
push
gs
cmc
mov
xchg
and
add
mov
pushf
cmp
(bad)
ja
rol
and
jb
and
ror
adc
rol
pop
sti
fnstsw
jbe
or
sbb
xchg
pop
loope
jo
mov
adc
mov
xchg
xlat
pop
jmp
mov
aad
adc
xchg
(bad)
int
int3
iret
or
das
je
rol
test
hlt
leave
popf
mov
fisub
mov
inc
or
xchg
popf
mov
dec
jmp
pop
and
or
xchg
cmps
sub
pop
in
je
es
sar
test
add
test
push
or
xchg
and
or
int3
test
jg
adc
adc
xchg
xchg
inc
mov
retf
inc
nop
pop
xchg
clc
sbb
jns
or
lock
xchg
ss
jg
cmps
or
mov
adc
mov
fiadd
jp
cmp
dec
mov
xchg
dec
popa
jmp
pusha
cmp
push
xchg
inc
ss
sub
jmp
sub
mov
out
and
push
test
xchg
push
inc
int
std
pop
mov
add
xchg
jmp
aad
addr16
data16
xchg
mov
cwde
mov
inc
xchg
popa
and
jmp
bswap
aad
test
ins
push
call
mov
(bad)
pop
push
xchg
pushf
fnstcw
cli
inc
(bad)
(bad)
(bad)
xchg
rol
out
sbb
jmp
adc
movs
les
push
ror
adc
lahf
dec
jg
test
sub
fwait
xchg
adc
pusha
dec
fcom
dec
cli
leave
inc
fimul
push
sub
ins
enter
sbb
push
and
ret
xchg
mov
mov
xchg
jmp
sub
xchg
stos
in
out
xchg
sub
hlt
cmp
mov
shl
cmp
sar
jmp
sbb
push
fwait
imul
xchg
push
scas
sbb
fistp
push
jg
fwait
jns
xchg
jge
lock
adc
sub
push
pop
bound
push
outs
popf
movs
fwait
cdq
cwde
inc
add
adc
cli
cdq
inc
cmp
pop
adc
push
aam
aad
cmps
pop
test
rcr
adc
std
lods
(bad)
xchg
xchg
or
xchg
fs
pop
mov
inc
retf
fs
xchg
in
pop
xchg
jge
xchg
xchg
jno
in
push
sbb
ss
xchg
lods
lock
std
xor
imul
push
(bad)
xchg
sub
jnp
retf
xchg
inc
add
cmp
pop
xchg
pop
adc
inc
jp
loope
xchg
(bad)
sub
call
mov
in
aaa
sbb
pop
xchg
mov
arpl
jecxz
jne
mov
es
xchg
and
pop
call
cli
shr
inc
xor
adc
adc
pop
push
pop
fwait
cli
ins
sbb
xchg
aam
mov
or
fs
retf
jl
out
into
xchg
mov
inc
adc
(bad)
push
test
xchg
xor
cmc
xchg
and
jg
xchg
lahf
mov
adc
int3
xchg
mov
aas
in
cmp
mov
pop
dec
pop
mov
push
in
shr
push
push
popa
or
in
cmp
(bad)
data16
fs
push
xchg
iret
add
in
xchg
pop
xor
mov
adc
jno
mov
pop
(bad)
ret
cli
loopne
push
rcr
addr16
cmc
dec
out
xchg
lea
not
push
mov
and
(bad)
push
jge
ds
arpl
mov
add
loop
adc
xlat
push
inc
mov
leave
les
lock
adc
aaa
shr
mov
call
cwde
add
pop
inc
jecxz
push
xlat
retf
xor
or
and
shl
paddsw
and
pop
daa
fs
outs
inc
inc
mov
aad
pop
pop
add
loopne
and
add
pop
ja
adc
aas
icebp
in
add
xchg
cli
xlat
mov
aam
cwde
ss
jecxz
pop
dec
hlt
dec
xor
test
imul
or
pop
mov
jnp
mov
sub
call
jmp
fldlg2
xchg
mov
xchg
jmp
clc
jno
xchg
out
cs
xchg
nop
js
sbb
xlat
ror
std
pop
xchg
inc
mov
mov
xor
into
arpl
cs
jle
outs
jb
jmp
rol
adc
mul
push
or
xchg
cmp
xor
sbb
inc
add
lock
pushf
imul
call
dec
(bad)
xchg
nop
movs
jmp
sub
cmp
je
ins
lock
xchg
sbb
(bad)
loope
rol
pop
mov
int3
xchg
pop
arpl
sub
pop
test
pop
cmc
xchg
add
mov
xchg
or
sti
ds
lock
xchg
push
movs
push
das
mov
cli
xchg
outs
es
dec
mov
cmp
(bad)
mov
mov
and
mov
data16
xor
sar
dec
daa
adc
in
ins
and
xchg
ins
clc
outs
std
mov
fcom
adc
adc
hlt
mov
mov
push
xlat
add
pop
add
lock
fwait
mov
shl
cmc
push
xchg
xchg
xchg
inc
add
pop
mov
sub
add
push
nop
mov
mov
or
xchg
and
inc
in
int3
pop
shl
xchg
push
pop
sti
out
loopne
shl
jne
xchg
push
test
ror
xchg
in
xor
cli
lods
or
push
sbb
pushf
stos
mov
push
xor
out
xchg
retf
loop
jle
sbb
add
out
jmp
leave
sub
cmp
adc
fimul
sub
or
inc
cli
or
push
arpl
fist
pop
mov
mov
in
inc
lods
xchg
mov
movs
test
stc
popf
nop
push
aas
xchg
pop
test
push
fist
cmp
push
(bad)
iret
sbb
sub
push
les
rcl
xchg
inc
mov
loop
add
gs
cmp
and
xchg
xchg
jnp
adc
mov
aam
sub
jmp
xchg
inc
fsubr
outs
rcr
and
int
popf
mov
shr
mov
adc
or
lds
xchg
cmp
xchg
pop
cli
icebp
repnz
adc
sar
enter
xchg
imul
jge
or
and
mov
jmp
push
xchg
rcr
test
sub
(bad)
xor
or
rcl
and
or
leave
ja
fcom
push
cmp
hlt
ins
bound
push
fwait
add
sbb
imul
mov
in
ficom
das
pusha
int
(bad)
push
clc
add
pop
mov
inc
and
xchg
jnp
icebp
je
daa
call
mov
mov
mov
lahf
out
repz
and
pop
jmp
mov
pop
xchg
or
xchg
xor
sahf
in
sub
cmps
jecxz
xchg
shl
adc
push
push
jns
dec
sub
and
xor
cmps
cmp
or
rcl
mov
cmp
retf
icebp
and
xchg
sete
xor
sbb
out
and
pop
int3
std
jmp
mov
push
sub
and
fnstcw
lods
dec
test
cmps
cdq
stos
mov
jmp
or
dec
dec
pop
retf
xchg
sub
add
aaa
and
push
cdq
test
enter
and
inc
xchg
(bad)
adc
ret
sbb
xchg
pop
jmp
cdq
mov
xor
xlat
pop
arpl
mov
xor
cld
fist
mov
xchg
xchg
inc
and
pop
rcl
dec
ds
mov
adc
sub
icebp
int
xchg
cmp
aad
jp
loop
repnz
xchg
sbb
adc
lahf
sbb
cmp
jno
and
lea
adc
rcl
or
je
sub
xchg
lea
leave
adc
jl
repnz
jns
push
adc
mov
ficom
and
push
pop
cli
xchg
push
push
xchg
jge
mov
dec
fwait
jmp
in
enter
jae
adc
mov
xchg
dec
mov
in
jl
mov
mov
test
gs
mov
out
xchg
ja
mov
jns
xor
mov
lahf
or
int
sbb
xchg
pusha
and
(bad)
push
js
mov
ds
mov
pop
xor
stos
loop
enter
xchg
or
(bad)
push
jb
fwait
mov
loopne
and
xchg
cmp
inc
je
(bad)
jbe
ss
fistp
add
adc
in
fmul
push
xchg
scas
add
mov
ins
xchg
lods
div
and
xchg
retf
sar
pop
jns
(bad)
into
xchg
mov
push
int
xchg
xchg
jbe
(bad)
jo
dec
out
xchg
outs
mov
out
dec
xchg
adc
fptan
call
pop
xchg
jmp
adc
ja
xchg
dec
jmp
xchg
aaa
add
es
dec
ja
mov
mul
rol
sbb
add
or
sbb
sbb
xor
fldenv
fwait
xchg
out
xor
test
sbb
xchg
sti
in
push
out
xchg
mov
inc
or
inc
add
cmp
int
xor
push
adc
adc
vunpcklps
retf
test
in
enter
lods
xor
cmp
nop
mov
(bad)
jae
lahf
adc
xchg
fisub
mov
lahf
add
cmps
hlt
xchg
adc
jbe
sti
adc
mov
push
sahf
add
push
lahf
xor
xchg
cmps
rcl
inc
sbb
loopne
or
cmp
in
test
loopne
mov
dec
xchg
mov
out
mov
mov
inc
cmp
mov
cmp
sub
arpl
int
aam
sub
add
movs
out
fs
retf
xor
and
xchg
outs
ins
popa
adc
xchg
jnp
sar
xchg
push
mov
and
inc
test
xchg
mov
xor
push
cwde
dec
jno
xchg
mov
outs
(bad)
mov
mov
fld
xchg
xor
cmp
mov
in
je
cdq
xchg
cdq
js
adc
in
cli
xchg
mov
movs
ins
lahf
pop
ds
imul
and
nop
xor
mul
lods
hlt
in
cwde
jne
xchg
push
xor
inc
or
int
lahf
xchg
int3
icebp
push
stos
lods
ins
ss
or
adc
daa
in
daa
jle
sbb
push
ret
xor
fst
stos
pop
out
xchg
push
sbb
aas
cmp
xor
jmp
shl
cmp
in
scas
sete
xor
xchg
outs
nop
(bad)
add
pop
gs
cmp
pusha
outs
sub
mov
xchg
imul
mov
cmp
pop
sub
idiv
movs
mov
sbb
fst
test
pop
scas
into
ins
cli
jg
jp
ret
and
cmp
sbb
gs
and
out
jl
(bad)
mov
push
repz
mov
mov
push
jmp
shr
popf
or
cmc
adc
xchg
(bad)
in
jns
sbb
mov
mov
xchg
lea
cmc
or
fnstenv
fs
test
adc
adc
cmp
inc
cmp
mov
adc
mov
popf
mov
pop
out
push
ins
mov
arpl
xchg
xor
movs
inc
add
into
cmp
adc
lods
int
stos
cld
xchg
mov
xchg
test
xchg
mov
fisub
sti
xchg
out
aam
jl
leave
ins
loop
test
mov
mov
div
pop
test
mov
loope
add
icebp
jae
push
adc
cdq
add
fmul
adc
aas
ins
dec
fwait
add
icebp
jnp
pop
xchg
lods
push
outs
fndisi(8087
mov
outs
in
sub
dec
mov
or
arpl
in
or
int3
mov
lahf
outs
fild
push
fist
xchg
pop
pop
ins
dec
mov
cmc
adc
add
mov
cmp
mov
mov
(bad)
icebp
aad
(bad)
sub
mov
and
push
xor
adc
xchg
stos
dec
loope
je
jb
xchg
adc
xchg
mov
loope
rcl
sbb
mov
aad
sub
add
mov
sub
xchg
push
xor
jg
xchg
xchg
jo
lods
and
mov
pop
jnp
mov
jb
stos
add
dec
shl
xchg
push
xchg
mov
dec
mov
lea
ins
dec
and
jne
xchg
xchg
cli
jp
sbb
xor
push
in
ror
pop
les
mov
sub
je
push
mov
mov
call
cld
xchg
lods
jnp
adc
cmp
cmp
sub
jno
test
sub
mov
and
mov
or
out
lahf
call
xchg
cmp
cmps
cmp
jle
mov
fcom
mov
out
xchg
jmp
mov
mov
test
leave
pop
mov
enter
adc
sub
loope
xchg
fs
retf
cmps
aaa
cld
xchg
adc
mov
jmp
xchg
out
xor
xchg
or
xchg
outs
mov
add
mov
cmp
jmp
mov
jne
cmp
add
xchg
data16
jmp
xchg
and
mov
fsub
jbe
xchg
dec
call
shl
movs
les
pop
xchg
or
mov
xlat
fwait
jmp
push
aaa
inc
rol
sysexit
mov
inc
mov
scas
adc
xor
ds
push
add
xchg
push
stos
shl
pop
mov
dec
mov
cmp
imul
js
push
adc
fdivr
mov
xchg
fild
out
leave
call
xchg
xchg
jns
mov
lds
cdq
xchg
mov
cmps
cmp
out
je
mov
movs
or
iret
mov
xchg
out
or
inc
pop
lods
xor
dec
aam
sub
xchg
add
xchg
adc
rcr
repnz
or
mov
enter
pop
inc
cmc
gs
xchg
lea
xor
xchg
mov
push
jae
cmp
rcl
xor
inc
(bad)
cmps
(bad)
xchg
jg
or
outs
or
push
movs
push
test
xchg
les
fdivr
xchg
and
add
pop
sub
xchg
fst
lods
adc
(bad)
das
xchg
or
shr
push
in
xor
xchg
fs
push
add
shl
outs
and
ror
pop
and
call
cli
or
xor
push
shl
lods
xchg
retf
mov
push
ret
gs
outs
(bad)
xchg
sbb
xchg
jmp
cmp
loopne
rcr
mov
jle
psubb
jns
push
push
mov
(bad)
jp
movs
stos
call
ins
xchg
pushf
pop
repnz
sbb
and
pop
in
dec
out
cs
or
fnstsw
mov
jle
shl
or
xchg
test
push
xchg
test
push
xchg
mov
sahf
iret
hlt
sub
cwde
jo
sub
repz
mov
pop
or
jge
jg
mov
ss
adc
push
cmc
dec
fwait
aas
sub
iret
pop
movs
inc
inc
push
mov
mov
and
inc
mov
xchg
fsubp
cmp
inc
xchg
out
mov
jbe
sbb
in
jne
push
lock
fnstenv
cmp
xchg
(bad)
push
xchg
(bad)
jge
dec
imul
js
jp
loopne
xchg
mov
xlat
adc
out
jp
xchg
call
inc
or
sub
lods
inc
ret
mov
push
or
clc
es
prefetchw
sub
aas
xchg
xor
fsubr
mov
add
mov
(bad)
adc
je
aaa
xchg
lock
stos
hlt
lock
loopne
gs
jae
mov
pop
test
bound
std
imul
adc
out
imul
popa
mov
adc
xlat
out
adc
(bad)
aam
jne
lds
clc
mov
mov
stos
mov
cmp
pop
xor
xchg
cld
int3
sub
mov
adc
mov
test
fidiv
and
in
fwait
cmp
xor
push
aas
imul
lahf
sbb
(bad)
inc
add
fwait
inc
int
stos
mov
jecxz
je
mov
sbb
loopne
sbb
arpl
lock
add
inc
into
test
aas
xor
fwait
xchg
fdivr
div
adc
das
jns
add
icebp
scas
stc
pop
dec
mov
add
xchg
push
sti
mov
ins
fwait
daa
das
pop
mov
or
xchg
adc
and
jnp
int3
mov
xor
xor
jg
lds
adc
(bad)
xchg
ja
xchg
mov
xchg
push
shl
or
out
xchg
mov
and
jns
xchg
pop
xchg
xor
and
in
lahf
test
cmp
mov
fwait
jl
add
popf
mov
out
sub
mov
push
xchg
out
mov
cwde
cmp
push
arpl
jecxz
imul
xchg
mov
inc
pop
fwait
dec
retf
cld
mov
xchg
loopne
mov
cmp
addr16
xchg
sbb
xlat
xchg
add
test
stos
int3
mov
jmp
pop
fmul
xchg
arpl
or
in
movs
sub
pop
xchg
add
fldenv
xchg
mov
and
jb
pop
aaa
xchg
clc
jge
xchg
cmp
mov
ret
mov
aad
or
es
mov
hlt
xchg
aam
test
add
pop
not
fbstp
jns
xor
ror
xchg
xchg
shl
fcmovnbe
inc
push
jmp
adc
dec
jmp
cmp
jnp
cmp
aaa
outs
sub
xchg
shr
(bad)
cmp
and
inc
bound
add
xchg
test
nop
xchg
xchg
mov
push
ds
cmc
sub
xchg
outs
jge
add
arpl
xchg
or
jmp
add
(bad)
pushf
loop
fwait
and
lahf
movs
push
std
push
sub
cmp
inc
(bad)
rol
xchg
and
add
fidivr
ds
stos
not
inc
mov
fwait
shr
iret
mov
jmp
cld
adc
xor
clc
add
mov
mov
jecxz
cwde
sub
pop
inc
mov
mov
mov
movs
mov
jae
stc
je
xchg
call
inc
xchg
inc
mov
fmul
add
inc
mov
jnp
sub
jmp
in
xchg
mov
mov
mov
xor
inc
add
test
adc
jo
shl
imul
xor
(bad)
xor
lock
mov
mov
shl
pop
mov
out
jmp
fstp
repz
push
sbb
jb
lds
retf
lahf
pop
or
xchg
adc
pop
sub
adc
ror
adc
and
sbb
xchg
int
add
pop
dec
adc
push
test
xchg
push
and
cmp
in
mov
(bad)
inc
(bad)
shl
loop
adc
clc
fwait
cmps
retf
xchg
fnstenv
mov
xchg
sbb
and
lahf
lea
xor
mov
xchg
mov
cmp
fwait
(bad)
outs
mov
test
xor
das
loope
xchg
ror
mov
jno
and
mov
lock
outs
mov
pop
push
(bad)
fwait
xchg
aad
das
mul
cmp
sbb
loope
or
xchg
test
fcom
push
mov
mov
out
je
push
outs
fwait
inc
(bad)
daa
inc
or
pusha
ror
fdiv
sub
mov
push
push
mov
shl
movs
loop
mov
int
inc
push
repnz
dec
xchg
mov
mov
add
add
test
xchg
adc
sub
cli
arpl
je
sub
inc
aam
add
xchg
stos
dec
(bad)
xchg
loopne
movs
pop
stos
xor
test
sti
fld
sbb
popf
jo
add
xchg
daa
push
std
push
xor
sti
ss
add
jb
rcl
pop
xchg
stos
sub
jmp
mov
xchg
movs
cmp
inc
dec
cmps
cli
jl
xchg
push
test
ss
aam
dec
add
push
mov
or
add
int3
sbb
dec
xchg
out
xchg
rol
mov
xchg
xchg
pop
rol
test
mov
xchg
hlt
nop
mov
sub
xchg
jp
jb
dec
hlt
jl
xchg
add
retf
adc
(bad)
out
shl
jnp
inc
xchg
imul
xchg
lods
jecxz
or
repnz
xchg
test
mov
xor
mov
ds
sbb
retf
xchg
cmp
pop
xor
sbb
push
jle
std
pop
inc
jmp
xchg
outs
cld
xor
(bad)
xchg
mov
cs
icebp
call
jno
aaa
leave
add
adc
mov
jbe
push
xchg
push
jp
sub
je
(bad)
xchg
mov
ret
mov
out
movs
adc
cmp
in
aam
sub
xchg
out
clc
pop
popf
mov
std
push
fwait
mov
retf
retf
lds
pop
test
push
inc
stos
mov
ins
les
(bad)
xlat
jb
xchg
jmp
push
xchg
mov
daa
adc
xchg
lahf
xlat
mov
or
out
popa
xchg
jge
ja
mov
rcl
shr
cmps
out
xor
data16
sub
xchg
in
mov
mov
jo
jmp
xchg
mov
xchg
xchg
stos
fstp
and
xchg
outs
or
sbb
in
icebp
sete
and
dec
shl
pop
cmp
inc
(bad)
pop
jbe
inc
xchg
aam
dec
scas
mov
repnz
data16
mov
in
sub
push
les
pop
add
bound
jo
je
hlt
cmp
push
aad
xchg
call
pushf
xchg
shr
jg
xchg
add
std
push
call
int3
cmp
cmp
pop
je
xchg
inc
movs
fiadd
test
addr16
test
adc
sub
fwait
sub
cld
or
cdq
xchg
leave
out
push
sbb
push
mov
xchg
xchg
mov
dec
stos
shl
cwde
sahf
out
or
jmp
mov
push
cwde
mov
fdivr
and
xchg
mov
stc
test
add
cmps
clc
sbb
cmp
sbb
xlat
mov
imul
shr
mov
mov
xchg
dec
sub
ja
aam
movs
fisub
mov
adc
lock
jnp
ins
lock
ret
mov
lods
stc
ror
inc
xchg
xor
jmp
fs
jnp
xchg
add
add
dec
xchg
inc
ret
mov
push
in
(bad)
xchg
cmp
push
pop
dec
xchg
mov
mov
adc
pushf
int
ja
pop
cmp
dec
and
cdq
jnp
test
mov
mov
shl
xchg
scas
mov
fstp
jmp
sub
mov
add
add
(bad)
pop
pop
mov
jmp
push
inc
movs
xchg
mov
inc
mov
sbb
arpl
xor
cs
lods
jmp
xchg
int
lods
jecxz
in
fs
aam
pop
push
(bad)
mov
push
inc
mov
mov
fdiv
outs
or
sbb
pop
mov
mov
out
xchg
stos
sub
inc
jns
mov
jnp
sbb
push
sub
cmp
xchg
push
pop
sbb
cs
jae
fcom
inc
mov
out
push
cld
ss
test
pop
or
movs
dec
sub
mov
(bad)
xchg
ins
ret
fwait
pusha
addr16
jb
jnp
push
sbb
sahf
push
mov
and
fisubr
(bad)
arpl
inc
addr16
push
mov
jno
xchg
das
daa
push
adc
xchg
push
gs
adc
adc
js
xchg
xchg
cmp
pop
jecxz
mov
xchg
(bad)
cmp
test
jge
mov
repnz
mov
or
cmp
es
and
aam
dec
adc
pop
lock
rol
mov
jle
cmp
hlt
scas
inc
inc
cmps
cmp
sub
cwde
dec
mov
mov
aad
xchg
gs
jae
xchg
and
pop
popf
dec
pop
or
shl
xchg
les
push
cmp
push
adc
fcmovbe
sub
inc
xchg
add
sbb
xor
xchg
int3
mov
mov
aaa
frstor
push
push
xchg
loopne
pop
les
xor
mov
xchg
jo
mov
and
dec
xor
mov
lods
xchg
jge
cmp
les
rcr
mov
mov
xchg
dec
xor
pop
call
shr
cmp
(bad)
mov
pop
xor
mov
popf
mov
cdq
es
and
cmp
jne
sub
or
sbb
loope
mov
inc
mov
xchg
sbb
jge
sahf
cmp
sub
addr16
push
cwde
xor
fidiv
push
loop
pop
inc
or
shl
xchg
xchg
xor
jb
lea
shl
test
mov
leave
xchg
loopne
shl
into
xchg
(bad)
pop
push
hlt
jecxz
or
dec
shl
mov
ins
push
inc
pop
push
mov
jbe
movs
dec
xchg
addr16
mov
jp
jge
xor
jmp
mov
fnstcw
sti
sbb
lds
pusha
sti
arpl
sbb
ret
xchg
data16
rcl
and
mov
xor
mov
mov
and
js
popa
mov
push
sbb
jne
mov
test
je
xchg
jge
scas
sub
mov
hlt
xchg
push
es
cmp
pop
retf
mov
xchg
xchg
mov
and
xchg
popa
out
and
je
xchg
sub
repz
stos
out
call
mov
sub
jo
fcom
in
adc
in
neg
push
push
jmp
sahf
xchg
dec
adc
(bad)
ins
dec
mov
mov
sub
inc
cwde
imul
xor
xchg
icebp
inc
out
movs
rcl
cmp
(bad)
mov
pop
inc
loop
test
lea
mov
aas
es
mov
pop
cmp
push
outs
dec
xchg
mov
xchg
ret
sahf
les
xchg
repz
das
push
lds
cli
movs
jg
ret
je
xchg
fisttp
fneni(8087
push
in
xchg
(bad)
int3
xor
je
test
les
xchg
out
adc
rcr
jge
xchg
(bad)
out
xchg
fistp
(bad)
aam
inc
in
pop
cwde
fsub
xchg
xor
lods
xor
mov
adc
lea
xchg
sbb
adc
cmps
dec
call
cwde
sub
jns
xor
jle
cmp
pop
ficom
sub
and
arpl
rol
xchg
adc
sbb
jp
xchg
xchg
cmc
call
clc
aam
pop
push
je
adc
out
lea
push
hlt
fimul
dec
cwde
ret
movs
xchg
test
clc
add
aam
pushf
rcl
in
int3
or
loop
mov
test
sbb
adc
shr
or
jnp
loopne
fwait
dec
inc
jmp
ins
and
xchg
pop
push
adc
jge
push
int3
push
out
shl
not
lods
pop
mov
xlat
jle
ret
fs
repz
xchg
lock
push
push
mov
js
cmc
and
mov
mov
out
pop
pop
fist
pusha
call
mov
outs
mov
std
xor
or
sub
push
in
mul
jl
mov
xchg
into
mov
js
or
xchg
scas
xor
cs
ss
aad
mov
mul
jno
in
sub
mov
xchg
ds
pop
stos
mov
mov
es
(bad)
mov
sbb
jnp
cmc
daa
dec
pop
popa
cwde
cmps
mov
jbe
iret
pop
cs
clc
pop
mov
fs
pop
pop
adc
aam
jnp
add
xchg
sub
xchg
cmp
mov
mov
inc
dec
stc
cmps
or
retf
sub
mov
xchg
in
mov
mov
mov
dec
xchg
cmp
dec
dec
jl
fwait
outs
mov
push
cmp
scas
pop
mov
sbb
jns
xchg
xor
test
(bad)
fadd
fist
sub
xchg
xor
mov
pop
and
int
not
sbb
xchg
cmps
lock
test
jne
shr
aam
shr
mov
sbb
and
lds
into
sub
xchg
test
push
jg
mov
loope
call
xchg
mov
jl
jecxz
int
js
xchg
push
cs
jbe
dec
fs
push
pop
not
xchg
mov
inc
mov
out
cmp
movs
inc
inc
jnp
fwait
retf
and
aam
popf
jl
idiv
rcl
add
cmp
inc
mov
ret
mov
frstor
add
mov
int
sete
cwde
jecxz
cmp
mov
and
push
fwait
push
jnp
js
pop
mov
fwait
or
aaa
aam
adc
movs
cmp
pop
xchg
retf
push
jg
mov
outs
ret
popa
xchg
(bad)
jmp
mov
stos
jmp
fwait
aam
inc
in
(bad)
aam
xchg
in
add
loop
pop
call
dec
es
test
mov
fcomip
sbb
add
jbe
xlat
fs
dec
(bad)
cmp
pop
js
iret
xchg
jl
add
adc
in
mov
mov
movs
pusha
push
dec
xchg
cmp
(bad)
pushf
rcl
adc
gs
retf
jnp
aas
test
mov
pop
adc
test
xor
sub
fisubr
xchg
mov
lods
mov
lea
hlt
push
or
jnp
adc
ret
push
xlat
scas
sub
into
adc
cmps
jns
and
mov
and
xchg
bound
jmp
nop
push
sbb
mov
pop
add
out
rep
pop
dec
jne
push
jmp
adc
sub
in
adc
js
aad
sbb
adc
adc
pushf
gs
pop
(bad)
lock
aam
mov
dec
inc
xor
imul
cmps
xor
leave
mov
xchg
mov
cmp
daa
ret
pop
mov
xchg
jmp
repz
and
aas
fnstenv
sbb
test
dec
ins
nop
ret
clc
mov
das
dec
push
(bad)
jg
loop
mov
sub
xor
xchg
cmp
add
xchg
or
lods
and
out
mov
cmp
mov
adc
sub
sbb
xchg
cld
mov
adc
fstp
xchg
xchg
or
gs
inc
cmp
out
and
adc
js
mov
mov
test
sub
mov
es
sbb
push
or
xchg
mov
cwde
and
popf
scas
test
mov
mov
rcl
and
or
xchg
imul
push
jle
xchg
fdiv
xchg
out
xchg
inc
out
jns
fdivrp
repz
xchg
stos
mov
and
test
leave
mov
xchg
xchg
push
sub
sbb
movs
mov
mov
xor
mov
popf
loopne
shl
adc
xchg
sar
dec
xchg
push
es
lds
inc
pop
xchg
sbb
clc
iret
adc
icebp
int3
fs
ins
test
xchg
or
pop
xchg
mov
and
jg
xchg
mov
adc
sbb
fist
icebp
mov
stos
xchg
mov
xchg
test
inc
stos
leave
xor
and
inc
push
xchg
mov
mov
aaa
fucompp
jns
in
ds
adc
add
xchg
mov
jge
mov
adc
aas
and
call
sar
xchg
das
fsub
xlat
push
into
fs
push
sbb
sub
dec
rcl
xchg
(bad)
aas
pop
jo
(bad)
imul
out
enter
xchg
mov
repz
lods
adc
mov
jne
push
arpl
xor
(bad)
pop
data16
mov
sub
out
clc
inc
mov
vsqrtps
leave
mov
aam
xor
sub
pop
xchg
mov
dec
out
pushf
sbb
push
test
popf
push
mov
rcl
mov
mov
jbe
push
inc
sbb
adc
sub
xchg
in
xor
sub
xchg
scas
push
sbb
cwde
pop
xchg
fwait
rcl
dec
popf
aas
lods
push
rcl
xrelease
cmp
cmp
fisub
add
sti
repz
inc
xchg
mov
push
or
repnz
sbb
xchg
pop
xchg
outs
sub
and
mov
mov
pusha
sub
pop
xchg
push
cdq
pop
in
out
adc
cmp
sbb
sub
and
xchg
sbb
loopne
xchg
bound
stc
in
xchg
add
mov
xchg
sbb
mov
jle
(bad)
cs
scas
aam
and
dec
dec
sub
and
cmp
jne
ins
adc
ret
add
dec
sbb
int
xchg
or
fistp
push
(bad)
pusha
(bad)
lock
lahf
paddsb
xchg
lea
mov
dec
mov
push
pop
jmp
icebp
fwait
es
xchg
aam
xchg
mov
or
xchg
pop
push
jg
jbe
out
(bad)
stos
push
test
xchg
aaa
lods
cmc
test
(bad)
or
cs
pop
push
push
aam
push
xchg
(bad)
imul
cmp
dec
inc
sti
fdivr
loop
inc
ror
xchg
ss
int
test
sbb
sbb
push
mov
mov
pop
dec
xchg
pop
in
xchg
clc
fsubr
inc
ja
mov
dec
packsswb
pop
mov
mov
jbe
fisub
ror
je
pop
pop
js
iret
xchg
sub
je
nop
adc
jae
xchg
mov
inc
rol
fimul
jge
fwait
mov
xchg
push
pop
les
adc
dec
or
xchg
test
adc
add
(bad)
mov
push
in
xchg
loop
xchg
sbb
cmps
test
xchg
or
inc
dec
call
inc
xchg
mov
in
mov
pop
bound
adc
and
je
push
cmps
shl
mov
repnz
pop
mov
cld
test
les
int3
mov
or
and
xchg
bound
into
mov
mov
aas
cmp
adc
add
lock
adc
and
aaa
fdivr
fwait
and
mov
test
xchg
fcom
cmp
sbb
pop
out
xchg
mov
adc
add
push
loopne
int
fcom
int3
adc
ud0
pop
sbb
pop
xchg
stos
(bad)
shr
add
loop
repnz
jmp
or
dec
xchg
sbb
test
sub
sbb
div
sbb
xchg
into
test
hlt
xor
and
fwait
mov
inc
nop
sbb
xchg
out
ror
outs
pop
cdq
xchg
push
xchg
das
mov
std
(bad)
shl
mov
jnp
push
es
inc
inc
xchg
inc
add
arpl
dec
mov
mov
hlt
movs
repnz
push
je
lods
addr16
in
mov
pop
shl
xchg
cmc
ins
xchg
push
test
je
lock
pop
mov
mov
into
dec
mov
outs
test
js
pop
pop
add
shr
and
inc
cld
mov
bound
sub
bound
test
loopne
je
xchg
les
inc
imul
xor
adc
pushf
push
jmp
fs
pop
xchg
mov
pop
mov
xchg
mov
ins
xchg
xchg
and
and
xchg
dec
sahf
mov
sub
mov
(bad)
mov
adc
cld
retf
cmps
jmp
pop
leave
jecxz
jo
mov
xchg
cmp
das
push
je
xchg
xchg
fnstenv
mov
enter
pop
sbb
cmp
lock
mov
mov
sbb
scas
and
fdiv
mov
dec
ins
xchg
sbb
mul
mov
xchg
shr
pushf
push
xchg
jno
mov
add
daa
mov
dec
in
adc
movs
adc
mov
scas
jmp
dec
xchg
nop
or
clc
xchg
sahf
pop
sbb
xor
mov
rcl
jbe
push
enter
daa
mov
js
adc
aad
add
in
xchg
dec
cmc
cmp
inc
cmp
xchg
retf
fwait
outs
inc
pop
gs
aas
push
sub
pop
out
jg
mov
xchg
mov
jge
in
push
and
mov
mov
xor
bound
(bad)
dec
out
jno
cmps
and
cli
xchg
in
sbb
xchg
push
jmp
clc
(bad)
fwait
cmp
in
gs
into
lods
adc
xchg
jle
jb
int
hlt
aam
es
dec
cli
cs
jmp
movs
mov
mov
xchg
jp
or
xchg
retf
fs
and
pop
fwait
arpl
stos
(bad)
mov
inc
clc
push
or
out
pop
jp
xchg
iret
mov
add
into
repnz
pop
loope
jne
xchg
lahf
adc
adc
in
jno
dec
push
push
xchg
sbb
jp
mov
sub
(bad)
jnp
test
xchg
int
adc
push
test
xchg
add
add
test
xor
ss
xor
adc
mov
hlt
mov
push
sub
movs
pop
inc
mov
mov
jno
clc
xchg
inc
lahf
in
inc
cmp
cdq
into
push
add
adc
xchg
sub
outs
retf
xchg
icebp
inc
add
sub
jbe
in
cwde
and
icebp
mov
pminub
sbb
in
(bad)
adc
jle
and
sub
nop
dec
xchg
std
mov
pushf
stos
(bad)
jge
xchg
out
mov
imul
enter
adc
mov
pop
test
lea
clc
jne
das
shr
adc
xchg
inc
fild
cli
sub
push
(bad)
adc
xchg
gs
(bad)
out
xchg
jge
jno
(bad)
cs
movs
xchg
xchg
sub
cmp
lock
not
in
out
xchg
(bad)
(bad)
pause
mov
dec
xor
outs
inc
aam
mov
hlt
rcl
adc
sub
push
cwde
sbb
ja
adc
(bad)
daa
xchg
sub
int
not
leave
and
push
bound
sbb
sti
or
adc
xor
dec
test
mov
jno
dec
(bad)
imul
movs
jle
(bad)
adc
add
xor
hlt
fbld
mov
fimul
fnstcw
mov
or
adc
rcr
xchg
ins
xchg
arpl
push
and
xlat
fwait
(bad)
jo
mov
out
mov
adc
ja
push
sub
fistp
lahf
pop
cmp
adc
adc
xchg
aam
fwait
pop
cmp
cmp
aas
stc
fist
pop
xchg
std
inc
movs
(bad)
int3
dec
cmps
jle
dec
xchg
mov
inc
into
sbb
xchg
(bad)
jmp
cmp
arpl
inc
cmp
lahf
rol
pop
mov
sub
push
fwait
xchg
xor
nop
rcl
xchg
jae
cwde
mov
xchg
xor
fcom
cmp
(bad)
or
xchg
sub
adc
inc
add
movs
scas
stc
mov
outs
xor
xchg
fwait
(bad)
cli
jp
fld
mov
inc
shl
xchg
add
or
xchg
sub
xor
jge
add
fstp
xchg
and
lds
iret
dec
and
or
aam
xchg
push
jb
leave
xchg
sbb
lods
in
lea
xchg
add
cld
push
xor
mov
rcr
adc
push
jnp
mov
arpl
jle
fisttp
dec
js
xchg
mov
xchg
in
shr
push
cmp
cmp
inc
cmp
inc
mov
add
xchg
xor
jle
inc
xchg
adc
in
sbb
push
lods
mov
cmp
sub
inc
loope
int3
hlt
sbb
mov
iret
xchg
xchg
retf
push
loope
sbb
idiv
mov
popf
mov
xchg
xor
mov
movs
push
inc
adc
out
xchg
call
setnp
aam
push
ins
(bad)
xchg
in
mov
or
pop
fs
or
sahf
pmaddwd
xor
imul
cmps
repnz
xor
rcr
je
loopne
mul
xchg
sbb
je
adc
(bad)
aam
xchg
and
into
xchg
pop
add
mov
in
add
stos
mov
adc
sbb
popf
dec
xchg
mov
cld
out
mov
or
dec
dec
(bad)
mov
rcr
xchg
mov
cmp
xchg
mov
popa
adc
pop
cmp
(bad)
stos
test
es
cwde
xchg
out
xchg
pop
jl
int
mov
jp
inc
sti
ficomp
xchg
out
mov
mov
adc
inc
scas
xlat
cwde
nop
add
jle
mov
std
xchg
in
add
xchg
ror
cmp
lods
or
mov
adc
push
bound
in
int
mov
(bad)
sbb
(bad)
call
sbb
mov
inc
xchg
jo
cmp
iret
stc
pop
jns
mov
fwait
repnz
fwait
ins
ficomp
cmps
(bad)
jecxz
sbb
push
mov
pop
mov
test
popa
and
sbb
push
call
and
lods
fwait
jmp
loop
jecxz
aam
sbb
jmp
mov
call
xchg
jg
add
retf
mov
rcl
icebp
ret
in
mov
or
push
add
push
mov
ret
pusha
(bad)
(bad)
jle
imul
ins
adc
xchg
cmp
sbb
fcmovu
jl
dec
(bad)
pop
mov
scas
enter
pusha
(bad)
jmp
jg
fcom
adc
jle
mov
ds
mov
cmps
xchg
out
rcr
xor
daa
adc
inc
inc
and
dec
js
xchg
setb
ret
or
aad
mov
push
sete
or
pop
retf
or
xor
mov
pop
pop
xchg
adc
adc
jno
movs
lea
cli
ins
mov
arpl
pop
jns
fild
and
and
shl
cdq
adc
mov
(bad)
fs
push
lods
or
(bad)
fdivr
xchg
cmps
daa
adc
(bad)
push
js
xchg
int
into
call
push
xor
jb
rcr
sub
mov
jo
fnstsw
and
shl
lea
fadd
and
inc
xchg
pop
leave
ret
bound
inc
or
dec
out
je
jge
mov
cmp
mov
mov
adc
fidivr
enter
hlt
scas
xchg
inc
jns
sbb
mov
xchg
pop
fst
push
pop
mov
aam
daa
mov
push
loopne
icebp
ins
in
sub
push
(bad)
clc
lods
push
or
xor
ficomp
jo
fstp
xor
mov
mov
or
xchg
push
mov
fwait
loopne
or
test
push
bnd
or
lods
fsubr
add
cmp
or
cmp
movs
dec
xor
pop
gs
test
cmp
loopne
xchg
rcl
cli
aad
gs
and
push
xchg
mov
hlt
unpcklps
in
sbb
je
mov
xchg
in
mov
push
enter
xchg
out
int3
cmp
in
cmp
mov
cmp
sbb
js
ja
js
mov
xchg
push
push
xor
xchg
or
or
out
sbb
and
retf
mov
xchg
mov
repz
fwait
mov
sahf
mov
cmp
add
mov
aam
push
sbb
mov
retf
adc
xchg
mov
xchg
mov
jbe
jb
cmp
xchg
mov
inc
xchg
cmp
sbb
icebp
test
adc
mov
xchg
movs
ret
or
mov
lahf
mov
popa
fist
pop
xchg
add
jne
cmps
out
mov
pusha
xchg
(bad)
icebp
ins
or
jle
fwait
das
dec
cmps
xor
stos
movs
xchg
leave
(bad)
jl
mov
iret
or
fstp
mov
pop
or
fst
inc
jb
xchg
(bad)
sahf
call
scas
mov
mov
mov
into
out
aam
pop
dec
pop
fbstp
xchg
aam
add
pop
xchg
stos
sti
outs
call
mov
repz
push
adc
fmul
mov
fisubr
cs
movs
mov
cld
xor
imul
mov
jmp
repz
mov
sbb
ins
jbe
inc
jb
pop
aad
and
mov
xchg
js
fld
xor
or
xchg
int
mov
movs
sub
int3
pop
cmp
daa
add
rcr
adc
mov
call
xchg
sub
or
retf
shl
in
sbb
xchg
test
cwde
mov
clc
xchg
xchg
js
faddp
push
cs
lahf
xchg
pop
aas
mov
pop
sbb
enter
setg
das
sar
add
and
(bad)
mov
mov
sar
adc
popf
jp
xchg
repnz
loope
fsubr
or
mov
inc
es
pusha
popf
push
xchg
sub
into
push
cmps
sbb
sub
dec
adc
ret
xchg
push
push
das
mov
mov
aaa
int
xchg
adc
repnz
jne
mov
fistp
rol
fdivp
adc
inc
dec
inc
ins
xchg
mov
xchg
ret
push
dec
mov
sbb
pop
mov
xchg
sub
pop
xchg
sub
ss
(bad)
xchg
int
sbb
dec
xor
dec
movs
ret
(bad)
mov
gs
test
and
ins
enter
call
std
in
or
sub
xchg
js
addr16
sub
add
cmp
xchg
push
sbb
cwde
mov
sbb
retf
mov
mov
jle
mov
fist
ret
mov
xchg
jbe
popf
cmp
inc
xchg
mov
movs
push
out
ds
xor
pop
cmp
xchg
ins
xchg
fimul
pop
xchg
add
leave
ret
inc
mov
retf
inc
mov
mov
ja
gs
sti
pop
fsub
xchg
and
inc
(bad)
out
mov
sub
adc
pop
and
(bad)
lds
rol
xchg
dec
lahf
push
mov
dec
lahf
jp
mov
mov
adc
sbb
popf
cwde
into
mov
ja
mov
sbb
ja
fwait
int
mov
cmps
xchg
out
dec
adc
xchg
adc
dec
cmps
stos
out
mov
xchg
xchg
aam
lods
xchg
(bad)
adc
cmp
push
xchg
mov
pushf
xchg
aam
or
inc
outs
jge
retf
test
xor
mov
xchg
pop
sbb
popf
inc
dec
out
sti
jae
pop
inc
push
adc
inc
mov
mov
mov
movs
clc
xchg
add
mov
shl
xchg
leave
cmp
and
and
sbb
cmp
rcl
jno
dec
hlt
in
int3
xor
rcr
xor
sub
push
add
sbb
aad
ins
jbe
adc
mov
ror
in
out
or
sbb
mov
jbe
mov
inc
je
in
mov
inc
ficomp
fisttp
cmp
mov
mov
mov
ins
jno
stos
mov
or
mov
sbb
fwait
xchg
adc
arpl
xchg
les
xor
cwde
xchg
mov
popf
movs
adc
sahf
lods
xchg
rcl
(bad)
ja
mov
xchg
les
pop
in
push
and
mov
bswap
push
mov
push
repnz
jbe
xor
jle
push
loop
stc
pop
xchg
mov
push
call
xchg
call
scas
popf
xchg
pop
mov
das
pop
inc
fwait
mov
pop
jbe
jle
adc
pop
mov
and
adc
adc
int
xchg
mov
sub
push
std
iret
lods
inc
jecxz
xchg
stc
adc
xchg
xchg
es
(bad)
mov
daa
xchg
mov
in
pop
cmp
push
je
scas
adc
cmp
xchg
mov
bound
xchg
mov
(bad)
sub
fwait
(bad)
retf
jnp
xor
mov
leave
add
sbb
mov
pusha
iret
test
into
cdq
imul
sub
mov
sbb
pop
daa
xchg
(bad)
mov
pusha
test
mov
mov
loop
xchg
cwde
sbb
jb
xchg
arpl
int
rol
mov
pop
movs
stos
mov
push
adc
mov
inc
lea
mov
pop
sub
(bad)
rcl
dec
outs
ja
leave
mov
loopne
(bad)
cmp
daa
aam
inc
std
mov
xor
fwait
dec
out
call
test
and
or
dec
loope
xchg
imul
cli
mov
les
fldenv
mov
(bad)
push
movs
cli
pop
ins
and
xchg
jecxz
enter
push
jb
js
jmp
sub
sub
stos
mov
xor
cmp
jmp
shl
mov
ss
xlat
jb
inc
pop
sub
jne
fst
xchg
imul
mov
sbb
push
ss
pop
xchg
add
mov
mov
adc
push
int
adc
(bad)
pop
inc
loope
aam
fwait
cmp
sub
jno
sti
adc
mov
leave
sub
ret
xchg
adc
or
call
std
rcl
pop
inc
dec
xor
cmps
xchg
dec
scas
jne
enter
mov
dec
xor
cmp
js
push
jmp
ret
ficom
inc
enter
shl
xchg
jnp
stos
sar
bound
mov
xchg
adc
cmp
mov
test
int3
jbe
loop
mov
scas
das
scas
mov
pusha
push
or
ror
shl
fistp
aam
push
test
xor
add
adc
or
int3
movq
xchg
inc
imul
mov
pop
xchg
shl
sbb
ss
jno
sar
mov
pushf
int3
aam
push
adc
dec
ja
cmp
ficom
jg
sbb
fwait
hlt
mov
aam
ror
xchg
ss
ins
add
xchg
(bad)
mov
hlt
sahf
pusha
xchg
dec
into
pop
or
push
pop
xchg
ret
pop
mov
sub
mov
ss
xchg
mov
jmp
push
jb
not
les
into
dec
mov
or
cld
adc
outs
mov
pop
mov
ins
movs
lea
lds
and
cmp
popf
push
test
rcr
mov
loope
mov
mov
ficom
(bad)
adc
sub
cmc
test
xchg
dec
dec
nop
clc
stos
adc
ficom
jne
or
xchg
out
fwait
xchg
push
lock
and
mov
xchg
pop
ficomp
sub
xchg
(bad)
ss
sbb
add
mov
sbb
push
outs
xchg
daa
mov
mov
xchg
mov
iret
and
(bad)
sahf
aaa
xchg
test
xchg
sbb
or
push
xchg
in
inc
into
xchg
xchg
das
sbb
sbb
jo
(bad)
imul
nop
xchg
adc
cmp
xchg
dec
inc
mov
and
inc
mov
lahf
cmc
push
sbb
popf
aas
adc
fcom
add
lods
lahf
pop
sbb
cmp
in
cli
push
mov
movs
fiadd
test
or
xor
xchg
pop
in
jecxz
inc
push
imul
push
mov
inc
sbb
mov
xchg
int3
loope
mov
nop
mov
pop
cmps
outs
xchg
xchg
dec
sub
nop
lds
int3
enter
loope
adc
sar
push
adc
pop
sahf
xchg
unpcklps
inc
xchg
sub
or
pop
adc
xchg
adc
xchg
loopne
inc
pop
sbb
xor
mov
pop
and
arpl
adc
sub
cmps
mov
xchg
fadd
add
mov
leave
inc
cmp
mov
mov
xchg
sbb
xchg
jle
push
mov
lea
popf
xchg
js
sbb
inc
fwait
outs
test
popa
es
dec
xchg
push
pop
or
rcl
xchg
jne
sub
loop
test
cwde
clc
std
sub
mov
push
add
push
cmp
pop
jns
xchg
icebp
repz
repnz
inc
into
xchg
je
(bad)
fnstsw
das
xchg
iret
pop
icebp
sbb
(bad)
es
je
aas
xchg
js
add
cli
sub
pop
addr16
xchg
clc
mov
cmp
inc
adc
int
scas
fnstenv
aam
add
mov
jecxz
xchg
jb
movs
cmp
or
push
in
fisttp
or
jb
mov
xchg
push
aas
nop
test
out
mov
in
jle
adc
add
aaa
xchg
mov
jmp
xchg
mov
pop
cdq
xchg
sub
and
loop
xchg
xor
or
xchg
sahf
xchg
iret
and
sbb
sar
inc
jg
pop
dec
cdq
xchg
mov
(bad)
imul
ror
mov
cmps
xor
xchg
jp
call
pop
jmp
movs
and
cdq
mov
(bad)
ss
ret
ficom
(bad)
pushf
xchg
pop
out
(bad)
jmp
in
icebp
mov
and
int3
vcvtsi2sd
xchg
cwde
imul
jns
in
xchg
mov
addr16
sub
and
xchg
sub
adc
mul
sbb
cld
adc
cs
xchg
stos
pop
in
mov
mov
dec
repz
sub
cmp
adc
add
xchg
pusha
out
and
jmp
addr16
popf
mov
imul
aam
ror
test
mov
cmp
mov
mov
ret
cmps
push
call
and
hlt
mov
push
test
in
mov
int3
or
xchg
mov
mov
es
jecxz
xchg
xchg
xor
sbb
push
xchg
call
fistp
call
xchg
mov
dec
xor
add
xchg
sub
mov
jp
add
fidiv
movs
xchg
mov
cmp
adc
mov
xchg
nop
push
push
stos
repnz
add
je
or
mov
shr
rcr
fcomip
pop
aam
xchg
arpl
not
xchg
and
mov
pop
test
int3
jle
fwait
mov
adc
push
je
mov
mov
sub
rcr
jl
inc
nop
arpl
mov
xchg
xchg
movs
xlat
dec
jmp
aas
(bad)
or
inc
mov
mov
rol
sub
jns
and
pop
fadd
into
add
adc
lods
add
mov
push
xchg
fidiv
aam
lods
outs
mov
ffreep
xchg
lods
dec
rcl
dec
push
mov
arpl
std
xchg
inc
add
cmovb
jno
ins
mov
pop
xlat
ja
adc
jle
mov
xchg
scas
pop
jno
inc
jl
in
sbb
mov
and
ret
call
loope
loop
fisttp
fisub
das
xchg
test
sbb
out
pop
xchg
(bad)
pop
jp
(bad)
cmc
pop
jb
mov
in
xor
(bad)
hlt
push
pop
mov
push
dec
dec
add
fst
inc
popa
push
xchg
jo
ret
sub
pop
jg
and
or
call
ficomp
xchg
imul
push
cmc
fwait
(bad)
dec
jb
mov
in
movs
hlt
xor
cli
enter
int3
inc
add
push
in
and
push
in
outs
nop
mov
fadd
add
rcl
jns
mov
jo
rol
xchg
push
div
sti
pop
xchg
dec
daa
push
pop
adc
inc
mov
ja
out
js
and
fimul
movs
iret
push
aam
mov
call
mov
xchg
mov
stos
repz
js
pop
cmps
test
mov
sub
inc
xchg
cmps
out
addr16
and
lds
pop
lods
jbe
push
push
add
jae
cmp
xchg
jo
cs
sar
xor
sbb
mov
and
adc
pop
test
js
jno
nop
push
mov
xchg
xchg
mov
fs
push
xchg
cmp
std
xor
mov
fdivr
lds
add
fwait
das
popf
pextrw
mov
pop
xchg
bound
leave
xchg
lock
pop
(bad)
cmp
loope
or
xchg
addr16
mov
mov
stc
cs
mov
lahf
xchg
pop
cli
in
mov
(bad)
stos
jmp
hlt
adc
push
jl
xchg
cdq
push
(bad)
mov
cmp
push
mov
mov
gs
sub
into
shl
pop
or
xor
nop
shr
xchg
inc
(bad)
pop
add
xchg
xchg
sub
retf
xchg
out
je
jbe
jg
xchg
mov
mov
xlat
ins
add
dec
call
xchg
adc
xchg
sub
xor
xchg
inc
idiv
stos
add
nop
dec
aas
fld
xchg
and
cmps
lock
sar
fcom
imul
cmps
jecxz
mov
cmp
xchg
jle
fisttp
cld
mov
dec
repnz
dec
xchg
cdq
sti
mov
xor
inc
movs
mov
out
dec
mov
xchg
ds
inc
jge
enter
sbb
jae
cmp
test
je
xchg
clc
loopne
fldenv
popf
cmp
loope
jnp
test
jbe
ret
jl
retf
xchg
pop
repnz
jge
add
stos
cmp
xchg
mov
test
xchg
xchg
add
mov
not
shr
pusha
xchg
fmul
xchg
xchg
sti
cs
mov
and
add
xor
icebp
push
mov
clc
cld
scas
inc
push
sbb
or
or
xor
xor
or
xchg
push
adc
xchg
dec
cld
dec
pop
stos
rcl
sahf
iret
xchg
jecxz
leave
aad
pop
adc
and
xor
adc
mov
mov
aam
mov
xchg
xor
inc
sbb
cmp
push
movs
xchg
loope
scas
xchg
mov
ret
pop
es
ret
std
sar
xor
mov
mov
cmps
xchg
scas
xchg
add
or
cdq
or
xor
xchg
mov
or
xchg
xchg
enter
ja
imul
mov
sbb
rcr
xchg
or
mov
push
inc
icebp
add
sti
loop
fwait
aaa
lods
mov
cs
mov
inc
mov
inc
pop
pop
icebp
inc
cmp
mov
push
inc
xchg
retf
cdq
sahf
mov
mov
xor
push
outs
mov
xchg
mov
stos
sbb
sub
inc
sti
push
xchg
ret
mov
xchg
in
popa
push
aam
xor
(bad)
xchg
cdq
cmps
int
call
cmp
mov
sbb
cmp
jno
shr
or
xchg
out
imul
popf
xor
mov
adc
or
rcl
stos
xor
and
leave
or
xchg
push
std
inc
ror
fbstp
xchg
xor
ret
shl
mov
push
mov
cld
pop
mov
xchg
jae
mov
jb
les
in
ins
xchg
pop
adc
sub
sbb
add
arpl
mov
pusha
xchg
dec
jbe
mov
call
or
lock
pop
sbb
call
leave
lea
pop
cmp
and
rcl
inc
clc
or
jo
arpl
jmp
(bad)
jecxz
xor
xchg
ins
std
and
lods
xor
push
pop
xchg
xchg
mov
pusha
test
paddw
fild
jne
adc
jl
cmp
push
ss
(bad)
jg
xchg
imul
xchg
arpl
dec
adc
and
aam
mov
fwait
xor
xchg
pop
xchg
dec
mov
je
xchg
ins
cmps
adc
xchg
hlt
push
dec
(bad)
int
mov
in
gs
addr16
mov
xor
pop
jg
ss
xor
xchg
cmps
outs
and
inc
das
into
inc
aaa
xchg
je
sub
ins
mov
aas
cmp
pop
dec
int
mov
mov
imul
(bad)
and
dec
mov
adc
and
fnsave
inc
mov
xor
xchg
repnz
mov
hlt
ret
aas
es
xchg
into
outs
les
sub
sbb
and
mov
jp
jl
data16
ins
xchg
repnz
mov
add
icebp
adc
adc
push
sub
xchg
aad
push
shl
imul
xchg
fisubr
test
fisub
add
jecxz
inc
xchg
pushf
cmp
jae
xor
out
pop
adc
(bad)
std
push
or
outs
xchg
je
(bad)
adc
fisttp
push
xchg
or
test
push
mov
rol
ret
inc
call
cmp
mov
je
jmp
jnp
xchg
push
outs
mov
or
cld
xor
xchg
out
jecxz
sub
push
mov
jle
nop
inc
mov
fwait
and
cmp
call
stos
mov
xchg
js
mov
cmps
sar
sub
into
mov
cmc
mov
movs
mov
pop
jne
xchg
pushf
and
div
loop
out
lahf
clc
fwait
jg
dec
mov
jnp
popa
xlat
push
xor
scas
or
ja
(bad)
adc
out
js
pop
or
dec
mul
dec
push
scas
mov
fst
out
lods
dec
nop
jmp
mov
xlat
call
js
xchg
mov
push
push
push
in
outs
mov
mov
xchg
cmps
sbb
or
xchg
loope
dec
outs
xor
sub
adc
(bad)
fistp
cmps
xchg
mov
dec
fs
sbb
out
mov
cmp
adc
xchg
jge
fwait
xor
xchg
call
ficomp
fwait
stos
outs
xor
inc
shl
xchg
adc
jae
mov
and
mov
in
jle
xchg
pop
dec
xchg
push
(bad)
hlt
imul
jmp
mov
xchg
mov
and
(bad)
mov
cmp
imul
xchg
pop
mov
stos
es
mov
adc
xlat
xchg
cld
xchg
dec
mov
das
xchg
iret
pop
mov
mov
out
add
es
sbb
mov
adc
xchg
cs
pop
pusha
xchg
dec
movs
fdiv
or
lds
sub
mov
mov
hlt
out
ins
bound
inc
lods
iret
adc
out
loopne
pop
and
(bad)
loope
stos
mov
sub
mov
mov
dec
in
je
adc
rcr
data16
(bad)
enter
cmps
mov
jle
aam
les
out
xchg
pop
rcl
push
or
jmp
xchg
retf
hlt
fwait
add
mov
test
cwde
mov
data16
and
aam
cs
xchg
popa
std
mov
jno
test
xchg
add
inc
cmp
cdq
push
ret
sti
(bad)
sub
ins
mov
call
adc
adc
not
fmul
xchg
xor
mov
(bad)
sbb
jg
out
popf
fwait
push
add
push
sar
xchg
push
xchg
leave
aad
cwde
ja
mov
ret
add
lock
addr16
(bad)
rcr
bound
xchg
outs
(bad)
sbb
loop
cmc
es
into
dec
add
imul
ficom
jne
jae
sub
inc
push
das
mov
xchg
fst
cdq
dec
xchg
push
cmp
mov
jp
aam
inc
xchg
jl
jg
fisub
loop
cwde
pusha
xlat
or
xchg
mov
test
mov
scas
sbb
call
jg
xchg
mov
pop
xor
adc
xchg
js
push
adc
or
outs
pop
out
(bad)
into
ds
gs
mov
dec
xchg
cmp
xchg
sub
add
neg
lods
xchg
sbb
les
adc
mov
aam
add
sbb
in
ret
mov
dec
mov
mov
and
movs
jp
cwde
and
xchg
push
out
adc
xchg
sub
add
inc
lahf
mov
xchg
into
xchg
add
mov
in
sbb
mov
dec
mov
mov
xchg
mov
movs
mov
inc
clc
xchg
push
call
les
adc
fcomi
mov
cmp
dec
loopne
jb
xchg
int3
pop
dec
mov
add
adc
lods
sbb
dec
aad
lahf
pop
jg
inc
xchg
ins
test
jae
xchg
rcl
dec
or
xchg
(bad)
fistp
cmps
xchg
dec
inc
das
ss
pop
and
xchg
pop
jle
test
mov
mov
pop
rcl
and
jg
retf
mov
xor
xchg
xor
mov
inc
icebp
xchg
jae
jo
ins
retf
xchg
lahf
xchg
call
in
(bad)
aad
mov
loopne
imul
dec
xchg
retf
mov
ds
cmps
int
jmp
fwait
push
sub
mov
hlt
and
call
push
lahf
and
(bad)
xor
mov
adc
std
scas
pop
mov
xor
js
xchg
xchg
mov
cmps
ins
xchg
outs
jne
push
imul
sbb
xchg
and
fst
xchg
iret
mov
jns
lds
pop
xchg
or
xor
jmp
(bad)
push
push
xchg
rcl
sub
push
(bad)
mov
xchg
cmps
adc
mov
sub
cdq
mov
fadd
push
sbb
add
xchg
sahf
ins
mov
add
sub
test
lahf
or
xchg
es
ds
cwde
push
mov
mov
adc
test
pusha
jl
xor
push
clc
popf
push
imul
and
out
enter
imul
fadd
inc
or
fcmovnb
lods
xchg
test
stos
xchg
xchg
daa
jmp
jo
mov
loope
stos
xchg
cs
sub
mov
idiv
hlt
pusha
jo
cmp
jb
sahf
pop
xchg
outs
(bad)
loopne
xchg
js
je
adc
cmp
adc
pushf
xchg
xor
in
test
mov
retf
rcl
dec
pop
jne
nop
jg
repz
mov
jmp
mov
add
mov
push
in
and
popf
gs
fisttp
dec
xchg
inc
xor
popa
leave
inc
adc
pop
imul
mov
in
jno
aam
dec
jmp
cdq
jo
mov
mov
ffreep
cmps
mov
gs
iret
xchg
ret
or
adc
add
mov
jg
xchg
nop
dec
dec
jne
cmp
int3
sub
or
(bad)
repz
pop
cmps
sar
rcl
sbb
or
sbb
add
test
in
inc
and
lock
add
or
cwde
sub
add
cmp
sbb
sbb
adc
stc
ins
and
xchg
cmps
fild
hlt
xchg
cmp
bound
test
out
(bad)
jno
add
xchg
in
xor
xchg
push
xchg
lods
lea
into
mov
hlt
fistp
lock
mov
rcl
cdq
xchg
mov
and
mov
add
pop
call
fst
sbb
jl
mov
lods
xchg
and
mov
sbb
jns
adc
loop
and
or
mov
aam
in
fmul
add
xchg
sbb
rol
(bad)
xchg
mov
pusha
cmps
push
test
fcomp
adc
mov
xchg
repz
xor
mov
add
xchg
out
sbb
dec
movs
or
jecxz
ja
mov
popa
xor
mov
scas
je
xchg
pop
xor
pop
data16
sbb
outs
mov
ficomp
push
inc
pop
mov
aad
les
xor
sub
adc
or
mov
xchg
out
cdq
mov
shl
fisub
ret
aad
ss
push
add
mov
sbb
aam
sub
jmp
inc
xchg
mov
repz
push
mov
pusha
mov
push
sbb
xchg
lods
sbb
in
mov
test
stc
sub
adc
cmp
cmp
pop
dec
dec
push
stos
push
xchg
ins
xor
mov
push
mov
adc
add
jge
inc
push
xchg
repnz
fsub
jmp
xchg
adc
pop
push
movs
xchg
xchg
cli
iret
pop
mov
xchg
and
dec
test
push
pop
mov
jb
jl
test
push
mov
xchg
jne
mov
sub
inc
rol
imul
push
mov
xchg
and
add
cwde
or
inc
test
push
jmp
pop
sahf
xchg
xchg
repnz
je
or
(bad)
aad
and
or
or
mov
jmp
out
es
bound
mov
mov
mov
sbb
add
int3
add
xchg
jge
sub
not
mov
and
cmp
mov
int
fidivr
mov
add
or
das
enter
mov
stos
push
cs
es
jmp
push
aas
dec
add
xchg
loop
sar
xchg
test
sbb
sahf
xchg
leave
popf
rcl
das
or
xchg
jl
xchg
shl
arpl
popf
sub
fild
dec
mov
adc
adc
fmul
xchg
aas
test
jmp
sbb
popa
arpl
nop
test
loopne
pop
xchg
adc
or
and
dec
ds
mov
xchg
std
stos
lods
lods
mov
test
mov
xlat
mov
mov
aaa
mov
aas
dec
fcomip
daa
pushf
xchg
addr16
xchg
push
inc
retf
dec
add
(bad)
xchg
mov
dec
stc
xchg
out
xor
mov
rcr
inc
outs
lds
(bad)
xor
fstp
push
shl
xchg
xchg
(bad)
mov
push
hlt
xor
mov
xchg
call
jns
fst
scas
fistp
sub
and
inc
mov
daa
xchg
jne
lods
pop
retf
pop
inc
cmp
cdq
and
jns
xchg
xor
lds
jb
adc
xchg
sbb
xchg
out
movs
mov
adc
in
xchg
out
xchg
out
pop
in
scas
mov
shl
push
les
add
xchg
iret
and
mov
xchg
xchg
into
push
es
jecxz
mov
arpl
xchg
pushf
fucomi
sbb
call
fwait
adc
jae
sub
fcom
dec
imul
test
cwde
sub
sub
cdq
push
retf
xchg
fst
jge
xchg
fsub
mov
push
add
lea
adc
push
pushf
loop
scas
les
(bad)
sub
test
shl
xchg
(bad)
add
cmc
push
into
jo
adc
leave
push
or
adc
in
and
xchg
cmps
in
mov
xchg
pop
out
jmp
xor
jge
mov
push
ins
sub
mov
test
ret
scas
mov
fs
mov
xchg
jnp
mov
dec
data16
xor
jmp
add
aam
xchg
mov
pusha
lds
repz
adc
aam
jno
mov
add
add
lds
mov
or
enter
arpl
mov
sti
fistp
xchg
or
cmps
dec
cmp
lods
je
xchg
jb
mov
sub
push
test
neg
mov
popa
cmps
(bad)
mov
stc
mov
xor
gs
fild
or
xlat
mov
mov
ror
or
outs
mov
mov
fisttp
mov
or
pop
retf
xchg
inc
rcr
stos
sahf
adc
jae
cmc
sub
imul
xchg
pushf
mov
cmp
rcr
xchg
jne
mov
dec
push
aas
xchg
test
and
call
mov
push
jp
or
(bad)
(bad)
mov
xor
mov
mov
aas
sub
xchg
xor
test
inc
imul
jle
(bad)
jno
xor
nop
(bad)
push
push
sbb
aaa
aam
stc
pop
mov
fwait
call
fisttp
xchg
mov
nop
dec
and
jb
adc
push
popa
fsub
push
mov
adc
(bad)
pushf
ss
xchg
mov
idiv
(bad)
sbb
sahf
pop
push
mov
xchg
ja
lock
xchg
mov
xchg
sub
ja
xchg
retf
mov
mov
push
ret
push
xor
add
fistp
dec
pop
dec
cld
xchg
fwait
mov
pop
sub
xchg
adc
xchg
mov
ds
adc
cmp
xchg
mov
mov
push
loop
out
cli
xchg
outs
pop
mov
jno
cdq
xor
mov
aam
push
sbb
inc
sbb
jo
mov
xchg
sahf
movs
adc
mov
sub
mov
pop
cli
sub
cmp
cmp
xor
inc
cwde
out
jl
xchg
sub
mov
or
jnp
bound
fwait
xchg
outs
push
loop
js
sub
xchg
lods
int3
fcomp
xchg
adc
les
pop
push
xchg
ja
xchg
addr16
aaa
rcl
dec
lds
jmp
aam
jb
push
mov
xchg
ds
retf
fdiv
stos
add
xchg
out
cmps
push
cmc
outs
stc
sub
xchg
mov
xchg
push
xchg
inc
ss
test
in
ins
pop
rcr
dec
arpl
mov
cmp
pop
and
clc
jp
cmp
xchg
mov
jns
rcl
lods
data16
jo
inc
jl
pop
xchg
or
dec
pop
mov
push
cmp
jne
rcr
xor
cwde
push
fdivr
mov
xchg
lock
mul
dec
adc
xchg
push
xchg
cmps
xchg
inc
xchg
pusha
push
push
div
psubusw
adc
xchg
mov
add
ds
mov
lds
mov
xchg
xor
out
cmps
cmp
sub
lea
inc
push
xchg
push
adc
mov
jmp
or
fxch
and
or
adc
xchg
jbe
xchg
cli
inc
jbe
cmps
jle
push
pop
mov
lods
stos
movs
ss
shl
push
test
pop
pop
outs
repnz
xchg
in
shl
mov
out
in
xchg
jecxz
add
mov
fdiv
cmp
mov
fs
aam
lods
inc
mov
dec
enter
mov
jmp
fcom
cmps
xchg
nop
pop
fmul
adc
int3
sahf
mov
imul
stos
jge
xor
out
sti
push
and
jo
iret
xchg
std
cmps
and
and
ins
lods
in
inc
enter
push
sub
cmp
cdq
xchg
mov
int
pop
hlt
cmp
imul
mov
lods
lods
test
jmp
lahf
jae
mov
mov
movs
and
fwait
dec
xlat
pop
cs
fs
cmp
inc
push
iret
sub
sub
rcr
adc
xlat
mov
fwait
stc
ret
mov
addr16
bound
adc
popf
loope
repz
xor
mov
mov
jl
jae
int
call
aam
dec
pop
xor
int3
mov
xchg
je
xor
or
enter
hlt
sbb
in
xchg
pop
push
mov
nop
xchg
push
rcr
xor
mov
xchg
loop
push
xor
xchg
and
inc
popf
xchg
setnp
xchg
pushf
xor
add
inc
aad
mov
sahf
addr16
xchg
xor
mov
lahf
dec
mov
or
xchg
push
add
sbb
mov
fwait
shl
mov
adc
test
push
sub
mov
jns
imul
xchg
mov
test
lds
push
ror
fwait
aaa
data16
xchg
jno
xlat
xor
jl
xchg
xchg
sar
fwait
std
inc
mov
adc
stos
(bad)
mov
ror
test
movs
in
xchg
call
mov
xchg
repnz
les
cdq
addr16
cmps
sbb
push
stos
xchg
push
and
popa
mul
ss
and
mov
inc
popa
das
int
fsub
dec
ret
xor
add
xchg
push
imul
jns
mov
lahf
in
xchg
pop
xlat
cmp
fmul
js
mov
xchg
or
icebp
jecxz
dec
xchg
push
cld
adc
xchg
sbb
in
sbb
fdivp
mov
mov
ficom
inc
stos
cmps
xchg
retf
test
shl
xchg
(bad)
movs
mov
out
into
arpl
bound
mov
iret
cmp
jo
js
mov
int3
(bad)
or
pusha
mov
cmp
repz
xchg
mov
pop
and
ss
ficomp
pop
sub
call
sub
xchg
push
push
aaa
xchg
inc
and
dec
int3
dec
popf
xor
pop
mov
fiadd
ror
xchg
xor
xor
push
sub
pop
or
fidiv
pop
retf
dec
mov
push
jb
xchg
cdq
dec
xchg
pop
call
xchg
pusha
and
mov
sub
cmp
cmp
xchg
mov
jp
pop
add
sar
lods
xchg
aaa
xchg
inc
in
into
scas
ja
shr
aas
outs
inc
pop
js
xchg
fwait
das
push
lods
inc
mov
ja
int
aad
mov
inc
add
cmps
xor
loope
in
jo
xchg
or
xchg
xchg
repnz
fwait
pop
hlt
call
cwde
xchg
aas
mov
pop
pusha
xchg
sub
push
cdq
rcl
test
test
adc
xchg
(bad)
cmp
aas
or
add
sbb
inc
jle
retf
xchg
sbb
dec
das
dec
stos
les
xchg
dec
data16
inc
mov
int
in
or
sub
pusha
and
sbb
gs
mov
xchg
pop
dec
out
stos
xchg
add
in
push
mov
mov
aaa
xchg
jne
(bad)
fst
daa
adc
je
aad
ds
sub
sti
fwait
je
aam
dec
je
or
xchg
ds
rcr
inc
ss
xchg
push
sub
out
mov
imul
cmp
ds
sub
xchg
add
add
mov
mov
cmc
int3
adc
(bad)
adc
test
mov
sbb
pop
xchg
mov
repnz
jnp
cdq
push
xchg
pop
cld
xchg
mov
jl
xchg
xchg
aas
cmp
adc
mov
add
mov
pop
mov
push
adc
out
fadd
ror
in
rcl
popf
dec
movs
xchg
cld
push
add
lods
repnz
jmp
xchg
xchg
repz
jns
sbb
(bad)
xchg
mov
sub
xchg
push
and
test
test
mov
cmp
fdivr
clc
fs
xor
fwait
mov
mov
dec
dec
xor
sar
repz
mov
push
aaa
sub
cmps
and
aam
dec
adc
loope
adc
xchg
xchg
out
push
test
shr
pop
adc
adc
add
dec
push
cwde
fwait
add
into
adc
aaa
jmp
cmps
int3
xor
dec
ins
shl
mov
cmp
movs
xchg
ret
(bad)
in
xchg
clc
jecxz
jae
cmp
dec
jb
jmp
aam
test
xor
xchg
daa
aaa
iret
mov
loopne
dec
ja
xchg
daa
inc
mov
push
jge
mov
addr16
xor
cmp
int3
bound
sub
lods
dec
ins
stc
xor
out
xchg
test
aam
bound
push
xor
scas
hlt
sbb
ins
mov
jle
or
lock
daa
push
xor
jnp
fst
jns
and
xchg
daa
loop
adc
fld
lock
cli
(bad)
(bad)
xchg
mov
pop
js
into
xor
stos
and
xchg
push
test
adc
into
into
mov
xor
leave
outs
xchg
push
sbb
test
xchg
and
in
and
div
mov
dec
int
xchg
jecxz
aam
in
cmp
and
mov
aas
xchg
xchg
dec
ins
aaa
stos
adc
adc
imul
ret
fiadd
mov
cmp
cdq
repnz
les
fwait
add
mov
inc
nop
(bad)
mov
dec
fwait
lahf
pop
fsubr
test
jnp
xor
aad
xchg
inc
loop
push
enter
xchg
test
jbe
arpl
ins
iret
sub
xor
xchg
je
xchg
cli
xchg
pop
cmp
into
(bad)
jnp
imul
xchg
inc
sub
xchg
das
xor
or
pushf
popa
jmp
add
int
mov
add
std
stos
or
stc
mov
dec
mov
movs
xor
mov
mov
shr
mov
sbb
jbe
fst
enter
imul
xlat
push
out
lahf
mov
mov
ins
inc
repnz
out
xchg
sub
dec
or
and
sbb
push
adc
scas
inc
aam
hlt
sub
mov
cmp
sbb
pop
push
test
xchg
sub
xor
add
call
dec
jge
mov
mov
pop
and
push
xchg
jecxz
xchg
xor
daa
push
out
in
ret
xchg
pop
and
pushf
cmp
popa
mov
aad
adc
inc
and
(bad)
shl
xchg
inc
cmp
mov
les
xchg
mov
or
stos
aaa
jae
xchg
clc
fcmove
or
push
mov
(bad)
rol
test
cmp
in
pop
js
xchg
outs
pop
adc
call
lods
xchg
daa
shr
into
or
mov
ds
or
leave
std
sbb
mov
xchg
out
stos
pop
pop
pop
je
cmp
adc
or
mov
mov
into
mov
xchg
std
aas
add
mul
jp
xchg
and
xor
push
xchg
shl
push
rcr
add
out
and
dec
dec
adc
dec
mov
push
daa
xchg
out
mov
clc
stos
mov
int3
fwait
mov
shl
not
pushf
adc
xchg
loopne
inc
jmp
loope
test
xchg
adc
scas
or
push
cmc
mov
mov
mov
call
mov
js
sar
and
(bad)
xor
xchg
sahf
mov
dec
xchg
scas
cdq
jno
cmp
xchg
adc
imul
iret
xor
fst
shl
js
jns
int3
lods
in
test
xchg
(bad)
popf
jb
sub
xchg
xchg
fwait
pop
jae
mov
shr
aam
cwde
sbb
adc
xor
xor
cmp
push
inc
cmp
xchg
ins
jmp
hlt
daa
call
push
(bad)
gs
xor
jno
out
test
jmp
mov
fwait
lds
mov
sub
out
daa
dec
mov
(bad)
imul
adc
aam
xchg
scas
xchg
sahf
scas
ucomiss
dec
stos
adc
push
jg
mov
mov
and
fs
fwait
ror
mov
pop
xchg
xchg
pop
push
inc
ret
enter
call
outs
and
inc
fld
sbb
fild
jo
mov
lds
xor
cmp
jbe
jl
aam
mov
loope
jp
es
dec
into
xchg
rcl
stos
mov
je
je
pop
mov
adc
fwait
pop
pop
xor
aam
inc
mov
inc
test
mov
shr
inc
push
jmp
leave
fwait
or
fs
jecxz
cdq
jmp
xchg
and
inc
fs
fwait
or
shl
push
jmp
mov
cmps
std
jbe
test
sbb
out
jmp
inc
in
jle
inc
dec
sub
es
adc
fst
mov
adc
loopne
jecxz
adc
jg
cmc
lock
fisttp
mov
push
sub
or
test
loop
push
mov
pop
data16
in
mov
xchg
aad
add
pop
test
out
daa
xchg
cmc
cmp
mov
push
scas
jg
adc
out
mov
repnz
cmp
bound
cwde
shr
test
xchg
icebp
push
sub
lock
mov
loopne
xchg
in
dec
xor
jbe
xchg
les
shl
and
xchg
push
fsub
movs
inc
jmp
mov
mov
xchg
jnp
add
sti
dec
push
sub
movs
adc
fiadd
daa
fisttp
and
xchg
sbb
mov
sub
mov
mov
call
nop
pop
xchg
je
repz
gs
xchg
mov
dec
inc
mov
imul
repz
sbb
not
xchg
add
push
sbb
add
xchg
outs
test
cdq
aam
xor
xchg
mov
test
xchg
pop
sbb
test
xchg
pop
repnz
cmp
(bad)
mov
dec
xchg
mov
or
lods
ds
ja
xchg
push
jno
push
jbe
adc
xchg
sub
mov
adc
mov
fidiv
mov
jge
outs
pop
xlat
pop
adc
push
and
sbb
ja
std
jge
jecxz
cmps
fwait
dec
movs
xchg
dec
out
es
inc
mov
xchg
inc
cwde
jmp
hlt
xchg
out
mov
mul
push
psubusw
add
and
or
lock
lods
xor
aaa
test
adc
stos
sti
aam
popa
div
mov
xor
cmp
loopne
xchg
sub
(bad)
mov
jle
jns
and
push
movs
xchg
(bad)
xchg
bound
and
mov
popa
xor
fidivr
data16
shl
adc
js
jb
aas
or
cmp
cmp
retf
out
movs
jge
mov
cmps
repnz
lods
ins
adc
xor
enter
fwait
xor
lock
push
out
mov
mov
sbb
pop
fisubr
icebp
dec
or
xchg
popf
shl
std
retf
cmp
arpl
scas
ss
call
mov
lea
cdq
and
push
jne
mov
test
xchg
pop
sbb
or
out
xor
fiadd
xor
or
scas
xchg
shl
enter
cli
repz
imul
xor
js
es
cdq
xor
or
xchg
not
adc
xor
and
push
rcl
add
xchg
xchg
inc
xor
arpl
xlat
xchg
mov
sub
xchg
mov
loopne
sbb
ins
fwait
push
stos
jns
dec
pop
inc
jns
push
ds
rol
in
adc
lds
icebp
mov
test
adc
cwde
jle
push
cmp
out
xchg
xor
push
xor
mov
ins
stc
test
imul
mov
pop
sub
aad
jmp
stc
xchg
mov
ja
or
imul
xor
mov
(bad)
je
pop
sbb
add
fwait
test
ror
sti
adc
add
mov
mov
popa
stos
mov
xchg
cmp
xor
adc
xchg
ins
in
xchg
lods
adc
or
lock
fwait
pop
mov
push
mov
adc
xor
jge
lods
fs
or
add
ret
dec
(bad)
pop
not
xchg
sahf
jmp
cwde
mov
sbb
xchg
iret
push
stc
sub
in
in
xchg
int3
fsubr
cmp
xchg
pushf
int
inc
in
iret
xchg
fwait
push
mov
pop
inc
ins
stc
lahf
xchg
cmp
jno
out
cwde
out
mov
(bad)
fs
cmp
xchg
add
xchg
rol
or
xchg
out
loop
push
icebp
mov
xchg
inc
les
xor
jb
data16
scas
jge
arpl
dec
out
cld
push
xor
imul
xchg
aam
rol
sub
ss
and
mov
popa
jl
dec
xchg
loop
mov
das
mov
leave
shl
adc
jmp
xchg
xchg
(bad)
mov
xchg
push
ins
jnp
and
ficom
in
cmp
mov
mov
fisub
dec
std
fcmovu
xlat
shl
out
mov
mov
sahf
outs
push
cmp
adc
mov
cmp
xchg
xchg
les
(bad)
xchg
scas
add
ret
fnsave
mov
hlt
push
sub
dec
out
cmp
push
jmp
addr16
mov
mov
or
lahf
xchg
les
push
and
frndint
out
xchg
(bad)
ins
pop
inc
adc
jmp
xchg
test
mov
adc
stos
push
xchg
sbb
sahf
iret
sbb
xchg
not
fimul
inc
pop
xchg
loope
es
scas
and
das
cmc
cmp
adc
xchg
cdq
xchg
push
mov
lea
xchg
mov
aaa
push
loopne
inc
cmps
xchg
xor
in
cmp
call
fcmovbe
popf
lods
push
inc
mov
xor
pusha
adc
mov
sbb
rcl
jg
adc
icebp
pop
call
ja
ror
test
ret
enter
mov
rcl
adc
imul
push
fwait
pop
add
(bad)
std
test
push
xchg
popa
xor
xrelease
adc
jne
aad
jg
ins
loope
pusha
xchg
fnstenv
movs
cmp
inc
xchg
nop
iret
dec
jb
(bad)
jl
bt
cmc
test
fwait
aaa
adc
stos
popf
sub
xor
js
mov
push
std
and
fidiv
xchg
call
sub
imul
push
xchg
stos
inc
adc
test
scas
rcl
cmp
cmp
jg
lds
xor
xchg
and
in
fcmovnbe
sub
call
jmp
hlt
cmp
mov
xchg
outs
inc
xor
inc
cmp
in
xchg
mul
les
inc
adc
xchg
frstor
ficomp
es
mov
adc
(bad)
(bad)
in
rcl
inc
mov
xchg
scas
ret
mov
iret
pop
int3
(bad)
adc
jnp
popa
mov
imul
(bad)
adc
cld
je
fnstenv
adc
test
xchg
icebp
xchg
scas
movs
xchg
xchg
mov
cmps
shr
cmps
out
out
fwait
dec
and
xchg
jns
xor
or
les
stos
cmp
pop
push
jmp
call
test
shl
movs
xchg
fwait
(bad)
adc
shl
xchg
and
dec
mov
or
jle
add
mov
adc
xor
xor
cmc
movs
ins
fwait
cmp
pop
jp
aam
jge
loope
sqrtps
jnp
and
repnz
jae
int3
dec
mov
rcr
retf
call
mov
inc
shr
ret
xchg
pop
inc
mov
mov
in
or
cmps
fwait
adc
hlt
pop
jp
xor
pop
mov
push
sub
in
(bad)
xor
pop
mov
mov
cmps
and
(bad)
push
test
push
xchg
inc
adc
add
mov
and
bnd
xchg
pusha
xor
mov
or
fldcw
xchg
adc
dec
test
cmp
mov
mov
cdq
retf
dec
repz
pop
xchg
mov
addr16
out
push
rcl
shl
jmp
stc
pop
lock
xchg
jle
in
mov
(bad)
xchg
add
dec
mov
out
pusha
or
or
clc
test
xchg
cmp
fwait
test
xchg
int3
shl
arpl
adc
jle
xchg
push
push
daa
aad
xchg
stc
xchg
adc
or
test
pusha
cs
inc
or
sub
xchg
(bad)
arpl
sbb
aam
in
out
pop
dec
adc
(bad)
push
movs
sub
xchg
jbe
dec
ret
xchg
mov
hlt
popf
jb
inc
test
jmp
lock
adc
push
mov
aaa
sbb
dec
jbe
add
cmp
and
sti
int3
xchg
nop
loop
int
(bad)
fsub
jnp
xor
xor
xchg
mov
sbb
mov
out
cld
or
xchg
jne
rcr
shl
push
sub
push
fstp
cli
or
pop
jo
(bad)
mov
xchg
test
adc
stc
xchg
cmc
inc
xchg
jle
mov
mov
stos
in
push
xchg
loope
hlt
ret
fadd
bound
push
mov
xor
pop
sbb
xchg
inc
and
dec
sbb
jno
mov
push
xchg
and
movs
xor
sbb
mov
push
sub
pop
mov
xchg
pop
xor
call
mov
rcr
sub
or
xchg
jbe
cmp
sar
test
or
dec
push
xchg
mov
cmc
adc
iret
outs
mov
mov
push
mov
xchg
int
cmc
lods
hlt
xchg
retf
rcr
inc
mov
sbb
or
pusha
mov
or
fs
(bad)
push
popa
mov
aad
push
xchg
shr
mov
jne
push
dec
mov
push
icebp
dec
and
es
sub
bound
jmp
xchg
pop
adc
xchg
adc
sbb
jbe
lahf
xchg
pop
cmp
icebp
mov
mov
sub
mov
shr
loope
pop
jae
fwait
jmp
les
push
xchg
rcr
adc
fisub
xchg
or
push
jno
inc
xchg
ds
(bad)
(bad)
jmp
adc
mov
retf
xchg
ja
jo
mov
sub
ret
scas
push
inc
xor
jl
push
lea
loopne
jae
sbb
enter
xchg
addr16
sub
sub
xor
or
xchg
mov
mov
and
lods
test
fmul
das
jecxz
cmp
mov
push
test
pop
dec
xchg
cmp
xor
mov
loop
add
nop
fadd
(bad)
mov
sub
or
test
xor
lahf
test
and
int
mov
fmul
mov
push
lods
xchg
jl
pop
and
std
stos
(bad)
mov
xchg
mov
lods
in
xchg
and
xchg
aam
push
mov
mov
cmp
xor
jae
ror
dec
mov
or
aam
ds
outs
aaa
fwait
movs
in
mov
je
leave
cwde
fwait
xchg
std
pop
mov
loop
outs
pop
inc
ins
mov
popa
mov
xchg
in
pop
xor
pop
stc
jp
sub
mov
pusha
(bad)
xchg
fstp
jo
cdq
adc
loopne
nop
add
mov
test
arpl
lods
xor
sub
adc
aad
jae
xchg
xor
inc
pop
lds
inc
aas
fisubr
xchg
pop
sbb
jns
cmp
xchg
cwde
test
mov
dec
push
repz
(bad)
jle
imul
repnz
mov
cwde
stos
jns
imul
mov
xlat
mov
scas
(bad)
xchg
cdq
bound
mov
shl
adc
ret
test
int3
aad
adc
inc
mov
sub
in
pop
dec
xchg
popf
cdq
xchg
or
(bad)
and
add
loop
push
xchg
xor
adc
aad
out
in
pop
arpl
int3
fs
push
stos
hlt
ror
movs
les
adc
into
mov
mov
adc
ds
mov
jge
je
fisubr
jmp
xchg
xchg
neg
ret
add
pop
xchg
icebp
ficomp
stos
lock
mov
xchg
call
push
ds
retf
outs
aas
loope
push
lahf
push
xchg
ja
adc
add
inc
xchg
inc
mov
cwde
sub
mov
sub
test
out
xor
sub
push
pop
mov
fsubr
sahf
rcr
jbe
adc
or
ja
dec
gs
das
adc
pop
push
data16
add
pop
fcmovnbe
xchg
into
add
dec
in
push
push
sub
inc
psllq
pop
mov
mov
jmp
icebp
lock
gs
jns
jbe
mov
mov
pop
push
bound
lods
xchg
xlat
add
push
fwait
cs
les
hlt
inc
dec
test
or
jge
mov
sub
sbb
(bad)
or
cmp
xchg
out
hlt
lods
jle
je
mov
bnd
mov
add
mov
xchg
xor
sbb
mov
mov
jb
pop
mov
inc
setge
cwde
fidiv
addr16
xchg
shr
mov
xchg
sub
xchg
mov
xchg
inc
int3
sub
push
xchg
or
sbb
test
add
pusha
add
iret
or
push
fsubrp
test
shr
out
and
pop
lods
and
xchg
and
jb
cwde
sbb
xchg
pop
fidivr
loop
mov
stos
or
into
sbb
and
xchg
cmps
out
mov
loopne
mov
xchg
jmp
mov
imul
lock
jl
mov
push
cwde
ins
pop
sti
jnp
add
lock
xchg
jl
das
lahf
scas
pop
inc
push
dec
outs
movs
mov
mov
and
hlt
adc
shl
test
adc
dec
outs
es
cmps
and
dec
cmp
or
mov
xchg
sahf
and
mov
xchg
mov
xor
je
fisubr
mov
ss
mov
mov
xlat
pop
xor
adc
call
loop
cmp
mov
fneni(8087
xchg
clc
pop
cmp
bound
xchg
femms
in
lds
test
icebp
retf
add
cmp
push
cdq
sbb
int
push
pop
push
xchg
mov
hlt
or
sub
mov
pop
inc
mov
inc
mov
(bad)
xchg
jnp
shr
push
dec
mov
fcmovbe
pop
and
cmps
hlt
std
inc
sub
repnz
xchg
jle
inc
loop
fs
xchg
nop
arpl
(bad)
rcr
test
xchg
mov
into
add
or
out
push
seta
daa
(bad)
lods
mov
mov
lea
hlt
das
mov
scas
or
dec
call
dec
mov
xchg
xchg
lods
jae
push
fs
ins
push
push
jne
xchg
adc
inc
scas
lds
loop
xchg
jmp
(bad)
jbe
ja
jno
sub
add
(bad)
ror
mov
in
push
sub
cmps
jl
nop
xchg
mov
add
cmp
ins
pop
(bad)
xchg
popf
fstp
inc
scas
sbb
mov
sub
pop
xor
and
add
sub
cmps
pop
mov
mov
mov
jmp
mov
ja
imul
and
lahf
cmp
push
pop
add
sub
es
dec
ficom
push
ror
mov
fwait
(bad)
dec
xor
lds
xor
push
pop
mov
(bad)
sbb
and
sub
mov
(bad)
sbb
sub
popf
fcom
stc
mov
push
popf
jne
repz
xchg
add
ins
and
mov
ror
xor
push
pop
out
cmp
fidiv
test
test
inc
in
pushf
outs
xchg
or
repnz
lea
sar
xchg
cmovl
test
shr
pop
adc
shl
xchg
or
rcl
jmp
push
cbw
stc
sbb
xchg
xchg
pop
add
mov
push
xchg
inc
lds
and
mov
or
fld
test
xchg
cmc
mov
scas
mov
dec
(bad)
and
in
push
dec
jmp
mov
pop
ss
leave
xchg
pop
test
lods
mov
ret
jo
stos
dec
and
or
add
into
aaa
and
outs
scas
stc
neg
test
xor
pushf
call
cmp
rcl
rol
xchg
xchg
mul
xchg
mov
mov
loop
inc
jb
inc
jne
js
xor
fstp
xchg
push
mov
scas
dec
je
pushf
inc
xchg
inc
adc
call
inc
out
loope
add
jg
rcr
out
mov
ficom
mov
fcom
xchg
cwde
in
add
and
leave
pop
sbb
mov
jns
mov
or
repnz
mov
imul
and
cmc
lahf
cli
mov
adc
sbb
mov
test
loop
xchg
jle
retf
fcom
xchg
aaa
mov
push
jbe
jge
jmp
sbb
retf
and
fsin
inc
data16
ins
outs
xchg
sbb
inc
add
test
mov
pop
push
push
js
stos
rcl
das
mov
ror
hlt
push
mov
dec
rcl
stos
xor
fiadd
xchg
pop
push
xchg
jg
imul
(bad)
jmp
jp
push
mov
pop
push
arpl
pop
pusha
xchg
test
pop
sbb
iret
xchg
(bad)
bound
jnp
stos
mov
pop
mov
sbb
int
ficom
xchg
mov
data16
adc
stos
je
jge
iret
dec
bound
cli
movs
(bad)
xchg
and
mov
popa
pop
call
push
movs
hlt
retf
ror
cmps
cli
xor
pop
cmps
mov
test
xchg
jnp
mov
ficom
xlat
mov
xchg
add
cld
jae
xchg
cli
xor
lds
add
mov
cmc
jbe
sub
xchg
xor
cwde
call
les
mov
xor
test
mov
imul
push
xchg
fisttp
pop
int
push
adc
jnp
in
fimul
ins
data16
(bad)
mov
cli
xchg
jl
je
sub
aaa
xchg
ficomp
(bad)
xchg
and
sbb
je
pusha
int3
xchg
ret
push
sub
add
addr16
(bad)
sbb
or
mov
jle
xchg
pop
mov
xchg
xchg
or
adc
gs
cwde
push
dec
sbb
jno
mov
mov
daa
xchg
cli
sahf
out
lock
or
mov
int3
xchg
popf
jge
scas
rcl
in
sbb
mov
dec
aad
add
xor
test
mov
bound
fwait
mov
push
movs
mov
aaa
mov
clc
out
xchg
dec
daa
sahf
sub
je
stos
xchg
call
mov
xchg
bound
arpl
adc
test
mov
ret
in
enter
pop
(bad)
xchg
jl
mov
les
or
in
add
stos
xchg
fisttp
sub
jmp
xchg
adc
sub
inc
cmp
pop
push
push
fstp
xchg
jb
inc
fimul
pop
stos
xchg
mov
sub
mov
mov
adc
add
add
mov
xchg
mov
test
push
mov
pop
xor
mov
mov
retf
jmp
movq
ins
in
int
add
xchg
sbb
shl
and
cwde
push
shr
sti
test
cdq
js
xchg
in
pop
iret
mov
es
dec
(bad)
rcl
add
cmc
sar
cs
add
movs
xchg
push
bound
(bad)
in
dec
inc
add
mov
aas
xor
inc
enter
xchg
cmps
push
pop
pusha
xchg
sub
out
ins
not
mov
mov
xchg
outs
mov
adc
popf
retf
mov
ret
push
adc
fwait
test
ret
adc
cmps
jb
xchg
aaa
rcl
push
xchg
data16
xchg
adc
mov
jle
pop
cmp
test
inc
sti
in
fldenv
clc
test
mov
cmp
in
and
xchg
xor
mov
lock
int3
and
xchg
test
ss
imul
pop
adc
es
or
aam
sbb
js
ret
inc
xor
mov
je
dec
cdq
sbb
jbe
xchg
lea
mov
stos
aad
xchg
adc
cmps
ja
xchg
adc
mov
jecxz
push
mov
adc
test
xchg
dec
xchg
popa
and
mov
pushf
lds
cmp
jp
retf
popf
lea
ficom
(bad)
loop
push
push
dec
xchg
dec
mov
imul
retf
mov
fprem1
lods
je
imul
pop
mov
push
push
dec
mov
test
or
in
mov
xchg
mov
or
mov
jmp
hlt
add
stos
lods
sub
or
cwde
inc
jno
fwait
mov
adc
jg
outs
mov
cmp
shl
nop
xchg
rcl
aam
jp
mov
sub
mov
int3
or
cmps
in
cmc
adc
push
call
xor
pop
inc
pop
jbe
mov
push
movs
xchg
push
das
add
cmp
(bad)
xchg
xchg
dec
mov
ror
pushf
mov
inc
adc
push
sti
sub
pop
loop
sub
inc
xchg
jg
jne
mov
loope
fist
xchg
xchg
and
dec
xchg
cmp
fmul
imul
(bad)
cli
sbb
sub
ret
xchg
sub
dec
aaa
cmps
push
nop
xchg
mov
adc
mov
rcr
fwait
and
adc
xchg
mov
imul
or
xchg
add
call
das
mov
clc
lock
ret
pop
xchg
movs
std
xchg
es
pop
retf
mov
mov
push
fbstp
xor
inc
cmp
jnp
pshufw
xchg
sbb
iret
sbb
and
sub
jge
imul
add
shr
mov
pop
add
(bad)
clc
adc
int
sbb
inc
int3
cdq
loope
ins
mov
lds
inc
push
mov
icebp
add
xchg
push
sub
push
xchg
jb
into
adc
xchg
pop
aam
cli
jo
add
or
rol
popa
adc
popf
int
call
push
in
mov
mov
in
and
cdq
jnp
rcl
call
mov
push
int
bt
rcl
cmps
push
adc
xchg
ficom
scas
xchg
call
xchg
push
mov
xchg
sti
xchg
sub
out
mov
movs
dec
or
xchg
leave
jl
push
and
cld
cmp
cmp
and
neg
neg
shl
pushf
xchg
cmp
fidiv
mov
test
cmp
fist
sub
or
pushf
fsub
add
mov
mov
cli
or
xchg
aaa
inc
adc
stc
fbstp
push
pop
aam
js
lods
xchg
test
pop
jne
movs
mov
pop
jl
bound
xchg
sar
and
dec
fist
xchg
mov
pop
and
sub
xchg
adc
and
pop
inc
repz
retf
and
jno
xor
fsincos
xchg
loopne
adc
(bad)
mov
into
clc
sbb
je
xchg
fwait
mov
or
imul
dec
mov
dec
in
fistp
movs
adc
adc
jns
sub
shl
dec
inc
jno
xchg
cmps
cs
inc
and
add
add
ja
ins
das
xchg
pusha
inc
sub
test
mov
loope
in
fistp
xchg
cmp
and
or
xchg
mov
imul
xchg
adc
outs
cmp
fld
inc
xchg
mov
or
push
test
js
push
adc
xchg
and
cdq
test
out
or
add
mov
jp
imul
es
mov
les
mov
rol
dec
xchg
lahf
daa
cmp
mov
xchg
xchg
test
ror
and
xchg
outs
pusha
mov
mov
jge
cs
push
(bad)
mov
rcl
idiv
jl
cmc
sahf
cmp
(bad)
aaa
xchg
mov
faddp
xchg
fisubr
pop
lea
stos
icebp
lods
lahf
xchg
sub
inc
mov
cmp
sar
in
pop
xchg
lds
jmp
inc
xor
push
(bad)
sbb
mov
mov
mov
int
into
xchg
jne
xchg
dec
pop
jle
popa
mov
push
je
push
jg
and
test
mov
or
les
(bad)
neg
out
push
xlat
ret
(bad)
mov
inc
and
mov
cwde
aad
adc
or
mov
xchg
mov
addr16
push
pop
cmp
xchg
loop
cmp
pop
aad
lods
addr16
ret
ret
and
push
test
daa
jno
jl
push
or
and
xchg
aas
fld
add
in
pop
imul
inc
cmp
xchg
jg
push
not
jmp
cmp
mov
ror
jmp
inc
and
sub
scas
in
jecxz
xchg
jno
in
cdq
jnp
int3
mov
xchg
xchg
mov
cmp
or
not
mov
mov
mov
pop
sbb
xchg
iret
jns
aad
adc
dec
in
jg
add
or
inc
fwait
sbb
add
in
outs
inc
add
jns
dec
mov
pop
pop
loop
pop
xchg
cs
mov
xchg
sbb
test
xchg
ret
adc
xchg
or
fidivr
shl
push
cmc
jg
mov
dec
stos
mov
imul
xlat
xchg
icebp
pop
ja
mov
es
enter
clc
inc
pop
adc
mov
xchg
fcmovb
hlt
inc
pop
pop
(bad)
xlat
loopne
xor
dec
sbb
fwait
cmps
jno
fnstenv
movs
jne
sbb
je
xchg
std
and
adc
shl
push
leave
ror
xchg
xchg
pop
jbe
fwait
daa
hlt
inc
mov
inc
sahf
push
push
rcl
push
jnp
das
xchg
je
mov
mov
xor
out
rcr
sub
add
mov
test
inc
les
ins
xchg
pop
rol
test
or
jmp
popf
xchg
jecxz
pop
lea
xor
call
push
sub
aaa
sub
outs
mov
mov
fisubr
add
(bad)
ins
or
lahf
jns
inc
pop
mov
dec
dec
jg
push
adc
jl
dec
jo
inc
push
fwait
mov
mov
cdq
scas
stc
sub
fwait
js
shl
mov
jb
mov
jo
bound
push
ret
jmp
ret
dec
jbe
enter
mov
sub
push
ror
mov
cdq
push
xchg
shl
cmp
sbb
arpl
hlt
xchg
xchg
(bad)
pop
es
and
xchg
sub
jl
xchg
pop
and
and
mov
sub
imul
popf
pop
xchg
das
hlt
shl
xchg
ficom
mov
push
dec
cwde
xchg
inc
(bad)
mov
clc
xchg
mov
mov
repz
mov
popf
je
test
jge
je
push
xchg
push
sahf
ins
dec
fbstp
dec
mov
sbb
and
add
jbe
xchg
jmp
outs
out
pop
sti
pop
popa
and
xchg
(bad)
test
(bad)
repnz
sbb
cmp
pop
aas
or
fcom
xchg
cmp
in
sbb
adc
xchg
ret
dec
cld
aad
mov
and
stos
jae
pop
cli
cmp
ret
xchg
mov
addr16
imul
ja
jle
mov
push
lock
xchg
lods
pushf
push
push
add
adc
and
xchg
pop
sub
cli
outs
sbb
cmp
xchg
jae
fcom
mov
mov
inc
lods
pop
lds
stos
xchg
popf
out
in
mov
dec
xchg
mov
les
loope
xchg
mov
stos
mov
mov
inc
sbb
(bad)
unpcklps
arpl
push
xor
(bad)
mov
cmp
sbb
popf
cmp
loopne
push
mov
jo
jl
into
or
xchg
adc
jmp
leave
xchg
ret
adc
push
inc
mov
fcom
stc
test
aad
sub
adc
pop
xchg
add
les
std
fs
in
adc
(bad)
or
repz
(bad)
sbb
pop
outs
enter
mov
retf
rcr
jle
sar
gs
dec
pop
xchg
lods
push
test
xchg
js
sbb
call
sbb
xchg
or
pop
gs
push
or
mov
into
cmc
adc
cwde
loop
out
xchg
or
mov
mov
je
push
mov
xchg
mov
push
or
mov
pop
inc
dec
add
in
and
lea
fsub
je
daa
lods
cs
jle
xchg
or
dec
inc
out
int3
std
xchg
test
dec
jp
xchg
and
or
ret
es
push
in
(bad)
xchg
dec
ins
mov
imul
movs
in
mov
int3
inc
jecxz
(bad)
pop
xchg
fnstenv
mov
xchg
nop
dec
sub
dec
int3
pop
bound
loope
jl
push
and
daa
xchg
ins
stos
punpckldq
es
jne
or
mov
push
xchg
arpl
enter
fwait
rcl
push
movs
xchg
jg
xchg
sbb
popf
(bad)
repnz
jns
not
and
sub
into
ror
aam
std
or
or
jno
pushf
mov
pop
xchg
enter
sub
xor
xchg
out
retf
mov
push
mov
das
movs
bound
(bad)
fld
or
adc
push
mov
sub
push
cmp
add
fiadd
xchg
in
mov
mov
iret
mov
inc
in
mov
bound
(bad)
pop
rcr
jecxz
xchg
push
hlt
outs
xchg
xor
ret
push
ins
dec
dec
mov
cmp
sbb
push
xchg
push
mov
ret
mov
addr16
dec
cli
jne
andps
retf
repz
pop
sbb
rol
idiv
jmp
outs
mov
sub
add
das
or
xchg
xchg
dec
mov
ficomp
push
xor
(bad)
addr16
push
in
add
(bad)
in
xchg
or
mov
out
inc
cli
int3
jp
dec
in
int3
jb
xchg
pop
jnp
mov
mov
xchg
mov
mov
in
movs
adc
pop
es
scas
les
or
fwait
dec
mov
pop
jnp
mov
cmp
inc
or
xchg
out
je
imul
xchg
sahf
mov
mov
int3
(bad)
and
and
dec
test
xchg
mov
das
pcmpgtw
push
xor
out
mov
fstp
je
loope
movs
out
lds
ffree
xchg
out
jp
fst
sbb
xchg
cmp
cmp
xor
sbb
mov
or
jmp
outs
(bad)
jecxz
push
fcomip
adc
arpl
adc
jae
mov
cwde
xchg
mov
pop
xchg
push
ret
push
vaddsd
cld
jno
xchg
pop
in
iret
mov
xchg
jmp
pop
lds
jecxz
xchg
inc
test
(bad)
ffreep
inc
adc
mov
sahf
daa
arpl
cmp
push
in
fnstenv
push
imul
sbb
aaa
pop
not
movs
outs
cmp
or
inc
xchg
daa
jecxz
cs
fdivr
xchg
pop
aaa
mov
xchg
in
repnz
push
xchg
sbb
inc
xor
mov
and
out
shl
out
xchg
dec
repz
adc
ins
xchg
mov
mov
mov
cmp
jge
call
je
ficom
cmps
mov
movs
ror
xchg
add
ins
(bad)
adc
retf
xor
les
loopne
push
cli
push
fwait
add
xor
daa
sub
and
jmp
imul
adc
xchg
fadd
mov
in
sub
mov
aam
mov
sbb
(bad)
and
jnp
xchg
int3
repnz
movs
mov
jne
movs
dec
cli
cmps
repz
out
(bad)
adc
pop
xchg
sahf
leave
rcr
jg
adc
scas
push
xor
and
test
xchg
and
xchg
jge
ret
cwde
adc
aam
xor
xchg
aaa
sbb
mov
sbb
sbb
mov
mov
hlt
nop
or
cmps
mov
int
pop
gs
cmp
pop
jb
or
cld
ror
sbb
mov
mov
or
jp
inc
xchg
xor
mov
je
ds
or
mov
das
fwait
ins
mov
push
into
sbb
mov
or
add
mov
mov
mov
ins
jl
dec
mov
xchg
cmp
adc
jle
ja
pop
cdq
js
push
fcom
outs
adc
xchg
mov
hlt
push
xchg
test
jmp
fcomp
in
and
pop
add
xor
neg
sti
xchg
add
mov
push
mov
pop
dec
jae
les
pop
cld
lods
xchg
scas
pop
mov
sub
sub
shl
pop
das
mov
mov
call
mov
test
(bad)
jle
retf
sub
xchg
shr
push
mov
cmp
adc
lods
xchg
(bad)
cli
aaa
nop
sub
int
push
jne
push
jecxz
popa
xchg
cmp
je
pop
mov
outs
mov
jns
in
sbb
or
mov
loop
dec
in
mov
rcl
jns
adc
test
pusha
xchg
retf
pop
std
lahf
loop
xchg
ret
jmp
inc
cwde
xchg
or
fisubr
jmp
call
pop
jnp
inc
out
mov
dec
adc
pop
shr
and
xchg
xor
xchg
adc
jb
ror
loop
pop
xchg
mov
ss
or
sbb
addr16
cmp
push
pop
dec
mov
mov
lods
nop
icebp
add
push
js
xchg
dec
repnz
sbb
jle
xchg
mov
arpl
(bad)
xchg
cmc
push
push
aam
dec
adc
lock
mov
xor
mov
ror
jl
imul
pop
out
js
xchg
aam
adc
xchg
mov
jg
repnz
push
push
xchg
paddd
lock
ins
dec
adc
nop
cmp
fnstcw
xchg
jmp
stos
xchg
mov
icebp
sbb
push
mov
mov
inc
mov
adc
cwde
adc
jle
rcl
jp
push
aam
(bad)
rcr
mov
mov
ss
push
xchg
push
loope
and
xchg
jb
add
dec
dec
loopne
shl
cmps
xchg
retf
into
sbb
push
xchg
cmp
push
xchg
in
sub
fbld
mov
scas
popa
adc
cmp
(bad)
repz
fs
sbb
mov
fwait
pop
push
(bad)
push
in
cmps
iret
push
xchg
nop
adc
rcr
or
inc
imul
or
add
fwait
jns
pop
scas
or
popf
data16
adc
pop
jmp
or
hlt
fidiv
ss
push
jne
lock
cli
rol
inc
inc
xchg
xor
sbb
dec
fmul
mov
or
xchg
xchg
pop
rsm
mov
rol
add
popa
mov
test
sti
xchg
aas
hlt
lods
jb
(bad)
fild
xchg
ror
retf
sub
and
pushf
mov
ror
and
(bad)
cld
icebp
adc
mov
xchg
ja
ins
push
pop
call
pop
xchg
mov
mov
inc
repnz
cmc
xchg
adc
call
xchg
dec
adc
bound
test
adc
jnp
lods
mov
hlt
cmp
pop
sub
fbld
shl
bound
push
xchg
dec
dec
push
xchg
loope
xor
(bad)
dec
push
movnti
cmp
mov
push
je
xchg
xchg
mov
cmc
cld
lods
push
bound
jnp
jmp
mov
xchg
cwde
and
repnz
xchg
bound
and
mov
mov
aam
push
xchg
push
push
(bad)
xchg
movs
cmc
(bad)
adc
xchg
and
leave
adc
in
sbb
pop
add
xchg
cdq
mov
clc
xchg
add
not
xor
push
je
fisttp
repz
inc
das
xchg
mov
jno
cmp
cmps
test
xchg
xchg
stos
mov
xor
(bad)
out
sti
rcl
js
or
pop
cmps
inc
xchg
movs
push
push
push
pop
xchg
loopne
(bad)
xor
cmc
nop
fsub
xchg
push
pop
stc
pop
xchg
mov
add
arpl
les
in
xchg
jle
push
ins
mov
add
or
or
sbb
jg
(bad)
pop
mov
movs
push
jmp
add
xchg
mov
je
loop
jge
sbb
test
pop
xchg
xor
test
adc
adc
and
xchg
sbb
mov
femms
adc
test
xor
rcl
xchg
xor
ds
dec
fsubr
xchg
(bad)
popf
loop
xchg
push
mov
pop
xchg
sbb
inc
jnp
test
xchg
repnz
out
dec
xchg
inc
mov
in
cmp
mov
nop
xchg
mov
xchg
retf
rol
jl
mov
push
xchg
xor
es
mov
xor
xchg
xchg
out
xlat
inc
fistp
xor
in
pushf
xchg
xchg
push
mov
xor
and
cmp
js
cwde
xchg
cld
movs
pop
fldcw
sbb
push
mov
push
sbb
pop
adc
xchg
mov
mov
fwait
mov
adc
mov
ss
xchg
inc
and
sub
dec
mov
data16
int
rcl
jmp
jbe
xchg
push
test
iret
xchg
push
lahf
mov
pushf
loopne
jmp
out
cwde
out
pop
adc
mov
xchg
sub
jns
rcr
inc
adc
pop
outs
arpl
adc
xchg
mov
clc
jo
cdq
mov
ja
jbe
ins
fcmovne
ror
xor
mov
xchg
push
xor
mov
test
pop
cli
or
ds
mov
in
fistp
push
fwait
mov
mov
nop
outs
loop
and
pop
xchg
retf
mov
adc
mov
loope
aaa
aam
stc
mov
test
ss
xchg
mov
or
arpl
mov
adc
mov
iret
push
inc
xchg
shl
fst
fwait
xor
and
adc
xchg
lahf
xor
repz
loope
(bad)
dec
push
or
movs
jl
cmp
add
sub
dec
sub
xchg
(bad)
adc
outs
fistp
push
xchg
mov
(bad)
in
scas
xchg
and
pop
sbb
imul
popf
xchg
lea
pop
pop
dec
sbb
fwait
jl
retf
mov
push
adc
mov
cmp
xlat
loope
add
sbb
xchg
inc
inc
rcr
sbb
(bad)
or
jge
shl
jnp
in
lock
aad
ins
rol
aam
(bad)
xchg
mov
mov
ror
jae
adc
test
mov
dec
cmps
jp
xchg
data16
inc
xchg
xchg
test
jecxz
fst
add
sbb
nop
xchg
test
mov
and
or
enter
xchg
clc
xchg
fnsetpm(287
das
mov
cli
retf
aas
xchg
ret
jne
leave
cmp
(bad)
clc
hlt
sbb
xchg
push
add
rol
inc
imul
sub
inc
movs
rcl
mov
add
add
or
xchg
mov
es
xor
in
xchg
jne
or
and
cmp
jmp
lock
mov
mov
adc
ins
int3
lds
push
jo
adc
push
fistp
hlt
xchg
or
test
enter
out
mov
mov
xor
into
rcl
dec
xchg
shl
adc
xor
push
out
fnstsw
xor
mov
loope
mov
sub
xchg
mov
fs
push
(bad)
in
add
gs
ja
fsub
clc
pushf
cmp
call
adc
ins
jp
fwait
cld
mov
push
mov
xchg
mov
or
mov
mov
inc
xchg
cmp
sbb
das
stos
out
push
xchg
inc
addr16
or
nop
pop
push
mov
xchg
mov
out
inc
pop
xor
scas
pop
adc
test
mov
imul
push
jl
int3
xchg
and
sahf
push
std
ds
fs
repz
pop
adc
jns
inc
mov
icebp
cmp
lock
xchg
dec
xor
push
inc
(bad)
jmp
ja
xlat
test
jge
push
lahf
xchg
add
push
add
or
rcl
jge
mov
adc
loopne
jae
stc
xchg
fisubr
mov
adc
mov
cmp
pusha
movs
dec
and
xor
loope
cld
or
pop
les
ds
xchg
xchg
daa
ins
lahf
sub
stos
ror
fwait
adc
(bad)
and
adc
sub
inc
or
mov
push
cdq
adc
lahf
jo
ss
mov
xchg
push
pop
rcr
sbb
adc
xlat
cmc
ret
xor
xchg
xor
cmp
xor
sbb
fld
xchg
and
test
add
xchg
(bad)
fmul
stc
jp
aas
xor
ffree
rcl
retf
xchg
js
xor
jbe
pop
test
adc
leave
mov
dec
fdiv
jnp
(bad)
leave
add
repz
sbb
js
adc
pop
inc
stos
mov
xchg
xchg
dec
jb
addr16
dec
or
imul
jno
xchg
shl
or
fcom
iret
jb
adc
jp
or
inc
xchg
out
push
push
int
push
xor
xchg
jo
daa
mov
xchg
sbb
push
dec
or
mov
mov
pop
int3
push
push
cdq
mov
xchg
pop
inc
inc
jecxz
inc
psubw
xor
push
lds
(bad)
xchg
cmp
adc
jae
imul
mov
cmp
xchg
int3
cmps
jb
xchg
lods
cmp
je
sub
(bad)
ror
push
sub
arpl
mov
icebp
xchg
or
push
mov
xchg
ins
pusha
mov
pop
cwde
and
in
inc
adc
cmp
pusha
xchg
cmp
xor
mov
mov
imul
sub
cmps
mov
mov
sub
(bad)
sbb
xchg
hlt
add
test
and
pop
daa
ret
aas
xchg
fisub
push
out
mov
adc
cwde
sbb
jnp
fwait
dec
(bad)
cmc
test
xor
sub
sbb
xchg
dec
sub
out
xchg
sub
sub
xor
icebp
cmps
std
imul
mov
dec
in
clc
aam
add
ins
mov
pop
xchg
cmp
call
loopne
xchg
xchg
in
or
push
clc
mov
stc
sub
aam
pop
lahf
inc
jno
out
outs
push
jg
adc
mov
mov
(bad)
mov
pop
xchg
xor
pop
shl
sub
xchg
or
sbb
xchg
mov
xor
js
call
sbb
mov
rcl
clc
loopne
add
cli
inc
mov
jmp
jmp
sub
sete
bound
mov
gs
int
imul
add
mov
jg
pop
in
cmc
pop
out
pop
daa
scas
push
cmp
pop
ds
push
stc
fld
in
shr
cmps
popf
(bad)
retf
adc
mov
js
sar
inc
ret
inc
dec
jne
xchg
jns
ins
push
or
dec
xchg
and
or
sub
cmp
test
mov
xchg
xchg
std
retf
pop
test
or
mov
test
jbe
hlt
pop
xchg
fcom
pop
xchg
mov
push
repz
sahf
xchg
add
and
int
push
into
sub
push
adc
sbb
xchg
xor
adc
fild
jnp
xchg
sub
jae
out
pushf
push
push
xchg
jge
es
xchg
rcl
das
dec
xor
imul
push
popf
lahf
repz
sub
mov
jo
push
xchg
cwde
es
jb
gs
daa
leave
fbstp
fwait
inc
imul
movs
bound
std
or
mov
push
pusha
test
daa
(bad)
push
(bad)
sbb
inc
or
pop
stos
adc
xor
xor
inc
xor
and
cmp
xlat
emms
inc
ficomp
mov
test
nop
dec
(bad)
xchg
mov
push
mov
ss
hlt
ret
pop
fwait
mov
xor
or
(bad)
mov
aaa
adc
lds
ja
sub
mov
inc
cmps
dec
dec
sbb
repnz
test
sub
cs
arpl
or
out
pop
std
jle
bound
mov
imul
je
jmp
and
fsubr
sbb
int
add
mov
inc
int3
mov
adc
mov
push
bound
mov
jae
inc
xchg
cli
outs
pop
push
xchg
or
sbb
nop
pop
into
popa
adc
cmp
call
push
sbb
add
clc
mov
cmc
mov
cmps
add
js
xchg
scas
and
test
fst
mov
adc
or
dec
mov
xchg
dec
enter
out
nop
scas
xchg
fiadd
in
mov
fldcw
add
hlt
jns
sub
out
stc
pop
xchg
bound
adc
sar
and
inc
mov
outs
out
cld
call
iret
push
dec
cwde
mov
sub
pop
adc
mul
je
fistp
lods
popa
xchg
data16
and
xor
fisubr
sbb
outs
pusha
mov
fwait
stos
add
mov
cmp
in
je
xchg
push
icebp
push
cmc
xchg
movs
cmp
pusha
mov
sbb
push
cld
loopne
stc
xchg
xchg
jo
jl
mov
mov
cmp
xchg
hlt
push
test
ins
loopne
in
xchg
pop
out
or
pop
and
adc
pop
ficomp
dec
aam
dec
xchg
inc
mov
dec
int
or
push
cld
scas
out
fisttp
pop
jnp
loop
test
fdiv
dec
and
mov
out
push
lods
cld
cli
in
cmp
mov
mov
sar
fld
mov
daa
xchg
pop
popf
dec
add
arpl
pop
nop
xchg
xchg
add
pushf
ror
rol
sbb
adc
xchg
add
sbb
sub
inc
je
movs
lock
add
mov
xchg
push
push
out
xchg
mov
stc
xchg
jnp
sbb
xchg
mov
ins
(bad)
jmp
lea
or
das
xlat
or
shl
xor
pusha
and
mov
arpl
jmp
mov
push
xchg
inc
xor
xchg
xchg
stos
dec
xchg
add
push
fdivr
push
das
push
or
pop
adc
lock
and
lds
add
adc
jge
fwait
xchg
push
std
or
xchg
jnp
cmp
lea
or
les
mov
int3
in
ds
xchg
loope
or
and
rcr
sub
stc
xchg
pop
int3
int
push
ror
mov
mov
inc
ins
add
inc
push
and
push
cmps
xchg
fstp
shr
add
xor
data16
rol
jne
aam
cmp
pop
sub
sbb
mov
adc
rol
outs
jle
shr
mov
stos
mov
call
and
das
xchg
scas
or
es
stc
pop
xor
in
xlat
ds
iret
dec
cmp
jecxz
push
pushf
sbb
fwait
pop
cwde
add
xor
test
sbb
(bad)
xchg
(bad)
jne
dec
xor
xchg
push
add
loop
xchg
in
push
sbb
jne
push
aam
inc
inc
daa
stos
in
jmp
xchg
xchg
pop
fcomp
das
push
ins
xchg
popa
and
pop
mov
fimul
std
inc
mov
jecxz
das
pusha
and
jp
xchg
xchg
adc
mov
pushf
das
ret
sub
fsub
out
xchg
lods
outs
sbb
neg
xchg
mov
inc
xor
adc
inc
cmp
mov
cld
lods
xchg
mov
dec
pop
xor
mov
inc
bound
(bad)
mov
les
xchg
jp
and
push
mov
xchg
add
add
jne
xchg
sbb
sti
scas
je
hlt
scas
cmp
ss
ja
or
iret
adc
aam
pop
push
test
ror
jl
lahf
xchg
dec
int
(bad)
dec
adc
jl
pop
sbb
dec
inc
gs
push
xchg
mov
dec
lds
xchg
lock
ret
mov
xor
int3
mov
vmovshdup
je
sbb
mov
push
mov
rcr
and
fdivr
test
popa
jns
mov
mov
fimul
das
xchg
adc
xchg
or
fwait
dec
ins
mov
add
int3
out
push
fwait
pop
adc
inc
out
sar
cli
mov
cs
ret
xchg
mov
and
fs
inc
scas
push
fist
push
mov
cmp
das
jnp
js
xchg
cwde
lock
xchg
and
movs
pop
imul
add
fs
sar
fcomp
fwait
jp
icebp
dec
push
or
fs
test
sbb
sbb
imul
es
mov
jl
xchg
lea
xor
in
or
adc
pop
movs
outs
test
stc
xchg
enter
std
or
sbb
xchg
fwait
mov
and
xor
fnsave
lahf
jl
or
mov
popa
mov
mov
inc
or
inc
sbb
add
push
jo
xchg
xor
mov
xchg
push
or
inc
fcmovu
mov
shl
push
adc
retf
pop
add
adc
pop
aam
sahf
std
push
or
mov
xchg
lods
inc
sar
mov
loop
call
adc
adc
movs
cmc
int
xchg
shr
mov
cmps
nop
and
dec
aas
fwait
test
movs
retf
adc
xchg
cmps
test
sbb
xchg
pop
adc
add
mov
mov
xchg
xchg
or
sub
test
jp
jno
hlt
push
test
pop
lahf
lahf
add
loope
sub
cwde
or
xchg
sbb
xchg
les
in
lahf
dec
pop
sbb
push
xchg
(bad)
push
sub
fwait
ret
adc
dec
into
pop
push
xchg
jl
dec
add
mov
in
lea
xchg
mov
mov
xchg
jae
mul
xchg
mov
imul
outs
sbb
aam
xchg
xchg
adc
je
xchg
xchg
mov
cmp
cmp
int3
mov
xchg
xchg
fsub
xchg
cld
into
sbb
sbb
and
add
dec
int
ret
out
xchg
jge
fidivr
mov
mov
adc
inc
mov
out
sub
fdivr
and
aam
aad
and
mov
lods
retf
or
add
sub
out
push
lahf
dec
ins
xchg
xchg
cmp
xchg
std
sub
jo
dec
push
xor
ins
test
aam
cmp
xchg
fild
shl
xchg
jle
leave
dec
stc
xlat
je
jp
mov
mov
mov
push
stos
xchg
(bad)
test
jo
adc
xchg
add
imul
pop
mov
test
push
test
scas
xor
fbld
xchg
push
dec
add
into
outs
push
pop
inc
sub
mov
xchg
mov
or
ret
mov
add
adc
mov
imul
adc
jmp
add
mov
xor
push
jns
aaa
movs
xchg
shl
call
popa
imul
hlt
adc
ror
das
cld
mov
mov
sbb
cs
xchg
jbe
(bad)
out
inc
and
aam
rol
xchg
inc
and
std
adc
(bad)
lahf
fs
xchg
mov
pushf
cmp
pop
mov
xchg
inc
and
idiv
push
jo
int3
and
cmp
jecxz
ja
pop
xchg
sbb
test
fsubrp
mov
mov
push
or
test
ja
xchg
push
rcr
xchg
inc
push
mov
(bad)
nop
jg
mov
idiv
mov
out
pop
loope
push
fwait
pop
out
lea
jp
add
repz
pop
dec
sub
neg
jmp
inc
xlat
aad
xchg
push
pop
push
rol
adc
cwde
enter
ficom
fwait
int
sbb
add
cmp
xchg
(bad)
cmovge
mov
das
fwait
add
mov
xchg
ins
jecxz
imul
mov
(bad)
xchg
mov
cmp
stos
xchg
and
sbb
xchg
iret
fsub
or
fcomp
jbe
clc
jmp
add
pop
inc
sub
inc
mov
jp
xchg
cmps
cdq
fimul
sub
sar
pop
adc
cmp
test
xchg
loope
fisubr
mov
inc
dec
fdiv
push
xor
sti
xor
loope
jno
add
popa
cmc
cmps
cmp
fnstcw
daa
xchg
stc
dec
cmps
loop
nop
repz
fild
test
jae
mov
ins
cmp
xchg
push
in
cmps
or
add
fsubr
ss
push
jo
or
mov
xchg
xchg
repnz
jbe
xchg
push
movs
mov
mov
loop
cs
xchg
or
nop
pop
gs
add
test
xchg
scas
outs
dec
push
and
push
lea
push
(bad)
js
cmps
mov
fnstsw
xchg
adc
sbb
(bad)
xchg
(bad)
movs
nop
ds
xchg
jp
outs
push
xchg
sti
mov
jo
mov
dec
dec
ja
add
aad
mov
popa
int
adc
(bad)
sbb
mov
or
int3
ins
outs
adc
sub
stos
fwait
clc
xor
adc
and
jmp
aam
pop
xchg
pop
xchg
cmps
mov
add
xor
adc
inc
sbb
mov
cmp
mov
repz
(bad)
stos
xchg
push
fdivr
stc
cwde
mov
xchg
add
sub
daa
enter
dec
adc
add
test
xchg
or
and
or
addr16
add
mov
jge
pop
mov
adc
jp
xchg
mov
fwait
jnp
es
xor
xchg
(bad)
sub
daa
xor
xchg
mov
inc
cmp
and
imul
mov
(bad)
cmp
dec
ss
enter
mov
sti
xor
mov
cmc
dec
pop
mov
cmps
mov
dec
sub
popa
pop
cwde
dec
fsubr
xchg
sbb
mov
lock
fmul
adc
(bad)
pusha
das
pop
enter
xchg
adc
nop
retf
pop
rol
mov
iret
fwait
int3
xchg
cmp
arpl
jmp
aad
sbb
cmps
not
and
loopne
add
das
mov
mov
fmul
xchg
adc
xchg
stos
mov
xchg
outs
aam
or
sub
and
dec
iret
xchg
mov
rol
shl
outs
and
dec
jb
dec
adc
dec
add
ja
inc
scas
mov
cwde
add
mov
xchg
xchg
push
or
jnp
sti
ret
stos
adc
and
int3
add
push
jae
mov
jl
lock
hlt
add
jns
cdq
ins
mov
push
adc
mov
hlt
xchg
pop
and
lock
out
or
mov
jb
or
imul
cwde
xor
push
add
xchg
sub
aaa
scas
xchg
std
das
(bad)
push
push
test
fcomp
sbb
test
rcl
rcr
push
int
aad
cwde
sbb
lahf
sub
ins
xlat
retf
mov
leave
pop
xchg
movs
jp
and
push
lock
adc
inc
xchg
js
mov
into
das
mov
push
jns
mov
aad
xor
mov
dec
mov
adc
aam
add
dec
pop
mov
shl
add
xchg
movs
and
xchg
leave
mov
lahf
fadd
xchg
cmp
movs
loop
pop
xor
repnz
jae
test
(bad)
xor
jp
adc
xchg
out
int3
ins
xchg
mov
popa
aam
aas
mov
shl
cmp
out
inc
add
je
das
jecxz
and
pushf
pop
xlat
jge
in
aas
cld
(bad)
xchg
ret
adc
inc
sbb
mov
mov
fcom
call
and
daa
xchg
dec
xchg
enter
or
lods
(bad)
(bad)
mov
xchg
adc
jge
call
sub
xor
xchg
and
mov
cmp
jl
lods
lidtd
sub
pop
fsub
mov
or
jb
xchg
fiadd
push
mov
adc
jle
push
(bad)
or
and
adc
lods
cdq
dec
xchg
icebp
into
pop
jmp
aas
and
cmp
xchg
inc
mov
repnz
xchg
(bad)
lahf
dec
xchg
push
push
adc
and
rcl
js
cmp
cld
(bad)
repnz
ds
mov
hlt
dec
outs
pop
or
xchg
sub
out
pop
arpl
or
inc
rcr
int3
xor
retf
popa
lods
fst
fbld
stos
mov
ss
fcomp
jno
lahf
sub
cmp
add
xchg
cmps
xor
push
sub
adc
cmc
(bad)
xor
scas
jno
xchg
xchg
mov
xor
ret
and
sar
aam
xchg
stos
inc
sbb
les
push
xchg
mov
pop
cmp
div
arpl
pop
fst
cli
into
and
jmp
repnz
xor
xor
clc
adc
sub
rcl
lahf
cmp
pop
jmp
cwde
retf
cmp
movs
xchg
fisttp
xor
xchg
jp
push
test
pop
adc
retf
lods
cld
aaa
inc
dec
xchg
stc
data16
fdiv
clc
xchg
xchg
int
mov
cwde
adc
pop
sub
push
jnp
push
mov
xchg
fwait
and
dec
xchg
cmp
enter
shl
xor
xor
adc
jge
cmp
inc
push
call
push
pop
div
out
sbb
pop
inc
xchg
inc
jo
inc
inc
loope
xor
xchg
mov
mov
repnz
icebp
pusha
(bad)
out
imul
ins
test
jle
add
daa
jp
xor
cmp
clc
inc
and
jns
xchg
mov
inc
imul
adc
xchg
leave
dec
ss
sti
and
xchg
in
cmps
imul
jg
jmp
scas
dec
mov
aad
dec
aam
mov
xchg
neg
mov
mov
call
clc
stos
push
push
aam
mov
popa
cwde
jae
jle
aas
and
dec
(bad)
jbe
xchg
jo
cmp
and
dec
jae
js
loop
rcl
out
and
jbe
in
dec
or
fnsave
mov
(bad)
pop
push
rol
xor
data16
aam
or
mov
xor
fwait
or
sahf
pop
push
xchg
push
gs
test
inc
pop
or
in
in
into
sbb
mov
data16
sbb
add
je
push
push
xchg
mov
cmp
mov
popf
jne
mov
std
hlt
loop
jl
ins
mov
stc
stos
push
daa
rcl
jle
loope
out
push
sti
stc
inc
jns
or
mov
xchg
push
and
imul
or
imul
mov
xchg
je
adc
imul
(bad)
pop
xchg
in
lods
and
out
ficom
popa
xor
mov
scas
xchg
ins
mov
push
adc
adc
xchg
shr
in
sbb
push
add
pop
lods
mov
(bad)
div
xor
retf
and
cmp
lods
fcomp
int
push
push
xchg
scas
jmp
rol
loopne
push
pop
add
cmps
mov
sbb
inc
xchg
cs
jp
push
dec
xchg
inc
std
dec
bound
data16
xchg
cmp
add
mov
dec
stc
mov
in
les
pop
xchg
push
fwait
pusha
aad
int
mov
stc
fisubr
rcr
dec
ins
xlat
in
xchg
clc
pop
lods
xor
and
dec
push
xchg
cmp
sbb
mov
(bad)
xchg
popf
lahf
jmp
or
xor
test
cmp
push
sti
cmps
mov
jl
sub
mov
cmps
add
mov
jnp
or
pop
movs
inc
xchg
add
inc
push
pop
xor
je
ins
pop
adc
shr
or
jmp
aaa
or
cwde
jae
imul
adc
retf
jl
xchg
fiadd
mov
xchg
adc
sub
push
int3
pop
sbb
or
xchg
mov
bound
xor
mov
dec
jbe
fstp
xchg
jno
xchg
pop
mov
sub
adc
jle
stos
adc
pushf
xchg
inc
in
cwde
jg
dec
test
out
int
mov
jmp
jge
sub
xchg
push
dec
mov
push
xor
mov
xchg
loop
ror
fwait
jb
mov
int
jmp
and
xor
xchg
fmul
lods
retf
mov
je
xchg
(bad)
out
pusha
inc
out
out
mov
aam
dec
pop
push
adc
bound
adc
pushf
fcom
mov
xor
jle
sbb
push
xchg
ins
sbb
jmp
lea
jle
fwait
cld
inc
retf
aam
stos
mov
xchg
test
les
mov
fs
and
jno
mov
adc
sub
xor
cwde
fsubr
sbb
sbb
or
pusha
jns
pop
cli
mov
test
mov
push
retf
xor
sub
xchg
dec
gs
pop
mov
mov
xchg
arpl
mov
mov
lea
movs
inc
ins
int
xchg
add
or
fwait
push
mov
xor
mov
jbe
mov
hlt
fnstcw
pop
mov
xor
mov
push
push
jno
dec
pop
xchg
sbb
mov
js
xchg
scas
inc
paddsb
retf
retf
stos
and
mov
push
ins
popa
xchg
xchg
nop
ins
pop
outs
je
mov
xchg
je
cli
xlat
adc
inc
aam
mov
add
les
inc
adc
fadd
std
xchg
xchg
or
and
aaa
inc
xchg
mov
mov
(bad)
xchg
dec
repz
loope
movs
sbb
pop
int3
js
in
mov
ret
mov
mov
(bad)
cmps
mov
les
das
daa
cmp
xor
mov
retf
int3
xchg
xchg
(bad)
adc
(bad)
xchg
jnp
pop
cld
xchg
inc
es
lods
add
cs
pop
jne
fs
int
xchg
adc
and
add
neg
xchg
dec
(bad)
enter
shl
fwait
cmp
jo
test
inc
mov
xchg
cdq
xchg
and
pop
test
mov
mov
out
mov
leave
cdq
adc
jnp
sar
sbb
sti
lds
shl
sub
xchg
mov
sub
daa
add
pusha
clc
rcl
cmp
rcr
stos
push
call
push
test
adc
xor
xchg
mov
(bad)
outs
jno
lea
fsubr
mov
adc
shl
mov
adc
mov
xchg
das
mov
push
and
outs
and
(bad)
pop
xchg
nop
pusha
xchg
mov
loopne
out
hlt
mov
mov
jae
(bad)
push
(bad)
call
nop
mov
and
mov
sbb
in
int
cli
cmp
mov
repnz
in
and
mov
out
xor
fisubr
xchg
jmp
jnp
xchg
cmps
xor
mov
xor
iret
xlat
rcl
cs
fwait
outs
(bad)
mov
(bad)
mov
xchg
mov
fwait
test
fwait
cmp
(bad)
adc
mov
adc
xchg
sbb
jae
push
pop
pop
sub
ficom
mov
je
(bad)
out
mov
xchg
mov
push
call
fwait
jl
outs
xor
and
dec
pusha
xchg
scas
pop
dec
invd
pushf
in
xchg
in
and
sub
push
xchg
cmp
sub
xchg
fld
mov
jne
aas
mov
sbb
aad
or
in
push
add
sub
and
cdq
sbb
mov
les
fwait
rol
sbb
test
loopne
cmp
jg
mov
xchg
sbb
pop
add
push
shr
adc
xchg
sub
test
pop
hlt
out
cld
mov
nop
xchg
fwait
ds
cmp
iret
out
sub
fwait
jl
lods
pop
pop
aam
call
retf
nop
xchg
jbe
rol
add
inc
adc
je
cld
cmp
into
xchg
sbb
sbb
rcl
sbb
cmc
jmp
xchg
add
dec
xchg
mov
mov
sbb
lds
data16
xor
or
les
xchg
sub
and
push
xchg
mov
xor
repz
xor
sbb
mov
cmp
push
and
popf
push
cmps
xchg
fldcw
sub
fnstsw
sbb
push
mov
aam
fwait
in
mov
and
(bad)
scas
xchg
sub
mov
mov
movs
mov
sbb
test
scas
cmp
mov
mov
aam
stc
adc
jmp
adc
iret
xchg
or
mov
sub
mov
and
mov
xchg
jnp
fimul
ss
dec
(bad)
pop
jle
imul
xchg
ds
jno
repz
jnp
lock
fwait
stos
rcr
inc
push
arpl
aam
or
xchg
repnz
lods
mov
fdivr
adc
jns
dec
xchg
sbb
je
sbb
int
push
sbb
pop
popa
clc
ins
sub
adc
stc
pusha
ror
xorps
add
out
cwde
fild
sub
jne
adc
into
rcl
in
xchg
ja
out
mov
dec
jne
js
repz
aas
ds
xchg
xor
mov
sbb
imul
and
jg
push
test
mov
push
sbb
xchg
sub
cwde
adc
ja
mov
cmp
fisttp
js
xchg
jge
imul
adc
xchg
xchg
mov
jmp
xor
sub
idiv
jns
xchg
ret
fadd
sub
mov
popf
cwde
cld
pop
mov
xchg
pop
repz
and
jb
and
ja
and
inc
sbb
fs
cmps
xchg
jnp
ret
aam
and
sbb
sub
cwde
xchg
fwait
mov
mov
test
icebp
mov
mov
cli
xchg
inc
add
mov
push
xor
cld
in
and
xchg
jae
bound
sbb
imul
push
leave
jg
mov
add
aam
jle
xchg
sbb
int
cs
fs
xchg
sbb
retf
xchg
adc
xchg
retf
sub
fs
scas
movs
inc
mov
mov
xor
sbb
(bad)
xchg
push
adc
xchg
loope
cli
mov
cmc
jmp
hlt
stos
xor
add
in
int
pop
xchg
adc
scas
into
adc
loopne
xchg
ror
adc
inc
xchg
(bad)
aad
gs
cmp
aas
lea
push
dec
loopne
mov
mov
xchg
jle
cli
test
adc
xchg
sub
or
loopne
jns
dec
cli
repnz
push
aam
fist
cdq
in
push
and
cld
sbb
cwde
xchg
add
xor
pop
xchg
dec
push
and
mov
adc
ins
mov
xchg
dec
or
lock
pop
sbb
imul
int3
xchg
outs
cli
inc
rcr
in
push
xlat
scas
ret
cmp
and
call
add
pop
popa
xchg
sub
and
inc
or
jo
test
frstor
rol
jge
mov
daa
xor
gs
mov
je
loop
xchg
(bad)
cmp
mov
push
sub
xchg
push
adc
mov
lods
cmc
test
xchg
cmps
scas
imul
cmp
aad
inc
dec
and
sub
push
xchg
std
lahf
cdq
test
cmp
cmp
sbb
mov
jbe
jle
xor
lahf
or
sahf
repnz
push
and
data16
jmp
cmp
setge
mov
xchg
adc
adc
stos
inc
scas
and
lahf
mov
enter
cmp
bound
jbe
xchg
jb
xchg
add
js
push
lods
leave
mov
int3
pop
fcomi
int3
jno
adc
cmc
xchg
arpl
jg
stos
mov
js
xor
push
jo
xchg
ja
sbb
ret
lods
loopne
cmp
push
mov
js
out
pop
adc
aam
jmp
xchg
inc
inc
popa
inc
call
xor
pop
mov
jge
aam
xor
cmpxchg
push
(bad)
mov
adc
dec
xchg
cmp
dec
xchg
std
inc
jno
sbb
(bad)
out
clc
pop
xchg
ror
int3
ins
neg
repnz
fwait
push
mov
enter
pop
(bad)
int
test
fidivr
arpl
jo
int3
mov
mov
sbb
leave
hlt
rcr
xchg
scas
retf
push
fs
cmp
xchg
inc
and
pop
adc
loope
push
sar
mov
xor
cmp
sbb
push
popa
scas
out
retf
sub
jle
mov
adc
lods
xchg
inc
pop
sub
cld
sbb
or
push
xchg
loop
push
mov
fist
(bad)
adc
pop
cmp
mov
aam
push
sub
xchg
mov
imul
mov
add
test
push
lds
fwait
mov
jnp
je
mov
add
sub
jo
cmp
sbb
out
xchg
xchg
push
imul
xor
xchg
inc
idiv
pop
inc
jmp
mov
sub
stc
add
fidiv
(bad)
mov
js
push
jbe
sahf
or
xor
xchg
dec
and
arpl
pop
jg
adc
mov
jbe
fsub
hlt
rcl
mov
dec
sub
xchg
pop
cdq
mov
sar
xchg
inc
adc
movs
push
sbb
or
dec
enter
xor
xchg
ins
mov
jp
fwait
or
xchg
xchg
gs
inc
sub
dec
pop
xchg
jg
add
xchg
lea
dec
js
movs
lock
mov
sub
cmps
mov
xchg
push
popf
xchg
div
nop
data16
js
fld
iret
mov
lock
or
jmp
ficom
pop
xor
ret
adc
cmp
aaa
retf
sub
mov
push
scas
retf
pop
xchg
jmp
cmp
xchg
adc
pop
add
mov
adc
jbe
dec
jns
sub
xchg
fldcw
sbb
xchg
cli
mov
mov
mov
in
fcmovne
lds
adc
mov
pop
mov
xchg
cmp
aam
mov
call
dec
test
pop
fist
aad
xor
in
out
dec
xchg
test
and
in
add
call
xchg
fcomp
fbstp
cwde
dec
aam
pushf
test
xchg
inc
lea
fcom
test
inc
xchg
mov
ficom
xchg
lods
out
in
sub
rol
xor
int
call
mov
xchg
popa
ds
xchg
ret
push
hlt
sbb
xchg
mov
and
jmp
test
sbb
sbb
and
mov
pop
add
mov
(bad)
pop
mov
cmp
repnz
fisubr
xchg
sub
xchg
push
push
sbb
outs
in
pop
jo
mov
ja
xchg
dec
(bad)
out
cwde
mov
push
mov
cmps
clc
test
ret
mov
and
lahf
in
xchg
mov
test
inc
int3
add
xchg
add
dec
xlat
call
xchg
test
and
fisttp
cwde
xchg
arpl
mov
mov
test
stos
xchg
int
les
int3
adc
scas
loop
mov
mov
sbb
ret
(bad)
in
jle
pop
data16
jp
adc
(bad)
int
movs
xchg
retf
ja
mov
paddsb
mov
push
xor
or
fwait
and
sbb
aaa
xchg
dec
sbb
mov
ja
repz
xchg
int
mov
mov
xchg
sbb
in
and
mov
mov
mov
inc
pop
div
lds
ss
out
cmp
mov
sub
ss
call
jnp
jno
and
xchg
inc
je
and
push
xor
jle
push
shr
jno
pop
int3
xchg
fs
adc
lods
scas
cwde
out
jle
mov
pop
xchg
pop
mov
add
xchg
jb
iret
sub
in
jle
cmp
xchg
pop
inc
mov
hlt
sub
push
push
in
inc
dec
xchg
xchg
pop
fwait
mov
xchg
rol
std
stos
mov
xchg
cld
xor
push
push
xchg
mov
dec
sub
loopne
or
sbb
add
jmp
xor
mov
push
xor
hlt
outs
xor
(bad)
sub
pop
rol
jl
leave
mov
jne
nop
enter
mov
sahf
dec
lods
inc
add
out
push
leave
icebp
xchg
stc
fdivp
sbb
jg
scas
mov
adc
xor
and
shl
scas
xchg
(bad)
call
add
(bad)
sbb
jae
ror
pop
xchg
aas
mov
adc
push
int
pushf
adc
outs
sbb
repnz
add
adc
pop
mov
leave
adc
fs
ror
push
fs
and
xchg
sub
div
js
xchg
xor
cld
cli
addr16
jmp
fidiv
xchg
cmp
and
loopne
dec
sub
jge
shr
adc
pop
icebp
ficomp
sbb
sub
sar
xchg
jb
add
aam
shr
xchg
jmp
xor
cs
xchg
or
lahf
dec
pop
ss
mov
ficomp
xchg
and
test
mov
adc
std
mov
sbb
xchg
mov
mov
mov
mov
std
jmp
xor
(bad)
in
repz
ret
stos
rcr
mov
inc
mov
jle
sub
dec
mov
xchg
mov
inc
jl
xchg
call
mov
(bad)
aam
mov
ja
cmp
sahf
rcr
sbb
mov
aad
jno
adc
jae
inc
sbb
xchg
adc
cmps
dec
jo
movs
lods
out
ss
xchg
fist
mov
fwait
lods
bnd
fild
hlt
or
jge
daa
nop
lock
xlat
sub
jo
fadd
push
dec
mov
stos
test
inc
gs
xchg
and
nop
jmp
stc
xchg
inc
push
dec
test
xchg
dec
aaa
out
ret
cdq
xchg
loopne
adc
lods
inc
sbb
mov
cs
cmps
jge
jnp
and
dec
push
mov
dec
sbb
jl
jmp
leave
sbb
ja
dec
mov
pop
mov
stos
push
out
icebp
mov
in
cmc
in
mov
xchg
(bad)
mov
test
xor
std
mov
aam
jle
(bad)
sbb
mov
adc
clc
add
xchg
push
xchg
xchg
nop
xor
lods
stos
mov
xchg
push
movs
repz
pop
mov
xchg
mov
jae
and
dec
cld
xchg
sub
jle
sbb
xchg
jne
mov
xchg
(bad)
out
nop
sub
pushf
fcom
pop
push
test
mov
fwait
add
inc
cli
data16
loope
xchg
gs
mov
jns
push
arpl
movs
fnstenv
in
xor
fnsave
pusha
mov
dec
sub
inc
into
icebp
sub
lock
xchg
loop
ins
dec
jmp
pusha
cwde
pop
xchg
lock
jb
pop
clc
xchg
adc
in
sbb
stc
loope
bound
(bad)
fimul
retf
jl
shr
pop
in
xchg
pop
inc
ins
leave
pop
adc
push
xchg
cmp
adc
pop
mov
fcom
add
push
aaa
and
out
enter
ret
sub
cmp
addr16
adc
inc
sbb
fcomp
(bad)
ins
jae
aam
cwde
es
sub
xchg
aas
jle
lock
movs
xchg
(bad)
sti
call
loope
adc
fbld
(bad)
mov
(bad)
mov
rol
les
adc
retf
(bad)
(bad)
inc
mov
gs
jo
sbb
cmp
rcr
xchg
outs
(bad)
test
out
push
add
repnz
sub
push
add
ss
jno
mov
xchg
mov
or
mov
push
jnp
test
daa
xchg
mov
push
lock
mov
push
xor
sub
xchg
mov
lds
aam
arpl
and
xchg
outs
js
movs
test
push
xchg
mov
push
dec
in
aad
xchg
(bad)
inc
xchg
call
dec
jp
xor
pop
leave
xchg
ss
imul
outs
push
les
inc
jne
mov
out
inc
dec
js
push
in
(bad)
mov
cmp
(bad)
rcl
jnp
stos
add
and
xchg
aas
sbb
jp
rol
xor
xchg
jmp
sub
loope
in
mul
ret
(bad)
mov
daa
(bad)
iret
sbb
out
mov
hlt
inc
ds
or
or
ret
pop
sub
mov
pusha
or
not
cmps
push
or
xchg
pop
(bad)
or
or
aam
sar
xchg
jb
push
mov
mov
or
dec
jmp
loopne
inc
test
sbb
outs
jp
aaa
xor
inc
arpl
pusha
xchg
out
and
jle
(bad)
adc
cmp
mov
cmp
sub
std
push
mov
dec
xchg
push
aad
add
or
mov
stos
sbb
shr
fst
out
push
mov
inc
adc
xchg
popf
dec
ds
mov
add
fs
mov
das
nop
gs
shl
xor
adc
scas
inc
jmp
add
(bad)
xchg
or
psubq
push
not
(bad)
cmp
pop
jle
jbe
mov
cld
imul
call
lea
popa
sbb
(bad)
jecxz
adc
xchg
xchg
ss
clc
enter
js
dec
sbb
xchg
cmp
in
ret
je
push
sub
lock
int3
or
jl
and
rol
xchg
mov
iret
xor
xor
dec
adc
or
loopne
(bad)
mov
mov
jmp
push
cwde
sbb
mov
fstp
mov
out
xchg
or
dec
les
mov
popf
scas
mov
retf
lods
pop
push
je
test
ja
inc
(bad)
loope
dec
call
xchg
stos
fadd
xor
push
je
cmp
mov
xor
loopne
jl
dec
xchg
adc
mov
clc
fist
aas
stos
icebp
mov
in
sbb
shl
adc
neg
adc
xor
xlat
stos
sub
retf
je
mov
cmp
(bad)
int3
push
inc
repz
test
xlat
or
in
xchg
fbstp
imul
adc
sub
repnz
adc
je
fst
and
int
cs
iret
js
xchg
lahf
mov
cmp
les
cld
xchg
adc
ja
ins
neg
mov
adc
jmp
push
xchg
jb
push
out
cwde
xchg
cmps
lea
fs
daa
int
pop
xchg
inc
sub
xchg
xor
mov
or
aaa
pop
pushf
xchg
cmp
add
ds
pop
pop
jns
fidiv
mov
inc
into
xchg
adc
call
sub
and
push
nop
mov
xchg
push
clc
cli
jg
ror
xchg
push
jle
(bad)
into
inc
xchg
dec
ja
movs
mov
adc
fst
xchg
xchg
mov
xor
xchg
adc
jg
int3
imul
push
adc
jno
mov
mov
cwde
fst
mov
sbb
xlat
xor
xor
jbe
or
xchg
pop
outs
nop
int3
movs
clc
jb
rol
into
adc
xor
dec
and
jge
inc
push
repnz
xchg
lock
pop
dec
push
add
cdq
xchg
push
push
fs
xchg
ins
xchg
jmp
push
rcl
daa
test
lahf
jns
(bad)
mov
push
jmp
cmp
movs
repnz
xchg
inc
gs
call
cmps
aam
sub
mov
mov
shl
nop
stc
cdq
outs
mov
adc
jmp
xchg
pop
pop
rol
jnp
test
xchg
das
xlat
popf
inc
jecxz
and
popa
pop
fwait
xchg
xchg
cmps
or
imul
test
sti
adc
adc
xchg
movs
aaa
jl
js
dec
neg
(bad)
xchg
data16
add
aam
xchg
jecxz
ror
mov
(bad)
sbb
mov
xchg
xchg
retf
adc
mov
aam
jo
jl
xchg
push
xchg
jmp
retf
mov
cwde
sti
les
add
daa
xchg
(bad)
cmp
sub
ja
push
fwait
inc
jne
jl
hlt
cmp
pop
mov
xor
xchg
stos
in
xchg
mov
mov
hlt
pusha
daa
xchg
or
scas
lock
pop
mov
sbb
hlt
arpl
stos
sbb
ja
hlt
sub
and
pop
mov
xor
xor
xor
or
inc
fadd
xchg
xor
cmp
fcom
(bad)
mov
xchg
add
and
xchg
movs
je
cmc
data16
rcl
call
pop
xor
inc
je
xor
xor
sbb
mov
jmp
lods
xchg
popf
ror
call
xor
push
inc
xchg
mov
int
adc
adc
xor
xchg
fwait
mov
xor
(bad)
xchg
shld
ins
mov
pusha
jg
xchg
mov
push
or
xchg
pop
std
xchg
outs
stc
push
bound
add
repz
push
jmp
fnstsw
jg
mov
lahf
inc
push
inc
jo
inc
mov
push
xchg
adc
jecxz
les
or
xchg
and
push
loopne
mov
jbe
pop
sub
out
dec
mov
inc
xchg
cmp
aaa
shl
dec
shl
sbb
in
xchg
std
loopne
mov
ret
outs
mov
and
mov
and
or
ins
fwait
push
mov
movs
dec
xchg
push
or
ret
mov
xor
cmc
ret
mov
(bad)
out
mov
outs
mov
push
vzeroall
xchg
sbb
imul
inc
xchg
dec
jno
test
xchg
imul
jle
xchg
cmp
or
xchg
test
add
jno
push
inc
mov
push
popf
xor
jl
xchg
pop
xor
fild
cmps
adc
pop
sti
dec
mov
test
js
xchg
xchg
iret
and
(bad)
retf
mov
cmps
ds
push
mov
adc
cld
sahf
add
imul
or
xchg
add
sbb
std
xchg
xchg
(bad)
addr16
je
pop
xchg
jle
mov
adc
push
sbb
and
or
xchg
inc
jb
push
sahf
jge
(bad)
xchg
lods
ins
mov
fwait
ret
shr
je
dec
pop
adc
sti
xchg
rol
lahf
mov
inc
adc
pop
jmp
jl
dec
ss
xchg
or
loopne
or
jmp
inc
je
retf
xchg
cmp
out
xchg
mov
push
push
sub
(bad)
test
shl
xchg
xchg
xor
mov
sbb
push
add
lock
mov
mov
jl
xchg
jmp
mov
aaa
xor
(bad)
clc
stos
xchg
call
pushf
imul
ror
ret
add
mov
jecxz
sti
pop
sbb
push
sbb
test
je
add
mov
cli
cwde
imul
dec
sub
cmp
mov
inc
mov
xchg
add
dec
aam
mov
mov
lock
xchg
mov
sets
lahf
int3
aas
mov
add
or
pop
fmul
adc
fs
mov
fbld
or
xchg
in
cmp
mov
and
in
adc
xchg
inc
lock
sbb
mov
aam
add
test
in
imul
fcom
out
fidiv
inc
xor
dec
adc
into
cmc
xchg
or
adc
mov
and
jno
mov
jg
mov
adc
sub
push
aam
data16
mov
int
jns
call
xor
daa
pop
scas
push
fwait
mov
add
stos
out
xchg
mov
cmp
xchg
aas
xchg
(bad)
cdq
sar
dec
jecxz
jle
enter
dec
stos
ret
sub
mov
test
mov
aaa
push
gs
xchg
mov
int
stos
xchg
dec
pop
and
or
xchg
sti
jge
scas
mov
in
aas
cdq
dec
xor
mov
or
mov
not
adc
mov
push
jo
pusha
shr
dec
push
std
jge
inc
xchg
les
stos
adc
cmp
mov
(bad)
push
ins
in
push
mov
je
xor
movs
pop
mov
rcr
jne
pusha
ret
and
jmp
loopne
jmp
sbb
in
or
sahf
add
addr16
cwde
pop
(bad)
sbb
test
xchg
mov
adc
popf
xchg
test
pop
sub
dec
enter
movs
mov
stos
cmp
cli
sahf
test
dec
inc
sbb
cmp
call
es
xchg
popf
ins
iret
clc
pop
dec
and
rol
adc
mov
mov
int3
xchg
sub
mov
inc
lds
fcom
push
push
and
xor
push
mov
and
fist
jns
mov
cmp
iret
push
fs
push
xchg
stos
ja
cmc
push
icebp
jmp
inc
jecxz
cmp
add
test
test
daa
xchg
mov
inc
adc
inc
push
push
and
shl
mov
retf
lds
jae
(bad)
test
aaa
mov
inc
jmp
je
dec
dec
fwait
pop
dec
adc
pop
lods
xchg
dec
test
sbb
xchg
xchg
lds
cmp
adc
xlat
and
push
xchg
mov
or
mov
xor
inc
jmp
ja
int3
fnstsw
push
xchg
xchg
adc
ins
xchg
out
das
in
lahf
test
sti
outs
xchg
pop
dec
rcl
xchg
xchg
sahf
mov
xlat
mov
aas
clc
aam
jmp
mov
xchg
fild
ret
out
add
repnz
xor
fucomip
repz
and
into
cmp
adc
xlat
cmps
pushf
fsubrp
cdq
ss
xchg
xchg
sub
scas
call
sar
pop
jecxz
(bad)
jb
outs
xchg
call
mov
xchg
lock
dec
sbb
packssdw
ins
dec
cmp
push
movs
daa
adc
xchg
jl
mov
out
mov
push
repz
xchg
fwait
dec
ds
push
lea
rcl
dec
pop
fs
scas
out
xchg
fst
jg
clc
retf
ss
call
mov
jmp
jge
inc
cdq
push
or
int
adc
push
adc
xchg
stos
call
(bad)
xchg
cmps
cmps
or
mov
or
pop
mov
adc
adc
fdivr
stc
jbe
jmp
call
add
cld
imul
loope
xchg
and
daa
aad
rcl
xchg
in
or
pop
popa
gs
xchg
ss
or
add
pushf
nop
add
bound
xchg
cmps
loope
rcr
hlt
or
jle
xchg
outs
lea
mov
xchg
add
jge
loope
ss
xlat
and
xchg
das
push
in
adc
shr
xchg
movs
mov
leave
push
cmps
xor
inc
lahf
jns
adc
push
xchg
outs
retf
test
(bad)
in
je
ins
les
xchg
test
movs
xchg
ror
outs
adc
pop
or
gs
(bad)
pop
js
pop
bound
call
dec
test
xchg
cmps
jnp
jae
je
dec
xchg
imul
push
test
or
ins
sbb
test
aaa
xchg
mov
cmp
jbe
xchg
push
ja
pop
rcr
or
fisub
aad
mov
je
xchg
call
mov
mov
in
fs
mov
seta
mov
outs
add
gs
dec
push
lock
outs
sbb
adc
sbb
cld
mov
mov
or
dec
inc
call
add
jecxz
push
jge
mov
es
fisttp
mov
pop
movs
and
sbb
jne
daa
loop
jae
and
mov
pop
mov
(bad)
es
mov
jae
pop
and
xchg
pop
js
daa
pop
gs
xchg
push
iret
aas
adc
xchg
ret
bound
cmps
mov
sub
mul
xchg
xchg
jns
jmp
fwait
repz
dec
loopne
das
push
in
xchg
sar
sub
xor
loop
xchg
xchg
xchg
cmp
aas
ins
outs
xchg
cmp
fucomip
mov
out
push
jp
out
jbe
in
movs
inc
rcl
in
xchg
iret
into
or
mov
jo
push
(bad)
jne
dec
call
rol
jmp
cmpps
mov
push
xchg
mov
xchg
adc
scas
into
in
xchg
cdq
add
fmul
inc
fiadd
jmp
xchg
push
mov
cmp
aad
in
out
cmps
mov
dec
ss
or
mov
bound
std
ins
inc
jae
xchg
inc
xor
test
test
lahf
pop
fwait
das
dec
xchg
scas
mov
fmulp
xchg
retf
inc
pop
int
sbb
xchg
ret
push
xchg
mov
or
and
in
adc
xchg
dec
test
pop
lock
sbb
fwait
push
xchg
into
sub
jnp
test
xchg
aas
iret
cmps
shl
pop
xchg
add
push
inc
xor
ret
mov
sbb
xchg
jmp
adc
push
repnz
mov
fidivr
xchg
mov
sbb
and
and
ffreep
xchg
inc
repz
sub
add
ret
pop
ficom
or
jae
lahf
test
in
ins
cs
push
into
xchg
imul
in
and
dec
xchg
jae
lods
adc
sbb
mov
jl
cmp
mov
hlt
mov
or
mov
je
movs
xchg
cmp
ja
(bad)
sbb
xchg
cmps
adc
rol
sbb
jle
out
mov
sbb
xchg
pop
daa
lock
sbb
sbb
jbe
cmovne
add
mov
pop
lock
cmp
mul
pop
into
add
and
adc
dec
push
dec
lds
push
dec
aad
or
xor
stos
and
mov
in
aas
xchg
mov
jl
pop
gs
xchg
inc
mov
cmp
iret
ret
cmp
jbe
mov
(bad)
lahf
cmp
dec
xchg
adc
neg
mov
dec
xchg
inc
adc
xchg
cmps
adc
test
mov
xchg
in
xchg
shl
xchg
lods
jl
xchg
jo
add
fstp
mov
adc
mov
xchg
call
neg
aaa
adc
jmp
cmc
push
rol
and
xchg
mov
xchg
aad
inc
cld
pop
rcr
mov
je
mov
xchg
push
mov
fcomp
and
loop
jne
hlt
enter
mov
xchg
push
(bad)
lea
push
inc
pop
inc
repz
xchg
xchg
mov
mov
xchg
push
stos
popf
jp
stc
adc
push
xchg
push
mov
push
pop
das
ss
xor
mov
pusha
mov
add
std
addr16
jle
dec
out
sub
aas
jle
fwait
cmp
les
stos
push
xchg
push
pushf
cmp
(bad)
test
jmp
xor
sbb
(bad)
dec
and
and
mov
and
pop
(bad)
cmp
and
inc
and
fwait
xchg
sbb
push
inc
mov
leave
xchg
push
lock
adc
mov
les
mov
sar
mov
sub
fisub
xor
(bad)
lea
ins
push
jae
cmp
adc
and
hlt
push
lods
stc
mov
loop
mov
inc
rcl
jmp
jae
repnz
cmc
(bad)
shr
hlt
xchg
cs
ss
jb
adc
es
sahf
cdq
push
int3
mov
adc
and
mov
hlt
fisubr
dec
mov
clc
xchg
dec
xor
and
mov
xor
jecxz
aaa
into
std
fwait
sbb
imul
cmp
inc
jp
xchg
fs
adc
adc
ins
jmp
and
stos
xchg
inc
sub
pop
jecxz
and
mov
cmc
and
push
lock
xchg
fidivr
mov
xchg
pop
fdiv
mov
mov
xchg
pop
pop
arpl
cmps
xchg
mov
mov
mov
pop
pop
jno
xchg
push
xor
mov
popa
leave
jp
xchg
hlt
icebp
aam
push
addr16
mov
arpl
imul
(bad)
xor
fwait
pop
aas
daa
cwde
add
adc
sti
push
and
lock
js
cli
xchg
mov
or
mov
push
jmp
xchg
push
sar
push
mov
jno
xchg
pop
into
or
xor
push
lods
and
aaa
xchg
xchg
and
fwait
dec
xchg
push
mov
loopne
inc
xchg
rcl
pop
xchg
out
aam
or
jp
mov
mov
or
jb
xchg
and
sbb
int
adc
test
add
adc
xchg
mov
xchg
dec
mov
sub
dec
inc
mov
sub
dec
ret
push
xchg
dec
xor
addr16
add
sti
arpl
cmp
pop
cmc
test
inc
xchg
nop
mov
pop
lods
jl
xchg
bound
jae
test
dec
fwait
popf
test
xchg
sub
push
pop
test
addr16
or
hlt
jle
fiadd
adc
jmp
repnz
adc
push
(bad)
es
in
aam
fs
jae
mov
enter
jb
push
and
mov
add
frstor
inc
add
je
cmp
dec
xchg
sbb
inc
sub
es
and
push
jl
ficom
pop
sbb
pop
xchg
stos
jae
push
xchg
adc
mov
rcl
pop
lods
out
mov
je
fwait
retf
xchg
cmps
daa
push
hlt
pusha
sub
test
mov
add
rcr
xchg
in
stos
mov
xlat
popf
in
xchg
add
adc
jae
xchg
loope
sar
out
enter
mov
test
jg
xchg
sbb
hlt
adc
pop
jnp
adc
not
inc
in
clc
in
inc
addr16
xchg
sahf
or
mov
adc
shl
dec
fsub
sub
mov
xchg
sbb
inc
mov
adc
ds
mov
in
mov
mov
dec
call
sub
stos
xchg
sub
jns
shl
or
push
aaa
add
adc
xor
and
jmp
pop
cmp
pop
mov
or
mov
rcr
pop
cli
add
retf
bound
mov
scas
sub
dec
inc
cmp
pop
cmp
ret
iret
xchg
ficomp
mov
mov
jg
xchg
pop
repnz
hlt
loopne
sti
ins
test
cmps
lock
xor
pop
add
mov
xlat
cli
out
dec
ja
out
inc
clc
adc
inc
or
fstp
retf
pop
jmp
bound
das
xor
xchg
out
imul
shl
jb
xchg
fwait
push
dec
into
sbb
sub
mov
cmps
ror
fs
(bad)
scas
sahf
lods
clc
xchg
cld
adc
out
xchg
and
dec
xchg
sbb
je
xchg
test
leave
mov
xchg
add
sub
fcom
fbstp
pop
pop
mov
push
jnp
mov
push
addr16
bound
loopne
xchg
aaa
inc
jns
cmp
dec
int
xchg
mov
out
push
xor
jle
in
inc
je
pop
xor
mov
xchg
adc
in
jbe
sub
sbb
xchg
out
fwait
inc
or
cmp
mov
call
adc
jecxz
mov
(bad)
ror
cbw
loope
xchg
pop
pop
inc
in
xchg
jle
xchg
call
push
or
out
pop
in
inc
aas
and
lds
mov
xchg
aam
xchg
je
inc
mov
sbb
mov
xor
fild
cmp
call
out
jl
push
adc
in
mov
pop
hlt
es
shl
stos
inc
xchg
add
les
leave
xchg
call
(bad)
pop
and
inc
xchg
mov
push
push
or
inc
mov
mov
or
xchg
cmp
cs
or
test
push
not
pop
retf
cli
outs
in
push
js
and
sbb
movs
lea
xchg
sti
jl
or
sbb
and
outs
icebp
fist
jmp
out
ror
fwait
iret
out
mov
cmp
outs
dec
or
sub
mov
mov
ins
jp
movs
scas
xchg
fsub
int3
or
pop
push
xchg
dec
sub
push
xor
fs
in
sbb
and
xchg
pop
inc
je
add
ficom
mov
jge
pop
cmp
jmp
out
mov
adc
jbe
imul
test
in
push
(bad)
cmp
aas
xor
cmp
sbb
inc
adc
cmp
xchg
add
adc
pop
test
mov
push
mov
daa
movs
ret
mov
sbb
hlt
bound
shl
xchg
loope
popf
mov
idiv
into
mov
sbb
aaa
adc
add
and
into
pop
adc
sahf
inc
in
dec
daa
mov
or
cmp
mov
popf
into
js
xchg
cdq
push
xchg
hlt
sbb
xor
xchg
mov
inc
jp
inc
xchg
pop
push
scas
rol
xchg
les
out
into
enter
mov
pop
lahf
cmps
inc
hlt
sahf
shr
retf
add
add
je
xchg
add
les
xchg
cmp
call
in
push
shl
cmp
cmps
xchg
jb
jg
hlt
mov
rol
adc
es
mov
retf
mov
ins
xor
xchg
ror
add
mov
xor
xlat
out
call
xchg
imul
xchg
xor
retf
mov
mov
cdq
cmp
and
test
retf
std
(bad)
stc
push
or
xchg
stos
fdiv
retf
movs
xor
xlat
dec
or
jno
lahf
mov
arpl
push
add
or
mov
int
repz
xchg
cmp
xchg
fucomi
jmp
lods
jl
retf
sahf
fwait
add
imul
stos
push
stos
mov
xchg
mov
adc
inc
rcl
add
xchg
pop
out
xchg
inc
cmps
mov
hlt
in
inc
mov
shr
arpl
sbb
xchg
cmp
inc
(bad)
mov
and
push
call
mov
xchg
aam
leave
xchg
xor
and
cli
cdq
out
xchg
or
dec
push
jo
adc
cmp
fisttp
mov
mov
inc
xchg
mov
mov
push
mov
outs
jecxz
hlt
shl
lds
cmp
cmc
push
aas
test
xchg
sub
mov
out
mov
stos
loope
adc
fild
(bad)
xchg
mov
xchg
cmp
cld
push
xor
not
jno
fadd
retf
or
out
dec
popf
and
rol
aas
adc
push
popf
(bad)
lods
addr16
shl
mov
rcl
(bad)
movs
adc
ja
jecxz
adc
push
xchg
sti
aas
ror
add
mov
jmp
or
xchg
push
push
dec
push
mov
fs
sbb
xchg
mov
das
push
call
jnp
lods
loop
scas
mov
inc
and
(bad)
out
xchg
xchg
inc
mov
add
dec
xchg
adc
jae
ja
(bad)
cdq
fwait
inc
mov
scas
mov
call
or
jp
inc
xchg
add
loop
cmp
ret
xchg
popa
cs
or
push
cmp
fs
in
xchg
dec
popa
test
push
neg
cmp
mov
int3
push
xchg
inc
js
and
stc
ror
mov
fist
arpl
jmp
outs
jle
addr16
xchg
add
je
mov
xchg
sbb
loope
adc
or
xor
scas
pop
pop
xchg
mov
dec
sub
inc
or
mov
xchg
sub
leave
inc
fcomp
xchg
xchg
sbb
ds
xchg
arpl
sbb
retf
shl
mov
je
add
xor
in
retf
xchg
push
xlat
cmp
loope
dec
(bad)
sub
(bad)
out
xchg
out
jne
add
dec
(bad)
std
xchg
pushf
jp
iret
scas
in
mov
xlat
mov
cmc
xchg
test
mov
jg
pop
inc
hlt
mov
retf
sbb
adc
rcl
shl
dec
mov
xchg
mov
call
dec
into
xchg
lea
aam
mov
rcl
mov
ss
in
stos
ins
and
or
ins
loopne
je
xchg
dec
sbb
xlat
cmp
pop
mov
(bad)
jp
mov
sbb
outs
push
scas
xor
xor
test
arpl
inc
xchg
cmp
pusha
ins
cmps
out
jp
dec
xchg
cmp
xor
mov
mov
sbb
push
imul
test
xchg
and
outs
and
xor
sub
je
bound
mov
(bad)
aam
or
hlt
mov
cwde
or
sbb
pop
test
cwde
dec
xor
(bad)
ficom
mov
retf
push
xchg
pop
push
ret
inc
sbb
cmp
jae
into
mov
lods
imul
cmp
xchg
daa
fidiv
push
movs
xlat
mov
adc
clc
retf
and
outs
mov
aas
mov
fwait
or
jns
stos
jb
mov
add
pusha
mov
outs
jnp
ss
xchg
dec
test
push
or
ret
mov
xchg
dec
pop
cdq
xchg
fimul
dec
fisttp
xchg
pop
imul
aas
popf
xor
xor
rcl
fsub
ret
rcl
call
repz
ror
or
hlt
dec
popa
sub
xchg
les
mov
adc
jbe
aam
mov
inc
lahf
jno
pop
dec
xchg
lds
into
mov
xchg
inc
cmp
ins
test
cmovae
push
add
xlat
cs
push
and
fwait
addps
das
jmp
push
pusha
aam
loopne
push
xchg
push
stc
test
adc
aaa
xchg
sub
xchg
ds
mov
lods
cwde
dec
das
jns
mov
push
je
add
mov
pop
(bad)
movs
mov
xchg
mov
xchg
inc
cmps
push
push
mov
je
mov
scas
ret
mov
out
pop
aaa
xchg
xor
enter
xchg
fwait
jge
mov
fcomp
dec
in
mov
push
adc
lods
xor
retf
in
pop
call
bound
lods
xchg
mov
or
and
ret
sahf
bound
xchg
pop
sti
imul
les
and
out
push
and
cmp
jle
and
xchg
push
es
push
pushf
fsubr
sbb
cmc
mov
xchg
adc
add
sub
test
jg
loopne
mov
cs
sbb
fnstsw
push
repz
cwde
je
mov
div
push
xchg
test
pusha
cmp
(bad)
jbe
xor
outs
xchg
aad
pusha
in
test
mov
jg
inc
and
mov
hlt
sub
xchg
cmp
sti
add
push
dec
retf
xchg
dec
xchg
imul
push
test
outs
mov
jp
cdq
mov
push
pop
popa
daa
xchg
mov
fiadd
xchg
into
dec
mov
cmovp
xchg
add
iret
sub
push
add
mov
dec
fnsave
popa
call
mov
mov
call
jae
lahf
jbe
adc
in
in
mov
sbb
ss
(bad)
les
mov
cmp
pop
scas
movs
addr16
mov
jnp
mov
(bad)
mov
pop
xchg
and
hlt
dec
jae
lods
push
inc
push
inc
sbb
cmp
ss
fst
jp
iret
mov
and
mov
or
sub
mov
xchg
xor
adc
scas
ds
cmps
out
sub
sub
pop
imul
loopne
stc
xor
nop
mov
retf
pop
jbe
std
push
xchg
inc
push
fiadd
xchg
sub
mov
jns
ficomp
xchg
push
add
inc
inc
and
push
cdq
mul
cmc
leave
push
sbb
dec
xchg
push
add
xor
fucomp
adc
sub
push
cmp
daa
mov
das
pop
adc
sub
loop
xchg
push
std
cli
jns
xchg
push
sbb
inc
ret
fisttp
ss
sbb
push
xchg
shl
mov
mov
dec
ss
sbb
mov
rcr
or
pop
movs
jp
or
mov
test
xor
xlat
mov
push
mov
push
(bad)
mov
cmps
mov
or
jb
in
xchg
jmp
mov
xchg
fcmovbe
nop
jl
cmps
mov
sub
in
push
lea
xchg
cli
cmp
add
clc
mov
bound
test
leave
(bad)
mov
loop
pop
jge
push
sub
pusha
shl
xchg
mov
fmul
iret
inc
xchg
(bad)
and
push
xchg
inc
ins
sub
jnp
inc
xor
push
clc
jge
pop
xchg
mov
daa
mov
xchg
push
xor
inc
aaa
enter
cmp
xchg
fidivr
fistp
push
outs
daa
(bad)
cmp
mov
mov
dec
xchg
xchg
pushf
mov
(bad)
cld
mov
push
mov
mov
xchg
(bad)
push
mov
in
sub
iret
mov
ret
ds
add
adc
xchg
pop
in
bound
inc
addr16
or
aam
sahf
mov
xor
xchg
jns
add
pop
xchg
mov
push
mov
xchg
xor
jnp
test
push
mov
inc
or
call
sbb
sbb
xchg
and
cmp
or
xor
jae
pop
into
arpl
lods
xrelease
rcl
lock
xchg
cmp
or
push
std
movs
mov
inc
cld
ret
xchg
dec
stos
mul
inc
add
arpl
pop
push
lahf
jo
mov
xor
stc
or
push
movd
dec
sub
lods
jecxz
mov
dec
les
or
pop
mov
je
sub
push
popf
shl
mov
jo
ss
sbb
fnsave
ror
xchg
push
and
fild
fiadd
clc
sbb
add
mov
daa
sbb
aam
loopne
mov
aaa
ja
loop
and
cs
in
sbb
rol
jge
push
sbb
ja
pop
lahf
jecxz
inc
not
mov
sub
repz
mov
call
dec
mov
mov
or
mov
retf
push
clc
js
xchg
pop
mov
inc
fist
in
push
and
rcl
xchg
std
das
mov
stc
cld
not
ins
je
shl
adc
movs
jmp
mov
xchg
push
pop
jle
or
sub
cld
ss
inc
jbe
push
xchg
adc
lea
mov
push
hlt
leave
mov
dec
adc
or
pop
daa
push
int3
mov
shl
stc
arpl
dec
fidiv
and
pop
fmul
inc
or
xchg
mov
ficom
mov
xchg
enter
test
fst
sbb
iret
mov
int
xchg
out
out
sahf
pop
gs
push
inc
sub
mov
jle
or
pop
aas
stos
inc
add
movs
fsubp
sub
retw
inc
js
hlt
cld
or
lods
mov
arpl
xchg
mov
sbb
adc
leave
sahf
xchg
jge
dec
cmp
cmp
cld
or
pushf
pop
xchg
stos
cmp
fstp
outs
xchg
and
add
jbe
into
push
fwait
int3
xor
xlat
cmp
xchg
mov
jbe
shl
adc
push
push
fwait
cmc
add
xor
sub
and
lahf
cwde
dec
dec
xor
xchg
adc
pop
bound
add
or
repnz
das
adc
mov
jge
jmp
mov
xchg
mov
pop
and
into
sbb
lea
xchg
stos
mov
stos
xchg
push
rcl
add
xchg
sub
add
sahf
fwait
sbb
daa
cmp
(bad)
xchg
aas
pop
movs
stos
cwde
jae
cmc
xchg
mov
cmp
jecxz
lods
ret
xchg
out
std
lods
mov
popa
sub
cmp
push
or
leave
fwait
iret
or
mov
xchg
jecxz
(bad)
fldenv
ins
jmp
mov
bswap
xchg
push
inc
loope
(bad)
int3
xlat
xchg
xchg
stos
jnp
repz
mov
ss
daa
xor
xlat
enter
test
js
xchg
loop
and
xchg
pop
das
mov
xchg
imul
fisub
mov
inc
dec
pop
inc
xchg
fsubr
rcr
sub
jp
mov
aaa
mov
outs
and
sub
mov
jae
xor
sbb
sub
outs
pop
xchg
mov
cmc
push
mov
fwait
fwait
cmps
inc
repz
adc
adc
inc
add
xchg
lods
xchg
stos
xchg
or
sbb
shl
and
mov
xor
jae
sub
xchg
dec
fist
ds
sbb
mov
pop
test
push
outs
jb
aam
ret
xchg
cmp
adc
push
ds
scas
and
pop
inc
xlat
pop
mov
adc
fwait
cmp
pop
lods
and
push
imul
mov
cmp
inc
(bad)
jne
repnz
jno
dec
jnp
xchg
fimul
mov
sbb
push
mov
enter
push
inc
xor
pop
iret
loopne
xor
popf
pusha
das
repnz
jl
inc
xchg
div
loope
aad
xchg
(bad)
adc
outs
(bad)
xor
xchg
pop
aaa
add
push
or
push
xchg
cmps
es
inc
xchg
pusha
addr16
div
movs
dec
xchg
cs
int
into
sub
fwait
shl
lahf
jle
adc
and
loop
inc
test
xchg
or
push
jge
mov
pop
sub
push
jnp
leave
pop
in
sbb
add
mov
jbe
xchg
loope
mov
fadd
jo
addr16
lea
mov
test
dec
idiv
inc
std
pop
pop
xchg
stc
push
iret
hlt
test
add
jl
xchg
cmc
cmp
movs
sbb
adc
fwait
push
jmp
inc
ja
push
push
inc
lock
aad
(bad)
xchg
jmp
cmp
ret
icebp
repnz
les
xor
mov
les
dec
pop
sbb
or
adc
xor
jb
les
pop
jnp
dec
sbb
mov
or
stos
adc
mov
xchg
enter
out
mov
cmp
cmp
out
out
xor
xchg
aas
scas
xor
mov
or
pop
or
xchg
xchg
cmp
push
jl
xchg
adc
iret
sub
mov
aam
out
clc
inc
xchg
cld
jmp
xchg
dec
in
out
fst
dec
nop
xchg
ins
clc
push
xor
or
inc
xchg
sbb
loope
pop
push
push
int3
fcmovnbe
inc
xchg
dec
mov
or
xchg
ficom
fistp
rcl
fwait
push
lock
jae
in
cmp
adc
ror
xchg
sahf
ja
add
xchg
push
neg
pop
test
mov
fiadd
sbb
inc
xchg
ins
mov
test
in
lods
outs
fwait
neg
push
ins
mov
cmp
rol
adc
outs
jb
inc
iret
sti
xchg
icebp
mov
lods
push
nop
mov
pop
sbb
nop
lea
pusha
mov
sti
mov
or
push
cmp
imul
cmc
rcl
outs
and
and
gs
fwait
xor
push
pop
iret
test
aad
pop
add
fs
sbb
fcom
pop
xchg
shl
fwait
stc
push
or
mov
lods
ins
xchg
retf
(bad)
jmp
pop
ror
popf
pop
pop
mov
aam
xor
fbld
xor
test
fwait
mov
leave
ror
js
xor
hlt
iret
push
stos
adc
mov
stc
xchg
and
lods
lahf
and
mov
mov
rol
xchg
push
cmps
hlt
add
mov
sub
loope
popf
pop
fild
shl
or
xor
test
xchg
std
stc
lahf
jecxz
je
mov
js
push
mov
adc
adc
jbe
jnp
cwde
sub
mov
xchg
xor
cli
add
je
xchg
cdq
and
push
hlt
loop
fwait
(bad)
mov
std
jp
iret
les
sbb
inc
xchg
sbb
sub
idiv
sbb
aad
xor
pop
jo
lods
xchg
out
jecxz
imul
xor
dec
xchg
cmp
xor
mov
sub
aam
xor
xchg
and
xchg
sub
popa
cmps
add
add
adc
ret
mov
hlt
shl
frstor
inc
push
mov
(bad)
mov
mov
xchg
imul
push
push
xchg
js
lods
mov
fwait
inc
fnstsw
movs
push
push
jmp
pusha
dec
aad
mov
xchg
lea
sahf
in
ror
xchg
cmps
shr
mov
inc
cmp
push
mov
mov
cli
xchg
mov
aas
jl
add
xchg
cld
popa
sub
jae
xchg
call
int3
xchg
fbstp
mov
xchg
jmp
xchg
mov
fld
xchg
add
cmp
ret
jns
xchg
mov
pop
jp
xchg
sti
bound
jne
js
xchg
cmp
mov
xchg
add
mov
jp
repz
je
mov
imul
and
cmps
sbb
mov
jns
push
xchg
iret
daa
adc
xchg
fist
pop
addr16
(bad)
xchg
or
test
dec
lea
je
pop
cdq
xchg
fimul
scas
inc
xchg
fyl2xp1
cmps
lock
std
dec
bound
xchg
scas
imul
xchg
dec
pushf
scas
(bad)
shl
push
push
clc
xor
gs
sub
cwde
xchg
cmp
xchg
mov
lahf
shl
test
retf
push
cli
mov
jg
xchg
addr16
inc
les
mov
add
push
sbb
inc
sub
sbb
test
rcl
adc
test
popf
iret
sub
xchg
aaa
sub
mov
xchg
jo
dec
push
xchg
or
jl
mov
aam
outs
pop
xor
jp
xchg
sub
cs
imul
call
test
sahf
jg
xchg
mov
jae
js
aam
xchg
dec
loope
imul
pushf
xchg
xchg
gs
outs
push
mov
or
fmulp
shr
mov
test
test
pop
shl
fs
out
daa
ins
add
mov
mov
xchg
dec
ds
push
test
je
fwait
sti
xchg
(bad)
pop
arpl
mov
xor
sbb
and
jno
xchg
push
pop
jo
aad
mov
sahf
shr
lods
jmp
pop
xchg
or
(bad)
leave
xchg
push
in
out
xchg
outs
out
jle
popf
mov
or
jae
mov
js
inc
pop
sub
mov
mov
out
ss
sbb
ins
ds
cmp
nop
ret
pushf
shr
stos
jp
xchg
adc
sbb
xchg
add
jbe
mov
mov
pminsw
leave
xchg
mov
jp
es
mov
retf
rol
or
enter
inc
xchg
xor
fcom
dec
push
fwait
jno
out
dec
loopne
aas
pop
xor
rol
mov
or
xor
pop
test
sbb
jns
mov
(bad)
xor
leave
inc
pop
pop
movs
inc
stos
xchg
adc
dec
gs
rsm
fdivr
push
dec
ss
les
jl
xchg
xchg
push
inc
pop
mov
adc
(bad)
xchg
push
jo
jnp
loop
xchg
xor
xor
cwde
das
icebp
shl
std
xchg
popa
push
xchg
add
out
xchg
inc
mov
hlt
rcl
dec
adc
iret
sub
jle
xchg
mov
xchg
mov
psraw
xchg
ret
movs
into
sub
xor
sbb
sbb
adc
hlt
(bad)
xchg
mov
fistp
jl
adc
cmps
push
mov
or
mov
jo
into
xchg
(bad)
cdq
mov
inc
pop
push
xchg
daa
imul
jmp
mov
push
loop
xor
pop
xchg
leave
jmp
into
stos
or
xchg
or
sar
pop
(bad)
xchg
cdq
dec
jae
enter
xchg
(bad)
cli
xor
test
mov
xchg
sti
cmc
xchg
and
sbb
xchg
(bad)
push
int
call
je
daa
dec
and
fisub
add
nop
(bad)
ss
mov
mov
popf
mov
sbb
sub
in
int
push
stos
push
je
mov
dec
sub
movs
aas
cli
dec
cmc
mov
adc
jle
adc
sti
scas
sar
(bad)
aas
push
loop
cmps
push
(bad)
xchg
mov
fisttp
adc
lods
nop
xchg
arpl
cmp
fidivr
add
jp
xchg
enter
nop
jp
add
jae
adc
cmp
adc
lods
bound
pop
xchg
push
mov
clc
lea
push
fwait
mov
push
int3
adc
xchg
rol
pop
dec
xchg
cmp
rcl
mov
ins
fiadd
xchg
(bad)
(bad)
xchg
jmp
mov
pop
xchg
push
mov
enter
xchg
sbb
cmp
fsubr
imul
jae
arpl
cmp
dec
mov
xor
push
add
cmc
pop
ficom
mov
sub
mov
add
in
test
push
adc
js
hlt
int3
lock
xchg
mov
dec
push
and
dec
fadd
loope
xchg
adc
cmp
ja
cmp
or
mov
inc
xchg
add
pop
dec
scas
adc
add
outs
aam
mov
loopne
ficom
(bad)
cmp
inc
sbb
xchg
xchg
fs
xchg
xor
wrmsr
push
inc
mov
adc
shl
cmp
outs
popf
test
xchg
inc
jmp
sub
push
inc
mov
enter
lea
push
xor
daa
stos
xchg
dec
xor
aam
mov
sbb
sub
call
ret
and
enter
or
sub
jge
js
xor
pop
ins
push
sti
inc
inc
imul
pushf
mov
xchg
aam
lds
fdiv
add
call
shr
add
sbb
sbb
cld
xchg
ins
stos
mov
bound
mov
push
mov
add
rcr
les
and
mov
cmps
inc
mov
or
jb
(bad)
sti
call
aad
add
dec
sbb
in
sub
adc
xchg
lea
pop
push
xchg
iret
inc
(bad)
mov
dec
mov
push
ror
shr
test
ins
sti
cdq
push
aas
stos
cli
ja
xchg
pop
jo
adc
aam
icebp
adc
(bad)
lea
push
cld
es
(bad)
nop
movs
and
fcomp
xlat
sub
sbb
mov
inc
cmc
mov
jne
cli
mov
push
(bad)
xchg
jae
pop
ins
mov
mov
sbb
mov
lods
mov
sti
cmp
pop
mov
lods
inc
jne
pop
xchg
mov
jmp
xchg
mov
enter
call
jmp
adc
or
sbb
lds
jmp
dec
xchg
popa
lods
or
sbb
retf
xchg
(bad)
retf
and
mov
xchg
mov
(bad)
mov
cmp
xchg
sbb
mov
xchg
adc
push
leave
mov
add
xchg
sbb
mov
stos
iret
es
mov
or
mov
xor
xchg
dec
jg
outs
jbe
sub
mov
call
sbb
loopne
jle
jb
add
push
inc
into
mov
std
das
mov
and
test
sbb
xchg
cmp
xor
jp
pop
int
xchg
cdq
mov
mov
mov
ss
mov
aad
cld
sbb
dec
ficom
cmps
(bad)
jmp
mov
mov
mov
xor
cmps
xchg
push
(bad)
imul
in
gs
sub
xchg
mov
in
test
cmp
icebp
(bad)
imul
in
stc
lahf
xor
aam
mov
mov
lods
mov
sbb
jp
xchg
sahf
sub
repnz
jbe
int3
jg
xor
pop
push
adc
test
jecxz
and
fcmovb
das
nop
retf
mov
or
xchg
clc
xor
ins
rcl
pop
push
xchg
cmp
mov
data16
jg
mov
lds
shl
or
fwait
mov
imul
xchg
adc
imul
sti
xchg
je
xchg
and
outs
pop
mov
(bad)
mov
pop
mov
inc
xchg
aas
xchg
clc
test
xchg
ss
xor
lds
hlt
dec
or
ins
mov
add
xchg
pushf
sahf
test
xchg
test
mov
xchg
out
mov
xor
dec
rcr
xchg
xchg
aam
lds
inc
stc
push
test
int
jb
inc
fnstsw
and
dec
pusha
addr16
pop
in
push
es
clc
(bad)
and
in
jo
pop
push
xlat
mov
pop
push
xchg
jmp
cmp
lea
jecxz
xchg
stos
scas
mov
jnp
shr
add
cld
fs
loopne
push
test
xchg
add
sbb
xchg
lea
dec
cwde
shr
cmp
jmp
xchg
add
in
daa
sar
sub
mov
mov
aaa
rol
sub
mov
adc
dec
(bad)
xchg
(bad)
sub
pushf
jle
repnz
rcl
xchg
jp
loop
push
or
mov
mov
aaa
je
mov
xchg
add
sbb
xchg
push
icebp
ss
loope
popf
lods
mov
cmp
iret
fnstsw
rcr
mov
pop
or
sub
fwait
dec
dec
jmp
pop
lahf
xor
xchg
int3
mov
or
outs
imul
fstp
test
neg
adc
rcr
shr
xchg
fwait
lods
adc
ins
test
xor
sbb
jl
xor
test
sahf
loopne
pop
xchg
(bad)
call
icebp
xchg
int
enter
mov
cwde
pusha
test
pop
movs
xchg
shl
adc
pop
stos
add
(bad)
and
add
pushf
xchg
in
lds
cmc
sbb
dec
mov
scas
stos
div
cdq
xchg
(bad)
fisttp
push
pop
hlt
stos
jp
xchg
(bad)
movs
push
fcmovbe
fwait
mov
push
push
mov
aaa
xchg
lods
not
or
xchg
std
add
loop
popa
sahf
shr
sub
jl
dec
xchg
inc
clc
(bad)
scas
std
xchg
adc
or
mov
in
xchg
jb
jmp
call
jmp
pop
std
rdmsr
inc
call
imul
fistp
jmp
xchg
xchg
jo
and
sti
xchg
push
test
in
out
jo
inc
push
adc
nop
test
xchg
xor
not
movs
sete
cmp
sbb
or
fwait
lods
cld
addr16
test
or
hlt
test
mov
jp
stos
or
jge
xchg
in
(bad)
ins
mov
mov
xchg
or
inc
repnz
aad
cdq
in
mov
jmp
stc
nop
mov
jnp
out
mov
cmp
repz
xchg
xchg
mov
gs
cwde
mov
sub
pop
test
xchg
mul
jl
mov
xchg
mov
jns
hlt
aas
jg
mov
int
mov
jmp
jb
fwait
mov
xchg
out
add
cs
sbb
xchg
out
push
sbb
dec
xchg
mov
ins
xlat
pop
mov
jae
ret
inc
lock
sbb
mov
sub
xchg
out
clc
xchg
cmp
mov
mov
hlt
mov
pop
mov
mov
mov
adc
popa
repz
xchg
mov
push
mov
mov
inc
pop
pusha
movs
add
fild
sub
mov
call
and
dec
xchg
loopne
ins
fistp
test
mov
jne
xor
push
je
push
xchg
jbe
out
xchg
sub
xor
fcom
rcl
das
into
cmp
adc
sahf
sub
xchg
retf
shl
(bad)
push
scas
psllw
lock
adc
fmul
loope
in
rcl
div
lar
xchg
(bad)
fsub
in
mov
(bad)
mov
fdivr
dec
(bad)
ja
adc
sar
aaa
pop
dec
xchg
cmp
fcos
rol
mov
xchg
das
ja
out
dec
and
sub
and
sub
out
int3
out
fs
sbb
aaa
mov
int
pusha
mov
sbb
mov
cmp
repz
jns
inc
xchg
(bad)
sti
mov
mov
mov
and
sbb
pop
stos
xchg
or
imul
fist
inc
cmp
pop
lock
enter
fstp
rol
xor
pop
and
popf
mov
mov
mov
fidivr
or
not
stc
cmp
or
movs
out
clc
fcmovb
xor
xchg
into
fs
mov
pop
aas
jmp
adc
or
sbb
inc
mov
test
cs
shl
(bad)
ror
xchg
cmp
sub
ror
xchg
lock
mov
mov
sbb
or
sbb
(bad)
(bad)
fldlg2
dec
jmp
(bad)
dec
rcl
fld
movs
fsub
xchg
outs
jp
je
add
jge
pop
(bad)
es
xor
xor
test
retf
fld
rcl
daa
retf
mov
adc
xchg
pop
mov
push
xchg
or
test
mov
cmp
jg
jp
xchg
and
or
xchg
inc
mov
push
retf
repz
jp
jl
rol
shl
pop
jmp
pop
dec
mov
dec
xor
mov
or
out
mov
xchg
cmp
dec
mov
mov
loope
mov
jne
jmp
xchg
cmp
xchg
mov
xchg
sahf
mov
xchg
jecxz
inc
hlt
(bad)
mov
mov
cmp
js
jnp
cmp
bound
mov
ins
movs
mov
xchg
pop
iret
(bad)
and
mov
out
in
mov
adc
xchg
fbstp
fst
jb
jmp
ss
dec
inc
jae
cmps
cli
pusha
dec
xchg
(bad)
ret
pop
aam
js
les
jg
ret
scas
rol
imul
int3
aam
push
(bad)
rcr
test
push
in
xchg
arpl
jo
mul
jmp
sub
xchg
jno
pop
scas
cmp
fimul
mov
aam
xchg
mov
aaa
xchg
push
sbb
cmps
ficom
jle
test
push
push
add
lahf
push
out
std
xchg
xchg
int3
fbld
or
jle
je
aam
jmp
test
ins
mov
cmp
imul
xchg
and
cli
xchg
xor
mov
fnstcw
pushf
inc
scas
push
add
xchg
jl
pop
xchg
push
mov
fisub
xchg
mov
imul
xchg
outs
fdiv
push
test
and
ds
ror
mov
xchg
inc
cmp
enter
rcr
dec
add
stos
cmp
sbb
je
sub
lds
inc
mov
adc
jbe
loop
in
lahf
and
xchg
sbb
sahf
addr16
icebp
(bad)
and
mov
jo
push
dec
test
out
fwait
mov
cmps
or
inc
int
aam
mov
dec
(bad)
xchg
xchg
lea
rcl
fwait
ret
dec
or
rcl
jo
je
loopne
adc
pop
mov
xchg
inc
inc
les
icebp
mov
aam
outs
sub
int
push
mov
lds
inc
in
leave
or
inc
out
mov
pusha
ins
sti
movs
mov
mov
mov
data16
jbe
lds
pop
push
xchg
scas
fwait
push
in
loop
and
jns
dec
xchg
jae
jp
mov
mov
cdq
fs
and
push
adc
xchg
pop
push
in
push
mov
mov
mov
xor
enter
fst
(bad)
js
xchg
aas
bound
fisub
jg
sub
adc
sahf
cmp
cmps
pop
icebp
ror
iret
xchg
push
and
out
push
jnp
mov
fucom
mov
cdq
mov
jmp
xchg
mov
sub
xchg
mov
jmp
and
jg
std
mov
push
and
test
jecxz
stc
scas
fwait
daa
test
push
cs
lods
dec
cmps
repnz
in
xchg
jmp
mov
repnz
or
mov
xor
stos
popf
sar
mov
sbb
sub
mov
and
pop
mov
das
(bad)
enter
sbb
cdq
push
test
push
ret
ret
mov
je
(bad)
adc
pop
jmp
lods
(bad)
xchg
cmp
cmp
ret
std
inc
fdivr
xchg
push
mov
jb
mov
rcl
pop
fwait
add
es
in
or
xchg
(bad)
mov
rol
xchg
mov
push
sti
sbb
xchg
xor
xor
mov
push
mov
int
out
jmp
retf
popf
in
popf
and
xchg
mov
cmc
cwde
iret
les
ja
xor
ja
adc
xchg
jp
aas
dec
and
fst
xlat
test
iret
aam
adc
fs
jb
popf
push
xchg
loopne
clc
inc
fnstcw
mov
xchg
cmp
push
xor
shr
mov
sbb
out
adc
es
repz
xchg
ret
cmp
fprem1
jne
adc
push
int3
dec
mov
adc
into
sub
xor
out
rol
dec
sbb
add
mov
xlat
cmp
and
and
loopne
fbld
adc
icebp
xchg
mov
int3
xor
pop
xor
rol
xchg
pop
pop
xchg
arpl
out
jno
fimul
dec
xchg
lock
or
xor
js
fwait
jno
dec
or
inc
dec
fdivr
fwait
mov
mov
mov
xor
(bad)
(bad)
mov
xchg
pop
cmps
mov
sub
xchg
cwde
sti
sbb
fst
inc
clc
scas
mov
sub
xchg
push
jns
inc
mov
fwait
lds
mov
int3
jnp
xchg
xchg
ficom
(bad)
leave
jne
jno
xchg
fdiv
retf
mov
pop
adc
xor
loopne
and
adc
imul
stos
loopne
sbb
(bad)
sub
aas
jne
mov
mov
jnp
sub
xlat
xchg
js
imul
dec
rcr
data16
rcl
jno
mov
xor
loopne
xchg
cmps
pushf
dec
bound
test
dec
mov
(bad)
add
pusha
xchg
ss
xor
jp
sbb
xor
adc
pop
test
mov
push
ins
jle
cdq
push
aam
or
xchg
pop
pop
sar
dec
pop
cmp
xchg
xchg
jg
fstp
enter
xchg
inc
pop
dec
mov
xchg
and
mov
pop
mov
adc
push
pop
(bad)
out
popf
pop
ins
or
adc
cs
popa
fwait
mov
ret
lea
fsubr
rcl
push
add
test
adc
push
fcmovnb
ja
push
xor
add
or
(bad)
xchg
add
xchg
into
pop
cld
(bad)
add
mov
add
mov
ja
sbb
mov
(bad)
outs
pop
xchg
in
mov
dec
push
push
test
xlat
sar
xor
sub
jbe
mov
cmc
ss
jne
and
mov
fs
fist
loope
es
pusha
icebp
cli
dec
xchg
sbb
imul
xchg
pop
xchg
sub
cmp
jecxz
mov
ja
mov
jno
call
(bad)
mov
cs
inc
xchg
xchg
jp
js
cmp
loope
imul
xchg
push
retf
xchg
xor
das
shl
pop
dec
sub
pusha
jg
lahf
popa
sub
xchg
xor
push
adc
lock
dec
or
or
mov
cmp
jle
jno
sbb
aaa
xchg
aas
jae
mov
xchg
je
jmp
outs
xchg
cld
fadd
test
push
mov
or
jnp
pop
xchg
adc
xchg
popa
mov
int
outs
hlt
std
add
in
out
(bad)
jmp
mov
mov
mov
push
push
xor
inc
shr
xchg
and
mov
pop
push
adc
xchg
imul
cdq
pushf
rcl
xchg
cmp
and
cmps
xor
push
xchg
gs
(bad)
cmp
jge
adc
dec
mov
mov
and
push
je
or
xchg
xchg
add
imul
adc
mov
sbb
or
xchg
inc
pop
xlat
push
xchg
test
iret
rcr
sbb
xor
xchg
outs
les
push
repz
mov
xchg
mov
mov
dec
pop
mov
jl
sub
xchg
mov
ret
(bad)
in
add
xor
sub
jns
xchg
stc
jg
push
jecxz
test
outs
xchg
jbe
ret
leave
(bad)
jno
dec
stc
xchg
iret
test
sbb
mov
mov
(bad)
mov
lock
dec
cmp
xchg
pop
arpl
popa
pop
xchg
fsub
data16
iret
lahf
push
test
pop
xchg
jo
int
stos
cmp
push
sub
inc
retf
(bad)
call
dec
lods
push
nop
std
and
ja
or
mov
dec
ins
push
xchg
je
cmc
pop
xor
push
fwait
outs
or
pop
cld
adc
ins
loop
or
mov
int3
int
adc
dec
aas
fnstcw
mov
out
inc
jecxz
mov
inc
outs
nop
or
jge
movs
retf
(bad)
shl
sub
aas
sub
mov
jb
ror
fdivr
mov
adc
add
(bad)
aas
gs
dec
outs
or
addr16
jg
mov
cmp
leave
adc
push
test
push
xchg
sub
push
xlat
adc
adc
test
xchg
inc
xchg
out
jo
mov
sub
cmp
add
xchg
mov
int
xchg
dec
scas
jbe
inc
ins
xlat
aas
out
in
shl
mov
dec
(bad)
icebp
enter
cwde
pop
inc
xchg
rep
psrld
mov
push
add
mov
adc
cld
jecxz
xchg
aad
cmp
push
cmp
xchg
jnp
and
(bad)
fisub
aam
shl
int
push
outs
sbb
push
sbb
push
adc
mov
imul
(bad)
cs
outs
add
fisttp
push
mov
je
fimul
call
mov
add
inc
movs
imul
jb
loopne
and
scas
(bad)
xor
mov
mov
jle
xchg
jne
iret
je
aaa
in
pop
in
or
xchg
sti
pop
fiadd
lahf
les
jg
movs
lods
push
sub
cmp
imul
adc
xchg
cmp
imul
xchg
pop
sub
push
test
mov
dec
xchg
sbb
addr16
into
xor
add
imul
std
adc
icebp
ins
sti
pushf
xor
(bad)
ins
iret
xor
xchg
xlat
add
ds
cmp
sbb
mov
dec
mov
dec
push
test
mov
sbb
xchg
xlat
cwde
enter
adc
dec
pop
sub
lods
sar
or
mov
push
mov
add
cmp
pop
push
cmp
jb
test
xchg
jp
cmc
repnz
imul
arpl
icebp
daa
adc
mov
in
xchg
test
dec
loope
(bad)
(bad)
les
xchg
stos
clc
push
add
add
(bad)
jl
inc
add
push
add
(bad)
int
add
xchg
or
xchg
push
fs
test
xchg
shl
pop
in
mov
xchg
das
shr
cwde
lods
xchg
sbb
mov
xchg
clc
pop
shl
xchg
fisttp
add
clc
mov
jbe
dec
mov
outs
inc
cli
div
pop
xchg
push
repnz
popa
ficomp
in
outs
ja
(bad)
xchg
icebp
and
inc
xor
pusha
xchg
mov
ret
mov
inc
mov
add
xchg
mul
adc
sub
xchg
lahf
addr16
test
pop
pop
out
lods
fst
mov
rol
mov
(bad)
xor
(bad)
movs
adc
mov
or
xchg
hlt
pop
(bad)
add
sti
xchg
test
mov
sub
imul
rcl
stc
cwde
std
adc
pop
inc
add
les
iret
xchg
ret
add
outs
adc
mov
xor
or
test
clc
cmps
rcr
fcmovnbe
ds
xchg
inc
inc
mov
hlt
xchg
add
jmp
ror
ss
xchg
fwait
rcr
pop
mov
retf
xchg
outs
mov
je
xchg
sar
xchg
cwde
or
mov
xchg
(bad)
and
shl
mov
cmp
cmps
ins
jle
dec
ror
cmova
push
push
mov
adc
sub
push
xchg
shl
xor
jmp
push
sub
cmp
lea
xor
or
fistp
cs
aas
sti
hlt
pop
ficom
xchg
lods
xchg
retf
sar
push
adc
pop
icebp
xchg
mov
in
jmp
jo
pop
stos
cmp
sub
cmp
cmp
test
or
xchg
inc
addr16
ret
xchg
or
lods
leave
or
je
fist
mov
enter
ss
jg
xor
icebp
aam
ret
jae
push
and
push
aam
ja
or
jbe
sbb
mov
or
and
add
cld
sbb
fwait
ja
or
daa
je
loopne
dec
pop
popa
adc
xchg
pop
jl
jecxz
cmp
push
dec
stos
enter
xchg
arpl
aad
cmp
jl
cmp
sbb
mov
cmp
jae
mov
pop
std
adc
or
in
test
xor
fwait
aam
pop
xchg
rcl
iret
xchg
push
sub
xchg
mov
jg
or
mov
mov
xchg
and
and
mov
xchg
sbb
and
mov
in
mov
xchg
cld
sbb
mov
xchg
loopne
cmps
sbb
aad
xchg
push
popf
std
mov
xchg
dec
dec
stc
inc
into
bound
add
xchg
test
je
ins
addr16
xchg
ja
enter
xor
mov
cmp
cmp
stc
aas
call
aaa
jecxz
push
add
loopne
pop
in
leave
hlt
(bad)
int3
push
cmp
xchg
enter
ins
jnp
mov
xchg
xchg
mov
addr16
xchg
ins
add
(bad)
imul
mov
xchg
retf
pop
inc
mov
sub
sar
ins
adc
xrelease
fimul
test
scas
loope
jmp
mov
mov
popa
outs
fsubp
jns
pop
add
mov
ds
mov
mov
mov
in
or
jnp
xor
xchg
pop
xchg
loope
xchg
movs
and
inc
or
jnp
push
mov
jo
or
mov
mov
xchg
(bad)
data16
adc
mov
mov
jae
xor
xchg
mov
add
mov
xchg
push
dec
ins
jae
dec
add
icebp
mov
adc
mov
mov
sbb
mov
cmps
and
mov
xchg
std
(bad)
jl
add
ds
ins
pop
and
cmp
stc
mov
(bad)
je
xchg
jg
dec
mov
daa
or
jl
xchg
pop
jne
scas
mov
jge
xor
inc
inc
ss
lods
shl
jp
sbb
imul
retf
test
sub
aad
jl
jbe
inc
push
das
xchg
mov
push
int
fxch
call
cwde
hlt
test
xchg
mov
jmp
pop
sub
mov
and
xchg
movs
jo
push
push
add
inc
leave
xchg
xor
imul
cmp
addr16
and
jp
pop
lods
int
sbb
stc
retf
xchg
push
sbb
xchg
idiv
ins
and
je
xchg
int
adc
mov
adc
dec
arpl
xor
shl
pop
imul
push
jmp
lods
out
lea
outs
sbb
retfw
std
add
pop
in
inc
cmp
mov
adc
lahf
ror
sbb
aad
dec
jbe
xchg
mov
lock
test
adc
hlt
rol
cmp
mov
xchg
cli
je
cwde
jecxz
pop
cld
xchg
std
ret
push
inc
sbb
out
xchg
sti
test
dec
addr16
shl
jno
sahf
adc
inc
xchg
call
push
xchg
mov
add
in
xchg
or
int
test
addr16
out
cmc
push
loop
xor
fsubr
test
loopne
fs
std
jl
fcomp
js
test
push
push
movs
xchg
(bad)
and
push
xchg
std
out
jle
and
xchg
iret
mov
adc
sbb
and
jae
push
scas
fwait
and
loope
add
pop
bound
sub
mov
in
mov
andps
inc
dec
movs
inc
xchg
pusha
add
imul
mov
cmps
xchg
popf
pusha
inc
xchg
cmp
fcmovb
outs
jp
push
popa
fwait
mov
xchg
sub
test
inc
xchg
xchg
push
ss
jae
pop
shl
mov
pop
pop
adc
sbb
xchg
xor
sti
pop
retf
aas
xchg
mov
retf
fmul
xchg
jmp
push
ins
adc
add
(bad)
jmp
ds
fwait
xchg
xchg
fist
sbb
(bad)
pop
add
jnp
pop
test
ja
add
stos
push
icebp
test
adc
mov
ret
push
sbb
ret
mov
repz
mov
mov
xchg
xor
enter
dec
data16
test
movs
mov
mov
adc
shr
sbb
retf
ins
movs
fs
pusha
ret
xchg
mov
and
repz
je
(bad)
mov
sbb
xchg
shr
fs
daa
aad
inc
xchg
sahf
xchg
mov
bound
mov
ret
xchg
js
add
cmp
cmp
cld
mov
inc
into
lock
jae
xchg
(bad)
lods
dec
pop
rcr
leave
adc
mov
xchg
xchg
outs
jo
popf
push
rcl
mov
fsub
mov
xchg
nop
inc
out
sbb
xchg
pop
pop
in
mov
fist
fwait
cld
jae
iret
je
jo
loopne
xor
shl
xchg
pusha
jp
pop
in
aam
inc
push
xchg
pop
xchg
xor
mov
jmp
sub
stos
xchg
(bad)
sbb
sub
int
xchg
retf
pop
aaa
mov
pop
push
xchg
mov
inc
cmps
in
push
push
adc
and
xlat
les
rol
mov
fld
fdivr
pop
aas
push
mov
or
jl
outs
add
ins
add
jle
sub
fs
cdq
jbe
xchg
mov
or
xchg
xor
test
dec
jns
dec
call
lahf
aad
xor
add
sbb
xchg
dec
stos
jp
test
cmp
and
cs
mov
stc
(bad)
(bad)
cmps
xor
pop
sub
not
fisttp
pop
repnz
and
in
fadd
adc
outs
xchg
xchg
mov
adc
dec
mov
out
xchg
in
sti
repnz
arpl
call
mov
lahf
jnp
lahf
mov
movs
in
in
inc
xor
pop
mov
imul
and
ret
xchg
inc
mov
or
xchg
inc
cmp
scas
jl
mov
cmc
hlt
shl
xchg
stc
ins
aad
jo
and
xchg
call
pop
int
dec
xchg
or
pop
int
xchg
and
in
inc
aaa
fbstp
ins
mov
repnz
or
jno
sbb
xchg
push
es
xchg
test
push
and
mov
sub
int3
hlt
mov
xchg
fiadd
mov
xchg
lock
jle
dec
aad
cs
xchg
ret
sbb
repnz
aam
adc
ror
dec
sub
push
inc
hlt
mov
repnz
fwait
lods
pusha
add
push
test
xchg
leave
or
setnp
push
cld
lds
jp
ret
or
pusha
fmul
push
xchg
dec
aaa
push
sbb
sete
add
loop
fbstp
stc
lods
(bad)
pop
push
mov
xchg
mov
mov
jnp
xchg
dec
loope
pop
repnz
adc
dec
push
hlt
dec
int
jmp
loop
cmp
mov
cld
cli
xchg
test
mov
(bad)
xchg
movs
(bad)
not
stc
mov
stos
xchg
push
retf
pop
in
cs
popa
fcom
cmp
mov
xor
push
xchg
adc
ret
xchg
adc
pop
dec
shl
jmp
lahf
xchg
scas
mov
test
xchg
pop
daa
ja
jmp
outs
push
and
fwait
loopne
lods
dec
not
sub
enter
and
dec
pop
or
adc
add
sub
in
mov
push
xchg
push
das
push
cmp
mov
cmp
sahf
sbb
pop
sbb
pop
retf
test
lea
mov
inc
xchg
adc
xchg
das
js
add
test
xchg
jg
enterw
pusha
inc
xchg
xchg
daa
jge
out
cmp
and
retf
and
adc
cmc
jmp
xchg
aas
sbb
fild
push
or
adc
cmp
xchg
(bad)
push
or
push
mov
fwait
retf
cwde
dec
mov
or
mov
xchg
cwde
add
out
jle
pop
bound
inc
arpl
and
les
adc
aas
loope
ins
xor
xchg
iret
cmp
push
fwait
pop
fidiv
adc
cdq
add
(bad)
mov
repz
adc
ficom
xchg
push
mov
mov
mov
jmp
movs
xchg
adc
outs
add
ret
jp
xor
sub
out
xor
call
adc
pop
in
cmc
dec
jp
pop
pop
push
push
(bad)
hlt
jp
fisubr
test
inc
and
cmp
test
retf
add
or
xchg
sti
push
add
clc
fist
mov
pop
fdiv
test
sar
xchg
ins
cmp
mov
jae
cld
xchg
push
lahf
movs
push
je
jle
cmp
(bad)
adc
(bad)
pop
mov
sub
xchg
out
data16
rep
cmp
jns
jle
dec
dec
imul
jmp
in
xchg
imul
add
and
clc
shl
push
je
in
xchg
repnz
sub
popf
pop
and
retf
mov
test
mov
dec
xchg
(bad)
xchg
sbb
repnz
adc
nop
push
fwait
in
mov
pop
retf
aam
mov
cwde
fwait
jnp
mov
adc
adc
test
push
dec
test
mov
inc
sbb
mov
jl
popa
hlt
(bad)
in
jmp
ret
xchg
lea
jp
xchg
test
push
sub
fimul
outs
fwait
adc
les
xchg
loopne
inc
mov
cmp
push
js
xchg
push
mov
mov
popa
clc
push
cmp
cmp
xchg
mov
inc
fbstp
stos
xchg
sahf
das
xchg
ds
aas
cmp
sbb
(bad)
mov
push
xchg
add
outs
outs
xchg
ins
jbe
push
cdq
sbb
jb
mov
cdq
cmp
or
out
stc
xchg
sub
lahf
dec
push
or
mov
adc
jnp
xchg
and
aad
mov
mov
es
xchg
lods
in
xchg
adc
out
hlt
xchg
pop
dec
pusha
xor
fwait
(bad)
ins
adc
je
or
push
xor
mov
stos
add
jmp
dec
cmp
xor
sar
xchg
sbb
mov
aad
push
(bad)
xchg
test
scas
cmp
push
jb
fwait
xchg
je
cmp
mov
imul
and
xchg
es
mov
shr
(bad)
pushw
iret
mov
xchg
mov
retf
rcl
jecxz
fiadd
or
enter
jno
xchg
jnp
pop
mov
out
xor
jle
cmp
and
dec
or
push
xor
jb
adc
jnp
dec
xchg
adc
pop
out
lds
jge
xchg
out
not
push
mov
add
xchg
mov
cli
xchg
dec
pop
mov
cwde
xchg
scas
cmp
mov
mov
mov
mov
js
iret
xchg
and
mov
dec
xchg
adc
sbb
xchg
sub
mov
or
stos
and
cmp
sub
jno
es
push
stos
mov
pusha
or
cmp
popa
gs
pop
data16
ret
cs
xchg
outs
sub
cdq
mov
stos
data16
xlat
sub
xchg
pop
jb
cmp
and
mov
sbb
mov
jnp
mov
in
ret
daa
outs
dec
mov
or
xchg
pop
or
fisttp
ins
xchg
dec
std
into
mov
xchg
aas
jb
and
xchg
dec
jg
jnp
inc
shl
icebp
bound
in
xchg
inc
sub
sbb
xchg
add
pop
mov
out
adc
lock
pop
xchg
imul
leave
xchg
int3
sbb
xchg
mov
leave
mov
cmp
dec
or
mov
sub
movs
xchg
(bad)
mov
stos
sub
repz
xchg
push
ins
add
sub
shl
fdiv
mov
mov
fs
push
ja
xor
pop
repnz
iret
adc
inc
xchg
jmp
sub
xchg
pop
mul
adc
shl
xchg
mov
mov
(bad)
xchg
mov
inc
cmp
xchg
stc
rcr
xchg
pop
jmp
sbb
pop
sbb
idiv
add
xchg
jb
(bad)
out
je
pop
lock
push
jbe
lea
rcpps
jbe
mov
je
test
xor
xchg
call
sbb
ret
mov
daa
int3
retf
push
mov
int
shr
and
push
mov
aam
adc
xchg
int
jns
aas
adc
push
out
int3
jb
pop
pop
mov
lahf
dec
push
mov
fwait
sti
aam
mov
xchg
in
cmp
int
pop
adc
shl
pop
and
or
mov
or
pop
cld
mov
xor
mov
xchg
mov
pop
xor
jle
and
rcr
sbb
call
imul
jl
xlat
(bad)
shr
mov
scas
pop
into
xchg
adc
lods
cli
mov
sbb
leave
call
cwde
dec
mov
adc
mov
jae
xchg
mov
in
addr16
aam
mov
aas
xchg
mov
stc
dec
test
push
dec
fcmovnu
xor
or
fidivr
inc
ret
es
and
sti
(bad)
je
xchg
sbb
movs
xor
dec
inc
(bad)
pop
lods
es
sti
mov
hlt
and
call
jns
dec
fdiv
pop
cmp
xchg
xor
repz
fld
sbb
sub
xor
pusha
pop
test
xchg
into
jl
mov
cmp
dec
jle
xor
cdq
aam
push
arpl
push
xchg
fs
movs
mov
cmps
mov
js
add
xchg
fidivr
and
pop
push
icebp
xchg
xchg
cmp
aam
dec
inc
xchg
mov
pop
cmp
sti
and
loopne
mov
and
fidivr
xor
xchg
ins
pop
push
cli
mov
add
sbb
scas
and
bound
lea
sbb
xchg
lods
push
dec
inc
das
jmp
sub
xchg
int3
inc
mov
aam
scas
ror
jl
xor
adc
loopne
cmp
aad
xchg
jmp
xchg
adc
mov
bound
pop
pop
push
and
mov
xchg
dec
add
dec
cmps
mov
outs
ins
and
xor
mov
repnz
ret
les
fdiv
or
xchg
cdq
jl
mov
call
imul
fdiv
adc
cmps
outs
popa
xchg
arpl
sahf
int
push
sub
mov
xchg
dec
fadd
cwde
icebp
movs
bound
nop
imul
push
sti
fdiv
in
xchg
jbe
shl
dec
and
test
jb
push
cwde
xor
jns
pop
stos
adc
mov
aam
(bad)
js
mov
dec
adc
in
or
retf
mov
movs
xchg
push
(bad)
sbb
push
fs
or
cmp
pusha
mov
popf
mov
add
xchg
xchg
(bad)
fistp
pop
jno
jl
or
cmp
mov
and
arpl
outs
xchg
xchg
xchg
add
dec
loop
int3
fwait
push
xor
mov
ins
pop
xchg
jb
jp
(bad)
rcr
mov
xor
jmp
(bad)
xchg
inc
out
leave
adc
pop
xchg
xor
test
xchg
loop
js
ror
xchg
add
inc
in
sbb
fnsave
push
iret
retf
jnp
lock
mov
mov
hlt
data16
test
call
sub
sub
adc
xor
jmp
enter
iret
jg
push
mov
mov
movs
leave
mov
mov
jle
adc
add
sti
iret
out
adc
pop
fmul
ja
jns
lea
sub
pushf
or
les
in
cmp
aas
jns
push
dec
test
fwait
lods
and
xchg
cmp
pop
bound
(bad)
jno
xchg
int3
mov
cmp
and
xchg
outs
adc
and
cmp
mov
jo
adc
int3
xchg
mov
add
xlat
mov
repnz
xor
out
loop
ins
inc
cmp
dec
inc
shl
xchg
iret
xchg
mov
lds
xor
rol
xchg
in
and
cmps
scas
pop
dec
into
push
mov
push
push
jmp
aad
(bad)
xchg
movs
outs
inc
pop
fs
leave
xchg
xor
jae
pop
pushf
xchg
pop
not
jle
(bad)
ins
inc
push
loopne
jns
adc
or
test
xchg
jne
pop
sar
cmp
stc
adc
xchg
jecxz
mov
xchg
and
aam
jg
inc
jns
test
mov
fwait
pop
and
add
(bad)
jl
xchg
and
mov
dec
sbb
sbb
ret
les
mov
inc
movs
xlat
xor
jno
xor
cs
xchg
popa
and
adc
std
pop
cmp
aaa
test
dec
and
mov
pop
adc
clc
add
push
movs
mov
inc
pusha
dec
adc
jmp
pop
sar
fdivr
add
push
xchg
leave
adc
mov
clc
popf
das
test
ins
xchg
or
stos
push
xchg
xor
pusha
imul
and
and
mov
push
jne
cli
(bad)
or
sub
scas
inc
imul
fcom
(bad)
or
(bad)
mov
mov
push
cs
dec
outs
cld
sub
xchg
dec
inc
mov
test
test
dec
mov
push
popf
push
push
into
mov
test
dec
jno
xchg
gs
icebp
mov
pop
mov
jge
mov
bound
in
and
fs
call
das
je
cdq
mov
sbb
push
mov
pop
fnsave
inc
movs
imul
mov
add
fucom
stc
imul
sub
mov
xor
pop
adc
pop
mov
hlt
xchg
mov
cmps
or
call
inc
adc
lock
mov
int
add
ins
mov
mov
adc
push
xor
mov
jmp
pusha
loop
xchg
cmps
enter
mov
into
mov
and
mov
out
jae
sbb
xchg
imul
dec
xchg
jp
mov
out
xchg
std
dec
xor
gs
mov
and
add
push
sub
data16
hlt
test
mov
xlat
xchg
stos
sbb
sub
or
adc
or
(bad)
movs
std
xchg
lods
imul
or
inc
mov
mov
popf
scas
mov
jmp
pop
mov
push
add
xchg
push
xor
sub
jg
xchg
xchg
mov
sti
(bad)
xchg
call
shl
lahf
xchg
mov
mov
push
fld
xchg
jbe
or
sub
div
xchg
cli
xor
scas
mov
pop
call
xchg
mov
xchg
or
pop
adc
les
xchg
mov
aam
imul
cld
xchg
fst
cmp
xor
add
cmp
inc
pop
mov
xor
stos
xchg
sbb
sbb
gs
sbb
xchg
(bad)
xchg
mov
mov
pop
pop
mov
mov
push
dec
xchg
ins
xor
(bad)
into
mov
rol
push
jle
add
fwait
imul
xchg
fs
mov
xchg
jmp
or
jb
outs
and
xchg
push
lods
xchg
inc
or
(bad)
xchg
test
pop
cmp
sub
aam
test
mov
jbe
lock
xchg
les
sar
adc
pop
pop
ret
xchg
xor
xchg
es
cmps
jl
mov
xchg
inc
shl
idiv
jns
out
cmc
ss
sysexit
jne
inc
cmp
pop
lea
mov
xchg
jecxz
dec
jae
not
push
xchg
sub
cmc
dec
aam
es
pop
fbstp
and
cwde
aam
or
mov
mov
xchg
adc
inc
je
int
mov
inc
inc
sbb
cmp
stos
aaa
je
adc
xchg
mov
fs
rol
mov
ja
and
xchg
pand
mov
(bad)
push
mov
je
(bad)
xor
fwait
mov
es
jg
test
sbb
mov
sbb
add
jnp
push
hlt
or
das
in
mov
xor
(bad)
adc
fwait
inc
xchg
push
std
xchg
outs
adc
inc
xchg
ret
int
scas
int3
lahf
mov
mov
add
fwait
dec
push
xlat
cwde
sbb
repz
push
scas
mov
push
aad
fs
leave
lods
cmp
cmp
gs
mov
xchg
inc
mov
mov
ret
(bad)
call
adc
sbb
scas
fwait
lods
or
movs
or
ss
mov
cdq
popa
aam
lock
inc
cs
pop
das
dec
push
mov
xor
repz
(bad)
xchg
jg
daa
in
ja
fstp
sbb
sub
pop
push
mov
push
das
xor
xchg
test
and
sub
sub
ds
jecxz
xor
fwait
aas
out
add
adc
scas
je
xchg
cmp
pop
stos
xor
or
inc
xchg
push
popf
xor
fstp
icebp
fwait
imul
aas
xchg
mov
movs
popa
mov
dec
rcl
ja
stc
mov
je
push
jnp
xchg
xchg
add
mul
(bad)
fsubr
dec
adc
adc
xchg
sbb
jp
rcl
inc
iret
pop
sahf
or
rcl
pop
lea
sar
xchg
es
mov
test
retf
xchg
inc
movs
sub
test
es
and
adc
shl
and
push
add
iret
xchg
stc
cmp
xchg
mov
lock
or
xor
xchg
sub
dec
call
xchg
mov
hlt
into
pop
mov
add
adc
iret
sbb
xchg
cdq
loop
leave
push
adc
int3
xchg
lock
adc
cld
int
mov
scas
sti
and
pushf
shl
ds
dec
add
jmp
jecxz
in
scas
adc
pop
fsubr
(bad)
ins
jb
mov
xchg
ja
jmp
sub
xchg
push
test
xchg
pusha
fnstcw
ret
xchg
adc
inc
xchg
mov
adc
xchg
stc
mov
push
mov
fwait
pop
push
aam
lds
ins
and
ffreep
ins
xchg
test
scas
(bad)
mov
std
movs
push
jns
pusha
repnz
xchg
outs
ret
arpl
je
xchg
inc
aas
pop
aad
scas
or
mov
add
sbb
aad
addr16
mov
xchg
ds
jg
cmps
sti
mov
fcomp
retf
test
imul
rcl
fcomp
push
hlt
push
push
adc
sub
sub
fsub
adc
adc
adc
jl
sub
sar
push
and
ins
pop
arpl
mov
movs
xchg
cmp
repz
cli
sbb
fiadd
aam
out
mov
xor
mov
fdivr
call
popa
fbld
xor
xor
iret
mov
mov
push
mov
inc
or
xchg
jecxz
or
outs
pop
push
or
in
inc
mov
cmps
sar
cwde
push
movs
loopne
xchg
sbb
pop
out
sub
pop
or
(bad)
fmul
rcl
lock
xchg
cmps
jb
jl
sbb
xchg
add
jae
in
aam
mov
sub
loop
in
pop
xchg
or
pop
popa
lds
dec
xchg
test
out
out
mov
arpl
rcr
(bad)
jle
gs
movs
xor
inc
jg
push
push
iret
pop
(bad)
stc
and
or
not
mov
icebp
adc
mov
rcl
ins
jno
cwde
pusha
arpl
mov
xchg
dec
push
aaa
leave
cmps
mov
ins
add
aam
add
push
mov
jle
cmp
jecxz
adc
aaa
iret
test
xor
and
xchg
cmps
dec
cmps
hlt
fcomp
cmc
cli
xchg
mov
mov
mov
popa
loope
xor
and
mov
xchg
sti
or
retf
cmps
out
hlt
xchg
inc
cmps
inc
mov
xor
mov
outs
adc
adc
push
cmpxchg
scas
jmp
xchg
scas
pop
mov
adc
test
xchg
inc
jbe
in
inc
popf
inc
xchg
jnp
cli
inc
scas
adc
add
mov
push
fwait
out
scas
adc
add
xor
ja
mul
cmp
cmc
call
or
leave
adc
xchg
xlat
and
inc
mov
(bad)
pop
enter
test
and
mov
sub
push
dec
cmp
mov
aad
jb
jp
bound
fwait
adc
es
dec
in
ss
outs
xchg
mov
pop
inc
cwd
cld
jp
(bad)
daa
xchg
imul
xchg
or
fmul
push
stos
cmp
jp
sub
movs
iret
mov
fsubr
push
inc
xchg
aaa
in
das
retf
ret
cmc
push
jns
call
ds
and
fcomp
pop
adc
or
xchg
xchg
fisubr
std
retf
rol
aad
inc
movs
popf
fistp
(bad)
fst
(bad)
xchg
sub
jbe
adc
dec
pop
shl
lahf
dec
and
call
mov
or
xor
mov
je
lods
vmovshdup
pop
icebp
iret
xchg
test
mov
or
dec
pop
xchg
adc
pop
push
js
aas
xchg
sbb
loop
rcl
stc
xchg
jb
out
xor
cmc
add
mov
xor
mov
stc
test
xchg
jae
jns
hlt
dec
push
mov
addr16
inc
fadd
int3
call
shl
mov
xchg
dec
xchg
sahf
pop
ins
(bad)
push
stos
xchg
xchg
clc
mov
(bad)
aas
dec
lods
xchg
xchg
cmp
xor
mov
jne
ret
out
xchg
dec
clc
mov
pop
xchg
and
push
or
cmps
xchg
adc
inc
add
sub
or
push
push
daa
xchg
mov
mov
mov
sar
xchg
push
jbe
mov
je
adc
sar
sbb
ins
xchg
stc
rcr
aas
mov
xchg
in
and
pop
jnp
xchg
jbe
xchg
fdiv
pop
jg
push
bound
ficom
push
pop
or
xchg
imul
pop
push
idiv
xchg
pusha
fisttp
or
outs
rol
xchg
cld
jno
movs
sbb
sub
in
mov
xor
pop
cmp
cmp
mov
push
sbb
inc
or
jo
add
push
out
xchg
pop
call
mov
mov
je
sti
ins
push
xchg
cli
xor
jo
in
stos
(bad)
call
push
mov
or
inc
push
xchg
xor
nop
out
push
jae
pop
adc
std
rcr
inc
dec
jnp
add
or
push
cmp
loop
push
int
xchg
adc
xor
inc
dec
jmp
xchg
adc
push
xor
xchg
xchg
pop
inc
mov
out
(bad)
call
push
test
sti
or
nop
add
xchg
mov
jo
lahf
mov
int3
daa
jle
xlat
push
xchg
xor
sbb
xchg
sub
imul
loopne
jl
cmp
xchg
sub
out
fisubr
push
jmp
shr
mov
mov
sub
cmp
and
imul
and
cmp
or
mov
mov
sbb
push
(bad)
xchg
dec
ins
xchg
push
inc
xchg
(bad)
sbb
stos
cmp
jb
mov
outs
les
jge
repz
xchg
xchg
cdq
inc
out
adc
pmulhuw
xchg
xor
cmp
xor
and
inc
jg
stc
adc
test
mov
popf
xchg
dec
fild
jb
xchg
stos
in
mov
cmp
repnz
fcom
out
push
xchg
aam
adc
ror
retf
mov
stos
leave
or
xchg
push
pop
out
mov
popa
or
test
test
out
sub
jb
xchg
sbb
dec
gs
sub
jb
stos
rcr
cmps
mov
jo
mov
xor
stc
mov
call
jp
push
sbb
es
adc
mov
push
xchg
cmp
xor
push
pop
icebp
push
fwait
ss
cmc
scas
test
xchg
jmp
push
mov
xor
and
call
lahf
mov
adc
fwait
mov
push
mov
xchg
aad
xchg
sbb
test
fwait
retf
outs
addr16
out
aad
(bad)
xchg
aam
loopne
inc
push
pusha
mov
push
hlt
push
mov
shl
test
xchg
ss
inc
stc
mov
sbb
daa
and
loop
xor
xchg
(bad)
dec
aam
or
and
mov
xchg
dec
aas
sbb
push
pop
ins
mov
xchg
cmps
dec
retf
fisub
adc
scas
into
enter
xchg
out
push
jmp
gs
cmc
adc
push
fst
push
xchg
ins
jae
sbb
push
xchg
inc
jg
shl
sar
cmc
js
xchg
icebp
cmp
cmps
scas
or
adc
in
icebp
idiv
jl
mov
movs
pop
popa
xchg
pop
pop
jmp
mov
sbb
xchg
rcr
push
and
inc
jne
mov
xchg
push
je
adc
sub
xchg
sub
jnp
sub
loope
cmp
lods
xchg
add
pop
adc
dec
into
std
push
pop
ins
inc
pop
push
cli
sub
xchg
pop
jne
call
xchg
mov
mov
mov
rcl
clc
and
(bad)
movs
add
mov
adc
ds
add
je
xor
pop
push
in
pushf
in
fwait
call
jmp
pop
retf
jns
stos
dec
ds
mov
add
lods
int
push
xchg
ins
add
dec
adc
pop
lea
rol
es
and
cld
mov
rol
pop
loop
mov
mov
jne
add
bound
adc
sbb
aas
les
bound
shl
fwait
or
int3
mov
pop
scas
xchg
sub
test
push
xchg
ss
cs
out
ret
out
xor
scas
repz
and
xchg
jp
xchg
sbb
imul
add
repz
clc
mov
pop
test
cmp
cmp
mov
and
xchg
jl
inc
ret
xlat
mov
cli
(bad)
xchg
leave
cmp
movs
lods
movs
adc
lea
(bad)
cmp
popa
xchg
xchg
std
dec
sub
(bad)
idiv
jo
hlt
mov
fmul
xchg
xchg
sbb
gs
xchg
xlat
(bad)
out
shl
sub
and
push
xchg
or
jns
scas
call
mov
cmps
lahf
xchg
std
fxch
pop
mov
xchg
mov
xchg
pop
es
xchg
cmp
and
shl
rcl
imul
int3
xchg
mov
mov
cwde
xchg
push
aaa
daa
push
xchg
ss
dec
push
out
ins
in
aad
pop
lock
ins
mov
arpl
add
call
les
xchg
mov
adc
in
das
sbb
out
fmul
adc
pop
mov
xchg
fcomp
mov
sahf
cli
ret
popa
ins
add
div
xchg
fwait
and
inc
add
fcom
lods
aad
xchg
imul
mov
(bad)
xor
mov
popf
or
movs
xchg
push
enter
test
out
sahf
xor
push
pop
fwait
loop
mov
fwait
shl
adc
or
sub
not
lahf
push
inc
retf
iret
imul
jle
jb
pop
call
sub
mov
shl
push
retf
xchg
pushf
loope
cwde
test
into
js
inc
add
daa
sub
mov
sar
xchg
push
cmp
xor
cmps
mov
jb
and
cmp
push
xor
pop
adc
xchg
and
ret
rcl
adc
push
or
(bad)
cli
jns
aam
adc
jg
xchg
outs
hlt
jnp
loope
sbb
xchg
je
cmc
dec
bound
clc
xchg
out
mov
or
adc
into
push
jecxz
js
(bad)
dec
in
cmp
mov
xlat
out
iret
mov
adc
cmps
xchg
(bad)
and
or
mov
adc
cmp
xchg
outs
adc
cli
lock
sub
jo
aam
fadd
test
int
popa
movs
stc
out
xchg
sbb
sub
icebp
outs
xchg
aam
fs
xchg
pop
rcr
call
jge
(bad)
les
mov
xchg
jb
xor
adc
(bad)
es
fwait
in
pop
dec
jb
sbb
push
sub
cld
mov
cmc
jg
mov
xchg
out
mov
xor
jns
imul
dec
mov
aam
mov
pop
sub
jnp
fdiv
jp
xchg
scas
enter
cmp
xchg
cmp
mov
bnd
out
and
mov
stos
ret
or
outs
push
push
mov
jmp
ret
inc
jne
adc
adc
cmp
in
ins
xchg
cs
dec
movs
or
fsqrt
xor
mov
xchg
sti
mul
int
aas
push
stos
adc
retf
mov
mov
adc
jb
jno
mov
jmp
inc
cwde
xchg
fs
(bad)
xchg
in
or
xchg
push
mov
jge
jle
das
xor
jnp
xchg
call
xchg
cmps
(bad)
push
pop
mov
push
stos
idiv
popa
add
mov
mov
std
xchg
loop
loope
dec
in
inc
xchg
push
jle
mov
push
je
retf
enter
loop
mov
adc
dec
xor
rdmsr
imul
mov
mov
xchg
pop
jnp
mul
jmp
ins
push
push
add
xchg
or
dec
aad
jmp
or
fisttp
sbb
xchg
in
rcl
jmp
jecxz
inc
xchg
in
pushf
pop
into
popa
xchg
xchg
movs
mov
xchg
out
mov
test
je
fidiv
mov
jp
rol
xchg
cmp
test
xchg
test
and
pop
pushf
jp
xchg
in
retf
dec
out
faddp
or
sub
mov
fmul
daa
xchg
adc
int3
push
or
jnp
xchg
adc
xor
push
das
add
xchg
sub
rcr
mov
mov
dec
jnp
shl
xchg
(bad)
cmp
(bad)
mov
les
pop
dec
xor
mov
lods
xchg
aad
jecxz
xchg
sti
sbb
adc
fdivr
jbe
xchg
in
outs
dec
pop
and
retf
xor
cmc
xchg
xchg
or
shr
jmp
aad
or
outs
push
xchg
inc
xchg
and
mov
test
push
xor
cmp
in
fisttp
daa
scas
sbb
cmp
xchg
or
shr
xchg
cmp
fiadd
ss
jae
dec
or
lods
mov
mov
imul
leave
in
xchg
ins
mov
(bad)
test
mov
dec
adc
stos
iret
cld
adc
sbb
push
or
jle
xchg
fiadd
xchg
mov
xchg
in
psubb
sbb
bound
mov
mov
and
(bad)
cmp
in
aad
xchg
test
popf
dec
ffree
xchg
jle
add
jno
cli
add
cwde
fidiv
hlt
addr16
popa
add
push
jne
adc
or
shl
mov
in
inc
mov
adc
add
push
pop
addr16
stos
in
ficom
add
push
lea
mov
add
push
xchg
mov
fidivr
js
test
retf
pop
xchg
popf
or
popa
(bad)
pop
adc
(bad)
(bad)
sbb
ins
mov
mov
jb
hlt
int3
or
xchg
jno
call
bound
pop
(bad)
sbb
xchg
push
pop
ds
cmp
and
outs
mov
ins
mov
leave
xchg
fild
jmp
mov
bound
push
mov
arpl
push
sti
xchg
mov
or
ficom
inc
ror
dec
sahf
xchg
pop
in
aad
mov
in
push
push
and
repz
add
stos
or
xchg
in
and
aaa
ret
jmp
ret
stos
inc
jle
xchg
push
xor
cmps
int
popa
adc
push
rcl
jns
xchg
movs
add
jecxz
sub
inc
xchg
add
sub
xchg
mov
pop
pusha
(bad)
xchg
arpl
lds
sbb
stc
xchg
pop
imul
in
cmp
xchg
mov
pushf
dec
or
into
and
test
jge
test
out
ins
fwait
push
dec
or
adc
push
test
fcmovnbe
dec
and
xchg
into
loope
add
jo
xchg
das
xor
test
push
out
retf
(bad)
cmp
xchg
jno
xchg
add
sahf
xor
call
and
cmps
lea
repz
inc
xchg
cdq
pop
sub
dec
gs
push
jle
cs
cmp
pop
enter
xchg
add
fs
sbb
add
leave
xchg
ror
sar
or
xchg
cmps
test
jmp
mov
fsub
xchg
xchg
(bad)
sub
call
dec
xchg
add
xchg
mov
pusha
popa
shl
xchg
push
push
clc
inc
mov
add
adc
repz
mov
inc
mov
add
dec
jae
xor
push
pop
xchg
jle
out
jmp
pusha
ret
(bad)
xchg
mov
dec
adc
and
jb
push
cld
pop
xchg
iret
std
sub
mov
pusha
cmp
add
ja
inc
dec
je
mov
daa
aam
test
xor
ins
pop
xchg
sbb
cmp
sbb
cdq
dec
jne
adc
clc
add
xchg
repz
mov
ds
loopne
pop
fist
les
xchg
je
sub
jae
mov
or
ins
jg
je
pop
mov
das
xchg
aam
cwde
shl
add
and
xchg
sub
(bad)
pushf
or
jl
cmp
pop
xchg
mov
sub
mov
sbb
adc
dec
xchg
lds
fst
jne
sub
rcl
xchg
push
jmp
es
(bad)
ret
xchg
mov
test
sub
dec
mov
jl
xchg
xchg
pop
xchg
adc
test
test
mov
call
xchg
enterw
add
scas
loopne
outs
mov
push
push
mov
ja
jb
dec
cmps
xchg
arpl
adc
jnp
xchg
cdq
cmp
inc
popf
mov
jo
mov
(bad)
fisub
xchg
mov
pop
call
adc
jmp
jns
pop
lahf
int
dec
xchg
push
mov
inc
pop
xchg
dec
push
adc
push
(bad)
out
cs
pop
jg
sub
xchg
inc
adc
retf
adc
and
sub
xchg
pop
imul
xchg
stc
xor
loopne
pop
lods
cdq
xchg
into
ds
test
xchg
fcomp
lahf
mov
std
xchg
adc
cmp
xchg
jle
sub
addr16
xchg
xor
sbb
fwait
cmp
(bad)
stos
mov
xchg
dec
clc
jle
fist
pop
xchg
push
retf
mov
shl
stos
add
xchg
push
(bad)
xor
fwait
neg
ins
pop
jecxz
xchg
lods
push
add
pusha
pop
add
aaa
rcl
cdq
cld
and
adc
cmps
cmp
push
sbb
std
rcl
lock
mov
dec
data16
xchg
shr
pop
push
add
and
movs
mov
mov
pop
call
sbb
in
mov
jmp
dec
add
rcl
aas
jo
adc
xor
mov
dec
fwait
xor
push
sub
test
adc
loope
aaa
(bad)
mov
test
mov
push
or
fwait
loop
and
loopne
add
or
mov
push
mov
mov
adc
stos
dec
push
popf
movs
jmp
adc
xor
xchg
test
adc
xor
mov
adc
fs
mov
xchg
imul
push
xchg
jle
mov
push
xchg
sbb
xchg
or
xchg
int3
out
call
repnz
shl
xchg
xchg
iret
cmps
stc
mov
movs
popa
xor
add
add
lods
xchg
ret
mov
mov
cmc
(bad)
mov
leave
adc
in
nop
sar
xor
xchg
fadd
pusha
xor
xchg
pop
push
pop
iret
mov
or
into
xor
outs
loopne
out
loopne
xchg
cmp
retf
(bad)
in
xlat
ja
cld
mov
fwait
bound
xchg
dec
push
sbb
mov
and
sbb
xchg
(bad)
inc
pop
xchg
pop
mov
dec
mov
movs
int3
fstp
jns
rcl
out
mov
inc
popf
xchg
jo
pop
mov
mov
and
mov
dec
mov
popa
cld
int3
jp
xchg
push
sbb
fisub
push
inc
aam
stos
jo
movs
mov
sar
je
xchg
pop
fs
shl
fwait
xchg
pop
pop
bound
inc
das
adc
xchg
dec
aaa
lods
sub
in
xor
sbb
push
fdivr
jne
xchg
sti
icebp
add
xchg
loopne
add
xchg
popa
jle
dec
lods
xchg
xor
mov
mov
push
jecxz
xchg
sbb
pop
movs
fmul
pusha
add
pop
xchg
jp
or
xchg
scas
ret
loop
sahf
shr
mov
pop
cmps
adc
sub
out
xchg
dec
inc
fisttp
fwait
dec
lds
cwde
pusha
xchg
aas
add
push
pop
mov
popf
out
aam
nop
inc
ror
jg
call
stos
adc
ja
sbb
adc
ja
mov
dec
xchg
push
rcl
aad
loope
mov
test
std
test
xchg
es
add
or
xor
and
jne
jp
sahf
sub
push
adc
sub
frstor
mov
ja
adc
(bad)
jg
data16
add
jle
pop
loopne
xchg
add
frstor
outs
cld
dec
icebp
xchg
inc
sbb
lods
mov
scas
call
or
xchg
xor
test
push
xchg
mov
ret
cmp
je
sbb
test
cs
repz
jge
xchg
out
mov
ss
rcl
leave
cdq
xor
dec
in
push
int3
addr16
jle
xchg
or
mov
xchg
mov
js
jns
sub
clc
sbb
not
push
mov
push
sbb
jne
lods
mov
mov
xchg
push
dec
cmp
mov
xor
clc
popf
xor
xor
mov
xchg
mov
cwde
sub
(bad)
xchg
call
jne
fisttp
mov
fist
pop
test
pop
xor
shl
mov
dec
xor
push
das
ret
cmps
xchg
test
pop
inc
jb
xchg
and
push
push
dec
pop
popf
xchg
mov
jp
sub
scas
mov
mov
cmp
aam
cmp
imul
in
es
xchg
fwait
dec
ins
(bad)
jmp
sbb
adc
ja
dec
dec
mov
fisub
cmp
jg
push
xor
xchg
nop
xchg
jle
das
add
cmps
lahf
hlt
cmp
inc
mov
aam
add
stos
aad
cmp
push
adc
xchg
lds
xor
adc
and
xchg
jmp
push
test
daa
pop
jge
das
jb
push
lds
pop
adc
jne
xchg
(bad)
fs
xor
shl
cmp
fwait
mov
add
mov
rcr
xor
adc
jno
pop
sar
or
in
xchg
pushf
add
mov
push
pop
inc
inc
push
and
add
lods
jns
adc
call
push
mov
jmp
enter
add
jae
rcl
outs
(bad)
mov
sub
mov
mov
xchg
loopne
and
or
push
iret
call
or
jp
xchg
ss
xchg
pop
and
adc
icebp
fucomp
pushf
jp
(bad)
jg
sbb
imul
mov
dec
dec
xchg
jnp
push
ins
retf
jmp
bound
ja
fiadd
out
inc
mov
and
sbb
cmps
repz
aam
xlat
shr
sub
push
mov
out
push
xchg
cmp
out
sbb
xchg
add
imul
mov
jns
add
fst
jae
cmp
(bad)
stos
xchg
and
fnsave
sub
xor
sbb
add
cmc
and
and
push
pop
scas
(bad)
mov
cld
pop
inc
arpl
xchg
add
es
push
lods
pop
xchg
dec
jns
popf
gs
mov
movs
leave
imul
ficomp
mov
aad
fs
xchg
fisub
popa
jns
xchg
inc
fwait
push
pop
nop
push
sti
mov
sub
aad
xchg
dec
add
mov
push
fidiv
paddq
test
xchg
int
dec
pop
movs
sub
arpl
adc
cmps
test
xor
adc
dec
(bad)
icebp
jns
test
pop
test
es
mov
pop
mov
jbe
and
adc
aad
xchg
or
push
loopne
pop
adc
cmp
xchg
repz
dec
loopne
xchg
xor
xor
repz
sbb
scas
xchg
ficomp
xor
into
(bad)
xchg
dec
loope
pop
std
xchg
fcmovbe
or
xchg
mov
jns
xchg
xchg
es
dec
movs
call
jl
call
or
cwde
xchg
retf
pop
imul
das
xchg
pop
mov
xor
xchg
push
dec
clc
jno
fwait
sub
adc
sub
add
add
dec
test
in
cld
movs
rcr
cmp
test
sub
sbb
icebp
mov
shl
inc
fwait
out
cmps
or
xor
(bad)
pushf
and
inc
cwde
lds
loop
push
push
sub
and
stos
int
xor
sbb
jno
addr16
dec
std
test
xchg
popa
mov
retf
cmp
add
push
push
fcomp
scas
fsubr
and
inc
mov
aam
push
and
xchg
cmp
sub
fucompp
aaa
xchg
fwait
pusha
xchg
push
xchg
jl
mov
push
fwait
push
cmps
xchg
cmp
mov
push
repnz
push
sub
xor
jne
fldenv
jmp
and
fs
or
dec
mov
inc
lock
sub
cvtdq2ps
dec
(bad)
adc
out
sbb
dec
cmp
movs
mov
xchg
adc
mov
sti
inc
mov
jo
cmp
loop
enter
cli
add
pop
arpl
and
rol
xchg
cmp
pop
(bad)
pop
test
xchg
adc
movs
test
sub
(bad)
and
int
jmp
jmp
xchg
test
jg
mov
mov
mov
into
in
cmp
shl
pushf
adc
push
mov
sub
div
inc
adc
hlt
dec
in
inc
dec
popa
xchg
and
fnstsw
and
xchg
pop
mov
retf
ret
jle
jne
push
dec
adc
inc
xchg
js
and
or
dec
adc
and
xchg
xor
dec
ficomp
jbe
xchg
(bad)
cld
ret
push
jb
cdq
cdq
cmp
test
into
cmp
cmp
fld
adc
jmp
mov
mov
jne
mov
xor
cdq
add
xchg
leave
mov
gs
outs
xchg
and
inc
out
jne
mov
mov
push
push
pushf
jecxz
and
ficom
or
clc
stos
jo
sahf
xchg
pop
and
mov
xchg
mov
fwait
sub
jecxz
(bad)
jns
mov
xchg
add
out
inc
hlt
pop
jecxz
xchg
pop
rcr
mov
int
rcr
call
push
mov
xchg
call
xchg
movs
xchg
push
xchg
ret
pop
xchg
dec
mov
jecxz
mov
mov
add
and
icebp
mov
xor
imul
xor
push
in
test
sbb
icebp
adc
bound
cli
dec
adc
xchg
sub
jecxz
mov
test
out
cdq
dec
or
lock
inc
xchg
xchg
loope
cmps
sbb
xchg
shr
fwait
inc
adc
mov
push
jne
out
xchg
inc
loope
retf
(bad)
mov
xchg
in
xor
int3
je
xchg
loope
(bad)
iret
scas
xor
adc
xor
add
mov
addr16
aam
adc
inc
ret
dec
(bad)
movs
mov
xchg
xor
push
daa
push
and
aam
in
or
sub
push
inc
push
add
mov
dec
xchg
xor
frstpm(287
pusha
xchg
add
movs
or
fnstsw
out
xor
xchg
cmp
loopne
daa
dec
and
loop
jmp
cmps
mov
pop
stc
(bad)
xor
xchg
std
sub
das
arpl
sub
push
xchg
mov
movs
(bad)
repz
and
call
and
xchg
mov
in
fisttp
jecxz
stos
or
lods
xchg
jae
ret
cmps
push
or
xchg
cmp
imul
xchg
dec
mov
jo
inc
mov
mov
mov
int
xchg
es
mov
cmp
pop
movs
out
xchg
gs
int
jge
and
in
sbb
test
xchg
mov
mov
aaa
mov
out
rcr
sbb
xchg
push
xchg
aaa
inc
scas
(bad)
push
ffree
xor
push
pop
mov
pop
jo
stos
adc
mov
mov
cmp
aad
stc
mov
xchg
fs
dec
adc
in
mov
je
stos
xchg
into
sub
and
mov
int3
inc
add
es
sahf
xchg
add
inc
mov
dec
fcomp
adc
in
jae
xchg
xchg
pusha
scas
and
pop
popa
mov
shr
fld
mov
push
enter
scas
jns
xchg
xchg
addr16
xchg
fidiv
pushf
sbb
and
mov
pop
pop
dec
fwait
sti
mov
xchg
inc
repnz
loop
adc
jp
mov
movs
inc
xchg
inc
mov
aaa
xchg
push
sbb
xchg
add
or
(bad)
hlt
adc
std
bound
rcr
mov
int
scas
ins
mov
pop
jp
push
inc
xchg
and
xlat
push
xchg
inc
rcl
bound
xchg
ror
fiadd
cwde
push
sbb
add
sbb
cmps
inc
mov
ret
mov
not
fld
xor
icebp
popf
movs
loopne
jne
sbb
mov
jne
sub
add
or
adc
stos
popa
xlat
fnstenv
fwait
mov
mov
inc
fs
sbb
xchg
pop
xchg
fucomip
mov
jl
xchg
cmps
adc
adc
push
(bad)
enter
xor
rcl
xchg
(bad)
sbb
popa
cs
aaa
je
push
ja
lods
adc
es
xchg
inc
lea
jno
cdq
xchg
sub
in
les
pop
cli
xlat
data16
xchg
js
sbb
rcr
push
or
cmps
inc
scas
loopne
push
clc
push
mov
xchg
xchg
xchg
cmp
cmp
ret
mov
jecxz
je
pop
push
pop
xchg
mov
cmp
sbb
stos
daa
mov
sub
ins
xchg
je
cmp
push
xchg
pop
jle
pop
arpl
xor
xchg
icebp
out
cmps
push
sbb
sub
ret
pop
xchg
xor
retf
movs
movs
es
xchg
imul
dec
inc
push
or
jle
or
div
pop
scas
mov
fisubr
ret
sub
rcl
pop
adc
mov
jle
or
fst
push
xchg
out
jmp
mov
adc
(bad)
jl
popf
mov
and
nop
add
mov
shl
call
pop
mov
adc
inc
sbb
push
cdq
fwait
mov
add
mov
ret
xchg
sbb
arpl
(bad)
int3
mul
xchg
stos
mov
sete
pop
out
icebp
rcr
xor
mov
cld
ss
or
cmp
sbb
ret
outs
mov
xchg
dec
pop
aam
push
out
xlat
les
call
rcl
stos
mov
es
inc
push
and
or
push
fisttp
fbstp
aam
fcom
xchg
into
das
outs
xlat
mov
xchg
adc
xchg
aam
inc
(bad)
sti
arpl
xchg
cmp
sub
fstp
xchg
mov
xchg
and
xchg
mov
inc
push
cmp
xchg
cmp
mov
push
mov
sub
popa
repnz
xor
pop
stos
xchg
cli
adc
pop
xchg
out
ret
call
rep
adc
xchg
xchg
sti
mov
jle
xchg
mov
xor
loopne
mov
dec
mov
xchg
pop
call
add
jbe
aam
gs
pop
dec
ret
imul
xor
mov
mov
repz
xchg
les
mov
or
enter
xor
xchg
xchg
call
jmp
or
push
(bad)
mov
push
dec
pusha
or
pop
iret
mov
test
int3
prefetchwt1
cli
or
aad
sti
mov
push
or
rcl
push
pop
ret
xchg
sub
adc
adc
div
xor
enter
dec
dec
xchg
popa
push
loope
call
out
cmp
dec
iret
out
cmp
cmp
sbb
rcl
dec
push
and
enter
retf
call
push
mov
xchg
in
pop
cmp
(bad)
sbb
and
dec
stos
push
rcl
test
int
xchg
xchg
mov
xor
fbstp
inc
int3
push
nop
xchg
retf
shr
loope
les
and
mov
(bad)
cmp
push
in
dec
pop
ins
add
xor
out
imul
inc
xchg
into
sbb
sti
or
loopne
ficomp
imul
fsubrp
cmc
mov
adc
mov
xor
push
sub
fwait
add
(bad)
jmp
int3
clc
jge
xchg
stos
adc
cmc
jecxz
inc
add
or
and
cmp
mov
mov
jmp
xchg
xchg
sub
mov
fild
jne
xor
(bad)
test
sar
scas
popa
dec
out
lods
or
xchg
in
je
sahf
jecxz
(bad)
jl
or
sbb
push
sti
movs
aaa
xchg
sbb
mov
call
daa
xchg
push
icebp
jecxz
cdq
cdq
jbe
loop
adc
fcmovb
clc
mov
addr16
cs
fwait
pop
sub
jb
xchg
inc
popf
push
clc
sub
stc
mov
xor
dec
rcl
retf
adc
shr
pop
ret
dec
and
imul
mov
ss
scas
add
jp
retf
push
xchg
and
xchg
inc
movs
pop
mov
aaa
mov
lods
xchg
cmps
cmp
clc
in
mov
xchg
or
lock
jbe
es
mov
xor
ret
test
out
xor
dec
xchg
jmp
std
stc
je
adc
pop
ja
lods
(bad)
xchg
mov
movs
iret
int
jnp
sbb
leave
cli
xchg
xor
aad
dec
ret
rcl
mov
bswap
sub
cmps
mov
rcl
int3
xchg
imul
imul
lds
xchg
or
hlt
das
out
pop
test
ret
ins
sub
mov
or
mov
mov
adc
cmps
rcl
out
inc
mov
(bad)
scas
not
and
jbe
and
addr16
jno
repz
adc
clc
fmul
fwait
cmps
les
sub
sbb
add
mov
in
xor
sbb
ds
mov
mov
xchg
lods
mov
adc
add
mov
inc
jno
aam
in
mov
jb
stos
push
leave
jp
xchg
fcomp
sub
cli
cld
(bad)
rcl
(bad)
push
push
mov
xchg
test
push
inc
inc
and
mov
int
adc
clc
popf
jmp
xchg
push
add
mov
sub
shl
adc
adc
cwde
jne
mov
inc
and
sbb
out
test
jecxz
inc
aaa
mov
(bad)
imul
mov
rcl
sub
int
xchg
sbb
aaa
loopne
pop
mov
push
daa
aam
mov
fidivr
mov
mov
cld
(bad)
(bad)
imul
scas
sub
xchg
in
jno
mov
sub
mov
sti
inc
xchg
(bad)
mov
je
inc
sete
and
or
and
imul
jae
sbb
pop
jp
adc
cmp
xchg
stos
push
jmp
loopne
rcl
lds
or
scas
jecxz
cmp
mov
xchg
das
leave
or
ret
test
sbb
xchg
hlt
sub
cmp
pop
movs
je
jnp
xchg
fisub
std
mov
pop
pushf
test
xchg
ret
inc
xchg
mov
dec
sahf
cwde
push
mov
push
push
mov
xchg
aaa
mov
sub
xchg
rcr
cmp
xor
movs
jne
adc
or
sbb
outs
cmp
retf
in
mov
xchg
jmp
mov
je
mov
(bad)
stos
pop
jno
xchg
lahf
pop
and
xchg
mov
ret
xchg
push
adc
jb
mov
lods
add
outs
mov
scas
push
and
test
pusha
sub
sbb
jbe
lods
xchg
jge
sar
cli
push
sbb
xchg
js
adc
das
fwait
icebp
push
inc
and
xchg
pop
and
stc
xchg
leave
jmp
xor
xchg
sub
int3
push
(bad)
in
xchg
iret
leave
daa
cmps
jb
cmp
and
mov
xchg
push
sub
rcr
jns
sbb
xchg
xchg
or
and
mov
ds
pop
les
(bad)
outs
push
mov
cli
mov
sub
adc
add
xchg
cld
std
fild
data16
adc
mov
sub
lahf
jb
out
xchg
shl
sahf
pushf
inc
test
jae
add
xor
pop
jg
xor
cmpxchg
cmp
xor
in
call
push
inc
into
jge
jne
jle
ret
sub
(bad)
jmp
or
xchg
test
adc
clc
mov
xor
push
push
sbb
xchg
ret
cwde
gs
cmp
cmp
int3
jno
add
xchg
push
fistp
loopne
inc
dec
sbb
mov
inc
int3
jmp
std
xchg
out
push
inc
or
xor
xchg
or
and
xchg
imul
sub
cmp
out
hlt
popa
call
not
js
xor
or
xchg
or
inc
cld
xor
adc
xchg
movs
into
cmp
mov
call
in
fs
ja
pop
xchg
or
jo
mov
push
mov
add
pop
xchg
cmp
pop
data16
add
dec
leave
mov
push
cwde
jbe
into
jmp
xchg
pop
ss
fwait
bnd
adc
lahf
xor
aas
xor
push
xchg
sbb
or
inc
ret
test
mov
int3
jnp
inc
(bad)
push
ror
rcl
cmp
mov
inc
aam
test
retf
xchg
(bad)
or
movs
and
pop
jbe
and
pop
xchg
inc
mov
ds
xchg
stos
xor
mov
inc
and
cmc
lea
das
xchg
or
arpl
pop
jmp
dec
int3
mov
movs
fwait
dec
in
lea
jo
jnp
clc
daa
mov
jecxz
(bad)
adc
jb
not
or
inc
ror
xor
repz
or
int3
xor
xchg
jg
pop
mov
(bad)
out
mov
aam
adc
cli
movs
jp
cmp
test
mov
aam
cmp
adc
aas
stc
dec
mov
cmps
xchg
lahf
cmp
fist
pop
jne
xchg
addr16
gs
loop
adc
rcl
xchg
cmove
jno
repnz
pop
lahf
aad
cmp
ss
test
scas
bswap
(bad)
xchg
cs
mov
sbb
mov
rcl
xchg
sahf
mov
inc
rol
xchg
cmp
xchg
dec
mov
sub
xchg
mov
arpl
mov
test
imul
sub
rcr
or
inc
lahf
mov
dec
rcl
cwde
and
xchg
ins
adc
ja
mov
xor
dec
xchg
dec
sbb
outs
xchg
xchg
retf
jae
fcomp
or
test
adc
sar
stos
pop
movs
pushf
jge
imul
shr
push
mov
jl
retf
cdq
aam
loope
rcl
outs
nop
or
fild
les
sti
retf
mov
xor
pop
xchg
or
or
popa
dec
inc
in
xchg
pop
jnp
into
mov
mov
out
loopne
jge
not
gs
mov
pop
dec
xchg
sbb
lds
or
test
lea
arpl
mov
sbb
into
xchg
(bad)
ret
jns
outs
das
lock
xchg
pop
sbb
push
scas
(bad)
je
push
mov
cdq
out
out
jle
add
xchg
lods
and
daa
xchg
xor
and
xor
ror
xor
push
adc
adc
xchg
mov
cmp
scas
das
outs
cmp
xchg
xchg
cwde
fist
into
adc
std
lock
fwait
js
add
dec
xor
in
sar
sub
and
inc
mov
loop
pop
fld
push
in
push
add
push
(bad)
jg
inc
mov
jmp
ins
inc
pushf
xchg
les
mov
add
mov
push
add
leave
lea
sub
ins
xchg
push
pop
aas
jnp
mov
(bad)
xchg
push
pushf
push
jb
cli
or
cmps
mov
enter
test
pop
or
sahf
adc
ja
cmp
fucomip
xchg
adc
mov
je
in
stos
mov
adc
xchg
push
into
or
sbb
je
rcr
(bad)
daa
sub
jl
cmp
xchg
sub
adc
aas
out
xor
add
pusha
add
xchg
pop
mov
popa
add
mov
mov
mov
dec
je
xchg
push
cs
xor
sbb
add
pop
mov
add
cmps
dec
jl
xchg
pop
outs
jmp
mov
into
mov
(bad)
imul
mov
add
out
or
leave
mov
ud2
aaa
xchg
xchg
imul
and
stc
(bad)
cmp
adc
fxch
xchg
lock
test
xchg
push
fisttp
cmp
sub
cmp
movs
xchg
sbb
mov
push
call
dec
(bad)
sbb
imul
push
xchg
into
sbb
add
sbb
jmp
sbb
inc
pop
sub
mov
ret
loopne
das
out
xchg
inc
daa
arpl
mov
gs
icebp
add
dec
xchg
dec
push
xchg
sub
sbb
jb
repz
inc
xchg
sar
push
out
mov
mov
fs
add
inc
xchg
popa
jp
test
or
inc
mov
pop
xchg
mov
or
aad
dec
xchg
mov
push
mov
fcmovb
(bad)
adc
pcmpeqw
add
lods
mov
xchg
adc
sar
mov
sub
mov
stos
cmps
(bad)
add
dec
xchg
jne
sub
push
inc
inc
ja
xor
cmp
xchg
mov
jns
call
vpavgw
xlat
into
jne
xchg
xor
mov
pop
int
sbb
mov
addr16
xchg
pushf
outs
jne
push
jge
push
xchg
out
add
nop
inc
xchg
mov
xchg
and
jmp
jns
(bad)
(bad)
or
cmp
sti
cmp
dec
xchg
sub
adc
cmp
faddp
call
xchg
out
cmp
adc
fsub
adc
xchg
jae
jns
ja
aas
cwde
adc
scas
push
xchg
mov
inc
pop
shl
xchg
inc
cdq
pusha
bts
pushf
dec
xchg
cmps
lock
pop
and
fwait
les
clc
mov
in
mov
xchg
cmp
scas
loope
mov
fdiv
inc
call
and
xchg
cli
push
stos
cwde
test
push
dec
fwait
or
rcr
hlt
xor
xchg
arpl
xor
ds
and
inc
cmp
jnp
in
pop
mov
xor
ret
or
xchg
inc
ret
push
aas
adc
pcmpgtw
and
xchg
cmp
jns
xchg
test
clc
jno
mov
xchg
sti
mov
sahf
test
inc
mov
pop
xchg
ja
call
cli
cmp
xchg
lods
fstp
popa
xchg
ds
push
aaa
pop
cmc
data16
jne
mov
adc
mov
pop
xchg
sub
(bad)
xchg
or
stos
les
das
gs
es
xchg
mov
mov
inc
and
inc
fcmovb
fwait
sbb
add
mov
sbb
xchg
add
loope
gs
mov
xchg
scas
xchg
or
les
dec
jle
test
ds
sbb
jl
pop
outs
pop
je
pop
xchg
mov
arpl
or
jecxz
push
fild
test
arpl
inc
inc
dec
jb
xchg
test
sub
call
mov
xchg
jg
movs
dec
pop
inc
inc
sub
adc
xchg
push
iret
mov
loope
loop
xchg
scas
jmp
test
adc
shl
sub
and
xchg
pusha
sbb
and
(bad)
xor
pop
jg
or
xor
adc
out
xchg
jecxz
stos
icebp
sbb
inc
leave
xchg
push
adc
or
ins
outs
sub
adc
ret
adc
shl
ds
and
xchg
mov
lods
jg
xchg
cmps
pop
adc
mov
test
(bad)
fadd
xchg
outs
loope
(bad)
lds
xor
add
cmp
push
xchg
jae
clc
call
int3
mov
ja
jle
in
inc
outs
jp
push
adc
and
cmp
xor
and
jnp
push
out
lds
xchg
xchg
pop
rol
ficom
push
sbb
push
cmps
int
movs
xchg
popf
rol
int
xchg
xor
mov
(bad)
jl
sar
je
mov
mov
xchg
ds
cmp
xor
sub
mov
lahf
stos
aam
mov
inc
pop
xchg
xchg
add
movs
push
clc
sbb
fiadd
sub
aaa
or
push
mov
xlat
xchg
xchg
or
rcr
sbb
test
aas
sub
test
fsubr
dec
mov
aaa
addr16
call
xchg
add
fistp
mov
mov
push
int
(bad)
out
movs
xchg
add
inc
pop
and
std
jmp
js
aam
pop
add
popa
hlt
pop
int3
cmp
xchg
push
sbb
jmp
sub
mov
xor
leave
mov
cmp
fisttp
mov
(bad)
bound
ror
in
mov
mov
rcr
sub
and
dec
test
repnz
cmp
push
cmp
sahf
pop
mov
or
rcr
push
dec
add
xchg
adc
or
sbb
sbb
lods
hlt
xchg
pop
fsubr
(bad)
xchg
ror
ret
clc
xchg
and
pop
jae
mov
push
imul
jb
rcr
xor
(bad)
xor
(bad)
fisttp
mov
mov
sahf
sbb
xchg
sub
mov
ret
out
pop
repz
xchg
out
into
jp
ds
adc
mov
xor
xlat
neg
mov
xchg
xchg
inc
out
sbb
xchg
jecxz
in
add
das
retf
test
inc
shr
test
std
int3
push
and
inc
iret
cmp
out
jp
scas
cwde
mov
retf
daa
jmp
inc
push
popf
mov
dec
mov
ror
mov
inc
mov
and
cdq
dec
sbb
ins
in
xchg
cs
cli
xor
stos
ds
pop
and
rol
xchg
aaa
add
xchg
jle
out
(bad)
aam
add
cwde
out
loop
jmp
les
push
arpl
scas
xchg
cmp
dec
xchg
sub
mov
mov
xchg
add
das
in
xchg
inc
out
sar
rol
xor
sub
or
imul
cwde
ficom
xchg
adc
sub
pop
repnz
push
dec
xchg
xor
popf
mov
in
outs
jmp
add
and
(bad)
sbb
sub
push
scas
dec
cmp
add
shl
mov
int3
xchg
jmp
std
or
rcl
cli
imul
xchg
fsub
stos
push
jge
lahf
cmp
xchg
adc
mov
sbb
mov
mov
sar
in
mov
sub
add
mov
and
sete
or
int
rcr
hlt
lods
and
or
lds
in
mov
sahf
pop
inc
(bad)
lods
sbb
xchg
xchg
mov
jnp
shr
xchg
bound
mov
inc
scas
mov
xor
xchg
and
sbb
mov
xchg
mov
aaa
das
pop
or
cli
leave
stos
or
xchg
or
fisttp
xchg
jnp
shl
xchg
enter
or
es
pop
popf
dec
jne
js
jne
mov
push
xchg
ins
data16
(bad)
dec
int
sti
xchg
mov
and
scas
jl
xchg
outs
stos
ss
push
cmp
test
add
cmps
mov
test
inc
xchg
mov
shl
adc
scas
mov
fwait
and
sub
push
loope
cmp
ins
sub
fwait
jns
mul
mov
dec
test
xchg
mov
sub
cdq
int3
and
cld
sbb
dec
pop
xchg
in
test
jno
and
dec
out
sahf
lea
sbb
test
jo
jns
ja
retf
push
fwait
or
and
push
mov
sub
lods
add
rol
std
mov
cmps
(bad)
ds
loopne
stos
push
xchg
xor
inc
lock
xchg
lahf
and
out
call
fs
mov
add
pop
add
xchg
in
mov
das
xchg
pop
daa
mov
ja
pop
cmps
call
sub
sub
mov
adc
shl
push
jp
int
mov
adc
xchg
hlt
adc
ret
jne
loopne
pusha
lea
adc
hlt
adc
mov
xchg
push
lock
sbb
movs
push
add
ins
mov
mov
xchg
and
pop
xor
retf
fwait
cwde
ror
rep
outs
loope
jae
mov
mov
xor
not
xchg
xchg
nop
fst
cli
xor
outs
loop
xchg
ret
sub
in
and
push
sbb
push
inc
dec
addr16
cmp
cmp
jnp
push
adc
retf
jmp
jg
imul
dec
or
inc
push
xchg
out
or
popa
xor
xchg
xor
ret
mov
loopne
mov
cmc
mov
xchg
nop
push
xchg
cmp
and
test
pop
push
dec
xchg
xchg
jns
pop
ss
jl
pop
xchg
cmp
xchg
mov
cld
xchg
xchg
cdq
rcl
xchg
pop
dec
dec
int
inc
out
xchg
aas
(bad)
and
mov
xchg
call
sar
cmp
nop
adc
add
pusha
xor
jecxz
aad
xchg
test
sbb
adc
sub
xchg
repz
test
or
rcl
xor
mov
xchg
lds
shr
xchg
dec
inc
mov
sub
fbstp
addr16
mov
cwde
mov
pop
sbb
ret
mov
cmp
retf
arpl
push
outs
in
xchg
hlt
xchg
movs
xchg
fsubrp
std
call
sbb
xlat
outs
in
or
add
(bad)
inc
jbe
mov
adc
mov
xchg
add
xor
xchg
or
jge
out
jl
mov
adc
in
gs
pop
arpl
scas
pop
popa
adc
xchg
jecxz
je
ret
push
xchg
sub
pop
dec
daa
test
adc
dec
inc
call
xchg
fucom
pop
loop
mov
cmp
icebp
mov
mov
dec
push
push
jle
mov
daa
xchg
inc
sbb
add
cmc
xchg
push
xchg
movs
fidiv
sub
je
mov
rol
sbb
(bad)
ficomp
cmp
adc
inc
xchg
mov
and
addr16
jo
cdq
mov
call
push
in
test
sbb
dec
ror
jbe
lea
mov
outs
and
xchg
(bad)
aaa
retf
jge
xchg
xchg
fisttp
scas
mov
jno
xchg
loope
xor
jle
or
shl
mov
sti
push
or
jb
push
adc
inc
jmp
lods
stos
xchg
lea
scas
dec
adc
shl
(bad)
adc
out
ja
loope
xchg
jb
ror
arpl
adc
mov
pop
xlat
adc
xchg
sti
jle
icebp
outs
ds
cli
xchg
and
sar
retf
inc
xchg
jae
imul
inc
pushf
ret
in
cs
xchg
sbb
scas
out
cwde
addr16
fwait
push
aas
inc
mov
mov
jbe
lock
xchg
(bad)
pop
lea
push
cmp
sbb
call
inc
mov
xor
cs
cld
push
into
xchg
repnz
pop
bound
lea
popa
movs
push
cld
clc
pop
adc
out
pop
dec
cwde
push
jl
adc
hlt
and
push
(bad)
mov
or
(bad)
xor
iret
xchg
xor
xor
hlt
pop
jl
aam
mov
loopne
mov
xchg
pop
(bad)
adc
ror
ret
cld
xchg
fadd
mov
ficom
mov
sbb
sti
xor
bound
fldcw
inc
ficomp
ss
nop
add
lods
and
mov
mov
cwde
rcr
jno
xchg
inc
jl
je
(bad)
sbb
das
dec
mov
dec
pop
je
push
cli
xchg
test
mov
xor
inc
mov
add
outs
inc
leave
xchg
jae
(bad)
movs
xchg
sbb
sahf
cmp
fdiv
hlt
dec
pop
push
xchg
lds
mov
data16
ror
sbb
xor
sbb
inc
cld
xchg
mov
mov
mov
xchg
test
or
(bad)
call
scas
jge
(bad)
push
rol
fwait
mov
xchg
add
mov
jo
add
add
aam
xor
mov
xchg
shr
pushf
hlt
or
xchg
jp
vpsrad
sub
pop
adc
cmp
ins
pop
mov
enter
nop
in
into
sahf
and
lock
shl
xchg
test
popf
adc
mov
xchg
bound
jl
not
ins
(bad)
cmp
stos
push
scas
rcr
(bad)
jmp
mov
aam
xor
sbb
push
adc
mov
mov
push
xchg
mov
mov
adc
xchg
dec
or
test
rcr
inc
mov
sbb
mov
jg
sbb
ds
arpl
fnstsw
sbb
inc
dec
fcom
fiadd
mov
inc
sub
imul
mov
shl
xchg
xchg
cmp
bound
(bad)
cli
(bad)
and
xchg
sar
sbb
popf
aas
ret
jno
sub
mov
sub
daa
mov
xchg
mov
jns
sub
xchg
ds
repnz
ficom
and
outs
xchg
add
daa
inc
mov
jge
aaa
jmp
xor
push
adc
ins
jns
dec
xchg
add
sub
dec
and
dec
sbb
aad
xor
sub
stos
xor
nop
adc
nop
jb
mov
jbe
pop
mov
xchg
and
xor
jo
bound
out
and
or
mov
jb
iret
icebp
xor
and
push
adc
fxtract
fcomp
repnz
iret
xor
mov
(bad)
scas
mov
xchg
popa
in
sti
(bad)
mov
inc
mov
mov
stos
cmp
xchg
cmps
mov
mov
xchg
jo
dec
imul
xchg
not
loopne
test
or
xchg
xchg
adc
pop
xor
xchg
mov
outs
push
mov
push
inc
(bad)
adc
cmc
test
jl
xchg
fs
in
data16
mov
(bad)
mov
jmp
adc
popf
mov
push
cmps
mov
test
cld
stos
xchg
push
mov
imul
ins
not
sub
mov
je
mov
lods
xor
sbb
ret
lds
fs
cmp
(bad)
in
shr
dec
pop
mov
shl
add
cdq
push
ss
push
mov
push
es
ret
xchg
adc
out
out
sub
in
outs
iret
dec
inc
cwde
(bad)
ret
dec
xchg
jge
pop
dec
fwait
push
mov
in
aam
mov
xchg
inc
and
fs
and
test
push
mov
arpl
aaa
ds
xchg
into
xchg
mov
test
hlt
or
lods
jmp
mov
scas
jp
je
mov
pop
fdivr
cmp
bnd
out
xchg
fwait
ja
xchg
mov
movs
test
repnz
out
xchg
xchg
test
push
cmp
xor
rcr
xchg
fwait
adc
lods
sbb
and
mov
push
or
in
adc
fcmove
push
ins
js
pusha
aas
not
xchg
ret
lods
in
xchg
call
jmp
pop
sbb
aam
xor
daa
fadd
inc
je
stos
(bad)
(bad)
jae
sbb
jns
cwde
pop
lock
sbb
xchg
dec
inc
mov
xor
jmp
add
adc
dec
cdq
mov
push
mov
test
adc
jmp
or
xchg
retf
jecxz
test
add
adc
mov
xchg
call
fnsave
aam
and
in
cmp
jbe
xchg
ss
cmp
push
xlat
cld
cmp
(bad)
xchg
mov
jno
(bad)
ins
shl
es
out
stc
and
ret
jo
jbe
inc
int3
icebp
je
dec
(bad)
js
or
or
mov
cld
xchg
jecxz
loop
mov
ins
jg
neg
addr16
jmp
pop
dec
xchg
inc
xchg
xchg
mov
push
jns
fwait
jl
xchg
jb
push
aam
xchg
popf
xchg
and
push
or
xchg
inc
adc
fistp
scas
mov
stos
mov
in
xor
xchg
adc
movd
pop
(bad)
icebp
push
xchg
jns
mov
ss
mov
loopne
stc
or
aas
adc
fsub
jg
sub
dec
push
xchg
xchg
in
push
xchg
adc
dec
je
into
xchg
das
(bad)
pop
pop
sub
arpl
(bad)
xchg
dec
jbe
sub
(bad)
xor
inc
ins
mov
adc
adc
or
pop
mov
xchg
push
scas
dec
jle
mov
aam
test
adc
lods
fwait
in
lods
inc
or
mov
mov
sahf
adc
and
test
int3
cmp
xchg
xchg
mov
(bad)
mov
cwde
fidiv
test
adc
gs
aas
sbb
mov
cmp
adc
mov
inc
fst
je
nop
or
inc
xchg
sbb
popa
push
mov
arpl
mov
add
iret
jmp
daa
dec
mov
push
xor
dec
sub
dec
dec
xchg
fistp
mov
stos
xchg
addr16
or
xchg
and
data16
xor
gs
jp
or
xchg
push
pop
in
sub
std
add
xchg
neg
sub
loopne
push
xchg
pop
sbb
movs
test
mov
je
fsubr
sbb
loopne
cmps
xchg
jns
test
cmp
daa
or
dec
cmps
aas
xchg
lock
sub
and
dec
jmp
mul
sar
add
cwde
add
xchg
xor
mov
(bad)
or
xchg
cmp
sub
mov
mov
lods
loope
(bad)
mov
mov
xchg
jns
cli
pop
dec
cmps
mov
sub
shl
jns
rcl
imul
xchg
lea
mov
les
cmp
aam
daa
addr16
call
pop
adc
aam
or
xchg
xchg
js
cmp
retf
jp
mov
int
fcom
sbb
retf
test
iret
fisttp
movs
inc
stc
push
mov
lahf
cli
sub
pushf
inc
mov
mov
sbb
out
out
add
mov
xchg
lock
push
adc
fwait
cli
out
pop
shl
xchg
fidivr
les
mov
fisttp
pop
or
(bad)
fsub
jge
repnz
mov
mov
sub
stos
ss
xchg
cmps
je
shl
jp
js
xchg
jle
sub
pop
and
xchg
xchg
mov
mov
mov
pop
or
test
xchg
mov
fstp
dec
jl
adc
pop
xchg
pop
and
je
xchg
sub
sbb
xor
lock
pop
retf
fnstsw
cmp
and
or
xchg
das
pop
cmc
push
gs
icebp
xchg
mov
jne
fist
adc
add
arpl
ja
movs
not
cli
mov
aaa
sbb
dec
xchg
std
sbb
(bad)
cld
xor
js
outs
adc
cmp
fxch
xchg
popf
inc
pop
stos
gs
fcomip
xchg
test
pop
dec
dec
jns
add
and
xchg
xchg
cmps
arpl
ror
xchg
fstp
jne
jo
mov
das
iret
sbb
push
cmp
pop
push
out
or
repz
arpl
xor
dec
cdq
xor
xchg
test
inc
push
and
ins
hlt
dec
and
xchg
xor
xchg
icebp
mov
xchg
mov
xor
shl
fwait
(bad)
fist
sahf
cld
cdq
mov
pop
fucomip
dec
repz
int3
cmp
xchg
mov
mov
xchg
or
push
jno
adc
inc
popa
mov
xchg
sar
jne
mov
mov
out
xchg
loop
xchg
cmp
xchg
push
cmc
or
scas
cwde
mov
loope
loopne
mov
fcmove
xchg
ror
aad
rcr
jle
stc
ficom
xor
outs
xchg
lahf
dec
popf
cmp
js
or
neg
rcl
gs
xchg
mov
and
stos
dec
or
icebp
lahf
push
jbe
xor
call
jno
(bad)
rol
xchg
iret
scas
fdivr
iret
push
cmp
les
int3
bound
xor
push
mov
cmc
test
mov
or
fwait
push
fs
cmc
xor
in
in
xchg
xchg
movs
enter
daa
test
cs
aad
xchg
and
xchg
js
xchg
das
popa
xchg
push
push
loopne
xchg
mov
xchg
stos
arpl
gs
dec
popf
push
jmp
in
mov
ret
dec
xlat
mov
mov
sub
bound
xchg
dec
inc
or
mov
nop
stos
ret
inc
or
rcl
sbb
mov
iret
aas
or
jp
adc
loop
push
movs
mov
xchg
stc
mov
pop
pop
push
loopne
dec
repz
sbb
shl
rcr
adc
pop
xchg
stc
jae
scas
retf
lea
jns
nop
xchg
dec
loopne
outs
cmovbe
les
sbb
mov
aam
sbb
push
jle
mov
push
adc
stc
scas
mov
jge
mov
movs
das
xor
pop
mov
adc
(bad)
dec
push
call
sbb
pop
fimul
(bad)
ds
add
or
xchg
mov
(bad)
loop
xchg
lea
pop
js
ss
xchg
fstp
jmp
add
test
mov
sbb
shr
gs
mov
jmp
inc
sub
cdq
xchg
inc
rcr
mov
xor
xchg
les
cmps
xchg
test
movs
or
jmp
add
sbb
sub
je
jg
pusha
lods
xor
mov
lahf
push
or
mov
sar
scas
aam
cli
sti
adc
arpl
pop
stc
fs
cmp
aad
mov
adc
mov
mov
pushf
jbe
test
neg
mov
push
(bad)
dec
pop
pop
adc
aas
movs
xchg
xchg
mov
or
xchg
jg
jmp
dec
xchg
xchg
xor
push
jo
pop
pop
rcl
xchg
(bad)
(bad)
sub
cmp
rcl
fldcw
xchg
(bad)
sub
or
xlat
xchg
clc
sbb
test
adc
(bad)
jno
pushf
push
mov
inc
xchg
mov
mov
jns
push
cmp
xchg
out
std
cmp
or
jmp
xchg
aam
cli
inc
inc
les
or
sub
and
push
or
add
shl
mov
xor
imul
jnp
mov
hlt
mov
rcl
mov
pop
sbb
outs
(bad)
pop
je
xchg
dec
bound
jg
adc
xchg
retf
movs
outs
test
pop
add
aam
retf
xchg
pop
stos
xlat
mov
cmp
pushf
sbb
adc
adc
movs
xor
stc
(bad)
xchg
icebp
or
push
adc
ss
jp
adc
sbb
mov
rol
lahf
and
adc
and
gs
ret
dec
push
dec
xchg
mov
ss
shl
int
push
mov
test
out
mov
add
xchg
hlt
cmp
mov
push
xchg
std
xchg
mov
push
push
mov
xchg
(bad)
aaa
call
hlt
out
dec
xchg
mov
push
dec
pop
lds
stos
jecxz
xchg
cmc
fdivr
xchg
cwde
outs
and
pop
stos
xchg
add
int3
sbb
cmp
data16
push
clc
cmp
xchg
inc
xchg
cld
(bad)
mov
jp
or
popa
lock
aam
mov
shr
mov
add
adc
pop
xchg
add
ins
retf
aam
push
out
sub
add
lahf
lahf
ret
adc
inc
pop
jmp
ror
inc
mov
inc
aad
xchg
push
sbb
popa
adc
ds
xor
mov
mov
stc
xchg
push
(bad)
push
sahf
test
xchg
cmp
jbe
and
adc
mov
inc
out
lods
call
xchg
cmp
enter
xchg
mov
in
xor
(bad)
popa
je
test
push
dec
pop
fwait
cld
sar
mov
xor
sub
cmp
test
lods
ss
jmp
stc
leave
xchg
fst
std
add
sar
pop
xchg
pop
and
(bad)
movs
inc
(bad)
cld
xchg
jge
fisubr
xchg
push
mov
pop
sub
fisttp
or
test
inc
xchg
lods
xor
cs
add
hlt
jb
xchg
add
dec
mov
popf
jmp
cdq
retf
dec
outs
mov
pop
push
fadd
push
lods
xchg
iret
jecxz
mov
xchg
cmps
jnp
sub
ror
fwait
xchg
lea
stos
mov
sbb
je
fwait
jnp
pop
test
push
cmp
jp
icebp
cmp
arpl
fadd
xchg
jno
and
fwait
push
out
mov
push
out
shr
in
inc
ret
mov
movs
test
xchg
push
in
cli
add
mov
neg
xchg
xchg
pop
cmp
mov
mov
push
scas
cmps
jl
dec
jnp
mov
xchg
xor
lock
out
xor
js
dec
jle
xor
jnp
mov
inc
shl
(bad)
repz
dec
hlt
adc
dec
(bad)
push
mov
xor
cmp
(bad)
rcr
icebp
ret
sub
jo
bound
(bad)
add
push
pop
xchg
fcomip
in
popf
movs
xchg
dec
mov
imul
mov
pop
adc
shl
dec
mov
(bad)
ins
and
xchg
repnz
inc
xchg
daa
sub
push
fcom
movs
mov
icebp
or
push
adc
mov
adc
fimul
dec
xchg
in
call
out
mov
stos
add
xchg
xchg
inc
js
aam
sahf
xchg
stc
div
mov
or
in
pop
in
test
xchg
mov
pop
lods
stos
lods
push
(bad)
pop
loop
xchg
mov
jae
inc
adc
jge
mov
xor
sti
xor
std
dec
or
or
mov
adc
fucompp
or
xchg
mov
mov
pop
sub
xchg
mov
daa
cmc
cmp
inc
xchg
inc
out
(bad)
popf
add
jl
int3
push
sub
dec
loop
mov
addr16
mov
lods
leave
inc
xor
xchg
dec
xchg
inc
iret
sbb
xchg
gs
add
jg
rol
mov
inc
mov
xor
mov
ins
push
mov
xchg
std
jo
adc
fist
mov
loopne
out
mov
rcl
es
xchg
push
test
das
xchg
push
or
mov
mov
dec
dec
(bad)
xchg
int
rcr
test
jnp
in
repnz
jp
jmp
adc
sbb
xchg
adc
dec
mov
retf
mov
repz
jbe
enter
and
daa
int
or
pop
and
or
pushf
or
fidivr
inc
add
pop
mov
(bad)
out
pop
in
cwde
add
xor
rcr
adc
xlat
je
cmp
xchg
gs
jno
push
iret
pushf
pop
js
cmp
xor
cld
xchg
or
hlt
mov
push
xchg
and
inc
lahf
in
pop
into
xchg
jbe
mov
adc
mov
retf
psubw
cmps
lods
sbb
(bad)
xor
add
shl
bound
or
xchg
int3
repnz
scas
xchg
inc
jmp
inc
je
sbb
add
xchg
lods
mov
xor
adc
push
xchg
mov
add
jecxz
adc
xchg
mov
pop
jns
mov
inc
outs
push
call
ds
stos
inc
jecxz
push
arpl
xchg
xlat
pop
into
push
inc
sbb
mov
aam
cmp
mov
sub
shl
cmps
in
mov
pop
xchg
out
cmp
push
aaa
mov
aad
(bad)
or
popa
inc
cmps
stos
xchg
xchg
adc
and
push
lods
cmp
pop
xor
fs
mov
or
cmp
jmp
xchg
push
ja
in
jno
retf
int
aaa
adc
push
push
mov
cmp
xor
test
xor
sub
pop
dec
cld
push
mov
int
adc
and
mov
xchg
mov
rcl
xchg
or
fiadd
jb
mov
and
cmps
pop
outs
nop
pop
push
mov
xchg
pushf
sti
sub
stc
xor
dec
sbb
sbb
pop
inc
outs
pop
(bad)
mov
xchg
xchg
mov
iret
jmp
test
out
adc
aaa
popa
int
(bad)
out
and
xor
mov
cmp
push
pop
add
jae
clc
sahf
xchg
add
lahf
arpl
xor
popf
xchg
jg
(bad)
push
push
aam
xor
add
pop
pop
push
sub
or
xchg
fwait
inc
shl
xchg
jno
(bad)
fnstenv
push
add
push
loopne
cmp
(bad)
and
mov
(bad)
add
jno
lds
xchg
pusha
clc
retf
inc
mov
mov
sbb
inc
xor
mov
jg
popf
xchg
scas
fistp
add
mov
arpl
inc
mov
mov
out
cs
fist
jne
loopne
repz
repnz
push
sub
push
dec
and
xchg
dec
mov
mov
out
push
mov
mov
xchg
ins
xchg
sbb
inc
inc
and
ret
xchg
xchg
out
jbe
in
push
sub
adc
sub
nop
xchg
leave
bound
push
call
sti
data16
jae
je
fcmovnu
push
pusha
xor
ja
push
fmul
(bad)
xchg
repz
and
(bad)
jae
xchg
xchg
jl
sub
sub
pusha
pop
adc
into
retf
shl
sbb
movs
cmp
ss
fwait
test
pop
neg
cmp
out
or
pushf
push
aam
ficom
mov
xchg
mov
lds
push
xchg
cmp
lods
(bad)
ret
pop
sub
mov
mov
rcl
mov
push
repnz
xor
scas
push
pop
test
or
mov
or
adc
push
test
jbe
sbb
cmp
in
cdq
jecxz
mov
add
xchg
loopne
lods
(bad)
loopne
shl
dec
popf
inc
cmps
mov
sub
aam
xor
cmp
push
clc
mov
pop
cs
and
inc
xchg
push
fwait
xor
repz
pop
inc
xchg
mov
sbb
mov
add
sub
xchg
pop
dec
xchg
gs
push
xchg
fs
jbe
cmp
aas
inc
push
mov
push
xchg
mov
js
mov
in
adc
xchg
or
add
daa
outs
dec
and
in
xchg
push
mov
sub
xchg
clc
call
mov
xchg
push
xchg
dec
dec
lock
pop
fwait
adc
(bad)
adc
sbb
push
rcr
or
test
cmps
sahf
pop
xchg
xchg
adc
sub
dec
aas
mov
rcr
stc
sbb
mov
add
fdivr
push
mov
(bad)
mov
xchg
sti
call
mov
(bad)
fistp
add
cmp
mov
out
test
mov
xchg
aam
push
sub
test
sbb
xchg
nop
jmp
(bad)
call
pop
lea
je
adc
sar
cwde
psubb
adc
jno
mov
stos
test
int3
lods
leave
and
test
pushf
call
push
and
in
pop
mov
nop
adc
sti
jnp
cmp
movs
mov
pop
and
out
int
sbb
xor
pusha
and
xor
icebp
xchg
adc
lds
bound
push
push
adc
pop
push
xchg
jg
pop
sbb
jbe
sub
mov
js
fdivp
ds
into
cmp
lds
movs
mov
jl
xchg
pop
mov
int3
jo
adc
sbb
cli
bound
xor
mov
adc
push
push
xchg
pop
and
retf
mov
lock
mov
stos
inc
or
and
jl
mov
mov
inc
adc
orps
pop
lds
ret
sub
mul
push
and
mov
ins
adc
fwait
mov
popa
fst
mov
sub
fwait
cdq
popa
(bad)
cmp
push
xlat
aaa
mov
add
fdiv
push
push
fs
movs
adc
std
out
leave
cmp
pop
xlat
xchg
rcl
dec
xchg
adc
jecxz
add
fstp
jo
xor
dec
sub
data16
pushf
fs
in
inc
cmp
mov
push
mov
outs
lods
imul
inc
rcl
std
ret
pop
sahf
mov
mov
pusha
sbb
in
inc
imul
int3
xchg
mov
repz
push
movs
push
pop
pop
sbb
call
in
popf
repnz
cmp
enter
ss
imul
popf
ret
aam
jno
pop
jbe
dec
cmps
sub
add
jl
xchg
int3
push
cli
inc
fstp
and
cmp
pop
fwait
pop
ja
jno
fs
xchg
xchg
and
add
add
adc
pusha
fwait
out
pop
pop
loope
jle
aaa
cmp
outs
xchg
dec
mov
inc
lds
hlt
pusha
js
out
pop
xchg
cmps
sub
or
adc
sub
and
xchg
pop
pop
cmp
mov
xchg
sub
mov
(bad)
(bad)
gs
push
sahf
adc
xchg
or
mov
xchg
test
dec
cmp
std
inc
xchg
add
push
sti
imul
pop
xchg
and
cmc
pop
sbb
mov
fdivr
test
ins
(bad)
jo
xchg
jg
adc
jb
(bad)
xor
push
or
mov
stc
imul
jbe
stos
xor
bound
jo
(bad)
push
cmp
dec
fcom
repz
aas
push
lods
cdq
sahf
xchg
in
sbb
mov
(bad)
xchg
(bad)
icebp
dec
lods
dec
lds
mov
mov
cmp
mov
data16
push
nop
mov
shl
fwait
xchg
and
dec
dec
mov
adc
fidivr
mov
aam
pop
test
loope
mov
outs
loop
or
mov
mov
(bad)
enter
inc
mov
cmps
lea
mov
cwde
xor
mov
les
xor
test
movs
enter
in
pop
dec
xchg
jp
daa
cmp
cmc
or
ds
arpl
cli
dec
sub
jl
pop
xchg
neg
push
jecxz
aas
adc
jp
daa
in
ret
or
mov
(bad)
jb
xchg
pop
xchg
mov
jns
out
movs
lock
jae
int3
jmp
repnz
xchg
push
repz
adc
mov
jb
pop
jl
xchg
cmp
es
jae
push
(bad)
push
xchg
jns
cmp
imul
xlat
retf
les
xchg
and
push
push
jno
ins
mov
cmp
cmp
ins
xchg
test
rcl
test
add
popa
pop
movs
fcom
out
paddusw
int3
icebp
mov
mov
inc
les
add
mov
xchg
sbb
retf
mov
xchg
dec
test
mov
and
mov
mov
(bad)
fwait
push
icebp
or
stos
cmc
add
fs
push
fwait
stos
call
xor
cmp
pop
shl
adc
xchg
mov
xchg
xor
mov
sbb
sbb
inc
push
lods
aam
cwde
mov
add
push
pop
mov
dec
and
pop
inc
dec
cwde
xlat
push
jne
mov
leave
das
aam
mov
es
mov
aam
xor
push
xchg
hlt
mov
xor
and
test
sub
xchg
call
(bad)
add
fwait
loope
fdivr
push
or
add
sbb
(bad)
fwait
adc
or
xchg
mov
dec
sbb
cmp
push
xchg
int3
sbb
cs
or
xchg
(bad)
jecxz
add
adc
inc
mov
imul
push
push
xchg
xor
daa
push
push
test
add
shl
lahf
aam
adc
jb
jecxz
daa
dec
mov
leave
les
or
fst
enter
push
xor
shl
sbb
xor
xchg
push
icebp
pop
lea
cmp
in
or
int
lods
xor
xchg
sti
push
out
repz
cmc
xchg
retf
cmp
add
mov
adc
movs
jmp
mov
sub
lods
arpl
sahf
sub
aas
cmps
(bad)
push
and
jmp
mov
push
stc
add
sbb
aam
ins
add
jbe
aad
rcl
pop
(bad)
xchg
jns
jae
add
sbb
out
and
fs
jle
cmps
cmp
dec
xchg
pop
push
pushf
lds
fstp
xchg
cmp
add
xchg
dec
and
pusha
and
jns
and
loopne
les
rcl
pop
push
je
or
lea
lock
cmps
fwait
sub
imul
inc
and
cmp
addr16
dec
ret
xchg
and
mov
adc
test
mov
add
leave
pop
mov
loopne
test
adc
aam
add
sbb
popf
dec
cmp
sub
mov
and
fwait
into
pop
push
pop
(bad)
mov
fmul
(bad)
mov
cli
out
outs
jo
pop
xchg
ss
cmp
scas
jg
js
mov
pop
movs
xchg
in
daa
cmps
into
adc
xchg
inc
push
out
sbb
xchg
fxch
and
in
xchg
push
(bad)
je
mov
cdq
hlt
sbb
cmp
mov
pop
ja
add
xchg
xchg
cmp
jae
movs
push
rol
sar
mov
or
xchg
adc
and
xchg
imul
adc
icebp
imul
pop
fisttp
mov
xchg
ss
mov
sbb
(bad)
retf
xor
(bad)
xlat
icebp
fdivr
xchg
push
adc
(bad)
dec
(bad)
cmp
ds
shl
(bad)
xchg
jo
sbb
push
lods
sub
dec
movs
fcom
jp
sub
lods
pop
add
loopne
ret
xchg
xor
shl
or
inc
fwait
xchg
mov
inc
cmp
and
mov
dec
cli
xor
cmps
ja
aaa
int3
rcl
dec
pop
sub
fst
pop
js
scas
lock
lods
iret
mov
xor
inc
or
lea
xor
imul
mov
adc
test
push
ins
xchg
cdq
loop
(bad)
mov
jbe
mov
add
outs
pop
hlt
into
xchg
ja
sbb
pop
mov
loopne
xchg
cdq
cs
std
xchg
lods
xchg
sahf
inc
adc
and
les
jmp
test
dec
push
mov
cli
(bad)
xchg
mov
jbe
aas
pop
adc
xchg
push
inc
inc
clc
adc
retf
mov
(bad)
mov
rcr
xchg
sahf
and
jno
jp
xchg
xor
lea
xchg
outs
sbb
mov
enter
repz
sete
out
in
mov
xchg
or
mov
mov
pop
xchg
loope
push
gs
aad
add
jmp
pop
popa
ror
jmp
mov
pop
xor
xchg
dec
jo
psllq
stc
loop
add
call
outs
mov
cmp
iret
je
or
les
sub
fwait
scas
lahf
jo
test
loope
sub
xchg
rep
and
mov
ret
add
mov
je
shr
cmp
mov
nop
mov
js
lahf
ins
adc
or
sub
add
or
push
fwait
cdq
mov
jmp
(bad)
xchg
sbb
inc
push
retf
push
xchg
je
inc
mov
outs
adc
and
sti
xchg
sub
xchg
shl
jb
sub
test
(bad)
mov
cli
xchg
jle
iret
xlat
pop
xchg
(bad)
hlt
jp
fwait
(bad)
int3
mov
adc
push
push
cmp
adc
test
sar
mov
dec
outs
inc
adc
pop
lahf
mov
pop
aam
xchg
mov
pushf
inc
sub
xchg
mov
icebp
ret
fs
xchg
xor
add
adc
in
mov
adc
rcl
fisubr
int3
xchg
aas
inc
es
ds
call
or
icebp
mov
mov
jno
mov
pop
xchg
lods
mov
loop
cmp
push
xchg
jmp
push
dec
popf
shl
aaa
adc
jmp
inc
punpckhbw
aam
push
test
push
mov
jle
mov
or
jg
lods
adc
std
push
xchg
fst
test
rcr
dec
dec
fwait
sbb
mov
xchg
mov
jns
dec
add
js
outs
inc
mov
mov
mov
ss
sahf
push
xchg
adc
int
xchg
rcl
mov
and
mov
xchg
fimul
in
xor
nop
xchg
inc
xchg
stc
daa
pop
mov
adc
mov
popa
xchg
adc
lahf
imul
mov
mov
mov
adc
les
or
(bad)
int
sbb
sbb
cmp
cld
mul
imul
push
sub
leave
lods
loope
dec
je
arpl
dec
test
jae
mov
push
pop
jns
mov
data16
push
xchg
in
(bad)
(bad)
mov
xchg
gs
xlat
jge
rol
loopne
push
xchg
mov
sub
gs
mov
pop
xor
or
jp
sbb
jge
jg
xchg
ret
(bad)
call
mov
xchg
jo
mov
xchg
dec
or
aam
shr
rcr
xor
retf
(bad)
std
dec
shl
dec
call
loopne
jp
int3
xchg
sbb
adc
sbb
repz
lds
cmp
adc
pop
imul
mov
mov
sbb
mov
ja
mov
iret
adc
xchg
sub
or
xchg
jb
das
mov
xchg
repz
iret
mov
pop
cmp
cmp
push
xor
push
xor
imul
pop
cmp
and
rcl
sbb
(bad)
shl
inc
mov
ja
inc
adc
cwde
xchg
push
pop
sub
es
jge
out
cmps
call
xchg
sbb
sar
mov
add
xchg
gs
add
jecxz
or
inc
xchg
xchg
mov
dec
push
mov
and
pusha
lods
sahf
push
repnz
ror
aam
retf
out
jmp
mov
xchg
bnd
ins
pop
fcom
xchg
jo
loopne
mov
cmp
mov
or
cdq
imul
(bad)
daa
int3
shl
xchg
sub
sub
outs
pop
push
and
push
cs
or
aam
lds
and
fcmovbe
or
sub
mov
popa
ss
loope
shl
cdq
adc
jl
test
retf
fwait
xchg
or
mov
lea
lods
push
inc
xchg
inc
fcompp
lods
stos
leave
into
out
jl
outs
sbb
mov
xchg
inc
xchg
mov
inc
xchg
or
inc
ror
cmp
xchg
sbb
pop
jmp
mov
clc
cmp
xor
mov
and
or
retf
nop
daa
mov
mov
rol
iret
into
in
addr16
or
outs
test
hlt
add
sbb
(bad)
rol
sub
mov
sub
mov
leave
mov
es
inc
pop
call
test
push
jne
cmc
aad
in
xchg
popf
sub
(bad)
xchg
cmp
jo
cmp
out
adc
shl
mov
cwde
popa
push
movs
xchg
pusha
in
ss
arpl
add
mov
ret
in
or
sti
out
xchg
xor
test
push
adc
aas
push
mov
(bad)
je
sbb
fild
sub
fidiv
ds
inc
cmp
adc
jle
and
pop
pop
jmp
outs
xchg
push
xor
and
in
inc
fisub
xchg
push
je
in
jno
test
and
xchg
push
cmp
mov
popf
mov
push
add
cmp
mov
stos
xchg
sbb
out
in
leave
jne
fwait
retf
sbb
fs
mov
inc
cmps
sbb
jecxz
rcl
mov
dec
lock
mov
xchg
nop
push
cmps
jmp
xor
xchg
sub
mul
xchg
push
pop
sub
sbb
mov
and
jecxz
xchg
imul
mov
cwde
ins
inc
das
or
cmp
jno
mov
es
int3
mov
inc
push
adc
fwait
bnd
adc
cmp
es
sub
xor
jbe
sub
aas
mov
add
dec
mov
sar
xor
in
xchg
call
in
sub
aam
clc
push
bound
movups
jp
or
test
cmp
and
dec
cmp
mov
rcl
out
mov
sbb
add
je
xchg
stc
or
out
cdq
jmp
js
inc
movq
test
aaa
jp
les
and
scas
xchg
call
fst
jne
rcl
jb
xchg
xor
pop
mov
sub
pusha
leave
cmc
and
add
xor
out
(bad)
movs
hlt
xchg
enter
ins
idiv
xor
xchg
xchg
and
fwait
mov
push
sub
sub
lea
fmul
leave
call
repz
cdq
arpl
test
xchg
(bad)
mov
adc
and
pop
xor
xchg
cmp
xchg
adc
cli
xchg
jge
or
mov
push
cmp
aaa
pop
cmc
ret
fnstenv
mov
push
cli
or
add
xchg
mov
and
in
arpl
xor
dec
loope
shr
xor
iret
fdivrp
gs
xchg
out
ja
sbb
test
or
js
ins
xchg
fbld
lods
adc
out
mov
mov
mov
xchg
xchg
sbb
fist
jnp
xchg
xchg
push
jbe
sbb
inc
dec
shl
xchg
cmc
inc
inc
cli
pop
repz
in
test
sub
xchg
imul
push
xchg
nop
mov
rcl
push
and
cmp
dec
xlat
bound
in
test
push
gs
xchg
icebp
fcom
mov
movs
xchg
cwde
rcl
test
push
xor
repz
xchg
dec
pop
mov
test
dec
cwde
sti
outs
sbb
sub
mov
lea
mov
icebp
fadd
ins
jae
jnp
inc
shl
sti
loope
dec
adc
call
or
xchg
pop
std
mov
fsubr
push
inc
(bad)
dec
cwde
leave
mov
cld
pop
push
popf
mov
pop
iret
pop
retf
js
lods
xchg
nop
mov
in
rol
jbe
rol
fdiv
ret
xchg
cmps
sub
jbe
cmps
inc
cmp
mov
dec
push
test
xchg
jne
pushf
fadd
stos
adc
xchg
and
jmp
enter
stc
ret
fs
mov
xchg
sub
xor
fidiv
xchg
pop
mov
and
(bad)
xor
mov
jge
push
xor
scas
and
adc
adc
test
es
cmp
inc
scas
(bad)
sti
inc
div
xchg
stc
pushf
(bad)
jne
ins
sub
jae
push
or
out
fs
mov
jl
mov
adc
xchg
jae
mov
arpl
lods
addr16
cmps
and
jecxz
mov
test
inc
lds
add
cli
popa
xchg
repnz
jnp
xchg
xchg
frstor
add
pop
xchg
xchg
add
mov
dec
push
jmp
jo
fcom
js
scas
mov
aas
cld
push
inc
test
mov
shr
retf
add
sub
pop
sub
inc
cwde
jecxz
sub
and
pushf
adc
outs
aas
mov
xchg
ret
xchg
cmp
inc
cmp
gs
aam
xor
and
in
sub
stos
popf
push
jmp
mov
aad
xchg
loope
xchg
pop
ins
fldcw
loopne
xor
aam
jmp
int
sub
pop
push
pop
in
xor
enter
xchg
aas
(bad)
xchg
lods
xchg
cmp
and
outs
in
jl
ins
iret
or
shl
fcomp
xchg
in
lds
mov
(bad)
adc
not
xchg
(bad)
leave
push
arpl
adc
test
cs
adc
push
daa
push
xor
mov
adc
sahf
aam
mov
mov
push
ins
clc
pop
inc
mov
(bad)
sti
push
jle
ret
packuswb
daa
xor
les
arpl
xchg
push
dec
inc
xchg
jp
push
xchg
into
shl
xchg
fs
pop
add
adc
into
jnp
adc
out
dec
cmp
pop
mov
loopne
repnz
push
dec
sbb
std
sbb
adc
ja
nop
pusha
mov
jb
push
fucomip
gs
je
leave
not
jle
je
(bad)
rcl
fisub
cli
push
call
int3
hlt
pushf
xchg
into
jp
out
push
jae
mov
js
pop
fistp
and
xchg
xchg
ja
(bad)
pop
outs
dec
sub
mov
fwait
ror
sbb
aas
xchg
out
les
jmp
ficom
lahf
sbb
and
xchg
jmp
icebp
(bad)
jnp
jo
and
not
dec
retf
push
xchg
ja
xchg
inc
adc
pop
mov
fisttp
push
jmp
lds
add
xchg
retf
add
xor
cmps
mov
lock
mov
lds
fisttp
shl
adc
push
pop
or
mov
in
fst
pop
push
out
mov
xchg
xchg
dec
scas
push
fs
mov
dec
sbb
les
pop
pop
xlat
xchg
push
fimul
or
xchg
movs
cld
gs
pop
(bad)
cmps
hlt
mov
mov
in
mov
add
and
xchg
jmp
mov
xor
gs
inc
adc
ror
pop
sti
data16
jno
stc
loop
mov
addr16
jmp
xor
inc
mov
xchg
xor
xchg
aam
outs
das
test
hlt
xchg
adc
ret
inc
add
xchg
(bad)
inc
mov
fwait
int3
or
loopne
test
test
xchg
push
neg
dec
xchg
aas
inc
xlat
adc
pop
stos
mov
shl
mov
and
mov
scas
les
mov
popf
xchg
popf
repnz
psubsw
xchg
das
ins
test
sub
cmp
jnp
(bad)
(bad)
std
icebp
or
xor
push
pusha
xchg
xchg
(bad)
nop
xchg
add
out
mov
les
test
outs
retf
push
call
mov
mov
ffree
js
test
inc
add
xchg
scas
xor
push
sub
xchg
cmp
push
ret
jns
fwait
jp
sahf
shr
pop
mov
(bad)
pop
add
push
push
out
cmp
shr
aaa
jne
xchg
and
adc
mov
fistp
repnz
push
sbb
loopne
lds
(bad)
and
out
fld
cmp
xchg
push
xchg
cmp
mov
xchg
inc
cmp
xor
iret
pop
xor
jno
pushfw
xchg
mov
loope
in
test
sti
mov
mov
int3
push
mov
or
idiv
xchg
mov
sub
sbb
push
loop
test
push
xchg
retf
mov
adc
inc
pop
fstp
test
leave
pop
test
arpl
(bad)
and
xchg
aam
ror
xchg
xor
mov
mov
std
xchg
pop
pusha
(bad)
pop
js
pop
fcom
jbe
fistp
out
adc
bound
xchg
mov
and
mov
into
dec
xchg
adc
pop
push
sbb
fwait
idiv
repz
cmp
mov
cmp
ja
js
xchg
lea
cmp
mov
sahf
inc
mov
xchg
xchg
xchg
add
pop
int3
movs
jb
dec
bound
retf
xlat
ja
ficom
dec
jmp
xchg
add
push
in
mov
neg
hlt
imul
test
jns
cmp
push
pop
xchg
popa
adc
mov
xchg
and
mov
inc
sub
movs
lea
add
popf
(bad)
in
retf
mov
pop
add
ds
stc
fnstsw
dec
pushf
fxtract
xor
leave
nop
mov
xchg
mov
test
fidiv
pop
sbb
sar
in
(bad)
fisttp
xor
rcl
xor
mov
idiv
popa
xchg
xchg
(bad)
inc
or
mov
push
scas
xchg
cmps
movs
fisttp
xchg
dec
shr
add
fdivp
xchg
rol
scas
in
ins
inc
sub
in
inc
stos
xchg
sbb
sti
xor
pop
mov
xchg
cmp
sub
jo
mov
add
jnp
(bad)
out
enter
jns
mov
jae
in
push
xchg
jmp
push
lock
div
movs
fwait
leave
mov
scas
shl
add
test
mov
push
rol
inc
push
xchg
inc
ds
repnz
sub
mov
out
fst
lock
pusha
and
or
xchg
jae
add
xchg
js
push
add
bound
stc
sbb
jno
inc
int3
xchg
jns
adc
out
push
and
xchg
mov
stos
movs
lock
and
jge
adc
mov
paddw
retf
xchg
and
lds
jno
bswap
fist
aam
mov
or
js
add
rcl
daa
adc
scas
xor
xchg
sbb
pop
dec
or
sub
rcr
dec
xchg
mov
imul
(bad)
(bad)
or
dec
mov
pop
nop
pop
xchg
add
sub
stos
adc
into
add
push
(bad)
loope
pop
js
imul
pop
xchg
in
push
jg
mov
jle
xchg
jmp
rcl
lea
mov
fabs
imul
mov
push
and
xchg
adc
bound
pop
scas
(bad)
mov
inc
dec
mov
mov
or
in
jp
mov
hlt
enter
xchg
test
(bad)
mov
add
mov
fidiv
mov
xlat
int3
pusha
cmp
data16
xchg
sbb
push
xor
add
sub
xchg
cwde
push
jbe
test
add
and
fst
sbb
push
test
mov
jno
mov
shl
jle
mov
fwait
jns
mov
clc
fwait
loopne
jmp
xor
outs
xchg
inc
fs
mov
pop
rol
xchg
inc
or
or
xchg
push
inc
cmovnp
fdivr
loopne
lods
xchg
fwait
pop
xchg
popf
shl
test
pop
jo
xchg
mov
sahf
jl
mov
cmp
xchg
stos
add
jo
fimul
nop
not
xchg
cmp
cmp
xchg
sbb
mov
dec
jmp
(bad)
xchg
pop
test
push
aam
xchg
sbb
jnp
xchg
shl
ins
adc
fdivr
popf
sub
cmp
loopne
sub
in
inc
xchg
cdq
inc
inc
xchg
xor
xor
call
cmp
inc
sbb
xchg
mov
mov
das
xchg
sbb
or
push
inc
xchg
adc
clc
pop
lea
je
push
and
stc
xchg
fwait
mov
pop
mov
repz
or
pop
push
mov
fwait
or
xchg
in
rcl
xchg
cmps
cmp
lods
xchg
push
pop
xchg
mov
mov
pusha
shl
xchg
jb
push
mov
cmp
xchg
int3
shr
or
inc
into
lds
loopne
sub
xchg
push
clc
aad
or
jbe
aam
(bad)
push
xchg
loope
test
aad
scas
fwait
mov
fistp
push
xchg
call
dec
scas
add
call
jge
push
and
dec
mov
aaa
sbb
sbb
inc
xchg
pushf
cmc
xchg
add
(bad)
pop
retf
push
rcr
add
cli
xchg
dec
inc
hlt
cmp
cmp
out
repz
jae
xchg
jp
sub
clc
sbb
xchg
test
stc
push
aad
fnstsw
dec
or
ja
int3
cwde
mov
shr
mov
jbe
and
mov
test
in
mov
xchg
sbb
out
je
imul
push
test
dec
dec
xchg
or
mov
dec
xchg
push
cdq
rol
les
js
ret
or
shl
inc
push
hlt
sbb
cli
shl
xchg
mov
add
add
lock
xchg
fwait
add
and
out
xor
jae
mov
jno
fild
ret
leave
xchg
ret
cwde
jnp
callw
pop
shr
movs
inc
je
mov
or
xchg
(bad)
xchg
clc
inc
mov
test
xor
sar
lods
xchg
or
mov
retf
mov
jnp
fmul
mov
add
js
jae
arpl
pop
mov
sbb
or
xchg
(bad)
mov
cld
dec
adc
xchg
mov
popa
(bad)
push
xchg
pop
pop
mov
out
hlt
ds
mov
test
cdq
adc
sub
div
push
loopne
xchg
xchg
pop
aaa
out
xor
xchg
dec
or
sub
leave
mov
mov
mov
pop
cdq
xchg
dec
test
out
adc
(bad)
shl
dec
repz
add
and
sbb
neg
pusha
ss
sbb
fld
jg
jp
and
ins
movs
push
dec
xchg
inc
xchg
popf
ret
fwait
mov
adc
imul
(bad)
push
mov
sub
popa
push
dec
inc
lahf
xchg
shr
sahf
aaa
js
inc
xchg
mov
jno
xchg
xchg
lods
dec
adc
daa
imul
hlt
fdiv
push
in
ins
xchg
mov
test
xchg
js
xchg
add
cmp
pop
ins
push
mov
xchg
inc
adc
xchg
mov
lea
ss
push
mov
fwait
mov
push
add
inc
jge
clc
fistp
xchg
movs
mov
lock
in
test
call
pushf
stos
int
pop
rcl
int3
loop
adc
pop
dec
cmp
mov
mov
adc
fwait
popa
sub
mov
add
jle
adc
jl
gs
outs
cmp
push
dec
mov
xor
loopne
hlt
nop
mov
mov
mov
jle
or
mov
mov
mov
xor
xchg
mov
loop
ficom
inc
xchg
cmp
stc
push
add
pop
mov
arpl
xchg
ror
out
xchg
shl
mov
test
fbstp
(bad)
mov
sar
sub
aaa
pusha
cmc
imul
xor
cmp
push
in
dec
add
cmp
out
aaa
pop
(bad)
mov
xlat
icebp
and
mov
hlt
push
loope
outs
mov
inc
pop
sbb
add
add
fwait
jno
adc
dec
xor
mov
lods
mov
(bad)
push
bound
xchg
push
sub
test
xor
cmp
lahf
cmc
push
push
syscall
sub
push
mov
xchg
or
and
fwait
aaa
in
cld
add
neg
add
dec
aam
stos
lods
and
cmp
fwait
mov
ins
or
dec
fist
xchg
sti
lock
aad
xchg
dec
pop
dec
fisub
dec
ja
mov
ss
xor
cli
sub
pop
loope
dec
dec
in
cmp
and
jo
xchg
movs
cmp
out
push
jns
sbb
pop
and
fild
xchg
xor
jmp
or
mov
push
or
mov
or
jo
ror
movs
bound
xchg
push
sbb
mov
xchg
outs
jo
push
stos
movs
adc
sbb
add
loop
or
push
sbb
xchg
mov
sbb
pop
popf
nop
mov
fwait
pop
jle
and
mov
pop
stos
sbb
and
cs
mov
mov
enter
ret
xchg
repz
dec
sbb
sar
dec
xchg
sbb
test
ins
test
sub
ffree
xchg
xchg
pop
xor
or
sub
mov
clc
jne
ret
add
or
xor
jbe
(bad)
mov
call
daa
mov
nop
sbb
sbb
stos
hlt
jb
outs
or
js
xchg
or
dec
cs
xchg
adc
repnz
ficom
mov
(bad)
mov
fnstenv
cmps
hlt
popa
add
cli
mov
adc
not
or
xchg
mov
and
and
xor
sbb
loope
imul
ds
icebp
inc
mov
sub
enter
xchg
mov
mov
js
ds
je
(bad)
es
xchg
push
mov
fisttp
add
add
fldcw
repz
mul
cmp
ficomp
jp
inc
sbb
pop
in
aam
fstp
dec
sahf
or
repnz
ffreep
jb
sub
xchg
(bad)
adc
xor
pop
sub
xor
jbe
jno
aas
test
repz
pop
outs
sbb
xchg
mov
aam
cmp
jno
cmps
xchg
adc
dec
push
in
xchg
out
xlat
int3
fistp
fs
xchg
cdq
je
mov
xchg
clc
dec
lds
arpl
xor
xchg
sbb
xor
lods
iret
fst
or
xchg
ds
out
xchg
sahf
loop
push
push
xchg
fistp
mov
test
lahf
dec
jl
xchg
lods
adc
sbb
or
sbb
sub
out
cmps
mov
sar
aad
ss
jnp
mov
inc
pushf
sub
push
cmps
loop
stc
leave
test
int3
shl
sbb
(bad)
fidivr
xchg
in
and
dec
lods
xchg
sbb
sar
push
or
push
sub
cmps
aad
aam
xor
pop
cmp
mov
hlt
and
mov
mov
hlt
sbb
mov
adc
add
pop
xor
push
int
pop
adc
enter
xchg
inc
and
sbb
mov
xchg
pop
out
mov
xchg
pop
mov
lock
jecxz
and
je
inc
xchg
and
xchg
mov
pushf
fmul
xchg
inc
jg
pop
fwait
or
aam
pusha
lds
int
xor
mov
xchg
movs
mov
or
rep
pop
iret
xchg
jle
in
cmp
and
adc
aas
xchg
push
push
cmp
cmp
xchg
cdq
xchg
adc
and
pushf
xchg
mov
xchg
pop
aam
inc
sahf
imul
sbb
cmp
adc
sahf
jbe
sub
xor
or
jmp
push
push
out
or
pop
int3
paddusw
lahf
sub
out
dec
push
cmp
out
(bad)
cli
mov
sub
push
dec
mov
jo
aam
mov
xchg
jmp
fs
adc
outs
jl
minps
adc
jmp
jl
adc
fisubr
hlt
lahf
jmp
or
jo
jb
mov
lods
sub
loopne
out
cmp
or
inc
or
inc
xor
mul
and
adc
xor
xchg
mov
and
cwde
pusha
movs
in
jmp
jmp
xchg
and
repnz
lods
push
and
mov
adc
sub
sbb
xchg
popf
fs
sub
retf
dec
retf
sahf
sti
adc
aam
pop
push
or
lods
stos
xchg
xchg
movs
jnp
cmp
mov
pop
dec
ret
stos
jae
shl
(bad)
clc
or
test
mov
and
in
pop
sub
jo
jl
or
mov
xchg
in
mov
fisubr
mov
das
adc
std
in
setg
les
xor
dec
mov
repnz
(bad)
call
adc
mov
aaa
xlat
push
push
add
push
pop
or
fwait
mov
mov
ret
cmc
je
sbb
lock
xchg
adc
daa
das
mov
or
scas
lds
call
imul
mov
in
adc
out
sbb
mov
jo
sbb
xchg
stos
xchg
retf
pop
mov
xor
shr
arpl
nop
mov
in
add
shl
xchg
xchg
inc
aaa
ret
outs
repz
cmp
ins
cmps
push
dec
into
xchg
add
(bad)
lahf
mov
ja
int
push
scas
xchg
jle
xchg
pusha
mov
loope
xchg
dec
and
mov
xchg
xchg
lock
scas
mov
xchg
inc
rcr
jl
sti
test
in
mov
addr16
xchg
idiv
in
mov
cmp
xchg
cmp
ret
jnp
shl
mov
adc
es
sub
cmp
popf
imul
or
(bad)
mov
xor
jno
xchg
stc
ret
mov
mov
sbb
pushf
adc
push
push
fwait
stos
fdiv
(bad)
fist
fistp
sbb
adc
jbe
inc
push
xchg
dec
mov
xor
bsf
push
lods
add
inc
lods
or
dec
mov
mov
das
xchg
cmp
jecxz
jg
mov
push
imul
adc
xchg
xor
mov
sub
(bad)
js
and
push
cmps
sbb
mov
dec
movs
push
jp
stos
xchg
clc
jne
les
pop
shl
rcl
jbe
cmp
dec
outs
das
(bad)
mov
shr
test
je
fwait
dec
add
adc
jb
xchg
adc
bound
pop
fwait
stc
mov
in
xchg
jae
fld
cmp
jge
jnp
and
xchg
xchg
ret
out
add
jb
cmp
and
add
(bad)
xchg
add
sbb
les
sbb
or
imul
mov
push
sub
and
push
xchg
mov
call
aad
adc
popa
push
ja
sub
xchg
and
shl
int3
mov
sbb
jg
mov
and
xchg
xchg
imul
xchg
push
xchg
div
hlt
lods
inc
mov
in
lock
adc
xchg
push
xchg
aas
sbb
call
xchg
sub
cld
loopne
inc
inc
xchg
in
sbb
test
or
adc
mov
test
xchg
and
cmps
test
and
pop
inc
xchg
idiv
dec
jge
mov
ret
mov
int3
inc
xchg
inc
mov
sub
add
mov
cmp
pushf
shl
adc
test
mov
sub
mov
xchg
and
mov
icebp
adc
cmp
pop
in
mov
xchg
fmul
pop
xor
mov
adc
popf
test
imul
sub
xchg
in
es
sub
push
xchg
int3
ror
sbb
mov
cs
fimul
mov
leave
xchg
add
shl
int3
stos
xor
xor
loope
push
mov
push
or
xor
pop
jnp
sub
scas
xor
shl
lds
loope
enter
(bad)
cmp
(bad)
push
inc
xchg
pop
and
cdq
push
in
adc
dec
imul
cmps
fld
ficom
je
rcl
mov
dec
mov
xchg
sbb
or
push
xor
xchg
popf
pusha
outs
mov
xchg
(bad)
jmp
dec
lods
mov
jae
add
fiadd
mov
stos
test
or
dec
xchg
movs
stos
jl
mov
pop
test
pusha
pop
xchg
aas
lahf
dec
stos
rcl
push
inc
xchg
xor
pop
test
out
xchg
shl
mov
das
fwait
cmp
and
idiv
mov
mov
rcr
pop
outs
lahf
stos
xor
push
adc
adc
sub
xor
mov
ins
mov
inc
fstp
outs
nop
dec
clc
fwait
cmp
jne
js
add
scas
(bad)
das
enter
jbe
or
pop
push
rcr
xchg
xchg
push
js
fst
imul
add
test
push
movs
xor
cli
xor
retf
xchg
xchg
ret
push
fcom
mov
adc
daa
fistp
fwait
pop
jae
mov
aam
clc
add
mov
push
sub
inc
(bad)
or
test
mov
adc
shr
sar
add
call
rcl
sahf
lods
xchg
mov
push
inc
cmp
cld
not
aas
jnp
xchg
add
inc
mov
clc
mov
mov
jmp
imul
add
jg
movs
(bad)
adc
jo
iret
data16
or
pop
sub
push
xchg
ja
cs
push
in
xchg
imul
vmread
out
xchg
xlat
and
hlt
pop
inc
mov
cld
mov
out
cmp
fwait
adc
je
(bad)
scas
fist
rcl
adc
arpl
mov
jne
cmp
addr16
cmps
movs
push
or
nop
sete
ins
or
cli
xchg
jo
mov
add
sub
push
mov
inc
cmp
cmp
repz
mov
mov
mov
aam
and
xchg
jns
jp
add
push
mov
out
add
div
je
fwait
push
retf
and
inc
xchg
ja
addr16
jno
xor
xchg
sub
dec
and
inc
je
dec
fisubr
fdiv
or
ror
dec
jle
mov
je
rol
mov
outs
mov
cli
pop
mov
mov
dec
out
xor
add
xchg
pop
jb
jnp
xchg
dec
or
retf
push
jmp
push
inc
mov
add
sub
stc
and
fwait
push
out
xchg
retf
mov
sahf
into
ss
sti
sar
xchg
adc
cmp
push
dec
fs
fdiv
xchg
test
lods
and
repz
inc
ret
inc
push
punpcklwd
aam
sbb
inc
les
test
xor
and
or
leave
pop
mov
dec
jmp
adc
lock
jae
(bad)
call
pop
movs
adc
xchg
dec
mov
jo
xchg
mov
mov
cdq
sbb
or
pop
xchg
mov
pop
addr16
xchg
mov
cdq
imul
loopne
dec
xchg
hlt
mov
aaa
push
ror
jmp
xchg
pop
ins
shl
inc
mov
pushf
sbb
jle
dec
cwde
jb
lods
dec
mulps
movs
js
xchg
jae
stos
iret
std
outs
lock
repnz
xchg
or
jns
int
adc
cli
cmp
stos
fwait
aas
dec
pop
mov
nop
mov
aam
imul
mov
les
pop
neg
pop
(bad)
xor
jo
xchg
mov
fiadd
dec
xchg
xor
scas
mov
or
xor
adc
mov
je
cdq
mov
popa
mov
xchg
(bad)
xchg
int3
sub
in
adc
xchg
sbb
cdq
sub
xchg
fcmovnbe
mov
dec
daa
jl
adc
sbb
inc
inc
retf
xchg
ins
adc
stc
scas
push
pop
in
int3
cwde
sbb
ja
popa
xchg
retf
pop
mov
js
xchg
or
xchg
jl
in
xchg
dec
cwde
shl
aaa
jno
xchg
push
inc
fs
add
jae
pop
and
mov
adc
shl
xchg
or
mov
dec
mov
dec
pop
and
dec
mov
xor
adc
or
push
sbb
sub
adc
jp
(bad)
out
and
inc
jnp
stos
adc
out
xchg
push
mov
not
popa
and
xchg
mov
test
xchg
aad
in
add
xchg
push
mov
xchg
(bad)
and
pop
mov
fcmove
push
xchg
test
mov
cdq
icebp
inc
call
mov
rcl
arpl
sbb
leave
xchg
(bad)
mov
movs
popf
jl
mov
aam
xlat
lea
je
xchg
and
xchg
add
mov
or
aam
(bad)
mov
pop
mov
adc
mov
add
movs
xchg
cmp
outs
mov
xor
cmps
mov
aam
nop
adc
adc
mov
gs
jg
xchg
adc
xchg
pop
jae
xchg
fcomip
mov
lock
and
cmps
fild
mov
popf
(bad)
pop
xchg
mov
push
add
hlt
rcl
sahf
ret
fwait
popf
jmp
movs
lock
mov
lds
adc
adc
cmp
jp
mov
cmp
aam
out
mov
push
xchg
fcomp
jo
xlat
gs
sbb
stos
or
outs
adc
out
mov
mov
and
shr
xchg
ds
adc
pop
(bad)
xchg
imul
cli
mov
(bad)
ficomp
in
add
mov
popa
xchg
xor
nop
adc
repz
imul
sahf
sub
sub
xchg
stos
jg
mov
sub
mov
xchg
in
xchg
mov
sbb
xchg
lock
or
or
aaa
xor
xchg
daa
lahf
and
jge
jecxz
xchg
(bad)
loope
jp
loop
ins
shl
xor
(bad)
stc
gs
test
into
(bad)
pop
pop
push
push
xor
fsub
repnz
and
clc
push
daa
xchg
mov
cmp
sbb
xchg
adc
push
pop
scas
sahf
fwait
xor
enter
or
push
retf
mov
xchg
popa
inc
inc
and
daa
xchg
inc
movs
pop
int3
xor
in
jl
call
enter
int
repnz
aaa
fwait
cmc
and
mov
loope
push
jle
xchg
inc
sub
mov
dec
lock
push
xchg
xor
pop
dec
cmp
lods
les
out
or
cwde
mov
add
lock
leave
nop
into
aaa
add
fmul
push
(bad)
movs
cmp
call
xchg
ss
mov
fisttp
xchg
aam
push
dec
or
enter
ror
ja
jbe
daa
pop
xor
dec
xchg
aaa
fadd
mov
int3
cmc
adc
in
pop
sub
cmps
adc
loope
add
out
pop
mov
into
pusha
fwait
adc
dec
jnp
jp
push
mov
dec
ins
aam
(bad)
cdq
xor
jns
lahf
test
xor
xchg
xor
xchg
mov
popa
inc
rol
push
or
cld
pusha
dec
mov
push
mov
jmp
jo
dec
shl
mov
je
ja
or
ret
js
rol
xor
pop
mov
pop
and
pushf
add
adc
cmps
jno
(bad)
in
jbe
dec
repnz
cli
adc
(bad)
fstp
cdq
xchg
adc
rol
mov
sbb
mov
int3
mov
stc
jmp
xchg
or
adc
jl
or
ins
(bad)
bnd
push
xchg
xchg
pop
and
add
sbb
mov
call
aam
mov
xor
dec
xchg
into
loopne
push
or
test
inc
jg
popf
pop
cmp
mov
mov
sub
outs
in
stos
test
and
loopne
sub
xchg
sbb
rcl
es
call
sbb
mov
cmps
mov
jecxz
xchg
xor
xchg
cmp
outs
jg
xchg
call
jl
adc
xor
dec
push
repnz
pop
cmps
jnp
lock
fcom
sub
(bad)
push
mov
sbb
xor
pavgw
je
je
aaa
ficom
mov
ret
xchg
cmp
div
or
mov
test
xchg
inc
js
jp
scas
sub
xchg
(bad)
xadd
loop
fs
mov
das
shl
imul
hlt
xchg
or
and
sub
and
cmp
sub
adc
aaa
pop
int
adc
pop
mov
xchg
push
ins
outs
jmp
cmp
psubusb
adc
or
xlat
inc
(bad)
push
shr
dec
nop
outs
fs
or
ins
inc
scas
ret
mov
mov
xchg
sub
int3
cmp
aam
xchg
into
xchg
sbb
out
xchg
sub
xchg
in
sahf
stos
pop
push
mov
adc
inc
movs
mov
gs
mov
jne
xchg
movs
lds
lahf
xchg
lea
ss
mov
and
dec
bound
ret
push
xor
fdivr
inc
ds
xchg
ins
cmc
inc
mov
aaa
aam
lahf
xchg
pop
xchg
(bad)
ins
mov
clc
sbb
jns
in
push
fstp
mov
mov
xchg
inc
jl
and
icebp
cmp
xchg
pop
aad
mov
mov
xchg
xlat
mov
mov
xchg
scas
mov
(bad)
std
xchg
call
pop
shl
mov
mov
sahf
xchg
js
stos
ds
fidiv
call
test
xchg
mov
dec
aaa
pop
pop
imul
sar
cmp
cmp
in
mov
leave
xchg
aaa
jmp
xchg
je
push
sbb
fninit
outs
cmp
jnp
mov
xchg
xlat
shr
sub
sub
xchg
fcom
pop
cwde
loope
push
adc
and
xchg
mov
daa
fbstp
test
xchg
(bad)
or
popa
xchg
test
ficom
xchg
xor
lock
cld
jnp
iret
add
out
idiv
sbb
mov
xchg
mov
xor
mov
mov
sahf
push
dec
push
not
push
adc
cmc
xchg
retf
or
add
pop
mov
call
in
sbb
xchg
pop
data16
arpl
push
and
rcr
jle
xchg
xchg
jbe
push
icebp
in
and
adc
ret
inc
inc
popa
xchg
xchg
cld
aas
pop
in
mov
mov
mov
stos
sub
fwait
mov
mov
dec
sahf
sub
xchg
dec
dec
je
test
inc
sbb
retf
hlt
sahf
dec
test
xchg
test
mov
aam
adc
fimul
dec
xchg
sub
mov
mov
arpl
jl
jmp
add
sbb
cmp
xchg
fs
or
ret
xchg
mov
sub
xor
xor
inc
test
lea
mov
arpl
xchg
adc
mov
fidiv
xchg
daa
aad
or
push
mul
adc
adc
xchg
add
mov
mov
sub
lods
xchg
(bad)
cmp
xchg
pop
and
mov
je
mov
into
xchg
xchg
adc
lahf
inc
xor
dec
adc
mov
retf
cld
mov
in
pushf
xchg
(bad)
movs
sub
mov
je
push
in
int3
shl
jbe
xor
add
cmp
adc
add
clc
test
(bad)
fmul
mov
and
ret
pop
jle
add
mov
add
cld
xchg
call
mov
in
xchg
adc
in
(bad)
dec
xchg
retf
mov
xchg
dec
aas
sysret
in
movs
mov
xchg
and
leave
nop
mov
add
mov
in
ret
adc
(bad)
mov
adc
lahf
daa
dec
jecxz
adc
ins
fisubr
movs
mov
aaa
out
hlt
out
mov
adc
xchg
pop
movntq
dec
(bad)
xchg
cmp
cmps
sbb
out
lahf
sbb
inc
repnz
rcl
adc
xchg
mov
aaa
adc
shr
loope
xchg
outs
fcom
pop
or
enter
test
(bad)
xor
out
das
cmp
jae
sub
mov
sub
sbb
xchg
add
cli
mov
or
adc
test
pop
into
push
jo
movs
pop
jbe
cmp
stc
lahf
stos
cli
mov
xchg
movs
ret
ins
jae
inc
xchg
daa
adc
and
sar
in
xchg
das
xor
les
push
mov
mov
icebp
scas
xor
jp
xchg
outs
repz
jl
popa
mov
jmp
aam
rcr
fs
movs
fwait
arpl
xlat
jb
inc
xchg
ret
test
(bad)
xor
jns
pop
sub
scas
mov
dec
out
jnp
popf
ds
dec
out
sub
inc
or
xchg
pop
sbb
jp
ja
cdq
mov
inc
mov
adc
push
aam
mov
xor
(bad)
cmp
aad
jno
test
pushf
dec
mov
xor
cmp
xchg
sbb
cmps
(bad)
mov
xchg
dec
fisttp
sbb
sub
or
(bad)
inc
icebp
sbb
sub
jne
mov
pop
xor
mov
lock
push
or
aas
mov
xchg
(bad)
cmps
adc
xchg
mov
(bad)
sti
(bad)
cmp
mov
shr
mov
lods
fwait
mov
push
les
out
mov
out
pcmpgtd
add
dec
xchg
mov
pop
mov
pop
mov
hlt
test
fild
cwde
je
xchg
movs
inc
xchg
stc
lds
mov
mov
sub
out
out
mov
dec
push
xchg
scas
gs
sti
cmps
cwde
jmp
lds
xchg
dec
test
mov
jnp
es
pusha
dec
xor
int
jae
and
daa
jno
out
xchg
or
mov
pop
cwde
aaa
lahf
or
xchg
xchg
call
xchg
test
pushf
cmp
jns
push
push
sub
stos
push
and
mov
xor
push
movs
dec
int
out
or
xor
int3
sti
not
jg
pop
xchg
sbb
mov
xor
pop
xchg
(bad)
sub
inc
xchg
out
push
std
ds
sub
sub
xchg
icebp
xchg
shr
leave
ret
in
fmul
mov
pop
stos
outs
mov
jmp
and
sub
mov
push
loopne
ins
loope
pop
mov
xchg
(bad)
into
data16
jnp
fxtract
jg
test
movs
out
xchg
inc
in
fnsave
xchg
ds
mov
test
lahf
jecxz
mov
sbb
stos
or
mov
mov
adc
add
test
or
test
into
dec
sub
fidiv
and
or
xchg
rol
pop
push
push
lahf
outs
cli
out
pop
xchg
mov
scas
mov
lods
shr
clc
push
nop
xchg
test
jnp
xchg
rol
imul
int
xchg
sub
aam
jl
xchg
js
rcl
dec
stc
adc
dec
outs
fldenv
add
mov
mov
push
retf
or
jbe
xchg
das
or
in
cmc
add
xchg
aaa
sub
xor
xchg
xchg
dec
mov
je
xchg
fisubr
lea
xor
and
ds
xor
xchg
gs
cmp
xchg
inc
(bad)
pop
mov
mov
jecxz
sub
xchg
ins
or
ret
imul
inc
repz
das
xchg
sbb
jle
pop
xchg
ins
test
push
dec
jb
retf
push
inc
adc
inc
es
sti
pop
xchg
pop
(bad)
(bad)
daa
pop
mov
adc
push
(bad)
out
rcl
and
xchg
xchg
ins
(bad)
dec
fidiv
pop
cwde
push
test
pop
jg
push
aad
jmp
lock
jns
sbb
out
adc
inc
sub
pop
mov
stos
pop
call
movs
sar
xchg
mov
mov
cmps
or
stos
ror
call
rcl
iret
into
pop
inc
xchg
xor
mov
scas
adc
loope
and
mov
ss
dec
repz
add
in
xchg
or
push
add
ror
mov
push
cmp
das
outs
jb
inc
in
aaa
xchg
pop
inc
idiv
mov
mov
sbb
cli
sub
dec
or
pop
in
rol
xchg
aas
fdiv
lds
call
lock
xchg
add
jbe
stc
movs
ins
xor
dec
fimul
or
or
jmp
push
fist
ja
jne
xchg
mov
call
mov
mov
xchg
cmps
or
xor
(bad)
sbb
xchg
cmps
rol
out
std
out
mov
jbe
in
jl
dec
add
(bad)
aaa
cmp
outs
mov
pop
test
xchg
ins
addr16
cwde
xor
jecxz
jle
leave
sar
es
inc
das
cs
xchg
cld
aam
or
cmps
fild
or
inc
aaa
shr
test
pop
int3
lods
sub
mov
pop
inc
in
dec
mov
xlat
arpl
lds
dec
xchg
(bad)
jno
shr
inc
xor
jmp
cmc
mov
mov
(bad)
not
xchg
out
or
jmp
pushf
xchg
xchg
push
scas
xchg
imul
adc
aas
xchg
adc
cwde
jl
fs
rol
adc
enter
mov
inc
cvttps2pi
pop
adc
sub
js
xchg
dec
fstp
inc
xchg
mov
xchg
(bad)
loop
adc
xchg
fild
daa
shl
cmp
jg
or
xchg
out
sub
inc
jl
and
xchg
mov
cld
adc
(bad)
retf
out
jmp
jnp
repnz
mov
cli
jns
jo
inc
or
cmp
(bad)
ffreep
fwait
cmp
shr
xchg
fucom
dec
je
sub
adc
in
inc
outs
xchg
inc
and
inc
inc
ret
mov
ss
ds
sub
jl
mov
mov
les
xor
dec
mov
push
sub
inc
jns
popf
pushf
xchg
or
add
retf
xchg
aam
pop
mov
xchg
mov
jo
mov
bound
stos
scas
xchg
(bad)
call
mov
xchg
rcl
sub
fcom
sbb
lods
push
xor
movs
mov
movs
adc
mov
push
lahf
fcom
jb
xor
mov
pop
sbb
mov
test
inc
push
or
movs
stos
adc
adc
sahf
stos
xchg
cmc
mov
sub
out
dec
mov
xor
cld
stos
sbb
jg
mov
mov
xchg
mov
fdivr
xchg
(bad)
adc
cmps
adc
jge
xor
add
outs
(bad)
pushf
ror
inc
popf
xchg
(bad)
jne
push
cdq
std
jmp
xchg
and
pop
pop
xor
mov
int3
pop
mov
push
xchg
push
loop
mov
jmp
retf
mov
popa
jmp
xchg
push
lods
and
pop
dec
jl
and
xchg
movs
in
sbb
add
or
sbb
movs
mov
xor
push
cmp
mov
xchg
add
sbb
xchg
es
ror
dec
(bad)
jnp
mov
inc
dec
mov
inc
in
pusha
pop
xchg
in
cs
ret
jmp
stos
outs
xchg
cmp
shl
xchg
rcl
mov
push
mov
xchg
cmp
repnz
mov
out
ins
pop
xchg
(bad)
lods
xchg
sub
shr
push
xchg
cmp
mov
pop
or
xchg
adc
sub
pop
xchg
sub
and
data16
and
sbb
adc
push
outs
adc
ins
cdq
sub
mov
cmp
adc
mov
loopne
nop
push
jmp
xchg
and
add
cs
imul
not
mov
adc
outs
pop
fwait
jecxz
add
xchg
xchg
pop
mov
or
sti
and
push
js
retf
into
hlt
add
mov
mov
xchg
test
dec
fmul
adc
sahf
mov
or
lahf
xchg
jns
cmps
sub
int3
xchg
cld
fwait
gs
mov
jno
push
fidiv
popf
std
jg
cmps
xchg
dec
test
lods
push
xchg
repz
xchg
into
outs
jne
test
xchg
jo
jb
and
add
xlat
xchg
xor
pushf
sub
xchg
xchg
(bad)
retf
lods
ins
sbb
adc
stos
sbb
fs
sub
push
daa
and
xchg
aam
push
int3
or
mov
push
cmp
pop
adc
inc
pop
js
xchg
movs
dec
mov
es
or
add
out
adc
call
data16
sub
leave
and
mov
sar
aam
(bad)
or
adc
je
ss
xchg
call
ds
vpmacssdd
or
jge
fmul
das
cmp
adc
mov
add
outs
jmp
cmc
ins
aaa
xchg
xchg
mov
push
je
adc
rcl
xchg
mov
aad
adc
xor
xchg
pop
jmp
adc
iret
pushf
adc
xchg
retf
push
pop
mov
adc
xchg
repz
test
sub
pop
mov
or
sub
fsubr
mov
out
xchg
dec
push
and
push
inc
jle
xchg
ss
daa
xor
out
xchg
enter
es
fisttp
call
out
push
daa
mov
xchg
xor
sahf
pop
xchg
push
inc
push
into
out
lea
xchg
or
ret
jae
je
mov
mov
cmp
mov
outs
ret
mov
cli
and
inc
test
xor
mov
dec
xchg
fbstp
aam
xchg
lock
xchg
and
fnclex
or
push
rcl
mov
(bad)
jp
shl
fwait
cmc
jl
je
and
push
stos
pop
sbb
xchg
jecxz
sub
xchg
mov
ret
out
outs
jl
fwait
inc
adc
pop
cmps
cmc
mov
sbb
lahf
mov
inc
jmp
pop
adc
xchg
sbb
std
mov
or
retf
mov
fs
jb
dec
iret
pop
jmp
or
(bad)
xchg
pop
sbb
clc
adc
sub
add
xchg
push
adc
out
imul
icebp
mov
push
iret
mov
sahf
xchg
movs
sbb
je
xchg
cmp
bound
jno
push
pop
xor
cs
and
stc
mov
cmp
xchg
xor
(bad)
jle
test
lds
inc
loopne
xchg
rol
xor
jecxz
ror
nop
add
sub
mov
or
pop
pop
outs
popa
ficom
gs
inc
in
retf
xchg
push
lods
sbb
nop
inc
out
loope
mov
and
es
and
mov
and
cmp
mov
adc
mov
or
out
loope
out
push
jp
mov
lahf
pop
jns
add
cli
adc
adc
mov
pop
adc
call
sub
or
xchg
(bad)
int
inc
xor
shl
cmp
or
sahf
add
and
mov
jns
fs
sub
push
xchg
addr16
push
imul
mov
and
adc
sub
ins
xchg
push
sbb
test
xchg
jl
dec
push
push
jne
jne
adc
mov
ss
fsub
es
xchg
adc
dec
out
sub
or
imul
popf
outs
or
fwait
lods
pop
dec
add
cmp
mov
(bad)
push
mov
hlt
adc
mov
sub
ret
xor
inc
adc
dec
dec
adc
loop
mov
mov
ss
ins
mov
xchg
add
xchg
clc
in
shr
xor
xchg
repnz
cmp
int3
xchg
add
pop
adc
or
fwait
outs
test
loopne
mov
dec
in
sub
mov
out
push
outs
mov
out
pop
or
jno
lods
(bad)
hlt
mov
lock
jbe
mov
cmp
outs
sbb
xchg
fs
out
(bad)
test
jb
icebp
mov
jno
adc
test
jmp
push
imul
dec
adc
sub
ret
mov
shl
les
movs
fist
xchg
or
pop
jecxz
shl
fwait
loope
fs
inc
movs
call
inc
jge
xchg
push
mov
(bad)
movs
push
dec
mov
add
mov
xor
push
cmp
sub
mov
add
xor
add
jg
test
inc
mov
xor
rcr
loopne
mov
in
xor
pop
cmps
clc
out
cwde
fwait
cmp
add
and
int3
adc
enter
outs
idiv
xchg
xchg
scas
repz
ret
push
xchg
pusha
adc
pop
ins
daa
retf
ss
jge
mov
fimul
xchg
cmp
pop
inc
aad
sub
jle
adc
ss
xor
test
pop
int3
lds
aas
xchg
(bad)
imul
jle
(bad)
cmp
dec
jl
test
mov
xchg
cdq
fsubr
jp
fwait
add
test
xor
dec
xchg
jle
mov
cmps
call
or
mov
inc
and
inc
imul
xchg
fwait
push
repnz
out
fwait
push
in
ret
fwait
outs
aam
jmp
xchg
xor
sti
idiv
jecxz
dec
retf
inc
or
mov
loop
pop
xchg
cs
pop
inc
mov
imul
in
test
push
xor
jns
mov
mov
in
sub
ins
push
je
fbld
xor
sub
xchg
mov
push
mov
push
jb
pop
lock
js
mov
loop
xchg
ins
xchg
jg
dec
xor
xchg
sub
call
push
xchg
mov
ror
xchg
or
cld
ins
in
fcmovnbe
pushf
xchg
fsubr
gs
xor
jns
mov
out
js
fild
push
xchg
addr16
aas
sub
xchg
js
cwde
cmp
mov
(bad)
fist
retf
rcl
mov
pusha
cli
adc
inc
out
xchg
rcl
sub
sbb
jl
(bad)
mov
xchg
jb
scas
sub
out
fwait
xchg
(bad)
xor
js
enter
xchg
jg
(bad)
fldcw
fwait
mov
xchg
jle
dec
push
mov
(bad)
jmp
lods
je
xor
xchg
lock
mov
mov
lods
dec
xchg
xchg
push
stc
xchg
lea
mov
or
cwde
mov
xchg
mov
imul
in
lea
adc
adc
call
shl
push
mov
pop
xor
sbb
ss
nop
xor
shr
sbb
or
jmp
mov
lahf
xchg
sub
test
jmp
and
push
mov
rcr
xchg
js
pop
inc
pop
lock
and
rcl
sbb
ret
scas
xchg
or
adc
mov
xlat
call
mov
jmp
std
cmp
pop
adc
in
je
sub
xchg
or
out
pop
enter
mov
and
mov
popa
lods
mov
xchg
mov
enter
gs
xchg
pop
das
xchg
call
ja
xor
int
or
das
rcl
js
shl
xor
adc
adc
or
retf
mov
mov
stos
sub
and
mov
xor
aam
(bad)
adc
cmc
adc
aam
push
xchg
xchg
in
jb
add
xor
mov
not
scas
mov
xchg
dec
and
imul
inc
outs
xchg
mov
js
add
lea
fist
dec
or
xchg
iret
adc
popa
movs
inc
fistp
call
in
push
xchg
sbb
sahf
cmc
sub
xor
pushf
jae
loope
or
fst
call
xchg
in
lahf
aaa
ror
jno
xor
icebp
dec
xchg
inc
jo
sahf
sub
stc
or
arpl
loope
pop
loopne
pop
bound
jp
push
sbb
loop
dec
rcr
xchg
mov
jle
je
inc
push
div
jmp
jp
pop
cs
in
xchg
aam
sahf
add
pusha
mov
in
test
mov
iret
jge
or
xchg
call
pusha
xchg
mov
(bad)
je
pop
movs
pop
jp
mov
sub
imul
mov
sub
call
lea
add
inc
sbb
inc
jae
sti
jmp
adc
or
xor
pop
cmp
out
stos
xchg
mov
adc
js
xchg
sub
out
sub
xchg
enter
in
jae
xchg
addr16
movs
sbb
pop
repnz
xchg
or
clc
movs
xlat
xchg
aam
add
popf
jmp
pushf
fdiv
jae
enter
xchg
dec
jns
or
xchg
push
xchg
cmp
jl
mov
inc
add
xchg
gs
cmp
or
movs
adc
mov
xchg
ds
dec
(bad)
stos
xlat
push
xchg
mov
xchg
loope
dec
dec
mov
xchg
or
ds
xchg
adc
sbb
xchg
aas
cmc
cmp
adc
shl
out
retf
inc
xchg
shr
outs
lahf
xchg
sbb
aam
xchg
xor
and
inc
fild
cmps
test
hlt
xchg
and
fisub
cdq
jnp
(bad)
int3
call
jecxz
adc
movs
sbb
or
xchg
push
cmp
xchg
int3
mov
shr
mov
fidivr
xchg
imul
xlat
dec
dec
and
adc
sub
add
push
xchg
mov
sub
pop
jnp
pushf
xor
mov
cmps
dec
aam
sbb
ds
jae
sub
into
mov
adc
pop
sbb
mov
pop
xchg
dec
cwde
xchg
mov
xchg
out
les
test
inc
dec
jbe
pop
cwde
mov
jge
mov
xor
fidiv
jae
pop
retf
cdq
inc
int
out
push
add
sti
dec
xor
sbb
push
enter
pop
jmp
xchg
lds
lahf
fmul
xor
dec
pop
cmp
dec
sti
inc
xchg
jno
mul
cmps
fisttp
push
movs
xchg
mov
jne
je
arpl
aas
xor
dec
mov
bound
xchg
outs
inc
cmp
ds
or
mov
fld
cmp
adc
adc
daa
into
(bad)
xchg
push
xchg
cmc
lods
leave
dec
and
sbb
je
(bad)
xchg
(bad)
cdq
dec
mov
xchg
dec
jmp
mov
je
das
js
pop
mov
hlt
xor
xchg
push
es
cmp
(bad)
call
fild
ret
pop
mov
(bad)
xchg
cmp
mov
mov
sub
clc
fs
mov
ffree
rcl
dec
test
pop
addr16
ja
cmps
repz
dec
xchg
dec
xlat
cmp
mov
nop
sbb
lock
xchg
push
push
(bad)
in
scas
call
int3
push
xchg
push
xchg
cmp
xchg
inc
jb
mov
push
sub
lods
sbb
sub
jo
out
xchg
jbe
call
and
enter
xor
mov
sbb
dec
xchg
cs
xchg
vpsllw
or
fimul
dec
out
xor
push
popa
add
xchg
nop
pop
xchg
das
cwde
ret
mov
lds
in
pop
popf
mov
out
mov
push
add
cmp
fs
and
es
fiadd
inc
xchg
push
dec
or
fimul
dec
xchg
repz
inc
mov
xor
int
(bad)
ins
(bad)
jmp
sbb
daa
fidiv
out
js
cwde
sbb
jae
sbb
or
neg
out
pop
jbe
pusha
xchg
aam
js
imul
loope
not
in
arpl
pause
adc
aas
inc
nop
cmp
inc
cdq
enter
xchg
xchg
mov
inc
xor
out
mov
shl
or
mov
xchg
mov
aad
lds
add
rcr
or
mov
push
repz
sti
dec
or
dec
mov
cmps
pop
stos
iret
xchg
sub
hlt
jb
cli
pushf
inc
inc
loopne
pop
cmp
xchg
push
cdq
jle
jl
sahf
fwait
and
inc
xor
jns
add
ds
mov
xor
mov
loop
shr
adc
sub
das
fs
or
and
xchg
xor
out
dec
dec
add
pop
rcr
inc
sub
xchg
push
leave
repz
cmps
push
out
xchg
xchg
add
pop
jp
xchg
jno
dec
jne
movs
push
sbb
sub
std
(bad)
in
add
jne
xchg
popf
gs
sbb
addr16
mov
or
mov
mov
gs
rcl
jnp
lahf
movs
in
xchg
jbe
and
or
xchg
mov
sbb
dec
xchg
xchg
xor
pushf
sub
fs
jo
bound
jecxz
in
scas
push
dec
je
xor
pop
xchg
push
fmul
pop
xchg
pop
inc
mov
leave
ss
into
sbb
imul
push
mov
mov
or
xchg
xor
sar
cmp
loop
imul
dec
je
hlt
js
repz
shl
test
movs
mov
fwait
jmp
int
jo
in
inc
mov
aam
cmp
imul
es
xor
ds
in
call
ins
mov
stos
icebp
xchg
inc
pop
(bad)
adc
ret
sub
fst
jle
imul
mov
adc
aad
lea
cmc
push
mov
fs
sub
gs
xchg
xchg
out
call
ins
xchg
xlat
or
dec
fild
fild
dec
comiss
xchg
sub
mov
cmps
adc
inc
out
jbe
aam
sub
mov
lahf
jae
push
push
pop
aaa
sahf
mov
adc
bound
dec
out
or
ss
daa
sbb
dec
in
mov
jmp
sti
mov
fnstcw
xchg
shl
lods
xchg
push
mul
cmp
dec
mov
je
xchg
mov
xchg
add
fadd
or
xchg
mov
mov
mov
xchg
pop
push
aaa
mov
cdq
loope
xchg
inc
scas
pushf
mov
test
ins
iret
(bad)
cmp
inc
xchg
cmp
outs
mov
mov
push
dec
xchg
pop
fimul
cmp
adc
xchg
loope
add
rcr
push
nop
xchg
xor
sar
leave
jns
mov
cmp
or
movs
out
loop
or
xchg
shr
in
xchg
fcom
add
rcl
mov
cli
clc
retf
and
loope
adc
daa
mov
dec
adc
pop
clc
sub
das
test
daa
xchg
push
cmp
fdiv
rcl
cli
mov
dec
int3
das
in
adc
adc
ins
push
stos
test
cli
fwait
clc
mov
outs
jmp
xchg
xchg
sub
sahf
cdq
imul
add
cmp
or
xchg
shl
dec
retf
loop
mov
push
inc
fs
mov
adc
mov
aam
fcom
xchg
dec
xchg
cmp
lahf
into
stc
bound
sbb
add
cmp
daa
je
fwait
mov
xchg
cdq
mov
mov
xchg
in
movs
or
dec
add
sub
xchg
add
popf
cmp
add
xchg
dec
xchg
aas
adc
(bad)
setne
mov
ret
out
xchg
popa
jmp
mov
push
scas
xchg
xor
sub
cdq
cmp
rcr
ds
sar
xchg
pop
dec
sbb
xchg
xchg
sub
shl
pop
mov
popf
test
push
cwde
adc
sbb
je
sbb
mov
pop
xor
or
xchg
addr16
or
xchg
or
retf
pop
out
jno
mov
adc
scas
mov
xchg
fld
push
xchg
xchg
scas
imul
fidiv
sub
xor
mov
fwait
jae
jns
mov
mov
mov
xor
adc
and
mov
cli
out
xchg
xchg
lock
pop
daa
mov
data16
sar
add
dec
(bad)
mov
cs
cwde
cld
mov
add
mov
cmps
je
test
ins
pop
xchg
push
dec
mov
mov
push
sub
mov
imul
mov
aam
push
jno
sub
jp
sbb
int
sub
test
data16
aam
inc
inc
out
int3
into
sahf
imul
ins
xchg
mov
sub
sub
fwait
mov
arpl
jb
sbb
pop
cmps
inc
mov
pop
and
adc
sub
std
aam
repnz
imul
jmp
rcr
lods
(bad)
push
push
mov
test
pop
inc
fs
int3
test
add
adc
cmp
fst
pushf
xchg
cld
punpckhwd
push
popf
xchg
jp
jne
cwde
mov
xlat
popaw
fnstcw
ins
pop
mov
xchg
add
(bad)
dec
push
xchg
ret
push
std
push
movs
fwait
je
inc
shl
dec
dec
mov
xor
pop
xor
mov
inc
push
aam
dec
es
daa
dec
xchg
cmp
popa
scas
xchg
stos
js
sub
jne
or
jmp
bound
dec
xor
pop
xchg
in
jecxz
jne
sbb
les
push
push
xor
fwait
push
push
push
dec
les
mov
pop
cli
mov
movs
imul
idiv
nop
xchg
and
push
cdq
stos
push
xchg
or
jb
test
xchg
ret
dec
push
sar
adc
mov
inc
or
(bad)
in
bound
mov
rcl
mov
xchg
cdq
out
jns
xchg
stc
pusha
xchg
fwait
pop
ins
push
imul
xchg
iret
adc
leave
pop
xchg
adc
mov
xchg
dec
mov
xchg
cdq
int
mov
lock
xchg
(bad)
stos
fwait
cmp
xor
mov
int3
mov
cmc
fdivr
push
lds
scas
dec
xchg
test
mov
ficom
or
cmps
mov
xchg
ror
push
sub
jp
cmp
arpl
jne
sbb
push
ds
xchg
jmp
push
hlt
retf
adc
aad
imul
sbb
movs
cdq
clc
test
and
push
adc
cld
sub
fs
sbb
mov
xchg
pcmpeqd
jge
dec
sahf
xchg
xor
scas
sti
(bad)
in
mov
outs
cli
mov
je
not
ins
pop
out
jle
stos
inc
daa
cli
fwait
mov
cmc
ds
fcomp
fs
add
hlt
scas
lods
adc
mov
xchg
pop
sbb
pushf
inc
sbb
das
jp
jno
out
cmps
xchg
add
test
fwait
int
adc
stos
inc
adc
(bad)
or
mov
daa
xchg
movs
das
mov
loopne
ins
icebp
ror
into
ret
push
repnz
adc
xchg
leave
jne
adc
call
cmc
sbb
data16
mov
fimul
loop
jae
xchg
(bad)
(bad)
jge
ins
pop
iret
mov
xor
(bad)
ja
dec
mov
fcom
jbe
mov
mov
stos
xchg
pop
add
sahf
cmp
xor
es
jo
xchg
xchg
scas
gs
mov
inc
jne
inc
cs
or
xchg
fist
add
call
outs
ret
(bad)
sub
cli
xchg
jg
pop
stos
and
leave
xchg
cmps
and
ficom
push
fist
lahf
adc
lahf
enter
ret
xchg
cmps
mov
loopne
xchg
(bad)
xlat
sbb
cmp
popa
xchg
ret
pop
js
out
xchg
rcr
and
cdq
in
mov
inc
xchg
jmp
adc
mov
dec
js
mov
cmp
dec
inc
into
xchg
jg
mov
inc
scas
aam
jbe
nop
movs
add
rcl
xchg
outs
sub
mov
xor
or
or
adc
xlat
rcl
popa
push
aam
mov
jae
cmc
cdq
jbe
jo
mov
inc
fidivr
push
xchg
cmps
xor
gs
clc
ss
xchg
and
(bad)
push
mov
cmps
call
pop
test
mov
sti
icebp
clc
add
ja
inc
xchg
sbb
mov
sar
pop
add
mov
inc
xchg
pop
push
fldenv
cmp
add
call
inc
in
mov
push
dec
sbb
(bad)
cli
xchg
test
pop
pushf
pop
xchg
adc
lea
adc
rcr
test
mul
fwait
cld
out
mov
pushf
inc
add
xor
rol
xchg
dec
inc
cmp
jb
jno
dec
in
add
sbb
jmp
push
xchg
sub
stc
mov
add
movs
sub
stos
and
inc
mov
push
in
push
cmp
ins
out
jne
push
mov
pop
mov
bound
inc
cld
xchg
xchg
add
xchg
not
cdq
cmp
adc
jo
sub
test
push
sar
mov
aas
push
xchg
jb
mul
jl
add
cmp
push
xchg
xchg
push
xor
jae
xchg
sbb
shl
adc
jecxz
ret
fsub
pop
jmp
mov
xor
mov
rcr
xchg
enter
mov
pop
lea
xchg
xor
xchg
mov
and
mov
dec
adc
and
lock
xchg
mov
xchg
int3
std
(bad)
push
jbe
xchg
mov
xchg
into
add
adc
jge
(bad)
mov
(bad)
imul
mov
xchg
in
dec
mov
into
xor
sub
xor
mov
cmp
jp
ret
rcl
ins
xchg
(bad)
pop
in
fld
clc
mov
xchg
daa
sbb
lock
out
loop
sbb
xchg
sbb
mov
inc
movs
jne
or
out
enter
fwait
mov
out
and
add
pop
xchg
mov
sub
adc
push
xchg
xchg
jge
and
inc
xor
das
dec
mov
scas
inc
es
xchg
sti
imul
sbb
xchg
daa
mov
and
jmp
scas
xchg
or
pop
(bad)
mov
adc
xor
xor
and
out
ds
xchg
xchg
add
aaa
sub
jnp
cld
int3
ss
or
sti
popf
int3
fst
mov
es
xchg
mov
cld
ins
ret
(bad)
xchg
ja
xor
outs
xchg
sbb
lock
xchg
jbe
jno
ds
add
lahf
add
fldenv
push
hlt
pop
xchg
rcl
mov
pushf
xchg
fisubr
out
cmp
movs
adc
and
push
xchg
pop
(bad)
or
daa
(bad)
xchg
add
jns
sahf
xchg
xchg
loop
fnstsw
dec
and
(bad)
repz
mov
jge
rcr
fisttp
sub
lods
(bad)
mov
ret
add
push
ja
cmps
shr
cmp
sub
xchg
xor
mov
cli
dec
ss
mov
mov
mov
jecxz
je
inc
cmps
pop
test
xchg
aaa
pop
sbb
xchg
test
pop
or
xchg
stos
sub
in
les
push
dec
fwait
lods
pop
sbb
pop
rcl
and
adc
jge
adc
mov
adc
aaa
cmps
in
xchg
inc
push
repz
into
fldcw
(bad)
icebp
ret
xchg
add
ins
aad
and
jecxz
dec
and
cmp
pop
loop
scas
cli
in
pop
bound
xchg
dec
ret
xchg
jge
movs
mov
out
test
je
mov
xchg
js
push
adc
xchg
xor
fs
(bad)
jne
add
jg
push
and
adc
xchg
mov
and
shr
push
xor
adc
lock
lds
jmp
mov
stc
dec
jnp
arpl
pop
fwait
add
adc
push
and
mov
lea
clc
stos
hlt
pop
loopne
es
mov
cmp
xchg
jge
fisub
adc
jb
pop
not
dec
xchg
xor
jl
xor
xchg
push
xchg
movs
mov
loop
jg
repnz
shl
fdiv
or
or
xchg
inc
adc
movs
iret
or
cmp
arpl
jg
mov
xchg
push
sbb
popf
jbe
rol
loope
repz
cs
(bad)
call
xchg
sub
or
xor
xchg
mov
clc
mov
xchg
nop
push
and
or
xchg
cmp
jle
je
int3
inc
int3
outs
xlat
sbb
cmps
aas
sahf
in
xchg
imul
push
js
out
mov
cmp
push
adc
(bad)
(bad)
clc
push
cmp
or
popa
(bad)
xrelease
xchg
in
pop
mov
or
mov
out
cmp
ret
std
push
aad
imul
push
xchg
and
xchg
in
cld
stos
mov
jnp
xchg
cwde
frstor
rcl
jmp
or
mov
sbb
jmp
pop
sub
push
xchg
inc
ins
stos
rcr
and
xchg
cdq
push
mov
imul
push
rcl
sub
hlt
pusha
and
add
int
lds
lock
xchg
sbb
mov
hlt
(bad)
lods
mov
cwde
push
loopne
sahf
movs
call
push
(bad)
stos
fst
and
repnz
adc
retf
adc
mov
lea
jmp
pop
pop
les
or
mov
xor
dec
inc
nop
xchg
mov
and
xchg
pop
imul
loopne
mov
data16
xchg
stc
push
shl
test
xchg
(bad)
jecxz
cmp
jg
xchg
fbld
cmp
xchg
sbb
pop
js
sahf
inc
add
push
push
popa
out
or
mov
retf
mov
or
xchg
add
imul
xchg
enter
lods
aad
xlat
and
nop
test
lock
lahf
xchg
dec
addr16
xchg
lods
repnz
xchg
(bad)
out
dec
leave
out
or
jge
pop
jne
jns
mov
je
pusha
lods
add
xchg
icebp
inc
fdiv
scas
inc
fstp
rcr
xor
sub
fnstsw
push
xchg
cdq
mov
test
scas
imul
cmp
rcl
sbb
xchg
adc
push
and
cmp
in
dec
cmp
mov
xchg
aad
pop
clc
add
jno
data16
gs
loopne
fist
aam
xchg
push
hlt
push
pop
xchg
fwait
repnz
fdivr
mov
inc
and
adc
mov
into
pop
mov
mov
adc
(bad)
movs
xchg
mov
(bad)
inc
xchg
jmp
sar
jb
jmp
push
rol
xchg
cmps
mov
or
sbb
push
popa
pop
fcmovne
xchg
jo
fcom
xchg
mov
xchg
sti
pop
xchg
dec
mov
pop
mov
sbb
adc
scas
jmp
je
push
push
pop
into
lock
mov
(bad)
adc
xchg
loopne
les
arpl
sti
out
fs
jne
stos
and
jo
bound
xchg
ret
inc
mov
cmp
inc
pop
aam
retf
dec
xchg
jmp
out
mov
sti
jge
cmp
add
cdq
mov
pop
xchg
push
adc
pushf
mov
out
cmp
call
pop
inc
(bad)
xlat
mov
pop
mov
mov
lods
pop
or
xor
xchg
jb
repnz
rcr
(bad)
push
adc
xor
in
jns
sub
stc
push
cmc
sub
ins
aas
push
cmp
pop
fnstcw
sub
call
or
push
gs
mov
push
mov
xchg
jne
iret
int
sar
jns
mov
into
idiv
adc
sub
test
or
mov
rol
pushf
xchg
jo
xchg
jae
or
jmp
xchg
in
in
mov
mov
je
push
and
(bad)
cli
mov
scas
inc
xchg
es
mov
arpl
stos
cmps
jmp
sbb
mov
addr16
push
lock
or
sbb
xchg
or
je
loope
leave
mov
jl
pop
in
sub
sub
(bad)
push
mov
stos
cmp
jno
arpl
xchg
cmps
xchg
daa
imul
xchg
sbb
aad
push
push
call
jg
mov
je
jl
loopne
xchg
add
jo
fs
inc
(bad)
sti
leave
aaa
out
xchg
std
lds
retf
dec
rcl
test
mov
push
scas
dec
inc
lods
stos
jb
scas
xchg
adc
add
xchg
shl
mov
xchg
arpl
xchg
xor
push
mov
mov
push
rcl
stos
push
xchg
pop
jne
(bad)
out
shl
ror
sub
lea
dec
xrelease
pop
mov
and
xchg
or
push
sub
sub
inc
xchg
sbb
mov
mov
in
xchg
adc
hlt
dec
cwde
xchg
clc
xchg
cmp
mov
mov
push
pop
js
mov
push
jbe
cmp
mov
xor
leave
movs
mov
sub
aaa
lahf
les
out
or
push
inc
stc
sysret
fwait
call
popf
in
xchg
stos
adc
mov
xchg
dec
sub
and
imul
sbb
jb
cwde
daa
loopne
push
mov
retf
sub
pop
xchg
ds
xchg
jno
push
mov
imul
pop
sub
jecxz
popf
imul
mov
fstp
xor
pop
jmp
xchg
pop
call
xchg
add
dec
sbb
push
sahf
jl
lds
sbb
adc
(bad)
leave
int3
and
push
xchg
fsubr
ret
xchg
aam
dec
cdq
mov
out
jp
push
scas
ins
mov
xchg
push
es
lahf
ds
adc
loopne
or
and
sub
xor
xchg
cmp
fisttp
pop
mov
and
xchg
xchg
jae
add
(bad)
xchg
push
rol
xchg
sahf
adc
jmp
sub
and
mov
int3
dec
scas
int
sete
test
dec
int3
leave
stc
push
adc
push
sbb
and
iret
mov
fs
push
mov
test
arpl
rol
mov
mov
in
in
addr16
xchg
jbe
sub
(bad)
cld
dec
hlt
aam
and
div
xchg
imul
xchg
retf
movs
out
jo
mov
mov
repz
pop
cmp
jl
(bad)
js
dec
xchg
jmp
sub
ret
mov
pop
ret
dec
pop
xchg
push
push
add
xor
add
push
jne
xchg
in
aaa
aas
fs
punpckhdq
fistp
pop
cmp
jmp
xchg
xchg
xlat
mov
movs
mov
xchg
xchg
sbb
ins
test
xchg
push
xor
loope
adc
scas
or
fs
push
ins
mov
movs
ret
cwde
xchg
xchg
xchg
mov
add
xchg
enter
xchg
sbb
sbb
add
cmps
cmp
(bad)
shr
dec
and
push
repnz
xchg
ins
dec
loopne
call
sbb
and
(bad)
into
bswap
loopne
and
adc
adc
nop
stc
idiv
movs
add
pop
jg
rcl
cli
and
popa
inc
ret
and
sbb
pop
pop
xchg
cwde
neg
js
or
add
cld
mov
iret
ins
aaa
xor
imul
sub
mov
lods
xchg
cmps
inc
or
mov
inc
or
dec
pop
dec
das
mov
(bad)
lods
pop
fist
call
les
xchg
push
xchg
jo
pop
ret
ret
add
fsubr
test
mov
fnsave
or
mov
lahf
inc
in
aad
int3
gs
xchg
pop
je
rol
mov
sbb
daa
fcom
ds
cs
ss
nop
push
xchg
and
lahf
cdq
in
and
repnz
xchg
inc
cmp
adc
mov
xchg
inc
bound
int
xchg
ins
cmc
cmp
push
lods
fist
jmp
(bad)
loop
mov
sti
fwait
push
cmc
mov
push
xor
or
inc
inc
push
out
jl
add
fisubr
dec
inc
fcom
rol
pop
rcl
int
bound
inc
sbb
adc
fwait
fs
ja
cdq
pop
shl
lods
adc
adc
lds
sbb
aad
jle
mov
xchg
adc
push
push
stos
jne
shl
cmp
pop
test
xchg
mov
mov
adc
retf
pop
nop
ins
dec
loope
(bad)
adc
add
mov
je
call
enter
lods
lds
int3
loope
pop
repz
push
and
mov
pop
pop
xchg
xor
imul
mov
xchg
add
repz
lea
jecxz
xchg
cmp
nop
js
sbb
mov
mov
fcmovnbe
cmp
call
sub
xchg
retf
cmp
scas
cmps
stos
enter
jne
mov
and
cs
and
xchg
in
out
(bad)
jmp
enter
cmp
call
ins
mov
adc
in
retf
xchg
jnp
xchg
dec
int3
adc
xor
xchg
push
push
ror
pop
mov
pop
jl
xchg
xchg
dec
push
and
fwait
or
or
stos
inc
push
ret
xor
mov
mov
xor
sub
mov
push
push
adc
shr
fs
out
enter
cmp
xchg
jge
bound
or
into
cmp
aad
adc
jg
mov
pop
sbb
xchg
push
not
xchg
out
call
outs
fcom
(bad)
fwait
mov
lods
mov
push
ror
fwait
mov
mov
adc
xchg
loop
inc
jge
push
pop
and
push
push
(bad)
xchg
iret
mov
(bad)
jmp
addr16
or
mov
pop
adc
push
jbe
inc
adc
enter
out
add
jmp
mov
lahf
xchg
imul
dec
xchg
mov
dec
ins
fst
or
mov
iret
add
lods
dec
aam
jo
xchg
pop
push
push
ss
xchg
inc
jnp
leave
jbe
cmp
mov
add
sub
or
pop
mov
js
lock
xchg
ins
sbb
arpl
inc
and
sub
push
fwait
jo
push
mov
loopne
cmps
mov
xchg
jge
jne
sbb
cmp
xor
aas
es
in
mov
sbb
xchg
cmp
cmps
popf
cmp
cs
xchg
loopne
jbe
pop
pop
pop
stos
jae
push
cmps
jbe
call
cmp
and
push
jmp
xchg
mov
push
adc
mov
cwde
cmc
push
push
ins
xor
fwait
std
outs
loop
dec
xchg
inc
add
jnp
xchg
cmps
test
sbb
pop
xor
add
test
hlt
push
xor
push
arpl
inc
mov
mov
mov
das
ficom
daa
addr16
and
mov
jns
pop
inc
mov
or
sub
adc
pushf
loopne
jbe
mov
xchg
push
mov
(bad)
in
push
xchg
in
add
es
push
mov
rcr
jbe
or
push
fwait
jmp
retf
dec
push
les
hlt
lock
pop
mov
push
ret
push
jo
es
repnz
inc
push
cdq
xchg
popa
add
and
xchg
inc
fisttp
lods
or
xchg
or
cs
into
push
pop
and
loop
je
aam
xor
xchg
and
aad
fwait
dec
dec
ins
mov
jle
xchg
pop
out
inc
les
fstp
mov
pop
lods
xchg
cmp
mov
(bad)
xchg
call
aad
fs
loopne
sbb
loop
fist
loopne
cli
mov
test
mov
and
jmp
dec
jne
std
xor
jmp
mov
sub
push
fst
jne
mov
ror
or
movs
out
lods
mov
je
xchg
jnp
inc
xchg
add
mov
je
xchg
inc
dec
add
inc
stos
mov
ja
adc
mov
xchg
dec
push
out
iret
scas
mov
out
or
xchg
sbb
jge
cmps
dec
je
pop
inc
jl
xchg
xchg
rol
sbb
xor
xchg
retf
fiadd
inc
mov
and
cmp
inc
mov
into
ret
adc
in
sub
lods
or
push
stos
mov
push
adc
cwde
mov
lahf
ins
add
ficomp
je
aaa
fs
jmp
jmp
jge
stc
aad
adc
xchg
mov
xor
movs
xchg
jb
in
cmp
pop
in
js
xchg
fwait
mov
popa
push
loop
dec
fidiv
cs
push
mov
outs
sub
cli
imul
push
(bad)
xchg
sbb
std
xchg
leave
test
xchg
sbb
iret
cs
pop
test
in
cdq
mov
adc
lds
pop
sbb
fcom
mov
jmp
sub
mov
or
retf
data16
sahf
or
jmp
xchg
ds
out
sub
ficom
pop
and
je
inc
fs
lds
call
mov
adc
xor
mov
jle
xchg
ret
mov
sub
jl
bnd
ficom
sub
int3
adc
sbb
iret
in
mov
sbb
gs
lods
mov
push
mov
imul
jg
dec
xchg
jmp
repnz
mov
test
in
add
mov
dec
push
retf
pop
stos
test
sbb
leave
(bad)
push
adc
adc
xchg
cmc
stos
pop
les
pop
inc
xchg
xchg
xchg
jle
xchg
out
xchg
cmps
jl
pop
mov
in
loopne
sub
dec
mov
(bad)
ficomp
jno
sar
pop
mov
xchg
iret
or
and
mov
ror
pop
sar
mov
je
xor
mov
mov
aam
add
adc
ss
mov
jl
(bad)
into
and
sub
adc
xchg
inc
ret
movsx
jmp
mov
sbb
push
jb
push
(bad)
in
test
cmp
ja
jno
aam
mov
jne
into
or
adc
xor
mov
xchg
call
mov
dec
mov
pop
out
mov
mov
or
dec
into
or
cwde
or
mul
test
push
xchg
(bad)
aad
xor
and
shl
cld
push
xchg
dec
cmps
imul
xor
out
xchg
pop
aam
mov
pop
fstp
mov
stos
add
idiv
mov
stc
xchg
repnz
cmps
adc
in
add
jle
xchg
push
add
call
jmp
mov
xchg
dec
bound
or
sub
mov
push
xchg
adc
and
lds
sub
outs
inc
mov
je
pusha
mov
ja
nop
push
sahf
sub
jae
(bad)
les
hlt
xchg
loopne
xchg
mov
cwde
inc
stc
xchg
retf
lods
jecxz
adc
sbb
outs
xor
enter
xchg
in
add
jg
ds
sbb
or
add
add
and
push
rcr
xchg
loope
pop
idiv
pop
cmp
push
call
outs
and
inc
mov
mov
out
and
push
xchg
inc
adc
(bad)
mov
popf
lock
xchg
and
stos
int3
shl
mov
ja
mov
xchg
dec
test
je
inc
xchg
mov
inc
shr
jmp
fdiv
mov
cmp
cmps
jb
push
adc
jnp
aam
fidiv
xchg
(bad)
pusha
(bad)
or
xor
xchg
retf
sub
fstp
cld
adc
repz
fwait
or
jns
mov
cmps
movs
sub
iret
(bad)
call
xchg
push
imul
std
xchg
and
jb
xchg
xor
inc
push
dec
xchg
cdq
pop
xchg
jns
imul
xchg
mov
xor
push
cmp
sub
mov
fst
inc
xlat
nop
xchg
cdq
add
add
jb
or
mov
iret
and
pop
adc
xchg
cmps
ret
mov
jmp
fisttp
xchg
mov
mov
push
push
cld
xor
int
addr16
xchg
enter
push
xchg
ds
xchg
mov
xor
leave
jbe
push
cmp
shl
add
jle
icebp
rol
pop
xchg
jmp
mov
sahf
xchg
js
jp
mov
and
pushf
fdiv
sbb
inc
jge
je
xchg
mov
std
mov
mov
sub
pop
xor
cmp
mov
xchg
packsswb
and
xchg
adc
je
lods
shl
xlat
out
and
inc
push
jae
mov
or
push
dec
sub
scas
sub
cmp
adc
xchg
inc
pop
mov
cmps
sar
adc
or
jg
xchg
(bad)
call
int3
push
mov
adc
xchg
es
push
mov
shr
adc
or
adc
icebp
xor
aad
fs
mov
retf
or
movs
dec
sbb
je
fcmovbe
xor
scas
jns
hlt
cdq
arpl
push
xchg
xor
icebp
jno
xchg
mov
retf
loop
mov
pop
push
xchg
push
mov
push
push
jns
dec
xchg
jmp
jno
lds
stos
cmp
jle
xor
xchg
movs
ja
and
retf
rcl
adc
xor
jo
xchg
cmps
push
or
xchg
fimul
das
aad
push
inc
xchg
add
jmp
(bad)
call
xchg
out
pop
xor
cli
test
lea
in
add
fisub
test
jb
sbb
ins
lds
xchg
inc
stos
rcr
xchg
test
into
loop
add
stos
mov
aaa
lea
stos
out
repnz
xchg
mov
cmp
mov
xchg
mov
push
adc
push
xor
cmc
mov
lahf
mov
sbb
adc
push
rol
jno
sub
aas
gs
arpl
pushf
xor
xchg
pop
aaa
mov
nop
xchg
ret
mov
imul
inc
adc
cmp
mov
xchg
mov
cmc
aaa
cmp
xchg
jo
xchg
xor
call
ins
sbb
push
in
xor
xor
inc
int
or
ret
ror
cs
sbb
mov
xchg
ja
mov
sub
mov
shl
rcl
sahf
xchg
popa
pusha
mov
leave
push
test
arpl
int3
inc
adc
iret
jae
pop
cmps
nop
or
xchg
adc
fdivp
std
xchg
ret
cmp
add
and
xor
adc
int
sar
repz
test
jl
xchg
loope
outs
dec
fistp
and
ds
iret
inc
mov
xchg
adc
gs
xchg
and
lahf
xchg
cs
inc
sbb
add
ins
in
cli
xchg
fcomp
mov
(bad)
outs
fs
sar
mov
mov
pop
loopne
cli
ja
fnstenv
adc
in
jne
jmp
mov
test
xchg
pop
and
xor
out
ins
or
adc
ret
call
xor
enter
xchg
in
and
mov
or
pop
jge
rcl
call
and
mov
xchg
ins
(bad)
clc
bound
ja
int3
pop
add
xchg
dec
jbe
aas
shl
dec
sar
loope
xchg
scas
inc
add
call
xchg
lds
inc
mov
pop
je
mov
pop
cli
(bad)
dec
xchg
lods
mov
xchg
add
test
or
leave
rcl
cmp
sub
repz
aas
je
out
sub
mov
or
mov
xor
xchg
inc
int3
add
push
lds
clc
into
add
pop
pop
xor
cs
rol
adc
test
mov
fdivr
pushf
push
push
cmps
enter
adc
jp
sar
sub
nop
aam
dec
sbb
jmp
adc
cmp
loope
enter
rcl
dec
(bad)
xchg
push
test
js
jmp
sub
push
cmp
sbb
pop
dec
stc
mov
adc
xchg
test
sub
and
cmp
adc
jb
adc
pop
add
add
bound
iret
xchg
mov
cld
shr
mov
cwde
xlat
sti
or
mov
sbb
fcom
push
cs
dec
xchg
pop
not
or
scas
loope
aad
jb
les
into
add
pop
add
stos
xor
fnstenv
in
fwait
inc
jns
xor
push
pop
mov
bswap
iret
dec
dec
xchg
cld
pop
mov
inc
call
imul
retf
and
repnz
mov
or
jecxz
std
jl
mov
jbe
cmp
cmps
mov
xchg
mov
imul
aam
add
not
adc
adc
fwait
inc
add
jmp
es
cmp
xchg
hlt
sahf
lods
xchg
dec
aad
adc
jo
call
pop
mov
test
adc
xchg
out
jmp
mov
in
pushf
mov
jo
into
lock
ja
test
xchg
dec
push
push
cmp
xor
scas
jns
xchg
and
lods
cmp
and
xchg
sti
sbb
cmps
in
mov
mov
xchg
sub
xchg
addr16
aas
mov
pusha
mov
int3
(bad)
cwde
mov
popf
sub
loopne
icebp
mov
es
pop
sub
jnp
and
paddsb
ja
retf
test
adc
mov
clc
rol
ins
or
xchg
(bad)
pop
push
mov
fwait
repnz
mov
adc
jmp
rcr
mov
xchg
data16
fmul
inc
mov
es
jmp
(bad)
pop
(bad)
leave
add
cmps
lock
jb
xchg
arpl
or
in
in
xchg
pop
imul
dec
outs
add
frstor
mov
mov
pop
xchg
and
mov
cld
mov
xchg
or
cs
data16
and
mov
mov
push
ins
xor
mov
aam
push
mov
(bad)
xchg
dec
xor
mov
in
push
loopne
fistp
xchg
xchg
jno
test
xor
jecxz
mov
stos
jnp
or
mov
mov
movs
stc
mov
aam
les
sar
push
lahf
xor
mov
xchg
(bad)
ret
pop
sbb
int3
cli
mov
xchg
lea
ja
mov
xchg
(bad)
mov
xchg
daa
scas
lods
call
jbe
xchg
stos
inc
add
xchg
(bad)
sbb
lods
push
sbb
adc
xchg
sub
push
loopne
xchg
xor
sub
aaa
xchg
clc
ret
repz
and
mov
sbb
(bad)
dec
std
rol
mov
xchg
aam
shl
gs
cmps
xchg
push
(bad)
pop
cwde
mov
adc
das
aaa
mov
aad
call
loop
sbb
push
jns
rol
outs
shl
or
ret
cs
shl
adc
xchg
pop
pop
mov
or
xchg
mov
inc
xchg
xlat
sub
outs
stos
out
(bad)
xchg
movs
leave
ins
rol
cmp
mov
adc
stc
mov
bound
jmp
cld
dec
adc
fcom
cmc
bound
or
out
and
aaa
mov
popa
call
leave
mov
mov
adc
mov
cmps
mov
std
jp
ds
mov
jo
sahf
je
cmps
xchg
out
in
jmp
mov
mov
test
test
jp
sbb
popf
push
shl
daa
or
popf
icebp
or
rcl
sub
xchg
loope
mov
iret
je
mov
xor
lock
xchg
push
cmp
rcl
or
mov
pop
cwde
in
dec
jmp
dec
jb
inc
xchg
fst
(bad)
jnp
mov
mov
cmp
pop
adc
fidiv
sbb
mov
cmc
mov
scas
jo
jle
rcl
fwait
int
mov
arpl
xor
dec
gs
mov
je
mov
jbe
iret
xchg
pop
loope
xor
push
das
xchg
mov
mov
ins
mov
mov
sub
xchg
and
sbb
pop
cmp
shr
push
push
cmps
leave
out
stos
push
pop
mov
mov
inc
cmp
sahf
xchg
adc
aaa
inc
xchg
xor
ror
mov
mov
and
and
push
addr16
bound
xchg
loop
adc
retf
sbb
enter
loop
jb
inc
pop
icebp
xchg
xor
push
jle
jle
or
xchg
(bad)
fmul
popa
xchg
into
neg
sub
movs
data16
pop
lds
stos
shl
ds
pushf
(bad)
test
and
and
movs
cmp
paddusb
jmp
mov
or
lahf
cdq
xor
push
cmp
outs
jae
leave
and
scas
fisub
jne
pop
mov
jb
adc
cmp
xchg
cwde
inc
gs
mov
or
sub
mov
add
push
sub
(bad)
mov
cmp
in
scas
scas
xchg
outs
adc
(bad)
bound
movs
hlt
inc
xchg
shl
mov
xchg
xchg
dec
cmp
or
js
sti
xchg
int
or
sub
fwait
retf
mov
les
cmc
retf
jecxz
add
loopne
adc
(bad)
xchg
ret
sbb
ret
dec
mov
call
outs
xchg
cmp
out
movs
bswap
pusha
or
popa
sub
sbb
cdq
in
mov
sub
mov
daa
adc
inc
inc
xchg
mov
jmp
int
scas
dec
sub
fild
dec
push
xchg
imul
xor
rcr
add
mov
es
xor
hlt
xor
jp
cs
sub
imul
sub
dec
mov
adc
daa
push
xchg
dec
repnz
cld
pushf
fwait
jo
rcl
jecxz
adc
stos
add
xchg
mov
xor
scas
mov
pushf
retf
hlt
mov
cli
xchg
sbb
icebp
mov
xchg
movs
jne
aad
in
pop
xchg
into
enter
pop
out
xchg
xchg
sub
int3
mov
je
and
mov
sub
mov
pop
mov
xor
add
scas
xchg
ja
mov
dec
fstp
lods
mov
xlat
jo
cmc
arpl
std
inc
clc
xchg
dec
cmp
popf
push
jne
mov
mov
add
or
jno
add
add
xchg
push
mov
fwait
inc
sbb
pcmpeqd
sahf
jl
jb
pop
repz
ja
sar
inc
xchg
scas
xchg
popa
test
ret
mov
xchg
fst
fisub
xchg
sahf
xchg
jl
sbb
add
xchg
sti
adc
lods
adc
xchg
fs
fwait
cmp
cmc
fdivr
ja
jo
pop
ficomp
pop
add
jb
jns
mov
dec
and
int3
xchg
cmp
popf
repnz
push
xchg
push
daa
push
mov
ins
cwde
xchg
mov
xor
(bad)
shr
hlt
mov
test
xchg
jb
aaa
jge
pop
icebp
push
xchg
adc
jl
or
sbb
xchg
cmp
inc
and
xchg
push
and
sub
cmp
movs
push
inc
pop
adc
mov
pop
test
xchg
fwait
mov
arpl
jne
xchg
pop
retf
fnstenv
adc
pop
shl
icebp
sub
xchg
jge
repnz
jnp
push
mov
or
out
jne
in
retf
outs
mov
popa
xchg
xchg
push
daa
pop
jp
in
lock
call
mov
cdq
and
xchg
xor
sub
nop
cwde
mov
in
adc
push
arpl
je
stc
xor
push
xchg
jb
dec
loop
adc
pop
or
or
les
aam
cmp
and
dec
jg
xor
ds
xchg
cmps
mov
addr16
push
shl
enter
or
out
mov
sahf
xchg
call
adc
imul
sbb
xor
dec
mov
sbb
repz
call
sbb
cdq
loopne
sbb
nop
push
leave
rcl
in
jg
sbb
test
retf
stc
call
fcom
cld
scas
test
mov
jle
out
fist
sbb
xchg
fwait
lock
mov
loope
lods
add
or
adc
xor
fwait
xchg
(bad)
dec
aas
push
and
into
in
retf
mov
xchg
add
movs
inc
fwait
adc
pavgw
and
outs
fwait
mov
aam
pop
repnz
xchg
imul
out
cs
xchg
cwde
xchg
jge
dec
dec
mov
pop
xchg
cmp
data16
jnp
out
mov
jmp
and
(bad)
xor
popa
mov
xchg
shl
pusha
call
jns
int
jnp
xchg
sbb
sbb
cmp
cmp
mov
xor
xchg
push
outs
mov
jmp
int
push
sbb
sbb
mov
cdq
pop
mov
jnp
add
pushf
add
loop
adc
sbb
cwde
pushf
in
stos
add
(bad)
mov
adc
test
ret
or
inc
and
shr
aad
ja
bound
jbe
xchg
dec
jp
aas
(bad)
mov
into
sbb
xchg
or
enter
sbb
bnd
xchg
push
mov
and
sar
mov
mov
and
mov
pop
xchg
lods
popf
jg
xchg
stos
inc
shr
add
pop
xor
jmp
add
bound
jge
iret
(bad)
or
nop
cmp
call
movs
scas
adc
outs
ins
xchg
nop
int
mov
(bad)
xor
js
dec
aam
xchg
clc
test
in
xchg
ja
in
(bad)
test
jnp
mov
pop
(bad)
jae
sub
fwait
xchg
push
adc
leave
cld
mov
xchg
push
push
sbb
xchg
mov
ror
xchg
les
and
ror
pusha
sub
sbb
addr16
and
sub
mov
mov
pop
imul
push
cmovnp
adc
push
xchg
fwait
push
popa
jo
ja
call
jmp
and
test
inc
shl
xchg
jb
arpl
xor
outs
xchg
jmp
cmc
(bad)
sbb
add
sar
sbb
(bad)
in
icebp
xchg
gs
pop
call
dec
xor
push
dec
xor
adc
cld
sbb
mov
push
and
xchg
add
jle
xchg
jecxz
and
xor
xlat
data16
mov
aam
jmp
outs
push
xchg
(bad)
das
nop
or
fbstp
xchg
and
(bad)
out
pusha
mov
mov
int3
xchg
jl
and
in
fist
lea
mov
pop
push
mov
xchg
aam
add
shl
fs
pushf
or
push
in
or
push
retf
or
add
xchg
pop
std
clc
inc
outs
retf
xchg
(bad)
gs
hlt
sub
xchg
fisttp
push
stc
jne
xchg
add
push
sub
(bad)
xchg
adc
push
pop
enter
xchg
fiadd
sub
xchg
sub
push
cdq
hlt
jne
mov
mov
mov
sbb
push
pop
inc
sti
push
xchg
jmp
cmps
xor
dec
sahf
dec
xchg
ret
cmp
cmp
ja
xchg
mov
cli
fmul
xchg
les
xor
pop
cmp
nop
mov
push
mov
xchg
js
mov
(bad)
xchg
add
jl
loope
jae
xchg
imul
movs
adc
sbb
jmp
rol
xchg
mov
das
mov
add
xchg
mov
addr16
retf
mov
xchg
jo
add
out
xchg
jp
xchg
adc
push
jmp
sub
xchg
in
jmp
xor
rol
and
dec
test
xchg
mov
adc
lds
pop
inc
lahf
and
push
inc
xor
push
ins
movs
add
jecxz
xchg
cld
and
ret
shl
rol
mov
lods
loopne
sbb
jns
xor
repz
out
cmp
and
ficom
je
mov
and
xchg
lea
xchg
cld
adc
pop
cmp
xchg
(bad)
aad
sbb
xchg
fst
push
cld
in
loope
fist
jg
adc
leave
lea
in
int3
jge
test
aas
jb
push
mov
jle
mov
xchg
inc
arpl
movs
xchg
push
inc
add
xchg
and
iret
cmp
loop
rol
dec
loopne
ret
int3
jle
mov
je
dec
pop
xchg
xchg
test
aad
cwde
inc
scas
hlt
or
mov
mov
xchg
repnz
in
pop
into
stos
mov
test
jecxz
cmps
xor
jb
add
add
in
jecxz
inc
xlat
xchg
movs
push
ins
or
(bad)
pop
sar
xor
or
jl
xor
xor
cmc
cmp
outs
xchg
inc
fnstsw
xchg
fild
in
pusha
inc
stc
add
xchg
sti
addr16
sbb
mov
and
adc
adc
inc
clc
inc
mov
xchg
xchg
outs
std
mov
mov
ds
jl
mov
out
sti
xchg
xchg
or
scas
iret
fs
cli
xchg
mov
cmp
call
add
push
jmp
pop
mov
cmp
pop
ins
ficom
push
cmp
jns
xchg
mov
cli
aam
cmps
cmp
jecxz
mov
add
dec
mov
push
adc
mov
mov
cmps
js
sar
xchg
and
sbb
hlt
cmc
jge
add
or
rcl
adc
lods
mov
xchg
xchg
mov
dec
popf
pop
jns
sub
retf
xchg
enter
inc
push
lock
cmc
mov
sub
test
bound
or
adc
lahf
stos
rcr
mov
dec
daa
push
adc
and
mov
mov
xchg
mov
mov
inc
loop
cmp
aad
aam
imul
hlt
inc
xchg
push
retf
movs
cdq
fwait
icebp
sbb
pushf
adc
cmp
daa
sbb
bound
xchg
enter
cmp
movs
outs
or
arpl
fidivr
adc
push
xchg
and
and
fld
sar
lahf
outs
xor
test
mov
xor
cmp
aas
pop
mov
jmp
fcom
call
mov
push
push
stc
fistp
jae
rcl
add
push
jg
shl
lds
int
cdq
imul
ret
cmp
xchg
xor
xchg
into
jecxz
enter
xor
sbb
xchg
jmp
mov
and
enter
aaa
pop
mov
jb
jne
xor
popf
sbb
xchg
cmps
js
adc
cmp
in
scas
das
sub
inc
in
int
ins
dec
dec
fwait
push
cmps
fdiv
pop
cmp
in
adc
push
jmp
cld
mov
xor
cli
xor
sbb
imul
push
addr16
sub
xchg
aas
push
mov
shl
fwait
mov
inc
or
add
jns
cld
aam
iret
cmp
xchg
inc
(bad)
add
or
xchg
push
les
adc
xchg
mov
(bad)
mov
and
mov
and
outs
or
cmps
fwait
mov
adc
imul
aam
pop
xchg
adc
(bad)
xchg
xor
mov
jg
sub
fcmovnu
xchg
movs
inc
outs
in
mov
cmps
pop
xchg
ins
fcom
xor
lods
and
cmp
hlt
mov
xchg
xor
or
mov
inc
adc
inc
fnstcw
mov
xchg
cmc
dec
test
lea
xchg
add
mov
shl
je
jg
or
jbe
test
adc
xchg
pop
push
mov
xchg
sbb
jns
shr
mov
xchg
add
lea
fimul
adc
inc
add
adc
fsubr
test
push
mov
jge
int3
cmp
inc
xchg
adc
shr
sub
push
and
fwait
aaa
aam
pop
cmps
dec
jae
inc
or
or
addr16
mov
imul
xlat
pop
ins
into
jle
xchg
cmc
push
stc
shl
test
xchg
leave
mov
and
sbb
jns
fcom
xchg
je
das
cli
jle
(bad)
retf
jmp
and
pushf
mov
push
int
fcom
outs
fstp
(bad)
sbb
cmp
shl
mov
or
mov
xor
push
in
movs
mov
test
fimul
cmp
xchg
push
xor
add
inc
jle
lds
retf
push
lahf
mov
aam
jbe
shl
xor
les
arpl
or
xchg
mov
or
fs
or
jne
inc
dec
fist
and
test
neg
sbb
lods
cmps
dec
stos
outs
xchg
mov
cmp
adc
aad
adc
mov
scas
test
ja
push
dec
and
aaa
test
js
mov
push
and
mov
adc
stos
xor
jb
push
rol
pop
sub
xchg
mov
std
xchg
jne
(bad)
mov
xchg
pop
bsr
aas
pop
ins
sub
ret
mov
test
push
xchg
in
ins
xchg
or
adc
ins
sbb
sub
fcomp
shr
pop
xor
popf
push
jmp
test
cmp
pop
retf
sbb
pop
xchg
sar
test
dec
adc
adc
cs
xchg
dec
mov
enter
cmps
xchg
and
aas
sahf
ret
adc
jb
xchg
sbb
shr
fst
test
xchg
in
dec
jl
loope
cli
xchg
inc
xchg
mov
and
xor
cmp
dec
outs
mov
jae
xor
outs
mov
hlt
in
dec
movs
rol
or
inc
push
sbb
xchg
cmp
movs
fisub
rol
mov
xchg
mov
loopne
data16
and
xchg
mov
push
in
setge
cmp
out
push
sub
cli
xchg
cmp
dec
push
inc
or
cmps
mov
ficom
mov
xchg
hlt
ret
push
loop
mov
cli
inc
cld
lods
jl
adc
sbb
push
push
stc
test
in
sahf
out
loopne
xchg
xchg
dec
fsubr
push
cmps
in
inc
dec
mov
imul
and
leave
bound
mov
adc
dec
cmp
sub
iret
xchg
(bad)
pop
jp
les
cmp
xchg
sbb
xchg
or
adc
push
test
xchg
stos
sbb
jg
mov
lods
(bad)
push
daa
xchg
mov
shl
lock
and
repz
pop
xchg
mov
jmp
xchg
xchg
dec
aas
loopne
sbb
xchg
mov
aad
enter
xchg
mov
ss
mov
mov
xchg
jmp
xchg
inc
xor
and
nop
fmul
dec
pop
test
and
jmp
(bad)
push
loopne
sub
aaa
outs
mov
scas
and
aad
sbb
out
inc
dec
clc
add
ss
mov
xchg
mov
std
xchg
(bad)
pop
loop
call
xor
ror
and
int
pop
sbb
je
pop
inc
jno
test
adc
rol
sbb
xor
inc
dec
mov
xor
jp
fisttp
jl
xchg
adc
(bad)
and
sub
dec
xchg
push
jbe
(bad)
es
and
push
retf
mov
je
pop
xor
(bad)
fwait
repz
xchg
cmp
adc
adc
pop
add
hlt
jae
and
out
test
scas
xchg
aaa
cmps
pop
push
hlt
lock
xchg
inc
movs
aas
bswap
xchg
call
add
cwde
leave
shl
aaa
xor
sub
mov
xchg
not
add
dec
scas
std
adc
fsub
aam
out
jbe
dec
ins
jp
imul
add
xor
test
aam
outs
das
xchg
push
xchg
aaa
lea
sbb
sbb
mov
pop
inc
sbb
sub
ror
fwait
(bad)
xchg
inc
ss
dec
ins
xchg
mov
dec
inc
aam
call
loope
not
fild
fwait
(bad)
ds
shl
rol
dec
mov
call
mov
retf
adc
ret
aam
std
les
adc
rcr
xchg
in
mov
ja
and
fcom
ins
shl
out
in
xchg
cmps
sbb
sub
xor
xchg
es
adc
mov
xchg
mov
js
movs
xchg
out
ins
jns
stos
pusha
pop
cmps
(bad)
movs
xchg
dec
repz
into
scas
jg
dec
(bad)
int
and
push
not
adc
jnp
daa
push
in
adc
push
push
dec
xlat
inc
sbb
xchg
jmp
dec
mov
push
and
imul
xchg
jle
adc
xchg
jns
(bad)
ins
and
xchg
mov
test
iret
pop
fs
add
and
es
dec
dec
stc
(bad)
movs
(bad)
fwait
xchg
test
movs
adc
cmp
and
inc
xchg
add
jbe
out
inc
pop
pusha
push
jb
fs
loope
xchg
and
inc
adc
xchg
(bad)
cmp
rcr
repnz
popf
aam
pushf
push
enter
hlt
ret
sahf
sub
in
cld
loopne
xlat
and
sub
xchg
pop
fs
mov
std
cmp
je
or
ret
shl
lock
sbb
xor
inc
cs
xchg
dec
pop
(bad)
fild
sbb
ret
aas
xchg
movs
dec
xchg
mul
je
inc
stos
aam
fs
cmp
je
and
ror
hlt
push
outs
xor
mov
adc
cmp
push
xchg
icebp
or
pop
jbe
mov
int
adc
pop
fisub
aam
dec
sub
inc
xchg
in
mov
lock
aam
xor
push
jmp
das
je
jmp
inc
adc
retf
push
mov
jge
popf
pop
ds
ror
nop
iret
ret
aad
xchg
sub
cmp
pop
xor
in
cmp
xchg
jl
xchg
scas
sti
jns
je
xchg
pop
xchg
mov
not
mov
in
mov
loopne
(bad)
push
xchg
bound
popf
cmc
fwait
enter
mov
mov
push
cwde
fs
rcl
imul
and
imul
sub
das
adc
xchg
fisttp
lods
cmp
jb
cmps
push
push
xchg
cmp
xchg
clc
push
ror
idiv
outs
xchg
fsub
adc
push
pop
jp
fwait
out
leave
ins
jb
aad
inc
xchg
xchg
inc
and
stc
mov
frstor
lods
xchg
lock
cmp
xchg
mov
xor
dec
xchg
stos
pminsw
std
jns
mov
sbb
add
and
shl
cmp
fist
cdq
shl
pop
sti
fst
xchg
jno
or
ret
jle
pop
int
xor
add
xchg
xchg
mov
pop
add
xchg
jnp
in
jmp
int3
push
inc
adc
adc
mov
inc
xchg
adc
test
jno
push
aaa
shl
adc
imul
punpckhbw
mov
jl
out
cmp
fsubrp
inc
adc
loopne
aaa
push
icebp
xchg
rol
pushf
adc
push
inc
push
retf
stos
stc
lods
mov
pop
ds
nop
rol
push
dec
push
arpl
std
dec
and
sbb
lock
fs
or
fsubrp
or
ss
jmp
mov
dec
xchg
cdq
in
sub
ins
cmc
data16
popa
and
cmps
push
aaa
movs
push
mov
xor
retf
adc
call
jne
fcomp
neg
xchg
into
push
mov
jnp
push
in
cmp
data16
loop
jl
inc
in
gs
fs
ds
mov
push
jmp
je
pushf
or
adc
sbb
mov
enter
cwde
cs
mov
or
sbb
sbb
sub
imul
and
sub
and
jmp
xlat
xchg
lock
pop
xchg
daa
mov
cmps
fidivr
bound
xchg
test
imul
xchg
jecxz
popf
mov
out
ret
fadd
or
xchg
xor
fnstsw
cmp
xlat
push
add
nop
jb
xchg
inc
sub
mov
aas
adc
cmp
or
(bad)
push
scas
xor
fwait
dec
sbb
in
inc
jns
xchg
add
add
xor
or
rcl
jb
push
pop
xchg
repnz
pop
in
retf
sbb
adc
ds
add
and
sbb
push
mov
and
sub
fs
mov
je
pusha
outs
out
push
lds
imul
cmp
adc
push
push
pop
add
or
cmp
pop
pop
xchg
mov
cmp
push
jo
out
xchg
ret
in
mul
call
jmp
mov
ret
adc
push
xor
or
sub
pop
sbb
push
arpl
fwait
mov
gs
jbe
fistp
nop
mov
dec
and
rcl
loopne
mov
cdq
addr16
add
daa
(bad)
fst
in
xchg
rol
js
cmps
bound
mov
jbe
xchg
sub
jo
xchg
loopne
shr
test
call
popa
or
(bad)
rcl
ins
add
pop
or
jae
cmp
push
xchg
jne
jbe
shl
and
or
xchg
xor
xor
cmp
fistp
push
sbb
jmp
cmc
test
mov
fcomp
or
fisttp
xor
retf
mov
xchg
lods
sbb
add
sub
jns
scas
mov
int3
jmp
enter
add
mov
loop
dec
fs
mov
and
xchg
(bad)
fucom
outs
push
or
xchg
jnp
int3
fidiv
test
ins
inc
lods
stos
jmp
or
dec
xchg
or
mov
add
aam
sbb
mov
jae
push
inc
xchg
push
leave
add
xchg
dec
retf
movs
je
fisttp
cmp
std
sub
in
and
movs
bound
inc
(bad)
xor
imul
jl
xchg
sub
push
mov
or
loope
in
xchg
inc
or
je
cmp
movs
out
dec
adc
mov
jb
dec
aas
idiv
hlt
mov
cmp
xchg
push
or
adc
je
xchg
add
lock
jg
test
dec
fcom
push
(bad)
and
stos
movs
int3
cmp
nop
es
mov
and
cmp
int
adc
jae
dec
xchg
out
ds
xchg
xchg
inc
pop
jge
stos
call
les
dec
js
sub
adc
xchg
ins
mov
and
mov
push
pushf
leave
sub
inc
xchg
mov
out
cwde
xor
pusha
or
retf
daa
xchg
xchg
in
sbb
sub
jl
fldcw
inc
inc
adc
test
push
mov
or
inc
gs
lock
jno
add
in
lods
ret
icebp
inc
jmp
xchg
xchg
ja
rol
pop
rol
xchg
jg
mov
pop
icebp
int3
sub
inc
pusha
xchg
int
inc
dec
pop
xchg
jo
push
sub
push
aaa
jno
rcr
xor
dec
not
enter
xchg
out
sbb
and
and
xchg
pop
sbb
pusha
mov
xchg
ins
cmc
fwait
mov
in
add
idiv
adc
adc
hlt
cmp
gs
rcr
ins
out
popa
mov
lock
shl
outs
dec
sub
out
mov
and
adc
test
rol
push
add
inc
int
xchg
adc
adc
data16
shl
xchg
push
xchg
adc
dec
fdivr
xchg
adc
outs
xor
and
xchg
mov
mov
xchg
daa
idiv
push
xchg
push
ret
or
movs
retf
call
or
xchg
push
sbb
xor
push
jl
cs
jecxz
and
lahf
ss
(bad)
jmp
jno
js
fwait
int3
rol
push
xchg
pop
sub
adc
and
xchg
pop
rol
rcl
popa
mov
pushf
arpl
add
xchg
mov
sub
xchg
pop
mov
call
and
sahf
shl
xchg
sbb
pop
repnz
ret
fmul
mov
movs
repz
inc
sar
jne
mov
xor
shl
sahf
or
popa
mov
shl
xchg
push
xchg
push
aaa
loopne
sub
in
not
dec
add
xchg
xchg
ins
hlt
adc
int
lea
les
xchg
mov
jbe
xchg
std
mov
add
and
add
sbb
inc
shl
inc
xchg
push
jae
jo
xor
into
ja
or
push
jne
shl
aas
mov
jno
cmp
cld
xchg
xchg
cmp
jp
xchg
popa
mov
(bad)
js
pop
bound
dec
repz
xchg
popf
mov
jmp
clts
dec
xchg
mov
xchg
adc
mov
aam
or
mov
pushf
xlat
popa
jmp
xchg
pop
test
and
mov
or
xchg
jg
pop
call
mov
aaa
cmp
cmps
int3
retf
xchg
shl
test
les
scas
inc
call
sub
lds
fimul
push
xchg
cmp
cs
in
lahf
dec
sub
ja
in
jecxz
mov
xchg
xor
sbb
fs
loopne
push
fwait
jle
mov
inc
inc
mov
in
sub
rcl
in
mov
push
xchg
and
retf
popf
jp
push
sub
mov
and
arpl
adc
xchg
sub
push
add
dec
inc
dec
jp
mov
push
call
and
out
les
xor
adc
icebp
cmps
cld
adc
inc
mov
xor
(bad)
sbb
mov
sar
mov
gs
adc
push
dec
add
adc
retf
xchg
add
fs
xchg
pop
inc
dec
or
fdiv
cdq
or
hlt
inc
scas
pop
xlat
xchg
adc
loopne
and
mov
or
push
adc
and
cmps
test
jno
xchg
arpl
ins
or
into
xchg
adc
jno
xchg
loope
faddp
mov
loop
in
popa
cmp
jns
sar
pop
lahf
fcomi
jmp
sbb
add
add
repnz
cmp
push
imul
jg
aam
xchg
les
gs
inc
or
add
mov
jae
into
ins
(bad)
xchg
push
xor
push
movs
ins
add
mov
fcomp
clc
adc
retf
xchg
sbb
inc
push
imul
repnz
push
ss
sbb
xchg
xchg
aaa
jecxz
daa
imul
(bad)
mov
inc
xlat
xchg
xchg
or
pusha
and
int
sbb
ss
adc
cwde
clc
mov
loope
xchg
test
cmp
addr16
fwait
scas
jb
adc
pop
(bad)
or
pushf
inc
je
loope
sbb
inc
or
mov
adc
cmp
es
test
pop
cmp
sahf
adc
shr
aad
xchg
fs
fld
xchg
cmp
gs
ins
imul
inc
push
rol
jecxz
xor
and
jne
mov
adc
test
fsin
popa
jae
xchg
sbb
xchg
or
(bad)
cmp
mov
xchg
sahf
push
fwait
out
cdq
imul
xchg
mov
xchg
js
inc
mov
ret
pushf
pop
mov
lahf
in
imul
cmp
add
icebp
aad
add
adc
jne
xchg
(bad)
not
test
jnp
xor
push
cli
lods
dec
jle
cmp
mov
enter
xchg
bound
ins
push
add
sbb
xchg
pop
mov
xor
sub
cmp
test
push
in
cmp
xor
mov
push
sub
or
push
pop
je
test
pop
xchg
fimul
sbb
sub
call
jo
adc
adc
scas
inc
xchg
mov
imul
xchg
nop
inc
movs
xchg
test
and
sbb
adc
pop
adc
out
or
xchg
scas
push
fidiv
push
and
outs
loope
and
xor
das
jne
outs
mov
xchg
xchg
adc
mov
xchg
js
rcr
test
rol
loopne
(bad)
mov
pop
fbld
xchg
ins
fsubr
push
inc
les
movs
inc
cmp
xchg
fs
mov
xor
mov
adc
mov
push
adc
and
xchg
iret
add
xchg
cld
data16
sar
dec
movs
lods
xchg
mov
retf
mov
mov
std
pop
cwde
pop
mov
clc
xchg
push
mov
leave
sbb
add
xchg
js
or
fist
jmp
es
movs
lahf
pop
and
push
xor
int
ret
inc
test
adc
repnz
test
mov
dec
ret
pop
xchg
mov
push
ret
sbb
cld
inc
test
xchg
adc
jbe
sub
sbb
pop
ss
(bad)
(bad)
xchg
or
adc
movs
xchg
fs
pop
mov
call
push
inc
mov
ror
cmps
pop
addr16
(bad)
mov
ins
push
xor
jg
jmp
(bad)
mov
aad
sub
xchg
mov
in
inc
xchg
and
loop
xchg
pop
mov
push
dec
loopne
add
dec
cmp
inc
xchg
mov
out
aam
mov
sub
xchg
pop
and
js
inc
ret
jne
sub
stos
inc
sub
leave
fwait
outs
mov
daa
xchg
rol
xor
(bad)
sbb
add
sub
fiadd
fcomp
mov
xchg
stos
push
fwait
inc
test
inc
in
add
dec
and
int
push
adc
int
lea
push
fwait
xchg
mov
sub
add
mov
sub
and
xor
dec
sbb
mov
push
xchg
adc
or
fcom
inc
jp
mov
movs
xchg
dec
jne
jmp
add
xchg
or
pushf
and
dec
xchg
mov
mov
add
xchg
data16
sub
dec
loope
pop
fwait
rcl
xlat
push
addr16
lods
out
fadd
out
nop
mov
pop
cs
outs
xchg
pop
int3
outs
icebp
add
mov
imul
jbe
or
pop
addr16
push
loop
add
scas
outs
sub
fcom
loopne
lahf
fisubr
mov
pop
mov
dec
popa
std
ss
ins
or
dec
in
pop
xchg
outs
xlat
fwait
mov
xchg
(bad)
aas
ja
sbb
icebp
pusha
xchg
jmp
arpl
mov
rcl
cmp
add
sub
aaa
and
xchg
cmp
lock
cmps
ds
push
dec
jge
sti
rcr
xchg
or
pop
jl
rcr
xchg
movs
out
sahf
test
fwait
lea
pop
les
push
das
fnstenv
adc
xchg
xor
js
iret
sub
xchg
cmp
std
ret
xchg
sbb
movs
dec
out
fwait
add
fcom
popa
and
push
xlat
add
xor
fimul
repnz
mov
int3
mov
inc
ins
shl
xchg
cmp
sub
hlt
adc
pushf
retf
rol
xchg
pop
mov
xor
fcmovnb
mov
sar
and
call
xchg
imul
jnp
lock
cwde
xchg
inc
(bad)
xlat
das
(bad)
ins
in
fwait
jne
push
cs
pop
push
movs
mov
mov
xchg
popa
fnsave
pop
jecxz
pusha
xchg
(bad)
or
imul
icebp
jno
jl
or
loop
popa
cmp
ja
ins
mov
xchg
sub
pushf
xor
sbb
cmc
outs
je
arpl
aam
xchg
inc
(bad)
pop
push
xchg
mov
mov
push
jmp
lods
pop
ret
out
arpl
loopne
(bad)
sar
xor
fbld
in
and
xchg
add
mov
out
repnz
xchg
fistp
xchg
dec
or
xchg
and
cdq
inc
cmp
sar
icebp
shr
pop
addr16
adc
movs
fldenv
aam
mov
aaa
push
push
into
idiv
(bad)
jae
mov
(bad)
(bad)
mov
add
dec
xchg
pop
adc
push
jmp
mov
addr16
cmp
std
aaa
inc
int3
jns
adc
or
addr16
push
cmp
push
push
cmp
xchg
adc
xor
jle
jb
jmp
cmp
scas
fcom
dec
inc
xchg
cdq
xlat
jecxz
daa
inc
lock
loop
push
out
je
add
push
mov
sbb
cmp
xchg
cld
sub
xchg
in
out
mov
xchg
(bad)
jmp
lahf
into
push
push
xchg
xlat
push
shl
leave
pushf
xchg
mov
aaa
push
push
xchg
lods
add
pcmpeqw
xchg
mov
sbb
test
or
xchg
imul
fwait
stos
sub
(bad)
icebp
hlt
xchg
jg
leave
rcr
rol
mov
test
repnz
cmps
sub
xlat
xchg
sub
(bad)
je
bound
and
and
dec
xchg
adc
inc
das
xchg
pusha
movs
jmp
icebp
mov
sti
out
push
movs
sbb
sbb
inc
adc
and
les
xchg
inc
xor
mov
add
std
add
add
in
sub
or
sti
sbb
cmps
(bad)
nop
retf
jb
(bad)
push
rol
xchg
mov
inc
jnp
jo
adc
pop
push
xchg
aad
cli
mov
idiv
test
sti
(bad)
pushf
rcr
xchg
addr16
mov
retf
shl
sbb
add
add
inc
mov
and
jmp
in
hlt
gs
fsubr
pop
xchg
fwait
rol
jp
cmp
cli
pop
icebp
xchg
in
jo
xchg
loopne
add
adc
in
(bad)
arpl
leave
mov
inc
out
rol
iret
fcmovnb
xchg
jno
mov
icebp
xor
xchg
adc
out
adc
or
inc
imul
xchg
adc
mov
sbb
xor
nop
adc
xchg
std
xor
xchg
mov
jbe
xor
sub
scas
mov
sbb
je
int
xchg
xchg
push
scas
push
cmp
xchg
mov
ja
jge
pop
sbb
dec
xchg
call
pop
not
xchg
mov
ss
int
loop
sahf
xchg
jb
hlt
scas
popa
cmc
hlt
sar
mov
mov
cmps
(bad)
in
imul
fist
add
mov
and
mov
xchg
pushf
cmps
pop
add
adc
popa
jmp
jg
jmp
jp
nop
xchg
inc
jo
in
mov
dec
xchg
mov
adc
mov
or
cld
push
mov
mov
inc
mov
in
loopne
or
mov
es
xor
push
shl
add
inc
xor
xchg
pop
cmp
adc
scas
dec
inc
adc
or
shl
cmps
in
fmul
repz
sbb
mov
cld
jno
pop
mov
xchg
adc
stos
adc
jno
sti
movs
rol
loopne
mov
ds
adc
rcl
lods
not
push
sbb
mov
add
popa
mov
adc
fwait
cmp
pop
xchg
and
dec
cwde
or
je
rcl
pop
adc
xchg
xchg
and
stos
mov
cmp
mov
fist
xchg
or
mov
hlt
inc
(bad)
jbe
inc
sub
xchg
das
push
mov
mov
jne
imul
add
xchg
(bad)
iret
clc
xchg
jg
mov
xchg
(bad)
lods
pop
and
movs
sub
adc
neg
or
sbb
push
mov
fwait
ret
push
xchg
retf
in
in
ret
pop
jmp
out
pop
push
dec
xchg
and
or
mov
leave
inc
jbe
nop
cs
push
xchg
(bad)
bound
mov
adc
(bad)
aam
xchg
push
ja
lods
xor
aas
xchg
pop
add
test
mov
rcl
sub
xchg
or
adc
mov
int3
ret
outs
xor
inc
stos
ss
xchg
jbe
movaps
adc
mov
mov
sub
movs
int3
inc
dec
(bad)
adc
dec
mov
jmp
mov
push
(bad)
xchg
or
xlat
and
pop
pop
xchg
in
mov
mov
dec
pushf
adc
imul
mov
mov
hlt
sub
mov
hlt
mov
mov
aam
cmp
fst
fwait
popf
hlt
sub
aad
stc
fstp
mov
cs
pop
mov
out
pop
mov
xchg
push
inc
xor
and
inc
xor
xchg
iret
push
mov
xchg
les
push
rcr
dec
hlt
xchg
neg
and
mov
out
sar
xchg
mov
fs
outs
add
fcom
jl
cmp
mov
sbb
pop
or
xchg
mov
lahf
mov
cwde
aam
cmp
jp
push
mov
ja
sahf
hlt
imul
sub
dec
mov
arpl
adc
mov
or
push
dec
and
adc
mov
mov
out
ss
test
mov
outs
scas
push
loopne
or
stos
mov
ret
mov
push
stos
cmp
lahf
sub
xor
inc
retf
pop
mov
aam
leave
dec
(bad)
call
xchg
lock
xlat
xchg
sub
xchg
mov
(bad)
cmp
mov
cwde
push
fdiv
jg
adc
dec
adc
or
dec
adc
les
mov
mov
jle
xor
movs
or
call
or
xchg
pop
mov
cmps
cwde
mov
adc
mov
je
mov
xchg
xchg
(bad)
(bad)
fdiv
rcr
jl
arpl
push
rcl
adc
mov
xor
mov
retf
jo
das
cmps
xor
mov
out
rcr
ror
or
cmps
stos
xchg
aam
add
sbb
push
dec
mov
mov
pop
les
ss
bound
and
lock
(bad)
aam
pusha
fsubr
xlat
ret
mov
test
jnp
pop
and
push
xchg
cmp
clc
push
cmp
sub
test
dec
add
stc
pop
je
push
or
ds
adc
adc
dec
xchg
shl
dec
ins
clc
push
sbb
inc
test
xchg
popf
lahf
push
xchg
in
ja
pop
pop
popa
or
sbb
repnz
aad
pop
aam
inc
mov
hlt
sahf
mov
je
and
inc
lods
test
inc
inc
xchg
arpl
rcl
nop
inc
div
xchg
jmp
inc
sub
in
xchg
pushf
pop
push
pop
ficom
mul
pop
adc
mov
aad
pop
xchg
xchg
or
xchg
sti
lock
xor
iret
mov
inc
repz
call
nop
shl
mov
jmp
lods
xchg
adc
mov
mov
je
jmp
aaa
sub
mov
jl
cld
in
loop
cmps
loope
dec
xchg
lods
dec
je
lds
jnp
adc
push
int
and
out
ror
out
inc
in
mov
dec
data16
xchg
inc
add
in
pop
lds
mov
xor
xor
rcl
mov
xchg
aad
enter
and
int3
mov
ret
outs
sub
nop
inc
aas
or
xchg
pop
jecxz
sub
fwait
in
rcl
hlt
adc
pop
xchg
dec
aaa
adc
sbb
inc
stos
jnp
addr16
in
test
fild
mov
loopne
popa
repnz
pop
sub
push
adc
push
dec
clc
shl
xchg
popa
in
sti
pop
sub
lods
dec
sbb
sahf
mov
pop
xchg
loopne
xchg
dec
lea
add
xchg
xchg
mov
jge
or
adc
mov
xchg
mov
ds
in
pop
mov
xchg
retf
xor
fidiv
frstor
gs
sbb
addr16
jmp
ds
cdq
dec
and
xor
push
mov
and
sub
retf
cmp
repnz
ins
xchg
aas
xchg
sub
sbb
push
or
xchg
xlat
dec
iret
or
lods
fsub
push
in
jnp
jle
xchg
int3
xor
mov
nop
xchg
pop
push
imul
je
gs
stos
mov
adc
or
std
into
cdq
mov
add
xchg
or
jl
push
shr
mov
mov
xchg
rcl
out
sbb
imul
outs
push
xchg
xchg
and
cwde
stos
shr
mov
je
pop
and
sub
imul
std
push
mov
adc
mov
add
pop
sub
js
imul
fst
mov
ds
sbb
add
(bad)
call
cdq
xchg
mov
xor
pop
rcl
rcl
xlat
xchg
or
test
jno
inc
or
prefetch
in
test
ret
fwait
cmp
(bad)
jnp
std
jb
mov
lahf
xchg
test
mov
adc
bound
mov
xchg
stos
aaa
sbb
xchg
ret
fdivr
push
mov
cdq
les
js
jl
pop
xchg
xor
lods
inc
xchg
pushf
sub
fisttp
add
pop
pop
xchg
(bad)
out
jge
movs
or
mov
xchg
dec
mov
mov
xchg
push
or
sub
sbb
test
loopne
inc
xchg
xor
jg
fwait
mov
(bad)
imul
xchg
add
dec
inc
movs
scas
call
fiadd
lods
xchg
sub
loope
xchg
mov
ret
repnz
mov
jnp
(bad)
mov
(bad)
mov
and
mov
xchg
nop
ins
mov
xchg
int3
adc
mov
inc
cdq
push
jmp
xchg
ret
mov
or
and
push
xchg
icebp
lods
inc
mov
ja
addr16
cld
aam
ins
push
jp
mov
xchg
mov
push
and
fwait
jbe
pusha
jns
add
inc
or
icebp
adc
jnp
sub
jg
cwde
or
imul
mov
and
push
mov
ins
mov
mov
jp
dec
mov
lods
dec
jns
inc
adc
addr16
fdivr
aam
sub
jge
sub
push
jno
xchg
jmp
xchg
mov
pop
rcl
adc
push
sub
fnstsw
adc
jecxz
loope
xchg
dec
sar
in
imul
add
push
cld
xchg
mov
and
je
push
xchg
sbb
or
(bad)
add
in
hlt
cmps
aam
mov
mov
jb
imul
dec
xchg
or
sub
xchg
jle
cwde
mov
mov
or
rcr
xchg
ins
sub
push
call
and
pop
std
push
xchg
or
xchg
js
add
call
out
xchg
pop
in
icebp
out
mov
cmp
mov
jp
or
cdq
test
imul
jmp
push
sar
in
xchg
pop
push
das
lods
push
fimul
sbb
int
mov
dec
ret
sub
sub
jb
repnz
call
mov
inc
dec
xchg
out
in
xchg
inc
fcomp
aad
add
call
fmulp
push
jecxz
and
das
push
jb
pop
popf
mov
(bad)
pop
ins
xchg
wbinvd
in
jmp
push
xor
jae
adc
not
xchg
jmp
add
lods
xchg
xor
adc
jl
pop
shr
(bad)
xchg
scas
push
enter
mov
xchg
add
adc
xor
xchg
push
mov
aam
je
and
sbb
nop
sbb
jl
xchg
adc
jmp
sbb
fucom
push
sub
xchg
repz
push
test
adc
inc
pop
je
xchg
xor
loop
push
es
inc
iret
push
pop
adc
jg
pop
push
ss
and
loopne
cld
jge
pop
mov
or
mov
add
mov
push
aam
cs
gs
popf
xor
lods
ror
lea
cs
cmp
mov
lock
push
cdq
dec
xchg
mov
ret
and
or
jo
jnp
or
xchg
retf
movs
lods
adc
push
cli
xor
rol
popa
and
mov
daa
loop
imul
xchg
imul
ins
test
bound
out
dec
mov
jne
xor
je
jmp
hlt
dec
dec
and
inc
rol
fbld
ins
neg
outs
lock
test
inc
push
xchg
rcr
pop
test
leave
xchg
dec
cmp
push
sbb
xchg
mov
inc
test
fwait
test
inc
sub
mov
push
scas
(bad)
inc
push
adc
movs
int3
hlt
je
xchg
dec
ins
inc
jne
sub
xchg
adc
test
xchg
xchg
mov
aam
add
xchg
popa
mov
and
push
mov
int
repnz
cmp
sub
arpl
add
les
xchg
jbe
and
jae
mov
js
lds
jp
jle
push
mov
add
jl
mov
pop
ins
and
daa
gs
xchg
dec
cmp
out
xchg
inc
rcl
sbb
sub
or
xor
xor
push
pop
scas
xchg
cmc
adc
iret
dec
rol
xchg
jbe
stos
xor
push
pop
adc
in
xor
jmp
adc
cli
es
fsub
scas
jmp
aam
mov
xchg
sti
dec
xor
inc
ds
popa
push
mov
mov
xor
fisttp
cmps
outs
fwait
leave
xchg
stos
add
adc
xchg
xchg
inc
fnsave
cmps
push
xchg
mov
sbb
xor
dec
mov
scas
fild
(bad)
push
push
sti
cli
and
jns
inc
mov
jmp
pop
or
push
xchg
int3
push
sub
pop
popa
out
hlt
xlat
push
fwait
lahf
popf
js
xor
fcmovb
xchg
inc
push
mov
or
jb
dec
aam
xchg
les
and
push
les
hlt
sar
push
xchg
cmc
aam
out
int
call
xchg
in
sbb
sar
dec
pop
pop
out
rcl
push
cmc
xor
bound
ror
std
adc
call
mov
aad
fst
call
outs
xchg
dec
data16
scas
mov
inc
push
test
or
xchg
aam
cmp
aad
xchg
(bad)
and
fsincos
xchg
iret
imul
aaa
mov
pop
cmps
mov
xchg
sub
aam
in
loopne
cmp
dec
jne
in
imul
mov
inc
push
jo
retf
(bad)
xchg
cmp
adc
jb
jmp
xchg
dec
cdq
add
jle
ret
fild
int
push
fst
mov
xor
xor
outs
cmp
xchg
xor
mov
dec
xchg
repnz
push
stos
dec
xchg
aam
sar
pop
adc
lock
xchg
in
inc
sbb
xchg
push
xchg
ss
inc
icebp
gs
or
xor
fidiv
(bad)
pcmpeqb
jg
call
or
int
in
call
cmc
inc
adc
mov
or
mov
push
mov
pop
xor
mov
loope
xchg
mov
out
xchg
in
jge
sub
and
jge
sub
adc
xchg
or
cli
jae
jne
outs
aas
xchg
and
cmp
push
xchg
inc
outs
(bad)
mov
push
push
xchg
mov
mov
mov
push
cmp
int3
and
xchg
fisub
repz
adc
(bad)
test
xchg
fild
cmp
xchg
test
fadd
test
data16
xor
cmp
sub
test
mov
popf
psraw
sti
xor
or
out
mov
pop
and
jp
daa
dec
inc
jnp
adc
jl
xlat
mov
loope
(bad)
in
es
xchg
ja
dec
mov
data16
cli
stc
inc
mov
les
jmp
jo
adc
imul
inc
jmp
pop
int3
fwait
cmp
add
adc
add
sub
arpl
test
pop
repnz
mov
xchg
cmp
jae
and
xchg
fs
mov
(bad)
outs
xchg
add
mov
sub
loopne
sbb
cdq
xchg
idiv
int
lock
mov
push
mov
xchg
add
cmp
pop
sar
pop
and
xor
fisttp
sub
repz
pop
sar
sbb
jne
ins
mov
dec
out
hlt
aad
enter
jl
outs
xchg
inc
mov
and
aad
sub
in
xchg
jmp
add
jle
and
jns
push
xchg
lods
xor
sbb
mov
daa
xor
jl
mov
dec
addr16
pop
aaa
outs
pushf
or
xchg
movs
shr
ss
fbld
ds
mov
xchg
mov
mov
(bad)
stos
das
mov
adc
mov
xchg
jb
mov
inc
sub
test
and
gs
add
push
and
cmps
(bad)
cmp
or
pop
jp
xchg
ins
and
push
mov
daa
or
rcl
jg
hlt
cdq
lds
inc
sbb
push
fidiv
sbb
jae
sub
shl
jg
or
mov
mov
ss
xchg
push
mov
add
adc
jl
jb
add
retf
jp
ror
cmp
xchg
push
out
jg
pop
push
xchg
pop
pop
or
ret
mov
clc
pop
icebp
inc
rcl
dec
fst
(bad)
jns
xchg
outs
jmp
fdivrp
pop
into
dec
xchg
movs
mov
push
xchg
xchg
stos
inc
cwde
jbe
adc
xchg
movs
cmps
pushf
mov
pop
shl
xchg
push
call
jle
push
xchg
(bad)
pop
into
mov
and
sahf
adc
xlat
rcl
dec
sub
mov
cmp
xchg
xor
push
int
xchg
ret
dec
and
xchg
dec
jg
inc
or
je
(bad)
dec
mov
fwait
out
xchg
and
int
aad
mov
lods
xor
addr16
push
sbb
xchg
cmp
dec
enter
dec
jns
mov
or
xor
arpl
popf
jecxz
fs
xchg
xchg
ret
out
cmp
dec
push
imul
inc
test
int
retf
dec
fist
xchg
call
mov
fwait
jecxz
cmp
fnsave
xchg
mov
add
ror
adc
and
lock
jge
inc
xor
cmp
out
enter
xor
test
repnz
xor
mov
mov
add
xchg
pop
and
fwait
adc
mov
sub
pop
pop
pop
stos
add
ins
adc
mov
xchg
iret
imul
cmp
outs
adc
mov
mov
xor
push
add
pushf
sbb
sahf
cdq
jo
es
mov
sbb
xchg
pop
loop
push
mov
or
fwait
(bad)
sub
das
mov
pop
pop
jg
or
nop
push
fcom
adc
and
(bad)
icebp
repnz
xchg
das
pop
adc
fwait
pop
fdiv
inc
nop
test
fmul
movs
mov
mov
(bad)
cmps
loop
je
xlat
aas
fwait
inc
xor
mov
movs
ja
sbb
iret
mov
push
adc
mov
xchg
or
cld
xor
xor
xchg
sbb
pop
xchg
pushfw
test
retf
xlat
xchg
fmul
and
jns
dec
retf
fs
xchg
cmovge
mov
xchg
in
ins
xchg
mov
out
aad
les
pop
xchg
mov
xor
pop
xchg
add
jle
pop
cmps
push
push
popf
das
xchg
xchg
push
ja
mov
xchg
hlt
test
jl
ins
adc
mov
scas
mov
and
xchg
jns
call
sahf
mov
xor
mov
xor
fsubr
rol
aam
sbb
xchg
inc
jp
xor
icebp
test
jb
pop
loopne
or
sbb
mov
push
push
cmp
xchg
jo
inc
lock
jl
jmp
xchg
mov
mov
and
cmp
xchg
xchg
stos
aas
xchg
loopne
addr16
add
jns
scas
mov
dec
sub
scas
cmp
or
add
mov
in
pusha
das
sbb
push
push
in
dec
inc
mov
data16
xchg
jle
mov
mov
fwait
scas
scas
or
xchg
cli
xor
lds
push
sahf
popa
fadd
xchg
xchg
in
xchg
xchg
(bad)
hlt
test
(bad)
hlt
int
fsub
xchg
xor
mov
mov
sbb
xchg
popa
ficomp
adc
leave
sahf
xchg
dec
call
arpl
xchg
ins
loope
or
test
xchg
out
fidiv
in
fistp
dec
or
ja
out
xchg
sbb
or
xchg
and
inc
idiv
xchg
mov
sbb
xlat
xchg
cli
mov
pop
mov
cmps
xchg
jl
repz
addr16
pop
test
mov
repnz
xchg
dec
or
fwait
imul
dec
pop
jle
pop
mov
inc
les
push
cmp
je
out
iret
and
fwait
repz
xor
out
int3
ficomp
cmp
js
xchg
and
daa
mov
je
pusha
mov
mov
adc
xchg
sti
ja
bnd
das
cmp
sbb
in
or
shl
fs
jns
into
stos
push
(bad)
sar
pop
popa
(bad)
push
ret
fcomp
cdq
pop
xchg
stc
xchg
hlt
imul
dec
and
xchg
and
add
jle
mov
mov
jae
icebp
xchg
and
xchg
mov
int
iret
push
fwait
cli
mov
cdq
push
xchg
icebp
push
leave
xchg
add
mov
push
xor
sub
outs
cdq
(bad)
stos
xchg
mov
jnp
shr
xor
jmp
pop
es
cmps
jno
(bad)
xchg
sub
ja
xchg
pop
sti
out
add
fidivr
cmp
loop
add
in
pop
outs
push
mov
sbb
sbb
adc
pop
dec
mov
push
xor
xchg
mov
loop
stc
ret
or
cmp
xchg
fbld
out
and
xchg
clc
std
test
repnz
pop
add
fwait
xchg
xor
out
test
add
dec
ins
xchg
sub
movs
bound
push
sbb
jbe
or
sub
jmp
xchg
enter
arpl
xchg
sbb
in
mov
test
ss
into
ret
mov
fsubr
adc
cld
sub
push
fistp
mov
jnp
fdiv
cmps
xor
jecxz
xchg
inc
mov
sbb
jmp
mov
(bad)
xchg
sub
scas
outs
cs
or
sbb
fst
int
xor
dec
sti
pop
test
cld
ret
mov
rcr
out
or
gs
mov
mov
(bad)
movs
mov
xor
adc
sbb
xchg
sub
jmp
bound
iret
sbb
adc
xchg
sbb
mov
xchg
outs
push
mov
mov
mov
in
adc
mov
add
cmp
mov
sbb
cmps
movs
hlt
enter
jo
xchg
stos
jmp
xchg
sahf
scas
fisub
push
or
xchg
and
fild
or
retf
dec
mov
xchg
lods
fisttp
xor
ret
(bad)
pop
inc
cmp
pop
out
and
xchg
mov
out
mov
cld
(bad)
daa
rcl
xchg
mov
add
jnp
add
or
out
js
stos
leave
dec
jl
rcl
lahf
in
bound
jge
xlat
mov
lods
js
cmp
jmp
xchg
aas
out
retf
and
fild
je
pop
mov
aas
pop
adc
cmp
lds
ret
jge
(bad)
cmp
inc
rcl
test
mov
je
sbb
in
push
js
push
aad
jbe
xchg
xor
scas
inc
mov
mov
mov
mov
retf
(bad)
and
xchg
push
je
sub
xchg
inc
std
sbb
mov
jae
sub
sti
jne
inc
repz
pushf
cmp
adc
inc
jp
cmp
hlt
cs
inc
mov
mov
or
sub
rcl
(bad)
xchg
lods
call
xor
stc
push
(bad)
xchg
inc
scas
(bad)
and
pushf
in
jmp
jae
iret
sbb
mov
ret
pusha
or
inc
movs
xchg
add
int
push
mov
imul
call
(bad)
addr16
leave
test
xchg
jmp
or
rcr
in
xchg
xchg
xor
jg
dec
aam
sbb
jne
jmp
das
jp
xchg
and
and
mov
and
mov
mov
adc
and
xchg
jmp
add
loop
fst
(bad)
cmps
dec
push
fmul
dec
jp
rcl
inc
sbb
and
(bad)
xchg
leave
shl
dec
cs
ins
xchg
cmp
mov
push
add
xchg
jns
mov
leave
xchg
or
daa
sub
movs
mov
add
pop
data16
into
and
inc
fist
cmps
sti
ds
cs
aaa
fild
xchg
jge
xchg
adc
gs
xchg
sbb
push
imul
or
js
loop
sbb
dec
pop
mov
inc
out
xor
mov
inc
imul
je
inc
loope
test
inc
retf
(bad)
cwde
aad
leave
mov
xor
dec
lea
inc
test
jne
popf
xchg
sbb
sbb
nop
xchg
mov
inc
mov
sbb
pop
out
jle
movs
xchg
pop
sub
fs
into
pusha
out
jecxz
add
data16
xchg
stc
push
pop
rcr
mov
clc
push
jmp
fucomp
xor
out
jl
cs
mov
fwait
adc
ins
inc
jae
mov
dec
sub
cmp
sub
in
xchg
mov
dec
lock
or
test
cmp
xchg
mov
xchg
lea
inc
call
in
cmps
or
dec
mov
adc
shr
mov
jmp
push
outs
out
push
cmp
push
inc
repz
xchg
and
push
das
xchg
mov
sub
jecxz
push
or
sahf
aaa
xchg
add
fmul
retf
xchg
ret
jns
xchg
mov
repnz
ret
cmc
lds
pop
adc
and
xchg
in
and
add
jns
xchg
cmp
mov
mov
mov
ud1
push
xchg
retf
call
xchg
test
or
push
mov
fsubp
push
fs
mov
mov
mov
jecxz
out
hlt
(bad)
mov
hlt
dec
xchg
jmp
in
dec
mov
fstp
and
sub
inc
inc
les
inc
cmps
aam
add
repnz
xchg
or
(bad)
mov
pop
int
xchg
xchg
(bad)
mov
xchg
iret
ror
and
xchg
repz
xor
pop
jmp
sub
iret
xchg
inc
jmp
nop
out
sbb
xchg
out
movs
cmp
pop
mov
dec
cld
out
xor
faddp
into
test
xchg
fcom
cli
xor
nop
add
jp
inc
aas
mov
shl
xor
les
push
inc
test
xchg
mov
add
cmp
icebp
xchg
mov
pop
ins
push
add
enter
xchg
movs
fistp
jl
sub
xor
imul
jecxz
popa
dec
mov
scas
dec
fist
xchg
pusha
and
lods
or
inc
aas
pop
xchg
ins
cmps
test
jl
rcl
mov
xor
jl
or
xchg
xor
jns
jno
mov
(bad)
aam
cmp
xor
cmp
xchg
rcr
mov
push
sub
cmc
and
xchg
xchg
mov
inc
jns
xchg
adc
xchg
sub
mov
sub
or
mov
mov
jmp
stc
inc
push
lock
add
jge
popa
out
xchg
iret
retf
cmps
mov
mov
xor
add
mov
push
rcr
jns
and
xchg
dec
fbld
pop
jmp
xchg
ret
cmp
cli
jecxz
jb
cmp
int3
adc
mov
imul
addr16
aam
add
pop
mov
dec
xchg
pop
arpl
xchg
lods
cmp
popf
xchg
shr
dec
add
push
dec
shr
xchg
cmp
sbb
cwde
jnp
xchg
in
push
lds
aam
fs
mov
aam
adc
pop
mov
shl
cs
retf
xchg
cmp
int
xchg
add
pushf
test
mov
dec
cwde
ret
jle
push
pusha
dec
xchg
test
and
enter
add
outs
shl
mov
test
dec
retf
mov
jbe
cmp
fcom
test
pop
xchg
jle
mov
xchg
mov
sbb
repz
xor
fstp
xchg
popf
push
jo
push
mov
xchg
add
int
and
out
test
push
inc
mov
stos
mov
cmps
ja
lods
fdiv
mov
fwait
fwait
sub
inc
cmp
(bad)
retf
jmp
movzx
push
push
push
xor
xor
fwait
fwait
cs
test
xchg
pop
mov
jp
mov
and
test
out
mov
adc
pop
push
pop
mov
xchg
push
inc
rol
cwde
xchg
inc
iret
dec
adc
sar
adc
loopne
sub
sub
cwde
jae
icebp
fst
pop
cmp
lods
mov
or
push
call
bound
dec
in
mov
stos
dec
jae
mov
aam
jbe
je
jo
pushf
inc
cmps
pop
pop
hlt
fiadd
int
(bad)
xchg
mov
aam
xchg
imul
mov
sti
(bad)
aam
jne
icebp
mov
mov
(bad)
xchg
mov
leave
inc
pop
mov
or
cmps
xchg
fwait
pop
fdivr
fcmovnb
dec
xchg
sub
stos
sbb
in
and
push
xor
jecxz
mov
xlat
lods
pop
mov
sub
xor
cli
mov
xchg
jle
xchg
dec
lock
xchg
cdq
mov
adc
or
dec
xchg
mov
lahf
pop
dec
inc
inc
push
xchg
inc
push
mov
xchg
cwde
xchg
or
sbb
arpl
add
add
xchg
data16
sbb
mov
hlt
aas
ret
dec
out
xchg
mov
(bad)
enter
pop
adc
mov
xchg
xor
xchg
xchg
xor
scas
js
(bad)
xchg
or
mov
movs
push
mov
cmp
xchg
jl
xor
xchg
stos
popf
rcr
xchg
xchg
or
dec
adc
mov
(bad)
int
popa
xchg
jne
dec
sub
out
iret
aad
adc
into
jmp
ja
jo
inc
(bad)
jns
fist
pushf
jae
sbb
mov
and
cli
xchg
and
mov
pop
sub
imul
sar
nop
aam
jle
inc
ret
hlt
das
xor
(bad)
out
inc
(bad)
pop
xchg
push
mov
rol
xchg
add
icebp
or
rcr
adc
inc
out
adc
xchg
mov
cmc
call
das
xor
xchg
(bad)
cmp
mov
add
xchg
or
(bad)
mov
popf
pop
xchg
add
add
xchg
retf
and
out
and
jecxz
ret
mov
fsubr
xchg
sub
nop
xchg
and
cmp
pop
push
mov
xchg
in
nop
pmuludq
mov
xchg
loopne
jge
pop
xchg
sbb
in
cmps
jmp
and
xchg
pop
xchg
xor
movs
mov
sti
xchg
jge
pop
shl
adc
or
xchg
js
fld
xchg
and
mov
xchg
into
sbb
push
xchg
mov
mov
retf
xchg
inc
jge
mov
shl
gs
jbe
je
adc
push
xor
in
jne
xchg
fs
xchg
setp
mov
jo
sub
les
jp
mov
mov
(bad)
leave
xor
icebp
xchg
rol
xor
outs
xchg
xor
add
dec
ins
pop
cmp
mov
xchg
sbb
adc
movs
ins
mov
fwait
xchg
outs
xchg
xchg
gs
adc
in
xchg
jae
gs
inc
outs
mov
aas
mov
push
cli
xchg
stos
shl
out
les
cld
xchg
cmp
sub
in
dec
imul
push
fcmove
shr
sbb
xchg
addr16
leave
pop
or
sub
inc
xchg
pop
imul
mov
dec
inc
ds
mov
pop
ret
les
fcom
xor
xchg
pop
dec
popa
xchg
pop
jnp
xchg
pop
stos
hlt
inc
and
jb
jge
rcr
loopne
mov
rcr
xor
cmp
sbb
adc
xchg
sbb
adc
xchg
push
pop
clc
jnp
fadd
icebp
jmp
push
xor
and
jmp
or
das
dec
sbb
or
xchg
push
repnz
push
in
jbe
xchg
cmp
jo
xchg
push
addr16
sahf
and
ret
cmps
stc
scas
movs
xchg
push
je
or
adc
xchg
jo
pop
or
mov
and
xchg
jo
xchg
inc
int3
scas
or
add
leave
mov
pop
retf
jmp
stc
push
and
call
ficom
mov
mov
in
pushf
dec
test
cmc
leave
cmp
out
fstp
pop
push
jmp
ret
nop
lods
adc
leave
xchg
pushf
scas
icebp
dec
and
movs
xchg
es
push
ins
cli
stc
nop
sbb
aam
mov
mov
inc
mov
sbb
je
push
shr
cs
adc
xchg
mov
cmc
pop
sbb
cmp
xchg
js
out
cmp
or
adc
push
adc
pop
(bad)
push
stc
or
push
fwait
xchg
gs
add
adc
loop
rol
jl
xor
inc
or
fnstenv
cmps
and
daa
mov
adc
sbb
je
xchg
adc
pop
loop
sub
xor
daa
push
out
enter
mov
dec
loopne
mov
mov
sub
xchg
and
dec
out
jmp
test
inc
push
jo
xchg
repnz
inc
xor
jno
int3
push
sti
xchg
cmc
into
fcomp
xchg
jbe
push
(bad)
xchg
(bad)
and
adc
ror
adc
aas
xchg
cmc
es
aad
or
xchg
les
rcr
and
aam
mov
out
(bad)
mov
gs
add
bound
mov
cmp
add
xor
push
mov
js
xlat
inc
jecxz
and
adc
adc
or
call
pop
mov
and
cmp
adc
ret
and
push
mov
push
(bad)
fidivr
pop
mov
cmps
dec
xchg
rcl
jno
xchg
arpl
dec
les
dec
mov
pop
in
daa
ds
jbe
clc
push
rcl
xchg
adc
xor
xchg
adc
add
popa
xor
pop
fpatan
pop
or
push
or
imul
ficom
pop
cmc
push
fwait
cmp
cld
in
mov
ror
xor
xchg
inc
jno
mov
fwait
popf
adc
pop
test
sbb
test
dec
sub
loop
lea
jo
xchg
sar
adc
cmps
or
popf
xchg
(bad)
into
push
inc
push
push
arpl
mov
bndldx
and
in
xchg
dec
fild
mov
scas
fs
mov
jp
push
cmp
div
mov
inc
into
xchg
jo
int3
in
popf
xchg
mov
sbb
xchg
dec
mov
or
scas
mov
fbld
mov
cmp
lahf
sbb
stos
fnsave
cdq
ins
push
jbe
adc
mov
ret
xchg
add
iret
inc
mov
stos
dec
mov
ins
retf
jnp
lds
and
fwait
(bad)
movs
(bad)
inc
in
out
aaa
or
popa
mov
mov
xor
and
addr16
fld
imul
adc
lods
cmps
mov
inc
sbb
iret
sbb
adc
xchg
out
push
cmp
and
dec
xchg
mov
stos
(bad)
loope
dec
adc
(bad)
fcom
xor
jne
xchg
popf
xchg
add
stos
shl
(bad)
ins
(bad)
les
imul
pop
jl
push
xchg
lods
mov
aad
inc
add
xchg
xchg
jg
cmps
add
ror
jl
xor
stc
push
xchg
call
aad
rcl
add
xchg
xchg
das
push
push
add
out
cwde
cmp
adc
adc
leave
jge
xchg
popf
call
mov
add
mov
je
xchg
popa
inc
leave
dec
addr16
pop
fwait
inc
dec
pop
inc
xchg
mov
pop
mov
add
or
xchg
fisub
int3
iret
pop
into
ins
nop
and
mov
push
push
adc
push
test
xchg
mov
ss
imul
push
stos
sbb
or
push
aad
jns
bound
pop
xchg
jnp
mov
mov
mov
inc
pop
sub
or
sub
xchg
fsubr
(bad)
pop
adc
ins
adc
cmp
outs
mov
push
mov
add
xchg
js
aad
leave
sub
xchg
cmp
mov
xor
mov
mov
jb
int3
stos
loop
cmp
dec
mul
cmp
fisub
aam
and
or
out
shl
(bad)
ja
dec
add
inc
pop
hlt
xchg
fisttp
shl
xchg
out
cmp
jle
test
cmp
jnp
pop
hlt
cmps
das
sub
xchg
mov
mov
loope
dec
cmc
mov
mov
cmp
dec
sbb
or
mov
mov
push
adc
fwait
xchg
jge
outs
test
mov
inc
xchg
adc
xchg
(bad)
adc
clc
sub
hlt
sub
and
jo
cmp
shl
cmp
mov
push
or
das
enter
(bad)
iret
dec
aad
hlt
inc
sti
stos
push
mov
xchg
xchg
clc
aam
pop
mov
adc
mov
dec
rcl
push
push
inc
xchg
mov
push
adc
and
std
lock
jecxz
push
xchg
call
jo
fwait
fwait
pushf
pop
adc
cmp
loope
pop
and
push
(bad)
shl
add
dec
mov
leave
sbb
neg
adc
icebp
adc
call
xchg
lahf
jb
mov
xor
das
xchg
adc
cmp
hlt
dec
xlat
mov
jb
sbb
xchg
jo
js
jae
mov
pop
call
test
gs
loopne
fist
jbe
mov
jle
xchg
dec
sbb
or
psrlw
xor
push
xlat
shl
mov
pop
sbb
lods
xchg
pushf
dec
arpl
test
gs
data16
sar
inc
adc
out
xchg
ficomp
stos
fst
leave
cli
ficom
test
nop
and
xchg
stos
iret
int
test
adc
push
xlat
xchg
cs
nop
shl
pop
mov
mov
xchg
push
push
int
jl
push
jmp
pop
addr16
jmp
xchg
pop
movs
lea
sar
mov
shl
fisub
popf
outs
movs
cmps
retf
xchg
vpmulhw
in
gs
mov
xchg
repnz
adc
jp
mov
mov
sbb
adc
out
das
push
rcr
dec
gs
push
test
call
push
mov
push
xchg
jo
sbb
repnz
xchg
cli
mov
test
fistp
mov
fcom
sub
repnz
adc
or
push
xchg
sub
push
mov
repz
out
lahf
mov
rcl
addr16
xchg
cld
sti
jo
test
xchg
pop
fld
aam
js
xchg
dec
nop
scas
addr16
cmps
adc
movaps
dec
xchg
inc
icebp
xchg
mov
or
mov
call
adc
test
xchg
jne
aad
adc
lds
mov
inc
xchg
loope
push
in
mov
mov
ror
sahf
shl
adc
add
add
pop
sub
xchg
push
inc
(bad)
aas
les
adc
lahf
jb
cmp
or
sti
das
sub
ins
add
cs
js
jmp
jp
lahf
jg
push
xchg
pushf
dec
mov
pusha
push
mov
dec
arpl
jg
or
and
add
xor
mov
inc
jno
xchg
je
dec
and
cmps
jg
pop
loope
sti
iret
xlat
dec
xor
sbb
icebp
mov
dec
cmp
(bad)
xchg
dec
pop
dec
mov
xchg
in
fstp
cmp
lods
and
sub
xchg
jmp
in
bound
mov
jge
xchg
pop
popf
jecxz
mov
into
and
call
jg
xchg
add
or
sub
cdq
fwait
inc
jmp
addr16
aam
in
mov
add
or
xchg
push
sar
out
scas
popa
je
(bad)
mov
fnstenv
test
xor
out
mov
dec
rcr
xchg
movs
dec
mov
sbb
call
jne
mov
(bad)
es
push
das
int3
jle
xchg
loope
(bad)
ret
shl
fstp
not
xchg
stc
ds
mov
mov
test
sub
and
addr16
pop
jge
inc
shl
or
adc
(bad)
jmp
cmps
xchg
stc
popf
fnsave
push
arpl
mov
sbb
add
pop
data16
stos
addr16
jns
(bad)
fstp
dec
xchg
dec
test
xor
mov
xor
je
(bad)
xchg
sbb
lds
or
daa
addr16
xchg
xchg
pushf
aaa
in
ret
daa
xchg
sub
cwde
leave
cmp
cmp
xchg
cmc
test
iret
imul
loopne
jo
mov
aam
xchg
(bad)
mov
push
out
xchg
jg
repz
sub
jnp
or
and
mov
pop
sub
add
or
adc
mov
inc
nop
outs
mov
pushf
mov
push
jmp
loop
xchg
ret
xchg
and
aad
sbb
pop
ins
jbe
pusha
xchg
pop
outs
in
(bad)
sbb
enter
js
cli
int3
cmc
(bad)
shl
add
dec
call
cmp
test
call
inc
mov
mulps
sub
test
vpmaxsw
add
jge
rcl
inc
xchg
push
shl
xlat
shl
mov
xchg
arpl
sbb
or
or
and
cwde
inc
test
rol
mov
jnp
mov
scas
pop
sub
lds
call
add
mov
jmp
adc
arpl
xchg
fcomp
pop
mov
xor
push
cmps
popf
xchg
ja
adc
xor
hlt
add
fst
(bad)
pop
inc
xchg
cmp
je
je
mov
inc
arpl
xchg
fnstenv
imul
es
inc
(bad)
mov
mov
shl
rcr
sahf
out
(bad)
lock
cmps
aad
xchg
mov
xor
adc
cmp
sahf
aas
rcl
(bad)
pop
xchg
sbb
scas
inc
and
mov
mov
fld
das
mov
pop
aad
jmp
dec
int
mov
xchg
aaa
and
(bad)
jae
sub
mov
aam
xchg
ret
outs
cmp
xchg
mov
inc
lods
dec
push
sar
jno
cmp
loopne
mov
fs
fnstsw
shl
int3
xchg
aam
or
adc
fwait
iret
test
ss
aam
addr16
xchg
or
(bad)
fisubr
sub
pop
cmp
push
out
daa
(bad)
rcl
push
sbb
jns
(bad)
fs
jnp
jbe
mov
data16
aam
mov
xchg
int
scas
inc
pop
scas
sbb
movs
mov
lods
xor
rol
adc
jg
mov
mov
xor
fstp
(bad)
jecxz
jbe
(bad)
aaa
mov
adc
inc
(bad)
xchg
xchg
and
add
movs
mov
xchg
cli
add
cdq
fs
fcom
dec
fcom
je
xchg
sbb
test
xchg
jbe
in
imul
add
cmps
(bad)
xchg
loope
bound
xchg
outs
into
jo
dec
cmp
lock
and
xchg
push
and
sub
aas
mov
stos
jp
xor
inc
sub
shl
mov
or
adc
xchg
loopne
daa
jae
mov
call
js
sub
scas
add
cmc
ja
push
gs
out
pop
xor
shl
js
pushf
nop
or
mov
xor
xchg
popa
call
jo
sub
mov
sbb
sbb
xchg
cmp
popa
std
xchg
xor
xchg
mov
inc
retf
je
sub
mov
push
fwait
das
outs
hlt
inc
lock
xor
mov
jbe
sbb
mov
adc
lods
cmp
xchg
inc
mov
xchg
sbb
pop
enter
outs
lfs
popa
and
(bad)
(bad)
imul
jmp
leave
jbe
je
scas
pop
xchg
and
mov
dec
into
adc
mov
adc
outs
imul
or
add
in
jno
inc
xchg
jg
xchg
(bad)
ficomp
xchg
cwde
iret
xor
(bad)
xchg
adc
mov
mov
aam
cmp
mov
push
mov
ins
iret
repnz
xchg
fcom
in
fcmovbe
jle
xchg
lahf
mov
sub
test
xor
or
pop
jb
adc
jne
cld
jns
push
mov
mov
xchg
push
xor
jg
push
aad
fwait
shl
test
dec
sti
(bad)
mov
xchg
aad
(bad)
ds
push
scas
stc
test
jmp
mov
and
mov
mov
xchg
sub
std
xchg
in
(bad)
jle
inc
fs
(bad)
outs
or
sbb
lods
add
xchg
arpl
test
mov
sub
popf
adc
jo
inc
xchg
sub
sub
mov
packssdw
outs
out
dec
aam
pushf
dec
or
iret
andnps
shl
add
(bad)
cmp
ret
stos
popa
adc
mov
nop
sub
sbb
inc
clc
bound
adc
pop
movs
xchg
add
out
ret
aad
fcom
mov
sbb
or
jbe
aad
push
xchg
repz
hlt
mov
shl
test
cmps
int3
outs
dec
adc
pop
imul
dec
and
push
pop
in
mov
das
jnp
or
xchg
in
mov
dec
mov
push
mov
outs
repnz
mov
xchg
add
xchg
mov
xchg
jge
sbb
outs
icebp
test
mov
imul
jne
or
mov
or
test
sar
adc
loop
ds
pop
cmp
(bad)
dec
sbb
mov
jmp
xchg
mov
add
scas
xchg
sub
xor
jb
mov
cmp
imul
push
aaa
dec
gs
ja
outs
rcr
adc
xchg
out
ret
jl
sar
das
lock
xchg
cmps
adc
adc
dec
xchg
mov
aad
mov
mov
sub
add
je
jnp
pop
push
mov
cmp
movs
aam
mov
(bad)
adc
pop
xchg
test
ficomp
pusha
(bad)
repz
mov
cmps
fist
inc
xchg
cmp
mov
call
mov
adc
mov
add
aad
rcl
and
stc
adc
add
xchg
mov
jle
out
or
mov
pop
stos
jnp
outs
cmp
shr
inc
xchg
iret
pop
jl
je
test
ins
neg
int3
jne
cmp
sub
dec
mov
add
mov
call
cmc
inc
xchg
sub
div
xchg
movs
cli
inc
and
into
and
rcl
test
fwait
sti
mov
mov
lods
scas
clc
adc
std
ficomp
frstor
and
in
lock
sbb
xor
test
pop
push
adc
je
data16
shl
pop
xor
int3
sbb
clc
mov
mov
push
jmp
pop
xchg
ror
adc
sti
test
mov
jbe
mov
sahf
pop
sbb
stos
mov
pop
mov
mov
aas
cdq
add
xchg
das
dec
je
nop
ins
arpl
adc
adc
shl
jno
add
xor
leave
xchg
sbb
out
jnp
jmp
mov
xchg
lods
mov
(bad)
adc
jo
pop
test
shl
xchg
and
mov
into
xchg
ja
dec
int3
ds
fs
setl
scas
scas
or
lds
pop
gs
jle
and
xchg
mov
xor
or
and
out
imul
lock
jne
call
aaa
lahf
mov
sbb
lods
mov
test
sub
sub
sub
mov
add
ja
cmc
xor
xchg
xchg
das
out
jnp
or
scas
xor
mov
stos
lock
xchg
jo
inc
pop
jmp
test
xchg
ja
pop
jae
mov
xchg
push
push
in
dec
push
adc
xchg
repz
fidiv
xchg
jecxz
inc
addr16
and
clc
xchg
push
sbb
inc
push
xchg
or
cmc
push
cmp
mul
cmovg
mov
test
cmp
xchg
jno
inc
cli
lods
jmp
outs
pop
xchg
imul
std
addr16
xchg
in
xchg
test
sub
xchg
sub
add
pop
enter
test
xchg
xchg
nop
in
imul
push
fmul
popf
xchg
and
xor
nop
xchg
jbe
aam
das
aaa
outs
fadd
popa
jge
aad
jg
pop
fistp
xchg
xor
fwait
cs
or
add
fsub
pop
repz
or
inc
ret
mov
add
nop
inc
mov
popf
pop
or
mov
sahf
test
inc
sbb
int
jle
add
xchg
int3
dec
mov
xchg
jns
adc
ror
vminsd
dec
xchg
jmp
jbe
bswap
fst
repnz
lods
xchg
cmps
xchg
adc
xchg
scas
xor
outs
ds
xor
sbb
jb
mov
jae
stos
pop
gs
cmp
dec
retf
xchg
ret
icebp
int3
addr16
js
rcl
cdq
mov
adc
xchg
adc
jno
xchg
out
mov
imul
aaa
xchg
or
outs
rcl
mov
xchg
ins
fist
xchg
add
inc
scas
xchg
push
fdivr
sbb
mov
mov
add
test
push
xchg
mov
sub
das
mov
mov
adc
into
pusha
test
mov
pop
inc
hlt
inc
movs
jae
shr
mov
inc
mov
inc
les
inc
mov
xchg
jp
mov
loope
xchg
pop
mov
cs
out
cmp
mov
(bad)
retf
and
loopne
pop
mov
xor
mov
int3
cmp
or
push
jle
pop
jb
(bad)
jmp
push
sbb
xor
adc
pop
fist
push
mov
sbb
or
icebp
xchg
in
push
mov
fwait
adc
push
xchg
jle
push
mov
mov
xchg
pop
mov
xchg
in
mov
adc
gs
xor
dec
shr
lds
fldcw
in
sbb
cmps
mov
call
(bad)
xchg
xchg
and
xor
xchg
cmp
sti
and
push
sub
cmp
popa
lahf
jo
dec
push
out
dec
mov
push
retf
push
adc
and
(bad)
jmp
enter
movs
mov
pop
cmps
xchg
repnz
aas
stos
xor
test
add
xchg
pop
jmp
xchg
dec
lods
inc
leave
(bad)
popf
sbb
inc
mov
sub
lock
mov
popa
popf
xchg
leave
or
or
push
pop
lds
pop
push
lods
add
or
jmp
ret
push
cmp
xchg
sbb
inc
xchg
sar
int3
pop
ret
jl
cli
or
daa
xchg
mov
cwde
lods
pushf
movs
pop
mov
jne
sysret
mov
jb
dec
xchg
(bad)
xchg
add
out
xchg
jg
adc
mov
dec
xchg
pop
push
outs
inc
dec
push
adc
fidivr
push
sub
jmp
fwait
popf
jg
pop
je
mov
lods
jnp
and
mov
xchg
arpl
mov
inc
mov
mov
loop
xchg
jb
or
sub
cwde
xor
push
jne
xchg
aam
jmp
pushf
cmp
lea
sub
or
es
adc
leave
lea
xlat
xor
mov
or
ins
fist
or
(bad)
div
xchg
add
push
outs
sub
xchg
das
movs
bound
adc
lock
dec
stos
or
mov
ins
xchg
pop
adc
rcl
xor
mov
iret
dec
stc
sbb
cdq
retf
idiv
jmp
and
xchg
lea
xlat
ficomp
in
frstor
mov
xchg
mov
iret
leave
lahf
icebp
retf
adc
or
in
out
arpl
std
xor
and
jo
ins
push
push
cld
xchg
xor
and
jnp
ror
je
int
mov
push
adc
imul
rcl
lahf
add
push
cmps
mov
enter
cmp
sbb
fbstp
ds
popf
push
jae
fs
dec
lock
add
icebp
inc
xchg
pop
pop
cmps
test
pop
shl
xchg
das
mov
jb
popa
das
test
push
call
and
jge
mov
icebp
sub
push
dec
(bad)
mov
dec
sbb
pop
jle
xor
mov
pop
cwde
cmp
std
lock
xchg
retf
(bad)
stc
aas
sub
mov
push
xchg
test
mov
mov
pop
(bad)
stc
xchg
sub
mov
cmp
fwait
lds
in
dec
movs
arpl
shr
jbe
dec
jo
fbld
pop
jmp
shl
(bad)
mov
inc
mov
aad
imul
xchg
(bad)
in
stos
mov
push
ds
test
lds
and
stos
jp
movs
shl
sub
push
cdq
xor
aam
loope
xchg
and
pop
adc
rol
test
or
or
lock
out
xor
not
dec
push
ja
xchg
std
stc
xor
inc
pop
pop
stos
or
push
xor
in
test
adc
mov
inc
pushf
xchg
push
pop
mov
inc
pop
aam
popf
mov
cli
ficom
movs
leave
xchg
outs
adc
mov
out
loop
int3
ror
fbstp
rcl
sahf
fcomp
repz
and
rcr
fs
arpl
or
mov
cdq
(bad)
and
mov
xchg
sti
ror
btr
and
retf
xchg
fwait
or
enter
or
mov
inc
gs
mov
adc
jbe
xchg
or
cld
xchg
aad
test
stos
pushf
nop
hlt
dec
(bad)
(bad)
mov
mov
mov
jle
leave
jbe
adc
sub
xchg
int
sbb
mov
ret
push
push
stc
xor
pop
lods
mov
loope
xchg
sar
adc
or
movs
and
cli
test
(bad)
cmp
adc
xchg
adc
mov
mov
movs
hlt
mov
loope
adc
push
dec
es
arpl
mov
xchg
jl
dec
or
in
pop
cs
imul
lods
push
xchg
into
xor
out
out
aad
sahf
push
loopne
(bad)
jne
add
adc
jns
in
fwait
mov
mov
adc
dec
xchg
aas
(bad)
fucomi
retf
hlt
xchg
sbb
pop
pop
ficomp
sub
rcl
ret
and
xchg
pop
sub
(bad)
jb
hlt
ret
xchg
shr
push
push
pop
cdq
sbb
xchg
ret
mov
sub
cli
sub
pop
adc
fcomp
push
je
mov
daa
or
popf
xchg
rcr
int3
pop
xchg
cmc
mov
test
mov
mov
add
loope
xchg
jle
cmp
mov
out
and
das
sahf
ss
xchg
stos
mov
xchg
je
cmp
pop
aas
iret
jp
jge
pop
cmp
and
xchg
mov
dec
pop
pusha
and
outs
int
mov
pop
je
push
xchg
rcr
movs
cwde
rol
jge
stos
retf
pop
mov
dec
xchg
cmps
or
dec
adc
mov
adc
push
xor
je
push
test
inc
shr
out
adc
scas
pop
in
dec
xchg
xchg
daa
lock
pusha
rcr
dec
ror
scas
mov
xchg
mov
hlt
xchg
lea
repz
xchg
sbb
(bad)
pop
and
dec
push
out
dec
adc
xchg
dec
bound
mov
xchg
pop
push
sbb
dec
or
jg
(bad)
jno
or
lods
test
gs
pop
movs
out
push
mov
in
(bad)
xchg
mov
test
adc
shr
nop
mov
push
push
mov
nop
out
rcl
jle
adc
cmp
lods
xchg
inc
pop
cdq
push
or
xchg
aas
int
pop
pop
mov
inc
add
xchg
dec
mov
jae
and
call
in
xchg
inc
(bad)
cs
icebp
retf
cmp
sar
pop
xchg
sub
daa
mov
mov
or
je
mov
mov
xchg
nop
cdq
aaa
outs
cli
(bad)
and
xchg
fwait
dec
les
dec
mov
into
pop
lahf
xchg
pop
or
mov
test
or
adc
push
sti
lahf
or
inc
dec
mov
sub
es
add
adc
pop
xchg
popa
xchg
sbb
loop
loope
scas
xchg
sbb
xchg
jg
xchg
jae
xchg
aam
and
test
cwde
adc
push
mov
xchg
or
xchg
xchg
pop
dec
loop
inc
int3
push
jb
or
cmp
xchg
aas
mov
cmps
movs
lahf
and
ret
mov
mov
loop
add
ins
mov
pop
mov
arpl
mov
and
jne
mov
imul
pop
gs
dec
test
scas
xlat
fs
push
ficomp
push
hlt
push
ss
cmps
xchg
aas
loope
popf
daa
outs
cld
cli
xchg
stos
int
in
pop
icebp
in
jge
das
push
stc
xlat
mov
push
xor
sbb
sbb
in
xchg
xchg
mov
xchg
scas
jl
pop
fs
mov
pop
xor
or
xor
fwait
mov
imul
xchg
mov
add
sar
lds
pop
sub
sub
sub
pop
xchg
outs
cmps
rcl
dec
xchg
and
gs
and
jmp
popa
sysexit
mov
std
hlt
cwde
dec
xor
mov
loopne
mov
xchg
xchg
idiv
cmp
ror
xor
mov
or
xor
loope
stos
push
mov
xchg
int
shr
inc
in
pop
cli
jnp
and
xchg
out
scas
dec
es
fst
xchg
sub
xlat
inc
rol
mov
push
jno
arpl
xchg
add
cmp
and
jmp
fisub
call
ret
inc
sahf
push
inc
xchg
stc
pushf
dec
pop
mov
dec
inc
cs
fisub
pop
push
ret
sbb
ret
jbe
xchg
jg
loop
mov
je
inc
scas
std
jp
pushf
adc
xchg
fdiv
mov
inc
sahf
les
push
and
xchg
es
pop
mov
mov
lock
mov
jp
sbb
(bad)
mov
mov
jl
xchg
ins
push
jp
dec
in
loope
into
shr
call
xchg
sub
push
xchg
jb
push
push
push
cdq
mov
aam
pusha
add
or
or
xchg
call
dec
xchg
repnz
cmp
xchg
data16
dec
dec
adc
sbb
jmp
cli
inc
xor
cld
mov
pop
xor
ret
retf
xchg
pushf
data16
mov
cmp
xchg
adc
mov
xchg
jne
mov
push
pop
push
pop
xchg
cld
shl
jmp
jne
add
jl
lea
sbb
cmp
fbstp
out
cmp
pop
push
mov
imul
sub
and
jl
adc
xchg
adc
and
push
push
jbe
das
fld
adc
outs
test
xor
popa
rol
sbb
test
mov
je
xchg
pop
(bad)
repnz
mov
and
pop
fwait
adc
ds
mov
icebp
push
retf
ret
das
inc
cmc
(bad)
call
aas
sub
mov
xchg
popf
div
jno
fist
sbb
(bad)
call
xchg
jge
ins
dec
std
mov
dec
or
popf
mov
dec
les
jp
pop
push
fs
jge
mov
mov
addr16
xchg
jae
out
jmp
or
retf
stos
sub
das
repz
pushf
aas
or
int
mov
fsubr
bound
jecxz
dec
xchg
fs
mov
rcr
xchg
push
test
jle
daa
ins
dec
xchg
push
pop
div
mov
pop
mov
addr16
sbb
in
xchg
idiv
in
jae
ret
fnsave
mov
push
int
xchg
cmp
mov
xchg
ins
popa
pushf
cmc
imul
mov
mov
jbe
pop
jge
dec
cli
lods
xchg
jb
icebp
sar
cs
lock
xchg
cli
arpl
dec
cmp
stos
pop
mov
add
nop
xchg
or
pop
lock
xchg
dec
out
jge
push
adc
or
adc
dec
dec
dec
sub
stos
mov
int
or
ja
inc
leave
sub
stc
enter
lock
sub
jmp
inc
xchg
mov
sti
xchg
sbb
mov
xchg
ret
adc
xchg
jno
mov
clc
pop
xchg
pop
in
and
shl
repnz
mov
sar
sbb
and
mov
xchg
pop
push
adc
test
lahf
test
loope
xchg
inc
js
retf
lods
ret
fst
jmp
inc
aas
ret
mov
xchg
jl
aam
and
pop
pop
rcl
push
add
aam
ror
fcmovne
xchg
arpl
out
shl
sbb
mov
popf
push
call
std
and
dec
mov
adc
aam
jmp
cdq
rcl
(bad)
sbb
daa
jmp
stos
call
sub
in
mov
dec
out
rcl
aad
xchg
jbe
jno
pop
test
das
xchg
addr16
inc
xchg
or
adc
xchg
sar
out
jns
pop
or
je
mov
mov
mov
ins
pop
daa
mov
fiadd
xor
shr
iret
stc
loopne
xchg
sahf
mov
int
(bad)
xchg
push
pop
mov
loopne
pop
out
adc
loop
pop
or
test
or
push
mov
sub
mov
scas
into
fild
cs
mov
adc
in
xchg
int3
sbb
ss
pop
and
or
mov
push
lahf
ror
lock
add
mov
dec
and
pop
test
outs
xchg
(bad)
adc
cdq
in
call
pop
retf
rol
jns
dec
pop
(bad)
pop
in
sub
mov
in
ins
add
dec
inc
inc
fnstenv
int3
not
sahf
or
mov
movs
xchg
dec
or
int
(bad)
xchg
fbstp
mov
xchg
sub
lahf
out
push
inc
(bad)
xchg
fprem
repnz
pop
test
sub
(bad)
push
arpl
sub
pop
adc
aaa
adc
and
xchg
in
pusha
call
scas
xchg
cwde
call
jl
fwait
pop
aad
fdivr
je
fbstp
lock
es
mov
xor
adc
addr16
sub
cs
lods
imul
mov
push
ss
inc
test
or
in
cdq
xchg
in
xchg
push
mov
mov
ss
jns
loopne
inc
xchg
jo
adc
movs
adc
jmp
faddp
repnz
inc
out
mov
fs
sub
jae
cwde
xchg
das
adc
mov
int
xor
inc
jae
xor
xor
ret
mov
shr
and
xchg
inc
aam
test
add
imul
xchg
push
test
fwait
or
test
xchg
pop
mov
repnz
cdq
pop
ss
lea
xor
mov
test
cdq
or
pop
or
jle
cmps
pop
cmps
xchg
mov
dec
test
int3
inc
mov
das
mov
cmp
xchg
mov
pop
or
jl
(bad)
cli
repnz
xchg
das
and
ss
mov
ror
stc
outs
jbe
xchg
xor
(bad)
leave
mov
movs
mov
and
push
sete
sar
xchg
add
jo
cmovg
outs
jle
xchg
sub
je
pop
xchg
int
jne
lahf
and
loope
xor
and
xchg
shr
mov
jmp
mov
std
loop
cmps
aaa
dec
and
mul
hlt
push
mov
inc
ret
sti
xor
mov
jle
adc
movs
mov
xor
test
push
cmp
call
xchg
pop
fisub
push
mov
sub
hlt
mov
mov
std
data16
mov
xchg
dec
call
xchg
inc
lock
and
(bad)
enter
xchg
mov
int3
sub
mul
cmc
push
outs
retf
pop
xor
cmc
xchg
sub
adc
jnp
sbb
sbb
sub
cmp
and
stos
sbb
push
sub
jns
dec
shl
iret
xchg
std
xchg
jl
repz
pushf
int
outs
adc
pop
add
jb
lahf
jg
test
pop
sahf
or
xchg
inc
lea
data16
int3
push
ins
fbstp
and
aaa
xchg
or
ja
adc
and
lahf
xchg
nop
cmp
push
add
cmp
cmp
pop
pop
fild
xchg
int3
mov
dec
cmp
or
shl
xchg
inc
mov
or
stc
xchg
hlt
test
stos
add
cwde
add
adc
sbb
jo
fld
and
add
mov
or
inc
fcom
jno
out
sti
xchg
add
mov
sub
mov
daa
(bad)
rcl
sub
stos
xchg
xchg
popa
int3
sub
mov
fdivr
sbb
jmp
xchg
out
and
xchg
mov
std
lahf
push
mov
dec
sub
push
xchg
fimul
(bad)
out
xchg
mov
push
popf
inc
mov
dec
or
in
adc
nop
jge
mov
xchg
test
push
inc
mov
jecxz
fdivr
aam
jo
xchg
shl
std
xor
into
add
or
jb
sub
pushf
xchg
mov
(bad)
pop
test
lea
popf
xchg
scas
cmp
retf
jle
imul
mov
sahf
mov
adc
jo
arpl
jno
jg
mov
inc
ds
in
sbb
(bad)
mov
mov
stc
aam
mov
xchg
pop
out
mov
xchg
mov
or
nop
idiv
jbe
mov
xchg
and
(bad)
xchg
aas
popf
pop
push
mov
fisttp
fs
sub
cmps
stos
test
aam
sahf
xor
xchg
hlt
cmps
jo
dec
gs
cmp
and
je
xor
(bad)
mov
outs
pop
scas
dec
cmp
dec
xchg
jne
jo
cs
(bad)
push
xadd
imul
call
movs
add
xchg
xor
mov
xchg
cs
daa
(bad)
fcom
mov
inc
mov
leave
xchg
adc
xchg
adc
jle
stos
call
mov
jmp
adc
mov
in
xchg
cwde
cmp
ss
push
mov
mov
sub
cmp
cmps
cmc
xchg
sub
xchg
out
pop
stos
push
fcom
or
aam
xchg
mov
stos
xchg
mov
xchg
sbb
xor
xchg
sub
jns
adc
dec
pop
mov
mov
lods
push
push
cmp
adc
xchg
pop
jb
mov
arpl
test
mov
scas
xor
pop
lock
mov
je
mov
mov
fwait
add
sub
in
add
xchg
push
(bad)
vshufpd
jo
dec
xchg
pop
or
fimul
xchg
ins
xchg
inc
pop
mov
mov
dec
cmp
add
and
adc
popf
inc
xchg
shr
retf
jg
cs
mov
xchg
(bad)
mov
cli
xchg
mov
xor
pop
xchg
inc
sub
add
xchg
fmul
inc
sub
xchg
rcl
bound
xchg
cmp
clc
scas
adc
cdq
xchg
sub
hlt
imul
fdiv
xchg
ds
xchg
lahf
sahf
mov
loope
rol
int
cld
out
ficom
jg
cmc
mov
out
jne
add
mov
jb
xor
adc
lods
and
mov
outs
inc
push
inc
adc
enter
pop
jnp
into
jecxz
mov
mov
cmp
add
ret
xchg
push
shl
mov
popf
mov
pop
pop
test
pusha
jge
xchg
daa
cli
mov
jb
ror
dec
adc
and
or
jecxz
lea
xchg
inc
retf
pop
pop
hlt
rcl
ret
and
push
or
inc
les
idiv
rcr
or
jae
mov
aas
xchg
cmp
stos
push
jp
push
xchg
xor
(bad)
sub
pop
cs
rcl
rol
xor
mov
ficom
mov
fwait
xchg
nop
repz
xchg
js
and
jmp
(bad)
xchg
fidivr
xlat
in
xchg
jg
or
mov
cmp
inc
adc
clc
or
mov
iret
sbb
ins
jno
cmp
outs
ffreep
enter
mov
repz
nop
ja
jle
in
mov
xchg
shl
ds
lds
inc
jns
stos
mov
cdq
cmp
inc
xchg
jecxz
jne
mov
dec
sub
lock
xchg
int3
push
rcr
sub
add
xchg
sti
adc
(bad)
xchg
inc
and
push
push
xchg
cmp
inc
in
std
jbe
xlat
xchg
and
loop
fsub
popf
rcl
xchg
jge
leave
cmps
jmp
scas
sbb
or
mov
les
jnp
mov
(bad)
(bad)
adc
xchg
sub
xchg
cmc
jns
ret
in
mov
add
fwait
les
or
inc
cwde
dec
imul
in
lods
ds
xchg
and
xchg
(bad)
cmp
ss
xor
or
(bad)
lea
ret
sbb
adc
(bad)
and
pop
movs
imul
sete
test
mov
nop
repnz
push
movs
ror
xchg
stc
stos
(bad)
mov
sbb
xchg
fsubr
pop
xchg
js
or
out
pop
adc
jl
sbb
inc
pop
mov
adc
jge
push
icebp
or
mov
cmp
shr
rcl
jg
aad
sbb
(bad)
xchg
ins
or
repz
imul
jb
mov
rcl
mov
icebp
sub
fnstsw
xor
add
ins
sete
out
mov
bnd
ins
add
xchg
xor
mov
xchg
sbb
xchg
daa
(bad)
(bad)
xchg
lahf
inc
push
loope
push
adc
xchg
inc
ja
maxps
jle
ds
xor
(bad)
aaa
xchg
jge
mov
cwde
stos
push
jae
jnp
test
add
pusha
inc
and
pop
lods
xchg
adc
mov
dec
push
xchg
sbb
or
mov
add
jmp
dec
iret
xor
lods
mov
outs
push
jmp
inc
dec
dec
pop
xchg
pusha
or
popa
out
out
xchg
mov
leave
rcr
mov
call
add
sub
xchg
scas
xchg
pop
(bad)
jmp
sbb
outs
push
shl
add
rcr
xchg
test
cmp
pop
xchg
mov
pop
and
movs
xor
inc
push
loope
adc
mov
(bad)
jae
cmps
push
out
xchg
mov
dec
ret
scas
cmc
or
lods
inc
in
cdq
fdiv
add
cmp
pop
xchg
loop
(bad)
dec
cmp
stc
cmps
push
mov
fldcw
mov
mov
sti
push
push
hlt
fistp
ja
lea
iret
ret
gs
xchg
jae
jns
dec
push
push
mov
je
pop
pop
sbb
(bad)
xchg
mov
jae
mov
fs
ror
out
dec
xchg
out
aas
jb
adc
(bad)
sbb
bound
mov
in
push
ror
outs
adc
in
js
xor
add
xchg
jp
pop
inc
aam
or
cli
inc
adc
xchg
mov
jecxz
inc
frstor
mov
xchg
fist
pop
mov
mov
mov
jae
push
mov
sub
mov
shl
xchg
daa
jge
push
enter
pushf
jmp
in
and
add
adc
hlt
and
inc
dec
push
pop
jl
mov
hlt
mov
nop
xchg
pushf
jge
push
push
pop
jbe
fwait
retf
pop
jnp
adc
(bad)
into
aas
xchg
xor
std
stc
pop
xor
sbb
fwait
icebp
or
cld
xchg
push
pushf
ss
push
mov
or
mov
daa
test
sbb
or
xchg
dec
mov
mov
xchg
(bad)
popf
cwde
xchg
sub
inc
mov
sbb
repnz
adc
xchg
shr
adc
cli
pop
xchg
push
movs
loope
lds
scas
xchg
into
push
xor
xchg
xor
mov
pop
add
push
xchg
adc
push
push
dec
imul
xchg
pop
hlt
add
(bad)
adc
xchg
xchg
or
add
in
imul
(bad)
iret
sub
sub
mov
xchg
cwde
mov
ja
fwait
adc
or
jae
cmp
adc
jnp
add
mov
stos
int3
fld
bound
shl
mov
and
rcl
xchg
sub
in
fwait
ja
nop
pop
test
and
dec
call
ss
iret
add
nop
out
xchg
ds
xchg
mov
stos
jle
mov
mov
sub
and
inc
xchg
cmp
mov
xchg
out
cmp
ins
xchg
in
push
rcl
stos
xor
xchg
shl
jecxz
mov
dec
sbb
push
mov
cmp
imul
pop
nop
pusha
xchg
jno
stos
lds
int3
cmp
stc
rol
mov
dec
xchg
les
loop
mov
pop
fs
mov
xchg
fsubrp
shl
dec
and
xchg
cmps
dec
push
inc
xchg
mov
and
sti
adc
arpl
push
and
mov
rcl
mov
add
xchg
pop
gs
xchg
xlat
push
sbb
xchg
sub
and
jbe
adc
stos
jo
jl
aad
inc
cmp
into
cmp
not
adc
push
popa
adc
les
jb
(bad)
xlat
inc
inc
push
scas
xchg
int
(bad)
push
adc
data16
fmul
jnp
xchg
or
lods
mov
xchg
xchg
or
xchg
aas
sub
inc
test
adc
cmp
sbb
shr
mov
add
push
or
(bad)
test
pop
repnz
xchg
inc
jg
imul
jmp
push
xchg
frstor
adc
xchg
adc
cmp
int3
inc
adc
fnstsw
fsubp
inc
repz
xchg
mov
sub
and
xchg
pop
into
dec
add
es
in
fwait
(bad)
pop
jmp
arpl
mov
push
mov
push
addr16
mov
clc
pop
mov
gs
hlt
dec
push
push
jo
xchg
sub
push
mov
fnstenv
jns
mov
sbb
je
lods
out
mov
div
mov
call
xchg
or
xor
jle
xchg
ror
cs
into
out
jns
pop
mov
xchg
sub
push
shl
repnz
rcl
imul
xchg
retf
push
test
mov
(bad)
fidivr
jo
int3
xchg
adc
sbb
xchg
retf
clc
and
push
sahf
jmp
pop
push
sbb
mov
mov
dec
movs
fnsave
pusha
push
xchg
add
js
and
jl
scas
xchg
inc
or
fsub
cmp
and
aaa
jge
sub
or
addr16
in
sbb
push
(bad)
(bad)
jg
dec
push
iret
ss
int
in
int3
ret
pop
lea
xchg
imul
dec
std
fdivr
test
aas
test
and
xchg
sbb
sub
out
mov
cld
mov
popaw
int
fld
dec
cmp
pop
cmps
mov
jo
pop
call
push
je
sbb
adc
adc
les
xor
jp
aaa
xchg
stos
imul
mov
push
js
ins
mov
jae
xchg
outs
imul
dec
scas
in
xor
cdq
jge
cs
cdq
adc
int
ja
clc
in
popa
push
jmp
call
push
xchg
mov
das
jbe
lock
in
xchg
cs
mov
cmc
pushw
cmp
repz
clc
loop
jp
xor
push
fwait
mov
test
fdiv
sub
dec
out
sub
int3
jl
adc
ret
ins
sbb
xchg
mov
mov
out
outs
hlt
or
push
ss
ja
inc
inc
jb
jg
xchg
mov
dec
popa
pop
iret
(bad)
fcom
xlat
inc
and
jmp
cmps
push
xor
sbb
mov
push
in
pop
into
jl
adc
cs
mov
push
or
xor
out
mov
in
push
out
jne
or
cli
cdq
adc
out
push
inc
xchg
fwait
sbb
(bad)
stos
ja
movs
xchg
test
mov
iret
mov
adc
adc
call
nop
and
add
lods
mov
mov
mov
in
jo
rcl
add
jmp
mov
(bad)
gs
enter
mov
xchg
repz
outs
push
xchg
push
nop
ret
or
push
xchg
pop
push
push
shl
xchg
ja
loop
mov
stos
sbb
fst
imul
fnstenv
outs
push
(bad)
pop
cli
xchg
sbb
mov
adc
push
push
mov
retf
and
mov
jge
loope
icebp
cwde
mov
je
js
je
xor
mov
shr
shl
jbe
fwait
das
cmps
stos
and
xchg
arpl
lea
dec
mov
xor
xchg
es
rcl
inc
inc
mov
lea
cmp
loopne
(bad)
sbb
push
xchg
ds
out
pop
add
imul
pop
adc
cmp
fidivr
push
in
retf
(bad)
xchg
mov
and
aam
aaa
xchg
clc
repz
pop
xchg
push
or
xchg
dec
xchg
es
inc
dec
push
or
loope
mov
sahf
xchg
xchg
(bad)
adc
das
mov
movs
in
xchg
dec
pop
pop
adc
and
hlt
repz
push
int3
push
scas
pop
xchg
mov
add
mov
add
fdiv
scas
loope
fdiv
and
cmc
pushf
inc
xchg
out
sub
je
into
inc
call
popa
dec
and
rcl
inc
fsubr
xchg
cmps
std
sub
fcmovb
add
dec
lods
dec
(bad)
dec
xchg
das
push
mov
fild
call
aaa
fidiv
out
jbe
mov
push
pop
test
sub
dec
mov
mov
into
leave
ja
cmp
xor
cwde
xchg
mov
ror
cwde
test
adc
mov
xchg
dec
add
sahf
outs
inc
mov
adc
sbb
in
xchg
shl
fisttp
jbe
sbb
rol
mov
in
sti
fwait
sub
xchg
fidivr
fs
inc
push
dec
rcl
leave
push
xchg
bound
inc
push
shr
popa
lods
out
lock
shr
cmp
and
push
xlat
(bad)
xor
xchg
ret
idiv
scas
je
sbb
arpl
push
jg
jl
dec
inc
xchg
fdivr
popf
xchg
pushf
and
mov
xchg
add
push
movs
(bad)
(bad)
xchg
pop
xchg
icebp
fild
mov
sbb
daa
mov
mov
mov
cmp
pop
cld
scas
inc
movs
inc
xlat
cmp
in
sbb
maskmovq
not
xchg
fwait
jp
out
mov
mov
lds
outs
pop
mov
sub
stos
push
xchg
jge
jnp
repnz
xchg
sbb
xchg
sbb
push
pop
mov
xchg
fmul
aaa
xlat
add
sbb
fld
leave
in
(bad)
cdq
adc
push
dec
xor
sub
xchg
js
mul
xchg
mov
adc
fs
xchg
jne
aam
out
fwait
sahf
mov
lds
mov
sub
mov
cmps
neg
xchg
test
or
xchg
jl
aad
adc
iret
xlat
loopne
xchg
or
jbe
dec
mov
call
nop
ret
dec
mov
lahf
mov
add
ss
dec
out
lds
rcl
jg
xchg
shr
inc
inc
xchg
mov
call
cmp
nop
imul
into
xchg
cmps
out
aaa
(bad)
fidivr
mov
stc
pop
shr
dec
mov
pusha
xor
gs
dec
jns
call
inc
mov
add
pop
ror
iret
jno
arpl
lock
mov
pushf
xchg
mov
inc
test
adc
and
adc
test
xor
xchg
cmp
bound
ja
xchg
xchg
dec
sbb
and
push
dec
pushf
fistp
cmps
jmp
xchg
sbb
sbb
mov
pop
ja
aam
xchg
repz
ins
leave
in
retf
sub
pop
jmp
inc
movs
sbb
outs
jg
cmp
ret
add
cdq
movs
ds
push
gs
test
xchg
rcl
nop
jns
cmp
xchg
mov
inc
stos
cs
sbb
push
(bad)
and
adc
imul
xchg
das
xor
push
pop
jmp
push
push
(bad)
popa
or
cdq
out
cmp
fdiv
push
dec
adc
mov
push
imul
dec
inc
push
mov
shr
cs
fild
xchg
sbb
(bad)
xchg
pavgb
in
sbb
enter
jnp
not
mov
cmc
int3
cmp
and
in
pop
daa
xchg
lahf
jle
push
loope
pushf
mov
out
fs
and
push
dec
dec
jmp
add
rcl
dec
xchg
sbb
lods
retf
cmp
or
adc
stc
xchg
out
pop
sbb
dec
test
adc
aad
lods
ret
push
mov
inc
fwait
or
add
mov
clc
push
xchg
push
add
xor
inc
and
lds
std
dec
push
cmp
cwde
cmps
dec
test
sbb
dec
push
in
mov
cmp
xchg
stc
sahf
ffree
fisub
xchg
xor
mov
adc
push
jl
int3
sbb
jb
mov
jns
fs
loop
add
xchg
lds
jecxz
add
test
adc
stos
xchg
pushf
inc
xchg
add
shl
sub
je
jmp
mov
mov
cld
sbb
lods
mov
push
adc
mov
cmp
xor
sub
push
fisttp
jo
sub
imul
loop
int
into
xor
adc
push
xchg
pop
ds
test
pop
push
cdq
shr
inc
pop
sti
in
xchg
mov
nop
pop
not
ftst
loope
shr
inc
(bad)
jbe
add
into
add
adc
adc
loope
pop
mov
ror
test
xchg
push
xchg
dec
add
adc
loop
je
sbb
sbb
arpl
xor
lahf
mov
test
xchg
call
pop
shl
pop
jbe
or
sub
not
or
xchg
shr
mov
(bad)
fwait
cmovg
aam
adc
(bad)
xchg
out
es
and
xchg
push
xchg
xor
adc
enter
xor
dec
ins
xor
shl
jle
inc
imul
xchg
fstp
jbe
xor
jnp
dec
inc
push
inc
inc
add
aam
test
sbb
jmp
add
and
xchg
aaa
mov
xor
cmp
out
fidivr
imul
or
cmp
shl
pushf
retf
gs
inc
or
add
cli
inc
xchg
jb
inc
xchg
jne
lock
dec
mov
xchg
js
sbb
push
je
mov
test
aam
xchg
ror
sbb
fs
sbb
cmp
dec
inc
xchg
jl
xor
mov
pop
dec
xor
mov
push
sbb
rcl
xchg
lods
je
call
inc
scas
xor
aam
jns
inc
sbb
sti
hlt
test
imul
cdq
sbb
in
call
int
xor
fs
push
xchg
leave
or
or
retf
inc
aas
out
les
push
cmp
cmps
xchg
movs
fisttp
cmc
cwde
and
repnz
gs
ret
xchg
jmp
and
pop
jnp
test
iret
pop
fwait
pop
outs
push
push
aad
and
xor
test
out
in
fnclex
dec
movs
pop
xchg
(bad)
mov
test
xchg
xchg
dec
adc
add
ds
add
lds
sbb
push
xchg
inc
fwait
add
enter
aam
add
inc
icebp
bnd
cmc
push
jmp
push
scas
or
rcl
mov
pop
xchg
bound
dec
jb
es
int3
jno
adc
iret
mov
xchg
lock
add
loopne
enter
lahf
pop
mov
lock
imul
push
xchg
jle
div
xchg
inc
sub
mov
stos
add
call
sbb
mov
je
out
xor
popa
into
lock
and
(bad)
popf
je
mov
rcl
pop
scas
pusha
cmp
imul
out
xor
mov
and
sbb
dec
mov
imul
fisubr
xor
hlt
xchg
pusha
call
push
jns
ins
pop
clc
push
jo
int
pop
je
pop
movs
pusha
lds
sub
sub
arpl
mov
ins
and
mov
adc
adc
in
xchg
cmp
out
xchg
aad
mov
xchg
and
loop
test
in
xchg
sub
fsub
jnp
ss
pop
daa
xchg
data16
sti
inc
popf
scas
xchg
es
cmp
clc
mov
adc
or
popa
push
and
loope
cmp
shl
pop
xchg
call
cld
xchg
pop
push
sar
or
sahf
pop
pushf
adc
loope
ror
xchg
(bad)
or
adc
addr16
push
adc
ins
ja
jle
iret
lea
hlt
shl
in
add
jg
rcl
jmp
mov
push
(bad)
fmul
pop
xchg
fisttp
lods
rcr
daa
xchg
jmp
aam
fs
mov
cdq
mov
push
fist
fnstcw
dec
lock
(bad)
xchg
jb
jg
inc
dec
enter
pop
lahf
xchg
lock
aad
xchg
les
outs
xor
jno
repz
push
cmp
sbb
outs
adc
int3
jle
inc
test
xchg
test
xchg
sub
lock
or
jnp
jb
sbb
pop
cmp
jl
adc
(bad)
push
sbb
loope
xchg
and
out
retf
push
rcr
jae
mov
jae
push
jbe
lds
inc
les
mov
movs
rcl
(bad)
mov
push
and
repnz
jnp
scas
jmp
or
pop
lods
mov
mov
xchg
in
add
cli
cmp
(bad)
or
ror
jne
jo
adc
(bad)
inc
jae
xchg
cmp
je
scas
sbb
mov
adc
xchg
(bad)
mov
lea
fwait
out
inc
das
push
push
adc
push
ret
int3
xchg
and
fcomp
repz
xchg
lock
div
imul
pop
mov
mov
push
dec
cli
neg
xchg
out
jmp
(bad)
sbb
mov
movs
adc
xchg
rol
in
xor
xchg
rcl
stc
lock
and
xchg
mov
push
movs
dec
push
xchg
mov
test
jl
push
scas
pop
imul
fld
xchg
out
sub
imul
out
cmp
xchg
(bad)
lahf
sub
xor
push
cmp
xchg
xchg
mov
div
jecxz
push
sbb
stos
adc
icebp
hlt
sti
cmc
mov
mov
ret
cmp
xchg
lss
add
aaa
xchg
jns
adc
pop
inc
scas
add
mov
outs
xlat
push
xchg
iret
adc
add
ja
out
aad
add
icebp
mov
xchg
sti
pusha
xor
pop
test
xchg
out
cwde
pop
jge
rcl
xor
jmp
push
sub
mov
adc
or
retf
hlt
fnstcw
es
mov
out
lahf
add
retf
xor
test
in
repz
dec
pop
and
xchg
fwait
pop
xor
jmp
cmps
add
xchg
lods
imul
dec
fs
xchg
add
int3
icebp
xchg
push
(bad)
push
iret
popa
mov
cmp
mov
aam
je
push
shl
rcl
scas
mov
xchg
in
pop
es
call
fwait
ins
lock
aaa
(bad)
(bad)
xchg
es
push
push
jo
inc
and
fst
and
test
shr
and
fdiv
in
repz
cmp
cmp
lods
mov
cld
cmps
pusha
xchg
(bad)
loopne
dec
jo
add
jmp
sub
mov
add
xchg
jmp
mov
(bad)
cmc
stc
adc
push
in
loopne
sbb
cmp
push
loope
shl
add
rol
in
das
ficom
lock
push
scas
ret
xor
xchg
sbb
xchg
mov
fisttp
mov
mov
rcl
jne
xchg
nop
fistp
add
jno
xchg
out
imul
sar
jbe
jmp
cdq
in
repz
xchg
sub
sahf
in
in
dec
out
xchg
in
inc
sbb
imul
imul
and
mov
and
xchg
xchg
xor
jmp
adc
pusha
nop
in
pop
jo
mov
test
mov
shr
mov
mov
cmp
inc
aam
ins
les
cdq
add
mov
cmc
outs
xor
and
add
xor
sbb
(bad)
ret
xchg
adc
or
fld
(bad)
fwait
in
inc
jns
and
push
mov
mov
rol
into
xchg
mov
nop
jns
add
lods
loopne
aad
jge
je
adc
xchg
adc
jo
xchg
adc
arpl
dec
mov
xchg
dec
aas
xor
mov
scas
fwait
cld
push
mov
vpmaxsw
mov
pop
adc
sub
shr
xchg
inc
jnp
movs
or
sub
push
das
adc
mov
xchg
hlt
adc
out
dec
xchg
and
xchg
cdq
pop
fst
int
stc
push
xchg
ret
mov
ja
adc
push
mov
mov
xchg
pop
fwait
and
iret
jle
xchg
sbb
add
dec
dec
jns
sbb
in
(bad)
xchg
pop
xchg
push
adc
or
lods
dec
xchg
mov
xchg
adc
hlt
movs
pop
xchg
xchg
mov
das
enter
fist
adc
nop
je
xchg
int
into
push
shr
fisub
inc
or
adc
push
xchg
and
mov
mov
call
sub
leave
adc
in
(bad)
cmp
pop
lahf
fwait
xchg
add
clc
test
lods
sub
test
out
loopne
movs
xchg
movs
fsubr
fisub
jge
push
js
jo
icebp
cwde
pop
mov
pop
sub
mov
inc
xchg
pushf
jnp
aaa
out
aad
jno
fs
xor
or
nop
sub
push
fsubr
xchg
les
fstp
mov
push
dec
xchg
and
aam
jl
xchg
cmp
pop
nop
cvtps2pd
xchg
mov
gs
movs
adc
and
xlat
fmul
cmp
jns
jmp
add
scas
icebp
xchg
pushf
cmps
nop
dec
(bad)
or
ror
test
call
push
dec
lock
xchg
pusha
fisubr
sbb
xchg
and
xchg
fldenv
push
adc
add
xor
jb
neg
imul
jg
mov
iret
dec
and
dec
cdq
or
adc
push
je
lahf
(bad)
cs
jmp
xchg
fstp
lahf
add
lods
scas
test
das
push
call
push
in
not
xor
xchg
add
int
jbe
xchg
addr16
lahf
ror
dec
mov
mov
leave
ret
outs
mov
dec
xor
push
push
fwait
xchg
pop
popa
lods
mov
shl
cmp
pop
rcl
sbb
add
cmp
xchg
adc
push
xchg
sahf
lea
cmp
cld
xor
cmp
or
push
jae
and
ins
shl
mov
mov
lods
adc
fisttp
xchg
bound
iret
and
sbb
test
leave
fld
rol
les
jl
rcr
ror
adc
ja
pushfw
jg
xchg
outs
pop
lds
aad
enter
and
ins
mov
xchg
and
out
fsubr
scas
add
add
popf
xchg
rcl
mov
stos
and
jg
fwait
outs
push
pop
xchg
mov
dec
adc
pop
mov
in
mov
call
mov
mov
xchg
jle
fwait
push
xchg
stc
leave
loope
(bad)
inc
stos
repnz
mov
daa
shl
cli
push
cwd
jmp
fcomp
retf
ucomiss
lock
jno
int
pushf
xchg
rcr
mov
xchg
addr16
aas
xor
or
mov
aam
cmps
mov
loope
mov
(bad)
out
mov
xchg
push
ins
dec
sahf
pop
push
mov
iret
jae
cmp
addr16
add
movs
push
ret
movs
lods
lahf
mov
neg
xchg
jmp
mov
je
sti
xchg
pop
xchg
xchg
jp
call
xchg
xchg
dec
adc
dec
test
cld
adc
fs
hlt
mov
stc
push
xor
push
xchg
test
out
xor
pop
inc
jne
mov
sbb
imul
retf
push
je
imul
ja
repz
xchg
and
sbb
jne
fldenv
ret
sar
lea
cmp
(bad)
sahf
jbe
push
sbb
jnp
mov
pop
scas
mov
sbb
fwait
ins
jnp
aas
je
cmc
rol
in
cli
dec
lea
xchg
jno
outs
sub
mov
hlt
pop
xor
cwde
adc
dec
dec
add
daa
mov
or
push
mov
mov
xchg
pop
jb
dec
cdq
and
xchg
repnz
jge
pop
sbb
pop
adc
mov
jae
(bad)
dec
sbb
xchg
and
mov
push
iret
push
leave
sub
xchg
das
fld
push
xchg
sub
jns
dec
sub
nop
fstp
aam
std
add
ja
sub
popf
xchg
cmp
ret
jo
loop
push
xchg
and
scas
imul
ror
pusha
sub
xor
cmp
push
mov
aam
xchg
(bad)
stc
and
rcl
jp
shl
pushf
lods
sbb
mov
xchg
dec
daa
test
xchg
sbb
call
std
inc
inc
mov
ins
jg
inc
dec
xchg
mov
mov
xor
stos
cmp
test
iret
pop
cmc
mov
gs
pop
cdq
push
sub
loope
and
dec
or
adc
xchg
movs
call
adc
out
adc
xchg
pop
mov
sub
shr
mov
gs
xchg
xchg
mov
ds
mov
aad
jb
aam
in
cld
jb
xchg
xchg
fmul
jecxz
xchg
xchg
xor
cli
xchg
std
jbe
dec
add
sbb
or
pop
popf
in
jnp
xchg
leave
ins
rsqrtps
out
xchg
and
adc
rcr
cmp
scas
add
push
das
in
sbb
clc
xor
pop
out
fs
inc
sbb
xchg
retf
mov
dec
sub
xchg
rcl
and
iret
dec
mov
inc
and
push
clc
xchg
xchg
imul
mov
movs
mov
pop
ins
mov
push
add
ds
xchg
cmps
fcmovnb
push
sar
jbe
cs
mov
mov
sub
xchg
scas
lds
push
sub
int3
in
xchg
dec
xor
push
movs
aaa
mov
scas
ss
mov
pop
mov
pushf
xor
(bad)
aas
retf
mov
out
cmp
cmps
xor
cwde
nop
adc
pushf
push
and
xchg
fcomp
int3
outs
pop
push
add
inc
xchg
hlt
popa
in
sub
add
cmp
adc
add
in
mov
adc
jmp
je
stc
or
ins
loopne
les
adc
stos
push
and
sub
in
pop
mov
(bad)
adc
ret
xor
mov
bound
rcl
mov
push
fwait
add
push
out
movs
mov
sbb
mov
xchg
in
sub
mov
dec
push
jle
xchg
xor
sub
and
xor
in
sub
fidivr
out
outs
dec
adc
(bad)
retf
adc
mov
in
cmp
adc
mov
sbb
mov
fwait
loopne
aas
sti
mov
call
mov
inc
in
mov
add
ins
(bad)
popf
cmps
xor
or
mov
ja
adc
jns
cmps
lods
cmp
xchg
inc
aam
sbb
push
pop
xchg
fisubr
fisubr
scas
int3
gs
push
jnp
xchg
nop
pushf
mov
or
sbb
es
mov
dec
mov
add
jne
addr16
sub
cmp
mov
adc
(bad)
pushf
xchg
sbb
push
test
shl
shl
xchg
outs
mov
fistp
push
jmp
or
in
fldpi
or
loope
cmc
or
out
sbb
xor
xchg
jmp
(bad)
ficomp
idiv
jl
xchg
ss
push
js
fild
xchg
cmps
cmp
rcl
gs
jmp
push
iret
imul
push
mov
or
fwait
(bad)
mov
ins
std
and
dec
adc
cmp
in
int
mov
cmp
loope
jg
adc
xchg
xchg
jg
dec
add
xchg
aas
nop
jl
stos
clc
outs
sub
stos
mov
mov
lock
das
jle
sbb
cmps
fabs
mov
inc
inc
js
cmps
sbb
(bad)
adc
pop
lods
call
and
xchg
imul
out
sub
xchg
aam
dec
fs
in
xchg
inc
movs
sbb
adc
or
push
mov
xchg
dec
scas
test
pop
cmp
xchg
adc
inc
(bad)
mov
xchg
and
jb
xchg
and
(bad)
cld
and
cmp
mov
fimul
xchg
mov
popa
mov
mov
add
or
lahf
leave
xchg
fidiv
jmp
sti
add
fsub
add
out
and
jl
xchg
and
dec
xchg
cmc
repz
inc
mov
into
retf
mov
lods
cmp
jecxz
call
and
ss
call
pusha
pop
outs
fwait
pop
add
and
dec
sahf
imul
stos
xchg
and
stc
(bad)
jno
add
sbb
adc
in
arpl
iret
sub
in
cdq
push
es
push
push
cmps
mov
xchg
add
dec
jl
mov
out
push
sub
rcl
xor
pop
das
imul
xlat
or
mov
xor
hlt
out
sbb
cdq
mov
adc
les
jp
and
cmp
jle
gs
xchg
xchg
les
sar
inc
jge
(bad)
arpl
in
jg
xchg
sub
mov
adc
pop
add
jb
xchg
xchg
xor
jb
adc
add
lods
out
stos
mov
dec
sbb
cmp
inc
test
imul
rcl
jno
xchg
popf
jne
sar
mov
xor
(bad)
inc
or
xchg
das
arpl
mov
xchg
adc
cmp
mov
xchg
inc
push
data16
jns
das
pop
mov
addr16
mov
dec
cmp
test
sub
out
inc
sbb
dec
adc
repz
adc
or
xchg
xlat
jb
mov
lds
retf
stos
inc
xchg
out
inc
add
mov
arpl
pop
ror
push
imul
mov
cmp
mov
inc
hlt
xchg
cmc
inc
xor
xchg
inc
jp
dec
ret
gs
je
xchg
das
cmp
(bad)
lock
stc
xchg
push
iret
call
xchg
lods
cmp
ss
lds
push
mov
aas
fwait
aad
mov
cdq
clc
sbb
div
add
inc
mov
rcl
adc
dec
dec
imul
xchg
push
pusha
add
cdq
scas
jle
sub
stc
sub
push
sbb
push
mov
push
xor
cwde
shr
xor
push
repz
les
sub
inc
imul
mov
xchg
fsubp
or
lahf
fstp
xchg
cmps
jmp
dec
dec
xchg
pop
cmp
add
(bad)
out
xchg
inc
(bad)
sbb
in
rcl
adc
out
test
dec
popf
xchg
cmps
inc
sahf
fidiv
bound
inc
in
(bad)
xlat
retf
(bad)
shl
add
addr16
xchg
sahf
sub
mov
xchg
in
imul
xchg
push
and
push
je
fs
add
pop
dec
popw
inc
lahf
adc
xchg
mov
or
rcl
mov
repnz
(bad)
(bad)
ds
mov
mov
push
push
lahf
xchg
retf
js
xchg
jge
cli
pop
mov
or
push
lods
rcr
add
push
and
ror
bnd
bound
push
adc
xchg
mov
xor
cmps
add
jnp
mov
neg
jbe
mov
xchg
js
pop
adc
jecxz
les
out
cmps
popf
xchg
cs
ins
pop
loopne
ins
jle
or
(bad)
ror
cwde
or
cmp
pop
pop
mov
adc
inc
loope
xchg
adc
fmul
cmp
in
sub
sub
(bad)
rcl
mov
aas
mov
push
or
pop
pop
cmps
loopne
xor
call
fwait
xchg
jb
jmp
cli
add
xchg
int3
shr
inc
jbe
add
xchg
aam
outs
js
retf
dec
mov
sbb
xor
sbb
fmul
clc
pop
pop
xchg
mov
mov
(bad)
sar
sbb
fs
cmp
stos
lods
pop
mov
inc
xchg
adc
addr16
push
xchg
xor
popa
mov
and
xchg
das
xor
outs
lods
push
cli
push
xchg
iret
jne
sbb
xchg
cdq
jns
jno
pop
(bad)
xchg
fbld
mov
xchg
ficomp
repz
call
bndldx
inc
bound
icebp
mov
push
xchg
adc
push
pop
jns
loopne
das
xchg
push
int3
push
sbb
adc
pusha
div
pop
sub
cmc
fs
inc
adc
or
ror
jne
xchg
fdiv
sar
outs
sub
dec
xchg
xchg
test
xchg
sbb
ror
in
xchg
jo
ins
xchg
ds
sub
retf
sahf
js
dec
and
into
in
scas
mov
rcl
mov
test
neg
pop
(bad)
push
xor
mov
ret
jle
iret
enter
pop
or
xchg
jbe
jns
clc
xor
push
xchg
adc
mov
addr16
xor
mov
nop
loop
popf
pop
inc
ins
xor
cmp
aad
adc
jp
lahf
or
fisttp
mov
xchg
gs
ins
xor
jg
push
ret
sbb
cmps
push
cmp
(bad)
not
mov
or
add
mov
xchg
inc
inc
adc
xchg
into
xchg
or
dec
inc
push
sub
push
xchg
mov
mov
fimul
mov
mov
or
xor
sbb
jmp
js
imul
xlat
add
out
aaa
retf
xchg
shl
mov
push
push
les
lods
mov
xchg
cmp
call
test
fistp
retf
imul
test
push
fidiv
or
adc
not
xchg
sbb
xchg
mov
gs
cld
fwait
pop
js
dec
fsub
xor
clc
jo
xor
fsub
xchg
sub
sub
adc
les
add
jns
xlat
jbe
mov
dec
(bad)
rcr
jg
xor
inc
xchg
xchg
fs
cmc
push
rcl
outs
mov
jno
jnp
in
pop
scas
xchg
lahf
xchg
std
push
je
lods
xchg
and
adc
xchg
xchg
sub
les
scas
shl
push
mov
xchg
mov
adc
cmp
mov
pop
repnz
test
lods
add
mov
bound
loope
enter
dec
cmp
aas
jo
sub
push
or
push
rol
sbb
lahf
mov
xchg
popf
retf
add
push
and
int3
mov
mov
pop
out
rcl
cdq
and
pop
xchg
(bad)
in
or
sub
fs
xor
sub
ja
test
cli
or
xor
mov
mov
popf
loop
jns
inc
xchg
ror
sbb
ss
push
dec
jecxz
xchg
out
data16
clc
pop
pop
outs
xchg
cmp
or
stos
push
cmc
mov
mov
hlt
mov
pop
jl
xor
cdq
int3
sub
xchg
xchg
inc
iret
shr
jns
cmp
pop
nop
or
fild
fwait
loopne
inc
xor
cs
jge
in
xor
mov
inc
xchg
in
out
ror
lds
in
stos
inc
test
xchg
mov
pop
movs
outs
sbb
iret
fisttp
xchg
repz
fst
mov
push
sbb
mov
jnp
xchg
scas
sbb
mov
(bad)
mov
xchg
retf
outs
out
lods
inc
les
dec
rcl
mov
loop
adc
ins
nop
nop
pop
call
adc
jg
sahf
inc
sar
popa
xchg
scas
cmc
sti
in
test
mov
fwait
jbe
dec
sbb
jnp
push
add
int3
test
xchg
mov
dec
mov
hlt
aas
addr16
in
mov
xchg
xchg
mov
xchg
out
pop
sub
xchg
push
popa
call
sbb
pop
xchg
push
rcl
scas
xlat
rol
call
or
jno
aam
test
add
xchg
pop
mov
dec
jno
dec
fstp
xchg
aaa
mov
push
fwait
out
repz
sub
cmc
les
xchg
stos
gs
sbb
adc
or
repnz
xchg
mov
push
hlt
mov
mov
or
adc
(bad)
ins
pusha
or
ins
int
jb
sub
mov
addr16
adc
dec
shl
sbb
or
xchg
ins
ins
ficom
xchg
dec
fcomp
sbb
cmp
cmp
inc
dec
add
mov
ja
xchg
(bad)
cmp
je
fdiv
push
lods
mov
mov
pop
jbe
xchg
pop
add
jnp
ret
or
xchg
mov
sbb
ss
imul
clc
movs
pop
xchg
cmps
hlt
(bad)
push
lds
push
or
pop
inc
adc
xchg
push
xchg
jge
push
cmps
fs
fwait
test
lods
adc
stos
ret
jbe
inc
xchg
das
mov
xchg
sbb
in
cmps
xchg
sbb
dec
xchg
lods
sbb
jns
icebp
inc
outs
xchg
jmp
js
jbe
or
xor
adc
fdivr
pop
scas
mov
mov
mov
adc
mov
jecxz
cmp
jb
adc
test
adc
mov
cmp
jge
add
aam
xchg
add
xchg
aad
scas
adc
sbb
mov
lds
dec
add
lods
xchg
sub
fiadd
rol
int3
sub
aad
ret
xchg
fdivp
xor
popf
xchg
adc
addr16
pop
sbb
das
xchg
mov
pop
push
cmps
mov
mov
ret
mov
iret
sete
cld
ins
jp
push
mov
(bad)
and
neg
sbb
ficom
xchg
test
mov
je
or
xchg
es
push
cdq
call
and
adc
mov
mov
push
hlt
cwde
jno
ret
push
stos
ss
es
fmul
jnp
mov
mov
je
dec
ss
push
retf
mov
dec
jmp
rcr
xchg
aam
xchg
or
mov
(bad)
sti
dec
imul
and
sub
add
cmp
adc
repz
in
cs
xchg
loop
int3
repnz
ret
xchg
xchg
sbb
les
pop
push
mov
and
jmp
sub
dec
xor
and
jecxz
mov
add
mov
shr
xor
push
xchg
sub
xor
cs
sub
adc
pop
push
repnz
pop
pop
xchg
jp
loope
and
xchg
add
cs
daa
add
scas
test
and
rcl
jecxz
loope
mov
jbe
xchg
(bad)
es
sbb
les
int
mov
jb
cmp
xchg
retf
mov
cmp
xor
call
data16
mov
mov
xor
clc
rcl
gs
in
sbb
enter
xor
xchg
cbw
outs
es
xor
inc
les
popa
jp
in
(bad)
int
sub
call
(bad)
popf
cs
mov
mov
rcr
lods
jne
cmps
xor
xchg
mov
adc
mov
test
xchg
cmp
shl
xlat
loopne
fsubr
inc
fisub
and
in
push
arpl
xchg
adc
cld
mov
div
jg
lds
aad
movs
xchg
fimul
jbe
in
invd
fcom
mov
add
sub
sbb
xchg
and
mov
xchg
xor
imul
lods
xor
push
mov
push
cmp
shr
adc
hlt
mov
or
inc
ds
push
mov
sbb
fsub
push
inc
les
mov
or
and
cmp
add
imul
mov
xchg
or
mov
adc
xor
(bad)
mov
jmp
xchg
ja
xchg
out
das
xchg
nop
rol
fwait
pop
cmovl
enter
les
and
xchg
test
pop
neg
cmp
pop
xchg
sub
popf
pop
ficom
int3
retf
outs
pop
adc
test
cmp
add
mov
xchg
and
stos
pop
xchg
adc
inc
fld
push
jg
xchg
jbe
dec
jns
scas
mov
daa
jo
fwait
les
pushf
(bad)
and
push
push
sub
mov
pop
ret
and
adc
outs
or
xchg
jge
push
push
pop
enter
mov
and
inc
mov
out
adc
jmp
in
add
cdq
xchg
push
loopne
fst
stos
pop
xchg
retf
add
(bad)
enter
ror
stc
xchg
jno
mov
xchg
and
rcl
cli
add
xchg
ins
aam
cmp
and
not
adc
xchg
sbb
adc
xor
inc
mov
cmc
in
test
(bad)
mov
cmp
push
push
ret
aad
iret
(bad)
icebp
into
loope
ror
rcr
cs
push
xor
jle
xchg
gs
sub
and
je
jl
fsubr
stos
adc
push
imul
pushf
xchg
inc
fist
stc
jb
mov
xchg
adc
jl
push
jp
jmp
test
add
test
push
jo
cwde
ins
and
inc
xchg
daa
fimul
sub
aaa
cli
xchg
mov
pop
pop
xchg
mov
loopne
cmp
mov
fs
xor
jbe
fisttp
rcl
fsubr
adc
xor
sbb
jae
xchg
cmp
xor
test
fld
sar
pushf
and
adc
push
xchg
adc
into
xchg
and
push
jl
mov
jne
jge
sbb
cli
or
push
popa
xchg
jbe
test
stos
add
lea
pop
dec
cdq
xchg
cs
lds
push
inc
or
xchg
mov
gs
popf
dec
lock
aaa
xchg
jne
push
cmp
fild
mov
push
pop
xchg
retf
mov
hlt
aam
pop
xchg
and
xchg
icebp
sub
call
mov
mov
mov
sbb
jg
xchg
dec
movs
scas
fisttp
sbb
lahf
sbb
adc
and
jge
xchg
jne
sub
icebp
pop
jae
cmp
mov
(bad)
sbb
lods
hlt
ror
cld
sbb
xchg
sahf
aad
xchg
movs
arpl
mov
jg
(bad)
cmp
push
xor
or
mov
cld
imul
inc
xlat
lods
loopne
test
ret
xchg
out
mov
fist
repnz
xchg
int3
call
cwde
leave
xchg
lahf
movs
mov
mov
mov
sub
das
xchg
retf
repnz
mov
loopne
popf
xchg
stc
shr
retf
iret
mov
and
lock
clc
xchg
(bad)
ja
xchg
arpl
mov
xor
push
xchg
mov
or
lea
cmps
js
jno
fisttp
xchg
xor
pop
jae
xchg
mov
push
arpl
inc
jne
cmp
cmps
aad
xor
push
leave
jno
or
xchg
in
mov
pop
fadd
lds
lea
or
pop
(bad)
sbb
movs
jp
cmps
fs
lods
cdq
fcmove
xchg
push
popa
jmp
into
mov
out
adc
cmp
fxch
cmps
dec
push
icebp
mov
mov
pop
push
fisttp
xchg
mov
shl
mov
ficomp
mov
mov
mov
jl
push
mov
push
xchg
ins
add
or
xchg
cmp
movs
fiadd
xchg
sar
xchg
pop
or
call
mov
pusha
sub
xchg
xchg
add
or
sub
(bad)
cmps
cs
xchg
shl
add
cmps
mov
sub
adc
inc
cmp
adc
test
mov
lods
mov
mov
push
jne
imul
push
pop
mov
idiv
in
cmp
outs
add
sbb
mov
lahf
stos
inc
xchg
rcl
outs
sub
and
stos
mov
stos
lds
out
mov
xchg
out
inc
sub
in
outs
out
xchg
div
add
pslld
mov
jmp
xchg
lock
xchg
jns
arpl
cmp
movs
add
or
fwait
push
shr
retf
je
stos
cdq
stos
adc
call
jb
adc
inc
cmp
mov
lods
das
int3
xchg
xchg
mov
cmp
fisub
call
xchg
leave
in
push
clc
call
cli
sub
mov
pop
xlat
mov
hlt
cmp
daa
mov
sahf
mov
fist
mov
dec
aam
pop
or
movs
int3
xchg
popa
and
pop
gs
ins
mov
out
add
iret
leave
stc
xchg
or
adc
mov
push
add
std
push
cmp
xchg
xchg
sbb
xchg
dec
out
and
fs
xchg
repz
leave
push
xchg
or
mov
and
rcr
push
cdq
xor
jae
fdiv
jnp
mov
adc
imul
inc
xchg
adc
xor
lds
mov
and
mov
jb
nop
sbb
xchg
inc
mov
neg
xchg
mov
sub
and
mov
adc
push
xchg
xchg
pop
pop
sub
mov
outs
cmp
xor
fwait
push
mov
out
mov
sbb
ret
pop
cmp
daa
adc
add
ror
xchg
mov
mov
rol
pop
fwait
test
hlt
ins
and
mov
enter
or
add
push
pcmpeqb
cmp
popa
enter
ror
xor
inc
xchg
adc
and
imul
jmp
mov
jmp
push
dec
sub
neg
xchg
dec
jmp
push
mov
int3
mov
mov
jg
scas
fst
mov
push
cld
sub
lahf
push
repnz
je
and
mov
hlt
es
or
out
add
push
jecxz
add
sub
mov
xchg
mov
mov
sub
stos
ss
les
cmps
xchg
jecxz
lock
mov
stos
xchg
cmove
int
ficom
inc
xchg
sub
(bad)
dec
jno
push
mov
in
xor
xchg
icebp
pop
mov
pop
xor
mov
or
xchg
sub
mov
adc
jle
movs
call
inc
out
mov
je
sub
mov
outs
xchg
popf
sar
mov
mov
ins
jae
call
mov
pop
jno
push
arpl
mov
ret
xchg
push
xchg
fild
test
(bad)
mov
arpl
mov
iret
xchg
imul
adc
mov
mov
jns
retf
xchg
test
lea
adc
outs
pop
out
xchg
nop
adc
jb
xchg
inc
sub
and
xchg
hlt
push
and
inc
xchg
std
push
cdq
sub
sbb
fst
mov
push
xchg
adc
mov
push
(bad)
arpl
mov
push
rol
add
fmul
clc
xchg
retf
ss
popa
call
mov
adc
add
shr
enter
jno
fiadd
aam
pop
mov
jg
push
xor
inc
adc
clc
dec
mov
sbb
out
inc
(bad)
popf
and
inc
or
xchg
push
jns
cdq
inc
aam
xchg
cmps
adc
adc
mov
inc
mov
repnz
cmp
test
and
mov
add
push
push
pop
and
push
pop
jl
test
add
xchg
jae
icebp
into
int
fadd
xor
ror
xchg
mov
lods
or
xchg
and
cmp
mov
aam
lods
mov
lock
xchg
push
scas
jbe
xchg
test
inc
add
inc
pusha
push
call
into
and
adc
xchg
iret
cmp
mov
jbe
or
xor
cld
shl
aad
mov
push
xchg
stc
ins
sbb
push
in
xchg
retf
ins
lahf
and
or
stos
mov
inc
test
repnz
jb
xor
into
inc
xchg
dec
div
stc
jg
sar
mov
shr
sbb
(bad)
xlat
adc
stc
cmp
out
push
mov
mov
mov
ror
sub
xchg
mov
test
and
cmp
lods
xchg
rcr
mov
hlt
and
arpl
je
push
stos
jp
movs
ror
push
xchg
out
add
scas
mov
xchg
es
scas
inc
repz
xchg
cmp
fnstsw
xchg
xchg
std
rol
pop
pusha
xchg
xchg
ds
daa
add
xchg
movs
out
lods
push
sub
ficomp
int
cwde
jb
inc
test
loope
in
and
pop
jecxz
pop
mov
xchg
adc
xchg
xchg
f2xm1
inc
pop
ror
xchg
cli
cmp
push
cmp
sub
mov
mov
(bad)
ret
(bad)
dec
jmp
aam
adc
rep
add
in
inc
mov
xchg
enter
mov
pop
ret
movs
bnd
mov
push
popf
test
sbb
cmp
jecxz
cmps
xchg
fsub
retf
jno
xchg
aas
rcl
retf
xchg
cdq
sub
enter
iret
shl
dec
xor
jnp
mov
pusha
sbb
mov
xor
pop
stos
sbb
mov
xchg
pop
adc
add
jmp
mov
fst
xchg
push
hlt
adc
ret
dec
popa
cmp
adc
fst
push
in
hlt
xchg
mov
add
repnz
xor
test
pop
popf
and
pop
mov
(bad)
jno
clc
mov
dec
pushf
mov
aad
fwait
pop
mov
adc
push
inc
sub
ins
in
xchg
clc
repz
adc
in
mov
and
les
arpl
movs
and
shl
xchg
inc
(bad)
lea
jbe
xchg
adc
dec
xchg
daa
mov
xchg
fisttp
arpl
pop
mov
int
xchg
or
mov
inc
repnz
dec
out
mov
sub
xchg
dec
or
test
sub
sub
mov
jne
push
xchg
adc
out
lods
ins
jecxz
aam
ja
jp
cdq
sub
out
dec
xchg
xchg
push
add
jb
lds
mov
inc
repnz
pop
imul
loope
mov
cs
xchg
not
test
dec
xchg
(bad)
mov
std
fwait
xchg
stos
push
push
adc
adc
pop
adc
pop
iret
xor
and
jl
(bad)
xchg
aam
mov
and
mov
shl
stos
sub
into
dec
pusha
cwde
mov
dec
sar
ret
adc
add
cmp
nop
mov
je
xchg
jge
lahf
xchg
inc
mov
jb
push
fwait
fwait
push
inc
in
xor
retf
inc
nop
push
pop
xchg
xchg
aas
lods
call
xchg
out
ins
push
outs
xchg
lods
sub
dec
xchg
(bad)
cmp
xchg
jge
sbb
mov
and
stos
sbb
call
dec
lea
fs
xchg
jp
xor
push
pop
es
xchg
lods
sbb
push
mov
or
rol
in
loop
sub
imul
xchg
push
lea
sub
and
xchg
mov
shl
mov
fnsave
out
xchg
and
jae
cmp
xchg
pop
pop
xchg
sub
mov
fwait
adc
push
rol
mov
xchg
in
or
out
cmc
or
jmp
ins
xchg
mov
and
inc
mov
cdq
aaa
cmp
mov
pop
movs
mov
cmps
mov
xchg
inc
hlt
jle
pusha
int3
cmp
or
jecxz
repnz
dec
es
je
xchg
mov
sbb
xchg
xchg
outs
fstp
push
sti
adc
cmp
fwait
mov
add
adc
stc
les
inc
into
mov
add
mov
retf
sbb
mov
add
out
add
mov
pop
sbb
xor
dec
lea
es
pop
test
in
push
pop
xchg
jmp
popa
sbb
mov
pusha
mov
xchg
mov
pop
fimul
shr
xor
mov
inc
push
mov
xchg
mov
push
sbb
adc
fwait
xor
sbb
inc
dec
jbe
sub
add
test
mov
nop
sar
inc
mov
fs
loopne
mov
mov
in
mov
mov
mov
xchg
int3
js
cmovg
mov
mov
inc
fdivr
loope
xor
es
sub
sub
aaa
mov
pop
neg
scas
pop
in
mov
xchg
test
loop
dec
jnp
cmp
call
fcmove
enter
in
xchg
dec
push
repz
(bad)
xor
pop
mov
mov
sub
mul
mov
xchg
sub
ja
loopne
xchg
jno
lds
addr16
mov
imul
add
jb
or
add
jg
vhsubps
lock
je
ins
lods
pop
pushf
sbb
xchg
jmp
jle
and
mov
add
mov
lea
mov
adc
cwde
push
xor
sub
retf
mov
sbb
xchg
movs
or
xchg
adc
arpl
cmp
and
scas
fwait
clc
push
fs
out
les
xor
push
mov
clc
xchg
movs
(bad)
and
les
jmp
into
xchg
shl
and
and
xchg
ret
icebp
iret
(bad)
out
mov
xchg
inc
or
fsqrt
fwait
and
repz
add
outs
cmp
sbb
or
xor
mov
xchg
xor
or
dec
pop
push
jecxz
add
aam
and
xchg
jns
adc
outs
fstp
mov
retf
cs
test
inc
xchg
mov
cmp
mov
sbb
push
mov
mov
aam
cmp
xchg
mov
or
xchg
mov
push
mov
push
fdivr
add
xchg
pop
inc
mov
and
out
mov
call
stc
pop
xchg
xchg
cs
pop
adc
inc
lods
sub
pop
xchg
dec
in
xor
adc
cli
push
fisttp
pushf
mov
into
cmc
lds
xchg
xchg
push
fisub
inc
test
mov
add
xchg
and
ins
addr16
call
mov
nop
cmp
jo
shr
enter
inc
push
or
or
cmp
pop
adc
leave
mov
xor
fdiv
in
jle
push
call
jp
add
or
mov
and
push
dec
int
das
pop
gs
and
mov
ficom
cli
in
push
xchg
cwde
test
mov
stos
clc
push
mov
aam
and
adc
mov
and
repz
sub
adc
xchg
push
cmp
std
xchg
out
adc
jo
or
xchg
int
ret
xchg
add
xchg
dec
push
cmps
stos
cmps
adc
xchg
enter
jne
add
xchg
mov
and
push
sahf
inc
dec
fwait
out
test
dec
pop
hlt
and
xchg
(bad)
xchg
fucomp
push
push
shl
or
pop
idiv
cmc
fnstsw
xchg
mov
aaa
jno
aas
test
call
in
push
mov
ja
mov
fiadd
fnstsw
xchg
mov
imul
dec
test
mov
jne
ret
xchg
xor
test
xor
jne
cmc
ins
sbb
mov
jg
pop
sub
inc
pop
js
cmp
sbb
pop
call
lods
xor
dec
sbb
cmp
cmp
ds
sub
jne
fisttp
popa
xchg
push
jle
cli
xlat
xchg
test
into
inc
pop
daa
push
inc
xchg
fild
push
outs
push
stos
fwait
imul
repnz
je
ins
xchg
fwait
xchg
pop
fld
mov
mov
push
pop
pop
lods
xchg
sar
xor
repnz
fst
sbb
jbe
sub
sub
cmp
retf
xchg
xchg
jg
je
aas
pusha
stos
xchg
inc
iret
adc
xchg
xor
mov
xchg
ror
xchg
lahf
sbb
cdq
xchg
jmp
sbb
pop
cmps
loopne
and
xchg
stos
xchg
out
ja
mov
dec
div
xchg
loopne
lds
loope
mov
hlt
shl
cmp
mov
push
jle
or
aas
mov
(bad)
mov
retf
out
jl
adc
pop
mov
jmp
cmps
mov
sar
xor
fcom
out
mov
xchg
and
mov
push
sub
xchg
outs
test
add
cdq
xor
xchg
adc
pusha
dec
and
cmps
aam
xchg
pop
loopne
pop
cmp
add
test
cmp
inc
or
sbb
je
(bad)
pushf
and
(bad)
mov
push
push
inc
add
mov
jb
xlat
adc
neg
or
sub
pop
add
xor
or
repz
sub
retf
mov
retf
xchg
ret
push
and
pop
arpl
adc
shl
popf
or
mov
add
ret
adc
pop
cmp
xchg
loop
repnz
pop
dec
inc
xchg
int3
mov
xor
add
and
sbb
inc
or
xchg
jae
mov
xchg
or
push
xchg
sahf
pop
xchg
dec
xor
je
stos
and
mov
imul
outs
(bad)
fistp
add
dec
shl
xor
jl
pop
cld
fwait
ret
sbb
xor
sbb
aaa
cmps
jl
div
sub
rcr
xchg
(bad)
(bad)
push
or
xor
test
movs
lahf
imul
icebp
fcom
mov
adc
xor
push
jp
xchg
mov
sub
das
mov
(bad)
sub
xchg
cdq
call
push
pop
dec
push
xchg
fwait
add
xchg
xchg
fist
mov
pop
push
jecxz
rcpps
out
nop
inc
leave
xchg
push
cmp
call
ja
shr
inc
xchg
cmp
mov
and
pop
jae
xchg
cmp
mov
fisubr
xchg
fs
bound
sbb
push
movs
mov
push
repz
sub
nop
cmp
pop
cmovne
jg
pop
xchg
and
stos
mov
movs
loopne
std
jno
jae
xchg
sbb
add
xchg
or
sub
xchg
pop
xor
bound
sbb
mov
cmc
sbb
inc
sub
or
retf
sub
and
push
pushf
push
sbb
cmp
rcl
xchg
dec
dec
test
sub
pop
push
test
xor
pop
scas
dec
mov
cmps
inc
popa
inc
add
shr
pop
mov
adc
pop
xchg
(bad)
sub
jg
lock
mov
mov
dec
outs
xchg
add
gs
ins
jbe
xchg
test
dec
dec
enter
xchg
popa
sub
lods
adc
mov
dec
mov
xchg
jb
xor
stos
(bad)
mov
mov
adc
cmps
(bad)
sbb
aam
cmp
pop
mov
xor
icebp
pop
cmp
xchg
scas
inc
push
test
ds
movs
dec
xchg
jecxz
pushf
call
xchg
push
mov
or
and
push
cs
and
or
mov
jle
popa
test
dec
outs
int3
pop
lds
je
ins
xlat
out
push
sbb
add
cmp
jg
enter
add
lods
xchg
loop
daa
push
xchg
aad
mov
inc
xchg
fld
sub
xchg
jle
xchg
sbb
cmp
daa
in
mov
sbb
sbb
ja
or
aas
xchg
push
cmp
xchg
shl
loope
imul
mov
mov
mov
or
pop
fs
cmc
xchg
div
xor
xchg
cs
hlt
bound
push
xlat
adc
inc
push
xchg
xchg
adc
or
out
and
xchg
fcomp
inc
aaa
lahf
dec
ja
xor
pop
cmp
dec
or
cmc
hlt
outs
pop
xchg
sbb
and
push
or
jge
nop
(bad)
(bad)
xchg
dec
pop
cmps
addr16
mov
xchg
adc
cmps
mov
jl
ror
jns
pop
and
mov
or
into
mov
(bad)
mov
xchg
hlt
sahf
stos
mov
repz
xchg
add
ficom
xchg
les
xchg
and
or
and
xchg
das
mov
je
adc
mov
push
repnz
adc
sub
xchg
ret
xchg
dec
out
dec
into
es
add
ins
sbb
jns
ret
mov
sbb
adc
mov
xchg
into
and
dec
arpl
nop
or
aas
ds
sar
add
cld
and
test
jle
mov
fild
adc
int
xchg
lahf
scas
mov
xchg
push
cli
dec
ret
jl
test
xchg
xlat
leave
mov
xor
sub
and
mov
cmp
xor
idiv
fcom
adc
scas
xchg
push
movs
sub
sete
xor
cwde
(bad)
dec
sti
xchg
add
sbb
sbb
ficom
lods
or
ror
dec
jge
xchg
lds
lock
mov
mov
ss
fwait
fwait
into
or
ins
fsqrt
and
sti
lds
push
jg
add
popf
loope
pop
rcl
in
xor
pop
loopne
shl
je
test
and
mov
jle
ret
mov
adc
test
fwait
xchg
pop
add
fcomp
outs
inc
iret
mov
sbb
in
cmp
cmps
xchg
stos
xchg
mov
mov
pop
xchg
es
jmp
fadd
repnz
sub
sub
xchg
xchg
sub
push
xchg
jp
pop
mov
jbe
aam
sub
repnz
je
das
fwait
ret
mov
cmp
sbb
lods
outs
das
int3
lock
data16
push
out
xchg
mov
dec
inc
mov
inc
inc
(bad)
jmp
jns
push
cmps
jne
lds
mov
mov
xor
fcomi
push
ficom
pop
sbb
xchg
jbe
xchg
xor
xchg
hlt
sbb
dec
les
mov
dec
xchg
stc
or
fs
and
movs
xchg
loopne
and
out
leave
jmp
in
and
adc
and
in
cmp
cld
xchg
fnstsw
push
xchg
movs
pop
cmp
mov
inc
or
je
cdq
adc
inc
fist
adc
retf
fwait
xor
jle
xchg
test
jae
dec
xchg
jnp
addr16
loopne
(bad)
xchg
xchg
lahf
popf
push
stos
mov
or
into
ror
adc
in
jb
into
adc
scas
ret
adc
or
cmps
dec
test
inc
xchg
hlt
mov
jl
push
dec
aad
pop
cmp
adc
scas
mov
popa
mov
xlat
push
int3
and
add
jb
sbb
xchg
xchg
aas
cmp
imul
pop
aad
mov
mov
add
jp
enter
sub
lea
std
into
pusha
addr16
in
adc
aas
xchg
inc
inc
mov
xchg
mov
adc
nop
data16
sbb
xor
xchg
test
cmp
xor
cmc
jmp
out
scas
xchg
stc
mov
mov
ror
adc
pop
nop
pop
xchg
mov
jne
pop
xchg
arpl
xchg
jp
lods
push
sub
mov
or
sbb
lods
xchg
stos
pop
stos
mov
mov
adc
sub
cld
cli
xchg
lock
dec
mov
aaa
mov
jl
adc
adc
(bad)
jecxz
jbe
or
int
add
cld
rcl
or
mov
arpl
adc
sbb
push
test
jo
pushf
xchg
icebp
mov
or
push
adc
inc
aaa
lods
in
popa
jno
jnp
mov
cmp
sub
pop
ret
std
inc
xchg
xchg
mov
and
sahf
xchg
pusha
popa
jns
sti
loopne
xor
mov
mov
lea
pop
jne
mov
sub
data16
fs
or
cmp
cmp
xchg
inc
xchg
out
mov
adc
pop
shl
sti
jle
pop
out
test
push
mov
and
xchg
les
arpl
cmc
xchg
adc
jmp
xchg
lahf
bswap
fwait
xchg
aam
xlat
or
push
not
xchg
loop
or
inc
xchg
cmc
int
mov
in
push
out
xchg
arpl
out
xchg
adc
aaa
sahf
jmp
addr16
xchg
dec
je
xor
hlt
les
mov
cmp
test
in
dec
inc
dec
retf
js
xchg
loop
pushw
int
xlat
call
mov
mov
scas
test
xor
cmp
dec
icebp
xchg
xchg
sub
mov
add
retf
enter
(bad)
jmp
cld
sbb
stos
jo
shr
pop
xchg
loop
adc
call
mov
xchg
dec
nop
xchg
add
in
nop
adc
ja
in
test
mov
int
xor
movs
xchg
pop
push
mov
inc
mov
push
xor
and
in
mov
fcomi
pmaxub
fwait
mov
xlat
in
fcom
leave
ret
sbb
mov
adc
(bad)
xchg
lock
outs
mov
sar
inc
jg
xchg
dec
xchg
jmp
sbb
jns
xchg
xchg
adc
aas
jno
mov
push
mov
out
outs
inc
sub
mov
pop
aaa
or
xchg
adc
jae
push
call
inc
cmp
cmp
mov
push
cmp
or
mov
xchg
je
mov
jl
xor
mov
adc
test
or
loop
cmp
xchg
mov
dec
sub
mov
add
mov
jnp
pop
push
ret
ret
mov
dec
(bad)
das
and
mov
push
mov
mov
(bad)
fcom
dec
leave
mov
aas
xchg
aaa
hlt
mov
xchg
ins
xchg
pop
push
push
repz
sub
and
inc
pop
pop
jo
cwde
jecxz
scas
cli
dec
adc
in
mov
add
xchg
or
inc
mov
dec
lods
xchg
les
push
daa
mov
xchg
(bad)
sbb
sbb
xchg
add
xchg
sbb
(bad)
into
aad
popf
cmps
cmp
ds
ja
pop
jbe
fld
sub
test
and
sbb
dec
xchg
mov
int3
push
dec
or
xchg
scas
xchg
ss
xchg
or
jo
sbb
and
lods
xchg
pop
shl
push
xchg
jbe
je
or
add
mov
mov
shl
and
xchg
ins
sar
xor
out
mov
jb
(bad)
and
xchg
cmp
sub
or
xchg
lahf
jle
push
mov
retf
mov
push
shl
hlt
aas
xor
lds
xchg
or
push
cwde
repz
bound
pop
ja
or
xchg
neg
cmc
mov
sub
or
or
lahf
mov
outs
cmp
in
mov
jo
dec
push
or
mov
js
call
movs
jmp
fs
dec
jl
inc
jle
push
or
addr16
ins
pop
es
xchg
and
inc
lods
or
loopne
inc
inc
pushf
dec
hlt
xchg
adc
and
mov
xor
gs
int3
mov
mov
adc
jo
or
(bad)
into
leave
mov
push
and
cmp
lock
push
xchg
stos
popa
xor
xchg
cdq
stc
fisub
sti
test
es
inc
mov
push
jb
adc
inc
mov
into
xor
outs
in
scas
xchg
pop
and
lock
sbb
jl
hlt
xchg
bound
mov
pop
mov
adc
xchg
adc
xchg
dec
push
aad
outs
xchg
pop
xchg
xor
jg
fldcw
mov
fwait
call
into
mov
mov
xchg
cmp
icebp
out
leave
int
mov
(bad)
xchg
pusha
cld
sti
(bad)
xchg
shl
hlt
xchg
push
and
cmc
fadd
mov
add
scas
fimul
xor
cmps
in
ds
pop
inc
gs
mov
or
imul
cmp
push
mov
les
gs
je
stos
push
xchg
fst
(bad)
aad
jle
sar
les
pop
ja
bound
add
or
jo
jmp
int3
xchg
mov
jle
out
mov
daa
inc
push
adc
push
mov
xor
call
(bad)
pop
icebp
push
xchg
jecxz
sbb
and
mov
push
dec
aam
mov
ds
push
fbld
lock
inc
pop
(bad)
aas
jp
cmps
fwait
pusha
fst
pause
pop
loop
jecxz
(bad)
xchg
inc
mov
je
into
mov
stos
fwait
pop
jb
or
pop
lods
ror
push
jae
mov
stos
fcomip
xor
dec
call
push
fadd
mov
mov
add
dec
les
dec
adc
xchg
jo
add
inc
or
xchg
jge
xchg
add
adc
add
cmps
dec
or
xchg
fs
dec
cmp
mov
retf
mov
lahf
imul
in
xchg
mov
sbb
inc
sub
or
jecxz
dec
push
rcl
outs
xor
ins
adc
mov
and
and
xchg
jl
imul
xchg
cdq
out
inc
xor
fucomp
xchg
add
push
pop
div
adc
test
mov
xchg
inc
pushf
xor
popa
xchg
sbb
iret
xchg
xchg
data16
outs
movs
xchg
pop
(bad)
mov
push
in
xchg
adc
clc
iret
jnp
add
dec
rcr
leave
stos
rcl
into
retf
imul
sbb
and
xchg
xchg
pop
fsubr
mov
mov
push
cmps
cdq
sbb
jecxz
xchg
push
inc
jmp
aam
neg
xchg
sub
repnz
(bad)
mov
adc
lds
push
add
or
jb
xor
(bad)
push
push
inc
and
xchg
in
imul
sbb
pop
push
xor
iret
jno
push
xchg
fmul
retf
je
mov
dec
add
fsubr
push
mov
mov
mov
jmp
xchg
or
jecxz
pop
sub
push
mov
hlt
mov
jmp
imul
dec
rcr
sbb
cwde
push
push
xchg
xchg
hlt
ficomp
dec
inc
mov
push
bound
fstp
into
mov
les
jl
(bad)
xchg
sbb
jne
xchg
movs
jmp
inc
test
je
dec
xchg
xchg
jae
jge
mov
mov
xlat
fldcw
mov
mov
inc
dec
adc
push
and
rol
sbb
inc
mov
adc
movs
sub
xchg
fcomp
(bad)
(bad)
stc
dec
inc
lea
out
push
mov
mov
pop
mov
mov
repz
lods
sar
mov
(bad)
xchg
iret
inc
lods
jg
fmul
xchg
enter
loop
test
lods
mov
into
jmp
je
and
sub
punpckhwd
in
sub
(bad)
xchg
hlt
mov
aas
xchg
sbb
mov
mov
cmp
or
shl
mov
jae
(bad)
imul
aad
fistp
sub
xchg
pop
mov
jge
and
pop
test
mov
xor
shr
movs
lds
mov
push
push
xor
ror
jno
xor
pop
int
addr16
or
ins
jl
sub
inc
pop
retf
xchg
xor
mov
inc
and
lds
xchg
pop
pusha
and
test
shl
out
inc
sti
xchg
sub
clc
mov
mov
je
aad
and
pop
and
push
or
xchg
lahf
mov
push
mov
or
jl
(bad)
mov
es
aam
enter
push
in
repnz
std
pusha
in
xchg
mov
mov
fincstp
push
ds
aaa
xor
and
es
sbb
hlt
cdq
loope
mov
mov
fsub
push
push
retf
push
adc
push
cmps
xchg
mov
leave
push
lock
test
fcmovnbe
cs
fnsave
jnp
imul
and
mov
push
mov
movs
inc
xchg
(bad)
sbb
popa
int
mov
movups
ss
movd
sub
jnp
push
ret
pop
add
push
adc
lds
leave
das
lock
or
xchg
sub
push
in
fwait
mov
mov
paddq
(bad)
xchg
stos
movs
ret
fisub
scas
aam
dec
loope
mov
xchg
mov
mov
mov
sbb
xor
xchg
pop
mov
int3
xchg
daa
xchg
nop
adc
adc
sbb
and
cmp
xchg
das
xor
or
jae
dec
movntq
fdivr
mov
adc
add
popa
xchg
mov
pop
jg
test
jge
(bad)
in
addr16
xchg
out
enter
mov
ins
imul
fwait
test
jae
pusha
and
xchg
jno
jg
mov
mov
lea
pop
mov
or
xchg
inc
or
jne
pop
js
xchg
in
in
inc
mov
pop
cmps
xchg
stos
and
mov
mov
pushf
(bad)
aam
pop
mov
push
push
cmp
or
rcl
nop
push
cmc
xchg
mov
push
mov
mov
fldenv
xchg
jns
add
sahf
mov
push
push
xor
mov
xchg
inc
(bad)
js
cmp
xchg
test
adc
xor
mov
je
mov
sbb
jno
inc
jnp
aas
rcr
adc
mov
mov
into
jne
cs
pop
(bad)
push
xchg
loope
jmp
es
ret
jmp
inc
or
cmc
mov
aam
in
cmp
aaa
cdq
inc
push
push
push
jmp
and
outs
movs
lss
iret
aam
pop
fld
ss
out
push
mov
cmp
xor
cs
bound
xchg
cmp
es
mov
pop
push
bndstx
mov
jbe
add
test
push
movs
iret
push
sbb
pop
xchg
xchg
inc
pop
cdq
mov
adc
mov
jmp
js
sub
(bad)
xchg
fwait
or
xchg
retf
xchg
mov
das
cmp
in
gs
adc
mov
jge
cmp
test
out
int
mov
mov
into
loopne
(bad)
(bad)
pop
arpl
loope
int3
sub
xchg
and
mov
sahf
retf
jnp
imul
cld
adc
inc
addr16
scas
mov
movs
into
(bad)
xchg
mov
mov
add
lock
sub
in
cmp
add
xchg
ja
(bad)
fisub
mov
xchg
ret
cmp
push
add
add
xchg
pop
movs
mov
inc
out
inc
pop
shl
sub
pop
dec
jle
and
xchg
mov
retf
fbld
jmp
lods
imul
xchg
shl
inc
(bad)
mov
lds
mov
sbb
push
ror
imul
test
rcl
in
int
mul
out
inc
xchg
inc
leave
sbb
add
xchg
lock
dec
xor
pop
push
jae
cmc
mov
or
xchg
mov
and
cvtpi2ps
push
xchg
adc
call
mov
fsubr
adc
xor
jp
push
sahf
xchg
cli
jne
(bad)
jmp
fistp
in
daa
xor
mov
pop
dec
mov
xor
fidiv
push
jge
in
lock
jg
outs
arpl
rcl
jmp
dec
jmp
xor
xchg
ins
aad
jns
sti
dec
fwait
xchg
fsubr
(bad)
aas
mov
inc
xor
rol
sub
vmovups
xchg
push
jge
sbb
cwde
ret
inc
adc
or
test
push
outs
mov
ss
mov
fld
xchg
sbb
addr16
not
push
mov
xchg
js
popa
sbb
adc
jg
sub
pop
pop
xchg
les
sbb
cwde
push
(bad)
int
pop
xchg
and
mov
ins
lock
xchg
pop
and
pop
into
imul
pop
push
xchg
xor
xor
xchg
dec
leave
(bad)
inc
cld
sub
xchg
lea
xchg
push
scas
retf
push
fiadd
ret
sbb
xor
aad
xchg
mov
shl
xchg
jle
clc
xchg
test
sbb
rcr
adc
push
es
retf
not
xor
test
jne
xchg
(bad)
std
add
xor
xchg
push
push
clc
sbb
sub
jmp
pop
jns
les
shl
adc
jbe
xor
xchg
loop
push
or
in
jmp
sub
sti
loope
mov
hlt
stc
jp
in
or
sub
fucomip
xor
je
push
or
in
push
call
push
mov
sub
xchg
cmp
xor
fimul
cmc
stos
xchg
loope
(bad)
(bad)
dec
jle
sub
jne
loop
jnp
xchg
mov
lock
mov
data16
xchg
loopne
jl
call
jno
inc
push
xchg
xchg
mov
popa
fld
mov
stos
test
fist
mov
mov
fidivr
dec
xchg
mov
aas
jmp
sbb
add
cmc
mov
fwait
xchg
in
ins
or
cld
je
inc
xchg
dec
jns
jg
jge
mov
loopne
cmp
xchg
mov
mov
out
xchg
ss
pop
and
je
pusha
mov
daa
xchg
add
mov
or
xchg
pushf
adc
mov
cmp
mov
loop
movs
push
cli
mov
add
sub
inc
stc
nop
adc
mov
shl
(bad)
sar
mov
cmp
ja
mov
push
xor
hlt
out
(bad)
xchg
jecxz
push
add
ss
or
xchg
and
xchg
xchg
or
aaa
and
cwde
sub
sub
scas
dec
dec
in
add
mov
xchg
cvtdq2ps
std
test
mov
push
cmp
ret
out
add
dec
xchg
dec
ret
test
mov
cld
pop
adc
or
mov
in
push
mov
(bad)
lods
int3
call
js
imul
aam
push
add
or
aaa
xchg
ret
aad
es
xchg
fwait
into
aas
mov
xchg
sbb
pop
cwde
ret
push
jmp
jmp
bound
jns
or
push
xchg
push
xor
adc
push
call
inc
xchg
push
mov
push
call
lods
lahf
xchg
mov
sar
iret
mov
mov
pop
cmps
pop
ins
mov
xchg
(bad)
fs
mov
icebp
or
fmul
pop
shl
pop
js
cdq
les
mov
imul
lds
leave
jl
xlat
xchg
sbb
adc
rcl
dec
push
xchg
fdiv
and
imul
jp
push
icebp
mov
mov
dec
mov
mov
out
push
ss
xchg
mov
dec
and
mov
mov
in
sti
fwait
hlt
in
pop
xor
fnsave
popa
(bad)
push
xlat
add
xchg
fistp
pop
xchg
(bad)
ret
mov
and
xchg
adc
daa
js
int
xchg
fnstsw
ins
mov
xchg
sub
inc
cwde
mov
(bad)
mov
lock
in
xchg
sbb
mov
push
hlt
cmc
cmc
out
xchg
fs
xor
xor
test
jnp
push
xchg
add
inc
mov
xor
hlt
int
std
pop
stos
rcr
cmps
mov
and
sub
mov
xchg
lods
shl
adc
mov
xchg
and
pop
imul
push
xchg
bound
cmp
dec
xor
leave
jns
cmp
arpl
jne
lahf
xor
inc
fcom
inc
int
or
mov
xchg
sbb
add
or
sub
fdivr
fwait
sar
in
xor
xchg
rol
adc
into
cs
xchg
sbb
xor
xchg
xchg
cmc
call
jns
stos
fild
sbb
cmp
xchg
fld
std
pop
push
retf
adc
imul
pop
xchg
jmp
jne
ds
dec
xchg
(bad)
in
fst
scas
ficom
es
jmp
jge
and
mov
call
ins
gs
clc
lods
xchg
cmp
and
shl
shl
call
mov
in
push
lods
(bad)
jne
fist
push
shr
push
ins
rcl
pop
out
xchg
loope
cmp
xchg
(bad)
ret
dec
push
rcr
xchg
retf
jns
cmp
jnp
mov
xor
cmps
sub
call
sar
jp
sbb
ds
or
movs
mov
mov
lods
int3
mov
adc
pop
xchg
shr
cmc
xchg
xchg
iret
mov
pushf
scas
in
imul
inc
dec
mov
cmp
add
xchg
movs
jbe
(bad)
repz
mov
xchg
inc
jl
std
stos
rol
xchg
cmp
sbb
mov
add
lea
mov
inc
push
pop
xchg
int3
push
fcom
stc
sbb
leave
mov
xchg
les
xchg
cmp
dec
rol
pushf
adc
and
addr16
sub
ins
adc
cmps
in
or
scas
mov
fcmovnbe
pushf
int3
or
pop
adc
fidivr
xchg
adc
stc
and
jp
int3
rol
push
mov
cmp
mov
je
ret
mov
push
add
xchg
jg
xor
test
pop
xchg
std
loopne
push
mov
in
xchg
mov
xchg
aas
fisttp
fwait
mov
and
pop
sahf
popa
xchg
pop
mov
push
add
cmp
das
push
and
sub
xor
jno
and
(bad)
call
add
xchg
sbb
adc
xchg
inc
stos
pop
repnz
jmp
mov
hlt
xchg
inc
test
cwde
xchg
cdq
mov
push
(bad)
retf
fwait
and
(bad)
enter
xchg
xchg
les
imul
xor
rcl
dec
movs
(bad)
je
xchg
inc
(bad)
mov
or
or
(bad)
test
jge
jmp
push
mov
je
ins
in
test
mov
mov
cmp
mov
push
in
xor
xor
sbb
lahf
add
adc
repz
adc
mov
xchg
fmul
aad
mov
and
mov
sbb
mov
adc
arpl
les
cld
sub
adc
push
iret
mov
nop
addr16
xchg
retf
dec
sbb
dec
xchg
inc
add
dec
xchg
bnd
in
mov
xchg
in
imul
or
into
ficomp
movs
stos
outs
mov
push
or
push
mov
cmp
daa
or
retf
ret
mov
mov
shr
adc
(bad)
mov
je
ins
popf
cmp
pop
push
sbb
sbb
jp
push
(bad)
cmp
mov
int
adc
xor
jns
xchg
ss
inc
aad
loopne
fcmovnu
xchg
pop
push
out
fsubr
push
xchg
or
jnp
jp
popa
in
xchg
add
movs
shl
mov
mov
xchg
xchg
imul
popf
test
sar
cld
inc
xchg
mov
pop
or
loope
mov
ret
hlt
mov
push
sbb
xchg
sub
sar
jg
or
cmp
jp
pop
sahf
jb
pop
(bad)
sbb
ins
int3
inc
xchg
mov
sti
jo
in
cli
ja
xchg
sbb
and
xchg
inc
or
test
into
jo
add
or
lea
mov
shl
xor
fs
aaa
shl
cmp
scas
loop
cmp
adc
std
and
data16
adc
pop
outs
retf
stc
xchg
ds
xor
test
xchg
cmps
lods
rol
ja
mov
push
adc
cmp
loopne
dec
rcl
or
fs
popf
mov
shl
inc
enter
xchg
pop
es
and
pop
and
sbb
icebp
mov
lock
jg
arpl
xchg
shr
loopne
mov
jns
xchg
push
dec
inc
mov
jb
cli
xchg
mov
cld
mov
lods
movs
ins
mov
fwait
pop
mov
sbb
and
cmp
ds
add
xchg
mov
push
sti
div
xor
xchg
adc
pop
ss
xchg
movs
mov
mov
sub
xchg
cmp
lahf
jg
popa
int3
test
mov
mov
xor
adc
inc
sub
leave
xchg
ret
mov
fnsave
mov
jmp
int3
(bad)
out
xchg
ja
mov
rcl
in
jb
mov
push
fwait
out
loopne
xchg
xchg
int3
lods
xchg
add
sbb
sahf
pop
sbb
or
and
rol
mov
xchg
rdmsr
push
std
xchg
or
sti
fwait
stos
out
sar
int
jbe
jmp
(bad)
xchg
icebp
xor
test
mov
(bad)
sbb
adc
push
inc
xchg
mov
xchg
push
pop
xchg
cmp
mov
mov
outs
xchg
adc
sbb
adc
cli
inc
xchg
imul
(bad)
xchg
xchg
xchg
fdivr
call
xchg
mov
jp
aaa
xchg
imul
jge
xchg
test
leave
push
int3
inc
push
push
jp
mov
(bad)
lds
cmp
xchg
popf
je
lahf
cmps
mov
xchg
int3
sub
leave
hlt
outs
dec
mov
ins
push
xlat
adc
xchg
sub
pop
fist
push
arpl
unpcklps
mov
lods
xchg
cdq
in
out
jg
int3
ficomp
fwait
adc
leave
enter
inc
dec
in
test
stos
xlat
repz
mov
mov
dec
imul
in
mov
jmp
and
outs
pusha
push
push
popf
xchg
data16
ja
jle
into
pop
xchg
jbe
xchg
push
jg
sbb
xchg
add
mov
jnp
jmp
loopne
or
push
or
retf
std
push
xchg
and
mov
dec
je
cdq
xchg
sti
dec
addr16
mov
push
xchg
mov
xchg
(bad)
jmp
jle
pop
pop
lahf
xor
inc
dec
in
mov
sbb
xchg
ror
test
sub
inc
iret
(bad)
cmp
mov
retf
mul
dec
stc
fidivr
scas
xchg
ja
jp
xchg
rcr
in
dec
mov
push
push
cmp
ins
cmp
jp
xchg
leave
stos
sbb
ja
das
jne
mov
outs
test
in
les
push
jbe
movs
(bad)
pop
aad
adc
jmp
adc
sub
ins
stos
mov
imul
stos
jo
add
pop
stos
jp
fdiv
cmp
push
retf
ficomp
lea
add
(bad)
push
mov
xchg
xor
movs
pop
ins
pop
fidiv
into
push
push
imul
movs
fs
adc
(bad)
adc
popf
and
mov
cmps
call
mov
or
xchg
nop
ror
xchg
xor
dec
mov
or
and
xchg
in
sar
sub
std
and
add
push
jl
test
test
mov
fidiv
aad
sub
jl
pop
pop
retf
mov
mov
out
push
cmp
(bad)
ja
ja
mov
xchg
cmp
sbb
push
je
in
lock
adc
ret
out
cmp
or
lods
xchg
pop
ret
push
sub
(bad)
pop
jbe
or
xchg
xchg
test
sbb
xchg
dec
push
fild
push
stos
aaa
(bad)
jo
inc
sub
mov
and
xchg
mov
jmp
jbe
nop
push
xor
test
push
push
adc
mov
dec
xchg
mov
(bad)
cwde
pop
iret
ret
push
adc
mov
or
shr
test
jmp
in
xchg
jp
xchg
pmaxsw
cwde
add
aad
mov
push
sub
imul
mov
xchg
xchg
or
cwde
mov
mov
push
xor
sub
jbe
jns
mov
xchg
es
in
call
daa
out
xchg
data16
xor
jb
pop
jne
mov
cs
dec
xchg
iret
xor
xor
xchg
data16
pushf
or
in
xchg
cmovbe
(bad)
fldenv
imul
mov
and
and
js
sub
test
fdiv
mov
adc
fwait
inc
rcr
xchg
aam
jmp
and
sub
jmp
push
adc
sbb
into
(bad)
aad
test
mov
mov
xchg
xchg
mov
inc
sub
cmp
out
xchg
sbb
les
or
xor
cmp
cwde
aam
ins
aaa
mov
ss
fistp
xchg
sbb
xchg
adc
mov
add
jmp
jge
pop
clc
push
test
shl
sub
cmp
jmp
sar
add
jne
xchg
arpl
sub
std
push
lock
jno
cdq
fisttp
ror
loope
jp
mov
or
or
push
sub
adc
push
mov
xchg
dec
sbb
ficomp
in
aad
lods
jp
and
cmp
(bad)
and
mov
xchg
iret
jno
sbb
stc
adc
mov
outs
popf
cmp
xchg
jmp
shl
pop
mov
mov
iret
ror
cmp
push
jecxz
cmp
xchg
aaa
int
clc
das
sbb
jge
or
add
xor
mov
fwait
or
aaa
xchg
(bad)
xchg
scas
ja
sub
xchg
dec
mov
sbb
fs
lahf
icebp
cmc
ficom
out
call
or
push
pop
je
or
hlt
rcl
add
and
in
test
dec
out
call
xchg
pop
test
xor
dec
enter
leave
xchg
out
in
(bad)
cli
pop
mov
test
vmread
mov
xor
xchg
sbb
or
lods
inc
mov
stos
cwde
push
inc
sbb
dec
js
call
adc
rol
xchg
cmp
popa
leave
adc
and
mov
xchg
ins
stos
clc
lahf
add
xor
inc
in
pop
pop
cmp
retf
aaa
shl
push
jmp
mov
cwde
stos
inc
adc
ds
mov
push
enter
cmp
aam
and
xchg
pusha
mov
xchg
jmp
jp
hlt
sub
inc
ins
sub
stc
xor
dec
out
sbb
mov
js
in
or
cmps
dec
push
aad
ins
xchg
les
das
add
push
xchg
cmp
or
or
(bad)
xor
push
xor
mov
xchg
pop
je
sbb
inc
bnd
cmp
in
mov
dec
mov
rcl
adc
jecxz
retf
mov
mov
xchg
data16
adc
lds
xchg
aas
jno
jge
mov
ds
sbb
rcr
add
hlt
idiv
xchg
ret
rol
pusha
retf
popa
call
stos
sahf
xlat
shl
xchg
xchg
mov
loop
out
xchg
shl
push
cmp
aaa
xchg
pop
sbb
test
inc
jnp
xchg
mov
xchg
mov
aam
inc
xchg
retf
aad
icebp
inc
or
movs
scas
das
mov
hlt
xor
xchg
inc
push
jo
fld
and
int3
cmc
adc
inc
push
jp
sbb
daa
or
les
out
add
sbb
ja
cmp
mul
cs
cmps
adc
jbe
xor
dec
adc
call
aaa
les
fwait
gs
push
push
mov
movs
int
inc
add
and
shl
mov
and
dec
into
mov
hlt
cmps
test
loopne
xchg
(bad)
xor
mov
retf
fwait
loope
mov
icebp
jbe
add
cmp
les
mov
fcom
and
sub
addr16
xor
xchg
adc
xchg
mov
ror
es
je
fisttp
cmps
fsubr
inc
xor
xor
inc
shl
xlat
xchg
sti
push
aam
into
jmp
mov
aad
cmp
retf
mov
call
jp
mov
xor
int3
imul
mov
enter
cmp
xchg
movs
shl
(bad)
fwait
push
outs
dec
sub
jae
dec
es
push
or
mov
xchg
mov
pop
(bad)
sub
dec
inc
sub
mov
xchg
mov
(bad)
sbb
or
xor
stos
adc
xchg
adc
or
fwait
and
js
test
jb
xor
gs
clc
data16
xchg
add
adc
ds
and
dec
xchg
int3
sbb
dec
mov
in
push
or
push
add
jmp
adc
inc
or
adc
stos
or
xchg
fs
mov
xor
sbb
xchg
jmp
adc
loope
xor
and
pop
test
xchg
call
loope
test
aam
popf
nop
xchg
rcl
jl
add
jg
xchg
test
cmp
cmp
je
or
push
xchg
popa
xor
jl
cmc
xchg
mov
mov
pop
pop
loopne
data16
fdivr
enter
dec
rcr
lock
movs
mov
xor
jbe
cmp
or
adc
xor
outs
push
pop
(bad)
cwde
stos
out
cmp
sahf
ficom
mov
xchg
sbb
loop
stos
sub
outs
les
daa
add
add
xchg
js
push
movs
push
(bad)
xchg
mov
xchg
out
lds
pop
add
sahf
or
xchg
dec
xor
or
push
(bad)
shr
inc
mov
out
mov
sbb
call
jnp
inc
jp
inc
adc
push
ds
xchg
ja
jmp
sahf
repnz
test
xchg
jge
jnp
inc
push
push
dec
popf
and
repz
mov
ds
shr
outs
xchg
inc
and
xchg
adc
sbb
pop
mov
mov
cmp
std
js
into
xchg
add
sbb
lods
mov
adc
sub
sar
(bad)
popf
xchg
inc
icebp
ins
mov
shl
xchg
add
pushf
push
jle
mov
push
fwait
mov
in
retf
push
mov
clc
push
sub
mov
mov
lods
adc
in
dec
dec
icebp
xchg
test
test
cmp
adc
scas
xchg
jae
xchg
icebp
movs
and
ja
inc
xor
and
dec
dec
jae
or
mov
aam
add
and
lock
or
out
xlat
sbb
mov
je
or
iret
add
icebp
fldcw
addr16
out
add
arpl
add
xchg
sahf
add
xchg
mov
outs
rcl
les
bnd
or
mov
cs
cmps
add
xor
fimul
das
sub
lahf
aas
pop
xchg
sbb
xchg
pop
scas
xor
mov
pop
mov
stc
add
xchg
sbb
mov
aad
into
mov
test
adc
sti
jae
xchg
test
dec
mov
jmp
fist
mov
in
imul
adc
push
in
push
xchg
xchg
cmp
pop
dec
mov
pop
mov
xor
jns
test
aam
addr16
xchg
xchg
pop
pop
xchg
lods
movs
and
stos
xchg
and
sbb
mov
add
jecxz
mov
push
(bad)
push
daa
or
dec
xchg
test
adc
mov
out
lahf
or
xchg
jge
mov
mov
adc
push
dec
xchg
pmaxsw
call
jmp
cmps
mov
aaa
add
sbb
mov
mov
shl
cmp
mov
cmp
cmp
add
xchg
in
sub
icebp
imul
daa
xchg
sbb
mov
(bad)
es
in
mov
xchg
outs
add
sti
ins
jge
call
sub
mov
icebp
hlt
jecxz
mov
pop
sub
xchg
xor
aas
les
sub
dec
mov
xchg
pop
dec
mov
sahf
inc
fcmovnbe
xchg
lea
and
pushf
xchg
add
mov
dec
sub
(bad)
jnp
cmc
popf
in
data16
mov
cli
std
push
xchg
enter
(bad)
xchg
bound
fmul
xor
stos
outs
mov
xor
sbb
les
jmp
sub
out
fstp
xor
sub
je
and
scas
xor
mov
test
js
(bad)
pop
hlt
mov
push
xchg
and
ret
or
adc
outs
jbe
into
xchg
dec
pop
adc
and
or
xchg
dec
jnp
loop
rcl
pop
ss
xchg
sub
fwait
mov
xchg
inc
daa
xchg
leave
pushf
cmp
xor
test
or
adc
mov
dec
pop
lock
xchg
cmps
popa
pop
js
cmp
outs
lahf
adc
push
add
push
xchg
ret
icebp
cmp
mov
xchg
cmp
imul
pop
pop
pushf
and
fnstenv
dec
loopne
xchg
rol
cmp
add
push
mov
js
repnz
xchg
movs
enter
out
bound
fild
and
cmp
addr16
xor
sub
in
ficom
jge
sbb
xchg
push
call
ja
das
sbb
dec
add
fstp
adc
inc
xor
mov
sbb
fstp
fidivr
fwait
dec
aas
mov
mov
pop
and
dec
xchg
xor
or
(bad)
adc
jnp
imul
mov
test
jl
aas
xchg
cmps
aaa
jg
pop
stos
pop
adc
xchg
inc
jmp
mov
cmp
movs
pop
add
std
es
xchg
fs
pop
xlat
sbb
inc
add
xchg
(bad)
les
inc
je
xchg
sti
cli
retf
outs
push
jg
pop
mov
xchg
push
add
(bad)
xchg
sbb
mov
dec
add
fwait
jne
add
inc
sbb
fwait
pusha
es
test
fist
or
adc
lahf
xchg
loope
fisttp
adc
xchg
adc
jecxz
fs
adc
jb
mov
fst
iret
jbe
jecxz
test
mov
push
push
or
xchg
call
fisttp
cld
fwait
sbb
add
loopne
call
adc
stc
inc
xor
cmp
add
pop
je
(bad)
inc
xchg
into
mov
int3
xchg
and
aas
jle
data16
mov
xor
push
ins
mov
xchg
cld
xor
loopne
xchg
or
lods
cmp
push
pusha
mov
(bad)
cmp
jae
xchg
jge
(bad)
xchg
and
add
data16
mov
inc
jno
aam
or
daa
stos
jmp
adc
jl
mov
bound
ret
jbe
xchg
dec
mov
rcl
cmp
xchg
xor
push
xchg
adc
out
push
inc
mov
or
sub
mov
icebp
mov
cmps
sbb
push
jle
cmp
(bad)
clc
xchg
mov
xor
ds
push
push
mov
xchg
out
repz
inc
pop
lods
mov
mov
xchg
jmp
js
mov
and
sbb
cmp
adc
stos
mov
icebp
mov
xchg
mov
shl
pop
xchg
jne
push
(bad)
cmp
ss
les
sahf
out
cwde
xchg
popa
mov
xchg
xor
cmp
add
fwait
aad
retf
adc
jg
jne
not
test
call
or
push
sar
dec
xchg
fdiv
dec
xchg
push
movs
mov
iret
bswap
mov
sub
and
or
sbb
scas
ret
(bad)
adc
xchg
lods
rol
pop
mov
mov
jne
or
cmps
pop
cmp
mov
loop
mov
fcmovnu
shl
or
or
movs
in
(bad)
cld
cwde
and
pop
adc
sbb
gs
cmp
retf
push
ror
jns
adc
xchg
ds
adc
fsubr
popf
cmp
cld
xor
cmps
imul
adc
inc
cmp
outs
xchg
pop
retf
leave
push
push
pop
pop
add
stos
stos
push
xchg
jmp
mov
and
mov
push
cmps
xor
idiv
fcomp
mov
and
repnz
js
xchg
push
call
jne
xchg
xor
fwait
adc
fisttp
and
mov
pop
outs
or
pop
dec
xchg
adc
push
lock
lds
and
test
mov
mov
xor
outs
mov
inc
sub
fimul
mov
or
add
pop
xchg
xchg
das
jle
ins
in
ret
xchg
(bad)
and
hlt
xor
out
xchg
sub
clc
xor
mov
ins
or
bound
leave
xchg
ins
mov
jnp
cli
sub
mov
pop
mov
imul
inc
adc
fist
lods
jle
xchg
mov
xchg
mov
lea
cmp
inc
out
call
mov
lock
pop
in
imul
in
pop
rcl
mov
movs
cmp
push
jnp
cwde
xchg
retf
and
div
jbe
ret
pop
mov
int
enter
mov
xchg
mov
mov
ret
and
fst
sub
test
shl
hlt
mov
xchg
pop
sub
pop
jle
fiadd
mov
mov
int3
nop
lahf
in
xchg
outs
sub
arpl
test
adc
jo
sbb
imul
sub
add
gs
inc
repz
retf
es
xchg
or
pusha
xchg
shl
psubw
mov
xchg
stos
idiv
jecxz
mov
push
xchg
adc
es
sub
jmp
ins
add
mov
(bad)
xor
inc
mov
mov
xor
movs
test
outs
mov
xchg
sub
cwde
mul
pop
unpckhps
dec
jno
lock
push
xchg
fnstcw
and
mov
call
mov
aas
xor
jo
pop
add
stos
mov
xchg
es
dec
cmp
xor
cld
call
add
ja
add
retf
in
out
jle
adc
loopne
hlt
and
xchg
icebp
mov
popf
adc
sbb
imul
nop
mov
pushf
test
xor
fwait
adc
fs
retf
cs
xchg
rcl
(bad)
enter
xchg
icebp
in
mov
test
inc
sbb
and
dec
push
sub
adc
xchg
pusha
ss
mov
xchg
cli
xlat
loop
add
sub
pop
dec
dec
mov
popa
xchg
mov
pop
movs
or
retf
mov
adc
adc
sti
fcom
xchg
sub
dec
iret
rol
lods
xchg
pop
(bad)
out
dec
and
int3
test
mov
push
fidiv
daa
movs
loope
leave
dec
xchg
jmp
xor
mov
arpl
pop
pop
xchg
or
jns
and
mov
nop
xchg
jle
or
push
pop
add
pop
cmps
rcr
cmpxchg
fwait
xchg
xchg
xchg
xor
add
adc
push
pusha
adc
stos
not
jnp
add
xchg
shl
sbb
add
mov
mov
lods
je
xchg
cmp
mov
inc
xchg
repz
es
(bad)
inc
sbb
hlt
fdiv
inc
or
popf
pop
push
pop
and
push
aam
mov
jbe
xchg
std
push
loope
inc
cmc
test
xchg
inc
fmul
sbb
xchg
dec
test
psubusb
mov
xchg
xchg
pusha
xor
mov
dec
not
mov
push
xor
test
pusha
(bad)
mov
sar
jge
jns
add
bound
dec
add
mov
cmp
inc
pop
gs
pop
jne
xchg
add
jl
adc
pop
mov
pop
rcr
das
stos
stc
ins
fwait
cmp
and
in
inc
xchg
or
dec
mov
xchg
shl
std
pop
and
iret
or
xchg
shr
jo
xchg
sbb
out
xchg
cmp
icebp
stos
ja
mov
and
mov
mov
pop
pop
adc
xor
jae
inc
inc
cli
ret
pop
hlt
push
ins
xchg
mov
mov
stc
sbb
pop
mov
not
ins
cli
jbe
push
pop
push
xchg
jnp
pusha
xchg
cmp
mov
lahf
arpl
repz
add
xchg
mov
sub
(bad)
loopne
xchg
sbb
mov
fwait
out
outs
(bad)
mov
scas
clc
ins
xchg
fadd
in
jo
xchg
mov
(bad)
inc
jae
dec
inc
mov
(bad)
xchg
jle
add
inc
sub
loopne
jmp
inc
xchg
mov
(bad)
jge
xchg
xchg
push
out
push
sub
(bad)
sbb
fldenv
mov
jp
dec
jl
sub
pop
aaa
das
xchg
ret
outs
enter
push
and
fistp
xor
imul
mov
cmp
jb
lods
and
cli
mov
xor
sar
mov
hlt
sub
xchg
clc
(bad)
xlat
mov
pop
jne
xchg
ret
popa
xchg
pop
inc
inc
data16
sub
inc
xchg
xor
mov
(bad)
cmp
adc
mov
loope
adc
pusha
(bad)
iret
in
icebp
xchg
mov
je
rcr
movs
(bad)
or
xchg
adc
jae
je
xor
in
pop
inc
mov
xchg
pop
add
call
sar
mov
xchg
cmps
(bad)
xchg
jge
lock
xchg
shl
in
inc
xchg
ret
test
js
fnsave
pop
mov
xchg
lock
pop
cmps
shl
mov
pop
add
jg
jp
mov
xor
movs
xchg
das
push
mov
cmp
cmp
les
test
inc
xchg
(bad)
xchg
dec
test
and
xchg
fs
sbb
inc
scas
add
pop
xchg
inc
das
dec
gs
ins
jl
imul
ror
pushf
xchg
inc
pop
xchg
pop
in
loop
xchg
out
mov
xor
mov
fnsave
cmc
icebp
mov
shr
add
cmp
imul
xchg
cmp
aas
shl
nop
xor
mov
out
mov
xchg
pushf
mov
sbb
xchg
cld
dec
cmp
mov
pop
sub
xchg
mov
(bad)
and
mov
adc
fs
xchg
out
mov
and
std
push
xor
ja
xchg
(bad)
and
dec
xchg
mov
xchg
push
mov
repnz
icebp
outs
pop
ins
jo
sti
lahf
xchg
push
mov
jmp
psubb
jne
pop
dec
and
aaa
popa
movs
or
mov
pop
xchg
dec
jae
stc
xor
or
and
xchg
js
lahf
xchg
bound
sbb
retf
inc
lods
ret
or
xchg
nop
jp
cmp
in
cmp
push
xchg
int3
das
push
dec
(bad)
push
xchg
ficom
add
fwait
xchg
cmps
jecxz
loope
fld
cmp
mov
pop
retf
and
xchg
push
outs
lock
add
ja
mov
fwait
push
outs
jp
push
mov
sti
xchg
cld
retf
lahf
xchg
mov
popa
xchg
cmps
mov
dec
sbb
ins
repz
jmp
inc
repnz
aas
bound
mov
loopne
pop
cmp
adc
hlt
fisub
mov
xchg
aas
mov
out
loopne
and
push
adc
adc
es
mov
sub
fwait
sbb
rcr
pushf
xchg
inc
(bad)
fbld
scas
sti
and
mov
xchg
inc
adc
dec
xor
lds
or
addr16
jge
int
outs
cmp
xor
xchg
cmps
mov
fstp
aam
sbb
ret
fmul
(bad)
push
push
mov
int3
adc
xchg
sbb
aas
sub
in
mov
adc
add
and
shr
dec
sahf
out
out
test
pop
(bad)
test
xchg
les
mov
xchg
jmp
xchg
pop
mov
int
push
xchg
push
outs
jg
retf
daa
dec
cmps
ja
into
xchg
hlt
inc
pushf
cmp
stos
pop
loope
xchg
mov
mov
xchg
idiv
xchg
ins
mov
bound
xor
(bad)
(bad)
mov
cmp
xchg
dec
add
pop
mov
popf
pop
mov
xchg
xchg
repnz
jmp
xchg
inc
repz
or
xchg
push
leave
es
push
or
fcom
dec
iret
inc
std
fadd
xchg
gs
xchg
mov
das
push
mov
sub
xchg
sbb
mov
retf
fst
ds
adc
arpl
call
mov
jnp
inc
push
repnz
xchg
sbb
call
or
ins
cmc
mov
cli
inc
and
adc
popf
movs
mov
xlat
add
inc
daa
call
xor
pop
xchg
mov
bound
rcr
pop
adc
adc
adc
add
dec
lods
push
leave
mov
fld
mov
shl
inc
xchg
test
and
mov
outs
test
int
or
xchg
push
mov
mov
dec
(bad)
jb
dec
popf
jmp
xchg
ins
pop
lods
ja
mov
cmp
add
les
or
fwait
call
mov
xor
retf
xchg
xchg
push
or
adc
aad
xor
aaa
rol
push
lods
hlt
std
pop
hlt
push
cmps
xchg
out
cmp
stc
sbb
adc
retf
pop
mov
mov
adc
fwait
inc
push
into
add
add
iret
xchg
das
adc
out
test
dec
xchg
test
mov
cmp
xchg
jmp
cli
(bad)
pusha
or
les
addr16
xchg
jbe
push
xlat
mov
(bad)
iret
or
sbb
add
mov
aam
pop
ret
xchg
xor
mov
lea
add
push
fwait
fs
and
dec
xchg
add
pop
test
fcmovnu
mov
xchg
add
mov
xchg
ss
inc
pusha
mov
aam
jno
xchg
or
fwait
lds
in
sub
cmp
lods
jns
jae
test
sbb
push
imul
shr
cwde
xchg
jmp
je
pusha
hlt
lds
and
out
push
lods
fs
xor
xchg
pop
fcmovne
les
pop
xchg
lar
addr16
jp
mov
je
sar
adc
nop
fs
stc
icebp
test
and
xchg
mov
add
nop
jge
cmp
dec
xor
push
(bad)
je
cmp
xchg
sar
call
cld
mov
inc
xchg
inc
mov
aam
push
xchg
jno
dec
xchg
jo
pusha
inc
retf
ins
int
or
popf
jmp
cmps
stc
(bad)
xchg
xchg
mul
(bad)
call
fs
ins
imul
mov
ins
dec
xchg
jge
xchg
aam
popf
push
cwde
dec
sub
push
and
jg
xchg
iret
cmovns
and
hlt
ja
daa
sbb
loope
mov
js
xchg
cmp
push
les
mov
inc
and
mov
loop
(bad)
cmp
lahf
xlat
xor
test
mov
pop
dec
push
scas
push
daa
sub
lods
sbb
imul
(bad)
xor
xor
ins
xcrypt-ofb
cmps
test
arpl
mov
out
fwait
in
scas
mov
fwait
and
xchg
out
popa
repz
jnp
outs
xchg
mov
mov
sbb
fidivr
xchg
inc
rol
jmp
inc
fst
lahf
jbe
xchg
mov
dec
dec
dec
pusha
sub
jl
push
pop
adc
arpl
mov
and
and
repnz
sbb
dec
push
pop
jns
das
mov
xchg
out
cmps
in
xor
cmp
fcmovne
xchg
scas
and
pushf
cwde
dec
xchg
push
and
jbe
xchg
movs
sub
jb
mov
pop
int3
imul
cwde
dec
not
mov
xchg
or
xchg
jae
mov
xchg
in
js
sbb
cdq
jnp
or
xchg
or
int3
pop
xlat
xchg
push
into
mov
enter
adc
out
(bad)
adc
add
loope
pusha
push
mov
xchg
mov
xor
stc
mov
cdq
rcl
xchg
scas
mov
and
or
cmp
rcr
ficom
icebp
cdq
out
ror
adc
mov
aam
mov
test
mov
stos
aad
xchg
adc
add
xchg
fs
ret
popa
dec
ds
push
adc
repz
adc
xchg
jne
pop
add
inc
aad
xchg
mov
ins
or
add
mov
loopne
les
ja
(bad)
int3
mov
xchg
or
jnp
jl
rcl
dec
shl
mov
adc
dec
pop
lods
bound
and
aas
xchg
lods
xchg
pusha
icebp
sub
call
dec
stos
popa
push
xor
ficom
std
pop
xor
xchg
or
dec
cmp
sub
arpl
mov
mov
hlt
dec
mov
push
sbb
pop
mov
fst
in
xchg
call
mov
or
dec
(bad)
xchg
ret
dec
popa
mov
pop
jg
fwait
ret
add
lods
ins
mov
test
ins
xchg
pop
movs
add
je
xchg
xor
inc
mov
xchg
push
retf
xchg
sub
or
push
fisttp
enter
retf
mov
stos
fisub
daa
xchg
mov
ja
je
xchg
dec
cmp
push
mov
jmp
mov
aam
xchg
xchg
or
add
jmp
adc
xchg
mov
das
(bad)
pop
int3
mov
adc
push
inc
add
in
clc
loopne
mov
ins
and
mov
xchg
lahf
pop
cmps
or
out
aad
xchg
fisubr
rol
adc
sti
xchg
mov
or
push
cmp
mov
jae
push
cmp
les
lahf
sbb
mov
xchg
outs
pop
sysenter
std
mov
sahf
ds
add
pushf
dec
xor
loope
cli
call
je
pop
mov
xor
sbb
mov
sbb
ins
pop
je
xchg
add
cli
aad
in
ins
ja
add
xchg
or
arpl
ffreep
enter
les
int3
(bad)
fnstenv
add
repnz
dec
adc
xchg
mov
mov
push
cmp
(bad)
call
adc
test
(bad)
xchg
fwait
cli
jecxz
add
cmc
inc
int3
xchg
xchg
test
pop
mov
js
call
xchg
sti
(bad)
cmp
stos
cmps
dec
jge
inc
sbb
lock
ret
xchg
and
and
adc
(bad)
je
js
add
imul
xchg
push
ret
data16
inc
lods
in
pop
mov
cmps
mov
test
add
xchg
mov
pop
mov
push
mov
lock
not
dec
shl
ror
push
xchg
sub
adc
lds
jmp
adc
call
lds
es
inc
js
mov
jns
dec
cdq
and
push
jne
in
xchg
add
pop
sbb
lea
dec
jns
clc
inc
pop
xchg
fiadd
(bad)
mov
mov
shl
xor
xor
mov
lods
mov
hlt
adc
xchg
xchg
adc
inc
into
ret
out
pusha
mov
mov
inc
sub
mov
pop
pxor
test
into
xchg
pop
and
jo
cmps
sub
mov
dec
bound
or
cld
xor
(bad)
loope
jne
rcl
pop
or
je
test
mov
lods
adc
lahf
xchg
sub
jmp
xlat
adc
xor
cmp
ror
(bad)
popa
pusha
mov
sbb
inc
fstp
cmc
mov
retf
pop
mov
outs
es
scas
adc
fcomip
retf
cli
mov
jle
cmp
jp
or
xor
lock
loop
xchg
(bad)
out
cwde
push
cmps
xchg
adc
and
jae
jle
xchg
inc
clc
data16
dec
ret
icebp
dec
mov
cmp
outs
rol
(bad)
xchg
out
jp
fucomip
popf
popa
xchg
fs
shr
mov
fwait
aad
jnp
mov
pop
mov
inc
aam
stos
sub
(bad)
xchg
mov
ds
je
lea
xchg
test
adc
ret
retf
and
push
mov
push
and
adc
mov
mov
ror
mov
xchg
adc
pop
sbb
sbb
adc
push
bound
xchg
dec
(bad)
mov
int
adc
mov
mov
data16
lods
in
mov
or
xchg
mov
imul
xorps
xchg
adc
outs
inc
cmp
pop
(bad)
mov
aam
and
adc
mov
cwde
je
mov
add
aad
or
movs
fisub
xchg
call
fadd
xchg
cwde
rcr
pop
and
push
(bad)
(bad)
call
cmp
add
test
enter
add
push
xchg
cmp
cmp
fmul
aad
mov
jmp
mov
hlt
add
adc
xor
call
int3
xchg
lahf
adc
mov
cmp
aaa
xchg
ins
push
and
popf
cmps
jg
add
retf
push
lods
rcr
add
xchg
fstp
scas
pusha
ror
rol
(bad)
mov
pop
and
arpl
adc
int
cmp
mov
add
xchg
ds
std
shl
sub
loope
pop
mov
xchg
xchg
xor
stos
push
jno
hlt
ins
cmp
xor
pop
in
adc
cli
push
dec
inc
bound
sti
sbb
repz
fucom
mov
xchg
(bad)
fstp
adc
push
repnz
or
push
call
inc
adc
jecxz
inc
adc
mov
ret
sub
push
dec
js
inc
sub
(bad)
xlat
addr16
loope
pop
mov
cmp
add
push
rcr
jp
xchg
dec
inc
mov
retf
xchg
xor
popf
cmp
xchg
js
and
push
mov
fs
mov
xchg
shr
add
jb
sbb
je
xchg
xchg
test
inc
je
push
pop
fwait
add
push
fnsave
cmp
hlt
test
adc
repz
int
jne
lods
dec
or
add
rcr
inc
in
stc
aam
cmp
xchg
inc
inc
fwait
adc
cmps
retf
ret
and
ins
push
add
xchg
jne
dec
adc
pop
sbb
jns
mov
mov
xchg
imul
xor
jmp
push
sub
push
jmp
push
mov
aam
nop
mov
jno
aam
paddd
mov
sub
rcr
enter
sub
xchg
mov
out
inc
mov
cmps
sub
cmp
jo
sbb
xchg
jmp
loop
xchg
stos
test
mov
arpl
mov
mov
mov
push
jmp
add
adc
mov
rcl
int
cdq
icebp
scas
sbb
xchg
mov
or
xchg
and
xchg
js
dec
fwait
cmp
pop
pop
inc
mov
xchg
add
cmp
imul
jl
xchg
jns
shl
or
and
xchg
popa
mov
jp
xchg
mov
cdq
cmc
pop
aaa
sbb
fidiv
js
shl
mov
adc
xchg
dec
mov
jl
(bad)
(bad)
xchg
jo
(bad)
mov
xchg
add
add
les
es
sbb
(bad)
mov
add
sub
xchg
and
add
mov
jns
je
pop
mov
ret
mov
xor
cld
xchg
rcl
jge
(bad)
lahf
xchg
mov
xchg
cmc
scas
xchg
(bad)
imul
push
cwde
dec
popa
xchg
cmp
push
push
sub
call
sti
adc
in
sbb
xchg
jmp
lahf
aas
dec
mov
xchg
nop
add
or
mov
ret
xchg
cli
add
xor
sub
adc
mov
mov
jbe
ja
mov
jle
aam
ror
call
fwait
xchg
scas
loope
cmp
xchg
push
cwde
xchg
or
gs
inc
xchg
imul
push
sub
xchg
xor
add
pop
sub
adc
sub
int
out
mov
jl
repnz
aaa
push
mov
fwait
adc
sub
pop
sub
pusha
cpuid
nop
rcl
fprem1
adc
out
movs
pop
mov
adc
or
lea
test
xchg
sar
mov
ins
adc
cmp
dec
je
adc
xchg
xchg
push
cld
mov
pop
xor
and
push
pop
lahf
fs
sahf
push
iret
rcr
push
push
push
xchg
sub
aad
stc
fidiv
xchg
test
mov
mov
cmc
jmp
into
mov
jl
fs
jne
mov
lods
fs
lock
fwait
(bad)
out
aam
jmp
jg
lods
fs
sbb
ret
(bad)
adc
out
stc
xchg
(bad)
int3
daa
mov
fst
xchg
push
dec
xlat
push
xor
jns
imul
test
sub
es
pop
xchg
push
cmp
inc
xor
mov
les
les
stos
ins
retf
stc
clc
rcl
xchg
push
out
push
or
mov
je
pop
jmp
aad
push
or
into
xchg
xor
ror
dec
retf
sub
jns
call
mov
mov
fisub
sbb
mov
push
outs
cmp
je
xchg
movs
cwde
mov
push
inc
or
xchg
add
cmps
mov
call
xchg
aaa
dec
mov
arpl
pop
cld
xchg
xchg
xchg
(bad)
push
ret
push
(bad)
push
stos
or
fwait
pop
(bad)
sub
ret
popf
jp
inc
fdiv
test
mov
fwait
adc
cmps
test
jo
outs
xchg
fldcw
pop
pop
sbb
mov
mov
test
add
or
xchg
jne
pusha
cwde
fild
jge
xor
cmc
mov
pop
sub
aad
cmp
xchg
add
pusha
cmp
mov
adc
cmp
sti
fmul
rol
mov
lods
mov
sar
sahf
cmps
cdq
sub
pusha
je
jg
ficomp
call
(bad)
out
jnp
(bad)
js
popf
push
xchg
rcl
aas
xchg
cmp
rol
loope
shr
data16
jmp
enter
pop
xchg
mov
jo
xchg
loopne
inc
inc
repz
call
jae
clc
pop
mov
popa
adc
mov
cvtps2pd
das
js
pusha
sar
xchg
jnp
ins
ja
xor
seta
in
ficom
push
das
scas
or
mov
ret
add
inc
jne
mov
xchg
or
inc
sti
dec
cdq
aaa
cmp
hlt
adc
outs
aad
or
xchg
cld
test
out
loope
popa
cwde
sub
push
mov
sbb
in
pop
jp
mov
inc
shl
shl
js
std
mov
adc
pop
or
mov
dec
sub
xchg
xor
stos
mov
in
push
int
xchg
inc
dec
adc
ins
xchg
xor
les
test
mov
outs
push
xchg
xchg
repz
sahf
aas
ins
mov
hlt
dec
adc
test
push
cmp
xchg
inc
fstp
jmp
adc
or
psubb
or
retf
in
into
ins
xchg
and
les
sub
cmp
mov
jae
das
in
sbb
push
xchg
xchg
jmp
jl
scas
xchg
or
sub
add
xchg
imul
ret
jnp
(bad)
xchg
jae
push
pop
adc
popf
sbb
jno
xchg
stc
ret
leave
loopne
out
mov
mov
and
jp
or
fs
xor
das
aaa
jmp
sti
adc
es
lods
or
outs
inc
jmp
push
xchg
dec
inc
icebp
fwait
push
mov
sub
jne
lds
mov
xor
mov
adc
nop
mov
dec
cmps
xchg
shl
mov
mov
jmp
and
and
inc
xchg
lods
and
cmp
adc
pop
dec
mov
pushf
xchg
mov
mov
aad
imul
mov
adc
aam
js
das
xchg
dec
cmp
out
or
xchg
push
ins
arpl
inc
fsubr
xchg
jo
cdq
or
adc
movs
ja
ds
hlt
test
xchg
push
dec
cmc
rcl
pop
shl
cmp
loop
fistp
mov
xor
neg
adc
and
xchg
cmp
jg
imul
rcr
xor
sbb
mov
xchg
sbb
sub
xchg
mov
jge
adc
aad
xchg
fdivr
pop
cmp
ins
jle
xor
dec
fsub
mov
cli
cwde
aam
pop
out
aaa
mov
sub
sbb
xchg
int3
stc
sbb
fld
mov
xchg
cmps
xchg
push
dec
dec
in
xchg
(bad)
stos
mov
xchg
fwait
mov
pop
mov
adc
jo
dec
xchg
cmp
pop
pop
xchg
lea
or
dec
cmc
daa
xchg
rol
xlat
les
push
dec
adc
pop
fwait
retf
inc
add
push
sub
push
xchg
or
mov
pop
movs
push
inc
inc
lahf
loope
xchg
outs
jbe
mov
push
ficomp
cmp
sbb
xchg
aam
fild
cmp
pop
movs
cli
xchg
inc
nop
fsub
inc
lea
mov
lahf
add
jmp
(bad)
mov
movs
aam
je
lods
dec
sub
test
fadd
pop
xlat
xchg
xchg
pop
sbb
call
xchg
push
popf
loope
lahf
dec
cld
push
fwait
stos
outs
(bad)
fisub
aaa
xchg
cmp
push
(bad)
mov
xchg
xor
jl
pop
cli
mov
xchg
inc
and
fwait
cmp
in
cld
cmp
ins
sub
mov
mov
fld
xchg
addr16
aam
std
aad
xchg
xor
pop
sbb
fwait
or
xor
sar
pop
xchg
cmc
addr16
lds
mov
adc
test
(bad)
jmp
xchg
loopne
push
out
jo
mov
dec
mov
loop
mov
mov
xchg
pop
(bad)
mov
lahf
xchg
bound
xchg
js
pop
mov
stos
mov
xor
outs
pop
rol
scas
adc
fs
mov
jns
inc
mov
stos
jecxz
xchg
bound
push
ins
pop
test
pop
je
mov
cmps
xchg
in
adc
adc
adc
sub
imul
or
push
pop
mov
mov
xchg
mov
mov
ret
sbb
dec
shl
mov
and
les
xchg
xor
mov
xchg
xor
or
pop
push
xchg
xchg
inc
lods
push
ficom
cmp
mov
xor
mov
cmp
stos
dec
lahf
add
test
es
pop
sub
xchg
adc
push
jmp
(bad)
sbb
mov
out
xor
mov
mov
dec
int3
mov
popf
add
retf
cwde
mov
xchg
ret
pop
dec
fst
out
xor
sub
in
int
movs
in
mov
jne
mov
ins
lock
fwait
mov
inc
xchg
dec
sub
mov
shr
fisubr
sub
adc
retf
dec
fwait
sbb
pusha
test
and
adc
pop
std
xor
inc
in
mov
test
scas
xchg
das
or
jl
test
xchg
pop
ins
retf
xchg
out
pop
adc
xchg
sbb
push
lods
xlat
add
mov
lahf
or
mov
jl
cwde
xchg
adc
xchg
mov
ja
push
xchg
jecxz
inc
xor
mov
jnp
add
loop
dec
int3
aaa
sbb
jge
mov
lods
in
fisubr
xchg
cld
iret
mov
mov
sbb
add
ret
sbb
sub
jns
adc
ror
jne
test
loopne
mov
push
adc
into
cmp
xchg
xor
test
daa
dec
es
xchg
jmp
jg
stos
outs
cmp
jp
loop
xchg
jb
(bad)
(bad)
fisttp
inc
pushf
mov
xchg
cmp
adc
mov
shr
and
int3
xchg
jne
cmp
mov
xchg
ja
loopne
dec
(bad)
imul
mov
pop
mov
mov
xchg
sub
je
sahf
into
cs
xchg
mov
mov
xchg
cmp
pop
xchg
popa
inc
aas
sbb
add
hlt
cmps
pop
xchg
dec
movs
fnstsw
ins
push
xlat
lock
lss
es
sbb
or
mov
push
(bad)
xchg
inc
out
or
push
adc
add
scas
ss
(bad)
xchg
and
pop
push
hlt
mov
retf
ins
xor
add
cwde
xchg
cmps
and
or
ss
fist
pop
out
jge
outs
mov
rcl
jmp
push
xlat
mov
aaa
xchg
adc
xchg
popf
retf
mov
xchg
pop
xor
iret
mov
xchg
jecxz
cli
test
loopne
xor
mov
mov
push
enter
push
(bad)
xchg
push
or
dec
ins
dec
adc
mov
and
rcl
xchg
jp
and
adc
xchg
adc
pop
dec
inc
loop
mov
xor
mov
xchg
rol
dec
sbb
mov
jae
aam
sti
mov
add
xchg
in
lea
inc
sub
sahf
pop
mov
xchg
xor
dec
xor
mov
or
sbb
mov
sbb
push
add
hlt
push
in
test
mov
je
xchg
and
stc
mov
xchg
add
xchg
add
add
fwait
xor
add
adc
icebp
xchg
movs
cmps
ret
lock
xchg
mov
loop
mov
push
fwait
aad
dec
dec
cwde
aam
pusha
sub
sbb
imul
xchg
push
mov
imul
(bad)
jmp
call
push
sub
xchg
add
adc
inc
jge
out
loop
icebp
hlt
aam
xchg
mov
fwait
xchg
imul
sub
xchg
inc
mov
and
inc
xchg
arpl
sub
inc
jns
popa
xchg
or
(bad)
xchg
or
pop
scas
xchg
cmps
in
stos
aam
adc
out
pusha
inc
fcom
into
call
cmps
xchg
mov
iret
cmps
outs
add
sahf
data16
daa
lea
xchg
xchg
ins
fsubr
add
pop
and
inc
rcr
ins
hlt
xchg
sti
int3
lahf
mov
and
(bad)
xchg
aam
dec
xlat
div
nop
jmp
mov
xor
cmp
ret
mov
cmp
xor
repz
mov
sar
xchg
mov
xor
sahf
imul
inc
push
xchg
lds
pop
enter
jge
ds
les
push
xchg
sbb
cli
dec
mov
lahf
mov
mov
adc
xchg
inc
jo
std
add
cwde
cmp
inc
and
push
jbe
mov
adc
push
xchg
lods
inc
xchg
cmp
call
adc
mov
mov
dec
mov
mov
pop
or
inc
mov
mov
xchg
aam
xor
in
fdivr
sub
and
(bad)
pushf
jno
add
pop
dec
xchg
push
jle
outs
scas
bound
xchg
sub
hlt
cmp
int
sete
cmps
mul
mov
and
stos
pop
mov
cmp
cmp
inc
stos
adc
cli
xchg
shr
mov
hlt
mov
jmp
pop
movs
xchg
inc
sbb
jle
add
push
nop
dec
mov
retf
dec
push
or
ja
jmp
lea
rcl
adc
fwait
and
je
jno
cmovs
cmp
ja
cwde
stos
pop
mov
push
in
sub
mov
and
mov
or
lds
inc
je
xchg
fs
and
dec
sti
xchg
scas
mov
loop
mov
xchg
cmp
pop
xchg
xchg
shl
cli
mov
xchg
rcl
xlat
lods
and
cs
push
mov
jae
aam
cmps
pop
jno
iret
xchg
loopne
movs
sub
fidiv
jmp
in
std
(bad)
sahf
push
xchg
xor
mov
cmps
daa
jmp
cmp
pushf
mov
jle
jl
push
push
stos
mov
sub
xlat
popa
mov
mov
mov
jl
test
lods
(bad)
ins
test
xchg
xor
rcl
cld
ret
jl
nop
xchg
push
arpl
mov
push
out
test
xchg
fs
mov
mov
mov
xchg
xor
in
and
adc
shl
test
test
adc
loope
ret
cwde
cdq
xchg
mov
add
jb
add
ds
push
or
xchg
je
lahf
mov
and
jmp
xchg
add
sahf
daa
shl
mov
mov
inc
cmp
pop
push
add
leave
xchg
pop
test
push
and
jne
inc
stos
ja
div
push
mov
outs
not
(bad)
ret
jmp
xchg
sub
loopne
xchg
fnsavew
inc
mov
inc
dec
adc
icebp
sbb
dec
xor
xchg
inc
mov
repnz
sbb
(bad)
stos
movs
sbb
pop
out
cli
data16
iret
jge
xor
push
popa
int3
repz
sbb
or
xchg
mov
sahf
pop
jl
xchg
mov
cmp
sbb
test
adc
ds
xchg
jecxz
fisttp
or
(bad)
(bad)
loop
loopne
sub
jmp
xor
dec
jp
xor
mov
push
xchg
inc
mov
sar
adc
jle
xchg
ficomp
dec
push
mov
xchg
(bad)
cmps
or
xchg
call
sbb
ret
ja
ficom
call
xor
inc
cmp
je
xchg
xor
sub
int
xchg
mov
sub
jmp
pop
daa
les
xchg
loop
jle
popf
pop
dec
xor
fnstsw
push
repnz
sahf
js
jno
(bad)
aam
in
xchg
cmp
out
xchg
sbb
ret
xchg
dec
sub
xchg
push
lock
fstp
pop
movs
ret
and
pop
rol
fbld
(bad)
jmp
lea
sbb
out
fwait
inc
js
test
xchg
adc
jae
jbe
aam
test
imul
add
sbb
mov
adc
cmp
mov
test
adc
mov
iret
loope
rcl
jb
sti
je
jmp
ret
test
in
inc
sub
cs
fbstp
add
fwait
lods
pop
push
add
movs
stos
rcl
retf
mov
xchg
adc
into
push
xchg
clc
xchg
test
imul
sbb
cmp
xchg
in
and
test
fwait
dec
pop
jg
imul
xchg
imul
adc
rcl
std
lods
add
pop
je
nop
push
xchg
retf
test
fst
lea
xchg
cli
sub
in
int
adc
popf
add
xchg
jmp
int3
xchg
cli
mov
test
push
out
(bad)
push
pop
xchg
(bad)
into
cmp
popa
xor
fmul
xchg
fstp
test
and
pop
loope
clc
ss
jnp
jmp
xchg
inc
adc
xor
repnz
mov
inc
jle
cmps
xchg
fbld
imul
cmps
in
xchg
mov
push
in
out
xchg
and
test
sbb
xchg
je
push
std
mov
pop
mov
test
dec
call
out
add
cmp
cli
mov
mov
xchg
mov
bound
enter
mov
stos
in
scas
jnp
mov
jne
icebp
shl
cmp
test
xchg
jo
mov
push
call
xchg
sub
int
test
mov
clc
xchg
shl
dec
imul
sub
and
enter
(bad)
cmps
ja
dec
xchg
ss
(bad)
xchg
mov
jnp
cli
js
cmp
adc
icebp
(bad)
fwait
les
adc
ja
dec
cmp
hlt
mov
loope
sbb
loopne
out
aas
sbb
adc
push
fild
jo
call
out
dec
enter
cs
mov
fstp
add
rcl
stos
dec
xchg
or
cs
jg
dec
xchg
push
icebp
out
lds
hlt
in
xchg
jnp
fld
xchg
clc
sbb
fst
inc
pusha
xchg
sub
push
test
mov
sti
dec
ret
xchg
cs
stos
(bad)
xchg
jge
scas
icebp
adc
mov
sbb
out
mov
push
inc
aas
push
in
(bad)
out
jo
and
ins
mov
mov
hlt
jecxz
pop
xlat
bound
ror
call
jns
dec
rcr
dec
dec
cmp
push
loop
js
loopne
lock
pop
jg
scas
mov
mov
ins
popf
sub
mov
fsub
jmp
or
pop
stc
xchg
jp
pop
or
mov
adc
retf
add
aam
xchg
je
or
push
aam
in
xchg
stos
aas
inc
ret
cmp
jp
adc
xchg
sbb
mov
xchg
xor
xor
adc
outs
xchg
aad
mov
push
xchg
mov
push
or
mov
xchg
jo
ds
pop
je
xor
xchg
sub
push
jge
pop
mov
mov
add
ss
inc
push
jmp
sbb
test
xchg
sub
loope
cli
cmp
xchg
aaa
jae
add
rol
stos
pop
xchg
mov
icebp
push
(bad)
pop
pop
cwde
fwait
je
pusha
dec
xchg
out
(bad)
or
jb
push
call
xchg
and
fbstp
ds
xchg
jmp
xchg
mov
mov
mov
cld
sbb
in
aaa
cmp
and
lea
pop
jmp
mov
cs
xchg
mov
shr
imul
inc
jns
call
push
fs
xchg
add
mov
mov
movs
mov
pop
mov
out
inc
call
sbb
rcr
aad
push
xchg
fadd
xor
jmp
add
cmps
push
mov
sub
push
loop
add
not
loopne
call
sbb
xchg
adc
pop
call
pusha
gs
sbb
cli
adc
push
fcmove
loop
and
jb
fwait
ret
mov
mov
xchg
das
push
mov
xchg
and
lahf
popf
mov
dec
adc
push
mov
xchg
mov
push
mov
mov
xchg
nop
mov
scas
fmul
jl
xchg
sbb
mov
xor
sub
xchg
dec
mov
loop
mov
xchg
jmp
fcom
fstp
rcl
mov
sub
sbb
sbb
push
sub
scas
iret
xchg
sti
adc
ins
dec
pop
in
mov
popf
push
es
adc
jno
pushf
mov
xchg
xchg
cld
mov
and
and
jns
mov
jo
xchg
popf
dec
jle
ret
add
inc
je
lods
aam
into
xchg
or
stos
xor
clc
add
push
dec
cmp
mov
mov
std
sub
test
pop
lock
jl
sbb
xchg
sub
repz
xchg
xchg
jecxz
test
loope
fist
sahf
std
cmp
jp
add
cmp
and
or
adc
mov
jns
mov
mov
inc
adc
push
pusha
test
and
xchg
dec
mov
xchg
adc
xor
imul
ins
lea
jmp
xchg
fist
mov
leave
ins
xchg
daa
movq
popf
(bad)
and
push
int
dec
jae
mov
retf
mov
rcr
mov
xchg
dec
mov
xor
(bad)
fdivrp
(bad)
xchg
(bad)
in
ins
cmps
ror
pop
scas
jbe
add
cmp
hlt
in
and
mov
(bad)
pop
jne
sbb
lds
js
cwde
xchg
dec
push
adc
push
inc
gs
sbb
sbb
push
xor
das
(bad)
mov
sbb
xchg
xchg
push
fstp
xchg
stos
mov
dec
inc
pop
popa
cmp
sbb
mov
ins
ins
daa
pop
and
xchg
ficomp
mov
and
mov
imul
inc
mov
dec
jl
pop
call
adc
loopne
imul
xchg
mov
cmps
pop
sbb
mov
mov
mov
push
xchg
aas
daa
cdq
fcomp
mov
arpl
adc
int
pop
inc
test
test
jb
push
cmp
inc
test
mov
pop
dec
dec
rcl
popf
xchg
retf
jl
xchg
(bad)
sahf
xchg
cld
mov
call
rol
push
je
cli
mov
clc
into
adc
jno
and
repz
cmp
mov
jmp
and
stos
push
xor
(bad)
jle
ja
ret
inc
ins
fwait
mov
add
cmp
xlat
fs
mov
xchg
push
inc
xchg
mov
jg
fdiv
cld
stc
xchg
mov
in
xchg
outs
xchg
out
jo
je
cmps
mov
lds
inc
mov
aam
ja
imul
and
adc
dec
sahf
adc
or
rcr
xchg
push
push
cdq
out
push
stos
fwait
sub
inc
les
ds
xchg
(bad)
pop
xchg
jecxz
xchg
scas
std
out
(bad)
sbb
jne
in
add
dec
inc
fcmovnu
(bad)
cmp
jmp
cmps
fnstcw
sbb
jmp
dec
fwait
inc
popa
dec
mov
adc
addr16
dec
xchg
lea
jnp
xchg
(bad)
out
ret
adc
xchg
imul
call
jg
xchg
fs
rcr
mov
das
in
ins
mov
lahf
inc
xchg
add
mov
jae
xchg
data16
jle
dec
adc
clc
sub
test
test
xchg
jae
mov
outs
retf
cmp
mov
sub
sub
add
mov
out
adc
fdiv
mov
mov
push
int3
xchg
std
sub
shl
xchg
inc
sub
sub
sar
jnp
mov
or
dec
mov
mov
jg
xor
push
js
loop
lea
ret
inc
out
and
scas
arpl
mov
jmp
xchg
aad
mov
ss
xchg
aam
cmps
loop
dec
(bad)
xchg
mov
cwde
fbstp
mov
retf
rcl
mov
adc
in
loope
push
and
lock
aam
cmp
out
mov
inc
hlt
call
adc
xchg
sub
dec
and
pop
mov
into
adc
xor
cmps
xor
mov
ja
(bad)
(bad)
call
sti
pop
xchg
out
cmp
mov
data16
cmp
mov
iret
xchg
sahf
xchg
pop
rcl
and
test
sbb
jnp
xor
(bad)
add
adc
arpl
xchg
js
cmp
nop
xchg
inc
dec
push
cmp
bnd
xchg
popf
mov
xor
cmps
test
mov
das
cmp
cli
call
out
adc
mov
xchg
mov
push
das
fist
std
xchg
aad
pop
test
aam
push
cwde
addr16
sbb
in
not
pop
push
int3
sub
dec
inc
mov
test
xchg
jmp
push
jmp
cwde
in
adc
fwait
xchg
das
gs
sahf
inc
or
pop
or
mov
fs
push
mov
jae
inc
fnstsw
mov
lea
mov
pusha
mov
shr
imul
popa
mov
add
mov
cmp
aam
cmps
fs
repnz
xchg
add
scas
xor
ror
xchg
cmovl
mov
push
fs
jae
push
mov
sub
adc
(bad)
pop
mov
neg
inc
adc
dec
sub
xchg
jns
add
mov
mov
xchg
aaa
jmp
push
iret
xchg
cmp
add
imul
test
(bad)
mov
cld
mov
xchg
xchg
fisub
cmc
call
pop
dec
xchg
jl
out
jmp
xor
pop
mov
push
inc
push
shr
xor
xchg
add
in
xchg
sbb
pop
mov
xor
jne
xor
loopne
adc
push
sahf
add
xchg
outs
rol
xor
or
mov
stc
fwait
jno
arpl
adc
mov
sub
cmp
push
test
push
push
jp
mov
popa
jns
neg
xor
dec
push
jb
pop
xchg
dec
and
pop
push
leave
xchg
xor
fs
add
and
xor
push
les
pop
mov
adc
fnstcw
xchg
cli
shl
jb
cmc
dec
xchg
movs
pop
ja
dec
xor
enter
repnz
gs
xchg
pusha
arpl
adc
shl
xchg
adc
xchg
push
mov
das
mov
shl
stos
add
cmp
push
xchg
xchg
test
mov
xchg
sub
xchg
adc
or
repnz
mov
dec
push
mov
mov
sbb
data16
xlat
hlt
addr16
repz
add
xchg
int
sub
ds
je
lea
mov
out
iret
cdq
addr16
call
fild
jg
xchg
push
clc
nop
popa
bound
xchg
cmc
pushf
fldcw
jnp
int
push
les
cmps
pop
mov
dec
inc
xchg
in
push
daa
mov
xchg
xchg
ins
xchg
xor
adc
fistp
mov
inc
call
sbb
popf
add
lea
pop
sub
pop
imul
and
jmp
(bad)
scas
inc
sti
fwait
aas
data16
test
push
shr
xchg
stc
and
xor
popa
repz
scas
push
jae
pusha
pop
adc
or
xchg
stos
jo
(bad)
jmp
jns
adc
adc
pusha
pop
xlat
ss
aaa
pop
jbe
xchg
mov
or
mov
aam
clc
cmp
out
xor
(bad)
pop
mov
stc
or
aas
xchg
cmp
rcl
test
and
call
push
mov
inc
mov
xchg
scas
push
pop
(bad)
dec
xchg
fidivr
leave
fmulp
daa
xchg
xchg
ins
or
jns
cwde
push
xchg
out
lea
mov
mov
push
ret
hlt
xchg
mov
sub
push
test
push
adc
aaa
pop
sahf
out
mov
sub
push
add
imul
cmp
fcom
ret
inc
shr
scas
mov
xchg
jae
adc
inc
dec
xchg
(bad)
jmp
xchg
jge
xor
xchg
sbb
test
mov
in
(bad)
mov
nop
(bad)
imul
mov
popa
add
shr
push
neg
xchg
in
sbb
push
or
int
jno
jmp
xchg
inc
mov
sahf
adc
sqrtps
out
xchg
je
sbb
test
jmp
push
jg
pop
test
mov
imul
div
aam
pop
cmc
pop
and
test
imul
push
xchg
lods
push
xlat
jle
pop
aaa
mov
xchg
mov
ja
inc
xchg
push
std
push
push
fcomp
dec
inc
xchg
aaa
and
in
fnstcw
cpuid
xchg
xlat
leave
xchg
cmp
ret
rcr
stos
sahf
xor
and
inc
dec
stos
xlat
aam
(bad)
bound
sahf
mov
out
xchg
leave
push
icebp
ds
mov
xchg
rol
sub
movs
sbb
xchg
cmps
(bad)
out
xor
loop
inc
stc
adc
aam
xchg
mov
jne
or
scas
in
inc
dec
xchg
xchg
popa
pop
inc
mov
ret
adc
les
sub
xchg
dec
add
or
aad
les
xchg
lods
shr
es
ret
mov
xor
adc
call
cmp
js
pop
xchg
mov
sar
and
into
mov
es
pop
daa
cmp
ret
ss
xchg
or
lods
jp
and
movs
xchg
xchg
(bad)
cmp
push
mov
push
out
div
adc
daa
leave
pop
ds
and
ins
(bad)
not
push
mov
mov
cmp
in
aaa
fstp
jne
(bad)
pop
adc
mov
pushf
mov
xchg
or
xchg
imul
inc
jmp
sti
sub
fsubr
mov
or
xchg
cmp
lea
stos
ss
or
inc
inc
sar
out
mov
aaa
jno
xchg
pusha
adc
xchg
mov
fcomp
pushf
mov
and
inc
cmp
add
test
fild
cmps
mov
mov
jmp
loopne
xchg
mov
lds
xchg
imul
pop
bound
gs
ficom
mov
aam
shl
mov
outs
or
les
sbb
or
dec
xchg
mov
lds
jo
aam
loopne
fcom
sbb
int3
jno
retf
jl
xchg
inc
cli
les
xchg
xor
xchg
cmps
xchg
sbb
jl
rcl
sbb
or
mov
pop
mov
pop
bound
aas
xor
adc
jbe
cmps
inc
sub
mov
fisttp
xchg
popa
dec
mov
out
xor
lods
xchg
js
adc
inc
xchg
call
stos
push
in
nop
pusha
xchg
sbb
fsubr
loopne
daa
call
cmp
in
or
adc
cmc
jmp
lahf
sbb
sbb
ss
out
xchg
adc
test
stos
xchg
pop
das
dec
cmps
jno
test
test
movs
dec
add
pushf
xchg
and
or
rol
loope
mov
les
std
xchg
retf
loop
inc
retf
add
mov
jmp
mov
in
scas
mov
mov
xchg
cmp
stos
out
hlt
ins
arpl
xchg
fcmovnb
daa
rol
test
xchg
jge
pop
add
xchg
xor
mov
mov
dec
xchg
inc
pop
pop
inc
out
fs
jbe
xchg
fwait
(bad)
fldenv
dec
pop
xchg
es
bound
mov
or
push
fwait
fs
cmp
mov
je
mov
xchg
mov
push
cwde
xchg
clc
xor
(bad)
mov
dec
pop
and
out
and
in
inc
into
pop
jnp
xchg
cmp
inc
cmc
out
pop
pop
xchg
in
in
mov
test
xchg
sub
lods
add
dec
push
and
out
mov
dec
push
icebp
cli
enter
xchg
mov
mov
aaa
push
adc
jb
adc
dec
gs
hlt
outs
xor
mov
push
dec
adc
dec
out
popa
xchg
call
mov
pusha
sub
xchg
push
lsl
xchg
rcl
iret
jl
xor
jp
js
ret
add
xchg
fwait
jge
add
scas
inc
fwait
enter
push
lock
cwde
jo
xor
mov
stc
js
out
or
dec
int3
jg
lock
lods
retf
sahf
lods
cli
fucomi
xchg
arpl
imul
sub
jbe
jns
cmp
xchg
test
mov
xchg
mov
xchg
movs
push
push
retf
popf
push
mov
pop
daa
imul
dec
xchg
lods
mov
mov
cwde
(bad)
mov
mov
xor
in
std
outs
adc
ret
push
rcl
push
mov
xor
xchg
jg
inc
xchg
in
mov
(bad)
xor
push
ins
inc
xchg
push
fs
cmc
fcom
mov
cmp
mov
add
shr
xchg
sbb
mov
loopne
pop
lahf
les
push
adc
addr16
call
or
push
sub
sar
dec
cdq
fwait
sbb
out
xchg
dec
outs
dec
pop
xchg
cwde
push
arpl
adc
lods
mov
sahf
xchg
mov
lock
xchg
sbb
pushf
ss
iret
es
in
call
xchg
push
out
shl
mov
mov
imul
int3
in
xchg
cdq
mov
dec
fwait
repnz
xchg
outs
fnstsw
xchg
imul
mov
and
mov
xchg
rcl
sub
mov
pop
sbb
cmp
stos
and
xchg
or
mov
xchg
ret
mov
je
imul
ja
inc
xchg
sub
in
pop
neg
mov
lods
mov
stc
loope
mov
jb
adc
jg
jbe
into
xchg
call
xor
push
adc
shl
adc
scas
dec
iret
push
mov
adc
jbe
out
xchg
arpl
pop
dec
mov
jns
mov
and
jbe
xchg
xchg
ins
pop
popf
frstor
cmp
add
push
stos
xchg
or
xchg
push
dec
ins
xor
aaa
mov
and
imul
xchg
(bad)
pop
js
int
sbb
mov
pop
sbb
cmps
jmp
xchg
add
mov
adc
scas
inc
fs
jne
in
rcl
ins
mov
mov
mov
sub
ss
jb
push
inc
fwait
and
mov
jecxz
xor
int
(bad)
xchg
push
cmps
xchg
xchg
sbb
xor
cmp
mov
fst
div
lea
mov
mov
mov
ins
imul
sbb
xchg
xchg
push
rol
inc
push
(bad)
in
inc
into
mov
je
in
xchg
test
xchg
or
ret
not
xlat
leave
inc
sbb
xchg
pushf
test
jle
scas
sbb
(bad)
mov
popa
mov
push
jg
xchg
mov
add
les
cmp
mov
sbb
in
fwait
mov
scas
stos
aaa
push
je
retf
add
inc
mov
in
xchg
outs
loopne
pushf
ret
mov
xchg
push
xchg
sub
nop
les
imul
jno
fs
or
push
xchg
xsaveopt
jne
dec
xchg
aaa
pushf
inc
fcmovnu
pop
jae
mov
into
(bad)
stc
and
sbb
xchg
sub
call
add
xchg
cwde
std
push
or
xor
leave
xchg
pop
clc
sub
ret
jne
cld
xchg
push
cmc
sub
dec
ror
fstp
call
into
xchg
and
das
lock
iret
rcl
mov
jmp
xchg
ja
cmp
inc
xchg
repnz
sub
and
sub
dec
inc
ds
outs
xchg
aam
int
mov
adc
pop
sbb
cmp
xor
jmp
scas
jl
nop
fstp
popa
cmps
(bad)
loop
pop
not
push
mov
mov
inc
xchg
fcom
test
sbb
push
lds
lfs
int
stos
xchg
into
push
xor
imul
adc
in
mov
sti
inc
mov
fist
xor
outs
xchg
add
jne
mov
loope
bswap
in
mov
rcl
sub
or
mov
add
imul
rcl
dec
sub
xchg
lahf
sbb
sub
fisubr
xchg
int
rol
or
dec
mov
and
pop
add
fs
clc
bound
mov
xchg
sub
sbb
xchg
jne
inc
mov
xchg
inc
sub
or
popa
fs
int
jge
push
ret
mov
bound
jecxz
adc
imul
adc
cmp
mov
xor
hlt
fstp
xchg
dec
adc
lahf
loopne
pop
ds
xchg
icebp
mov
inc
mov
xchg
and
ins
jne
sbb
(bad)
xchg
aaa
rol
jno
sub
std
loope
mov
xchg
jl
stc
arpl
pop
sbb
(bad)
ins
cld
inc
rcl
mov
in
pop
pop
xchg
movs
loopne
dec
add
xchg
push
stos
pop
bndldx
dec
pop
jo
xchg
xchg
sub
add
les
dec
mov
rcl
push
xchg
retf
fadd
inc
clc
jl
adc
test
mov
(bad)
(bad)
push
js
adc
jecxz
sub
bound
sahf
mov
je
xor
xchg
dec
and
fcmovb
int
push
xchg
push
stos
fbstp
fwait
retf
mov
add
cmps
jmp
ins
cli
daa
fwait
test
mov
(bad)
jge
aaa
stc
mov
fbstp
shl
push
addr16
xchg
js
div
aad
dec
adc
(bad)
int
icebp
out
jmp
adc
xchg
dec
shl
pop
xchg
iret
dec
push
xchg
fst
mov
adc
push
test
mov
popf
neg
pushf
(bad)
js
pop
aaa
sub
cld
xchg
mov
mov
inc
jns
pop
or
xchg
fdivr
mov
out
mov
std
sbb
aam
daa
pop
(bad)
xchg
test
popf
iret
stos
scas
xlat
mov
xchg
inc
sbb
push
movs
push
pop
in
dec
dec
int
mov
mov
adc
js
or
cmc
jecxz
adc
mov
lea
mov
cmp
dec
inc
xchg
mov
sahf
or
mov
retf
mov
or
pushf
push
rcr
push
xchg
je
lea
rcl
sahf
xchg
mul
fcomip
xchg
(bad)
cld
xchg
fs
xchg
add
arpl
popf
jns
jl
test
adc
mov
dec
sbb
inc
stc
xchg
dec
mov
add
pop
jg
xchg
jmp
(bad)
mov
js
adc
pop
jle
mov
xchg
and
(bad)
iret
icebp
pop
in
xor
mov
xchg
loope
sub
cmps
in
xchg
rcr
push
fsubr
fst
(bad)
cdq
xchg
ds
fld
jecxz
sub
lahf
and
and
aaa
sbb
xchg
popf
jbe
mov
mov
push
or
mov
hlt
cmps
leave
imul
test
mov
ret
xchg
xchg
inc
pushf
fs
stos
repz
or
loope
mov
ins
int
mov
add
shr
loopne
rol
lahf
sbb
jge
mov
adc
fmul
call
mov
sub
mov
dec
sbb
(bad)
xor
push
cmps
fmul
dec
dec
xchg
ins
mov
push
(bad)
fwait
inc
idiv
and
xchg
push
inc
xchg
lods
mov
cmp
outs
or
add
adc
xchg
sti
cdq
movs
sub
xchg
or
dec
test
inc
imul
pop
xchg
out
loop
cdq
xchg
xchg
cmps
adc
arpl
dec
xchg
movs
xchg
clc
addr16
xchg
leave
rol
xchg
loopne
sbb
inc
xor
mov
cdq
xchg
ret
push
mov
cmps
and
rcl
xchg
xchg
out
xchg
in
std
push
sub
mov
mov
fwait
add
out
and
or
xor
and
cmps
icebp
sbb
jne
cld
je
xchg
cdq
jb
jl
xor
xchg
(bad)
nop
aaa
stos
(bad)
sub
jo
fwait
mov
mov
(bad)
retf
xchg
in
push
lods
dec
and
xchg
xchg
sbb
push
inc
in
fcom
mov
adc
mov
xchg
les
les
xchg
shr
int3
xchg
cmp
stc
(bad)
enter
mov
lahf
jge
fwait
cmp
dec
push
xchg
xchg
(bad)
rcl
fstp
fmul
sti
adc
mov
add
in
adc
mov
xchg
(bad)
mov
sub
add
xor
or
or
jecxz
imul
in
mov
or
xchg
fnsave
push
jmp
or
aam
xor
xchg
rol
inc
jae
cmp
xchg
jb
jecxz
icebp
aam
ror
int3
shr
ss
xchg
outs
jmp
test
cmp
dec
and
mov
mov
cmp
(bad)
xchg
outs
or
xchg
jmp
inc
mov
pop
xchg
cwde
push
sti
pshufw
xchg
out
xchg
dec
sub
jmp
or
xor
fmul
jnp
imul
clc
xchg
es
mov
jo
sbb
and
xor
xchg
and
out
pop
aam
cmp
xchg
or
dec
and
aaa
add
sbb
add
adc
add
shr
or
push
mov
push
inc
pop
xor
pop
bound
pop
xchg
sub
cmp
rol
out
pop
or
movs
ret
or
rcl
gs
adc
out
xchg
ins
add
jbe
adc
add
jns
push
(bad)
xchg
cwde
and
outs
rol
std
pop
xchg
imul
jmp
mov
xchg
addr16
test
ret
arpl
pop
sub
mov
(bad)
repz
cmps
inc
das
pop
retf
aad
outs
and
stos
xchg
mov
xlat
sub
push
rcl
daa
xchg
sbb
mov
dec
jae
push
xchg
jl
add
ins
lds
jp
cld
xchg
cmp
clc
jmp
mov
stc
push
and
loopne
in
ins
jb
xchg
ja
les
or
pop
mov
xchg
xchg
dec
pop
ret
mov
loopne
inc
xchg
(bad)
sub
mul
ins
adc
and
cmp
movs
into
push
aam
popf
sub
mov
mov
ret
test
sbb
cmp
(bad)
xchg
mov
repnz
or
jno
jmp
call
dec
push
scas
xchg
imul
dec
jl
ins
cmp
mov
fwait
or
mov
or
cs
xor
jl
xchg
bnd
inc
jg
fadd
jp
out
gs
popf
xchg
push
loope
shl
out
sub
rep
cmp
sub
xchg
in
mov
sub
call
icebp
ja
mov
lock
scas
rcr
xor
clc
xchg
imul
out
xchg
xchg
mov
loope
mov
pop
sbb
retf
xor
add
mov
jne
jb
fnstsw
push
and
sti
ficom
dec
out
fwait
rcr
lods
dec
inc
sbb
mov
mov
scas
push
xchg
lds
sub
sbb
imul
arpl
adc
push
and
lea
xor
hlt
mov
jbe
xchg
loop
xor
movs
add
xchg
mov
jmp
je
(bad)
xchg
ins
sbb
or
xor
xchg
adc
inc
inc
pop
sbb
xchg
fist
pop
int
fdiv
xchg
sbb
das
mov
mov
inc
add
js
mov
sar
xchg
inc
sbb
xor
xor
adc
dec
ror
pop
jle
sub
nop
xchg
pop
and
add
xchg
mov
adc
pop
movs
jae
lea
dec
xchg
xchg
mov
push
xchg
dec
test
pusha
and
pop
jmp
test
xchg
adc
inc
es
aas
aam
fs
or
xchg
ss
cwde
lock
aas
xchg
pop
(bad)
xlat
les
sub
xchg
lods
inc
aad
pop
push
xchg
dec
data16
push
jne
mov
ret
mov
cwde
lahf
adc
cli
push
push
nop
mov
aas
js
xchg
adc
jns
mov
inc
hlt
mov
jbe
dec
fcom
dec
pop
movs
stos
jns
sbb
jbe
adc
cmp
or
sub
sub
aad
xor
das
xchg
inc
test
lock
ins
push
or
mov
xchg
xor
fcmovnb
lods
push
sub
xchg
jmp
or
jg
sbb
idiv
sbb
or
mov
xor
test
pusha
shl
or
mov
dec
mov
mov
mov
dec
push
dec
xchg
xchg
adc
cmp
fstp
xchg
push
aad
inc
sbb
out
adc
mov
jg
jle
sbb
xchg
and
push
(bad)
xchg
lds
shl
mov
call
xchg
inc
pop
sub
xchg
sahf
ret
pop
mov
sub
push
sbb
enter
ds
pushf
adc
jae
pop
or
xchg
dec
pop
adc
sahf
inc
mov
adc
clc
adc
mov
cdq
test
adc
jne
push
xchg
test
lea
sbb
jle
xchg
jnp
ins
mov
dec
or
xchg
imul
scas
(bad)
pop
push
and
fwait
ret
cs
daa
js
xchg
or
jecxz
inc
sub
adc
push
push
lea
jl
outs
sub
xchg
int
paddsb
imul
cli
xchg
std
ds
mov
xchg
dec
jle
xchg
sub
dec
push
push
add
dec
repnz
mov
(bad)
loopne
fs
retf
ret
out
mov
cmps
xor
pop
or
xchg
jo
jmp
mov
and
push
push
adc
lock
ja
cmp
js
xchg
sub
push
into
xchg
imul
mov
xchg
pop
adc
or
or
mov
push
push
into
arpl
xchg
ret
mov
xchg
pop
sbb
adc
stos
push
in
push
hlt
loopne
not
mov
addr16
outs
add
retf
mov
adc
(bad)
mov
mov
jnp
scas
mov
xchg
out
fdiv
xchg
push
mov
ja
xchg
jne
aaa
mov
dec
stos
push
aam
pop
adc
xor
cmp
mov
outs
nop
inc
cmps
cs
div
jp
stos
das
dec
mov
pop
sbb
jmp
pop
push
and
mov
ins
push
push
out
mov
add
movs
dec
aad
retf
loope
sahf
aam
int
enter
lods
adc
mov
adc
cwde
cmovo
xchg
pusha
out
inc
aaa
or
test
xchg
test
add
out
xchg
mov
push
and
xchg
adc
popa
bound
dec
pop
mov
lds
add
xchg
and
ins
loopne
js
sub
mov
mov
dec
cs
mov
sub
popa
xchg
sub
or
xchg
push
mul
pop
das
aas
and
xchg
push
sub
movs
pop
sub
sbb
sub
mov
mov
add
inc
ficom
xchg
pop
sub
mov
faddp
xchg
int3
jnp
movs
add
xchg
add
sbb
hlt
fidiv
xchg
pusha
sub
xchg
repnz
xor
pop
inc
adc
clc
jnp
stc
sbb
ja
xchg
das
xchg
bound
mov
hlt
in
mov
cdq
adc
inc
rcl
loope
xchg
xchg
int3
jb
mov
call
sub
xchg
xor
cmps
xchg
mov
stc
add
pop
aaa
jl
adc
xchg
push
mov
cli
mov
xlat
adc
mov
ror
xchg
(bad)
stc
jle
inc
popf
out
sbb
sahf
fdiv
mov
push
xlat
and
ss
push
jle
ja
ret
xchg
mov
into
clc
xchg
mov
sti
das
mov
shl
jnp
xor
dec
sbb
jle
push
and
stc
cdq
loope
mov
rcl
push
stos
movs
outs
dec
call
sub
inc
push
xchg
pop
add
sub
ds
xor
cs
mov
xlat
mov
aam
push
dec
test
xchg
scas
std
aam
dec
out
cmps
sub
sbb
mov
lods
and
fcom
call
pop
daa
rcr
xor
clc
pop
mov
cwde
sub
push
push
add
jne
or
(bad)
push
pop
sbb
xchg
aad
ss
dec
and
cdq
je
test
adc
mov
fs
seta
shl
inc
arpl
repz
fwait
jp
(bad)
call
pop
inc
or
fist
push
jmp
(bad)
cld
mov
add
or
cdq
fist
inc
xchg
xor
pushf
cmps
dec
push
pop
int
in
mov
push
xchg
xor
aaa
pop
cmp
data16
mov
mul
scas
jnp
pop
jmp
les
jl
sahf
xchg
enter
scas
mov
or
imul
mov
in
lea
add
sbb
(bad)
in
or
mov
sub
leave
shl
hlt
cmp
jbe
fcomp
xchg
dec
rcr
test
push
xchg
rcr
xor
pop
jmp
movs
pop
push
adc
push
xor
cmp
xchg
sub
fst
sub
push
xchg
mov
leave
fisubr
pop
bnd
xchg
loope
arpl
int
cld
rol
or
loop
or
arpl
pop
ror
pop
mov
jg
xlat
push
add
add
mov
xor
popf
adc
stc
and
dec
mov
mov
push
cmps
ins
mov
(bad)
lds
enter
push
test
leave
mov
or
xor
(bad)
adc
cs
mov
mov
arpl
ins
stc
(bad)
xchg
jae
imul
jns
xchg
(bad)
lea
add
sub
xchg
aad
ins
inc
mul
pusha
xchg
fwait
dec
pop
retf
and
mov
pop
xchg
xchg
loope
cdq
iret
inc
stos
dec
xchg
test
lock
pop
fld
xchg
adc
aaa
xchg
or
mov
stos
pop
div
adc
lock
pop
js
mov
or
cmp
loop
nop
icebp
ret
in
(bad)
sahf
(bad)
pop
rcl
mov
xchg
adc
push
rcl
and
xor
in
xchg
imul
call
adc
xchg
mov
jns
sbb
or
mov
ret
xchg
sahf
aaa
enter
adc
in
mov
sbb
adc
adc
push
loopne
mov
xor
mov
jbe
and
xchg
dec
jo
cmp
mov
xchg
pop
dec
push
jg
daa
popf
push
xchg
mov
jns
pop
xchg
clc
add
dec
xchg
fmul
cld
dec
adc
jl
and
push
hlt
pop
jne
push
mov
je
and
and
push
out
fwait
xor
stos
sub
mov
(bad)
icebp
fwait
jb
in
rol
into
aad
ins
cmp
daa
mov
push
aam
mov
xchg
in
out
imul
adc
outs
sahf
xchg
ds
dec
mov
inc
jo
mov
xchg
and
daa
jmp
xchg
cwde
fnsave
jb
inc
xchg
les
mov
mov
pop
adc
stos
fcom
add
shl
and
inc
pop
shr
ja
xchg
daa
movs
rcl
cmp
dec
xchg
cmp
mov
movs
sub
sbb
jno
dec
hlt
xchg
push
jl
push
(bad)
cdq
les
add
mov
pop
shl
mov
mov
lahf
mov
xchg
je
dec
xchg
cmp
fsubr
xchg
pop
jg
fwait
cmp
jmp
mov
xchg
mov
iret
or
inc
jne
pop
in
xchg
loop
xchg
push
add
lods
pop
into
xchg
mov
push
cmp
pushf
ins
pop
adc
push
aad
retf
rcl
out
mov
fmul
ret
push
push
jno
mov
push
jecxz
inc
xchg
sbb
imul
push
mov
jno
dec
push
mov
xchg
out
mov
sbb
enter
pop
adc
xor
stos
inc
push
xchg
or
shl
mov
jmp
test
lods
adc
lods
xchg
iret
sbb
in
stos
cmp
xor
xchg
mov
push
je
mov
sbb
lea
lds
int3
aam
adc
cmps
mov
jle
xchg
es
fisub
pop
sbb
jl
fadd
adc
pop
adc
das
dec
mov
into
pop
aam
sbb
cmps
cmc
stos
and
push
and
dec
mov
adc
mov
in
fcomp
mov
xchg
repnz
test
add
jo
ins
push
lds
push
xchg
mov
or
cmps
push
mov
aam
imul
xchg
jno
xor
or
int3
and
add
(bad)
fld
fwait
add
jbe
aam
pop
mov
xchg
aaa
mov
jo
dec
sub
xchg
xchg
mov
xor
dec
or
int
sub
mov
adc
sbb
push
dec
sbb
pusha
xchg
inc
add
and
xchg
add
aas
cdq
xchg
lods
popf
imul
push
xchg
inc
sub
mov
push
xor
mov
adc
mov
div
mov
je
lods
fwait
jne
jl
adc
inc
sete
cmp
leave
push
fidiv
xchg
xchg
rcr
rcl
jae
xchg
xchg
out
adc
xchg
lods
fs
imul
jmp
(bad)
jl
outs
cmp
push
jnp
mov
jg
movs
inc
repnz
or
mov
sahf
xchg
push
mov
cli
jns
sbb
or
push
outs
fdiv
bound
add
addr16
js
cmp
and
aad
mov
fwait
push
inc
cli
mov
jbe
xchg
mov
not
cmp
xchg
sbb
xchg
push
jno
aas
test
test
addr16
lock
cdq
lods
ins
pop
xchg
fstp
loopne
inc
mov
fwait
stos
je
xchg
cmp
aam
mov
in
stos
icebp
xchg
enter
inc
inc
clc
leave
sub
cmps
rcr
cmp
enter
pop
popa
sub
je
jbe
jmp
cmp
pop
jmp
jle
sbb
mov
xchg
into
pop
add
xor
iret
adc
test
xchg
test
push
mov
sbb
iret
pop
fdivr
imul
lahf
cmp
mov
inc
(bad)
outs
aad
sar
xchg
sbb
or
xor
or
jmp
mov
fadd
movs
ins
xchg
mov
(bad)
cwde
fcmovnu
cmps
xor
mov
js
addr16
sahf
mov
es
dec
mov
xchg
hlt
aam
or
retf
stos
xchg
and
xor
push
or
cdq
xchg
cmps
pop
or
jb
mov
sbb
movsd
shr
sahf
xchg
loopne
push
or
test
jo
retf
mov
mov
cmp
dec
cmps
dec
inc
pusha
lahf
add
mov
je
mov
mov
xchg
rol
out
lods
dec
es
xor
test
repz
sub
popa
cmp
fcomp
dec
ror
aaa
xchg
cld
(bad)
mov
not
push
fistp
lods
cwde
or
add
aad
or
loop
add
and
xchg
jae
in
xchg
sahf
cmc
std
hlt
mov
add
push
xchg
xchg
pop
mov
repnz
jmp
data16
sbb
push
lods
add
xchg
scas
stc
or
sahf
sub
addr16
sbb
movs
sbb
loop
add
pushf
ss
outs
jl
xchg
cdq
xchg
adc
push
fiadd
xchg
movs
and
push
jb
pop
sub
ja
dec
fs
iret
mov
add
jae
(bad)
into
xchg
adc
push
aam
ret
xchg
push
inc
(bad)
mov
mov
jecxz
aaa
pop
and
hlt
fs
in
or
push
js
pop
(bad)
fimul
sahf
iret
popa
mov
inc
xor
fcmovne
add
adc
ss
xchg
push
es
adc
rcl
mov
mov
mov
aam
and
inc
je
not
data16
jecxz
les
stos
xchg
add
xchg
test
push
and
(bad)
in
jb
mov
mov
repnz
sbb
(bad)
icebp
sar
out
mov
ss
sete
loopne
rcr
setp
push
xchg
and
jo
arpl
xor
push
lods
xchg
add
jnp
ds
inc
inc
ja
fdivr
or
mov
popf
pop
cmc
xchg
adc
cmp
cmps
cli
rcl
fst
gs
adc
dec
mov
sub
sahf
fst
out
push
inc
push
jecxz
and
xchg
mov
pop
jl
mov
xchg
inc
mov
fwait
stos
xchg
mov
mov
mov
sub
push
adc
clc
test
xchg
cmp
xchg
push
inc
add
xchg
mov
shl
out
xchg
adc
in
mov
ja
add
loopne
xchg
sahf
test
test
mov
mov
add
std
scas
js
stos
mov
dec
test
rcl
ror
sbb
lods
xchg
xchg
jl
jecxz
das
mov
fwait
mov
test
mov
push
movs
inc
jbe
fwait
retf
sbb
enter
ss
je
loopne
les
sbb
and
push
adc
push
xchg
sub
xchg
loopne
pushf
bound
inc
mov
imul
xchg
(bad)
frndint
data16
xor
scas
xchg
pusha
push
and
ja
add
fidivr
and
xchg
pop
pop
push
jo
xchg
imul
fimul
add
pop
dec
inc
push
mov
iret
dec
or
pop
pushf
xor
dec
test
pop
sbb
loop
in
clc
cdq
out
mov
pop
vxorps
pushf
in
mov
cmps
inc
xchg
shr
push
sbb
add
xchg
dec
mov
inc
xchg
push
xchg
mov
xchg
cmc
cmps
xor
xchg
adc
inc
push
dec
in
pop
lea
(bad)
xchg
dec
pusha
cdq
push
jl
xor
daa
xchg
mov
xchg
add
cmp
shr
mov
and
xchg
ss
adc
popa
or
(bad)
mov
mov
push
mov
jle
xchg
push
das
add
mov
inc
xchg
nop
adc
pop
jmp
gs
and
cmp
adc
aaa
in
scas
mov
xchg
jbe
fisttp
bnd
test
lods
dec
mov
inc
push
push
xchg
call
mov
xchg
jp
stos
nop
dec
add
dec
xchg
lods
test
pop
mov
pop
out
lahf
movs
adc
in
mov
push
cmps
inc
lds
fwait
hlt
pushf
or
test
sub
mov
inc
nop
push
sub
cmp
dec
(bad)
fsubr
pusha
mov
test
mov
xchg
or
cmc
pop
cs
je
repz
out
das
pusha
sbb
xchg
or
xor
div
xchg
imul
sub
xchg
es
inc
mov
imul
push
mov
mov
loop
mov
(bad)
jl
cwde
xchg
mov
xor
outs
je
aaa
xchg
add
xchg
mov
jo
stc
inc
shl
mov
sub
xchg
scas
mov
hlt
push
add
dec
adc
xchg
repnz
sbb
sbb
sub
lock
test
sti
jnp
dec
or
mov
scas
cmp
jle
call
jg
icebp
rcl
xchg
mov
iret
inc
cld
adc
adc
cmp
test
std
pop
inc
(bad)
xchg
xor
pushf
fucomp
xchg
dec
mov
xchg
fwait
outs
sub
push
jle
test
mov
fsub
push
inc
shl
jecxz
xchg
xchg
jae
aaa
cmp
adc
xchg
inc
test
sbb
xchg
popf
hlt
mov
sbb
jge
or
call
or
adc
dec
xchg
pop
retf
shr
xchg
movs
fcmovbe
repz
int
sbb
pop
xchg
xor
jg
outs
hlt
adc
xchg
test
in
mov
inc
push
cmps
mov
iret
lock
add
stc
enter
not
jecxz
pop
xchg
add
jne
jae
loope
xchg
adc
adc
retf
rcl
cwde
mov
mov
or
push
push
pushf
adc
jbe
arpl
fs
cld
cwde
add
jne
mov
xchg
loope
jmp
or
shl
xchg
imul
lock
test
ins
ret
adc
repz
jbe
add
call
test
xchg
ins
jns
popa
into
das
cmc
sub
inc
sbb
xchg
and
dec
aam
inc
aaa
mov
jp
sar
loope
aas
das
out
mov
iret
mov
enter
es
fisubr
not
sub
in
mov
pop
ret
xor
call
xchg
mov
dec
popa
leave
xchg
mov
mov
test
hlt
daa
jnp
cli
sub
push
cmp
push
mov
mov
mov
push
in
test
xchg
frstor
hlt
dec
je
jle
jmp
cmp
xchg
mov
xchg
dec
jecxz
stos
(bad)
xchg
cmp
ins
fld
add
movs
or
jp
sub
cdq
and
jne
or
adc
push
retf
(bad)
sbb
push
mov
imul
add
add
jmp
movs
cs
data16
xchg
outs
or
movs
out
jmp
repz
rcl
xchg
mov
ret
stos
xchg
mov
push
aaa
imul
mov
fs
(bad)
in
or
fld
mul
repnz
inc
xchg
call
loope
mov
shl
xchg
add
jnp
fwait
xchg
jmp
or
pop
cli
scas
nop
ror
xchg
pop
adc
inc
(bad)
mov
mov
mov
outs
mov
bound
mov
daa
ds
rcl
popa
std
inc
mov
adc
mov
ret
xchg
cwde
out
push
jno
bnd
xchg
lods
and
sub
lds
mov
lods
mov
imul
xor
pop
add
add
stos
loop
cmp
xchg
int
pop
aaa
jnp
cwde
mov
xchg
push
lods
test
adc
jae
je
xchg
push
fwait
xchg
mov
or
and
xchg
jnp
sub
mov
cmp
push
jle
dec
dec
mov
jecxz
xor
loope
addr16
mov
cmps
mov
dec
popa
xor
mov
test
xchg
xlat
test
and
xchg
xor
fimul
xchg
scas
dec
dec
dec
in
cmps
xchg
sar
(bad)
popf
sub
test
jp
add
xor
mov
dec
cwde
mov
push
(bad)
retf
xchg
jmp
lods
arpl
out
sbb
xchg
mov
sbb
js
lods
jns
xor
retf
xchg
scas
jge
pop
adc
icebp
push
pop
adc
neg
xchg
dec
int
xor
sbb
mov
lea
sub
cs
pop
bndldx
aam
pop
jo
jns
sbb
mov
iret
rcl
pop
aas
mov
lahf
test
mov
bswap
cli
addr16
xchg
call
push
xchg
cmp
add
pop
ss
xor
retf
mov
mov
pop
stos
cmp
xor
xchg
test
test
dec
xchg
rcr
push
aaa
cmp
lea
push
jge
inc
out
xchg
push
retf
sbb
(bad)
int3
xchg
add
aaa
aam
mov
movs
jmp
fs
test
sbb
xchg
pop
lds
out
int3
cld
in
mov
mov
xchg
shl
mov
ret
addr16
loop
setns
jp
retf
rcl
mov
xchg
pusha
xor
test
xchg
cdq
xchg
imul
push
dec
xchg
enter
ror
push
dec
add
xchg
mov
ins
les
cld
aad
imul
enter
jge
cmp
mov
lds
int3
jbe
xchg
lea
mov
(bad)
add
test
mul
pop
cmp
ins
sbb
imul
add
in
pop
sar
adc
repnz
imul
lods
add
adc
jns
sub
dec
xchg
xchg
push
pop
jle
push
xchg
and
inc
jmp
aam
add
xchg
xchg
mov
add
and
push
aaa
cmp
fwait
movs
xchg
aad
xchg
pop
cmp
call
rcr
fadd
(bad)
in
xchg
outs
neg
pusha
int
int3
or
xchg
stos
ins
mov
dec
or
mov
and
mov
jl
rcl
pop
inc
pop
push
ins
xchg
in
mov
xlat
sub
test
cli
pop
pop
xchg
cmc
mov
add
mov
and
test
adc
mov
fwait
inc
inc
fadd
cdq
ja
repnz
cmp
xchg
in
ins
sbb
shr
push
sub
sub
adc
mov
idiv
repz
nop
push
outs
and
xchg
dec
cmp
pop
xchg
pushf
(bad)
mov
movs
inc
jmp
in
aas
(bad)
cmps
xchg
push
dec
enter
dec
loope
stos
xchg
jo
es
outs
nop
mov
jmp
add
fwait
sti
xchg
test
mul
add
jne
xchg
inc
jp
lods
jbe
mov
ret
sub
les
xchg
push
(bad)
jb
inc
xlat
test
fwait
xchg
jmp
dec
and
ins
scas
push
inc
pop
repz
mov
pop
loope
mov
cmp
shl
push
sahf
push
cmps
sbb
xchg
es
cmc
into
xchg
clc
xor
sub
xor
mov
test
cmp
cs
inc
and
push
xor
adc
cs
xor
add
mov
fwait
lock
repz
xchg
js
retf
aam
data16
nop
fisubr
fwait
mov
sbb
call
mov
adc
out
in
sub
and
dec
stos
jmp
inc
popf
leave
xchg
mov
xlat
loopne
mov
or
sbb
push
hlt
xor
add
xchg
sub
jmp
xchg
pop
push
inc
es
daa
xchg
xchg
adc
mov
sbb
stos
movs
or
mov
xor
ficomp
push
xchg
mov
(bad)
fmul
ret
push
and
test
(bad)
hlt
or
mov
push
fucompp
aas
int
inc
fistp
push
and
dec
loopne
xchg
inc
push
dec
and
hlt
mov
adc
xchg
push
clc
in
aas
jns
and
xchg
jb
mov
fs
sbb
or
pop
adc
std
cmps
xchg
dec
mov
fcom
xor
xchg
ds
cmp
inc
adc
repz
movs
(bad)
js
xchg
add
fild
mov
dec
xchg
push
push
sub
push
lea
jb
sub
xchg
sub
inc
(bad)
xor
shl
xchg
pminsw
jb
mov
adc
inc
mov
ins
add
arpl
push
sahf
xchg
and
std
jbe
and
pop
xor
out
mov
or
aam
lahf
and
jp
xchg
jo
and
xchg
push
cmc
push
mov
mov
xchg
fdivr
xchg
fs
stos
loop
fist
je
in
xchg
sub
mov
lahf
mov
xchg
push
inc
mov
jg
lock
shr
sar
jp
xchg
xchg
sbb
mov
mov
int3
aad
inc
mov
mov
arpl
mov
icebp
aaa
pop
and
pop
cmp
xchg
lahf
jns
sbb
mov
mov
shl
in
sti
xchg
lods
xchg
mov
adc
fldenv
push
pop
(bad)
pop
jle
std
hlt
loop
jg
push
push
xchg
mov
jmp
(bad)
xchg
test
add
(bad)
jecxz
add
mov
jg
jns
imul
mov
int3
jl
(bad)
xchg
pop
ins
sub
xchg
test
jns
adc
(bad)
repnz
loopne
xchg
sub
mov
cmp
mov
sti
pusha
xchg
pop
aas
out
xchg
mov
js
dec
mov
hlt
xchg
(bad)
stos
popf
pop
sbb
neg
aad
push
and
sub
adc
xchg
push
lock
pop
lods
mov
mov
fcom
adc
or
pop
loopne
xchg
inc
je
mov
xchg
dec
mov
ja
xchg
ror
mov
iret
inc
mov
(bad)
xchg
sbb
mov
xchg
lds
ss
cwde
sahf
mov
nop
push
xchg
or
das
stos
jne
data16
adc
sti
das
mov
aas
cdq
jne
add
loope
xchg
jmp
neg
test
fld
sbb
mov
pop
pop
pop
cdq
push
es
sbb
xor
jmp
xchg
xchg
aas
cli
std
ins
icebp
inc
test
pop
into
movzx
pop
scas
or
push
and
xor
ins
mov
scas
push
push
jmp
rcl
adc
push
push
xor
test
pop
xchg
pop
out
push
sub
aad
in
xchg
pop
movsx
call
dec
adc
push
dec
mov
rcl
sbb
push
aam
retf
dec
jge
add
cmp
bound
jecxz
xchg
out
inc
adc
jl
sahf
adc
add
and
sub
dec
xchg
test
outs
adc
xchg
dec
(bad)
pop
jno
mov
cwde
and
aam
mov
bound
and
adc
jge
jmp
movs
push
mov
xchg
jbe
in
sti
jle
retf
and
mov
cmp
das
js
xchg
pop
out
cld
mov
inc
xchg
ret
aam
mov
cmp
in
mov
mov
inc
pusha
mul
dec
test
mov
jb
scas
xchg
adc
add
xchg
(bad)
cmps
push
loope
in
mov
stos
dec
mov
inc
movs
js
add
not
mov
adc
les
xchg
xchg
xchg
lods
mov
mov
pop
(bad)
push
into
cwde
div
xchg
xchg
jnp
sti
sub
ins
call
push
aas
iret
in
push
xchg
mov
dec
stos
and
pop
xchg
fwait
xchg
aas
popa
xchg
nop/reserved
dec
xchg
dec
std
ret
push
xchg
test
and
jle
xchg
out
jmp
imul
xor
retf
xchg
(bad)
mov
xor
cmp
test
adc
pop
fld
cmc
mov
aad
xchg
push
jmp
add
adc
adc
pusha
adc
sub
add
lods
test
xor
daa
mov
inc
cdq
xchg
ins
cld
in
adc
xchg
lods
test
popf
sub
clc
out
imul
pop
xchg
push
push
bound
mov
inc
rcl
dec
mov
jl
push
call
retf
cmp
pop
push
push
jns
(bad)
xchg
jg
out
jb
mov
push
ficom
cmp
loopne
xchg
in
scas
arpl
adc
lea
leave
loop
test
push
sbb
and
(bad)
cmp
dec
mov
add
adc
xchg
pop
add
sub
mov
pushf
outs
xchg
mov
icebp
xor
lock
inc
xchg
or
xor
mov
out
xchg
pop
xchg
sub
xchg
fild
test
xchg
or
xlat
add
fwait
inc
shr
test
fimul
pusha
pop
popf
out
adc
push
and
xchg
ficomp
xchg
retf
aam
push
or
sbb
xchg
daa
(bad)
(bad)
pop
pop
push
mov
xchg
fdiv
lods
xchg
xor
cmp
xchg
mov
in
sbb
pcmpeqw
push
mov
sub
movs
or
xchg
jb
xchg
out
add
adc
xchg
js
pusha
or
pop
neg
xchg
je
sar
jl
cmp
popf
xor
(bad)
push
out
lock
loop
sub
add
adc
aaa
xchg
pop
xchg
aam
add
cmp
and
fwait
cmp
je
mov
sbb
sti
scas
adc
lahf
arpl
test
aaa
(bad)
mov
sbb
cmc
add
jmp
cmp
cwde
pop
lods
xchg
mov
push
mov
add
sub
push
inc
pop
mov
jmp
adc
jns
xor
adc
xchg
seto
xchg
push
mov
xchg
stos
mov
loopne
mov
test
sbb
and
sbb
mov
jns
ror
retf
cmp
ja
add
movs
jb
fst
add
xchg
jae
add
xchg
mov
add
je
mov
xchg
lds
dec
push
push
xchg
fidiv
mov
and
pop
mov
jb
and
xchg
test
push
es
jo
pop
scas
jne
popf
je
rcl
shr
pop
push
mov
arpl
jl
pop
fldenv
xchg
inc
out
mov
mov
mov
xor
test
out
arpl
lock
pop
fwait
push
mov
outs
mov
inc
dec
or
adc
sbb
lock
xchg
inc
push
(bad)
rol
stos
sbb
ins
enter
dec
mov
push
inc
xchg
nop
(bad)
or
jno
jae
fadd
out
imul
xchg
ror
sub
adc
jnp
xchg
bound
jecxz
add
push
ficom
icebp
or
or
aad
xchg
bound
dec
(bad)
xchg
add
mov
xchg
(bad)
and
lods
out
add
aas
mov
xchg
arpl
cmp
sub
in
mov
push
push
jge
cmovns
push
fwait
sbb
add
pop
xor
mov
sti
call
xchg
jns
jl
add
shr
xchg
sub
mov
outs
inc
adc
push
jo
repnz
push
pop
enter
popf
lods
ror
sbb
dec
and
arpl
lock
pop
or
dec
jmp
jne
je
ja
rcl
pushf
mov
cwde
sub
les
retf
movs
loope
fyl2xp1
pop
repnz
(bad)
(bad)
mov
xchg
pusha
inc
mov
sbb
push
pop
cmp
ud2
in
xchg
adc
call
mov
fwait
shr
outs
xchg
xchg
(bad)
jmp
cmp
add
cmp
xor
xchg
arpl
or
adc
retf
adc
bound
fstp
icebp
sbb
int
cmps
jno
mov
ins
xor
xchg
xor
sub
mov
int
xchg
movs
imul
out
sub
rol
push
and
bound
rol
pop
or
mov
gs
xchg
js
mov
loope
dec
jmp
jo
icebp
xchg
rol
mov
xor
not
adc
dec
pop
jnp
inc
mov
mov
xor
int3
cmp
nop
test
jno
ja
inc
xchg
jle
cmps
cdq
adc
ror
aam
push
repz
hlt
xlat
sub
sub
cmp
inc
(bad)
icebp
pop
stos
xchg
cmp
pusha
sub
nop
ficom
xchg
xchg
inc
rcr
movhps
int
xor
xchg
outs
xor
add
dec
xchg
arpl
and
pop
add
lock
mov
sub
cmps
fnstcw
pop
mov
ds
push
dec
sti
rcr
cmp
mov
ja
in
inc
cmps
adc
(bad)
adc
not
push
pop
nop
push
and
int
mov
mov
popf
push
jl
add
pop
mov
sbb
push
mov
hlt
aaa
jp
sub
inc
scas
rol
adc
cmp
vprotd
push
xchg
adc
cld
int
das
mov
xor
arpl
movs
sbb
xchg
cmp
in
jg
hlt
shl
cwde
xchg
sub
pop
inc
xchg
fstp
stos
mov
xor
sbb
ins
push
mov
push
ja
xchg
jnp
(bad)
cld
cmp
pop
or
movs
ins
out
dec
push
(bad)
jmp
or
(bad)
aad
xor
xchg
or
in
pop
mov
in
xchg
adc
sbb
sbb
xchg
adc
nop
pushf
(bad)
es
push
iret
cld
pop
lock
xchg
jecxz
dec
push
(bad)
loop
or
imul
iret
js
push
fwait
jnp
test
lods
xchg
dec
mov
dec
fdivr
mov
mov
push
out
push
push
fnstcw
or
paddq
push
lahf
xchg
mov
sub
or
out
xchg
adc
je
xchg
cmps
lahf
pop
add
jg
xchg
xchg
leavew
(bad)
cwde
or
push
dec
mov
mov
aad
push
adc
xchg
loopne
lea
js
jmp
rol
push
loop
pop
xchg
aam
in
jns
fnstsw
or
mov
loopne
mov
add
xchg
out
shl
stos
scas
enter
pop
retf
das
iret
xchg
cmp
xor
int3
xchg
bound
mov
cmps
xchg
pop
jmp
gs
xchg
xchg
stc
fsubr
fcom
adc
push
xchg
mov
popa
add
xchg
push
rcl
mov
xchg
pushf
in
loopne
(bad)
jmp
xchg
push
mov
and
in
xchg
sahf
mov
inc
xchg
xchg
sub
dec
mov
mov
mov
cld
imul
adc
mov
cli
fidivr
aaa
aad
sahf
inc
adc
daa
ss
inc
xlat
loop
sti
enter
mov
(bad)
in
or
mov
and
ins
lds
add
imul
out
enter
bound
sar
inc
xchg
mov
push
pushf
fs
xchg
xor
movs
aas
cmp
pushf
jmp
push
mov
pop
xchg
clc
push
mov
repnz
sar
xchg
mov
xor
repz
lds
sub
mov
stos
or
aam
mov
mov
mov
aam
xor
xchg
mov
int3
sub
mov
inc
jbe
(bad)
lds
cdq
xchg
pop
fldenv
addr16
or
aad
cmp
mov
(bad)
cmp
cmc
jns
rol
mov
xchg
push
aaa
inc
in
stc
out
(bad)
inc
div
arpl
sub
fwait
adc
xchg
add
nop
hlt
xchg
(bad)
mov
ss
mov
jmp
jp
aam
dec
arpl
jmp
imul
sbb
xchg
sbb
sub
xchg
cmp
int3
pop
mov
jo
addr16
jl
xchg
and
pop
dec
xchg
shl
xor
sbb
jp
mov
sub
scas
mov
xchg
lahf
cwde
out
sbb
aam
jbe
fisub
and
push
mov
pop
mov
xor
lock
stc
xchg
adc
ins
mov
cmp
imul
lahf
push
and
ss
in
xchg
xor
mov
cmc
mov
ja
fld
in
pop
fldenv
xchg
xchg
retf
sub
jle
push
js
fcmovnbe
mov
add
sbb
repnz
js
pop
xchg
loope
ret
icebp
sbb
xchg
ja
sbb
mov
hlt
call
pop
in
push
xchg
xchg
out
lods
pop
cmp
fisttp
nop
pop
test
or
sub
push
xor
(bad)
push
(bad)
dec
pop
mov
in
aas
jmp
pop
daa
jge
lea
cmps
stos
xchg
mov
xchg
out
xchg
loopne
and
mov
rol
and
adc
test
rcl
add
cdq
je
cmp
mov
nop
xor
loope
xchg
int3
xor
call
add
pushf
mov
hlt
xchg
outs
pusha
fadd
leave
jle
push
rcr
xchg
xchg
jbe
sub
xchg
adc
cdq
ja
das
cmp
int
xor
mov
mov
lods
jg
sub
stos
scas
nop
es
adc
push
mov
mov
fsub
xchg
cmp
rcl
cmps
neg
mov
jmp
push
cmp
into
push
imul
or
sub
inc
xchg
scas
rol
sbb
(bad)
aam
cmp
sbb
xchg
cmps
mov
add
push
xchg
rsm
jge
bnd
adc
addr16
xchg
rcr
je
push
out
pop
xchg
loope
push
ja
gs
xchg
rcl
sti
or
and
fadd
xor
jmp
(bad)
fwait
push
xchg
sahf
je
xor
test
dec
repz
ret
xchg
sti
mov
cmp
xchg
jle
fs
add
cmps
xchg
mov
dec
inc
imul
or
add
les
jo
push
fmul
pop
xchg
test
fisub
or
bound
cmps
pop
ficom
hlt
ret
push
fs
mov
push
cli
stos
jecxz
popf
js
lods
in
xchg
bound
sbb
xchg
xchg
int
mov
scas
rcl
adc
pop
jg
add
not
push
rcr
xchg
push
or
hlt
dec
xchg
add
out
das
jge
test
sub
mov
ds
data16
in
xchg
fwait
xor
pusha
clc
adc
icebp
pop
xchg
test
pop
jle
xchg
mov
push
cmp
fdiv
xchg
fisub
lahf
idiv
mov
(bad)
in
aam
out
dec
rol
stos
lahf
sub
cdq
repnz
xchg
pushf
add
mov
xchg
sahf
sti
(bad)
adc
xchg
fwait
aad
xchg
push
xor
gs
xchg
cmp
mov
sbb
pop
pop
ret
aad
lds
mov
lahf
test
and
pop
jnp
out
ret
dec
xchg
call
xlat
mov
xor
mov
mov
mov
xchg
adc
pop
cmp
out
out
and
push
xchg
push
jmp
mov
int
dec
retf
fidiv
mov
cmp
lock
imul
lock
xchg
adc
sub
mov
sbb
daa
xchg
adc
hlt
lods
mov
xchg
push
add
dec
bound
fnstsw
repz
loopne
push
scas
cmps
and
popa
retf
jae
xor
push
xchg
jmp
int3
(bad)
movs
rcr
dec
adc
inc
daa
xchg
adc
mov
adc
sub
xchg
jge
enter
mov
xchg
dec
xor
xchg
aas
xchg
(bad)
pop
inc
xchg
pop
push
dec
and
pop
mov
shl
es
adc
clc
aam
sub
mov
sub
shl
dec
aam
hlt
mov
fbld
push
arpl
jmp
xchg
fst
and
dec
test
pop
ins
mov
loopne
sahf
dec
mov
rcl
test
fwait
push
or
xchg
jecxz
dec
into
inc
mov
xchg
scas
ret
cmps
out
dec
xchg
fisubr
xor
xchg
jle
aaa
mov
shl
xchg
jmp
aam
dec
mov
ja
mov
(bad)
fwait
mov
aam
mov
jne
pop
sbb
inc
cmp
xchg
adc
mov
xlat
xchg
popa
jl
inc
in
pop
sbb
jge
adc
sbb
mov
retf
or
sub
xchg
mov
sbb
test
cmp
xchg
xchg
std
sahf
xchg
mov
in
and
and
ret
outs
adc
jmp
into
inc
hlt
push
cdq
ror
xchg
jle
push
sbb
sub
inc
stc
jp
aas
xchg
sbb
lds
jmp
mul
ret
jbe
std
xchg
jecxz
cld
add
xor
sbb
add
shr
in
pop
arpl
xlat
aaa
and
rcl
xchg
js
pushf
ins
mov
lods
mov
lds
mov
or
ins
les
retf
test
xor
mov
add
gs
nop
or
jmp
mov
(bad)
push
xchg
ficomp
std
mov
lahf
jns
jmp
daa
aaa
shr
xchg
ins
lods
neg
mov
jge
xchg
clc
dec
sti
or
or
cmp
arpl
xor
lock
pop
or
jns
(bad)
xchg
pusha
imul
cdq
xchg
outs
retf
pop
pop
adc
inc
xor
mov
mov
xchg
aaa
mov
outs
in
popf
push
fwait
out
jmp
std
cmc
xchg
bound
or
repnz
pushf
inc
mov
xor
inc
pop
add
xchg
fcomip
aaa
mov
xchg
mov
in
xchg
mov
push
push
scas
or
xchg
stc
fdivr
retf
ror
shl
xchg
xor
icebp
je
and
xchg
xchg
test
mov
sbb
xchg
lds
xchg
cdq
inc
xlat
repnz
lods
cmps
stos
call
adc
add
dec
pop
push
in
pop
xchg
jb
xchg
call
(bad)
xchg
xor
adc
movs
in
rcr
mov
rcl
xchg
sub
xchg
fs
cmp
inc
shr
xchg
mov
sbb
mov
push
stc
rcr
pop
xchg
dec
rcr
not
add
and
xchg
lahf
scas
push
sbb
adc
mov
lock
xchg
aam
outs
dec
mov
mov
rol
addr16
mov
xchg
ror
inc
movs
fadd
xchg
cmp
enter
loope
mov
xchg
and
jns
sub
adc
arpl
(bad)
sti
stc
pop
(bad)
mov
add
shr
dec
push
sahf
enter
xchg
sbb
fist
push
jmp
adc
neg
jae
sbb
clc
add
push
add
inc
sub
fisub
adc
pop
adc
ffreep
jge
jl
pop
cli
cmp
xchg
leave
(bad)
das
adc
into
nop
call
jmp
dec
imul
xor
mov
add
inc
sub
leave
rcr
adc
cmps
mul
xchg
loop
iret
outs
push
scas
(bad)
pop
xchg
mov
xchg
js
sub
xchg
fisttp
inc
xchg
in
cmps
nop
jno
xor
sbb
sbb
and
jne
push
jbe
adc
ret
xchg
inc
or
mov
lods
xchg
leave
stc
cmp
ins
jbe
xchg
xchg
aad
ja
push
adc
rcl
xor
mov
jb
sub
mov
and
sar
cmps
adc
iret
loop
sbb
push
cdq
add
xor
lods
and
inc
sub
imul
add
dec
into
and
daa
cdq
push
loopne
and
je
jae
(bad)
lds
jmp
outs
popf
fsub
shl
mov
inc
pop
outs
xchg
mov
bound
leave
add
xchg
popa
arpl
es
xchg
mov
cwde
in
add
aas
inc
fnsave
or
mov
xchg
mov
mov
xchg
es
cwde
fsub
gs
sbb
jns
(bad)
pop
ins
push
xchg
and
cli
sbb
xchg
xchg
mov
pop
and
call
adc
aam
loope
mov
pop
jle
jmp
stc
out
push
cli
ror
pop
mov
sub
dec
adc
push
dec
in
xlat
cmp
mov
ja
xor
gs
ror
repnz
daa
stos
fs
dec
xchg
mov
mov
push
scas
loope
in
push
jl
daa
cmps
std
sbb
in
jge
xchg
xor
mov
movs
push
cmp
xchg
cmp
and
pop
aam
xchg
leave
pop
sahf
ins
std
stos
dec
mov
xlat
(bad)
inc
in
and
xor
leave
mov
fisttp
cmps
jl
xchg
in
sbb
and
push
add
push
adc
mov
out
arpl
pop
sti
daa
push
leave
aam
sub
xchg
or
adc
fwait
add
jmp
lahf
mov
lods
rcl
push
fs
stc
scas
xchg
jmp
xchg
fwait
push
and
stos
mov
iret
pop
lea
mov
ins
xchg
rol
(bad)
jl
dec
enter
and
je
(bad)
test
adc
mov
adc
imul
and
mov
hlt
cmp
jg
xchg
push
xor
pop
inc
push
and
jmp
inc
aam
add
pop
ins
sub
xchg
rcr
jb
cmps
xchg
sbb
or
imul
push
sub
adc
pop
pop
xor
add
xchg
sbb
movs
sub
or
xor
or
sti
cli
popa
fwait
test
enter
and
sahf
dec
push
xchg
retf
or
pop
xchg
movs
xor
adc
sbb
push
xchg
or
(bad)
push
rcl
mov
mov
jg
push
arpl
sbb
mov
hlt
mov
cld
scas
xchg
mov
dec
pushf
pop
inc
push
add
pusha
mov
ins
cmp
pop
and
fs
cmp
in
jbe
inc
jae
push
pop
xchg
(bad)
xchg
(bad)
xchg
mov
push
and
in
xchg
ret
std
xchg
inc
pop
mov
jl
pop
bound
lods
mov
add
div
mov
xor
ja
xchg
sbb
xchg
xchg
shl
lods
retf
leave
xchg
xchg
jecxz
aas
ds
xor
jp
ficom
and
(bad)
(bad)
sbb
jg
movs
clc
aaa
dec
push
xor
fcom
inc
shr
add
psllw
addr16
xchg
pop
stos
rcl
sub
jno
pop
mov
adc
xchg
jbe
aad
movs
or
sbb
sub
adc
sbb
push
leave
into
std
cmp
ret
pop
cmc
sar
mov
jle
jne
push
dec
cdq
aam
pop
enter
sub
bound
adc
enter
rcl
mov
rol
adc
jnp
inc
xchg
push
xchg
loopne
xor
int
(bad)
xchg
xchg
adc
or
(bad)
adc
call
mov
pop
or
dec
or
xchg
inc
sahf
jg
fstp
in
aad
es
jae
cmc
xlat
xchg
push
or
sub
pop
loopne
mov
and
or
xchg
mov
add
or
out
jmp
popa
and
(bad)
xchg
mov
cwde
mov
in
dec
inc
jbe
xchg
mov
mov
(bad)
fisttp
xchg
daa
xchg
xor
das
cmc
loopne
mov
jecxz
movs
jp
inc
fwait
mov
jbe
mov
cmps
mov
xchg
push
sbb
push
xchg
idiv
je
and
cmps
addr16
retf
adc
cwde
adc
ja
xchg
pusha
jb
xchg
iret
jns
push
jno
jl
xor
test
adc
sub
imul
sbb
std
retf
dec
xchg
mov
sti
xchg
cmp
loopne
mov
or
aam
xchg
jp
je
push
outs
repnz
adc
ins
sahf
xchg
jnp
frstor
fild
or
pusha
test
mov
xchg
mov
xchg
scas
sbb
jnp
test
mov
mov
addr16
pop
call
popa
or
xchg
in
lds
aad
push
jge
adc
lods
push
mov
pop
xchg
or
and
sub
mov
adc
shl
xchg
stos
push
lahf
out
scas
rcl
mov
xchg
es
fisttp
xchg
mov
xor
push
mov
xor
dec
jp
(bad)
xchg
ins
popf
dec
xchg
das
jmp
rcl
jb
test
inc
out
cmp
and
movs
xchg
jmp
mov
xchg
mov
jno
test
push
enter
out
ins
daa
xchg
mov
int
pushw
fwait
sahf
scas
push
sub
jl
xlat
pop
xchg
and
leave
fwait
imul
push
xchg
xor
das
mov
or
xchg
xor
fsubp
and
stc
(bad)
xor
dec
into
pop
adc
xchg
(bad)
(bad)
mov
adc
jmp
test
add
icebp
push
mov
xchg
pusha
cmp
adc
lock
fsubr
cmp
scas
in
inc
loop
sub
cli
in
xchg
xchg
mov
cmc
stos
xchg
mov
nop
cmps
xchg
add
jns
stos
cmp
adc
cdq
shl
and
xchg
aas
adc
jmp
xchg
inc
neg
ficomp
push
xchg
sahf
mov
mov
les
outs
je
mov
mov
icebp
bound
stc
in
loop
mov
pop
scas
add
stos
mov
xchg
dec
pop
mov
xchg
mov
hlt
aad
mov
sbb
jl
xchg
push
lock
test
or
test
sbb
xor
int3
test
je
fwait
mov
test
xor
xchg
or
add
jae
mov
jne
popf
dec
lds
mov
pop
mov
cwde
frstor
rcr
cmp
cmp
imul
dec
sub
jmp
xchg
inc
xchg
pop
out
(bad)
dec
and
test
cwde
mov
popa
mov
rcr
and
xlat
idiv
xchg
push
gs
cmp
xchg
pop
sub
mov
test
popa
add
push
and
leave
enter
cmps
mov
xchg
jae
int3
sub
mov
neg
icebp
jbe
or
push
xchg
pop
jecxz
repz
fist
mov
or
out
jle
in
push
xchg
push
hlt
clc
pop
jl
inc
popf
xchg
cmp
push
das
stc
mov
fwait
inc
dec
mov
call
out
jmp
pop
adc
mov
dec
lods
dec
rcpps
xchg
test
inc
jecxz
xchg
aad
and
sub
jl
cmp
ss
push
enter
adc
xchg
ror
mov
jnp
retf
inc
jbe
shr
(bad)
fwait
popf
mov
dec
adc
xchg
sub
inc
dec
fdiv
ret
xchg
jge
push
hlt
(bad)
jle
ficom
pushf
inc
adc
cmps
xor
(bad)
xchg
xchg
pusha
lock
movs
xchg
imul
xchg
dec
inc
idiv
or
fwait
mov
getsec
push
dec
jo
jecxz
je
popa
adc
(bad)
mov
inc
in
xchg
outs
lea
push
call
push
lds
xchg
es
(bad)
call
pop
nop
pop
clc
sar
dec
jb
loop
cmp
xchg
fwait
out
call
pop
or
jmp
ror
xchg
add
inc
xor
mov
(bad)
push
ret
std
push
repz
out
lock
outs
and
aas
dec
cmp
sbb
push
xchg
push
sbb
cmps
pop
in
lahf
xchg
sahf
fisttp
dec
sub
push
and
dec
xchg
mov
fldcw
mov
sub
and
inc
xchg
push
and
inc
or
es
xchg
int
mov
out
mov
push
and
xchg
push
inc
int3
pop
add
push
push
jb
pop
and
call
scas
in
out
ds
call
iret
and
mov
adc
jmp
(bad)
fisttp
test
or
adc
mov
shl
das
xchg
(bad)
jmp
push
sbb
fdivp
sub
test
outs
leave
rcr
mov
pop
push
in
nop
out
xor
(bad)
xchg
je
adc
xchg
adc
cmp
fidiv
and
hlt
cdq
mov
add
ds
sub
xchg
(bad)
das
pop
addr16
mov
xchg
dec
sbb
out
adc
ss
test
fidivr
cmps
shl
out
stc
lock
mov
mov
(bad)
daa
cmp
and
dec
mov
lahf
inc
out
movs
inc
shl
xchg
out
jo
in
sub
rcl
sub
test
jbe
mov
pop
mov
mov
imul
pop
in
arpl
mov
and
lock
ss
cli
fsub
sti
push
cmp
push
mov
jmp
jl
enter
and
scas
mov
xchg
outs
or
mov
mov
bound
xlat
cwde
and
out
in
stc
xchg
dec
cmp
push
movs
(bad)
aaa
mov
xchg
xor
adc
xchg
sbb
data16
int3
lea
pop
aad
xor
mov
jno
mov
ror
(bad)
xchg
mov
adc
xchg
xchg
ss
adc
xchg
xchg
xor
fs
test
shl
mov
or
adc
jae
dec
push
rol
pop
adc
push
dec
dec
mov
loop
push
rcl
pop
adc
imul
jl
push
(bad)
push
rcl
pop
imul
jmp
cmp
lods
xchg
out
push
mov
and
xchg
mov
pop
ss
mov
inc
pop
xchg
lds
mov
outs
cs
and
xchg
das
lea
and
leave
fdivr
inc
(bad)
xchg
lods
repz
rcl
cmp
pop
cmc
stos
vfmadd231ps
push
pop
mov
je
mov
(bad)
inc
xchg
call
push
sbb
mov
out
pusha
xchg
fbstp
mov
div
xchg
cmp
shl
fisttp
lahf
jnp
in
sbb
adc
movs
pop
dec
xchg
(bad)
outs
dec
push
sub
cmp
outs
sbb
mov
sbb
dec
sbb
xchg
and
push
jmp
sbb
mov
push
xchg
fiadd
retf
jp
adc
push
xor
push
aam
add
inc
push
mov
push
pop
push
or
mov
xchg
xchg
mov
push
out
cmp
data16
adc
add
xor
xchg
inc
xchg
int3
ins
neg
xchg
mov
int
inc
jmp
icebp
xchg
test
sub
mov
fs
push
xchg
xchg
mov
dec
fisttp
(bad)
imul
pop
mov
nop
pop
or
iret
adc
loopne
jmp
test
adc
imul
sbb
aam
push
dec
xor
imul
pop
aad
in
int
push
scas
sahf
cwde
xchg
inc
sbb
dec
sbb
fist
mov
pusha
adc
push
fwait
repnz
ds
jecxz
(bad)
fstp
repnz
xchg
and
or
and
lahf
test
xchg
jno
add
mov
sub
jp
sar
cli
ja
bound
xchg
sbb
fwait
push
je
mov
lods
sar
push
ss
js
cld
pop
mov
sbb
ss
aas
cmp
arpl
(bad)
jmp
pop
mov
scas
push
enter
cmp
push
push
call
add
cmp
and
xchg
or
jnp
popa
lea
adc
jle
mov
lahf
dec
add
sub
pop
loop
leave
mov
push
xchg
shl
test
jae
(bad)
xchg
xchg
sub
inc
pop
xchg
push
ficomp
inc
xchg
icebp
cmp
pop
ja
and
mov
cwde
jmp
jle
jp
(bad)
stos
dec
jle
add
mov
xchg
les
xchg
and
movs
and
dec
and
lds
(bad)
cmc
dec
xchg
(bad)
mov
test
(bad)
cmp
(bad)
xchg
mov
xchg
ins
sub
inc
das
out
lahf
icebp
nop
jnp
xchg
rcr
leave
jae
add
and
mov
mov
fdivr
xchg
(bad)
mov
xchg
cmc
sub
xchg
out
xor
fmul
scas
cdq
test
iret
xchg
adc
inc
mov
retf
xchg
loope
out
in
movs
data16
or
adc
push
cmp
push
lock
int
cs
aaa
fstp
gs
mov
or
pusha
adc
(bad)
xchg
lahf
jb
inc
mov
div
xchg
push
push
push
inc
mov
mov
out
fwait
push
aas
out
sub
push
mov
cwde
xor
jb
fcom
fild
and
test
pop
mov
(bad)
adc
lods
mov
add
xchg
je
push
mov
xchg
mov
sub
mov
add
xor
push
or
inc
add
jecxz
cmp
je
jmp
jne
jl
mov
pop
int
jno
pop
movs
fisttp
xchg
mov
push
pop
call
lahf
fwait
and
mov
addr16
popa
sbb
icebp
mov
stos
push
repz
mov
or
out
jp
jno
xchg
aam
adc
pop
pop
movs
ret
fwait
mov
fidiv
aam
daa
pop
rol
in
jmp
and
ror
sub
push
xchg
mov
mov
xchg
scas
das
jge
out
add
(bad)
jle
nop
cmp
test
fcmovbe
add
retf
mov
loopne
xchg
and
dec
dec
ficom
and
pcmpeqb
retf
fisttp
hlt
xchg
ja
loop
fidivr
or
mov
outs
out
mov
push
jae
xchg
jge
or
xor
xchg
xor
cmps
std
xchg
mov
push
movs
xchg
mov
and
jbe
pop
xchg
mov
or
sub
xchg
popa
push
inc
test
adc
add
clc
xor
xchg
dec
add
lds
pusha
neg
mov
lahf
aam
xlat
(bad)
mov
mov
nop
xchg
jl
mov
icebp
aam
lods
xchg
std
mov
shl
and
mov
push
adc
enter
sbb
adc
out
cs
popf
les
mov
aaa
jmp
retf
call
test
fimul
or
jg
xchg
xchg
es
pop
sbb
dec
and
mov
loope
jg
cmp
push
or
stc
mov
lea
xchg
cld
xchg
ret
jge
mov
push
dec
push
dec
repz
sbb
jo
mov
aam
iret
xchg
into
ins
and
gs
push
xchg
je
jle
cmp
pop
xchg
pushf
and
xor
dec
xlat
xchg
sti
cmps
add
ins
mov
aam
cmc
lods
mov
and
xchg
cmps
popa
sbb
cmp
not
xchg
mov
test
sbb
inc
dec
sub
push
outs
mov
xchg
lea
xchg
int
call
sete
xchg
in
test
std
xchg
adc
les
push
push
pop
lods
xchg
inc
push
addr16
xchg
add
daa
dec
mov
and
test
dec
sub
inc
xchg
add
test
je
retf
cmp
add
sbb
dec
xor
cmp
in
test
xchg
outs
mov
pop
mov
call
jnp
popf
stos
xchg
imul
and
mov
add
bound
xchg
(bad)
cwde
sbb
or
sub
jmp
xchg
push
dec
popa
cs
(bad)
cdq
push
loopne
fistp
jge
ret
aad
and
lods
in
xchg
je
mov
hlt
das
scas
sahf
loope
xchg
test
out
(bad)
xchg
inc
xlat
cmp
sub
ja
lock
cdq
inc
sahf
xchg
cmp
pop
sbb
jbe
dec
mov
hlt
arpl
ins
pop
dec
xchg
les
mov
test
xchg
inc
shl
or
stos
ret
ja
fwait
mov
push
je
scas
inc
cmp
test
retf
xchg
jno
sbb
mov
je
aam
push
lods
(bad)
fistp
xchg
das
adc
adc
in
repnz
and
adc
pop
mov
retf
or
push
xchg
clc
push
sbb
into
outs
or
sub
fimul
mov
test
sub
xchg
leave
jo
push
cmps
sub
sti
push
cmp
ficom
mov
pop
jmp
mov
or
js
popf
in
push
push
or
jbe
ret
loope
fs
aaa
push
xchg
test
into
jbe
lods
(bad)
mov
lods
rcl
dec
inc
mov
(bad)
xchg
ss
dec
xlat
aas
cmp
test
(bad)
jno
rol
fcmovu
mov
xchg
jge
xor
xchg
mov
pop
test
mov
xchg
add
out
push
sub
rcl
mov
mov
and
xchg
fdiv
pop
mov
hlt
and
enter
push
adc
cs
jecxz
or
cli
sub
inc
jg
xchg
xchg
sbb
int
inc
sbb
xchg
and
inc
lods
imul
add
call
xchg
cdq
nop
rcr
popa
xchg
pusha
xchg
mov
sub
stos
sbb
pop
outs
sar
push
and
jmp
inc
outs
clc
inc
repz
and
ficomp
xchg
xchg
cmp
push
push
mov
dec
fidivr
stos
jl
out
and
or
pop
loop
in
(bad)
(bad)
int3
cmp
scas
iret
lahf
scas
mov
stos
xchg
or
mov
push
sub
mov
loopne
sub
sbb
adc
call
xchg
test
test
add
xchg
ja
js
xchg
jecxz
movs
paddw
dec
inc
jns
pushf
loop
adc
xchg
sti
sub
aas
lods
xchg
xor
mov
xchg
cld
ss
push
xchg
fs
jns
xchg
hlt
xchg
jb
push
sbb
ins
push
pushf
xchg
aam
lahf
cmova
xor
xchg
push
sub
mov
sub
and
lock
ja
mov
sbb
jl
xchg
mov
pop
sbb
and
push
sub
mov
ret
inc
xchg
xor
inc
add
xchg
adc
add
ins
mov
mov
int
xor
fidivr
jecxz
ss
fs
data16
movs
fucomi
push
pop
mov
push
sbb
js
test
jle
ror
or
enter
cmps
xor
mov
(bad)
scas
xor
jg
repnz
mov
call
mov
sbb
scas
xchg
xor
or
addr16
pop
pushf
xchg
aaa
ja
push
pop
addr16
out
fwait
shr
ja
mov
pop
xchg
jbe
pop
movs
(bad)
fisub
dec
dec
jne
push
cmc
adc
xchg
fs
out
adc
adc
int
cmps
cmps
cmp
mov
(bad)
into
fwait
sar
leave
jne
lods
mov
mov
je
call
sbb
mov
int3
test
xchg
ss
pop
xor
add
aam
pop
pop
sbb
fwait
je
add
hlt
push
fwait
and
stos
rcr
xchg
jo
lea
xchg
sub
daa
mov
add
fdiv
xchg
mov
retf
leave
gs
nop
outs
xor
fdiv
xchg
adc
xchg
int3
xlat
ja
cmc
inc
daa
dec
rcr
sub
adc
call
std
aas
neg
xor
aam
in
pop
push
xchg
xchg
cmp
xchg
push
xchg
or
loopne
mov
add
scas
in
aam
mov
test
xor
cmp
xchg
mov
pop
cvtps2pd
add
xchg
cmps
mov
xchg
xor
int3
inc
into
sbb
xchg
ror
push
fld
cmp
xchg
fwait
call
or
mov
shr
loopne
in
jo
mov
xchg
fisttp
ret
cmp
xchg
sbb
ret
in
xchg
jl
loopne
mov
dec
fidiv
inc
clc
and
sti
outs
fndisi(8087
inc
hlt
test
xchg
adc
stos
jno
and
cmp
hlt
movs
cmp
daa
arpl
test
pop
icebp
mov
jle
xchg
or
cld
(bad)
and
xchg
xchg
call
pop
pop
cmpxchg
jnp
sub
xchg
in
dec
sub
pop
in
push
xchg
fild
ficomp
xor
es
mov
daa
les
jno
pop
push
xchg
ret
retf
add
cmp
fs
pop
inc
test
xchg
sar
gs
aam
add
xchg
int
pop
mov
stos
cmp
push
push
dec
gs
mov
xchg
aaa
jns
lods
sbb
test
xchg
ins
adc
pop
add
popf
mov
fdiv
mov
rcl
sbb
fwait
xchg
shl
ins
jae
xchg
stos
ds
fsubr
adc
retf
sbb
into
fistp
int3
(bad)
lock
adc
in
dec
push
inc
adc
xor
jg
xchg
scas
inc
mov
je
push
xchg
xchg
xchg
in
pusha
hlt
mov
jle
call
pop
dec
fimul
xor
ret
popf
sub
push
mov
stos
dec
jb
dec
jge
(bad)
add
jl
dec
ss
mov
std
test
test
xchg
fsub
gs
ret
pop
int3
ret
pop
(bad)
addr16
inc
in
ja
push
xor
push
out
dec
movs
daa
test
inc
add
ficom
xchg
push
sub
sbb
fcmovne
xchg
(bad)
int
add
inc
adc
xchg
pop
or
or
xchg
sbb
cmc
xchg
test
dec
xchg
cmp
pop
cld
push
jmp
push
cmps
cwde
mov
xchg
(bad)
call
xchg
sbb
push
stc
fcmovne
jmp
or
pop
mov
push
fiadd
test
push
xchg
push
stos
repz
hlt
retf
imul
and
sbb
inc
sbb
hlt
xchg
pusha
fdivp
xlat
test
outs
push
xchg
(bad)
in
jecxz
dec
test
xor
sub
out
test
mov
(bad)
push
push
xchg
push
xchg
out
jo
lods
pop
push
ins
pop
jp
xchg
arpl
xor
das
cwde
imul
(bad)
inc
lds
stc
mov
mov
test
xchg
clc
lahf
push
mov
movs
xchg
(bad)
dec
mov
std
bound
sti
xchg
imul
pop
mov
scas
shl
and
ins
add
add
cmp
jbe
jecxz
xchg
scas
jmp
cmp
repnz
xchg
cmp
test
push
dec
enter
mov
jle
or
inc
xchg
and
test
mov
pop
mov
or
(bad)
xchg
dec
(bad)
mov
and
cli
fdivr
and
cmp
xchg
(bad)
cmc
xchg
xlat
mov
or
mov
loope
xor
bound
or
test
call
pop
test
mov
ins
mov
test
mov
imul
jne
imul
mov
lods
add
xchg
adc
cdq
and
dec
ja
mov
push
aad
rcl
push
xchg
push
cs
or
jno
mov
sbb
add
das
out
test
xchg
cmp
stc
lahf
int3
xchg
jmp
inc
mov
out
fsub
push
pop
mov
enter
clc
pop
and
fs
dec
push
push
mov
mov
mov
call
mov
or
or
pop
push
xor
push
pop
xchg
adc
push
(bad)
mov
and
and
cwde
xchg
xlat
mov
push
ins
int
popa
sub
add
cmp
fstp
retf
fs
and
jl
mov
dec
dec
shr
mov
inc
xor
ins
ja
or
xchg
xor
pop
pop
push
jmp
test
call
ss
cmp
loop
int3
push
push
je
inc
mov
xchg
sbb
out
sahf
jmp
fwait
and
inc
mov
leave
xchg
test
jmp
xor
(bad)
retf
hlt
lods
hlt
dec
enter
repz
daa
into
test
and
mov
pop
xchg
pop
sbb
fisttp
nop
xchg
and
jns
call
ja
ds
dec
inc
pop
pop
popf
xor
pop
lods
in
xor
int
xchg
mov
xor
pop
xlat
xchg
adc
mov
test
ror
adc
popf
lods
nop
or
xchg
xor
sti
mov
in
fs
and
xchg
or
fmul
sub
imul
sbb
shl
inc
cmp
dec
adc
push
lods
or
call
push
add
stc
mov
xchg
push
sub
mul
push
movs
fs
int
retf
int3
and
or
push
inc
lods
xchg
mov
(bad)
lock
in
movs
pop
xchg
mov
mov
pop
test
aaa
cmp
cdq
arpl
scas
rol
or
xor
dec
mov
xor
inc
bswap
xchg
sub
pop
dec
(bad)
int3
or
mov
sub
mov
repz
jl
rcl
push
and
xor
into
cdq
addr16
imul
ds
push
inc
xchg
test
popa
xor
les
sbb
gs
outs
pop
loop
or
ds
sbb
jg
sub
hlt
cwde
adc
pop
pop
cmps
jmp
fdivr
je
xor
cmc
inc
and
adc
cmp
xor
adc
jae
cmp
add
push
sbb
or
sbb
(bad)
sub
add
jp
mov
add
or
jo
shl
aas
cwde
idiv
adc
out
mov
stos
mov
rol
popf
mov
lock
js
sub
xchg
or
shl
out
sub
add
adc
mov
mov
jp
xchg
inc
out
jmp
retf
add
xchg
repnz
add
push
(bad)
sbb
dec
mov
jno
adc
sahf
mov
xchg
mov
xchg
and
adc
inc
fcom
jbe
xchg
xchg
outs
push
arpl
outs
push
adc
std
test
mov
inc
xor
test
xchg
xchg
xor
sbb
aam
or
fwait
pop
not
push
or
jmp
xor
fst
popf
in
xchg
ret
inc
push
xor
iret
pop
and
jmp
repnz
mov
dec
jle
aam
adc
push
adc
dec
cld
shl
adc
jg
pop
xchg
imul
test
jp
jp
(bad)
cmps
sahf
loope
pop
lea
in
pop
setne
and
xchg
sbb
inc
cwde
loop
enter
add
popa
xlat
xchg
pop
fs
retf
xchg
ds
push
jb
mov
xchg
adc
jp
pop
jae
call
adc
in
xchg
mov
ins
shr
movs
sbb
xchg
inc
xchg
pushf
jle
pusha
cwde
and
loope
fst
lods
mov
fidiv
xchg
outs
push
xor
mov
movs
mov
enter
inc
(bad)
push
sbb
leave
xchg
cmc
mov
cmp
xchg
mov
aam
jo
inc
xchg
push
xchg
mov
outs
cmc
pop
xchg
int3
retf
movs
lea
imul
das
adc
dec
data16
xchg
xchg
imul
pop
movs
fwait
add
xchg
jge
xchg
hlt
bound
sbb
xchg
inc
pushf
or
je
or
xchg
add
mov
and
in
repnz
sbb
call
mov
in
in
add
ficom
clc
mov
stos
retf
jno
scas
inc
rcl
lds
mov
xchg
mov
jle
rcl
pop
test
pop
fcom
scas
mov
push
in
xor
and
xchg
nop
popf
pop
clc
mov
lea
adc
es
les
xor
mov
jmp
sbb
call
jg
add
adc
pushf
out
push
mov
adc
jp
xlat
dec
xor
add
icebp
fwait
stos
aam
out
xchg
repz
retf
jl
sahf
mov
retf
adc
xchg
arpl
int3
out
inc
and
and
sub
mov
mov
jecxz
jg
xor
push
mov
cdq
xor
ins
mov
test
jbe
xchg
mov
lahf
pop
sbb
cmc
push
sti
(bad)
mov
ficomp
jno
jae
add
mov
(bad)
and
push
into
add
bound
dec
xchg
lea
jl
or
mov
pusha
add
mov
xchg
stc
fsubr
mov
inc
push
lods
ret
cmp
loopne
dec
fbld
lds
push
push
xor
inc
inc
and
xchg
mov
cmc
nop
mov
fidivr
push
in
jae
mov
aas
and
loop
jmp
out
push
and
xchg
retf
das
xor
or
and
cmp
xor
shl
mov
mov
xchg
push
and
pop
mov
or
leave
ret
dec
fcom
cmp
lahf
or
mov
div
outs
aam
mov
mov
mov
pop
inc
cmc
push
test
and
gs
dec
pusha
popf
mov
mov
or
pop
dec
add
xchg
xchg
std
clc
dec
or
dec
xchg
add
cmc
or
add
lahf
add
in
xor
cmp
push
scas
xor
mov
mov
and
ret
xchg
sub
sub
pop
xor
mov
jae
or
lods
sub
xchg
adc
adc
or
xchg
xchg
sbb
scas
xor
repnz
sub
xchg
add
imul
xor
dec
les
pop
xchg
pop
out
jecxz
loopne
mov
xchg
pop
icebp
and
fstp
dec
sub
add
xchg
(bad)
jge
call
mov
test
mov
jge
retf
push
cmp
xor
and
push
mov
jno
fstp
mov
ins
push
sbb
xchg
stos
jg
test
adc
xchg
fcomp
sar
outs
daa
push
adc
mov
(bad)
cmp
shl
push
pop
fwait
xor
xlat
nop
cli
push
xchg
push
data16
es
push
sbb
mov
add
push
cmps
bswap
adc
xlat
xchg
jns
lock
xchg
(bad)
out
cwde
or
lds
jno
xchg
sbb
es
hlt
sub
xchg
mov
paddw
pop
cmp
mov
mov
nop
sub
push
inc
inc
test
xchg
push
cmp
and
lea
out
jo
stos
das
retf
push
ret
and
sahf
dec
in
mov
xchg
shl
push
xchg
lods
or
shl
fadd
gs
test
in
xor
push
push
or
(bad)
mov
xchg
dec
add
data16
inc
jg
jbe
adc
inc
pop
cmps
ins
dec
lods
xchg
jno
stos
in
ret
xchg
push
xchg
scas
inc
in
add
or
test
sbb
inc
xchg
inc
test
or
(bad)
(bad)
cmp
sar
ss
pop
mov
adc
scas
pop
stc
test
pop
sbb
fiadd
sub
xor
dec
cwde
clc
push
or
pop
adc
dec
div
imul
fs
cdq
lods
out
pusha
jle
aaa
imul
jbe
xchg
pop
and
fdiv
rcl
mov
inc
push
add
loopne
fist
xchg
std
xchg
xchg
cmp
push
adc
xor
ja
and
mov
sub
mov
stc
mov
cmp
add
sub
ja
add
xchg
sar
or
sbb
jne
mov
scas
adc
add
cmp
cld
fild
cwde
(bad)
fsub
mov
push
xor
push
lods
jle
rcl
rcl
push
ja
les
outs
or
add
imul
test
xchg
inc
ficomp
dec
xchg
push
(bad)
and
xchg
mov
lahf
shr
rcr
or
pop
arpl
add
inc
in
retf
xchg
inc
jnp
xor
sub
and
pop
loopne
xor
sbb
jge
ds
push
mov
add
and
mov
test
and
fwait
push
rol
pop
les
lea
movs
mov
cmp
push
gs
aas
shr
xor
popa
aaa
out
fwait
mov
sbb
cmp
mov
hlt
or
test
stos
or
jmp
xchg
push
push
cmp
clc
xchg
cmp
test
push
jns
in
cmps
push
rcl
inc
xchg
push
push
mov
rcr
call
mov
jecxz
sbb
fs
jge
xchg
cmps
pop
push
movs
dec
and
mov
iret
cmp
push
jmp
dec
push
add
je
xchg
pushf
xchg
fcomip
sub
sahf
mov
cdq
nop
sbb
mov
enter
data16
aad
xchg
jecxz
cwde
ds
call
sub
xchg
(bad)
int3
mov
fs
xchg
pop
ror
and
inc
mov
inc
pusha
mov
pop
jnp
and
adc
out
aaa
ja
mov
loope
inc
cli
bound
(bad)
pop
imul
cmp
mov
xchg
es
clc
(bad)
lock
mov
adc
mov
xor
mov
inc
fptan
dec
bound
xchg
fild
mov
dec
sar
mov
adc
mov
jbe
gs
lahf
fwait
cmp
xchg
fs
in
lds
xor
sbb
adc
popf
bound
daa
loopne
cmp
js
sub
sti
dec
pop
xchg
and
or
xchg
jecxz
inc
mov
add
dec
xchg
cmp
xor
mov
ret
sub
xchg
call
and
push
jmp
repnz
inc
fwait
ja
mov
fwait
cmc
add
loop
ret
fcmove
mov
jmp
lock
mov
dec
jbe
xchg
stos
adc
ror
jle
mov
push
fmul
or
xchg
cli
stos
xchg
cmp
sbb
pop
loop
sbb
cs
fist
cmp
enter
xchg
jns
pop
lds
das
or
test
sti
jmp
jnp
add
jb
sbb
dec
leave
ret
xchg
in
or
aas
loope
sbb
ret
fwait
mov
in
popa
test
sub
cmp
xchg
inc
xchg
nop
shl
sbb
xchg
out
cmp
test
mov
repz
jg
ret
fst
pop
adc
xchg
cmp
test
xor
outs
or
mov
fld
data16
in
xchg
inc
push
leave
cmp
dec
outs
dec
xchg
mov
dec
pusha
dec
push
ret
inc
mov
cmps
mov
mov
out
jmp
mov
mov
iret
je
js
xchg
mov
in
inc
dec
xor
or
les
xchg
add
and
mov
jmp
stc
jmp
jb
pop
push
adc
ds
int3
into
inc
inc
dec
xchg
and
xchg
mov
sbb
dec
xchg
cwde
jne
xchg
mov
aaa
inc
test
mov
sti
lahf
cmp
icebp
call
cwde
pop
xchg
or
(bad)
mov
aas
xchg
dec
mov
mov
out
jns
(bad)
xchg
xchg
add
xchg
sub
sub
xchg
fstp
not
xchg
les
loopne
sete
sbb
test
fwait
(bad)
xor
in
loop
les
adc
jecxz
add
repnz
stc
repz
(bad)
cmc
adc
push
pop
xor
aaa
mov
sbb
push
sahf
mov
retf
pop
mov
push
shl
mov
(bad)
xor
mov
cld
dec
(bad)
add
sbb
mul
mov
hlt
jl
(bad)
inc
push
xchg
into
xor
loope
push
lds
mov
mov
push
fs
popf
xchg
jp
mov
adc
dec
movs
xchg
mov
adc
rcl
aas
push
lods
xor
shl
xchg
cwde
mov
push
das
or
xchg
sub
adc
loop
or
pusha
push
mov
out
das
loopne
jbe
mov
xchg
test
xchg
aam
ret
jbe
mov
dec
xlat
sub
sar
push
test
bound
xchg
jle
lock
in
in
aam
pop
fsub
xchg
inc
test
mov
xchg
add
dec
paddusw
call
xor
adc
repz
pop
mov
add
test
cmp
inc
mov
test
imul
xchg
cmp
pop
or
sbb
outs
loopne
xchg
repz
or
xchg
ror
cli
lods
add
rcr
cmp
push
xchg
aas
mov
mov
and
pop
or
xchg
inc
cs
sbb
inc
mov
packsswb
icebp
std
mov
dec
and
dec
imul
add
ins
sub
pop
and
nop
jmp
xchg
scas
mov
fiadd
out
aas
xchg
inc
push
xor
push
dec
and
xor
push
or
xchg
inc
dec
call
xchg
daa
jbe
stos
push
xor
cmps
xchg
hlt
test
push
imul
add
ins
jge
fadd
and
daa
test
push
adc
std
xchg
lea
jb
mov
sub
out
in
or
cmp
mov
xlat
cmps
push
xchg
std
loop
addr16
imul
mov
fst
mov
xchg
in
setbe
inc
cmovge
mov
xchg
mov
mov
xchg
fwait
shl
int3
push
push
mov
repz
mov
in
xchg
jno
mov
jl
xchg
and
icebp
push
je
je
cwde
ficomp
mov
mov
pop
xchg
rsm
dec
pushf
ret
mov
adc
retf
xchg
ror
cmp
mov
jo
sbb
xchg
push
outs
mov
jnp
push
push
mov
ins
xchg
xchg
in
aad
not
loop
xchg
in
push
or
jne
sub
mov
jo
jle
push
sbb
push
mov
xor
movs
mov
and
sbb
fwait
sbb
lods
int3
add
mov
jb
cmps
xchg
pop
mov
leave
add
mov
inc
inc
aas
or
in
adc
pop
or
cdq
adc
jne
(bad)
xchg
and
add
daa
stc
xchg
lods
shl
cmp
mov
int3
mov
sub
lods
xchg
sbb
stc
ss
pop
xchg
push
idiv
xlat
cmc
fsub
mov
cmp
out
xchg
inc
adc
push
int3
movs
aam
mov
xlat
and
cmp
test
movs
mov
hlt
xchg
outs
push
js
or
sub
mov
out
popf
xlat
shl
cli
movs
loopne
cs
ficom
mov
or
mov
push
pop
js
push
or
arpl
jmp
call
jo
(bad)
mov
ret
aam
lods
xchg
adc
lods
mov
rcl
fs
jle
xchg
cdq
fcom
mov
sbb
cmc
rol
mov
pop
xor
jmp
mov
sahf
push
mov
aam
es
in
mov
jae
dec
scas
add
loopne
pop
les
lea
mov
cmp
and
cld
jle
das
pop
(bad)
cmps
xor
ret
popf
(bad)
jl
inc
cmp
push
jecxz
mov
pop
cwde
xchg
mov
mov
out
add
mov
retf
das
jp
jmp
mov
js
xchg
(bad)
mov
fld
adc
dec
test
mov
fwait
rol
mov
std
les
(bad)
lahf
inc
cs
adc
lock
rcl
xchg
ficom
lods
pushf
inc
pop
out
xchg
push
fwait
push
adc
dec
lds
xchg
sub
mov
es
xor
dec
popa
popf
lds
rcl
mov
xchg
xchg
push
xchg
sti
iret
stos
jg
fld
add
inc
xchg
loope
mov
sbb
popa
test
sar
lods
dec
dec
pop
aam
lds
pop
jo
sbb
mov
fidiv
mov
xchg
cmps
movs
sub
mov
push
shl
mov
fs
hlt
add
pop
ss
jecxz
xor
scas
add
lock
xor
int
daa
cmp
lods
fwait
shl
ror
xor
fldz
scas
popf
sbb
xchg
dec
xchg
aam
jl
cmp
mov
scas
xchg
xchg
pop
nop
pop
aad
inc
stc
inc
nop
lods
mov
push
test
xchg
aad
add
nop
rcl
retf
punpcklwd
retf
jbe
aas
push
in
add
gs
int3
shr
mov
stos
mov
or
xchg
xchg
sbb
test
xchg
pop
adc
pop
jmp
xchg
repnz
sub
int
rcl
scas
repz
pop
mov
pop
xchg
je
sub
add
es
sbb
adc
shr
add
int
stos
xchg
mov
adc
call
xchg
sbb
jecxz
fwait
push
test
cmps
mov
mov
xchg
and
mov
pop
mov
xchg
mov
dec
dec
mov
add
sub
xchg
add
jmp
dec
stos
adc
test
mov
inc
add
pop
mov
pop
xor
dec
addr16
push
add
dec
je
std
adc
xchg
fist
xor
aaa
inc
inc
aas
sub
jg
inc
jmp
dec
jo
mov
jne
push
jmp
scas
pop
loop
inc
xchg
enter
pmuludq
cwde
push
ds
ss
test
xchg
sbb
mov
retf
retf
shl
mov
test
mov
adc
ret
cmp
shl
icebp
int3
cmp
push
mov
mov
pop
(bad)
sbb
xor
out
xchg
(bad)
sub
inc
and
mov
jmp
adc
sbb
cmp
das
mov
and
stos
movs
adc
fld
(bad)
arpl
fst
adc
rcl
cdq
xor
mov
mov
pop
out
xlat
add
fwait
sbb
or
clc
push
adc
ja
mov
mov
push
test
loope
inc
or
push
lahf
cs
adc
push
mov
fdiv
stc
enter
loope
xor
fild
sub
pop
and
mov
and
ins
xchg
and
shl
and
mov
or
addr16
push
push
xchg
mov
or
lahf
xchg
cmp
sbb
push
mov
push
scas
adc
es
xchg
xchg
sub
cmp
stos
pop
test
mov
sub
ins
call
stos
ret
fnsave
mov
leave
sete
xor
cmp
sti
ret
fldenv
test
fwait
dec
sub
jno
add
cmp
jg
mov
icebp
xchg
jmp
imul
cli
adc
xchg
imul
outs
dec
add
adc
xchg
shr
mov
cmp
jae
jecxz
or
icebp
jo
dec
mov
xor
xchg
fldcw
xchg
nop
and
push
xchg
movs
push
cmps
fwait
push
in
dec
or
sbb
sbb
rcr
sahf
in
popa
pusha
ds
and
test
icebp
mov
or
ret
jns
fwait
cmp
mov
std
inc
xchg
inc
cmps
add
push
xor
les
jae
or
push
rcl
icebp
bnd
loope
xor
sub
mov
test
jmp
xchg
cld
mov
xchg
mov
arpl
cli
dec
or
inc
xchg
xchg
push
mov
nop
lods
adc
dec
jmp
xchg
add
jne
out
xchg
xchg
sub
(bad)
xchg
sbb
pop
mov
sub
cwde
dec
pop
popf
or
mov
retf
add
fucomip
fcom
jl
push
adc
mov
jo
pop
push
pop
jg
dec
ficom
or
pop
icebp
or
xchg
cmp
int3
jmp
cmp
mov
xchg
(bad)
std
popf
sbb
imul
call
mov
loope
or
add
xchg
cmp
pop
adc
add
and
xchg
xor
cwde
jmp
mov
mov
aad
inc
xchg
out
cmp
dec
(bad)
(bad)
jo
in
push
dec
push
in
loop
jge
ins
adc
xchg
adc
test
and
fwait
pushf
jecxz
xchg
lods
add
movs
fdivrp
mov
push
sub
loop
aas
cs
je
ror
pop
fwait
jecxz
outs
sub
cdq
push
loope
mov
sahf
push
lea
push
in
sub
dec
in
daa
movs
ss
int3
jnp
add
or
rcl
xchg
pusha
dec
jp
das
push
push
jno
push
mov
jbe
cwde
out
fisub
sbb
ins
iret
std
xchg
pusha
and
adc
ds
jle
in
rcl
retf
mov
mov
xor
and
inc
repz
xchg
push
sbb
cmp
mov
int3
arpl
clc
loop
aaa
pop
jl
(bad)
jecxz
sub
adc
xchg
xchg
cmp
pop
mov
lahf
xchg
mov
mov
ins
adc
test
xor
scas
mov
ins
scas
aaa
inc
mov
mov
or
addr16
rcl
mov
inc
xor
inc
or
pop
fcmovu
sti
and
adc
xor
repz
fcom
addr16
loope
iret
adc
nop
sub
adc
cld
es
enter
jb
mov
xchg
mov
fild
add
jmp
out
xchg
pop
nop
adc
xor
loopne
pushf
iret
gs
adc
cmps
inc
loope
mov
(bad)
ror
cmps
into
shl
inc
dec
push
div
ja
dec
push
jp
cmps
sub
push
ins
xchg
out
aam
jl
add
push
repz
es
jl
or
movs
loop
mov
pop
sbb
test
xchg
xchg
(bad)
sahf
sub
nop
ja
pop
xchg
test
and
xchg
xchg
jg
xchg
xchg
les
loop
pusha
cmp
movs
mov
xchg
push
ja
fadd
xchg
mov
(bad)
sar
sub
xchg
xchg
lahf
data16
cmps
jle
outs
xchg
xchg
mov
iret
dec
mov
adc
outs
dec
cdq
mov
out
aas
fcomp
je
cmp
cdq
into
dec
push
mov
dec
cmp
and
rcl
arpl
sbb
sub
and
test
add
aas
mov
inc
gs
hlt
imul
je
mov
mov
jb
xchg
mov
dec
das
aas
xchg
pop
jnp
dec
retf
pop
loopne
mov
adc
cmps
mov
xor
jp
mov
stos
add
movs
push
xchg
xor
stc
push
xchg
jae
pop
aam
xchg
mov
inc
dec
rcl
xchg
test
mov
cmps
and
pop
xchg
ret
(bad)
pushf
and
mov
aam
enter
xchg
aad
data16
xchg
adc
leave
loopne
cmps
in
iret
pop
or
sbb
bound
mov
dec
adc
dec
dec
or
(bad)
pop
mov
xchg
call
xchg
adc
int
rcr
jecxz
adc
or
xor
mov
push
stos
lock
sbb
jno
mov
fist
mov
stos
scas
and
cmp
push
js
mov
mov
test
mov
sbb
popa
movs
out
fwait
gs
xchg
mov
mov
les
push
loop
dec
adc
ret
xor
int3
fist
push
inc
mov
je
add
xchg
sub
or
pop
dec
movs
ins
add
fbstp
call
fdivr
dec
frstor
dec
mov
cs
stos
xchg
iret
cmc
popf
xor
pushf
(bad)
dec
mov
pop
push
adc
not
inc
div
xchg
rcr
(bad)
in
dec
push
test
in
jno
xchg
jg
outs
into
jo
sbb
loope
in
and
ins
adc
iret
adc
add
nop
xchg
xchg
cmp
push
xchg
int3
cdq
out
in
(bad)
jge
xchg
iret
and
movs
out
outs
mov
xchg
jge
xchg
pop
rcl
not
xchg
lds
aas
or
mov
jns
pop
xchg
bound
pop
jl
iret
push
xchg
sub
(bad)
mov
sahf
cli
adc
cmps
inc
pop
out
mov
and
xchg
movs
fucom
jne
(bad)
mov
fild
sub
or
out
fst
push
jnp
repz
loop
in
adc
xchg
into
daa
(bad)
jle
out
xchg
mov
imul
ficom
stos
pop
fild
nop
or
rcl
js
mov
jp
into
and
retf
mov
inc
xchg
(bad)
in
(bad)
jns
add
dec
fwait
push
sbb
xor
mov
cmp
fsub
mov
ins
adc
dec
inc
mov
iret
sti
jp
(bad)
lahf
aaa
stos
xchg
mov
ficom
ss
mov
pop
outs
mov
call
lahf
or
hlt
ss
mov
bound
movs
lds
lock
xchg
xlat
movs
mov
add
pop
adc
jae
in
fstp
pushf
ret
xchg
enter
into
and
mov
xchg
xchg
pop
pop
test
js
jbe
jl
add
jg
dec
push
xchg
or
enter
xor
and
lods
xchg
stos
sub
xchg
cmps
js
sbb
sete
add
call
sub
xchg
inc
xchg
and
push
call
dec
sbb
and
mov
call
iret
cld
jnp
push
push
mov
mov
mov
push
cmp
xor
std
lds
jns
test
call
out
pop
xor
inc
(bad)
mov
fwait
(bad)
stos
hlt
fisubr
lock
xor
(bad)
xchg
jae
inc
xor
xchg
sbb
push
push
sbb
or
add
es
lahf
jge
mov
aam
rcl
in
arpl
mov
div
ja
cli
and
jl
and
jp
xchg
dec
ins
add
cmp
sbb
pop
pushf
jbe
shr
stos
aas
push
lock
lahf
xor
xchg
popf
xchg
pop
ins
and
daa
gs
xor
(bad)
or
mov
fadd
test
add
fisub
xchg
out
scas
and
aad
gs
xor
cwde
or
(bad)
mov
adc
sbb
test
sub
inc
ret
dec
(bad)
mov
popa
std
jbe
pop
stos
jmp
cmps
and
xchg
bound
scas
sub
xchg
(bad)
es
outs
pop
das
call
add
test
out
xchg
xchg
call
movs
xor
popa
xchg
xchg
push
or
pop
inc
jecxz
rcl
cmp
rcl
jbe
xchg
jo
stos
push
jmp
in
xchg
shl
out
xchg
push
mov
out
cmp
xchg
dec
mov
inc
adc
lock
mov
xor
dec
(bad)
xchg
es
inc
xchg
jecxz
xchg
mov
(bad)
(bad)
push
shl
xchg
sbb
aad
or
pop
inc
test
ror
adc
dec
mov
(bad)
fbld
push
outs
xchg
jo
jne
dec
mov
pop
scas
xchg
push
fldcw
adc
loop
shl
(bad)
sub
xor
adc
into
shl
adc
adc
int3
mov
jae
stos
push
xchg
in
sub
mov
add
lock
fwait
lea
cwde
pop
(bad)
mov
xchg
or
adc
and
fisubr
mov
addr16
or
inc
call
nop
push
xchg
adc
inc
dec
in
cli
clc
ror
aaa
or
je
xor
xchg
xchg
jg
movs
pop
js
dec
xchg
cmp
lods
loope
mov
or
sbb
call
and
jae
push
je
cs
jecxz
ret
fistp
js
(bad)
xchg
ss
push
add
fdiv
loope
ins
push
mov
mov
cmp
or
fwait
xchg
outs
jle
mov
jp
cld
xchg
push
data16
jns
(bad)
xchg
xchg
jge
out
jp
mul
mov
xchg
mov
push
add
mov
xchg
pop
(bad)
shr
test
mov
mov
push
pushf
into
push
fldenv
jle
ds
push
adc
mov
push
add
lahf
jae
xchg
pop
scas
push
rcr
jle
pop
cld
sub
or
sbb
or
or
push
push
or
(bad)
mov
mov
push
sbb
add
and
inc
mov
in
call
mov
cmc
and
nop
inc
jmp
or
lds
inc
push
add
loop
mov
retf
xchg
fdivr
repnz
loope
stos
and
xor
out
adc
pop
call
repz
stc
test
pop
ret
dec
fbld
mov
pop
retf
xchg
sbb
repnz
sahf
mov
xor
xor
sbb
je
scas
push
xchg
outs
popa
mov
or
jg
popf
mov
daa
cwde
or
or
adc
pop
xor
repz
inc
jp
int
es
pop
out
mov
mov
push
in
gs
mov
fcmovbe
adc
(bad)
in
pop
mov
hlt
test
lea
mov
xchg
enter
repz
xchg
xchg
xchg
adc
call
data16
and
mov
std
enter
sbb
iret
jo
or
test
ja
and
cmp
rcr
stc
out
push
aam
into
sub
call
retf
repz
dec
xchg
cmp
xchg
and
xor
push
call
stos
and
int
ror
push
adc
movs
mov
mov
jmp
sahf
js
jecxz
iret
int3
repnz
loopne
jae
cmp
mov
into
lock
xchg
lods
xor
ds
xchg
push
cmps
lds
loop
lahf
push
mov
outs
push
push
inc
xchg
aad
stc
cmp
adc
add
sub
ret
das
out
into
popf
ret
stos
cli
xchg
loop
call
pop
xchg
stos
mov
ja
mov
xor
in
add
mov
out
pop
mov
loopne
nop
xchg
and
add
dec
xchg
rcl
aaa
fwait
xchg
jle
lock
mov
or
lahf
xor
and
imul
jb
xchg
mov
outs
inc
shr
imul
xchg
and
cs
retf
xchg
(bad)
bnd
sbb
mov
xchg
out
js
cdq
test
imul
in
jg
adc
xchg
push
ins
inc
ss
repnz
add
(bad)
mov
adc
addr16
popf
lahf
mov
test
out
aaa
sbb
inc
sbb
sti
or
mov
dec
mov
sub
int3
int3
push
xor
iret
mov
into
lods
std
cmp
adc
ds
clc
pop
adc
(bad)
out
xchg
test
push
cmc
sar
pushf
sub
xor
xor
adc
mov
xchg
cmp
add
out
dec
jbe
xchg
in
adc
sbb
inc
mov
mov
xchg
imul
sbb
adc
xchg
je
cmp
jbe
stos
xchg
lods
cli
xor
mov
mov
adc
xchg
inc
nop
cs
sbb
xchg
sbb
sbb
cmps
cdq
mov
jns
pop
xchg
cmp
push
jmp
xchg
mov
xchg
jbe
jle
jne
imul
mov
inc
cld
xor
mov
dec
sub
not
jno
call
push
mov
xchg
aad
scas
xchg
out
jl
sbb
ret
cmps
jne
and
xchg
ftst
bndstx
xchg
bound
fsubr
inc
xlat
xchg
ins
cmps
or
mov
das
pop
xchg
or
xchg
sub
jp
add
sti
es
and
clc
and
mov
shl
push
jl
push
push
ja
push
xchg
inc
xchg
sbb
jg
test
sub
jle
xchg
dec
sbb
popa
or
test
in
ja
jmp
pop
mov
dec
sbb
dec
bound
loope
into
or
xchg
jle
fstp
dec
pop
inc
test
pop
mov
fwait
cli
or
mov
xor
popa
int3
pop
cmp
bound
das
call
test
iret
mov
cli
inc
mov
lahf
aam
out
inc
xchg
xor
js
shl
push
and
stos
movs
cs
xchg
jb
clc
inc
nop
imul
xor
rcr
mov
pop
dec
xchg
dec
nop
aad
cwde
push
ret
mov
movs
jp
xchg
mov
test
xor
jge
fwait
sbb
xor
jecxz
pop
cmp
pop
hlt
mov
(bad)
mov
sub
xchg
test
arpl
dec
leave
inc
push
xchg
push
pop
mov
retf
loop
push
stc
mov
jmp
inc
push
xor
in
ss
ss
mov
aaa
pop
call
inc
cmp
fmul
test
or
repz
push
cdq
xchg
js
(bad)
fcom
fst
push
pop
mov
xor
mov
xchg
mov
inc
mov
adc
add
sbb
xchg
out
fs
sub
int
ins
nop
pop
mov
sub
and
inc
jle
xchg
addr16
dec
ja
inc
outs
dec
add
xchg
cwde
js
mov
mov
jbe
push
jmp
loopne
cmps
cmp
jmp
loop
push
in
fstp
sbb
jnp
jb
aad
je
jle
sbb
xchg
add
xchg
je
lock
inc
fwait
adc
scas
mov
ds
je
add
bound
xlat
imul
mov
inc
xchg
clc
xor
test
imul
mov
push
inc
cmp
mov
xchg
dec
movs
mov
jmp
fst
pop
push
inc
xchg
mov
mov
ja
ins
inc
pusha
pushf
cs
outs
mov
mov
aam
enter
stos
in
sub
push
lahf
movs
das
scas
or
loopne
sar
les
shl
pop
es
(bad)
jle
sub
ret
js
fdivr
sti
add
retf
mov
pop
adc
call
jb
loop
fisubr
hlt
mov
cmc
xchg
ds
fnstenv
mov
je
cmp
sbb
pop
xchg
sub
pop
adc
pop
xor
add
sti
sub
jmp
adc
ror
or
adc
movs
adc
xchg
jg
imul
xor
pop
test
mov
push
fdivr
imul
aam
je
mov
in
xchg
repz
jp
xchg
push
sbb
outs
int3
mov
sbb
sub
push
aaa
sbb
pop
inc
fist
mov
je
push
push
add
out
add
and
(bad)
leave
xchg
int3
xor
sbb
mov
xchg
mov
(bad)
clc
sub
mov
mov
xchg
sbb
clc
shr
movs
xchg
adc
jo
push
mov
pop
int
xlat
and
cdq
adc
mov
adc
icebp
rcr
and
mov
jo
into
jp
xchg
mov
mov
pusha
mov
xchg
fidiv
popa
nop
sbb
aad
fist
push
cmps
mov
ret
adc
xchg
mov
out
mov
push
xchg
push
and
and
cwde
fsubr
ret
movs
iret
imul
cs
xchg
or
add
iret
pop
lods
iret
fisubr
xchg
and
addr16
mov
add
movs
push
je
xchg
js
mov
icebp
stos
or
xchg
adc
xor
or
mov
mov
mov
ficom
stc
jnp
xchg
loopne
sar
xchg
int3
js
outs
lock
jge
imul
retf
les
xchg
mov
(bad)
ss
xchg
jmp
push
bound
or
mov
xchg
adc
xchg
addr16
mov
sar
int
inc
xor
fucompp
fwait
xor
popf
fxtract
js
mov
sub
xor
inc
xchg
sbb
push
ja
shr
xlat
mov
cmp
adc
and
inc
into
xchg
popf
scas
fisub
pop
addr16
(bad)
shr
mov
jl
or
lods
aad
ja
push
jnp
and
movs
xchg
xchg
sbb
scas
js
jg
clc
test
stos
add
mov
cmc
ins
out
and
xchg
lods
nop
repz
mov
hlt
sbb
test
add
in
retf
or
xchg
not
shl
cmp
xchg
stos
xlat
jecxz
in
pop
hlt
sub
or
rcl
add
inc
cmp
adc
sub
push
fnstenv
je
pushf
adc
dec
push
adc
data16
sbb
loop
sub
out
mov
sub
sar
scas
mov
ds
push
rcr
ficom
dec
and
push
mov
dec
inc
dec
mov
sbb
sub
out
xchg
cmps
add
mov
or
icebp
xchg
xor
int
and
push
das
iret
adc
imul
fwait
add
enter
(bad)
xchg
cmp
(bad)
sub
xchg
int
pop
mov
or
mov
sti
push
xchg
mov
hlt
in
jmp
xor
jo
xchg
push
cli
sysenter
and
xchg
pop
fwait
popfw
jb
mov
test
call
jns
xchg
jno
pop
cmp
inc
mov
xchg
bound
cs
sahf
cmp
dec
mov
inc
push
imul
xchg
inc
cmp
idiv
clc
call
xchg
out
push
popa
or
mov
in
shl
cmp
leave
xchg
outs
cmp
ins
mov
xchg
lahf
dec
pop
imul
push
(bad)
mov
push
clc
not
inc
in
mov
ret
nop
jmp
cli
mov
data16
(bad)
jle
dec
ins
xor
mov
pop
sbb
mov
lods
sbb
mov
rcl
xchg
(bad)
ficomp
pop
shl
jge
data16
int
xlat
xchg
lds
and
and
mov
or
xchg
pop
inc
mov
mov
cmps
mov
test
inc
xchg
jl
repnz
inc
rcr
mov
xchg
loopne
push
sbb
(bad)
jne
bnd
xchg
jbe
xchg
sar
mov
icebp
cmp
(bad)
fcomp
test
lds
call
movs
xchg
neg
enter
(bad)
hlt
pop
arpl
(bad)
fst
repz
mov
xchg
mov
dec
inc
(bad)
push
xchg
sub
xchg
push
popa
push
cs
xchg
pusha
mov
js
adc
ret
not
jnp
cmp
push
repnz
pop
xchg
imul
dec
jg
imul
cmp
push
add
(bad)
cmc
xchg
enter
ja
shl
add
cmp
(bad)
mov
and
mov
adc
test
aam
loopne
xchg
aam
cmps
sbb
stos
neg
mov
jle
dec
lods
mov
mov
xchg
loop
fistp
sbb
dec
mov
xchg
xchg
jae
sub
xchg
out
in
mov
addr16
and
clc
outs
cmps
mov
mov
cwde
jnp
xchg
push
scas
dec
xchg
(bad)
sub
fisttp
mov
loopne
add
cmps
xlat
popa
xchg
ret
xor
bswap
mov
cmc
xchg
or
outs
sbb
mov
cmp
mov
not
jmp
sbb
dec
sbb
dec
(bad)
jb
xchg
test
pop
ficom
out
sbb
aam
push
xchg
jne
aam
scas
lock
or
int3
add
rcr
xchg
and
or
push
xchg
jnp
xchg
aaa
or
leave
ja
pop
xchg
enter
in
(bad)
rcl
das
add
xchg
xchg
xchg
imul
cdq
jl
xchg
xchg
pop
and
mov
xchg
mov
js
adc
call
mov
and
xchg
push
out
adc
in
dec
xchg
mov
add
pop
mov
popf
xchg
mov
sbb
int
add
loopne
stos
dec
cs
cmps
add
shl
mov
jnp
jecxz
mov
pop
add
or
mov
rol
sbb
addr16
cmp
xchg
ins
mov
cs
pop
xlat
xchg
mov
imul
dec
enter
mov
add
fstp
aas
pop
xchg
xor
dec
xchg
call
xchg
dec
shr
sbb
mov
xchg
dec
std
mov
jl
push
sbb
push
xchg
(bad)
ins
sub
mov
mov
fwait
push
or
(bad)
je
inc
sub
dec
add
xchg
mov
or
ficom
xchg
mov
xor
es
ror
or
popa
mov
lahf
(bad)
shl
xchg
jg
call
mov
and
cmc
dec
jno
xchg
push
cwde
aam
jae
xlat
cmp
ins
xor
mov
cwde
xor
ret
mov
cmp
or
xchg
jae
in
lahf
inc
into
outs
xchg
xor
or
(bad)
adc
push
aam
sbb
cs
xchg
and
ror
(bad)
movs
cmc
push
and
cmps
xchg
sub
jne
fdivr
push
pushf
jl
aaa
mov
xchg
fidivr
shr
mov
xchg
jbe
push
adc
fs
xchg
leave
pop
stos
(bad)
fnsave
xchg
out
aad
fdivp
aaa
pop
jne
xchg
dec
pop
pusha
pop
fnstsw
mov
leave
dec
mov
je
add
lock
jge
xor
cmp
cwde
jmp
xchg
inc
outs
dec
retf
cli
push
xor
xchg
rol
xchg
cmps
outs
adc
pop
std
cmp
mov
cmp
mov
pop
mov
in
push
in
dec
xchg
mov
sahf
lods
loop
jo
adc
test
lahf
rol
enter
inc
add
push
and
pushf
and
div
sysenter
xchg
jg
sub
lods
aad
cs
nop
std
mov
(bad)
icebp
outs
push
stc
pop
or
dec
repnz
jbe
ror
adc
inc
add
out
lahf
sub
nop
pusha
xor
inc
xchg
lock
out
jp
mov
icebp
fcom
and
xchg
out
addr16
mov
jecxz
loopne
pop
mov
xchg
neg
push
xchg
jae
pop
jbe
mov
imul
(bad)
hlt
fwait
enter
xchg
and
dec
retf
xchg
es
fstp
xchg
loopne
enter
lods
push
movs
pop
cdq
xchg
cmp
xchg
mov
dec
pop
mov
shl
test
rcl
adc
jne
or
mov
xchg
xchg
test
and
in
adc
das
xchg
cmps
les
push
push
in
jp
xchg
scas
mov
sbb
xor
sar
jo
pop
shl
lds
daa
nop
iret
xchg
add
aam
cmp
pop
or
xchg
xor
pop
movs
gs
adc
retf
mov
lss
jl
push
xor
push
pop
fs
sahf
mov
add
scas
jae
test
clc
nop
sub
call
pusha
xchg
and
push
and
mul
daa
sbb
in
aad
les
fbld
mov
ds
sub
mov
shl
pop
xor
out
aad
mov
hlt
sahf
mov
rcl
and
xchg
cli
xchg
(bad)
out
in
call
xor
xchg
xor
inc
lods
add
bound
je
out
sbb
sbb
or
push
xchg
xchg
ds
jne
popf
shr
pop
fild
xchg
in
xor
in
mov
es
xchg
push
aas
les
mov
je
stos
jmp
nop
mov
xor
xchg
fbld
cmp
add
fs
sub
sar
scas
add
mov
dec
mov
and
lahf
push
iret
pop
ret
push
sub
xchg
mov
xchg
jb
fcomp
lods
xchg
in
out
mov
and
xchg
or
and
out
dec
imul
mov
cmp
lods
or
push
jns
ror
push
xchg
push
aam
shr
xchg
mov
dec
fdivr
(bad)
(bad)
xchg
enter
in
stos
and
cmp
into
dec
(bad)
mov
xchg
or
aas
nop
fdivr
les
push
rcl
inc
in
mov
fiadd
fstp
xchg
or
and
fmul
imul
xor
dec
push
(bad)
icebp
mov
int
xchg
rol
mov
adc
xlat
ja
add
rcr
pop
aam
leave
add
jp
es
das
sar
rcr
stos
and
(bad)
and
add
dec
jmp
outs
les
repnz
hlt
xchg
add
xor
jae
(bad)
(bad)
aam
pop
xchg
popa
mov
jns
xor
xchg
neg
sub
or
cmc
iret
enter
push
inc
repnz
xchg
push
xchg
clc
jl
and
xchg
sub
add
push
xchg
jnp
mov
test
neg
mov
(bad)
mov
and
fsubr
clc
ret
add
lods
sub
stos
(bad)
xchg
test
fisubr
xchg
or
retf
add
pop
pop
imul
add
mov
xor
dec
xchg
inc
outs
add
xchg
int
mov
push
fldcw
ins
xchg
push
inc
adc
xchg
ret
fild
shr
mov
push
in
(bad)
jg
test
jo
aas
xchg
in
jae
pop
retf
add
add
popf
xchg
bound
js
call
push
call
iret
add
cmp
xor
and
xchg
jno
jmp
inc
leave
xchg
adc
jnp
aam
xchg
pop
push
push
or
or
aad
sbb
xor
and
and
cmovl
xor
pop
fldl2t
xchg
cmp
cld
dec
and
sub
iret
push
loopne
or
mov
xchg
or
aaa
mov
xchg
xchg
fidivr
leave
fwait
cli
clc
xlat
mov
adc
dec
xor
fstp
jnp
and
int
not
cli
js
adc
cld
scas
inc
or
add
stc
sub
and
adc
dec
cmc
cli
hlt
lods
jle
xchg
ret
xchg
bound
jmp
test
addr16
xchg
cwde
dec
shl
push
imul
(bad)
push
xchg
les
lods
call
not
hlt
movs
xchg
jnp
lds
mov
xchg
es
fs
xchg
dec
xchg
out
out
push
xchg
sbb
mov
or
xchg
call
sbb
adc
jl
retf
xchg
pop
xor
xchg
pop
minps
jmp
cmps
xchg
or
or
lds
pop
mov
pop
call
in
(bad)
mov
jmp
pushf
xchg
ins
arpl
(bad)
jl
pop
mov
and
fsqrt
xchg
cmp
movs
cmc
int3
(bad)
mov
dec
mov
xor
loope
fstp
ds
sar
(bad)
jno
out
(bad)
mov
stc
jmp
xchg
and
mul
xchg
int
push
movs
in
push
scas
xchg
mov
cmp
aam
retf
and
pop
pop
pop
ins
lock
cmp
aad
mov
xchg
jg
cmp
call
cmp
mov
shl
xchg
out
cmp
adc
lds
xchg
and
clc
loop
cdq
sar
xchg
sbb
xchg
mov
ret
pop
sub
dec
xchg
popa
mov
sbb
or
xchg
mov
fld
mov
mov
fs
lds
xchg
dec
add
push
and
loopne
mov
mov
inc
fwait
stos
test
pop
dec
push
push
xchg
in
pop
lahf
call
xor
xchg
mov
fadd
jp
pop
mov
sub
xchg
jb
imul
shl
lea
(bad)
pop
mov
mov
lahf
scas
leave
(bad)
xchg
pop
xlat
hlt
lea
xchg
enter
jmp
out
and
test
dec
xchg
sbb
je
mov
jbe
mul
jb
shl
cwde
retf
test
xchg
sub
(bad)
shr
mov
mov
(bad)
dec
fldcw
lahf
xchg
out
ret
sbb
push
xchg
push
pop
mov
mov
sbb
int3
dec
xabort
in
rcl
xchg
out
mov
and
xchg
xchg
sbb
push
cdq
xchg
lods
jns
and
fld
mov
adc
test
aam
lock
fwait
and
cmc
call
xchg
sub
outs
(bad)
mov
inc
sbb
or
sbb
xchg
or
sub
jmp
xchg
jge
add
fwait
aaa
mov
pop
jp
bound
sbb
lea
scas
cmp
adc
inc
inc
in
(bad)
retf
dec
mov
xchg
or
or
xlat
jne
idiv
cdq
mov
adc
mov
les
push
xchg
dec
xchg
mov
in
repz
add
ss
sub
dec
sbb
stc
out
cmp
cdq
loopne
sar
push
dec
rcl
pop
and
xchg
stos
in
push
inc
out
lea
mov
xchg
jle
es
push
mov
fist
xchg
cmps
imul
dec
and
repnz
jl
mov
or
or
out
hlt
lahf
mov
jge
and
push
ss
xchg
sub
jne
mov
dec
xlat
xor
in
xchg
test
push
ret
jbe
arpl
stos
sahf
jne
(bad)
cmp
jmp
xchg
adc
dec
mov
jo
adc
pop
mov
aam
mov
and
sbb
ins
or
mov
imul
icebp
jmp
add
test
xor
dec
pop
xchg
and
xchg
cmp
cmp
mov
adc
and
sub
push
aam
test
aas
ret
xchg
js
fucomip
das
jmp
or
sub
or
pop
and
add
movs
ror
mov
fnstcw
xchg
cmp
popf
add
xchg
lods
mov
dec
mov
fistp
xchg
xchg
ret
or
imul
mov
push
data16
mov
daa
xchg
repnz
add
add
call
popf
xchg
adc
adc
out
xchg
fsub
je
cmps
pminsw
xchg
jno
in
mov
xor
jb
movs
cmp
aaa
fwait
in
hlt
ja
dec
test
adc
(bad)
or
xchg
sahf
dec
or
aam
pop
sbb
or
inc
stc
mov
push
(bad)
dec
cld
sti
dec
cmps
xchg
(bad)
jmp
pop
cmc
dec
sub
mov
call
adc
test
or
add
jnp
xor
xchg
aaa
je
inc
mov
inc
mov
jge
aam
push
fidiv
jp
xchg
ins
scas
cmp
shr
addr16
or
inc
cmp
out
repnz
enter
fst
(bad)
mov
xchg
fld
fucomip
pop
add
fcomp
xchg
repz
cmp
hlt
xchg
fst
sub
mov
xor
xor
mov
sbb
mov
hlt
xchg
xchg
adc
iret
push
xchg
retf
sbb
sbb
cld
pop
sbb
push
xor
xchg
test
xor
xchg
and
xchg
ins
call
xchg
loope
pop
cmp
mov
les
leave
add
add
inc
imul
call
xor
fiadd
ins
(bad)
dec
inc
nop
ret
xchg
icebp
push
and
mov
sbb
xlat
jns
lea
lock
and
xchg
dec
cdq
xor
cs
test
push
and
mov
sub
add
pop
or
push
pop
lahf
add
pop
movs
repz
mov
aad
movs
mov
sub
je
xchg
loop
push
mov
push
out
xchg
pop
test
jmp
dec
leave
add
popf
mov
push
inc
xor
imul
fisub
loopne
xor
jb
or
aaa
dec
add
pop
rol
dec
sub
xor
mov
clc
inc
mov
xchg
cmp
cld
sbb
and
cmp
mov
mov
loopne
xchg
add
not
sub
xchg
in
scas
jne
and
rcr
dec
or
test
sub
lahf
outs
call
ins
test
xchg
and
push
in
push
mov
test
aad
lods
retf
(bad)
add
inc
xchg
mov
in
aad
(bad)
cmps
or
xchg
data16
pop
mov
adc
sbb
enter
mov
jae
ficom
push
ret
xchg
jae
pop
sub
mov
dec
inc
adc
xchg
mov
xor
xor
and
mov
mov
xchg
shl
mov
xchg
xchg
div
or
jo
mov
and
inc
fwait
shl
(bad)
dec
mov
rcl
jnp
test
mov
add
inc
ins
mov
and
sub
mov
pop
ror
xchg
loopne
xchg
mov
adc
mov
xor
xchg
sub
call
sub
adc
xchg
or
jne
and
ins
in
xlat
push
cdq
push
mov
xor
jge
mov
xor
scas
xchg
call
mov
hlt
xchg
cdq
cdq
cmp
push
jmp
sub
test
std
xlat
jle
xchg
bound
pop
mov
pop
nop
mov
sbb
xor
pushf
jbe
xchg
sti
jle
cs
aad
cdq
enter
in
xchg
out
and
loope
xor
xchg
fisub
in
hlt
jne
xchg
mov
dec
and
and
xchg
sub
out
ret
aam
data16
out
inc
push
adc
add
sub
repnz
call
ficom
dec
mov
shl
adc
xor
stos
xchg
sbb
mov
jmp
add
scas
call
pop
es
cli
cmps
xchg
jle
fnstcw
mov
xchg
or
call
push
shr
mov
or
mov
pop
loop
rcl
int3
pop
std
xchg
stos
(bad)
add
xchg
jnp
jg
mov
mov
mov
or
outs
xlat
cmps
adc
xchg
push
and
pop
into
and
push
dec
xchg
dec
jmp
sub
pop
mov
push
mov
cld
in
xchg
cmps
movs
pand
xchg
rcr
jge
and
(bad)
xchg
push
std
ret
dec
dec
in
mov
mov
xlat
adc
xchg
or
sub
xor
imul
push
shl
mov
sbb
adc
(bad)
ss
aad
ds
mov
aad
adc
stos
jbe
jne
xor
xchg
jns
dec
cs
mov
loope
nop
je
cmp
mov
xchg
push
pop
inc
cmp
xor
mov
mov
sbb
xchg
and
jbe
xchg
adc
je
mov
fcmovbe
and
mov
in
int3
ss
push
out
add
inc
je
xchg
inc
add
add
mov
mov
xchg
jl
addr16
popa
fcmovnbe
xor
fucomip
adc
adc
xor
add
pop
xchg
(bad)
(bad)
dec
imul
xchg
test
or
mov
xchg
jmp
mov
push
lods
iret
sub
(bad)
stc
fwait
out
dec
ins
xchg
jns
int3
fsub
xchg
movhps
sbb
or
xchg
rcl
xchg
adc
jmp
xchg
or
scas
xchg
sub
mov
je
mov
xchg
push
or
jno
test
loope
popa
xchg
inc
and
sub
sub
or
rcl
test
xchg
dec
xchg
and
imul
inc
into
push
adc
in
ins
mov
or
adc
xor
int
xor
jb
add
cwde
fiadd
retf
fwait
mov
pop
mov
in
rcr
dec
push
xchg
fcom
push
fimul
adc
mov
shr
add
fnstcw
mov
xchg
push
adc
out
(bad)
xchg
cmc
push
push
test
or
xchg
jno
pop
stos
push
xchg
icebp
movs
xor
shr
add
fist
cmp
mov
rcr
stos
enter
rcl
push
pop
xchg
push
push
jno
mov
hlt
ins
push
cdq
je
test
mov
xchg
push
xor
and
push
dec
xchg
aas
icebp
cdq
push
hlt
repz
clc
(bad)
pop
adc
movs
lea
xchg
push
cmp
or
lds
push
xchg
push
(bad)
popa
mov
or
mov
adc
xor
retf
clc
jb
lods
xchg
jmp
repz
or
sahf
push
retf
js
cmp
mov
(bad)
mov
inc
cmp
pop
dec
xchg
inc
(bad)
in
jnp
xchg
add
cli
sbb
xchg
ficomp
in
or
stc
xchg
cmp
mov
pop
adc
mov
xlat
xchg
mov
sub
movs
sub
jnp
jmp
dec
xchg
in
xchg
adc
sub
sbb
out
xchg
addr16
mov
mov
xchg
fadd
lahf
adc
test
(bad)
data16
dec
mov
mov
jb
and
xchg
cwde
mov
jle
mov
mov
scas
dec
pop
pop
cmp
sbb
push
jmp
xlat
test
lahf
fs
lock
mov
xchg
dec
xchg
pop
mov
xchg
call
(bad)
push
test
fld
xchg
fs
mov
xor
xchg
xchg
sub
movs
cs
and
add
arpl
inc
es
xor
push
sub
imul
mov
sub
out
pushf
jp
aad
cmc
lds
xchg
out
add
inc
push
scas
mov
xchg
test
mov
xchg
into
test
or
cmc
jle
mov
aam
xchg
lahf
dec
xchg
daa
aam
cs
mov
mov
pop
inc
xchg
jp
add
movs
add
stc
pop
mov
mov
xor
aad
jp
xchg
inc
xchg
pop
dec
xor
scas
neg
icebp
adc
iret
(bad)
clc
dec
xchg
mov
cmp
push
scas
pop
xchg
into
ror
xchg
pop
sar
xchg
add
sbb
or
jo
inc
add
cmps
mov
xchg
fwait
es
add
stos
mov
into
dec
out
call
popa
out
rol
add
mov
je
cmp
int
sbb
jmp
xchg
call
cmp
xor
test
sahf
xchg
data16
jmp
xchg
mov
ss
cmp
scas
ret
mov
xchg
int3
xchg
loopne
loop
adc
jge
xchg
test
mov
aad
leave
fs
mov
push
add
mov
pop
fmul
inc
mov
repz
in
in
out
fidivr
mov
xchg
mov
mov
cmp
nop
adc
push
outs
add
gs
ds
push
xchg
hlt
(bad)
mov
xchg
nop
mov
mov
push
xchg
inc
xor
xchg
dec
cmp
mov
mov
inc
into
pop
scas
adc
rcr
add
adc
test
jg
xchg
ret
sub
mov
xchg
js
add
ja
xchg
xchg
fmul
scas
stos
mov
out
ret
xchg
pop
mov
push
ds
cld
retf
fsubp
adc
mov
xlat
mov
mov
or
fimul
scas
mov
adc
adc
popf
inc
mov
gs
pop
xchg
inc
mov
jne
add
push
mov
aas
xchg
ret
pop
add
in
adc
xchg
dec
mov
lahf
aaa
xchg
xor
push
fisttp
cmp
push
dec
idiv
inc
and
sti
jns
mov
mov
call
push
shl
xchg
mov
out
arpl
xchg
push
push
xchg
lods
sub
push
stc
aaa
xchg
rol
les
xchg
mov
pop
in
xchg
xchg
out
out
ficomp
add
mov
and
ss
push
or
fist
inc
pop
add
fnstenv
xchg
loope
in
popf
mov
xchg
xlat
jmp
sbb
xchg
inc
sahf
(bad)
dec
pop
das
std
ret
sub
repnz
add
daa
leavew
in
xchg
addr16
jne
jo
mov
push
xchg
repz
lods
call
mov
xchg
adc
xchg
pushw
rcl
sub
lock
pop
mov
pop
sbb
mov
repnz
and
mov
mov
jno
add
fcom
or
outs
mov
fild
dec
add
pushf
push
fcmovu
push
sbb
xchg
push
mov
in
xchg
jo
int
xchg
dec
add
fwait
shr
ins
push
jge
sbb
in
fs
inc
fwait
mov
inc
shl
mov
ss
ins
jno
add
xchg
das
aam
test
xchg
scas
xor
sti
outs
push
nop
xchg
xor
pop
retf
test
mul
add
cmp
xchg
dec
jns
push
mov
cld
ja
aam
cmp
xchg
int
lock
repnz
or
mov
pop
lods
or
mov
mov
mov
scas
icebp
add
es
gs
adc
xchg
mov
test
cmp
and
cmp
aas
les
test
mov
fisubr
pop
or
mov
cmp
jl
ins
lahf
push
or
std
jg
mov
mov
and
mov
dec
in
mov
xchg
push
adc
adc
outs
mov
les
xchg
iret
pushf
jle
add
enter
mov
mov
xor
popa
xor
ret
mov
sbb
sub
or
(bad)
mov
(bad)
push
ret
jle
dec
dec
adc
jo
xchg
repz
jb
push
cmp
sub
mov
stos
(bad)
fist
adc
mov
daa
mov
mov
into
cld
xchg
jecxz
mov
xor
sbb
push
out
call
mov
nop
(bad)
inc
xchg
and
mov
xchg
dec
push
inc
arpl
shr
inc
mov
jmp
jmp
shr
pop
adc
xor
xchg
call
out
or
cwde
cmps
and
data16
xchg
xor
inc
dec
popa
in
mov
int3
push
cwde
mov
hlt
dec
fnsave
add
xchg
in
(bad)
pause
xchg
rcr
dec
push
sbb
xchg
ss
out
mov
fucomip
fdivr
adc
cmp
pop
xchg
cmp
aaa
lods
xchg
push
jb
cmc
xchg
push
(bad)
pop
or
jecxz
dec
mov
xchg
mov
loop
(bad)
fiadd
or
xor
push
sbb
fs
cmp
fwait
xchg
cmp
test
inc
add
(bad)
jno
aam
cmp
xchg
out
stos
fistp
pop
test
push
in
daa
add
mov
inc
mov
or
jle
dec
imul
shl
fwait
pop
ins
(bad)
xchg
mov
mov
cmp
je
add
mov
arpl
ror
or
fwait
push
test
or
xor
dec
repz
xchg
arpl
jp
mov
ret
(bad)
xchg
in
dec
adc
scas
xchg
inc
dec
clc
test
xchg
jp
cmps
(bad)
cs
xchg
test
into
push
loope
inc
mov
adc
cmc
out
iret
(bad)
xchg
leave
xchg
xor
test
scas
xchg
dec
fmul
in
popa
xchg
pop
lods
xchg
sub
push
imul
ret
daa
rcl
rcr
iret
pop
mov
mov
lods
xchg
sub
popa
mov
or
sbb
xchg
xchg
inc
push
imul
mov
add
push
test
xchg
loope
cmp
fcom
retf
call
pop
lock
xchg
repz
xor
ficom
push
movs
adc
pop
scas
cmp
std
push
dec
(bad)
shl
and
inc
mov
ss
std
enter
inc
neg
add
mov
dec
pushf
pop
out
or
mov
popf
pop
xchg
popf
push
adc
cmp
sar
mov
mov
adc
and
das
int3
fcomip
cwde
xor
movs
call
pop
push
fmul
xchg
(bad)
xchg
sub
or
adc
aam
pushf
cs
ret
rcl
cmp
jnp
lds
call
jno
jl
xchg
sti
sahf
jmp
xchg
sub
mov
push
or
lahf
mov
mov
jg
mov
les
mov
push
bound
jp
scas
xchg
cwde
daa
jecxz
xor
popf
dec
xchg
mov
or
test
les
out
and
xchg
fimul
cdq
xchg
xchg
pusha
xchg
adc
gs
dec
xor
shr
sbb
dec
aam
sahf
cmps
or
add
je
repnz
cmp
lahf
gs
xchg
popa
mov
jecxz
or
in
stos
out
pop
xchg
enter
mov
ret
sub
inc
adc
rol
push
gs
test
stos
mov
lock
ds
aam
mov
mov
(bad)
imul
mov
test
fwait
push
out
adc
in
dec
adc
mov
imul
mov
mov
jno
ficomp
test
jmp
xchg
xchg
test
test
or
jne
inc
xchg
jg
xchg
mov
jno
test
xchg
add
cmp
xor
adc
cwde
xchg
pop
ret
and
or
xchg
shl
pop
icebp
aam
jl
xchg
xchg
mov
sbb
arpl
cmps
pop
mov
push
jecxz
fisub
inc
inc
push
repz
xchg
and
mov
shl
fwait
test
xchg
mov
in
mov
lock
ins
in
shl
xchg
push
lock
mov
cli
push
popa
lods
sub
push
es
icebp
or
dec
add
out
mov
xchg
les
xchg
fisttp
mov
mov
and
inc
xchg
retf
ins
mov
push
adc
or
push
xcrypt-cfb
cmps
mov
mov
dec
add
stos
cmc
jnp
stos
mov
and
les
stos
enter
(bad)
lods
inc
ror
xchg
repz
pop
dec
adc
ret
(bad)
movs
cmp
outs
dec
loop
outs
push
pop
xor
cmp
xor
xchg
(bad)
pop
scas
jmp
dec
imul
add
push
hlt
aad
fwait
dec
test
jg
imul
xchg
fwait
cmps
lods
or
jmp
rcr
cmp
xchg
outs
xchg
lock
push
mov
or
aam
movs
or
fcom
adc
mov
clc
outs
adc
leave
mov
pop
mov
jae
push
mov
mov
lock
inc
xor
adc
pusha
(bad)
rcl
mov
mov
lahf
jo
jb
and
cmps
or
mov
and
outs
mov
adc
mov
cmp
mov
imul
jns
xchg
mov
pop
or
xchg
gs
iret
add
iret
(bad)
(bad)
sti
inc
push
xchg
out
aad
enter
xchg
out
ret
pushf
mov
mov
mov
push
dec
aaa
call
mov
push
lds
push
mov
adc
xchg
pushf
dec
adc
push
jmp
pusha
idiv
push
push
jge
repz
xchg
push
int
mov
pop
(bad)
jns
test
fadd
mov
sub
loopne
mov
xchg
out
jo
push
push
rcl
push
or
test
add
test
cmp
mov
add
pop
xlat
jg
jne
pop
pop
adc
fsub
loope
test
mul
xchg
cwde
sahf
cmp
jmp
and
dec
sbb
cs
or
xchg
xchg
in
sub
pushf
(bad)
scas
mov
call
xchg
jns
mov
mov
push
das
jb
xor
aad
jp
xchg
mov
push
inc
xchg
mov
dec
mov
pop
mov
pop
xchg
and
add
sar
les
mov
adc
rol
jl
movs
das
add
push
cdq
inc
mov
mov
retf
jns
ds
jae
mov
push
dec
pop
xchg
push
movs
xchg
or
xchg
xchg
mov
(bad)
out
mov
sub
dec
dec
das
frstor
ret
loope
in
and
lods
lods
mov
push
rcl
pop
imul
(bad)
icebp
dec
dec
push
xchg
xlat
dec
sbb
std
adc
call
push
jne
push
mov
xchg
xchg
inc
sbb
(bad)
mov
lahf
push
jle
sahf
jmp
or
dec
outs
xchg
pop
xchg
js
xor
adc
bound
hlt
ds
push
add
into
sbb
faddp
lods
mov
adc
pop
(bad)
and
xchg
fadd
das
push
and
je
cmps
fwait
daa
mov
add
push
inc
loope
aaa
mov
xchg
push
jno
cmp
fwait
and
call
jmp
inc
or
in
cmc
mov
mov
test
xchg
sub
adc
ret
xor
arpl
push
xor
repnz
pop
mov
mov
pushf
lods
adc
pop
sbb
jmp
xchg
ror
xor
xchg
icebp
push
imul
lods
in
push
(bad)
dec
sti
push
add
lea
inc
jmp
xchg
gs
cmps
xchg
mov
icebp
daa
dec
adc
xchg
mov
mov
movs
xchg
cs
sub
jae
xchg
test
jno
pop
sbb
or
clc
stos
stos
(bad)
xchg
jmp
mov
ffreep
ret
xlat
test
adc
cmp
jne
jecxz
sbb
add
sub
pop
or
xchg
shl
or
jmp
mov
rcl
sub
xchg
imul
pop
sbb
dec
jno
hlt
add
mov
mov
popa
fwait
mov
add
sub
xchg
push
scas
mov
or
jmp
xchg
dec
inc
jo
(bad)
mov
inc
popf
inc
add
xchg
mov
aas
iret
das
aaa
test
xchg
lea
retf
mov
out
fwait
and
cs
push
dec
iret
add
aam
dec
xchg
pop
and
mov
pop
aaa
iret
(bad)
shl
out
mov
xor
cdq
pop
packuswb
jne
dec
xchg
jbe
inc
lahf
mov
mov
mov
jecxz
movs
test
outs
push
or
test
xchg
out
mov
jg
mov
or
fwait
dec
inc
outs
ja
add
jno
ror
mov
inc
mov
push
mov
test
lods
push
aaa
push
mov
or
xchg
xor
add
push
sbb
jl
xchg
fisub
sar
cld
mov
dec
test
aam
jl
xchg
lds
leave
push
xor
sub
retf
jo
shl
add
xchg
xor
rcr
mov
dec
out
mov
(bad)
loopne
jae
xchg
(bad)
les
fst
cmc
or
xchg
xchg
mov
fst
aas
push
dec
imul
hlt
add
xchg
sub
sub
xchg
inc
adc
xlat
dec
dec
cmp
xchg
sub
ds
scas
cld
xchg
pop
jae
jb
and
sar
mov
call
xchg
sub
push
fsubr
(bad)
mov
pop
fisttp
lea
sbb
xchg
outs
mov
inc
pusha
push
xchg
retf
inc
ja
mul
xchg
jne
inc
fistp
jmp
xchg
pop
je
sub
int
xchg
fidiv
addr16
xchg
ins
sub
adc
sub
xor
jnp
movs
pop
ins
mov
add
mov
(bad)
adc
ret
cs
int
cmp
iret
bound
addr16
inc
cwde
fst
sub
test
push
pop
lds
pop
fnclex
je
xchg
scas
cmp
or
ficomp
stos
mov
push
xor
inc
rcl
mov
aaa
popf
push
mov
xchg
mov
lds
outs
mov
sbb
pop
pop
adc
jne
lods
pushf
adc
je
ret
xor
dec
mov
adc
jb
or
adc
adc
loope
xor
sbb
push
xchg
inc
jge
enter
inc
mov
cmp
mov
xchg
add
jl
mov
push
pop
test
xor
pop
cmps
xchg
out
push
push
xor
mov
jle
inc
jp
xchg
stos
cmp
and
or
xchg
(bad)
sbb
fisttp
xchg
cld
jp
rcl
push
retf
push
or
xchg
and
push
and
mov
sbb
xchg
outs
and
push
push
xchg
in
test
int3
jo
idiv
mov
jle
pop
int3
cmp
sar
sbb
imul
daa
mov
clc
add
(bad)
mov
in
(bad)
inc
adc
dec
cmps
fcom
movs
mov
shr
mov
int3
pushf
mov
sti
dec
cwde
imul
leave
inc
add
xchg
stos
inc
mov
push
fsub
in
mov
mov
rcr
push
xchg
pop
jno
add
xchg
dec
out
jns
dec
bnd
mov
lds
jge
xchg
fucomp
jle
cmp
dec
xchg
scas
mov
jnp
cmp
sbb
push
cmp
and
push
ficom
mov
xchg
sbb
inc
dec
sub
and
push
and
add
adc
mov
add
push
xchg
mov
retf
sbb
aad
lahf
xchg
xor
or
dec
mov
fsubp
inc
dec
xchg
jno
push
jl
inc
sub
out
mov
fwait
js
das
inc
test
sbb
rcl
adc
mov
and
outs
nop
mov
pop
ja
pop
mov
fild
nop
retf
push
rcl
mov
jne
sbb
cmc
in
mov
xchg
mov
(bad)
test
outs
xchg
xchg
add
dec
cmp
inc
xchg
mov
ss
jbe
mov
and
loope
mov
sbb
mov
mov
sti
adc
jne
adc
aas
lea
jmp
clc
xchg
jg
inc
xor
loopne
into
add
xchg
pop
xchg
ss
sbb
xchg
test
jle
or
or
ficom
stos
pop
xchg
ins
mov
push
ss
inc
cmp
mov
pop
or
jl
movs
sub
xchg
loop
cmp
mov
fwait
or
call
xchg
hlt
daa
(bad)
retf
(bad)
xchg
push
jae
or
fwait
mov
jmp
mov
jge
lods
lock
test
mov
es
hlt
mov
push
xchg
test
push
inc
mov
scas
xchg
jmp
(bad)
shr
loopne
jl
mov
jns
daa
xchg
vmulsd
jp
imul
inc
fmul
shl
mov
dec
xor
xchg
sbb
push
or
iret
fstp
leave
and
test
rcl
int3
xor
lds
cmps
mov
push
fldcw
mov
dec
loop
in
sub
mov
pop
adc
jnp
mov
and
sbb
ror
adc
les
add
push
call
mov
aaa
pop
add
adc
adc
sub
xchg
fldenv
push
pop
jo
xchg
movs
clc
or
xchg
retf
xor
inc
and
xchg
cwde
cmp
outs
nop
inc
imul
xchg
mov
add
xchg
mov
(bad)
outs
mov
ss
xchg
icebp
movs
out
arpl
fcomi
ins
xor
adc
push
xchg
cmp
sti
dec
rcl
bound
mov
hlt
inc
xor
arpl
mov
mov
nop
cmps
lods
and
out
sub
xchg
mov
jns
aaa
pop
mov
xor
jb
xchg
test
ds
or
retf
pop
mov
imul
xchg
test
add
sbb
je
cli
rol
mov
and
xchg
xchg
fnsave
or
dec
cmp
test
into
ret
aaa
and
add
push
inc
hlt
jmp
je
push
pop
in
shl
popa
adc
cmp
mov
or
xchg
sub
sub
pop
adc
xchg
and
lods
rcl
jns
mov
xchg
mov
or
inc
call
int
adc
or
inc
xor
push
clc
sbb
je
inc
lock
movs
push
imul
mov
push
xchg
imul
aaa
sub
adc
xchg
sahf
loop
hlt
add
pop
fwait
aam
mov
and
lods
(bad)
mov
jne
sub
stos
dec
call
xchg
adc
xor
mov
add
bound
jmp
mov
and
jbe
mov
in
or
out
xchg
iret
les
imul
cmc
inc
mov
xchg
fwait
mov
dec
add
mov
pop
mov
sbb
add
mov
shl
jb
scas
dec
pop
bound
icebp
push
addr16
fcom
loopne
ror
into
jne
les
add
adc
push
adc
clc
call
xchg
lods
cmps
adc
and
xchg
gs
jo
std
push
outs
popa
punpckhbw
sbb
xchg
icebp
shr
xchg
mov
or
cmp
dec
xchg
stc
icebp
outs
mov
rcr
xchg
fcom
addr16
cs
repz
icebp
enter
mov
out
ss
xchg
std
je
call
xor
lds
jbe
pop
xchg
pop
outs
adc
sahf
cwde
bound
shr
push
xchg
lods
pop
sub
scas
adc
xor
test
test
xchg
pusha
movs
jae
loope
ins
xchg
cmp
mov
mov
in
out
and
popa
pop
cmps
xchg
and
shr
xchg
rep
push
dec
lahf
sbb
mov
adc
fimul
ins
xchg
in
cmps
aas
cmps
sub
adc
pop
dec
push
xchg
leave
test
ret
retf
mov
imul
adc
stos
sbb
hlt
daa
outs
test
xchg
push
lock
ja
cmp
pop
adc
ror
mov
pop
jmp
sub
xchg
pushf
call
xchg
mov
test
xchg
or
jmp
enter
xchg
jp
mov
fdivr
rcr
mov
lods
sete
pop
iret
call
adc
sbb
xlat
sub
pop
jp
xor
push
xchg
int3
adc
cmp
mov
xchg
mov
add
aas
sti
cdq
mov
push
pop
pop
mov
nop
cmp
jl
aam
xchg
js
push
or
mov
jp
in
cmp
jo
add
jl
cmc
xor
sub
sub
cdq
fcomp
aam
xchg
push
ja
rol
push
lock
xchg
test
mov
pop
mov
push
cmp
xchg
cmp
ja
mov
dec
sub
lea
xchg
fsub
add
rol
adc
je
stos
dec
daa
cmp
sbb
mov
jne
jg
and
arpl
fwait
mov
aam
jmp
xchg
gs
aaa
cmps
es
nop
xchg
(bad)
jmp
movs
ja
xchg
xchg
pop
shl
nop
xor
xchg
pop
jmp
push
xchg
test
xchg
and
stc
adc
lods
dec
jp
out
fcomip
or
test
pop
push
movs
hlt
push
jno
cmc
push
and
stos
rcl
xchg
test
rol
pop
dec
sbb
add
out
dec
xchg
cmp
xchg
mov
popf
add
jmp
jmp
xchg
mov
mov
test
into
(bad)
cmps
adc
xor
dec
fisttp
fwait
(bad)
(bad)
scas
sub
call
cmp
pusha
stos
and
mov
aaa
mov
iret
lods
and
xchg
xchg
cmps
(bad)
dec
and
mov
out
or
pop
(bad)
mov
je
dec
ror
cs
sub
loop
sub
xchg
inc
aas
adc
adc
mov
das
pop
(bad)
imul
in
cmp
pop
cmp
xor
iret
cmp
and
sbb
cmps
hlt
push
pop
test
int
daa
stc
pop
xchg
sar
ss
dec
jmp
cmp
out
adc
movs
push
pop
in
xchg
clc
xchg
mov
xchg
jne
fisubr
rcl
ss
xchg
sbb
add
les
(bad)
mov
hlt
xchg
retf
lahf
pop
clc
mov
mov
gs
push
sub
xchg
jns
(bad)
out
retf
jp
mov
push
aas
xchg
iret
cdq
pop
cld
and
in
cmp
xchg
and
shr
xchg
and
std
mov
les
clc
fs
in
xchg
into
jecxz
pop
test
test
jae
adc
mov
xchg
dec
or
fdiv
mov
jno
adc
fwait
sbb
pop
xlat
nop
xchg
and
sub
in
push
rcl
mov
mov
and
adc
rcr
mov
add
dec
inc
pop
call
adc
push
mov
arpl
sub
dec
jp
xchg
jno
jnp
pshufw
pop
sbb
call
stos
aas
mov
jl
xchg
cmps
cmp
in
test
xchg
xrelease
retf
lods
mov
cmc
ss
adc
outs
ret
pusha
mov
shl
out
xor
arpl
fcom
pop
jecxz
xchg
xor
mov
(bad)
je
add
sub
pop
les
push
push
test
repz
sub
jo
arpl
or
adc
nop
push
iret
jecxz
mov
xchg
adc
arpl
dec
pop
mov
fcomi
xchg
push
inc
mov
nop
jae
mov
push
push
push
mov
aam
push
sbb
sbb
jmp
xchg
sar
das
int
pop
outs
sub
xchg
mov
inc
daa
xchg
adc
jmp
mov
loopne
aam
pop
(bad)
fcomp
and
imul
(bad)
ss
gs
pop
arpl
mov
rol
cmp
inc
push
test
push
cmps
jp
int3
ret
xchg
mov
adc
rcl
adc
dec
pop
push
ins
xchg
rcl
lock
fwait
dec
cmp
aaa
mov
adc
les
rcl
mov
lock
icebp
int3
adc
fiadd
xchg
dec
jecxz
(bad)
cmp
and
lock
and
test
mov
xchg
test
sbb
mov
movs
pop
xchg
dec
cmp
add
out
test
adc
pop
xchg
popf
call
gs
dec
jne
xor
aaa
xchg
test
add
getsec
rcl
nop
mov
mov
xchg
or
and
push
inc
sub
inc
inc
inc
mov
ins
(bad)
mov
sub
int3
retf
and
xchg
fs
pop
adc
xchg
popf
test
enter
pop
xor
add
pop
adc
xor
add
popfw
out
or
mov
xchg
daa
mov
jnp
xchg
or
xchg
test
ins
cmps
cmp
inc
fwait
out
or
xchg
movs
dec
push
sub
fwait
jmp
ficomp
fnsave
jns
mov
repz
push
das
cmps
cmp
jg
pop
sub
xchg
xchg
add
loop
test
(bad)
hlt
or
xor
xor
stc
push
out
iret
xchg
add
pop
jl
jne
xchg
xchg
push
pop
cmp
mov
xchg
enter
(bad)
jmp
das
dec
mov
add
pop
xchg
or
(bad)
mov
out
and
repnz
ror
or
test
push
aad
xchg
push
stos
xchg
or
jno
xor
arpl
xor
jnp
mov
sar
xchg
xchg
int
push
outs
pop
ja
mov
lahf
xor
je
jae
int3
clc
stc
adc
dec
ret
jne
xchg
cmp
retf
add
pusha
or
mov
and
lods
scas
xchg
jns
xor
out
xor
adc
das
xor
fiadd
adc
into
gs
adc
jno
lods
xor
xchg
add
add
xchg
jge
je
sub
mov
jmp
cld
inc
cmp
xchg
push
gs
cmp
stos
movs
adc
out
lods
sub
std
mov
scas
fst
push
repz
dec
xchg
mov
or
pop
sar
sbb
mov
pop
xchg
stc
adc
xchg
sub
push
ror
or
adc
xchg
jmp
lods
pop
xor
test
mov
cdq
sbb
mov
repz
adc
add
dec
cmp
sbb
add
neg
repnz
stc
xchg
mov
loopne
mov
addr16
push
clc
hlt
mov
mul
mov
pop
pushf
sbb
pop
push
xchg
xlat
jnp
jp
adc
add
push
cs
xchg
mov
shr
mov
scas
pop
mov
iret
xchg
or
stos
push
push
repnz
ds
lea
mov
(bad)
xchg
dec
nop
jecxz
pop
mov
not
sbb
sti
mov
outs
pop
push
cmp
adc
mov
sub
adc
dec
xchg
jl
dec
jg
pop
xchg
in
ret
sub
jns
xchg
lods
jmp
push
cdq
sub
dec
push
jl
popf
pop
push
xchg
mov
and
mov
(bad)
std
dec
es
mov
mov
xchg
enter
sahf
in
xchg
out
fsub
xchg
xlat
outs
jl
lds
jae
sbb
inc
xchg
jmp
and
cmps
loop
popa
es
cmps
push
sub
xchg
add
mov
cmp
call
xor
sub
fcom
stos
add
sbb
movs
call
xchg
mov
jnp
int3
mov
xchg
jp
cmps
mov
mov
daa
ret
push
hlt
retf
and
push
dec
lahf
adc
mov
clc
adc
inc
out
out
dec
cmp
cmp
hlt
test
sbb
mov
imul
dec
push
and
and
adc
ins
in
inc
hlt
mov
lea
lahf
aaa
or
mov
mov
cmp
cli
popa
mov
mov
xchg
mov
mov
shr
int
fist
mov
adc
mov
aad
int
mov
mov
mov
int3
xchg
push
rcr
aad
xor
xchg
popf
mov
ret
jmp
or
in
leave
imul
jae
in
mov
mov
mov
jb
aam
jbe
pop
dec
lea
jo
lods
adc
xchg
jge
nop
(bad)
jecxz
sub
mov
or
mov
imul
fist
pop
pusha
pop
xchg
cwde
xchg
push
xor
sub
jae
push
sbb
mov
lock
sub
xchg
nop
test
push
sbb
jne
fldcw
call
xchg
xor
stos
lea
adc
mov
int
xchg
mov
cmp
add
xlat
sub
jne
add
pop
loopne
mov
dec
xchg
inc
out
div
pop
jb
push
adc
pop
adc
nop
mov
fstp
jno
je
xchg
xlat
xchg
cmp
enter
mov
repz
xchg
aad
stc
mov
mov
js
add
cld
xchg
or
xchg
sbb
add
int
rcl
mov
aad
mov
sbb
mov
push
and
push
(bad)
fisubr
lds
es
mov
daa
cli
xchg
loopne
cmp
je
xchg
out
scas
clc
call
add
mov
(bad)
int
pop
(bad)
cmp
xchg
jle
hlt
or
push
or
xchg
pop
cmp
cs
pop
mov
sbb
add
mov
inc
mov
fadd
lahf
jecxz
and
into
repnz
int
add
adc
hlt
push
xchg
cdq
leave
sbb
xchg
and
lock
fisttp
mov
jb
xchg
xor
fsubr
outs
or
jo
or
out
xor
dec
popa
in
daa
mov
add
cmc
inc
leave
mov
xor
mov
xchg
sahf
add
ins
fdivr
cmc
xchg
push
jmp
shl
and
xchg
sub
sbb
xchg
lea
mov
xchg
sub
jle
inc
xchg
add
fld
arpl
sbb
add
out
push
xchg
mov
aas
dec
movs
mov
hlt
iret
shl
pop
mul
xchg
lahf
out
push
xor
cmp
inc
cli
add
xchg
mov
or
rcl
xchg
inc
cmp
and
mov
mov
fisttp
xchg
adc
leave
ss
jmp
xchg
loope
je
jo
sub
mov
test
repz
jb
mov
std
ror
jnp
mov
inc
pushw
inc
js
test
or
sub
add
xchg
dec
popa
jnp
xchg
mov
(bad)
sbb
pop
scas
cmps
mov
adc
xchg
mov
jge
dec
xor
sbb
xlat
cmp
and
or
ss
xchg
cs
mov
fwait
mov
cmc
xor
js
les
lods
and
xchg
cld
outs
sbb
adc
cmp
sbb
aam
rcr
sbb
dec
jge
xchg
sbb
(bad)
int3
fist
aam
adc
xchg
popa
pop
mov
xchg
or
shl
sbb
fabs
ror
mov
mov
jo
ret
mov
fwait
jne
jnp
lods
les
in
dec
push
inc
int
mov
xchg
push
cmp
rcr
in
je
jecxz
or
xchg
dec
mov
pop
jne
popf
or
imul
jle
in
mov
nop
imul
addr16
shr
dec
xchg
test
inc
add
push
jae
pop
or
inc
xchg
imul
push
mov
and
test
push
pop
xchg
test
mov
lahf
xchg
in
jmp
mov
shl
nop
in
xchg
ins
xchg
jle
xor
scas
dec
push
push
adc
pop
dec
cmp
mov
(bad)
call
push
inc
inc
xlat
pushf
push
push
or
push
fwait
mov
aam
jmp
sub
adc
xchg
(bad)
pop
rol
xchg
jmp
in
adc
sbb
add
stc
xchg
xor
xchg
seto
dec
pop
inc
dec
xchg
lahf
les
repz
adc
xchg
push
sbb
push
add
loop
jns
jo
push
lock
xchg
test
mov
xchg
test
pusha
outs
mov
mov
loope
xchg
xlat
xchg
movs
cmps
cmp
push
push
lods
stc
fwait
xor
mov
jmp
jbe
xchg
scas
mov
cmps
jb
or
call
pusha
fwait
cwde
(bad)
jg
enter
sbb
cmps
jle
cs
pminsw
stos
sbb
lods
push
xchg
out
mov
xchg
movs
mov
mov
inc
pop
push
mov
(bad)
aam
lods
in
pop
xchg
pop
movs
push
push
fwait
adc
ror
dec
mov
cmps
cwde
xor
add
xor
dec
xchg
movs
dec
shr
ret
xchg
mov
mov
fst
retf
adc
gs
fbstp
sub
nop
daa
aad
movs
sbb
dec
(bad)
mov
cli
cmp
mov
call
mov
push
mov
ins
fwait
jl
sbb
adc
fcom
stos
adc
retf
cdq
loop
push
cmp
outs
ins
and
jnp
cmp
jmp
push
shl
push
ins
ret
mov
std
aad
mov
push
fnstsw
dec
or
mov
add
inc
xchg
fimul
adc
and
jp
push
or
xchg
dec
jl
bound
(bad)
xchg
jb
nop
mov
sar
ror
xchg
jno
shr
into
pop
xchg
xchg
clc
jmp
icebp
popf
jg
mov
test
pop
retf
xchg
or
lods
fs
lock
adc
cld
mov
xchg
mov
sub
and
rol
xchg
cli
and
sbb
leave
push
lea
imul
sbb
xchg
jbe
xchg
add
xor
xchg
fcomp
lods
pop
dec
xlat
int3
sahf
adc
movs
stc
xchg
xchg
xor
ret
pushf
es
xchg
call
lock
cmp
adc
(bad)
imul
nop
(bad)
xchg
retf
mov
mov
call
icebp
or
daa
inc
mov
adc
ret
cmps
in
sub
shl
les
jae
aaa
add
xchg
mov
dec
cmp
icebp
test
stos
adc
or
xchg
jo
pop
retf
push
(bad)
xchg
out
push
repz
pop
push
cdq
or
ins
loop
push
lss
push
add
xchg
pop
jnp
sub
push
fnstsw
xchg
inc
jp
inc
sbb
jg
pop
mov
stos
enter
add
pop
fwait
push
rol
xor
arpl
push
enter
sub
cmps
int3
cdq
cmps
xchg
push
xchg
dec
xchg
stc
loope
outs
(bad)
daa
sti
lods
xchg
out
adc
loopne
inc
push
mov
xchg
mov
mov
xchg
push
xchg
jmp
rcr
data16
sbb
clc
xor
jp
je
dec
push
(bad)
xchg
mov
scas
pop
cmpxchg
push
push
ror
fwait
add
movs
jne
ins
out
call
xchg
push
push
jp
pop
cld
je
test
mov
movs
or
jmp
lds
out
mov
jp
sub
dec
xchg
test
sub
xchg
in
dec
popa
or
xchg
cmc
dec
pop
out
int
sbb
imul
sbb
dec
mov
test
outs
sbb
pusha
in
mov
xchg
jno
daa
push
mov
push
sbb
cdq
dec
fcmovu
hlt
pop
xchg
mov
stos
jl
jbe
mov
push
mov
fwait
mov
or
mov
int3
xchg
dec
dec
repnz
into
(bad)
inc
xchg
lock
or
(bad)
ins
or
push
out
xchg
ret
xchg
test
cs
rcr
cmp
push
xchg
out
fld
pop
stos
xchg
pop
dec
xlat
xchg
enter
and
lahf
dec
rcl
fst
pop
jb
icebp
outs
mov
js
push
hlt
out
mov
scas
push
pop
in
xchg
hlt
add
jmp
in
dec
jno
fwait
sbb
shr
jle
je
mov
mov
out
lahf
xchg
movs
aam
mov
jno
jle
ret
popa
adc
lahf
call
mov
xchg
int3
stc
inc
in
xchg
xchg
xchg
mov
dec
push
retf
mov
mov
pushf
add
js
xchg
loopne
aaa
or
ret
add
cli
sub
lods
pop
mov
enter
aaa
sub
or
sub
out
push
lock
inc
add
mov
push
les
pop
cwde
adc
scas
hlt
mov
mov
push
enter
push
mov
sub
xchg
repz
lods
push
xor
sbb
int3
loope
lds
sbb
jl
ret
xchg
mov
js
mov
adc
arpl
or
scas
mov
xchg
loop
mov
in
mov
(bad)
xchg
jmp
and
clc
icebp
xchg
sub
mov
cs
jge
mov
int
pop
inc
xchg
xchg
fnsave
shl
les
outs
test
adc
out
dec
and
dec
(bad)
lods
ror
xchg
hlt
clc
test
loopne
mov
jne
sti
add
pop
bound
xchg
fnsave
inc
cmp
or
xchg
push
add
add
out
xchg
addr16
clc
push
loop
(bad)
adc
sti
retf
in
and
lea
aam
ja
call
adc
cli
or
nop
fadd
add
clc
pop
mov
xor
movs
enter
inc
ret
adc
xchg
cmc
loopne
or
jbe
jle
mov
fldlg2
adc
jp
mov
mov
fs
xchg
in
scas
imul
cli
xchg
(bad)
popf
pop
inc
ja
dec
xchg
jmp
mov
xchg
daa
fs
dec
mov
pusha
scas
cmc
push
mov
jns
adc
push
sub
jno
repnz
xor
mov
pop
mov
push
shl
adc
mov
xor
movs
xchg
and
xor
in
out
inc
es
xor
mov
outs
in
in
retf
cmp
mov
pop
push
dec
jmp
push
retf
test
popa
rcr
mov
movs
jge
mov
push
mov
pop
xchg
mov
xor
jg
test
xchg
imul
hlt
sbb
xchg
sbb
push
mov
into
(bad)
rcl
push
icebp
fs
jne
jle
mov
push
xor
sar
adc
mov
pop
or
fwait
into
mov
in
je
mov
aaa
dec
xchg
not
pop
jp
cmp
xchg
or
(bad)
aaa
sbb
or
xchg
cmps
loopne
jge
mov
mul
push
call
enter
dec
jmp
mov
js
push
test
xchg
xchg
fmul
icebp
retf
xchg
fs
jns
xor
aaa
es
mov
daa
cmp
adc
adc
or
ja
fs
xchg
mov
test
pusha
xchg
pushf
inc
cmc
mov
ret
fcmovnbe
mov
sub
dec
call
sub
sbb
or
xchg
clc
repnz
mov
mov
sti
in
fs
adc
push
mov
xchg
xchg
aas
arpl
fist
inc
add
jnp
inc
xor
xchg
sbb
es
jle
inc
cwde
lahf
or
aas
adc
sbb
push
jmp
in
inc
xchg
repnz
sub
pop
xchg
xchg
fwait
jbe
lods
or
fwait
leave
jle
inc
(bad)
xor
cli
or
mov
adc
sub
outs
mov
jnp
(bad)
xlat
xor
pop
ins
xchg
ds
and
jmp
(bad)
cmps
add
cmc
mov
scas
mov
push
xchg
daa
xchg
inc
xchg
mov
repz
sbb
adc
cmovae
sbb
sub
rcl
aad
mov
fsub
jmp
xchg
pop
mov
xchg
pop
inc
rcr
inc
and
xchg
dec
scas
and
and
inc
inc
or
jg
mov
adc
mov
xor
lea
div
inc
and
pop
test
lock
pop
outs
pop
jne
es
sub
xor
adc
lods
dec
jae
stc
and
mov
adc
ins
outs
das
ss
out
mov
jne
dec
mov
xchg
mov
pop
inc
push
mov
test
jbe
xchg
cmp
sub
xchg
pop
aad
js
and
jns
jno
xchg
and
inc
jl
jp
inc
inc
movs
enter
add
aas
iret
xchg
loope
mov
ins
ja
xor
xchg
stos
xchg
fidiv
xchg
daa
xor
push
nop
sbb
dec
xbegin
ins
and
fild
jne
mov
mov
or
repnz
adc
pop
stc
mov
pusha
xchg
dec
mov
adc
mov
std
shl
iret
push
and
sub
jno
mov
cmp
adc
div
dec
xor
fwait
aad
in
or
xchg
cld
movs
mov
ins
adc
pop
xchg
xchg
ja
cmp
sub
xchg
mov
addr16
push
push
or
pop
mov
mov
xchg
cmp
inc
sar
es
cli
stos
add
leave
mov
stc
add
sub
inc
arpl
icebp
or
mov
xchg
les
pop
out
dec
xchg
push
popa
jg
dec
stos
jmp
repz
test
std
xchg
pusha
xor
mov
push
dec
rcr
pop
cmp
test
pop
out
into
fbld
dec
xchg
xchg
xor
jne
minps
jo
push
mov
pop
out
imul
xor
jo
xchg
sub
xchg
cmc
add
(bad)
jge
imul
pop
add
sar
cdq
mov
repz
rol
nop
xchg
inc
xor
push
sub
daa
mov
loope
mov
lods
sbb
sub
addr16
and
je
ins
pop
and
xor
daa
mov
mov
ror
call
test
scas
cmps
aas
std
call
mov
push
cmp
lods
sub
stos
xchg
push
icebp
push
clc
dec
cdq
xor
(bad)
xchg
xchg
push
pop
(bad)
add
or
repz
sub
movs
inc
mov
(bad)
out
dec
in
mov
ret
imul
dec
lock
js
xor
hlt
fidiv
xchg
(bad)
xchg
pop
fild
jl
or
xchg
dec
push
jo
shl
adc
xlat
and
inc
int3
scas
xchg
sub
addr16
cdq
sub
xchg
setnp
call
adc
ja
fwait
cmp
xor
adc
mov
xchg
adc
retf
xchg
inc
lahf
pop
iret
ss
adc
js
shl
and
not
xchg
shr
shr
pop
call
dec
clc
fs
adc
add
push
xchg
outs
mov
ja
mov
pop
pop
cmp
inc
out
in
or
out
scas
loope
pop
mov
cmp
xchg
pop
pop
mov
in
cdq
sahf
adc
mov
gs
mov
jmp
adc
pop
lods
movs
xchg
push
fcom
mov
xchg
jns
imul
cld
(bad)
xchg
retf
push
jae
movs
mov
mov
je
xchg
aam
ret
sub
dec
shr
inc
pusha
mov
add
daa
fimul
in
pop
cli
xchg
add
dec
jmp
push
adc
popf
(bad)
push
xchg
popf
jmp
not
pop
push
int
mov
mov
rcl
stc
jp
and
xchg
fcomi
mov
mov
hlt
mov
outs
xor
mov
xchg
jb
xchg
aam
leave
mov
(bad)
mov
mov
xchg
ficom
mul
mov
dec
mov
mov
lds
xchg
mov
mov
ds
add
add
sbb
mov
bound
and
mov
out
adc
sbb
ds
adc
mov
cwde
mov
push
dec
ret
dec
sub
(bad)
scas
sub
xor
das
cmc
add
mov
jne
mov
popf
pusha
clc
pop
and
dec
jg
lea
retf
sub
cmp
out
xchg
out
xor
jae
adc
xchg
or
jp
xchg
mov
je
mov
cmp
movs
mov
outs
out
fbstp
out
cmp
mov
jbe
repnz
lods
sub
xchg
ror
inc
pop
and
sbb
stos
pop
jns
mov
add
xor
icebp
mov
mov
mov
mov
xchg
(bad)
dec
xor
sbb
(bad)
stos
cmp
jmp
mov
jns
mov
and
ins
xor
jmp
xchg
std
push
sbb
xchg
(bad)
fucomip
leave
push
add
inc
or
fwait
dec
stc
scas
xchg
or
cwde
(bad)
lods
adc
daa
mov
jge
neg
jnp
xchg
int
je
xor
mov
fs
js
sar
mov
lar
lods
mov
jbe
xchg
cdq
pop
ins
inc
shl
mov
pop
lds
pop
leave
stos
xchg
mov
xor
stos
push
or
xchg
mov
add
or
mov
jno
aam
fld
sbb
jge
cmps
nop
sub
pop
mov
ror
nop
or
out
idiv
rol
iret
xchg
mov
push
inc
sub
test
fisub
or
pop
inc
add
fisttp
fwait
adc
and
and
xchg
dec
xchg
cmc
sbb
lds
(bad)
in
and
jo
jg
call
inc
mov
mov
pop
ins
das
add
adc
imul
sar
sti
sub
cs
or
xchg
xchg
add
gs
and
pushf
mov
popf
xchg
xchg
sub
jmp
add
mov
rcl
pop
sahf
imul
ret
pop
xchg
pop
aad
scas
iret
sub
push
xlat
or
fsub
xor
je
outs
addr16
pop
dec
stos
xchg
push
shr
loopne
dec
dec
dec
test
jl
xchg
push
sub
push
xor
test
mov
xor
call
ins
mov
arpl
xlat
nop
mov
mov
ret
fwait
lods
ja
sub
aaa
push
mov
test
iret
pop
js
repz
push
inc
xor
add
or
fst
bnd
and
popa
ror
shl
test
jne
xchg
mov
xchg
dec
mov
jb
mov
mov
push
jmp
dec
clc
iret
push
loopne
fwait
mov
bound
fwait
add
adc
mov
xchg
dec
inc
mov
push
das
jg
lahf
xchg
xchg
push
push
arpl
lea
sub
(bad)
dec
into
adc
add
retf
xchg
jge
push
aaa
imul
test
hlt
inc
adc
rcl
cmp
mov
mov
clc
rol
xchg
dec
mov
out
js
xchg
xchg
xor
sub
inc
je
xchg
jmp
inc
mov
xchg
inc
xchg
xchg
loopne
xchg
sbb
(bad)
adc
mov
xchg
fwait
push
adc
mov
push
test
mov
sub
mov
sti
push
call
mov
add
sub
push
xchg
retf
or
test
neg
inc
mov
jge
pop
mov
mov
xlat
pop
mov
pop
xchg
xchg
cmps
pusha
fldenv
jne
int
adc
jmp
add
xchg
loope
int3
pushf
add
sar
movs
or
xchg
sub
ss
push
xchg
xor
sub
inc
data16
mov
xchg
mov
inc
pop
add
sti
lods
or
dec
(bad)
hlt
stos
and
inc
cmp
push
adc
daa
xchg
xor
xchg
addr16
sub
popa
dec
xor
dec
xchg
arpl
jbe
fwait
int
sbb
(bad)
jnp
xor
ins
shl
das
jo
or
inc
test
mov
aam
dec
pop
pop
cmps
mov
pop
and
adc
xchg
sub
test
stos
xchg
call
mov
dec
fwait
std
cmp
or
push
test
in
xchg
mov
(bad)
or
fwait
(bad)
sub
inc
xchg
mov
popa
dec
sub
ss
(bad)
dec
and
bound
xchg
mov
jae
pop
addr16
iret
outs
jno
and
out
xor
and
cli
mov
and
and
fldcw
xchg
inc
xor
lock
mov
test
scas
icebp
in
dec
sub
cwde
add
out
ror
dec
imul
xchg
xchg
mov
jno
xchg
mov
inc
outs
xchg
fist
std
mov
xchg
jb
lahf
movs
repnz
jmp
cwde
and
push
fwait
sar
cs
and
aas
jecxz
fwait
sbb
ficom
rol
aad
inc
movs
xchg
xor
mov
mov
lods
cmp
sub
inc
loopne
pushf
xchg
fdiv
mov
lea
push
xchg
pusha
push
icebp
inc
retf
xor
jns
mov
js
xchg
jnp
mov
cwde
les
cld
xor
xor
xchg
mov
cmps
je
adc
adc
icebp
inc
dec
adc
or
iret
jg
imul
pushf
pop
inc
dec
not
pop
pop
lahf
bound
xchg
mov
cli
xchg
into
push
sub
mov
sti
pop
inc
inc
stos
jb
xchg
and
xor
loopne
(bad)
repnz
cmp
push
fwait
cmp
jg
ret
add
add
and
mov
sbb
push
inc
jno
adc
cmps
mov
push
mov
loope
call
out
add
mov
xchg
pop
iret
mov
enter
ins
in
xchg
sbb
iret
mov
sub
pop
loopne
dec
es
xchg
mov
mov
xchg
add
jmp
xchg
nop
mov
out
ss
cmc
lea
inc
push
mov
pop
add
inc
cmp
lea
sbb
ins
pop
add
sub
loop
stos
nop
stos
dec
push
xchg
jg
mov
retf
push
sub
xchg
sbb
push
xchg
push
je
(bad)
xchg
and
dec
sbb
xchg
sbb
sub
inc
ror
sub
call
addr16
js
in
adc
mov
jb
dec
and
xchg
imul
pop
inc
sbb
fld
iret
(bad)
sbb
xchg
inc
enter
(bad)
into
inc
xor
cmp
(bad)
jg
fiadd
idiv
sbb
xchg
pop
aam
or
div
cli
int
xchg
mov
pop
mov
stos
shl
inc
out
sbb
sahf
test
pop
fcom
cld
or
test
pop
cmp
movntq
out
ret
cmp
hlt
sbb
iret
ret
xchg
outs
push
in
mov
dec
ins
retf
mov
mov
ds
dec
mov
cmp
jg
addr16
xchg
sbb
sub
adc
xchg
pop
xor
iret
test
mov
xchg
scas
cmp
push
xchg
cmp
or
xor
push
add
ja
pop
jmp
sar
push
xor
aas
int3
lahf
add
fist
je
cwde
sub
and
and
pop
ds
sti
les
mov
xchg
mov
cmp
xchg
sub
arpl
ss
mov
(bad)
cmps
pop
cmp
dec
aaa
cmps
hlt
adc
(bad)
popa
cmp
inc
xlat
mov
and
adc
aas
push
or
jbe
hlt
icebp
pusha
mov
cmc
in
shl
mov
jae
aas
stc
fndisi(8087
cmps
cmp
into
xchg
test
xchg
sbb
jecxz
xchg
jne
js
sbb
arpl
jae
jbe
iret
nop
add
in
fsub
xchg
push
xor
sahf
cld
xchg
rol
jp
jae
jle
hlt
mov
adc
xchg
inc
out
sub
jl
push
pop
aas
pop
or
inc
mov
xchg
push
scas
jge
adc
jbe
inc
mov
(bad)
cmc
call
leave
mov
stos
js
dec
enter
cs
jae
adc
xchg
(bad)
jnp
or
mov
ficomp
shl
inc
in
xor
rcr
jno
and
nop
jl
hlt
mov
icebp
sbb
or
inc
pop
sahf
ja
mov
rcl
lods
add
xchg
jp
push
jne
pusha
iret
cmps
aaa
pop
adc
jnp
mov
pop
mov
repnz
stos
and
nop
(bad)
xchg
mov
mov
lods
(bad)
aaa
ja
xor
cmp
mov
bound
mov
out
and
sbb
xchg
mov
add
ret
sbb
xchg
das
popa
xchg
retf
sbb
mov
sbb
jbe
mov
mov
aad
jno
pop
loop
xchg
dec
mov
aam
xchg
sub
enter
sbb
sub
xchg
adc
fnclex
xchg
setne
retf
lea
lods
imul
or
xor
hlt
push
pop
shl
aam
add
push
push
ret
xchg
cmp
(bad)
adc
fs
xchg
cmc
scas
movs
jmp
cmps
sbb
loope
jge
xor
pop
xchg
cmc
or
sub
cli
in
inc
rol
jmp
aad
xchg
sbb
and
loopne
push
mov
shr
mov
je
mov
push
test
(bad)
leave
jle
mov
adc
adc
sbb
xchg
gs
in
push
inc
outs
xchg
inc
xlat
and
mov
nop
xchg
adc
xor
test
jbe
test
jg
xlat
das
xchg
outs
sub
in
cmp
fsubr
out
jmp
(bad)
xchg
imul
stc
mov
test
jg
in
xchg
jmp
call
into
pop
adc
sbb
in
aam
das
lds
xchg
mov
int3
pushf
enter
mov
jae
jb
xchg
mov
sub
push
cli
adc
cmps
push
and
pop
xchg
ja
popf
fs
imul
jle
inc
xchg
imul
les
data16
mov
cmp
inc
mov
push
or
lea
out
fs
and
scas
int
bound
fwait
daa
loopne
pop
mov
dec
push
iret
(bad)
xor
rcl
mov
scas
cdq
xchg
sbb
sub
add
jne
loope
adc
aaa
fist
xchg
push
lahf
test
sbb
cwde
xchg
addr16
jg
out
add
xor
ins
pop
in
int3
fcom
sar
mov
and
adc
inc
xchg
inc
cmp
xchg
cmps
ja
pop
cmps
mov
inc
sbb
dec
lea
int3
cmps
mov
xlat
inc
das
(bad)
and
adc
popf
cmc
sub
xchg
mov
mov
xchg
xchg
sub
aad
dec
cmp
fs
daa
cmp
out
xor
or
adc
das
imul
mov
adc
pusha
fwait
xor
loop
or
imul
and
movs
xchg
pop
leave
mov
stc
mov
fld
xor
xor
out
dec
or
or
fwait
cdq
in
mov
loope
sub
pop
xchg
hlt
push
pop
mov
pusha
jcxz
mov
cmp
test
add
aam
sbb
jmp
mov
call
nop
adc
sub
out
mov
fnsave
arpl
and
pop
mov
xor
mov
pop
xor
xor
fistp
push
dec
mov
dec
movs
inc
rcl
xlat
aas
cwde
inc
add
dec
das
push
and
pop
aaa
jnp
movs
or
movs
neg
out
push
lods
cmc
xor
xchg
and
lea
xchg
xchg
mov
je
adc
xor
dec
jnp
dec
xchg
imul
and
inc
push
mov
jnp
fisub
pop
fs
add
mov
scas
rol
rcr
pop
xchg
test
in
add
hlt
sbb
add
aam
xor
nop
aam
imul
mov
adc
pop
fidiv
sbb
xchg
mov
fnstenv
jl
xchg
jmp
sub
cwde
xchg
int
jae
push
ret
mov
add
push
adc
cs
pop
xor
loop
xchg
lods
rcl
mov
push
or
adc
jno
jo
adc
ror
sbb
cmp
xchg
and
pop
mov
xchg
adc
sbb
push
xchg
popf
fmul
jno
cmps
jle
aam
mov
push
mov
xchg
div
je
rcl
pop
mov
(bad)
fnstcw
lock
xchg
mov
jns
dec
ret
mov
stos
rol
sub
mul
add
and
xchg
addr16
xchg
inc
mov
sbb
mov
sahf
xchg
or
xchg
cmps
cli
mov
add
cmp
js
rcr
cdq
mov
mov
lea
jmp
xchg
add
daa
and
popf
push
xchg
xchg
ret
test
cmp
ror
mov
rol
sub
push
xchg
xchg
xor
mov
xor
xchg
xchg
cmp
mov
xchg
gs
cwde
cmp
aas
xchg
and
fwait
dec
retf
xor
mov
les
aam
xchg
arpl
enter
xchg
inc
vpcomub
mov
and
or
cmps
cs
dec
sub
mov
push
adc
fwait
outs
sub
stc
inc
sbb
push
das
cmp
xchg
in
jo
xchg
xchg
or
jmp
sbb
mov
jo
mov
(bad)
and
test
xchg
int
lock
push
fs
mov
sar
retf
leave
inc
xchg
lds
mov
adc
or
je
xchg
dec
or
push
ret
fimul
mov
rol
cwde
adc
jae
and
xchg
mov
in
lods
dec
xchg
pop
loope
jns
call
cmovle
lods
leave
pop
push
nop
fwait
dec
ds
out
mov
scas
inc
outs
ret
(bad)
sbb
inc
je
adc
mov
dec
adc
pop
pop
cmps
mov
xchg
daa
add
cmc
sbb
ins
int3
xchg
cdq
outs
mov
pusha
xchg
add
rcr
shl
aam
mov
xchg
pop
add
leave
mov
sub
xor
and
lods
ret
cmp
mov
xchg
sti
movs
call
les
jo
pminsw
xchg
xchg
mov
cli
push
pop
rol
xchg
cmp
sbb
add
lds
std
lods
stos
cmp
xchg
ins
dec
add
xchg
lds
(bad)
je
cmp
sti
cdq
retf
adc
or
pop
aad
jns
or
xchg
fsub
jne
sar
iret
cmps
jle
or
stos
mov
pop
bound
retf
out
xchg
push
loop
xchg
imul
cli
adc
jno
dec
into
and
xchg
pop
push
mov
sbb
retf
cmps
dec
lahf
stc
mov
jg
push
loop
cs
lods
aam
push
mov
movs
pop
push
jg
push
and
sub
mov
cdq
jae
jnp
and
cmp
aam
xchg
ja
aaa
xchg
fist
xchg
cmc
ins
out
js
xchg
push
push
pop
jmp
xchg
pop
pusha
test
clc
ror
xchg
xchg
jb
xor
outs
mov
ja
sbb
xchg
shl
out
mov
je
pop
jno
and
xchg
mov
adc
fs
in
(bad)
jg
pop
and
pop
cs
pusha
add
hlt
enter
xchg
pop
mul
in
mov
cwde
mov
mov
iret
push
(bad)
sbb
and
movs
loopne
sub
dec
fs
xchg
in
mov
dec
mov
or
mov
inc
adc
pop
out
or
xchg
shl
hlt
xchg
cld
sbb
xchg
xchg
xor
and
loope
ficomp
and
cmps
mov
movs
ins
add
cmp
call
(bad)
cwde
stos
cmp
jge
gs
imul
jmp
scas
gs
pop
stos
fidivr
or
lods
xchg
sar
shr
mov
lahf
clc
pop
imul
sbb
xchg
xor
jnp
xchg
and
push
adc
int3
dec
leave
and
dec
mov
jb
mov
xor
(bad)
fs
in
mov
scas
je
push
aas
int3
sbb
out
xchg
gs
inc
cld
dec
jnp
imul
sahf
jo
(bad)
pop
mov
test
fwait
lods
and
mov
inc
call
(bad)
jmp
cld
sub
jb
loop
and
daa
les
inc
mov
adc
mov
ror
retf
out
fisubr
mov
push
pushf
mov
aad
xchg
imul
scas
retf
xchg
jno
push
cmp
add
or
pop
(bad)
xchg
mov
fs
xchg
hlt
mov
mov
sbb
adc
inc
pusha
fwait
mov
xchg
lahf
sti
jbe
push
hlt
xchg
cmp
mov
loopne
nop
push
mul
test
sbb
jo
xchg
mov
xchg
push
cmp
hlt
lods
mov
push
jae
sbb
fcom
xchg
mov
ds
sbb
and
xchg
jbe
mov
jl
inc
dec
retf
xchg
push
inc
jmp
xchg
call
fst
fcom
pushf
ds
mov
iret
not
popf
jo
and
mov
and
xor
daa
(bad)
dec
sbb
xchg
or
rcl
push
mov
lock
lds
xchg
push
sbb
jmp
and
pop
dec
jl
cdq
popf
ins
push
jp
push
hlt
add
fadd
int
cmp
dec
or
ret
xchg
scas
ja
shl
mov
sub
cmp
lds
xchg
mov
scas
icebp
repz
xchg
adc
xchg
sub
mov
inc
push
movs
loopne
jmp
(bad)
loop
push
inc
adc
hlt
cmps
xor
push
ins
push
push
aam
test
test
push
adc
sbb
push
jge
les
mov
aas
data16
(bad)
pop
fimul
das
xchg
sbb
repnz
ret
push
xchg
inc
jo
and
xchg
mov
lods
push
outs
ins
(bad)
adc
movs
ja
sbb
nop
xchg
inc
loopne
dec
or
mov
mov
aam
xchg
mov
fwait
xchg
ror
in
inc
aaa
(bad)
(bad)
int
add
call
mov
aam
outs
xor
xchg
fisubr
mov
jbe
and
in
inc
push
push
pop
xor
or
add
and
adc
or
mov
sbb
aam
adc
push
mov
cmp
jg
icebp
test
jno
xor
push
mov
xchg
xchg
dec
adc
mov
(bad)
push
hlt
sub
fcom
arpl
int
call
je
cld
stos
pop
dec
(bad)
xchg
xchg
jmp
adc
(bad)
mov
xchg
or
movs
retf
jne
aas
test
ss
dec
add
aad
pusha
xchg
inc
push
jae
repz
push
push
jne
inc
test
xchg
aas
cmc
mov
push
sbb
jl
fnstsw
mov
repnz
xchg
jno
in
shl
xor
nop
arpl
mov
cmp
jnp
mov
das
pushf
push
addr16
ret
adc
pop
fisttp
repnz
icebp
jnp
adc
sbb
push
inc
xchg
fidivr
xchg
out
nop
dec
lods
cld
xchg
(bad)
popf
mov
ret
pusha
mov
bound
xchg
sub
(bad)
iret
pushf
test
dec
mov
lea
pop
pop
test
stc
cdq
mov
or
ins
aaa
sbb
in
jmp
pop
push
mov
mov
adc
bound
or
pop
jbe
fucomi
xchg
xor
sub
push
or
xchg
pop
inc
jle
jmp
jo
xor
scas
adc
or
prefetcht0
into
pop
mov
cmps
push
add
dec
(bad)
mov
fisttp
xchg
aaa
xor
cmps
std
xchg
dec
mov
adc
hlt
loopne
xchg
nop
jo
xchg
mov
inc
pop
into
mov
adc
shl
lods
rcl
lods
adc
fsubr
push
dec
(bad)
xchg
push
mov
xchg
loop
daa
xor
mov
int3
cmp
pop
stos
scas
adc
and
push
lahf
mov
mov
mov
or
cmp
xchg
fdiv
ja
movs
pop
fcom
mov
mov
dec
ds
add
call
aam
pop
mov
aad
jecxz
jae
xchg
xor
dec
mov
and
fnsave
jmp
jae
mov
enter
aas
xchg
pop
jmp
in
fadd
daa
xchg
mov
aam
lods
or
xchg
test
repz
leave
or
xchg
popa
cmc
(bad)
push
rol
test
xchg
xchg
sub
mov
jp
dec
(bad)
std
call
fsub
cs
rol
mov
mov
adc
repnz
test
aad
jmp
and
lock
leave
xchg
cmp
popf
js
pop
lds
movs
jne
xchg
repnz
int
mov
ret
add
mov
and
xchg
mov
inc
jbe
rol
not
leave
xor
imul
sti
dec
adc
xchg
push
test
cmp
or
dec
push
adc
fidivr
add
and
mov
xchg
out
in
sbb
sub
pop
dec
push
pusha
mov
inc
inc
and
sbb
fcomp
mov
das
ins
pop
xchg
test
and
cs
arpl
imul
xchg
rcr
stc
mov
xchg
sub
push
imul
mov
ins
push
adc
loope
push
ficom
mov
pusha
xchg
and
mov
mov
mov
pop
xchg
out
jp
inc
mov
xchg
imul
and
pop
fs
(bad)
in
xchg
fadd
ror
push
mov
adc
pop
ja
xchg
or
mov
cld
inc
loop
cmp
arpl
xchg
and
xor
pop
xor
pop
scas
leave
xchg
iret
idiv
push
(bad)
into
repnz
mov
pushf
ss
xor
xor
clc
xchg
push
sbb
int3
dec
xchg
in
push
mov
ins
mov
mov
dec
call
jb
(bad)
jmp
sbb
xor
jne
pushf
inc
int
inc
sub
dec
adc
dec
adc
fwait
push
fs
jo
shl
xchg
mov
mov
rcl
movs
adc
sub
adc
cmp
inc
aam
movs
cmp
xlat
xchg
(bad)
stos
icebp
fcmovnb
ins
je
mov
xor
dec
loopne
xchg
test
sbb
add
div
pop
ins
and
xchg
cwde
sub
push
in
adc
adc
add
stc
fwait
aas
ret
in
test
xor
cwde
in
xor
push
and
adc
inc
dec
daa
sub
jae
imul
push
call
lock
mov
pusha
in
rcl
add
das
int
or
cmc
cld
push
xlat
xchg
xor
jae
popf
jg
pop
lock
leave
add
repnz
xchg
sub
xchg
test
rcl
mov
push
popf
cld
imul
adc
movs
jno
mov
mov
jns
xchg
lods
push
loopne
pop
fwait
dec
push
leave
es
pop
stos
movs
pop
jecxz
mov
xor
xor
mov
mov
movs
sbb
aad
jg
sti
add
and
(bad)
sbb
and
xor
outs
mov
cdq
fwait
or
fcom
in
scas
mov
jb
test
into
aam
adc
std
int
fbld
cs
mov
ins
xor
push
xchg
mov
js
xor
dec
je
pop
xchg
cmc
repnz
mov
xchg
sub
mov
pop
xchg
inc
cli
and
cmps
mov
adc
push
mov
add
mov
xchg
test
movs
inc
xor
mov
and
dec
add
ss
ret
outs
inc
pop
sbb
inc
in
xchg
and
iret
loopne
stos
dec
sub
xchg
mov
xor
mov
stc
ds
pushf
rol
fistp
push
adc
mov
pop
xchg
xchg
push
mov
jbe
jae
inc
loope
cdq
push
in
ror
test
mov
mov
or
mov
hlt
add
or
fwait
fs
clc
mov
mov
push
adc
dec
adc
div
retf
adc
mov
xchg
sbb
mov
xchg
fild
xchg
add
fwait
push
xchg
pop
fisttp
xor
adc
cmp
hlt
adc
mov
inc
push
dec
adc
repz
loop
rol
cmp
adc
ins
sub
pop
cmc
xor
mov
cdq
dec
cmps
pop
xchg
popa
push
mov
popf
aam
jo
mov
mov
sahf
(bad)
xchg
ss
xchg
inc
fild
lds
mov
std
movs
push
push
int3
xchg
(bad)
jl
out
test
ror
mov
in
sub
xchg
adc
mov
jbe
push
mov
dec
loope
mov
out
jl
sar
xchg
push
hlt
adc
out
ds
inc
push
fist
pushf
mov
add
aam
mov
in
add
add
mov
or
jns
fdivr
dec
push
mov
das
xchg
sbb
or
inc
push
les
lahf
jle
push
push
rcl
add
or
std
pop
call
sar
push
xchg
ret
lock
stc
call
push
xchg
pop
jmp
push
mov
ja
(bad)
fsub
xor
inc
outs
dec
test
add
cmp
add
fucomp
xchg
es
xor
pop
mov
inc
stos
sub
jno
pop
mov
push
daa
push
sbb
add
shl
or
xchg
xchg
adc
mov
jbe
lahf
ds
cmp
mov
ret
xchg
(bad)
fwait
jmp
adc
fldcw
repz
xlat
xchg
pop
test
xchg
push
or
xchg
dec
idiv
or
in
fsubrp
sbb
adc
(bad)
push
xor
mov
fwait
(bad)
xchg
jb
sbb
jecxz
ins
aam
or
xor
xchg
jae
jle
pusha
pop
aad
xchg
dec
iret
mov
scas
loopne
sahf
or
fsubp
xor
je
pop
mov
xchg
mov
push
int
xchg
das
add
cmp
idiv
repz
jg
mov
outs
popa
adc
out
cdq
adc
(bad)
call
xor
dec
add
or
jmp
in
lahf
xor
jo
xchg
adc
out
xchg
mul
fsub
xchg
movs
mov
pop
mov
xchg
inc
and
inc
sahf
or
xchg
loopne
mov
call
sbb
xchg
mov
or
sbb
xchg
adc
sti
xor
int3
xchg
sub
jo
push
and
fisub
fwait
daa
and
sbb
push
repnz
adc
pop
adc
adc
cmps
mov
stos
xchg
cmps
ins
jp
in
add
sbb
xchg
movs
dec
mov
fmul
int
jns
imul
sar
cmp
adc
sub
jp
adc
xchg
xchg
test
xchg
adc
movs
jmp
lds
jno
xchg
in
mov
xor
push
iret
push
lds
xchg
xchg
mov
aaa
xchg
fcom
pusha
test
stos
mov
repnz
inc
sbb
mov
leave
jae
in
dec
push
dec
stc
xchg
cmp
push
xchg
xchg
adc
scas
xor
mov
clc
popf
retf
dec
mov
add
dec
mov
rcl
xchg
fs
xchg
arpl
jmp
dec
stos
push
lea
adc
pop
das
jnp
xchg
repz
pop
icebp
mov
dec
fwait
and
test
adc
and
push
push
fprem1
test
dec
test
hlt
mov
mov
hlt
xchg
jl
pop
js
mov
leave
ins
fidivr
iret
(bad)
jo
cld
pop
jns
sbb
in
imul
mov
jo
pop
test
in
xchg
sbb
xchg
retf
dec
in
vshufpd
push
retf
rcl
int3
push
(bad)
cmc
(bad)
xchg
rcr
jge
mov
cmp
into
and
jno
mov
and
shl
retf
and
cwde
push
adc
outs
stos
fiadd
xchg
inc
add
mov
test
(bad)
cld
xchg
push
call
push
cs
out
dec
ins
xchg
or
add
lahf
mov
lds
cmp
mov
fsub
fsubr
test
shr
jbe
adc
mov
xor
jmp
fmul
cmp
xor
jp
add
sub
pop
jmp
xchg
cmp
int
adc
imul
pop
nop
(bad)
mov
xchg
call
imul
adc
fist
shl
or
xchg
aas
neg
test
xor
jo
out
dec
cdq
jbe
fist
sub
or
cmp
xchg
cwde
mov
adc
fnstcw
scas
mov
sbb
adc
pop
mov
push
sbb
and
mov
jbe
xchg
ret
mov
dec
out
add
adc
xor
ret
xchg
enter
fisttp
xchg
and
test
xchg
xchg
push
mov
dec
mov
bound
push
mov
scas
pop
cli
xor
adc
jmp
mov
aam
pop
jle
or
adc
leave
(bad)
das
lea
lods
lock
fadd
xor
pop
mov
(bad)
jle
mov
or
jecxz
add
xchg
sub
sbb
xchg
in
stos
sbb
and
jae
in
repz
div
mov
hlt
pop
inc
xor
xchg
rcr
push
rcl
or
xchg
stc
retf
push
sahf
jb
mov
cmc
cmp
fistp
xor
jns
sete
pop
jno
xchg
rol
aas
add
adc
push
xchg
cmp
xchg
ja
and
scas
mov
xchg
ror
jae
cmp
jl
(bad)
sub
add
jle
fst
adc
xchg
iret
mov
push
(bad)
repnz
mov
xchg
xchg
cmp
or
xchg
dec
mov
pop
mov
xchg
mov
pop
mov
in
call
sbb
adc
jge
ficom
mov
jnp
push
imul
shl
add
adc
add
xchg
xchg
outs
and
dec
xchg
sbb
call
mov
push
call
mov
jb
mov
xchg
cmp
and
mov
daa
push
xchg
scas
fwait
xlat
pop
stc
rcr
pop
xchg
in
inc
lods
nop
pop
jp
xchg
mov
push
mov
jb
jl
shr
xchg
pop
pop
fidiv
pop
gs
nop
outs
xchg
sub
jecxz
xor
push
xchg
jg
rol
adc
xchg
lds
rol
aam
jo
lods
mov
xchg
jbe
mov
xchg
sub
xor
sub
mov
adc
bound
push
mov
or
jle
addr16
dec
out
sub
mov
leave
xchg
nop
xchg
and
cmp
pop
mov
add
jmp
sar
xchg
mov
sti
ret
inc
inc
sbb
dec
jns
mov
mov
and
mov
inc
fisubr
dec
xchg
jmp
repnz
in
jae
xchg
jo
and
and
add
sahf
jg
fidiv
iret
shl
adc
jbe
xchg
jno
inc
or
adc
es
mov
sti
inc
dec
xchg
movs
jmp
ret
xchg
sbb
and
std
or
jno
in
pop
jmp
mov
sbb
jle
retf
cmps
inc
popa
fst
dec
jb
shr
jmp
test
jne
xchg
sub
or
dec
adc
xchg
mov
das
scas
mov
mov
(bad)
push
mov
xor
mov
imul
xor
xchg
xchg
shr
inc
and
mov
outs
fsub
mov
aaa
pop
cmp
sub
popa
(bad)
pop
xchg
mov
pop
and
inc
enter
aas
mov
ja
push
(bad)
inc
jno
push
mov
pop
mov
fidiv
les
mov
mov
dec
aaa
loop
test
xor
cmp
in
jg
mov
mov
mov
stos
sbb
push
mov
jg
push
imul
mov
popf
loop
mov
pop
mov
fcom
sbb
and
leave
fnstsw
push
xchg
or
(bad)
int3
xor
pushf
sbb
or
push
mov
xchg
int
in
adc
xchg
adc
mov
sbb
mov
add
jae
outs
and
mov
add
or
mov
cmp
xchg
add
loope
test
pushf
inc
mov
sahf
push
lods
mov
daa
inc
xchg
jmp
or
adc
sbb
xor
adc
jae
nop
(bad)
fst
outs
sti
or
jge
xchg
mov
push
push
adc
adc
icebp
or
cmp
add
repnz
stos
mov
shr
xchg
rcl
mov
mov
popa
icebp
lock
mov
pop
pop
test
xchg
aas
or
out
(bad)
pop
js
rcl
call
gs
xchg
cmp
daa
arpl
mov
fs
xchg
dec
hlt
xchg
jne
pop
sahf
cmp
arpl
aam
ret
(bad)
gs
jmp
or
xchg
push
push
movs
cmp
clc
lods
xchg
out
retf
enter
rcl
gs
mov
bound
std
jo
test
mov
push
mov
ja
adc
push
or
cmp
mov
dec
xchg
sub
sub
lds
xchg
lods
push
inc
cwde
xor
or
mov
pop
inc
ja
cmc
cmp
int3
popf
sbb
(bad)
scas
adc
cli
or
sete
rcl
fcom
iret
add
pop
push
xor
push
js
jle
sub
push
nop
test
adc
ins
adc
push
jo
mov
pop
xor
out
sub
push
mov
(bad)
fistp
push
call
cli
push
push
mov
shr
data16
adc
retf
or
lods
jbe
cli
mov
(bad)
jge
pop
cmp
inc
inc
mov
dec
popa
neg
cmp
xchg
je
mov
cmp
push
arpl
ficomp
lahf
push
pop
loope
adc
xlat
or
jo
adc
sar
jae
pop
xchg
test
aam
xchg
pusha
mov
and
xchg
xchg
fld1
jmp
hlt
jmp
mov
sub
sub
dec
and
mov
enter
pop
xchg
or
in
fcom
mov
stc
mov
jle
add
pop
retf
mov
push
mov
loop
add
(bad)
aad
fcom
call
xchg
inc
hlt
pop
fwait
movs
push
sbb
lods
push
xchg
out
xchg
popa
popf
lahf
shl
(bad)
mov
inc
cmps
movs
push
adc
pushf
hlt
cmp
cmc
es
aaa
or
cmp
xor
sub
cmp
jecxz
push
xchg
jmp
cld
add
xchg
in
xlat
or
push
pop
mov
xchg
sub
mov
pop
mul
mov
mov
xor
mov
ficom
test
sub
test
(bad)
dec
xchg
sub
add
ja
add
adc
retf
sbb
mov
imul
add
jl
iret
xchg
or
push
ja
hlt
lods
xchg
xor
cmp
clc
arpl
sbb
icebp
popa
dec
dec
mov
movs
cld
jae
mov
mov
ins
xchg
and
loope
leave
(bad)
sub
stos
or
xchg
pop
mov
cmps
test
rcl
and
dec
jnp
sub
push
and
xchg
mov
dec
movs
xor
ins
sbb
xchg
pushf
cdq
or
jg
repnz
pop
rcr
inc
mov
jne
jo
xchg
sub
mov
xor
jl
mov
data16
pop
cwde
mov
in
mov
arpl
rcl
push
push
sbb
lock
test
sbb
xchg
add
pop
dec
sbb
sar
or
mov
lods
and
sbb
and
test
cs
xchg
lds
clc
je
jmp
aas
xchg
dec
push
es
imul
pop
std
jae
fcomp
fist
add
loope
xchg
mov
xchg
pop
aaa
retf
jmp
and
int
xchg
ret
pop
in
xchg
or
out
inc
sbb
retf
xchg
pop
cmp
or
jle
dec
cmp
mov
sub
jnp
mov
outs
mov
imul
aam
fdiv
nop
data16
mov
xchg
pop
sub
and
lds
fist
loopne
mov
cmps
and
mov
sbb
xor
aam
fwait
push
cmps
add
stos
test
xor
mov
fs
pop
call
cmp
xchg
mov
push
inc
test
mov
mov
push
xor
scas
(bad)
mov
retf
sub
hlt
enter
mov
inc
stc
xchg
jmp
add
xchg
fsubr
mov
fwait
hlt
jg
xchg
adc
adc
movs
mov
add
out
mov
ficom
xor
jl
jbe
push
xchg
adc
xor
sub
retf
lock
add
xor
(bad)
out
shl
xlat
sbb
mov
in
mov
xchg
cs
inc
mov
xchg
lods
rol
xchg
and
inc
hlt
fs
mov
dec
daa
shl
xchg
aam
adc
xlat
fisttp
stos
mov
aaa
cmp
pop
xchg
outs
shl
arpl
cs
popf
add
ins
cmps
imul
xchg
xchg
(bad)
mov
push
fs
outs
pop
xchg
test
jmp
xor
and
xchg
pop
shl
pop
sar
loopne
call
jbe
xchg
cmp
in
mov
imul
adc
ret
ror
ins
lea
or
scas
fisub
pop
mov
inc
in
mov
xchg
jb
addr16
scas
div
sbb
adc
sub
adc
xchg
mov
or
repz
out
call
cmps
and
jae
add
mov
mov
inc
sbb
xchg
inc
xor
and
xchg
jnp
mov
dec
jmp
inc
xchg
add
sbb
add
jge
xchg
mov
aaa
jmp
xchg
mov
pop
mov
mov
mov
hlt
dec
clc
and
xchg
popf
rol
cmps
in
js
enter
pop
lds
test
mul
xchg
lock
sub
push
loop
xor
inc
push
xchg
cli
out
js
xor
and
arpl
cmp
dec
int3
xchg
js
or
shl
xchg
test
lods
adc
aad
sub
int3
add
adc
push
inc
dec
retf
mov
jne
cmp
sub
cmp
mov
adc
xchg
mov
aam
push
xchg
push
aad
mov
in
jb
xor
cdq
je
push
xchg
mov
imul
cmps
es
rcl
cmp
aas
or
fwait
mov
inc
loope
push
je
mov
cmp
sete
lock
cmps
int3
ret
push
add
xchg
mov
test
jecxz
es
mov
pop
sbb
int
popf
out
repz
out
ret
mov
loope
not
pop
jg
xchg
fistp
pop
sub
xchg
pop
arpl
je
adc
xchg
cmp
mov
imul
xor
imul
mov
call
sbb
aas
pop
jnp
iret
xchg
mov
mov
cmp
fist
dec
repz
xchg
jbe
jle
arpl
pop
or
cli
or
hlt
adc
sete
dec
mov
push
sbb
mov
inc
out
ds
les
(bad)
xor
xchg
mov
dec
cdq
pshufw
cdq
mov
mov
aaa
ret
or
mov
aam
cmps
outs
icebp
sbb
adc
fnsave
arpl
sub
pop
imul
inc
add
adc
push
shl
imul
fwait
shr
int3
adc
mov
in
fdiv
push
out
xchg
adc
shl
call
xchg
and
shr
inc
rcl
iret
call
je
lds
mov
push
jmp
add
cmps
and
out
popa
xchg
xor
(bad)
jmp
add
ins
aas
sub
jae
sub
popa
mov
adc
sub
xchg
bound
jns
or
jno
lds
add
in
int3
jno
add
dec
push
cli
mov
mov
xchg
mov
push
xchg
scas
cdq
or
push
pop
xchg
jo
xchg
stc
iret
sub
xchg
or
sbb
scas
adc
adc
sar
lods
jg
and
es
imul
push
jmp
jb
fs
and
mov
xchg
sti
outs
lods
cmp
sbb
xchg
lea
add
ss
xchg
xchg
aaa
mov
call
push
inc
push
sbb
(bad)
les
test
adc
std
retf
inc
out
xchg
xchg
mov
adc
fldcw
pop
mov
adc
and
or
mov
push
mov
xchg
push
pushf
into
mov
xchg
pop
mov
out
lods
jno
push
fdiv
inc
xchg
xchg
dec
cmp
dec
cmps
inc
stos
std
jp
in
adc
push
xchg
ja
xchg
cmp
xor
cld
(bad)
xlat
les
mov
and
xchg
cmps
rcl
and
xchg
push
xchg
xchg
sahf
push
cmp
mov
call
outs
adc
pop
and
hlt
leave
out
test
xchg
xlat
outs
cdq
stos
arpl
pushf
lock
call
ret
fdivr
mov
pop
push
shl
stos
or
dec
sub
xchg
push
jno
mov
sbb
sbb
dec
frstor
repz
xor
addr16
test
aam
es
out
loopne
mov
push
cld
fstp
js
fistp
dec
xchg
imul
sahf
adc
cmp
iret
dec
xchg
inc
jns
(bad)
push
add
adc
shr
mov
icebp
adc
pushf
cmp
xchg
inc
data16
popf
push
test
xchg
loope
xchg
loopne
sub
mov
pop
cli
clc
xchg
and
push
fisttp
loope
mov
dec
ins
dec
and
scas
inc
xchg
push
test
xchg
dec
mov
and
dec
call
call
cmps
sub
push
xchg
shr
daa
lods
je
outs
lahf
xchg
retf
jb
sbb
add
xlat
xchg
clc
das
dec
xchg
fs
push
adc
xchg
test
xchg
(bad)
je
je
pop
mul
xchg
movs
sbb
inc
jmp
test
cmc
shl
dec
or
xchg
fcom
cmp
push
mov
popf
cmp
xchg
xchg
retf
push
rol
sub
mov
xchg
xchg
aam
inc
nop
xor
mov
xchg
bound
das
push
or
dec
pop
into
or
inc
loope
xor
cmp
xchg
cwde
dec
jmp
arpl
sti
popf
stc
cmps
dec
pop
adc
mov
add
xchg
out
icebp
and
fimul
inc
jbe
xchg
imul
jg
xchg
xchg
xor
push
mov
inc
outs
fdivr
lahf
repnz
xchg
push
fld
xor
sar
movs
sub
mov
adc
data16
popa
cmp
or
jmp
xchg
mov
mov
(bad)
sbb
inc
or
not
lahf
icebp
fnstenv
imul
inc
arpl
xor
or
inc
mov
mov
je
fsubr
jmp
mov
iret
mov
pop
fsubr
sbb
push
ror
imul
fild
mov
push
ret
adc
mov
sub
xchg
push
xchg
and
adc
test
fsub
scas
out
ja
ror
push
out
pop
movs
out
xchg
inc
xchg
push
adc
mov
into
cmc
sahf
xor
daa
xchg
out
and
xchg
dec
cmp
repnz
(bad)
mov
lods
and
aas
and
adc
jno
leave
inc
imul
xchg
or
cmc
sub
mov
xchg
pop
popf
mov
scas
aas
xchg
jnp
cs
cmp
or
sub
mov
push
cdq
sahf
fsub
jp
leave
and
mov
xchg
out
sti
lods
inc
sbb
push
push
jle
inc
xchg
mov
jmp
movs
cmps
in
dec
add
xor
pushf
shld
xchg
sbb
push
out
aam
js
xchg
fidivr
stc
mov
push
fst
cmc
movs
xchg
repz
mov
fwait
push
xchg
std
arpl
movs
call
pop
xchg
iret
mov
je
xchg
rol
in
mov
inc
fs
inc
mov
mov
pop
mov
mov
or
jae
pop
sub
mov
adc
inc
test
fwait
(bad)
in
mov
jecxz
andps
dec
jbe
aad
cmps
or
xor
movs
ss
hlt
xchg
inc
xchg
(bad)
dec
and
push
jns
cmp
cmp
(bad)
xchg
mov
pop
add
xchg
pop
xchg
retf
xchg
mov
loope
dec
mov
add
hlt
lea
pop
or
stos
ja
out
ja
fmulp
test
nop
ds
cwde
cmp
test
data16
xchg
cmc
mov
call
(bad)
mov
popa
mov
xchg
jg
or
je
jae
jl
jecxz
leave
cld
dec
mov
xor
fwait
dec
sbb
ss
stc
fisttp
es
fisub
and
xchg
aaa
push
adc
xchg
mov
in
sub
fnstsw
es
cmp
mov
push
mov
or
or
mov
rcr
pushf
cmp
fs
jmp
adc
cld
sub
add
test
aaa
cmp
xchg
jl
dec
jge
popf
add
fwait
cmps
push
outs
vmwrite
mov
jp
xchg
pop
test
xor
int
jb
adc
(bad)
xchg
into
sbb
pop
xchg
sub
rcl
jg
popa
ret
mov
(bad)
xchg
out
sbb
mov
pop
push
xchg
adc
call
das
hlt
loope
not
shr
fist
jne
adc
mov
loope
out
cld
xchg
and
cld
xchg
add
dec
or
xchg
rep
push
aaa
div
jmp
sub
outs
xchg
ret
sub
xchg
inc
test
add
jae
rol
jmp
cmp
or
xchg
sub
lods
xchg
mov
jo
loope
pop
stos
cmps
mov
das
adc
sbb
xchg
mov
int
mov
arpl
retf
mov
rcl
mov
div
xchg
add
lock
(bad)
xlat
jmp
ret
xchg
mov
loope
inc
xchg
xchg
outs
and
(bad)
mov
push
jbe
push
sub
mov
pop
add
addr16
les
lock
test
push
aam
sub
xor
push
ss
mov
mov
(bad)
mov
sbb
push
cmps
mov
outs
sbb
jg
jbe
dec
sub
mov
je
in
sub
xchg
bound
or
outs
xchg
scas
retf
pop
mov
xor
pop
cmp
dec
daa
fst
ins
xchg
dec
jae
dec
push
sbb
jo
sbb
xchg
pop
stc
(bad)
inc
nop
dec
fwait
mov
add
lods
je
jns
push
or
or
and
into
imul
je
lods
jmp
xchg
and
xchg
sahf
fwait
mov
mov
sbb
leave
cmp
adc
lock
imul
stos
fistp
jb
xchg
cmps
inc
pop
lock
scas
add
mov
cmps
xchg
add
push
xlat
jle
or
outs
inc
fild
mov
jle
mov
sbb
shr
in
push
push
adc
xchg
jl
mov
sbb
jp
sub
cld
icebp
dec
rcl
mov
out
xchg
(bad)
jae
adc
dec
adc
addr16
mov
xor
bound
in
cmps
lahf
sahf
xchg
xchg
mov
xchg
or
mov
or
fisubr
jg
add
imul
xchg
sbb
mov
mov
pop
xchg
or
std
stos
adc
loop
jmp
xchg
sbb
cmp
xchg
mov
sub
push
cmps
je
xchg
lods
jecxz
push
push
pusha
cmps
sbb
pop
pop
subps
stc
cmp
aam
mov
pop
xchg
aas
inc
sbb
inc
dec
nop
in
jmp
les
jle
xchg
cli
adc
add
xchg
pop
mov
push
sub
xchg
and
cmp
dec
rol
xchg
add
outs
mov
lahf
les
(bad)
ss
push
not
test
push
push
sub
push
push
xchg
arpl
scas
sbb
je
jno
inc
xchg
cmp
mov
inc
or
xchg
mov
cmps
pusha
ror
jge
es
call
mov
rcl
pop
sub
inc
lock
push
ss
cmps
mov
adc
scas
dec
popa
add
xor
mov
dec
xchg
pusha
push
je
mov
pop
mov
xor
jecxz
mov
sub
pop
xchg
mov
lea
xchg
das
mov
pop
jge
pop
in
mov
mov
inc
jp
lea
and
sbb
out
xchg
add
jmp
bound
rcr
or
jo
xchg
shl
and
xor
(bad)
fisttp
(bad)
push
xchg
and
movs
jne
dec
jle
jge
sbb
sbb
push
in
stc
fadd
fld
xchg
sub
fld
xor
xor
imul
sub
(bad)
loope
push
xlat
sbb
mov
adc
cmc
aaa
jle
call
xchg
adc
mov
test
cmps
or
mov
lods
xchg
push
sub
sub
pop
xor
xor
(bad)
push
ins
jmp
es
scas
sub
adc
pop
xchg
pop
cld
dec
out
or
cmp
sbb
and
add
fwait
cmps
nop
xchg
or
cmp
rcl
scas
retf
ret
mov
xchg
loope
js
mov
out
xchg
int
dec
xchg
inc
fisub
pop
into
mov
jg
(bad)
push
inc
int3
dec
les
mov
aam
add
mov
stc
mov
push
cmp
fmul
and
add
cmp
push
outs
pop
inc
dec
xchg
ret
je
rol
and
adc
aad
push
nop
pop
loope
call
lahf
dec
ja
sub
out
test
xchg
push
inc
inc
ss
pop
xchg
stc
sbb
mov
clc
mov
jl
loop
ss
sub
xchg
adc
ins
inc
xor
xchg
aam
jmp
mov
xchg
mov
(bad)
jne
mov
sar
xchg
cmp
xchg
mov
test
int
pop
adc
cmps
ds
cs
stc
retf
sar
shl
adc
or
pop
ret
xchg
dec
cld
jmp
cmp
mov
jne
movs
mov
(bad)
xor
mov
or
jns
xchg
mov
jmp
xlat
aaa
xchg
retf
out
popf
push
retf
dec
in
jne
cwde
dec
pop
int3
cmp
cmp
xchg
inc
dec
(bad)
pop
fimul
pusha
xchg
stos
je
sahf
lahf
pop
stc
pushf
fwait
pop
imul
xlat
push
jb
sbb
cmp
test
sbb
into
xchg
out
scas
ja
jl
mov
(bad)
test
enter
sbb
xchg
mov
retf
mov
xchg
movs
adc
and
xchg
icebp
xchg
call
dec
cmp
and
sub
xchg
imul
das
mul
push
inc
xchg
inc
mov
movs
and
and
pop
push
pushf
xchg
retf
xchg
sbb
call
mov
fild
mov
mov
pop
cmp
mov
mov
lods
test
data16
xchg
mov
(bad)
pop
out
test
lahf
xchg
pop
sub
iret
cmp
mov
mov
sub
mov
jns
adc
ss
icebp
mov
xchg
xor
pop
cs
xchg
dec
xchg
imul
lods
(bad)
out
popf
(bad)
dec
xchg
inc
add
and
aaa
lds
iret
out
in
add
mov
xchg
repnz
xchg
hlt
(bad)
cld
and
scas
popa
xor
inc
jl
inc
lock
xchg
jae
jg
(bad)
leave
arpl
into
loopne
adc
loope
cmp
xchg
(bad)
push
and
mov
sbb
jle
ficom
mov
out
cmp
aam
cmp
mov
xchg
inc
(bad)
push
pop
sbb
jecxz
jp
loop
sub
mov
aas
hlt
pop
icebp
push
mov
(bad)
or
lock
mov
add
pop
push
addr16
cmp
adc
(bad)
stos
jnp
int
jecxz
rol
call
mov
push
xchg
add
xor
les
fwait
test
or
nop
movs
fisttp
xor
dec
mov
or
icebp
xchg
xchg
cld
stos
mov
jae
mov
stos
pushf
(bad)
bound
test
pop
frstor
pop
push
jb
inc
out
aas
cmp
mov
mov
das
jmp
mov
mov
jnp
imul
jmp
mov
ficom
or
xchg
inc
pop
jl
xchg
inc
(bad)
jmp
dec
xchg
inc
cmp
adc
xlat
jae
xchg
dec
mov
pop
sub
je
iret
push
adc
xchg
and
cmc
mov
mov
in
call
mov
sbb
xchg
lods
mov
in
in
mov
add
inc
sbb
bnd
mov
or
call
or
push
push
and
or
fwait
imul
adc
mov
(bad)
xchg
dec
or
cmps
xchg
aam
mov
out
lods
xchg
imul
aas
loope
neg
push
fs
hlt
int3
cmps
std
or
or
mov
jecxz
mov
fstp
and
(bad)
pop
dec
push
cmp
mov
push
imul
fcom
imul
add
xchg
cmc
mov
lock
adc
jbe
cdq
inc
jle
in
or
xchg
lds
pop
(bad)
hlt
push
or
ins
inc
xchg
popa
jb
ins
push
add
and
scas
sti
dec
je
adc
xchg
sbb
aaa
popa
(bad)
xlat
cmps
inc
xchg
outs
ds
addr16
add
mov
mov
mov
fist
frstor
outs
jbe
adc
ds
test
add
cmp
sbb
or
sub
test
mov
cmps
int
arpl
cmp
cs
sahf
sbb
push
adc
inc
inc
(bad)
xchg
jp
mov
stc
sar
add
shl
jbe
xchg
dec
xor
adc
les
xchg
dec
push
jbe
push
call
mov
cld
idiv
aaa
cmc
adc
push
or
ds
jle
xchg
inc
pop
leave
xchg
fldcw
aad
pop
cmp
inc
out
or
xchg
jb
daa
pop
xchg
(bad)
test
mov
inc
push
bnd
cs
jno
pop
(bad)
std
xor
js
xchg
das
dec
inc
fidivr
pop
jp
xchg
xor
xchg
std
fistp
inc
xchg
and
mov
cmp
std
adc
sti
stos
mov
(bad)
cmp
cmc
hlt
mov
nop
shl
jo
xchg
cmps
push
or
xchg
popf
outs
mov
push
fstp
mov
and
imul
rcl
xor
mov
pop
repz
test
inc
xchg
xor
neg
pop
ror
ins
pop
or
scas
dec
xchg
fld
sbb
pop
or
mov
push
fsubr
sbb
xchg
mov
cmp
not
lock
sahf
cmp
xchg
test
movs
xchg
mov
outs
ja
lahf
fldl2e
(bad)
stc
adc
call
push
(bad)
outs
jl
xchg
xchg
sti
and
inc
fwait
mov
xchg
mov
nop
push
xchg
sbb
or
repz
push
push
out
sbb
dec
(bad)
shl
rcl
loopne
cmc
into
or
adc
and
dec
jl
cmp
xchg
adc
xchg
add
push
sub
fwait
lods
and
jmp
iret
fxch
(bad)
imul
xchg
repz
inc
jae
or
cmc
das
fldenv
jge
xchg
scas
popf
sub
xchg
pop
int3
pop
push
xchg
dec
ins
iret
sbb
loope
aam
nop
push
cmp
and
fstp
out
xchg
popa
jns
mov
adc
jae
cs
mov
sti
mov
xchg
sahf
lea
(bad)
xchg
fld
or
enter
loopne
adc
mov
jo
jmp
xchg
lods
into
dec
mov
xchg
gs
xchg
and
iret
mov
popf
hlt
push
push
adc
and
aas
das
(bad)
mov
loope
gs
adc
stc
and
xchg
xor
repz
cmc
out
xchg
cmp
in
jb
add
sub
push
mov
xchg
imul
adc
stos
scas
lods
arpl
pop
xchg
sbb
inc
leave
cmc
clc
dec
mov
jmp
in
pcmpgtw
pop
mov
out
or
fst
lds
xchg
scas
mov
pop
cdq
into
jns
mov
mov
mov
enter
aam
mov
dec
mov
xor
call
push
nop
cld
clc
mov
xchg
mul
xor
jle
sar
xchg
xchg
sti
pop
push
add
xchg
test
pop
rcl
adc
mov
ins
cs
pop
or
sbb
inc
int
xchg
out
out
xchg
int3
push
rcl
inc
xor
jbe
cmp
mov
pop
xchg
test
or
xlat
aad
je
inc
inc
mov
cmp
pop
sub
sbb
aad
xchg
call
sub
sbb
xchg
xchg
and
pop
retf
xchg
push
call
(bad)
bnd
rcr
sete
je
xchg
push
cld
aad
(bad)
dec
xlat
(bad)
xchg
lods
sar
mov
mov
or
stos
lods
xchg
cmp
jecxz
mov
cmps
mov
sbb
dec
js
aam
push
pop
mov
inc
addr16
bound
add
out
lods
xchg
movs
pop
(bad)
and
adc
or
js
xchg
popa
xor
(bad)
fsincos
adc
push
xchg
jge
icebp
jcxz
pop
out
inc
adc
mov
je
push
inc
pop
add
mov
pushf
fwait
clc
ret
push
xchg
unpcklps
mov
inc
sbb
shl
mov
pop
mov
mov
push
xchg
dec
inc
pop
sbb
xchg
enter
jnp
pop
inc
adc
stc
dec
aas
mov
xchg
xchg
mov
aaa
cli
loopne
mov
ins
cdq
jne
sub
cld
out
fcomp
ror
mov
push
cmps
jg
pop
ins
int3
shl
xchg
add
mov
or
mov
leave
mov
mov
push
sub
xchg
mov
pop
mov
xchg
lahf
cmp
gs
pop
mov
fs
mov
jg
pop
rol
dec
push
jbe
xchg
aad
cmps
pushf
push
push
in
xchg
xchg
idiv
(bad)
sub
int3
mov
adc
pushf
shl
adc
(bad)
fstp
cdq
xchg
jp
imul
mov
dec
or
inc
inc
ret
lds
(bad)
lods
jp
xchg
adc
mov
push
pop
mov
push
xchg
mov
(bad)
push
adc
pop
loop
mov
jle
aam
popf
lods
or
lahf
je
xchg
sbb
test
jo
xchg
mov
ins
popa
nop
fld
xchg
icebp
pop
(bad)
mov
mov
cmp
inc
sbb
xor
jp
dec
(bad)
mov
les
xor
fist
adc
xchg
outs
lea
cmp
loop
xchg
out
fdiv
js
xchg
xor
std
mov
xchg
inc
retf
or
mov
push
mov
aad
add
xchg
stos
xchg
cmps
ds
call
pop
xchg
iret
mov
jg
xchg
lea
mov
adc
js
mov
cmps
sar
xchg
icebp
mov
sbb
sub
sub
lahf
ret
dec
lods
loop
xchg
pop
sbb
repz
test
add
mov
xchg
xor
popa
adc
mov
xchg
inc
mov
out
call
sbb
xor
mov
call
in
test
and
adc
(bad)
out
gs
inc
push
xchg
int3
fwait
or
inc
enter
fcmovbe
xchg
add
push
test
movs
add
arpl
gs
push
add
jae
test
mov
xchg
enter
xchg
mov
mov
jl
mov
mov
xchg
push
add
loope
rol
stos
mov
inc
jnp
cmc
inc
repz
test
js
pop
jecxz
xchg
push
cmps
in
and
adc
sbb
mov
xchg
ja
aas
sahf
push
mov
mov
idiv
fistp
imul
cmps
js
jg
dec
test
add
mov
inc
xchg
xchg
fdivr
mov
sbb
cwde
(bad)
in
pop
add
aad
or
test
xchg
sub
gs
adc
xchg
xor
outs
xchg
fcom
inc
imul
or
or
ret
shr
enter
ds
mov
and
jl
inc
mov
lahf
inc
pop
sahf
cmp
jo
shl
xchg
add
addr16
xchg
call
jmp
mov
mov
ss
jp
out
xchg
pushf
ds
pop
out
pop
adc
pop
mov
push
loope
lods
jno
push
popf
lock
push
rcl
mov
dec
test
push
dec
out
je
rcl
mov
mov
sar
mov
fwait
repz
cmc
sub
adc
fs
jle
adc
or
push
mov
sub
fmul
xchg
sar
adc
shrd
push
pop
out
in
jo
xchg
cdq
movs
inc
aam
pop
dec
repnz
lods
mov
sub
xchg
adc
stc
loopne
xchg
mov
adc
dec
xchg
std
xchg
mov
pusha
outs
sbb
or
test
retf
cs
mov
pushf
(bad)
xor
sub
loop
sbb
mov
cmp
mov
lahf
jae
loopne
pop
fadd
enter
ret
ins
xchg
or
(bad)
loopne
mov
hlt
jle
test
lods
xchg
bound
mov
fs
cmp
xchg
adc
shl
arpl
sub
test
and
ja
jg
xchg
les
lods
(bad)
int3
fld
mov
imul
scas
clc
xor
xchg
cmp
or
jns
pushf
xchg
push
xchg
pop
scas
in
pop
mov
dec
sbb
into
hlt
mov
mov
or
les
or
xchg
int
(bad)
in
mov
in
xchg
lods
lock
xchg
fwait
adc
shr
sbb
xlat
lods
xchg
addr16
mov
and
cmp
out
add
fcom
fisub
sbb
xchg
pop
xchg
xchg
mov
fwait
mov
dec
adc
and
pusha
pushf
push
pop
mov
ret
sbb
cmp
les
jnp
arpl
cmp
stos
pop
aas
mov
int3
arpl
out
in
add
cmc
pop
stos
mov
sbb
adc
mov
sbb
shr
add
leave
xlat
and
call
xor
and
fist
cs
inc
lock
adc
ret
sbb
popf
xchg
dec
mov
cmc
fmul
fist
push
add
jne
xchg
cmc
xor
jmp
neg
and
fcom
or
out
mov
loopne
or
aas
sub
sub
enter
inc
dec
jecxz
inc
pushf
xchg
stc
cmc
mov
dec
in
xchg
mov
pop
push
out
push
ja
jl
xchg
es
test
rcl
retf
(bad)
xchg
je
test
cmp
xchg
add
movs
loope
push
dec
push
pop
dec
leave
add
xchg
les
repz
or
not
mov
mov
xchg
jb
pop
push
xor
push
fwait
fwait
test
dec
and
mov
push
sub
loope
mov
je
inc
(bad)
cli
(bad)
call
xchg
mov
mov
sub
push
in
in
aaa
rol
ja
out
(bad)
je
push
imul
mov
inc
jne
and
or
arpl
xlat
in
stc
mov
push
mov
scas
mov
xchg
sub
cmp
repnz
jge
js
div
(bad)
out
xor
push
hlt
imul
adc
call
or
cwde
push
mov
jg
imul
mov
sub
xchg
and
dec
and
adc
(bad)
cmp
btr
jle
or
xor
mov
add
and
cmps
ja
sub
pusha
xchg
(bad)
sub
jle
cmps
xchg
jge
mov
xor
jbe
and
jnp
mov
ret
xchg
arpl
dec
fdiv
jle
retf
dec
shl
mov
outs
(bad)
lock
pusha
add
ss
adc
adc
and
pop
nop
jg
dec
arpl
xchg
add
cmp
and
inc
stc
mov
out
adc
loop
aaa
xchg
xchg
mov
aam
push
and
push
jecxz
rcl
imul
fisub
xchg
int3
or
jb
mov
sahf
xchg
and
pop
add
into
mov
push
adc
bound
push
xchg
repnz
jl
shl
sbb
jecxz
mov
push
mov
aad
jl
xor
jnp
in
dec
mov
rsqrtps
dec
outs
xchg
inc
aaa
xchg
in
mov
push
pop
mov
or
(bad)
test
jnp
js
xchg
stc
(bad)
retf
push
iret
(bad)
sbb
xchg
pop
push
mov
repz
call
dec
xchg
out
lods
aad
hlt
pop
(bad)
ficom
addr16
xor
mov
lahf
mov
jb
repz
pop
xchg
mov
out
jmp
outs
aas
xchg
in
inc
enter
adc
fwait
into
inc
repnz
je
fsub
add
aaa
pusha
(bad)
stc
xchg
nop
rol
pop
fst
rcl
push
in
jns
push
sbb
ror
out
ret
sbb
or
inc
movs
enter
xchg
int3
and
xchg
push
mov
push
fisttp
pop
inc
pop
fadd
mov
mov
ds
xchg
cs
out
aad
mov
dec
ror
sti
into
sub
call
outs
int
xchg
js
sar
int3
mov
push
je
bound
dec
lea
dec
into
mov
ins
mov
(bad)
cdq
push
mov
imul
fs
jecxz
sub
addr16
cmp
xchg
xchg
xchg
xchg
cmps
retf
mov
cld
or
dec
pusha
xor
ror
xchg
repz
mov
xchg
aaa
retf
push
pop
cmc
or
pusha
add
mov
pop
outs
xchg
(bad)
(bad)
sbb
sub
call
ss
and
repz
(bad)
mov
push
nop
aam
idiv
test
out
push
sbb
sbb
mov
gs
push
daa
mov
into
xchg
cs
push
loopne
cmps
je
std
add
stc
dec
jmp
ja
or
fs
jns
mov
aam
push
arpl
movs
add
jmp
in
or
cmp
push
lds
cmp
sub
or
cmp
and
fs
inc
jmp
sub
mov
and
xchg
cmp
ins
xor
cmp
fwait
sbb
aad
rol
out
dec
add
jae
rcl
aaa
mov
je
shr
or
pop
xchg
xcrypt-ctr
cmps
fcmovbe
pop
dec
ds
call
int
clc
and
out
dec
push
xchg
test
add
mov
add
bound
ins
sub
adc
dec
shl
jmp
je
xchg
inc
popf
lods
and
add
fld
and
xlat
ins
movs
or
xchg
cmps
aam
pop
or
dec
arpl
imul
xchg
loopne
jl
sbb
int3
fstp
mov
fmul
mov
xor
jl
lahf
xchg
push
mov
or
fdiv
pop
and
push
jns
xor
xchg
sbb
jmp
xchg
data16
jle
push
cmps
or
fwait
push
jns
mov
outs
mov
xchg
xor
adc
pop
adc
aad
jns
sti
rol
adc
loop
jo
call
clc
lods
je
jmp
rcr
mov
cmp
adc
fmul
pop
add
mov
pushf
pop
test
(bad)
jmp
xchg
xor
nop
xchg
lock
jmp
sti
jl
push
xor
paddusb
sti
lock
imul
inc
mov
sub
jmp
stos
jbe
xchg
stc
mov
outs
fwait
scas
stos
rcl
and
xchg
push
mov
push
cs
aaa
loope
xor
xchg
add
mov
xor
fsub
js
add
cmp
mov
xchg
mov
das
outs
scas
mov
sbb
adc
popf
repnz
pop
xchg
fidivr
fwait
pop
push
push
loop
inc
xor
ja
sub
test
or
push
(bad)
mov
pop
jns
add
xchg
icebp
out
shr
aam
(bad)
(bad)
push
int3
pop
fist
arpl
cld
inc
fisubr
xchg
xor
xchg
pop
aad
push
enter
xchg
mov
and
sbb
lods
add
xchg
add
pop
stc
fdiv
aam
and
xchg
sbb
je
inc
hlt
in
daa
mov
mov
dec
adc
fdivr
adc
xchg
imul
xchg
int
bound
mov
mov
dec
pop
or
rcr
and
fwait
xchg
jl
arpl
sbb
or
es
(bad)
lock
xchg
loope
in
xor
add
push
dec
cdq
or
mov
jns
adc
push
inc
retf
aas
loope
repz
fcom
xchg
es
gs
dec
add
test
xchg
jne
mov
aaa
xor
out
nop
push
fs
pop
xchg
sbb
neg
xchg
fwait
stos
dec
mov
retf
cmp
cmps
mov
jmp
mov
push
cdq
pop
sbb
or
clc
fcom
pop
jle
pop
xchg
fs
fcmove
pop
rol
xchg
addr16
(bad)
jmp
xchg
and
loope
mov
fiadd
sbb
xchg
outs
shr
xor
mov
pop
sahf
dec
iret
xchg
cmp
cmps
mov
outs
xor
inc
mov
fst
mov
dec
add
sub
(bad)
xchg
fs
ja
mov
mov
pop
fsubp
lock
es
xchg
outs
xchg
std
icebp
xchg
and
inc
and
imul
jl
xor
lahf
sar
hlt
or
xchg
mov
adc
mov
jecxz
ja
ins
inc
nop
push
or
out
pop
rcr
cmc
mov
rcl
cmp
mov
xchg
mov
xchg
das
out
fcomp
inc
mov
mov
mov
sbb
adc
dec
cmp
mov
push
push
mov
in
loope
sahf
stos
cdq
push
stos
movs
adc
xchg
aam
or
pusha
inc
mov
mov
movs
xchg
push
xchg
ficomp
add
sub
jp
lods
call
enter
push
adc
xchg
mov
test
sbb
push
add
cmps
mov
call
xchg
add
cmp
int
inc
adc
push
pop
(bad)
loop
retf
xchg
inc
dec
cmp
xchg
add
mov
xchg
stos
mov
and
mov
pavgw
mov
xchg
and
(bad)
mov
jecxz
aam
sbb
hlt
mov
pop
jae
call
dec
mov
mov
imul
adc
xor
xor
fnstsw
cli
adc
pop
(bad)
mov
add
hlt
cmps
push
xchg
and
or
in
ins
push
fwait
pop
cmp
or
xchg
sub
jl
sub
xchg
and
outs
iret
fidiv
xchg
xor
adc
jle
mov
cmp
xor
gs
xchg
ins
sbb
xchg
in
inc
lock
inc
push
cli
imul
xor
pop
sahf
dec
cmc
je
or
inc
cmps
xor
and
lea
push
and
cmps
xor
or
xchg
jmp
jbe
lea
jge
(bad)
push
mov
jp
enter
or
hlt
hlt
lock
xchg
sahf
out
xchg
mov
sbb
sbb
xchg
cmp
dec
xchg
cmp
xchg
cmp
jns
loope
fst
pop
cmp
ret
mov
(bad)
outs
xchg
pop
jns
iret
dec
and
inc
mov
cmp
adc
mov
add
xchg
lock
test
cmp
adc
xchg
add
fs
xchg
mov
jecxz
pop
mov
xor
call
movaps
pop
push
mov
daa
xchg
dec
sbb
inc
adc
xchg
sub
das
mov
cmps
pop
and
xor
test
or
aam
xlat
popf
mov
fistp
mov
push
rcr
add
mul
sbb
adc
sahf
add
mov
push
scas
test
iret
push
sub
jne
scas
aam
ins
xchg
mov
into
cld
fcom
and
jnp
sub
xchg
xchg
mov
xchg
es
call
mov
lea
fiadd
dec
adc
adc
xchg
(bad)
push
mov
mov
je
sub
push
xchg
mov
std
xchg
sub
shl
fdiv
cwde
iret
std
sbb
jns
(bad)
push
jo
fs
ja
mov
out
jbe
(bad)
aaa
pop
xchg
icebp
mov
sbb
xchg
mov
cmp
pusha
retf
cdq
pushf
push
aas
gs
mov
pusha
and
fst
psubb
cmps
lea
in
in
cmc
mov
inc
xchg
xchg
out
sbb
mov
je
loopne
cmps
mov
add
fild
ja
xchg
xor
mov
fdivr
mov
cdq
mov
and
xchg
pushf
movs
sahf
fisttp
not
es
xor
push
mov
cmps
jae
out
call
test
mov
dec
test
push
pop
push
aas
in
mov
test
call
xchg
pop
mov
jno
ds
nop
sub
mov
inc
push
mov
push
push
stc
mov
jae
mov
inc
adc
xchg
xchg
dec
adc
fistp
and
(bad)
cmp
pop
xchg
in
mov
loope
xchg
in
pop
mov
or
xchg
scas
(bad)
cli
inc
jmp
lahf
push
jp
and
bound
push
adc
fistp
retf
xchg
shl
mov
push
out
mov
fist
push
clc
aam
test
pop
xchg
sbb
mov
cmp
jp
stos
mov
sti
or
sbb
iret
jmp
xchg
loop
loopne
mov
push
adc
ds
push
xchg
dec
rcl
out
mov
add
mov
sbb
rcr
push
xchg
retf
adc
inc
loop
setns
cmps
in
mov
sbb
(bad)
les
arpl
add
push
xchg
inc
jp
sahf
ss
imul
sbb
mov
fwait
or
push
sub
push
fwait
pop
mov
cmps
and
adc
xchg
mov
repz
or
mov
jb
test
mov
sub
lock
daa
dec
ror
test
fistp
int3
in
sbb
lods
dec
pop
adc
ret
xchg
loopne
icebp
mov
xchg
imul
std
ret
stos
imul
mov
sub
ficom
mov
mov
xor
je
std
xchg
repz
and
addr16
xchg
loop
aad
shl
int3
cdq
mov
push
jmp
sbb
gs
repz
aaa
xlat
xchg
addr16
jmp
(bad)
lods
aam
dec
xor
scas
dec
adc
mov
loop
xor
shl
mov
hlt
fs
ja
test
mov
add
lock
ret
xchg
jb
cdq
stos
mov
jl
(bad)
xchg
dec
imul
adc
(bad)
sbb
jle
xchg
inc
(bad)
outs
fsub
cld
sbb
inc
cmp
std
jle
aas
jns
loop
and
xchg
sub
xchg
jle
fmul
std
xchg
mov
mov
mov
bound
sub
push
sub
jmp
pop
push
inc
dec
data16
in
(bad)
in
sbb
jmp
push
je
pop
pop
push
cmc
call
push
xchg
jae
(bad)
cmp
cmp
cmp
sti
or
xchg
aam
mov
test
call
sbb
pusha
xchg
push
or
cmp
jo
das
xchg
fisttp
and
mov
test
(bad)
xchg
mov
(bad)
adc
adc
pop
jmp
scas
retf
sbb
jle
fs
fist
xchg
lock
xlat
xchg
dec
pop
inc
xchg
sub
inc
fs
jecxz
xor
in
shl
in
ret
or
sub
xchg
rol
mov
repnz
sti
pop
add
xchg
addr16
loope
xor
and
and
mov
ss
xchg
(bad)
sub
out
or
push
out
mov
ds
aam
and
cmp
sub
sbb
int
xchg
xlat
jmp
cmp
(bad)
lahf
xchg
scas
add
jne
sub
bound
pop
xchg
aam
outs
mov
mov
sbb
cmp
movs
xchg
xor
cmp
popf
dec
push
pop
xor
cld
in
in
inc
cmp
pop
dec
xchg
jne
jp
xchg
std
imul
add
mov
xchg
mov
pop
outs
or
in
test
adc
or
movs
shr
xchg
fld
test
fcomp
jl
adc
pushf
fwait
mov
(bad)
jmp
in
sbb
cwde
mov
jae
int
xchg
dec
aad
sbb
xchg
mov
xor
cmp
or
mov
cs
mov
xchg
ret
(bad)
xchg
int3
in
clc
scas
stos
xchg
(bad)
out
dec
inc
aas
xchg
xchg
fisttp
push
rcl
pop
jle
mov
xchg
inc
in
data16
mov
cmc
push
mov
dec
xchg
js
mov
sbb
xchg
pushf
ret
adc
fs
inc
call
sub
movs
xchg
cmp
add
rcl
lods
hlt
fcmovbe
push
xchg
popa
cmps
sub
and
je
sbb
pop
into
push
xchg
cmp
xchg
push
enter
cmc
mov
ficom
nop
std
outs
xchg
call
les
xor
xchg
xor
fbstp
xchg
cwde
das
ror
push
call
xlat
xchg
dec
(bad)
push
sub
and
adc
xchg
add
adc
push
test
dec
rcl
pop
aas
lods
aam
lods
pop
pop
mov
mov
mov
adc
or
inc
jo
and
pop
popf
loopne
mov
retf
int
and
xchg
push
movs
jae
stc
push
sub
aam
inc
mov
std
lock
(bad)
dec
repz
fwait
sub
ror
stc
les
retf
scas
adc
xchg
fist
xchg
cmp
xor
mov
dec
xor
scas
jo
cld
test
mov
inc
sbb
xchg
cmp
hlt
idiv
xchg
or
retf
jmp
fcom
jmp
fcomp
pop
loop
mov
icebp
sbb
retf
push
neg
(bad)
loope
mov
arpl
dec
rcl
xchg
jecxz
mov
sbb
xor
ins
gs
(bad)
push
jno
cmps
jae
adc
xchg
loopne
lds
fwait
jbe
out
xor
xchg
adc
loopne
xchg
xchg
dec
outs
or
movs
pop
es
pop
hlt
jo
(bad)
sbb
mov
mov
mov
xlat
fist
clc
pop
jns
jnp
movs
jecxz
push
popf
sahf
xchg
or
popa
jle
sub
stos
jecxz
jmp
cmp
pop
inc
jmp
movs
xchg
cmp
xor
mov
mov
pop
int3
jb
fistp
xor
es
dec
xchg
(bad)
mov
stc
xchg
ror
call
sbb
xor
jl
sub
xchg
or
jnp
xchg
inc
ret
arpl
test
(bad)
xchg
xlat
fild
not
xor
(bad)
cdq
dec
jmp
cmp
callw
add
push
loopne
sbb
sub
aad
das
xchg
inc
cmc
inc
push
jp
test
xchg
mov
pop
test
(bad)
jle
or
mov
mov
jbe
xchg
push
adc
cmp
pop
xchg
je
mov
rcl
imul
lahf
push
dec
xchg
lds
clc
pushf
xchg
in
aaa
ja
(bad)
sbb
xchg
lods
jge
mov
mov
and
mov
daa
fwait
in
xchg
aad
mov
ins
xchg
dec
push
out
pop
xchg
mov
sbb
sbb
arpl
lahf
adc
or
outs
xchg
scas
mov
and
mov
gs
and
mov
pop
xchg
adc
or
in
xchg
outs
leave
cmps
cdq
in
in
sbb
lahf
sub
inc
add
addr16
dec
lock
push
xchg
jb
ss
adc
call
pop
push
inc
xchg
mov
push
jl
push
(bad)
std
sahf
cmps
stc
aam
push
arpl
scas
ror
retf
sbb
or
(bad)
or
xchg
fidivr
test
mov
inc
ss
xor
xchg
fwait
and
cmps
ins
fld
mov
out
add
rcl
xchg
and
inc
hlt
or
aad
enter
rcl
loop
ja
mov
and
paddsb
push
repnz
adc
gs
push
adc
add
xor
hlt
int3
add
sti
push
lea
adc
mov
cdq
cli
(bad)
iret
mov
scas
xchg
and
clc
inc
cmp
popa
adc
bound
xchg
mov
arpl
xor
inc
adc
and
mov
xchg
xchg
outs
push
in
jns
pop
ficom
out
arpl
mov
and
xchg
and
jle
push
cs
and
scas
pop
or
jmp
je
je
ror
or
sub
xchg
cli
mov
clc
arpl
out
fist
jbe
mov
stc
cs
or
mov
test
push
add
shr
sbb
adc
mov
mov
js
fs
jae
jmp
(bad)
push
push
add
je
inc
popf
add
xchg
adc
rcr
setnp
push
adc
push
es
and
mov
xchg
mov
xchg
push
popf
xor
add
jnp
std
xchg
in
into
xor
test
mov
fsubr
or
add
xchg
iret
arpl
into
mov
scas
mov
cmp
std
es
sti
jle
add
xchg
xor
clc
xchg
or
xor
cmps
stos
in
inc
lods
xchg
mov
push
xor
hlt
psubusb
call
je
mov
xchg
pop
push
cli
pop
pop
dec
imul
push
mov
mov
mov
xchg
adc
dec
push
pop
fst
pop
pop
cdq
repnz
outs
aam
sar
adc
xchg
sbb
inc
fist
push
pop
ret
(bad)
sbb
in
arpl
gs
ss
scas
dec
mov
xor
pop
push
in
push
loop
dec
ds
sti
loopne
mov
fild
in
xchg
fxch
sbb
outs
aaa
dec
adc
mov
je
cmp
jo
rol
and
aas
cmp
and
in
mov
ins
adc
and
xchg
push
stc
and
rol
cwde
shr
ins
scas
in
adc
xchg
mov
jle
xor
cmp
adc
fidiv
xlat
popf
mov
add
pusha
not
xlat
ja
mov
lods
add
and
inc
and
sub
xchg
mov
add
pop
into
(bad)
fcom
mov
xchg
xchg
popa
scas
imul
inc
jnp
xchg
pop
rcr
cmp
rol
xchg
add
fdivr
mov
jno
pop
(bad)
(bad)
test
mov
ja
xchg
in
fidivr
or
stos
pusha
inc
mov
pop
mov
add
fcom
pop
push
or
push
mov
mov
or
cmp
sbb
or
xchg
fiadd
ret
mov
mov
mov
mov
dec
in
les
inc
addr16
mov
movs
sub
xchg
mov
and
xor
mov
lahf
jo
push
ret
fmul
xchg
dec
aam
rcr
cmps
push
fs
jg
add
xchg
retf
adc
pop
xchg
cli
sub
and
xchg
mov
ja
mov
mov
aas
mov
mov
fiadd
ror
push
jb
xchg
dec
push
gs
inc
mov
dec
push
cmps
loop
rcl
or
dec
int3
push
iret
cmp
xor
and
fadd
mov
sub
sbb
mov
xchg
dec
clc
mov
cwde
cdq
out
dec
in
repz
out
pop
xchg
push
pop
inc
jge
xor
ret
aaa
lock
enter
fmul
mov
cwde
push
test
xor
mov
pusha
je
clc
pop
sbb
jp
xor
int
mov
add
xchg
push
lock
cmp
mov
or
sar
or
in
fiadd
xchg
mov
push
adc
mov
test
xchg
inc
test
cs
out
out
shl
and
xchg
xchg
mov
(bad)
mov
xchg
add
lock
iret
and
adc
adc
(bad)
(bad)
cwde
mov
inc
pop
mov
mov
out
pop
icebp
jmp
push
sbb
cld
mov
mov
xchg
push
(bad)
outs
fild
sub
sbb
pop
call
repnz
xchg
push
or
out
fisubr
jb
int3
aad
out
mov
cwde
stos
repz
ret
adc
cmp
jge
mov
push
cs
dec
(bad)
cld
mov
leave
sub
sahf
xchg
nop
pop
pop
cdq
jnp
jl
addr16
xor
sub
mov
stc
sbb
ror
xchg
inc
mov
xlat
js
and
mov
xor
mov
and
fwait
call
js
sbb
sub
jge
clc
xchg
sbb
fcmovnbe
test
loop
scas
adc
sub
jne
lods
or
xchg
pop
in
mov
xchg
push
(bad)
jmp
or
xchg
and
mov
xchg
pop
fcomp
retf
jp
mov
mov
push
test
jbe
xchg
dec
sub
or
stc
sub
or
test
int
out
add
or
nop
mov
xchg
xchg
icebp
jmp
xchg
fild
cld
cmp
mov
ja
or
pusha
jg
mov
cmp
shr
xchg
and
repz
rcr
stc
gs
inc
xchg
adc
ins
cld
and
xchg
test
addr16
inc
mov
and
xchg
and
push
adc
aaa
inc
ins
adc
cmp
and
xchg
dec
push
or
or
stos
movs
jns
pusha
into
pushf
xchg
or
lock
gs
xchg
pop
add
retf
loop
mov
rcl
shl
xchg
sbb
jns
cmp
mov
or
(bad)
gs
mov
int
les
sub
test
mov
mov
and
xchg
dec
xor
or
aas
pop
or
xchg
mov
fwait
xchg
ins
leave
in
mov
rcl
addr16
shl
and
lods
inc
mov
xchg
mov
cmps
ret
outs
xchg
(bad)
inc
call
inc
xchg
frstor
cmp
add
iret
sbb
jbe
or
push
sar
push
je
das
or
mov
mov
inc
aad
ror
daa
hlt
xchg
and
sbb
jae
mov
cmp
scas
sbb
xor
xchg
call
test
repz
mov
ret
repnz
fwait
icebp
dec
fs
mov
mov
pop
movs
cmp
sub
xchg
xor
pop
sub
cli
mov
xor
out
les
sbb
loope
mov
lock
mov
jl
pop
call
imul
mov
xor
cmp
nop
xchg
dec
aad
cmp
push
xchg
fwait
js
xchg
mov
ss
push
fldlg2
xchg
mov
cmp
sub
push
jle
jp
pop
xchg
(bad)
cld
fld
xchg
rcr
sub
lock
adc
inc
sahf
xchg
out
jae
add
fldl2e
pop
xchg
and
cdq
fadd
push
inc
xchg
jg
frstor
lock
mov
xchg
xlat
shld
xor
nop
mov
push
push
push
and
xchg
add
inc
scas
dec
js
mov
hlt
push
in
enter
sub
in
inc
ins
repnz
rcl
or
pop
hlt
mov
push
mov
bound
lock
shl
inc
mov
shl
jg
mov
sbb
jecxz
xchg
mov
mov
pop
aad
add
test
and
and
fisub
lahf
xchg
push
inc
inc
sbb
push
xchg
lods
test
fwait
cdq
inc
leave
cs
fwait
dec
mov
cmps
cmp
mov
fwait
push
inc
xorps
fcmovnu
aam
xchg
shr
cmp
mov
aam
test
test
fnstcw
push
inc
sbb
in
sahf
adc
icebp
push
ret
arpl
mov
je
dec
mov
sbb
jg
cld
pop
hlt
daa
pop
xor
(bad)
iret
(bad)
mov
xor
jg
sbb
aam
jo
out
ficomp
or
xchg
arpl
adc
sbb
repz
sbb
stc
cmp
xchg
jmp
test
frstor
icebp
addr16
mov
pop
lods
xchg
inc
cmp
enter
mov
sbb
adc
test
push
pop
out
mov
add
xchg
xor
test
aas
loope
and
in
lods
dec
xchg
ins
jne
and
xchg
ja
int3
xchg
jbe
and
push
idiv
jno
out
inc
pop
ds
push
push
imul
adc
sub
(bad)
int3
push
dec
push
mov
mov
sar
sbb
loop
mov
clc
dec
adc
scas
xor
xchg
adc
je
int
push
cmp
jmp
fwait
(bad)
fadd
add
in
xchg
rcr
xchg
bound
scas
jo
lods
sbb
rcl
icebp
iret
push
xchg
jno
xor
neg
sti
xchg
retfw
xchg
cmps
inc
mov
je
inc
xchg
pop
dec
into
movs
push
fwait
int3
jbe
stos
test
cld
call
inc
or
mov
xchg
sbb
push
or
fwait
lock
add
les
push
dec
mov
mov
push
or
cli
fist
or
mov
mov
adc
cld
push
xor
mov
xor
xchg
rol
pop
jle
jecxz
add
pop
in
test
cli
adc
mov
js
and
lds
mov
movs
xchg
xchg
out
sub
pushf
popa
jae
xor
stc
jne
gs
xor
pop
sar
pop
fdivr
xchg
icebp
lods
xadd
cwde
xchg
inc
xchg
outs
jno
push
mov
xchg
call
rcl
jge
(bad)
xor
xchg
inc
inc
test
mov
dec
fst
aam
fwait
ja
adc
shl
int3
outs
and
xor
imul
leave
xor
push
fs
enter
or
clc
jbe
sub
xchg
add
pusha
arpl
das
fwait
or
sbb
imul
fwait
dec
jne
add
cmp
daa
xor
mov
jge
inc
mov
repnz
jl
ds
bound
xchg
es
cld
jmp
fwait
inc
and
movs
aam
mov
xchg
in
push
leave
or
cs
inc
fst
lock
repz
jb
daa
inc
push
ja
mov
stos
(bad)
scas
and
pop
mov
xchg
sbb
jb
mov
jo
sbb
adc
pop
dec
stos
mov
xchg
pop
mov
cmp
ret
xchg
shl
shl
mov
xchg
sub
inc
xor
adc
pop
inc
mov
mov
int
fst
push
fmul
(bad)
fist
and
jne
sti
mov
repnz
out
xchg
sub
mov
pusha
imul
xchg
pop
pop
imul
or
sub
jmp
cmps
je
xchg
xchg
stos
mov
call
xchg
repz
rcl
outs
xor
xchg
jecxz
ja
add
(bad)
mov
pop
mov
ss
xlat
fwait
rol
call
add
cmp
xchg
xchg
fnsave
hlt
push
not
fcom
adc
push
xchg
into
push
cmp
bound
jb
or
iret
xchg
hlt
mov
and
movs
std
ja
push
sub
les
int3
(bad)
xchg
or
jg
push
adc
ds
sub
in
cmps
jo
fnstcw
add
sbb
and
arpl
jae
cmp
fidiv
adc
in
(bad)
jno
lods
xchg
repz
int
push
mov
xchg
pop
pop
xor
sub
pop
inc
or
push
std
inc
cli
and
xchg
push
inc
shr
cmps
inc
iret
adc
xor
xchg
sub
outs
dec
ret
bound
xchg
xor
call
dec
cmp
imul
push
mov
in
xchg
neg
stc
sub
push
dec
mov
cmps
xchg
or
popa
pop
add
xchg
push
in
(bad)
and
aaa
cmp
jl
aas
adc
jecxz
xchg
mov
jae
stos
add
int
(bad)
adc
xor
mov
test
xchg
mov
jne
fwait
or
lea
jg
and
loop
jl
pop
aaa
jns
lods
xchg
jge
scas
xchg
jno
out
cld
xchg
cdq
sub
jne
xor
mov
es
xchg
and
jmp
ror
pusha
inc
xchg
xchg
inc
add
rcl
movs
(bad)
dec
xchg
aas
mov
nop
mov
sar
xchg
jmp
cmps
sbb
rcr
mov
sar
stc
rcr
sub
mov
hlt
xchg
sub
lock
push
cli
(bad)
into
jo
scas
in
sti
xchg
leavew
popf
ror
lods
pop
add
test
or
mov
pop
iret
pop
out
add
mov
xor
test
mov
mov
xor
pop
test
es
call
mov
fwait
nop
cmps
cli
xchg
mov
sbb
aam
icebp
fidivr
mov
arpl
dec
je
loopne
fist
int3
cmps
fwait
lahf
push
sub
test
or
mov
fdivr
in
cdq
fild
xor
mov
push
jecxz
or
push
mov
pop
cmp
ret
sub
mov
xlat
lock
(bad)
rcr
pop
mov
adc
mov
adc
sar
adc
inc
nop
jmp
aas
xor
xor
dec
push
mov
xchg
dec
inc
in
jge
add
xchg
js
xchg
mov
mov
repnz
adc
loopne
cmps
add
fidiv
xchg
pop
rcr
xchg
pushf
movs
inc
sub
mov
mov
enter
xchg
xor
jg
sub
and
add
or
inc
ins
xchg
lds
push
test
or
sbb
leave
xchg
xlat
push
in
(bad)
jmp
mov
in
cmp
lods
sub
mov
add
test
outs
mov
rcl
test
mov
nop
adc
mov
ss
hlt
repz
aad
xchg
or
lods
inc
mov
and
mov
lahf
fidivr
call
xchg
xchg
inc
dec
mov
sbb
push
scas
mov
out
dec
lods
aad
fwait
xchg
pop
popf
cmp
mov
mov
dec
cmp
pop
push
ret
aaa
pop
(bad)
icebp
(bad)
xor
xor
stos
fdiv
jmp
mov
or
mov
mov
xchg
push
adc
sbb
and
cmc
sub
nop
xchg
push
lock
and
in
xchg
push
stos
cmp
xor
or
add
int
jmp
rcr
add
jmp
cmps
adc
xchg
sti
cs
inc
aas
fs
sub
mov
inc
cdq
sub
xchg
ret
idiv
jo
push
mov
xchg
outs
in
scas
push
scas
dec
adc
xchg
jecxz
(bad)
fdivr
xchg
add
ficomp
xor
cs
xchg
dec
neg
mov
cmp
xchg
cmps
add
fist
arpl
call
sbb
fidiv
fwait
int
cmc
mov
lods
push
aam
xor
mov
or
adc
cmc
mov
js
fistp
adc
es
sub
sbb
push
mov
push
mov
xchg
xchg
mov
jmp
fidiv
push
mov
rcl
lahf
mov
xchg
in
jmp
inc
xchg
ret
stos
test
daa
adc
add
ror
sbb
ror
cmps
push
loop
lahf
xchg
icebp
push
jb
xchg
pop
loope
inc
add
inc
dec
xchg
adc
mov
outs
push
xchg
repnz
xchg
jb
pop
and
(bad)
adc
sbb
xchg
mov
jge
cli
popf
mov
adc
pop
sete
mov
fwait
cmp
dec
sub
jl
push
or
popf
fld
xor
shl
mov
pop
shr
xor
xchg
adc
stc
cmp
mov
test
ins
shr
xchg
aad
mov
idiv
hlt
jle
sub
sbb
into
fcmovnb
xchg
xchg
popa
mov
adc
mov
inc
sbb
shr
out
push
pop
jnp
dec
in
and
loopne
(bad)
out
jb
adc
xchg
test
cmp
sbb
xchg
(bad)
call
mov
cmp
imul
mov
fisttp
pop
mov
xchg
and
dec
xchg
xchg
aaa
arpl
xchg
or
das
in
sete
ins
lahf
inc
and
(bad)
fnstcw
dec
cdq
test
cmp
push
aas
ins
outs
jmp
adc
add
mov
jno
and
aas
add
xchg
loop
cmp
in
pop
fist
add
mov
sti
xlat
jmp
cmp
xor
or
ds
push
xchg
out
and
into
ret
hlt
push
xchg
pop
xchg
lea
mov
xchg
popa
inc
mov
xchg
rol
dec
jp
xchg
mov
xchg
ins
in
ret
mov
xchg
or
adc
jp
sub
cmp
cld
icebp
xchg
aad
mov
dec
in
inc
mov
jg
xchg
mov
pop
neg
jae
jmp
lahf
xor
push
out
and
fadd
xchg
movs
dec
mov
xor
rcl
xchg
ins
mov
cmps
js
ja
dec
movs
sub
shr
scas
call
and
cdq
xchg
jbe
push
inc
shl
xchg
pop
arpl
lock
ins
mov
push
mov
addr16
push
scas
cwde
xchg
movs
icebp
mov
mov
outs
pushf
data16
fistp
jne
fisubr
xchg
push
(bad)
aam
cmp
xchg
jne
data16
sub
sbb
mov
xchg
adc
jns
lds
movs
cwde
and
or
mov
sbb
fidiv
push
lods
pop
pop
fsubr
(bad)
(bad)
xchg
test
jmp
mov
pop
and
xchg
pushf
fsub
icebp
xchg
dec
in
mov
mov
xchg
mov
or
mov
jb
mov
stos
jl
packssdw
cmp
jnp
fisub
xchg
push
or
pop
adc
enter
in
jb
xchg
cli
sub
loopne
xchg
adc
movs
(bad)
arpl
push
push
(bad)
sti
push
sub
sahf
inc
add
add
adc
cmp
sub
xchg
xchg
aaa
cmp
movs
pop
push
pop
out
iret
add
jge
mov
inc
fld
loop
xchg
xor
add
xchg
adc
sahf
daa
jns
xchg
je
test
mov
xchg
rcr
pop
xchg
mov
dec
movs
mov
out
cmps
in
or
inc
(bad)
jmp
mov
aaa
rol
or
xchg
dec
test
push
cmp
mov
sub
xor
adc
int3
lock
icebp
lods
cmp
in
ins
iret
ret
adc
push
or
fwait
icebp
jmp
pop
test
fisub
mov
add
pop
aas
repnz
dec
sub
pop
mov
mov
adc
mov
mov
push
mov
cmp
cdq
dec
adc
js
inc
div
iret
aas
in
xchg
scas
inc
jge
scas
lock
or
sbb
mov
(bad)
out
adc
fwait
mov
mov
mov
xchg
ficomp
and
xchg
cs
dec
or
sbb
out
jl
dec
and
push
(bad)
movs
adc
pop
scas
xchg
xchg
movs
xor
pop
nop
xchg
pop
shl
add
rcl
movs
inc
leave
push
imul
xchg
aam
scas
fcomp
mov
jae
dec
mov
rep
xor
test
add
xchg
mov
imul
mov
lock
test
xchg
cdq
int3
sbb
mov
xchg
in
mov
mov
adc
xchg
loop
rol
pop
xchg
xchg
sbb
in
dec
sbb
add
ror
ins
and
retf
hlt
add
out
adc
add
xchg
cmp
xchg
jno
into
pop
ret
dec
xchg
bound
xchg
out
push
shl
pushf
jg
mov
ret
xchg
pop
pop
les
mov
int
add
push
fs
mov
and
mov
mov
xchg
shr
xchg
pop
xchg
ins
bound
pop
xchg
imul
xchg
jmp
sub
retf
iret
add
popf
test
mov
add
jmp
into
sbb
je
iret
sub
or
sbb
loope
push
cmp
mov
cmp
inc
sbb
mov
fld
sbb
inc
xchg
xchg
and
js
stos
sub
arpl
fs
sbb
sub
lods
mov
push
dec
adc
mov
ficom
add
iret
sbb
sub
xchg
xchg
into
add
adc
xchg
and
daa
jne
xchg
adc
pusha
xor
adc
cmp
pop
push
mov
sbb
xchg
xlat
sub
in
and
jbe
mov
test
push
clc
inc
mov
mov
sub
sbb
scas
inc
xchg
jle
pushf
(bad)
jmp
(bad)
(bad)
jg
test
mov
hlt
jnp
jbe
jmp
dec
mov
into
xor
ret
mov
scas
es
jne
fwait
sbb
div
sub
mov
inc
jl
ja
mov
xchg
das
cmc
xchg
ret
test
std
mov
data16
sbb
iret
add
mov
ja
ss
pop
loope
xchg
xchg
push
dec
test
std
push
xchg
mov
add
loope
push
mov
(bad)
rol
cld
data16
mov
xchg
jmp
cmp
mov
xchg
and
lock
aaa
(bad)
jle
jnp
xchg
push
xchg
mov
mov
fnstsw
inc
mov
sbb
adc
ret
cmp
ds
or
xchg
xchg
lods
repz
cmp
cmp
clc
dec
sahf
jl
fwait
and
adc
sub
sbb
int
(bad)
cmps
add
add
in
adc
jnp
fcom
mov
lahf
add
xor
and
outs
or
xchg
scas
push
jns
push
idiv
xchg
fwait
adc
xchg
js
aas
jmp
mov
retf
ror
xchg
sbb
cmp
daa
stc
jp
jge
gs
ds
push
fiadd
adc
pop
js
or
xchg
and
mov
adc
sar
cmp
movs
les
fdivr
mov
mov
aam
shr
jle
leave
mul
pop
xchg
xchg
(bad)
mov
retf
inc
aas
add
imul
cwde
out
dec
jne
dec
and
stos
add
adc
xchg
fnstenv
retf
loop
and
std
sahf
outs
sete
xchg
pop
mov
and
sti
mov
dec
xchg
adc
add
mov
mov
xor
dec
xchg
adc
sti
pop
mov
mov
popa
xor
stos
lahf
ins
out
add
scas
mov
ret
div
js
xor
ror
adc
xor
jb
imul
retf
cmps
push
push
adc
xor
or
cmp
inc
mov
xchg
xor
iret
dec
(bad)
jmp
pop
ins
cmps
xchg
andps
push
aam
jbe
adc
fwait
(bad)
sub
fmul
mov
push
fcom
xchg
mov
mov
stos
xchg
lea
sub
pop
and
xchg
iret
xor
adc
dec
loope
push
addr16
int
pusha
aam
mov
push
xchg
dec
dec
sub
mov
pushf
mov
push
push
sar
or
xchg
adc
add
push
jl
xchg
xchg
jp
(bad)
push
test
pop
pusha
shl
sub
shl
mov
mov
call
adc
mov
test
std
pop
dec
stos
bound
jecxz
(bad)
sub
fst
or
xchg
movs
cdq
lds
lock
xchg
in
cmp
jmp
nop
push
mov
ins
push
cmp
xchg
(bad)
sbb
arpl
popa
lahf
xchg
int3
sub
adc
fstp
(bad)
xor
bound
xchg
into
loop
shl
outs
pop
xchg
and
cld
xchg
xchg
add
push
(bad)
lods
pop
xchg
and
rol
xchg
into
int
cld
push
shl
xchg
cmp
dec
movs
or
mov
push
je
push
retf
fist
das
cmp
repnz
sahf
jp
sbb
or
(bad)
loopne
ins
enterw
adc
xchg
pushf
or
xchg
push
xchg
lock
add
xchg
jecxz
out
inc
fiadd
cmp
je
adc
les
outs
cmps
mov
dec
xchg
aam
push
aam
jg
mov
test
and
pusha
jnp
xchg
mov
pop
(bad)
enter
push
stc
cmp
or
and
retf
fmul
xchg
add
mov
(bad)
xchg
aaa
test
movs
sbb
cmp
push
mov
push
dec
loopne
pop
mov
fdivr
pop
ins
(bad)
mov
jge
mov
jbe
test
mov
xchg
pop
add
inc
(bad)
call
mov
dec
out
inc
mov
sbb
mov
rol
loope
sub
inc
xchg
inc
dec
jnp
push
fs
or
pop
cwde
loope
(bad)
scas
sub
mov
lahf
(bad)
mov
inc
out
je
hlt
retf
xchg
xor
stc
jae
sub
jb
jmp
jnp
out
or
adc
xchg
jb
aam
xchg
out
xchg
inc
mov
and
or
xor
in
or
outs
xchg
int
imul
xchg
push
inc
hlt
ficom
sahf
aad
cmp
outs
cld
imul
call
enter
add
std
pop
pop
jp
add
push
mov
push
(bad)
test
hlt
push
xchg
push
sbb
out
mov
cdq
retf
cmp
xchg
and
mov
or
repz
jb
mov
xchg
inc
mov
dec
pop
dec
ins
movs
xchg
push
rol
test
push
ins
lds
pusha
pop
add
mov
fstp
push
push
aad
jle
or
ret
dec
mov
in
xchg
cld
mov
gs
xchg
jbe
xor
dec
dec
fsub
pop
jne
sub
cmp
loop
mov
daa
dec
scas
fstp
leave
xchg
jmp
(bad)
ja
sahf
test
mov
jns
mov
xchg
mov
mov
xchg
jp
push
dec
adc
iret
push
repnz
dec
sahf
hlt
enter
xchg
jb
(bad)
inc
inc
repz
mov
push
movs
adc
in
sahf
(bad)
call
sar
shr
inc
pusha
jbe
sbb
xchg
adc
nop/reserved
call
inc
mov
jmp
jbe
fcom
(bad)
iret
or
out
inc
add
ins
mov
xchg
mov
cli
inc
stos
shl
push
xchg
addr16
sar
stc
inc
fiadd
mov
bound
(bad)
xchg
lea
xlat
rcr
xor
xor
ss
rcl
mov
std
xchg
mov
sub
or
xor
jae
rcl
pop
test
mov
adc
int
jno
push
sti
xchg
dec
sub
add
mov
add
aam
xor
int3
pop
ss
retf
sbb
ficomp
xchg
repnz
in
mov
jmp
mov
dec
int
stos
addr16
sub
push
mov
adc
daa
xchg
fadd
outs
xchg
(bad)
jecxz
pop
movs
call
xor
dec
sbb
loope
mov
push
dec
cmps
jmp
es
mov
mov
mov
sub
js
ret
dec
xchg
mov
std
es
fwait
mov
fnstsw
xchg
call
pop
jbe
(bad)
jo
mov
jo
inc
mov
xchg
xor
fwait
inc
test
adc
xchg
lods
and
inc
sub
xchg
add
int3
xchg
test
xor
sbb
stos
jbe
jmp
or
and
iret
cwde
xchg
xchg
retf
dec
jle
mov
loop
(bad)
in
adc
adc
sti
push
les
test
fild
mov
lahf
inc
mov
mov
rol
hlt
cdq
shl
xchg
cmp
jns
fcom
int3
loope
mov
cmp
out
add
jne
ret
push
push
xchg
pop
ins
dec
jb
cmp
xchg
xchg
leave
sete
and
sahf
and
aad
adc
es
je
push
xchg
mov
cmps
mov
ror
adc
mov
add
stos
mov
cmps
xor
dec
sub
rcl
mov
inc
xchg
(bad)
fadd
mov
out
cmps
mov
mov
push
xchg
xchg
sbb
enter
xchg
jl
das
mov
hlt
add
push
mov
xchg
data16
xor
xchg
scas
adc
pop
xchg
pusha
dec
psrlw
cmp
sahf
push
rol
sbb
dec
push
neg
ds
mov
dec
in
adc
int3
shl
xor
iret
ins
test
xchg
xchg
sub
jbe
push
shl
lods
inc
div
mov
push
add
add
xor
loop
(bad)
xchg
mov
inc
mov
or
jmp
shl
popf
outs
mov
loop
mov
fst
aam
and
xchg
imul
xchg
dec
sub
push
cmpxchg
mov
xor
xchg
call
retf
jl
aad
jae
gs
xor
xchg
(bad)
adc
jmp
in
xchg
sbb
jl
mov
xor
mov
mov
dec
mov
adc
mov
mov
add
jge
cmp
(bad)
rcl
sti
mov
mov
retf
fistp
mov
inc
adc
test
push
(bad)
fidivr
fwait
xor
adc
xor
inc
xchg
xchg
jmp
or
lods
mov
and
fcmovu
xchg
jecxz
dec
xchg
cwde
xor
movs
jb
inc
pop
cs
ins
fwait
jmp
mov
data16
in
sub
mov
xchg
daa
mov
(bad)
jne
or
cmps
jno
neg
cmp
fcom
and
xor
ror
stos
xchg
arpl
jmp
inc
gs
sub
(bad)
xchg
imul
pop
sar
sti
xchg
into
cmp
pop
sub
inc
mov
mov
lods
outs
jecxz
or
or
push
ret
fwait
push
sbb
int3
movs
jecxz
cmp
mov
cmp
pushf
xchg
xor
xchg
push
or
jecxz
stc
mov
movs
in
dec
int
mov
xchg
test
lods
inc
in
dec
pop
addr16
xchg
lds
test
inc
cmp
xchg
jg
test
jmp
stos
mov
sub
fwait
adc
xchg
push
in
xchg
sbb
sti
push
clc
adc
mov
xchg
adc
jecxz
fst
arpl
mov
jnp
les
and
xchg
cli
out
or
sub
xlat
clc
fwait
addr16
out
xchg
xchg
mov
popf
xchg
cmp
adc
les
mov
jl
dec
das
cmp
xchg
adc
xchg
mov
xchg
daa
or
jl
fsubp
inc
mov
icebp
lods
das
mov
xchg
push
xchg
sub
mov
(bad)
pop
adc
and
mov
mov
xchg
add
dec
dec
(bad)
mov
stc
rcl
adc
push
(bad)
popf
xchg
retf
lods
add
jae
pusha
jge
mov
iret
fs
xchg
aam
movs
and
popf
push
xchg
mov
retf
into
sub
retf
in
and
rcr
je
cmp
jle
jne
xchg
xchg
repz
in
cmp
shl
mov
js
jg
xchg
retf
sub
std
xchg
lods
mov
mov
cld
add
xchg
repz
xchg
sti
(bad)
adc
je
lods
hlt
xchg
jg
mov
adc
push
outs
je
sub
sub
xchg
xor
adc
dec
xchg
cmp
pop
jne
dec
jno
xchg
jmp
cmp
mov
sbb
lods
sub
test
mov
mov
cmp
stos
cwde
test
data16
add
sbb
xchg
jb
popf
and
dec
xchg
push
push
jl
pop
push
std
into
adc
xchg
fsub
and
mov
jmp
mul
push
mov
mov
push
mov
mov
or
ret
mov
pop
xor
dec
outs
mov
lods
adc
sub
xchg
out
xor
xchg
pop
nop
xchg
xchg
mov
sti
mov
adc
aam
sbb
xchg
fs
in
pop
xor
mov
fadd
mov
ret
jne
ins
int
jnp
xchg
pop
fwait
cmc
movs
test
pop
fistp
rcl
cmps
dec
jae
ds
pop
pop
sbb
call
xchg
jae
movs
mov
test
test
mov
fbstp
loope
(bad)
aas
pop
jge
(bad)
lahf
inc
xchg
fdiv
jl
test
xchg
in
lea
daa
jge
pop
sub
pop
gs
sub
xchg
fldenv
pop
mov
xchg
mov
or
xchg
inc
mov
das
clc
popa
aaa
bound
pop
fcmovne
xchg
pusha
in
jne
inc
add
mov
push
pop
ja
mul
inc
int3
ins
and
dec
stos
adc
fwait
imul
pop
dec
fs
xchg
aam
mov
jmp
ins
cmp
sbb
mov
xchg
jg
jno
adc
cmp
pop
leave
mov
into
in
out
jle
sub
cs
adc
lods
outs
dec
dec
or
xchg
and
inc
test
mov
cmc
adc
cmps
jo
xchg
push
mov
test
jmp
pop
lahf
xor
fist
xchg
aas
into
inc
and
mov
std
leave
ins
aad
push
sub
xchg
pop
mov
mov
xchg
push
lock
icebp
jno
mov
xchg
cmp
pop
test
xor
aam
sub
cmps
out
addr16
jns
ins
pop
xchg
outs
lods
cwde
adc
punpckldq
test
jae
or
or
jmp
and
cdq
dec
test
stos
icebp
stc
sbb
push
push
mov
jmp
movs
xor
xchg
mov
pop
jle
xchg
xlat
outs
shl
mov
neg
xchg
(bad)
jl
mov
ins
js
dec
les
sub
cmp
ror
xchg
push
lock
or
push
enter
pop
mov
in
xchg
adc
sbb
adc
xchg
cmps
or
xlat
(bad)
stos
lahf
pop
call
xchg
fs
mov
add
bound
xchg
xor
test
cmp
mov
lahf
mov
dec
push
xchg
inc
or
or
(bad)
xor
sbb
and
cs
xchg
mov
push
ret
jmp
movs
test
xchg
cld
xchg
push
dec
pop
mov
xchg
mov
and
add
in
xchg
xor
shr
cwde
xchg
icebp
push
leave
(bad)
je
ror
ja
adc
ins
sub
mov
outs
sub
ins
shl
xchg
inc
sbb
jecxz
fcmovu
inc
mov
icebp
sbb
sar
and
adc
aaa
repz
xchg
mov
adc
mov
popf
test
lock
(bad)
(bad)
cdq
xchg
jno
sbb
mov
push
cld
xchg
adc
(bad)
call
xchg
adc
and
data16
xchg
shl
jbe
dec
lea
js
mov
into
sub
inc
dec
xchg
mov
je
fcom
fdiv
pop
pop
cli
xchg
shr
loop
mov
stos
imul
nop
push
fisttp
and
cli
iret
mov
stos
call
mov
push
cmp
out
ficom
ror
push
mov
xchg
leave
mov
xchg
repnz
add
mov
xchg
retf
pushf
cmps
or
and
mov
mov
xchg
ret
pop
cmp
inc
test
xchg
outs
ret
loop
xor
pop
addr16
in
sub
xchg
fild
aas
add
push
in
mov
adc
loopne
pop
cmp
test
bnd
retf
mov
sbb
xchg
leave
and
mov
adc
rcl
adc
retf
dec
pop
ins
loop
mov
cmp
f2xm1
in
rcl
leave
popa
dec
ret
cs
xchg
ror
inc
push
sbb
xchg
cli
cmp
xchg
cmp
jne
dec
pop
jnp
push
mov
xchg
sbb
mov
and
inc
add
adc
lds
add
lock
rcl
and
rcr
xchg
push
retf
lods
jge
dec
call
xchg
mov
or
or
xchg
mov
mov
rcl
in
jmp
xchg
sbb
adc
pop
xchg
(bad)
loopne
aas
bound
stos
jl
push
inc
sub
std
xchg
stc
cmps
fwait
retf
cmp
push
inc
repz
jge
ja
mov
sub
mov
daa
adc
in
jl
push
das
leave
xor
push
xchg
shl
std
loop
xchg
mov
dec
sub
add
and
test
pop
les
rcl
xchg
lods
sub
mov
mov
and
inc
xchg
jns
adc
icebp
pusha
jecxz
add
imul
ucomiss
adc
inc
xchg
inc
cmp
pop
dec
mov
xchg
sbb
push
and
ja
inc
adc
imul
ret
pushf
xchg
(bad)
pop
push
sahf
xchg
btc
fdiv
xchg
mov
iret
mov
ret
rcl
sub
xchg
in
mov
and
idiv
xchg
pop
push
mov
add
pop
mov
xchg
cmp
(bad)
xchg
mov
lods
shl
mov
aad
bound
xchg
ds
int
cmc
xchg
xchg
or
call
and
popf
imul
mov
out
out
jge
dec
iret
mov
cld
sub
ror
xchg
cmp
iret
shl
xor
out
(bad)
jg
movs
jge
xchg
mov
push
mov
in
aad
jne
inc
mul
dec
fs
xchg
cmp
sti
call
popf
and
test
xchg
das
dec
xchg
jp
sbb
ja
rol
xchg
ror
sub
mov
outs
and
scas
in
mov
mov
andps
es
xchg
mov
nop
pop
xchg
out
adc
mov
add
sub
out
lea
repnz
push
rcl
mov
push
xchg
and
arpl
and
push
adc
sar
pop
(bad)
xchg
or
sub
push
add
jbe
cmp
sub
push
(bad)
or
cli
lahf
retf
mov
push
or
mov
ss
xor
cld
xchg
or
and
div
fcmovne
mov
sbb
stc
mov
push
jl
iret
push
cmp
dec
sub
cmp
pop
mov
xchg
shr
(bad)
xlat
or
xchg
hlt
dec
int3
dec
ja
add
jb
adc
mov
xchg
ja
adc
jle
xor
ret
rol
out
mov
ins
test
or
test
ret
xchg
sti
xchg
mov
sub
ror
idiv
adc
sub
mov
leave
dec
nop
stos
(bad)
mov
cmc
cs
(bad)
in
mov
adc
mov
mov
jne
cmp
sub
mov
out
inc
retf
lock
xchg
enter
dec
mov
inc
xchg
mov
adc
in
jne
xchg
scas
shl
xor
add
cmps
pop
xor
xchg
test
loop
dec
xchg
jl
fwait
dec
dec
mov
jmp
out
in
pop
mov
xchg
lahf
cmp
or
ret
xchg
rcl
push
jge
daa
int
inc
adc
inc
mov
jnp
jl
and
mov
mov
je
push
or
in
mov
cmp
mov
rcl
push
test
push
cwde
fs
jmp
sub
mov
fdiv
or
mov
add
lahf
mov
jmp
das
mov
push
arpl
fs
ficom
ret
aaa
xor
mov
out
mov
mov
xor
lods
(bad)
movs
stos
or
mov
or
aam
lods
in
sub
cmps
adc
ins
data16
(bad)
setnp
and
ss
mov
or
adc
dec
aam
aaa
lods
xchg
push
pop
imul
xchg
mov
das
mov
jnp
xchg
dec
adc
inc
mov
inc
shl
push
aam
sub
ds
xchg
jno
(bad)
pushf
fistp
test
jbe
xchg
cmp
in
pop
out
enter
xlat
push
(bad)
push
ror
mov
and
inc
retf
sbb
or
add
(bad)
aam
(bad)
sbb
mov
mov
xchg
sbb
xor
loop
cmc
iret
adc
dec
fwait
mov
fsubp
aas
inc
and
bound
cdq
mov
retf
scas
mov
or
xchg
(bad)
stc
push
repnz
xchg
jmp
add
jmp
test
fwait
push
lods
rcr
je
in
scas
ret
iret
xchg
cmp
mov
jne
cdq
dec
add
adc
dec
inc
gs
adc
inc
or
pop
dec
add
mov
out
inc
loope
xchg
inc
int
add
ins
fwait
div
je
in
movs
and
mov
(bad)
andps
das
xchg
cmc
mov
sahf
or
or
xor
adc
add
movs
dec
gs
into
inc
nop
push
dec
pushf
jg
xchg
mov
fs
(bad)
les
movs
add
xor
in
mov
mov
mov
mov
sbb
mov
into
popa
int
test
arpl
jg
xchg
push
inc
fsubr
ror
sub
or
cdq
addr16
adc
mov
mov
mov
jmp
cmps
(bad)
hlt
xlat
mov
dec
arpl
mov
push
(bad)
lds
outs
push
inc
jp
inc
sub
xchg
xchg
or
fwait
lods
dec
mov
mov
jp
fwait
cmp
jo
addr16
mov
cmps
icebp
stos
cdq
or
je
xchg
pushf
dec
and
cmp
outs
jns
or
or
adc
js
sbb
cwde
and
pusha
xlat
(bad)
fs
shr
stc
leave
idiv
mov
(bad)
pushf
push
dec
mov
imul
movs
ss
ins
in
sub
mov
imul
mov
xchg
mov
je
icebp
mov
jg
loop
xchg
(bad)
sti
pusha
cmc
jge
nop
adc
sar
jo
in
pusha
mov
sahf
pop
and
stos
ret
pop
mov
xchg
mov
mov
mov
mov
outs
pop
cld
pop
xchg
and
fisub
jl
repnz
inc
sti
sub
push
int3
jbe
adc
shr
xchg
sahf
sub
sbb
xchg
outs
and
cs
stos
push
xchg
into
xchg
or
jb
in
js
cmp
ror
push
mov
push
imul
je
adc
or
sbb
jns
icebp
gs
lock
pop
enter
mov
sti
imul
iret
in
mov
sbb
aam
inc
dec
into
fs
mov
je
inc
rcr
jecxz
lea
lods
xchg
addr16
jb
scas
cli
aad
mov
jp
das
pop
xchg
ret
hlt
loope
or
xchg
cmc
xor
inc
cmp
fwait
push
dec
adc
in
in
js
int
fld
jo
push
leave
jb
scas
test
xchg
inc
push
aaa
test
pop
outs
jmp
pop
xchg
push
mov
(bad)
shr
xchg
jno
mov
push
and
movs
xchg
dec
arpl
cli
adc
xchg
jmp
(bad)
movs
lods
nop
pop
xchg
xchg
inc
inc
stc
retf
enter
daa
xor
jns
jbe
inc
jb
ret
push
sub
cmp
inc
arpl
pop
or
lahf
xchg
nop
xchg
pop
stos
pop
xchg
mov
sahf
fadd
mov
xchg
dec
bnd
xlat
inc
xor
int3
movs
mov
xchg
test
fwait
sbb
cmps
lea
test
push
test
outs
call
pop
fwait
ror
aam
test
xchg
ret
out
fld
in
call
xchg
mov
cmc
inc
das
xor
cmp
dec
push
jo
into
cmp
mov
(bad)
sahf
not
sbb
std
mov
xor
xchg
mov
cmp
push
mov
popa
movs
push
xchg
and
test
adc
pop
aam
and
pusha
push
push
xchg
iret
mov
nop
mov
inc
ficom
mov
pop
scas
aam
dec
dec
dec
adc
repnz
xchg
jae
push
xor
mov
xchg
inc
sub
pushf
push
sub
into
jge
xchg
adc
xchg
push
dec
scas
push
xchg
cmp
aad
pop
mov
fwait
out
in
aaa
movs
into
jne
adc
pop
xor
xchg
xchg
inc
dec
(bad)
call
xchg
cs
xchg
scas
enter
sub
lahf
xchg
fsubr
(bad)
mov
ins
lea
call
xchg
push
stc
xchg
pop
je
xchg
pushf
stos
push
loope
push
mov
fdivrp
mov
xor
stos
jnp
out
lods
xor
sbb
and
mov
inc
into
sbb
xchg
call
jge
outs
mov
int3
push
loop
xor
push
arpl
pop
xchg
out
(bad)
(bad)
in
ds
jecxz
xor
loope
jg
add
xchg
xchg
f2xm1
xor
cli
jbe
arpl
dec
jmp
iret
xchg
adc
in
dec
xchg
setg
mov
repnz
push
xchg
popa
lock
mov
sbb
or
mov
pushf
cmps
cs
sub
les
jae
mov
cmp
add
cli
lods
test
adc
and
repz
aad
mov
pop
lea
xor
adc
int
mov
xor
js
adc
xchg
add
xchg
idiv
xchg
add
cs
jne
js
nop
shl
xor
xchg
dec
or
stos
fsqrt
jne
mov
xchg
xchg
in
cmc
int
xchg
retf
jmp
es
rcr
inc
mov
ja
lock
xchg
in
mov
mov
mov
imul
in
mov
xchg
sub
ficomp
push
mov
bound
jo
cli
xchg
ins
pandn
add
je
push
push
xchg
les
xor
int3
xor
iret
stos
mov
lock
fsubr
pop
push
mov
dec
inc
adc
cmp
push
jno
repnz
add
lock
out
into
inc
and
inc
jge
stos
sub
xchg
mov
adc
popf
xchg
pushf
jmp
cmp
or
clc
cmp
xchg
cld
add
test
loopne
mov
xlat
or
adc
lods
mov
outs
mov
xor
xchg
ror
(bad)
rol
call
mov
jne
int3
jl
xchg
rol
mov
or
xchg
(bad)
mov
adc
xchg
inc
mov
xchg
imul
mov
pop
cld
repz
arpl
das
sub
mov
xchg
xchg
push
retf
dec
lods
and
mov
cli
push
push
jns
pusha
sub
push
xchg
mov
(bad)
sub
inc
or
push
lods
xchg
out
cwde
clc
fcomp
stos
loop
fimul
xchg
sbb
nop
xchg
hlt
ret
jp
xchg
ficomp
xor
xchg
jge
push
inc
arpl
je
xchg
clc
imul
loop
faddp
into
xchg
dec
fisubr
stc
xchg
dec
movs
inc
inc
mov
adc
pop
(bad)
and
mov
xor
xchg
mov
xchg
retf
sbb
outs
mov
mov
cmp
psubusw
push
fbld
test
or
push
add
ret
push
xchg
aam
xchg
dec
mov
pop
xchg
xchg
mov
cmps
pop
shr
repnz
add
pop
loope
mov
mov
xor
pusha
mov
cdq
call
adc
cmps
xor
sbb
mov
nop
mov
pop
lock
mov
push
imul
and
in
pop
cmp
stc
loope
out
inc
xchg
push
(bad)
fidivr
cdq
cmp
mov
arpl
sbb
or
jg
int
jne
ds
(bad)
dec
push
inc
cld
xchg
into
or
or
outs
xor
jae
pop
daa
dec
xchg
enter
stc
jg
les
rcl
and
or
push
adc
nop
imul
aaa
sbb
das
adc
daa
in
add
cmp
jo
push
ins
adc
xchg
xor
in
inc
xchg
in
push
jmp
and
add
out
and
push
xchg
fsub
sbb
xchg
int3
lods
or
gs
daa
adc
test
sub
scas
shl
ja
fidiv
cmps
popa
xchg
add
cwde
fld
call
push
xchg
mov
mov
mov
pushf
jp
sub
test
xor
pop
xchg
addr16
and
fisubr
and
mov
cmovg
inc
xchg
xchg
push
jnp
cwde
rol
mov
das
outs
dec
xacquire
cmp
push
repz
or
xchg
pop
xchg
js
or
ins
loopne
icebp
cdq
inc
mov
scas
outs
mov
and
aad
push
fwait
call
loop
sahf
add
cld
push
ins
xlat
mov
push
xchg
xchg
shl
(bad)
int
jo
js
cmp
popa
pop
mov
data16
ins
push
imul
jge
inc
and
mov
mov
dec
iret
jb
std
js
sti
movs
mov
(bad)
jg
dec
arpl
jl
shl
aam
fistp
in
(bad)
mov
adc
xchg
nop
jb
stc
sub
idiv
rcl
jp
push
ret
in
xchg
out
xchg
mov
sbb
xchg
movs
sub
inc
std
or
xchg
stos
aas
cmps
(bad)
sub
push
mov
je
add
in
xchg
push
pop
mov
not
fimul
xchg
(bad)
stc
push
js
lea
pusha
shr
mov
pop
inc
xchg
aas
leave
js
mov
adc
lds
sub
pop
or
pop
sti
les
push
cdq
xchg
inc
loop
(bad)
jecxz
imul
loope
cwde
dec
jno
(bad)
cld
adc
push
or
ins
inc
mov
es
adc
jg
mov
and
in
lock
mov
inc
sbb
sub
xchg
das
sub
mov
fadd
mov
xchg
mov
adc
xchg
js
mov
push
gs
data16
sub
jnp
xlat
or
in
popf
sub
jge
mov
fnsave
jl
(bad)
pop
gs
jae
push
in
add
js
ins
xchg
lods
sti
fbstp
xchg
sub
cmp
test
pushf
fst
cmp
jmp
mov
mov
xchg
dec
xchg
(bad)
sub
push
fisub
mov
pop
xor
rol
xchg
xor
push
sahf
mov
dec
cmp
jmp
out
rol
mov
cmps
fcom
cs
xchg
pop
mov
sub
dec
xor
push
dec
pushf
lds
mov
aad
aam
in
clc
jmp
cmp
loopne
or
cmp
mov
cs
das
mov
pop
or
mov
xor
inc
scas
outs
xchg
mov
or
mov
sbb
stos
cli
jmp
js
xchg
pop
std
xchg
push
dec
pop
cmp
inc
mov
into
mov
stos
sub
jae
cmp
cmps
xchg
pop
mov
mov
retw
fwait
jb
and
std
and
xchg
addr16
xor
inc
fs
sti
sar
inc
adc
not
adc
pop
xchg
stos
mov
push
inc
lods
fcompp
xchg
cwde
or
sbb
aam
movs
movs
fwait
lods
xor
sbb
mov
lea
mov
add
add
fld
adc
jp
add
call
xchg
dec
xlat
mov
rcr
pop
hlt
sbb
sub
enter
call
push
pop
push
adc
loop
in
cmps
jge
cmc
js
iret
xchg
pop
cmp
mov
cmp
xchg
cmps
pusha
popf
or
dec
aas
movs
xchg
xchg
pop
and
daa
inc
lods
push
mov
mov
jno
fldcw
mov
xchg
shl
push
sahf
repz
mov
cmps
add
push
cwde
push
sbb
push
lods
addr16
xchg
mov
jl
je
xchg
test
pop
push
arpl
pusha
nop
test
sbb
test
xor
outs
jl
or
pop
inc
pop
or
xchg
xchg
fwait
mov
sub
adc
xchg
ror
outs
xchg
add
cmp
lock
cmp
mov
xchg
movs
jg
je
fs
xchg
xchg
in
icebp
div
fcom
or
add
in
iretw
xchg
pop
sbb
pop
mov
jp
inc
adc
ja
jno
(bad)
xor
cld
push
xchg
push
xchg
sti
inc
stc
dec
aad
dec
lods
adc
pop
adc
xchg
imul
xor
jb
mov
rcl
mov
fwait
jbe
fadd
fist
push
pop
mov
push
xchg
cmp
loopne
mov
lahf
sbb
jo
xchg
popf
fwait
xchg
mov
adc
repz
in
dec
cmp
test
jo
lock
xchg
icebp
jg
mov
mov
jbe
stc
fidivr
jge
pop
xchg
aam
push
adc
jmp
icebp
inc
imul
mov
cmp
loop
sar
push
adc
sbb
stos
pop
pop
pop
hlt
cmp
xor
add
arpl
je
outs
xchg
xchg
pop
jl
mov
sar
jmp
pop
stos
xchg
arpl
and
mov
xor
fcmovb
sbb
pop
lods
rcl
xchg
jae
xchg
sar
aaa
aas
jbe
xchg
jb
or
xchg
fwait
xchg
jecxz
lahf
cmc
xor
xchg
dec
xor
aam
aad
jb
stos
cwde
push
and
addr16
aam
ins
and
in
data16
outs
arpl
xchg
xor
xchg
pop
stc
xchg
into
lds
add
fwait
xchg
mov
or
mov
hlt
mov
xchg
jo
repnz
sbb
mov
mov
xlat
dec
sbb
pop
xchg
shl
and
sub
rcl
jecxz
lock
mov
pop
jnp
mov
les
jns
retf
loopne
lds
ror
frndint
jno
or
xchg
into
push
ror
push
lea
jp
hlt
mov
lds
leave
aam
jge
xchg
movs
es
mov
add
fadd
cdq
jae
gs
bound
cdq
scas
xchg
pop
sub
stos
jo
inc
loopne
pushf
repnz
xchg
shl
pop
sbb
push
inc
out
mov
arpl
cmps
inc
mov
or
push
pop
mov
movs
add
jg
fidiv
add
mov
pop
mov
xchg
je
mov
add
popa
jecxz
stc
stos
xor
xchg
loop
setb
adc
mov
imul
pop
mov
pusha
xchg
add
pop
in
jp
xchg
out
aam
mov
mov
pop
daa
mov
movs
pop
out
mov
sub
push
xor
cdq
dec
cmps
push
xchg
sbb
adc
xor
push
sub
stos
lods
div
xor
add
mov
jae
xchg
fisubr
bound
call
mov
cmp
xchg
into
inc
or
xchg
inc
(bad)
push
mov
dec
sbb
xchg
mov
sub
push
rcl
pop
pusha
xchg
test
and
push
push
xchg
ins
in
jecxz
jbe
add
xchg
mov
ja
jb
xor
dec
hlt
jne
mov
mov
cmc
lahf
dec
outs
sub
xchg
cmp
cmp
sub
mov
test
fucomi
xor
inc
sbb
test
adc
jge
lock
push
sub
outs
sbb
or
push
sbb
xor
nop
xchg
jmp
or
dec
xchg
and
nop
adc
mov
or
sub
and
adc
inc
movs
xchg
pop
cld
shl
push
lea
jl
and
int3
ins
and
push
add
mov
adc
movs
rcl
pop
cmp
js
dec
xchg
outs
and
sub
(bad)
int
xchg
aam
(bad)
ins
pop
xchg
leave
stos
mov
jnp
ror
push
pop
outs
nop
fxch
xchg
xor
or
xchg
adc
xchg
sub
mov
out
dec
popf
mov
je
xchg
sub
ret
leave
pop
dec
scas
xchg
mov
data16
cmp
stos
mov
xchg
mov
fidiv
lea
pop
adc
sub
push
mov
cmps
jg
xchg
imul
inc
xchg
xchg
sub
out
xor
pusha
xchg
jl
xor
add
mov
dec
test
pusha
sbb
push
inc
adc
xchg
cmp
add
pop
lgs
xchg
adc
(bad)
enter
lods
mov
mov
pop
jbe
push
cli
je
stos
xchg
call
cmp
or
pop
and
xor
pop
xchg
push
out
popf
mov
mov
jecxz
rcl
xchg
call
cmp
push
mov
pop
fild
mov
and
daa
sahf
mov
fwait
pop
push
mov
ret
pop
lods
sbb
xchg
inc
cmc
movs
sub
mov
out
ins
pop
xchg
call
cmp
loop
xchg
sbb
(bad)
pop
mov
pop
cs
mov
int
(bad)
xchg
adc
sbb
xchg
dec
sub
neg
aad
xchg
cmp
daa
mov
xchg
and
call
outs
popf
loopne
retf
movs
hlt
cmps
dec
jae
les
jecxz
mov
fiadd
sbb
sub
int
out
sbb
jge
inc
stc
aad
lea
jecxz
stos
bound
xchg
cmps
push
in
cmp
xchg
inc
adc
js
push
cmp
adc
pusha
or
fldenv
dec
pop
push
inc
xchg
ss
mov
retf
mov
hlt
outs
out
out
xchg
ins
lea
push
jl
mov
xchg
xchg
push
call
mov
nop
popf
repz
sete
dec
mov
cwde
fwait
sub
sub
add
xchg
pop
sub
fwait
sbb
adc
adc
movs
xchg
xlat
jp
imul
mov
pop
mov
xor
mov
xchg
add
fimul
(bad)
xlat
xchg
and
cmps
cmp
and
xor
hlt
or
pop
sub
push
pop
mov
cdq
add
out
or
pop
call
xchg
mov
sub
je
lods
dec
int
in
cmp
xchg
ja
and
int
push
sbb
pop
(bad)
xchg
adc
and
mov
or
in
xchg
lea
adc
int
adc
jns
adc
push
enter
mov
repnz
jo
test
mov
dec
test
xor
in
jno
lahf
mov
mul
inc
sbb
lods
xchg
sub
xchg
pop
dec
and
int
aad
iret
xchg
xlat
adc
in
cs
dec
cwde
xchg
aas
outs
cli
sbb
arpl
clc
je
aam
ja
inc
lods
popa
dec
cmps
mov
pop
cld
mov
scas
call
js
dec
out
mov
mov
fisubr
inc
xchg
xchg
dec
sub
int3
clc
dec
xchg
test
pop
aad
xor
jo
push
mov
xchg
adc
cmp
sbb
xchg
imul
and
lods
dec
or
mov
xchg
push
cmps
xor
mov
(bad)
(bad)
xor
push
popf
adc
int
adc
je
sbb
push
rcr
cmp
xchg
mov
jne
and
popa
xchg
into
inc
push
sbb
mov
in
lock
add
xchg
adc
imul
scas
mov
adc
cmp
(bad)
mov
add
jnp
mov
out
das
stos
xchg
mov
bound
xchg
cmps
push
push
add
int
sbb
int
ror
mov
push
lea
adc
aaa
lock
mov
pop
cwde
fs
jg
xchg
leave
dec
push
lahf
and
dec
xlat
or
mov
mov
pushf
push
imul
pop
xchg
xor
push
jle
xlat
push
rcr
out
les
es
mov
dec
sbb
mov
inc
inc
jmp
rcr
retf
dec
xchg
xor
cld
mov
xchg
xchg
in
fwait
inc
cmp
inc
mov
cmp
(bad)
cdq
or
xor
add
lock
xchg
sbb
loope
adc
call
pusha
mov
xchg
inc
and
aas
or
jecxz
gs
loope
ficomp
jp
xchg
fldz
cmp
inc
xchg
in
adc
ds
jb
stc
xchg
dec
(bad)
push
mov
lea
xor
cmc
lods
jns
mov
sbb
hlt
jle
adc
xchg
icebp
sbb
outs
xchg
push
(bad)
sbb
xchg
inc
mov
imul
add
xchg
test
test
sbb
(bad)
je
repnz
retf
sub
rcl
or
jae
cmps
mov
ret
push
repnz
cmp
(bad)
xchg
lea
mov
mov
ror
xchg
imul
jnp
cmp
or
push
sub
rcl
test
dec
aam
(bad)
adc
pop
je
mov
inc
lock
out
add
outs
sbb
mov
enter
add
loope
add
sar
popa
cld
mov
sub
cwde
std
or
add
dec
outs
jle
mov
dec
xchg
sub
fwait
ja
xchg
gs
stc
popf
dec
loope
cmps
xchg
mov
pop
clc
aad
pushf
mov
xchg
hlt
ficom
xchg
pop
xchg
or
out
mov
test
std
xchg
xchg
loopne
xchg
sbb
hlt
fdivr
and
neg
dec
mov
xchg
std
sti
push
sub
(bad)
loope
mov
popa
dec
outs
inc
clc
mov
push
das
xchg
mov
xchg
xchg
xchg
adc
push
je
lock
xchg
js
popf
or
daa
popa
je
fnstenv
mov
pop
xchg
inc
test
call
movs
out
xchg
bound
not
xchg
xchg
xor
mov
push
inc
das
xchg
mov
ror
cmp
cs
(bad)
fmul
arpl
push
out
mov
out
xchg
dec
fcom
retf
test
xchg
mov
xchg
rep
ss
xchg
les
pop
sbb
push
mov
push
inc
jbe
nop
dec
dec
xchg
test
es
sbb
push
stc
cdq
cmp
jmp
xor
mov
jl
sub
rol
xchg
jg
ror
xor
push
mov
jmp
or
xchg
sbb
into
pop
push
cli
jle
xchg
js
in
pop
enter
icebp
xchg
inc
mov
or
xchg
jmp
xor
das
ja
sbb
mov
iret
mov
loopne
leave
xchg
test
xchg
mov
mov
inc
iret
por
xlat
cmps
into
ds
ds
mov
xchg
xchg
dec
sbb
pop
rol
or
and
fwait
cwde
jge
sbb
or
push
mov
or
add
aam
xor
fcmovnb
xchg
or
inc
mov
cli
adc
fbstp
push
dec
sub
xchg
xchg
aas
pop
jnp
or
jns
cmp
mov
ins
xor
int
xchg
sbb
xchg
outs
pop
cmps
sub
js
leave
in
sbb
xchg
stc
out
mov
scas
psrld
inc
xchg
pop
add
mov
cmp
gs
aad
xchg
push
lds
sbb
addr16
jecxz
aam
xchg
xor
(bad)
cmp
aaa
cwde
dec
adc
dec
pushf
outs
xchg
repz
and
cmp
pusha
test
push
ins
mov
hlt
rcl
sbb
mov
ja
and
dec
push
inc
fistp
mov
dec
mov
cli
nop
mov
(bad)
shr
and
call
test
xchg
stos
mov
sub
inc
xchg
out
pop
inc
jb
movs
(bad)
scas
mov
mov
mov
jae
stos
mov
hlt
xchg
xchg
outs
pop
jg
xchg
mov
cs
pusha
out
hlt
push
aam
int3
inc
pop
out
inc
xchg
fst
jo
ins
jb
in
xchg
das
addr16
inc
jne
popa
fidivr
xchg
sub
scas
xor
pop
ins
lods
pop
push
xchg
stos
push
jp
fwait
cmc
nop
push
pop
or
or
dec
pop
fwait
out
into
movs
ins
mov
sahf
xchg
imul
or
jne
cmp
test
add
xchg
inc
jo
ins
add
cmp
jns
call
or
shl
loopne
aaa
fs
loop
sbb
or
cwde
and
mov
je
scas
iret
xchg
popa
adc
js
dec
cmp
test
outs
loope
aam
imul
xchg
xchg
xor
cmp
xchg
xchg
les
xchg
popa
test
mov
xchg
popf
cmps
ss
ds
out
cld
xchg
mov
enter
leave
iret
mov
mov
sbb
mov
dec
jb
mov
add
jbe
adc
fwait
mov
aam
add
jmp
fld
pop
loop
xchg
and
aam
mov
xchg
jns
or
movs
into
les
mov
add
pop
sub
xchg
pop
rol
cld
jae
or
and
add
pop
fcom
jns
adc
sar
add
stos
xchg
and
xchg
or
icebp
pop
in
pop
aas
mov
aam
cmc
add
or
mov
adc
cmc
out
ins
ror
call
xchg
jne
jge
push
movs
js
add
xchg
out
dec
sub
push
xchg
sbb
pop
lahf
fs
fwait
pop
jo
rcl
cs
or
mul
shr
xchg
mov
sbb
test
pop
ds
mov
dec
adc
or
(bad)
and
mov
dec
pop
xchg
imul
cmps
pop
(bad)
push
outs
cmp
or
ror
cli
adc
sub
push
and
xchg
clc
push
pop
les
push
adc
lods
xchg
(bad)
test
pop
lock
ins
int3
pop
jp
rep
xchg
add
sbb
cmp
pop
scas
aam
lahf
mov
je
gs
fsubr
inc
mov
pop
jg
pushf
fwait
dec
push
pop
adc
add
mov
icebp
(bad)
int
cmps
mov
sub
pop
mov
cmp
call
cmc
dec
aas
adc
ja
jno
(bad)
mov
or
cmp
arpl
jmp
sti
pop
cmc
jmp
sbb
shl
scas
shl
outs
(bad)
pop
push
adc
into
inc
popa
loop
xchg
xchg
pop
idiv
stc
xlat
jecxz
jle
mov
jnp
call
int
cdq
mov
xor
scas
mov
sub
retf
leave
es
xchg
mov
stos
int
cld
imul
pmullw
push
(bad)
js
cmps
jl
xchg
pop
push
fmul
cmp
add
outs
jg
cmp
loop
and
xchg
retf
ret
adc
jne
mov
and
xchg
xchg
ss
jp
sub
xchg
inc
sti
add
scas
adc
xchg
inc
fxtract
gs
sub
movs
xchg
call
shr
sub
popf
xchg
dec
and
int3
sbb
mov
jmp
dec
mov
stos
xchg
adc
pop
dec
les
fwait
inc
hlt
push
outs
dec
mov
cmps
fidiv
jp
test
jge
cmp
shr
xor
imul
jnp
pop
test
jl
(bad)
mov
shl
pop
retf
ja
xchg
aas
lds
inc
xchg
pusha
fwait
jne
fstp
fs
les
stc
mov
or
fwait
cdq
loope
jmp
call
mov
je
icebp
pusha
out
inc
xchg
scas
sahf
es
sbb
jl
sub
mov
sub
cld
jnp
jp
out
rcl
ror
jno
adc
dec
inc
repnz
sub
mov
jo
ja
ret
(bad)
mov
inc
push
nop
adc
push
rcl
inc
jb
addr16
gs
pop
cmp
idiv
dec
xchg
vpslld
pop
adc
xchg
cmp
inc
mov
mov
fcomp
call
xchg
fcmovnbe
inc
test
adc
xchg
sbb
dec
mov
mov
clc
inc
shl
out
jl
iret
stc
jno
ret
nop
sbb
popf
into
arpl
pop
test
and
sbb
or
cmp
pop
call
xchg
je
jns
jge
jb
inc
pop
xchg
push
pop
je
xchg
loop
xchg
jnp
cmps
xor
or
xchg
repnz
adc
sbb
mov
xchg
or
stc
icebp
xchg
je
push
add
lea
aaa
jnp
fnstenv
mov
stc
pop
cdq
out
rcl
mov
fldenv
mov
xchg
ins
jmp
sub
xchg
xchg
cmc
outs
fisttp
sub
or
jmp
es
cmps
adc
imul
int
dec
int3
cwde
repz
aam
ret
xchg
js
xchg
mov
cdq
sub
cmp
ret
xchg
jp
js
cmp
jl
pop
mov
mov
xchg
cmp
inc
leave
hlt
mov
xchg
fdivr
sub
rol
sbb
push
out
test
pop
xchg
cmps
jns
in
cmp
add
mov
pop
stos
mov
xchg
mov
imul
jmp
out
cwde
popf
mov
sti
sub
aam
inc
fwait
test
and
cwde
xlat
ret
add
jae
fisubr
or
jo
xchg
shr
sbb
test
retf
xor
mov
adc
jecxz
inc
dec
xchg
mov
mov
xchg
rcr
loop
fdivr
xor
fsubr
cmp
rcr
test
leave
inc
push
add
xchg
adc
xor
shl
lea
and
xchg
gs
mov
adc
pop
in
mov
stos
ins
loope
mov
sub
mov
lahf
aam
das
(bad)
cmc
pop
push
xchg
or
daa
sbb
fwait
neg
push
mov
ret
(bad)
xchg
retf
fild
aam
xchg
jmp
sub
imul
push
sbb
adc
ret
mov
and
pop
mov
fdiv
or
or
xchg
and
ds
push
mov
fdivr
iret
xchg
in
push
mov
and
shl
into
push
cdq
mov
jmp
xchg
sbb
jl
retf
add
xlat
dec
popa
test
jl
push
inc
cdq
lods
push
dec
jb
xchg
xchg
xor
movs
fmul
(bad)
and
xor
pop
jmp
jl
ret
xchg
add
je
pop
mov
add
push
mov
in
jmp
ss
ret
popa
out
syscall
xchg
jne
or
inc
retf
mov
or
loope
fsub
mov
xchg
jg
mov
xchg
cdq
dec
xchg
xchg
push
cmp
in
repnz
xchg
xchg
xchg
faddp
ror
pop
fsub
fisttp
dec
pushf
push
in
das
cli
aam
lea
xchg
movs
retf
push
(bad)
sub
adc
push
adc
sub
xchg
cwde
rol
popa
push
sbb
push
outs
jp
sbb
ret
sub
fnstcw
(bad)
imul
xchg
call
outs
into
cmpxchg
mov
xchg
pop
test
or
xchg
mov
cli
jge
test
add
lods
push
xchg
dec
sbb
xchg
dec
add
(bad)
into
hlt
in
movs
xchg
and
cmp
dec
mov
dec
jp
ret
js
cmp
xchg
out
cmp
mov
je
jge
xchg
jecxz
xchg
mov
push
fwait
mov
in
xor
fst
mov
jl
cmp
lock
adc
pushf
inc
adc
add
in
scas
inc
icebp
push
xor
dec
shl
clc
cdq
lahf
ds
push
inc
out
push
inc
fnstcw
rol
dec
loope
jge
mov
or
pop
cmc
pop
mov
jb
cwde
test
stos
sub
pop
popa
movs
dec
mov
inc
push
xchg
mov
push
lea
ss
mov
xchg
push
mov
mov
xchg
xchg
xchg
ret
into
adc
xchg
out
push
push
lea
std
dec
adc
pop
sub
stc
shl
out
xchg
pusha
fs
push
jo
xchg
fsub
mov
movs
xchg
mov
mov
test
lods
mov
jl
jl
adc
xchg
out
inc
jo
movs
sbb
push
cwde
push
adc
and
movs
mov
cmp
inc
push
and
xchg
(bad)
movs
test
ins
xchg
aam
xchg
cdq
push
fisub
fwait
dec
mov
sbb
sub
mov
and
aam
(bad)
sub
and
push
or
scas
xchg
out
mov
loop
push
mov
mov
xchg
pop
data16
dec
sub
lods
xor
fist
mov
mov
shr
mov
xchg
push
scas
pop
cdq
cmps
mov
jb
rcr
jge
jmp
clc
rcl
pop
adc
sub
mov
jp
xchg
addr16
sbb
test
mov
into
shl
sub
jne
push
xchg
repz
icebp
std
jo
int
adc
pop
aad
scas
aaa
mov
xchg
mov
adc
out
adc
mov
iret
lods
push
test
dec
and
mov
jbe
(bad)
xor
call
push
sbb
xchg
lods
push
dec
pop
in
mov
mov
sbb
fwait
lods
inc
xchg
mov
daa
xchg
mov
cmp
cwde
pop
add
add
xchg
fcomp
fidiv
daa
pop
mov
aam
mov
xor
or
nop
mov
femms
xchg
movs
push
jno
add
rcl
adc
lods
xchg
(bad)
sbb
adc
mul
les
sysenter
xchg
pop
sbb
bound
or
push
nop
inc
xchg
ins
hlt
dec
mov
je
pusha
sub
pop
xchg
cmp
jbe
sub
inc
dec
xchg
dec
jnp
call
jne
sbb
mov
or
in
xor
xor
jne
inc
or
int
fwait
dec
sub
jae
je
ret
xchg
adc
out
xor
mov
xor
sub
rcr
mov
mov
pop
dec
lods
lock
daa
fmul
pop
add
jo
push
std
xchg
jl
push
push
sar
add
adc
cs
xor
ins
leave
xor
sbb
pop
int3
call
fwait
imul
cmp
shl
sub
adc
inc
stos
cmc
inc
sar
xchg
mov
ja
jg
(bad)
in
lds
adc
out
or
mov
je
push
dec
adc
xchg
fld
mov
jnp
imul
arpl
jmp
xchg
xchg
cdq
test
aad
scas
push
xchg
or
(bad)
ror
mov
cmp
xchg
xchg
push
sti
out
push
and
pop
xchg
jno
mov
push
shr
repnz
call
sbb
push
push
test
aaa
cmc
mov
cmp
and
mov
jmp
mov
dec
arpl
sbb
and
lahf
sub
mov
inc
push
push
mov
mov
je
mov
sub
sub
ss
xor
xchg
dec
and
loope
test
sbb
xchg
mov
(bad)
jg
xchg
mov
aas
fdivr
outs
pop
xchg
adc
push
mul
add
std
scas
repnz
leave
ins
iret
stos
xchg
inc
xor
mov
or
pop
and
fmul
mov
pop
icebp
dec
int3
xchg
cli
imul
jb
sbb
mov
push
rol
popf
sub
test
ficom
pop
mov
jle
xchg
je
test
lahf
mov
inc
and
pop
test
rol
mov
xchg
xchg
es
xchg
fdiv
and
xor
cwde
aad
mov
jmp
xchg
sbb
mov
xchg
mov
nop
popa
in
push
into
pop
rcr
mov
push
adc
pop
xchg
cmp
mov
xchg
mov
int3
cmps
(bad)
or
nop
std
sahf
mov
cli
and
fldenv
inc
in
fild
xchg
idiv
mov
ins
push
movs
ror
mov
xchg
pcmpeqd
jmp
enter
scas
pop
adc
fldcw
push
dec
pop
jmp
xchg
sub
mov
(bad)
jmp
sbb
nop
mul
cmc
xchg
sbb
xchg
xor
idiv
test
scas
xchg
out
bound
sbb
imul
popa
test
cli
xchg
and
(bad)
(bad)
mov
in
loopne
xchg
fwait
push
pop
jbe
xor
xchg
je
sub
loop
retf
ret
aas
stos
xor
push
jp
pop
rcl
neg
fcom
leave
clc
int3
mov
xchg
popf
dec
lahf
xchg
pop
dec
and
and
fsubr
push
mov
xchg
sub
jmp
xchg
mov
sub
retf
push
daa
imul
add
lock
aaa
icebp
mov
je
pop
xchg
mov
fwait
mov
mov
aam
fwait
les
add
jge
sbb
xchg
aaa
fdivr
inc
imul
popa
adc
cmp
ins
cmps
retf
push
cdq
dec
xchg
js
xor
xchg
dec
mov
add
mov
jmp
(bad)
(bad)
ja
ror
pop
scas
mov
dec
fcomp
dec
clc
push
push
push
pop
fwait
in
iret
pop
retf
add
arpl
xchg
sub
mov
xchg
add
mov
out
mov
hlt
fwait
mov
cmp
mov
xchg
xchg
push
scas
fiadd
fwait
jecxz
cld
inc
addr16
(bad)
mov
mov
inc
outs
push
mov
pop
or
sub
stos
aad
(bad)
dec
loope
cmp
stos
cmp
test
sub
jo
std
xchg
xor
js
ret
mov
jnp
xchg
adc
add
sub
push
mov
lods
cmps
jecxz
sub
in
movs
mov
mov
mov
push
call
rcl
sub
int
ins
xchg
(bad)
sbb
xchg
rcr
mov
inc
lods
xchg
jle
ret
mov
es
fwait
jge
in
cwde
in
adc
enter
rcr
mov
out
sbb
std
icebp
into
cmc
mov
sbb
xchg
lds
cli
movs
xor
jg
mov
pop
adc
aad
sbb
jmp
push
repnz
(bad)
aam
push
mov
xchg
lahf
jecxz
out
mov
jno
mov
mov
pop
je
xchg
inc
xor
jle
icebp
imul
push
pop
leave
mov
pop
in
(bad)
loop
push
gs
mov
ins
and
test
aas
mov
cmps
push
ds
inc
sub
lahf
fiadd
ffree
sahf
shr
jmp
mov
jbe
adc
sub
ror
sub
fild
mov
fwait
call
fmul
frstor
xor
repz
cwde
mov
dec
fmul
xchg
and
xchg
push
jo
jle
xchg
xchg
push
outs
push
mov
mov
out
repnz
test
sbb
push
add
adc
mov
push
in
rep
fadd
xchg
stc
out
sbb
ins
xchg
jmp
ficom
push
call
pop
xor
jg
push
(bad)
movs
push
fwait
pop
dec
mov
mov
mul
hlt
in
inc
ss
push
cmp
xor
cwde
sub
rcr
xchg
mov
lods
xor
xchg
loopne
test
xlat
mov
push
stc
pop
outs
daa
cdq
out
mov
xchg
popf
adc
out
jno
shr
sbb
jmp
mov
cwde
dec
mov
push
out
addr16
cmp
fidivr
dec
fwait
rcl
cmps
push
push
or
add
add
scas
rol
sub
xor
ret
jmp
mov
movs
and
xor
xchg
test
xchg
mov
cld
adc
mov
or
ss
add
or
mov
cmc
adc
add
dec
xchg
inc
call
xchg
(bad)
addr16
ret
inc
xchg
cli
fisubr
mov
or
mov
adc
js
or
xchg
push
and
test
jnp
repnz
enter
rcl
fwait
(bad)
loope
mov
adc
mov
dec
ror
rcr
movs
add
mov
cmp
sbb
mov
leave
xchg
dec
fst
fs
cwde
addr16
imul
xchg
call
ror
jae
cmp
add
(bad)
xchg
aas
xchg
push
cld
mov
movs
add
xchg
sti
int3
neg
enter
std
cmp
aam
and
xchg
jp
and
mov
mov
mov
sbb
mov
jmp
fsub
adc
outs
enter
js
pop
jmp
sub
sahf
push
out
xchg
dec
mov
push
pop
and
je
push
mov
and
test
nop
out
xchg
or
fst
xchg
repnz
push
out
(bad)
mov
jle
scas
xchg
iret
cld
xor
xchg
xor
mov
push
xchg
push
arpl
jle
ja
mov
pop
xchg
retf
or
scas
enter
fbld
dec
out
in
xchg
sub
cmps
xchg
int
mov
daa
pusha
mov
pop
in
retf
xchg
cld
xchg
leave
inc
mov
xchg
loopne
cmp
mov
test
mov
jne
dec
ret
(bad)
rol
xchg
enter
mov
clc
xchg
sbb
cmp
int
rcl
pop
xchg
leave
aaa
push
imul
stos
xchg
pop
xchg
mov
adc
scas
pushf
adc
sbb
sbb
xchg
mov
lds
mov
cmp
(bad)
cmp
sub
xchg
cmc
mov
loop
dec
fs
pushf
xchg
stos
js
ss
cld
mov
mov
sub
adc
mov
sbb
fild
out
icebp
pop
add
(bad)
and
les
bound
xchg
push
mov
sub
inc
sbb
into
cmps
dec
mov
jp
inc
bound
mov
pop
push
into
mov
aam
(bad)
daa
fisttp
rcr
xchg
push
or
mov
mov
push
pop
mov
dec
adc
out
sub
xchg
adc
int
test
mov
mov
mov
push
mov
(bad)
ficom
ja
ins
mov
and
js
pop
fist
push
lock
xchg
sub
cmp
call
nop
pop
dec
push
mov
in
aas
dec
mov
or
in
mov
xchg
jp
call
xchg
xor
xchg
or
jecxz
add
adc
or
xchg
aam
ret
xor
and
loopne
xchg
jbe
cmovge
mov
xor
mov
jle
mov
sub
add
dec
mov
fcom
fld
push
jns
xor
xchg
mov
mov
(bad)
xchg
xchg
loope
pop
sub
cdq
imul
sbb
aam
xor
inc
cmp
xchg
pop
mov
mov
add
cmp
pop
rol
mov
pop
js
mov
jns
add
cmp
sub
fimul
jno
adc
cld
mov
inc
fs
daa
dec
ds
cmps
fiadd
cmp
cwde
fisttp
lahf
xchg
inc
add
push
add
aas
xchg
dec
and
add
popf
pop
and
fidivr
sbb
scas
outs
sub
dec
lds
call
cmps
jo
outs
mov
mov
xchg
cdq
fild
icebp
adc
inc
xchg
pop
xchg
xor
dec
mov
sbb
xor
adc
add
icebp
xchg
movs
mov
push
inc
lea
xchg
gs
arpl
mov
xor
and
sbb
sti
push
cmp
jg
mov
cmp
movs
je
xchg
mov
pop
xor
xchg
pop
cli
xchg
js
xchg
in
out
hlt
out
mov
xchg
cld
cwde
lods
mov
xchg
lahf
pushf
mov
xor
scas
rcl
lods
(bad)
js
enter
scas
xchg
jg
call
mov
xor
xchg
dec
cmp
sbb
xchg
sub
and
iret
add
mov
(bad)
mov
loopne
iret
xlat
push
add
or
rcr
add
mov
mov
xchg
test
inc
jl
jge
add
mov
adc
or
fiadd
sbb
jge
mov
xchg
push
idiv
mov
xchg
(bad)
mov
inc
xchg
dec
fnsave
daa
xchg
adc
data16
ins
pop
and
mov
mov
hlt
call
ror
xchg
ss
and
cmp
jns
xor
and
xchg
sar
xchg
and
shr
rcl
sahf
jbe
xchg
bound
test
xor
xor
je
aaa
inc
mov
pop
jmp
xchg
sbb
jno
cmp
jge
(bad)
call
mov
xchg
sbb
out
dec
fwait
test
je
sbb
not
or
inc
sbb
lods
or
xchg
int3
js
imul
sbb
pop
xchg
std
push
push
pusha
ss
sti
ret
cs
sub
jmp
imul
jmp
xchg
jge
cli
rcl
shl
out
ds
mov
loop
in
mov
xchg
jns
dec
ret
push
gs
(bad)
cli
and
retf
mov
test
pushf
call
cld
test
xchg
mov
mov
xchg
adc
pop
jge
jecxz
mov
xlat
jno
sbb
fdivr
push
inc
inc
cld
ffreep
inc
inc
mov
xchg
inc
xlat
push
and
pop
and
cmc
in
ins
outs
and
jle
sbb
test
fcmovne
xchg
movs
std
pop
data16
mov
sahf
xchg
jo
jmp
iret
xchg
push
loope
mov
sub
repz
pop
jecxz
in
lea
daa
xchg
add
push
call
popa
clc
adc
xchg
jae
scas
ins
addr16
mov
data16
push
inc
imul
and
test
sub
jle
les
cmp
or
xchg
cmps
cs
pop
fwait
outs
xchg
inc
sub
into
ins
ror
cwde
test
sbb
push
jb
popf
fs
test
add
mov
add
adc
mov
xchg
daa
add
push
xchg
js
rcl
into
retf
movs
jl
adc
lods
mov
and
cmps
jecxz
sbb
mov
sub
retf
fldcw
test
aaa
ins
xchg
sub
sahf
sbb
ja
xchg
rcr
in
lods
neg
aas
ret
xchg
je
mov
dec
in
hlt
movs
sub
mov
pop
fsub
bound
jp
sbb
je
lods
inc
pusha
push
xchg
dec
push
inc
sahf
(bad)
inc
fwait
xchg
sub
(bad)
push
xchg
(bad)
mov
sti
clc
pop
xchg
dec
jns
mov
mov
data16
push
pop
pushf
jg
inc
xlat
xor
inc
lock
(bad)
scas
fisub
jne
mov
xchg
(bad)
nop
adc
mov
cwde
cli
sar
jne
outs
ficomp
mov
sbb
pop
xchg
or
retf
sahf
hlt
dec
sbb
xchg
and
outs
sbb
sub
or
mov
add
inc
xchg
lds
jno
mov
jge
xor
cli
outs
das
jl
pop
push
jmp
and
js
mov
iret
lea
push
pop
popa
mov
mov
jbe
(bad)
aaa
in
ret
mov
in
mov
(bad)
mov
jp
xchg
aaa
and
xor
mov
mov
adc
pop
inc
sbb
or
lods
fsubr
add
adc
xor
xchg
stos
hlt
ins
sub
and
push
xchg
(bad)
aad
mov
or
xchg
repnz
cmp
outs
shl
dec
shr
xchg
fnop
xchg
cmps
cmp
jecxz
mov
xchg
out
xor
dec
das
push
pop
xchg
adc
test
xchg
mov
(bad)
or
pop
imul
inc
pop
jb
xchg
dec
pop
cli
mov
loop
adc
out
xchg
xchg
add
mov
xchg
in
lock
sbb
push
aas
shl
dec
in
das
xchg
mov
pop
(bad)
adc
mov
in
sub
mov
loopne
xchg
cmp
add
ins
fs
shl
sub
(bad)
into
mov
enter
and
mov
outs
ret
nop
jns
xchg
rcr
inc
test
push
stos
xchg
out
repnz
lahf
es
mov
mov
gs
xchg
add
pop
and
push
xlat
fsub
test
ins
sub
cmp
xchg
cld
mov
movs
mov
cmp
xchg
imul
cmp
adc
loop
jo
stc
aam
pop
push
dec
leave
inc
xchg
and
mov
inc
inc
push
test
outs
or
cmp
cmp
xchg
or
outs
retf
shr
sbb
mov
cld
mov
cli
fdivr
mov
lods
or
(bad)
push
inc
cmp
call
out
xchg
dec
les
cmp
sub
mov
cdq
mov
mov
pop
repz
aaa
scas
loope
ret
sbb
add
in
xchg
push
icebp
arpl
data16
sbb
jns
cmp
pop
xchg
outs
xor
daa
sub
mov
(bad)
push
cmps
pop
xchg
stos
test
call
imul
movs
jo
pop
cmps
out
xchg
cmp
cmovs
fs
loope
ins
xchg
push
xor
fmul
ss
jae
fwait
push
bswap
mov
xor
retf
test
mov
push
call
outs
fsub
mov
adc
mov
sub
mov
xchg
shl
leave
lods
jmp
mov
stos
fwait
imul
and
add
(bad)
xchg
dec
ss
(bad)
pusha
rcl
add
lods
push
xchg
xor
mov
loopne
sub
xchg
xor
mov
popa
mov
jmp
mov
push
fwait
retf
cli
mov
add
xchg
xchg
repz
lds
adc
int3
fnstsw
(bad)
sub
std
fs
sbb
xchg
add
push
xchg
push
and
dec
push
sub
add
das
adc
xchg
je
std
in
into
icebp
enter
add
mov
mov
and
call
out
out
cmp
div
pop
dec
fcmovnb
into
sahf
xchg
mov
jmp
(bad)
mov
icebp
test
loopne
loop
push
sub
aam
xchg
ror
push
jp
dec
sbb
xchg
hlt
in
cmp
adc
mov
out
aam
shr
xchg
repnz
fist
add
xchg
repz
lea
pop
stos
pushf
xchg
inc
cld
mov
mov
sub
jecxz
rcl
or
xchg
in
jp
popa
(bad)
dec
das
xchg
bound
lahf
(bad)
cdq
jne
xor
mov
xchg
inc
iret
hlt
mov
xchg
add
ins
add
fs
xor
loope
dec
xchg
imul
cmp
loop
test
xchg
mov
push
adc
mov
nop
mov
(bad)
jo
not
xchg
xchg
sbb
sahf
sar
sub
cmps
mov
pushf
rcr
push
(bad)
and
daa
mov
pop
fwait
mov
test
mov
xchg
les
test
loopne
sbb
out
jnp
mov
cmp
pop
sub
fsub
sub
lahf
xchg
into
jnp
jbe
or
xchg
and
gs
cmp
or
mov
jge
xchg
jb
les
adc
inc
pop
cs
bound
in
scas
dec
add
out
in
lahf
mov
add
push
mov
cmps
inc
sub
mov
add
push
mov
xchg
sbb
inc
pusha
fild
push
mov
mov
mov
push
(bad)
pop
and
mov
xchg
fld
pusha
popa
mov
outs
add
cmp
push
imul
sbb
je
and
xchg
push
xchg
xchg
ins
push
adc
mov
dec
xchg
in
and
xchg
adc
into
adc
add
jns
inc
jle
xchg
mov
dec
repnz
xchg
mov
dec
out
out
push
sahf
fdivr
push
dec
mov
mov
inc
adc
sar
es
add
mov
xchg
mov
fstp
cdq
or
push
jne
add
xor
jae
add
daa
pusha
xchg
xchg
inc
mov
inc
(bad)
jne
pop
(bad)
jnp
adc
loopne
sbb
or
les
out
inc
xchg
adc
cmp
and
xchg
xor
xchg
xor
pop
push
and
rcr
rcl
mov
cmp
dec
xor
jmp
cdq
gs
outs
scas
fstp
adc
xchg
mov
repz
cmp
mov
mov
aad
push
adc
xchg
and
adc
aad
retf
push
inc
popa
movs
adc
in
xchg
cmps
sub
ss
in
xlat
xchg
pop
pop
dec
cmp
add
cmp
retf
xor
push
fldenv
popf
or
mov
hlt
and
outs
inc
mov
xchg
mov
mov
out
jnp
xchg
sub
repnz
outs
cmp
cli
cld
or
or
arpl
add
adc
aaa
add
das
xchg
not
inc
adc
xchg
jmp
fbstp
mov
push
js
jo
mov
mov
cmc
shl
fisub
fwait
or
cmp
ins
jnp
lea
imul
jb
pop
shl
imul
pop
and
xchg
push
adc
xor
push
jecxz
mov
xchg
lock
pop
mov
sbb
(bad)
test
fst
xchg
repnz
sti
jmp
fmul
sub
(bad)
(bad)
xchg
mov
and
dec
add
xor
adc
or
xchg
call
xchg
imul
cdq
pminub
push
aam
xchg
test
cmps
xchg
pop
mov
lock
mov
into
pop
add
inc
mov
xchg
xor
stos
sahf
pop
and
jle
xor
mov
push
jp
mov
aam
jge
in
xchg
iret
sbb
push
gs
in
mov
push
adc
xchg
rol
xor
call
mov
cmp
rcl
retf
or
test
cmp
mov
push
jg
add
and
fist
push
in
push
popf
lock
dec
push
(bad)
adc
test
stc
pop
es
fstp
in
mov
mov
or
cmp
jecxz
push
fdivr
xchg
mov
pop
ss
call
jle
out
not
cmc
mov
mov
fst
fwait
sub
test
movs
adc
not
sub
hlt
push
push
out
mov
mov
test
mov
fwait
mov
pop
mov
aam
test
cmp
cli
add
xchg
sbb
mov
fwait
in
adc
cmp
ja
jns
in
or
loopne
mov
inc
cdq
int
out
xchg
or
xor
xchg
fstp
scas
xor
push
call
lds
xchg
(bad)
sub
mov
ret
cdq
bound
or
xchg
jmp
addr16
cwde
andnps
imul
or
(bad)
pusha
xchg
repz
xchg
repnz
stos
pop
fdivr
ficom
mov
and
cld
and
sbb
sti
das
jnp
add
icebp
cmps
pop
xor
loop
cmp
sub
mov
ja
inc
repz
xchg
xchg
push
adc
test
loop
fwait
mov
dec
jmp
imul
sub
mov
xchg
popa
jle
out
arpl
dec
mov
jge
sub
iret
lock
aas
sahf
jb
xchg
out
adc
push
retf
jae
xchg
mov
inc
inc
fs
lods
adc
fwait
aaa
or
mov
js
xchg
(bad)
sti
xchg
jecxz
dec
inc
jb
adc
cmp
cmps
mov
data16
div
aam
xor
movs
xchg
fxtract
aad
(bad)
call
cmp
adc
or
cmps
(bad)
xchg
bound
pop
mov
shl
xor
xchg
push
cmp
pop
pop
xchg
inc
dec
lock
stc
or
pop
mov
mov
aad
inc
leave
inc
sbb
sub
sbb
test
push
es
js
or
dec
push
dec
int
jecxz
fs
dec
dec
daa
mov
mov
dec
(bad)
push
push
ins
sub
xor
aad
pop
xchg
mov
mov
add
enter
(bad)
xchg
sar
aaa
lock
xchg
dec
xchg
pop
in
mov
jmp
xchg
mov
in
xchg
clc
and
mov
mov
test
xchg
mov
adc
pcmpeqd
or
xchg
outs
retf
fwait
xor
cmp
xchg
dec
(bad)
xchg
stos
rol
adc
adc
jno
sete
pop
xor
xchg
mov
ja
add
inc
inc
not
xchg
xchg
push
jmp
adc
ficomp
xchg
ror
jle
mov
xchg
push
mov
sahf
adc
mov
pop
mov
mov
arpl
sub
xchg
sbb
jmp
loope
sahf
mov
fild
xchg
jno
(bad)
mov
xchg
cli
sbb
scas
out
xchg
mov
(bad)
lods
or
xchg
aam
dec
je
aad
jmp
fs
data16
daa
xchg
xchg
jmp
lahf
xor
push
ja
je
mov
imul
xchg
mov
rol
adc
jecxz
je
xlat
inc
arpl
cmp
stos
xchg
movs
pop
add
fwait
rcl
(bad)
imul
pop
xchg
test
hlt
fwait
or
push
push
push
in
dec
std
mov
loopne
xor
push
mov
xchg
bound
xor
mov
mov
mov
in
ja
xor
pushf
xchg
cmp
or
movs
xchg
mov
pop
test
mov
pop
xchg
test
movs
out
jae
push
xchg
mov
stos
or
dec
and
in
fst
imul
pushf
jge
inc
ret
movs
mov
xchg
fidivr
ret
xchg
xchg
xor
cmp
hlt
mul
test
mov
xchg
int
xchg
test
mov
and
push
mov
loope
mov
sti
mov
xchg
dec
mov
int3
cmp
push
iret
cmp
xchg
inc
std
and
fsincos
xchg
fwait
push
add
mov
xchg
jl
and
loope
cld
ret
ins
fld
mov
fnsave
and
push
jnp
out
ins
xchg
add
inc
and
add
lea
(bad)
xchg
mov
xchg
fstp
adc
sub
out
stos
or
sahf
xchg
std
cmp
xchg
int3
popf
rol
mov
mov
xchg
inc
pop
push
dec
pop
(bad)
xchg
xor
adc
js
jl
xchg
out
icebp
mov
cmp
(bad)
adc
xchg
imul
in
dec
mov
mov
push
fsub
(bad)
lods
xor
cmp
xchg
and
int
cli
mov
in
adc
inc
cmp
stos
ror
jns
lock
fsubr
cmp
push
gs
loop
retf
cmc
sbb
addr16
jecxz
mov
in
xchg
imul
fst
mov
jne
pop
and
pop
(bad)
div
jnp
and
outs
mov
fwait
in
mov
push
xor
inc
xchg
mov
push
and
mov
and
shl
push
sti
push
inc
mov
outs
scas
pop
sbb
fisub
add
xchg
test
lahf
out
cwde
xchg
sbb
(bad)
mov
into
and
and
loopne
je
enter
xchg
dec
jl
sub
add
int3
int3
ins
clc
pop
xchg
pop
jmp
sub
mov
js
lods
hlt
rcl
loopne
das
loope
popf
ror
jae
adc
sahf
or
xchg
adc
(bad)
and
pop
call
lods
add
xchg
mov
mov
outs
sub
scas
jno
test
adc
data16
fist
fst
mov
sar
push
or
fist
js
sub
inc
mov
jecxz
xor
loopne
cmp
xchg
add
jnp
into
jp
sbb
xor
adc
pop
(bad)
cwde
mov
mov
mov
sbb
loope
ss
cmps
mov
xor
mov
or
jge
xchg
xchg
or
xchg
leave
jns
dec
(bad)
jmp
fwait
inc
mov
xchg
inc
lods
mov
nop
add
sbb
icebp
or
xchg
out
mov
out
jecxz
xchg
shl
dec
jl
dec
(bad)
repnz
mov
push
repz
inc
xchg
enter
xchg
test
icebp
xor
inc
ficom
adc
and
sbb
sbb
and
push
pop
imul
sub
clc
loopne
int
rol
sub
cmp
(bad)
xchg
and
push
mov
adc
adc
xchg
fs
push
fist
jecxz
sbb
xchg
jp
mov
or
xchg
push
jecxz
(bad)
sub
mov
ficom
out
cmp
cmp
xchg
jmp
clc
jl
xchg
or
push
cmp
xor
in
js
xchg
daa
adc
xor
retf
imul
je
mov
mov
lods
dec
xchg
inc
ss
push
push
mov
icebp
xchg
(bad)
stos
pusha
push
rol
outs
in
test
inc
xchg
jb
(bad)
fist
pop
jne
xchg
outs
sar
dec
xchg
sbb
(bad)
sti
pop
xchg
inc
int3
xchg
push
imul
je
add
push
loopne
mov
xchg
add
xchg
jmp
jecxz
cdq
xchg
jmp
dec
xchg
xchg
fld
addr16
sub
mov
dec
jo
xor
add
xchg
push
sbb
push
xchg
lds
dec
sbb
pop
xchg
in
xor
vmwrite
dec
xchg
mov
adc
mov
fist
(bad)
ficom
xchg
xor
std
jecxz
push
mov
and
aam
xor
pop
mov
adc
xchg
out
cmp
add
mov
mov
fwait
jle
movs
cmc
mov
jo
fild
fst
or
jbe
pusha
dec
sbb
xchg
xchg
xchg
push
rol
or
xchg
xchg
xchg
punpcklwd
loop
out
outs
mov
jno
in
sbb
sub
xchg
es
mov
mov
out
shr
add
pushf
xchg
mov
xor
js
adc
popf
sub
(bad)
mov
jns
jbe
xchg
cmps
loop
and
(bad)
mov
pop
pop
xchg
cmp
xchg
sahf
inc
cmc
repz
bound
adc
inc
inc
pop
es
lea
xor
xor
xchg
dec
inc
cmp
inc
xchg
or
js
test
pop
and
test
xchg
pusha
std
sub
mov
push
rol
xchg
inc
cs
js
les
test
imul
lds
je
repnz
sbb
pop
xchg
lahf
std
iret
push
and
xchg
retf
loopne
mov
cmp
xchg
inc
xlat
add
and
rcr
and
mov
inc
inc
dec
mov
cmp
sub
and
dec
fwait
in
mov
lea
mov
xchg
add
fsub
mov
stos
fist
jl
test
pop
inc
xchg
call
aam
ret
repz
les
or
xchg
call
sub
adc
add
test
mov
aad
pop
xor
xchg
lods
pop
sbb
imul
movs
push
fcom
xchg
shr
and
(bad)
pop
xchg
cmp
outs
(bad)
int3
sbb
stc
xchg
(bad)
pop
hlt
xchg
adc
mov
out
xchg
sbb
scas
push
dec
iret
mov
movs
pop
aam
(bad)
ds
jecxz
mov
mov
(bad)
lds
xchg
mov
test
xchg
mov
mov
out
adc
leave
movs
mov
xchg
addr16
ds
xchg
js
mov
je
xor
adc
cdq
adc
(bad)
shr
xor
ja
add
aaa
jle
xchg
adc
stos
fbld
scas
jp
jl
xchg
xchg
out
mov
test
xchg
push
push
sub
loop
push
xchg
push
xor
out
jno
les
fiadd
cmp
xchg
xchg
das
int3
push
sbb
push
fidiv
jge
ret
and
(bad)
xor
sub
das
pop
xchg
mov
jnp
jo
leave
cwde
into
dec
hlt
rcr
cdq
int
xchg
cs
add
lds
sbb
repz
stos
push
or
test
sub
push
jmp
dec
xchg
pop
retf
fs
jl
mov
hlt
cmp
cli
xchg
jle
nop
jge
outs
xchg
fisub
xor
ss
adc
jae
or
scas
sub
mov
xchg
test
repz
lahf
xor
cmp
cld
jg
pop
mov
sbb
xchg
cmp
dec
xchg
das
test
xchg
ret
jmp
fwait
xchg
dec
ds
sbb
test
cmp
push
push
pop
add
push
rol
pop
xchg
or
sbb
stos
adc
xor
mov
jl
mov
xchg
aad
xchg
loopne
(bad)
jecxz
xchg
pop
(bad)
pop
mov
fisub
fwait
idiv
pop
cmps
rcr
in
stos
bound
cdq
push
ins
sti
mov
iret
sub
je
lock
sub
out
gs
xchg
sbb
mov
jmp
xchg
pop
mov
and
xchg
int
sbb
sbb
xchg
adc
jge
jbe
xchg
xchg
js
xchg
add
mov
dec
cmps
(bad)
lock
ins
xchg
rcl
es
je
ficomp
stc
xor
or
mov
fadd
repnz
sbb
jecxz
cmp
cmp
pusha
sub
shl
ret
lods
mov
jo
imul
add
xchg
popa
mov
adc
adc
gs
inc
pop
ficom
dec
in
jmp
mov
or
ins
add
xchg
lea
sbb
cwde
xchg
sbb
test
sbb
or
mov
push
pop
jmp
xchg
imul
dec
xchg
add
mov
pop
retf
xchg
inc
outs
push
scas
jb
cmp
xchg
enter
cwde
jnp
sete
xchg
inc
pop
scas
jbe
scas
cmc
add
mov
jp
imul
in
cmp
xchg
push
leave
adc
rcl
xchg
ins
cmp
sbb
bnd
inc
shl
push
ds
ret
mov
push
pop
mov
jbe
xchg
rcr
dec
pop
xchg
inc
dec
imul
adc
jae
ins
mov
xchg
or
push
lea
adc
iret
cmp
test
sub
mov
outs
mov
adc
daa
shl
repnz
push
inc
push
pop
add
ror
test
adc
and
xchg
rcr
pop
sbb
mov
mov
rol
test
into
pop
rol
xchg
retf
ret
not
int
xor
xchg
inc
ds
xchg
int3
mov
sub
fdivr
xchg
lock
leave
jns
popf
clc
rcl
sub
pop
rcl
mov
hlt
int3
jmp
inc
xchg
(bad)
xor
cmp
test
shl
not
loop
out
pop
sbb
stos
push
jmp
mov
test
jle
(bad)
es
and
xchg
jmp
cmp
mov
or
lahf
bound
push
shl
sub
mov
pop
mov
jb
ficom
outs
ret
retf
xchg
out
sbb
add
pop
xchg
aas
cli
sub
aad
pop
xchg
mov
cmp
lahf
jmp
pushf
push
loop
adc
push
xchg
xor
cmp
mov
je
jns
inc
stos
mov
and
pop
arpl
mov
div
icebp
repnz
ds
into
ficom
xchg
pop
xor
dec
out
mov
push
nop
push
lock
jmp
xchg
xchg
cmp
retf
cld
xchg
jae
call
inc
mov
loop
imul
mov
jnp
imul
push
push
xchg
fwait
mov
dec
and
inc
test
jp
nop
xchg
fmul
inc
popf
stc
xchg
xchg
mov
xchg
test
xchg
push
push
push
out
mov
pushf
clc
or
test
xchg
imul
lock
adc
or
xchg
xchg
mov
je
xchg
sbb
or
outs
fiadd
jl
xchg
jp
adc
add
mov
xchg
not
inc
xchg
pop
cmp
dec
push
mov
xchg
add
ss
dec
call
sub
imul
jnp
dec
cmp
mov
retf
mov
mov
dec
mov
xchg
push
in
stos
std
cmps
nop
imul
mov
cmp
mov
pop
mov
inc
cmp
mov
in
xor
jmp
imul
dec
and
fnstsw
loop
iret
ss
and
xchg
test
ds
pop
xchg
adc
mov
mov
adc
adc
push
adc
je
sbb
push
inc
xlat
sub
or
dec
or
or
adc
xchg
and
xchg
mov
ss
mov
loopne
in
mov
jg
xbegin
xchg
movs
ficomp
loopne
mov
xchg
aaa
dec
sub
or
shr
pop
jge
jle
call
inc
mov
xchg
dec
(bad)
movs
add
mov
hlt
xlat
pop
add
or
push
(bad)
and
(bad)
jbe
xchg
xchg
jnp
cmp
pushf
jo
mov
sbb
enter
ins
ret
sti
mov
aaa
push
push
xchg
sbb
or
xchg
test
fist
and
inc
scas
aas
xchg
cwde
dec
jne
loopne
mov
xchg
or
loope
xor
test
nop
rol
push
clc
dec
xchg
adc
movs
jg
(bad)
inc
in
or
fsubr
push
bnd
mov
adc
push
test
xchg
sub
xor
xchg
jp
cmps
jle
aaa
xchg
adc
jge
jo
jns
inc
or
rol
adc
sbb
ins
xor
xchg
into
stos
call
sar
ret
(bad)
add
push
adc
fwait
ins
shl
sub
push
cld
and
xor
cmp
in
jne
add
xchg
mov
sbb
or
inc
dec
aas
dec
jge
out
adc
mov
pusha
bnd
xchg
lahf
cmps
sbb
stos
aam
xchg
ficomp
jb
xchg
addr16
mov
jo
jmp
cmc
sub
icebp
push
aam
jb
and
rcl
push
cmc
jnp
ds
xchg
iret
add
call
ret
cmps
nop
xchg
sbb
(bad)
and
mov
push
lods
movs
xchg
and
mov
inc
aad
xor
sub
xor
aam
or
test
mov
xchg
cld
xchg
add
mov
pop
cs
and
in
aas
clc
and
jle
popf
cmp
je
xchg
xchg
inc
xor
sbb
in
push
inc
arpl
xchg
dec
xchg
imul
cwde
mov
mov
cmp
push
pop
repnz
and
outs
dec
mov
xchg
dec
stos
pop
adc
mov
push
inc
xchg
rcl
sahf
xor
add
adc
iret
cmp
mov
inc
lea
and
out
adc
cwde
lock
jae
cmc
adc
pushf
sbb
das
cli
mov
or
les
adc
repnz
sar
sbb
mov
pop
mov
aas
call
ds
outs
pop
xchg
and
(bad)
or
add
inc
and
push
fst
adc
das
cdq
jmp
pop
(bad)
stos
fwait
add
jns
inc
xlat
sbb
inc
xor
jg
inc
call
push
mov
sahf
ficom
dec
enter
or
mov
cs
dec
loopne
sub
xchg
mov
mov
and
pop
leave
mov
loopne
nop
cmps
xchg
xchg
jmp
arpl
xchg
mov
imul
adc
mov
(bad)
jns
cmp
scas
pop
loop
popa
adc
pop
addr16
xchg
rol
jmp
sar
xchg
sub
inc
clc
lock
nop
scas
xor
or
push
inc
mov
std
mov
mov
xchg
pop
and
stos
sub
retf
add
mov
cdq
or
push
aam
push
aaa
shl
mov
jns
cmp
in
aad
fsubr
imul
jecxz
xchg
or
fs
mov
sbb
repnz
cmp
adc
mov
sub
out
jp
mov
frstor
push
fsub
in
xchg
scas
push
push
add
(bad)
push
in
fwait
lock
dec
sub
rcl
into
sbb
or
xchg
fld
(bad)
dec
dec
mov
mov
adc
xchg
push
test
mov
repnz
xchg
cmc
rcr
aas
retf
xchg
in
jecxz
loopne
test
push
not
push
xchg
aam
xchg
cmp
and
sbb
ins
mov
fwait
and
int3
inc
lock
mov
imul
jp
in
pusha
fwait
xchg
jg
adc
push
mov
aam
clc
and
pop
push
gs
sar
push
xchg
(bad)
retf
out
xchg
xchg
(bad)
adc
xor
rol
inc
push
je
aad
imul
mov
mov
fsub
nop
xchg
inc
mov
lahf
addr16
cs
out
cmps
ins
xchg
cmc
mov
movs
push
xchg
js
fcomp
mov
or
sub
xlat
daa
inc
out
aas
(bad)
xchg
jae
jl
jo
or
jnp
stos
xchg
(bad)
in
test
out
mov
cwde
dec
je
retf
mov
movs
add
sub
fdivr
fisub
(bad)
leave
push
movs
jp
sub
xchg
add
xchg
and
xchg
adc
int
or
stos
add
lods
adc
cmps
call
adc
jo
sbb
xor
hlt
and
adc
xchg
(bad)
out
sub
xchg
or
sbb
xchg
mov
enter
out
sti
test
je
xchg
lea
icebp
xchg
sub
jmp
std
sahf
pop
enter
xchg
mov
pop
jg
stc
xchg
sahf
push
sbb
xchg
fst
xor
mov
ja
fs
test
addr16
pop
push
sub
xchg
dec
dec
in
mov
lods
rcr
ds
and
mov
xchg
push
icebp
enter
daa
mov
ds
mov
and
xor
imul
mov
pop
sub
mov
and
scas
aas
xchg
push
addr16
xor
mov
xchg
or
aad
mov
pushf
int
fimul
add
dec
push
sbb
xchg
int3
movs
in
or
es
rcr
xor
inc
dec
mov
sbb
adc
loope
in
dec
es
push
lea
out
cwde
sbb
mov
xchg
sub
je
shr
call
das
lods
ins
sbb
xchg
stos
adc
xchg
call
arpl
add
ins
lds
inc
scas
adc
adc
jnp
sbb
jmp
outs
pop
fcmovnbe
test
fwait
stos
or
cmp
cmp
adc
cld
scas
in
ror
pop
xchg
and
das
ins
in
sbb
xchg
fwait
sbb
jmp
xchg
xor
mov
adc
shl
push
jmp
push
enter
cs
(bad)
cmp
sbb
sbb
adc
xchg
adc
out
jb
cmp
pop
xchg
outs
shl
(bad)
fadd
pop
je
sbb
cdq
pop
xchg
xor
rcr
jmp
xchg
or
test
push
mov
cmp
xchg
(bad)
push
xchg
lods
and
pop
jl
shr
sbb
ds
test
into
jle
add
jmp
(bad)
jns
loope
xchg
int
inc
sub
jmp
push
call
call
enter
daa
adc
push
mov
and
mov
div
pop
sbb
and
in
xchg
fisttp
lds
mov
xchg
icebp
sbb
pop
push
xchg
outs
enter
clc
and
and
jne
cld
cmps
hlt
rol
xchg
lods
dec
adc
fcom
ja
mov
xor
outs
dec
xchg
cmp
nop
push
in
or
mov
aas
xchg
movs
test
xchg
xchg
addr16
rol
mov
jbe
bound
popf
call
cmc
test
arpl
sub
daa
ds
push
add
(bad)
in
cs
jle
popa
sub
je
aad
dec
xchg
out
in
ja
call
pop
adc
push
les
fmul
into
out
cs
adc
pop
mov
pusha
lahf
xchg
mov
pop
bound
xchg
loope
jb
stos
rcr
imul
arpl
xchg
int
push
mov
ficomp
jmp
or
sbb
jle
mov
pop
out
test
fimul
mov
int3
cmp
mov
mov
ins
xor
jb
xor
(bad)
pop
xchg
push
xchg
add
adc
xchg
fistp
jle
xlat
ja
xchg
jl
jp
xor
popa
rcl
inc
ror
aam
cmps
jmp
sub
or
enter
shl
and
mov
mov
dec
(bad)
int
scas
xchg
mov
inc
jle
arpl
into
lock
not
add
sbb
jg
mov
add
cwde
shl
rol
push
xchg
adc
add
arpl
add
les
and
xor
or
xor
call
dec
dec
cwde
shl
cmp
leave
ss
rcl
scas
sar
(bad)
jl
jmp
xchg
adc
push
push
mov
and
jb
sub
cli
sbb
pusha
aas
int
add
jo
loop
jg
push
sti
out
pop
xchg
jle
mov
rcl
cli
dec
mov
and
pop
cmc
stc
mov
xchg
fiadd
jae
neg
shl
cld
mov
hlt
ficom
xor
dec
mov
out
xchg
sbb
push
sti
xchg
xor
xchg
push
xchg
bswap
les
mov
lea
cmp
inc
inc
pop
scas
pop
test
push
icebp
mov
sbb
jle
cwde
sbb
arpl
mov
nop
test
xchg
xchg
ss
scas
test
movs
gs
popf
test
clc
fist
out
or
lods
xchg
mov
pop
xchg
sar
mov
aad
adc
or
cmp
std
or
ret
fwait
pop
adc
es
xchg
mov
enter
cmp
(bad)
aam
lock
int3
out
repnz
cs
mov
mov
push
mov
popf
push
or
push
hlt
or
cdq
(bad)
xchg
ss
mov
sbb
into
xchg
mov
xchg
cs
test
or
mov
add
std
xchg
call
scas
push
pop
xchg
cmps
imul
xchg
leave
or
jmp
xchg
movs
cmps
sub
xchg
jecxz
lahf
sbb
pushf
cmp
pop
in
out
fdiv
xchg
add
adc
mov
push
arpl
fwait
adc
inc
push
icebp
pop
xchg
mov
out
ret
mov
add
push
xchg
jne
or
je
xchg
js
cmp
dec
into
cdq
and
and
jle
xchg
out
fcmovnu
cmp
popf
in
xchg
xchg
sbb
inc
movs
test
pop
xchg
inc
xchg
mov
push
cmps
fwait
mov
dec
adc
call
pop
cmp
xchg
or
jne
push
mov
mov
scas
mov
imul
xchg
push
sahf
les
xchg
cmps
mov
ror
inc
imul
inc
dec
adc
lods
xor
or
sub
inc
xor
sbb
ds
(bad)
fwait
mov
add
inc
in
dec
ja
push
popa
xchg
mov
mov
aaa
mov
ins
pop
shl
icebp
fisub
cmc
seta
jg
and
push
pop
jb
xchg
aaa
mov
test
xchg
mov
cmp
sete
pop
jle
xor
int
mov
fstp
inc
mov
mov
xchg
hlt
fild
xchg
out
and
mov
mov
mov
(bad)
sti
movs
mov
sbb
xor
pushf
imul
sub
ins
loope
xchg
cmp
in
int3
xchg
loop
xchg
js
xchg
xor
jo
fdiv
test
cs
xor
adc
jge
xor
sub
xchg
jmp
xchg
sub
jp
ror
test
dec
xchg
and
push
xchg
add
stos
pop
(bad)
scas
jbe
pop
imul
(bad)
lods
aam
jb
xchg
mov
mov
rcl
sbb
nop
in
scas
mov
adc
xchg
push
mov
clc
dec
fist
aam
inc
xchg
sti
xor
push
fimul
loop
ret
sbb
addr16
jnp
mov
push
sbb
mov
mov
xchg
jl
cmps
test
loopne
xchg
int
xlat
icebp
pop
test
dec
xchg
or
add
inc
dec
das
add
arpl
sbb
xor
dec
push
scas
aam
inc
mov
xchg
xchg
sar
jbe
mov
add
adc
mov
repz
cmp
xchg
mov
jle
aad
leave
mov
shr
inc
push
and
sub
mov
rcl
fsubp
lods
xchg
(bad)
adc
jne
xchg
add
test
dec
(bad)
sub
mov
fst
popf
fisubr
mov
lea
repnz
xchg
sbb
sahf
scas
cmp
adc
mov
int3
jbe
popf
inc
push
in
xchg
or
and
sbb
push
mov
jle
fcom
leavew
pop
mov
mov
or
dec
(bad)
mov
mov
jp
pusha
cdq
xor
mov
inc
enter
sbb
inc
adc
into
xor
push
mov
mov
sete
push
and
sahf
out
push
aaa
mov
ror
dec
das
outs
pop
cli
fsubr
push
into
pop
pusha
and
jne
mov
imul
add
or
test
push
fs
les
fistp
jl
test
jbe
jb
clc
sub
xchg
cs
lahf
dec
(bad)
cmp
mov
movs
cmp
out
aaa
(bad)
push
repnz
and
jbe
cwde
push
fild
or
not
mov
mov
cmp
in
aam
xchg
loopne
out
shl
shl
add
fist
pop
jo
pop
sbb
xchg
rep
dec
aas
pusha
dec
and
xchg
sar
(bad)
imul
les
jle
add
jecxz
push
fwait
add
stc
pop
ins
and
adc
ret
mov
push
ins
aam
outs
sub
or
add
jecxz
mov
ss
xchg
jo
fdiv
push
jno
fist
pop
adc
push
xor
and
cdq
test
outs
push
scas
loope
pop
xchg
mov
mov
clc
mov
leave
sbb
push
push
mov
push
rcl
jp
jmp
jg
jbe
outs
adc
psubsw
ret
or
daa
mov
sub
sbb
xchg
and
lods
xchg
fwait
xchg
ret
push
out
ss
mov
test
cmp
scas
mov
push
xchg
mov
and
out
inc
outs
mov
or
cmp
dec
(bad)
cld
sub
add
sbb
sbb
imul
pusha
adc
rcr
mov
pop
or
out
loope
push
jae
xchg
cmc
xor
mov
in
loop
mov
(bad)
jae
cld
in
sbb
jp
add
outs
or
jle
jo
fdivr
xchg
test
popa
outs
outs
pusha
fist
push
mov
xchg
jno
ret
xchg
test
jge
pop
mov
fwait
cmp
mov
push
call
cdq
inc
iret
cmps
fwait
cmp
data16
test
dec
aad
xchg
mov
call
lock
inc
pop
stos
test
xor
das
mov
(bad)
xchg
outs
add
icebp
mov
push
shr
bts
jnp
dec
xchg
dec
call
stos
mov
not
loope
adc
jmp
fwait
(bad)
popf
mov
xor
inc
jp
mov
mov
add
mov
bound
(bad)
ficom
imul
adc
ja
xor
pop
mov
xchg
cmp
jae
jns
xchg
pop
dec
sbb
lock
mov
dec
jge
fist
mov
mov
sbb
ins
mov
fwait
mov
xchg
dec
lods
push
data16
jl
into
xchg
adc
imul
cld
mov
aad
retf
push
fs
and
das
xchg
fs
jge
int3
push
xchg
ret
clc
popa
addr16
shl
mov
mov
xchg
dec
xchg
pop
xor
xchg
loopne
repz
mov
pop
movs
into
add
or
xlat
inc
xchg
and
aam
mov
fist
push
shr
push
(bad)
je
push
jp
sbb
shr
test
fist
xor
outs
pop
push
mov
out
out
sbb
repz
shl
pop
xchg
sbb
sub
and
fs
xor
cld
clc
ret
leave
rcl
test
(bad)
xchg
enter
ror
sub
xchg
call
dec
xchg
cmp
push
es
xchg
push
inc
or
pop
out
cmp
ss
xchg
pop
jge
inc
cmp
jle
xchg
popf
nop
loope
mov
xchg
dec
repz
or
dec
jb
(bad)
sbb
ins
add
cwde
xchg
loop
push
push
fdivr
adc
xchg
(bad)
push
shr
iret
test
xchg
jecxz
mov
popf
cmps
cmc
push
pop
mov
mov
xchg
mov
fwait
retf
pop
lods
inc
aaa
sub
sub
cs
and
rcr
stos
push
fptan
mov
xchg
xor
imul
jp
cmps
adc
mov
add
xchg
ret
test
pop
sahf
push
xchg
pop
xor
cmp
pusha
push
adc
pop
adc
push
aam
xchg
fstp
gs
out
aaa
mov
push
jae
mov
push
lahf
fnstsw
jno
add
hlt
shl
xor
xchg
push
sbb
das
pop
adc
and
int3
int
lods
xchg
xchg
mov
repz
mov
pop
and
div
popf
repz
movs
add
add
jns
xchg
push
repnz
push
(bad)
nop
cmp
xchg
xchg
dec
push
mov
test
pusha
inc
dec
xchg
or
lock
mov
in
push
xor
js
and
call
loope
or
push
adc
pop
push
mov
cmp
dec
scas
xchg
clc
test
and
xor
adc
out
inc
or
pop
imul
xchg
fs
lds
jmp
inc
fwait
cli
cs
and
sbb
xor
aaa
mov
hlt
jns
push
cmps
es
adc
adc
push
jbe
jp
rcl
push
xchg
scas
or
or
stc
add
in
adc
fadd
aam
push
stos
scas
xchg
xchg
fwait
inc
xor
adc
or
add
or
pusha
mov
inc
movs
add
adc
push
ret
sbb
push
jns
cld
daa
repnz
out
setne
cwde
rcl
lods
aaa
fisub
and
fwait
lods
jbe
dec
in
idiv
call
push
daa
or
jecxz
xchg
cmp
jmp
comiss
xchg
add
outs
jle
xor
sbb
(bad)
adc
xchg
sub
pop
dec
xchg
xor
inc
stos
mov
add
mov
jno
push
mov
lods
jge
je
xchg
mov
in
and
loopne
inc
daa
xchg
inc
inc
or
add
cmp
ds
fild
shr
in
mov
xor
stos
int
ss
xchg
push
lock
dec
xor
dec
(bad)
repz
fdiv
xchg
iret
mov
dec
pop
pop
std
mov
pop
ja
jle
xchg
mov
and
(bad)
xchg
cmp
xor
fcmovb
push
mov
neg
jns
mov
adc
bound
mov
mov
pop
pop
inc
test
mov
lods
popa
leave
mov
je
rcr
xor
push
(bad)
js
xchg
sub
adc
movs
pop
mov
mov
pop
test
cli
xor
in
add
mov
mov
aam
mov
xchg
test
pop
sub
xchg
data16
rep
mov
push
xchg
adc
shr
rcl
xchg
(bad)
push
int3
loopne
or
(bad)
jnp
sbb
xchg
mov
lock
xchg
addr16
rcl
xor
aad
fs
cdq
and
xor
dec
mov
mov
mov
cli
mov
repz
xchg
and
int
pop
push
sub
js
fld
or
sub
out
das
mov
xor
or
xchg
add
pop
push
sub
xchg
mov
xor
jne
and
push
jns
or
cli
dec
imul
or
je
lock
xchg
mov
mov
add
sub
gs
xchg
je
push
sbb
ins
ja
mov
shl
push
inc
int3
nop
adc
stos
mov
enter
dec
cli
jmp
sub
pusha
jb
xchg
xchg
mov
cmp
cmps
and
cmc
adc
mov
sbb
sahf
repnz
jnp
aad
in
cld
mov
fimul
xchg
mov
cmp
dec
pslld
cld
adc
fstp
jo
adc
xchg
adc
mov
add
lods
lahf
je
stos
sub
mov
adc
xchg
inc
call
pop
bound
push
dec
ja
enter
cld
rcl
inc
cmp
sti
dec
xor
xchg
movs
and
pop
jo
cmps
rcl
cs
push
xchg
xchg
add
fisttp
iret
xchg
aaa
sti
shl
stc
adc
daa
xchg
imul
pushf
jb
(bad)
pusha
mov
xchg
sar
movs
fdivp
loopne
dec
xchg
dec
popf
mov
pushf
cdq
out
pop
add
mov
cmp
adc
xchg
mov
clc
xchg
(bad)
fsubr
xor
inc
jmp
loope
inc
out
push
lock
fwait
add
push
das
xchg
adc
lods
mov
mov
mov
mov
cwde
and
fs
out
cmp
daa
xor
je
push
pushf
xchg
les
outs
add
xchg
imul
and
pushf
les
test
faddp
stos
into
icebp
shl
das
push
xchg
nop
cmp
push
lahf
repz
imul
and
into
xor
out
mov
adc
xchg
xchg
sbb
mov
jno
popa
in
xchg
imul
mov
outs
xchg
outs
pop
stos
xor
mov
or
push
xchg
aad
div
xchg
cmps
test
sahf
mov
aam
gs
xchg
sbb
sub
(bad)
mov
out
inc
movs
xchg
cmps
pop
mov
dec
xor
imul
mov
scas
xchg
cwde
sar
out
cmc
in
out
pop
jg
push
or
imul
xchg
aaa
inc
(bad)
push
leave
pandn
mov
xchg
add
dec
cmc
and
adc
dec
daa
xchg
pop
loope
jg
out
mov
add
cwde
mov
pop
mov
xchg
xor
retf
sub
xchg
fdivr
mov
push
cmp
fcom
or
cmp
in
push
nop
loopne
mov
je
cmp
mov
mov
test
movs
xchg
mov
rcl
jb
loope
mov
cmp
cdq
fwait
test
adc
add
pop
xchg
scas
ins
mov
test
jne
adc
imul
and
xchg
jno
adc
xchg
xchg
or
int3
scas
loopne
pop
mov
mov
dec
jge
xor
xchg
xlat
pushf
and
daa
rcr
xchg
sub
pop
and
sbb
mov
xor
les
movs
mov
or
cmp
jne
dec
(bad)
mov
pop
outs
or
adc
out
add
enter
xor
in
push
mov
ins
adc
xor
jecxz
arpl
xchg
hlt
mov
lahf
push
js
rcl
adc
and
stos
(bad)
xchg
icebp
loope
jbe
fwait
ret
not
pop
xchg
add
xor
repnz
movups
fist
sbb
push
dec
mov
lods
aad
sub
pop
das
cmps
xchg
iret
je
test
xchg
add
cmp
xchg
push
(bad)
xchg
bound
in
jl
sub
test
int3
xchg
shl
sub
jae
ins
xchg
pop
jge
mov
inc
or
sti
mov
fst
adc
test
int3
in
xchg
inc
add
js
xchg
mov
cld
and
dec
adc
repz
push
xchg
xchg
mov
and
std
dec
je
or
xchg
xlat
icebp
push
popf
sub
test
xchg
cmp
push
enter
retf
mov
dec
call
scas
jne
dec
xchg
adc
or
jmp
mov
xchg
mov
ins
stos
mov
or
xor
sub
imul
rdpmc
xchg
pop
les
int
iret
or
loopne
(bad)
(bad)
xlat
es
arpl
in
mov
test
fiadd
pop
in
sub
adc
dec
or
inc
bound
nop
jb
push
test
xchg
mov
daa
dec
test
pop
push
fwait
in
pop
in
mov
xchg
mov
push
leave
and
stc
xchg
mov
fidivr
pop
or
mov
xor
xchg
(bad)
adc
sbb
mov
ins
leave
xchg
pop
xor
mov
out
pop
(bad)
xchg
cmp
outs
lea
pushf
or
xchg
lds
mov
xchg
and
push
loope
mov
mov
cs
popf
xchg
out
daa
test
je
add
push
hlt
push
leave
jae
xchg
test
test
loopne
call
cli
in
adc
push
adc
pop
xor
xchg
out
add
leave
inc
das
ds
cmps
scas
cdq
dec
pop
pop
int3
fwait
xchg
hlt
fs
jecxz
lods
sub
stos
in
xchg
fwait
pop
pop
test
call
retf
or
ss
or
retf
lahf
mov
push
xchg
fwait
stos
pop
mov
sub
jns
ins
xor
xor
pand
sbb
xchg
(bad)
bound
pop
adc
inc
mov
xchg
ds
sub
in
sbb
lds
mov
adc
and
mov
or
stc
mov
jb
push
pusha
inc
test
fld
rcr
je
fwait
jns
dec
das
xchg
add
lods
push
xor
aad
jae
adc
xchg
mov
cmps
xchg
jmp
mov
fimul
cmc
xchg
pop
jg
mov
popf
lahf
in
rcl
scas
jmp
outs
ret
xor
fdivr
xor
cmp
xchg
dec
in
in
mov
mov
in
(bad)
gs
cmps
mov
mov
jno
shl
dec
test
pop
cdq
or
hlt
(bad)
mov
ins
fst
repz
push
lahf
fs
cmp
jle
xchg
xchg
or
data16
aaa
sbb
(bad)
jb
outs
(bad)
push
sti
bt
and
rcr
xchg
pop
mov
jg
jmp
call
ja
sub
movs
mov
xchg
or
leave
sti
cmc
inc
mov
dec
sahf
xchg
out
mov
lods
or
push
subps
or
jmp
pusha
popf
or
repnz
cmp
xchg
mov
add
and
pop
xchg
dec
sbb
xor
mov
fwait
jae
fwait
xchg
mov
dec
xchg
dec
jne
dec
xor
xchg
inc
cwde
test
add
in
xchg
stc
bound
psllw
shl
xchg
movs
mov
jno
sbb
retf
adc
call
paddusw
mov
movs
fisttp
xor
mov
mov
mov
lds
xchg
jmp
movs
or
mov
push
scas
mov
cwde
jo
fs
add
mov
pop
aad
out
dec
rol
ins
dec
cmps
enter
sbb
dec
sahf
add
xchg
add
fs
mov
dec
data16
cmps
out
(bad)
mov
add
inc
cmc
retf
mov
xchg
jb
push
ja
bnd
bound
das
rcl
xchg
xor
dec
addr16
dec
push
xchg
push
cld
pop
ret
jmp
ficom
sbb
pop
dec
loopne
jnp
mov
dec
xchg
jmp
gs
mov
fsub
shl
sub
aaa
mov
fstp
hlt
push
dec
push
outs
in
xchg
fdiv
aas
jmp
xchg
call
cld
push
jne
mov
icebp
ins
xchg
xchg
add
mov
xchg
jmp
dec
push
lahf
adc
and
punpcklbw
cwde
movs
call
in
shl
scas
adc
adc
mov
jbe
mov
add
adc
std
hlt
int
xchg
xchg
sbb
jae
xchg
add
iret
aas
xchg
inc
jbe
adc
sti
and
add
ja
imul
aam
imul
movs
jb
cmp
xchg
mov
sbb
out
xchg
jl
inc
jmp
push
dec
sub
repz
inc
dec
mov
enter
shr
mov
xchg
test
icebp
fwait
mov
sub
loopne
cmps
cmps
add
pop
pusha
in
xor
xchg
push
xor
loope
fidiv
js
cmps
dec
fucomi
and
in
add
xchg
inc
std
rcr
dec
jnp
dec
xchg
cmc
out
jbe
jno
add
xchg
mov
sub
repnz
je
mov
jns
outs
adc
add
std
jo
push
hlt
xor
arpl
mov
hlt
add
xchg
add
xlat
fild
inc
or
xor
mov
pop
iret
hlt
xchg
xchg
push
ss
xchg
aam
repnz
pop
adc
mov
cdq
ret
aaa
aas
adc
mov
out
je
pusha
xchg
cdq
leave
lods
cmp
jl
jecxz
shl
and
call
inc
sahf
adc
fwait
(bad)
ja
les
and
jne
sbb
jbe
or
push
push
rcr
inc
xchg
dec
dec
inc
cmc
lods
in
inc
stos
cmps
jle
mov
adc
xchg
cmps
pop
repnz
inc
xchg
mov
add
sub
mov
fstp
sbb
push
adc
cmp
js
mov
adc
and
arpl
adc
lods
mov
xchg
mov
scas
daa
mov
cmp
xor
jae
jp
fxch
push
sbb
cmp
lock
je
pop
bound
xchg
and
je
mov
cmp
add
mov
in
pushf
xchg
sub
adc
adc
je
in
xchg
inc
xchg
mov
mov
xor
xchg
ins
pop
jle
loope
test
inc
xchg
xchg
xchg
mov
sar
fwait
pop
dec
xchg
dec
cmps
fs
aaa
jnp
into
push
mov
xor
mov
push
adc
sub
pushf
mov
je
lock
pop
imul
sub
cmp
xor
sahf
jne
and
scas
fs
jge
sbb
push
mov
inc
ins
jle
imul
dec
or
xchg
and
sub
mov
inc
jmp
movs
mov
retf
inc
cmp
fwait
(bad)
pop
nop
repz
movs
inc
(bad)
mov
rcr
js
or
push
ror
loop
sub
iret
scas
xor
mov
fld
and
dec
jmp
adc
push
int
xchg
or
cdq
in
test
repnz
pop
es
(bad)
jne
sub
mov
cmp
outs
loop
(bad)
pop
xor
mov
mov
xchg
sub
adc
or
rcr
aaa
into
std
mov
add
rol
bound
and
xchg
add
xor
sub
mov
mov
pop
cmps
cmp
xchg
xchg
call
imul
push
xchg
inc
sar
stos
mov
jbe
sub
dec
mov
cwde
scas
xcrypt-ofb
cmps
sub
xchg
fmul
push
push
xchg
fcomp
in
iret
adc
mov
rol
jg
ret
hlt
lock
js
push
stos
pop
xor
sbb
sub
sbb
xchg
stos
sub
jb
sub
loop
jmp
cld
sbb
inc
xchg
daa
dec
out
xor
adc
xchg
jb
(bad)
fld
pop
jl
shl
and
pop
call
xchg
push
and
out
pushf
xchg
xlat
xor
cmp
bound
ret
sub
xchg
js
push
lahf
xchg
xor
loop
xchg
pop
add
iret
adc
lods
xchg
xchg
fstp
jns
mov
imul
ret
xor
mov
fldcw
xor
xor
dec
mov
pop
inc
xchg
mov
sbb
fcom
push
lods
movs
nop
and
iret
xchg
push
scas
mov
setb
xor
jp
xchg
dec
outs
ror
add
dec
leave
aam
mov
(bad)
repz
pop
mov
sub
xchg
lahf
test
div
aas
icebp
fnsave
retf
jecxz
sub
or
mov
xchg
fcomip
movs
mov
(bad)
cmp
jp
xchg
sti
call
xchg
push
mov
icebp
inc
xchg
cmps
mov
dec
jmp
(bad)
pop
xchg
hlt
je
jp
clc
jmp
sar
lea
jb
cdq
fild
je
out
femms
pop
xchg
inc
in
push
pop
fs
aaa
addr16
mov
lea
dec
xchg
pop
(bad)
imul
mov
and
xchg
xchg
jae
adc
nop
inc
xchg
inc
sti
pop
shl
div
imul
loop
xchg
jo
pop
or
hlt
sbb
mov
jg
lods
xchg
outs
dec
cmp
jne
dec
ds
jge
xlat
or
jne
jg
ror
sub
inc
jne
push
inc
dec
iret
or
mov
push
nop
jecxz
fnsave
inc
lock
push
xchg
mov
mov
adc
mov
cmp
cmp
mov
mov
jge
or
pop
jmp
aas
mov
mov
inc
dec
mov
rcl
movs
mov
pop
out
mov
repnz
outs
cmp
adc
jmp
js
fucom
scas
iret
xchg
(bad)
mov
jmp
xchg
sbb
lock
or
imul
aaa
std
cmp
xchg
dec
rol
inc
xchg
xor
push
fcom
lds
cs
cmp
pop
push
dec
sub
test
fdivp
lea
and
aam
jge
cdq
mov
mov
push
adc
addr16
sbb
xchg
shr
dec
out
pop
add
inc
xchg
push
and
lock
ffreep
call
pusha
xchg
pop
and
test
pop
cmp
sub
je
adc
mov
jge
fwait
xchg
xchg
aam
jmp
mov
adc
inc
dec
pop
push
ror
lahf
xchg
xor
sbb
cmc
push
mov
pop
mov
xchg
inc
icebp
pop
aad
xchg
jbe
add
imul
test
xchg
pop
pop
fisubr
push
mov
cmp
adc
loopne
in
or
inc
mov
inc
retf
fnstsw
inc
test
(bad)
adc
push
mov
or
mov
mov
arpl
cmp
push
imul
inc
into
adc
or
add
je
fist
adc
pop
imul
dec
out
push
dec
bound
loope
test
and
fist
rcr
enter
add
dec
scas
cmp
jne
call
adc
xchg
pop
data16
outs
mov
das
xchg
jno
and
out
mov
xchg
xor
mov
xor
mov
push
test
lahf
mov
(bad)
addr16
xchg
movs
and
cdq
push
out
cmp
shl
ds
xchg
lods
xor
sbb
adc
icebp
rcl
and
mov
lods
dec
pop
or
or
pusha
jbe
aas
add
xchg
xor
(bad)
addr16
inc
mov
repnz
sar
rol
stc
xchg
ret
jno
test
ins
jge
xchg
xor
loop
jne
(bad)
jle
cmps
icebp
jp
leave
push
mov
repz
push
push
out
cmp
and
fcomp
xchg
mov
cmp
popa
mov
pop
test
sub
pushf
and
or
push
sbb
push
push
add
ss
sbb
jno
adc
mov
out
ins
movs
clc
movs
xchg
aas
cmp
rcr
adc
and
int
aam
ret
fadd
mov
pop
pop
test
xchg
idiv
shr
xchg
retf
sbb
lods
xor
or
push
cmp
xchg
leave
and
test
bound
xchg
enter
sbb
in
or
out
inc
iret
add
add
pop
int3
xchg
fstp
adc
xchg
add
fdivr
xchg
pop
sub
dec
nop
mov
adc
dec
std
inc
jmp
adc
jl
arpl
fisttp
cmps
(bad)
shr
or
adc
xor
(bad)
dec
call
adc
imul
or
movs
push
scas
stos
bound
ficomp
arpl
pop
xchg
pop
mov
adc
scas
cmp
and
(bad)
mov
fwait
push
(bad)
mov
fs
sbb
mov
push
push
lea
invd
adc
cs
xchg
loopne
jno
gs
xlat
xchg
xor
stc
sub
adc
xchg
sahf
or
outs
push
push
sub
xchg
add
stos
mul
jmp
push
adc
mov
xchg
mov
call
scas
adc
mov
cld
xchg
test
mov
inc
shl
push
mov
and
call
xchg
imul
bound
and
push
mov
pop
and
in
add
and
(bad)
ss
xchg
xor
xor
dec
mov
mov
mov
adc
jp
xchg
in
mov
fisubr
cmps
mov
movs
sbb
push
xchg
push
test
xchg
add
mov
in
jbe
xchg
stc
xchg
(bad)
leave
clc
out
adc
aas
fwait
mov
and
xchg
(bad)
cmc
xchg
(bad)
xchg
pop
cmps
and
inc
lock
fwait
out
shl
xchg
mov
ja
(bad)
std
mov
xchg
jae
shl
fwait
call
clc
aam
mov
fiadd
jp
add
xchg
push
xchg
jle
adc
or
lds
xchg
(bad)
pop
cmp
xchg
jmp
pushf
pop
sbb
ins
xor
imul
jbe
xchg
enter
pop
out
mov
nop
xchg
out
lock
mov
fwait
jle
out
pop
test
(bad)
hlt
fldcw
mov
xchg
add
mov
clc
iret
stc
jmp
sti
push
mov
mov
lahf
or
inc
xchg
test
test
cwde
lds
mov
mov
popf
add
push
fsub
jbe
mov
hlt
popa
mov
fdivr
loopne
scas
mov
bound
fwait
xchg
js
out
loope
mov
mov
mov
push
stos
mov
pop
dec
xchg
sub
adc
adc
mov
test
jge
adc
push
fwait
cmp
(bad)
repnz
cmps
xchg
ficomp
out
shl
mov
xchg
stos
jmp
cmp
inc
mov
cli
dec
icebp
inc
xor
movs
jne
test
sub
dec
mov
jl
test
push
imul
pop
xchg
outs
ins
retf
test
adc
xchg
jb
rcr
xchg
bound
pusha
(bad)
das
mov
jnp
cli
sti
retf
imul
xchg
or
fsub
adc
mov
dec
lds
mov
in
add
dec
mov
xchg
inc
repz
lods
mov
jb
imul
and
loopne
jp
push
pop
enter
int
fist
sar
fdiv
pop
test
loope
fidivr
cld
xchg
repz
jecxz
adc
xchg
pop
leave
xchg
icebp
fs
push
xchg
push
adc
xchg
jecxz
sub
jmp
stos
cmps
das
fmul
shl
(bad)
xor
add
fwait
ret
sub
mov
mov
jmp
fst
scas
mov
sbb
sub
pop
xchg
out
and
mov
mov
gs
cmps
mov
push
jmp
aam
into
test
inc
push
clc
loop
xchg
or
lods
pop
iret
adc
pusha
and
xchg
pop
(bad)
mov
ficom
pop
js
xchg
aas
add
outs
cdq
lahf
push
pop
push
and
inc
cs
push
fwait
mov
mov
hlt
sub
xchg
jne
sti
(bad)
adc
rcl
loop
retf
add
ds
xchg
adc
jae
push
fwait
mov
hlt
xor
rcl
add
jo
lea
xchg
jp
sub
pop
int3
fisttp
adc
rcl
xchg
in
mov
push
add
lahf
cmp
mov
sbb
sti
inc
lock
push
xchg
push
out
pusha
sub
jo
stos
xchg
add
inc
rcl
cdq
push
jge
push
jge
jne
jmp
cmp
stos
frstor
and
sbb
fsubp
cld
xchg
push
cmp
inc
xchg
or
xor
cdq
adc
jmp
mov
fidiv
xor
fwait
imul
pop
mov
adc
aas
out
xchg
jecxz
ja
out
cmp
xchg
jb
add
mov
movs
adc
cmp
stos
add
mov
xchg
daa
(bad)
xchg
mov
aam
jo
xchg
arpl
aad
nop
mov
gs
adc
sub
push
movs
call
and
xchg
aaa
xor
call
jae
outs
hlt
pop
shl
fdivr
mov
push
cld
push
jl
pop
xchg
dec
mov
mov
rol
(bad)
pop
arpl
adc
dec
pop
test
xchg
lods
sar
inc
xchg
push
mov
dec
js
push
retf
enter
dec
push
loop
das
jo
inc
xchg
loopne
aaa
xchg
cmp
lock
cmp
adc
jb
mov
call
cld
sbb
adc
dec
xchg
pop
aas
or
add
enter
xchg
inc
int
fild
or
lods
repnz
je
movs
mul
push
mov
xchg
xchg
sub
jl
hlt
scas
cwde
sub
fmul
daa
js
cmp
mov
out
imul
push
mov
aas
clc
mov
add
fwait
std
or
imul
int3
cmp
adc
add
adc
and
or
std
mov
or
xchg
push
jmp
dec
cmp
dec
aaa
jno
inc
add
push
repnz
xchg
ud2
jecxz
mov
fwait
xor
lahf
sbb
add
nop
fcom
rcr
je
hlt
push
jns
outs
push
add
imul
mov
mov
or
push
mov
iret
repnz
inc
sbb
aam
paddd
push
jmp
push
loopne
mov
hlt
xchg
cwde
js
jl
or
sbb
jecxz
add
xchg
mov
sahf
test
cmp
cmp
cmps
sub
test
out
pop
cpuid
outs
mov
pusha
pop
pop
cld
fwait
out
repz
and
(bad)
movnti
clc
test
and
test
push
mov
sahf
das
xchg
cwde
mov
mov
js
adc
push
add
jo
adc
in
fst
mov
pop
xchg
inc
sbb
sbb
xchg
cli
call
xchg
popf
xchg
inc
into
mov
xchg
daa
sbb
pop
and
ins
sbb
jge
mov
enter
imul
jnp
leave
and
xchg
scas
adc
xor
lock
xchg
test
mov
gs
in
push
and
lods
jo
xchg
mov
pop
sub
inc
outs
mov
xlat
cmps
aam
mov
mov
pop
jle
aam
push
(bad)
loop
mov
jmp
mov
push
inc
and
lods
pushf
sub
xchg
xlat
cmp
dec
sbb
int
jne
inc
xor
daa
xchg
xchg
int3
push
sbb
fs
mov
call
lods
cs
(bad)
or
xchg
dec
or
mov
xchg
push
cmps
inc
pusha
mov
jb
xchg
inc
fidivr
bound
rol
loop
retf
popf
xchg
addr16
mov
(bad)
stos
ret
dec
ja
(bad)
or
adc
jne
jmp
xchg
mov
jns
push
int
sub
xchg
sbb
in
lock
out
and
xchg
mov
cmc
mov
xor
mov
or
cmps
push
adc
loop
adc
imul
stos
or
push
push
jno
xchg
ins
fdivr
sahf
jp
xchg
sbb
pop
js
mov
jnp
stos
fldenv
cmp
sbb
adc
rol
sar
lods
outs
mov
shl
push
adc
cmc
sbb
dec
cmp
mov
scas
ins
xchg
bswap
(bad)
in
xor
inc
ds
nop
and
push
je
shl
xor
leave
sbb
or
(bad)
cmp
fwait
xor
xor
jno
mov
(bad)
pop
and
push
mov
xchg
sub
inc
and
adc
mov
pop
neg
pop
push
xchg
mov
into
add
adc
imul
scas
(bad)
call
sahf
pop
xchg
mov
xor
jg
mov
xchg
cdq
or
mov
in
jne
xchg
movups
cmc
mov
movs
xchg
iret
jmp
add
(bad)
je
push
or
daa
popa
aas
mov
lods
xchg
mov
jge
fwait
lods
fs
movs
ins
xchg
repz
adc
cdq
lods
xchg
jnp
pop
mov
mov
popa
mov
or
xchg
pop
jbe
loopne
mov
fwait
(bad)
retf
inc
stos
sar
ins
mov
jbe
mov
jns
loope
repz
into
inc
call
fld
in
not
inc
xlat
xchg
push
jge
pop
(bad)
(bad)
stc
mov
retf
mov
ror
inc
shl
clc
(bad)
xchg
imul
cdq
jecxz
nop
cmp
push
and
mov
jle
mov
mov
aam
cmp
cmp
mov
xchg
cwde
nop
or
test
out
add
xor
je
mov
(bad)
push
xchg
jmp
call
lods
jns
or
xchg
mov
hlt
(bad)
mov
mov
test
fisubr
lea
ins
pop
dec
aam
add
mov
push
pop
mov
pop
movntq
jge
pop
loopne
pop
rcl
fbld
xchg
push
fadd
jp
retf
loopne
push
xchg
dec
not
or
sub
enter
mov
or
push
pop
sbb
mov
dec
or
xchg
adc
cmc
fs
inc
int3
mov
aam
add
loope
mov
or
pop
mov
sbb
test
repz
or
mov
cmps
adc
into
xchg
xlat
and
mov
mov
outs
cli
adc
jnp
mov
popf
mov
push
mov
lods
sahf
pop
test
xchg
adc
adc
ss
call
pop
mov
pop
or
retf
imul
jns
test
mov
xor
je
ins
xchg
xor
aaa
out
xor
jno
mov
sbb
call
or
xchg
jne
adc
mov
xor
jge
bound
test
dec
or
cdq
icebp
jae
inc
sbb
int
cdq
inc
mov
push
inc
mov
xchg
and
leave
addr16
xchg
movq
push
inc
or
inc
dec
xchg
sbb
sbb
in
xchg
xchg
pop
stc
jne
shl
sbb
sar
je
lods
cmp
aas
jnp
(bad)
or
adc
xchg
outs
mov
int3
mov
hlt
mov
dec
popf
mov
sub
shl
or
xchg
jo
(bad)
out
sbb
fcmovne
aam
and
sub
je
test
xchg
cmp
dec
xlat
scas
push
out
push
xchg
xor
dec
mov
sbb
inc
ficomp
add
mov
rcr
fst
and
test
ja
xchg
mov
or
sub
add
sbb
movs
xchg
lods
cli
cmp
adc
push
xchg
inc
mov
and
xchg
cmps
shl
inc
mov
aad
inc
xchg
xor
test
int3
xchg
js
or
movs
xchg
xchg
cmps
sub
xchg
or
mov
retf
mov
leave
jle
xchg
add
jmp
aam
aad
mov
es
jae
scas
jns
sti
iret
sub
xchg
dec
dec
or
adc
jg
aam
icebp
shl
or
xchg
gs
cdq
jecxz
mov
jae
lock
ficom
ret
hlt
iret
test
cdq
xor
mov
sbb
fwait
and
push
fimul
out
pusha
movs
xchg
mov
push
pop
xchg
cmps
push
mov
cdq
mov
sbb
ds
xchg
mov
leave
mov
xchg
into
mov
mov
push
stos
sub
or
xor
xor
fwait
jo
inc
jp
cmp
xchg
sbb
mov
adc
or
xchg
cmp
pop
adc
add
jbe
add
fnsave
cmp
xor
adc
leave
dec
inc
fnstenv
sbb
mov
lods
adc
sub
jl
ficom
outs
cmps
sbb
or
shl
pop
dec
adc
ret
aam
add
dec
lods
fs
push
or
mov
movs
xchg
jnp
cs
xlat
jns
lahf
and
(bad)
into
out
inc
das
adc
xchg
(bad)
pop
int3
xor
xchg
out
push
popa
inc
vpunpcklbw
mov
xchg
ins
xor
mov
dec
sub
call
adc
out
mov
mov
add
push
iret
fiadd
pop
repnz
or
stc
js
lds
enter
add
aaa
adc
mov
pop
pop
out
jns
xchg
or
cld
mov
fwait
mov
cmps
cmp
xor
rsqrtps
fwait
sbb
and
ret
fadd
xchg
fisubr
movs
push
stos
scas
ror
mov
cmp
xor
xchg
inc
dec
mov
push
mov
pop
pop
fcom
es
add
mov
pop
int
pusha
push
push
push
jecxz
jge
ins
aam
adc
jbe
outs
adc
jp
xchg
mov
int3
sub
xchg
aad
dec
dec
mov
sbb
inc
xchg
retf
out
push
pop
xchg
cmp
pusha
imul
call
mov
(bad)
adc
arpl
(bad)
sub
xchg
sub
inc
or
push
xchg
outs
jle
int
xchg
mov
into
imul
xchg
in
jne
and
je
jmp
mov
aas
ins
sbb
dec
mov
sub
push
push
pop
stos
xchg
sbb
jg
push
or
xchg
dec
lods
sbb
add
mov
sar
lahf
jno
add
xchg
dec
pop
jb
je
jmp
xchg
and
dec
mov
icebp
arpl
mov
cmp
xchg
aaa
mov
inc
jo
sbb
dec
lock
xchg
sar
xor
inc
add
xchg
fild
xchg
mov
sbb
fsub
xchg
push
fnstenv
fisubr
into
aad
dec
ja
out
test
push
mov
cli
push
test
sbb
xchg
sbb
push
je
inc
aam
repnz
cmps
inc
dec
xchg
jle
xchg
or
mov
js
inc
lock
shl
mov
into
sbb
push
xchg
(bad)
es
mov
cli
bound
fmul
mov
(bad)
push
arpl
aad
add
fwait
push
jmp
mov
pusha
leave
xchg
ret
out
mov
add
mov
pushf
xchg
push
adc
(bad)
mov
fcmovnu
cli
xor
popf
mov
xchg
mov
jo
retf
xor
ja
imul
sub
nop
push
push
xor
out
mov
xchg
std
or
xor
xchg
and
inc
mov
push
add
div
fwait
in
les
adc
inc
dec
and
jno
into
arpl
mov
add
js
jo
sti
mov
xchg
adc
inc
out
fs
mov
cdq
repnz
xchg
aaa
into
sbb
adc
in
push
xchg
loope
xor
std
call
push
adc
not
cmp
cmp
cmc
xor
popa
sub
pop
pop
add
xchg
mov
mov
xor
test
std
sahf
xchg
in
ss
mov
push
retf
xchg
xchg
push
sbb
cld
xor
sub
add
aam
(bad)
fbstp
inc
push
fwait
pusha
cmp
mov
jb
call
xchg
in
xchg
xor
push
out
dec
push
ficomp
adc
xchg
inc
inc
xchg
jmp
pop
mov
or
aam
loope
in
adc
pop
scas
(bad)
std
arpl
cmp
mov
fst
je
cmp
icebp
adc
push
push
fidivr
or
bound
mov
xchg
fcomp
(bad)
hlt
sbb
popf
cmp
adc
cmp
mov
in
(bad)
mov
dec
xchg
inc
ja
retf
xchg
int3
xchg
(bad)
add
jno
cmps
fidivr
jmp
scas
xchg
and
add
push
xchg
push
out
es
inc
mov
xchg
mov
dec
call
fcomp
and
lods
cdq
movs
xchg
repz
sti
aas
(bad)
adc
xchg
and
sub
adc
rcr
jb
cmp
or
push
repnz
in
jl
pop
mov
mov
xchg
push
lods
xchg
cli
out
push
add
stc
inc
inc
push
mov
addr16
or
pop
scas
mov
sub
jnp
imul
fbstp
adc
movs
xor
jnp
sub
arpl
and
pushf
sbb
popa
repz
repnz
dec
xchg
xchg
retf
dec
aam
icebp
cs
sub
or
xor
cdq
dec
mov
cmps
xchg
movnti
je
icebp
pop
adc
(bad)
fnsave
xchg
add
xor
mov
xchg
xlat
xchg
pop
cli
int
ds
sub
xor
mov
xchg
dec
dec
and
push
(bad)
and
xchg
lods
mov
sbb
xchg
bound
dec
shl
rcl
add
pusha
fwait
adc
cmp
ss
push
inc
mov
xor
(bad)
stc
jbe
xchg
inc
les
not
addr16
xchg
dec
dec
and
xchg
sbb
xor
and
mov
je
pop
pop
xchg
xchg
pop
jmp
(bad)
les
cmps
pop
push
sub
(bad)
xchg
aas
xchg
leave
ficomp
push
adc
push
dec
enter
cmp
push
cmp
inc
xchg
push
std
enter
pop
cmps
imul
mov
xchg
adc
push
xchg
lods
test
xchg
cwde
push
xchg
adc
inc
jno
xchg
lahf
dec
rcl
mov
mov
aam
repnz
mov
inc
ret
sbb
iret
push
adc
mov
dec
xchg
scas
out
cmp
mov
or
lahf
cmp
adc
popa
mov
ss
adc
adc
les
adc
push
fistp
retf
(bad)
out
xchg
or
lock
mov
dec
add
xchg
in
sub
xchg
mov
mov
out
xchg
call
sub
mov
int3
cwde
shr
ret
in
adc
jl
xor
and
xchg
push
lods
(bad)
push
imul
xchg
mov
pop
pop
ror
cmc
xchg
push
inc
adc
push
data16
push
and
xchg
out
out
cmps
mov
imul
sbb
jl
sti
jle
mov
fild
cdq
(bad)
lock
test
xchg
add
mov
and
xchg
cmp
(bad)
popa
int
mov
(bad)
jl
cwde
outs
xchg
push
aas
push
fcompp
call
xchg
mov
sbb
adc
adc
repnz
xchg
add
icebp
add
dec
jbe
inc
or
add
fidiv
xchg
mov
pop
shl
push
push
sti
xor
pop
dec
mov
xchg
adc
into
loope
mov
jae
aaa
jl
out
mov
aam
cmps
clc
mov
test
std
ins
and
nop
or
cmp
rol
xchg
xor
mov
add
pop
dec
fwait
std
outs
or
shl
dec
and
push
push
xchg
es
push
mov
xchg
sbb
dec
addr16
pusha
xor
mov
push
adc
add
iret
es
add
popf
inc
cmp
loopne
and
test
ret
sbb
sub
mov
outs
pop
sub
sub
push
add
xor
pop
ins
test
icebp
fbld
pop
inc
fwait
mov
je
idiv
mov
lods
outs
pop
sbb
mov
aad
rcr
sbb
cmp
fs
daa
lds
push
out
mov
jecxz
iret
mov
popa
or
imul
pushw
je
and
xchg
jecxz
aad
sti
cmps
shl
popa
inc
lock
mov
aam
mov
xchg
jmp
or
xor
inc
mov
sbb
movs
es
cmps
ds
rcl
jnp
ficom
mov
jl
jg
pop
xor
push
movs
xchg
sbb
fwait
mov
xchg
retf
sar
enter
sbb
jae
push
jnp
jb
jns
mov
mov
inc
cld
push
std
dec
ficom
pusha
ja
in
mov
aas
adc
mov
mov
dec
jae
fcmovnbe
and
push
pop
xchg
imul
xchg
jl
xchg
xor
rol
and
mov
out
sbb
xchg
shr
xlat
jecxz
push
and
xchg
aam
pop
mov
inc
xchg
dec
mov
imul
jge
loopne
adc
ror
sub
bound
mov
cmp
shl
sub
fwait
lea
das
jb
push
mov
shr
dec
into
popf
or
add
adc
push
lock
call
mov
xchg
out
aad
(bad)
fnstenv
or
and
sti
dec
xchg
outs
mov
ins
mov
mov
jbe
mov
movs
xchg
in
or
data16
cs
pop
fdivr
xchg
sbb
push
fmulp
xchg
les
jns
xor
in
enter
xchg
dec
xor
fucom
mov
mov
mov
imul
adc
mov
pop
pop
aam
xchg
clc
ds
jg
and
retf
(bad)
mov
mov
je
outs
sbb
sbb
xor
and
push
daa
sub
jmp
stos
in
xchg
std
dec
aas
sbb
inc
jmp
xchg
push
(bad)
ror
sar
xor
mov
inc
pop
mov
fisubr
add
test
jbe
mov
push
jg
dec
fs
imul
cwde
pop
out
test
rcl
and
mov
mov
arpl
push
mov
xchg
in
(bad)
call
lock
outs
xchg
loop
ficom
stc
add
pop
movs
mov
jmp
movs
adc
xchg
dec
loop
jnp
cmp
xchg
xchg
cmps
int3
and
push
mov
out
mov
(bad)
jmp
rol
xchg
push
pushf
out
dec
adc
or
fdivr
xchg
jge
movs
sbb
jecxz
sub
ret
xlat
and
sbb
arpl
cwde
xchg
lock
mov
xchg
stc
pop
adc
pop
aaa
adc
fwait
test
into
fcom
or
call
sub
xor
scas
das
xchg
xchg
push
sub
sub
lds
cdq
mov
add
fidiv
clc
jnp
call
movs
rcr
lock
iret
mov
mov
das
sbb
fmul
in
cld
movs
nop
mov
fwait
mov
scas
dec
(bad)
pop
sbb
dec
xchg
xchg
mov
je
xchg
pop
imul
adc
dec
inc
or
mov
iret
xchg
pop
jmp
mov
adc
jl
xchg
jbe
sbb
xchg
imul
sub
adc
add
(bad)
cmp
jb
xchg
(bad)
sbb
mov
mov
cmp
in
stos
cmps
mov
lahf
(bad)
xchg
rcl
or
mov
(bad)
xor
push
xchg
pop
sub
jbe
cli
push
cwde
xchg
sub
push
inc
jg
jle
xchg
mov
popa
push
lds
test
inc
pop
adc
ja
repz
pop
mov
out
mov
(bad)
adc
cmp
mov
push
and
xchg
aaa
test
dec
pop
pop
int3
xchg
mov
sar
adc
or
pusha
xor
les
jmp
and
inc
ffreep
jno
cdq
and
(bad)
pop
xchg
pop
xchg
mov
(bad)
in
push
or
jecxz
btr
mov
dec
mov
mov
std
adc
test
cdq
je
xchg
pop
loope
in
out
jl
rcl
mov
sub
jl
cmp
pop
pop
inc
push
add
seta
lock
add
outs
mov
iret
sub
jp
sbb
adc
xchg
push
pop
scas
inc
mov
and
jle
js
pop
push
xchg
aad
movs
xchg
icebp
js
lahf
xchg
xchg
fidivr
jl
in
mov
hlt
into
dec
repnz
std
leave
in
push
sub
xchg
test
mov
enter
fcmovu
je
jnp
mov
daa
js
fist
scas
pop
add
mov
cmps
add
dec
jns
or
imul
clc
sbb
mov
xor
lods
push
iret
or
xor
pop
js
fidivr
aad
add
jl
sar
sub
xor
aas
test
data16
xchg
repz
mov
dec
pushf
fist
jb
sub
call
adc
or
es
mov
loope
dec
cmp
push
jb
pop
fidivr
jns
or
xchg
sbb
or
fdivr
fstp
retf
push
jl
pop
out
or
xchg
pop
cli
das
call
cmps
pop
aam
xchg
cli
inc
mov
adc
push
mov
sbb
scas
mov
cmp
push
into
xchg
jno
xchg
loop
stos
fstp
cmps
pop
inc
mov
and
test
mov
xchg
arpl
mov
enter
dec
push
data16
jae
mov
inc
mov
push
jbe
xchg
mov
je
sub
stos
ja
hlt
je
btr
jns
sbb
add
adc
push
xor
inc
or
cmps
push
sub
pop
repz
and
push
adc
dec
xchg
pushf
lods
xchg
fs
std
push
out
push
mov
cli
push
movs
adc
cld
shr
xchg
or
push
pop
add
loop
ds
bound
mov
xchg
cmp
xchg
cmp
push
mov
push
dec
sti
mov
outs
jl
pop
or
adc
clc
das
fwait
cmc
sbb
jnp
test
popa
rcl
jmp
xchg
fstp
or
test
dec
xchg
jle
(bad)
jecxz
pop
mov
lahf
add
fsubr
imul
sub
shr
lods
test
mov
dec
sbb
pusha
je
pop
or
mov
xchg
out
and
push
je
fwait
jae
lods
dec
shl
jnp
(bad)
mov
mov
xchg
aam
pushf
call
je
and
jl
imul
test
js
lods
xchg
ja
dec
push
mov
lea
dec
fs
pop
sub
xchg
pushf
cmp
xor
mov
push
sub
jo
jmp
sbb
xchg
inc
mov
das
inc
xchg
out
adc
or
mov
in
pop
push
and
fisttp
xchg
adc
add
cli
cmp
cld
cmc
je
xchg
enter
scas
push
loopne
es
xchg
or
test
xchg
jp
hlt
mov
jb
mov
jae
enter
ret
(bad)
jp
nop
mov
pop
push
mov
stos
pop
cs
jecxz
retf
sar
mov
std
jno
sub
jmp
pushf
lods
ds
aaa
loopne
repnz
mov
loop
das
xchg
ins
or
cli
test
call
rol
mov
(bad)
dec
cmps
lods
mov
jo
or
rep
jecxz
iret
(bad)
das
xchg
je
push
fs
push
xchg
or
pop
retf
xchg
add
mov
xchg
inc
popf
dec
sbb
in
std
push
mov
ret
call
(bad)
test
(bad)
sti
xchg
icebp
ins
add
pop
ret
shl
dec
pop
xchg
(bad)
sub
xchg
loopne
pushf
adc
pop
inc
leave
xchg
jns
(bad)
xor
bound
(bad)
xchg
out
fimul
out
adc
xchg
ds
add
dec
fild
push
xchg
jmp
cdq
fwait
pop
cmp
xchg
aam
ds
out
mov
sti
jns
xchg
imul
mov
movs
(bad)
xor
frstor
adc
(bad)
imul
push
ins
shl
mov
shr
xchg
pop
adc
mov
xchg
enter
sub
push
in
push
xor
aas
outs
add
les
sbb
gs
cmps
xchg
mov
cwde
out
mov
pop
sbb
aas
sbb
loope
movs
(bad)
daa
fucomip
aaa
mov
jns
das
dec
outs
xchg
jb
mov
lods
mov
add
adc
fs
xchg
or
imul
retf
mov
jmp
repz
test
ins
mov
mov
xchg
lahf
push
das
add
jge
js
push
mov
icebp
je
dec
jmp
or
ficom
lahf
jns
xchg
scas
sub
mov
jb
imul
mov
adc
adc
adc
test
or
push
xlat
xor
test
push
(bad)
xchg
ret
jne
aad
cmps
mov
leave
jae
inc
dec
xchg
push
lahf
jl
and
xchg
xor
push
or
xchg
cmp
adc
neg
or
out
retf
les
push
xchg
popa
jge
aam
aas
lea
mov
cmp
push
xor
dec
push
jmp
xchg
into
and
je
jge
mov
xchg
or
add
movs
xchg
rcl
std
mov
pushf
adc
or
ins
adc
dec
call
test
and
push
sbb
jbe
mov
cmp
call
dec
fsub
pop
jle
cmp
out
fnstenv
adc
imul
jecxz
dec
aam
adc
ret
xchg
mov
jno
jns
outs
or
push
mov
lods
mov
mov
cmc
loopne
push
cmp
gs
and
shr
jge
xchg
stc
fnstenv
out
in
je
xor
sub
es
and
jge
or
daa
mov
mov
xchg
call
or
cli
xchg
fcomp
add
fstp
or
add
xchg
jae
shr
inc
inc
or
jl
push
into
not
fbstp
movs
jp
jecxz
jo
data16
xchg
xlat
jae
or
inc
loopne
cli
ss
sbb
stos
sub
adc
into
adc
(bad)
jno
xchg
mov
inc
ror
lahf
xchg
pop
push
out
push
cli
mov
test
nop
inc
xor
xor
mov
out
out
fwait
xchg
(bad)
(bad)
pusha
dec
mov
or
pop
pop
and
mov
out
addr16
sar
mov
mov
push
xchg
imul
dec
mov
out
stc
pop
sbb
in
pop
xor
pop
xchg
jmp
mov
shl
adc
mov
int3
push
jmp
adc
inc
adc
xor
dec
pop
jns
out
add
pop
mov
fsubr
dec
xchg
lods
jnp
in
mov
pusha
jmp
jns
scas
fld
out
dec
sti
or
cmp
cmp
pop
xchg
cmp
(bad)
and
movs
imul
xchg
jmp
cmp
xchg
neg
dec
mov
jno
add
ja
(bad)
fbld
movs
dec
sub
dec
xchg
ins
ret
mov
adc
push
out
scas
xchg
outs
jmp
xchg
(bad)
or
and
xchg
(bad)
cli
in
sbb
out
push
xchg
push
inc
or
icebp
push
popa
pop
xchg
ds
cmp
test
sub
call
mov
xchg
dec
mov
jo
inc
out
xchg
xor
test
shl
ins
push
out
xchg
add
xchg
retf
adc
xchg
gs
ret
cdq
jns
pop
mov
dec
mov
sub
inc
jg
and
xchg
loop
jmp
in
aad
mov
outs
mov
add
dec
xor
pop
mov
mov
mov
loopne
arpl
ret
bound
adc
cmc
je
xchg
xchg
cdq
push
push
ret
retf
inc
int
and
xor
cli
jns
cmp
or
icebp
dec
push
xchg
retf
out
fxch
add
pop
popa
xchg
inc
retf
adc
push
into
cli
inc
mov
cwde
push
aam
xor
push
push
sub
ds
xchg
and
loopne
inc
sub
je
mov
inc
(bad)
mov
xchg
sbb
push
iret
outs
xchg
je
out
ins
mov
dec
pop
xchg
mov
das
sbb
stos
fcmovnbe
ret
xchg
jbe
push
sbb
mov
push
rcl
adc
sbb
retf
mov
mov
jbe
fiadd
(bad)
(bad)
in
clc
fwait
fwait
mov
ficomp
fst
push
cmc
xor
movs
dec
int3
adc
jmp
jbe
imul
xchg
mov
les
rol
jbe
mov
movs
dec
cwde
cmp
gs
xchg
mov
jnp
scas
xchg
not
and
pop
sub
popf
pop
mov
rol
mov
mov
sar
adc
je
mov
xchg
fist
test
xchg
mov
push
hlt
daa
xchg
jae
vmovapd
add
adc
ss
jmp
jle
xchg
jns
sub
(bad)
xchg
add
adc
mov
icebp
addr16
jp
imul
ss
jns
leave
aaa
test
hlt
ficom
inc
bound
xchg
into
jle
sti
(bad)
jl
cdq
or
and
xchg
outs
xor
mov
jns
aam
inc
test
pop
xchg
cmps
mov
xor
sbb
sbb
add
adc
sub
popf
sub
mov
mov
ret
xchg
xor
mov
aam
xchg
add
jle
loopne
xor
mov
push
scas
and
mov
xchg
mov
add
add
mov
fiadd
fld
aaa
das
push
xchg
xchg
xor
stos
dec
out
pop
cdq
jbe
sub
push
and
into
js
sti
mov
sub
sahf
xchg
cmp
bound
jmp
xchg
dec
pop
push
adc
mov
mov
xchg
xchg
jp
jb
jge
sub
ins
and
and
inc
cwde
xchg
xchg
inc
ret
ins
in
sub
mov
xchg
sahf
fcmovb
addr16
add
inc
mov
dec
adc
xchg
mov
std
dec
arpl
xor
data16
sub
xchg
push
xchg
mov
jp
sti
fdiv
jae
lahf
mov
jb
jb
xchg
mov
dec
xlat
into
or
es
xlat
pop
push
mov
xchg
rdmsr
(bad)
call
add
dec
in
adc
xchg
fs
mov
jl
xchg
cli
mov
sahf
jmp
(bad)
in
sar
cwde
out
dec
xchg
xchg
lods
mov
adc
in
xchg
outs
inc
push
dec
gs
inc
mov
jnp
push
pop
ja
xor
les
xchg
cmp
mov
sub
bound
fisttp
scas
jg
rcl
fistp
loope
lds
xchg
push
push
imul
aad
ins
das
or
sub
js
fadd
xchg
arpl
scas
and
xchg
stos
jmp
sbb
add
dec
scas
xchg
(bad)
jno
scas
push
cmps
movs
sbb
lahf
shl
fadd
pop
push
mov
jmp
cld
xchg
sub
in
arpl
daa
(bad)
dec
fisub
xchg
std
in
jae
add
jg
push
xchg
outs
mov
aam
xchg
sbb
dec
mov
cmp
jg
movs
(bad)
into
xor
mov
add
not
mov
pop
ins
adc
retf
adc
push
out
paddusw
inc
ds
in
cmc
jnp
xchg
(bad)
scas
sbb
retf
pushf
mov
mov
adc
rcl
(bad)
cmp
sub
in
jmp
fwait
pop
adc
add
cmp
xchg
dec
xor
ja
fmul
nop
cmp
push
bound
push
xchg
jmp
fstp
xchg
inc
wrmsr
lea
int3
sub
pop
mov
mov
sbb
mov
xchg
cmp
test
in
xchg
sub
mov
cmp
ror
cmp
clc
sbb
arpl
lahf
or
ds
(bad)
bound
cmps
nop
xchg
push
adc
mov
xchg
cmps
push
cmp
sar
aaa
push
xchg
mov
mov
mov
push
or
adc
cmp
xchg
psllq
cld
rol
repnz
and
test
leave
cli
call
xchg
inc
adc
cmps
xchg
inc
ret
or
lahf
aam
scas
jle
cld
adc
jns
push
call
inc
adc
and
(bad)
xchg
sbb
or
pop
xchg
test
ret
ss
xchg
adc
adc
out
(bad)
dec
pop
xor
add
mov
jp
packuswb
fwait
xchg
and
sub
cmp
outs
loop
xchg
dec
sbb
retf
clc
pop
arpl
aam
or
mov
mov
xchg
sbb
cld
sub
pop
xchg
lods
and
and
pushf
ret
test
sbb
jns
out
addr16
sub
enter
repnz
mov
xchg
dec
in
jecxz
push
xchg
imul
sbb
es
loope
sub
dec
sub
push
adc
into
push
call
cmp
xchg
sbb
aad
mov
pop
cmp
dec
adc
and
jg
outs
xchg
push
scas
cmp
xchg
cmp
in
xor
rol
sbb
in
scas
sti
cmps
pop
mov
aam
push
loop
out
loope
sub
mov
jnp
adc
mov
icebp
xchg
ins
test
pop
ins
pop
sub
sar
mov
xchg
daa
xchg
xchg
adc
(bad)
push
les
in
dec
arpl
out
mov
sub
xchg
in
adc
imul
test
pop
sub
popa
(bad)
retf
retf
xchg
lahf
data16
adc
mov
in
or
enter
jbe
or
dec
mov
cmp
xlat
adc
pcmpeqw
sbb
mov
ja
adc
adc
movs
and
shl
call
sbb
shr
xchg
add
out
xchg
dec
cld
push
(bad)
es
loopne
in
dec
mov
fwait
pop
hlt
xchg
movs
and
lds
outs
dec
sti
out
ret
jnp
mul
mov
and
cmp
inc
call
imul
jg
jne
sbb
in
test
push
push
cwde
xchg
jl
stos
mov
lahf
pop
icebp
xlat
js
stos
xchg
add
sbb
inc
leave
dec
les
xchg
cmps
aaa
mov
dec
jnp
xchg
cmp
sbb
sbb
and
sbb
adc
out
pop
dec
sti
cmovb
mov
aam
repz
out
xchg
cmp
mov
sbb
(bad)
pusha
retf
js
cmps
(bad)
out
repnz
push
xor
jne
out
push
inc
outs
xor
cmp
(bad)
icebp
adc
addr16
mov
jle
mov
fmul
dec
ror
adc
pop
repz
mov
es
adc
into
push
sbb
popf
mov
imul
xor
enter
sbb
int
shr
xchg
out
xchg
mov
inc
mov
inc
sbb
cdq
lds
loope
in
adc
rcr
das
cdq
jae
repz
push
stos
jecxz
push
pusha
jo
pop
xchg
int3
es
dec
lahf
adc
push
pop
add
cmp
xchg
dec
mov
mov
xchg
loope
cmp
sbb
jp
aam
repz
iret
xchg
enter
in
jmp
test
mov
xchg
mov
mov
ficom
or
cmp
or
cmp
cmps
hlt
xchg
ja
dec
movs
pop
outs
xchg
iret
ss
loop
jo
pop
aam
jp
aas
xchg
jae
movs
xor
xchg
mov
mov
test
ror
xchg
aaa
dec
lds
out
xchg
mov
arpl
mov
xchg
mov
int
inc
adc
pop
mov
mov
repz
mov
xchg
aas
adc
lea
clc
das
mov
adc
mov
test
mov
jge
hlt
xchg
pop
lods
sahf
xchg
sub
sbb
into
hlt
sbb
xchg
shr
ret
int
aad
xchg
or
pusha
sub
fwait
dec
xchg
in
sub
outs
mov
inc
(bad)
icebp
jne
movs
scas
xchg
mov
push
pop
jmp
jg
icebp
lea
add
test
xor
(bad)
and
add
adc
in
stos
test
xchg
sub
push
or
mov
cmp
ret
mov
das
xchg
out
jg
xchg
test
jns
mov
adc
cmp
sub
loop
xor
xchg
xchg
adc
loopne
jae
scas
jecxz
jg
sbb
je
push
inc
out
fmul
adc
xchg
ins
in
inc
push
sub
xchg
cmp
and
xchg
add
call
xchg
and
repnz
clc
dec
rcl
push
dec
cmp
push
push
xchg
test
cwde
jae
jns
xchg
dec
cmp
scas
xor
or
xchg
cmps
mov
clc
shr
xchg
dec
add
pop
xchg
cmp
push
inc
popa
xchg
cmp
sub
push
(bad)
jo
jb
mov
push
mov
xor
addr16
or
mov
and
fwait
xchg
sbb
pop
push
mov
hlt
or
addr16
xchg
lods
test
mov
dec
xchg
inc
mov
ja
mov
dec
retf
into
shl
arpl
xchg
xchg
and
push
cmp
mov
xchg
gs
es
sahf
or
dec
aad
push
xchg
xchg
scas
xchg
stos
push
and
mov
xor
pop
in
js
xchg
sbb
cli
clc
stos
fild
xchg
call
test
lds
pop
(bad)
fadd
inc
cmp
fnsave
push
lock
je
stc
xchg
push
in
push
outs
and
retf
push
add
pop
xchg
xor
mov
jne
fnstsw
out
scas
push
adc
(bad)
and
cmps
(bad)
fldz
xchg
mov
mov
nop
add
or
inc
fwait
bound
inc
cmc
and
aaa
dec
idiv
adc
fld
jae
add
mov
into
retf
lods
mov
adc
mov
in
clc
aas
jecxz
xchg
iret
ins
aaa
sbb
data16
or
cmps
push
or
push
mov
outs
in
fnclex
retf
repnz
push
cmp
xor
inc
xchg
mov
ds
popa
cld
retf
xchg
add
iret
and
mov
push
mov
ins
sub
js
xchg
inc
(bad)
movs
ds
ficomp
sar
push
adc
or
push
push
cdq
cmps
xchg
pop
jo
push
frstor
and
add
dec
xchg
fidiv
xchg
mov
jge
xchg
adc
repnz
push
inc
cmovs
pop
and
ja
loope
outs
rcl
sbb
mov
mov
imul
retf
sar
test
rcr
mov
hlt
or
dec
mov
sbb
sbb
sbb
add
adc
xchg
xor
mov
(bad)
or
cmc
push
lds
mov
dec
xchg
sub
out
jmp
scas
xchg
add
mov
fs
leave
shl
(bad)
jbe
mov
adc
mov
retf
xchg
pop
or
daa
clc
rcl
int3
stos
mov
xchg
jae
dec
ficom
cmp
and
jmp
repz
arpl
in
adc
push
stos
in
fistp
pop
mov
mov
cmp
and
shl
mov
shl
ret
mov
dec
nop
inc
xchg
push
imul
xchg
lods
lods
loopne
dec
sbb
cmps
sub
gs
clc
movs
push
icebp
stc
sub
xchg
retf
and
ret
aad
xchg
jo
inc
fistp
lods
leave
xchg
jecxz
xlat
js
cwde
sub
xchg
iret
pop
add
jmp
fst
fmul
scas
repnz
pop
xchg
mov
cli
ret
fst
xor
sbb
pop
iret
adc
stos
test
cmps
loopne
out
xchg
push
push
and
jae
xchg
adc
ds
mov
adc
cli
das
or
std
iret
dec
cs
xchg
inc
push
jmp
rcl
test
sbb
add
imul
xchg
xchg
xchg
add
jecxz
xchg
and
inc
xchg
cmc
pop
mov
xchg
push
jl
arpl
pop
dec
mov
jne
bound
ret
sub
jmp
les
pop
into
fadd
add
arpl
stc
test
adc
fbld
je
ret
repz
ss
dec
scas
call
jb
(bad)
sub
mov
(bad)
sbb
push
fild
in
inc
outs
stos
sbb
fisub
adc
mov
jmp
dec
cmp
xchg
cmp
adc
iret
into
xor
push
sub
mov
pop
aam
sbb
adc
mov
xchg
xchg
jne
(bad)
mov
pop
shl
fnstcw
cmc
or
in
push
sbb
sti
mov
dec
shr
inc
xor
xor
lahf
jge
jp
cwde
out
xchg
int
mov
mov
push
xchg
adc
xor
pop
cld
frstor
aam
pop
stos
push
sub
jecxz
std
mov
xchg
and
xor
rcl
test
daa
mov
mov
jns
lahf
call
sub
mov
sbb
xor
hlt
ret
jecxz
xchg
inc
leave
cmp
dec
sub
and
pop
jge
arpl
pop
sbb
es
(bad)
push
jne
xchg
fwait
adc
adc
pop
jle
test
mov
shl
mov
scas
(bad)
mov
(bad)
iret
out
sub
xchg
xchg
mov
and
jae
xchg
push
mov
loope
xchg
xor
lahf
les
mov
pop
sub
mov
std
or
in
mov
es
dec
mov
pop
in
call
adc
nop
cmps
jmp
adc
jne
mov
dec
cmp
fsub
xchg
iret
int
cmp
call
jmp
je
nop
and
popf
xchg
sub
icebp
pop
(bad)
xchg
hlt
adc
vmovlps
dec
sub
lods
push
push
es
xchg
add
shr
mov
xchg
aad
add
and
and
push
out
xchg
jecxz
inc
add
fsub
mov
cmps
(bad)
push
sub
sub
pop
xlat
xchg
imul
ja
mov
adc
test
leave
xchg
stc
shl
inc
enter
xchg
js
neg
pop
jmp
rcl
fs
or
xchg
shl
(bad)
popf
fdivr
xchg
xchg
in
jmp
(bad)
ins
push
mov
(bad)
pop
dec
popf
push
fwait
xor
cmp
dec
xor
popa
pop
cmp
mov
xor
pop
push
pusha
mov
dec
dec
xchg
inc
out
pop
push
cmp
out
iret
add
cwde
adc
xor
xchg
or
jns
fimul
mov
cmp
dec
in
xchg
ins
mov
xchg
das
jne
sbb
movs
mov
sbb
xor
inc
fdiv
mov
inc
push
xchg
call
xor
push
adc
jns
movs
inc
xlat
xchg
inc
scas
push
dec
mov
and
std
rcr
xor
and
cwde
mov
leave
mov
adc
into
and
mov
dec
xor
addr16
and
test
aam
push
pop
add
jbe
cmp
push
sbb
push
ss
pop
mov
xor
jg
lds
xchg
sbb
(bad)
xchg
outs
cmp
xchg
dec
jp
xchg
sahf
sbb
aad
int
jb
inc
xchg
xor
jg
jl
mov
jno
aam
out
pop
cmc
mov
shl
add
cmp
(bad)
and
cmp
xchg
dec
leave
mov
xchg
sbb
inc
shl
cmp
int
idiv
loopne
fs
and
cdq
aam
xchg
sahf
mov
ja
jb
sbb
xchg
scas
stc
dec
int
pop
sti
cmp
xlat
xlat
jle
cmp
mov
xchg
loop
inc
lahf
sub
fcmovnbe
out
pushf
cwde
fwait
sbb
mov
hlt
cmps
xchg
shl
out
mov
out
mov
adc
rol
and
xchg
pop
lods
jl
cld
xchg
bnd
push
call
xchg
shr
pop
pop
jne
cmp
sub
jmp
cmp
pushf
lea
dec
(bad)
xchg
jns
xchg
adc
repz
xchg
ja
enter
mov
jne
push
push
xchg
add
ds
cwde
xchg
out
xchg
push
mov
xchg
or
xchg
dec
inc
xchg
push
(bad)
mov
mov
(bad)
mov
rcr
fs
imul
adc
sbb
sub
aam
add
pop
dec
movs
pop
mov
je
pop
xchg
bound
sub
lea
arpl
jbe
jb
xchg
mov
mov
repnz
inc
shl
mov
xchg
and
aas
imul
xor
jle
int3
cmp
xchg
repnz
inc
jmp
mov
retf
xchg
test
or
rcl
aad
jae
or
push
gs
iret
mov
or
dec
push
aaa
xchg
inc
sub
xchg
jbe
mov
call
test
(bad)
xchg
out
addr16
std
cmc
xchg
mov
imul
xchg
call
and
imul
dec
pop
lock
xchg
rol
jl
xchg
shr
je
addr16
aas
xchg
mov
add
cmp
cwde
cmp
and
push
adc
out
dec
pop
xchg
sub
fwait
cmp
(bad)
sub
cmps
sub
mov
mov
mov
add
aas
mov
jp
xchg
or
mov
mov
movs
jb
mov
adc
jle
sti
xchg
das
xchg
test
cmps
and
adc
stc
add
adc
push
int3
and
adc
add
mov
cmps
push
rol
cmp
mov
arpl
xchg
icebp
jg
pop
out
jnp
js
fbld
adc
xchg
lea
push
sub
adc
mov
xor
xchg
inc
fwait
add
and
adc
and
mov
mov
das
push
xchg
div
mov
mov
repnz
cmp
push
jge
xchg
push
jns
push
mov
lods
mov
(bad)
aad
xchg
adc
sub
mov
out
cmp
lods
sub
jmp
mov
add
xchg
jnp
mov
lods
xchg
sahf
xchg
les
adc
xchg
adc
in
jnp
xchg
test
mov
mov
xchg
psllw
push
(bad)
hlt
mov
mov
dec
dec
xor
xchg
adc
adc
jmp
cmp
ficom
xchg
cmp
shr
call
cmps
dec
(bad)
mov
mov
enter
addr16
xchg
xor
sub
adc
add
cmp
out
or
xchg
aas
int3
jne
xchg
dec
pop
or
lods
cwde
js
mov
mov
xchg
enter
and
stos
imul
lock
xchg
ret
dec
ss
js
push
xor
jecxz
mov
and
les
xchg
daa
repz
inc
sahf
jbe
push
xor
pop
cli
ret
xchg
add
add
mov
xchg
xchg
push
or
inc
push
dec
(bad)
mov
jmp
enter
add
xchg
mov
xchg
fs
jg
push
pop
sub
xchg
rcr
in
ret
loop
mov
mov
xchg
(bad)
(bad)
sbb
lods
cmp
xchg
add
pushf
mov
sbb
test
sbb
hlt
ret
inc
mov
jmp
ds
push
add
retf
dec
cmp
adc
sub
adc
lds
rcr
xchg
or
sub
mov
cmps
fs
lahf
push
mov
fst
xchg
or
mov
add
dec
mov
ret
xchg
test
jb
push
daa
adc
rol
loope
xchg
fcom
sbb
xchg
mov
xchg
xchg
inc
push
xchg
into
xor
clc
scas
lods
or
mov
cmp
lea
in
inc
xchg
test
out
and
xchg
sbb
or
cmp
xchg
mov
js
rcl
and
cwde
stos
mov
xchg
lock
call
mov
inc
aam
xchg
jo
retf
call
push
inc
push
sub
add
pop
rol
jo
hlt
xchg
mov
xchg
clc
pop
inc
icebp
stos
sbb
cdq
xchg
mov
xchg
mov
push
nop
fisttp
ret
repnz
adc
mov
aam
inc
mov
mov
loopne
jne
imul
push
leave
xchg
jo
in
test
push
xchg
pop
ins
mov
call
out
add
mov
movs
xchg
addr16
xor
repnz
mov
xchg
outs
mov
push
xchg
fbstp
adc
sbb
imul
fld
add
shl
cmp
repz
xchg
fsubr
adc
(bad)
lods
mov
push
xchg
ja
shr
mov
push
js
xchg
fnstenv
push
mov
cmp
lds
add
fcomip
rcl
cdq
aam
xchg
lea
mov
jl
ss
jno
mov
jmp
call
test
or
add
mov
fwait
mov
stos
ss
push
xchg
hlt
jp
pop
push
in
xchg
pop
std
dec
xchg
fcmovb
lock
xchg
outs
mov
jle
out
xchg
fbstp
test
ret
mov
xchg
pop
xchg
loop
pop
retf
lock
inc
mov
dec
or
xchg
movs
pushf
popf
ja
in
xchg
mov
sbb
mov
aaa
xor
outs
ins
and
adc
pop
push
fnsave
es
aam
repnz
push
xor
out
int
push
gs
out
xchg
fsub
adc
pop
sbb
pop
nop
cmps
xor
(bad)
cmp
mov
out
dec
jmp
adc
adc
retf
lea
and
xchg
inc
or
jg
mov
add
xchg
ins
push
arpl
loop
punpckhwd
cmp
repz
sub
push
xchg
and
adc
scas
mov
xchg
or
loope
ret
je
xor
addr16
mov
sbb
mov
test
clc
xchg
xor
enter
sub
cdq
dec
les
add
or
xchg
mov
or
fdivr
(bad)
xchg
jns
or
dec
cmp
adc
cmp
push
dec
ficomp
gs
pop
leave
outs
fwait
int3
sub
hlt
or
jnp
mov
mov
and
icebp
mov
xchg
fwait
xchg
dec
cmp
xchg
out
sar
xchg
jb
dec
les
test
(bad)
mov
fs
lock
pop
pop
test
xchg
xchg
aam
jae
xchg
mov
cmc
add
add
movs
xchg
in
dec
je
sub
cs
dec
scas
xchg
xchg
jmp
ins
imul
or
movs
xchg
aam
pusha
push
sub
xchg
dec
or
out
sub
sbb
adc
dec
xchg
dec
xchg
gs
mov
inc
xchg
or
test
comiss
jmp
lods
fld
sub
xchg
or
into
test
mov
jns
adc
pop
or
clc
repnz
pop
mov
enter
adc
pop
adc
fwait
dec
adc
daa
sub
and
xchg
shl
cmp
cmp
xchg
shr
fidivr
xlat
xor
mov
jp
xchg
pop
mov
jecxz
xchg
mov
mov
jb
sbb
jo
xchg
repz
xchg
dec
aam
adc
add
adc
pushf
push
xchg
inc
shr
mov
dec
sti
xor
push
xchg
pop
add
daa
dec
nop
and
rcl
ret
xchg
loop
loopne
or
imul
push
ins
mov
mov
xchg
xor
jmp
clc
jo
dec
mov
retf
jns
mov
aas
aad
or
dec
(bad)
cmps
adc
jecxz
jge
pusha
xchg
call
ja
sbb
inc
mov
dec
aas
push
stc
inc
(bad)
int3
call
jns
clc
xchg
cmp
sbb
das
cmc
mov
scas
daa
sub
(bad)
xchg
mov
xchg
pop
push
ret
in
test
jb
movs
xchg
iret
adc
test
inc
movs
push
push
adc
adc
add
icebp
lds
pop
cs
in
inc
fwait
mov
hlt
sub
or
sahf
and
inc
sbb
or
push
adc
retf
jbe
xchg
mov
arpl
jb
pop
xchg
push
adc
sub
icebp
lods
jl
xchg
dec
aad
not
or
(bad)
lea
popa
test
ja
dec
pop
xchg
inc
xor
mov
(bad)
retf
xchg
mov
add
pop
ficom
adc
cdq
add
xchg
jns
jg
mov
push
test
imul
jmp
test
mov
dec
mov
std
ds
leave
adc
xchg
addr16
test
rcl
jo
stos
cmps
inc
xchg
or
mov
mov
push
arpl
mov
fist
xchg
xor
(bad)
out
xchg
mov
cdq
mov
xchg
dec
movs
data16
cmp
fwait
mov
pusha
pop
or
push
push
scas
ret
xlat
dec
fwait
xor
test
mov
call
push
std
inc
retf
aas
sti
int3
icebp
xchg
sub
mov
adc
pop
sub
xchg
jae
push
mov
cdq
loope
daa
sub
xchg
sbb
and
pop
test
out
mul
or
adc
mov
xor
mov
fwait
lahf
iret
xchg
(bad)
fst
outs
add
ret
je
loopne
push
lds
(bad)
cli
sbb
xor
inc
mov
xchg
mov
xlat
sub
jbe
xchg
mov
cmp
jmp
inc
mov
sub
sar
dec
adc
mov
ret
cmps
lds
int3
sbb
adc
movs
inc
shl
addr16
xor
cs
mov
mov
into
lahf
icebp
push
push
in
fmul
retf
ds
test
lds
dec
pop
jnp
shl
xchg
push
jno
popf
mov
mov
add
(bad)
adc
(bad)
mov
mov
adc
xchg
xchg
sbb
std
int3
sub
xchg
inc
jbe
push
inc
lods
fs
dec
and
(bad)
cmp
(bad)
pop
paddw
sahf
jl
jmp
test
pop
out
(bad)
out
ficomp
xchg
xchg
xor
mov
pop
xchg
test
out
ja
pop
int
xchg
(bad)
cmp
cmp
fwait
movs
pop
lahf
xor
mov
and
mov
xchg
fdivr
sbb
iret
dec
jbe
xchg
push
or
mov
xchg
sub
xchg
push
ss
xchg
stc
fidivr
xchg
add
sub
sub
leave
pop
movs
or
dec
scas
and
into
iret
xlat
xchg
les
loopne
and
or
and
sub
jnp
popf
add
jbe
adc
add
fidivr
jb
fwait
push
fwait
sub
add
js
xchg
push
mov
cmp
fidiv
pop
mov
adc
adc
popa
out
sbb
ficom
ins
rcl
fnstsw
data16
jnp
and
(bad)
jbe
xchg
xlat
mov
adc
jne
or
dec
cmc
movs
outs
xchg
mov
xor
mov
xor
inc
xchg
mov
jecxz
cwde
sub
xchg
pop
loop
lds
sub
stc
popa
xchg
(bad)
push
lock
pop
ins
push
cmp
adc
mov
xchg
jne
mov
mov
add
in
add
mov
mov
xlat
dec
(bad)
pop
lahf
pop
dec
bound
adc
cmp
push
iret
pushf
jmp
mov
or
mov
xor
xor
add
mov
icebp
int
push
mov
scas
pop
lds
xchg
movs
push
cmp
lahf
fnstenv
sub
xchg
daa
iret
jl
mov
mov
adc
pop
sub
jl
sar
pop
and
movs
rcl
ror
pop
loopne
sbb
ds
test
movs
popa
push
xchg
bound
aad
mov
inc
jmp
loop
xchg
addr16
sbb
xchg
mov
or
js
pop
xchg
cdq
rcr
xor
repz
das
iret
test
push
je
int3
sbb
or
sbb
adc
mov
xchg
lods
add
imul
adc
sbb
sub
push
pop
iret
dec
movs
adc
fisub
in
not
loopne
daa
and
xchg
adc
jl
idiv
pop
loop
pop
and
scas
cmp
jae
ror
push
pop
xchg
cmp
sbb
cwde
cmp
dec
xor
je
jge
mov
add
jl
loop
cdq
xor
cs
clc
int3
push
aad
neg
jg
add
(bad)
repnz
out
cmp
mov
mov
cld
cmp
outs
mov
mov
and
inc
rcl
in
adc
jbe
dec
mov
xchg
js
xchg
dec
cs
sahf
pop
loop
hlt
iret
aad
imul
ror
xchg
(bad)
xlat
lods
ja
ret
loopne
and
das
icebp
xchg
xor
mov
outs
adc
int
movs
int
xchg
ret
pop
jno
imul
repz
div
xchg
dec
stos
daa
mov
adc
push
cld
movs
cmps
cwde
dec
lods
xchg
add
stos
or
xchg
inc
pop
retf
xor
sbb
xchg
int
xchg
xor
mov
lock
sub
pop
jbe
(bad)
mov
jg
xchg
mov
scas
js
xchg
cwde
or
test
jnp
stc
imul
ins
xchg
shr
pop
xchg
or
push
in
inc
add
call
and
adc
mov
push
rol
fcom
inc
pop
jmp
pop
dec
xchg
jns
and
je
push
xor
stos
jle
xor
int
jg
out
jp
les
inc
xchg
cmp
mov
mov
int3
push
jg
mov
cmps
mov
dec
or
movs
pop
xchg
mov
sbb
mov
mov
hlt
dec
mov
or
xlat
sub
cmc
nop
rcl
loopne
cdq
jo
cmp
cld
push
xor
repz
xchg
sub
mov
or
adc
shr
repnz
aad
xchg
pop
test
lock
(bad)
outs
xchg
pop
or
movs
and
in
js
xchg
sub
sbb
jge
ret
mov
push
xchg
inc
pop
icebp
ins
lods
add
xor
push
adc
das
cmp
fst
outs
xchg
ds
and
aaa
cmps
dec
pop
out
cmp
add
out
or
fistp
fwait
icebp
jle
hlt
call
sbb
mov
and
or
xchg
mov
lods
push
push
inc
xchg
je
cld
jb
(bad)
out
xchg
xchg
iret
jp
dec
hlt
ficomp
pop
pop
xchg
mov
jo
mov
or
sbb
push
out
xchg
inc
loopne
xlat
aaa
xchg
xor
adc
pop
cli
cmps
xchg
dec
xchg
cmp
push
(bad)
xor
mov
(bad)
ficomp
mov
stos
retf
sbb
mov
mov
add
jle
(bad)
jnp
mov
lods
mov
je
add
repnz
pusha
fcom
pop
dec
or
inc
and
xchg
mov
inc
sub
out
inc
dec
sar
xchg
retf
push
pop
xchg
dec
lods
mov
fwait
cdq
cwde
popf
pop
push
aam
out
fisttp
inc
ins
mov
dec
xchg
fwait
rcr
dec
mov
xchg
jno
xor
add
lods
adc
nop
mov
jl
inc
add
(bad)
pop
sub
int
xor
inc
sub
xchg
call
jmp
jmp
mov
clc
pop
push
jae
dec
inc
fs
loope
xor
push
clc
sti
xchg
imul
or
jmp
jecxz
add
jae
pop
jbe
inc
adc
nop
fisub
jns
cmps
test
xchg
jmp
(bad)
scas
xor
add
test
sbb
pop
test
or
sbb
out
xchg
add
mov
jne
xor
lock
adc
rol
fsub
cdq
test
sbb
xchg
sar
ins
neg
pop
xchg
xchg
cmps
stos
push
pop
push
cmc
inc
fcom
imul
jl
xchg
xchg
out
ror
jmp
mov
movs
push
push
test
xchg
into
outs
inc
adc
push
popa
xchg
repz
mov
adc
mov
pop
add
xchg
je
pusha
cmp
out
xchg
adc
test
or
outs
sbb
mov
rdtsc
push
fst
or
repnz
mov
adc
jp
xor
test
xchg
or
pop
not
cs
ins
push
fsub
sbb
xchg
cmp
aaa
mov
popa
jp
or
push
xchg
retf
scas
daa
add
les
je
xchg
jbe
mov
int
push
xchg
pushf
aam
cld
out
push
retf
xchg
adc
or
jg
inc
sbb
aad
ds
adc
add
mov
pushf
xchg
sbb
loope
push
mov
mov
ret
sbb
not
pop
sub
idiv
shl
pop
test
xchg
stc
in
fadd
xchg
sbb
and
xchg
icebp
aam
cwde
push
push
inc
adc
sub
pop
jnp
(bad)
dec
sub
adc
xchg
jg
into
hlt
mov
xchg
mov
sahf
out
push
ss
cmp
rol
mov
push
pop
push
loop
aas
xchg
fwait
(bad)
sub
dec
xchg
ffreep
movs
push
push
scas
dec
sbb
jns
aaa
xchg
sbb
inc
bnd
dec
mov
push
aas
push
imul
xchg
mov
or
out
cmp
lahf
(bad)
xor
aam
out
mov
enter
outs
das
dec
in
vrcpps
div
or
xchg
or
nop
add
mov
lods
dec
mov
(bad)
lods
xchg
aas
fs
pusha
fs
(bad)
cld
in
out
jmp
(bad)
or
xchg
cmps
rol
pop
mov
das
xchg
hlt
fld
inc
xchg
add
stc
ins
or
sub
xchg
push
mov
int
pop
pop
rcl
push
sub
jbe
lahf
mov
adc
mov
pop
mov
xchg
sbb
cmp
xor
xchg
popf
addr16
jg
dec
popa
or
mov
mov
push
pop
dec
fild
scas
xchg
mov
mov
ret
or
daa
jno
push
xchg
and
dec
mov
cdq
in
sbb
xchg
fwait
push
out
add
int
fcom
pusha
pop
stos
fs
xchg
dec
enter
cs
push
out
xchg
jecxz
dec
ss
jl
xchg
iret
pop
es
sbb
nop
adc
mov
stos
or
adc
cdq
popf
mov
xor
mov
xor
cs
rcr
mov
out
xchg
pop
fist
push
mov
repnz
mov
push
xchg
mov
sbb
stos
cmc
xchg
mov
push
cmp
inc
test
sbb
mov
xchg
loop
mov
popa
dec
pushf
nop
retf
push
imul
xchg
cmc
mov
test
xchg
in
inc
sbb
xchg
pop
and
call
mov
nop
arpl
ret
adc
lds
xchg
pop
icebp
in
out
cmp
xchg
cmp
nop
add
mov
in
je
xchg
aaa
jns
mov
stos
in
mov
ins
and
jecxz
push
sub
xchg
retf
jo
add
mov
ja
add
loope
leave
mov
or
sar
adc
leave
or
xchg
jnp
adc
ss
iret
pushf
xor
jae
adc
or
call
dec
xchg
in
dec
and
xchg
mov
mul
fsub
xchg
jge
mov
popa
mov
inc
out
cwde
xchg
fld
xchg
dec
or
xchg
inc
mov
xor
or
ins
xchg
mov
jns
fwait
xchg
mov
pusha
inc
xor
inc
pop
cwde
int3
jnp
scas
cmc
push
jle
ret
sub
mov
cs
sbb
push
fst
les
add
sbb
test
(bad)
cmc
mov
ins
arpl
jns
mov
je
add
(bad)
mov
or
cld
pusha
push
int3
sub
fwait
push
movs
outs
mov
sbb
int3
fs
cmp
pop
(bad)
xor
cmps
jb
push
push
in
sbb
mov
push
add
or
movs
and
mov
dec
and
fcomp
repz
iret
dec
dec
xor
cwde
adc
sub
mov
dec
sub
popf
ret
pop
fwait
add
bound
sub
inc
jb
dec
add
jbe
lock
imul
jo
ret
sbb
or
sub
shl
add
push
popa
or
retf
dec
fist
xor
std
shl
xchg
sbb
pop
stos
(bad)
jmp
cs
add
les
(bad)
xchg
in
popa
xchg
jle
inc
mov
xchg
mov
xchg
mov
xchg
stc
retf
div
ds
xchg
cmp
jns
xchg
addr16
dec
push
lahf
xchg
inc
popa
pop
mov
jmp
mov
jbe
mov
push
push
xchg
mov
icebp
xchg
xchg
mov
add
push
xchg
pusha
push
nop
inc
mov
adc
sbb
sar
jmp
or
xchg
or
lods
pop
(bad)
push
fwait
les
popa
idiv
test
pushf
jg
mov
outs
in
xchg
scas
stos
lea
sub
pop
repnz
jge
and
pop
iret
lahf
or
mov
cmp
dec
add
sub
rol
shl
ret
and
sbb
push
push
dec
sbb
or
xchg
cmp
ss
xchg
test
pop
sbb
xchg
leave
add
in
dec
sbb
cmps
fistp
aas
xchg
arpl
xchg
mov
adc
out
shl
mov
ret
xchg
lock
jmp
push
sub
fdivr
sub
ret
adc
jae
cdq
out
sub
pop
add
mov
js
rcl
test
mov
fimul
call
cmps
frstor
xor
push
out
mov
movs
aam
scas
in
xchg
(bad)
jb
sbb
shr
and
std
clc
xchg
jmp
push
popa
pop
xchg
cmps
xchg
push
sbb
(bad)
mov
inc
dec
int
fs
ins
mov
mov
xchg
add
adc
xchg
xlat
jl
imul
mov
adc
adc
ins
imul
cmps
xchg
adc
mov
and
icebp
jmp
adc
pusha
jg
sub
sub
push
bound
int3
pop
fdiv
fistp
addr16
inc
stos
movs
inc
mov
xor
dec
sbb
call
jl
data16
pusha
sbb
mov
xor
mov
inc
xchg
punpckhbw
sbb
add
mov
cmp
mov
(bad)
jmp
push
adc
adc
cmps
xchg
inc
jg
lahf
jb
shl
xchg
mov
mov
adc
fimul
xchg
jmp
adc
xchg
inc
cwde
sahf
popa
pushf
jecxz
and
ja
into
mov
xchg
shl
not
sahf
cmp
jns
ja
pop
xchg
mov
aam
nop
(bad)
lock
xchg
push
lds
cmp
xchg
cmp
pop
ins
cmps
xchg
fdivp
inc
xchg
pop
jnp
cld
mov
push
jae
stos
jmp
push
jne
inc
xlat
lock
lock
std
xchg
xchg
test
sti
xchg
loop
icebp
(bad)
aam
mov
add
fwait
or
or
in
pop
movs
xchg
sbb
mov
pop
sub
xchg
rcr
jmp
mov
std
in
retf
sti
mov
and
fisubr
mov
dec
sar
push
inc
dec
scas
movs
adc
jmp
xor
aam
call
mov
clc
test
fist
adc
outs
bt
mov
aam
ins
pop
mov
aam
daa
dec
shr
sbb
in
lds
inc
xor
aaa
pop
test
cld
mov
dec
fnstenv
aad
call
mov
pop
lahf
jp
scas
jo
jmp
push
push
popa
sahf
mov
addr16
xchg
sbb
pop
repnz
fisub
int
jno
dec
xchg
lahf
pop
inc
push
aam
cld
jo
popa
out
stos
test
pop
jl
rcl
leave
into
fwait
or
adc
mov
addr16
xor
dec
inc
xchg
sub
or
mov
lahf
lea
mov
sbb
sti
movs
jl
leave
rol
cs
mov
xchg
sub
bound
fwait
xor
xor
inc
into
mov
dec
adc
dec
nop
cmp
xchg
(bad)
icebp
push
add
mov
inc
xchg
mov
int
push
jmp
aas
(bad)
xchg
repnz
ds
jle
jl
or
lea
gs
fdivr
add
xchg
fimul
fwait
adc
push
push
mov
movs
xor
fwait
push
out
(bad)
fst
clc
hlt
xchg
mov
mov
sar
xchg
js
xchg
pop
dec
xor
cmp
mov
daa
fwait
shr
dec
pusha
xchg
xor
jle
xchg
adc
sbb
inc
inc
and
xchg
sub
fxch
jecxz
adc
xchg
ds
cmc
fisubr
mov
pop
repnz
icebp
mov
cmps
jbe
push
cdq
and
fist
xor
cmp
xchg
push
rcr
stos
aad
fist
(bad)
popf
out
push
pop
and
jmp
retf
pop
jae
aaa
adc
jne
dec
xchg
pop
or
xor
mov
xchg
xchg
fst
(bad)
dec
ss
lods
shl
call
outs
inc
sbb
and
pop
mov
or
mov
pop
xchg
sar
or
xchg
sar
js
push
ret
mov
sahf
jp
sub
xchg
jmp
in
div
or
xchg
or
sar
std
sti
xchg
sub
es
outs
sbb
fsubr
pop
ss
mov
adc
in
lahf
cdq
pop
sti
or
xchg
push
jbe
fild
sbb
lock
lahf
cmp
inc
jecxz
sbb
sbb
aad
mov
ins
xchg
dec
ds
je
lds
push
push
push
or
lods
in
ret
xchg
fisttp
mov
rcl
cmp
xchg
mov
or
mov
aaa
fwait
xchg
out
inc
mov
or
dec
adc
jecxz
out
mov
imul
adc
scas
or
repnz
xchg
jmp
(bad)
fldcw
fwait
pop
mov
push
sub
xchg
add
mov
js
outs
ja
call
sar
xchg
dec
int
and
xchg
mov
mov
(bad)
fcomp
aas
enter
iret
lahf
fst
imul
xchg
test
mov
jg
stos
mov
clc
xchg
jmp
dec
push
push
retf
mov
add
xchg
test
jnp
stos
add
dec
int
or
xchg
inc
mov
pushf
xor
xchg
and
fist
dec
and
xchg
push
pop
mov
lahf
push
and
cs
mov
xchg
sub
sub
cmp
push
popa
fwait
sahf
dec
dec
repz
mov
fnstenv
outs
inc
jp
xchg
sub
dec
jge
scas
mov
mov
mov
xchg
mov
test
retf
mov
clc
xor
xor
pushf
mov
adc
icebp
xchg
mov
clc
loopne
je
ss
sar
xor
cdq
loopne
loop
sbb
mov
xchg
mov
into
imul
(bad)
jo
out
sbb
xchg
xchg
cmp
and
pop
jge
push
xchg
movs
clc
mov
dec
push
fs
sti
lods
mov
jl
xchg
ds
mov
jg
or
stc
dec
leave
jge
jmp
xlat
add
push
adc
loopne
xor
sahf
jmp
xchg
movs
cmp
es
sub
cmp
inc
lods
xor
push
mov
add
or
mov
adc
xchg
mov
aaa
xlat
(bad)
sub
outs
mov
inc
sbb
xor
jbe
outs
mov
xchg
and
cli
lahf
pop
pusha
xchg
xchg
lock
jecxz
aaa
cmc
mov
and
mov
jl
xchg
inc
sub
adc
bound
and
adc
xchg
mov
arpl
cmc
xchg
daa
xchg
push
xchg
repnz
xchg
aas
dec
rol
lods
nop
iret
xchg
(bad)
or
mov
xchg
xor
jmp
push
xchg
adc
xlat
pop
lahf
(bad)
int3
push
mov
push
lea
xor
pushf
stos
mov
dec
mov
jl
or
fwait
aas
out
push
les
push
mov
cmp
add
nop
cmp
test
and
mov
dec
xchg
addr16
mov
xchg
dec
adc
ins
xchg
aaa
aas
sahf
inc
mov
xchg
push
mov
iret
aad
bound
sbb
sub
or
std
and
cli
sbb
js
neg
loop
mov
xchg
sub
std
cmp
dec
test
jecxz
xchg
lds
packssdw
jae
lods
mov
loope
xchg
scas
xor
mov
clc
xchg
in
xchg
sbb
xchg
xchg
jmp
push
and
xchg
mov
hlt
push
retf
and
adc
ret
data16
cdq
mov
mov
test
repnz
je
call
or
fcom
push
or
mov
push
pop
(bad)
add
xchg
push
xlat
add
fnstcw
mov
mov
push
jne
mov
or
mov
movs
pop
lahf
jbe
xchg
cwde
ror
xchg
rcl
in
hlt
stc
mov
icebp
sahf
aad
mov
call
js
arpl
xchg
out
jmp
aaa
rcl
fild
in
out
xchg
mov
movs
hlt
cmp
cmp
je
aad
xchg
dec
scas
push
adc
inc
div
mov
xchg
mov
xlat
out
dec
sbb
mov
movs
int3
leave
repz
mov
push
pop
adc
mov
inc
rdtsc
sub
shl
ja
rol
ins
xchg
sbb
int
jns
or
stos
ror
sahf
xchg
xor
ja
mov
(bad)
shl
xchg
jns
mov
xchg
push
out
outs
xchg
mov
jg
inc
sahf
mov
inc
test
mov
jle
xchg
cs
sbb
xchg
adc
jmp
push
mov
pushf
fwait
dec
mov
xchg
sub
and
xchg
retf
pop
mov
nop
jmp
ret
inc
dec
in
enter
imul
leave
add
mov
fdivr
pop
xchg
lahf
sub
add
arpl
push
or
xchg
ret
pusha
imul
sub
and
xlat
push
pop
or
mov
clc
sti
xchg
dec
push
jae
jp
xchg
cmp
jg
mov
jae
pop
cli
pushf
aaa
sahf
sub
xchg
adc
xor
pop
dec
push
mov
(bad)
inc
loopne
cmc
pop
sbb
bound
xor
imul
lock
outs
xchg
and
jmp
and
into
(bad)
xchg
add
int
(bad)
mov
jne
test
add
(bad)
or
add
xchg
and
cld
and
cwde
xchg
mov
mov
repz
push
push
jae
ds
in
push
xchg
or
outs
mov
test
xchg
mov
(bad)
test
mov
je
(bad)
call
lahf
shr
jp
xor
cmp
sbb
pop
sti
add
xchg
fwait
pop
mov
or
movs
xchg
inc
loope
inc
and
inc
jmp
cmps
fisub
je
sub
jmp
je
mov
iret
data16
jmp
xchg
sub
repz
in
push
repnz
mov
das
stos
xchg
pop
xor
mov
and
xchg
scas
dec
xchg
stos
push
ins
cdq
or
(bad)
jmp
add
ins
xchg
push
add
rcl
jnp
cmps
test
int3
loopne
dec
ror
mov
xchg
int
dec
jno
cmp
test
call
and
xchg
bound
arpl
jmp
sbb
xchg
xor
dec
pusha
dec
bound
cwde
ins
xchg
adc
cmp
xchg
cmps
or
pop
ss
xchg
mov
pushf
ins
fistp
fs
cmps
mov
cdq
jmp
sub
mov
xchg
jmp
push
call
retf
xchg
pop
call
mov
dec
cmp
xor
sub
xchg
(bad)
punpcklbw
lods
sub
xchg
or
push
mov
mov
mov
jecxz
rcr
sbb
xchg
dec
pop
dec
scas
xor
and
xlat
int
jl
mov
add
adc
repz
dec
mov
ins
sbb
fisttp
icebp
mov
loope
pop
pop
sub
shl
mov
add
fnstenv
xchg
and
adc
add
loopne
dec
shl
adc
test
cdq
xor
lods
mov
xor
jo
loop
xor
in
int3
rcr
jle
and
outs
xchg
out
lock
ins
sbb
or
cmps
and
shl
mov
(bad)
mov
push
cmp
adc
push
js
cmp
cmps
fstp
int
pop
adc
test
lahf
repz
lds
mov
jg
xchg
out
les
(bad)
js
fwait
rcl
clc
test
cmovl
xchg
mov
mov
add
jmp
inc
xchg
fs
psllw
jl
jno
inc
les
cmc
enter
pusha
cwde
xor
push
hlt
push
push
cmp
loop
fmulp
cmp
xor
sbb
xchg
pop
and
ud1
out
xor
stc
int
push
cmp
sub
xchg
adc
aad
stos
test
mov
inc
adc
adc
or
mov
aad
or
dec
sub
jns
mov
mov
int
xchg
cmp
jnp
call
mov
outs
xchg
test
push
sub
xchg
jge
nop
add
dec
stos
mov
pop
test
mov
pop
outs
adc
jge
push
cmp
xchg
in
mov
pop
dec
mov
mov
xchg
inc
loope
xchg
pop
imul
sub
retf
pusha
movs
jb
xchg
inc
into
cld
int3
(bad)
clc
(bad)
mov
and
adc
pop
adc
mov
push
mov
xor
imul
pop
je
xor
xchg
dec
inc
and
aaa
cmp
mov
jl
inc
adc
jbe
nop
sbb
xchg
outs
aas
push
shr
sbb
push
sbb
and
xchg
loop
fs
je
in
cdq
cli
mov
lock
test
pop
pusha
jnp
xchg
mul
aas
in
add
xchg
and
inc
jo
jb
xchg
or
mov
push
sbb
pop
sub
sbb
sar
xchg
dec
ret
mov
lahf
jmp
dec
repnz
popf
mov
jb
enter
adc
mov
mov
outs
cmp
repnz
ficom
push
scas
mov
xchg
push
pop
xchg
ins
movs
in
inc
ins
aad
pop
xchg
rcl
sbb
and
jecxz
int3
jo
pop
mov
mov
xchg
jnp
cdq
(bad)
mov
inc
out
pop
stc
in
xchg
mov
movs
cmp
repz
xchg
jmp
popa
rcl
aas
sub
movq
das
jnp
xor
add
jo
movs
mov
inc
cwde
xchg
jecxz
adc
adc
sbb
sbb
xchg
adc
popa
and
loopne
rcl
xchg
dec
mov
mov
and
aam
sbb
stos
adc
repnz
ret
or
bound
cdq
xor
imul
out
push
sbb
out
lods
xor
mov
xlat
not
int3
xchg
push
adc
call
xchg
inc
es
fstp
clc
xchg
sbb
and
jne
les
enter
xchg
xchg
fwait
mov
(bad)
mov
dec
adc
mov
cmc
mov
xor
fwait
leave
dec
cs
je
mov
adc
jmp
fbstp
sbb
imul
sub
xchg
and
pusha
xor
in
clc
and
je
xchg
jo
add
dec
shl
dec
call
xlat
sub
fwait
push
mov
xchg
dec
jmp
jbe
adc
add
call
cmc
dec
xchg
cmp
jmp
(bad)
mov
or
dec
cmp
inc
lahf
and
dec
adc
pop
ror
or
mov
adc
ss
pop
xchg
inc
jl
push
xchg
repnz
leave
pop
loop
(bad)
int3
fcomp
cmp
sbb
jmp
cmp
pop
dec
inc
mov
add
fwait
or
frstor
imul
xor
xchg
cmc
(bad)
rcr
pop
pushf
add
jp
pop
jbe
add
push
sbb
(bad)
fldenv
xchg
idiv
jmp
shl
hlt
sahf
pop
mov
mov
lahf
or
and
mov
shl
addr16
mov
sti
jno
pop
xchg
dec
xchg
iret
aas
mov
add
ja
(bad)
xchg
mov
imul
cs
pop
in
sbb
push
mov
imul
push
out
leave
cmp
jae
idiv
xchg
loop
xchg
and
inc
mov
into
push
out
dec
add
sbb
pop
xchg
std
or
xchg
jnp
ins
in
int
pop
sbb
mov
mov
loop
push
xchg
shl
sbb
dec
mov
mov
jmp
xchg
out
cmp
push
aam
shr
xchg
nop
xchg
loopne
xchg
mov
and
pop
aad
cmp
imul
adc
pop
aaa
ins
mov
lea
retf
lods
adc
push
pop
jmp
sub
test
xchg
pop
les
or
lahf
cmps
xchg
jbe
mov
loope
push
cdq
inc
add
xchg
outs
sub
adc
lahf
dec
test
pop
sbb
inc
inc
in
mov
shl
in
push
xchg
cmps
lahf
dec
inc
lds
rol
retw
arpl
das
xor
xchg
cwde
inc
push
mov
xchg
stos
shr
xchg
sbb
push
in
stos
mov
out
fwait
mov
call
retf
popf
push
jnp
out
fdivrp
sti
xchg
(bad)
(bad)
cmp
enter
popf
or
xor
mov
or
pusha
out
aam
repz
repnz
sbb
retf
je
mov
scas
xchg
rcl
(bad)
mov
je
in
push
sahf
add
xchg
push
daa
fs
scas
push
aam
jmp
sbb
or
mov
jl
xchg
jbe
adc
jmp
mov
xchg
or
adc
xor
mov
pop
cmc
adc
das
daa
dec
out
cmps
xor
push
xchg
addr16
sbb
lea
mov
je
mov
adc
cmc
(bad)
xor
repz
xchg
retf
dec
jb
ins
pusha
repnz
xchg
pop
ja
adc
in
mov
and
jp
(bad)
xchg
mov
test
adc
fcom
bound
mov
xchg
xchg
dec
mov
push
add
push
aas
repnz
mov
adc
jmp
lock
repz
retf
dec
fsub
add
dec
or
or
test
xchg
shr
mov
pop
mov
fcomi
aam
imul
out
push
sbb
repz
sahf
jo
adc
in
cld
xchg
pusha
jmp
add
xchg
movs
sar
xchg
xor
mov
or
lock
push
xchg
pop
add
movs
test
xchg
aad
sub
cld
mov
mov
leave
sar
cmps
push
aad
dec
xchg
xchg
lahf
mov
js
push
add
jge
sbb
and
fwait
mov
add
mov
or
mov
xchg
inc
inc
leave
aam
sub
push
lahf
pop
jnp
push
adc
(bad)
jg
(bad)
xchg
aaa
mov
mov
xor
cdq
lock
mov
push
pop
bound
or
retf
dec
mov
mov
daa
sub
mov
cwde
push
mov
into
xchg
adc
jno
xor
fnstcw
shl
aas
pop
push
retf
jbe
hlt
jge
cmp
jns
ins
jecxz
sti
xchg
xchg
popa
pop
dec
ret
xchg
xchg
add
xor
xchg
push
pop
or
xchg
xor
sar
and
or
mov
fdivr
and
mov
or
pop
and
mov
(bad)
xor
push
iret
xchg
call
pop
lods
xchg
imul
xchg
xor
mov
xchg
sti
retf
xor
fnsave
sub
jbe
xchg
cmp
sbb
mov
out
inc
push
add
sub
xchg
push
push
inc
(bad)
les
sub
mov
jnp
or
daa
mov
mov
cdq
push
jb
into
int
and
xchg
lock
mov
stos
sbb
add
inc
mov
xor
xor
mul
inc
mov
sahf
xor
inc
and
neg
int3
popa
pop
cmps
pop
(bad)
pusha
cmps
dec
xchg
not
das
sti
xor
jg
xchg
ret
jnp
mov
mov
sub
push
and
dec
call
jmp
xchg
jb
mov
adc
or
mov
xchg
mov
arpl
in
or
mov
retf
aaa
xchg
aad
mov
in
pop
mov
jne
cmp
loop
mov
imul
sub
fs
std
out
stos
(bad)
test
xchg
sub
mov
fs
pop
push
xor
mov
imul
mov
aad
aaa
loope
or
repnz
fs
push
mov
xchg
adc
rcr
ret
bound
jl
out
xor
mov
leave
ins
shl
pop
imul
sub
xchg
jg
push
stos
jno
push
ret
xchg
push
cwde
fild
xchg
mov
enter
test
cdq
(bad)
xor
add
shl
retf
cvtpi2ps
lock
rcr
xchg
push
in
gs
sbb
xchg
jl
adc
xchg
xchg
imul
or
arpl
fnsave
and
add
js
add
mov
mov
rcl
mov
hlt
add
cld
xchg
add
dec
cmp
sub
xchg
adc
es
arpl
pop
lods
pop
pop
jnp
popf
js
mov
and
adc
in
add
xor
xor
cmp
cmp
mov
and
xchg
mov
inc
or
pop
sub
xchg
push
jge
adc
ror
jg
xchg
inc
imul
cmc
xchg
movs
ret
clc
fwait
fs
push
hlt
int
xchg
jp
push
lock
or
into
movs
out
jae
in
ds
in
aam
int3
inc
xchg
ret
xchg
idiv
dec
retf
and
scas
xchg
pop
movs
push
(bad)
das
sbb
fwait
outs
add
test
sub
loope
out
xchg
shl
lods
cmp
cmp
fwait
aas
mov
lea
adc
xor
push
sar
sbb
fs
or
sbb
xchg
jmp
jle
sbb
mov
inc
shr
mov
je
stc
add
cmp
jg
scas
mov
lahf
xchg
xchg
scas
sahf
retf
push
test
jae
cwde
test
xchg
leave
add
je
xchg
ja
cmp
fldcw
push
daa
nop
jb
aad
movs
ja
jo
mov
pop
adc
and
stos
movs
fs
loop
addr16
lds
fwait
rcl
jl
xchg
mov
outs
out
icebp
jnp
mov
dec
adc
mov
xchg
rcr
in
mov
icebp
push
xlat
adc
push
test
cmp
pop
xchg
jno
lock
sbb
xchg
(bad)
push
aad
ret
dec
nop
adc
and
pop
cmps
xchg
push
shl
add
push
cs
test
mov
xor
cdq
mov
addr16
or
jns
(bad)
mov
hlt
sub
outs
daa
xchg
jg
retf
das
retf
jecxz
push
div
mov
int3
jg
xchg
and
inc
in
add
int3
xor
push
js
ror
or
jmp
sti
mov
or
adc
ins
lds
mov
test
cmc
mov
mov
fidivr
cmp
mov
pop
int
in
adc
rcl
and
mov
jbe
push
ret
dec
pop
retf
stc
daa
and
call
ret
cdq
mov
mov
pop
push
jb
xchg
aam
push
cmp
int
loop
jp
(bad)
gs
fwait
xchg
xchg
sub
jmp
fisttp
loopne
xchg
fldcw
push
int3
imul
dec
repnz
outs
pop
xchg
jge
test
mov
movs
stos
push
fwait
xchg
sbb
add
xchg
jmp
js
jae
and
les
clc
rcr
loopne
test
xor
pop
std
sbb
xor
lahf
mov
xchg
add
push
into
cmp
xchg
xor
jmp
sbb
inc
mov
(bad)
xor
pop
into
test
(bad)
je
push
lahf
repz
mov
mov
xor
and
push
pop
fsincos
cs
int
mov
sbb
adc
push
xchg
and
daa
add
or
repz
adc
aas
jecxz
or
inc
sbb
lods
pop
mov
fistp
stc
adc
sub
popa
adc
cmps
fwait
xchg
mov
push
and
push
sub
xchg
add
mov
bnd
pusha
jmp
cwde
mov
push
cmp
sub
jg
leave
jmp
fdivr
mov
ss
push
jmp
clc
xchg
and
dec
ins
cmp
popf
lock
xchg
mov
xor
jnp
movs
mov
adc
xchg
xchg
imul
pop
add
ins
in
xchg
pop
mov
lea
jbe
inc
jecxz
or
xacquire
push
xchg
int3
dec
ret
test
adc
sbb
lock
jle
jp
mov
mov
cmp
xor
pop
dec
(bad)
mov
dec
add
pop
cmc
out
cmps
jg
icebp
xchg
xlat
sbb
jmp
xor
pop
mov
xchg
loop
int
push
add
jo
add
(bad)
mov
mov
mov
mov
inc
mov
mov
sbb
in
cs
cwde
pop
xchg
cmp
jbe
jns
and
push
inc
xchg
or
xor
in
fsub
fistp
fiadd
sbb
movs
js
jne
sbb
cmp
movs
dec
push
sub
fnstenv
ficomp
sub
or
inc
(bad)
je
push
shl
into
stos
inc
jo
xchg
test
hlt
pop
lods
xor
push
pusha
push
xchg
sub
mov
pop
fcom
sbb
cmp
lea
jae
inc
jl
inc
xchg
add
scas
and
sbb
lock
sub
je
ret
call
xchg
xchg
in
jb
mov
fstp
xchg
sbb
push
pop
aam
stos
add
mov
mul
mov
xor
add
and
jne
push
xchg
cwde
jmp
xchg
gs
add
adc
xchg
or
fadd
jns
pop
test
popf
xchg
jmp
jae
pusha
cmps
mov
mov
aas
mov
pusha
cli
mov
xchg
rcr
xchg
xchg
mov
dec
cmp
xor
xchg
nop
aam
mov
xchg
sbb
mov
jmp
and
and
jbe
sbb
clc
xchg
push
pop
and
jmp
push
mov
sbb
mov
jo
dec
xchg
fmulp
jmp
mov
add
popf
mov
xchg
sub
sub
xchg
daa
jne
inc
stos
xchg
adc
and
adc
mov
xchg
aad
xchg
repz
in
xchg
out
and
cmp
sub
cld
xchg
pusha
or
imul
sub
fst
in
cld
push
xor
xchg
fsub
push
mov
std
pusha
inc
sbb
mov
add
in
mov
sar
pop
dec
fwait
dec
loope
push
stc
jg
addr16
mov
mov
fwait
xchg
fcomp
or
popf
pusha
add
cdq
fwait
les
js
mov
retf
test
mov
aas
leave
arpl
cld
adc
adc
in
loopne
in
scas
sbb
rcr
adc
gs
int
pop
pop
mov
xchg
jmp
mov
push
fnsave
movs
dec
xchg
dec
daa
add
enter
xchg
cli
xchg
sub
add
push
jno
sahf
pop
add
cli
dec
sub
dec
loopne
xchg
fdiv
out
push
in
pop
xchg
xor
pop
out
xchg
adc
movs
ins
xchg
cmp
sbb
mov
xchg
or
imul
pop
js
add
sub
mov
rcl
mov
(bad)
pop
fwait
mul
inc
add
or
xchg
inc
sbb
cmc
dec
mov
jns
adc
test
xor
mov
and
popf
in
lahf
mov
jmp
inc
or
xor
inc
cdq
add
jno
hlt
dec
fist
mov
push
xchg
add
or
stos
cmp
mov
je
lds
add
shr
push
xor
mov
sub
add
xchg
fstp
jnp
and
cwde
cmp
dec
jl
mov
ds
xchg
xchg
sub
pusha
jg
test
push
xchg
scas
jge
inc
es
mov
hlt
or
mov
cs
xchg
and
inc
xchg
dec
(bad)
aam
inc
pop
xchg
xor
sub
adc
loop
lock
mov
cld
mov
outs
xchg
sub
shl
xchg
xchg
jmp
in
add
repz
and
rcl
jo
loope
icebp
fistp
(bad)
mov
sub
xchg
or
push
test
cli
mov
xchg
mov
stos
aam
xchg
in
ror
outs
mov
adc
dec
jmp
in
cmp
aas
sbb
xor
js
jp
xor
ret
pop
mov
adc
mov
push
fist
xchg
dec
inc
fwait
outs
call
rol
int
xchg
test
lds
mov
stos
cmps
xchg
cmp
scas
xchg
ins
pushf
xchg
lods
jo
inc
enter
xchg
fnsave
je
sti
in
clc
dec
inc
mov
shufps
loop
xor
lock
push
mov
jns
or
outs
sbb
inc
and
xchg
sub
push
jo
rcr
repz
ds
xor
xchg
jge
daa
jno
jmp
push
sahf
xchg
mov
xchg
daa
sub
(bad)
dec
ja
xchg
pop
lods
sub
cmp
mov
mov
fwait
je
jmp
pop
push
xchg
pop
cs
pop
adc
cmps
push
sub
push
jbe
adc
pop
ins
and
push
sub
or
xchg
or
dec
jae
add
rol
adc
jmp
mov
push
sbb
jns
mov
xchg
mov
fwait
ds
cmp
and
xor
lock
or
lods
cli
xchg
xor
cdq
jbe
dec
jmp
imul
div
xchg
xchg
xor
xchg
cmp
in
dec
sub
dec
mov
inc
jmp
cld
fwait
add
sar
jle
or
cmp
xchg
outs
imul
push
push
rol
push
mov
retf
test
scas
enter
xchg
sbb
xchg
sub
or
mov
(bad)
or
push
(bad)
xchg
int3
mov
pop
dec
push
xchg
jmp
icebp
lds
(bad)
xchg
fldenv
js
xchg
loopne
fcomp
pop
or
xchg
popa
int3
cmp
xchg
je
int3
add
cmps
stos
lahf
sub
sbb
ins
sbb
(bad)
xchg
fst
pop
sub
xchg
fldenv
sub
iret
xchg
outs
loopne
sar
pop
movs
xchg
loope
cmc
aaa
hlt
mov
mov
mov
movs
or
and
js
out
cli
push
fwait
leave
ja
dec
inc
xchg
and
cmps
add
hlt
adc
mov
mov
mov
xchg
or
movs
pushf
shl
hlt
push
dec
xchg
add
mov
cld
xchg
sbb
outs
mov
inc
and
arpl
dec
adc
jns
fsub
sbb
push
xchg
jmp
and
iret
inc
push
pop
adc
jmp
dec
xchg
inc
push
push
mov
fdivr
jle
xchg
push
mov
xchg
mov
daa
xchg
xchg
imul
or
mov
mov
test
ret
pop
xchg
test
sub
push
xchg
mov
fbld
daa
int3
and
mov
cmp
adc
xor
dec
adc
out
mov
stc
lods
aas
adc
dec
sbb
gs
ins
outs
clc
mov
or
adc
adc
fldenv
dec
mov
imul
sbb
sub
loope
mov
loop
and
in
(bad)
pop
adc
inc
jg
xchg
fsubr
(bad)
lahf
add
dec
cdq
and
rcl
(bad)
aad
nop
cld
adc
sub
xchg
mov
xor
mov
mov
or
frstor
sbb
push
into
fwait
inc
(bad)
in
mov
add
mov
out
xchg
loope
inc
bound
mov
add
popf
jmp
into
adc
xchg
je
inc
jae
mov
xchg
cwde
push
sbb
dec
jmp
xor
sbb
sahf
xor
(bad)
fcom
clc
xchg
dec
arpl
xchg
imul
repnz
jns
inc
(bad)
lock
mov
mov
out
aam
fldenv
out
inc
or
xchg
adc
loop
imul
xor
mov
mov
push
rol
je
stc
push
xchg
pop
out
or
xchg
mov
stos
cmp
cmp
dec
sahf
adc
ret
popa
push
xchg
jg
push
loopne
retf
push
fcom
jl
pop
xchg
iret
std
pop
fs
mov
fcmovu
add
(bad)
arpl
aaa
mov
pop
xchg
test
nop
xchg
jg
jp
add
pop
push
outs
shr
imul
popf
cmps
mov
ja
dec
xchg
adc
(bad)
fnstcw
les
sub
sbb
test
xchg
push
iret
fst
repnz
retf
cmps
push
cld
rol
ror
xchg
test
xor
xchg
mov
nop
xchg
cs
sub
xlat
fwait
clc
cld
mov
aas
vcvtps2dq
cs
push
(bad)
cmp
push
es
dec
mov
ins
out
xchg
mov
push
dec
mov
dec
movs
cmps
loopne
(bad)
push
pop
retf
cmp
or
cdq
mov
add
cdq
adc
jno
popa
mov
je
adc
in
xchg
retf
cs
mov
test
push
adc
inc
push
jmp
popa
sbb
xchg
jne
mov
xchg
ins
mov
adc
adc
fcom
fsub
push
cmp
mov
xchg
enter
push
in
mov
xchg
dec
icebp
loopne
jg
lods
stos
cwde
add
and
push
jp
inc
mov
(bad)
push
rcl
rcl
adc
sbb
mov
jecxz
int3
addr16
mov
mov
inc
popf
js
xchg
test
scas
inc
js
and
rol
test
mov
mov
xchg
or
pop
loop
push
ret
xchg
ret
lods
xor
mov
ins
aas
mov
xchg
jmp
leave
xor
push
fistp
pop
xchg
(bad)
in
cdq
cs
add
xchg
pop
mov
cmp
int3
jp
xchg
or
mov
imul
ss
xor
push
xchg
push
fld
dec
xchg
in
pop
ins
retf
and
mov
sti
adc
pop
mov
dec
imul
xchg
xlat
repnz
xchg
stc
dec
adc
xchg
xchg
fwait
cmps
stos
mov
inc
adc
inc
into
push
or
xchg
call
ins
cmp
data16
add
cli
outs
or
stos
jle
mov
std
call
aam
mov
addr16
adc
mov
fsubr
int
adc
outs
xchg
sub
rcr
xchg
jne
add
fwait
pop
mov
dec
icebp
inc
test
pop
mov
mov
aam
shr
pop
cmps
and
loopne
xchg
jnp
adc
rcl
dec
xchg
(bad)
out
pushf
mov
rcl
ins
inc
xchg
bound
push
jp
daa
xchg
xchg
inc
push
aaa
dec
sub
inc
retf
mov
xchg
movs
leave
xchg
mov
xor
xchg
xchg
mov
mov
push
xchg
scas
or
jns
stos
adc
(bad)
adc
pop
xchg
adc
xchg
sbb
sub
aad
add
pop
mov
hlt
pusha
out
sub
xchg
and
inc
xchg
iret
sbb
mov
inc
inc
aad
dec
rol
mov
xchg
push
pop
add
cdq
mov
xchg
push
jnp
adc
ret
adc
cmp
call
outs
jp
nop
xchg
imul
mov
int
lea
mov
mov
xchg
mov
cmp
dec
xchg
lds
adc
stos
mov
inc
xchg
pop
in
(bad)
fdivrp
mov
push
outs
cs
and
call
push
test
jmp
or
bound
adc
pop
fdivrp
gs
xchg
jb
ins
dec
daa
mov
in
and
rcl
xlat
aaa
outs
xchg
rcr
and
adc
jnp
ins
xchg
mov
pop
xchg
sbb
in
sbb
mov
cmps
ins
stos
xchg
xchg
into
sbb
sub
inc
imul
jne
loope
sbb
(bad)
or
and
mov
stos
enter
and
arpl
sbb
add
push
and
sbb
xchg
fmul
scas
ret
in
xor
sub
ja
xor
jge
dec
call
add
add
(bad)
or
loope
xor
and
mov
(bad)
mov
add
adc
sbb
inc
mov
pop
push
adc
or
jo
int
inc
pop
push
mov
adc
cmps
sbb
je
aaa
fwait
and
mov
(bad)
adc
inc
sti
ror
mov
mov
stos
xor
repz
and
xchg
add
fs
retf
add
xchg
inc
xchg
cmp
fwait
test
popa
inc
mov
loopne
and
shr
jle
push
cs
sub
xor
stc
stos
jecxz
nop
out
movs
xchg
cld
ret
jmp
outs
test
xchg
push
xor
bound
loop
xchg
out
xchg
push
jns
mov
mov
mov
in
or
or
xchg
mov
cli
xchg
in
pop
sar
sar
adc
movs
push
and
imul
nop
mov
pop
cmp
(bad)
xor
jno
fisubr
je
mov
xchg
inc
retf
pop
push
or
mov
je
leave
inc
outs
sbb
cmc
or
mov
add
xchg
shl
pop
mov
or
and
xchg
hlt
cmp
sub
mov
fisub
test
mov
out
popf
daa
adc
xor
pop
setnp
inc
jbe
test
xlat
jecxz
xchg
ja
call
add
loope
lds
jl
cld
jo
dec
fadd
push
pop
xchg
aam
xor
outs
pop
xchg
mov
in
jne
inc
or
cmc
xchg
sbb
leave
sub
mov
aaa
loope
fild
mov
mov
xchg
push
push
dec
sub
mov
xchg
jecxz
mov
ins
mov
call
mov
jle
xchg
dec
aas
jl
pop
mov
pop
xchg
cmp
iret
fild
push
cmp
fldenv
or
or
hlt
cdq
push
out
int3
inc
pop
adc
or
imul
cmp
retf
sbb
je
dec
mov
nop
pop
jp
mul
mov
cld
adc
pop
pop
test
fild
xchg
outs
das
nop
call
xchg
cwde
mov
or
pusha
aad
setl
icebp
xor
fptan
mov
ds
jo
retf
mov
jno
stos
pop
iret
add
jecxz
adc
test
xchg
sub
push
imul
out
push
out
mov
cdq
ret
pop
mov
movs
loopne
sub
aam
iret
out
push
xchg
push
enter
test
xchg
mov
stos
mov
fdiv
xchg
or
mov
jmp
mov
pop
icebp
push
int3
fsub
xchg
inc
call
mov
jge
inc
es
(bad)
xchg
mov
dec
or
mov
jbe
les
sti
add
xchg
add
shr
sub
xchg
into
mov
push
mov
arpl
call
jbe
(bad)
pop
int
hlt
mov
jp
inc
xchg
pop
rcl
dec
stos
popf
inc
fwait
jl
push
aam
fs
sub
cmc
add
ret
push
in
jne
push
ins
inc
or
xchg
mov
icebp
aas
popa
and
(bad)
xchg
push
cs
and
xchg
cmp
inc
das
imul
mov
pop
and
push
mov
mov
shl
or
mov
adc
fwait
add
or
rol
mov
repz
inc
xchg
(bad)
jmp
fucomip
sub
xchg
test
enter
pop
cmps
ins
mov
inc
jmp
push
or
xchg
dec
mov
mov
xchg
or
les
in
cmp
pop
dec
add
mov
cli
mov
je
or
xor
fwait
jl
lea
jb
in
test
xchg
pop
cmp
enter
adc
sbb
cs
fucom
ja
enter
xchg
push
dec
jo
cs
cwde
cmp
mov
xchg
into
sub
fs
add
dec
fdivr
loop
sbb
mov
adc
sar
mov
cwde
jb
add
pop
jbe
or
jl
cmps
test
imul
add
(bad)
call
inc
fsubrp
movs
nop
mov
pop
aaa
push
and
push
shr
fs
jb
aas
pop
(bad)
xor
push
xchg
sub
dec
sub
pop
data16
sbb
jns
imul
shl
dec
lds
pop
pop
cmp
add
and
push
xchg
pop
shl
bound
call
dec
mov
pop
push
xchg
jmp
or
inc
cs
dec
xchg
jmp
(bad)
mov
xchg
aaa
test
add
sahf
push
in
xchg
inc
cmp
adc
xchg
dec
pop
icebp
mov
xchg
outs
mov
loop
xchg
xor
shr
mov
les
cmp
push
fst
ins
ins
mov
jo
fisttp
adc
lods
ret
push
xchg
in
iret
out
add
in
mov
inc
mov
lea
xchg
pop
jmp
sahf
push
(bad)
ficomp
sub
fucomip
xchg
jns
arpl
inc
out
sahf
iret
hlt
dec
push
gs
pop
xchg
cs
dec
or
or
xchg
jmp
sbb
jno
fstp
movs
nop
xchg
push
push
adc
int3
sahf
adc
jns
sar
fyl2xp1
mov
jecxz
icebp
adc
mov
push
mov
out
mov
xchg
in
cmc
aas
rcl
pop
je
xchg
repz
xlat
push
in
stos
mov
retf
xchg
outs
inc
xchg
xor
pop
jne
xchg
mov
cwde
xor
test
push
and
paddsb
fwait
add
je
lods
imul
xchg
add
or
ins
sbb
mov
mov
push
mov
jp
mov
push
adc
and
xchg
inc
mov
mov
das
in
jo
xchg
sbb
pop
jb
or
loop
add
jae
repz
nop
mov
mov
outs
into
jne
mov
xchg
push
xchg
rcl
test
inc
dec
ret
xchg
mov
cmc
push
xlat
rcl
cmp
xchg
and
push
aaa
je
add
and
xchg
cmps
cmp
adc
test
or
xchg
jae
mov
inc
fdiv
and
call
hlt
xor
xchg
sbb
xchg
fmul
mov
mov
repz
pop
je
idiv
mov
sbb
ficomp
xchg
scas
(bad)
imul
inc
(bad)
xchg
sub
sub
popf
jbe
push
push
fist
jle
dec
cmps
or
xchg
bound
xchg
ja
test
xchg
int
adc
je
mov
jnp
mov
xchg
xor
inc
or
cmp
sbb
pop
sar
sub
aam
pop
pop
fcom
data16
gs
pusha
sbb
adc
add
or
add
xchg
push
mov
cmp
inc
pop
stos
mov
mov
cmp
stos
rcr
push
sub
xlat
mov
cmp
add
mov
(bad)
mov
sbb
(bad)
arpl
add
outs
add
cwde
dec
mov
pushf
push
ret
jl
test
dec
xor
mov
mov
mov
sub
cdq
es
fistp
jle
in
retf
cli
rcr
call
inc
or
fs
cwde
xchg
mov
aaa
inc
xchg
je
fwait
pop
cmp
repnz
repz
add
xchg
dec
scas
into
(bad)
scas
mov
in
push
arpl
pop
xchg
xchg
cld
outs
sahf
lea
sub
push
(bad)
aaa
dec
in
mov
or
jmp
dec
ret
fdiv
mov
lods
xchg
xchg
jo
inc
xchg
cmp
test
xchg
sbb
xchg
inc
xor
dec
xchg
in
mov
lahf
call
adc
add
xor
fldenv
push
xchg
sub
out
hlt
mov
push
inc
sub
outs
je
pop
stos
adc
cmp
retf
push
ds
call
js
inc
xchg
test
jg
test
cli
cmps
call
test
gs
mov
jle
and
(bad)
xchg
aam
mov
dec
scas
xchg
cmps
sbb
fldenv
or
adc
push
fmul
mov
mov
mov
sub
pop
lods
fwait
mov
mov
into
mov
in
or
adc
xchg
ret
lea
les
push
int3
xchg
jae
mov
or
hlt
(bad)
ror
adc
sub
fs
push
aam
jns
add
mov
dec
pop
sbb
pop
les
dec
mov
cld
push
cmp
lods
mov
and
aam
pop
or
out
jmp
cmc
and
xchg
xchg
mov
mov
inc
xor
fs
dec
adc
inc
dec
mov
lds
jp
xchg
add
or
das
xor
add
cli
stc
pop
movs
jo
or
add
hlt
pop
cmp
sub
imul
jmp
xchg
or
aad
pop
cmps
ja
xchg
(bad)
pop
add
pushf
push
xor
xchg
loopne
das
pop
mov
leave
jge
push
xor
push
mov
xchg
jo
sbb
mov
aam
lock
xchg
fistp
xor
mov
jl
xchg
dec
add
xchg
push
aad
mov
cdq
or
xchg
and
jle
xchg
jl
mov
mov
xchg
ret
pop
scas
and
sbb
pop
mov
inc
sbb
dec
jb
dec
dec
xchg
mov
and
jnp
jl
jns
fidiv
test
sti
push
fs
mov
mov
sbb
push
push
shr
leave
xchg
push
enter
stc
jecxz
xchg
jbe
dec
and
adc
dec
test
mov
inc
xor
jge
and
pop
loopne
je
mov
mov
dec
aad
movs
or
cmp
hlt
fldenv
push
dec
outs
jmp
mov
test
jbe
addr16
add
xor
jp
cmp
pop
(bad)
mov
fcom
push
sahf
das
aam
out
cmp
(bad)
mov
test
das
sbb
or
scas
out
ficomp
mov
pop
dec
icebp
fistp
dec
popf
xchg
pushf
ldmxcsr
mov
dec
and
shl
dec
xchg
jae
mov
vandnps
push
fs
aaa
jle
sahf
fwait
pop
outs
shl
push
pop
mov
cdq
xchg
xor
and
xchg
ins
pop
mov
add
sub
xchg
inc
call
xchg
sbb
sub
mov
xchg
jmp
(bad)
lods
fdivr
xchg
or
adc
mov
mov
jnp
addr16
sahf
(bad)
sub
out
xchg
and
and
enter
out
xor
add
dec
hlt
pop
xchg
das
push
call
push
aas
inc
inc
inc
pop
xor
retf
xchg
sbb
or
cwde
xor
jno
inc
fstp
xchg
or
adc
adc
add
loopne
in
and
xchg
lock
cli
icebp
movs
xor
xchg
jl
test
sub
(bad)
xchg
or
sbb
jmp
xchg
jge
inc
ret
cmps
loopne
sub
jg
sahf
std
fwait
sub
push
pop
mov
loop
imul
cmc
push
jmp
xor
or
mov
shr
sbb
popf
xchg
(bad)
mov
hlt
dec
push
stos
cmp
std
pop
mov
ins
fisub
mov
enter
test
pop
jle
mov
dec
mov
pop
xchg
push
pop
clc
and
sub
xchg
cmp
cmp
int
fmul
adc
xchg
test
mov
call
mov
cwde
cld
push
sub
inc
mov
push
and
pop
out
clc
mov
xchg
cmps
arpl
inc
or
cmp
rcl
leave
js
jno
xor
int3
lods
not
test
je
dec
mov
sub
ins
les
fcmovbe
xchg
xchg
stos
outs
test
mov
cld
mov
jle
xchg
sqrtps
mov
loopne
(bad)
and
add
or
cwde
adc
rol
inc
retf
mov
or
repz
call
lahf
and
adc
xchg
loope
ins
mov
xchg
movs
mov
mov
into
mov
add
stc
xchg
out
mov
loope
out
(bad)
xchg
ins
mov
cmp
jl
out
je
fcomp
pop
test
pop
shr
xchg
push
jg
mov
xchg
and
fcom
fcom
jns
mov
cdq
inc
jne
out
fdivp
stc
inc
push
push
repnz
icebp
ins
sti
push
dec
sbb
sub
dec
jnp
(bad)
loopne
call
pop
xchg
push
ret
shl
xchg
ins
sub
(bad)
not
cmps
rcl
pop
test
cmp
xchg
clc
and
nop
mov
xchg
xchg
jl
pop
das
ins
xor
in
cld
repz
xchg
mov
adc
ret
xor
mov
out
hlt
retf
hlt
cmp
dec
dec
jne
xchg
adc
lock
jnp
xor
xchg
pop
test
add
cmp
(bad)
cli
add
rcl
xchg
les
jmp
mov
retf
dec
and
push
ret
fld
adc
ret
jle
stos
leave
shl
or
out
shl
pop
and
pop
dec
xchg
pop
enter
xchg
mov
adc
xchg
add
paddd
int
int3
mov
pop
fist
and
out
jo
pop
sti
out
gs
dec
imul
mov
sbb
daa
adc
ss
int
iret
xor
jl
rcl
xchg
mov
popa
retf
mov
xor
sbb
xchg
aam
mov
int3
js
das
xchg
lsl
popa
sub
mov
dec
pop
dec
adc
rcl
xchg
in
mov
bound
clc
xchg
or
retf
jmp
push
push
not
fiadd
adc
hlt
neg
popf
in
push
or
pop
xor
test
xor
ror
pop
jl
adc
fwait
add
push
fld
jae
cmp
xchg
neg
xchg
jp
lock
(bad)
(bad)
xor
(bad)
mov
pop
xor
ins
dec
pop
mov
hlt
push
jge
(bad)
stos
pop
ror
mov
mov
inc
lock
mov
hlt
fisttp
rcl
into
outs
mov
adc
pop
mov
xchg
not
out
xchg
in
dec
ins
inc
dec
jl
mov
(bad)
fist
int
push
es
mov
fisub
inc
lods
rcl
test
stos
adc
pop
cmp
int3
pop
cmps
pop
fsub
inc
(bad)
aaa
mov
pop
cli
xchg
hlt
addr16
rol
mov
hlt
push
pop
push
xor
xchg
dec
mov
and
fistp
xchg
fmulp
ret
xchg
fs
fist
sbb
out
add
push
xchg
call
in
test
cmp
and
neg
fldz
ins
or
xchg
xchg
mov
fidivr
or
fiadd
outs
add
sbb
adc
xchg
adc
mov
sub
sub
xchg
in
or
test
sar
pop
dec
adc
cmp
bswap
adc
add
hlt
mov
arpl
aas
jmp
or
movs
xor
xchg
bound
cs
icebp
and
cwde
ret
(bad)
push
xchg
ret
ins
movs
fld
gs
xchg
and
mov
lds
stos
arpl
add
mov
jmp
mov
adc
pop
add
add
clc
fstp
or
xchg
cmp
je
popf
dec
fst
xchg
test
das
pop
add
cmp
lods
(bad)
stos
lods
inc
rol
mov
cmp
test
int
into
and
jmp
sub
cwde
push
out
xchg
js
int3
xchg
mov
fdiv
ins
scas
comiss
cmps
(bad)
out
cwde
xchg
sub
fcmovu
jmp
(bad)
es
cmps
movs
addr16
repz
(bad)
ds
xchg
xor
or
pop
out
inc
jmp
adc
(bad)
or
test
popa
or
mov
call
xchg
cli
es
and
ja
jl
outs
inc
xchg
add
rcr
jne
je
repnz
cmp
push
and
mov
inc
xchg
mov
cli
hlt
in
or
ret
pop
shl
mov
movs
cld
mov
mov
aam
sbb
push
dec
mov
sub
sub
mov
xor
mov
rcr
or
xchg
push
adc
std
sbb
xor
add
test
call
addr16
mov
push
sub
mov
mov
pop
lahf
outs
mov
out
xchg
test
sub
xchg
aad
je
mov
or
ins
sbb
push
jne
sbb
test
cmp
pop
jp
fwait
mov
mov
add
stos
inc
jbe
pop
repz
jae
mov
xchg
rol
retf
or
xchg
retf
inc
(bad)
sti
push
cwde
aas
xchg
sub
rcr
xor
cmp
lea
loop
mov
jnp
fadd
or
lods
pop
je
repz
xchg
sub
sub
inc
aam
cwde
adc
sar
adc
xchg
js
aas
repnz
ficom
mov
and
pop
xchg
sbb
add
in
pushf
inc
fwait
clc
mov
fld
pop
outs
dec
ret
xor
xchg
pushf
and
pop
and
cld
(bad)
loope
and
lahf
mov
cs
push
xchg
lea
mov
arpl
mov
retf
iret
cdq
mov
pop
push
dec
jmp
jnp
mov
push
sbb
call
into
xchg
xor
es
xchg
outs
or
nop
cmp
mov
jmp
and
sbb
xchg
fist
pusha
mov
movs
ret
xor
aam
push
daa
sub
or
sub
ror
and
cmp
inc
xchg
mov
and
add
xor
sbb
mov
jo
cmp
std
mov
repz
je
jmp
int3
nop
mov
cmc
neg
shl
jl
aam
sub
mov
pop
scas
add
ret
mov
push
lea
(bad)
push
push
shl
adc
call
push
ret
mov
dec
int3
ss
je
mov
xchg
call
mov
inc
int3
push
xchg
and
je
nop
xchg
xchg
push
test
push
into
fsubr
mov
ret
pop
in
stos
nop
cmc
xchg
xchg
dec
sub
test
push
out
xchg
sbb
lahf
fisttp
aas
je
mov
xchg
inc
mov
mov
arpl
add
xchg
push
jne
dec
jecxz
adc
popf
and
pop
sbb
xchg
in
loop
jae
dec
dec
(bad)
cwde
stc
jno
push
pop
inc
xlat
rcl
ins
imul
mov
mov
xchg
adc
iret
dec
into
push
sbb
sti
add
xor
rol
test
pop
mov
mov
xlat
jmp
jmp
sub
loope
mov
shr
cwde
xchg
jmp
in
cmps
cmc
enter
fcomp
(bad)
repnz
mov
ror
ret
or
xchg
adc
clc
rcl
imul
outs
adc
push
bound
sbb
mov
les
xchg
loopne
inc
pop
mov
test
hlt
xchg
inc
xchg
or
jp
xor
xchg
jp
outs
aam
xchg
pop
es
std
aaa
sub
movs
das
xchg
sub
icebp
test
rol
lea
xchg
or
call
xchg
repz
jmp
arpl
cmp
mov
neg
dec
and
into
scas
jg
pop
xchg
test
inc
fisttp
sbb
fmul
dec
cs
or
std
mov
jmp
das
(bad)
cs
sti
jae
popf
xchg
leave
rcl
push
mov
pop
xor
sub
popf
adc
addr16
mov
sub
into
out
inc
scas
xchg
add
call
cmp
xor
cmp
ret
inc
repz
fbld
scas
cmp
xchg
aam
mov
sbb
mov
and
mov
in
mov
sbb
push
sbb
or
(bad)
mov
mov
out
xchg
sbb
imul
in
xchg
sbb
(bad)
adc
jbe
xchg
sbb
mov
mov
std
xchg
hlt
or
cwde
adc
psubsw
cmp
js
outs
mov
repnz
mov
retf
lds
pop
adc
pop
xchg
push
sbb
in
pushf
xchg
icebp
popf
iret
mov
xchg
sti
int3
iret
test
adc
repz
xchg
int3
fisttp
mov
fwait
jecxz
dec
(bad)
jmp
es
imul
hlt
mov
neg
add
xchg
jg
ja
adc
cmps
inc
neg
xchg
stc
push
test
dec
inc
mov
xchg
xor
or
mov
mov
outs
movs
repnz
jns
push
hlt
fld
dec
mov
(bad)
push
leave
dec
fs
push
xchg
pop
enter
les
mov
push
push
push
mov
aas
out
cmp
fs
(bad)
popf
ins
push
pop
(bad)
hlt
xchg
xchg
sbb
dec
add
xchg
xchg
and
inc
mov
adc
sub
int
dec
mov
cmp
cmp
xchg
xor
loope
ins
mov
xor
mov
retf
dec
jg
hlt
add
aam
cmp
pop
xchg
out
fst
cmp
std
inc
out
aas
xchg
jle
call
stos
xchg
xor
ret
or
adc
in
xchg
fs
xchg
leave
push
cld
xchg
ins
xor
xchg
and
adc
ja
fwait
popa
add
mov
cmp
es
int3
call
imul
rcr
mov
mov
xchg
aam
js
(bad)
sub
sbb
aaa
pop
ficom
mov
or
jp
sbb
xchg
leave
cmc
stos
cs
test
push
cmp
dec
xchg
icebp
xchg
sub
cdq
cmp
fwait
dec
retf
mov
fadd
xor
dec
mov
jnp
sahf
push
adc
loopne
pusha
inc
out
xchg
pop
jbe
test
mov
jno
repz
mov
lods
out
xchg
mov
sub
mov
sar
cli
mov
push
xchg
mov
dec
lock
hlt
lods
jb
sbb
fstp
cmp
mov
cdq
nop
push
sub
xchg
mov
stos
adc
arpl
js
aaa
inc
pushf
xchg
sub
nop
adc
icebp
not
mov
xchg
mov
in
push
and
loope
ds
or
into
lea
xchg
test
aas
nop
pusha
jp
stc
sub
out
popf
push
aam
rcl
mov
in
xchg
ss
xlat
scas
xchg
or
xor
push
mov
push
pop
dec
into
ret
(bad)
ror
jbe
inc
sbb
cmp
mov
xchg
xor
pop
pop
adc
jo
jns
loope
fist
leave
stos
xchg
mov
popf
pop
mov
push
xchg
daa
test
scas
inc
mov
cmc
pop
push
push
cwde
mov
ret
push
inc
fcomip
sti
xchg
lea
sbb
das
dec
add
xchg
cmp
inc
xchg
pop
mov
mov
fsub
stos
mov
dec
xchg
and
movs
mov
inc
mov
or
loop
xchg
js
ss
xchg
hlt
imul
clc
iret
les
(bad)
je
mov
in
lock
inc
mov
mov
cwde
adc
ret
xchg
out
movs
in
jno
enter
pop
cwde
shl
jb
xchg
leave
mov
add
sbb
mov
and
mov
movs
ss
push
mov
inc
jl
dec
mov
add
push
jae
xchg
and
in
mov
pop
rol
xchg
dec
loop
mov
xchg
retf
(bad)
sub
jmp
mov
dec
inc
jg
rcl
cs
xchg
in
icebp
dec
inc
jg
in
xchg
(bad)
mov
fsubp
xchg
test
mov
aam
cmp
or
in
shl
pavgb
pop
push
xchg
call
mov
or
je
inc
and
sbb
lds
cmps
ja
(bad)
int3
adc
adc
inc
cmp
repz
dec
xchg
int
jo
mov
les
push
xlat
jg
dec
(bad)
xchg
mov
xor
push
sbb
xor
inc
mov
test
xchg
lea
dec
mov
popf
and
leave
std
adc
cmp
jp
mov
fwait
lahf
sub
scas
mov
cmp
test
pop
jl
std
xchg
mov
sub
xchg
outs
xor
add
ins
sub
repz
jecxz
dec
push
fwait
test
add
pop
cmp
xchg
ins
mov
or
xchg
repz
push
inc
test
fsubr
xchg
lahf
jge
pop
cmp
lea
pop
cmc
icebp
and
xchg
pop
lods
and
outs
xchg
ror
loopne
je
jo
pusha
test
push
sub
xchg
jge
fnstcw
(bad)
jns
fisttp
and
jecxz
dec
jbe
mov
out
cli
xor
xchg
adc
aad
cmps
retf
xchg
mov
xchg
xchg
rcr
rcl
xchg
xchg
jb
arpl
sub
xor
in
pop
or
mov
cmp
adc
aam
push
ins
fcom
xchg
xor
sub
mov
lahf
iret
adc
mov
and
(bad)
(bad)
loop
out
mov
loop
xor
addr16
xor
js
xchg
stc
mov
mov
xchg
xchg
loop
or
cmps
jmp
dec
add
add
test
jl
aad
pusha
inc
mov
clc
push
daa
xchg
xchg
jbe
loopne
mov
sbb
ret
adc
xchg
xchg
aam
and
xchg
fist
sti
je
pop
push
js
adc
sbb
repnz
dec
xchg
xor
xlat
test
mov
xchg
clc
push
sti
mov
xchg
fimul
icebp
psrld
xchg
popa
ja
xchg
dec
mov
jle
push
mul
test
cmc
sbb
xchg
outs
adc
out
call
sub
jl
outs
ja
inc
les
je
jno
int
xchg
jbe
leave
xor
and
fcmovne
mov
mov
shl
jmp
or
xor
xchg
int
adc
or
data16
shl
xchg
xchg
int3
das
mov
imul
movs
jg
outs
adc
call
pop
aas
mov
aad
int
fstp
stc
jp
push
mov
aaa
adc
inc
xchg
test
outs
and
leave
xchg
mov
xchg
fdiv
inc
inc
hlt
or
and
sbb
(bad)
jg
mov
pop
cmp
adc
adc
mov
ss
icebp
repz
and
push
xchg
(bad)
sti
jecxz
call
js
sub
pop
push
mov
xchg
mov
adc
in
std
das
push
popa
and
add
or
mov
jns
xchg
pushf
push
xchg
lahf
je
pop
popa
bnd
add
xchg
sbb
divps
imul
div
cmp
cmp
mov
aam
push
fwait
jl
adc
pop
sub
or
push
cmp
and
mov
cmp
fdivp
idiv
repz
dec
cmps
aam
iret
std
sti
das
jo
leave
sub
pushf
xchg
addr16
mov
push
inc
mov
sbb
mov
iret
movs
xchg
fstp
mov
mov
cwde
xchg
adc
push
dec
enter
cmp
(bad)
(bad)
stos
xchg
push
pop
mov
push
adc
push
jae
mov
aaa
dec
into
xchg
jo
jns
in
mov
or
shl
mov
pop
popa
or
pushf
stc
icebp
les
lods
dec
fwait
mov
xchg
lahf
sbb
sub
in
shl
xchg
xchg
(bad)
aad
out
cmps
xor
push
push
mov
je
imul
cmc
mov
jmp
pop
js
adc
push
pop
xchg
adc
daa
ins
pop
mov
je
inc
or
mov
aam
mov
or
mov
stc
xchg
mov
jge
scas
adc
outs
or
mov
bnd
bound
mov
cmp
(bad)
sbb
jb
mov
fimul
dec
or
mov
adc
add
fisubr
add
xchg
popf
sub
test
(bad)
aas
outs
fiadd
fucomi
xchg
das
les
loop
mov
xchg
mov
jne
popf
xchg
fild
cwde
lock
mov
mov
pop
xchg
je
movs
jge
jne
pop
xchg
xchg
rol
pop
fist
(bad)
mov
dec
cmps
xchg
pop
mov
sbb
shl
pop
xchg
aaa
loope
rol
push
mov
mov
into
mov
jge
xor
mov
xchg
lea
aad
adc
jns
cli
je
xchg
lods
push
in
out
jnp
mov
xchg
dec
in
push
ins
mov
sar
xchg
pop
rcr
loope
jp
xor
mov
and
mov
xchg
dec
scas
iret
int
and
xchg
jl
lea
test
xchg
data16
gs
push
ins
sub
popf
mov
jle
shl
mov
scas
sub
(bad)
js
xlat
add
jo
mov
scas
cwde
in
dec
push
shl
xchg
into
pop
dec
xchg
fidivr
xchg
cld
cmp
sti
push
add
dec
jo
push
sar
out
push
and
mov
cmps
push
in
mov
sbb
or
and
adc
es
xchg
ror
push
fwait
nop
mov
cld
dec
aam
mov
in
xchg
and
aaa
cmp
and
iret
popa
hlt
or
cmps
js
lock
and
arpl
int3
pop
xchg
push
and
inc
cmp
add
mov
dec
(bad)
mov
mov
lahf
ja
out
push
xchg
and
xchg
or
pop
dec
and
cmp
bnd
out
add
daa
(bad)
xchg
mov
call
fist
cld
push
xchg
fisubr
xor
js
enter
xchg
fwait
dec
mov
jnp
icebp
aas
mov
sti
and
sbb
add
retf
iret
push
pop
sti
jmp
ficom
or
js
test
pop
fcom
dec
sbb
movs
or
fdiv
jmp
loopne
adc
dec
mov
pop
rol
xchg
push
xchg
test
pop
cmp
adc
cwde
cmp
xchg
jb
sub
outs
mov
xchg
mov
dec
cdq
add
fldenv
out
call
cli
dec
xchg
jne
mov
mov
sbb
not
mov
push
lods
pop
cmp
test
xchg
or
retf
or
mov
ds
jbe
dec
xchg
(bad)
xlat
push
jge
fwait
(bad)
stos
sbb
icebp
sbb
(bad)
pop
fs
sub
xchg
outs
jg
or
xchg
mov
fwait
xor
add
stos
test
idiv
pop
push
xor
xchg
xchg
mov
xchg
adc
sar
xchg
loope
lock
cmps
shl
pop
xor
xchg
mov
retf
push
sar
sub
sbb
and
out
jmp
or
push
jmp
add
mov
cmp
jbe
jo
mov
push
inc
out
sbb
cmc
xchg
push
mov
push
dec
mov
add
test
dec
push
mov
cmp
ret
stc
je
sbb
out
fst
push
cli
push
ret
outs
cmp
nop
cmc
adc
sahf
xchg
imul
scas
pusha
sub
lahf
mov
adc
(bad)
das
je
sbb
adc
ss
xchg
xchg
fsub
pop
rcl
xor
adc
les
pop
or
nop
jb
adc
xchg
add
inc
pop
push
xchg
popf
inc
mov
cdq
cmp
xchg
pop
les
cmps
fidiv
ja
sub
xchg
push
sahf
and
jecxz
sbb
xchg
mov
ss
hlt
dec
lods
xchg
jne
pop
sar
xor
loope
neg
xchg
dec
push
xor
pop
xor
dec
mov
push
inc
cdq
aas
pushf
int3
call
jl
xchg
mov
fcmovu
dec
xchg
mov
je
jnp
xor
ret
jmp
shl
xchg
iret
add
in
icebp
mov
xor
adc
xchg
adc
and
aam
inc
cwde
cli
fist
mov
faddp
in
sub
xchg
leave
test
sub
jne
les
test
dec
jnp
outs
nop
das
fwait
mov
cmp
cld
movs
cs
xor
icebp
in
nop
jbe
test
adc
movs
xchg
aad
mov
jnp
inc
push
jmp
push
jno
test
mov
mov
xchg
mov
int3
stc
loopne
pop
mov
and
aam
mov
xchg
das
xor
enter
lock
test
adc
ins
in
lods
inc
pusha
adc
xchg
add
pop
sti
mov
stos
mov
fisttp
xchg
aas
inc
stc
jg
mov
jmp
adc
out
xchg
sahf
mov
jp
clc
adc
mov
cmp
aam
inc
rcr
lea
movs
mov
xchg
jg
in
sub
mov
retf
gs
push
xchg
ss
add
cmp
xchg
(bad)
jecxz
ret
je
xchg
sbb
jnp
shl
push
xchg
retf
sbb
(bad)
lea
add
or
popf
adc
mov
xchg
xchg
jb
jl
mov
pop
stos
xchg
jle
nop
add
ret
popf
or
pop
xchg
in
inc
xchg
xchg
daa
ins
push
xor
ins
sti
retf
call
test
sub
daa
xchg
in
out
push
mov
sub
push
mov
xchg
xor
iret
stc
push
gs
mov
push
out
push
jmp
pop
repnz
mov
xchg
mov
fsubr
xchg
push
(bad)
js
or
(bad)
push
xor
inc
gs
fsub
ss
xchg
lock
aas
dec
push
xchg
ds
adc
mov
xor
stos
pop
push
and
sub
nop
xchg
ins
popf
sbb
stc
daa
je
mov
or
adc
jle
mov
cmp
inc
mov
cmp
mov
cmc
xchg
aas
out
ins
xor
rcl
inc
mov
out
ja
xchg
mov
and
ror
mov
test
push
xchg
sbb
(bad)
addr16
call
push
popf
aam
in
xchg
lock
cmp
xchg
ficom
pop
fwait
jecxz
push
call
loopne
in
sub
mov
mov
or
jl
adc
pop
xchg
dec
cmps
fcom
lods
pop
fs
nop
jmp
xchg
sbb
sub
xchg
imul
fcmovb
cmps
in
cdq
cwde
mov
pushf
inc
cmp
inc
test
mov
pop
outs
adc
pop
sub
xor
xchg
jno
pop
ret
fidiv
xor
out
aam
mov
xchg
jge
enter
jns
xchg
jle
sbb
xchg
inc
mov
sar
xchg
dec
mov
sub
sub
xchg
outs
les
push
mov
fwait
test
mov
loopne
sti
xchg
(bad)
fmul
test
sub
into
test
fst
scas
mov
cs
rdmsr
pop
in
xchg
rcr
inc
mov
shr
int3
mov
gs
mov
or
add
daa
adc
cmc
mov
jmp
clc
pop
mov
aad
dec
or
mov
xchg
sbb
mov
inc
(bad)
xor
cmp
fidivr
pop
ins
mov
xchg
aad
adc
aaa
test
pop
lds
fwait
mov
shl
xchg
shr
adc
fmul
adc
mov
and
nop
ins
dec
xchg
mov
fwait
jp
xchg
loope
cmps
cmp
seta
mov
fcom
mov
fucom
cmps
sti
and
and
xchg
mov
(bad)
ins
jne
sbb
mov
ds
xchg
dec
jmp
rcr
in
and
inc
cmps
je
bnd
mov
mov
je
lock
call
xor
(bad)
xchg
mov
lods
xchg
popf
scas
push
inc
xchg
mov
fldenv
dec
loopne
jle
cmp
adc
(bad)
pusha
pop
sub
test
loopne
cmp
in
xchg
loope
adc
iret
loop
shl
xchg
mov
ror
xlat
lahf
lock
mov
lea
int3
bound
jg
cmp
ret
in
mov
xchg
mov
sub
mov
fisub
mov
sbb
nop
ret
mov
inc
in
xchg
sbb
sbb
xor
jae
aaa
shl
xchg
out
loope
add
test
dec
jae
push
adc
jo
pop
bound
cdq
xchg
in
into
jno
push
add
xor
pop
rcr
xor
test
xchg
rcl
sbb
mov
mov
xor
or
ins
xchg
aad
popf
xchg
pop
into
xor
mov
loopne
scas
sti
cld
(bad)
hlt
arpl
mov
in
int3
sbb
mov
xor
aad
dec
xchg
cmp
sub
and
mov
mov
test
idiv
mov
jbe
and
add
out
les
ret
pop
add
jae
xor
pop
in
fstp
mov
ja
sahf
movs
les
test
mov
jbe
jae
push
xchg
pop
dec
ins
jp
adc
mul
aam
call
out
dec
pop
xchg
movs
into
es
imul
ret
and
xchg
and
mul
sbb
adc
mov
adc
xchg
jne
punpckhbw
mov
mov
int3
xchg
xor
xchg
mov
retf
in
iret
cmp
push
push
push
data16
repz
mov
js
xchg
je
adc
mul
popf
lock
pop
scas
mov
rol
adc
stos
jne
pusha
bound
and
dec
fwait
adc
sub
test
adc
ds
call
mov
or
dec
ds
xor
hlt
sahf
sub
or
int3
ins
add
xchg
mov
call
mov
fs
push
aad
xchg
sub
mov
(bad)
je
fiadd
dec
mov
add
dec
cmp
jnp
cmp
mov
xchg
mov
jae
test
repz
test
popa
xchg
mov
aaa
mov
mov
(bad)
hlt
aam
adc
(bad)
je
xchg
jne
jecxz
movs
push
ficomp
int3
add
loope
xchg
inc
adc
pop
fwait
popf
mov
jp
je
stos
retf
pop
xchg
cmps
leave
dec
or
xchg
in
les
push
mov
xor
inc
xchg
xor
xchg
sbb
xchg
inc
outs
or
sbb
pop
or
aaa
fld
retf
cs
adc
test
inc
push
fwait
cmp
cld
push
mov
lea
arpl
pop
dec
xchg
pop
lods
ret
push
inc
cmps
test
sub
xchg
ss
cwde
fst
jmp
mov
pop
jo
ret
fidivr
movs
cs
inc
xor
mov
(bad)
or
jbe
xchg
test
push
jecxz
retf
xchg
retf
mov
inc
fcomp
(bad)
adc
into
xchg
sub
xchg
and
xchg
in
mov
out
xchg
js
inc
daa
aas
adc
dec
xchg
iret
pushf
fs
cmp
int3
sub
dec
fwait
add
ins
pop
xchg
(bad)
out
jns
into
sti
test
dec
xor
mov
xchg
fimul
add
mov
test
xchg
rcr
jp
xchg
xor
leave
ins
add
mov
mov
popa
mov
xor
add
popf
pop
push
xchg
fldenv
sub
mov
movs
pop
aam
mov
inc
stos
jecxz
cmp
out
sbb
test
cmps
jb
iret
xchg
sbb
xchg
add
jmp
test
out
cwde
adc
inc
push
cmp
call
lods
pusha
ja
xchg
sbb
mov
cld
adc
xchg
jb
jmp
in
arpl
mov
loope
aad
cmp
cmc
cmp
je
test
nop
sbb
jp
in
cwde
mov
adc
shr
push
sub
mov
mov
enter
test
sub
std
or
add
mov
xchg
retf
outs
dec
clc
popa
shl
das
xchg
jecxz
(bad)
jmp
xchg
push
jns
mov
stos
push
ins
outs
adc
adc
and
mov
in
xchg
cdq
or
xchg
hlt
push
aaa
lahf
add
push
xchg
outs
inc
addr16
sub
(bad)
cmp
pop
(bad)
std
xchg
push
mov
xlat
pushf
xchg
or
dec
inc
hlt
repnz
jp
xor
push
sahf
or
les
adc
jne
or
xchg
out
mov
jle
mov
push
out
mov
adc
fisttp
stos
inc
cmp
or
sar
ficom
call
ins
call
and
ja
jne
add
adc
pusha
(bad)
mov
pop
pop
xor
jl
mov
push
xchg
dec
sbb
fld
arpl
(bad)
mov
call
cmp
mov
adc
push
jbe
out
rol
arpl
pop
adc
jge
fmul
xor
adc
fs
je
mov
dec
cld
rcl
add
cdq
pusha
xchg
mov
stos
pop
rcl
mov
jmp
pop
mov
xchg
or
mov
push
bound
xchg
js
dec
imul
add
xchg
std
daa
clc
or
mov
adc
dec
mov
dec
mov
pusha
mov
adc
imul
xchg
dec
aad
jg
push
mov
aaa
ins
xchg
push
neg
push
movlps
test
int3
mov
xchg
jmp
push
dec
and
cmps
xchg
mov
push
mov
add
hlt
pop
jmp
iret
daa
adc
cmp
rcr
fwait
or
jmp
add
pop
add
mov
repnz
mov
inc
mov
sbb
add
push
popf
xor
push
and
pop
xchg
dec
mov
leave
enter
not
or
and
push
mov
fbld
inc
or
ss
mov
xchg
sub
movs
in
lods
hlt
push
xchg
dec
sub
mov
xchg
push
mov
xchg
add
xor
jl
data16
inc
and
xchg
stos
nop
movs
int
ins
push
nop
enter
jnp
xor
std
stc
pop
mov
pop
icebp
mov
das
(bad)
sbb
(bad)
fwait
ret
inc
lock
mov
push
dec
xor
mov
pop
or
sub
cmp
push
xchg
inc
jl
jg
push
fld
xchg
adc
in
sar
push
movs
xchg
pop
sahf
sbb
or
inc
push
adc
push
cs
xchg
ficomp
jmp
(bad)
adc
cmp
jg
clc
sub
fst
push
cmp
out
xor
in
sub
dec
fidiv
xchg
sub
or
sbb
(bad)
fwait
or
jbe
ret
in
js
xchg
mov
pop
pop
xchg
fidiv
dec
adc
int3
jb
lahf
sti
js
in
stos
test
dec
add
fnstcw
add
aam
xchg
pusha
cmp
xchg
movs
sub
fnsave
mov
int3
xchg
push
clc
adc
or
aas
mov
je
add
inc
fwait
lods
jns
mov
sub
xchg
fsubr
xchg
jp
xchg
mov
retf
push
xchg
jecxz
sbb
test
add
xchg
retf
inc
call
fsubr
shl
xchg
nop
aam
aas
mov
call
les
xlat
xchg
xchg
cmp
adc
mov
sar
pop
popf
jp
pop
sbb
shl
xchg
mov
xor
je
xchg
nop
pop
mov
dec
xchg
adc
loop
outs
mov
xchg
sub
pand
fst
xchg
mov
stos
mov
add
gs
mov
mov
imul
xchg
push
xchg
xor
in
mov
rcl
push
cmps
lea
add
adc
cmc
sbb
jp
add
mov
jge
adc
mov
and
pop
ss
xor
dec
push
add
sub
shl
xor
fbstp
or
loopne
fsubr
add
out
adc
pop
aad
xchg
dec
sar
jge
sub
movs
sub
or
xchg
je
pop
jmp
xchg
call
retf
sbb
test
push
(bad)
mov
mov
in
scas
int3
mov
mov
dec
shl
dec
outs
clc
or
xchg
in
sub
bound
xchg
ins
jae
jnp
fst
fsubr
push
pop
gs
lods
fwait
xchg
jnp
jb
iret
sar
lahf
xchg
repz
(bad)
jecxz
scas
ror
cmps
sub
jne
dec
add
cmp
jmp
adc
leave
xchg
icebp
lock
push
xor
mov
push
stc
fucomip
mov
cmp
push
mov
cli
repz
push
add
lock
or
dec
push
setnp
movs
adc
aaa
cdq
mov
ficomp
jns
xchg
call
jecxz
imul
cmp
out
xor
pop
aas
mov
mov
push
scas
mov
xor
sbb
cmc
int3
or
xor
inc
jbe
xchg
retf
outs
or
nop
add
mov
dec
mov
aam
bound
into
dec
arpl
cmp
xchg
adc
sar
jbe
je
fadd
stos
cmp
pop
dec
daa
xchg
adc
loop
lds
dec
lods
in
or
sbb
ret
or
push
dec
push
retf
lods
daa
inc
pop
pop
xchg
sbb
cld
ror
xor
pop
cmp
jae
mov
push
inc
out
sahf
sbb
and
xchg
sbb
push
scas
dec
inc
(bad)
ficom
dec
stc
xchg
mov
add
enter
mov
ins
xchg
jecxz
dec
outs
and
add
fwait
xchg
adc
inc
inc
pushf
mov
xchg
fistp
clc
in
xchg
dec
cmp
cmc
add
xor
loope
jge
xchg
fisttp
push
xor
into
cld
stos
xor
cmp
mov
push
xor
fdiv
xlat
jecxz
pop
jbe
add
xchg
hlt
sub
mov
stos
lahf
out
sub
inc
xchg
rcr
mov
and
aam
fsub
xlat
xchg
add
xchg
xor
xchg
mov
cmp
es
adc
pushf
xchg
dec
jle
(bad)
push
fsub
push
loopne
sar
mov
adc
add
iret
mov
dec
adc
xor
repz
jg
add
(bad)
fstp
sbb
in
jg
xor
cdq
scas
jmp
(bad)
test
push
out
clc
xchg
mov
pop
ss
mov
xchg
xchg
shl
jo
adc
retf
xchg
cld
pusha
repz
or
clc
stos
add
pop
stc
aaa
xchg
inc
out
push
pop
mov
int3
xchg
push
jb
aad
push
jg
fmul
aam
xchg
(bad)
(bad)
or
jle
xchg
clc
sub
jecxz
(bad)
or
bound
jo
push
or
adc
or
dec
jge
mov
sub
movs
mov
les
fst
repz
cmp
jnp
sar
mov
push
pop
imul
dec
js
xchg
out
pop
mov
mov
(bad)
jmp
xchg
or
jbe
ins
xor
stos
jmp
sub
ficom
pop
movs
adc
xchg
sub
(bad)
(bad)
jmp
test
ret
xchg
cmp
gs
out
dec
mov
xchg
ins
xchg
outs
ins
and
xor
xchg
mov
rcr
mov
xchg
popf
xlat
call
dec
call
jl
mov
ins
loopne
rcl
ins
clc
inc
sub
call
mov
sub
xor
xchg
sbb
inc
out
jge
xchg
loope
ins
or
xchg
mov
aaa
mov
adc
(bad)
cmps
ss
(bad)
mov
jno
add
lods
pop
xchg
retf
xchg
out
xchg
adc
add
sub
jb
xchg
inc
sbb
ror
inc
cli
xor
cmps
mov
out
mov
enter
fisttp
push
sub
or
mov
adc
les
pop
or
jmp
enter
push
test
cwde
imul
pop
je
xchg
add
or
sbb
mov
mov
retf
xchg
movs
adc
cld
xchg
mov
push
jmp
clc
push
hlt
mov
sbb
adc
inc
test
push
sub
cmp
fcmove
rol
inc
xchg
pop
jge
inc
or
add
(bad)
aaa
sbb
scas
mov
aas
adc
push
dec
test
mov
je
adc
in
jge
repz
add
pop
ror
les
je
mov
in
pop
not
mov
adc
add
es
fwait
jmp
or
fiadd
mov
inc
sub
(bad)
mov
xchg
push
mov
sub
xchg
stos
and
push
int
jge
xor
jae
xchg
mov
inc
cmp
pop
xchg
jb
not
fs
mov
and
xor
cli
jno
jbe
adc
loopne
push
xchg
mov
repnz
push
xor
iret
dec
in
nop
or
cdq
push
add
cld
xor
enter
repz
xor
ret
jno
jp
xchg
in
rol
xchg
lods
rcr
imul
jne
mov
push
sbb
or
in
dec
sbb
xor
je
fcom
xchg
xchg
adc
(bad)
pop
movs
xchg
sub
stc
xor
sbb
pusha
jecxz
jle
xchg
xchg
(bad)
es
mov
mov
mov
ins
xchg
and
adc
sbb
push
xor
xchg
std
xchg
jl
or
rcl
xchg
lahf
imul
adc
hlt
xor
outs
ret
mov
dec
arpl
or
xchg
jno
jne
pop
stos
adc
adc
mov
add
xchg
stc
jbe
mov
out
pusha
or
lahf
push
mov
pushf
xchg
in
ds
retf
xchg
cmp
outs
push
test
test
xchg
add
mov
cmps
xchg
loop
or
jl
or
lea
mov
pushf
xor
mov
pop
push
xchg
sub
sub
jle
stc
pop
sti
dec
cmp
ret
loop
popa
movs
mov
cmp
pop
pop
adc
xchg
aad
adc
xchg
out
(bad)
sbb
dec
call
(bad)
xchg
repnz
xor
shl
(bad)
mov
jns
adc
test
xchg
in
pushf
ret
dec
sbb
inc
xchg
rcr
xchg
psrlq
rcl
xchg
mov
jmp
rcl
lods
cs
pop
leave
xchg
and
xchg
mov
movs
test
xchg
inc
and
mov
adc
jl
lods
xchg
ret
iret
jns
jno
sub
cmp
xchg
dec
dec
aas
mov
scas
push
pop
shl
add
sbb
ret
dec
xor
mov
pop
and
xchg
(bad)
cld
adc
cmp
xor
mov
(bad)
ins
push
xchg
inc
add
das
test
xchg
ss
sbb
xchg
mov
cmps
loope
fwait
mov
inc
sbb
jl
xchg
(bad)
pop
cmp
mov
push
aaa
(bad)
xchg
jmp
rcl
mov
in
jno
xchg
adc
mov
cmp
or
push
mov
xchg
mov
dec
fdivr
push
cmp
or
and
mov
shr
xchg
mov
movs
fist
out
std
xchg
sub
adc
(bad)
daa
scas
xchg
popf
mov
cmp
mov
test
jp
push
inc
jno
sar
enter
pop
std
mov
leave
inc
xchg
pop
shl
test
mov
jg
xchg
btr
(bad)
xchg
dec
mov
test
int
xchg
jp
sub
test
or
(bad)
jmp
jns
xchg
test
jmp
xchg
ds
sub
jmp
and
jno
dec
fld
mov
not
lds
xchg
repnz
sub
std
xchg
(bad)
lock
jns
xor
mov
push
cmp
xchg
push
add
adc
outs
sbb
sub
xor
xchg
daa
in
jmp
xchg
xchg
outs
cmps
and
js
xchg
(bad)
sbb
pop
and
addr16
add
push
ss
and
mov
mov
not
ss
xchg
sbb
xchg
xchg
and
pop
fisttp
popf
lock
jb
dec
cmp
dec
xchg
mov
mov
in
inc
ins
xchg
call
xchg
xor
mov
xor
rcl
mov
movs
rcl
test
sar
sub
xchg
mov
add
test
mov
mov
lea
xchg
shl
mov
or
push
imul
mov
mov
or
jb
push
or
lea
xchg
std
and
add
aas
cmp
mov
inc
xchg
iret
(bad)
retf
xlat
mov
retf
gs
fs
xchg
mov
cmp
xor
cmp
xchg
(bad)
ds
push
aad
cmc
mov
call
adc
jecxz
xchg
clc
iret
adc
adc
pop
dec
mov
mov
mov
cld
dec
mov
popf
xchg
(bad)
sbb
nop
xor
push
jno
test
jg
cs
loop
mov
sbb
push
sub
xor
dec
and
iret
xchg
mov
mov
xchg
adc
jb
mov
push
pop
xchg
xchg
retf
cmp
scas
jle
jmp
imul
rcr
xchg
xor
pop
mov
xchg
sbb
stc
mov
sub
mov
mul
ror
pop
pop
mov
int
xchg
xchg
loope
or
ins
xchg
ror
cmp
push
mov
ret
xchg
cmc
jmp
mov
cmps
mov
aam
mov
push
fistp
jbe
cld
(bad)
test
mov
in
fisub
xchg
inc
sbb
ret
ins
xchg
adc
aad
mov
push
cmps
lea
mov
loopne
aam
add
mov
nop
inc
xchg
sbb
mov
sbb
mov
add
loopne
dec
mov
push
outs
rcl
int3
jl
xchg
inc
inc
and
jp
xor
inc
pop
call
xor
daa
dec
xchg
cmp
xchg
and
mov
and
dec
pop
sar
xlat
xchg
and
mov
lock
in
test
nop
cmps
mul
shr
xchg
mov
pushf
sub
xor
xchg
jle
xchg
dec
mov
daa
sub
out
das
xchg
mov
adc
xor
pop
xchg
xor
xor
lock
dec
cmp
mov
test
mov
movs
jb
inc
daa
cld
push
adc
dec
or
scas
sub
inc
rcr
push
inc
movs
(bad)
retf
(bad)
(bad)
pop
xchg
dec
inc
xor
outs
and
nop
sub
xchg
push
ss
xchg
sbb
mov
dec
fwait
jb
cmps
sbb
fwait
mov
les
dec
int3
cmp
mov
xchg
icebp
test
push
leave
xchg
xchg
pop
or
scas
push
pop
and
mov
mov
adc
adc
xchg
popa
jp
js
mov
sbb
xlat
lods
push
lock
fadd
movs
in
stos
rcl
and
pop
xchg
push
test
pop
mov
push
xor
xchg
jbe
rol
adc
and
cs
add
jb
fld
test
dec
xor
dec
add
add
or
xchg
adc
xchg
fild
out
hlt
jp
xchg
inc
dec
push
clc
fwait
push
lds
sub
mov
xor
jbe
mov
mov
das
xchg
out
or
test
ror
je
jle
in
mov
adc
jmp
iret
sti
mov
shl
adc
jp
(bad)
outs
xchg
jle
mov
xchg
xor
jo
push
imul
dec
cmp
lahf
lods
sbb
adc
loop
mov
adc
ret
sbb
push
and
mov
mov
outs
adc
jnp
sbb
cs
outs
je
lea
pop
test
mov
scas
cmp
sbb
rcl
jp
pop
mov
cdq
add
sub
mov
xchg
das
leave
mov
mov
pop
(bad)
ja
clc
outs
add
movs
or
(bad)
or
xchg
jno
fstp
xchg
pop
mov
je
cwde
clc
xchg
retf
mov
pop
cmps
xchg
aam
inc
mov
xchg
push
fadd
movs
in
pop
jnp
xchg
xor
jae
int
sbb
fcmovu
mov
xchg
jmp
pop
xchg
gs
add
stos
mul
call
xchg
jecxz
(bad)
mov
adc
loop
outs
push
xchg
les
sub
lds
jns
in
xchg
pop
and
dec
stos
cdq
add
cmp
cli
add
pop
inc
xchg
pop
loopne
adc
aam
nop
pushf
xchg
adc
out
cmp
xchg
mov
(bad)
adc
xchg
sbb
inc
jg
push
adc
or
out
jbe
js
xchg
dec
pop
out
xchg
push
jne
xchg
cs
test
(bad)
lock
outs
aaa
lods
cwde
xlat
xor
fnsave
jle
mov
ins
cli
inc
add
push
arpl
bsf
out
xchg
out
mov
jbe
daa
rol
fsubr
ss
or
dec
fwait
enter
repz
inc
outs
adc
mov
sub
pop
and
add
xor
lea
mov
dec
das
xchg
lods
aad
dec
fst
ins
mov
sti
sbb
mov
pop
mov
adc
pop
cmp
mov
imul
jmp
mov
(bad)
xchg
out
xchg
or
pop
cmp
movs
inc
xor
jnp
or
mov
into
popa
cs
sahf
loope
xchg
movs
mov
pop
cmp
aas
xchg
add
adc
xchg
mov
gs
cmp
outs
xchg
scas
aaa
inc
(bad)
loop
mov
enter
dec
or
sub
lahf
mov
stos
pop
xchg
or
inc
push
jle
lds
or
pop
daa
bound
or
enter
xchg
loope
adc
push
movs
and
pop
mov
adc
cmps
ror
xchg
bound
mov
loop
inc
inc
xchg
gs
in
pop
lods
xchg
ins
ret
pmullw
xchg
clc
dec
aam
mov
inc
test
outs
aaa
inc
sub
xchg
or
sbb
aas
pop
xchg
inc
jg
push
fld
ret
shl
(bad)
adc
add
scas
mov
xor
or
jge
push
or
lods
and
adc
fild
or
mov
mov
into
mov
fwait
outs
inc
fdivr
loop
cs
push
sar
xchg
xchg
outs
ficom
dec
jo
xchg
loopne
adc
imul
xchg
in
cmp
dec
or
sbb
jns
dec
add
sbb
xchg
sbb
pop
xor
or
and
(bad)
jecxz
xchg
adc
iret
or
jns
fwait
adc
xchg
outs
sub
stc
ja
cmp
ds
push
sbb
xchg
jg
push
aad
test
mov
pop
xchg
lea
xchg
adc
and
rcl
mov
adc
inc
mov
dec
add
and
std
sbb
mov
aam
xor
in
mov
and
dec
add
xor
xchg
jp
cld
and
lea
in
gs
adc
ja
sub
mov
loop
test
xchg
mov
call
repz
imul
xlat
xchg
enter
jbe
or
mov
jge
cwde
adc
cmp
ds
jl
and
xor
test
icebp
cs
ins
std
dec
xchg
(bad)
cld
pop
test
lods
fst
adc
rcl
shr
mov
aam
mov
lds
scas
in
mov
or
fcom
push
jp
and
cmps
sub
inc
in
loop
and
adc
sbb
pop
xchg
sbb
xchg
mov
and
push
scas
ror
adc
mov
push
or
push
xchg
cmp
fbld
lahf
inc
or
pop
int
rol
fnsave
push
add
pop
mov
or
xchg
sub
jg
call
sbb
fxtract
mov
inc
pop
mov
mov
jp
(bad)
movs
fsubr
dec
xchg
(bad)
loopne
movs
js
aaa
xchg
ror
lea
dec
fcom
rcr
inc
xchg
mov
fnstcw
(bad)
stc
in
aam
sub
jbe
sbb
hlt
das
nop
sub
(bad)
mov
mov
inc
jne
call
mov
pop
mov
jo
sub
pop
xor
adc
sbb
sbb
cdq
out
sbb
jno
pop
rol
sbb
xchg
movs
cld
das
mov
dec
push
xchg
daa
pop
mov
sti
call
cmp
xor
popf
push
mov
ds
xchg
xor
inc
mov
adc
cmp
sbb
repnz
push
mov
icebp
add
mov
jl
xor
or
arpl
mov
mov
int
dec
gs
mov
out
pushf
sub
mov
int
inc
adc
popf
pop
pop
push
xchg
fbstp
mov
inc
dec
ins
push
jo
cld
pop
out
or
das
jmp
xchg
(bad)
adc
adc
mov
sub
les
xchg
or
or
(bad)
dec
xchg
je
aad
enter
xchg
inc
push
and
push
aas
jecxz
lahf
hlt
fcmove
push
adc
loope
ss
in
inc
movs
mov
call
xchg
fiadd
retf
or
sub
xchg
xchg
loop
shl
shr
scas
push
dec
psubw
xor
pop
lahf
sbb
mov
fist
popf
(bad)
and
adc
xchg
xchg
aaa
cmp
lahf
icebp
ror
pop
ja
ss
arpl
lock
mov
aam
rcl
xchg
rol
cld
stc
lods
test
pop
mov
scas
aam
je
jecxz
xchg
jp
inc
data16
xor
mov
mov
dec
icebp
cdq
push
enter
ja
push
xchg
xor
inc
and
rcr
test
repz
mov
mov
and
pop
xchg
sub
jg
les
inc
adc
sbb
add
rcr
jmp
dec
xchg
cmps
add
mov
mov
mov
xchg
jmp
push
(bad)
xchg
fisttp
scas
scas
xor
xchg
jae
xchg
shr
aam
nop
retf
daa
sbb
xchg
sbb
icebp
jbe
jp
xchg
stos
outs
imul
xchg
xchg
adc
adc
xchg
or
xchg
cwde
fwait
inc
or
xchg
mov
or
add
es
sti
dec
xchg
out
inc
out
loopne
mov
popa
push
mov
sti
sub
add
xchg
mov
outs
inc
cmps
aaa
mov
xor
adc
and
mov
xor
xchg
jl
cmp
jmp
not
mov
fist
retf
xlat
sbb
shl
jb
jmp
in
mov
adc
push
mov
les
in
xchg
mov
mov
xor
cmp
out
jns
mov
mov
ds
xchg
les
jge
xor
jb
mov
(bad)
xchg
xchg
call
lfs
mov
xchg
jno
xor
arpl
es
shl
xor
xchg
shl
xchg
ins
mov
mov
les
inc
mov
xchg
mov
jg
paddb
loop
push
aad
adc
mov
mov
ja
fwait
xchg
mov
adc
inc
xchg
lock
imul
(bad)
rcr
or
xchg
loop
test
inc
xor
loope
hlt
and
retf
lds
xchg
test
sti
js
mov
arpl
push
mov
retf
xchg
rcr
mov
lds
cmp
gs
fwait
das
sbb
dec
mov
sub
ja
std
mov
das
(bad)
aam
pusha
or
mov
imul
mov
add
sub
js
xchg
in
sbb
jnp
inc
int3
shl
xor
in
stc
lock
jg
wrmsr
cmc
or
cmp
in
dec
adc
mov
xchg
mov
sbb
adc
pusha
jge
xchg
xor
aam
dec
xchg
jl
mov
sub
fisub
rcl
ret
in
xchg
(bad)
out
ins
jae
outs
jmp
jl
cmp
xchg
into
sbb
fisubr
mov
jne
test
mov
(bad)
cmp
push
setns
aad
jnp
add
ja
out
pop
cmp
xor
jp
push
jne
outs
les
mov
xchg
sub
jb
xchg
vpsraw
(bad)
pop
xor
jl
xchg
mov
push
stos
dec
sbb
int3
mov
das
(bad)
push
or
fist
mov
push
dec
dec
popa
xchg
push
inc
mov
mov
icebp
hlt
les
les
(bad)
push
js
push
fst
xchg
loopne
movs
pop
and
out
pop
add
into
mov
push
and
push
mov
jnp
icebp
data16
xchg
xchg
pop
(bad)
out
mov
xchg
ret
adc
mov
test
in
lahf
imul
mov
repz
cmp
cdq
dec
dec
xchg
lds
jg
repz
ins
(bad)
mov
xor
aam
adc
mov
out
dec
daa
in
dec
mov
lods
fwait
dec
sbb
jmp
dec
or
(bad)
cpuid
jae
push
pop
aam
cmc
jl
pushf
xchg
mov
stos
cwde
add
add
jns
xchg
sar
xchg
add
sub
mov
cmp
not
outs
sbb
(bad)
sub
xchg
mov
adc
xchg
and
mov
jl
mov
xchg
call
cld
mov
mov
jnp
push
mov
adc
mul
add
xchg
fdiv
loop
xor
lods
data16
rol
enter
outs
fist
jecxz
(bad)
addr16
add
add
je
add
outs
adc
inc
pop
or
movs
adc
fwait
popa
xlat
cmp
sub
retf
mov
fs
cdq
and
imul
xchg
or
inc
cmc
mov
retf
xchg
cmp
push
sub
push
xchg
jl
pushf
sub
fadd
xchg
int
je
icebp
adc
jno
pop
ss
loop
div
mov
aam
xchg
mov
neg
sti
cwde
or
je
or
xchg
pop
inc
pop
xchg
cmp
sbb
or
loopne
into
imul
mov
movs
ret
enter
hlt
pop
sbb
add
fwait
xchg
adc
and
pop
xchg
inc
jmp
dec
dec
adc
push
mov
mov
sahf
push
int3
xchg
and
inc
sbb
xchg
cmp
lds
jle
(bad)
xchg
push
rol
fucom
xchg
je
aad
loop
mov
js
mov
pop
ror
scas
jb
cmp
outs
sub
sbb
jp
and
or
fwait
out
mov
mov
mov
test
add
lock
fs
xchg
push
popa
out
iret
cmp
fwait
mov
mov
int
fsubp
mov
call
sub
adc
push
std
repnz
push
or
hlt
add
ret
cli
jne
xchg
clc
sbb
sub
xor
push
jecxz
sub
pop
fwait
les
popa
aam
je
xchg
or
add
adc
icebp
and
ins
(bad)
ror
sub
call
or
adc
addr16
in
xor
cmc
xlat
xchg
fdiv
push
fdiv
cmps
pop
xchg
sbb
pop
test
nop
das
cmp
adc
repnz
lds
in
xchg
es
out
(bad)
sub
call
jo
mov
aaa
loop
or
or
add
lods
pop
cmps
rcl
aaa
pop
inc
xchg
das
mov
js
data16
adc
mov
push
and
inc
rcl
(bad)
ja
xchg
outs
int
gs
or
iret
test
stos
dec
adc
outs
mov
enter
add
mov
jo
sbb
xchg
cwde
(bad)
push
loope
sbb
lods
inc
pop
sub
dec
addr16
cmps
inc
or
xor
and
mov
enter
aam
inc
pop
cld
xchg
mov
sub
jno
cmp
popa
ret
xchg
dec
adc
pop
pop
mov
or
push
sti
retf
aam
cld
mov
cmc
cwde
jae
cmp
xchg
test
in
or
es
mov
mov
les
xchg
and
adc
xchg
or
in
fild
sub
ins
mov
mov
adc
out
in
adc
xchg
push
push
pop
lods
mov
test
sub
dec
inc
mov
pop
(bad)
repz
gs
adc
ret
or
mov
xchg
lods
jo
loop
call
jge
adc
xchg
push
popf
ds
or
mov
mov
xchg
cmp
cmps
imul
fwait
movs
dec
xchg
inc
sbb
int3
xchg
aas
daa
rcl
or
xchg
cwde
sub
dec
jbe
ds
xchg
cs
gs
sub
mov
mov
xchg
fwait
sbb
in
xchg
jns
mov
sub
aaa
aas
pop
adc
cdq
fld
aam
(bad)
xchg
imul
add
jmp
enter
xchg
pushf
mov
scas
lahf
fist
inc
cmps
mov
sahf
xchg
push
ret
int
mov
or
call
test
enter
and
cmp
call
cld
mov
mov
xchg
mov
loopne
and
fnstcw
mov
fdivr
sub
or
or
fadd
xor
xchg
je
push
sbb
call
xchg
add
adc
sub
push
jns
mov
mov
or
xchg
jbe
int
(bad)
es
xchg
mov
lods
lods
xor
adc
dec
mov
xchg
out
shl
inc
or
fisub
lahf
sub
xchg
scas
fst
xchg
pop
(bad)
shl
xchg
or
xlat
pop
inc
dec
push
mov
xor
lds
jp
xchg
rcr
push
in
or
sub
out
adc
cmp
push
xchg
jo
leave
cdq
dec
and
movs
jae
mov
xchg
xor
mov
das
xchg
fptan
pop
push
sar
out
shl
mov
lock
dec
dec
fldenv
cmp
xchg
aas
ret
pop
sbb
inc
adc
xor
das
gs
mov
outs
aam
inc
mov
adc
call
es
repz
out
pop
mov
call
js
mov
jp
sbb
mov
sub
mov
fbstp
xchg
into
ret
cmps
cs
push
push
cli
mov
int
push
mov
jae
jne
xchg
dec
rol
add
scas
out
xchg
leave
popa
jl
jae
fs
dec
test
and
aad
pop
sbb
jne
xchg
mov
push
or
dec
push
dec
add
ds
add
jmp
mov
ror
mov
imul
dec
xor
pop
mov
jne
xchg
xor
sar
pop
fnstcw
cdq
xchg
inc
cmp
xchg
jp
push
gs
data16
(bad)
push
adc
ss
int3
stc
jne
daa
sub
mov
je
add
rcl
movs
shl
cmps
test
ins
xchg
inc
or
adc
inc
add
xchg
mov
dec
pop
or
xchg
mov
stos
mov
xor
sbb
mov
std
pusha
jo
xchg
lock
rcl
cmps
imul
xchg
cmps
clc
movs
pop
sahf
scas
pop
dec
xchg
(bad)
stc
add
or
ret
xchg
ins
pop
rol
mov
jns
sub
into
jecxz
xor
dec
add
test
popa
lods
in
neg
je
fwait
mov
inc
jecxz
xor
pushf
les
mov
ins
push
aad
sub
or
xchg
out
int3
xor
rcl
pop
stos
jl
cvttps2pi
jge
push
sbb
xchg
cmps
xor
xchg
rol
xlat
adc
and
inc
mov
mov
xor
out
push
push
or
jge
(bad)
jmp
(bad)
daa
and
xchg
(bad)
loopne
push
mov
addr16
xchg
jmp
adc
fstp
dec
outs
mov
add
push
xchg
cmps
sub
hlt
dec
lea
(bad)
cwde
jg
call
mov
imul
add
push
xchg
inc
jne
ret
outs
xor
fstp
and
pop
mov
push
neg
mov
mov
cmp
adc
ins
shl
xor
adc
(bad)
loopne
test
xor
xor
xchg
push
jl
sub
sub
sbb
xchg
pop
mov
ds
es
sti
out
fwait
lods
cli
cdq
pushf
push
push
pop
push
push
repnz
jo
loop
pop
aaa
lahf
push
pop
sub
push
push
push
in
jbe
xchg
adc
in
xchg
push
push
jge
inc
shl
in
push
cwde
adc
pushf
adc
xchg
lods
and
jbe
sub
mov
pop
xchg
xchg
push
aad
mov
adc
ss
xor
jns
xor
jb
sbb
mov
push
xchg
and
(bad)
sti
jbe
add
xchg
adc
mov
fist
pop
cmp
xchg
mov
aas
repz
jbe
sub
xchg
jp
xchg
stc
iret
pop
add
cmp
out
mov
jg
stos
pop
test
xchg
xchg
xlat
push
in
stc
add
xor
aam
and
out
es
addr16
fcmovne
xchg
popa
test
stos
xor
gs
je
mov
cmp
jae
or
mov
sbb
aaa
std
push
mov
movs
(bad)
into
or
fs
xchg
lods
imul
fisubr
pusha
leave
and
dec
jle
mov
fs
outs
xchg
jmp
add
into
mov
int
call
in
xchg
add
inc
cwde
xchg
sar
mov
or
push
(bad)
sbb
adc
mov
ins
ja
push
xchg
pop
mov
pop
je
jg
dec
lds
push
xchg
dec
mov
inc
adc
in
xchg
sbb
sahf
cmc
cmp
pop
mov
adc
jecxz
jns
movs
add
xchg
and
jne
xchg
je
mov
nop
inc
sbb
aad
cmp
ds
xchg
test
scas
jnp
arpl
xchg
or
and
sub
cmp
xchg
add
pusha
mov
mov
nop
cwde
fs
out
nop
adc
add
ins
imul
dec
jecxz
adc
jmp
sbb
enter
cmp
mov
xchg
mov
mov
dec
mov
outs
inc
mov
aam
out
inc
or
pop
xchg
fcomip
push
adc
inc
loope
mov
jge
or
mov
jae
push
adc
xchg
fcmovnbe
iret
dec
add
arpl
inc
dec
(bad)
xlat
cld
push
xchg
dec
add
mov
daa
mov
xchg
push
pop
sub
xor
mov
stc
int3
push
cmps
icebp
push
and
js
inc
sub
bound
sub
or
xlat
ins
jmp
jp
sub
test
shl
xchg
test
out
jno
xchg
xor
jl
or
ret
xchg
xchg
das
xchg
sbb
ins
out
stc
mov
add
sbb
cmc
mov
push
xchg
outs
jns
xchg
mov
packssdw
cmp
or
sub
arpl
sti
daa
xor
mov
and
pop
xor
push
test
sar
pop
mov
xor
cmp
xchg
jmp
loope
mov
dec
inc
nop
cmps
cld
data16
int
jns
add
cmps
cmp
xchg
mov
bound
push
ins
xchg
inc
sub
lea
sti
imul
clc
hlt
xchg
and
sub
xor
es
and
jne
jbe
retf
nop
int3
pop
xchg
gs
aam
push
push
in
into
clc
in
adc
out
cmp
ror
mov
adc
mov
mov
jle
push
xchg
sub
add
xchg
call
pop
out
sub
ss
xchg
dec
jbe
pop
cdq
push
xchg
xchg
or
mov
hlt
arpl
cdq
das
add
call
inc
into
scas
dec
sbb
test
imul
dec
dec
jp
mov
je
out
inc
and
mov
mov
pop
cmp
xchg
jmp
push
pop
xchg
mov
test
dec
out
mov
xchg
cwde
sub
mov
or
mov
mov
ret
(bad)
jp
add
idiv
aam
xchg
or
aad
mov
stos
xchg
std
int3
enter
or
test
test
xchg
adc
dec
popa
rcr
sete
int3
pop
fucomi
cwde
add
aam
daa
mov
jmp
rcr
push
sete
adc
mov
add
mov
dec
cwde
xchg
out
sbb
sub
cli
mov
push
xchg
inc
test
and
xchg
add
mov
iret
movs
xchg
push
push
mov
sub
pushf
lea
bound
adc
idiv
mov
xchg
mov
in
lea
test
bound
mov
(bad)
xchg
xchg
cmp
inc
cld
or
sbb
pop
mov
xchg
stc
stos
rcr
sti
jle
icebp
xchg
dec
in
dec
lods
jmp
out
cwde
les
xchg
pop
mov
into
cmp
xchg
outs
adc
leave
arpl
and
repnz
jmp
pop
ds
mov
loopne
xchg
xchg
cmp
push
dec
xchg
int3
repz
push
xchg
dec
mov
jns
mov
xchg
ret
cmp
adc
mov
xor
and
or
cwde
jl
lods
pop
addr16
xchg
jnp
jns
les
loope
movs
sti
push
out
mov
sbb
dec
adc
jmp
cmp
sub
mov
xchg
cmps
xor
popa
and
mov
mov
ror
fist
jne
es
and
mov
call
or
xchg
inc
aad
xchg
mov
and
cdq
pop
sub
cmps
cs
xchg
aaa
test
es
xchg
jns
sbb
ss
push
jecxz
test
add
dec
ins
scas
fist
rcl
fnstcw
adc
js
ss
xchg
or
pop
retf
xchg
sbb
(bad)
in
xchg
xchg
sbb
sbb
add
xchg
stos
inc
xlat
iret
sahf
sbb
nop
mov
popf
ficomp
nop
out
fwait
ins
je
or
adc
add
dec
adc
sbb
cwde
dec
xchg
push
out
pop
ins
int3
adc
and
fwait
imul
jp
mul
addr16
dec
sub
adc
inc
sbb
test
inc
sbb
call
xchg
sbb
scas
lahf
sub
mov
push
in
cwde
jp
pusha
mov
xlat
xor
xchg
ror
(bad)
adc
cmp
push
into
jmp
xchg
retf
jb
popf
xchg
push
xchg
sar
ins
das
xor
bound
dec
inc
xchg
lock
mov
(bad)
jne
es
sub
adc
xchg
xor
imul
idiv
sbb
cli
test
push
xchg
push
and
pop
aam
es
mov
pop
dec
xchg
test
rol
xchg
pushf
jecxz
jmp
(bad)
adc
arpl
inc
lds
dec
dec
mov
je
scas
adc
xchg
push
sbb
jbe
xchg
adc
je
add
arpl
(bad)
push
cld
mov
mov
mov
add
fwait
xor
mov
push
fcom
cld
dec
adc
out
add
and
pushf
xchg
jae
pop
pop
mov
mov
outs
xchg
sbb
(bad)
pop
ins
ss
cdq
inc
mov
pop
xchg
stc
sbb
aam
cmp
push
xchg
cwde
in
(bad)
jg
mov
and
push
or
xchg
cmp
add
out
sti
stc
or
xchg
add
xchg
inc
test
mov
sbb
jmp
in
cld
pop
or
lds
pop
loop
xchg
idiv
outs
lea
ret
fcomp
inc
add
mov
repz
jne
mov
pop
enter
jmp
xchg
aaa
popf
test
add
push
mov
imul
fistp
cmp
add
mov
pop
lods
mov
pusha
xchg
(bad)
cmp
clc
inc
push
pusha
sub
xchg
xchg
mov
leave
jge
xchg
pop
imul
imul
fst
xor
das
push
xchg
cmp
mov
clc
mov
xchg
xchg
add
les
jl
or
and
(bad)
xchg
push
push
adc
rcr
mov
mov
xchg
mov
push
mov
iret
cmp
jno
xchg
(bad)
mov
jae
pop
cmp
sub
pop
or
xchg
adc
xchg
outs
xchg
xchg
push
adc
pop
or
pop
in
xchg
mov
(bad)
ficom
and
mov
cmp
adc
iret
jmp
frstor
mov
push
dec
aaa
das
out
lahf
xor
fincstp
retf
popa
adc
push
outs
out
xor
(bad)
adc
not
sbb
popa
sti
test
pop
xchg
jne
mov
mov
push
arpl
pop
fiadd
xchg
out
and
adc
ret
mov
bound
fstp
mov
xchg
sub
fild
pusha
pop
rcl
xchg
xor
fisub
test
xchg
xor
xchg
dec
mov
xchg
mov
or
xchg
xchg
gs
outs
adc
push
sub
test
lock
mov
hlt
jmp
adc
fwait
mov
jl
sub
mov
outs
push
pop
fdiv
mul
sbb
adc
add
mov
repnz
sub
shr
dec
add
fbld
cmp
mov
xchg
mov
retf
(bad)
mov
aam
adc
xchg
aaa
or
mov
in
pop
xchg
xchg
xchg
sub
xchg
fwait
or
xchg
arpl
movs
xchg
and
sahf
jnp
dec
jl
and
(bad)
out
xor
inc
ret
fwait
dec
cmp
push
aas
xchg
xlat
sbb
sahf
ror
dec
inc
and
and
xchg
bound
stos
mov
xor
sub
push
pop
dec
test
push
xlat
adc
fsubr
xchg
dec
dec
inc
loopne
inc
sub
push
iret
push
add
mov
push
je
pushf
nop
inc
mov
hlt
xor
aaa
pop
mov
das
addr16
aad
loopne
jne
xchg
rol
cdq
or
jl
sbb
test
push
sub
mov
pop
pop
push
fs
pop
and
jle
iret
xchg
mov
int
sbb
icebp
stos
stos
(bad)
cmp
push
jb
(bad)
pop
fbld
mov
mov
mov
xchg
std
xchg
mov
mov
call
xchg
add
mov
xor
push
mov
dec
leave
push
loopne
mov
xor
fs
js
je
pop
dec
mov
retf
test
ja
mov
js
mov
xchg
std
sbb
jecxz
mov
ss
xchg
cwde
dec
ret
jle
enter
cmc
mov
lock
xor
xchg
das
loope
je
sbb
adc
rol
pop
jmp
test
inc
test
push
xchg
(bad)
cmp
add
jnp
clc
push
push
adc
xchg
cdq
mov
adc
movs
xchg
mov
sbb
in
stos
data16
enter
shl
xor
ins
outs
ja
jecxz
mov
retf
out
pushf
xchg
cmps
aaa
xchg
or
xchg
push
sbb
jle
jne
cdq
xchg
push
outs
movs
(bad)
jge
std
jbe
js
(bad)
pop
and
pop
fwait
retf
xor
imul
add
jns
xchg
jmp
lods
jb
dec
mov
push
cmp
xor
or
jmp
jp
(bad)
lock
shr
fstp
inc
cmps
shl
cmpxchg
outs
and
sti
cmps
mov
pop
xchg
xor
rcr
(bad)
shl
aam
out
cmps
sbb
cmp
mov
scas
xchg
sbb
mov
mov
rcr
test
mov
ror
js
rcl
and
inc
hlt
cli
jno
out
int3
sbb
xchg
or
sbb
adc
xchg
adc
xchg
cmp
inc
cwde
test
adc
adc
loop
xchg
out
xor
movs
or
(bad)
xchg
retf
mov
xchg
sahf
xchg
repz
xor
xchg
and
das
jne
ins
sbb
cmp
clc
push
inc
sub
adc
rcl
jg
mov
fcomp
and
lahf
test
jle
xchg
inc
scas
mov
or
aad
or
test
jmp
enter
xchg
sub
adc
aad
xchg
mov
leave
arpl
pushf
mov
or
loopne
ins
clc
cwde
shl
jl
inc
sbb
jb
call
adc
add
mov
xor
sbb
add
xor
fisub
xchg
jmp
sbb
xor
adc
loop
adc
ret
in
fistp
inc
and
bound
into
aam
adc
sub
lods
xor
and
adc
test
nop
cmp
cmp
mov
adc
sbb
ror
xchg
xor
dec
sub
fstp
inc
in
out
sbb
jne
int3
and
pop
(bad)
cld
mov
mov
repnz
jmp
pop
fwait
add
or
cdq
sub
loop
inc
xchg
xchg
xchg
fld
test
push
cmp
pcmpgtd
jne
iret
jl
mov
xchg
mov
add
mov
adc
and
xchg
aad
jne
mov
cmp
mov
or
call
xchg
lea
in
pop
xchg
bound
mov
inc
dec
xchg
jo
sbb
mov
rcr
int
adc
dec
pop
adc
dec
xchg
fdiv
add
xchg
or
mov
pop
xchg
sub
pop
std
and
gs
scas
mov
dec
sub
ret
mov
xor
hlt
add
in
jecxz
mov
cmp
sub
dec
and
jns
push
lods
lea
stc
sub
jge
loop
sti
xor
ins
rcl
mov
adc
int
ret
xchg
int
les
push
or
jb
cmc
fstp
fistp
cdq
xchg
and
xor
test
lock
(bad)
loope
in
push
(bad)
call
int
pusha
xchg
rcr
jmp
loop
jno
sbb
bound
sub
in
out
(bad)
xlat
cmp
je
mov
jle
mov
dec
pop
xor
out
or
pop
cmp
jo
mov
adc
inc
scas
xor
add
stc
dec
call
xchg
test
add
mov
xchg
and
inc
mov
jb
mov
xor
loop
push
xchg
sbb
push
mov
repz
into
bound
hlt
imul
in
mov
daa
push
jno
dec
adc
inc
cmp
mov
aam
rcl
cs
rcl
jnp
mov
in
dec
cmc
sbb
call
xor
mov
xchg
cmp
push
push
add
push
jo
shl
xchg
xor
adc
pop
add
sub
add
sub
lock
cdq
or
test
movs
leave
xchg
sbb
push
xchg
popf
inc
or
in
scas
xchg
jbe
cs
out
xchg
pop
pushf
sub
ret
cmp
aaa
push
pop
sub
fwait
xchg
test
(bad)
jmp
in
xchg
scas
aas
test
sub
xor
loop
nop
dec
inc
pusha
cmp
into
add
pop
shl
push
mov
sub
outs
and
lock
mov
jae
in
mov
jle
push
add
xchg
push
jp
aas
aad
(bad)
mov
add
adc
add
adc
xor
xlat
mov
pop
push
nop
xor
jno
(bad)
and
shl
leave
je
cmp
icebp
xchg
rcr
fs
jne
xchg
shr
adc
sbb
adc
add
lahf
xor
popf
and
into
sub
cmp
xchg
movs
test
and
sub
mov
xor
xchg
jnp
jecxz
cli
das
inc
xchg
cwde
pop
cmp
lahf
into
mov
js
fist
dec
xchg
out
popf
push
or
mov
call
xor
pop
xchg
push
aad
out
iret
out
sbb
call
adc
xlat
xchg
rcl
pop
xchg
add
xchg
(bad)
dec
es
addr16
xor
mov
adc
mov
stc
cs
fwait
(bad)
js
xchg
cdq
push
push
out
cmps
and
stc
bound
xchg
fs
addr16
mov
xlat
inc
xor
imul
inc
xchg
cmps
adc
loop
xlat
aad
inc
aas
outs
xor
xor
pushf
cld
or
adc
xchg
out
push
push
xchg
jnp
inc
xchg
mov
mov
adc
mov
xchg
ret
cmp
push
push
(bad)
loop
xchg
xor
cmp
add
jo
and
mov
jg
clc
dec
bound
enter
pop
sbb
outs
xchg
xor
aaa
mov
xchg
jne
adc
out
mov
daa
inc
arpl
call
jl
cmps
xchg
jns
imul
inc
sbb
movs
lock
into
xchg
stc
pusha
and
cdq
dec
ja
xor
push
xor
xchg
addr16
pop
mov
fisttp
pop
cmp
fild
dec
les
xchg
movs
js
xchg
std
stos
mov
lahf
sbb
xchg
jbe
(bad)
mov
and
add
xchg
les
sti
div
xchg
jmp
xchg
ror
xchg
test
idiv
xchg
inc
xor
or
movs
rcr
dec
sbb
ss
xchg
sti
or
or
mov
aam
and
push
popa
sahf
xchg
jb
or
mov
cmc
xchg
arpl
pop
push
cld
push
sub
ret
xchg
mov
mov
js
cli
xchg
fcmovbe
sbb
popf
in
jl
xchg
rcr
push
loope
jmp
xchg
retf
(bad)
fdivr
add
movs
mov
adc
movs
loopne
adc
push
adc
call
mov
je
or
inc
xchg
jae
es
sbb
(bad)
mov
push
push
(bad)
jbe
xchg
enter
data16
jo
mov
xchg
add
jno
iret
ss
sbb
aaa
ja
xchg
push
stos
sub
push
inc
loop
fcomp
cmp
pop
loope
test
lock
in
and
mov
jle
push
test
pop
(bad)
mov
cmp
pop
jbe
sbb
xor
ret
fnstcw
(bad)
sar
push
das
mov
movs
xlat
lods
dec
jns
add
mov
adc
imul
rcl
pop
mov
xchg
repz
pop
cmps
mov
fidivr
mov
cmp
int3
sub
ss
in
test
lods
sbb
xchg
xchg
hlt
fild
repnz
xchg
enter
sub
test
xchg
xor
or
out
lahf
xchg
push
push
sti
ja
pop
jecxz
loopne
lods
xchg
add
xchg
push
in
push
sub
sbb
cmc
nop
mov
jmp
xchg
enter
daa
xlat
inc
pop
setno
add
push
scas
pusha
xchg
test
outs
outs
xchg
sbb
mov
dec
pop
xchg
pop
hlt
sub
aaa
xor
sti
cmps
sub
mov
cli
mov
push
or
xchg
sbb
push
int
sbb
xchg
ins
adc
loop
or
pop
jle
ror
sbb
pop
xchg
pop
xchg
add
push
fidiv
mov
xchg
jecxz
iret
and
xchg
xchg
test
loopne
mov
xchg
pop
stos
push
jnp
icebp
lahf
and
in
push
adc
cmp
loop
cmc
push
mov
cmps
popa
jno
push
imul
jl
lea
loopne
inc
sar
call
sahf
mov
pop
das
push
mov
scas
push
int
clc
cdq
inc
in
xchg
push
lods
xchg
sub
xchg
fwait
mov
jmp
inc
fisub
pop
movs
adc
sbb
jno
nop
adc
push
mov
add
rol
loopne
stc
mov
jae
jne
into
and
xchg
std
pmaxub
mov
mov
adc
arpl
add
push
add
sub
ror
fmul
add
add
cmp
scas
clc
dec
lods
xchg
pop
lock
sub
ins
ret
or
xchg
out
in
call
push
test
out
mov
fidivr
fwait
fwait
stc
(bad)
js
hlt
mov
inc
xor
mov
daa
pop
mov
adc
mov
js
retf
sub
jo
xchg
jmp
les
xchg
mov
call
add
pop
test
mov
mov
bound
adc
mov
test
xchg
jb
es
add
lods
inc
mov
push
xchg
or
movs
mov
or
stos
icebp
rol
sahf
aaa
and
adc
pusha
or
adc
shr
push
fwait
das
lods
mov
shl
icebp
cmp
pop
push
pop
dec
mov
ja
test
mov
xor
fild
in
or
xchg
jl
cmps
(bad)
ins
sti
fstp
xor
add
sbb
xchg
jg
add
cdq
fwait
and
fld
dec
gs
sbb
inc
stc
cmp
jbe
adc
fs
xchg
sbb
lea
sti
arpl
mov
sub
push
mov
cmp
mov
loope
xor
xchg
ds
test
rol
xlat
cdq
mov
fs
adc
push
pop
enter
cs
xchg
clc
out
in
push
inc
xchg
(bad)
popf
call
add
ds
stos
mov
mov
or
jbe
cld
xchg
pusha
xchg
cmps
lods
push
push
fcom
js
adc
sub
rcl
test
cs
add
ds
xor
fistp
pop
es
or
clc
mov
retf
cdq
push
int
and
or
(bad)
xchg
adc
jbe
fdiv
jnp
fs
mov
aas
shl
(bad)
outs
mov
xchg
in
jno
inc
dec
jmp
fcomp
outs
imul
retf
adc
sub
frstor
mul
xor
ds
cmp
and
fwait
retf
push
sub
pushf
mov
inc
add
cwde
inc
add
xchg
jecxz
adc
shl
daa
int3
cld
outs
adc
jae
ins
arpl
xchg
scas
mov
mov
(bad)
mov
aam
pop
(bad)
cli
inc
in
mov
xor
sub
fsub
xchg
adc
nop
dec
dec
lea
push
xchg
cdq
inc
cmp
adc
pushf
pop
add
fidivr
shl
loop
rcl
pop
xor
xchg
call
mov
and
fld
xchg
in
xchg
jp
aaa
cmp
pop
pop
xchg
and
adc
in
je
je
jge
js
sub
sar
dec
push
xchg
fcmovu
(bad)
mov
imul
xchg
int3
movlps
xchg
dec
jbe
xchg
das
arpl
inc
push
push
jle
xchg
xchg
stos
in
ins
and
and
xchg
dec
fstp
mov
call
jecxz
ficom
adc
dec
inc
xchg
aas
ja
cs
xchg
sub
aad
xor
dec
data16
push
xchg
test
add
xor
cmps
popa
mov
pop
dec
pop
xchg
mul
xor
xchg
cld
xchg
xor
xchg
into
mov
pcmpeqw
or
nop
xchg
pop
test
xor
aad
xchg
pop
mov
mov
xchg
cmp
push
fidivr
sahf
cs
xor
and
mov
jp
imul
inc
mov
xor
retf
adc
lods
dec
movs
outs
pusha
enter
pop
cdq
js
or
daa
test
add
adc
enter
xchg
(bad)
mov
mov
mov
out
xchg
add
in
cmp
xchg
pop
sub
jns
sbb
add
cs
idiv
(bad)
mov
leave
jo
or
js
pushf
mov
fs
nop
les
push
call
clc
pop
dec
aaa
xor
movs
mov
dec
jecxz
xor
jle
inc
push
xchg
dec
or
dec
adc
leave
cmp
daa
cmp
test
sub
nop
sbb
fsubr
xchg
inc
lea
dec
dec
scas
xchg
jl
xchg
xchg
pushf
sahf
push
mov
xchg
cmp
dec
add
mov
aam
test
int3
jnp
dec
(bad)
call
sub
adc
outs
mov
mov
mov
pop
leave
ret
xor
test
in
fst
add
mov
test
mov
sub
out
jb
dec
fmul
cwde
sbb
iret
out
push
push
int3
shl
mov
dec
sbb
xlat
nop
xchg
xchg
cdq
pusha
stos
mov
mov
cmp
mov
xchg
fwait
leave
inc
rep
hlt
push
test
int3
ret
xchg
add
cmp
fwait
inc
push
cmps
hlt
lods
test
repz
call
addr16
xchg
and
inc
xchg
dec
cmp
stc
nop
ins
or
xchg
out
sub
jno
xor
mov
mov
push
push
push
mov
daa
cmps
lock
push
stos
adc
and
sbb
cmp
outs
push
sub
xchg
test
inc
int3
dec
add
xchg
inc
and
jge
or
push
test
push
sar
retf
cdq
xlat
in
pop
adc
pop
adc
jne
mov
je
call
push
ds
hlt
xor
sub
inc
inc
adc
jg
clc
mov
pop
scas
jbe
xchg
xor
xchg
repz
loop
mov
and
xchg
pop
jmp
add
pop
aam
mov
xchg
mov
popf
inc
adc
pop
cwde
call
out
push
push
adc
gs
ret
js
jmp
(bad)
xor
xchg
lods
or
inc
xchg
lds
dec
std
cwde
push
clc
outs
mov
pop
xchg
fld
(bad)
mov
in
cmps
int
pop
xor
xchg
fisttp
inc
ficom
loop
jne
cs
mov
pop
xchg
push
idiv
icebp
cmp
clc
xchg
xchg
jge
movs
pop
std
sub
or
cmp
sete
mov
push
data16
pop
xchg
add
(bad)
cli
loope
mov
pop
fidivr
sub
cmp
cmp
test
or
dec
push
sub
out
jb
mov
push
call
xchg
dec
xor
pop
xchg
test
stc
xchg
jae
cmp
xor
in
bound
xchg
es
or
(bad)
in
adc
mov
xor
lods
cmps
mov
inc
pop
fst
int
jmp
(bad)
adc
ficomp
cmc
jg
cmp
test
cmovl
dec
inc
test
dec
lods
jnp
push
mov
and
inc
sbb
sub
mov
jl
out
xchg
je
repnz
jmp
or
mov
xchg
push
and
dec
adc
xchg
mov
jnp
mov
xchg
cmp
mov
pusha
das
adc
jo
imul
adc
daa
in
xchg
test
js
jb
rcl
popf
aas
jns
pop
mov
retf
xchg
sub
mov
ins
lock
push
mov
mov
or
mov
xchg
out
jecxz
pop
cmp
jbe
sbb
lods
pop
xchg
mov
push
xchg
xchg
xchg
scas
xchg
imul
mov
jo
push
mov
or
xchg
xor
mov
or
stos
in
test
movs
aas
test
ins
cmp
add
js
sar
xchg
loope
fsub
push
xchg
daa
xor
test
(bad)
cmps
int3
btc
xor
sbb
cli
mov
pop
and
xor
mov
cmp
mov
movs
push
dec
dec
call
cmp
mov
xchg
sub
pcmpeqd
fdivr
pushf
test
int
ins
push
cmp
not
xchg
jnp
xchg
stc
aas
outs
loop
in
inc
xchg
sbb
jns
ret
xchg
int3
xor
dec
pop
jge
ss
shl
xchg
xor
xchg
inc
ja
dec
jne
je
adc
loope
nop
xchg
mov
test
jp
arpl
test
xchg
pop
xchg
xchg
ret
rcr
cmp
cmp
imul
mov
xchg
and
sahf
in
cdq
inc
(bad)
mov
sbb
cmp
push
dec
xchg
call
fidivr
add
mov
xchg
mov
pop
and
add
xchg
mov
add
xchg
pop
mov
movs
fisttp
jo
dec
xor
pop
lds
(bad)
mov
xchg
pop
cs
inc
jmp
inc
xchg
xchg
mov
sbb
or
inc
xor
cmp
stos
xchg
(bad)
add
cdq
jns
push
pop
retf
mov
and
xchg
mov
je
outs
sahf
jnp
pop
rcl
cmp
push
xor
mov
xchg
addr16
int
or
cmp
dec
stos
out
test
jl
ds
and
jmp
pop
sahf
sbb
repz
daa
mul
fcom
xchg
pop
adc
(bad)
fwait
jecxz
or
mov
(bad)
xchg
scas
in
jmp
xchg
push
in
push
test
mov
xchg
sahf
dec
imul
sbb
mov
mov
xchg
pop
or
inc
xchg
je
and
popf
xor
hlt
lods
sbb
push
mov
lods
sar
mov
jmp
and
shl
adc
movs
loope
xchg
dec
xchg
mov
or
jecxz
mov
daa
pop
xchg
cld
push
push
leave
jo
in
sub
mov
or
cli
xchg
mov
mov
aad
sub
or
popa
aaa
inc
into
xor
cmps
not
jbe
mov
sbb
not
inc
call
imul
shl
xor
aad
cmps
arpl
shr
xor
int
mov
and
cmp
xor
popf
xor
out
adc
rcr
add
mov
js
lds
test
pop
mov
idiv
(bad)
xchg
pop
dec
in
outs
std
sbb
out
xchg
lods
push
idiv
pop
xlat
es
ins
fild
mov
mov
fyl2x
xchg
xor
test
jmp
stos
dec
dec
movs
js
mov
xchg
popf
aaa
mov
adc
jle
sti
mov
xchg
adc
or
xchg
add
or
push
xchg
xor
dec
cs
inc
push
mov
lock
scas
xchg
jne
add
xchg
test
stc
jb
add
test
jp
sub
aam
pop
loopne
adc
xchg
push
xchg
outs
push
outs
dec
dec
movs
xchg
cmp
fmul
inc
pop
fs
aaa
out
icebp
and
bound
xchg
sbb
sub
nop
xchg
pop
cmp
test
int
dec
xchg
adc
push
repnz
xchg
cmp
lods
pop
movs
in
mov
retf
mov
jb
in
les
jmp
xchg
jbe
sbb
jl
dec
aam
sahf
xor
mov
aad
xor
movs
out
xchg
sbb
test
sbb
pop
aam
adc
test
test
repnz
mov
enter
pop
sbb
push
push
jge
and
cld
aaa
adc
jb
xchg
pusha
in
xchg
push
stc
imul
aam
xlat
inc
adc
mov
in
mov
and
xor
xchg
movs
pushf
and
xchg
mov
mov
cdq
sub
mov
xchg
ins
add
pop
or
xchg
adc
cwde
cmc
ficom
push
xchg
sbb
sub
leave
shl
sbb
(bad)
and
xchg
inc
je
retf
aaa
dec
lea
xor
mov
pop
cs
les
jae
mov
jns
push
fs
fs
sub
sahf
jne
mov
aam
or
imul
mov
jnp
frstor
mov
adc
inc
cld
mov
xchg
xor
or
jp
push
xchg
sub
xchg
fbld
jmp
inc
loop
mov
adc
test
or
mov
xor
xchg
sub
fnstenv
movs
jne
inc
push
add
jl
xchg
xchg
icebp
xchg
mov
cmp
lods
cld
pop
frstor
lahf
xchg
inc
aam
ins
pop
nop
inc
push
xchg
stos
inc
fst
stos
clc
jnp
jl
xchg
ret
das
mov
or
xchg
pop
(bad)
sub
into
sbb
pop
mov
mov
dec
mov
in
xchg
dec
adc
je
cmp
xchg
dec
dec
cdq
cmp
rcr
add
cmp
xchg
push
or
add
dec
ins
outs
xchg
into
add
test
xchg
jns
jp
jb
aam
call
arpl
push
les
out
pop
xchg
pop
clc
fwait
mov
cmp
add
push
(bad)
repnz
pop
je
sub
xchg
int3
and
jb
icebp
daa
mov
lea
or
es
mov
xor
jl
mov
xchg
add
mov
(bad)
sar
int
icebp
inc
pop
push
jmp
adc
adc
cli
xchg
jns
inc
pop
(bad)
adc
xchg
or
popf
(bad)
mov
mov
iret
xchg
inc
lds
xchg
or
pop
xchg
outs
lds
mov
ins
mov
push
push
xchg
or
sbb
fwait
shr
xchg
ror
gs
mov
call
mov
xchg
xchg
test
ins
popa
(bad)
jb
push
push
xchg
or
in
test
(bad)
rcr
fmulp
repz
xchg
std
out
xor
and
fisttp
jae
push
bound
push
pop
add
jge
push
mov
call
dec
mov
fs
push
addr16
daa
pop
sbb
mov
ret
mov
mov
or
jns
mov
inc
adc
and
pop
in
int
test
dec
cli
rcl
jae
call
lods
in
mov
in
sub
mov
adc
bound
jbe
or
dec
sbb
xchg
test
enter
adc
mov
push
xchg
(bad)
lahf
push
rcl
imul
out
das
je
xor
fld
dec
inc
xchg
pop
sub
scas
xlat
aad
add
xchg
mov
inc
retf
das
inc
mov
xchg
fwait
or
(bad)
mov
cmc
mov
sar
pusha
mov
jne
mov
xchg
sub
push
int3
ret
jmp
fdivr
or
or
inc
xchg
std
mov
and
adc
jle
repz
push
rcr
cmc
jecxz
test
out
loopne
ins
xor
inc
in
cmp
test
xchg
pop
pushf
inc
test
xchg
sub
adc
sub
xor
xchg
xor
dec
cld
loopne
mov
mov
xor
add
in
cdq
nop
xchg
mov
push
jae
jns
daa
xor
push
mov
shl
in
ret
mov
push
test
pop
aam
push
int
ror
or
xchg
test
and
add
mov
mov
dec
push
sbb
cmovbe
dec
adc
or
sbb
aam
jmp
sahf
xchg
icebp
(bad)
sub
mov
xchg
movs
call
in
xchg
add
scas
xor
mov
push
xchg
dec
inc
sbb
or
xchg
scas
mov
div
outs
lahf
inc
add
xor
push
jne
mov
test
push
repnz
aad
in
xchg
fdivr
stos
pushf
cmps
sub
stos
sar
into
ins
xchg
inc
pop
mov
lods
pop
repnz
adc
mov
stc
and
pop
cld
fwait
scas
lods
xlat
cwde
pop
add
repnz
mov
push
jl
inc
sub
jge
pop
and
adc
jle
mov
cmp
int
es
xor
xchg
call
(bad)
mov
pop
dec
popf
in
cmp
fidivr
test
mov
cs
fwait
int
mov
aaa
and
jp
mov
push
xchg
xchg
dec
gs
sahf
dec
dec
fisttp
sub
inc
xor
aaa
daa
out
pop
cld
jb
push
shl
jns
pop
popa
mov
xor
into
pop
rol
and
push
push
es
xchg
in
ja
test
enter
cs
movs
or
mov
(bad)
dec
mov
arpl
xor
pop
into
test
ret
ja
xlat
test
or
adc
pop
adc
js
(bad)
aaa
xor
cmp
jmp
repnz
lods
mov
lahf
es
or
mov
adc
nop
xchg
cwde
inc
lock
je
xor
and
xchg
adc
icebp
or
jnp
xchg
mov
pop
shl
mov
scas
adc
xchg
imul
out
es
movs
add
shr
xchg
xchg
std
push
mov
push
and
fsubr
cmp
cmp
imul
xchg
cmp
rcl
inc
add
(bad)
mov
jno
aam
inc
hlt
stos
fimul
xchg
aaa
(bad)
push
mov
push
jo
mov
rcl
call
(bad)
sti
ret
mov
aam
js
jmp
push
outs
call
in
cdq
push
(bad)
adc
push
lahf
sti
adc
test
mov
mov
(bad)
sub
mov
std
test
arpl
fwait
repnz
and
xchg
and
stos
mov
test
out
fisttp
jp
and
jmp
add
std
adc
sub
rol
sbb
loop
cmp
xor
fidiv
inc
fild
dec
(bad)
iret
pushf
mov
jns
adc
xchg
fisubr
popa
stos
mov
mov
rcr
dec
jge
std
call
dec
test
cmp
push
in
jb
fild
dec
sbb
cmc
mov
shr
xor
gs
lods
mov
xor
call
or
mov
xchg
test
fiadd
xchg
jmp
pop
mov
mov
mov
fimul
xor
fsub
xchg
cmps
adc
ror
xchg
fcmovbe
sar
movs
push
jp
neg
in
cld
jne
scas
push
call
fcomp
ret
and
pop
mov
inc
push
jnp
xchg
sub
cmc
stos
pop
int
xor
(bad)
mov
mov
sbb
xchg
dec
add
cmps
and
xchg
and
add
cmp
xchg
dec
pop
aaa
(bad)
cmp
cdq
dec
pop
xchg
or
sub
xchg
adc
inc
rcl
xor
lahf
jns
adc
xchg
je
jl
js
add
push
div
outs
dec
iret
nop
stos
xor
js
(bad)
popf
addr16
cdq
pop
mov
nop
mov
out
cmps
sti
test
pop
mov
xchg
daa
mov
sub
xchg
shr
sub
nop
pop
mov
loopne
(bad)
mov
fadd
addr16
xchg
(bad)
fcom
jb
xchg
cwde
xchg
cmp
out
xchg
jmp
and
push
scas
pop
popa
lds
or
aad
dec
xchg
push
pop
xchg
mov
sub
je
xchg
sbb
test
aaa
jg
dec
xchg
xchg
shr
data16
sbb
shr
push
lahf
out
jle
ins
jmp
mov
fwait
mov
push
inc
scas
mov
xchg
and
pop
fidiv
inc
dec
pop
dec
xchg
fst
mov
push
push
lods
repz
add
mov
mov
cmp
push
std
push
ja
inc
xchg
shl
pop
icebp
mov
pop
aas
call
stc
hlt
ss
daa
test
cli
sbb
ds
inc
adc
xchg
aam
ret
pop
inc
mov
mov
mov
outs
rcl
pop
dec
and
fistp
xchg
mov
add
(bad)
mov
sete
mov
jl
xor
cdq
xchg
lods
jns
loopne
sub
rol
out
sub
cdq
adc
stc
or
xchg
sub
xchg
mov
fadd
xchg
bound
mov
iret
push
gs
xchg
inc
push
ret
mov
xchg
jge
dec
jecxz
repz
dec
mov
and
add
or
xchg
pop
movs
sub
lea
pop
mov
int3
enter
stos
cvttsd2si
cmps
xchg
mov
xor
pop
jmp
lahf
xchg
(bad)
mov
and
sahf
mov
sub
into
loopne
jg
adc
outs
int3
inc
jmp
push
not
add
mov
push
(bad)
xchg
jns
(bad)
cmp
(bad)
fld
iret
dec
call
sti
mov
(bad)
inc
mov
cmp
cmp
shl
test
or
or
xchg
or
pop
sbb
xchg
movs
imul
mov
jbe
push
adc
pusha
mov
enter
adc
push
xchg
test
cli
xchg
sub
loope
(bad)
je
mov
mov
and
in
jmp
dec
and
push
and
or
jo
ins
pop
or
lods
jnp
xchg
arpl
xchg
mov
jle
js
je
and
outs
jbe
add
out
cmc
mul
outs
jg
mov
adc
xchg
aad
js
xor
ins
mov
jmp
xor
sar
aas
loopne
in
punpckldq
dec
hlt
mov
pop
jnp
inc
jl
mov
mov
cwde
adc
xor
xchg
or
not
mov
cli
xchg
add
mov
(bad)
(bad)
adc
xchg
xor
call
xchg
into
cmc
test
jno
scas
add
out
arpl
sub
hlt
sub
cmp
pop
xor
xchg
mov
fmul
mov
outs
rcr
stos
and
dec
xchg
or
jmp
sti
fwait
inc
loopne
(bad)
inc
hlt
sub
jp
xchg
jae
retf
pop
pop
push
push
js
xchg
loop
mov
xlat
les
pop
pop
and
jne
xor
jmp
enter
xacquire
xchg
div
add
les
push
nop
loope
int
scas
out
mov
aad
rcr
add
test
jno
pusha
xchg
add
jnp
pop
ss
xchg
mov
push
je
fisub
and
push
icebp
fwait
idiv
or
mov
pop
pop
test
and
sar
mov
inc
dec
xchg
loop
add
mov
mov
pop
fist
ja
ins
and
xchg
retf
lods
inc
jl
jp
(bad)
push
dec
hlt
lahf
retf
push
and
push
xchg
xchg
pushf
in
cli
fnstcw
xchg
pop
loop
mov
mov
retf
push
push
leave
out
cs
mov
inc
cmp
jb
int
shr
mov
adc
xor
or
mov
pop
cmps
mov
push
xchg
fwait
lods
sbb
leave
loope
dec
sub
js
pushf
push
shl
xchg
adc
out
adc
jg
push
cli
push
sub
mov
daa
outs
xor
(bad)
xchg
in
inc
out
movs
sahf
mov
add
scas
int3
mov
hlt
lahf
mov
cmp
jle
sub
aad
stc
cmp
inc
push
xchg
xchg
push
(bad)
cld
ftst
fwait
sub
mov
push
add
jb
sbb
push
add
lahf
sahf
pop
stos
dec
dec
xchg
(bad)
imul
fwait
inc
xchg
sub
lock
xchg
(bad)
hlt
cmp
xchg
scas
xor
fsub
xchg
ret
push
cs
sub
scas
mov
shl
rol
popa
cmps
pop
xchg
xor
sbb
adc
aam
in
retf
leave
sbb
add
or
xchg
push
stc
or
(bad)
pop
mov
push
mov
sbb
les
push
call
mov
mov
push
mov
mov
cmps
lods
lds
push
xchg
jge
or
jno
adc
mov
(bad)
dec
mov
imul
je
cmp
xchg
inc
inc
xor
jns
jno
neg
add
inc
xchg
cmp
pop
jne
push
pop
xchg
es
pop
mov
mov
mov
and
fwait
rol
lods
xchg
loopne
dec
cmp
xchg
adc
arpl
pop
xor
cmp
mov
push
loope
test
loopne
add
jbe
mov
mov
mov
call
add
mov
or
test
(bad)
dec
jl
ret
outs
scas
js
in
sti
fwait
and
mov
es
lods
cld
test
mov
jnp
cmp
pmovmskb
xchg
mov
outs
aam
fs
addr16
je
scas
pop
mov
jo
(bad)
push
adc
xchg
xchg
cdq
push
push
fsubr
xchg
mov
push
aaa
movs
fstp
xchg
dec
int
loope
pop
loopne
mov
xchg
inc
clc
or
pop
(bad)
and
add
xchg
inc
int
test
xchg
xor
push
arpl
push
outs
mov
mov
ss
push
adc
outs
or
retf
fs
adc
adc
(bad)
push
sbb
fwait
inc
adc
mov
jecxz
idiv
push
and
imul
in
mov
jge
cmp
adc
xchg
or
test
push
(bad)
mov
mov
fisttp
pushf
out
mov
mov
mov
jb
and
int
xchg
and
adc
cs
mov
movs
fstp
dec
test
pop
or
sub
xchg
mov
ins
xor
fwait
pop
(bad)
lahf
jbe
movs
pop
pop
js
into
inc
dec
xchg
xor
mov
lods
movs
aas
xchg
or
add
sub
xchg
ret
jnp
int
lods
fld
sub
add
cld
push
mov
pop
xchg
xor
and
jae
pop
test
xchg
xchg
or
pop
push
pop
in
es
movs
inc
sbb
out
sub
xchg
dec
mov
sbb
xchg
dec
das
mov
lock
jno
pop
mov
mov
inc
repz
cdq
mov
int
xchg
in
mov
xchg
js
lock
rcr
cs
mov
add
icebp
repz
pusha
adc
mov
fld
(bad)
pop
test
imul
and
xchg
inc
test
xchg
push
mov
hlt
retf
jmp
or
scas
xchg
lock
mov
pop
int
cmc
mov
mov
clc
dec
jo
rcr
adc
sub
in
xchg
mov
pop
mov
rcr
js
fidiv
cld
xor
test
xlat
fs
pop
fucomp
fist
pop
loope
out
jo
sub
mov
pop
imul
xchg
cwde
jbe
adc
pop
test
and
push
inc
mov
(bad)
sbb
dec
jno
xchg
das
mov
out
scas
xchg
loope
jmp
sub
inc
cmp
lahf
push
sub
mov
mov
jb
mov
lds
xchg
retf
or
dec
xchg
movs
jl
(bad)
call
mov
pop
and
dec
mov
dec
mov
fadd
ins
sub
ret
daa
xor
mov
dec
cmc
add
cmp
in
fucomi
icebp
xchg
ret
ror
xor
les
mov
sub
in
fs
lahf
ds
jmp
cmp
push
call
mov
loopne
jp
rcl
adc
stos
std
lock
mov
mov
xchg
jnp
scas
in
or
aam
jmp
cld
jge
loope
mov
and
pop
aas
dec
leave
je
cli
gs
xchg
and
dec
bound
or
dec
xchg
enter
jl
push
mov
nop
adc
je
xchg
popa
ins
xor
mov
frstor
fistp
xchg
leave
sub
and
jmp
inc
sub
fs
add
xchg
mov
add
xchg
mov
sar
jl
aam
loope
imul
inc
call
ret
sti
out
xchg
pop
or
cmp
pop
out
rol
aaa
lock
aaa
xchg
ret
mov
into
xchg
jg
sbb
repz
pop
xor
adc
sub
stc
pusha
adc
xor
sub
dec
adc
out
jecxz
mov
inc
xchg
stos
mov
adc
xchg
xchg
shl
add
inc
loopne
movs
test
out
xchg
mov
cmc
push
xchg
mov
into
iret
pop
(bad)
mov
inc
test
fld
loope
in
iret
fwait
pop
ins
mov
cdq
cld
mov
xchg
repnz
out
push
inc
out
lahf
(bad)
outs
jmp
xchg
loope
imul
jecxz
adc
fistp
test
lock
in
ja
inc
push
into
inc
jae
test
rol
test
arpl
pop
fwait
or
out
xchg
fdiv
push
xchg
dec
push
ret
inc
addr16
ss
leave
pop
lods
sub
mov
jbe
lahf
dec
or
shl
jnp
pop
jno
xor
mov
hlt
fs
push
aas
push
xchg
or
cmps
out
push
(bad)
add
cmp
pop
imul
mov
ftst
dec
retf
inc
out
test
jae
pusha
mov
aas
lea
(bad)
xchg
cmp
loop
jle
xchg
dec
xchg
test
ins
mov
pop
addr16
xchg
fidiv
pop
(bad)
xchg
scas
mov
mov
jmp
sbb
inc
fsub
mov
aaa
xchg
and
sub
push
pop
push
mov
and
sbb
xchg
dec
cmovbe
int3
or
dec
mov
sub
sbb
xor
xchg
or
mov
fsub
mov
sub
jns
inc
adc
cdq
shl
neg
mov
lods
jl
mov
jb
sub
and
mov
mov
and
jg
xchg
push
inc
or
out
mov
je
push
xor
xchg
jne
push
xchg
ds
inc
test
xchg
scas
int
mov
cwde
lods
xchg
jg
pop
push
add
inc
xchg
dec
jecxz
push
fcmovne
(bad)
clc
xchg
daa
xchg
(bad)
fdivr
cmp
jb
test
cmp
sbb
jns
sbb
pop
imul
jle
stos
xchg
nop
into
cmp
push
mov
clc
push
mov
in
les
cmp
adc
jbe
pop
and
pop
xchg
and
jmp
in
dec
sub
cwde
jl
xchg
pop
pop
dec
or
jmp
shr
lea
inc
imul
into
push
ds
neg
sbb
lock
pop
mov
sub
xor
sub
adc
inc
xchg
ins
push
and
fwait
jg
push
enter
or
xchg
xchg
outs
inc
imul
ret
xchg
cli
and
loopne
aad
jmp
mov
jne
out
cdq
xchg
xchg
mov
repz
pushf
test
dec
xchg
or
and
xchg
or
jle
inc
into
xchg
push
inc
and
add
xchg
repnz
cld
mov
inc
and
mov
imul
pop
jae
mov
test
push
jo
nop
push
cmp
mov
sub
enter
fsub
xchg
sahf
dec
mov
mov
mov
xchg
jne
mov
les
retf
iret
sub
fdiv
mov
repz
je
xchg
retf
or
push
lock
mov
xchg
inc
test
mov
pop
outs
cli
jl
xchg
xrelease
mov
dec
jmp
lea
xchg
cmp
sub
pop
ds
nop
xchg
add
pop
and
outs
cmp
pop
in
push
daa
mov
lea
stos
inc
inc
mov
mov
adc
std
fwait
imul
xor
push
inc
xor
mov
push
xchg
rcr
jns
xlat
and
clc
ds
xor
in
test
and
mov
mov
jns
mov
push
ror
cmc
je
and
or
and
fwait
add
sub
sbb
daa
adc
mov
call
enter
aad
and
mov
xor
lods
pusha
test
inc
and
xchg
mov
aam
adc
mov
xchg
scas
sub
or
pop
adc
xor
or
inc
cli
dec
shl
xchg
xor
ss
push
enter
pop
repz
add
pop
lea
jle
xchg
sub
mov
sbb
sub
or
js
xor
loope
xchg
or
mul
xchg
sbb
hlt
xchg
cwde
ret
ja
das
ror
fistp
outs
cmp
pop
xchg
mov
inc
cmps
xchg
jns
mov
jle
movs
mov
mov
cmp
pop
mov
xchg
mov
lahf
popa
pop
xchg
lods
dec
xchg
cmps
in
cmp
sbb
mov
xor
adc
imul
jl
jb
adc
inc
pop
dec
xchg
int
pop
fadd
stos
jmp
and
xchg
inc
dec
push
inc
jp
(bad)
xchg
movs
ins
push
sub
or
push
es
call
adc
fsubr
shl
xor
xchg
jge
cmps
pop
mov
ret
cmc
adc
xor
cmp
or
arpl
xchg
xchg
cdq
inc
retf
jge
lahf
pop
xchg
movs
fdivr
or
cmp
mov
je
div
pop
xor
loop
mov
retf
daa
dec
add
shl
adc
call
jmp
dec
xchg
pop
ror
push
in
push
lahf
push
or
xchg
pop
movs
popf
call
xchg
jmp
jg
or
jp
xchg
adc
inc
xchg
push
and
dec
cmp
ror
pop
xchg
arpl
inc
rcl
loope
cdq
pusha
xor
and
xchg
or
pop
mov
sub
push
jecxz
cmps
adc
mov
cmp
add
adc
pop
cld
repz
jge
out
xchg
push
mov
cdq
loop
add
push
adc
add
ds
or
push
mov
dec
pop
xchg
ins
add
iret
je
into
mov
call
mov
mov
xchg
inc
xlat
or
seta
xchg
leave
lahf
xchg
inc
mov
aam
sbb
stos
inc
and
enter
inc
aam
sub
cli
js
test
fsubr
stc
xchg
jmp
mov
jbe
jb
mov
sar
sbb
or
dec
push
inc
or
xchg
cmp
lds
or
xlat
shl
or
fs
xchg
movs
cmp
paddq
mov
aam
test
aam
pushf
out
bndldx
jl
xchg
xchg
ins
cmp
jmp
adc
xor
xor
ss
mov
mov
adc
xchg
int3
xchg
ret
lds
pop
rcl
sub
jbe
leave
add
pop
stos
jge
jg
xchg
shl
dec
xor
mov
icebp
adc
out
sbb
cmp
dec
ja
xchg
xchg
(bad)
jbe
mov
in
xchg
cmc
loope
lock
clc
rcl
dec
dec
adc
mov
adc
xchg
mov
jae
imul
mov
aas
xor
aam
ror
dec
xchg
sbb
push
(bad)
pop
cdq
into
test
xor
fcomp
add
push
mul
loopne
or
xchg
daa
cmp
add
sahf
into
mov
retf
mov
call
xchg
adc
jb
not
int3
sub
popa
sub
xchg
addr16
xchg
sub
pushf
adc
scas
int3
xchg
inc
dec
lods
xor
(bad)
xor
lea
movs
in
popf
int3
xor
ds
mov
adc
das
arpl
mov
(bad)
jo
daa
xchg
in
cmp
loope
or
cmps
popa
mov
xchg
jae
inc
idiv
adc
sbb
sbb
bound
xor
mov
jp
or
xchg
jnp
call
mov
xor
std
outs
in
inc
out
xchg
adc
adc
retf
int3
aad
ja
cmc
pushf
sahf
xchg
call
rcl
(bad)
mov
pop
fdivp
push
ret
(bad)
mov
pop
hlt
fwait
jp
pop
mov
xchg
imul
inc
jmp
jl
gs
es
leave
enter
and
sub
or
retf
es
(bad)
jge
cmp
aaa
xor
xchg
mov
jne
jns
lods
push
xchg
jo
rcr
jnp
not
mov
xchg
pop
int3
shr
push
sar
jbe
adc
cdq
add
pop
push
loopne
xchg
push
cmp
push
xchg
movs
xor
push
xchg
nop
arpl
mov
mov
mov
iret
and
inc
sbb
and
xchg
dec
ins
mov
rcl
fsub
shr
adc
adc
xor
xchg
push
pop
mov
jo
mov
bound
and
not
dec
mov
mov
hlt
sahf
clc
out
push
mov
xchg
mov
pop
bound
aam
(bad)
mov
mov
fstp
xchg
ss
lods
(bad)
int3
je
xchg
nop
mov
xchg
jno
in
pushf
das
inc
or
sub
retfw
xchg
sub
fwait
loopne
sar
adc
xchg
fsub
cmp
xor
dec
add
scas
and
addr16
xchg
leave
imul
fs
inc
cdq
jne
pop
push
xor
aam
xor
cwde
dec
enter
xchg
shr
push
xchg
sbb
mov
push
test
loop
arpl
mov
dec
cmc
and
ret
icebp
rcl
jns
xchg
lahf
cmp
stos
dec
sbb
mov
imul
cmps
inc
xchg
dec
movs
clc
js
xchg
pop
xchg
add
mov
xchg
jno
xchg
cwde
xchg
popa
mov
xchg
scas
fadd
dec
xchg
lock
adc
xchg
jmp
je
adc
psrlq
xchg
push
pop
out
xor
(bad)
cwde
mov
push
adc
pop
movs
mov
sub
and
sub
jp
xchg
or
dec
xor
dec
xchg
sahf
fimul
adc
jo
cs
out
ret
pop
jge
mov
div
xor
fcomp
jnp
xchg
push
dec
cld
out
repz
mov
pop
test
jg
inc
mov
retf
ret
xchg
xchg
inc
aad
imul
iret
sbb
mov
sub
xchg
pop
loop
imul
imul
call
or
(bad)
mov
or
fs
sbb
mov
cs
enter
xchg
pushf
imul
xchg
sahf
adc
sub
sub
or
sub
mov
aam
inc
mov
in
jmp
adc
add
mov
xchg
and
lods
jg
movs
aam
cmp
push
rcr
nop
dec
xchg
sub
mov
jns
sbb
fild
test
test
jne
inc
and
out
add
xchg
repz
or
pop
sbb
(bad)
cdq
inc
mov
mov
hlt
jb
jp
adc
jae
lods
xchg
popa
adc
in
mov
bound
mov
das
xor
(bad)
jae
data16
pop
int
mov
outs
adc
push
xchg
fmul
push
xchg
sub
outs
int
lds
bound
inc
scas
shl
xor
arpl
int
cdq
jp
jge
xchg
mov
mov
hlt
push
stos
pop
fwait
call
xchg
aam
sub
sub
xchg
lds
push
outs
jp
in
xchg
xchg
ss
mov
pop
xchg
cmc
inc
lea
out
call
add
or
xchg
dec
mov
shl
xchg
xchg
add
mov
jge
xlat
xchg
mov
std
stos
sub
in
data16
inc
repnz
xor
inc
xchg
fwait
sub
dec
aas
mov
cmp
repz
daa
(bad)
push
sbb
movs
int
arpl
push
and
clc
adc
les
mov
sbb
cdq
mov
inc
pop
(bad)
push
pop
cmp
mov
mov
or
add
cmp
mov
jle
or
xchg
mov
and
pop
lock
xchg
cmps
and
(bad)
sahf
ss
dec
fwait
or
xor
sub
xchg
cmp
(bad)
mov
and
sub
pop
jae
and
sub
add
xchg
jmp
hlt
out
push
xchg
xchg
stos
mov
test
jl
aad
sub
in
out
mov
call
cmps
push
push
xchg
loop
int
mov
xchg
sbb
fsubr
mov
xchg
jmp
dec
push
das
xchg
push
cmp
mov
ret
call
dec
aas
movs
adc
jb
jg
das
pop
xchg
cwde
inc
jnp
xor
mov
sbb
xor
inc
nop
into
ret
jb
and
fcom
xchg
sub
mov
inc
and
xchg
pop
inc
(bad)
cmp
pop
mov
xchg
mov
sbb
bound
jle
outs
sub
push
hlt
mov
xor
mov
inc
dec
xchg
add
push
mov
xor
xchg
je
iret
cmc
imul
setp
add
fisttp
cmp
pusha
pop
pop
fwait
jle
add
(bad)
sbb
xchg
int3
jl
cmp
in
ins
xchg
push
(bad)
mov
stc
jmp
or
mov
cmps
pop
mul
sub
enter
dec
(bad)
push
cwde
xor
xchg
add
in
call
sete
(bad)
test
push
pop
cwde
jnp
retf
std
and
add
xchg
mov
nop
scas
dec
xchg
das
push
add
aas
sbb
in
jae
ds
jb
xor
add
sbb
xchg
mov
(bad)
neg
ins
xchg
std
pop
rsqrtps
push
or
adc
push
bound
mov
hlt
test
xchg
sub
mov
xchg
repnz
xchg
dec
popf
sub
dec
mov
icebp
enter
dec
fcomp
int3
cmp
and
mov
ror
das
fist
cmps
cs
pop
pop
xchg
loope
inc
ins
in
and
ins
mov
dec
adc
xchg
in
adc
stos
ins
xchg
push
mov
scas
daa
int3
rcr
xchg
jo
es
jl
stc
xchg
lahf
xchg
cld
jne
push
mov
fcom
mov
mov
and
fbstp
shl
or
xlat
pop
test
jnp
fcom
inc
rcr
mov
xchg
push
je
or
and
mov
fwait
repnz
pusha
jp
movs
lock
mov
ret
push
ja
pop
push
movs
mov
push
in
xor
dec
popf
popf
push
in
pop
(bad)
(bad)
aam
js
test
jmp
or
int
out
dec
dec
inc
nop
es
nop
loop
jnp
xor
fwait
add
and
pushf
adc
xchg
das
bound
popf
xchg
ins
imul
jbe
pop
sar
or
inc
mov
je
outs
xor
fadd
addr16
add
push
ss
inc
loopne
in
xchg
lods
jae
push
mov
clc
sbb
mul
cmp
dec
pop
mov
xchg
repnz
jg
les
imul
cmps
and
hlt
out
fs
mov
mov
(bad)
adc
add
sti
push
clc
jle
xchg
rol
mov
inc
jns
(bad)
outs
and
cmp
add
jecxz
mov
push
push
xchg
test
pop
call
inc
arpl
mov
push
ret
int3
aam
fs
xchg
outs
sbb
daa
xchg
mov
and
in
(bad)
fisub
fwait
cmp
lods
and
jno
or
mov
mov
ins
xchg
scas
mov
call
xor
loop
or
xchg
movs
dec
sub
mov
repnz
mov
push
je
mov
stos
loope
popa
imul
retf
cmps
xor
dec
jbe
fadd
icebp
adc
call
jns
iret
in
je
lock
mov
xor
test
imul
sbb
popf
add
xor
mov
cmp
inc
adc
gs
adc
xor
mov
or
xor
push
enter
inc
pusha
mov
add
out
aas
arpl
xchg
dec
jp
mov
xchg
outs
popa
cmp
xchg
mov
cwde
mov
mov
push
cmp
dec
js
jmp
les
xchg
xchg
rcr
push
xor
stc
and
push
mov
sti
xchg
dec
nop
mov
stc
lahf
addr16
in
xor
test
xchg
mov
shl
adc
xchg
cdq
imul
xchg
inc
lods
adc
pop
mov
jb
ror
xchg
test
cmc
data16
test
mov
xchg
xor
and
mov
xchg
repnz
and
jne
pop
popf
je
xchg
(bad)
mov
dec
cs
in
pop
pop
hlt
adc
cmps
xchg
mov
loopne
push
mov
retf
icebp
or
mov
jg
adc
inc
test
fisub
push
sbb
lahf
xchg
xor
retf
add
aad
aas
hlt
xchg
mov
adc
sub
daa
xchg
push
cmps
xchg
or
ret
inc
xchg
and
push
or
scas
fidiv
pop
xchg
mov
mov
rcr
lea
(bad)
idiv
xchg
call
mov
adc
in
inc
es
ss
add
inc
aam
arpl
seta
(bad)
xor
mov
mov
in
adc
and
sti
cmp
repz
js
ja
pop
cli
jge
inc
popf
xchg
call
cmp
push
mov
sub
mov
ror
xchg
jnp
xrelease
scas
leave
xchg
and
sub
dec
mov
cmp
pop
pop
lea
out
fsub
ins
xchg
movs
in
inc
mov
pop
cmp
xchg
push
iret
pusha
jo
test
mov
in
(bad)
xchg
mov
pusha
mov
xchg
call
imul
cdq
or
mov
xchg
inc
jae
aaa
retf
jge
fiadd
(bad)
mov
je
ds
repz
loope
add
sub
xchg
popa
leave
mov
std
xchg
fist
ror
mov
jo
adc
push
iret
xchg
cld
lods
xor
jmp
xchg
and
and
push
fwait
xchg
add
stos
iret
xchg
push
std
cmp
cmp
test
xchg
dec
dec
cmc
cmps
fistp
int3
bound
jae
and
(bad)
mov
std
(bad)
adc
fist
cmp
xchg
bound
sub
sbb
cmp
fwait
rol
clc
not
mov
pop
pusha
add
push
sub
xchg
aas
xor
mov
xchg
(bad)
aam
(bad)
fisttp
test
mov
xchg
jg
mov
inc
cdq
ss
pop
and
xor
jno
daa
mov
pop
cmps
movs
add
jae
iret
jl
hlt
xchg
pop
xor
cmp
ficom
data16
fwait
xchg
leave
adc
add
cli
icebp
inc
fwait
mul
cmp
pmuludq
sbb
dec
sar
adc
mov
imul
fwait
fs
dec
and
arpl
cdq
gs
mov
sbb
test
sahf
xchg
sub
lahf
xor
call
(bad)
mov
cwde
dec
xchg
scas
shl
rol
sub
mov
cmps
imul
xchg
xor
mov
ins
push
jb
add
loopne
je
enter
lods
or
xchg
dec
mov
pop
push
pop
jbe
mov
enter
idiv
dec
and
sbb
int
test
xchg
lds
cmps
test
sbb
jo
fwait
dec
inc
sbb
dec
xor
mul
adc
and
ror
clc
cs
dec
cmp
call
xchg
movs
dec
ret
mov
dec
icebp
mov
xchg
scas
sar
mov
loop
cmp
cld
fwait
xchg
jp
fild
movs
jo
xchg
mov
iret
xchg
push
xchg
mov
push
sbb
pop
rcl
ins
pushf
xchg
xchg
add
loop
test
rcr
pop
ins
inc
mov
add
fdiv
and
scas
int
or
and
mov
mov
xchg
shl
pop
mov
cmp
mov
fstp
retf
outs
fisub
movs
sahf
jge
mov
xor
cs
(bad)
mov
cld
fidiv
pop
ds
and
push
icebp
xchg
push
add
mov
inc
or
sub
push
dec
xchg
xchg
stos
jno
adc
push
push
fwait
jmp
les
stos
mov
call
pop
xchg
cs
in
adc
sbb
cmp
push
shl
nop
push
xchg
jno
(bad)
jmp
and
arpl
les
xchg
in
std
das
xchg
push
pop
repz
xchg
lock
sahf
mov
xlat
das
fisttp
pusha
dec
fwait
pop
gs
cmp
aaa
mov
add
pushf
mov
and
xchg
into
cmp
sti
aaa
pop
or
mov
adc
sbb
popf
and
sub
cli
mov
scas
and
xor
push
mov
mov
aam
mov
loope
xchg
lea
jb
push
loopne
xchg
xor
add
jecxz
xchg
mov
add
fwait
int3
loopne
hlt
test
adc
adc
or
sar
mov
fbld
xlat
sub
and
push
(bad)
stos
inc
adc
push
loop
fwait
jmp
aam
sub
jne
push
cmps
aad
sahf
push
xchg
xor
push
jbe
xchg
inc
scas
xchg
(bad)
iret
jb
clc
outs
dec
jne
push
cwde
enter
bound
stos
cmp
aad
(bad)
mov
and
mov
mov
repnz
into
jmp
push
or
sub
mov
mov
sub
es
mov
je
xchg
lods
mov
or
xchg
inc
xor
mov
adc
fistp
sub
push
mov
adc
lea
iret
jne
adc
inc
sti
xchg
in
sbb
hlt
int
aas
test
bound
pop
adc
gs
lea
cmp
add
test
adc
and
sub
sub
add
mov
fbld
xor
inc
jmp
fucomi
pop
dec
popa
sar
pop
loopne
mov
je
test
sar
dec
or
add
dec
fwait
or
(bad)
xchg
push
sahf
movs
sub
out
fist
ds
jns
mov
push
mov
sub
xchg
int
fst
xlat
les
imul
push
xchg
hlt
popa
push
mov
add
xchg
in
jmp
mov
retf
dec
or
dec
xchg
add
jp
fsubr
gs
cdq
cmc
add
js
xchg
sbb
adc
aaa
xchg
mov
jecxz
and
js
xchg
dec
fst
sbb
popf
fiadd
sbb
sub
xchg
dec
mov
xor
cmps
rcr
test
push
mov
adc
sub
xchg
mov
jb
or
fldcw
xchg
jmp
cmp
and
xchg
mov
test
(bad)
out
and
push
ret
outs
add
mov
mov
not
inc
xchg
inc
cmp
jno
push
xchg
mov
ins
or
push
push
cmp
fisub
out
mov
xchg
xlat
fdivr
sbb
push
fwait
inc
inc
sbb
sbb
nop
aas
xchg
or
test
stos
sub
xchg
xor
add
movs
mov
outs
mov
in
int3
push
jg
fistp
push
sub
popa
dec
dec
jns
imul
lods
lods
(bad)
jno
xchg
inc
gs
mul
rcr
xchg
xchg
ret
std
inc
mov
adc
dec
jmp
lahf
mov
cli
cmp
xchg
push
bound
lods
and
shl
mov
dec
lea
popf
xor
add
aam
dec
jmp
imul
jg
xchg
aaa
jle
mov
mov
(bad)
pop
push
push
xchg
outs
mov
xchg
pop
jmp
je
shl
xchg
xchg
jne
xchg
xlat
jmp
stos
push
imul
cmp
push
jecxz
xchg
adc
(bad)
(bad)
jns
call
pop
cs
lods
(bad)
xchg
outs
mov
jno
not
out
jle
jae
dec
mov
mov
and
and
dec
ja
in
sub
add
mov
mov
jp
lea
pop
adc
pushf
call
scas
loopne
bound
dec
fcom
mov
cmp
pop
(bad)
aad
xor
mov
jmp
cmp
pop
add
mov
aam
push
hlt
cmp
add
ja
test
adc
into
fisttp
adc
lea
inc
mov
push
push
adc
sub
mov
adc
add
retf
mov
mov
popf
mov
or
push
push
add
pop
mov
lahf
dec
xor
cwde
out
jmp
push
push
je
xchg
add
pop
iret
dec
sar
xchg
fs
lahf
aad
and
add
xchg
fisub
add
xchg
jg
ins
ret
push
loopne
je
mov
mov
dec
xchg
adc
out
ss
xchg
cld
jo
inc
mov
jbe
je
xchg
sbb
hlt
jle
mov
push
ja
dec
pusha
jge
(bad)
adc
mov
clc
mov
call
popf
mov
stos
mov
jae
mov
(bad)
lock
fst
mov
sub
xchg
jle
sub
xchg
xor
push
xchg
mov
cmc
fild
sbb
mov
xchg
cmp
push
sahf
pop
adc
mov
je
xor
push
mov
out
push
es
ins
or
int
xchg
(bad)
popf
push
lods
cmp
or
xchg
in
neg
xchg
dec
fst
lods
xchg
add
pop
into
ret
and
xor
icebp
jg
push
pop
and
cld
sub
mov
xlat
adc
add
in
sbb
xchg
xor
xchg
pop
lahf
test
and
add
push
cmps
xchg
add
pop
xor
or
js
jle
gs
sbb
test
add
cmp
add
xchg
in
movs
cdq
or
inc
inc
bound
xchg
adc
sbb
add
xchg
dec
mov
inc
inc
xchg
cli
icebp
aaa
call
fidivr
int3
xor
inc
xchg
popf
retf
out
nop
sti
add
imul
std
loop
jnp
(bad)
cmp
je
mov
cs
mov
sahf
push
inc
xchg
fistp
mov
xchg
lahf
sub
retf
xor
xchg
adc
div
(bad)
in
enter
push
mov
sbb
xchg
lock
xchg
sbb
call
loopne
and
lahf
in
push
or
sub
popa
mov
inc
push
loop
jge
push
jnp
mov
xchg
jno
in
or
dec
mov
xchg
push
inc
movs
mov
loop
xchg
inc
jmp
pop
aad
je
mov
movs
movs
xor
cld
sbb
or
std
mov
xchg
scas
adc
cmc
mov
sbb
into
pop
(bad)
adc
ins
ficom
fsub
sbb
mov
movs
fstp
dec
je
add
xchg
sub
sbb
mov
pop
sti
adc
inc
int3
iret
std
xor
lahf
mov
xchg
ror
sub
call
out
xchg
(bad)
push
jne
pop
and
loope
sbb
(bad)
and
mov
adc
push
das
jmp
xchg
mov
sbb
inc
xchg
clc
dec
xchg
rcr
hlt
xchg
movs
ret
dec
pop
test
outs
js
or
test
scas
rcr
call
cmp
pop
je
loopne
mov
dec
leave
push
or
jno
jle
push
sbb
adc
inc
mov
xor
cmp
xchg
mov
push
mov
iret
fisubr
xchg
sti
ficom
mov
or
int3
push
inc
(bad)
ret
xchg
xchg
(bad)
neg
pop
inc
xchg
push
mov
and
int
popa
adc
mov
xor
popf
push
adc
xchg
pushf
mov
popa
mov
cmps
aas
mov
fwait
nop
daa
jb
sbb
fidiv
mov
leave
je
adc
xchg
dec
out
or
xlat
ins
xchg
mov
(bad)
fwait
lds
jnp
test
mov
fwait
(bad)
(bad)
xchg
xchg
sahf
adc
nop
push
call
movs
ss
or
mov
push
sub
or
jl
or
xchg
lahf
add
sbb
pusha
movs
sub
jbe
ret
mov
repz
xchg
imul
pop
sub
xchg
xchg
int
and
or
xor
mov
fisttp
fisub
int
outs
cwde
push
xchg
jle
popf
mov
jae
mov
jmp
and
inc
fidiv
clc
sub
push
mov
xchg
jmp
jp
jmp
xor
and
jae
sbb
inc
fld
fs
cmp
xchg
ret
push
xchg
push
out
push
cs
xchg
outs
sbb
retf
ror
and
std
popa
xchg
test
xchg
test
aaa
jecxz
leave
fwait
add
and
jae
into
xchg
aas
and
iret
mov
aad
in
dec
js
test
cmp
xchg
xor
xor
ret
xchg
add
retf
les
call
adc
stos
in
cmc
int
mov
mov
mov
lahf
push
xor
push
cmc
mov
xchg
push
xchg
xlat
mov
out
xor
adc
mov
ds
mov
push
inc
dec
sbb
call
xchg
pop
jo
jns
imul
fst
xchg
push
fstp
jb
(bad)
mov
mov
xchg
dec
add
sahf
retf
mov
pushw
push
inc
pop
fwait
sub
mov
mov
fsubrp
add
mov
cli
cmp
dec
mov
mov
sub
push
xchg
or
push
xchg
mov
mov
xchg
mov
pop
out
sbb
repz
fwait
xchg
call
shl
ja
push
adc
mov
dec
adc
clc
stos
push
xor
dec
xchg
and
xchg
cmp
cdq
or
ins
aam
mov
aaa
and
repnz
inc
sti
xchg
sbb
pop
imul
lock
sbb
and
xchg
cmps
dec
repz
pop
xchg
xchg
popf
cs
push
cwde
imul
mov
jo
push
out
push
xor
xchg
outs
pushf
xchg
je
or
xchg
cwde
jp
(bad)
ins
repnz
xchg
mov
xor
push
cli
mov
cdq
pop
test
push
sub
mov
add
pop
call
in
jmp
imul
mov
cli
xchg
xchg
adc
or
add
xchg
jp
sahf
inc
mov
aam
cdq
xchg
call
in
imul
mov
xchg
jg
js
leave
sar
xchg
mov
sub
adc
test
xchg
pop
fild
clc
xchg
inc
sub
cmp
lahf
cmp
and
mov
cmp
(bad)
lock
adc
out
dec
xor
xchg
test
dec
js
xor
movs
pop
mov
cwde
out
xchg
inc
arpl
dec
xchg
les
int3
cmc
gs
mov
lea
mov
out
xchg
out
adc
xor
inc
mov
fwait
mov
add
ins
xor
sbb
call
mov
enter
adc
push
mov
scas
inc
xchg
adc
add
lahf
dec
faddp
jge
(bad)
push
cmps
jle
xchg
pop
add
and
sub
leave
je
or
loop
adc
gs
rcl
mov
test
clc
xchg
push
mov
adc
imul
mov
scas
jno
movs
aas
mov
add
xchg
es
xlat
cmp
imul
xchg
stos
sub
mov
rcl
jnp
or
dec
scas
(bad)
xchg
xchg
mov
inc
pushf
xchg
lods
out
or
xor
call
loope
mov
push
outs
sbb
lods
xchg
imul
xor
jns
cmp
xchg
adc
lods
push
sub
clc
sar
pop
or
push
push
and
in
fwait
cmp
lods
cmp
xchg
loop
in
clc
cld
push
xchg
xchg
xchg
xor
sti
sub
cmc
xchg
enter
pop
pop
call
mov
out
jo
rcl
int
sub
sub
push
fsubr
mov
adc
cld
pushf
enter
xor
in
test
popf
jp
(bad)
add
jmp
mov
add
daa
scas
int3
stos
xchg
and
popa
(bad)
xor
mov
aaa
popf
push
call
xchg
jp
loopne
jle
xchg
fwait
lods
mov
lock
cmp
in
aad
push
cli
or
or
cwde
pop
sub
pop
(bad)
imul
mov
pop
dec
cld
xchg
and
pop
or
test
arpl
push
mov
das
adc
pop
mov
pop
pushf
mov
push
add
push
sbb
mov
fcom
xchg
pop
ret
shr
cmp
inc
xor
bound
test
shl
pop
retf
mov
lods
movs
aam
(bad)
jmp
mov
xchg
inc
mov
push
xchg
pop
cmp
add
jns
xchg
xlat
jg
data16
sub
mov
or
retf
cmc
xchg
mov
es
push
loop
xchg
xor
repnz
fwait
ror
adc
pop
mov
mov
push
mov
punpckhdq
xlat
jmp
(bad)
daa
xchg
jns
(bad)
(bad)
int
jbe
je
push
ficom
mov
inc
retf
xchg
aad
dec
rol
cwde
sub
mov
std
leave
xor
sbb
xchg
dec
pop
inc
ins
push
xor
jnp
dec
xor
xor
xchg
daa
inc
ins
jmp
mov
cld
in
mov
shl
fldz
cdq
popa
hlt
push
add
jmp
pop
xchg
fdiv
xchg
sub
push
dec
mov
xchg
shr
xor
ror
xchg
xchg
inc
int
jl
cwde
xchg
cmps
push
xor
xchg
mov
sub
shl
fld
ins
ja
xchg
add
lods
fbld
scas
xchg
pusha
pop
and
arpl
mov
xchg
jle
inc
inc
ds
adc
(bad)
xlat
jecxz
ins
xor
and
inc
sbb
sbb
hlt
xchg
dec
jmp
push
in
int3
aas
je
xor
mov
sub
mov
xor
(bad)
xchg
aam
outs
xchg
les
mov
xchg
repz
mov
jno
adc
jbe
es
out
lods
pop
retf
ficom
xor
iret
fcom
repnz
cs
shl
xchg
fsub
scas
daa
add
lods
jae
pop
iret
mov
sbb
mov
xchg
mov
mov
xchg
in
outs
fwait
jle
loope
ret
fucomi
cmp
aam
xchg
mov
fisub
sub
and
dec
ror
xchg
add
in
stos
or
xchg
test
pop
ja
xor
hlt
sbb
and
(bad)
xchg
aas
repz
dec
push
nop
adc
sbb
out
mov
pop
xchg
int3
and
pop
scas
mov
jmp
sbb
xchg
xchg
std
(bad)
scas
jg
push
push
je
xchg
pop
pop
sub
mov
les
pop
sub
int
movs
test
hlt
dec
push
push
xchg
outs
movlps
clc
(bad)
test
loope
and
xchg
cs
pop
es
stos
xchg
cmps
adc
out
and
mov
xchg
fdiv
lods
add
xor
enter
idiv
inc
inc
xchg
inc
or
test
xchg
in
shl
(bad)
cmp
in
mov
je
inc
push
xchg
ret
mov
test
inc
xchg
adc
sbb
mov
ins
xchg
ss
mov
shl
sbb
cmps
add
mov
mov
mov
xchg
out
std
and
cmp
adc
ret
jmp
push
xchg
or
vmovupd
cmp
xchg
je
fxch
inc
fiadd
shr
gs
and
mov
pushf
inc
or
iret
xor
cmp
ss
xlat
dec
mov
test
jo
pusha
ret
lock
mov
inc
out
jp
xchg
jg
or
pop
push
inc
js
cld
test
sbb
adc
jno
xchg
sub
ins
ins
(bad)
in
mov
adc
sub
pop
inc
fs
push
adc
imul
xchg
xchg
call
xchg
jne
mov
mov
jg
js
mov
imul
mov
jbe
fwait
(bad)
out
outs
pop
adc
pop
rol
jb
cmp
les
mov
hlt
das
xor
inc
sahf
pop
mov
(bad)
(bad)
dec
xchg
adc
mov
cmp
(bad)
xor
xchg
inc
xor
out
cdq
xchg
xchg
sbb
dec
lea
sbb
dec
cmp
fbld
xchg
xchg
xchg
adc
call
iret
add
pop
popf
mov
push
cli
xchg
mov
sar
xchg
js
dec
xchg
fisttp
or
ficomp
pop
cmp
jmp
lock
push
pop
or
sbb
fwait
mov
jge
aam
push
sub
xchg
adc
ror
pop
mov
fimul
ins
xchg
mov
mov
retf
push
cmp
mov
jne
fistp
cmp
push
pop
out
fadd
inc
sti
xor
in
out
mov
jg
ins
xor
stos
push
mov
sub
lods
bound
cmp
inc
bound
xor
mov
rcl
xchg
push
aad
jl
xor
pop
xchg
mov
out
xchg
mov
test
adc
sub
push
loopne
call
cmps
ret
jmp
mov
shr
rcl
daa
mov
repz
mov
xchg
(bad)
out
outs
pop
fwait
mov
imul
sub
std
in
cmp
mov
ins
pop
ficomp
push
pop
sbb
loop
sbb
inc
xchg
daa
jmp
xchg
in
lahf
push
retf
ret
xchg
pop
dec
jl
mov
fwait
inc
jne
pushf
mov
rol
loopne
or
cmps
xchg
jo
inc
mov
dec
sahf
and
xchg
rcl
push
pop
xchg
mov
jb
(bad)
xchg
shl
lock
sbb
mov
mov
xchg
mov
loop
popa
and
pop
push
pop
push
je
sub
xchg
xor
sbb
bound
iret
leave
ret
stc
mov
xchg
lock
or
out
in
mov
fwait
jmp
sti
test
aam
call
cdq
cld
dec
xchg
nop
xchg
sahf
jmp
outs
gs
ffreep
mov
je
or
out
xchg
and
js
push
xchg
adc
xor
stos
xchg
cdq
or
pop
xor
xchg
outs
mov
call
xchg
push
lahf
inc
div
inc
cld
add
and
xchg
add
clc
lock
mov
repnz
sbb
leave
inc
hlt
jo
in
and
sub
ror
xchg
lock
cmp
scas
mov
hlt
xchg
stc
sahf
loop
push
loopne
mov
mov
xchg
mov
xchg
push
cdq
dec
push
xchg
mov
cmps
cmp
call
fwait
push
sbb
cli
or
pop
xchg
sbb
retf
test
pop
mov
aam
jmp
adc
xchg
sub
inc
dec
mov
xchg
add
hlt
into
mov
xor
pop
jmp
mov
pop
das
nop
push
add
fwait
xchg
shr
inc
mov
mov
stos
mov
xchg
call
rcl
aas
mov
and
int
out
adc
push
mov
arpl
fiadd
lods
add
add
inc
xor
push
cmc
jg
pop
data16
mov
jl
js
aam
sar
xchg
mov
inc
push
repnz
sbb
daa
push
mov
xchg
mov
ror
dec
mov
xchg
fld
mov
adc
cdq
neg
mov
stos
bound
int3
sbb
jo
cmp
jmp
in
adc
sbb
cli
sub
lea
sbb
call
sub
loop
fsubrp
out
or
push
adc
push
loope
cmps
xor
and
fwait
dec
or
add
(bad)
mov
shr
movs
add
adc
mov
dec
ror
lods
xchg
mov
dec
pusha
leave
icebp
adc
inc
sbb
adc
sub
call
test
mov
xor
xchg
imul
gs
aaa
mov
xor
outs
lods
data16
xchg
push
xchg
iret
inc
std
into
sbb
ret
lea
dec
xchg
xor
retf
mov
das
mov
push
adc
jnp
pop
sub
sub
or
into
retf
jbe
sar
sbb
imul
sbb
enter
xchg
xchg
mov
xor
pop
xchg
int3
mov
xor
jbe
mov
aad
jo
fisubr
sti
pop
or
pop
addr16
cmp
xchg
mov
push
aam
inc
leave
cmc
xchg
push
ja
aaa
test
adc
adc
jno
cmp
pop
xlat
xchg
retf
mov
sar
sahf
xchg
inc
push
mov
in
jbe
cmps
fcom
adc
mov
adc
pop
in
sub
mov
xchg
xchg
or
jmp
dec
daa
pop
mov
dec
sub
int
jmp
mov
push
jecxz
std
inc
inc
push
xor
jns
inc
adc
and
cdq
out
mov
je
imul
mov
xchg
push
cmp
jg
sar
rcl
mov
xchg
aaa
in
and
(bad)
push
(bad)
and
fsub
cmp
int
and
(bad)
xchg
dec
jnp
es
xchg
lock
test
cwde
push
sbb
test
fist
jno
cld
adc
xor
cdq
xchg
and
or
mov
xor
sub
lods
xor
imul
loopne
test
mov
int3
xchg
push
js
das
ret
jp
(bad)
test
in
cmc
loop
add
into
push
xchg
(bad)
cld
fst
(bad)
jno
ficom
inc
sub
fwait
outs
div
aad
adc
adc
jp
add
ret
fidiv
aam
push
sbb
jg
adc
xor
mov
mov
aam
ja
bound
sbb
adc
xor
icebp
xor
xchg
pop
pop
push
in
fwait
test
dec
loop
jns
scas
dec
xchg
fidivr
sub
ret
fist
std
xchg
(bad)
iret
inc
clc
in
ja
gs
xchg
rcl
push
cmp
sti
loopne
les
xchg
jne
shr
lods
cmp
dec
shl
ins
jecxz
hlt
mov
xchg
pop
out
fadd
jmp
cld
xchg
xchg
mul
inc
cmps
popf
mov
imul
jmp
stos
push
pop
cld
xchg
fstp
jmp
xchg
(bad)
rol
cmc
sti
mov
inc
inc
mov
fs
push
xchg
push
push
inc
shl
inc
sub
push
jbe
clc
xchg
fimul
dec
or
push
fs
mov
push
push
pop
lock
fwait
shl
sbb
mov
outs
cmp
cld
mov
ins
test
ja
cmp
retf
jl
jnp
mov
sti
das
and
mov
xchg
xor
mov
daa
xchg
dec
outs
xlat
stos
ins
jg
mov
jmp
popa
xchg
and
fwait
dec
fild
loop
aam
call
pop
imul
mov
xchg
not
lock
xchg
dec
out
mov
loopne
cmps
add
aad
retf
out
xchg
xor
push
shr
aaa
pop
bound
jmp
enter
sub
les
das
mov
inc
sbb
ins
aaa
cdq
xchg
jne
jnp
xor
adc
arpl
and
mov
jmp
adc
rol
sbb
test
dec
adc
in
aam
jo
jl
xchg
fisubr
sbb
add
xchg
inc
xchg
cld
pop
fadd
add
jl
inc
xchg
adc
fldcw
repz
xor
fbstp
add
rcl
xor
xchg
xchg
cli
ins
pop
bound
pop
sub
xor
jmp
mov
and
mov
mov
aam
sahf
jp
jb
lahf
xchg
inc
jl
jns
pop
sbb
mov
push
test
aad
xchg
lods
push
cld
es
xchg
(bad)
mov
dec
(bad)
mov
aam
rcl
in
lods
xchg
mov
cwde
arpl
setnp
push
xchg
das
push
mov
mov
or
push
movs
xor
xchg
xor
jg
dec
fwait
xor
mov
sbb
inc
mov
jb
out
or
fwait
sti
sahf
(bad)
xchg
call
int3
rcr
mov
clc
xchg
test
jmp
test
jge
xchg
mov
mov
mov
add
lar
(bad)
pop
aam
neg
out
jb
js
fwait
lea
pop
hlt
mov
cmc
xlat
or
neg
and
and
shl
int3
mov
jae
test
lea
ins
cs
mov
ds
fadd
cmp
sub
sti
call
adc
sbb
adc
jae
je
fistp
cld
out
adc
pusha
bndldx
xchg
cmp
scas
mov
test
and
call
mov
mov
mov
push
xchg
mov
jmp
test
or
pusha
repnz
dec
sub
xchg
sub
add
call
fld
xchg
dec
nop
stos
daa
fmul
cld
xchg
push
cmp
mov
hlt
out
cmp
xor
xchg
adc
mov
push
xor
xchg
mov
je
jl
push
inc
xchg
leave
mov
imul
and
mov
xor
stos
in
mov
xchg
icebp
dec
cmp
lock
dec
jno
xlat
xchg
addr16
bound
nop
fwait
dec
(bad)
xchg
ins
jle
loopne
push
jne
test
or
adc
sbb
pop
shl
xchg
xor
fwait
xchg
adc
fst
out
call
mov
adc
cmp
(bad)
cmp
pop
push
adc
xchg
test
outs
aad
out
stc
rcl
mov
inc
xchg
ss
push
call
xor
push
jecxz
push
push
xchg
div
in
pop
aam
xchg
xor
mov
mov
scas
xor
mov
popa
idiv
adc
inc
xchg
xchg
inc
jns
cmc
dec
xchg
and
mov
and
je
into
xor
dec
stos
jae
aas
xchg
jge
cmp
mov
xor
pusha
lahf
mov
cmp
jbe
xchg
mov
out
push
xchg
jne
aas
push
pusha
dec
dec
xchg
sub
fiadd
xchg
icebp
int3
mov
int
inc
adc
inc
sbb
xchg
(bad)
dec
and
jp
shl
ret
mov
sub
movs
pop
dec
cmp
cmc
out
loop
call
xchg
das
movs
sbb
aaa
into
xor
and
(bad)
pop
pop
cwde
xchg
sbb
xor
sub
cmp
xchg
add
ss
into
dec
pop
ret
(bad)
jg
aad
cmps
xchg
ja
std
sub
cmp
xlat
int3
adc
mov
xchg
imul
sbb
loopne
add
xor
adc
or
push
xchg
push
dec
mov
ss
enter
mov
xchg
cmp
(bad)
xlat
mov
out
das
out
aaa
add
mov
ja
hlt
push
fdivrp
jp
pop
scas
out
lea
push
out
adc
loope
adc
jge
xlat
xchg
xor
nop
adc
addr16
shl
pop
push
cmps
dec
pop
xchg
ror
xor
and
out
inc
pop
adc
jbe
mov
xor
xchg
push
or
xchg
shr
adc
pop
sbb
rcl
mov
push
unpcklps
jb
or
push
sbb
loop
xchg
(bad)
std
hlt
pop
jmp
iret
inc
in
mov
aad
jae
jb
inc
retf
rcl
add
das
xchg
push
jb
push
cli
or
pushf
fdivr
mul
repz
pop
jmp
xchg
xchg
dec
dec
mov
ins
push
or
push
mov
xchg
cli
and
pop
or
xchg
xchg
and
cmp
xor
mov
jg
fisttp
push
in
(bad)
fnstsw
pop
loop
sub
sub
repz
mov
repnz
and
mov
dec
pop
xchg
ror
call
mov
mov
adc
push
adc
ror
dec
cmp
das
push
xchg
cmp
jecxz
mov
dec
fcom
inc
push
out
xchg
outs
fs
mov
or
pop
sub
stos
pusha
je
cmp
jae
xchg
aas
cmc
loopne
and
xchg
paddq
xchg
(bad)
mov
leave
mov
push
adc
mov
rol
loope
into
xchg
sbb
add
(bad)
dec
mov
jg
push
pop
pusha
fwait
cmp
or
sbb
adc
adc
pusha
mov
xlat
mov
sbb
xchg
lods
pop
sub
repz
add
push
xor
rcr
cli
xchg
aam
xchg
and
(bad)
rol
ds
and
xchg
aaa
cdq
pop
fimul
or
xchg
sahf
pusha
or
(bad)
dec
adc
int
mov
push
test
xchg
leave
call
in
cwde
scas
fwait
sub
popf
sbb
xchg
nop
add
and
pushf
(bad)
push
xchg
hlt
adc
ja
shl
xchg
inc
jmp
mov
and
xchg
inc
jecxz
cmp
push
mov
and
and
cmps
pop
sub
retf
mov
out
mov
add
(bad)
jno
js
pop
sub
lods
loopne
lock
movs
cmp
or
outs
jge
xchg
pop
lds
stos
jb
dec
adc
push
sub
cmps
sbb
mov
xchg
test
std
mov
xchg
jge
mov
ret
(bad)
int3
pop
xor
jno
in
xchg
call
out
je
xchg
xchg
push
sbb
xchg
jp
xor
lods
(bad)
repnz
xchg
lods
xchg
xor
es
sub
mov
inc
jp
rol
cdq
mov
fld
push
sub
xchg
cwde
test
add
xchg
adc
test
and
dec
stos
pop
xchg
push
ss
fs
test
mov
xchg
mov
push
and
inc
stos
sub
into
push
jge
aad
jmp
pop
dec
push
add
pop
push
xchg
xchg
and
jne
call
pop
repnz
push
adc
bound
or
sub
lock
and
pushf
in
adc
xchg
jmp
mov
scas
cli
dec
push
dec
icebp
jmp
arpl
xchg
xor
imul
or
jno
outs
loope
xchg
mov
sub
mov
sub
les
jmp
cdq
add
jb
ret
adc
dec
fst
xlat
or
data16
loop
mov
loopne
xchg
in
pop
mov
mov
aad
sti
jp
jo
inc
xchg
dec
or
xor
repnz
jecxz
xor
sub
fs
mov
aam
inc
inc
mov
iret
or
cdq
and
lods
not
xchg
data16
ja
stos
std
xchg
out
dec
shr
imul
sbb
call
dec
mov
cmc
pop
pop
xchg
xor
enter
fs
and
pop
(bad)
cli
popf
xor
dec
rcl
xchg
cwde
lea
stos
div
xchg
pop
cdq
jns
enter
int
or
inc
hlt
fld
dec
jecxz
xchg
lods
scas
int
repnz
fidiv
xchg
popf
paddsw
xchg
dec
pop
push
mov
(bad)
push
xor
and
mov
sbb
sub
fdivr
mov
sbb
mov
sub
hlt
retf
fsubrp
dec
xor
xchg
xchg
or
sbb
jmp
ret
pop
(bad)
lahf
jge
outs
lods
nop
int3
rcl
test
call
cmps
add
jp
xchg
jae
xor
mov
mov
int
pop
mov
pop
je
int3
push
cld
fsub
sbb
xchg
push
mov
xchg
push
sub
rcr
inc
xchg
call
fwait
or
mov
xchg
add
adc
jp
jmp
push
xor
bnd
not
fs
pusha
xchg
loop
ffree
repnz
mov
and
out
or
rol
fnstenv
xchg
loopne
add
dec
jle
pop
cmp
or
mov
scas
xchg
mov
imul
mov
popa
dec
adc
pop
js
or
xlat
adc
adc
cmp
leave
xor
add
xchg
ret
xchg
xchg
fsubr
std
xchg
jne
mov
add
and
cmp
imul
sbb
push
push
mov
push
icebp
xchg
arpl
lods
mov
xchg
inc
nop
(bad)
mov
(bad)
rcr
test
(bad)
(bad)
shl
es
mov
fbstp
fst
retf
xchg
jbe
(bad)
scas
aam
jge
xchg
repz
neg
sub
sbb
gs
xchg
aad
dec
in
sub
mov
fsub
je
xchg
ficom
sub
shl
xchg
mov
dec
mov
mov
or
push
pop
cld
sbb
push
hlt
fwait
dec
(bad)
icebp
xchg
leave
add
pop
int3
mov
xchg
xor
ds
bt
retf
add
add
js
enter
sbb
xchg
sbb
jne
push
loopne
lds
xchg
pop
xchg
addr16
stos
sub
push
shr
xchg
out
pop
je
push
inc
shr
and
sar
int
pop
int3
mov
or
rcl
hlt
out
sbb
mov
ret
loopne
jp
js
push
jbe
xor
aad
ja
in
xor
mov
push
xchg
mov
or
xchg
jl
mov
dec
mov
xchg
pop
mov
fs
xchg
jo
pushf
dec
sbb
or
les
lea
xor
cmp
js
ficom
and
pusha
xchg
cld
mov
adc
ja
push
fst
push
sbb
and
sbb
mov
and
imul
in
mov
int3
sbb
fs
xchg
jo
call
sbb
bnd
xchg
fs
xchg
test
daa
cmc
pop
rol
cld
and
xchg
das
xchg
push
rcr
inc
xchg
sbb
jmp
test
iret
xchg
dec
mov
push
push
dec
rcl
sub
jmp
js
(bad)
dec
mov
loope
xor
xchg
cli
mov
push
mov
fcmovbe
ins
lahf
call
cmc
adc
retf
rcl
mov
mov
push
lods
add
mov
push
mov
or
push
xchg
jmp
push
pop
cmp
dec
mov
je
cmovl
xchg
and
icebp
sub
lea
enter
xchg
push
je
mov
out
jmp
mov
pop
cmc
add
mov
sbb
shr
std
(bad)
cmp
adc
cdq
jge
not
adc
repnz
cli
and
jecxz
dec
pop
xor
lock
mov
or
sub
push
dec
sub
xchg
loope
imul
pop
leave
xchg
pop
retf
fmul
add
adc
xchg
sbb
call
es
push
jnp
mov
jmp
icebp
xchg
sbb
push
and
out
xchg
fdivr
imul
cmp
mov
mov
adc
sbb
xchg
fnstcw
xor
inc
add
fiadd
out
xchg
pop
or
xchg
in
test
jp
or
inc
mov
sbb
leave
aam
mov
jl
add
data16
xchg
dec
in
cli
and
pushf
(bad)
imul
std
mov
adc
ror
mov
jb
jl
jae
xchg
outs
cmps
mov
test
shr
fdivr
xor
xchg
pop
inc
xchg
mov
into
mov
es
outs
sbb
xchg
fadd
pop
or
xchg
test
inc
xchg
sbb
jge
es
mov
ja
adc
mov
aam
sbb
and
xchg
jne
xor
adc
and
xchg
retf
in
mov
jo
or
or
add
test
repz
push
ins
jmp
pop
add
adc
ret
mov
sub
mov
hlt
jbe
imul
push
mov
outs
cmps
outs
pop
jns
(bad)
inc
test
xchg
or
pop
cmp
(bad)
movs
cmps
imul
retf
rcl
xchg
xchg
out
call
fsubrp
cmp
mov
mov
add
pop
aad
xchg
mov
mov
jg
xchg
rcl
or
jmp
mov
xchg
push
push
dec
or
out
xchg
add
into
std
mov
sbb
ins
js
xor
test
les
or
fisttp
js
les
mov
xchg
test
(bad)
jp
hlt
jl
xchg
add
jnp
jb
ret
jne
adc
(bad)
xchg
iret
ss
pusha
fcmovnu
scas
mov
push
mov
dec
xor
add
push
movaps
outs
aad
scas
xor
dec
sbb
sbb
out
mov
xchg
pusha
std
popf
mov
in
mov
mov
xchg
inc
loope
ret
xchg
mov
test
xchg
(bad)
mov
mov
retf
mov
mov
sub
and
jnp
nop
xor
and
cwde
adc
cli
sub
push
sbb
test
xlat
fwait
inc
stc
push
cld
push
dec
paddusw
test
adc
aam
stos
cmps
push
push
or
dec
xchg
ja
aad
je
mov
iret
xor
pop
lock
mov
xor
cdq
jmp
movs
lods
inc
add
call
lahf
sbb
cli
xchg
mov
mov
add
push
rcr
test
pop
xchg
xchg
ja
lods
stos
add
shl
xor
xor
xor
xchg
popa
cmp
fimul
add
add
repnz
jl
sub
dec
lods
pop
pop
xchg
sbb
shl
mov
ins
jl
mov
(bad)
adc
(bad)
mov
adc
in
mov
ds
mov
stos
clc
push
dec
bound
jp
pop
sahf
(bad)
xchg
push
xchg
or
retf
out
pushf
pop
adc
xor
adc
imul
xchg
dec
cmp
xor
sbb
test
push
je
sub
mov
adc
arpl
xchg
test
mov
pop
mov
xchg
enter
lds
dec
cmps
jnp
add
in
icebp
mov
adc
ja
mov
add
pusha
mov
jle
sahf
cmp
inc
xchg
mov
fimul
xchg
inc
push
and
or
sbb
mov
sub
(bad)
mov
adc
push
cdq
inc
ret
jmp
ja
xchg
repnz
test
xchg
arpl
adc
mov
adc
or
xchg
push
jge
cld
js
(bad)
mov
inc
push
dec
fistp
stos
fcmovbe
adc
sub
push
and
mov
call
inc
outs
shr
adc
add
gs
mov
rcl
xchg
mov
jg
les
mov
jp
fwait
addr16
push
not
mov
repz
or
sub
(bad)
fst
sub
mov
je
rcr
call
add
jne
xchg
mov
cmp
or
mov
(bad)
cmp
sub
or
fdiv
xchg
shr
sub
cmp
adc
xchg
ficom
(bad)
mov
rcr
pop
jge
in
mov
adc
jmp
cld
dec
lahf
xchg
adc
ds
add
mov
aad
lahf
mov
lahf
fadd
add
lods
jae
add
xchg
add
jno
shl
lock
mov
dec
or
pop
outs
mov
hlt
fcmove
xchg
cmp
dec
ja
xchg
bound
push
ret
fst
and
and
push
ficom
pop
xchg
jmp
push
ror
push
mov
or
xchg
push
sti
enter
out
mov
test
je
mov
cmp
out
cmp
dec
xor
addr16
outs
sub
in
inc
jp
mov
xor
push
jae
addr16
pop
pop
inc
pusha
repz
mov
cmp
sub
mov
mov
cmp
or
xchg
mov
pop
xchg
sar
jno
push
mov
in
xchg
jmp
sbb
mov
mov
or
jo
sbb
dec
and
loop
outs
iret
mov
xchg
dec
jge
out
mov
sbb
ds
je
mov
sbb
mov
aas
mov
popa
cdq
sbb
scas
mov
cli
inc
cmp
cmp
lock
xor
jae
sbb
xchg
(bad)
popa
in
mov
xor
mov
leave
xchg
jl
je
(bad)
shr
cmps
pop
mov
xchg
xchg
shl
inc
fld
inc
sbb
test
and
mov
pusha
js
jae
loopne
iret
xchg
pop
addr16
cmp
add
xchg
ret
xor
adc
stos
or
add
push
and
icebp
fidiv
pop
imul
mov
in
arpl
dec
dec
ds
bound
xchg
movs
adc
in
and
fwait
js
xchg
and
retf
fcom
(bad)
iret
daa
or
mov
xchg
arpl
inc
movs
xchg
das
faddp
lods
ror
mov
mov
out
xchg
jmp
sahf
repz
ins
push
pusha
and
mov
iret
es
xchg
scas
fnsave
and
pop
push
adc
hlt
not
push
cmps
sub
inc
mov
das
lock
cmp
shl
mov
adc
jg
cmp
ret
rcl
dec
stos
xchg
in
add
inc
pusha
inc
mov
cmp
dec
mov
xor
add
je
jo
cmp
dec
iret
xchg
fimul
jo
xchg
jbe
ret
stos
xor
sub
fs
hlt
cmp
lods
iret
push
and
jb
push
xchg
mov
sbb
mov
sbb
mov
jo
int
mov
mov
mov
arpl
mov
pop
outs
xchg
pop
call
xchg
popf
mov
adc
frstor
cld
jnp
fwait
scas
push
ins
inc
(bad)
out
popf
push
xor
jae
je
jnp
adc
in
cmp
fisubr
lods
in
lock
cdq
cmp
ins
adc
or
ss
mov
adc
je
or
xchg
(bad)
ret
mov
and
add
sub
cmp
retf
mov
cmps
push
cmp
sbb
(bad)
xchg
sub
dec
adc
test
or
cmps
push
out
pop
mov
scas
xchg
mov
and
pop
fst
cmp
int3
xchg
or
and
sub
shr
out
call
punpckhbw
pop
push
hlt
scas
and
mov
ins
das
retf
mov
pushf
and
xchg
lods
jp
fsub
out
lock
aad
cmp
add
add
cmp
adc
enter
fs
int
xchg
pushf
pop
xor
mov
cdq
add
popf
scas
xor
dec
xor
jns
stos
inc
xchg
cmp
jno
or
stc
and
xchg
mov
jge
jp
nop
jle
mov
xchg
popa
inc
les
sbb
fisttp
xchg
ss
outs
ficom
or
xchg
jle
pop
xlat
(bad)
lea
inc
arpl
mul
retf
call
dec
out
addr16
int3
in
rcr
jp
movs
sbb
mov
xchg
cvttps2pi
xchg
dec
sbb
mov
mov
call
scas
inc
or
mov
jae
test
aas
push
cmps
push
xchg
push
les
test
xor
xor
jo
sbb
pop
xchg
out
jae
inc
test
arpl
sbb
clc
mov
ret
and
test
test
mov
mov
clc
jmp
or
test
xchg
je
xchg
dec
xchg
sub
pop
sub
test
xchg
fdivr
aad
xlat
xchg
icebp
xchg
rcr
fmul
dec
je
cmps
loope
stc
xor
popf
out
xor
xchg
test
in
xchg
mov
fldenv
cld
icebp
xchg
push
push
jne
xor
pop
ret
mov
xchg
jmp
not
cdq
int3
mov
movaps
sub
mov
mov
and
rcr
dec
xchg
jp
mov
cdq
xchg
movs
rol
repz
xor
pop
xchg
and
fcomp
shr
arpl
pop
call
fwait
add
imul
xchg
retf
jns
out
push
repnz
aam
jbe
xchg
inc
sub
call
bound
lods
mov
std
scas
movs
xchg
jecxz
jno
cmp
adc
in
cmp
xchg
outs
loope
popf
fbld
xchg
xchg
adc
aad
call
xor
sbb
repz
adc
jg
repz
mov
dec
fwait
ror
cmp
sub
test
dec
jnp
fwait
adc
adc
leave
jb
ficomp
pop
je
js
jnp
mov
cmps
ja
retf
push
stc
xchg
pop
push
xor
mov
or
xor
pop
xchg
mov
mov
adc
dec
nop
xchg
cdq
aad
movlhps
inc
add
call
lea
and
and
into
test
jbe
fadd
enter
in
aam
aam
test
test
mov
sub
cmps
es
jle
adc
ror
in
jbe
fnstcw
push
aaa
mov
sub
retf
out
add
mov
xchg
into
mov
test
jp
out
je
adc
pushf
mov
lgs
jmp
mov
xchg
stc
dec
pop
cmps
inc
push
les
or
fst
pop
sbb
adc
in
push
shl
in
ins
pop
pushf
jmp
adc
jns
push
cli
jo
xchg
jmp
fld
dec
sub
enter
sub
fmul
mov
push
mov
xchg
xchg
pushf
ss
cmc
jl
loopne
arpl
pop
lea
adc
faddp
daa
sahf
jl
xchg
mov
xor
mov
adc
push
and
fwait
dec
lock
outs
pop
gs
xchg
sbb
sahf
push
dec
inc
pop
rcl
adc
sbb
aas
inc
outs
not
cli
mov
xchg
sub
xor
add
mov
ret
xchg
leave
daa
mov
cmp
(bad)
shl
les
sub
mov
xor
out
int
xchg
aad
pop
push
leave
mov
jg
call
sbb
popf
push
scas
fild
popa
xchg
shl
and
mov
xor
ins
hlt
adc
ins
xchg
je
jp
retf
jle
sbb
cmps
fwait
jnp
mov
mov
pop
iret
and
xchg
out
xchg
fidiv
push
xchg
add
movs
push
repz
jne
fwait
cmp
adc
xchg
adc
dec
xchg
xchg
aad
imul
xchg
test
jo
out
inc
push
xchg
clc
or
(bad)
out
mov
xchg
sub
out
jge
mov
aam
xor
enter
xor
jmp
stos
pop
pop
cli
xchg
je
add
cmp
xchg
dec
jle
sbb
cmp
call
add
mov
xchg
mov
dec
sbb
mov
out
(bad)
adc
dec
das
jmp
hlt
or
popf
pushf
dec
jge
xchg
sub
pop
or
xchg
aad
mov
push
mov
mov
xchg
dec
jg
mov
jns
nop
xchg
sti
xchg
test
mov
pop
mov
xchg
les
mov
adc
loop
mov
and
mov
xor
lods
(bad)
in
stos
push
(bad)
push
xchg
xchg
(bad)
pop
mov
aas
mov
test
movs
mov
add
and
xchg
pusha
dec
sbb
dec
mov
ret
or
mov
mov
cmp
pop
fcom
jae
cmp
mov
lods
xchg
(bad)
cmp
sbb
sub
xor
xchg
inc
arpl
push
pop
ret
inc
xchg
stos
(bad)
stos
adc
xor
outs
ins
iret
pop
retf
pop
xchg
ret
add
inc
mov
mov
xchg
fadd
mov
bound
mov
and
cdq
in
aaa
xchg
jg
shl
test
adc
push
ret
sbb
por
add
int
dec
(bad)
pusha
mov
and
test
pop
xchg
push
jno
repz
push
pop
pop
call
jae
loopne
push
xor
lahf
sbb
mov
out
jmp
dec
fdiv
jb
xchg
call
xlat
sbb
(bad)
rol
loope
iret
(bad)
push
jecxz
aam
mov
inc
jns
fcom
neg
mov
push
xchg
cmp
jl
push
das
packssdw
fist
daa
mov
add
xchg
inc
mov
jge
mov
xchg
sub
out
enter
push
push
adc
ret
in
xchg
enter
cmp
mov
nop
pop
call
scas
fsub
rcr
pop
mov
inc
je
aad
addr16
int
dec
xchg
xor
test
test
cmp
xchg
call
fwait
fwait
iret
je
retf
cmp
pop
pop
push
daa
lods
inc
push
inc
xor
rcl
dec
inc
xchg
jl
outs
out
fsub
push
mov
add
sbb
pop
push
je
int
pop
or
loop
and
out
inc
xchg
pop
push
push
push
not
aaa
jp
mov
movd
pusha
dec
hlt
pop
pop
push
leave
xlat
xchg
sbb
fsubr
mov
mov
jl
ret
ds
xchg
xchg
cmps
idiv
fcomp
xchg
scas
or
push
pop
mov
hlt
(bad)
hlt
cli
inc
daa
pusha
xchg
or
mov
int
out
adc
jmp
loope
dec
and
mov
add
xchg
fldenv
jae
cmps
pop
ss
sbb
in
sbb
mov
add
xchg
pop
jmp
adc
enter
push
popa
xchg
inc
sub
sub
pop
xchg
xchg
aam
mov
xchg
mov
scas
aas
in
mov
pop
xchg
mov
mov
push
xchg
(bad)
repz
repnz
popf
das
mov
dec
pmaxsw
sub
push
jbe
xchg
cli
aad
sbb
loope
xchg
cmp
mov
hlt
nop
inc
xchg
or
cmp
inc
push
push
xchg
cmp
stos
and
nop
dec
xchg
mov
xchg
iret
xchg
js
pop
cmp
and
loope
cmp
out
and
rcr
jecxz
pusha
and
xchg
iret
pop
jp
push
xor
jmp
mov
jb
je
xchg
cmp
out
xchg
fwait
lds
sub
sub
(bad)
outs
pop
pop
repz
pop
rol
sahf
inc
in
sub
fld
mov
mov
dec
or
or
stc
jns
out
cs
xchg
ss
cmp
fbstp
jnp
jle
xchg
mov
mov
lods
mov
ins
xchg
loope
fistp
add
test
adc
es
hlt
lahf
aas
cmp
es
(bad)
mov
dec
imul
inc
sub
xor
mov
aam
dec
repz
pop
jno
jecxz
ret
xchg
mov
es
sbb
sahf
push
sbb
mov
(bad)
jmp
push
jne
pop
jbe
pop
xchg
sbb
mov
sbb
ins
dec
pusha
mov
add
jo
aam
adc
mov
jmp
sub
loope
xchg
jecxz
sub
cmps
sub
into
stc
mov
jne
das
jl
stos
out
xchg
push
add
xchg
cmp
sub
in
addr16
mov
stos
ret
mov
(bad)
jmp
enter
inc
mov
vmwrite
inc
loope
mov
xchg
and
push
jae
mov
jmp
rcl
sbb
shr
sahf
sbb
xchg
nop
and
dec
mov
dec
ss
mov
daa
shl
mov
fs
sbb
xchg
(bad)
pop
aaa
test
adc
cmp
ret
movs
push
sub
xor
fsubr
xchg
repnz
sbb
jg
cdq
sbb
xchg
xchg
push
pop
es
mov
imul
xchg
shl
ret
xor
cmp
dec
lods
adc
xchg
imul
pop
and
cwde
cwde
sbb
sar
mov
add
mov
scas
idiv
mov
xor
shl
xor
jno
fs
out
cmc
sub
dec
jbe
xchg
call
pop
inc
(bad)
mov
sub
or
(bad)
inc
fs
and
xor
pop
fdiv
or
leave
adc
jecxz
cmp
pop
cmp
rcl
pop
or
jg
sbb
aam
cs
into
xchg
fsub
leave
mul
adc
adc
xor
cld
jge
ss
test
sbb
cdq
cmp
push
scas
hlt
adc
xchg
adc
mov
cmp
sahf
mov
(bad)
xchg
cwde
sub
dec
mov
mov
adc
adc
cld
cmps
mov
nop
xchg
mov
in
imul
adc
ret
jo
jbe
pop
in
adc
sub
rol
mov
and
sbb
arpl
lea
push
or
xchg
out
add
outs
mov
xchg
lock
mov
mov
xchg
xchg
sub
sbb
jnp
cwde
js
sete
aaa
cmp
call
int3
xchg
xlat
push
dec
and
ja
bt
jge
mov
mov
push
add
cmps
ja
sbb
cmp
int3
adc
mov
sbb
aam
imul
call
sbb
rcr
sub
cmc
xchg
retf
push
outs
xchg
jb
icebp
pop
cwde
inc
mov
loopne
push
mov
aam
xor
mov
pushf
xor
adc
cmp
xchg
leave
nop
int3
js
cmp
outs
xchg
test
test
or
stos
mov
in
scas
add
outs
xchg
adc
cmp
push
pop
xor
xchg
fistp
stos
imul
std
xchg
aad
pop
xchg
mov
movs
mov
pop
dec
stos
cli
mov
bound
xchg
ins
push
call
xchg
imul
(bad)
xchg
xchg
clc
fiadd
xchg
push
mov
lods
xchg
inc
cmp
xor
xchg
or
sbb
and
dec
xchg
sub
call
stc
mov
mov
adc
adc
(bad)
adc
xor
add
xchg
push
iret
xchg
call
cwde
and
mov
mov
mov
cmp
push
sbb
jb
punpckhwd
xlat
xor
dec
sbb
bnd
or
sbb
out
iret
add
xchg
jmp
xchg
cs
adc
push
xchg
mov
mov
mov
aad
push
mov
or
(bad)
xor
inc
xchg
push
jno
xchg
std
xor
jle
pop
adc
dec
adc
(bad)
call
inc
(bad)
xlat
leave
pop
xchg
aaa
or
cmc
mov
mov
xchg
adc
std
ins
lods
inc
xchg
fs
out
mov
pop
fsubr
sbb
(bad)
sbb
xchg
call
mov
test
rcr
mov
xor
test
xchg
fdiv
mov
sub
sar
fs
and
xor
xor
mov
push
lods
mov
cld
loopne
jo
adc
xchg
and
test
xchg
loope
faddp
add
loopne
xchg
xchg
test
stos
inc
push
cmc
mov
push
in
sub
or
adc
mov
repz
(bad)
mov
ja
aam
inc
inc
lds
xchg
dec
mov
mov
jbe
xchg
aaa
jns
jmp
test
xchg
fwait
sbb
data16
mov
pop
sub
mov
movs
xchg
push
inc
aaa
mov
in
xor
xchg
mov
xchg
push
inc
jge
rcl
stc
fcmovnu
xchg
(bad)
mov
jnp
mov
sar
dec
clc
fwait
inc
inc
xor
hlt
cs
repz
(bad)
fild
ds
imul
xchg
adc
jg
pop
nop
test
xchg
dec
retf
pop
cmps
clc
nop
add
xchg
cdq
int3
sbb
xchg
sub
sbb
into
xchg
dec
add
adc
sbb
xchg
les
ins
mov
cmp
lds
in
mov
in
inc
add
or
xchg
jmp
rcl
xor
rcr
jge
push
dec
xchg
out
jno
outs
pushf
sti
call
aas
scas
mov
cmps
cmc
xchg
mov
je
(bad)
mov
mov
or
test
out
xchg
fisub
add
xchg
sahf
data16
xchg
jbe
mov
or
and
inc
pcmpgtd
pop
mov
sbb
xor
xor
or
jae
or
pop
pop
mov
push
jns
dec
jge
scas
iret
nop
ins
popf
ss
or
pop
hlt
mov
xchg
fmulp
push
cmp
iret
sub
xchg
push
jl
imul
lock
loopne
add
inc
xchg
pop
test
xchg
addr16
test
nop
enter
pop
push
xchg
jns
adc
sbb
rol
mov
mov
icebp
cld
inc
cmp
add
xchg
add
nop
xchg
pushf
stos
inc
(bad)
mov
xor
adc
jo
mov
inc
into
xchg
add
je
out
jmp
rol
fcmovnb
push
pop
push
pop
cmp
sub
ins
or
inc
ror
sahf
xor
test
push
fwait
leave
adc
dec
and
or
pop
xchg
popa
je
dec
sysenter
or
mov
and
js
pop
aas
xchg
xor
(bad)
pop
xchg
mov
sub
xchg
cmc
daa
xor
adc
jle
xchg
pushf
xchg
stos
mov
into
push
pop
adc
fninit
add
inc
rcl
xor
adc
xchg
fld
jne
jp
mov
icebp
xchg
and
sub
adc
xchg
outs
repnz
cmp
stc
xchg
sar
je
sbb
xchg
stos
(bad)
and
retf
call
xchg
lock
mov
sbb
and
dec
cld
into
arpl
and
repnz
out
xchg
cli
mov
inc
adc
add
or
ins
sbb
inc
jb
xchg
cdq
cld
test
ins
jecxz
test
pop
cmp
sub
or
push
mov
lods
and
mov
mov
adc
test
rcl
dec
imul
jge
and
xor
xchg
mov
jnp
jo
pop
xchg
jbe
aad
out
xor
int3
sar
adc
(bad)
fcom
push
xchg
clc
pusha
loop
cmp
mov
lahf
in
push
enter
xchg
dec
clc
add
mov
mov
repz
lea
ins
mov
adc
jno
pop
cmp
xor
mov
xor
and
sbb
ins
mov
out
daa
mov
pop
pop
ins
and
or
xlat
cwde
shl
cs
push
dec
mov
test
imul
les
jl
test
clc
xchg
mov
cmc
arpl
push
iret
pop
adc
add
adc
stos
inc
push
fisttp
(bad)
pop
push
xchg
mov
jmp
and
imul
xchg
rcr
popa
stos
sub
rcl
test
or
sbb
xor
in
xchg
ss
cdq
stc
sub
and
xchg
test
sbb
sub
stos
cmp
pop
out
lahf
cmp
clc
and
xchg
pop
sub
sbb
sar
inc
rcr
dec
(bad)
shl
loop
dec
cmp
mov
adc
mov
push
scas
mov
jo
mov
xor
lea
xchg
movs
cmc
add
fwait
mov
sar
xchg
or
push
ins
jg
adc
out
and
push
cmp
xor
outs
mov
xor
scas
mov
fs
pop
clc
xchg
iret
adc
push
add
lods
inc
xchg
lods
jmp
add
pop
or
in
inc
imul
xchg
leave
mov
test
fs
add
sub
pop
out
sub
xchg
sti
sub
shl
imul
div
xchg
mov
sub
lahf
xor
inc
mov
add
jmp
xchg
pop
xchg
sar
js
out
xchg
lea
out
into
and
sub
jge
xchg
mov
test
ret
nop
jb
fst
movs
mov
pop
loopne
neg
iret
xchg
inc
popa
fdivr
mov
je
fisubr
(bad)
xchg
pop
xor
je
dec
mov
xchg
dec
retf
test
push
add
fild
xchg
xchg
fiadd
mov
push
lods
xchg
mov
dec
scas
xor
rol
sbb
inc
xchg
mov
sub
(bad)
mov
pop
push
iret
pop
sbb
xor
dec
into
mov
jbe
mov
fwait
adc
ret
or
pusha
mov
mov
aas
cmp
sbb
mov
xchg
loope
mov
jecxz
movs
and
push
add
jle
pop
nop
outs
jge
sbb
leave
mov
mov
test
or
push
add
leave
in
xchg
ins
add
add
fsqrt
sbb
jno
xchg
push
jmp
rol
mov
add
fwait
cmp
lea
rcl
or
mov
push
xchg
jmp
mov
xchg
or
mov
or
and
mov
mov
mov
ds
ss
push
stos
lods
xchg
inc
mov
cwde
movs
xchg
stos
out
mov
xchg
ins
mov
(bad)
jbe
mov
xchg
jmp
sbb
inc
test
stos
fs
mov
sahf
mov
es
repnz
dec
pushf
xlat
adc
fdivr
xchg
das
loop
mov
xchg
mov
mov
add
adc
xor
pop
cli
add
pop
sbb
pavgw
lds
arpl
push
call
jp
xor
mov
pop
cld
xchg
jg
mov
sub
(bad)
jmp
xchg
xor
or
jne
add
mov
dec
push
cs
stos
mov
jo
adc
inc
adc
sub
popa
xchg
xchg
mov
xchg
rcl
jmp
pushf
cli
xchg
xchg
(bad)
pop
cdq
push
lods
out
bound
pop
jecxz
adc
int
dec
xor
aam
dec
test
mov
es
adc
out
ins
cmp
xchg
nop
aam
or
mov
cmp
add
leave
lahf
mov
mov
into
mov
scas
adc
call
cli
mov
add
into
xchg
mov
fwait
and
rcr
sbb
cmp
jb
mov
mov
xchg
jnp
stos
dec
push
cmps
sbb
leave
in
bound
rol
dec
xchg
ret
inc
mov
or
retf
cmp
cmps
fwait
(bad)
out
sbb
jmp
je
das
test
daa
mov
push
or
cmp
cdq
popa
data16
imul
fwait
int3
add
pop
sub
jae
outs
in
and
ror
add
mov
fs
mov
sti
xchg
push
repz
xchg
cmps
scas
mov
pop
or
add
and
sbb
xchg
cmps
cmp
ret
retf
mov
pop
inc
(bad)
mov
outs
in
xchg
mov
lahf
push
lods
mov
cmp
ret
push
enter
dec
outs
cmc
or
inc
push
nop
push
je
lods
or
lahf
push
aam
adc
mov
out
jl
scas
mov
cmps
call
or
mov
aam
fwait
nop
inc
(bad)
push
adc
adc
jecxz
push
mov
xchg
inc
mov
inc
cmp
fwait
lock
mov
(bad)
popf
retf
call
pop
repz
xchg
stc
mov
inc
ins
cmps
push
in
inc
mov
cmp
inc
xor
lea
ins
jo
xor
xlat
mov
hlt
call
lahf
outs
push
cmp
popa
push
mov
movs
xchg
jno
mov
cmp
out
sbb
xchg
mov
dec
jl
xchg
pusha
out
pushf
dec
jmp
mov
inc
in
xchg
jns
push
imul
outs
cmp
adc
add
pop
mov
mov
retf
es
addr16
mov
xchg
into
ror
dec
out
gs
mov
cld
inc
mov
sbb
retf
movs
fnstsw
in
cmp
fs
mov
xchg
ins
mul
fcmovu
mov
xchg
add
ds
ret
jl
mov
ficomp
scas
hlt
ss
mov
jmp
xchg
cmp
gs
pop
add
dec
jmp
retf
sbb
ror
nop
fwait
js
xor
fs
imul
sbb
int3
sub
mov
add
push
popf
js
pusha
sub
dec
in
lods
mov
and
cld
sub
dec
pop
dec
addr16
mov
lahf
adc
xchg
hlt
mov
call
test
xor
mov
outs
fsubr
jno
mov
jge
cmps
sar
mov
adc
test
xchg
mov
and
sbb
inc
cmps
jmp
dec
adc
repz
cmp
jae
sbb
jne
mov
cmp
neg
inc
dec
in
pop
dec
loopne
push
mov
sbb
je
imul
push
xor
push
inc
xchg
pop
enter
int
mov
loop
fiadd
or
dec
mov
lds
adc
mov
xchg
or
pop
int3
pop
dec
pop
xchg
enter
std
pop
stc
xor
nop
daa
cmc
xchg
dec
dec
and
xchg
pop
(bad)
int3
mov
test
stc
call
adc
imul
test
xor
lods
addr16
dec
sub
ins
xchg
mov
shl
adc
push
jns
xchg
jle
adc
es
mov
js
aad
out
ret
stc
in
xchg
pop
dec
mov
clc
xchg
gs
jbe
stos
inc
out
push
pop
xchg
mov
jmp
jl
test
jge
sbb
test
fbld
mov
ins
in
clc
retf
push
inc
shl
cmp
mov
mov
pop
pop
push
loope
lock
mov
shl
call
mov
xchg
dec
adc
push
inc
mov
sub
in
sbb
jmp
pop
dec
xchg
fisubr
inc
pop
and
and
xchg
inc
dec
dec
inc
xchg
lods
pop
imul
ret
mov
jne
dec
cli
jl
nop
push
je
adc
mov
jmp
jp
popa
sbb
xor
jns
out
mov
gs
inc
aaa
mov
into
add
pop
xchg
mov
sbb
nop
xor
(bad)
inc
mov
sub
movs
ins
rol
fist
fwait
cli
jae
mov
xor
rcl
mov
int
xchg
mov
inc
xchg
cmp
shr
std
mov
aam
adc
jne
jns
enter
les
fiadd
idiv
jne
nop
hlt
(bad)
xchg
lock
clc
out
outs
cmp
mov
mov
mov
gs
loopne
push
cmp
mov
dec
mov
dec
sbb
adc
fwait
stc
ins
xchg
out
and
icebp
xchg
push
cmp
mov
xchg
fiadd
xor
mov
xor
test
xchg
mov
or
mov
adc
pop
push
in
retf
xor
inc
mov
add
or
jmp
and
imul
dec
cmp
jmp
xchg
or
shr
xchg
jo
fistp
xchg
jp
or
mov
sub
xchg
fwait
mov
jns
xchg
inc
into
jp
cmp
fwait
sar
sub
or
mov
mov
xchg
cmp
mov
cmps
inc
int3
sbb
xchg
lock
sbb
mov
bound
(bad)
xchg
or
lahf
sub
les
sbb
(bad)
es
xchg
cmp
out
adc
xchg
dec
in
stc
xlat
mov
dec
sub
sahf
fiadd
(bad)
aam
jle
scas
inc
xchg
mov
loope
adc
stos
jnp
dec
sbb
fwait
or
fdivr
dec
adc
shl
rcl
inc
call
jecxz
pop
adc
sbb
or
xchg
jnp
and
mov
mov
int3
jne
out
sar
push
xchg
pop
fwait
dec
sub
aaa
les
mov
jp
xchg
(bad)
retf
out
mov
sub
stos
sub
xchg
cli
iret
push
jno
std
popa
stos
xchg
mov
dec
adc
xchg
mov
mov
push
in
clc
mov
sub
mov
stos
push
sub
fnstenv
or
stos
dec
sbb
push
push
xor
push
xchg
ficom
jns
arpl
inc
sete
sahf
ror
iret
cli
mov
inc
fisttp
xchg
add
dec
xchg
mov
repz
xchg
fidiv
push
mov
nop
adc
xchg
lahf
in
add
dec
sbb
fist
and
add
xchg
jns
gs
out
xchg
cli
stos
jmp
cmp
dec
xchg
sbb
mov
jg
xchg
xchg
aam
and
pop
xchg
cmp
call
pop
dec
cmps
jo
movs
nop
and
xchg
xchg
rol
mov
xchg
lods
inc
jecxz
and
xchg
bound
rol
inc
xchg
sub
leave
xchg
xchg
(bad)
out
pop
addr16
jp
xchg
or
add
xor
dec
stos
xchg
xchg
cmps
sbb
daa
mov
xchg
mov
xor
mov
fs
push
add
xlat
push
inc
xchg
inc
mov
das
arpl
out
jae
xchg
jns
scas
or
mov
xchg
mov
sbb
or
iret
out
sti
add
add
xchg
xlat
mov
inc
fwait
or
pusha
aam
push
aas
cdq
je
test
add
retf
jmp
xchg
xor
das
jmp
xchg
test
xchg
ret
sub
xchg
outs
sbb
or
mov
cmp
cmps
fwait
repnz
mov
xchg
or
loope
xchg
pop
mov
xlat
xchg
sub
inc
jae
daa
fistp
xchg
jnp
sbb
jo
hlt
inc
sbb
adc
mov
call
cwde
shl
sar
xchg
std
adc
fild
out
sub
fs
fwait
add
jp
push
inc
sahf
fcom
nop
das
xchg
mov
cdq
js
aad
mov
add
push
test
mov
in
or
fidiv
xchg
push
test
xchg
mov
fcomp
inc
mov
popa
xchg
fimul
mov
xchg
retf
mov
gs
out
xchg
fild
int
mov
scas
inc
adc
mov
mov
mov
xlat
test
add
dec
mov
mov
mov
in
js
leave
push
fst
pop
addr16
(bad)
xchg
jle
mov
fwait
inc
rcr
adc
and
pushf
cmp
and
add
cmp
loope
nop
daa
out
xchg
popa
shl
shr
push
shl
outs
mov
jecxz
jmp
es
jg
popf
push
xchg
or
dec
mov
xchg
xchg
je
mov
xchg
dec
sbb
mov
cmp
pusha
std
aam
xchg
scas
fwait
or
xchg
jl
mov
stos
mov
pop
jbe
push
sbb
xchg
lea
xor
push
mov
add
xchg
mov
push
adc
cld
pushf
sub
xor
retf
cmp
xchg
fiadd
aaa
xchg
test
adc
xchg
mov
(bad)
(bad)
push
inc
outs
pop
sti
fst
push
xchg
lock
icebp
push
pop
jns
fcomp
xchg
xor
xlat
retf
dec
push
pop
or
add
xchg
and
loopne
jns
bound
ret
sbb
cmc
ds
xchg
xlat
out
pop
dec
call
cwde
ret
mov
push
xchg
hlt
and
iret
idiv
push
jnp
aad
cmp
adc
mov
leave
mov
pop
jo
cli
add
movs
es
adc
mov
mov
hlt
cmp
int3
inc
xor
addr16
inc
sbb
pop
xchg
out
xor
leave
mov
jb
pop
or
sbb
pop
loopne
mov
test
rcl
inc
cwde
xchg
cmp
jp
mov
call
scas
push
or
call
and
mov
seta
add
push
daa
dec
sub
or
popf
ret
jp
fs
mov
test
cwde
ds
je
arpl
rol
push
fs
stos
test
xchg
repz
mov
imul
jnp
mov
adc
and
fcmovnbe
mov
mov
xchg
mov
ins
xor
cmp
ret
add
ins
jo
call
push
stc
mov
adc
(bad)
out
xchg
rol
pop
cmp
xchg
mov
les
xor
inc
scas
leave
jae
adc
push
or
jb
ret
push
mov
xor
je
or
sbb
push
outs
inc
pxor
xchg
hlt
xchg
sub
in
daa
jae
test
mov
iret
and
sbb
jns
adc
mov
adc
mov
jp
pop
add
dec
sar
cmp
inc
sti
push
and
push
sbb
es
pop
xchg
shl
(bad)
xchg
or
xchg
xchg
out
addr16
rcl
and
and
mov
neg
adc
jb
dec
push
adc
loop
je
xchg
jae
mov
sbb
mov
ins
pop
aam
data16
les
xchg
nop
xor
push
(bad)
shl
fwait
inc
cmp
pusha
add
xchg
push
xchg
in
xor
test
xchg
sti
aam
lods
inc
mov
test
xchg
jns
adc
adc
call
inc
sbb
push
xchg
aaa
xor
mov
shr
adc
xchg
enter
cld
mov
and
xchg
or
xor
add
fimul
call
dec
inc
lods
xchg
fwait
or
mov
jnp
xchg
rol
pop
xchg
xor
(bad)
or
xchg
inc
fsubr
mov
movs
bound
xchg
jp
pop
pop
mov
mov
xchg
mov
sbb
push
xchg
mov
xchg
xor
fs
iret
xchg
lea
les
arpl
inc
out
in
pop
ret
aad
jns
mov
sti
jae
push
inc
sub
sub
or
xchg
mov
nop
adc
test
and
pop
sbb
movs
into
or
scas
dec
ror
pop
xchg
xchg
fcomp
sbb
stos
iret
adc
call
(bad)
std
or
jp
dec
or
jbe
cmc
jae
xchg
in
hlt
pop
out
jmp
xchg
adc
pop
cmc
inc
xchg
outs
shl
xchg
imul
cli
cmp
cs
mov
pusha
(bad)
ds
cmc
xor
jb
mov
je
mov
mov
mov
cmp
popa
mov
sti
clc
pop
or
push
push
imul
rcl
or
nop
pop
fs
fwait
xor
jmp
adc
popa
mov
not
pop
xor
mov
xchg
or
adc
push
dec
loop
or
adc
xchg
mov
loope
adc
cmc
ret
sub
push
xchg
push
push
cmps
repnz
jl
mov
xor
gs
fst
xchg
add
aas
jno
pop
ins
fwait
sar
push
movs
mov
lods
jmp
pushf
pop
xchg
jl
add
add
fisttp
mov
pop
mov
cmp
or
dec
or
lods
jmp
sahf
sar
mov
cmps
mov
sbb
jg
xchg
jb
ja
dec
xchg
icebp
gs
push
mov
js
fwait
add
jo
(bad)
hlt
outs
adc
cmp
sbb
xchg
push
ins
pop
push
int
sbb
fild
scas
loopne
jbe
fs
add
mov
jecxz
mov
add
adc
xchg
imul
cmp
mov
sbb
out
add
ret
xchg
daa
leave
repnz
cs
sbb
or
fimul
lock
mov
mov
retf
push
fwait
in
fidiv
xchg
mov
fldcw
cmps
add
jmp
xlat
jmp
aam
hlt
or
sub
and
or
cs
ins
into
mov
fdiv
mov
sbb
jecxz
adc
(bad)
in
xlat
sti
int3
pop
cmp
xchg
outs
pop
mov
into
stos
(bad)
ror
xchg
pusha
enter
fdivr
je
sub
mov
xchg
das
adc
mov
jne
sub
xchg
and
cmps
dec
rcr
inc
mov
bound
(bad)
xchg
add
jmp
pop
int3
nop
pop
xchg
xor
mov
inc
or
fdiv
xchg
in
xchg
jne
pop
aaa
cmp
mov
rol
push
fwait
cld
dec
and
push
je
fs
mov
push
aad
jo
xchg
and
std
xchg
popf
mov
shl
repnz
push
arpl
xor
(bad)
mov
push
es
ret
ret
mov
daa
inc
mov
cdq
push
jb
mov
leave
jmp
and
xchg
push
xchg
push
xchg
iret
cmp
cmps
shl
xchg
mov
push
les
xchg
xchg
imul
add
push
adc
out
push
fcom
adc
out
pop
hlt
or
mov
xchg
or
jg
jge
xchg
jp
adc
xchg
xor
fsubp
xlat
jo
cdq
xchg
mov
enter
addr16
stos
mov
gs
xchg
call
cmp
dec
imul
mov
jge
or
scas
mov
dec
inc
mov
add
pop
repnz
jg
data16
sub
fwait
lods
mov
xor
std
xor
add
and
ja
and
ins
loop
xchg
popa
ss
cs
xchg
mov
mov
retf
cmp
pop
mov
int
or
ds
mov
not
stos
sbb
mov
xchg
cmp
xchg
add
cmc
mov
mov
mov
or
xchg
arpl
cmp
(bad)
mov
pop
(bad)
outs
or
pop
mov
neg
fwait
pushf
cdq
jecxz
sbb
inc
int
repnz
aas
pop
mov
add
cmp
lock
xchg
popa
mov
dec
test
mov
jns
pushf
test
sbb
retf
jl
cmp
mov
movs
enter
stc
inc
lods
test
mov
(bad)
shl
adc
jno
jmp
gs
cwde
lock
jecxz
and
sti
out
add
xor
mov
aad
pop
hlt
ds
adc
(bad)
sub
mov
mov
or
and
(bad)
lods
mov
arpl
xchg
adc
inc
mov
and
rol
mov
sbb
bound
adc
add
xchg
jecxz
int
pop
push
lea
pop
hlt
iretw
mov
adc
cmp
jbe
ja
cmp
sub
adc
shr
sbb
stos
fist
jl
out
xchg
push
pop
jno
jge
pop
push
cmp
aas
test
or
and
mov
out
xchg
mov
xchg
lods
shl
movs
adc
add
fnsave
push
mov
das
loopne
add
xchg
test
dec
lea
(bad)
mov
mov
adc
js
rcl
inc
icebp
rcl
xchg
adc
test
mov
stc
loope
sbb
stos
fmulp
lea
sub
test
xchg
dec
mov
mov
sbb
pop
pop
push
add
xchg
push
inc
arpl
adc
xchg
pop
aad
mov
shl
into
push
mov
adc
sub
les
aam
inc
cmc
(bad)
sbb
mov
xchg
test
xor
test
jle
mov
fiadd
imul
loop
pop
cmps
pop
test
add
call
retf
fucomp
cmp
movs
pop
es
jb
aas
dec
mov
cmp
je
xchg
mov
add
out
aaa
push
js
aas
mov
sbb
mov
fiadd
xchg
popf
and
add
jo
int
add
(bad)
xchg
dec
je
jbe
xchg
xor
mov
in
not
mov
cmp
sbb
int
ret
adc
inc
or
xchg
in
xchg
dec
hlt
adc
dec
rol
push
mov
jle
sub
mov
and
rcl
inc
add
mov
jge
jmp
pushf
xchg
rol
xchg
nop
mov
mov
jne
add
xchg
fimul
mov
push
xchg
adc
das
cdq
cmps
mov
int
ror
push
dec
pop
jmp
ss
sub
xor
fst
movs
lds
gs
fisub
cs
clc
mov
inc
xchg
sub
jmp
or
or
shl
test
dec
aad
adc
shr
inc
mov
sub
add
and
mov
bound
mov
xchg
fsubr
repz
and
push
aas
sub
add
sar
popa
mov
sbb
dec
xchg
scas
or
mov
loopne
out
and
inc
jmp
das
push
rcl
xor
add
sbb
(bad)
cli
retf
loope
pop
and
mov
xor
mov
cmp
test
add
xchg
dec
pop
xor
in
dec
mov
scas
mov
push
rcr
ret
xor
xchg
sti
jp
pop
rcr
push
pop
xlat
ss
pop
sbb
mov
xchg
ror
dec
fwait
out
inc
jp
cmp
jmp
pusha
xchg
inc
dec
out
jno
fadd
retf
mov
jb
adc
sbb
sub
jns
and
push
push
add
fwait
data16
xchg
dec
call
fwait
push
sub
(bad)
setnp
xor
jmp
call
mov
dec
mov
dec
mov
mov
adc
add
nop
dec
cmps
xchg
movs
es
pop
aam
push
or
or
xchg
neg
xchg
int3
sbb
xlat
fld
ret
xchg
jbe
lods
ror
cmp
jmp
scas
jo
sbb
xor
mov
into
mov
arpl
jo
js
xchg
or
mov
ins
stos
(bad)
cmp
loope
pop
cmp
jg
and
sub
fsubr
push
je
mov
cwde
ficom
cmp
out
fwait
cdq
std
mov
mov
add
enter
sbb
cwde
and
pop
dec
pop
enter
clc
dec
xchg
es
sub
mov
into
stc
loopne
aaa
cmp
mov
(bad)
stos
retf
(bad)
div
sub
mov
movs
bound
(bad)
ds
push
cmps
mov
xchg
aaa
dec
mov
jl
int3
mov
add
(bad)
sub
cmp
adc
sbb
xchg
jecxz
and
ficomp
adc
loop
fcmove
or
xchg
xor
loope
inc
adc
xchg
cld
outs
out
setg
cmp
(bad)
in
xchg
push
cli
test
xchg
stc
xchg
xor
mov
rcr
pop
and
adc
mov
jbe
dec
xor
xchg
cwde
lods
xchg
push
mov
and
ja
sahf
iret
inc
movs
push
movs
out
mov
cmp
test
repz
call
mov
cmps
cmp
std
sbb
jbe
xchg
ret
das
stc
mov
jl
xchg
pop
lods
pop
test
not
xchg
xchg
jmp
mov
inc
hlt
jae
pop
jnp
ins
xchg
pop
sub
in
pop
or
mov
dec
popa
lahf
mov
das
adc
xor
fidivr
xchg
scas
add
sub
xor
add
imul
jp
cmps
fist
ins
fwait
pushf
jg
gs
cmc
mov
ja
xchg
mov
push
dec
loopne
mov
xor
clc
add
dec
fwait
loop
pop
outs
retf
jns
leave
cmps
movs
sub
dec
mul
push
xchg
int3
push
fdivrp
mov
aad
mov
hlt
retf
jnp
xchg
xchg
cdq
movs
sar
cmp
adc
out
in
lods
xor
xchg
xchg
pusha
div
stos
xchg
cli
jb
mov
mov
fwait
out
mov
test
fwait
ret
mov
fisttp
mov
stc
sbb
or
movs
xchg
jecxz
sub
les
sti
mov
cdq
rcr
into
jp
push
xchg
movs
shl
out
pusha
mov
call
lds
jecxz
mov
mov
mov
ins
jb
call
pop
(bad)
fs
xchg
xor
es
lods
stos
adc
outs
xchg
xchg
xlat
outs
ds
pop
mov
xchg
fucom
das
and
cli
lods
mov
and
cld
add
xchg
dec
(bad)
xchg
add
pop
mov
mov
outs
cmp
xchg
fwait
mov
sub
in
mov
sti
fst
lock
or
add
push
es
scas
xchg
mov
xchg
cmp
push
dec
xchg
sbb
(bad)
int3
xchg
dec
mov
cmps
int
sbb
loope
idiv
lock
mov
xchg
jb
outs
add
dec
stc
ds
call
gs
xchg
adc
hlt
and
jnp
mov
mov
adc
mov
pop
in
cwde
stos
add
fist
sub
add
sub
inc
pop
or
dec
sbb
pop
xor
daa
dec
sahf
jns
cmp
mov
xchg
cld
or
lods
mov
pushf
test
in
aam
scas
fwait
mov
push
jmp
mov
or
xor
adc
mov
or
in
xchg
and
std
xor
jbe
pop
xchg
neg
xchg
pop
pusha
inc
int3
xchg
enter
xchg
or
addr16
out
sbb
int3
mov
xchg
into
push
call
aam
xchg
push
pop
ss
lods
sar
xchg
outs
jns
lock
sbb
iret
add
nop
leave
mov
pop
inc
fwait
mov
pop
jp
adc
inc
xor
add
mov
loopne
outs
add
inc
rcr
mov
xchg
cmp
lds
dec
push
hlt
xchg
xor
jg
test
adc
sub
lock
xchg
sub
push
pusha
xor
push
mov
xchg
sahf
ins
(bad)
inc
jbe
and
gs
xchg
add
das
or
sub
adc
xchg
lods
ror
scas
xchg
push
out
push
xchg
jge
pop
jp
loope
pop
or
xchg
sub
ds
add
test
xchg
mov
iret
shl
mov
xchg
mov
mov
pop
xchg
cld
es
lds
and
loopne
jmp
mov
daa
fiadd
cmps
clc
xchg
pop
fild
movs
lds
dec
rol
dec
fst
mov
push
inc
add
sbb
in
jnp
ret
lods
and
out
scas
jecxz
pop
jbe
fwait
cmp
shl
adc
jge
xchg
sar
jmp
xchg
aaa
jb
ret
adc
xor
fwait
imul
stos
push
adc
(bad)
fist
scas
mov
sbb
outs
jae
cld
and
cs
loope
repnz
cmp
xchg
or
xchg
or
adc
xchg
(bad)
ror
xchg
pop
mov
xchg
cmc
and
aas
jo
and
add
xchg
inc
and
lods
xchg
fimul
das
inc
test
enter
xchg
and
xchg
cmp
bound
inc
in
push
push
mov
scas
xchg
or
fnsave
pop
xchg
xchg
sub
xchg
icebp
mov
ds
call
dec
jns
out
xchg
stos
jle
push
and
mov
mov
aaa
fst
mov
leave
jo
or
xchg
xor
xor
mov
je
push
pop
sbb
jns
mov
(bad)
mov
nop
push
ins
push
add
add
rcl
mov
mov
cmp
xchg
jmp
sub
mov
leave
xor
xchg
xchg
xchg
mov
ja
push
popf
xchg
lds
fs
or
inc
mov
add
jmp
lods
(bad)
js
xor
pop
pushf
xor
xchg
mov
shl
push
jp
cmp
aam
jnp
aam
dec
add
lea
imul
pop
jle
xchg
xchg
xchg
movs
mov
das
fild
sub
ins
inc
pop
jno
xchg
mov
cmp
xchg
xchg
(bad)
dec
xchg
mov
mov
je
mov
mov
mov
adc
inc
sbb
aad
(bad)
dec
in
dec
inc
loopne
dec
sar
inc
cmp
call
clc
adc
in
pop
push
cli
add
les
dec
pop
sub
mov
in
lock
movs
push
mov
ins
pop
fwait
xor
mov
add
movs
mov
push
inc
xor
sub
stos
xor
xchg
push
jl
mov
fadd
dec
adc
pop
push
jmp
mov
(bad)
dec
xchg
and
dec
cmp
xchg
mov
into
(bad)
fucomi
jl
xor
xchg
arpl
jmp
es
cmps
and
xchg
ret
clc
rcr
xchg
pop
jmp
xor
inc
sub
ret
call
repz
xchg
or
mov
outs
xchg
addr16
xor
call
jecxz
fadd
lock
fs
xchg
call
jb
stos
xchg
(bad)
jno
out
iret
aam
lods
xor
mov
mov
jno
call
outs
call
gs
out
push
rcl
jmp
dec
xchg
and
cmp
je
push
jg
xchg
arpl
int3
icebp
xchg
and
inc
mov
cmps
daa
ret
dec
dec
sar
pop
mov
rcl
xchg
mov
pop
rcr
movs
xchg
mov
xchg
push
test
loop
mov
add
cmp
add
cmp
mov
xchg
jmp
fcom
ins
fiadd
out
mov
fstp
es
retf
repz
sub
xchg
mov
popa
pop
mov
or
movs
mov
sub
in
fwait
xchg
ror
cmp
xchg
scas
sbb
retf
clc
and
xor
push
or
fdiv
xchg
scas
adc
xchg
and
sub
ja
rcl
stos
cld
jmp
xchg
inc
xchg
outs
jnp
xor
lods
mov
mov
xchg
aaa
fcomp
mov
popf
fwait
mov
add
push
pop
popa
sbb
loope
pop
pop
mov
mov
inc
pop
or
scas
pop
xchg
inc
mov
adc
xchg
cli
xor
mov
push
xchg
cmc
test
add
cmp
xchg
sub
(bad)
xchg
inc
inc
fs
retf
xchg
pop
push
out
jbe
int3
test
xchg
popf
test
repnz
cs
cmp
pushf
leave
dec
je
cmps
fwait
iret
imul
dec
fs
pop
lock
test
xchg
sbb
jbe
dec
ins
mov
add
xchg
fsubr
data16
xchg
pop
cmp
pop
and
imul
mov
sub
sub
rol
cmp
out
xchg
and
sbb
adc
xchg
stos
pop
or
cmp
sbb
fucomp
fs
push
xchg
xchg
call
mov
and
aam
int3
xchg
jae
mov
xchg
iret
xor
in
xchg
out
mov
pop
ins
push
xchg
nop
in
out
cmp
or
inc
ja
xchg
data16
pop
loope
nop
fcom
xor
out
in
or
popf
dec
adc
int
xchg
mov
ja
jne
mov
jns
or
push
xor
adc
push
mov
stos
push
mov
das
add
ds
pop
fwait
scas
outs
pop
jns
inc
stos
dec
cmp
mov
add
push
adc
loopne
retf
frstor
adc
jl
pop
mov
aaa
ss
jp
push
in
sbb
es
inc
inc
aas
and
pop
mov
pop
call
stos
jo
fwait
jno
dec
cmps
fcom
mov
cmps
mov
mov
sahf
cmp
adc
imul
add
leave
xchg
leave
repz
dec
fnsave
xchg
push
add
mov
xchg
hlt
mov
xor
fwait
push
mov
inc
ins
inc
out
sub
adc
or
inc
call
cli
or
loope
mov
or
gs
inc
cmp
xchg
cmp
xor
mov
repz
les
out
adc
xchg
aam
(bad)
in
xor
test
mov
xchg
xor
add
xchg
cmp
xchg
sbb
nop
sub
les
mov
ins
fidivr
jno
(bad)
lahf
xchg
dec
mov
cmps
fcomp
fadd
mov
ja
push
lods
ret
cmp
mov
inc
scas
push
xchg
mov
lods
out
dec
xchg
add
and
and
mov
aam
cmp
jb
fs
inc
add
icebp
xor
aas
stos
aam
retf
sub
mov
enter
cmp
out
icebp
xchg
xor
mov
xchg
jge
xchg
test
dec
xchg
xchg
into
jbe
rcl
or
repz
jl
sub
test
lock
or
mov
xchg
lea
sti
in
xchg
jnp
mov
cld
jge
mov
cmps
sub
add
dec
add
push
in
inc
adc
mov
and
jbe
xchg
cmps
jno
xchg
jmp
mov
mov
retf
push
push
pop
mov
add
ins
xchg
clc
ss
or
fwait
inc
xchg
jno
or
adc
jle
mov
sbb
xchg
and
out
je
cmc
test
stc
mov
or
xchg
inc
cmc
cmp
jnp
hlt
push
xchg
adc
pop
call
test
loopne
fwait
cdq
cli
jecxz
mov
mov
mov
pop
pop
ret
(bad)
mov
pop
out
adc
adc
out
xchg
call
sbb
(bad)
mov
hlt
cdq
mov
stc
xchg
cli
call
push
pop
xor
xchg
leave
jb
dec
mov
retf
xchg
xchg
es
addr16
mov
mov
push
xchg
mov
fstp
sbb
mov
add
or
mov
xchg
aam
lods
ror
imul
jl
add
fwait
mov
xchg
jmp
je
sbb
xchg
adc
push
xor
fdiv
pop
retf
mov
cmp
xchg
js
pop
shl
pop
iret
lock
mov
xchg
cwde
or
jg
jbe
test
in
cs
ins
inc
push
dec
sbb
sbb
add
cwde
jbe
mov
sahf
and
fst
call
fwait
addr16
or
hlt
fcomp
movs
xchg
icebp
sbb
dec
adc
test
lods
loopne
xchg
(bad)
mov
sbb
and
xchg
cmp
(bad)
aam
xchg
mov
jno
ret
arpl
(bad)
cmc
xchg
and
xor
dec
xchg
dec
scas
mov
es
aas
or
stos
cmps
cmp
mov
aam
sbb
js
pop
inc
push
fdiv
dec
les
jle
jb
dec
add
stos
mov
fdiv
push
arpl
mov
xor
cwde
jne
les
fild
and
outs
mov
je
jg
xchg
xchg
cdq
popa
xor
jns
(bad)
xchg
adc
push
std
out
xor
push
pop
test
lods
jae
dec
xchg
int3
mov
test
icebp
sub
xchg
xlat
and
pop
xchg
xchg
pop
jmp
mov
shl
xor
push
sahf
inc
xchg
(bad)
push
ins
cmp
xor
and
xchg
(bad)
mov
mov
pop
mov
inc
popf
jl
mov
xor
cmp
cmp
mov
addr16
adc
in
xchg
jbe
mov
arpl
je
sub
test
cmps
retf
add
cwde
fidivr
xor
call
(bad)
std
out
loopne
add
xchg
adc
or
dec
sti
test
adc
adc
stos
mov
mov
mov
and
js
xchg
push
push
shl
inc
xchg
dec
sbb
ret
xchg
mov
mov
inc
mov
leave
xchg
je
aaa
add
fs
jnp
das
push
in
stc
xchg
sbb
jmp
xchg
pop
push
call
xchg
pop
xchg
cmp
pop
jns
adc
jecxz
xchg
xchg
mov
sub
repz
mov
pusha
(bad)
rcl
sub
(bad)
fwait
jmp
enter
adc
adc
aaa
sbb
scas
adc
xchg
enter
pop
dec
add
mov
inc
adc
fisub
bound
xor
xchg
imul
and
ja
xchg
test
dec
pushf
stos
fbld
fwait
aas
dec
test
push
xor
outs
jle
xchg
pop
xchg
ret
dec
int
cwde
inc
mov
push
bound
sbb
xchg
sar
hlt
cmp
mov
mov
mov
or
push
ds
adc
out
mov
sub
xchg
or
sub
scas
mov
fs
std
or
xor
icebp
into
out
push
adc
repz
iret
dec
xchg
aaa
div
(bad)
imul
jl
add
mov
pop
dec
mov
stos
fwait
and
push
mov
xchg
sar
imul
xchg
in
dec
add
out
lds
xchg
js
int3
fsub
bound
xchg
mov
repz
xchg
adc
mov
js
das
dec
mul
je
xchg
mov
jno
mov
sub
clc
cwde
retf
inc
inc
xchg
adc
(bad)
stos
test
les
mov
add
dec
cmps
adc
iret
fst
cmp
js
movs
scas
push
jl
out
xchg
inc
adc
ins
mov
xor
stc
fwait
or
dec
mov
mov
ret
cli
pushf
push
clc
push
fist
xchg
push
cs
dec
sub
pusha
(bad)
into
scas
cwde
sbb
cmp
lock
ret
jne
inc
xor
imul
ins
cmp
xchg
sar
cmp
test
shr
pusha
not
jl
pop
cmp
shl
popa
xor
fwait
mov
fadd
xchg
push
ret
xchg
int3
mov
pop
or
test
pop
cdq
xchg
push
pop
pop
push
repz
push
mov
jl
jo
imul
xchg
xchg
xchg
xor
jp
hlt
enter
ja
mov
daa
xchg
sub
cmps
mov
cmp
jne
les
mov
mov
add
or
hlt
cdq
mov
outs
jns
fsub
jmp
and
sub
mov
sub
fdivr
hlt
fwait
clc
jmp
dec
mov
leave
cwde
(bad)
cld
xchg
ds
aam
xor
dec
fldcw
fmul
xchg
fsubr
or
pushf
cmps
xchg
push
aad
push
and
into
ficomp
or
les
jns
push
scas
mov
jmp
mov
sub
or
mov
scas
lea
dec
push
push
je
mov
loop
or
mov
movs
pop
in
xor
outs
or
add
mov
xor
imul
xchg
mov
bnd
cmovno
jge
in
dec
daa
cmp
jp
push
sbb
xor
ret
mov
(bad)
sti
lock
cmp
lahf
inc
inc
xchg
xor
cmp
fld
popf
or
int
dec
into
iret
pushf
pop
sete
push
mov
cmp
jmp
ror
mov
out
aam
in
lds
sub
test
mov
jge
es
nop
xchg
call
test
xchg
lods
arpl
loop
out
xchg
cs
fwait
cmp
xchg
rcl
enter
ss
ret
push
(bad)
in
sub
mov
xchg
cld
and
clc
xchg
xchg
outs
push
xchg
pop
jg
pusha
seta
pop
scas
add
mul
push
xchg
sbb
sbb
ret
clc
adc
add
mov
jns
push
retf
xchg
imul
cmp
or
aaa
and
push
sti
xchg
jge
inc
in
cs
mov
xchg
pop
push
imul
sub
aas
mov
jg
loop
push
fwait
xchg
inc
call
xchg
push
mov
jecxz
inc
not
xor
jne
cdq
stos
mov
xchg
mov
loop
aam
sub
out
test
or
mov
(bad)
sbb
fwait
daa
mov
adc
(bad)
rcr
add
jo
sub
or
(bad)
mov
or
mov
loop
sti
cwde
jmp
jbe
ja
push
push
test
mov
dec
fild
enter
hlt
xlat
sbb
and
pop
inc
dec
xchg
push
mov
mov
xchg
add
sbb
iret
push
lock
xchg
gs
in
aad
int3
adc
and
mov
jae
in
aad
fs
add
xchg
call
jns
sub
adc
xlat
jo
xchg
mov
sbb
div
xchg
lods
pop
push
je
xlat
xchg
xor
dec
scas
jns
mov
pop
movs
sbb
cmp
outs
jmp
xchg
jmp
adc
xchg
push
sti
push
mov
xchg
call
and
xchg
sub
adc
cmp
faddp
cli
into
push
mov
loopne
inc
mov
or
push
outs
sub
mov
cmps
fwait
push
add
div
xlat
leave
fdivr
push
scas
push
shr
aam
fidivr
push
mov
out
and
xchg
mov
in
loopne
ret
mov
nop
jp
jle
xchg
add
mov
sub
xchg
movs
adc
or
add
clc
mov
sbb
rcl
popw
xor
call
sbb
or
aad
mov
xchg
call
je
and
out
push
nop
dec
cmp
imul
sub
xor
adc
dec
mov
xchg
mov
out
xor
adc
pusha
xor
(bad)
pop
ret
pop
dec
sbb
cli
ja
jmp
jnp
cmc
ins
add
add
sub
jbe
test
repz
jb
xchg
lds
bound
mov
and
int3
adc
out
add
cli
jnp
shrd
mov
jl
push
add
or
adc
lahf
aaa
and
repnz
jmp
call
adc
int
pop
xchg
mov
popf
inc
inc
fld
aam
pop
repz
mov
push
ja
inc
int
sub
cmps
sbb
stos
es
xchg
cld
rcr
sub
sbb
pushf
sbb
outs
mov
xor
lahf
mov
xchg
cmps
sbb
xchg
stc
retf
push
cdq
xor
adc
loop
sbb
mov
je
out
or
hlt
mov
in
push
ret
jp
bound
lock
aam
jge
sub
cmp
cmp
xchg
or
mov
inc
jle
pop
xchg
dec
mov
fstp
lods
xchg
imul
dec
mov
ins
aaa
fwait
lds
add
mov
cmp
xchg
arpl
out
sbb
scas
dec
xchg
out
aam
aaa
cmps
mov
and
not
xchg
stos
test
cmp
add
ja
adc
adc
shl
mov
sub
mov
push
mov
and
ficom
cwde
mov
or
repnz
xchg
fnstenv
inc
add
dec
xchg
xor
loope
and
push
pop
and
in
pop
scas
jo
mov
adc
cmp
dec
xchg
xor
push
lahf
in
cdq
xchg
or
lods
sar
pop
ds
stos
jp
or
xchg
rol
dec
movs
fcom
test
xor
mov
xchg
jp
and
sbb
push
pusha
mov
hlt
dec
in
test
xchg
mov
xchg
clc
jmp
arpl
dec
or
jns
loop
cmp
xchg
dec
es
push
xchg
and
jmp
pop
sub
push
loop
sub
ja
je
fiadd
shl
mov
xchg
scas
cmp
pop
jge
mov
and
leave
test
mov
pop
pop
jnp
or
not
xor
sub
or
xlat
stc
cwde
mov
jg
in
cmp
sbb
outs
loopne
fs
dec
fadd
push
sar
ficom
xor
xchg
fistp
lea
mov
cmp
mov
dec
aaa
movs
jo
mov
xchg
dec
idiv
xchg
sub
repnz
(bad)
addr16
test
cmc
mov
xchg
sahf
shr
or
sbb
cwde
call
mov
aas
xchg
mov
not
popa
movs
adc
xchg
pcmpgtb
and
(bad)
mov
adc
jp
aad
dec
or
xchg
sbb
and
cli
mov
adc
xchg
lock
into
ins
jl
mov
xchg
fmul
xor
pop
dec
push
inc
or
loopne
in
push
adc
xchg
daa
xor
pop
sbb
das
add
aam
lock
rol
stos
or
push
mov
das
in
xchg
xchg
add
xchg
mov
mov
and
mov
mov
mov
hlt
stc
(bad)
jo
sete
aaa
sub
jl
xchg
into
test
mov
mov
lods
inc
and
inc
pop
rcl
lock
xchg
adc
fwait
push
and
icebp
movs
xchg
cmps
push
adc
jae
or
nop
xchg
xchg
add
cwde
(bad)
(bad)
xchg
sbb
cmp
mov
mov
cdq
or
xchg
push
repnz
jbe
mov
lods
dec
ds
shl
xchg
jle
xchg
stos
dec
mov
sub
aad
xchg
popa
lahf
outs
jb
sbb
inc
adc
pop
into
xor
cmp
sahf
dec
or
das
push
cmc
mov
push
push
data16
sbb
int3
je
xchg
daa
imul
in
sbb
mov
(bad)
fnsave
xchg
sbb
(bad)
inc
xchg
nop
test
pop
adc
sti
xchg
popf
jo
outs
add
dec
cmps
add
and
adc
xchg
cmp
daa
ins
sbb
xchg
rcr
inc
es
in
scas
int3
loopne
or
outs
lods
adc
add
mov
minps
mov
xchg
xlat
mov
ror
daa
mov
adc
adc
jb
call
loopne
je
lods
cmp
hlt
sub
xor
dec
xchg
arpl
test
lds
aas
iret
sub
xchg
cs
fsub
and
xchg
cmps
dec
icebp
jae
cmps
inc
bound
sti
arpl
and
fwait
jbe
cmp
sub
push
ficomp
sub
xchg
pop
stc
sbb
loopne
ret
xchg
leave
inc
cmp
scas
inc
jns
xchg
lahf
xor
jecxz
aaa
add
ret
(bad)
jnp
adc
and
xchg
xchg
mov
out
pushf
test
adc
into
jne
xchg
add
xor
adc
and
shl
sub
fwait
out
xchg
shl
and
sub
adc
mov
cmc
das
mov
xchg
xchg
inc
pop
mov
xchg
cmp
fstp
inc
lds
inc
xchg
or
stos
mov
xchg
jnp
(bad)
cmp
pop
std
xchg
shr
not
mov
(bad)
rol
(bad)
movs
les
push
lahf
jb
int3
add
fst
(bad)
jecxz
xchg
(bad)
jge
retf
jno
xchg
sub
push
jmp
cmp
lahf
xchg
sub
or
cld
shl
or
mov
pop
inc
jne
push
mov
dec
push
xchg
(bad)
div
cdq
push
out
in
xchg
sbb
loop
movs
fs
dec
sbb
add
mov
pop
les
rcl
jl
call
test
and
mov
jbe
cmp
leave
ins
pop
xchg
(bad)
pop
test
xchg
jo
add
xchg
mov
fcmovne
dec
xchg
mov
ins
adc
push
mov
into
ret
popa
mov
jno
sbb
rcl
hlt
mov
je
pop
mov
jne
adc
jle
into
adc
xchg
in
inc
(bad)
popf
repnz
sti
xchg
xchg
ins
xor
js
or
in
inc
xchg
pop
ret
nop
movs
test
xchg
mov
mov
dec
jmp
dec
xchg
les
daa
mov
and
xor
dec
mov
push
mov
and
cmp
xor
or
inc
mov
xchg
mov
add
xchg
loopne
cli
xchg
pop
cmp
pop
sti
push
adc
jb
jge
shl
in
jecxz
mov
inc
cs
inc
xchg
push
mov
mov
pop
jge
push
xchg
jl
mov
fst
pop
jnp
xchg
repnz
pop
jbe
mov
lds
neg
sahf
push
ins
mov
pop
outs
mov
push
mov
and
aad
stc
xchg
outs
xor
add
adc
cmp
test
out
or
cld
(bad)
test
stos
inc
inc
push
xchg
xchg
dec
ds
aad
rol
inc
shl
xchg
mov
fist
cdq
xchg
mov
xchg
mov
xchg
fmul
repnz
dec
jge
xchg
out
adc
js
outs
xchg
xchg
mov
enter
mov
aaa
pop
aas
and
xchg
popa
inc
fisttp
xchg
push
sbb
arpl
mov
xchg
jno
(bad)
cmc
push
jns
or
js
mov
dec
aam
mov
mov
xchg
popf
xchg
retf
je
inc
dec
call
or
out
ret
jmp
sbb
cmp
pusha
xchg
stc
mov
or
jae
push
pop
lods
xor
push
je
pushf
push
dec
fcmove
ins
jl
stos
adc
xchg
sbb
test
in
ja
add
dec
sbb
sub
in
imul
jecxz
xchg
arpl
jns
mov
jle
ret
mov
cmp
push
xchg
mov
dec
test
sbb
fadd
ins
adc
stos
jle
mov
loop
inc
fwait
aad
ret
jecxz
push
aas
imul
mov
rcr
jo
mov
mov
movs
sub
xor
inc
je
sbb
mov
das
lock
mov
pushf
in
sub
push
xchg
xor
bound
fnstenv
js
mov
mov
loop
push
in
add
xchg
jne
popa
das
sub
pop
test
mov
iret
cmp
call
ds
dec
jne
mov
mov
popa
out
pusha
xor
xchg
test
iret
mov
xchg
xchg
xor
ret
pop
lods
pushf
icebp
mov
(bad)
mov
ins
cmp
inc
xor
dec
mov
ja
lahf
movs
out
jge
and
and
add
fwait
mov
xlat
mov
out
test
push
or
ins
xchg
pop
sbb
mov
(bad)
pop
ins
and
xchg
repz
adc
or
out
arpl
push
fist
jl
push
ja
mov
pop
lods
ds
movs
fwait
rol
hlt
lea
pop
imul
sbb
daa
rcl
scas
sub
inc
je
xor
arpl
jne
pop
in
scas
xchg
sub
(bad)
sub
fwait
pop
mov
mov
mov
outs
ins
push
sbb
xchg
mov
and
xchg
je
mov
(bad)
xchg
jmp
xchg
xchg
cmps
test
xchg
in
sbb
lea
ins
fst
xor
sub
in
xchg
jmp
sub
cmc
xchg
jbe
sbb
push
call
push
cld
cmp
adc
xchg
hlt
or
or
mov
jge
push
mov
or
and
les
shl
sbb
and
inc
xchg
adc
bswap
xchg
sbb
xor
push
push
retf
icebp
sub
inc
fld
hlt
dec
xchg
jecxz
sar
jb
xchg
mov
ins
xchg
test
(bad)
xchg
jmp
jl
dec
xchg
cld
mov
aas
rcl
test
xchg
retf
mov
inc
pop
ins
or
les
xchg
mov
adc
mov
mov
push
cmps
jmp
xchg
imul
cdq
pop
pop
repz
mov
jg
jmp
shl
fwait
xor
dec
sub
fwait
mov
push
clc
call
xchg
in
mov
fsubr
sbb
leave
xchg
inc
xchg
jbe
push
stc
mov
sti
xchg
jmp
test
leave
push
mov
pop
dec
scas
inc
xchg
lods
jp
push
sbb
jae
stos
or
mov
out
xchg
fidivr
arpl
nop
xchg
adc
mov
mov
adc
mov
sub
in
inc
xor
inc
fcom
pop
cli
pop
jecxz
dec
mov
pop
scas
push
das
nop
dec
cmps
hlt
ds
xchg
mov
clc
ins
inc
lock
add
sub
sub
in
mov
popf
dec
fwait
add
fiadd
dec
cmp
call
inc
test
jp
mov
bound
sub
clc
xchg
mov
dec
jl
rol
cmc
and
aam
int
and
ficom
ret
xchg
xchg
(bad)
jecxz
or
ins
rcl
das
jmp
hlt
pop
jl
sti
fistp
cwde
enter
push
push
ret
ins
stc
call
jns
fsubp
jge
call
iret
adc
push
xchg
fstp
xor
repz
inc
in
test
into
xor
in
int3
es
mov
add
icebp
mov
sbb
shl
cdq
jecxz
call
cmps
loopne
xchg
xchg
mov
loop
movs
cdq
leave
out
fimul
out
les
pop
add
push
push
out
xchg
push
pop
add
aas
mov
mov
mov
lock
sub
xor
pusha
jle
in
push
leave
mov
int3
(bad)
(bad)
fs
fs
xor
dec
sub
cwde
xchg
test
pop
mov
adc
cmc
xchg
pop
mov
mov
jge
add
es
xor
dec
call
xchg
mov
inc
lds
mov
pop
jns
xchg
out
dec
(bad)
fmul
jb
adc
ficom
pop
jmp
push
pop
xchg
les
inc
xchg
sbb
xor
or
div
xchg
add
rol
sub
inc
mov
mov
xor
arpl
add
cmps
call
pop
jb
es
add
mov
push
xchg
shl
fdivr
sub
mov
int3
jl
dec
push
xchg
cmp
xchg
or
mov
pop
dec
and
and
xchg
or
cmc
rcr
adc
mov
imul
test
(bad)
jp
xchg
(bad)
push
leave
mov
add
sar
loope
cmp
into
sub
out
push
nop
add
dec
inc
xor
xchg
or
pop
fist
arpl
mov
out
or
jp
fdivr
xchg
push
(bad)
loope
sti
lock
outs
xchg
or
dec
push
loopne
stc
rcl
jl
sbb
pusha
cmp
xchg
shl
ins
inc
mov
fstp
imul
fldcw
ror
out
push
movs
adc
aaa
js
xchg
into
mov
inc
out
fwait
inc
xchg
xchg
jno
or
ss
(bad)
cld
cmp
mov
aad
dec
sbb
cmp
(bad)
jmp
ja
xchg
idiv
push
outs
push
pop
daa
loopne
cs
mov
pop
or
dec
mov
dec
daa
mov
das
xchg
frstor
scas
shr
sahf
loopne
ins
dec
xchg
cmp
pop
xor
repz
aas
cmp
adc
xor
out
nop
cmp
pop
xchg
jp
aam
outs
ins
inc
sbb
xor
xchg
mov
nop
dec
xchg
iret
push
imul
jecxz
xchg
adc
imul
iret
pop
in
(bad)
or
dec
push
jnp
repz
or
retf
outs
call
xchg
inc
sub
shl
mov
mov
xor
xchg
dec
adc
ds
mov
sub
imul
mov
mov
mov
adc
sub
or
outs
xchg
and
loopne
xchg
hlt
mov
xor
inc
js
or
xchg
das
test
(bad)
push
cs
scas
pop
xchg
ret
mov
sub
xchg
or
retf
push
dec
and
and
in
rcl
xchg
jne
cmp
cmp
xchg
add
sbb
(bad)
in
xchg
inc
pop
dec
fs
mov
rcr
test
add
fmul
(bad)
mov
ffreep
pop
sub
xchg
daa
dec
inc
xlat
(bad)
repz
jo
sbb
xchg
jmp
int
mov
dec
repz
call
jge
pop
pop
les
gs
push
xor
aad
mov
mov
fldenv
xchg
std
cli
jae
test
mov
xchg
add
out
xchg
in
xchg
sbb
cwde
or
ror
jnp
icebp
fnstsw
xchg
sub
xlat
or
(bad)
mov
pop
mov
xchg
div
jo
or
xchg
das
scas
sar
inc
fwait
mov
sbb
inc
out
cmp
mov
pop
mov
mov
push
sub
xchg
mov
jmp
xchg
(bad)
sahf
jb
mul
ins
xchg
mov
mov
out
(bad)
pop
inc
mov
dec
xchg
add
adc
mov
pop
jbe
leave
fmul
jmp
pop
push
fld
xchg
stos
dec
or
mov
mov
and
xlat
jmp
std
xchg
cdq
lds
xchg
inc
out
or
popa
lahf
mov
call
xchg
sar
retf
cmp
les
repnz
xlat
ret
sti
ins
(bad)
lahf
sbb
jl
cmp
xor
cli
inc
jl
stos
dec
xchg
jge
test
sbb
test
sbb
ror
xchg
add
inc
mov
rcr
push
xchg
mov
out
daa
xchg
idiv
(bad)
xchg
pop
test
test
out
sbb
fcom
xchg
and
and
test
hlt
sub
enter
jno
mov
movs
sub
mov
movs
std
jecxz
call
adc
bound
cdq
pop
popa
fst
scas
(bad)
pop
int
stos
xchg
adc
in
and
or
imul
ja
inc
add
mov
fwait
loop
outs
inc
mov
ss
das
mov
push
iret
xchg
push
data16
and
(bad)
xchg
mov
xor
xlat
(bad)
pusha
ins
xchg
int3
pop
lea
dec
movs
(bad)
cmc
mov
pop
cld
sub
stos
jne
mov
mov
sbb
std
cdq
aad
sub
adc
push
adc
pushf
add
xor
(bad)
ss
jge
sbb
movs
xchg
sbb
fnstsw
push
add
hlt
fwait
adc
cmps
imul
adc
jp
xchg
repz
push
or
fwait
out
xchg
ficomp
aad
movs
pop
adc
ins
cwde
adc
push
and
cmp
jg
gs
pop
mov
loopne
js
xlat
ret
mov
jns
fwait
lock
fwait
out
inc
pop
jne
fcomp
cdq
xchg
add
jb
fld
out
and
push
(bad)
idiv
sahf
xchg
and
mov
xor
retf
jecxz
sub
and
mov
and
push
and
jecxz
stos
cmps
call
mov
mov
jp
xchg
inc
sbb
jmp
sub
inc
or
mov
sti
neg
adc
xchg
xor
sbb
jp
xchg
add
imul
or
lea
inc
or
or
xchg
(bad)
(bad)
mov
cmp
inc
cmp
stos
iret
xchg
mov
mov
jmp
scas
xchg
inc
add
not
pusha
jmp
xchg
mov
xchg
adc
int
add
stos
dec
pusha
adc
jp
xchg
mov
int
xchg
jns
sub
repnz
push
(bad)
fwait
(bad)
mov
ret
inc
cmps
inc
pop
call
jno
adc
dec
rcr
jns
xchg
stos
mov
mov
xchg
xchg
(bad)
push
cmc
dec
sbb
push
adc
xchg
movs
fmul
mov
xchg
sbb
xor
fwait
mov
int3
inc
lock
fs
dec
mov
cdq
nop
push
icebp
fsubr
jp
addr16
lock
in
sbb
cmp
mov
cmps
mov
lods
in
jmp
movs
jo
xchg
xchg
or
in
test
sbb
xchg
rep
mov
lea
clc
movs
pop
jb
mov
hlt
inc
or
xchg
dec
mov
mov
leave
push
imul
push
fwait
jo
mov
xor
dec
sbb
jl
out
shl
xor
jmp
xchg
cmp
mov
leave
push
and
xchg
xlat
xor
sbb
je
fisubr
(bad)
frstor
mov
cmp
pop
xchg
movs
mov
jle
into
or
into
les
jns
xchg
cs
ins
inc
test
pop
push
sbb
stos
sub
xchg
scas
cmp
jmp
xchg
mov
iret
shl
xchg
movs
cmp
adc
cmp
call
ror
jne
dec
adc
adc
mov
ficomp
or
or
inc
cmp
test
mov
inc
mov
mov
cmp
aaa
xchg
adc
push
add
pop
outs
pop
jne
iret
xchg
mov
jp
ret
sub
fisub
repz
cmp
int
mov
(bad)
xor
or
inc
push
xchg
movs
jp
inc
push
push
inc
jmp
dec
dec
pop
jno
xchg
fdivr
mov
xchg
js
aaa
jle
ss
call
hlt
adc
test
ds
sub
jmp
sbb
jp
add
mov
xchg
inc
into
xchg
inc
cdq
sbb
dec
cmp
aas
arpl
fisubr
adc
das
dec
cmp
sub
and
dec
xchg
mov
xchg
loope
mov
jge
push
jae
in
pop
(bad)
int
mov
loope
xor
outs
sbb
xchg
test
mov
push
mov
mov
adc
jge
cmps
daa
inc
push
popf
mov
inc
(bad)
sub
xchg
pop
dec
push
outs
pop
fcmovu
xchg
sub
or
sbb
jmp
mov
int3
inc
(bad)
adc
and
or
jae
xchg
loop
pop
and
add
xchg
ins
std
dec
push
ficomp
adc
sbb
pop
push
push
out
dec
xchg
inc
adc
jl
jns
mov
mov
aad
ret
loope
cmps
sahf
mov
or
movs
pop
dec
dec
mov
adc
out
in
xchg
jbe
clc
fs
out
jl
pop
ins
xchg
ror
or
mov
sub
je
xchg
add
sub
not
pusha
lods
jbe
and
sahf
mov
push
xchg
xchg
inc
jecxz
cld
sub
sbb
xchg
jmp
out
sub
rcl
mov
cdq
ja
push
imul
call
lock
sbb
inc
xchg
or
or
xor
loope
jns
and
rol
sbb
dec
lods
xchg
mov
pop
jl
xchg
cdq
xchg
test
in
inc
push
xchg
shl
cmp
pop
aad
cmp
scas
mov
push
sbb
in
dec
xchg
shl
xor
pop
push
imul
data16
xor
cmc
jge
mov
leave
imul
add
xchg
pop
jo
out
and
jle
xchg
loop
les
xchg
cmps
jmp
cmps
cmp
mov
xor
out
mov
dec
xchg
adc
sbb
sub
sahf
ror
dec
xor
mov
fcom
push
es
fwait
bound
mov
imul
call
xchg
xchg
adc
sub
xchg
rcl
mov
test
(bad)
fnstsw
xchg
sub
or
xchg
adc
mov
cmp
pop
sbb
push
cmp
iret
(bad)
jmp
hlt
inc
sub
xor
or
fmul
and
pop
xor
mov
test
bswap
jge
add
retf
push
jecxz
imul
dec
xchg
jnp
push
jmp
xchg
jp
ret
cdq
adc
call
sar
push
scas
xchg
cs
xchg
jp
mov
xchg
shl
xchg
adc
outs
not
fnsave
repz
leave
pop
push
clc
xchg
add
mov
or
xor
adc
stos
addr16
adc
es
sub
cmp
iret
jb
or
sbb
push
stos
push
repz
je
mov
sbb
retf
sar
test
push
(bad)
cwde
into
dec
lea
cmp
cmp
xchg
inc
sbb
pop
ss
cmps
ds
popf
pop
push
cmp
lds
daa
sub
or
inc
or
xchg
adc
pop
repz
jne
jo
retf
inc
sub
adc
and
xchg
sbb
sub
xchg
jbe
cmp
les
xchg
scas
clc
dec
pop
push
es
jle
call
ret
push
sbb
sub
dec
(bad)
sub
xchg
sbb
adc
push
and
push
xchg
sahf
enter
ret
push
xchg
inc
(bad)
movs
call
outs
(bad)
and
xor
out
push
pushf
fwait
int3
adc
mov
mov
fcmovu
and
dec
xchg
mov
pop
push
ror
sbb
xchg
shl
pop
stos
xchg
cwde
sub
push
pop
push
out
std
mov
movs
fwait
jl
imul
icebp
mov
add
pop
(bad)
aam
fisttp
sub
xor
in
push
mov
addr16
xchg
rol
xchg
add
daa
push
fidivr
test
nop
test
cmps
test
dec
push
test
xlat
dec
(bad)
push
das
xchg
ror
jmp
ret
sbb
adc
xchg
pop
xchg
and
jp
bound
xor
jo
shl
xchg
sbb
mov
sbb
dec
(bad)
xchg
xchg
mov
jecxz
loop
push
or
mov
sub
mov
push
xchg
aad
cmp
jo
sub
xchg
fucomp
sti
bound
dec
and
pop
ja
ror
cmps
(bad)
xchg
es
test
test
pop
movs
sbb
dec
and
je
xchg
pop
jecxz
inc
loope
mov
or
sbb
in
pop
neg
cld
popf
jp
or
mov
mov
cli
and
xchg
iret
lahf
push
xor
cmp
popf
mul
leave
arpl
movs
call
xchg
ds
sahf
test
icebp
mov
enter
out
cmp
ret
movs
xchg
int
ror
dec
xchg
js
rol
sbb
retf
jno
jbe
pop
hlt
lods
mov
xor
pop
xchg
popa
pop
ins
fild
sar
adc
mov
addr16
xchg
mov
or
das
sbb
cld
xor
push
xor
pop
jl
imul
nop
mov
add
inc
push
xchg
push
push
add
xchg
cmp
call
xchg
dec
adc
or
stos
mov
ins
aad
or
cmp
mov
cmp
inc
xor
mov
xchg
inc
aaa
jnp
xchg
jmp
hlt
or
sbb
mov
xchg
rcl
in
push
push
adc
mov
adc
fwait
outs
scas
add
or
leave
push
xchg
mov
lods
test
shl
arpl
nop
push
outs
dec
add
adc
(bad)
jmp
ins
sbb
lds
mov
push
(bad)
movs
add
imul
xchg
push
daa
sar
stos
mov
inc
cdq
adc
mov
xor
ret
xchg
(bad)
adc
int
mov
adc
daa
fcomp
retf
xchg
sahf
int3
inc
mov
jge
hlt
jmp
xor
inc
repz
xchg
arpl
dec
sbb
or
adc
pop
jmp
in
test
sub
pop
mov
idiv
and
loope
lods
out
push
in
xor
xchg
jl
pop
xchg
cmp
or
outs
mov
call
cmp
xchg
xor
xor
cld
jle
iret
in
neg
jg
cmc
lahf
mov
loop
test
ins
cmp
mov
pop
push
pop
fwait
xchg
pop
jnp
sub
pop
adc
call
popf
cdq
sbb
(bad)
je
xchg
test
scas
mov
rcr
neg
adc
pop
pop
hlt
adc
dec
out
je
xchg
inc
outs
xlat
es
mov
mov
rcl
mov
pop
xchg
stos
xchg
lods
dec
out
cli
sub
cmp
mov
add
xchg
(bad)
cld
outs
cmp
jne
ins
add
pushf
in
js
mov
repnz
dec
xchg
cmps
sbb
sbb
push
mov
adc
movs
loope
xchg
add
cmp
aaa
inc
adc
cld
stos
cs
mov
icebp
jmp
mov
mov
in
mov
aad
hlt
adc
xchg
mov
pop
cld
push
cdq
inc
neg
mov
push
jmp
push
outs
xchg
add
or
xchg
(bad)
in
dec
cmp
iret
adc
sbb
add
xor
mov
pop
xchg
push
mov
das
jle
xchg
stos
push
pop
push
mov
inc
bound
test
mov
mov
cli
sahf
xchg
cmp
or
cmp
adc
sub
cwde
push
rol
jmp
iret
int3
add
adc
xchg
xchg
fistp
sbb
or
es
or
push
add
jmp
mov
idiv
in
dec
pop
or
mov
add
stos
xchg
xchg
icebp
pusha
mov
aam
pcmpeqd
sbb
mov
data16
mov
dec
js
push
out
add
mov
adc
or
xor
sub
mov
push
retf
cmp
add
xchg
mov
push
sbb
sub
xchg
outs
mov
add
iret
mov
push
sub
adc
xchg
cmp
das
sbb
shr
mov
rcl
sbb
pop
mov
jl
pop
xchg
jns
push
sub
xor
mov
je
sti
xor
popf
jmp
mov
sbb
loope
ficomp
out
push
mov
mov
adc
jle
mov
aas
jecxz
xchg
and
inc
cmc
xchg
shl
xor
xor
clc
scas
dec
mov
lds
repnz
jns
xor
add
(bad)
shl
adc
test
jns
xchg
xor
jbe
dec
pusha
xchg
mov
jp
xor
adc
loop
bnd
xchg
xor
and
inc
and
mov
xchg
dec
mov
sub
cdq
fdiv
jle
and
sbb
aad
inc
in
mov
push
mov
shl
push
adc
cmp
add
icebp
xchg
xchg
sbb
push
xchg
pop
(bad)
pop
popf
dec
mov
aas
pop
mov
mov
mov
cmps
lahf
mov
scas
fcmovnbe
icebp
xchg
pop
or
mov
or
xchg
jge
push
add
xchg
push
xchg
fsub
and
shl
xchg
test
push
push
stos
ds
loopne
sbb
jp
xchg
ret
lds
(bad)
ins
iret
mov
hlt
sti
ja
xor
mov
mov
cmc
mov
sub
add
mov
ror
xlat
sbb
aam
rcl
pop
or
xchg
mov
lahf
jmp
mov
mov
lock
ror
das
inc
mov
jp
adc
data16
mov
mov
(bad)
loope
xchg
fwait
pop
jmp
nop
xchg
push
scas
mov
test
cmp
stos
(bad)
mov
xchg
les
addr16
ret
xchg
mov
pop
mov
inc
xchg
test
push
stos
sbb
in
jno
cmc
dec
nop
ret
cmp
jecxz
mov
mov
fist
in
das
push
mov
cmp
ret
(bad)
popf
cmp
iret
mov
scas
mov
enter
mov
rcl
or
jecxz
mov
xchg
test
in
xchg
push
(bad)
jge
inc
aam
add
je
and
push
xor
std
xchg
xchg
and
sbb
jl
add
xchg
mov
les
or
jo
inc
mov
dec
lea
add
add
push
cmp
push
adc
test
rcl
cwde
mov
xchg
dec
mov
mov
sar
ja
mov
xor
js
pop
xchg
push
out
mov
imul
xchg
mov
dec
ror
mov
fwait
add
fidivr
jnp
jmp
out
dec
(bad)
mov
xchg
pop
test
adc
mov
dec
xchg
ret
add
push
xor
es
mov
add
push
mov
std
mov
push
push
fcom
into
mov
icebp
xchg
mov
loopne
jns
lock
xor
jo
mov
xchg
lea
xor
xor
in
addr16
pop
sar
test
or
popf
and
int3
xchg
jb
call
js
fld
aam
xlat
push
inc
and
into
call
mov
adc
imul
xlat
mov
int
hlt
cwde
jnp
stos
xchg
add
fistp
xchg
xchg
jp
inc
xchg
icebp
add
xchg
mov
cdq
cmps
pusha
xchg
jle
adc
shr
cld
call
ins
jge
xchg
mov
pushf
mov
add
test
cs
(bad)
push
js
into
fwait
mov
xchg
shl
sbb
rcl
push
lods
ins
outs
inc
mov
or
mov
jb
pop
imul
mov
out
jl
inc
mov
ficom
pop
in
mov
and
stos
xchg
in
inc
xor
jo
xchg
iret
push
fcom
add
cmp
xchg
push
pop
lods
sbb
and
hlt
call
ret
loopne
jecxz
stos
sar
pop
mul
xor
repnz
or
push
repz
pmaddwd
push
hlt
lahf
retf
out
mov
dec
fcom
enter
xchg
stc
mov
pop
push
jne
add
std
xchg
xchg
mov
lds
dec
xchg
inc
jbe
add
into
aas
jnp
lods
or
test
call
xchg
scas
inc
sbb
int3
ficomp
dec
imul
cld
xchg
push
pop
idiv
cwde
jmp
adc
sbb
push
in
push
mov
mov
or
mov
mul
dec
ins
scas
je
cmp
gs
mov
fcom
xchg
cli
aam
lahf
inc
fild
imul
mov
push
pop
in
pop
je
xchg
pop
(bad)
or
jno
les
xchg
lods
fidiv
mov
outs
retf
jnp
dec
jns
xor
mov
daa
mov
cmp
add
pop
inc
hlt
inc
xchg
shl
retf
fild
xchg
xlat
fs
cmp
cmp
push
mov
xchg
aad
test
mov
inc
mov
xor
add
hlt
and
cmc
pop
xchg
inc
call
xchg
aam
mov
and
mov
mov
xchg
pop
add
xchg
repz
pop
dec
arpl
xor
psubw
pop
mov
lea
retf
nop
xchg
dec
sar
nop
add
xchg
leave
lods
aaa
pop
or
xchg
cdq
imul
movs
aad
inc
push
jl
gs
loop
out
test
imul
call
xor
je
mov
push
mov
fucomp
hlt
imul
shl
outs
xor
retf
stos
scas
icebp
xchg
(bad)
xchg
mov
adc
xchg
push
adc
mov
xor
(bad)
enter
xchg
ror
push
cdq
je
and
bound
lea
sbb
mov
mov
(bad)
xchg
inc
popa
add
ret
lahf
add
test
sbb
jo
cmp
mov
pop
shl
sbb
test
pop
inc
scas
dec
inc
xchg
inc
push
mov
or
mov
je
stos
jmp
xchg
sub
ret
out
repnz
push
dec
xchg
adc
dec
rcl
xchg
test
test
cmp
aam
add
test
(bad)
cmc
push
and
mov
(bad)
sti
xchg
sub
fmul
es
push
and
xor
mov
mov
dec
sub
in
push
add
daa
clc
xchg
ss
sbb
jp
xchg
aaa
or
cwde
sub
ds
cwde
push
dec
mov
mov
inc
jo
test
add
rcl
cmp
mov
iret
stc
push
inc
inc
mov
(bad)
mov
lods
cli
jle
add
jecxz
mov
das
outs
sub
xchg
fmul
sub
or
leave
xchg
les
repnz
ins
pop
repz
mov
je
cs
and
xchg
dec
adc
xor
sbb
xor
fist
mov
dec
cmp
ret
xchg
xchg
push
mov
pop
imul
aas
fdivr
sahf
pop
push
(bad)
cmp
mov
fiadd
xchg
neg
cmp
sub
dec
sbb
push
and
xchg
xchg
(bad)
push
dec
sbb
jp
(bad)
popf
jmp
ror
xchg
(bad)
mov
adc
jae
bound
movs
call
leave
aad
repnz
cmp
push
in
mov
aam
adc
pop
into
xchg
sub
cmp
xchg
pop
mov
add
fwait
nop
sbb
xor
push
mov
rol
shl
cmp
ins
je
xchg
mov
xchg
sub
pusha
cwde
xchg
jecxz
ins
jno
cdq
adc
int
in
sub
in
push
cmps
loopne
mov
cwde
pop
adc
xor
dec
in
pushf
movs
jns
les
cmp
xchg
test
(bad)
int
mov
xchg
fcmovnbe
sbb
movs
repz
xchg
and
bound
out
and
mov
retf
fs
lea
jns
cwde
inc
mov
loope
adc
arpl
and
and
test
test
fwait
xchg
xchg
add
ficomp
adc
and
add
mov
dec
xchg
cmps
(bad)
xchg
stos
scas
movs
fnop
adc
mov
or
stos
add
cmps
scas
(bad)
frstor
outs
sbb
cmc
or
cmp
xchg
ins
leave
ror
dec
push
ret
push
loop
adc
data16
mov
xchg
es
and
xchg
mov
jge
sbb
mov
loopne
adc
xor
mov
sti
mov
test
dec
cdq
call
sbb
les
mov
inc
aas
mov
xchg
pushf
stos
pusha
popa
add
mov
xchg
cmps
fwait
push
movs
jl
mov
xor
mov
addr16
sbb
xor
dec
psadbw
push
lock
jnp
jbe
or
fwait
adc
adc
add
push
add
shl
push
gs
int
add
jo
loopne
add
mov
mov
inc
cwde
fdiv
adc
xchg
push
mov
(bad)
fcmovne
dec
push
mov
test
push
xchg
push
or
imul
dec
mov
jmp
fwait
pop
mov
add
sub
jp
and
xchg
or
ins
retf
add
xchg
inc
dec
cmp
adc
cmp
xor
and
test
xor
adc
mov
mov
push
repz
ins
iret
ins
dec
movs
xchg
stos
mov
xor
pop
int
push
sbb
retf
loop
aas
test
mov
call
(bad)
popf
cmp
call
ins
jb
jle
dec
xchg
es
mov
aam
xchg
aad
dec
push
xchg
pop
or
ds
ins
sti
add
xchg
rcl
out
clc
(bad)
xchg
xor
test
xchg
mov
mov
mov
xchg
lock
clc
adc
imul
sub
xchg
mul
xchg
xchg
xchg
jecxz
xchg
mov
push
(bad)
cmc
dec
pop
(bad)
xchg
xor
inc
xchg
dec
test
push
xchg
push
sbb
xor
xchg
mov
imul
mov
pop
outs
xchg
or
hlt
and
dec
aam
or
mov
xchg
ss
pop
icebp
sbb
xchg
or
inc
xchg
mov
sar
cdq
xchg
fisub
aaa
enter
mov
loop
sbb
jecxz
stos
ss
mov
bound
mov
imul
xchg
(bad)
and
(bad)
mov
lock
cmps
sub
and
fwait
(bad)
sbb
xchg
pop
fisttp
pusha
xchg
das
cmp
icebp
call
ficomp
push
cmp
inc
xchg
mov
or
popf
jne
xchg
xchg
fwait
inc
movs
int
retf
add
sub
add
mov
out
xlat
inc
daa
xchg
jp
mov
push
mov
adc
enter
stos
adc
sar
mov
mov
out
push
xor
jne
in
xchg
cli
or
push
xchg
adc
addr16
data16
add
out
int3
xor
in
sub
imul
mov
mov
ja
xchg
fdiv
pop
sbb
jmp
xor
pop
xchg
inc
xchg
mul
sbb
xchg
sti
mov
mov
movs
retf
dec
mov
xchg
mov
pop
mov
mov
arpl
xor
leave
adc
adc
mov
add
jbe
repnz
cmp
pop
daa
mov
adc
inc
mov
xchg
pop
or
xchg
imul
sub
(bad)
pop
mov
xchg
test
sub
(bad)
cwde
mov
lahf
xchg
mov
pop
xchg
or
mov
mov
out
xchg
sbb
ss
sti
xchg
(bad)
iret
test
lahf
jae
pop
xchg
xlat
xchg
loop
mov
dec
cmps
cld
xchg
cmp
xor
jle
xchg
inc
push
ds
sub
inc
inc
cwde
adc
loope
adc
sub
push
sbb
mov
in
stc
add
iret
add
adc
pushf
outs
repnz
mov
mov
push
popf
or
push
cmp
add
push
cmps
jge
xor
xchg
mov
mov
rol
js
outs
hlt
rcl
mov
and
push
fiadd
jne
cmp
sbb
ret
call
test
adc
cli
sub
popa
inc
gs
inc
cmp
xor
fwait
xor
test
retf
mov
(bad)
push
push
xchg
aam
mov
ret
aaa
cmp
xchg
mov
adc
push
mov
mov
es
xchg
push
mov
repnz
loope
jg
out
mov
mov
mov
mov
push
inc
outs
xor
cmps
xchg
xchg
mov
pop
push
mov
jno
mov
or
retf
sub
dec
push
js
les
in
call
and
xlat
addr16
dec
xchg
and
ret
mov
push
pop
sbb
nop
sbb
inc
mov
cmp
cwde
mov
std
sar
cdq
daa
lods
jmp
cli
adc
test
leave
xchg
sub
mov
call
jae
mov
std
mov
(bad)
cmp
ds
dec
xchg
fdivr
mov
xchg
push
lods
ret
adc
xor
das
test
pop
xchg
jb
enter
xor
rol
xor
retf
xchg
mov
scas
out
popa
add
adc
adc
xchg
inc
pop
sahf
out
ret
inc
xchg
mov
mov
xchg
jae
ins
dec
outs
dec
jmp
mov
mov
pop
test
xadd
rcl
rcr
or
mov
in
sti
movs
icebp
mov
sbb
fldenv
fdivp
adc
mov
lods
sub
mov
cmp
cdq
repnz
adc
lods
xchg
dec
pop
pop
outs
in
xlat
mov
xchg
in
and
dec
xchg
hlt
movs
(bad)
stos
xchg
out
cdq
sar
xchg
pop
out
enter
jae
xchg
popf
xor
inc
cmp
loop
xor
pusha
mov
stos
into
cmps
stos
mov
aam
ins
test
push
or
test
jne
je
mov
and
xchg
pop
(bad)
mov
pushf
mov
aaa
scas
fmul
pusha
gs
xchg
aam
pop
retf
xchg
cmp
hlt
test
hlt
xchg
out
lahf
scas
inc
call
movs
jne
shl
jmp
mov
xchg
pop
dec
aas
mov
mov
rcl
in
test
mov
ins
je
cmps
mov
push
xchg
xchg
adc
mov
fcom
and
outs
ja
sahf
sub
out
xchg
xchg
pop
or
and
push
adc
xchg
add
add
test
add
(bad)
out
std
xchg
sbb
jb
jne
lods
mov
pop
adc
inc
imul
mov
jbe
xchg
xchg
cmps
pusha
movs
inc
xchg
ret
fmul
xchg
cmp
pop
mov
cs
xchg
add
fwait
mov
xchg
data16
lock
push
pushf
xchg
mov
dec
inc
add
test
jb
rol
ret
ror
fcomp
fidiv
pop
xchg
xchg
cwde
xchg
xchg
jecxz
push
xchg
push
or
bound
shr
sahf
dec
lock
sub
rol
jecxz
dec
xchg
fiadd
mov
enter
and
adc
push
retf
inc
xor
dec
jg
pusha
mov
out
dec
adc
aam
loope
sub
cmp
push
outs
ds
daa
sbb
push
imul
pop
xchg
mov
loopne
xchg
movs
push
jns
sub
mov
retf
sbb
jno
push
xchg
icebp
xchg
outs
cmps
call
sub
mov
or
jo
ja
mov
push
ins
xor
xchg
stos
cmp
mov
data16
es
rcr
popf
xchg
xor
je
xchg
mov
xchg
popa
cli
adc
fs
mov
and
xchg
mov
inc
xchg
retf
xchg
dec
and
xchg
mov
in
xor
add
stos
dec
pop
sub
dec
xchg
mov
leave
xchg
sahf
xchg
movs
mov
call
aad
cmp
push
mov
mov
ds
push
mov
jne
sbb
xchg
lahf
jecxz
imul
in
or
(bad)
mov
jb
fst
xchg
leave
xchg
mov
adc
test
rcr
call
pop
xor
pop
xchg
push
push
inc
mov
mov
mov
mov
(bad)
mov
xchg
cmp
pop
xor
adc
into
xchg
sub
sbb
rcl
(bad)
int
xchg
xor
out
push
pushf
pop
jg
push
(bad)
loope
jmp
xor
push
(bad)
iret
xchg
adc
mov
movs
xchg
xchg
fstp
inc
dec
sbb
jne
fwait
inc
je
push
inc
neg
mov
imul
outs
xchg
ds
or
pop
jae
xchg
dec
jmp
mov
xchg
add
call
ins
sti
aas
inc
out
mul
(bad)
not
jno
mov
pop
call
jne
push
rcl
xchg
aas
push
mov
cmp
retf
add
xchg
mov
bound
(bad)
int3
pop
cld
dec
popf
xchg
push
jmp
mov
xchg
js
movs
inc
pop
in
push
xor
xchg
sti
cmp
stos
bound
and
lods
pop
scas
xchg
jmp
je
sub
(bad)
pop
pop
jno
nop
cmp
les
dec
aaa
xchg
(bad)
cld
mov
push
out
call
retf
cmp
mov
add
outs
xchg
xchg
xor
jbe
mov
xchg
fmul
je
xchg
push
push
ror
mov
sub
and
pop
mov
xchg
mov
test
adc
(bad)
leave
fcom
popf
mul
ret
xchg
ja
adc
xchg
or
stc
push
rol
cmp
pushf
in
cmp
(bad)
push
loop
pusha
mov
sub
fidivr
xchg
out
int
xchg
add
dec
fwait
mov
shl
(bad)
lock
jnp
xchg
push
jo
mov
or
inc
mov
fsub
xchg
xchg
dec
add
cdq
inc
shl
cwde
mov
jmp
call
ins
inc
cwde
das
out
idiv
test
push
cdq
or
int3
cmp
xchg
std
dec
adc
cmp
adc
sub
mov
and
push
xchg
dec
dec
enter
or
out
inc
dec
clc
into
std
pop
scas
icebp
sbb
dec
imul
cmp
push
jmp
je
cdq
int3
xchg
push
and
mov
jo
dec
jl
int
fwait
xchg
shl
test
addr16
mov
mov
aaa
fcomi
and
mov
cmp
adc
sbb
cmp
jmp
mov
dec
adc
adc
xchg
mov
pop
sub
xchg
or
dec
sub
(bad)
pop
cwde
hlt
push
or
and
xchg
cli
jb
call
fist
pop
movs
and
scas
mov
outs
add
cdq
or
call
mov
xchg
sbb
data16
xchg
mov
or
xchg
ror
out
pop
mov
in
mov
nop
xchg
adc
cmp
mov
adc
add
push
(bad)
int3
neg
adc
xchg
in
mov
dec
jne
rol
add
sti
lods
repz
rol
ins
pusha
jmp
push
nop
and
xchg
jb
xlat
lock
jmp
mov
test
stos
scas
cs
push
ja
fild
iret
push
xchg
push
cmps
movs
pop
or
push
inc
xchg
neg
sub
inc
push
outs
into
jnp
xchg
add
dec
mov
sahf
cs
xchg
sbb
dec
cmps
clc
ss
xchg
mov
call
lea
imul
xchg
popa
mov
aaa
pop
ret
xchg
dec
jo
arpl
fldcw
mov
aam
mov
pushf
(bad)
pop
movs
inc
xchg
sub
xchg
add
mov
push
inc
mov
mov
pusha
xchg
loop
push
addr16
lods
es
stos
mov
sbb
mov
xchg
cmc
or
xchg
adc
bnd
mov
mov
xchg
inc
cs
xlat
push
(bad)
loopne
into
fidivr
fsub
out
xchg
xchg
adc
push
pop
stos
jbe
lods
mov
hlt
cmps
int
adc
xchg
push
push
movs
pop
jne
bound
xchg
add
les
lahf
int3
cmp
xchg
mov
dec
hlt
xchg
aaa
mov
xor
xchg
mov
shl
mov
inc
aam
scas
inc
and
cmp
xchg
sbb
mov
xor
(bad)
pop
xor
and
pusha
jne
jg
cmc
lea
xchg
leave
cld
test
mov
shr
and
mov
and
dec
cli
adc
jecxz
pusha
jg
je
jbe
xor
fld
push
sub
push
mov
mov
sub
xchg
or
jae
rcl
call
xor
sub
repnz
lock
stos
dec
xchg
loop
sub
cmp
dec
mov
aaa
vpshlw
mov
sbb
xchg
or
je
cmp
mov
xchg
jno
mov
loop
fwait
or
adc
xor
mov
mov
xor
xchg
jns
mov
mov
pop
sub
xchg
inc
rcr
hlt
mov
xchg
jo
and
ret
xchg
mov
shl
lods
test
ficom
les
ins
test
push
sar
out
push
xchg
mov
jb
mov
fdivr
cdq
mov
mov
sbb
pop
repnz
xor
outs
and
pop
int
cmps
push
mov
mov
mov
pop
outs
or
or
sub
xchg
cwde
dec
pop
inc
xchg
in
cmp
push
lea
pop
jae
ds
int3
xchg
lds
cwde
sbb
sub
outs
fwait
jne
pop
xor
push
data16
mov
adc
xchg
jge
xor
or
pop
(bad)
iret
push
xchg
jbe
xchg
bound
dec
cli
cdq
xchg
and
push
ret
in
leave
mov
movs
out
push
mov
ins
xchg
sub
push
ret
rol
pop
mov
lods
scas
stos
xchg
jp
in
xor
dec
push
jbe
push
sbb
inc
imul
xchg
sbb
loopne
mov
or
stc
repnz
jne
cmp
fs
jle
xchg
mov
sub
add
push
push
sbb
popa
adc
push
xchg
dec
ret
data16
push
xchg
loope
xchg
cmp
sub
fsubr
cld
xlat
mov
dec
xchg
mov
mov
aas
mov
ret
sub
push
xchg
pop
xchg
sub
ja
bnd
sbb
xchg
xchg
imul
jl
inc
fst
xchg
rcl
push
jns
xchg
sbb
fnstenv
sub
xchg
and
movs
iret
mov
cmps
add
push
sub
xchg
pushf
cmps
fidivr
lahf
pop
sbb
mov
xchg
dec
xchg
(bad)
push
leave
outs
mov
cmp
loopne
mov
adc
call
push
aam
dec
(bad)
cli
xchg
jecxz
lods
ins
and
push
popa
xchg
cmp
pop
int
xchg
sbb
lock
test
xchg
mov
sub
ss
lods
or
adc
pop
je
dec
mov
or
imul
stos
adc
outs
dec
pusha
jnp
scas
xchg
aaa
dec
xor
jle
and
rol
xor
mov
fcmovnb
or
repz
xchg
scas
lods
dec
int3
xlat
mov
int3
mov
call
xor
mov
les
xchg
push
and
adc
fidivr
inc
xchg
retf
jl
jo
sbb
stc
fwait
adc
sbb
dec
inc
loop
dec
fisubr
cmc
xchg
jg
hlt
xlat
dec
or
mov
cmp
mov
mov
pushf
aam
xchg
outs
sti
retf
adc
iret
pop
xchg
jmp
xor
inc
mov
jmp
iret
sahf
bound
arpl
and
xor
mov
mov
push
push
js
ret
mov
sbb
mov
xchg
imul
inc
jecxz
pop
xchg
aaa
mov
push
inc
add
xchg
stos
jp
(bad)
dec
jg
mov
sub
fcomp
xchg
sub
jmp
inc
push
xchg
loop
popa
push
ffree
ja
inc
cli
jb
xchg
mov
(bad)
sbb
dec
mov
into
mov
push
enter
out
mov
xor
xchg
mov
pop
mov
mov
lock
mov
adc
add
pushf
or
jmp
jge
pop
add
inc
jbe
fwait
mov
hlt
je
fisttp
xchg
ss
cwde
mov
xchg
cmp
fs
fstp
pop
inc
xchg
ins
dec
xor
xchg
jae
clc
rcl
sbb
cmps
idiv
movs
rcl
xchg
mov
and
xchg
mov
imul
pop
stos
test
sbb
xchg
cmps
cdq
mov
int3
lods
(bad)
lahf
push
sbb
adc
or
fwait
sar
ds
or
jbe
cdq
inc
test
sub
mov
outs
adc
fxch
push
call
lods
sub
out
sub
add
jl
ret
lock
adc
sti
push
daa
or
xchg
pop
mov
movs
mov
xor
ror
iret
pop
leave
adc
mov
test
or
into
xor
ds
ins
mov
in
xchg
stos
dec
and
aad
adc
(bad)
push
add
xchg
shr
mov
or
imul
ins
jp
in
xchg
mov
aaa
jmp
sbb
je
and
sub
dec
mov
idiv
jmp
fs
and
and
xchg
fmul
adc
adc
loopne
jmp
and
xchg
jbe
cmp
inc
inc
xchg
mov
pop
inc
xchg
xchg
push
imul
xchg
mov
add
pushf
xchg
jl
pop
mov
xchg
adc
add
xchg
outs
iret
ret
jle
push
jge
pop
dec
bound
xchg
push
push
jmp
push
xor
je
sub
inc
pop
xor
inc
push
iret
ret
xchg
or
xchg
adc
push
imul
jl
push
xchg
dec
push
stos
movs
xchg
mov
int
add
sbb
mov
stc
xchg
or
sbb
adc
mov
xchg
aad
shl
fld
pushf
mov
lock
push
gs
and
push
hlt
fidiv
sub
push
mov
jbe
adc
(bad)
int3
not
scas
xor
jmp
jp
jmp
dec
add
mov
outs
xchg
je
stc
div
cmp
nop
addr16
add
push
jbe
cld
mov
fcom
inc
mov
xchg
pop
inc
cwde
idiv
push
hlt
xchg
test
lods
ds
js
push
or
add
xchg
adc
or
add
add
lods
(bad)
shl
mov
mul
ret
add
sbb
ins
popf
sbb
mov
sub
add
stc
or
inc
(bad)
push
jne
xchg
jb
pop
addr16
iret
out
xchg
imul
cs
adc
or
scas
xchg
push
pusha
fsub
outs
adc
(bad)
jmp
cmps
jb
xchg
test
mov
outs
cmp
and
xchg
sbb
test
sbb
lock
push
xchg
mov
jae
nop
xchg
dec
fsubr
das
test
es
shl
mov
ins
cmp
(bad)
mov
jp
lock
push
std
adc
hlt
sub
test
and
sub
jmp
cmps
add
sub
fwait
loopne
aam
nop
lahf
mov
mov
xchg
retf
xor
gs
xchg
sub
xchg
sub
pop
test
(bad)
mov
or
jmp
or
xchg
push
mov
and
and
xchg
adc
push
cmps
cli
or
pop
sbb
retf
out
xchg
pop
cmp
mov
xchg
mov
dec
in
adc
in
mov
xchg
nop
and
cmps
cmp
int
sbb
pop
lea
xchg
mov
cmp
xchg
cli
jmp
rcl
dec
jp
mov
dec
xchg
mov
jecxz
ja
jns
jge
push
loope
in
xchg
fadd
jns
ror
cs
out
sub
mov
jecxz
mov
xchg
shl
xor
pop
ret
in
adc
sub
in
mov
xchg
jae
cmps
jbe
inc
inc
xor
or
lods
fwait
xchg
sub
ret
das
xchg
and
test
retf
jo
imul
stos
cs
inc
mov
dec
shl
xchg
dec
jp
or
mov
fisub
xchg
mov
xchg
aam
xchg
fstp
cld
nop
add
adc
aam
xchg
mov
fadd
xchg
push
sub
popa
ins
mov
out
or
xor
out
cmp
lds
xor
lahf
inc
jge
push
xchg
push
cmps
and
sbb
pusha
jl
xchg
xchg
(bad)
data16
and
inc
mov
add
xchg
rcl
pop
xchg
ret
loope
xchg
jnp
push
pop
aad
lahf
mov
xchg
pushf
adc
lahf
push
xchg
inc
ret
in
fs
and
add
or
arpl
xchg
jl
cmp
push
xor
cmp
push
xchg
push
xchg
adc
in
in
cdq
pop
into
aas
pop
xchg
mov
clc
jo
in
pop
xchg
cld
in
xor
xchg
push
xchg
sti
lods
mov
add
dec
mov
call
mov
rcl
pop
lods
and
inc
mov
jmp
dec
sub
loop
test
mov
popf
inc
int3
xchg
cmps
cmp
dec
xchg
push
aad
fild
movs
xor
xchg
adc
sbb
mov
repnz
xor
jg
sbb
xchg
mov
cwde
js
shr
xchg
inc
push
jmp
xchg
faddp
ret
cmps
cmps
add
mov
test
ins
ret
jp
sub
fist
jnp
int3
xchg
xlat
cdq
and
xor
xchg
in
gs
lock
pop
xchg
push
jbe
mov
iret
push
das
dec
lods
sbb
jnp
test
nop
xchg
xor
cmp
hlt
fist
xchg
and
movs
mov
leave
adc
cwde
mov
sbb
jb
repnz
xchg
dec
hlt
cli
xchg
(bad)
adc
pusha
mov
xchg
and
jnp
js
lock
push
(bad)
xchg
retf
jecxz
sub
xchg
lea
adc
sbb
(bad)
loop
mov
ss
imul
jbe
retf
and
aad
js
jecxz
repnz
xchg
outs
push
aaa
ss
pusha
or
xchg
xor
sbb
inc
push
loopne
fs
inc
scas
add
leave
in
add
mov
xor
in
xchg
iret
inc
push
jg
fsub
mov
xchg
int
mov
out
push
sbb
js
adc
push
mov
cmp
cmc
dec
sahf
cmp
add
(bad)
ffreep
and
pop
jl
rcl
mov
and
push
movs
inc
mov
out
ja
mov
adc
mov
add
(bad)
nop
daa
xchg
rcr
lds
repnz
push
fisttp
mov
mov
xchg
cmc
push
leave
add
xchg
or
(bad)
add
jp
xchg
call
xor
fwait
arpl
pop
mov
outs
imul
mov
jle
lahf
movs
(bad)
jge
push
ds
jmp
xchg
mov
gs
and
rcl
or
adc
mov
aam
mov
xchg
xchg
repz
dec
je
ds
or
mov
arpl
popf
mov
clc
imul
(bad)
sbb
mov
js
rol
or
or
xchg
fdivr
cld
mov
mov
ret
enter
in
adc
pop
aad
aas
gs
inc
mov
and
cmp
scas
xor
in
sbb
lahf
mov
cmps
add
xchg
fisttp
cmp
mov
pop
xor
ss
in
adc
ds
cmp
mov
xchg
test
xchg
daa
pop
sbb
inc
out
xchg
sub
xor
popa
mov
js
dec
aas
adc
jge
and
add
xchg
stos
mov
jne
adc
xor
push
rcl
ret
outs
adc
mov
xchg
mov
in
retf
cmp
jecxz
das
into
repnz
test
xchg
mov
je
add
leave
in
ins
(bad)
xchg
mov
push
shr
xchg
jbe
pusha
outs
inc
jp
xchg
cmp
dec
dec
and
mov
pop
ret
xchg
mov
(bad)
sub
imul
inc
mov
push
rcl
or
xchg
or
adc
adc
mov
in
retf
arpl
and
xchg
(bad)
loopne
or
xchg
movs
pop
push
and
loopne
and
into
mov
js
mov
mov
data16
xchg
add
sub
mov
call
enter
and
mov
xchg
mov
sbb
adc
test
xchg
push
or
mov
fcom
aaa
mov
xchg
sbb
jmp
fwait
cmp
or
push
xchg
arpl
and
call
scas
int3
outs
leave
cli
add
push
fwait
div
(bad)
test
xor
ret
retf
xchg
fst
pop
and
add
xchg
jmp
adc
pop
fiadd
test
std
xchg
push
xor
jle
test
add
leave
jmp
call
pop
pop
test
fmul
movs
xchg
mov
icebp
rcr
stos
cmp
mov
aam
fadd
push
mov
bnd
push
jmp
pushf
dec
(bad)
push
rcl
cmp
iret
mov
(bad)
in
(bad)
outs
mov
xchg
cmp
clc
add
mov
std
xchg
push
cmps
inc
in
sar
cs
inc
test
sar
pusha
lds
mov
in
lock
std
mov
pop
jge
ins
nop
iret
rcr
adc
mov
fwait
loop
ror
jnp
out
cmp
or
hlt
repnz
cs
je
xchg
popf
mov
cmp
repz
jmp
loopne
scas
jno
and
pop
call
into
in
jbe
ins
xchg
fwait
jnp
pushf
fmul
inc
les
popa
or
mov
cmp
xchg
sub
test
and
and
popf
retf
or
xor
xchg
daa
addr16
pop
cmp
and
int3
xchg
out
sub
pusha
cmc
mov
sbb
imul
xchg
cmps
pop
mov
sub
sahf
dec
xchg
rcr
jb
sub
scas
aam
cmp
call
daa
fs
mov
aam
inc
in
call
push
add
mov
xchg
cmp
add
mov
and
jo
pop
ds
xchg
test
mov
(bad)
je
mov
int
xchg
in
dec
mov
cmc
xchg
add
das
ds
stos
loope
loop
jmp
je
push
mov
repz
dec
aam
pop
fmul
xor
lods
mov
xchg
or
sub
pop
clc
fcmovb
fistp
xchg
jle
enter
mov
xchg
push
data16
mov
xchg
sbb
and
adc
leave
xchg
mov
dec
(bad)
mov
call
je
mov
mov
cmp
xchg
xchg
iret
xchg
sub
pop
xchg
mov
xchg
ret
inc
lea
mov
js
xchg
jp
lods
out
mov
(bad)
fcomp
add
cmc
test
sub
stos
inc
ret
add
xchg
add
jb
mov
xchg
lock
outs
repz
xchg
add
rcr
jnp
mov
retf
(bad)
cwde
sub
mov
cwde
adc
and
pusha
loopne
pop
dec
xchg
cmp
inc
mov
(bad)
sub
mov
xor
stc
xchg
xor
xchg
push
mov
push
mov
jne
out
adc
jmp
dec
adc
xchg
xchg
push
notrack
jecxz
in
xchg
adc
push
cmc
ss
jns
adc
or
xchg
xor
retf
repnz
mov
push
push
repz
in
loop
dec
xor
test
iret
push
push
push
xchg
mov
jg
jp
pushf
cmp
or
jnp
dec
inc
test
push
fiadd
dec
movs
adc
out
js
into
stc
mov
out
jns
xchg
add
inc
stos
cld
push
xchg
dec
loope
out
mov
in
pop
retf
(bad)
adc
adc
ja
loope
and
push
mov
es
dec
in
xchg
ds
xor
in
(bad)
and
outs
ret
xchg
push
sbb
mov
inc
pop
nop
cmp
xor
mov
lahf
mov
or
add
test
and
jbe
clc
lods
xchg
pushf
into
inc
cs
mov
hlt
sub
and
aas
xchg
(bad)
push
repnz
hlt
jl
sbb
mov
movs
sbb
jp
mov
adc
jl
fs
es
push
fldcw
mov
lahf
jns
xchg
push
push
fwait
pop
dec
test
jb
xchg
pop
movs
loope
xchg
dec
pop
mov
mov
cmp
cli
jns
xchg
inc
and
and
mov
or
adc
fwait
add
je
push
push
ss
add
jp
inc
inc
in
xchg
mov
push
dec
jo
xchg
daa
mov
xchg
mov
hlt
cmp
sbb
mov
xor
xchg
jmp
pop
mov
mov
xchg
push
pop
cli
fldenv
test
jbe
sub
push
and
mov
je
inc
fisttp
push
xchg
mov
(bad)
mov
cmps
cmps
jl
xchg
pop
outs
mov
repz
lock
xor
sub
adc
push
mov
mov
fcom
fwait
jg
jmp
xor
push
mov
and
xchg
jecxz
sub
inc
std
push
lds
fdivr
ror
mov
xchg
push
pop
outs
in
xor
sbb
lods
jecxz
sub
xchg
xor
out
push
push
dec
je
sbb
push
movs
push
fabs
popa
call
xchg
jge
out
jmp
arpl
mov
rcl
(bad)
mov
or
push
ror
fidiv
jo
xchg
pop
dec
mov
inc
xchg
push
movs
and
out
mov
pop
pushf
jl
aaa
mov
enter
sbb
gs
imul
xchg
inc
loope
sbb
(bad)
xor
push
add
movs
mov
jle
xchg
aas
xor
cli
mov
mov
out
jns
push
xchg
mov
mov
outs
xchg
test
lds
rol
cmp
stc
mov
adc
test
retf
pop
xchg
rcl
dec
lea
bnd
aam
test
ror
and
dec
fwait
adc
mov
fwait
icebp
in
pop
(bad)
sti
popa
dec
sahf
cdq
call
sbb
fs
xlat
sub
retf
add
push
pop
mov
mov
std
jae
dec
mov
mov
push
cmp
xchg
mov
fwait
xor
out
aam
cmc
push
add
mov
push
mov
into
shr
call
xchg
and
adc
pushf
xchg
or
xchg
and
mov
xchg
ins
pop
push
xor
xchg
ds
imul
mov
jge
sub
mov
xchg
out
stc
mov
and
push
mov
imul
lods
or
dec
xchg
outs
retf
out
sbb
mov
pop
out
cmp
je
xor
xchg
sar
aam
call
(bad)
fiadd
fs
push
sbb
sub
js
mov
lods
les
fcmovnb
(bad)
xchg
call
cmp
mov
fwait
(bad)
adc
in
popf
ins
imul
mov
push
fisttp
pop
xchg
lea
ds
ja
mov
cdq
mov
mov
fwait
adc
sbb
and
shr
in
mov
xor
inc
int
cmc
mov
push
fdiv
xor
push
sbb
mov
pop
in
pop
icebp
imul
cld
jp
lahf
mov
data16
xchg
fcomi
les
xchg
xchg
add
clc
pop
pop
or
fwait
cmps
cmp
nop
jno
shl
popf
push
push
cmp
out
xchg
dec
xchg
rcl
cmps
mov
in
push
push
clc
ds
mov
je
or
in
call
sbb
mul
popf
je
xor
mov
pop
mov
mov
jae
scas
push
hlt
cmp
mov
mov
int3
outs
adc
jne
(bad)
or
popa
fcomp
xchg
adc
cmp
mov
mov
sub
and
rcl
mov
xchg
shl
ins
mov
arpl
add
xor
ror
sub
mov
aam
xchg
and
xor
in
cdq
or
jle
push
dec
dec
popf
les
mov
gs
idiv
xor
push
ds
pop
cmps
mov
js
mov
adc
jl
and
xchg
mov
dec
arpl
cmps
xchg
adc
stos
lahf
xchg
xchg
jns
rol
and
outs
or
jmp
pop
push
popf
xchg
jbe
jle
fadd
xor
inc
and
inc
ins
lahf
xchg
ja
xchg
aam
push
xchg
mov
int
xor
gs
es
xchg
mov
shl
ret
jae
into
mov
xchg
mov
xor
cmc
mov
push
xchg
in
mov
xchg
hlt
add
mov
imul
cmp
xchg
cld
(bad)
ins
retf
fnstsw
push
fwait
inc
(bad)
rcr
nop
lds
lock
pop
push
or
loopne
mov
call
daa
adc
mov
jmp
push
inc
xchg
and
(bad)
jge
xchg
and
sub
ret
repz
or
fwait
push
inc
loope
ficomp
cmp
xchg
enter
cmp
dec
xchg
push
movs
out
inc
cmp
rcl
xor
mov
xor
fcom
jp
ja
xor
femms
lahf
mov
sub
adc
mov
(bad)
in
popa
(bad)
dec
pop
stos
jecxz
push
sbb
aam
test
aad
mov
rcr
xchg
lds
cmc
les
dec
xchg
jb
mov
(bad)
xchg
xlat
cmp
outs
in
push
jne
imul
movs
iret
or
js
popa
pop
mov
lock
jmp
ds
jecxz
push
in
push
jge
hlt
lods
inc
or
test
fwait
pop
(bad)
fist
sti
ret
xor
sbb
xchg
aam
mov
xor
loop
and
jbe
lock
je
scas
data16
xchg
mov
inc
test
fwait
int3
pop
jne
mov
jmp
lds
aad
(bad)
je
xchg
mov
es
pop
inc
jne
inc
sar
cli
aaa
cmp
mov
mov
push
jmp
fimul
mov
and
dec
repz
in
push
add
popf
in
out
cli
inc
(bad)
jmp
lods
popa
mov
pop
jl
aaa
xchg
hlt
pusha
ja
lock
xor
inc
pop
xchg
outs
or
fistp
mov
push
(bad)
in
je
jl
xchg
mov
(bad)
xchg
sti
mov
inc
pop
mov
xchg
jbe
(bad)
add
push
xchg
xchg
and
push
adc
inc
xchg
dec
push
fxch
xchg
clc
mov
add
ins
sar
repz
and
hlt
xchg
in
adc
mov
fdiv
add
add
jnp
push
inc
dec
xchg
int
scas
sbb
sub
jge
retf
xor
outs
(bad)
pop
mov
cmp
push
out
icebp
adc
data16
dec
push
mov
lea
cmps
(bad)
mov
jmp
or
adc
lods
imul
adc
popa
cmp
jnp
jb
inc
punpckhwd
mov
out
jo
pop
cmp
test
sub
xchg
(bad)
or
add
mov
nop
inc
pop
or
test
and
fistp
pop
rcl
mov
fwait
in
adc
call
cmp
movs
sti
inc
scas
xchg
aam
outs
push
ds
fmul
out
test
ret
cli
movs
or
mov
jmp
jne
sub
sub
sbb
add
int
int3
xchg
ret
stos
sahf
mov
mov
aam
fs
push
fwait
out
arpl
add
mov
je
xchg
or
repz
mov
in
dec
fild
cmp
or
xchg
sahf
cpuid
jns
pop
xor
xchg
retf
js
stos
test
(bad)
adc
retf
cdq
mov
fidiv
call
mov
fwait
sbb
in
enter
(bad)
cmp
ret
or
xchg
mov
or
stc
imul
and
fwait
out
cs
sbb
xor
in
adc
not
ss
retf
bnd
test
mov
iret
loopne
mov
adc
inc
repz
int3
in
pop
fs
xchg
call
loopne
(bad)
xchg
dec
jnp
xor
stc
loop
les
ss
or
ret
pop
(bad)
push
push
inc
pop
rcl
sti
push
xchg
sub
cld
push
movs
fwait
or
jle
repnz
aad
aam
xchg
mov
xor
pop
ret
cmp
(bad)
fwait
pop
int
scas
sub
dec
not
iret
xchg
or
mov
shl
stc
js
mov
mov
xor
ret
mov
data16
popf
or
push
xchg
out
jae
pop
xchg
or
push
ins
xchg
or
xlat
jmp
mov
in
into
in
mov
xor
push
sub
or
iret
or
shr
or
fwait
movs
mov
mov
mov
sub
adc
pop
cli
rol
inc
aaa
dec
xchg
add
xchg
adc
mov
sub
jo
call
out
sub
jl
or
push
daa
lods
test
popf
xchg
dec
sub
int3
movs
in
rcl
mov
or
mov
sar
sbb
data16
pop
(bad)
xchg
xchg
xchg
movs
clc
test
and
xchg
xchg
mov
cmc
movlhps
cwde
retf
mov
daa
xchg
out
in
fdiv
(bad)
jmp
or
jmp
shl
add
jbe
inc
fwait
cld
dec
pop
fs
je
fdivr
aaa
xchg
outs
ins
or
rol
jbe
xchg
dec
ja
and
mov
dec
(bad)
data16
test
xor
mov
arpl
stos
lahf
clc
inc
xchg
movs
mov
sub
movs
xchg
add
and
(bad)
cdq
add
push
test
sbb
push
mov
xchg
loopne
in
dec
add
xor
mov
push
(bad)
xchg
mov
cli
rcr
dec
movs
mov
fldenv
test
ja
addr16
ret
xchg
sbb
fcmovnb
add
call
into
or
xchg
add
push
stos
add
or
cli
push
pop
xchg
or
dec
push
push
mov
arpl
fisubr
inc
cmp
in
sub
movs
xor
cmp
xchg
sbb
dec
xchg
in
rcl
ss
out
xchg
pop
sahf
fmulp
outs
mov
xor
sub
retf
mov
stc
out
(bad)
push
push
pop
(bad)
xchg
ret
mov
mov
popa
xchg
xor
test
xchg
mov
sbb
pop
movs
push
fsubr
aas
(bad)
cmc
mov
bound
movs
aam
div
cmps
stos
or
xchg
(bad)
mov
push
mov
mov
(bad)
jne
mov
daa
mov
ret
jns
sub
xchg
fbld
bound
into
jae
adc
repz
dec
aaa
ja
lds
xchg
cmp
sub
fwait
repnz
cs
inc
dec
arpl
sub
inc
or
push
push
xchg
add
rol
cmp
xchg
jo
stc
jnp
fdiv
hlt
and
xchg
and
ins
in
mov
inc
xchg
retf
sbb
mov
dec
xchg
and
lock
sbb
push
into
nop
mov
mov
xor
xchg
mov
fdivr
inc
int
les
sbb
mov
and
sub
fwait
popf
inc
cmps
and
hlt
jb
xor
popa
pop
push
pop
aam
xor
pop
xchg
inc
push
and
nop
mov
in
(bad)
xchg
push
xchg
test
popa
xchg
jo
lods
mov
jl
xchg
xor
xchg
(bad)
loop
xchg
test
mov
ss
pop
stos
sub
push
xchg
xchg
scas
jae
sbb
cmp
cmp
xchg
sbb
inc
and
loopne
mov
adc
push
(bad)
rcl
xchg
inc
xchg
shl
pop
int
test
ret
clc
lock
call
mov
ja
icebp
int
fstp
outs
retf
jo
pop
dec
xchg
lea
stc
sbb
push
push
int
jg
xor
enter
in
dec
xchg
scas
lock
push
cdq
or
adc
xor
lock
dec
xchg
sbb
test
xchg
div
mov
repz
cmp
adc
xchg
pop
cmps
rcr
scas
add
(bad)
xchg
jno
ja
pop
ds
xchg
dec
dec
push
out
outs
fs
fiadd
push
add
xchg
push
cdq
rcl
dec
add
xchg
lea
or
ret
xor
cld
imul
fistp
xchg
or
push
pop
mov
jne
int
stos
adc
xor
pop
xchg
jl
rcl
mov
jb
push
test
xchg
ins
cwde
mov
daa
push
or
or
xor
xchg
fs
retf
add
iret
mov
cs
out
xchg
dec
cmps
bound
fdiv
sub
sahf
jg
hlt
jmp
enter
mov
ins
jg
push
cwde
add
mov
sub
dec
push
xor
dec
adc
pop
cmps
xchg
call
cli
mov
das
xchg
mov
jae
pop
mov
(bad)
fwait
int
xchg
std
(bad)
stc
cmp
test
xchg
mov
mov
jge
xchg
xchg
retf
fdiv
mov
xor
mov
add
aaa
pop
cmps
mov
aam
dec
mov
xchg
push
outs
shl
push
and
inc
adc
dec
test
sti
or
les
rcr
mov
fcmove
xor
call
xchg
or
aas
and
shl
inc
fwait
inc
push
les
loope
mov
xchg
cdq
pop
stos
sahf
dec
fwait
push
sub
mov
ins
out
(bad)
xchg
std
jmp
xchg
and
cld
mov
mov
not
xor
xchg
jl
add
aaa
ins
mov
in
add
and
pop
pop
mov
xchg
xchg
cdq
icebp
out
sbb
xor
mov
aam
xchg
enter
aas
add
xchg
adc
dec
jne
or
and
inc
and
in
jnp
in
inc
bound
call
push
out
je
sbb
adc
xchg
daa
inc
rcl
cmp
add
lods
xchg
je
push
mov
dec
into
xchg
jne
or
sbb
fwait
mov
jno
cmps
sbb
fcomp
shr
in
jmp
add
dec
mov
aaa
ret
(bad)
fstp
pop
jne
mov
xor
mov
call
pushaw
stos
cdq
(bad)
scas
xchg
mov
in
(bad)
aad
lahf
xchg
pop
adc
test
pop
push
mov
rcl
mov
loopne
pop
xchg
in
mov
jno
adc
mov
push
mov
xchg
nop
fiadd
xchg
fcom
test
and
mov
cmc
int3
push
jo
fdivr
movs
xlat
xor
(bad)
mov
xchg
xchg
push
inc
repz
cmp
dec
lds
clc
mov
or
(bad)
leave
or
cmp
xchg
mov
sbb
push
xchg
sbb
jo
fwait
inc
add
hlt
inc
adc
pop
xchg
pop
jno
stos
(bad)
jmp
and
inc
jmp
adc
xchg
out
jecxz
xchg
or
jge
inc
cmp
pop
lahf
xchg
cmp
aam
xor
and
cli
test
inc
or
bound
cs
syscall
sub
inc
xchg
mov
mov
out
stos
loop
mov
mov
aaa
aas
adc
cld
xchg
xor
ficom
nop
dec
sub
xchg
idiv
mov
fwait
push
ja
popa
and
test
mov
mov
bnd
pop
outs
dec
int
(bad)
iret
cwde
ins
ss
inc
xchg
movs
or
xchg
xchg
adc
inc
mov
add
lock
test
fadd
sbb
into
mov
cmps
les
mov
in
xchg
push
jmp
std
inc
jo
push
mov
lahf
mov
mov
dec
xchg
nop
cmps
inc
jnp
push
outs
push
mov
and
mov
imul
(bad)
xchg
add
jo
(bad)
(bad)
hlt
ret
xchg
cld
inc
dec
sub
into
inc
cmp
into
imul
xchg
dec
adc
in
inc
mov
je
xchg
loope
ins
mov
xchg
mov
xchg
dec
push
xchg
push
mov
xchg
cld
movs
push
out
add
out
ret
in
fs
test
repnz
nop
add
loope
mov
sbb
imul
inc
fld
cdq
xchg
jno
push
and
stos
cwde
jnp
xchg
les
inc
into
fwait
out
cdq
pop
movs
cli
fs
loop
mov
or
and
xchg
dec
inc
mul
call
fist
imul
cmp
push
arpl
in
ror
call
movs
loope
xchg
xchg
inc
mov
(bad)
sar
fwait
sub
rol
pop
xchg
push
mov
aaa
int
jb
stc
mov
xchg
push
daa
fwait
inc
retf
sar
xchg
or
fwait
call
les
jle
xchg
test
xchg
or
push
sbb
mov
jo
lock
in
adc
add
into
add
shr
dec
xchg
xlat
loopne
sbb
call
dec
out
shl
rol
sbb
dec
cmc
iret
fsubr
xchg
scas
es
ficomp
xchg
push
outs
xchg
ret
mov
in
fwait
and
fwait
es
test
push
mov
inc
loop
xchg
dec
mov
hlt
stos
or
sbb
ja
adc
inc
ins
add
pop
mov
xor
dec
inc
pop
xchg
xor
iret
gs
jp
aam
loope
xchg
mov
pop
push
or
jmp
les
pushf
push
fist
inc
rcl
outs
xchg
add
dec
ja
xchg
stos
add
hlt
push
mov
xor
xchg
adc
das
and
(bad)
(bad)
xchg
jmp
arpl
pop
jmp
mov
call
hlt
test
icebp
xchg
cmp
mov
sub
adc
jle
xchg
xor
retf
add
jmp
cmp
int
xchg
push
mov
mov
loope
jns
repnz
xchg
mov
or
jae
sbb
push
xchg
or
outs
sub
(bad)
clc
test
out
bswap
add
mov
pop
pop
lds
xchg
xchg
or
xor
les
or
ins
and
jno
xor
jae
aam
push
(bad)
adc
js
scas
test
xchg
jge
adc
xor
push
dec
std
xchg
mov
mov
jno
xchg
in
in
jmp
mov
gs
in
push
adc
pop
jns
sti
lods
xchg
or
mov
pusha
xchg
mov
adc
out
dec
mov
xchg
int
jmp
mov
fwait
push
xchg
sbb
sbb
add
aaa
pusha
push
push
adc
outs
fwait
bound
add
shr
push
js
or
push
push
xchg
mov
iret
add
repnz
mov
jmp
xchg
push
mov
xchg
cwde
mov
aam
clc
adc
jne
add
shr
mov
hlt
and
and
shr
push
out
(bad)
sub
xor
dec
dec
sbb
mov
retf
jns
imul
mov
inc
scas
cmp
xchg
test
js
push
int
jmp
fmul
add
je
imul
xchg
xor
adc
retf
pusha
or
xchg
xchg
ffreep
cmp
nop
mov
dec
inc
jno
jmp
xchg
push
add
cmp
ds
sbb
pop
push
rep
rol
xchg
sub
or
aad
adc
xchg
and
pop
mov
xchg
fmul
fisttp
add
js
or
xchg
mov
sub
mov
shl
cmp
cmps
xchg
jb
cwde
jp
mov
xchg
nop
cli
push
(bad)
std
mov
push
mov
lock
hlt
arpl
pop
(bad)
popf
mov
out
les
mov
jp
and
ss
shl
sbb
mov
imul
jae
xor
fwait
js
add
hlt
xchg
push
jb
pop
sbb
pop
jmp
nop
je
xchg
sbb
mov
fs
push
pop
mov
mov
test
(bad)
xchg
and
xchg
jno
sahf
or
loopne
data16
add
enter
call
xchg
sti
mov
cmps
pop
cli
test
push
fs
inc
pop
es
mov
mov
inc
not
loopne
xchg
cmp
add
xchg
jns
pop
das
dec
fwait
xchg
mov
lahf
xchg
mov
or
loopne
cld
fwait
mov
pop
jae
pop
cmp
adc
arpl
sahf
test
adc
mov
mov
std
test
jb
xchg
fld
adc
cld
rcl
push
jne
and
dec
xchg
ins
mov
int3
aam
lea
or
scas
xchg
mov
cmp
pop
push
jmp
dec
adc
dec
(bad)
push
mul
xchg
call
xor
xchg
(bad)
push
xchg
push
and
clc
fwait
inc
movs
mov
mov
xchg
adc
xchg
dec
cmp
cs
jg
sbb
test
retf
aas
add
mov
shl
ins
xchg
push
ret
and
iret
xlat
dec
and
imul
(bad)
sub
xchg
or
movs
call
adc
fwait
push
(bad)
call
icebp
enter
push
inc
cmp
rcr
call
sub
xchg
lods
shr
jge
xchg
push
jno
daa
stos
push
movs
add
fdiv
push
xchg
xor
mov
dec
xor
lods
js
test
jne
lods
and
mov
sbb
je
fst
push
xchg
adc
imul
repnz
aam
xchg
fimul
fwait
cmps
(bad)
dec
cs
daa
xor
cli
fistp
xchg
out
imul
popf
rcr
push
cmps
por
(bad)
repz
mov
div
xchg
pushf
mov
push
add
aaa
mov
and
add
xchg
mov
(bad)
in
mov
xor
es
mov
scas
les
fwait
mov
sub
pop
push
xchg
repnz
mov
xor
inc
sbb
cwde
fstp
cmp
mov
jg
es
mov
fsubr
add
push
mov
outs
popa
jecxz
sub
(bad)
or
aad
fstp
xchg
lea
add
mov
imul
mov
add
jnp
xor
adc
xchg
fmul
iret
test
leave
push
adc
mov
rcl
jnp
mov
ret
xor
sub
aam
push
and
pop
push
int
inc
rcl
dec
adc
mov
xchg
add
lods
inc
(bad)
push
movs
mov
push
mov
test
cmp
dec
inc
sub
pop
loopne
popa
ds
sub
bound
inc
jecxz
xor
mov
push
xlat
push
xchg
mov
jbe
xchg
pushf
sub
push
xchg
int
(bad)
push
inc
jmp
adc
add
and
jne
mov
sbb
fst
int3
or
int
push
xchg
cmp
(bad)
push
(bad)
pop
rcr
stos
in
xchg
addr16
lfs
je
xchg
dec
js
sub
pop
mov
adc
rcr
add
lds
scas
nop
xchg
out
int
clc
mov
sub
cs
push
xchg
dec
sub
bound
add
test
lods
xchg
enter
int3
mov
jl
push
pop
cmp
push
and
xchg
(bad)
xchg
inc
xor
inc
push
sbb
jb
ja
push
xchg
test
das
dec
xchg
xchg
pusha
not
push
fisttp
mov
jmp
popf
mov
xor
es
or
(bad)
out
xchg
mov
sbb
dec
ds
xchg
add
sub
int3
pop
xchg
ss
pushf
jmp
(bad)
js
aaa
mov
int
jns
or
movs
dec
daa
xchg
test
cmps
push
popa
movs
mov
xchg
ror
add
mov
leave
movs
(bad)
test
into
mov
mov
hlt
cld
jne
ss
mov
sti
nop
adc
movntq
std
jg
pop
add
cmp
xchg
mov
pop
xor
rcl
xchg
cmp
lods
and
jbe
dec
push
scas
out
inc
sub
sar
jne
daa
jecxz
scas
cmp
cmp
stc
into
rcr
jno
sbb
inc
jl
push
xchg
cli
xchg
iret
adc
aam
(bad)
mov
je
(bad)
jmp
sbb
and
clc
xlat
sti
mov
push
pop
shl
pop
adc
jae
jno
xchg
stc
push
aas
mov
out
pop
xchg
fwait
sub
and
jp
jecxz
dec
ins
call
jg
aaa
xchg
dec
sahf
mov
aam
cmp
push
sbb
push
adc
and
lar
cs
iret
aad
xchg
daa
ins
outs
or
xchg
retf
push
dec
xchg
cmps
jno
cmp
jge
xchg
inc
adc
shr
stos
lds
mov
out
sbb
jge
xchg
cli
inc
jnp
xchg
rcl
pop
xchg
push
cld
and
pop
jo
sbb
push
adc
stos
pop
loope
aaa
loopne
lock
sbb
int
mov
jbe
xor
adc
xchg
inc
xor
inc
test
in
mov
add
sbb
sub
sbb
xchg
sahf
xor
push
shr
xchg
fcomp
pop
nop
call
push
fwait
pop
add
enter
cld
jl
jns
mov
lahf
addr16
mov
cmc
and
mov
jge
(bad)
inc
adc
scas
mov
sub
in
sbb
(bad)
push
jp
rcl
mov
xchg
imul
inc
mov
ror
test
pop
ror
or
jecxz
fwait
outs
mov
inc
movs
mov
mov
xchg
jns
jmp
arpl
lds
out
ins
cdq
jg
adc
nop
pop
loopne
xchg
mov
movs
xchg
repz
adc
fsubr
call
retf
mov
push
not
jmp
call
add
inc
mov
xchg
test
dec
shl
inc
cmp
jmp
(bad)
xor
or
or
into
push
fnstsw
mov
add
sti
aaa
cwde
pusha
xchg
into
xor
sbb
pop
movs
xchg
stos
sub
or
dec
lds
xchg
fwait
sahf
jecxz
adc
(bad)
sti
pusha
xchg
push
ror
daa
dec
icebp
nop
dec
xchg
out
dec
js
loop
fist
dec
push
xchg
mov
je
mov
fstp
pop
inc
outs
sete
retf
jne
sbb
mov
and
mov
mov
or
xchg
bound
xchg
adc
jmp
xchg
sbb
rcr
out
call
push
mov
ins
cli
rcl
add
fadd
add
pop
cmp
jl
xor
imul
pop
mov
push
and
cmp
repnz
std
int3
inc
pop
lods
lock
add
or
and
xchg
scas
jbe
lock
and
popf
cdq
mov
fisttp
lods
push
add
and
ins
xchg
pop
retf
nop
xchg
xchg
and
out
xchg
xchg
(bad)
aad
lods
mov
nop
sbb
adc
adc
pop
sbb
sub
mov
dec
aad
or
push
icebp
or
adc
hlt
jecxz
movs
xor
jl
aaa
pop
xchg
sbb
push
and
gs
xchg
aas
sub
xchg
add
js
xor
shr
lock
pop
xchg
imul
jbe
jl
mov
sahf
outs
aam
dec
pushf
repz
ja
enter
xchg
adc
(bad)
out
pop
inc
jo
mov
add
mov
or
mov
add
mov
add
fidiv
mov
sub
cmp
imul
in
je
sbb
aam
push
mov
sahf
jns
pop
xchg
cmp
sbb
jb
xor
repz
inc
xchg
jl
sbb
cld
fucomp
iret
xchg
test
les
pop
sub
movs
xchg
push
jle
or
arpl
jbe
mov
mov
adc
sbb
jg
loop
(bad)
cli
xchg
stos
cdq
in
cmp
repz
mov
sbb
jne
xchg
in
(bad)
(bad)
cmp
mov
iret
push
fcmove
push
xor
(bad)
mov
ss
or
xchg
rep
std
xchg
aam
lds
repnz
xchg
xor
push
xchg
inc
push
(bad)
or
int
xchg
ret
bound
dec
sti
mov
sbb
push
aam
cmp
add
fwait
(bad)
push
or
sub
fwait
dec
rol
cwde
dec
add
jmp
cld
iret
xlat
test
sbb
loopne
popf
or
(bad)
mov
stos
leave
push
jbe
imul
sti
xchg
aam
cmc
loopne
jecxz
xor
xchg
popa
scas
xor
arpl
add
cmp
cli
inc
push
std
fwait
mov
adc
in
popa
xchg
ins
xchg
and
mov
adc
mov
in
loopne
mov
cmp
retf
xor
pop
sar
je
lods
div
hlt
mov
ins
cmp
adc
bound
xchg
out
rcr
jl
push
mov
xchg
adc
mov
mov
js
cwde
cld
xchg
xchg
icebp
pop
pop
xor
hlt
push
mov
loopne
push
xor
xchg
and
lea
xchg
gs
aaa
or
xchg
mov
pop
std
lds
or
dec
retf
cmp
pop
in
sbb
scas
inc
add
test
mov
push
jmp
jo
mov
inc
popa
dec
xchg
push
(bad)
cld
(bad)
loop
xchg
and
cmp
xor
ins
aam
mov
stos
push
out
xchg
aam
sub
inc
test
and
not
or
(bad)
push
xchg
mov
(bad)
fsubr
xor
cmp
in
ds
push
shl
xchg
xchg
movs
call
cmps
into
mov
std
pop
xchg
cmp
and
stos
mov
adc
jnp
push
repz
shl
dec
ret
xchg
push
call
inc
gs
in
push
cmp
fwait
or
mov
stc
jmp
daa
add
mov
imul
push
and
cmc
inc
dec
add
ror
xchg
nop
(bad)
cmp
fwait
and
xor
push
gs
sub
pop
xor
stos
mov
jnp
xchg
mov
xlat
fldenv
aam
jno
jmp
stos
(bad)
sub
stos
xchg
sbb
add
hlt
push
and
(bad)
(bad)
not
push
push
mov
xchg
dec
in
pusha
sbb
xchg
shr
test
ror
or
lock
xchg
xlat
inc
ja
(bad)
push
pop
inc
xchg
retf
scas
xchg
fstp
adc
adc
cmp
(bad)
aaa
push
sub
call
call
mov
xchg
dec
cmp
or
rcr
mov
(bad)
pop
adc
add
sbb
sub
dec
lea
push
inc
mov
mov
xor
rcl
mov
and
mov
inc
mov
xchg
adc
sahf
sbb
frstor
push
mov
push
sub
outs
icebp
xchg
cmp
and
es
shl
or
pop
int
adc
cli
or
mov
dec
sbb
mov
jecxz
push
sub
mov
ins
xchg
adc
cli
icebp
(bad)
or
xchg
push
jnp
shr
push
pop
rol
not
cmp
xor
jecxz
into
fwait
xchg
inc
adc
jne
lock
imul
and
mov
mov
adc
mov
mov
(bad)
fst
jbe
int
paddq
xchg
inc
or
addr16
fcom
test
outs
mov
push
push
fwait
inc
push
xchg
sar
mov
xchg
outs
popf
sbb
retf
add
mov
pop
xchg
xor
test
jmp
xchg
pushf
clc
cwde
das
scas
push
inc
stc
xchg
or
dec
mov
fist
jmp
dec
xchg
pop
stos
cmp
sti
fcom
mov
in
dec
in
xchg
dec
cmp
adc
stos
mov
fwait
inc
loop
rcl
dec
scas
sbb
fs
adc
mov
add
xchg
jnp
add
adc
idiv
xchg
push
aas
outs
test
test
xchg
in
jo
pop
bound
daa
inc
mov
mov
fmul
mov
ret
adc
xchg
je
push
rcl
jae
loopne
xor
std
jno
mov
and
add
and
pushf
sbb
xchg
xor
cld
dec
cmp
repz
xchg
jg
shl
xor
call
stc
ss
xchg
imul
(bad)
push
xchg
or
and
xor
xor
inc
vmovups
repnz
jne
ror
add
mul
fwait
xchg
stc
and
adc
add
jnp
adc
mov
les
xchg
sub
js
mov
jae
xchg
push
stos
(bad)
repz
popa
xchg
mov
jle
test
add
cmc
sub
test
sbb
dec
xchg
add
loope
cmp
movs
xchg
mov
mov
inc
sbb
mov
pop
mov
adc
fwait
adc
push
mov
ret
pop
sub
add
dec
fs
jp
cmp
mov
pusha
and
sbb
xchg
dec
pop
cli
test
dec
push
pop
mov
mov
popf
adc
cmps
ins
(bad)
loopne
jns
sub
mov
mov
jmp
test
push
popf
cmp
mov
cld
fpatan
into
out
fwait
lods
dec
jne
mov
mov
push
push
push
fucomip
sbb
sahf
test
jb
sub
mov
sub
ret
mov
leave
in
mov
inc
adc
cmp
ins
xchg
shr
stos
mov
arpl
sti
out
(bad)
repz
sbb
iret
pop
inc
xchg
cmp
aam
stos
push
xchg
ret
fwait
xor
cli
aam
jno
ins
mov
mov
out
mov
add
xchg
mov
aas
rcr
push
movs
adc
stc
test
popf
sub
mov
aam
adc
mov
add
cwde
dec
cld
je
xchg
aad
mov
or
pop
fwait
repz
xor
jl
lock
xor
aam
hlt
jno
xchg
int
cmp
mov
arpl
fwait
xor
lods
jl
fild
cdq
(bad)
lahf
into
adc
pop
sbb
mov
mov
sub
rcr
mov
popa
mov
mov
xor
xchg
ret
test
loope
cs
in
ret
cmp
xchg
out
add
fcom
mov
leave
push
stc
rcr
mov
xchg
jl
(bad)
loopne
jne
mov
imul
das
mov
xchg
in
sub
sub
adc
das
sti
xchg
retw
mov
and
and
xchg
inc
sbb
outs
xor
jb
test
adc
test
rcr
push
xchg
out
outs
or
pop
sti
inc
hlt
fisub
push
movs
std
ins
fistp
xchg
ret
mov
gs
dec
xor
das
and
pushf
xchg
ret
xchg
cli
fimul
or
fist
retf
cmps
inc
in
sbb
xchg
imul
xchg
in
jecxz
xchg
js
shl
mov
stos
cmp
cmc
mov
je
xchg
into
les
xor
inc
or
add
xchg
int3
or
mov
test
xchg
and
jle
loopne
fld
jb
xor
iret
gs
fs
xchg
dec
jecxz
outs
dec
xlat
cdq
mov
cmp
ret
leave
jmp
dec
sbb
pop
sar
leave
jmp
pop
add
dec
add
xchg
mov
ja
xchg
loop
(bad)
retf
je
dec
add
out
or
call
dec
jmp
jns
cwde
push
mov
add
mov
adc
pushf
push
addr16
repnz
neg
retf
fwait
fs
enter
retf
push
add
cmp
outs
push
sub
cs
es
mov
aam
stc
pop
xchg
ds
js
ficomp
xor
rol
ror
push
out
shl
and
daa
imul
fwait
pminub
dec
mov
je
sahf
xchg
pusha
cmps
retf
je
aaa
pop
mov
jnp
jns
loope
inc
xchg
aas
jbe
xor
sbb
pop
mov
push
cmc
xlat
cmp
rcl
xchg
fild
pop
pop
(bad)
ret
push
jbe
xchg
xlat
sar
mov
xchg
cmp
cmp
mov
adc
(bad)
jp
pop
retf
mov
and
sub
jle
hlt
xchg
jo
sub
xchg
sti
sahf
test
(bad)
xchg
sub
add
inc
mov
mov
call
xchg
out
xchg
xor
ins
adc
(bad)
xchg
push
adc
mov
clc
pop
in
mov
lds
xlat
int3
rcl
cmp
sub
xchg
push
cmps
jno
push
imul
push
aaa
pop
cwde
or
mov
jl
xchg
cmp
ret
ins
lea
es
mov
repnz
mov
sbb
add
mov
nop
cmp
test
test
mov
and
xchg
and
je
(bad)
xchg
and
inc
mov
lods
div
pop
push
outs
or
fwait
adc
dec
sub
pop
xchg
xchg
int3
pop
sar
jnp
aad
xor
push
xchg
mov
jne
push
bound
ja
iret
and
fcomp
pusha
repz
mov
xchg
push
inc
and
xchg
push
pop
jmp
(bad)
xor
fisubr
es
ret
xor
xchg
imul
sbb
ja
ins
cmc
inc
sub
xchg
xchg
ss
ficomp
adc
xchg
dec
push
or
popf
cmp
fs
rcl
xor
mov
fst
imul
loope
pop
pop
pushf
jno
jle
push
cmp
mov
dec
popa
cs
xchg
push
cmp
sub
hlt
jnp
adc
adc
mov
mov
mov
stos
xchg
(bad)
rcl
cmps
lds
dec
xchg
push
xor
int3
push
adc
sbb
(bad)
in
adc
jge
mov
test
imul
sbb
mov
ins
xchg
xchg
jns
fistp
mov
out
push
test
jnp
xor
cmp
jge
pop
mov
mov
xchg
ss
stc
jb
cmps
fwait
xchg
in
sbb
cmp
sub
retf
iret
std
loop
cmp
popf
outs
(bad)
cld
sbb
and
pushf
sbb
cmp
jno
xchg
mov
outs
int
xchg
retf
(bad)
pushf
imul
sbb
ror
adc
xchg
adc
add
xchg
or
pusha
mov
jmp
mov
mov
jecxz
push
dec
(bad)
fs
mov
xchg
mov
or
sbb
pushf
inc
jmp
test
test
inc
cmp
int
xchg
test
hlt
pop
stos
or
pop
ins
adc
cdq
cmp
fidivr
and
loope
pop
enter
jno
retf
add
and
(bad)
arpl
popf
ss
mov
adc
int3
add
call
cmp
shl
imul
xchg
cmps
stc
mov
in
scas
icebp
xor
adc
(bad)
push
int3
in
pop
test
cmps
daa
xchg
jl
imul
nop
mov
adc
mov
or
ret
xchg
xor
dec
call
xchg
xlat
inc
dec
sbb
fidivr
mul
data16
movs
sbb
jg
dec
xor
je
retf
xchg
jae
mov
mov
add
aaa
jno
sub
sub
sbb
xchg
jecxz
fwait
pop
or
push
cmp
hlt
inc
shl
out
xchg
fnstcw
mov
sub
xchg
add
pusha
stos
fcmovnb
shr
mov
es
add
mov
aam
(bad)
dec
out
rcl
fst
test
out
xchg
inc
int
and
retf
test
call
rcr
test
mov
mov
cli
shl
popa
je
xchg
repnz
jno
mov
adc
dec
bound
xchg
gs
jno
xchg
and
outs
mov
mov
lds
xchg
mov
data16
cld
jle
xchg
sub
or
mov
out
inc
(bad)
jge
lock
loop
mov
push
ins
cs
xchg
mov
leave
sbb
ins
movs
and
lds
les
xchg
or
push
jmp
iret
(bad)
addr16
loopne
test
cmps
mov
gs
jo
call
and
mov
mov
mov
repz
push
(bad)
jbe
jnp
outs
clc
jae
sbb
and
mov
popa
cld
fimul
int
daa
mov
and
xchg
add
dec
ret
mov
out
mov
cli
test
xchg
pop
or
or
xchg
jle
adc
cmc
push
push
xchg
inc
inc
mov
push
jl
xchg
fst
ret
sbb
movs
xchg
mov
loop
mov
push
dec
push
xchg
imul
sub
cmp
mov
inc
jnp
add
mov
and
dec
movs
sub
add
pop
out
jo
dec
xchg
mov
repnz
cmp
mov
jl
out
mov
addr16
pop
mov
aad
sti
xchg
ins
mov
and
cmps
es
inc
mul
mov
test
jmp
in
inc
jmp
loopne
xchg
iret
cli
enter
cmp
aam
or
bound
dec
sub
xchg
xor
stc
test
adc
mov
fs
retf
call
leave
das
xchg
push
jae
inc
xchg
push
add
mov
fs
sub
jle
in
xchg
mov
xchg
cmp
hlt
in
cs
ins
sub
xchg
add
(bad)
out
repz
add
xchg
out
(bad)
ficomp
cmp
cdq
stos
es
dec
and
xor
jne
in
sub
push
cld
cs
loope
or
jge
lahf
or
fld
dec
inc
mov
call
and
or
retf
cdq
rcr
cmc
xor
mov
int
aam
(bad)
mov
mov
add
xchg
pop
dec
inc
pop
je
mov
xchg
jno
push
jmp
mov
dec
or
xchg
xor
repz
mov
xchg
gs
or
jge
pop
lock
jp
fistp
xchg
adc
loopne
gs
dec
xchg
cld
sub
push
and
fwait
push
jge
dec
dec
adc
mov
sbb
adc
out
cmp
test
inc
out
mov
jns
dec
loop
into
fs
xchg
ds
mov
int3
rol
stos
and
xchg
or
sub
push
loope
int3
xchg
push
push
mov
repz
add
xor
rcr
ins
xchg
call
push
add
adc
arpl
in
int
stc
sub
xchg
mov
out
lock
imul
sub
outs
mov
call
sahf
icebp
dec
inc
add
stos
push
adc
inc
test
or
xor
push
xchg
xor
add
cwde
into
cmp
hlt
rol
mov
jp
xchg
sbb
push
push
xchg
sub
loope
test
sbb
sti
es
retf
push
xchg
std
clc
(bad)
adc
xchg
push
lds
inc
out
imul
jne
dec
bound
mov
mov
add
xchg
inc
movs
mov
mov
xchg
mov
call
mov
lar
leave
xchg
ret
push
test
jl
jnp
adc
dec
cmp
call
dec
fwait
je
scas
xchg
cmp
mov
pusha
push
and
xlat
(bad)
push
aad
xchg
popf
out
test
sbb
xchg
(bad)
cwde
push
push
outs
mov
dec
sbb
rcr
add
cwde
mov
xor
mov
ret
cmps
loope
sbb
sbb
jno
xor
pop
out
push
xchg
not
fbstp
stos
(bad)
jle
or
xchg
cmc
mov
or
mov
sbb
mov
(bad)
aaa
es
mov
cmc
xchg
and
jne
std
ins
in
xchg
adc
out
je
dec
jp
stos
jecxz
add
fst
adc
leave
clc
bound
sar
add
jae
call
push
mov
mov
sub
mov
cmp
cmp
sbb
icebp
add
fdiv
neg
hlt
setno
lods
test
mov
xchg
dec
xchg
add
jg
jmp
fwait
ror
add
xor
mov
xchg
aam
add
push
lahf
xor
mov
mov
or
scas
xchg
pop
or
fabs
mov
hlt
push
add
loopne
add
repz
xchg
jl
dec
mov
sub
jmp
(bad)
xchg
push
je
dec
shl
xor
mov
cdq
sub
xchg
dec
arpl
mov
into
inc
add
imul
cmp
rcr
xchg
jae
(bad)
jbe
inc
push
xchg
and
mov
sbb
jns
xchg
stos
dec
mov
lds
xor
pop
push
push
adc
test
xor
mov
scas
add
xchg
jmp
xchg
push
fisttp
imul
cmp
jo
mov
je
sbb
mov
leave
jbe
shl
aad
mov
dec
xor
xchg
xchg
jno
call
xchg
inc
inc
mov
mov
push
aaa
pop
xor
ret
pop
xchg
or
jmp
scas
mov
xchg
xchg
(bad)
fidivr
adc
xchg
jmp
push
lods
icebp
imul
push
mov
mov
movs
test
ss
nop
repnz
test
push
scas
into
sar
sub
jle
cmp
int3
hlt
sbb
popa
repz
aam
jl
pop
in
loope
fdivr
and
invd
and
scas
and
es
adc
shl
sub
sahf
pusha
daa
inc
xchg
dec
in
xchg
(bad)
loopne
mov
xchg
mov
cli
scas
vpcmpeqb
mov
xor
(bad)
fst
lods
faddp
and
xchg
push
pop
ins
lds
(bad)
into
or
pusha
push
xchg
mov
aam
ss
sub
int3
add
dec
dec
cmp
ret
(bad)
not
in
push
jl
xor
ss
pop
repnz
pop
rcl
fwait
inc
inc
or
lods
add
inc
pusha
xor
clc
and
adc
mov
enter
xchg
sub
imul
hlt
xchg
mov
xchg
imul
adc
inc
xchg
pop
aam
xchg
iret
imul
das
stc
pop
call
bound
sub
adc
mov
pop
cmps
xchg
(bad)
dec
daa
nop
dec
push
adc
push
shl
xor
test
mov
add
stos
push
dec
fisttp
leave
mov
(bad)
pop
push
xchg
int
rol
xchg
xchg
and
sbb
mov
retf
in
mov
xchg
mov
cwde
enter
aaa
xchg
movs
jmp
xchg
sbb
pop
test
jnp
push
mov
cmp
xor
push
loope
cli
addr16
mov
xor
inc
popf
jnp
xchg
mov
dec
inc
aad
xchg
fs
sbb
fs
retf
xchg
test
and
lahf
adc
les
mov
xchg
mov
rcr
ins
nop
sbb
dec
xchg
mov
add
xchg
cmp
adc
xchg
xchg
call
inc
add
and
xchg
test
push
jl
cli
pop
ins
xchg
inc
shr
idiv
push
pop
xchg
rcr
xchg
adc
ins
sbb
cli
jge
xchg
adc
cmp
sub
in
mov
and
or
jbe
call
push
out
leave
xchg
aad
dec
mov
faddp
jb
mov
cld
fadd
xchg
mov
(bad)
sub
adc
movs
push
cmp
push
or
xchg
inc
ins
mov
jns
inc
sbb
xchg
mov
in
test
mov
or
imul
or
sub
xlat
pop
xchg
adc
dec
or
je
add
xchg
cmp
mov
ds
mov
jne
xchg
or
pop
cmp
pusha
loopne
mov
aad
pop
lea
les
aam
loopne
sete
aaa
cmp
int3
xor
dec
dec
xchg
outs
pop
adc
xchg
fdivr
mov
fist
pop
sub
retf
add
xchg
in
xchg
mov
jle
add
mov
inc
push
adc
(bad)
mov
popa
xchg
dec
xor
mov
cmps
cwde
pusha
stos
jmp
popa
jp
add
xchg
out
push
mov
inc
jne
mov
adc
and
les
inc
sbb
jmp
stc
std
inc
xchg
sahf
mov
lea
aad
xchg
sar
js
adc
mov
xchg
adc
aaa
xor
hlt
fwait
and
int
xchg
inc
or
xchg
test
sub
js
pop
xchg
scas
xor
aad
inc
add
ja
sti
inc
mov
mov
add
xchg
shr
and
jmp
enter
mov
rcr
je
retf
fdivr
xor
cmp
(bad)
mov
xchg
les
adc
movs
loop
cld
bound
cmp
jbe
jl
xor
daa
out
in
dec
and
hlt
pop
mov
mov
mov
mov
dec
test
mov
pop
je
add
mov
leave
not
jmp
js
xchg
push
mov
(bad)
je
push
bound
xchg
in
fiadd
loop
and
and
xchg
std
mov
sbb
mov
test
jle
cmc
pop
rol
mov
sub
pop
push
pushf
fist
push
call
(bad)
sbb
push
xchg
outs
iret
ror
jecxz
jg
xchg
sar
lods
leave
lds
add
sbb
jmp
out
mov
xchg
mov
bound
add
inc
xchg
ficom
icebp
js
cwde
sar
push
pop
push
in
mov
xchg
test
cmp
xchg
or
sub
dec
adc
or
shl
fcom
adc
jp
mov
pop
add
movs
(bad)
xchg
add
sub
xchg
jl
and
cmp
setnp
aam
and
jne
retf
pusha
int
sub
xchg
(bad)
sar
mov
mov
addr16
fisttp
push
mov
bound
sbb
loopne
int
adc
push
and
xchg
mov
jnp
inc
mov
retf
jge
in
scas
xchg
xchg
inc
or
and
push
in
xchg
inc
adc
aaa
arpl
sete
(bad)
xor
hlt
aas
xchg
stc
pop
je
scas
loope
adc
inc
imul
jp
push
jb
popf
jmp
pop
fwait
pop
pop
mov
or
adc
xchg
imul
push
jns
in
ja
push
xchg
push
jb
xor
scas
xchg
jno
test
mov
lods
sahf
test
pop
cmp
inc
inc
xchg
dec
retf
call
xor
adc
(bad)
mov
pop
and
lods
push
xor
xchg
jnp
cmps
jns
push
nop
push
xchg
lock
(bad)
aad
fadd
xchg
cmp
adc
sbb
cmp
xor
xchg
push
fist
mov
xchg
sbb
xchg
add
push
and
xchg
cmp
rcl
adc
in
das
sbb
push
test
dec
hlt
xchg
inc
jbe
jne
adc
add
xchg
mov
dec
sar
int3
lahf
push
adc
pushf
dec
cwde
pop
cmps
retf
xchg
(bad)
popf
jne
push
icebp
in
lock
jno
(bad)
cmp
ret
xchg
mov
bound
outs
mov
mov
or
push
adc
dec
fst
push
(bad)
fstp
ins
xor
nop
lahf
je
cwde
or
cmp
cld
or
jbe
mov
rcl
push
sti
mov
ja
dec
pop
jecxz
mov
hlt
fwait
add
cmp
les
int
rol
fst
loopne
sub
add
arpl
call
or
cdq
mov
push
push
jo
xchg
sub
in
mul
mov
adc
(bad)
xchg
jmp
pop
cmp
xchg
outs
sbb
xor
popf
add
fmul
xor
push
xchg
ds
mov
gs
xchg
arpl
(bad)
loop
pop
xchg
out
add
loope
aas
mov
ret
fdiv
mov
hlt
xchg
mov
pop
adc
clc
imul
xchg
fcom
xor
push
xchg
gs
arpl
xlat
xchg
xchg
lds
or
adc
xchg
std
sub
(bad)
stc
xor
push
not
and
js
push
mov
mov
mov
arpl
inc
out
aas
lods
das
add
xchg
jbe
sub
imul
shr
adc
add
hlt
cwde
cld
xor
ret
mov
hlt
sbb
mov
lock
xchg
retf
cmp
call
lds
add
fisubr
sub
int3
xlat
xchg
(bad)
mov
jbe
xchg
xchg
xchg
xchg
and
xchg
cld
pop
daa
in
je
and
int
std
xlat
xchg
push
sub
xchg
js
addr16
add
xchg
inc
jnp
jl
sbb
cmp
adc
xchg
repz
cmp
mov
xchg
jle
in
(bad)
cmp
cmps
pusha
loope
popf
sub
xchg
xchg
adc
xchg
adc
test
fidivr
hlt
call
jle
xchg
mov
mov
or
int3
clc
mov
xchg
leave
cmp
scas
xor
sbb
xchg
mov
xor
push
or
jg
adc
ja
test
xchg
ret
mov
(bad)
sahf
and
fist
mov
xchg
js
add
mov
call
and
push
xchg
push
sbb
aas
(bad)
cmp
ret
jmp
adc
ss
sahf
(bad)
icebp
inc
enter
iret
push
push
xchg
test
xchg
or
pop
cli
fnstenv
call
jmp
xchg
mov
subps
loopne
das
iret
mov
and
aaa
adc
add
xchg
mov
cmp
mov
arpl
adc
push
sahf
xchg
call
fisubr
sbb
mov
or
jne
xlat
sub
sar
adc
loope
mov
adc
push
ds
sbb
hlt
cmp
shl
inc
popa
js
mov
mov
mov
loope
test
shl
inc
retf
mov
mov
dec
xchg
(bad)
cmps
das
call
xchg
push
xor
mov
cmps
cmps
mov
aam
stc
jge
scas
adc
push
pop
and
xchg
push
pop
in
xchg
dec
std
aam
les
fcomp
fcmovbe
test
outs
dec
adc
enter
pop
add
ret
out
pusha
xchg
pop
cmp
or
and
mov
adc
inc
add
aad
mov
pop
cli
cmp
cmp
cmp
jp
lock
xor
sar
xchg
jne
sbb
jmp
ror
sub
lock
mov
jnp
adc
rcl
sub
pop
xor
dec
es
xchg
sbb
call
loope
mov
inc
add
stos
xor
adc
push
clc
sahf
push
popa
nop
push
cwde
xchg
mov
pop
jno
sub
dec
or
scas
ins
dec
cmps
mov
mov
mov
or
out
mov
stc
xchg
les
mov
xchg
out
pop
inc
pop
jbe
xor
inc
mov
jmp
pop
xchg
lods
jb
sub
inc
push
scas
xchg
or
sbb
mov
jmp
mov
jns
into
sbb
inc
gs
add
xchg
xor
xchg
frstor
popf
pop
sar
and
xchg
fstp
pop
cmc
retf
xchg
pop
cmps
(bad)
jle
test
xor
pop
xchg
mov
mov
and
and
neg
adc
loop
std
gs
mov
popa
out
jb
push
jecxz
push
out
xchg
cmp
jp
inc
bound
cdq
in
popa
sbb
jg
cld
nop
or
xchg
jb
shl
test
dec
rcl
adc
pop
push
pusha
shr
(bad)
cmps
popa
push
adc
jnp
xchg
loope
mov
repz
xchg
sbb
inc
hlt
add
sti
push
xor
xchg
ins
mov
enter
xor
lahf
pop
addr16
pop
(bad)
mov
xchg
xchg
sub
mov
jl
repnz
das
add
int
data16
shl
stos
in
ins
xchg
cmp
pop
sbb
hlt
stc
push
push
xchg
and
test
cmp
xchg
xchg
pop
push
sbb
cld
repnz
mov
mov
(bad)
aad
mov
fwait
cmp
push
add
and
jbe
push
cs
movs
mov
xchg
jb
ss
sbb
sub
lock
cmp
rcl
lods
dec
inc
sub
mov
or
dec
outs
jmp
movs
xchg
mov
xchg
cmp
xchg
pushf
dec
inc
jl
xchg
mov
adc
pop
movs
jmp
xor
xchg
mov
stos
mov
fst
mov
xchg
jb
imul
ficom
cmp
mov
xor
ins
dec
jecxz
xor
dec
fistp
(bad)
adc
mov
inc
jae
inc
aam
inc
fmul
dec
adc
loop
mul
or
pop
jb
mov
cmp
nop
popa
out
fs
sti
and
mov
push
cmp
imul
xchg
sbb
aad
dec
xchg
fcomp
icebp
mov
xor
addr16
retf
repz
aam
imul
cmp
fdiv
push
mov
mov
movs
cmc
scas
xchg
mov
pop
xor
xchg
jbe
aad
adc
inc
push
xchg
ja
mul
(bad)
or
adc
fisttp
sti
jl
jns
and
push
or
mov
push
xor
rcl
scas
xchg
pop
loopne
xchg
xor
in
mov
mov
xchg
jmp
cld
out
mov
push
lds
cmp
out
sbb
push
ret
bound
cwde
push
dec
aad
jecxz
jge
test
fs
icebp
es
fisubr
xor
xchg
ja
sti
sub
nop
call
sbb
fwait
rol
in
xchg
(bad)
pop
mov
xchg
cmps
out
xchg
cs
pushf
adc
add
jns
cmp
fmulp
xchg
leave
mov
jbe
shr
xchg
cmc
ins
cli
fcom
sub
scas
add
hlt
xchg
int
xchg
dec
into
mov
xchg
xchg
or
xor
jmp
pop
mov
in
jb
fmul
sbb
xchg
cmp
shr
nop
dec
xchg
xchg
loope
xchg
cmp
and
mov
sbb
imul
xchg
icebp
dec
mov
pop
push
shl
sbb
xor
and
inc
xchg
fst
(bad)
jl
or
mov
push
mov
in
xor
inc
cwde
leave
dec
cmp
(bad)
cmp
adc
adc
ins
or
div
add
inc
xchg
movs
int3
dec
push
in
int
add
stc
into
and
lods
movs
or
pop
xor
xchg
(bad)
pusha
mov
inc
lea
cld
xchg
fisub
fist
movs
xchg
push
jmp
into
and
adc
mov
je
into
cdq
xchg
ja
ins
xchg
mov
xchg
jmp
xor
dec
repz
std
push
add
xchg
xchg
jno
clc
test
lods
(bad)
rcr
cli
push
adc
(bad)
jns
and
adc
fcomp
sahf
xchg
push
retf
xchg
aad
or
push
shl
retf
xchg
dec
in
lea
scas
xchg
pop
xchg
xchg
xchg
cmps
fisttp
add
movs
fstp
pop
es
scas
gs
in
push
pop
sbb
mov
dec
lgs
mov
aam
imul
and
fst
jmp
ss
add
pop
push
out
cdq
xlat
sti
mov
pop
cmp
loopne
or
ficom
lds
repnz
in
xchg
test
mov
xchg
ss
xchg
xor
mov
mov
mov
bound
add
mov
mov
in
xchg
nop
push
fmul
push
lahf
icebp
jne
pop
xchg
xchg
push
mov
imul
push
out
xor
sub
lahf
mov
mov
sti
mov
imul
jmp
aas
rcl
inc
std
ficomp
jbe
xchg
add
fldcw
cmc
mov
sub
jg
jo
xchg
scas
les
sbb
cli
adc
popf
je
sbb
dec
mov
aam
mov
adc
mov
cwde
inc
dec
sbb
push
pop
das
je
push
mov
icebp
and
xchg
fmul
mov
aaa
sar
xchg
cmps
(bad)
loope
xor
fwait
rol
ss
xchg
sub
aam
xchg
xchg
js
push
xchg
jno
gs
push
mov
bound
xor
call
dec
jl
aam
je
cmps
jnp
or
cmp
aad
movs
call
cdq
mov
cwde
xlat
scas
sbb
pop
adc
test
xchg
aad
fild
rol
sahf
or
adc
xchg
xchg
sub
dec
xchg
ss
pop
shl
sahf
sar
lahf
popa
scas
jl
adc
int
jg
fwait
ins
retf
fnsave
or
clc
pop
lahf
adc
pop
test
jmp
inc
ror
fwait
movs
push
mov
sub
test
lods
xchg
sub
cmp
inc
(bad)
pop
jnp
pop
mov
xor
mov
adc
xchg
mov
jle
adc
xchg
cmp
stos
enter
cli
sahf
call
pop
adc
and
inc
xchg
das
lods
aad
call
push
cmp
xchg
stos
mov
cmp
fcomp
pop
jns
mov
xchg
or
shl
inc
push
arpl
test
fist
retf
xchg
jmp
dec
cld
jmp
sub
sub
and
(bad)
iret
mov
lds
xchg
rcl
xchg
retf
iret
out
aas
dec
xchg
fwait
imul
ret
inc
adc
sbb
bound
or
neg
lahf
hlt
bound
mov
test
mov
xchg
cmc
mov
mov
xchg
cli
sti
repnz
sbb
bound
sbb
mov
xchg
repnz
xchg
xchg
lods
inc
mov
xchg
push
stc
movs
div
inc
xchg
call
inc
rol
ret
sbb
xchg
jg
push
aaa
inc
cdq
out
mov
sbb
cmc
push
icebp
xchg
or
out
cmp
popf
sbb
js
ds
ja
cld
xchg
movs
mov
xor
jmp
push
clc
xchg
out
(bad)
xchg
aam
and
and
mov
in
xchg
pop
retf
sbb
iret
add
sar
lock
mov
call
push
arpl
stos
in
retf
xchg
fisttp
sbb
popf
repz
(bad)
push
cli
add
adc
xchg
mov
mov
mov
xor
cmp
sar
ficom
xchg
test
pop
ins
jg
mov
dec
js
int
cmp
push
cs
cmps
ret
xchg
mov
inc
xchg
xor
pusha
jns
rcl
xchg
push
xchg
lea
push
imul
lahf
add
xchg
inc
aad
les
xchg
sbb
fidivr
cdq
and
adc
sub
or
cli
mov
call
push
cmp
mov
dec
xchg
mov
cld
fisub
mov
inc
adc
retf
push
leave
cmp
xchg
fsincos
xchg
xchg
inc
(bad)
or
stos
mov
hlt
cmp
push
ss
bound
ret
ins
mov
les
push
fldenv
adc
cs
sub
fwait
sbb
clc
mul
ins
sbb
call
jne
mov
data16
iret
aas
idiv
or
test
mov
dec
data16
adc
xchg
retf
and
(bad)
xchg
xchg
push
mov
or
(bad)
rcr
mov
add
mov
sbb
repz
xchg
rcl
xchg
xchg
cli
jno
(bad)
sti
sahf
xor
push
inc
aas
repz
mov
cmc
movs
in
lods
cmp
push
movs
mov
ltr
pop
aas
inc
pop
fwait
ins
jle
xchg
repnz
mov
xchg
mov
or
sar
mov
push
add
jg
mov
push
xchg
sub
jbe
les
(bad)
mov
hlt
aam
add
shl
mov
xchg
push
stc
icebp
fdiv
push
sar
movsx
das
dec
cld
xchg
(bad)
pop
add
test
inc
mov
out
xlat
jp
adc
mov
add
cmps
fist
and
xchg
icebp
into
mov
mov
iret
jle
adc
retf
dec
hlt
mov
xor
xchg
fisubr
inc
push
sub
xchg
dec
jle
lahf
cdq
add
push
adc
pop
stos
cs
xor
cmps
outs
fcom
aas
test
les
mov
mov
leave
and
inc
test
push
inc
pop
push
lahf
aas
jno
mov
pop
ret
retf
lds
adc
xchg
inc
(bad)
sbb
xchg
mov
cmps
loopne
ja
inc
mov
adc
xchg
call
push
dec
int3
cdq
and
shl
ins
jae
call
push
sub
cmps
fdiv
ins
push
cmc
add
mov
xchg
jp
(bad)
or
mov
jmp
xlat
pop
mov
adc
adc
mov
dec
dec
mov
movs
add
outs
adc
fisubr
ror
jle
jmp
pusha
out
push
iret
jg
jne
ja
and
shr
stos
loopne
jo
xchg
dec
popf
cmp
xor
dec
push
jns
mov
pop
out
mov
xor
fs
mov
fst
sub
lock
mov
loopne
xchg
ins
jmp
push
mov
pop
dec
not
jno
inc
xchg
test
xlat
test
jmp
add
and
lock
pop
popa
mov
xlat
and
jle
pop
xchg
sub
cmp
outs
jmp
js
sbb
lahf
fwait
ja
xor
aas
test
ins
imul
or
adc
ret
nop
xchg
add
cdq
xchg
cwde
and
xchg
ficom
or
push
xchg
les
(bad)
or
inc
dec
xchg
fcomp
push
xchg
inc
fldenv
mov
jnp
xchg
jbe
sar
adc
or
xchg
(bad)
lea
mov
mov
lods
das
rcr
call
cmps
mov
dec
jecxz
pop
push
sub
scas
xor
jmp
int3
pop
fs
mov
fadd
cdq
out
add
xchg
(bad)
dec
sbb
xchg
ins
not
lds
into
pop
jae
xchg
mov
loop
mov
mov
jmp
mov
rcl
adc
leave
int3
les
shl
adc
popf
inc
ret
jae
add
sbb
iret
daa
mov
pop
xchg
jno
push
xchg
or
jns
enter
xchg
mov
jg
jle
dec
data16
es
and
mov
and
mov
xchg
daa
sbb
push
aad
aam
shl
dec
sub
sub
jl
fwait
mov
mov
js
fs
adc
mov
inc
xchg
out
leave
jo
std
out
xchg
arpl
sbb
push
ret
add
fmul
jae
add
or
pusha
xchg
rol
retf
add
push
jae
fs
xchg
jnp
mov
mov
les
jl
sub
lock
lods
dec
xchg
shr
call
rcr
test
xchg
jno
aad
loope
ins
ficom
mov
xor
cs
cmps
push
sbb
out
xchg
repnz
outs
ret
mov
jle
in
les
and
(bad)
neg
xchg
cmps
add
push
jo
mov
sbb
outs
popa
jbe
shl
rol
sete
das
xor
(bad)
mov
mov
mov
sahf
pop
(bad)
jp
jg
dec
xchg
popf
pop
rcr
push
and
xchg
mov
in
xchg
pop
cmps
inc
jg
adc
into
jecxz
enter
fistp
in
or
xchg
js
(bad)
push
(bad)
xchg
dec
xor
fistp
xchg
add
pop
xchg
jne
popf
cdq
test
mov
sub
push
out
mov
adc
or
cmp
add
push
jge
pop
xchg
xchg
ss
push
lods
mov
adc
jecxz
mov
sti
pop
xchg
inc
stc
lock
bts
inc
aam
cmp
outs
outs
mov
push
xor
outs
push
xchg
(bad)
pop
fldcw
sbb
bound
mov
add
ret
push
xchg
and
xlat
pop
stos
ja
jmp
loope
test
jmp
xchg
loop
adc
xchg
jae
push
xchg
sbb
or
add
cld
inc
arpl
(bad)
jno
adc
cmc
mov
in
pop
mov
mov
mov
test
(bad)
xchg
sub
repnz
jge
aam
add
scas
ret
pusha
xchg
xchg
fld
fsubr
js
xchg
in
add
xchg
test
mov
dec
mov
or
jb
lods
bound
xor
and
xor
ficom
addr16
jmp
xchg
shl
add
mov
pop
out
xchg
jae
icebp
std
sbb
xchg
cmc
cld
or
jg
xchg
mov
add
test
xlat
mov
mov
inc
inc
fild
or
jnp
push
shl
fwait
out
sahf
fiadd
lods
ret
pop
add
pop
push
fsub
mov
adc
daa
xor
adc
mov
int
rcl
ins
pop
cs
arpl
adc
aas
mov
sbb
loop
or
xchg
push
ins
stos
adc
(bad)
test
sub
add
ins
cmps
or
aas
xchg
inc
dec
mov
(bad)
xchg
or
jbe
xchg
rcl
add
mov
sub
enter
xchg
std
pop
cwde
cmp
push
mov
sbb
xchg
mov
not
sub
push
xchg
xchg
enter
cmp
retf
cmp
push
inc
movs
pushf
sahf
mov
fbld
jns
dec
jnp
xchg
xchg
in
bound
rcl
add
cmps
(bad)
mov
inc
pop
xchg
(bad)
std
(bad)
in
(bad)
dec
sbb
cmc
out
ins
inc
out
xchg
or
fwait
enter
daa
xchg
lods
jmp
mov
push
movs
and
adc
ret
inc
outs
lea
push
xor
loopne
scas
mov
inc
ret
outs
nop
mov
and
outs
push
retf
xchg
out
ja
aad
push
push
(bad)
fldcw
or
xchg
(bad)
mov
jns
mov
nop
sbb
fdivr
xchg
mov
mov
jecxz
arpl
xchg
sbb
jae
test
xchg
lea
or
lock
mov
xchg
aas
adc
mov
popf
es
mov
cmp
cmp
xchg
js
aad
pop
imul
or
ret
mov
jbe
sbb
call
sahf
aam
xchg
ss
jg
cmp
addr16
cld
xchg
mov
retf
int
xchg
push
ficomp
xchg
out
jno
xor
adc
in
(bad)
cmp
leave
movs
xchg
cmp
into
out
(bad)
test
mov
out
mov
pop
push
fwait
push
xchg
sub
sub
inc
sbb
xchg
gs
popf
cmps
and
leave
or
test
loope
pop
mov
or
mov
xchg
fdivrp
popa
cdq
int
outs
les
lahf
pop
dec
pop
mov
sbb
or
js
aaa
fwait
jo
test
adc
dec
jbe
xlat
shl
repnz
adc
sub
mov
sbb
dec
push
push
pusha
clc
mov
xchg
adc
push
xchg
pop
iret
sbb
lds
mov
xchg
cdq
and
(bad)
push
adc
test
hlt
push
cmps
or
xchg
mov
sub
xchg
test
movs
shl
ja
or
dec
jns
in
scas
mov
push
mov
popf
arpl
cmp
push
rcr
cwde
xlat
xchg
rcl
je
xchg
add
jae
call
jge
cmp
push
sub
adc
imul
ins
cld
xchg
push
in
cs
sub
div
pop
mov
xchg
mov
pop
dec
mov
fcmovnbe
pop
mov
pop
pop
inc
inc
xor
mov
dec
jge
xchg
or
cmp
cmps
push
icebp
nop
sub
jle
xchg
daa
and
mov
das
rcl
dec
inc
inc
xlat
call
pusha
xor
clc
xchg
out
add
idiv
imul
jle
or
push
lods
adc
scas
sub
pop
xchg
jae
sub
sub
push
in
adc
mov
inc
and
jmp
jnp
mov
mov
and
popa
inc
push
cdq
cmp
test
jg
xchg
pop
and
stc
stos
or
call
nop
xor
mov
mov
movs
pop
jae
mov
fstp
(bad)
je
cmp
fwait
mov
sbb
loope
and
inc
nop
mov
pop
mov
addr16
xor
loop
push
xchg
mov
add
xchg
mov
ret
jno
fisub
dec
mov
cmp
out
test
cmp
in
cdq
fidiv
inc
mov
loopne
fist
jl
lods
xchg
jg
aam
jp
fidiv
mov
mov
(bad)
int3
test
and
push
adc
add
shl
adc
mov
push
xchg
daa
(bad)
bound
and
push
push
nop
sti
xchg
dec
mov
or
mov
or
in
add
xchg
jo
fwait
pop
adc
fld
and
mov
enter
xchg
jmp
js
iret
xchg
xor
inc
mov
int3
in
xchg
mov
push
enter
or
sar
xchg
or
xchg
adc
mov
xchg
dec
loope
push
test
test
pop
sub
cdq
push
cmp
icebp
push
mov
test
mov
xchg
int3
aam
call
xchg
adc
jnp
or
ror
fcom
mov
jmp
out
xchg
repnz
mov
movs
andnps
hlt
sahf
fst
xchg
test
int
out
mov
xchg
pop
xlat
jae
stos
cwde
cmp
push
inc
xchg
push
jg
aas
pop
jo
in
jns
adc
push
mov
fwait
clc
adc
sub
(bad)
in
retf
mov
das
loope
ins
adc
dec
jnp
inc
push
add
into
(bad)
push
test
pop
shl
cmps
xor
pushf
push
xchg
int
cld
and
xchg
or
rcl
xor
pop
bound
add
pop
jmp
leave
jmp
loop
cmp
pop
stos
fs
xchg
cmc
push
xchg
in
jns
inc
mov
xor
ret
adc
xor
xchg
xchg
pop
fild
pop
pop
repz
inc
pop
xor
pop
imul
xchg
cld
test
or
jo
lahf
jecxz
push
inc
xchg
lods
sahf
add
push
push
mov
xor
pop
mov
xor
sbb
sbb
adc
mov
or
xchg
dec
ss
add
cmps
in
push
adc
dec
mov
sub
mov
cmp
push
cmp
stos
inc
cmp
pop
add
xchg
xchg
pop
stos
out
xchg
fcmovnbe
xchg
call
lahf
(bad)
inc
adc
or
add
lea
xchg
cmp
push
xchg
mov
dec
mov
fld
push
xchg
sbb
out
sbb
bound
inc
inc
in
stc
xchg
mov
xchg
ret
cmps
mov
ror
xchg
xchg
push
mov
xlat
push
add
mov
loope
aam
pop
dec
cmp
js
mov
mov
cmp
ins
lods
psrlw
shl
push
fwait
cdq
inc
(bad)
sbb
mov
mov
aaa
xchg
xor
xchg
icebp
clc
xchg
iret
mov
int
daa
or
je
push
xchg
push
pop
jg
add
mov
int3
add
xchg
imul
shr
add
gs
aam
rcr
jmp
les
xchg
mov
adc
js
add
fdivr
(bad)
xchg
cmp
loopne
mov
sub
sahf
push
jb
cmps
xchg
fwait
sbb
das
aam
xor
inc
sub
hlt
or
xchg
ror
mov
jl
xchg
mov
sub
sub
xchg
pusha
push
pop
xchg
into
cli
in
std
xchg
add
rcl
dec
cdq
mov
adc
jecxz
popf
xchg
xor
out
push
mov
pop
nop
xchg
dec
lea
mov
fnstsw
cmp
push
add
cmp
fsub
je
fcom
and
jmp
adc
aad
push
outs
into
retf
loopne
dec
fwait
xchg
stos
pop
adc
call
ret
ficomp
in
sub
pop
or
push
inc
xchg
sar
cs
les
xchg
(bad)
jnp
xor
cmp
pop
inc
and
gs
xchg
xchg
hlt
mov
daa
loopne
cmp
jb
aad
fwait
movs
or
daa
les
pop
aam
fwait
rol
sbb
fs
je
xchg
addr16
jmp
xchg
and
and
or
scas
cmp
pop
cmps
es
xchg
dec
mov
push
les
addr16
xchg
fdiv
and
lock
inc
pop
jecxz
aam
sbb
mov
pushf
cdq
xchg
cs
aaa
inc
into
cmp
mov
aas
in
mov
(bad)
jnp
dec
repnz
mov
jg
std
mov
sub
out
pop
mov
push
cdq
pop
cmp
push
inc
rcl
sbb
pop
xor
int3
leave
test
stc
xchg
cmc
popa
addr16
cmps
xchg
hlt
xor
js
jmp
arpl
imul
and
and
lods
mov
sbb
push
mov
pop
lea
xorps
lods
xchg
(bad)
div
push
jb
das
test
xbegin
jp
xchg
mov
jmp
xor
pop
mov
xor
jp
test
adc
arpl
ss
jns
adc
or
test
lock
dec
xor
loope
xor
sbb
cmp
fstp
mov
popa
push
mov
add
js
push
out
xchg
dec
inc
inc
sbb
xchg
jnp
inc
mov
xchg
push
or
arpl
sub
lock
and
xchg
adc
push
enter
xor
fcom
mov
out
loopne
xlat
mov
pop
sub
lods
icebp
xchg
push
retf
aas
cmova
test
cmps
or
xchg
sbb
fwait
push
xchg
clc
inc
inc
mov
fs
inc
pop
adc
test
or
daa
jbe
aas
repnz
sbb
out
(bad)
jns
pop
jmp
mov
cmp
jp
test
dec
shr
mov
jmp
sub
xchg
push
sbb
inc
jne
ficom
enter
push
pop
stc
cmp
dec
div
mov
hlt
jp
mov
inc
cld
sar
jns
js
dec
xchg
xor
sbb
jnp
bound
and
lock
movs
pop
fwait
gs
xchg
psrad
fcomp
jbe
js
xor
xlat
scas
mov
movs
popf
sbb
push
adc
out
int
xchg
xchg
sub
leave
hlt
push
cwde
xchg
mov
cmps
sub
mov
mov
pop
test
mov
ja
scas
mov
xor
inc
adc
mov
xchg
ins
and
std
mov
(bad)
sub
push
fdiv
inc
dec
jmp
fwait
outs
mov
dec
mov
xor
sahf
popa
dec
xor
mov
push
movs
jo
mov
addr16
adc
shl
test
push
gs
xchg
inc
sbb
cs
fsubr
ss
rcl
xchg
out
cmp
push
xchg
push
adc
sbb
loopne
jb
(bad)
aaa
rcr
fwait
outs
nop
push
xchg
xor
jnp
mov
pushf
or
pop
jb
icebp
xchg
and
xchg
adc
je
inc
mov
jae
adc
aad
add
xor
xchg
out
cs
out
loop
sti
adc
retf
pop
ss
pop
movs
mov
outs
fsubr
jp
mov
adc
and
xchg
(bad)
cli
mov
xchg
sub
arpl
aas
xchg
mov
aaa
lock
xchg
int
dec
jp
mov
xchg
(bad)
out
imul
pop
sbb
adc
push
clc
not
xchg
popa
lea
xchg
dec
fsubr
rcl
jo
inc
push
je
dec
xchg
out
mov
cmp
cmps
mov
push
sbb
mov
imul
enter
xchg
pop
xor
outs
xchg
es
(bad)
div
cs
inc
cmp
stos
push
call
repz
fld
call
mov
btc
dec
xor
xchg
mov
out
mov
ins
sti
jbe
lds
cmp
inc
test
sub
jne
sbb
fnstcw
aaa
mov
stos
into
daa
pop
je
xor
mov
push
add
mov
and
test
xchg
cmp
xchg
xchg
xlat
in
pop
imul
xchg
push
popf
loop
adc
push
mov
mov
adc
mov
bound
dec
xchg
cmc
lods
fisubr
sbb
sub
ins
mov
add
shl
rcl
aad
xchg
push
stos
xor
cld
xchg
adc
sbb
cmpxchg
mov
xchg
dec
jle
sub
xchg
js
and
or
jne
ror
loopne
xchg
aad
jb
cmps
mov
mov
cmp
mov
jmp
push
pushf
(bad)
push
retf
xlat
nop
inc
xchg
and
fadd
mov
push
cmp
add
xchg
inc
in
loope
std
inc
push
xchg
into
bound
outs
dec
das
and
cmp
mov
cwde
xchg
cmps
xchg
in
les
int3
xor
xchg
test
xchg
jp
arpl
xchg
xchg
cmc
scas
das
sbb
xchg
sub
push
stc
loop
lods
inc
xchg
jb
inc
push
sub
int
push
pop
or
mov
fst
xchg
fwait
outs
inc
push
cmp
or
not
and
sahf
ficomp
icebp
ja
repz
jp
cmp
pop
fwait
je
mov
pop
adc
dec
(bad)
sub
push
xchg
movs
xchg
(bad)
in
pop
je
outs
call
pop
inc
mov
jp
scas
mov
inc
sub
mov
xchg
div
vmovntdq
popf
outs
dec
adc
or
outs
ins
push
xchg
jbe
push
and
and
sbb
scas
cmps
or
add
test
lods
sub
repnz
(bad)
movs
jle
jp
mov
out
pop
data16
dec
push
int
push
xchg
cmp
rcr
xchg
cmps
xor
cld
jecxz
inc
mov
loope
or
push
mov
(bad)
fldcw
jmp
ja
aaa
push
jecxz
mov
sbb
aam
dec
adc
xchg
or
dec
dec
mov
xchg
mov
adc
mov
jmp
inc
neg
xchg
add
js
outs
cwde
mov
inc
xchg
sbb
int3
rcl
push
dec
jns
and
inc
sti
add
pop
xchg
int
add
pusha
arpl
pop
xchg
xor
(bad)
pushf
and
imul
jmp
mov
xchg
fidivr
fs
jge
xor
nop
or
stos
push
cmc
mov
fwait
cdq
pop
(bad)
in
stc
cmp
xor
add
push
pop
sub
cs
and
mov
adc
je
adc
mov
je
add
ja
cmp
inc
jl
cmc
stc
adc
fisttp
xchg
icebp
loop
mov
jmp
in
aad
arpl
iret
xchg
jmp
cdq
add
xchg
dec
int
gs
sbb
lea
(bad)
(bad)
add
fmul
fwait
or
pop
jb
xor
fs
pop
sbb
dec
xchg
fstp
repnz
ds
arpl
ror
dec
and
mov
jecxz
dec
push
out
ror
add
cdq
or
hlt
jnp
xchg
cmp
ins
sar
lods
mov
and
aam
mov
out
adc
add
hlt
popf
xor
or
xchg
test
mov
pop
xchg
adc
xchg
je
(bad)
bound
mov
fnstenv
or
call
mov
not
dec
xchg
jne
jb
inc
sbb
movs
jbe
xchg
jno
loop
jns
mov
mov
xchg
fimul
js
xchg
pop
inc
iret
retf
fs
(bad)
out
xchg
or
(bad)
cmc
jno
jmp
adc
push
(bad)
in
and
cmp
sbb
js
lahf
mov
and
es
js
jns
cmp
call
imul
mov
jg
sbb
retf
mov
pop
cmp
mov
fist
fisttp
and
cwde
out
pop
aaa
cdq
xchg
jp
rol
pop
fcmovnu
mov
push
movs
mov
adc
leave
add
sbb
push
call
shl
adc
sbb
into
mov
xchg
jge
xor
sti
dec
not
nop
fisttp
push
add
xor
sub
sbb
sahf
popf
pop
xchg
rol
adc
cs
or
test
mov
fsub
push
mov
mov
inc
cmp
add
hlt
mov
aam
mov
inc
pop
jmp
xchg
(bad)
mov
mov
dec
(bad)
mov
add
loope
mov
cmp
arpl
call
adc
mov
sbb
add
jp
es
nop
je
xor
dec
sub
mov
cmc
or
pop
push
cmps
repnz
pop
rcl
fstp
cmc
in
int
xchg
xor
popa
mov
lods
(bad)
xchg
or
jl
jecxz
cmp
jmp
jno
mov
gs
sbb
jle
int
lea
add
fwait
sub
or
xor
scas
jecxz
fist
test
and
push
and
pusha
sbb
loopne
pop
cmp
gs
or
xchg
rcl
push
mov
xchg
sub
pop
(bad)
frstor
test
xchg
sbb
arpl
sbb
shl
(bad)
mov
or
or
cmps
(bad)
add
sub
repz
push
mov
xor
fiadd
mov
pop
into
or
xchg
xchg
or
mov
xchg
cdq
cmps
hlt
sub
jge
mov
xchg
cmp
inc
nop
stos
add
xchg
aas
mov
inc
xchg
ret
cmp
(bad)
rcl
mov
mov
stos
xchg
push
div
ficom
xor
push
and
and
cmp
ins
fdivp
adc
xchg
xlat
jbe
xor
shr
push
mov
sub
in
jge
and
push
inc
push
xchg
hlt
(bad)
ror
xchg
add
sub
pop
add
hlt
or
inc
mov
adc
sahf
sub
mov
or
je
into
dec
pop
push
xchg
xchg
lods
loop
js
and
and
aad
pushf
inc
fadd
adc
cmc
push
or
loopne
xchg
mov
mov
or
rol
xchg
bnd
sahf
or
xchg
mov
fistp
xchg
push
mov
imul
stc
push
in
push
inc
iret
xor
cmp
sub
call
daa
or
mov
mov
stos
in
std
fild
out
sub
adc
and
retf
xchg
lds
jns
sbb
aam
xor
jne
popa
fcom
dec
mov
xchg
push
stos
add
xchg
fiadd
nop
shr
test
xchg
test
or
neg
dec
xchg
aas
retf
rcl
mov
enter
add
xchg
(bad)
movs
xchg
add
call
les
shl
xchg
fimul
nop
lods
(bad)
hlt
xchg
mov
mov
out
les
dec
xor
test
ficomp
aaa
test
call
xchg
dec
ret
jb
icebp
clc
jecxz
mov
mov
cmp
iret
pop
xchg
xchg
retf
in
adc
xchg
jg
das
sub
jno
jbe
int
aam
and
gs
adc
xchg
mov
mov
ja
push
push
outs
cdq
mov
jnp
imul
fwait
ins
xor
push
jne
cmp
int3
mov
push
test
mov
fcmovne
rcl
ds
mov
adc
and
rcr
icebp
stos
xlat
sar
cmp
cmp
xchg
xchg
jmp
nop
xchg
xchg
inc
jbe
dec
iret
fcomp
mov
push
loopne
pop
adc
xor
xchg
pop
xchg
ret
xchg
data16
pop
or
and
rep
push
into
inc
xchg
leave
pop
cwde
sub
imul
jns
mov
ins
int
jo
xchg
mov
pop
inc
mul
je
rcl
xchg
test
mov
jnp
and
sti
mov
cli
(bad)
mov
xchg
inc
icebp
aaa
jnp
call
shl
sbb
pusha
xchg
add
dec
dec
mov
shr
xchg
dec
sub
stc
jno
pusha
popf
push
movs
add
cdq
fadd
arpl
sbb
and
scas
xchg
xor
dec
mov
repz
mov
mov
in
rcl
das
or
lock
adc
pop
daa
in
xchg
retf
loopne
movs
adc
out
aad
pop
dec
mov
fmulp
cmp
jbe
jno
clc
mov
ret
mov
xchg
pop
inc
push
jg
aad
into
xchg
and
les
sar
xchg
sub
or
xchg
mov
cli
cmp
cmp
xchg
sub
jmp
stc
mov
mov
xchg
cmps
and
bound
test
adc
stos
sub
or
stos
out
test
jecxz
cmp
add
ffree
mov
lods
retf
dec
xlat
cmps
sbb
bound
adc
dec
int3
or
mov
xchg
in
mov
das
outs
xchg
xchg
xchg
iret
jl
fstp
pop
movs
pop
in
or
inc
and
and
popa
loopne
jle
scas
xchg
jno
jae
aad
cmp
mov
cld
push
xchg
xor
iret
inc
push
jge
int3
xchg
rol
hlt
xor
mov
cmps
fwait
or
adc
mov
pop
dec
mov
enter
jnp
mov
les
bound
data16
xor
push
jecxz
dec
adc
xchg
outs
sti
ret
jnp
push
xchg
mov
xchg
cmp
cmp
push
xor
inc
(bad)
lds
xchg
in
movs
dec
adc
clc
shr
lss
xchg
cli
push
fst
gs
sbb
stos
xchg
and
sub
xchg
test
je
pop
fsub
fs
mov
mov
(bad)
jg
je
jp
xchg
es
data16
or
fbstp
xor
and
push
jmp
xchg
inc
mov
out
pop
and
inc
lahf
xchg
or
sub
inc
xor
xchg
leave
out
in
and
add
retf
(bad)
jmp
jp
ja
hlt
mov
lods
mov
xchg
data16
or
dec
xchg
sbb
mov
cmps
je
xchg
dec
mov
add
cmp
nop
daa
xchg
push
lds
mov
jne
jle
pop
add
xchg
dec
adc
sbb
imul
adc
out
pop
xchg
dec
call
mov
sub
push
and
mov
sbb
xchg
inc
popf
data16
sub
xchg
xchg
test
xor
sti
ja
xchg
mov
mov
mov
sar
(bad)
ret
outs
mov
sub
add
test
dec
jge
xchg
pop
or
push
sbb
mov
into
add
pop
ror
mov
add
cmp
dec
inc
in
mov
and
stos
repz
rcr
push
pop
dec
pushf
pop
inc
mov
inc
adc
test
add
jne
mov
adc
add
xchg
lds
adc
into
mov
test
cmp
aad
jno
and
cmp
xchg
out
add
push
xchg
movs
xor
ja
xchg
(bad)
push
inc
push
add
dec
xchg
pusha
adc
push
sahf
adc
xor
data16
jmp
cmp
mov
stc
mov
arpl
and
rcl
and
les
pop
or
jmp
adc
mov
xchg
mov
jns
ja
xchg
cmp
cmps
adc
pop
xchg
jno
mov
add
mov
fsubr
cmp
mov
pop
ins
pop
push
xchg
or
aam
pop
ja
outs
repnz
fadd
ficomp
adc
sub
xor
(bad)
loope
ret
sbb
retf
jbe
mov
xchg
int
pop
(bad)
(bad)
data16
fnstsw
ror
ret
in
and
int3
mov
shl
ret
jl
sti
clc
xlat
call
mov
pop
dec
shl
cld
cli
jne
leave
lahf
pop
bswap
adc
push
fcom
fimul
fstp
scas
test
sbb
mov
(bad)
jmp
xchg
jbe
lods
push
jnp
retf
(bad)
idiv
std
inc
ins
cmp
xchg
mov
test
xchg
push
adc
cmps
mov
push
mov
adc
xchg
add
fwait
or
dec
push
xchg
nop
stc
jae
sub
add
jp
push
push
dec
mov
pusha
adc
add
movs
fidivr
push
jmp
and
(bad)
arpl
lods
cmps
and
sub
dec
push
push
adc
(bad)
mov
mov
pop
jl
add
dec
pop
outs
xchg
jg
sar
cwde
inc
push
xchg
mov
cs
(bad)
adc
dec
shr
(bad)
xchg
push
cwde
aas
jne
ja
pop
aas
inc
test
adc
jo
xchg
xchg
fcomp
in
push
and
adc
sbb
adc
cli
ins
xchg
clc
in
cld
mov
pop
sbb
pusha
add
hlt
xchg
shr
arpl
retf
xchg
pusha
jo
outs
mov
stos
push
rcl
shr
cmps
push
mov
mov
stos
jmp
in
sbb
loopne
or
cmp
xchg
inc
ret
cmps
jle
pop
jmp
jg
and
or
adc
inc
jno
mov
je
pop
cdq
dec
push
xchg
fs
pop
sub
mov
iret
xor
mov
es
(bad)
mov
mov
(bad)
jmp
mov
xchg
jbe
xchg
cdq
and
scas
fwait
hlt
fcmovbe
mov
je
xchg
lock
in
pop
jnp
mov
fcom
ss
ror
adc
add
sbb
retf
mov
aam
sub
pop
pusha
xchg
out
sub
xchg
int3
(bad)
pop
xchg
pop
jbe
or
mov
xchg
xchg
retf
fnstenv
push
mov
call
mov
or
adc
pop
sti
cmp
xchg
(bad)
adc
adc
arpl
js
test
mov
add
xchg
cs
or
adc
dec
out
jmp
lods
xchg
push
sub
fstp
loop
xlat
add
dec
imul
outs
fadd
dec
outs
xchg
imul
jns
nop
mov
push
fcomp
in
mov
je
ss
ficom
test
mov
icebp
dec
mov
mov
and
adc
mov
repnz
clc
jmp
inc
xchg
xchg
rcr
ror
xor
(bad)
out
mov
dec
arpl
xchg
mov
pusha
icebp
mov
add
ins
gs
jno
fcmovnu
inc
(bad)
mov
call
push
mov
pop
mov
bound
in
out
xchg
pushf
adc
push
fdiv
xchg
cdq
scas
ins
icebp
xchg
pop
stc
jmp
xor
pop
daa
outs
into
(bad)
iret
and
ror
add
data16
movs
ja
xchg
or
sub
dec
cmps
fist
xor
into
adc
xchg
out
mov
jecxz
mov
das
es
inc
pop
repnz
xchg
xor
sbb
and
xchg
cmc
mov
shr
mov
dec
adc
push
mov
ret
pop
push
sbb
xchg
in
mov
mov
xchg
sub
inc
out
loopne
xchg
dec
jnp
ret
ins
cdq
outs
enter
pop
inc
mov
and
mov
stc
pop
or
fist
add
rol
xor
jge
inc
mov
das
mov
hlt
cmp
mov
push
xchg
pusha
xor
je
imul
not
in
adc
cmp
xchg
jle
xchg
(bad)
addr16
or
mov
stc
push
aam
and
cld
shl
sub
mov
pop
or
xchg
jno
push
mov
std
sub
xor
aad
or
into
add
xchg
xchg
xchg
mov
sbb
out
fwait
mov
daa
fdivr
sbb
cdq
fsub
adc
jge
mov
rol
adc
sbb
cmp
lock
cdq
imul
or
push
push
push
adc
imul
sbb
rcr
pop
ret
movs
adc
jno
pop
(bad)
call
adc
push
mov
adc
aam
sub
mov
iret
xchg
test
mov
aam
or
xchg
mov
fistp
js
in
mov
fs
sub
xor
pushf
ret
xchg
jecxz
push
push
std
pusha
inc
add
in
jb
push
fcom
dec
jne
pop
mov
stos
fst
out
xchg
ds
add
mov
(bad)
loopne
add
jecxz
mov
adc
and
cmc
retf
cwde
mov
iret
lock
ss
or
add
hlt
test
xchg
mov
fisub
in
and
xchg
ins
pop
outs
cmp
scas
or
xchg
stos
jns
xchg
add
mov
in
sbb
xchg
or
outs
push
and
adc
clc
fnsave
cmp
inc
sbb
mov
xor
inc
and
dec
in
inc
mov
pop
jle
cmp
adc
adc
dec
mov
xor
dec
pushf
xchg
(bad)
mov
movs
repz
push
jmp
xchg
gs
mov
xchg
xsha1
cmps
mov
out
mov
je
xchg
xlat
hlt
inc
inc
out
ror
xchg
in
out
jne
inc
jle
xchg
mov
pop
xchg
aaa
jecxz
and
(bad)
cdq
xchg
hlt
sub
ret
popf
adc
mov
push
mov
mov
cmp
add
out
push
je
xchg
popf
test
add
sbb
outs
mov
call
xor
xor
popa
mov
cmp
adc
jl
cli
mov
mov
push
cdq
in
push
or
cld
xchg
lds
jmp
adc
(bad)
std
xchg
sub
retf
push
bound
cmp
xchg
imul
cmp
shr
pop
jb
xchg
fwait
rep
xchg
mov
ds
or
xchg
test
jo
xchg
clc
xchg
jnp
xchg
mov
(bad)
nop
ficom
xlat
and
scas
pop
loopne
in
movs
cmp
xchg
stos
xchg
ds
into
inc
cmp
xchg
adc
idiv
int
push
mov
cmp
mov
adc
mov
xchg
xchg
call
cmc
push
cbw
enter
jmp
retf
xchg
popf
add
dec
xchg
cmc
push
imul
push
cli
jnp
into
mov
push
xlat
fs
ins
xchg
mov
scas
pusha
push
popa
mov
mov
scas
pop
xchg
inc
clc
iret
retf
cwde
jo
sbb
rcl
pop
xchg
arpl
or
mov
mov
and
add
adc
xchg
push
sbb
call
xchg
inc
ret
adc
in
sbb
movq
popf
xor
scas
cmc
xchg
mov
popa
xchg
imul
(bad)
ret
(bad)
xlat
push
cli
xchg
or
sti
jl
pop
dec
fidiv
pop
xchg
(bad)
cli
jp
jns
jp
mov
push
push
adc
jae
ins
stos
cmc
xchg
or
mov
jne
jmp
mov
add
out
pop
dec
shl
xchg
xor
(bad)
(bad)
jbe
xchg
push
push
sbb
mov
pop
dec
jbe
dec
xchg
and
scas
lods
xor
mov
xchg
aas
inc
jmp
push
xor
rol
lods
mov
or
inc
mov
adc
mov
mov
shr
jbe
outs
sub
shr
lea
jno
sub
je
jp
or
xchg
adc
and
js
push
xchg
jle
jp
or
fwait
ror
aaa
sub
in
clc
sbb
mov
outs
jmp
mov
fild
xchg
mov
xchg
(bad)
aam
int
cmp
aaa
push
mov
jge
iret
xchg
jmp
in
cmp
shr
jae
int3
or
adc
sbb
xchg
retf
jecxz
aad
fstp
xchg
scas
and
lds
jb
mov
xchg
push
jae
jmp
jnp
fwait
in
inc
retf
loop
mov
dec
sub
adc
fs
push
dec
push
stos
xchg
les
inc
ins
or
lods
xchg
sub
inc
clc
rcl
xor
mov
mov
hlt
xchg
xchg
out
xor
enter
xor
cmp
xchg
xchg
mov
xchg
or
daa
xchg
xor
xchg
pop
mov
and
xchg
xor
test
mov
push
mov
push
pop
adc
inc
jo
xchg
aam
jecxz
xchg
les
aad
pop
mov
xchg
(bad)
aam
retf
jae
int
sbb
pushf
fs
mov
aam
xor
(bad)
xchg
lock
mov
dec
mov
xor
push
stos
inc
shl
js
push
sub
fdiv
dec
jecxz
xchg
jno
adc
jae
and
inc
xchg
(bad)
mov
add
fwait
mov
lock
inc
std
xchg
neg
xchg
aas
in
cmovp
mov
fcom
cmp
nop
outs
xchg
dec
inc
ror
je
iret
xchg
loope
ins
jns
fist
(bad)
rcl
clc
jecxz
xchg
mov
imul
pop
inc
xchg
mov
and
xor
xor
xchg
push
xchg
pushf
(bad)
xor
cdq
call
lahf
movs
mov
xor
enter
adc
mov
sub
adc
je
add
jo
bound
cmp
or
xchg
sbb
bound
cli
dec
mov
test
adc
shl
adc
adc
not
retf
xchg
pop
xchg
test
mov
repnz
mov
fwait
into
je
mov
arpl
xchg
ret
mov
xchg
stc
sbb
out
xchg
das
out
cwde
mov
clc
add
xchg
cmp
and
test
xchg
dec
(bad)
mov
xchg
stos
bound
fisttp
push
push
fwait
push
sub
xchg
xchg
add
pop
sbb
sti
not
mov
xchg
dec
jecxz
mov
cmc
rcl
push
push
xchg
xor
push
daa
int3
mov
mov
mov
rcr
xchg
xchg
bound
arpl
xchg
cmps
fcom
call
mov
fwait
jo
rol
xor
daa
pop
test
cld
in
sbb
xchg
push
rep
rcl
jb
sbb
repnz
and
jmp
jne
mov
xchg
out
test
jg
sub
aad
xchg
xchg
popf
dec
inc
dec
xchg
xchg
adc
cmps
fidiv
outs
cld
push
and
cdq
mov
xchg
mov
and
cmps
mov
jecxz
add
and
shl
js
in
stc
fild
outs
shr
pop
nop
mov
nop
aam
dec
and
fdiv
push
fadd
enter
dec
jns
gs
xchg
(bad)
xchg
bound
jg
mov
mov
sub
sub
adc
and
lahf
adc
xchg
jmp
push
repz
pop
push
in
fst
stos
movs
xchg
dec
or
cmp
aas
push
call
or
and
sbb
ret
mov
cmp
iret
push
sbb
cmps
lahf
rcl
ret
mov
fwait
or
ja
xchg
mov
xlat
pop
mov
loope
cmp
mov
xchg
in
dec
dec
fisubr
(bad)
jmp
cdq
loopne
mov
dec
jb
pop
js
clc
mov
ret
cmp
adc
mov
cs
lock
clc
call
inc
imul
mov
xchg
jg
or
jns
fwait
or
inc
jmp
add
data16
pop
mov
gs
mov
mov
sbb
adc
push
je
mov
xor
push
push
sbb
scas
xchg
push
fstp
xchg
jle
iret
jae
mov
shl
or
xchg
mov
xchg
cmp
repz
sti
pop
aam
dec
pop
push
iret
jbe
mov
jnp
jo
xchg
push
sar
sub
mov
cmp
inc
xchg
mov
stos
pop
add
addr16
in
mov
dec
xchg
js
inc
out
sub
loop
xchg
push
xor
jg
out
int
mov
push
dec
xchg
fidiv
xor
cmp
or
imul
xchg
mov
xchg
shl
ret
stc
xchg
repz
adc
jne
push
rol
aaa
shr
imul
lods
adc
push
xchg
pop
adc
out
and
repz
cmp
popf
mov
pop
rcl
xor
adc
dec
fist
retf
rcl
cmp
(bad)
es
imul
sbb
xchg
push
fwait
pop
xor
icebp
test
pusha
add
inc
sub
shr
icebp
mov
int3
or
xchg
pop
push
loopne
outs
jge
xchg
mov
inc
and
mov
fwait
push
call
shl
ret
fs
(bad)
jmp
(bad)
adc
in
sub
xchg
xchg
sbb
aam
xchg
inc
retf
sahf
(bad)
stc
sbb
test
inc
data16
add
les
rcl
push
lods
xchg
mov
call
sbb
xchg
int
fcomp
xchg
cmp
sbb
push
mov
mov
cdq
pop
adc
iret
xor
bt
jns
pop
imul
pop
call
mov
push
out
icebp
nop
jo
(bad)
mov
int3
hlt
or
or
add
fwait
mov
in
inc
jns
xchg
sbb
pop
dec
and
xchg
jmp
ins
(bad)
xchg
(bad)
int3
movsx
gs
leave
sub
mov
in
sub
nop
(bad)
sbb
dec
aaa
int3
pop
mov
aas
popf
pop
push
xor
xchg
inc
jno
sbb
xor
rcr
sub
loope
into
hlt
in
addr16
push
fsubp
test
mov
pop
ss
out
div
sub
mov
fnsave
mov
xchg
gs
xor
test
xchg
sbb
xchg
xchg
adc
sub
jb
out
jmp
xor
xadd
xchg
ret
inc
in
loopne
(bad)
mov
adc
in
add
ret
inc
nop
xchg
xchg
sbb
xor
xchg
in
mov
adc
sti
dec
in
aam
sub
push
mov
sbb
sbb
mov
sub
inc
jbe
mov
cmps
in
sbb
jae
jge
xchg
sub
cmp
xchg
shl
xchg
cmp
out
xchg
test
sub
inc
add
push
popf
mov
ja
cmps
sti
xchg
mov
jne
rcr
inc
fwait
int3
jbe
and
xlat
arpl
xchg
mov
xchg
retf
adc
xchg
mov
loopne
stos
add
cmp
lahf
xor
push
adc
xor
neg
cmp
in
mov
retf
shr
pop
adc
push
in
das
aas
(bad)
jl
lds
rol
pop
xchg
in
dec
mov
or
shr
jo
or
pop
push
aad
lods
inc
js
orps
xchg
dec
jbe
jmp
adc
or
push
and
outs
dec
xchg
(bad)
cli
fimul
push
and
or
xor
cmp
cs
push
xchg
inc
inc
mov
mov
jmp
push
jl
cmp
jne
bound
imul
leave
adc
outs
aam
mov
xchg
jl
mov
xchg
test
dec
cmp
loope
das
sub
cmc
jb
stos
fcomp
add
test
xchg
sbb
in
push
xchg
hlt
push
cmp
push
daa
popa
sete
sbb
(bad)
mov
xchg
xor
add
out
adc
in
xchg
xor
inc
nop
push
and
xchg
int3
mov
xchg
aam
bound
icebp
inc
xchg
scas
out
test
int
mov
push
xchg
mov
cmp
and
xchg
aas
xchg
sti
(bad)
jnp
xor
jp
mov
sub
fild
movs
push
jo
jne
xor
xchg
jmp
stc
outs
inc
mov
fsub
imul
mov
retf
mov
mov
or
hlt
sub
lock
std
xchg
popa
mov
pop
inc
push
retf
mov
xor
stc
rol
mov
jl
xchg
jno
pop
(bad)
mul
push
lock
mov
inc
ja
and
xchg
icebp
add
das
fadd
fst
popa
cwde
cli
or
movs
cmp
rcl
or
mov
je
movs
and
xchg
xor
(bad)
adc
mov
or
push
lahf
(bad)
cmp
inc
mov
icebp
mov
xchg
inc
xor
repnz
gs
pop
sahf
fldcw
and
stc
jno
xchg
jnp
sub
xchg
add
xor
mov
jbe
sbb
shl
inc
push
into
fsubr
iret
test
stc
xchg
sti
dec
cmp
rcl
sbb
pop
mov
xchg
arpl
dec
inc
jecxz
out
adc
lods
push
repnz
sbb
ror
cmps
push
rcr
in
push
stos
mov
adc
(bad)
scas
xchg
ja
inc
mov
add
xchg
mov
call
xchg
sub
mov
rol
xchg
cmps
mov
call
not
enter
fild
lock
daa
xchg
jg
inc
inc
test
sbb
mov
dec
add
pop
sub
into
dec
mov
push
ret
mov
inc
and
mov
xchg
mov
xor
scas
cld
pop
xchg
jle
or
sar
jmp
jnp
inc
xchg
cld
clc
sub
or
mov
push
into
dec
mov
mov
aam
mov
cmp
xchg
repnz
jns
(bad)
jno
in
xchg
adc
mov
pop
mov
sbb
dec
xor
xchg
cmc
nop
mov
aam
iret
sbb
add
inc
push
lods
retf
into
sbb
add
(bad)
aas
mov
or
mov
inc
mov
xchg
cwde
xchg
daa
adc
push
xor
xor
mov
push
dec
iret
mov
mov
add
mov
sbb
push
imul
gs
mov
mov
div
and
ins
das
(bad)
imul
repnz
jbe
jmp
xchg
jecxz
stos
push
xchg
xor
jb
mov
add
pop
out
clc
cs
mov
xchg
(bad)
retf
inc
aam
and
sbb
pop
push
xchg
(bad)
xor
(bad)
pop
cmp
into
dec
sub
xchg
xchg
inc
fwait
sbb
and
mov
push
lds
sbb
ss
int3
xor
pop
outs
jl
sar
xchg
loopne
mov
add
sbb
mov
adc
push
mov
xchg
push
push
sbb
lahf
pop
or
cmps
aaa
adc
push
or
ds
in
fwait
dec
xchg
mov
cld
hlt
mov
stos
dec
xchg
jbe
mov
(bad)
test
mov
(bad)
bound
cmp
enter
xchg
movs
jne
das
inc
lock
xchg
adc
popa
push
leave
xor
mov
xchg
jmp
in
or
xor
xchg
leave
ret
cs
stos
push
xchg
out
or
pop
cli
mov
inc
bound
mov
dec
in
sahf
mov
or
adc
mov
push
cmp
xchg
out
and
push
xchg
out
fmul
cmc
fs
shl
inc
retf
sub
jge
jg
shr
rol
add
int
inc
repnz
dec
or
into
cmps
xchg
aad
push
sbb
int
jns
mov
dec
fisub
jle
les
mov
or
push
push
cmp
test
fs
mov
push
xchg
ret
test
pop
cmp
loop
nop
xchg
mov
cwde
mov
popf
xchg
sbb
add
sub
push
jge
imul
popf
adc
xchg
ret
fld
jl
inc
xchg
js
lds
adc
xchg
inc
jo
retf
int
jecxz
mov
ja
cld
jno
mov
or
and
xchg
pushf
adc
lea
dec
cmp
push
mov
and
out
sbb
(bad)
jmp
add
xchg
push
dec
lds
sbb
mov
lahf
pusha
call
inc
repz
xchg
dec
(bad)
fsubr
and
inc
aas
(bad)
jmp
mov
xchg
pusha
adc
mov
cli
movs
xchg
outs
setge
xchg
mov
stos
jmp
into
jge
xchg
jmp
add
ret
xchg
ror
aam
icebp
cmc
adc
fcom
pop
pop
sbb
retf
lea
(bad)
xchg
and
pop
ret
movs
test
xchg
mov
or
daa
push
lea
add
les
stos
push
sbb
ss
xor
jl
xchg
das
xchg
fwait
push
or
add
push
fwait
in
push
xchg
adc
sub
gs
push
dec
ficom
retf
mov
xchg
sbb
into
(bad)
bound
push
data16
pop
iret
xchg
add
mov
sub
mov
jg
jno
imul
jl
xchg
lahf
(bad)
loop
adc
outs
and
mov
leave
int3
js
xchg
jo
stos
repnz
sbb
xchg
je
pop
std
test
scas
sub
pop
or
xchg
and
push
push
xchg
repz
es
and
pop
mov
jmp
push
sub
sub
mov
cmp
rcl
add
iret
shl
push
xchg
mov
lock
or
rcl
test
xchg
adc
add
push
ror
lds
sbb
lods
out
xchg
cmp
push
cdq
jg
or
adc
xor
or
addr16
lods
jo
xchg
mov
jge
xchg
mov
aad
xchg
sbb
xchg
test
mov
push
(bad)
cmp
sub
mov
pop
repnz
push
outs
cmp
xchg
loope
and
shl
ret
adc
es
adc
sub
in
xchg
lds
push
in
outs
dec
pop
xchg
sub
repz
sbb
xor
out
sahf
ret
loopne
jmp
cmps
and
je
xchg
cwde
sbb
pop
add
jp
xor
inc
stos
mov
ds
dec
xchg
pop
push
push
jmp
xor
push
xchg
sbb
not
fwait
adc
cli
sbb
mov
lods
addr16
dec
lea
pop
sub
lahf
pop
adc
jns
inc
adc
cdq
jp
add
cmp
dec
fimul
sub
ja
xchg
mov
(bad)
xchg
stos
mov
or
scas
rol
cdq
repz
push
rcl
imul
rcl
popf
leave
sti
xchg
aad
xchg
out
test
push
add
loope
pop
dec
and
jne
pop
cmp
jns
ds
sbb
adc
out
xchg
xor
aam
fucomi
cmp
(bad)
mov
xchg
add
pop
mov
mov
icebp
mov
pop
xchg
adc
sbb
in
pusha
mov
les
push
cli
call
not
repnz
loop
cmps
adc
pop
add
mov
xchg
xchg
xor
sub
adc
jnp
hlt
call
mov
aam
xchg
daa
ret
inc
inc
pop
idiv
lods
iret
xchg
setnp
jb
mov
mov
je
cmps
xor
xchg
push
nop
in
(bad)
jmp
xchg
les
jecxz
xchg
push
inc
jge
mov
mov
add
and
hlt
mov
sbb
xchg
leave
inc
push
retf
pop
fs
imul
xchg
dec
mov
inc
daa
and
nop
mov
clc
sbb
xchg
mov
adc
imul
push
add
xchg
fmul
loopne
xchg
adc
out
movs
adc
mov
fs
data16
gs
jp
jl
xchg
pop
leave
fistp
xchg
dec
pushf
shl
or
inc
xor
pop
adc
xchg
mov
sbb
repnz
add
add
icebp
or
xchg
jne
scas
retf
jl
ret
mov
call
add
icebp
cdq
and
mov
addr16
mov
xchg
pop
push
jg
and
and
fadd
pop
pop
fisttp
pop
jl
xchg
popa
je
nop
or
scas
mov
cmc
mov
sbb
repnz
push
sbb
mov
retf
xchg
adc
popa
push
in
daa
dec
add
or
push
add
pop
push
xchg
retf
push
fcmovnb
cmp
out
ins
mov
imul
mov
sbb
ins
xchg
aaa
mov
push
jns
(bad)
xchg
fwait
and
jnp
mov
mov
xchg
push
xchg
xor
add
push
fist
cmc
cli
add
push
loopne
jmp
jmp
sbb
push
(bad)
xchg
adc
aam
leave
(bad)
cld
loop
and
movs
mov
mov
pop
xchg
sub
pop
pop
lea
jp
and
cmps
push
clc
(bad)
loopne
dec
xchg
es
pop
cwde
sub
xchg
xchg
repnz
inc
in
push
xchg
mov
inc
xor
mov
int
sub
push
test
pusha
xchg
rcr
mov
movs
jno
jle
ret
(bad)
in
xchg
fiadd
(bad)
add
dec
sbb
mov
cmc
imul
movs
xchg
pop
scas
push
sahf
js
leave
stc
xchg
test
icebp
outs
xchg
sub
cmps
mov
xchg
dec
xor
push
cmc
mov
or
cmps
jae
mov
xchg
jmp
jmp
xchg
loope
rcl
or
pop
das
or
leave
inc
cmp
xchg
sahf
ror
mov
mov
pop
mov
(bad)
sub
xchg
cmp
sbb
xor
add
nop
sti
fld
and
sqrtps
aam
loop
sbb
xchg
les
mov
or
sbb
sub
inc
sbb
pop
sbb
xchg
dec
mov
test
cmp
sub
mov
scas
test
xchg
call
xchg
mov
(bad)
stos
aam
ja
pcmpgtw
xchg
(bad)
sar
dec
mov
sbb
jmp
int
push
mov
aam
mov
add
stc
test
xchg
shr
pop
les
aad
xchg
mov
jle
rcl
cwde
inc
in
xchg
or
sbb
aaa
in
add
xchg
mov
repnz
movs
xchg
das
movs
fist
mov
xchg
js
ins
mov
xchg
lods
cmp
out
xchg
adc
inc
xor
cmp
movs
clc
jl
lods
jbe
sbb
fisttp
pop
push
cmps
pop
cmp
leave
adc
pop
dec
jbe
inc
shr
pop
inc
std
xchg
mov
mov
test
jmp
xchg
call
jae
pop
xchg
mov
mov
or
lock
xchg
das
add
pop
inc
out
cmp
lea
aaa
movs
push
xchg
es
push
xchg
ret
jbe
pop
das
mov
jne
pop
sahf
int3
xchg
add
sbb
inc
xchg
div
sbb
movzx
leave
cmp
popf
fwait
aam
mov
push
mov
ss
and
xchg
pop
or
sub
mov
lahf
add
ret
jge
dec
xchg
cmp
in
and
in
and
js
hlt
xchg
lock
imul
or
adc
sub
stos
bound
xchg
adc
mov
je
and
cdq
inc
xchg
push
in
mov
and
loope
sbb
xchg
int3
fimul
(bad)
xchg
xchg
cmps
retf
fadd
pop
clc
movs
fnstcw
mov
(bad)
xchg
repz
xchg
das
add
cmc
iret
fdiv
out
mov
sbb
jo
add
popf
movs
fsub
shr
test
push
mov
jmp
stos
mov
ins
and
mov
xchg
cmp
(bad)
and
loopne
add
ja
xor
push
inc
iret
fdiv
jns
jb
stos
mov
jo
mov
xor
and
or
mov
and
aaa
jl
cs
adc
adc
xchg
or
in
sub
jb
jbe
xchg
rol
jae
leave
mov
test
test
outs
jbe
in
pop
mov
ins
adc
mov
push
jnp
sar
pushf
xchg
(bad)
sbb
shl
mov
sub
ins
pop
stos
xchg
mov
sar
adc
mov
mov
hlt
rcl
not
xchg
fs
mov
push
or
mov
fld
xchg
data16
xor
sub
and
test
xchg
lods
jle
sahf
dec
add
mov
mov
aam
movs
movs
jo
push
xchg
push
shl
retf
sub
mov
cli
fsub
jnp
retf
hlt
rcl
mov
(bad)
mov
xor
aas
push
jnp
xchg
pop
adc
push
cdq
cmps
scas
xchg
cli
mov
sti
stos
cmps
rol
mov
aam
and
scas
inc
call
ins
ret
mov
dec
sub
in
xchg
cld
mov
xor
add
movs
mov
mov
sbb
cmp
jmp
inc
pop
cli
cdq
push
sahf
push
jge
adc
xchg
ficom
fdiv
xchg
ret
push
pop
and
mov
push
scas
fst
shl
out
ror
add
jno
adc
sbb
xchg
retf
nop
add
push
xchg
in
fstp
mov
pop
pop
mov
bsr
lock
add
cmps
sub
push
clc
lahf
loope
retf
adc
imul
in
pop
jle
sub
icebp
scas
jno
scas
adc
and
cld
mov
and
mov
dec
mov
pusha
and
pop
fist
sub
mov
jb
lods
xchg
sti
loope
add
mov
adc
and
mov
shr
fnsave
(bad)
and
xchg
adc
xchg
outs
popf
movs
les
repnz
data16
enter
arpl
cs
cmps
pop
mov
mov
rcl
je
movs
pop
test
inc
push
clc
test
xchg
jmp
out
fwait
mov
fiadd
xchg
test
cmp
sbb
xchg
sub
ror
xchg
mov
mov
mov
lods
pop
dec
xor
jns
hlt
push
mov
lea
pushf
jg
or
inc
or
lahf
movs
adc
test
(bad)
jne
into
std
(bad)
xchg
xchg
push
daa
sbb
leave
xchg
inc
dec
sbb
xchg
and
jl
pop
cmps
inc
pusha
outs
mov
mov
mov
int3
push
xchg
(bad)
and
clc
mov
add
mov
mov
add
dec
cld
stc
xchg
or
retf
cdq
(bad)
fcom
repnz
xchg
sahf
(bad)
movs
push
xchg
mov
js
cmp
and
dec
call
sub
fscale
mov
out
dec
cwde
cs
(bad)
xchg
or
fisttp
xchg
xor
push
and
ret
xchg
adc
repz
hlt
and
sbb
in
adc
aam
dec
xchg
movs
add
xor
xchg
sbb
push
xor
test
(bad)
std
bound
inc
sbb
jo
cs
sbb
adc
sbb
pop
mov
xchg
pop
xor
mov
mov
aam
stc
and
inc
push
cmp
xchg
and
mov
(bad)
push
xchg
iret
xchg
mov
in
xchg
push
sub
add
pusha
das
mov
mov
push
sbb
adc
fs
call
mov
popa
daa
sti
fistp
xchg
mov
pushf
or
xchg
add
jg
add
iret
fst
xor
fiadd
pop
xchg
and
daa
sub
sbb
cmp
jl
fcom
addr16
dec
pop
xchg
mov
shr
xchg
in
pushf
les
xchg
in
cmp
xchg
pop
jns
cmp
repnz
test
stos
sub
lds
cmp
cmp
mov
mov
cmp
inc
(bad)
fisub
mov
cwde
sbb
stos
pop
fistp
sar
imul
retf
jne
mov
fwait
cmps
add
jg
ror
mov
dec
and
sti
mov
popa
xchg
shl
xchg
nop
mov
cmc
or
mov
or
lock
lea
iret
xchg
clc
(bad)
retf
inc
cli
arpl
shl
das
mov
add
inc
inc
xchg
cwde
pop
rcl
ret
lock
xchg
mov
adc
xchg
(bad)
ret
mov
jns
pop
mov
mov
mov
rcr
loop
sbb
mov
scas
jae
xchg
nop
and
push
out
xchg
mov
(bad)
adc
xor
imul
xchg
sbb
adc
movs
xlat
adc
xchg
aam
pop
jg
or
fst
ret
mov
dec
in
scas
fisub
jmp
cmp
mov
sbb
push
mov
call
mov
cmp
test
jg
push
xchg
ss
inc
push
shl
cmps
and
jnp
cs
jno
jne
sar
cmps
xchg
adc
dec
cmp
aam
cld
xor
add
pop
sti
dec
adc
mov
mov
adc
xchg
into
push
cmp
pop
push
xchg
adc
ffreep
xchg
dec
or
pop
lds
and
lahf
push
mov
out
mov
clts
or
add
mov
mov
clc
mov
jnp
mov
adc
dec
add
cmps
xchg
sbb
shl
inc
pop
sbb
ins
loope
dec
lods
xchg
shl
popf
sub
cld
xchg
fidiv
dec
jmp
loope
xchg
int
xlat
push
inc
cmps
sbb
push
xchg
in
add
imul
test
nop
retf
xchg
iret
mov
sti
push
mov
cmp
adc
jae
ds
cmp
cmp
out
xchg
jnp
sub
xchg
jmp
(bad)
cld
addr16
adc
xchg
mov
push
sahf
and
cmp
cmp
getsec
mov
(bad)
test
fwait
cmps
mov
popa
adc
mov
pusha
xchg
imul
arpl
clc
dec
mov
les
out
sbb
push
xor
inc
mov
or
dec
fimul
or
pop
inc
out
push
or
push
int3
inc
sar
xor
jb
je
(bad)
cmp
jae
stos
mov
xchg
pop
lods
les
fwait
in
(bad)
adc
mov
or
cmps
push
xor
aam
les
in
repz
jl
add
xchg
in
sub
cmc
outs
dec
and
rcl
dec
mov
dec
in
adc
add
test
ror
(bad)
ja
and
dec
jno
stos
adc
pop
(bad)
ins
mov
shl
fist
xchg
stos
retf
jle
call
adc
xchg
add
xchg
test
sub
jecxz
push
xchg
dec
shr
adc
ins
push
add
pop
xor
out
dec
mov
push
sub
jl
jno
lea
pusha
retf
mov
xchg
mov
rcr
cmp
xchg
mov
mov
dec
repz
jno
mov
xchg
mov
adc
xor
shl
sbb
push
in
popf
pop
or
inc
add
je
sbb
rcl
js
pop
ja
mov
test
xchg
pop
jb
cmp
enter
cwde
add
dec
shl
out
xchg
arpl
sub
xchg
pop
cs
inc
mov
(bad)
out
sub
sub
retf
inc
(bad)
xor
jnp
xchg
mov
mov
mov
call
adc
test
lods
lea
hlt
dec
sti
adc
mov
inc
xchg
in
aam
int3
imul
inc
fwait
xchg
outs
mov
push
fisttp
jne
xchg
lahf
and
aas
xor
xchg
push
and
das
in
rcl
push
cmps
push
mov
sahf
xchg
or
ror
jmp
repnz
adc
imul
pop
pop
push
add
xchg
xlat
dec
jmp
or
xchg
shl
xor
les
mov
cs
rcr
ret
push
fwait
mov
hlt
scas
stos
mov
retf
sti
rcr
inc
(bad)
ins
(bad)
push
mov
sbb
mov
in
push
rcl
int3
sbb
imul
xchg
pushf
mov
jae
xchg
pop
mov
ins
mov
push
xor
pop
aam
pop
fdiv
in
mov
xor
sti
push
inc
stos
lds
and
dec
mov
mov
ins
fldenv
js
out
fsub
in
das
gs
dec
cli
call
enter
pop
jns
sbb
mov
pushf
aad
xor
and
cwde
jns
sbb
xchg
jecxz
xor
clc
(bad)
ficomp
mov
sahf
mov
add
cmp
inc
adc
aad
pop
popa
xor
cmp
push
fnstenv
adc
dec
xchg
outs
imul
sub
loope
imul
fwait
rcl
scas
cmp
sbb
jecxz
adc
lea
stos
int
call
ins
bound
fxch
xchg
cmps
or
out
dec
pop
mov
shr
cmp
xchg
dec
loope
ss
pop
test
and
xchg
loopne
sub
dec
xchg
leave
imul
(bad)
repz
xchg
jmp
dec
jge
fisttp
xchg
cmps
test
push
sub
movs
push
dec
inc
sub
push
mov
mov
test
je
adc
aad
jbe
xchg
and
or
xor
xchg
inc
fisttp
xor
addr16
xchg
popa
or
or
xchg
sahf
cmp
(bad)
ror
loope
mov
lahf
loopne
nop
mov
mov
in
push
fwait
popa
fwait
cmp
jmp
xchg
pop
or
jp
popf
adc
jl
xchg
scas
mov
into
inc
xchg
ret
mov
xchg
scas
imul
js
inc
xchg
push
dec
pop
jl
adc
dec
out
push
sub
not
xlat
pop
cmp
xchg
(bad)
or
dec
fisubr
(bad)
xchg
cmp
add
mov
(bad)
pusha
xchg
push
clc
mov
jne
xchg
mov
mov
dec
add
mov
test
pop
xchg
ret
leave
in
xor
mov
sbb
cmpxchg
fdiv
mov
fwait
xchg
cmp
mov
mov
xchg
in
or
repnz
xchg
push
stos
jb
sub
jae
inc
stos
ins
pop
iret
inc
fimul
xchg
popf
aaa
xchg
inc
cmp
lahf
cs
scas
or
call
mov
xchg
pop
xchg
mov
in
jmp
aad
or
push
pop
xlat
xor
out
push
mov
xchg
cs
bound
jae
into
sbb
fstp
and
lds
fsub
xchg
std
fs
sbb
mov
xor
jle
(bad)
push
addr16
pop
fdivr
int
sbb
push
sahf
xchg
in
sar
xchg
xor
int3
add
(bad)
push
sbb
jnp
das
ret
sti
jle
loop
adc
dec
ret
mov
cdq
sbb
aas
or
cli
xchg
data16
iret
inc
push
ficom
shl
mov
leave
xchg
jb
aas
mov
jns
add
aad
loope
lea
fsubr
mov
popa
nop
xor
int3
mov
push
and
cdq
xchg
xchg
fimul
mov
xchg
and
cmp
add
sub
mov
mov
cli
aaa
and
fwait
dec
sbb
xchg
popa
mov
xchg
sub
rcl
cmps
bound
out
out
xchg
mov
ror
les
xor
(bad)
push
fst
inc
(bad)
out
push
lahf
scas
sbb
push
xchg
test
adc
fs
iret
stc
aam
pop
dec
cdq
jb
aad
cmp
shl
push
je
idiv
lock
mov
push
dec
mov
fcom
fld
or
push
hlt
jp
cli
xchg
mov
jnp
scas
push
jmp
fild
into
bound
inc
xchg
jp
sbb
xchg
sbb
rcr
adc
ds
dec
movs
jmp
xchg
mov
aam
push
xchg
sahf
cwde
cli
sbb
push
hlt
(bad)
in
mov
sbb
inc
movs
fst
mov
push
xchg
jne
stc
push
and
sahf
cmp
push
jge
les
adc
sub
imul
xchg
mov
sub
loopne
or
push
iret
mov
sbb
sbb
push
dec
inc
test
or
mov
cmp
(bad)
mov
sub
inc
cmp
xchg
ins
dec
mov
cmp
xor
es
adc
adc
xchg
cmp
jno
cld
jns
fs
xchg
and
jne
mov
popf
outs
xchg
cmp
sub
sub
arpl
and
xchg
push
fisttp
out
xchg
sub
outs
mov
div
xlat
xchg
sub
jb
push
aaa
cmp
test
mov
xchg
and
repz
inc
test
iret
ret
xchg
xchg
aam
(bad)
sub
or
fwait
neg
xchg
(bad)
cmp
in
adc
and
inc
push
pop
or
adc
js
push
mov
popf
test
adc
xchg
xchg
or
xchg
jg
test
cmp
add
xchg
mov
fld
loop
sbb
sbb
mov
xchg
loopne
adc
les
xchg
or
sbb
dec
popa
adc
(bad)
sbb
inc
cmps
add
xchg
dec
and
shl
das
pop
sub
outs
xchg
lahf
test
lea
scas
addr16
adc
pop
clc
aad
jmp
mov
adc
leave
jmp
test
xchg
adc
add
pop
mov
xchg
xchg
sar
sub
xchg
fs
jo
ror
scas
xchg
aad
cpuid
aaa
dec
adc
retf
leave
fwait
or
in
stc
add
mov
sti
push
or
mov
jge
icebp
push
and
lods
ret
int3
mov
mov
push
mov
call
sbb
nop
ret
jl
sub
mov
dec
in
sub
(bad)
mov
mov
xchg
jl
in
pop
shr
out
jmp
(bad)
mov
jb
data16
mov
xchg
ja
xchg
or
(bad)
rcl
ins
(bad)
lods
hlt
mov
cmps
rol
push
xchg
fcom
pop
pop
pop
push
nop
pop
test
pop
enter
mov
sbb
add
lods
test
stos
xchg
and
pop
(bad)
in
retf
cmp
xchg
xor
sbb
js
clc
dec
xchg
ins
push
mov
das
xchg
push
adc
add
and
xchg
mov
sbb
adc
cmp
add
push
rcl
lods
sub
mov
adc
test
test
xchg
push
xchg
pop
and
adc
in
(bad)
xchg
adc
sub
xchg
cdq
xchg
pop
and
inc
add
or
adc
cdq
adc
stos
addr16
sub
xchg
and
ins
lods
and
jmp
cmps
arpl
push
ins
lods
es
pop
xchg
iret
cdq
loop
cwde
nop
dec
or
push
cmp
cmp
ds
mov
data16
xchg
call
movs
addr16
fild
xor
adc
test
enter
dec
pop
or
xchg
ins
sar
push
or
xchg
gs
es
ret
imul
sbb
adc
cld
js
add
loope
add
dec
mov
push
xchg
push
std
inc
cwde
add
pop
sbb
jo
js
xchg
add
jbe
in
mov
aam
addr16
and
adc
shr
xchg
fidivr
test
pop
jg
inc
push
mov
dec
xchg
mov
add
repz
popa
jo
adc
nop
cmps
push
fist
mov
call
inc
dec
push
xchg
pop
in
mov
jnp
jns
ja
in
sahf
inc
das
les
xchg
fdiv
(bad)
xchg
mov
cmp
lods
mov
xchg
popa
inc
push
shl
pusha
xchg
sbb
pop
xor
dec
test
add
into
ror
push
add
push
jns
(bad)
jno
xchg
aaa
or
outs
popf
jb
test
dec
loop
push
inc
pop
cmps
xchg
and
push
or
mov
adc
xchg
jno
cmp
push
mov
scas
fwait
jle
(bad)
aam
or
mov
push
xchg
test
and
xchg
xchg
fbstp
dec
xchg
gs
xchg
add
pop
xchg
daa
fwait
shl
int
mov
inc
clc
je
dec
lea
sub
shr
add
jb
loope
xchg
pop
inc
les
cwde
mov
jp
inc
xchg
jne
pop
ss
mov
mov
outs
xor
test
icebp
jmp
pop
and
jmp
mov
dec
add
mov
jle
xchg
xchg
rcl
test
inc
jge
xchg
fbstp
fwait
push
das
xor
cs
data16
and
xchg
mov
jge
xchg
xchg
je
lods
popf
repnz
or
lock
add
scas
sbb
in
stos
lock
xchg
mov
int
xchg
dec
pop
nop
lods
lahf
dec
mov
xchg
sub
test
jmp
daa
sbb
ror
cmps
fwait
cmps
int
jg
adc
inc
or
sub
push
sub
popf
leave
push
mov
push
xor
mov
lea
xchg
xor
movs
push
dec
cli
jnp
aad
mov
cmp
popa
xor
add
bound
or
or
xchg
xchg
or
cmp
in
mov
test
jmp
jb
popa
test
cmps
mov
sub
xchg
fldenv
loope
jle
stos
and
push
xor
pushf
pop
cli
arpl
mov
fwait
jbe
rcl
nop
push
mov
mov
or
push
xchg
mov
mov
push
xor
add
adc
adc
push
data16
call
xor
cmp
pop
setb
xor
sar
mov
dec
into
pop
mov
outs
hlt
xchg
and
xchg
or
repnz
sub
xor
dec
or
mov
hlt
xlat
cmc
push
dec
imul
retf
in
enter
clc
mov
scas
push
hlt
fldenv
push
mov
lea
jmp
add
cmp
outs
mov
int
cmp
xchg
sahf
cmps
sub
fadd
pop
aad
mov
and
push
push
fwait
mov
lods
sbb
scas
retf
outs
add
test
adc
out
adc
cmp
xchg
inc
out
sbb
jo
push
cmp
shl
jbe
pop
pusha
enter
xor
fadd
in
adc
dec
xchg
je
mov
xchg
out
fwait
cwde
or
iret
fimul
xchg
je
pusha
out
mov
mov
cwde
call
test
imul
sti
xchg
in
pop
xchg
and
cdq
mov
retf
xchg
mov
jae
xor
outs
sub
adc
mov
aam
pop
mov
jecxz
xor
xchg
mov
xor
ja
xor
cmp
mov
push
push
call
mov
push
popf
lods
fidiv
rcl
xchg
lea
cmp
mov
cmp
hlt
out
xchg
pop
xchg
mov
cwde
sub
mov
xchg
push
loop
and
adc
jl
das
cmp
leave
int
jne
pop
mov
mov
sub
sub
in
leave
sbb
ficom
das
xchg
xor
add
push
outs
cmp
(bad)
mov
movs
inc
pop
cld
or
dec
rcr
sti
cmp
in
xchg
enter
lods
mov
icebp
xchg
loopne
cmp
xchg
inc
dec
je
and
add
adc
clc
mov
iret
xor
push
sub
stos
add
xchg
scas
pop
jne
mov
xchg
adc
mov
sbb
adc
cdq
add
xchg
adc
adc
xchg
gs
inc
dec
pushf
xchg
dec
or
jno
stc
ficom
xchg
inc
jge
or
mov
out
or
das
add
test
or
sbb
dec
sahf
jl
xchg
jbe
inc
xor
adc
shr
add
imul
(bad)
jmp
mov
loope
push
cmp
test
cmp
repnz
add
adc
sub
fistp
dec
arpl
push
xchg
pop
sbb
std
adc
outs
sub
xchg
pop
inc
mov
push
dec
fs
xchg
gs
sub
stos
mov
adc
xchg
add
adc
push
cmp
iret
jbe
pop
mov
mov
mov
mov
xchg
sbb
inc
dec
mov
pop
mov
test
or
mov
adc
xchg
and
pop
cmp
movs
xchg
jle
lds
xchg
cld
imul
loope
xor
outs
xor
mov
dec
es
xchg
adc
sbb
xchg
mov
push
cs
xchg
leave
cld
jmp
aam
xor
fwait
or
mov
and
push
das
sbb
out
dec
xchg
ret
(bad)
fidivr
cmp
xor
cdq
into
mov
push
xor
pop
or
int3
xchg
in
sbb
push
ds
fs
popa
push
sbb
dec
fdivr
xchg
mov
pushf
lahf
mov
aaa
sbb
mov
outs
mov
xchg
out
mov
push
mov
or
adc
or
xlat
ficom
in
and
xchg
data16
cdq
in
lds
fwait
adc
hlt
cmc
hlt
mov
cmps
(bad)
xchg
sub
inc
inc
ja
daa
fist
fld
xor
jbe
xchg
bound
cmps
sbb
xchg
sub
sbb
pop
push
inc
inc
jmp
and
push
xchg
push
inc
inc
arpl
call
mov
pop
retf
xchg
xchg
fwait
push
sbb
push
xchg
mov
or
dec
sub
xchg
xlat
fnsave
rol
jge
test
dec
jno
fdiv
and
sub
sub
pop
aad
ror
into
jmp
push
mov
outs
sub
inc
xchg
jo
sbb
sbb
les
repz
jnp
pop
div
add
xchg
mov
push
daa
jns
lahf
imul
scas
dec
xchg
xchg
lock
nop
mov
bound
cmps
cmps
mov
loop
dec
cmp
lea
rcr
fistp
push
xor
retf
jne
bnd
aas
call
rcl
bound
dec
push
jmp
nop
fsubr
add
lods
popf
jp
xchg
(bad)
mov
jne
xchg
sub
xchg
inc
es
lock
xor
cwde
sub
mov
rcl
pushf
out
fisubr
xchg
mov
test
cmp
leave
out
push
xchg
test
push
cmp
int
xchg
arpl
loope
xchg
data16
add
adc
das
jl
loope
xchg
out
and
cmp
and
mov
fptan
cmps
pop
and
rcl
arpl
fcomp
xchg
fs
fdivr
xchg
adc
mov
jno
jecxz
xchg
jmp
xor
pushf
mov
in
ficomp
xchg
push
in
pop
int
pop
mov
dec
or
cdq
inc
repz
les
sti
xchg
outs
push
int
popa
aaa
pop
rcr
push
cmps
mov
xchg
mov
shr
(bad)
mov
in
xor
mov
test
mov
xchg
xchg
mov
mov
mov
add
mov
xchg
aam
and
outs
xchg
cmp
addr16
xchg
cmp
adc
xchg
sbb
mov
stos
sbb
daa
rcl
test
xchg
fistp
ds
xchg
sahf
mov
sti
mov
xchg
cld
push
lods
mov
sbb
data16
(bad)
imul
mov
xchg
ror
jecxz
lods
int
nop
xchg
sbb
dec
and
loop
sub
mov
std
scas
aam
add
mov
xchg
mov
jmp
cmp
adc
xchg
fild
call
push
mov
fwait
mov
test
(bad)
pop
enter
push
addr16
nop
jmp
jae
dec
inc
xchg
mov
mov
jne
mov
lea
imul
cmc
jmp
xchg
sbb
sbb
es
lahf
jg
jne
adc
outs
icebp
mov
pusha
add
inc
fist
xchg
jle
pop
push
sub
xchg
es
sbb
addr16
xchg
loopne
ret
sub
fwait
rcl
inc
xor
pop
mov
int3
push
pop
dec
out
adc
mov
push
mov
std
stc
jo
(bad)
xor
mov
aam
mov
cmpxchg
ins
sub
cmps
aaa
rol
jae
xor
or
ret
mov
sar
outs
jne
fwait
fwait
inc
sbb
xor
mov
(bad)
mov
mov
pop
jne
xchg
test
loop
addr16
and
sub
dec
sbb
sub
test
xchg
sahf
aam
add
leave
pop
bound
mov
(bad)
into
xor
xchg
in
push
and
push
repz
mov
adc
pop
out
mov
xchg
add
sbb
add
ret
fild
jb
or
mov
(bad)
jmp
loope
gs
scas
je
xor
test
xchg
adc
sub
jne
dec
cdq
outs
imul
movs
retf
xchg
inc
xchg
push
aad
cmp
dec
xchg
ins
shl
test
xchg
xchg
add
pop
icebp
out
cmp
mov
push
push
out
sbb
jne
cmps
scas
cmp
(bad)
ins
xchg
inc
and
in
fmul
cmps
(bad)
sbb
xor
xchg
jl
push
fsubp
push
sub
ret
cmp
fwait
push
out
mov
dec
rol
in
push
lods
xchg
shl
xchg
xchg
inc
sub
xor
mov
xor
xchg
imul
mov
push
stos
test
mov
xchg
add
xchg
push
push
and
xchg
or
push
jno
lea
je
mov
fwait
inc
popf
pop
push
in
fisttp
fisttp
int3
loop
or
mov
test
lock
fwait
and
adc
jmp
cmp
aas
xchg
bound
dec
mov
dec
nop
loopne
call
daa
nop
jle
adc
jl
test
fcomp
jmp
xchg
lods
ss
mov
jb
push
or
cmp
int
xor
lea
pop
xchg
inc
rol
push
xchg
fst
sti
and
adc
xor
xor
fldenv
fisubr
(bad)
test
xchg
pop
pop
call
stos
dec
fidiv
jnp
ja
test
xchg
lods
in
(bad)
js
cmp
cdq
test
push
xchg
jns
ins
sub
in
neg
mov
jb
xor
jae
add
stos
sub
mov
mov
call
or
lahf
fidiv
add
ds
dec
in
xchg
mov
xchg
inc
jo
in
test
xchg
xor
fwait
(bad)
cmp
aam
inc
or
sahf
add
call
xchg
clc
xor
xchg
push
add
test
cmps
mov
xlat
ins
cmp
push
ds
ret
mov
push
mov
pop
mov
xchg
cdq
push
mov
pop
popf
scas
xchg
add
adc
mov
loopne
jne
sub
outs
xchg
jmp
jl
cmp
add
xchg
arpl
sub
call
movs
xchg
clc
or
mov
xchg
cmove
jmp
out
imul
xor
pop
xchg
in
add
cmps
dec
aad
rcl
jecxz
xchg
xchg
add
pusha
ins
rcr
push
xor
or
push
rcl
xchg
inc
leave
mov
imul
jno
cmp
add
jmp
jl
outs
xchg
mov
(bad)
push
xchg
jmp
or
jmp
shl
dec
cmp
int
int3
mov
push
inc
mov
(bad)
addr16
sbb
out
les
xchg
cmp
jbe
push
mov
into
pop
push
cdq
add
pop
adc
hlt
add
add
pusha
xchg
clc
mov
lods
pusha
icebp
setne
push
xor
sub
pop
call
lds
into
or
adc
xchg
adc
not
and
repz
xchg
sub
dec
retf
jecxz
dec
mov
xchg
sbb
js
push
or
call
out
mov
aam
mov
mov
loopne
or
bound
int3
mov
jmp
mov
push
xchg
inc
add
xchg
in
or
xor
adc
rol
sub
cli
shrd
test
mov
jo
mov
loopne
loope
mov
(bad)
xchg
inc
cmc
pop
or
mov
cmp
xchg
(bad)
loope
test
sti
imul
shl
mov
or
push
sub
mov
in
fld
mov
xchg
lods
movs
fistp
pusha
pushf
ins
mov
xchg
add
mov
shr
xchg
add
in
retf
icebp
sub
fwait
js
mov
out
cmp
popa
popf
cmp
xor
add
jae
push
mov
int
push
xchg
aas
cmp
daa
scas
or
xchg
shr
push
jo
push
xchg
xchg
movs
in
es
pop
scas
mov
mov
fwait
jmp
imul
fild
add
sbb
outs
stos
div
arpl
xchg
jno
fst
pop
mov
xchg
pop
arpl
mov
lahf
jb
pop
inc
pop
jnp
lods
xchg
fld
or
or
mov
aaa
push
je
lea
mov
popa
cdq
imul
push
xchg
test
fstp
ins
imul
gs
push
fcom
nop
je
lock
ins
xchg
sbb
aaa
push
out
sbb
sar
mov
movs
mov
outs
fld
mov
outs
dec
sbb
add
int3
xchg
out
sub
pop
jmp
js
bound
int
mov
clc
adc
sbb
xchg
cmps
sub
push
xor
ror
in
xchg
in
sti
into
sub
scas
xchg
or
pop
sahf
mov
push
call
sub
test
jmp
mov
xchg
(bad)
jne
rol
jge
xchg
push
pop
add
cwde
pop
out
jle
iret
push
mov
popf
cmp
mov
aam
jle
fisttp
ror
xor
jmp
out
(bad)
cwde
lods
(bad)
xchg
or
ss
xor
jbe
sub
pop
add
retf
sub
dec
mov
adc
xchg
dec
(bad)
outs
enter
and
xor
cld
xchg
sub
dec
or
jp
and
mov
in
jg
xchg
sbb
sbb
mov
retf
sbb
jp
xor
lock
pop
xchg
lea
add
mov
mov
cmp
push
lods
repz
or
push
and
pop
leave
loope
jbe
xchg
and
aad
adc
aaa
mov
fild
dec
mov
sbb
das
lahf
xchg
lods
xchg
test
jecxz
push
rcr
dec
fdivr
mov
sbb
adc
pop
xchg
nop
rol
popa
sub
xchg
mov
loope
clc
jmp
or
xchg
xlat
test
add
mov
lahf
jp
inc
xchg
adc
js
sti
xchg
xchg
push
fincstp
sub
xchg
hlt
(bad)
pop
out
rcl
std
loopne
int
cmp
mov
imul
mov
das
xlat
adc
enter
jmp
fwait
sub
(bad)
or
push
movs
jge
cdq
push
int
movs
jbe
xchg
je
nop
and
cmp
sub
jle
xchg
push
in
fcom
xchg
je
or
rol
shl
lods
add
xchg
jmp
cmp
fst
pushf
lods
stos
mov
loop
hlt
sub
fs
jno
mov
fnstenv
(bad)
mov
xchg
xchg
jnp
sbb
inc
or
pop
push
jb
jle
push
clc
nop
pop
les
jae
push
xchg
push
pop
(bad)
xchg
xchg
pushf
mov
mov
sub
jo
out
inc
(bad)
jle
rol
rcl
cs
ss
push
nop
xchg
add
aad
pop
add
push
mov
movs
stc
aad
or
add
test
imul
pop
ins
xchg
fmul
mov
dec
daa
cmc
leave
pop
sbb
mov
idiv
xchg
xchg
dec
aam
rcl
push
bound
shl
mov
inc
add
jle
xchg
bnd
xchg
stos
dec
dec
sar
cmc
fwait
rol
or
movs
sub
cwde
sbb
lahf
test
call
xchg
into
xor
fmul
rol
xchg
xchg
div
add
ror
xor
loopne
xchg
sbb
mov
(bad)
xchg
adc
aad
sti
inc
popa
inc
xchg
jg
repz
stos
sbb
xchg
xchg
stos
mov
pop
ja
add
jns
xor
jge
xchg
sub
pop
xchg
add
in
fwait
mov
les
dec
ins
xchg
cli
cmp
lds
xchg
inc
cmp
stos
pushf
ficom
or
inc
adc
pop
dec
shr
mov
dec
ds
std
xchg
and
xor
xchg
fs
loope
sub
adc
mov
aas
mov
or
cmp
mov
add
shl
or
pop
std
mov
xor
pop
sbb
jle
fsubr
cwde
(bad)
sub
adc
cmp
fidiv
xlat
outs
or
pop
push
pop
xor
or
in
aad
pop
jns
je
push
mov
(bad)
pop
mov
retf
mov
dec
les
sbb
cmps
inc
mov
cdq
ds
push
xchg
mov
pop
xchg
sbb
pop
rcl
mov
pop
sub
push
push
imul
push
pop
xchg
fstp
sub
and
jp
or
loope
pusha
adc
pop
inc
call
fwait
cmp
les
inc
pop
dec
fwait
icebp
pushf
push
movs
ret
mov
add
stc
xchg
sub
jae
sbb
sbb
in
xchg
mov
imul
ds
or
jne
pop
(bad)
push
imul
jae
fwait
pop
jg
loop
xchg
sbb
hlt
pop
jns
imul
fwait
mov
inc
cli
pop
jne
cld
out
out
stos
dec
dec
mov
imul
fsub
xchg
aas
icebp
in
xchg
hlt
or
retf
aad
js
xchg
cld
dec
sbb
mov
push
or
xchg
xor
and
pop
xchg
jb
jle
adc
inc
or
(bad)
mov
mov
sub
out
xchg
aaa
nop
jmp
popf
xchg
xchg
mov
add
inc
mov
xchg
pop
fld
arpl
sbb
popf
mov
or
xchg
inc
xchg
hlt
jmp
pop
push
push
xor
mov
ret
inc
aam
dec
sub
pop
popa
data16
aas
test
xchg
mov
inc
out
pop
xchg
mov
mov
lds
push
push
aas
jecxz
xchg
cwde
ret
popf
std
sbb
push
dec
je
retf
sbb
and
sbb
imul
xchg
and
jmp
int3
xchg
cmp
sahf
pusha
mov
xchg
outs
js
not
inc
cmp
gs
fwait
enter
mov
push
jle
and
daa
and
cmps
cmp
fldcw
int
dec
fwait
xchg
icebp
or
std
mov
push
sbb
popa
xor
mov
xchg
or
push
ss
rol
icebp
xchg
(bad)
out
xchg
jne
add
and
mov
adc
xchg
repnz
xchg
mov
enter
inc
scas
cmc
cmps
mov
addr16
push
or
sub
outs
xchg
mov
movs
adc
xchg
and
ins
addr16
sbb
mov
lods
lods
test
popa
outs
add
fmul
push
and
pop
call
shr
daa
ins
outs
loopne
out
test
inc
ret
pop
cmps
inc
xchg
repnz
in
xchg
and
sbb
outs
mov
sbb
pop
xchg
arpl
cwde
les
xchg
push
scas
mov
mov
dec
mov
push
enter
ret
dec
sub
push
xchg
into
inc
in
or
in
push
fdivr
jmp
outs
dec
xor
aad
xchg
lahf
scas
push
adc
out
inc
xchg
jae
dec
pop
fisttp
dec
xchg
fsub
xchg
jbe
inc
inc
push
sahf
inc
xchg
inc
jle
arpl
sub
cs
add
(bad)
sti
inc
lock
int
jns
cmp
retf
lods
jl
sub
popa
xchg
mov
fidivr
addr16
xchg
stos
pop
mov
js
cwde
pusha
rcr
inc
ss
cmps
test
lock
not
es
mov
add
ja
jb
mov
std
xchg
je
push
sbb
cmp
adc
fisttp
das
aad
cs
loop
jo
les
pop
(bad)
test
xchg
mov
aaa
inc
test
not
cwde
cmp
cmps
xchg
pop
sbb
dec
push
loop
push
xchg
rcr
cs
sub
mov
mov
hlt
push
sbb
aam
inc
push
imul
xor
loope
jp
xchg
jmp
nop
imul
arpl
stc
jnp
stos
adc
sbb
es
scas
cmp
enter
xchg
sub
and
cmp
lds
mov
in
add
fst
(bad)
and
mov
xchg
cmp
cmp
xchg
ins
fiadd
jl
in
mov
aam
mov
sub
rcl
cld
sbb
fdivrp
mov
mov
ror
add
frstor
fwait
adc
inc
add
or
ja
dec
mov
xchg
inc
pop
ffreep
(bad)
loop
ins
xchg
inc
cmps
enter
in
push
sub
push
imul
xor
push
push
cwde
dec
cld
cmp
es
xchg
add
mov
mov
sub
push
adc
jb
xor
cmp
popf
sub
add
or
xchg
retf
stc
or
cli
xchg
(bad)
sbb
cmp
sbb
iret
dec
test
xchg
push
mov
xchg
dec
mov
jmp
out
dec
adc
push
arpl
mov
mov
push
and
fwait
push
test
repnz
inc
test
into
or
xchg
xor
mov
jle
or
mov
js
pushf
mov
arpl
repz
push
dec
or
shl
mov
mov
mov
test
xor
pop
and
push
sub
cld
dec
xor
or
ror
arpl
mov
xchg
dec
mul
mov
jne
stc
xchg
into
adc
jmp
xchg
cs
mov
ror
retf
jb
dec
xchg
test
xchg
adc
jno
jp
add
mov
push
pop
stc
les
sub
sbb
outs
mov
xchg
(bad)
cmps
mov
push
mov
je
xor
sub
in
lock
inc
shl
es
inc
lea
jae
cmp
push
mov
out
mov
call
push
jg
add
mov
cmp
adc
and
icebp
pop
add
fist
movs
mov
xchg
ins
pop
lods
nop
fwait
and
xor
and
xchg
xchg
cmp
ins
aas
fsub
pop
aam
lock
mov
dec
xor
mov
jo
fbld
hlt
inc
call
leave
(bad)
xchg
jne
rcl
lods
xchg
mov
jg
ficomp
addr16
xchg
push
cmp
adc
shl
xchg
dec
push
stc
adc
lods
jbe
or
dec
mov
push
mov
push
jae
imul
mov
mov
xchg
pop
xlat
pop
bound
xchg
mov
ficomp
jmp
add
bswap
sbb
push
cwde
dec
mov
aam
adc
push
imul
push
dec
test
rcl
int
sbb
sbb
mov
retf
xor
xchg
into
cmp
mov
inc
sub
hlt
mov
icebp
xchg
inc
cmp
push
xor
xchg
js
mov
push
push
mov
sbb
sbb
xchg
xchg
add
sub
popf
int
call
and
cmp
scas
push
push
std
(bad)
xchg
lock
push
ins
xchg
int3
hlt
fidivr
outs
xchg
xchg
mov
sar
mov
add
mov
xchg
cmp
push
add
popf
mov
cs
mov
int
cmps
sbb
xor
fwait
xchg
loope
adc
sti
cs
fnstsw
lock
inc
inc
jo
loopne
stos
xchg
or
jmp
inc
pusha
sub
xchg
in
mov
cmp
call
xchg
clc
or
lods
ss
outs
xchg
jmp
cdq
xchg
mov
shl
jno
xchg
cmp
mov
lock
mov
push
repz
adc
push
and
mov
int3
xor
fwait
pop
or
push
adc
test
leave
mov
dec
jecxz
(bad)
jle
loope
mov
pop
cmps
cli
dec
xchg
mov
dec
xor
sar
imul
xchg
mov
and
mov
jmp
addr16
jae
xchg
pop
aaa
sub
cwde
pop
clc
jne
mov
inc
scas
inc
xchg
and
xchg
test
inc
pop
jl
dec
or
lods
sub
cdq
mov
retf
push
pop
mov
lds
add
repnz
xor
adc
xlat
xchg
sbb
mov
ficom
mov
pop
cs
xchg
add
mov
or
xor
cmc
mov
ficomp
imul
jno
sub
push
xchg
ja
leave
(bad)
xlat
xor
jns
js
stos
shr
pop
je
stc
shl
push
xor
mov
xchg
nop
les
aam
fisttp
cmp
pop
push
aas
sbb
stc
sub
add
inc
xchg
cmp
mov
jl
cdq
sbb
stos
int3
xor
nop
cmp
dec
and
pop
or
clc
iret
xchg
adc
mov
or
and
in
mov
gs
adc
xchg
js
add
jb
pop
xchg
xor
les
inc
in
jno
movs
es
xchg
push
dec
sbb
mov
jecxz
xchg
mov
inc
sahf
in
pop
xchg
stos
inc
icebp
shl
cs
push
jecxz
retf
ret
std
js
xchg
sub
fimul
or
and
mov
xchg
mov
mov
enter
or
xchg
fdivr
(bad)
repnz
ret
or
and
mov
popa
xchg
cmp
cmp
ins
xchg
mov
fldenv
mov
rcl
mov
xchg
xchg
mov
xchg
add
pushf
imul
cmp
jmp
push
imul
out
cmp
mov
movs
rcr
lea
pushf
fwait
out
mov
and
in
xchg
cmp
es
sub
iret
adc
out
ret
shl
sub
pusha
xchg
pop
or
mov
pop
xchg
xchg
jg
jo
mov
and
iret
and
cmps
imul
leave
enter
jmp
push
xchg
xor
jo
xchg
pop
sub
xchg
mov
xchg
and
mov
jns
pop
mov
mov
xchg
mov
and
movs
sub
je
xchg
lds
inc
lock
jae
arpl
fwait
test
add
xchg
pop
iret
cmp
jle
inc
aam
sub
js
adc
movs
or
fwait
sbb
ins
loopne
sub
sub
pop
jns
mov
lea
jo
mov
cmps
retf
sbb
mov
into
lds
adc
pop
or
mov
(bad)
xchg
movs
inc
maxps
hlt
in
mov
xlat
das
aaa
popf
ja
cmp
mov
int3
loopne
(bad)
jo
js
mov
push
gs
xchg
fadd
test
xchg
(bad)
sub
and
retf
ja
adc
jbe
jle
mov
adc
ss
dec
icebp
xchg
fwait
jno
xor
test
xchg
xor
xor
scas
cmp
xchg
inc
les
pop
outs
add
dec
sbb
dec
sub
repnz
fwait
jecxz
outs
int3
mov
xchg
xchg
push
es
jno
mov
mov
ja
sahf
pop
inc
xor
xchg
inc
mul
mov
mov
xchg
adc
lock
xor
push
(bad)
jge
or
sub
and
stc
loope
inc
adc
or
test
push
add
sub
jg
push
inc
mov
push
push
dec
rcr
jnp
(bad)
and
and
ins
mov
or
adc
adc
scas
(bad)
popw
sbb
xchg
mov
jne
hlt
adc
or
sbb
or
mov
inc
dec
pusha
xor
push
add
test
add
sub
jae
sub
sub
mov
inc
sub
xchg
push
sbb
cmc
repnz
movs
(bad)
mov
pop
mov
mov
pop
mov
aam
adc
push
sbb
mov
ret
jno
iret
xchg
sbb
dec
in
pop
leave
jmp
add
xchg
mov
mov
leave
sbb
jbe
fwait
xchg
pop
test
loop
xchg
es
jo
cmps
popf
fwait
(bad)
xchg
push
jp
jnp
clc
loopne
inc
xchg
xor
push
out
or
leave
ret
cmc
and
fdiv
mov
cmp
retf
cmp
out
lock
test
mov
cmp
adc
xchg
test
inc
fistp
xchg
and
xor
call
mov
out
jecxz
sbb
es
adc
scas
pop
mov
xchg
push
cmp
lods
imul
adc
xchg
les
mov
icebp
sub
mov
and
out
pop
ret
or
out
cwde
aas
xchg
leave
sub
mov
jmp
stc
sbb
cdq
mov
adc
mov
je
shl
xchg
mov
pushf
retf
xchg
sahf
out
adc
pop
loopne
fwait
mov
fcom
sub
es
in
mov
(bad)
dec
call
add
push
cmc
loopne
xchg
push
out
push
adc
dec
xchg
lar
sti
shl
or
jmp
xchg
(bad)
cmps
out
mov
mov
repnz
sub
sub
fwait
xor
xchg
cmp
adc
ins
addr16
dec
je
xchg
xchg
mov
xor
ds
pop
inc
add
and
int
sub
sub
sti
push
sub
pop
cmp
adc
inc
sbb
xchg
movs
jle
stos
test
or
xchg
std
mov
retf
mov
and
fwait
xor
sbb
xchg
loop
dec
push
outs
pop
and
inc
xchg
aas
xor
(bad)
cwde
push
daa
push
ins
xor
xchg
call
jns
setge
sub
mov
cmp
lods
outs
mov
je
sahf
xchg
xchg
or
(bad)
mov
fldenv
lea
mov
xchg
inc
les
fwait
jp
mov
sub
repz
push
jle
mov
push
xchg
cmp
mov
or
enter
inc
pop
retf
xchg
mov
mov
adc
adc
push
fdivr
pop
mov
adc
cs
fst
jb
ins
xor
mov
push
mov
jne
dec
adc
mov
xchg
ja
in
scas
fcomp
xchg
and
ss
mov
lock
xchg
jg
push
pop
pop
loope
into
xchg
jl
jmp
jle
rcl
pushf
cmp
adc
loope
push
cs
cmps
mov
add
xchg
(bad)
mov
pushf
push
mov
xchg
call
sbb
fld
(bad)
xchg
repz
and
fadd
mov
fs
add
cmp
and
sbb
xchg
mov
in
in
dec
pop
xchg
adc
jae
xchg
sub
adc
pop
xchg
imul
popf
push
pushf
mov
and
dec
xchg
xor
(bad)
adc
jmp
sbb
stos
add
and
jg
xchg
inc
call
mov
lock
push
je
cmp
cs
and
ja
mov
adc
cmp
rcr
xchg
shr
jnp
sbb
retf
imul
enter
xchg
adc
fsubr
sub
mov
add
ins
sbb
aam
adc
dec
inc
sub
arpl
retf
adc
push
loop
pop
xchg
add
fidiv
pop
test
xor
(bad)
mov
mov
popa
mov
in
js
xchg
pop
sbb
and
in
and
mov
push
loop
sbb
sub
clc
retf
dec
pop
mov
xor
mov
pop
adc
in
(bad)
inc
cmc
std
cmp
adc
hlt
in
pop
mov
push
iret
cmp
sub
stos
test
call
scas
mov
lahf
sbb
sbb
xor
xchg
sub
lods
or
xchg
fst
inc
cmp
shl
mov
xlat
mov
xchg
(bad)
ins
cmp
jb
(bad)
ds
sub
outs
pop
jno
adc
inc
lock
enter
sub
xchg
es
ins
andps
js
mov
sbb
mov
movs
int
jns
test
lea
inc
cdq
jo
(bad)
xchg
pop
test
cmc
lea
push
xchg
scas
les
add
int3
ja
cmp
pop
cmp
xchg
call
cmp
push
sahf
daa
je
mov
xchg
add
das
mov
xlat
ror
push
sub
jmp
mov
cdq
repz
sub
rcl
aad
xchg
xlat
push
sub
(bad)
mov
movs
lahf
xor
hlt
xchg
icebp
dec
(bad)
jnp
adc
jge
movs
push
mov
sbb
jl
adc
fbld
xor
pop
dec
mov
mov
inc
(bad)
xor
les
out
aas
scas
rcr
xchg
fild
arpl
js
dec
xchg
cmc
je
ffreep
lods
ins
mov
aam
out
mov
test
idiv
xchg
push
test
in
mov
cmc
jmp
fwait
stc
push
fadd
gs
xor
fisttp
sbb
mov
xchg
loopne
(bad)
sub
sub
adc
fcom
and
add
push
std
je
jmp
rcl
mov
xchg
cmc
les
fcomp
movs
pop
add
int
jb
cmp
push
ins
add
mov
lock
xchg
jo
fdiv
pop
scas
addr16
ret
pop
jl
dec
shl
xor
cmp
add
gs
xchg
es
mov
inc
rcr
xor
fcmovbe
xchg
add
das
nop
mov
ins
hlt
xchg
movs
ds
pop
or
sbb
aam
xlat
mov
mov
mov
pop
and
dec
or
fist
push
in
test
jp
adc
stc
jle
hlt
mul
fldenv
add
mov
(bad)
cmp
in
xor
or
xchg
neg
adc
outs
in
xchg
adc
mov
lods
mov
in
inc
dec
call
or
sar
jmp
fbstp
xchg
ins
enter
and
sahf
cmc
iret
mov
sbb
sub
in
mov
je
iret
movs
xchg
or
dec
aam
xchg
into
pop
out
push
mov
mov
pop
pushf
or
test
dec
clc
cwde
pop
add
jo
fist
push
mov
call
pushf
jmp
je
pop
push
loopne
push
lods
xchg
push
inc
or
outs
out
test
movs
dec
and
xor
(bad)
ja
ret
fwait
push
mov
mov
jmp
xchg
cmp
sar
mov
lods
pop
add
and
xchg
mov
jae
cmps
cmps
and
aam
pop
inc
jne
fwait
push
rcl
mov
test
jno
lds
js
out
xchg
jle
push
test
rcr
or
adc
xor
je
ja
inc
jg
xor
mov
and
adc
pushf
mov
(bad)
cmp
jmp
call
mov
in
cmp
mov
or
pop
movs
xchg
(bad)
(bad)
aaa
popf
mov
aam
cmps
and
out
iret
pop
xchg
jns
xlat
mov
out
pop
jmp
add
jle
xchg
scas
stc
loop
jo
(bad)
and
jmp
mov
repz
je
sti
in
test
and
jo
fcmovbe
sahf
out
and
mov
lea
addr16
jae
not
pop
not
stos
outs
test
mov
inc
dec
add
retf
imul
pop
in
mov
pop
mov
in
jae
jno
jp
add
mov
jl
popa
xchg
push
xchg
xchg
dec
enter
sti
stos
mov
adc
mov
inc
sub
xchg
xchg
aas
cli
stos
jno
push
std
cdq
in
add
popa
push
leave
in
aaa
push
dec
mov
pushf
pusha
imul
inc
aad
sbb
add
shl
or
scas
movs
xchg
push
stc
xchg
int3
retf
xchg
dec
inc
push
cdq
ds
dec
ret
call
cmps
cmp
inc
inc
cmp
stos
cmp
jnp
jle
xchg
jp
xor
xchg
xchg
sub
stos
pop
jns
cwde
or
adc
cmp
out
retf
nop
mov
sub
adc
rcl
repnz
push
sti
push
je
fucomip
retf
cmp
xchg
and
mov
add
cmps
push
imul
cdq
jb
or
mov
out
xchg
mov
je
les
fwait
test
lds
repz
xchg
jg
jmp
or
sub
test
xchg
xchg
inc
bound
popf
fucomi
cmc
fwait
xchg
pushf
out
mov
in
push
into
mov
sbb
pop
out
push
ja
xchg
sub
pusha
xchg
out
(bad)
jmp
jg
jnp
xchg
loope
mov
push
xchg
outs
jle
xchg
cmp
sub
xchg
xor
aad
push
inc
adc
push
icebp
xor
gs
or
loop
pop
leave
cmp
in
shl
push
or
xchg
xor
aad
std
daa
leave
shl
sbb
xchg
jno
dec
pop
sbb
pop
pop
sete
jl
mov
sbb
ret
outs
mov
or
mov
aam
leave
or
dec
xor
inc
mov
xor
mov
scas
xchg
dec
movs
xchg
(bad)
wbinvd
xchg
outs
arpl
call
mov
ret
or
mov
dec
add
sti
ins
int3
xor
retf
add
jl
push
xchg
leave
pushf
xor
xchg
mov
rcl
mov
ja
stc
not
jno
pop
into
jle
(bad)
repz
lahf
fnstsw
imul
mov
mov
and
cmps
es
(bad)
xchg
jmp
call
(bad)
sub
iret
xchg
sbb
mov
int3
les
repnz
pop
iret
xchg
sub
retf
je
or
pop
loopne
and
push
xchg
out
mov
rol
retf
inc
adc
dec
les
push
daa
outs
enter
sbb
aad
mov
addr16
or
push
xor
stos
xchg
scas
scas
cli
rcr
xchg
(bad)
stc
aaa
cld
fbstp
loopne
mov
cdq
iret
xchg
je
scas
icebp
mov
lahf
sbb
inc
call
and
ret
bound
inc
pop
jmp
xchg
jmp
cmp
(bad)
fcomp
mov
and
inc
int3
mov
imul
sbb
inc
xchg
(bad)
push
cmp
jmp
(bad)
jle
xchg
xchg
lahf
push
retf
xchg
mov
inc
and
or
mov
inc
or
adc
xchg
imul
xchg
outs
inc
ficom
xchg
push
push
jae
ret
test
rcr
nop
inc
aad
stos
xchg
(bad)
lock
out
jecxz
lds
or
pop
add
sahf
push
xchg
xchg
adc
movs
repnz
in
mov
push
mov
xor
push
nop
loop
inc
dec
xchg
pop
xchg
or
cmp
add
or
xor
(bad)
mov
dec
jne
(bad)
ds
jo
xchg
dec
and
lea
xchg
pop
jmp
xchg
aas
or
xchg
ds
cmp
push
mov
pop
adc
lock
inc
add
pushw
xchg
mov
and
sti
sbb
add
pushf
bt
iret
cwde
jb
pop
xchg
sbb
adc
mov
fwait
fwait
enter
xlat
dec
(bad)
popf
mov
adc
mov
pop
aas
into
mov
pop
or
xchg
les
rol
sahf
fwait
xchg
int3
pop
mov
mov
xor
add
cld
in
mov
push
in
(bad)
jmp
call
fbstp
pop
imul
jbe
cmp
push
rol
pop
jo
pushf
xchg
push
das
ds
pop
sbb
rcl
mov
(bad)
in
mov
xchg
inc
sbb
xchg
push
cmp
les
xchg
inc
xacquire
sbb
mov
xor
xchg
pushf
sar
(bad)
sub
out
pusha
stos
add
icebp
xchg
sbb
popa
fidivr
movs
inc
imul
jl
xchg
sub
cmp
dec
mov
add
cmp
dec
inc
xchg
xchg
xlat
inc
add
push
cmpps
sbb
adc
ja
add
in
enter
push
sbb
cwde
lahf
daa
push
out
adc
aad
popa
or
xchg
cmp
in
push
jns
dec
xchg
xchg
jmp
jecxz
jl
lods
imul
sbb
icebp
and
retf
xchg
call
fucom
xchg
sub
cmps
cmp
imul
aam
push
lea
xchg
adc
pop
repz
xchg
lods
dec
leave
test
and
or
sub
idiv
mov
int
dec
fwait
xchg
dec
jle
adc
jecxz
adc
push
cmps
or
mov
xchg
push
clc
or
mov
lods
mov
jnp
ss
aam
hlt
scas
je
push
mov
mov
dec
aaa
xchg
mov
data16
xchg
mov
es
cmp
in
fwait
and
mov
mov
pop
scas
inc
dec
out
add
jecxz
sub
sbb
(bad)
lahf
jge
(bad)
xchg
mov
das
or
pop
mov
jg
xchg
mov
mov
mov
(bad)
xchg
inc
aam
mov
pusha
cmp
pop
fnstcw
xchg
inc
pop
int3
sbb
mov
and
xchg
sbb
outs
push
and
jl
sub
xchg
fwait
cmp
test
push
ficomp
xchg
push
loopne
xor
lea
call
cwde
shl
xor
jnp
adc
or
aaa
xchg
(bad)
jns
mov
and
xchg
lock
add
or
mov
ja
xchg
sti
inc
fs
popa
xlat
scas
jmp
scas
aad
aam
xor
mov
shl
in
xchg
stos
jp
jb
test
push
xchg
and
xchg
iret
call
sub
xchg
ins
cli
push
adc
leave
dec
mov
je
pop
push
js
xchg
out
idiv
jmp
xchg
aad
mov
cmc
dec
jnp
rol
out
push
xor
inc
pop
sar
dec
or
push
les
jmp
jo
test
jb
ins
xchg
fsub
mov
xchg
popa
mov
popf
outs
shl
jg
movs
inc
in
inc
cld
fs
ror
push
in
test
int
(bad)
sahf
xchg
in
jbe
test
push
popa
push
js
xor
jp
pop
mov
aam
jmp
movs
(bad)
es
and
xor
or
mov
mov
rdtsc
xchg
fdiv
sbb
pop
mov
jp
xchg
xchg
outs
cmp
int3
fsubr
adc
mov
cmps
aam
xchg
inc
or
ret
out
setnp
cmp
cld
xchg
xchg
je
fisttp
xchg
adc
push
or
inc
mov
lods
(bad)
adc
call
inc
xchg
enter
or
mov
ds
jo
leave
and
mov
and
add
mov
mov
adc
xchg
adc
ds
stos
dec
popa
push
test
repnz
pop
add
or
ficom
jmp
(bad)
jmp
sbb
enter
xchg
outs
fs
cwde
mov
dec
cli
loopne
js
icebp
jmp
or
push
pop
mov
and
xchg
ds
xchg
in
ins
ret
inc
stc
mov
dec
test
retf
in
sbb
mov
and
jge
jns
iret
test
bound
inc
inc
add
xchg
ror
popf
xor
xchg
and
dec
test
mov
movs
xchg
mov
popf
mov
cmp
(bad)
jno
je
sub
movs
pop
add
inc
(bad)
mov
mov
cmp
clc
fs
xchg
aaa
pushf
cmp
dec
push
cld
cmp
xor
cmps
xchg
xor
into
aaa
nop
mov
mov
mov
mov
js
es
adc
sbb
std
lock
addr16
mov
mov
cmp
dec
mov
fistp
xchg
inc
call
mov
pop
fwait
test
mov
mov
adc
jge
push
inc
sub
jg
xchg
mov
push
loopne
cdq
in
xchg
sbb
addr16
mov
push
or
fst
jo
push
xchg
je
xor
xlat
xchg
and
enter
jge
xchg
sbb
(bad)
imul
out
or
rol
outs
punpckhwd
leave
or
adc
xchg
add
mov
cmp
int3
xchg
js
(bad)
sti
sub
xchg
push
adc
jp
xchg
adc
(bad)
fisub
das
xchg
push
dec
mov
cmp
xchg
out
add
mov
ret
ins
push
pop
shl
sbb
jp
stc
jmp
dec
xchg
xchg
sub
faddp
mov
push
pop
call
dec
mov
xchg
and
aaa
xor
mov
fcom
sar
cwde
mov
fnstsw
ins
loope
adc
xor
into
xchg
add
cdq
jmp
inc
test
or
sbb
push
dec
sbb
in
lods
int
rcl
push
rol
adc
loop
js
cmp
pop
mov
ret
dec
pop
shl
pushf
sub
retf
popa
xchg
sti
(bad)
mov
xor
push
xchg
cmps
sbb
jp
xchg
je
out
cmp
mov
push
jno
sbb
xchg
adc
test
fwait
inc
pushf
aas
mov
xchg
rol
fdivr
scas
mov
cmp
cmp
or
mov
xchg
jns
cli
sti
inc
(bad)
xor
dec
adc
movs
out
cld
mov
cmps
in
dec
in
push
enter
shl
xchg
into
xchg
push
test
push
fcom
ret
js
mov
ins
xor
stc
mov
test
sbb
add
data16
bound
fist
gs
xchg
fs
std
adc
in
movs
mov
vmwrite
xchg
sub
hlt
into
mov
xchg
sub
mov
in
push
pop
dec
xor
fdiv
les
mov
mov
push
dec
pop
hlt
mov
pop
push
or
cmp
ins
icebp
mov
cmps
fwait
dec
mov
gs
adc
je
fwait
js
cmc
mov
push
scas
jge
fs
xchg
into
push
ss
xchg
test
ins
dec
xchg
sbb
ins
cmp
and
(bad)
sti
cwde
fs
sub
dec
jbe
xchg
pop
mov
outs
pop
mov
mov
inc
push
hlt
out
xchg
xor
fbld
loop
(bad)
ror
sub
retf
xchg
jecxz
repnz
iret
mov
sbb
push
sti
ins
jp
rol
xchg
xchg
mov
push
xchg
xchg
mov
xor
test
outs
xchg
shl
hlt
es
jae
cmps
push
jns
mov
fwait
xchg
pop
arpl
sahf
xchg
jmp
cli
retf
xchg
push
outs
push
mov
xchg
mov
ret
xchg
jno
push
jbe
pusha
inc
out
pop
push
mov
pushf
xchg
or
(bad)
fsub
jge
sub
dec
fs
xchg
repz
push
div
nop
sub
stc
das
loop
fsub
inc
outs
imul
xchg
xchg
pop
or
cmps
sub
cmc
mov
lock
push
xchg
clc
sbb
nop
push
lods
pop
(bad)
cmps
sti
sar
jb
pop
sub
iret
repz
mov
xchg
jmp
jge
xor
pop
xor
retf
daa
or
or
jno
mov
mov
stos
dec
fcom
mov
ins
xchg
retf
in
lods
movs
stc
call
or
cwde
jge
imul
mov
push
pushf
sbb
xchg
clc
xchg
inc
fisttp
cmp
je
sar
gs
data16
jo
add
xchg
dec
cmps
sub
clc
or
shl
xor
jl
xchg
jno
ss
add
jne
dec
jp
sti
lock
xchg
rol
or
xchg
jmp
js
xchg
cdq
push
les
aam
je
xchg
(bad)
xor
mov
cs
adc
add
fisubr
cmps
cmp
dec
pop
xchg
inc
cdq
sub
add
ret
lock
push
push
movs
pushf
sbb
sti
xchg
fmul
mov
xchg
or
ins
pop
xor
or
xchg
cmps
jb
ins
lods
mov
rcl
sub
mov
mov
pushf
dec
sbb
mov
int
aam
into
mov
xlat
movs
cld
(bad)
hlt
mov
mov
mov
mov
mov
dec
dec
xchg
data16
sbb
ror
hlt
ins
ss
pop
add
mov
add
xor
pop
sub
adc
je
add
mov
mov
lds
rcl
cmp
and
sub
daa
inc
jle
mov
xchg
xor
call
inc
sbb
xchg
not
dec
mov
rol
ins
adc
in
out
xor
sti
xchg
xchg
mov
cmps
and
loopne
xchg
add
aad
stc
nop
xchg
test
sub
and
jae
sub
cmc
mov
push
in
adc
ds
mov
lods
ficom
xchg
mov
cmps
movs
adc
stos
mov
push
test
jae
mov
shl
cwde
mov
dec
jle
adc
stc
jae
out
fcomip
or
cmp
xchg
sbb
jnp
fcom
mov
xchg
pushf
fwait
or
xchg
xchg
xchg
sbb
out
bound
mov
lfs
xchg
xor
ret
lock
add
and
xchg
xchg
push
shr
sub
aad
mov
std
sub
fisttp
adc
pushf
cmp
xchg
ss
cmp
enter
repnz
pop
mov
pop
xchg
ins
aam
(bad)
pop
sub
stc
add
jo
jg
add
cli
iret
gs
in
pop
cdq
mov
cmps
call
mov
(bad)
mov
mov
mov
mov
bound
or
mov
mov
pop
jmp
add
xor
popa
xchg
adc
icebp
dec
xchg
or
mov
lods
xchg
js
and
fwait
sub
adc
out
mov
loopne
or
arpl
dec
ffree
je
push
cmp
lds
mov
outs
xchg
fld
cmp
sbb
adc
xchg
and
ins
fwait
inc
pop
and
imul
enter
push
xchg
stos
pusha
mov
jne
jmp
pop
fld
xchg
cld
cli
js
dec
out
dec
xchg
pop
lahf
inc
popf
jp
loope
loopne
lahf
xchg
mov
sbb
repz
mov
aas
icebp
xchg
cmp
sub
xchg
es
mov
push
repnz
pop
lock
xchg
or
xchg
popf
xchg
and
cmc
(bad)
cmp
mov
jle
xlat
xor
ror
or
xor
sub
loopne
xchg
jno
test
jb
nop
pop
lds
mov
mov
cmp
stos
add
push
sub
fdiv
cmp
sbb
repnz
in
mov
call
mov
out
stc
push
movs
stos
xchg
neg
call
sub
xchg
jbe
cld
icebp
dec
pop
xor
std
sbb
mov
sar
mov
movs
inc
ds
fist
ror
adc
clc
push
shr
and
push
cli
jne
aad
mov
repnz
fs
xor
xchg
call
arpl
xchg
rcr
test
sti
cmp
mov
xchg
pop
pushaw
adc
cli
inc
movs
xchg
outs
add
jo
inc
std
iret
mov
pop
sub
xchg
cmps
rcl
scas
fwait
pop
std
imul
fist
push
inc
cdq
movs
xchg
shl
ins
inc
les
out
mov
jg
enter
lods
adc
xchg
(bad)
sbb
lahf
dec
iret
xchg
addr16
sbb
xor
xor
retf
sar
adc
call
adc
aam
out
ss
sbb
jmp
gs
retf
fild
xchg
push
jecxz
pop
pop
or
adc
call
pop
dec
pushf
ficom
push
xchg
add
addr16
out
lds
push
rcr
sub
xchg
and
push
mov
rcl
in
shl
xchg
cs
out
cmps
xchg
adc
in
pop
xchg
inc
enter
je
loopne
outs
sub
xchg
in
dec
xor
jg
js
xchg
out
sbb
mov
(bad)
jecxz
cld
mov
inc
push
xor
pop
scas
out
jmp
add
(bad)
cli
leave
mov
xchg
xlat
jae
test
stos
rcr
sub
mov
mov
add
fidivr
jg
xlat
dec
ins
ja
xchg
xchg
xchg
xor
ins
outs
xchg
jp
or
es
imul
scas
lds
lods
mov
or
addr16
cld
mov
sub
pop
and
sahf
repz
stos
out
inc
add
and
xchg
cwde
or
pop
cmp
push
or
xchg
sub
ja
sbb
pop
lods
rcl
cmps
sbb
xchg
dec
out
xchg
mov
inc
mov
ret
xchg
pop
adc
aaa
xchg
or
xchg
ins
sub
leave
mov
std
int3
rcl
sub
inc
mov
cmp
cwde
mov
add
xchg
cld
mov
retf
dec
xchg
xchg
inc
cmp
mov
das
mov
sub
add
mov
xchg
pop
jmp
pop
in
add
mov
cmp
adc
es
fimul
lds
jno
jbe
mov
xchg
adc
cdq
dec
pop
xchg
adc
test
adc
ins
inc
retf
push
xchg
adc
jo
adc
std
cmp
xchg
aad
rcl
mov
add
fs
pop
(bad)
xchg
repnz
lea
xchg
adc
mov
xchg
dec
pop
scas
mov
push
add
in
xor
popf
xchg
xor
std
mov
inc
popa
jl
sub
xchg
fst
in
test
cmp
xchg
pushf
sbb
fsub
dec
add
xchg
xchg
and
pop
stos
xor
mov
pop
pop
xchg
adc
ins
xor
sbb
xor
hlt
xchg
xchg
xor
repz
(bad)
mov
xor
aam
xchg
xchg
ret
xor
enter
fisubr
xor
lea
ficom
jno
pop
xchg
bound
hlt
test
inc
cld
sub
pop
add
cdq
sti
push
rol
inc
jle
add
cmp
(bad)
test
loope
pop
inc
and
add
mov
add
aam
shrd
stos
mov
xchg
push
sbb
retf
pop
js
sub
jo
mov
mov
lods
xchg
pop
pop
mov
or
or
ss
sbb
mov
scas
movs
push
fs
test
ins
add
cmp
xchg
jle
dec
pop
inc
outs
int
xchg
sbb
mov
mov
je
gs
mov
hlt
cmc
xlat
xchg
aad
jmp
in
mov
movs
adc
adc
xchg
(bad)
aaa
xchg
pop
fwait
and
pop
xchg
and
lds
push
sbb
xchg
sub
pop
cdq
mov
in
mov
dec
not
pop
push
push
pop
fwait
stos
push
push
loope
pop
jp
ins
inc
push
adc
hlt
cs
test
jae
cdq
push
sbb
sub
add
sahf
in
rcl
repnz
mov
push
loop
shl
lods
cmp
out
cdq
xchg
or
xor
fiadd
stos
add
cmp
mov
adc
xchg
call
cld
adc
dec
mov
xchg
cmp
and
mov
cmp
pop
mov
jg
fwait
xchg
pop
call
xchg
sub
(bad)
les
cmp
movs
cdq
test
fwait
pusha
fwait
mov
xchg
icebp
sti
adc
stos
xchg
dec
scas
push
jno
(bad)
bnd
aad
jg
xchg
in
jle
mov
xlat
and
hlt
push
sub
(bad)
test
into
pop
mov
sbb
sti
fs
sub
xchg
shl
aaa
xchg
cvtps2pd
(bad)
fisttp
xchg
sub
cmp
jae
jno
mov
(bad)
(bad)
stos
jmp
(bad)
in
rol
pop
outs
iret
aam
add
push
xchg
mov
xchg
jno
jnp
mov
ins
inc
dec
mov
push
fld
pusha
scas
xchg
loope
sub
test
sub
hlt
push
or
retf
mov
mov
pop
das
mov
push
rcr
cdq
xchg
ret
call
loop
dec
xchg
jmp
bound
out
and
lahf
repnz
ret
xor
stos
call
push
sbb
fidivr
clc
pop
cld
adc
xchg
(bad)
mov
and
xchg
out
xchg
sar
mov
mov
aam
jbe
out
jns
xchg
mov
and
shr
pop
push
xor
xchg
dec
inc
test
nop
dec
rcl
xchg
push
adc
lock
in
ja
xchg
je
push
sar
rcl
retf
adc
xchg
add
inc
jbe
xchg
test
shl
mov
add
hlt
popa
xchg
xchg
(bad)
xchg
scas
retf
dec
(bad)
sbb
mov
xchg
pusha
push
mov
loopne
xchg
xchg
cmp
popa
cwde
dec
pop
cli
sti
push
cwde
fs
xor
test
fwait
xchg
int
sbb
dec
mov
xchg
pushf
retf
into
mov
(bad)
aad
adc
js
adc
div
inc
push
mov
ins
sbb
mov
or
xchg
int
in
shl
test
xchg
or
out
or
dec
and
mov
shl
iret
imul
ds
xchg
arpl
add
xchg
pop
jmp
jp
jl
xchg
(bad)
and
xor
aaa
xchg
imul
enter
xchg
test
push
xchg
gs
not
inc
jb
xchg
popf
push
data16
je
xor
in
cmp
dec
imul
outs
aad
cdq
hlt
adc
jle
add
stos
dec
fcom
mov
gs
xchg
push
fstp
mov
pop
push
mov
xchg
int3
aas
fcomp
adc
jmp
xchg
jno
dec
in
or
int
push
adc
pop
adc
push
test
xchg
sbb
imul
mov
and
push
mov
push
pop
pop
push
cli
and
call
ret
sub
not
push
ret
cld
mov
(bad)
aad
fcom
out
pop
mov
ds
pop
mov
aas
xchg
adc
xchg
sbb
in
aad
or
pop
cld
xchg
cmps
and
je
clc
jl
cmp
push
dec
pop
repz
sbb
xchg
xchg
push
movs
loope
xchg
sar
xchg
xor
mov
fs
ss
mov
cld
cmp
loope
jbe
xchg
push
mov
cmp
nop
fld
adc
into
fld
popf
mov
jo
fwait
sub
iret
push
aam
cdq
(bad)
mov
mov
div
mov
and
add
fwait
sbb
inc
rol
xchg
inc
push
pop
adc
mov
push
sahf
and
jge
mov
int
jnp
in
mov
fdiv
xchg
in
lods
xchg
add
push
cli
xchg
fisub
cld
xor
rcl
dec
mov
xor
xchg
jge
lsl
ds
cmc
cmp
(bad)
shr
push
xchg
and
pop
js
add
in
or
pop
xchg
pop
xor
jnp
fisub
xchg
xchg
in
cmp
lods
pop
mov
or
xchg
(bad)
xor
pushf
fld
sete
icebp
stc
xchg
mov
sbb
xor
jae
push
fcmovu
sub
(bad)
xchg
push
cli
adc
adc
sbb
xchg
shl
or
sub
inc
and
sbb
mov
pop
xor
xchg
ret
jns
push
xchg
or
call
inc
xchg
dec
push
repnz
std
ror
(bad)
xchg
fwait
pop
mov
xor
sbb
mov
dec
push
cld
cdq
push
fwait
daa
pop
out
inc
mov
ficom
jbe
push
xchg
adc
iret
lea
or
shr
cmp
xor
out
sti
push
ins
mov
push
das
push
add
sub
xchg
sub
mov
mov
cmp
jge
rol
sti
xchg
and
dec
ins
adc
mov
xchg
lock
sbb
gs
lods
add
inc
sahf
or
mov
jno
test
jne
and
(bad)
add
mov
and
push
push
mov
mov
dec
cld
jmp
lock
mov
xchg
pushf
xor
push
scas
pop
inc
sbb
push
xchg
mov
sub
and
scas
(bad)
xchg
shl
stc
xchg
sbb
or
adc
add
and
xchg
mov
push
loopne
xchg
mov
ret
test
or
fwait
mov
xchg
xor
mov
sbb
xchg
pop
fadd
push
adc
or
sub
hlt
xchg
ret
and
pop
pop
pop
sbb
rol
xchg
or
dec
push
or
or
and
pushf
pop
mov
push
mov
mov
inc
xchg
rcr
cdq
xchg
fs
jl
xor
(bad)
xchg
std
jmp
xchg
ficomp
addr16
dec
push
pop
sub
sub
shl
or
xchg
lahf
test
xchg
mov
in
sahf
xchg
loopne
xlat
dec
loop
iret
adc
movs
jbe
or
into
loope
xchg
es
(bad)
and
in
mov
hlt
bound
cmc
jecxz
cs
das
cli
and
mov
out
int3
std
and
jno
sti
sbb
cmc
les
mov
inc
xchg
retf
jle
hlt
dec
mov
inc
push
jo
push
cmp
jae
mov
imul
lock
ror
sub
inc
test
and
xchg
adc
mov
lds
ins
leave
jle
addr16
jl
xchg
std
repnz
out
(bad)
lds
xchg
call
dec
(bad)
sub
int3
fst
add
mov
xchg
mov
adc
mov
retf
sub
xor
xchg
stos
sbb
pop
and
mov
retf
ja
mov
inc
or
lock
mov
retf
mov
inc
bswap
xchg
shl
ins
xchg
jl
cld
adc
pop
stos
xchg
hlt
cmps
lods
mov
pop
lods
stos
xchg
outs
xor
and
push
xor
xchg
inc
imul
adc
sbb
jns
xchg
xchg
ins
push
std
js
sub
push
xchg
aam
movs
inc
jbe
xchg
rcr
and
jae
mov
inc
aaa
mov
sar
in
push
mov
popa
in
dec
adc
and
popf
pop
out
(bad)
out
movs
cli
cmp
fimul
dec
ror
add
jns
rcr
mov
fidivr
push
mov
scas
sbb
jl
rol
int
sbb
pop
push
inc
inc
lock
xchg
dec
sbb
sub
push
div
cmp
ins
inc
fist
ret
fidiv
push
in
fisttp
dec
pop
icebp
push
push
imul
retf
mov
sbb
cmc
(bad)
in
stos
pop
dec
xchg
out
into
sti
ret
dec
push
xor
push
adc
dec
lock
mov
sub
lods
nop
mov
xchg
dec
push
and
cmps
or
dec
mov
cmp
inc
add
cmp
(bad)
stc
xlat
mov
fistp
repnz
xchg
rol
aad
mov
pop
adc
mov
je
mov
loopne
xchg
fcom
push
xchg
push
loop
stos
cs
fst
popf
mov
inc
aam
loope
add
mov
push
adc
fs
xchg
inc
arpl
and
inc
mov
mov
mov
xor
sbb
jl
xchg
in
call
fisttp
or
xchg
xor
adc
ds
ins
in
xchg
or
(bad)
adc
push
not
adc
mov
daa
out
xchg
xchg
add
jns
nop
xlat
aam
mov
mov
dec
xchg
pop
or
mov
jle
xor
(bad)
retf
or
and
movs
clc
adc
xchg
pop
jmp
cmp
pop
loopne
aaa
imul
xchg
mov
mov
imul
jne
xchg
push
lock
mov
or
cdq
pop
in
xchg
test
dec
bound
mov
jnp
cwde
jecxz
rcr
jns
sti
or
inc
in
xchg
mov
out
jnp
mov
jb
popf
mov
xchg
rcl
or
aas
add
outs
dec
gs
pop
cmp
mov
mov
push
mov
test
cs
pop
or
mov
aam
lahf
sub
jmp
xchg
adc
je
mov
or
cmc
std
lea
sbb
xchg
loop
jae
int
xor
dec
icebp
inc
rol
repnz
ficom
add
lods
std
stos
xor
int
cwde
sahf
add
mov
data16
add
sub
adc
cmc
mov
xchg
rol
mov
sti
mov
cmc
jecxz
mov
cdq
mov
iret
mov
mov
aas
jmp
lsl
pop
and
jmp
cdq
inc
pop
xor
mov
mov
pop
inc
ss
aam
mov
cmp
cli
icebp
nop
js
xchg
pop
mov
lods
xor
mov
rcl
and
cmc
mov
mov
test
xchg
cmp
arpl
les
aaa
adc
jle
sahf
loope
call
loop
stc
jecxz
aam
mov
rol
stos
xchg
xchg
adc
pop
fs
mov
mov
mov
xlat
cmc
sbb
add
outs
mov
or
clc
fs
cmc
inc
mov
or
mov
xchg
call
pop
arpl
xchg
sub
outs
and
popa
mov
jbe
push
scas
pop
mov
sbb
push
mov
push
cld
cmps
in
and
xchg
add
sbb
sub
icebp
aam
pop
in
mov
bound
xchg
dec
lea
fidiv
cs
cmp
out
xchg
or
in
add
xchg
mov
mov
push
test
xchg
sti
inc
popa
mov
icebp
dec
or
in
dec
jns
aas
mov
(bad)
xchg
cmp
shl
pusha
add
imul
test
inc
xchg
add
adc
cwde
jge
and
mov
sub
cli
test
cmp
pop
xchg
scas
pusha
ret
nop
shl
in
xchg
xor
mov
pop
fistp
adc
out
push
inc
xchg
imul
jp
rol
mov
or
dec
xchg
fs
add
xchg
xlat
loope
cmp
xchg
jmp
repz
loopne
add
cmp
sbb
ins
inc
out
and
lods
mov
imul
mov
pop
push
xchg
cmp
ss
js
arpl
icebp
sbb
xchg
out
jge
rol
cs
mov
pop
or
std
jo
(bad)
and
not
xchg
cmp
push
movs
les
shr
xchg
cld
hlt
aad
add
in
or
std
or
retfw
mov
repz
mov
mov
int3
xchg
(bad)
js
fs
jno
mov
neg
iret
inc
xor
inc
xchg
or
mov
add
push
adc
mov
xchg
call
fist
xchg
lods
ror
mov
mov
mov
ror
xchg
fisttp
sub
std
mov
cmp
xchg
pushf
int
popa
push
jb
mov
inc
xcrypt-ctr
cmps
sbb
dec
loopne
in
pusha
ins
mov
xor
push
push
push
adc
test
jno
pop
bound
mov
icebp
mov
add
in
xchg
lock
ret
mov
adc
lods
icebp
pop
sbb
adc
gs
popf
cmp
adc
inc
int
sub
dec
sub
add
inc
lock
mov
adc
cmps
or
(bad)
dec
add
popa
mov
mov
ss
or
retf
fsub
xchg
js
and
inc
push
ret
xchg
test
or
(bad)
push
loopne
sub
or
movs
mov
popa
das
xchg
xchg
jmp
in
enter
or
xor
xchg
rcr
call
adc
xchg
cmps
rol
jae
iret
not
pop
scas
cwde
xchg
gs
mov
movs
xchg
sub
cmp
xchg
int
adc
xchg
cwde
mov
sub
add
rol
cld
adc
int3
dec
in
pop
dec
mov
test
jp
xchg
test
mov
and
jb
loop
into
xor
dec
push
mov
push
xor
pop
gs
xchg
rcr
adc
xchg
inc
mov
(bad)
fsubr
or
or
xchg
lds
push
jo
sbb
adc
pusha
rcl
inc
fisubr
add
pop
xor
sub
lds
outs
pop
ret
cwde
fild
ret
or
xor
cmps
fwait
shl
xchg
je
iret
xchg
xor
mov
hlt
sbb
xchg
adc
push
push
cmp
sbb
sbb
rcl
mov
cmps
cdq
cli
lahf
adc
push
imul
inc
rcl
xor
mul
repz
xchg
inc
push
daa
das
and
jmp
add
repz
xchg
je
mov
cmp
xchg
push
xchg
fimul
sbb
(bad)
jbe
xchg
cmc
rol
sbb
jb
xchg
es
inc
xchg
dec
sub
sub
xchg
push
jg
push
retf
loop
sub
mov
call
jb
pop
and
dec
jmp
xor
lds
xchg
push
push
xchg
ja
mov
fist
dec
call
adc
adc
sub
add
adc
shr
xchg
ins
hlt
add
mov
cmps
pop
and
xor
cmp
xor
out
in
sbb
sbb
and
cmps
repz
xor
cli
xchg
sbb
pusha
xchg
mov
xchg
loop
sub
in
jns
jnp
mov
cmp
repnz
and
ds
push
xchg
or
bound
pop
pop
test
xchg
jg
xor
push
fmul
cmps
xchg
out
clc
jmp
mov
jge
cmps
xchg
xlat
ins
push
pop
ret
dec
xchg
movs
xchg
mov
and
push
addr16
mov
xchg
aam
push
aad
mov
sbb
hlt
jns
jecxz
sub
imul
scas
xchg
les
and
aad
adc
adc
sub
icebp
loopne
outs
movs
xchg
xor
(bad)
adc
rol
pop
sub
inc
inc
jbe
xchg
pop
(bad)
push
ss
xchg
into
add
push
sub
xchg
inc
aam
xchg
outs
das
xchg
movs
and
push
xchg
in
outs
xchg
test
test
int
and
xchg
push
push
test
fisub
pop
ret
dec
xchg
xor
hlt
or
ins
pop
jb
sbb
push
loop
pop
test
jge
call
xchg
and
dec
popa
inc
retf
test
xchg
jae
outs
xor
int3
jmp
je
inc
jne
adc
inc
pop
mov
push
test
je
xchg
push
and
scas
xchg
jne
jb
adc
sub
adc
adc
cmc
add
push
call
cdq
pop
sbb
ins
pop
mov
scas
or
mov
dec
ja
dec
mov
int3
jg
retf
(bad)
xchg
fucomi
outs
jnp
mov
push
aaa
xchg
jae
pop
push
pop
mov
ins
sub
stos
inc
xchg
cmps
jle
enter
add
xchg
and
data16
add
mov
xchg
aas
mov
mov
mov
pop
int3
cs
arpl
adc
xchg
stos
ins
pushw
sub
xchg
das
xor
mov
(bad)
fwait
sub
movs
fdiv
ins
push
and
mov
pop
stc
cmp
inc
xor
cdq
xchg
fsubr
gs
push
hlt
mov
dec
xor
mov
out
pop
fwait
xchg
pop
mov
or
mov
or
add
xchg
aaa
test
fs
cmp
lods
xchg
data16
cmc
xchg
int3
popf
clc
xchg
test
ficom
int
sbb
int3
dec
inc
adc
sbb
xchg
sub
fsubr
mov
cmc
ss
mov
xchg
cld
xor
xor
mov
pop
xchg
adc
sub
call
xchg
pop
adc
and
xchg
repz
mov
jp
push
xchg
and
pop
mov
push
mov
xchg
mov
test
repnz
outs
in
enter
loope
adc
xchg
fstp
xlat
(bad)
out
in
test
adc
sbb
std
push
pusha
sbb
xchg
push
fst
push
jnp
xchg
cmp
xchg
or
mov
xchg
xchg
mov
or
inc
pop
xor
dec
sub
(bad)
hlt
jl
movs
jle
push
adc
jno
pusha
xchg
and
gs
lods
pop
sbb
dec
mov
mov
imul
je
call
xor
sbb
sub
test
leave
xchg
add
add
and
fst
dec
aas
ja
cld
pop
xchg
cmp
and
mov
mov
jg
adc
jmp
repnz
fwait
dec
mov
(bad)
sbb
xchg
bound
cli
in
xchg
xchg
and
out
aaa
mov
lock
(bad)
outs
gs
fwait
push
jp
call
add
cmp
mov
inc
mov
mov
out
das
dec
rsqrtps
movs
retf
push
xchg
stc
xchg
enter
mov
pop
sub
popf
jl
retf
sub
xchg
and
fnstenv
(bad)
aaa
xchg
pusha
(bad)
imul
loop
push
inc
cmp
movs
je
or
jecxz
sbb
mov
iret
repnz
sub
imul
pop
lods
add
push
cmp
test
or
jnp
pushf
fwait
xchg
inc
mov
in
xor
jl
cs
(bad)
clc
idiv
mov
out
jae
scas
imul
adc
(bad)
call
jb
xchg
(bad)
les
xchg
sahf
call
repnz
je
iret
jl
xchg
shl
rcl
push
addr16
enter
or
jnp
test
fidivr
dec
ja
pusha
and
xchg
ret
jo
sub
mov
push
enter
jae
pusha
jecxz
(bad)
push
jbe
xchg
sub
lds
inc
lea
push
mov
js
mov
rol
adc
jno
pusha
js
xchg
or
jle
and
push
scas
lods
sub
xchg
dec
cmp
jp
xchg
mov
jo
loop
je
lods
push
xchg
mov
mov
pop
movs
ss
push
jle
mov
inc
adc
loop
push
pop
or
lock
adc
sbb
cmp
(bad)
pop
pushf
xchg
cmp
mov
or
jle
ds
iret
ficom
jg
mov
in
inc
xchg
cmp
sub
add
test
fld
jge
or
pop
inc
ret
xchg
xor
sub
loopne
int
xor
adc
xor
pushf
jmp
gs
movs
cld
lea
mov
pop
fst
or
in
push
rcr
dec
add
add
fwait
and
jecxz
xor
xchg
cmp
(bad)
xchg
mov
dec
mov
fs
sub
mov
loope
pop
shr
into
or
inc
adc
push
mov
xchg
aam
push
cmp
mov
fwait
pop
push
mov
int3
into
dec
or
sub
sbb
xchg
jl
xchg
sti
data16
cmp
adc
add
xchg
lods
and
cmp
stos
scas
fld
add
test
scas
cwde
dec
add
sub
adc
sbb
xchg
fdiv
retf
pusha
int
push
fs
cmps
imul
sti
addr16
inc
xchg
add
mov
js
loope
movs
or
dec
cmp
pop
pusha
xchg
pop
inc
sbb
xchg
dec
push
es
inc
mov
loop
jae
push
(bad)
mov
xchg
into
int
xor
xchg
jmp
mov
stos
call
push
and
out
add
mov
popf
push
push
in
ret
mov
pop
idiv
ja
movs
leave
xchg
sbb
push
mov
imul
or
es
pop
push
jmp
adc
shl
xor
int
push
adc
je
fwait
rcl
mov
push
xor
xchg
xchg
mov
add
xchg
mov
je
ror
mov
shr
xchg
packsswb
test
dec
xchg
jo
bound
cdq
push
and
dec
mov
sbb
xchg
nop
shl
push
dec
mov
fstp
dec
std
jle
cmp
adc
mov
xchg
sar
xchg
mov
mov
hlt
mov
in
xchg
sub
mov
cwde
outs
pop
test
mov
pop
inc
sub
iret
repnz
adc
lea
dec
push
fs
xor
ret
xchg
test
jl
cmp
jb
or
jnp
mov
leave
out
into
ret
fist
int
lds
cmp
xchg
test
test
mov
mov
std
xor
jl
mov
mov
mov
add
and
repnz
mov
push
les
jge
cmp
ffreep
(bad)
arpl
push
fwait
pop
xchg
aam
imul
and
xchg
xor
fistp
sub
loope
push
out
xor
adc
xor
push
xchg
and
xchg
sar
cdq
scas
xchg
movs
jmp
pop
mov
(bad)
xor
in
iret
xchg
out
mov
and
je
xchg
or
inc
sahf
lahf
scas
aaa
dec
and
xchg
jae
shl
push
dec
inc
xchg
jecxz
(bad)
fistp
lea
adc
shr
loope
aaa
push
pop
pop
mov
sub
or
jo
arpl
fcom
xchg
adc
xchg
or
popf
retf
leave
mov
sar
adc
mov
push
xchg
dec
stc
inc
mov
adc
shl
xchg
mov
jb
push
in
cs
adc
pop
and
ja
mov
or
je
int3
inc
mov
adc
xchg
fwait
(bad)
hlt
mov
loopne
add
cmps
mov
mov
shr
adc
mov
shl
xchg
sbb
xchg
mov
shl
add
and
xchg
or
pop
sub
cmc
mov
or
ds
jne
xlat
xchg
neg
adc
jle
nop
xchg
iret
loopne
rcl
loope
cmp
cli
daa
cwde
sbb
mov
push
nop
mov
ss
xchg
jns
sbb
xchg
adc
jb
pop
pop
and
pusha
imul
fld
sub
push
xchg
and
repz
xchg
mov
cmp
pop
jo
cmp
jecxz
mul
push
mov
xchg
repnz
test
xchg
and
inc
add
xchg
and
fist
fdiv
sbb
mov
test
mov
jge
ins
push
mov
mov
push
(bad)
cmc
inc
and
push
xor
shr
sub
popf
sar
in
aas
aaa
shl
hlt
pextrw
xchg
mov
mov
or
jbe
xor
inc
xchg
imul
inc
jne
stos
shr
or
or
jae
xchg
adc
inc
xchg
or
aad
pop
inc
sbb
push
pop
adc
shl
mov
jmp
inc
xchg
nop
jecxz
cmp
hlt
fdivr
int
and
out
ins
(bad)
inc
mov
xchg
or
xchg
call
xor
mov
repz
retf
inc
js
cmp
sub
xchg
mov
xchg
aad
loopne
rcl
xchg
jge
cmp
not
jmp
xchg
jne
les
cld
pop
jb
les
adc
daa
and
call
jo
push
outs
ret
xchg
or
add
jle
xchg
jne
fistp
fstp
retf
adc
sub
shl
dec
loopne
cli
push
inc
dec
lods
xchg
and
jne
adc
fwait
jbe
test
inc
and
jo
mov
icebp
push
test
mov
or
fcomp
xor
and
xchg
pop
js
sbb
stos
xor
mov
lahf
std
jae
pusha
sub
or
mov
push
mov
arpl
int3
aad
sbb
loopne
mov
xor
inc
xchg
cs
mov
xchg
popa
xchg
jecxz
rcl
push
xlat
mov
adc
mov
push
jp
xchg
and
pop
repnz
test
xchg
push
sub
mov
jbe
into
xchg
clc
adc
push
fild
fstp
and
retf
mov
xchg
push
scas
mov
dec
fwait
stos
adc
add
or
xchg
cmp
stos
fsub
sub
xchg
add
ss
std
xchg
cld
add
ds
push
loop
in
(bad)
sti
arpl
movs
stos
push
xchg
mov
mov
sar
pop
jp
enter
pop
and
call
xchg
fs
ret
test
xchg
mov
in
or
(bad)
popa
ror
jmp
xchg
mov
popf
sub
push
nop
ss
pop
push
mov
and
and
xchg
shl
jnp
and
or
mov
sub
jle
pop
push
xchg
mov
fwait
inc
jno
xchg
aaa
add
mov
hlt
push
push
(bad)
pop
xchg
pop
mov
adc
aad
dec
test
dec
fwait
daa
xchg
test
xchg
or
xlat
xchg
lock
test
xor
ret
xor
dec
rcl
fist
xchg
outs
mov
mov
push
push
mov
cmp
fcmovne
inc
jno
fwait
pop
outs
ins
or
test
retf
fwait
sub
push
lock
jp
shl
jl
mov
fcom
outs
cmp
xchg
aam
push
stos
rcl
mov
jg
mov
inc
or
jl
mov
out
mov
adc
iret
xchg
lea
shl
mov
stos
movs
mov
push
or
cli
imul
and
xchg
rol
pop
push
into
clc
push
push
pop
xchg
mov
add
xor
aaa
cmp
add
dec
xchg
pusha
int3
xchg
jecxz
jmp
xchg
ins
cwde
movs
popa
neg
je
fadd
sbb
out
mov
ss
pop
adc
xor
clc
pop
lods
xchg
cmp
sub
lds
xchg
jmp
xchg
or
xchg
mov
xchg
xor
ss
push
fldenv
xchg
push
fisubr
rep
xchg
pop
xor
ds
push
sub
jne
mov
xchg
and
retf
daa
popa
push
rcr
xchg
push
push
pop
xchg
cmp
fidivr
push
sbb
xchg
sub
test
xchg
popa
push
sar
add
mov
std
sbb
stc
je
sub
pop
fs
xor
pop
loop
inc
call
int3
dec
pusha
xchg
add
xchg
arpl
or
test
push
xchg
xor
icebp
popa
lds
sahf
jecxz
dec
jne
push
in
js
xchg
jb
jp
add
lea
out
lahf
push
xchg
leave
sub
stc
cmp
xchg
fcmovb
hlt
nop
fisub
into
sub
adc
jmp
xchg
push
xchg
out
dec
jmp
cld
pushw
jo
and
inc
adc
pusha
mov
jmp
xor
ss
shl
call
inc
(bad)
ret
jp
mov
(bad)
sti
neg
mov
xchg
fwait
in
dec
pop
inc
addr16
mov
xchg
cmps
jge
dec
sti
or
mov
lahf
or
sbb
shl
js
fwait
sar
(bad)
push
mov
call
std
pop
push
(bad)
in
cwde
rcr
int3
jne
adc
pop
and
cmc
sub
push
mov
std
adc
cmp
ficomp
aad
aas
sub
jbe
rcl
cmps
or
pusha
movs
xor
add
or
xchg
sahf
mul
mov
mov
xor
inc
jne
pop
inc
add
(bad)
std
adc
aam
loop
push
add
mov
inc
dec
adc
jne
and
in
aad
xchg
pop
add
and
sbb
fidivr
sub
pop
dec
jne
cmc
xchg
xchg
mov
scas
ins
pop
repz
xor
jne
or
pop
fwait
mov
xor
push
add
xchg
call
leave
add
jp
cmp
pop
jp
mov
(bad)
pusha
inc
mov
lds
cmps
xor
in
mov
gs
xchg
lahf
mov
dec
sub
or
in
ja
adc
add
xchg
pop
and
mov
and
xchg
cmc
push
sub
mov
clc
jns
in
ins
js
xchg
fsub
imul
cmp
cmc
ins
call
inc
jb
adc
push
xchg
call
pop
sbb
inc
mov
(bad)
xchg
adc
shr
pop
xchg
pop
sbb
cmp
or
sbb
int3
lock
icebp
and
jo
sti
or
cld
lahf
mov
sub
fs
test
lahf
sub
mov
xchg
aaa
xor
rcr
dec
mov
icebp
adc
inc
xchg
mov
jmp
ins
fwait
enter
mov
iret
add
add
ret
and
repz
test
rcl
cmp
dec
mov
adc
fwait
es
outs
iret
xchg
movs
or
pop
xchg
out
fst
popa
fcomp
shr
cmps
xchg
push
mov
scas
xchg
mov
sbb
jle
dec
lahf
xchg
add
movs
xor
xchg
and
cmp
dec
xchg
and
sti
fld
xchg
call
sbb
pushf
dec
hlt
or
lock
into
sub
ret
mov
punpckhdq
dec
(bad)
std
pop
jp
stos
xchg
sbb
cmp
xchg
add
pushf
xchg
sub
ins
xchg
shr
sub
xchg
dec
or
mov
jbe
scas
pop
rol
call
push
out
mov
xchg
aas
lock
enter
dec
xchg
(bad)
jl
iret
outs
(bad)
inc
xchg
xchg
pushf
retf
or
pop
mov
xor
test
inc
xchg
jno
sub
ja
cmp
pop
jo
push
jg
mov
aam
add
mov
push
pop
pop
aam
inc
sub
ins
shr
repz
sbb
stc
push
push
lods
push
ret
or
fwait
cwde
jg
retf
sbb
pop
aaa
xchg
cli
sbb
int3
dec
fcom
adc
add
xchg
ins
popf
and
popf
(bad)
mov
fmul
sete
push
adc
push
mov
push
pop
adc
outs
test
retf
les
cld
loope
xchg
iret
in
xor
lds
movs
xchg
cs
xor
mul
jns
popa
dec
and
mov
fsubr
mov
jo
push
add
adc
mov
clc
inc
sahf
pop
je
xchg
mov
out
xchg
ins
cld
arpl
ror
pop
mov
add
cs
dec
mov
nop
mov
lds
(bad)
stos
xchg
cmp
and
in
out
loop
pop
jmp
repz
mov
add
int3
push
shr
stc
jmp
shl
add
sub
jmp
pop
stc
movs
and
xchg
dec
sbb
push
mov
inc
push
xor
and
movs
addr16
add
push
push
xchg
cmp
mov
adc
mov
test
push
mov
loop
jl
xchg
pcmpgtw
ins
lahf
and
xchg
lods
mov
cld
adc
dec
sbb
lods
fs
xchg
adc
xchg
test
sahf
add
ins
loope
push
aas
sbb
es
adc
inc
mov
fwait
hlt
sbb
sti
lock
popa
mov
aaa
pusha
and
test
and
mov
int
mov
xchg
mov
mov
xchg
imul
ss
dec
xchg
pop
add
xchg
lods
dec
mov
xchg
xchg
es
add
or
push
cmp
adc
inc
xchg
in
(bad)
(bad)
jecxz
xor
cli
xchg
jg
sbb
movs
xchg
pop
test
xchg
out
mov
call
xchg
pop
inc
xchg
dec
inc
sbb
xor
add
pop
rcr
add
into
sub
mov
mov
ret
push
adc
mov
cli
or
xchg
stos
sbb
ds
jmp
mov
xor
js
stos
jecxz
adc
sub
push
push
push
jg
sub
dec
add
jb
mov
xchg
and
je
push
inc
dec
repnz
xor
leave
ja
sub
popa
add
call
in
add
pop
loopne
outs
xchg
jmp
adc
cs
xlat
pop
outs
add
push
add
xchg
mov
jmp
mov
mov
les
ror
shl
aaa
ja
mov
pop
mov
xchg
std
aaa
xchg
pop
loop
xchg
push
add
outs
push
retf
rcl
cmp
(bad)
fstp
xchg
(bad)
sbb
jecxz
repz
(bad)
and
mov
push
jb
mov
in
xchg
(bad)
push
es
adc
adc
std
inc
or
sbb
fadd
xchg
sub
push
xchg
or
pop
ins
jne
or
imul
in
out
mov
sbb
ins
xchg
add
mov
stos
call
push
in
arpl
push
fcmove
xchg
jp
inc
xchg
add
js
hlt
out
adc
push
rcl
bound
fwait
and
mov
xor
inc
pusha
xor
xchg
icebp
lods
fucomip
call
hlt
xchg
into
mov
adc
mov
loope
in
out
xchg
movs
jl
push
repnz
cmp
xchg
xchg
mov
mov
or
pop
inc
pop
cdq
rol
mov
std
lahf
dec
cmp
shl
xchg
mov
clc
xor
sub
xchg
sub
nop
into
xchg
gs
out
pop
not
into
inc
mov
in
retf
sbb
(bad)
(bad)
mul
push
fwait
push
mov
icebp
stos
in
xor
fwait
inc
jp
jbe
ja
ror
mov
lock
xchg
call
bound
mov
out
cmp
(bad)
cmp
(bad)
cmps
or
sti
dec
push
xchg
xor
retf
mov
dec
xchg
mov
out
rol
popa
test
add
mov
xor
in
or
arpl
jns
push
loop
sbb
rcr
xchg
or
sub
hlt
adc
movs
pop
push
and
inc
mov
and
xchg
lods
ja
aas
movs
mov
cmp
jge
lock
fwait
jmp
jp
cmp
mov
and
cmp
ret
xchg
call
gs
push
pop
lock
pushf
lds
retf
aam
push
fisubr
sbb
ins
fistp
jmp
ret
add
add
push
adc
aam
pop
mov
xchg
xchg
jne
inc
sbb
xchg
push
pop
jmp
shl
aad
xor
outs
or
pushf
jp
xchg
inc
push
jg
adc
je
pop
push
mov
xchg
outs
lds
pop
sub
inc
(bad)
fwait
push
(bad)
adc
xchg
lea
shr
xchg
mov
cdq
sub
xchg
pop
adc
pop
cmp
in
add
sub
sbb
fs
or
sub
cs
and
mov
add
dec
mov
inc
out
sub
test
or
xchg
mov
or
das
sub
adc
(bad)
cwde
ss
mov
retf
pop
mov
push
ja
stc
shl
adc
cdq
ins
mov
jmp
and
xchg
test
cli
cmp
pop
mov
cmps
loopne
arpl
in
mov
call
inc
jno
push
(bad)
cld
stos
repz
cdq
ss
sbb
mov
outs
daa
in
cmp
jb
xchg
xchg
jmp
adc
std
or
jge
ja
aaa
mov
rcl
pop
push
mov
xchg
add
dec
xchg
sub
adc
sahf
lods
xchg
or
push
test
cmp
loopne
scas
xchg
scas
mov
pusha
ins
out
shl
xchg
or
fwait
aad
mov
fcomip
(bad)
test
cmps
push
mov
push
mov
mov
out
adc
sub
or
test
imul
(bad)
jge
mov
xchg
adc
in
sub
xchg
mov
xor
xchg
fsub
dec
(bad)
xchg
lds
je
test
fwait
push
push
and
push
je
cli
scas
lock
fs
cmps
popf
push
aaa
ret
cmp
sbb
hlt
mov
movs
pop
(bad)
cmp
cli
xchg
jne
push
test
and
cmp
xchg
mov
jb
pop
xchg
sbb
call
push
stos
aam
add
out
xor
inc
gs
pop
xchg
repz
out
fidivr
xchg
popf
xchg
retf
adc
loopne
mov
xchg
dec
imul
push
jecxz
ins
jmp
adc
loopne
out
cmps
cld
pop
add
mov
mov
inc
inc
xchg
cwde
add
addr16
push
xchg
pop
xchg
sub
xchg
xchg
xchg
arpl
inc
stos
sub
imul
lock
mov
inc
sti
clc
pop
and
lods
jmp
jne
sub
shl
jb
mov
leave
xchg
in
add
jle
int3
pop
mov
cmp
gs
xchg
dec
dec
adc
pop
mov
adc
clc
cmp
xchg
aaa
(bad)
mov
or
pop
push
pop
mov
push
addr16
pop
mov
rcr
push
sbb
cmp
xchg
jle
cmp
xchg
mov
cmp
dec
scas
xchg
xchg
aas
lock
gs
inc
xchg
fdiv
jmp
imul
pop
clc
xchg
scas
(bad)
push
or
push
cdq
xchg
jg
jne
push
cmc
mov
out
and
or
cdq
xor
xchg
jle
sub
push
xchg
or
mul
lahf
stos
test
mov
mov
add
mov
xchg
pushf
or
pop
cmp
xchg
adc
int3
and
pop
mov
xchg
inc
mov
aas
in
xchg
dec
push
arpl
add
push
mov
imul
gs
dec
(bad)
iret
lock
cmc
in
xor
jns
dec
es
mov
pop
pop
fwait
and
std
hlt
mov
add
xchg
or
sub
lds
mov
pop
xchg
jnp
or
xchg
mov
push
stos
jne
out
pop
fs
cwde
mov
pushf
repz
xor
mov
xchg
dec
mov
mov
sbb
je
int3
mov
mov
fld
jg
jo
fs
pop
push
xchg
sbb
stos
mov
je
mov
jle
push
xchg
xchg
shl
jge
arpl
fcomp
xchg
mov
push
xchg
inc
pop
add
mov
in
xchg
ss
jmp
xchg
gs
xchg
imul
int3
rcl
dec
xchg
push
dec
fsubr
cs
pusha
loop
es
cmp
xchg
popa
jl
xchg
leave
rol
mov
je
mov
loopne
pusha
pop
xor
xchg
xor
xchg
xchg
pushf
push
jno
inc
test
ss
xor
fdiv
ds
xchg
inc
es
test
out
sbb
call
mov
xchg
mov
test
cmps
push
mov
add
pand
aam
ins
xor
sar
outs
xchg
setl
xor
xchg
or
xor
pusha
add
xchg
sbb
xchg
mov
mov
push
cmc
retf
pop
push
mov
xor
jo
in
int3
xchg
sbb
(bad)
pop
sub
xor
inc
and
cmps
push
pop
cdq
xchg
ins
stc
imul
les
and
mov
pop
jge
fwait
sub
xchg
xchg
xchg
add
xor
lock
pop
(bad)
mov
je
xchg
cmp
aad
sub
loope
ss
adc
jmp
int
out
push
or
stos
add
jns
icebp
and
rcl
adc
xchg
ins
loop
mov
pop
push
test
jne
cmp
inc
jnp
sbb
test
xchg
ret
push
shr
fs
test
test
in
jl
lods
jge
inc
test
push
mov
aam
movs
dec
sti
in
cmp
dec
fadd
jmp
js
test
(bad)
and
dec
sub
xchg
enter
ins
test
mov
xlat
lock
mov
xor
push
test
xchg
addr16
xor
xchg
xor
test
shl
mov
mov
sbb
shl
fistp
int
(bad)
out
push
hlt
stc
mov
sub
xchg
in
mov
stos
xchg
add
mov
xchg
js
faddp
dec
sti
push
aas
fwait
shr
cli
fwait
adc
pop
les
je
stc
mov
jne
mov
xchg
retf
xor
mov
icebp
pop
lock
jmp
inc
shl
pop
cmp
iret
cmps
or
test
pop
ja
mov
xchg
(bad)
(bad)
push
mov
call
fst
(bad)
xchg
push
imul
rdtsc
retf
iret
push
mov
push
xchg
cdq
std
rcr
xchg
cmp
pop
xchg
(bad)
sub
xchg
mov
sbb
xor
jno
popf
mov
cs
push
push
(bad)
and
je
scas
stos
sub
enter
inc
retf
fucomi
mov
ss
idiv
in
(bad)
pushf
stos
jne
in
xchg
pop
fwait
test
ret
je
dec
mov
mov
xor
scas
int3
mov
aaa
push
jp
and
retf
fs
mov
aam
jge
fbstp
xchg
cmp
mov
xchg
fxch
les
jge
in
push
stos
push
xchg
fiadd
bound
(bad)
push
push
xchg
pop
mov
jbe
cs
fdiv
int
pop
sub
push
int3
add
inc
push
fs
fwait
or
lahf
mov
(bad)
mov
mul
lods
in
xlat
mov
jl
cmc
ret
xchg
mov
sub
jecxz
xchg
clc
push
je
out
ds
js
xchg
repnz
inc
test
ss
cmp
xchg
retf
ins
sbb
xchg
aas
xchg
pop
inc
ds
adc
jmp
xchg
xor
push
adc
imul
test
pushf
xchg
or
mov
pop
sar
mov
dec
je
dec
pop
xchg
aaa
outs
add
xchg
js
daa
adc
xchg
fwait
imul
add
jmp
outs
pop
nop
dec
jle
int3
addr16
into
jnp
jp
xchg
std
les
add
aas
mov
loop
les
test
loope
repz
xchg
adc
stos
cmp
lock
mov
pushf
lahf
push
gs
xchg
hlt
xchg
push
cmps
fwait
mov
imul
cdq
out
and
xchg
mov
pop
dec
mov
cmps
rcr
jmp
push
xchg
aaa
mov
leave
inc
cld
jb
inc
mov
stos
inc
xor
in
cmc
rcl
pop
lock
icebp
pop
out
out
fsubr
pop
dec
js
dec
dec
xchg
xchg
cmp
inc
and
test
fbld
retf
xchg
push
inc
sub
jne
(bad)
cmp
xor
jbe
rol
xchg
adc
pop
mov
jle
xchg
fstp
div
call
popf
ror
xchg
xchg
push
mov
cmps
les
ins
xchg
jmp
pop
sbb
lock
aam
inc
mov
or
cs
test
inc
(bad)
mov
(bad)
adc
shl
sub
out
xchg
cdq
fldcw
jb
lock
pop
(bad)
aas
lods
rcr
fwait
adc
test
sub
push
jns
xor
out
pop
adc
mov
stos
xchg
push
jge
mov
or
aas
mov
out
scas
xchg
movs
fxtract
out
xchg
popa
jnp
loopne
jle
cmp
push
movs
push
dec
add
ret
and
adc
dec
fcomip
adc
lods
adc
push
mov
or
mov
fcom
pop
mov
imul
(bad)
mov
int3
push
adc
sub
in
jecxz
xchg
cmp
lock
sub
jp
xchg
sub
jne
icebp
xor
mov
repnz
cmp
das
sub
pusha
mov
arpl
xchg
mov
loopne
xor
dec
xchg
cmp
adc
jmp
rcr
adc
mov
sbb
jae
sbb
lea
aam
(bad)
xlat
fwait
add
push
jmp
mov
scas
and
sub
mov
push
add
push
ds
and
jecxz
mov
xchg
out
jns
test
fist
stc
cmp
mov
xor
cdq
inc
test
mov
js
xchg
adc
ins
xchg
int3
mov
aad
sbb
fwait
sbb
imul
jae
hlt
shl
stos
xabort
jmp
je
dec
(bad)
xchg
mov
mov
xchg
jg
xchg
fptan
lahf
jecxz
std
out
xchg
stos
mov
loopne
xchg
push
add
mov
sti
movs
lea
xlat
push
pop
xchg
mov
mov
jmp
int
fcmovbe
sbb
sub
jmp
jecxz
add
repz
ret
rcl
jmp
jle
push
xchg
jno
push
outs
mov
movs
push
bound
les
mov
cwde
jns
xchg
mov
in
inc
inc
and
add
loop
jmp
add
jno
xchg
lods
adc
sub
outs
scas
jl
sbb
mov
push
pop
and
pop
cmp
(bad)
push
xchg
sbb
xchg
adc
fild
xchg
daa
out
adc
push
add
dec
jmp
and
jne
xchg
xor
mov
rcr
rcl
jno
int3
loope
adc
aam
ins
in
push
out
mov
retf
leave
nop
and
test
or
fwait
mov
xlat
stos
pop
add
(bad)
outs
and
scas
dec
adc
fs
shl
jnp
add
repz
enter
ficom
ret
dec
mov
sti
sub
sbb
mov
and
imul
in
not
bound
mul
xor
jge
fadd
mov
repnz
push
sbb
(bad)
pop
retf
mov
adc
cli
pop
add
push
or
and
mov
movs
inc
ds
hlt
dec
xchg
mov
retf
cmp
jo
xchg
xchg
es
mov
cmp
je
xchg
dec
cmp
cmp
jmp
jl
dec
aaa
icebp
inc
xchg
leave
mov
or
loop
fcomp
pop
jae
adc
call
dec
adc
xchg
sbb
and
out
sbb
inc
xchg
or
stos
push
(bad)
aam
jo
daa
adc
fist
adc
sti
xchg
movs
or
jbe
push
bound
and
mov
xchg
aaa
loope
mov
popf
cwde
jo
jno
xchg
and
add
data16
push
xchg
imul
outs
fwait
sub
xchg
dec
cdq
dec
mov
je
(bad)
sub
mov
bound
xor
inc
je
fucom
push
ror
movs
push
push
fcom
mov
inc
cmps
or
popa
mul
mov
pop
adc
xchg
and
(bad)
clc
inc
cld
into
mov
arpl
sbb
aas
inc
inc
pop
mov
loopne
xchg
dec
repnz
jae
mov
fwait
jl
and
jmp
fcom
in
mov
xchg
aas
cmps
pusha
repz
push
mov
xchg
fs
out
fstp
push
dec
and
(bad)
int3
aaa
xchg
ins
loopne
aam
lock
xchg
fcmovnbe
xchg
add
or
adc
lods
mov
sar
mov
jbe
push
dec
xchg
or
mov
pop
out
aas
ret
loope
call
loopne
dec
push
adc
xor
mov
fwait
daa
or
imul
pop
xchg
mov
(bad)
pop
jae
xchg
xchg
xchg
repz
add
xchg
ds
mov
xor
push
das
ins
repz
or
xchg
xchg
loope
mov
shl
cld
xchg
gs
(bad)
idiv
pop
adc
je
mov
mov
fisttp
mov
call
mov
cld
or
pop
fist
mov
mov
into
std
jb
push
hlt
mov
xchg
jo
inc
pop
or
xchg
scas
push
xchg
mov
nop
and
cli
and
mov
push
(bad)
cmp
sbb
test
or
jmp
pop
movs
adc
sbb
in
cdq
xchg
mov
enter
aaa
scas
fs
jae
fcom
push
xchg
test
nop
outs
xchg
fcom
mov
cli
xchg
ret
and
mov
hlt
xor
test
retf
xchg
sub
push
in
xor
mov
adc
in
add
xchg
arpl
or
pop
jb
(bad)
xchg
shl
push
jp
hlt
xchg
call
xchg
xor
test
ja
xchg
mov
icebp
aam
ror
xchg
imul
and
outs
mov
xchg
or
retf
bound
je
scas
xchg
ins
xor
rol
jmp
xchg
or
jo
cmp
daa
popf
inc
dec
(bad)
jmp
je
mov
into
xchg
push
ror
sete
lods
out
xchg
adc
pushf
jnp
pop
cdq
ds
push
mov
(bad)
retf
xor
dec
xchg
or
imul
out
test
pop
sub
jne
or
xchg
push
rcl
mov
and
cmps
mov
jnp
mov
xchg
xchg
push
xchg
cmp
xchg
shl
into
or
xchg
push
cwde
out
mov
jae
addr16
and
xchg
mov
sub
data16
mov
mov
loopne
not
push
(bad)
in
mov
push
stos
mov
imul
sbb
mov
pushf
dec
xchg
fwait
sbb
fst
ins
ss
xchg
add
mov
shl
stos
xchg
je
push
xchg
dec
dec
sbb
inc
lea
jb
movs
fsub
imul
cmp
or
xchg
and
sbb
xchg
test
xchg
fist
cwde
cmc
xor
push
jmp
push
fstp
sub
xlat
xchg
call
mov
jbe
cdq
ret
cmps
xchg
and
lahf
inc
mov
xchg
jbe
xchg
call
adc
add
inc
stos
mov
movs
cld
sbb
cmps
or
xchg
(bad)
push
push
mov
xchg
ret
nop
dec
mov
add
mov
fucom
add
cmp
dec
or
in
dec
jg
xchg
js
out
mov
aas
int3
xchg
add
lock
xchg
mov
shl
enter
xchg
and
pop
ins
sbb
jbe
sbb
les
pushf
xchg
sbb
mov
test
jp
xchg
in
adc
sub
add
sub
pop
adc
nop
hlt
ins
(bad)
ins
je
test
xchg
mov
cmp
jo
mov
sahf
cdq
sbb
mov
push
and
(bad)
xchg
test
fld
dec
pop
xchg
stos
sar
(bad)
adc
xchg
repz
sub
arpl
mov
int3
xchg
cld
jb
rcr
popf
pop
xchg
mov
int
jp
fwait
imul
pop
jmp
mov
dec
popa
fist
and
mov
or
add
lahf
dec
mov
sub
push
mov
lods
xchg
cmp
pop
or
adc
dec
pop
test
xchg
ret
xlat
sub
xchg
sti
stos
retf
shr
loopne
push
repz
sbb
xchg
dec
xchg
pop
aas
jne
push
ja
cdq
sub
cmp
xchg
adc
call
mov
cmps
lods
xchg
stos
jo
adc
xchg
ret
push
or
jae
xchg
xor
idiv
pop
push
sar
mov
js
fist
or
mov
mov
xchg
pusha
and
xchg
xchg
cmp
cwde
and
sti
xchg
rcl
adc
jbe
sahf
mov
and
stc
sub
push
mov
inc
mov
lds
add
sub
popf
jle
xchg
mov
ror
xor
(bad)
adc
xchg
fdivr
js
inc
call
pop
div
pop
(bad)
sbb
adc
mov
cmp
mov
fld
jmp
or
fs
xchg
xchg
add
sub
pusha
dec
leave
mov
cmp
and
mov
sub
jnp
sub
and
ss
icebp
std
ins
mov
out
and
arpl
and
xchg
cmp
iret
jp
out
pop
mov
xchg
xor
xchg
mov
xchg
mov
xchg
pop
fucom
test
push
iret
xchg
sub
cmp
mov
jne
xchg
ret
push
dec
jl
add
(bad)
iret
sbb
test
test
daa
movs
sub
pop
outs
out
clc
cmps
mov
xchg
mov
and
xchg
push
test
fwait
mov
jnp
movs
push
sahf
les
mov
or
and
mov
xchg
xchg
fstp
add
mov
ss
xchg
mov
jbe
dec
dec
(bad)
(bad)
add
xchg
mov
cmp
jl
push
xchg
sub
daa
popa
aam
outs
xor
es
cmp
sbb
test
inc
sbb
add
mov
pop
ror
clc
adc
and
(bad)
mov
js
call
dec
not
xchg
sahf
xor
scas
add
aas
cmps
ja
retf
retf
sub
ss
fsub
repnz
daa
push
fwait
dec
xchg
cmc
nop
and
xchg
cmp
xchg
xchg
xor
scas
retf
mov
or
xchg
ds
add
mov
mov
inc
xor
sar
retf
cmps
fwait
shr
jb
and
mov
mov
xchg
jnp
shl
sti
out
xchg
mov
xor
pusha
xchg
ins
adc
repnz
stc
xchg
push
and
icebp
xchg
push
mov
sub
div
xchg
hlt
pop
pushf
aaa
push
mov
rcl
aad
xchg
mov
mov
add
lods
dec
jmp
inc
pop
shr
xchg
cwde
sbb
mov
repz
mov
ds
xchg
sbb
jmp
cmp
retf
ficomp
xchg
add
dec
add
fcom
dec
xchg
iret
(bad)
sbb
sub
xchg
push
add
adc
iret
sub
mov
clc
aam
push
xchg
jb
cli
jle
ins
and
imul
inc
inc
rcl
mov
ja
imul
adc
xchg
and
pop
or
out
aas
rcl
call
dec
add
jno
inc
or
and
aaa
jecxz
ja
xchg
inc
dec
aam
out
cmps
jge
inc
stos
xchg
jae
cmc
add
aas
pop
mov
adc
jmp
je
ror
std
or
sbb
cmps
pop
sub
and
fwait
mov
aad
jae
push
xchg
pop
movs
dec
arpl
or
cli
xchg
(bad)
jne
aad
loop
xchg
xchg
jecxz
mov
je
pop
(bad)
xchg
inc
mov
loope
xchg
and
push
stos
cmp
lods
xor
ja
fwait
movs
(bad)
dec
adc
retf
int3
retf
add
xlat
(bad)
out
cmp
add
xchg
test
adc
mov
inc
(bad)
push
aam
inc
pop
pop
out
pop
mov
icebp
cmp
data16
or
std
xchg
add
(bad)
xchg
call
in
cmp
aaa
je
dec
icebp
or
xchg
xor
cs
int
aam
pop
mov
cmp
stc
in
pop
ret
fcmovbe
leave
push
push
test
in
pusha
retf
adc
lods
aas
ins
mov
xlat
loopne
xchg
jae
and
jl
das
cli
rcl
and
or
cmp
(bad)
push
sub
pop
xchg
push
mov
add
sbb
xchg
out
gs
je
sbb
and
pop
push
jg
adc
icebp
adc
aam
je
inc
and
sub
inc
inc
gs
xchg
(bad)
cmp
xchg
movs
add
scas
repz
leave
icebp
sub
mov
xchg
push
test
xchg
pop
jnp
(bad)
rol
xchg
sbb
dec
nop
call
test
mov
hlt
or
dec
cmp
test
xchg
jno
adc
jns
xchg
push
dec
sbb
cmps
fld
sbb
mov
sbb
aad
test
fdiv
es
xchg
mov
btc
mov
push
aad
and
or
xchg
stos
ins
pop
test
dec
push
xchg
pop
pushf
dec
shr
aaa
test
gs
enter
add
fs
xor
into
(bad)
outs
adc
sub
add
xchg
sahf
imul
jns
(bad)
lods
dec
sub
out
jb
scas
mov
dec
xor
jl
in
xor
cld
mov
jmp
or
jo
ficom
loope
cs
sbb
jno
lods
loop
sub
xor
xchg
sub
pusha
sbb
add
xchg
push
xchg
and
push
mov
scas
pusha
daa
mov
jae
add
inc
xchg
sub
and
pop
xchg
lds
pop
ret
addr16
xchg
adc
rcl
shl
call
adc
dec
fild
sub
rol
cmc
add
into
cmp
jno
jb
adc
inc
jle
loopne
pop
and
xor
xchg
shr
mov
inc
xchg
dec
jnp
fdiv
ror
jge
xchg
retf
stos
add
xor
jo
push
xchg
adc
cs
fwait
lds
fs
xchg
test
adc
add
or
xchg
mov
int
push
mov
inc
dec
xchg
push
aam
inc
outs
xchg
fistp
and
push
addr16
mov
and
or
mov
inc
mov
cmp
clc
rcl
enter
imul
add
fdivr
xchg
lock
lods
pop
loope
inc
cmp
ja
call
call
in
adc
shl
das
fwait
dec
add
(bad)
clc
les
add
(bad)
add
or
call
xchg
ss
mov
xor
mov
pop
xchg
cmp
jmp
in
test
and
xchg
sub
pop
shr
xchg
push
mov
call
push
jae
imul
xchg
lock
sbb
pop
aas
or
sbb
xchg
add
mov
pusha
fld
leave
mov
mov
jb
push
fdivr
jge
cmp
xchg
fs
dec
iret
mov
xchg
(bad)
cmps
sub
inc
dec
jmp
jne
cs
xlat
add
xchg
mov
outs
or
mov
adc
jns
and
test
sti
mov
js
les
push
out
sbb
sub
ret
mov
cdq
or
xchg
iret
retf
ins
icebp
cmps
sahf
xchg
leave
adc
je
xchg
mov
jl
mov
test
int
mov
call
mov
xchg
mov
push
mov
jecxz
xor
cdq
sar
icebp
in
iret
xchg
(bad)
ds
sbb
pop
in
or
mov
scas
add
sub
push
pop
stos
push
adc
in
rcl
xchg
dec
push
mov
add
clc
jecxz
gs
imul
and
inc
pusha
test
and
fcom
neg
fbld
aam
mov
dec
or
fdiv
cmovl
dec
xchg
inc
ror
sub
and
adc
push
outs
xchg
js
xchg
jg
shl
ja
aam
mov
cmp
inc
lds
jecxz
cli
ffree
sbb
dec
xlat
xchg
out
mov
(bad)
mov
stos
lock
ins
xchg
imul
outs
mov
pop
dec
jae
push
not
cli
fwait
xchg
fstp
daa
retf
add
hlt
mov
loope
push
push
int3
fwait
mov
xchg
outs
rcl
ficom
mov
xor
sub
rcl
dec
xchg
push
or
retf
xchg
fdivr
mov
mov
mov
mov
into
retf
cwde
pop
cdq
test
jp
pusha
enter
push
je
xchg
cwde
mov
test
mov
push
mov
fsubr
add
push
cmp
dec
not
xchg
shl
cmp
fst
or
xchg
sar
and
lock
stos
hlt
(bad)
pop
cmp
mov
(bad)
adc
mov
xor
sbb
inc
ins
cmps
xchg
cmp
pop
cmc
xchg
inc
addr16
stos
push
adc
cmp
retf
jecxz
xchg
lock
aam
enter
xchg
ja
(bad)
push
xchg
mov
retf
xlat
add
and
xchg
or
je
and
dec
pop
add
mov
aad
push
sub
jge
fwait
inc
aam
pop
xchg
cmp
and
push
sub
mov
dec
push
mov
out
hlt
jmp
mov
iret
sti
mov
jne
sbb
adc
mov
inc
xchg
adc
mov
jmp
xchg
jo
push
scas
dec
jb
adc
sbb
mov
mov
movs
cmc
inc
(bad)
xchg
jle
add
mov
sbb
dec
sbb
xchg
fdivr
jmp
repnz
out
cmp
or
jl
jmp
xchg
dec
cwde
and
(bad)
cmp
adc
imul
ss
push
into
jge
push
ins
cmp
and
push
mov
adc
xor
jg
sbb
out
scas
jne
fcom
jbe
in
xchg
sbb
mov
mov
push
pop
fstp
pop
in
sbb
ficom
mov
inc
fisubr
xchg
cmc
jne
sub
xchg
mov
dec
pop
xchg
fs
hlt
cmp
mov
scas
mov
or
cmp
fldenv
mov
push
or
xchg
dec
cmps
xchg
cmps
inc
pop
jne
iret
pop
cli
ror
push
out
inc
loopne
leave
xchg
inc
lods
je
lds
shl
(bad)
cmp
repnz
mov
mov
loop
jo
stc
cmp
mov
push
jae
mov
stos
xchg
mov
jg
mov
mov
mul
adc
es
dec
dec
xchg
lods
retf
inc
pop
rcl
dec
out
mov
outs
xor
sub
fdiv
ds
sub
or
nop
cmc
sbb
(bad)
add
sub
cmp
add
das
inc
hlt
sub
xchg
out
inc
jg
(bad)
jle
xchg
mov
pop
test
xchg
lahf
mov
mov
lods
bound
aam
out
call
popf
stos
repz
dec
adc
pusha
sub
xchg
call
les
mov
adc
cmp
xchg
pusha
arpl
ret
dec
pop
mov
das
les
push
mov
hlt
rol
vmwrite
test
pop
mov
pop
lods
xchg
mov
mov
mov
loope
fwait
pxor
push
add
pop
mov
sti
sub
inc
setge
dec
push
outs
xchg
jno
test
adc
inc
andps
out
fdiv
dec
pop
fwait
push
or
mov
xchg
outs
and
and
xchg
fidivr
repz
push
fadd
mov
repnz
fist
jg
aam
add
dec
movs
push
xchg
mov
lods
stos
xchg
mov
out
mov
cmp
sub
(bad)
out
dec
les
inc
adc
call
outs
addr16
out
mov
(bad)
ficomp
je
aas
ret
xchg
ss
int
push
cmp
fwait
movs
mov
inc
(bad)
adc
cmps
pop
or
xor
adc
push
xchg
pop
mov
test
stc
bound
xchg
jmp
neg
or
ret
int
movs
adc
or
mov
shl
jge
xlat
aas
sub
faddp
push
inc
fwait
movs
rcl
jp
xchg
(bad)
cdq
out
sub
test
jns
xor
adc
rol
imul
jl
pop
mov
and
mov
pop
data16
enter
sub
cdq
sbb
dec
test
outs
and
retf
loope
ret
les
jg
lahf
mov
push
inc
test
xchg
in
test
and
mov
mov
xchg
push
mov
lahf
out
pushf
pop
cmp
lods
cmp
loope
jns
pop
(bad)
icebp
push
push
mov
dec
jnp
pop
fsubrp
fisttp
shr
pop
(bad)
xchg
mov
jge
xchg
and
sbb
and
fist
fmul
jns
push
push
mov
int3
pop
adc
mov
sbb
div
pop
mov
adc
test
sahf
push
ret
les
push
jbe
xchg
lods
and
xchg
sti
mov
xchg
jo
scas
jnp
jmp
pop
dec
and
mov
mov
xchg
out
outs
adc
cmp
xchg
add
mov
dec
movs
stc
xor
xchg
push
cmp
js
xchg
xor
adc
jle
fwait
iret
cmps
inc
cli
jp
stc
push
ss
scas
imul
jbe
mov
mov
js
scas
xor
push
adc
mov
xchg
ja
push
mov
das
mov
test
xchg
ins
inc
push
xchg
retf
stos
xor
xor
inc
jno
popa
out
das
inc
bound
xchg
push
aad
mov
imul
nop
jmp
mov
push
jecxz
adc
(bad)
xchg
not
popf
jno
stc
and
sti
fidivr
sahf
(bad)
sub
in
mov
mov
and
enter
push
jge
movhlps
aam
xor
sub
(bad)
jle
or
cmp
xchg
xchg
pushf
imul
push
mov
hlt
les
das
or
xchg
push
ins
and
jnp
or
ror
(bad)
mov
test
ficomp
(bad)
ret
mov
out
dec
ret
retf
into
pusha
loope
dec
lock
xchg
xchg
leave
repnz
loopne
add
push
mov
stos
add
push
jb
xlat
aaa
pop
xchg
sar
add
cmp
xchg
or
mul
adc
and
sti
sub
int3
ins
dec
mov
aam
inc
mov
adc
out
adc
rcl
popf
add
xchg
jo
test
and
shl
xchg
cmps
jne
mov
dec
add
push
sbb
scas
pushf
xchg
cli
out
jmp
or
mov
hlt
je
mov
xchg
out
mov
inc
iret
stos
cmp
adc
cmp
lds
xchg
dec
enter
fdiv
les
js
xchg
jbe
fisttp
adc
inc
xchg
shl
mov
mov
cmps
cmp
lahf
movs
js
test
and
jae
mov
mov
leave
arpl
out
std
test
or
adc
jmp
pop
pop
push
add
setnp
xchg
pushf
leave
or
mov
cmps
xchg
mov
add
popa
fwait
(bad)
cmp
mov
xchg
mov
sbb
xlat
dec
outs
test
xchg
or
inc
aas
outs
jns
rol
cmp
inc
repz
pop
std
push
xor
dec
mov
xchg
dec
mov
leave
push
outs
hlt
cdq
pop
inc
add
push
fcomp
test
call
outs
loope
and
inc
xchg
ins
rcr
fiadd
arpl
adc
push
adc
cli
add
xchg
mov
jne
xchg
cmp
mov
or
xchg
test
inc
add
stc
js
or
mov
cmp
les
scas
sub
dec
shr
xchg
setbe
add
sub
jbe
cmp
mov
mov
nop
inc
xchg
add
scas
stc
imul
add
clc
les
sub
pop
jbe
mov
loope
push
and
mov
pop
xchg
out
sub
jmp
fcmovu
push
cli
mov
xlat
outs
push
dec
fdiv
push
jb
xchg
and
pop
push
xor
movs
and
adc
sbb
xchg
scas
fwait
xor
hlt
iret
call
or
into
xchg
inc
test
retf
sub
repnz
fwait
out
imul
push
pop
lea
fmul
lahf
cdq
rcl
ins
or
pop
xchg
cdq
daa
les
pop
xchg
or
mov
xchg
sub
xor
lock
pop
add
xchg
int
sbb
outs
aad
push
mov
push
xor
or
mov
out
movs
push
pop
cmp
test
push
pop
or
cmp
push
jle
aad
lods
std
lahf
or
mov
ins
xchg
in
xchg
out
imul
inc
xchg
adc
push
scas
mov
pop
xchg
retf
int
sahf
or
fwait
ja
cmp
movs
stc
dec
xchg
call
inc
adc
out
cdq
inc
xor
hlt
xchg
sbb
mov
jbe
aam
jnp
xchg
pushf
outs
ret
xor
in
xchg
inc
les
sahf
test
jbe
loope
and
aas
pop
cmp
mov
push
imul
icebp
fsubr
xchg
push
js
out
dec
dec
mov
push
and
sbb
test
pop
hlt
repnz
rcl
and
stos
fs
and
pop
or
fnstcw
jae
adc
iret
hlt
ror
inc
xchg
and
mov
movs
out
sub
stc
ror
mov
cmps
nop
xor
xchg
icebp
jne
mov
push
mov
iret
cmp
jne
sub
retf
mov
xchg
out
clc
and
lea
push
pusha
pop
push
in
xor
test
loop
inc
cdq
cmps
sbb
jecxz
adc
ins
es
dec
clc
adc
test
and
xor
int3
xor
shr
jae
out
lods
loop
lock
push
mov
ss
inc
inc
mov
mov
pop
xchg
push
cmp
push
push
sbb
adc
ror
push
mov
xchg
xlat
ins
sub
(bad)
or
dec
inc
jl
pop
pop
xchg
stos
nop
dec
and
mov
and
sbb
xchg
neg
sti
xchg
mov
pop
in
sbb
adc
clc
xchg
push
mov
or
adc
xchg
loop
jl
xor
cdq
push
xchg
dec
ffreep
(bad)
mov
cwde
xchg
mov
xchg
adc
aas
fwait
ins
or
retf
and
pop
mov
mov
ja
mov
aam
aam
jmp
loopne
push
xor
sbb
movs
dec
adc
es
fwait
icebp
xchg
jno
inc
push
mov
push
adc
sbb
xchg
movs
mov
jae
sbb
rol
add
hlt
nop
ins
mov
xchg
fwait
mov
dec
xchg
pop
xchg
iret
sbb
mov
loopne
in
mov
sub
and
mov
adc
dec
cmps
xchg
cmp
loop
and
fndisi(8087
inc
or
xlat
push
scas
mov
add
mov
cld
loop
fwait
xchg
jecxz
dec
dec
inc
iret
js
cwde
loope
(bad)
push
add
and
cmp
gs
jmp
movs
xchg
mov
jnp
adc
mov
xchg
and
test
cmp
xor
mov
popf
xchg
mov
mov
and
or
hlt
xor
xchg
push
(bad)
lahf
push
fs
pop
ss
pop
mov
sbb
xchg
mov
push
cmp
inc
push
popf
std
jmp
call
div
retf
mov
add
mov
push
aam
pop
scas
dec
(bad)
das
mov
mov
push
mov
cmps
ret
int3
mov
mov
sbb
in
ja
push
sbb
je
and
mov
arpl
push
sbb
icebp
add
xchg
not
xor
rcl
mov
xchg
fbstp
in
cmps
stc
xchg
push
inc
(bad)
or
xchg
imul
add
pop
mov
jae
movs
inc
jne
push
add
shl
push
cmp
dec
mov
retf
adc
test
mov
enter
aaa
mov
jne
sar
in
xor
sbb
dec
mov
xchg
mov
mov
frstor
and
mov
xchg
mov
push
sar
add
xchg
cmp
pop
pop
push
into
popf
xchg
rcl
in
xchg
es
push
(bad)
sahf
sub
into
mov
inc
inc
out
xchg
jne
shr
scas
push
sub
iret
jecxz
or
xchg
rol
pop
ins
xchg
mov
push
mov
out
std
cmp
xchg
inc
push
xor
jns
imul
pushf
div
and
(bad)
dec
mov
xor
xchg
jecxz
push
pop
je
cs
or
stc
mov
mov
sbb
adc
fmul
push
xchg
jnp
int3
xchg
inc
push
ja
inc
push
cdq
cmp
xor
les
repz
das
adc
add
pop
loop
mov
push
inc
and
xchg
fwait
inc
push
dec
aad
ins
fsubr
sar
int3
scas
dec
inc
xor
stos
inc
dec
sub
out
rcl
loopne
jmp
xchg
test
(bad)
iret
xchg
(bad)
xchg
or
jb
out
xchg
test
or
lds
popa
pop
and
call
jmp
aam
nop
retf
lods
and
inc
lahf
xor
xchg
outs
push
mov
lock
add
movs
adc
in
inc
test
mov
bound
sub
dec
xor
xchg
pop
inc
test
add
sub
sub
push
gs
xchg
jg
test
xchg
mov
mov
xchg
fld
add
jnp
xchg
stos
cmp
xor
sub
aam
clc
inc
xchg
xchg
enter
(bad)
lock
shr
retf
into
or
aaa
call
cmp
cmp
pop
adc
rol
adc
and
fidivr
jae
add
inc
inc
jne
sub
xchg
addr16
rcl
push
sbb
jns
daa
es
mov
stc
repnz
xchg
pop
cmp
repz
ins
jns
gs
xor
and
in
inc
nop
xchg
jl
add
pop
xchg
xchg
inc
push
repnz
inc
cs
shl
and
in
xchg
ja
in
dec
repz
retf
xchg
cmc
hlt
xchg
pop
push
int3
add
mov
(bad)
adc
jg
jo
xchg
inc
aas
mov
in
and
test
mov
mov
sub
xchg
(bad)
cli
sbb
adc
mov
sbb
and
iret
xchg
adc
pushf
and
fwait
ins
xchg
jl
inc
mov
hlt
shl
ss
pop
or
aad
adc
xchg
dec
sbb
jg
movs
xor
aad
lds
xchg
push
cli
sahf
in
stos
cwde
fs
stos
fcom
mov
push
pop
or
mov
stos
inc
(bad)
mov
xor
xchg
cmp
loop
aad
in
fdiv
loopne
movups
mov
cmp
jg
xchg
and
push
push
das
test
jno
xchg
mov
lds
push
hlt
mov
mov
jp
call
adc
sbb
cwde
(bad)
jmp
mov
shl
call
xor
fldenv
xchg
push
cmp
adc
push
(bad)
xchg
dec
sbb
test
movs
xchg
jmp
adc
addr16
pop
icebp
sbb
xchg
sub
xor
stos
test
inc
cld
xchg
sub
jbe
xchg
adc
push
mov
xchg
(bad)
nop
jge
movs
ficomp
int
push
adc
out
(bad)
aaa
cmp
xchg
fild
mov
mov
rcl
pop
xchg
xchg
xlat
adc
pushf
mov
lahf
imul
repz
sub
cmp
add
jns
xchg
jo
aam
out
push
neg
xchg
and
xor
int
xchg
cmp
les
mov
adc
xchg
ficomp
out
and
adc
adc
retf
inc
and
cwde
fldenv
pusha
xchg
pop
jo
lahf
ror
test
xchg
ds
xor
xchg
mov
push
cld
xchg
retf
hlt
push
ss
xchg
arpl
je
or
xchg
push
adc
call
repz
popf
adc
or
push
inc
and
bound
popa
mov
je
xchg
adc
mov
in
inc
cmc
call
jae
add
popa
mov
mov
rcl
jo
pusha
and
mov
ffreep
adc
push
scas
add
xchg
mov
mov
mov
sbb
dec
mov
aam
mov
dec
adc
push
xor
pop
out
das
mov
shl
mov
adc
or
aam
sub
push
in
inc
xchg
sub
xor
mov
and
adc
adc
push
adc
dec
or
fsubr
and
in
add
imul
test
popa
cmp
dec
clc
push
cdq
xchg
dec
or
ret
push
xchg
aam
pop
bound
mov
xor
or
mov
gs
lahf
cdq
in
nop
cmc
jae
adc
mov
ret
in
test
mov
adc
xchg
sub
sbb
sub
mov
or
imul
cmps
nop
mov
(bad)
pop
xchg
leave
(bad)
fwait
loope
xor
xchg
xchg
sub
movs
xlat
in
les
lods
jmp
cld
xchg
hlt
std
aam
xor
popf
cdq
dec
loopne
sbb
sub
fcom
jl
sbb
xor
cwde
jg
sahf
dec
or
xchg
imul
in
js
fisttp
lods
aad
jle
inc
(bad)
inc
in
xchg
mov
dec
mov
mov
add
out
cmp
imul
movs
dec
xchg
mov
mov
xchg
sbb
mov
out
out
int3
call
bound
rcl
pusha
inc
cmc
jns
mov
call
push
(bad)
mov
lock
xchg
or
add
xchg
cmps
sub
and
mov
sub
xchg
xchg
adc
mov
sar
in
enter
mov
pop
jae
fcomp
add
cmc
mov
and
inc
add
ss
movs
mov
ret
sub
xor
pop
adc
sub
in
xchg
ss
xchg
scas
fcom
sar
aam
enter
push
fist
dec
adc
mov
or
popf
xchg
cmp
test
xchg
bound
gs
xchg
xor
cmp
jmp
xchg
mov
loope
sub
fadd
mov
cmp
adc
popf
sbb
imul
test
std
arpl
aaa
dec
test
fwait
aad
mov
cdq
mov
and
dec
dec
mov
test
push
jle
outs
sahf
push
mov
xchg
sub
out
test
add
mov
test
xchg
mov
push
mov
adc
xor
dec
ins
pop
xchg
xor
imul
int3
adc
jp
add
jge
sub
ret
jmp
in
mov
cs
mov
test
push
jg
xchg
xchg
mov
xchg
xchg
ret
and
xchg
pop
cmp
push
test
in
push
dec
sbb
and
add
xchg
pop
dec
push
xor
scas
xchg
enter
and
xchg
jae
inc
xor
sbb
push
fwait
aas
mov
mov
cmp
call
and
sub
lods
aas
shl
les
mov
das
loope
sbb
push
in
seta
pop
push
mov
lea
js
or
add
xchg
xor
mov
je
lock
sub
out
dec
push
xchg
stos
nop
inc
and
pop
xchg
test
mov
adc
mov
add
icebp
cli
xchg
into
movs
fdivp
adc
(bad)
pop
mov
mov
fisttp
cmp
pusha
call
push
addr16
inc
push
out
push
sub
xchg
sub
(bad)
sub
(bad)
rcl
mov
pop
shr
adc
out
test
push
cld
sbb
cmp
cmp
out
test
xor
or
xchg
jae
sub
xchg
mov
imul
sbb
mov
lock
out
lods
out
repz
xchg
ins
jb
loope
xchg
xchg
aaa
xchg
mov
push
or
int3
retf
imul
mov
mov
loopne
inc
(bad)
sub
mov
xchg
adc
int
ins
sbb
pop
push
add
mov
ficom
lahf
inc
fstp
xchg
add
pop
stc
or
sbb
fs
cld
cmc
(bad)
xchg
dec
movs
mov
xchg
and
push
aam
sbb
scas
stos
xchg
fnstsw
add
test
std
ret
into
dec
inc
xchg
les
jmp
ret
nop
stos
xchg
mov
popf
sbb
lahf
rcr
xchg
push
repz
int
inc
xchg
inc
test
lods
xchg
mov
pop
dec
push
ss
xchg
add
into
jns
imul
in
sub
mov
xor
mov
inc
push
add
jae
mov
pushf
popf
adc
sub
push
mov
mov
sub
pop
iret
shr
in
ja
mov
cmp
shr
(bad)
shl
hlt
imul
and
xchg
test
jmp
add
inc
push
in
push
add
pop
inc
xchg
popa
int
dec
or
jnp
outs
in
out
mov
pop
adc
dec
mov
adc
and
push
push
xchg
ins
or
rcr
mov
aaa
add
mov
sub
sar
sub
pop
xchg
in
cld
xor
and
int
xchg
hlt
cmp
test
xchg
inc
pop
mov
cmp
es
xor
bound
loope
sub
cwde
push
inc
pop
mov
inc
fwait
sbb
(bad)
xor
xchg
cmps
mov
adc
cmp
out
lods
xchg
cmp
xor
lahf
and
jae
mov
jb
push
mov
inc
xchg
sbb
sbb
(bad)
in
out
jp
(bad)
jmp
adc
shl
xchg
jae
icebp
aaa
test
xor
int3
pop
mov
mov
out
mov
xchg
and
(bad)
daa
loop
stos
sub
inc
(bad)
adc
aam
test
mov
mov
fnsave
add
push
ss
ucomiss
xchg
loope
adc
mov
jl
jo
dec
rcl
and
xchg
retf
test
stos
pop
mov
push
movs
cs
mov
daa
inc
sub
std
push
pop
xchg
sahf
cli
into
mov
adc
or
fs
xchg
xchg
jnp
sbb
push
das
into
ret
sub
mov
adc
mov
rcr
les
dec
xchg
jecxz
sbb
bound
mov
ror
rep
je
cmp
in
add
test
stos
mov
dec
add
cmp
or
ret
xchg
mov
call
xchg
mov
mov
in
cdq
xchg
jmp
pop
jne
dec
out
dec
sub
lods
bound
ins
pop
pop
and
movs
fwait
push
stos
inc
or
xchg
ins
mov
aaa
sub
mov
aas
xlat
add
imul
push
adc
jo
popf
xchg
xchg
sub
pop
div
xchg
mov
cld
test
mov
xchg
sub
sbb
xchg
jmp
or
sub
fnstsw
in
push
xchg
mov
fcmovnbe
sub
cmp
lea
inc
call
adc
xchg
xor
push
jo
dec
push
mov
adc
pop
mov
fwait
sub
mov
retf
scas
mov
xor
popa
push
fisttp
cmps
xchg
pop
pop
mov
jge
push
jecxz
push
adc
adc
cmps
xor
mov
hlt
call
adc
or
pushf
xchg
(bad)
push
jg
mov
push
mov
aam
inc
test
dec
bound
xchg
push
add
je
jmp
cli
(bad)
out
rcr
rcl
cld
xchg
jns
ret
xchg
sub
dec
imul
mul
rol
retf
push
and
sbb
je
jl
push
sub
fiadd
jbe
lods
imul
cmps
xchg
cmps
adc
mov
xchg
dec
jle
out
dec
push
mov
dec
add
xchg
pop
rol
xchg
sbb
adc
setge
jb
xchg
les
push
jnp
push
daa
or
mov
xchg
push
lods
jne
adc
pop
repnz
xchg
xchg
jb
gs
sub
in
addr16
jp
xchg
jae
aas
adc
ret
xchg
aad
or
xchg
pop
dec
sub
mov
and
imul
xchg
mov
xor
adc
data16
test
js
jg
xor
cmp
mov
idiv
jecxz
mov
and
test
rcl
shl
xchg
mov
movs
push
inc
or
xchg
lods
std
popf
cmps
jg
pusha
sbb
dec
daa
pop
xchg
retf
(bad)
(bad)
outs
jbe
jne
adc
xchg
(bad)
and
mov
xchg
pop
adc
test
push
or
cmp
fsubr
retf
mov
jmp
in
mov
lahf
and
xchg
stos
fcomp
std
iret
sbb
mov
push
imul
lods
push
lock
sahf
xchg
dec
ss
add
xchg
or
and
fwait
pop
sbb
pop
inc
into
and
or
movs
scas
jno
std
cdq
loope
xchg
jle
out
adc
push
call
mov
jp
xchg
sbb
cmp
xchg
xchg
stos
sub
jbe
mov
div
and
test
adc
jp
xchg
adc
movs
arpl
xchg
mov
pop
xchg
cmp
inc
mov
jo
jecxz
loopne
aas
adc
rcl
and
inc
lods
das
xchg
int3
dec
jle
and
or
jl
fwait
lock
and
xchg
(bad)
rol
sub
mov
cwde
lea
xor
fwait
or
mov
push
fdiv
cmp
sub
clc
(bad)
popa
or
xchg
cmp
cmps
xchg
inc
mov
mov
retf
call
jnp
rcr
push
inc
mov
lds
ret
loopne
pop
xchg
clc
xchg
xor
sbb
stc
mov
add
dec
push
mov
xchg
cmps
pop
adc
jecxz
xchg
jg
scas
dec
ja
lahf
addr16
xchg
add
test
xchg
mov
push
xchg
mov
adc
movs
arpl
(bad)
ss
outs
sbb
xchg
bound
in
adc
cmps
sahf
mov
dec
push
dec
adc
out
mov
xchg
mov
mov
shr
test
sahf
xchg
repz
cmp
fbld
xchg
jno
xor
cmp
xchg
push
gs
call
icebp
dec
sub
cdq
push
xchg
cmp
dec
jmp
fwait
pop
scas
push
dec
sub
xchg
pop
pusha
mov
xchg
inc
aad
xchg
sub
pop
movs
iret
xchg
mov
mov
sar
lock
inc
mov
xchg
movs
cmp
adc
out
add
xor
rol
and
sti
dec
cmp
aam
push
and
movs
xchg
push
cs
xchg
sub
cmps
ss
fimul
cmc
test
jmp
push
and
pop
mov
loopne
call
ror
or
outs
std
imul
les
retf
sub
push
jbe
loop
jne
outs
xchg
mov
or
push
ret
fst
mov
pop
call
pushf
cli
push
dec
sar
pop
inc
jns
les
sahf
loope
mov
mul
and
lahf
dec
ss
dec
xchg
mov
lods
pop
test
inc
call
add
addr16
xchg
std
sahf
mov
and
mov
xchg
sub
xchg
xchg
push
js
jno
sbb
(bad)
xchg
mov
push
pushf
and
lea
xchg
stos
sub
mov
inc
jno
test
sbb
pop
or
aam
(bad)
or
lock
adc
sub
jb
jl
sub
aam
push
or
mov
jae
xchg
clc
movaps
imul
dec
xlat
not
loope
mov
xchg
push
xchg
dec
xor
sub
test
adc
xor
pop
ret
sub
je
inc
mov
out
test
pushf
xchg
fchs
punpcklwd
movs
lds
stc
xchg
test
sub
xchg
les
cld
mov
imul
hlt
inc
jmp
mov
pop
push
jae
in
arpl
mov
mov
imul
cmp
push
push
xchg
sub
cmps
jecxz
xchg
xchg
xor
test
push
in
not
je
or
sbb
popa
lock
push
inc
add
xor
sbb
sub
aaa
mov
mov
mov
ds
ffreep
loopne
jp
jmp
call
lods
popa
jecxz
xchg
out
adc
jp
add
or
ret
outs
jge
push
pop
jbe
pop
aad
cmp
jb
add
int
inc
dec
sbb
fst
push
lods
mov
mov
xchg
int
sub
mov
scas
mov
push
mov
(bad)
outs
cmp
add
pop
jne
retf
cdq
mov
aam
dec
mov
loop
fisub
cli
popf
xchg
mov
inc
xchg
xchg
cs
adc
lds
add
jmp
arpl
xchg
jne
ds
mov
(bad)
jp
sub
in
je
jae
xchg
stos
inc
dec
dec
mov
xor
sub
das
pop
sbb
pop
adc
popf
jns
mov
icebp
popf
jg
rol
add
mov
push
int
dec
test
xchg
cmp
clc
pop
xchg
adc
mov
push
ins
sbb
popf
not
xchg
sub
adc
adc
jg
mul
lea
stos
js
mov
test
stc
lods
movs
mov
cmp
xchg
push
cmp
inc
retf
jnp
or
gs
push
sar
mov
cli
imul
dec
cmps
mov
ja
xchg
iret
retf
icebp
imul
scas
shr
jge
in
cmp
sahf
cmp
push
push
xchg
inc
jo
shr
sbb
or
xchg
push
(bad)
icebp
cmp
xchg
cmp
imul
jo
mov
or
jo
mov
mov
inc
dec
dec
(bad)
(bad)
cmp
and
pop
imul
call
neg
push
dec
dec
fs
mov
xchg
ret
and
cmp
xchg
dec
lock
jnp
inc
xchg
mov
xlat
pop
outs
popa
adc
sar
and
mov
cmp
fwait
sub
hlt
push
cmp
mov
stc
cld
add
and
jmp
fdivr
ins
fs
shl
push
xchg
and
arpl
xchg
sbb
pop
inc
in
fwait
ins
adc
mov
pop
std
xchg
gs
mov
cdq
inc
dec
xchg
shr
inc
fidiv
cli
mov
aam
xchg
scas
std
xchg
xchg
in
ins
xor
mov
or
imul
dec
aas
in
lahf
push
(bad)
test
dec
add
xchg
dec
sbb
mov
xor
cmc
loopne
adc
adc
fwait
jnp
push
dec
(bad)
movs
adc
fisttp
lods
xchg
faddp
xor
xchg
scas
cmps
xchg
jb
mov
pop
xchg
cmp
hlt
lods
xchg
ds
cmc
sub
scas
fdiv
pop
pop
xchg
and
fnstcw
int3
rcl
xchg
dec
test
and
call
cmp
imul
mov
xor
sbb
mov
fst
dec
imul
mov
mov
xor
jmp
xor
xchg
mov
cmp
fs
enter
sub
mov
(bad)
sbb
call
jns
sub
mov
xchg
imul
xchg
xor
(bad)
jl
cmc
test
push
hlt
stc
push
fdiv
push
scas
mov
retf
cmp
test
(bad)
mov
cli
sub
int3
or
cs
cmps
xchg
push
pop
jns
ja
jp
xchg
mov
cmp
xchg
add
xchg
inc
shr
adc
daa
std
repnz
jae
test
adc
and
ss
adc
test
mov
push
jno
aad
ds
out
xchg
push
pop
add
adc
test
ins
test
pop
js
mov
inc
inc
adc
enter
dec
aam
out
xchg
popa
dec
xor
push
rcr
pop
ret
stos
and
xchg
cmc
lods
sub
mov
sbb
enter
hlt
sbb
stos
int3
sbb
xchg
cmp
daa
inc
xchg
(bad)
cmp
sbb
aad
add
push
outs
xchg
rcr
pop
cdq
xchg
movs
jl
cmp
pop
mov
pop
mov
inc
xchg
jbe
mov
aaa
xchg
mov
cmp
xchg
mov
inc
dec
cmp
mov
xchg
jns
mov
jge
inc
add
ss
xchg
addr16
jne
mov
xchg
les
push
sbb
mov
adc
ret
and
xchg
iret
sbb
add
rcr
push
mov
xchg
pop
mov
xchg
mov
rcr
jns
mov
and
lahf
xor
lds
jmp
xchg
pop
sub
mov
xchg
fs
cmp
jae
add
int
jb
pushf
push
and
xchg
fiadd
push
push
aaa
xchg
mov
and
xchg
(bad)
mov
push
add
cmc
stos
ror
xchg
or
pop
push
mov
rol
cli
scas
push
adc
sub
in
mov
aaa
stc
shr
xor
inc
scas
xchg
inc
xchg
mov
test
popa
xchg
sbb
cmp
loopne
fst
jg
dec
mov
xchg
(bad)
hlt
mov
ins
xchg
daa
mov
ret
inc
mov
pop
nop
fcom
rcr
sbb
and
xchg
loopne
into
lods
fs
aad
loope
xchg
call
xor
data16
xor
xchg
(bad)
dec
or
call
or
adc
xchg
mov
lock
mov
push
xchg
xchg
stos
bswap
call
jb
jns
std
xchg
dec
push
das
fwait
retf
je
push
xchg
outs
mov
lock
mov
jge
aam
cmc
mov
mov
repz
pop
nop
iret
dec
xchg
test
sub
mov
lock
xchg
cmp
push
pusha
ss
xchg
loop
ins
dec
fsubrp
dec
sahf
xchg
and
ins
sbb
aam
sub
nop
mov
push
mov
jle
mov
mov
shl
inc
dec
js
mov
add
or
imul
ss
leave
mov
mov
ins
xchg
fs
or
shl
xchg
sbb
jp
push
out
xchg
inc
into
js
arpl
ret
ret
cwde
mov
add
xchg
in
pop
bound
dec
cmp
retf
hlt
scas
add
stc
cmp
xchg
jbe
rol
pop
call
push
dec
aam
stos
jo
xchg
lahf
rol
ret
stos
push
rcl
mov
and
fs
xlat
out
pop
inc
mov
mov
jg
inc
lds
push
ror
xchg
mov
test
iret
leave
loopne
mov
xor
fwait
pop
mov
iret
jnp
in
or
sbb
in
jle
stos
push
(bad)
sbb
xchg
mov
mov
out
call
and
(bad)
and
and
pop
stos
leave
clc
sbb
mov
(bad)
jno
ins
push
std
xchg
dec
lock
mov
push
xchg
mov
mov
test
push
aaa
data16
dec
lds
cmp
mov
pop
hlt
cmps
lock
xchg
repz
push
int
sbb
push
pop
xchg
adc
sub
jg
(bad)
out
xchg
mov
es
inc
cld
push
xchg
inc
xchg
xor
fnsave
mov
shl
sbb
jl
cmp
jge
nop
out
jmp
retf
es
xchg
jb
mov
or
fcomip
add
or
inc
xchg
bts
inc
xchg
cmp
dec
inc
jge
xchg
jo
jmp
(bad)
jl
fucomi
push
pop
aaa
mov
scas
daa
stc
nop
or
xchg
xor
outs
js
adc
imul
iret
xchg
adc
test
call
lds
repnz
lods
or
mov
sbb
xchg
jmp
in
or
add
xchg
add
or
push
mov
mov
xchg
mov
adc
loopne
pop
adc
mov
aas
(bad)
add
inc
add
mov
or
sub
cdq
(bad)
xor
inc
pop
cmps
sub
xchg
pop
pop
out
sbb
rcl
xchg
xchg
out
imul
mov
and
pop
es
dec
mov
inc
xchg
fwait
push
mov
sbb
pop
faddp
data16
je
sahf
or
inc
popf
imul
xchg
mov
in
cli
mov
pop
xchg
movs
sbb
sub
sub
mov
les
movs
sbb
popf
mov
jb
add
aam
ret
mov
push
xchg
cmps
pop
arpl
mov
cs
add
xchg
add
stos
cbw
mov
adc
or
push
xchg
call
jmp
pop
push
push
int
retf
jmp
fwait
mov
fwait
jne
arpl
add
mov
push
outs
jmp
sub
repz
loope
xchg
or
mov
stc
xchg
stos
mov
mov
push
inc
loopne
mov
jo
and
push
jbe
rcr
mov
mov
scas
sbb
jno
ins
mov
xchg
pop
ins
stos
or
xchg
xchg
mov
sbb
pop
xor
sub
sub
and
cmps
scas
xchg
fnstenv
sub
(bad)
aam
ins
push
dec
call
dec
out
movs
mov
int
not
pop
push
sub
xchg
jg
jmp
dec
fwait
dec
sahf
sub
pop
test
cmp
push
adc
or
mov
push
nop
or
xchg
lahf
mov
sbb
(bad)
cmps
xchg
mov
gs
sub
xchg
mov
mov
fldln2
sbb
xchg
scas
sub
xchg
mov
xchg
sub
call
mov
popa
ins
xchg
push
aaa
dec
(bad)
dec
imul
jg
xchg
add
pop
out
or
mov
inc
imul
ret
mov
les
outs
or
xor
or
(bad)
icebp
jmp
mov
cs
pop
adc
xchg
or
xor
fadd
mov
xchg
pop
ds
push
dec
pop
stc
es
je
xchg
lods
jl
aas
xor
push
pop
jno
pushf
push
cmp
push
xchg
and
enter
add
fnstcw
(bad)
mov
adc
add
push
xchg
jge
adc
inc
and
xchg
push
and
fisttp
adc
inc
xchg
repz
jp
sub
js
sbb
enter
xchg
push
sbb
jae
sti
sar
mov
pop
inc
xor
(bad)
xchg
cmps
sbb
out
xchg
jbe
iret
shr
ss
aaa
les
xor
lods
sbb
ret
push
orps
sahf
xchg
xchg
mov
push
fwait
xchg
pushf
mov
mov
adc
dec
push
push
ds
sbb
sti
(bad)
sbb
mov
xchg
inc
mov
push
sub
nop
mov
(bad)
leave
jmp
outs
shr
data16
xchg
dec
mov
mov
(bad)
adc
xchg
push
out
ins
add
retf
mov
adc
mov
std
and
xchg
popa
in
pop
mov
jge
jle
hlt
sub
xchg
adc
cmc
and
stos
mov
lahf
xor
in
daa
scas
sbb
xchg
and
es
cld
test
repnz
dec
fs
adc
(bad)
pop
pop
sub
push
xchg
or
jecxz
ret
inc
xchg
(bad)
push
mov
inc
ss
js
xchg
push
and
mov
mov
test
(bad)
aaa
xchg
and
mov
jge
in
xor
ror
into
xchg
xchg
dec
add
sbb
cmc
int
icebp
xchg
es
inc
bound
xchg
rcl
jne
xchg
dec
out
into
jae
xchg
ja
mov
jo
jbe
not
mov
mov
ret
(bad)
mov
loop
scas
int3
jl
adc
adc
dec
neg
xchg
rcl
xor
add
inc
or
xor
push
mov
ja
sbb
sub
test
jns
jb
fwait
stos
jno
or
fsub
cmp
and
sub
sub
mov
fnstsw
xchg
jb
pop
retf
enter
xchg
test
push
xchg
and
jecxz
in
add
pop
cmp
fiadd
dec
add
mov
das
stos
and
xchg
cmp
pcmpeqd
xor
cmp
and
cld
mov
cwde
mov
push
cmp
shl
cmps
xchg
neg
xor
imul
cmp
pushf
div
loope
push
adc
cdq
inc
xchg
mov
cmp
and
js
dec
xchg
and
aad
push
push
or
pop
loopne
xchg
test
loop
xchg
mov
lods
addr16
jg
aam
aas
fs
push
fwait
xchg
and
nop
pop
fistp
sub
xchg
mov
cmp
dec
sbb
ins
xchg
xchg
test
js
pop
mov
mov
clc
pop
test
or
in
push
mov
xchg
ins
dec
adc
ja
cmp
xchg
xchg
popa
fist
mov
hlt
xchg
int3
push
lods
pop
xchg
test
push
cmp
arpl
or
add
mov
je
mov
in
xchg
lock
dec
xlat
les
ror
xchg
or
hlt
repz
fst
ret
xor
adc
mov
je
xchg
jo
ret
daa
enter
dec
fcom
mov
mov
xchg
inc
mov
xchg
dec
and
test
int
fld
movs
adc
into
cmp
clc
fs
ror
xchg
repnz
fs
sub
into
mov
jno
arpl
xchg
pop
popa
test
repnz
loop
adc
(bad)
(bad)
ins
xchg
add
mov
add
shl
xchg
push
ds
sbb
hlt
mov
pop
dec
xchg
loop
ins
and
push
out
(bad)
or
jmp
and
jle
mov
(bad)
xlat
cdq
(bad)
inc
sbb
adc
mov
out
cmp
ret
pop
xchg
or
mov
dec
mov
mov
adc
xchg
scas
xchg
adc
xchg
mov
jae
fwait
push
inc
xor
pop
jl
xchg
dec
ror
retf
shl
adc
jns
xor
aaa
cld
jg
sub
xchg
xor
nop
pop
mov
aam
xchg
(bad)
xor
in
sub
push
jg
std
shl
movups
xchg
mov
lock
(bad)
lea
jne
retf
test
xchg
mov
dec
fsubr
xchg
sub
inc
inc
(bad)
dec
xchg
enter
and
xchg
in
jle
rcr
push
jne
adc
dec
inc
mov
jl
inc
or
ds
xchg
push
or
ror
neg
lahf
xchg
pop
in
in
retf
jle
xlat
popa
mov
cmp
inc
pop
xchg
push
sbb
sub
xchg
add
test
mov
dec
mov
xor
sbb
pop
(bad)
dec
mov
scas
xchg
mov
dec
or
mov
pop
out
adc
test
push
sbb
out
rcr
xchg
mov
inc
jno
fwait
lods
cmp
xchg
add
mov
adc
push
ficom
test
xchg
dec
into
cld
sbb
push
push
xchg
mov
pop
inc
sahf
je
xchg
ficom
cwde
jmp
inc
retf
sub
inc
sbb
es
xchg
xchg
or
push
popf
(bad)
xchg
movs
dec
ror
ds
mov
mov
outs
adc
dec
je
xchg
push
push
dec
lea
pop
mov
xor
fdiv
sub
sti
movs
dec
adc
sar
sub
div
inc
scas
sbb
xor
pop
xchg
mov
(bad)
xchg
dec
xchg
outs
call
inc
movs
xchg
pop
add
push
dec
jno
dec
enter
mov
nop
cwde
pop
xchg
fdivr
std
and
xchg
aad
inc
test
inc
adc
popf
loop
mov
inc
sbb
int3
movs
mul
(bad)
jmp
icebp
scas
into
and
retf
adc
or
aaa
test
jle
mul
cmp
clc
cwde
fcom
dec
xchg
jg
jo
scas
sbb
push
stos
test
sub
out
sti
out
adc
add
pop
ret
cmp
push
sub
stos
xchg
cli
gs
adc
adc
mov
pop
lock
push
es
jg
outs
(bad)
xchg
mov
adc
test
jo
cmc
inc
push
(bad)
jmp
stos
xchg
sbb
sar
cmp
xchg
arpl
mov
mov
jno
or
in
pop
in
or
stos
mov
nop
adc
lds
xchg
into
adc
aad
lahf
adc
or
test
gs
xchg
dec
fldcw
ins
es
xor
inc
fwait
jg
pop
mov
sbb
xchg
(bad)
loopne
push
in
xchg
pop
xchg
pop
sbb
mov
jo
ds
mov
inc
adc
jmp
sub
loop
rep
jb
stos
sbb
sti
xchg
jbe
pop
fs
ret
adc
bound
pop
mov
sub
mov
je
adc
adc
jle
jl
(bad)
push
xor
xchg
dec
dec
xchg
or
pop
add
fwait
mov
jmp
adc
push
outs
mov
inc
sar
mov
push
push
js
hlt
leave
inc
fst
sbb
pop
mov
popf
mov
scas
psllw
cmp
and
xor
mov
mov
std
push
jl
add
fsub
cmp
push
icebp
outs
retf
or
push
(bad)
clc
pop
test
mov
xchg
arpl
cmp
mov
hlt
pop
stc
pop
push
fs
out
add
shl
pop
xchg
scas
jnp
xor
sbb
lock
cs
aad
mov
jp
cwde
loopne
cwde
std
in
mov
add
daa
jl
cdq
hlt
js
movs
jbe
xchg
cld
dec
or
adc
out
scas
je
shl
seta
fdivr
adc
push
arpl
ins
dec
xlat
pushf
xchg
mov
push
in
xchg
xchg
icebp
pop
dec
movs
stos
mov
pushf
mov
xchg
push
mov
xlat
mov
shl
inc
aad
and
dec
nop
cli
mov
jbe
test
pop
xchg
ret
sub
pop
daa
adc
xchg
adc
test
push
stc
adc
mov
jge
xchg
mov
xchg
xchg
sub
pop
nop
inc
mov
into
pushf
xchg
xchg
fwait
lahf
mov
rcl
test
mov
xchg
movs
clc
fninit
mov
or
xchg
push
(bad)
pusha
pushf
cmp
inc
and
or
adc
aam
cwde
xchg
sub
xchg
mov
pop
jg
xchg
mov
inc
push
adc
inc
cmc
int3
retf
add
sbb
xchg
mov
adc
jp
mov
arpl
sub
enter
icebp
jo
xchg
inc
into
or
mov
pop
imul
xor
rcl
xor
jp
xchg
les
fild
xor
mov
in
xchg
xor
jle
mov
out
xchg
and
std
(bad)
int
xor
mov
or
into
pop
mov
(bad)
lods
and
xchg
mov
mov
ins
xchg
xor
pop
daa
jg
add
repz
inc
lds
retf
xchg
cmc
sbb
jb
xchg
lar
shl
adc
ret
xchg
fwait
push
jecxz
out
hlt
jge
cwde
test
(bad)
push
inc
xor
int3
nop
test
out
or
xchg
adc
daa
sbb
xor
dec
rol
xchg
loope
lock
and
cmp
xchg
pop
sbb
xchg
push
outs
xchg
mov
call
mov
mov
test
jg
retf
mov
xchg
dec
repz
fsubr
mov
jnp
lea
push
jmp
pop
adc
adc
adc
inc
pop
xchg
dec
iret
ds
pop
je
pop
pop
xchg
inc
es
adc
ja
sbb
out
mov
xchg
popa
mov
rol
ret
pusha
fmul
inc
mov
xchg
lds
mov
mov
ret
fwait
cmps
outs
cmc
add
and
rcl
push
mov
push
loope
inc
(bad)
into
ret
or
xchg
xchg
repnz
xchg
adc
mov
imul
push
popa
(bad)
nop
xchg
mov
mov
icebp
mov
push
fcomp
sbb
jmp
cmc
je
mov
imul
aaa
fwait
pop
ins
pushf
xor
loop
ins
xchg
fcom
jae
xchg
mov
push
add
inc
cmp
xchg
pushf
out
aam
das
dec
jle
retf
cli
xchg
sub
nop
popa
ins
call
les
cmp
sbb
sbb
xchg
dec
test
lods
mov
xchg
or
loop
cmps
mov
cmp
sti
xchg
push
das
imul
xchg
outs
lea
aas
cmps
lds
fcom
test
pop
xchg
fdivr
sub
jno
mov
and
or
mov
inc
xchg
loop
jb
or
(bad)
lea
cmp
push
lds
or
mov
into
xchg
out
cwde
pop
adc
loop
call
push
popf
sub
xchg
push
jmp
xchg
dec
push
rcr
cmp
sub
leave
shr
xchg
das
fnclex
aam
ins
mov
xchg
dec
mov
cmps
imul
xchg
mov
stos
pop
lock
mov
xchg
push
dec
jo
icebp
jb
xchg
fwait
add
int
xchg
cmps
aas
xlat
and
and
adc
in
push
fwait
sahf
test
push
jns
test
sub
sbb
gs
push
fwait
push
not
cwde
(bad)
sub
mov
in
or
lods
jb
pusha
add
xchg
fisttp
inc
push
xchg
dec
repz
mov
scas
inc
xchg
movs
adc
outs
sar
imul
cs
xchg
jb
in
in
loopne
mov
xchg
imul
jo
int3
or
push
js
mov
xchg
(bad)
sar
mov
lds
(bad)
xor
and
rol
jne
sbb
out
adc
lea
push
sbb
outs
jge
xchg
fistp
mov
sub
cmc
adc
xchg
ss
push
js
call
jl
sub
push
xchg
loop
xchg
ret
arpl
iret
mov
dec
cmp
stc
jl
hlt
(bad)
fistp
sub
xchg
test
les
mov
cmps
fcmovnu
xlat
mov
inc
iret
add
jg
aam
adc
ret
xchg
movs
jp
mov
xlat
cmc
out
loopne
add
fwait
cmps
cmp
shr
xchg
mov
inc
mov
xchg
(bad)
xor
aaa
cld
fisub
xchg
sub
movs
repnz
clc
or
dec
cmp
xchg
rcr
push
out
xchg
fild
and
sti
and
aas
or
add
sbb
sub
sbb
mov
cmp
test
shl
ds
adc
jmp
fisttp
inc
xchg
in
rol
popf
mov
adc
movs
add
xchg
pushf
sahf
cs
shl
sub
ror
mov
jae
mov
cmp
jmp
ins
sahf
xor
das
xchg
push
cmp
call
rcr
dec
out
mov
das
xchg
fs
into
out
dec
test
mov
mov
xchg
xor
sbb
call
mul
pushf
adc
leave
mov
jmp
mov
shl
ins
xchg
sbb
rol
xchg
jle
mov
test
xchg
add
dec
fs
push
ret
xchg
je
loopne
adc
adc
pushf
or
jmp
bswap
mov
jmp
sti
fpatan
pop
sub
movs
fs
fadd
xchg
ins
retf
cmp
sub
xchg
call
push
sbb
pusha
aad
xor
je
xchg
adc
add
xchg
push
mov
enter
push
mov
fwait
push
or
fwait
mov
shl
out
jnp
xlat
inc
xchg
out
imul
xchg
std
fdivr
push
ret
xchg
aaa
jge
pop
or
test
lods
fwait
jmp
mov
pop
dec
add
xor
mov
jno
jmp
adc
push
xlat
and
mov
pusha
pop
xchg
call
cs
sbb
out
test
sub
cmps
jmp
hlt
and
rcl
push
add
pop
xchg
fmul
test
jmp
add
pop
mov
push
jge
pop
gs
adc
fistp
data16
movs
jecxz
loop
or
test
mov
mov
inc
movs
mov
ja
jl
popa
(bad)
cmp
(bad)
and
lods
mov
xchg
repnz
xchg
call
pop
fwait
pop
in
sub
retf
xor
add
add
push
dec
push
push
pop
cmp
fwait
into
imul
push
ss
xor
mov
ficomp
mov
and
cmp
stos
lahf
sbb
aad
in
imul
outs
out
mov
movs
sti
xchg
jo
xchg
addr16
add
sbb
jne
add
popf
out
icebp
mov
cdq
ficom
mov
mov
call
enter
xchg
jmp
ret
movs
aas
pop
xor
xchg
jb
jl
push
sbb
mov
cmp
mov
push
in
push
ret
dec
xchg
js
fst
and
rcl
xor
adc
mov
mov
loopne
pop
pop
mul
in
call
cli
repz
sbb
xchg
pop
lds
stos
mov
aam
pop
retf
xchg
jbe
lds
mov
pop
adc
adc
xchg
into
push
pusha
ins
pop
inc
sbb
xchg
(bad)
not
imul
in
or
xchg
fsub
rol
xor
adc
push
xchg
lods
xchg
pop
adc
data16
adc
and
in
xor
std
(bad)
aam
sub
imul
fwait
push
push
pop
pop
dec
push
out
xchg
ficom
jg
shl
cdq
inc
adc
test
xchg
mov
sub
shl
repz
pop
loopne
dec
sahf
stos
xchg
pop
mov
fcom
aad
jno
adc
movs
push
xchg
loopne
mov
jnp
(bad)
rol
call
loopne
pop
pop
or
mov
pop
or
rol
fwait
cmp
ret
xchg
in
mov
pop
jl
cmps
cmps
jnp
mov
std
jo
xchg
fstp
pop
test
inc
xor
inc
test
xchg
xchg
push
test
mov
push
(bad)
scas
and
cmps
movs
ins
inc
xchg
ins
and
mov
or
mov
jge
push
fisub
pop
mov
imul
jne
and
jp
fcomi
jb
xchg
sti
xlat
je
fmul
test
dec
pop
retf
and
(bad)
jmp
or
push
out
or
pop
xchg
leave
stos
fcom
jmp
mov
or
xchg
cmps
jl
pop
mov
aam
cmp
xchg
mov
dec
repnz
stos
mov
mov
sbb
pop
in
xchg
jmp
iret
mov
mov
cmp
pop
and
leave
mov
fild
out
fwait
adc
cmp
push
adc
adc
scas
mov
push
mov
xchg
popa
xchg
aad
(bad)
push
scas
and
lock
popf
xchg
add
mov
xor
xor
push
sbb
xchg
cmp
fcmovnb
das
push
test
mov
xor
sbb
frstor
adc
iret
push
xchg
fsubr
(bad)
loope
inc
neg
mov
mov
mov
jb
sub
das
(bad)
dec
stos
ins
call
pop
xor
jge
push
inc
or
xchg
pop
mov
daa
movs
xchg
mov
adc
out
in
scas
jmp
retf
and
mov
xchg
jg
pop
inc
pusha
push
(bad)
nop
cli
xchg
mov
cwde
gs
xchg
aam
xor
stc
jb
outs
inc
neg
xchg
xlat
mov
dec
xchg
lea
dec
cmp
pop
xor
fwait
stos
push
xchg
lahf
sbb
das
int3
add
xchg
stos
jmp
outs
iret
movs
inc
pop
shr
ficom
es
stos
pusha
sbb
inc
jno
pop
adc
outs
aaa
(bad)
xchg
sub
sahf
test
xor
cmp
xchg
sub
das
mov
jmp
ins
and
xchg
aam
push
add
jmp
xchg
pop
push
stc
sub
scas
push
sub
out
nop
xchg
mov
or
sbb
iret
bound
outs
in
shl
fiadd
xchg
mov
mov
xchg
stc
inc
xchg
lods
sbb
sub
adc
add
xchg
jmp
in
fwait
or
or
fwait
out
ja
adc
add
ror
jg
jmp
xchg
nop
push
sub
rcl
sub
dec
ins
push
xchg
outs
imul
mov
xor
imul
add
xchg
nop
(bad)
sbb
or
mov
call
xchg
pop
popf
lock
sbb
add
xchg
fs
or
das
xor
jl
call
pop
into
mov
out
push
pop
shl
mov
jne
mov
mov
aam
fdivr
push
jmp
xchg
adc
or
fdiv
mov
mov
jbe
mov
arpl
sub
add
xchg
push
js
lock
movs
jns
xchg
mov
sub
clc
jnp
ficom
push
mov
xchg
xchg
or
jmp
dec
or
fcom
scas
add
js
pushf
jno
fsubr
ins
adc
xor
shl
adc
imul
outs
mul
mov
ss
adc
int3
mov
stos
adc
rcl
lahf
outs
ror
xchg
cmp
sar
pop
xchg
out
clc
sti
out
xchg
xchg
push
dec
xor
lods
cs
dec
fwait
mov
in
inc
adc
pop
out
rol
push
xlat
jbe
test
push
mov
adc
test
pop
xchg
sub
fnstcw
je
xchg
scas
mov
(bad)
mov
fwait
mov
fist
adc
jbe
enter
call
pop
out
fcomp
jmp
icebp
fidiv
cmc
stos
mov
and
xchg
mov
repz
sbb
pop
fstp
lahf
rcr
xchg
std
mov
cmps
movs
test
add
out
adc
stos
retf
mov
adc
jle
xchg
cwde
sti
jne
xor
out
xor
aas
in
adc
xchg
cdq
add
dec
int3
cmp
pop
icebp
(bad)
cmp
retf
clc
aas
pushf
xchg
pop
idiv
jl
das
xchg
push
jmp
xchg
xchg
sub
mov
hlt
xchg
aas
fdivr
xchg
add
push
push
fist
mov
fwait
imul
add
sub
icebp
lock
lods
mov
xchg
jl
dec
sub
xchg
vmovlps
in
fidivr
pop
or
(bad)
loope
retf
sahf
push
xchg
mov
cli
punpcklwd
outs
inc
xchg
pop
(bad)
sub
dec
inc
xchg
es
daa
fwait
les
dec
movs
and
sahf
xchg
popf
pop
adc
and
sbb
xchg
pop
inc
jl
lahf
jmp
jg
add
pop
xchg
es
xor
cs
xchg
push
(bad)
inc
xor
(bad)
(bad)
movs
xchg
ror
or
cdq
in
je
and
pop
inc
ja
inc
ins
push
nop
mov
push
jmp
loope
or
ficom
mov
and
sub
xchg
jmp
loope
fist
repnz
ficom
iret
xchg
dec
xchg
dec
shl
enter
add
xor
push
pop
pop
add
ret
xchg
jle
ror
adc
add
xchg
(bad)
(bad)
dec
mov
xchg
sbb
ret
adc
adc
mov
fwait
aaa
xchg
xchg
enter
xchg
movs
je
stos
fcomp
fistp
add
cmp
leave
dec
bnd
in
xchg
int
adc
xlat
popf
mov
repz
and
cmps
fwait
mov
xchg
cli
in
dec
in
shr
dec
xchg
and
push
loope
xchg
cmp
rep
in
xchg
mov
out
add
dec
xchg
aas
dec
outs
jnp
inc
test
or
and
fwait
sbb
or
cdq
fidivr
pop
xor
cs
mov
lods
popf
pop
sub
pop
es
aaa
jae
or
xchg
pop
mov
test
and
adc
adc
push
cmp
cmps
xchg
xchg
or
(bad)
xor
xchg
ds
adc
int3
aad
xchg
push
data16
bound
(bad)
push
test
or
mov
into
call
adc
rcl
mov
ins
test
and
pop
mov
xchg
jno
pop
call
xchg
ret
cmp
js
rol
icebp
adc
pop
add
popf
xchg
mov
outs
add
pop
xchg
iret
cmp
mov
jns
mov
in
and
test
in
mov
jecxz
dec
adc
mov
cli
aam
push
pop
in
mov
push
dec
xor
push
inc
jge
mov
in
xchg
add
push
ins
aam
rcl
push
loopne
data16
xchg
jae
add
ins
cld
sbb
or
mov
std
out
pop
jno
xchg
pop
mov
xchg
repz
cmp
test
lahf
pop
mov
or
mov
push
mov
sar
mov
shl
sub
iret
push
jo
pop
in
cmp
add
mov
adc
add
xchg
push
push
fist
adc
cld
and
push
pop
push
hlt
fs
in
shl
xchg
outs
pop
pop
sbb
xchg
jecxz
xor
fistp
je
inc
lea
pop
xchg
xchg
lods
jge
mov
aam
fs
outs
mov
push
gs
pop
or
mov
mov
aad
cld
add
sub
je
xchg
push
add
inc
xchg
jmp
sub
xchg
aam
fs
inc
xchg
adc
arpl
lahf
sahf
jle
xchg
(bad)
pop
data16
ins
xor
jno
dec
mov
test
xchg
cld
rol
jo
pop
daa
xchg
mov
dec
das
xchg
jmp
xor
je
push
hlt
dec
mov
cmp
pop
xchg
test
fld
jmp
mov
fs
out
sub
mov
adc
not
dec
dec
pop
xchg
jl
dec
cld
mov
or
int
dec
adc
retf
imul
repz
test
mov
test
add
jns
xchg
mov
rol
fcom
jmp
pop
jnp
add
xchg
(bad)
fsubrp
jle
out
fist
mov
jmp
mov
or
mov
adc
jecxz
cmp
scas
mov
or
scas
and
push
jns
clc
in
fs
jg
mov
add
dec
push
dec
fwait
jns
fnsave
xchg
xor
jecxz
sub
aas
mov
shr
(bad)
push
or
fs
cld
int
jae
xchg
repz
push
xchg
mov
add
adc
xchg
js
movs
rcl
pop
xchg
mov
mov
fdivr
and
ror
xchg
and
cli
push
mov
xchg
pop
in
adc
jmp
xchg
ror
dec
imul
jo
cmp
or
xchg
sbb
mov
lds
push
sbb
xor
shl
xchg
xchg
jcxz
sub
ret
xchg
push
mov
mov
mov
fs
pop
sub
cwde
xchg
dec
cld
cmp
pusha
mov
lods
xchg
mov
je
fist
inc
shr
jae
jnp
lahf
std
jmp
dec
int
xchg
out
cli
push
mov
data16
xchg
in
xchg
cld
iret
cdq
sbb
outs
xchg
push
xchg
movs
mov
sar
sub
xchg
pop
jmp
mov
add
ds
inc
xchg
sbb
inc
outs
and
xchg
sahf
ss
out
sub
add
fimul
xchg
shr
xor
jnp
cmp
mov
add
scas
jecxz
push
into
mov
inc
test
repz
int3
scas
xchg
xchg
les
ins
adc
dec
push
xchg
push
xchg
dec
sub
pop
inc
clc
and
mov
cmps
push
sub
fdiv
fwait
sub
dec
pusha
int3
xchg
xor
dec
jecxz
inc
xchg
sub
cdq
cmps
int3
ret
push
out
sbb
sub
adc
and
add
sub
and
mov
inc
int3
or
jl
pop
adc
loopne
(bad)
xchg
mov
scas
or
pop
das
test
ja
or
mov
sbb
mov
mov
mov
and
jmp
jo
push
sub
out
nop
jbe
push
aad
dec
cmp
out
push
sub
mov
push
jl
aas
into
and
arpl
xor
mov
mov
add
inc
push
loopne
cmp
inc
push
dec
jl
xchg
xor
sub
dec
push
out
xchg
sahf
icebp
inc
ins
mov
xor
ror
in
or
cmp
scas
xchg
aam
outs
sub
daa
(bad)
and
pop
mov
xor
mov
jge
gs
push
lock
push
inc
dec
inc
xchg
sbb
jae
imul
cmps
rcr
dec
adc
cdq
das
hlt
inc
mov
fiadd
push
ins
mov
mov
push
jmp
cmp
inc
fnstsw
fwait
mov
inc
xchg
cmp
out
aad
pop
ret
inc
cmp
push
cmp
cwde
test
or
cmps
call
popf
push
mov
jne
push
adc
add
subps
ret
xchg
or
xchg
xor
push
jmp
mov
mov
push
ins
lods
inc
xchg
pop
jl
in
pusha
rol
inc
mov
or
push
into
ds
push
mov
cdq
fsub
mov
ret
pop
xor
aad
sbb
out
xchg
fidiv
in
xchg
repnz
cmp
adc
dec
(bad)
adc
aad
ror
cs
test
xor
push
jno
jl
mov
xchg
pop
sbb
lods
aas
call
ror
adc
sbb
icebp
jo
xchg
mov
retw
add
jnp
mov
out
pop
adc
push
enter
jne
xor
mov
sub
and
mov
mov
sub
sbb
push
aam
adc
xchg
pushf
repnz
xchg
test
cmp
test
and
sbb
xchg
push
icebp
(bad)
lock
test
cld
jne
leave
mov
lahf
xlat
aad
aam
xor
movzx
loopne
fsub
iret
cmps
xor
inc
xchg
cli
add
scas
xchg
mov
or
push
xor
outs
cwde
enter
test
daa
into
xchg
push
mov
fiadd
(bad)
aaa
mov
aam
xor
mov
ficom
mov
pusha
int
mov
push
or
inc
mov
enter
sub
mov
pop
sti
(bad)
ror
sar
rcl
push
xor
and
xchg
pop
loope
jbe
push
mov
(bad)
mov
push
sub
aam
xlat
call
iret
les
mov
lods
mov
ror
inc
jbe
inc
gs
bound
xchg
arpl
jns
xchg
xor
mov
es
xchg
sub
mov
je
shr
daa
inc
out
enter
xchg
mov
add
mov
cmp
jb
lea
sub
or
xchg
and
mov
cwde
and
sbb
pop
stos
popa
fcom
ins
or
push
mov
xor
or
and
loopne
in
add
fs
ins
pop
xchg
or
aas
fwait
pushf
(bad)
hlt
xlat
call
fistp
xor
enter
psrld
gs
sbb
sub
xor
out
in
mov
cmp
fwait
mov
lds
push
fwait
pusha
inc
shl
ficomp
jbe
mov
xor
mov
mov
enter
out
adc
nop
add
out
push
es
fst
sahf
fwait
lods
sub
add
mov
movs
mov
cmp
sbb
mov
movs
xchg
out
ss
retf
scas
ins
xchg
fiadd
(bad)
jmp
jg
(bad)
mov
imul
es
js
mov
call
xchg
cmp
test
fwait
pop
loopne
push
ret
mov
xchg
sbb
adc
add
xor
addr16
xlat
inc
xchg
aad
cmp
call
sbb
cmps
and
inc
mov
push
test
fs
xchg
into
ins
push
pop
cmps
adc
ret
(bad)
retf
xor
test
inc
pushf
and
test
in
jp
xchg
int3
movs
je
(bad)
push
es
or
mov
xchg
std
pop
pop
lods
leave
pop
mov
rol
cli
call
cld
aas
adc
xor
cmps
push
mov
popa
xchg
icebp
lock
call
std
shr
fldenv
push
inc
rcl
jmp
scas
loop
test
mov
xor
int
clc
cmp
das
jp
cdq
xchg
xchg
push
mov
ds
xor
and
add
sub
adc
xchg
mov
(bad)
rcr
rcl
bound
call
mov
pop
stos
xchg
jae
push
inc
sbb
pop
dec
aaa
jp
retf
in
xor
adc
test
mov
cmp
xchg
mov
inc
sbb
cld
jbe
imul
cmps
xchg
in
mov
shl
pop
or
push
mov
pop
mov
enter
xchg
adc
in
mov
inc
cmp
leave
fwait
pand
xchg
xchg
sti
jp
jmp
sbb
cs
movs
or
and
sub
xor
test
xlat
inc
and
je
pop
sbb
stc
mov
test
sbb
or
adc
pop
jo
xchg
dec
jne
bound
cld
outs
int3
out
xor
lahf
nop
and
jmp
pop
inc
push
jbe
xchg
xor
jecxz
or
xchg
rol
sub
int3
add
addr16
mov
inc
dec
mov
int3
stc
push
(bad)
or
fadd
jb
and
dec
ficom
dec
in
dec
imul
rol
mov
xchg
outs
addr16
fidivr
and
sbb
and
jbe
out
sti
jecxz
push
pop
xchg
test
movs
xchg
out
mov
xor
fs
mov
push
sub
inc
hlt
and
fcmovnu
xchg
add
outs
lock
sbb
mov
jbe
pop
into
lods
fbstp
mov
ins
jb
cmp
jge
repz
mov
mov
sbb
test
sub
xchg
pop
dec
xlat
cmp
jl
ja
fidivr
fist
add
sub
jle
mov
xchg
inc
ja
jmp
push
clc
mov
adc
and
or
cld
mov
aam
jge
cmp
sbb
std
mov
jge
jmp
cwde
mov
push
fisubr
xchg
xchg
es
sbb
cdq
sbb
xbegin
sub
inc
xchg
mov
rcr
sar
adc
inc
in
xor
jg
add
iret
mov
jge
sbb
loop
xchg
ins
xor
push
pop
popf
fcmovbe
xchg
clc
cdq
sbb
aas
jmp
push
fwait
rcr
cmp
inc
es
sbb
and
cmp
push
fcom
sub
dec
out
arpl
rcl
ficomp
add
jns
add
out
xchg
popa
lods
sbb
mov
jl
fldcw
xchg
dec
xchg
cmp
adc
xchg
cmp
xchg
xchg
jbe
loop
sub
test
rcr
fwait
add
mov
adc
xchg
push
or
imul
arpl
(bad)
lea
push
pop
xchg
scas
mov
push
xchg
call
push
xchg
addr16
(bad)
xchg
arpl
ds
cmp
shl
stos
out
sbb
call
pop
mov
shl
bound
mov
popf
xchg
es
movs
loop
and
dec
mov
dec
call
shl
adc
clc
sub
mov
push
iret
imul
xchg
xchg
push
push
test
sub
mov
or
xor
xchg
push
mov
into
out
sbb
vmptrld
and
std
js
xchg
xchg
xor
or
mov
(bad)
xchg
fwait
mov
push
ret
add
sbb
mov
in
cmp
xchg
xor
rcr
mov
pop
ror
loop
mov
mov
imul
jecxz
fld
fwait
xchg
push
pop
adc
in
cdq
cmps
ss
loope
dec
xchg
out
mov
hlt
xchg
outs
(bad)
neg
sub
xchg
ds
mov
cmp
in
push
and
push
cmp
loope
xchg
fstp
outs
in
push
pushf
mov
sbb
(bad)
xchg
cmp
inc
popa
dec
inc
aam
sahf
scas
xchg
lock
pop
or
es
and
push
xchg
sbb
test
test
aad
xchg
push
xchg
jge
adc
jl
xchg
repz
outs
mov
dec
xchg
mov
inc
cmps
ja
(bad)
std
mov
daa
aad
cmps
mov
jbe
xchg
push
in
retf
mov
unpcklps
inc
rol
rcl
(bad)
retf
pop
sti
mov
mov
pop
xchg
not
xchg
cmp
pushf
aam
movs
mov
and
xchg
sub
sub
rcr
js
xchg
sub
fiadd
mov
out
je
or
cmp
cmp
xchg
jg
arpl
std
and
aam
cli
sbb
adc
xlat
or
xor
mov
push
ins
fdiv
inc
push
dec
outs
rol
xor
mov
xchg
addr16
adc
loopne
pushf
imul
xchg
(bad)
xlat
cmp
aaa
sbb
inc
xchg
push
nop
or
sub
data16
mov
es
lea
pop
adc
or
fsubr
add
push
cmp
mov
adc
jecxz
mov
adc
shld
clc
jle
xchg
xor
icebp
mov
xchg
mul
pop
xchg
pop
add
adc
ror
jno
cmp
cli
int
movs
jmp
xchg
fucomi
nop
dec
fldenv
dec
xchg
sbb
pop
xchg
mov
outs
xchg
ret
ja
out
xchg
push
test
dec
jg
dec
xchg
leave
pop
inc
mov
xchg
fdivr
cmc
ins
sub
mov
mov
data16
adc
xchg
jno
xor
mov
xchg
dec
add
and
jmp
retf
push
xchg
pop
hlt
xchg
cwde
ret
adc
shl
push
mov
in
xchg
es
push
fdiv
xor
jne
shld
xchg
dec
imul
sub
inc
add
mov
sbb
xchg
fist
stos
outs
cmp
iret
mov
xchg
pop
hlt
jmp
lods
popa
js
aaa
xchg
or
xchg
scas
xor
push
push
mov
sub
jecxz
mov
scas
call
jb
inc
push
adc
push
fbstp
xchg
xchg
jmp
in
mov
xchg
iret
push
int3
sub
pushf
in
or
mov
cmc
add
xchg
cmp
xlat
sub
mov
pushf
xchg
or
mov
and
in
xchg
pop
xor
in
popf
and
sbb
xchg
jo
retf
mov
xlat
lds
mov
pop
scas
adc
hlt
jl
jb
stos
add
inc
xchg
les
retf
in
movs
add
jp
cmp
jmp
cmp
fdiv
sub
jo
xchg
sub
pop
adc
rcr
jg
push
cdq
or
addr16
pop
loopne
sub
test
and
and
dec
cli
fld
and
or
and
xchg
call
xchg
int
cmps
adc
cmp
je
inc
xchg
repnz
fiadd
in
push
movs
arpl
sub
mov
xchg
xor
mov
xchg
mov
mov
jecxz
bound
sub
jno
iret
ret
cmp
retf
out
fdivr
xor
test
cmp
inc
mov
call
add
or
int3
xchg
or
cmp
jp
aam
sub
sub
or
xchg
add
lea
int
xor
mov
xchg
ins
push
jns
in
pop
je
out
repnz
cmp
iret
mov
int
call
push
loopne
adc
mov
int3
mov
popf
cmp
pop
ds
pop
(bad)
dec
retf
xchg
bound
jle
mov
mov
push
and
imul
add
(bad)
aad
lds
shl
push
lods
out
aaa
int3
push
inc
xchg
mov
loope
jo
stos
xchg
mov
push
push
mov
int
pop
jb
mov
xchg
fwait
mov
retf
push
push
sub
xchg
mov
ror
fsubr
mov
pop
nop
aaa
xchg
xchg
jmp
adc
xchg
ficom
idiv
rol
sbb
cwde
sbb
push
or
outs
xchg
nop
daa
jnp
cmc
fmulp
pop
mov
add
retf
clc
adc
jae
addr16
and
sete
mov
inc
mov
iret
cmp
mov
xchg
jmp
loopne
pop
xchg
sqrtps
lods
movs
push
xchg
mov
mov
fist
push
xchg
push
push
mov
cmp
xchg
sub
xor
cmp
inc
inc
clc
xchg
xchg
xor
inc
jnp
test
jae
mov
xchg
mov
fimul
add
mov
mov
push
scas
xchg
sti
rcr
rcl
movs
cmp
mov
xor
push
lahf
jns
mov
jl
jmp
(bad)
cld
out
test
and
mov
fwait
inc
scas
movs
sbb
jmp
add
jp
xchg
pop
and
jb
shl
sub
stc
scas
pusha
test
fs
into
rol
xchg
jge
sub
and
shl
lods
dec
cs
mov
inc
es
push
mov
pop
sti
adc
push
outs
bound
popf
mov
mov
xchg
mov
fld
xchg
inc
xchg
inc
outs
adc
dec
retf
sbb
mov
cmp
inc
fmul
mov
mov
fld
adc
and
sahf
js
xchg
cmp
sbb
jo
xor
mov
iret
int3
xchg
inc
inc
xor
dec
add
xchg
sub
repz
pop
and
xchg
ja
adc
xchg
pop
jbe
push
push
xchg
lds
mov
adc
push
xchg
fcmovbe
sbb
jne
aam
lahf
pushf
movs
daa
adc
push
in
xor
retf
pop
xchg
dec
dec
dec
addr16
loop
xchg
inc
test
cmp
adc
push
mov
repnz
mov
loop
adc
jmp
add
xchg
adc
dec
inc
(bad)
mov
mov
push
stos
mov
inc
(bad)
or
adc
xlat
or
push
mov
or
arpl
jbe
dec
xchg
cmp
pop
in
xchg
xor
xor
xchg
outs
dec
popf
mov
jmp
aaa
mov
xor
jnp
adc
mov
lods
popf
xchg
push
aad
push
xchg
mov
not
repnz
xchg
ds
stos
test
mov
xchg
pop
xchg
sub
xchg
adc
mov
mov
xchg
test
out
jmp
hlt
xchg
sbb
inc
mov
mov
push
ror
jno
daa
xchg
sti
mov
ds
xchg
mov
dec
mov
and
rol
movs
cmp
and
(bad)
(bad)
mov
mov
aad
shr
sbb
stos
pop
test
dec
out
add
adc
jmp
(bad)
test
pop
inc
aam
jnp
lahf
pop
push
jb
fwait
sbb
adc
pop
and
sub
xchg
out
or
xchg
dec
int3
push
lea
iret
das
dec
out
mov
jae
int3
xchg
sub
xor
xlat
xchg
ja
les
or
popa
push
jmp
push
jge
push
cld
add
xchg
xchg
dec
sub
popa
push
inc
xchg
in
mov
ss
xchg
(bad)
xchg
adc
jb
shr
ins
stos
ret
xchg
xchg
rol
push
lea
xchg
cmp
push
hlt
popa
jge
stos
jmp
fwait
in
fdiv
mov
push
xchg
out
int
push
xchg
push
call
sub
push
mov
hlt
int
cmps
sub
xor
les
push
and
xchg
data16
mov
pop
dec
push
jl
pop
js
imul
pop
xor
xor
int3
cmp
loopne
lock
lods
dec
mov
test
stc
xchg
nop
or
test
je
in
xchg
mov
imul
xchg
xchg
jmp
mov
loope
jmp
push
cmp
mov
ins
in
adc
sbb
cs
lods
arpl
add
or
pop
mov
sbb
aam
in
mov
pop
fwait
enter
push
fwait
lea
(bad)
xor
add
cmp
lods
lods
push
xor
mov
rcr
xchg
jg
cwde
mov
xchg
mov
dec
adc
xchg
xchg
cmp
sub
xchg
test
movs
xchg
lods
adc
jno
jbe
inc
xchg
pop
imul
mov
fs
and
das
push
pop
not
ret
ins
hlt
ja
xchg
in
mov
ret
in
xor
fidiv
xchg
cmp
cli
jp
xor
push
rcl
jb
xchg
(bad)
inc
sub
je
adc
test
lahf
imul
cmp
xchg
aas
rol
lock
add
addr16
add
idiv
aaa
je
jb
out
sub
adc
mov
add
js
sub
aam
js
mov
scas
rol
xchg
sar
xlat
bound
mov
ret
dec
(bad)
sbb
fwait
inc
jle
add
test
jmp
cdq
pop
int
push
scas
enter
and
out
arpl
cmove
xchg
pop
je
fsubr
mov
xchg
xchg
mov
mov
test
mov
ficom
call
retf
enter
mov
in
xchg
sar
aaa
mov
xchg
pop
add
jb
xchg
push
cmps
mov
push
or
cmp
xor
(bad)
pusha
add
xchg
xchg
xor
jmp
add
movs
push
pop
or
pop
push
xor
aam
cmc
xor
jns
xchg
pop
sahf
sub
ins
mov
xchg
fst
push
pop
test
aam
fcomip
popf
jb
movs
mov
cli
fld
sbb
and
xchg
les
dec
xchg
mov
mov
mov
mov
sbb
inc
cmc
sub
loopne
xlat
pop
cmps
ret
xor
dec
stos
sub
leave
mov
adc
push
add
dec
fmul
fist
mov
xchg
adc
sbb
outs
xchg
xchg
ins
dec
jecxz
clc
or
add
jne
inc
cmps
add
sub
cdq
inc
cmp
in
ret
jo
inc
xchg
test
sub
in
stos
push
mov
call
int
rol
jp
xchg
add
je
dec
xchg
loope
add
cmps
lahf
mov
mov
push
sbb
pop
cmp
ja
xchg
or
rcl
inc
loop
or
hlt
stos
inc
iret
in
mov
sub
push
xchg
gs
mov
test
and
xchg
enter
jp
stos
jl
fcomp
sbb
jecxz
lds
test
loopne
fwait
pop
aad
es
xor
xchg
mov
scas
push
jecxz
xchg
mov
pop
inc
push
(bad)
repnz
lods
lds
rcl
mov
mov
cmp
mov
xchg
mov
leave
push
inc
loopne
movs
pop
test
sbb
xor
mov
mov
cs
pop
or
xchg
sbb
jmp
mov
cmp
xchg
jle
movs
sbb
retf
aam
push
xchg
push
jno
dec
mov
xlat
and
dec
rcr
cwde
imul
xor
icebp
iret
sbb
or
je
inc
nop
shr
into
iret
pop
mov
sub
xchg
mov
loope
adc
cmp
xchg
outs
mov
or
xchg
sub
aad
cli
xchg
popf
mov
ret
jnp
(bad)
sti
xchg
in
shl
outs
daa
inc
cmp
loopne
fcom
test
dec
mov
cmp
adc
rol
fs
dec
and
gs
dec
ins
shl
cwde
cmps
and
in
adc
dec
xor
mov
or
sub
pop
mov
jmp
jbe
xchg
jns
repnz
xchg
je
xchg
ins
outs
xchg
mov
out
sbb
pop
mov
cmp
pop
mov
ja
inc
(bad)
xchg
add
adc
call
jg
mov
mov
sbb
push
mov
xchg
sub
jo
(bad)
xchg
and
xchg
xchg
vpor
xlat
sub
in
adc
sub
popa
xchg
es
icebp
push
jns
jnp
inc
rol
outs
jbe
test
dec
mov
adc
pop
in
out
outs
idiv
popf
cmp
inc
dec
xor
or
mov
mov
cwde
cmp
jnp
and
xchg
or
add
sbb
retf
iret
mov
adc
ja
fs
jbe
mov
ret
sbb
push
fwait
shl
mov
int3
mov
ja
ficomp
or
xor
lods
shr
fdiv
data16
mov
test
mov
dec
fcmove
dec
or
xchg
stos
add
mov
inc
push
jg
adc
adc
push
ins
xor
xchg
xchg
xchg
loop
mov
add
adc
xchg
mov
jecxz
scas
push
in
xchg
sbb
pushaw
mov
dec
xchg
sti
xor
inc
xchg
into
push
push
lds
dec
stc
je
cmp
arpl
test
adc
xchg
adc
mov
dec
daa
cmp
push
rcr
sub
adc
mov
lock
xor
adc
stos
push
or
dec
jecxz
mov
hlt
pop
mov
mov
test
jns
add
fwait
pop
ret
and
sub
xor
dec
shr
ja
retf
shr
ins
jle
fwait
mov
dec
xor
cdq
cmps
sbb
xchg
or
adc
push
push
daa
shr
xchg
div
jg
push
xchg
in
sti
mov
xor
inc
xchg
fild
repz
sbb
retf
dec
jb
adc
fwait
int
aam
mov
mov
push
ret
imul
xchg
cli
cmp
inc
daa
mov
test
loop
repz
sahf
xchg
adc
ja
xchg
in
in
and
inc
jnp
cli
xchg
retf
lds
loopne
les
mov
dec
aad
pop
cmp
out
push
cmp
daa
arpl
mov
ins
add
ror
mov
lods
adc
xchg
call
test
(bad)
cdq
loopne
cmc
stos
dec
push
adc
cmps
xchg
sub
retf
and
xchg
in
outs
or
xchg
dec
jns
xlat
iret
imul
icebp
mov
sub
mov
fs
retf
jne
xchg
sub
mov
stos
mov
call
aas
xchg
xchg
pop
loope
mov
mov
mov
xchg
add
inc
ins
dec
cmp
push
push
add
and
jne
xchg
inc
int3
xchg
out
ret
cmc
cmps
add
jg
pop
rol
push
inc
push
sub
inc
and
test
add
mov
pop
pop
pop
xchg
call
into
xchg
fs
cmp
dec
mov
cmp
xchg
pop
(bad)
jb
xor
xchg
call
int
sbb
cmps
pushf
xchg
xchg
pop
push
push
in
rcl
mov
stos
xchg
fstp
ja
test
(bad)
jl
mov
or
xchg
sti
das
or
mov
adc
jp
(bad)
xchg
xor
ss
adc
sbb
cdq
aad
push
iret
scas
xchg
jnp
inc
mov
add
sti
xchg
daa
jl
cmp
xor
in
adc
push
andps
adc
xor
ret
xchg
and
je
xor
mov
xor
pop
jg
gs
loopne
cmp
lock
xchg
sbb
push
jno
xchg
or
cmp
int
(bad)
xlat
cld
xchg
in
sbb
dec
pop
xchg
or
inc
stos
add
nop
dec
xchg
shl
in
fnsave
xchg
leave
jbe
into
(bad)
in
pop
xchg
dec
jno
jecxz
cld
inc
jmp
sbb
in
adc
paddsw
inc
inc
je
xor
(bad)
lahf
hlt
push
(bad)
out
jmp
sub
inc
sbb
xchg
cdq
mov
sub
mov
push
xlat
jg
outs
inc
mov
(bad)
dec
ret
sti
mov
inc
pop
dec
pushf
adc
cmp
mov
xor
add
inc
xchg
push
adc
and
rol
mov
pop
aas
not
lods
in
xchg
cmp
sbb
pop
aam
xchg
sub
jge
xchg
xchg
popf
and
dec
xchg
inc
push
pop
or
xchg
bound
xchg
pop
out
fidivr
test
in
aam
mov
sahf
xchg
inc
hlt
fcomp
xchg
(bad)
iret
jle
(bad)
rcr
(bad)
repnz
add
hlt
dec
ins
xchg
(bad)
push
mov
je
neg
pop
repnz
cdq
rol
les
jne
imul
lods
sbb
retf
lahf
mov
je
push
add
test
xchg
cmp
adc
mov
pop
out
fdivr
jns
scas
mov
imul
rcl
call
gs
push
test
mov
cmps
pop
rcl
push
xchg
push
mov
sbb
test
iret
xchg
mov
mov
inc
add
mov
xchg
outs
mov
push
cmp
jge
out
xchg
aaa
test
or
ss
inc
add
lea
fisttp
dec
sbb
xchg
stos
(bad)
push
loop
push
dec
lock
test
aaa
(bad)
inc
push
xchg
adc
pop
inc
test
lahf
xchg
mov
fcmovnb
ss
test
adc
push
and
or
xchg
repnz
aad
fild
popf
adc
fsub
or
mov
daa
and
ss
ficomp
xchg
test
jno
cs
push
adc
cdq
cmp
xchg
loope
into
shl
or
adc
movs
imul
fwait
mov
in
pushf
and
in
pop
stc
hlt
daa
jmp
xchg
sub
add
pop
inc
vmread
cmps
mov
sahf
xchg
cmps
fcom
cdq
push
(bad)
dec
pop
std
cmp
xchg
sbb
dec
jmp
mov
cld
ins
lock
jge
fcmovnu
add
mov
mov
jl
xor
xchg
xchg
mov
and
xor
push
xchg
cmp
(bad)
mov
jmp
sub
pop
aas
sub
cmp
scas
arpl
adc
dec
out
add
inc
je
xchg
mov
clc
cmp
push
fwait
pop
inc
xchg
cmp
dec
js
xor
sub
cmps
xchg
mov
cdq
sbb
cmp
imul
sub
xchg
push
ret
sbb
mov
pop
std
test
daa
xchg
add
mov
pop
popf
sbb
inc
and
mov
jge
mov
sub
mov
sbb
xchg
ret
jp
ins
fild
adc
pop
cmp
fldenv
xchg
xchg
sti
mov
jae
rcl
test
mov
sbb
inc
xchg
xor
adc
imul
jge
loop
or
cmps
cmps
dec
inc
fwait
adc
cs
and
pop
adc
je
sbb
push
mov
jecxz
or
pop
repz
je
xchg
fs
into
xor
push
sbb
scas
inc
leave
xor
push
add
pop
mov
jne
dec
mov
xchg
pop
mov
and
mov
stc
mov
dec
loopne
inc
fisub
inc
mov
xchg
adc
fdiv
add
mov
sub
sbb
or
sbb
int3
push
xor
xchg
push
lahf
cmp
mov
and
inc
nop
(bad)
sar
or
sbb
mov
sbb
adc
loopne
out
out
cmp
jbe
sbb
ret
leave
pop
mov
rcr
or
xchg
mov
and
sahf
push
adc
shl
xchg
xchg
inc
iret
imul
dec
clc
out
xchg
and
loopne
mov
fwait
push
or
cwde
mov
cmc
xchg
(bad)
sbb
loopne
cmovle
dec
mov
jmp
mov
int3
outs
adc
mov
jne
xchg
fsubr
inc
add
and
and
xor
mov
adc
xlat
cmp
xchg
xchg
jmp
in
bound
ins
aam
jecxz
mov
sbb
les
jne
add
add
and
push
jl
into
sti
xchg
ror
ins
adc
es
(bad)
push
icebp
xchg
push
pop
or
retf
out
mov
xchg
sahf
or
imul
xor
test
xchg
(bad)
out
mov
xchg
adc
adc
es
cmps
mov
mov
xor
rcl
xchg
test
push
bound
daa
inc
xchg
pop
or
pop
and
mov
sbb
xchg
nop
ins
xchg
aam
loop
pushf
pop
outs
sbb
sub
xchg
lahf
sbb
ret
cmc
ror
mov
cli
retf
fwait
cmp
imul
xchg
lods
dec
add
jmp
cmp
mov
mov
mov
lods
test
and
sub
xchg
fisubr
dec
icebp
jle
xchg
cmps
push
int3
push
std
inc
addr16
xchg
inc
into
or
mov
dec
daa
push
sub
mov
pop
xchg
mov
popa
int
fisttp
push
cli
clc
pop
sahf
fwait
mov
mov
scas
or
icebp
outs
cmps
xchg
int3
adc
addr16
movs
mov
mov
dec
cmp
xchg
stos
int
in
pop
rol
mov
sbb
sbb
movq
xchg
cmp
ficom
adc
sti
xchg
lahf
xor
cdq
shl
cmp
xor
std
stos
iret
add
cwde
mov
sbb
xchg
xor
in
jne
xchg
mov
mov
jge
mov
mov
jne
pusha
mov
add
pop
mov
jp
push
inc
pop
enter
loope
dec
div
in
xchg
lahf
mov
jmp
xchg
push
js
pop
sbb
jg
xchg
les
call
aad
sbb
cmp
neg
sub
xchg
test
ret
or
push
mov
sub
(bad)
int3
or
(bad)
ret
cmc
cmc
jge
push
xor
mov
add
sub
bound
icebp
fstp
mov
in
dec
push
mov
adc
(bad)
aad
dec
sub
fwait
clc
bnd
daa
movs
inc
inc
fstp
cmp
scas
sub
into
lods
ss
xchg
imul
cmp
push
push
xchg
popa
mov
(bad)
sbb
stos
ins
jno
addr16
sub
aaa
movs
xor
xchg
ins
test
test
sar
nop
and
lock
or
stos
mov
xor
jae
adc
adc
pop
(bad)
ins
test
adc
xor
xlat
mov
inc
mov
xor
test
movs
rcr
and
in
shl
xchg
sub
pop
push
shl
ss
add
std
xchg
jno
push
sbb
adc
loopne
sub
test
ficomp
push
in
push
icebp
fcom
out
or
xor
imul
cmps
pop
push
jmp
popf
xchg
jecxz
jne
push
mov
push
int3
js
or
cli
rcl
adc
sbb
les
and
jg
out
dec
inc
popa
rcr
and
xchg
mov
dec
pop
inc
es
and
pop
xor
pop
sub
in
mov
iret
mov
xchg
das
push
pop
xor
jge
sbb
cwde
cdq
dec
pop
jle
sbb
mov
add
cmps
mov
adc
mov
sbb
fcomp
jl
js
imul
and
loopne
fcom
fld
dec
push
int3
test
or
cmp
loopne
dec
cmp
out
stos
xchg
ss
sbb
dec
sub
lods
mov
lahf
pop
adc
dec
xor
xchg
cmc
xchg
inc
fwait
mov
sbb
aad
xchg
repz
lahf
test
aam
dec
mov
test
xchg
xor
js
adc
loope
(bad)
nop
add
cli
and
fs
pop
jae
daa
loopne
scas
lock
cmp
jo
ins
push
icebp
cld
push
jbe
sbb
xchg
repnz
jmp
inc
mov
mov
loopne
iret
cmp
pop
cwde
jl
ror
repz
shr
xchg
mov
ret
je
scas
cli
xchg
pop
sbb
and
xchg
popf
stos
enter
sbb
xchg
aam
fwait
dec
xor
lods
and
mov
add
outs
sbb
stc
adc
xchg
mov
lods
xchg
mov
xor
add
mov
ins
xchg
pop
dec
inc
mov
mov
mov
fadd
sti
sub
and
xchg
mov
jp
lods
xchg
clc
arpl
leave
mov
(bad)
pop
xchg
add
cmc
mov
int3
jge
aam
(bad)
sbb
pop
or
mov
loop
aam
jne
je
xchg
rcr
mov
mov
test
ins
mov
xor
adc
adc
int
dec
adc
lods
es
fs
xchg
mov
and
fistp
in
out
mov
xchg
jle
fabs
push
jecxz
mov
inc
addr16
adc
mov
popf
xchg
push
(bad)
adc
hlt
repnz
(bad)
xchg
test
or
xor
xchg
xchg
jg
xchg
push
xor
mov
(bad)
xchg
push
movs
xchg
or
mul
add
xchg
retf
call
mov
mov
test
iret
mov
dec
in
mov
cmps
xchg
in
out
push
or
sub
mov
movs
xchg
mov
ja
xlat
aaa
(bad)
push
dec
or
ins
lahf
add
add
ins
xchg
test
lock
xchg
imul
test
or
push
repnz
pop
dec
cmp
xchg
stc
add
or
and
mov
in
inc
xchg
pop
inc
push
dec
sbb
inc
retf
adc
jne
repnz
or
jnp
loopne
mov
stos
rol
xor
pop
jb
jl
cld
sbb
xchg
sub
pop
jge
jno
mov
add
xchg
retf
or
and
mov
mov
jo
dec
test
xchg
call
sbb
mov
xor
fs
adc
xchg
icebp
xor
mov
repz
adc
call
cld
(bad)
mov
pop
cmc
jb
and
test
xchg
xchg
jno
stos
push
mov
popa
lods
pop
enter
sub
int
sbb
loopne
xchg
mov
ret
and
xchg
xlat
test
stc
shr
dec
out
xchg
pop
into
sbb
push
das
popf
mov
cmp
enter
mov
js
xchg
add
cmps
push
and
xrelease
lods
jo
jp
sub
rcl
popf
mov
pop
xchg
and
xor
or
xchg
adc
(bad)
xchg
pushf
in
stos
in
dec
cmp
lods
(bad)
nop
cmp
sub
xchg
ror
mov
xchg
mov
aaa
std
push
mov
es
add
popf
push
cdq
add
mov
inc
into
retf
data16
push
mov
xchg
inc
jns
pop
repz
pmuludq
mov
inc
xchg
cmp
mov
loop
mov
dec
les
or
jl
inc
xchg
sbb
test
mov
xchg
mov
mov
ds
std
cmp
dec
xchg
push
lds
popf
bound
popf
xchg
hlt
and
(bad)
xchg
imul
cld
inc
push
sub
fimul
test
dec
xchg
add
test
push
xchg
icebp
pop
xchg
mul
sti
mov
xchg
or
sar
xchg
repz
push
xchg
cmp
xchg
(bad)
mov
sub
xchg
in
xchg
cli
push
je
xlat
stos
je
ja
mov
push
inc
xchg
lds
push
jmp
scas
or
sbb
and
(bad)
movs
aad
fwait
add
fdiv
adc
pop
xor
xor
xlat
loopne
rcl
add
pop
pop
sub
sbb
(bad)
stc
ror
aam
mov
sub
and
sahf
jb
xchg
popa
(bad)
sub
aad
cmp
je
mov
jo
repz
xchg
xchg
rol
mov
lds
mov
sti
inc
xlat
sbb
jnp
xchg
mov
push
mov
call
or
imul
stos
push
cmp
mul
add
aaa
adc
xchg
sbb
call
loope
mov
pop
inc
es
hlt
jb
or
cmp
mov
push
push
cmc
fnstenv
xchg
cld
adc
dec
or
inc
mov
sub
pushf
push
sub
fcom
aas
in
xchg
enter
or
xchg
fisub
pop
ds
stos
sahf
xchg
push
or
push
adc
adc
inc
xchg
mov
ret
sub
in
into
dec
rol
or
scas
mov
movlps
js
mov
dec
aad
mov
cmp
mov
mov
cmc
ss
fwait
cmps
stos
jmp
pop
gs
dec
(bad)
sub
xchg
pop
mov
in
dec
icebp
dec
add
mov
jne
sbb
cmc
pop
mov
sub
sbb
xor
js
(bad)
xchg
repz
out
dec
in
cmps
xchg
sti
sbb
mov
or
xchg
mov
lods
sbb
pop
ss
cmp
push
mov
xchg
jp
mov
and
out
mov
mov
xchg
or
mov
lahf
fcmovu
pop
dec
xchg
out
cmp
xchg
sub
loop
xchg
mov
out
xchg
stos
mov
add
pop
mov
pop
pop
(bad)
or
xchg
push
pop
je
and
lock
xchg
int3
adc
jbe
call
pop
sbb
xchg
mov
lods
jl
sub
xchg
fdivp
out
aaa
pusha
sahf
or
xchg
cdq
data16
jmp
or
jl
int
ins
pushf
fisttp
dec
jmp
rol
sti
test
adc
fs
cmp
rcr
pop
xchg
imul
test
jle
jl
hlt
loop
pop
call
adc
add
jmp
fsubr
xchg
push
mov
icebp
xchg
add
sbb
cmps
inc
cmps
enter
js
cmc
je
xchg
daa
dec
stc
inc
push
mov
aaa
push
ror
dec
fs
je
fwait
ret
push
xchg
test
addr16
cmps
xchg
add
clc
jge
loop
xchg
scas
push
push
sbb
repz
xchg
adc
mov
pop
push
aas
pop
push
mov
addr16
fdivr
stos
jno
rcl
adc
xchg
imul
cdq
mov
out
xchg
popf
mov
loop
rol
xchg
out
mov
or
adc
sub
stc
cwde
xchg
inc
sbb
xor
push
jl
xchg
sub
loope
and
push
mov
push
rcl
cli
cdq
or
or
and
loopne
jmp
nop
je
xchg
aaa
cld
stc
sub
xchg
mov
sbb
dec
xchg
adc
clc
or
xchg
in
arpl
es
jle
xchg
out
adc
mov
jle
lahf
sbb
xchg
cmps
imul
test
retf
shl
cmp
push
imul
iret
sti
shl
xchg
pop
xchg
mov
scas
mov
inc
imul
jnp
stos
std
mov
cmc
jmp
jg
xchg
pop
ret
das
loop
(bad)
xor
jo
xchg
rol
dec
jge
mov
xchg
add
adc
not
mov
xchg
scas
push
fs
loope
fs
shr
sbb
mov
scas
ficom
sbb
mov
dec
in
inc
sbb
xor
nop
jp
adc
dec
add
sub
adc
xchg
xchg
fisubr
dec
cmp
shl
test
retf
or
scas
mov
arpl
mov
mov
pop
fist
je
outs
xchg
sbb
and
cdq
mov
aad
cmp
adc
push
add
gs
inc
aad
ja
dec
mov
jmp
xchg
in
out
jp
mov
mov
lea
jle
sub
jp
movs
shr
in
das
adc
inc
repnz
push
jge
in
ja
jb
es
std
mov
xchg
xlat
dec
adc
push
adc
sub
ret
mov
je
xor
xor
test
lods
add
or
jmp
mov
xchg
iret
ins
lods
pop
data16
pop
mov
mov
clc
retf
lock
xor
(bad)
out
mov
scas
mov
xchg
sub
sub
xchg
push
stos
push
clc
adc
sub
mov
cmp
mov
xchg
into
sub
mov
xchg
push
sbb
cmp
fcmovbe
ins
or
mov
fwait
push
in
mov
cmp
jns
aas
ins
call
iret
add
addr16
mov
ret
int
sub
fist
dec
jmp
xchg
push
ret
ins
mov
stos
xchg
(bad)
pop
cmp
xor
xchg
sub
adc
test
cdq
aas
cli
pop
mov
hlt
jmp
cmp
(bad)
pop
xor
jp
icebp
(bad)
mov
cmps
pop
adc
and
psrld
adc
xchg
test
and
div
arpl
ds
xchg
in
xchg
xchg
retf
je
mov
pop
dec
xchg
nop
repnz
mov
mov
sahf
imul
sahf
mov
xchg
rcr
lods
xchg
fs
pop
xchg
sub
mov
sub
imul
(bad)
jl
xchg
xor
(bad)
jb
dec
sbb
xchg
and
xchg
add
jb
in
jbe
add
mov
ds
int
cmp
test
cwde
int3
mov
mov
lods
sbb
xor
cmps
cmp
xchg
xchg
dec
fldenv
push
sbb
xor
test
sti
fs
mov
and
inc
pop
mov
inc
enter
(bad)
cdq
xchg
mov
aaa
jmp
clc
mov
or
inc
xchg
sub
ja
pop
inc
gs
mov
mov
push
lds
inc
or
mov
adc
and
mov
jmp
xor
in
test
scas
bound
rol
test
outs
xchg
cmps
cmp
lods
xchg
shl
or
sbb
call
mov
mov
(bad)
xchg
and
rcr
xchg
outs
inc
push
push
jmp
pop
pop
adc
mov
push
movs
push
leave
adc
xchg
mov
(bad)
jnp
mov
iret
xor
xchg
pushf
mov
ja
sbb
mov
neg
push
dec
jle
add
push
rcl
cmp
push
repnz
cmp
sbb
loop
outs
mov
xchg
inc
retf
pop
mov
into
jle
xchg
xchg
scas
not
fsub
jno
sbb
mov
(bad)
mov
mov
xchg
sti
and
iret
in
cmp
bound
hlt
dec
ja
inc
cmps
out
mov
cld
inc
int
iret
sbb
repz
sbb
add
push
das
fsubr
xlat
and
imul
je
adc
add
and
add
sub
std
test
inc
outs
test
nop
mov
sbb
mov
aam
ds
mov
jb
adc
int
test
push
mov
imul
mov
cmp
inc
repz
movs
lods
push
add
call
xchg
div
jmp
ja
xor
jp
xor
in
inc
and
in
xchg
scas
push
iret
out
xchg
clc
adc
loopne
out
xchg
cmp
call
or
dec
or
stc
mov
and
mov
xchg
mov
add
das
daa
jmp
in
inc
stc
pcmpeqb
mov
mov
test
inc
mov
xchg
mov
outs
repnz
adc
xchg
jo
mov
call
std
sub
mov
xchg
arpl
fadd
imul
cvtdq2ps
inc
sbb
(bad)
cmp
jecxz
int3
data16
sti
xchg
in
hlt
and
ja
mov
xchg
mov
vpcmov
lods
fst
xchg
cli
jle
pop
(bad)
mov
fwait
push
inc
push
mov
bound
jno
xchg
gs
fs
inc
jmp
pop
fnstcw
mov
out
frstor
scas
xchg
sub
pop
inc
cmps
arpl
out
mov
cmp
pop
sbb
xchg
dec
pop
xchg
ja
push
push
mov
das
loope
cmps
push
xchg
dec
push
cmp
or
xchg
out
lods
sar
mov
xor
mov
pop
out
mov
add
into
mov
fistp
std
pop
inc
dec
ret
mov
xchg
add
mov
and
and
fs
push
xchg
cmp
movs
je
(bad)
cmp
fist
shl
xchg
retf
cmps
sub
or
xchg
pop
dec
addr16
cmc
inc
das
and
into
fldenv
sar
xor
mov
cmp
xchg
or
push
loopne
add
add
xchg
in
lock
sbb
jmp
xchg
retf
adc
das
loop
sbb
xchg
xchg
push
mov
ins
nop
call
adc
sbb
rcr
push
cmp
push
mov
xor
xor
bound
in
push
xor
and
pop
xchg
ins
mov
jg
push
mov
sbb
scas
js
dec
xchg
ins
ret
cmps
xor
enter
iret
jle
aas
jg
mov
in
scas
in
xchg
xchg
cmc
mov
jmp
jae
inc
inc
dec
push
sbb
or
fwait
div
int3
add
ror
stc
(bad)
xchg
jl
add
ds
xor
pop
mov
test
push
stos
xor
and
sbb
push
xchg
mov
mov
push
xchg
xor
fcom
xchg
sbb
xchg
xchg
or
fistp
rcl
aad
repz
cdq
push
popa
movs
mov
pop
pop
retf
data16
pop
inc
inc
sbb
pop
jno
sub
out
retf
aam
xchg
jne
adc
mov
mov
mov
push
push
sti
(bad)
xchg
clc
(bad)
rol
mov
pop
pushf
fwait
and
ins
push
mov
in
inc
inc
jge
jecxz
cmps
neg
mov
mov
movs
mov
dec
push
inc
pop
xchg
mov
fst
push
jp
xchg
and
mov
fisub
xchg
dec
dec
jo
push
dec
sub
xchg
pop
into
inc
adc
xchg
arpl
xchg
ret
sub
xor
add
adc
dec
pop
repnz
cmp
push
jb
ror
xchg
sub
push
in
sub
loope
(bad)
mov
hlt
mov
popa
(bad)
adc
xchg
mov
fidiv
rol
xchg
(bad)
xchg
stos
lods
mov
pop
sub
jle
xchg
fistp
or
xchg
sbb
jb
stc
out
lods
inc
loopne
pop
(bad)
dec
sub
mov
sub
fbld
adc
jb
push
xor
mov
loop
or
das
es
jg
ins
in
out
cdq
xchg
shr
cmp
aad
(bad)
xor
sbb
sub
adc
lds
sub
sti
jno
dec
jmp
aad
or
gs
add
es
sahf
xchg
fs
mov
fwait
dec
sub
cmp
mov
(bad)
xor
lock
xchg
add
dec
jmp
push
jmp
xchg
aad
push
repz
pop
xchg
dec
retf
xchg
shl
sub
js
adc
int3
dec
inc
call
out
pop
push
imul
xchg
int
inc
std
das
js
cld
or
ret
jecxz
xchg
cdq
add
xchg
test
mov
cmc
xchg
scas
xchg
sub
jl
mov
sub
outs
hlt
xchg
xchg
popf
push
jbe
inc
movs
loopne
xchg
jecxz
pop
iret
mov
repz
push
mov
fs
into
test
inc
or
lods
and
in
dec
adc
push
repnz
add
cmps
push
sbb
mov
push
sbb
fs
lea
adc
sar
retf
fwait
add
lea
adc
stos
bound
xchg
mov
imul
jl
jp
xchg
std
aaa
loop
not
outs
xchg
and
popf
fild
outs
cmp
imul
das
fst
pop
les
push
jno
xchg
ja
clc
mov
push
std
dec
shl
xchg
pop
xchg
or
xchg
js
lods
cmp
jl
loopne
xor
jmp
nop
ss
call
fst
ret
and
jns
xchg
and
mov
stos
ins
sahf
add
or
sub
mov
int
mov
or
or
xchg
outs
arpl
pop
jl
pop
fcomp
xchg
pop
(bad)
xlat
xchg
jbe
xchg
jno
push
lods
mov
adc
fistp
leave
pop
xchg
loop
fadd
mov
mov
pop
cwde
test
and
cli
adc
add
cmp
dec
jb
xchg
in
bound
test
and
not
or
jp
jns
(bad)
pop
jl
bound
xchg
movs
aam
cmp
mov
call
fmul
mov
iret
hlt
(bad)
and
mov
arpl
cmp
inc
and
frstor
pop
cmp
pop
cld
jge
xchg
sub
sub
xchg
fwait
(bad)
ror
mov
adc
xor
cmp
jmp
add
pop
inc
shr
mov
dec
in
inc
stos
xor
or
or
(bad)
iret
mov
or
push
les
xchg
mov
pushw
fisubr
or
push
test
cld
jle
dec
out
fmul
inc
push
mov
call
mov
xchg
adc
mov
xchg
ret
shl
fwait
(bad)
push
push
adc
cmps
push
inc
daa
xchg
or
push
add
cmps
stos
out
xchg
sub
jbe
mov
fidivr
in
mov
mov
xchg
outs
xchg
or
xchg
mov
xchg
into
test
das
repnz
mov
mov
dec
loope
fiadd
xchg
pop
jae
std
and
pop
dec
xchg
sub
repnz
hlt
push
out
sub
or
fwait
jmp
push
cs
(bad)
in
cmc
rcl
xchg
xchg
inc
and
arpl
pushf
ins
xchg
enter
or
push
and
adc
dec
dec
gs
cmps
xchg
cld
pextrw
jmp
les
mov
repz
cs
xor
jecxz
adc
xchg
or
push
je
sub
neg
xchg
xchg
jae
mov
(bad)
mov
out
adc
addr16
les
imul
jno
retf
iret
dec
push
inc
xchg
sti
popf
adc
or
fwait
into
popa
fcomp
xchg
xlat
jns
sbb
and
das
rcl
ficomp
dec
xchg
lods
and
xchg
data16
(bad)
dec
iret
je
xchg
ja
sbb
push
sub
pop
rcl
inc
int3
add
retf
cmp
xchg
leave
lods
addr16
mov
into
sbb
sub
pop
xchg
je
or
add
inc
xor
mov
out
fst
shr
inc
cmp
ret
add
stos
leave
test
pop
outs
mov
and
sar
push
lds
mov
mov
sti
mov
repnz
push
add
push
mov
push
iret
sbb
mov
xchg
pop
hlt
sub
add
mov
sub
outs
adc
aad
inc
ret
lds
cmp
fist
lea
ret
loopne
cwde
push
stc
or
push
imul
(bad)
in
mov
movs
(bad)
inc
xchg
shl
xchg
jae
das
adc
and
repz
mov
test
push
sbb
not
(bad)
and
xchg
fiadd
clc
xchg
mov
cld
loop
ja
sub
mov
lea
xchg
mov
sub
xor
rcr
jecxz
cmp
call
movs
xlat
inc
or
retf
inc
cs
xchg
push
test
imul
pop
ret
out
clc
test
cmp
test
les
cmps
mov
pop
sahf
xchg
aam
les
popa
inc
jae
or
sub
stos
sub
popf
lods
inc
inc
int
mov
or
(bad)
sbb
dec
xchg
popf
ss
sub
enter
and
pop
int
ret
sub
mov
and
stos
pop
inc
retf
and
mov
adc
or
and
pop
jmp
retf
sar
xchg
xchg
jbe
(bad)
gs
adc
imul
and
pop
std
push
loopne
pop
push
mov
jne
or
fistp
add
xor
addr16
xchg
or
ret
xchg
xchg
add
fadd
mov
xchg
(bad)
sbb
cmps
push
mov
push
xchg
xor
sub
cmp
adc
in
push
mov
xchg
jbe
cmp
push
(bad)
stos
sub
adc
add
xchg
out
test
and
sub
inc
(bad)
adc
mov
xchg
xchg
adc
outs
(bad)
push
xchg
(bad)
(bad)
xchg
push
fist
mov
cmps
xchg
xchg
call
sbb
sbb
xchg
outs
test
sbb
xchg
jae
jp
mov
xchg
in
jo
js
ror
mov
cmp
iret
repnz
add
in
push
xchg
mov
call
push
jmp
jmp
ds
pop
sbb
xchg
repz
xchg
stos
fiadd
push
mov
jno
js
add
jmp
xchg
ins
mov
retf
mov
jbe
repz
push
inc
xchg
jns
sub
xchg
rcr
push
push
xchg
imul
xchg
shl
push
inc
sahf
pop
(bad)
in
inc
imul
xchg
(bad)
jns
mov
push
xchg
cs
jmp
pop
out
ins
xchg
pusha
leave
ins
ret
mov
sti
xchg
jns
cmp
jo
adc
mov
cmps
adc
jle
call
mov
push
(bad)
xchg
cli
test
inc
arpl
and
mov
ins
lods
test
cwde
nop
aaa
iret
popf
imul
and
jecxz
xor
imul
inc
adc
popa
xchg
add
sbb
les
mov
aam
inc
in
inc
xchg
mov
out
pusha
pop
xchg
(bad)
std
push
scas
jno
test
or
xchg
aaa
mov
pop
dec
(bad)
cdq
cdq
xor
mov
dec
add
cmp
xchg
in
xchg
pop
adc
imul
mov
xchg
popa
scas
cwde
fistp
arpl
mov
mov
xchg
cmp
ins
inc
pop
dec
dec
fwait
call
and
jns
les
ret
xchg
stos
dec
cmps
push
sbb
xchg
mov
sbb
jbe
test
sub
inc
nop
dec
cwde
cmps
dec
sti
sbb
leave
jo
call
dec
push
xchg
fwait
out
inc
sub
aam
lock
rol
shl
jge
xchg
jns
(bad)
stos
shr
mov
mov
sti
xchg
daa
or
xor
leave
adc
pop
rol
test
or
adc
pop
xchg
(bad)
shl
nop
adc
into
push
mov
leave
mov
xchg
sbb
stos
cmp
pop
and
shl
xchg
push
sbb
adc
sti
in
sub
lods
jmp
cmps
hlt
sub
cdq
adc
or
and
lods
mov
cld
aam
repnz
inc
sbb
ja
cmps
(bad)
aad
xchg
fdivr
and
jno
ret
lods
in
add
mov
test
popa
xchg
cmps
dec
outs
xor
inc
fs
adc
ins
icebp
xchg
out
test
push
dec
adc
hlt
ins
mov
fwait
xor
test
test
xchg
out
mov
jp
or
xchg
push
shufps
aaa
mov
mov
push
adc
xchg
and
or
repnz
jbe
pop
xchg
fwait
daa
add
sub
repnz
xchg
sub
cdq
popa
test
push
push
inc
lock
jge
push
mov
test
push
sub
sbb
inc
xchg
hlt
adc
xchg
stc
or
xchg
aam
sbb
adc
mov
adc
adc
outs
popf
sbb
add
mov
inc
add
(bad)
push
sbb
mov
int3
push
lock
ror
(bad)
ds
lods
adc
pop
mov
mov
cmps
lahf
xchg
outs
js
mov
xor
movs
adc
add
jp
outs
loope
arpl
sub
cmp
jnp
ins
xchg
ror
nop
dec
jecxz
sbb
adc
jmp
lods
sbb
adc
xchg
hlt
sar
pop
js
push
xchg
loop
sub
sub
xchg
adc
jmp
xlat
dec
test
pop
daa
cs
mov
sub
and
aam
mov
loope
xchg
test
mov
mov
cmp
dec
sbb
mov
xor
mov
out
sub
aam
or
lock
call
jecxz
bound
xchg
outs
ror
stos
xlat
sub
movs
dec
mov
aas
mov
addr16
shr
sub
in
jge
mov
call
xor
sbb
mov
cli
xchg
inc
test
xchg
cmp
jno
xchg
lods
int3
cs
nop
inc
mov
leave
adc
into
(bad)
cwde
sahf
rcl
xchg
inc
stc
popf
loop
xchg
cli
stos
ins
inc
pop
aad
cld
arpl
xchg
cmp
jle
inc
cmps
cmp
mov
js
push
lods
cmp
and
push
and
loopne
inc
mov
add
xor
push
pop
inc
xor
scas
push
xor
mov
jmp
sbb
mov
jo
cs
sti
or
pop
and
out
cmp
xchg
test
push
ins
push
mov
sub
adc
xchg
aam
(bad)
xor
pop
adc
lahf
cli
add
nop
xchg
pushf
ret
arpl
fisub
sbb
mov
stos
mov
lods
fcom
enter
fmulp
push
pop
repz
stos
xchg
pop
leave
aad
jmp
inc
and
icebp
adc
cmp
cmps
hlt
das
adc
mov
shr
pop
adc
xchg
xchg
cld
popf
xchg
call
push
ss
daa
outs
data16
dec
dec
cli
xchg
mov
cwde
stc
xchg
pop
mov
xchg
mov
fist
pusha
sahf
loopne
mov
cmc
push
pop
adc
xchg
fwait
cmp
lock
xor
xchg
loop
xchg
jle
jo
xor
push
in
je
inc
inc
aam
xchg
mov
jbe
xor
xchg
push
mov
or
ret
mul
inc
shl
cmc
je
mov
iret
pop
pop
xchg
fisttp
push
scas
lock
loop
adc
jne
imul
cs
pop
sbb
(bad)
nop
fwait
shl
ja
aaa
retf
test
cmp
cli
xlat
or
(bad)
int3
xor
mov
and
ss
push
xchg
and
(bad)
jmp
mov
xchg
sbb
sbb
mov
cmp
or
jne
popa
xchg
xor
into
loopne
outs
iret
call
jnp
push
sahf
xchg
icebp
jl
xor
mov
fst
je
push
mov
xchg
mov
int3
inc
push
adc
ins
xchg
cmp
xor
test
xor
add
xchg
addr16
or
lds
cmps
jno
pop
mov
and
add
dec
pop
mov
xchg
aas
or
mov
sbb
into
xchg
sbb
cld
push
rcl
(bad)
dec
add
stos
aad
out
pusha
cmp
and
jbe
xchg
fidiv
test
or
data16
and
adc
mov
xchg
mov
pushf
cld
ret
jmp
cli
mov
xchg
dec
mov
dec
aas
dec
xor
ror
enter
or
sub
xchg
(bad)
ss
adc
pop
xchg
adc
div
mov
hlt
cli
lods
mov
lahf
fwait
sub
cmp
xor
xor
inc
xchg
aam
das
jmp
mov
xchg
popa
ja
pop
dec
adc
add
(bad)
sbb
sub
fwait
jb
jo
outs
mov
and
(bad)
fwait
xchg
mov
jmp
outs
jb
xchg
pusha
jl
jl
cmp
xchg
cmp
sbb
test
inc
jns
int
shl
adc
movs
loop
pop
mov
jo
bound
repnz
sub
pop
xchg
fs
ret
pushf
std
lock
int3
mov
cdq
xchg
jnp
(bad)
xchg
stc
or
xchg
cmp
lock
xchg
inc
mov
movs
inc
lock
or
retf
call
or
pop
sub
cdq
jl
repz
dec
rcr
out
pop
das
xchg
fld
mov
cmp
loope
sub
sub
fist
push
mov
push
scas
sti
fcomp
(bad)
xchg
test
cmp
je
xchg
cmps
scas
xchg
and
(bad)
div
inc
inc
cwde
xchg
rcr
repz
adc
mov
mov
hlt
aam
or
repz
fwait
hlt
mov
test
pushf
mov
pop
retf
dec
fist
scas
pop
jg
call
dec
nop
mov
jmp
(bad)
aad
xor
pop
inc
adc
cmp
add
ret
shr
(bad)
mov
mov
adc
into
aam
mov
out
xchg
mov
es
loop
or
mov
xchg
hlt
loopne
ins
loope
ficom
xchg
fldcw
mov
push
xor
lea
stos
mov
pop
xchg
mov
fs
jecxz
js
loop
fstp
mov
pop
imul
and
or
outs
mov
push
and
imul
jg
adc
sbb
push
daa
xchg
cs
pop
jns
scas
xchg
cmp
mov
jno
push
imul
pop
pushf
dec
arpl
add
jb
dec
dec
push
mov
mov
cmp
or
aaa
mov
inc
push
stc
sub
sub
pusha
outs
int3
cmp
xchg
fisttp
pop
cli
dec
fcom
inc
push
cmps
push
das
xchg
dec
jp
fdivrp
xor
inc
icebp
xchg
fdivr
arpl
xchg
lea
inc
push
scas
jmp
xchg
dec
or
(bad)
push
xchg
call
arpl
mov
imul
ret
or
in
adc
imul
dec
jns
out
dec
push
xchg
xor
push
mov
xlat
xor
push
or
lds
xchg
aaa
sar
aad
cmps
sbb
into
mov
xchg
test
dec
xchg
jnp
call
hlt
test
push
xchg
adc
xchg
mov
pop
nop
int
sar
push
retf
push
xchg
cmp
add
ret
xchg
push
fwait
sbb
fistp
test
pop
mov
rcr
mov
xchg
add
sub
daa
xor
les
xchg
in
add
xor
lea
xchg
inc
mov
imul
xor
mov
add
lds
adc
pop
add
aaa
or
fcmovne
or
sub
mov
xchg
xchg
sub
xchg
ror
adc
inc
shl
pop
adc
push
and
jne
lds
shl
mov
push
in
xchg
(bad)
adc
dec
xchg
sub
imul
loope
mov
inc
jg
mov
adc
or
mov
dec
mov
sti
cli
iret
shl
icebp
push
inc
out
lds
int3
clc
jmp
pop
ja
mul
in
mov
cmp
popf
lds
int3
or
hlt
add
and
mov
xchg
adc
jle
mov
mov
fdivr
push
lahf
mov
jl
or
mov
and
xor
scas
xchg
jno
mov
mov
enter
and
(bad)
sar
adc
cmps
jmp
fadd
int
sbb
mov
jle
xchg
mov
or
xchg
push
mov
je
rol
push
cli
fwait
(bad)
jae
test
fs
call
mov
call
fwait
adc
daa
cmova
and
push
and
mov
cdq
xchg
sbb
or
iret
movs
and
sbb
mov
es
push
dec
fwait
xchg
movs
push
leave
push
mov
loope
xchg
mov
push
hlt
pushf
in
fst
xchg
xchg
sub
cmps
push
add
rol
(bad)
aam
push
sub
not
sbb
hlt
std
xor
cmc
adc
inc
xchg
stos
xchg
fbld
push
add
push
xchg
int3
mov
pop
ja
jmp
fstp
and
movs
xchg
mov
je
outs
push
aaa
dec
or
(bad)
cld
jb
jno
lds
ja
mov
push
mov
xchg
repnz
xchg
aam
cmps
or
int3
pop
jl
inc
adc
mov
xchg
push
retf
push
xchg
int3
dec
push
cmp
das
xchg
xchg
sbb
mov
push
or
xchg
psubb
adc
xchg
inc
in
(bad)
xchg
fbld
lahf
pop
xchg
add
inc
xchg
inc
stos
push
or
mov
add
lock
mov
xor
stos
stc
loopne
dec
jg
push
xor
popf
push
into
mov
xchg
push
push
mov
pop
xchg
jg
inc
sbb
jl
cmp
sbb
test
outs
fmul
neg
rol
(bad)
sub
js
pop
mov
repz
lock
mov
jb
and
sub
sub
ds
fst
iret
rcr
push
mov
xor
lahf
and
or
mov
push
jecxz
pop
addr16
add
shr
mov
sub
shl
sbb
stc
cs
xchg
xlat
xchg
movs
mov
mov
rol
cmp
pop
xor
aaa
cdq
cs
push
inc
lods
mov
xchg
mov
ret
xchg
gs
std
jle
add
xchg
jecxz
inc
das
shl
or
(bad)
mov
xor
(bad)
cwde
icebp
nop
xchg
jecxz
pop
jnp
lods
pop
push
xchg
sub
mov
dec
xchg
xchg
push
es
fisttp
push
lods
and
ja
mov
jmp
sar
sub
or
in
mov
adc
icebp
mov
inc
mov
movs
lods
mov
xchg
int3
inc
push
mov
xchg
shl
stc
punpcklwd
je
(bad)
not
or
fs
mov
adc
imul
xchg
(bad)
mov
addr16
push
js
push
scas
and
cs
jle
mov
pop
adc
out
cmp
jae
dec
pop
xchg
aad
push
xchg
movs
push
dec
sbb
mov
adc
lock
jo
xchg
adc
iret
cli
and
test
xchg
mov
mov
aam
out
jno
xchg
lea
jmp
data16
(bad)
sub
adc
or
adc
xchg
sub
dec
pop
test
xchg
rcr
test
adc
ss
adc
mov
xchg
inc
cmp
inc
add
mov
test
push
push
push
aaa
adc
mov
mov
jecxz
jo
nop
or
repz
cli
and
pop
xchg
stos
ret
test
ss
push
inc
push
adc
push
xchg
mov
int3
jmp
and
xchg
pop
xor
movs
sbb
stc
clc
sub
and
or
imul
pop
xchg
ror
fs
pop
add
nop
dec
imul
test
push
adc
cmps
inc
fwait
cld
xchg
cmp
mov
ficom
pop
shr
popa
cli
jg
sbb
xchg
jmp
xchg
xchg
imul
fdivr
xchg
push
loopne
out
out
iret
ds
or
mov
in
lock
mov
inc
sbb
(bad)
mov
es
jg
and
loopne
sub
ins
sub
imul
das
ins
jecxz
cli
or
repz
and
xchg
gs
int3
call
test
jp
rcl
cmps
mov
xchg
and
lidtd
call
ret
aad
(bad)
aad
aas
sbb
shl
repz
adc
pushf
dec
xlat
cli
push
mov
cmp
(bad)
les
(bad)
test
xlat
mov
xor
mov
pushf
mov
xchg
and
xchg
mov
in
das
out
rol
gs
push
cs
jle
adc
out
mov
or
push
in
popf
out
push
cmp
test
xchg
jne
ffreep
jmp
jmp
xchg
sbb
scas
mov
or
repnz
ins
fstp
stos
stc
mov
idiv
pop
cmp
fwait
popa
xchg
push
push
(bad)
loope
xchg
repnz
retf
jnp
shl
call
sti
pop
sbb
jmp
iret
push
outs
repz
out
in
sub
dec
mov
push
arpl
pop
xchg
and
pop
cdq
jae
jp
push
shl
std
xchg
inc
cmp
loop
or
dec
mov
xor
xor
pop
cmp
aas
cwde
push
mov
xchg
inc
cmp
sbb
mov
loope
jbe
jle
xchg
add
pusha
(bad)
rol
and
hlt
push
inc
xor
adc
ret
lea
xchg
sbb
(bad)
jmp
mov
imul
fidivr
mov
pop
mov
les
test
mov
test
(bad)
pop
jle
add
mov
jg
imul
mov
mov
add
ret
xchg
in
push
cmp
xchg
xor
cmps
rcr
jge
pop
xchg
(bad)
imul
sbb
and
call
xchg
jne
cwde
mov
jo
xchg
and
add
aad
and
sbb
clc
xlat
mov
push
ss
fwait
imul
dec
jge
cmp
push
mov
retf
repz
out
lock
iret
xchg
pop
int
popf
call
dec
scas
fwait
or
(bad)
xor
stos
add
aam
cmps
pop
jbe
int
loope
pop
adc
sbb
xchg
xchg
daa
cmps
imul
retf
fwait
push
pusha
aas
adc
xor
mov
xor
pop
(bad)
iret
lock
dec
popf
pop
ret
rcl
adc
cmp
jecxz
xchg
fsub
xchg
hlt
push
inc
ret
mov
(bad)
cmc
stos
ins
inc
push
fwait
out
test
sahf
imul
hlt
daa
retf
jo
cmp
out
out
mov
adc
pop
xor
xchg
aam
mov
push
mov
pop
bound
dec
nop
int3
xchg
out
aaa
into
mov
jecxz
fwait
xchg
pushf
stos
in
mov
adc
aam
js
xor
aaa
jl
inc
retf
pushf
push
fwait
push
or
sub
pop
push
push
outs
xchg
fsub
add
mov
fisub
mov
pop
inc
dec
adc
adc
mov
mov
pop
pop
xchg
aas
test
inc
xchg
xchg
push
adc
xchg
jmp
dec
mov
cdq
icebp
jecxz
push
popa
push
push
dec
pop
pop
les
xor
sbb
(bad)
sbb
in
pusha
aad
push
ror
repnz
fwait
inc
and
mov
test
mov
cmps
mov
add
movs
xchg
sbb
mov
cmp
int
adc
inc
dec
xor
pop
mov
xor
mov
push
mov
xchg
mov
push
xchg
fdiv
add
sar
push
rcl
bound
mov
jno
out
ja
xchg
push
mov
idiv
adc
inc
xchg
pop
inc
mov
push
mov
pop
les
leave
lds
je
sbb
and
pop
imul
xchg
sbb
dec
sahf
(bad)
shl
in
jb
xchg
adc
mov
add
adc
sahf
push
jmp
xchg
je
xor
dec
es
icebp
xchg
sbb
jb
or
xor
jg
cmp
mov
retf
int3
and
cmps
test
or
cmps
cmc
repnz
stos
(bad)
mov
out
shr
pop
xchg
fidiv
cmp
sub
xor
mov
adc
shl
sbb
pop
jnp
xchg
xor
mov
xchg
out
scas
lods
in
sub
xchg
iret
aad
xchg
xor
stos
dec
or
seto
int
test
add
adc
xor
pop
xchg
push
xor
push
pop
call
rol
xchg
mov
pop
test
stos
xchg
adc
or
loopne
inc
jg
push
dec
xor
jmp
cmp
jae
movs
sub
fistp
jge
cdq
arpl
(bad)
adc
jno
fild
jmp
fcom
rcl
mov
out
out
mov
xchg
cmp
add
shl
or
push
push
pusha
loope
xchg
popf
int3
jnp
cmps
stc
push
mov
adc
xor
in
jg
xchg
pop
nop
imul
and
aaa
clc
xchg
test
jg
ja
dec
(bad)
int3
mov
test
js
fcmovnbe
xchg
jne
jbe
enter
out
daa
sti
adc
xchg
(bad)
push
clc
and
push
xchg
and
sti
js
adc
xchg
dec
jnp
dec
mov
adc
xchg
cmc
retf
sub
push
mov
ret
mov
add
adc
xor
inc
xchg
in
cmp
cmp
push
xchg
adc
fmul
stos
aas
jns
mov
call
xchg
pop
arpl
stc
(bad)
out
adc
mov
je
ins
ins
sbb
jb
scas
dec
mov
push
fstp
icebp
into
mov
sbb
jmp
(bad)
cs
dec
xchg
xchg
(bad)
(bad)
mov
sbb
mov
xchg
call
sbb
add
push
sbb
shr
or
cmc
enter
inc
adc
xchg
bound
ins
gs
push
sbb
test
mov
and
jo
out
inc
iret
xor
dec
sbb
or
xor
into
dec
mov
xchg
push
or
and
push
pop
(bad)
xchg
xchg
shl
dec
xor
in
xor
inc
cli
movs
mov
movs
in
daa
xchg
ss
cmc
shl
cmp
mov
je
stos
js
iret
aad
test
xlat
add
mov
xchg
mov
arpl
cmp
mov
movs
ret
retf
adc
mov
xchg
pop
fisubr
hlt
xchg
jge
retf
jmp
push
in
mov
fwait
inc
adc
pop
cli
xchg
sbb
in
jb
imul
cmp
push
push
sbb
frstor
cmc
sti
(bad)
mov
cmp
dec
les
call
imul
clc
xchg
cmp
popa
data16
pop
dec
jge
js
retf
leave
mov
(bad)
mov
dec
ficom
retf
stos
jl
ins
inc
mov
xchg
jmp
mov
cmc
jmp
jnp
or
les
xchg
test
fcom
push
hlt
adc
lods
or
sar
xchg
cli
stos
xchg
fisub
sbb
ins
cwde
jp
cld
icebp
sahf
push
mov
mov
fist
push
lods
dec
add
ja
add
push
int
jle
mov
shr
and
in
push
mov
jbe
cmp
out
xchg
mov
dec
(bad)
mov
ficom
push
push
jg
lea
adc
ins
or
mov
inc
ret
xor
pop
dec
xchg
in
pop
shl
frstor
inc
xchg
or
call
rcl
fistp
xchg
jae
cli
dec
mov
inc
xchg
cmp
(bad)
fs
mov
arpl
add
popf
aad
add
rcr
loope
shl
mov
movs
sub
rcr
xchg
(bad)
cmp
xchg
out
mov
add
in
xchg
imul
sar
addr16
xor
repnz
cmp
hlt
dec
rcr
push
hlt
jmp
fwait
cmp
fbstp
push
sub
mov
mov
std
stos
xchg
push
xchg
mov
jle
push
xchg
gs
xor
jns
bound
(bad)
xchg
loopne
hlt
loopne
mov
mov
sub
sub
pop
shl
pushf
(bad)
cmps
jp
pop
lods
out
and
inc
mov
jae
sub
push
call
adc
lahf
pop
cmp
je
adc
dec
ret
ins
adc
mov
cmp
(bad)
jne
mov
jne
adc
pop
(bad)
out
xchg
div
sahf
jp
pusha
mov
sub
mov
xchg
push
pop
(bad)
hlt
cmp
push
push
push
loope
fwait
(bad)
jle
repz
je
sti
mov
mov
and
in
sbb
ss
sahf
lods
xor
push
mov
sbb
or
xchg
in
lods
sbb
arpl
repz
rol
xchg
aaa
cli
push
arpl
jo
inc
mov
adc
xchg
inc
jns
sub
pop
je
and
cmp
retf
outs
xchg
cmp
data16
mov
adc
and
aam
retf
rol
test
adc
jge
xchg
xchg
cwde
clc
or
sar
shl
xchg
dec
xchg
aaa
outs
hlt
pop
xchg
xchg
sbb
fnstsw
push
jb
pop
lods
mov
pand
in
jl
icebp
push
dec
int3
cmp
mov
xchg
ins
fcomp
out
ror
add
stos
xchg
addr16
dec
mov
xchg
call
movs
cmps
jnp
xchg
jge
add
(bad)
adc
repnz
fist
push
inc
add
ss
xchg
(bad)
push
jbe
ins
arpl
jne
fnstsw
rol
adc
aaa
call
push
xchg
pop
jmp
xchg
lods
pcmpgtw
ret
xchg
xchg
les
and
sub
xchg
adc
adc
stc
jecxz
adc
add
inc
push
xchg
sbb
pop
stos
xchg
ret
out
popa
jno
xchg
mov
sub
test
push
add
xchg
jns
dec
ret
xchg
shr
adc
mov
push
popf
aaa
jecxz
mov
ja
mov
push
dec
test
jge
test
bound
jmp
es
retf
dec
xchg
mov
enter
(bad)
mov
xor
into
xlat
fst
xor
xchg
cmps
in
jp
loope
adc
inc
addr16
mov
dec
add
out
or
fs
xlat
test
sbb
mov
adc
push
outs
xchg
cwde
outs
out
je
stc
mov
adc
and
mov
xchg
add
cld
xchg
aad
loop
and
clc
xlat
pop
cmp
mov
or
mov
ja
out
xchg
cmp
imul
test
repnz
jle
jo
int3
jns
pop
jl
scas
mov
inc
sub
pusha
mov
xchg
mov
adc
mov
jbe
xchg
adc
sub
push
xor
fcom
inc
ficomp
xchg
test
(bad)
xchg
nop
pop
xchg
xchg
cmp
cmp
xchg
add
aam
dec
je
xchg
int3
push
inc
adc
adc
xchg
xchg
dec
shr
dec
or
cmps
adc
xchg
mov
pop
mov
cld
loope
in
cmc
lods
mov
adc
out
pop
cmp
xor
les
js
inc
xchg
sbb
adc
ss
cmp
clc
cmps
xlat
jle
xor
neg
add
mov
out
mov
jno
and
adc
test
fwait
test
dec
jns
xchg
xchg
sahf
ss
sub
xchg
movs
cmp
loope
sbb
mov
repz
xchg
dec
leave
loope
sub
mov
xlat
xchg
jl
push
mov
xchg
repnz
and
mov
jecxz
dec
mov
outs
xchg
xor
adc
(bad)
hlt
lock
retf
adc
jne
arpl
xchg
cmp
pop
adc
dec
je
xchg
ins
or
push
xor
je
mov
call
imul
pop
mov
push
imul
xchg
fs
shl
ror
mov
(bad)
lea
push
sbb
jl
cmp
xchg
sbb
dec
jp
adc
mov
sub
fist
push
or
or
jg
push
or
xchg
out
inc
movs
jne
and
loopne
add
pop
xchg
push
inc
out
cmp
ins
push
xchg
mov
(bad)
adc
jl
popa
fwait
retf
outs
xor
push
push
outs
jmp
in
xchg
int3
pop
mov
fimul
and
jo
arpl
les
xchg
pop
and
adc
mov
add
pop
into
and
jecxz
adc
ss
gs
mov
push
jae
cmp
cwde
xchg
push
lock
sbb
ret
outs
jnp
adc
call
push
xchg
xor
xchg
iret
inc
int
adc
jmp
div
xchg
icebp
and
jns
xchg
sbb
add
pusha
ret
push
in
xor
xchg
xor
rcl
mov
sbb
xchg
sbb
inc
mov
mov
inc
mov
dec
jmp
in
mov
fwait
push
(bad)
shl
pop
jb
xchg
popf
cmps
loopne
dec
or
push
inc
xchg
mov
pushf
jne
xchg
jle
sub
push
fld
mov
cwde
leave
xchg
mov
mov
mov
(bad)
jbe
add
cli
xchg
in
repz
add
mov
jl
iret
inc
xchg
shr
icebp
pop
xchg
jecxz
add
sti
xchg
cwde
mov
add
mov
mov
xor
adc
ss
adc
cdq
xchg
lahf
mov
gs
inc
add
push
sbb
xor
adc
push
repz
push
xlat
xchg
fdivr
mov
pop
ss
or
adc
sub
in
cmp
or
imul
cmp
dec
and
dec
popa
xchg
aam
bound
xor
pusha
retf
push
sub
and
lea
cmp
mov
and
js
add
pop
push
out
cmp
jnp
popa
rcl
xor
push
xchg
xchg
dec
cmp
sbb
mov
xor
repz
inc
xchg
call
or
ror
fbld
lds
cmps
xchg
fidivr
das
pop
inc
xor
inc
xchg
(bad)
sub
inc
jle
outs
jmp
jmp
xchg
test
pop
jb
mov
add
or
xchg
cmp
lods
inc
xchg
cld
enter
data16
ds
arpl
pusha
mov
cmc
pop
xchg
rol
dec
and
fwait
pop
jg
adc
and
xor
pop
mov
pop
sbb
mov
(bad)
stc
popa
pop
xor
xchg
(bad)
xor
xchg
leave
scas
out
pop
loop
jo
ficom
mov
push
cwde
fnstsw
or
mov
xchg
sub
ss
mov
cmps
sub
je
xchg
stos
pop
add
and
xchg
xchg
(bad)
mov
mov
popf
mov
add
and
movs
inc
xchg
(bad)
outs
or
jle
jge
ror
push
shl
xchg
gs
cli
mov
test
inc
jmp
push
xchg
sub
mov
fst
inc
(bad)
inc
leave
lea
xchg
mov
aad
push
xor
aam
sbb
xchg
xor
ja
cdq
cmp
inc
lock
push
mov
fist
fs
stos
xchg
scas
xchg
stos
jecxz
outs
pop
xchg
dec
sbb
es
pop
sbb
fcom
iret
mov
mov
mov
xor
push
test
stos
into
xchg
mov
cmp
rol
mov
je
repz
mov
inc
pop
lock
jae
fsub
mov
repz
into
jbe
pop
add
clc
xchg
or
out
push
push
mov
sub
(bad)
xchg
add
push
dec
je
jnp
or
enter
xor
bound
xchg
out
or
stos
add
add
fwait
ret
adc
mov
ret
mov
xchg
jge
imul
(bad)
lods
stos
das
dec
popf
xchg
and
jnp
mov
xchg
and
xlat
push
cdq
xchg
inc
fdivr
pop
pop
retf
xchg
cmc
test
xchg
pop
mov
xor
mov
mov
pop
int3
test
xor
sub
psrlw
dec
mul
dec
xor
sbb
mov
pop
or
jl
jnp
add
xchg
mov
in
and
test
push
add
sub
xchg
aaa
or
and
or
push
add
fwait
nop
add
aad
cmps
push
adc
adc
out
xchg
hlt
dec
jns
add
jmp
or
cmps
jge
xchg
mov
sub
gs
xchg
shl
outs
test
and
xchg
mov
mov
mov
xor
mov
aam
inc
xchg
jae
and
je
xchg
xchg
xchg
xchg
sbb
(bad)
test
adc
xchg
loope
stos
cmps
push
mov
xchg
adc
arpl
cmps
pop
mov
comiss
out
(bad)
adc
mov
rol
stos
dec
hlt
cmp
xchg
jno
sbb
adc
push
in
xchg
sbb
pop
pushf
adc
push
adc
rcr
or
dec
dec
mov
adc
mov
loope
xchg
addr16
jmp
push
xchg
out
jae
xchg
sub
mov
test
pop
or
xchg
and
pop
sbb
and
xchg
retf
dec
or
xchg
test
into
test
lods
adc
mov
mov
sub
pusha
push
test
hlt
push
ror
iret
pop
loop
push
out
push
xchg
(bad)
call
pop
and
sub
out
rol
adc
jnp
frstor
xchg
pop
xchg
push
mov
iret
inc
imul
in
scas
cmp
add
pop
sti
mov
pop
fcomp
and
cmp
in
pop
fidiv
rcl
call
dec
inc
test
ror
xchg
repnz
cmp
cdq
dec
leave
ficom
stos
iret
sub
cmps
out
pop
xchg
sbb
stos
mov
or
push
hlt
jnp
push
xchg
sub
push
dec
cwde
jne
mov
pop
repnz
add
mov
sar
add
lahf
cmp
xlat
xchg
inc
loopne
sub
xchg
dec
stc
(bad)
aad
add
jle
mov
sub
xchg
cs
fadd
push
repz
cld
xchg
fwait
loopne
shld
not
rol
jge
in
(bad)
adc
out
pop
and
cmp
mov
inc
xchg
out
idiv
pop
inc
pusha
or
xchg
movs
mov
xor
rcl
scas
loopne
xchg
pop
and
(bad)
mov
xchg
sub
mov
cmp
jp
add
xchg
and
mov
xchg
mov
jae
xchg
js
hlt
ins
mov
aaa
dec
xchg
cwde
outs
in
dec
scas
ins
inc
sub
les
push
mov
sub
and
std
in
ins
loope
loop
inc
ss
sbb
js
xchg
inc
xchg
leave
ins
or
outs
ror
mov
pushf
nop
pop
in
std
xchg
adc
inc
adc
push
adc
aaa
aas
xchg
loopne
test
in
jl
push
xchg
xchg
jecxz
sbb
dec
cmp
je
xchg
ja
test
xchg
imul
dec
fidivr
inc
cmp
push
adc
pop
xchg
fxch
in
cs
fsub
xchg
lods
sbb
hlt
stos
mov
imul
lea
inc
and
fst
and
(bad)
shl
(bad)
stc
xchg
in
ret
xchg
inc
lea
add
int
xchg
xchg
sti
jo
into
test
retf
push
mov
and
arpl
xchg
cmp
adc
fldlg2
je
push
ds
pop
movs
push
icebp
dec
xchg
fst
ja
push
je
lea
xchg
movs
lods
in
pop
out
pop
xchg
(bad)
cmp
dec
shr
push
xchg
shr
pop
inc
or
mov
push
sub
out
mov
jbe
xchg
xor
jne
and
inc
(bad)
imul
leave
scas
mov
aaa
jne
jne
inc
add
push
jle
clc
or
mov
or
jno
and
into
xor
sar
push
(bad)
xchg
test
cs
out
ret
enter
mov
loop
inc
fist
lock
or
dec
fwait
jge
push
xor
push
xchg
pop
or
jl
or
mov
mov
fwait
xchg
adc
push
outs
xchg
sbb
in
adc
enter
inc
mov
test
xchg
(bad)
aam
push
loop
jno
mov
mov
ret
jmp
(bad)
fimul
popf
mov
lea
test
or
jp
jmp
push
xchg
inc
push
stos
dec
dec
(bad)
or
dec
inc
jl
mul
xchg
scas
and
jecxz
ror
pop
jne
mov
test
mov
shr
mov
cmc
mov
xor
jne
in
lods
pop
xchg
xchg
push
bound
aam
xor
pop
xchg
cmp
xchg
popa
mov
(bad)
jmp
js
pusha
sub
aaa
lock
stos
scas
out
inc
mov
repz
(bad)
pop
or
aam
cmc
sub
sbb
mov
adc
aaa
push
fwait
xchg
sub
test
pop
xchg
mov
fs
push
fwait
mov
mov
xor
jmp
mov
xchg
rol
das
retf
lods
push
inc
jmp
jp
int3
xchg
mov
(bad)
retf
loopne
enter
mov
adc
xor
sar
xchg
sbb
fs
(bad)
outs
xchg
push
jmp
xor
jl
cpuid
out
mov
adc
sbb
mov
mov
aaa
retf
and
adc
shl
fsubr
push
cmps
cld
test
in
fistp
xchg
xor
cmp
lock
lahf
mov
pop
cdq
je
leave
inc
xchg
aad
inc
jl
xchg
inc
mov
bnd
or
loopne
imul
jns
popf
lock
nop
cmp
cmp
dec
(bad)
xchg
pop
jno
int
or
adc
cs
or
int3
jns
adc
xchg
fidiv
mov
dec
jne
stos
pop
rol
mov
out
adc
mov
mov
cmp
xchg
and
adc
xchg
mov
cmp
inc
jmp
jnp
fistp
push
mov
xchg
cs
rol
mov
xchg
adc
imul
fsubr
mov
cmp
xchg
jb
cmps
lods
mov
mov
adc
fwait
xchg
movs
mov
sti
(bad)
fidivr
fwait
and
sub
test
mov
das
or
fwait
sbb
clc
test
in
sub
mov
jle
scas
xchg
sub
and
ins
pop
sub
push
mov
jo
shr
jge
mov
push
push
in
inc
xchg
sar
data16
xchg
jecxz
sub
pop
and
lods
pushf
mov
sbb
xchg
and
pop
sbb
xchg
sub
sub
mov
mov
stc
mov
jl
sbb
xchg
mov
test
xchg
add
dec
push
loop
pop
loopne
push
out
popa
jnp
mov
enter
push
or
(bad)
xlat
mov
lahf
cli
iret
(bad)
mov
popa
pop
xchg
(bad)
and
in
xor
(bad)
dec
icebp
stc
ret
call
inc
in
ins
xchg
jmp
call
cmp
sub
and
out
popa
data16
rcl
fst
es
ins
jmp
lahf
rol
int
push
xor
mov
push
xchg
arpl
adc
xchg
add
mov
in
add
adc
pop
mov
out
xchg
sub
add
xchg
or
fcomip
mov
xchg
xor
pop
and
xchg
call
imul
adc
sub
adc
sbb
bound
xor
in
movs
aam
cmp
sub
mov
das
hlt
add
mov
stos
pop
aam
out
dec
sbb
jbe
stc
imul
xchg
in
lahf
pop
or
push
jge
xchg
inc
sub
xor
mov
mov
call
sahf
sub
rol
xchg
jo
test
pop
ret
jg
push
cs
jnp
call
scas
fisub
sub
cmps
or
mov
xchg
xchg
in
adc
add
iret
lods
pop
sub
adc
cmc
push
test
rol
xchg
sbb
push
loope
lods
mov
enter
pop
out
shl
cld
push
xchg
mov
cmps
add
popf
add
out
call
es
ins
rcl
xchg
mov
or
sbb
mov
mov
adc
vpmadcswd
xchg
outs
pop
aam
enter
je
daa
mov
in
pop
inc
daa
xchg
test
das
and
xchg
xchg
js
adc
sub
mov
mov
add
sbb
mov
mov
popa
mov
mov
pushf
xchg
jns
pop
add
jbe
sbb
mov
jmp
lock
sbb
mov
lea
and
fadd
xchg
test
shr
xchg
xlat
adc
adc
mov
xchg
lahf
mov
push
ins
or
xchg
cmp
pop
ss
std
mov
or
sub
(bad)
icebp
and
and
adc
xchg
pop
cwde
movs
retf
aam
mov
scas
lock
scas
movs
mov
sub
xchg
sub
sbb
mov
pushf
mov
outs
cmps
adc
mov
rol
jmp
arpl
jp
or
fisttp
nop
je
push
push
sbb
out
aam
aaa
pop
xchg
push
jae
mov
mov
not
clc
adc
push
xchg
sbb
fcom
jl
sbb
in
jno
add
fidiv
xchg
lds
ja
dec
jecxz
xchg
(bad)
imul
xor
cmp
outs
dec
mov
into
dec
lea
sar
push
popf
sbb
xchg
pusha
stos
mov
jns
scas
cmp
icebp
xchg
fstp
aad
out
test
cmp
stos
jg
nop
scas
xchg
mov
adc
jmp
int3
mov
mov
out
dec
cmp
xchg
cli
push
lods
cmp
clc
xchg
mov
fbld
pop
push
mov
arpl
adc
lock
out
or
mov
xchg
mov
fcomip
bound
in
xchg
push
jmp
pop
xchg
xchg
add
loopne
pop
sahf
mov
rol
pop
inc
imul
ficom
les
mov
add
icebp
mov
sti
mov
std
out
add
fcmovnb
dec
test
daa
cmp
test
xchg
int
xchg
push
mov
push
aam
movs
or
xchg
sar
push
mov
xchg
cmc
or
mov
jb
xchg
sbb
imul
je
pop
les
out
repnz
sub
cli
retf
mov
mov
xchg
mov
aam
cmp
add
lea
fstp
jmp
leave
loopne
xchg
aad
clc
cmps
sbb
cs
jp
xchg
mov
movs
stc
mov
iret
mov
js
mov
push
fmul
outs
ror
add
sub
sahf
(bad)
push
out
xor
jmp
xchg
sub
fidiv
loope
fs
out
jbe
js
jecxz
pop
fdivp
out
(bad)
xchg
gs
mov
stos
jl
mov
push
add
jb
xchg
xor
int
mov
iret
add
arpl
mov
es
int3
push
mov
push
mov
pusha
push
adc
mov
js
mov
je
mov
inc
out
mov
xor
mov
icebp
xchg
sbb
mov
and
xchg
push
xchg
mov
jmp
and
arpl
xchg
add
mov
xchg
cmps
and
inc
icebp
data16
jo
jecxz
movs
add
sbb
ret
nop
inc
and
jb
call
fnsave
aad
cld
xchg
ins
bound
xchg
or
xchg
nop
test
mov
call
xchg
movs
shr
pop
sub
(bad)
adc
fist
xchg
mov
xor
outs
xchg
loopne
fsubr
jmp
aam
dec
push
lods
sub
xchg
xchg
push
xor
pusha
push
add
cmp
mov
push
pushf
adc
sbb
not
push
dec
jae
and
lds
adc
imul
jmp
xchg
iret
js
pop
jp
shl
repz
sbb
fnstenv
adc
mov
push
cmps
adc
xchg
(bad)
fld
add
pop
xchg
add
dec
mov
sbb
aad
movs
pop
aas
xchg
rcl
test
(bad)
test
pushw
adc
mov
and
je
push
mov
cmp
jge
xchg
push
or
mov
or
dec
dec
fs
scas
jle
inc
cmps
mov
xchg
xchg
xchg
int3
fcmove
pop
mov
movs
pop
push
repz
dec
xor
jo
dec
xchg
call
xor
xchg
fadd
inc
in
push
mov
sub
mov
jecxz
aam
xchg
xchg
dec
test
arpl
xchg
sub
fisttp
jne
mov
les
int
jg
mov
je
xchg
push
add
fwait
push
xchg
cld
dec
mov
mov
cmp
pop
mul
adc
gs
adc
xchg
sub
dec
inc
jmp
cmps
xchg
adc
xor
aam
adc
xchg
add
mov
and
arpl
sbb
iret
fwait
nop
pop
repz
or
call
push
rcr
enter
fidiv
push
xor
aam
lock
fwait
push
enter
fnstcw
or
xchg
ja
mov
push
mov
arpl
mov
jae
pop
sar
mov
int
mov
pop
xchg
es
les
movs
fsincos
xchg
clc
gs
(bad)
xchg
lea
adc
xchg
dec
mov
push
xchg
mov
add
mov
int3
ret
cwde
lods
outs
in
pop
push
pop
inc
bound
pop
pop
jge
popa
xlat
test
xchg
mov
dec
icebp
mov
repz
lea
adc
cwde
sub
data16
popf
xchg
cmp
fimul
jnp
mov
rcl
sar
mov
loopne
xchg
cmp
xor
mov
xchg
mov
out
rol
sub
retf
ds
aad
or
xchg
mov
sbb
xchg
sub
push
mov
not
xchg
mov
xor
(bad)
jb
xchg
lods
cmp
pop
ja
es
or
xchg
and
xchg
imul
mov
in
sub
adc
mov
inc
out
and
jnp
in
int
fwait
mov
sub
mov
mov
xchg
inc
(bad)
es
movs
jecxz
cli
and
dec
mov
cmp
or
mov
xor
lods
(bad)
in
xchg
loop
jns
push
adc
aas
into
and
adc
sbb
xchg
aaa
shld
das
mov
popf
xchg
push
jg
mov
xchg
dec
sub
ins
jl
pop
or
call
pop
jne
or
adc
retf
add
sbb
xchg
test
rcl
movsx
movs
(bad)
fs
mov
xchg
test
mov
xchg
sbb
jbe
mov
xlat
sahf
retf
jge
sub
xchg
sbb
push
pop
frstor
retf
enter
arpl
xchg
push
or
push
or
mov
lock
add
stos
xchg
dec
loop
dec
jl
xlat
mov
push
aam
cmp
sar
out
and
fwait
lds
test
ins
push
xchg
xchg
repnz
pop
adc
add
mov
xchg
cmp
sahf
cs
jmp
mov
xchg
cmp
dec
bound
fldenv
loope
sub
add
xchg
push
addr16
in
sub
add
inc
push
hlt
jmp
cmp
mov
dec
or
sub
sti
jle
adc
and
push
imul
rcl
dec
nop
mov
pop
sbb
sbb
outs
neg
adc
aam
push
js
xchg
sbb
and
mov
xchg
ss
jbe
xor
sub
call
xchg
xchg
lods
xor
scas
aaa
sub
and
mov
jne
adc
dec
fprem
pop
out
jmp
xchg
jae
pop
cs
in
jle
xchg
and
jge
xchg
and
add
loopne
xor
cmp
addr16
mov
dec
xchg
cdq
lods
xchg
mov
sub
mov
xlat
mov
pusha
test
pop
push
adc
inc
push
mov
in
mov
xchg
add
jno
xchg
pop
or
fld
mov
xor
aad
arpl
fsubr
icebp
xchg
and
mov
rcl
out
mov
pop
xor
sti
xchg
mov
add
mov
push
mov
ja
nop
pop
arpl
push
mov
xor
xlat
dec
lods
mov
sbb
sub
push
ror
mov
(bad)
jle
sub
xchg
sub
jge
div
mov
fwait
push
addr16
cdq
push
dec
xchg
ds
sub
adc
fs
inc
cmp
enter
cmps
stos
out
pop
xchg
push
and
jle
xchg
test
sub
xchg
adc
cmp
push
jecxz
out
je
cmp
adc
arpl
push
sbb
movs
sub
ja
test
sahf
mov
mov
push
mov
popf
sbb
cmps
xchg
push
imul
add
aam
xchg
out
bnd
sbb
and
daa
adc
xchg
retf
lahf
cmp
sbb
aas
jno
pop
nop
pop
jecxz
and
xor
arpl
or
xchg
out
inc
push
sub
add
mov
cmp
lock
pushf
inc
xchg
and
ja
imul
cmps
or
dec
outs
jnp
xchg
frstor
push
fisub
mov
cld
jno
sar
sahf
mov
xchg
jl
sbb
fiadd
loopne
add
std
lock
fdivr
xchg
mov
xor
ins
adc
xchg
jl
fwait
stos
out
in
mov
adc
je
or
repz
push
push
shr
xor
pop
xchg
sbb
retf
fdiv
jl
out
xchg
inc
(bad)
sub
clc
into
pop
xchg
xchg
mov
adc
mov
and
cld
jmp
clc
mov
cmp
push
stos
js
xchg
repz
mov
sahf
ja
in
xchg
xadd
jmp
aad
inc
pop
mov
adc
sbb
xchg
retf
adc
jle
xchg
mov
sub
lds
mov
mov
mul
xor
xchg
jno
test
jle
movs
xchg
iret
sti
inc
cmp
movs
loope
stos
jno
not
(bad)
into
add
leave
xchg
adc
in
sub
jg
or
je
loopne
rcl
scas
into
mov
adc
adc
mov
imul
or
mov
sbb
sbb
jnp
adc
loope
xor
jno
xor
lahf
mov
dec
and
mov
xchg
aam
push
ficomp
mov
adc
dec
ret
cwde
mov
into
fdiv
mov
add
jg
push
dec
js
inc
pusha
push
pop
xchg
pop
cwde
hlt
aaa
jne
mov
xchg
bound
sbb
pop
jge
not
lods
aas
sbb
xchg
adc
mov
pop
push
jnp
inc
cmc
test
xchg
test
adc
add
fnop
and
inc
imul
xchg
fisub
in
jg
retf
out
mov
fmul
or
mov
leave
and
mov
fisttp
lods
rcl
stos
xchg
mov
add
pop
jg
xchg
adc
jne
jp
arpl
and
xchg
ret
pop
sbb
mov
sti
xchg
(bad)
sub
pop
jl
lods
xchg
push
xchg
dec
xor
add
sbb
cmps
sub
je
ja
xchg
xor
add
sar
(bad)
mov
pop
dec
cmps
adc
(bad)
int3
pop
mov
xchg
or
push
jne
mov
xchg
pushf
fdivr
adc
or
aam
jmp
xchg
ficomp
mov
jne
in
popf
dec
ins
dec
xor
push
xor
push
sbb
dec
or
or
mov
xchg
jl
fsubr
xchg
mov
xor
repz
inc
retf
and
xchg
xchg
rcl
fist
mov
and
xchg
test
ret
xchg
adc
mov
jmp
cld
iret
jecxz
pop
popf
adc
in
into
jae
loope
jmp
(bad)
mov
aad
mov
jns
enter
in
cmp
popf
aad
or
into
mov
adc
sub
lods
sbb
xchg
xchg
outs
(bad)
out
push
leave
sahf
cmp
js
fdivp
xchg
lods
stos
mov
(bad)
xchg
jg
fimul
xchg
push
js
mov
loopne
xchg
adc
stos
pop
xchg
cdq
adc
hlt
dec
mov
push
inc
xchg
scas
or
add
pushf
sbb
push
(bad)
adc
ror
in
out
push
fadd
out
cmp
xchg
cmp
dec
sub
sub
aad
scas
addr16
std
rol
int3
fst
adc
or
and
adc
and
jecxz
daa
test
js
and
push
inc
sbb
sti
xchg
and
dec
xchg
mov
je
cmp
dec
retf
xchg
into
stc
inc
cmps
or
icebp
xchg
inc
fst
outs
sub
inc
lods
jne
xor
xor
cmps
fadd
mov
xchg
sbb
mov
cmp
lock
rcl
cmps
(bad)
(bad)
test
push
shl
push
out
sar
mov
add
loope
jo
repz
or
inc
or
out
fsubr
xlat
outs
xchg
pop
pop
lods
sahf
call
cs
push
xchg
repnz
jnp
mov
mov
inc
xchg
mov
sub
retf
xor
and
or
stc
popa
push
xchg
mov
and
jmp
ficomp
dec
shl
sub
and
inc
xchg
movs
sahf
icebp
fidivr
xchg
push
jmp
mov
cdq
dec
adc
dec
and
jo
ret
fwait
xchg
loop
pop
adc
outs
loope
cmc
shl
aad
clc
aam
push
mov
test
adc
mov
adc
xlat
(bad)
pop
je
xchg
stos
sahf
xchg
test
sar
sub
cmc
in
xor
cmp
sti
adc
loope
xchg
jecxz
and
cmp
adc
ret
in
xchg
jle
sbb
stos
xor
test
mov
xchg
nop
mov
push
xchg
mov
rcl
shl
xchg
pop
adc
fist
jmp
xchg
pushw
out
cmps
adc
jne
jo
inc
dec
xchg
or
lds
sti
xchg
adc
push
add
push
add
inc
mov
aas
sub
xor
xor
mov
xchg
mov
sti
stc
adc
cwde
cmp
xchg
mov
test
and
inc
xchg
cmp
stos
fiadd
or
mov
jmp
adc
call
adc
sar
adc
mov
xor
dec
idiv
scas
mov
cmp
pop
dec
out
cmp
xchg
lds
mov
je
call
jmp
dec
and
ret
xchg
adc
and
in
adc
scas
mov
aaa
repz
inc
mov
push
stos
loop
mov
jecxz
je
rcl
adc
cmp
xchg
pop
rol
gs
mov
call
inc
dec
and
movs
scas
stos
xchg
jecxz
(bad)
out
mov
hlt
adc
mov
pop
movs
data16
push
adc
cld
xchg
adc
icebp
cmovge
mov
pushf
daa
mov
xchg
mov
xchg
xchg
pop
dec
and
push
fs
xchg
(bad)
neg
mov
rcr
cmps
xchg
in
add
xchg
and
fs
in
push
je
imul
xchg
sti
bnd
sbb
and
jnp
jge
jns
push
or
xchg
dec
je
sub
adc
adc
xchg
(bad)
fdiv
arpl
adc
inc
stos
xchg
xor
mov
mov
shr
dec
lds
shr
cmp
icebp
cmp
cmp
xchg
call
in
xchg
dec
fcmovnbe
retf
in
xchg
pop
aam
push
pop
mov
test
sti
popa
stos
pop
xchg
cwde
cli
jecxz
jg
dec
jmp
in
test
pop
cmp
je
jmp
shl
or
inc
sub
xrelease
iret
imul
iret
xchg
mov
ja
push
xchg
outs
xor
sar
xchg
and
fucom
neg
das
cwde
arpl
(bad)
(bad)
into
jb
and
xchg
sub
xchg
adc
imul
iret
int3
mov
call
push
jge
sbb
xchg
ja
pop
js
les
jne
iret
jle
into
cli
sahf
test
aas
imul
sub
dec
adc
xor
rcl
test
and
call
cs
xchg
mov
shl
mov
mov
adc
or
push
cwde
cwde
or
daa
xchg
imul
push
mov
loope
xchg
add
dec
sub
fwait
add
mov
pushf
mov
fldz
xchg
inc
cwde
mov
fisttp
sub
in
inc
loope
xchg
pop
stc
xchg
dec
dec
popf
data16
mov
pushf
push
xor
push
test
pusha
in
xchg
jl
cmps
dec
xchg
pop
loopne
xchg
(bad)
jnp
sbb
sahf
pop
xchg
test
sti
out
das
(bad)
repnz
cmps
sub
mov
test
pop
xchg
data16
call
pop
push
popf
xchg
and
or
aas
mov
xor
test
es
mov
inc
or
sbb
mov
mov
xchg
add
rcl
(bad)
and
sbb
xchg
sti
hlt
fadd
mov
repnz
jl
mov
adc
iret
or
xchg
cmp
arpl
jae
xchg
repz
popf
xchg
fisubr
mov
jl
stc
aas
xchg
mov
es
call
popf
in
dec
mov
int
fwait
inc
sub
aam
adc
push
test
int
test
dec
mov
mov
hlt
jno
cdq
cwde
and
xchg
cmp
mov
xchg
jnp
add
and
adc
or
xchg
(bad)
sub
shr
stc
pop
or
fwait
adc
aam
xchg
addr16
mov
dec
test
pusha
repnz
stos
or
adc
push
loop
xchg
dec
pop
pop
ds
inc
test
fstp
fisttp
xchg
test
mov
or
xchg
stos
lds
bound
cli
add
les
or
(bad)
in
clc
nop
fist
ss
xchg
sti
inc
sbb
xchg
cli
repnz
cmp
cmp
test
inc
xlat
cwde
cmps
int
js
adc
mov
clc
mov
and
and
cli
xor
cmps
je
jmp
mov
data16
loop
fadd
xchg
push
push
std
xchg
push
loopne
jp
and
push
aam
sub
mov
add
lods
xchg
or
mov
iret
inc
mov
mov
shl
mov
mov
daa
push
jmp
arpl
clc
js
in
mov
into
nop
mov
pushf
xchg
lods
sbb
xor
xchg
fucomp
fdivr
mov
adc
xor
sub
mov
xchg
daa
mov
xchg
inc
mov
sub
stos
jmp
xchg
push
imul
adc
mov
xchg
xchg
mov
sub
mov
(bad)
scas
repz
xchg
les
(bad)
cli
add
pop
loope
mov
add
mov
sub
inc
mov
pop
ss
imul
loop
xchg
das
fidiv
mov
mov
out
push
jo
push
stos
test
call
or
add
in
fdiv
je
test
call
gs
or
xlat
xchg
cmp
pop
outs
popa
js
test
xchg
scas
pop
jb
test
jnp
dec
cs
pop
arpl
test
or
xor
cs
xchg
push
in
imul
inc
leave
sbb
mov
and
inc
popf
int
gs
(bad)
xor
inc
mov
cmp
adc
(bad)
mov
out
cli
jb
int3
push
ins
xchg
ret
inc
add
jg
sub
jo
xchg
es
and
pop
(bad)
int
push
cmps
clc
jne
enter
xchg
inc
jmp
jmp
(bad)
mov
add
lock
test
sbb
loop
jns
js
lahf
cmp
pop
inc
dec
jp
xlat
ja
shr
xchg
pop
cmps
es
inc
call
lahf
icebp
mov
shl
out
jbe
fs
mov
sub
ds
add
xchg
shr
outs
lods
pop
mov
sbb
mov
adc
xchg
(bad)
or
lock
mov
cdq
sub
pop
iret
test
cmp
xchg
pop
repz
xchg
dec
pop
int
sub
add
daa
push
lods
xor
imul
test
sbb
or
cs
mov
dec
sub
ins
and
xchg
lock
repz
jns
sbb
push
std
jbe
mov
xchg
imul
sub
shr
int3
and
push
popf
xchg
sbb
cdq
mov
fcom
imul
xchg
xchg
cmp
or
test
xchg
sti
pop
jecxz
cmp
mov
dec
xchg
adc
dec
xor
jl
out
cmp
popf
(bad)
mov
jle
jae
aam
xlat
fldenv
aas
cmp
mov
sti
xchg
in
or
pop
push
inc
in
popf
mov
mov
push
inc
push
and
out
push
test
pop
inc
and
sbb
xchg
jl
clc
test
ss
dec
jle
sub
in
mov
cmp
jne
mov
adc
out
(bad)
mov
adc
xchg
ins
data16
fwait
jb
dec
imul
retf
mov
loope
mov
idiv
popf
sar
pop
sahf
mov
mov
xor
mov
je
(bad)
xor
xchg
les
(bad)
es
sub
in
push
push
aaa
ins
ret
fwait
cs
cld
add
push
mov
cmp
mov
push
lahf
sbb
adc
fwait
daa
jbe
xchg
mov
ins
mov
(bad)
and
sub
(bad)
xchg
push
mov
xchg
movs
mov
outs
inc
xchg
neg
test
fcomp
call
retf
fld
jecxz
xchg
mov
mov
call
addr16
sbb
mov
out
int
xor
mov
bound
sbb
jo
lahf
loopne
lock
sub
cld
dec
xchg
(bad)
adc
addr16
sub
sub
xchg
dec
xchg
sub
sbb
xchg
mov
mov
push
bswap
pop
fwait
jae
jb
jnp
ss
or
rcl
loopne
add
in
hlt
das
or
call
mov
aam
push
rcr
adc
xchg
lea
xor
pop
xchg
popa
out
mov
xchg
sub
ret
loopne
sbb
shl
push
sbb
xchg
retf
mov
mov
cmp
xchg
cwde
icebp
bound
rol
adc
xchg
push
mov
or
ret
xlat
hlt
mov
sbb
mov
sbb
dec
in
sahf
ds
xchg
cmp
sub
sbb
mov
cdq
retf
repz
add
mov
loopne
add
into
(bad)
push
fs
(bad)
jmp
enter
or
outs
daa
test
outs
stos
xchg
sub
jmp
xchg
call
arpl
push
xchg
xchg
dec
in
out
(bad)
pop
in
into
xchg
mov
loopne
aad
xchg
xlat
xchg
iret
cli
rcl
push
pusha
jecxz
xchg
mov
xchg
mov
xchg
call
clc
cwde
adc
push
push
jmp
mov
cmp
arpl
icebp
int3
popf
push
xchg
dec
xor
in
loope
retf
cs
push
inc
aas
and
enter
mov
dec
lahf
repz
pushw
jo
add
cdq
jge
mov
pop
or
and
in
xor
test
xchg
xchg
mov
jo
repnz
xchg
mov
mov
test
cmp
cmps
rcr
adc
and
loopne
iret
ret
adc
xchg
into
push
pop
sbb
js
push
xchg
(bad)
mov
test
sub
ss
les
push
xchg
pop
cmps
and
in
ret
sub
retf
cli
xor
push
fnstcw
xchg
hlt
or
cmp
mov
clc
xchg
push
pop
popa
popf
cdq
pop
imul
sbb
sbb
loop
inc
xchg
mov
dec
ret
sbb
clc
mul
push
test
pop
fadd
xchg
adc
sahf
mov
mov
gs
popa
in
xor
and
cs
sbb
inc
xlat
mov
jecxz
jbe
push
dec
test
nop
jae
mov
xchg
fidivr
inc
sub
xchg
inc
xor
loope
stc
adc
out
jbe
mov
outs
push
fist
pop
sbb
sahf
(bad)
dec
xor
ror
fsubp
loope
xor
or
fwait
cmp
xchg
cmps
in
shl
sbb
add
ds
jmp
and
xchg
jl
shl
data16
dec
stos
cwde
(bad)
aas
xchg
mov
xor
push
shr
jno
lea
jl
sbb
mov
inc
adc
(bad)
out
xor
retf
cmp
mov
dec
in
loop
mov
dec
das
xchg
cmps
mov
pop
dec
mov
std
in
fidivr
pop
call
repz
inc
lods
fist
pop
xchg
cmp
and
adc
popa
imul
sbb
add
popf
test
mov
xchg
call
loopne
sub
or
or
leave
xchg
mov
push
mov
sub
xor
dec
xchg
sbb
cmp
loopne
hlt
movs
mov
mov
inc
iret
sub
daa
pop
aam
xchg
js
cmp
fsub
or
mov
aam
jecxz
add
cdq
jno
(bad)
jne
fwait
sbb
out
mov
dec
arpl
(bad)
loopne
or
xchg
sub
mov
jmp
xchg
mov
in
stos
in
jnp
ja
test
sbb
arpl
adc
xchg
jae
push
mov
cmps
rol
mov
xchg
inc
push
icebp
or
test
iret
in
aam
lahf
push
xor
pop
inc
pop
dec
dec
dec
xchg
push
mov
aam
repnz
pop
xchg
xchg
jno
cli
shl
gs
cdq
jmp
lea
imul
repnz
and
(bad)
pop
ss
pushf
mov
mov
sbb
icebp
xor
daa
pop
xchg
cmc
(bad)
clc
push
mov
push
mov
mov
(bad)
dec
jg
mov
xchg
sahf
inc
aad
and
inc
xor
cmp
add
jnp
cwde
mov
adc
mov
mov
push
dec
fwait
lds
ins
(bad)
and
push
scas
xchg
inc
pushf
push
retf
inc
mov
xlat
cmp
lods
adc
or
add
not
adc
(bad)
fucomi
clc
pop
push
es
sbb
xchg
xchg
aad
ss
xchg
pushf
or
jp
dec
call
xchg
mov
sar
xchg
xor
mov
xchg
push
fiadd
lds
loop
push
mov
pop
cwde
mov
aam
int3
mov
inc
movs
xchg
xor
sar
sbb
xchg
fucomp
xchg
movs
mov
lahf
loop
xor
push
and
jmp
dec
pop
xchg
pop
mov
xchg
sbb
jmp
aad
iret
fwait
lea
es
jbe
add
adc
dec
mov
not
dec
add
je
cdq
mov
dec
and
dec
ja
xchg
fld
push
jmp
fs
jae
adc
das
xchg
or
mov
adc
dec
cmc
adc
jg
or
cwde
push
jb
adc
cdq
retf
imul
xchg
sbb
mov
dec
xchg
das
stc
push
imul
add
cmp
mov
xchg
mov
pusha
and
fs
mov
jge
je
mov
or
xchg
xchg
xchg
sar
jmp
ds
or
xlat
or
aam
pop
mov
push
sbb
xchg
sub
xchg
pop
ss
and
fdiv
or
sete
int3
(bad)
mov
stos
addr16
jb
xchg
hlt
mov
fdiv
dec
or
(bad)
std
out
lea
fwait
adc
push
(bad)
sti
jae
xchg
inc
daa
jnp
loop
adc
fwait
cwde
add
fld
shr
add
sbb
xchg
xchg
adc
xchg
mov
aad
aas
int3
xchg
fdiv
addr16
pop
and
mov
ret
rcl
push
jbe
cmp
imul
das
jge
xchg
repnz
jmp
pop
xchg
xor
and
je
ret
aad
pop
push
xchg
(bad)
pop
cmps
xor
push
dec
dec
push
inc
sbb
inc
inc
or
dec
sbb
sahf
mov
xchg
xchg
sti
pop
jne
lds
xchg
xor
shl
pop
xchg
loopne
call
addr16
push
sub
inc
(bad)
fbld
xchg
stos
dec
adc
mov
(bad)
in
sbb
push
sub
es
mov
mov
cs
mov
cmc
test
jecxz
cmp
mov
cmps
data16
mov
sbb
sub
nop
and
pop
dec
fidivr
lods
dec
call
mov
jge
je
mov
sub
inc
cmp
xchg
in
les
or
fidivr
pop
icebp
mov
stc
xchg
js
lods
cli
mov
xor
push
aam
daa
les
cmp
xchg
xlat
fimul
xor
mov
gs
mov
mov
sar
in
xchg
pop
out
fnsave
lahf
push
pop
and
cld
into
hlt
mov
jecxz
push
mov
inc
xchg
(bad)
lock
inc
int
enter
push
mov
pop
xchg
dec
out
adc
sbb
cmp
add
add
mov
(bad)
sub
xchg
ins
or
ficom
in
(bad)
or
dec
adc
sbb
mov
int3
xchg
xchg
jmp
cld
(bad)
xchg
jg
lods
int
and
imul
pop
mov
nop
sti
fimul
gs
lds
aad
mov
ror
fisttp
add
and
fninit
fwait
aam
test
inc
sbb
out
hlt
add
push
mov
mov
inc
push
xor
cli
sub
shr
xchg
adc
jnp
jecxz
xchg
rol
retf
fwait
or
xchg
iret
lods
or
fst
movs
xchg
cmp
sbb
mov
mov
loope
xchg
shr
xchg
pop
push
lock
lds
movs
xor
sbb
xchg
push
mov
leave
es
out
or
cdq
xchg
dec
dec
cmps
loop
add
dec
xchg
bound
ret
push
pop
xchg
scas
xlat
in
into
xchg
pop
mov
mov
test
push
push
iret
pop
push
jg
out
test
dec
cmp
mov
push
les
out
lods
sub
mov
fsubr
or
cld
xor
mov
mov
mov
and
pusha
jbe
xchg
scas
xor
fstp
inc
adc
mov
pop
aaa
pop
ret
icebp
xor
adc
jl
dec
test
jbe
into
icebp
cmp
test
xchg
mov
pusha
cwde
fst
int3
inc
fiadd
in
inc
sbb
push
test
xchg
out
adc
pop
xchg
in
sahf
cmp
fwait
or
push
retf
and
fnsave
(bad)
xchg
sbb
fld
jae
xchg
dec
dec
out
cmp
nop
(bad)
jb
xchg
or
inc
cmp
xchg
jae
add
xchg
and
lods
bsf
pop
retf
sub
cmps
pop
loope
inc
xchg
mov
fwait
push
mov
and
out
xchg
mov
scas
mov
xchg
sti
das
cmps
sub
in
xchg
sar
fld
jne
mov
mov
outs
inc
daa
xchg
add
xor
fstp
fwait
shl
mov
fs
xor
loope
add
mov
aaa
fdiv
xchg
xchg
mov
aam
xchg
fs
sub
xchg
cmp
sub
mov
sti
adc
push
aas
xchg
sar
outs
sar
outs
inc
xor
xor
adc
sub
mov
out
xchg
mov
ror
jge
mov
and
cmps
fs
and
retf
mov
xchg
pop
not
cli
jmp
aas
iret
outs
hlt
adc
ja
jl
adc
mov
in
rcl
mov
cmp
push
ja
xchg
push
xor
xchg
xor
cmp
test
and
jnp
push
retw
and
das
xchg
mov
mov
push
popf
xor
out
test
fisttp
scas
push
lea
jmp
inc
cdq
nop
mov
dec
shr
loopne
or
aad
pop
adc
xlat
jl
sbb
mov
fwait
sbb
popf
adc
aaa
ins
xchg
xchg
adc
lods
mov
lods
lock
mov
or
sbb
movs
jno
pop
jg
scas
pop
xchg
push
cmp
xchg
xor
push
(bad)
in
mov
xchg
enter
fcomip
xor
repnz
xchg
add
mov
aam
cmp
xor
les
adc
xchg
xchg
xor
xchg
int3
sar
mov
(bad)
xchg
nop
mov
lea
repz
pop
lods
mov
cmc
cmp
leave
jl
pushf
xchg
push
out
and
xchg
jne
xchg
out
cmovnp
inc
xchg
outs
repz
hlt
lea
lds
out
rol
xchg
sahf
pop
xor
or
and
jle
lahf
lods
pop
or
pop
pop
mov
arpl
(bad)
jge
sbb
push
(bad)
cmp
outs
xor
xchg
call
dec
test
pusha
in
test
js
int
dec
pop
mov
xor
pop
pop
into
jno
jp
cmp
or
push
push
lds
push
jmp
xchg
and
int
les
inc
fwait
xchg
ror
sti
inc
xchg
xchg
shr
mov
pop
adc
test
je
adc
jle
cmp
xchg
sub
inc
xchg
outs
xchg
xor
xchg
sti
add
mov
push
xor
out
imul
pop
aas
adc
xchg
sbb
and
cdq
push
push
rcr
dec
push
call
call
scas
jge
or
cld
xchg
and
mov
xchg
or
xchg
aad
ret
xlat
sub
loop
xchg
pop
scas
and
fidiv
pop
ret
(bad)
stos
fwait
sbb
jg
push
xchg
ja
mov
and
lods
xchg
sti
xchg
into
adc
xchg
test
pop
xchg
jp
xchg
push
movs
sbb
xchg
popa
xchg
mov
cmp
mov
add
(bad)
ins
sub
xchg
xchg
pop
hlt
dec
mov
sbb
mov
rcr
or
int3
dec
mov
imul
ins
jmp
scas
mov
inc
mov
jb
aam
push
xor
xchg
mov
out
out
mov
mov
stos
cwde
jne
cmp
jb
pop
rcl
(bad)
iret
call
inc
xlat
lahf
je
mov
xchg
push
xor
push
cwde
xor
scas
or
sbb
inc
cmp
movs
cli
mov
jne
enter
ds
mov
pop
les
jae
xor
mov
mov
jl
xchg
mov
mov
(bad)
iret
int3
pop
xchg
sbb
fcmovbe
ins
xchg
pop
call
into
add
sbb
dec
hlt
jbe
pop
push
mov
cmps
inc
and
xchg
mov
das
add
xchg
cmp
outs
cs
mov
lahf
push
jne
(bad)
out
test
sub
leave
dec
dec
xchg
lods
ins
outs
mov
xchg
mov
test
cmp
shl
or
xchg
jnp
jmp
in
fst
xchg
mov
ins
mov
cmps
lahf
(bad)
inc
jbe
out
xchg
inc
call
leave
js
movs
jae
icebp
push
fsubr
adc
nop
(bad)
or
popa
sti
imul
push
out
imul
clc
xchg
stos
push
(bad)
in
pop
mov
xchg
test
push
mov
xchg
push
inc
(bad)
retf
int3
bound
mov
loop
dec
jb
mov
mov
dec
push
inc
xchg
icebp
cmp
ret
jmp
dec
mov
jns
je
pushf
sbb
dec
xchg
xchg
leave
cld
cli
sbb
add
not
cmp
xlat
xchg
push
test
fistp
frstor
add
out
mov
push
mov
xchg
sbb
sbb
mov
lock
mov
aam
ins
out
dec
fsub
xor
mov
sbb
jno
dec
aam
and
call
or
sbb
xchg
xor
xchg
cdq
sbb
mov
pop
xchg
mov
retf
outs
int3
or
ret
mov
test
inc
movs
mov
fst
jle
mov
(bad)
mov
xchg
scas
cli
xor
jp
cmp
(bad)
test
loopne
lahf
mov
out
xchg
dec
mov
daa
in
data16
xchg
clc
(bad)
lods
mov
popa
retf
or
mov
loop
into
jp
mov
mov
dec
inc
xchg
and
inc
je
fwait
arpl
push
pop
outs
xchg
in
and
add
jo
or
mov
sbb
test
sbb
push
jg
mov
cmp
xchg
add
jmp
retf
call
ret
lods
and
mov
loop
push
xchg
in
icebp
jo
push
lds
mov
xchg
ficom
outs
aaa
xchg
hlt
ret
sbb
mov
ins
pop
add
je
add
mov
jo
dec
je
bound
and
mov
cmp
and
xchg
int
leave
fs
xchg
inc
out
jecxz
xor
adc
enter
xchg
stos
mov
sub
jecxz
stos
shr
mov
push
mov
pop
test
xchg
xchg
cmp
adc
fdivr
add
inc
jo
mov
jb
mov
xchg
sub
mov
and
inc
aad
jecxz
dec
(bad)
xchg
mov
out
jo
rcr
cmps
or
jecxz
lea
or
jnp
or
xchg
ja
lahf
shl
adc
pop
ret
xchg
loop
fdiv
inc
test
js
mov
mov
test
and
push
xchg
rcr
pop
cmps
jnp
xchg
arpl
rol
and
test
scas
sub
fwait
jecxz
jbe
cmc
ins
fwait
les
inc
xchg
or
retf
inc
mov
xchg
push
xchg
sti
(bad)
jne
jp
pushf
fwait
into
in
mov
and
sub
xchg
dec
pop
cmp
sbb
lds
adc
mov
hlt
adc
xlat
mov
xchg
(bad)
sbb
addr16
dec
movs
std
jmp
fwait
rcl
and
fisttp
and
aaa
mov
pop
mov
push
aam
jmp
xchg
cmp
pop
xchg
imul
xor
shl
push
xor
pusha
xchg
xlat
jp
retf
xor
mov
push
sti
cli
pop
fs
xchg
nop
jbe
adc
stos
xor
arpl
cmp
sti
xchg
(bad)
dec
mov
loop
xor
arpl
es
jae
xchg
xor
adc
outs
xchg
cdq
fsubr
mov
mov
outs
xchg
out
stos
clc
jmp
aad
xchg
xchg
xor
add
xor
pop
inc
std
mov
xchg
push
es
jmp
dec
retf
push
pop
fnop
retf
adc
in
xchg
lock
push
imul
fs
jno
retf
xchg
or
(bad)
sti
outs
je
fcom
ins
cmp
clc
and
pop
in
inc
or
sbb
dec
inc
xchg
fwait
xchg
bound
ins
retf
inc
popf
xlat
xchg
sbb
inc
jne
loope
lahf
xchg
je
mov
test
sub
in
sbb
ins
ins
mov
in
rol
mov
jns
cmp
in
mov
xchg
and
push
lods
movs
or
adc
nop
fdiv
call
mov
mov
and
repnz
rcl
adc
and
or
mov
test
shr
inc
xchg
pop
ins
or
or
adc
stc
(bad)
lods
xchg
and
push
int3
sbb
cmp
xlat
adc
fs
loop
sub
or
imul
xchg
jle
scas
and
xor
nop
jo
jno
dec
iret
mov
enter
fwait
xor
es
lods
imul
push
dec
xchg
and
xor
mov
pop
mov
ror
sub
xchg
add
push
test
je
pop
pop
xchg
dec
movs
aad
aas
mov
xchg
rol
adc
sub
les
dec
fs
pop
arpl
repnz
es
sub
scas
adc
push
mov
jno
cmc
into
daa
ret
or
sar
sub
das
sub
jae
cmp
js
imul
xchg
stos
pop
cwde
jecxz
push
xor
or
and
aam
fistp
cmp
fwait
cmp
dec
xlat
pop
pop
mov
je
aam
test
xchg
popf
movs
inc
rcl
mov
push
mov
fcomp
loope
xchg
movs
adc
push
push
xchg
call
pop
xchg
xchg
fdiv
out
adc
icebp
out
ret
mov
jae
pop
stos
or
dec
push
cmp
ins
dec
leave
hlt
or
xchg
cs
loopne
sub
int3
pop
push
or
sar
xchg
mov
dec
retf
mov
bound
mov
in
fdivr
mov
hlt
cld
cs
add
stos
or
push
xchg
lods
outs
outs
push
fs
out
fdivr
xchg
mov
mov
mov
int
jle
push
(bad)
int3
adc
xor
enter
or
cld
rcl
mov
idiv
push
xchg
jmp
ins
fdivr
xchg
push
and
rcl
movs
dec
xchg
bswap
retf
loopne
(bad)
stos
leave
push
push
fwait
ret
add
fimul
xchg
jmp
push
lahf
hlt
adc
in
out
pop
fld
xchg
mov
cld
sbb
into
sti
adc
fstp
xchg
or
or
in
stc
call
cmp
push
adc
cmp
pop
xchg
xor
push
add
pushf
shr
cs
jle
xchg
push
xlat
lods
hlt
or
cdq
or
xor
adc
add
or
js
cwde
in
inc
outs
xchg
test
pop
or
inc
push
call
xchg
mov
mov
lds
mov
push
dec
push
(bad)
xchg
sub
adc
popf
les
loop
pop
xchg
btc
adc
xchg
sub
and
xchg
jl
call
outs
push
xchg
push
mov
cld
sahf
fstp
sub
push
add
test
dec
xchg
call
pop
bound
rcl
mov
ins
hlt
xor
xchg
xlat
push
scas
in
loopne
adc
out
sbb
pop
xchg
ror
pop
js
icebp
(bad)
div
rcr
xchg
ficom
cmp
xor
push
xchg
stc
jg
add
inc
xchg
hlt
nop
push
call
(bad)
out
pop
xchg
add
bound
jo
je
lds
xchg
outs
adc
cmps
jl
and
imul
xchg
mov
dec
out
mov
sbb
pop
dec
rcr
retf
ins
dec
not
into
das
adc
sub
adc
mov
(bad)
adc
pusha
sbb
sub
jmp
inc
xor
aam
mov
jmp
push
test
fmul
sub
xchg
jo
jp
push
hlt
in
push
ins
adc
xchg
mov
mov
or
sti
sub
es
outs
or
and
cmc
aas
dec
push
mov
xchg
or
dec
mov
dec
and
xchg
xchg
cmp
add
stc
cmp
sub
ja
call
dec
push
xchg
mov
inc
ss
xchg
test
push
inc
xchg
inc
mov
push
xchg
ret
mov
test
xchg
ins
and
cs
xchg
mov
xchg
or
fcmovu
icebp
outs
sbb
mov
cmp
ror
add
pop
nop
sub
int
mov
pusha
fadd
jle
es
iret
jp
inc
sub
xchg
mov
cmp
and
ins
sbb
pop
xchg
xchg
je
loope
mov
pop
xchg
in
pop
lock
adc
xchg
stc
cmp
lahf
xor
data16
popf
adc
daa
jge
and
je
(bad)
jnp
aam
add
fnstsw
and
dec
pop
push
rol
stos
pop
in
inc
xchg
xor
xchg
imul
imul
add
fnsave
xchg
popf
dec
mov
add
jo
push
mov
add
mov
push
or
xchg
das
repz
sbb
cwde
stos
mov
icebp
jns
pop
fs
adc
lds
mov
test
cmp
cmp
xor
or
xchg
adc
je
push
stc
mov
loop
and
aaa
mov
(bad)
xchg
add
in
and
retf
xchg
xor
xor
out
push
push
inc
or
mov
aaa
cmps
movs
xchg
sub
adc
mov
aam
lds
dec
nop
stc
ror
inc
adc
into
mov
inc
icebp
xor
fstp
fadd
ror
sub
out
mov
xchg
jl
mov
and
bound
cdq
ret
sub
mov
sub
sub
xchg
mov
pop
cwde
cld
aad
sub
fisubr
not
test
out
xchg
sbb
cwde
adc
nop
fwait
cld
add
mov
xchg
xor
adc
sbb
cmp
inc
ret
outs
loope
cs
xchg
cmp
lods
xchg
xor
add
cmp
ins
fidivr
cli
xchg
cmp
fwait
sbb
aam
xchg
arpl
inc
ins
xchg
inc
pop
std
fwait
add
repz
lahf
and
das
mov
out
and
mov
mov
push
dec
cmc
sub
xchg
mov
jl
imul
aam
pop
mov
pop
and
sub
(bad)
adc
and
stos
jns
scas
push
xor
push
mov
mov
xchg
icebp
in
inc
pop
out
or
jbe
lahf
test
push
xchg
aaa
pop
bswap
and
or
sbb
out
xchg
arpl
sub
fdiv
push
lea
mov
(bad)
out
mov
mov
and
popa
cmc
push
daa
xchg
cmps
xchg
int
dec
xlat
sub
sbb
mov
iret
repz
call
lea
not
test
fs
xlat
sub
inc
movs
mov
inc
pop
xchg
push
mov
xchg
test
or
(bad)
adc
(bad)
mov
sub
into
xchg
jb
push
dec
xchg
adc
je
ins
popf
and
mov
adc
movs
add
xchg
rcl
mov
cmp
inc
adc
imul
cwde
sub
inc
xor
pop
mov
xchg
sub
adc
cld
xchg
lea
push
mov
cmp
stc
mov
mov
rcr
inc
xchg
jmp
pop
retf
ja
iret
push
mov
and
mov
cdq
adc
xchg
inc
vpunpcklwd
loope
cmp
push
xchg
cli
mov
and
out
in
in
or
xchg
or
pop
ret
cmp
(bad)
ds
jbe
adc
xchg
jno
sti
shl
and
push
xchg
push
neg
test
xchg
cmp
dec
and
xchg
xor
or
imul
mov
outs
xor
fdiv
jl
ret
dec
rcl
jne
in
adc
cld
adc
sbb
scas
cmp
lods
cmp
dec
je
test
in
jp
xchg
jge
pop
je
adc
and
and
test
(bad)
in
pop
add
mov
sti
rcl
or
fdivr
mov
push
add
dec
jge
xchg
jne
imul
(bad)
jbe
into
sbb
push
push
mov
jp
xchg
inc
xchg
adc
dec
and
sbb
loop
xchg
dec
mov
mov
fiadd
pop
add
cmp
das
mov
ja
adc
fwait
push
push
xor
jmp
or
push
imul
test
aaa
or
xor
(bad)
jns
mov
jmp
ins
iret
xchg
jg
xor
and
xchg
sub
dec
call
or
shl
xchg
ror
les
mov
xchg
fmul
mov
jle
inc
add
jne
lahf
and
ret
push
push
es
(bad)
jns
iret
mov
mov
mov
fmul
dec
xchg
cmp
es
sub
cwde
add
sbb
inc
mov
mov
xchg
ret
hlt
or
adc
jns
xchg
cdq
pop
shr
icebp
pusha
adc
outs
popa
push
xchg
mov
pop
push
xlat
xor
loop
bound
xchg
or
rcl
not
dec
add
push
inc
push
mov
mov
xchg
ins
(bad)
rol
das
cmps
sub
push
or
add
test
xchg
std
mov
add
adc
xchg
sub
jg
mov
fcmovb
add
call
pop
and
xchg
cmp
pop
nop
inc
aaa
shl
xchg
ror
fnsave
adc
je
mov
and
mov
xchg
push
mov
shl
into
sub
loop
sti
les
jmp
fstp
out
and
adc
test
xchg
and
rcr
xchg
jmp
aam
xchg
test
push
push
dec
sub
xor
mov
mov
xor
movs
fwait
int3
and
inc
and
sar
add
cmp
xchg
or
lea
mov
xchg
jge
loopne
test
aas
mov
test
cmc
xchg
sub
adc
out
sbb
xchg
sbb
rol
sar
cs
fimul
dec
retf
pop
mov
pushf
or
int
xchg
ret
scas
dec
ret
adc
push
inc
rcl
(bad)
es
rcl
out
fcom
sub
mov
je
push
fmulp
mov
adc
test
enter
fwait
mov
sti
mov
gs
cmps
sub
xchg
and
cli
cmps
pusha
cmp
jae
cdq
inc
retf
xchg
fld
xor
loop
pop
or
out
push
pop
add
sti
pop
out
mov
pop
(bad)
xchg
or
neg
xchg
adc
iret
mov
mov
mov
sahf
xchg
push
and
push
inc
loop
xchg
add
shl
mov
cmp
inc
js
call
xchg
sub
mov
test
adc
pop
arpl
loop
sub
mov
aam
inc
stc
push
mov
push
sub
pushf
adc
aaa
xchg
mov
xchg
mov
xchg
and
or
mov
jmp
inc
xchg
out
and
mov
test
or
in
push
xchg
in
daa
ss
mov
xor
sub
les
je
push
xor
or
into
dec
hlt
sub
aaa
sub
call
pop
in
push
inc
(bad)
xchg
push
jg
(bad)
mov
out
pop
adc
xchg
(bad)
dec
loopne
add
test
inc
cmp
mov
cli
imul
in
bound
mov
add
mov
jmp
pop
add
or
xlat
outs
(bad)
pop
dec
pop
pop
movs
lds
into
cmp
jns
icebp
or
pop
mov
fs
xchg
mov
cmp
jge
or
ficom
outs
fwait
lods
shl
mov
inc
shl
das
inc
outs
sbb
pop
mov
fild
aad
ds
xor
mov
test
pop
xchg
cmc
(bad)
jmp
sbb
add
mov
imul
cli
mov
aaa
ror
movs
pop
xchg
push
pop
cmp
int3
mov
xchg
push
das
(bad)
arpl
movs
test
nop
stc
mov
je
sub
in
(bad)
fdivr
jp
dec
mov
xchg
add
lods
je
inc
clc
sub
ins
je
jo
pop
fwait
ret
loopne
or
dec
es
xchg
jns
(bad)
call
adc
fwait
in
pop
scas
mov
push
std
or
jns
test
xchg
mov
jmp
inc
push
cmp
call
xchg
iret
(bad)
sti
xchg
mov
pop
ror
lods
not
mov
xor
aad
cdq
inc
pop
dec
xor
bound
xor
cmp
rcr
xchg
mov
mov
adc
ss
clc
rcl
fwait
int3
push
ds
adc
cdq
sahf
dec
shl
pop
nop
in
and
xor
popa
stc
xchg
pushf
jge
ins
adc
les
jecxz
js
and
cmp
loopne
xchg
mov
dec
test
scas
xchg
xchg
mov
pop
pop
loop
jge
cli
mov
mov
xchg
inc
out
dec
and
or
pop
outs
in
jbe
xchg
add
xchg
bts
scas
add
cs
test
addr16
clc
jle
fcomp
mov
(bad)
cmp
rcr
mov
jnp
add
cmp
xchg
sub
jl
fcom
scas
dec
sti
xchg
cmc
(bad)
aas
mov
push
fwait
jno
(bad)
in
in
cmps
call
int3
jmp
mov
rcr
and
and
xchg
aam
or
data16
test
or
dec
mov
xchg
jmp
xchg
xlat
dec
movs
xchg
bound
cmp
xchg
pop
mov
(bad)
mov
aas
sub
data16
sbb
stos
and
int
xchg
(bad)
mov
inc
xchg
pop
and
lock
xchg
(bad)
scas
ror
into
cld
popa
jg
shl
inc
stc
mov
dec
mov
pushf
sbb
xor
or
jbe
jmp
and
jge
jp
or
aas
xchg
adc
xor
je
and
push
mov
xchg
nop
inc
inc
sub
mul
xchg
mov
lock
push
call
add
xchg
inc
into
(bad)
ja
test
popf
pop
sbb
xchg
ret
or
ret
inc
xchg
in
cs
push
cmps
mov
add
dec
xchg
not
jl
sar
js
leave
xlat
ret
jmp
mov
sbb
hlt
add
push
xor
xchg
hlt
xor
xchg
daa
add
mov
clc
jmp
mov
test
add
sub
add
jb
imul
push
adc
fisttp
aaa
in
push
stos
mov
or
cmp
std
ffreep
fcomp
xor
xchg
icebp
mov
push
sar
or
fmulp
dec
jne
call
xchg
xchg
sbb
mov
or
mov
jecxz
out
inc
xchg
xchg
push
push
jg
ret
mov
js
aam
dec
mov
push
xor
push
push
in
adc
or
adc
cmp
sbb
adc
xchg
repnz
xchg
or
call
cmp
(bad)
mov
sbb
(bad)
daa
and
mov
xchg
xchg
xlat
fucom
add
push
out
adc
adc
adc
jo
cmp
xchg
scas
xchg
(bad)
cmc
jecxz
mov
dec
and
das
shr
pop
mov
movs
fwait
int
pop
sub
inc
adc
rcr
cmp
push
arpl
add
mov
sbb
lahf
pop
jecxz
sub
sbb
mov
nop
rcr
ins
mov
movs
xchg
push
cmps
jnp
pop
xchg
jne
xchg
mov
xor
in
dec
(bad)
out
sbb
cmp
mov
pop
das
cmp
mov
lea
ja
popf
stc
stos
sti
iret
xchg
and
pop
cld
push
sete
mov
imul
test
(bad)
add
daa
out
shl
inc
xchg
mov
cmp
mov
jne
outs
xor
jge
jbe
cmps
inc
in
test
xor
(bad)
and
in
cmp
xchg
lds
xchg
inc
push
xor
stos
(bad)
xchg
jl
mov
xchg
test
loope
sub
xchg
cmc
and
xor
push
xchg
jb
or
mov
lods
mov
pop
jl
movs
jg
outs
fwait
inc
push
jne
push
and
test
xor
sub
stc
jb
xchg
pop
cmps
inc
stos
fmul
movs
in
dec
sbb
xor
cli
jg
jp
in
jo
pop
loopne
call
and
icebp
jns
inc
call
xchg
mov
mov
xchg
fcomp
cmp
(bad)
lock
xchg
stc
cmps
iret
in
xchg
call
push
or
imul
xchg
add
push
sub
fist
ins
bound
fwait
inc
scas
repnz
mov
mov
sahf
xchg
pop
mov
repnz
call
xchg
xchg
lods
nop
push
pop
mov
js
and
xor
mov
push
and
les
sub
ficom
mov
ins
scas
xchg
xchg
fcom
jle
loopne
cwde
xchg
add
adc
cmp
xchg
movs
adc
xlat
cdq
sub
scas
(bad)
xchg
mov
repz
jmp
bound
xchg
ins
dec
push
aam
out
fbld
ins
jle
xchg
cs
push
test
dec
je
or
xchg
cmp
inc
movs
into
sub
cmp
sbb
and
jbe
loope
adc
lahf
xor
ret
xchg
(bad)
not
add
cmp
jl
in
sub
aam
jmp
xchg
outs
int
cs
sbb
xchg
and
ja
outs
xchg
stos
lahf
mov
sub
nop
(bad)
and
ret
pop
les
push
sub
stos
std
sub
fldenv
test
in
repnz
lds
out
out
pop
inc
and
xchg
xchg
call
push
mov
sub
fistp
mov
inc
xchg
lods
adc
add
xchg
int3
sbb
iret
call
out
adc
adc
sti
cmp
popa
push
xchg
sub
arpl
mov
inc
cwde
xchg
xchg
cmps
ret
rol
jle
(bad)
hlt
ss
(bad)
or
adc
pop
std
push
mov
test
rcl
xchg
call
les
pop
mov
mov
and
jns
loop
enter
sub
xchg
pop
call
push
loopne
pusha
shr
or
int
in
and
jp
sti
fsubr
push
xchg
sahf
mov
jbe
adc
mov
inc
mov
fcomi
mov
xor
dec
jmp
xchg
mov
in
sbb
ret
clc
xchg
fst
mov
into
mov
xor
pop
fdivr
cmovae
xchg
sar
outs
add
xchg
imul
xor
add
jb
jmp
dec
sub
rcl
mov
cwde
mov
lds
inc
push
ret
dec
adc
jle
xchg
in
aas
ins
shr
mov
jg
das
mov
mov
inc
xchg
mov
out
cmp
aad
xchg
ins
xor
inc
mov
loope
dec
pushw
and
xchg
add
xor
in
sbb
test
dec
jecxz
xchg
push
neg
imul
or
jmp
(bad)
stos
cwde
std
fwait
add
pusha
jecxz
and
sub
mov
int
or
inc
jmp
push
adc
mov
jno
jbe
xchg
(bad)
addr16
cmovb
jge
xchg
cmp
cmp
add
and
fdiv
pop
jns
mov
pop
repz
cmp
cmps
mov
int3
push
dec
sbb
adc
cmp
shl
jp
xchg
icebp
test
ins
mov
sub
xchg
cdq
daa
xchg
xchg
dec
or
ins
or
xchg
scas
lea
cmp
repz
mov
ds
and
lock
aam
js
pushf
xor
jns
fadd
mov
pop
dec
sbb
adc
xchg
sbb
xchg
xchg
adc
add
push
sti
and
jle
xchg
sbb
push
xchg
clc
and
push
xchg
(bad)
cmps
adc
rcr
cmps
xchg
or
(bad)
cmp
mov
hlt
pop
mov
jno
xchg
push
das
or
sub
shr
iret
jae
sti
dec
sbb
xchg
jl
xchg
sub
jb
scas
jp
scas
jp
fwait
shr
mov
sbb
je
pop
xchg
lea
daa
std
gs
test
aaa
pushf
and
dec
(bad)
pop
xchg
xchg
(bad)
in
je
xchg
add
xchg
jmp
(bad)
ret
inc
aam
jg
inc
ja
push
mov
mov
xchg
movs
adc
xchg
jb
das
sbb
mov
out
ja
movs
adc
mov
push
pop
and
inc
mov
mov
aas
mov
fdiv
push
jl
mov
and
adc
fidiv
repz
imul
xlat
pop
dec
dec
mov
pusha
cmp
sbb
jmp
bound
mov
pop
xchg
mov
and
je
in
xchg
call
add
les
cdq
ret
cmps
jl
xor
pop
lock
(bad)
jns
pop
sbb
ds
xchg
push
ins
in
(bad)
and
xchg
popf
aad
cmp
shl
xchg
lods
mov
movs
xor
mov
(bad)
cmp
xchg
jo
pop
and
or
rcr
mov
jmp
stc
adc
iret
xchg
adc
or
mov
int
jmp
jb
mov
inc
mov
test
cmps
popa
sbb
xchg
xor
in
push
mov
test
bound
xchg
mov
jb
mov
in
xchg
arpl
fsubr
and
clc
dec
xchg
xchg
pop
shr
mov
sub
dec
rcl
inc
push
xor
mov
xchg
fdiv
dec
loopne
sti
xor
jo
lahf
mov
(bad)
out
es
movs
mov
sar
idiv
xchg
stos
and
ret
mov
loopne
in
js
jmp
inc
xchg
xlat
xchg
mov
dec
shl
xchg
call
or
mov
loope
jmp
inc
(bad)
mov
aad
mov
xchg
or
fmul
push
lock
adc
(bad)
xchg
les
xchg
addr16
in
and
adc
xchg
aam
aad
movs
pop
jg
nop
stos
shr
xchg
mov
les
cmp
mov
xchg
or
cmp
or
adc
xchg
mov
inc
mov
aad
pop
rol
jge
arpl
adc
rcr
mov
call
cmp
not
pop
rcl
mov
push
inc
jae
fwait
sub
in
mov
xchg
icebp
pop
push
mov
leave
cs
or
cmps
pushf
push
call
inc
jg
ins
add
and
rcr
ja
mov
push
inc
adc
das
jns
es
push
and
pop
dec
ins
xchg
hlt
repz
sbb
sahf
jo
push
(bad)
xchg
lahf
mov
fistp
xchg
in
scas
neg
dec
add
mov
xchg
fidivr
int
mov
push
jae
outs
pop
ret
aam
clc
in
icebp
or
xchg
add
cmp
es
dec
and
xchg
outs
retf
push
xor
xchg
sbb
cmp
out
jmp
pop
cmc
cmp
xchg
adc
push
leave
lock
rcr
cdq
aad
rcl
mov
not
sub
cmp
(bad)
aam
push
(bad)
xchg
hlt
cwde
mov
xchg
cmc
jge
pushf
loopne
movs
cdq
xchg
aaa
and
popa
sahf
xchg
les
jbe
xchg
or
jnp
movs
cld
push
loop
push
cmp
dec
dec
(bad)
push
scas
adc
xor
int
mov
jmp
cmp
push
sbb
push
stos
xchg
add
stos
mov
ror
xchg
or
dec
pusha
outs
je
xchg
cmp
sbb
sahf
mov
loop
push
cs
retf
aam
mov
aam
lods
lea
jo
mov
xchg
cmp
adc
jecxz
push
sbb
mov
xchg
je
pop
retf
xor
sub
xchg
stos
daa
fnstsw
fist
mov
cmp
inc
movs
cmp
repz
xchg
push
movs
fnstsw
mov
js
rcr
stos
jne
imul
xchg
add
xor
sti
(bad)
cmp
push
inc
cmp
cdq
dec
jno
mov
dec
mov
cmps
jle
cwde
xchg
(bad)
mov
xchg
mov
nop
bound
xchg
(bad)
aas
mov
js
dec
in
or
sahf
repnz
jge
xchg
and
imul
(bad)
xchg
cmp
jns
xor
cld
repnz
outs
nop
(bad)
ds
daa
inc
mov
test
pop
scas
inc
pop
out
jnp
dec
xchg
xor
sar
sub
repnz
(bad)
sub
(bad)
cmp
push
jno
retf
sub
xchg
dec
(bad)
leave
movs
jo
pop
dec
xchg
sub
sub
cmp
nop
xchg
mov
jl
mov
xchg
jbe
repnz
add
xchg
jmp
int3
jecxz
add
fwait
loop
adc
pusha
ret
es
call
ror
mov
xchg
jb
xor
mov
and
push
push
stos
fs
xchg
xchg
fstp
retf
cld
xchg
pop
rcr
dec
int
push
cmp
(bad)
stos
xchg
repz
push
push
xlat
adc
xchg
std
leave
sub
aam
add
sbb
fs
scas
outs
sbb
loope
fist
outs
mov
xchg
stos
jbe
in
add
movs
xchg
pop
dec
cs
ret
jl
mov
jnp
fcmovnb
iret
nop
and
mov
inc
xchg
js
rol
or
ja
cmc
xchg
pop
xor
xchg
xchg
outs
std
mov
cld
cmp
cmp
xor
fsubr
adc
xchg
ss
in
pop
xchg
pop
adc
rcl
jmp
pusha
push
fwait
xchg
cmc
xchg
ja
mov
int3
adc
(bad)
fisttp
jns
test
mov
sbb
xchg
inc
inc
cli
data16
jle
jecxz
push
ins
jno
movs
fwait
cmp
xchg
inc
jae
xlat
shr
jl
mov
xchg
fld
daa
and
fdivr
fdiv
pop
iret
xchg
loopne
push
aad
movs
shl
xor
and
rcl
adc
push
jp
mov
mov
adc
mov
inc
pusha
sbb
retf
and
hlt
cmp
clc
xchg
retf
pop
cmp
mov
pushf
push
xchg
dec
sub
aad
imul
push
xchg
xlat
je
jns
pushf
cs
mov
fst
mov
hlt
mov
xchg
div
pop
repnz
fidivr
je
loop
js
xchg
xchg
push
es
addr16
data16
add
daa
jnp
nop
lods
xchg
cmp
cmps
xchg
nop
inc
xor
adc
stos
shl
push
xchg
std
fild
jnp
jo
aas
xchg
inc
jmp
jns
int3
leave
in
adc
push
mov
xchg
mov
std
push
cdq
int3
sub
push
fcomp
push
sbb
ins
cmp
inc
inc
xchg
out
xchg
pop
sti
popf
dec
adc
jle
xchg
push
retf
pop
bound
pushf
xchg
push
ds
repz
fadd
or
dec
loope
iret
jno
xchg
cmp
sar
pop
push
adc
jae
dec
dec
mov
std
push
out
adc
xchg
sbb
jae
xchg
dec
mov
push
aas
or
jb
mov
xchg
dec
retf
cmp
cmp
outs
xor
(bad)
or
xchg
xor
mov
pop
icebp
iret
adc
jl
push
and
lahf
add
pusha
pop
pop
xchg
daa
xchg
repz
mov
xchg
das
push
xchg
arpl
xchg
inc
out
ss
pop
mov
xchg
sbb
jb
pop
xchg
push
in
sbb
cmps
adc
lods
cmps
or
sub
push
mov
pop
add
xchg
mov
ins
loope
xchg
cli
push
mov
mov
xchg
or
xchg
inc
inc
xchg
jmp
push
(bad)
sub
stos
or
jl
int3
jns
mul
adc
ins
pop
mov
and
loope
push
imul
pop
cmps
cmp
ds
jnp
test
jl
test
inc
cs
scas
sbb
xor
(bad)
fdivr
xchg
stc
in
daa
mov
push
pop
int
outs
xchg
out
lea
icebp
inc
push
repz
add
xor
je
sbb
mov
sar
xchg
add
xchg
lds
xchg
xchg
arpl
cmp
mov
out
jnp
(bad)
jge
jmp
adc
cmps
xchg
adc
pop
imul
and
fisubr
mov
xor
cmp
in
sub
and
je
sbb
mov
rcl
mov
sub
mov
xchg
push
sub
test
sub
shl
mov
aas
mov
(bad)
jg
fcom
inc
sub
push
mov
xchg
pusha
bound
sub
sti
sbb
or
ret
addr16
aas
lods
fistp
into
sbb
inc
mov
xchg
cmc
and
xchg
out
xchg
inc
hlt
movs
std
int
sub
pop
jmp
cmps
add
or
aad
xchg
jmp
pop
adc
pop
test
(bad)
fst
pop
ja
and
jl
jmp
sbb
push
xchg
cmp
mov
and
dec
cmp
or
push
rcl
pop
mov
adc
repz
fld
sbb
add
mov
jg
mov
(bad)
pop
loop
inc
mov
test
adc
sub
push
dec
clc
out
shl
xchg
cmc
lea
call
aas
ds
mov
and
ins
xchg
imul
xchg
retf
dec
or
mov
inc
xor
sub
jp
xchg
dec
pop
cmp
nop
jg
aas
fldcw
pusha
int
mov
loop
pop
and
mov
pop
sti
xchg
add
jle
test
xchg
out
popf
gs
jecxz
jb
xchg
mov
int
push
cmps
cmp
push
arpl
jbe
not
jmp
sbb
bound
mov
ds
xchg
aaa
jne
fnstcw
mov
movs
sti
xchg
sub
fs
int3
xchg
inc
push
mov
mov
adc
mov
mov
push
mov
jae
mov
loope
jecxz
cmp
call
mov
in
sub
cmp
int
fwait
lahf
mov
add
mov
ror
lds
sbb
std
mov
xchg
jle
aaa
xchg
fst
addr16
xchg
mov
cmp
ret
jmp
sbb
lea
mov
mov
xor
xchg
mov
daa
pop
repnz
iret
mov
rol
unpcklps
fisub
jae
push
xchg
fwait
or
cmps
xchg
lock
(bad)
gs
add
cmp
cmps
jae
pop
mov
(bad)
and
rol
idiv
add
in
mov
jmp
sbb
xchg
mov
mov
std
xchg
mov
ja
add
sbb
inc
jle
sub
xchg
test
push
push
mov
mov
mov
cmp
adc
lds
push
or
xchg
push
fsubr
xor
bound
cmp
push
ror
jl
mov
mov
xchg
popf
aas
push
stos
xor
pop
cmps
fcom
cmp
mov
adc
mov
fisttp
lahf
dec
xchg
pushf
jns
dec
xlat
inc
repnz
js
ret
inc
xchg
xchg
iret
bound
jp
addr16
ret
xchg
cli
iret
cmp
sete
jne
out
into
xlat
pop
iret
xchg
inc
outs
retf
cmps
(bad)
pop
fdivp
inc
test
outs
push
xchg
bound
das
jl
test
xchg
push
dec
push
and
jbe
push
cli
push
in
sub
adc
in
jae
jmp
push
adc
jbe
xchg
cmp
xor
and
or
xchg
xor
push
test
test
aas
fadd
mov
xchg
sbb
mov
cmp
cdq
xchg
jnp
pop
xchg
jne
and
xchg
mov
mov
xchg
repz
xchg
xchg
push
inc
dec
js
das
inc
loope
pusha
xchg
lods
sub
aad
shr
xchg
xchg
jbe
(bad)
pop
sbb
push
pop
mov
xchg
cmp
hlt
pop
retf
nop
add
xor
or
xchg
push
sbb
mov
xor
inc
xchg
add
adc
mov
fwait
pop
sbb
icebp
pop
sub
outs
push
xor
dec
or
xchg
dec
mov
lods
xchg
inc
add
je
pop
xor
test
add
and
shr
sahf
jno
jne
push
sub
nop
test
add
mov
in
push
pop
xchg
push
ds
xchg
int3
lea
loop
sub
loope
xor
dec
push
xchg
pop
jb
cmp
sub
hlt
mov
fwait
inc
cmps
les
in
mov
xlat
stc
xchg
lods
cmp
and
inc
mov
jl
xchg
cmp
pop
mov
xchg
cwde
sti
jnp
mov
mov
shl
rol
lds
sbb
xchg
int3
rol
fidivr
jmp
lds
jge
xchg
pop
mov
hlt
add
into
jno
xchg
mov
jb
mov
mov
call
cmc
pop
mov
xchg
ficom
adc
inc
pop
clc
pop
xchg
fucom
mov
adc
mov
mov
push
daa
sbb
jle
inc
lds
(bad)
aad
jne
push
aas
xchg
fcomip
or
xchg
mov
cwde
dec
(bad)
xchg
cdq
fbstp
mov
adc
cdq
mov
push
mov
dec
sar
mov
adc
cmps
and
xchg
sar
or
imul
jbe
adc
clc
jp
pop
or
jo
mov
dec
scas
cmp
nop
push
mov
popa
mov
adc
les
inc
xchg
dec
sbb
cmps
mov
add
les
xor
ja
xchg
lock
ja
imul
sub
cmps
js
xchg
dec
test
fsub
aam
ds
cmps
xchg
icebp
fidiv
mov
pop
not
das
mov
xchg
mul
shl
xor
adc
pop
fwait
push
pop
jmp
push
push
out
dec
hlt
xchg
xlat
aam
sbb
xchg
mov
dec
mov
ret
jo
jbe
xchg
jecxz
sbb
arpl
xchg
cmps
xchg
mov
xor
jne
pop
ret
in
xchg
mov
pop
cwde
xchg
jge
push
ds
aam
movs
mov
div
mov
fwait
scas
dec
xchg
or
repz
out
xor
and
xchg
out
aad
dec
shr
arpl
jmp
fsub
shl
fild
dec
enter
pop
pop
push
leave
xlat
or
xor
and
int3
hlt
fidivr
cdq
xchg
push
sti
adc
xchg
add
mov
jl
pop
pmulhuw
outs
mov
hlt
cmps
std
lods
or
xchg
in
shl
rol
fwait
and
bound
(bad)
pushf
xchg
mov
mov
push
scas
fcomp
xchg
push
xchg
int3
jns
test
mov
dec
and
adc
sahf
pop
add
out
xchg
shl
aas
and
mov
cmp
fisub
xchg
inc
pop
mov
mov
leave
dec
retf
push
mov
xchg
add
xor
cmp
repz
aam
test
sbb
mov
outs
(bad)
xchg
rcl
clc
imul
movs
mov
hlt
sbb
popf
(bad)
fwait
dec
push
shr
daa
mov
pop
xchg
retf
cs
aas
adc
cmps
nop
ss
call
in
sub
icebp
popa
ficomp
sbb
mov
sbb
jge
(bad)
lods
mov
mov
test
xchg
pop
cmps
ffree
iret
les
imul
enter
adc
xor
stos
mov
xor
je
xchg
out
(bad)
dec
and
dec
out
adc
push
sub
or
stos
lahf
fcom
setns
bnd
cmc
popf
rcl
mov
sub
xchg
shl
bnd
jns
std
mov
inc
das
xchg
jecxz
sti
push
or
setne
in
xchg
xchg
call
add
mov
xchg
sub
lea
iret
add
dec
xchg
shr
popf
inc
xchg
and
mov
xchg
jmp
xchg
clc
inc
out
fs
cmp
jl
adc
retf
cli
xchg
push
les
xchg
dec
xchg
add
xchg
mov
mov
xlat
inc
aaa
pop
xchg
dec
(bad)
aad
add
std
sbb
inc
pop
adc
xchg
enter
push
faddp
adc
xchg
add
cld
sub
pusha
ror
xchg
mov
retf
add
xchg
jmp
das
loop
mov
lods
lds
mov
je
sbb
rol
xchg
(bad)
jle
mov
std
ret
sub
stos
xor
xchg
cmp
ficomp
div
cli
icebp
ss
mov
(bad)
hlt
inc
scas
jge
jb
dec
std
cmps
xchg
pusha
mov
imul
xchg
xchg
inc
fidivr
pop
add
jnp
call
and
fst
lea
adc
mul
out
or
icebp
xchg
xchg
fnstenv
xor
mov
pop
fs
nop
sbb
xchg
mov
mov
xchg
mov
es
mov
aaa
xchg
dec
sub
rcr
pop
mov
push
lds
inc
xchg
mov
mov
jno
push
and
xchg
popa
add
repnz
(bad)
sti
mov
xchg
sub
popa
lock
sahf
and
inc
jmp
fnsave
test
sbb
pop
int
jnp
xchg
mov
inc
repz
push
pop
adc
xchg
mov
(bad)
inc
jmp
adc
and
sub
pop
xchg
adc
popa
shl
mov
dec
mov
sbb
push
pop
xchg
mov
or
xchg
std
mov
sub
or
mov
(bad)
cmc
fwait
sub
dec
mov
das
cld
push
(bad)
adc
daa
mov
and
das
xchg
inc
xchg
fld
push
cmp
(bad)
add
mov
xchg
mov
test
or
cdq
addr16
ss
in
into
add
lods
xchg
jnp
sbb
call
lahf
pop
popa
jo
xchg
and
loopne
jmp
into
in
add
cld
xor
xchg
das
mov
mov
xchg
cmp
retf
add
sbb
xchg
add
mov
mov
cmp
adc
add
pop
and
mov
rol
sbb
xlat
(bad)
mov
jle
daa
dec
add
and
xchg
xchg
pop
popa
dec
aad
pop
fs
shl
fwait
xor
mov
push
sub
xor
push
xor
shr
or
test
adc
cs
pop
idiv
lods
jmp
mov
xlat
add
xchg
sti
(bad)
adc
jns
add
xor
shl
in
pop
add
xchg
jmp
inc
lods
jae
scas
xchg
mov
cld
pop
push
mov
cwde
mov
fcom
xchg
jge
xchg
popf
dec
(bad)
jo
jne
movs
mov
push
and
xchg
in
imul
add
xchg
into
in
jmp
es
les
adc
mov
sti
mov
fst
out
or
xchg
mov
ret
je
sub
cmp
or
hlt
(bad)
std
cmp
fwait
jmp
and
rcl
pop
xchg
or
push
rol
jl
and
in
jmp
push
bndldx
mov
pop
call
xor
adc
push
xchg
mov
(bad)
mov
xor
sti
and
sahf
mov
inc
sbb
mov
lods
inc
aam
sub
and
jle
push
dec
out
lock
xchg
ins
jb
cld
setae
pop
sbb
in
xchg
pop
ja
cmp
jmp
add
xchg
loopne
test
lods
clc
sub
lea
jmp
(bad)
(bad)
cdq
int3
mov
mov
inc
and
push
int
fist
pop
fwait
out
xchg
and
add
fs
add
int3
lods
fwait
je
push
push
sbb
or
jp
fwait
jb
out
loopne
movs
sbb
shr
pop
xchg
movs
lds
sub
shr
xchg
jne
and
clc
sub
loope
popf
mov
jmp
fwait
add
push
hlt
aam
mov
(bad)
stos
xchg
lock
jle
xlat
ins
ret
in
fmul
xchg
inc
mov
ss
adc
repz
pusha
inc
ins
es
fwait
jmp
shl
fs
add
jp
xor
xchg
lods
movs
xor
xchg
ja
call
loop
xchg
add
mov
xchg
dec
mov
sbb
stc
xchg
cmps
pop
mov
dec
xchg
rol
cmp
jecxz
mov
fnstcw
mov
hlt
adc
and
mov
movs
xchg
popf
loopne
jne
mov
mov
push
push
xor
ja
das
add
dec
pop
ins
xor
dec
mov
stos
xchg
mov
jmp
pop
out
push
pop
xchg
inc
xchg
jecxz
cwde
icebp
mov
arpl
pop
sbb
mov
hlt
xchg
jmp
arpl
pushf
icebp
jnp
js
mov
cmp
cmps
dec
cmp
add
je
jmp
push
inc
ins
pop
cmp
ret
push
sbb
push
add
daa
ins
mov
popa
fcom
pop
xchg
push
xor
ret
add
out
xor
dec
mov
push
scas
jbe
xor
test
xor
fwait
pop
sub
mov
jge
psrld
pop
out
xchg
cmp
xor
rcl
(bad)
xchg
xchg
cmc
hlt
out
cmp
adc
lea
aam
inc
mov
pop
mov
in
pop
xchg
(bad)
cmp
mov
inc
rcl
cs
fs
cmovbe
test
push
mov
jecxz
dec
sub
into
jbe
xchg
in
and
sbb
loope
stos
stc
pop
xchg
out
ins
push
dec
dec
jo
adc
fcom
(bad)
inc
call
in
xor
cmc
out
out
xor
movs
adc
mov
mov
imul
loope
xor
call
and
cdq
iret
and
out
push
leave
jl
xchg
mov
xlat
bound
jge
repnz
dec
xchg
call
sbb
cmps
dec
shl
rcr
add
push
push
scas
nop
iret
imul
pushf
push
cmp
xchg
(bad)
shr
sahf
jo
xchg
xchg
pop
xchg
jge
jg
jl
xchg
frstor
xchg
call
shl
outs
cmp
cmp
int
jmp
or
ret
test
sbb
(bad)
call
adc
fnsave
and
std
inc
fst
scas
mov
out
es
in
mov
adc
inc
adc
shr
adc
xchg
mov
push
stos
lods
femms
jle
cmp
(bad)
int
adc
ins
inc
sti
mov
test
xchg
inc
in
(bad)
push
mov
shr
rcr
aad
sar
das
fst
push
fisubr
ret
je
push
jmp
mov
mov
push
mov
mov
add
cmp
mov
rcr
lds
sub
cmp
(bad)
jo
mov
hlt
pop
fimul
enter
into
push
in
xchg
fwait
inc
mov
ins
mov
sbb
enter
pop
xchg
adc
cmp
xchg
cwde
mov
mov
enter
out
addr16
ror
aam
rcl
mov
or
loop
out
add
mov
ins
ss
in
scas
lds
jle
push
xchg
xchg
jmp
pop
mov
test
mov
xor
pop
lahf
inc
mov
jl
dec
xchg
add
test
xchg
in
retf
jae
clc
push
or
xlat
mov
pop
push
xchg
dec
les
outs
call
shl
into
xchg
cmp
pop
adc
xchg
or
enter
inc
xchg
call
mov
cs
out
sbb
out
inc
lock
jae
mov
mov
lock
sti
xchg
in
pop
cmp
and
inc
shl
pop
pop
and
test
adc
aam
jns
mov
icebp
sbb
mov
fdiv
xchg
sub
and
push
jl
xor
or
sbb
adc
xchg
popa
je
sub
xchg
sub
mov
fidivr
shl
das
dec
inc
jmp
xchg
inc
test
repz
ret
(bad)
jno
in
mov
pop
rcl
xchg
push
xchg
jmp
(bad)
test
xchg
xchg
add
arpl
dec
xchg
sti
shr
ds
cmp
or
sbb
jno
dec
mov
in
mov
test
pushf
xchg
pop
mov
movs
mov
xchg
cmp
mov
jle
adc
xchg
xor
fadd
add
mov
dec
aam
mov
or
xchg
add
je
mov
into
outs
mov
stc
es
xchg
out
sub
int3
xchg
repnz
rol
popa
sete
shr
push
xor
xor
mov
pop
or
je
and
or
sti
cmp
xchg
and
call
mov
pushf
mov
xor
sub
xchg
test
cdq
cmp
icebp
cmp
sub
mov
cmps
out
inc
or
push
mov
div
push
fwait
add
imul
xchg
stos
mov
jl
xor
and
xchg
push
pop
mov
fst
sbb
call
dec
xchg
pcmpgtd
or
jle
test
or
xchg
push
cld
test
rcr
clc
sub
or
pop
loopne
add
push
test
mov
out
cld
xchg
shl
inc
xchg
mov
mov
cmp
imul
lock
dec
lea
cwde
jo
fs
cmp
outs
fisttp
mov
es
call
sbb
cmc
adc
cmp
jecxz
dec
in
stos
fs
xchg
adc
xchg
mov
sub
sbb
push
je
xchg
aad
retf
mov
(bad)
ss
mov
mov
dec
lahf
jo
dec
nop
jmp
data16
jg
loopne
and
adc
test
adc
jg
rcl
add
outs
sub
and
push
xchg
pop
jmp
(bad)
pop
xchg
fld
dec
inc
and
xor
xchg
nop
or
mov
shl
call
mov
sub
jmp
and
xchg
push
or
dec
mov
aam
mov
adc
in
or
clc
test
push
add
pop
je
xor
inc
adc
movs
push
push
rol
mov
jns
mov
push
out
inc
(bad)
shr
cdq
pop
nop
sub
and
lds
lods
xchg
push
scas
popa
scas
and
aam
push
cmps
repz
sbb
mov
das
test
xchg
add
leave
adc
xchg
xor
dec
ret
into
xchg
mov
leave
sub
std
movs
gs
cdq
push
mov
mov
sub
loope
js
jmp
(bad)
rcl
jnp
pop
mov
cs
popf
xchg
pop
adc
and
pop
clc
xchg
leave
inc
or
push
popf
mov
xchg
lea
inc
add
sub
retf
ror
cmp
pop
pop
cmps
mov
pusha
out
pop
and
mov
mov
orps
pop
push
mov
mov
mov
dec
xor
push
les
std
int3
xchg
mov
lds
or
(bad)
xchg
xchg
mov
pop
jno
addr16
cmp
mov
xor
jo
(bad)
push
mov
xchg
mov
gs
cdq
xchg
xchg
xchg
pop
movs
jo
test
ins
xchg
cld
idiv
lods
sub
aad
fwait
stc
pop
push
aaa
les
xchg
mov
ror
stc
jp
jge
movups
pop
loop
xchg
adc
inc
out
sbb
xchg
mov
add
loop
or
test
xchg
and
outs
ins
xchg
lds
aam
retf
dec
mov
xchg
je
fwait
arpl
inc
cmp
jmp
test
in
cwde
cs
stos
inc
rol
into
xchg
lock
inc
mov
mov
aam
xchg
into
dec
int3
xchg
mov
jnp
ss
inc
cwde
jne
push
sbb
fist
push
popa
jo
enter
ins
sbb
hlt
add
xchg
push
sub
cdq
popa
add
and
and
mov
and
xchg
lahf
sub
xchg
dec
sub
xchg
cmp
adc
sbb
fdiv
xchg
jg
cmp
pushf
sub
xchg
pop
adc
enter
mov
adc
xchg
int
push
clc
dec
stc
add
xchg
adc
mul
shl
xor
pop
xchg
daa
popf
xor
ins
xchg
sub
sbb
fdiv
dec
mov
imul
call
shl
and
cmp
pop
mov
mov
xlat
cs
jb
xchg
lods
cmps
cwde
pop
jns
push
cvttps2pi
arpl
add
scas
xchg
pop
xlat
mov
push
xchg
in
fcom
out
les
jb
loop
xchg
xlat
call
mov
mov
nop
xor
xchg
(bad)
xor
xchg
cdq
sub
mov
xchg
stos
or
dec
pop
xchg
and
ds
jmp
mov
mov
cmps
fsub
test
mov
sub
aam
(bad)
push
lock
(bad)
fild
adc
popa
inc
sti
dec
fistp
jmp
fwait
mov
aad
sbb
adc
sbb
sbb
popa
fcom
push
fst
cdq
jecxz
aaa
xchg
push
cld
xor
stos
inc
std
rcl
int3
mov
neg
daa
and
lods
pop
aad
push
js
lock
xor
jns
call
imul
jp
add
or
test
pusha
jno
or
adc
xor
movs
fbld
and
outs
xchg
push
sub
pushf
scas
fcom
neg
enter
push
or
xchg
into
outs
das
pop
add
sar
(bad)
pop
pop
lock
adc
inc
dec
and
sub
sub
(bad)
into
adc
mov
pop
(bad)
xchg
out
adc
sub
mov
push
jle
xchg
js
in
in
movs
and
adc
(bad)
stc
scas
inc
into
xchg
xchg
sub
nop
out
xchg
add
mov
or
push
mov
fcom
jge
mov
jne
outs
and
push
popf
ja
cwde
add
and
fwait
ins
test
aad
xchg
add
push
out
inc
xchg
and
push
xor
xchg
addr16
jmp
daa
clc
jl
mov
mov
mov
or
(bad)
int
cs
aam
dec
imul
jmp
inc
mov
fsub
js
ror
sbb
je
scas
dec
jle
or
jge
call
push
jo
or
mov
fwait
ret
jg
fs
in
mov
(bad)
cmp
sub
sbb
xchg
int
jl
and
retf
mov
sub
call
rcr
sbb
nop
pop
jmp
cdq
neg
mov
or
jne
aas
je
jp
xchg
std
cwde
xchg
idiv
xchg
imul
jmp
lds
repnz
mov
mov
and
jns
test
or
(bad)
mov
fisub
test
popf
sbb
cmp
(bad)
bound
xchg
jmp
add
das
xchg
arpl
dec
and
or
stos
ret
xor
xchg
in
scas
push
xor
jnp
pushf
repnz
xor
ins
and
push
pop
fnstsw
xchg
les
pop
retf
ins
mov
sub
in
or
add
lahf
lods
inc
rcl
bound
add
test
xchg
scas
int
cmp
adc
lods
push
test
lods
xor
and
stc
inc
scas
mov
movs
cdq
xchg
pop
aaa
shl
iret
mov
inc
xchg
jae
in
retf
neg
outs
aaa
and
dec
fild
in
xchg
cmp
aas
repz
sbb
push
mov
mov
in
loop
xchg
xchg
ja
bound
std
xchg
aaa
jno
inc
mov
mov
(bad)
push
(bad)
adc
or
cmp
push
adc
jo
sahf
xchg
push
inc
xor
imul
xchg
fbstp
inc
cmp
test
jae
je
cmp
cwde
sub
sbb
lahf
stc
sbb
ficomp
xchg
shl
fwait
out
sbb
inc
pop
outs
cmp
into
or
xchg
sub
dec
xchg
mov
jne
xchg
pop
xchg
mov
lahf
cmp
and
xchg
mov
ins
adc
sbb
into
jmp
xchg
loope
jns
lds
dec
xchg
sar
jg
clc
add
xor
bound
inc
and
shl
adc
aaa
mov
test
std
push
xchg
adc
and
xchg
sahf
(bad)
or
jl
push
xor
stos
push
pop
xlat
jb
dec
dec
mov
call
cld
xchg
mov
add
push
rcr
mov
xchg
cmp
push
addr16
stos
fisub
lock
shl
adc
mov
inc
hlt
in
xchg
adc
stos
inc
push
mov
mov
xchg
fcom
sub
xchg
retf
sub
mov
xor
pop
inc
push
sbb
lea
mov
gs
clc
jae
dec
icebp
push
mov
push
js
jne
inc
add
xlat
movs
sbb
pop
ret
mov
imul
adc
es
xchg
xchg
aas
sbb
xor
pop
test
sub
pop
mov
jmp
and
int3
xlat
dec
mov
xchg
js
imul
xchg
xchg
lds
lods
test
add
push
in
leave
fwait
ret
dec
out
test
aaa
rcr
adc
mov
inc
jl
outs
mov
les
add
fmul
es
push
xchg
xor
xchg
ret
das
shl
shl
xchg
(bad)
nop
mov
fwait
xor
in
outs
adc
jmp
push
imul
xor
adc
or
loop
add
dec
xor
push
adc
xchg
stos
or
rol
cmps
or
pop
xchg
ins
mov
xchg
stos
xchg
repz
dec
lods
call
push
and
mov
lea
jg
(bad)
not
sti
enter
stos
adc
data16
xchg
pop
pop
xlat
outs
inc
inc
loope
fwait
mov
and
cmp
xchg
pop
dec
lock
mov
dec
mov
adc
shr
fimul
push
mov
std
and
push
cmc
jg
cwde
xchg
lds
xor
dec
or
dec
ror
cdq
out
out
shl
test
inc
xchg
sub
scas
sbb
xor
shl
sbb
mov
mov
aam
adc
inc
ret
xchg
outs
jle
jo
fld
mov
pop
in
xchg
js
(bad)
les
add
add
dec
int
pop
fs
fsub
mov
js
(bad)
push
push
pop
imul
sbb
shl
jl
sbb
test
sbb
test
jl
add
std
jl
test
xchg
pop
mov
adc
aam
aaa
mov
cmc
pop
xchg
jb
pushf
lock
push
mov
mov
jne
push
mov
xchg
cmp
ficomp
and
rcl
jne
dec
int3
mov
and
std
mov
je
pop
dec
in
jg
and
jle
xor
mov
add
inc
mov
into
inc
xchg
(bad)
jae
push
xchg
call
cmp
xchg
mov
test
xchg
adc
jb
cs
push
out
jp
icebp
rcr
loop
jnp
add
sub
loopne
adc
into
mov
mov
ss
arpl
mov
mov
xchg
addr16
inc
add
stc
mov
imul
imul
aam
adc
sti
sbb
aaa
or
(bad)
adc
and
jae
pop
mov
adc
jns
push
mov
adc
(bad)
xor
jecxz
jmp
lahf
test
cmp
lods
ja
cmp
xchg
(bad)
retf
adc
adc
popf
in
mov
jb
dec
xchg
xor
adc
popf
cdq
xchg
loop
aam
enter
pop
add
sub
push
sub
ds
pusha
adc
mov
xchg
pop
sbb
rcl
inc
stos
add
outs
idiv
les
add
hlt
repnz
dec
mov
hlt
push
mov
jb
xchg
lock
mov
cdq
xchg
mov
dec
mov
mov
js
push
push
push
or
xchg
sub
gs
mov
das
in
xor
mov
cwde
xor
and
test
sti
xchg
repz
aas
pop
mov
xor
repnz
jmp
xchg
mov
sbb
xor
repnz
dec
adc
imul
xchg
pop
mov
fmulp
and
xchg
push
ins
add
xchg
cmp
stc
enter
inc
cdq
or
jp
jne
mov
fcomp
fucom
mov
retf
sub
pusha
mov
cmp
mov
adc
test
int3
xchg
mov
adc
jle
pop
jecxz
ret
and
dec
inc
or
leave
mov
inc
sub
retf
xchg
icebp
das
fdivr
mov
cmp
mov
pop
(bad)
fidiv
cmps
xor
shl
(bad)
jmp
lds
adc
add
repz
ds
outs
add
add
cmp
hlt
xchg
dec
out
pop
push
test
pop
sub
jle
in
xchg
not
test
mov
adc
cmps
adc
daa
xchg
add
enter
scas
mov
jp
xchg
mov
call
ds
fs
push
addr16
fwait
pop
call
mov
xchg
mov
scas
jno
movs
fcom
mov
out
xchg
(bad)
xchg
cmp
jp
outs
lahf
xchg
mov
adc
addr16
xor
jl
jno
jle
ja
lea
and
ds
lods
out
daa
fcom
aam
mov
or
(bad)
sbb
jno
or
xor
add
fild
cwde
fsub
adc
cwde
adc
outs
pop
inc
aam
popf
sub
xchg
add
adc
sbb
test
movs
jmp
xchg
neg
add
sbb
push
xchg
lahf
in
mov
xor
xchg
adc
fadd
dec
push
cld
xchg
pop
inc
adc
xor
pop
push
add
jecxz
ins
out
idiv
inc
stos
(bad)
in
call
pop
div
test
(bad)
xchg
jo
repnz
popa
mov
dec
shl
push
push
cmp
fwait
scas
aad
pop
cmp
xchg
lock
dec
ret
adc
xchg
jmp
arpl
mov
jo
xchg
out
int
lahf
fistp
pop
jae
mov
xchg
pop
cmp
aam
int
xchg
cld
test
inc
js
mov
hlt
add
call
call
jp
test
jg
inc
mov
retf
ds
jno
ret
sti
adc
cld
xor
mov
(bad)
xchg
cmp
xchg
or
cwde
push
add
ja
and
fwait
or
xchg
mov
cld
push
push
stos
xor
sbb
(bad)
xchg
fwait
mov
xor
add
les
(bad)
popa
dec
fwait
mov
call
xchg
or
loop
imul
in
jno
xlat
xchg
adc
push
jb
fxtract
rol
call
mov
icebp
adc
mov
sub
jno
jp
mov
xchg
(bad)
daa
inc
xchg
xchg
lods
aam
(bad)
jnp
mov
call
mov
pop
push
jnp
mov
stc
mov
fld
xchg
add
mov
push
push
stos
mov
xchg
adc
ud1
xor
pop
add
cmp
mov
aam
fild
clc
sahf
hlt
jp
xchg
jbe
push
pop
or
jo
cmp
mov
push
xchg
mov
inc
jmp
pop
pop
or
stos
fistp
xchg
arpl
test
das
lea
push
xchg
adc
arpl
adc
adc
xchg
pop
ja
call
fbstp
(bad)
xchg
mov
adc
std
mov
xchg
jo
int
sbb
cli
xchg
adc
mov
or
mov
push
xlat
clc
xor
enter
je
call
rcl
bnd
fs
sbb
pop
dec
xchg
loop
shl
inc
mov
jmp
jl
xchg
shl
int
jbe
jg
xchg
ja
mov
xchg
js
xchg
ret
cdq
jmp
ror
test
adc
pusha
pop
xchg
in
add
xor
ins
cmp
push
dec
imul
push
sub
add
shr
xor
sub
push
xchg
add
push
fwait
ins
xchg
movs
jge
dec
push
out
(bad)
int
dec
mov
jmp
xlat
push
mov
movs
lods
outs
test
imul
cmp
ss
lock
push
sbb
fs
out
fwait
out
cwde
test
pop
xor
cld
add
inc
pop
cmova
js
push
mov
aam
out
es
push
cwde
frstor
popf
stos
and
xchg
into
pop
test
pop
hlt
xchg
daa
(bad)
popa
or
or
inc
xchg
push
mov
or
(bad)
not
test
pop
mov
lds
adc
mov
iret
or
mov
retf
sbb
pop
xchg
cwde
xchg
in
mov
jg
mov
repz
mov
call
jne
jae
cwde
mov
into
mov
(bad)
adc
mov
add
jp
dec
mov
in
xchg
addr16
ds
or
popa
jo
outs
sub
adc
xchg
xchg
mov
push
sbb
xchg
imul
jmp
jl
xchg
das
xchg
mov
xchg
cmp
jbe
xlat
fs
inc
push
sub
je
icebp
push
imul
aad
xchg
mov
mov
cmps
imul
mov
push
or
or
ins
cmps
and
les
std
dec
fdivr
lds
xchg
fwait
das
and
scas
mov
rcl
call
xchg
scas
lods
sbb
inc
or
mov
loop
add
xchg
jl
jge
sub
xchg
ret
jno
cmp
and
xchg
arpl
addr16
fwait
adc
mov
pop
xchg
out
mov
xchg
push
dec
pushf
push
xchg
popa
sub
push
xchg
sbb
adc
add
dec
pop
shl
lods
xchg
xchg
mov
and
(bad)
xlat
xchg
sub
arpl
or
jl
mov
out
and
iret
mov
das
push
xchg
fwait
sbb
pop
pop
shr
cmps
in
inc
xchg
or
sahf
xchg
std
shl
xchg
inc
or
stos
xchg
sbb
pop
push
jmp
or
xchg
lods
mov
push
adc
scas
pop
or
fsub
push
fwait
adc
(bad)
fist
mov
aam
jne
cmps
fcom
mov
xchg
dec
inc
loop
xor
popf
jg
lods
rcl
and
not
mov
and
fstp
retf
push
xchg
cmp
ror
pop
jno
xchg
jae
ret
pop
adc
lock
xchg
test
mov
dec
dec
add
xchg
ja
xchg
sbb
xchg
aaa
pusha
(bad)
xor
sbb
inc
leave
pop
(bad)
mov
pop
cdq
and
dec
outs
rcr
xchg
inc
sar
(bad)
or
push
cmp
jle
je
and
fild
jmp
cmps
in
dec
pop
lock
rcr
cmp
add
xchg
hlt
pop
jle
mov
out
shl
ins
sahf
mov
dec
pusha
pop
or
add
mov
mov
adc
xchg
push
cli
sbb
test
dec
push
loop
push
xor
mov
dec
xchg
out
push
div
xchg
xlat
xchg
in
push
stc
push
fld
sub
xchg
je
das
test
jecxz
cmps
mov
dec
or
or
dec
sar
xor
popf
sar
dec
test
xchg
test
fild
push
or
xchg
push
inc
and
ret
ret
xchg
xor
jp
arpl
(bad)
rcl
dec
(bad)
pop
mov
xchg
jns
std
push
or
loope
push
addr16
iret
pop
jmp
cdq
sahf
pop
pop
gs
add
nop
xchg
dec
in
jmp
and
std
xor
daa
in
xchg
adc
loope
cs
fimul
dec
pop
mov
bound
fdiv
out
sub
mov
push
mov
inc
out
add
hlt
sub
dec
jno
in
stc
hlt
hlt
lock
xchg
push
jnp
gs
imul
dec
cld
xchg
inc
mov
sbb
xchg
and
outs
psrlw
xchg
jl
sub
xchg
popa
retf
jmp
fist
sub
ret
adc
xchg
sbb
or
xchg
xchg
fdiv
mov
add
ror
fwait
pushf
jns
lds
push
loop
hlt
mov
mov
adc
and
pop
sbb
out
jo
retf
pop
dec
push
lods
mov
ds
sti
clc
sahf
mov
aam
les
and
dec
test
(bad)
xor
fst
mov
icebp
fld
xchg
outs
mov
in
xchg
hlt
movs
xor
fcmovb
and
fwait
cmp
lods
adc
movs
pop
adc
fisttp
pop
aad
jb
add
mov
fwait
lods
jmp
cs
imul
push
and
pop
sub
adc
push
fs
push
mov
or
out
mov
in
ds
mov
loop
les
and
sbb
lea
dec
out
in
xchg
cmc
fwait
stos
push
xchg
and
(bad)
mov
xchg
stos
imul
cmps
call
xchg
adc
mov
xchg
ds
(bad)
int3
xchg
push
sbb
addr16
xchg
xchg
daa
fisubr
inc
adc
stos
xchg
outs
cmp
movs
mov
in
out
or
data16
xor
mov
cmp
mov
aad
or
cdq
and
mov
stc
mov
je
call
dec
sbb
cs
adc
xchg
sub
or
aaa
mov
ds
xchg
inc
loopne
sub
pop
or
ins
xchg
push
dec
dec
dec
mov
aam
das
pushf
and
test
in
cmp
adc
pop
cmp
cmp
aad
outs
js
cmp
popf
push
mov
test
popa
xchg
xchg
pop
loope
and
add
or
div
out
mov
(bad)
xchg
pushf
xchg
repnz
cdq
pop
xor
jg
enter
mov
push
das
loop
cmp
adc
xchg
or
int3
stos
xchg
aad
clc
push
outs
mov
(bad)
cmps
jg
mov
xchg
inc
mov
xchg
aam
xor
pop
rcr
pop
jno
dec
mov
pop
xchg
into
add
stos
mov
je
sbb
aaa
xchg
repnz
and
test
nop
xor
dec
xchg
stc
and
int3
and
sub
in
jb
daa
jnp
clc
ins
lahf
or
popf
pop
and
add
call
dec
xchg
sub
std
jb
int3
int
cld
xchg
mov
push
retf
(bad)
out
js
ins
mov
jns
mov
cld
mov
push
dec
xchg
js
scas
xchg
rcl
mov
mov
dec
push
push
cmc
push
mov
pop
les
fsubr
mov
and
mov
or
ret
xchg
add
call
in
daa
mov
mov
repnz
xor
jle
add
xchg
pop
lahf
mov
push
xchg
mov
add
mov
mov
inc
jmp
push
mov
mov
xchg
cmp
ficom
jmp
int3
jecxz
xchg
jae
cmp
call
(bad)
xor
dec
xchg
sbb
inc
cs
cmps
or
scas
fistp
jl
and
enter
pop
xchg
jecxz
inc
cdq
mov
dec
out
mov
and
jg
mov
ds
les
xchg
scas
mov
out
js
outs
lahf
pop
push
sbb
pop
aad
leave
ja
xor
sti
mov
test
mov
rcl
mov
push
cdq
jge
jb
je
punpckldq
iret
aad
fwait
mov
cmps
in
mov
mov
pop
lods
jne
outs
cli
push
adc
mov
(bad)
ja
aas
fwait
retf
mov
pop
push
dec
ds
daa
xchg
sbb
push
aam
retf
pop
jl
xchg
test
in
lahf
cmp
xchg
shl
ss
xchg
jns
lods
push
sbb
xlat
sub
push
mov
into
int
pop
cwde
or
cmp
sub
adc
cmp
xor
and
in
cdq
je
mov
xchg
jle
jnp
iret
lods
jp
xchg
imul
lea
ins
xchg
das
cli
mov
hlt
ret
xchg
or
sub
pop
adc
push
ret
out
enter
loopne
xchg
mov
mov
mov
cmovl
rcr
test
pushf
pusha
ss
inc
(bad)
mov
sub
call
call
xor
jmp
push
mov
fimul
mov
inc
fwait
xchg
mov
jge
mov
or
imul
retf
(bad)
mov
lods
dec
rcl
cmp
xchg
dec
sub
cmovne
lock
clc
fwait
adc
sbb
adc
test
add
cdq
call
adc
dec
(bad)
mov
and
add
or
mov
les
mov
arpl
lods
xchg
cmp
adc
push
push
or
xchg
emms
pop
fcomp
xor
pop
inc
call
inc
pop
out
in
pop
retf
lods
lock
mov
xor
repz
cmp
push
ror
xchg
dec
mov
(bad)
mov
adc
jle
jnp
inc
popf
adc
stos
mov
lea
sbb
out
xor
sub
dec
pusha
test
imul
in
repz
pop
cmp
cdq
push
jbe
bound
xchg
mov
lods
sbb
xchg
loope
aas
leave
sub
and
loopne
lods
bound
xor
imul
fwait
pop
and
or
xor
jp
jo
clc
xchg
jns
inc
mov
fwait
mov
inc
enter
retf
xchg
adc
(bad)
dec
add
and
sub
sub
fwait
out
mov
fwait
ja
xlat
cmps
fcomp
int
adc
fpatan
push
dec
(bad)
xchg
pop
push
sbb
xor
jno
aas
xchg
fild
dec
pop
(bad)
stos
js
xchg
retf
cmp
rcl
lahf
xchg
jo
sub
xchg
lods
inc
mov
(bad)
sbb
daa
out
xchg
ins
cmps
cli
mov
or
mov
gs
nop
xchg
nop
and
les
xchg
aam
mov
int3
mov
xor
pop
(bad)
pop
xchg
xchg
mov
pop
gs
lock
cmc
xchg
jns
mov
xchg
mov
cmp
xchg
push
cld
popa
test
jl
xchg
cli
add
lods
xchg
arpl
ins
mov
cmp
xor
sar
into
and
cli
stos
push
movs
pop
adc
xchg
rcl
xchg
sbb
imul
int
add
mov
inc
jbe
mov
push
jno
and
mov
es
push
and
xchg
cs
fs
rcr
ret
das
gs
xchg
mov
cwde
pusha
lods
xchg
pop
stos
push
fwait
lods
fst
out
aad
and
inc
(bad)
pop
mov
hlt
call
retf
mov
cmp
pop
(bad)
shr
add
sub
pushf
push
add
add
in
pop
push
mov
pop
ins
mov
pop
push
mov
xchg
bound
fwait
test
xchg
mov
(bad)
in
pop
add
jecxz
sub
and
neg
sti
xchg
add
cdq
xchg
xchg
add
dec
xor
inc
int
push
pop
mov
cmp
out
(bad)
push
jmp
jp
sbb
outs
or
popf
jle
push
jbe
mov
xchg
cmp
cmc
push
xchg
and
sti
(bad)
dec
xchg
lds
pushf
add
push
inc
repnz
mov
push
mov
ja
cmp
sbb
enter
jmp
je
mov
(bad)
mov
xchg
and
adc
xchg
aad
pop
sbb
cmps
add
or
nop
test
mov
sahf
sbb
push
lahf
xor
(bad)
push
or
mov
lahf
jbe
cld
or
out
ins
push
fwait
push
dec
xchg
test
jmp
mov
sbb
mov
inc
add
jb
mov
lahf
outs
clc
jae
jne
test
ds
and
std
cmp
xchg
jmp
call
add
imul
(bad)
movs
mov
mov
aas
jl
icebp
out
ror
or
cli
xchg
mov
iret
ds
inc
mov
adc
xchg
retf
pop
push
jl
mov
mov
xchg
dec
mov
(bad)
outs
xchg
test
test
in
adc
outs
icebp
in
dec
and
xchg
loopne
inc
leave
arpl
mov
mov
ldmxcsr
push
(bad)
lahf
dec
aam
pop
mov
mov
dec
mov
std
iret
jmp
dec
cmps
jae
add
adc
je
sub
retf
mov
xchg
push
sub
jmp
mov
movs
xlat
(bad)
mov
ss
rcr
push
enter
ror
xchg
icebp
lahf
test
xchg
mov
mov
loope
shl
xchg
xchg
jl
ss
cmps
cwde
cmp
xchg
or
nop
xor
pop
xchg
cdq
mov
arpl
je
(bad)
cmp
and
popa
lahf
xchg
jg
mov
jecxz
iret
mov
mov
mov
repnz
mov
je
fldenv
push
(bad)
cmps
int
xchg
rcl
dec
ss
mov
jge
mov
adc
pop
test
xchg
scas
(bad)
ret
or
loopne
mov
pop
aad
add
dec
fist
pop
cmp
lea
mov
xor
add
movs
shr
into
adc
xor
out
xor
xchg
inc
mov
xchg
sbb
test
je
add
push
imul
adc
out
dec
aad
imul
fcom
add
mov
or
and
outs
ror
std
push
pop
movs
add
cmp
jg
rol
bound
fs
jmp
test
loope
imul
xchg
fdiv
aaa
push
ret
sbb
out
xor
in
xchg
nop
xchg
clc
mov
(bad)
xchg
stc
mov
jp
dec
aas
jnp
xchg
std
jg
push
dec
loope
out
adc
xchg
adc
mov
and
int3
xchg
shr
inc
push
mov
add
xlat
jmp
push
scas
mov
jmp
stos
xchg
loop
cmp
jbe
add
daa
and
mov
inc
cdq
movs
xchg
xchg
mov
mov
ror
inc
inc
sar
popa
ins
popf
icebp
mov
xchg
nop
mov
adc
mov
cs
xor
stos
fldcw
xchg
fwait
repnz
inc
xor
mov
je
sub
stos
loop
xchg
aas
xchg
jmp
mov
xchg
js
mov
int3
mov
ret
xchg
ja
or
push
lods
popa
fistp
loope
jecxz
sub
sbb
push
xchg
xchg
std
cmp
cmp
xchg
nop
mov
push
or
inc
pusha
xchg
in
mov
add
inc
cdq
movs
outs
xchg
inc
in
push
les
cmp
dec
inc
ret
adc
pop
mov
xchg
cmp
in
ins
push
jns
mov
add
xor
xor
(bad)
ja
xchg
jae
and
dec
rcl
pop
or
clc
mov
popa
int3
xchg
scas
mov
xchg
push
adc
xchg
js
pusha
add
sub
inc
fwait
pop
mov
push
sbb
and
mov
dec
push
jecxz
rcr
fistp
cmc
in
test
pop
iret
inc
sub
push
push
enter
(bad)
pop
xchg
pop
cld
cmp
aad
jo
add
je
cmp
jecxz
xchg
lea
sub
hlt
xor
inc
xchg
nop
xchg
fld
dec
aad
pcmpeqb
xor
push
ret
dec
jecxz
xchg
fld
mov
stos
push
mov
pop
xor
inc
mov
bound
and
xor
js
mov
cmp
dec
and
(bad)
xlat
adc
push
sbb
scas
push
inc
leave
mov
mov
cwde
data16
daa
add
movs
lods
bound
sub
movs
and
lods
dec
mov
mov
xchg
sbb
adc
pop
add
push
aam
push
fs
in
in
leave
xor
(bad)
repz
mov
in
mov
pushf
jns
and
or
jo
inc
cwde
popa
fdivr
nop
mov
in
mov
stos
aam
inc
xchg
push
js
not
je
inc
xchg
ss
int3
xor
push
pop
xchg
and
adc
aad
inc
push
xchg
pop
dec
xchg
mov
push
fwait
mov
dec
cli
mov
and
xchg
std
fidivr
jb
or
inc
jnp
mov
mov
adc
fldcw
or
mov
and
sbb
out
or
inc
or
imul
shl
mov
in
mov
sub
aam
mov
ret
lods
xchg
cmps
fmul
xchg
stc
xchg
(bad)
call
ret
rcr
int3
or
enter
ja
xchg
iret
mov
mov
push
(bad)
les
sete
enter
ss
xchg
bnd
(bad)
fcom
loopne
inc
xchg
sbb
pop
iret
ret
mov
aad
cmp
out
xchg
mov
sahf
jge
pushf
dec
mov
and
loop
xchg
pop
sbb
out
lock
xchg
leave
or
(bad)
xchg
fwait
dec
int
inc
sbb
loope
shl
push
xchg
(bad)
adc
shl
cld
popa
xchg
mov
push
call
inc
xchg
pop
fbstp
shl
inc
cmp
sub
xchg
sar
(bad)
mov
jne
sbb
mov
call
test
(bad)
in
jle
mov
inc
xchg
into
je
xchg
ror
(bad)
mov
pop
xlat
xchg
aas
mov
add
dec
mov
jno
mov
push
ja
fdiv
(bad)
in
cmp
adc
jmp
mov
and
xor
sti
test
pushf
dec
mov
dec
push
adc
sub
and
cmc
inc
dec
xchg
arpl
pop
fcmovnb
(bad)
xchg
and
adc
add
inc
xchg
jle
xchg
cmp
push
push
mov
dec
cmps
xchg
test
push
xchg
mov
sub
leave
retf
mov
pop
mov
push
cdq
xchg
and
inc
gs
hlt
cmps
jmp
movs
push
xchg
ins
inc
xchg
seta
loopne
cmp
xchg
lods
jmp
xchg
in
mov
(bad)
or
mov
mov
out
gs
mov
mov
int3
mov
or
ja
cmp
leave
sub
mov
jecxz
test
push
adc
pop
mov
aad
or
mov
fdivp
cmps
cdq
fiadd
stos
pop
mov
jo
xor
dec
dec
dec
xchg
jo
inc
mov
xchg
sub
stos
xchg
cmps
repnz
mov
ds
rep
xchg
push
inc
pop
adc
jp
js
jb
add
test
sub
cmp
push
stc
(bad)
mov
xchg
arpl
mov
int3
shl
aad
push
xchg
(bad)
mov
leave
mov
pop
cmp
cmp
arpl
popf
lahf
and
mov
inc
cmps
and
ret
xchg
js
xor
mov
mov
sti
ficom
add
femms
int3
xchg
out
mov
adc
adc
xchg
push
idiv
mov
jle
adc
xlat
cmp
std
xchg
mov
pop
xchg
xchg
adc
cmps
fwait
pusha
add
xchg
xor
daa
imul
sub
das
pusha
mov
xchg
call
sbb
scas
mov
lds
in
clc
sbb
cmp
mov
push
cmps
xchg
repz
inc
xchg
mov
pop
shl
les
cwde
adc
xchg
xchg
(bad)
in
mov
je
repz
out
xchg
push
adc
mov
xchg
inc
pop
adc
mov
or
sub
mov
rcl
jmp
push
cld
add
outs
inc
popa
and
pop
cdq
les
pop
mov
push
mov
xor
into
int3
push
movs
in
lea
add
sbb
or
rcl
xchg
(bad)
jp
fwait
jmp
lods
icebp
xchg
adc
push
mov
xchg
ins
jno
repz
ds
cmp
mov
div
xchg
in
gs
add
jae
bts
mov
nop
push
sbb
xchg
cmp
outs
es
push
rcl
aas
jne
add
test
inc
inc
out
pop
loopne
outs
dec
pop
push
xchg
cmc
fadd
sahf
popa
arpl
or
iret
push
movs
sub
cli
int3
add
cmp
rcr
jle
fwait
xchg
ror
mov
cwde
into
cmp
xchg
loopne
adc
pop
dec
sbb
xor
adc
jecxz
jmp
stos
fwait
call
int3
lods
pop
xchg
xor
(bad)
and
(bad)
iret
je
add
pop
test
xor
mov
add
or
fwait
fwait
jnp
xchg
or
jnp
lock
outs
pop
hlt
adc
enter
push
dec
retf
add
adc
jmp
pop
xchg
xchg
mov
sub
jle
cmp
nop
lods
cmp
in
dec
ret
scas
adc
push
xchg
enter
out
lea
iret
push
sub
mov
add
fs
xor
push
fisub
mov
xchg
(bad)
pop
(bad)
xor
lea
test
repnz
jb
push
add
idiv
jne
sbb
dec
add
inc
xchg
sub
xchg
xchg
adc
popf
inc
cdq
mov
cmp
dec
ret
rcl
and
aam
loop
dec
aas
fs
xchg
pop
repnz
sub
test
out
shr
mov
hlt
cmp
xchg
mov
cmc
adc
das
mov
jmp
xchg
mov
adc
xchg
fcmovu
inc
pushf
addr16
int
dec
mov
push
xchg
test
enter
sub
push
pop
outs
push
sub
inc
inc
loope
int
iret
fprem
dec
lods
aas
sbb
fmulp
into
dec
fdiv
ss
mov
push
cmc
sub
xchg
js
and
or
xchg
push
aam
jbe
jmp
jmp
xchg
xor
(bad)
xchg
sub
xor
mov
int
and
lahf
ret
sbb
movs
jb
mov
pop
imul
mov
scas
push
xchg
push
mov
(bad)
xchg
mov
aam
imul
mov
sbb
addr16
ror
xchg
rcl
pop
add
fst
cmp
or
adc
adc
inc
mov
mov
mov
movs
inc
xchg
call
test
jl
push
arpl
daa
inc
push
push
bound
in
sar
rcl
lods
cs
dec
cmps
(bad)
push
cmps
jo
ret
xchg
mov
mov
xor
pop
in
inc
lock
cmp
pop
sub
imul
mov
mov
dec
mov
xchg
or
out
sub
or
mov
(bad)
stos
mov
lods
xor
sbb
ret
test
push
addr16
fcom
push
cdq
pop
rcl
push
adc
les
xchg
xchg
in
cld
inc
fcmove
aad
xchg
push
mov
push
xchg
jmp
or
imul
push
xchg
jg
daa
fdiv
and
inc
cmps
cwde
movs
bound
adc
mov
call
mov
pop
outs
cmp
xchg
idiv
test
sbb
scas
cmps
jg
shl
jle
xchg
pop
xlat
push
popa
add
retf
popf
xchg
jae
call
ins
xchg
jecxz
mov
or
pop
sbb
fsubr
leave
inc
mov
sti
sar
mov
fist
test
cmp
(bad)
lahf
push
lahf
rcr
cmp
adc
push
fwait
shl
xchg
xor
aad
push
pushf
dec
out
mov
add
xchg
dec
mov
xor
inc
xchg
pop
fcom
adc
sub
ja
adc
push
lea
into
icebp
scas
loop
mov
ds
sub
mov
and
in
dec
fwait
daa
or
fucomip
cwde
and
pop
clc
(bad)
jbe
imul
mov
or
out
adc
addr16
dec
cdq
sub
(bad)
push
adc
xchg
inc
dec
call
xchg
jbe
jnp
aas
dec
lahf
pop
xchg
push
mov
shl
push
mov
rcr
and
push
ins
in
xchg
or
adc
or
scas
xchg
and
and
pop
fwait
js
xlat
jl
in
xchg
sbb
div
pop
cli
or
mov
leave
inc
arpl
mov
mov
pushf
xchg
popa
or
mov
es
popf
add
xchg
jb
push
or
push
pusha
add
out
mov
sti
call
xchg
jno
popf
and
sub
in
loopne
loop
adc
ret
lds
cmps
sbb
jge
aas
arpl
lock
ss
pusha
daa
xchg
xchg
add
movs
or
es
jnp
mov
mov
pushf
lahf
(bad)
sti
adc
pop
sub
ins
shl
pop
xchg
and
xor
jp
lahf
inc
adc
xchg
xlat
adc
test
xor
scas
in
mov
out
mov
nop
push
jae
mov
nop
xchg
imul
movs
(bad)
xchg
sbb
xchg
movs
mov
mov
or
pushf
mov
xchg
(bad)
cs
sbb
fimul
sbb
mov
movhlps
les
xchg
fsubr
call
xchg
dec
std
icebp
mov
xchg
clc
dec
push
loop
sbb
xchg
hlt
stos
loopne
or
or
scas
(bad)
xlat
rcl
rcr
xchg
inc
sbb
loopne
call
jo
neg
das
adc
cmp
rol
push
mov
cmp
push
mov
xor
or
ins
sbb
mov
xlat
or
scas
sub
hlt
mul
mov
add
and
popa
jle
lods
push
adc
aaa
pop
cs
mov
xchg
aad
push
mov
or
cmp
enter
adc
add
f2xm1
cld
lea
in
push
mov
or
cmp
mov
ins
into
sbb
out
adc
bound
div
ret
xchg
stos
sub
mov
iret
xchg
dec
ins
add
imul
xchg
sub
cs
pop
xchg
xchg
dec
in
mov
mov
cmc
jo
jmp
ss
xchg
cld
(bad)
mov
ins
int3
sbb
inc
mov
dec
int
lods
adc
sub
int3
repnz
xchg
and
aaa
jg
das
popa
dec
xchg
sub
push
xor
push
xchg
fnstsw
sub
in
xor
jmp
(bad)
sub
aad
add
or
xchg
repz
dec
mov
pop
(bad)
jno
mov
dec
adc
adc
cwde
xor
and
fld
xchg
xchg
test
pop
xchg
cmp
xchg
jbe
dec
inc
xchg
lahf
mov
test
xchg
jmp
aas
add
jnp
xchg
mov
push
pop
push
call
fnsave
cmp
mov
jne
xor
dec
xchg
(bad)
(bad)
jmp
ins
adc
xchg
and
retf
pusha
popf
xchg
scas
dec
clc
inc
xchg
push
mov
xchg
hlt
pop
xchg
jl
neg
enter
mov
push
test
xchg
arpl
jo
and
mov
xchg
adc
jmp
fisttp
xchg
sti
das
push
dec
inc
pop
(bad)
xchg
xchg
call
jl
adc
pop
clc
out
(bad)
sti
mov
pop
xchg
imul
jo
and
fld
xchg
jle
mov
shl
jge
pop
sbb
movs
ret
ds
arpl
and
cmp
dec
loope
xchg
jecxz
adc
shl
sbb
push
sbb
arpl
xchg
retf
cwde
push
outs
push
mov
xchg
(bad)
pop
popa
aaa
jp
scas
call
adc
push
in
out
ins
test
xchg
pop
mov
cld
mov
out
mov
inc
out
ds
mov
fisttp
ficomp
es
data16
xchg
jno
xchg
cmp
fist
sti
push
aad
xchg
or
adc
fwait
sbb
stos
into
ret
mov
cmp
stc
xchg
pop
mov
adc
xchg
lea
cmps
rcl
jb
sub
test
aaa
xchg
and
imul
jg
ss
aaa
in
mov
ds
lahf
(bad)
pushf
sti
cmp
add
push
sub
xchg
arpl
jbe
shl
push
pushf
pop
add
dec
xchg
pop
daa
adc
sbb
dec
inc
fisubr
(bad)
mov
xchg
fadd
pop
adc
lock
xchg
push
cdq
int
jae
in
jle
mov
cld
dec
pop
sub
adc
sbb
push
xchg
outs
xchg
jno
xor
sub
lock
and
mov
xor
sub
adc
pop
adc
push
in
inc
mov
adc
and
push
adc
jp
shr
sbb
lods
int
retf
mov
pop
add
mov
fisubr
in
sbb
(bad)
xchg
ins
das
mov
rcl
mov
cmps
mov
add
xchg
ret
test
push
xchg
movs
xor
dec
jo
mov
and
cmps
mov
(bad)
fsub
sub
inc
xchg
out
pop
sti
ror
rol
cmp
mov
or
cwde
and
addr16
retf
dec
jmp
or
gs
sbb
nop
inc
mov
xchg
add
imul
dec
and
div
push
xchg
lea
fmul
inc
xchg
repz
mov
nop
aas
xchg
push
movs
push
fwait
adc
pop
jge
or
mov
push
xchg
and
fmul
shr
sbb
pop
mul
push
stos
ret
xchg
sub
les
into
loopne
mov
mov
sbb
aas
pusha
mov
cli
xchg
sub
mov
sbb
fwait
mov
jne
out
mov
scas
mov
pop
sub
add
push
cld
mov
stc
cmp
or
stc
out
mov
test
fwait
jns
(bad)
adc
dec
jmp
clc
arpl
outs
and
inc
imul
movs
xchg
pushf
loopne
scas
lahf
mov
cwde
dec
dec
idiv
icebp
xchg
ds
sub
lods
inc
add
dec
xchg
push
bound
xchg
jns
inc
fidivr
out
xor
jge
frstor
sar
and
xchg
xchg
std
dec
das
fsubr
fisttp
cmp
iret
mul
adc
jmp
retf
sti
pop
adc
shl
aad
in
sub
pop
pop
rol
ss
dec
outs
aad
jle
nop
inc
mov
xor
imul
popf
shl
push
xchg
sub
and
sbb
adc
jno
mov
je
into
sti
dec
cmp
arpl
pop
or
in
repnz
adc
add
lea
mov
leave
mov
int
jg
mov
aaa
xchg
stos
clc
pop
jne
xor
jns
cs
sbb
jno
lea
xchg
jbe
mov
sbb
jmp
out
in
pop
jbe
cwde
xchg
xchg
mov
xchg
jge
test
cmp
xor
pop
pop
mov
mov
adc
pop
out
dec
repz
test
jecxz
ja
cs
scas
xchg
xchg
mov
mov
out
outs
faddp
push
jnp
add
mov
xchg
ss
cmp
pop
jo
xlat
or
xchg
lods
dec
sub
(bad)
lock
sub
mov
xor
pop
pop
push
(bad)
mov
cmp
mov
arpl
push
jmp
push
fdivp
popf
stc
xchg
cmps
rcr
xchg
xchg
xchg
dec
or
addr16
shr
push
jp
add
movs
pop
xchg
out
pop
push
mov
adc
push
outs
dec
and
inc
inc
lahf
push
mov
push
xchg
cwde
jo
adc
in
loope
clc
(bad)
mov
aad
sub
push
call
retf
lea
or
dec
xchg
ror
push
into
lahf
cld
xchg
lods
mov
daa
mov
pusha
xchg
mov
call
and
sub
(bad)
(bad)
mov
push
add
xchg
in
sbb
sub
int3
xchg
lds
fisttp
jnp
call
add
xchg
jo
rcl
xchg
xor
cmp
pop
sbb
dec
add
jge
ss
and
(bad)
pop
in
clc
xchg
add
dec
sub
jle
add
inc
daa
into
inc
sub
xor
cmps
xor
jmp
jno
into
nop
jbe
fwait
sbb
jle
ret
xchg
lea
ror
mov
in
cmps
xchg
mov
jmp
xchg
int3
movs
ret
or
add
xchg
repnz
sti
adc
retf
add
ins
adc
push
popf
xor
les
lea
jbe
sbb
into
fisttp
das
and
in
sbb
fidivr
daa
lock
pop
rcr
retf
xchg
enter
fstp
xchg
mov
fsubrp
lods
cmps
mov
xchg
jmp
aad
pusha
(bad)
mov
arpl
add
fucomi
lahf
sub
dec
cmps
in
icebp
xchg
scas
inc
das
arpl
(bad)
xchg
fwait
pop
les
mov
mov
jae
dec
xchg
out
hlt
mov
mov
push
and
xchg
sti
jno
loop
sar
lds
adc
or
out
pop
jmp
mov
je
cld
enter
js
repnz
pushf
addr16
sub
ret
pusha
bound
cdq
push
fs
sub
dec
mov
jo
xchg
adc
pop
int3
xor
retf
sub
in
mov
adc
xchg
adc
sbb
(bad)
sub
retf
pop
sub
xchg
(bad)
adc
pop
cmps
int3
fstp
cmp
loope
in
into
dec
and
ins
mov
sbb
adc
jl
xchg
xchg
jae
adc
mov
iret
cmps
push
movhps
adc
pop
nop
push
sbb
xchg
fadd
mov
fwait
inc
movs
cdq
rcr
outs
leave
adc
shl
(bad)
xchg
lahf
fisttp
push
pop
xchg
out
sub
fidivr
popa
and
outs
hlt
push
clc
add
ins
xchg
cmp
mov
in
or
xchg
mov
cld
xchg
out
movs
outs
xchg
and
dec
loope
sahf
inc
mov
ja
xchg
cmp
mov
or
push
jp
test
adc
dec
test
in
cs
enter
push
shl
xchg
pop
sbb
adc
mov
(bad)
cdq
adc
ss
xor
(bad)
jne
sbb
ins
je
dec
adc
test
jg
ins
sbb
push
cmp
xor
sahf
sbb
aam
mov
mov
and
loopne
xchg
dec
cmp
ret
(bad)
sub
sar
cmovae
inc
fistp
cmp
mov
jbe
pop
bound
(bad)
inc
or
in
xor
xchg
fidivr
ret
cmps
aam
dec
adc
xchg
jle
int
push
adc
in
inc
aas
and
or
cmp
push
pusha
xchg
jge
fisttp
inc
push
cdq
mov
push
push
add
repz
mov
aad
pop
mov
xchg
rcr
jne
jmp
mov
dec
(bad)
std
pop
xchg
add
mov
xchg
cmc
inc
test
bound
xor
ror
xchg
adc
sar
mov
mov
(bad)
sbb
mov
or
mov
loope
test
lahf
fwait
pop
lods
mov
je
daa
stos
xchg
and
mov
push
pushf
xchg
adc
cmp
and
mov
xor
adc
out
jl
es
cmc
adc
pop
out
shl
fwait
jbe
inc
pop
add
fistp
int3
xchg
mov
mov
adc
jg
xchg
xor
repnz
xchg
dec
and
jge
aas
dec
push
add
out
xchg
cmp
jae
cmps
xor
inc
rcl
xchg
and
mov
or
mov
pop
adc
or
ja
push
xchg
sub
lods
xchg
data16
xor
and
mov
add
fisttp
pop
aaa
xchg
push
push
retf
(bad)
jl
add
mov
dec
adc
xchg
jne
shl
cmp
push
sub
jnp
div
outs
nop
or
cmp
aas
imul
test
mov
adc
or
dec
scas
xchg
pop
fnstcw
mov
inc
lods
xor
jecxz
cmp
jo
stc
xchg
js
mov
mov
fs
push
popa
hlt
sbb
mov
xchg
shr
inc
retf
jo
jle
inc
(bad)
sahf
in
cdq
mov
cmp
repz
xchg
adc
and
jp
out
xchg
pop
mov
int3
xchg
jg
mov
sub
push
repz
push
lahf
das
ror
imul
and
in
jecxz
fdiv
dec
xchg
mov
outs
pop
dec
xchg
lods
mov
lahf
stc
mov
shl
aam
sub
fiadd
adc
push
jnp
or
ret
shl
mov
lods
inc
sete
js
mov
push
ds
push
jp
pop
ja
out
(bad)
or
jecxz
mov
push
cmp
js
sub
or
js
in
pop
dec
xchg
dec
sub
cmp
ja
stos
xor
xchg
pop
xchg
and
sti
dec
xchg
sbb
mov
nop
mov
xchg
dec
mov
xchg
push
fidiv
bound
shr
jmp
push
jo
arpl
(bad)
xchg
(bad)
add
xchg
adc
jbe
fcom
js
xchg
mov
icebp
iret
xchg
xchg
cs
xchg
mov
and
into
mov
add
xor
mov
arpl
and
daa
popf
inc
outs
call
jno
or
jb
fisubr
ss
xchg
fs
gs
cwde
add
xchg
sbb
fstp
xchg
pop
xor
inc
xchg
sahf
test
icebp
imul
dec
mov
adc
jns
(bad)
xchg
jae
rol
das
jmp
xchg
shl
sub
loope
stos
scas
xchg
mov
out
aas
mov
pop
ret
cmps
(bad)
bound
test
dec
ds
lds
das
xchg
inc
clc
jo
sub
ins
fwait
add
mov
daa
mov
ror
mov
push
inc
add
cmps
inc
mov
dec
(bad)
pop
mov
shl
xchg
ja
dec
cmps
popa
mov
push
mov
xor
xchg
ins
sbb
ss
cmc
adc
ret
jb
xchg
into
cmp
rol
xchg
pop
mov
dec
xchg
xchg
into
push
push
add
mov
cdq
push
dec
ins
daa
in
sbb
int3
fimul
xchg
(bad)
mov
add
call
cmps
mov
pop
pop
iret
adc
pop
xchg
or
mov
adc
and
or
jg
(bad)
iret
call
xchg
stos
loope
or
sbb
aam
stc
xchg
jno
pop
cmp
push
imul
ja
ins
pop
add
mov
dec
cmps
leave
in
mov
xor
out
fcmovnb
xchg
(bad)
fnstcw
push
ins
xchg
and
cdq
aaa
pop
prefetch
pop
test
add
sub
outs
xchg
adc
fnsave
inc
sub
push
mov
or
leave
inc
xchg
fld
inc
add
push
or
sbb
and
xor
xchg
mov
int
push
pushf
adc
or
ror
pop
sbb
ds
jecxz
jae
es
cmp
mov
(bad)
jo
ret
outs
pushf
pop
test
and
mov
cmp
xchg
mov
cmps
mov
rol
xchg
popf
les
iret
cwde
lods
pusha
les
jp
jl
ja
add
jp
lock
inc
loope
or
or
xchg
fucomi
add
pop
xchg
push
cmp
inc
dec
lds
xchg
movs
fwait
or
xchg
popf
mov
mov
imul
test
mov
aas
xor
lock
cmp
mov
fbstp
xchg
xor
adc
mov
jl
push
sub
imul
pusha
mov
push
hlt
jbe
pop
push
cwde
aas
mov
leave
in
iret
std
cdq
lock
and
fstp
sti
and
je
out
movs
mov
fwait
rcl
and
mov
in
ret
lahf
enter
adc
mov
mov
mov
nop
xchg
test
or
repz
popa
and
out
fld
in
xor
xchg
or
mov
into
xchg
je
call
xor
pushf
(bad)
push
pop
jmp
push
xor
mov
sub
cdq
repnz
jge
xchg
mov
cmp
dec
xchg
jecxz
aad
ins
dec
sub
rcl
dec
mov
daa
pop
pop
aaa
jecxz
ins
into
dec
dec
xchg
or
xchg
pop
push
xor
cwde
rcl
in
enter
mov
ss
lds
aam
adc
into
add
and
gs
ins
pop
dec
xchg
je
push
aam
jb
mov
xchg
jg
dec
pop
mov
mov
jge
xchg
cwde
stos
cs
mov
xor
pop
add
(bad)
or
rol
fstp
dec
push
or
cmps
(bad)
jno
xchg
rcr
sbb
jle
xchg
xor
inc
les
push
jo
cmps
xchg
pushf
(bad)
xchg
fadd
sete
ss
inc
je
xchg
cli
ret
inc
xchg
mov
cdq
in
mov
pop
lods
or
pop
in
and
jbe
pop
int3
adc
pop
movs
mov
xchg
mov
es
cdq
xchg
scas
pop
adc
js
retf
xchg
inc
je
or
stos
popa
mov
hlt
imul
mov
daa
mov
sub
call
cli
dec
and
mov
mov
xchg
jle
adc
xcrypt-cbc
cmps
xchg
xor
push
es
retf
hlt
pop
mov
test
cld
mov
int3
dec
test
ror
loop
xchg
pop
inc
adc
xor
or
dec
adc
adc
ret
fwait
scas
cmp
cmps
push
les
sbb
sbb
fs
or
xchg
outs
sub
jl
mov
mov
clc
and
mov
inc
inc
cmps
jle
push
xchg
pop
dec
sbb
jp
int
pop
adc
jne
lea
lahf
add
mov
hlt
in
loop
fcom
clc
xor
iret
(bad)
out
lods
xor
xchg
sbb
add
mov
add
aam
push
fcom
mov
cmovb
dec
and
fwait
bnd
outs
inc
pushf
pop
xchg
or
inc
xor
or
add
cdq
mov
sbb
mov
push
mov
mov
(bad)
jecxz
mov
mov
push
jp
adc
and
or
stos
mov
jns
xor
xor
lods
pop
push
ret
mov
xchg
loopne
mov
hlt
stos
jmp
mov
loop
pop
mov
aad
test
je
xchg
adc
sbb
push
add
jl
xchg
jns
add
popa
inc
loop
cmp
mov
es
aam
aas
ret
mov
and
cmc
xchg
sbb
sbb
lds
pop
call
pop
or
mov
cmps
or
push
push
xchg
adc
sub
jl
cs
rcl
adc
sahf
aam
sub
cmp
mov
scas
xchg
div
movs
pop
fs
fist
lea
xchg
mov
hlt
jl
xchg
inc
int
inc
scas
ins
mov
int3
call
fwait
sbb
push
sbb
aam
std
loope
ds
movs
rcr
mov
xchg
rcl
es
xchg
and
movs
pop
add
inc
mov
push
pop
aam
mov
xchg
test
scas
rcr
imul
xor
mov
call
ret
mov
xor
jb
sub
xchg
pop
enter
scas
xchg
mul
cli
push
jge
(bad)
mov
pop
inc
stc
jmp
mov
popa
pop
sbb
addr16
leave
and
repnz
ss
xchg
ret
pop
out
hlt
ins
mov
cmp
xchg
jle
mov
push
(bad)
dec
rol
je
aas
xchg
in
push
imul
xchg
fld
jmp
mov
adc
adc
cmps
je
mov
inc
dec
add
xor
xchg
mov
cmps
sub
or
jno
xor
scas
test
repnz
rol
mov
aaa
xchg
fsubp
call
xchg
cmps
lods
mov
arpl
add
daa
lock
aaa
push
adc
xchg
mov
push
call
push
sahf
gs
leave
dec
fwait
cld
xchg
(bad)
addr16
xchg
int
repz
in
(bad)
xchg
inc
es
lods
mov
dec
xchg
pop
add
stc
xchg
cmp
push
ret
jno
jmp
mov
mov
aas
mov
mov
push
push
xchg
mov
mov
shl
xchg
cmp
jmp
push
mov
dec
xchg
test
test
iret
shl
cmp
lea
ret
xchg
pop
popf
jno
push
outs
mov
inc
jo
sahf
lock
xchg
movs
mov
and
mov
stos
cmp
jmp
jecxz
xchg
retf
jo
mov
je
inc
ret
xchg
mov
push
lahf
sete
inc
add
test
add
pop
xchg
add
mov
cmps
imul
mov
adc
xor
or
push
cmps
xchg
push
push
dec
dec
mov
in
rcl
pop
jecxz
jo
stc
dec
dec
cdq
je
xor
mov
repz
mov
push
stos
adc
jo
lods
nop
out
pop
xchg
add
and
cmp
xchg
sub
loope
jmp
test
and
xchg
jle
pop
daa
push
paddusw
imul
or
jne
in
mov
add
cs
xchg
lahf
jmp
add
fcmovne
jno
xchg
xor
aaa
inc
inc
in
xchg
inc
aad
mov
cwde
jmp
and
xor
call
dec
mov
xchg
inc
mov
sbb
movs
xor
push
xor
xchg
sbb
(bad)
xlat
in
xchg
ror
lea
xchg
mov
sub
fst
adc
int
movs
fbstp
lock
jae
cdq
int
or
ds
and
test
add
iret
int3
dec
xchg
std
sbb
mov
addr16
xchg
xor
out
cmp
xor
and
mov
add
(bad)
(bad)
sub
xor
outs
or
xchg
adc
cmc
add
fcmovnu
xchg
pop
inc
lock
push
sbb
shl
adc
xchg
and
sbb
mov
fs
les
pop
xchg
dec
pop
or
jb
xchg
pusha
xchg
ja
scas
add
test
loopne
push
and
xchg
imul
xor
jmp
xor
cmp
adc
es
xchg
mov
cli
push
sbb
fs
xchg
xchg
xchg
inc
scas
mov
les
aaa
fist
xchg
pop
cmc
and
loop
stos
add
inc
or
sub
std
or
test
xchg
mov
movs
bound
shl
cmp
sub
push
cmp
xor
cmp
shl
xchg
lea
dec
mov
rol
into
ss
enter
adc
outs
call
shl
jecxz
je
aad
mov
out
adc
mov
mov
mov
aam
jecxz
mov
lods
push
call
xchg
xchg
cdq
sub
push
fcom
xchg
es
enter
xchg
shl
popa
adc
ins
inc
cmp
lods
mov
ja
inc
push
xor
test
pop
add
adc
xchg
scas
(bad)
mov
and
retfw
or
sbb
push
xor
mov
aam
imul
xlat
test
push
fadd
jp
imul
or
movs
push
js
shr
adc
inc
imul
das
add
or
xchg
mov
popa
jno
pop
outs
outs
jbe
add
dec
xchg
sbb
das
gs
fs
sahf
mov
ja
rcl
je
and
test
lds
mov
xchg
mov
(bad)
(bad)
scas
xchg
inc
add
xchg
sub
sbb
inc
lea
and
(bad)
xlat
push
xchg
dec
pop
xchg
in
ins
aaa
sbb
push
into
jg
je
xor
int3
pop
push
pop
and
xor
xchg
cmp
pop
xchg
inc
jnp
and
mov
xor
xor
les
xchg
sbb
mov
repnz
mov
push
push
lds
movs
mov
xchg
movs
test
(bad)
pusha
sub
jmp
xchg
or
mov
or
xchg
loop
je
out
xchg
popa
xlat
push
jle
xor
inc
sbb
xchg
pop
stos
ds
jge
xor
xchg
daa
push
retf
fst
add
xchg
inc
fidivr
inc
outs
(bad)
mov
mov
je
xchg
sub
stos
jl
pop
adc
sbb
dec
mov
xor
jb
faddp
xchg
inc
xor
jmp
clc
xor
xchg
xchg
scas
popf
movs
jae
pop
cdq
pop
xchg
mov
in
mov
xor
mov
inc
xchg
mov
mov
ret
pop
test
adc
sbb
fwait
lods
push
call
dec
adc
scas
add
sub
adc
mov
add
pop
shr
cli
xchg
xor
sti
hlt
fidivr
fadd
je
adc
add
es
push
xor
std
mov
dec
xchg
repnz
mov
xchg
push
mov
jno
ret
xchg
and
cli
cmp
int3
ins
dec
mov
cmp
inc
leave
mov
enter
mov
sub
loop
xchg
push
sbb
xchg
mov
cmp
xchg
mov
in
mov
mov
test
push
xchg
jle
ret
sub
cmps
jg
inc
iretw
(bad)
repnz
mov
mov
xchg
lods
loope
fld
out
xchg
inc
xchg
adc
jmp
je
push
popa
xchg
retf
dec
outs
and
jo
and
xchg
aaa
std
adc
mov
ja
out
sub
div
sub
xchg
xor
and
push
jp
arpl
outs
(bad)
lea
jmp
dec
hlt
daa
jg
fst
icebp
jo
sbb
fmul
xchg
fwait
cld
punpckldq
stc
mov
push
pop
jp
ret
icebp
dec
add
xor
rcl
gs
ins
push
and
pop
int
xor
mov
cwde
cmp
dec
jmp
in
std
fucom
add
lahf
enter
rcl
pop
and
loopne
(bad)
sbb
pop
imul
xchg
or
stos
sbb
xchg
xchg
mov
data16
movs
xchg
dec
popa
push
xchg
clc
add
(bad)
pop
ja
mov
jmp
pusha
push
sub
iret
mov
xchg
int3
cmp
push
pop
loopne
xor
mov
in
pop
inc
enter
fstp
sbb
stc
cmp
rcl
inc
or
xchg
xchg
jl
out
repnz
cmp
es
add
imul
rcl
cmp
xchg
mov
push
daa
call
adc
pushf
adc
mov
cmp
sub
xor
fistp
xchg
push
pop
int3
jo
inc
std
enter
jbe
pop
adc
retf
mov
sub
fwait
or
inc
out
mov
cmp
inc
icebp
fwait
dec
out
(bad)
arpl
stos
xor
push
test
mov
cdq
or
test
mov
dec
xchg
cmps
xchg
cmps
ins
ret
jno
mov
iret
sbb
test
scas
xchg
enter
imul
mov
jnp
dec
addr16
es
add
scas
push
mov
retf
xchg
sar
hlt
xchg
sbb
inc
retf
fcompp
cmp
xchg
jnp
loop
inc
movs
cwde
int
fwait
push
in
inc
je
push
xchg
xchg
(bad)
xchg
ins
sti
jno
movs
and
cmc
aam
xchg
sar
popa
lock
push
les
shl
aam
add
ins
test
jbe
mov
shl
mov
xor
push
push
xchg
pop
rcl
xchg
fs
mov
xchg
xor
(bad)
xchg
jmp
and
push
retf
jg
dec
xchg
gs
jb
movs
stos
mov
iret
aad
xchg
sub
jnp
xchg
mov
add
push
pop
xor
jl
xchg
xor
aas
scas
add
xchg
push
pusha
movs
mov
pop
inc
xchg
add
rol
inc
add
jnp
jge
aam
jmp
inc
adc
xchg
mov
mov
call
xchg
sbb
and
mov
scas
mov
mov
data16
clc
ds
mov
nop
xchg
mov
shr
xchg
fwait
shr
or
adc
out
ds
pop
cwde
inc
xchg
mov
xchg
push
ss
add
ins
inc
cdq
jnp
dec
shl
adc
js
and
popf
ins
add
or
sbb
adc
ret
retf
cmp
jge
cdq
popf
cmc
jae
js
js
ja
xchg
retf
scas
not
xchg
hlt
sub
loop
mov
std
pop
aad
imul
pop
leave
inc
xor
js
fwait
add
cli
push
fs
xchg
xchg
xchg
mov
js
daa
xchg
and
shl
sub
dec
rcl
sbb
and
or
leave
jnp
fld
shr
jb
(bad)
sub
(bad)
jmp
inc
or
xchg
mul
call
(bad)
(bad)
std
xchg
mov
pop
int3
into
xchg
dec
ins
sbb
cmc
enter
ror
mov
mov
ds
xchg
inc
popf
jmp
cmp
(bad)
ja
pop
test
sub
mov
xchg
in
xchg
mov
outs
jnp
aam
mov
mov
mov
pop
push
fdiv
sbb
xchg
mov
jne
inc
ins
fmul
xchg
addr16
in
xchg
loope
mov
std
pop
add
out
jmp
jle
ja
aaa
leave
fcom
sub
mov
aaa
mov
sbb
out
sbb
imul
inc
xchg
(bad)
jo
xor
dec
(bad)
or
mov
xchg
push
dec
cmp
jno
movs
out
ins
mov
sub
cdq
fidivr
outs
test
les
aam
sub
inc
sti
cmps
cs
test
mov
xchg
sbb
dec
sahf
push
jmp
fcmovnb
jle
stos
inc
movs
mov
ret
out
xchg
(bad)
hlt
btc
mov
sbb
fldenv
jmp
xor
xchg
outs
or
sub
pop
push
mov
inc
push
rcr
push
mov
mov
xchg
add
(bad)
clc
movs
retf
lock
cmove
test
inc
in
repnz
lahf
fwait
adc
adc
int
jmp
cli
icebp
shr
mov
xor
imul
movs
int3
xchg
or
xchg
popa
out
ds
std
mov
and
cmp
(bad)
fld
add
pop
xchg
xlat
les
jl
add
xchg
and
pop
xchg
sbb
das
push
mov
inc
mov
fs
or
bound
sub
mov
loope
leave
sub
jg
pop
inc
inc
xchg
dec
pushf
sub
fwait
push
sub
cmps
test
adc
lods
jnp
xchg
adc
mov
xchg
pop
and
push
inc
push
mov
mov
jne
xchg
lods
adc
push
repz
adc
movs
jp
pop
iret
aam
mov
gs
adc
mov
adc
pop
xchg
mov
push
popa
jg
xchg
xchg
jns
xchg
pop
xchg
mov
pop
xor
xchg
mov
cld
pop
or
int
lahf
stos
mov
repnz
adc
jbe
sahf
lock
xchg
mov
fist
pop
cmp
xchg
xor
adc
aad
fwait
rcr
iret
ins
cli
jno
jg
fist
cmps
push
ja
nop
int3
xchg
sbb
adc
repz
into
dec
stos
pop
mov
push
mov
in
ret
jne
inc
dec
sar
pushf
stos
(bad)
xchg
sbb
lock
call
xchg
mov
arpl
nop
inc
out
lds
pop
xor
xchg
inc
mov
cs
das
stc
mov
(bad)
pop
dec
ja
sbb
pop
outs
dec
add
xchg
xchg
cmps
outs
test
leave
repz
add
in
mov
neg
xchg
fcom
xchg
mov
dec
test
mov
and
jmp
xchg
mov
mov
mov
add
xchg
mov
outs
mov
pop
dec
dec
movs
lods
je
add
inc
cli
xchg
hlt
dec
(bad)
jns
pusha
retf
xlat
bound
cwde
jp
pop
xchg
rol
test
push
mov
inc
int
adc
mov
(bad)
cmp
push
rol
xchg
inc
(bad)
fsubr
xor
stc
xchg
xlat
cmps
xchg
mov
cld
xchg
enter
sbb
lea
sbb
stos
fs
lock
jge
mov
xchg
fcomp
and
jecxz
xchg
cmp
push
loopne
add
mov
mov
cdq
jle
aas
lahf
sahf
mov
movs
xchg
test
push
mov
xchg
rcr
daa
mov
xchg
and
fldenv
adc
inc
mov
dec
xchg
mov
or
lods
clc
aam
xchg
call
hlt
loopne
fs
push
jne
add
mov
mov
xchg
imul
sub
fidiv
push
pop
push
jmp
xchg
adc
sub
jg
xchg
and
scas
or
push
fwait
jp
stos
pusha
jmp
hlt
call
into
mov
or
js
xchg
mov
xor
jecxz
fs
clc
cdq
bound
and
jb
(bad)
sub
dec
inc
adc
call
iret
outs
sub
mov
aad
dec
add
into
jmp
jnp
fild
cld
mov
stc
push
pop
pop
or
test
cdq
sbb
and
repz
not
imul
fs
lahf
in
fs
out
jp
push
cld
mov
xchg
popf
xchg
add
pop
inc
out
or
mov
retf
xchg
xchg
push
inc
shl
cmp
cmp
xor
stc
test
arpl
xchg
popf
xchg
sub
(bad)
into
ret
das
sub
mov
mov
aam
movs
dec
in
adc
mov
in
jp
outs
or
mov
xchg
add
push
and
cmps
enter
popf
ret
inc
cmp
mov
movs
cmp
not
and
out
mov
cmp
xchg
sti
hlt
inc
xchg
jg
jbe
xchg
sbb
rcr
xchg
out
jmp
jmp
sub
push
xchg
dec
cld
pop
xor
in
push
mov
movs
sub
cmp
test
push
out
mov
or
pusha
ds
mov
xchg
pop
call
je
bswap
xchg
cmps
dec
ss
cmp
adc
outs
stos
addr16
pop
pusha
cmp
adc
popf
movs
or
sahf
ss
gs
lods
xchg
inc
loopne
sar
jge
mov
and
in
scas
jbe
mov
sub
adc
mov
repz
(bad)
adc
adc
fwait
push
ds
aas
push
add
imul
mov
aam
adc
aad
xchg
xlat
ret
ds
in
int
outs
adc
push
xor
push
cmps
cli
loopne
mov
and
push
pop
xlat
xchg
leave
scas
pop
push
xchg
mov
cmp
js
lea
mov
xchg
repnz
jno
xchg
add
mov
fwait
or
mov
shl
mov
rcl
push
sar
addr16
adc
aam
pop
and
or
leave
cs
xchg
dec
mov
mov
aas
xor
inc
push
repnz
div
jecxz
xor
mov
xor
rcr
add
mov
xchg
xchg
pop
loope
xchg
sbb
and
mov
adc
adc
pusha
jae
dec
push
xchg
mov
ror
xor
jge
daa
or
pop
xchg
fidivr
stc
push
(bad)
push
imul
inc
rcl
and
xchg
add
stos
pop
movs
xchg
or
in
inc
movs
jl
pushf
xchg
mov
mov
je
pop
ficom
push
ret
mov
mov
mov
pop
xchg
call
lahf
xchg
retf
out
and
test
xchg
enter
imul
dec
xchg
xchg
into
aaa
int3
push
push
test
fisub
cmp
adc
add
jbe
ret
mov
loop
push
push
bound
cdq
xchg
push
(bad)
jmp
xchg
pop
sbb
sbb
ds
(bad)
cmps
jp
es
out
mov
xor
int3
inc
or
xchg
lods
loope
sub
push
xchg
xchg
ja
jle
add
dec
pop
xchg
in
js
movs
mov
pop
xchg
data16
inc
rcl
or
pminub
movs
xchg
xchg
cwde
sbb
nop
mov
push
test
and
sbb
adc
and
push
mov
lds
inc
scas
adc
xchg
mov
mov
hlt
cmp
xor
xor
xchg
inc
inc
push
or
inc
out
inc
dec
pop
xchg
ins
adc
ror
loope
xchg
js
adc
out
fcomp
(bad)
and
cmp
(bad)
arpl
dec
xchg
les
test
jbe
test
jp
xchg
imul
repz
cmp
mov
sti
retf
push
movs
mov
and
shl
aam
and
rcl
sbb
scas
xchg
mov
xor
pop
add
bound
xchg
mov
mov
lods
add
xchg
sub
add
push
popf
nop
sub
push
cmps
test
imul
cli
xchg
push
out
pop
mov
mov
add
xchg
xchg
push
jmp
jl
(bad)
fistp
test
imul
repz
mov
sbb
cli
out
sub
sub
mov
xchg
icebp
jl
in
inc
add
mov
(bad)
into
mov
push
add
pop
lock
mov
inc
pop
mov
xchg
test
cmp
xchg
sub
dec
xor
xchg
ror
(bad)
bound
inc
xchg
imul
movs
xchg
jb
xchg
call
test
dec
or
ds
pop
int3
(bad)
mov
stos
cmps
mov
outs
sub
fcom
mov
and
je
repnz
ret
inc
xchg
sahf
icebp
mov
dec
jbe
xchg
jmp
addr16
adc
stos
add
imul
jmp
scas
inc
dec
dec
jo
jecxz
xlat
rcl
jmp
fwait
mov
shl
xchg
inc
test
sbb
shl
leave
adc
push
or
lahf
dec
mov
xchg
and
dec
xchg
sub
mov
or
mov
adc
jmp
xor
scas
xchg
adc
xlat
movs
enter
xchg
dec
dec
lods
cmc
imul
fadd
enter
leave
or
push
imul
inc
retf
jbe
int3
aad
and
test
xchg
push
loop
sbb
jge
int
mov
and
mov
mov
pushf
lock
xchg
sub
or
add
mov
adc
push
mov
retf
loopne
ins
xchg
es
sbb
adc
lahf
pusha
cmp
adc
adc
jl
inc
sbb
xor
call
fld
shr
cdq
xor
xor
(bad)
lods
xor
xchg
pop
jmp
inc
add
shl
xchg
call
out
inc
mov
pop
sar
or
cli
pop
pushf
mov
xor
das
add
nop
xor
in
xchg
daa
(bad)
test
jle
or
movs
es
leave
or
xchg
mov
stos
push
fst
xor
clc
xchg
cld
push
mov
loope
xchg
es
push
stc
mov
ins
test
retf
cmp
fwait
nop
xchg
mov
cli
sub
push
ds
jo
dec
mov
sbb
adc
mov
int
sbb
mov
or
jmp
adc
fstp
in
add
inc
xchg
add
and
push
leave
and
and
stos
ds
int3
mov
out
xchg
cwde
xchg
iret
pop
mov
mov
mov
(bad)
xor
sub
scas
xchg
sub
cli
fist
adc
mov
dec
outs
xor
add
(bad)
retf
xor
arpl
popa
repz
mov
cdq
into
sbb
loopne
sub
lods
xchg
adc
dec
scas
repnz
xchg
add
sub
inc
mov
jmp
xchg
pusha
inc
or
xchg
add
je
in
xor
retf
movs
xor
sub
dec
(bad)
js
add
lea
xchg
sbb
js
frndint
mov
inc
adc
retf
fsubr
push
add
mov
push
mov
adc
xchg
cmp
xchg
scas
int
repnz
ret
push
xor
mov
add
cmp
shl
adc
ins
stc
push
sub
mov
sbb
cmp
call
dec
push
sbb
pusha
xchg
jge
add
dec
pushf
cmp
xchg
movs
xor
xor
imul
not
jecxz
mov
imul
cmps
xor
xor
(bad)
imul
xchg
lds
jmp
cmp
xlat
mov
fwait
xchg
out
es
sub
xor
xchg
fld
and
mov
xchg
mov
mov
xchg
ins
fsubr
adc
jl
into
fistp
adc
inc
adc
adc
into
mov
shl
les
retf
in
outs
push
pop
or
pop
mov
mov
add
dec
jg
out
fwait
push
xor
lods
inc
std
cld
add
xchg
or
fs
stos
adc
fwait
xchg
xlat
sti
xor
cli
pop
xchg
mov
pop
cmc
push
xor
push
xchg
mov
and
mov
jecxz
mov
cmp
cdq
rcl
ret
adc
jmp
xchg
xchg
(bad)
jmp
clc
hlt
int3
fdiv
xchg
add
mov
push
xchg
inc
out
into
xchg
lea
sub
daa
cmps
sahf
std
xor
mov
jnp
xor
lods
xchg
ins
ret
dec
gs
mov
add
xor
xchg
add
imul
fdiv
cmp
xchg
loop
or
outs
hlt
iret
or
pop
adc
(bad)
mov
xchg
imul
inc
out
xchg
xchg
or
lods
jle
push
popf
sahf
out
add
std
retf
pop
xchg
cmp
outs
jmp
adc
push
out
jp
inc
loope
dec
ja
leave
aam
xchg
cld
add
xor
adc
dec
loop
ror
jno
mov
imul
xchg
inc
adc
adc
dec
mov
outs
mov
sti
add
lahf
call
out
cmp
push
std
or
push
bound
cmp
push
adc
pop
and
xchg
aas
je
or
fldenv
xchg
(bad)
loope
arpl
mov
and
and
xor
dec
movs
xor
enter
jns
push
add
test
mov
bound
leave
pop
in
inc
rcr
dec
xchg
mov
lods
push
(bad)
mov
xchg
cmp
add
shr
or
mov
add
xchg
leave
mov
pusha
push
call
xchg
sti
push
cmp
std
pop
pop
nop
or
xchg
jg
jp
push
jmp
inc
xchg
xchg
xchg
or
dec
and
call
jle
outs
aas
fwait
and
data16
inc
push
je
sbb
or
xchg
(bad)
dec
outs
in
or
pop
lea
or
fwait
xchg
adc
ds
pop
in
iret
adc
mov
(bad)
xchg
retf
mov
aaa
adc
cmp
sub
outs
sti
ret
xchg
jp
xchg
cmps
cdq
dec
das
imul
xchg
push
pop
xchg
pusha
les
movs
fsub
xor
sub
lahf
cmp
pop
xlat
xchg
sbb
in
loope
mov
out
pop
pushf
inc
xchg
or
dec
dec
and
mov
adc
mov
pop
out
inc
dec
mov
xchg
into
and
(bad)
loope
mov
scas
pop
pmulhw
dec
mov
sub
push
mov
xchg
idiv
pop
xchg
fwait
test
sbb
or
mov
aam
xchg
nop
jbe
cld
in
xchg
(bad)
pop
xchg
inc
adc
and
xor
xchg
pop
push
sbb
pusha
xchg
adc
into
bswap
pop
sub
mov
hlt
outs
pop
mov
jmp
xchg
in
and
sub
or
sbb
ror
call
aad
cli
mov
jns
mov
lods
repnz
stos
xchg
or
sbb
mov
imul
add
xor
push
add
xchg
xchg
jb
mov
push
xchg
cs
gs
adc
dec
dec
push
mov
inc
lahf
cli
hlt
dec
rcl
shr
retf
mov
xchg
dec
jnp
push
add
loope
pushf
sub
retf
xchg
cdq
ret
aad
lods
cmc
push
xchg
inc
cmp
lds
mov
mov
push
lods
movs
xchg
sahf
xor
pop
nop
mov
addr16
push
dec
mov
loope
adc
jge
adc
adc
mov
aam
in
cmps
mov
addr16
jne
aam
sahf
inc
(bad)
xchg
jmp
jo
in
shr
imul
cmp
xchg
(bad)
push
cmp
sahf
xchg
test
inc
inc
jmp
out
push
mov
jne
imul
lods
xor
movs
xchg
dec
test
sub
xchg
imul
ror
sub
bound
xor
shl
push
das
xchg
and
idiv
mov
ins
sub
hlt
jmp
mov
loopne
adc
push
add
xchg
(bad)
out
xchg
inc
push
test
mov
movs
xchg
pop
sub
inc
mov
hlt
pushf
out
int
sti
sub
mov
hlt
(bad)
stos
jl
hlt
cmps
adc
dec
inc
mov
jle
inc
bound
mov
push
sbb
cmp
xchg
into
dec
inc
inc
jecxz
dec
leave
fwait
cmp
push
mov
sahf
inc
pop
xchg
xor
mov
enter
ret
ss
icebp
xchg
adc
js
into
retf
xchg
enter
call
aad
ins
sahf
in
int
cmps
xchg
stos
cdq
mov
test
mov
mov
outs
jo
mov
mov
push
push
aam
push
fiadd
dec
pop
pop
mul
ja
and
rcl
inc
push
xor
es
xchg
int3
scas
imul
mov
xchg
aaa
movs
je
add
dec
sub
pop
inc
mov
out
and
les
xchg
rcl
cmc
push
xchg
xor
(bad)
add
imul
cld
sbb
cmp
mul
dec
inc
or
add
neg
sbb
mov
(bad)
fldenv
xor
and
jnp
fimul
push
fsub
test
iret
movs
je
pop
mov
fs
ror
add
retf
mov
pop
(bad)
shl
xchg
sub
cli
xchg
dec
push
jnp
cdq
mov
lods
xchg
push
xlat
je
imul
push
xchg
jno
cmps
cmp
xchg
ins
mov
test
and
retf
imul
shl
ins
push
mov
popa
adc
xchg
jno
sub
sub
pop
xchg
pop
cmp
xchg
jp
sub
fwait
mov
adc
jmp
xchg
rol
scas
stos
xor
jge
dec
and
addr16
inc
loop
je
sub
daa
sub
test
xchg
imul
hlt
(bad)
scas
mov
dec
adc
dec
mov
inc
cs
pop
jbe
leave
je
jle
jl
sar
rol
and
cmp
scas
and
and
xchg
cmps
loopne
mov
es
dec
add
push
cmp
xor
mov
jnp
mov
int3
fld
push
xchg
into
pop
pop
mov
xchg
cli
ret
xor
adc
lods
inc
pop
in
add
sbb
sub
or
mov
aad
xchg
data16
bound
inc
pusha
fstp
dec
ja
jo
leave
add
jno
jbe
out
imul
es
repnz
mov
adc
dec
xchg
(bad)
or
scas
push
xchg
into
cmps
xchg
and
out
cs
adc
mov
arpl
jg
in
repz
loope
add
dec
xchg
test
call
mov
push
xchg
adc
and
lds
clc
in
mov
arpl
or
mov
xchg
stos
mov
inc
icebp
outs
mov
movs
xchg
xchg
sbb
dec
call
cmps
repz
push
push
inc
and
nop
dec
ss
xor
test
mov
jecxz
loop
jb
faddp
ret
outs
inc
xor
add
or
inc
sub
je
dec
sbb
inc
(bad)
pop
and
(bad)
xchg
ret
add
jbe
and
xchg
mov
mov
xchg
not
sub
xchg
cmp
jecxz
pop
test
inc
xchg
jl
dec
inc
push
jp
outs
xchg
adc
add
xor
lods
pop
pop
test
mov
pusha
jecxz
xchg
pop
in
rcr
add
add
into
jnp
cmps
adc
push
sbb
add
and
ret
mov
jl
ins
xor
jnp
xchg
cmp
fcmovne
or
push
mov
mov
ss
(bad)
rcpps
sbb
xchg
dec
add
mov
loope
sbb
pop
aam
pop
mov
outs
dec
pop
xor
in
js
in
pop
push
xchg
jl
loop
lea
mov
inc
mov
mov
ins
lock
pop
ffree
fstp
jne
pushw
in
jle
enter
inc
sub
out
sbb
dec
mov
sub
xchg
repnz
aad
xchg
test
or
scas
xchg
pushf
mov
pop
ds
cmp
mov
je
mov
xchg
in
outs
sub
xor
sbb
xor
mov
pop
xchg
dec
add
out
cmp
ret
mov
adc
call
xchg
mov
push
xor
cmp
ja
mov
xchg
adc
inc
dec
lahf
sbb
je
pop
push
stc
mov
aam
hlt
add
mov
(bad)
rcr
rcr
aas
push
cwde
and
push
dec
mov
xchg
xchg
jmp
cmp
add
lods
mov
xchg
ins
or
sub
fwait
inc
and
in
(bad)
loop
into
xchg
push
mov
int
mov
xlat
push
adc
addr16
clc
sbb
or
xlat
retf
jmp
or
hlt
push
lds
dec
sti
xchg
add
pop
mov
rcr
in
out
or
stos
xchg
movs
popf
jmp
push
xchg
xchg
call
sbb
or
nop
scas
xchg
xchg
push
lds
xchg
jae
int
call
add
outs
mov
shl
mov
(bad)
sbb
pop
xchg
xchg
stos
sub
fsub
adc
xchg
scas
adc
outs
mov
lahf
pop
sbb
push
sbb
mov
pop
movs
mov
xchg
jmp
jbe
xchg
into
arpl
cwde
test
retf
pop
ds
fs
cmps
scas
push
clc
fiadd
dec
test
mov
sbb
loopne
aad
jmp
jmp
leave
cld
mov
aas
dec
ficom
add
dec
dec
mov
cld
int
pcmpeqw
push
dec
mov
test
in
dec
(bad)
movs
and
xor
call
sbb
sub
cmp
jp
mov
push
adc
mov
jnp
fcom
ror
xchg
cs
mov
aaa
addr16
mov
mov
add
cs
jge
push
sbb
pop
add
inc
push
bound
jae
fcom
or
mov
addr16
xchg
inc
imul
test
lods
in
xchg
push
xor
xchg
cmp
fsub
ficomp
lods
aam
ins
pop
xor
xchg
cmp
test
ror
pop
adc
or
pop
mov
pusha
dec
sub
in
xor
mov
xchg
popa
(bad)
mov
lea
mov
movs
xchg
pop
stc
jl
fisttp
fwait
mov
push
sbb
fiadd
pusha
cmp
popf
fnsave
inc
popf
inc
adc
(bad)
jecxz
iret
test
push
xchg
sub
adc
xchg
stos
cmp
dec
icebp
adc
sub
rol
in
add
ficom
inc
xchg
mov
xor
dec
inc
adc
xchg
mov
dec
inc
sbb
out
or
ins
dec
fwait
mov
push
xchg
xchg
mov
pop
push
js
jge
jo
mov
daa
xchg
dec
ins
adc
xlat
or
xor
jp
dec
mov
scas
mov
or
push
clc
xchg
push
jge
loopne
fimul
rol
mov
mov
dec
jecxz
mov
xchg
push
pop
jle
push
ins
mov
inc
retf
jbe
aad
adc
pop
sbb
ins
test
sahf
inc
adc
retf
mov
mov
mov
(bad)
jl
inc
retf
adc
pop
cmp
xchg
ds
nop
mov
xchg
ins
dec
xchg
gs
mov
adc
cmp
jno
add
cmp
leave
mov
and
mov
adc
mov
fist
jmp
mov
xchg
adc
not
in
push
add
addr16
sbb
int
sbb
pop
pop
pop
lock
xchg
scas
clc
ja
mov
inc
mov
xchg
aaa
call
pop
retf
movs
stc
pop
mov
dec
jbe
jmp
push
in
xchg
dec
sub
xchg
mov
push
or
sbb
or
adc
out
popa
aad
jo
adc
push
ret
jle
arpl
inc
or
iret
hlt
imul
fwait
xchg
int
pop
fadd
addr16
(bad)
xchg
in
inc
and
sbb
mov
inc
into
and
adc
scas
jmp
cmp
adc
hlt
fcomp
lods
xlat
loope
mov
xchg
js
repz
ret
(bad)
mov
xor
(bad)
xchg
pop
xlat
in
shl
mov
cdq
xchg
neg
lea
adc
call
push
(bad)
loope
movs
lea
add
ss
push
pop
pop
or
nop
sti
int
xchg
pushf
(bad)
out
xchg
ja
repz
or
pop
or
stc
loopne
xchg
int3
sbb
sbb
cmp
xchg
dec
out
fwait
cmps
addr16
mov
push
add
nop
lahf
js
xchg
push
aas
mov
ins
xchg
lds
adc
xchg
inc
jae
cwde
dec
jl
call
jp
mov
inc
adc
jo
jmp
push
aad
mov
dec
je
xchg
or
aaa
inc
xor
fimul
lock
addr16
jns
push
mov
and
mov
dec
jne
jnp
xchg
pushf
ins
mov
shr
or
mov
cld
mov
movs
loope
push
pop
cmp
xchg
sbb
mov
xchg
fxch
call
mov
(bad)
ss
das
clc
aaa
sbb
sar
xchg
jmp
mov
ins
xchg
test
out
icebp
xor
adc
cld
sbb
outs
pop
ret
xchg
add
js
xchg
mov
pusha
and
add
popa
mov
not
xchg
rcr
pop
xor
xor
(bad)
ins
outs
mov
int3
dec
ret
xchg
pop
test
ss
ins
sub
shr
mov
xchg
dec
in
xchg
rcl
xchg
stos
into
das
add
ss
shl
sub
gs
adc
dec
jbe
xchg
inc
lods
add
jno
xchg
movs
jb
adc
(bad)
xor
inc
xchg
mov
jge
mov
xchg
sub
jno
jmp
jmp
jle
jne
pop
retf
jle
xchg
sbb
(bad)
jg
sbb
xchg
jbe
out
jecxz
in
add
lahf
inc
mov
loop
gs
and
rcr
shr
sub
mov
mov
hlt
jp
jnp
cmps
mov
jmp
mov
xor
xor
mov
rcl
xchg
push
data16
popf
xchg
dec
mov
pop
push
adc
int
ja
push
push
pop
fs
or
outs
xchg
jecxz
test
push
lods
xchg
adc
cs
pop
dec
dec
xchg
arpl
mov
fmul
sub
dec
and
mov
stos
adc
mov
adc
jmp
js
mov
push
imul
das
iret
add
sub
sub
mov
pop
xor
dec
popa
xchg
or
mov
push
mov
ss
cs
fiadd
pop
xchg
sub
dec
aam
dec
(bad)
mov
mov
in
pop
add
test
sbb
jecxz
int3
mov
mov
sbb
xchg
iret
(bad)
sahf
arpl
xchg
xor
add
and
sbb
sar
out
dec
fst
out
push
je
add
xchg
xor
add
dec
and
shl
fdivr
lods
add
stos
cmp
jmp
loop
xchg
imul
jno
add
and
pop
mov
cmp
out
fwait
ins
mov
vzeroall
sahf
fnstcw
mov
sbb
xchg
loop
jns
in
adc
clc
inc
sti
lahf
mov
mov
fs
xchg
and
int3
int
and
stc
xchg
out
fild
in
xchg
mov
scas
cdq
push
lock
sbb
arpl
scas
pop
mov
fstp
lea
(bad)
ins
pop
push
push
retf
lahf
fisttp
dec
sar
cmp
adc
fmul
mov
cmp
xchg
clc
mov
je
into
cmp
es
ja
pushf
adc
sbb
sub
clc
or
push
xchg
cs
xchg
or
or
js
cwde
xchg
lock
aaa
jg
stos
xor
out
sbb
mov
test
jb
pop
loopne
aas
adc
sbb
mov
int
adc
push
stos
mov
or
xchg
push
adc
int
xor
in
xchg
test
pop
xchg
mov
jnp
add
add
cdq
pop
jecxz
aaa
xchg
xchg
cmps
test
push
cli
les
fmul
pop
sub
jbe
adc
jge
dec
pop
dec
cld
xchg
movs
xchg
add
stos
pop
sub
xchg
xchg
push
pop
mov
shr
in
shr
xchg
jl
icebp
mov
xchg
sbb
mov
add
fsubr
test
xchg
xlat
movs
test
(bad)
xchg
and
fbstp
jp
jle
pop
stos
sub
test
mov
jmp
xchg
sub
xor
push
mov
or
mov
retf
xchg
mov
mov
icebp
xor
push
mov
inc
scas
and
jb
ja
ret
cmp
mov
ret
lods
aam
in
call
fistp
or
xchg
push
mov
jns
rcl
pop
jno
das
test
xchg
adc
dec
mov
mov
popa
push
aaa
sbb
xchg
mov
mov
mov
daa
in
lods
sbb
inc
enter
cmp
jnp
das
mov
xlat
mov
pop
xchg
push
add
movs
cdq
(bad)
pop
mov
xchg
dec
xchg
int
mov
dec
mov
adc
ja
clc
xchg
add
cmc
pop
jno
retf
and
push
aad
mov
fs
jg
mov
cmc
push
mov
and
je
popf
push
xchg
xchg
es
cmp
int
add
inc
jg
and
aad
sub
xchg
push
ins
xlat
sbb
xchg
in
jecxz
imul
xchg
fnstsw
sahf
jbe
gs
out
jmp
mov
jl
jmp
add
sub
hlt
daa
cmp
xchg
xchg
inc
gs
int3
sub
jbe
or
cmp
push
mov
and
retf
cmp
adc
sub
nop
(bad)
xchg
rol
dec
sub
popf
retf
push
xchg
scas
sub
xchg
in
ds
dec
fs
xor
pop
sti
inc
xchg
inc
popa
pop
rcr
add
sub
adc
xor
out
jl
xchg
test
int3
xchg
ins
(bad)
jo
ss
into
sbb
jle
xchg
push
inc
arpl
xor
rep
xchg
leave
shl
push
idiv
xor
jne
dec
xchg
mov
or
ins
jnp
jl
xor
dec
or
(bad)
inc
ret
clc
in
popf
imul
xchg
sub
pop
sbb
test
or
rcl
xchg
cmps
add
pop
pushf
mov
or
lds
sbb
sub
je
dec
aam
xor
into
sub
loopne
aaa
jb
xor
ret
(bad)
addr16
shl
fwait
xchg
sbb
jg
call
jns
add
sbb
je
and
jmp
inc
fcom
fsin
xor
test
push
lea
xchg
pop
(bad)
sub
mov
xchg
push
push
out
ret
jno
xchg
fidivr
sbb
test
cmps
nop
loope
xchg
mov
cdq
xor
(bad)
out
xchg
mov
mov
js
mov
movs
push
outs
or
xor
fidiv
scas
or
ficom
xlat
gs
add
dec
adc
les
add
mov
xchg
setp
xor
xchg
into
test
cmp
sbb
adc
mov
push
inc
aam
shr
loope
xchg
ror
jge
sbb
adc
adc
push
jg
aaa
sub
mov
sub
sbb
loop
pop
jnp
jg
jne
fwait
mov
fwait
inc
pusha
in
test
xchg
adc
loop
xchg
cmp
sbb
xchg
je
arpl
aaa
imul
add
sbb
inc
rcr
xchg
mov
fs
xchg
sub
jo
ins
call
xchg
inc
cmp
rcl
scas
cmps
cwde
loope
inc
or
xchg
in
(bad)
inc
outs
fdivr
cmp
mov
fild
bound
pop
cmp
rol
pop
dec
push
mov
push
movs
xchg
or
les
in
daa
push
jle
addr16
cmp
jmp
xchg
xchg
or
or
mov
xchg
cmps
pop
ins
ds
jl
mov
add
adc
jnp
and
or
out
pop
call
xor
stos
xchg
dec
mov
jp
xor
jmp
aaa
mov
scas
pop
jne
and
dec
xchg
in
add
lds
pop
rcl
xor
and
push
mov
xor
int
and
into
mov
cmc
add
out
xor
jo
cmp
mov
mov
sbb
adc
lods
pop
mov
push
sub
aad
les
aam
shl
push
test
das
pop
push
inc
into
sbb
mov
cmp
xchg
ds
add
dec
mov
ret
push
xchg
add
mov
add
(bad)
ja
xchg
mov
out
mov
xchg
xchg
push
push
and
xchg
shl
add
pop
jnp
nop
out
cdq
and
es
ret
not
xchg
dec
not
pop
or
cmps
sub
xchg
mov
or
test
test
sar
cmc
jle
xlat
sbb
out
adc
pushf
cwde
cmp
adc
or
jbe
mov
shr
xchg
mov
gs
and
add
and
enter
jmp
and
fnstenv
xchg
xchg
inc
pop
jae
fcmove
adc
and
hlt
xchg
push
sbb
popa
out
rcr
sbb
xchg
mov
int3
hlt
inc
aaa
je
xchg
cmp
add
call
in
xchg
inc
sbb
mov
adc
mov
aaa
clc
xchg
inc
test
movs
adc
lods
xchg
and
push
xchg
mov
and
out
pop
push
enter
lods
stos
mov
out
cdq
xchg
(bad)
pop
adc
mov
push
lahf
and
jne
mov
or
jmp
imul
repnz
inc
std
(bad)
in
xor
xchg
jns
jp
jbe
cld
add
push
movs
xchg
xchg
pop
cwde
cmp
ins
retf
xchg
scas
daa
fiadd
and
in
in
xchg
aas
les
mov
cwde
(bad)
popf
mov
cmp
adc
sbb
cmp
jmp
ret
cmps
sbb
push
sub
fs
xchg
or
and
xor
mov
xor
pop
or
ret
inc
xchg
fs
fcmovnb
mov
xchg
dec
dec
push
push
std
or
dec
and
sbb
repnz
shr
fsub
mov
sbb
mov
daa
stc
push
mov
(bad)
scas
xchg
sti
es
retf
ret
out
push
jnp
adc
adc
sub
sub
xchg
add
or
sahf
xchg
fwait
cld
mov
sbb
adc
dec
push
(bad)
xchg
sbb
pop
adc
out
and
xchg
mov
fstp
xchg
test
popa
push
xchg
scas
cmp
jg
and
and
lock
call
call
nop
xchg
(bad)
push
and
loop
fisttp
xchg
lods
into
ret
jno
dec
adc
inc
push
ss
rcr
or
(bad)
add
mov
add
cmps
mov
jg
pop
mul
jae
fwait
lods
mov
sbb
aam
mov
and
es
int
je
xor
das
jmp
aaa
cmp
(bad)
aam
xchg
dec
in
sub
xchg
std
xchg
out
arpl
jecxz
mov
mov
inc
push
inc
xor
jl
iret
movs
xchg
mov
mov
add
add
shl
jo
(bad)
in
retf
rcl
iret
xchg
(bad)
cmc
aaa
inc
std
outs
pusha
xchg
scas
xchg
icebp
xchg
ins
push
repz
sub
in
push
xchg
sub
jae
push
cwde
or
xchg
leave
inc
repz
movs
aaa
stos
jle
push
xchg
popf
sub
xor
xchg
inc
std
cmc
mov
xchg
loop
fstp
sbb
clc
xchg
xchg
pop
mov
cmp
or
sub
xchg
test
pop
jnp
mov
(bad)
std
mov
mov
gs
out
and
mov
mov
jp
data16
hlt
dec
sub
inc
push
sub
adc
xchg
cmp
adc
jo
xchg
mov
jl
js
mov
mul
lds
xchg
pushf
mov
ret
mov
add
or
push
xchg
push
xchg
dec
test
popf
nop
cmp
gs
dec
test
repnz
je
push
stc
adc
nop
mov
sub
xchg
adc
imul
fmul
gs
(bad)
aas
out
xor
popf
call
icebp
cmp
or
into
and
adc
and
fadd
xchg
das
add
aad
cmp
mov
fsub
stos
div
xchg
add
sar
push
jle
xchg
xchg
push
(bad)
adc
xchg
adc
pop
push
aam
xchg
cmp
adc
or
or
jns
jle
mov
gs
add
inc
sar
imul
mov
test
xchg
enter
data16
xchg
push
aas
xchg
mov
(bad)
add
xchg
fldln2
jnp
push
xchg
jb
xchg
aaa
pop
jae
addr16
pop
mov
push
cmp
mov
je
das
fild
icebp
adc
sti
xchg
rcl
out
adc
xchg
add
test
ss
jo
mov
jle
xchg
ror
popf
xchg
mov
dec
aaa
stc
inc
lock
xchg
cmc
push
sbb
rol
inc
pop
push
outs
xchg
jbe
xor
adc
xchg
gs
not
into
dec
sub
fisttp
inc
xchg
xor
sbb
shl
ja
enter
push
mov
es
mov
add
aam
mov
mov
je
add
sar
mov
push
lods
push
mov
ficomp
sub
add
xchg
inc
xchg
leave
mov
xchg
jmp
test
lock
xchg
xor
cmp
pop
das
lea
and
ins
(bad)
pop
xchg
movs
push
ins
and
iret
or
xchg
leave
aad
xchg
(bad)
retf
cmc
ret
int
int3
movs
into
cwde
hlt
xchg
in
pop
dec
cli
jae
xchg
shl
jb
xchg
add
add
sti
jae
mov
cdq
loopne
repnz
xchg
jmp
into
sbb
in
and
jecxz
xor
xchg
jns
outs
xchg
bound
xchg
aam
and
mov
pop
call
push
pop
hlt
rol
cmp
xchg
or
dec
and
ins
cmp
xchg
push
adc
std
ror
(bad)
loopne
aam
inc
mov
xchg
fst
aam
push
mov
nop
push
loopne
mov
das
cmp
hlt
enter
gs
jl
lahf
mov
add
mov
je
scas
pop
push
jo
cdq
dec
nop
adc
adc
test
add
dec
push
inc
pop
xchg
jo
fsub
cmp
(bad)
int
sbb
xor
jp
xlat
pop
mov
iret
mov
adc
inc
data16
xor
aas
scas
mov
xor
xchg
mov
inc
sahf
adc
mov
in
pusha
xor
(bad)
jns
(bad)
mov
or
xchg
mov
dec
pop
pop
and
mov
and
scas
mov
mov
sti
add
jle
inc
ret
mov
in
sbb
enter
jp
xchg
aam
movs
(bad)
xor
outs
call
lock
test
out
xor
shr
ins
scas
fwait
rcl
adc
int3
sbb
mov
xchg
cmp
outs
xchg
mov
jae
pop
int
mov
mov
xchg
arpl
retf
scas
int
sub
xchg
mov
xchg
sub
sti
sbb
pop
cs
retf
dec
jnp
xlat
adc
mov
mov
mov
jb
push
(bad)
xor
mov
xchg
mov
xor
fs
push
and
ins
sub
shl
dec
xchg
mov
cmps
or
cmp
das
inc
(bad)
sub
cmps
rep
pop
xchg
ds
call
push
mov
ss
jle
stos
add
xchg
push
cmp
mov
or
ror
cmp
xchg
mov
sbb
push
jle
test
fld
mov
std
int
xchg
mov
mov
xchg
pop
js
inc
pop
gs
pop
arpl
repnz
sub
hlt
mov
push
dec
int
jo
ret
stos
sbb
xchg
jecxz
and
xchg
cmp
xchg
adc
jmp
aam
imul
imul
and
cmp
dec
pushf
popf
xchg
fs
je
jb
or
jge
loop
std
out
cmp
inc
mov
push
rcl
popf
in
xchg
daa
xchg
pop
ja
es
adc
fnstcw
adc
lds
mov
xchg
mov
jb
fsub
call
mov
mov
(bad)
fnstenv
movs
xchg
xchg
xchg
sbb
out
cmc
xchg
inc
push
cmp
jo
fcom
ja
push
xchg
cmp
sub
mov
into
mov
nop
sub
push
xchg
(bad)
ret
lea
in
xchg
mov
cmp
je
and
add
cmp
xor
sub
cs
pop
xchg
xchg
pop
(bad)
jne
cmp
in
sbb
iret
adc
nop
fst
fwait
mov
adc
icebp
or
lods
push
mov
gs
xchg
rcr
(bad)
lds
ss
mul
xor
addr16
add
xchg
fild
push
and
outs
movs
stos
xchg
cmp
mov
mov
mov
inc
cmp
in
inc
jmp
push
pop
xchg
pop
movs
cdq
mov
adc
jge
loope
xchg
lods
mov
cmps
mov
push
inc
cmp
push
mov
dec
cwde
mov
jno
mov
cmps
adc
mov
sub
fisttp
imul
movs
inc
mov
fisubr
jle
xchg
or
mov
sar
inc
mov
leave
jnp
jp
add
aas
sbb
push
mul
xchg
xchg
sub
xlat
test
jge
jbe
dec
sub
xor
(bad)
in
inc
mov
dec
xchg
fimul
sbb
dec
call
xor
aad
jno
dec
dec
ds
lds
ins
test
(bad)
lock
pop
pushf
mov
pop
xchg
or
xor
or
sub
cmps
aam
xchg
je
xchg
sub
stos
lods
dec
outs
pop
mov
xchg
rcl
cmp
pop
ret
xchg
(bad)
imul
mov
push
scas
xchg
ret
dec
sub
dec
shl
sti
xchg
mov
mov
mov
ja
call
or
mov
jl
sbb
inc
test
(bad)
mov
pop
imul
popa
xchg
xchg
and
imul
retf
iret
sti
push
xor
ret
jmp
cmc
inc
or
xchg
(bad)
mov
leave
inc
js
jp
xor
fcomp
xchg
daa
in
jge
fwait
hlt
inc
movs
fwait
xlat
adc
mov
test
inc
mov
fisubr
out
(bad)
aaa
push
fxtract
jp
xchg
fcmovb
mov
leave
xchg
and
sub
jge
or
pop
jnp
mov
xor
mov
and
ror
jbe
xchg
xchg
lds
stos
aad
in
push
add
jnp
(bad)
leave
out
pop
mov
xchg
loope
rol
std
sub
outs
xchg
(bad)
arpl
adc
mov
call
rcl
mov
loopne
inc
(bad)
pop
xor
inc
test
enter
std
fidivr
xchg
xchg
leave
popw
adc
xor
inc
xchg
cmp
dec
lock
adc
adc
sub
push
xor
sbb
test
inc
cmp
ds
test
xchg
xchg
jl
shr
xchg
test
cmp
dec
xlat
mov
mov
adc
aam
mov
(bad)
ret
out
inc
xchg
mov
imul
inc
adc
inc
arpl
fdivr
std
mov
(bad)
in
in
mov
fwait
nop
(bad)
pop
pop
sahf
les
jno
test
push
aad
fwait
xchg
pop
mov
cmp
xchg
lods
dec
cs
mov
xchg
inc
fs
xor
push
xchg
inc
jecxz
test
xchg
inc
std
jmp
xchg
mov
mov
xor
push
push
adc
loope
and
jle
scas
popa
sbb
and
inc
call
pop
out
adc
xchg
sti
(bad)
fs
mov
int3
pop
(bad)
xchg
das
paddusw
dec
ret
and
bnd
cli
xchg
les
(bad)
add
fiadd
mov
xchg
retf
pop
sar
out
xchg
xor
retf
ret
or
mov
mov
or
xchg
mov
pop
repnz
dec
jp
xchg
ins
lahf
push
mov
neg
push
in
xor
sub
xor
bound
xchg
xchg
mov
xor
inc
xchg
adc
pop
nop
dec
xor
xchg
sti
dec
jb
add
or
das
push
call
mov
pop
add
xchg
ins
(bad)
das
lds
xchg
mov
cmp
pop
and
pop
mov
jp
daa
je
mov
cmp
jmp
(bad)
mov
int3
xchg
dec
jae
xchg
rcl
xchg
mov
arpl
int
cmps
xchg
test
cmp
xchg
xlat
dec
das
fld
jle
dec
pop
xor
movs
adc
pop
rcl
cs
adc
pop
scas
sahf
in
inc
dec
xchg
inc
adc
addr16
push
xchg
mov
pop
fwait
xlat
dec
in
cld
mov
mov
jnp
rol
out
test
out
xchg
jae
retf
add
xchg
xchg
xor
rol
xchg
test
loope
push
in
jb
xchg
fist
out
push
xchg
jno
pop
(bad)
pcmpgtd
scas
xor
xchg
jg
(bad)
push
push
dec
jmp
stos
in
mov
sbb
inc
and
jle
and
not
je
xlat
mov
pop
in
arpl
pop
mov
pusha
ss
and
pop
mov
cmp
aaa
or
clc
(bad)
sahf
sbb
bound
jns
outs
or
test
imul
mov
rol
nop
fild
movs
xchg
cmp
sub
push
and
xchg
jmp
fidiv
xchg
jb
call
fwait
xchg
adc
cmp
mov
xor
stos
xchg
cmp
scas
add
push
and
and
hlt
fmul
scas
leave
xchg
cmp
xor
sub
stos
sub
ficom
sbb
imul
xchg
cli
pop
mov
push
xor
mov
xchg
bound
push
iret
je
xchg
mov
push
jns
xchg
mov
and
mov
xchg
loop
sub
les
xchg
mov
rcr
xchg
jns
or
xchg
leave
inc
into
enter
xchg
(bad)
lahf
sub
sub
fcmovu
mov
jle
xchg
in
mov
sbb
sub
push
les
push
in
cmp
gs
xchg
ins
or
outs
neg
add
icebp
pusha
shl
addr16
mov
push
cmps
cli
jmp
iret
xor
cwde
movs
xchg
movs
inc
(bad)
int3
out
clc
int
xchg
into
call
xchg
aas
mov
aaa
xchg
inc
sbb
shr
mov
mov
sbb
xor
sub
adc
cmps
push
icebp
rcl
pop
and
js
pop
or
enter
mov
ins
push
adc
stos
xchg
loope
shl
add
xchg
(bad)
and
into
xchg
(bad)
push
loop
cmp
xchg
sar
inc
je
xchg
push
sbb
xchg
xchg
clc
jb
mov
movs
in
xchg
inc
push
shr
xchg
sbb
add
push
into
adc
cs
inc
jbe
adc
pop
mov
loope
pop
jp
cmps
push
and
ss
imul
xchg
mov
stos
lea
sahf
mov
jl
or
adc
movzx
outs
mov
xchg
push
lea
push
and
jns
mov
xchg
inc
jne
jmp
xchg
add
ret
dec
neg
div
rcr
inc
popa
pop
xor
mov
ficom
nop
fstp
push
stos
mov
pop
rep
inc
mov
fs
bound
pushf
cmp
add
adc
dec
in
xchg
pop
mov
ja
xchg
cmp
dec
out
jge
cmp
dec
cwde
and
or
sar
adc
retf
push
pmuludq
data16
mov
sbb
hlt
dec
movs
mov
sub
pop
mov
imul
mov
cld
cmp
xor
xchg
(bad)
stos
(bad)
ss
leave
shl
out
loop
or
pop
cs
xchg
mov
pop
xor
sub
adc
xor
sbb
lahf
xor
(bad)
jmp
mov
dec
ror
jle
jg
pop
xchg
loopne
or
xchg
loop
xchg
popf
sbb
pop
lock
enter
retf
mov
mov
pop
mov
push
in
push
lods
inc
in
or
jl
out
and
sbb
int3
into
pop
xor
loop
lods
xchg
retf
cmp
js
xchg
push
(bad)
loop
pop
mov
xchg
cwde
mov
imul
je
mov
in
and
xchg
xor
jbe
xchg
rol
addr16
sub
dec
dec
hlt
lods
imul
pop
ficom
inc
shl
sar
xchg
jg
stos
mov
mov
lock
mov
lds
enter
jo
ret
push
fucomi
dec
inc
lds
jg
jle
dec
mov
dec
cmp
pop
xchg
mov
mov
or
fldcw
xchg
addr16
and
inc
ins
dec
in
mov
xor
mov
add
xchg
pop
loop
xor
sbb
iret
stos
(bad)
push
sti
xchg
dec
lods
sbb
xchg
mov
cmp
push
mov
adc
cwde
pop
push
sbb
xchg
dec
push
(bad)
xor
inc
xchg
xchg
je
clc
fmul
inc
inc
mov
dec
lahf
xchg
mov
adc
out
test
(bad)
mov
aad
(bad)
shr
pop
out
lods
xchg
call
hlt
xchg
mov
xor
jmp
jp
jno
xchg
pop
pop
push
jne
sbb
adc
pusha
pop
fdivr
inc
jbe
fimul
mov
push
push
pop
je
mov
adc
push
shl
jge
in
popa
sbb
xchg
sub
ds
xchg
mov
add
adc
xor
xchg
adc
in
(bad)
nop
sbb
cmps
xchg
sbb
add
je
es
fmul
call
stc
bound
pop
xchg
sub
mov
int3
out
xchg
jns
mov
(bad)
sub
rcr
pop
push
mov
call
inc
xchg
xchg
shl
jmp
or
sub
jbe
xchg
and
lea
outs
nop
mov
loop
repnz
inc
push
js
cmps
cmp
dec
and
add
xor
xchg
jge
test
fs
xchg
lea
pop
lods
lods
push
movs
inc
imul
mov
jle
adc
cmp
aas
sar
aam
mov
mov
imul
rcl
pushf
mov
adc
push
lock
pop
sbb
lods
xchg
and
arpl
mov
mov
xor
popf
loope
mov
popa
test
jle
jecxz
call
adc
xchg
adc
push
dec
enter
xchg
into
dec
adc
jmp
stos
cmp
xchg
or
jecxz
xchg
enter
pop
sub
xchg
addr16
test
pop
mov
dec
(bad)
clc
mov
mov
jo
and
xchg
(bad)
cmps
push
jb
test
arpl
outs
or
cmps
xchg
sub
cwde
es
adc
push
ficom
shl
inc
and
aam
(bad)
sahf
ja
xchg
lds
not
inc
in
hlt
js
and
mov
inc
xchg
iret
sub
(bad)
sti
jl
xchg
test
data16
fisubr
cmp
xchg
jmp
inc
in
int3
cdq
leave
pop
inc
mov
push
mov
sbb
jmp
fwait
push
(bad)
fisttp
fs
mov
pop
mov
xchg
mov
jbe
aam
pop
xchg
push
xchg
sahf
aas
add
cwde
dec
xchg
xor
sub
and
inc
rol
ret
xlat
leave
(bad)
je
inc
xchg
xchg
push
test
push
std
(bad)
pop
sbb
xchg
fs
stos
outs
icebp
retf
xchg
retf
pop
daa
test
cld
xchg
out
pop
add
cmp
mov
sbb
cmp
call
lahf
mov
xchg
mov
test
mov
mov
pop
es
or
daa
mov
xchg
lds
xor
dec
add
sbb
inc
cmps
adc
mov
jp
mov
or
xchg
and
sbb
out
pop
xchg
int
push
jnp
fsub
xchg
pop
dec
push
mov
sbb
xchg
call
and
mov
cmp
sahf
push
int
stos
in
jmp
jns
jno
and
inc
je
enter
xchg
mov
stos
test
adc
add
xchg
mov
pop
pop
into
mov
jge
shl
bound
in
sbb
fwait
ret
movs
or
out
or
into
xchg
push
pop
xor
mov
nop
ins
enter
je
lahf
(bad)
xchg
in
jecxz
pop
jmp
fwait
retf
scas
jg
ins
fcomp
jns
pusha
test
xchg
or
outs
ret
mov
scas
xchg
push
push
or
dec
mov
fwait
icebp
test
adc
inc
xchg
jmp
xchg
add
lahf
aas
jg
and
out
cmp
cld
into
mov
xchg
jmp
xchg
xchg
rep
xor
pop
test
aaa
push
mov
add
xchg
fwait
or
iret
xchg
push
ja
sub
and
jae
out
fwait
jp
imul
aam
fwait
scas
cld
xchg
sbb
rol
scas
lods
test
jle
xor
inc
jle
xchg
fcom
cmps
inc
mov
pop
mov
movs
lahf
push
lods
xchg
push
repnz
popf
add
xchg
dec
inc
cmp
iret
fcomp
lods
or
ror
xchg
adc
push
mov
mov
add
push
adc
imul
xchg
jae
dec
pushf
sti
pop
fst
or
xchg
cwde
add
cmp
xchg
xchg
mov
int
shr
(bad)
jge
xor
loop
aad
xor
mov
loopne
mov
mov
xor
mov
sbb
dec
xchg
pop
push
fst
mov
stos
and
dec
lods
xchg
sbb
sbb
jae
clc
cmp
ins
pusha
bnd
jnp
fwait
mov
xchg
adc
xchg
cs
aam
stos
je
mov
jmp
and
fwait
and
sti
arpl
ret
xor
xchg
push
in
pop
fcom
mov
adc
aad
les
xchg
jb
outs
xor
cs
mov
fst
dec
inc
jbe
xor
call
xchg
sub
push
dec
push
repz
imul
in
leave
(bad)
ds
mov
gs
mov
inc
js
xor
clc
sbb
jge
out
ret
imul
mov
pop
adc
lock
call
mov
mov
xor
push
xchg
xor
or
mov
loopne
mov
push
cli
push
enter
sbb
jns
pop
mov
xchg
leave
adc
into
xchg
jo
imul
mov
fnsave
pop
(bad)
repnz
push
and
xchg
pop
(bad)
cmp
pop
test
mov
inc
xchg
test
aas
xchg
cwde
sti
test
pop
les
in
gs
push
pusha
fnstenv
xor
loope
xchg
mov
jge
jbe
xchg
cli
push
(bad)
cmp
movs
ret
je
aaa
cmps
pop
pop
xor
icebp
rcl
clc
montmul
cmps
add
pop
or
repz
pusha
cdq
mov
push
xchg
xor
mov
sar
outs
dec
jae
xchg
(bad)
mov
je
cmc
xchg
sub
mov
scas
fadd
xchg
mov
push
dec
and
shl
push
not
lock
push
adc
xchg
sti
mov
and
xor
mov
int
push
pop
hlt
leave
pop
rcl
jbe
retf
xchg
xchg
daa
xchg
mov
sbb
jno
pop
inc
inc
iret
hlt
aaa
out
test
jecxz
aas
push
stos
xor
mov
mov
fisttp
popf
mov
repnz
and
push
stos
xchg
ja
fidiv
xchg
jo
xlat
push
stc
sti
mov
xchg
sbb
xchg
adc
push
rcr
xchg
mov
hlt
mul
push
sbb
xchg
jo
fs
xchg
dec
adc
out
sub
mov
push
mov
mov
xor
lock
jnp
je
ss
xchg
hlt
inc
xor
adc
mov
cld
pop
outs
and
adc
dec
xlat
xchg
inc
(bad)
or
push
enter
not
out
xchg
cld
inc
imul
xchg
pushf
sub
jae
mov
xchg
cmps
cli
movs
test
ins
xchg
test
mov
xchg
sbb
cmc
(bad)
adc
sub
add
les
mov
nop
sub
xchg
movs
cs
scas
adc
mul
pop
test
movs
cmc
xchg
mov
jo
aam
sbb
add
(bad)
xchg
fmul
pop
in
hlt
test
inc
mov
(bad)
push
fistp
xchg
lds
es
adc
adc
cmc
(bad)
popa
mov
fwait
cdq
pop
(bad)
(bad)
adc
cmps
cmp
lock
es
jo
fist
xchg
inc
or
cs
xchg
jb
push
cmc
adc
push
cmp
xchg
es
shld
test
dec
outs
sbb
adc
and
or
fwait
out
rol
cmc
fild
xor
imul
mov
imul
adc
adc
sub
dec
fdivrp
sbb
aad
jb
fiadd
aas
mov
jge
cdq
cwde
xchg
dec
mov
dec
or
xchg
repz
cmps
aas
dec
fmul
movs
test
imul
cmp
gs
xchg
sbb
pusha
movs
scas
cmc
mov
xchg
call
push
xchg
lock
push
sub
push
push
xchg
fild
mov
mov
inc
lods
jb
xchg
jecxz
ins
mov
mov
xor
pop
gs
xchg
xor
test
rcr
xchg
or
adc
nop
in
xor
stos
stc
xchg
pop
repz
mov
sub
or
ret
ins
pop
in
sub
sti
(bad)
jnp
sahf
ja
jmp
xchg
lods
mov
dec
mov
sahf
fcom
sbb
xchg
and
xchg
push
add
cmp
cld
and
into
(bad)
aaa
movs
loopne
xor
xchg
pop
mov
loope
xchg
cmp
sti
jnp
add
xchg
imul
mov
push
inc
clc
arpl
xchg
pop
jecxz
or
xchg
or
fadd
xchg
push
cmp
mov
fwait
cld
xchg
movs
test
gs
or
mov
xchg
lahf
or
fwait
stos
pusha
fidiv
jmp
jnp
js
mov
push
scas
ins
lods
adc
out
pusha
and
xchg
daa
sbb
or
sbb
sahf
mov
cwde
dec
pop
ret
outs
out
mov
adc
xchg
cwde
xchg
add
iret
in
cmp
cmps
daa
shr
sub
iret
pop
outs
mov
adc
inc
dec
clc
pop
mov
sub
mov
aas
dec
cmp
jg
sahf
int3
popf
outs
movs
ins
js
xchg
gs
xor
fsubrp
out
push
push
(bad)
std
fcom
int
imul
shr
mov
adc
aam
xchg
mov
pop
xchg
xor
fwait
daa
adc
fs
ror
xchg
out
clc
shl
and
adc
xchg
jmp
outs
push
mov
mov
cmp
pop
xlat
and
xchg
aam
cmp
adc
pop
pop
out
add
scas
hlt
test
cmps
dec
and
mov
je
lock
xchg
or
leave
pop
out
nop
fcom
cmp
mov
xlat
ins
jmp
or
xchg
loop
fcomp
cmps
cdq
mov
repnz
int
fnsave
mov
mov
inc
sub
inc
int
mov
sbb
lds
xchg
push
stos
xor
xchg
loop
push
pop
popf
add
je
mov
adc
mov
ss
fidivr
mov
mov
out
sar
mov
inc
xchg
ret
outs
movs
push
pop
lods
xchg
js
call
test
dec
xchg
(bad)
hlt
in
pop
adc
or
stc
xor
push
mov
icebp
mov
(bad)
call
call
adc
jmp
mov
out
and
xchg
js
adc
and
lods
inc
pop
mov
rcl
mov
shl
test
cmp
cmp
xchg
test
mov
mov
push
pusha
aam
xchg
push
lea
xchg
or
inc
jbe
rcr
adc
add
push
xchg
nop
les
ins
test
sub
xchg
data16
popf
xchg
fsub
cmp
retf
cs
xchg
cmps
xor
addr16
mov
mov
sub
dec
(bad)
mov
sbb
sub
xchg
in
sub
es
std
adc
daa
shl
jns
sbb
xchg
cwde
jecxz
shr
push
dec
push
mov
mov
xchg
test
faddp
sti
xchg
aas
jb
in
add
dec
mov
jne
adc
js
daa
xlat
stc
or
adc
xchg
sbb
arpl
cmc
lds
mov
test
hlt
xor
add
or
sbb
aad
nop
fbstp
dec
clc
jl
mov
sub
cmps
adc
in
xchg
mov
push
add
xor
sahf
add
(bad)
call
mov
mov
lds
xchg
jg
popf
int
xchg
stos
ficom
and
out
mov
sbb
or
inc
mov
xchg
or
in
sub
pop
mov
loopne
leave
jp
adc
dec
(bad)
sbb
cwde
sahf
sub
jo
pop
xchg
test
sub
retf
xor
inc
and
xchg
loop
xchg
push
test
sub
add
gs
not
dec
and
mov
inc
and
push
mov
dec
adc
cmp
loopne
int3
jo
mov
fidivr
retf
rcl
sti
mov
sub
rcl
mov
lea
(bad)
enter
es
sbb
push
xchg
and
ror
imul
mov
and
or
push
pusha
std
xchg
inc
cli
push
push
xchg
inc
sbb
rcl
les
lea
cmp
xchg
jg
jnp
xor
inc
xor
and
xchg
iret
hlt
es
mov
or
push
mov
xor
jecxz
xchg
add
push
mov
xchg
pop
mov
pop
pop
mov
inc
fidiv
sub
mov
add
add
stos
pop
cmps
fwait
xchg
push
(bad)
bound
jns
dec
push
mov
xor
adc
in
xchg
sub
ss
vmread
xchg
dec
mov
xchg
test
pop
out
leave
xchg
inc
and
or
xchg
jg
nop
popf
stos
(bad)
mov
movs
test
xchg
mov
pop
and
xchg
mov
rol
daa
dec
mov
pushf
push
outs
xchg
mov
dec
sar
in
fdiv
add
repz
push
sub
fwait
mov
add
pop
or
loop
or
jp
int3
xor
xchg
test
cmp
cwde
cli
stos
pop
icebp
out
adc
scas
rcr
out
ds
ins
jns
xchg
mov
ret
in
lods
fnstsw
mov
(bad)
daa
fwait
and
hlt
pop
cmc
add
xchg
shl
jmp
xchg
jo
or
mov
mov
push
pop
xchg
inc
out
adc
int3
pop
les
ds
mov
imul
repz
repz
rol
icebp
dec
xchg
ret
cmps
jge
mov
sbb
lods
xchg
mov
xchg
mov
je
jle
push
push
xchg
(bad)
cmps
sbb
cmp
jno
retf
popa
aam
jbe
and
dec
cmps
icebp
push
xchg
inc
mov
addr16
lds
jb
push
rcl
mov
xchg
xchg
fild
jge
ds
ficomp
xchg
fs
ins
lds
fwait
addr16
sub
and
(bad)
mov
xchg
ret
xor
adc
xchg
scas
mov
mov
adc
pop
enter
push
mov
sahf
cmp
push
and
mov
dec
mov
pop
stc
sub
fstp
xchg
std
shl
int
test
xchg
add
mov
cmp
or
cli
mov
jg
gs
xor
xchg
sbb
xchg
pop
lea
xlat
scas
inc
xchg
fs
dec
push
add
xchg
cli
lds
in
mov
push
ret
mov
mov
je
jno
(bad)
mov
jl
cmp
xchg
push
dec
cmp
pop
and
xchg
mov
push
sub
pop
loope
fwait
ins
pop
int3
das
bound
mov
das
xchg
fucompp
dec
jle
xchg
xchg
lds
xor
mov
imul
adc
push
pop
add
push
xchg
pushf
push
stos
adc
or
mov
lods
cmp
gs
mov
push
dec
(bad)
jmp
rep
jl
inc
mov
out
mov
scas
jmp
pop
popa
mov
mov
ins
cmp
xchg
xchg
aam
or
loopne
in
mov
and
aad
xchg
cmp
mov
fwait
xchg
adc
sti
xor
xchg
pusha
cmp
xchg
in
xchg
fisubr
pop
rol
shl
fisubr
rcl
cmp
pop
mov
lods
ja
jle
adc
shl
outs
in
dec
pop
xchg
mov
loopne
mov
icebp
adc
ret
pop
dec
(bad)
mov
xchg
dec
in
inc
aaa
call
jno
stos
data16
jne
das
dec
push
push
and
xchg
dec
jb
pop
ds
stos
shr
inc
cwde
jo
xchg
xchg
cmp
gs
test
xchg
sti
jecxz
mov
clc
repnz
add
les
in
push
pop
das
inc
and
xchg
sub
(bad)
mov
jg
rcl
or
scas
jbe
ins
not
push
mov
xchg
in
and
xchg
and
sub
mov
out
jge
pushf
lahf
jo
out
mov
fist
xchg
push
add
xlat
cmps
mov
xchg
xchg
(bad)
lds
dec
es
ja
jle
adc
cwde
sbb
cmps
dec
dec
movs
jb
xchg
(bad)
pop
mov
shl
mov
ja
outs
push
jl
mov
add
xchg
xchg
dec
cmp
xchg
aad
das
rcr
push
jmp
ja
dec
mov
call
xchg
stos
jl
sub
jae
adc
fs
js
xchg
dec
hlt
retf
(bad)
stos
jge
repnz
mov
movs
loopne
push
xchg
jno
sti
(bad)
stc
fistp
push
fst
jbe
mov
js
xchg
mov
inc
adc
rcl
lea
or
push
xchg
cwde
shl
mov
sbb
cmp
cli
cmc
push
or
mov
mov
daa
xchg
cli
jl
adc
outs
out
xchg
xor
pusha
imul
push
push
or
js
jnp
or
cmp
sbb
sub
rol
adc
xchg
movs
loopne
adc
aaa
xchg
xor
mov
lods
xor
int
sub
jg
cmp
mov
mov
aam
out
or
mov
dec
xor
cmp
adc
pop
cmps
or
fdivp
daa
xchg
fwait
mov
sbb
and
aaa
in
sub
mov
and
xchg
mov
jnp
stc
fwait
int
scas
xchg
inc
stos
mov
aas
arpl
xchg
sahf
jo
les
adc
sbb
ret
xchg
clc
stos
mov
mov
fist
fldcw
(bad)
mov
adc
mov
stos
jne
sbb
fs
mov
test
mov
aas
in
movs
push
cmp
pop
xchg
stos
push
or
push
in
mov
(bad)
mov
add
fwait
xchg
mov
(bad)
movzx
mov
in
jns
mov
int
add
xor
icebp
xlat
cmp
cmp
cmp
push
jbe
mov
jne
out
mov
lahf
xor
les
(bad)
mov
dec
(bad)
js
xchg
repnz
lahf
les
mov
push
push
idiv
inc
setnp
sbb
add
aad
popa
cs
adc
pop
xor
es
shr
fcom
out
sub
add
and
(bad)
jmp
call
xchg
cmc
imul
mov
cmp
test
lahf
rcr
fwait
xchg
sbb
lea
cld
mov
(bad)
and
aam
test
in
jmp
ins
es
xchg
out
adc
mov
cmc
xchg
(bad)
outs
or
test
mov
push
shl
or
inc
(bad)
cld
xchg
gs
xchg
xchg
rol
mov
mov
xchg
out
push
pop
dec
xchg
push
(bad)
pop
adc
mov
mov
sub
xchg
pop
push
mov
test
jmp
dec
and
push
(bad)
jg
imul
(bad)
cli
ror
adc
pop
mov
push
inc
pop
or
js
xchg
push
mov
jp
mov
mov
sbb
mov
fimul
stos
xchg
sti
cmps
push
hlt
call
sbb
jo
lock
sahf
int3
inc
xchg
push
pmulhuw
add
add
pop
test
ficom
lock
pop
xchg
adc
mov
inc
push
pusha
int
xchg
adc
repz
ret
xchg
sar
fcomp
xchg
ja
dec
repz
call
test
xlat
inc
scas
and
(bad)
xchg
mov
cmp
dec
test
pusha
sbb
pop
xchg
imul
arpl
mov
add
(bad)
ins
cmp
xchg
in
fcom
in
das
pop
xchg
adc
and
mov
mov
push
std
loope
test
xchg
cmp
fldenv
sbb
int
pop
ror
push
shl
push
test
les
inc
clc
xchg
add
ficomp
or
xchg
stos
or
and
cwde
ret
mov
xlat
adc
in
mov
(bad)
call
fcomi
jecxz
imul
mov
dec
push
leave
jnp
or
mov
(bad)
xchg
xchg
aam
mov
jp
xchg
jmp
and
rol
and
es
or
jge
daa
xchg
rcl
xchg
pushf
ror
sbb
push
repz
stos
sub
jo
cmp
xchg
dec
push
xor
xchg
xchg
push
test
pop
jle
xlat
inc
je
pop
popf
out
xchg
imul
xchg
call
es
loopne
push
cmc
fcmovnu
ficom
xchg
jae
jl
loope
repnz
inc
adc
cdq
push
push
mov
dec
rcl
(bad)
sub
or
fcomp
jo
sbb
sbb
movs
inc
mov
bound
mov
sub
push
aad
push
enter
inc
aas
push
out
iret
ret
aaa
adc
pop
(bad)
aam
adc
pop
fwait
(bad)
jle
or
mov
cs
mov
nop
push
xchg
(bad)
jno
lods
fcomp
push
adc
sbb
xchg
popa
mov
(bad)
jmp
and
call
pop
or
xchg
jne
rcl
jle
xchg
sbb
retf
adc
cmp
jp
xchg
(bad)
adc
ins
mov
push
mov
inc
cli
jb
xchg
scas
stc
lods
popa
ins
mov
cmps
call
jbe
jge
push
sti
xchg
mul
in
pop
cld
mov
jbe
xor
dec
loope
jmp
mov
xchg
loopne
in
mov
mov
icebp
scas
sbb
outs
mov
xchg
cdq
cmp
inc
jl
sbb
pop
fisub
aam
ffreep
dec
xchg
inc
cdq
xchg
jns
enter
das
icebp
add
cmc
jp
ret
sbb
xchg
gs
xchg
shl
jbe
xchg
mov
push
or
icebp
int3
fldcw
ror
lahf
adc
mov
mov
sub
iret
sbb
jp
push
adc
nop
fwait
xor
xchg
or
fs
(bad)
jge
out
push
(bad)
mov
mov
mov
or
xchg
pusha
je
jae
mov
or
mov
mov
xchg
cli
jmp
xchg
(bad)
iret
jo
aad
push
retf
or
inc
push
xchg
shr
pop
jb
jl
push
stc
xchg
adc
pop
(bad)
jmp
sbb
lods
ss
(bad)
hlt
push
sbb
cmp
data16
add
loopne
inc
xchg
cmp
dec
(bad)
push
retf
xchg
loopne
and
cli
sub
nop
cmps
cdq
out
xchg
nop
adc
enter
sub
popf
push
xor
jbe
(bad)
and
cmp
and
inc
fcomp
out
xchg
js
(bad)
sar
enter
call
icebp
(bad)
stc
mov
lahf
dec
or
xchg
sub
pop
in
xor
cmps
mov
in
or
push
cdq
int3
pop
xlat
test
es
dec
add
dec
jb
retf
cdq
mov
xchg
aas
cmp
sbb
mov
mov
xlat
mov
int3
push
xchg
fimul
xchg
mov
lahf
pop
ss
in
(bad)
leave
mov
sbb
jge
and
dec
xchg
dec
adc
mov
fucomp
iret
out
add
in
xor
scas
nop
ja
push
xchg
das
retf
dec
clc
push
mov
mov
test
cmps
or
out
popf
movs
aaa
cmps
lds
add
cmc
xchg
lods
pop
pop
sar
pop
rcl
push
retf
sbb
jmp
int3
scas
nop
addr16
rcr
aam
xor
jecxz
sbb
cmp
repnz
xchg
test
cmps
cdq
mov
xchg
(bad)
iret
in
sub
les
ret
pop
lods
push
test
repz
scas
cmps
fwait
stos
test
mov
inc
dec
xchg
imul
xchg
js
(bad)
gs
mov
(bad)
es
repnz
sbb
xchg
ret
mov
stos
test
mov
and
data16
cmp
add
cmps
ins
out
xchg
outs
push
mov
cmc
fwait
push
dec
(bad)
xor
mov
sub
ins
aam
bound
mov
mov
dec
icebp
push
aaa
adc
ss
xchg
mov
mov
out
xchg
adc
mov
push
or
push
mov
(bad)
retf
push
les
mov
mov
hlt
or
push
es
mov
ror
scas
outs
cmp
addr16
rcl
push
nop
inc
cmp
movs
inc
xlat
mov
out
pop
mov
outs
mov
ret
mov
outs
cmp
or
rcr
push
dec
inc
jo
adc
popa
int3
xchg
jmp
sub
fild
inc
test
mov
xchg
jecxz
xor
fist
inc
inc
inc
xchg
out
call
jae
ror
push
push
xchg
sub
inc
xchg
mov
mov
popa
nop
rol
mov
cli
pusha
push
push
xchg
jp
inc
xor
mov
mov
xchg
xchg
xchg
and
gs
mov
jo
cmp
xchg
mov
xchg
push
lea
pop
cli
mov
outs
sbb
mov
stos
imul
push
add
xchg
out
mov
hlt
push
sub
xor
leave
adc
in
or
movs
xchg
pop
rcl
test
jle
xchg
or
ja
push
adc
pusha
retf
imul
test
dec
xchg
cmp
stos
mov
sbb
aaa
dec
xchg
xchg
les
es
mov
fcom
nop
icebp
inc
ins
jo
xchg
daa
stc
jae
and
mov
stos
inc
add
loopne
(bad)
push
xchg
push
mov
and
cmp
mov
(bad)
push
xchg
fldl2t
aam
test
or
jp
xchg
outs
mov
xor
xchg
and
imul
neg
jbe
xchg
push
push
ds
pop
jnp
xchg
das
aad
arpl
lds
cwde
adc
out
xchg
mov
jo
test
outs
xchg
xchg
lea
rcr
sub
rol
pop
push
fcmovnb
xor
leave
in
lahf
mov
add
fwait
jo
cdq
inc
sbb
add
stos
fdiv
xchg
push
pop
daa
call
xchg
fistp
sub
nop
add
call
rcl
pushf
xchg
mov
sar
xchg
dec
inc
fwait
pop
adc
ins
div
cmp
jbe
stos
xchg
jno
jge
xchg
loopne
adc
fdivr
pop
mov
push
push
add
xchg
outs
mov
retf
fstp
mov
mov
jl
sub
xchg
scas
add
or
pop
dec
(bad)
jno
pop
fwait
mov
shl
mov
push
(bad)
rcl
add
jg
xchg
pop
jnp
xchg
stos
jns
dec
stc
mov
imul
jp
mov
jo
test
das
cwde
and
xor
xchg
dec
xchg
jb
pop
mov
sub
xchg
imul
scas
xchg
add
(bad)
aam
inc
sbb
fwait
pop
add
and
xchg
xor
movq
repz
xchg
adc
sbb
fidiv
js
je
loope
jb
adc
addr16
test
add
push
xchg
fsub
pop
lahf
inc
jle
cmp
mov
inc
xchg
sbb
lahf
jbe
rep
sub
aas
mov
xchg
jnp
jle
add
pop
and
enter
cwde
add
push
xchg
pop
cmps
pop
cmp
into
xchg
adc
popa
loope
xor
ret
mov
je
in
inc
xchg
icebp
jle
stc
adc
adc
std
mov
bound
imul
push
push
je
push
cmp
(bad)
call
popf
mov
int
bnd
sub
sub
in
xchg
push
and
or
pop
cwde
jl
mov
lds
sub
ss
jmp
mov
loopne
xor
mov
cli
sbb
pusha
sub
mov
jle
hlt
pop
out
les
cdq
into
mov
mov
mov
mov
xchg
int3
push
repnz
ss
push
frstor
lods
sub
out
and
call
popf
add
pop
push
adc
sahf
dec
test
sub
cmps
push
xchg
mov
adc
shr
jl
xor
add
inc
lods
xchg
inc
test
sar
xchg
out
xchg
pushf
mov
ror
add
cmp
aam
and
pop
inc
xlat
enter
mov
pop
out
ss
cli
jb
pop
jbe
call
lea
xchg
push
dec
stos
add
xchg
push
push
or
mov
mov
dec
mov
nop
iret
stc
add
mov
or
mov
adc
fild
xchg
adc
mov
pop
movs
jno
dec
sti
repnz
loop
stos
push
popf
or
xchg
mov
xchg
bound
fld
xchg
outs
xchg
xor
xchg
push
std
pop
mov
or
mov
mov
adc
mov
arpl
jmp
jo
or
sbb
movs
mov
aam
mov
and
fild
xor
fdivr
sbb
add
fbld
rcl
sbb
test
xchg
cli
pop
aaa
stos
cmp
xchg
cmp
(bad)
xchg
pop
lock
add
mov
push
jmp
xchg
cli
test
mov
lods
adc
int3
cmps
push
sbb
dec
aad
data16
or
mov
xchg
mov
scas
push
cmp
adc
push
add
cmp
push
xchg
pop
xor
js
shl
popf
les
aad
out
scas
stos
sti
jb
psrad
cmp
xchg
pop
mov
push
test
and
repz
rcr
jl
rcr
jge
cmp
or
into
ds
jns
xchg
cmc
cmps
bound
rcl
jbe
xchg
jne
aam
cdq
mov
std
ror
xchg
mov
nop
xor
fwait
pop
jne
cs
adc
xor
dec
xchg
pop
xchg
dec
inc
sub
and
adc
xchg
repnz
adc
retf
pop
hlt
xchg
xchg
mov
fcmovnbe
ins
pushf
inc
mov
sar
stos
add
rcl
movs
fsub
xchg
jg
arpl
pop
xchg
and
mov
xchg
sbb
dec
in
and
mov
xchg
(bad)
cmp
xchg
add
cmp
mov
xor
fmulp
mov
int
mov
push
mov
int3
fsub
xchg
cmp
test
xchg
adc
jne
jns
das
xchg
push
outs
rol
jmp
jo
aam
jge
js
sub
popa
fs
dec
aad
call
ds
out
cmp
cmps
mov
pop
xchg
mov
xchg
pop
cmp
scas
mov
jge
push
ret
jmp
fstp
(bad)
pop
stc
xchg
outs
clc
sbb
jns
(bad)
mov
and
lds
or
pop
test
xchg
xchg
adc
dec
aam
repz
xchg
hlt
mov
aaa
neg
iret
jne
call
lea
jp
aas
xchg
inc
push
cmp
cmp
pop
sub
pop
jmp
ror
fwait
ja
(bad)
jmp
mov
xchg
enter
jnp
ret
call
out
inc
(bad)
aam
mov
jnp
test
and
retf
imul
pop
div
outs
stos
jecxz
mov
xchg
or
out
xor
xchg
rcr
out
adc
mov
adc
test
cmp
push
or
clc
push
in
dec
push
mov
sti
fwait
xchg
sbb
sub
je
(bad)
xchg
inc
fwait
call
aas
mov
xchg
cmp
stc
xlat
mov
xchg
shr
test
popf
adc
inc
in
xchg
jp
jmp
int
mov
cmp
sub
aam
adc
add
jbe
mov
xchg
add
jb
xchg
rol
jbe
lods
(bad)
test
xchg
call
sbb
lods
lea
adc
les
test
push
lods
sub
xor
cmps
std
xchg
mov
bound
or
sub
(bad)
adc
(bad)
adc
imul
sub
xchg
push
aam
cmps
hlt
std
ficom
ins
dec
sete
xor
sub
ss
les
xchg
mov
adc
(bad)
lock
fldenv
ret
aam
mov
xchg
test
mov
bound
mov
jecxz
je
mov
and
nop
popf
xchg
push
xchg
cdq
out
dec
xchg
outs
inc
push
and
sub
sbb
pop
popf
dec
cld
xchg
mov
pop
mov
outs
loope
cmp
cmp
ds
scas
daa
adc
mov
leave
mov
jmp
es
cmp
sub
popa
xchg
call
iret
xchg
mul
jmp
pop
cmps
pop
push
(bad)
ja
push
xchg
jb
iret
inc
loopne
cwde
imul
sub
pop
push
scas
or
xchg
mov
(bad)
xor
(bad)
aam
adc
xchg
and
or
fs
icebp
outs
lock
xchg
mov
sbb
shl
adc
xchg
ss
(bad)
call
push
mul
std
and
sbb
push
js
add
push
call
aad
cmp
xchg
mov
cli
out
xchg
and
sub
dec
pop
adc
xchg
popf
xchg
push
xlat
leave
push
aas
fsubr
(bad)
mov
xchg
ja
stos
sub
or
or
or
push
xchg
xchg
mov
pop
mov
mov
jge
cmp
es
xchg
sbb
mov
adc
fmul
and
lahf
xor
pop
push
data16
ret
fs
xchg
outs
xchg
cmp
(bad)
adc
inc
pop
xchg
adc
loop
imul
(bad)
je
js
bound
inc
aam
push
hlt
and
call
jle
xchg
inc
(bad)
pop
sti
push
mov
fistp
or
idiv
mov
adc
hlt
dec
call
jbe
jmp
adc
mov
mov
retf
addr16
xchg
sbb
mov
je
mov
xchg
mov
das
mov
sar
popf
or
xor
retf
pop
mov
ret
cmp
lahf
xchg
xchg
xor
xchg
mov
movs
test
sub
adc
fwait
jb
push
in
inc
out
mov
mov
(bad)
jne
fmulp
inc
hlt
push
sub
push
adc
and
mov
xor
xchg
popf
inc
sar
in
lods
scas
call
pusha
sub
or
jmp
shl
popf
adc
sub
imul
(bad)
ret
in
dec
jle
add
ja
hlt
gs
xchg
or
fistp
and
push
mov
xchg
ins
mov
cs
je
xchg
fcom
loop
inc
push
ja
xchg
mov
shl
inc
jne
xchg
push
les
cs
jmp
dec
push
xchg
cmp
hlt
jmp
cmp
sbb
xor
fwait
sub
mov
fdiv
xor
movs
idiv
pop
xchg
and
sbb
dec
push
cmp
test
aam
sbb
mov
mov
sahf
jbe
xchg
xor
mov
cmc
mov
push
fdivr
pop
aam
xor
scas
xchg
cmps
lds
es
cli
ins
(bad)
icebp
cwde
mov
loop
push
mov
xchg
adc
ins
hlt
(bad)
mov
inc
jne
fbstp
pop
mov
in
out
jl
icebp
adc
mov
push
push
push
inc
xchg
retf
enter
sub
add
movs
xchg
jl
cmps
into
or
cmp
adc
outs
dec
clc
mov
ins
xchg
mov
cmp
out
jne
mov
add
adc
lods
adc
push
or
pop
nop
mov
dec
je
adc
daa
add
xchg
jmp
add
pop
arpl
bswap
movs
lods
adc
mov
gs
and
(bad)
jns
push
mov
aam
nop
inc
popf
push
add
mov
xchg
fstp
push
jmp
and
sahf
adc
adc
arpl
push
lods
out
fistp
rol
nop
sub
xor
test
adc
dec
mov
repnz
fisttp
aad
data16
fist
(bad)
adc
sbb
mov
(bad)
sub
xchg
retf
out
jecxz
stos
push
and
xchg
leave
cmc
ds
enter
xchg
cmps
out
xor
mov
inc
push
(bad)
xchg
jl
inc
pop
movs
aam
xchg
retf
fwait
pop
pop
fst
sub
push
xchg
std
cmp
add
mov
jo
adc
(bad)
sub
xchg
repnz
mov
add
jmp
arpl
sbb
movs
xchg
cdq
cmps
adc
(bad)
adc
xchg
outs
movs
pop
jmp
rol
xor
cmp
jb
clc
lahf
xchg
mov
xchg
dec
or
xor
pop
xor
clc
push
mov
test
lock
push
mov
jl
mov
in
adc
pop
mov
je
xor
mov
cmps
hlt
sti
jmp
mov
adc
push
lock
add
ret
(bad)
jmp
hlt
xchg
inc
ja
je
fcmovb
mov
cmc
cwde
fist
add
add
xchg
out
mov
mov
ficom
in
fnstcw
scas
inc
xchg
cmc
sahf
out
call
arpl
ins
jnp
lds
movs
and
push
ret
les
test
xchg
mov
in
pusha
imul
lock
clc
jmp
inc
adc
add
call
nop
mov
pop
xchg
sub
movs
cs
push
(bad)
mov
aaa
(bad)
fwait
stc
fld
out
adc
movs
cld
pop
pop
xchg
inc
popf
push
clc
addr16
lea
fwait
push
jmp
pop
dec
sbb
push
(bad)
sahf
fcmovbe
push
cmps
imul
xchg
pop
rcr
call
or
xchg
loop
xchg
inc
mul
dec
rcr
add
cmp
mov
mov
les
loop
mov
sbb
(bad)
adc
aad
imul
mov
xchg
lahf
cmps
or
push
mov
mov
iret
lds
test
mov
push
xchg
push
sub
cmps
jns
pushf
xchg
ds
push
adc
mov
fimul
pop
mov
jns
add
cmps
out
pop
xchg
(bad)
in
jl
fidiv
or
(bad)
xchg
jbe
ficomp
clc
jp
xchg
ret
add
cs
adc
out
loop
lds
sbb
jl
or
test
push
fcom
jg
fwait
outs
sti
push
and
sub
adc
dec
retf
xchg
stos
cmp
jle
iret
xchg
adc
je
xchg
inc
daa
jae
stos
xchg
data16
idiv
xchg
jge
pop
int
ret
xchg
in
sbb
je
std
das
fwait
sbb
pop
dec
out
xchg
pop
push
imul
inc
pop
lahf
bound
je
inc
dec
(bad)
mov
sub
gs
push
das
ins
not
mov
pop
in
mov
jns
and
jne
fadd
cld
xchg
mov
push
inc
lahf
stc
popa
call
loop
jb
shr
ja
loopne
or
std
xchg
mov
xchg
pop
or
mov
adc
adc
xchg
cs
add
push
or
adc
loopne
and
add
xchg
or
dec
dec
stos
xor
cmp
rcr
push
cmp
sti
loop
xchg
sar
aas
mov
push
push
xchg
dec
or
push
lahf
in
jbe
xchg
out
std
or
xchg
adc
movs
xchg
es
jmp
rcr
lock
out
add
xchg
xlat
popf
pop
nop
pop
(bad)
sub
outs
xchg
sbb
xor
and
xchg
fadd
mov
inc
sbb
xchg
imul
mov
mov
xor
xor
les
aam
xchg
adc
aas
inc
iret
shl
inc
int
movs
and
fist
and
mov
push
push
clc
rol
dec
(bad)
shr
sub
push
je
mov
aam
inc
mov
ds
mov
pushf
aas
stos
mov
adc
aam
dec
frstor
xchg
mov
lea
add
jb
clc
das
inc
and
ins
xchg
cmp
into
cmc
js
jae
(bad)
out
out
test
aaa
sbb
xchg
jmp
push
lods
stos
xchg
leave
xchg
outs
cdq
dec
scas
xor
or
push
popa
stc
bound
unpcklps
pop
hlt
jp
mov
adc
outs
push
mov
xchg
imul
cmp
push
push
repnz
pop
pop
xchg
xor
shl
xor
call
daa
xchg
and
sbb
dec
fmul
jno
push
lods
mov
inc
mov
jecxz
popa
mov
es
scas
push
retf
rol
xchg
xor
fst
stos
push
loope
xchg
add
push
pop
jo
push
cmp
ds
loope
pop
into
call
outs
xchg
dec
push
fst
aaa
xor
pop
xchg
mov
fstp
mov
dec
bound
xor
pop
js
adc
not
pop
rcr
fcomp
add
loop
xchg
ja
push
mov
(bad)
shl
pop
mov
jae
mov
xchg
(bad)
sbb
aam
or
fwait
or
or
xchg
xchg
adc
xlat
(bad)
into
xchg
xchg
jmp
int3
loopne
lea
fwait
in
ror
not
sbb
dec
and
xchg
sbb
sbb
xchg
inc
dec
cmc
jno
stos
dec
mov
test
or
sbb
and
xchg
mov
lods
sub
xor
pop
adc
jge
mov
stos
and
in
sbb
cmp
xchg
ja
inc
mov
xchg
adc
cdq
and
imul
in
xchg
cmps
jmp
xchg
inc
icebp
inc
or
sub
dec
int3
cmp
js
fldcw
out
mov
cmp
jae
in
xchg
call
xor
sbb
xchg
fwait
cmp
jne
(bad)
hlt
adc
fmul
push
dec
out
imul
jb
stos
mov
xchg
mov
dec
retf
inc
fs
add
and
out
sbb
inc
push
scas
jne
or
mov
push
cmp
add
test
xor
lea
jnp
or
xchg
pop
add
xchg
aas
xchg
ds
fimul
cmp
setnp
mov
(bad)
mov
inc
inc
jb
add
xor
call
mov
xchg
mov
or
test
mov
mov
jnp
(bad)
push
jg
jno
cwde
jne
add
es
outs
xchg
xchg
mov
jl
xchg
loope
pop
mov
fidiv
aam
out
pop
inc
inc
xchg
call
or
outs
fst
pop
mov
xchg
movs
xchg
jns
push
adc
jg
fdivrp
xor
or
and
xchg
or
xchg
enter
push
cld
fdiv
xchg
cmps
sbb
jmp
xchg
cmovnp
or
shl
gs
mov
jae
mov
push
addr16
icebp
inc
fs
mov
sar
ret
cdq
ja
xchg
nop
shl
dec
in
dec
les
or
fdivr
rol
xchg
retf
pop
test
push
inc
jns
jle
mov
repz
lods
out
xlat
shl
scas
in
scas
adc
fwait
adc
jmp
mov
sub
pop
add
xchg
in
outs
hlt
mov
push
test
mov
into
push
cmp
jno
jns
inc
xor
xchg
cmps
jl
fidivr
sar
fwait
leave
(bad)
imul
fs
jno
adc
pop
mov
ret
in
fwait
movs
or
jns
(bad)
xor
mov
ins
pop
cmps
outs
push
xchg
push
mov
sub
rcl
xchg
fdivr
sub
adc
ret
xchg
fs
inc
ds
and
pop
jmp
xchg
sahf
ins
jbe
mov
inc
pop
xchg
stc
inc
add
xchg
leave
push
pop
call
xchg
xchg
retf
dec
scas
push
or
mov
jbe
pop
outs
enter
mov
and
cmps
xor
sub
xchg
xor
jbe
loop
sbb
fadd
into
adc
pop
aam
scas
mov
adc
jl
jnp
mov
xchg
stos
aaa
push
push
xchg
jmp
dec
aam
push
enter
mov
in
aad
dec
xchg
jns
inc
mov
mov
mov
fisub
ror
repz
adc
add
in
push
push
fwait
push
fsub
seta
mov
inc
sbb
and
dec
xchg
jg
aam
fmul
ins
adc
shr
rcl
pop
in
cwde
sbb
adc
std
xchg
mov
xor
sbb
aam
arpl
add
xchg
sbb
push
in
jge
mov
mov
push
pop
inc
test
and
sbb
aad
rcl
xlat
int
scas
and
adc
inc
ficom
cli
pop
not
loope
xchg
xchg
or
add
inc
push
mov
jns
aam
out
aam
lods
jbe
fist
gs
pop
xor
arpl
xchg
add
sbb
loopne
sub
pop
xchg
aas
cs
sbb
xchg
cdq
movs
in
inc
retf
push
jle
scas
loopne
out
sbb
jge
push
inc
add
pop
fidiv
stc
loop
lds
aaa
mov
push
in
pushf
inc
fwait
push
pop
inc
jnp
add
lock
cli
mov
sub
fbstp
aad
pop
xchg
(bad)
jne
push
add
push
loop
scas
sub
xchg
outs
adc
cwde
xchg
push
clc
clc
fcomp
xor
mov
inc
lods
sub
xor
ret
push
les
mov
add
fs
idiv
test
pop
rcl
adc
imul
xchg
popa
scas
movs
mov
jae
xor
ja
push
mov
lods
enter
pop
test
gs
xchg
jmp
pop
mov
xchg
repnz
ja
scas
movs
data16
loop
sub
cli
fwait
sub
mov
outs
mov
pop
adc
cmp
xchg
stc
jno
lods
pop
fisttp
adc
pop
bound
xchg
jnp
outs
sahf
and
pop
cmp
pop
sub
cmp
mov
push
test
add
xchg
cmp
scas
stc
nop
cmp
rcl
mov
je
dec
pusha
(bad)
sub
and
or
xchg
mov
mov
nop
scas
push
ficom
push
rep
dec
jl
xchg
fimul
mov
jno
pop
bound
adc
mov
add
mov
sbb
and
xchg
ja
loope
push
retf
add
mov
and
and
mov
add
stc
dec
xchg
(bad)
int
outs
aaa
es
xchg
popf
add
sbb
cmp
cmps
dec
mov
mov
repz
mov
push
test
lock
in
push
mov
adc
xchg
dec
fild
cmp
nop
xchg
ins
movs
out
mov
push
jno
fdivr
fldenv
adc
loopne
out
cdq
int3
in
stc
repnz
push
jnp
cmps
and
into
fimul
inc
sub
test
cmp
shl
adc
shl
xlat
jp
xchg
scas
fsubrp
rcl
js
xchg
dec
outs
sub
imul
rcl
and
(bad)
push
jmp
fstp
add
iret
or
int3
clc
(bad)
mov
ss
lahf
xchg
xchg
push
je
and
add
inc
xchg
adc
pop
adc
cmp
or
lods
hlt
xchg
dec
inc
ja
sbb
cmps
xchg
adc
or
and
xlat
jnp
add
test
xchg
push
xchg
nop
inc
cmp
inc
jb
fldenv
xchg
or
imul
daa
xchg
cmp
mov
fwait
(bad)
cmp
push
add
cld
popf
cmps
xchg
jbe
push
ins
mov
xchg
inc
pop
sub
mov
repz
mov
(bad)
xor
neg
xchg
(bad)
or
fisub
loop
push
xchg
mov
xor
sbb
push
dec
int
add
push
movs
cmps
loopne
jb
xchg
int3
push
pop
sbb
scas
pusha
fbld
div
outs
pop
pop
hlt
bound
fld
and
imul
les
test
jmp
adc
mov
mul
pushf
fst
call
inc
add
xchg
adc
adc
dec
mov
cmp
bound
arpl
mov
add
cmp
sbb
pop
sub
out
add
cmc
je
loop
rcl
in
iret
adc
jp
adc
cmps
fs
sub
dec
inc
stos
xchg
cli
movs
jl
mov
lods
jne
xchg
fist
arpl
sub
mov
xchg
push
lods
fcomi
shr
inc
jg
push
in
xchg
mov
(bad)
stos
xchg
hlt
ud2
int3
(bad)
jb
dec
xchg
jo
mov
retf
pop
leave
push
xchg
(bad)
push
hlt
sahf
jle
inc
lds
dec
mov
xchg
in
aas
test
or
js
retf
inc
das
mov
pop
xchg
xchg
or
and
cmp
in
ror
push
xchg
jno
fst
sub
xchg
sbb
loopne
loop
dec
pop
fwait
cld
ret
push
cmp
add
sub
cmp
push
sti
mov
pop
mov
fidivr
loope
jp
push
jbe
xchg
ror
nop
les
mov
mov
push
in
mov
adc
xor
push
or
xchg
xchg
xor
inc
dec
push
and
(bad)
mov
sti
(bad)
hlt
out
jno
les
jnp
jmp
aas
sti
mov
sbb
push
xchg
mov
rol
mov
and
pop
cmp
fnstcw
into
fild
dec
inc
adc
mov
pop
cmp
xchg
mov
mov
es
push
inc
and
out
adc
mov
hlt
ins
jbe
cmp
fcmovb
push
or
std
arpl
lods
repnz
mov
popa
jp
jmp
dec
retf
in
mov
hlt
aas
ss
fist
imul
xchg
xor
ret
retf
push
xchg
jmp
fwait
dec
fdiv
add
xchg
cli
fnsave
or
std
cmc
xchg
xchg
cmp
pop
push
shl
push
aam
dec
fcom
mul
out
nop
pop
pop
xlat
add
mov
ins
cmc
pop
call
call
push
hlt
sti
sbb
retf
jnp
push
mov
enter
sub
jae
push
es
je
nop
dec
xchg
xchg
inc
shl
adc
jne
xchg
cmp
and
jp
les
addr16
pop
and
xchg
cmp
clc
pop
jl
inc
sub
imul
fsub
cmp
out
das
retf
fisubr
in
xchg
jbe
push
shl
xchg
inc
push
pop
sbb
stos
test
mov
lock
jecxz
xchg
in
mov
dec
pop
sbb
fidivr
out
das
test
lahf
stos
add
pop
xchg
ins
cmp
imul
inc
mov
cmp
push
cmp
mov
mov
mov
in
push
(bad)
mov
push
mov
jmp
shr
test
adc
pop
inc
or
sbb
retf
dec
cwde
mov
adc
aam
scas
and
les
movs
cmc
clc
sbb
xchg
mov
icebp
xor
mov
leave
jnp
je
xchg
push
scas
fs
aaa
cdq
mov
push
rcr
pop
stos
add
jns
push
mov
xchg
repz
mov
xor
mov
inc
sbb
xchg
pop
xchg
jb
scas
pop
mov
cmc
mov
xor
jo
jg
dec
int3
cld
aam
mov
mov
pop
lods
fadd
loopne
rcl
mov
ds
cmps
pop
and
aaa
add
shl
xchg
sbb
jno
pop
xchg
idiv
leave
inc
call
adc
mov
push
sbb
mov
mov
inc
jp
xchg
push
imul
inc
sub
icebp
cmps
vmread
in
sub
cdq
xor
int
into
adc
jg
imul
jmp
xor
xchg
adc
push
pop
xchg
jno
pusha
jne
pop
pop
cmp
xchg
jge
jmp
popf
pop
and
in
das
repnz
mov
js
mov
sub
cmps
jl
das
push
pop
pop
ficom
mov
cmp
pop
test
push
cwde
(bad)
aam
jb
push
push
lds
mov
push
movs
sbb
rcl
fcomip
clc
shl
xor
retf
jae
xchg
sub
arpl
pop
popf
aaa
xchg
pusha
mov
pop
(bad)
xchg
dec
sub
call
push
dec
in
mov
sub
cbw
jg
into
push
loopne
outs
repz
mov
fst
cmp
jbe
or
ret
mov
xor
mov
or
and
les
pop
in
mov
das
xchg
and
bnd
mov
mov
addr16
add
fwait
xchg
out
or
jbe
fs
pop
push
mov
xchg
scas
add
enter
ds
outs
jae
in
adc
ror
or
jg
xchg
xchg
test
popf
pusha
fisub
int
and
das
repnz
retf
int
ficomp
es
sbb
and
xor
or
ret
xchg
rol
daa
movs
leave
pushf
xor
call
push
sbb
cs
popa
enter
push
xchg
sbb
mov
mov
xchg
fsubrp
ror
push
inc
xchg
mov
fwait
xchg
fldln2
xor
sbb
mov
rol
cmp
pop
fsubr
adc
fisub
push
hlt
shr
popf
xchg
and
push
xchg
cdq
dec
ds
inc
xchg
sub
xchg
movs
xchg
pusha
imul
mov
lds
sub
sbb
outs
ret
xchg
or
jmp
(bad)
pop
jmp
xchg
mov
pop
adc
and
xchg
push
repnz
aam
into
xchg
pop
xchg
add
sbb
adc
push
add
lods
xor
mov
jle
in
out
xchg
loop
xchg
es
mov
push
xchg
cmps
cwde
push
clc
loopne
aas
add
xor
jl
in
xchg
push
js
sar
loope
xor
jp
fwait
ss
add
mov
in
mov
jb
push
stc
shl
test
jnp
outs
mov
adc
mov
or
sub
xchg
inc
push
fistp
int3
or
repz
jno
xchg
loop
xchg
xchg
jmp
aas
xchg
inc
jo
adc
cmc
test
mov
xchg
jae
ins
add
mov
jo
inc
xchg
sub
sti
adc
sete
adc
sub
dec
xchg
(bad)
outs
in
pop
push
ja
test
iret
jmp
xchg
sbb
add
(bad)
or
xchg
stc
bound
arpl
jmp
aad
mov
cwde
int3
test
push
fwait
or
jnp
push
fld
xor
outs
or
jl
stc
dec
div
xchg
fs
aas
loopne
(bad)
les
hlt
mov
xchg
push
rcr
adc
mov
sbb
test
adc
inc
inc
movs
lea
push
mov
out
jns
mov
test
xchg
mov
jle
ins
pop
mov
test
in
xchg
movs
ret
xlat
mov
xchg
dec
outs
fnstenv
pop
pushf
cmp
stc
fcom
jl
ins
xchg
ds
in
(bad)
ins
stos
dec
bswap
mov
fisttp
call
xchg
mov
adc
std
stos
shl
(bad)
xchg
push
xchg
(bad)
mov
scas
mov
in
xor
sub
ins
in
mov
adc
mov
xchg
and
ins
sub
add
(bad)
lahf
outs
push
adc
cmp
ss
pusha
xchg
popf
dec
pop
jge
sti
loop
xchg
lahf
repnz
cwde
call
mov
xor
pop
or
and
retf
test
cwde
xchg
out
ds
sub
into
cdq
xchg
cli
xchg
jno
xor
movs
push
in
lods
add
mov
cmp
out
es
iret
xor
popa
js
shr
xchg
sbb
jno
(bad)
sub
xchg
cmp
xchg
(bad)
xor
leave
lods
xor
cld
push
xchg
into
arpl
jo
mov
popf
test
jp
dec
xchg
xor
fnstenv
lock
add
cmp
xchg
push
rcr
jnp
xchg
mov
cmp
dec
adc
js
push
ds
xchg
leave
push
adc
arpl
jg
inc
dec
add
dec
call
add
jmp
ret
mov
xchg
icebp
in
adc
xor
xor
pop
test
ins
xchg
xchg
inc
enter
and
push
out
dec
cdq
popa
mov
xor
push
jbe
cli
xchg
sbb
mov
mov
sub
xor
sub
scas
hlt
lods
call
sbb
arpl
cmps
es
xchg
lahf
mov
rcl
jmp
test
jg
xchg
ficomp
mov
mov
or
nop
repnz
shl
adc
pop
xchg
ror
jne
or
mov
(bad)
lock
out
dec
imul
mov
jnp
in
sbb
add
sub
ret
shr
pop
xor
fldcw
xchg
out
mov
jbe
addr16
xchg
dec
es
mov
cdq
lahf
pop
mov
ret
xchg
cwde
shl
fcmove
cld
adc
xchg
push
das
test
add
in
(bad)
pushf
clc
rcl
mov
loopne
xchg
pop
dec
push
rcl
out
xor
cmovb
or
ja
sbb
test
push
js
shl
jp
shl
inc
mov
dec
dec
dec
lods
xchg
fwait
xchg
mov
dec
je
inc
fild
inc
mov
xchg
pop
xchg
pop
dec
push
int
inc
pop
mov
push
xchg
cmps
icebp
sub
sub
or
mov
mov
mov
add
adc
cmps
shl
call
test
adc
retf
sbb
jb
adc
pop
xchg
mov
cli
lods
sahf
sbb
adc
dec
inc
adc
popa
retf
xor
stc
mov
inc
(bad)
rcl
xchg
pop
lods
fiadd
outs
or
(bad)
(bad)
sbb
mov
sbb
fsub
mov
sub
sbb
icebp
and
out
mov
add
test
pop
test
push
xchg
pop
stos
dec
cdq
mov
cmps
and
aam
lock
pushf
jae
xchg
mov
add
and
adc
and
jecxz
push
mov
cmp
xchg
idiv
jns
xchg
pop
xchg
mov
fcomp
sbb
mov
push
mov
jle
iret
rcl
test
mov
nop
iret
je
in
cwde
mov
fs
mov
loop
jne
std
pop
jmp
sub
xchg
ins
cmps
aam
and
outs
push
mov
imul
aad
cmps
call
pop
bound
cmps
mov
test
xchg
push
push
aas
shl
fsub
mov
xchg
sub
and
add
(bad)
ja
xchg
mov
inc
lahf
xchg
mov
data16
adc
clc
(bad)
fwait
(bad)
(bad)
(bad)
rcl
mov
adc
in
push
sbb
shr
test
xchg
xor
jmp
sub
xchg
and
mov
das
lock
xchg
sar
jge
push
ins
push
ds
dec
sbb
mov
lock
imul
or
sub
aas
xchg
popa
scas
sbb
xor
and
sub
xchg
add
fadd
xabort
iret
xchg
arpl
not
inc
xchg
int
ja
cmp
xchg
iret
ins
popa
lock
xor
xchg
shl
rcr
add
mov
or
xchg
xchg
xchg
in
jb
stos
push
sub
ret
mov
sahf
ds
(bad)
sbb
out
sub
cmp
pop
push
pop
adc
sbb
mov
bound
push
sub
popf
pop
mov
fst
pop
ficom
inc
mov
xchg
gs
sbb
fistp
pushf
xor
(bad)
out
jl
sub
imul
loop
mov
mov
mov
sbb
jno
pop
push
popf
retf
fst
jb
jmp
push
ds
rcr
push
adc
rcr
fs
mov
mov
test
fsub
cmc
stos
jnp
dec
lea
pop
movs
cmps
leave
test
push
and
sub
mov
xchg
xchg
xchg
push
inc
js
xchg
inc
sbb
mov
aas
test
push
xlat
jno
pop
fimul
xchg
inc
cli
in
stc
or
(bad)
adc
pop
mov
sub
mov
sbb
push
jb
outs
push
xchg
fbld
mov
jecxz
jg
xor
repnz
mov
push
mov
xchg
add
dec
jge
xchg
xchg
inc
mov
sub
fwait
imul
in
add
lea
sbb
xchg
xchg
pop
les
mov
outs
fmul
dec
and
aam
dec
cld
(bad)
xchg
mov
jmp
xchg
fwait
rcl
push
das
je
or
in
dec
ins
xor
inc
xchg
enter
popa
rcl
mov
push
mov
sub
adc
arpl
xchg
xchg
imul
xchg
repnz
ret
js
shr
out
es
pop
fs
or
repz
add
dec
jmp
lods
dec
inc
outs
push
cld
xchg
cmp
mov
pop
mov
mul
mov
cdq
mov
push
mov
sbb
xchg
out
pop
mov
das
in
(bad)
stos
xchg
(bad)
pop
add
and
push
sub
xor
popf
(bad)
aam
dec
adc
push
xchg
cmp
mov
adc
and
sub
lock
daa
sub
fdivr
xchg
mov
lds
pop
pop
jl
aas
sub
adc
mov
rcl
das
gs
add
or
cld
int
shl
les
inc
pop
ret
movs
sbb
js
mov
xor
xor
xchg
add
xchg
cli
pop
(bad)
push
rcr
xchg
cmp
inc
jl
xchg
ins
jp
ret
pushf
and
movs
xchg
mov
(bad)
fnsave
int3
mov
and
xchg
inc
mov
mov
xchg
ja
ret
enter
ds
add
jmp
mov
not
and
mov
add
mov
or
adc
add
xchg
cmp
mov
adc
ins
cmp
sbb
dec
mov
pop
aad
pop
mov
adc
out
mov
mov
mov
xchg
mov
adc
sbb
pop
push
pop
adc
test
dec
pop
sbb
sbb
jnp
pop
push
pop
xchg
pop
in
pop
movs
or
cdq
cmp
std
xchg
push
jbe
stos
mov
aam
push
pusha
jo
dec
xchg
mov
jb
mov
imul
movs
adc
mov
or
mov
leave
jmp
lock
xor
push
mov
je
cld
add
adc
fwait
adc
mov
aam
jecxz
mov
arpl
adc
scas
hlt
stc
rcl
xchg
(bad)
pop
mov
enter
xchg
xchg
stos
inc
dec
lods
jg
xor
push
and
mov
mov
in
xchg
in
lock
xchg
retf
test
push
add
mov
sub
dec
xor
xor
adc
popf
and
xchg
repnz
adc
iret
(bad)
fwait
loop
push
cmp
stos
pop
xchg
addr16
(bad)
das
out
les
cmp
pop
xor
setne
mov
push
cs
mov
loop
aam
pop
repnz
test
xchg
xor
pop
dec
int
into
xchg
scas
ret
jmp
ss
icebp
fwait
iret
or
mov
xchg
mov
add
scas
xchg
outs
clc
dec
shl
jl
iret
not
stos
or
popa
mov
stc
loope
push
xor
jmp
inc
mov
cmp
mov
push
inc
xchg
pop
xchg
enter
cwde
aam
or
pop
fld
mov
test
ins
push
mov
mov
adc
fcomp
xlat
push
je
xchg
jae
pop
not
ret
inc
div
jl
int
mov
mov
and
pop
loope
jp
xchg
test
stos
push
movs
xchg
shl
xchg
add
xchg
cmp
mov
stc
sbb
inc
rcl
or
xchg
and
repz
jbe
aas
xchg
pop
xchg
fld
xchg
or
sbb
fwait
repnz
mov
push
push
xchg
mov
cmp
push
in
mov
retf
pop
xchg
sub
mov
test
cdq
jno
es
mov
mov
sbb
fwait
pop
sbb
lds
test
xchg
adc
mov
call
cmp
imul
pop
xchg
xchg
jb
test
mov
ds
xlat
cmp
ja
xchg
in
cmp
dec
ret
fisub
xchg
popa
movs
fimul
add
lods
push
xchg
sub
mov
mov
fld
adc
icebp
mov
out
int
pop
xchg
mov
inc
xchg
inc
mov
xor
xchg
test
mov
adc
and
rcl
jl
jb
pop
ins
jge
xchg
loopne
jp
fs
lahf
lock
push
mov
xor
aad
or
mov
sbb
mov
int3
inc
pop
(bad)
xchg
rcr
cli
shl
adc
call
les
ret
into
popf
bound
add
mov
pop
(bad)
std
ins
sub
jno
xchg
xchg
(bad)
aas
cmps
gs
sub
shl
fisubr
adc
and
je
cwde
cmp
scas
sahf
aam
push
dec
add
lock
retf
outs
sub
jae
xor
mov
mov
fwait
mov
aam
arpl
jp
adc
stos
mov
lock
inc
add
call
xor
pop
lods
push
loopne
ins
xlat
push
mov
test
push
xchg
ret
sbb
cmp
stc
dec
or
movs
pop
jge
push
xchg
ss
sub
(bad)
xchg
in
ds
sbb
pusha
leave
jp
xchg
sbb
inc
xor
adc
sub
xchg
shl
sbb
dec
mov
xchg
fiadd
xchg
dec
xor
lock
adc
or
xchg
arpl
pop
mov
cli
xchg
aam
xchg
sti
shl
mov
mov
dec
xchg
jb
stos
cmc
cmps
shl
adc
cmps
xchg
push
jecxz
jae
rol
gs
ret
cmc
cmc
imul
scas
add
popa
nop
push
pop
adc
inc
test
enter
mov
fiadd
push
adc
xchg
xchg
das
pop
add
stos
dec
adc
xchg
xlat
lds
cmp
iret
(bad)
pop
hlt
lahf
dec
sub
pop
shl
addr16
xchg
imul
std
aaa
ret
shl
mov
xchg
out
pop
inc
stos
dec
test
test
mov
into
cmp
leave
rcl
ja
xor
push
(bad)
call
leave
adc
fidiv
xchg
push
mov
jo
xchg
cdq
cmc
movs
icebp
fnstcw
aam
aad
and
inc
(bad)
mov
dec
cs
jmp
hlt
nop
dec
lahf
cwde
(bad)
scas
ret
adc
addr16
js
fidiv
jno
or
mov
in
(bad)
nop
mov
sahf
jbe
xchg
stc
sbb
lahf
hlt
ja
fwait
mov
retf
movs
mov
ret
push
mov
add
retf
stos
jo
mov
xchg
int
call
xchg
cs
mov
pop
pushf
mov
jl
add
lahf
xor
jbe
jmp
pushf
xchg
cli
iret
mov
nop
xchg
fild
xor
jns
and
jo
add
sbb
inc
sub
or
mov
mov
jmp
xchg
xor
inc
jnp
dec
xchg
sbb
call
jecxz
scas
mov
(bad)
adc
fs
sbb
imul
(bad)
lods
mov
inc
inc
xchg
jp
xchg
or
loope
jns
dec
stos
mov
push
mov
inc
daa
(bad)
xchg
cwde
inc
(bad)
js
sti
mov
jmp
jae
not
je
xchg
shl
mov
or
in
or
dec
add
sti
inc
push
fstp
push
xchg
lds
out
mov
adc
int
outs
jns
shl
repnz
and
push
mov
int3
xchg
addr16
cmps
fwait
and
xchg
push
jmp
mov
imul
dec
xchg
sub
add
and
or
imul
fwait
push
cld
mov
jmp
sbb
clc
(bad)
stos
xchg
in
dec
fadd
stos
or
cdq
xchg
xchg
js
mov
mov
and
js
adc
retf
jg
xchg
stc
adc
fwait
pop
icebp
int3
xchg
mov
push
push
mov
adc
xchg
test
out
xor
aas
push
stos
xchg
(bad)
retf
repz
xchg
sbb
(bad)
mov
mov
mov
adc
or
xchg
and
fxch
fwait
enter
pop
jae
fwait
sbb
int
cmc
xchg
test
lea
or
xchg
xlat
push
shr
int3
into
add
js
push
mov
ja
push
icebp
es
iret
mov
inc
inc
mov
xchg
out
ins
std
lock
cmc
stos
fs
sbb
sbb
popa
mov
cmp
push
popf
mov
mov
mov
adc
cld
dec
cmc
add
pop
(bad)
xchg
cmps
(bad)
int3
fld
mov
pop
popf
pop
cld
jge
test
inc
iret
xchg
(bad)
out
data16
sbb
xchg
aad
sub
adc
mov
ja
out
inc
adc
pop
xchg
dec
xchg
and
mov
mov
push
fwait
sar
add
pop
mov
mov
out
push
or
fadd
adc
call
mov
sahf
in
inc
es
xchg
jp
test
stos
cmp
mov
dec
scas
mov
xchg
cld
or
adc
cmp
adc
xor
xchg
test
lods
pop
add
add
(bad)
xor
cmp
mov
mov
(bad)
fnstenv
lods
push
xchg
ret
in
xchg
ficomp
lds
ret
mov
cmp
iret
or
fwait
cmps
in
aad
inc
xchg
lock
or
xlat
cmp
scas
mul
xchg
dec
repnz
fwait
cmps
fcom
inc
hlt
mov
repz
and
and
push
icebp
xor
push
inc
mov
cmps
fsubr
and
iret
hlt
lods
adc
pop
xor
xchg
test
(bad)
cs
out
addr16
lock
push
cmp
retf
xchg
mov
je
out
sbb
movs
xchg
push
sub
(bad)
xchg
adc
pop
xchg
scas
call
sbb
mov
fiadd
imul
mov
sbb
add
adc
fucom
cmps
jmp
sbb
or
xchg
cmp
mov
mov
(bad)
or
mov
rcr
fwait
aas
popa
out
movs
dec
xchg
and
mov
loope
iret
hlt
sbb
sahf
mov
cmp
js
push
fidiv
aam
rcr
test
stos
imul
xor
mov
push
or
es
cmp
xchg
mov
jle
icebp
xchg
cdq
push
jne
and
xchg
bound
ss
repz
fst
xchg
mov
jo
dec
sub
jnp
ss
xor
sbb
loop
iret
mov
mov
aam
sub
mov
pop
sub
xor
(bad)
test
into
push
pop
adc
pop
mov
push
jns
gs
xchg
and
cli
add
iret
sbb
xchg
jb
and
inc
push
scas
xchg
mov
cmp
cmp
sub
xchg
pushf
mov
cmps
pusha
mov
adc
loop
stos
(bad)
xchg
shr
push
or
add
mov
nop
xor
xchg
xchg
outs
dec
pop
(bad)
push
push
stos
dec
sub
test
xchg
fwait
and
sub
xor
adc
gs
mul
(bad)
xchg
inc
mov
rcl
popa
retf
shr
mov
fwait
jae
sbb
in
pop
clc
xchg
cmc
push
sti
jp
repnz
xchg
fst
pop
cwde
mov
dec
cmp
imul
(bad)
stmxcsr
(bad)
adc
clc
inc
fst
jbe
add
xchg
mov
and
cmp
and
dec
xchg
mov
test
xchg
cmp
fild
shl
push
pop
sbb
xchg
jbe
ficomp
int3
out
adc
icebp
dec
dec
inc
xchg
repnz
enter
mov
mov
or
jp
aas
sub
xchg
data16
nop
push
push
add
pop
jl
sbb
xchg
mov
ja
loop
adc
ret
dec
arpl
ins
xor
push
fwait
in
xchg
jl
sbb
xchg
mov
cwde
sub
xchg
xchg
data16
mov
xchg
xor
xchg
mov
or
xchg
sbb
xor
sub
xor
pop
dec
xchg
cmp
int3
sbb
jne
xchg
mov
and
mov
pop
out
xchg
mov
enter
test
dec
or
daa
push
sbb
loope
mov
xchg
mov
push
jb
mov
sub
sar
ret
jg
loop
sbb
mov
xor
adc
push
dec
pop
out
xchg
int
popa
mov
xchg
pop
xchg
mov
imul
mov
aam
stos
mov
and
in
inc
cld
jns
or
test
or
repnz
mov
mov
and
pop
cmc
mov
jno
xchg
cmps
xchg
xor
loop
xchg
movs
retf
scas
and
fbld
jmp
xchg
loop
ret
jns
test
mov
nop
push
sbb
inc
or
(bad)
push
daa
xchg
mov
ja
add
push
call
(bad)
shl
je
pop
add
daa
pushf
mov
lahf
sbb
inc
test
xchg
div
inc
mov
mov
fimul
in
fcom
xchg
push
xor
(bad)
mov
xchg
das
fld
mov
cmp
adc
mov
jge
fcmovbe
cdq
sbb
adc
pop
xchg
pop
test
xor
jbe
xchg
and
cmp
ins
test
mov
adc
adc
je
dec
in
fs
fcom
dec
xlat
mov
es
(bad)
scas
jp
cmp
add
sub
ret
(bad)
cmp
xor
pop
adc
rcr
dec
xchg
sub
cmp
jl
xchg
outs
or
push
push
jge
pop
xchg
inc
jo
mov
xchg
ds
and
add
dec
aas
mov
(bad)
and
ins
fidivr
pop
sub
adc
mov
mov
adc
adc
sub
sar
adc
aam
push
adc
in
mov
mov
or
add
adc
fst
(bad)
push
rcl
pushf
stos
jo
mov
jl
stc
xchg
xor
or
ror
rcr
xchg
shl
mov
outs
fstp
lds
aad
test
fst
mov
pop
mov
out
test
sub
push
ret
pop
sbb
repz
mov
popa
xor
mov
xor
cmp
sub
xchg
jg
cmp
push
sahf
xor
and
mov
je
in
dec
xchg
enter
xchg
and
xchg
jno
or
outs
js
xchg
sbb
add
dec
(bad)
mov
pop
ret
pop
pop
repnz
cwde
jle
ret
gs
and
pop
inc
xchg
addr16
mov
cmps
adc
sbb
xchg
xchg
pop
pusha
dec
mov
adc
xchg
sub
add
jecxz
add
in
in
dec
ins
xchg
adc
push
dec
int3
xchg
mov
cs
xor
aas
ret
mov
dec
mov
jl
(bad)
xchg
xchg
xchg
mov
movs
sar
iret
sub
sti
inc
xor
jp
movs
xchg
jne
je
or
add
mov
inc
pop
push
mov
popa
into
test
xor
jne
xchg
cwde
loop
rcl
(bad)
sbb
lds
in
or
lock
jb
xchg
jp
int
pusha
fwait
push
pop
fwait
pop
push
pop
mov
push
sub
or
push
fcom
mov
sub
mov
xor
cmp
in
and
adc
aaa
aam
cmp
sbb
dec
xchg
inc
hlt
pop
push
lods
xchg
inc
mov
gs
xor
xchg
sub
jecxz
push
mov
retf
xchg
and
dec
jb
xchg
jmp
scas
call
inc
frstor
test
aam
sbb
popf
psubd
sar
jmp
fist
addr16
cmp
icebp
pushf
(bad)
xchg
jg
sub
xchg
movzx
std
mov
aam
mov
mov
mov
int
mov
jnp
xchg
(bad)
xchg
cmp
mov
mov
pop
lea
(bad)
fiadd
sbb
hlt
mov
push
dec
aam
fild
mov
call
leave
xchg
shl
and
xchg
sub
xchg
scas
mov
popf
xchg
in
cmp
jmp
lahf
sar
adc
cmp
lods
(bad)
adc
pop
pop
sbb
adc
push
adc
(bad)
xlat
hlt
fs
stos
(bad)
adc
ror
retf
jmp
mov
hlt
xor
xchg
(bad)
mov
clc
out
je
pusha
and
(bad)
outs
sub
jge
fwait
pop
add
adc
les
test
dec
ret
(bad)
xchg
sub
mov
mov
mov
aad
sbb
push
aaa
(bad)
xchg
push
cmps
xchg
out
mov
mov
xchg
cmp
int3
aas
xchg
(bad)
xchg
mov
xchg
cmp
pop
xchg
popa
cmp
and
or
xchg
(bad)
xchg
mov
les
and
mov
cmp
xor
xor
inc
jo
pop
rcl
push
(bad)
jg
mov
cli
cmps
cmp
adc
pusha
sbb
leave
pop
jle
out
cmp
xchg
mov
jle
fwait
xor
adc
inc
xor
adc
push
daa
je
shr
xchg
cld
xor
fdivp
or
sahf
ss
xchg
mov
xchg
push
pop
jge
addr16
push
jmp
loopne
adc
sbb
mov
xchg
stc
pop
mov
dec
push
xchg
sbb
jmp
mov
xlat
lods
xchg
mov
test
push
adc
xchg
fwait
or
mov
in
iret
inc
retf
adc
pop
and
push
jmp
xchg
sbb
test
dec
(bad)
in
lock
add
xlat
shl
and
xchg
sub
scas
sahf
bound
mov
adc
pop
loop
test
and
scas
push
add
cwde
das
mov
jmp
(bad)
cdq
mov
mov
push
inc
pop
mov
sahf
and
pushf
and
jmp
jmp
mov
test
sbb
jbe
nop
in
(bad)
jno
sbb
fild
or
xchg
sub
stc
and
pop
pop
inc
mov
xchg
call
div
cdq
xor
sbb
adc
and
jae
out
(bad)
xchg
adc
mov
push
jne
mov
fisttp
sbb
jbe
sbb
aam
mov
or
sub
js
not
xor
xchg
xor
cmps
das
ins
xchg
mov
xchg
leave
(bad)
xchg
and
inc
jp
bound
int3
(bad)
stos
mov
xchg
pop
sub
xor
mov
hlt
retf
or
adc
test
pop
mov
ja
into
add
movs
cwde
cli
jb
adc
dec
push
mov
scas
arpl
shr
pop
pop
adc
fisub
or
outs
bound
rcr
mov
rep
out
adc
nop
push
test
jae
ja
mov
vmwrite
loope
jmp
mov
xchg
mov
add
enter
movs
imul
dec
lds
jns
and
xlat
mov
sbb
jbe
cmp
popa
and
push
and
mov
and
ret
fdiv
mov
mov
and
xchg
fcmovne
out
scas
push
int
popf
xchg
popa
or
cmp
div
inc
mov
xchg
fmul
mov
fisub
nop
enter
jne
outs
add
aaa
cli
stos
push
or
inc
push
sti
inc
or
jne
in
jnp
mov
das
xchg
adc
lahf
inc
mov
cld
sahf
(bad)
rol
xchg
or
cli
iret
cmp
dec
xchg
es
adc
push
adc
enter
mov
in
push
or
sub
ins
jmp
lahf
mov
inc
adc
es
outs
xchg
lea
js
xor
in
dec
aad
cwde
push
or
(bad)
xchg
sub
xchg
ins
aad
push
(bad)
adc
mov
push
(bad)
sub
retf
jmp
adc
or
fwait
jb
jae
inc
adc
lods
fcom
mov
push
xor
out
int
push
mov
repz
scas
pop
cmp
icebp
cmc
mov
cmps
xchg
shr
sahf
into
cmp
adc
push
xor
pop
xchg
lods
iret
and
es
test
add
bound
jmp
sbb
adc
fidivr
xchg
fist
jmp
repnz
jmp
je
bound
data16
pop
dec
push
call
mov
pop
xchg
test
sub
jb
in
loop
std
xchg
adc
mov
mul
lock
sub
add
jae
mov
lea
ins
shr
xchg
xor
test
jg
mov
jnp
cld
dec
ror
cwde
adc
push
scas
mov
retf
lods
pop
loope
sahf
outs
dec
ins
mov
sub
mov
movs
sti
dec
mov
adc
mov
mov
xor
movs
nop
pushf
sub
sbb
jl
xor
xchg
adc
and
outs
jp
jb
xchg
sbb
inc
ds
push
or
std
aam
mov
push
dec
(bad)
jmp
add
jmp
int3
inc
adc
mov
add
dec
pop
adc
cmp
call
pop
call
hlt
das
ins
repz
stos
xchg
mov
and
jle
mov
sbb
mov
push
mov
leave
mov
int
cmp
movs
add
pop
mov
sti
stos
adc
outs
lods
xor
stc
xchg
inc
pop
dec
aaa
in
dec
lock
mov
mov
adc
adc
or
sahf
add
or
inc
push
out
sar
sub
pop
pop
stc
xchg
(bad)
xchg
cmp
add
clc
inc
out
and
mov
aaa
xchg
enter
dec
sbb
mov
lahf
mov
movs
outs
aaa
mov
dec
loopne
bound
cdq
pop
mov
test
sub
sbb
loopne
rcl
sahf
adc
push
lods
jae
pop
shl
(bad)
inc
mov
xor
out
or
xchg
jae
clc
sbb
inc
xchg
fstp
and
nop
sbb
(bad)
cwde
or
jnp
xchg
rcr
addr16
xchg
mov
xchg
mov
add
(bad)
aas
mov
add
aaa
cmp
pop
sahf
outs
and
dec
sti
or
sar
or
adc
sbb
xchg
push
push
cdq
jb
int3
pop
imul
xchg
dec
mov
(bad)
pusha
mov
mov
mov
mov
fisub
pop
(bad)
pop
popa
(bad)
pop
or
cs
mov
cmp
jns
xchg
xor
add
xchg
mov
adc
mov
in
mov
push
inc
jns
xchg
push
mov
xchg
movs
pop
out
shl
adc
xor
out
sbb
xchg
cmps
jne
dec
xchg
gs
mov
xchg
dec
shr
mov
in
fwait
aam
add
mov
xchg
push
jnp
test
sar
adc
ins
mov
fsubr
(bad)
js
xchg
pop
ret
jmp
mov
push
nop
mov
loopne
hlt
or
push
push
retf
lods
icebp
xchg
jbe
pop
mov
stos
adc
xchg
sbb
mov
adc
shl
daa
xchg
sbb
mov
movsx
mov
gs
lds
outs
jl
leave
mov
xor
jo
sti
test
into
inc
aaa
dec
jne
pop
xor
je
(bad)
stc
mov
pop
jge
inc
jbe
xchg
jo
call
sahf
mov
into
mov
out
aaa
mov
cs
jmp
xchg
loop
xchg
mov
ret
push
and
fwait
test
cs
xor
jb
inc
lock
fmul
out
scas
xchg
mov
sbb
mov
pop
shr
xor
mov
fisttp
lahf
mov
sbb
or
push
pusha
in
xor
mov
es
pop
jo
add
dec
rcl
dec
adc
push
in
xchg
imul
sbb
push
xchg
pop
sub
push
scas
in
or
xor
jle
stos
xchg
sub
sub
jbe
mov
in
push
pop
iret
dec
fwait
xor
cdq
xchg
(bad)
ficom
jmp
xchg
dec
dec
pop
push
gs
and
xchg
addr16
sub
and
pop
jae
scas
clts
(bad)
dec
mov
cdq
sub
jno
cmps
out
or
(bad)
(bad)
nop
sub
shl
test
pop
jl
jmp
dec
xchg
pop
jge
add
hlt
xchg
call
sbb
test
mov
cmp
and
pop
repz
daa
jp
sbb
add
push
xchg
dec
sub
mov
xor
not
outs
fld
ret
rcl
into
xchg
dec
adc
cmps
inc
jbe
jp
cwde
mov
ss
call
mov
sbb
sbb
xchg
imul
and
mov
fwait
adc
fiadd
add
sbb
mov
and
jbe
fwait
pusha
aad
in
lods
jb
xchg
adc
jl
inc
nop
sbb
in
xchg
imul
mov
lods
imul
sub
pop
sti
into
ins
jp
xchg
mov
inc
inc
sub
scas
xchg
mov
aad
jecxz
stc
pop
add
fcom
mov
inc
xor
or
push
shl
or
xchg
sbb
push
movs
test
lods
pop
add
xchg
add
adc
xchg
or
push
xchg
add
push
xor
push
lea
add
(bad)
fmul
sbb
(bad)
jmp
and
call
xchg
dec
jmp
addr16
dec
sti
lahf
lea
inc
xchg
call
cmc
into
mov
fistp
xchg
or
dec
mov
xchg
stc
fcmovb
test
xchg
fsubr
ret
scas
aam
push
fs
push
xchg
imul
dec
outs
xchg
les
sti
sbb
push
into
xchg
pop
fmulp
or
fmul
add
sub
push
cmp
xchg
xchg
mov
mov
xchg
bound
and
dec
cmp
xor
mov
push
xchg
xchg
out
push
inc
xchg
hlt
mov
mov
or
xchg
inc
js
jg
xchg
pop
fcom
dec
retf
and
iret
frstor
mov
or
push
and
enter
mov
lds
mov
rcl
nop
jo
retf
fwait
in
mov
dec
add
mov
fist
xchg
xchg
jecxz
mov
test
ret
push
cmp
mov
loopne
jbe
cmc
xchg
add
xchg
push
popf
nop
inc
jmp
sub
ds
std
mov
aad
jle
inc
push
add
jmp
js
mov
adc
loope
es
jnp
push
xchg
mov
cwde
pop
lea
dec
arpl
xchg
scas
stos
in
std
(bad)
lods
jecxz
mov
xchg
loope
pop
xchg
mov
xchg
enter
mov
xor
adc
add
pop
xchg
mov
cmp
mov
push
adc
mov
sbb
test
iret
dec
call
xor
ja
xchg
sbb
jmp
push
inc
mov
pop
aaa
pop
sbb
lea
pop
mov
xchg
fisttp
test
push
ins
js
xchg
cmp
mov
js
xchg
or
loop
add
lods
ins
std
mov
rcl
cld
jnp
in
mov
sub
mov
pop
mov
xchg
pop
sahf
and
out
cmp
or
xchg
popf
adc
sub
lods
adc
push
and
xchg
movs
mov
mov
push
push
xchg
inc
(bad)
and
es
leave
xchg
inc
push
fisttp
pop
cli
adc
xchg
mov
pop
push
popa
xchg
mov
fwait
xchg
pushf
xchg
int
(bad)
in
jge
cli
fwait
add
das
or
sbb
retf
mov
sbb
add
imul
leave
jne
call
xlat
xchg
xchg
xor
jne
mov
pop
sar
push
push
xchg
sahf
neg
dec
xchg
repnz
dec
into
adc
mov
add
pop
iret
push
jg
adc
sub
mov
dec
push
rcr
into
pushf
in
test
or
adc
cmps
xchg
jmp
gs
xchg
xchg
jnp
(bad)
daa
cli
sbb
mov
xchg
jmp
(bad)
jne
or
mov
sbb
mov
xchg
cdq
adc
das
push
ror
add
mov
stos
call
xchg
movs
fisub
lods
mov
xchg
jle
adc
xchg
fadd
lods
xor
stos
js
mov
xchg
or
xchg
outs
push
mov
and
mov
pop
in
sete
scas
sbb
xchg
fsubr
push
fstp
xchg
adc
js
inc
xchg
and
(bad)
jg
mov
push
arpl
xchg
inc
mov
xchg
push
mov
cli
gs
daa
fst
adc
xchg
jmp
movs
jecxz
mov
adc
imul
fcom
push
loope
fist
add
(bad)
jno
push
mov
pop
inc
mov
pop
jbe
sbb
movs
fist
cmp
fs
xchg
inc
mov
jge
sub
sub
je
mov
xchg
movs
retf
mov
add
mov
fadd
jl
sti
mov
mov
into
jb
push
aad
retf
push
fwait
adc
pusha
(bad)
outs
mov
xchg
mov
in
inc
int3
push
les
das
int
mov
sbb
xchg
and
or
(bad)
fst
dec
inc
popa
xchg
xor
call
xchg
add
icebp
mov
movs
dec
out
aam
pop
adc
mov
xchg
push
jg
cmp
mov
cdq
aaa
and
cwde
add
push
lock
adc
jmp
add
push
xchg
cmp
mov
pop
pop
mov
pop
ins
adc
iret
fdivr
std
xchg
sub
test
fstp
fs
adc
xor
jg
or
(bad)
cld
push
push
in
jb
xchg
inc
mov
scas
mul
xchg
xchg
dec
cs
ins
push
jo
adc
sub
adc
(bad)
xchg
pop
fild
xor
jnp
sbb
sbb
mov
xchg
ret
jo
cs
in
add
sub
xor
xor
ret
xchg
fdiv
loopne
adc
call
call
xchg
int
sub
push
(bad)
and
fbstp
pop
adc
imul
mov
xchg
add
dec
mov
cmps
jbe
xchg
outs
pop
dec
xchg
ja
mov
and
mov
into
pop
je
jg
nop
cli
jmp
push
int3
fldcw
push
push
lods
xchg
push
je
jmp
xchg
jne
xchg
xor
out
mov
adc
mov
or
pop
inc
push
aas
in
lods
adc
mov
xchg
sar
xor
xchg
xor
repnz
or
push
mov
and
std
xchg
push
(bad)
punpcklwd
dec
jnp
xchg
jno
(bad)
xlat
sbb
shl
idiv
xchg
stos
shl
cmp
and
out
mov
and
std
fwait
push
xchg
push
add
fnsave
xchg
rcl
mov
nop
cld
xchg
fld
jne
or
xchg
cmp
arpl
xchg
fidiv
in
jg
scas
in
retf
sar
(bad)
fst
into
daa
pop
xchg
in
push
ja
ficom
mov
sar
adc
mov
jnp
pop
dec
xchg
std
out
fsub
(bad)
jl
mov
mov
dec
push
out
test
mov
sub
in
mov
push
cmc
push
xchg
jmp
dec
sub
lods
add
dec
mov
xchg
(bad)
xchg
and
into
popa
pop
cmps
hlt
pop
sbb
pop
inc
imul
outs
xchg
cmp
pop
outs
jbe
xchg
push
push
or
fs
cli
and
mov
jns
xor
fistp
cmp
ja
pop
xchg
hlt
cmp
dec
xchg
add
push
jmp
cmps
inc
jmp
xchg
je
leave
sub
cs
dec
and
lods
outs
(bad)
retf
xchg
jg
and
mov
fwait
jbe
sub
cmp
jle
push
popa
xchg
push
pop
pop
lahf
addr16
mov
movs
adc
jmp
icebp
pusha
fwait
push
stos
mov
pop
and
jle
test
xchg
and
push
cmp
xchg
jl
mov
pop
sbb
xchg
retf
and
cs
sub
jae
imul
mov
mov
push
repz
push
dec
ret
cmp
fdiv
mov
mov
dec
xchg
jmp
push
test
and
es
ins
lea
int
sar
lods
xchg
cwde
xor
fistp
push
xchg
and
scas
dec
mov
fst
out
sub
pop
mov
cwde
or
inc
push
js
stc
mov
push
shl
inc
inc
sbb
inc
fwait
mov
push
rcl
mov
xchg
cmp
inc
popf
jle
fwait
fwait
movs
push
adc
test
cmp
xchg
jb
dec
jne
and
jns
push
repz
dec
es
xor
inc
adc
mov
jnp
jge
inc
xchg
and
aas
xchg
jp
div
mov
pop
leave
xchg
add
xchg
mov
fcomp
cdq
sub
jo
or
icebp
movlps
push
pusha
sbb
scas
hlt
retf
adc
cmc
sbb
add
shr
mov
push
mov
sub
dec
jno
mov
sub
stos
cli
hlt
rol
(bad)
pop
pop
cmps
test
add
scas
fwait
mov
sahf
and
mov
sub
jbe
imul
xchg
stos
movs
cmc
add
push
jl
(bad)
call
xchg
lea
push
repnz
dec
into
xchg
push
(bad)
jmp
mov
nop
lahf
xchg
inc
test
sbb
clc
inc
or
inc
jne
sbb
fmul
inc
jle
adc
fwait
cmp
xor
push
xchg
xchg
mov
or
xchg
scas
mov
outs
sub
jg
or
sete
cdq
xor
aaa
in
pop
xchg
sbb
data16
xchg
xchg
push
pop
jmp
adc
data16
mov
cwde
xchg
aad
cmp
push
pushf
es
pop
sti
stos
aad
fsub
aam
mov
icebp
mov
or
pusha
lods
cmp
mov
daa
mov
js
in
dec
aam
push
mov
cmps
push
mov
nop
sbb
xchg
xor
aaa
mov
xchg
xchg
adc
add
ror
push
xchg
je
call
xchg
fcomp
pop
mov
pop
cmp
xchg
adc
lock
adc
scas
cmp
mov
(bad)
fadd
xchg
sub
dec
fcmovbe
xchg
fild
sub
std
(bad)
xchg
or
les
out
push
dec
mov
xchg
jno
xlat
ins
cmc
push
(bad)
xchg
fild
int
cmp
push
out
loope
bound
loope
cmps
lock
mov
lds
data16
sar
(bad)
scas
test
push
fiadd
and
or
pop
inc
xchg
sbb
cmps
xchg
add
cli
js
jp
xor
and
clc
mov
jnp
bound
fdivr
cmp
call
xchg
outs
jg
into
das
imul
push
(bad)
fwait
call
fwait
div
cmp
pop
out
dec
inc
lods
sbb
vaesenc
mov
movs
std
shl
inc
mov
add
xchg
ins
mulps
push
cmp
jne
mov
rcl
loopne
int
out
sti
lds
xchg
out
(bad)
mov
or
aaa
inc
repz
dec
sbb
push
sub
in
mov
aas
pop
rcl
jb
test
(bad)
push
xchg
cmp
js
adc
mov
and
cld
stc
xchg
dec
mov
pushf
and
out
or
cmp
and
xchg
push
jne
imul
dec
and
xchg
into
pop
pop
repnz
sbb
jmp
mov
xchg
(bad)
int3
pop
or
xchg
ja
xchg
js
xchg
push
ret
mov
xor
push
jmp
fcom
(bad)
push
cmps
cmc
mov
mov
popf
(bad)
or
sub
xchg
xchg
popa
pop
cdq
cmp
lods
ror
jb
mov
in
aad
pop
pop
xchg
xor
dec
cld
xchg
sbb
mov
fsub
jbe
sub
mov
mov
enter
push
sbb
mov
sbb
mov
aam
jne
or
add
adc
shl
push
and
cmc
xchg
adc
cli
out
xor
sub
(bad)
out
jg
mul
adc
xchg
add
retf
sub
and
xchg
mov
mov
mov
dec
inc
dec
xchg
dec
push
or
mov
stos
xchg
(bad)
sub
xchg
fbld
jecxz
pop
outs
inc
pop
fst
sbb
pop
std
cmp
ja
int
jne
push
out
stos
mov
xor
pop
xchg
ret
cwde
fcomp
std
inc
and
iret
push
mov
sub
in
push
arpl
push
and
idiv
shr
cmp
and
scas
js
mov
das
mov
je
adc
test
pop
jmp
mov
(bad)
adc
sbb
xor
fsubr
mov
aad
jne
neg
xor
retf
rcl
(bad)
outs
test
sub
xchg
xchg
lods
not
aad
sub
lds
mov
int3
sbb
push
push
xor
repnz
mov
fdiv
cmp
mov
lods
xor
aam
cmps
mov
cmp
xchg
ins
div
adc
push
push
xchg
ret
or
sub
sub
mov
sub
pop
dec
xchg
movs
daa
rcl
cdq
addr16
or
push
rol
xchg
lahf
xor
out
sub
inc
push
or
and
(bad)
xchg
bound
xchg
fwait
jmp
cmp
jge
pop
mov
xchg
jp
cmps
and
adc
cmp
pusha
push
and
sub
add
ds
ins
loop
mov
pop
cwde
fstp
repz
jo
sbb
push
and
mov
xchg
imul
xor
cld
xchg
sub
sbb
cdq
adc
pop
or
popf
sti
repnz
xchg
ins
dec
sar
ins
jne
xchg
mov
inc
neg
(bad)
aad
push
xchg
into
aas
mov
and
xchg
or
and
clc
xor
push
jae
push
(bad)
jmp
addr16
inc
xchg
rcl
or
adc
fwait
sbb
or
mov
mov
inc
jo
aam
mov
in
add
shr
iret
mov
imul
les
outs
int3
xchg
xchg
xchg
push
xchg
mov
ror
adc
push
retf
scas
cmp
lods
je
sti
not
xchg
ror
cdq
icebp
fwait
clc
je
xor
movs
pop
add
xchg
jg
in
mov
pop
or
fwait
inc
xchg
movs
sub
push
shl
mov
cli
adc
daa
scas
mov
ret
mov
loop
mov
or
mov
dec
int
hlt
out
xchg
repnz
pushf
call
cli
int
out
xor
ins
push
shl
cmp
iret
int3
fs
ja
inc
xchg
adc
mov
push
fwait
pop
xchg
outs
dec
cdq
out
inc
ror
xchg
cli
mov
mul
ret
lock
xchg
sub
inc
dec
and
xor
scas
fs
nop
cmp
jo
adc
sbb
mov
or
jns
sbb
mov
xchg
mov
pop
xchg
or
(bad)
outs
jb
or
add
pop
inc
out
xchg
dec
repz
fidivr
test
in
xchg
ins
jne
pusha
and
int3
lock
lahf
and
idiv
dec
xchg
mov
dec
jl
push
jne
sub
fild
les
xor
fwait
xchg
popf
dec
pop
mov
xchg
out
jns
add
mov
ds
push
popa
icebp
xchg
fisttp
mov
cmovl
adc
aam
clc
lahf
lock
xor
xchg
inc
xchg
into
xchg
cmp
mov
pop
stos
bound
ffree
scas
and
xchg
stos
call
xor
add
shl
dec
xchg
pop
pop
orps
outs
lahf
sbb
hlt
inc
test
and
nop
out
and
xchg
outs
pop
aam
mov
jp
xchg
and
xor
xchg
test
fcom
add
and
loop
fidivr
call
pop
mov
lods
cmp
sbb
ret
push
adc
cli
or
pop
add
retf
cmps
xchg
ja
cwde
pop
pop
dec
push
pop
xchg
xor
add
xor
mov
int3
out
jnp
and
or
popf
sbb
out
fstp
mov
xchg
iret
inc
mov
retf
jl
(bad)
xchg
sub
mov
jne
mov
scas
push
xchg
push
jae
lea
push
aam
retf
stos
xchg
mov
scas
pop
and
dec
shld
inc
jle
mov
or
je
xor
jl
js
sub
sbb
adc
push
call
(bad)
out
jle
lods
pop
xchg
aam
xchg
retf
push
jne
outs
stos
xchg
je
test
xor
cmp
aam
nop
adc
mov
shl
dec
je
or
popf
xor
or
xchg
xchg
jl
inc
xchg
in
aad
shl
bound
punpcklwd
xchg
cdq
push
test
fs
xor
dec
lods
(bad)
fld
push
rcl
adc
sub
rol
or
jmp
outs
repz
push
jecxz
scas
in
push
cmp
hlt
stos
jg
jmp
retf
xor
push
inc
mov
enter
or
and
xor
mov
js
xchg
ins
fidiv
ja
pusha
idiv
cdq
sar
mov
adc
pop
pushf
mov
mov
test
das
xlat
mov
je
sbb
add
xchg
and
cmp
dec
mov
call
out
popa
loopne
xchg
push
cli
sbb
adc
loope
xchg
and
mov
jae
movs
mov
(bad)
sub
nop
inc
out
shl
scas
aam
mul
mov
int
jg
mov
test
test
add
xchg
jo
push
ss
push
xchg
lea
shl
xchg
arpl
push
jg
mov
adc
inc
xor
out
adc
cmp
(bad)
mov
test
mov
sub
stos
js
xchg
out
outs
sbb
add
frstor
xchg
jbe
or
xor
ret
xchg
add
sti
xor
lock
mov
ret
retf
shl
dec
adc
xor
xchg
and
mov
icebp
dec
int3
sub
int
xchg
pop
test
xchg
push
push
leave
push
es
shr
adc
dec
rol
xchg
hlt
es
add
sub
and
cmp
mov
xchg
mov
xor
pop
mov
addr16
cmp
jmp
imul
pop
test
cmps
ins
gs
cmp
xchg
adc
inc
inc
out
fwait
jecxz
out
sbb
inc
jne
imul
outs
scas
pop
pop
mov
xor
push
xchg
in
mov
push
xchg
enter
jmp
popf
outs
pop
call
cmp
out
cmp
mov
xlat
mov
mov
xchg
sbb
fisttp
sub
xor
fwait
pushf
add
mov
push
or
imul
jns
lds
adc
aam
mov
mov
inc
sbb
cmc
xchg
dec
or
xchg
outs
test
in
dec
enter
stos
or
popf
mov
sbb
movs
sbb
sbb
inc
ins
mov
lahf
jg
and
and
mov
inc
loop
xlat
repnz
xchg
or
xchg
dec
mov
xchg
or
mov
adc
pop
jecxz
sbb
sub
sub
push
mov
dec
fist
je
into
jl
mov
push
jnp
adc
ja
dec
(bad)
fdiv
mov
dec
dec
or
pop
pop
cmp
(bad)
mov
xchg
int
xchg
mov
shl
fmul
adc
rcl
inc
push
xchg
icebp
dec
int3
test
jmp
aaa
mov
xchg
add
outs
xor
mov
xchg
xchg
pop
sub
mov
std
push
adc
popa
or
xchg
inc
(bad)
push
mov
pop
inc
mov
sub
lock
ret
(bad)
(bad)
xchg
div
mov
push
lods
sbb
mov
xchg
mov
es
clc
or
shl
pop
jne
dec
stos
and
mov
mov
leave
sub
adc
cmps
inc
add
dec
xchg
push
push
mov
or
adc
inc
mov
not
es
mov
inc
test
xchg
jne
ins
(bad)
jecxz
test
cld
and
ins
xlat
cmp
test
adc
cdq
adc
push
je
xchg
jmp
cmps
jnp
sub
in
imul
test
xchg
scas
out
push
aam
mov
cmp
aas
mov
xchg
cli
ja
mov
push
xchg
outs
test
idiv
test
mov
dec
jle
mov
lds
xlat
xchg
cli
push
sub
aam
push
inc
fbstp
jbe
pop
cmp
sbb
xchg
in
cmp
loop
nop
push
ins
mov
int3
jl
repnz
xchg
inc
cld
dec
fcomp
sub
pop
mov
je
lahf
ja
sahf
cmps
mov
mov
inc
mov
sbb
dec
mov
jae
sub
or
lahf
mov
lock
es
jno
stos
sub
mov
adc
xchg
sar
mov
retf
sub
adc
mul
and
shl
frstor
jecxz
mov
xchg
cli
sub
into
vmread
or
xchg
in
call
and
jmp
(bad)
jmp
xchg
mov
dec
inc
jns
retf
mov
ss
push
xchg
movs
cmps
inc
mov
mov
or
hlt
ds
xor
sbb
xor
test
xchg
dec
fwait
mov
xchg
data16
xor
pop
push
mov
sub
add
test
pushf
ja
aas
mov
xor
xchg
push
mov
sbb
fadd
inc
or
push
jno
xchg
rcr
xor
xchg
and
js
mov
dec
nop
xchg
movs
icebp
mov
cmps
out
push
sub
or
xchg
sbb
pop
adc
js
movs
pusha
stos
jl
mov
push
mov
mov
adc
push
xchg
mov
and
sbb
push
xchg
mov
leave
xchg
and
dec
or
lods
inc
mov
push
jle
out
ret
ins
push
jnp
push
adc
dec
vpaddb
dec
mov
pop
iret
inc
bound
inc
sub
outs
mov
stos
push
sbb
xchg
retf
mov
xchg
sub
dec
adc
(bad)
xor
inc
arpl
jle
mov
mov
cwde
xor
adc
xchg
fstp
mov
cdq
jecxz
cmps
mov
cmp
gs
pop
aam
add
mov
cmp
fidiv
jbe
hlt
fstp
mov
popf
(bad)
xchg
popa
ret
lods
push
sbb
repnz
mov
xor
stos
push
cmp
mov
jecxz
xor
addr16
xchg
push
outs
sahf
xchg
mov
(bad)
in
imul
mov
lea
hlt
int3
sbb
add
mov
lahf
fcom
loop
sbb
lods
xchg
in
jge
jle
jns
xchg
add
jecxz
call
int
movs
out
inc
inc
lods
jmp
rcr
pop
add
scas
push
inc
cmp
test
dec
inc
lods
imul
cs
mov
test
cmp
cmp
aam
mov
xchg
pop
fwait
inc
dec
sub
movs
not
cmps
mov
fwait
or
push
or
and
cdq
aam
xchg
xor
ficomp
lahf
enter
mov
ret
sbb
or
xchg
ins
dec
xchg
mov
or
xchg
std
fwait
addr16
fs
je
lea
fsubr
adc
outs
jbe
or
lds
mov
mov
pop
cmp
pop
mov
ret
test
stos
popa
dec
xchg
imul
add
xchg
aas
sbb
xchg
test
mov
add
(bad)
or
repnz
xchg
pop
mov
icebp
xor
cdq
sbb
jp
rol
push
xchg
js
dec
dec
jmp
mov
outs
sbb
mov
adc
push
pop
xchg
les
loopne
push
pop
ins
cmp
int3
xchg
jnp
ds
xchg
fs
fwait
sub
test
jp
xor
cld
xchg
sub
mov
sbb
pop
loop
in
mov
hlt
cmps
cmp
xor
repnz
js
pop
xor
shr
inc
xchg
push
call
cmp
pop
sub
xchg
retf
cmps
(bad)
pop
repnz
xor
cmp
xchg
jge
push
xchg
(bad)
inc
pop
movs
fs
mov
xchg
mov
xchg
dec
jle
xlat
stc
xchg
xor
hlt
ins
xchg
cmp
ret
in
inc
out
xchg
leave
(bad)
mov
xchg
iret
push
nop
shr
sbb
push
jne
das
rcl
mov
lahf
xchg
pop
xchg
add
adc
(bad)
add
jg
xchg
call
out
jns
imul
push
sbb
sahf
icebp
dec
xchg
cwde
test
xchg
and
adc
xchg
ins
out
adc
call
in
ret
sub
fs
test
mov
xor
iret
cmc
rcr
(bad)
dec
ins
sub
movs
pop
loope
mov
push
ror
jge
ds
cld
jp
int
sete
ss
push
jmp
push
and
mov
dec
lds
jo
ss
pop
xchg
pop
pop
outs
mov
int3
push
push
test
mov
mov
sti
shl
sahf
shl
cmps
or
mov
xchg
aam
sbb
cmp
jne
xchg
adc
add
retf
les
dec
mov
sbb
mov
dec
xor
push
out
popf
in
pop
adc
call
ficom
jg
mov
jl
xchg
test
call
xor
xchg
sub
cmp
jb
(bad)
jp
xchg
test
stos
fs
mov
call
xchg
xchg
test
mov
fwait
(bad)
push
lock
call
sahf
mov
xchg
jb
iret
mov
stos
mov
xor
repz
xor
popa
cdq
js
enter
xchg
(bad)
dec
pop
cmps
daa
loop
xlat
xchg
hlt
sub
fist
and
xor
adc
ret
xchg
cmps
outs
add
aam
cwde
inc
xchg
jo
or
xor
xor
aad
mov
ss
loopne
adc
rcr
fwait
nop
inc
(bad)
retf
cmps
add
imul
lods
push
xchg
stos
sub
xchg
and
xchg
enter
cli
xchg
xor
xchg
inc
sbb
xchg
cmc
adc
daa
sar
lds
enter
cs
fdivr
movs
hlt
repz
push
push
in
rcr
xchg
movs
fistp
or
or
xchg
mov
sbb
mov
je
and
adc
push
xchg
out
pop
repz
mov
adc
mov
xchg
pop
fisttp
push
xchg
js
bnd
cmps
loop
xchg
sbb
jb
lahf
push
mov
es
xchg
push
ins
ficom
test
push
test
loopne
xchg
pop
lods
icebp
mov
push
sub
xchg
pop
mov
push
not
das
fisubr
push
cdq
loopne
shl
sbb
xchg
scas
push
xchg
inc
xchg
mov
dec
das
pop
shl
rcl
dec
fwait
daa
psubusb
mov
xchg
mov
pop
pop
loopne
fcom
push
sbb
add
das
ins
xchg
rol
adc
popf
sti
mov
xchg
mov
mov
mov
fadd
gs
cmp
int3
add
jg
je
push
pop
xchg
dec
in
out
loop
add
and
popa
push
inc
(bad)
inc
xchg
adc
jnp
repz
push
mov
push
xchg
addr16
jmp
or
aam
ret
mov
add
or
les
shl
xchg
loope
mov
imul
pop
dec
mov
dec
loopne
es
inc
xchg
sar
mov
or
das
jo
add
mov
xchg
int
jbe
cmp
(bad)
pop
mov
stos
xchg
mov
sbb
jl
sahf
movs
nop
bound
xor
push
mov
fild
sbb
add
mov
stos
int
xchg
xchg
mov
retf
cli
scas
cmps
data16
ficom
in
pop
js
xchg
add
and
hlt
(bad)
mov
xchg
fwait
adc
dec
je
push
stos
mov
and
dec
mov
add
xor
sbb
jl
xchg
mov
inc
mov
xchg
xchg
test
cwde
hlt
stos
jno
xchg
loopne
dec
push
xchg
and
jle
jb
mov
mov
call
sahf
pop
test
xor
xchg
and
nop
and
fwait
sub
inc
xlat
cmps
xor
inc
push
xchg
sahf
out
dec
cmp
jae
xor
cdq
push
mov
xchg
(bad)
xchg
movs
mov
int
ret
jge
pop
add
pop
xchg
mov
mov
mov
lahf
xchg
jg
inc
inc
jp
mov
pop
hlt
xchg
mov
add
sbb
into
fld
inc
stos
pop
xchg
inc
adc
add
pop
pop
ds
jbe
adc
popfw
jnp
xor
jmp
inc
push
mov
adc
outs
out
es
in
jecxz
jp
sbb
jl
cdq
cmp
fiadd
ss
imul
add
pop
cmp
lock
dec
cdq
push
sub
cli
xchg
sbb
ficom
cmc
xor
mov
xchg
or
xor
lahf
mov
xchg
jo
inc
mov
cwde
scas
stos
test
lea
popf
stos
pcmpeqb
pusha
and
int
jl
ins
mov
xchg
cmp
cmps
xchg
call
setnp
(bad)
xchg
inc
xchg
cwde
popa
arpl
pop
cs
xchg
pop
mov
not
mov
xchg
movs
aaa
and
dec
mov
xchg
fmul
(bad)
dec
and
jle
rcr
in
xchg
push
adc
fwait
xchg
add
mov
xchg
xor
enter
xor
inc
xor
mov
imul
adc
cwde
mov
sbb
or
xor
repnz
jg
adc
aaa
cmps
into
xchg
add
cmp
jbe
and
outs
enter
imul
push
sub
cmove
test
ss
sti
adc
out
push
cld
mov
xchg
mov
sub
xchg
lods
xchg
fst
jno
pop
xchg
aaa
or
out
jne
dec
cmps
in
addr16
(bad)
and
add
add
pop
nop
jp
push
xchg
mov
lods
jmp
xchg
add
push
mov
cmp
scas
adc
mov
inc
cmp
jg
xor
scas
outs
adc
je
adc
mov
xchg
fld
jmp
(bad)
cmc
or
int3
scas
sbb
movs
adc
repnz
cmp
inc
fcom
mov
push
add
or
pop
aas
fwait
mov
cli
cmp
pop
xchg
clc
mov
and
xchg
jo
std
fnstcw
cli
add
inc
das
imul
adc
or
xchg
outs
enter
pop
xor
xchg
sub
(bad)
mov
add
pop
icebp
hlt
and
push
pop
shl
pop
js
movs
xchg
imul
or
int3
adc
jae
jmp
and
cmps
mov
mov
mov
cwde
addr16
mov
sub
xchg
and
xor
xor
mov
add
dec
nop
or
xor
popa
jo
push
mov
std
addr16
add
xor
push
movs
xchg
xchg
dec
test
mov
(bad)
push
lods
xchg
je
jl
sti
imul
rol
xchg
xor
clc
jmp
xchg
inc
jbe
in
hlt
aaa
push
bound
add
xchg
js
and
das
out
je
fcom
sub
ds
pop
xchg
or
ins
cmps
in
popa
xchg
jecxz
lods
pop
pusha
add
rcl
inc
add
lahf
mov
xchg
outs
or
je
pop
fwait
inc
pushf
cmp
bound
call
fistp
outs
les
adc
xchg
lds
scas
pop
aas
bound
xchg
jo
cwde
lods
out
inc
loop
lahf
push
push
(bad)
sahf
jns
icebp
xchg
jmp
jne
xlat
push
loope
mov
retf
xor
call
es
and
mov
dec
jnp
popa
repz
adc
pushf
sbb
ret
push
loope
mov
neg
rol
xchg
pop
pushf
cli
mov
cwde
test
pop
sub
inc
jmp
ret
xchg
adc
add
add
and
xor
push
push
mov
ins
inc
(bad)
xchg
ror
push
fidivr
mov
in
pop
popa
xchg
imul
xchg
ss
test
les
jecxz
stc
jne
adc
xchg
cmps
cs
sbb
jbe
ins
inc
xchg
rcl
sbb
cli
xchg
test
xchg
hlt
push
ins
push
xchg
lods
into
pop
add
jb
dec
or
adc
pop
lods
lea
xor
sub
xchg
rcl
(bad)
dec
mov
mov
adc
fldcw
lds
mov
fwait
jns
retf
jae
xchg
push
in
add
jb
sub
cdq
dec
push
mov
les
mov
sbb
mov
sti
arpl
jnp
adc
das
xchg
lods
fst
(bad)
push
pusha
or
xchg
aad
and
xchg
mov
data16
push
shl
es
add
out
xchg
mov
or
mov
and
aad
push
into
push
ins
mov
sub
fwait
stos
int
(bad)
(bad)
les
(bad)
ret
stc
xchg
shl
rcl
daa
sti
mov
cmps
lds
mov
xchg
pop
movs
in
push
jmp
xchg
inc
imul
(bad)
jle
xchg
inc
adc
test
scas
jg
dec
(bad)
cs
lods
rol
nop
in
xchg
xor
ret
test
push
into
out
mov
jno
in
and
stos
test
and
and
xchg
xchg
dec
out
inc
repnz
jnp
sbb
push
ret
xchg
and
inc
push
cmp
out
push
xchg
test
pop
xor
fcomip
xchg
push
inc
(bad)
and
arpl
adc
xor
pop
push
jmp
ja
rcl
div
test
popf
push
adc
xchg
test
dec
(bad)
mov
les
ret
fidiv
pop
cli
std
retf
adc
xchg
inc
aam
cld
or
xchg
call
test
or
mov
lds
dec
mov
into
xchg
mov
mov
inc
fwait
arpl
jns
xor
retf
retf
pop
or
xchg
adc
shl
xchg
adc
push
retf
jg
outs
out
enter
dec
(bad)
js
cdq
dec
rol
pushf
repnz
cs
push
ins
cmc
fadd
outs
dec
or
add
dec
mov
cwde
jae
adc
push
enter
call
test
bound
or
xlat
fdivr
xchg
xchg
and
call
stos
pop
aam
rcr
mov
mov
in
xchg
push
jecxz
mov
stos
cwde
jp
inc
push
xchg
(bad)
jmp
xchg
sub
(bad)
not
cli
outs
mov
xchg
jge
inc
ret
jns
adc
adc
rol
outs
shl
aam
int
mov
ins
xchg
dec
pop
push
mov
jns
xchg
xacquire
loop
or
repz
int
std
cmps
shl
aas
xchg
(bad)
pop
outs
gs
push
push
mov
and
xlat
stos
mov
imul
out
adc
mov
out
sbb
gs
rcr
and
and
fnsave
jno
ds
popf
imul
xchg
push
je
xchg
mov
sbb
push
xor
cmp
ins
je
jg
xchg
xchg
rcl
popf
clc
xchg
neg
xchg
rcr
mov
repnz
fisttp
mov
adc
js
mov
xchg
sub
xor
and
ror
and
and
je
xchg
ins
aaa
push
mov
xchg
mov
mov
stos
je
mov
and
push
add
xchg
aaa
add
jecxz
mov
xchg
mov
xchg
in
(bad)
inc
xlat
jg
pop
xchg
sub
popf
jns
push
push
shl
mov
(bad)
xchg
dec
fdivr
xchg
lds
jmp
xchg
jne
ffreep
arpl
dec
sbb
pusha
or
and
outs
cli
xor
jno
movs
xchg
mov
dec
sbb
cmp
shl
push
out
neg
sbb
xor
xchg
fiadd
xchg
jnp
mov
int3
xchg
stos
inc
rcl
push
rcl
jmp
inc
xchg
dec
rcr
sbb
imul
aam
movs
sar
retf
imul
jl
adc
mov
xchg
hlt
int3
ja
fistp
add
stos
jge
imul
fist
xor
xchg
mov
jnp
rol
xchg
push
push
sub
loope
mov
xor
arpl
mov
jo
(bad)
jge
inc
nop
sub
pop
loopne
jns
lock
dec
dec
or
cwde
sub
mov
xchg
mov
and
les
xchg
push
jb
cmp
mov
popa
or
xchg
fmul
out
pusha
movs
jmp
xor
pop
jo
inc
xchg
pop
jp
inc
ja
mov
fiadd
sbb
xchg
jle
push
adc
xchg
jne
pop
or
push
out
lods
ret
jo
push
adc
leave
xchg
push
mov
and
out
push
jne
xor
mov
push
sub
mov
sbb
aas
je
add
inc
xchg
(bad)
test
fcom
mov
sbb
sbb
xchg
gs
adc
jmp
nop
popf
pop
mov
mov
xchg
push
pop
retf
push
fild
jnp
mov
lods
arpl
cld
out
js
and
jg
fdivr
jp
cmp
in
push
test
dec
and
xchg
cmovg
shl
xor
jns
push
mov
icebp
xchg
inc
js
mov
jne
(bad)
fsub
iret
add
xchg
mov
lahf
jp
inc
xchg
mov
mov
or
xor
mov
sti
xchg
sti
pop
pop
and
xchg
mov
xchg
fistp
pop
lss
inc
mov
lods
bound
xchg
push
xlat
retf
sti
push
sbb
xchg
pop
lock
xor
ror
pusha
xor
jo
out
cmp
xchg
(bad)
mov
jns
xchg
push
mov
loop
int
pop
xchg
scas
mov
shl
xchg
gs
lahf
retf
out
adc
mov
sbb
fldenv
push
xchg
ins
xor
retf
mov
xchg
dec
rcl
or
push
cmps
cmp
adc
ret
sbb
jne
aad
push
jns
jno
xchg
mov
adc
aaa
inc
sbb
xchg
idiv
test
cwde
mov
js
mul
movs
aam
das
out
jnp
or
xchg
push
cmc
sbb
mov
inc
add
fmul
add
lods
jne
adc
xchg
cmp
das
jmp
stos
inc
xchg
dec
fadd
sbb
jbe
loopne
inc
js
scas
test
in
mov
out
mov
nop
xor
xchg
sub
dec
out
add
xchg
and
loopne
dec
jl
adc
xchg
cs
adc
jns
jp
test
repnz
xor
mov
xchg
leave
fwait
cmp
and
arpl
xchg
sar
push
fst
inc
xor
jnp
aam
cmp
das
in
jbe
cmp
jle
inc
xchg
xor
xchg
cmp
std
fistp
mov
sbb
xor
or
xor
test
ins
dec
gs
mov
loop
jnp
inc
mov
stos
jmp
adc
xchg
dec
sub
(bad)
mov
out
mov
js
mov
(bad)
jl
test
mov
push
adc
sbb
dec
dec
test
scas
jmp
aam
xchg
cmps
call
outs
or
(bad)
xchg
xor
int3
mov
mov
or
jmp
and
mov
mov
xchg
add
outs
iret
or
add
mov
lods
cmp
push
cld
push
es
xchg
pop
xor
repz
retf
mov
add
daa
pop
mov
idiv
xchg
dec
ja
das
mov
repz
xchg
movs
in
or
xor
fistp
hlt
adc
and
jne
je
aas
fsubr
mov
add
lock
xchg
xchg
xchg
daa
pop
outs
das
cmc
pop
sti
xchg
push
dec
icebp
sub
cdq
scas
add
jns
mov
cmps
in
out
loope
fild
sbb
xchg
retf
or
cld
xchg
les
pusha
arpl
adc
pop
add
cmpxchg
je
xchg
jno
push
adc
outs
je
jp
xchg
pop
(bad)
(bad)
aam
enter
stc
nop
xor
gs
arpl
jb
xchg
mov
adc
sub
xchg
pop
xchg
loope
stos
in
xor
pop
push
xchg
ja
xor
loopne
jo
dec
mov
xchg
fwait
and
inc
pop
icebp
mov
dec
push
in
push
fadd
repnz
sub
out
xchg
ss
das
mov
jno
xchg
loop
fild
jmp
or
lods
ins
(bad)
clc
push
xchg
cmps
scas
inc
in
adc
xchg
xchg
xor
sbb
out
xchg
xchg
stos
in
adc
inc
xor
clc
xchg
test
inc
xchg
xchg
faddp
sbb
ror
loop
pop
cmp
mov
or
lea
mov
xchg
jp
xchg
neg
sub
scas
xchg
mov
shl
push
adc
mov
inc
in
xchg
xchg
xchg
or
fwait
mov
mov
test
stos
lds
inc
jnp
xchg
push
clc
mov
or
hlt
in
mov
popf
dec
and
xchg
aam
test
or
cmp
mov
fwait
mov
pop
(bad)
cmp
rcl
xchg
push
in
stos
out
sbb
xchg
retf
fucom
outs
inc
es
xchg
pusha
xor
dec
cmp
xchg
test
fnstenv
lock
sub
xor
sti
aad
cdq
movs
add
inc
push
jo
xchg
je
outs
push
pushf
adc
sub
xchg
sbb
hlt
inc
(bad)
jmp
add
(bad)
cmp
psrad
test
push
mov
xchg
jmp
call
lea
or
stc
fnstsw
push
int
cmp
jle
or
xchg
push
mov
push
xchg
(bad)
imul
cdq
xchg
fwait
outs
nop
push
leave
hlt
cwde
test
xor
and
inc
aaa
scas
xchg
out
mov
dec
mov
add
shl
das
xchg
xchg
scas
adc
mov
xor
fnstcw
imul
mov
pop
cmps
nop
sar
pop
mov
ficomp
es
inc
iret
jmp
fwait
enter
mov
push
fbld
xor
int
dec
xchg
sbb
call
and
repnz
daa
out
mov
xchg
jns
pop
adc
inc
std
xchg
popf
and
fimul
inc
rcl
push
xchg
sbb
into
mov
sub
cmp
adc
call
rcr
retf
or
jmp
mov
stos
cmp
mov
out
sbb
sahf
adc
adc
in
xor
push
push
xor
cmps
and
push
loop
call
sbb
mov
cmp
xchg
in
cmp
in
xchg
loop
ficomp
jne
add
(bad)
xchg
pop
dec
sub
xchg
lds
mov
mov
mov
inc
neg
jecxz
cmp
jnp
daa
xor
in
lock
in
dec
sub
fwait
jns
mov
xor
sbb
dec
lds
movs
mov
mov
add
xor
xor
ja
jae
test
mov
xchg
std
cwde
(bad)
aas
js
cmp
xchg
mov
stos
pop
hlt
xchg
pusha
cmps
aam
scas
push
imul
xchg
sbb
fimul
mov
gs
mov
dec
xchg
mov
mov
xchg
outs
int3
aaa
xchg
xchg
mov
out
push
jp
daa
sub
push
xchg
icebp
aam
xor
xchg
scas
xor
sti
nop
outs
xchg
ja
out
leave
cmp
fwait
inc
leave
mov
mov
xchg
mov
neg
mov
xchg
test
fld
xchg
mov
fdiv
xchg
jecxz
push
outs
inc
adc
mov
lea
cli
xor
mov
out
xor
xchg
test
and
mov
xchg
adc
imul
lea
mov
retf
cmp
or
xchg
lea
sar
pusha
adc
scas
pop
shr
pop
aaa
not
sub
sub
cmp
test
jge
out
xchg
int3
fadd
not
jnp
sub
out
inc
lahf
mov
rcl
sub
jns
push
ret
pop
mul
jnp
das
xchg
out
pop
in
mov
or
retf
inc
lea
push
mov
stos
or
aam
addr16
lods
xchg
jnp
jge
pop
imul
ins
pop
xchg
mov
cwde
xchg
popf
pop
push
xchg
push
dec
movs
mov
sub
iret
movs
xor
cmp
cmps
mov
test
hlt
xlat
jp
mov
loop
data16
pop
retf
lahf
push
xchg
inc
std
div
call
add
fsub
xchg
pop
mov
adc
push
pushf
into
xchg
enter
imul
and
xchg
fnstsw
cmp
lock
int3
cmp
sbb
xchg
arpl
xchg
daa
xor
inc
jmp
or
xchg
jg
aas
cmp
pop
or
xchg
test
into
sub
int
lahf
fcomp
sbb
pop
adc
scas
jmp
jp
push
push
push
fwait
add
cmp
jo
out
nop
mov
rcl
mov
fmulp
or
xchg
mov
ds
outs
xor
sub
push
mov
mov
popf
out
adc
mov
imul
sbb
xchg
or
(bad)
mov
outs
mov
js
loopne
jmp
aam
xor
xchg
add
mov
cdq
cwde
or
call
xchg
or
imul
fsubrp
sub
nop
push
xchg
fcmovnu
jge
jnp
xor
jmp
pop
xchg
setge
xor
pop
adc
inc
mov
cmp
sub
push
add
iret
adc
xchg
div
(bad)
pop
iret
popf
movs
adc
in
nop
aaa
jle
leave
xchg
pop
mov
add
xchg
dec
jg
push
test
cld
std
ficomp
push
dec
add
xchg
dec
aas
pop
cmp
push
xchg
shl
xor
popf
add
push
mov
out
push
test
jmp
hlt
xlat
add
ins
push
sub
in
sbb
mov
xor
lods
inc
je
mov
jmp
xor
loopne
mov
dec
jbe
add
in
dec
(bad)
pop
or
(bad)
les
push
inc
pop
xlat
adc
bound
xchg
adc
mov
adc
rcr
jge
cmp
push
push
sti
out
(bad)
xchg
or
pusha
fst
jae
and
stos
cmp
xchg
scas
(bad)
hlt
daa
mov
sbb
outs
xchg
push
pop
pop
ficom
lahf
rcl
xchg
sbb
add
inc
loopne
mov
mov
inc
mov
xchg
adc
rol
xchg
ror
sbb
dec
sub
xor
add
xor
int
xchg
aas
or
sahf
(bad)
jmp
dec
or
jl
dec
test
cwde
push
ficom
mov
iret
fwait
push
xor
xchg
inc
cli
mov
sbb
lods
xchg
lock
ss
cdq
test
add
shl
jp
addr16
cmp
mov
inc
imul
mov
gs
mov
mov
jg
inc
mov
xchg
ret
int
out
push
cmp
stos
inc
xchg
mov
xchg
cmp
out
mov
mov
bnd
popa
xchg
and
push
lea
(bad)
fdivr
fwait
ret
int3
adc
and
movs
adc
xchg
ficom
or
jg
xchg
xor
mov
push
ins
popf
mov
es
mov
fild
fwait
aas
push
mov
cmps
and
inc
cs
xchg
fmul
xchg
push
mov
addr16
imul
jns
xchg
movs
dec
shr
xchg
lea
push
xchg
jmp
enter
aad
shr
sbb
push
imul
repnz
or
xor
or
add
dec
pop
sbb
je
jns
mov
imul
push
xor
xchg
stos
cmp
or
mov
pushf
pop
xchg
rol
in
(bad)
js
xchg
in
stos
mov
cwde
cmp
out
push
sahf
fidivr
cld
xchg
cdq
mov
mov
xchg
ja
jle
es
shl
mov
sti
outs
fs
movs
xchg
fisubr
push
cmp
sbb
sbb
mov
popf
pop
lds
push
aam
xchg
int3
xor
add
xchg
jg
out
test
xchg
jb
push
pop
xchg
jmp
mov
leave
xchg
cmc
cmp
cmp
sub
inc
movs
iret
adc
or
xchg
sti
rol
jo
pop
pusha
xchg
pushf
sbb
push
pop
pop
dec
fcom
not
adc
scas
lods
hlt
mov
push
xchg
stos
and
xchg
(bad)
(bad)
bound
pop
xchg
inc
outs
cmc
ret
cmp
movs
fwait
pop
mov
adc
inc
xor
or
retf
jmp
adc
mov
bound
int
arpl
fidivr
popf
sub
mov
add
xchg
or
sbb
icebp
xchg
les
jle
xchg
xlat
bound
stos
jne
fs
fst
xor
(bad)
int
jb
jae
and
jne
not
add
dec
pusha
adc
dec
or
cmps
imul
pop
xor
cmp
mov
in
es
ret
pop
mov
xchg
(bad)
dec
scas
sub
sar
or
sub
xchg
and
aaa
clc
ds
mov
dec
fcom
sbb
pop
push
xor
jge
aaa
pop
mov
sbb
shr
xchg
aad
dec
mov
jecxz
out
pop
xchg
jo
call
rcr
adc
and
fndisi(8087
ss
ds
ja
push
jge
pop
xchg
inc
ret
mov
mov
inc
cmp
push
xchg
sub
xlat
mov
add
daa
aas
mov
xor
inc
pop
and
cmp
data16
sub
or
stc
xchg
pop
hlt
pushf
dec
out
div
adc
xchg
mov
mov
int
xchg
test
xchg
outs
xor
adc
xchg
bound
aas
(bad)
adc
inc
cmp
jne
lds
fcomp
mov
retf
sbb
ret
xor
dec
adc
daa
ficom
ds
out
ins
cmp
imul
cli
mov
pop
mov
xchg
xchg
add
and
shl
xor
push
imul
mov
mov
or
dec
or
repnz
pop
xchg
mov
sbb
aas
xchg
add
mov
inc
movs
ret
pop
mov
mov
add
dec
ret
out
div
dec
mov
push
popf
xchg
push
out
cwde
push
cs
sbb
pop
xchg
mov
xchg
xor
int3
ret
jecxz
pusha
push
leave
push
pop
xchg
push
gs
pop
out
ficom
and
movs
ins
aaa
lock
rcl
mov
push
mov
je
out
jnp
fs
inc
sub
push
mov
xchg
push
xchg
mov
daa
rcr
outs
mov
xor
loopne
in
retf
xchg
(bad)
(bad)
push
dec
fisttp
aad
mov
xchg
nop
jb
adc
shl
jle
into
test
js
outs
xchg
fdivr
mov
adc
and
lea
add
(bad)
mov
adc
sbb
jne
mov
xchg
push
mov
adc
or
mov
or
adc
pop
call
outs
jp
cmp
push
xchg
pushf
shl
sub
rcl
cmp
cmps
xchg
adc
jae
pop
aas
inc
mov
jl
or
cli
xchg
fldz
or
lods
mov
cld
xchg
lea
adc
adc
outs
adc
(bad)
mov
in
xchg
es
adc
or
jmp
shl
test
cdq
nop
icebp
pop
ror
in
loopne
jmp
pushf
les
mov
inc
sbb
push
mov
test
aam
test
pop
xchg
jns
gs
or
mov
je
lods
fnstcw
push
into
(bad)
call
mov
pop
mov
push
lods
shr
pop
ss
inc
(bad)
sbb
dec
in
mov
je
adc
jecxz
in
into
cs
cmp
xchg
xchg
cmps
xor
xchg
imul
in
pop
fist
xchg
sub
jle
les
out
sahf
xor
scas
jmp
repnz
add
(bad)
ror
jl
jb
xchg
test
in
pop
and
sub
cmp
xchg
jns
(bad)
shl
clc
xchg
jmp
or
xchg
xchg
adc
mov
dec
xchg
ret
pop
ja
push
test
cmp
mov
and
sub
or
test
inc
push
fist
adc
dec
out
cwde
das
iret
lods
xchg
es
retf
cli
lea
add
or
mov
int
xchg
jmp
pusha
int3
std
xchg
das
in
mov
xchg
push
pop
mov
rcl
ins
mov
dec
inc
and
pop
ficomp
push
add
pop
adc
add
sahf
daa
push
cmp
into
or
push
stos
test
adc
cmp
popf
xchg
addr16
dec
adc
xor
xchg
shl
adc
sbb
or
inc
xchg
leave
mov
mov
adc
xchg
adc
jmp
inc
iret
mov
into
xchg
mov
and
ror
xchg
dec
mov
push
add
dec
pushf
sbb
xchg
aaa
jae
or
xor
cmp
(bad)
imul
pop
xchg
hlt
cmp
add
lahf
xchg
mov
and
cmp
scas
retf
cdq
sbb
rol
xchg
jg
jb
loope
(bad)
xchg
fdivr
sub
scas
pop
adc
push
lahf
loopne
fld
jl
jae
mov
add
or
xchg
add
mov
daa
xchg
out
mov
jae
retf
ins
icebp
scas
ficom
inc
jns
or
pop
xor
repnz
jmp
rcl
rcl
add
push
mov
out
into
mov
test
push
out
or
arpl
or
xchg
sub
movs
cmps
jecxz
dec
xchg
enter
dec
mov
xchg
int3
adc
cmc
inc
retf
inc
lods
fwait
cmp
push
in
stos
les
xchg
push
gs
arpl
lods
sahf
out
js
mov
xchg
push
cmps
dec
ds
mov
adc
xchg
mov
retf
jns
xor
pop
inc
gs
pop
rol
xchg
inc
and
fnstenv
and
inc
adc
push
hlt
imul
xor
jae
in
iret
out
mov
dec
jecxz
xchg
(bad)
sar
add
xchg
xor
mov
bswap
ds
mov
mov
sub
shr
xchg
adc
lea
in
mov
test
ret
sub
das
add
sub
and
xchg
push
aam
cmps
(bad)
jbe
sbb
adc
xchg
int
popa
mov
xchg
jnp
dec
jl
(bad)
push
fmul
(bad)
xchg
dec
fwait
in
scas
xchg
dec
adc
mov
xor
sbb
repnz
push
add
cmc
adc
and
aad
mov
xchg
stos
jmp
stos
push
push
sbb
xchg
sub
xchg
ins
test
int3
aaa
test
xchg
pop
pop
xor
mov
mov
xor
add
pop
xchg
sbb
sbb
xchg
out
mov
mov
movs
adc
das
(bad)
push
(bad)
fistp
xchg
dec
fldcw
data16
mov
mov
jle
push
xchg
(bad)
ds
adc
adc
nop
sbb
ret
dec
(bad)
xchg
adc
sub
fisub
inc
cli
xchg
mov
sbb
add
xchg
add
fidiv
shl
dec
xchg
cmp
retf
add
jp
pop
xchg
(bad)
lock
mov
xor
loop
rcr
sbb
lods
mov
or
vcvtsi2sd
jb
xlat
xchg
jmp
pop
mov
lahf
or
fprem1
sahf
xchg
sbb
imul
scas
and
or
push
call
jbe
xchg
in
bound
mov
dec
pop
xchg
hlt
lock
ds
iret
lahf
out
mov
jl
into
cmp
xor
dec
enter
mov
mov
pusha
fwait
mov
call
fcomip
and
in
and
pop
cdq
std
xchg
push
pop
mov
xchg
jbe
test
call
adc
fbld
dec
xchg
mov
aas
dec
outs
fcom
ja
test
out
xchg
sahf
mov
pop
xor
cmp
jecxz
mov
hlt
ret
push
push
pop
fdivr
jmp
fsub
adc
das
and
call
aas
jmp
test
popa
les
fst
xchg
(bad)
push
addr16
push
dec
push
push
xchg
or
inc
mov
fwait
cmps
xchg
shl
sahf
pop
pusha
adc
ss
mov
adc
push
cmps
fstp
ss
xchg
lods
cdq
test
mov
fidivr
inc
xchg
add
inc
xchg
adc
fcom
or
repz
aam
push
push
mov
das
pop
add
inc
iret
ret
into
pop
cmp
jp
mov
xchg
xchg
pop
leave
lahf
ins
lods
ja
xchg
jns
add
(bad)
push
jl
outs
scas
adc
and
mov
push
adc
cmp
jns
xchg
scas
xchg
std
adc
or
sub
sti
outs
and
and
cmp
cmps
cmp
call
je
(bad)
je
jb
pop
sub
cmps
or
mov
mov
xchg
(bad)
xchg
in
icebp
inc
stc
add
mov
xchg
cmc
sub
xchg
sub
xor
outs
xchg
and
cdq
add
das
or
xchg
int
retf
xlat
inc
(bad)
(bad)
pop
stos
xchg
jl
and
mov
xchg
xchg
xchg
repnz
jl
xchg
cmp
cmc
std
hlt
adc
push
adc
fldenv
mov
aam
adc
inc
stos
xchg
fmul
mov
add
jecxz
and
mov
int
fnstenv
outs
push
mov
int3
mov
imul
cmps
sbb
inc
xchg
mov
adc
nop
enter
and
inc
cmps
or
lds
in
xchg
fs
sub
les
fimul
dec
shl
xchg
and
jmp
cmp
xchg
and
cmc
aaa
test
lods
les
imul
mov
fidivr
aam
dec
enter
xchg
fisubr
sbb
xchg
ds
dec
pop
add
xchg
xchg
aas
add
hlt
in
repz
mov
ins
mov
add
sahf
les
test
out
mov
out
cmp
das
mov
xor
or
xchg
adc
jecxz
cdq
test
sete
and
push
mov
push
push
xchg
stc
movs
xchg
cld
and
and
xchg
push
aaa
sbb
cmp
sub
repnz
mov
fiadd
adc
cs
jge
adc
or
cmp
mov
ss
add
fwait
jle
pushf
call
sub
xor
xchg
mov
xchg
dec
mov
xor
push
div
mov
adc
jns
(bad)
ffree
jae
nop
mov
add
xchg
xchg
xchg
xor
or
arpl
in
ins
mov
popf
xchg
adc
xor
hlt
jg
cmp
rcr
xor
xchg
mov
aaa
push
retf
or
scas
dec
xchg
outs
mov
pop
sbb
inc
outs
sbb
cmps
adc
les
mov
jl
inc
push
xchg
add
xchg
scas
cmp
mov
nop
js
xchg
out
mov
std
jmp
dec
xchg
xchg
cmps
and
push
fiadd
push
xor
mov
xchg
into
adc
jle
cli
ja
xchg
lods
pushf
inc
mov
aaa
ss
xchg
inc
pop
cmp
jp
xchg
outs
jnp
out
in
mov
mov
jge
sub
shl
jp
stos
repz
cmp
arpl
xchg
sbb
sub
xchg
aad
sbb
mov
pop
xchg
cmp
mov
xchg
std
mov
xchg
pop
(bad)
mov
rcl
push
inc
jbe
dec
and
cmp
retf
mov
cmp
adc
mov
lods
retf
pop
jmp
fwait
shl
add
shl
xchg
jge
cmp
dec
push
in
sub
ret
sub
cmp
dec
push
sub
fs
sub
gs
sbb
add
icebp
fwait
dec
cmps
cli
xor
pop
fidivr
sub
xchg
adc
mov
xchg
cmc
les
jl
xchg
xchg
imul
inc
add
sbb
cwde
sub
xor
jo
pop
hlt
xor
frstor
push
rol
mov
xchg
aad
loope
mov
add
fwait
lea
std
loop
mov
fwait
push
xor
je
mov
xchg
mov
pop
pop
adc
std
mov
cwde
pop
inc
xchg
stos
dec
imul
adc
mov
nop
add
inc
lods
call
enter
mov
imul
adc
movs
rcl
lods
adc
mov
push
scas
or
push
xchg
call
adc
ja
dec
clc
push
pop
in
jb
popa
xchg
fld
ret
stos
add
lahf
xlat
out
scas
or
push
in
enter
gs
cli
cwde
mov
sahf
loopne
adc
ficom
push
jns
sub
lods
dec
in
mov
je
mov
popf
push
mov
daa
pop
mov
xchg
dec
popa
mov
stos
xchg
mov
mov
loopne
js
xchg
lahf
sub
bound
adc
sbb
nop
xchg
imul
pop
mov
pop
(bad)
xchg
scas
cdq
pop
xchg
jle
lods
sub
add
add
push
cmc
mov
jmp
jne
mov
pushf
ss
sbb
adc
cmp
nop
pop
and
sub
or
das
mov
hlt
retf
mov
and
int3
add
cmp
into
fsin
je
dec
inc
leave
adc
cmc
imul
xor
jb
pop
ficom
nop
sub
mov
(bad)
enter
xchg
(bad)
xchg
cwde
jbe
(bad)
xchg
push
fild
imul
inc
xchg
into
loopne
and
xchg
xchg
aas
dec
rcr
xor
out
clc
and
sbb
fstp
bound
test
sbb
mov
gs
cmp
lods
in
iret
test
es
sbb
mov
mov
cdq
movs
repnz
sbb
call
jbe
or
jnp
lahf
jl
adc
in
push
inc
ja
xchg
cmp
xor
xchg
aam
mov
jle
adc
sar
xchg
shr
in
mov
shl
std
scas
jmp
sti
dec
jecxz
sbb
out
outs
repz
fbld
cmp
test
hlt
imul
sbb
enter
retf
lock
push
cdq
cmp
ja
push
stc
xchg
mov
mov
jmp
and
xchg
xchg
fiadd
push
test
sbb
ret
imul
add
jle
fisttp
mov
leave
cmp
mov
test
int3
aas
add
daa
das
xchg
xchg
xchg
or
xor
dec
or
rol
cmps
jmp
je
or
xchg
jo
xor
ss
jmp
xchg
xchg
sub
jbe
shl
sti
pop
and
sbb
xchg
xchg
fst
and
js
xchg
pop
xchg
ja
jo
jg
sbb
xchg
push
mov
sub
pop
xchg
(bad)
jmp
lea
lds
xchg
jbe
sar
cmp
ss
xchg
pop
xchg
xchg
add
jnp
imul
xchg
mov
jb
ror
pop
mov
cmc
out
pop
push
xor
pop
xchg
nop
in
ror
cwde
test
xchg
js
push
add
mov
cmps
dec
aad
lds
xchg
mov
int3
xor
mov
xchg
and
ja
sub
mov
stos
xchg
je
push
iret
inc
push
aam
add
push
cmp
lea
nop
cdq
mov
xchg
push
dec
pushf
shl
mov
or
pop
xchg
pop
mov
sahf
nop
scas
push
ret
add
jmp
fild
fist
fld
in
aam
scas
xor
xchg
mov
call
into
xchg
aad
push
int3
clc
push
in
pop
xor
jnp
std
rcl
nop
pusha
retf
xchg
jnp
xchg
and
(bad)
out
dec
sbb
scas
add
pop
mov
out
inc
gs
mov
xchg
xor
call
fisub
jmp
adc
xchg
sub
jo
leave
mov
xchg
retf
sub
lods
daa
push
aaa
pop
xchg
sub
cmp
je
mov
mov
movs
test
retf
mov
ins
pop
inc
enter
retf
push
pushf
call
jnp
or
les
mov
outs
mov
xchg
in
sub
push
xchg
int3
into
push
sub
fcom
pop
push
mov
push
sub
jecxz
(bad)
js
xchg
jnp
pop
popa
ins
cmp
mov
out
inc
bound
aam
mov
xchg
or
lock
cmps
xchg
add
test
sub
pop
in
aaa
int3
xchg
mov
cmp
cli
outs
adc
sub
xchg
ret
push
leave
lahf
add
pop
lds
mov
scas
into
push
cmp
div
or
xchg
lods
push
test
xchg
ds
add
xchg
pop
mov
cmc
cmp
cmp
jae
push
mov
and
push
mov
ror
jl
sbb
inc
pushf
es
popa
pop
sbb
loop
je
pop
xchg
mov
inc
lahf
and
xchg
add
aas
dec
xchg
sbb
repnz
mov
adc
or
add
xor
stos
mov
je
repnz
sbb
je
mov
cmp
inc
sbb
rol
xchg
retf
fimul
stc
hlt
aaa
xchg
jb
stos
bound
cmps
mov
bound
cmp
xchg
(bad)
out
lods
adc
sub
pop
mov
ret
(bad)
sub
xchg
dec
xchg
imul
cdq
pop
addr16
fs
adc
mov
xlat
jmp
test
xchg
into
mov
adc
and
fist
cli
sbb
or
jl
rol
mov
cmp
cmp
xchg
loop
cmp
xchg
sbb
jmp
leave
fmul
sbb
xchg
mov
push
jae
cmc
nop
jg
mov
dec
adc
lds
inc
jns
mov
and
add
cmp
and
arpl
mov
in
int
push
(bad)
xchg
dec
cwde
and
xchg
popf
mov
mov
jbe
xor
dec
jp
ficom
push
jo
xchg
scas
pop
icebp
pop
in
push
sub
shr
cmp
add
fwait
fs
repz
cmp
out
je
sbb
inc
push
dec
mov
aad
xchg
add
fidivr
pop
mov
xchg
lea
mov
outs
adc
xchg
pop
sub
sub
les
aam
(bad)
pop
icebp
xchg
jle
aam
call
ret
and
fs
fist
out
push
in
imul
cmp
mov
add
pushf
aam
test
xchg
add
xor
mov
mov
mov
cmp
(bad)
jle
xchg
xor
ja
add
and
cdq
retf
push
xchg
ficomp
dec
xchg
call
ret
imul
push
jle
xchg
adc
call
ins
ins
js
(bad)
(bad)
jns
imul
in
xchg
push
push
mov
push
jnp
call
adc
xor
xor
inc
stos
(bad)
jle
sar
xchg
cmp
inc
inc
sti
loopne
xchg
jmp
xchg
shl
cmps
ins
cmp
lahf
mov
mov
dec
sti
ss
xor
movs
xchg
ja
fwait
icebp
iret
pop
mov
xchg
adc
cmp
pop
add
jb
(bad)
mov
mov
fsub
fstp
push
sti
lds
adc
pop
xchg
xchg
xchg
mov
mov
push
push
xchg
push
hlt
add
lods
or
inc
lea
xchg
push
dec
xlat
sti
sbb
rcr
ficomp
aam
(bad)
xchg
(bad)
loop
shl
push
xchg
pop
mov
or
mov
and
xor
iret
mov
ins
out
fcom
mov
mov
push
xor
xor
dec
(bad)
es
xchg
mov
jns
lock
in
push
(bad)
push
xchg
mov
or
mov
inc
xchg
daa
jbe
jmp
mov
aaa
xchg
retf
mov
push
in
dec
fs
pop
inc
or
add
xchg
jge
sub
or
xchg
or
int3
xchg
repz
das
cmp
test
arpl
repnz
ret
ins
stos
fwait
mov
pushf
inc
mov
in
adc
ror
xchg
push
popf
and
(bad)
cmp
retf
pop
pop
mov
mov
and
arpl
adc
imul
jb
or
xchg
dec
aas
xor
repnz
mov
xchg
pop
pop
adc
stos
arpl
xchg
fadd
test
xchg
in
loopne
sar
xor
jmp
ret
inc
ins
pop
in
out
xchg
adc
add
push
xchg
int3
sahf
jp
jnp
in
xor
stos
xchg
mov
ja
cli
sahf
xchg
fist
(bad)
push
sub
mov
xchg
ins
in
dec
push
and
sbb
add
xor
pop
je
xchg
or
(bad)
push
(bad)
call
inc
cmp
add
ficom
push
fcomp
mov
mov
fsub
xchg
in
imul
aaa
jecxz
nop
push
mov
outs
xchg
mov
xlat
adc
das
mov
mul
mov
pusha
sbb
scas
mov
out
les
gs
push
pop
(bad)
ror
xchg
repz
jl
push
fld
cli
arpl
stos
xchg
jle
mov
retf
es
pop
xchg
sbb
sub
add
aaa
mov
xchg
rcr
iret
inc
mov
fild
pop
das
and
add
pop
jnp
test
xchg
lods
pop
cmp
out
push
cmp
out
xchg
sar
add
fs
fcomp
mov
xchg
push
cld
dec
mov
test
inc
xchg
sbb
pop
mov
push
iret
xchg
pop
sar
dec
fidivr
neg
fxch
lock
fwait
or
test
xchg
sub
fbld
loop
ret
push
mov
push
push
xchg
ins
bound
imul
sbb
test
sti
cmp
inc
xchg
js
ja
xor
popa
inc
jl
sbb
sub
xor
sar
rcl
int
icebp
or
xchg
lock
shl
push
xchg
jg
imul
data16
jle
push
add
not
xchg
cmp
push
dec
jns
aad
popf
aaa
jnp
cmp
dec
out
pop
lahf
xchg
cmc
idiv
xor
jmp
ds
iret
dec
cwde
xchg
pop
xchg
cdq
test
xchg
aaa
mov
jle
std
je
dec
xchg
int
pushf
xchg
jecxz
and
mov
cs
sub
pop
inc
inc
ror
mov
push
fnstsw
dec
scas
je
xchg
test
and
sub
add
xchg
mov
jp
adc
sub
(bad)
scas
mov
mov
pop
inc
xor
mov
cmp
ficomp
and
call
jl
inc
jmp
scas
xchg
ja
ret
or
dec
dec
add
lahf
cld
cs
xchg
or
xor
shr
clc
xchg
pop
ret
in
movs
in
pop
mov
aam
xor
xor
xchg
enter
repnz
xchg
fisubr
into
sbb
mov
push
test
mov
push
(bad)
popa
adc
dec
and
dec
mov
mov
sbb
xchg
data16
retf
jp
jmp
pop
xchg
ds
mov
sbb
jmp
sub
sahf
cld
pop
cmc
adc
sti
(bad)
xchg
retf
loopne
ja
cmovae
cmp
cwde
cmp
push
les
hlt
sub
xchg
sar
lods
cmp
rcr
repz
cs
mov
(bad)
std
imul
aad
xchg
imul
gs
int
xchg
xchg
in
pop
shl
adc
pop
arpl
adc
and
xor
jl
cmp
sbb
jg
sub
inc
xchg
xchg
movs
call
retf
mov
mov
xchg
in
mov
xor
jae
cld
cmp
xchg
sub
ja
mov
mov
ror
sub
into
push
push
imul
jne
(bad)
pop
xchg
mov
sub
sbb
push
xchg
fs
out
out
or
jne
inc
ror
adc
ret
mov
and
mov
es
add
lea
dec
data16
or
xchg
cmps
fwait
jbe
retf
pop
mov
xchg
in
(bad)
jl
sbb
sbb
cmp
shr
push
mov
stos
xchg
into
fldenv
push
dec
inc
and
jbe
mov
or
scas
push
sub
pop
xchg
jno
aam
pushf
sbb
les
sub
xchg
xor
or
inc
push
mov
fdivp
cli
bound
mov
xchg
shr
xchg
add
test
sbb
hlt
pusha
icebp
call
inc
xchg
cmp
sub
movs
or
xor
(bad)
hlt
mov
mov
mov
push
mov
mov
and
fld
(bad)
lahf
adc
hlt
adc
neg
retf
arpl
aam
mov
in
mov
add
lock
cmp
adc
and
cwde
xor
mov
fist
push
pushf
fdiv
mov
mov
mov
adc
inc
jp
imul
or
mov
enter
pop
or
in
xchg
mov
out
mov
bound
cmp
mov
mov
xor
xchg
mov
dec
popf
add
rcl
(bad)
xchg
sbb
cmp
lahf
xchg
int3
adc
out
je
leave
jb
ss
adc
fwait
loopne
call
popf
pop
(bad)
mov
aaa
and
pop
dec
xchg
mov
rep
push
xchg
imul
mov
xchg
or
mov
xchg
loopne
pushf
xchg
or
adc
es
push
scas
xor
outs
mov
xchg
push
dec
ficomp
iret
inc
and
mov
add
add
xchg
jns
jecxz
or
scas
out
and
or
xchg
xchg
pop
jl
inc
into
je
les
and
xchg
scas
scas
xchg
mov
cmc
push
pop
fwait
add
ss
cwde
and
jge
ret
xchg
mov
bound
xchg
cwde
js
xchg
dec
jns
comiss
push
xchg
shr
dec
xchg
cmc
fwait
push
ror
cmp
mov
into
xchg
cmps
mov
dec
xchg
or
in
fild
xchg
dec
cmc
out
jmp
call
in
loop
popa
mov
jbe
popf
in
pusha
call
mov
jecxz
xchg
inc
je
push
adc
dec
outs
not
push
jmp
in
add
mov
mov
xlat
xchg
scas
repnz
test
out
aam
lods
lahf
push
test
add
cmc
jb
xchg
cmps
stos
xor
xchg
xchg
ja
neg
shl
xchg
cmps
adc
pop
cmp
xor
rcl
ret
mov
pusha
sub
outs
ror
xchg
cwde
mov
cmp
mov
pop
xchg
cmp
push
and
push
sbb
inc
add
xchg
ins
or
mov
cmps
adc
mov
test
fcom
cmp
xchg
cmp
pop
mov
in
xchg
pop
fwait
shr
sbb
leave
sub
push
rcl
dec
push
(bad)
mov
mov
test
jge
and
xchg
retf
or
ins
mov
inc
xchg
inc
cmc
pop
cmp
fsub
xchg
arpl
mov
pop
xchg
rcl
xchg
pusha
bound
push
xchg
and
inc
loop
mov
xor
sub
dec
inc
pop
mov
ret
sub
fwait
adc
cmpxchg
rol
adc
shl
sbb
xchg
push
jno
mov
sub
in
loop
xchg
pop
in
mov
retf
adc
pop
pop
pushf
outs
xchg
and
cld
(bad)
mov
or
xchg
cmp
loop
cwde
ds
mov
mov
push
cli
xchg
dec
jmp
in
push
xor
(bad)
ds
push
mov
std
arpl
add
pushf
mov
rcr
push
into
inc
xchg
or
ds
mov
xchg
sbb
stos
dec
xchg
and
rep
xchg
adc
inc
adc
xchg
cmps
push
fisubr
dec
icebp
mov
mov
inc
les
mov
sub
mov
add
xchg
jg
sti
(bad)
pop
icebp
cld
push
xchg
call
test
add
or
repnz
push
add
xchg
fcomp
xor
addr16
mov
xchg
cli
sbb
nop
jp
xchg
adc
movs
call
stos
xchg
jno
xchg
int
sub
les
cmps
scas
in
or
pushf
lds
je
xchg
xor
scas
xchg
jmp
xor
sti
cmp
cmp
icebp
(bad)
or
mov
clc
inc
loope
addr16
mov
inc
or
sbb
fist
shl
mov
cwde
mov
mov
iret
ja
and
xchg
push
das
mov
inc
sub
fwait
mov
lea
and
mov
jmp
jae
fcom
out
repnz
inc
push
and
pop
data16
int3
push
jno
repnz
sub
idiv
fcmovnu
iret
jmp
xchg
aam
arpl
imul
mov
or
or
cmp
mov
(bad)
xchg
pop
add
sub
push
dec
inc
xchg
ja
add
lea
jmp
jnp
cmp
xchg
push
or
scas
mov
shl
xor
mov
push
add
xchg
in
aaa
enter
cmp
mov
ror
mov
xchg
(bad)
(bad)
ffreep
fwait
inc
adc
les
or
jbe
pop
std
dec
inc
sub
xchg
mov
daa
movs
sub
xchg
and
aas
push
pop
xor
push
fstp
pop
mov
xchg
shl
aaa
idiv
(bad)
lods
push
(bad)
faddp
nop
pushf
test
sti
mov
xchg
test
push
xrelease
sub
dec
sub
fst
xchg
jg
pop
push
aam
pop
fsave
push
push
loope
addr16
sti
shr
xchg
xor
xchg
les
jns
xchg
push
xchg
loopne
dec
xchg
push
sbb
jle
mov
ins
jl
fwait
jge
xor
nop
cmp
outs
mov
xchg
aas
mov
adc
shr
ret
pop
xor
inc
jae
sbb
xchg
jp
jb
xchg
pop
xor
jo
mov
push
mov
pop
mov
arpl
outs
enter
lahf
pop
test
popa
mov
or
add
or
xchg
ja
(bad)
leave
jp
add
jae
push
adc
aam
and
mov
rol
xchg
jmp
dec
sbb
mul
or
jmp
adc
retf
mov
push
push
inc
mov
add
mov
sti
pop
pop
sbb
and
(bad)
cwde
sub
adc
idiv
jecxz
and
and
int
gs
lea
inc
jns
cmp
mov
loop
jmp
mov
adc
sbb
ja
sub
inc
repz
or
int
xchg
dec
ret
pop
ret
sub
popa
mov
xchg
call
arpl
push
fwait
xchg
jns
inc
idiv
xor
jle
xchg
inc
test
and
jne
sub
pop
xchg
mov
daa
mov
lea
push
ja
sub
lahf
push
mov
xchg
or
adc
and
adc
(bad)
cmp
push
ret
dec
mov
out
fcomp
and
jns
cwde
add
xchg
shl
xchg
fistp
popf
sahf
sar
popa
movs
je
jle
xchg
cld
cmp
adc
inc
inc
xchg
pop
inc
push
(bad)
dec
push
mov
mov
scas
mov
push
(bad)
cmps
mov
fimul
in
xchg
sub
sub
movs
loope
js
xchg
jmp
retf
jns
rol
sbb
cmps
ds
mov
add
out
dec
dec
sub
aas
push
loopne
pop
push
xchg
lahf
out
xor
xchg
or
pop
sub
push
fldenv
adc
pop
sti
xchg
or
cmp
int3
cmp
or
mov
cld
xchg
jge
cmp
ja
cdq
xchg
in
call
mov
jne
xchg
into
adc
hlt
repz
pop
push
mov
xchg
mov
dec
(bad)
stc
sti
loopne
cld
mov
imul
ins
cmp
mov
dec
xchg
sub
xchg
int
xor
fsub
sbb
jmp
sub
pushf
ret
add
jo
outs
xchg
xor
adc
push
ins
dec
mov
xchg
xchg
adc
push
pop
cmp
outs
popf
xchg
(bad)
jmp
pop
add
dec
cmp
test
fs
mov
std
test
pushf
inc
and
js
aad
add
or
bound
and
mov
add
add
sub
pop
or
inc
xchg
stos
xchg
and
and
xchg
sub
add
repz
aas
pop
es
ficom
push
test
xchg
pusha
mov
push
jae
repz
aas
push
add
xchg
xchg
cli
enter
pop
cmp
add
cmp
jmp
fs
sahf
lahf
mov
mov
retf
or
or
xchg
fcmovnbe
pop
outs
(bad)
inc
adc
call
(bad)
jo
jne
xchg
repz
sub
into
lods
and
pop
pusha
add
inc
inc
dec
rcl
imul
mov
mov
sbb
mov
lock
xor
mov
ins
xchg
(bad)
inc
rcr
dec
xchg
dec
xor
rcr
mov
aam
sbb
stc
es
cmp
lock
ins
enter
popf
sub
sub
(bad)
out
out
fnstsw
xchg
mov
sub
sub
xchg
rcl
jnp
lds
push
(bad)
adc
imul
pop
fcmovnbe
push
push
pop
ret
test
pusha
test
mov
sbb
pushf
jmp
mov
ret
adc
(bad)
jnp
jbe
adc
in
test
mov
or
lea
mov
cmc
rcl
xchg
or
out
inc
xchg
push
sbb
pop
dec
jg
je
into
xchg
xchg
ret
jbe
jmp
xlat
arpl
adc
and
in
dec
push
pop
cli
xchg
mov
shl
in
xchg
sahf
inc
push
mov
sti
(bad)
xchg
loop
iret
and
xor
pop
mov
xor
stos
jne
jo
jnp
xchg
ds
cld
pop
stc
jns
jae
xchg
sbb
dec
xchg
push
sbb
sub
push
cmp
cmp
xor
aad
or
les
jecxz
xchg
loope
dec
sub
icebp
popf
pop
xchg
xchg
adc
les
sahf
fmul
add
hlt
int
pop
pop
adc
jno
scas
xchg
repz
jns
(bad)
adc
lea
stos
mov
dec
jae
into
mov
xor
ret
arpl
fisttp
in
push
movs
mov
inc
cmp
mov
imul
scas
mov
hlt
push
add
push
mov
mov
(bad)
fwait
inc
adc
div
cmp
mov
fist
or
int3
adc
or
mov
xchg
adc
mov
cmp
push
push
hlt
jae
mov
aam
out
test
pop
(bad)
gs
mov
xchg
push
xor
das
mov
or
mov
fmul
mov
sub
rcl
dec
xor
xchg
shl
fild
mov
jge
icebp
les
xlat
xchg
aaa
inc
enter
fiadd
cdq
(bad)
cwde
and
xchg
adc
lea
sub
mov
xchg
xchg
(bad)
xchg
(bad)
xchg
cld
fcomp
push
xchg
sahf
add
fcmove
mov
xchg
jae
sbb
and
test
scas
or
xchg
lds
add
mov
cmp
ficomp
push
xchg
addr16
(bad)
mov
xchg
inc
hlt
push
sbb
xchg
sub
in
push
pop
xchg
and
pusha
xchg
fld
xchg
aas
xchg
push
mov
(bad)
jmp
add
adc
xchg
repz
popa
dec
mov
addr16
xchg
je
ror
mov
mov
and
sbb
xor
les
push
xchg
pusha
pop
pop
and
rcl
xor
in
pop
xchg
mov
add
and
call
aaa
loop
dec
call
xchg
in
test
int3
scas
xchg
arpl
dec
sbb
or
mov
mov
adc
and
or
xchg
jp
xchg
mov
in
(bad)
cld
repz
add
jae
jge
pop
sbb
stc
mov
xchg
lods
arpl
xchg
lea
xor
xchg
std
ror
ror
adc
xchg
cwde
cmp
call
xchg
push
xchg
xor
jle
xchg
not
pop
inc
out
je
aaa
retf
and
clc
bound
xchg
test
xchg
dec
mov
cmp
(bad)
jns
xchg
push
xor
push
mov
jle
cli
mov
(bad)
mov
(bad)
adc
ins
fidiv
imul
or
mov
xchg
shl
loope
sbb
add
adc
jl
ds
xchg
jb
sub
ret
lahf
push
sahf
jmp
rcl
push
data16
cmp
or
cmp
mov
(bad)
mov
ret
xchg
aam
pushf
and
sub
test
ins
cmps
xchg
mov
jns
sub
out
rol
inc
and
cmp
in
setnp
ret
or
lods
add
add
cli
(bad)
xchg
dec
xchg
adc
std
xor
int
jo
dec
ficom
retf
mov
je
adc
jb
cmp
xchg
inc
icebp
push
pop
es
or
test
fcom
push
sbb
jecxz
pusha
es
adc
sub
xchg
repz
sbb
and
adc
mov
jg
mul
cwde
pop
push
out
ins
inc
(bad)
out
fcomp
xchg
mov
mov
out
adc
sub
jg
dec
sub
sub
push
xchg
xchg
pop
mov
or
cld
ja
call
xor
mov
xchg
das
jg
aaa
cwde
scas
mov
je
mov
jmp
outs
sub
arpl
les
aaa
call
sbb
fsubr
xchg
xor
jae
cld
nop
cwde
mov
hlt
mov
popf
into
sbb
xlat
sbb
lods
xchg
jmp
std
stos
push
cwde
movs
xchg
gs
mov
xchg
psubusb
dec
ins
das
bnd
sbb
push
jns
adc
cmp
hlt
or
(bad)
push
adc
sub
lock
jp
cmp
leave
lahf
xchg
mov
enter
mov
jbe
xor
or
stos
pop
sbb
inc
jnp
mov
test
push
adc
(bad)
rcr
(bad)
xchg
mov
push
add
rcl
mov
pusha
xchg
ss
repnz
into
cmps
jmp
mov
idiv
pop
fs
std
aaa
xchg
push
test
mov
das
and
sahf
outs
repnz
mov
sbb
pop
lock
jo
repnz
mov
mov
add
sar
sbb
dec
cmps
in
mov
cwde
pop
cdq
jg
out
xchg
retf
mov
(bad)
fwait
inc
iret
sbb
(bad)
jns
out
jae
aam
(bad)
sbb
lds
inc
into
xchg
inc
xor
pop
les
sub
js
add
mov
bound
inc
cwde
xchg
scas
cmps
dec
retf
lods
xchg
xor
fwait
pop
retf
adc
xchg
fdivr
mov
rcl
mov
mov
xchg
sub
fdivr
push
cmp
xor
aad
add
xchg
xchg
adc
bound
nop
add
ds
xchg
sahf
mov
into
push
push
mov
xchg
push
inc
pop
inc
xor
loope
fwait
cmc
shl
cmps
(bad)
dec
xchg
push
in
xchg
aas
mov
or
scas
xchg
sub
add
mov
inc
fsub
test
in
inc
mov
xchg
arpl
fwait
inc
out
iret
(bad)
shr
xchg
imul
xchg
sub
ins
cmp
mov
aad
mov
xchg
jae
sahf
sar
xor
xchg
enter
push
pop
data16
lahf
mov
in
call
sub
dec
xor
push
cmps
scas
jae
push
retf
int3
inc
pop
cmp
es
xchg
test
fwait
outs
add
jmp
add
fst
mov
gs
add
pop
jmp
sbb
inc
inc
xchg
int
or
add
cmps
xor
rol
jmp
outs
cld
scas
push
xchg
retf
xor
fdiv
mov
mov
mov
xor
and
xchg
mov
cmps
sbb
push
(bad)
clc
xchg
fcomp
xchg
pop
enter
pop
inc
and
fwait
pop
cli
shl
dec
sar
xor
pop
ss
mov
xchg
dec
xchg
or
arpl
xchg
adc
mov
jg
jecxz
aam
(bad)
mov
sub
adc
push
icebp
pop
xchg
and
ret
dec
gs
(bad)
outs
stc
jge
and
sbb
xchg
xchg
push
dec
xchg
cmp
lahf
dec
shr
adc
shl
in
cmps
mov
add
jne
sub
mov
(bad)
icebp
push
cmp
mov
sub
and
stc
xchg
movs
cwde
mov
in
xchg
(bad)
std
inc
push
bound
pusha
mov
add
fimul
xchg
test
ins
out
lock
xchg
jae
jmp
xchg
aaa
xchg
push
int3
ret
(bad)
lea
cs
lods
xchg
es
and
aas
mov
test
xor
call
mov
loopne
adc
or
adc
xchg
enter
lods
lods
pop
sub
xchg
ror
jg
mov
mov
sbb
aam
xchg
loope
inc
mov
mov
mov
cmp
retf
xchg
inc
daa
scas
cli
in
icebp
repz
cmp
dec
movs
adc
xor
or
pop
adc
pop
dec
mov
ins
mov
rcr
jmp
pop
pop
push
jne
xchg
shr
push
stos
loope
fcom
outs
(bad)
(bad)
cmp
sahf
xchg
je
or
dec
dec
(bad)
mov
xor
ret
fcos
adc
xchg
mov
sar
xchg
les
mov
or
std
inc
dec
pop
cmp
inc
jbe
loope
mov
mov
retf
cmp
xchg
xor
(bad)
les
(bad)
mov
out
add
jle
out
or
push
and
test
call
out
shl
or
sbb
aam
(bad)
bnd
xchg
jecxz
jl
popf
xchg
repz
int3
jo
aam
std
aas
scas
xchg
mov
cmp
sub
xor
jae
int
xchg
adc
jmp
jp
cmp
mov
popf
cmp
dec
xchg
fcom
inc
xlat
loope
int3
xchg
cmps
pop
sbb
xchg
in
cli
data16
sub
rcl
fwait
lahf
sar
add
test
mov
jns
(bad)
imul
sbb
mov
pop
not
and
xchg
sub
sbb
ror
jne
adc
push
mov
or
lods
popf
in
les
mov
pop
inc
xchg
or
dec
std
push
(bad)
fmul
js
pop
jmp
imul
sbb
stos
out
xor
sub
popa
xchg
int
or
or
ins
int
out
or
sbb
outs
sbb
xchg
(bad)
xchg
shl
mov
test
lods
les
jns
sbb
xchg
jmp
mov
rol
aam
xchg
mov
call
xchg
push
lock
das
imul
mov
jno
aas
pusha
cmp
and
push
aad
jge
xchg
in
clc
(bad)
test
xchg
mov
les
mov
xchg
push
cli
mov
daa
pusha
ret
xor
je
cmps
hlt
into
aad
rol
adc
add
cmps
retf
cmp
inc
jmp
pop
rcr
ds
cmp
xchg
mov
lods
cmp
imul
push
cmp
dec
fs
xchg
mov
jae
add
push
sub
out
stc
fcomip
les
pop
inc
xchg
movs
xchg
hlt
cmp
jl
xchg
and
mov
xchg
pop
aaa
adc
ficom
fwait
test
mov
mov
popf
imul
stos
xor
mov
xchg
test
popa
scas
jno
cmc
fcom
mov
dec
fs
xchg
inc
inc
push
jg
add
stc
mov
imul
fimul
jmp
dec
cmp
xchg
cmc
or
or
push
or
aad
adc
pop
ja
jmp
jb
not
(bad)
sub
pop
retf
xor
push
sub
jp
mov
icebp
cmp
clc
je
lds
and
pop
mov
or
xor
pop
je
imul
scas
lods
jge
hlt
movs
leave
ret
shr
lds
push
sub
pusha
pop
inc
mov
call
xchg
xor
loopne
pop
es
out
sahf
retf
mov
dec
adc
mov
je
xor
jecxz
mov
adc
arpl
inc
mov
mov
data16
scas
cmc
popf
fist
ins
cs
je
jo
add
adc
aam
inc
xchg
test
pop
retf
push
cmp
ds
dec
xchg
sub
ret
aam
xchg
popf
arpl
out
mov
jbe
sub
inc
call
out
mov
dec
xchg
ret
inc
ins
aam
fld
sub
xchg
inc
jge
imul
add
in
mov
add
cmps
mov
or
xchg
sti
fadd
rcl
out
aas
xchg
mov
push
ins
xchg
inc
adc
fisubr
push
cs
sub
aam
repz
mov
test
jmp
push
jmp
inc
movs
into
js
inc
pop
xchg
or
jp
add
(bad)
xlat
xchg
fisub
push
ror
push
dec
add
xchg
addr16
in
inc
fxch
jle
xchg
mov
fdivr
loop
xchg
xchg
add
push
in
xchg
pop
icebp
ficomp
or
(bad)
int3
sahf
xchg
sti
loope
ins
sbb
jo
xchg
sbb
ds
call
or
adc
inc
out
xchg
mov
xor
jmp
jge
adc
int3
ficom
xor
xchg
sbb
mul
xor
clc
xchg
xchg
out
js
test
jb
mov
test
push
pusha
fst
xchg
shr
push
fiadd
mov
fnsave
jl
mov
and
popf
sbb
in
and
push
ror
sbb
(bad)
mov
adc
pop
add
test
pusha
fs
mov
xlat
adc
jge
lea
cmp
inc
push
mov
mov
and
cmps
ret
adc
xchg
retf
cwde
in
dec
mov
mov
mov
fmulp
mov
dec
jp
cmp
(bad)
and
dec
mov
mov
mov
mov
xchg
fnstsw
mov
popf
xchg
ret
push
outs
jge
inc
fwait
mov
inc
ror
pop
xchg
inc
pop
inc
sbb
lahf
add
inc
test
rol
nop
mov
xchg
imul
scas
imul
mov
xchg
jo
mov
int
cs
(bad)
call
retf
fnstsw
jl
and
jb
add
xchg
popa
in
xchg
fldcw
dec
cmps
mov
fcom
icebp
fcom
xchg
mov
dec
fwait
stos
or
(bad)
loop
pop
xchg
aaa
adc
adc
xor
jnp
pushf
iret
inc
fwait
mov
ins
xor
mov
push
clts
adc
dec
xchg
sub
dec
imul
mov
fstp
js
mov
mov
sbb
xchg
mov
or
in
xchg
jnp
in
rcr
sub
push
out
xor
push
dec
mov
scas
out
stos
adc
mov
fiadd
sbb
xchg
xchg
imul
cmp
mov
imul
cli
jp
bnd
push
cmps
arpl
into
fistp
push
add
mov
xchg
lods
aam
add
sub
xchg
pop
(bad)
out
cdq
lods
push
add
arpl
dec
push
ins
xchg
scas
inc
fmulp
mov
push
call
adc
in
mov
addr16
(bad)
fidiv
adc
xchg
ret
mov
fld
dec
xchg
and
ss
pop
mov
dec
push
sbb
jl
adc
xchg
sar
inc
mov
sub
repz
xchg
cmp
jmp
push
aaa
nop
ds
jbe
adc
mov
cmps
xor
sub
cmp
and
add
xchg
clc
bound
inc
mul
cdq
cdq
pop
push
out
lea
push
add
retf
sbb
outs
adc
adc
in
cmp
xchg
daa
scas
add
push
and
pop
mov
fdiv
int3
mov
ror
(bad)
lea
mov
cmp
sahf
xchg
push
xchg
aaa
jo
repnz
cwde
cmp
adc
ret
jb
fwait
cmp
cld
xor
daa
lock
xchg
inc
jmp
out
mov
cmps
mov
sub
shl
xchg
les
mov
shr
inc
aas
adc
cmp
div
and
cli
sbb
xchg
test
clc
xor
sbb
dec
out
sub
fadd
jp
(bad)
add
pop
jae
aad
push
jl
aas
dec
xchg
ins
push
fmul
push
and
jmp
in
xchg
push
repz
ss
shl
shl
out
xchg
add
dec
mov
xchg
fnsave
test
rcr
sbb
fwait
adc
outs
push
not
sbb
jbe
sub
pop
sbb
inc
(bad)
ficom
iret
(bad)
xchg
mov
cmp
add
lods
mov
movs
in
ret
xchg
(bad)
push
es
xchg
test
mov
loop
xchg
or
(bad)
jl
dec
xchg
inc
faddp
stos
(bad)
repnz
mov
retf
adc
fidiv
mov
mov
push
xchg
shl
repnz
ja
leave
lock
xchg
push
les
jmp
cmp
paddq
in
test
xchg
inc
cli
ret
sub
sbb
xchg
in
cmps
es
or
mov
and
(bad)
xchg
sub
mov
ja
pop
test
xor
push
dec
push
jg
xchg
hlt
(bad)
push
adc
pusha
sbb
sti
rcl
loopne
xchg
mov
cmp
mov
ret
(bad)
xchg
add
pop
(bad)
outs
call
sub
and
inc
xchg
movs
pop
or
jbe
pop
(bad)
jmp
xrelease
and
xchg
xchg
bound
mov
ds
shr
pop
jns
jge
sbb
add
sahf
test
movlhps
repz
adc
or
adc
inc
out
ja
rcl
adc
test
xchg
ss
cmps
adc
push
jmp
xor
fcom
popa
call
mov
test
xchg
or
cmps
test
push
not
inc
inc
and
jo
mov
push
loope
sbb
stos
and
enterw
mov
rcl
pop
ja
xchg
dec
cs
ret
scas
lahf
xchg
xchg
pop
(bad)
ror
xchg
cmps
test
and
imul
xchg
pop
clc
ret
push
mov
cmps
cmps
xlat
mul
(bad)
(bad)
mov
mov
xchg
fimul
test
cs
hlt
add
xchg
xchg
adc
cmp
ins
sub
dec
mov
or
mov
shl
ds
repnz
dec
adc
add
dec
push
outs
imul
lods
adc
test
ins
les
cmp
xor
push
fwait
cmp
test
aam
test
or
sbb
pop
ficomp
and
enter
jmp
(bad)
jb
mov
pop
cmp
shl
out
xchg
xchg
and
inc
jmp
xchg
ret
mov
cwde
inc
xchg
sahf
leave
mov
fs
movs
pop
stos
inc
sub
aaa
xchg
and
mov
inc
shl
push
stc
push
cli
mov
pop
sbb
mov
adc
lahf
inc
mov
retf
in
not
call
arpl
fmul
ror
in
dec
xor
cmp
cld
in
dec
cdq
sub
jg
add
push
stos
push
and
xchg
mov
outs
popf
add
(bad)
test
xor
call
xchg
imul
sbb
mov
add
xchg
jp
xor
ficomp
gs
xlat
push
mov
ret
repnz
xor
sar
xchg
pop
(bad)
cli
cmp
push
mov
adc
sub
js
lahf
rcr
xchg
fimul
push
xor
mov
and
(bad)
xchg
hlt
out
mov
cmp
and
xchg
jecxz
push
dec
mov
icebp
mov
fistp
mov
adc
sbb
jp
and
in
jno
fild
pop
or
xchg
fldl2t
int3
push
pop
aam
in
pop
or
leave
retf
rcl
cld
add
(bad)
or
jmp
lock
in
mov
lahf
mov
sub
mov
sti
pop
cld
mov
or
jbe
push
xor
mov
jnp
pop
xchg
fiadd
mov
xchg
or
mov
add
fs
neg
lds
dec
int3
ror
dec
ficom
mov
ret
xchg
leave
bnd
sub
dec
sbb
or
stc
adc
js
cs
dec
push
push
leave
jl
mov
cmc
jmp
(bad)
jge
mov
xchg
sub
call
stos
sbb
sbb
sub
cwde
popa
sub
cmp
shl
jmp
add
adc
mov
sar
mov
cmp
inc
mov
xchg
pop
imul
mov
lock
fwait
mov
sub
fmul
xchg
cmp
out
enter
mov
cli
je
push
rcr
hlt
jne
xchg
in
and
int
movs
adc
arpl
out
iret
cmp
inc
or
popa
inc
add
icebp
(bad)
xchg
dec
xchg
xchg
mov
aas
push
mov
pop
adc
out
xchg
in
aas
(bad)
retf
pop
xchg
lahf
mov
rol
xor
push
je
xchg
sbb
ja
xor
or
or
add
adc
mov
xchg
ds
addr16
out
pop
xchg
out
sbb
cvtdq2ps
or
mov
mov
ror
adc
xchg
push
stc
rcl
dec
js
stos
or
xchg
addr16
(bad)
outs
in
inc
pop
xchg
pusha
push
dec
inc
fisubr
and
mov
xchg
or
dec
jnp
je
add
xchg
mov
std
fild
adc
push
xchg
mov
ret
in
pop
adc
or
rcl
xchg
bound
cwde
mov
xor
and
fistp
mov
les
sbb
xchg
mov
add
loopne
dec
loop
or
mov
cmp
xor
mov
movs
pop
(bad)
cdq
or
adc
xlat
out
mov
je
test
adc
enter
rcl
ja
inc
adc
(bad)
ss
imul
sub
mov
fwait
xchg
jns
push
fsub
mov
xchg
inc
call
and
fdivp
ror
movs
add
add
inc
jb
scas
lock
xchg
cmps
movs
cmc
sbb
jbe
mov
and
in
inc
lock
and
loope
xchg
jo
fcomp
xor
pop
fdiv
cmp
ja
sbb
ror
push
cwde
call
adc
xchg
movs
pop
xchg
or
test
push
xchg
and
inc
imul
clc
neg
aam
mov
xchg
in
daa
mov
clc
jnp
mov
xchg
test
mov
push
or
xchg
dec
mov
jge
pusha
jne
xchg
leave
push
lods
test
ret
inc
fwait
retf
mov
push
mov
xchg
pop
je
mov
mov
mov
adc
ins
cmps
pushf
sbb
xchg
shl
test
notrack
adc
adc
in
xchg
add
fisubr
or
push
dec
xchg
inc
adc
sbb
or
xchg
stos
dec
les
push
xchg
push
or
fnstenv
jmp
xchg
xor
mov
cwde
xchg
fs
test
dec
xor
clc
les
jmp
ja
and
je
xchg
fsubp
pop
lods
cmc
arpl
xchg
and
test
add
retf
push
cmp
xchg
or
test
ds
jmp
je
xchg
cli
js
pop
nop
xor
(bad)
xchg
call
(bad)
xchg
popa
mov
cmp
js
sub
jl
cmp
rcl
out
cmp
xor
sar
cmp
loopne
and
mov
neg
mov
pop
retf
push
inc
xchg
sar
add
mov
gs
adc
mov
mov
mov
jl
xchg
adc
jg
push
imul
xor
push
xchg
jmp
mov
js
aad
pop
fs
iret
lea
adc
movs
test
gs
or
daa
add
or
push
call
xchg
cmp
leave
dec
sar
xchg
xchg
xchg
jnp
adc
enter
and
add
stos
rcl
inc
ins
sub
pop
jmp
inc
adc
pop
(bad)
retf
or
cmp
xchg
push
repz
pop
ret
fbstp
xchg
inc
test
pop
(bad)
add
xchg
add
jmp
jge
pop
ja
and
xchg
shr
movs
cmp
popa
xor
popa
stos
int
push
mov
dec
xchg
pop
push
sub
xchg
fisub
jo
adc
into
xchg
pop
adc
pop
cmp
xchg
das
cmp
pop
adc
pop
pop
and
mov
adc
data16
cmp
xor
aaa
xchg
pop
cdq
ds
ins
aas
xchg
not
out
mov
fs
xchg
sar
ffree
xchg
add
adc
xchg
push
iret
das
loope
(bad)
push
and
xchg
mov
es
std
(bad)
inc
sbb
adc
ins
add
sar
sbb
je
or
in
xchg
push
loop
pop
(bad)
mov
xchg
push
mov
xchg
add
cmp
or
fs
loopne
cmp
shl
std
mov
mov
adc
mov
pusha
stos
pop
retf
xor
mov
aas
adc
xor
xchg
mov
mov
ret
(bad)
(bad)
(bad)
mov
je
mov
rcl
dec
adc
sub
(bad)
adc
mov
into
test
inc
push
repz
mov
cmp
lock
dec
mov
jnp
cwde
xchg
or
repz
xor
cmp
ins
adc
repz
lods
addr16
out
pushf
mov
mov
sar
jnp
out
das
cmp
mov
ins
mov
arpl
sub
push
xor
or
jbe
retf
loopne
ins
(bad)
jns
test
scas
ja
pop
sub
neg
xchg
repz
adc
(bad)
dec
xchg
push
xor
dec
sub
test
jnp
imul
xchg
xchg
pop
push
mov
fimul
sti
imul
outs
adc
pop
js
fsubrp
xchg
lods
in
std
clc
and
cmp
pop
in
test
xchg
mov
jae
inc
mov
imul
fdivr
sahf
jmp
push
jne
cmps
jbe
adc
jmp
aad
sbb
or
mov
not
(bad)
repz
xchg
clc
shl
cmc
add
dec
imul
inc
mov
mov
add
mov
fistp
xchg
sbb
add
push
sbb
inc
(bad)
and
xchg
fidivr
dec
and
iret
shl
fistp
popf
fmul
sub
cs
add
jmp
cmp
aas
jle
sti
adc
add
cs
jmp
je
lods
(bad)
fist
aaa
mov
cdq
(bad)
sbb
sti
xchg
mov
xchg
xchg
iret
push
pop
adc
xchg
mov
mov
stos
cmp
adc
adc
test
sub
nop
int3
in
clc
xor
loop
repz
shr
ds
xchg
xchg
lods
sub
mov
cld
shl
mov
das
rcl
arpl
xchg
fidiv
inc
and
fcomi
std
shl
xchg
jle
sub
icebp
mov
jmp
cmc
add
push
xchg
loope
clc
inc
or
fstp
call
fwait
push
(bad)
jo
hlt
movs
outs
mov
xor
(bad)
push
or
push
adc
int3
fcomip
mov
push
xlat
mov
(bad)
js
leave
icebp
pop
(bad)
rcr
rcl
mov
push
xchg
fwait
popa
fnstcw
xchg
shl
adc
inc
push
cmp
mov
jnp
push
movs
lock
xchg
jne
inc
mov
xor
jp
xchg
inc
mov
and
das
fcom
inc
add
mov
hlt
adc
das
dec
rcl
jp
mov
xchg
enter
(bad)
mov
loop
fsub
dec
test
mov
push
adc
les
ret
ins
into
xchg
xchg
gs
add
dec
xchg
aam
xchg
push
push
fstp
and
xchg
test
jo
in
or
mov
mov
mov
xchg
inc
xchg
pop
mov
std
cmp
xor
mov
xlat
sub
test
mov
push
sar
add
pop
movs
jo
lds
imul
cwde
push
data16
mov
mov
sti
mov
sbb
in
inc
sub
stos
mov
adc
aad
inc
call
mov
sbb
xchg
int
fwait
adc
mov
outs
xchg
jnp
dec
sbb
popa
jle
ror
jp
les
push
xchg
mov
jg
out
jae
int
imul
jb
mov
sbb
mov
cmp
les
pop
xlat
mov
pop
push
sbb
xchg
das
out
gs
je
xchg
aad
add
xchg
cwde
mov
addr16
fdivr
xchg
inc
push
bound
test
mov
loope
loopne
push
arpl
mov
jmp
shl
movs
adc
leave
xchg
xchg
dec
jns
sbb
xchg
hlt
stos
sub
cmps
(bad)
sub
rcr
push
out
pop
das
xchg
jle
adc
dec
pop
jecxz
xchg
inc
dec
pextrw
test
mov
xchg
ja
iret
mov
aad
jno
out
sbb
clc
fwait
test
aaa
mov
xchg
retf
or
fadd
xchg
mov
or
mov
pop
pop
shl
inc
loopne
std
xchg
mov
cmp
mov
sbb
xchg
mov
es
scas
(bad)
movs
mov
inc
adc
xchg
inc
stos
int
mov
xchg
push
jo
jb
xchg
cmp
lock
xchg
test
hlt
test
jbe
xchg
cld
lock
mov
sti
xchg
xor
call
loopne
js
aas
movs
and
xchg
inc
inc
les
jg
jmp
jl
adc
add
xchg
pusha
mov
dec
dec
out
sbb
and
outs
out
xchg
adc
cmps
mov
mov
cli
pop
push
xchg
xchg
adc
xchg
mov
xor
rcl
xlat
pop
movs
xchg
pop
or
dec
rcl
bound
jmp
sbb
add
fild
mov
mov
call
jae
add
retf
xchg
int3
and
lods
pop
mov
xchg
outs
out
push
sbb
dec
mov
pop
stc
push
adc
adc
or
pop
xchg
jge
fsubr
xchg
jp
loope
pop
mov
iret
xchg
xlat
push
cwde
(bad)
in
xchg
cmp
mov
lods
add
out
mov
scas
push
sub
test
xchg
mov
xchg
test
jecxz
repz
mov
sub
xchg
pop
push
jne
or
ins
mov
cli
nop
sub
xchg
retf
(bad)
add
sub
xchg
call
cmps
mov
dec
jns
push
inc
pop
xchg
dec
push
lds
fidivr
and
clc
es
and
xchg
(bad)
add
jmp
jbe
xchg
sti
loope
mov
aas
sbb
popa
jge
pop
push
in
mov
mov
test
(bad)
imul
nop
mov
mov
push
xchg
add
ja
mov
mul
xchg
das
cmp
test
out
mov
lock
xchg
ret
xchg
movs
and
fs
or
into
ins
add
xchg
mov
mov
mov
pcmpgtb
adc
cmp
sub
push
hlt
popf
ja
sub
and
aaa
xchg
cdq
ficomp
in
xchg
rcl
retf
xchg
test
mov
ficom
loope
fist
pop
repnz
xchg
inc
xchg
daa
cmc
std
pop
and
add
aaa
mov
and
xchg
cmp
push
imul
push
(bad)
sar
outs
mov
sahf
jne
dec
inc
into
fist
js
pushw
add
call
leave
ficom
fsubr
ds
jmp
cli
and
fst
mov
add
xchg
fwait
push
mov
arpl
xchg
mov
outs
inc
(bad)
mov
mov
inc
xchg
neg
(bad)
dec
inc
in
int
and
xchg
jmp
dec
xchg
(bad)
mov
cmps
mov
push
in
ins
in
mov
and
pop
adc
mov
dec
xchg
xor
push
dec
xchg
enter
lahf
adc
dec
sub
std
stos
jnp
fwait
aas
push
xchg
xor
jno
sub
cwde
xchg
sbb
xchg
pusha
pop
fist
push
rcl
(bad)
xchg
out
fs
ret
sbb
xchg
dec
sub
outs
jge
mov
sub
pop
adc
xchg
push
mov
xchg
xchg
fadd
or
sbb
pop
xchg
sub
leave
mov
rcr
xchg
xchg
test
jle
adc
push
mov
cmp
inc
cmp
cwde
cs
pop
push
mov
lahf
in
fwait
or
test
sub
jl
xchg
(bad)
xor
outs
xchg
shr
call
sti
movs
jae
xchg
test
add
pop
and
xchg
cld
(bad)
lock
xor
and
stc
dec
xchg
mov
sub
fiadd
cs
mov
jge
adc
push
ins
mov
mov
adc
xchg
in
arpl
xor
(bad)
stc
adc
test
sub
inc
sub
sbb
fst
push
ss
iret
cli
or
adc
jae
pushf
push
and
pop
sbb
add
jns
sar
cmc
js
lds
cld
and
adc
pop
aad
retf
shr
scas
imul
out
xchg
out
jge
mul
mov
inc
xor
cmp
loop
js
loopne
loope
test
inc
adc
(bad)
mov
mov
xor
dec
cmp
pop
xchg
leave
cmps
ret
cdq
mov
sbb
addr16
not
popf
nop
and
aas
mov
jae
xchg
sub
and
xchg
(bad)
jne
neg
inc
adc
dec
mov
xchg
sub
jp
or
or
jns
ret
mov
loope
dec
mov
js
(bad)
cmps
xchg
outs
cmp
in
shr
sub
pop
adc
xchg
arpl
ja
mov
add
xchg
fs
sbb
dec
xchg
inc
pop
jae
ds
xor
or
or
data16
xchg
fnsave
pop
xor
sbb
jns
pushf
cdq
je
dec
(bad)
mov
je
repnz
pusha
mov
(bad)
fsub
fwait
repz
mov
pop
xchg
stc
xchg
jnp
scas
enter
adc
(bad)
xchg
xlat
pop
inc
inc
xor
mov
sahf
jns
fstp
cmps
test
adc
repz
adc
mov
test
dec
mov
xor
and
arpl
mov
ret
dec
mov
pushf
sbb
and
neg
xchg
not
in
(bad)
lahf
jno
lea
mov
xor
mov
mov
inc
fild
nop
mov
jl
adc
scas
sbb
jns
mov
shl
mov
xchg
stos
xchg
sub
nop
xor
pushf
bound
mov
mov
aaa
jg
fild
xor
data16
xor
xchg
pop
pop
mov
out
push
pushf
cmps
retf
xchg
xor
inc
jl
and
js
or
ja
ins
xchg
cmp
mov
xchg
push
pop
or
cmp
ins
(bad)
inc
add
pop
movs
mov
xchg
xchg
in
jno
inc
repnz
mov
aad
and
scas
push
into
xchg
fs
cmp
pop
mov
sbb
das
test
hlt
inc
xlat
add
scas
xchg
xchg
ds
loop
xor
(bad)
adc
aad
cli
xchg
xor
xchg
adc
push
xchg
(bad)
shl
and
xchg
aad
in
fcom
pop
xchg
(bad)
shr
ja
mov
loopne
jae
movs
out
jnp
in
(bad)
mov
icebp
xchg
mov
addr16
sahf
xchg
mov
iret
lods
cmps
popf
lods
add
adc
div
int
pushf
test
sbb
pop
and
test
xchg
push
inc
and
adc
cmp
sbb
xchg
inc
mov
push
mov
js
ret
cwde
arpl
daa
(bad)
push
jmp
fst
xchg
out
add
and
jg
cs
sub
into
test
adc
jmp
xchg
ret
jae
mov
mov
hlt
div
(bad)
loop
sbb
cmps
inc
adc
xchg
mov
or
xchg
daa
mov
std
xchg
shl
mov
adc
jns
xchg
sbb
test
ss
lods
dec
sbb
xchg
pop
ret
lds
ins
or
mov
stos
add
pop
movs
jge
sub
mov
inc
xchg
jecxz
add
mov
jmp
xchg
rol
jmp
sbb
push
xchg
cmp
pusha
fwait
mov
xor
xchg
jns
fmul
call
xchg
pop
popa
xor
or
outs
repnz
xchg
mov
push
mov
xchg
ret
xchg
xor
add
dec
xchg
and
aaa
xchg
pushf
fsubr
lea
xchg
ins
clc
xchg
push
sbb
cmp
xchg
and
dec
and
push
dec
sbb
jmp
xchg
stos
and
adc
inc
dec
idiv
mov
sub
pop
fwait
xor
inc
push
dec
hlt
rcl
jno
lds
inc
xlat
push
dec
repz
ss
mov
daa
or
out
xchg
xchg
cmp
jnp
cmp
and
cmps
xchg
inc
bound
and
call
dec
xchg
sar
cmp
daa
mov
int
push
cmp
xchg
lahf
xchg
xchg
scas
(bad)
mov
int
push
jmp
xor
mov
mov
and
idiv
je
jmp
popa
or
xchg
(bad)
std
adc
add
mov
or
pop
int3
jmp
push
cmp
sti
xchg
adc
adc
add
(bad)
in
mov
into
sub
xor
adc
xchg
ret
cld
aam
xchg
je
xchg
dec
push
lea
je
xchg
(bad)
repz
mov
jb
xchg
das
mov
addr16
pop
pop
cmp
je
popf
and
out
jmp
in
mov
cmp
les
mov
push
xor
pop
jg
mov
dec
xchg
test
cdq
stos
xor
shl
adc
out
pop
jb
mov
loopne
xchg
mov
sbb
xchg
xchg
daa
pop
sbb
xchg
and
adc
xor
push
mov
push
jae
xchg
out
addr16
add
pop
and
push
jmp
pop
mov
aam
xchg
pushf
fld
pop
or
test
outs
int
xchg
push
(bad)
jecxz
clc
sub
rcl
xchg
ret
pop
sub
in
in
cmps
pop
xchg
jns
cli
stc
dec
adc
xchg
or
add
into
sbb
fwait
pop
dec
leave
inc
inc
mov
xchg
pop
pop
or
mov
mov
(bad)
mov
mov
out
jno
mov
xor
scas
pushf
in
sbb
(bad)
xchg
in
mov
cmp
adc
xchg
push
lds
and
sbb
push
repnz
adc
into
or
adc
xor
push
out
test
and
dec
inc
sbb
xchg
mov
ins
bound
test
ins
pop
ins
xchg
jo
push
retf
dec
(bad)
or
xchg
gs
push
jge
xlat
jo
push
add
push
add
inc
lock
xchg
push
add
sub
dec
lods
inc
sti
push
mov
xchg
sbb
add
daa
loop
xchg
dec
in
repz
fwait
xor
push
hlt
icebp
xchg
add
xor
shl
mov
and
inc
push
mov
xchg
push
dec
mov
sbb
xchg
sbb
mov
cmp
adc
mov
test
xor
into
cli
xchg
inc
xchg
sbb
mov
sub
mov
adc
in
mov
pop
popf
fcomp
dec
adc
push
mov
push
xchg
mov
jae
and
sti
pop
lods
test
cmp
pop
push
push
mov
out
xchg
hlt
sbb
jmp
rcl
xchg
rcl
add
cld
or
add
nop
out
mov
adc
xchg
test
shl
xchg
in
into
sbb
jmp
push
adc
xchg
cmp
icebp
push
jne
push
fwait
sahf
xchg
or
in
pop
sti
clc
and
xchg
(bad)
loopne
ds
jb
xchg
repz
sahf
ret
aad
icebp
xchg
and
mov
cdq
(bad)
inc
adc
xchg
inc
jb
mov
jl
xchg
clc
pop
mov
scas
xchg
jno
mov
jae
sbb
(bad)
push
inc
xchg
mov
je
jne
out
hlt
jb
push
pop
add
push
jecxz
push
xchg
stos
adc
icebp
fst
ss
popf
cdq
cmp
pop
mov
push
cmp
pop
xchg
sar
int3
sahf
mov
xchg
leave
ss
outs
dec
jp
adc
mov
cdq
push
test
mov
xor
sbb
xchg
pop
leave
pop
pop
fnsave
sbb
dec
fwait
fwait
in
mov
not
in
mov
pop
pop
scas
jp
shl
xchg
ret
and
jo
movs
add
jnp
push
push
shl
and
mov
add
or
xchg
sub
and
rcl
jp
mov
pop
xchg
or
sub
xchg
sbb
adc
xchg
inc
shl
inc
xchg
mov
cmc
ss
fcom
lock
ds
or
sbb
sbb
xlat
loopne
(bad)
xchg
push
(bad)
xor
mul
sahf
jmp
lahf
sub
enter
push
test
xor
scas
add
xchg
(bad)
mov
mov
xchg
mov
adc
xchg
repz
imul
ss
mov
dec
cmp
mov
aam
inc
ret
ins
xchg
xchg
and
call
inc
push
push
or
inc
mov
dec
push
dec
xchg
xchg
jns
retf
clc
(bad)
neg
mov
add
push
lods
je
test
xchg
adc
jae
shl
inc
clc
arpl
push
xchg
or
sub
jb
loopne
and
retf
xchg
test
cwde
mov
int
xchg
lods
mov
dec
cld
ret
stc
dec
fwait
mov
repz
inc
mov
adc
mov
jg
sub
xor
(bad)
loope
sub
push
push
std
xchg
nop
jg
or
lea
xchg
out
pop
leave
outs
loope
fist
mov
aaa
and
mov
cmp
push
retf
lds
jge
mov
in
mov
xchg
lsl
dec
and
jp
sub
fs
add
sahf
movs
or
test
jbe
cmp
xchg
or
jmp
push
and
lds
and
outs
into
sahf
sub
cmp
fst
loopne
ret
or
push
sbb
out
ds
dec
xor
adc
mov
inc
movs
sbb
not
call
pop
inc
enter
xchg
or
stc
jae
out
test
sbb
lahf
add
outs
inc
or
mov
in
xchg
les
push
out
lahf
cmp
stc
adc
call
ror
xchg
pop
mov
les
sbb
cmp
neg
popa
xchg
pop
leave
rcl
sbb
cmps
gs
xchg
xchg
ficom
sub
mov
aam
jns
xchg
fcom
pop
xchg
div
rcl
push
or
cld
into
outs
inc
sub
or
push
xchg
bound
cwde
jmp
xchg
stos
push
sbb
xor
test
jbe
xor
and
xchg
je
fwait
dec
pop
inc
cmp
inc
arpl
xor
scas
dec
jg
mov
push
movs
push
adc
rol
fs
js
add
and
int
cmp
xor
push
xchg
clc
rcr
mov
hlt
outs
mov
in
and
scas
push
sti
xchg
inc
pop
jg
inc
or
pop
mov
pop
mov
jnp
mov
imul
mov
xor
add
jp
sub
jle
mov
mov
inc
int
jge
pop
mov
and
outs
push
adc
daa
dec
rcl
add
push
inc
xchg
fwait
bound
enter
aas
inc
into
lock
add
je
jp
pop
scas
xchg
lods
fdivr
sbb
ja
mov
popf
ins
int
jbe
(bad)
nop
jp
xchg
ret
clc
sub
xchg
scas
xchg
je
sbb
iret
dec
lock
add
sbb
xchg
out
mov
adc
mov
lock
and
js
(bad)
neg
pop
aam
fst
push
xchg
push
inc
mov
ret
adc
je
stos
inc
add
xchg
ins
leave
jns
imul
xchg
push
imul
or
add
dec
std
test
inc
mov
adc
sahf
jp
pusha
cli
(bad)
xchg
add
xor
xchg
cdq
xchg
xchg
mov
cmp
fidiv
jo
repz
xchg
ds
std
push
fcom
fwait
lock
ret
jmp
rol
mov
xchg
mov
xchg
out
push
cmc
mulps
pop
fwait
pop
or
adc
xor
adc
arpl
xchg
imul
out
in
lods
add
dec
js
add
shl
push
xchg
repnz
shl
adc
mov
je
repz
or
xchg
push
bound
jnp
cld
cdq
addr16
jecxz
sbb
in
push
ficom
jae
fist
cwde
imul
mov
mov
xchg
sahf
(bad)
aad
mov
jns
stos
xor
(bad)
fwait
hlt
push
add
int3
add
jns
xor
(bad)
xor
iret
aam
xchg
cli
sahf
adc
inc
fisub
stos
add
jle
xchg
imul
not
xchg
mov
xchg
outs
jo
ret
jg
ins
dec
pop
cmps
xchg
push
add
out
pushf
xchg
jo
shl
xor
stos
xchg
xor
add
mov
mov
xchg
or
xlat
mov
xchg
sar
bound
fdivr
mov
sub
xchg
mov
sbb
in
xchg
jnp
xchg
icebp
mov
inc
inc
xchg
mov
shr
pushf
and
test
mov
movs
dec
cmps
cmp
mov
outs
mov
ror
xchg
inc
repnz
aaa
ins
jmp
ja
xchg
xor
das
loopne
and
pop
bound
xchg
xor
cmp
mov
fwait
icebp
xchg
add
in
aam
les
popa
pop
or
out
stos
jno
lahf
dec
adc
push
imul
retf
cdq
sbb
fcom
stos
mov
aam
push
shl
pop
outs
pop
adc
int
aas
add
mov
jecxz
cmp
mov
xchg
leavew
ins
push
ins
mov
ss
push
mov
or
and
hlt
or
xchg
cmps
nop
ret
cld
pusha
test
mov
iret
lea
adc
mov
bound
sub
sbb
cmp
not
xchg
xor
mov
cmp
push
jmp
inc
xchg
and
xchg
xchg
push
mov
jno
xor
ficom
xchg
add
sub
fadd
jne
cld
add
xchg
jp
stc
aad
adc
sub
icebp
xchg
or
push
sahf
jecxz
adc
xchg
ficomp
mov
xchg
jp
push
sub
xchg
daa
ins
mov
cmp
xchg
sub
pop
xchg
sahf
cs
xchg
jmp
lea
cmps
test
pusha
mov
(bad)
mov
xchg
imul
jmp
into
dec
not
push
push
jmp
add
loop
hlt
sub
xchg
push
ss
call
xchg
xchg
loope
jo
cmp
stc
xchg
mov
mov
sub
or
shl
out
mov
or
jmp
leave
xchg
mov
ret
jle
xchg
xor
not
jl
jl
(bad)
arpl
jle
js
push
aam
sahf
xchg
inc
leave
stc
aaa
push
fbstp
js
mov
pop
xchg
sar
aad
call
xchg
inc
imul
cld
xchg
push
push
test
adc
fisttp
sbb
cmp
xchg
fdiv
xor
xchg
adc
xor
fist
inc
and
add
mov
push
xchg
ds
add
retf
dec
mov
imul
hlt
xchg
push
mov
daa
jo
jns
jnp
add
inc
cs
dec
test
mov
mov
or
mov
sbb
pop
je
pop
add
sbb
sar
shl
arpl
push
and
into
retf
xchg
adc
outs
xor
adc
stc
and
aaa
aam
arpl
fwait
xchg
cmp
popf
adc
fsubr
push
xchg
in
cwde
inc
mov
test
dec
aad
or
addr16
or
shl
jno
adc
movs
in
xchg
mov
xchg
(bad)
cli
bound
cmp
cdq
or
mov
retf
cmps
xchg
add
test
not
mov
xchg
xlat
mov
cmp
sbb
xchg
rol
cmp
pop
adc
repnz
cdq
gs
xchg
and
inc
push
test
ror
hlt
dec
arpl
loopne
sbb
cmp
fwait
ret
xchg
jmp
(bad)
xchg
call
inc
sub
test
and
loopne
xchg
mov
inc
mov
xchg
xor
add
test
(bad)
sub
das
call
scas
mov
and
jg
loop
sbb
xchg
cmp
aad
fwait
clc
cmps
in
cmps
add
add
mov
sbb
cmc
inc
jb
pop
jge
xchg
xchg
sub
sbb
scas
xchg
xchg
pop
iretw
push
lahf
xchg
mov
push
enter
xchg
add
aaa
fst
sbb
xchg
adc
mov
push
lods
dec
not
daa
cmp
fidivr
lods
xchg
jmp
in
dec
jp
mov
xchg
adc
mov
(bad)
xchg
aam
test
xchg
rol
mov
fisubr
mov
xchg
outs
jns
xor
xchg
ret
imul
pop
xchg
pop
adc
mov
add
fwait
dec
xchg
clc
popf
jmp
aam
sub
xchg
push
retf
inc
dec
push
clc
xchg
fstp
and
xchg
cmp
ins
arpl
in
imul
test
scas
adc
fisttp
stos
out
ret
cdq
push
retf
repnz
and
outs
add
mov
mov
out
mov
ret
or
pusha
shr
push
jp
fistp
mov
inc
cmp
sbb
into
mov
je
or
push
mov
(bad)
jle
pushf
rcr
mov
mov
lock
in
mov
sub
aas
jb
inc
xchg
jmp
xchg
or
retf
sub
xor
js
cmp
adc
xchg
fcomp
mov
mov
push
test
lldt
inc
les
mov
in
xchg
push
xchg
retf
test
cmp
push
das
jg
mov
xchg
add
mov
cdq
imul
jle
xchg
mov
mov
not
or
cmp
es
sbb
and
jecxz
sahf
aam
jp
mov
cmp
mov
popa
fsubr
nop
enter
nop
adc
cmp
cmps
test
ins
push
call
xchg
imul
lds
loope
(bad)
shr
mov
adc
sub
xchg
(bad)
push
test
cmp
ins
mov
inc
jle
xchg
rcr
out
push
mov
ror
sbb
cmp
mov
push
or
or
pop
adc
cli
mov
inc
jle
mov
stos
xor
inc
sub
std
dec
cdq
mov
lock
xchg
xchg
or
jne
dec
dec
hlt
shl
mov
and
and
cs
push
xchg
test
in
lea
push
sbb
in
pushf
mov
add
xor
mov
push
shl
and
iret
push
outs
adc
gs
or
adc
mov
lods
xchg
out
xchg
test
xor
cdq
push
sbb
jno
dec
and
mov
lock
xchg
data16
lahf
xchg
(bad)
imul
cmc
mov
or
retf
push
in
jge
mov
or
xchg
jmp
xor
adc
not
push
mov
adc
mov
pop
xchg
retf
int
xor
xchg
jg
push
sbb
xchg
xchg
nop
stos
out
(bad)
loopne
ret
xchg
fmul
cmp
or
fld
or
xor
int
push
daa
test
dec
xchg
call
(bad)
and
xchg
cmp
mov
push
fiadd
adc
ror
ins
xchg
xchg
sbb
adc
xchg
pop
and
mov
xor
popf
aam
xchg
hlt
imul
dec
xchg
es
test
ja
pop
add
inc
stos
push
adc
jmp
test
mov
mov
sbb
xor
out
aam
stos
cmps
lds
xor
pop
xchg
jmp
loope
aaa
cs
movs
xchg
mov
mov
cmp
fs
xchg
inc
xor
repnz
(bad)
lds
sub
and
nop
push
mov
es
sbb
adc
mov
aam
pop
lahf
shl
shr
mov
(bad)
cli
xchg
or
addr16
xchg
ins
jmp
outs
jmp
dec
mov
or
repz
loope
xchg
pop
pop
pop
repnz
sbb
xchg
sub
mov
xchg
adc
or
rcl
mov
xchg
not
ficom
xor
xchg
bound
loope
add
add
xchg
mov
dec
stc
call
clc
mov
or
das
fcom
xchg
sub
xor
rol
out
cwde
lahf
pop
and
lds
xor
sbb
jmp
inc
shl
ds
jnp
nop
or
xchg
sub
fsubr
xlat
mov
in
iret
cmps
add
sar
fsubp
push
cmp
(bad)
into
push
call
daa
pop
arpl
adc
(bad)
and
leave
mov
jmp
or
clc
xchg
sete
mov
xor
and
xor
adc
(bad)
xchg
jne
iret
loopne
inc
mov
add
jge
out
xchg
push
mov
loopne
xchg
pop
dec
jl
(bad)
call
and
mov
jmp
xchg
ds
aam
retf
mov
cmp
cdq
iret
adc
xchg
xor
xchg
adc
jl
test
popf
outs
push
popf
adc
leave
add
pop
xor
imul
xchg
sti
dec
enter
jbe
push
scas
ins
pshufw
popf
or
xor
push
mov
xchg
lock
lods
sbb
ds
jp
(bad)
je
cmps
jo
les
add
std
inc
cmc
and
jp
xchg
mov
js
rcl
sub
mov
aam
int3
mov
ficomp
or
sub
lods
jnp
jne
ror
mov
xchg
imul
xchg
mov
test
ficom
lahf
(bad)
fst
adc
xchg
push
add
stc
mov
adc
je
or
leave
pop
sub
push
xlat
push
mov
cmps
mov
test
dec
xchg
sub
xchg
sub
pop
imul
lods
xchg
jecxz
jno
push
imul
adc
aam
fwait
sbb
mov
pop
push
stos
iret
mov
int
or
ins
iret
xchg
in
dec
ins
je
sub
scas
outs
cmps
and
xchg
cmp
loopne
jmp
fwait
mov
xchg
mov
adc
sar
add
lahf
cli
and
dec
adc
xchg
inc
aam
xchg
jmp
jmp
mov
fsubr
xor
xchg
xchg
in
rcr
mov
xchg
xchg
mov
jg
retf
xchg
add
les
mov
mov
jmp
cmp
push
jmp
xchg
mov
cdq
scas
hlt
dec
ret
pop
lahf
cwde
sbb
dec
xchg
mov
or
jns
fidiv
pop
int
call
je
and
xchg
(bad)
rcr
cmp
xor
shl
xchg
add
push
mov
in
retf
sbb
sbb
cld
jno
xor
push
xchg
cmp
ss
dec
inc
inc
mov
loope
ins
sub
sbb
xchg
xchg
xor
mov
sbb
jmpw
xchg
xchg
inc
pop
(bad)
ror
fild
fs
mov
(bad)
xchg
mov
or
repnz
data16
nop
(bad)
and
xchg
sar
retf
add
mov
add
adc
or
imul
xor
inc
jl
retf
pop
daa
cmp
cld
mov
inc
pop
je
pusha
or
jb
dec
mov
xchg
sub
cmp
jne
pop
es
pop
cmp
je
mov
stos
scas
mov
dec
pop
xchg
mov
test
xchg
in
cmp
les
xor
stos
pushf
xchg
rcl
inc
sbb
arpl
adc
mov
popf
jno
rcl
pop
adc
cmp
cs
push
xchg
shl
dec
or
mov
pop
lock
pop
fwait
mov
lds
mov
cwde
int3
jge
popa
mov
xchg
dec
xor
inc
sub
cmc
xchg
inc
rcl
inc
pusha
rcl
xchg
test
mov
jp
adc
lods
sub
loopne
push
(bad)
repnz
mov
jns
imul
inc
rcl
jg
xchg
mov
cmps
sub
xchg
xor
jb
call
push
fisubr
inc
xchg
(bad)
xchg
cld
mov
xchg
pop
cmp
adc
mov
cli
xchg
jbe
jmp
push
xchg
push
mov
cmc
fsub
mov
sub
xchg
or
test
cs
xchg
pop
add
out
sub
mov
(bad)
adc
ds
les
fist
ror
add
sub
mov
popa
lea
jge
mov
aad
mov
xchg
clc
dec
sbb
xchg
xchg
pushf
in
mov
lea
test
xor
fisttp
xor
mov
repz
pop
aas
or
xchg
mov
sub
inc
xchg
jecxz
push
or
(bad)
xchg
xchg
std
xchg
push
mov
adc
mov
ret
mov
push
mov
push
mov
int3
in
nop
push
mov
aaa
add
and
dec
pop
jbe
push
fcomp
add
rol
sub
ins
in
xchg
btr
push
adc
jp
xchg
xchg
cmp
ds
push
gs
aam
int3
inc
xchg
jmp
(bad)
xchg
outs
inc
ins
(bad)
push
pop
mov
dec
imul
sub
adc
shr
inc
fxch
xchg
mov
fwait
adc
mov
int
adc
push
icebp
push
in
jmp
aas
mov
push
ud2
es
ins
xchg
push
jmp
add
adc
cmp
ja
and
pop
push
fst
sti
fistp
inc
cmp
cmp
push
imul
xor
and
clc
mov
sahf
cmps
test
dec
mov
mov
jns
push
mov
mov
dec
jo
dec
xchg
pusha
mov
cli
loop
sbb
mov
mov
xchg
or
xchg
rcl
jnp
fidivr
xchg
dec
lods
adc
xor
shl
push
xor
dec
xor
test
ds
xchg
call
fild
sti
xchg
mov
or
pop
sub
cdq
fcom
int
pop
ja
mov
mov
inc
sete
sub
dec
es
adc
sbb
xchg
or
idiv
lahf
pop
jnp
mov
jl
cvtpi2ps
xchg
mov
and
pop
mov
fcom
pop
std
adc
in
les
xchg
add
push
cmps
ret
mov
aam
sbb
dec
xchg
adc
mov
outs
xchg
pop
sub
inc
xchg
dec
out
inc
scas
mov
push
jl
scas
test
es
jns
cld
xchg
sahf
xchg
mov
popf
fwait
jp
clc
push
cmps
and
pop
jo
xchg
sbb
loope
mov
jmp
fst
in
inc
pop
int
xchg
dec
hlt
pop
(bad)
(bad)
pop
fcom
leave
ins
mov
enter
cwde
pop
sub
xchg
dec
out
add
and
sbb
imul
in
sti
js
xchg
xchg
aas
mov
xchg
es
mov
aad
fwait
popa
lahf
and
loope
repnz
mov
out
xor
stc
pop
and
ins
movs
fiadd
popa
or
or
outs
pop
mov
xchg
hlt
imul
ss
clc
add
js
std
xchg
jg
add
xchg
and
ret
movs
mov
mov
movs
cmps
add
pop
xchg
mov
mov
push
rcr
sti
xchg
push
bound
mov
(bad)
xchg
xchg
jo
or
aad
jb
push
pushf
xor
outs
mov
pop
and
ins
push
mov
add
into
xchg
mov
test
xor
icebp
(bad)
adc
daa
scas
xchg
jae
sbb
ja
pop
jp
rcl
xchg
cmp
push
in
aaa
and
lahf
xchg
mov
or
pop
nop
jge
test
jmp
out
xchg
mov
xchg
pop
or
push
mov
xchg
outs
loopne
ins
push
dec
not
sbb
pop
pop
xchg
stos
xchg
imul
enter
out
pop
mov
xchg
xchg
daa
jp
sub
pop
jae
cmps
cld
mov
add
adc
mov
push
enter
xchg
and
xchg
pop
test
out
xchg
cs
jg
mov
not
dec
pop
in
scas
js
cmp
inc
mov
pusha
xchg
aas
fist
mov
mov
ja
xor
cmp
es
jno
popf
jmp
pop
dec
out
xor
xchg
mov
cld
in
mov
gs
pop
adc
pop
push
repnz
lods
(bad)
xchg
les
pop
push
imul
adc
push
xor
push
add
hlt
or
pop
push
pop
mov
xchg
mov
mov
fwait
cmps
dec
mov
aas
jns
gs
add
mov
and
xor
xchg
cmp
pusha
test
jmp
or
retf
mov
mov
or
cmp
mov
test
pop
and
adc
fwait
xchg
shr
enter
(bad)
xchg
in
dec
sahf
dec
sti
mov
xchg
retf
adc
out
xchg
shr
addr16
scas
xchg
adc
pop
and
jmp
int
dec
lods
call
out
fst
pusha
loope
xchg
jecxz
and
mov
cmp
movs
push
and
out
mov
jp
lods
adc
add
fwait
(bad)
mov
hlt
inc
in
shl
test
sub
mov
jb
sbb
xchg
data16
xor
lods
inc
adc
and
jnp
xchg
popf
push
fld
sub
sahf
xchg
fist
sti
xchg
cmp
ds
sub
add
rcl
setns
rcl
jg
xchg
repz
lods
shl
mov
sbb
(bad)
dec
iret
cmp
sbb
push
inc
lea
lods
mov
aam
ret
xchg
jp
bound
ror
cmp
inc
push
xchg
sti
cwde
dec
fcomip
adc
xchg
mov
rol
mov
xchg
xchg
jns
mov
mov
xchg
push
out
imul
mov
shl
hlt
and
pop
adc
add
xor
loopne
pop
popf
and
fst
out
cmp
xchg
enter
jns
dec
pop
xchg
cmp
xor
xchg
add
and
(bad)
sbb
xlat
ja
xchg
nop
sub
mov
mov
adc
mov
lods
cdq
sbb
mov
inc
adc
pop
stos
sub
(bad)
mov
and
mov
lods
mov
push
mov
out
jle
xor
mov
repz
inc
(bad)
push
out
outs
adc
xor
adc
xchg
popa
xor
test
out
adc
scas
xor
push
push
shl
jno
test
lock
cmps
stc
xchg
inc
push
scas
or
push
aam
(bad)
pop
fwait
xchg
mov
ins
cmp
and
pop
arpl
pop
dec
jo
adc
adc
lock
xchg
push
or
scas
cmp
cmp
test
push
cmp
fwait
xor
mov
push
push
arpl
mov
das
xor
sbb
ds
jno
ja
mov
sti
xchg
push
sub
jmp
mov
xchg
xchg
je
(bad)
adc
jl
repnz
push
xchg
push
stos
cmps
pop
and
dec
pop
mov
lds
call
mov
xchg
idiv
mov
hlt
aam
fist
fcomp
push
inc
jb
aas
sub
cmps
jne
xor
push
push
sbb
inc
push
xchg
sti
call
xchg
sub
jmp
sub
push
lahf
aam
add
pop
xchg
fiadd
mov
mov
mov
loopne
inc
in
lea
jl
adc
movs
mov
push
add
and
adc
mov
cmp
mov
daa
xchg
cwde
aaa
adc
and
inc
lods
rcl
mov
push
xchg
xor
es
int3
push
sub
pop
fwait
sub
mov
xchg
push
mov
pop
sbb
mov
pop
xchg
mov
cmp
pop
popf
loope
jg
adc
xor
xchg
gs
jge
cmps
lea
xchg
repnz
push
xlat
xor
mov
xor
ja
jns
mov
sbb
xor
mov
std
xchg
sbb
mov
pushw
pop
add
xchg
cs
imul
jp
xchg
das
in
mov
(bad)
and
aas
xchg
test
pop
loop
pop
setnp
jg
sbb
pop
push
pop
xor
fwait
xchg
adc
push
cmp
test
xchg
(bad)
stos
xchg
pop
cmp
xchg
imul
mov
iret
jb
jmp
add
xchg
call
xchg
enter
(bad)
xchg
sar
retf
push
(bad)
xor
dec
arpl
xchg
(bad)
cs
mov
pop
xchg
xchg
xchg
arpl
hlt
and
inc
mov
adc
les
xchg
in
lock
pop
ja
adc
push
jmp
xor
jbe
into
xchg
adc
cs
ret
stos
sub
jnp
mov
pop
arpl
add
sub
repz
mov
mov
sti
pop
jge
and
inc
ins
xchg
out
cmp
lea
or
xor
xchg
loop
cmps
jns
int
dec
xchg
mov
hlt
add
adc
and
xchg
xor
movs
ret
lahf
sbb
push
add
lea
xchg
xor
fs
push
jo
jno
cmp
ss
xor
mov
and
fwait
pop
adc
fs
or
mov
aas
outs
lock
xchg
fucomp
fdiv
(bad)
stc
in
sub
out
mov
std
push
xchg
bnd
cli
sub
xor
mov
push
sbb
sub
ror
xor
inc
xchg
cdq
les
movs
xchg
aaa
jl
out
mov
outs
lods
ds
pop
sub
stos
cmp
xchg
sub
pop
ins
ds
add
rcl
aas
rol
pop
mov
icebp
push
mov
push
fsin
mov
xchg
xchg
rol
outs
sub
or
jg
hlt
inc
or
pop
popf
fst
shl
fst
push
cld
sbb
fiadd
mov
stos
jl
in
mov
sub
push
push
mov
inc
in
sbb
dec
(bad)
retf
cmp
pop
xchg
sub
mov
test
sbb
int
cmp
mov
fwait
mov
popf
sub
les
cmps
or
mov
mov
pop
pop
frstor
xor
icebp
or
jge
xchg
sub
cmps
dec
xchg
jae
push
fiadd
inc
repz
and
jae
stos
call
stos
sbb
mov
mov
xchg
daa
jo
inc
jmp
xchg
jmp
test
push
stos
mov
adc
jae
and
repnz
pop
aaa
pop
outs
cmc
mov
sbb
and
into
in
xor
xor
inc
scas
add
xchg
mov
or
inc
js
call
leave
cmp
in
or
xchg
add
mov
add
mov
inc
push
stos
xor
sub
int
and
xor
jge
xchg
mov
push
cmp
movs
data16
(bad)
inc
mov
outs
inc
(bad)
pop
mov
out
mov
dec
cmps
xchg
ficomp
repz
jno
push
xchg
mov
std
cmp
sbb
ror
jl
shl
mov
popf
sbb
sbb
hlt
in
push
xor
add
xchg
adc
mov
push
adc
ficomp
mov
int
ret
pop
popf
fwait
outs
jae
pop
cmp
sbb
cli
into
and
mov
mov
(bad)
fdiv
dec
inc
mov
pop
push
mov
mov
je
adc
inc
sahf
sub
not
cmps
fmul
aad
into
movs
and
and
push
cdq
stos
aam
xchg
lds
ja
mov
int
push
cs
add
in
in
push
repnz
cmps
call
mov
sub
jns
mov
adc
out
pop
in
mov
jmp
pop
or
pop
stc
je
xchg
mov
ja
xchg
fs
loop
push
sbb
jmp
xchg
(bad)
sti
or
cli
daa
mov
outs
out
loope
int
xchg
pop
dec
push
mov
pusha
jmp
sbb
mov
sahf
adc
mov
gs
xchg
mov
pop
arpl
mov
pushf
ror
inc
lahf
push
or
mov
xchg
cmp
icebp
movs
scas
xchg
jmp
mov
cmc
xchg
test
in
lea
mov
je
push
jl
cmp
inc
test
mov
addr16
scas
stos
stos
(bad)
fnstenv
sar
sbb
cdq
jg
sub
push
outs
in
jp
xchg
sti
and
sub
mov
pop
pop
fwait
cmp
cmc
call
and
jl
cmp
cs
xor
outs
jg
lea
mov
mov
fcomp
das
pop
jb
xchg
ja
inc
jl
dec
ins
pop
xchg
jno
jmp
cdq
out
mov
mov
dec
cmps
cmp
fs
stos
xchg
and
push
idiv
cmp
xchg
push
add
lds
mov
fwait
nop
xchg
pop
and
mov
add
stos
xchg
dec
ins
test
pop
mov
mov
ds
test
loop
ret
je
pop
nop
sub
xchg
retf
loopne
fld
retf
dec
cmp
xchg
fisubr
fist
inc
jo
sub
out
test
les
aad
imul
sbb
sbb
xchg
push
repz
clc
xchg
xchg
jns
and
add
test
sub
popf
xchg
repnz
or
ror
lea
movs
and
mov
mov
xor
aam
cmps
es
mov
xchg
mov
jae
and
dec
jne
pop
pop
mov
imul
ror
adc
mov
aaa
mov
push
ins
test
xchg
test
jbe
ja
pop
adc
retf
mov
xchg
lods
cmp
xchg
add
inc
js
stos
xor
sub
xchg
test
xor
xchg
out
leave
stos
sbb
bound
xchg
test
rcl
and
push
les
sbb
lds
leave
jp
xchg
pop
jb
push
adc
cmp
jle
pusha
fistp
adc
pop
fs
xor
mov
add
xor
fsub
fidivr
scas
push
fcom
adc
fs
cli
lods
pop
and
and
dec
or
cmp
mov
add
mov
(bad)
xchg
push
push
aaa
cmp
call
cld
xchg
mov
call
aam
dec
adc
jae
cmp
xchg
fdivr
add
mov
arpl
push
test
xchg
sub
and
in
xchg
movs
xchg
aam
rcl
retf
pop
xchg
pop
inc
xor
or
add
push
in
ss
sbb
cdq
jmp
ffreep
push
xchg
xchg
out
xor
pop
or
xor
push
sbb
jecxz
andps
or
gs
std
aam
in
aam
add
adc
adc
xlat
cmp
push
aas
pop
add
imul
push
push
xchg
retf
(bad)
in
mov
jmp
loop
xchg
mov
sbb
mov
sbb
fidiv
imul
push
adc
xor
dec
iret
daa
mov
cmp
retf
call
idiv
xchg
and
mov
js
push
xchg
(bad)
and
sub
xchg
sub
dec
in
popa
jb
xchg
mov
jne
dec
bnd
arpl
xchg
shr
les
popf
in
adc
(bad)
dec
icebp
ret
mov
xor
mov
pop
js
adc
pop
dec
add
(bad)
popf
sahf
leave
push
sbb
add
outs
fild
test
imul
cmps
enter
or
dec
push
sar
(bad)
dec
retf
hlt
cmp
mov
pop
xchg
adc
mov
(bad)
cmps
cmp
fwait
repnz
xor
add
cmp
retf
loope
out
push
xchg
rcl
cmp
jge
fst
outs
test
popf
pushf
mov
mov
mov
add
xchg
mov
xor
mov
sub
mov
add
fst
xchg
js
std
sub
pushf
lods
xchg
retf
and
cmp
push
xchg
mov
sahf
lahf
xchg
nop
xor
inc
lahf
cmp
push
cmps
xchg
push
pusha
int3
or
ror
xchg
xor
and
call
mov
xchg
fwait
and
adc
movs
jns
clc
and
das
inc
cmps
add
mov
push
sbb
dec
adc
out
xchg
pop
ins
adc
into
jnp
xchg
jno
je
lods
sar
scas
call
xchg
adc
mov
cwde
xchg
jg
mov
mov
mov
mov
cmp
pop
cwde
cmps
xchg
dec
stc
sar
push
adc
lock
js
push
push
movs
imul
sbb
cdq
pop
(bad)
stos
mov
daa
in
call
or
jae
aas
xchg
not
lods
jmp
scas
in
pop
xor
pushw
cdq
frstor
test
pop
xchg
ja
push
lahf
jmp
sbb
dec
jl
popf
ins
fwait
pop
loop
mov
xchg
xchg
sbb
mov
ret
fwait
dec
repnz
mov
mov
fidiv
js
(bad)
xchg
xchg
mov
xchg
es
mov
sub
push
popf
icebp
inc
add
pop
and
and
mov
and
sub
pop
bound
lock
lods
loopne
into
(bad)
adc
imul
cmps
xchg
fwait
push
pusha
je
lds
jmp
push
or
and
xchg
rol
mov
shl
mov
movs
popf
nop
sub
xchg
mov
mov
mov
shr
xchg
sbb
sbb
in
sub
sbb
push
nop
xor
sbb
stos
imul
xchg
or
jle
push
cwde
in
add
mov
adc
call
xchg
inc
dec
gs
sbb
jnp
imul
sbb
sbb
mov
mov
adc
iret
pop
mov
out
push
xchg
jge
cld
fidiv
xchg
addr16
lods
cmp
adc
sub
sti
xchg
repz
pop
dec
xchg
rcr
cmps
push
mov
aam
out
mov
lds
adc
scas
jbe
or
int3
cmp
inc
(bad)
sub
add
adc
push
cmps
xchg
shrd
sub
push
jnp
xchg
cs
xchg
out
or
in
push
div
mov
test
fwait
push
xchg
jecxz
mov
mov
call
cs
dec
adc
mov
mov
xchg
mov
and
pop
(bad)
clc
adc
icebp
pushf
xchg
(bad)
cdq
ins
pop
jb
xchg
shr
stos
aaa
(bad)
les
inc
xchg
cmp
sahf
out
leave
gs
sbb
dec
and
fneni(8087
fwait
cli
adc
test
rcr
sub
adc
out
(bad)
sub
push
xchg
pop
push
jg
jl
(bad)
cmp
adc
ja
inc
ret
xchg
lds
sbb
popa
dec
xchg
xchg
pop
ins
mov
fcom
popf
outs
push
adc
mov
loope
push
xchg
stos
xchg
mov
enter
cmp
push
fiadd
aad
inc
cmc
packsswb
(bad)
xchg
mov
lea
xchg
nop
fdiv
mov
xchg
push
je
mov
xchg
xor
sbb
cs
(bad)
leave
or
fst
hlt
ficom
jb
mov
or
push
push
jno
nop
adc
or
das
xchg
push
inc
jmp
cmps
jle
dec
mov
fisubr
or
inc
(bad)
fistp
push
sub
pop
mov
pushf
or
stc
mov
xor
test
into
cmp
add
xchg
(bad)
jmp
xchg
mov
mov
popf
arpl
fist
adc
bound
icebp
retf
je
cmps
sbb
cwde
and
outs
lea
pop
mov
sbb
fild
retf
add
int3
das
adc
fist
mov
jne
ret
cmp
xchg
xlat
test
and
retf
xchg
jae
fisttp
adc
xchg
sbb
inc
(bad)
aaa
inc
adc
mov
jae
cmp
inc
stos
sahf
or
sub
xchg
cwde
out
xchg
adc
mov
scas
(bad)
jle
mov
xchg
sub
push
retf
xor
and
xchg
add
pop
pop
jl
fwait
add
hlt
lea
rcl
mov
cmp
nop
mov
inc
xchg
stos
dec
pop
xchg
cmc
loopne
mov
mov
popf
fcom
cmp
imul
xchg
push
push
pop
popf
pop
int3
iret
mov
xchg
test
add
xchg
stos
inc
jg
ja
imul
mov
hlt
outs
fbld
xchg
scas
pusha
pushfw
fld1
push
pop
xchg
cmps
push
xchg
out
jp
xchg
popf
das
and
jae
xor
xchg
mov
push
xchg
inc
xchg
iret
pushf
out
sbb
pop
jns
or
movs
cld
fwait
int
dec
loop
pop
xor
mov
xor
xor
lods
div
icebp
dec
icebp
ds
fwait
cld
or
int3
xor
xchg
loopne
lods
jmp
aaa
data16
add
int3
sbb
les
cdq
cmp
push
sbb
std
adc
add
fsub
and
fwait
xchg
jnp
jo
retf
adc
add
dec
push
add
or
sub
sar
dec
loope
stos
jmp
mov
mov
or
adc
mov
sti
sbb
or
and
je
js
lahf
sub
and
xchg
retf
mov
aam
lahf
push
ret
mov
std
addr16
sub
clc
xlat
lock
push
mov
sbb
loop
ret
xchg
in
mov
push
mov
jle
pop
mov
and
mov
cmp
ss
xchg
(bad)
dec
mov
adc
test
test
or
jmp
inc
xchg
fcmovu
cmp
push
repnz
mov
xchg
xor
fidiv
mov
dec
cmps
inc
or
jns
mov
cmp
test
xor
add
repz
adc
stos
nop
mov
sar
jge
xor
mov
cmp
imul
aas
push
mov
(bad)
hlt
inc
in
pop
retf
push
iret
jae
push
test
jne
jl
xchg
aam
jno
cmp
cmp
push
sahf
ror
outs
sub
lods
xchg
cdq
dec
push
cmp
scas
push
js
outs
stos
and
outs
xchg
fcomp
xchg
imul
in
xchg
outs
jmp
shr
xchg
dec
rcr
mov
movs
add
adc
or
pop
inc
jp
pop
push
mov
sbb
and
pop
xchg
cmp
jne
dec
cmp
xchg
in
sar
xor
dec
cmp
icebp
scas
xchg
lea
out
in
pushf
jl
lock
xchg
loop
bound
jne
mov
arpl
loopne
xchg
dec
scas
push
sub
sub
movs
int
xchg
stos
pop
sar
mov
popf
add
pop
inc
xchg
ror
out
lods
jmp
adc
ja
es
rep
jns
fcmovu
push
mov
push
xor
mov
pop
xchg
mov
fimul
xchg
add
lods
xlat
lahf
into
dec
mov
in
jge
push
add
mov
shr
cwde
daa
pop
stc
iret
sbb
gs
add
fst
popf
xchg
sub
cmp
xchg
ja
cwde
xchg
mov
push
inc
push
xchg
mul
fs
sub
ss
retf
push
or
enter
leave
and
push
xchg
bnd
xlat
iret
or
xor
movs
in
xchg
push
xchg
cdq
pop
sbb
fsubp
(bad)
cmp
sbb
xchg
stos
not
(bad)
and
xchg
fwait
(bad)
cmp
mov
inc
into
(bad)
cli
adc
add
fsub
std
pushf
xchg
mov
xchg
(bad)
adc
jmp
mov
pop
jno
inc
xchg
cmps
jne
repnz
std
dec
xchg
xchg
jecxz
stos
dec
sub
pop
loop
and
fst
sbb
popf
stos
das
push
enter
and
dec
xchg
outs
sub
mov
sub
fwait
mov
and
and
mov
call
pushf
xchg
loopne
dec
in
pop
xchg
mov
xchg
cmp
adc
adc
fist
stos
enter
sub
imul
adc
jl
xchg
enter
adc
iret
ins
xchg
(bad)
rcl
sbb
xchg
xlat
test
fidiv
popf
sub
xchg
fcomp
dec
out
neg
ret
add
dec
sub
pop
or
leave
xchg
gs
enter
(bad)
out
test
dec
retf
mov
and
push
ror
adc
cli
int3
adc
mov
push
adc
xchg
enter
adc
icebp
xor
gs
stc
cmc
mov
jo
cmp
ins
mov
jl
int
or
pop
and
inc
outs
and
data16
mov
xchg
adc
test
dec
int
mov
jmp
call
push
xchg
add
sub
xchg
mov
add
xchg
xor
ffree
cmp
into
sbb
lods
mov
add
push
push
push
xchg
cli
ret
or
inc
sbb
shr
and
je
aas
mov
(bad)
xchg
call
aaa
push
xchg
pop
dec
out
xchg
test
ins
movs
add
cs
not
xor
push
jno
sub
xchg
sti
ret
mov
out
xchg
pop
mov
pop
mov
sub
(bad)
jge
rcl
xchg
nop
xchg
xchg
stos
data16
xchg
cs
cdq
and
dec
outs
fisttp
xchg
fnstsw
inc
imul
cdq
cmp
cmp
mov
xchg
adc
aam
outs
mov
js
xchg
add
xor
xchg
call
enter
call
and
mov
xchg
mov
mov
rcr
rdpmc
enter
(bad)
fild
(bad)
xchg
mov
sahf
mov
xor
xchg
xchg
mov
fdiv
cmp
mov
hlt
not
fstp
pop
int
popa
jbe
lahf
jp
cmp
pop
fwait
or
mov
sbb
nop
stc
xchg
jle
jo
sub
es
lahf
push
adc
or
mov
sbb
pop
sbb
mov
ret
out
je
inc
xchg
ds
xchg
jmp
test
or
lahf
dec
ror
popf
adc
jmp
imul
addr16
push
test
xor
jns
sahf
xchg
push
xchg
dec
jge
and
ffree
mov
push
sub
cwde
sbb
in
push
push
xlat
fwait
das
jno
les
rol
jns
xchg
or
mov
or
adc
push
xchg
pusha
repnz
gs
xchg
daa
(bad)
sahf
push
out
in
xchg
arpl
mov
mov
jmp
mov
in
(bad)
add
push
pop
xor
push
cmp
fist
jbe
sub
push
jnp
sbb
cmc
ja
imul
fldcw
or
xchg
dec
adc
js
and
lahf
adc
scas
out
push
aam
mov
(bad)
not
push
shl
inc
jg
xor
push
cmp
aam
fmul
ins
mov
xchg
inc
mov
jb
xchg
js
adc
xchg
or
sbb
fwait
adc
xor
or
mov
mov
adc
out
add
push
adc
jnp
mov
xchg
push
cmp
pop
jmp
and
in
dec
sbb
(bad)
pop
in
retf
pop
xchg
xchg
xchg
shl
xchg
outs
gs
dec
push
iret
pop
add
sar
xor
cmp
in
std
pop
push
xchg
mov
ins
xchg
push
retf
outs
cwde
mov
inc
icebp
push
push
test
movs
aaa
es
ds
adc
rol
mov
outs
stos
ins
xchg
(bad)
push
fmul
mov
imul
xchg
(bad)
(bad)
fcmovbe
xchg
out
sbb
in
or
outs
jg
sub
jl
dec
sub
ins
cmps
xlat
inc
push
jmp
(bad)
jl
repz
arpl
inc
(bad)
jae
rcr
cmc
xchg
inc
mov
xchg
sub
push
xchg
addr16
adc
pop
xchg
aaa
lahf
les
stc
jmp
imul
jns
js
xchg
mov
cmp
jnp
add
aad
ror
ins
adc
xrelease
mov
xchg
movs
test
adc
pop
into
xchg
xlat
popf
pop
jo
add
sahf
xchg
dec
out
retf
adc
mov
jge
mov
test
jbe
xchg
lods
ret
popa
addr16
xchg
movs
mov
xor
sar
loopne
jbe
inc
xchg
div
aam
test
inc
jb
push
cmc
stos
xchg
stc
adc
jmp
les
ins
fsub
je
cli
adc
xchg
inc
or
sbb
or
or
sub
fwait
aam
xchg
minps
(bad)
fwait
lea
popa
adc
inc
pop
xchg
xchg
data16
scas
int3
push
fwait
les
sahf
mov
push
or
xchg
cdq
dec
ja
movs
or
xlat
jmp
or
inc
imul
mov
pop
loopne
in
mov
dec
inc
cld
jecxz
cdq
dec
ja
mov
adc
rcl
inc
(bad)
adc
enter
aas
mov
ins
fmul
adc
lahf
jge
out
jbe
ins
xchg
xchg
shl
js
inc
outs
mov
pop
jmp
ins
push
adc
std
pop
addr16
and
sbb
aam
iret
lods
mov
xor
xchg
inc
sti
xchg
cmc
mov
leave
fadd
push
js
int
ret
mov
push
xchg
call
add
test
mov
(bad)
stc
mov
int
pusha
jge
mov
out
xor
fistp
mov
outs
pop
fwait
and
icebp
ja
push
add
jne
cs
mov
int
mov
(bad)
sti
inc
add
mov
call
push
mov
add
lods
inc
ret
lahf
mov
mov
sahf
and
dec
dec
push
adc
retf
mov
fcomp
aam
inc
mov
mov
sub
mov
jle
cmp
add
mov
sbb
adc
mov
sub
push
test
imul
js
xchg
adc
faddp
arpl
sub
hlt
movs
into
xchg
adc
loope
pusha
dec
xchg
repz
jae
mov
cdq
jg
and
dec
jmp
push
xchg
xchg
inc
dec
sub
xor
mov
add
ss
cmp
fisttp
push
outs
xchg
fcmovb
(bad)
pusha
out
adc
push
dec
js
xchg
inc
xor
adc
sti
mov
and
xchg
mov
sbb
pusha
mov
sub
not
ficomp
mov
mov
arpl
hlt
test
inc
or
aas
jo
mov
mov
rcr
xchg
loop
pop
(bad)
lea
out
jo
mov
xchg
ficomp
cmp
mov
loop
inc
sub
(bad)
xchg
and
dec
cmps
clc
mov
mov
add
test
sub
push
adc
pop
xlat
jmp
xor
(bad)
data16
or
stos
sub
cmp
sbb
fwait
and
push
sub
mov
call
jns
xchg
sub
xchg
add
ror
sbb
lahf
inc
ins
mov
mov
or
xchg
mov
fs
inc
xchg
and
mul
js
xchg
add
arpl
ret
push
stos
xchg
iret
cwde
add
and
mov
push
or
enter
or
mov
fisubr
test
pop
das
jo
ficom
sub
xchg
adc
xchg
std
xchg
fmul
cmp
add
bnd
xchg
xchg
and
popf
sub
lock
cmp
aas
test
sub
arpl
pop
in
push
mov
imul
outs
add
mov
mov
sub
aad
sbb
ss
xchg
jge
add
xchg
cmp
iret
mov
sbb
xchg
push
retf
scas
movs
es
and
jmp
nop
sbb
sub
xor
loope
adc
adc
xor
xchg
lock
push
loop
shl
xchg
or
sbb
jns
ss
sbb
mov
retf
pop
xor
mov
xchg
adc
and
sub
jle
push
xchg
pop
leave
adc
pop
ins
jbe
mov
loopne
push
xchg
mov
xlat
adc
adc
lock
dec
inc
xchg
jo
lods
cmp
(bad)
xchg
adc
push
fwait
bound
lods
xchg
shl
imul
push
adc
(bad)
call
mov
mov
clc
mov
je
jmp
xor
pusha
sbb
gs
sub
pop
popf
jge
clc
cmc
in
xchg
in
test
(bad)
adc
dec
xchg
test
sub
aaa
xchg
and
jae
outs
xchg
xchg
lods
int3
xchg
nop
inc
jnp
cld
loope
out
adc
xor
icebp
repz
adc
dec
ins
xchg
pop
mov
push
pop
pop
adc
push
xchg
jae
sub
(bad)
clc
inc
ret
inc
stos
loop
adc
fcomp
stos
xor
fidiv
lds
shr
int
adc
rcr
jmp
mov
out
les
popa
enter
mov
js
cld
xor
xchg
pop
mov
sar
mov
push
nop
xchg
xor
jge
push
pop
sbb
jbe
cmp
pop
pop
pusha
pop
xchg
fisubr
sub
xchg
movs
dec
mov
jge
es
xchg
jo
das
into
xchg
pusha
dec
ins
sub
loopne
mov
scas
xchg
sbb
xor
jmp
xchg
inc
mov
xor
les
jno
xchg
mov
lods
in
nop
cwde
int3
aas
xchg
lods
out
adc
stos
popa
ret
sbb
repnz
xor
lock
bound
inc
mov
adc
push
mov
push
xor
add
clc
loop
xchg
sub
pop
cmc
sub
sahf
mov
jmp
mov
push
pop
imul
aad
dec
(bad)
test
jns
adc
xchg
cmp
lods
sahf
nop
lods
xchg
mov
cmp
pusha
fst
inc
mov
mul
push
(bad)
in
lock
jle
iret
adc
fstp
xchg
inc
icebp
jno
xchg
int3
push
das
mov
add
xor
hlt
addr16
xchg
mov
rcl
mov
lahf
lods
dec
test
xchg
in
mov
add
fwait
aaa
adc
mov
out
(bad)
call
jbe
nop
xchg
int3
pop
push
xchg
shl
cmc
(bad)
pop
ins
sti
repnz
xchg
lock
(bad)
push
js
es
aaa
xchg
movs
adc
rcl
test
(bad)
clc
mov
lahf
sub
jl
pop
jne
pop
loop
sbb
jecxz
mov
mov
jge
fsub
(bad)
inc
pop
jbe
mov
fidivr
push
add
sub
cdq
mov
dec
fucom
or
xchg
in
mov
mov
adc
sahf
out
outs
rol
jae
cmps
cmp
aam
adc
jecxz
fwait
jl
jnp
cmp
arpl
and
xchg
cmp
loope
lea
xchg
pop
(bad)
rol
pop
out
aad
xchg
(bad)
aaa
jbe
sar
pop
fwait
sub
cmp
jno
xchg
mov
aad
test
adc
mov
mov
ja
mov
push
jbe
xchg
aaa
mov
sub
sub
ja
mov
jecxz
xchg
fwait
xchg
cmc
dec
repz
les
(bad)
out
cmp
fwait
push
lock
push
into
or
call
movs
xchg
mov
push
sub
cli
sub
xchg
ficomp
dec
or
pop
xchg
mov
call
xchg
mov
in
push
xchg
mov
sbb
push
nop
fwait
(bad)
in
test
cdq
or
xchg
or
push
daa
xchg
out
jp
xchg
pop
dec
ins
pop
pop
mov
mov
lea
jo
lock
and
adc
test
push
xchg
xchg
pop
dec
fcmovnb
push
adc
cli
xor
lahf
ret
call
cs
movs
mov
test
ins
dec
mov
arpl
push
inc
cmp
xchg
inc
fs
jle
in
xor
mov
inc
xchg
mov
ja
aam
popf
sbb
xchg
fdivr
jmp
push
xchg
gs
shl
sub
jae
je
sahf
dec
in
sbb
sbb
xchg
call
rcl
push
je
mov
xchg
or
sub
aad
call
pop
popf
cli
nop
loopne
or
add
sub
xor
adc
(bad)
mov
xchg
repz
div
pop
dec
mov
pop
jno
in
jmp
js
mov
test
push
inc
xchg
enter
xchg
mov
add
std
fwait
stc
xchg
push
mov
test
cs
stos
jg
inc
adc
mov
or
adc
out
leave
push
pop
rol
or
xchg
xchg
or
jb
pop
jecxz
mov
aam
sbb
add
leave
imul
not
sti
mov
adc
loop
inc
fidivr
mov
lock
xchg
sahf
mov
push
adc
fnstsw
xor
dec
xchg
ret
scas
fwait
pop
sub
neg
sbb
xchg
in
push
cmp
push
dec
and
xchg
mov
imul
xor
cmp
mov
xor
xlat
mov
aaa
cvttps2pi
in
jae
xchg
(bad)
retf
add
fwait
dec
div
mov
gs
add
xchg
pop
movs
mov
pop
(bad)
xchg
jp
mov
or
cmp
rcr
inc
mov
mov
mov
sahf
stos
xor
inc
ins
scas
daa
div
jge
pop
les
pop
stos
cmps
xor
xchg
sub
test
repnz
mov
cmp
hlt
in
(bad)
data16
mov
xchg
push
cmps
pop
movs
imul
pusha
jle
xchg
inc
rcl
xchg
in
sub
into
jbe
xchg
call
sub
xchg
push
pushf
mov
inc
mov
mov
dec
je
xchg
arpl
test
cmp
aad
imul
js
sbb
jmp
sbb
pop
adc
nop
mov
repz
dec
pop
imul
cmps
rcl
retf
xchg
sub
(bad)
in
ds
xchg
not
cmp
(bad)
xchg
out
idiv
xchg
push
stos
enter
lock
jbe
push
mov
test
sbb
cmp
push
aas
jmp
imul
div
jecxz
and
xchg
outs
adc
iret
fnsave
jl
inc
pop
pop
pop
inc
xchg
xchg
sbb
call
add
test
fdivp
adc
adc
jp
push
and
xchg
jle
test
enter
daa
sbb
add
add
idiv
int
xchg
retf
loopne
dec
shr
fistp
fcom
out
and
out
mov
sub
push
cld
jl
xchg
ficom
jecxz
mov
popa
cmps
lock
xchg
push
mov
pop
(bad)
in
xchg
push
ss
cmp
inc
aam
mov
sbb
inc
movs
fs
cmp
adc
(bad)
popa
push
push
es
jl
bound
xor
js
repnz
xchg
loope
push
cld
inc
les
or
xchg
add
sbb
ss
adc
mov
mov
cmp
mov
retf
pop
das
pop
test
sub
xchg
xchg
lods
push
shr
adc
pop
ds
fldcw
dec
add
xchg
adc
fcmovu
aad
das
sub
daa
jbe
mov
adc
fsubr
or
ficom
fidivr
xchg
push
lock
xchg
push
sub
jl
fs
test
jmp
xchg
xor
and
fidiv
adc
cmp
mov
(bad)
jg
das
fadd
nop
mov
fnstcw
xchg
push
pop
out
xchg
arpl
mov
jno
or
jmp
xor
aaa
jno
bound
popf
jbe
test
xchg
dec
mov
or
inc
mov
daa
xchg
rol
dec
outs
ret
hlt
jmp
sub
into
jo
pop
arpl
aam
xchg
enter
mov
adc
(bad)
sbb
or
stc
pushf
sti
ror
imul
in
out
mov
xchg
lahf
stos
aad
mov
xor
leave
sbb
in
push
add
cdq
mov
jl
mov
inc
cmp
xchg
xlat
rcr
xchg
push
jb
enter
jne
jnp
jecxz
mov
retf
mov
xor
mov
mov
fstp
add
nop
bound
cli
push
mov
and
mov
lods
xchg
ds
push
je
mov
mov
adc
sub
lods
dec
and
add
sbb
mov
lds
xchg
adc
xchg
push
int3
arpl
xchg
imul
mov
cmp
mov
sub
push
lods
jae
popf
es
pop
call
out
loop
mov
xchg
cmp
cmps
jae
jmp
jno
and
cwde
adc
retf
adc
and
xchg
shl
inc
push
mov
pop
pop
into
sub
xchg
adc
xlat
jbe
out
add
or
aas
pushf
les
xchg
fs
es
cli
xchg
test
push
pop
iret
jno
mov
xchg
mov
ja
ficom
stos
mov
test
int3
xchg
cmp
or
pop
cs
pop
xchg
ss
xor
mov
jge
adc
stos
fsubr
in
push
mov
push
mov
movs
pop
pop
xchg
pop
loop
mov
xchg
xor
cmp
xchg
dec
pop
xor
loope
xor
test
xchg
das
or
scas
xchg
lods
push
inc
dec
ja
stos
adc
ins
ror
xchg
into
cld
push
rol
mov
push
aad
and
inc
xlat
arpl
mov
not
aad
loopne
or
sbb
adc
iret
fisttp
xchg
push
stos
pop
xor
mov
aam
xchg
leave
fimul
mov
loop
push
xchg
sub
sbb
xor
or
add
bound
(bad)
cwde
pop
mov
rcr
mov
in
sub
sete
inc
sbb
add
test
xchg
mov
push
xchg
imul
pop
jb
nop
dec
xchg
iret
cmp
adc
jmp
sbb
add
shl
ins
fs
call
fwait
(bad)
xlat
mov
pop
rcl
addr16
mov
in
adc
(bad)
cmps
jbe
xchg
mov
sub
xor
mov
xchg
shl
js
out
hlt
rcl
fcom
icebp
arpl
mov
sbb
in
imul
stc
fist
in
add
cmps
jp
setae
push
movs
mov
aad
ret
imul
repz
mov
and
in
dec
rol
call
jp
mov
shl
adc
ds
loop
adc
sbb
jmp
xchg
pop
fs
int
lods
sbb
shl
xor
fdivp
fisubr
jns
(bad)
mov
daa
std
add
or
xchg
add
pavgb
ins
mov
sbb
mov
std
pop
movs
stos
mov
and
lahf
mov
pop
repnz
ret
xor
adc
sbb
mov
int3
lock
xchg
lahf
pop
into
inc
dec
cmp
data16
dec
retf
stos
ja
movs
sbb
out
mov
mov
cmp
in
sub
xor
popa
outs
adc
xchg
or
arpl
pop
dec
jo
jl
in
xchg
add
stc
xchg
mov
or
shl
lods
xchg
(bad)
cld
mov
xchg
(bad)
push
sahf
jle
jbe
jb
xchg
jl
stos
add
sub
les
loopne
aam
xchg
push
repz
je
jb
xchg
icebp
stos
iret
mov
push
out
lahf
jmp
int
adc
xchg
sub
dec
in
xchg
add
mov
lock
xchg
in
shl
clc
fs
inc
(bad)
mov
imul
cmps
push
xchg
and
xlat
std
ficomp
mov
pop
aaa
xchg
shl
add
or
rcl
xor
xchg
fwait
push
mov
pop
loopne
dec
sub
mov
je
rol
jo
ret
pusha
xchg
sub
sub
and
rcr
dec
lods
mov
mov
push
jg
test
xchg
and
popf
push
aam
outs
xchg
sbb
cwde
or
mov
adc
pop
pop
pop
cmps
mov
and
xchg
jp
xchg
lock
adc
jmp
pop
jae
jl
movs
push
xchg
xchg
aam
repz
aas
xchg
adc
idiv
sub
ja
jno
push
fwait
aaa
push
add
das
jns
sub
xor
or
lds
xchg
pop
mov
aam
xchg
and
sub
nop
jp
pop
xchg
jne
push
mul
mov
xchg
sti
jge
pop
mov
add
pop
dec
and
inc
imul
cmp
or
ror
xor
cdq
sub
leave
xchg
xchg
fcomp
mov
(bad)
int
adc
mov
adc
pop
fldenv
xchg
test
xor
mov
push
pop
ins
lds
(bad)
call
aaa
xchg
mov
lock
mov
repz
inc
aaa
xchg
in
lea
inc
push
xchg
xor
test
les
mov
pop
fidiv
add
mov
pop
mov
imul
jbe
pop
aad
xlat
or
fwait
or
les
inc
dec
hlt
push
or
repnz
test
jle
xchg
es
dec
sbb
ror
jmp
push
js
out
les
pusha
sub
push
xchg
repnz
add
xchg
mov
fbld
xchg
pop
xor
cli
adc
jo
les
retf
xchg
dec
fisub
adc
add
sbb
outs
ja
jecxz
test
scas
or
ret
xchg
int
mov
push
mov
ficom
mov
fcom
mov
xchg
mov
mov
hlt
add
adc
xchg
sbb
mov
mov
pop
inc
loop
mov
sar
gs
inc
fcmovnb
adc
mov
cmps
dec
repz
cmp
fisubr
and
sub
xchg
sbb
xor
mov
add
fstp
pop
call
stos
dec
stos
adc
mov
pop
mov
or
fcomp
jmp
add
lods
sub
push
cli
xchg
jo
mov
inc
test
daa
adc
push
es
or
push
xor
into
std
add
leave
jno
ficomp
lahf
inc
adc
jb
mov
inc
xlat
enter
xchg
cmp
lds
pop
outs
xor
pop
inc
(bad)
xchg
mov
mov
out
lock
xchg
push
xchg
ret
ss
xchg
cld
inc
sahf
jne
sub
outs
xchg
dec
(bad)
call
push
sbb
int
or
fucomip
push
call
jbe
imul
aam
or
std
cmp
cs
fild
outs
mov
(bad)
xchg
and
dec
je
les
iret
adc
out
(bad)
push
inc
ret
add
call
xchg
aas
out
pop
xchg
mov
jb
in
ins
test
into
addr16
pusha
in
inc
mov
xchg
(bad)
stc
dec
jg
inc
xchg
jmp
fiadd
sub
ss
inc
imul
xchg
adc
mov
lods
pop
add
push
cdq
pop
mov
fldenv
xchg
pop
xchg
das
mov
ret
(bad)
xchg
std
stos
stc
and
and
pusha
inc
out
inc
pop
int3
cmp
inc
xchg
ins
(bad)
xlat
push
and
int
cmps
mov
inc
and
in
mov
jns
adc
ins
jno
xchg
bound
push
call
cmps
lods
xchg
sahf
ror
dec
dec
cmps
push
and
adc
test
mov
mov
xchg
add
(bad)
fstp
mov
int
jns
aaa
stos
shr
in
xchg
aam
xchg
or
xchg
xchg
mov
pushf
test
fs
push
dec
fcomip
aaa
mov
inc
mov
add
js
sub
jecxz
xchg
mov
xor
(bad)
dec
mov
ret
dec
jmp
fs
xchg
gs
shl
das
cmp
or
xchg
movs
int
pop
jmp
gs
jae
cmc
jo
cmps
pusha
xchg
add
push
jmp
int3
stos
enter
dec
push
out
popf
sub
or
cli
jns
mov
fstp
xchg
test
inc
jb
jp
add
mov
dec
lahf
xchg
pop
cdq
enter
or
push
and
scas
sbb
push
xor
pushf
lods
cmp
iret
ss
sub
dec
add
cs
sbb
lahf
xchg
out
jecxz
in
pop
addr16
jbe
xchg
icebp
outs
mov
add
jmp
add
out
adc
push
sbb
xchg
xchg
xchg
xlat
fild
mov
and
adc
ins
sti
iret
inc
push
les
fwait
push
in
popf
push
jne
xchg
add
or
jb
xor
jo
movs
retf
mov
or
xchg
fwait
aad
cli
push
inc
lahf
xchg
call
jbe
xchg
and
jecxz
hlt
scas
gs
pop
das
out
push
inc
xor
rcr
mov
push
retf
or
xchg
imul
mov
out
int
sahf
adc
test
pop
xchg
adc
push
adc
adc
xchg
std
mov
push
pop
pop
scas
xchg
paddb
cmc
xchg
sbb
jo
int3
mov
xchg
add
xor
push
in
xor
xchg
sti
pop
lds
xchg
sbb
in
loop
and
xchg
sti
arpl
in
stos
(bad)
mov
je
sub
dec
mov
cmp
jmp
fwait
sbb
hlt
fild
pop
jmp
test
mov
mov
ins
xchg
iret
ret
mov
fmul
dec
shl
test
adc
out
jle
stc
jge
sti
jg
pushf
push
adc
xchg
outs
lea
or
xor
jmp
mov
dec
inc
lea
mov
xchg
je
push
out
xchg
loopne
sbb
mov
add
enter
sbb
mov
cmp
mov
scas
pop
xchg
gs
ds
imul
mov
loopne
xchg
jp
xchg
pop
pop
aam
mov
or
outs
daa
xor
jns
xchg
cmps
fnsetpm(287
push
cmp
or
(bad)
xchg
xor
mov
shl
movs
loope
mov
fistp
(bad)
fwait
cmps
aam
lods
push
movs
mov
test
in
xchg
loop
xchg
movs
push
pop
fsub
ror
adc
cdq
mov
sar
and
pusha
add
adc
add
in
dec
push
shl
xchg
xchg
clc
mov
xchg
xor
(bad)
rcl
push
js
pop
jmp
test
xchg
ds
pop
push
xchg
out
int3
iret
mov
lea
or
mov
outs
xchg
and
pop
and
scas
cmps
or
sbb
xor
jo
je
fsubp
ret
ins
adc
jb
push
cmp
pinsrw
in
fwait
cdq
or
jns
(bad)
mov
mov
adc
stos
or
(bad)
aas
push
bound
mov
fldenv
aad
cmp
popa
in
lock
jmp
mov
mov
test
dec
push
arpl
jno
xor
(bad)
sar
out
cmc
and
(bad)
les
push
add
std
stos
xchg
jae
es
pop
pusha
mov
xchg
mov
lock
pop
in
imul
xor
sub
dec
aam
leave
add
loope
adc
and
jmp
xchg
call
and
xchg
repz
call
or
mov
sbb
es
arpl
xchg
push
pop
aas
and
and
push
mov
inc
or
mov
sbb
xchg
hlt
in
add
jp
or
adc
push
in
out
adc
xor
je
pop
test
cmps
in
ins
es
sbb
add
scas
inc
clc
xchg
dec
in
and
mov
pusha
mov
inc
push
jnp
das
out
xchg
sti
push
rcl
adc
add
xchg
arpl
jno
xchg
mov
retf
jo
xor
push
jno
mov
imul
test
je
clc
xchg
enter
cmp
jo
push
and
cmp
call
je
xchg
jno
inc
and
hlt
xchg
mov
mov
xchg
jo
push
xor
xchg
movs
out
mov
xchg
shr
push
jbe
mov
stos
pop
scas
je
das
xchg
dec
mov
shl
xchg
push
frndint
gs
test
ins
xchg
mov
cli
retf
sti
add
popf
dec
in
ss
sub
iret
test
adc
int3
cmps
sbb
fdivr
repz
int
fcom
sti
aad
cld
lods
icebp
xchg
iret
sub
cmc
add
dec
xchg
ss
dec
jmp
clc
adc
mov
dec
push
sub
mov
jns
push
(bad)
jge
cld
mov
ficom
fadd
xchg
xor
jg
pop
mov
imul
jo
lods
aas
sub
leave
xchg
je
ja
and
and
and
add
jge
cmps
fdivp
cmps
daa
sbb
jg
pop
cs
inc
jnp
pop
xchg
lods
inc
jae
das
shr
adc
or
cdq
out
imul
sbb
mov
jp
xchg
(bad)
repz
loop
std
adc
shl
xchg
es
jge
xchg
jmp
dec
xor
imul
(bad)
(bad)
xchg
popa
je
cdq
fs
fsubr
mov
xchg
scas
in
(bad)
cmp
xchg
xchg
ja
ficomp
fistp
xchg
jecxz
paddsw
cli
sub
stos
cmp
push
dec
pop
leave
cld
xchg
sub
push
mov
inc
xchg
js
dec
imul
pop
and
push
daa
pop
xchg
enter
cmps
jmp
push
cmp
fsubr
push
xchg
xor
mov
mov
sub
xchg
or
or
jp
or
cmp
and
mov
cmp
aas
test
mov
xchg
sbb
jg
fwait
push
sahf
icebp
out
rcl
mov
sbb
xor
inc
cwde
call
bound
mov
shl
int3
outs
cmp
imul
loop
sub
lds
inc
xchg
or
xchg
dec
jle
xor
xchg
int3
iret
mov
xchg
les
push
add
cmp
in
int3
xor
repz
sbb
push
adc
xchg
sub
inc
or
shl
xchg
outs
shr
shl
stc
jle
and
aaa
bound
sub
mov
xchg
adc
pop
mov
push
xchg
sbb
pop
fcom
lods
fisub
inc
push
shl
xchg
add
jb
xchg
scas
test
add
out
(bad)
xchg
cs
sub
fimul
and
pop
sub
lods
mov
mov
(bad)
cmc
jae
jge
mov
lods
ret
call
clts
and
and
imul
jns
ret
ins
sbb
jno
sbb
fbstp
jb
int
das
xchg
push
and
xchg
mov
loope
pusha
sub
rcl
and
adc
xchg
mov
adc
xchg
pop
jmp
rol
aaa
xchg
mov
cli
xchg
push
push
ret
ins
push
(bad)
xchg
sub
loop
nop
xchg
clc
in
inc
lea
jmp
push
test
dec
jbe
xchg
xchg
mov
mov
add
call
xchg
leave
and
in
jb
and
shl
aaa
(bad)
mov
pop
sbb
xchg
(bad)
aad
push
imul
pop
(bad)
cdq
xchg
inc
mov
arpl
jp
xchg
push
adc
and
ds
pop
mov
cdq
pop
leave
xchg
int
test
sub
inc
xchg
fnstenv
xchg
jmp
(bad)
out
pop
pop
imul
imul
hlt
mov
push
sbb
mov
xchg
loope
mov
pusha
mov
repnz
pop
xchg
inc
cmp
xor
std
xchg
dec
lods
mov
int3
adc
out
xchg
data16
mov
sub
or
and
jge
xchg
dec
int
push
sub
push
jnp
movs
or
stos
in
int
imul
xchg
aaa
or
pop
arpl
fimul
xor
xchg
out
jno
(bad)
out
and
xor
jne
in
out
xchg
xchg
clc
dec
sti
xchg
push
test
lods
xchg
or
pop
pop
in
sbb
adc
mov
loopne
and
mov
inc
stc
mov
sub
cld
adc
adc
sbb
or
jne
pop
mov
sub
ret
fucom
mov
xchg
js
popa
and
xor
mov
inc
xor
mov
pusha
dec
mov
nop
(bad)
bound
lock
add
sub
pop
push
ror
dec
les
xchg
in
mov
jmp
and
loop
icebp
push
pop
addr16
out
imul
cwde
xchg
dec
ret
cmp
inc
xchg
aas
stos
lock
xchg
jmp
jle
cld
out
daa
movs
inc
or
mov
sti
and
mov
or
in
adc
gs
push
jl
je
movs
clc
call
inc
arpl
mov
je
cwde
lock
xchg
xchg
sbb
je
fucomip
test
pop
out
xchg
leave
xchg
push
shl
(bad)
xchg
iret
ins
xlat
inc
mov
aam
mov
outs
xchg
std
xor
aad
mov
mov
xlat
push
data16
sti
(bad)
mov
xchg
jne
jp
add
mov
fs
inc
cmc
inc
leave
dec
jecxz
cmp
call
pushf
xchg
and
jl
or
call
icebp
not
lock
xor
iret
and
xchg
xor
aaa
inc
mov
mov
repz
xchg
add
call
addr16
cli
pop
icebp
aad
push
test
call
mov
xor
mov
or
fwait
sbb
push
mov
in
adc
mov
pop
add
lock
jns
pop
cmps
xchg
mov
fdivrp
xchg
mov
mul
jns
xchg
outs
mov
mov
xor
cmp
cmp
std
mov
cmc
dec
dec
outs
lahf
xchg
xlat
mov
adc
dec
(bad)
popf
add
lods
mov
ins
xchg
xor
test
xchg
repz
adc
ins
pop
sbb
sti
outs
(bad)
cld
xchg
sbb
mov
add
xchg
push
push
adc
je
jmp
xchg
mov
pop
fsubr
push
jle
jno
std
xchg
mov
dec
pop
mov
jmp
out
adc
xchg
mov
jae
mov
adc
fsub
arpl
aad
ret
popa
lods
pop
xchg
outs
jmp
ds
xor
enter
jmp
mov
pop
popf
push
adc
mov
mov
call
push
call
xchg
lahf
jns
bound
sub
mov
xchg
inc
pop
add
xor
xlat
cmp
mov
and
adc
dec
stos
and
inc
mov
xchg
out
dec
arpl
pop
or
mov
popa
xchg
jno
hlt
adc
enter
pop
cli
mov
pop
out
dec
dec
jnp
les
xor
add
mov
mov
in
sbb
and
adc
pop
sbb
mov
dec
xchg
push
cwde
mov
sahf
out
or
cmps
cld
mov
push
js
(bad)
xchg
ror
scas
repnz
add
call
sbb
(bad)
cmp
mov
mov
out
mov
push
xor
pop
push
les
xchg
push
nop
ss
inc
test
xchg
adc
adc
adc
int3
push
rcl
stos
add
mov
bound
movs
adc
js
jp
mov
jnp
bound
mov
jg
pop
sahf
xchg
jecxz
lahf
scas
xchg
sbb
aam
add
jge
xor
adc
xlat
in
ins
mov
jb
out
aas
das
adc
mov
pop
stos
in
adc
xchg
xor
sub
pop
xchg
hlt
stos
sbb
jge
into
test
xchg
call
fmul
pop
sub
push
push
mov
int3
jne
fwait
mov
mov
ds
lahf
jge
lock
imul
ins
popa
xor
xchg
dec
mov
adc
mov
dec
xor
sbb
cmp
gs
jmp
js
fucomip
xchg
xchg
test
fstp
mov
dec
mov
dec
cld
mov
pop
xchg
les
pop
sar
addr16
xchg
pop
adc
cdq
jle
mov
hlt
jge
xchg
in
fsub
mov
sbb
mov
add
in
ss
test
pop
ficomp
xchg
mov
push
sti
clc
dec
pop
or
xor
das
nop
jecxz
xchg
sbb
push
mul
xchg
stc
inc
cmp
ja
add
cmp
or
rol
add
mov
xchg
or
pop
sub
retf
iret
ret
mov
adc
(bad)
xchg
data16
adc
adc
xor
and
xchg
imul
or
jb
mov
(bad)
mov
pop
aas
push
mov
push
pop
cmp
fwait
xchg
ja
mov
leave
in
int3
or
cmp
mov
jecxz
repz
xchg
mov
jp
add
rol
in
fwait
mov
xchg
hlt
add
mov
call
xchg
xor
sti
lods
mov
sub
xlat
mov
adc
xchg
jne
push
popa
sar
add
stc
fstp
adc
in
jnp
mov
xchg
push
test
test
push
inc
sbb
xchg
jo
loope
sub
in
fwait
xor
push
pop
fbld
xchg
leave
xchg
loope
lds
mov
call
lock
inc
xchg
cmps
movs
outs
add
leave
outs
xchg
in
rcl
or
xchg
hlt
pop
and
dec
and
mov
lock
sbb
and
sub
xchg
ret
pusha
jg
mov
je
mov
inc
jmp
xchg
lds
xchg
daa
pop
and
stc
inc
or
mov
fwait
mov
int
add
xchg
jmp
test
inc
xchg
add
xchg
sub
xchg
cmp
adc
xchg
jg
cwde
ret
or
xchg
sar
push
sbb
ja
push
jmp
lds
mov
xor
add
cmps
js
ret
fcom
push
shl
jp
fnstenv
sbb
add
or
aaa
mov
pop
out
mov
js
sahf
mov
mov
push
ror
xchg
outs
ret
pop
push
xor
int3
pop
inc
xchg
sbb
adc
ja
sub
sbb
mov
xchg
mov
xchg
aaa
mov
xchg
ins
(bad)
adc
push
push
pop
sbb
loopne
test
sbb
jg
adc
mov
xchg
mov
pop
lods
imul
ds
adc
repz
popf
cli
mov
jmp
pop
sub
not
mov
and
xor
mov
sub
fisttp
push
seta
and
mov
and
icebp
aam
dec
xor
(bad)
push
icebp
ret
add
cmps
bound
jl
fwait
retf
pop
arpl
xor
cld
pushf
cmc
xchg
daa
dec
and
rcl
mov
xchg
add
add
shr
aaa
aam
adc
push
mov
inc
(bad)
xchg
xor
fcmovb
adc
xchg
mov
xchg
(bad)
xchg
or
movs
xor
dec
or
xchg
xchg
mov
sar
xchg
test
fwait
add
or
dec
cmps
popf
pusha
dec
push
lahf
lock
sahf
jmp
adc
xlat
dec
sub
mov
sub
xchg
pop
or
lods
js
dec
mov
inc
popa
adc
adc
mov
dec
ins
mov
out
push
mov
int3
xchg
cmp
scas
imul
je
(bad)
pop
add
retf
or
mov
mov
add
(bad)
aad
les
xchg
mov
jne
xchg
and
ds
data16
fbstp
stc
mov
int
xchg
adc
jo
jbe
(bad)
pop
adc
mov
aas
test
pop
mov
(bad)
push
ds
and
push
xchg
imul
adc
cmp
gs
popa
test
push
pushf
or
ret
dec
nop
mov
xchg
test
mov
bound
sub
xor
inc
xchg
mov
mov
test
mov
mov
stos
push
rcl
dec
mov
xchg
push
popa
out
add
(bad)
jle
fcomp
leave
mov
(bad)
std
clc
inc
shl
mov
cmp
add
mov
xor
stc
xchg
test
repnz
(bad)
les
xchg
es
mov
mov
or
sub
call
xchg
ja
outs
xlat
pop
rcl
mov
jp
inc
out
js
push
or
mov
jecxz
retf
xchg
inc
jbe
pop
pop
push
cmp
xchg
cld
outs
xor
cmp
mov
retf
dec
stos
aam
xor
outs
xchg
jo
inc
or
xchg
mov
(bad)
push
lods
and
jl
mov
mov
leave
cmps
loope
aad
mov
mov
(bad)
fimul
push
call
push
lods
nop
stos
xchg
test
xor
or
fwait
lods
pop
mov
mov
loop
push
fdiv
in
(bad)
aas
fs
xchg
imul
ja
(bad)
pop
and
sbb
xchg
ret
pop
jns
aaa
xchg
lods
std
cld
cs
dec
stos
or
xchg
leave
adc
nop
imul
(bad)
xchg
push
fs
lea
adc
push
cmps
and
pop
mov
stc
call
lods
dec
mov
loopne
mov
fld
mov
(bad)
xchg
arpl
popf
sub
scas
push
rcr
mov
pop
in
mov
out
pop
mov
fdiv
xchg
imul
ins
mov
mov
xchg
pusha
lods
mov
pop
xchg
pop
xor
lea
ins
dec
jmp
hlt
pop
mov
cmp
mov
je
ss
push
jmp
mov
or
mov
xchg
fdiv
mov
xor
sub
es
xchg
cmp
ficomp
mov
loope
in
cmp
call
mov
xor
test
jae
pop
mov
mov
adc
xchg
hlt
xchg
pop
xor
or
mov
mov
cmp
cmp
xchg
les
stc
nop
inc
adc
sbb
loope
lahf
call
jl
and
mov
inc
repnz
jg
pop
fild
mov
imul
pop
inc
dec
sbb
adc
cmp
xchg
jmp
ins
push
daa
imul
mov
sub
jmp
mov
add
and
push
push
ror
je
sub
pop
mov
pop
cmps
xchg
cmp
xor
jno
xchg
sbb
xchg
data16
pushf
jb
aam
sbb
adc
xlat
xor
inc
je
push
lods
fucomip
iret
jge
sub
fsincos
xchg
push
inc
push
dec
and
scas
aad
xchg
xchg
(bad)
xor
lods
xchg
je
pop
lds
xchg
jns
or
add
movs
int
jo
xchg
retf
aam
rcl
scas
xchg
xchg
sub
jns
sub
xchg
clc
stos
pop
fcom
mov
or
mov
lahf
(bad)
aad
sub
push
sub
mov
push
loop
and
xchg
icebp
fabs
jbe
push
iret
fs
cmp
inc
inc
dec
clc
jb
push
mov
xchg
sqrtps
jmp
cmc
loop
fcmovu
mov
push
push
mov
xchg
fucom
pop
adc
adc
fimul
jecxz
das
int3
mov
adc
mov
jnp
xchg
test
dec
push
sbb
xchg
test
js
sti
xchg
shl
sub
repz
pop
clc
jp
mov
mov
jae
mov
mov
inc
sub
addr16
sbb
enter
imul
push
ins
retf
gs
mov
lds
(bad)
pop
loopne
mul
mov
fsubp
sbb
xchg
cmp
adc
(bad)
push
cwde
lock
push
lds
inc
mov
cmc
dec
dec
lea
(bad)
xor
push
sub
xchg
dec
fst
pop
test
imul
xor
xchg
mov
xchg
inc
push
ret
clc
int
mov
rcl
mov
sbb
js
pop
mov
xchg
retf
jle
sbb
mov
xchg
push
mov
add
cdq
add
js
lods
jle
(bad)
fcomp
dec
addr16
jne
ret
sbb
xor
fwait
dec
inc
lock
mov
pop
hlt
cmp
(bad)
jno
push
fist
leave
jmp
mov
xchg
pushf
xchg
or
mov
es
mov
shl
int
adc
pusha
add
xchg
dec
push
lea
scas
xchg
fisub
xor
mov
adc
ret
add
jno
aaa
xchg
pop
retf
shr
adc
mov
push
cmps
xor
in
xlat
xchg
push
or
adc
pop
dec
mov
dec
xchg
jmp
pop
shl
or
adc
hlt
pop
push
dec
mov
xchg
imul
mov
(bad)
or
std
loop
push
in
or
push
in
xchg
dec
mov
inc
inc
xchg
pop
iret
pop
sbb
mov
mov
mov
mov
loop
xchg
in
push
(bad)
mov
out
lock
rcl
inc
mov
mov
mov
xchg
outs
push
and
and
pushf
hlt
and
adc
sub
inc
xchg
mov
sbb
lea
mov
push
dec
adc
stc
add
adc
mov
ins
or
jg
jno
repz
cdq
mov
xchg
stos
xchg
shl
loop
adc
pop
loope
cmp
repnz
mov
add
inc
sbb
push
sub
aam
sar
ror
xchg
bound
xor
fidiv
(bad)
mov
nop
scas
and
jge
je
or
jg
int3
mov
sbb
test
inc
mov
test
mov
mov
sbb
inc
jmp
and
xchg
adc
cmps
pop
xor
adc
bswap
xchg
xor
push
pushf
loop
cdq
mov
hlt
dec
push
aam
and
add
fs
test
pop
cmp
mov
or
in
addr16
hlt
and
mov
popa
push
movs
in
cmp
in
mov
popf
mul
in
xor
push
and
pop
cmp
ss
xchg
or
out
mov
xchg
in
push
mov
into
hlt
xchg
fwait
pop
mov
les
cmp
pop
mov
push
outs
in
add
mov
inc
mov
adc
xor
jo
loope
js
pop
test
loopne
mov
mov
cwde
int3
das
sbb
jb
rcr
sbb
fsub
cwde
or
or
hlt
arpl
ins
dec
xchg
mov
fistp
shl
jl
mov
ror
xchg
dec
sub
rol
adc
sub
push
or
pop
es
leave
stc
mul
lods
lods
jge
in
xchg
cwde
fidivr
pop
mov
xchg
dec
std
ins
xchg
hlt
push
xchg
cli
xchg
enter
and
femms
cmp
fs
mov
dec
xchg
mov
ins
stos
aas
sar
xchg
jae
es
(bad)
mov
sbb
push
loopne
in
jmp
shl
dec
mov
jo
xchg
mov
outs
mov
inc
fwait
aam
mov
pop
mov
jecxz
jl
xchg
cmp
push
into
xchg
pop
mov
push
push
in
add
xor
loop
(bad)
pop
xchg
ficomp
mov
mov
aam
jecxz
xchg
rcl
or
(bad)
outs
test
xchg
pusha
ret
dec
lds
sub
push
xchg
xchg
xchg
hlt
add
and
aas
and
mov
jecxz
jl
lahf
xchg
or
push
push
mul
sub
addr16
cmps
mov
xchg
ficom
dec
into
mov
jo
test
cmps
sbb
inc
mov
dec
fs
mov
push
add
cmp
aad
rol
push
jae
dec
add
mov
outs
mov
or
push
push
push
clc
call
repnz
add
xchg
xor
pop
fwait
sar
sub
jg
xchg
sbb
jae
gs
pop
cmp
pop
in
push
mov
xchg
dec
adc
popf
sbb
mov
(bad)
or
adc
sub
dec
popa
xchg
and
outs
dec
cdq
pop
mov
mov
loopne
sub
js
xchg
dec
in
mov
aad
test
(bad)
shr
loop
std
aam
pop
add
mov
xchg
xor
sbb
xchg
dec
popf
daa
int
mov
xchg
push
mov
cmp
mov
xchg
fld
jge
arpl
imul
or
xor
xchg
mov
popf
mov
xchg
fs
movs
dec
xchg
cmps
adc
jg
xchg
add
push
mov
iret
cld
jl
and
inc
xchg
pop
hlt
aas
in
mov
(bad)
xchg
cli
call
into
pop
mov
cwde
ins
pop
fs
lods
out
aam
or
scas
push
fld
push
jns
addr16
xchg
or
or
and
aam
int
jl
push
clc
(bad)
mov
sub
xchg
push
movs
mov
gs
mov
xchg
addr16
lds
cld
test
or
adc
fidivr
popf
fnstenv
mov
xchg
test
mov
push
es
fld
mov
xchg
mov
aas
jecxz
inc
cs
dec
jmp
inc
cli
xchg
movs
inc
popf
pop
aaa
test
add
int
jae
data16
mov
daa
xor
dec
inc
add
adc
out
or
pop
pop
bound
jge
cmps
fadd
out
pop
xchg
xor
mov
ret
dec
in
jp
xchg
pop
push
inc
stos
push
inc
cwde
jp
adc
xchg
daa
jnp
dec
call
dec
outs
or
mov
mov
out
sub
xchg
xchg
aad
fwait
jle
leave
sub
xchg
mov
jmp
or
rcl
xchg
(bad)
pop
sub
dec
inc
call
iret
out
mov
stos
fcmovbe
popf
pop
xor
mov
cli
dec
stos
outs
mov
ja
jecxz
xor
xchg
lds
xchg
cmps
lock
aam
push
push
fimul
dec
add
xchg
fbstp
clc
lock
lea
and
push
mov
mov
out
push
xor
mov
lods
and
sbb
inc
xchg
add
in
sbb
fwait
add
pop
jl
push
(bad)
or
sbb
js
xchg
test
add
es
push
push
outs
push
mov
das
pop
clc
jl
xchg
fld
dec
(bad)
xchg
popf
inc
xchg
cdq
mov
bound
pusha
fild
xchg
pop
lods
add
cmc
lds
(bad)
arpl
imul
(bad)
(bad)
cld
dec
mov
push
mov
loopne
xchg
mov
dec
xchg
xor
inc
stc
push
jmp
popf
daa
adc
jl
cs
adc
aad
mov
sti
imul
lock
hlt
loope
xchg
ret
or
call
cmps
dec
in
xchg
inc
cmp
scas
lods
mov
mov
xchg
aad
adc
push
push
mov
xlat
xchg
sbb
pop
ret
add
adc
shl
loope
xchg
ficom
mov
xchg
xchg
jp
xor
stos
stos
fwait
jecxz
ret
pop
xor
xor
mov
and
and
inc
imul
int3
idiv
(bad)
mov
push
push
mov
enter
cld
xchg
in
xchg
mov
add
scas
int3
push
fidiv
xor
(bad)
dec
xchg
xchg
cs
cmp
add
in
dec
xor
cli
test
cwde
cmp
and
push
ficom
out
repnz
xchg
and
jecxz
push
loope
outs
jns
lahf
mov
mov
jmp
inc
aas
and
adc
test
add
icebp
enter
fisubr
mul
stos
rcl
or
push
rcr
or
xchg
aad
sbb
dec
push
inc
and
add
push
xchg
push
sbb
mov
fbstp
call
or
stos
cli
inc
enter
mov
xlat
add
xchg
aas
jl
and
mov
iret
sub
std
mov
es
sub
fwait
out
ja
pop
fs
repz
mov
pop
mov
mov
adc
shr
in
and
pop
xchg
(bad)
(bad)
mov
xchg
fs
repnz
fidiv
into
jne
dec
pop
xchg
add
lea
ins
xchg
in
mov
and
pop
xchg
cs
fucomip
mov
mov
cmp
xchg
and
call
adc
hlt
(bad)
stc
xchg
pop
iret
push
outs
in
ins
out
or
mov
push
popf
push
adc
pop
mov
cmps
lods
mov
xchg
add
iret
adc
imul
int3
es
dec
mov
fmul
mov
iret
sub
jmp
clc
xchg
pusha
fdivp
loope
adc
xor
neg
jo
fcom
mov
jb
and
pop
cdq
and
loope
push
inc
(bad)
test
dec
sub
mov
and
xchg
imul
js
xchg
xchg
cdq
mov
sub
call
adc
(bad)
xchg
sub
add
dec
test
mov
in
dec
retf
rcl
adc
(bad)
push
hlt
push
enter
push
lods
and
inc
mov
add
xchg
mov
push
jl
xchg
jnp
aaa
adc
hlt
sar
push
dec
mov
shl
push
mov
xchg
mov
ror
xor
xor
push
mov
push
cmp
popf
movs
cdq
lods
mov
push
jo
sahf
loop
mov
mov
push
mov
xor
adc
push
inc
ret
pushf
xchg
repnz
sbb
mov
dec
jb
rcr
push
ficomp
pop
mov
pusha
add
mov
aam
cmps
jb
not
add
fist
bound
leave
test
adc
aam
mov
xchg
dec
mov
jae
movs
sub
inc
pushf
xchg
xchg
dec
pusha
dec
int3
inc
xchg
mov
ins
inc
mov
push
(bad)
xchg
ins
jmp
into
mov
push
adc
xchg
jp
scas
(bad)
add
popa
fmul
jle
mov
sub
xchg
lea
jbe
fwait
cli
out
in
jns
mov
cmp
lahf
(bad)
dec
dec
rcl
xchg
mov
mov
cwde
xchg
repz
xor
iret
cmp
push
xchg
xchg
jge
jb
xor
outs
xchg
or
push
adc
addr16
xchg
cmps
test
xchg
sti
shr
lahf
xor
adc
xor
hlt
inc
sbb
fwait
ret
inc
jl
inc
xchg
ret
xchg
test
mov
cs
sub
sbb
jae
rcr
cdq
dec
loope
jno
fwait
jnp
in
cmp
jmp
test
out
xchg
and
sbb
xchg
sti
or
movs
outs
gs
aam
outs
mov
pushf
adc
hlt
mov
cwde
xchg
sahf
mov
mov
xchg
aad
push
int3
mov
xchg
xchg
sbb
imul
push
adc
push
jl
mov
pop
movs
dec
(bad)
push
les
xchg
pop
adc
mov
cmp
(bad)
mov
aam
jbe
rol
or
push
push
jns
repz
es
jae
xchg
test
mov
dec
inc
xchg
stos
lock
jb
cmp
int3
fwait
xchg
xor
xchg
mov
add
cmc
scas
or
into
xchg
cmp
xchg
ins
or
xchg
fdivr
iret
out
sub
les
pop
xchg
dec
imul
in
xchg
mov
stos
adc
hlt
ret
iret
retf
or
adc
xchg
adc
ret
das
arpl
xor
out
mov
xchg
mov
inc
mov
adc
xchg
push
pop
xor
sub
xchg
or
nop
test
dec
mov
ror
pop
dec
rcl
xor
adc
sub
pop
bound
iret
aaa
outs
xchg
jne
lahf
xchg
ds
cdq
fist
aam
xlat
xchg
mov
cmp
mov
mov
arpl
ins
in
repnz
xchg
dec
mov
and
cmps
lahf
cdq
inc
rol
adc
or
inc
xchg
mov
mov
ja
int3
test
or
xchg
add
gs
cmps
xor
dec
xchg
lods
add
jns
fcmovnu
sbb
ins
xchg
sub
ins
add
out
daa
ss
jp
cmp
repnz
js
lock
xchg
sub
sbb
pop
xchg
sbb
imul
sub
push
add
jl
addr16
cmp
push
inc
pop
imul
adc
test
xchg
lds
dec
stos
inc
add
and
jb
fdivr
das
inc
(bad)
stc
jne
xchg
and
sub
xchg
xor
or
mov
js
pop
adc
cmp
xchg
or
sbb
cmc
dec
shr
nop
xchg
lds
inc
xor
xor
add
mov
scas
mov
popa
lds
ins
pop
dec
xchg
pop
mov
adc
xchg
outs
enter
mov
fwait
test
hlt
js
iret
call
xchg
(bad)
outs
std
jnp
xor
xchg
enter
out
mov
sub
repz
or
inc
enter
ror
popa
sub
xchg
add
scas
aad
dec
cmps
ins
ja
xchg
adc
mov
sub
mov
jbe
xchg
xchg
inc
nop
ja
cmp
fwait
clc
mov
loop
push
je
xchg
pop
inc
xchg
xchg
mov
idiv
mov
addr16
and
stos
inc
push
sbb
shl
push
scas
shr
xchg
dec
int3
mov
xchg
scas
sbb
and
jg
xchg
mov
call
out
test
jae
xchg
xchg
sbb
or
pop
sbb
shr
arpl
add
mov
mov
fcmovu
push
mov
xchg
lods
or
sahf
in
loope
stc
adc
xchg
lods
pop
jno
jae
push
das
xchg
movs
pushf
mov
jmp
mov
in
mov
jge
ficom
sub
push
or
xchg
dec
call
es
lods
pop
fwait
xchg
lock
sub
add
sahf
neg
leave
jne
pop
jl
push
xchg
pop
aam
sub
inc
xchg
movs
push
cvtps2pd
xor
push
loopne
xor
adc
cld
dec
xor
jecxz
dec
xchg
add
xchg
dec
or
repz
sbb
shr
xchg
mov
movs
icebp
adc
adc
jl
test
fwait
or
xchg
bswap
mov
loop
enter
outs
pusha
push
add
sub
mov
cmp
sbb
inc
sub
cmps
jne
cmc
mov
ja
mov
adc
jmp
nop
fwait
jb
loop
repnz
mov
mov
pop
inc
mov
xlat
xchg
enter
push
sbb
add
daa
xchg
fs
mul
popa
xor
out
lds
hlt
sbb
jns
sbb
or
hlt
sub
loop
(bad)
jl
dec
sbb
cmp
xchg
jbe
bound
ja
xchg
aas
call
enter
adc
mov
int
mov
cmp
imul
and
xchg
inc
(bad)
neg
cld
xlat
cmp
cmp
jo
mov
add
hlt
or
repnz
mov
aad
lock
mov
shl
inc
xchg
fucomi
mov
mov
add
xor
ss
scas
and
push
pop
adc
xor
in
lea
xor
xor
cmp
mov
(bad)
mov
sbb
xlat
add
or
sub
loop
pop
xchg
outs
push
dec
mov
mov
pop
sub
sbb
in
(bad)
aam
mov
xor
xchg
pushf
std
scas
or
mov
lods
adc
lahf
call
stos
ins
xchg
pop
stc
inc
cwde
je
retf
mov
jb
popa
bound
mov
imul
ds
push
cli
push
imul
or
aam
test
dec
aaa
mov
bswap
push
inc
adc
shl
mov
push
outs
fstp
adc
fld
xchg
stos
pop
dec
retf
xchg
in
xchg
sbb
pop
mov
xor
sahf
push
xchg
pop
pop
mov
cmp
add
jg
and
xlat
lds
or
xor
fistp
xchg
jo
loopne
loope
lock
push
xchg
mov
mov
xor
cmp
inc
mov
xchg
pop
scas
xchg
and
xchg
xchg
imul
repnz
push
push
xchg
stos
pop
jae
aad
outs
lahf
xchg
call
xchg
push
les
adc
cmc
sbb
pushf
xchg
jne
add
mov
add
ja
scas
popf
push
fmul
mov
xor
adc
mov
std
cmp
out
int3
inc
or
retf
imul
jle
xchg
add
pop
mov
xchg
hlt
cmp
sub
aas
das
jl
jmp
and
or
add
mov
adc
adc
stos
jb
mov
pop
dec
adc
loop
gs
xchg
push
inc
push
xlat
push
imul
xchg
fsub
int
ja
fs
pop
sub
gs
outs
adc
je
loopne
ds
ret
sahf
and
cmp
adc
xchg
ror
push
loop
rol
mov
adc
mov
push
int
pop
repnz
fist
leave
adc
call
mov
sub
xor
dec
js
int
in
inc
inc
fist
push
fwait
jmp
xor
jp
xchg
adc
jae
and
outs
loop
test
in
mov
sub
dec
adc
xchg
or
punpckhwd
lahf
mov
xchg
js
aas
mov
add
std
je
and
pop
fwait
cld
pushf
mov
(bad)
int
les
push
mov
stc
pusha
jb
ins
xchg
in
(bad)
out
inc
test
push
adc
mov
or
(bad)
loopne
or
pop
sti
xchg
stos
push
sbb
fcmovb
push
xchg
cmc
adc
push
xor
int
push
scas
sbb
data16
(bad)
xchg
add
inc
sbb
inc
popf
xchg
fwait
xor
mov
add
pop
aam
mov
fadd
cmp
sub
jecxz
les
les
jns
xchg
iret
je
sbb
mov
xchg
mov
push
inc
xchg
inc
cmp
xor
sbb
imul
and
xor
sbb
mov
test
push
into
ror
and
xchg
fdivr
outs
cmp
xchg
cdq
pop
inc
dec
jb
dec
mov
loop
es
lods
call
gs
ins
sahf
pop
fst
mov
loope
ror
xor
addr16
pop
xchg
fwait
lds
lea
out
inc
mov
rcl
and
popf
jno
adc
mov
out
(bad)
mov
push
shr
xor
sub
fidiv
mov
rcl
xchg
cmp
std
stc
xchg
bound
adc
push
fsub
jne
out
cs
ret
int3
xchg
gs
fs
fwait
pop
push
cs
call
jp
rol
push
xchg
popa
sub
pop
xchg
aam
and
popf
mov
pushf
sahf
aam
push
ja
cld
add
jge
loope
xor
xor
pop
aam
imul
nop
dec
mov
(bad)
xchg
cmp
call
cli
xchg
imul
xchg
pop
mov
cmps
fs
sti
xchg
adc
dec
aad
push
jns
sub
xchg
dec
(bad)
cli
shl
iret
xor
repnz
jae
mov
mov
cwde
xor
push
rcr
mov
xchg
test
cld
aas
inc
(bad)
scas
cmp
outs
lods
sub
retf
ud1
fwait
push
cli
pop
lods
fidivr
pop
pop
xchg
mov
pop
rcl
cmps
adc
xchg
mov
and
adc
repnz
out
sbb
lods
por
xchg
and
icebp
mov
xchg
loope
ins
addr16
mov
mov
and
cmp
aad
jge
mov
push
xchg
push
scas
push
mov
inc
cwde
out
inc
hlt
loope
push
xchg
sbb
xlat
xchg
(bad)
sub
push
outs
jnp
adc
and
or
in
and
cdq
mov
lea
dec
cmp
add
xchg
inc
dec
sbb
xchg
test
neg
icebp
inc
jecxz
xchg
cli
(bad)
jmp
sbb
mov
and
mov
(bad)
xor
cmp
cmps
xchg
ficomp
imul
fmul
xor
sbb
daa
adc
pop
mov
xchg
push
inc
adc
sbb
fwait
not
mov
jmp
fst
adc
jno
scas
dec
mov
xchg
mov
pop
arpl
mov
xchg
icebp
imul
and
and
mov
std
ror
(bad)
cmp
shl
mov
cdq
imul
pop
(bad)
loope
popf
js
or
out
dec
push
pushf
retf
pop
inc
xor
or
xchg
mov
xchg
pop
daa
or
(bad)
fwait
icebp
push
xchg
arpl
jno
cld
loope
hlt
enter
sub
xchg
mov
xchg
dec
xor
xchg
inc
je
jae
and
xchg
or
mov
pop
mov
dec
mov
mov
repz
pop
xchg
daa
add
and
test
mov
push
cmp
push
push
mov
xchg
mov
jle
or
fisubr
or
int3
xlat
sub
(bad)
xchg
dec
std
push
mov
push
jae
shl
pushf
lods
adc
sub
push
dec
sahf
inc
xchg
not
icebp
test
xchg
in
push
aam
(bad)
jnp
jno
imul
rcr
jmp
gs
aam
sbb
push
sahf
fist
adc
(bad)
enter
int3
xchg
dec
sahf
mov
ficom
push
lahf
jp
scas
movups
adc
cmp
xchg
mov
(bad)
push
outs
or
mov
mov
mov
mov
retf
retf
mov
punpckldq
stos
push
mov
xor
adc
int3
into
xchg
adc
repz
mov
mov
aam
sub
sbb
sub
xchg
sbb
inc
add
push
xchg
xchg
rcr
iret
imul
xchg
nop
cmp
aam
in
xchg
or
mov
pop
inc
jecxz
xchg
pop
inc
xlat
js
mov
movs
xchg
fisubr
sar
adc
xchg
lods
push
jge
outs
dec
push
xchg
je
adc
add
ficom
mov
inc
sbb
(bad)
jge
aas
shl
sbb
add
jns
dec
xchg
xor
mov
test
(bad)
lods
adc
or
jbe
cmp
cmp
dec
xchg
jbe
cmp
jb
push
loop
(bad)
call
lock
mov
push
add
out
jp
ds
out
xchg
push
sbb
shl
mov
lock
or
adc
add
adc
enter
cdq
movs
adc
nop
hlt
xchg
mov
push
cld
xchg
cmp
test
xchg
xor
xor
mov
pop
int3
cmp
(bad)
jbe
xchg
cwde
mov
ds
lahf
fs
mov
xchg
mov
xor
popf
add
(bad)
mov
mov
xor
sbb
je
push
inc
and
pop
dec
xchg
push
push
(bad)
lahf
cmp
dec
pop
inc
jmp
push
cmps
push
nop
sti
loopne
pushf
adc
pop
mov
inc
sbb
js
xchg
imul
je
mov
mov
pusha
add
cmp
xchg
sbb
jge
in
scas
pop
xchg
sbb
inc
movs
(bad)
cwde
xchg
xchg
rcl
call
fild
icebp
jmp
fadd
cs
es
xchg
xchg
sbb
pushf
sub
(bad)
out
mov
loop
cmc
ret
jl
add
sbb
shl
xchg
clc
cmp
mov
dec
xchg
xchg
dec
mov
pop
xor
cmp
and
adc
xchg
jbe
add
rcl
lahf
xchg
aam
sti
adc
xor
rol
cmp
pushf
push
sub
jnp
sbb
jp
pop
jge
xchg
adc
leave
(bad)
loopne
dec
sub
xchg
(bad)
std
xor
xchg
mov
jo
das
jecxz
aam
dec
popf
xchg
pushf
stos
push
cmp
mov
call
rol
imul
push
adc
xchg
sub
inc
sub
cmps
les
ja
xchg
jb
jg
adc
jecxz
ror
ds
add
loopne
xor
xchg
fisub
xor
int3
mov
mov
dec
nop
fwait
pop
rol
fsqrt
sub
adc
aad
dec
loope
aam
xor
dec
push
jle
test
es
jmp
fwait
mov
out
repnz
xchg
push
mov
lods
test
pop
arpl
aam
push
xchg
test
outs
mov
mov
ret
cmp
dec
xchg
ins
iret
ret
stc
xchg
xchg
xchg
mov
popf
mov
inc
mov
inc
enter
inc
std
pop
add
xchg
sahf
adc
adc
pop
test
xchg
lea
je
fwait
xor
mov
movs
jecxz
jb
xchg
pop
retf
mov
dec
mov
sub
adc
lea
test
sub
add
int
leave
add
out
mov
mov
out
cmp
pop
xor
hlt
and
ficomp
adc
mov
shl
aas
jl
dec
sub
(bad)
aaa
mov
je
repnz
ja
xchg
or
dec
add
stc
and
lods
les
retf
(bad)
pop
sub
ja
adc
inc
clc
xor
in
xchg
add
inc
mov
cdq
popf
sbb
xchg
mov
xchg
add
loopne
mov
hlt
push
test
and
sar
je
lahf
mov
in
xchg
ins
int
stos
pop
ret
xchg
call
inc
fnstsw
fwait
push
jbe
fcom
fst
(bad)
in
cli
pop
mov
mov
js
push
xchg
push
add
xor
mov
iret
aam
in
in
and
xchg
mov
jge
jmp
add
shr
nop
xchg
sbb
adc
rcl
push
cmps
adc
rcr
add
xchg
je
mov
hlt
xchg
gs
or
xchg
imul
stos
xchg
jae
fdiv
test
les
sahf
ret
jle
xlat
jp
xchg
ja
xor
lock
ret
and
jmp
dec
cmp
push
sbb
int
daa
xchg
je
fcmovnbe
mov
lock
mov
ror
ds
int3
out
into
mov
add
adc
sbb
push
push
repz
xchg
(bad)
lock
sub
jnp
xchg
in
scas
movs
(bad)
jne
xchg
jmp
or
cmp
adc
rcl
mov
pop
lods
and
xchg
repz
clc
sbb
pop
pop
xchg
xchg
jmp
jae
inc
cmps
mov
sbb
out
jne
add
aam
inc
adc
sub
rol
xchg
mov
popf
sbb
xchg
xchg
mov
and
mov
fucom
push
add
xchg
xchg
push
pop
(bad)
xor
(bad)
adc
xchg
mov
sbb
xchg
and
add
xchg
inc
jge
cmps
mov
mov
lods
add
or
add
jae
and
sbb
scas
cli
xchg
push
loopne
mov
sbb
or
fnstsw
bound
xchg
imul
push
cmps
adc
mov
iret
call
lahf
adc
mov
mov
sbb
add
or
jge
movs
icebp
xchg
mov
fst
call
jb
aam
sbb
(bad)
xchg
mov
cmp
aam
fwait
test
push
mov
mov
xchg
cld
xchg
inc
inc
outs
xchg
inc
xor
(bad)
push
icebp
mov
jl
ss
test
xchg
hlt
loope
or
test
mov
movs
cmp
sbb
inc
xchg
mov
repz
cmps
lock
xchg
(bad)
fcomp
out
xchg
das
jo
jp
jl
fwait
xlat
lahf
loope
js
lods
fwait
sbb
push
aam
sub
inc
(bad)
sub
lock
mov
inc
rol
outs
xchg
or
call
mov
daa
mov
xchg
dec
adc
(bad)
xchg
call
cmp
xchg
xchg
jb
int
fist
call
jmp
xchg
mov
scas
adc
rcl
jo
xchg
mov
das
push
aaa
jl
sub
(bad)
fwait
xlat
popf
outs
xchg
aad
mov
adc
xchg
mov
lea
and
hlt
adc
ss
cli
xor
sub
nop
mov
pusha
(bad)
xchg
and
xchg
pop
sbb
inc
out
ins
in
das
(bad)
xchg
and
pusha
enter
xchg
outs
ret
sbb
jo
push
je
out
shr
pop
xchg
dec
xlat
cmp
jp
ins
xchg
mov
retf
in
xchg
aad
popf
cmp
es
mov
test
int3
dec
rcl
mov
ror
push
out
(bad)
repz
stos
xchg
sub
xlat
jl
xchg
ins
pusha
push
imul
in
test
push
sbb
fdivr
test
add
jmp
rcr
(bad)
repz
cs
or
sub
fnstcw
fidiv
jbe
arpl
clc
(bad)
xchg
fnsave
sub
inc
rol
mov
cmp
sbb
mov
push
jnp
scas
test
into
or
dec
loop
cli
fwait
inc
fs
push
sbb
lds
mov
int3
or
rcl
xchg
mov
add
ss
daa
dec
adc
xchg
fimul
mov
jmp
mov
test
pop
mov
adc
dec
push
int3
pushf
xlat
xchg
pop
add
lock
pop
sbb
inc
pop
aaa
cmp
xchg
popf
ror
gs
je
jo
sub
lahf
add
jl
fld
clc
sbb
jl
xchg
ja
jae
xchg
sbb
dec
push
and
std
xchg
inc
popf
push
out
pop
call
gs
not
xchg
pop
and
retf
fwait
and
or
in
xor
push
popf
add
cmp
mov
xchg
jns
js
mov
test
xchg
or
jl
repz
mov
loopne
push
mov
push
movs
outs
cdq
xor
cmps
fnsave
stos
arpl
jg
std
jmp
xchg
(bad)
or
mov
add
call
rcl
mov
or
test
movs
xchg
mov
mov
jo
and
stc
test
out
into
retf
mov
xor
xchg
cs
sub
or
add
(bad)
repz
jbe
sahf
imul
nop
daa
lahf
dec
add
sub
xchg
mov
sub
dec
mov
push
mov
sub
mov
push
push
xor
fs
xchg
push
setl
popa
xlat
xchg
xchg
cld
loope
fnstsw
mov
daa
mov
scas
and
dec
push
pop
xor
loop
out
xchg
jnp
aam
sub
imul
xchg
cmp
adc
mov
sub
dec
add
or
mov
adc
push
(bad)
sbb
ficomp
sbb
rol
(bad)
jns
dec
mov
xchg
xchg
mov
mov
xchg
sar
pop
movs
lahf
or
push
adc
push
sbb
xchg
(bad)
pop
ins
lods
retf
shl
adc
(bad)
(bad)
neg
xlat
xchg
shl
lods
push
ret
(bad)
fst
mov
mov
sbb
ds
sub
int
movs
jno
xchg
add
xchg
xchg
push
fs
xchg
xchg
xlat
outs
xchg
bound
xchg
xchg
mov
xchg
in
aaa
sbb
push
add
int3
ins
dec
fild
xor
movs
in
adc
sub
out
push
repz
mov
add
movs
aad
inc
inc
push
js
xchg
xor
add
xchg
xchg
loope
sbb
adc
add
popa
mov
xchg
(bad)
jp
call
sbb
cmps
je
inc
inc
cmc
xlat
test
ficom
out
rcl
cmp
add
clc
out
aad
mov
mov
mov
mov
loope
in
rcl
xchg
mov
rol
jne
sbb
and
pop
jb
add
sub
push
sar
mov
sbb
and
and
loop
push
cmps
jp
xchg
loope
inc
inc
ret
push
xchg
in
aam
cmps
mov
sbb
xchg
neg
xchg
arpl
lock
fwait
sar
jns
or
mov
jno
arpl
stc
mov
mov
xchg
adc
fsubr
pop
call
movs
adc
(bad)
and
cmp
out
shl
cmp
or
mov
dec
mov
iret
mov
add
test
xchg
mov
push
aas
xor
inc
ja
(bad)
into
jae
dec
xchg
enter
sbb
pavgb
push
pop
outs
cmps
aad
inc
xchg
mov
or
mov
mov
mov
xchg
or
jno
dec
retf
adc
sbb
lahf
adc
div
xchg
rcl
mov
mov
aad
push
push
imul
pop
pop
xchg
mov
icebp
hlt
mov
push
inc
pop
int3
pusha
adc
jge
dec
add
xchg
loope
retf
sub
xchg
dec
adc
xchg
adc
and
out
(bad)
jo
xchg
enter
sti
bound
mov
adc
jl
dec
cdq
jb
jge
pop
adc
fild
mov
js
movs
xlat
int
cmp
aas
sbb
sar
xchg
sub
ficom
xchg
ss
add
div
push
fst
imul
adc
and
sub
xor
in
out
aaa
into
jg
push
cmp
jl
out
dec
cmp
clc
arpl
out
enter
mov
mov
pusha
add
not
cmp
and
mov
dec
dec
push
jmp
xor
sbb
dec
sbb
inc
xchg
sub
sub
xchg
cdq
(bad)
sub
jg
sbb
je
push
ret
mov
mov
das
clc
adc
cmp
lods
mov
outs
ret
xlat
cwde
and
push
push
pop
push
scas
rcl
sub
mov
mov
mov
mov
xor
add
sub
xchg
inc
cwde
mov
xchg
retf
adc
dec
xchg
test
cld
jl
in
outs
jne
lods
mov
jbe
xchg
pop
je
xchg
movs
pop
xor
push
daa
xchg
rol
xchg
pop
data16
xchg
ret
test
push
fs
pushf
addr16
pop
js
inc
add
scas
add
das
mov
ret
mov
dec
cli
int
es
in
ficom
push
jb
mov
clc
adc
jle
pop
sar
xchg
push
push
inc
push
adc
les
test
aam
mov
sbb
pop
stos
sub
push
push
mov
xor
rcl
dec
push
mov
sbb
std
scas
xchg
(bad)
sub
es
mov
jmp
xor
jno
sub
pop
aas
cli
int3
rcl
lods
xchg
sub
loopne
push
xchg
daa
mov
je
xchg
xchg
xchg
cmp
repz
cmp
xchg
mov
push
jmp
and
rcr
fwait
pop
(bad)
js
xor
jmp
lea
mov
xchg
pop
ja
dec
cmp
test
out
sbb
dec
mov
xor
les
xlat
cdq
das
sahf
call
je
lahf
ss
pop
mul
scas
inc
cmp
push
pop
pop
das
js
xchg
cmps
xor
add
fs
repz
test
iret
add
sbb
mov
les
jnp
not
icebp
xchg
enter
jmp
mov
stc
sbb
repz
and
dec
inc
out
mov
and
das
fisubr
xchg
cmp
jg
xchg
inc
cmp
and
dec
sbb
jle
xchg
scas
mov
jg
xchg
shr
inc
fs
inc
ins
pop
je
inc
xchg
inc
lods
pop
lds
jae
repnz
sub
jo
mov
call
popa
rcr
pop
je
mov
mov
sub
and
push
jo
cmp
dec
adc
xchg
test
repnz
mov
cmp
jbe
sbb
out
cmps
xchg
in
loope
sar
in
ins
int3
xchg
add
cmc
pop
jp
mov
adc
dec
push
lods
xor
mov
jp
(bad)
sub
lds
fidivr
outs
dec
mov
stos
mov
inc
or
pop
add
out
push
pop
ss
lea
sbb
sbb
push
lods
xchg
jno
jae
pop
imul
xor
mov
xchg
jae
mov
sbb
jbe
xchg
cmp
je
push
fldenv
xchg
mov
sahf
xor
dec
fwait
outs
arpl
dec
(bad)
pop
not
xor
xchg
mov
push
jnp
mov
jl
add
push
or
aam
leave
mov
jno
xchg
lods
fisttp
xchg
ss
mov
adc
(bad)
push
push
push
mov
push
xor
xor
push
sahf
add
nop
xchg
jg
enter
and
pop
cld
les
loope
(bad)
retf
jp
or
(bad)
cmp
mov
sbb
fcmovu
xchg
adc
(bad)
pusha
inc
jo
mov
add
into
push
jbe
call
xchg
lea
sub
xchg
call
je
adc
fwait
jns
mov
lods
(bad)
cmps
cmc
push
cdq
loop
push
popf
jnp
inc
sub
xchg
push
fild
pop
icebp
movs
cmp
ins
lea
cli
dec
jns
xlat
movs
dec
jno
fs
xchg
repz
sub
fwait
xchg
sbb
adc
ja
xchg
imul
jno
adc
xor
sub
aaa
mov
jmp
push
and
xchg
mov
mov
jmp
out
xchg
pop
pop
pop
mov
mov
xchg
jae
add
mov
or
sahf
xchg
out
lods
bound
addr16
sub
xchg
data16
sahf
cmps
inc
scas
rcl
mov
jmp
not
mov
arpl
push
aaa
xchg
mov
rcr
pop
sub
(bad)
leave
jo
je
xchg
adc
lea
mov
cmp
mov
xchg
push
sub
stc
xchg
out
and
and
jnp
in
add
ins
outs
mov
mov
call
pusha
mov
dec
mov
jmp
add
xchg
pop
aas
jo
xor
cmps
rol
aaa
mov
xchg
ja
mov
add
cwde
(bad)
mov
fcomp
add
mov
gs
mov
xor
das
int3
sub
adc
sub
push
pop
mov
sub
xchg
(bad)
sbb
xchg
outs
ds
xchg
mov
sbb
xchg
movs
adc
out
push
pop
jg
adc
xlat
cmc
pop
lahf
dec
inc
jle
mov
push
inc
pushf
pop
jb
xchg
popf
inc
retf
aad
dec
dec
adc
or
push
retf
mov
scas
jns
adc
daa
leave
mov
jg
fbstp
jmp
mov
pop
aam
iret
mov
xchg
adc
xor
xchg
in
push
leave
xor
pop
cmp
sahf
jle
xchg
(bad)
int
dec
jmp
mov
xchg
push
out
std
mov
popf
add
(bad)
out
ss
mov
xchg
cli
cdq
inc
cmp
and
jo
leave
jmp
fsubrp
dec
test
cdq
xchg
mov
inc
sti
push
dec
mov
mov
adc
push
call
dec
adc
push
adc
dec
push
adc
sbb
inc
mov
xor
mov
daa
inc
lahf
inc
ds
cmp
cmp
xchg
hlt
inc
shr
push
test
xchg
cwde
les
mov
push
fisub
xor
cld
rcr
mov
xor
xchg
mov
adc
sub
pop
inc
and
dec
daa
inc
loopne
mov
aaa
xor
scas
xchg
xchg
leave
loop
mov
mov
xchg
pop
movs
mov
jae
fld1
stos
jns
fiadd
nop
stos
adc
pop
sub
xchg
mov
(bad)
sub
mov
stc
lods
stos
adc
punpckhwd
xchg
xchg
adc
and
dec
pop
rcr
xchg
cmp
mov
inc
fst
xchg
xchg
pop
jmp
fidivr
adc
call
aam
push
jae
push
xchg
push
mov
sahf
dec
xchg
(bad)
sti
and
push
add
lds
push
out
mov
cmp
push
jp
pusha
push
xchg
les
iret
inc
xchg
sub
and
hlt
xchg
imul
jno
call
mov
sub
sub
and
test
add
xlat
mov
cmc
jns
hlt
stos
mov
sub
jno
adc
mov
mov
cmps
aas
mov
les
inc
xchg
sahf
sub
sar
repnz
add
inc
xlat
fs
enter
inc
sub
retf
or
mov
fs
mov
add
loopne
cmp
loope
sub
outs
(bad)
cmp
pop
xchg
and
push
in
fst
push
(bad)
iret
xchg
xchg
push
rcl
push
call
push
test
xchg
jle
inc
xchg
test
mov
lock
lods
add
popf
sbb
sbb
clc
js
cmp
sbb
adc
mov
or
test
stos
pop
jno
std
(bad)
dec
cwde
dec
(bad)
push
xchg
mov
pop
aas
mov
pop
iret
mov
lahf
adc
clc
xchg
xchg
mov
mov
xchg
std
iret
push
je
stc
(bad)
ja
scas
jecxz
inc
mov
or
jb
xchg
into
inc
leave
jbe
mov
push
push
mov
sub
add
cwde
and
lahf
mov
int3
jl
push
fs
jae
add
test
adc
mov
push
xchg
push
xchg
fisttp
jl
xor
xchg
aam
dec
fiadd
xchg
xchg
in
imul
js
xchg
repnz
xlat
inc
sub
jmp
push
imul
inc
xchg
jno
push
scas
(bad)
jbe
cmp
inc
je
push
sbb
sar
mov
retf
test
outs
mov
fbld
imul
repz
inc
push
xchg
rol
ja
je
out
cs
(bad)
(bad)
pop
loop
xchg
clc
into
shl
out
stc
mov
push
push
loop
or
push
xor
stos
or
mov
test
xchg
or
jp
xchg
jns
xchg
cmc
pop
iret
adc
mov
pop
gs
dec
jl
add
push
fst
pop
mov
xor
rcl
xchg
cmp
mov
xor
mov
mov
aam
gs
push
xchg
inc
inc
adc
popa
call
jle
hlt
int
stc
xchg
(bad)
in
xchg
push
and
or
sar
test
fmul
fisttp
or
loope
rcl
jmp
movs
jl
scas
popf
fstp
inc
ds
hlt
shl
mov
xlat
add
pop
jo
ins
xchg
rcr
fidivr
mov
sub
shl
add
sbb
(bad)
cmc
ret
and
in
sub
nop
fisub
ror
add
movs
mov
xchg
push
pop
popa
mov
out
out
xchg
out
enter
cld
jg
(bad)
mov
out
xchg
cmps
test
pop
mov
outs
movs
add
cmp
xchg
jecxz
lahf
sbb
pop
xchg
in
or
adc
lods
mov
js
popf
fadd
(bad)
fwait
rcl
pop
or
mov
pop
hlt
push
pop
dec
xor
push
adc
jl
ins
nop
adc
sub
sub
cmp
pminsw
ror
pop
mov
xor
test
shl
cmp
mov
int
stc
ds
xchg
jnp
adc
dec
ret
fs
std
int3
push
retf
lods
sbb
lock
pop
jno
out
push
mov
popf
xchg
ins
int
pop
ins
xchg
push
fsin
or
xchg
dec
or
(bad)
int
xor
jb
sar
jnp
lock
add
sub
inc
mov
rcr
cmp
fwait
xchg
lds
lods
jmp
shr
xchg
inc
pop
xor
xor
xchg
test
ds
shl
jmp
shr
xchg
enterw
pop
xlat
sbb
fwait
test
fcomp
imul
xchg
nop
pushf
jle
xchg
dec
jl
jle
and
inc
psubusb
shl
test
add
xchg
ja
jecxz
iret
sub
sbb
sbb
sbb
pusha
cmp
lock
(bad)
mov
xchg
xchg
icebp
aad
(bad)
mov
mov
push
bound
sub
loope
aam
xchg
fdivr
xor
lods
jo
lds
inc
ficom
inc
je
pop
push
gs
fild
inc
adc
cdq
cmp
cwde
mov
push
pushf
rcl
dec
fldcw
pop
and
fld
jmp
iret
loopne
inc
mul
xor
add
test
mov
mov
js
lods
loop
mov
sub
sahf
push
ins
cmp
jae
mov
lods
cmp
xchg
jno
in
dec
les
cmp
jbe
xchg
jle
xor
push
cdq
xchg
arpl
and
pop
mov
mov
inc
loope
aam
imul
imul
push
inc
fimul
push
xchg
aad
jno
(bad)
sti
retf
and
add
pop
test
and
or
dec
mov
xchg
add
jbe
cli
adc
xor
shr
not
sbb
jp
dec
sbb
adc
inc
fisttp
mov
mov
adc
mov
fwait
push
test
mov
out
cmp
loope
push
mov
mov
or
loopne
and
sub
test
std
lods
cmc
imul
jge
inc
sahf
(bad)
push
xchg
mov
mov
aaa
xchg
sub
fld
cmp
mov
push
lods
gs
ror
push
push
retf
xchg
xchg
sbb
imul
data16
xchg
pop
mov
in
xchg
mov
(bad)
pusha
ds
clc
jmp
xchg
sbb
mov
mov
xor
xchg
je
fimul
push
cmp
xchg
cmp
xchg
into
jg
movntq
mov
cmps
inc
das
in
(bad)
xchg
jb
mov
cmp
or
xchg
inc
cmc
stos
mov
fwait
dec
test
je
jo
shr
sbb
loope
test
in
shl
arpl
xchg
or
jl
xor
xchg
lahf
pop
in
scas
mov
and
aaa
into
add
push
(bad)
xchg
sbb
push
jne
push
jbe
fst
ins
xchg
test
cwde
adc
lock
mov
xchg
lahf
scas
pop
inc
test
cdq
mov
xchg
imul
jbe
xchg
iret
xchg
xor
fstp
push
adc
push
rol
clc
fld
adc
add
cmp
xchg
je
aas
cmp
ror
pop
and
(bad)
jl
mov
nop
aaa
ja
dec
xor
cmps
adc
xchg
stc
je
mov
cmc
cmp
cwde
test
das
push
sub
imul
pop
mov
sub
cdq
sbb
xchg
xchg
shl
sbb
sbb
mov
or
xor
add
inc
mov
xchg
ins
or
jo
mov
cmp
jp
aam
call
xor
fidiv
xchg
ret
mov
popf
lds
push
adc
push
sub
add
adc
repz
push
cmp
sbb
xchg
xor
and
fst
int3
fild
rol
dec
mov
scas
shl
data16
je
shl
and
xchg
loopne
push
mov
aad
mov
into
xchg
loop
lock
out
fwait
jge
leave
cdq
dec
mov
mov
jbe
xchg
and
hlt
xor
jne
mov
mov
mov
hlt
bound
jo
call
add
jno
jnp
je
jb
leave
mov
dec
dec
into
int
add
(bad)
xchg
xchg
push
in
jns
push
xor
fcom
std
push
dec
aaa
(bad)
sti
xchg
loop
jle
mov
sbb
mov
cmps
xchg
jbe
jg
xor
cmp
js
ja
mov
std
add
cs
xchg
jae
or
cmp
inc
pop
xchg
cmp
stos
mov
xor
das
jb
xor
jge
sbb
out
sbb
mov
jmp
mov
mov
cmps
leave
mov
aam
push
cmp
push
xchg
ror
push
repz
cmp
inc
xor
xchg
pop
sti
adc
dec
addr16
xor
rcr
xchg
cmp
lock
push
adc
lock
fist
mov
daa
add
sub
inc
inc
rcl
cdq
sbb
xchg
dec
cmps
fimul
sbb
fwait
jne
aam
rep
adc
jbe
cwde
popf
xchg
outs
stc
pop
xchg
inc
nop
mov
adc
outs
mov
xchg
into
sub
mov
xchg
sti
add
inc
ds
pop
pop
and
mov
outs
sbb
cmp
or
mov
hlt
daa
arpl
loopne
jl
repz
xchg
popf
das
inc
pushf
inc
mov
sbb
retf
xchg
mov
enter
rcr
adc
or
xchg
xchg
leave
pop
out
sbb
call
hlt
inc
int3
mov
in
inc
lea
shr
outs
ins
push
pop
arpl
mov
pop
xchg
mov
or
js
mov
data16
nop
xchg
push
adc
pop
push
imul
js
xchg
cmp
pushf
fmul
add
ror
call
stc
out
push
aam
fs
in
xor
js
cli
cdq
mov
nop
jg
mov
outs
cmp
push
xchg
xchg
pop
sbb
mov
xchg
imul
mov
sub
push
push
addr16
shl
xchg
pop
sbb
jo
adc
mov
popf
call
xchg
push
movups
sub
add
mov
and
mov
cmps
or
adc
mov
jbe
sahf
pop
cmp
aas
xchg
adc
add
jnp
adc
mov
fdiv
(bad)
in
jb
popf
inc
cmp
fmul
mov
clc
mov
xchg
and
popf
xchg
pusha
push
shl
xchg
pop
xchg
aam
inc
sbb
dec
cdq
test
cmp
lahf
jo
mov
xchg
shl
aam
mov
pop
push
and
addr16
fidiv
mov
test
xchg
test
add
and
jo
xchg
and
fidiv
adc
mov
popf
call
in
lods
lock
ins
sub
xchg
jbe
mov
imul
in
sub
clc
mov
lods
in
mov
(bad)
jl
dec
mov
rcr
mov
mov
mov
mov
pop
in
js
(bad)
je
div
pop
push
stc
cmps
dec
fwait
sti
xchg
enter
adc
or
sbb
xchg
daa
xchg
push
mov
jmp
add
leave
test
jle
xchg
rcr
int
mov
les
ins
xchg
neg
outs
mov
xchg
es
pusha
inc
ret
sub
sub
push
dec
mov
cmp
xchg
sbb
mov
jl
jne
loope
mov
xchg
lds
out
(bad)
(bad)
retf
adc
in
sbb
xchg
std
fs
sahf
jg
push
adc
mov
xchg
das
xor
mov
inc
mov
fwait
sub
inc
xchg
jp
sti
fidiv
inc
or
jne
lahf
or
cwde
and
adc
je
mov
inc
hlt
stc
bound
rcl
or
xchg
sahf
sub
les
mov
sbb
mov
fucomi
stos
cmps
(bad)
addr16
leave
xchg
neg
aam
outs
loope
xchg
fnstcw
pop
mov
xchg
add
es
push
call
push
inc
mov
xchg
cmp
ficom
sar
push
inc
mov
hlt
push
xchg
sbb
loopne
mov
xchg
or
fidivr
lea
add
xchg
mov
fdiv
fwait
shl
jno
sub
jnp
or
jne
scas
nop
dec
mov
shr
lahf
retf
stc
adc
cmp
cwde
stos
add
ret
xchg
call
and
xchg
stos
pop
icebp
clc
aaa
jecxz
jmp
neg
fadd
fisubr
sbb
movs
(bad)
fwait
adc
fsub
xchg
scas
ret
mov
pop
jmp
pop
shr
jb
mov
jmp
mov
push
int
add
rol
push
dec
adc
xchg
mov
pushf
cmp
xchg
mov
mov
sar
adc
xchg
lea
rcl
and
data16
or
stos
xchg
cmp
sbb
jmp
xchg
fdiv
mov
out
xchg
xor
in
mov
xchg
ja
sub
movs
inc
xchg
sahf
test
dec
or
stos
cmc
cwde
icebp
inc
jle
jp
push
dec
test
lock
xchg
adc
das
sub
cs
out
fisttp
jb
out
mov
push
ds
enter
xchg
movs
dec
stc
cli
mov
and
fcomi
add
mov
jge
shl
xchg
jbe
adc
add
pop
xchg
sub
add
xchg
es
inc
dec
add
adc
or
out
rcr
adc
mov
int
jnp
xchg
dec
push
nop
mov
adc
mov
pop
or
sar
in
xchg
inc
adc
in
clc
jle
xchg
icebp
test
call
sub
sbb
push
jne
or
inc
aas
pop
cdq
mov
push
idiv
push
xchg
fs
pop
icebp
cmp
xchg
mov
sbb
iret
xchg
rcr
push
sbb
xchg
out
pop
xchg
xor
mov
and
inc
sub
mov
xchg
cmp
imul
jmp
data16
jl
fs
ror
(bad)
xchg
loopne
out
movq
fdiv
xchg
xor
xor
stos
or
xchg
mov
ss
jg
stc
xchg
xchg
mov
ds
xchg
out
ins
(bad)
(bad)
jecxz
cwde
jge
(bad)
retf
push
retf
sar
call
mov
pop
xchg
popf
outs
pusha
or
adc
aaa
xchg
addr16
add
dec
sbb
dec
pop
adc
inc
cmp
ret
add
js
pusha
mov
xor
lods
mov
xchg
imul
sbb
cli
test
inc
aad
lds
movs
fndisi(8087
push
add
mov
jno
dec
pop
pusha
cmps
xchg
jle
dec
inc
test
cld
popf
scas
(bad)
out
je
sbb
rol
mov
fcomp
(bad)
mov
and
ret
out
std
xchg
mov
push
mov
add
into
add
sbb
xchg
sub
mov
das
xor
jge
mov
out
xlat
sahf
xchg
cdq
jle
lock
mov
mov
aam
adc
not
fisub
(bad)
jp
xchg
mov
xor
call
outs
out
xchg
int3
dec
cmp
sub
cmps
(bad)
mov
add
pop
jne
in
fstp
lods
xor
ror
jp
aas
xchg
jo
push
lds
jmp
js
xlat
ret
push
inc
xchg
mov
enter
push
leave
xchg
xor
div
repnz
movs
adc
es
inc
push
fdivr
or
sahf
jge
in
je
rcl
(bad)
(bad)
mov
sub
(bad)
call
mov
mov
add
adc
push
dec
pop
js
xchg
or
jmp
into
mov
jge
js
clc
je
pop
cmp
dec
fisub
inc
xchg
cdq
mov
xor
cmps
xchg
data16
mov
pop
retf
sub
or
shl
mov
inc
out
sbb
push
add
adc
add
test
or
add
pop
pop
mov
mov
addr16
cs
aam
(bad)
cmp
fwait
das
nop
add
jno
lea
or
sub
mov
stos
retf
lods
loop
push
enter
xor
lock
in
pop
cmp
xchg
ret
cmp
xchg
adc
jl
adc
or
xchg
fstp
popf
pushf
mov
fwait
mov
into
mov
je
jno
inc
xchg
idiv
cmp
xchg
dec
xchg
push
inc
or
addr16
xchg
adc
outs
and
push
aam
xchg
dec
xchg
std
cmp
xchg
jg
sbb
rcl
xor
mov
add
rcl
cdq
je
repnz
xor
pop
loop
xchg
mov
add
xchg
mov
xchg
cmp
pop
mov
adc
(bad)
push
stos
movs
test
pop
ret
mov
bound
xor
add
leave
jge
lods
xchg
jle
out
lds
push
mov
mov
pop
sbb
jb
xchg
add
add
jmp
es
out
pop
stc
jge
mov
jb
cmp
fimul
mov
shl
movs
and
mov
xor
add
xor
xlat
arpl
adc
push
cli
(bad)
popa
pop
cmc
and
push
add
lock
scas
push
mov
inc
sar
inc
jns
cmp
(bad)
sbb
push
aas
inc
mov
xchg
add
dec
(bad)
sbb
add
ins
ficomp
dec
dec
imul
aam
aam
mov
stos
repz
js
jo
dec
jmp
lahf
unpcklps
xor
lock
test
fwait
(bad)
loope
cmc
mov
xor
outs
cmp
xlat
pop
xchg
scas
fadd
sub
ss
mov
xchg
mov
push
lahf
pop
xchg
ror
sub
jmp
aad
jb
jl
dec
push
pop
add
xchg
cli
push
inc
and
xor
add
es
(bad)
stos
or
cmp
pop
xchg
leave
sbb
add
pusha
cmp
shl
xchg
vpsubd
pusha
xchg
jne
push
sub
jmp
xor
ror
test
addr16
in
pop
cdq
test
xor
cmp
jnp
aam
add
cdq
xor
retf
nop
cdq
push
xchg
rcr
adc
mov
sbb
add
xchg
adc
push
(bad)
xchg
pop
rol
fwait
sbb
outs
dec
mov
push
inc
popa
xlat
ins
inc
bound
fwait
scas
fs
dec
call
leave
mov
test
adc
aas
cmp
xorps
jno
push
xchg
in
hlt
retf
popa
ja
xor
outs
addr16
dec
jmp
fistp
xchg
(bad)
bound
movs
mov
stc
shl
mov
push
sub
fistp
mov
sbb
xchg
fsub
jmp
xchg
(bad)
out
cmp
jecxz
aad
fwait
pop
gs
sahf
ja
popa
xor
push
sub
repnz
pop
dec
mov
pop
xlat
scas
mov
sbb
fsubr
mov
push
push
out
adc
popf
in
xchg
ds
leave
mov
adc
dec
xchg
aaa
dec
fwait
push
out
mov
adc
ins
out
call
dec
mov
xchg
rcl
outs
test
lds
pop
sbb
inc
fdivr
and
or
in
xchg
mov
scas
icebp
inc
jp
loop
xchg
mul
leave
ins
xchg
ror
scas
out
push
dec
inc
shr
adc
and
jne
xchg
ret
jp
sub
xchg
push
jbe
jge
call
test
arpl
and
pop
pop
xchg
sub
loope
dec
push
movsx
jp
daa
popa
xchg
enter
cdq
mov
iret
test
mov
loope
cmp
xchg
ror
nop
(bad)
mov
mov
mov
push
xor
sbb
int3
xchg
je
outs
xchg
aaa
add
mov
mov
inc
adc
inc
movs
sub
pop
jne
mov
or
das
sub
fsubr
xchg
sbb
pop
ja
xchg
fiadd
or
and
je
xchg
xor
add
ror
xchg
in
mov
pop
adc
jae
shl
dec
xor
lock
mov
(bad)
shl
add
jp
xchg
aad
push
loop
pop
int3
and
pop
xor
aas
xor
jmp
jle
test
not
adc
clc
enter
mov
mov
sti
dec
test
xor
cwde
aaa
sar
xchg
imul
xor
mov
fwait
mov
fsubp
jp
xchg
jae
sbb
retf
es
fsub
xchg
jl
cmp
sbb
pop
mov
dec
push
mov
cwde
sub
xchg
sbb
cs
sub
mov
sbb
clc
std
ja
sub
fwait
push
pop
mov
or
sti
gs
xor
scas
pop
retf
xchg
nop
popa
ror
shl
xchg
dec
iret
shl
push
out
xchg
jno
cmps
push
jle
ins
pop
xchg
cmc
sub
jg
xchg
pushf
stos
jbe
adc
sbb
aaa
in
mov
jb
sbb
push
sbb
xchg
je
sbb
into
xchg
(bad)
pop
or
xchg
test
mov
mov
add
push
es
js
xchg
enter
inc
inc
stos
arpl
jb
iret
inc
push
lods
jnp
cmc
pop
cmp
dec
inc
pop
idiv
jg
ds
push
lods
or
(bad)
(bad)
jecxz
mov
jl
push
add
dec
inc
test
inc
sub
ds
push
int
test
adc
cmp
xchg
rol
mov
xchg
inc
pop
lahf
dec
xor
lods
jns
retf
push
(bad)
dec
and
enter
dec
sbb
adc
mov
retf
rcr
push
xchg
mov
neg
retf
ins
mov
and
xchg
(bad)
int3
jecxz
movs
int
mov
or
jp
sahf
xchg
mov
xor
sar
xor
lods
mov
test
sbb
retf
xor
mov
xchg
adc
and
cmp
out
xchg
sbb
sbb
xchg
sub
(bad)
xchg
add
xchg
cwde
push
push
scas
xor
in
outs
nop
xchg
and
imul
mov
hlt
fucomip
fwait
daa
arpl
sub
mov
mov
push
jne
in
jnp
cmc
fwait
aas
sbb
fs
xchg
sub
movs
ja
push
or
bound
stos
xchg
jne
and
add
(bad)
jmp
data16
pop
cmp
pop
cmc
mov
adc
pop
shl
xchg
sub
cmp
adc
pop
loope
xor
xchg
cmp
and
scas
xchg
mov
jo
xchg
sub
dec
lock
out
adc
mov
xchg
enter
data16
sbb
add
adc
push
cwde
adc
adc
test
fidivr
xchg
jno
inc
lods
scas
les
repnz
xchg
xchg
push
out
or
xchg
imul
in
inc
inc
xchg
mov
mov
out
xor
mov
xchg
out
and
cs
sub
xlat
int3
mov
inc
xchg
lea
test
das
xchg
xchg
shl
into
arpl
push
xchg
cmps
fcomp
out
push
xor
fs
ins
sbb
and
pop
cli
pop
inc
and
adc
mov
pop
xchg
fdiv
jo
add
inc
call
fs
lahf
push
mov
xchg
pop
sti
mov
(bad)
fimul
cmp
dec
les
jns
int
data16
push
and
cdq
cmp
ja
or
test
add
sti
(bad)
jo
cmps
xchg
push
jmp
loopne
nop
xchg
adc
mov
xchg
mov
jns
pop
xchg
xchg
mov
mov
mov
xchg
inc
xchg
dec
stos
ins
lock
jno
and
dec
rcl
xchg
xchg
xlat
nop
arpl
test
sub
out
cmp
mov
mov
popa
add
icebp
push
xor
mov
add
xchg
cmp
mov
cmp
(bad)
or
xchg
inc
dec
push
sbb
jb
inc
xchg
popf
fldl2e
mov
xchg
pop
or
cld
mov
add
sbb
push
mov
test
mov
mov
push
cs
in
sbb
fmul
popf
xchg
mov
pop
(bad)
cmp
sbb
sbb
popa
cmp
loop
xchg
out
cli
add
fwait
dec
mov
addr16
push
aam
add
cmp
add
push
xchg
std
adc
xor
jbe
cli
mov
in
cwde
inc
iret
lock
adc
fisubr
mov
jno
jnp
icebp
xchg
and
xchg
mov
enter
add
scas
inc
cwde
(bad)
in
fnstsw
ins
cmp
(bad)
jmp
add
xchg
fldcw
mov
into
hlt
pop
mov
xchg
clc
add
stc
scas
pop
and
ds
pop
loope
inc
or
mov
scas
(bad)
ret
setge
(bad)
out
pop
cmp
xchg
out
xchg
push
dec
(bad)
icebp
mov
mov
cld
jo
stc
jg
mov
xchg
xlat
mov
xchg
fsub
out
cmc
adc
or
cld
mov
mov
cmp
loopne
inc
jmp
sub
pop
movs
inc
lds
mov
loopne
in
out
xchg
adc
push
mov
adc
ins
stos
outs
sete
xchg
or
xchg
cmp
fidivr
push
jecxz
xchg
dec
test
mov
add
pop
xchg
sbb
mov
xchg
push
pop
(bad)
sti
neg
xchg
add
cmp
xchg
push
sbb
jae
hlt
cli
mov
fmul
mov
mov
(bad)
cld
add
ins
xor
xchg
pusha
mov
dec
xchg
and
pop
(bad)
push
add
mov
lds
stos
mov
pop
dec
inc
add
shr
jl
dec
sysenter
cmp
xchg
jns
movs
pop
loopne
rcr
mov
or
je
mov
stc
mov
mov
mov
inc
popa
iret
xlat
fisub
adc
pop
mov
mov
mov
pop
push
pop
rcr
test
hlt
inc
sti
mov
xchg
test
bound
or
aaa
pop
retf
xchg
sti
cwde
leave
ins
add
xor
shl
jns
mov
xchg
popa
xchg
enter
out
xchg
retf
push
rol
and
xchg
out
xor
std
or
dec
lods
sbb
lods
lahf
int
cwde
xchg
xor
xchg
xchg
xor
loop
test
inc
shl
xchg
sbb
loop
mov
(bad)
ins
nop
dec
pop
cli
ins
setae
or
cmp
arpl
repnz
mov
xchg
ds
cmc
loopne
mov
adc
aam
pop
(bad)
stc
sti
xlat
xchg
out
out
mov
xchg
xchg
jb
loopne
popa
jo
xchg
cmp
sbb
xchg
fst
retf
pop
xchg
leave
mov
sbb
xchg
out
xchg
jle
adc
icebp
and
mov
pusha
(bad)
mov
xchg
bound
cmp
cmp
xchg
xor
inc
dec
mov
adc
inc
cmps
das
push
call
push
pop
in
jle
adc
or
sbb
or
jl
int3
xchg
imul
loope
out
jmp
and
cmp
push
pop
cmp
pop
das
std
out
mov
fcomip
xchg
push
sbb
js
push
mov
sahf
mov
fist
inc
jmp
push
dec
int3
rcl
xchg
xlat
push
(bad)
and
shl
adc
lods
je
data16
test
repz
aam
mov
xchg
not
sub
into
add
xchg
cli
shl
xor
cmp
push
push
icebp
idiv
sub
mov
push
dec
cli
xor
xchg
jge
and
sbb
cs
xchg
sbb
out
popf
ins
push
stos
mov
xchg
xchg
add
pop
xchg
ins
test
out
xchg
mov
and
rcr
int3
xchg
cmp
mov
mov
(bad)
call
inc
hlt
mov
iret
cwde
mov
mov
push
and
xor
in
xchg
clc
dec
jae
sub
or
div
or
xchg
jne
in
cmp
lock
adc
mov
xor
or
ds
addr16
jne
push
fcmove
jae
xchg
inc
stos
out
jo
hlt
xchg
data16
adc
dec
jecxz
mov
xchg
cdq
jl
pop
call
mov
xor
and
push
inc
iret
call
in
jno
(bad)
lds
sub
xchg
jl
xchg
dec
test
or
mov
xchg
inc
fcom
push
imul
mov
mov
mov
xlat
(bad)
or
xchg
popf
into
aad
dec
jge
mov
bnd
adc
jnp
jbe
xchg
sub
ins
dec
in
jmp
sbb
push
pop
adc
lahf
je
arpl
mov
or
mov
xor
retf
jp
xor
test
pop
jae
cmps
xor
arpl
fs
xchg
cmc
xchg
mov
test
out
jecxz
xchg
mov
out
sbb
in
inc
fist
ins
and
imul
mov
dec
les
scas
xor
xchg
popf
movs
jp
dec
xchg
out
xchg
xchg
test
mov
aam
test
mov
repnz
mov
iret
push
mov
cld
cdq
jecxz
adc
pusha
inc
lea
xchg
add
xor
mov
xchg
int3
push
sbb
jae
(bad)
xchg
(bad)
add
nop
mov
xchg
pusha
adc
add
cmps
je
(bad)
jae
jne
movs
ret
mov
aas
xchg
adc
retf
mov
fcmovnu
add
and
pusha
or
popa
ficom
push
outs
push
sub
nop
pop
xchg
cmp
into
inc
jns
inc
shr
cmp
cwde
bound
or
xchg
fidivr
add
xchg
pmaddwd
adc
rcl
jmp
lods
jl
adc
xlat
fbstp
pop
shl
or
adc
or
(bad)
add
jmp
loope
xchg
into
or
sbb
xor
mov
jne
sbb
xchg
fstp
frstor
stos
mov
or
push
dec
ret
push
mov
xchg
outs
mov
scas
ds
adc
fild
xchg
inc
sub
mov
inc
xchg
jnp
mov
or
xor
into
adc
sub
rcr
adc
jae
xchg
xchg
call
sahf
popa
fs
imul
xchg
xchg
jae
inc
sub
mov
xchg
mov
in
inc
cmp
push
push
fistp
lock
mov
add
adc
xchg
xchg
aad
dec
fidivr
scas
sbb
popa
aam
sbb
popf
(bad)
add
cmp
(bad)
mov
xchg
adc
sub
mov
call
test
mov
xchg
adc
jo
(bad)
fwait
and
jne
or
out
test
add
iret
xor
xor
cs
retf
xchg
(bad)
push
or
xchg
aas
push
dec
inc
adc
xchg
(bad)
pusha
jmp
out
popa
and
push
mov
sbb
mov
xchg
test
jl
xchg
inc
aam
fnstsw
sbb
fiadd
je
xchg
int3
cs
sub
mov
pop
xchg
loopne
sysexit
xor
cmps
xchg
test
mov
jmp
mov
test
pop
mov
sar
retf
cli
retf
fwait
mov
out
dec
adc
ror
adc
ror
xor
jmp
xchg
icebp
aaa
fimul
inc
aam
dec
xchg
retf
mov
lods
xchg
adc
cs
mov
(bad)
ins
sahf
je
xchg
or
adc
xchg
add
aam
stc
icebp
popf
jbe
push
scas
adc
fwait
and
and
xor
bound
dec
sub
(bad)
jp
ins
pop
inc
xchg
push
jae
loopne
retf
add
xchg
idiv
call
or
cmp
xchg
outs
sub
or
call
cmp
mov
in
jle
sbb
or
ds
or
xchg
mov
jecxz
push
cld
xchg
mov
dec
adc
mov
in
pop
pop
cmp
mov
dec
xchg
sub
push
mov
leave
adc
fs
xchg
int
xor
jbe
xchg
or
(bad)
std
pop
movs
xchg
je
out
aad
xchg
pusha
pop
push
in
add
mov
outs
(bad)
(bad)
loopne
ds
arpl
push
push
or
sbb
jg
mov
cmp
mov
cld
cmps
xchg
stc
repnz
pop
loop
mov
(bad)
jecxz
shr
xor
xchg
mov
cli
mov
cwde
xor
ss
dec
push
mov
sub
aam
xor
and
sti
stos
adc
cmc
push
cld
xchg
push
xchg
and
scas
pop
sahf
xchg
xchg
pop
loopne
jecxz
push
loop
out
dec
retf
or
and
nop
dec
mov
mov
and
loop
mov
dec
xchg
(bad)
addr16
mov
aam
xor
adc
xchg
jg
inc
add
ins
adc
into
cmp
adc
fs
push
adc
xchg
int3
loop
inc
daa
leave
inc
xchg
lea
out
xchg
xchg
jne
push
add
mov
cmps
lods
prefetcht0
pop
mov
ins
inc
dec
pop
mov
int3
adc
pop
sar
in
dec
mov
xchg
call
push
push
add
je
add
sbb
dec
xchg
test
xchg
arpl
pop
gs
test
inc
xchg
add
add
push
dec
pop
stos
xor
fisttp
or
sbb
pop
push
jbe
pop
shl
popf
popf
aad
mov
xchg
add
enter
aaa
outs
mov
pusha
loope
push
pop
xor
xchg
rol
retf
mov
add
out
int3
sbb
adc
xchg
stc
les
pop
xchg
or
in
rcr
cli
jge
xchg
lock
cmps
test
dec
push
cwde
cmp
out
adc
mov
mov
mov
mov
xchg
dec
add
rcl
push
popf
add
cmp
movs
jl
iret
dec
mov
xchg
in
inc
mov
fwait
adc
adc
sub
xchg
xchg
cmp
mov
xor
ret
ficom
enter
mov
sub
fnstenv
xchg
xchg
imul
movs
or
into
mov
add
jp
xchg
cdq
out
mov
mov
and
push
les
add
test
mov
jne
pop
and
ins
nop
mov
aam
out
(bad)
hlt
rcr
stos
mov
movs
xchg
ret
mov
and
ds
adc
xchg
mov
inc
jb
pop
xor
push
call
nop
mov
paddb
xchg
pop
call
inc
repnz
sbb
inc
xchg
add
jns
cmps
fs
mov
(bad)
xor
(bad)
clc
retf
push
xchg
xchg
xchg
lods
or
pop
push
fimul
enter
out
jmp
test
jno
and
in
jns
jo
dec
mov
xor
inc
sahf
xor
jne
push
xchg
mov
sub
fiadd
sub
mov
mov
add
(bad)
xchg
adc
outs
fbld
stos
mov
je
and
rol
in
mov
dec
cwde
in
push
cs
sub
sti
xchg
mov
fstp
xchg
ja
add
mov
push
hlt
xchg
push
jp
xchg
inc
loop
rcl
pop
jne
scas
xor
cli
inc
xchg
mov
sub
cs
ja
test
adc
fist
pusha
mov
test
xor
adc
mov
sahf
cmps
sbb
jle
mov
or
jb
xchg
mov
iret
fcom
mov
cmp
hlt
adc
xchg
fmul
mov
xchg
jae
sub
xchg
adc
mov
push
xchg
in
add
sbb
xchg
push
push
dec
inc
stos
jb
call
xor
cmp
inc
sar
js
jmp
xchg
jge
cmp
lods
iret
xchg
jmp
push
mov
and
add
int
adc
cwde
sub
aas
scas
jno
inc
mov
push
mov
add
cmp
sbb
adc
xor
xchg
lods
push
xchg
mov
ds
xchg
icebp
mov
mov
leave
dec
jle
nop
mov
xor
xchg
dec
cmps
adc
std
push
xchg
jbe
popf
cmp
lock
aaa
xchg
mov
out
scas
xchg
nop
mov
xchg
cwde
idiv
fs
push
movs
dec
out
jnp
push
ficom
aaa
xor
push
stc
rcl
fsubr
mov
xor
outs
push
clc
mov
hlt
pop
stos
lahf
xor
arpl
(bad)
std
cmp
ins
add
dec
mov
test
clc
cmp
adc
pop
(bad)
sbb
add
cmp
mov
adc
scas
rcl
in
push
test
xchg
aad
ror
stc
(bad)
fdiv
out
cld
xchg
cmp
rcl
and
cmp
adc
out
mov
sub
les
jnp
dec
jmp
xor
xchg
leave
and
imul
call
in
xchg
std
neg
sbb
xchg
jne
inc
clc
push
mov
inc
popa
addr16
xlat
adc
psubsw
daa
movs
ficom
std
xor
sbb
adc
test
lea
ret
int3
xor
push
das
xchg
mov
adc
inc
stc
jge
sub
mov
or
icebp
les
mov
aaa
mov
adc
xchg
and
stos
sub
(bad)
js
jl
icebp
pushf
not
xchg
push
clc
int
stc
inc
aas
mov
mov
xchg
lea
repz
leave
add
xchg
(bad)
cdq
jmp
rcl
or
sbb
cmp
lods
(bad)
loopne
mov
(bad)
stc
aam
or
add
idiv
(bad)
mov
sub
fisubr
jbe
xchg
pop
xchg
xchg
cmp
in
and
xchg
mov
dec
sub
push
aad
in
xor
add
sbb
cli
jp
stos
cld
das
mov
fdivr
dec
dec
push
lahf
out
inc
(bad)
xchg
mov
xor
sbb
adc
and
pop
jmp
xchg
clc
push
xor
int
aam
xchg
mov
cmp
xchg
pop
test
and
in
movs
stos
xchg
jl
out
retf
jle
xchg
ins
fstp
int
(bad)
mov
or
push
fist
push
cmp
jmp
xlat
mov
and
aaa
jl
cli
adc
scas
cmps
fwait
scas
cld
jmp
and
fadd
stos
pop
xchg
std
mov
xor
cld
xchg
rcl
adc
mov
xchg
cmps
test
int
out
mov
ss
or
dec
inc
xchg
sti
add
(bad)
rcl
movs
xor
mov
cmc
leave
outs
mov
push
enter
in
mov
sub
inc
push
add
mov
rol
sub
lock
mov
call
mov
xchg
add
xchg
dec
xchg
jmp
jno
push
outs
adc
call
xchg
repz
or
cmp
xor
retf
jo
mov
(bad)
repnz
mov
fcom
push
imul
lds
add
ds
push
push
mov
xchg
and
cmps
jmp
push
sahf
jle
adc
fldenv
pop
xchg
adc
ja
xchg
sub
push
mov
xor
dec
dec
ret
mov
cmc
push
xchg
imul
mov
add
dec
mov
sub
shl
sbb
shl
xchg
sahf
jno
or
js
xchg
jae
cmp
mov
iret
fiadd
mov
dec
jns
push
out
add
sbb
and
pop
mov
out
fisttp
sti
call
out
les
mov
push
dec
xchg
js
dec
mov
xlat
adc
jl
pop
pop
fdivrp
pop
(bad)
xchg
jns
add
or
lods
xchg
dec
add
mov
cmp
xchg
out
fs
and
xor
inc
cmps
xchg
jnp
stc
mov
xchg
enter
mov
fs
xchg
scas
xchg
xor
xchg
imul
lods
call
cmp
sti
rol
outs
ss
xor
dec
shl
inc
cmp
loop
dec
cmc
rcl
push
ss
xchg
pop
inc
(bad)
call
fist
sbb
test
cmp
xchg
pop
jg
adc
(bad)
xchg
jle
xchg
in
pushf
inc
int
dec
je
xchg
sub
scas
lods
dec
dec
fwait
pop
stos
dec
adc
into
je
fcom
mov
xchg
xchg
mov
mov
add
push
xor
aam
(bad)
stc
mov
gs
and
int3
hlt
fist
push
jns
xchg
pop
enter
cwde
je
xchg
mov
sub
xchg
add
cmp
clc
push
repnz
call
ds
mov
xchg
or
outs
sub
repnz
and
add
out
push
fst
add
push
adc
xor
or
shl
mov
xchg
adc
sti
push
sub
ret
xchg
sbb
arpl
jns
xchg
mov
sbb
cmovl
inc
ror
xchg
imul
mov
jge
add
or
xchg
xlat
xchg
std
(bad)
jle
fdivr
sbb
jne
push
movs
dec
div
xchg
xor
enter
xchg
xchg
cmps
inc
mov
add
xchg
inc
mov
and
cwde
loop
loope
mov
ficom
cli
add
cmp
push
push
icebp
sar
pop
xchg
mov
and
adc
or
cmp
pop
xchg
aam
add
sete
addr16
in
xchg
xchg
xlat
xchg
jmp
push
inc
ret
push
mov
push
cdq
jp
jle
adc
xchg
stc
or
scas
fdiv
pop
xor
(bad)
push
ficomp
adc
jg
jae
inc
xchg
pop
jnp
add
xchg
inc
push
mov
sbb
stos
xchg
rcr
dec
bswap
mov
xchg
inc
les
fwait
clc
jmp
out
rcl
mov
pop
jnp
xchg
into
mov
xchg
mov
das
xchg
mov
imul
repz
xchg
not
and
mov
pop
xchg
out
cmp
xchg
xchg
outs
fbstp
sbb
xchg
popa
(bad)
out
add
push
xchg
ins
bound
out
loopne
ret
and
fld
bnd
mov
and
mov
jmp
xchg
mov
nop
jne
lock
xchg
cmp
xchg
test
mov
fiadd
xchg
xor
cdq
sbb
cmps
add
mov
mov
pop
xchg
popf
mov
ret
test
repz
sub
cmp
(bad)
iret
bound
(bad)
out
ins
(bad)
test
fmul
pusha
dec
je
xchg
gs
mov
sti
cmp
aam
xor
mov
or
mov
loope
mov
mov
int3
mov
add
jne
lods
fs
mov
adc
outs
add
xor
adc
mov
(bad)
mov
xchg
inc
ud2
cmp
pop
xchg
ins
and
jnp
outs
test
cmp
mov
push
mov
cmp
jl
addr16
daa
jg
push
mov
push
xor
das
leave
nop
xchg
adc
push
cmp
pop
cmp
xchg
mov
add
cmps
or
rcl
jnp
and
xor
inc
cs
adc
adc
fistp
rcr
fist
push
pop
fstp
xchg
cmp
adc
cmps
(bad)
pop
cmp
jecxz
dec
push
or
xchg
dec
sub
dec
in
fdivr
mov
adc
lods
shl
fmul
jne
or
(bad)
xchg
add
lock
cmp
add
fwait
sub
xor
cmp
rol
push
pop
lods
inc
push
push
out
je
in
push
(bad)
stc
cmp
xchg
xchg
mov
ret
xchg
pop
scas
das
aam
mov
lds
lods
push
fisubr
out
xchg
push
iret
adc
dec
mov
(bad)
xchg
cs
jecxz
or
aam
adc
adc
xchg
xor
add
xchg
fs
xchg
push
into
loope
loop
push
mov
xchg
and
ror
xchg
pop
pop
jmp
dec
cmc
sbb
sti
imul
fisubr
aam
pusha
in
(bad)
xor
in
out
jnp
xchg
add
mov
mov
fisubr
dec
or
xchg
adc
into
movs
sub
jae
xchg
mov
daa
out
xchg
js
or
pusha
xchg
iret
and
add
fstp
mov
or
push
lods
xchg
jl
cmp
sbb
sub
lds
mov
mov
adc
out
sbb
js
pushf
fadd
xchg
dec
call
or
popf
and
rol
mov
xchg
add
lahf
in
inc
push
(bad)
scas
add
pushf
loopne
rcl
hlt
xor
in
xchg
fiadd
sub
test
rol
adc
jb
mov
clc
add
mov
jne
ins
xchg
mov
lods
or
xor
dec
cdq
push
enter
shl
xchg
call
out
es
dec
js
stc
aaa
xchg
pop
ds
mov
mov
adc
jmp
xchg
xor
test
fidiv
aam
stc
aad
popf
pusha
arpl
inc
ins
xchg
pop
daa
imul
js
outs
out
xor
add
xchg
sti
and
xchg
inc
in
push
or
dec
mov
cld
stos
cmp
fild
jg
loope
les
mov
rcl
repnz
hlt
test
leave
aas
call
xchg
sti
loop
bound
mov
call
mov
into
lods
xchg
push
and
mov
test
xchg
popf
ja
call
cwde
sub
fwait
cld
xchg
xchg
push
jnp
mov
int
xchg
and
into
ror
rcl
push
pop
prefetchwt1
jmp
fcom
fnstsw
dec
adc
icebp
test
adc
xor
ss
mov
jg
xchg
jecxz
adc
(bad)
div
sbb
imul
fcom
or
xor
js
nop
adc
fstp
adc
jge
not
xchg
jne
sahf
and
xor
fwait
(bad)
pop
or
push
jecxz
es
push
or
xchg
sbb
ror
ja
data16
inc
jg
push
idiv
xor
xchg
adc
pusha
pushf
xchg
sub
scas
addr16
pop
arpl
pop
loope
xchg
ret
sub
and
adc
test
cs
jns
push
jno
in
push
adc
repnz
fld
sbb
mov
pop
xor
xchg
xchg
retf
xchg
jns
mov
xchg
cwde
dec
stos
fisubr
mov
popf
loopne
pop
leave
xchg
lods
push
push
fcomp
jl
xchg
cmp
dec
xchg
gs
out
cmps
fistp
xchg
loopne
sbb
mov
lods
imul
mov
xchg
je
xor
xchg
rcr
rcl
jbe
mul
imul
pop
xchg
mov
cmp
mov
dec
xchg
inc
cld
loope
sahf
rcl
test
xchg
iret
push
sub
pop
xor
xchg
lock
gs
fmulp
stos
int3
lea
xchg
sbb
scas
and
fcmove
into
mov
xchg
in
sbb
xchg
xor
fnstcw
cmc
inc
add
into
mov
shr
xchg
nop
iret
aam
push
call
faddp
dec
dec
cmp
xchg
jmp
xor
cmc
arpl
fwait
ret
pop
mov
push
jb
bound
jne
not
cmp
mov
mov
xor
add
sbb
es
repz
xchg
sbb
cmc
add
not
aaa
dec
cmc
jo
pop
enter
xchg
imul
xchg
mov
push
sbb
xor
jno
adc
lock
dec
mov
std
add
stc
xchg
sbb
das
ret
push
je
push
ja
pop
rcl
jl
jne
in
push
mov
adc
(bad)
push
bound
clc
xchg
sbb
ss
enter
aam
lds
lods
adc
imul
(bad)
mov
xchg
aaa
dec
cmc
jb
scas
mov
mov
adc
push
test
or
sbb
fnstenvw
inc
sbb
hlt
fsubr
jae
fist
mov
ins
stos
out
sbb
xor
inc
ja
or
or
lds
xchg
push
mov
mov
popa
lods
xchg
pusha
ret
cmp
dec
xchg
stos
and
mov
adc
push
pop
nop
je
outs
inc
mov
leave
push
cmp
mov
xchg
mov
push
sub
aam
movups
jp
ins
cs
pop
jmp
xchg
mov
mov
dec
and
mov
dec
add
push
jp
bound
test
lds
sub
xchg
out
jbe
fidivr
outs
adc
mov
push
inc
pop
dec
iret
mov
retf
mov
rcr
adc
sbb
sub
inc
mov
mov
adc
jb
xchg
and
inc
ss
cmp
mov
cmp
xchg
(bad)
xchg
mov
mov
xchg
inc
js
xchg
cs
push
xchg
out
call
xchg
fwait
out
xchg
data16
mov
mov
xor
cmp
lahf
pop
in
push
dec
sbb
hlt
stc
xchg
jb
cwde
xchg
loop
lods
mov
shl
inc
shl
xchg
and
je
or
nop
int
setno
not
and
pop
rol
mov
gs
and
xchg
(bad)
cli
cmps
inc
pop
push
push
sahf
fld
jnp
rcl
jge
loope
jmp
inc
int
cmc
xchg
pop
xlat
or
repz
add
xchg
jne
out
mov
ins
hlt
jecxz
xor
ins
and
lahf
and
mov
out
dec
pop
aaa
sti
int
iret
xchg
rcl
cli
fwait
js
xchg
cmc
pusha
fst
imul
not
xchg
dec
sbb
mov
lea
neg
xchg
jae
outs
xor
cmps
mov
cdq
or
inc
add
std
adc
ins
mov
ret
pop
pop
adc
je
loopne
fmul
in
xchg
pop
adc
xchg
int
mov
mov
sti
adc
inc
add
mov
fwait
push
int3
stos
mov
xchg
mov
xor
adc
xchg
scas
pop
cld
xor
push
dec
shl
pop
xchg
mov
add
ficomp
fcom
bound
xchg
jmp
or
test
out
enter
dec
xchg
lods
stos
push
jb
ins
loope
cmps
pop
mov
xchg
inc
mov
xchg
sub
xor
iret
push
lods
xchg
mov
imul
loope
(bad)
std
xchg
ds
dec
xchg
cs
iret
icebp
cmps
movs
test
push
xchg
pop
jo
push
pop
jp
push
pop
xchg
leave
(bad)
fistp
xchg
push
jge
loopne
sbb
xchg
sbb
dec
and
adc
push
daa
xchg
call
mov
pop
gs
jno
and
xchg
and
(bad)
fwait
add
sahf
pop
dec
inc
or
push
xor
and
jnp
lea
sbb
call
inc
je
dec
mov
xor
push
mov
sbb
(bad)
aad
fsub
hlt
shl
xchg
mov
add
ja
jle
push
adc
(bad)
mov
mov
fldcw
push
xchg
shl
nop
adc
popf
out
mov
scas
fisubr
shl
xchg
test
iret
stc
cli
(bad)
dec
jmp
test
std
xchg
in
add
popf
xor
and
es
mov
pop
xor
add
add
shl
xlat
fistp
fistp
push
pop
hlt
xchg
jecxz
fcomi
test
leave
das
xor
adc
mov
dec
mov
ins
xchg
cdq
pop
mov
js
movs
push
shl
or
adc
and
jmp
out
mov
hlt
dec
repz
cmp
je
mov
mov
xchg
imul
sbb
pusha
call
inc
xchg
sar
xor
aas
(bad)
clc
xchg
mov
pop
nop
popf
xchg
fistp
mov
mov
xchg
adc
test
outs
test
or
ja
and
ins
adc
xchg
mov
(bad)
(bad)
not
pop
fisttp
movs
imul
inc
push
icebp
xchg
rol
sbb
xor
stc
jmp
xchg
push
and
push
mov
mov
or
arpl
and
pop
stos
pop
shl
xchg
push
mov
inc
ins
dec
xchg
and
sbb
xchg
xchg
or
pop
xchg
test
call
push
aad
jle
pop
rol
xchg
add
sbb
pusha
xchg
test
imul
xchg
xor
sub
mov
dec
push
je
ret
(bad)
jecxz
xchg
aaa
adc
pop
dec
(bad)
sub
mov
ds
stc
stos
addr16
outs
xchg
cmp
sbb
xor
xchg
inc
xchg
adc
ins
mov
xchg
arpl
pop
dec
scas
je
add
xchg
push
xor
aaa
xchg
jg
xor
int3
sub
xchg
je
movs
fxch
ficom
fwait
dec
repz
sbb
cmc
cmp
and
lds
mov
xchg
outs
xchg
inc
sub
mov
jp
mov
ja
jl
xchg
jl
jg
xor
sub
pop
xchg
adc
retf
lods
mov
xor
pop
test
test
repnz
popf
(bad)
mov
aaa
rcr
or
xchg
inc
cmps
add
dec
popf
xor
and
xchg
xchg
cmp
mov
cmp
xchg
mov
jno
cmp
and
jns
jo
dec
pop
pop
test
jg
add
mov
pop
rcl
rcl
and
mov
xchg
fs
push
jne
retf
xchg
aam
mov
cmp
jle
sbb
icebp
mov
push
mov
shl
xor
loop
mov
dec
mov
xchg
xchg
fbld
mov
mov
adc
out
in
xor
movs
jg
aad
icebp
je
(bad)
adc
es
sbb
mov
lods
(bad)
mov
xchg
dec
leave
jnp
sti
outs
cmc
scas
mov
mov
xchg
pop
ror
or
retf
xchg
addr16
lea
xchg
pop
adc
sbb
xchg
jno
pop
in
mov
mov
xchg
iret
mov
outs
adc
mov
sub
push
add
inc
(bad)
push
cwde
enter
add
fmul
xchg
add
test
mov
adc
test
sbb
into
sahf
fistp
cmc
dec
dec
dec
xchg
or
push
cmps
mov
xchg
adc
push
and
in
mov
fld
cld
les
std
mov
push
call
jge
inc
inc
jb
jns
repnz
xchg
outs
pop
rep
cmp
mov
fimul
ds
cmp
push
mov
test
sub
xor
cmps
xchg
xlat
shl
adc
nop
and
push
or
loop
pop
mov
cmp
shr
in
mov
(bad)
adc
mov
mov
push
pop
sub
ss
and
fwait
pop
imul
pop
mov
int3
iret
test
jo
xchg
int
xchg
test
sub
imul
xchg
dec
les
popf
jg
pop
jge
repnz
(bad)
loope
mov
mov
int3
and
jno
aas
cdq
inc
das
or
adc
cmp
cwde
and
out
daa
cmp
dec
sbb
mov
mov
pushw
xor
mov
ss
aas
sub
clc
mov
xchg
cs
arpl
ins
inc
inc
pop
lea
and
mov
test
inc
or
mov
adc
push
adc
mov
pop
ror
dec
or
outs
mov
inc
daa
xchg
xchg
cld
(bad)
jb
lea
jg
adc
cmp
ds
xchg
loopne
add
or
inc
mov
daa
pop
jno
out
adc
adc
pusha
sbb
xor
xor
xchg
pop
jbe
imul
(bad)
add
adc
pop
hlt
adc
add
or
out
adc
lods
test
cmp
push
dec
xchg
lock
lahf
push
push
inc
dec
sti
and
fwait
movs
(bad)
arpl
xchg
aaa
aaa
into
pop
daa
jle
xchg
mov
dec
dec
jecxz
jbe
imul
fist
sti
sahf
sbb
dec
(bad)
xchg
inc
add
pop
adc
fwait
out
jp
mov
xchg
xchg
scas
inc
dec
xchg
mov
int
inc
cmp
xchg
cli
sub
mov
jp
stos
js
cdq
mov
xchg
lahf
mov
jns
ja
cmp
adc
jae
out
push
into
imul
hlt
push
dec
sub
cld
fadd
inc
dec
add
xchg
mov
inc
mov
shl
xchg
xor
pop
jmp
aam
xchg
mov
sub
(bad)
fs
push
ret
adc
cmp
and
jmp
push
das
loope
cmps
adc
retf
pop
xchg
mov
mov
mov
aaa
(bad)
push
push
mov
mov
es
mov
out
popf
imul
test
push
xchg
std
sub
cmp
xchg
popf
xor
cs
or
jbe
inc
and
je
mov
xchg
shl
fwait
add
and
xchg
int3
mov
and
aaa
(bad)
jmp
je
movs
loope
movs
call
adc
popf
cmps
push
aam
xchg
out
lods
xlat
adc
inc
mov
fwait
xor
test
in
mov
sub
sub
out
and
mov
adc
sub
push
ja
jmp
xchg
inc
xor
icebp
test
xchg
js
xchg
jge
add
ret
cmp
xchg
jp
and
lahf
cli
pop
xchg
cs
pop
call
imul
rcl
sbb
js
fwait
rol
imul
and
(bad)
int3
not
xchg
add
xchg
lahf
xor
mov
dec
mov
dec
hlt
out
xchg
mov
xchg
sbb
mov
(bad)
retf
or
dec
fwait
dec
mov
stc
jg
add
(bad)
daa
jbe
xchg
ins
cld
pop
sub
jns
adc
jle
aaa
mov
and
imul
fwait
cli
ds
pop
dec
adc
int3
aad
cmc
sbb
xchg
xor
lods
dec
mov
addr16
jno
adc
push
test
test
and
xchg
imul
data16
repz
stc
outs
cwde
add
push
movs
fcmovu
xchg
lea
lds
mov
in
xor
add
sahf
loopne
mov
call
sahf
adc
pop
leave
xchg
cdq
loop
jmp
pop
fwait
xchg
out
aad
fnsave
gs
push
pop
(bad)
mov
mov
and
mov
adc
movs
lods
(bad)
pop
xor
mov
xchg
sbb
jmp
idiv
sub
mov
fwait
std
push
jbe
arpl
retf
xchg
cmp
or
fwait
and
dec
jmp
xor
aas
in
xchg
mov
call
sub
outs
jno
fmul
cli
mov
dec
push
jmp
mov
retf
sbb
xchg
sbb
out
push
adc
fild
adc
rcl
cmps
xchg
push
pop
adc
inc
mov
mov
xchg
jmp
xchg
pop
fidivr
ror
xor
mov
(bad)
jno
popa
and
xor
xchg
fsubr
sbb
add
pop
pop
ret
xchg
aad
sub
push
shld
dec
test
pop
sti
mov
inc
push
jp
scas
mov
adc
pushf
(bad)
retf
sub
les
cmp
dec
(bad)
outs
inc
xchg
in
test
push
dec
jg
in
cmc
adc
mov
outs
pop
xchg
popa
cmp
pop
adc
js
mov
xchg
jo
int
sub
mov
cmc
retf
jl
push
jbe
xchg
popf
or
add
sar
jg
imul
push
lods
or
jo
push
xchg
fstp
lea
inc
adc
xchg
rol
fs
xchg
(bad)
xchg
xor
out
cmc
xchg
sub
push
push
cmp
test
sbb
jl
push
ins
mov
fdivr
out
sbb
repnz
movs
mov
je
or
push
into
retf
imul
dec
cmp
sub
dec
adc
xchg
and
adc
je
push
ja
and
neg
mov
xchg
adc
retf
jmp
sbb
jle
adc
fsubr
xor
xchg
sub
push
ficomp
xchg
bound
xlat
scas
retf
ret
push
(bad)
not
xchg
inc
test
iret
adc
pshufw
mov
popf
fistp
add
cwde
and
mov
xor
cli
mov
or
jnp
fcom
clc
xchg
or
push
in
pop
fist
imul
mov
or
fwait
sbb
in
push
jmp
cld
or
jb
in
repz
or
jnp
dec
ror
test
arpl
xchg
cmp
jl
(bad)
and
lahf
std
mov
les
jo
xchg
ins
daa
xor
xchg
xchg
push
add
or
mov
push
jmp
leave
xor
dec
mov
xchg
shl
or
dec
call
retf
es
ds
fdivr
xchg
cmp
add
add
cmp
adc
lea
push
int
das
in
sbb
mov
popf
push
sbb
sbb
or
jbe
mov
ja
lods
repz
cld
mov
push
ins
xchg
cmps
xor
in
add
jmp
inc
aas
fidiv
jne
mov
push
jmp
xchg
sub
sub
xchg
into
lods
cmp
xchg
rcr
push
adc
sbb
mov
mov
or
lds
or
in
jo
fs
xchg
inc
mov
popf
dec
(bad)
js
les
xor
xchg
lods
add
xchg
stos
inc
cli
in
test
adc
rol
jo
dec
xchg
mov
jae
xchg
mov
xchg
mov
ficomp
les
sub
add
mov
xchg
xchg
jg
aam
ror
fadd
cmp
int3
jle
(bad)
xchg
or
jl
xchg
outs
cmp
sete
push
pop
mov
xchg
out
mov
sub
lock
into
xchg
in
pusha
ror
add
xchg
(bad)
jmp
or
rol
mov
inc
icebp
(bad)
pop
fwait
sar
xor
or
popa
jno
outs
cmps
daa
call
mov
lds
or
pop
(bad)
ja
outs
pusha
jg
or
and
mov
aam
rol
aad
lds
test
(bad)
mov
stc
dec
test
outs
xchg
fwait
pop
sub
pop
cmp
xchg
jecxz
shr
dec
and
loope
push
sub
jmp
push
popf
cs
ret
or
mov
push
test
ds
push
push
xchg
xor
fld
mov
mov
xchg
xchg
aaa
retf
mov
ret
add
mov
or
xchg
lods
jno
sbb
fwait
icebp
push
or
fpatan
into
cs
iret
out
pop
xchg
int
cmc
scas
ja
mov
shl
inc
mov
cwde
xchg
(bad)
mov
in
out
xchg
sbb
cmp
xor
xchg
faddp
or
adc
xchg
xchg
lods
add
mov
xchg
data16
bound
test
push
out
inc
jmp
cdq
mov
xchg
cli
(bad)
inc
fist
xor
dec
cdq
cmps
sub
(bad)
push
mov
pushf
xchg
adc
and
cmp
add
mov
adc
push
xchg
imul
pop
imul
xor
lods
adc
sbb
mov
inc
mov
push
in
jo
jmp
jns
and
jbe
xchg
dec
js
out
jg
jae
push
rcr
push
xchg
enter
cmp
and
mov
aad
fwait
pop
adc
leave
mov
jb
aam
xchg
push
fadd
xchg
mov
dec
out
cmc
mov
(bad)
mov
add
outs
jbe
sbb
out
fist
pusha
pop
xchg
sub
sahf
mov
xchg
and
or
sar
in
pusha
daa
popf
and
fwait
mov
jmp
jnp
xchg
push
(bad)
lock
mov
cli
mov
push
daa
aad
gs
cmc
nop
inc
popf
xchg
movs
lods
pop
bound
fidiv
out
fistp
arpl
mov
out
dec
cmp
(bad)
iret
jle
adc
sbb
retf
dec
xchg
pop
idiv
adc
dec
rcl
stos
jmp
ja
xor
xchg
popa
jle
add
int3
data16
mov
enter
xchg
cmp
xchg
lods
nop
pop
lods
ins
xchg
gs
dec
mov
jmp
outs
xchg
xor
ret
out
stos
xchg
cmc
xchg
in
jmp
xchg
xchg
xchg
test
adc
add
push
cmp
lahf
dec
push
add
cli
xchg
jo
cld
inc
add
ins
aas
xchg
adc
sub
inc
mov
fwait
adc
jp
inc
je
xchg
mov
dec
sbb
or
(bad)
lahf
(bad)
sub
xchg
mov
add
aas
je
xchg
xor
push
cmp
dec
xchg
ds
fs
fcom
fcom
pop
cmp
adc
mov
xor
(bad)
push
pop
icebp
lahf
xchg
(bad)
clc
push
xchg
xlat
sub
sahf
mov
xchg
call
hlt
xchg
fsubr
imul
mov
push
(bad)
into
movs
push
push
cmp
mov
adc
cld
adc
or
mov
or
pop
xchg
(bad)
jb
mov
pop
fs
mov
cmp
cs
and
(bad)
out
add
xchg
iret
icebp
call
jae
cmp
or
xchg
jbe
outs
(bad)
ins
mov
xchg
ds
xor
call
and
retf
xor
xchg
hlt
mov
fdiv
dec
xchg
cmp
push
xor
adc
sub
rcl
hlt
outs
inc
jmp
outs
into
pop
push
in
mov
addr16
mov
dec
pop
(bad)
loopne
das
xchg
cmp
pop
xor
out
dec
rcl
popf
adc
cmp
add
rcl
inc
ret
pop
mov
mov
sub
push
lahf
lods
dec
pop
mov
call
or
sbb
movs
mov
add
in
sub
jmp
aas
xchg
push
inc
lea
adc
loope
xchg
push
mov
mov
xor
push
sub
inc
stos
pop
mul
imul
xchg
lahf
mov
fwait
in
adc
out
ss
xchg
pop
adc
int
ret
jmp
push
je
mov
ins
push
mov
adc
adc
xchg
je
fs
mov
jl
sbb
lds
fwait
or
sub
xlat
mov
aam
pop
push
aaa
xchg
or
fistp
xlat
xor
push
adc
sub
sbb
(bad)
nop
cmp
pushf
or
xchg
mov
das
mov
sbb
aaa
sub
add
fisub
jb
mov
scas
adc
int3
lock
push
xchg
mov
or
sahf
(bad)
fdivrp
xchg
cdq
mov
xchg
rcl
mov
push
jno
ja
cmp
sbb
popa
fwait
jmp
(bad)
mov
and
xor
add
and
inc
mov
fnstcw
sub
pop
xor
outs
xchg
mov
call
xchg
pop
mov
aam
loope
loop
leave
xchg
xchg
lahf
test
inc
add
jno
bound
loope
adc
aam
xchg
fwait
jmp
and
ficom
out
xor
xchg
rcl
test
outs
lea
push
dec
mov
xlat
xchg
(bad)
movs
cld
push
mov
dec
xchg
cmp
ficom
enter
imul
bound
aam
ret
xchg
mov
pop
mov
das
adc
push
pop
inc
adc
xchg
jg
ins
or
fwait
stc
pop
add
jo
or
lods
xchg
into
fistp
xchg
and
mov
pop
pop
sub
dec
adc
in
test
sbb
push
je
add
cmp
ficomp
stos
and
mov
or
mov
xchg
pop
hlt
sbb
push
mov
dec
into
xchg
mov
movs
push
sbb
xchg
int3
lahf
jp
retf
cmp
dec
leave
test
in
mov
mov
dec
xchg
xchg
cmp
shl
mov
mov
xor
stos
aam
adc
popa
jecxz
xchg
jns
(bad)
fisub
retf
or
das
(bad)
into
mov
xchg
dec
test
aad
jae
popf
fimul
adc
xchg
adc
sar
add
xor
lock
add
shufps
loopne
xchg
(bad)
aad
mov
xchg
xchg
and
inc
sbb
aam
rcl
mov
xchg
test
cmc
pop
xchg
inc
pop
test
loop
inc
inc
xchg
lock
enter
or
xchg
push
jle
pusha
cmp
and
xchg
dec
mov
in
xchg
mov
sbb
inc
jb
mov
mov
dec
xchg
inc
xor
xchg
test
jle
bnd
in
pop
jecxz
xchg
pop
aad
sub
jge
xchg
add
and
bound
ret
int3
jl
xor
das
aam
ror
nop
cmp
lock
xchg
push
sbb
scas
xchg
jmp
adc
sub
fdiv
xchg
xchg
inc
js
sbb
cmp
stos
xchg
push
mov
push
mov
ret
mov
sub
nop
xchg
ror
loope
int3
pop
add
ds
lahf
jne
das
ins
dec
sub
pop
sub
mov
shl
movs
mov
and
jne
inc
pop
in
xor
push
jno
popf
dec
into
xchg
out
sahf
rcl
and
out
popa
xor
cli
lock
xchg
aas
or
cmp
jge
imul
adc
shr
(bad)
dec
xchg
outs
ret
xchg
pop
xor
pop
mov
cld
xchg
xchg
jecxz
ins
sbb
stos
mov
pusha
nop
pop
dec
sbb
mov
dec
xchg
and
aas
push
rcr
xchg
pop
cld
mov
add
xchg
or
pop
push
scas
xchg
aad
ret
dec
add
push
arpl
mov
dec
xchg
es
adc
popf
push
pop
mov
loope
xor
mov
sub
enter
out
call
lods
mov
xchg
adc
inc
cs
sahf
push
xchg
ror
imul
xchg
loop
jle
pop
mov
cmp
and
inc
xlat
xchg
pushf
daa
jne
rcl
cs
dec
add
imul
xor
aam
aam
mov
add
pop
jmp
cmp
and
xchg
xchg
out
shl
mov
jmp
iret
cld
push
fiadd
mov
call
xchg
sbb
push
inc
jbe
rcr
xor
ins
mov
mov
or
xchg
and
sbb
loop
pushf
hlt
xchg
(bad)
jno
push
cld
aad
push
jle
pop
data16
cli
cmp
(bad)
(bad)
out
sub
ja
xchg
xchg
fild
jp
xchg
mov
movs
pop
inc
xchg
rcl
jns
in
mov
(bad)
out
sbb
pop
out
add
dec
cmps
arpl
cmp
xor
std
test
rcl
ja
xchg
inc
fisttp
xchg
jbe
xchg
inc
data16
mov
xchg
gs
xor
push
(bad)
xchg
mov
arpl
or
sub
in
int
lods
xchg
ja
cwde
icebp
mov
mov
arpl
fwait
mov
push
(bad)
neg
mov
les
xchg
push
mov
lock
mov
pop
adc
cs
outs
add
loop
xchg
stc
add
rcr
adc
jnp
jbe
xchg
shr
jae
mov
adc
popa
push
repz
push
fbld
mov
xor
cdq
leave
fs
sub
outs
(bad)
xchg
dec
dec
aad
xor
in
cmp
xchg
mov
inc
xchg
xchg
cli
mov
mov
cld
push
pusha
clc
stos
out
scas
xchg
fidivr
sbb
xchg
and
sub
xchg
mov
or
jbe
mov
xor
ins
aam
xchg
xchg
mov
xor
call
fiadd
xchg
pop
jl
sub
xor
popa
lahf
mov
rol
mov
cmc
out
lds
inc
inc
and
mov
jle
sbb
jo
pushf
pop
leave
mov
loopne
test
test
or
inc
add
int3
in
adc
int3
mov
xchg
cmp
hlt
or
loope
es
mov
out
and
dec
xchg
cwde
xlat
mov
sbb
cdq
add
sub
xor
xor
jb
test
xchg
in
adc
push
xchg
push
fst
js
or
loope
mov
sub
gs
mov
fmul
enter
movs
cmp
sahf
gs
jecxz
xchg
mov
or
mov
push
outs
jge
jmp
hlt
xrelease
es
nop
mov
dec
adc
fcmovnbe
xor
adc
push
imul
or
xchg
loope
ins
sub
sub
pop
lahf
sub
mov
pop
gs
and
jno
and
xchg
and
push
data16
xchg
add
hlt
xchg
ja
stos
xchg
adc
dec
aas
je
sub
mov
adc
imul
aad
ja
pop
and
xchg
sub
hlt
mov
sub
ret
sub
dec
adc
dec
stos
loopne
mov
inc
popf
adc
xlat
sahf
pop
out
adc
(bad)
in
xchg
push
mov
cs
mov
add
and
(bad)
push
xchg
jle
xor
adc
sbb
clc
fwait
xor
mov
xchg
pop
hlt
mov
imul
je
cli
int3
and
dec
rol
fwait
xchg
sbb
pop
sbb
ins
cmp
cmp
add
xchg
xchg
adc
das
clc
fild
pop
add
mov
sti
mov
xchg
out
out
es
repnz
jbe
in
imul
sub
pop
rcl
xchg
push
push
icebp
jne
cdq
or
cs
aad
ins
(bad)
stc
(bad)
shl
xchg
and
sub
fwait
into
hlt
jae
cmp
sub
mov
xchg
or
push
xor
push
mov
stc
mov
ins
loope
neg
xchg
cmp
xchg
stos
dec
leave
std
sub
mov
mov
in
ja
test
fiadd
mov
gs
stos
xchg
sub
jp
or
rcl
pop
cmp
xchg
out
mov
or
imul
sbb
arpl
mov
pop
hlt
aaa
out
dec
in
mov
and
inc
jmp
mov
aam
jo
das
mov
ret
ins
fmul
(bad)
dec
xchg
push
imul
adc
pop
adc
inc
and
push
xchg
mov
out
sbb
fwait
sbb
or
gs
xchg
xchg
xchg
jbe
iret
push
retf
js
aad
xchg
adc
xlat
cmp
xchg
ret
stos
jne
call
(bad)
mov
jnp
inc
mov
inc
xchg
stos
ret
adc
mov
pushf
in
fimul
adc
(bad)
into
fcom
xchg
jne
sbb
scas
cs
adc
aaa
int
xchg
xchg
dec
xchg
(bad)
jp
push
mov
mov
jp
and
(bad)
push
pop
loop
jge
jae
iret
enter
out
xor
movs
xchg
lahf
and
mov
jl
ins
dec
pop
adc
ret
sub
fdivr
loope
mov
pop
pushf
cmp
fst
jae
mov
iret
(bad)
sub
nop
rsm
int
cs
imul
or
test
ficomp
xchg
mov
xchg
ins
inc
cmps
lahf
push
mov
retf
sub
xor
add
sar
adc
and
xchg
cmp
pop
jne
fld
mov
xchg
sbb
fiadd
dec
jns
jmp
shl
or
sub
loopne
fcmovu
dec
fwait
popf
and
ror
xchg
dec
jecxz
fldcw
sub
fwait
xchg
jbe
fimul
aad
add
push
pop
jno
push
mov
call
adc
pop
mov
into
or
adc
push
mov
xchg
imul
xchg
jo
mov
fwait
adc
out
push
mov
jo
pushf
xchg
push
in
and
mov
movs
mov
jmp
xchg
adc
call
lods
cdq
push
leave
push
lar
jae
jmp
sbb
or
xchg
pop
mov
adc
sub
mov
xchg
jmp
sub
xor
fsub
pushf
push
add
(bad)
push
lds
ins
popf
jge
mov
js
repz
cmc
cld
repnz
das
xchg
neg
jecxz
lds
jo
call
daa
jl
push
and
bnd
movs
shr
mov
mov
icebp
repz
xor
pop
and
call
mov
mov
xchg
add
call
ins
addr16
imul
jmp
inc
test
fwait
mov
scas
inc
lods
in
adc
xchg
data16
xchg
add
and
stos
test
pusha
jne
aas
mov
je
pop
gs
in
xchg
xchg
cdq
and
jns
jno
xchg
xchg
xor
lahf
mov
repz
push
or
leave
xchg
outs
mov
pop
aad
lock
popa
xchg
ins
stos
fldcw
mov
fwait
imul
xchg
cmp
or
xchg
sbb
pop
xor
(bad)
rol
xchg
pop
inc
call
aam
push
hlt
enterw
mov
sti
xchg
push
add
dec
outs
xor
xchg
js
push
xor
out
movs
lahf
xchg
push
mov
xlat
sub
or
jl
in
or
jbe
sub
ins
out
or
fs
xor
in
dec
repnz
fdiv
int
lea
push
ret
iret
jle
or
xchg
imul
inc
in
push
dec
pop
xchg
cmp
jecxz
out
xchg
fist
mov
or
xchg
addr16
je
mov
scas
jne
mov
push
dec
rcr
mov
icebp
test
inc
add
movs
jmp
dec
pop
xchg
and
loope
xchg
pop
ror
inc
int
add
sahf
sbb
ror
jmp
test
xor
adc
mov
mov
inc
xchg
mov
sbb
fcomp
in
std
icebp
xchg
movs
adc
xchg
frstor
lock
ds
(bad)
rcr
fwait
adc
mov
jne
pop
pop
xchg
out
aad
xchg
(bad)
jns
xor
or
pushf
xchg
push
inc
xchg
lods
jl
enter
popf
or
cmps
dec
sbb
dec
pop
xchg
iret
out
cli
clc
push
inc
test
lock
push
int3
sahf
lea
adc
fimul
out
aaa
mov
jns
daa
pop
xchg
sbb
push
gs
addr16
mov
xchg
cld
or
out
pop
ja
dec
mov
or
mov
xchg
mov
xchg
push
sbb
mov
sbb
mov
mov
(bad)
out
fwait
cmps
mov
stos
sar
sub
push
cli
aam
or
xchg
xchg
fwait
je
xor
fdiv
adc
sub
aam
aaa
pop
push
hlt
xchg
test
pop
cdq
xchg
loopne
pop
push
xchg
and
aad
adc
cs
xchg
ins
(bad)
leave
jne
jnp
mov
aam
lods
adc
das
es
mov
into
xchg
test
retf
fs
xchg
cld
nop
inc
jecxz
jge
cmp
cdq
sub
jno
sbb
push
add
aad
rcl
jge
ins
lea
jo
movs
xchg
retf
dec
push
in
mov
leave
out
pop
out
mov
(bad)
scas
xchg
les
cld
push
shl
dec
xchg
sbb
rcr
xor
adc
dec
cdq
pop
push
mov
xchg
icebp
xlat
xor
or
xchg
adc
push
mov
movs
fs
test
jmp
mov
stc
or
xchg
call
fiadd
stc
je
add
xor
retf
cmp
push
mov
and
push
pop
cmp
mov
(bad)
pcmpeqb
imul
xchg
cli
jbe
rcl
push
sub
pusha
mov
and
push
push
cmp
inc
pop
xchg
aaa
sbb
loope
jno
cld
xchg
ret
xchg
scas
scas
aad
add
xchg
mov
test
fisubr
cmps
mov
jecxz
(bad)
mov
push
mov
call
hlt
cs
jno
aam
xlat
ja
mov
sub
pop
xchg
xchg
jne
pop
(bad)
xchg
ret
xchg
and
les
jae
xchg
jmp
sub
mov
ins
inc
imul
mov
xor
jbe
pop
push
ud2
dec
mov
sub
jle
rcl
es
in
mov
test
inc
pop
sbb
jmp
adc
pop
xchg
xchg
mov
dec
push
pop
test
cmc
xchg
cwde
shr
cmp
sub
add
xor
es
into
mov
jge
ret
aaa
or
call
sbb
test
(bad)
cmp
mov
ror
pop
push
xor
sub
les
xchg
fisttp
xchg
ins
dec
sub
cmp
push
in
xchg
(bad)
sub
mov
push
test
xchg
and
sbb
xchg
mov
mov
fs
add
xor
or
mov
mov
out
pop
imul
mov
or
mov
jmp
mov
jo
push
mov
xchg
jns
addr16
sbb
xchg
imul
sahf
adc
jp
xchg
punpckhbw
xchg
xchg
ins
leave
mov
cmc
push
jno
cdq
stos
push
mov
fldcw
stc
test
bound
jo
sub
sbb
add
push
dec
mov
mov
nop
clc
or
cmp
add
or
xchg
and
push
dec
xchg
xor
jno
lock
pop
fist
xchg
cs
mov
fwait
iret
(bad)
retf
or
fcmovnbe
jne
xor
imul
sub
add
loopne
fidivr
jmp
xchg
xor
ficom
(bad)
push
ret
sar
out
xchg
je
push
and
mov
mov
pop
and
scas
stos
mov
push
fistp
cmp
xchg
in
stc
cmps
lods
xchg
push
dec
std
(bad)
xchg
lods
xchg
popa
mov
clc
call
cmp
dec
xchg
and
sub
ficom
nop
xchg
sbb
dec
mov
je
xchg
xlat
dec
sbb
mov
sbb
jnp
cmc
sbb
adc
cmp
sbb
or
jbe
es
jp
add
and
mov
pop
push
je
js
xchg
sub
cmp
push
xchg
jmp
rcl
mov
jmp
push
shl
mov
xchg
add
push
or
(bad)
nop
dec
xor
push
pushf
test
leave
sub
mov
sbb
lock
mov
add
mov
xchg
adc
jmp
gs
lods
xchg
sahf
icebp
fs
adc
mov
xchg
xor
add
add
fmul
dec
outs
js
xchg
data16
enter
inc
xchg
push
mov
outs
xor
lds
std
adc
jne
loope
fwait
retf
xor
gs
nop
enter
pop
jnp
ffree
adc
imul
push
cmp
mov
xchg
cmps
dec
jg
les
pop
add
add
nop
lods
mov
pop
xadd
dec
int3
pop
xchg
(bad)
std
fisub
add
adc
xchg
cli
dec
jb
addr16
clc
lock
and
lea
xchg
cmp
arpl
sbb
scas
cmp
push
or
les
jmp
(bad)
adc
xchg
(bad)
mov
adc
lahf
loope
xchg
jne
mov
mov
and
mov
fnstcw
push
mov
out
adc
pop
xchg
mov
jnp
mov
sti
inc
inc
cmp
xchg
fbld
and
sub
pop
jne
mov
outs
ret
aaa
mov
or
aas
mov
xchg
in
nop
mov
call
xor
jns
or
aam
hlt
dec
add
retf
adc
inc
lock
fwait
mov
xchg
push
xchg
or
in
repz
inc
cmp
mov
xor
or
add
retf
xchg
iret
js
xor
shl
daa
mov
jge
xchg
in
mov
mov
(bad)
call
push
dec
jmp
add
mov
or
inc
aaa
xchg
test
test
xchg
js
(bad)
vpcmpeqb
inc
sbb
fsubr
xchg
movs
inc
cmc
int3
inc
stos
cmp
ds
xchg
push
(bad)
scas
mov
pop
gs
pop
rcl
xchg
test
sbb
(bad)
push
das
sbb
xchg
pop
mov
push
jns
outs
xchg
scas
lods
mov
mov
jbe
das
xchg
sub
sub
(bad)
jns
pop
and
imul
cdq
mov
dec
das
nop
dec
call
mov
fcmovnbe
xchg
ret
push
or
jmp
xlat
xchg
call
inc
xchg
(bad)
push
xor
push
es
cmps
xchg
pop
xchg
and
and
push
xchg
lods
mov
clc
cmp
jl
mov
fwait
or
push
and
cmp
sub
xchg
fstp
pushf
push
jo
in
popf
fs
xor
ja
ret
outs
push
dec
sbb
or
cmps
xchg
arpl
add
out
pop
xchg
cwde
inc
rol
mov
add
dec
(bad)
mov
dec
fcom
dec
mov
jg
inc
enter
imul
fst
xchg
fst
xor
movs
cmps
cwde
add
xchg
inc
test
retf
mov
push
ins
mov
xchg
mov
adc
js
loopne
vpmulhuw
fwait
test
mov
mov
fwait
ins
xor
mov
push
sbb
push
sti
add
retf
ror
cmps
jp
fwait
dec
into
scas
xchg
arpl
adc
retf
rcl
or
xchg
jecxz
in
repnz
pop
xchg
lea
pop
mov
push
mov
jmp
fwait
ins
ret
xchg
xor
stc
lods
mov
loope
xchg
fcom
je
jmp
or
fcmovnb
mov
cmp
mov
push
jo
ins
add
gs
adc
inc
inc
sub
xor
mov
(bad)
cld
into
push
es
cs
lahf
test
pop
add
push
stos
jg
pushf
sti
shl
(bad)
xchg
xchg
in
dec
and
aas
lahf
mov
hlt
es
pop
xchg
test
cld
pop
je
jbe
xchg
mov
pop
repnz
cld
xchg
imul
in
pop
in
pop
imul
test
push
int3
xchg
pop
dec
or
aas
cmovl
scas
js
das
fisub
xchg
pop
mov
jg
call
ror
push
retf
xchg
icebp
pop
add
dec
sbb
xchg
mov
dec
cmp
push
push
xchg
push
je
mov
cmps
mov
add
xchg
sbb
bnd
mov
ror
sar
adc
fs
jl
cmp
ss
sar
lock
or
in
es
ins
lods
xchg
mov
and
mov
pop
fwait
xchg
cmp
and
out
out
xchg
cmp
adc
inc
mov
mov
and
push
jno
stos
mov
jg
xchg
imul
aad
mov
popf
or
lea
adc
ja
cmp
mov
push
and
pop
xchg
int
pop
mov
mov
daa
inc
aam
sbb
xchg
add
std
outs
lahf
sbb
rcl
sub
xchg
aaa
test
jp
in
mov
outs
clc
je
add
mov
dec
call
xchg
enter
outs
push
jnp
xchg
test
stc
adc
ficom
cs
adc
mov
dec
add
test
adc
(bad)
sub
fist
or
mov
xchg
cmp
xchg
cwde
jmp
nop
xchg
daa
pandn
sbb
ret
mov
aam
sbb
or
into
(bad)
stos
cmp
test
mov
sub
dec
xchg
xchg
cwde
mov
pop
or
cmp
shl
mov
hlt
call
ret
dec
xchg
sub
dec
add
rcl
adc
fcom
xchg
mov
dec
movs
loope
sbb
test
dec
mov
adc
out
mov
sub
xchg
jge
mov
xchg
aam
dec
int
popf
pop
shl
mov
xchg
push
in
mov
iret
in
loopne
sbb
mov
les
in
mov
pop
add
cmp
cld
jl
or
inc
or
in
jg
xlat
xchg
xor
jmp
fptan
pusha
cld
out
xchg
mov
dec
jl
or
xchg
retf
test
mov
push
(bad)
mov
adc
fiadd
ret
cmovge
shl
jmp
xchg
fs
enter
fwait
mov
leave
xchg
dec
inc
push
mov
rcr
dec
jecxz
add
ins
xchg
fldl2e
mov
cs
inc
popf
lea
stos
mov
adc
js
lods
jp
xchg
aaa
pop
cmp
test
jo
test
add
xor
and
cmp
mov
mov
jge
ficom
pop
retf
push
cmp
or
jecxz
nop
xchg
popa
push
sbb
shl
inc
arpl
in
pop
repz
mov
hlt
sti
pusha
dec
xchg
inc
xchg
mov
fisubr
or
pop
xchg
mov
adc
sub
mov
push
fnsave
fisubr
push
retf
retf
les
xor
jbe
xchg
xchg
fdivr
mov
xchg
ds
xchg
div
jecxz
xchg
ja
adc
repz
ds
mov
std
jo
push
sub
arpl
lods
call
sbb
fbstp
xchg
jae
ins
sub
dec
add
arpl
adc
xlat
test
inc
xchg
xor
xor
lods
push
jge
movs
xchg
add
push
fs
rol
sbb
rcl
(bad)
add
rcl
data16
inc
xchg
pop
xchg
jbe
mov
loop
xchg
js
push
repz
shr
jl
add
out
push
lds
and
fwait
enter
jge
push
into
xchg
mov
inc
cmp
fwait
cmp
outs
call
push
add
enter
xchg
push
js
lods
inc
and
ss
xlat
jge
scas
adc
and
out
hlt
xchg
mov
xchg
xchg
xchg
add
mov
sbb
fs
les
jno
add
and
retf
xchg
cli
stc
pop
std
sub
sbb
(bad)
in
jne
inc
fwait
or
adc
pop
ja
pop
cmp
jp
xchg
(bad)
push
loopne
das
mov
cmp
jle
lea
aas
sti
xchg
dec
cmc
sub
cmp
lock
and
lea
icebp
retf
dec
rcl
pop
into
movs
je
or
dec
dec
pop
xchg
xor
out
adc
jmp
sbb
retf
jnp
mov
fwait
std
mov
and
data16
xchg
stos
jmp
mov
imul
push
lahf
aaa
repz
pminsw
adc
or
mov
fisub
stos
stos
push
in
hlt
data16
xchg
xchg
inc
adc
stc
imul
push
mov
dec
add
mov
adc
ficomp
xchg
push
mov
ja
mov
adc
pop
jecxz
loope
xchg
jge
js
or
xchg
inc
test
retf
inc
sub
pop
je
dec
dec
xchg
fstp
sub
xchg
idiv
loop
xchg
mov
mov
je
jne
jecxz
and
xchg
ret
push
lock
scas
adc
pop
push
outs
fdivr
mov
pop
fst
sbb
int3
pop
or
mov
mov
push
in
mov
ja
repz
xchg
dec
cmp
cli
shl
sbb
shl
fucomp
adc
sub
dec
push
adc
popf
sbb
inc
xchg
cmps
pop
pop
dec
not
mov
push
clc
add
je
cmp
fwait
cwde
lock
inc
(bad)
xchg
inc
sub
sar
sar
or
cmp
add
mov
xchg
jmp
and
loop
outs
dec
xor
hlt
and
repnz
out
lahf
shl
xchg
ret
sbb
cmc
push
dec
lahf
xor
pop
add
xchg
(bad)
jg
daa
scas
data16
add
pop
xchg
shl
fsub
pop
xchg
jmp
out
shl
push
xchg
xchg
sbb
xor
fwait
xchg
or
cmp
or
pop
or
dec
jmp
xchg
fincstp
icebp
(bad)
sbb
mov
xchg
call
push
xchg
bswap
mov
push
mov
in
push
aam
mov
sub
sub
into
lock
stos
xchg
push
repnz
sbb
and
mov
inc
loop
or
fstp
add
nop
xor
(bad)
xchg
mov
jb
leave
xchg
bound
or
pop
cmp
cmp
popf
mov
fld
jmp
stc
xlat
xor
cs
xor
xchg
and
and
fimul
xchg
mov
inc
xchg
inc
dec
lahf
cdq
sbb
data16
pop
adc
fadd
clc
and
jne
loopne
jb
arpl
call
scas
fdiv
mov
add
xchg
in
cmp
loop
xor
sbb
jb
add
jg
rol
hlt
nop
sub
pop
dec
dec
cs
test
dec
into
mov
add
xchg
xchg
mov
jp
xor
in
retf
dec
shl
mov
mov
xchg
mov
cli
xchg
nop
sbb
std
emms
xchg
inc
rol
inc
hlt
lods
aad
xchg
pop
outs
add
fdivr
in
cmovns
(bad)
push
fwait
dec
imul
mov
sub
jb
fldcw
mov
adc
xchg
shr
adc
xchg
js
xor
push
jp
outs
xchg
bound
sar
xchg
push
jae
sbb
std
add
jl
dec
bound
aam
adc
retf
mul
out
pusha
ins
call
rcl
mov
pop
adc
pusha
add
jbe
adc
inc
ret
push
into
xchg
add
mov
xchg
ins
mov
pop
add
mov
pop
inc
mov
das
jae
lahf
and
xor
add
dec
jecxz
(bad)
jne
push
popf
(bad)
fidivr
add
iret
and
int
add
movs
or
dec
stos
rcl
retf
mov
out
aad
into
inc
push
cwde
xchg
adc
dec
pop
xchg
enter
mov
adc
lock
mov
adc
rcl
cwde
xchg
scas
sub
mov
cmp
xor
cmp
xchg
mov
ins
adc
repnz
stos
jb
mov
inc
mov
arpl
scas
xchg
mov
and
clc
xchg
call
cmp
xchg
jbe
(bad)
(bad)
dec
shl
cmp
pop
outs
jo
je
mov
xchg
lds
xor
mov
xchg
adc
cs
ds
push
xchg
cmp
xor
mov
inc
or
adc
aad
test
inc
mov
xor
pop
in
jl
mov
loopne
cdq
push
mov
adc
jg
mov
iret
sar
les
pop
pop
jb
mov
imul
xchg
popf
fld
shr
retf
and
out
or
out
fwait
mov
mov
shl
sub
pushf
fisubr
ds
out
cmp
sbb
in
xchg
inc
in
mov
mov
or
cmps
and
stc
lock
es
sub
dec
xchg
cpuid
mov
adc
jae
jge
xchg
inc
xchg
(bad)
fdecstp
scas
fcomp
jne
ins
les
xchg
push
mov
jb
cmp
adc
sub
push
jns
dec
ror
(bad)
(bad)
xor
pop
les
push
xchg
fisub
retf
stc
sti
fst
sbb
push
mov
xchg
cmps
(bad)
add
popf
int3
mov
adc
mov
outs
scas
ror
mov
jns
push
scas
inc
les
adc
add
outs
xchg
jmp
test
ja
add
sub
inc
mov
and
aaa
out
cmp
xchg
push
xchg
addr16
aad
push
xchg
scas
in
pop
mov
sbb
outs
addr16
ja
lock
pop
lods
cmps
sub
xchg
test
test
mov
fmul
mov
push
sub
xchg
or
xchg
push
mov
sbb
xchg
dec
int
pop
mov
arpl
mov
jns
call
and
cmp
cli
xor
repnz
hlt
je
inc
cdq
movs
xor
sub
ss
outs
shl
test
xchg
add
add
cmps
(bad)
or
jno
mov
cmp
(bad)
xchg
mov
fucomp
xchg
xchg
and
scas
or
mov
xchg
leave
xchg
lods
je
ficomp
fistp
out
add
mov
sub
inc
out
sbb
cmovs
movs
xchg
pop
dec
daa
repnz
pop
mov
mov
add
mov
adc
arpl
add
or
add
out
push
sub
mov
mov
mov
xchg
pusha
data16
arpl
movs
iret
push
in
xchg
out
ror
adc
xor
jo
mov
fyl2xp1
xchg
sar
(bad)
loop
push
push
xchg
inc
hlt
pop
mov
sbb
xchg
or
jbe
shl
repnz
xchg
inc
jle
mov
jl
shl
xchg
je
sub
xchg
fistp
jle
xchg
sub
shl
xchg
push
xchg
add
rcl
cwde
jns
repnz
sbb
fmul
out
jecxz
outs
sub
jbe
cwde
cdq
dec
add
movs
dec
jmp
fcomp
pop
loopne
xchg
cmp
sub
aaa
mov
mov
je
pop
enter
sub
xchg
xor
pop
mov
and
xchg
mov
mov
pop
inc
mov
xchg
sahf
jbe
sbb
xchg
dec
adc
mov
sti
xchg
dec
mov
xchg
test
mov
adc
sbb
and
gs
and
pop
mov
fst
adc
cli
pop
fs
xchg
or
xchg
lea
ins
pop
pop
jle
repz
out
dec
jno
(bad)
je
cmp
inc
dec
mov
xchg
aam
bound
pop
xchg
stos
push
sbb
shl
push
xchg
adc
fist
sbb
(bad)
adc
js
dec
pop
stos
mov
jl
into
fcomp
lock
cmp
pop
xchg
sbb
rcl
shl
pop
xor
ret
sub
setns
(bad)
push
mov
dec
xchg
cmp
pop
sub
ret
mov
or
adc
mov
xchg
push
mov
mov
add
xchg
sub
sahf
xchg
mov
cmp
cli
leave
sbb
inc
cwde
dec
push
cwde
pop
add
xchg
lods
pop
shr
(bad)
sti
into
mov
fs
iret
nop
add
jmp
ins
push
inc
in
xchg
or
rol
push
stos
push
jbe
mov
jp
mov
stc
xchg
inc
push
fstp
js
jl
xor
mov
enter
jo
aam
call
xchg
ja
inc
inc
cmp
ins
sub
into
jle
aad
dec
(bad)
mov
ins
add
enter
xchg
add
push
loop
fwait
icebp
ins
add
mov
mov
mov
xchg
xor
xchg
sub
and
repz
fs
push
movs
xchg
lods
je
xchg
pop
jns
movs
and
les
adc
retf
sahf
addr16
and
mov
int3
cmp
jmp
xchg
mov
dec
jl
nop
data16
aam
scas
adc
dec
xchg
jno
popf
push
fs
mov
or
mov
xchg
inc
aad
or
mov
fdivr
jae
(bad)
ss
mov
lods
test
(bad)
fucomi
xchg
and
scas
lds
mov
out
cmps
xchg
cmp
or
sbb
mov
scas
fdivr
mov
mov
inc
loope
sub
adc
lahf
dec
adc
mul
push
xchg
je
stos
cmp
xchg
les
shr
xchg
leave
cli
push
mov
jae
mov
aad
fidiv
aam
fst
add
add
sbb
int3
pop
mov
xchg
fwait
test
cmp
mov
sar
int
cmp
aad
add
xchg
inc
xchg
inc
mov
retf
xlat
rcl
dec
xchg
jb
int3
call
mov
jecxz
adc
sub
mov
sahf
in
inc
xchg
xchg
sbb
add
les
mov
mov
inc
mov
mov
mov
xor
jp
add
fwait
les
clc
pop
movs
dec
xchg
or
int3
ins
sub
out
adc
or
mov
cmp
xchg
lods
test
push
test
mov
jl
ins
pop
xchg
pusha
ss
sbb
xchg
ds
mov
inc
xchg
das
push
dec
ret
clc
lahf
jo
stos
popa
cmps
loope
pop
pop
pop
mov
mov
fist
pop
pop
dec
xchg
push
pop
outs
ret
popa
dec
gs
xchg
adc
mov
daa
xchg
push
stc
push
mov
add
js
repnz
lods
call
mov
fwait
sti
aad
je
adc
jbe
fbstp
popa
scas
xor
mov
xchg
cld
add
and
adc
je
out
cs
mov
fwait
imul
mov
jle
mov
mov
sub
sbb
mov
les
shl
or
xchg
xor
xlat
sub
movs
les
xchg
cli
popa
cld
loope
mov
pop
xchg
inc
jne
ror
adc
ret
(bad)
xor
aaa
pop
xchg
test
mov
xchg
lods
out
mov
pop
xchg
fbld
scas
or
add
ins
aam
inc
int3
std
int3
xchg
or
fistp
fwait
xchg
test
xor
dec
xchg
mov
pop
sub
mov
jbe
xchg
mov
push
mov
xchg
mov
scas
bound
int
jge
pop
xchg
mov
xchg
push
sbb
pushf
mov
mov
xchg
inc
xchg
loope
ss
popf
and
xchg
jnp
pop
aas
jne
dec
jbe
mov
in
push
into
xchg
mov
repnz
mov
popf
cmp
push
fwait
add
xchg
fbld
scas
xchg
add
call
adc
mov
cmp
cmps
int
adc
gs
mov
rcr
retf
pop
inc
push
mov
mov
xchg
scas
jle
add
cmc
mov
inc
sbb
inc
test
repz
jle
xor
and
inc
dec
lds
out
dec
or
push
cmps
and
stc
dec
mov
xchg
inc
(bad)
push
cmp
add
xchg
xchg
pop
dec
xchg
and
test
fstp
cmp
cmps
push
pop
jne
dec
jp
dec
mov
in
xchg
ret
cmp
mov
xchg
add
push
jno
push
cmp
jmp
int
aaa
xchg
(bad)
sbb
cdq
inc
xchg
xor
arpl
mov
adc
ins
mov
test
in
repnz
(bad)
dec
sub
addr16
mul
mov
jle
fnstsw
xchg
xchg
dec
adc
xlat
xchg
add
fdivr
xchg
sub
retf
jbe
jno
cdq
fwait
and
and
pop
adc
loope
jb
sti
rcl
inc
xchg
out
pop
gs
jnp
jge
in
dec
inc
sub
or
call
popa
cmp
daa
stos
fidivr
mov
icebp
sub
pusha
mov
fwait
dec
arpl
rcl
xchg
in
or
enter
(bad)
js
or
inc
fcom
fldenv
xchg
ins
shl
and
lahf
mov
daa
es
mul
xchg
mov
movs
add
xchg
pop
cdq
inc
mov
add
xor
push
stos
xchg
ror
adc
popf
xchg
test
mov
sbb
adc
std
leave
or
inc
xchg
retf
pop
cld
xor
scas
xchg
jne
das
mov
xchg
cwde
sub
pusha
mov
repz
retf
movs
out
mov
(bad)
xchg
sub
mov
pop
outs
mov
in
frstor
push
xchg
xchg
sbb
or
xchg
data16
(bad)
rcr
inc
pop
ins
mov
(bad)
sahf
les
mov
dec
or
or
mov
(bad)
outs
dec
adc
xchg
pop
add
pop
movs
adc
xchg
int
mov
xchg
shl
ds
jmp
and
dec
jb
sub
fcom
and
sbb
ins
inc
dec
adc
das
pop
rol
lahf
add
or
mov
xchg
retf
pushf
add
xchg
cdq
ror
push
hlt
fcomp
xor
mov
cmp
movs
cld
out
sub
and
xchg
fadd
mov
je
rcr
ficomp
jmp
xchg
out
ret
jb
test
and
push
mov
cmp
ja
xchg
jp
lods
lea
mov
xchg
or
js
call
mov
push
push
add
pushf
repnz
jbe
int
jns
jmp
xchg
jmp
add
loopne
fcom
pop
stc
mov
in
test
fisttp
sbb
or
ficom
pop
icebp
and
cli
test
sub
out
dec
dec
xchg
lods
ret
adc
pop
xchg
mov
xlat
ret
jns
adc
ret
ins
in
das
test
int
aad
xchg
iret
pushf
clc
adc
cmc
aam
push
pusha
pop
dec
dec
jl
icebp
out
int3
mov
hlt
outs
mov
fld
int
jmp
mov
add
jp
int3
outs
xor
mov
xchg
cmp
pop
dec
popf
jo
cmps
cmp
adc
dec
bound
sub
sbb
jl
aam
sbb
xchg
pop
stos
mov
loop
adc
adc
cmc
call
imul
sar
outs
mov
push
adc
hlt
adc
inc
or
ret
and
pop
repnz
xchg
or
fwait
cmps
add
mov
das
or
(bad)
pushf
mov
int3
xchg
mov
jmp
xor
xchg
ins
loopne
sbb
lds
pop
jp
push
xchg
or
sbb
xchg
push
loop
rcl
repz
cmp
sbb
inc
sub
xchg
mov
mov
xchg
dec
std
inc
push
sbb
xchg
sub
retf
xchg
test
or
push
pop
dec
sar
int
pop
xchg
mov
jo
int
sbb
fimul
mov
mov
or
mov
ror
mov
xor
mov
sahf
pop
mov
cmps
xchg
mov
sub
scas
xchg
aas
lods
call
in
out
test
call
int3
inc
sub
loope
cld
hlt
push
xchg
xchg
xlat
add
cmp
or
sar
cmps
dec
dec
ja
clc
xchg
xchg
loope
movs
imul
adc
repz
jp
pop
(bad)
jecxz
sub
stos
or
adc
xchg
xchg
ds
dec
mov
xchg
xchg
mov
xor
sub
push
lahf
pusha
add
xchg
js
mov
jbe
pop
outs
call
mov
int
pop
fcomp
pop
je
jp
xchg
xchg
je
pushf
mov
js
or
sbb
and
adc
cmp
sahf
lods
inc
repz
loope
lock
ficom
adc
dec
and
mov
push
sub
sub
xchg
inc
pop
out
daa
data16
dec
call
push
cmp
mov
cld
loop
sub
or
sti
(bad)
pushf
or
xlat
sbb
jb
xchg
pop
into
ficom
pop
dec
and
sar
dec
pop
mov
push
pop
in
sub
sub
test
mov
leave
adc
in
push
int
mov
mov
fld
stc
js
je
cmp
lods
hlt
cdq
mov
clc
mov
sub
mov
adc
or
movs
mov
push
xchg
je
cli
ficom
adc
aas
mov
les
dec
xchg
ffreep
cmp
jg
jnp
xchg
push
adc
xchg
pop
daa
scas
hlt
xor
adc
xchg
mov
jb
adc
rcr
rcr
xchg
push
inc
adc
push
mov
dec
mov
pushf
retf
fisttp
gs
in
add
push
inc
ret
push
mov
cwde
pop
mov
jp
popf
sbb
cli
(bad)
lahf
retf
inc
out
pop
pop
pop
cmp
and
clc
adc
sbb
dec
adc
imul
or
pop
jp
punpckhbw
fwait
(bad)
(bad)
and
cmp
call
add
cmp
dec
xchg
dec
or
and
ret
or
shr
cmp
fdivr
add
mov
not
ret
lods
adc
mov
adc
test
and
mov
dec
les
xchg
ds
mov
stc
jge
mov
add
test
xchg
loope
xor
sbb
push
push
repnz
test
stos
xor
out
xchg
stos
mov
jl
xchg
push
int3
or
jmp
xchg
jmp
mov
pop
push
rcl
retf
xchg
dec
das
pop
hlt
out
jae
fwait
xor
mov
movs
outs
xchg
cli
mov
inc
push
mov
or
stos
xchg
adc
pop
push
ret
add
out
int
xchg
loopne
jb
mov
xchg
or
push
pop
adc
inc
xchg
mov
ss
ret
jmp
in
stos
sete
or
or
jp
ins
push
sbb
jne
push
adc
repz
mov
cmp
dec
xchg
dec
(bad)
test
mov
leave
mov
cdq
frstor
gs
mov
lods
ins
test
xchg
xchg
in
add
mov
cmp
cmc
lock
jmp
les
ss
mov
ins
xchg
push
mov
xchg
jecxz
mov
popf
inc
push
or
jecxz
in
adc
jmp
dec
mov
movs
fwait
popa
div
push
or
lds
(bad)
xor
push
cs
push
xchg
stos
sbb
aad
adc
shl
scas
or
dec
pushf
xchg
mov
hlt
push
nop
arpl
test
xchg
jmp
loop
hlt
xor
les
jae
setne
mov
push
movs
rol
ds
mov
mov
sbb
jo
xchg
push
dec
call
mov
test
cmps
pop
scas
repz
jl
je
js
add
mov
jbe
xchg
test
dec
fist
xor
sbb
out
jo
mov
push
pop
imul
fwait
cmp
mov
push
fwait
sub
push
or
xchg
retf
xor
jb
ja
xchg
loopne
ds
mov
stc
out
pop
xchg
push
cmp
sbb
mov
and
int3
mov
dec
push
mov
xchg
out
cwde
repnz
xchg
mov
adc
(bad)
or
mov
adc
rcr
push
retf
mov
jnp
add
xchg
aas
or
inc
arpl
push
inc
cmp
xchg
cwde
loop
push
mov
cmp
pop
(bad)
ficom
fnstenv
or
xchg
gs
outs
inc
sbb
imul
pop
loope
inc
mov
rol
inc
dec
mov
aad
mov
inc
aas
scas
xchg
xchg
lahf
fstp
dec
ss
ja
inc
pop
mov
lds
inc
cmc
sbb
jno
cmp
mov
push
xchg
cwde
pop
jbe
jmp
test
mov
xor
test
mov
test
mov
ins
or
dec
mov
mov
adc
aaa
push
xchg
js
sbb
lahf
mov
mov
and
popf
pmuludq
cmp
ins
retf
loop
xchg
and
inc
dec
je
xchg
outs
jnp
add
scas
pop
inc
xchg
sbb
push
mov
sbb
imul
mov
call
jmp
dec
popa
shr
cmp
adc
sub
xchg
mov
sub
mov
xchg
daa
dec
mov
xchg
mov
mov
cmp
out
adc
mov
ficom
xchg
mov
test
stos
loop
fs
mov
jp
xchg
jle
xchg
jne
push
(bad)
repnz
push
jl
push
sbb
cmc
push
int
pop
aam
icebp
rol
xchg
cmp
sbb
xchg
sub
xchg
jnp
pop
adc
inc
fs
clc
add
ret
xor
mov
adc
add
(bad)
jo
or
shl
add
xchg
cmc
jnp
in
call
mov
xchg
cmp
sahf
fild
retf
stos
data16
lods
add
push
stos
mov
push
xlat
cmp
xchg
ret
pop
imul
xchg
nop
mov
in
out
xchg
xchg
push
retf
xor
jbe
xchg
int
fld
popf
inc
dec
leave
rcl
shl
popf
scas
cmp
dec
adc
in
add
sbb
mov
into
xchg
and
cmp
shl
mov
daa
xchg
or
or
jge
fwait
punpcklwd
call
aas
pusha
xor
dec
mov
xchg
dec
xor
mov
and
xor
xchg
pop
sbb
clc
(bad)
je
pop
pop
xchg
jmp
imul
loop
sbb
sti
out
adc
cmc
xchg
imul
call
or
std
xchg
aaa
fs
inc
repz
pop
mov
cmp
mov
inc
aam
pusha
movs
and
xchg
stc
inc
ins
xor
jge
mov
jo
mov
cmp
xchg
fsubr
adc
xchg
push
cmp
outs
das
push
loopne
pop
retf
dec
fwait
scas
pop
fwait
xchg
pop
je
push
js
popf
fsub
adc
xchg
xchg
push
outs
out
xchg
clc
enter
push
leave
cmp
arpl
xchg
sbb
and
bound
je
mov
les
push
xchg
fimul
outs
es
ja
push
xchg
adc
push
mov
pop
int3
or
xor
lds
jge
xchg
outs
test
call
cmp
hlt
mov
retf
js
or
or
and
outs
shl
outs
call
mov
popf
sub
stos
arpl
jmp
push
fdivr
loopne
cmc
imul
mov
pop
sahf
or
mov
gs
lods
mov
jge
push
loope
sti
fistp
jo
test
imul
push
out
sub
xchg
push
mov
cmp
jbe
xor
mov
mov
adc
fdivr
bound
ins
sbb
stos
and
push
xchg
loop
cwde
xor
mov
or
adc
out
leave
mov
xor
sub
mov
arpl
mov
shl
(bad)
mov
adc
std
jo
rcl
in
adc
xchg
mov
jp
cmp
movs
inc
lea
adc
jge
daa
ret
lahf
iret
in
out
(bad)
stc
mov
fsubr
cmp
cld
xchg
mov
and
popf
add
adc
fisttp
xchg
imul
dec
pop
pop
(bad)
xchg
mov
fdivr
in
xchg
mov
add
out
aaa
nop
mov
sbb
xchg
push
cmp
in
cld
sar
int3
jbe
(bad)
in
movs
mov
pop
xchg
sahf
lock
leave
fwait
stos
call
rcr
xchg
cmp
fstp
cli
(bad)
pop
cmp
sbb
fadd
pop
aad
hlt
or
loop
cmp
jmp
jecxz
jae
fdivrp
xchg
push
push
sti
dec
icebp
sbb
xchg
jo
inc
push
cdq
sub
sub
push
ins
xchg
loop
add
mov
and
mov
or
cmps
je
(bad)
repz
and
fwait
in
lahf
sar
iret
cmp
pop
mov
push
sti
enter
xchg
jb
lea
mov
add
push
inc
pop
and
dec
xchg
cmp
shl
fcmove
xchg
f2xm1
lods
dec
push
xor
fstp
push
in
movs
xchg
jmp
mov
imul
push
iret
addr16
popa
inc
lahf
test
arpl
xchg
add
shl
mov
icebp
(bad)
js
pop
xchg
test
inc
inc
ins
xchg
xlat
movs
sbb
xchg
xchg
cli
cmps
jbe
dec
and
xor
js
xchg
and
dec
cwde
mov
and
xchg
add
fistp
xchg
push
out
mov
fs
fst
jecxz
movs
ror
outs
xchg
repz
int
sar
adc
xor
fwait
xchg
out
lock
inc
mov
cwde
push
and
mov
loopne
popa
das
sti
fwait
in
and
push
cmps
inc
sub
sub
lods
add
test
mov
pop
pop
and
fs
or
sub
mov
inc
dec
rcl
mov
jmp
and
test
xchg
stc
hlt
push
mov
call
stos
push
add
fbld
aam
push
dec
mov
ret
je
mov
cs
push
imul
(bad)
cmps
add
adc
jns
mov
push
push
hlt
lods
inc
push
xchg
movs
inc
(bad)
cdq
rol
ficom
lock
ja
xor
sahf
push
daa
xchg
cli
lds
(bad)
movs
popa
fsubr
or
inc
rcl
push
int
xchg
mov
packssdw
and
cmps
pusha
aas
ret
stc
dec
mov
add
push
outs
stos
ror
xchg
inc
fdivr
aam
fld
jnp
jge
mov
xchg
sub
or
test
push
or
xor
xchg
pop
in
pop
cdq
cmp
jecxz
out
adc
ffreep
sbb
mov
int
pop
xchg
inc
out
outs
inc
adc
xchg
scas
push
and
imul
push
pop
or
inc
xchg
add
mov
mov
push
pop
sub
loopne
push
xchg
sbb
mov
cmc
ret
mov
outs
inc
nop
int3
xchg
mov
sbb
mov
xchg
movs
mov
das
sub
dec
xchg
add
lahf
inc
or
daa
xchg
dec
mov
arpl
fdivr
jmp
dec
add
mov
sahf
call
sbb
mov
stos
xchg
mov
pop
adc
data16
mov
leave
fsub
push
pop
adc
push
in
fisubr
mov
enter
mov
xchg
inc
mov
out
cs
mov
hlt
imul
xchg
clc
and
sub
(bad)
ror
inc
dec
and
xor
push
xchg
fwait
pop
mov
inc
sbb
adc
pop
sbb
xchg
scas
out
xchg
and
xchg
lods
and
or
xchg
xchg
(bad)
imul
cmc
sti
jp
xor
jmp
push
dec
js
cmps
cmp
xchg
lahf
dec
push
sub
cdq
xchg
imul
fwait
mov
je
pusha
stos
add
es
sub
ds
(bad)
cmp
ins
pop
sbb
in
mov
add
popa
cwde
jmp
je
jle
ja
in
mov
add
popf
stos
repz
ffreep
ds
jl
xchg
sahf
pop
rol
sub
xchg
mov
mov
add
dec
xlat
shl
mov
je
mov
jge
loop
adc
xchg
sub
std
call
push
out
scas
mov
ret
std
ins
push
inc
mov
add
retf
xchg
ss
leave
or
xor
pusha
cld
cli
pop
rcl
xchg
bound
add
and
xchg
cwde
xchg
fstp
call
dec
xor
stos
pop
ret
pop
xchg
push
punpckhdq
and
nop
xchg
sti
mov
add
sub
(bad)
push
ror
and
popf
lea
stos
xchg
dec
and
xchg
dec
pop
std
pop
sub
sub
enter
dec
(bad)
add
ins
adc
push
out
ffree
fcomp
cdq
xchg
movs
add
mov
dec
loop
pusha
scas
in
cmp
dec
mov
jmp
nop
jno
push
ficom
mov
pop
mov
inc
bound
mov
mov
rol
push
xchg
repnz
cmp
jmp
or
dec
sbb
stos
movs
mov
push
es
sbb
not
nop
pop
fwait
(bad)
test
adc
fwait
mov
xchg
push
lea
fmulp
fst
pop
xchg
subps
repz
clc
in
adc
xchg
sub
stos
and
push
dec
mov
xchg
push
inc
pop
xor
hlt
ret
rcl
pop
icebp
pushf
pop
mov
stc
xchg
pusha
jns
pop
scas
xchg
(bad)
xchg
aad
sub
popa
ins
add
xchg
or
sub
(bad)
(bad)
xchg
inc
xor
pop
(bad)
jl
adc
aas
sub
sbb
sub
js
sub
jp
inc
xchg
ret
jge
ror
sbb
mov
adc
outs
in
pop
xchg
mov
lods
stc
mov
imul
mov
xchg
and
xor
(bad)
fcom
sbb
dec
data16
push
mul
and
jmp
pop
lods
push
gs
aas
scas
xchg
clc
jg
outs
mov
out
xor
idiv
iret
inc
shr
xchg
jl
xor
leave
aam
sbb
mov
cmp
mul
imul
fst
aam
dec
xchg
dec
add
mov
mov
pop
inc
xchg
bound
xchg
out
int3
out
sub
xchg
call
push
mov
imul
aam
adc
push
jmp
sti
xchg
fwait
push
fdivr
loopne
inc
popa
xchg
int3
movs
mov
mov
or
xchg
add
sub
xchg
imul
fs
or
and
enter
mov
push
mov
adc
jmp
(bad)
(bad)
add
sahf
pop
mov
jne
cmc
es
ss
adc
sub
xor
ret
xchg
inc
push
or
xor
xchg
jne
pop
dec
mov
shl
push
or
addr16
mov
jnp
push
and
push
call
icebp
sbb
outs
xchg
mov
xchg
jae
test
sbb
mov
fwait
xchg
cmc
xor
jno
je
ror
xor
retf
mov
dec
(bad)
fiadd
inc
rol
popf
add
xchg
aam
pop
mov
stc
mov
mov
aam
adc
push
popa
push
xchg
jns
fld
repnz
dec
sub
xchg
into
neg
shl
pushf
test
aad
xchg
xchg
pusha
add
test
xchg
into
scas
hlt
mov
out
xchg
mov
pop
dec
mov
nop
movs
xchg
rcl
sahf
in
xor
jmp
fistp
mov
rcl
xchg
dec
push
dec
iret
outs
push
jp
xor
pop
xchg
xchg
lds
cdq
lods
push
arpl
mov
aas
xchg
test
loopne
popa
xchg
sbb
sbb
test
imul
mov
mov
and
xor
xchg
xchg
ret
dec
stc
mov
inc
mov
jbe
xchg
cmp
inc
mov
jae
or
pop
or
pushf
xchg
arpl
mov
or
push
fnstenv
xchg
std
cmps
mov
push
inc
sbb
icebp
mov
sbb
xchg
ficomp
push
xchg
mov
jg
cmp
push
push
mov
nop
sub
movs
(bad)
movs
mov
lock
mov
call
pushf
mov
inc
or
hlt
inc
jmp
xchg
iret
xchg
nop
and
xor
jmp
dec
ja
jl
xor
das
adc
sar
jo
in
dec
pop
mov
xor
xchg
rcr
enter
add
cmp
dec
cwde
mov
inc
mov
adc
aas
cs
iret
push
mov
scas
loopne
mov
je
out
nop
xchg
xchg
call
xor
mov
je
pop
test
xchg
das
mov
pop
aam
mov
xchg
jae
shl
sub
xchg
cmp
sbb
sti
jno
mov
xchg
loop
(bad)
xlat
or
jnp
lods
ret
fcmove
jl
mov
jne
sub
xchg
dec
imul
clc
gs
xchg
mov
mov
xor
adc
xor
arpl
push
mov
jecxz
nop
sbb
xchg
push
cmc
sbb
pop
(bad)
adc
fwait
mov
jns
cli
hlt
sub
mov
adc
ror
cmps
add
lahf
mov
xchg
loope
aad
pop
nop
mov
arpl
xchg
or
mov
aam
test
gs
retf
fnsave
scas
xchg
jbe
mov
in
pop
fnstenv
xchg
lods
mov
lahf
leave
push
imul
xchg
mov
jo
push
jnp
in
ss
in
sbb
xchg
(bad)
xor
lea
mov
in
loop
enter
fwait
and
push
xor
xchg
sub
xchg
js
mov
lahf
xchg
lds
mov
cvtdq2ps
sahf
cmps
xchg
ffree
je
mov
and
fwait
jbe
call
xchg
mov
xchg
mov
and
xchg
jbe
aas
ds
mov
scas
xor
in
shl
mov
fldcw
addr16
mov
cmp
xor
jmp
pop
nop
inc
mov
hlt
arpl
fst
mov
add
repnz
loope
jg
add
or
cmc
ins
push
and
scas
xchg
xchg
out
mov
not
pop
dec
xor
inc
rcr
in
cmp
lea
adc
jo
sub
mov
and
and
in
cmc
adc
mov
test
pusha
jb
rcl
iret
mov
jae
xor
je
add
xchg
pop
xchg
sbb
fwait
xchg
add
fdivp
(bad)
ins
shl
dec
nop
xchg
bound
jne
pop
lds
mov
sub
add
xlat
aas
push
pop
and
repnz
iret
hlt
cmc
xchg
outs
js
sbb
cli
cmp
mov
xlat
pop
or
(bad)
test
lock
or
mov
pop
xchg
and
push
xchg
lods
xchg
sbb
dec
out
xor
stc
or
adc
fisub
gs
mov
ss
lahf
ret
adc
je
push
call
push
xchg
xlat
stos
xchg
cmps
sbb
mov
xchg
(bad)
cwde
sbb
sahf
test
not
scas
jne
jbe
movs
mov
xchg
shl
sbb
gs
rcr
push
xor
sub
call
cmp
jge
in
mov
xchg
cmp
xor
(bad)
xchg
xchg
enter
cmp
(bad)
xchg
nop
adc
inc
xchg
fisubr
retf
cld
shl
fs
ja
mov
xchg
mov
xchg
stc
mov
in
loopne
js
mov
dec
retf
shl
ss
push
leave
sbb
push
xlat
mov
hlt
sub
add
or
imul
sub
xor
cmp
mov
jge
lea
adc
mov
lods
xchg
pop
adc
sub
lods
in
jne
xlat
fiadd
fist
or
mov
xchg
xchg
ds
sar
cli
jo
inc
je
xchg
mov
mov
mov
xchg
pop
mov
mov
mov
inc
test
sub
imul
mov
loopne
jbe
rcr
add
repz
mov
scas
shld
(bad)
mov
hlt
sbb
cdq
adc
mov
xor
sub
or
mov
cmc
loope
pop
loopne
movs
mov
xchg
repnz
lock
popf
mov
push
les
outs
adc
fcomp
dec
mov
fs
jmp
and
stos
or
jae
dec
mov
adc
adc
fiadd
int3
pop
adc
xchg
mov
dec
aam
add
nop
sub
mov
scas
xchg
mov
loopne
and
jno
fcomp
enter
pop
lods
gs
xchg
fs
push
mov
xchg
xchg
push
aad
mov
add
ja
loope
mov
push
pushf
add
mov
add
mov
das
outs
jo
sbb
add
xor
xchg
push
xchg
ret
movs
jno
push
adc
mov
or
mov
mov
test
xchg
dec
add
scas
xor
mov
xchg
int
push
stos
fnstcw
rcl
repnz
mov
neg
pop
jp
xchg
icebp
pmuludq
adc
jno
mov
mov
stos
sbb
jns
fnstenv
shl
push
in
outs
xchg
call
sub
push
jne
mov
jmp
add
loop
or
sti
aad
int
lock
fiadd
push
stos
pop
adc
xchg
std
mov
xchg
loope
mov
jnp
mov
adc
push
mov
cmp
out
xchg
xchg
sub
(bad)
or
mov
je
mov
nop
mov
xchg
out
bound
pop
xchg
aas
mov
push
mov
mov
xchg
call
imul
mov
add
pop
xlat
mov
fwait
test
pusha
shl
not
push
idiv
xchg
rcl
test
dec
dec
push
xlat
add
out
fmulp
(bad)
adc
adc
js
jp
xchg
mov
push
leave
addr16
int3
cmc
xchg
mov
in
nop
fwait
mov
loop
std
adc
push
pop
je
xor
cmps
jg
pusha
mov
scas
jp
scas
out
mov
xchg
sahf
test
cli
and
popa
xchg
call
loop
xchg
mov
mov
mov
fidivr
call
fmul
aad
sbb
sub
lods
fst
dec
sub
xchg
jne
and
xlat
and
mov
lock
rol
jns
ins
leave
inc
aas
xchg
icebp
mov
push
jecxz
xor
cmp
je
scas
mov
xor
dec
pop
leave
mov
std
loop
inc
cmp
xchg
je
mov
in
xor
lods
cmp
nop
ins
mov
cmp
push
repz
xlat
into
inc
ror
xchg
inc
cld
xchg
xor
mov
popf
lods
ficomp
mov
jb
push
push
out
mov
retf
ins
inc
pop
xchg
lds
and
sbb
je
aas
mov
xchg
xchg
inc
mov
repz
xchg
int3
(bad)
jae
repnz
pop
gs
jl
mov
push
ins
xchg
aas
mov
adc
test
ret
ss
ja
and
xchg
mov
icebp
loopne
cdq
popf
gs
and
xlat
cdq
call
sahf
sub
or
outs
xor
push
cmps
mov
mov
inc
fld
mov
xchg
push
xchg
neg
xchg
or
repz
fidivr
cmp
jl
shr
je
ja
cmp
xor
jmp
aam
pop
push
pop
xlat
outs
ins
jmp
inc
adc
pop
mov
nop
(bad)
or
push
adc
ins
add
xchg
mov
push
daa
xchg
push
movs
mov
dec
xchg
fnstcw
and
add
push
push
cmp
stos
mov
add
adc
pmullw
adc
movs
loope
dec
or
mov
xchg
cmp
mov
fld
mov
adc
jle
cmps
xor
aam
int3
xchg
mov
mov
dec
xchg
mov
fadd
inc
hlt
in
cdq
mov
inc
xchg
popf
out
movs
mov
xchg
dec
fsub
mov
sub
popa
ror
pop
cmp
dec
xchg
cmp
inc
gs
clc
shr
jnp
scas
and
adc
in
call
ret
mov
xchg
aam
sub
or
loopne
rcl
sub
xor
rcr
xchg
test
xchg
(bad)
popf
lods
xchg
rcl
fstp
mov
arpl
fadd
cs
(bad)
stc
adc
or
adc
bound
push
cmp
cmps
ins
test
js
mov
mov
aam
mov
dec
lock
mov
jo
pop
add
pushf
push
mov
xchg
pop
jmp
(bad)
jl
adc
jg
or
jbe
push
ret
inc
pop
dec
cmps
fiadd
xchg
push
sub
xchg
outs
mov
push
hlt
outs
fstp
retf
jnp
xchg
sub
hlt
test
icebp
pop
(bad)
jecxz
pop
shl
sbb
or
mov
jns
in
inc
sbb
xchg
xchg
popf
jecxz
shr
mov
gs
mov
mov
xchg
push
jge
or
xchg
retf
rcl
adc
fwait
inc
popa
jmp
stc
xor
and
rol
jmp
xchg
sub
mov
mov
mov
xlat
jge
in
jbe
push
pop
xchg
int3
xchg
sbb
rcl
clc
aam
out
jmp
cmp
xchg
les
dec
jnp
mov
cmp
add
xor
inc
mov
arpl
or
jo
mov
cli
or
mov
popa
xchg
enter
not
jl
xchg
sbb
ins
sub
mov
dec
push
je
pop
not
jae
pop
shr
pop
push
cli
or
pop
xor
cmp
xchg
cmp
xchg
pop
jg
(bad)
cmp
jb
mov
cmps
popf
push
mov
dec
(bad)
xchg
xchg
mov
ficomp
dec
div
jmp
adc
out
xchg
jl
mov
mov
add
inc
xchg
es
retf
fcmovb
imul
inc
adc
mov
mov
xchg
sbb
mov
stc
fmul
fstp
mov
cmp
les
mov
sbb
int
inc
test
mov
push
arpl
inc
leave
retf
sub
pop
je
pop
push
pop
adc
and
dec
xchg
loope
sub
xchg
sbb
mov
neg
fst
cld
out
push
or
xchg
js
push
mov
fs
mov
shr
aam
push
shl
loope
xchg
lds
dec
adc
cli
push
fcom
lods
(bad)
adc
xlat
mov
sbb
dec
jecxz
adc
imul
jmp
rol
mov
or
mov
sti
(bad)
mov
sub
jge
mov
xchg
sub
sbb
and
push
outs
xchg
or
jbe
(bad)
dec
xchg
mov
xor
push
js
xchg
push
sbb
out
pop
inc
lock
aam
fimul
pop
fst
xchg
dec
std
cld
or
xchg
sti
xchg
jno
and
inc
arpl
xchg
shr
(bad)
repz
dec
shr
xchg
mov
jb
outs
and
int
fdivr
xor
pop
loop
cmp
jae
adc
and
xchg
(bad)
mov
(bad)
mov
add
mov
jne
adc
push
mov
imul
inc
mov
xor
push
xor
das
xchg
loopne
sbb
inc
mov
and
stos
inc
jmp
loopne
xchg
xchg
cmp
push
mov
pusha
mov
push
mov
lahf
or
inc
stos
xchg
inc
and
ret
mov
dec
push
mov
xchg
push
or
hlt
jl
or
adc
mov
mov
enter
xor
idiv
popa
xchg
pop
adc
cmp
fs
lock
int3
hlt
call
xchg
ret
pop
add
mov
mov
mov
pop
test
cmp
mov
xchg
daa
mov
arpl
sbb
loopne
idiv
mov
push
xor
xchg
cs
fistp
stos
mov
cmp
hlt
or
adc
pop
movs
lahf
cdq
clc
test
jge
cmp
xchg
dec
fwait
jg
out
mov
mov
cmps
int
and
mov
xchg
mov
adc
fs
push
xchg
in
jbe
pop
mov
in
sub
mov
call
adc
shl
test
xchg
push
lods
fcomip
pop
xchg
lea
add
lods
jl
fist
mov
cmp
mov
adc
int
movs
pop
mov
xor
pop
pop
jp
or
lsl
mov
xchg
mov
(bad)
movs
xchg
aad
adc
pop
mov
sbb
jne
jle
adc
mov
sub
xor
fdivr
and
jns
pop
stc
vpshlb
push
dec
or
sbb
mov
cs
jp
pop
mov
dec
mov
mov
psrlw
xor
(bad)
fwait
jle
mov
mov
jge
je
sbb
sahf
ins
inc
aas
xchg
mov
pop
imul
pop
iret
push
test
fwait
ret
mov
xor
inc
ja
fs
cld
in
iret
fld
test
pop
and
ja
sahf
aaa
cmp
xchg
inc
and
in
xchg
and
lods
mov
std
adc
sub
mov
sbb
fadd
cmp
mov
xor
adc
aaa
mov
ret
rcr
push
jbe
mov
jnp
ret
dec
add
xchg
fs
repz
pop
loop
jle
cmp
mov
cli
aas
jb
mov
mov
je
or
es
cmp
jge
daa
mov
adc
mov
jbe
stos
or
pusha
inc
dec
leave
xchg
outs
push
in
adc
ins
xor
xchg
xchg
jmp
jecxz
call
jno
ja
push
mov
push
dec
ror
pop
hlt
cdq
cmc
mov
test
xor
rcl
dec
mov
xchg
std
rol
rsqrtps
mov
push
xlat
xor
aad
inc
add
pop
les
inc
adc
xchg
retf
dec
pop
xchg
pop
adc
fld
int
stos
(bad)
in
cld
fwait
jecxz
test
clc
mov
(bad)
jmp
dec
mov
xchg
jb
cmp
aas
hlt
mov
mov
aam
ins
jbe
cmp
hlt
sub
xchg
mov
jge
and
fwait
mov
xchg
mov
inc
and
xchg
lea
xchg
rcl
not
cmp
pop
xchg
add
pusha
and
jne
neg
adc
(bad)
push
rcl
dec
xor
test
mov
rcr
mov
sub
xchg
mov
adc
mov
stc
data16
mov
in
arpl
nop
cli
and
pop
ror
add
xchg
out
dec
inc
xor
jo
adc
daa
dec
ins
mov
arpl
aad
sbb
lock
jl
fmul
(bad)
mov
xchg
popw
stc
mov
ins
lahf
pop
imul
dec
jmp
push
mov
addr16
ins
nop
(bad)
mov
les
push
fisttp
fnstenv
test
leave
aas
fs
xor
int3
xchg
pushf
push
jbe
aam
int3
aam
cmp
repz
lods
and
push
imul
xor
je
or
arpl
xchg
mov
mov
adc
pop
dec
jnp
cmp
pop
aad
ror
pop
mov
js
int3
xchg
mov
push
dec
in
pop
ja
fistp
ds
push
dec
push
xchg
je
and
stc
jae
or
xchg
in
jge
mov
xor
rol
test
leave
fld
xor
mov
lea
add
mov
(bad)
pop
xchg
inc
or
test
iret
adc
aam
ins
and
int3
push
sbb
xchg
pushf
cwde
into
sbb
xchg
mov
sub
mov
add
pop
xchg
nop
dec
rcl
jle
sti
ins
mov
ror
mov
or
cld
sub
xchg
xchg
imul
xchg
mov
retf
push
mov
fcomp
xchg
or
rcl
jge
inc
iret
cmc
mov
or
addr16
std
cli
leave
xchg
into
sbb
fst
cmp
adc
adc
pop
sub
xchg
and
xchg
pop
ins
sbb
add
and
out
repz
fild
hlt
push
iret
jno
ficom
lock
xlat
cmps
dec
push
les
mov
mov
(bad)
sub
imul
mov
pop
lea
sub
pop
and
xchg
xchg
dec
jmp
sahf
xchg
out
jbe
sub
inc
sub
daa
inc
xchg
jno
dec
and
xchg
out
out
xor
in
jg
lahf
xor
push
enter
fs
mov
pop
pusha
or
dec
xchg
fwait
loope
push
inc
lds
xchg
js
and
sbb
cdq
mov
fsubrp
inc
dec
push
clc
dec
fsubr
mov
push
(bad)
gs
rcr
push
push
xchg
mov
xor
ret
dec
fwait
mov
add
popf
xchg
sub
dec
pop
test
xchg
movlps
mov
outs
fld
and
scas
adc
jnp
not
int
jo
popf
rol
icebp
add
push
cdq
pop
xchg
out
mov
mov
fdivr
xchg
out
scas
(bad)
add
jp
xchg
es
dec
outs
test
lods
xchg
pop
dec
inc
mov
bnd
adc
sbb
jg
(bad)
std
je
mov
push
pop
mov
sbb
in
xchg
stos
(bad)
rcl
fisub
jne
xchg
scas
adc
cmp
jns
dec
add
fwait
fs
jecxz
push
xchg
jb
outs
dec
add
int
rcl
arpl
rol
ja
fimul
xchg
les
cld
pop
stos
inc
dec
call
adc
sti
jno
pop
pop
xchg
xchg
aas
sbb
stc
mov
xchg
mul
shl
push
arpl
jle
jne
adc
xor
(bad)
(bad)
mov
lahf
sub
inc
aaa
and
cwde
rol
fs
push
sub
in
xchg
cs
dec
adc
repz
adc
mov
xchg
add
popf
sub
movs
test
cmp
xchg
call
pop
out
mov
sbb
add
(bad)
sub
dec
add
xchg
loope
mov
xchg
and
cmp
mov
sub
jns
ja
dec
xchg
dec
cmp
cmps
pop
lea
fs
sar
stc
cmps
sahf
syscall
xchg
pop
mov
inc
js
jmp
nop
jp
call
movs
xchg
and
pusha
inc
(bad)
push
sub
xchg
data16
clc
cwde
mov
enter
mov
inc
xlat
hlt
jge
fwait
pop
xchg
push
pop
je
cmp
pminub
mov
mov
hlt
ror
lea
or
xchg
imul
sub
mov
outs
cmp
push
inc
jb
scas
mov
sbb
stos
neg
les
fwait
fwait
adc
popf
mov
push
cmp
jnp
in
lods
fucomip
scas
jbe
inc
xchg
mov
and
xchg
xchg
es
jno
mov
and
inc
lds
test
pop
xchg
or
cld
aam
rol
nop
popf
and
or
jae
adc
xchg
fsub
retf
inc
mov
je
cmp
add
add
fwait
jns
in
and
stc
xchg
mov
push
sbb
xchg
mov
ja
lods
inc
add
je
rcl
add
mov
aad
in
cmp
mov
lock
outs
add
pop
jb
lds
neg
mov
or
and
mov
adc
repz
and
xor
or
outs
loop
or
out
cmps
lods
call
sbb
cmp
or
lahf
cmps
pop
call
mov
sahf
in
pcmpgtd
cmps
push
xchg
pop
(bad)
in
adc
push
adc
fisubr
jne
mov
add
inc
das
repnz
xchg
(bad)
sahf
xor
test
hlt
aam
aam
loopne
and
jp
push
nop
fist
xchg
mov
test
xchg
push
xchg
mov
xchg
jns
jbe
mov
xchg
xchg
xchg
loopne
push
sbb
xor
xchg
pushf
int
fist
sbb
xchg
(bad)
pop
ja
lods
and
xchg
neg
sbb
xchg
adc
retf
xchg
clc
data16
retf
ficom
inc
dec
xchg
mov
call
ds
mov
and
mov
movs
retf
(bad)
xchg
jg
cmps
pop
xchg
mov
fwait
sbb
inc
ins
xchg
cmp
jns
imul
pop
(bad)
adc
in
mov
xchg
mov
push
push
fwait
cmc
bound
fs
pop
mov
cmp
push
or
cmp
push
clc
xchg
or
xchg
and
xchg
in
lock
in
push
xor
jp
xor
test
aad
out
xchg
idiv
xor
xchg
cmp
call
or
xchg
imul
mov
js
je
xchg
adc
stos
cmps
xchg
jns
pop
cli
sbb
push
xchg
arpl
mov
mov
or
add
lds
iret
movs
mov
xchg
daa
jl
mov
or
enter
adc
xchg
or
retf
adc
pop
call
(bad)
nop
mov
cmp
ja
mov
jmp
leave
mov
call
imul
xor
adc
xchg
aad
std
push
pushfw
ja
xchg
jno
out
adc
popf
out
pop
les
shr
xchg
sahf
push
(bad)
fsubr
repz
out
fisubr
inc
adc
imul
mov
sar
pop
xor
xchg
mov
fild
pop
dec
leave
popf
sti
add
ret
xchg
loope
pop
mov
int
imul
hlt
pop
imul
fcomp
cmp
sar
pop
push
movs
cs
xchg
and
adc
mov
adc
cs
sub
mov
mov
xchg
or
je
xchg
inc
sar
aaa
fwait
mov
lahf
bound
jo
loopne
xchg
aad
cwde
lea
scas
je
inc
int3
pop
and
(bad)
aam
inc
add
fldcw
ret
(bad)
dec
add
punpckldq
pop
push
mov
out
dec
sub
xchg
push
inc
push
adc
xchg
mov
inc
int
or
pushf
(bad)
dec
dec
xchg
call
cmc
int
xchg
stc
icebp
add
xchg
cmps
mov
jg
dec
lea
mov
ins
or
jl
pop
jle
stc
adc
mov
je
mov
pop
sbb
sbb
test
lds
in
inc
and
xchg
or
dec
push
out
mov
scas
mov
in
add
cld
xchg
pop
movs
(bad)
xor
xchg
cli
push
and
cmp
iret
retf
xchg
in
pop
retf
dec
add
mov
cmc
inc
cmp
xchg
jecxz
add
(bad)
fcmovnb
or
xor
popf
xchg
ds
jmp
xor
aam
xchg
mov
sub
and
mov
mov
jmp
add
pusha
xchg
cmp
bndstx
pop
xor
jl
test
sub
test
sub
test
std
divps
xor
aaa
gs
xor
aas
xchg
xchg
mov
sub
mov
lods
int3
je
push
nop
sub
jmp
adc
jp
or
and
test
(bad)
push
mov
jno
xor
outs
push
mov
sbb
xchg
test
in
stc
stos
fwait
adc
xor
cmp
and
icebp
adc
shr
sub
adc
adc
js
xchg
repnz
inc
and
scas
dec
add
xchg
xadd
pop
out
add
xchg
mov
jmp
xlat
jae
or
or
push
mov
jmp
loope
aaa
mov
loopne
(bad)
jbe
xchg
pushf
sub
sbb
push
in
mov
fs
or
fist
call
mov
xchg
xchg
aad
and
loop
stos
xchg
scas
in
jmp
mov
adc
dec
dec
cmp
fwait
jns
test
mov
mov
sub
jmp
cmps
lea
leave
xchg
bnd
sbb
sub
sbb
inc
out
mov
fs
xor
cmc
into
gs
mov
ins
mov
dec
cmp
call
movs
hlt
cld
push
sbb
jmp
xchg
into
lods
xchg
mov
pusha
scas
pop
mov
addr16
sbb
dec
inc
xchg
minps
dec
xchg
mov
js
dec
int3
fidiv
mov
jo
xor
xchg
mov
fst
in
add
repz
add
cwde
push
fwait
pop
pushf
jge
cmps
add
xor
fadd
sub
loopne
add
neg
and
xor
arpl
repz
mov
inc
loope
sbb
stos
push
sub
xchg
or
or
ds
test
adc
jbe
iret
jae
jmp
or
xchg
mov
test
ss
jno
dec
mov
into
mov
inc
mov
mov
mov
in
mov
and
cmps
or
pop
pop
and
xchg
fisttp
outs
gs
or
xchg
jp
jns
out
mov
sbb
fbld
cmp
movs
les
das
and
fisttp
cmp
add
imul
mov
sbb
or
inc
lods
cmp
mov
pop
hlt
sub
xchg
cmp
pop
ror
pop
fcomp
add
inc
in
adc
jl
pop
push
fld
imul
test
aam
xchg
cmp
cmps
mov
hlt
in
jb
into
loopne
inc
adc
aam
xchg
(bad)
mov
adc
(bad)
stos
jnp
shr
xor
std
jbe
jp
inc
shr
test
and
fwait
sbb
inc
retf
std
add
xor
sbb
in
jb
xchg
or
sub
cmp
rol
mov
add
loopne
jmp
cmp
push
mov
sahf
inc
mov
mov
aam
jge
dec
lds
ins
into
adc
cmp
test
adc
retf
loop
cmps
aad
xchg
xchg
xchg
and
pop
cmp
dec
xchg
clc
imul
out
mov
xchg
and
test
shl
mov
call
hlt
jae
prefetchnta
add
shl
(bad)
xchg
in
stc
and
out
xchg
mov
fidivr
stos
adc
adc
xchg
pop
mov
loope
cmc
pop
xchg
sub
es
cwde
mov
mov
adc
mov
add
sar
pop
adc
pusha
adc
scas
mov
xchg
push
clc
adc
xchg
rcl
in
jns
cmp
mov
repnz
xchg
mov
push
mov
dec
inc
push
ds
lds
int
mov
inc
test
cmp
sbb
jno
popf
out
pop
ins
out
sar
and
mov
push
nop
inc
popf
rcl
xchg
bound
xchg
mov
pusha
push
out
(bad)
cmp
mov
mov
loopne
or
in
add
clc
mov
loope
fcom
mov
sub
mov
or
pushf
not
xchg
iret
mov
cmp
shr
sub
and
xor
pop
cs
push
jbe
movs
mov
mov
xchg
shl
(bad)
xchg
ins
cmp
outs
aaa
movs
push
in
arpl
xchg
mov
ins
sbb
push
xchg
lods
sbb
push
mov
ret
or
xchg
dec
and
pop
jg
cmp
add
push
in
popa
add
mov
fcom
sbb
xchg
jecxz
scas
inc
mov
dec
xchg
sub
fst
ror
dec
xchg
idiv
and
push
fcmovu
add
xchg
icebp
stos
aad
mov
cmp
ins
sbb
ja
retf
das
or
mov
loop
sub
pop
fmul
adc
pushf
scas
fs
ins
xchg
and
cmp
repnz
xchg
outs
ss
enter
xchg
adc
lods
movs
and
mov
aam
pop
push
stos
jno
mov
je
ror
adc
and
add
rcl
rcl
sub
fistp
mov
pop
stos
ss
popf
xchg
and
enter
adc
xchg
retf
or
call
pushf
pop
fst
cmp
mov
mov
or
xchg
dec
pushf
add
repnz
xchg
jnp
or
into
cmp
inc
ss
jmp
mov
adc
mov
(bad)
shl
stos
cld
fwait
lods
shl
or
or
pop
push
jns
xchg
je
lahf
lea
jo
push
xchg
jp
add
inc
std
xlat
ss
lea
aad
xor
rol
xchg
rol
mov
gs
xchg
call
popa
fwait
movs
jle
jmp
push
cs
push
xor
icebp
xchg
divps
in
sbb
xchg
cld
test
sahf
xchg
push
lock
or
hlt
fmul
xchg
dec
cmp
(bad)
inc
fwait
es
pop
mov
ror
mov
xchg
scas
xor
mov
imul
outs
fwait
pop
cli
lods
pop
lds
arpl
sete
leavew
jecxz
mov
xchg
inc
add
jo
mov
push
adc
add
into
repnz
mov
idiv
pusha
push
movs
fs
cwde
bound
sbb
loope
mov
cmp
inc
xchg
pop
test
jne
mov
jno
mov
js
iret
cmps
mov
retf
sub
jne
push
xchg
sbb
and
mov
xchg
je
xor
stos
sar
and
inc
adc
ja
xchg
and
ins
xchg
push
call
jmp
mov
and
adc
xchg
pushf
cmp
call
ret
andps
jbe
push
xchg
push
pop
popa
xor
aaa
xor
(bad)
out
inc
adc
mov
jo
clc
adc
int
iret
sub
xchg
push
enter
popa
xchg
xor
das
push
mov
mov
int
daa
fist
leave
push
cmp
cld
mov
sbb
xchg
hlt
shl
mov
xchg
jp
fmul
sahf
mov
cdq
stc
and
adc
xchg
imul
pop
std
inc
rcl
iret
add
or
xchg
scas
int
pop
(bad)
xchg
enter
out
push
aad
xchg
mov
xchg
xchg
in
out
mov
cmp
mov
inc
dec
aam
cwde
push
sub
xchg
(bad)
fnstsw
das
mov
outs
cmp
out
rol
sbb
call
out
mov
jae
fadd
mov
mov
mov
xor
aas
cwde
das
mov
xchg
pop
pop
add
xchg
mov
arpl
push
jbe
jg
push
hlt
sbb
(bad)
lods
mov
loope
stos
xchg
(bad)
jnp
inc
add
fldl2t
jl
xchg
sar
dec
imul
stos
cmp
mov
je
cs
enter
mov
inc
mov
es
xchg
and
xchg
popa
jle
jno
push
cli
and
add
sub
inc
call
shr
dec
xor
test
je
xor
retf
rcr
push
xchg
movs
cmp
fcmovb
xchg
adc
daa
mov
xchg
fcom
mov
xchg
xchg
lds
sub
xor
push
lock
xchg
pop
fcom
or
hlt
push
mov
jecxz
jb
pop
push
rcl
cs
leave
jmp
xchg
fcom
xchg
jge
adc
mov
imul
jmp
pop
dec
push
or
out
aam
mov
sti
sub
jp
sar
clc
retf
push
rcl
xchg
cmp
lahf
call
xchg
shr
jo
sub
pop
popf
rcl
jle
ret
inc
repz
pop
xchg
ds
mov
test
imul
xor
jmp
mov
mov
loope
adc
add
shl
mov
(bad)
fist
xor
pop
pop
sub
adc
xchg
cmp
lea
mov
int3
dec
jle
mov
jne
mov
lods
jmp
jb
mov
popf
push
lds
ins
xchg
(bad)
mov
mov
mov
popa
jmp
jp
test
pop
stos
xor
sub
jge
add
mov
or
dec
mov
xchg
mov
fwait
push
dec
or
enter
test
jl
mov
cmp
hlt
ss
add
xor
push
jb
call
pop
xor
mov
adc
xchg
in
loopne
inc
stos
xchg
inc
lock
or
(bad)
cmp
test
in
pop
xchg
push
outs
and
fist
mov
in
cmc
xchg
repz
daa
retf
add
xchg
loop
je
jmp
push
push
or
xchg
sbb
jmp
xchg
inc
push
or
retf
(bad)
sbb
xchg
pushf
imul
sub
xor
fmul
dec
ds
xchg
or
mov
xchg
xor
cmc
fs
ja
ret
adc
rep
(bad)
fwait
cdq
fwait
or
fs
or
sub
cmp
push
push
test
iret
adc
push
adc
lahf
mov
push
pop
cmp
or
adc
pop
xor
xchg
jb
cs
sbb
je
aad
xchg
std
js
mov
adc
add
les
(bad)
sub
push
pop
jl
mov
xchg
fisub
stc
outs
popf
add
pop
xchg
jge
cmps
cmp
xchg
(bad)
xchg
xchg
dec
dec
xchg
pop
push
sbb
and
mov
pusha
add
dec
xchg
mov
adc
data16
imul
inc
jle
popf
push
outs
test
pushf
pusha
xchg
xchg
push
andnps
xchg
fld
xchg
icebp
das
movs
bound
adc
xchg
mov
jnp
xor
mov
sub
iret
fisttp
movs
xchg
cmp
and
xchg
outs
mov
sbb
xchg
lds
add
xchg
cwde
jl
imul
sub
jb
idiv
mov
inc
call
xlat
jp
mov
and
int
xchg
shl
cmps
mov
fimul
pop
jge
sti
dec
adc
inc
jo
(bad)
ficomp
fucom
pop
aaa
stc
popf
or
xchg
mov
add
int
push
sub
mov
in
xchg
div
es
mov
xchg
jb
sub
push
inc
push
add
xchg
(bad)
pusha
mov
jo
in
fistp
mov
xchg
fs
mov
xchg
out
fcomp
mov
cld
mov
add
add
mov
fwait
stc
jnp
loopne
push
addr16
jae
push
inc
(bad)
or
xchg
pop
in
adc
xchg
test
inc
rsqrtps
xchg
dec
mov
and
sub
adc
jle
adc
xchg
adc
jae
jge
and
and
test
xchg
mov
pop
popf
xchg
xchg
out
or
xlat
out
push
aad
xchg
in
sub
xchg
add
xchg
adc
int
outs
nop
aam
cld
or
and
inc
lods
xor
xchg
inc
mov
and
mov
push
in
dec
int3
scas
sbb
adc
cmc
and
inc
xor
pusha
rcr
outs
lock
xchg
xor
movs
test
pop
fcom
js
or
xchg
ss
dec
mov
mov
rcl
mov
mov
mov
je
sub
xchg
jecxz
test
loopne
icebp
xchg
stos
cmps
mov
xchg
mov
mov
adc
pop
in
xchg
in
mov
mov
imul
adc
xchg
(bad)
pop
add
mov
sbb
cs
dec
and
ret
xchg
popf
inc
imul
dec
(bad)
xchg
fwait
int
pop
xchg
test
call
pop
rcl
repnz
inc
inc
outs
push
pushf
test
mov
das
cmp
xchg
xchg
mov
outs
and
xchg
adc
xchg
rcr
gs
jne
js
movs
mov
xor
lock
mov
ja
push
mov
arpl
mov
cmps
add
jne
inc
fdivr
outs
push
fucomip
sub
xchg
in
mov
mov
push
test
sbb
dec
xchg
mov
inc
stc
xor
mov
sbb
dec
xchg
pop
lock
pop
jmp
or
adc
lahf
xlat
mov
test
inc
jns
retf
mov
data16
jle
jg
shl
(bad)
cmp
cmps
fptan
pop
xchg
push
or
add
xlat
xor
fadd
add
push
add
or
xchg
and
aad
in
cmp
cmps
fiadd
dec
mov
pop
popa
inc
or
or
jne
inc
push
loopne
xchg
das
iret
loop
sbb
xchg
repz
xchg
lods
nop
cmp
rcl
xchg
push
adc
out
(bad)
mov
(bad)
xchg
xchg
xor
cmp
neg
cs
push
xor
or
xchg
or
out
into
pop
sbb
sub
xor
adc
sbb
push
xchg
fst
shr
xchg
xchg
cmp
fneni(8087
fist
repz
ror
cmps
xchg
xchg
adc
or
mov
adc
ins
mov
cld
jae
adc
adc
ds
ror
xchg
mov
sar
stos
jg
sub
pop
cld
adc
clc
dec
inc
push
mov
cmp
adc
popf
sahf
adc
stos
xchg
cmc
cmp
retf
push
jecxz
sub
(bad)
fild
int3
test
pushf
mov
jl
jle
addr16
adc
cld
push
xchg
mov
mov
pop
or
sti
pop
retf
imul
je
(bad)
jmp
cmp
fist
jmp
rcl
sbb
loope
shl
in
scas
pop
xchg
les
int
cli
popf
push
cmc
xchg
aaa
pop
test
inc
and
pop
jge
into
mov
adc
xchg
cmp
lock
fsub
pop
xchg
push
and
xchg
and
mov
cld
mov
lahf
jecxz
mov
les
nop
xchg
sub
aas
push
mov
fstp
ins
xchg
jg
fcmove
in
sbb
xchg
jle
xor
test
mov
xchg
imul
int3
xchg
jle
mov
(bad)
arpl
les
wbinvd
out
adc
xor
test
shr
les
xchg
enter
and
xchg
ficomp
mov
and
cs
shl
pop
scas
pop
add
test
mov
xor
pop
addr16
xchg
push
loope
inc
sbb
jp
dec
xchg
gs
arpl
stc
jecxz
add
push
cwde
mov
ja
ret
stos
movs
xchg
ds
mov
sub
ins
jne
cwde
in
test
or
cmp
add
push
pop
fsub
xor
add
pop
mov
xor
enter
xchg
and
xchg
test
mov
mov
cwde
nop
inc
xchg
dec
iret
outs
sbb
icebp
cmps
cmps
sub
or
mov
push
(bad)
cmp
pop
(bad)
pop
mov
adc
xchg
push
stos
out
adc
ret
ja
imul
cmp
jae
xchg
cmp
into
test
loope
gs
mov
push
retf
jnp
push
sbb
or
int
and
and
or
lock
xchg
xchg
adc
dec
xchg
xlat
mov
stos
jbe
xchg
movs
xchg
neg
rcr
hlt
aam
in
dec
and
or
add
fdiv
mov
not
inc
xchg
mov
arpl
mov
add
ds
add
out
pop
jno
mov
call
mov
ja
dec
(bad)
es
or
ret
push
adc
pop
pop
adc
test
jl
sub
retf
jo
cmp
out
pop
fwait
dec
and
mov
add
adc
xchg
popf
push
xchg
imul
add
jg
sbb
inc
test
sub
hlt
mov
ss
pop
sub
xchg
sbb
push
fwait
mov
mov
outs
or
xor
and
cmc
cli
push
pop
push
jae
jp
rcl
xchg
xchg
out
aam
repz
xchg
jae
mov
cdq
fidivr
fwait
pushf
lea
jecxz
je
adc
push
pop
xchg
cli
push
xchg
add
push
in
jg
xchg
push
and
cmps
fwait
pushf
or
push
xchg
mov
(bad)
aas
or
fstp
enter
fcom
cmp
fcom
push
shl
or
jl
xchg
adc
aaa
push
push
cmp
or
xchg
push
jb
jecxz
dec
outs
xchg
mov
push
cdq
pushf
aad
pusha
ror
popf
movs
xchg
jp
adc
les
jge
call
sti
push
xchg
cmp
sub
xchg
out
dec
arpl
dec
iret
xchg
cmp
in
xchg
std
stc
pop
aas
or
jnp
les
or
popf
mov
pop
sub
out
xchg
cdq
cmp
call
mov
push
in
xchg
or
test
mov
jo
mov
xlat
push
stos
cli
jecxz
push
xchg
lea
adc
loope
js
int3
xchg
ror
jge
add
xor
inc
cwde
sahf
mov
scas
(bad)
into
cmp
out
mov
repnz
sbb
add
push
xchg
shl
add
retf
int
in
dec
mov
test
icebp
dec
shr
repz
enter
test
fadd
bound
mov
out
jb
movs
xchg
mov
cmps
adc
loop
(bad)
push
pop
inc
popa
outs
mov
ror
adc
jg
fidiv
popf
dec
aam
jp
int
xchg
and
mov
mov
repnz
mov
push
dec
or
cwde
(bad)
lock
jmp
sub
ins
je
test
xchg
jecxz
inc
popf
dec
ss
repz
add
mov
loopne
aam
ins
sub
push
xor
clc
in
adc
mov
push
adc
dec
or
and
mov
xchg
xlat
mov
push
adc
xchg
mov
mov
xchg
fist
jp
mov
sbb
popf
loop
repnz
ds
xchg
jne
dec
das
xchg
inc
sar
cmp
xchg
inc
test
pop
jno
arpl
outs
and
mov
push
stos
and
mov
pop
popa
push
jl
std
fimul
leave
xchg
jmp
pushf
dec
cmp
xor
mov
xchg
pop
aad
es
mov
call
or
test
pop
ficom
mov
cld
push
cmp
fild
aam
inc
xchg
out
mov
adc
jo
sbb
xchg
repz
imul
arpl
xchg
xchg
xchg
in
push
pusha
mov
mov
sub
push
in
ins
or
ficom
jae
lock
mov
add
stos
outs
ins
int3
xchg
sub
les
rcl
or
xor
inc
xchg
out
(bad)
sub
int
push
xchg
mov
inc
into
push
cmp
scas
xchg
(bad)
out
test
loope
dec
mov
cmps
mov
or
mov
pop
mov
push
pop
xchg
xor
dec
btr
xchg
fiadd
out
fcmovne
adc
xchg
and
lods
inc
xchg
xor
sbb
jns
mov
push
pushf
push
xchg
icebp
adc
in
rcr
cdq
xor
imul
and
push
xchg
cmc
test
jle
adc
das
xchg
jg
(bad)
aad
add
add
mov
xchg
jmp
mov
fist
mov
sub
dec
out
mov
imul
xor
jne
lock
dec
hlt
in
dec
test
popa
jle
xchg
shr
mov
or
xchg
push
mov
scas
mov
jbe
fwait
in
(bad)
sub
xchg
repz
mov
xchg
cmc
xchg
mov
rcr
in
jmp
push
inc
xchg
dec
or
test
or
idiv
rcl
mov
sbb
pop
jbe
jle
mov
div
xor
sub
mov
xchg
dec
inc
loopne
pusha
mov
std
and
(bad)
aaa
jp
aad
sbb
xchg
jno
xrelease
xchg
(bad)
retf
clc
leave
xchg
cwde
mov
xchg
jnp
push
xchg
push
mov
out
aas
ror
xchg
mov
xor
jne
fwait
cmp
or
mov
mov
cli
imul
xchg
in
ret
fisubr
mov
jbe
jnp
mov
pop
pop
mov
cwde
jae
cmp
int
jns
mov
rcl
fs
push
dec
dec
mov
or
repz
cwde
sub
getsec
adc
loopne
outs
xchg
mov
xor
repnz
popa
xor
push
(bad)
out
mov
cli
loop
movs
cld
int
in
lods
shl
xchg
aad
psubsw
jge
xor
or
xchg
adc
jl
jecxz
cmp
rcr
adc
sahf
call
mov
xchg
and
sbb
push
or
mov
out
adc
ror
push
and
popf
je
sbb
jmp
sub
fnsave
aam
adc
into
fistp
jbe
jecxz
mov
ss
sub
js
out
fucomi
mov
fcom
mov
fwait
sub
and
pop
add
mov
std
gs
int3
aaa
addr16
push
pop
mov
hlt
jne
xchg
aad
rcl
cmc
sub
ss
sbb
stos
xchg
sub
jns
pop
jnp
adc
imul
xchg
and
adc
dec
xchg
int3
fcomip
sub
dec
and
daa
push
xchg
and
sub
mov
in
and
sbb
xchg
(bad)
cmc
cli
sahf
pop
cmp
add
out
xchg
sti
fwait
test
xchg
xchg
or
push
push
sub
xchg
sub
fstp
int3
jns
add
dec
mov
push
mov
adc
xchg
(bad)
rcr
jne
mov
xchg
sub
cmp
comiss
ror
xchg
xchg
and
int3
les
aas
push
retf
pop
rsm
(bad)
or
inc
mov
rcl
dec
outs
or
cmp
cwde
push
mov
push
xchg
mov
adc
fs
xchg
nop
fmul
mov
call
xchg
das
or
std
fwait
adc
sub
xchg
ror
js
push
xchg
mov
inc
jle
fadd
aam
jmp
jecxz
cmp
stos
sbb
xchg
neg
xchg
out
jo
ret
xchg
adc
and
les
in
ins
xchg
js
mov
lock
push
dec
mov
in
mov
sub
or
ret
mov
bound
aas
cs
test
mov
pop
xchg
mov
cwde
add
fs
dec
pop
xchg
jnp
cdq
lds
jno
mov
stos
lods
push
lods
mov
xchg
inc
mov
mov
xchg
mov
retf
out
xchg
out
(bad)
jae
or
and
add
mov
pop
lahf
jl
iret
xchg
into
les
push
xchg
and
pop
lds
add
loopne
mov
xchg
(bad)
mov
shr
sbb
sub
add
stos
mov
sbb
mov
jnp
add
movs
ror
xchg
nop
sbb
add
sbb
xor
pushf
mov
xchg
push
xor
(bad)
outs
(bad)
pop
les
jnp
scas
xchg
bound
test
push
dec
mov
cmp
sbb
fwait
jle
xchg
mov
rol
cdq
sbb
adc
sti
ret
inc
sbb
pushf
sahf
xor
mov
xchg
mov
movs
jns
xchg
dec
fmul
mov
push
xor
xchg
je
mov
mov
jmp
push
(bad)
xchg
jne
mov
sbb
jecxz
mov
xchg
in
fstp
(bad)
nop
fwait
pop
pop
xchg
je
imul
pop
pop
xchg
pop
push
pop
loop
(bad)
aam
adc
mov
push
out
jl
adc
dec
xchg
sub
xchg
xchg
int
push
push
stc
rcl
xor
out
pop
dec
mov
loop
(bad)
mov
pop
jle
ins
sub
lods
or
and
dec
sahf
xchg
mov
(bad)
and
or
fwait
not
mov
push
xor
sub
xchg
adc
push
inc
es
jge
sub
xchg
sbb
xor
lock
xchg
pop
stos
inc
shr
dec
adc
test
jne
inc
adc
push
pushf
orps
clc
inc
(bad)
xchg
xor
jnp
mov
xchg
mov
xchg
push
push
leave
mov
iret
mov
shl
sbb
adc
mov
jo
or
xor
pop
out
outs
jg
fwait
cmp
add
in
add
cmps
xchg
mov
das
dec
push
jle
push
mov
les
jbe
mov
push
push
or
push
or
inc
cmps
xchg
pop
ja
push
adc
daa
test
dec
mov
sahf
or
leave
and
outs
or
stos
pop
shr
arpl
mov
adc
xchg
sub
jecxz
ffreep
dec
push
pop
xchg
push
add
hlt
cmc
test
inc
add
rcl
xor
movs
jbe
ss
aaa
dec
fmul
and
dec
jge
jmp
dec
adc
adc
and
fisubr
mov
movs
xchg
lahf
xor
fsub
cmp
and
mov
push
in
xchg
lea
in
cmp
xchg
shl
test
and
sbb
and
jmp
xor
dec
sub
adc
mov
jno
mov
inc
push
mov
test
pop
aad
jp
adc
out
cld
rol
test
inc
cmc
shufps
dec
jmp
je
and
movs
stc
jle
xchg
repnz
pop
les
xchg
and
scas
inc
add
cmp
xchg
call
lods
pusha
std
xchg
movs
icebp
xor
xlat
xchg
inc
inc
das
shl
xor
repz
adc
leave
push
sub
mov
xlat
xchg
mov
bound
aad
sub
int
hlt
inc
push
rcl
xchg
sbb
mov
sar
adc
mov
jl
outs
mov
bound
add
xchg
or
mov
xchg
inc
xchg
stc
mov
mov
stos
in
mov
push
inc
pop
mov
cmp
pop
int
pusha
add
jge
outs
retf
inc
pop
push
loopne
stos
pextrw
xchg
dec
(bad)
jns
hlt
ins
ficomp
fisubr
inc
les
sahf
or
xchg
push
lahf
xor
adc
xchg
sub
ss
sti
fldcw
push
and
mov
mov
not
fild
xchg
jb
mov
adc
call
mov
fwait
xchg
xchg
sbb
push
jp
xchg
jmp
push
pop
int3
xor
(bad)
dec
mov
xchg
popf
jne
lods
lock
into
xor
mov
cmc
xchg
dec
xor
add
iret
clc
aas
xchg
rol
push
mov
push
rep
loop
lds
neg
out
cmp
sub
es
xchg
add
loop
jnp
mov
add
int
addr16
hlt
dec
icebp
xchg
pop
mul
sbb
test
test
mov
cwde
pop
dec
clc
or
adc
mov
jp
inc
mov
popa
xor
ins
sti
ret
xchg
xchg
jo
fadd
call
pop
sar
mov
inc
jno
jmp
dec
retf
je
mov
mov
sahf
data16
js
in
add
in
pusha
(bad)
mov
aaa
mov
push
sar
gs
dec
dec
and
lods
dec
pop
xchg
jl
or
xor
mov
xchg
mov
mov
xchg
fimul
xor
push
out
xchg
dec
fwait
sub
jl
dec
adc
xchg
ret
dec
mov
sti
cdq
or
dec
mov
scas
fcom
rol
or
pop
les
cmp
adc
xchg
(bad)
jmp
jmp
hlt
mov
out
loope
cmp
pushf
xchg
retf
shr
push
pop
mov
cmp
mov
rol
pop
dec
xchg
scas
add
push
xchg
fild
das
adc
jnp
popa
cmps
mov
loopne
cdq
xchg
pusha
cmova
push
pop
xor
or
mov
jmp
inc
fld
movs
and
aam
mov
push
or
int3
loopne
mov
repz
repnz
pop
test
mov
cwde
and
xor
sub
mov
jo
jge
cdq
sbb
(bad)
ins
in
push
sub
addr16
ins
jp
lods
xchg
inc
data16
bndstx
ret
mov
xchg
aad
jg
jl
cmp
mov
ror
xchg
mov
push
fimul
ss
sub
ds
addr16
xor
xlat
or
adc
sub
cmp
inc
dec
mov
cmp
xchg
fnstenv
and
xchg
and
mov
std
xchg
lods
jbe
xchg
mov
adc
fs
bound
retf
test
adc
sbb
ret
in
sub
jns
or
dec
jecxz
cmp
frstor
jl
int
adc
cwde
sub
jnp
fdivr
xchg
mov
shr
lods
mov
retf
mov
mov
xchg
sbb
xor
mov
jae
mov
or
push
mov
xchg
fcomp
mov
dec
add
in
sub
mov
movs
jae
push
cmp
mov
pop
lahf
nop
xchg
movs
push
adc
cdq
dec
imul
mov
rcr
daa
mov
or
adc
xchg
adc
mov
in
cmps
pop
add
xchg
and
adc
fidiv
cwde
mov
loopne
sub
sbb
cmp
clc
and
test
jo
ds
jno
das
dec
jae
or
ret
aad
pop
jg
fwait
mov
loop
adc
sbb
sbb
and
out
jb
loope
or
das
fcom
sub
push
push
and
test
mov
xchg
add
aas
add
mov
pop
xor
mov
(bad)
and
sub
fld
mov
or
fild
cli
mov
cmp
xchg
add
push
add
sti
nop
(bad)
xchg
test
sahf
lock
cmp
mov
cli
xchg
cmp
xchg
adc
fist
and
push
rcl
mov
outs
pop
popa
in
or
sub
xchg
mov
pop
pop
gs
xor
xor
xchg
adc
(bad)
jge
cs
ror
adc
fistp
xor
(bad)
sbb
sub
add
jecxz
xchg
add
xchg
sub
je
ds
mov
test
fcom
adc
xchg
ja
mov
jmp
popf
sbb
jne
(bad)
aad
xchg
scas
call
xchg
jne
inc
mov
rcr
imul
mov
int3
xchg
xchg
jp
xchg
jo
or
cmp
in
adc
mov
ja
xor
sbb
rcl
popa
das
xchg
daa
fstp
movs
dec
xchg
repz
xchg
aaa
data16
push
ins
mov
xchg
pop
dec
inc
mov
adc
xchg
and
js
or
xchg
push
jle
cmp
jmp
xor
popa
adc
jae
dec
xchg
push
sar
cmp
xor
mov
int3
(bad)
sbb
je
test
bound
ins
mov
(bad)
jge
jbe
call
cmp
pop
mul
mov
outs
mov
rcl
xor
aam
jmp
xlat
mov
and
xchg
sub
cmp
sbb
jns
push
fnstsw
xor
mov
stos
mov
mov
ficom
xchg
sahf
jmp
movs
fst
cmp
fisubr
out
adc
and
sahf
rcl
or
dec
int
loop
test
test
sbb
fsub
xchg
sbb
mov
test
mov
popf
sahf
daa
xchg
loopne
lods
adc
jle
ja
aaa
cmp
dec
push
xchg
pop
es
aad
sbb
sbb
iret
pop
xchg
call
and
jo
cmps
out
xchg
add
aas
ins
mov
cli
xchg
cmps
aad
rcl
inc
ret
(bad)
or
add
fldenv
out
shr
push
xchg
mov
test
dec
xchg
fdivr
sbb
fld
jno
jp
adc
jne
aad
std
test
in
cmps
fdivr
xchg
xchg
je
cs
cmps
stc
xchg
aaa
push
mov
sti
popf
push
xchg
stos
sbb
dec
inc
or
jge
loop
adc
es
jp
out
xchg
xchg
fadd
sub
scas
dec
xchg
and
out
xchg
sbb
mov
clc
cld
int
jno
xchg
das
push
cmp
lods
movs
leave
pop
test
mov
adc
xor
xchg
std
push
add
mov
(bad)
fwait
xchg
mov
in
dec
sbb
cmps
add
dec
jns
jbe
pop
pushf
loopne
adc
fbstp
pop
pop
and
mov
and
adc
xor
lea
mov
repnz
(bad)
cld
imul
sbb
jns
push
mov
rcl
pop
into
retf
xchg
xchg
inc
sbb
inc
dec
stos
mov
adc
les
xchg
sub
outs
jne
fld
xchg
cmps
add
jecxz
dec
nop
push
imul
out
ins
hlt
mov
cmps
data16
aam
dec
xchg
loopne
ror
mov
jns
in
adc
push
out
or
enter
dec
jno
lods
test
cs
in
das
retf
xchg
or
cdq
clc
(bad)
in
adc
push
and
movs
push
pop
xchg
cmc
scas
inc
push
fstp
or
sbb
mov
inc
mov
movs
inc
xchg
add
outs
sub
gs
dec
ficom
pushf
xchg
jbe
xchg
(bad)
jnp
cdq
or
ret
push
aad
lea
js
fwait
add
adc
pop
cmps
mov
mov
mov
nop
fwait
in
outs
dec
xchg
xchg
in
repz
addr16
pop
sbb
xchg
jmp
xor
jne
and
xchg
adc
jp
xchg
nop
in
dec
push
retf
cmp
xchg
ins
iret
dec
fsub
daa
sbb
aas
inc
xchg
pop
push
int
cmc
push
jnp
fwait
mov
(bad)
sti
xchg
mov
adc
push
mov
adc
jmp
je
jl
xchg
std
mov
neg
sbb
rcl
or
test
cld
pushf
dec
xlat
jle
loopne
and
out
ret
xor
test
test
sub
xchg
dec
or
xchg
adc
mov
push
aaa
rcl
inc
imul
retf
imul
call
xchg
mov
jl
inc
int
es
lods
mov
mov
out
adc
nop
nop
jle
xchg
inc
iret
je
es
xchg
adc
dec
stos
fcomp
sahf
and
dec
rcl
loop
or
mov
into
pop
mov
call
sti
dec
xor
outs
test
pop
clc
push
xor
xchg
dec
mov
aad
aam
test
lock
and
mov
pop
loopne
repz
fs
cmps
jne
jo
mov
retf
pusha
mov
icebp
lea
xchg
cmp
outs
dec
mov
sbb
shr
mov
mov
lock
dec
mov
je
mov
add
aas
mov
inc
lods
mov
push
cmps
xchg
jo
adc
mov
push
mov
in
lea
push
popf
enter
ret
xchg
xchg
sub
mov
stos
push
pop
enter
jo
lods
xchg
popa
fsub
rcr
je
push
stc
and
add
adc
int3
das
lods
pop
shl
mov
xchg
adc
mov
push
sub
xchg
jl
jecxz
jmp
inc
add
xchg
cmp
mov
out
mov
dec
jecxz
test
xchg
mov
dec
cld
aam
lds
xchg
adc
pop
in
test
mov
push
add
xor
jae
dec
sbb
sbb
sub
mov
retf
rcr
scas
outs
or
cld
xchg
test
cmp
xchg
fnstsw
jg
mov
mov
jmp
inc
outs
pop
(bad)
pop
xchg
fs
jmp
ins
add
outs
sub
xor
es
dec
gs
mov
call
cli
xor
jp
shr
enter
jne
jno
jmp
adc
jle
xlat
and
loopne
movzx
(bad)
fstp
mov
test
jge
xor
add
and
inc
lods
jb
and
mov
xor
push
fwait
mov
mov
test
psraw
xchg
sbb
mov
sbb
je
or
stos
mov
or
into
fld
inc
in
sub
outs
mov
loopne
pusha
cli
mov
fcomp
arpl
mov
mov
add
jo
icebp
sbb
ins
pop
pusha
aas
mov
mov
aam
mov
inc
in
cmp
popa
les
(bad)
aam
nop
and
test
int
xor
jmp
rol
(bad)
or
cmp
xchg
cmp
xchg
or
xchg
pushf
mov
dec
fmulp
fs
or
sti
out
(bad)
es
mov
xor
out
loopne
dec
push
mov
fnstenv
repnz
repz
push
imul
outs
rcl
(bad)
cmps
cmp
push
mov
icebp
mov
sti
xchg
jne
or
daa
push
nop
xchg
xchg
sbb
(bad)
idiv
in
pop
xchg
xor
add
test
mov
mov
fimul
jmp
fwait
loopne
into
adc
push
sbb
xchg
dec
popa
mov
mov
jmp
in
cmp
xor
arpl
xor
xchg
adc
vshufps
xchg
fiadd
or
ret
mov
xchg
in
jbe
jo
inc
daa
xchg
push
jecxz
mov
xchg
popa
adc
stos
not
nop
xchg
dec
dec
loope
gs
das
iret
adc
push
xor
dec
jecxz
xlat
(bad)
stos
mov
out
mov
xchg
mov
test
outs
mov
jnp
test
js
xlat
xchg
sbb
fsub
outs
hlt
xchg
test
mov
add
sub
(bad)
stos
xchg
cmps
arpl
aam
mov
dec
mov
adc
fwait
dec
sti
xor
push
aam
aas
in
scas
gs
rcl
fwait
mov
and
aad
stos
xchg
mov
mov
std
jno
lahf
mov
push
and
cmps
xchg
ret
xchg
in
movs
add
cli
sbb
mov
xchg
xchg
in
mov
cli
push
shl
cmp
adc
leave
sahf
ds
xor
xor
pop
and
dec
jmp
int3
add
call
mov
and
pop
int3
xor
xchg
aaa
cmp
xchg
jo
push
aam
sbb
sub
repnz
xchg
mov
jbe
test
sub
mov
test
xchg
out
fsubp
pop
xor
pop
test
hlt
mov
jmp
lahf
add
adc
mov
loope
stos
test
fs
push
gs
xchg
lock
out
mov
je
cmp
test
test
lock
cmps
cs
ror
lea
push
and
stos
dec
iret
xchg
fst
jl
mov
aaa
out
jmp
xchg
pop
outs
xchg
sub
leave
mov
pop
iret
push
mov
arpl
jl
(bad)
xor
or
in
xchg
addr16
bound
mov
adc
xchg
xchg
or
add
push
fisttp
sbb
sbb
push
enter
movs
mov
jmp
xchg
add
imul
xchg
std
int3
or
seto
fbstp
push
push
sub
and
and
daa
or
test
shr
xchg
movs
cmp
dec
xchg
cwde
fadd
xchg
(bad)
jp
dec
inc
(bad)
sti
cmp
sbb
pop
xchg
movs
and
ss
xchg
dec
imul
cmps
sti
iret
mov
mov
xchg
sub
mov
adc
pop
js
movs
adc
add
adc
add
mov
bound
loop
loopne
in
in
xchg
and
cmp
mov
shl
popf
push
in
mov
enter
(bad)
mov
cmp
aam
test
xchg
mov
inc
sti
dec
lods
iret
fucom
adc
in
or
fcom
xchg
xchg
mov
or
jns
pop
xchg
jmp
jne
repnz
out
cmc
add
mov
dec
cmps
ds
leave
les
lods
sbb
in
jp
aas
pop
out
add
xchg
pop
jno
ds
xor
(bad)
mov
adc
fwait
fs
cli
pop
and
xor
sub
dec
mov
imul
xchg
xor
sub
xchg
(bad)
push
inc
das
push
test
aam
jo
cmps
sbb
pop
xchg
loop
or
or
push
(bad)
xchg
xchg
jno
rcl
adc
sub
movs
stc
sub
pop
into
retf
gs
ret
mov
sub
or
loopne
pop
add
hlt
ror
push
mov
xchg
nop
push
(bad)
mov
int
dec
cmp
lahf
hlt
test
sbb
pop
repnz
adc
pop
push
repz
mov
mov
mov
fldln2
dec
mov
jo
add
xor
add
inc
ss
xchg
frstor
mov
cld
xor
mov
xchg
test
movs
xchg
cmp
xchg
mov
xchg
xor
mov
scas
ss
jo
sbb
jp
in
xchg
call
gs
fwait
ins
cmp
icebp
xchg
or
enter
mov
scas
mov
mov
mov
nop
dec
xchg
sbb
lahf
sbb
inc
xchg
ds
lods
cs
pushf
fwait
add
test
push
retf
push
sbb
dec
sbb
mov
mov
fldcw
xchg
mov
fbstp
pop
jmp
mov
retf
xchg
xchg
shl
xchg
aas
(bad)
rol
add
clc
mov
push
xchg
and
or
je
addr16
sub
rcr
fld
stos
aam
jno
jg
adc
mov
xchg
add
rol
scas
adc
push
adc
dec
xchg
jo
xchg
out
mov
or
and
push
sbb
xchg
sbb
push
retf
ja
scas
xchg
xor
xchg
in
fs
jmp
fwait
bound
hlt
push
call
addr16
inc
xchg
or
jnp
mov
push
popf
cmp
ins
cmp
mov
cmp
shl
push
jmp
pop
lods
inc
xchg
rcr
jo
xchg
sbb
xlat
sbb
cs
call
aaa
xchg
(bad)
fwait
mov
add
je
xchg
jle
sbb
dec
add
pusha
movs
adc
add
leave
adc
fsub
cs
and
and
fwait
jnp
fadd
ffreep
add
add
mov
mov
jnp
or
js
call
mov
in
jecxz
adc
mov
xchg
in
mov
sti
pop
xchg
add
mov
jl
hlt
add
fs
lahf
pop
jnp
bound
push
xchg
aaa
mov
and
xchg
xchg
mov
and
xchg
loope
sbb
inc
dec
jmp
mov
sub
int
inc
adc
repnz
(bad)
test
xchg
ja
lea
or
add
jnp
jo
and
repz
dec
jl
xchg
adc
xor
lods
js
and
mov
fwait
or
add
shl
xchg
and
or
test
mov
scas
mov
out
les
mov
stos
(bad)
inc
test
mov
xchg
movs
out
pop
adc
mov
xchg
sbb
hlt
in
jno
imul
mov
js
into
mov
xchg
add
stc
lds
push
pop
movs
retf
push
dec
mov
mov
or
dec
push
xchg
push
ins
add
mov
bound
fistp
dec
xchg
push
jbe
and
adc
mov
mov
and
xchg
and
mov
scas
cmp
mul
data16
adc
push
call
cmc
cmps
ds
mov
scas
mov
xchg
(bad)
adc
xchg
xchg
xchg
add
gs
repz
jg
fwait
je
mov
inc
sub
ins
mov
mov
inc
mov
push
xchg
xor
xor
mov
aas
jbe
xchg
call
pusha
jmp
xlat
jmp
or
fucompp
jnp
dec
xor
sbb
in
push
stc
add
daa
sub
in
xchg
push
push
jmp
jo
loop
je
icebp
push
xchg
aad
xor
(bad)
fcom
hlt
arpl
ror
or
(bad)
mov
xor
imul
repz
call
scas
add
or
mov
mov
pop
cmp
cmc
clc
or
push
sbb
mov
ss
mov
xchg
mov
jo
xor
mov
add
or
lock
push
cmc
push
xor
xor
(bad)
add
fwait
adc
or
xor
mov
mov
mov
shl
ss
dec
adc
mov
fwait
xor
lock
lds
int
arpl
jb
xchg
outs
loop
sbb
in
scas
in
add
data16
or
stos
pop
xchg
dec
hlt
rcr
xchg
popf
or
out
stc
mov
aam
out
ins
pop
into
rcr
xchg
inc
jns
mov
xchg
jg
stos
add
adc
xchg
arpl
or
mov
bound
push
rcl
adc
movs
mov
jae
test
cmp
pop
(bad)
aam
repz
adc
jbe
jp
lds
xor
push
xchg
and
movs
xchg
rcr
jge
cmp
mov
ss
out
xchg
lock
xchg
and
mov
sar
adc
fbstp
and
xchg
imul
jno
xchg
call
mov
or
xor
imul
fwait
dec
add
cmp
push
test
or
and
rcl
mov
mov
push
cmp
dec
xchg
jne
and
cwde
cmc
out
xchg
shl
in
or
mov
jmp
jmp
xchg
in
and
mov
pop
test
xchg
std
aam
cmc
aas
adc
or
(bad)
fadd
mov
xlat
daa
dec
mov
fsubrp
and
out
mov
test
cmp
(bad)
pushf
push
jo
push
retf
sahf
or
hlt
scas
lods
std
xchg
push
mov
fsub
jo
mov
adc
jge
xchg
fbld
xchg
adc
movs
add
jmp
inc
xchg
sub
js
jns
cmps
dec
inc
push
push
cwde
mov
sbb
outs
cs
xchg
jne
inc
(bad)
lods
push
jae
aaa
pushf
retf
lahf
hlt
push
je
idiv
arpl
cwde
mov
ds
inc
xchg
in
stos
mov
xchg
adc
pop
out
and
lods
xchg
inc
leave
inc
jmp
add
inc
xchg
sub
(bad)
movs
test
je
xchg
or
out
(bad)
xchg
out
mov
push
mov
rcl
ja
hlt
outs
push
adc
mov
sbb
scas
pop
adc
adc
aas
adc
sti
(bad)
xchg
mov
(bad)
jge
cmp
out
retf
adc
out
outs
not
in
rcl
push
or
mov
adc
push
test
iret
sub
(bad)
std
jns
push
xchg
(bad)
xchg
sahf
and
mov
sbb
jecxz
in
dec
retf
repz
fwait
sub
stos
jae
les
add
xchg
inc
popa
sbb
(bad)
int
inc
xchg
jg
adc
mov
dec
mov
xchg
or
jmp
jb
cli
stc
ror
mov
jo
sub
jae
fwait
iret
or
add
mov
js
jno
xchg
aad
sbb
sub
icebp
fist
jmp
or
xchg
mov
jecxz
and
xchg
inc
xchg
enter
ret
cdq
js
cdq
xor
adc
jp
jecxz
jle
add
sbb
imul
mov
xor
push
cmp
pop
lahf
and
xchg
or
and
xor
arpl
push
ins
mov
loopne
sbb
test
sahf
ret
inc
in
xchg
push
mov
mov
icebp
pop
adc
int3
(bad)
mov
xchg
push
add
adc
add
imul
out
retf
inc
or
push
xchg
ins
addr16
jl
aad
sub
adc
retf
xchg
jae
int3
jmp
(bad)
jecxz
unpckhps
out
and
enter
jmp
push
xchg
dec
rcr
test
sbb
mov
lahf
(bad)
pop
enter
xchg
xchg
jmp
sbb
aas
fisttp
fwait
dec
sbb
add
xor
fwait
xchg
xor
arpl
cmp
xchg
mov
pop
inc
mov
jmp
xchg
jnp
or
xchg
fwait
jno
push
loop
xchg
imul
jbe
out
mov
pop
ins
dec
cmc
and
sub
and
sbb
cli
fcom
xchg
and
or
das
pop
in
mov
adc
and
jo
(bad)
not
fistp
adc
pop
fidivr
inc
cli
aaa
rol
repnz
(bad)
outs
into
adc
or
jmp
retf
adc
sub
cmp
pusha
xchg
int
cmps
out
dec
xchg
and
ss
mov
into
sub
mov
es
test
sub
(bad)
mov
push
mov
je
ds
push
(bad)
ins
mov
imul
add
inc
mov
in
xchg
xchg
push
cld
ins
mov
test
aas
lahf
mov
icebp
xchg
pop
stos
stos
add
pusha
xchg
xchg
scas
sbb
inc
adc
sahf
inc
xchg
test
sar
push
loop
jmp
inc
or
pop
xor
sub
das
cmps
sub
xchg
cmp
mov
mov
fild
adc
dec
neg
mov
dec
repz
jg
adc
ins
enter
xchg
adc
div
dec
mov
jle
cmp
sbb
js
push
repnz
aad
hlt
ret
cmc
xchg
mov
lods
scas
and
ins
repnz
xchg
shl
cmp
mov
push
pop
fwait
loope
xchg
push
xchg
inc
jmp
sti
pusha
xchg
repz
add
sub
pop
mov
xchg
and
imul
cmps
arpl
das
mov
pop
pop
mov
sub
mov
int
cmp
or
fist
sub
outs
mov
mov
out
mov
hlt
inc
mov
cmps
mov
adc
sti
(bad)
sbb
push
ins
jnp
scas
xor
sar
sbb
jne
sbb
out
xchg
sub
dec
cld
adc
pop
sbb
adc
xor
fnstenv
test
out
sbb
daa
loope
cld
cdq
enter
sti
mov
retf
mov
pop
add
xor
cmp
mov
sti
cdq
jnp
push
cld
dec
leave
xchg
sahf
setl
push
mov
mov
mov
jbe
xor
add
mov
in
in
cmps
ds
mov
jle
push
inc
xchg
or
cmc
out
inc
xchg
sub
adc
bound
scas
xchg
xor
adc
xchg
adc
xor
in
mov
sub
mov
pop
jo
xchg
jl
dec
and
ret
or
xchg
mov
push
popf
jns
inc
adc
mov
fwait
out
inc
and
push
fs
adc
(bad)
popf
in
push
xchg
mov
add
or
mov
sti
pop
xor
and
or
xchg
scas
das
xchg
push
sbb
jl
or
sbb
outs
pop
nop
xchg
mov
xchg
sub
xchg
mov
xchg
push
(bad)
cmps
or
ja
fwait
aaa
(bad)
jbe
xchg
adc
jae
inc
fcomp
xchg
jle
call
bound
cmps
inc
into
xchg
sahf
div
ss
pop
pop
dec
fwait
xor
and
popf
rol
pop
jb
fwait
inc
xor
cmps
fild
pop
xchg
push
cmps
sbb
cld
mov
mov
aam
push
and
test
xchg
jnp
shr
sbb
mov
xchg
popf
clc
jo
xor
xlat
cdq
sbb
push
sub
mov
mov
xchg
inc
repnz
ds
cmp
out
cwde
rcr
fwait
inc
adc
ss
sbb
push
jmp
fwait
xor
inc
out
aaa
push
and
pop
nop
int3
out
sub
xchg
xor
fmul
enter
xchg
js
sub
mov
mov
rol
push
cmps
mov
sbb
xchg
xchg
inc
leave
mov
xchg
adc
sub
jp
hlt
xchg
lods
xchg
ror
xchg
lahf
add
cld
fs
push
xchg
outs
mov
mov
mov
dec
shl
jb
adc
xor
jns
push
xchg
mov
xor
repz
fwait
packuswb
ret
jnp
(bad)
mov
(bad)
cmp
(bad)
lahf
ficom
pop
and
pop
jns
ret
out
aas
adc
pop
xchg
sbb
popf
sub
(bad)
retf
xor
and
sbb
xchg
pushf
in
and
lods
xchg
in
inc
xchg
mov
adc
cli
sbb
(bad)
mov
pop
out
and
mov
fs
jns
out
xchg
daa
outs
add
sbb
pop
mov
mov
push
dec
push
adc
(bad)
mov
mov
push
fmul
xor
xchg
nop
daa
cmp
adc
and
gs
sub
enter
inc
pushf
adc
(bad)
fdivr
dec
xchg
push
pop
pusha
pop
xchg
lock
push
xchg
dec
ds
movs
add
xchg
pop
sub
sub
mov
lods
cmp
or
adc
stos
mov
mov
pop
fisttp
std
ret
into
aaa
sub
int3
loop
push
inc
and
xchg
shl
xchg
xchg
xchg
dec
xchg
jns
add
enter
cmp
inc
xchg
fst
pop
push
mov
test
out
mov
out
inc
xchg
push
dec
ss
clc
rol
mov
mov
imul
xchg
addr16
fcmove
mov
inc
dec
push
hlt
repz
int
jle
mov
pop
fild
mov
dec
cmp
outs
adc
pop
fdivr
cmps
out
or
test
xchg
jecxz
fadd
inc
jl
adc
xchg
push
ror
xor
push
dec
or
xchg
pop
mov
aaa
shr
in
add
push
mov
mov
xchg
aam
mov
cmc
sbb
shl
in
mov
popf
inc
mov
mov
mov
aaa
mov
mov
jbe
fcomp
xchg
idiv
push
xor
jno
nop
loope
enter
ret
fwait
shrd
fadd
aaa
mov
mov
adc
xchg
lods
ret
xchg
into
ror
iret
inc
xchg
xchg
jb
pop
pushf
sbb
dec
xchg
call
out
mov
lock
aas
and
jle
xchg
xchg
push
push
mov
xor
mov
xor
inc
xor
leave
pushf
xchg
cmp
ins
cmovb
mov
mov
fwait
adc
or
neg
mov
xlat
mov
ds
mov
xchg
ins
loope
(bad)
pop
xchg
js
in
mov
jno
les
jne
mov
es
pop
ins
pop
repz
xor
pop
push
into
stos
push
lea
xchg
popf
inc
les
cwde
dec
jmp
cld
xchg
loopne
(bad)
xchg
ret
cdq
scas
sub
in
cld
mov
and
jmp
adc
jno
xor
dec
push
jbe
rcr
mov
xchg
mov
arpl
jg
jp
mov
leave
rep
dec
dec
fwait
imul
mov
xchg
cdq
dec
movs
push
cmp
and
je
imul
jbe
ss
adc
dec
xchg
push
out
loopne
in
inc
or
dec
add
mov
push
movs
hlt
add
xor
cdq
vmwrite
cmp
cmps
sbb
xchg
shl
retf
adc
pop
arpl
clc
adc
and
ds
mov
in
(bad)
sar
stos
inc
repz
das
add
cmp
adc
xor
xchg
xchg
adc
mov
xor
cmp
fwait
cli
out
fidiv
dec
mov
inc
ror
cli
mov
mov
imul
stos
xchg
rcl
mov
xchg
lds
into
jmp
bnd
data16
mov
ret
fwait
cmp
xor
sti
ja
add
adc
mov
jo
sar
and
rcl
test
aaa
add
and
mov
sbb
sub
mov
and
(bad)
es
test
not
mov
or
xchg
sbb
mov
(bad)
xor
data16
das
xchg
pusha
xor
ds
xor
icebp
lea
xchg
mov
fwait
mov
call
in
leave
xchg
cdq
jmp
adc
jp
ret
in
dec
sbb
mov
(bad)
hlt
inc
scas
xchg
inc
fsubrp
sbb
pop
add
xchg
adc
loopne
out
hlt
loop
xchg
in
sti
inc
adc
add
loopne
inc
bound
and
xchg
adc
xchg
jecxz
shr
pop
mov
xchg
jmp
mov
and
pop
xchg
inc
mov
gs
mov
outs
sbb
add
mov
ja
lds
mov
popa
xchg
pop
mov
loop
mov
dec
lahf
xchg
les
dec
call
out
cmp
fst
mov
int
push
mov
inc
jle
cdq
xchg
push
inc
xchg
mov
mov
xchg
mov
mov
rol
cmp
stc
mov
xor
or
xchg
movs
mov
mul
lds
xchg
fs
cdq
adc
sbb
xlat
ins
movs
out
mov
test
or
mov
aam
inc
mov
xchg
xor
cmp
xchg
fcom
pop
sbb
xor
mov
mov
leave
ret
xchg
push
popf
fldenv
xchg
(bad)
(bad)
outs
sbb
or
(bad)
pop
inc
pusha
sbb
jle
xchg
mov
rcl
mov
fwait
xchg
push
or
cmp
xor
data16
rol
clc
ret
rcl
dec
cmp
xchg
jle
fst
xchg
movs
jbe
das
jmp
lods
inc
mov
xchg
sti
and
xor
xchg
cdq
or
ins
push
mov
(bad)
js
fwait
ss
or
pusha
xchg
push
lahf
jp
xchg
int3
pop
pop
dec
jl
and
test
lea
inc
mov
jecxz
jb
cmp
or
xchg
xor
int
and
push
push
pop
xchg
cld
jmp
sub
mov
and
lock
cmp
sbb
lods
sbb
xchg
xchg
inc
xchg
aad
inc
repnz
xor
movs
xchg
jbe
xchg
cmp
test
sbb
sbb
and
out
mov
xchg
mov
loopne
fwait
sar
mov
test
cmps
and
xchg
push
ret
leave
iret
xchg
adc
sahf
jl
dec
call
add
loopne
jbe
ja
add
and
mov
aam
jmp
pop
mov
retf
xchg
sub
gs
jb
sbb
dec
call
xchg
cmp
enter
cmp
or
into
int3
xchg
fwait
push
call
jl
dec
and
daa
movs
mov
mov
inc
cwde
jae
inc
hlt
push
aas
push
test
das
bound
stos
jmp
test
sbb
xchg
fwait
iret
push
inc
sub
jb
mov
les
xchg
rcr
sub
mov
inc
adc
bsr
pop
js
rcl
cmp
cmc
pop
sub
aaa
mov
imul
jmp
jne
fsub
andps
mov
xchg
sub
adc
jae
xchg
shl
leave
xchg
cli
aam
cwde
mov
lahf
fs
xor
outs
jno
rcl
xor
add
xchg
ror
cdq
aam
lock
test
cld
sub
cdq
fsubp
adc
outs
adc
js
xor
push
push
cs
sub
push
lock
imul
in
push
push
mov
mov
out
pop
xchg
jmp
push
xchg
jl
mov
push
adc
retf
mul
pushf
push
xchg
mov
sti
inc
cmps
xchg
add
neg
nop
xor
or
xchg
out
cmp
push
nop
mov
pusha
push
les
adc
inc
sub
pop
push
pop
clc
aas
fwait
into
das
sub
ins
hlt
test
push
pusha
mov
ret
xchg
mov
jne
sub
fsin
scas
add
lock
xor
cmp
(bad)
mov
scas
in
ss
cmp
inc
daa
or
sahf
or
call
push
sbb
pop
push
mov
aaa
test
pusha
mov
lds
sbb
add
xchg
(bad)
test
pop
or
fistp
add
xchg
repnz
cmp
and
je
sbb
push
xchg
push
mov
add
into
ins
aad
sbb
adc
cmps
mov
sub
xchg
out
xchg
loopne
or
sub
daa
dec
or
push
cmc
hlt
jle
dec
xchg
mov
pop
pop
adc
push
xchg
ins
push
xchg
call
(bad)
in
xchg
lahf
mov
jnp
or
fsubr
les
push
cmp
pop
xchg
out
rol
sbb
inc
sti
shl
and
or
inc
out
or
jle
and
add
xchg
lock
adc
inc
cli
mov
(bad)
repz
fwait
jp
mov
xchg
cs
cmps
xor
xchg
push
mov
mov
jb
xchg
cmps
loopne
xor
stos
cmp
inc
enter
icebp
pop
ss
xor
fcmovu
xor
cs
xchg
fbld
xor
xchg
mov
fmul
mov
hlt
das
push
xchg
mov
xchg
mov
pop
imul
xchg
pushf
movs
mov
cmp
ror
(bad)
shl
xchg
call
das
push
pop
retf
sbb
xor
inc
xlat
mov
cmp
adc
cmps
test
push
or
xchg
mov
adc
es
int3
mov
ror
mov
dec
sbb
mov
jne
cmovge
mov
adc
test
gs
cli
test
pushf
xchg
fisub
ret
and
stos
call
sub
push
inc
in
das
xchg
or
mov
sbb
sar
jnp
fwait
xor
jl
mov
int3
stc
and
(bad)
popf
cmp
fs
xchg
and
pop
add
pop
cwde
loopne
loope
imul
pop
aas
gs
push
add
xor
xchg
sahf
lahf
mov
sbb
xor
lock
or
aad
lahf
mov
call
mov
xor
and
out
mov
js
je
cs
fwait
pop
or
(bad)
rcl
xchg
lock
inc
push
xchg
stos
cmc
cmp
imul
imul
or
clc
adc
xchg
ret
and
xchg
and
fiadd
adc
mov
jmp
cmps
push
jae
push
js
rcl
loope
xor
mov
xchg
pushf
jmp
cmps
int
add
jmp
je
mov
mov
popf
lock
adc
jle
rol
int3
pop
jle
enter
inc
dec
xor
dec
mov
push
mov
mov
fnclex
jnp
xchg
or
adc
repnz
push
arpl
repz
xchg
adc
lds
js
loopne
mov
leavew
cmp
add
xor
adc
adc
push
je
push
scas
inc
jl
xchg
nop
outs
sub
aad
pop
cmp
in
stos
movs
(bad)
fst
lods
add
mov
data16
dec
pop
add
clc
dec
xchg
pop
sti
in
sbb
pop
mov
jne
cmp
add
adc
push
xor
(bad)
in
dec
add
scas
push
out
sub
xchg
add
mov
mov
fst
sbb
jl
in
cmc
jno
xchg
xchg
fwait
cli
mov
pop
imul
adc
ret
cmc
lea
out
cli
xor
xchg
pop
iret
(bad)
jns
adc
adc
mov
xchg
rcr
fidivr
rol
loope
xchg
sub
pop
push
scas
sahf
dec
xchg
jmp
pop
dec
dec
push
sbb
(bad)
nop
add
loopne
push
xchg
ja
(bad)
lods
icebp
sbb
mov
rol
pop
aas
xchg
int3
sub
xchg
jne
fsub
mov
mov
xor
dec
pop
call
cmps
pop
push
loopne
push
xchg
pop
clc
data16
hlt
xchg
dec
or
mov
xchg
ja
xor
pop
xchg
push
jno
lahf
or
xor
xchg
xchg
aaa
shl
mov
push
push
stc
pushf
rol
ds
in
aas
pusha
dec
xor
xchg
ins
jae
out
add
push
sbb
repnz
push
pop
jle
cdq
inc
cwde
inc
aam
xchg
ficomp
adc
or
and
inc
xchg
pop
data16
test
or
xchg
pop
xchg
ror
dec
ja
pusha
xchg
inc
loope
lea
je
mov
loopne
dec
leave
mov
xchg
pop
repz
call
(bad)
push
xchg
jbe
mov
aam
fsubr
xchg
mov
popf
(bad)
xor
mov
dec
pop
xlat
xchg
jb
(bad)
mov
stc
push
dec
lds
cdq
imul
mov
ja
and
adc
fist
xchg
xchg
aam
jae
ret
jns
loopne
fdiv
xchg
scas
xor
mov
xor
sti
dec
aas
xchg
xchg
lock
cmp
mov
pop
jnp
dec
pop
xchg
push
sbb
adc
xchg
or
mov
rol
adc
mov
mov
enter
fs
stos
loope
xchg
inc
xor
xchg
jmp
sahf
or
mov
int
mov
xchg
sbb
cmp
stos
pop
ds
xor
out
ja
jnp
cmp
jmp
lods
xchg
mov
imul
cmp
jbe
popa
(bad)
sub
sub
xchg
or
and
arpl
xor
mov
mov
mov
cmps
mov
push
aaa
mov
jbe
test
and
rcl
jl
pop
adc
adc
xchg
movs
or
dec
lods
cmp
xchg
dec
div
xchg
cwde
dec
push
push
and
clc
mov
jmp
mov
imul
xchg
or
jmp
cmc
call
scas
pop
sbb
xchg
sbb
sbb
mov
jp
ret
cmp
les
ins
xchg
push
sub
(bad)
pop
xlat
jge
fcmovb
call
pop
je
or
mov
push
xchg
push
and
pop
xchg
pop
sub
lock
pop
aam
(bad)
pop
es
xchg
imul
add
shr
les
scas
dec
mov
ja
mov
outs
cmp
fwait
rol
aas
(bad)
jl
je
fcomp
inc
hlt
push
scas
gs
xchg
das
fisttp
fidiv
xor
xchg
ja
stc
es
stos
shl
popa
mov
sub
bound
push
into
xchg
aaa
fst
jecxz
push
call
add
shl
adc
and
js
mov
pop
mov
inc
data16
mov
dec
adc
inc
(bad)
jmp
movs
cdq
inc
dec
ret
daa
xchg
int3
test
mov
dec
mov
xchg
inc
pusha
adc
fs
inc
int3
imul
inc
out
lods
loop
push
in
jmp
aad
je
scas
es
bound
or
inc
jb
xchg
ins
ss
aam
retf
pusha
pop
dec
gs
xchg
lock
test
xor
mov
xchg
ret
push
in
pop
retf
clc
xchg
lea
adc
dec
out
shr
or
xchg
xor
cmp
vpaddsb
adc
push
and
xchg
jb
dec
or
xchg
scas
xor
xchg
sbb
nop
es
push
sub
cmps
xor
hlt
xchg
push
jbe
sbb
xchg
int3
adc
push
dec
mov
jp
add
test
es
lahf
ins
inc
jae
xchg
arpl
sbb
cmp
xchg
push
mov
xor
dec
adc
ret
fwait
push
mov
test
cld
aaa
ins
lahf
inc
call
out
and
fsubr
(bad)
mov
or
shr
xchg
inc
jmp
mov
ret
push
mov
fdiv
fild
nop
xor
sbb
mov
push
stc
xchg
add
call
ficomp
xchg
adc
mov
add
shl
fst
cli
je
mov
fwait
js
shl
movs
mov
popfw
xchg
out
adc
dec
mov
add
push
xor
xchg
mov
call
pop
mov
push
shr
mov
mov
add
mov
xor
push
pop
outs
xchg
fild
leave
or
lahf
xor
adc
aam
in
pand
retf
xchg
loope
jmp
repz
xor
add
push
leave
adc
mov
hlt
push
jp
out
stc
mov
mov
adc
mov
xchg
ret
sbb
dec
in
pop
mov
fwait
jb
out
jl
xor
stos
stos
hlt
jbe
xchg
sbb
into
and
sub
jp
xchg
sahf
imul
ins
into
outs
mov
xchg
(bad)
dec
or
jne
mov
mov
(bad)
call
sub
fisubr
fucomip
fwait
xchg
rcr
add
sub
jo
cmp
add
dec
test
iret
cmc
fwait
aad
pop
inc
or
mul
aas
in
pop
jg
xchg
cmps
and
cmps
mov
int
sbb
xlat
(bad)
aam
push
push
rol
jne
daa
ins
shl
jl
mov
mov
mov
ins
hlt
mov
xchg
arpl
or
scas
and
and
xchg
mov
cmps
das
(bad)
in
add
or
mov
push
mov
inc
dec
add
sub
arpl
xor
sar
or
call
xchg
rcr
(bad)
xchg
sub
sub
cmp
xor
push
fcomp
add
gs
pop
bound
pop
mov
mov
jnp
cld
add
xchg
(bad)
hlt
(bad)
out
add
xchg
push
and
xchg
pop
inc
ins
popf
aaa
cmp
bound
adc
xchg
dec
and
sub
xchg
int
mov
xor
jmp
into
xchg
push
cmp
sbb
repnz
xchg
dec
or
and
cwde
xchg
xchg
data16
fcom
jb
xchg
cmp
not
adc
xchg
inc
push
aas
dec
mov
je
push
xchg
ret
mov
dec
ss
les
repz
xchg
xchg
loopne
stc
and
pushf
ror
xchg
xor
cmps
xchg
fld
sub
repnz
not
mov
adc
xchg
nop
push
pop
nop
call
xchg
call
into
and
xchg
inc
lods
xchg
jns
psllw
cmp
je
lds
or
imul
jbe
push
fsubr
int
nop
dec
bound
mov
jg
jo
xchg
jmp
mov
scas
icebp
xchg
ret
scas
dec
(bad)
cwde
mov
adc
int
jp
lahf
jmp
dec
cwde
or
inc
dec
pushf
sbb
sahf
out
repnz
lock
mov
sbb
es
in
jmp
adc
add
jbe
call
xchg
xor
mov
ret
xchg
inc
arpl
mov
pop
adc
lahf
aam
popf
push
or
popf
jno
out
cmp
or
in
adc
fwait
lods
mov
or
push
xchg
cli
inc
xchg
xchg
jp
or
xchg
imul
icebp
xchg
mov
adc
(bad)
dec
dec
in
jb
xchg
aad
ins
cmp
fdiv
xchg
mov
popa
cmps
mov
pop
xchg
xchg
bound
scas
jmp
inc
cli
or
xchg
lods
imul
faddp
xchg
mov
mov
cdq
gs
adc
dec
mov
nop
je
xchg
adc
sub
sar
add
sub
or
loopne
call
data16
adc
popf
xchg
int
add
out
xor
xor
jno
rcl
fadd
jmp
xchg
inc
and
icebp
xchg
jo
and
les
add
push
jbe
xchg
imul
sbb
xchg
xor
test
xchg
pop
aaa
xchg
add
cs
sbb
sub
xor
jecxz
aam
in
mov
mov
xchg
ss
or
xor
sbb
(bad)
stc
loop
rcl
sbb
cmp
sub
aaa
add
ror
and
lock
clc
mov
ret
int
jmp
cmp
mov
inc
enter
pop
iret
mov
xor
shl
ds
dec
loop
loope
lds
cdq
(bad)
xchg
repnz
mov
sub
add
cmp
int
jne
stos
ror
dec
xchg
aaa
xchg
aad
es
outs
xchg
push
mov
pop
pop
(bad)
stos
jg
xchg
ror
stos
jns
sub
mov
or
jnp
leave
ret
shr
and
fmul
repnz
pop
(bad)
fadd
sbb
in
and
xchg
sbb
or
mov
mov
mov
jmp
adc
fdivr
sub
aaa
xchg
stos
push
imul
loop
rol
sete
jl
sbb
xchg
inc
jmp
cli
js
scas
pop
xchg
hlt
add
mov
cld
repnz
adc
dec
jnp
rol
cmp
out
cld
out
lods
inc
lahf
scas
pop
mov
test
adc
(bad)
repnz
xchg
or
das
int3
xchg
test
mov
adc
xchg
add
mov
push
xchg
sbb
popa
xor
pop
jo
fwait
rcl
adc
nop
test
neg
scas
hlt
in
test
arpl
push
shl
cmp
stos
xchg
mov
inc
out
inc
hlt
pusha
pop
push
gs
mov
inc
sbb
xor
sbb
push
adc
cmp
aad
scas
rcl
push
mov
xorps
sub
inc
mov
daa
(bad)
das
xchg
jne
add
idiv
pop
(bad)
fwait
pusha
cmp
xchg
test
pop
and
mov
and
cdq
xchg
jns
push
movs
xchg
pop
stos
ror
sub
mov
cmp
fwait
adc
xchg
mov
cmp
cmp
adc
jge
xor
xor
push
xchg
sahf
xchg
sub
mov
stos
mov
xchg
xchg
enter
adc
xchg
retf
or
xchg
inc
mov
push
xchg
shl
jbe
adc
mov
jmp
mov
fcmovbe
dec
xchg
mov
xchg
mov
sbb
stos
popa
mov
mov
or
stc
inc
xchg
inc
sbb
inc
out
push
nop
loope
adc
cli
call
and
stos
lea
test
clc
add
outs
and
in
mov
lods
ret
clc
movs
jbe
aad
dec
or
xchg
imul
outs
loop
push
dec
mov
popa
xchg
add
rcr
loope
ret
dec
push
adc
jae
or
xchg
mov
jno
call
enter
jne
dec
js
or
mov
out
(bad)
adc
and
stos
xchg
cmps
aam
xchg
cs
or
mov
cmps
dec
js
xchg
les
pusha
xchg
jmp
rcl
nop
out
xchg
aaa
iret
into
jbe
sub
std
adc
pop
push
xchg
dec
aaa
push
in
iret
popf
cmps
nop
mov
xchg
add
shr
shl
add
inc
xchg
push
mov
neg
test
adc
fs
xor
int3
retf
cmp
pop
adc
leave
sub
adc
pop
dec
mov
xchg
xchg
(bad)
loopne
ins
js
lods
in
push
jne
(bad)
ins
cdq
mov
xchg
cmp
xor
sti
xchg
enter
ret
jmp
xor
jecxz
or
mov
adc
inc
xchg
add
ret
cmps
rcr
stos
sub
adc
add
inc
outs
mov
or
faddp
out
jbe
or
jb
xlat
mov
adc
(bad)
into
xchg
dec
jg
xchg
pushf
push
sub
xchg
fdiv
fld
sub
in
mov
pusha
adc
pop
xchg
jge
xchg
fwait
ss
in
sar
jl
cmps
popf
in
leave
xor
dec
stos
(bad)
sar
jo
test
xor
xchg
aas
into
cwde
pop
cmp
aam
add
add
xor
inc
adc
xchg
jge
jecxz
cmps
or
lods
pop
bound
loopne
xchg
mov
jbe
mov
xlat
(bad)
xchg
iret
pop
in
jecxz
aam
arpl
loopne
adc
test
xchg
out
push
lahf
pop
fs
adc
repz
cmp
mov
punpckhwd
int3
pop
pushf
xchg
and
push
fisttp
ss
xchg
jmp
adc
js
test
or
dec
not
lock
int
mov
dec
shl
js
sbb
(bad)
mov
mov
mov
jecxz
aam
pop
imul
cmp
scas
fist
sar
das
call
scas
leave
(bad)
push
int3
push
push
daa
shl
mov
fstp
xchg
hlt
rol
jne
cwde
test
push
and
call
aas
xchg
call
retf
push
pop
mov
ficom
or
lock
arpl
xchg
popf
fadd
sbb
push
xchg
xchg
ins
xchg
hlt
cmp
or
je
and
xchg
in
sub
ins
popa
imul
xchg
mov
mov
xchg
push
sbb
mov
(bad)
sub
(bad)
cmp
xchg
push
stos
mov
mov
and
(bad)
clc
loope
movs
cdq
pop
popf
aam
leave
(bad)
pop
jne
mov
dec
fldcw
mov
scas
cmp
mov
(bad)
test
add
cli
add
loope
xchg
xchg
cwde
addr16
vpunpckhbw
xchg
mov
out
scas
mov
ja
test
add
cmp
xchg
pop
es
in
jp
movs
xchg
fisub
sbb
adc
xchg
xor
js
shl
adc
jp
mov
inc
mov
mov
jp
push
ja
push
mov
xor
pop
pop
or
mov
add
retf
faddp
inc
cmps
xchg
fwait
pop
or
sub
or
sbb
cmp
mov
xchg
call
mov
sbb
ffree
popa
adc
cli
xchg
xchg
push
outs
(bad)
out
popf
pop
cs
mov
int3
and
xchg
pop
mov
cmp
jmp
mov
push
mov
cmp
sar
inc
not
test
fst
mov
cs
push
xchg
adc
mov
mov
jle
rcl
hlt
leave
xor
dec
mov
lods
xor
xchg
iret
dec
mov
das
inc
retf
or
inc
mov
test
mov
mov
aad
stos
(bad)
push
mov
sub
outs
xchg
fisub
call
shl
popa
movs
mov
in
lock
sub
out
pop
xchg
mov
ds
mov
stos
jbe
loope
mov
hlt
cdq
cmps
repz
sbb
out
mul
dec
shr
call
ins
arpl
rol
sti
jg
div
aam
retf
xchg
cmc
xor
fld
xchg
in
jge
daa
arpl
mov
mov
inc
sbb
leave
xchg
xchg
jmp
push
lds
jmp
push
mov
mov
push
ds
clc
cmp
fwait
mov
nop
adc
imul
inc
scas
ror
or
xchg
data16
add
xchg
mov
test
xchg
jl
or
xor
push
sub
mov
out
or
clc
inc
pushf
jnp
test
or
std
adc
xchg
out
sbb
sub
ja
xor
imul
jecxz
mov
pop
push
jp
and
rcl
cld
dec
xchg
sub
inc
jl
xchg
mov
rcr
cmp
lock
enter
add
repnz
adc
jae
sti
mov
inc
sub
sub
es
repnz
stos
pop
mov
jge
and
cmc
mov
mov
ds
and
lds
xchg
jns
push
movs
sahf
push
inc
scas
xchg
lock
xor
pop
xchg
(bad)
movs
loope
add
out
jg
jg
sub
mov
cmp
shl
out
mov
mov
xchg
fwait
call
cmp
and
inc
add
sbb
xchg
add
in
(bad)
aam
stos
xchg
loop
inc
xor
xchg
aad
push
add
test
inc
jmp
add
adc
xchg
in
js
xor
push
cmps
dec
movs
xchg
es
dec
fistp
ror
push
pop
mov
and
cmp
cdq
and
test
xchg
dec
jmp
push
bound
repz
mov
mov
sub
stc
movs
mov
xor
out
jmp
je
pop
jge
mov
mov
fisubr
(bad)
pop
xchg
and
push
movs
cmp
mov
sub
in
clc
add
sahf
and
xchg
cmp
mov
lods
lahf
mov
xchg
pop
aas
jns
or
cld
es
sbb
pop
mov
push
pop
mov
jmp
jge
xchg
pop
push
jle
int3
inc
out
call
xchg
pop
jp
out
cs
(bad)
and
xchg
jl
cmp
pop
adc
ret
add
inc
fisub
lahf
daa
mov
jno
sub
cmp
in
jmp
fwait
jae
imul
in
dec
arpl
xchg
jmp
inc
lock
jbe
stc
pop
mov
push
and
leave
dec
sbb
lods
pop
test
jle
cmp
cmp
xchg
dec
inc
dec
xor
lock
outs
fldcw
std
xchg
pop
mov
push
jle
test
xchg
scas
shl
stc
dec
push
les
xchg
out
cmp
xchg
aam
inc
or
adc
fcmovnb
jle
xchg
cli
adc
ret
sub
neg
xor
pop
adc
xchg
ds
dec
cli
mov
scas
push
xor
inc
xchg
push
xchg
out
in
cwde
jbe
pop
arpl
push
dec
adc
scas
dec
push
inc
(bad)
fld
in
pop
xchg
or
xor
pop
jmp
cmp
out
xchg
sbb
sbb
into
inc
mov
je
call
stos
repz
add
or
add
in
ror
push
xchg
bound
cwde
mov
mov
mov
and
rol
mov
cmp
ret
mov
das
mov
fsubr
mov
xchg
and
push
enter
(bad)
test
shr
push
pop
jae
add
pop
xchg
aad
push
push
mov
ror
fwait
and
ficom
xchg
ffreep
fyl2xp1
jae
cmp
cld
jbe
fs
and
fwait
sbb
ja
push
ins
mov
imul
push
in
mov
pusha
test
rcl
sub
addr16
fisubr
xchg
push
jg
jno
mov
out
or
xchg
ins
push
div
xlat
and
dec
mov
xchg
push
and
jge
mov
xchg
sub
push
cld
mov
imul
cmp
jbe
(bad)
xchg
test
xor
mov
xchg
les
or
and
mov
ins
and
fldenv
xchg
xchg
shl
dec
mov
inc
xchg
pop
ret
mov
fistp
fwait
out
in
adc
jge
iret
dec
xchg
mov
xchg
inc
call
mov
mov
xchg
cmp
sbb
int
jecxz
mov
sbb
movs
or
mov
(bad)
push
push
add
pop
mulps
xchg
xchg
shr
test
repnz
push
mov
xchg
mov
add
mov
arpl
and
adc
jb
jl
jmp
dec
fst
xchg
retf
stos
loope
cmp
xlat
sub
adc
or
xchg
ja
pop
jmp
inc
aad
jnp
mov
int
push
and
push
xchg
enter
and
repnz
pop
mov
xchg
mov
xchg
mov
sub
lods
lock
popf
or
xor
aad
xchg
push
(bad)
push
dec
cmp
repz
mov
xor
ins
xchg
lock
cli
mov
xchg
enter
sbb
inc
adc
mov
and
push
mov
cmps
cs
mov
cmp
xchg
xchg
ja
test
mov
mov
xchg
xor
or
pop
add
mov
popf
fild
mov
inc
fst
sbb
sub
(bad)
push
xor
mov
xlat
fwait
inc
sub
lods
lahf
or
test
add
push
repz
cdq
xchg
inc
sub
popf
test
mov
push
xchg
movs
and
movs
xchg
push
loope
ja
cmps
xor
out
movs
leave
and
iret
adc
mov
stos
fcom
scas
mov
retf
push
push
pop
xchg
ja
jle
dec
mov
jp
mov
les
mov
sti
ret
fsub
sahf
stos
or
(bad)
push
xchg
pop
cmc
scas
xor
jbe
xchg
pop
test
xlat
xchg
shl
cmp
loope
cmp
fwait
jns
inc
mov
test
and
xchg
das
or
adc
into
mov
jo
push
xchg
mov
pop
aam
sub
jno
scas
jae
adc
inc
and
push
mov
xchg
jle
pop
xchg
xchg
inc
aad
mov
and
mov
dec
(bad)
aam
les
lods
ret
fisttp
mov
inc
(bad)
xchg
inc
popf
sub
sub
mov
xchg
out
xor
movs
in
inc
xchg
popf
out
push
add
cmp
test
xchg
cmp
adc
aas
pop
xchg
xchg
pushf
inc
jmp
lahf
add
movs
lea
xor
fwait
and
add
lods
hlt
xchg
repz
jge
mov
stc
xchg
sar
mov
iret
push
pop
inc
sub
xchg
loop
out
test
sub
lods
cmp
add
in
adc
ffree
daa
shl
ins
je
xchg
inc
loope
sub
lods
adc
mov
push
sub
int
cmp
dec
sub
cmps
fstp
scas
or
xor
stos
test
xchg
xchg
inc
or
dec
fidivr
jbe
or
xchg
das
mov
lds
add
mov
xchg
stos
adc
hlt
adc
ins
pop
fwait
aam
mov
push
fild
jp
fwait
sbb
out
aam
adc
in
mov
loope
adc
and
sbb
(bad)
xchg
sub
fdiv
xchg
call
(bad)
aad
xchg
mov
call
rcl
push
(bad)
push
out
xchg
fldenv
arpl
pop
xchg
cmp
sub
push
xor
shl
idiv
and
xchg
mov
call
and
jb
std
cli
jmp
dec
mov
inc
int3
xchg
lods
jge
xchg
iret
ins
mov
mov
push
mov
push
xchg
inc
out
(bad)
lds
add
fstp
push
push
jbe
sahf
add
aad
popa
pop
and
jg
add
add
jl
xchg
fcom
mov
and
sti
inc
adc
ds
inc
mov
xchg
mov
cmp
xchg
pusha
retf
(bad)
jmp
fwait
xchg
out
xor
cmps
pop
xchg
je
adc
pop
arpl
mov
(bad)
push
lds
fwait
enter
out
mov
ss
xchg
mov
jmp
aaa
or
xchg
mov
fild
xchg
or
bound
fwait
add
mov
pushf
cmp
cwde
fwait
js
jle
stos
aam
mov
xchg
sub
or
xchg
arpl
imul
popf
outs
cmps
jne
ja
push
xchg
jge
mov
pop
mov
adc
push
sub
mov
dec
add
(bad)
aas
pop
cmp
mov
in
pop
imul
cwde
nop
aam
xchg
mov
push
push
sahf
dec
ins
into
cmp
xchg
in
and
xchg
mov
retf
mov
mov
bound
loop
mov
jl
xchg
xchg
pop
lds
jmp
loop
jl
scas
mov
ficom
shl
xchg
jb
adc
int
xchg
xchg
push
adc
imul
retf
mov
xchg
pop
inc
fst
mov
lock
push
fidiv
mov
inc
add
mov
mov
dec
fwait
aam
loopne
mov
hlt
repz
mov
cwde
arpl
leave
out
fdivp
dec
call
in
daa
inc
sbb
fisttp
jmp
and
fcom
xchg
dec
adc
add
lods
xor
or
xchg
addr16
std
or
pmaxub
scas
xchg
and
retf
(bad)
cmp
dec
ret
aas
test
xor
retf
mov
xchg
rol
ins
movs
cmp
or
not
dec
aam
xchg
mov
jo
add
or
xchg
jns
shr
je
pop
std
xchg
fs
fwait
or
arpl
je
add
and
xor
xchg
or
in
cmp
out
xchg
fist
aaa
cmp
daa
xchg
push
in
stos
push
mov
dec
pop
xchg
sub
or
dec
ffree
pop
xchg
push
push
add
mov
dec
push
fld
add
xor
vmread
(bad)
fiadd
enter
in
xchg
push
mov
or
jge
lods
xchg
clc
xchg
jb
mov
les
xchg
iret
lds
jg
jns
cdq
xchg
and
fs
cli
sbb
inc
arpl
or
lods
rcr
fwait
sbb
jmp
in
dec
loope
jp
xchg
mov
out
xchg
inc
pop
jns
loope
mov
pop
jmp
push
jmp
add
repnz
movs
mov
xchg
pop
jns
push
dec
retf
mov
sub
stos
pop
push
xchg
imul
add
in
inc
and
inc
xor
and
aaa
pop
xchg
in
or
sub
fdiv
lahf
xchg
xchg
int
lods
and
mov
js
adc
sbb
sbb
mov
bound
pop
sahf
repnz
fist
imul
stos
jl
push
adc
xchg
and
cmp
pusha
add
mov
repnz
xchg
fsub
ror
xchg
cmp
xchg
jbe
or
xchg
test
loope
xor
xor
mov
inc
dec
sahf
and
xchg
jb
or
fwait
aad
push
xchg
mov
and
adc
mov
inc
leave
pushf
je
jg
call
push
adc
push
push
out
xchg
lahf
in
ins
scas
out
mov
xchg
ja
cmp
dec
lods
mov
in
fwait
xchg
cmps
xor
jl
(bad)
pop
pop
les
outs
lock
psubb
cwde
out
xchg
ins
or
sub
mov
cmc
rcl
pop
rol
test
push
(bad)
xchg
aaa
xchg
sbb
cmc
pop
in
cmc
ja
pushf
inc
xchg
cld
(bad)
mov
lods
imul
test
jp
pop
mov
je
mov
xchg
cld
sahf
mov
pop
jne
pop
cmp
pop
mov
xor
lods
jbe
aaa
xchg
xor
ficom
imul
aam
rcr
lods
push
xchg
mov
jmp
pop
out
or
xchg
xchg
lea
jl
rcl
mov
fistp
mov
fnstenv
pop
xchg
pop
sbb
jno
xchg
ins
xchg
xchg
ss
adc
mov
outs
in
push
xchg
stos
loop
xchg
or
add
fadd
adc
cmc
or
push
sub
xchg
pop
sbb
xchg
xlat
outs
xchg
stc
lods
adc
mov
dec
sub
cli
es
hlt
add
xchg
xor
(bad)
push
xchg
xchg
mov
xchg
(bad)
ja
sub
dec
das
jecxz
pmullw
imul
ja
stc
retf
push
rol
adc
and
push
out
xchg
add
xchg
or
imul
mov
add
lods
je
fld
pop
scas
dec
arpl
int3
ss
in
jmp
movs
push
imul
fwait
shl
lock
dec
popf
es
dec
xchg
test
push
(bad)
xchg
push
pop
sub
push
push
jmp
nop
push
push
dec
dec
sbb
xchg
sbb
mov
mov
adc
or
sbb
or
xchg
jmp
cmp
jp
or
out
mov
xchg
stc
mov
xchg
lock
xor
pop
mov
jecxz
ins
xchg
sub
push
adc
push
mov
xchg
mov
mov
xchg
dec
mov
or
sbb
add
dec
icebp
hlt
cmp
sub
pop
adc
loope
mov
(bad)
ret
les
jno
in
xchg
sbb
mov
adc
push
je
mov
mov
lock
adc
iret
loop
je
xor
add
pop
inc
xchg
bound
sub
sbb
jbe
adc
in
xchg
adc
xchg
mov
pop
loop
mov
xor
mul
push
lea
cdq
enter
dec
xchg
xor
adc
xchg
xchg
jecxz
jle
and
cmps
push
xchg
in
inc
cwde
cmp
(bad)
jae
adc
xchg
js
rcl
cmps
sbb
push
rcl
test
add
cs
sbb
aaa
pop
xchg
jp
xchg
popa
ror
dec
or
jae
in
bound
jecxz
js
sub
push
clc
mov
xchg
jnp
xchg
mov
iret
mov
xchg
cwde
cmp
xchg
mov
aas
add
sub
xchg
cmp
dec
call
add
add
xor
xchg
fcomi
enter
test
xchg
pop
xchg
xlat
cmp
pop
fwait
mov
push
les
jmp
movs
mov
ret
pop
mov
sete
pusha
enter
popa
xchg
cmps
out
pop
xchg
jmp
mov
ds
xchg
inc
fsub
push
mov
xchg
or
retf
or
ret
movs
je
mov
inc
xchg
test
mov
mov
pusha
out
xchg
inc
xchg
lods
jo
cld
xchg
or
or
in
popf
pushf
sti
lods
adc
sub
jb
xchg
fldenv
repnz
test
xchg
adc
xor
cmp
inc
mov
icebp
pop
xor
xchg
mov
dec
push
jns
xchg
ror
leave
xchg
and
inc
xchg
fmul
add
aaa
xchg
jmp
movs
adc
rcl
or
add
xor
dec
call
iret
mov
dec
fst
add
fwait
mul
dec
push
inc
cmp
ja
retf
and
jnp
loopne
(bad)
mov
mov
sub
adc
xchg
fisub
or
jg
sub
pop
adc
out
xchg
xchg
out
in
lds
push
jle
mov
hlt
cmp
loope
sahf
mov
pop
out
xchg
icebp
inc
repnz
mov
je
test
xchg
mov
sbb
into
xchg
popf
shr
lods
inc
cs
mov
xchg
pop
stos
and
xor
fcmovnb
xchg
sbb
and
pop
xchg
xchg
gs
fiadd
jb
jns
push
loopne
enter
push
xchg
adc
movs
xchg
inc
mov
push
sub
add
enter
ja
sub
push
test
outs
out
jo
xor
pop
xchg
sub
xchg
jns
push
adc
xchg
dec
push
xchg
sbb
dec
enter
cld
dec
sbb
int
in
lds
add
inc
lahf
pop
ja
lods
xchg
mov
cld
push
or
stos
xchg
imul
ss
mov
xchg
lahf
or
ret
ret
jmp
xlat
sbb
mov
movs
loopne
jmp
mov
hlt
push
test
test
xchg
mov
pop
loop
xchg
mov
dec
pop
inc
(bad)
jmp
jle
dec
(bad)
scas
into
cli
xchg
mov
test
nop
push
outs
xor
mov
shr
push
cmp
movs
sbb
pop
lock
js
ins
sub
bound
mov
mov
xchg
mov
xor
adc
movs
jg
jmp
jge
mov
xchg
lea
enter
mov
push
push
add
xchg
and
mov
xchg
push
fs
sti
pop
add
xchg
push
nop
xor
or
mov
pop
add
jmp
dec
icebp
pop
jmp
xchg
mov
mov
jge
push
xchg
or
or
xchg
ins
xchg
retf
pop
jnp
xchg
cmp
xlat
hlt
and
ja
dec
or
xchg
or
sbb
ins
inc
xchg
ret
push
(bad)
fisub
jmp
not
int
xchg
int3
or
dec
movs
fimul
inc
mov
cmps
test
mov
push
xchg
cli
push
lods
sbb
mov
sub
push
or
loop
xchg
xchg
popa
inc
xor
hlt
pusha
dec
test
push
cmp
ficom
dec
jg
xchg
add
stos
pop
pop
push
and
adc
out
cdq
test
sub
xchg
ret
ss
dec
and
or
xchg
xor
scas
int3
push
ret
mov
xchg
xor
jb
dec
mov
cld
out
push
bound
nop
inc
xchg
(bad)
(bad)
shr
leave
dec
mov
fwait
lock
in
push
and
ins
sbb
xchg
mov
retf
cmp
xchg
pop
clc
mov
arpl
pop
movs
jno
js
xlat
xchg
mov
push
das
(bad)
pop
test
fwait
inc
rcr
outs
fst
jbe
js
xchg
push
ins
out
fsubr
mov
neg
adc
outs
xchg
xchg
jmp
pushf
dec
leave
lods
mov
adc
sub
les
pop
les
xchg
das
jg
or
or
xchg
fild
or
in
imul
mov
je
repnz
xchg
jo
out
into
xor
ins
(bad)
cmps
test
pop
xchg
jo
daa
fs
push
popf
or
pop
push
inc
or
xchg
add
jmp
adc
inc
(bad)
cmp
aad
pop
or
mov
fstp
ins
arpl
xlat
adc
stos
pop
mov
xchg
adc
push
xchg
push
icebp
mov
mov
mov
xchg
lahf
adc
fadd
push
xor
xlat
cwde
fnstsw
aas
xchg
push
inc
adc
mov
and
int3
cwde
stos
cwde
mov
xchg
mov
adc
cs
pop
std
(bad)
aas
out
in
xchg
mov
(bad)
fldenv
repnz
(bad)
mov
and
fistp
cwde
xchg
cmp
mov
xchg
sti
dec
into
push
dec
push
fstenv
xlat
mov
lock
test
mov
push
xchg
mov
add
out
xchg
xchg
int3
add
outs
xchg
out
sub
inc
or
hlt
repnz
repz
mov
loope
loopne
in
pop
cwde
mov
test
loopne
lea
sub
xchg
das
pop
jl
cld
adc
inc
cmp
ins
sbb
ret
inc
fsubr
dec
mov
js
sub
into
ret
outs
xchg
mov
ss
xchg
mov
fiadd
js
xchg
xchg
inc
outs
stos
dec
mov
repnz
pop
sbb
pusha
fwait
sbb
div
ja
or
sub
aam
xchg
stos
mov
int
nop
or
xchg
popf
lahf
xor
fidiv
mov
jg
adc
push
adc
cmc
popf
je
call
or
jp
xchg
test
sub
sub
hlt
xchg
cwde
loopne
xchg
ja
ret
nop
mov
xchg
(bad)
jae
sbb
xchg
outs
test
std
mov
or
test
add
xchg
ficomp
cmps
fild
cwde
int
mov
mov
aam
movs
xlat
dec
xchg
into
outs
ret
mov
mov
mov
out
jae
fwait
pop
push
xchg
call
ds
mov
fwait
sbb
les
add
(bad)
inc
adc
sub
aam
xor
outs
xchg
jle
mov
sub
(bad)
xchg
mov
in
int
inc
xchg
scas
fcomp
loop
xchg
mov
iret
xor
ret
jl
rcl
jb
adc
dec
(bad)
adc
sar
mov
mov
sbb
loopne
mov
xchg
stos
xchg
xor
daa
es
lods
xchg
cmp
cmp
dec
xchg
add
mov
lods
add
imul
jns
sti
loope
retf
fwait
scas
push
adc
idiv
pop
jno
pop
ins
nop
out
adc
inc
sbb
xor
inc
gs
adc
pop
push
mov
xchg
mov
(bad)
mov
movs
sbb
or
xchg
retf
je
repz
sub
push
and
fwait
imul
xor
pop
dec
cwde
xchg
xchg
mov
mov
test
(bad)
push
xchg
aam
pop
sar
jb
cwde
xchg
push
les
mov
test
adc
push
ds
mov
cmp
and
out
sbb
cwde
sub
mov
fldenv
dec
fistp
xchg
xor
sbb
js
jmp
jae
and
into
xchg
xor
aad
in
mov
cmp
movs
sub
(bad)
xchg
hlt
ret
push
inc
adc
adc
int
xor
jno
push
mov
mov
cmp
int
js
sub
fadd
shl
mov
mov
xor
not
cmp
movs
xchg
mov
push
(bad)
jmp
and
mov
dec
cmp
out
mov
mov
repz
loopne
add
jnp
jb
sar
mov
mov
out
les
xchg
xchg
jmp
call
cmps
hlt
std
repnz
jb
xchg
and
fs
sbb
xchg
cs
in
xchg
pop
mov
in
mov
icebp
je
in
enter
les
cli
mov
aas
xchg
or
loopne
dec
xchg
sub
jb
push
cwde
mov
pop
add
pusha
out
xchg
imul
inc
les
adc
dec
loop
iret
mov
ins
daa
cwde
xchg
mov
fwait
mov
xchg
mov
adc
xchg
sahf
mov
(bad)
mov
ret
les
xchg
test
mov
push
adc
pop
jne
sub
ins
pop
fwait
cmp
xchg
mov
sub
je
das
xor
push
aad
add
cmp
mov
test
push
jae
mov
stc
scas
pushf
les
adc
cmps
jne
sbb
dec
xchg
push
and
das
dec
jnp
xchg
jecxz
jmp
pop
imul
pop
pop
adc
(bad)
xchg
jns
das
sub
sbb
and
fwait
jno
jns
mov
push
mov
xchg
dec
mov
adc
pop
addr16
and
jle
inc
adc
fwait
imul
mov
or
div
push
fwait
xchg
(bad)
rcl
add
call
push
int
mov
es
out
and
cwde
pop
push
cmovnp
dec
xchg
dec
cld
xchg
mov
inc
inc
adc
ins
push
outs
popa
add
xchg
xchg
add
sbb
gs
mov
push
sub
xor
stos
je
stc
jge
push
aad
mov
ror
adc
add
or
mov
fnstsw
and
enter
retf
pusha
and
xchg
xor
mov
(bad)
jl
push
clc
push
mov
xchg
std
call
xchg
cmp
jg
adc
mov
out
xchg
push
push
lock
jmp
dec
inc
iret
sub
push
dec
and
mov
mov
xor
xchg
pop
lods
cmps
sub
pop
adc
and
fwait
out
xchg
imul
mov
enter
in
sub
xchg
sti
or
and
jecxz
or
sbb
sahf
mov
xchg
and
mov
aam
not
std
adc
sbb
cmp
xor
inc
mov
ret
sub
xchg
xchg
imul
xchg
idiv
or
inc
rcl
scas
xchg
mov
sub
xchg
xor
fwait
mov
sar
mov
neg
mov
outs
aaa
adc
imul
cmps
mov
leave
and
pop
fstp
outs
or
lahf
cmp
xor
push
xor
popf
xchg
jo
cmp
sub
iret
stos
pop
jns
xchg
das
lea
shr
dec
into
mov
xchg
in
aaa
add
xchg
lods
xchg
popa
mov
outs
inc
shl
scas
dec
xchg
daa
xchg
mov
adc
xchg
addr16
ins
ins
jae
(bad)
xchg
push
adc
add
jno
mov
push
fs
xchg
jmp
sub
enter
sbb
scas
fst
cmp
inc
xchg
xor
ret
mov
xchg
je
loop
ret
pop
xchg
dec
scas
mov
xchg
push
jmp
pop
inc
fwait
xchg
xchg
push
sub
popa
rcr
ret
ds
loope
clc
in
sub
shr
sub
lea
mov
nop
jnp
loope
dec
jmp
mov
fisub
xchg
inc
pop
mov
or
jb
icebp
ds
mov
cmp
and
mov
bound
in
pop
xchg
and
fcomp
scas
test
or
pop
loope
ja
fdivr
xchg
xchg
cld
int3
dec
(bad)
dec
mov
sbb
mov
xchg
mov
xchg
test
movs
mov
xchg
lea
adc
outs
push
jno
pushf
(bad)
xchg
xlat
dec
call
(bad)
fs
fs
inc
(bad)
lea
jns
je
test
and
mov
jecxz
inc
jo
cdq
stos
iret
and
pop
adc
sub
xchg
in
sub
xchg
sub
shl
pop
scas
add
sbb
jae
push
jecxz
xor
fsub
sbb
(bad)
dec
call
cmp
xchg
bnd
imul
inc
dec
xchg
mov
loopne
and
xchg
dec
mov
xchg
lahf
jo
adc
adc
sbb
push
pop
loope
shl
push
xchg
lahf
sub
xchg
adc
ds
mov
aam
cli
mov
shr
idiv
jge
pop
loopne
add
mov
xchg
mov
lahf
scas
push
xchg
xchg
adc
dec
add
test
jo
jmp
and
xchg
mov
cmps
dec
and
out
fucom
iret
dec
cli
xchg
(bad)
in
retf
jb
jmp
xchg
dec
add
cmc
mov
test
ss
ret
stc
and
add
jnp
call
xchg
push
movs
mov
xchg
pop
adc
xor
fsub
mov
xchg
inc
scas
add
pop
int3
ficomp
aam
movs
mov
sar
popf
addr16
loop
xchg
ror
enter
or
mov
xchg
sub
sub
loope
aam
sbb
mov
sub
xchg
pop
add
jno
and
out
ss
xchg
aam
sbb
xchg
push
mov
ins
xchg
movs
pusha
push
iret
sub
or
fdiv
adc
or
fst
ror
xchg
js
cmp
xchg
dec
mov
shr
aam
lea
test
inc
inc
jne
sbb
xchg
mov
push
cld
pop
dec
(bad)
stos
in
jae
jo
lahf
imul
xchg
inc
mov
fstp
push
xchg
sbb
(bad)
jb
std
xor
cdq
cmp
xor
(bad)
int3
dec
in
leave
or
dec
in
cmp
bound
(bad)
fisttp
jmp
mov
push
pop
(bad)
inc
jecxz
test
or
xchg
jno
aam
xor
inc
aas
xchg
les
push
and
cmp
movs
retf
call
(bad)
jne
jnp
and
cmp
ins
xchg
test
push
xchg
xlat
xor
jae
mov
nop
cs
jle
add
cli
sbb
adc
mov
adc
or
jbe
lea
jle
sub
pop
and
add
sbb
pushf
aam
aas
pop
push
test
or
mov
and
push
fsub
pop
or
cld
or
nop
or
adc
mov
ins
and
shl
clc
arpl
mov
or
movs
xchg
or
hlt
popf
loopne
jae
xchg
icebp
xor
stc
push
sbb
xchg
fisub
icebp
imul
or
dec
or
cmps
push
mov
add
xor
fsub
xchg
sbb
push
mov
xchg
jecxz
adc
sbb
push
repz
mov
adc
outs
fwait
mov
xor
fwait
pop
add
lods
test
adc
(bad)
adc
fiadd
clc
push
repz
scas
xor
popf
sub
jo
sahf
adc
pop
mov
add
cmp
fsub
cmp
pop
out
(bad)
fwait
sbb
cmp
mov
mov
pop
cmp
stos
inc
adc
xchg
rep
pop
xchg
mov
stos
bound
mov
sub
adc
nop
xchg
movs
jge
inc
repz
pop
and
xchg
int3
pop
scas
cmp
pop
retf
xchg
pop
icebp
pusha
xor
jp
cli
dec
cmp
inc
shl
out
ja
xchg
push
mov
jp
rcl
and
(bad)
pop
fimul
xchg
loope
cmp
jg
and
mov
(bad)
push
div
xchg
rcr
inc
mov
stc
(bad)
xchg
dec
imul
xchg
mov
fsub
outs
mov
dec
inc
and
dec
jbe
fcom
pop
xlat
ins
xchg
cmp
(bad)
scas
popf
aaa
xchg
and
sbb
(bad)
jo
int
xchg
push
dec
jge
pop
adc
sub
xchg
scas
shr
into
mov
adc
mov
xchg
daa
pop
out
aad
adc
int3
movs
adc
add
push
dec
xchg
add
cmp
push
cmps
mov
cmp
sub
in
aaa
inc
mov
push
cmps
push
enter
ins
mov
retf
outs
fsub
sub
aad
adc
pop
mov
mov
(bad)
fwait
sub
cdq
mov
stos
xchg
mov
xchg
xor
(bad)
arpl
lahf
pop
in
aad
adc
ret
mov
outs
in
inc
shl
outs
lahf
(bad)
js
pop
mov
xchg
int
add
(bad)
mov
xchg
or
dec
adc
pop
scas
lds
shl
xchg
fldpi
pop
or
les
retf
mov
pop
and
(bad)
xlat
xchg
mov
jns
xor
adc
sbb
(bad)
fsub
gs
cdq
sahf
xchg
jbe
fiadd
jge
lock
rol
mov
lahf
cmp
addr16
and
xchg
test
xchg
mov
hlt
xor
mov
or
pop
repnz
sar
sub
jle
(bad)
(bad)
sahf
cli
lods
ror
xchg
rcl
and
shl
dec
adc
adc
shr
iret
loopne
and
test
mov
jno
loope
xchg
sub
jmp
movs
mov
fdivr
xchg
gs
pushf
rcr
adc
adc
mov
ins
ins
pushf
xchg
pop
scas
das
mov
xchg
pop
sbb
cwde
jb
inc
ins
test
jbe
xchg
fmul
std
in
retf
cli
push
xchg
(bad)
push
(bad)
(bad)
mov
cwde
mov
jmp
dec
push
ror
push
xchg
ror
cmp
dec
fsub
xchg
cmps
sub
mov
aam
jge
in
test
mov
jno
ficom
scas
aaa
imul
mov
push
pop
xlat
pusha
add
cmp
mov
xchg
xchg
out
pop
jae
ja
xchg
pop
lea
dec
iret
cmps
push
xchg
add
jg
jmp
push
push
jne
adc
pop
leave
callw
dec
in
mov
mov
hlt
lea
adc
cmc
inc
test
fiadd
adc
aad
cmc
ret
jle
pop
fs
outs
stos
dec
retf
ins
dec
xchg
cdq
std
jmp
xor
xchg
xchg
xlat
leave
inc
jl
mov
out
push
retf
inc
xchg
(bad)
movs
leave
ror
jle
mov
ins
adc
ficomp
test
sub
les
mov
adc
iret
sbb
or
sub
sbb
push
sahf
mov
hlt
call
xchg
lahf
xor
add
cmp
mov
dec
fist
adc
inc
pushf
xor
repnz
push
(bad)
fcmovne
retf
loope
test
fincstp
(bad)
in
aam
neg
ins
and
cmps
imul
je
add
outs
pusha
pop
xchg
push
cld
or
popf
push
inc
pop
dec
xchg
jnp
loopne
xchg
mov
aam
mov
cmp
es
cli
add
ret
sbb
pop
mov
les
add
adc
xchg
inc
inc
pop
lahf
sbb
dec
jmp
cmp
xchg
xor
dec
dec
xchg
imul
outs
sbb
xchg
shl
mov
sub
aam
xor
add
fistp
or
cmc
lea
xchg
dec
cmp
ja
mov
xor
aaa
sbb
mov
add
mov
outs
pop
repnz
xchg
push
leave
xchg
sbb
inc
add
(bad)
xchg
cdq
xchg
fst
and
outs
xchg
jo
add
push
sub
aam
jp
or
sub
clc
lods
sbb
adc
add
jno
cmp
jnp
mov
cwde
jp
popa
arpl
xchg
icebp
jne
add
out
jns
xchg
(bad)
sbb
das
ret
out
jmp
pop
xchg
stos
dec
xchg
(bad)
jns
in
mov
and
pop
rcr
xchg
mov
xchg
xchg
ins
add
leave
mov
adc
arpl
mov
daa
and
shl
adc
mov
jmp
xor
scas
repnz
paddq
lock
and
pop
lods
scas
popf
aam
push
stos
rcr
jnp
dec
clc
mov
nop
jge
jl
adc
in
or
(bad)
lahf
inc
fs
adc
fs
xchg
int3
cmps
push
mov
fst
xlat
in
popa
test
add
xchg
mov
pop
pop
sbb
stos
xchg
aaa
in
fmul
test
xchg
in
cmp
add
enter
mov
dec
cmp
lock
inc
mov
in
pop
dec
mov
mov
or
xor
xchg
cmp
push
mov
pop
loopne
call
in
adc
ins
pop
call
sbb
add
jne
mov
rol
repz
cmp
mov
arpl
pop
jge
mov
jp
addr16
dec
dec
xlat
push
mov
xchg
pop
mov
enter
cmps
les
and
dec
ins
in
pop
iret
outs
jbe
cmp
pushf
xchg
daa
popa
add
mov
cs
aam
dec
dec
xchg
or
xchg
outs
out
dec
push
(bad)
test
sahf
xor
jmp
(bad)
jmp
or
xchg
xor
sbb
xchg
jle
imul
aaa
in
fs
jp
fwait
in
jg
xchg
or
scas
into
(bad)
xchg
js
mov
mov
xlat
xchg
xor
add
(bad)
xchg
fcomp
pop
pop
clc
enter
iret
ds
jne
cs
push
fwait
push
dec
(bad)
les
fisub
test
jo
dec
sbb
loopne
adc
dec
mov
ret
jb
xchg
adc
stos
lahf
add
cmp
mov
xchg
in
push
push
pop
cmp
stos
xchg
mov
sub
xchg
and
sbb
dec
(bad)
jns
das
xchg
cmp
addr16
not
fwait
or
retf
xchg
push
ret
mov
xlat
or
enter
inc
xor
jae
sar
xchg
outs
loope
cs
push
xchg
hlt
jecxz
jbe
mov
out
mov
cdq
fiadd
lods
sahf
pop
push
mov
in
xchg
out
cmp
jecxz
cld
adc
call
stos
mov
shl
cmps
retf
popf
add
adc
jge
pop
cli
mov
xchg
or
fwait
popf
call
std
mov
push
repz
jp
hlt
mov
xor
jmp
out
lds
int
push
push
mov
push
imul
and
xchg
jl
xchg
jp
sahf
sub
xchg
jg
inc
dec
or
xor
push
imul
pop
mov
jbe
xchg
mov
and
sub
mov
xchg
stc
fucomp
dec
jo
mov
int
jae
adc
pop
jmp
cmps
push
leave
sub
cld
push
call
cmp
scas
xchg
inc
dec
lds
gs
pop
xchg
fmul
(bad)
dec
xchg
(bad)
and
jecxz
add
cmp
test
clc
ins
out
and
jnp
retf
popf
ss
pusha
add
jmp
lea
fidivr
repz
xchg
and
(bad)
sub
mov
cmp
jb
test
leave
ficomp
scas
test
mov
mov
outs
rcl
into
dec
mov
call
mov
mov
xchg
push
rcl
shr
mov
xor
adc
jle
loope
not
stos
out
xchg
push
(bad)
cmp
fcom
adc
mov
cwde
call
pop
jbe
shl
jmp
pop
imul
mov
popf
cs
fldenv
int3
ret
(bad)
in
cli
cld
test
div
mov
(bad)
pop
mov
rol
sbb
dec
jl
mov
inc
hlt
test
in
sar
cs
xchg
rcl
stc
sbb
xchg
sub
not
cmp
stos
xor
or
dec
mov
enter
rcl
sahf
push
lea
lock
aam
fwait
and
cli
xor
test
retf
es
jnp
ins
pushf
sub
xchg
and
out
mov
pusha
loope
jg
xchg
push
push
mov
sbb
nop
sub
xchg
fistp
adc
js
outs
xchg
add
test
stc
test
fcomp
sbb
das
push
dec
mov
lea
or
retf
jmp
iret
aam
sub
lds
xor
mov
out
push
ss
or
xchg
addr16
shl
nop
(bad)
push
mov
sar
mov
repz
fdiv
jmp
push
and
xchg
mov
inc
sbb
mov
adc
push
mov
cli
xchg
sar
dec
add
mov
or
xor
or
cmp
sbb
push
sub
or
cmps
scas
mov
xchg
cmps
jne
test
call
push
in
loope
mov
push
(bad)
rcl
cmp
jl
xor
(bad)
in
adc
aas
fist
mov
test
add
das
leave
ja
mov
mov
cmp
dec
inc
sti
and
push
sbb
hlt
and
psubsw
xchg
xchg
clc
xchg
jmp
dec
inc
loop
sub
xchg
jae
push
xor
and
push
lds
push
fisttp
pushf
(bad)
sub
push
xchg
cs
ins
mov
xchg
push
adc
sub
lock
mov
cmps
inc
cmp
xchg
or
inc
jg
aas
fsubp
lahf
fdiv
out
loop
js
xchg
xchg
adc
or
jp
xchg
adc
or
test
xchg
gs
lods
push
inc
inc
sti
dec
xchg
push
or
xchg
js
int3
rol
push
sti
xchg
in
jno
sub
test
sbb
mov
xor
aaa
ins
xchg
mov
imul
pop
out
iret
or
xchg
push
inc
lock
ss
add
ins
out
xchg
mov
sub
fidivr
or
push
xchg
pop
in
or
ins
or
into
jnp
fwait
in
cmc
cmp
mov
in
mov
addr16
cmp
out
in
push
mov
in
xchg
xchg
mov
jmp
retf
mov
test
add
mov
sub
push
outs
or
cmp
and
out
sub
adc
lods
xchg
stos
ins
cwde
outs
rcl
popa
into
xchg
(bad)
rcl
dec
sub
push
sub
xchg
call
cmps
dec
arpl
pop
xchg
scas
cmp
push
push
fisub
xor
movs
or
pop
mov
xchg
xchg
dec
loopne
inc
jl
jmp
fwait
popa
fisubr
mov
push
fmul
int
mul
dec
sar
xchg
push
mov
mov
sub
cmc
stos
addr16
cwde
mov
pop
sbb
mov
xor
inc
xchg
dec
outs
repz
mov
andps
lea
xchg
inc
cmp
mov
adc
xchg
ret
test
jo
mov
add
pop
test
mov
fidiv
in
sbb
xchg
cli
cmps
shl
xor
mov
cmp
sbb
push
push
into
dec
fwait
rcl
or
data16
sub
ds
dec
push
rcr
dec
adc
and
std
shr
lea
and
xchg
stos
ss
in
xchg
hlt
call
jg
rcl
mov
lea
ds
cmp
push
loopne
bound
jns
scas
xchg
inc
dec
fwait
cmp
mov
sahf
xchg
lods
inc
ja
xor
lds
mov
mov
adc
xchg
inc
jae
jo
add
adc
xor
sbb
fldenv
mov
adc
popf
movs
xchg
pop
aad
fwait
into
jg
out
loop
cmp
jb
hlt
movs
adc
fmul
lods
mov
retf
adc
rcr
and
pop
and
xor
sbb
and
shr
jle
xchg
outs
sbb
fst
mov
(bad)
in
or
out
push
cmps
mov
mov
xlat
imul
stc
aas
fwait
pop
xor
shl
stos
int
xor
out
aas
jecxz
aad
jmp
int3
mov
pusha
sub
ins
lods
xchg
into
mov
aam
pop
jmp
cmps
sbb
xchg
imul
add
and
bound
addr16
pop
mov
les
mov
rcl
mov
mov
(bad)
int3
imul
and
xchg
xchg
push
and
xchg
and
dec
xchg
test
dec
clc
adc
movs
inc
xchg
daa
call
or
shr
or
movs
imul
push
(bad)
sbb
stos
add
dec
and
inc
and
sub
cmp
imul
cdq
xchg
xchg
jbe
lods
int3
cmp
xchg
jle
sbb
pop
add
jns
xchg
or
sbb
or
aam
adc
je
out
mov
fld
mov
stos
jnp
sbb
cmps
xchg
mov
mov
mov
xchg
out
rol
cmp
rsm
push
mov
xchg
mov
add
xchg
mov
xor
xchg
stos
or
jle
lock
xor
ret
lahf
bound
pop
xchg
imul
mov
jge
sub
or
push
xor
ret
pop
in
jle
and
xchg
aad
lahf
int3
inc
adc
xchg
dec
sub
dec
xchg
mov
jbe
neg
jno
push
pop
jg
add
imul
sub
and
iret
add
xchg
or
add
dec
jno
fadd
inc
mov
movs
les
mov
cmps
out
or
mov
xor
retf
fdiv
daa
test
gs
xchg
xchg
loopne
retf
xor
clc
in
leave
lock
xor
sbb
sub
or
push
in
push
xchg
fwait
pop
pop
jg
xchg
shr
fldz
add
fwait
cs
dec
sbb
into
aad
push
mov
shr
xchg
retf
dec
push
pop
sub
mov
inc
mov
or
pusha
loopne
xchg
mov
add
jmp
dec
sysenter
mov
inc
xchg
sub
and
mov
mov
js
xchg
mov
xchg
add
das
inc
mov
pop
or
and
xor
les
std
nop
adc
aas
repz
push
dec
lods
mov
xchg
sbb
dec
push
loope
push
push
adc
stc
les
xchg
xchg
sub
cmp
mov
cli
je
not
mov
mov
retf
xchg
sub
pop
push
push
in
aas
mov
js
adc
adc
jae
call
adc
test
jo
pop
xchg
push
mov
jecxz
mov
je
dec
fst
push
aas
dec
xchg
out
mov
movs
not
retf
stos
dec
xchg
push
dec
call
scas
mov
mov
xchg
aas
lock
jl
adc
fs
imul
loop
jnp
mov
xchg
hlt
jg
xor
(bad)
push
mov
outs
dec
xchg
xchg
push
cmp
loope
fidivr
xchg
ss
push
add
adc
mov
add
test
dec
in
inc
and
mov
xchg
push
movs
sbb
xchg
push
dec
outs
dec
push
inc
int
inc
not
push
or
repz
loop
sub
aam
movs
pop
pop
dec
neg
(bad)
rcl
lock
adc
and
push
push
iret
xchg
je
test
xchg
retf
clc
addr16
mov
and
cmps
and
fwait
sub
shr
cmps
and
jg
xchg
jge
xchg
or
in
cs
daa
xchg
mov
lock
xchg
xchg
repz
mov
movs
mov
aad
cld
(bad)
fistp
enter
stos
xchg
mov
add
dec
xchg
adc
sbb
xchg
add
mov
push
lods
int3
test
or
xchg
inc
rcr
dec
inc
ins
mov
and
(bad)
into
out
je
or
scas
mov
inc
or
jo
pop
push
pop
xchg
mov
retf
add
call
adc
fcomp
xor
jp
loopne
inc
xchg
push
xchg
fs
sbb
push
dec
xchg
pop
cwde
pusha
mov
pushf
arpl
xlat
jmp
test
add
lea
mov
push
call
mov
xchg
mov
pop
mov
ret
pushf
mov
stc
push
or
sub
lds
test
les
adc
int
xor
in
icebp
aad
fcomip
mov
mov
or
xchg
outs
mov
jmp
mov
or
sub
adc
adc
cmp
es
xchg
cmp
jl
push
imul
mov
mov
and
mov
xlat
adc
push
xchg
push
jmp
xchg
xchg
mov
sub
es
xchg
jnp
lea
movs
sub
or
imul
xchg
add
fild
jnp
movs
cwde
sbb
jge
push
push
adc
add
push
outs
or
dec
daa
iret
ficom
je
jns
out
fs
test
mov
xchg
stos
sbb
pop
jno
add
sub
cmp
repnz
jg
dec
pop
jp
cmp
xchg
xchg
rdmsr
inc
push
jne
sbb
push
cmp
xchg
mov
(bad)
int3
xchg
xchg
ss
sub
lds
shr
mov
iret
loop
iret
or
cmp
ja
pop
out
std
ficom
mov
bt
ss
push
push
cdq
mov
scas
sub
je
inc
dec
dec
xor
mov
xchg
lods
retf
xchg
mov
call
inc
mov
xchg
ins
push
aam
(bad)
loope
xchg
sub
cmps
sub
jmp
pop
mov
dec
adc
push
sahf
push
scas
lock
cwde
adc
mov
ins
cmp
cmp
retf
pop
ror
clc
sbb
cwde
fwait
push
jb
xor
mov
pop
pop
imul
mov
xchg
jle
or
mov
into
lea
adc
ud1
xchg
inc
iret
xchg
pushf
aad
pop
lea
dec
xchg
test
pop
mov
push
scas
xchg
and
push
mov
push
pop
xlat
(bad)
xor
mov
xchg
js
shr
popa
or
mov
mov
test
xor
cmc
ror
ins
jp
dec
out
adc
cmc
adc
pop
retf
imul
jne
shr
add
pop
add
sub
sbb
xchg
and
(bad)
ins
xor
sub
retf
adc
cmps
fistp
xchg
shr
push
out
ja
rcl
push
mov
enter
mov
pop
mov
cmp
sar
pop
pop
jmp
xchg
pop
sbb
push
paddsw
clc
xchg
stc
cli
retf
sbb
jmp
les
scas
neg
inc
xchg
cdq
lea
and
cmc
xchg
popf
test
push
mov
in
call
mov
in
test
je
mov
aas
pop
sbb
stc
xchg
enter
lahf
push
test
xchg
cs
xchg
mov
sub
xchg
lds
sbb
or
xor
xchg
out
or
fwait
pop
or
cld
jns
add
mov
xchg
loope
jnp
lahf
xchg
push
lods
in
mov
xchg
xchg
nop
xchg
dec
cld
pop
ja
imul
push
neg
outs
xchg
daa
(bad)
push
call
xchg
je
jb
xchg
scas
les
mov
ficom
cmp
jg
cmps
jno
adc
mov
cld
imul
push
je
mov
into
push
sub
xchg
or
pop
push
xchg
and
add
inc
xchg
xlat
xchg
push
mov
mov
inc
ja
outs
ret
test
test
inc
push
xchg
aad
dec
jae
or
dec
sub
loopne
xchg
(bad)
in
jno
stc
and
and
mov
ror
adc
adc
out
mov
dec
ficom
fadd
cmp
mov
inc
mov
xchg
in
aas
dec
add
xchg
dec
test
imul
repnz
movs
ror
xchg
dec
ins
inc
mov
call
push
aad
jp
adc
jle
iret
push
(bad)
jo
es
xchg
xchg
dec
mov
add
xchg
cmc
vmovapd
add
pop
test
stos
in
add
outs
mov
(bad)
xchg
push
inc
sbb
popf
scas
jnp
hlt
adc
cmps
js
xchg
jmp
push
push
cld
lods
sub
inc
push
sbb
inc
cli
mov
test
xchg
mov
or
xor
push
je
push
jg
popf
stos
mov
ins
rcl
rol
lods
les
test
sbb
and
mov
aad
ins
xchg
fcomp
test
xchg
repz
daa
inc
mov
inc
in
adc
add
xchg
dec
jae
xchg
mov
dec
add
repnz
and
retf
jb
xor
sbb
mov
sub
mov
fs
std
xchg
mov
dec
sbb
clc
mov
xchg
js
aas
jmp
nop
jo
add
fisubr
xchg
out
jbe
or
jle
call
or
les
mov
cmps
xchg
aam
xchg
jg
js
push
mov
clc
fadd
je
mov
in
push
rcl
(bad)
jno
jnp
push
xchg
jae
mov
and
clc
fwait
inc
popf
call
(bad)
fimul
cmp
test
xchg
add
jb
mov
xchg
enter
add
imul
ret
xchg
hlt
idiv
ss
inc
xor
pop
push
pop
imul
jns
aad
movs
outs
sub
push
xor
dec
xchg
add
xor
inc
test
jae
ss
xchg
loop
retf
mov
inc
iret
xchg
pop
mov
mov
hlt
cld
inc
or
cmp
(bad)
test
xchg
mov
jae
xchg
lock
push
xchg
ret
fnsave
int3
sahf
cmp
adc
and
test
movs
(bad)
mov
push
or
xchg
pop
mov
stos
mov
xchg
shr
cmps
xor
mov
push
std
inc
jge
dec
xchg
pop
(bad)
(bad)
sahf
gs
lds
fs
push
xchg
int3
adc
pop
mov
je
adc
jl
repz
stos
xchg
call
jecxz
into
jbe
not
stos
leave
(bad)
jl
mov
xchg
movs
push
inc
int3
push
addr16
fidivr
xchg
fild
xchg
pop
out
(bad)
xor
and
mov
and
xchg
jbe
push
fdiv
iret
xor
pop
inc
and
mov
ficom
push
cmp
(bad)
adc
shl
fst
push
xchg
bnd
enter
xor
ret
xor
cmp
aam
sbb
xchg
repnz
xchg
iret
ins
clc
adc
outs
xchg
mov
jmp
sub
sti
adc
mov
fucomi
xchg
std
iret
aam
cmp
ss
inc
fwait
adc
cmp
into
pushf
cdq
adc
and
aaa
cs
jb
cwde
lea
inc
xchg
repz
loopne
add
js
xchg
xchg
sub
push
mov
jmp
aam
dec
mov
mov
into
push
sub
or
inc
sbb
xchg
pop
out
ret
push
cld
jle
add
jnp
and
jbe
shl
jp
dec
in
cmp
xchg
jnp
mov
push
test
mov
sbb
xor
push
cmp
push
cmp
clc
daa
mov
(bad)
rcr
(bad)
cmp
adc
repnz
bound
sbb
popa
mov
enter
mov
gs
cmps
movs
sbb
mov
leave
add
add
pop
fsub
cli
lock
cmp
sbb
shr
rcr
mov
outs
sub
pop
(bad)
xchg
jecxz
jo
in
xor
test
mov
nop
sub
jb
inc
adc
pop
pop
pusha
xchg
or
fisttp
pop
xchg
sbb
jb
fwait
jno
push
push
dec
jbe
cmp
fs
das
dec
push
mov
cwde
sbb
icebp
mov
xor
cmp
adc
pop
mov
and
mov
and
xchg
add
out
cmc
loopne
adc
sub
push
jmp
and
dec
dec
xchg
int
(bad)
call
test
and
mov
jns
xchg
je
jg
inc
mov
popf
movs
mov
adc
xor
mov
push
inc
mov
sub
adc
lahf
jle
lea
pop
add
paddd
adc
or
enter
out
fwait
inc
pop
jle
movs
mov
repz
jecxz
push
adc
xor
mov
cwde
ret
sub
xchg
scas
sub
xor
aas
adc
xchg
mov
in
mov
xchg
dec
test
cli
mov
mov
jmp
bound
or
sbb
cs
hlt
jnp
scas
into
mov
adc
jle
lods
push
popf
outs
xchg
stos
or
out
push
mov
xchg
bound
into
shl
icebp
pop
daa
loopne
stos
fwait
mov
jecxz
test
sbb
adc
mov
div
aam
cmp
xchg
call
lods
sbb
mov
cwde
push
rcl
jle
xchg
xchg
daa
mov
mov
add
std
adc
clc
movs
retf
cwde
test
adc
jae
xchg
xor
clc
cld
addr16
xchg
add
xor
xchg
scas
(bad)
jns
add
jge
(bad)
call
add
stos
push
cmps
or
fmul
and
arpl
fldcw
loopne
leave
mov
mov
call
lods
test
fbstp
hlt
rol
add
cli
pop
mov
adc
sbb
mov
iret
push
adc
mov
xchg
jg
icebp
enter
arpl
mov
jno
adc
or
xchg
cld
cli
(bad)
fcomp
add
cmp
xor
mov
popf
fdivr
int3
xor
mov
xor
xchg
jmp
mov
shr
stos
sbb
mov
xchg
or
test
fs
xchg
mov
push
ins
pop
movs
xchg
sbb
or
stos
xchg
mov
(bad)
enter
mov
sub
cmc
push
out
adc
lods
pop
not
fsub
xchg
addr16
mov
mov
test
je
hlt
ins
xchg
xor
inc
xchg
in
sbb
rcr
mov
fcom
mov
push
push
xchg
test
cmps
sahf
sub
jle
xchg
je
fcom
pop
ins
xchg
push
(bad)
cmp
mov
inc
jecxz
xor
mul
mov
mov
in
fxch
in
lock
out
sub
push
xchg
sbb
dec
pop
mov
xchg
xor
popf
cmp
jl
adc
lahf
push
and
(bad)
mov
mov
mov
daa
jns
xchg
jge
cmp
popf
rcl
outs
dec
xchg
pop
hlt
push
jne
xchg
pop
sub
sbb
scas
lods
and
add
push
xchg
(bad)
test
jb
ret
cmps
xchg
(bad)
repz
(bad)
mov
xor
and
inc
loopne
add
push
stc
inc
xchg
es
test
cwde
cmp
pop
int3
and
push
and
mov
clc
jns
add
sub
mov
xor
jne
pushf
sub
lahf
xor
test
cmps
inc
(bad)
jge
test
jne
mov
ja
mov
xor
sbb
sub
repz
xchg
or
lods
data16
jo
sar
xchg
and
xor
aaa
pop
pop
dec
or
jmp
scas
gs
mov
push
popf
enter
xchg
hlt
inc
movs
in
ss
sbb
jl
cwde
mov
stc
jo
int
les
push
stos
shl
bound
das
jb
mov
or
bound
fstp
adc
mov
movs
xchg
adc
mov
xchg
lock
test
dec
and
xchg
add
addr16
jecxz
xchg
(bad)
repnz
xchg
sub
xchg
xchg
inc
pop
repz
(bad)
push
test
sti
fucompp
xchg
in
into
push
nop
ins
mov
movs
and
dec
push
js
in
xchg
xchg
xor
stos
push
int
xchg
or
ja
scas
icebp
jmp
fst
sbb
mov
imul
push
sub
xchg
pop
outs
scas
sbb
retf
and
xchg
neg
int
mov
jne
push
dec
adc
in
cmp
adc
inc
xchg
fisubr
pusha
out
cdq
or
imul
sub
xchg
and
adc
test
xchg
or
cmp
xchg
cdq
fwait
push
clc
cwde
mov
add
aad
into
test
pop
or
pop
adc
fisub
push
scas
sahf
cmps
call
xlat
mov
cs
out
lock
jo
push
arpl
add
(bad)
xchg
xor
mov
sbb
cli
dec
pop
mov
js
into
xchg
xlat
test
rol
retf
xchg
jo
push
ins
xor
fld
cmps
int3
lahf
add
(bad)
sbb
cmp
not
mov
int3
xchg
imul
pop
xchg
fwait
ret
jp
xchg
pop
sti
push
xchg
mov
mov
jo
loop
push
hlt
out
sbb
les
xchg
sub
iret
dec
mov
cmp
ins
add
xchg
mov
and
jecxz
xchg
ficom
neg
push
not
add
push
jg
inc
xor
xchg
pusha
cmc
ins
dec
popf
jb
jmp
cmp
fimul
fldcw
xchg
fld
sub
mov
push
xchg
mov
aad
jg
jo
mov
fistp
adc
sbb
push
fwait
xchg
xchg
inc
xchg
mov
mov
cmp
aas
packuswb
dec
pusha
and
nop
jno
mov
sbb
xchg
push
lods
fld
fwait
push
xchg
ret
xor
xor
sahf
in
das
pop
adc
xchg
push
stc
jge
mov
aas
and
and
push
add
mov
je
sub
add
sub
xchg
dec
mov
lods
aaa
nop
dec
mov
pop
cmps
xchg
pop
not
adc
add
mov
(bad)
xchg
mov
push
cli
pop
movs
push
adc
mov
xchg
mov
sahf
fild
gs
xchg
jns
lock
nop
and
sbb
test
jmp
call
mov
push
xchg
pop
lods
div
pop
scas
fwait
mov
mov
les
dec
fnstenv
out
retf
push
sbb
sti
xchg
dec
sub
iret
rcl
jecxz
jle
push
enter
mov
push
je
and
xchg
(bad)
adc
outs
sti
xchg
cmp
and
xor
setg
add
sub
xchg
and
or
neg
push
int3
xchg
jne
jmp
cmc
ds
push
or
jg
(bad)
outs
rcr
pop
lds
xchg
xchg
cmp
mov
test
dec
xor
xchg
cmp
push
icebp
adc
inc
mov
mov
push
je
pop
add
ds
cmc
sub
xchg
lods
fmul
add
mov
push
add
sub
and
push
pop
adc
pusha
int
xchg
add
(bad)
and
cmp
adc
adc
into
je
pushf
dec
jae
or
push
mov
xor
xchg
call
out
xor
xor
test
lods
sub
cmp
not
repnz
pop
xchg
pop
movs
dec
push
les
mov
lock
imul
mov
stc
ss
or
in
or
xchg
push
rcr
or
mov
mov
adc
push
test
xchg
xchg
test
lea
sahf
xlat
ins
xchg
cmps
or
stos
cld
fistp
xchg
jbe
mov
jge
imul
iret
loop
push
sub
(bad)
nop
add
in
xchg
retf
push
add
or
rol
pop
push
xor
inc
mov
push
mov
in
mov
adc
xchg
ror
inc
leave
cmpxchg
mov
stc
mov
xchg
in
dec
xor
cmp
mov
add
ss
mov
adc
fcom
std
lahf
lock
xchg
cmps
push
cmp
ja
mov
jp
xlat
cmp
int3
xchg
test
into
and
push
in
xchg
cdq
ss
mov
in
inc
into
xchg
repnz
cmp
outs
ret
push
ins
cmp
hlt
pop
xchg
mov
adc
add
jl
add
jbe
(bad)
xchg
sbb
into
mov
sti
lods
mov
xchg
pop
xchg
out
fldcw
adc
pusha
(bad)
out
movs
ja
jmp
or
adc
xchg
dec
fiadd
(bad)
xchg
or
xchg
cli
xchg
pusha
test
xchg
pop
pop
cmp
xchg
ret
inc
hlt
aam
sub
stos
inc
mov
adc
daa
cmp
push
mov
pop
xchg
aad
std
fwait
mul
cwde
int3
xchg
push
push
jmp
lahf
inc
mov
xchg
xchg
fs
xlat
je
leave
das
adc
jnp
push
loope
inc
xchg
mov
pop
mov
xchg
cmp
jl
ret
mov
mov
lea
loopne
xor
fnstenv
mov
mov
mov
jbe
ret
cdq
sbb
movs
dec
pusha
int
push
xchg
icebp
or
pop
jg
xchg
xor
adc
mov
or
mov
dec
int
pop
mov
scas
inc
xchg
in
xchg
xor
mov
jp
popa
mov
adc
movs
xchg
sbb
xchg
in
arpl
(bad)
and
dec
mov
cmp
mov
pop
xor
movs
mov
frstor
pop
mov
lock
loopne
xchg
xchg
sti
loop
inc
popf
les
mov
add
daa
pop
xchg
ret
dec
in
aad
test
(bad)
cld
cdq
jno
call
xchg
xchg
pop
add
shl
pop
sbb
push
inc
inc
push
add
sar
adc
jl
inc
xchg
sbb
into
push
sahf
cmp
arpl
adc
adc
gs
pop
call
mov
and
cmp
mov
xchg
ds
iret
aam
imul
bound
shr
xchg
jg
sub
(bad)
xlat
inc
xchg
dec
and
push
addr16
fsub
jnp
je
or
mov
inc
push
push
xchg
sbb
jle
xchg
xor
mov
xchg
xchg
pop
ret
repnz
mov
and
fwait
(bad)
outs
aas
dec
inc
xor
adc
cdq
dec
xchg
repz
mov
xchg
add
in
nop
xchg
into
dec
xchg
mov
mov
push
mov
xor
adc
cmp
xchg
movs
rcl
test
pop
jo
lods
xchg
push
inc
dec
xor
mov
hlt
adc
data16
test
cwde
pushf
retf
push
shr
xchg
or
cmp
sub
xchg
repz
add
pop
mov
xor
xor
wbinvd
adc
bound
fidiv
movs
loope
and
mov
add
jecxz
rcr
xor
data16
cmps
add
je
js
les
jge
inc
clc
or
lock
inc
xchg
loopne
mov
stos
mov
daa
out
aad
cmp
mov
fwait
(bad)
fisubr
or
mov
ja
or
jno
mov
retf
arpl
xchg
push
shl
lock
xchg
mov
sub
test
int3
push
clc
xchg
in
cdq
stos
adc
dec
xchg
shr
mov
inc
mov
inc
adc
aas
test
xchg
movs
or
popf
fisttp
push
mov
sub
mov
aad
xchg
fisttp
sub
and
push
adc
mov
lea
test
scas
movs
add
ss
pop
data16
push
hlt
xor
lahf
or
rcl
cli
pop
and
xchg
mov
fsubrp
xchg
xchg
push
(bad)
ret
add
xchg
jmp
(bad)
xchg
pop
inc
sbb
add
pop
mov
add
fdiv
das
inc
(bad)
fldenv
fs
in
in
aam
retf
ins
xchg
inc
or
mov
xchg
js
cmp
xchg
jl
dec
scas
adc
pop
xchg
adc
hlt
jo
xchg
dec
repnz
aaa
xor
adc
mov
mov
xchg
pop
je
dec
xchg
jns
ins
xchg
push
clc
fld
test
and
fs
in
mov
push
aad
in
lds
cdq
xchg
jo
jmp
adc
pop
push
add
ins
rcl
cmc
out
inc
xchg
fs
popa
(bad)
enter
ud0
popf
fld
ds
sub
mov
cmps
(bad)
pop
xchg
jo
ror
ret
fwait
jnp
addr16
test
sub
fnstsw
or
xchg
retf
pushf
inc
test
into
jl
sbb
push
jne
leave
mov
mov
hlt
xor
xchg
imul
fbstp
push
or
fcmovnb
push
xchg
in
jl
push
dec
lods
or
mov
sbb
into
or
jle
ja
sahf
add
push
cld
pop
aas
test
dec
or
iret
cmp
out
xchg
and
imul
push
xor
cli
adc
mov
xchg
jg
repnz
add
xchg
add
mov
stc
push
dec
inc
pop
aaa
cwde
jnp
adc
leave
shr
push
pop
int
xchg
out
mov
shl
push
adc
sahf
lock
mov
out
mov
add
adc
sbb
inc
xchg
mov
xor
mov
je
pop
fist
inc
sar
xchg
cwde
adc
or
add
cmp
push
and
xchg
test
enter
xchg
dec
add
and
leave
jbe
xchg
push
outs
fucomp
(bad)
push
bound
popf
repz
adc
mov
outs
rol
adc
(bad)
sbb
pop
push
int
sbb
ror
int3
sbb
iret
mov
fldcw
adc
dec
icebp
jmp
and
mov
(bad)
sete
nop
loop
fwait
dec
add
aam
hlt
es
hlt
jo
aas
jg
cwde
jmp
xchg
out
mov
int3
push
sti
jl
mov
mov
hlt
sbb
push
mov
pop
fld
loopne
or
ror
popa
inc
cwde
scas
dec
adc
cli
xchg
xchg
mov
cld
int
xchg
add
or
jae
jb
xchg
jge
cmp
imul
mov
mov
xchg
das
and
jmp
xchg
aam
out
gs
cdq
xchg
lods
push
pop
dec
inc
pop
xchg
add
mov
je
or
shr
fist
push
call
jbe
nop
dec
push
dec
mov
xchg
lods
ret
dec
sub
bnd
cwde
dec
xchg
sti
cmps
pusha
adc
popf
add
push
xchg
addr16
(bad)
pop
arpl
es
or
lahf
mul
add
cdq
xor
jmp
in
test
add
or
xchg
les
mov
(bad)
sub
inc
push
fst
pop
scas
push
push
and
imul
icebp
jo
or
or
mov
xchg
jnp
xchg
inc
or
mov
pop
jne
xchg
pop
mov
test
push
mov
rcl
lahf
pushf
and
popf
push
inc
mov
adc
jge
xchg
inc
clc
mov
ds
in
push
out
jmp
inc
shl
ror
mov
mov
aaa
xchg
mov
or
repnz
sub
or
xchg
popf
movs
jbe
inc
jle
or
loope
scas
fisttp
sub
xchg
mov
cwde
dec
cmp
xchg
cdq
ins
movs
ret
into
pop
int
push
fmul
psrld
scas
sbb
dec
adc
loope
cmps
mov
je
jmp
pop
and
dec
ret
adc
pop
adc
repz
es
das
pop
push
xchg
test
mov
jno
loop
mov
xchg
lock
je
lods
lods
scas
jo
jmp
xchg
enterw
push
retf
leave
xchg
sbb
and
dec
dec
dec
pop
movs
xchg
loop
cld
js
pop
imul
sbb
(bad)
jmp
loopne
shl
sbb
iret
fidivr
push
jb
xor
aad
xchg
test
sub
addr16
xchg
aam
or
xchg
mov
adc
cmps
into
adc
inc
push
inc
(bad)
jns
sbb
test
lea
pop
xchg
stos
cmc
dec
mov
xchg
mov
bswap
xchg
adc
adc
fwait
cli
in
test
sub
int3
sub
sub
retf
std
xchg
jnp
pop
fsub
clc
cmp
inc
adc
imul
xchg
pop
hlt
mov
je
loopne
pop
jnp
and
push
xor
xchg
aas
jecxz
call
xchg
loope
push
xor
adc
and
pop
pop
mov
pop
into
daa
jbe
sahf
adc
hlt
bnd
mov
and
inc
mov
not
adc
fcmovne
mov
lds
retf
push
mov
inc
cmps
cmp
je
pop
cwde
cmps
push
jle
in
call
aam
imul
cdq
pop
or
(bad)
adc
arpl
pusha
pop
or
test
fisttp
jl
ror
adc
push
ja
fisttp
sub
add
or
ret
imul
cld
or
mov
test
sbb
mov
cmp
push
stc
cmp
out
xchg
dec
pusha
daa
fdiv
(bad)
gs
xor
add
push
push
xchg
jno
push
xor
test
mov
add
or
int
pop
xchg
dec
test
mov
out
sbb
enter
jno
or
add
aam
stos
xchg
outs
test
pop
cli
pushf
movs
xchg
or
xchg
ffree
and
repnz
xchg
stos
dec
in
into
inc
je
dec
repz
xor
mov
neg
fisubr
jmp
fnsave
mov
xchg
out
mov
push
xchg
addr16
iret
adc
dec
pusha
pop
jmp
loopne
out
cmp
cdq
cmps
scas
inc
sbb
outs
mov
push
adc
pop
aaa
loope
adc
rcl
xor
cwde
jmp
push
or
pusha
cmp
push
sbb
rcl
imul
inc
mov
inc
fist
test
mov
push
int3
out
push
dec
xchg
add
hlt
clc
(bad)
ret
shl
adc
out
jno
iret
xlat
or
xor
pop
imul
mov
adc
xor
jmp
xchg
inc
dec
inc
inc
icebp
push
cmps
(bad)
call
xchg
push
xchg
sbb
xchg
sub
mov
das
rcl
adc
mov
dec
cwde
ror
push
xchg
cmp
outs
movs
xchg
mov
push
pop
rcl
xchg
mov
les
xchg
sub
and
stos
popf
cmp
nop
push
mov
pop
das
or
xchg
imul
sbb
imul
std
sbb
inc
cmp
add
xchg
sub
xor
lods
or
sub
pop
fwait
xchg
add
jae
fst
jne
nop
xchg
xchg
stos
(bad)
in
jmp
push
pop
fwait
cdq
sbb
outs
test
and
adc
xchg
in
icebp
ret
inc
retf
mov
inc
jb
imul
shl
in
xchg
and
inc
mov
je
and
scas
mov
push
xchg
pop
mov
pop
pop
iret
sbb
xchg
xchg
aaa
sbb
jns
int
pop
mov
shld
xchg
int
shl
jge
cmps
loope
lds
xchg
(bad)
test
clc
std
ror
cmp
loopne
loope
cmp
xchg
push
imul
fld
mov
xchg
xor
and
adc
mov
xchg
push
retf
fsub
mov
icebp
pop
ins
mov
dec
mov
or
nop
(bad)
push
dec
mov
outs
sub
stos
adc
ss
outs
in
xchg
add
xchg
pop
lea
xchg
mov
fadd
cmps
lahf
je
push
jo
jns
and
sub
xor
out
jecxz
imul
fcomp
xchg
enter
pop
je
sub
push
xlat
jns
mov
clc
xchg
aaa
jecxz
test
ret
call
xchg
jle
cs
push
mov
movs
xchg
mov
add
xchg
(bad)
jmp
cmp
jb
ret
out
jb
xchg
xor
xor
sbb
mov
xchg
int3
test
push
pushf
cmc
dec
push
mov
popf
inc
inc
xchg
fistp
stos
cwde
aad
lds
mov
sar
and
or
fst
cs
(bad)
fdiv
or
(bad)
mov
sahf
rol
cmp
into
xchg
pop
and
xchg
neg
in
cmp
mov
(bad)
adc
mov
in
cmp
test
xchg
popf
mov
les
and
outs
mov
gs
adc
pop
push
loope
arpl
stos
or
movs
or
repnz
xchg
ss
cmc
add
mov
jle
push
out
fcomip
(bad)
cmp
adc
ins
shl
fld
mov
mov
gs
xor
sub
xchg
inc
pop
mov
sbb
jae
pop
out
fst
and
or
xchg
loopne
cmc
int3
imul
in
jae
out
jle
push
aad
xor
dec
push
push
cmp
dec
adc
mov
(bad)
pushf
retf
fcmove
mov
in
xor
sub
xchg
(bad)
mov
int
xchg
mov
shl
fst
adc
cmp
inc
pop
xchg
mov
shr
dec
sbb
ja
adc
and
mov
hlt
pop
mov
adc
leave
mov
rcr
test
rcl
out
push
lds
mov
xchg
imul
xchg
mov
push
push
icebp
xchg
push
jl
xchg
pop
dec
mov
in
stos
mov
mov
ins
sub
lahf
aaa
ficomp
add
xchg
mul
movs
add
mov
rol
push
popa
fwait
jge
adc
test
lods
push
mov
ja
push
dec
mov
inc
mov
loop
pop
cmp
and
push
inc
dec
xchg
xchg
mov
repnz
aad
inc
fwait
out
imul
push
sub
leave
arpl
fwait
push
cmp
sbb
in
xchg
jle
and
mov
stos
enter
mov
icebp
cdq
jns
clc
loopne
repz
fld
js
adc
out
and
aaa
popa
sub
or
lods
in
hlt
rol
push
(bad)
xchg
mov
arpl
scas
or
out
sub
cmp
aam
popa
aaa
dec
xchg
adc
add
(bad)
pop
jae
inc
xchg
pop
mov
popf
dec
and
sbb
fisttp
xchg
arpl
mov
inc
xchg
pusha
sub
or
ficomp
hlt
mov
inc
xor
iret
and
cs
in
jne
les
and
sub
pusha
adc
je
pop
push
xor
fsubr
(bad)
push
and
xchg
cdq
out
xor
adc
daa
mov
mov
jl
xchg
xor
dec
enter
mov
pop
dec
hlt
sbb
int
push
adc
ret
jno
in
clc
xchg
cmc
jp
popf
scas
push
out
or
pusha
lods
sub
in
push
push
std
add
xchg
adc
pop
dec
scas
sahf
xchg
mov
xchg
jmp
aad
cmps
mov
hlt
pop
xchg
fst
inc
jg
xchg
call
scas
cmp
test
jb
fldcw
mov
nop
mov
lea
xchg
cmc
xchg
pop
in
test
push
xchg
(bad)
test
xchg
xor
cmp
pop
xchg
mov
xlat
scas
or
fcom
bound
mov
sbb
cmp
jle
sub
arpl
push
xchg
pop
mov
add
xchg
daa
push
or
xchg
push
jb
mov
pop
pop
daa
mov
xor
loope
rol
dec
rcr
into
add
or
mov
jmp
imul
rol
ja
xchg
rcl
xchg
adc
ins
and
dec
fs
inc
fcmovne
sub
mov
sub
rsm
dec
xchg
or
push
add
adc
pop
and
xchg
aad
jmp
je
ficom
repnz
inc
fist
ja
xchg
(bad)
add
sar
mov
or
add
xor
push
out
dec
cmp
rcl
popa
in
push
hlt
sbb
fs
xchg
lods
pop
add
push
mov
inc
xchg
jg
push
ret
sbb
push
push
xchg
and
and
mov
jl
xchg
sub
scas
into
(bad)
jbe
xchg
cmp
pop
sub
inc
(bad)
xchg
sbb
dec
aaa
jmp
or
cmp
stc
adc
mov
pop
mov
jl
out
cwde
xor
pop
je
imul
pushf
push
or
cmp
shr
adc
das
jecxz
hlt
pusha
ds
popa
mov
iret
fistp
mov
into
je
adc
lods
dec
xchg
cld
and
fwait
sar
sar
xchg
rol
das
jnp
xchg
dec
ret
jae
mov
jmp
xchg
cli
pop
mov
xor
mov
mov
fst
lock
xor
mov
pop
mov
fsub
jne
jmp
inc
les
xchg
popf
cmps
cmp
xor
jl
inc
mov
cmp
cmp
sub
mov
call
add
and
setae
push
movs
hlt
mov
xchg
jnp
dec
or
fs
imul
lock
aas
xchg
or
ret
sbb
dec
or
fwait
mul
jne
rol
push
hlt
xchg
add
cmp
cld
(bad)
mov
mov
inc
inc
pop
pusha
jl
xchg
scas
and
xchg
mov
aas
xchg
call
aad
and
(bad)
stos
mov
das
les
movs
sbb
xchg
adc
cmps
add
add
xor
inc
out
xchg
jge
retf
xor
pop
in
addr16
or
mov
jne
clc
sub
dec
add
loopne
idiv
call
dec
xchg
mov
rcl
jmp
test
shl
or
jecxz
mov
or
jle
xchg
adc
popf
pushf
mov
fisub
test
int
imul
sti
test
mov
push
loope
mov
adc
aam
rcr
loopne
mov
mov
cwde
xchg
mov
iret
adc
cmp
adc
pop
int
sbb
mov
outs
test
sub
xchg
das
jb
stos
fmul
aam
cmps
int3
adc
or
xchg
pop
in
fimul
mov
inc
cmp
add
addr16
test
jl
cmp
dec
les
popa
adc
jecxz
ret
ds
leave
pop
cmp
jge
xchg
hlt
jg
ffreep
enter
and
sbb
stc
jnp
pop
adc
pop
push
in
sub
cmp
inc
xchg
xchg
sbb
(bad)
dec
pushf
pop
fwait
mov
push
cdq
cmp
sbb
jae
dec
xor
sbb
and
shr
adc
pop
cmc
push
sub
xchg
pop
xchg
sahf
cmp
(bad)
rcr
add
xchg
inc
mov
push
xchg
rol
mov
jmp
fwait
adc
call
cmp
fwait
push
push
data16
cmps
xchg
push
je
push
xchg
(bad)
aam
cmp
scas
shl
jg
xchg
lods
sbb
cld
out
scas
mov
call
xchg
push
scas
iret
cli
inc
int
add
jg
and
jb
push
into
repz
adc
rcl
sub
mov
mov
dec
xchg
(bad)
mov
xor
(bad)
jno
fwait
and
mov
inc
inc
int3
outs
pop
xchg
div
aam
movs
sub
push
or
dec
add
inc
push
call
dec
dec
xchg
popf
xchg
int
pop
adc
mov
rcl
push
push
adc
sbb
xchg
inc
mov
cmp
scas
js
or
push
dec
das
xchg
pop
rol
xor
fld
in
imul
dec
js
enter
xchg
rcl
adc
into
ins
lods
xchg
out
ins
jnp
test
mov
inc
mov
jecxz
and
les
xor
xor
and
sbb
xchg
aad
cmp
jbe
jmp
cmp
push
mov
mov
inc
xor
inc
jp
xchg
xor
adc
xchg
xchg
xchg
pop
mov
mov
and
jo
dec
xchg
mov
pop
fbld
mov
or
xchg
int3
fcom
or
scas
mov
outs
pop
repz
dec
test
inc
ins
sbb
pop
stos
lock
test
xor
dec
cmp
mov
mov
cwde
xchg
daa
fs
outs
or
jg
into
hlt
jo
cmc
xchg
(bad)
retf
ds
or
xchg
aam
pop
out
or
and
movs
jle
adc
jne
fs
xor
mov
nop
adc
xchg
out
fwait
sbb
daa
lds
in
and
adc
push
ins
cmp
mov
stos
pop
in
psubusw
lock
or
pop
sub
mov
stc
fwait
xchg
lock
add
lods
mov
push
int
js
mov
icebp
sub
dec
ins
cmps
sub
push
jmp
mov
bound
outs
and
stc
xchg
push
add
xchg
cli
pusha
out
fbld
icebp
imul
mov
adc
mov
xchg
cmp
hlt
jecxz
cld
xchg
xor
ret
sbb
inc
xchg
mov
inc
lock
cld
aas
xchg
or
pusha
ja
inc
jmp
gs
dec
mov
mov
xor
fnstsw
pop
loop
test
sar
call
dec
out
xor
je
mov
std
or
gs
fnsave
mov
repz
jo
imul
cmp
mov
and
pop
mov
loope
add
xchg
mov
(bad)
cld
cmp
jmp
mov
inc
jg
ja
jae
sub
cmp
or
adc
fcom
xchg
test
adc
ss
rcr
hlt
mov
push
xchg
int3
shl
dec
jge
xchg
enter
dec
push
jg
repnz
mov
loop
aam
inc
ret
fcmovne
pop
or
xlat
pushf
cmps
sbb
sbb
in
pop
push
fwait
inc
sub
mov
or
inc
cmps
cmp
xchg
fs
sbb
fwait
mov
and
test
mov
jl
test
sbb
and
shr
sbb
in
popf
push
pop
mov
cmp
mov
ror
mov
imul
lods
fsubr
pop
add
push
out
mov
das
jbe
xchg
jns
or
mov
xchg
jp
mov
stos
lods
dec
mov
fmul
hlt
cmps
call
shl
sbb
push
in
xchg
pop
ss
cmc
xchg
cwde
outs
mov
mov
pop
push
xchg
add
inc
mov
and
loop
cdq
dec
or
mov
push
dec
fadd
inc
dec
popf
mov
popa
cmps
adc
pop
dec
xchg
iret
add
adc
or
stos
call
inc
cmp
sbb
pop
das
inc
pop
shl
dec
sbb
xchg
pop
movs
sub
sub
jge
jmp
mov
call
repnz
xchg
inc
test
inc
and
daa
lock
cwde
jp
fstp
das
jne
inc
xchg
xchg
(bad)
repnz
pusha
mov
xchg
into
dec
sub
sub
(bad)
xor
push
test
cwde
and
popf
test
xchg
out
pop
scas
cmp
retf
es
push
pushf
das
xor
and
inc
dec
div
inc
xchg
loope
or
js
xchg
push
das
mov
pop
and
and
or
mov
std
add
push
push
xchg
sub
div
dec
mov
and
jno
je
adc
sti
rcr
mov
aad
popf
jle
je
out
add
xchg
hlt
test
mov
pop
add
stos
or
jl
js
xchg
and
cmp
mov
in
call
es
push
xchg
jmp
dec
mov
rcr
xchg
pop
(bad)
aad
xchg
push
adc
and
sahf
xchg
xchg
scas
int
jl
fst
movs
inc
pushf
inc
vmulps
adc
lods
leave
in
pop
mov
xchg
cdq
sub
mov
lahf
mov
mov
out
test
add
jno
popf
imul
mov
imul
sub
ds
inc
addr16
xchg
mov
(bad)
pop
pop
xchg
xchg
dec
cmps
jns
sbb
xchg
mov
and
pusha
je
adc
xchg
mov
cmp
fst
enter
push
sub
and
sbb
adc
(bad)
sbb
(bad)
xchg
cmp
xchg
xor
cmc
sti
cs
dec
adc
mov
js
sbb
and
xor
scas
adc
sar
add
and
mov
xor
cmp
int
or
adc
xchg
in
cdq
arpl
mov
jmp
adc
xchg
movs
jnp
ret
sub
neg
xor
daa
mov
xchg
mov
addr16
popa
jo
xchg
cwde
add
xor
or
xchg
out
sahf
jns
fs
icebp
fist
xor
je
dec
or
ja
das
pop
xchg
xchg
test
aas
push
pop
mov
(bad)
sub
push
stos
sub
push
xchg
or
out
xchg
(bad)
lods
pop
inc
adc
xchg
jmp
icebp
adc
xchg
iret
or
cmps
sahf
ins
xchg
push
adc
sub
fdivr
mov
call
bound
sbb
add
xchg
fsub
in
lds
pop
shr
jmp
xchg
in
xchg
pop
jecxz
js
xchg
sbb
xchg
inc
ret
pusha
js
xchg
jb
mov
jno
lods
xchg
pop
fsub
cmp
xchg
gs
and
not
sub
ret
ds
inc
cmps
fist
out
jle
xchg
mov
mov
retf
mov
mov
xchg
shl
push
add
adc
clc
inc
xchg
repnz
adc
jmp
fsub
addr16
push
pop
fcom
add
xor
rcl
push
adc
jns
hlt
test
into
jo
outs
mov
in
inc
dec
ins
xchg
sub
mov
(bad)
push
inc
inc
xchg
(bad)
pop
jge
mov
sbb
mov
into
xchg
jae
cmp
mov
cmps
stos
stc
cmp
xchg
imul
stos
fdivp
retf
inc
cld
jecxz
xchg
or
pop
sbb
fcomp
sub
pop
ret
and
add
imul
loopne
cld
mov
aad
sub
lods
or
or
loope
cmp
js
hlt
cdq
sbb
lds
out
xchg
(bad)
test
sahf
inc
jmp
push
pop
aad
mov
scas
push
out
cmp
cmp
pop
call
xchg
mov
imul
aam
adc
cmp
jecxz
adc
fwait
sub
cs
(bad)
mov
xor
call
inc
cmp
ds
mov
les
aam
ficom
xchg
lods
and
or
stc
xchg
dec
pushf
inc
adc
rcr
outs
popf
jb
stos
fcom
mov
pop
test
xchg
clts
cli
(bad)
sbb
xchg
lock
inc
push
pop
inc
jl
jbe
or
xchg
push
fcomp
jae
lea
das
sub
xchg
xor
icebp
std
xchg
xchg
adc
loopne
fnstenv
mov
mov
xchg
cmp
push
in
ret
out
iret
in
cmp
xchg
jae
aas
fwait
mov
clc
mov
push
psubusw
adc
push
call
jae
cmp
(bad)
adc
pop
hlt
leave
xchg
das
ss
inc
(bad)
pop
xor
gs
xor
in
repnz
sub
mov
xchg
add
mov
pushf
push
lahf
jge
mov
sbb
lods
in
xchg
jne
xchg
push
popa
adc
jp
push
inc
mov
push
push
mov
popf
pop
test
dec
retf
inc
push
mov
in
jnp
xchg
dec
sub
push
int
xchg
fcmove
and
cs
sbb
loop
sub
cli
js
mov
xchg
inc
pop
push
lahf
adc
gs
add
call
adc
push
aas
data16
xchg
add
cdq
adc
mov
xchg
rol
jnp
xchg
jmp
arpl
sahf
xchg
rol
(bad)
xlat
ret
arpl
xchg
push
adc
xor
ret
or
jnp
pop
jg
inc
xchg
scas
and
inc
add
sbb
cmc
jno
int
xchg
fsubr
mov
fild
mov
retf
xchg
fcmovu
xor
xchg
icebp
sub
aam
sbb
arpl
mov
ins
(bad)
dec
outs
loop
dec
xchg
fild
ror
jmp
or
xchg
mov
dec
mov
xchg
lds
push
pop
fwait
in
jbe
fcom
into
popf
sbb
test
xchg
xor
or
or
jmp
dec
ja
jmp
xchg
call
fs
xor
icebp
test
inc
ss
mov
(bad)
sub
mov
repnz
sbb
movs
sub
call
add
mov
push
pop
xchg
sbb
mov
fst
sub
pop
mov
jae
ins
jne
fs
and
sub
ret
jo
mov
test
fcomp
fst
std
hlt
imul
xor
cmp
bound
jo
mov
cmp
xor
dec
cli
ins
add
int3
call
nop
xchg
and
mov
push
aam
mov
popa
sbb
mov
mov
shl
movs
xchg
jl
pop
add
ficomp
or
les
sbb
xor
add
xchg
ss
(bad)
mov
nop
cdq
push
retf
xchg
js
adc
je
pop
xchg
call
mov
loope
pop
dec
ins
xchg
jle
adc
jo
inc
xchg
out
mov
xchg
push
mov
xchg
adc
inc
pushf
xchg
frstor
pop
out
popf
xor
jo
xor
pop
fs
jbe
xchg
mov
mov
test
dec
ss
or
cmp
inc
mov
sub
or
mov
push
xchg
pop
outs
js
dec
je
mov
int3
ds
jle
or
lock
push
mov
imul
ror
aam
in
clc
xor
jnp
lock
pop
fst
pop
sub
add
neg
aam
jo
xchg
cmp
inc
lds
sar
int3
xchg
push
add
pop
mov
pop
cmps
je
inc
xchg
inc
ins
sbb
cmp
xor
xchg
push
(bad)
(bad)
pop
jp
pop
xchg
jle
daa
sbb
fnsave
or
repnz
xchg
mov
lea
stc
xchg
jne
popa
sbb
fs
adc
out
icebp
or
jle
aad
popf
fild
push
dec
cmp
fnstcw
movs
push
xchg
cmp
push
clc
jmp
(bad)
jle
outs
rcl
xchg
mov
xor
int3
aaa
or
div
pushf
mov
fwait
dec
sbb
jg
inc
fwait
ins
adc
out
pop
icebp
cmps
fst
jmp
push
cmps
jns
xchg
clc
and
adc
push
fwait
inc
mov
stc
popf
out
addr16
mov
pop
sbb
sbb
xchg
test
in
add
shr
adc
sahf
add
jns
pop
jl
xchg
retf
adc
cmp
cdq
hlt
or
stos
jnp
ds
inc
jecxz
jg
xchg
movs
push
scas
pop
mov
mov
mov
push
add
fcom
ins
(bad)
xchg
cs
xchg
xchg
mov
xor
sbb
and
(bad)
cmp
xchg
cmp
ficomp
mov
mov
lock
mov
repz
pop
xchg
mov
lds
and
int3
sbb
adc
movs
in
and
jne
xchg
add
mov
add
js
mov
test
xor
mov
nop
cmp
jp
mov
mov
dec
push
mov
sub
pop
fcom
xchg
xor
cmps
jle
pop
(bad)
mov
hlt
push
fcom
mov
dec
xor
xchg
pop
push
outs
mov
mov
and
arpl
xchg
ja
xlat
(bad)
sub
jmp
xchg
xchg
lods
push
cld
jmp
inc
pop
sar
xlat
enter
sub
test
push
mul
aam
xor
mov
or
jo
daa
js
(bad)
jmp
neg
(bad)
test
and
xchg
in
xor
or
clc
mov
stos
add
sbb
retf
adc
sahf
push
xchg
mov
and
xchg
shl
mov
fwait
xchg
xor
cmc
in
out
mov
push
push
pop
jnp
retf
and
xor
cmps
enter
fwait
adc
jbe
inc
ret
ja
cmp
test
mov
xor
xor
out
push
mov
mov
mov
lods
jmp
pop
repnz
sub
mov
out
push
out
push
(bad)
sahf
xchg
nop
cdq
dec
mov
xchg
add
inc
ins
push
test
cmps
xchg
cmp
pop
mov
sbb
cli
mov
xchg
mov
lock
xchg
add
xchg
cld
call
mov
sahf
out
sbb
xchg
jbe
rcl
push
push
jbe
popa
fcom
aas
fnstenv
adc
aam
ret
mov
jo
mov
imul
es
sbb
int3
jp
push
inc
loop
shl
xchg
test
in
es
jmp
test
add
xchg
dec
fnstcw
mov
leave
xchg
cdq
or
or
je
(bad)
std
dec
pop
retf
mov
shl
ja
xchg
pop
test
in
xlat
xchg
repz
push
popa
rcr
push
sbb
lahf
and
es
mov
or
push
mov
dec
xor
rol
or
scas
cs
lea
mov
test
mov
xchg
jo
ror
adc
or
xchg
pop
add
push
lea
fimul
mov
gs
mov
fldenv
xchg
mov
push
sbb
hlt
shl
xchg
cmps
adc
mov
xor
jb
jbe
(bad)
push
mov
push
scas
addr16
sub
push
out
cmp
xor
pop
xchg
inc
retf
into
loopne
dec
shr
xchg
xchg
adc
lods
push
xchg
popf
mov
dec
fst
sbb
dec
xchg
in
xchg
mov
jmp
not
xchg
out
arpl
and
mov
daa
jnp
js
xchg
or
mov
(bad)
mov
lods
int3
push
xchg
shr
xchg
cmp
retf
jg
push
popf
mov
mov
xchg
or
xchg
inc
sub
mov
xchg
lahf
pop
test
pushf
sti
jecxz
in
fst
outs
call
xor
adc
mov
enter
movs
and
pop
mov
cli
cmp
dec
mov
xchg
xchg
inc
aaa
lea
xchg
jb
jge
mov
movs
idiv
mov
xchg
shr
dec
popf
xor
add
fsub
xchg
fild
xchg
inc
loopne
jno
pop
inc
inc
nop
sub
aad
mov
add
shl
xchg
ss
dec
inc
mov
push
adc
mov
out
mov
aas
xchg
addr16
sbb
lock
push
xchg
bound
xchg
xchg
inc
loopne
fistp
out
mov
mov
push
jmp
xor
cmp
mov
mov
pop
xchg
xor
pop
stos
lods
jns
xchg
mov
sbb
cld
bound
imul
and
pop
aaa
cmp
into
outs
btr
and
adc
push
xchg
frstor
iret
sahf
adc
xchg
mov
sbb
or
pop
pusha
xchg
sbb
aam
aaa
test
or
nop
jle
loopne
fwait
jecxz
mov
stc
xor
pusha
jnp
pusha
xor
rcl
inc
adc
inc
add
popa
mov
ins
push
aam
jge
mov
bound
mov
dec
retf
mov
je
jns
popa
lds
push
iret
push
jo
scas
and
in
test
jecxz
xchg
fwait
stos
sub
cdq
movs
add
push
push
xchg
test
mov
scas
repz
adc
pop
shr
push
sar
lds
out
xchg
add
imul
xor
xchg
(bad)
dec
xchg
inc
mov
mov
xchg
inc
fmul
mov
xchg
out
mov
jg
jmp
xchg
push
sub
pop
xchg
in
cwde
sbb
inc
dec
mov
push
cmp
shl
test
es
jmp
add
sub
or
jbe
inc
dec
ja
push
sbb
mov
fwait
(bad)
push
dec
inc
ret
sar
pop
pop
and
rcl
pop
sti
adc
mov
adc
jle
mov
or
neg
adc
dec
and
push
cwde
dec
imul
pop
xor
sbb
cmp
std
jmp
je
xchg
je
adc
(bad)
cmp
and
xchg
mov
fs
ror
jne
push
add
adc
in
repnz
xchg
daa
push
lods
shl
and
in
xchg
xchg
cmc
hlt
pop
pushf
dec
jecxz
mov
lods
jmp
sti
inc
jle
ins
sbb
call
adc
add
xchg
ficomp
fstp
les
dec
xchg
inc
jl
iret
adc
movs
mov
das
adc
aas
loope
or
movs
xchg
sub
rcl
mov
inc
lea
push
or
push
xchg
sub
or
mov
mov
movs
sub
or
mov
push
cmp
push
and
cwde
push
icebp
lock
mov
cmp
mov
cmp
ins
sbb
mov
enter
mov
adc
loop
aaa
xchg
push
push
imul
jns
pusha
mov
mov
pop
call
sete
and
inc
movs
hlt
pop
(bad)
repnz
or
arpl
pop
mov
dec
leave
pushf
xor
adc
xchg
jo
xchg
mov
mov
mov
rcr
fst
xchg
popa
jbe
nop
and
xor
retf
jns
jmp
dec
adc
xchg
call
test
iret
lahf
adc
sti
scas
or
movs
adc
mov
(bad)
lods
dec
cmps
xchg
fcomp
mov
xchg
retf
jns
popf
aaa
in
push
bnd
js
jmp
fadd
test
adc
mov
pop
xchg
scas
adc
scas
stc
out
dec
xchg
adc
or
nop
inc
push
mov
adc
or
fist
shl
xchg
sbb
sahf
pop
jecxz
or
or
out
cmp
mov
or
ret
push
dec
xchg
and
push
mov
dec
mov
push
xor
and
jg
xchg
jno
pop
cwde
push
fwait
mov
stc
jns
stos
rol
sti
dec
out
xor
iret
xor
add
push
xor
jg
jmp
jle
add
xchg
rol
ss
jnp
(bad)
xchg
cmps
push
inc
test
int3
mov
inc
icebp
outs
push
cld
xchg
mov
out
xchg
jnp
sub
imul
xchg
adc
jle
dec
fs
jo
mov
pop
xchg
aad
into
repnz
pop
je
popf
xchg
sbb
cmp
dec
xchg
jno
fcmovnbe
int3
icebp
add
mov
lds
dec
ficomp
loopne
sti
xchg
(bad)
cmp
push
lods
mov
inc
pop
mov
outs
xor
xchg
xchg
sbb
cmps
cmc
aaa
add
mov
push
jae
xchg
push
outs
xchg
pop
and
out
mov
xchg
push
jnp
sti
cmp
dec
loope
pusha
and
xchg
mov
mov
fwait
sbb
or
sub
adc
xchg
sar
pop
cmp
iret
and
mov
jns
in
push
imul
or
sbb
mov
mov
mov
mov
xchg
pop
mov
jb
adc
xchg
jle
adc
mov
js
inc
adc
jbe
push
loope
add
repnz
retf
in
sbb
fs
xor
and
dec
leave
adc
pop
or
push
inc
xchg
sub
xlat
pop
pop
push
inc
sbb
jno
ins
mov
cmps
inc
xchg
pop
mov
add
xchg
fstp
xchg
jg
lea
stc
adc
cmp
mov
test
mov
pop
gs
xchg
inc
cld
popf
sahf
nop
push
retf
aad
(bad)
xchg
aas
mov
mov
lods
xchg
or
jo
mov
pop
xchg
push
(bad)
enter
xchg
test
adc
or
xchg
inc
or
shl
imul
mov
jg
(bad)
xchg
call
repnz
xchg
sub
adc
repz
mov
lds
xchg
lods
aad
lea
aaa
jg
dec
mov
mov
sti
adc
mov
and
popf
push
sti
xchg
imul
cmps
ins
cmp
xor
add
inc
xchg
(bad)
loopne
mov
addr16
xchg
inc
mov
jp
sub
jl
xchg
dec
clc
dec
test
repnz
pop
add
jno
push
es
dec
dec
xchg
(bad)
cwde
test
xchg
mov
cli
test
pop
sbb
sub
movs
(bad)
dec
mov
je
scas
or
not
pusha
jb
mov
or
sti
xchg
mov
movs
arpl
and
hlt
dec
add
mov
aam
loop
les
mov
ret
(bad)
mov
mov
ror
xchg
ds
sti
pop
gs
stos
xchg
inc
add
shl
mov
jbe
lods
shl
test
xchg
(bad)
(bad)
sbb
xor
lods
cwde
and
mov
push
dec
xchg
adc
pop
push
xchg
xor
xchg
lock
adc
in
fldenv
push
or
shl
test
mov
mov
ror
ins
jp
imul
pushf
xchg
test
sub
mov
xchg
cmp
cli
xchg
and
add
stos
push
pop
dec
mov
add
xchg
int
bound
dec
jbe
lea
out
xchg
lahf
push
inc
cwde
pop
(bad)
fst
aaa
imul
js
xchg
pop
push
or
add
cmp
jecxz
xor
daa
xchg
jns
xchg
pop
shr
pop
add
sub
nop
sbb
dec
push
adc
dec
movs
fcom
test
leave
gs
mov
mov
mov
xor
adc
mov
imul
jmp
xchg
mov
cmp
xchg
scas
loopne
mov
addr16
jl
fisttp
xchg
sub
aas
inc
mov
es
sub
push
fst
clc
popf
les
stos
sti
mov
inc
cld
aam
int3
ret
jae
push
imul
lds
in
inc
or
(bad)
aaa
sbb
mov
into
xchg
outs
mov
mov
fmul
xchg
push
xchg
je
clc
pusha
pop
jne
push
pop
and
cmp
xor
in
jmp
mov
pop
push
fwait
jmp
shl
pop
sub
mov
add
cdq
jp
xchg
xchg
lock
pop
adc
xchg
retf
mov
mov
pop
rcl
in
xchg
xchg
shr
popa
pop
cmp
cmps
daa
xchg
xor
lock
ret
imul
xchg
push
clc
mov
dec
xchg
pushf
mov
mov
mov
test
cmps
loopne
sub
dec
pusha
lods
xchg
xchg
jl
adc
rcl
push
xchg
xchg
jb
jmp
xchg
xor
sub
icebp
fwait
mov
js
popf
pop
gs
sbb
mov
xlat
xchg
jmp
xor
add
out
inc
fs
mov
inc
stos
or
nop
adc
shr
hlt
fcom
cwde
data16
shl
or
pop
and
call
add
movs
mov
xchg
push
and
pushf
in
icebp
xchg
es
xchg
ret
jmp
pop
xchg
(bad)
dec
mov
in
pop
mov
dec
pop
mov
mov
shr
leave
loope
sbb
pop
aad
or
icebp
xchg
(bad)
int3
jb
in
mov
nop
jecxz
iret
lahf
xor
push
mov
mov
push
aam
loop
pop
pop
add
fwait
sahf
daa
add
clc
hlt
imul
shl
sti
adc
cmps
push
mov
js
jnp
ss
jp
pop
and
hlt
ja
xchg
dec
push
jge
scas
xor
loop
adc
lea
and
pop
dec
xchg
js
sub
mov
or
mov
add
sbb
loope
aad
faddp
xchg
add
and
int3
push
adc
test
xchg
sar
mov
ret
sbb
mov
mov
aad
jmp
xchg
repz
mov
mov
cwde
xor
iret
sub
jp
mov
cmp
jne
xor
xchg
(bad)
push
in
pop
call
push
add
mov
hlt
pushf
(bad)
(bad)
push
out
ins
xor
mov
inc
xchg
mov
cld
stc
loopne
mov
sbb
mov
sub
jp
jae
ret
adc
js
xchg
lahf
movs
or
addr16
mov
jne
test
inc
cmps
mov
scas
in
push
dec
out
mov
repz
dec
sbb
in
xchg
out
sub
mov
xchg
(bad)
adc
outs
push
mov
ins
and
les
repnz
adc
(bad)
fst
aaa
cmps
and
fwait
icebp
nop
mov
cmps
fwait
mov
xchg
scas
jg
hlt
jecxz
(bad)
mov
int
jp
add
in
pop
xor
addr16
jmp
fwait
dec
lds
and
sub
sub
iret
mov
jl
add
fist
jmp
or
das
or
xchg
sar
stos
dec
cmc
mov
mov
mov
aas
and
outs
loopne
nop
mov
ins
push
xor
xchg
imul
push
add
mov
sbb
out
mov
push
js
dec
adc
(bad)
pop
out
outs
add
dec
mov
sub
cwde
and
sbb
mov
(bad)
call
call
cdq
(bad)
fucom
push
fwait
scas
stos
dec
adc
fwait
stc
aaa
in
sbb
out
ss
xchg
jmp
inc
xchg
adc
inc
mov
mov
jbe
xchg
test
xchg
xor
xchg
dec
inc
int3
loope
pop
adc
rcr
shl
inc
les
lea
xchg
push
iret
mov
mov
or
xor
outs
sbb
xchg
or
xlat
hlt
dec
fcom
call
xchg
movs
mov
mov
mov
adc
adc
push
xor
xor
or
nop
jb
cmp
xor
xchg
xlat
ss
ret
xchg
push
push
bound
cld
fcomp
xchg
rol
nop
pusha
mov
sbb
dec
adc
pop
or
dec
cld
sub
add
and
xchg
and
ds
push
ret
imul
(bad)
in
sub
pop
adc
cmps
add
sbb
cmp
out
movs
repnz
dec
mov
push
adc
std
in
lahf
lods
jmp
jbe
mov
in
bnd
jns
sbb
xchg
adc
jnp
(bad)
clc
xor
cmp
ficomp
sahf
lods
mov
mov
shl
mov
jb
mov
xor
push
jl
jnp
into
sahf
leave
xchg
aaa
cmps
sbb
fimul
(bad)
in
xchg
icebp
cwde
mov
mov
add
jmp
or
scas
es
mov
xchg
sahf
in
push
push
cmps
ja
xchg
xchg
and
ins
mov
neg
jge
xor
loopne
xchg
hlt
sub
push
data16
adc
push
xchg
cmp
push
stos
xchg
mov
shl
and
call
xlat
(bad)
out
bound
lock
add
cmp
je
xchg
mov
adc
cwde
sbb
sahf
pop
repz
or
jo
xchg
cmp
iret
mov
mov
adc
imul
dec
not
xor
xor
dec
lds
(bad)
cld
out
sub
pop
(bad)
and
repz
mov
dec
mov
xchg
(bad)
arpl
out
test
aaa
outs
ret
mov
or
xchg
pusha
add
sub
out
jle
stos
cmps
xchg
xchg
out
aaa
pop
rcl
or
mov
sub
cmp
cmc
int3
fbld
mov
aam
mov
cmp
or
sub
inc
jp
sub
mov
xchg
add
cmps
cmp
enter
mov
jmp
inc
stc
add
imul
cmp
xchg
sub
cld
leave
jo
call
pop
sub
xchg
xor
xlat
xchg
or
mov
xchg
add
jecxz
into
sbb
dec
loop
xchg
adc
(bad)
mov
add
mov
mov
arpl
clc
in
mov
xor
outs
test
push
inc
test
xor
lods
sahf
add
lds
dec
mov
into
adc
cmps
stos
pop
sbb
test
xor
jge
and
sub
in
or
xchg
dec
add
sbb
xchg
mov
mov
out
pop
addr16
repz
sbb
mov
jbe
adc
sub
bound
aaa
daa
xchg
sbb
jbe
test
push
xchg
call
dec
call
lods
shl
(bad)
xchg
mov
pop
fidivr
les
(bad)
mov
cmp
xchg
and
push
dec
cmps
jg
or
fidiv
imul
xor
push
test
cmp
fucomi
xchg
js
and
call
aas
push
idiv
push
push
cmc
fwait
mov
cmp
jmp
in
push
add
sub
addr16
int
xchg
ret
adc
pop
ror
xchg
inc
aad
aaa
leave
xchg
je
sbb
xchg
fwait
push
les
sub
adc
test
cmp
dec
sti
add
jle
cmp
xchg
ja
test
jnp
pop
ficom
sub
pop
xchg
ret
or
xchg
repnz
retf
cmp
push
out
xchg
fld
sbb
shl
xor
xchg
xchg
lea
(bad)
lods
cmp
inc
retf
mov
ins
movs
mov
xchg
jbe
and
dec
mov
adc
push
jae
pop
mov
aam
adc
push
inc
test
xchg
dec
pop
cmps
or
bound
xchg
and
stos
in
jae
xchg
push
xor
lods
pop
aad
fst
sbb
adc
movs
stos
fld
imul
loop
xchg
xchg
pop
icebp
adc
mov
dec
cmps
mov
or
add
mov
pushf
ror
xchg
xor
mov
aaa
xchg
cld
(bad)
dec
pop
(bad)
sub
nop
pop
mov
push
dec
xchg
mov
jmp
add
xacquire
aad
test
inc
fwait
shl
in
(bad)
loope
sahf
xchg
push
inc
sbb
sub
xchg
push
adc
test
enter
push
and
or
test
jmp
xchg
mov
add
rcl
loope
adc
push
loopne
or
xchg
test
xor
pop
je
test
js
and
xor
sbb
add
inc
ret
cmps
or
mov
inc
xchg
(bad)
es
pop
xchg
adc
lods
fdiv
ret
adc
dec
popf
pop
mov
cmp
and
popf
dec
mov
pop
jg
(bad)
js
stos
fnstcw
xchg
data16
mov
jle
mov
retf
rcr
imul
(bad)
xchg
xchg
sahf
jl
cmp
jmp
cmp
mov
adc
pop
xor
xchg
idiv
(bad)
mov
jmp
xor
cmps
out
mov
xchg
into
pop
maxps
cdq
jnp
test
xchg
push
sub
mov
cld
xchg
sub
in
leave
popf
or
jns
fistp
pop
inc
aam
loopne
xchg
add
ret
inc
push
iret
sub
(bad)
pop
jne
adc
fnstenv
mov
pushf
fild
sub
mov
xchg
out
mov
xchg
loope
jns
test
cs
(bad)
in
sbb
js
outs
adc
jo
aam
mov
or
xor
arpl
xchg
xlat
fnstcw
retf
xchg
xchg
cli
cmc
pop
push
cmp
sbb
xor
into
sahf
enter
sbb
pusha
lods
ficomp
cmp
mov
mov
pushf
lea
lock
pop
in
dec
rcr
fwait
stos
dec
xor
adc
call
mov
ds
mov
add
lods
mov
shl
sbb
jb
adc
stos
cmps
mov
or
push
push
test
adc
dec
cwde
je
int3
mov
fisub
push
cmp
xchg
pop
idiv
push
das
jge
iret
jns
ror
mov
mov
push
imul
cwde
mov
push
and
push
push
jg
xchg
xchg
sub
push
imul
jmp
mov
rcl
dec
ror
xchg
jne
imul
cmps
loope
or
fisub
mov
stos
aaa
rcl
popa
xor
enter
sbb
dec
pop
loope
push
push
inc
fwait
or
movs
ret
cld
xchg
push
cdq
sbb
fiadd
dec
mov
pop
outs
mov
int3
movs
das
cmp
jne
lds
adc
inc
fsub
outs
cld
xchg
in
jbe
mov
int
xchg
popf
ins
mov
dec
xchg
sahf
inc
mov
sub
xchg
inc
push
cwde
rep
push
sbb
adc
and
es
xchg
daa
and
mov
xchg
in
into
and
dec
dec
push
mov
xchg
lods
cmp
stos
xchg
mov
imul
sbb
add
push
mov
inc
push
and
push
rcl
pop
call
jg
mov
sbb
xchg
ret
loopne
ret
sbb
popf
leave
das
mov
adc
mov
inc
repz
mov
(bad)
jne
lock
out
mov
xor
adc
ret
pusha
adc
xchg
cmps
cmp
cmp
fwait
js
add
out
xchg
mov
push
mov
movs
mov
jnp
mov
add
or
mov
ins
xchg
in
xor
outs
jne
cmc
sub
jmp
jae
lods
rcr
test
stos
hlt
ins
push
jns
lahf
stos
(bad)
jg
fld
(bad)
xchg
mov
ja
mov
les
jmp
ret
fcmovne
sub
or
repnz
ror
jg
xchg
cmc
sbb
mov
(bad)
jge
push
dec
div
xchg
sbb
gs
out
ins
aas
sbb
xor
bound
popa
add
jb
xchg
std
cmp
mov
mov
mov
xchg
loopne
rcr
sbb
pop
add
add
mov
mov
xchg
and
sbb
push
in
jnp
xchg
jl
mov
push
push
xchg
icebp
xchg
inc
xor
or
int3
clc
hlt
dec
loope
call
mov
xchg
in
dec
fsubr
stc
das
jle
cmps
dec
inc
outs
adc
mov
test
cmps
push
mov
loopne
push
cmp
jle
push
mov
or
je
inc
add
add
mov
div
xor
xchg
les
and
sar
xchg
mov
xchg
fiadd
loop
scas
mov
rcl
es
sbb
fisubr
xor
mov
inc
pop
sub
sbb
test
fwait
mov
movs
sub
mov
xor
lds
mov
sub
aas
call
and
pop
or
arpl
mov
movs
rol
repnz
xchg
jnp
mov
mov
adc
xor
push
jmp
xchg
sub
mov
jecxz
push
xchg
jne
in
ret
test
mul
fwait
je
xchg
sub
fdivr
sub
cli
es
pop
mov
sub
inc
push
mov
sbb
in
inc
adc
lods
dec
cmc
aaa
std
adc
hlt
add
xchg
not
pop
mov
stc
or
xchg
inc
jb
adc
xchg
sub
push
gs
call
int
inc
enter
xchg
sub
push
or
repnz
es
nop
sub
pop
daa
fwait
sub
cmp
add
fs
sar
mov
in
imul
xchg
cmp
lahf
out
xchg
daa
push
ret
mov
aam
movs
jns
dec
xchg
shl
inc
jbe
test
adc
leave
or
les
mov
imul
xchg
sub
jp
mov
test
xor
ds
xchg
std
lods
pushf
pop
ror
out
mov
or
mov
rcr
mov
sbb
xor
and
rol
rcl
xchg
cs
cmc
mov
xchg
push
xchg
out
xor
mov
leave
and
inc
mov
fisub
cmp
mov
pop
mov
sbb
out
pop
xchg
addr16
retf
je
xor
adc
and
mov
or
loope
mov
add
ficom
dec
jmp
lds
mov
xchg
xchg
(bad)
in
std
ret
sub
sub
lea
adc
cmp
xor
in
push
xchg
mov
xchg
mov
dec
call
xchg
aas
mov
and
scas
ss
test
call
mov
jecxz
add
pusha
mov
adc
xor
test
xlat
ins
std
int3
hlt
cmp
xchg
into
addr16
mov
ret
sti
mov
xchg
mov
jae
sub
mov
xor
lea
pop
sbb
adc
iret
dec
(bad)
rcl
and
jge
aam
mov
(bad)
dec
xchg
ins
jns
sub
mov
mov
or
jno
mov
sti
imul
mov
ins
jle
add
xchg
test
scas
fst
cdq
jmp
popf
inc
cmp
adc
retf
aam
ret
ficom
out
dec
gs
inc
inc
enter
add
mov
nop
in
(bad)
int
idiv
xor
(bad)
je
jns
inc
push
push
mov
xchg
pop
jne
or
xchg
jl
pushf
repnz
adc
ficomp
pop
jmp
sbb
jge
mov
jecxz
mov
loope
or
xchg
dec
mov
sub
ss
out
shl
stc
xchg
fs
xor
sbb
fld
mov
jno
nop
jno
xchg
xchg
(bad)
fs
ret
je
add
std
adc
fimul
push
xchg
lahf
jbe
mov
jne
xchg
mov
call
mov
inc
cmp
stc
ds
test
cmp
fidivr
xchg
outs
retf
adc
movs
adc
scas
cmp
repnz
mul
(bad)
jmp
xchg
ficom
adc
xchg
cmp
push
cs
push
or
nop
add
test
into
outs
pop
stos
sbb
out
ss
test
xchg
mov
ret
add
(bad)
test
xchg
mov
dec
xor
xchg
mov
pop
add
pop
jg
test
aad
or
gs
pop
lea
iret
mov
jle
out
rcr
cmp
adc
dec
pusha
mov
mov
push
sub
call
inc
push
xchg
push
fcomp
cmp
xchg
mov
push
jg
and
rcl
xchg
adc
push
jp
jae
data16
loop
fwait
cmp
int3
hlt
adc
dec
sub
mov
je
inc
outs
push
or
lods
xchg
dec
inc
into
test
mov
adc
jno
outs
or
xor
sub
xchg
ror
or
shl
inc
xchg
(bad)
mov
sub
out
cdq
in
cmps
or
xchg
stc
or
icebp
cld
xchg
in
dec
loopne
fsub
inc
mov
xchg
and
jmp
or
sbb
xchg
scas
mov
sar
adc
xchg
mov
and
pop
cmp
repnz
xchg
test
mov
loopne
jne
or
push
push
lea
addr16
jnp
adc
(bad)
in
or
jg
dec
enter
jp
ror
xchg
push
std
jo
mov
and
int
dec
sbb
push
xchg
out
mov
out
jge
xor
mov
ins
adc
xchg
xlat
pop
mov
hlt
dec
cdq
fwait
rol
push
dec
test
(bad)
pop
lds
stos
pop
aas
xchg
cmp
jae
cs
xchg
hlt
jnp
loopne
or
xchg
je
dec
sbb
inc
addr16
fwait
imul
and
jg
je
js
xchg
stc
jmp
xchg
idiv
xor
xor
out
adc
sub
add
hlt
mov
pop
fadd
or
inc
fs
stos
push
pop
mov
xchg
mov
test
xchg
rol
adc
xchg
cmps
sbb
mul
mov
(bad)
xchg
and
shl
icebp
repz
push
hlt
and
add
dec
stos
idiv
xchg
fldenv
ins
out
outs
mov
hlt
(bad)
fwait
mov
fsubrp
sti
cwde
adc
mov
jge
dec
add
jle
cmps
jmp
xchg
adc
xchg
push
call
clc
repnz
aas
jmp
inc
dec
xchg
inc
pop
pop
sahf
hlt
cdq
aam
ret
stc
cdq
xchg
fwait
mov
loopne
inc
pusha
inc
mov
jae
add
xchg
xchg
xchg
or
aam
xchg
mov
xchg
or
scas
xchg
xchg
imul
lds
wbinvd
fst
xchg
lea
icebp
xchg
call
xor
inc
xchg
adc
xlat
mov
xchg
cmps
call
xchg
mov
aas
jl
xlat
push
stc
or
xchg
xchg
rcl
xchg
jae
mov
jp
or
push
mov
sub
or
out
outs
jl
xchg
call
scas
jne
xchg
sub
mov
repnz
push
cli
lock
js
adc
stos
cs
lea
mov
and
xchg
in
or
xchg
jno
mov
sbb
inc
cmp
mov
and
push
push
add
and
clc
dec
cs
stc
iret
in
adc
out
jp
fmul
add
mov
sar
xchg
xchg
rcr
and
xchg
cmp
into
push
xor
mov
xchg
adc
sub
aam
sub
retf
cmp
outs
xchg
daa
adc
out
es
fldl2t
xchg
pop
mov
add
xchg
xchg
aaa
ss
mov
rcr
shl
mov
mov
jne
lea
push
test
inc
sbb
out
xchg
ret
cli
test
mov
and
scas
jae
cmps
mov
xchg
in
xchg
mov
xor
push
push
xchg
mov
enter
call
ds
aad
cmps
int
pop
dec
xchg
stc
push
in
dec
and
push
dec
xor
fisubr
into
loope
push
outs
jle
fs
inc
mov
mov
adc
add
aaa
repnz
mov
loop
cld
pop
mov
ins
in
add
lahf
ret
hlt
cmp
adc
ss
xchg
call
and
add
out
into
xchg
or
and
pop
xor
xor
loope
xchg
push
mov
cmps
and
sbb
(bad)
ins
cmc
sbb
int
cmps
mov
les
in
mov
fst
das
mov
mov
jnp
sti
(bad)
repz
popa
stos
xchg
push
daa
out
dec
jg
xor
xchg
test
(bad)
aam
out
jb
adc
js
jmp
adc
gs
es
cmc
ss
clc
call
xchg
mov
and
pop
sub
xchg
pop
out
push
push
lods
daa
xchg
xchg
jmp
sub
cmp
add
xchg
mov
adc
sub
xlat
and
or
inc
minps
test
xchg
stos
lea
fisubr
hlt
mov
adc
aaa
syscall
xchg
pop
adc
das
scas
movs
and
sbb
adc
loope
fwait
popf
je
xchg
data16
push
mov
xchg
rol
cmp
mov
call
jbe
shr
sbb
icebp
ds
lea
mov
mov
rcr
in
xchg
enter
or
int3
mov
cmp
lahf
mov
addr16
mov
mov
push
sbb
ret
mov
xchg
add
sbb
cdq
xchg
aas
or
in
and
cld
dec
mov
test
mov
aam
push
xchg
xchg
jbe
loopne
and
out
xchg
mov
push
add
bound
xchg
addr16
cmp
xchg
push
nop
mov
xor
jns
pusha
sub
xchg
hlt
imul
dec
adc
xchg
cmp
jb
adc
pop
sete
nop
dec
daa
aas
mov
iret
mov
(bad)
xchg
push
(bad)
sar
stos
mov
push
popa
int
adc
adc
and
stc
mov
mov
pop
push
loop
pop
mov
sub
jp
retf
xchg
xchg
pop
mov
fistp
psllq
add
fist
pop
je
and
inc
xchg
sar
and
push
jnp
or
xor
and
mov
or
aas
outs
xchg
pushf
movs
dec
js
add
add
push
sar
lods
shr
or
jne
test
cli
xchg
mov
xlat
mov
ret
(bad)
retf
scas
adc
xchg
mov
les
xor
js
sahf
scas
mov
mov
mov
adc
push
or
add
addr16
repnz
loop
push
mov
stos
xor
xchg
retf
sbb
xchg
xchg
cmc
fiadd
lods
xor
mov
sub
pusha
adc
fcomp
pop
xchg
sub
rol
push
test
retf
add
push
jno
lahf
scas
mov
jb
xchg
adc
out
into
aas
call
mov
adc
cmp
out
push
movs
into
mov
mov
push
test
cs
lahf
repnz
sub
daa
sbb
aam
add
or
xchg
sub
pop
xor
pop
mov
cmps
mov
lock
(bad)
and
and
retf
loope
and
or
cmp
mov
dec
pop
add
pop
sbb
imul
cmp
or
adc
jo
mov
out
dec
jno
cmp
pop
pop
cwde
adc
out
fwait
or
xchg
pop
inc
mov
cld
(bad)
dec
les
shl
pop
mov
jo
adc
xor
rcr
es
mov
hlt
rol
jl
xchg
pop
call
xchg
xchg
cmp
push
ins
or
test
add
and
fwait
xor
mov
gs
movs
clc
xchg
pop
push
inc
stos
(bad)
jb
rcl
cmp
xor
add
add
cwde
mov
lock
adc
aam
ret
mov
lock
push
push
inc
fistp
call
xchg
ret
lods
xchg
sbb
mov
sbb
push
cmps
xchg
pop
test
jo
cdq
and
jne
jmp
push
sub
xchg
sbb
addr16
xchg
int3
(bad)
fs
dec
lock
or
xor
cli
arpl
sbb
adc
popa
push
xor
push
push
xchg
sbb
pop
aad
and
cwde
rcl
cs
adc
ficom
xchg
mov
push
xchg
cwde
pop
inc
xchg
mov
adc
or
xchg
mov
fwait
dec
inc
xchg
int
lods
pop
loopne
add
xchg
mov
pop
pop
retf
sbb
and
les
xchg
shr
add
xchg
cmp
cmp
lea
nop
or
xor
dec
lds
test
leave
stos
push
fcom
xor
mov
(bad)
xchg
data16
fmul
mov
pop
clc
xlat
fisub
mov
adc
inc
jmp
test
add
xor
inc
mov
xchg
xor
repz
push
jmp
retf
aam
daa
imul
ror
xchg
jmp
loopne
push
test
xchg
adc
xchg
ja
push
out
cmp
jge
stc
mov
push
cmp
sbb
sar
lock
mov
popf
stos
adc
xor
cdq
aad
or
sahf
fs
leave
stos
pop
outs
pop
xchg
mov
icebp
and
js
and
or
adc
sub
mov
faddp
lea
mov
push
sahf
repz
bound
fist
aam
mov
in
xchg
xchg
xor
xor
xchg
xor
jbe
xor
pop
les
int
retf
pop
jl
jo
sbb
sbb
pop
or
mov
in
(bad)
enter
data16
cli
stc
sbb
clc
and
xchg
lahf
sbb
xor
ret
mov
les
add
and
cmp
xor
xor
test
inc
fs
jle
jp
lods
fdiv
push
add
inc
xlat
into
or
adc
dec
dec
mov
stc
ins
ja
jecxz
in
xchg
xchg
test
idiv
sbb
sub
add
jecxz
shr
aaa
into
xchg
xor
xor
pop
add
inc
rol
out
sub
and
imul
mov
push
into
mov
jg
mov
rol
pop
and
xor
pop
xchg
imul
or
xchg
repz
pop
sti
into
jl
mov
cmps
hlt
(bad)
push
sub
xchg
cdq
push
push
jecxz
sub
lahf
jne
and
in
or
cmps
jo
jns
aaa
sbb
xchg
push
and
mov
dec
bound
repz
adc
jmp
test
add
jle
aam
sub
rol
xor
cmp
xor
sbb
popa
cs
sbb
cmps
and
and
cmp
mov
aas
xchg
cmp
popa
out
fcom
mov
mov
aaa
(bad)
xchg
adc
movs
xchg
mov
add
call
fcomp
xchg
jae
imul
ins
mov
mov
pop
jmp
inc
and
aad
adc
(bad)
clc
lock
sti
xchg
ror
in
ror
fs
inc
test
stc
push
mov
fstp
mov
xor
xchg
sbb
or
jo
and
ins
inc
jnp
lea
fwait
in
mov
div
stc
cmp
std
aas
jge
call
int
add
inc
iret
lock
and
and
inc
ins
in
cmc
cdq
arpl
jl
je
push
leave
mov
mov
fcom
mov
rol
(bad)
adc
jle
and
mov
mov
gs
mov
fs
mov
div
xchg
xor
fistp
add
enter
sbb
or
ror
mov
je
xchg
movs
add
mov
adc
dec
and
repnz
pop
fwait
jno
fucom
jne
inc
push
xchg
sar
inc
(bad)
jmp
or
mov
cmps
nop
inc
jmp
clc
xchg
inc
ss
leave
inc
xchg
push
push
jp
xchg
cmp
adc
xchg
cmp
sbb
xchg
gs
mov
cld
xchg
iret
fsqrt
adc
out
fidivr
stos
sub
aam
mov
mov
ret
popf
adc
sbb
inc
aam
iret
lods
xchg
add
pop
in
mov
(bad)
inc
xchg
xchg
or
icebp
fldcw
fld
inc
mov
mov
xchg
pop
enter
sub
xchg
loope
pop
cmp
rcr
inc
inc
les
xchg
xchg
inc
jle
pop
sahf
ins
or
arpl
in
(bad)
inc
mov
adc
adc
mov
mov
xchg
push
ret
xchg
sub
jge
jp
rcr
xchg
xor
xor
mov
fwait
ins
nop
clc
neg
and
outs
push
sub
aam
mov
jae
aam
or
cmp
or
jne
cmp
outs
add
movmskps
ret
fild
enter
les
add
sbb
pop
(bad)
mov
xor
(bad)
push
aaa
xchg
sbb
js
and
mov
mov
sub
xchg
inc
xchg
and
sbb
push
jbe
xchg
mov
popa
or
shl
inc
dec
xchg
add
aad
xlat
imul
sub
mov
retf
push
mov
sbb
int
mov
aam
mov
call
xor
pop
mov
and
ja
repnz
ins
mov
jl
jle
push
rcl
cmp
pop
cdq
or
xchg
sar
cmc
adc
xchg
adc
fmul
test
mov
push
jbe
movs
mov
mov
xchg
add
test
xchg
push
fs
addr16
leave
jbe
fwait
adc
(bad)
mov
jge
xor
add
jecxz
imul
mov
xchg
push
mov
sbb
xchg
add
push
and
xchg
xchg
mov
add
(bad)
push
mov
mov
in
in
fdivp
xchg
movs
cmp
rcr
sti
xchg
push
ret
mov
clc
cmp
cmc
test
xor
test
imul
or
and
push
xchg
sbb
call
adc
imul
in
sub
mov
pop
lods
jecxz
iret
adc
mov
push
into
inc
add
xchg
jbe
cmp
out
rcl
int
dec
fwait
ret
lea
sub
idiv
jge
xchg
(bad)
dec
pop
hlt
mov
cli
inc
stos
stc
outs
cmp
push
fwait
sbb
cs
cmp
or
aad
data16
div
xor
xchg
jo
add
mov
mov
pop
cdq
and
mov
xlat
add
push
cwde
(bad)
call
xor
sub
out
in
hlt
sti
and
enter
imul
adc
imul
jae
fisttp
arpl
jmp
or
lds
cmc
push
xchg
push
std
clc
cmps
addr16
mov
test
xor
jne
mov
dec
std
and
mov
into
movs
jp
adc
mov
sbb
push
inc
inc
pop
add
repnz
push
inc
lea
es
push
test
arpl
fdivr
mov
inc
movs
mov
loope
xchg
icebp
data16
xchg
lea
inc
cmc
pop
stos
lock
xor
xor
stos
jecxz
retf
mov
(bad)
lods
push
xor
cmp
dec
sub
sbb
xchg
clc
fistp
or
push
std
popf
fadd
daa
fsubr
lfs
sub
xchg
dec
pop
and
xchg
or
adc
aad
ror
sbb
loope
and
mov
cmp
ret
ss
pushf
adc
pusha
push
xchg
pop
xor
sub
pop
(bad)
retf
inc
xchg
clc
add
cmps
xchg
mov
mov
lds
lahf
xchg
pushf
pop
fsub
xchg
ins
dec
jnp
dec
rcl
xchg
repz
popa
movs
sub
cmp
push
jae
push
xchg
adc
jne
shl
adc
pop
push
dec
loop
mov
dec
mov
pop
add
push
loop
mov
into
and
or
dec
push
inc
xchg
es
jle
(bad)
data16
sub
sbb
(bad)
iret
outs
xchg
mov
dec
xchg
mov
inc
shl
xor
mov
jmp
call
rol
add
aam
lahf
jb
ins
movs
jno
add
xchg
push
in
lds
and
je
xchg
dec
mov
pop
sbb
test
push
fwait
jle
call
in
adc
loope
cmp
adc
xchg
shl
pop
dec
mov
or
jo
push
mov
or
xchg
mov
jp
addr16
stos
mov
in
retf
dec
stos
sub
xor
call
cwde
mov
or
or
mov
dec
adc
pushf
mov
div
int3
dec
unpcklps
movs
les
cmps
xchg
movs
out
push
loope
xchg
out
adc
pop
gs
jl
mov
xchg
fwait
mov
inc
pop
xchg
mov
mov
mov
rcl
mov
jmp
fwait
jne
out
add
je
sub
mov
or
in
or
xchg
int
sbb
dec
push
imul
out
int
add
mov
mov
mov
loopne
jbe
and
xchg
clc
aaa
loop
mov
xor
bound
popf
mov
pop
call
cmp
mov
sub
jge
pop
aaa
rcl
jmp
push
aas
in
(bad)
imul
jne
mov
pop
pop
fistp
mov
mov
and
das
lods
cmps
fnstcw
pop
xchg
bound
data16
xchg
add
es
popf
clc
xchg
addr16
and
fwait
mov
arpl
adc
inc
fstp
add
sti
xor
inc
and
pushf
xor
in
gs
mov
es
out
test
sbb
or
pop
mov
retf
cld
jns
push
jbe
adc
xchg
add
(bad)
mov
xor
adc
enter
(bad)
mov
dec
fwait
aam
pop
and
dec
xchg
stc
popa
ret
or
xchg
enter
fbld
xchg
xchg
cmps
xchg
(bad)
xor
xor
aaa
scas
add
ror
sbb
mov
popa
dec
jl
mov
xchg
enter
ins
xchg
fisub
jns
dec
into
pop
cmps
shl
inc
lds
xchg
test
cmp
les
jb
dec
scas
jmp
lea
mov
adc
ins
xlat
nop
sub
xchg
mov
push
popf
xor
jne
cmp
sub
stos
adc
xchg
mov
dec
or
pop
inc
mov
ds
inc
pop
mov
aas
mov
lods
lea
cmp
sar
popf
dec
clc
xchg
cdq
out
mov
fnstsw
inc
and
mov
sbb
sar
pusha
xor
iret
mov
aam
in
sbb
add
pop
stos
push
(bad)
aas
xchg
cld
mov
int
lock
adc
add
je
adc
xchg
jb
ret
(bad)
je
xchg
cmps
sbb
mov
sbb
xchg
ficom
out
jge
mov
adc
in
push
scas
cmp
dec
test
xchg
push
in
mov
jmp
cmc
addr16
sub
inc
inc
ret
mov
outs
in
pop
cmps
jecxz
(bad)
xchg
cwde
aad
sub
xchg
cmp
jne
sbb
xchg
movs
pusha
aas
nop
cmp
push
stos
and
mov
fwait
stc
sar
adc
or
pop
sbb
cmp
imul
fnsave
daa
xchg
xlat
xchg
test
xchg
call
int
rcl
loop
adc
dec
sub
repnz
jle
adc
inc
std
inc
mov
les
lods
neg
mov
xchg
xchg
mov
pop
movs
add
xor
inc
aad
sub
pusha
clc
pop
psraw
fs
idiv
or
adc
xchg
inc
push
push
out
loop
mov
leave
xchg
add
lds
xchg
push
xor
fiadd
lea
aaa
fwait
test
cdq
push
rol
fdiv
sbb
fistp
mov
sti
inc
ret
mov
mov
je
imul
adc
frstor
push
ror
xchg
cmp
xor
fsubr
push
test
or
cdq
jecxz
xchg
ret
daa
sbb
and
sbb
mov
dec
jns
mov
sbb
xchg
jecxz
jne
fs
stos
fs
inc
jp
aad
ins
xor
push
lods
jmp
fst
cmp
push
pop
mov
xchg
out
jmp
jecxz
xlat
call
jmp
push
shl
stos
inc
mul
mov
inc
xchg
cmc
xchg
jo
jae
lahf
jns
add
mov
sahf
pop
pop
and
or
and
stc
xchg
fcmovnu
dec
xchg
std
xor
mov
movs
push
repz
mov
push
adc
jle
adc
fwait
lds
adc
or
cdq
mov
adc
xor
and
cmps
(bad)
pop
dec
cwde
sbb
not
and
(bad)
int3
and
popf
jmp
sub
dec
lea
leave
or
call
adc
mov
xchg
dec
adc
and
jbe
add
in
xor
push
jb
movs
xchg
ja
xor
dec
pop
pop
pop
xchg
mov
movs
push
pop
xchg
xchg
and
lea
ret
jmp
loope
jle
jbe
xchg
mov
repnz
ins
push
push
push
mov
mov
nop
imul
jb
add
mov
push
jns
mov
test
sti
adc
int
adc
out
pop
mov
data16
mov
dec
rcl
sbb
dec
sti
and
jmp
fidiv
jle
lds
ins
mov
sub
and
loop
outs
xchg
xor
jns
inc
loope
cmp
jmp
xor
cmp
dec
dec
not
sub
adc
not
out
jne
retf
xchg
inc
movs
xchg
fistp
mul
lds
stos
mov
pop
mov
daa
mov
dec
fcom
in
adc
xchg
jbe
cmp
xchg
rcr
sbb
xchg
aaa
loope
push
adc
jnp
mov
loopne
xchg
xchg
cmps
mov
test
call
jp
lods
je
adc
cs
push
inc
fmul
fdivr
xor
je
mov
out
mov
pop
mov
push
gs
mov
xchg
pop
cmp
inc
mov
fwait
mov
xchg
into
mov
push
(bad)
aas
lods
outs
inc
popf
add
es
xchg
jl
(bad)
icebp
aas
sti
xchg
aad
xchg
sahf
add
fs
sub
stos
inc
cli
mov
mov
xchg
test
sbb
retf
mov
push
and
pop
adc
jl
jmp
pop
out
ret
jg
fs
xchg
repnz
leave
and
addr16
rcl
jb
or
xchg
pushf
dec
movs
xchg
adc
jo
stos
pop
jns
xchg
stc
(bad)
and
mov
push
pusha
push
adc
jne
push
in
ret
add
aam
mov
mov
imul
xlat
fsub
xchg
jecxz
movs
mov
xchg
shr
jmp
dec
add
push
pop
xchg
cmps
(bad)
adc
jno
xchg
add
jnp
rcr
push
out
or
cmp
xchg
xchg
jp
xlat
xchg
mov
fst
scas
inc
push
xchg
(bad)
jne
add
add
hlt
es
int
cmp
push
xchg
xchg
test
lds
ja
dec
xchg
jnp
jecxz
test
add
test
xor
dec
aam
je
inc
sti
adc
daa
rcr
shl
xchg
inc
lea
dec
clc
loope
ret
rcl
pop
js
out
mov
call
add
mov
mov
ficom
or
shl
test
lock
and
add
inc
sub
xchg
dec
(bad)
aas
jmp
jo
cmp
cmp
xchg
cmp
or
adc
xor
iret
fbstp
loopne
cmps
adc
pop
div
mov
lock
int3
popf
retf
and
rol
mov
jae
stos
popa
push
js
mov
and
or
sbb
stos
aaa
stc
cmp
or
add
call
ret
cmc
pop
pop
mov
xchg
cmps
fld
int3
ret
cmp
pop
aaa
add
lock
in
xchg
mov
pop
mov
pusha
or
lods
imul
push
aaa
sbb
fmul
int
adc
xchg
inc
call
fwait
mov
loop
mov
dec
adc
sub
fs
inc
daa
int
ror
push
mov
jmp
or
aaa
fild
xchg
and
mov
int3
inc
and
test
or
pop
jl
dec
sub
push
lods
aam
fdiv
fwait
sub
push
cmp
jno
adc
jle
add
xchg
sti
nop
cdq
mov
dec
xchg
sbb
push
push
push
test
jb
jmp
call
xchg
repz
pop
xchg
aas
adc
ins
mov
cmp
mov
outs
(bad)
shl
mov
mov
pop
sub
loopne
aaa
push
mov
sub
mov
xor
inc
or
in
int
xchg
push
xchg
or
(bad)
or
rcl
pop
add
jmp
mov
xchg
sbb
cmc
scas
test
rcr
push
add
in
xor
pop
jnp
in
mov
(bad)
js
adc
mov
inc
stc
in
cmp
xchg
xchg
sbb
pop
nop
push
xchg
mov
shl
or
popa
mov
or
imul
es
scas
dec
sub
mul
outs
mov
jbe
es
pop
add
mov
xchg
jge
test
xchg
loopne
dec
test
repz
adc
cmp
cdq
cmp
inc
push
pop
lahf
ins
sbb
ja
and
add
ss
into
adc
lods
inc
inc
aam
or
rcl
daa
adc
adc
dec
sub
cmc
xchg
sub
add
pushf
dec
jecxz
nop
stos
xchg
fs
cmp
fnstenv
push
stos
mov
dec
inc
push
jmp
add
daa
in
test
dec
loope
call
pop
std
fsubr
and
push
cdq
cdq
aad
cmp
dec
push
sub
xchg
stc
mov
jmp
fbld
push
mov
(bad)
jmp
or
loopne
ds
mov
cmp
scas
pop
fwait
add
xchg
test
aaa
push
inc
xchg
or
jmp
mov
(bad)
cmp
mov
sti
sub
sahf
jle
bound
in
jbe
xchg
aad
mov
imul
push
loop
jo
adc
movs
daa
in
aam
push
aam
stos
inc
xchg
dec
pushf
adc
push
mov
pop
mov
out
aad
sub
(bad)
mov
in
test
xchg
mov
adc
sub
cmps
xchg
dec
fistp
aam
jb
adc
add
xchg
dec
fimul
out
iret
pop
sbb
dec
xchg
sbb
mov
cmp
or
aaa
xchg
cdq
mov
adc
jle
mov
sbb
xchg
pusha
cmp
inc
dec
push
and
lds
pop
sbb
ja
stos
and
jecxz
pusha
pop
scas
mov
or
xchg
or
inc
cmps
adc
push
aas
pusha
xchg
jbe
cwde
cmc
mov
fadd
hlt
or
mov
ins
mov
mov
inc
xchg
mov
jmp
dec
or
in
sub
push
cmps
icebp
xchg
sbb
dec
add
xor
mov
sub
aaa
mov
xchg
jae
popa
in
lds
add
dec
add
retf
xchg
xchg
sub
cwde
call
dec
frstor
jno
sbb
ja
xchg
xchg
in
adc
inc
jnp
mov
out
mov
fcomp
aam
aaa
int
movs
xchg
mov
jmp
stos
pop
and
ret
jp
push
aam
mov
pushf
dec
push
push
jp
dec
adc
xchg
mov
adc
add
test
stc
retf
dec
mov
pop
out
xchg
(bad)
fadd
fwait
push
add
adc
fs
loope
jge
add
push
jne
jle
shl
fst
mov
jge
outs
jecxz
push
cmp
cmp
jecxz
test
mov
stos
in
xchg
sbb
daa
push
push
cmp
sbb
xchg
cmc
rcl
gs
imul
pushf
stos
xchg
push
jae
and
xchg
(bad)
xchg
dec
inc
dec
sub
jle
mov
fwait
lods
mov
pop
mov
push
mov
lock
lods
clc
or
pop
adc
pushf
inc
push
rcl
leave
xchg
stos
mov
lods
lock
mov
cli
(bad)
mov
sbb
fucomi
jp
rol
pop
scas
int3
out
(bad)
fwait
mov
hlt
cmp
xchg
out
or
add
xchg
stos
iret
ins
js
lock
xchg
push
int
aam
push
ficom
xchg
and
test
push
shl
scas
jb
arpl
sti
xchg
xchg
xchg
sbb
(bad)
jmp
cdq
lea
and
mov
cmps
jb
cs
pop
mov
push
pop
(bad)
movs
pop
fcomp
test
xchg
fwait
ror
sbb
pop
in
xchg
out
inc
lahf
cmp
xor
or
xor
or
(bad)
cmp
sbb
xor
xchg
cmp
popa
aam
or
jno
jecxz
je
rcl
adc
mov
pop
aam
xchg
mov
movs
and
xchg
loope
mov
loopne
adc
ror
xchg
jnp
test
(bad)
mov
movs
int
pop
mov
adc
int
add
mov
test
shl
xchg
add
fcom
or
and
(bad)
(bad)
in
cmp
ja
inc
ins
aad
push
leave
dec
add
jle
mov
rol
push
mov
adc
imul
push
out
xchg
icebp
aam
rcr
or
ins
mov
xchg
mov
jg
popf
das
sbb
or
daa
add
push
cmps
or
xchg
lods
mov
call
mov
mov
(bad)
fmul
mov
mov
mov
mov
mov
fcomp
pop
(bad)
(bad)
sbb
test
pop
scas
fdivr
mov
dec
(bad)
lods
mov
mov
fcomp
jae
mov
sbb
sbb
mov
jnp
inc
mov
mov
mov
retf
xchg
in
adc
mov
mov
fsub
arpl
ins
fnstsw
and
fld
mov
repz
and
imul
push
dec
sub
in
mov
sbb
push
mov
jmp
mov
ds
mov
mov
fsub
jnp
nop
adc
mov
push
sbb
scas
sbb
sahf
jbe
mov
stos
test
test
cmc
aam
sub
xchg
inc
xchg
aas
lock
mov
cld
inc
cwde
movs
and
pusha
push
mov
shl
adc
dec
pop
(bad)
stc
dec
fidivr
js
out
imul
mov
dec
xor
adc
cmp
cmp
xchg
inc
mov
cmp
gs
sar
cmp
retf
xlat
jne
(bad)
xchg
jmp
xchg
inc
sub
sub
add
inc
aas
arpl
jl
xor
lods
rol
jp
movs
test
dec
mov
stos
movs
or
test
xor
cmps
or
movs
fdivr
lds
fadd
sbb
repz
fsub
adc
fsubr
and
cdq
fistp
xchg
repz
sbb
pop
cdq
dec
repnz
mov
ss
and
stos
aam
(bad)
fist
sahf
fwait
fwait
mov
pushf
ja
js
fadd
fwait
mov
nop
mov
sbb
cwde
rcl
add
mov
nop
fcom
clc
xchg
test
and
pop
jp
in
mov
sbb
mov
cmp
xchg
push
and
mov
cmp
jnp
fild
pushf
jae
nop
fsubr
imul
fcmovnu
nop
jbe
mov
jo
(bad)
adc
adc
(bad)
lea
iret
shl
movs
rcl
cmp
sbb
inc
arpl
imul
in
pusha
mov
mov
ret
sub
jnp
push
mov
adc
arpl
jmp
dec
mov
cmp
and
test
dec
push
in
dec
in
test
dec
out
inc
inc
call
movs
mov
cwde
sbb
mov
xchg
cmp
fsubr
test
pop
sbb
sbb
push
movs
jg
fwait
sbb
push
cmp
mov
pop
push
and
mov
and
stos
pop
les
mov
in
aaa
arpl
test
sbb
and
sub
bound
mov
xor
das
xchg
sub
mov
aas
lods
dec
pop
mov
pop
adc
pop
das
cli
daa
(bad)
cs
push
push
fwait
jae
mov
xor
xchg
xor
sbb
adc
sti
pop
pop
xor
sti
mov
xor
push
and
pop
or
and
enter
adc
out
add
push
ret
and
mov
cmc
xor
sub
sbb
mov
dec
inc
das
inc
xor
sub
enter
sbb
and
mov
cmp
fs
push
das
xor
xor
jo
jae
push
jno
into
dec
out
jbe
xor
mov
stc
in
ins
pop
pushf
inc
inc
cwde
fistp
cwde
out
xor
retf
lods
aam
ret
loopne
pop
sub
lods
imul
xchg
icebp
adc
out
lds
lods
xchg
das
test
sub
mov
inc
xchg
je
jecxz
jge
int
das
mov
jmp
mov
inc
pushf
popa
int
addr16
mov
movs
das
mov
aas
arpl
mov
cmp
mov
mov
les
pushf
cmp
and
imul
adc
pushf
jmp
mov
cli
mov
pushf
retf
movs
popf
ret
loop
daa
(bad)
pushf
mov
xchg
das
(bad)
jle
xor
pop
dec
dec
sbb
or
mov
mov
pushf
jg
xchg
jne
mov
gs
arpl
jecxz
pushf
cmp
movs
(bad)
mov
lods
pop
pushf
or
daa
sub
mov
mov
lds
jl
or
cmps
std
xchg
xchg
test
xor
inc
jecxz
popf
iret
and
lds
fstp
mov
and
cmps
add
and
aaa
mov
and
scas
add
mov
movs
iret
fild
(bad)
fild
push
mov
sahf
movs
mov
in
inc
test
movs
scas
test
daa
test
movs
cmps
test
pop
test
movs
lahf
test
fild
in
mov
cdq
movs
(bad)
xor
test
xor
movs
xchg
test
imul
jg
test
inc
aam
ja
test
daa
aam
outs
cmp
cmp
aam
pop
cmp
add
lahf
hlt
jmp
push
cmp
xor
sub
sbb
sbb
movs
dec
cs
hlt
adc
xor
movs
mov
lock
and
sbb
sub
fs
adc
xor
das
aas
and
mov
push
sbb
pop
inc
xchg
outs
inc
push
scas
(bad)
sbb
sti
test
xchg
ret
mov
fcomi
setg
retf
(bad)
mov
dec
sub
cmp
mov
retf
ss
xor
je
pop
xchg
ds
stos
mov
push
rcr
lods
repz
dec
dec
outs
shl
data16
in
mov
hlt
mov
xor
ret
push
xor
jb
jnp
and
and
jne
fidivr
mov
jns
cld
cld
mov
dec
lods
xchg
sbb
push
xor
add
ds
inc
fwait
inc
inc
inc
gs
add
sub
fnsave
cmp
(bad)
fsub
push
push
sub
inc
mov
and
cs
ror
push
mov
xor
dec
fsubr
mov
sbb
sbb
mov
inc
mov
dec
inc
mov
pop
mov
push
push
pop
pop
mov
add
cmp
fsub
frstor
add
inc
es
adc
sahf
shr
inc
push
mov
xor
sbb
xchg
cmp
mov
sar
retf
fstp
aaa
loopne
sbb
xor
xchg
adc
outs
pop
hlt
je
inc
ds
fs
mov
mov
(bad)
sbb
cmp
sbb
mov
test
nop
retf
(bad)
pop
ret
mov
pusha
cmps
push
mov
pop
outs
jae
daa
xchg
xchg
push
enter
aad
js
xchg
loopne
jo
mov
and
jno
fwait
imul
add
xchg
jne
call
test
mov
jge
push
adc
mov
(bad)
retf
int
jne
inc
pop
sar
aas
sbb
fwait
xor
xchg
ss
xor
adc
arpl
xchg
scas
fadd
sub
jg
adc
test
jmp
jle
push
xchg
iret
mov
jp
in
lods
mov
aad
push
mov
lods
test
xchg
test
mov
adc
add
fwait
push
hlt
in
js
mov
pop
sub
out
fisub
imul
leave
mov
es
xchg
movs
push
pop
add
push
jae
push
fwait
repz
inc
push
xchg
xchg
mov
push
pop
adc
ja
or
pop
xchg
adc
popa
jg
mov
inc
xchg
stc
pusha
xchg
dec
pop
or
in
int3
xchg
adc
xor
add
fwait
add
jl
loope
add
inc
lahf
inc
fwait
cmc
and
addps
loop
push
xchg
ror
adc
mov
adc
sahf
xchg
add
dec
mov
je
mov
js
jecxz
add
setno
ds
pop
mov
or
je
test
test
adc
sar
popa
adc
sar
pop
xor
xchg
test
imul
in
sub
jae
xchg
pop
or
icebp
xchg
inc
or
mov
xor
scas
lock
xchg
dec
push
mov
in
jns
hlt
xchg
pop
test
ins
mov
jb
stos
nop
xchg
dec
dec
cmp
mov
xchg
test
jle
xchg
rcr
lea
mov
or
enter
inc
pop
add
in
and
xchg
ret
imul
pop
xchg
and
jg
fnstenv
mov
gs
xchg
shl
idiv
push
aas
fwait
mov
fs
test
xchg
sar
or
ja
adc
dec
adc
stos
xchg
call
push
push
dec
xchg
sbb
or
pop
jle
mov
mov
int
movd
leave
pop
mov
ds
fmul
imul
xchg
mov
mov
gs
stos
ror
cld
std
shl
cmp
ins
jge
jns
jno
cmps
xchg
push
stos
outs
and
push
stos
mov
inc
sbb
shr
push
add
(bad)
mov
xchg
xor
ins
dec
retf
jnp
push
or
(bad)
test
fiadd
stos
and
xchg
adc
jl
scas
or
mov
addr16
pusha
push
push
and
popa
vmread
mov
or
repnz
sbb
dec
mov
test
aam
jo
sbb
fwait
add
pop
dec
in
jne
iret
xchg
repnz
scas
or
sub
ja
loop
int3
imul
pusha
retf
pop
rcl
cmps
mov
adc
mov
int3
out
aas
or
push
or
xchg
and
add
jecxz
mov
lahf
inc
mov
xchg
dec
nop
mov
jb
cmp
retf
or
iret
sbb
imul
bound
div
xchg
les
adc
cli
dec
adc
into
arpl
adc
jle
cmp
mov
xchg
test
and
(bad)
xlat
xchg
xchg
icebp
arpl
push
out
or
lods
push
mov
fmul
xchg
jnp
fnsave
test
sahf
jg
cmc
leave
jae
mov
mov
(bad)
call
es
and
clc
xchg
mov
and
mov
adc
mov
push
dec
cdq
xor
adc
call
xchg
xchg
xor
push
adc
push
adc
inc
push
retf
sub
or
adc
dec
jo
(bad)
xchg
add
xchg
gs
ret
nop
cmps
pop
mov
xchg
or
out
ret
pop
or
scas
xchg
(bad)
outs
adc
sbb
mov
adc
mov
xchg
in
(bad)
shr
sbb
jne
arpl
movs
into
xchg
xchg
imul
ja
(bad)
out
fwait
je
mov
xchg
adc
xchg
pop
stos
sbb
dec
push
jp
push
jb
jl
dec
cmps
dec
mov
leave
test
in
sub
hlt
je
idiv
iret
sar
fisubr
adc
xchg
xchg
out
xchg
cmps
inc
or
pop
ret
push
mov
mov
call
sub
sub
cmp
sar
pushf
xchg
xchg
mov
ja
test
retf
pop
push
xchg
jae
push
mov
xchg
rcl
aaa
ins
ja
sub
adc
xchg
pop
iret
fdivr
inc
stos
mov
inc
xchg
stos
test
int3
mov
cmp
aam
fistp
push
xchg
pop
dec
xchg
adc
push
shl
ds
xor
int
dec
cli
xchg
sbb
pop
mov
rcl
adc
sbb
stos
in
ja
int3
jns
mov
lock
xor
loopne
sar
mov
bound
xchg
inc
xchg
xor
add
mov
and
test
xchg
mov
xchg
push
xchg
pop
pop
into
sbb
stos
push
jmp
popa
xchg
fwait
adc
retf
test
inc
pop
clc
mov
aad
ins
ins
dec
xchg
test
stos
xchg
xchg
mov
ja
xor
repz
jecxz
je
pop
jle
push
mov
stos
xor
and
ss
xor
icebp
arpl
fs
cmp
cmp
ss
adc
push
ficom
push
xchg
or
cmp
lods
and
fs
cmp
fsub
into
popa
out
xchg
jae
add
sbb
mov
xchg
dec
push
popf
mov
fisub
jo
adc
sbb
jecxz
adc
js
xchg
pop
jns
and
lea
cmps
call
stos
dec
mov
add
or
dec
ins
scas
xchg
inc
add
lea
add
xchg
or
(bad)
data16
shl
xchg
test
call
imul
xchg
xchg
xchg
or
sbb
pop
mov
nop
sub
jae
(bad)
shl
(bad)
test
mov
push
jo
pop
xchg
push
test
pushf
sar
pop
xchg
mov
adc
jno
stos
push
mov
add
jbe
mov
mov
inc
push
rcl
std
adc
sti
call
xchg
enter
test
xchg
pop
mov
outs
sbb
push
mov
nop
pushf
int
xchg
xor
sub
outs
in
dec
fbstp
imul
fwait
xor
jp
add
xchg
fidiv
sub
pop
sub
popf
dec
xchg
xor
sar
sub
add
stos
ins
push
mov
test
lea
push
mov
xchg
test
add
outs
or
xlat
jl
mov
sar
jbe
adc
pushf
xor
push
aam
push
xchg
dec
pusha
xchg
or
cmp
scas
cmp
push
into
xchg
in
(bad)
cmp
pusha
test
pop
xchg
cmp
pop
lods
or
nop
xchg
mov
or
xchg
fwait
out
pop
push
mov
push
mov
adc
jb
sub
xchg
dec
add
pop
adc
sbb
dec
psubusb
test
pop
stos
xchg
jb
mov
dec
xchg
mov
mov
fcomp
sbb
call
pop
adc
adc
out
popa
les
mov
hlt
push
pop
ins
retf
mov
mov
xchg
add
xchg
inc
test
fcmovnbe
or
fwait
xchg
test
jge
sub
int
push
push
mov
dec
add
mov
imul
xchg
push
xor
pop
popf
aam
pop
les
pop
jae
dec
mov
ret
xchg
(bad)
xchg
ds
stos
adc
pop
xchg
xchg
retf
or
push
ja
xchg
pop
shl
mov
icebp
jne
sub
xchg
(bad)
pop
lds
xchg
test
xor
jg
pop
pop
and
ja
jno
jge
cli
je
stos
sbb
sub
pop
imul
xchg
sub
inc
inc
outs
stos
in
add
cmp
inc
cmp
xchg
cmp
push
jl
fwait
mov
in
ins
inc
xor
mov
push
mov
addr16
pop
inc
ins
adc
jne
push
mov
dec
mov
fwait
and
mov
nop
data16
xchg
(bad)
push
jge
push
out
inc
jmp
ret
call
xchg
cmp
pop
xor
push
push
jp
xchg
in
push
rcr
cmp
jle
div
stc
arpl
dec
arpl
cmp
xchg
das
mov
aam
xchg
push
cmps
push
ins
and
retf
mov
dec
loope
xor
pop
pop
xor
ret
dec
test
inc
xchg
dec
hlt
mov
jb
or
jne
lea
retf
push
pop
pop
std
fimul
movs
xor
add
mov
test
cmp
pushw
xor
or
push
xchg
addr16
mov
in
and
fincstp
cld
fs
sbb
push
sbb
iret
inc
daa
test
sub
xchg
xchg
or
xchg
fstp
lea
outs
nop
mov
inc
sbb
adc
sbb
inc
stos
add
cmps
push
arpl
mov
fsub
jg
into
push
jns
dec
xchg
adc
icebp
add
xchg
popf
dec
mov
outs
add
lods
shl
imul
test
push
xchg
aas
outs
xor
push
xchg
enter
shr
popf
or
repnz
push
adc
inc
add
mov
mov
mov
or
int3
int
in
adc
push
jp
pop
dec
xchg
je
shr
ss
xchg
xor
retf
dec
cmp
aaa
push
sub
dec
not
jmp
fstp
arpl
or
ja
inc
xchg
xchg
cmp
push
test
pop
xchg
lahf
shl
xchg
inc
xor
jno
ja
dec
ficom
push
push
xchg
dec
jg
pop
xchg
xchg
jnp
push
int3
ins
mov
shl
stos
push
mov
das
push
ins
sbb
xchg
adc
gs
or
addr16
cmp
jbe
lods
jne
in
lock
or
sub
mov
xchg
pusha
in
cdq
in
push
shr
adc
daa
xchg
loope
fist
lock
sbb
in
lahf
cwde
leave
pop
movs
and
push
inc
cmp
es
and
push
mov
daa
lahf
sub
xor
and
jae
xchg
and
fcomp
sbb
js
push
je
xchg
sar
sub
mov
hlt
das
cwde
aam
outs
and
xchg
pop
pop
daa
mov
xchg
xor
mov
fcom
and
mov
hlt
push
xor
jae
mov
pusha
lods
imul
mov
cmc
xor
xchg
push
and
push
adc
pop
sub
ja
mov
jecxz
push
inc
add
inc
adc
dec
cmp
mov
aam
xor
dec
call
pop
ja
pop
test
je
pop
mov
xor
ins
push
pop
fiadd
xchg
lods
mov
mov
ds
lahf
cmp
pop
rcl
outs
enter
sub
out
jp
adc
push
inc
xchg
xor
sub
ja
pop
imul
out
loopne
stos
fisub
daa
rcr
popf
ja
shr
cmp
jecxz
daa
mov
rcl
test
xchg
mov
enter
mov
imul
xchg
cs
ja
mov
jae
rcl
pop
adc
lea
fwait
retf
adc
and
xchg
cmp
mov
add
or
fild
push
stos
movs
retf
sub
out
or
xchg
xor
mov
mov
dec
pop
into
xlat
(bad)
mov
(bad)
xchg
inc
cmp
nop
sbb
dec
(bad)
aam
xchg
xchg
xchg
stos
adc
mov
or
xchg
rcl
sub
adc
(bad)
xchg
ds
inc
cmp
inc
push
sti
jg
sti
or
jo
rcr
adc
jnp
aaa
nop
leave
aas
xchg
adc
inc
arpl
pusha
std
push
sbb
rol
or
xchg
mov
mov
push
mov
sub
pop
lea
inc
lock
mov
jge
in
mov
and
mov
cmp
retf
cmp
lods
bound
or
int
xor
push
mov
xor
out
fwait
xchg
call
mov
mov
xchg
dec
add
inc
cmp
add
idiv
(bad)
addr16
test
add
mov
inc
sahf
xchg
aas
sub
and
and
sub
xor
into
xor
and
xor
adc
push
nop
sub
dec
inc
inc
test
and
mov
gs
mov
hlt
pusha
mov
add
rol
jbe
cmp
mov
test
movs
pop
sahf
sbb
mov
xor
inc
sub
sub
int3
leave
cmp
adc
int
or
cmp
jb
xchg
xchg
mov
xor
cwde
jmp
mov
sbb
clc
xor
shl
int3
fcomp
or
mov
repnz
dec
daa
push
or
pop
mov
mov
test
fs
xor
and
int
pop
aam
jmp
nop
aad
mov
pop
dec
cs
into
or
in
xor
and
xor
repz
ins
sbb
and
push
inc
mov
push
cwde
mov
xchg
or
aam
enter
push
mov
push
jns
inc
xchg
int
adc
xchg
int3
cmp
(bad)
cmp
sbb
jae
push
lock
mov
lahf
fcomp
rcr
jae
aas
dec
int
das
lahf
loop
cmps
inc
mov
mov
lock
pop
inc
(bad)
fwait
inc
sbb
sti
inc
int3
push
fsubp
je
or
adc
push
cmp
or
or
arpl
lds
xor
xchg
scas
fwait
xchg
inc
dec
inc
cmp
enter
sti
dec
add
addr16
and
mov
mov
inc
jbe
or
xchg
or
adc
fs
and
pop
xchg
cmp
jo
mov
sbb
jae
scas
mov
sub
dec
mov
xchg
sbb
aas
mov
sbb
inc
pop
std
jg
loope
sub
cld
dec
cli
popf
ja
xchg
mov
jmp
mov
cmp
mov
popa
nop
pop
(bad)
dec
ja
retf
adc
push
jne
jecxz
cmp
or
call
sti
rcl
lds
fnstcw
ret
mov
data16
test
mov
div
xor
dec
sar
mov
loop
cwde
aas
lods
mov
in
mov
aaa
movs
push
mov
jne
mov
jae
mov
xchg
or
shr
mov
aam
stc
push
mov
in
add
inc
cdq
cmc
and
sbb
jb
inc
mov
cs
shl
push
seto
int
movs
and
pop
std
ror
popf
mov
loopne
mov
cmp
jae
adc
adc
sbb
es
and
inc
xor
rcl
cmps
inc
push
daa
and
and
jmp
adc
pop
dec
gs
inc
aam
es
bound
mov
dec
push
scas
aam
sbb
mov
cmp
(bad)
mov
fisub
das
les
jmp
leave
cli
mov
xor
and
xchg
(bad)
mov
dec
sub
sub
mov
mov
into
mov
ret
dec
push
shl
and
repnz
(bad)
lods
or
push
and
dec
dec
int
inc
inc
inc
jnp
xor
xchg
adc
mov
xchg
aaa
mov
lods
pop
mov
push
rcl
je
xchg
clc
ins
icebp
mov
test
jecxz
or
repz
mov
out
rol
jae
ret
outs
call
rep
jmp
movs
mov
jge
mov
rol
push
sbb
xchg
inc
push
sub
das
xor
mov
fdivrp
cmovno
loope
scas
sub
ja
lea
cmp
adc
mov
and
mov
sub
arpl
arpl
arpl
push
mov
xlat
out
aaa
pop
inc
pop
push
push
addr16
ja
xchg
xchg
xchg
js
jl
bnd
outs
adc
jns
xchg
je
add
pushf
fwait
and
xchg
rcl
aad
and
(bad)
sti
pushf
or
lds
mov
inc
aad
and
aam
sbb
hlt
cmc
jo
test
inc
movs
cmc
pop
lods
lods
add
pushf
cmp
mov
int
dec
fld
mov
lods
lds
test
int3
rcr
jno
pop
lds
cli
inc
std
cwde
int
sub
sub
cmps
inc
movs
inc
adc
cld
std
ins
retf
inc
fsub
lds
push
xor
lock
(bad)
cli
dec
pushf
cmp
mov
adc
pop
test
sub
das
gs
cmp
(bad)
add
cmp
and
sub
fs
(bad)
mov
sub
or
lods
cld
sbb
or
sbb
add
in
and
in
sub
jo
(bad)
nop
int
mov
mov
pusha
cmp
sbb
sub
push
sub
pushf
and
mov
adc
cli
in
popf
fsub
je
jo
popf
mov
sub
jbe
push
call
nop
rcr
adc
lea
je
add
mov
adc
(bad)
dec
inc
mov
cmp
call
dec
fcmovbe
lods
cli
test
nop
vmovss
add
stc
pop
movs
ins
fadd
push
popf
cwde
daa
in
(bad)
aad
jge
cmp
cli
je
lock
sbb
add
fld
popf
push
pop
stos
mov
test
mov
cmp
sub
sub
sub
fstp
sub
fisttp
ins
and
sbb
pop
es
fisub
push
mov
movs
cmp
stc
jl
aam
dec
dec
or
mov
std
push
or
sub
mov
sbb
js
and
sbb
in
clc
std
les
enter
loope
pop
add
or
gs
sub
sbb
jg
sbb
(bad)
mov
mov
pusha
movs
loopne
mov
lock
int
sub
sub
sub
or
adc
adc
gs
sub
out
call
pop
int3
dec
pop
mov
cmc
mov
adc
pop
and
in
pop
loopne
div
loopne
mov
nop
pusha
adc
in
rol
pusha
mov
fmul
sub
mov
cmps
adc
sbb
mov
adc
lods
mov
lods
cmp
aad
in
in
sbb
sbb
(bad)
(bad)
push
mov
retf
cmp
fdiv
mov
push
adc
in
add
sbb
cli
lods
js
in
add
cmc
and
(bad)
call
pop
lods
enter
mov
mov
int3
in
call
mov
fs
mov
pop
lods
fcom
inc
pop
fcomp
dec
pusha
mov
add
in
aam
je
and
mov
in
add
xor
inc
movs
xor
sbb
add
and
inc
push
pop
pusha
lods
dec
popf
mov
and
popf
mov
or
fmul
lods
push
stc
mov
mov
push
int3
and
(bad)
loopne
in
sub
mov
mov
test
cmp
mov
and
lods
sbb
imul
dec
(bad)
jae
popa
mov
es
add
sar
iret
adc
cmp
pop
out
or
repnz
xchg
adc
cmp
jl
inc
adc
sub
mov
xor
jmp
pop
mov
xchg
mov
(bad)
leave
xor
mov
in
jp
sub
mov
pop
mov
(bad)
nop
stc
push
out
inc
call
imul
dec
jne
fdiv
aam
fistp
cld
(bad)
out
pop
iret
fmul
inc
mov
lds
call
outs
scas
push
pop
push
jns
dec
xor
jmp
sub
lahf
xor
pop
scas
or
push
sbb
fadd
clc
push
outs
adc
push
cmp
aas
xor
shl
add
mov
cld
sub
cwde
ins
shl
(bad)
sti
inc
push
mov
push
mov
scas
das
gs
push
jmp
inc
test
test
into
push
mov
push
inc
ret
enter
aam
js
cmp
adc
jle
ss
call
test
aaa
cmps
aad
retf
jp
jecxz
in
sbb
mov
cmps
pop
pusha
mov
(bad)
push
ins
aaa
movs
leave
and
xor
mov
cmc
lods
adc
sbb
shr
jp
adc
xor
ret
test
pop
and
jg
(bad)
push
inc
mov
mov
int3
jbe
in
test
mov
push
hlt
lahf
or
ins
cmp
(bad)
mov
int3
jecxz
jnp
mov
loope
push
push
retf
ss
les
xor
pushf
xchg
clc
inc
adc
add
or
jno
mov
mov
cmp
or
dec
cmp
mov
or
daa
addr16
pop
jecxz
push
ror
pop
push
out
ret
aaa
sbb
xor
pop
sar
add
cdq
xchg
les
dec
jo
mov
sub
sar
push
dec
xor
push
mov
pop
inc
stc
pop
and
repz
sbb
scas
sub
scas
xor
popf
push
sbb
mov
and
mov
pop
xchg
push
ret
jp
mov
jle
out
scas
ficom
cs
xchg
ins
cdq
sbb
push
xchg
push
shl
imul
int
xchg
into
mov
mov
mov
push
sub
jmp
and
xchg
ins
fbld
int3
int3
push
jmp
sbb
bound
mov
pop
test
mov
pop
add
cmp
pop
and
sbb
pop
inc
(bad)
jp
sbb
(bad)
cmp
retf
jmp
add
fdiv
push
cmc
sub
jmp
stc
clc
cmp
pusha
jmp
test
cmp
add
stc
cmc
movzx
adc
mov
stc
cmp
pusha
pushf
add
mov
jmp
push
jmp
lea
jne
shr
mov
stc
mov
clc
movzx
sub
rcl
cmc
call
sbb
sub
mov
inc
test
jl
ffree
jge
icebp
out
pop
ror
or
and
and
es
arpl
(bad)
cmp
ret
addr16
sbb
push
sub
xor
fs
push
lods
call
inc
aad
xor
jns
outs
and
xchg
fcmovnb
cmp
and
jmp
aad
outs
clc
ss
rcr
lods
mov
push
pop
mov
jo
loop
dec
add
mov
lea
dec
or
mov
data16
adc
scas
adc
fld
(bad)
jns
sub
aaa
in
or
fidivr
push
xor
jbe
jo
xor
cs
ins
add
scas
pop
out
sub
cmp
sub
xchg
out
shl
(bad)
out
pop
sar
pop
pop
sbb
xchg
aas
and
dec
movs
or
popf
cmc
mov
aad
xor
test
out
sub
dec
dec
mov
int3
icebp
push
mov
mov
imul
pop
ror
ss
rcr
mov
rcl
out
in
xor
not
ror
shl
(bad)
fisttp
scas
popa
lods
push
fisttp
cmp
add
add
seto
mov
push
test
lea
jle
pushf
mov
lea
je
btr
bts
add
add
rol
mov
cmp
cmc
push
add
pushf
push
mov
stc
ror
mov
call
pop
data16
inc
out
sub
cmp
jns
icebp
pop
mov
jmp
mov
jae
(bad)
add
push
cmp
jecxz
sub
out
les
or
xchg
mov
fdivr
pusha
addr16
xor
and
adc
in
call
fwait
movs
push
test
test
mov
push
jns
jno
ds
addr16
lahf
std
xchg
push
neg
jbe
adc
xor
or
mov
inc
dec
lahf
and
les
push
jno
pop
jecxz
dec
movs
jno
xlat
mov
jle
popf
xchg
adc
push
push
ja
aad
ins
jmp
loope
sub
mov
dec
sub
das
mov
lahf
sub
(bad)
stos
(bad)
fcomi
idiv
xchg
outs
mov
cs
dec
ror
ins
das
sahf
inc
sbb
aam
inc
push
adc
xor
xor
xor
mov
in
cmp
jne
daa
adc
imul
mov
lods
pop
jno
mov
std
sbb
sets
mov
lds
dec
add
outs
hlt
xchg
repz
test
push
clc
ins
ret
daa
or
pushw
cmp
lods
hlt
pop
fadd
mov
fwait
pop
or
stos
xor
imul
out
dec
push
push
test
shl
mov
jmp
inc
mov
sub
dec
cmc
push
ins
xor
ins
push
add
or
xor
lock
push
xchg
lahf
arpl
mov
and
sbb
test
or
push
int
call
cmp
jl
sub
fistp
cmps
push
and
jno
into
fcomp
xchg
out
push
sbb
popf
push
not
test
dec
out
jo
pop
jbe
adc
dec
cmps
in
test
jle
aam
lock
sbb
push
loop
(bad)
loope
dec
rol
mov
lods
and
or
sbb
loope
push
div
imul
xchg
mov
xchg
lods
loopne
sub
call
push
imul
adc
fsub
out
inc
mov
repz
mov
faddp
test
loop
dec
in
rol
mov
add
mov
jbe
fldenv
or
or
movs
pop
retf
(bad)
adc
ucomiss
clc
cmps
xchg
adc
xor
daa
mov
xor
xchg
push
cmp
add
ds
sbb
test
mov
dec
inc
jg
mov
xor
push
mov
sub
fs
call
push
push
lea
jne
sbb
dec
not
clc
mov
pusha
add
clc
cmc
call
jne
gs
xor
fs
ins
add
mov
daa
imul
mov
push
retf
iret
loop
adc
cmps
scas
inc
cmp
cmp
pusha
dec
je
nop
jb
iret
mov
push
inc
pop
ror
jb
pop
xor
xchg
sub
xor
or
lea
sbb
ss
add
dec
jno
dec
lods
hlt
popf
inc
or
or
bnd
dec
mov
in
ins
int3
(bad)
js
add
mov
lahf
mov
ret
pop
sbb
pop
call
sub
mov
cmp
test
add
icebp
shr
fs
ja
stc
jmp
aad
stos
adc
mov
lahf
ja
les
call
jb
sti
fild
pop
stos
aas
push
pop
jmp
gs
out
or
pop
mov
cmp
pop
push
pushf
xchg
jo
sbb
std
outs
das
dec
sub
mov
ret
inc
and
cmps
pusha
lods
add
sub
dec
lea
cwde
sub
inc
mov
xor
push
xor
add
dec
push
push
je
push
shl
sub
push
and
mov
test
push
ret
pusha
push
pop
ror
fdiv
pop
jecxz
xlat
mov
mov
call
cmc
cmp
call
xchg
xor
popf
mov
inc
push
(bad)
mov
cmps
cmp
fcomp
nop
mov
or
outs
retf
and
fnstsw
das
xchg
in
in
or
fcmovbe
xchg
sub
jae
cmc
mov
pushf
sub
jo
retf
lock
int3
aam
push
inc
xchg
jge
shl
fimul
mov
lods
mov
jmp
or
shl
call
cs
mov
test
push
hlt
mov
cmc
and
cmp
mov
adc
pop
fisub
push
cmp
fs
movs
mov
dec
mov
sbb
nop
(bad)
adc
das
int3
call
std
movs
sbb
frstor
addr16
mov
loop
out
xchg
ins
xor
inc
and
mov
in
shr
jg
inc
test
or
push
push
int3
jp
rcr
(bad)
xchg
cmps
cmp
push
test
push
dec
sbb
xchg
mov
cmp
popf
nop
ins
dec
pop
cmp
ds
inc
add
cmp
fsubr
leave
sub
sub
(bad)
lods
jo
in
mov
mov
pop
push
mov
push
sti
push
pop
jb
pop
pushw
xchg
rol
fcomp
mov
jle
in
mov
mov
mov
xor
es
scas
pop
push
daa
sbb
push
inc
scas
sahf
and
add
call
dec
setl
add
push
xadd
mov
neg
ror
sub
sar
push
shl
not
pushf
xchg
inc
neg
inc
push
bswap
setae
xor
and
push
sar
push
xchg
bt
cmp
or
shrd
mov
pushf
mov
movsx
bts
pushf
not
mov
push
test
or
pusha
lea
je
cmp
or
call
pushf
pusha
lea
jne
stc
dec
bsr
rol
mov
test
pusha
test
cmc
add
cmc
stc
push
stc
movzx
lea
movsx
jne
mov
test
bt
add
cmp
jmp
xchg
lea
mov
xchg
mov
jbe
iret
add
sbb
pushf
(bad)
fdivr
es
mov
aaa
fwait
xchg
pop
out
sub
add
cmp
sbb
mov
mov
clc
ret
push
cld
xor
into
push
xchg
pop
sti
mov
icebp
pop
sub
hlt
fisttp
sub
pop
mov
pop
aam
mov
jle
dec
call
cmp
adc
lods
neg
arpl
cmp
sub
fdivr
cmp
jecxz
dec
dec
jge
sub
int
mov
inc
pop
mov
es
and
mov
lds
dec
push
fs
push
inc
dec
iret
loopne
lahf
lods
in
test
xor
dec
add
bt
mov
sar
jmp
outs
cmp
sahf
mov
and
test
shl
sub
push
adc
inc
pop
ins
loop
cs
and
jle
scas
(bad)
fsub
jecxz
mov
pushf
imul
es
xchg
test
ret
jge
pop
adc
in
test
cmps
out
sbb
(bad)
mov
daa
dec
adc
push
and
out
pop
add
lahf
lock
xchg
cwde
aas
add
ror
push
outs
aad
dec
push
fdiv
stos
fdiv
enter
mov
sub
fild
push
int3
push
xchg
push
hlt
xor
jo
push
jmp
out
jecxz
sbb
cs
jl
sbb
cmc
xchg
pop
jmp
xor
add
inc
jmp
cmp
mov
movs
test
cmp
sbb
add
das
(bad)
(bad)
sub
fcmovne
ja
lahf
pop
pop
jecxz
pop
repz
cmps
dec
push
repnz
jae
jnp
dec
(bad)
mov
ret
arpl
pop
pop
jp
dec
jl
push
loopne
jmp
pop
in
or
jne
inc
into
sbb
ror
xchg
shl
fisttp
data16
lods
int
push
call
mov
fwait
gs
mov
cmp
movzx
cwde
mov
bswap
jmp
sub
add
dec
add
adc
leave
add
inc
lods
in
cli
jo
or
mov
add
popa
sbb
or
cmp
fcmovb
push
inc
cmp
pop
xchg
popf
push
mov
aad
and
std
xor
out
loop
mov
jp
push
xor
pop
xor
movs
ds
push
(bad)
mov
ret
je
pop
mov
xchg
sbb
mov
jmp
cld
cmps
in
test
int
not
sti
and
ret
out
pop
xchg
cmp
xlat
in
and
icebp
jo
cli
xor
stos
test
push
xor
add
xor
jp
dec
xchg
jmp
cmc
retf
add
add
sub
add
pop
cld
jno
xor
ret
sti
mov
pusha
sub
or
jne
dec
push
mov
dec
loop
int
stc
mov
popf
shl
(bad)
aam
push
or
xchg
xchg
xchg
xchg
aad
mov
and
movs
xor
adc
mov
cmp
inc
daa
jb
xchg
ins
aad
hlt
mov
in
popa
inc
(bad)
cmps
pop
shl
(bad)
shl
inc
repz
push
cmp
cmp
inc
popa
jge
cmps
jmp
leave
(bad)
(bad)
mov
in
mov
jge
cmp
cld
in
sar
sub
pop
movs
inc
pop
jb
call
pop
sub
dec
mov
shr
cmp
add
cld
cmp
cli
in
andps
inc
cmp
adc
mov
bound
sub
pop
and
(bad)
mov
mov
pushf
pushfw
(bad)
jo
cmp
cmps
(bad)
retf
mov
cmps
sbb
imul
out
xor
dec
adc
out
in
ret
push
(bad)
aaa
pop
and
cmp
and
cld
cmp
dec
push
aas
pop
adc
dec
sbb
pop
retf
add
sbb
adc
inc
ss
les
ja
cmp
ins
jne
jns
mov
pop
int3
jp
call
fcom
add
in
xor
xchg
push
xor
call
mov
and
outs
jnp
stc
push
cs
push
pushf
or
fidivr
jl
fnstcw
cmps
ss
retf
cli
xchg
ja
jnp
xor
push
push
and
dec
mov
jge
cmps
out
and
and
cdq
cmp
inc
fldcw
jmp
xor
add
add
imul
fisub
pop
loop
rcl
shl
sbb
stc
xor
lea
call
mov
inc
clc
xchg
mov
(bad)
and
adc
inc
lahf
movd
ret
xchg
test
xor
ret
imul
xchg
out
pop
mov
xchg
or
test
out
add
loop
ror
scas
inc
push
mov
cmc
stc
mov
ja
adc
and
dec
jae
into
test
cmp
pop
pop
and
or
push
sti
jno
iret
cmps
nop
movs
or
pop
sbb
pushf
call
imul
clc
mov
lea
jmp
add
xor
add
dec
stc
sar
xor
movs
jle
(bad)
jl
pop
repnz
cmp
cmp
mov
mov
(bad)
pop
(bad)
mov
cmp
sahf
mov
cwde
ret
xor
jns
jnp
cwde
pop
xor
pop
imul
cmps
fisub
in
push
xor
push
jmp
je
jnp
shr
int3
pop
mov
hlt
cmp
les
fxch
mov
ror
or
fisub
xchg
je
jo
adc
pop
or
arpl
movs
gs
inc
ffree
pop
mov
push
pop
lahf
xor
js
or
mov
xchg
shr
inc
add
imul
jae
xor
push
in
cli
(bad)
outs
repz
ficom
mov
les
add
outs
rcl
cmps
mov
out
and
jnp
mov
clc
mov
or
push
or
mov
mov
adc
or
aad
call
fisubr
fmul
or
cmp
iret
hlt
ins
(bad)
fsub
jne
lea
push
sub
stos
ss
dec
mov
jb
fdivr
test
inc
pop
icebp
xor
xor
out
shl
inc
fadd
add
jnp
xchg
dec
and
inc
mov
and
xor
in
xor
lock
stc
adc
sbb
and
mov
lea
jb
cmp
push
stc
pusha
cmp
pushf
call
sub
mov
jp
iret
push
retf
fiadd
pop
out
push
loopne
jb
add
sbb
add
movs
pop
pop
in
shr
ja
sbb
dec
hlt
jns
lods
sbb
mov
movs
sub
cli
js
ds
lahf
xor
cmp
sub
sar
dec
and
push
xabort
aad
add
pushf
test
push
pusha
jmp
pop
add
sub
xchg
out
and
pop
arpl
sbb
xlat
fimul
mov
test
loop
xchg
jmp
int
fwait
xor
sbb
int3
or
lea
xchg
pop
cmovle
fsubr
idiv
add
pop
and
cmp
push
inc
jbe
idiv
retf
(bad)
and
push
xchg
retf
(bad)
add
std
xor
shl
sbb
ret
mov
mov
test
xor
sbb
add
je
xchg
mov
dec
sahf
arpl
push
jp
pop
inc
sahf
and
lds
dec
push
or
push
cld
xor
sub
cld
test
jg
mov
lea
mov
movsx
lea
lea
jmp
add
inc
gs
gs
imul
xlat
xchg
mov
cmp
pop
in
sub
xchg
xchg
std
leave
movs
clc
in
int
sbb
rcr
adc
fcmovnu
xchg
push
das
inc
sub
cmp
xor
and
repnz
outs
sar
std
jmp
pop
test
xor
cli
adc
sti
push
iret
adc
pop
popf
movs
sti
icebp
pop
push
cmp
inc
clc
lods
xchg
jmp
ror
adc
into
bound
test
dec
jae
or
mov
pusha
out
adc
adc
movs
mov
mov
test
je
add
pop
pop
ss
sbb
in
mov
iret
xchg
les
ds
or
daa
repz
xchg
clc
fistp
mov
out
aam
into
xor
scas
xchg
adc
stc
sub
pushf
xchg
adc
sub
dec
dec
cwde
or
js
or
out
enter
mov
int
movs
imul
cmp
mov
add
pop
test
xchg
or
xchg
sbb
xchg
lahf
mov
rol
aam
pop
xchg
pop
adc
or
cs
fwait
xchg
dec
pop
(bad)
push
mov
(bad)
stc
xchg
test
ins
jle
xchg
(bad)
pop
(bad)
nop
xchg
imul
pop
jg
push
cmp
test
jl
std
xchg
(bad)
xchg
xor
xchg
(bad)
mov
sbb
sbb
fsub
dec
ror
lahf
sbb
xchg
repnz
inc
push
push
xor
(bad)
mov
and
mov
xchg
leave
(bad)
and
pop
add
mov
out
mov
inc
scas
xor
dec
not
popa
jbe
mov
xchg
xchg
inc
sbb
ss
mov
je
test
pop
xchg
or
fs
and
in
sbb
int
cdq
adc
dec
jbe
cwde
jle
clc
in
add
cmp
repnz
jp
push
adc
xlat
jne
fwait
xor
jle
repz
mov
xchg
inc
mov
call
inc
pop
pop
gs
dec
xchg
inc
hlt
dec
xchg
xor
das
sar
lock
ins
push
nop
mov
or
outs
stos
fwait
cs
adc
in
std
xchg
gs
add
bound
xchg
es
popa
pop
fstp
mov
push
test
push
cmps
clc
adc
add
fnsave
fwait
mov
(bad)
jb
fstp
pushf
adc
in
mov
xchg
push
jp
enterw
shr
lods
cwde
lahf
add
dec
fstp
cmc
cs
ficom
popa
mov
xchg
cmp
rol
xchg
mov
ja
shl
(bad)
imul
add
jb
rol
mov
aam
mov
daa
pop
xchg
(bad)
jnp
cmp
mov
loope
fidiv
pop
movs
xchg
push
mov
(bad)
mov
cld
xchg
xchg
xchg
inc
xor
das
aam
fst
sbb
and
das
pop
jle
push
mov
push
daa
arpl
mov
imul
out
inc
mov
xchg
inc
xchg
push
daa
xchg
mov
dec
adc
mov
fbstp
adc
mov
xchg
mov
les
ret
mov
bound
mov
and
sub
aam
pushf
xchg
xchg
and
dec
and
xchg
aam
(bad)
out
in
fwait
xchg
mov
sub
push
dec
add
stos
movs
sbb
(bad)
popf
imul
adc
jno
pop
mov
daa
sbb
mul
adc
iret
sub
bound
stos
add
mov
or
mov
inc
imul
xor
test
mov
das
and
cmp
mul
cmp
lds
inc
cld
pop
lahf
add
cmps
das
add
sti
retf
je
arpl
push
fwait
cmp
mov
inc
cmc
xchg
xor
aam
xchg
out
xchg
stos
mov
or
mov
aaa
das
xchg
cmp
cmp
or
xchg
jge
adc
and
hlt
xchg
lock
dec
aad
enter
inc
rcl
repz
cmovne
dec
xor
jp
push
mov
test
cli
push
mov
ins
repz
jmp
fist
xchg
add
scas
fwait
pop
shl
leave
adc
lea
xchg
les
pop
lods
aam
loop
in
sbb
dec
outs
mov
das
mov
fisub
sub
xchg
addr16
jg
cmp
and
xchg
dec
es
je
push
sub
fnstcw
adc
fneni(8087
xchg
(bad)
scas
inc
jns
and
xchg
fwait
inc
bnd
les
movs
dec
xchg
call
mov
jmp
xchg
int3
fbstp
add
jl
xchg
cmc
cmp
fs
popf
or
mov
mov
and
adc
cdq
sar
loopne
sub
adc
fdiv
mov
loop
(bad)
loopne
mov
rol
push
or
in
loop
ss
push
dec
xor
sti
data16
lods
movs
cmp
popf
arpl
adc
pop
cld
push
xchg
mov
xor
call
push
js
ins
adc
jecxz
scas
xchg
xor
add
fs
movs
pop
retf
push
push
scas
mov
mov
aad
aam
mov
out
mov
test
push
or
xor
xlat
(bad)
pop
repnz
push
rcl
ficom
push
xor
jl
nop
xchg
imul
xor
dec
fdiv
loopne
mov
seto
xchg
in
adc
sbb
daa
leave
pop
addr16
sti
lea
sbb
mov
pop
dec
xchg
inc
jl
adc
mov
xchg
and
and
pop
sar
mov
fsubr
xchg
rol
or
xchg
pop
sbb
or
mov
mov
dec
mov
sti
out
xchg
inc
aad
inc
lahf
int3
pop
sub
and
cmps
pop
xchg
xor
retf
(bad)
sar
xchg
xchg
xor
adc
jecxz
xchg
cmp
fidiv
dec
loopne
retf
and
xchg
lods
mov
fs
scas
out
js
call
mov
jge
jo
test
xchg
xchg
icebp
(bad)
invd
mov
pop
xchg
ret
adc
and
mov
xchg
dec
mov
mov
aam
lds
xchg
or
imul
mov
je
popf
add
icebp
mov
adc
and
std
sar
int3
int3
mov
and
lods
add
push
xor
pop
xchg
jecxz
int3
sub
xchg
cwde
add
ret
or
outs
lahf
mov
outs
hlt
jnp
or
daa
cmp
xchg
push
(bad)
mov
sbb
pop
sbb
retf
add
xchg
gs
out
jle
push
retf
es
cli
or
out
cmps
scas
jne
pop
ret
pop
add
xchg
inc
mov
fnstcw
fcom
mov
sbb
add
(bad)
int
jmp
jp
test
push
xchg
loop
mov
jecxz
imul
sbb
xchg
inc
cmp
fild
pushf
ret
(bad)
fwait
mov
es
xchg
push
fcmovnbe
mov
cdq
add
adc
mul
xor
xchg
inc
into
sub
fwait
adc
test
pop
xchg
push
sbb
xchg
test
fwait
adc
dec
pop
xor
mov
pop
dec
(bad)
pop
imul
test
les
inc
fsub
int3
ins
pop
pop
out
push
outs
lods
xchg
mov
mov
aaa
dec
sahf
adc
nop
xchg
movs
das
bnd
ins
dec
js
cmps
xor
cdq
and
push
sahf
shl
sub
mov
adc
push
pop
sub
psraw
in
jb
stc
xchg
pop
xchg
adc
cmp
ret
pusha
mov
xchg
dec
outs
or
lahf
xchg
icebp
lea
pop
int3
stos
and
and
(bad)
(bad)
dec
mov
mov
sub
in
mov
gs
xlat
jmp
jno
adc
mov
fwait
mov
je
xchg
mov
cwde
jae
xchg
loop
fs
pop
jmp
xchg
xchg
cmp
leave
lea
ret
xchg
jl
mov
adc
daa
mov
add
push
enter
jno
jl
mov
cmp
mov
js
and
cwde
cmps
fld
lods
or
jp
(bad)
cs
add
xchg
fbstp
push
push
sub
out
xchg
(bad)
push
inc
xchg
sbb
adc
pop
stc
jl
xchg
repnz
and
test
je
xchg
in
into
mov
xor
pop
or
mov
pushf
sbb
push
loop
dec
or
inc
adc
pop
xchg
dec
mov
xchg
or
or
shl
loope
ins
jbe
sub
test
or
or
repnz
loope
iret
jmp
adc
mov
mov
push
xchg
ja
pop
dec
mov
loope
adc
dec
retf
fist
sahf
repz
pop
adc
ficomp
sbb
or
mov
loope
xchg
dec
adc
or
dec
repnz
bswap
push
ins
xchg
ret
test
fwait
mov
enter
sub
stos
aam
sbb
push
xchg
push
movs
add
push
mov
adc
xchg
dec
cmps
push
push
test
daa
repz
aam
mov
push
cmc
pop
cli
cmp
mov
or
mov
leave
lods
push
cmp
xor
xchg
sub
mov
fisttp
xchg
cmp
push
movs
mov
test
xchg
adc
adc
stos
sub
jmp
clc
mov
retf
push
pop
cmps
dec
jmp
sub
scas
xchg
in
ins
mov
add
xor
mov
loopne
inc
xchg
mov
xchg
or
ins
xchg
pop
push
loope
(bad)
lods
repz
(bad)
pushf
imul
xor
(bad)
xchg
jmp
div
xchg
(bad)
sub
cmp
add
ret
xchg
lds
stc
imul
arpl
shl
in
ret
addr16
(bad)
movs
adc
fstp
mov
fcmovne
add
scas
xchg
sbb
xchg
xchg
fwait
add
sub
xchg
es
(bad)
adc
push
and
jno
push
adc
xchg
pop
jmp
int3
xor
cdq
xchg
mov
out
mov
push
hlt
or
popa
inc
inc
data16
in
adc
xchg
sar
mov
xchg
or
mov
in
xchg
ins
add
cli
ja
push
dec
jbe
xchg
dec
pop
xor
or
ins
daa
mov
xchg
pusha
in
ret
adc
int3
mov
xchg
and
inc
mov
pusha
pop
les
out
xor
movs
into
mov
adc
ss
xchg
out
rcl
inc
icebp
mov
push
pop
mov
int3
mov
xchg
push
sbb
sub
add
pop
int
xor
test
add
adc
push
fdiv
fnstsw
cmp
mov
mov
outs
leave
movs
mov
ds
jecxz
xor
adc
jae
mov
cwde
out
jp
cmp
imul
push
int3
ror
adc
std
add
pusha
addr16
or
fxam
mov
loope
cmps
sub
cwde
dec
call
sbb
xchg
loop
or
mov
mov
lods
or
aas
xchg
(bad)
xor
loope
and
stc
aam
xchg
mov
pushf
(bad)
sub
iret
xchg
nop
or
les
in
ret
(bad)
and
xchg
adc
repz
push
inc
outs
pop
sub
(bad)
cdq
and
add
xor
or
jge
out
data16
std
ss
mov
xchg
inc
rcl
lock
icebp
daa
pop
xchg
mov
push
and
(bad)
shl
xchg
xchg
push
int3
sbb
xchg
aas
add
sbb
adc
push
inc
cmp
scas
pop
hlt
mov
bound
xchg
in
cmp
inc
push
push
adc
js
xchg
stos
cmp
sub
std
int3
sti
xchg
cwde
repz
rcl
mov
fiadd
push
aaa
mov
fadd
sub
cld
xchg
jne
(bad)
ins
lods
fs
push
aaa
loope
cmp
not
aad
push
xchg
inc
leave
mov
dec
clc
xchg
not
hlt
push
icebp
jae
rcl
mov
loop
in
and
jecxz
loopne
test
pusha
lahf
dec
and
or
in
stos
mov
rcl
xchg
xchg
(bad)
shr
fdivr
int3
sti
sub
je
xchg
push
fisttp
ret
mov
sub
es
add
push
pushf
jb
ja
mov
addr16
xchg
mov
pop
fwait
std
ins
inc
dec
popf
outs
xchg
push
pop
adc
out
cdq
in
int3
fistp
addr16
cs
mov
gs
add
jl
sub
inc
xchg
adc
addr16
mov
push
inc
push
ins
fsub
push
add
xchg
(bad)
out
xchg
sbb
mov
inc
clc
xchg
ins
icebp
jmp
in
adc
jl
pop
push
sub
(bad)
fwait
aam
inc
popf
cld
pop
jle
ficom
and
mov
xor
aad
pop
mov
xchg
mov
jp
cmps
xchg
jl
test
mov
fwait
xchg
int3
dec
addr16
rcr
(bad)
(bad)
fidiv
xchg
aaa
pop
dec
scas
scas
jbe
aam
out
lds
pop
add
sahf
pop
mov
js
sub
fidiv
bound
pop
mov
mov
push
mov
lea
movs
sbb
xchg
adc
retf
mov
cwde
dec
test
pop
xor
cmp
int3
push
loope
add
or
mov
retf
and
xchg
fistp
std
mov
xchg
mov
xor
lds
inc
mov
mov
jge
xchg
mov
shl
out
jns
sub
dec
xchg
scas
icebp
in
mov
(bad)
(bad)
je
repz
add
add
xor
xchg
lods
vpsrlw
icebp
xor
pop
inc
xchg
mov
enter
mov
and
xor
cmp
xchg
in
pop
hlt
stos
push
jo
xchg
pop
in
fstp
jns
sbb
push
mov
sti
cmpxchg
retf
push
cwde
sbb
mov
and
cmc
mov
std
xor
adc
cmp
xor
rcr
lahf
xchg
icebp
or
loopne
out
xor
cmp
and
ds
inc
aam
xlat
jmp
mov
sbb
retf
pop
inc
ja
xchg
pop
mov
push
cmp
pop
cmps
push
in
xchg
push
popf
(bad)
shl
cmp
and
imul
adc
push
mov
arpl
(bad)
pop
adc
int
or
(bad)
pop
inc
xchg
mov
jae
jmp
out
jmp
mov
inc
mov
jmp
fst
mov
xchg
imul
mov
and
push
std
adc
mov
xchg
inc
lea
fstp
retf
mov
jge
xor
repz
sub
je
lahf
outs
cmp
mov
(bad)
out
imul
nop
or
or
sbb
icebp
cdq
pusha
xchg
adc
pop
retf
stos
push
lahf
jno
push
xchg
fwait
pop
or
popa
jbe
or
inc
mov
inc
ficomp
mov
jbe
in
push
dec
jno
sbb
jge
mov
xchg
int
sub
fdiv
sbb
retf
mov
je
shl
pop
cwde
xchg
mov
xchg
jae
mov
lock
lds
imul
pop
xchg
xchg
jmp
and
jle
int3
fcmovbe
mov
pop
push
dec
into
xchg
sbb
(bad)
mov
xchg
jo
and
add
mov
dec
pop
test
(bad)
xchg
in
(bad)
mov
sub
push
or
lods
jno
xchg
push
inc
mov
shr
mov
movs
push
inc
add
fwait
stos
ror
mov
mov
xchg
lock
pop
or
push
or
mov
rcr
cmp
int3
add
cli
test
push
xchg
pushf
jno
hlt
je
push
jmp
js
pop
cmp
xchg
cmp
mov
jecxz
push
les
xchg
xchg
loopne
sub
test
cwde
and
mov
add
rcl
push
lods
mov
test
mov
popa
or
adc
or
xor
clc
fwait
and
add
(bad)
mov
xchg
popa
stc
pop
(bad)
retf
sar
and
mov
jbe
push
enter
ins
jbe
xchg
mov
fsub
mov
hlt
jp
mov
xor
jmp
adc
call
and
jecxz
mov
std
in
rcl
out
icebp
mov
push
or
pop
adc
push
fnsave
jae
jecxz
add
dec
in
pop
pop
mov
int3
scas
jmp
and
add
imul
jns
pop
mov
fwait
in
ficomp
es
lea
aaa
or
into
xchg
jnp
aam
dec
sbb
std
mov
or
lahf
stos
adc
movs
mov
mov
repnz
xchg
cmp
xchg
mov
aad
cdq
xchg
inc
pop
jp
pop
stc
pop
in
std
xchg
adc
retf
out
hlt
call
out
cmc
jns
and
out
xchg
mov
push
test
in
push
mov
ror
in
mov
xchg
mov
and
sbb
lods
inc
out
int3
hlt
fst
fist
fldenv
fs
add
(bad)
rcr
popf
or
xchg
ss
adc
push
repz
ja
pop
std
adc
icebp
xchg
mov
outs
jb
push
adc
cs
xchg
movs
dec
sbb
or
sbb
xchg
adc
dec
sbb
test
call
push
in
lea
sub
or
retf
jbe
push
adc
xchg
gs
hlt
lea
push
retf
lock
push
xchg
adc
mov
retf
sub
enter
outs
bound
xchg
jmp
mov
fbld
jmp
fwait
enter
and
add
pop
ja
xchg
cmps
dec
mov
jl
lea
sbb
outs
(bad)
imul
test
test
pop
xor
add
xchg
call
test
and
adc
stos
xchg
(bad)
retf
cmp
fstp
daa
fs
dec
xchg
loop
adc
xor
sub
out
das
(bad)
repnz
push
sub
xor
out
outs
in
movs
xchg
adc
inc
je
mov
mov
dec
sti
xchg
gs
ins
or
popa
xchg
(bad)
sub
pop
add
je
xchg
dec
mov
(bad)
fcom
lmsw
dec
std
inc
mov
addr16
iret
xchg
mov
retf
sahf
jecxz
std
sub
addr16
test
jmp
mov
push
call
push
push
sub
(bad)
mov
movzx
add
push
movzx
test
add
mov
test
test
pushf
jmp
aam
inc
jl
mov
popa
cli
add
inc
std
pop
inc
ins
and
mov
dec
out
sbb
mov
sub
mov
xor
jae
cmp
stos
test
or
and
shr
aam
movs
rol
ret
cmp
ror
pop
and
imul
mov
adc
mov
stc
mov
pop
adc
mov
push
out
and
inc
dec
in
loope
xchg
mov
ret
xchg
cld
sub
jnp
lahf
ret
dec
sahf
pusha
outs
jecxz
lds
lods
retf
jle
mov
(bad)
pop
jecxz
mov
lds
adc
sub
push
lock
je
ins
les
mov
repnz
dec
mov
jge
ss
shl
inc
adc
jnp
mov
jmp
into
test
int3
into
aam
adc
push
sysenter
pop
movs
xchg
or
imul
aam
aas
dec
neg
stos
mov
out
inc
fadd
mov
fdivr
cmp
mov
sub
in
jbe
push
jae
xor
loopne
push
fwait
xor
movs
dec
gs
xor
dec
dec
mov
cmp
adc
adc
scas
cwde
sub
cmp
int3
js
inc
shr
lahf
add
jecxz
daa
into
call
push
das
(bad)
icebp
dec
rol
pop
push
cmps
add
dec
sbb
and
popf
aad
dec
mov
mov
lea
ja
call
lea
lea
push
pusha
mov
pushf
pusha
push
mov
pushf
mov
push
ret
test
mov
add
mov
adc
and
imul
test
shl
retf
xchg
test
std
ror
jle
loopne
call
inc
adc
sar
and
mov
jb
jl
jae
enter
shr
sar
imul
cmps
sbb
sbb
add
push
and
daa
in
push
jmp
xor
dec
out
sub
inc
aam
mov
cmp
jnp
sbb
sub
popa
sbb
sar
lock
jne
(bad)
and
sar
test
jno
cmps
mov
shl
stos
hlt
jmp
add
mov
shr
imul
sahf
fadd
jmp
outs
xor
push
mov
push
cmps
mov
add
outs
and
retf
xor
sbb
xchg
push
jl
pusha
cli
nop
sbb
and
jg
imul
clc
sbb
stc
add
mov
hlt
(bad)
adc
mov
add
pcmpgtw
addr16
mov
and
xor
jmp
dec
jp
jg
stos
ins
xor
outs
ja
mov
cmp
movs
or
lahf
cmp
fimul
pop
stos
aas
es
in
mov
hlt
jl
mov
int3
pop
iret
adc
dec
inc
xchg
scas
mov
push
xchg
dec
jp
neg
shl
inc
inc
cs
inc
fild
inc
xchg
mov
int3
mov
mov
test
xchg
jp
shr
repz
push
pop
sbb
(bad)
(bad)
fistp
movs
jp
test
mov
movs
(bad)
adc
add
add
stc
ret
push
mov
test
or
(bad)
ins
mov
(bad)
leave
pop
dec
push
pop
shr
xchg
or
addr16
mov
dec
xor
call
or
inc
gs
sub
popa
cmps
or
xor
mov
mov
mov
lods
jae
or
pop
dec
add
dec
sbb
push
rcr
adc
addr16
or
inc
push
pusha
mov
call
jg
and
aad
vpunpckhqdq
dec
adc
push
mov
cdq
popa
movs
jge
test
jo
push
adc
cdq
xor
xor
(bad)
fcom
scas
call
adc
fcom
daa
je
cmc
gs
sahf
jae
cmp
pop
inc
outs
in
call
cdq
mov
fs
cdq
pop
(bad)
and
jne
ds
push
test
mov
and
lds
push
fsub
lods
out
xor
leave
scas
je
or
dec
push
pop
ret
(bad)
sbb
push
mov
fsub
stos
movs
inc
and
xchg
lahf
sbb
and
jae
lea
in
push
mov
(bad)
(bad)
fdivp
jmp
mov
and
and
(bad)
cld
mov
xor
pmullw
(bad)
out
shl
lds
mov
ficomp
cdq
xor
or
jb
out
sub
push
pop
lahf
push
pop
pusha
aam
add
stos
shl
pop
pushf
cld
out
xchg
scas
push
ja
stos
shl
push
inc
xchg
mov
addr16
das
add
iret
das
and
add
mov
sbb
aam
retf
test
nop
ffree
aad
or
jae
ret
(bad)
xchg
movs
stos
xchg
mov
shl
adc
cdq
movs
dec
push
imul
fcomp
scas
scas
in
jmp
lea
mov
sbb
sbb
sub
call
cld
cmps
mov
pop
jo
lds
xor
fbstp
ja
sbb
cmp
scas
jbe
(bad)
call
cmp
inc
test
movs
pop
cmp
mov
test
jmp
in
inc
imul
jnp
sbb
mov
cmc
mov
cs
fcomp
jmp
jne
loope
js
push
lods
adc
scas
jns
ret
scas
in
(bad)
call
mov
xor
pop
repnz
sub
loopne
xchg
push
fdiv
jmp
in
test
sub
mov
push
mov
jb
push
sub
mov
pop
addr16
jle
into
fist
fwait
nop
es
pop
sbb
mov
pop
dec
sbb
neg
out
jmp
fs
out
sub
and
jo
loope
cdq
ss
shl
movs
cdq
mov
mov
jbe
cs
pop
pop
outs
dec
xchg
sbb
mov
fld
gs
and
mov
arpl
imul
loopne
and
sbb
mov
lea
gs
js
adc
loope
std
(bad)
scas
add
pusha
mov
push
sbb
jbe
bnd
sbb
mov
pop
ret
pslld
and
inc
test
pop
inc
xor
push
shl
jmp
je
pop
cmc
shr
mov
test
bt
and
call
retf
jo
scas
mov
sub
sub
jge
push
pushf
add
aad
cdq
xor
imul
jo
popa
push
movs
xchg
pop
push
or
adc
test
or
mov
ret
dec
cmp
stos
sbb
aaa
add
sub
xchg
imul
fucomp
xor
xor
mov
popa
inc
imul
push
sbb
mov
push
ins
ss
cli
outs
scas
inc
es
scas
jnp
pop
push
cmc
mov
outs
mov
jnp
fwait
inc
xchg
sub
or
ss
paddq
test
adc
or
jg
mov
sub
cdq
and
icebp
or
in
dec
inc
imul
jo
dec
bound
aam
(bad)
neg
ins
pop
lock
inc
(bad)
sti
or
push
xchg
retf
(bad)
ins
cmp
sbb
jge
fcmovnu
xchg
les
adc
ins
or
jns
ss
mov
cmps
fisttp
shr
lea
adc
popf
test
popa
sub
add
xor
mov
add
sub
mov
aam
das
jp
and
mov
es
into
neg
jno
sub
jo
das
xor
shr
push
ins
cmp
repz
mov
iret
inc
inc
mov
sub
sbb
mov
je
pop
xchg
pop
retf
ror
pusha
cmp
lea
call
call
not
mov
call
push
inc
setno
mov
pushf
pushf
mov
lea
call
push
adc
call
add
mov
loopne
in
es
sub
retf
aad
cwde
xor
popf
lods
jbe
sbb
adc
inc
xor
mov
mov
(bad)
dec
mov
dec
pop
(bad)
xor
es
mov
sub
repnz
test
repz
std
mov
and
rol
jp
or
or
add
aas
adc
cdq
mov
dec
jno
cmp
inc
outs
cmp
cmps
cs
mov
push
pop
imul
inc
cli
adc
mov
stos
jecxz
call
jge
aas
pop
(bad)
jnp
test
js
lea
jb
cmc
clc
push
push
cmp
jmp
lea
jae
cmc
cmp
push
lea
jae
call
pusha
push
lea
jae
pushf
jmp
pusha
mov
push
push
mov
mov
lea
jmp
out
add
dec
icebp
dec
in
mov
stc
lods
push
mov
pushf
lds
popf
mov
jbe
repnz
ror
dec
xor
addr16
icebp
int
popa
lods
popf
pusha
sbb
cmp
sub
pop
icebp
(bad)
lods
mov
mov
pusha
xor
xchg
sub
sub
pop
ins
adc
or
jne
loope
and
pop
mov
sub
adc
jmp
pop
aas
movs
ror
xorps
sub
dec
lds
push
add
mov
pusha
jle
call
sub
test
int3
out
add
sub
fsub
sbb
jmp
xor
push
iret
mov
in
addr16
sbb
and
nop
sub
dec
jnp
fbstp
les
loopne
pop
push
inc
cmc
add
push
popa
fldln2
push
or
out
int3
mov
or
push
mov
mov
adc
sti
cmp
jmp
inc
jo
ss
fs
mov
or
les
sub
xchg
xchg
pop
sub
mov
jmp
outs
fiadd
(bad)
ja
arpl
pushf
repnz
imul
mov
mov
in
add
sbb
mov
jmp
in
and
cdq
add
sar
push
int
dec
cmp
mov
cmps
frstor
xlat
fcomp
sqrtps
push
test
mov
or
push
cmp
retf
adc
(bad)
jecxz
pcmpgtb
ret
xor
xor
and
aam
pop
and
pop
adc
dec
jecxz
inc
adc
int
jle
iret
add
ror
nop
stc
cmp
inc
retf
shr
(bad)
repnz
mov
adc
inc
inc
ja
rdpmc
mov
mov
mov
mov
adc
push
mov
lock
add
in
push
and
mov
pop
fsubr
jbe
(bad)
mov
jnp
retf
pop
sbb
daa
mov
mov
xchg
popa
mov
and
jnp
out
adc
out
sub
and
add
je
ror
cmc
ins
pop
pop
pushf
cmc
in
cmp
sub
or
inc
jne
int3
or
push
adc
fs
mov
mov
pop
push
mov
add
sub
int3
loop
sub
icebp
cmp
inc
stos
adc
cmp
rol
inc
sbb
(bad)
lock
loopne
fsub
xchg
stos
sar
das
cmp
scas
xchg
into
sub
das
xchg
in
mov
lea
call
push
lea
jae
pusha
test
xor
mov
pusha
call
pushf
pushf
pushf
xchg
pushf
call
push
test
xchg
mov
sub
in
cmp
out
xchg
mov
jmp
mov
xor
movs
sbb
shl
lods
pop
jmp
push
and
inc
jecxz
addr16
push
jbe
and
cmp
pop
cs
addr16
dec
jecxz
adc
cmc
add
test
adc
xor
xor
push
jbe
pop
test
sub
xchg
add
add
or
pop
stos
sub
scas
sub
test
jmp
aad
(bad)
stos
lahf
loope
mov
cmp
xchg
cmp
jmp
xor
clc
xchg
ds
adc
fst
movzx
movsx
call
idiv
inc
cld
mov
sub
mov
int
lea
push
and
add
push
lea
xchg
mov
loopne
psubb
and
pop
jg
jg
pop
lock
das
ja
(bad)
mov
sbb
stos
ret
test
xchg
lds
mov
ror
inc
mov
xchg
mov
jb
in
xchg
loopne
in
adc
xchg
and
rol
and
movs
mov
cmps
sti
out
dec
out
cli
repnz
mov
movs
loopne
mov
jmp
sbb
jno
add
xor
adc
push
popa
jns
jmp
mov
js
fdiv
jl
and
pop
mov
cdq
and
(bad)
lods
mov
sar
ss
retf
dec
push
jl
mov
lds
xor
or
jb
xlat
or
push
pop
mov
sbb
icebp
cwde
jge
xlat
lahf
repz
sbb
or
push
push
mov
xacquire
inc
and
push
jle
fisub
icebp
fidivr
pop
mov
pushf
push
adc
mov
cld
enter
jnp
in
inc
loop
ret
scas
sub
out
sub
ins
lock
jno
ret
mov
mov
(bad)
in
or
pop
and
cmp
movlps
push
(bad)
enter
cli
mov
dec
and
fimul
ja
fs
shr
in
in
dec
jmp
jmp
push
ds
push
lods
mov
mov
mov
fistp
pusha
into
and
mov
rcr
aas
fwait
dec
aaa
ins
cs
stos
aam
and
ret
mov
mov
(bad)
adc
jle
xor
sahf
into
jno
das
fcmove
and
gs
adc
loop
call
push
sub
pop
or
les
int3
or
aaa
or
je
cmp
cmp
sar
pop
out
scas
add
mov
xor
inc
stos
sub
fiadd
add
mov
je
inc
cmp
push
(bad)
loopne
dec
retf
shl
dec
loope
int
pop
push
jg
add
xor
jno
mov
mov
or
icebp
gs
lods
in
lea
loope
(bad)
ffree
jg
xor
jnp
adc
xchg
sub
cmc
dec
sub
int3
aad
dec
xor
int
jnp
mov
and
sbb
mov
jmp
jmp
fadd
or
mov
mov
cmc
sbb
sbb
jg
ja
dec
pop
cmp
xchg
adc
xor
fdivr
mov
xchg
shl
cdq
xchg
add
bound
jge
and
adc
adc
add
imul
mov
or
nop
pop
jcxz
ficom
loope
lods
mov
xlat
jge
daa
pop
imul
mov
mov
push
mov
sub
(bad)
fmul
mov
out
dec
mov
mov
mov
ds
imul
stos
pop
(bad)
pop
inc
cs
xchg
jl
das
bound
std
(bad)
jmp
outs
cwde
int
push
pop
mov
dec
inc
jo
popa
mov
inc
fnsave
add
jae
retf
or
pop
mov
fild
xor
cmp
cmc
jns
adc
ins
arpl
inc
pusha
stos
fcmovnbe
loope
dec
das
in
leave
mov
pushf
jmp
push
xchg
jns
and
loope
outs
jb
les
adc
cmc
dec
icebp
(bad)
pusha
fcmove
inc
fwait
xchg
jns
out
push
fwait
sub
jne
cmc
mov
ja
cmp
mov
push
jnp
mov
mov
pop
pushf
mov
push
mov
mov
pushf
lea
jmp
push
push
lea
je
clc
cmc
test
sub
call
push
lea
jb
push
mov
mov
push
ret
inc
mov
bt
cmp
pushf
lea
jbe
rcl
inc
lea
sub
sbb
or
pusha
mov
bts
rcr
test
mov
pushf
xadd
add
and
jmp
call
ss
or
xor
jns
cwde
inc
lods
mov
pop
js
in
in
pop
in
stc
sbb
ret
call
imul
jge
out
jle
bound
add
sbb
repz
repz
aaa
outs
cmp
dec
add
jle
cmp
and
enter
mov
imul
dec
push
jnp
dec
in
push
cld
sahf
cmps
xchg
and
cmp
fimul
mov
xchg
jge
call
dec
test
add
outs
pop
push
cmc
dec
xchg
dec
push
sbb
sbb
out
sub
sub
adc
push
gs
sbb
inc
test
sub
mov
jae
add
(bad)
cmp
xor
adc
mov
cmp
push
je
(bad)
xor
aam
pusha
mov
inc
scas
jae
sbb
call
mov
cmp
dec
sub
adc
ret
mov
test
adc
int
xchg
mov
(bad)
push
mov
aad
dec
movs
jl
popa
jge
push
jne
fild
int
cmp
push
in
mov
sub
xchg
inc
jb
pop
inc
cmc
and
into
sar
nop
movs
retf
adc
mov
inc
(bad)
cld
(bad)
popa
mov
lock
push
int
es
mov
xor
or
add
dec
outs
arpl
inc
ins
ins
outs
arpl
add
inc
gs
outs
fs
gs
imul
add
fs
call
call
add
mov
add
push
add
jbe
add
add
xchg
add
add
loopne
sub
movsx
setl
add
rcl
call
aad
pop
gs
mov
imul
pop
xor
lea
pop
jno
sar
xor
push
adc
mov
inc
dec
repz
mov
xchg
pop
sbb
call
xchg
stos
adc
fdiv
add
xchg
mov
adc
mov
loop
xlat
js
mov
jo
arpl
outs
adc
mov
lods
mov
dec
fnstsw
xlat
cld
add
ins
or
xor
ss
arpl
and
xor
fisub
popf
shr
ja
xor
mov
pop
lahf
in
test
enter
movs
mov
add
push
and
and
jg
imul
mov
movs
jp
mov
push
ss
addr16
sbb
(bad)
ud2
cmp
addr16
adc
loopne
shr
data16
xor
adc
push
pop
daa
xor
cmps
push
sbb
stos
sbb
in
dec
stos
aas
cmc
mov
jb
call
sahf
retf
scas
idiv
jnp
and
je
in
push
iret
and
jae
aas
mov
les
shl
in
mov
repz
dec
jno
inc
xor
xor
xor
fild
push
std
mov
fadd
push
sub
enter
test
cli
rcr
mov
dec
jg
sub
adc
mov
mov
cmps
cmps
sub
xor
cli
gs
(bad)
xor
and
mov
xchg
int3
sub
fnsave
mov
jecxz
mov
jb
push
lds
dec
lea
mov
jle
test
out
mov
mov
call
int
mov
movs
mov
pop
shl
push
in
pop
clc
pop
add
pusha
ds
loop
push
inc
inc
cmps
jp
sub
mov
and
inc
cmp
out
lea
jo
pop
mov
sub
out
in
enter
or
jl
mov
xor
shl
xchg
pop
out
and
sbb
sbb
xchg
clc
mov
test
test
ja
fdiv
or
sbb
xchg
sbb
pop
or
cmp
bound
es
pop
aam
rcl
inc
pop
sbb
jmp
pusha
mov
call
repnz
mov
mov
pusha
lea
jne
shl
bt
mov
rcl
sub
pushf
lea
add
call
pushf
not
push
mov
lea
call
pusha
stc
cmp
mov
mov
push
lea
jae
push
cmp
pusha
lea
jae
call
lea
jno
push
mov
push
pushf
setbe
call
lea
jb
bt
clc
cmp
cmp
push
mov
pusha
lea
jne
bt
pusha
btr
mov
cmp
call
scas
jae
cld
cmps
mov
imul
repnz
adc
ins
mov
or
sahf
mov
test
pminsw
idiv
sbb
jmp
das
jp
or
movs
push
sbb
ds
icebp
ja
pusha
push
cdq
out
ins
add
dec
lods
movs
jl
adc
je
popf
ds
push
jnp
dec
add
jns
or
in
daa
lods
cs
in
repz
jmp
mov
je
mov
ja
shr
jo
push
xor
jnp
cld
out
(bad)
xor
pop
pushf
fdiv
pop
repz
aam
jo
pop
mov
sub
push
iret
cmp
jae
movs
imul
jbe
mov
push
jb
pop
jne
arpl
fadd
add
jle
cmp
push
and
sub
mov
cmp
call
add
add
add
add
add
cmp
sbb
sub
sahf
adc
add
add
add
add
add
add
add
bound
add
add
add
add
add
add
add
lods
cmp
xor
sub
mov
cmp
stos
jnp
add
add
add
add
add
add
add
and
sub
(bad)
adc
add
and
sub
add
cli
mov
add
fs
ins
cs
ins
add
and
pusha
repnz
mov
push
lea
jne
pusha
jmp
jmp
add
inc
gs
gs
imul
sar
(bad)
call
ret
clc
sbb
loop
push
inc
xor
outs
(bad)
jg
sub
aaa
outs
xor
or
cmc
ret
jno
test
add
mov
mov
rol
xor
add
jle
or
inc
xor
(bad)
inc
clc
mov
push
clc
push
out
lods
mov
bound
add
dec
add
mov
into
les
mov
dec
fs
div
mov
mov
mov
xchg
clc
add
lods
or
jne
inc
pop
mov
out
fld
jns
dec
jmp
xor
cmp
ret
sub
into
mov
sub
es
je
add
mov
jmp
add
add
iretw
add
xor
hlt
ficomp
popa
pop
mov
popa
inc
push
mov
rol
inc
jle
out
mov
mov
mov
scas
push
dec
(bad)
jl
inc
aam
scas
in
inc
mov
ins
sbb
hlt
mov
push
sub
inc
mov
cld
movs
cmp
or
sbb
cmp
clc
push
ret
stos
mov
adc
js
imul
outs
inc
clc
int
setno
push
stos
add
adc
inc
(bad)
aaa
(bad)
frstor
(bad)
mov
fst
movs
gs
mov
test
ss
mov
mov
fistp
or
mov
cmp
cmp
cmp
test
mov
jmp
push
push
lea
jbe
shrd
mov
mov
lea
and
neg
movsx
add
btc
mov
mov
mov
add
ror
sar
movzx
mov
bsf
or
mov
call
call
not
mov
push
pushf
push
ret
adc
push
push
mov
jg
sbb
pop
jno
push
mov
push
mov
sub
adc
nop
mov
ss
mov
out
jmp
or
ja
dec
arpl
pop
ss
dec
mov
in
add
cmp
sub
sub
add
and
mov
jmp
shr
fwait
adc
pop
push
push
movs
dec
jns
jne
(bad)
jb
in
xchg
int
leave
data16
in
push
dec
push
mov
pop
call
test
push
adc
pop
int3
mov
icebp
mov
jnp
pushf
mov
ror
and
mov
adc
push
clc
gs
call
sbb
or
mov
jge
ins
cmc
js
popa
dec
jmp
add
and
jb
ret
add
das
mov
clc
add
imul
das
into
inc
jne
bswap
sti
(bad)
xrelease
imul
repz
das
jnp
push
sar
push
push
ss
clc
cmp
movs
call
mov
faddp
dec
or
in
aam
mov
arpl
ror
out
pop
aaa
aaa
xchg
cld
pop
out
repnz
mov
and
cwde
ds
sbb
test
in
shl
repz
retf
jae
pop
inc
nop
cmc
inc
test
pop
popf
xchg
arpl
and
cmp
jno
cmp
lock
je
mov
and
xchg
loopne
cld
xchg
lea
out
mov
mov
movs
shl
xchg
and
icebp
mov
adc
pop
jns
test
sub
sbb
sub
shr
lock
ficomp
stos
mov
pusha
scas
push
js
mov
adc
mov
test
or
out
daa
add
mov
mov
mov
mov
push
ret
push
mov
fistp
sub
retf
nop
sub
(bad)
lods
xlat
cwde
mov
jp
sub
ja
mov
popf
jmp
data16
ins
test
sbb
rol
sub
xor
lahf
inc
adc
imul
cmp
inc
loopne
xchg
(bad)
push
in
mov
ficomp
push
fs
xchg
dec
bound
jne
dec
loopne
repnz
mov
push
inc
mov
icebp
enter
leave
out
or
dec
xlat
lock
push
in
add
js
lods
dec
fadd
push
enter
arpl
cmp
scas
dec
mov
mov
ds
sti
pop
out
cmps
neg
cdq
popf
add
popf
adc
les
mov
dec
inc
mov
dec
(bad)
out
pop
push
mov
add
add
push
dec
inc
gs
popa
je
inc
jb
ins
dec
inc
dec
imul
xor
lea
mov
in
xchg
push
jns
ror
mov
push
lock
jbe
rcl
add
inc
lock
mov
fiadd
xchg
gs
mov
push
loope
out
pop
xchg
and
(bad)
test
hlt
stos
sub
jmp
sbb
push
jbe
aas
loop
mov
push
mov
faddp
pop
sbb
ds
call
(bad)
loop
cli
loopne
push
cdq
push
stc
adc
inc
xchg
sti
(bad)
sahf
jg
dec
mov
fiadd
jns
jbe
call
push
leave
inc
lods
clc
ror
pop
(bad)
cwde
xchg
arpl
or
iret
repz
pop
je
fs
pop
xchg
pop
mov
cmp
push
gs
ror
enter
ins
push
addr16
sub
es
push
mov
sub
lea
pop
jno
pop
lahf
pop
test
(bad)
fs
sbb
int
loope
scas
push
jle
test
xor
in
add
push
or
test
aam
dec
rcl
mov
shl
int
adc
in
cmps
sti
xchg
ror
retf
mov
in
ret
adc
lea
pusha
push
ret
add
dec
outs
arpl
inc
jb
gs
inc
and
ins
pop
pop
add
mov
(bad)
dec
test
jg
add
jl
add
sub
pusha
mov
call
pushf
adc
mov
pushf
push
lea
jmp
inc
pushf
not
mov
mov
pushf
lea
call
push
mov
adc
pushf
lea
jae
jmp
dec
xor
mov
sub
jne
and
cdq
imul
mov
pushf
out
cmps
ja
push
pop
arpl
mov
push
add
push
cmp
push
out
mov
and
mov
jmp
(bad)
push
leave
les
mov
jl
das
jb
fsubr
hlt
out
adc
and
dec
mov
sub
jbe
cmp
sub
sbb
aam
ins
push
les
sub
pop
into
push
nop
rcl
std
push
repz
sar
adc
push
push
out
mov
jno
repnz
stos
out
call
test
lahf
mov
and
retf
xor
inc
pop
loop
out
jmp
mov
push
les
les
pop
rol
ret
pop
xchg
pop
push
and
fimul
in
add
xchg
pushf
jmp
outs
jle
push
rcl
sub
sub
out
cld
in
inc
inc
mov
icebp
fucom
arpl
popa
test
pop
push
sahf
out
sub
mov
mov
jno
cmc
and
iret
loop
jp
adc
and
jbe
and
push
cmps
jns
push
xor
push
mov
out
in
addr16
mov
ret
nop
xchg
pop
cmps
test
mov
mov
pop
pop
ret
mov
jmp
xor
fmul
outs
jne
dec
cmp
mov
pop
or
lods
gs
pop
push
adc
aaa
xchg
and
inc
loopne
xchg
into
lods
jnp
xchg
lahf
mov
xchg
push
cs
out
outs
sar
fbstp
jne
mov
in
imul
mov
imul
fidiv
js
(bad)
push
stos
mov
cmp
call
(bad)
xchg
jge
fisubr
clc
adc
dec
jg
addr16
sbb
fadd
inc
cmp
mov
xchg
pop
mov
pusha
push
ret
sub
mov
into
mov
sbb
jg
xchg
pushf
xor
scas
push
(bad)
int3
push
inc
xlat
not
mov
scas
fild
dec
imul
jge
mov
dec
es
push
lods
jno
push
mov
push
xchg
fucom
adc
arpl
sahf
adc
or
pop
jbe
push
mov
xchg
idiv
das
inc
or
xchg
mov
push
push
ret
pop
dec
push
mov
mov
retf
dec
ror
mov
call
jb
imul
arpl
xor
stc
es
daa
dec
xor
pop
daa
(bad)
out
icebp
popa
int
mov
in
cmps
nop
xchg
or
xchg
mov
test
inc
cld
xor
rcr
fist
and
sub
sub
jns
jns
rcr
jns
push
xchg
pusha
outs
lea
pop
stos
add
cmc
es
add
(bad)
fld
dec
inc
push
jo
je
cmp
xchg
aaa
add
rol
and
add
cmc
add
arpl
cmp
add
out
adc
sub
dec
xchg
xor
gs
aad
test
sbb
clc
mov
jge
and
or
xchg
outs
in
push
popf
push
gs
inc
and
xlat
retf
test
sub
xor
push
lock
popf
jae
mov
xchg
test
retf
add
sub
into
xor
into
mov
lods
cdq
daa
sub
test
stos
aaa
jge
into
inc
add
cmp
and
mov
mov
xor
xor
mov
cmp
cdq
fstp
not
and
iret
ss
int3
bound
icebp
mov
in
inc
dec
popf
enter
or
xchg
ins
pop
xor
dec
mov
retf
fisub
loop
mov
pop
(bad)
imul
sub
nop
frstor
aad
mov
hlt
(bad)
mov
imul
adc
aad
xchg
call
scas
push
or
add
and
mov
adc
(bad)
dec
and
je
fnstsw
adc
dec
std
adc
arpl
xor
neg
ret
jae
sub
outs
inc
loop
enter
clc
or
test
out
or
retf
loopne
loope
mov
xchg
add
adc
push
stos
cwde
aaa
dec
cwde
aaa
mov
dec
pop
lds
add
ret
pop
mov
cmc
pop
in
aad
rol
jno
cmps
fwait
xchg
mov
cld
ror
ret
enter
arpl
adc
into
lock
cmp
(bad)
inc
(bad)
cmps
ins
ret
adc
push
adc
pop
jg
ins
pushf
mov
pushf
pusha
pushf
lea
jmp
xor
and
mov
or
loope
je
or
mov
les
or
xchg
mov
or
cmp
push
mov
mov
ret
inc
es
bound
cmp
and
xchg
push
mov
(bad)
clc
enter
dec
call
and
jo
add
imul
mov
out
adc
test
sbb
add
nop
xor
cmc
inc
and
mov
cmp
ins
lock
(bad)
inc
or
mov
loopne
ja
jns
rcr
mov
retf
push
sub
int3
movs
les
inc
and
in
rcr
dec
inc
or
(bad)
adc
fninit
fsubp
std
lea
ja
push
pusha
push
push
lea
jb
call
push
xchg
add
ins
cmp
into
xchg
mov
test
cmp
mov
lods
and
retf
lahf
mov
add
pop
retf
test
adc
xor
mov
pop
popa
jge
fstp
les
push
jbe
or
clc
pop
test
or
or
or
push
inc
and
sar
add
dec
aaa
mov
or
movs
xor
bound
mov
popa
xlat
and
call
adc
sahf
pop
push
push
out
sbb
pusha
sub
es
mov
aad
cs
jge
in
push
inc
push
retf
aam
inc
scas
imul
je
dec
adc
push
pusha
popa
ins
aam
jmp
daa
push
stos
cwde
(bad)
jge
mov
cmp
ja
or
xor
mov
push
cmp
jp
inc
test
lods
jbe
sbb
jp
fdivrp
inc
inc
mov
pusha
push
jecxz
and
ret
cmp
push
cmp
jg
cmp
push
fidiv
sub
pop
sub
repnz
mov
inc
push
stc
sub
repnz
test
adc
repnz
adc
jmp
js
push
jo
push
mov
pop
and
(bad)
int3
mov
stos
fadd
stos
pop
std
push
add
mov
mov
enter
push
es
or
pop
inc
mov
out
ins
jb
push
push
pop
inc
add
fisttp
mov
adc
jb
xor
mov
test
sbb
ds
add
sbb
pop
xchg
leave
fdiv
imul
adc
push
dec
outs
mov
jnp
pop
lods
mov
int
or
push
jo
xor
rcl
push
int
sbb
outs
pop
or
pop
out
push
and
inc
sbb
sbb
add
pop
mov
ins
popa
cmp
call
jo
ret
mov
adc
inc
loope
sbb
enter
adc
dec
ss
sbb
xchg
loopne
int
push
sbb
or
cmps
sbb
popf
push
out
pusha
mov
or
test
fiadd
add
push
pusha
clc
pusha
add
call
push
cli
repz
mov
sbb
or
sbb
xor
cmc
icebp
push
ds
adc
ja
or
push
jle
adc
bound
ja
xor
movs
fs
mov
cmp
aaa
inc
ds
push
in
fbld
mov
cmp
movs
cmp
jge
lahf
push
pop
cli
and
mov
mov
dec
bound
add
pop
mov
push
stos
inc
xchg
cld
xchg
out
push
and
jl
shr
jecxz
pop
inc
push
mov
ds
dec
cmps
into
scas
enter
sub
sub
inc
sbb
xor
jmp
xchg
fldpi
aad
mov
xor
sahf
rcr
dec
mov
sbb
ror
les
fadd
adc
fmul
sub
stos
rol
sub
jge
mov
push
sbb
bound
adc
inc
rol
sti
and
push
das
movs
cmp
mov
push
lahf
add
or
cmp
sub
ins
and
sub
xchg
test
(bad)
mov
test
pop
movs
cmp
pop
sbb
into
loope
retf
xor
cmp
les
xchg
pop
ficom
fnsave
xchg
shl
out
mov
das
iret
push
mov
and
ficom
fs
jne
lahf
bswap
mov
pushf
pop
push
not
mov
pushf
push
lea
call
mov
sub
cwde
rol
fs
cld
cmc
push
sub
xor
sub
int3
inc
xchg
jle
bound
mov
out
aam
pushf
push
jl
xchg
mov
fsub
push
add
dec
icebp
mov
lods
fcomip
jmp
jne
sbb
ror
mov
sbb
retf
les
push
data16
mov
mov
push
ins
in
sub
cmc
mov
dec
hlt
mov
jge
popa
xor
cmp
xor
sbb
add
pop
cmc
mov
xor
mov
push
dec
mov
sub
fldcw
jae
cmp
ja
dec
lock
fs
imul
mov
mov
add
mov
sub
push
cs
repnz
inc
jb
arpl
dec
lahf
xor
xchg
mov
xor
pushf
add
in
pusha
int
fcomp
mov
ffree
bound
mov
sbb
lods
cmp
jno
mov
test
out
mul
xchg
sbb
cmp
add
out
add
scas
rcl
das
imul
call
xchg
push
clc
push
mov
cmp
mov
inc
daa
mov
cmps
sti
dec
out
mov
push
jecxz
out
fsubr
xor
mov
cmp
jmp
push
sbb
xchg
adc
sub
imul
imul
js
inc
fidiv
in
mov
or
jo
test
rcl
leave
lea
add
mov
push
add
jo
cmp
push
lea
jne
test
das
pusha
xor
cmc
or
mov
dec
not
add
sets
mov
mov
pusha
test
mov
call
add
push
jne
jb
push
gs
outs
jb
popa
outs
arpl
outs
jne
je
jb
lea
je
bt
clc
pushf
sub
cmc
clc
cmp
pusha
jmp
ja
in
push
mov
in
xchg
nop
dec
and
sub
inc
in
int3
lds
stc
and
push
mov
les
sbb
dec
add
jns
aam
push
mov
lock
xchg
and
cmps
add
dec
xor
mov
je
xchg
adc
jl
jnp
pop
mov
pop
(bad)
pop
add
mov
leave
setae
inc
loop
sti
push
jl
rcr
not
out
jmp
ror
imul
jle
dec
shl
dec
sub
inc
pop
(bad)
xor
sub
push
iret
sti
ss
lods
pop
xchg
cmp
sbb
mov
stos
push
rcl
stc
(bad)
jmp
pop
xchg
mov
fist
mov
popa
jmp
in
popa
cmp
jbe
mov
mov
jb
jmp
and
jns
push
or
and
aas
xchg
adc
sbb
adc
test
cmps
es
loope
call
xor
inc
call
add
cmp
xchg
icebp
pushf
je
out
sbb
ja
inc
pop
add
sahf
(bad)
xor
(bad)
adc
test
iret
hlt
or
call
stc
mul
jle
outs
cmp
cmp
push
enter
(bad)
bound
movs
stos
loop
aas
in
(bad)
mov
fstp
and
sub
and
popa
jmp
mov
cmps
or
dec
aaa
cmp
add
test
push
xchg
call
sbb
test
and
out
mov
fs
inc
aaa
mov
iret
push
jne
add
(bad)
adc
jbe
sbb
xchg
arpl
xor
adc
push
inc
cwde
sub
mov
fistp
std
xchg
jns
push
xchg
pop
mov
rcl
lds
dec
cmp
mov
cs
test
dec
jno
in
in
pop
add
sahf
push
mov
retf
shl
jl
fdivr
jno
jnp
add
scas
int
and
stos
dec
mov
(bad)
push
pcmpeqb
lahf
cmp
xor
scas
jmp
lea
in
out
rcl
add
push
arpl
shl
aad
xchg
ds
je
inc
inc
cmc
pop
adc
enter
and
or
or
(bad)
fstp
test
ret
ja
call
mov
in
cmp
push
iret
xchg
mov
jmp
dec
in
adc
mov
movs
cmp
jno
inc
jno
dec
jne
rol
test
pushf
jne
jbe
push
mov
cmps
das
gs
sub
jmp
pushf
jmp
lea
jae
pushf
mov
push
lea
jmp
fild
sub
scas
iret
mov
imul
push
out
add
inc
sti
stos
and
or
or
cmp
xchg
retf
call
mov
sub
out
in
sti
jo
iret
mov
inc
jae
add
scas
jle
xor
mov
es
push
in
aas
jne
in
mov
in
pop
das
repz
jmp
mov
jo
(bad)
(bad)
inc
push
movs
arpl
xchg
stos
les
mov
cmps
push
or
dec
shr
mov
mov
call
xchg
in
cmp
adc
arpl
cmps
dec
stc
xchg
sub
or
mov
mov
js
add
jmp
out
outs
mov
popa
ja
mov
pusha
mov
mov
scas
stc
cmp
pusha
xor
mov
clc
repnz
mov
pushf
call
retf
adc
mov
push
imul
ins
jbe
adc
push
and
outs
sbb
pusha
add
dec
xchg
dec
(bad)
pushf
push
jl
outs
nop
shl
gs
or
inc
mov
xchg
je
jl
add
mov
cdq
mov
not
jmp
mov
(bad)
out
mov
or
dec
cdq
shl
shl
sbb
arpl
cmc
sbb
int3
retf
outs
and
jl
fwait
jae
xor
xor
push
jle
adc
lods
idiv
ds
and
mov
mov
push
in
mov
mov
bound
add
mov
jmp
add
and
dec
mov
cli
shr
jae
fisttp
(bad)
xor
inc
iret
mov
out
sub
imul
and
xor
adc
inc
fcomp
xor
jo
cdq
frstor
pop
push
popa
int3
hlt
call
dec
push
ror
lods
das
xchg
inc
repnz
rol
mov
retf
mov
push
sti
jg
add
test
jge
jecxz
pop
dec
sbb
jp
pop
inc
loopne
xor
loop
(bad)
fcom
pop
hlt
dec
loopne
in
mov
xor
cmp
les
and
in
aad
jno
pop
xchg
bt
pushf
not
clc
cmc
shr
jmp
test
stc
cmp
jmp
lea
jno
mov
pushf
lea
jmp
scas
(bad)
cmp
dec
mov
jg
(bad)
cmp
lahf
outs
out
repz
pop
mov
aaa
push
xchg
ror
(bad)
mov
int
leave
push
fistp
cld
inc
je
rcr
mov
mov
imul
xlat
out
div
ficom
and
add
adc
fmul
jmp
scas
ror
xchg
imul
push
lahf
std
xchg
inc
jo
or
mov
out
or
ds
mov
mov
push
mov
xchg
sub
or
mov
jmp
stos
mov
cmps
xchg
daa
jnp
xchg
ficomp
test
jb
jg
pop
shl
mov
or
fld
inc
retf
fldenv
(bad)
pusha
pushf
cmp
jmp
inc
cmp
dec
mov
adc
xor
jnp
sub
mov
jp
dec
arpl
sbb
sbb
rcl
or
sbb
dec
and
jmp
xchg
xchg
sub
adc
fsub
pop
lods
jbe
mov
jne
mov
bnd
jb
inc
mov
xchg
ss
std
add
jle
inc
into
outs
(bad)
and
aam
sbb
aas
inc
cmp
repz
mov
sbb
ficom
pop
and
xor
dec
cmps
les
test
jg
popf
and
int
or
mov
cld
inc
mov
or
mov
neg
les
(bad)
in
jmp
jmp
mov
(bad)
sub
call
sub
sbb
sbb
cmps
sub
outs
adc
mov
adc
sbb
xor
push
test
mov
sti
xchg
mov
scas
push
out
xchg
pop
stos
mov
cmp
loop
ds
call
xchg
or
ins
mov
adc
stos
into
jbe
adc
movs
or
sbb
cld
mov
dec
outs
dec
lods
in
sbb
xor
pop
sbb
pop
or
fisub
push
fcmovnu
adc
sbb
aam
pushf
bt
cmp
pushf
lea
ja
add
clc
bt
sub
inc
lea
rol
add
not
rcl
sbb
inc
mov
rol
sbb
mov
test
jmp
and
sub
clc
pop
and
in
mov
add
out
mov
jp
push
mov
mov
sub
(bad)
sub
pop
cmc
enter
add
mov
retf
push
and
inc
fprem
xchg
data16
popf
arpl
pop
repnz
push
jg
and
inc
jl
jns
mov
ret
sbb
jmp
xchg
ror
inc
(bad)
int3
jb
push
sub
scas
addr16
cld
push
cmps
pop
sbb
mov
adc
sbb
les
into
sbb
mov
push
mov
ins
hlt
inc
in
jbe
fs
mov
test
in
xor
adc
push
ins
ret
stc
mov
cdq
sbb
bound
adc
and
icebp
cmp
jecxz
mov
cmc
add
add
cmp
sahf
mov
or
adc
lock
add
pop
lock
mov
mov
dec
bnd
push
inc
jp
mov
push
dec
add
fsubp
jno
sub
push
fstp
dec
mov
cld
adc
push
or
(bad)
xchg
push
pop
popf
je
das
dec
ret
shl
scas
add
stos
xlat
or
cmp
jp
push
pop
scas
jmp
mov
shl
sbb
cmp
fwait
and
repz
mov
sti
iret
mov
xchg
stos
xchg
dec
dec
ja
aaa
cmp
aam
cdq
add
jno
imul
sar
push
ret
mov
ins
movs
add
addr16
test
cmp
adc
jmp
aam
or
pop
lods
inc
mov
push
ins
test
pop
sbb
into
test
ja
popf
or
and
and
mov
stos
jge
mov
adc
mov
into
into
add
and
xor
mov
mov
in
bsf
shl
bts
mov
lahf
push
rcr
sub
pusha
shl
clc
setns
mov
sbb
btc
aad
das
mov
not
neg
shl
mov
cwde
aaa
movsx
sar
mov
inc
mov
stc
pushf
call
lods
ret
inc
mov
push
dec
test
xor
imul
adc
jp
loop
add
cmp
sbb
in
and
mov
dec
pop
cmp
mov
jecxz
cwde
js
push
xor
ins
aam
sub
push
cmp
push
mov
out
(bad)
fcmovnbe
mov
xchg
cld
das
cmp
pop
sub
add
cmp
lods
push
jb
dec
rol
adc
icebp
jne
imul
sbb
fwait
mov
xchg
and
les
pop
imul
jecxz
and
ror
scas
xor
jae
jmp
cdq
add
leave
fnstcw
aas
pop
pop
aam
pop
loopne
pop
adc
mov
sub
xchg
stos
push
pusha
lea
jmp
inc
lea
push
lea
call
pusha
adc
pusha
push
lea
jnp
call
jmp
setbe
call
mov
cmp
pushf
pusha
test
mov
push
push
push
lea
je
pushf
bt
add
call
jmp
pop
add
xchg
cmp
or
mov
pop
in
ror
push
fdiv
mov
inc
repnz
or
je
leave
das
iret
pop
add
icebp
dec
retf
movlps
(bad)
sub
sbb
inc
mov
dec
and
jns
jmp
jne
push
retf
cmps
cmp
imul
pop
push
lods
or
ret
inc
push
push
inc
ins
icebp
ins
lea
mov
sbb
inc
jmp
sbb
mov
jmp
sbb
ror
mov
xchg
dec
xchg
jle
push
fxch
pushf
(bad)
lock
hlt
jmp
add
add
les
add
test
cmp
add
call
test
cmp
stc
cmp
jmp
stos
push
pushf
push
push
mov
call
pusha
dec
ja
inc
mov
test
popf
(bad)
clc
adc
sbb
(bad)
fst
add
xchg
outs
mov
popa
xchg
push
sahf
scas
adc
paddq
mov
jo
lods
cmp
mov
jp
mov
pop
push
xchg
in
mov
sub
ret
outs
std
aad
or
pop
add
jg
add
in
add
pop
test
or
push
fist
push
jne
imul
pop
mov
xchg
add
xor
retf
arpl
bound
and
xor
fs
mov
adc
dec
data16
fidiv
imul
xchg
xor
sub
xor
xor
add
je
outs
fs
gs
imul
add
(bad)
fwait
(bad)
jmp
inc
and
ret
repz
and
mov
jmp
addr16
pop
out
mov
sbb
clc
pop
push
repnz
aas
mov
cld
pushf
not
not
lods
out
jo
jg
add
or
or
int
mov
and
cmp
hlt
adc
xor
or
test
hlt
dec
shr
adc
test
pop
and
pop
push
mov
mov
mov
mov
in
out
nop
stos
pop
movs
call
jb
(bad)
jno
push
fs
push
ror
or
pop
mov
scas
cwde
inc
pop
inc
jo
fwait
cld
sub
xor
jle
mov
inc
adc
bound
inc
mov
inc
in
dec
data16
xchg
inc
retf
popa
call
sbb
(bad)
xor
out
adc
jg
idiv
lds
add
out
xchg
mov
push
std
or
ja
jl
aaa
ja
add
lock
inc
mov
int
jmp
hlt
jle
mov
pop
cwde
gs
mov
and
scas
xchg
sub
cmp
jp
dec
push
push
js
inc
pop
daa
inc
cwde
push
jbe
inc
(bad)
push
pop
mov
jp
fcomp
mov
push
loopne
xchg
adc
ds
rol
xchg
xchg
sub
imul
or
test
stc
pusha
cmp
call
(bad)
fld
aam
iret
mov
scas
pop
sbb
dec
(bad)
jnp
push
addr16
sti
inc
scas
push
push
sub
pop
jp
cwde
inc
inc
loopne
sub
add
stos
in
jle
fadd
or
lods
jae
mov
(bad)
scas
sahf
sti
lea
scas
sub
dec
mov
pop
xchg
retf
sbb
lea
iret
dec
add
cmp
jl
dec
sub
dec
shr
mov
push
jae
int
dec
fdiv
or
icebp
push
sub
mov
nop
ss
repz
mov
push
mov
pusha
cmp
rcr
jno
imul
jo
movs
lock
jecxz
cli
inc
iret
loop
not
bt
shr
pushf
pusha
lea
je
jmp
pusha
lea
ja
rcl
and
sub
shl
add
call
jnp
and
sbb
xchg
stos
inc
jp
push
add
adc
out
sub
xor
js
add
ins
movs
mov
sub
call
clc
mov
jb
push
loope
dec
sub
retf
enter
aaa
cli
repz
(bad)
push
in
pusha
dec
ss
xlat
jne
sbb
test
cmp
fcom
mov
lea
outs
retf
mov
cmps
inc
popa
div
pop
(bad)
mov
test
adc
mov
ret
push
out
stc
sbb
arpl
test
xor
sbb
push
or
xchg
pop
bnd
pop
mov
rcl
fsubrp
es
faddp
dec
fidiv
mov
pop
es
retf
sti
or
(bad)
aaa
pop
cld
pusha
call
inc
cmc
call
xchg
fstp
jge
sub
jmp
mov
dec
(bad)
dec
jnp
out
aaa
cli
add
clc
arpl
inc
imul
test
aaa
pop
fcomi
(bad)
mov
imul
ret
mov
add
dec
shr
xor
mov
lea
loop
xor
push
mov
pop
cli
stc
shl
mov
and
cmp
les
(bad)
push
sub
lods
dec
mov
outs
push
stos
push
sub
lock
cmp
mov
adc
xchg
xor
xlat
repnz
clc
xchg
clc
xchg
je
xor
pop
fsub
adc
cmp
or
jmp
mov
sub
shr
scas
iret
mov
pop
out
dec
xchg
inc
test
das
jecxz
sbb
or
fistp
div
mov
push
pushf
xchg
in
sub
nop
xor
fbld
int
shr
fcom
iret
mov
jns
add
cmp
mov
ja
and
jbe
pop
mov
loopne
scas
repnz
xor
rcr
add
sub
pop
adc
repnz
dec
push
lds
faddp
nop
pop
lods
mov
rcl
mov
pop
aam
mov
cdq
inc
test
dec
hlt
inc
je
jne
icebp
cdq
xor
inc
jg
sub
xor
xor
inc
(bad)
adc
aaa
sbb
lahf
mov
sub
mul
mov
add
retf
sti
add
and
mov
fwait
push
mov
call
pusha
xchg
pop
test
mov
daa
sub
aad
ins
mov
call
inc
test
popf
sub
mov
jbe
add
jl
repnz
inc
jnp
push
dec
ja
fucomi
push
push
pop
cmp
dec
daa
xchg
push
clc
jl
stc
shl
test
sbb
mov
or
repnz
dec
or
xchg
add
adc
push
mov
pop
or
adc
jmp
mov
je
adc
cmp
fs
ror
(bad)
lods
cli
add
pusha
jmp
(bad)
arpl
dec
(bad)
imul
cmp
lods
(bad)
mov
aad
in
movs
icebp
cwde
jb
mov
ret
push
jb
scas
push
mul
sti
popa
pop
mov
pushf
jmp
adc
push
enter
xchg
adc
jl
sbb
into
jne
fldcw
adc
jecxz
lea
adc
std
xor
stos
outs
sbb
pop
jmp
es
int3
xchg
lds
loop
jle
sub
repz
loop
pop
jmp
push
jnp
sub
aaa
mov
(bad)
repz
dec
jo
iret
jne
jno
enter
(bad)
pop
mov
inc
pusha
cmp
jmp
(bad)
mov
rol
gs
or
movs
test
push
or
fadd
cs
cmp
sub
aaa
cwde
xor
enter
pop
jge
or
test
gs
imul
lahf
xor
ficomp
rcl
mov
pop
or
inc
dec
psubusb
mov
dec
bnd
fsub
xor
cdq
mov
stc
mov
pushf
or
sub
mov
dec
neg
btr
setae
mov
push
pushf
sub
test
stc
repnz
pusha
pushf
push
lea
jne
stc
shl
mov
dec
sub
btc
lea
pusha
lea
clc
test
sub
pushf
push
pop
pusha
mov
jmp
mov
sub
mov
pop
adc
loope
(bad)
push
and
sar
je
pop
(bad)
jb
jne
or
lods
out
push
sbb
aam
rcr
outs
cld
push
mov
and
mov
add
cmp
mov
pop
xor
push
ret
sbb
cdq
mov
sub
loopne
add
dec
push
add
pushf
adc
pushf
pusha
lea
jmp
call
mul
sbb
in
inc
mov
loope
xchg
pop
aad
loope
cdq
jno
adc
call
retf
xchg
mov
imul
or
xchg
mov
pushf
ret
push
mov
lea
cwde
xor
dec
hlt
or
sub
cmp
push
outs
adc
xor
fs
pop
mov
icebp
lods
xchg
idiv
mov
push
mov
and
into
dec
mov
push
gs
mov
mov
outs
stos
popa
push
or
mov
xor
scas
rcl
shr
sbb
pop
adc
int3
dec
movs
jne
cmps
je
lods
push
jb
mov
bts
pop
inc
xor
mov
jmp
dec
adc
aas
xchg
(bad)
jmp
shr
jnp
sub
ret
ret
sbb
sub
mov
cmp
fmul
pop
sbb
out
xchg
xchg
js
in
mov
f2xm1
test
xchg
sar
out
xchg
jb
and
sub
xchg
in
xlat
fsub
addr16
push
mov
push
stos
imul
(bad)
fcomp
push
sbb
sbb
popa
not
(bad)
xchg
jmp
adc
stc
ror
pop
dec
cmp
cs
and
jp
in
std
push
clc
repnz
in
inc
rcr
les
retf
(bad)
into
and
pop
jmp
xchg
push
dec
mov
das
fdivr
test
sbb
lods
inc
dec
or
cmc
not
test
bt
shr
jmp
pushf
lea
ja
call
mov
not
call
mov
mov
jge
enter
cdq
mov
adc
fld
lods
or
popa
scas
sar
inc
jg
mov
jmp
adc
cmp
add
lods
and
add
cmps
xchg
push
sbb
fistp
scas
add
out
sar
aad
popf
cmp
(bad)
out
lods
or
pop
aam
in
xchg
jg
push
outs
sub
shr
push
push
loop
mov
loop
loop
nop
fidivr
jmp
adc
mov
fs
test
mov
or
mov
sar
push
adc
sub
sub
jb
(bad)
iret
test
and
into
call
inc
in
and
cmc
shl
bsr
xor
pushf
pop
lea
mov
pop
xchg
setge
pop
jmp
lea
jne
pusha
pushf
mov
jmp
push
mov
mov
pusha
mov
mov
pusha
lea
jmp
lea
cs
sub
ds
and
outs
xor
dec
nop
push
mov
add
pop
arpl
jo
inc
dec
xchg
test
out
iret
(bad)
mov
push
sti
lock
inc
mov
or
dec
mov
stos
fistp
fiadd
inc
movs
push
adc
in
in
movs
out
int
add
inc
pop
mov
ret
xor
push
aaa
xchg
sub
add
sub
fwait
popa
and
lods
add
fiadd
in
fist
mov
inc
sub
push
inc
popa
pusha
ins
imul
inc
stc
aas
mov
out
cmc
lahf
mov
movs
sahf
cdq
movs
lods
and
pop
pop
fsub
jb
stc
call
pusha
lea
je
call
ror
retf
sub
dec
lahf
xor
cmp
into
addr16
lahf
sahf
out
out
lahf
arpl
cmp
imul
push
dec
cdq
and
imul
xor
fst
retf
shl
retf
mov
cli
data16
inc
push
mov
pop
jne
mov
in
and
or
push
bound
jo
pop
and
inc
push
cmps
cmp
data16
ret
and
pop
sub
mov
xor
(bad)
dec
sbb
popa
hlt
inc
pop
jecxz
xchg
and
inc
xchg
ror
ss
jb
jo
adc
sahf
mov
aam
loope
jl
nop
stc
aad
pop
inc
loopne
call
mov
jne
mov
cmp
and
or
adc
sbb
int3
inc
dec
xchg
(bad)
jl
movs
ret
cmp
sbb
mov
sub
fiadd
xchg
inc
cdq
xor
xor
hlt
shr
dec
int
scas
jnp
mov
xchg
mov
mov
sar
adc
icebp
out
aas
jg
shl
push
fld
and
enter
ficomp
clc
lods
or
add
ins
loop
scas
pop
adc
scas
lods
ret
mov
mov
mov
and
ds
push
sbb
mov
aad
mov
rcr
mov
pop
pop
mov
add
fs
fs
jp
inc
int3
out
or
xchg
shr
push
mov
sub
call
mov
pop
cli
and
(bad)
and
xor
cmc
arpl
adc
ret
cmp
in
push
out
push
sub
jmp
fidiv
xchg
jmp
mov
sahf
mov
xor
cmps
pop
cmp
pop
popa
mov
add
mov
or
in
xchg
dec
clc
cmps
mov
out
fstp
adc
xor
pusha
les
adc
mov
nop
hlt
daa
clc
cwde
test
jge
lods
adc
enter
or
inc
cld
jbe
sub
shr
ins
inc
sbb
sub
jl
sub
xor
push
sub
inc
dec
loop
cmp
add
hlt
pop
dec
std
sar
push
iret
push
mov
mov
xor
jecxz
(bad)
dec
inc
sub
and
sbb
out
xchg
int3
mov
xchg
fs
sub
jmp
mov
fst
jnp
lahf
xchg
sar
dec
loop
dec
jmp
push
add
mov
jmp
dec
out
ja
dec
add
(bad)
or
ins
fwait
iret
ss
leave
lds
fsub
aam
fs
je
push
pushf
lea
jmp
mov
inc
cmp
push
clc
jmp
ja
outs
arpl
xor
fs
ins
add
mov
scas
inc
xchg
cld
pop
je
lahf
xchg
jp
sub
call
call
enter
xor
scas
ins
aad
loope
out
sbb
sub
add
int3
sar
hlt
dec
enter
(bad)
icebp
pop
dec
pcmpgtd
mov
cmp
jp
mov
shl
jmp
lods
mov
jb
mov
ror
dec
retf
jecxz
and
ja
retf
push
jg
sbb
mov
mov
sub
push
not
lea
or
cmc
fmul
xor
sar
or
call
daa
inc
sbb
movs
jmp
push
out
stos
cmps
sbb
jp
add
inc
mov
sbb
mov
push
das
fbstp
or
aad
mov
outs
jb
in
mov
retf
push
arpl
pop
inc
(bad)
xor
sub
jmp
jo
inc
mov
add
inc
daa
jp
dec
pop
mov
jl
movs
loop
arpl
jecxz
push
or
add
xor
or
ins
cmp
test
inc
addr16
mov
js
bound
mov
rol
(bad)
aad
das
fstp
popa
js
rol
loope
pushf
xchg
or
cmp
mov
jmp
mov
cmp
loopne
(bad)
in
or
pop
mov
sti
inc
std
push
cmps
inc
mov
imul
add
xor
popf
movs
movs
sbb
pop
push
sbb
push
jo
sub
cs
scas
arpl
fbstp
xchg
xor
push
jae
sub
in
imul
ins
and
and
push
jnp
lea
js
mov
pushf
nop
outs
push
out
dec
fs
shl
jmp
pop
pop
lea
stos
push
mov
test
inc
cdq
jnp
loop
xchg
xchg
cmp
outs
and
adc
call
pusha
popa
push
mov
and
mov
aas
enter
out
sub
sub
cmp
jmp
nop
sbb
test
ret
inc
test
dec
pop
or
stc
jl
xor
cld
push
jne
cmp
sbb
js
les
imul
lods
dec
and
mov
cwde
jne
dec
or
loop
ins
mov
add
push
rcr
cli
cld
(bad)
sbb
cmp
push
mov
out
fwait
(bad)
sti
xor
sub
aas
ror
pop
lahf
xor
pop
dec
jno
cwde
jmp
xchg
aas
cmp
pop
mov
or
popf
movs
ror
mov
jo
pop
sahf
pop
scas
scas
inc
and
movs
cld
xchg
jb
(bad)
mov
(bad)
add
popa
ins
cmp
pop
and
inc
cdq
mov
cld
lods
xchg
fild
bound
fcomp
aaa
or
inc
retf
xchg
pop
mov
xchg
ins
int3
scas
stos
ret
stos
mov
jo
aad
push
idiv
and
(bad)
jae
pushf
cmp
mov
jmp
loopne
imul
mov
bound
mov
pop
and
or
dec
je
fsubr
loopne
mov
mov
sar
ret
(bad)
dec
pop
pop
test
jle
dec
sbb
xchg
mov
jne
loopne
mov
lahf
rcr
ja
cld
push
mov
scas
fistp
sahf
jae
inc
dec
mov
ret
call
and
cdq
(bad)
hlt
cmps
cld
out
mov
pop
jge
inc
and
out
dec
inc
rol
clc
icebp
pop
out
xchg
jbe
psubusb
adc
les
sub
(bad)
push
cmps
cmp
mov
add
dec
pop
out
add
jno
std
ins
mov
jo
jge
clc
xchg
mov
lods
inc
cmp
adc
cmc
std
push
icebp
int3
cmp
xchg
clc
retf
popa
pop
in
cmc
rol
jl
clc
push
fwait
data16
inc
gs
jp
mov
les
adc
ins
ret
xchg
push
leave
mov
enter
inc
jp
pop
inc
jae
aas
mov
adc
test
add
push
jp
jbe
add
out
js
pop
pop
mov
in
cdq
test
repnz
mov
addr16
jecxz
fcomp
imul
or
in
mov
mov
popa
cmp
pop
mov
mov
adc
and
mov
fidiv
mov
lea
xor
mov
pusha
test
push
mov
mov
neg
bt
bt
push
rol
bt
pushf
stc
neg
jmp
movs
sbb
sub
mov
inc
div
jnp
sub
ja
call
mov
loopne
or
or
xor
jns
sbb
mov
sub
dec
popf
je
in
stos
jne
ins
popf
and
push
pop
push
pop
popf
sbb
rcr
ret
dec
pop
aad
ds
mov
xchg
adc
push
inc
data16
or
xor
sbb
fwait
out
or
mov
jge
sbb
imul
call
sub
data16
dec
imul
jmp
pop
mov
daa
mov
pop
dec
ss
jecxz
fwait
lods
ds
imul
inc
jns
ins
adc
nop
call
jge
inc
sub
sbb
xchg
in
mov
jge
or
pop
ror
aam
adc
xchg
fsubr
push
mov
rcr
sub
or
pop
addr16
or
mov
pop
data16
pushf
frstorw
cld
jmp
cmp
mov
ss
sbb
push
cmp
pop
lock
out
ss
and
(bad)
mul
dec
lock
sub
fiadd
inc
fist
mov
xchg
dec
jg
imul
jge
stc
jae
lahf
clc
mov
cmp
mov
push
xchg
scas
outs
mov
mov
stos
mov
pop
jmp
adc
(bad)
ja
sbb
pop
dec
and
mov
out
mov
sbb
and
mov
inc
je
repnz
jo
pop
stc
xchg
ja
xchg
sub
cs
call
(bad)
mov
imul
cmp
pop
test
pop
and
inc
xlat
movs
jg
dec
mov
cdq
xchg
cli
inc
pusha
imul
adc
pop
jno
cld
test
js
mov
add
sub
add
fbstp
into
add
cmp
and
sbb
adc
pop
addr16
xchg
add
clc
test
cmp
pusha
lea
jb
pusha
pushf
pusha
mov
lea
jmp
pusha
jmp
aad
and
mov
in
movs
xchg
lea
mov
int
dec
(bad)
cmp
fst
sub
rcl
mov
xchg
xor
imul
xchg
ins
add
das
daa
outs
clc
imul
dec
adc
sbb
dec
sbb
add
push
inc
xchg
sar
pop
inc
xor
out
mov
jmp
pop
cli
mov
dec
pusha
popf
mov
inc
mov
hlt
popf
inc
fnsave
out
xchg
das
mov
test
and
mov
add
and
inc
and
dec
dec
or
sub
jle
mov
pop
mov
pop
xor
cmc
ja
repz
call
add
add
mov
out
cmc
cmp
setno
cwde
not
not
lea
movsx
push
bswap
mov
jmp
inc
pop
out
imul
cld
xchg
mov
sbb
push
cmp
xchg
(bad)
out
popa
pop
sbb
aaa
adc
mov
jb
adc
fld
sbb
ror
ret
retf
outs
inc
imul
out
pop
add
mov
jmp
push
mov
enter
movs
sub
xor
jl
jbe
xor
pop
loope
xor
rcr
loope
and
sub
cld
jmp
xor
imul
pop
pusha
call
mov
pop
push
xchg
(bad)
mov
add
nop
mov
mov
sub
mov
mov
stos
out
ret
lahf
push
mov
mov
outs
add
aas
aaa
hlt
cmp
pop
imul
ret
cdq
xor
dec
mov
jmp
push
arpl
in
outs
je
push
dec
in
mov
add
mov
imul
pop
repz
jecxz
or
mov
jb
push
stc
icebp
ret
add
loope
fnsave
jl
dec
arpl
push
gs
xor
and
stos
jge
fsubr
sti
jle
pop
push
sub
test
mov
dec
xor
mov
sti
adc
int3
jmp
and
sub
dec
cmps
pop
bound
mov
lea
ja
mov
setle
call
pushf
lea
je
sub
push
bsr
cmp
mov
shrd
setl
jmp
clc
cmp
pushf
pushf
call
dec
(bad)
mov
scas
push
push
call
out
data16
push
xchg
mov
sub
call
out
data16
gs
daa
xor
mov
arpl
js
fistp
pop
stos
repnz
inc
mov
test
jecxz
cmps
lods
iret
jle
into
pop
mov
push
mov
fld
xchg
(bad)
out
cmp
mov
lods
das
imul
lfs
ret
mov
push
sub
das
fsub
aad
into
jno
mov
inc
sbb
loopne
(bad)
sub
and
and
clc
ss
fisub
or
jmp
cmp
mov
and
sti
adc
call
(bad)
dec
mov
cmc
cmp
push
lea
jne
adc
sub
add
clc
mov
bt
add
and
cmc
mov
clc
stc
test
push
jmp
call
mov
aam
adc
shr
jns
jmp
add
add
call
(bad)
mov
pop
out
push
mov
push
addr16
(bad)
pop
jb
or
hlt
mov
jle
add
out
xchg
lods
(bad)
mov
(bad)
sbb
sbb
ins
repz
cmc
jb
sbb
pop
sbb
lahf
xor
es
imul
popf
xchg
call
inc
mov
ftst
cmps
ds
ss
das
pop
pop
je
fiadd
lds
int3
mov
loopne
xchg
adc
pop
jne
jmp
ror
xchg
mov
clc
mov
test
test
ret
sbb
mov
out
push
lods
sbb
loope
popf
cmps
adc
xor
adc
or
xor
mov
(bad)
jg
dec
xchg
test
out
push
fs
nop
and
dec
es
addr16
cs
or
push
jmp
sbb
mul
fld
dec
jl
dec
stos
fild
int3
icebp
add
call
jmp
jp
sti
iret
mov
clc
sar
into
cmovl
xor
out
aam
enter
mov
xchg
pop
bound
add
adc
inc
jmp
cmps
mov
jg
(bad)
dec
push
jecxz
(bad)
call
pusha
mov
sub
lods
ss
jmp
in
xchg
(bad)
clc
xor
cld
adc
loopne
rol
aam
jle
dec
jne
shl
mov
mov
mov
stc
call
inc
mov
out
and
push
lock
lods
aad
popa
sub
mov
pop
mov
pop
cmps
pop
add
xor
pop
out
inc
xchg
jae
sbb
arpl
fidiv
push
icebp
mov
and
pop
xchg
cmp
sbb
and
shr
dec
pusha
push
repz
ss
mov
ret
outs
stos
adc
mov
call
xchg
call
pop
xchg
rcpps
jecxz
dec
sbb
(bad)
jnp
test
push
repz
lea
daa
xor
and
adc
imul
in
cwde
mov
cmp
(bad)
fcmovu
popa
sub
jl
in
mov
xchg
outs
mov
(bad)
(bad)
inc
mov
sub
mov
inc
dec
ja
aas
call
sbb
and
sub
into
loop
sub
cmp
addr16
xchg
stos
adc
adc
cld
add
sub
fwait
movs
fcomp
mov
in
mov
leave
inc
cdq
icebp
fld
clc
cmp
mov
es
inc
jne
cmp
pop
dec
jle
(bad)
loope
push
out
jmp
sub
cld
xchg
push
sub
push
sub
adc
call
enter
js
and
leave
xor
mov
in
bnd
mov
js
outs
out
sub
and
inc
idiv
xor
out
push
jmp
in
or
out
dec
loopne
inc
ds
sbb
pop
leave
xor
sar
sbb
jno
iret
mov
ror
sar
loope
xchg
push
stos
das
mov
out
(bad)
pop
cmps
push
call
loop
movs
xchg
mov
and
pop
and
(bad)
in
(bad)
sti
in
lahf
icebp
stos
jg
fisttp
and
(bad)
cdq
lock
jbe
push
or
dec
mov
jp
inc
jnp
mov
inc
xchg
lea
push
push
inc
cld
push
pop
loope
cmps
and
inc
stos
and
int3
push
mov
jg
jmp
add
lock
xor
sti
mov
das
loopne
div
adc
or
mov
shl
fist
pusha
or
inc
lea
or
mov
adc
cmp
jle
or
push
je
pop
fcmovnbe
mov
jl
mov
or
mov
idiv
mov
test
repnz
or
inc
xlat
sbb
repz
mov
mov
sahf
ror
mov
mov
jb
js
pushf
and
mov
(bad)
xchg
int3
mov
or
jmp
and
aas
rcl
xor
cmp
fist
lods
lock
dec
cmp
out
mov
les
dec
dec
jne
xor
mov
mov
adc
fxch
pushf
pop
sbb
push
(bad)
jge
repz
ins
inc
pop
shl
dec
and
inc
out
push
(bad)
xchg
addr16
cmp
ja
ja
jae
leave
popf
inc
inc
mov
lock
lock
imul
cmp
push
pushf
add
mov
push
mov
lea
jmp
je
stos
xchg
popa
mov
adc
add
clc
repnz
lods
mov
inc
push
aad
mov
mov
out
lods
adc
dec
mov
xchg
sub
pop
stos
loopne
or
or
inc
rol
sub
and
inc
jge
addr16
imul
es
loopne
adc
mov
shr
ffreep
mov
enter
shl
mov
jle
mov
call
pop
inc
jo
ja
sbb
push
dec
mov
mov
sub
(bad)
out
sbb
and
in
fnsave
mov
or
aas
inc
in
xor
mov
mov
pusha
lea
ja
jmp
add
xlat
pusha
mov
dec
add
and
bnd
shl
add
ds
fist
or
scas
sti
sbb
les
test
inc
es
int3
fisub
pop
movs
fistp
repnz
jle
jno
fild
mov
outs
stos
ret
pop
leave
push
xchg
xchg
(bad)
out
push
jle
push
sbb
iret
fcmovbe
in
stos
popa
and
mov
daa
dec
mov
push
arpl
sub
push
es
fist
inc
adc
pusha
cmp
dec
sar
aas
out
aad
mov
inc
xchg
sub
jmp
xchg
rcl
ds
js
push
arpl
jns
sar
add
add
pop
xor
std
fxch
xor
mov
addr16
leave
jge
mov
repnz
adc
xchg
jb
shr
sub
popf
jnp
push
add
mov
adc
scas
pushf
add
repnz
into
or
test
or
sti
imul
das
and
mov
push
sub
pushf
in
retf
shl
idiv
shl
add
add
xchg
fld
or
dec
movs
mov
adc
scas
mov
cmp
adc
xor
adc
cmps
sbb
add
cmp
pusha
out
and
cmp
adc
sub
test
pop
cmp
dec
idiv
test
jne
inc
add
outs
xor
push
dec
mov
jle
fcomi
sbb
popa
jg
fistp
jne
cmp
mov
sbb
sub
mov
aam
cmps
or
ror
jecxz
add
push
and
mov
push
ins
jb
jl
cmp
sub
push
(bad)
sub
pop
(bad)
dec
scas
pop
retf
xor
sti
and
repz
dec
pop
lock
out
push
sub
jecxz
cmps
out
shl
mov
adc
jecxz
mov
inc
mov
xor
cmps
repnz
cmp
push
pop
pop
test
ret
inc
adc
mov
fldcw
jle
dec
mov
scas
xor
rcr
mov
pop
jbe
call
xchg
sbb
rcl
sub
cld
add
mov
pushf
pop
mov
sub
enter
sub
movs
mov
jb
in
push
fsub
ja
mov
adc
(bad)
cmp
and
push
sbb
imul
mov
pushf
mov
rep
call
lea
ja
bt
jmp
cwde
int3
movs
aam
xchg
fwait
(bad)
add
xchg
gs
cdq
hlt
rcr
stc
cwde
call
(bad)
mov
mov
cmc
xchg
out
xchg
scas
popf
and
mov
mov
stc
sti
and
cwde
mov
adc
push
in
xor
cwde
(bad)
aad
sahf
shl
clc
(bad)
std
add
lods
xchg
and
sbb
sahf
call
jo
lahf
mov
mov
out
movs
mov
and
pop
ins
enter
popf
jl
and
sbb
jecxz
idiv
stc
test
mov
mov
add
sahf
fstp
imul
clc
cmps
out
fwait
xchg
push
pushf
stc
fcmovb
ret
push
pusha
pop
fdivr
imul
xchg
pusha
in
aad
fbld
mov
(bad)
cmc
lds
or
inc
mov
mov
movs
mov
mov
movs
call
test
mov
(bad)
push
int3
out
xor
(bad)
out
rep
lods
jae
pusha
aam
mov
inc
ret
movs
aam
mov
scas
or
movs
out
xchg
sti
movs
jmp
push
add
(bad)
in
out
stos
call
movs
sbb
push
or
(bad)
popf
scas
aaa
mov
les
pop
cmps
add
mov
sbb
in
cmp
lods
and
jo
nop
and
fisubr
sub
mov
inc
aam
jno
xor
sahf
cdq
test
fdiv
movs
sbb
pop
adc
sub
mov
in
cmp
pushf
push
and
mov
ja
movs
pop
iret
inc
test
movs
cdq
add
ss
clc
and
lods
jg
lods
cmp
xchg
lods
sbb
xor
pop
push
dec
sahf
mov
call
mov
xchg
rcl
jbe
pop
push
int3
xchg
out
jg
in
pusha
outs
daa
lods
daa
movs
stos
popa
jns
xchg
mov
fneni(8087
or
sbb
vrsqrtps
xchg
pop
and
pusha
mov
stos
jmp
sbb
inc
mov
out
push
je
jg
loop
je
pushf
into
cld
fcomp
cmp
pop
xchg
pop
sbb
cdq
(bad)
push
repnz
pop
xor
xchg
mov
popw
push
xchg
push
and
fcom
mov
call
nop
ja
movs
xchg
call
in
mov
es
lods
sub
mov
in
loopne
cwde
mov
sub
sbb
mov
ss
xchg
sahf
nop
in
mov
aaa
xor
jmp
pop
mov
bound
icebp
inc
mov
mov
and
iret
test
mov
adc
dec
xlat
outs
and
cmp
xchg
fisub
sahf
iret
pop
mov
mov
stos
mov
(bad)
jg
jbe
test
jmp
cmc
cld
out
icebp
repz
add
mov
jl
push
sub
mov
sub
xor
jl
jmp
div
mov
dec
xchg
int3
sub
mov
push
or
pop
pop
int
jg
out
or
mov
mov
mov
sahf
rcr
sbb
inc
mov
jge
test
mov
push
mov
mov
iret
pop
daa
test
outs
sbb
adc
call
cmp
les
cwde
(bad)
xchg
add
clc
mov
jmp
sbb
mov
addr16
cmps
mov
lods
cmps
ficom
js
pop
xchg
mov
lea
clc
pop
sbb
pop
xlat
in
cmc
inc
mov
pop
or
mov
adc
xor
iret
sahf
or
mov
shl
or
pop
push
ja
out
and
mov
mov
xchg
pop
mov
mov
cmps
jg
fld
or
js
xchg
and
(bad)
push
leave
xchg
xchg
or
enter
test
jle
or
xchg
sahf
pop
cdq
icebp
and
mov
or
and
jae
in
in
or
cmp
cwde
and
in
pushf
outs
mov
sbb
sub
sbb
sti
mov
pop
fs
adc
cmp
mov
nop
out
sbb
mov
fimul
shl
repnz
mov
ror
xchg
iret
jno
mov
mov
cmps
mov
in
movs
fwait
mov
mov
clc
jg
retf
(bad)
dec
push
sbb
mov
ins
shl
xlat
jp
enter
xchg
ds
pop
and
stc
mov
int3
sbb
mov
pop
add
push
adc
xchg
pop
push
fs
daa
(bad)
fcom
das
cmp
and
jl
hlt
mov
adc
sbb
push
sub
icebp
push
rcl
mov
imul
jl
imul
xchg
(bad)
loope
sbb
ror
xor
pop
aad
pop
jl
nop
fadd
mov
pusha
inc
dec
sub
xlat
pop
sar
mov
mov
sti
in
das
sahf
retf
movs
push
fdiv
cs
mov
xlat
daa
inc
xchg
pop
test
cmp
or
aaa
mov
jmp
jbe
mov
outs
es
dec
call
call
es
or
stos
pop
loop
cmps
jl
xchg
leave
add
loop
xor
jmp
(bad)
mov
xor
stos
lock
mov
or
sbb
ins
imul
cmp
(bad)
pop
int3
cmp
shld
aam
gs
out
sbb
sbb
mov
fisub
pop
rcl
and
sub
pop
ja
xchg
retf
outs
jp
lahf
iret
jb
out
xchg
add
push
mov
ins
pusha
mov
retf
aas
pop
lock
outs
mov
push
popa
inc
(bad)
int
sbb
movs
pushf
inc
mov
test
(bad)
shl
setnp
xor
xor
cmps
cld
jb
xchg
(bad)
xchg
(bad)
sub
aad
int
xchg
adc
fnstcw
stos
adc
sub
and
push
push
sahf
pushf
mov
and
mov
adc
mov
rcl
lods
call
push
test
xchg
push
push
mov
shl
xchg
xchg
mov
aaa
movs
push
test
inc
xchg
xor
out
in
and
sbb
dec
push
jge
xchg
mov
jg
xor
ret
pop
jae
loopne
movs
mov
data16
mov
sbb
je
cmp
mov
mov
loop
aaa
imul
cmc
xchg
sbb
(bad)
and
test
dec
or
mov
stos
pop
or
outs
pop
(bad)
scas
inc
imul
adc
mov
sbb
out
xor
out
fcomp
js
test
lahf
fcomp
int3
xor
xchg
stos
sbb
xchg
pop
pop
push
js
out
imul
jg
mov
lods
rcl
mov
inc
fistp
mov
jg
dec
fisubr
mov
and
adc
jl
pop
xchg
out
and
pop
in
pop
jge
mov
mov
adc
movs
adc
(bad)
adc
gs
dec
scas
jge
mov
(bad)
adc
sbb
mov
call
loope
inc
les
stos
xchg
test
xchg
mov
pop
xchg
mov
aad
cmps
ficomp
pop
mov
inc
pushf
mov
sub
mov
push
call
xchg
pop
(bad)
movs
mov
fisubr
mov
sbb
xchg
ja
mov
ficom
iret
or
mov
call
push
jmp
ins
(bad)
fwait
cwde
xchg
cmp
mov
inc
ins
mov
cmps
icebp
xchg
retf
in
stc
xchg
pushf
pop
stos
pop
mov
cmp
inc
sub
popf
pop
and
ins
inc
dec
and
fst
stc
in
cmc
(bad)
jl
sbb
xor
mov
xlat
imul
test
jb
xchg
cdq
jecxz
add
jg
repz
xchg
xchg
and
add
inc
add
or
imul
cdq
xor
pop
lods
sahf
and
xor
mov
mov
ret
daa
adc
push
sbb
mov
jae
pop
xor
xchg
pop
pop
jl
loope
lods
adc
retf
sbb
loope
cmps
mov
clc
adc
push
lock
ss
hlt
xor
(bad)
xlat
cmps
cmps
ins
ds
nop
rcr
adc
les
(bad)
mov
pop
(bad)
ret
push
retf
test
adc
popf
ficomp
fwait
sbb
xor
push
gs
cmps
fwait
mov
sub
mov
and
jbe
test
fwait
and
mov
jl
in
xor
in
imul
mov
loope
pushf
dec
mov
iret
ins
mov
cmps
loopne
ins
xchg
fistp
xchg
fdivr
mov
stos
cld
sub
dec
add
stc
add
rcl
pop
inc
xchg
xchg
fsub
push
fdiv
(bad)
xchg
loop
pop
jle
test
imul
out
pop
mov
pusha
and
(bad)
mov
sbb
mov
and
dec
aam
rcl
in
dec
cmps
call
or
push
leave
xor
push
test
lea
pushf
mov
and
mov
mov
sbb
adc
es
and
cmc
jl
stos
mov
and
jg
push
stos
mov
das
imul
jge
sbb
iret
inc
fdivr
idiv
pop
xlat
and
cmps
les
xchg
fmul
mov
inc
mov
rol
jg
cmp
fcomp
inc
lds
leave
movs
clc
call
es
sbb
xchg
xchg
and
idiv
rcr
cld
mov
stc
and
enter
xchg
or
inc
or
jnp
popf
adc
sahf
cmp
repnz
adc
mov
fidiv
xchg
pop
cli
stc
(bad)
cwde
outs
cdq
dec
dec
push
(bad)
sbb
add
sbb
fisttp
push
inc
fcom
adc
or
sub
jg
mov
rcr
mov
and
sahf
fsub
and
call
icebp
out
mov
push
aaa
mov
mov
cdq
jl
lods
popf
and
push
cdq
adc
mov
mov
mov
mov
addr16
(bad)
and
aad
ins
in
mov
not
jecxz
scas
pop
jmp
mov
lock
mov
cli
mov
xchg
push
fs
fwait
cmps
jge
add
popa
sbb
inc
jmp
in
mov
mov
popf
lods
jge
lahf
xchg
mov
ss
loope
test
cdq
fs
xchg
or
fstp
test
cmp
pushf
dec
sbb
add
rcr
fdivr
lods
and
rcl
mov
or
sbb
rcr
imul
test
adc
adc
jae
add
test
xchg
pop
movs
mov
or
cwde
pop
nop
mov
xchg
retf
pop
pushf
xchg
cmp
pop
pop
or
stos
lahf
adc
pushf
mov
push
and
push
mov
test
mov
cmp
sar
sbb
fs
push
ds
cmc
cmp
pop
jl
xor
xchg
pop
cdq
pop
iret
xchg
sbb
mov
movs
pop
push
imul
xchg
stos
or
sbb
cmps
or
mov
stos
mov
and
jb
mov
xchg
lods
ins
mov
jb
pop
xor
fsub
scas
jno
jb
in
or
pushf
and
and
or
loopne
repnz
in
sbb
clc
aad
xor
cld
add
jns
mov
and
retf
cmp
je
sub
sbb
ss
repnz
inc
cmps
loope
pop
push
(bad)
mov
pop
adc
outs
je
jns
test
xlat
sbb
mov
fistp
fdiv
mov
ds
push
call
and
ins
repz
cdq
sbb
pusha
pop
popf
xor
jge
sub
pusha
cmp
(bad)
cmp
mov
xchg
movs
push
cmps
jl
xchg
and
sbb
sbb
sbb
retf
and
push
loopne
pop
clc
mov
test
xchg
int3
ret
popf
mov
pop
and
stos
movs
xchg
xor
mov
mov
sbb
xchg
jns
inc
fdiv
sbb
lahf
je
jl
or
xchg
(bad)
(bad)
xor
jp
aad
and
xchg
sbb
sbb
(bad)
xor
lods
lods
in
pop
in
movs
in
popf
xor
lods
loopne
push
call
or
test
aad
les
jg
sar
pop
stc
movs
scas
mov
and
xor
mov
pop
dec
mov
and
pop
adc
cmc
aam
push
fdiv
or
out
mov
scas
pop
add
inc
(bad)
(bad)
cmc
ds
push
fiadd
sub
test
popa
mov
adc
ja
cmps
rcr
sbb
mov
fcomp
(bad)
lods
or
sub
sbb
(bad)
mov
xchg
cmps
pop
je
out
scas
mov
test
js
sub
mov
lds
ss
cld
lods
jle
pop
aad
jmp
xor
sahf
call
int
cwde
adc
jecxz
test
push
xor
xchg
jg
dec
jle
and
minps
jl
fwait
pop
push
push
fstp
mov
int
inc
ror
stos
je
and
push
fst
mov
adc
mov
cmps
or
ret
xchg
cdq
or
xchg
sbb
jne
inc
ins
push
fmul
lds
nop
into
adc
in
movs
out
scas
in
cmp
call
inc
and
push
cmp
xchg
fs
cwde
shl
mov
shl
xchg
xchg
mov
jg
(bad)
mov
pop
(bad)
and
shl
mov
jb
cdq
fs
rcr
add
in
lods
into
push
lock
or
sub
or
(bad)
mov
add
mov
test
push
or
test
xlat
fisubr
pop
jne
mov
hlt
ret
into
clc
gs
ret
(bad)
call
mov
mov
les
and
nop
test
add
mov
pusha
xchg
fidivr
stos
or
fadd
and
aad
les
xor
mov
(bad)
sub
fmul
xor
push
mov
mov
cdq
fbstp
cmp
pusha
push
aad
dec
movs
hlt
pusha
and
jnp
call
stos
cld
or
pushf
fs
xchg
loop
add
push
shufps
call
inc
lahf
sub
in
out
cs
shl
into
push
call
adc
pop
sbb
sbb
mov
mov
nop
dec
inc
rcl
cwde
push
movs
aam
jae
mov
mov
mov
cwde
ret
mov
stc
call
js
neg
test
xor
jae
pop
inc
imul
xchg
inc
fcomp
xor
shr
fwait
pop
je
lods
mov
dec
(bad)
sti
adc
push
dec
xchg
daa
push
push
mov
aaa
clc
inc
xlat
mov
ret
mov
jne
inc
xchg
test
or
cmps
xchg
out
test
sti
(bad)
lahf
mov
popf
or
xor
fsubr
cmp
xchg
dec
push
(bad)
jl
sbb
pop
and
enter
sub
push
fwait
iret
push
data16
ficom
or
mov
adc
shl
mov
pop
shr
pop
push
sahf
aad
jne
cmp
enter
into
pop
in
jl
cdq
pushf
(bad)
aam
jne
js
enter
sub
xchg
sbb
or
scas
int
or
loop
test
xor
mov
mov
jg
mov
cwde
jp
xchg
jp
xchg
or
push
pushf
into
sahf
or
(bad)
call
fidiv
dec
mov
pop
xor
lds
dec
inc
int3
push
movs
aaa
xchg
test
mov
mov
xchg
pop
lds
pop
sbb
xchg
xchg
push
je
cli
mov
popf
xchg
in
cmps
xchg
sbb
repz
lds
daa
(bad)
scas
mov
sbb
call
jbe
fs
sbb
shl
cs
add
hlt
pusha
xchg
mov
adc
mov
mov
mov
sahf
mov
fisttp
out
mov
les
cmps
in
mov
fcomp
push
mov
rcl
or
and
cwde
int
push
retf
enter
xchg
popa
or
jg
lea
mov
or
mov
mov
pop
xlat
xor
push
cmp
sbb
push
xchg
mov
gs
movs
movs
xchg
cdq
or
sahf
pop
inc
pop
jg
cwde
jmp
in
lds
dec
movs
pop
sub
cmp
xchg
push
mov
mov
or
popf
inc
inc
pushf
test
xchg
adc
mov
sar
adc
pop
jbe
push
adc
inc
ret
jb
jl
mov
mov
jns
push
cwde
or
inc
js
xlat
mov
les
fnstsw
lea
sbb
or
jg
mov
cmp
(bad)
test
ins
sub
nop
adc
jmp
sahf
mov
sbb
aam
pop
cdq
sahf
movs
mov
in
mov
cmps
xchg
adc
sub
les
mov
aam
sub
dec
xlat
mov
movs
cmp
mov
sbb
mov
dec
rcr
les
and
adc
ret
inc
fxch
mov
into
mov
lahf
jb
xchg
jl
cwde
mov
push
shl
or
aad
adc
stos
dec
mov
xchg
and
add
or
sbb
adc
jmp
sahf
shr
xor
scas
push
addr16
xor
test
cmc
in
and
pop
mov
and
arpl
aam
mov
and
in
aam
popf
sub
lock
lahf
dec
retf
fwait
and
sti
cwde
popa
int
xchg
neg
mov
push
mov
add
mov
std
mov
arpl
dec
jl
test
das
pop
stos
aas
inc
adc
xchg
je
jge
pop
fisttp
push
cmp
ds
jp
mov
cmps
(bad)
(bad)
jmp
mov
je
adc
pop
shl
sub
and
ds
in
and
(bad)
lock
nop
mov
dec
adc
mov
fmul
mov
adc
mov
ja
pop
pop
mov
fwait
fs
xchg
jg
fidiv
div
xor
jo
ror
ficomp
mov
lods
ja
adc
sbb
pop
xchg
fsub
js
daa
int
leave
cmps
dec
inc
adc
es
xchg
cmp
and
retf
cmc
adc
xchg
mov
sti
mov
pop
hlt
jno
add
sub
pop
mov
imul
cmovl
call
hlt
or
mov
xchg
lods
jbe
mov
inc
mov
sahf
fst
fild
out
fbld
cwde
mov
xor
rol
enter
(bad)
fistp
or
loope
loopne
lds
and
in
mov
jne
pusha
mov
(bad)
mov
and
jg
cli
xor
push
xchg
mov
shr
mov
ret
mov
push
push
popf
mov
(bad)
jmp
xchg
out
lock
add
add
rol
clc
mov
stc
pop
add
std
test
call
xchg
jmp
jmp
outs
ja
ins
shl
jge
mov
arpl
xor
sub
mov
lds
push
mov
and
and
mov
stos
pushf
iret
fidiv
mov
fwait
adc
push
cwde
fisttp
mov
(bad)
jo
lds
out
ins
push
jno
sub
mov
cmps
out
dec
mov
adc
addr16
cmc
ror
int3
sbb
jl
dec
and
mov
fbld
inc
lods
test
push
inc
movs
(bad)
mov
inc
add
fwait
inc
mov
pushf
stos
xchg
in
daa
inc
sbb
push
fild
in
push
jge
fld
mov
fs
aas
mov
in
out
jo
jmp
nop
scas
jg
or
and
loop
mov
test
enter
mov
retf
iret
fnstenv
sub
pop
jne
jg
push
inc
or
xchg
sub
sbb
jge
popf
sbb
lea
scas
mov
xchg
push
fwait
mov
daa
mov
jne
add
mov
pop
movs
jge
mov
or
std
xchg
adc
mov
ret
test
cmp
mul
xlat
test
and
pop
jmp
jle
cwde
jg
and
cdq
gs
xor
push
xchg
cmps
jmp
es
mov
cs
fmul
jl
retfw
cwde
jmp
cdq
out
push
push
jecxz
js
push
dec
cmps
mov
mov
lods
iret
les
cmp
jnp
add
sbb
add
pop
xor
jo
fidivr
lock
mov
jl
dec
sbb
pop
inc
xchg
inc
sbb
push
stos
sbb
int
mov
sub
adc
or
inc
in
xor
adc
fs
mov
xchg
pop
pop
xchg
xchg
inc
jne
in
mov
mov
in
xchg
push
mov
fist
pusha
fdiv
mov
in
or
dec
jp
jge
(bad)
pop
push
add
mov
and
push
cmp
dec
frstor
adc
movs
and
out
std
popf
fwait
xchg
stos
sbb
sahf
(bad)
in
add
inc
cdq
cmps
sbb
jp
pop
cmc
test
pop
sub
jns
push
scas
ss
cmc
mov
push
push
push
loop
int3
ins
adc
mov
or
lods
jmp
dec
jne
lock
shl
not
ficom
in
(bad)
jecxz
mov
lods
adc
(bad)
xor
jg
outs
call
in
adc
out
out
out
scas
adc
cmp
cmp
lods
xchg
std
pushf
pop
aad
jno
mov
cdq
fwait
sahf
out
je
jge
loop
cmps
dec
lods
das
dec
mov
inc
adc
loop
imul
add
pop
movs
xchg
out
push
inc
aam
js
es
cmp
xchg
sub
in
adc
adc
ror
xchg
or
jae
sbb
aam
stos
in
imul
(bad)
xchg
mov
js
push
cdq
pushf
in
sbb
call
lods
clc
cwde
enter
sbb
pop
push
cmp
in
push
fwait
in
jge
push
pushf
pop
xor
lods
pop
aad
mov
int
lods
mov
mov
test
lahf
mov
enter
cmp
(bad)
cmp
in
and
pop
cmps
out
mov
jbe
out
in
mov
movs
pop
pop
ja
dec
or
mov
aam
fcom
repz
pop
in
in
xchg
fsubr
sbb
aaa
fs
mov
xchg
jo
(bad)
test
mov
test
xchg
int
mov
mov
add
jne
or
mov
fist
jl
outs
sub
(bad)
in
or
mov
push
and
pop
mov
xor
mov
cmps
test
aaa
xchg
dec
jl
fst
movs
test
add
fcomp
xor
xchg
and
cld
pushf
int3
xlat
jmp
cmp
cmp
sub
pop
add
repz
pop
fild
enter
push
cdq
jl
xchg
adc
jb
xlat
sbb
mov
pushf
aad
jge
call
mov
pop
or
pushf
mov
lock
inc
lods
xor
pushf
sub
in
cdq
and
cmps
xchg
jecxz
xlat
lahf
cmp
(bad)
aad
cwde
ins
iret
jecxz
or
jmp
dec
push
fdiv
rol
jo
std
pop
or
pushf
fild
lock
es
sbb
sub
aad
inc
add
cmps
jl
xchg
int
loop
jmp
movs
jns
xor
pop
jb
inc
ins
clc
add
sbb
pop
fsubr
and
in
out
mov
int
push
dec
loope
push
jecxz
ja
jl
nop
mov
mov
retf
mov
mov
mov
pushf
daa
and
cmp
pop
(bad)
mov
adc
(bad)
pushf
(bad)
push
jl
jmp
test
fbld
sbb
jmp
jmp
shl
movs
mov
les
dec
and
adc
sbb
(bad)
mov
mov
sahf
push
ret
xor
inc
push
popa
(bad)
fs
cmps
movs
in
sub
sbb
std
mov
(bad)
ins
or
clc
add
sbb
lahf
jbe
lds
in
repnz
pusha
inc
enter
push
mov
push
cmc
les
sbb
ror
sub
mov
rcr
dec
mov
fcom
add
jl
push
retf
nop
out
shr
mov
daa
sbb
call
mov
sar
into
mov
popa
mov
arpl
stos
and
cmps
daa
xor
sahf
test
call
push
cmp
out
jl
sbb
sti
sbb
mov
jl
push
rol
int3
mov
movs
retf
sbb
push
jnp
adc
and
xlat
lods
or
dec
pop
sbb
inc
lods
fsub
mov
add
lock
dec
ins
mov
in
add
or
xor
fst
neg
mov
fstp
jns
movq
aaa
enter
mov
fcomp
loope
pop
pop
shl
pop
hlt
ja
mov
lods
xchg
or
cmps
adc
add
push
and
fsub
cwde
inc
leave
movs
inc
shl
outs
adc
cmps
fbstp
fdiv
xor
mul
or
push
jg
jge
jle
repnz
loop
sbb
retf
or
sbb
xchg
push
movs
mov
adc
ret
(bad)
sahf
mov
mov
adc
in
(bad)
mov
cdq
clc
jg
pushf
pop
shr
aaa
int3
dec
scas
adc
(bad)
rcr
pop
cdq
enter
cmc
mov
push
rcr
rol
jnp
and
pop
call
jl
mov
(bad)
xor
repz
or
xchg
push
pushf
sbb
mov
mov
inc
dec
(bad)
jno
pop
push
push
outs
cmc
in
sub
mov
test
and
fldcw
test
sahf
inc
mov
cwde
shl
es
mov
lods
ins
call
(bad)
cmc
jle
rol
mov
mov
aam
inc
rep
dec
adc
call
rol
div
in
inc
fcom
mov
jmp
adc
jno
and
mov
xchg
or
aaa
mov
(bad)
adc
dec
xchg
stos
xchg
inc
xor
mov
pop
rcl
movs
sti
mov
popa
push
enter
push
loopne
pop
(bad)
test
ds
cmps
(bad)
mov
(bad)
popa
dec
and
push
jmp
mov
rcr
xor
aas
lahf
sub
xor
sbb
cwde
xchg
movs
jl
ret
(bad)
movs
test
test
add
or
imul
xchg
or
movs
shl
jecxz
out
jae
iretw
call
dec
jb
cmp
mov
or
adc
cmp
or
mov
neg
dec
mov
(bad)
mov
jge
call
aaa
arpl
jl
lods
cwde
and
leave
call
or
pop
call
frstor
fisub
pop
jl
mov
cld
test
movs
out
sbb
js
movs
adc
cmps
jl
jnp
fldlg2
sbb
xchg
sahf
fyl2x
pusha
es
inc
loopne
ret
lea
xchg
ret
fdiv
int3
sbb
mov
xchg
scas
pushf
out
pushf
mov
ror
dec
cdq
jmp
mov
outs
fidiv
fcomp
rcl
test
in
(bad)
dec
lods
pop
inc
in
or
push
cmps
pushf
jmp
mov
repnz
outs
xor
test
mov
scas
ins
xor
lods
sbb
xchg
test
jg
ins
or
sbb
adc
cmps
fcomp
push
push
adc
movs
test
xchg
imul
mov
fcom
pushf
js
mov
fst
mov
dec
dec
(bad)
fisub
xor
arpl
inc
lea
push
test
jl
jmp
mov
es
iret
and
cwde
fstp
cmps
xor
push
pop
(bad)
ins
jmp
shl
push
int
ficomp
pop
jg
and
xchg
adc
movs
adc
daa
dec
adc
fistp
pop
jl
pop
mov
sti
outs
mov
mov
pop
jne
and
mov
les
adc
ror
out
sbb
jl
cmp
pop
out
mov
into
sahf
jmp
clc
sti
sahf
xchg
mov
mov
xchg
sbb
sbb
clc
mov
shl
iret
popa
div
cmc
call
enter
js
xchg
cmp
jmp
shl
push
mov
mov
xchg
xchg
test
jp
mov
hlt
cdq
mov
nop
pop
add
inc
jo
out
nop
hlt
pop
movs
int
ins
adc
pushf
aam
stos
jl
jns
ficomp
pop
std
cmp
not
nop
xchg
jmp
shl
sbb
dec
mov
or
xchg
mov
bound
pop
cmp
js
loop
mov
jns
mov
ret
imul
fwait
pushf
mov
test
(bad)
mov
ror
movs
into
lock
scas
shl
fsubr
addr16
and
popf
xlat
nop
xchg
ficomp
popa
pop
leave
and
es
lods
ins
pop
fbstp
in
xchg
out
mov
enter
fcom
xchg
sub
mov
sbb
stos
mov
cmp
(bad)
cmp
aam
loopne
cmc
test
or
mov
adc
xchg
mov
mov
mov
arpl
cmp
cmp
or
sbb
push
xor
pop
xchg
retf
xchg
mov
jg
xchg
test
pop
pop
fmul
xor
aam
xchg
bound
push
ret
jge
pop
or
mov
fdivr
in
out
daa
pop
in
and
add
popf
int
cdq
xchg
and
loopne
(bad)
call
fstp
jmp
mov
xchg
push
out
jle
retf
int
mov
mov
(bad)
loop
sbb
xor
das
out
xchg
dec
test
shl
mov
mov
xchg
or
in
call
mov
cmc
or
out
dec
sub
xor
inc
test
in
lock
lods
daa
cmps
imul
iret
xchg
add
dec
mov
pusha
ret
loop
(bad)
out
xchg
pop
pcmpeqw
std
es
mov
adc
push
ja
in
cmps
cli
fisttp
sbb
aam
aad
mov
out
mov
jge
adc
test
pushf
and
push
rcl
ficom
scas
int
popf
adc
test
dec
cmps
adc
cmp
pop
jg
lds
jns
ss
cmps
movs
cmp
inc
add
jl
xchg
fdivr
fdiv
les
hlt
sub
mov
mov
test
je
xchg
cmps
xchg
cwde
cdq
cmp
jbe
mov
mov
enter
jmp
cmps
out
xchg
sbb
test
nop
call
jle
test
mov
pop
mov
call
and
pop
dec
inc
stos
jl
inc
xchg
adc
sub
fcomp
aam
loope
xchg
push
pop
jecxz
pop
and
fimul
lods
push
call
scas
movs
sbb
inc
fdiv
fdivr
loopne
xor
add
pushf
push
and
or
cmps
xor
fmul
hlt
inc
mov
or
mov
or
popf
sub
loopne
or
adc
and
stos
add
pop
adc
or
ror
(bad)
(bad)
dec
pop
inc
pop
int
ret
popf
es
and
in
lea
dec
scas
mov
js
pusha
aad
add
mov
mov
pop
out
movs
mov
cmps
mov
ret
in
inc
sub
mov
pop
mov
jl
pop
add
sar
mov
inc
retf
fadd
stc
out
cmc
mov
bound
in
xchg
sbb
sbb
lea
int3
int
sbb
ss
cmps
sbb
and
lea
mov
push
and
sahf
dec
pop
cmp
push
out
inc
(bad)
sbb
mov
sbb
cmps
xchg
fsub
call
xchg
dec
ss
popf
cmps
inc
xor
jl
loopne
icebp
push
fdiv
aad
xlat
enter
lahf
sbb
or
lds
out
xor
std
stos
into
and
mov
pop
jl
push
icebp
popf
(bad)
xchg
adc
imul
(bad)
push
pop
xchg
fucom
xchg
cmp
iret
mov
pop
hlt
stos
loope
lahf
and
ret
add
xor
dec
or
mov
in
jns
inc
cwde
adc
mov
xchg
pop
inc
sbb
pushf
jae
(bad)
cmp
lea
cmp
in
lods
in
jecxz
aaa
mov
pop
fsubr
cmp
mov
xor
push
fsubrp
xchg
fst
and
movs
jne
adc
data16
jne
fisubr
sub
lahf
lahf
jp
rcl
dec
pop
test
push
mov
mov
xchg
and
pop
jb
aaa
lahf
aaa
mov
mov
ja
ja
ja
ja
jnp
and
mov
(bad)
in
push
mov
fldcw
pushf
xchg
mov
cmp
(bad)
imul
adc
xchg
lock
loopne
aad
cmps
jl
inc
or
fnstsw
xor
xchg
fldcw
cmp
sbb
lahf
std
cs
enter
mov
jmp
test
jl
mov
je
lea
xor
mov
mov
out
lods
xor
pop
movs
pop
push
jge
(bad)
mov
mov
xor
pop
movs
lea
mov
mov
dec
pusha
(bad)
xchg
jg
mov
add
xor
mov
fcom
std
push
int3
jg
xor
cwde
jl
mov
mov
rcl
test
sub
push
cwde
aaa
retf
jo
mov
sbb
repz
mov
test
sbb
jno
dec
cmp
ret
jecxz
out
ss
rcr
and
add
mov
adc
xchg
fadd
fisttp
rcl
push
mov
adc
mov
mov
sbb
fwait
enter
test
mov
and
test
repnz
adc
lods
aaa
jecxz
in
pushf
cwde
mov
push
xchg
test
cdq
pop
or
pop
xchg
sahf
test
adc
sbb
shl
mov
fstp
call
stos
cmps
aam
sbb
sbb
sub
les
aam
xchg
repz
jg
cmp
add
lods
in
mov
mov
push
or
mov
loopne
push
popf
cmp
jg
jmp
lods
fcmovb
divps
mov
fst
movs
aam
cmps
mov
and
dec
je
loope
(bad)
sbb
sahf
push
in
jg
jmp
pop
loop
les
mov
mov
xlat
mov
movs
cmc
pushf
adc
(bad)
and
ins
xor
cmc
jl
xchg
scas
sub
and
stos
movs
outs
mov
sahf
jl
xchg
test
movs
pop
sbb
cli
ja
es
xor
pushf
xchg
fmul
ins
mov
mov
retf
(bad)
jle
adc
(bad)
call
xchg
mov
int3
xchg
scas
or
cli
sub
mov
ss
push
(bad)
cdq
fisubr
xor
and
jl
fisubr
jmp
mov
mov
ds
xchg
dec
fild
pop
inc
movs
jge
pop
ins
stos
out
push
daa
hlt
mov
(bad)
sbb
clc
addr16
test
in
pop
in
pop
push
pushf
pop
ss
out
test
sbb
pushf
ss
mov
outs
aaa
in
fwait
movs
or
and
xchg
enter
ins
xchg
fst
inc
repnz
push
je
data16
imul
push
lahf
mov
xor
cdq
mov
jbe
test
push
push
and
xlat
fcmovnu
mov
out
es
loopne
mov
out
test
ret
(bad)
xchg
data16
cmps
(bad)
movs
mov
mov
mov
xlat
fstp
adc
or
pop
lods
rol
movs
inc
mov
cdq
pop
mov
aam
mov
jl
cs
in
cmp
test
(bad)
ficom
pop
aaa
push
cwde
inc
jl
inc
stos
mov
push
shr
fs
push
call
aam
call
and
lahf
pop
mov
pop
add
lods
mov
test
bnd
or
mov
jg
nop
xlat
adc
(bad)
test
jg
adc
pop
pop
(bad)
test
mov
in
xchg
jp
imul
movs
push
fdiv
(bad)
scas
outs
jge
or
dec
stos
addr16
(bad)
pushf
std
mov
outs
inc
mov
push
xor
fisubr
pop
frstor
es
dec
or
test
cmps
ret
adc
test
jl
cmp
cmp
sbb
idiv
sub
or
fcomp
sbb
hlt
mov
xchg
or
cmc
into
or
adc
sahf
ins
jle
fidivr
pop
sbb
out
ret
add
sub
daa
fadd
or
(bad)
repnz
fwait
stos
mov
dec
(bad)
ins
push
pusha
or
xor
cmp
dec
sub
into
fst
or
adc
scas
sbb
xor
pop
mov
enter
xchg
fucomp
test
retf
lods
movs
push
mov
pop
fs
in
in
lods
jmp
cmp
xchg
mov
das
loop
and
cmp
ror
nop
in
in
mov
daa
pushf
xchg
iret
xchg
or
sbb
adc
aas
in
sbb
imul
sahf
loope
mov
mov
jmp
inc
sub
jg
repnz
ss
push
das
pusha
sbb
sub
sahf
and
mov
loop
or
mov
and
sub
bound
pop
das
stos
pop
or
adc
add
mov
sti
and
mov
mov
xchg
push
cmp
sahf
mov
pushf
cwde
es
(bad)
xchg
int
mov
ret
pushf
cmp
scas
setl
and
push
sbb
pop
mov
pop
sbb
fdivr
sbb
pop
sbb
cmps
(bad)
gs
(bad)
pusha
dec
test
mov
mov
sbb
fistp
jno
cmp
jo
es
mov
es
cmp
test
hlt
fist
mov
pop
or
(bad)
out
in
(bad)
rcr
(bad)
ror
cdq
pop
js
mov
pop
or
movs
or
adc
and
push
push
cwde
call
fcomp
psrld
mov
pop
xlat
pushf
jl
cmc
push
retf
pop
inc
xchg
jns
ret
call
pop
dec
sbb
inc
adc
ins
mov
test
cmp
sahf
pushf
mov
out
mov
sub
movs
or
inc
jg
or
movs
sbb
xchg
cdq
adc
lock
inc
or
cmp
fsub
cdq
cld
cmp
sub
loop
mov
add
push
lods
pop
mov
push
es
jmp
in
jge
addr16
mov
inc
jl
and
jge
jmp
jbe
pop
pushf
or
pop
mov
and
sahf
xchg
jl
xchg
cli
lahf
adc
cmp
mov
and
mov
cmps
fnstcw
dec
push
jmp
xchg
out
xlat
xchg
cmp
cld
cmc
jl
push
sub
int
lods
fst
int3
fs
sahf
addr16
adc
and
jmp
cmp
mov
in
fcomp
jl
int3
mov
cmp
adc
mov
aam
shl
adc
(bad)
sahf
lock
mov
sbb
jbe
das
push
test
jl
aam
mov
xor
mov
ficomp
jge
out
ss
push
wbinvd
mov
stc
push
pop
add
clc
repnz
fstp
add
jnp
loop
add
test
dec
pop
je
mov
ja
mov
adc
fld
cmp
lock
push
scas
in
aam
mov
ror
(bad)
div
shl
dec
outs
popa
(bad)
jmp
cwde
xor
cdq
in
push
dec
and
jl
xchg
push
repz
jle
pop
push
xchg
(bad)
jl
dec
sti
test
enter
fdiv
pop
pushf
add
sub
sahf
push
dec
xchg
push
jge
jbe
jmp
adc
and
(bad)
clc
cdq
inc
xchg
cmps
mov
sahf
(bad)
mov
mov
jmp
xchg
mov
xor
dec
jg
xchg
fist
ret
mov
test
sahf
and
aad
or
mov
mov
xchg
aas
jmp
mov
lea
dec
mov
fadd
dec
and
(bad)
sahf
int3
mov
retf
dec
mov
dec
dec
mov
out
add
or
cmc
push
stc
iret
push
(bad)
out
test
clc
lahf
mov
popa
sar
out
mov
test
jmp
fidiv
fcomp
leave
fstp
pop
jo
push
scas
xor
mov
fcom
inc
mov
pop
push
push
mov
scas
mov
push
push
test
xchg
sbb
jmp
fdivr
add
mov
jge
retf
int
sub
icebp
mov
scas
cmc
mov
sahf
movs
jge
jno
pop
je
sbb
int
or
inc
(bad)
lock
in
jmp
inc
arpl
out
sbb
inc
rcr
push
jbe
xor
iret
cdq
aad
or
popf
jg
xor
mov
jmp
(bad)
fldenv
call
mov
jae
push
adc
outs
clc
adc
xchg
arpl
ja
stc
shr
mov
in
js
and
hlt
jmp
xlat
or
xor
push
cmps
mov
loop
mov
dec
pop
inc
push
pop
mov
dec
push
sub
pop
jl
sbb
icebp
pushf
ins
loope
push
sbb
mov
push
imul
in
pop
mov
ret
inc
dec
fst
mov
and
push
aaa
dec
das
dec
daa
popf
push
pop
fnstenv
ret
pop
sbb
shr
mov
ret
sbb
movs
call
test
arpl
adc
mov
data16
sbb
xchg
mov
ficom
or
mov
in
adc
lds
icebp
nop
or
outs
push
jg
mov
mov
xlat
lahf
call
adc
push
xchg
clc
jbe
pop
mov
mov
jg
div
mov
mov
mov
xchg
lods
into
loope
into
pop
cdq
sbb
nop
push
push
cwde
cdq
cwde
pop
fwait
loop
stc
les
mov
(bad)
push
mov
sahf
or
hlt
xchg
iret
push
ja
jmp
cwde
and
mov
cmps
mov
or
repnz
test
xchg
xchg
pop
mov
add
es
push
xor
and
xchg
push
xchg
mov
adc
add
pushf
mov
out
shl
rcr
cld
test
push
mov
pop
push
or
iret
mov
int
jb
cmp
gs
and
mov
nop
cmc
sbb
(bad)
jmp
pop
xor
popf
out
and
push
jecxz
cmps
popf
inc
sahf
fcomp
mov
cmp
es
(bad)
mov
lock
mov
cmp
and
leave
inc
xor
aaa
fld
jle
in
mov
inc
test
sahf
clc
mov
push
cmp
imul
gs
dec
sub
mov
fdivr
or
enter
cmps
and
inc
outs
mov
daa
cmp
and
les
mov
xchg
in
out
mov
sahf
mov
movs
or
mov
jmp
jle
mov
cli
repnz
pop
mov
outs
out
test
xchg
repz
inc
push
fcomi
aaa
adc
xlat
mov
or
jbe
jge
cli
jp
mov
jge
push
jne
jle
shl
(bad)
and
and
sahf
rep
sar
jo
outs
dec
cmp
jecxz
push
add
jge
inc
pop
pop
xchg
shl
int3
cmp
and
mov
cwde
mov
(bad)
in
out
out
in
ds
(bad)
shl
nop
xor
push
adc
mov
sbb
mov
ror
xchg
mov
adc
cmp
neg
mov
out
je
pop
aad
leave
mov
test
(bad)
hlt
sbb
fwait
xchg
aas
mov
cld
jb
inc
sar
fwait
sub
movs
xchg
inc
inc
pusha
mov
ret
(bad)
pop
in
or
sbb
add
clc
sbb
test
pop
hlt
mov
out
pushf
mov
fcom
ss
mov
push
mov
pop
mov
pop
add
and
(bad)
lods
mov
rcl
xchg
pushf
jno
sbb
mov
pop
push
or
mov
sbb
call
arpl
fs
pop
jp
cli
rcr
loopne
imul
lods
push
int3
js
sbb
jl
aam
aaa
sar
cmp
xchg
mov
cdq
cdq
or
jl
stos
movs
mov
cli
pop
mov
dec
ret
call
lock
xchg
or
push
sahf
movs
movs
or
mov
pushf
jmp
xor
mov
scas
stos
mov
(bad)
scas
push
je
inc
js
xlat
xor
fmul
lods
mov
dec
aam
je
fmul
clc
and
sub
inc
adc
retf
xor
fwait
xchg
iret
push
popa
jbe
dec
jno
jmp
and
jne
xor
loopne
stos
xchg
push
mov
cmps
adc
pop
or
shr
cwde
push
mov
xor
shr
fmul
mov
icebp
or
mov
popa
dec
cmp
les
mov
fimul
in
mov
retf
mov
lock
push
add
iret
outs
and
push
sub
dec
rcr
cmp
dec
add
les
sbb
sbb
jo
movs
mov
les
mov
or
mov
aad
repnz
cmp
push
js
(bad)
movs
ror
cdq
sahf
or
in
neg
movs
add
xlat
push
add
add
mov
pusha
xlat
mov
jge
movs
outs
mov
fs
or
adc
xchg
pop
mov
stc
cmc
adc
mov
push
mov
sahf
in
test
ret
js
mov
loop
retf
dec
adc
or
movs
in
call
and
aam
(bad)
lahf
movs
in
sbb
adc
dec
dec
mov
jl
jb
sub
mov
mov
test
cdq
fwait
arpl
mov
cld
cmps
xlat
retf
inc
and
dec
ficomp
sub
mov
sbb
lods
pop
mov
aaa
shl
add
lds
cmp
or
out
sahf
arpl
aaa
add
lock
push
add
add
js
mov
sets
xchg
or
mov
clc
xor
mov
mov
or
xchg
pushf
out
jae
ins
or
xlat
jne
mov
hlt
xor
ret
movs
ffree
mov
pop
fdivr
(bad)
stos
fiadd
inc
fsubr
lds
(bad)
xlat
push
shr
push
movs
sbb
xor
hlt
mov
fcmove
loopne
add
fsub
stos
ss
jecxz
lods
pop
mov
in
test
(bad)
fbstp
mov
(bad)
pop
movs
outs
xchg
lahf
movs
fld
push
xlat
imul
movs
stc
xchg
adc
aam
test
int3
sahf
sub
pop
push
and
mov
fadd
cmc
or
loopne
push
in
inc
cmp
shl
fs
xlat
test
(bad)
and
movs
mov
fsubr
ins
mov
je
addr16
scas
in
pushf
clc
add
add
mov
jno
sub
sbb
mov
nop
cmps
test
cld
pushf
ficom
fidiv
jp
in
fs
(bad)
cmp
stc
ds
mov
stos
mov
cmp
neg
mov
sti
or
es
push
daa
test
movs
(bad)
cmp
jns
pop
dec
cmps
(bad)
fidivr
and
add
mov
mov
ds
inc
movs
and
test
cmps
adc
mov
scas
cmp
movs
xchg
sti
jbe
enter
pushf
jb
add
int
and
cmp
fadd
int
mov
and
mov
mov
push
(bad)
int
mov
and
nop
mov
and
je
jne
jbe
ja
js
jns
fstp
jnp
jl
jge
jle
jg
xor
and
push
addr16
mov
and
push
imul
push
outs
int
mov
and
jb
jae
push
pop
push
js
push
push
int
mov
and
pop
mov
and
pop
push
pop
int
mov
and
bound
inc
js
push
inc
int
mov
and
dec
mov
and
dec
push
dec
int
mov
and
push
mov
and
ss
aaa
int
mov
and
cmp
cmp
int
mov
push
add
std
pop
(bad)
pushf
adc
arpl
add
popf
cwde
call
lea
dec
cmp
add
mov
adc
outs
mov
popf
(bad)
stc
add
or
add
int3
call
add
cld
mov
movs
test
add
dec
xchg
(bad)
stc
cmc
add
out
and
inc
lock
sub
sub
pop
or
add
or
lock
test
lahf
(bad)
add
push
bound
int3
dec
fadd
inc
in
(bad)
fadd
mov
cli
mov
cmp
or
jmp
in
inc
xor
nop
call
add
xor
hlt
push
mov
in
clc
in
add
sahf
(bad)
cdq
std
or
or
and
push
in
and
and
out
cmc
add
stc
sti
pushf
sub
fs
jle
mov
adc
cli
add
or
or
clc
lock
clc
into
sub
fisub
mov
in
inc
push
int
jbe
fmul
or
and
test
in
fs
sbb
push
clc
dec
ficom
sbb
paddsb
cmp
mov
sbb
adc
fsubr
and
mov
in
addr16
aam
cmp
jge
pop
sbb
lock
or
mov
lock
xlat
out
or
add
repnz
push
xlat
add
dec
inc
(bad)
ins
sbb
add
pusha
push
movs
(bad)
test
stos
add
mov
hlt
mov
and
aad
in
enter
fs
and
in
ins
jl
test
cmc
idiv
sub
lock
dec
fdiv
add
mov
add
in
clc
xor
pop
and
test
jmp
lock
mov
and
cmp
(bad)
add
clc
fcomp
adc
aam
or
push
movs
pop
push
sbb
(bad)
mov
mov
cli
int
lock
or
pushf
sahf
cmp
jmp
cld
mov
xchg
adc
cli
stc
nop
aam
xor
adc
(bad)
enter
addr16
mov
sbb
pop
enter
fwait
add
fdiv
mov
add
stc
xchg
pop
jle
sti
pop
push
mov
pushf
pushf
gs
xor
and
mov
mov
adc
clc
mov
and
pop
xor
movs
test
or
cwde
int3
pop
fadd
repz
int3
jmp
sahf
pusha
adc
sub
or
fcomp
add
fs
call
stc
cmc
clc
lea
cmps
or
pusha
pop
push
pushf
push
pushf
mov
repnz
push
lock
jmp
lods
xor
jne
pushf
sahf
lahf
(bad)
jns
test
inc
clc
(bad)
popf
rcr
popf
and
mov
pop
out
and
xor
rcl
fcomp
shl
lods
clc
sub
mov
lahf
and
movs
xchg
mov
popf
call
shl
out
repnz
push
rol
jo
ret
mov
xor
mov
and
hlt
call
cdq
jle
cli
mov
xchg
pop
call
and
js
sbb
or
aad
out
push
adc
inc
in
test
mov
movs
data16
test
setbe
jmp
sbb
lock
repz
pop
xor
jl
ss
shr
mov
arpl
inc
cmps
test
dec
sbb
(bad)
(bad)
mov
lods
sar
sbb
out
cwde
cwde
mov
pop
jmp
fs
cmp
fwait
jge
or
xchg
aam
push
mov
popf
aaa
ja
dec
ficom
or
loop
mov
sub
xor
mov
popf
jb
xor
dec
push
pop
call
and
xor
lods
aaa
stos
xor
in
mov
mov
or
out
push
add
and
es
inc
cmps
sbb
and
inc
pop
push
out
outs
adc
add
and
jecxz
jmp
mov
pusha
mov
pushf
test
movs
int3
(bad)
repnz
xchg
scas
push
mov
and
stos
mov
and
stc
push
dec
enter
out
sub
repz
jl
pop
mov
mov
in
iret
xchg
int
adc
mov
mov
mov
cwde
sub
mov
add
pop
aad
inc
cmp
sub
loope
pushf
mov
in
adc
ins
add
mov
bnd
xor
(bad)
sbb
dec
lods
fcmovnbe
daa
xor
in
jbe
imul
ds
(bad)
sbb
mov
(bad)
sbb
push
cmp
sar
fisubr
xor
mov
or
sti
retf
or
dec
fsubr
pushf
aaa
cmps
rcl
mov
xchg
das
mov
fs
pop
fnsave
and
in
ja
add
js
mov
pusha
push
lods
icebp
sbb
and
iret
mov
imul
mov
xchg
mov
retf
js
pop
in
sahf
mov
(bad)
(bad)
fnsave
retf
cwde
out
cs
pushf
test
outs
pop
mov
or
call
sahf
iret
nop
pop
test
mov
push
fcom
push
push
shl
xor
cli
sahf
neg
call
shl
cmp
push
or
out
es
inc
rcl
xchg
es
dec
sahf
adc
out
lds
test
mov
push
xchg
mov
jmp
test
gs
les
jg
sbb
(bad)
lods
fimul
mov
jmp
lds
sub
(bad)
rcl
xchg
test
pop
movs
repnz
les
loop
or
les
mov
push
lock
pop
ficom
add
cmp
loop
push
jp
or
mov
xchg
mov
pop
cmps
sbb
movs
mov
pop
jnp
cld
sti
cdq
fs
mov
ins
push
jb
aaa
adc
xchg
push
mov
jo
push
adc
inc
pop
aad
adc
ins
addr16
jae
xor
pop
jne
add
push
xor
push
push
push
in
jg
jnp
jg
xor
clc
mov
in
and
pushf
sbb
add
mov
repnz
jns
mov
xchg
fs
rcr
dec
jns
iret
sbb
icebp
sbb
mov
adc
push
clc
jecxz
out
push
out
test
les
out
out
adc
mov
sub
xchg
mov
lods
sbb
jle
lahf
iret
fs
xor
xor
xlat
pop
daa
mul
out
jl
cmp
xchg
sbb
out
retf
out
call
call
cmp
jae
jl
pop
rcr
or
add
(bad)
retf
mov
dec
cmps
les
sub
enter
movs
or
inc
xor
popa
fisubr
add
movs
stos
dec
lds
rol
aam
imul
dec
(bad)
mov
sbb
retf
cmps
add
movs
dec
pop
sbb
hlt
mov
mov
test
jo
cdq
imul
outs
pop
sbb
xchg
sub
mov
cmp
jb
mov
das
mov
rcl
xlat
ja
jecxz
jge
cmp
icebp
jmp
lock
jno
es
fs
xchg
movs
outs
add
sbb
sub
mov
daa
xchg
popf
out
(bad)
fbld
in
enter
xchg
bound
ret
mov
mov
xchg
pop
push
push
push
pop
fs
cmps
les
lds
popf
stc
sar
ret
outs
ret
movs
jge
pushf
rol
mov
jg
mov
aad
and
pop
(bad)
pushw
push
jnp
sub
repz
push
add
inc
mov
pop
xor
cdq
xchg
xchg
or
push
jae
jbe
ins
mov
cmc
addr16
lods
dec
xchg
cmps
sahf
mov
rol
(bad)
sbb
and
movs
movs
dec
aam
cwde
sbb
mov
cmps
jne
xor
cwde
xor
daa
in
mov
mov
mov
jae
jmp
and
jns
sub
mov
lds
nop
dec
push
test
ret
xor
dec
fsubr
jmp
or
mov
adc
xchg
lods
cmc
adc
je
repnz
imul
inc
sbb
pop
dec
mov
mov
clc
enter
mov
jg
sbb
shl
push
jbe
les
dec
cmp
mov
std
imul
out
movs
xor
cld
scas
cwde
cmp
aaa
(bad)
stos
iret
inc
xchg
clc
mov
mov
cmps
xchg
adc
out
cmp
push
(bad)
jb
adc
xchg
adc
fild
mov
imul
shr
call
pop
xor
xor
test
dec
inc
test
mov
into
fcmove
movs
test
mov
mov
add
mov
cmc
int3
cmp
call
cld
cwde
xchg
ss
jle
and
pop
(bad)
mov
push
jae
cmp
cmp
jl
or
dec
out
jb
popf
mov
nop
pop
adc
mov
mov
sbb
or
mov
add
loope
mov
push
out
or
cmp
movs
(bad)
icebp
movs
fst
sbb
cmps
xor
lods
push
and
jmp
mov
dec
imul
pop
call
(bad)
test
xor
aas
cmp
add
pop
fcomp
pop
dec
into
push
in
xchg
aad
mov
adc
adc
ss
loop
adc
pop
imul
pop
lds
ret
pop
retf
imul
jns
je
mov
push
ficom
push
ret
adc
ret
adc
mov
fs
outs
fst
push
pop
xchg
xlat
shr
repz
push
in
add
mov
(bad)
iret
cmp
xchg
mov
or
sbb
movs
mov
mov
repnz
push
cmp
jmp
push
rcl
cmp
dec
test
je
fst
xor
and
loope
ss
sbb
clc
cwde
sub
loopne
(bad)
and
test
es
add
icebp
add
mov
arpl
movs
inc
call
adc
pop
leave
pop
ins
imul
cdq
dec
loopne
sbb
adc
xchg
mov
pop
pop
push
pop
cwde
mov
xchg
jno
pop
mov
push
imul
push
or
mov
mov
loop
fidivr
scas
xchg
shr
fisttp
pop
sti
xor
or
in
sbb
out
sub
sub
ss
sbb
xlat
lahf
mov
mul
inc
sar
cdq
or
sub
ret
sbb
(bad)
xchg
and
hlt
xchg
and
jnp
shl
shl
adc
push
into
sub
mov
inc
jg
retf
mov
mov
in
shl
ins
push
push
sub
scas
out
pop
fdiv
outs
adc
jnp
sahf
mov
hlt
std
gs
inc
mov
ds
adc
loopne
mov
out
(bad)
xor
inc
test
adc
les
rol
dec
mov
rcl
sub
in
jge
lds
adc
cmps
ins
movs
xchg
mov
add
mov
or
sbb
sbb
push
dec
jmp
lock
or
sub
xor
cwde
xchg
mov
mov
sbb
sbb
popf
retf
cmps
inc
mov
int3
fsub
pop
popf
pop
sbb
pop
movs
sub
or
jl
jle
outs
lea
loope
mov
out
pusha
js
or
dec
mov
ficom
test
les
rol
sbb
clc
jmp
jg
add
cmp
add
cmps
mov
push
mov
adc
and
lods
pop
(bad)
out
sbb
push
cmp
int3
xchg
or
sub
lds
mov
mov
movs
pop
jg
test
sbb
pusha
or
cdq
cmc
jl
xchg
or
jecxz
js
nop
mov
out
push
xrelease
lahf
cmp
popf
and
xchg
arpl
loope
or
ja
(bad)
mov
es
lods
jbe
ja
or
jecxz
lea
repz
xchg
pop
mov
cld
mov
jge
xchg
into
add
add
outs
xchg
(bad)
fisttp
rcl
mov
xchg
adc
xchg
xchg
loop
mov
loope
push
adc
dec
cmps
ds
or
int
scas
pusha
popf
test
cmps
xchg
mov
dec
xchg
mov
pop
mov
sbb
sub
mov
adc
mov
sub
mov
dec
inc
in
xor
movs
jg
xor
das
sbb
push
test
mov
mov
shl
pop
lods
mov
(bad)
push
jmp
movs
xchg
adc
stos
mov
inc
mov
pop
sbb
out
xchg
lock
sub
not
or
mov
fmul
retf
ins
adc
jbe
fadd
loope
nop
and
adc
idiv
xchg
jg
and
aam
iret
push
adc
jg
les
imul
mov
push
xchg
enter
jl
ss
repnz
es
jecxz
jg
and
sub
xchg
jno
jl
and
jmp
loopne
or
lock
add
mov
inc
pushf
js
cmp
je
es
ja
(bad)
mov
xchg
aam
sbb
mov
and
xchg
ds
test
sbb
sub
(bad)
sbb
(bad)
pushf
mov
xor
cmp
xchg
aas
cmp
fsub
and
adc
adc
ror
sub
mov
xchg
push
xchg
jle
jp
push
mov
lods
sar
scas
call
dec
fld
pop
xchg
and
into
sub
mov
hlt
ret
icebp
movs
inc
add
xchg
or
push
pusha
push
iret
dec
adc
xchg
inc
repnz
sub
loopne
rol
scas
lahf
xchg
addr16
sub
std
out
pop
and
mov
pushf
in
and
push
(bad)
loop
into
aad
inc
pushf
dec
rol
(bad)
hlt
mov
or
test
leave
mov
mov
lea
sub
loop
adc
rcr
into
push
xlat
lods
pop
mov
mov
pop
jg
lods
jbe
and
or
pushf
cmps
sbb
test
cli
aas
mov
sbb
xor
stos
jmp
je
fst
dec
mov
cwde
xor
pop
inc
fstp
in
adc
push
icebp
and
repnz
repz
ror
fsub
sbb
sub
adc
or
das
xchg
mov
in
jmp
fisttp
mov
adc
ficomp
xchg
ds
xor
(bad)
mov
mov
lods
pop
mov
sub
movs
sti
pushf
mov
jbe
cwde
xchg
int3
pop
sbb
fist
fsub
cld
pop
dec
cmps
rcl
aam
mov
mov
in
mov
test
and
cmc
push
jno
in
out
in
xlat
lock
ret
stos
mov
cmp
(bad)
call
push
lahf
add
mov
scas
pmulhw
fdivr
cdq
cmp
xor
cdq
outs
sti
movs
mov
mov
add
pop
retf
or
loope
imul
stos
arpl
push
ror
mov
sbb
adc
movs
sbb
clc
mov
into
sbb
ss
rcr
into
add
inc
xor
retf
lea
push
fldcw
mov
mov
sbb
jb
test
movs
xchg
and
movs
int
popf
mov
or
jl
mov
adc
jno
mov
cli
jno
mov
push
mov
shl
or
call
adc
xchg
aam
scas
pop
or
pusha
add
outs
rol
or
loope
mov
sar
out
cwde
push
ins
jne
sbb
xor
cmps
outs
inc
cld
push
icebp
ins
jne
jno
mov
dec
fld
dec
dec
push
xchg
push
bnd
jl
shrd
cmps
fdivr
jl
adc
mov
(bad)
test
xor
push
int
xchg
sbb
loop
or
mov
shl
pop
mov
adc
pop
fsub
mov
int
cmp
mov
out
xor
mov
les
test
lock
push
jle
jo
xchg
cwde
out
push
je
or
clc
popf
jl
adc
mov
jmp
sbb
dec
ret
cwde
loope
aas
jno
mov
xchg
sbb
adc
cwde
adc
aad
xchg
adc
adc
mov
cdq
mov
or
lods
js
add
mov
fstp
sbb
and
push
loopne
loopne
jae
mov
mov
mov
je
mov
test
pop
cwde
movs
push
mov
mov
mov
mov
and
cmps
cdq
xchg
mov
jl
rcr
jae
mov
iret
xor
fcomp
fstp
fadd
loop
test
rcr
je
pop
das
fsubr
or
outs
jbe
ror
cdq
cmp
rcl
mov
ror
(bad)
cmc
ins
adc
push
call
pop
in
mov
lods
test
jecxz
mov
or
mov
mov
movs
and
or
sbb
pop
repz
add
push
test
out
ins
je
(bad)
sbb
jg
outs
(bad)
arpl
call
mov
test
es
jmp
in
push
(bad)
ins
adc
ror
sahf
pop
mov
dec
inc
xchg
call
mov
push
pushf
sub
pushw
adc
push
jle
mov
test
test
mov
in
adc
dec
push
pushf
(bad)
lods
push
repnz
loop
mov
test
je
gs
arpl
out
add
xchg
sbb
(bad)
lock
and
enter
fs
jnp
in
xchg
and
sbb
and
ss
lahf
out
fsub
xor
movs
(bad)
dec
inc
loop
mov
dec
add
dec
cmp
mov
xor
jbe
outs
push
es
jmp
adc
xlat
jp
scas
loop
pushf
mov
sbb
push
inc
sbb
pushf
sub
call
add
mov
push
icebp
or
popf
push
jno
push
fcom
push
dec
gs
fistp
inc
sbb
leave
stos
jg
and
cdq
out
lock
sbb
out
stos
ins
test
test
mov
adc
jbe
push
je
into
mov
mov
cmps
data16
hlt
jle
adc
sar
push
push
outs
outs
mov
ins
leave
sub
(bad)
neg
cmp
xchg
push
enter
std
xchg
push
pop
cmp
jbe
ret
cli
scas
pop
test
arpl
push
xor
add
jno
repz
loop
dec
test
and
xor
sub
mov
jg
js
mov
test
in
cmp
outs
rcr
mov
pop
xor
je
mov
ins
and
nop
aad
pop
sbb
call
enter
xchg
nop
mov
sbb
stos
mov
mov
and
sbb
test
dec
outs
lock
ins
pop
mov
js
nop
xchg
sbb
jb
mov
adc
cwde
aam
enter
cmp
mov
xchg
mov
dec
(bad)
stos
mov
call
adc
pop
mov
lock
(bad)
and
mov
xchg
lock
mov
rcl
adc
add
pop
adc
mov
arpl
lea
not
sahf
adc
fdivr
or
cmps
mov
icebp
call
sbb
cwde
mov
push
int
mov
jl
out
fcom
pop
adc
jmp
mov
mov
fsub
mov
fs
lods
(bad)
sub
frstor
sbb
xchg
push
adc
(bad)
(bad)
js
and
adc
iret
test
inc
and
cmp
cmp
loope
add
es
sahf
(bad)
ins
mov
mov
dec
cdq
jl
sar
xchg
mov
fld
inc
shl
push
gs
push
fcom
mov
push
pop
ss
das
aad
xor
xchg
iret
movs
push
add
aam
repz
xor
lods
mov
ins
mov
push
pop
adc
fcomp
in
cmp
rcr
xor
in
mov
data16
clc
sti
mov
jl
pop
mov
dec
loopne
stc
lea
sub
jbe
sar
jl
loopne
mov
popa
in
mov
jno
or
and
jo
cmps
lods
jno
pop
fsubr
jp
mov
inc
cmp
call
xchg
cmps
movs
jns
mov
and
mov
iret
addr16
mov
scas
aas
fidiv
cmps
(bad)
xlat
and
movs
dec
mov
jle
lods
adc
adc
fcomp
popa
es
mov
cmps
ss
inc
mov
pop
or
cwde
lds
cmc
inc
js
mov
push
xlat
push
mov
push
pushf
dec
call
xchg
scas
cmp
fdiv
fs
dec
sbb
pop
push
xor
and
aas
into
fisttp
mov
(bad)
jmp
adc
add
mov
fsub
sbb
ret
push
add
pop
aam
xchg
aaa
or
movs
ja
lds
sar
xlat
jl
ss
(bad)
rcr
fcmovbe
cld
jl
xchg
and
jmp
cmp
mov
cli
pop
xchg
out
lahf
mov
fiadd
mov
dec
lock
icebp
cld
movs
and
fld
add
jmp
mov
mov
test
and
mov
jl
cmp
stos
xor
call
or
lahf
call
lods
adc
call
outs
xchg
dec
jg
pop
rcr
mov
ret
fdivr
jae
cmps
ja
mov
rcl
in
sbb
jbe
or
and
or
cmp
jecxz
mov
ficom
ret
mov
loope
jbe
xor
mov
jge
call
xchg
ret
(bad)
mov
stc
push
cld
loop
movs
shl
test
sahf
mov
jns
call
cmp
sar
(bad)
aad
mov
leave
pop
pushf
cmp
or
jecxz
pushf
pop
cmp
adc
les
mov
mov
daa
mov
xchg
mov
xor
mov
mov
xor
add
movs
cld
lods
mov
ins
lahf
xchg
cmc
dec
jns
jo
sbb
cmp
iret
fwait
cmps
mov
dec
nop
adc
xchg
cmp
lahf
inc
mov
push
and
jge
add
push
cmps
cmp
fst
rcr
scas
jns
ss
mov
loope
(bad)
mov
mov
push
call
pop
sbb
adc
xor
pop
xor
movs
mov
fwait
mov
inc
loop
lods
mov
push
call
cld
sbb
adc
xor
sbb
sti
xchg
mov
lods
lahf
push
mov
xchg
call
pushf
popf
cwde
xchg
sahf
cmp
cdq
pop
scas
pop
cmps
xor
movs
adc
or
outs
movs
aam
aad
dec
aaa
adc
popf
jmp
jmp
pop
mov
mov
cdq
cmp
dec
xor
push
test
push
mov
mov
les
(bad)
in
lods
cmp
mov
hlt
cli
retf
loopne
and
pop
daa
movs
jnp
inc
fadd
or
mov
ins
movs
xchg
xchg
jae
xor
jne
pop
call
push
xchg
je
jg
dec
and
jmp
mov
cwde
ret
sbb
xor
retf
rcl
fs
xor
stc
(bad)
adc
repnz
push
or
fst
add
mov
and
cdq
sbb
ins
fidivr
lods
lahf
fcom
mov
mov
lea
stos
(bad)
mov
sub
mov
xchg
xchg
pushf
loope
test
and
mul
fisub
imul
loopne
nop
jge
out
add
xor
mov
mov
call
or
je
mov
neg
scas
ja
jg
shl
shl
hlt
pop
out
adc
mov
dec
cdq
iret
and
pop
mov
ficom
movs
fwait
test
stos
or
cmps
push
mov
enter
inc
xor
sbb
cmp
retf
add
in
xchg
mov
sahf
mov
pop
or
fcom
inc
scas
lock
mov
sub
imul
xor
fadd
mov
leave
movs
jp
(bad)
div
movs
pop
popf
sbb
xchg
or
mov
(bad)
popf
push
xchg
int
xor
repnz
shl
xchg
aas
cli
dec
int3
js
mov
mov
es
add
mov
scas
iret
int
gs
sbb
add
cwde
and
shr
adc
movs
xchg
pop
xchg
push
or
test
rcl
enter
jp
sub
mov
movs
sub
jnp
fst
sbb
test
inc
es
outs
fimul
jge
sbb
test
popa
sub
add
fucomi
pushf
xchg
jge
inc
sub
popa
mov
xlat
pop
cwde
js
cs
xor
xor
add
fistp
jmp
int3
push
dec
lods
ds
jecxz
popf
mov
sbb
lea
rcr
mov
jmp
(bad)
push
test
and
or
mov
(bad)
jae
popf
jg
inc
mov
fbld
les
xchg
xor
adc
mov
cmps
jmp
mov
mov
push
stos
jmp
pop
sub
addr16
and
or
sub
and
ins
mov
js
mov
sub
adc
loope
pop
in
iret
retf
pop
lahf
cld
movs
xchg
pushf
add
mov
sbb
stos
sub
fisubr
xchg
jg
or
mov
mov
push
lds
pushf
(bad)
hlt
xlat
es
cmp
scas
sub
(bad)
retf
test
es
cmps
adc
mov
mov
sahf
in
add
xchg
iret
ins
adc
pop
je
or
out
cmp
sbb
dec
iret
jo
sub
adc
icebp
test
push
mov
imul
push
add
in
into
jle
lods
xchg
push
push
xlat
sub
movs
icebp
pop
movs
push
fcom
sahf
pop
fwait
ret
mov
push
popa
mov
adc
(bad)
mov
xchg
cmps
mov
ins
les
jne
ins
ss
sub
js
les
enter
into
pop
push
daa
jl
aas
cld
loop
in
sbb
xor
push
cmp
stos
ret
jb
or
aam
fldenvw
stos
std
push
xlat
xchg
call
cmp
mov
movs
mov
dec
push
(bad)
sbb
inc
std
cs
and
cli
mov
fwait
adc
call
push
arpl
out
sub
jo
stc
push
dec
fcomp
xchg
mov
or
stos
push
mov
mov
xchg
call
cs
stos
out
cmp
or
mov
xlat
mov
pusha
shl
lods
fnstsw
xchg
cmps
call
scas
cmps
pop
sti
add
ret
into
stc
scas
sbb
ret
stc
pop
ds
push
pop
loope
sbb
inc
push
dec
ficomp
dec
loopne
int3
push
cld
stos
lahf
pop
iret
popf
ret
mov
xor
xchg
jne
xor
mov
stc
jg
aas
out
xchg
xchg
sub
popw
fidiv
xchg
mov
mov
or
aam
not
mov
sub
hlt
sub
xchg
pop
scas
push
dec
jl
push
(bad)
call
ins
int
pop
or
mov
in
in
cmp
out
cmps
xchg
push
inc
in
pop
ins
dec
pushf
pop
dec
icebp
mov
ds
mov
into
test
mov
and
jl
lahf
pop
les
xchg
pop
arpl
aas
dec
add
shr
scas
adc
sti
or
dec
pop
test
sub
out
mov
xor
loope
mov
loop
ret
or
pop
xchg
push
test
push
ror
adc
xor
adc
and
cmp
cmp
ret
lds
push
fisub
xchg
and
scas
and
and
or
sbb
(bad)
call
shl
out
mov
not
pop
adc
jl
or
xchg
cmp
mov
xchg
pop
pop
or
sbb
cmp
loop
push
jnp
fwait
xchg
sub
adc
adc
pop
add
cld
mov
sbb
sbb
mov
les
rcl
iret
pop
adc
leave
mov
clc
jg
jl
outs
or
cdq
and
xchg
or
lds
not
stos
(bad)
xchg
adc
fcomp
ror
fidiv
pop
xor
push
das
ret
or
movs
push
push
push
pop
cmps
call
sbb
movs
fild
popf
mov
hlt
test
stos
dec
mov
test
and
jo
test
mov
jp
sub
stos
jmp
fs
popa
mov
rol
sub
cmp
movs
cmp
sbb
cmp
jg
sbb
mov
cmps
push
aas
pusha
es
sbb
and
sub
jecxz
mov
mov
and
dec
inc
push
rol
outs
shl
out
cmp
add
in
mov
sbb
aam
cmps
adc
or
mov
sub
std
pop
sub
jmp
cdq
push
std
mov
popf
icebp
pop
rcr
(bad)
ds
cmps
mov
and
xor
retf
fwait
pushf
lds
and
cli
and
add
sahf
mov
and
neg
mov
xchg
not
(bad)
scas
sbb
cmp
and
test
mov
(bad)
in
lea
popf
mov
call
or
popf
or
outs
xchg
mov
and
test
jae
sahf
in
cwde
shl
pushf
mov
nop
mul
outs
icebp
xor
sbb
in
in
cmps
imul
lods
pop
(bad)
call
mov
iret
es
adc
outs
out
sub
jmp
out
push
sbb
mov
rcr
test
xchg
push
and
out
or
sub
fnstenv
icebp
fdiv
or
fsubr
mov
mov
inc
inc
mov
push
mov
inc
sahf
mov
jg
mov
sbb
mov
outs
(bad)
jne
(bad)
pusha
call
in
mov
dec
pop
les
call
jle
push
xchg
sbb
es
xchg
adc
cwde
xchg
mov
(bad)
in
jne
jp
movs
jno
sbb
cmps
jl
jecxz
inc
mov
loop
pop
mov
loop
ss
push
test
ins
sbb
jl
aad
cdq
push
push
jmp
dec
js
xor
jle
call
cs
pop
mov
xchg
outs
pushf
xchg
cwde
loop
inc
jecxz
rol
cmp
or
std
sbb
lods
das
inc
sbb
sub
cmps
cmps
push
cmp
dec
push
push
lahf
inc
pop
cmps
dec
and
xor
fimul
xlat
(bad)
ss
mov
push
push
pushf
mov
test
jmp
fcmovnbe
jo
mov
or
cmc
xchg
sbb
cdq
push
jg
add
sub
movs
add
inc
sbb
mov
xor
pushf
pushf
inc
add
jl
ja
push
clc
jnp
cld
pushf
mov
mov
inc
movs
jl
jle
mov
sbb
in
inc
hlt
push
lahf
xchg
test
push
arpl
pushf
jle
out
xchg
pop
or
test
adc
imul
fucomi
adc
fcmovb
(bad)
jmp
xlat
loop
jmp
mov
jmp
jae
fistp
sbb
fcom
in
iret
shl
movs
and
pushf
jecxz
in
test
sbb
and
mov
mov
js
mov
jg
or
lds
mov
shl
int3
pop
push
or
cwde
sahf
cmc
pop
pushf
jl
mov
add
(bad)
mov
dec
sub
sub
inc
shl
mov
ret
jg
fcom
push
sbb
ss
sbb
xor
aad
jl
push
inc
ficomp
push
int
movs
or
inc
mov
loopne
bound
mov
adc
(bad)
cmp
pop
sti
pop
xchg
enter
xchg
xor
xchg
repnz
cwde
jmp
mov
mov
add
fmul
pop
dec
fisttp
jmp
xchg
out
(bad)
inc
movs
enter
inc
inc
repz
inc
idiv
mov
xor
sbb
into
or
scas
mov
mov
popf
mov
push
xor
adc
dec
rcr
dec
popf
mov
int
pushf
mov
out
xor
vxorps
bound
adc
fild
imul
fdiv
scas
(bad)
call
(bad)
test
push
movs
jbe
and
daa
loope
pop
mov
data16
xchg
aaa
(bad)
enter
pop
xchg
cmp
ret
fsub
mov
adc
mov
(bad)
adc
jge
push
add
pop
sub
pop
dec
xchg
inc
sub
mov
loopne
les
xlat
jg
mov
inc
mov
movs
movs
mov
movs
sbb
pop
push
xchg
jg
mov
xor
xlat
xor
fdiv
mov
mov
or
cwde
or
mov
mov
lods
jmp
cmps
js
shl
mov
mov
xchg
ror
(bad)
shl
pop
sbb
gs
pop
gs
add
xchg
jp
xchg
jne
int3
test
aas
test
pushf
rol
je
dec
xchg
pop
adc
int
outs
cdq
aas
push
rcr
fs
add
fiadd
push
je
scas
ret
stos
or
xchg
cmps
pop
dec
push
inc
mov
mov
daa
cld
cmps
retf
pop
jge
lea
jg
mov
xor
mov
add
(bad)
mov
xchg
sahf
sub
popf
dec
movs
dec
cdq
cmps
push
stos
cdq
cmp
sbb
adc
mov
popf
imul
imul
xchg
dec
shr
enter
xor
aam
in
and
inc
fcom
out
mov
test
clc
clc
imul
mov
sti
mov
mov
mov
call
push
adc
fcomp
mov
pop
mov
test
fwait
xor
sbb
mov
enter
gs
bound
test
sbb
sbb
push
rol
sahf
loopne
fsubr
xchg
xor
add
add
inc
lods
repnz
ret
sahf
fcom
popa
pop
inc
xchg
jns
les
push
sahf
adc
mov
and
test
xchg
or
or
jg
sbb
iret
xor
sub
mov
xor
sbb
mov
imul
int3
sbb
inc
(bad)
pop
(bad)
jae
ficom
call
inc
or
or
add
cwde
and
push
cmc
pop
mov
stos
inc
pop
adc
mov
aad
(bad)
push
pop
or
mov
clc
out
sub
sti
inc
nop
pop
sub
inc
jmp
(bad)
sbb
sbb
std
adc
adc
add
jmp
popa
mov
cmp
ficom
(bad)
ficom
pop
adc
fcomp
dec
xor
mov
push
jmp
push
xor
movs
mov
(bad)
out
aad
bound
adc
and
and
adc
or
outs
pushf
or
std
adc
mov
call
out
neg
js
mov
outs
jl
add
adc
popf
iret
enter
call
pop
mov
cwde
push
cmp
frstor
sbb
cmp
call
shl
(bad)
int
jle
sbb
out
mov
nop
mov
sahf
popf
repz
mov
pop
xchg
popf
movs
ficom
stos
push
cmps
sar
cmps
and
or
mov
mov
mov
cwde
movs
pop
fadd
jge
(bad)
ins
shl
into
pop
lods
popf
and
jge
dec
adc
adc
movs
jl
mov
jecxz
lea
popf
jmp
repnz
enter
in
cmp
dec
js
scas
or
test
es
pop
loopne
jmp
mov
inc
push
sub
daa
sbb
mov
cmc
sbb
sub
imul
mov
sbb
int3
add
push
jl
mov
in
xchg
outs
jge
pop
push
fcom
or
push
push
ins
or
sbb
shl
(bad)
jnp
js
mov
pushf
stos
jg
pop
mov
inc
xchg
pop
push
clc
cwde
call
pushf
aam
lahf
adc
mov
push
pop
xchg
xchg
ins
sbb
fistp
sub
aad
and
dec
pop
inc
clc
inc
mov
push
cmp
pop
push
cmc
adc
pop
add
aaa
cmp
nop
repnz
xlat
mov
adc
cmps
mov
sub
outs
xchg
in
cmp
fsubr
cmp
jae
sub
sti
nop
dec
push
ja
dec
fisub
pop
add
ret
int
jl
sbb
stos
dec
sbb
scas
push
jne
pop
lock
push
cmp
clc
mov
pusha
popf
mov
cmp
cwde
clc
pop
(bad)
xchg
mov
inc
mov
lods
sub
movs
call
nop
fimul
sub
sub
xor
cmp
sub
xchg
cwde
and
pushf
fcomp
(bad)
and
xlat
xor
sub
push
test
push
jg
jo
sbb
loope
cmp
inc
movs
sbb
adc
imul
rsqrtps
or
xchg
xchg
xor
pop
push
lea
pushf
xor
hlt
mov
lahf
movs
sahf
pop
mov
dec
mov
iret
jmp
popa
stos
les
dec
retf
clc
jb
movs
cwde
test
test
div
sar
pop
add
or
idiv
pop
sbb
inc
push
movs
test
adc
inc
mov
sbb
inc
dec
popfw
sbb
neg
sbb
sbb
adc
ret
sbb
mov
xchg
add
or
mov
lahf
and
mov
cmps
adc
cmp
lods
mov
dec
(bad)
in
push
push
xchg
dec
mov
mov
sbb
movs
in
add
and
sbb
test
fiadd
and
fisubr
or
xchg
popf
jl
pop
ror
xor
cmp
push
cwde
lds
sbb
aaa
push
sbb
pop
pop
test
push
cmp
fsubr
call
sbb
stos
aaa
pop
xor
in
and
lods
xchg
or
movs
mov
add
push
movs
fcomp
or
shr
jecxz
loop
sub
add
sbb
xchg
adc
das
and
fcomp
mov
imul
xchg
pop
cmps
push
mov
mov
mov
arpl
xchg
adc
cdq
fst
stos
pop
xchg
aad
xchg
sub
inc
xchg
jmp
fcomp
fimul
repz
jbe
push
or
mov
jo
fiadd
test
fwait
jmp
cmp
pop
iret
test
clc
popf
stos
fsubr
push
mov
stos
out
cmp
mov
fnstcw
adc
aas
xchg
in
cmps
ret
(bad)
adc
xchg
rcl
push
call
in
inc
test
enter
call
jo
pop
pop
adc
ret
pop
adc
jne
inc
lods
stos
mov
jne
add
mov
jmp
ror
add
inc
jle
ror
imul
enter
aad
fmul
iret
dec
inc
lods
pop
adc
cmps
rcl
or
ret
adc
inc
xchg
out
test
ret
ja
addr16
retf
(bad)
repz
jnp
mov
adc
call
pushf
arpl
inc
retf
int3
(bad)
and
arpl
inc
adc
pop
pop
push
dec
cld
pop
mov
pop
cmp
lods
adc
push
hlt
sbb
mov
popf
jl
hlt
in
mov
imul
in
out
ret
cmp
mov
dec
fcmovnb
data16
(bad)
push
xchg
xchg
pop
fadd
push
dec
mov
and
aam
mov
sub
or
cld
shl
imul
jle
sub
sub
or
mov
cs
stos
dec
out
enter
int
xor
ds
inc
xchg
enter
mov
cmp
push
and
cmp
in
clc
lock
push
in
call
adc
xchg
xchg
out
jmp
cdq
jp
nop
pand
pop
xchg
or
jle
cmp
sbb
adc
or
mov
pop
sub
and
push
sub
pop
test
mov
shl
push
nop
adc
jle
scas
xchg
or
(bad)
cld
mov
xor
mov
adc
cmp
aad
imul
dec
aas
fwait
sbb
mov
fiadd
rol
cmp
lods
addr16
and
test
adc
push
clc
aam
popf
in
mov
(bad)
mov
add
jo
aaa
sub
aad
inc
imul
jae
cdq
adc
test
fild
mov
or
mov
test
in
dec
lea
lea
mov
(bad)
adc
mov
int3
mov
test
popa
push
pushf
jmp
inc
aam
movs
cvtpi2ps
and
push
or
rcr
adc
xor
fdecstp
xor
jmp
aaa
lock
mov
xlat
sbb
xchg
jnp
int
aas
mov
pop
or
cmps
xchg
aas
push
call
mov
or
std
gs
push
mov
mov
imul
cld
sbb
jmp
pop
cdq
or
popf
cmp
test
mov
xchg
sbb
inc
call
(bad)
cli
test
(bad)
call
fcmovb
cmps
dec
in
dec
mov
push
rcr
cmps
sub
xchg
sub
xchg
mov
inc
hlt
call
cdq
fucomp
mov
jge
int
repz
mov
dec
fidiv
(bad)
enter
sub
call
xor
es
xor
sub
xchg
adc
inc
aam
mov
sbb
movs
leave
ret
mov
fcom
retf
sbb
adc
cli
pop
in
sub
test
sbb
call
retf
xchg
fadd
ret
fidivr
add
mov
xlat
and
fwait
inc
movs
shr
std
fisttp
add
mov
(bad)
out
and
cmp
ror
jae
jle
adc
mov
repnz
popf
(bad)
pop
dec
test
lods
pop
sar
movs
jmp
or
shr
scas
cmp
je
sbb
ss
out
mov
mov
jp
pop
cmc
sbb
adc
mov
ss
cmps
ret
mov
fisub
inc
(bad)
js
stos
mov
movs
ret
dec
fidiv
sbb
mov
or
fidiv
sub
push
dec
sbb
into
(bad)
or
push
test
(bad)
xlat
push
or
dec
and
dec
mov
mov
cmp
fs
hlt
fdivr
mov
ins
or
aam
add
fidivr
jmp
mov
sti
mov
out
out
sahf
push
out
sub
mov
pop
movs
mov
ror
or
icebp
daa
or
test
and
pop
fdiv
shl
jb
mov
and
pop
mov
sbb
in
ror
pusha
adc
nop
cld
inc
div
mov
test
mov
push
push
xor
mov
or
rcr
fsubrp
sbb
mov
stc
sub
aad
hlt
pop
pop
fld
pop
adc
ins
sub
js
xlat
add
clc
sub
add
(bad)
rcl
mov
mov
stc
xchg
(bad)
in
mov
sub
mov
cld
into
bound
out
adc
push
jmp
sbb
popa
in
xchg
lahf
jmp
sub
sub
cwde
pop
fbstp
xor
jl
je
push
add
pushf
push
ja
and
pushf
and
inc
adc
popa
add
ja
pushf
pushf
inc
stos
sbb
xor
(bad)
xor
mov
ja
jnp
stos
xlat
ficom
ja
xchg
inc
or
fbld
clc
lods
test
js
aaa
lods
cwde
test
cdq
lds
popa
mov
adc
xchg
push
mov
add
lahf
movs
call
xor
(bad)
pop
pop
popa
int3
xor
jbe
not
cld
nop
popa
sbb
and
in
or
sbb
add
jecxz
xor
jo
movs
call
rcl
inc
cli
xor
mov
inc
jbe
popa
mov
xor
aad
xchg
idiv
sbb
inc
test
mov
fild
scas
mov
rcr
sub
xor
pop
adc
mov
add
clc
icebp
mov
mov
mov
movs
cld
fbld
xchg
mov
mov
mov
fwait
aas
ins
push
lods
stos
test
xor
push
push
das
sahf
imul
sahf
test
mov
xor
daa
push
std
adc
ins
rol
lods
pop
and
mov
and
pop
pop
or
jns
push
jl
(bad)
sub
(bad)
leave
cdq
mov
call
test
ss
xchg
jmp
and
fcmovb
sbb
adc
arpl
mov
sub
push
adc
lods
jg
loopne
out
repnz
clc
ret
shl
gs
test
xchg
cmp
into
xchg
jb
ins
hlt
mov
mov
xchg
push
pop
mov
mov
movs
mov
(bad)
mov
test
rcl
and
sbb
sbb
(bad)
rol
and
sbb
fld
cdq
jl
xchg
xor
pmullw
dec
movs
add
into
jg
adc
push
cli
push
jl
jmp
(bad)
lds
sub
dec
sub
or
out
idiv
mov
enter
shr
call
sub
pop
adc
std
pop
(bad)
fimul
xchg
mov
cmc
neg
(bad)
test
push
daa
mov
sbb
movs
inc
jbe
fldenv
jl
stc
or
clc
mov
(bad)
mov
add
dec
out
dec
mov
out
pop
adc
inc
mov
or
inc
jb
not
xor
cmc
adc
sbb
stos
or
cmp
jl
daa
mov
fucom
push
xor
mov
mov
push
imul
mov
xchg
add
cwde
jg
dec
outs
add
ja
jmp
pop
scas
mov
jmp
dec
lods
or
pop
fsincos
pushf
pop
adc
xchg
aam
fcom
cmp
xor
inc
psllq
movs
pop
xchg
jle
mov
shl
loop
(bad)
jmp
mov
dec
in
jl
push
in
rcr
push
es
call
addr16
adc
loop
mov
imul
cmp
cmp
pop
fisub
popa
cdq
xchg
inc
cmp
test
inc
ins
sbb
lods
push
adc
cmp
push
shl
stos
scas
mov
jo
(bad)
pop
test
jl
push
add
imul
inc
sbb
mov
xchg
pop
mov
lods
and
mov
hlt
xor
div
out
loopne
(bad)
aam
stos
fimul
lds
lods
jecxz
lods
out
mov
movs
pop
mov
mov
ins
enter
xchg
jl
aam
test
or
cmp
mov
sbb
fdivr
dec
and
stc
sub
ins
mov
(bad)
sbb
mov
and
mov
loope
push
sub
mov
push
fisttp
rcl
sbb
enter
stos
mov
iret
pop
mov
sub
mov
pop
clc
adc
in
adc
fbstp
xchg
enter
jne
or
xchg
mov
fwait
mov
ds
sbb
fcomp
sub
xor
pop
or
mov
xchg
ins
mov
iret
(bad)
xchg
mov
int
inc
std
(bad)
jg
push
mov
fstp
jmp
sbb
cli
test
cwde
mov
js
push
test
nop
call
sbb
pop
ds
enter
xchg
mov
inc
cdq
lods
sbb
fs
dec
stos
fild
mov
retf
stos
imul
icebp
pushf
cmps
mov
mov
aas
repnz
xchg
jb
inc
xchg
sub
mov
push
inc
fincstp
sbb
imul
hlt
test
loop
jmp
(bad)
daa
sub
daa
clc
cmps
ds
ret
jecxz
jle
fistp
imul
stos
and
inc
adc
enter
fidiv
shl
movs
mov
push
mov
inc
dec
cmp
test
movs
or
je
add
fcomp
mov
sub
int3
mov
inc
jg
movs
cmp
or
mov
fldenv
mov
cld
pop
movs
adc
xor
or
inc
movs
add
call
pushf
fdiv
mov
movs
in
sub
sbb
in
jo
fcomp
mov
test
(bad)
nop
mov
cmps
loopne
and
js
or
clc
add
lods
sub
mov
movs
mov
add
mov
mov
push
add
sub
and
(bad)
mov
cmps
hlt
sub
call
mov
call
cmp
fdiv
or
jo
loopne
shr
mov
mov
pusha
retf
lods
sbb
or
pop
pop
and
mov
lods
pop
push
sub
mov
or
fisub
clc
inc
(bad)
call
fdivr
cmp
mov
(bad)
clc
xor
pop
fdivr
xor
and
mov
les
and
and
fxtract
xchg
or
loopne
mov
ins
push
and
xchg
mov
pop
sub
stos
sbb
nop
loopne
lds
dec
lock
or
test
mov
dec
mov
or
add
mov
inc
xlat
xchg
movs
adc
mov
movs
les
enter
(bad)
pop
out
xor
mov
(bad)
call
pop
(bad)
cmp
sbb
fnstenv
mov
add
pop
outs
mov
rcl
pop
mov
mov
sahf
popf
sbb
sub
fdivr
sub
(bad)
mov
sbb
jne
adc
sub
popa
sahf
mov
pushf
aaa
add
sbb
aaa
pop
sbb
stos
cdq
cli
mov
lock
(bad)
outs
sbb
shl
sub
and
lock
ss
shl
inc
jne
repnz
dec
rcr
jl
push
jle
idiv
and
mov
mov
mov
outs
pushf
dec
repz
pop
call
push
mov
or
out
dec
jge
xor
add
push
pop
or
adc
stos
repnz
mov
xor
fisttp
out
(bad)
fnstcw
mov
xchg
clc
mov
clc
pop
mov
iret
ins
or
test
xor
repz
mov
mov
test
sub
nop
mov
outs
xchg
nop
jl
stc
out
mov
repnz
and
rol
sbb
sub
dec
or
adc
stc
add
mov
or
bndldx
jo
jbe
cli
stos
mov
outs
inc
jo
mov
push
ds
sbb
cmp
mov
mul
pop
add
shl
push
clc
rcr
adc
and
adc
pop
test
pop
fdiv
mov
mov
lock
and
sbb
movs
fsubr
sub
inc
sahf
das
or
call
in
dec
jno
xchg
lock
add
mov
mov
sbb
pushf
mov
push
out
mov
shl
adc
pushf
nop
sbb
push
arpl
(bad)
jb
movs
or
das
int3
popa
cmc
sbb
fistp
out
lahf
mov
adc
out
lods
ret
or
inc
push
mov
mov
nop
mov
in
in
lods
mov
loop
xchg
rcl
ins
mov
je
mov
jmp
test
mov
in
aaa
xor
aam
shl
jne
(bad)
cld
mov
xor
test
mov
cmp
xor
xlat
cmp
mov
mov
shl
movs
ret
mov
sbb
add
fsub
movs
loopne
adc
pop
jbe
movs
push
mov
mov
movs
aas
pop
pusha
clc
dec
mov
movs
sub
outs
(bad)
adc
and
inc
sbb
clc
ins
(bad)
mov
jo
clc
and
sbb
fs
movs
mov
jno
pusha
mov
scas
push
(bad)
push
movs
jo
(bad)
(bad)
xchg
mov
sbb
jb
push
mov
and
jg
je
or
rcl
out
lods
xlat
cld
sahf
sti
stc
cmps
call
xchg
test
jnp
mov
test
aad
cmc
sbb
or
leave
push
sbb
jmp
dec
movs
mov
scas
(bad)
cmps
mov
aad
and
(bad)
sub
enter
sbb
or
sbb
or
int3
and
imul
or
movs
ins
mov
(bad)
pop
xor
movs
jo
mov
movs
pop
int3
mov
sbb
mov
repz
push
inc
mov
movs
pop
cdq
jl
dec
nop
push
adc
nop
ficomp
lahf
jge
mov
xor
(bad)
rcr
fidiv
xchg
lock
jbe
push
ins
bound
pushf
stos
test
add
push
cwde
iret
aad
inc
rcr
cmp
js
and
cwde
into
movs
shl
aam
mov
lods
in
mov
mov
mov
mov
xlat
and
mov
movs
dec
test
pop
(bad)
pushf
cmp
xor
pusha
jbe
push
mov
in
stos
fnstcw
out
push
test
pushf
js
popa
aam
clc
ss
add
add
add
mov
sbb
clc
(bad)
mov
stos
xor
rcl
ds
cli
mov
enter
(bad)
jno
inc
test
sub
sub
or
pusha
stc
or
shr
clc
adc
dec
jmp
inc
xchg
mov
loop
xchg
popa
aam
cld
ja
outs
stc
mov
ss
shl
xor
add
inc
clc
mov
jnp
fcmovbe
pusha
push
adc
and
xlat
sub
stos
sbb
hlt
mov
mov
clc
mov
jb
test
mov
das
clc
cmp
js
scas
mov
jl
mov
mov
loope
inc
sahf
push
fdiv
aad
push
ret
dec
pop
not
sbb
in
cmp
das
cdq
push
aad
mov
sub
add
xchg
dec
add
dec
movs
xchg
test
adc
push
enter
js
movs
adc
mov
fldenv
bnd
scas
and
jmp
or
in
mov
fidivr
fs
fsub
or
mov
in
jmp
jmp
cmps
rol
loopne
push
dec
loopne
pushf
push
in
push
jmp
sub
xor
pushf
mov
repnz
jle
or
xor
sahf
movs
lods
jp
push
popa
movs
mov
test
jle
mov
jmp
popf
mov
mov
movs
and
sahf
xchg
xchg
adc
int
xchg
add
cdq
xchg
mov
adc
xchg
push
sahf
sbb
lock
mov
cmc
pushf
fisttp
rcr
popa
not
mov
test
or
cdq
jle
dec
clc
mov
jge
out
mov
cld
xchg
push
cld
sbb
mov
or
pusha
sbb
(bad)
les
push
fadd
sbb
les
mov
mov
loopne
cmps
and
test
xor
push
pop
inc
xor
sbb
sbb
mov
div
mov
movs
push
jae
pop
add
xor
(bad)
js
scas
movs
out
sub
cdq
mov
add
sbb
fcomp
sbb
pop
dec
fdivr
sub
mov
sbb
jecxz
lea
lahf
xor
mov
inc
scas
in
push
dec
jo
sub
in
inc
mov
mov
in
fcom
dec
loope
rcr
and
mov
pop
cdq
call
(bad)
out
adc
jb
dec
movs
or
iret
dec
mov
adc
ins
js
movs
jae
fwait
stos
pop
push
mov
mov
sbb
adc
sub
(bad)
fisttp
js
add
popf
jl
mov
mov
add
mov
movs
pop
adc
jg
or
fdivr
fcmovbe
cdq
sbb
out
iret
mov
test
jmp
pop
ds
push
sahf
movs
inc
jnp
in
movs
sbb
test
lods
dec
(bad)
out
leave
loopne
xchg
stc
cmp
fst
gs
popf
out
jae
mov
daa
mov
dec
cwde
xchg
test
mov
sub
pop
inc
mov
jne
cwde
mov
adc
ja
pushf
in
dec
mov
sahf
pop
adc
and
adc
push
xor
(bad)
test
mov
mov
ss
pop
push
call
out
fdivr
in
mov
pushf
lock
fsubr
push
sbb
cmps
call
aam
mov
lods
int3
jmp
fwait
ret
sar
xchg
stos
mov
mov
xchg
mov
out
xchg
es
xor
pop
aam
cmps
cmp
pop
sub
push
jg
cmps
jl
jecxz
call
mov
stos
call
mov
stc
pop
int3
jl
mov
cmp
fist
sbb
jecxz
sbb
mov
pop
push
cmps
iret
pushf
sub
cwde
(bad)
movs
sbb
fist
or
ss
pop
in
adc
sahf
pop
retf
jp
mov
push
fsubp
push
mov
fadd
push
or
mov
js
inc
add
les
dec
daa
cwde
retf
out
jle
cmp
ret
pop
xchg
adc
(bad)
mov
xchg
mov
pop
mov
movs
inc
cmps
jg
mov
mov
rcr
fldenv
xchg
retf
sahf
dec
gs
imul
inc
push
push
inc
cs
mov
shl
ficomp
mov
enter
lahf
mov
fwait
movs
jmp
cmps
push
or
es
jb
sub
stc
xor
and
mov
add
mov
ss
(bad)
push
sbb
xchg
outs
xor
mov
sbb
popf
scas
stos
fild
push
aas
mov
dec
ficomp
scas
xor
jge
iret
es
push
je
enter
add
jl
push
or
mov
jecxz
jecxz
adc
cmp
(bad)
pop
sbb
js
mov
cld
dec
pop
in
or
(bad)
stc
les
mov
mov
scas
mov
in
fs
mov
sub
mov
out
sbb
icebp
in
add
dec
cmp
pop
sbb
jmp
xor
fistp
mov
rcr
cmp
cmovbe
pop
(bad)
pushf
cwde
lahf
mov
xchg
cmps
aaa
loope
mov
jo
iret
dec
test
addr16
mov
test
aad
pop
mov
dec
push
xchg
sub
test
in
mov
ja
pop
movs
(bad)
popf
(bad)
test
test
mov
jnp
fadd
sub
inc
test
xchg
or
repz
sbb
xor
push
fidiv
dec
mov
mov
addr16
jge
jecxz
mov
xor
fdiv
jmp
inc
xchg
test
movs
xchg
pop
movs
mov
sub
cwde
push
(bad)
xchg
inc
and
movs
scas
mov
ins
jge
cmp
(bad)
clc
aad
shl
div
jge
sub
test
mov
mov
std
retf
jae
dec
adc
loop
jp
sbb
movs
inc
inc
push
sahf
mov
fmul
inc
fistp
jmp
mov
mov
stc
pushf
jns
adc
iret
test
fcomp
js
(bad)
sub
cmp
push
sar
sub
lods
jl
lahf
jmp
sar
add
in
jle
sub
lods
jl
mov
(bad)
mov
mov
pop
jmp
mov
xchg
fidivr
mov
pop
inc
mov
pop
(bad)
movs
push
and
imul
cwde
mov
mov
mov
mov
scas
pop
mov
scas
jmp
jge
in
fs
pop
or
mov
(bad)
nop
aam
fisub
pop
(bad)
jge
js
gs
mov
imul
ins
popf
cwde
mov
into
fsubr
and
ss
mov
sbb
rol
clc
outs
popf
sbb
movs
mov
mov
mov
mov
jmp
sbb
fsub
mul
jmp
mov
mov
cmp
ja
and
cmps
cdq
sbb
leave
in
ret
cmps
and
jno
push
xor
(bad)
mov
fdiv
dec
mov
enter
(bad)
shl
sar
cmps
pop
jns
sahf
mov
test
outs
into
mov
mov
sbb
push
pop
mov
movs
cld
movs
or
jmp
dec
sbb
fcom
and
pushfw
ret
rcl
repnz
(bad)
test
xlat
ins
and
inc
jbe
xchg
imul
addr16
cld
push
mov
aas
mov
lds
mov
jp
mov
or
inc
pop
sahf
movs
(bad)
mov
jg
sbb
fdivrp
inc
push
loope
cmps
sbb
jnp
ret
cmc
popa
sbb
ret
dec
xchg
adc
icebp
jne
lea
xchg
movs
(bad)
loop
pop
movs
fs
push
cpuid
inc
repz
inc
call
sar
sbb
jmp
inc
push
fdiv
and
sub
movs
dec
sar
mov
je
jmp
loope
pop
xor
movs
rcr
dec
xchg
pop
dec
cmp
mov
mov
mov
push
movs
(bad)
std
jbe
adc
lock
add
les
mov
out
mov
stos
add
lds
xchg
mov
test
add
popf
lds
sbb
xchg
iret
mov
xchg
nop
lods
add
cwde
punpcklbw
cmp
push
mov
sbb
xor
dec
cmps
mov
dec
jecxz
movs
xchg
mov
jbe
sub
mov
mov
mov
in
push
mov
ficomp
mov
pop
jo
fwait
hlt
jae
pushf
cmps
ins
leave
in
pushf
jl
ret
mov
jmp
fdivr
push
push
les
xchg
movs
mov
mov
fnstenv
mov
dec
and
push
mov
movs
pop
and
or
lock
enter
int3
push
cmps
and
ror
out
jl
(bad)
cmps
mov
mov
scas
loopne
fsubp
cmp
popa
or
cmps
jg
xor
mov
movs
jnp
push
cdq
mov
adc
push
mov
xchg
es
out
nop
sahf
mov
clc
push
popf
fadd
xor
push
popf
out
movs
fs
mov
fsubr
ss
gs
fcmove
out
test
xchg
jbe
(bad)
movs
and
inc
ins
xchg
aam
ret
enter
aam
cwde
and
jae
add
inc
(bad)
mov
dec
cmp
push
jl
(bad)
fsub
out
movs
sbb
clc
sbb
dec
sbb
dec
pop
inc
sti
test
jmp
sbb
sbb
jo
test
mov
and
jl
mov
into
lahf
(bad)
dec
(bad)
mov
adc
leave
call
lahf
jl
or
gs
cmp
xor
cmp
(bad)
enter
xchg
push
movs
imul
iret
movs
sahf
(bad)
mov
jg
xor
in
adc
movs
les
pop
mov
fwait
push
out
pushf
and
pushf
data16
sbb
arpl
fidivr
xor
jg
lods
mov
(bad)
xchg
pop
(bad)
mov
test
pop
push
cmp
mov
call
pop
out
push
out
ficomp
mov
mov
mov
or
retf
sbb
into
pop
push
push
dec
cmp
movs
sub
aad
pushf
xchg
push
jle
addr16
js
xchg
rcl
cdq
cdq
int3
call
fwait
mov
mov
in
pop
jge
jne
push
ss
vdivsd
sub
add
inc
clc
cmps
repz
mov
sbb
or
cmc
sbb
lds
retf
xchg
fadd
xor
mov
add
aad
ins
or
sbb
cdq
mov
retf
mov
popf
mov
fisubr
or
mov
f2xm1
mov
cmp
in
xchg
jns
pop
mov
data16
sub
leave
mov
cmps
add
jg
mov
cmps
fs
push
ss
jo
dec
or
lods
call
ins
popf
xchg
or
jbe
les
cmc
adc
fldpi
inc
xchg
cmps
loop
sbb
mov
xchg
scas
mov
sbb
xchg
enter
sbb
ror
sbb
add
pusha
imul
jbe
mov
sbb
and
sbb
or
jg
and
out
mov
push
mov
retf
push
jmp
stos
jl
fwait
sbb
(bad)
jmp
test
dec
jge
pop
out
fsub
nop
dec
outs
xchg
xchg
fnstsw
mov
js
or
call
aad
pushf
mov
fucomip
and
cmp
cmp
repz
xor
sbb
xchg
mov
pop
in
mov
mov
sub
jg
push
int
mov
movs
add
mov
shr
jae
test
lahf
fs
push
scas
jb
push
sar
fcomi
sbb
sbb
add
xlat
and
add
jge
imul
mov
push
sti
cwde
aad
aam
into
in
fnstenv
dec
inc
mov
sbb
pop
add
retf
jg
or
xlat
test
mov
push
pop
xor
push
mov
test
sub
sub
sub
aad
pop
pop
pop
(bad)
fidiv
jecxz
pushf
fdiv
pop
sbb
pop
fdiv
mov
push
mov
sub
movs
aam
enter
out
mov
or
test
sbb
(bad)
jge
outs
popa
clc
test
test
add
fnsave
ror
lds
fnstsw
ins
addr16
(bad)
mov
rcr
adc
data16
xchg
stos
sbb
push
jl
xor
sub
stc
dec
aaa
cmps
stos
pop
pop
push
fsub
xlat
test
add
push
and
mov
fsub
(bad)
in
mov
mov
enter
sbb
mov
lahf
pop
push
push
test
loop
movs
jns
push
jl
xchg
fist
xchg
les
xor
and
fsub
sbb
pushf
cmp
fbld
cmps
out
stc
fmul
inc
test
cmp
stos
(bad)
bound
rol
pusha
mov
stos
inc
push
pop
xlat
lods
in
push
ins
dec
jle
stc
mov
aas
or
pop
popf
jl
mov
cld
dec
mov
sar
lods
test
addr16
or
inc
out
cmps
stc
fidiv
cmps
mov
movs
(bad)
mov
mov
outs
test
jg
das
pushf
push
(bad)
in
mov
mov
mov
test
daa
cwde
mov
test
mov
add
jl
in
mov
xor
(bad)
dec
ret
dec
loopne
out
and
mov
pushf
mov
dec
cmp
push
into
adc
fxch
sahf
shl
add
out
lea
test
or
mov
push
add
push
sub
movs
ja
mov
iret
sub
jl
cmp
jp
mov
rcr
sub
dec
mov
ficomp
jbe
xchg
clc
cmp
cmps
dec
fist
dec
mov
mov
fs
and
aad
adc
fstp
jbe
cwde
inc
mov
fucomip
jae
inc
add
sahf
sbb
jns
cmp
or
fadd
cmp
and
fcomp
pushf
sbb
sub
xchg
or
fs
xchg
push
ja
lds
xchg
(bad)
lahf
pushf
iret
sbb
or
push
and
pop
(bad)
aam
in
ins
and
aam
jl
mov
lods
movs
popf
mov
mov
cs
mov
pushf
stos
jno
mov
cmp
inc
setl
jae
cs
mov
(bad)
xor
sbb
test
call
mov
stos
ret
sub
adc
mov
adc
fldenv
cmp
xchg
inc
pop
adc
cmps
in
fisub
pop
nop
jl
push
xchg
(bad)
cmps
push
xchg
inc
mov
and
nop
and
es
sub
ja
mov
or
mov
cwde
mov
add
adc
cmp
fbld
cmps
cmp
push
adc
push
int3
cld
mov
pop
xor
sbb
cmc
adc
stos
(bad)
push
arpl
ds
sbb
fcom
sbb
pop
jg
mov
adc
adc
std
mov
jle
xor
fdiv
xchg
push
xor
loop
lds
mov
adc
mov
cmp
stos
aas
pop
mov
or
push
call
mov
push
mov
push
test
fbstp
cmp
jg
(bad)
enter
mov
or
icebp
xchg
sbb
pusha
sahf
cdq
and
cwde
lea
push
xor
lods
or
int3
movs
cmps
mov
inc
retf
call
div
sub
fsubr
or
loope
jno
or
jns
lods
sbb
mov
mov
xchg
mov
sbb
je
idiv
test
and
push
movs
ins
and
sbb
nop
and
movs
daa
push
mov
fsub
sbb
inc
mov
fsubr
aam
adc
js
lods
repz
mov
(bad)
into
ss
out
loopne
icebp
scas
inc
cdq
lds
ss
mov
jg
pop
mov
inc
enter
cmp
(bad)
sti
mov
movs
push
leave
in
pushf
mov
sub
mov
enter
daa
call
mov
retf
in
mov
call
mov
or
div
fsubr
aaa
fsub
add
lods
xchg
stc
fidiv
mov
cmps
jg
mov
sbb
adc
lds
sbb
jmp
fcomp
pop
mov
jecxz
div
mov
mov
mov
and
mov
mov
mov
test
es
jbe
mov
dec
mov
mov
mov
pop
or
push
scas
test
adc
mov
rcr
jmp
dec
out
inc
jg
loope
cmps
lahf
(bad)
mov
push
loop
nop
mov
mov
lahf
fisubr
scas
jmp
xchg
out
inc
xlat
sub
outs
jne
mov
sti
test
or
cwde
jp
test
test
mov
ret
mov
shr
cmps
(bad)
and
cmp
iret
rcl
div
push
mov
inc
push
cmp
bound
aaa
(bad)
fs
out
and
outs
call
stos
xchg
int
scas
stos
jg
xchg
cmps
pop
stc
hlt
pop
xor
stos
loop
pop
cld
mov
imul
int
(bad)
cwde
inc
jmp
sbb
movs
adc
adc
sub
jl
(bad)
jg
fld
push
xlat
add
and
mov
fisttp
adc
push
cdq
mov
adc
mov
lahf
sbb
fwait
movs
xchg
push
fwait
fwait
cmp
sbb
je
call
push
stc
lds
repz
mov
pop
and
add
cli
jmp
and
mov
jbe
mov
clc
pop
repnz
(bad)
mov
xor
js
ficomp
ffreep
add
sub
sub
sbb
ins
mov
mov
sbb
sub
movs
adc
dec
popf
pop
sbb
xchg
lods
mov
cmps
mov
mov
out
cwde
cwde
fstp
repnz
aaa
shl
pop
pop
add
fwait
cmc
and
cmp
shl
xor
add
adc
ss
imul
sub
jg
bts
gs
pop
sbb
inc
mov
lods
daa
sbb
aad
ret
lods
cdq
std
scas
mov
pop
(bad)
lods
and
inc
push
cmp
mov
mov
mov
repnz
and
fist
movs
pop
sbb
in
mov
jge
cmps
jo
iret
sbb
repnz
ss
xor
sub
jo
adc
push
and
nop
ins
xchg
push
pop
mov
adc
ret
sub
mov
mov
push
js
add
call
pop
mov
lock
repz
jae
(bad)
(bad)
outs
push
mov
call
test
mov
call
cld
sbb
iret
movs
ret
and
lahf
pop
jae
shl
fidiv
push
mov
jae
mov
dec
fcom
and
adc
mov
pushf
ret
mov
fisttp
mov
fsubr
sbb
mov
adc
dec
mov
repz
sbb
fldcw
popa
pusha
and
aaa
cld
pop
scas
xchg
les
std
mov
adc
jge
mov
and
retf
aad
cmps
movs
jnp
or
imul
mov
icebp
es
(bad)
scas
pop
adc
and
mov
idiv
sub
inc
fsub
xor
stos
mov
mov
xchg
cmp
mov
sub
xchg
fnstenv
mov
fiadd
aad
popa
les
ss
in
lods
gs
fsub
mov
movs
mov
loope
icebp
fadd
and
cwde
in
inc
sub
cmps
xchg
into
mov
fdivrp
ror
stos
test
in
inc
hlt
fist
inc
pop
nop
pop
shl
mov
(bad)
and
jo
push
(bad)
cmc
pop
push
fstp
mov
ss
mov
and
push
jg
inc
ins
(bad)
mov
adc
inc
inc
dec
jae
add
mov
stc
inc
scas
jp
xlat
call
out
(bad)
fisubr
pop
aam
mov
dec
les
xor
cmp
add
out
inc
jnp
(bad)
int3
mov
pop
popw
enter
and
and
xchg
dec
fs
jge
mov
dec
xor
jmp
lahf
pushf
or
xchg
xchg
xchg
sti
jecxz
call
mov
cmps
jl
xor
inc
jmp
jmp
js
xor
mov
or
adc
js
cmps
mov
pop
(bad)
cmc
movs
cmp
jmp
mov
shl
lods
jbe
imul
cmp
mov
aad
call
pop
loope
stos
(bad)
pushf
sar
hlt
adc
xor
pop
inc
jnp
pushf
fistp
cdq
lods
leave
mov
adc
in
adc
lods
rcr
inc
mov
inc
sbb
mov
jl
bound
outs
mov
or
jl
das
push
jle
mov
add
dec
sbb
nop
dec
sub
data16
pop
fs
fidivr
jo
ins
sbb
popa
movs
mov
js
sbb
add
bound
sbb
ret
and
adc
js
mov
dec
mov
fist
movs
push
pop
pop
pusha
clc
js
mov
mov
and
mov
pushf
mov
mov
js
mov
push
stos
sbb
dec
mov
adc
das
mov
mov
xchg
sub
popf
xchg
sar
cmps
(bad)
xor
dec
and
mov
fcomp
cwde
cwde
mov
shl
and
aam
jge
cwde
sub
popf
jns
arpl
popf
add
sub
(bad)
add
pop
jmp
pop
or
mov
add
xchg
test
pushf
lock
cmp
mov
pop
(bad)
rcr
fdiv
sbb
repnz
(bad)
mov
inc
add
mov
(bad)
data16
pop
adc
mov
mov
and
sbb
cmp
out
adc
jae
mov
mov
ficomp
xchg
jo
cli
pop
mov
pusha
sbb
push
sbb
jmp
movs
lods
push
out
repz
(bad)
cmc
movs
mov
jl
aas
scas
js
fcmovu
ins
ja
sahf
(bad)
data16
sbb
mov
mov
ins
aad
jl
jmp
sbb
lahf
sbb
arpl
mov
sub
dec
jle
jne
mov
xchg
mov
call
fst
mov
int3
and
xor
(bad)
cmp
fistp
(bad)
mov
pusha
lods
ss
push
sbb
xchg
mov
(bad)
in
and
lods
push
into
lds
popf
cmps
pop
mov
push
sub
jl
sub
scas
mov
xchg
ret
jge
clc
aaa
test
mov
mov
sbb
lods
sbb
pop
fstp
mov
mov
movs
jno
inc
jbe
ret
mov
mov
movs
fsub
push
sub
mov
pop
scas
cmps
mov
adc
mov
mov
jl
movs
mov
mov
cli
inc
sub
jge
enter
xor
pop
idiv
arpl
fnsave
jl
mov
stos
jl
ss
sub
pop
sbb
mov
ss
lods
sub
je
jmp
fsub
aad
cld
int3
push
and
jl
mov
cmps
dec
movs
loopne
out
in
(bad)
mov
rcr
stos
sub
dec
push
mov
pop
int3
inc
xchg
sub
sbb
add
cld
push
xchg
stc
pusha
sbb
aad
sbb
fwait
mov
sti
leave
scas
cmp
mov
mov
cwde
out
jo
cdq
movs
pop
mov
stos
mov
movs
cmps
dec
in
shl
mov
add
inc
movs
leave
mov
cmp
jmp
mov
push
pop
mov
jl
sar
movs
and
mov
cmp
scas
in
jge
js
pop
inc
push
dec
mov
in
sub
pop
jecxz
clc
test
scas
or
jge
xchg
call
mov
retf
cmps
mov
clc
mov
mov
mov
sub
sbb
mov
sbb
adc
mov
je
pop
(bad)
mov
idiv
sbb
pop
in
dec
mov
cmp
ret
add
pop
pop
cmp
loop
std
cmps
pop
mov
jbe
xchg
mov
rcr
mov
pop
test
movs
pushf
cwde
shl
and
cmp
xor
rcl
xlat
mov
scas
test
in
mov
xor
test
scas
mov
mov
pop
sbb
sahf
cld
test
pusha
mov
idiv
scas
ficomp
outs
sbb
mov
std
es
fistp
lods
dec
sub
stos
jecxz
mov
je
push
ror
mov
jo
out
jecxz
retf
cmps
int
push
mov
ins
popf
shl
(bad)
int3
mov
xlat
push
retf
xchg
loop
adc
jecxz
into
js
mov
pusha
jl
jecxz
int
pop
jnp
pop
dec
add
in
and
mov
push
fst
xchg
mov
sub
cmps
xchg
mov
ret
fdiv
aaa
mov
mov
cwde
and
cmp
stos
mov
cmc
mov
loope
inc
pop
addr16
mov
push
sbb
jnp
mov
mov
jl
stc
pop
rcr
aam
jl
stc
xor
jbe
scas
add
mov
(bad)
pushf
mov
in
lods
xor
and
jnp
cmps
mov
sahf
loope
int
int3
mov
xor
and
jbe
pop
xor
loopne
int
inc
es
cwde
sub
xor
jnp
cmps
and
jl
loope
int3
cmps
push
lods
and
mov
push
fcom
sbb
and
test
mov
jns
movs
and
or
movs
cmps
cmp
mov
int3
mov
pop
enter
pusha
not
je
mov
xlat
cmp
movs
movs
xchg
sahf
mov
sar
push
jmp
push
mov
xor
add
push
xor
push
adc
sub
mov
sbb
in
pop
xor
mov
fisttp
hlt
sub
adc
inc
ds
mov
xchg
nop
pusha
mov
retf
loope
das
cdq
push
pop
or
punpckldq
pop
call
push
pop
xchg
in
mov
pop
sbb
xchg
test
lahf
push
clc
addr16
scas
ret
fnstenv
ins
mov
mov
dec
mov
jl
pop
aas
sub
pop
inc
and
lds
les
sahf
aam
and
out
dec
pop
popf
push
lea
ret
and
into
mov
fadd
mov
lahf
movs
xchg
mov
xchg
mov
popf
ss
dec
pop
cwde
xchg
adc
sub
dec
aad
mov
pop
movs
jno
aam
mov
les
cwde
fxch
jb
xchg
sbb
pop
mov
xchg
mov
pushf
repz
mov
jmp
(bad)
stos
aad
pushf
mov
sbb
repnz
xchg
(bad)
imul
pop
sahf
hlt
pop
fcomp
(bad)
mov
movs
movs
cmp
and
xchg
daa
aaa
mov
push
(bad)
test
sbb
xlat
int3
loop
jnp
in
rcr
in
cs
mul
jae
cmp
popf
fbld
cdq
and
dec
cld
cmp
fcomp
fwait
sahf
out
xor
imul
inc
ds
ficomp
dec
lock
inc
leave
in
add
xor
das
push
les
repnz
fwait
or
jae
inc
mov
and
inc
dec
clc
je
lahf
je
call
mov
enter
adc
rcr
in
inc
popa
test
nop
jle
jo
int3
fdiv
mov
mov
mov
popf
sub
mov
lea
scas
ret
sub
sbb
test
and
jle
mov
add
or
loop
add
movs
mov
lods
out
cmc
mov
add
or
scas
jle
stc
mov
out
lea
stc
push
dec
movs
fadd
mov
neg
fdiv
es
aas
arpl
enter
xor
enter
sub
sub
sbb
jg
inc
(bad)
arpl
and
pop
add
in
in
fdivr
mov
in
je
mov
enter
pop
ror
fs
or
jmp
clc
cs
loopne
mov
test
cdq
les
enter
jmp
and
inc
pop
or
mov
adc
push
test
stos
imul
pop
sub
or
retf
(bad)
loopne
add
or
add
lods
sbb
pushf
mov
popf
cdq
jg
push
jbe
cmps
hlt
cdq
sbb
iret
xchg
ret
iret
in
sub
push
add
aad
movs
mov
hlt
test
int3
sti
lahf
daa
mov
cmps
pop
and
sub
fxch
pop
pop
test
pop
jmp
pop
mov
pushf
inc
sbb
cmp
mov
cmps
aam
dec
movs
mov
adc
ficomp
fcomp
mov
fcom
out
(bad)
sub
ret
sar
imul
cmp
add
aam
mov
mov
xchg
and
push
popf
popa
pop
push
xchg
hlt
xor
fwait
or
cdq
cmp
sub
and
nop
push
jb
(bad)
out
cmp
call
jle
jl
push
mov
or
fucomi
(bad)
mov
fs
loop
mov
pop
jo
aas
jmp
popa
fcomp
dec
shr
in
sbb
inc
jle
jg
stos
imul
push
outs
hlt
pushf
popf
int
in
cwde
mov
cmp
mov
int
pushf
nop
jl
mov
icebp
xor
sbb
inc
shl
sbb
sahf
inc
pop
(bad)
jmp
adc
movs
xchg
ret
(bad)
in
loopne
xor
ja
xor
retf
std
fisub
call
add
hlt
adc
or
or
ins
fist
inc
mov
adc
adc
shr
jg
cs
mov
lds
fbstp
mov
loopne
cmp
into
xchg
in
das
ret
mov
jl
mov
sbb
dec
adc
lods
adc
fisub
xchg
add
sub
pusha
or
sub
cwde
iret
sets
mov
adc
xlat
xchg
scas
movs
jmp
test
(bad)
jle
nop
pop
jl
or
xor
and
lea
fmulp
pop
loope
push
and
push
sub
xchg
pusha
xchg
push
repz
pop
mov
call
cmps
sahf
ja
pop
pop
push
int
add
jp
sbb
ja
sub
mov
pop
cmps
cmc
mov
xor
mov
sahf
hlt
inc
loop
mov
add
iret
push
push
int3
mov
and
push
add
mov
mov
ss
pushf
push
mov
js
push
pop
cmp
jle
(bad)
sbb
fsub
jmp
pushf
lahf
mov
jl
inc
dec
xor
push
fild
pushf
das
inc
sbb
enter
dec
mov
std
push
pop
pop
es
xor
repnz
sar
mov
push
pop
shl
js
mov
or
mov
sbb
jae
es
adc
cdq
cmp
sar
fisubr
xor
lods
loop
push
mov
cmp
call
sbb
jmp
xchg
jb
and
inc
jae
sahf
movs
dec
mov
fcom
add
out
sub
loope
adc
xchg
movs
push
rcl
push
pop
(bad)
inc
inc
mov
rcr
out
aad
adc
fcmovb
jle
ss
mov
sbb
iret
mov
cmc
leave
and
fyl2xp1
inc
push
das
cld
mov
cdq
dec
add
jp
xor
aad
xchg
adc
jg
fnclex
or
pop
sbb
shl
test
mov
and
in
mov
sbb
cwde
mov
mov
shl
loopne
lods
cmp
adc
hlt
movs
mov
test
js
jno
js
dec
xchg
xchg
ja
jmp
fadd
push
jns
mov
pop
mov
loop
xchg
sbb
mov
push
pop
shl
mov
hlt
add
cwde
jge
test
jl
sbb
xor
hlt
test
jbe
jmp
enter
add
or
clc
mov
sbb
sbb
or
ds
mov
mov
inc
jae
fs
loopne
and
(bad)
pop
sub
push
sub
sub
mov
and
xor
xor
xor
mov
and
sbb
dec
jns
push
ss
test
aad
mov
sbb
mov
ficom
int3
mov
inc
dec
mov
mov
xchg
repz
push
and
movs
mov
sub
cmps
push
or
movs
fsub
lds
mov
mov
mov
je
movs
xchg
(bad)
mov
mov
push
jae
cdq
fstp
jg
(bad)
hlt
aam
lds
jno
daa
repz
and
cmps
adc
inc
aad
pop
jl
rcl
mov
pop
test
enter
lds
or
xchg
sub
clc
mov
lds
cmp
or
popf
jb
inc
sub
jmp
dec
stc
sbb
lahf
push
(bad)
les
jae
outs
mov
adc
lods
or
cwde
adc
pop
js
mov
scas
adc
jae
pop
xchg
ja
pop
jecxz
mov
pop
ficomp
mov
(bad)
jns
or
mov
lods
mov
pop
(bad)
test
lods
jmp
mov
pop
es
push
dec
loopne
sahf
xchg
nop
loop
imul
cmps
fcomp
sub
and
hlt
mov
jecxz
scas
pop
shr
adc
sbb
scas
(bad)
xchg
inc
pop
or
cmp
jmp
into
mov
mov
cwde
adc
fwait
or
hlt
mov
mov
fwait
xchg
jo
movs
scas
push
lahf
or
call
mov
fsubr
push
hlt
adc
xchg
push
sahf
aaa
shl
cmp
pop
mov
mov
popf
enter
pop
repnz
pop
adc
fnstsw
cmp
mov
pop
retf
lods
pop
adc
xlat
(bad)
repnz
mov
jmp
adc
or
sbb
fwait
adc
popf
adc
xchg
stos
out
push
jp
test
and
sti
and
dec
cmp
fcmovnbe
adc
movs
jmp
stos
fsub
lds
adc
or
sub
loopne
or
loopne
xchg
inc
int3
pop
bound
sbb
ds
push
icebp
subps
dec
ja
ror
dec
and
jl
addr16
jle
pop
cmps
repz
add
into
push
(bad)
push
and
mov
rcr
cmp
xlat
shl
imul
ds
out
das
pop
aas
xlat
cmc
xor
xchg
out
repz
int
push
popf
adc
cdq
sbb
cdq
popf
mov
cmps
jl
or
xor
fwait
sbb
std
jmp
xor
jb
shl
push
add
stos
pop
xchg
lock
lods
shl
cmp
repz
cmp
jb
and
xchg
and
idiv
sbb
stos
ins
or
and
xchg
jb
nop
push
sub
mov
enter
fist
lahf
mov
(bad)
in
sahf
repnz
nop
scas
xchg
jmp
inc
mov
(bad)
fcom
xchg
mov
mov
in
dec
or
or
cmps
repnz
mov
jl
shr
cwde
inc
add
(bad)
movs
lods
xor
xor
stos
mov
lds
pushf
scas
mov
fcom
fstp
add
jb
loopne
jno
or
push
es
cwde
sti
cli
mov
mov
jae
test
lahf
adc
xor
movs
(bad)
fistp
xchg
gs
cmps
sbb
adc
sbb
mov
call
popf
push
and
xchg
fidiv
cmp
add
idiv
std
or
movs
test
in
scas
cmps
lods
stos
inc
lock
xor
push
cmp
push
or
daa
sub
popf
in
neg
or
daa
jbe
loope
and
jg
and
mov
jg
cmp
pop
pusha
mov
mov
je
inc
xchg
sbb
sub
clc
out
hlt
push
(bad)
inc
xlat
lock
outs
xchg
lods
ja
adc
addr16
lds
xor
mov
addr16
xor
sbb
pushf
or
subps
mov
and
fcomp
dec
test
out
ins
push
fiadd
(bad)
loope
ins
jl
push
scas
cmps
xchg
jg
(bad)
fstp
repnz
push
lahf
sbb
or
sub
lahf
dec
fstp
xchg
test
arpl
cmc
in
out
repnz
shl
aad
sub
movs
mov
dec
dec
jo
jmp
mov
push
jp
jo
out
int3
ror
(bad)
fsub
pop
shl
inc
rol
cmp
daa
aam
or
loop
or
cli
adc
stos
pushf
mov
std
cli
or
push
push
xchg
pushf
call
push
dec
xor
stos
test
in
xchg
jp
dec
jo
or
je
stc
cmc
out
add
pop
loopne
push
lock
loopne
sbb
fcomp
inc
in
jmp
inc
mov
inc
xor
inc
shr
loopne
pushf
fdivp
jl
xlat
fimul
jecxz
and
sbb
pop
hlt
jbe
fsubr
in
mov
lea
test
mov
jmp
mov
movs
fistp
push
xchg
inc
jmp
std
mov
ins
cld
mov
mov
cmc
pop
cli
test
fisub
cdq
jns
pop
(bad)
mov
cmp
mov
pop
or
dec
nop
fs
jle
fs
es
mov
clc
adc
pop
mov
add
add
jns
rep
inc
lock
jl
movs
adc
xchg
push
push
xchg
sub
xchg
mov
mov
enter
nop
adc
inc
test
dec
lahf
mov
fdivr
push
shl
cmp
in
test
adc
cli
pop
pushf
rcl
xchg
inc
inc
xchg
jp
bound
in
scas
pop
jae
(bad)
pusha
mov
out
cmps
and
sbb
add
test
or
movs
sti
in
repnz
dec
fsub
lea
xor
pop
mov
std
mov
je
cmp
mov
sbb
jbe
lods
aad
std
mov
fnsave
cmp
in
js
xor
ss
(bad)
movs
jecxz
loopne
mov
cmps
lods
sub
(bad)
mov
adc
popf
fsubr
sbb
dec
(bad)
(bad)
aam
test
movs
dec
xchg
int
nop
mov
aad
popf
fadd
sbb
xor
shr
push
jecxz
and
int
pusha
popf
mov
xor
loop
xor
aaa
add
add
lahf
call
clc
int
cwde
and
adc
push
lods
sbb
or
inc
push
mov
mov
pop
mov
mov
sub
movs
push
xchg
enter
pop
and
ins
xor
push
mov
test
es
js
(bad)
in
mov
cwde
ja
mov
sbb
add
add
ficom
cmp
mov
push
setl
adc
(bad)
test
aam
cmp
std
inc
or
or
fsub
test
clc
popf
mov
das
mov
shl
retf
call
ins
fwait
dec
mov
mov
lahf
mov
nop
mov
xchg
sub
je
mov
jmp
cmps
clc
in
les
pop
and
fchs
fadd
push
aam
mov
sbb
sub
data16
mov
popf
lods
push
mov
and
mov
les
mov
leave
dec
cld
popf
cmps
xchg
pop
lock
je
fwait
movs
pop
xchg
jecxz
rcl
mov
sbb
outs
out
call
sbb
pop
lods
or
fbld
call
xor
jnp
(bad)
and
push
sub
inc
out
sub
jl
popf
sbb
sub
sub
cmp
mov
add
jno
mov
cwde
jmp
or
mov
lods
aam
out
cmp
aad
(bad)
sub
stos
push
sub
adc
js
xchg
jge
sub
mov
sbb
jmp
call
adc
and
hlt
and
cmp
add
push
mov
pop
and
lock
xor
pop
and
mov
stos
lods
or
cmp
push
mov
in
mov
jmp
xchg
mov
and
mov
mov
and
jmp
inc
sub
sbb
mov
sub
popf
cld
sub
inc
dec
xchg
clc
movs
movs
adc
popf
and
sub
lock
push
js
jmp
fwait
out
fxch
inc
jns
push
call
fcmovnu
sbb
push
aad
movs
pop
push
movs
js
pop
fwait
add
mov
xchg
xchg
jne
pop
push
ins
jge
or
jns
les
jge
lods
sar
mov
jbe
popf
iret
mov
mov
pusha
add
mov
sbb
stc
and
out
push
xchg
in
lods
pop
jbe
sub
xchg
and
jecxz
aad
cmp
jbe
xor
jno
xlat
add
and
sbb
mov
popf
loop
cmc
cmp
pop
xchg
adc
cmc
inc
pop
add
sub
sub
sub
add
enter
(bad)
in
or
cli
or
or
push
lea
mov
mov
mov
mov
mov
xchg
std
pop
test
adc
lock
cld
mov
fmul
popa
jne
popf
push
(bad)
gs
mov
mov
enter
sahf
and
mov
movs
inc
in
and
mov
add
cs
ins
or
xchg
stos
pop
adc
fcomp
adc
fst
out
imul
nop
adc
inc
(bad)
out
in
pop
mov
fistp
xchg
dec
movs
out
lock
nop
repz
ret
add
mov
mov
or
jp
pushf
sbb
call
(bad)
data16
xor
mov
je
and
sbb
sub
and
pop
pushf
mov
mov
out
jl
adc
jns
mov
jo
add
in
in
std
outs
add
pusha
int
jge
xchg
rcr
pushf
movs
shl
retf
cli
(bad)
sti
push
lock
test
mov
jno
loope
pushf
ret
cmp
mov
(bad)
outs
xchg
mov
out
mov
adc
aam
push
or
jbe
pushf
pop
test
inc
jge
mov
movs
lods
push
bnd
mov
lods
fimul
movs
sub
jo
outs
adc
in
fistp
fiadd
xchg
ficomp
mov
dec
cwde
push
fist
lds
cdq
sbb
lds
mov
mov
sahf
out
inc
mov
fstp
gs
repz
in
jo
cmp
jmp
push
ins
shr
fcomp
int
and
add
aam
pop
in
mov
in
sbb
xchg
fs
jecxz
adc
pop
fisub
inc
ins
xchg
mov
aaa
mov
test
ficomp
push
fwait
in
sar
xchg
loope
adc
mov
ja
cdq
xchg
fndisi(8087
mov
lea
mov
and
ror
inc
sub
fsubr
pop
fld
mov
adc
movs
sub
fcmovu
push
cmps
mov
xchg
mov
jb
ins
sahf
pop
push
daa
sbb
fsub
dec
fmul
xor
leave
sbb
xchg
mov
fst
add
or
movs
mov
in
mov
inc
pop
fisub
outs
inc
fist
test
call
xchg
dec
lds
xor
mov
mov
or
push
test
jle
fwait
dec
lds
jg
out
outs
push
and
movs
ret
jge
outs
fucomi
or
aam
mov
mov
and
repnz
icebp
push
sti
push
or
aam
movs
xor
xchg
dec
add
mov
aad
pop
in
sbb
pop
pop
repnz
sbb
jne
pop
outs
fisttp
pop
inc
lock
sbb
inc
add
(bad)
movs
scas
mov
test
fisub
repz
sbb
js
dec
clc
js
out
int3
mov
xchg
inc
mov
in
lods
outs
sbb
out
cmp
cmp
das
nop
xor
push
sbb
repz
repnz
jb
aad
or
or
xor
cmp
fdivr
add
icebp
std
adc
loope
mov
sar
in
fild
call
out
(bad)
mov
in
movs
jl
add
xchg
imul
push
fdivr
js
pushf
sbb
cmp
ret
fstp
dec
xor
ins
xor
mov
test
frstor
inc
sbb
in
cmps
lahf
(bad)
pop
cmp
push
dec
fsubr
mov
popf
mov
inc
jl
xchg
jne
cdq
xor
pushf
call
or
bound
test
pop
aam
xchg
rcr
pushf
hlt
push
iret
test
lods
in
sub
jne
jns
test
inc
call
pop
xchg
cmovne
mov
add
(bad)
fild
and
in
or
pop
fst
out
ret
or
fldpi
push
jmp
inc
mov
(bad)
mov
ret
int3
inc
xchg
bound
sub
lods
mov
pushf
shl
sbb
ins
fidiv
add
scas
and
adc
inc
adc
ret
xchg
mov
adc
xor
jg
pop
mov
jg
ja
push
js
xchg
repnz
nop
dec
mov
fimul
mov
push
aad
fcomp
cwde
or
lock
inc
push
int
(bad)
fist
mov
jecxz
push
jle
call
fwait
xchg
ss
pop
ss
dec
xchg
fidivr
out
aam
mov
fnstcw
nop
(bad)
es
rcl
dec
clc
fldcw
cld
cmp
clc
iret
sub
sbb
call
mov
iret
mov
in
cmp
mov
fs
cwde
cmp
jae
adc
test
xchg
rcr
cld
std
int
adc
aad
xchg
mov
loope
movs
fist
and
jl
std
pop
loopne
dec
out
shr
aas
rol
push
mov
and
adc
mov
adc
push
cmps
fdivr
je
inc
fwait
es
fnstsw
loop
xchg
movs
arpl
adc
mov
fisttp
xchg
pushf
scas
mov
sar
xor
cwde
pop
push
bound
xchg
sar
(bad)
(bad)
mov
and
ret
xchg
out
stos
xor
cs
xchg
and
clc
aad
sub
sub
add
fld
cld
in
test
jno
shr
imul
scas
in
pop
or
or
sub
adc
adc
lock
xchg
jmp
movs
movs
(bad)
(bad)
mov
arpl
mov
pushf
cmps
mov
dec
ss
cwde
sub
ss
pusha
inc
fbstp
jl
mov
lods
push
adc
test
aam
inc
ret
loop
add
cmps
pop
fs
sbb
rcr
dec
cld
fbld
dec
xchg
ins
movs
sahf
cli
fcmovnbe
fild
dec
add
lahf
call
movs
push
ret
jno
repz
mov
xchg
mov
mov
neg
sbb
mov
(bad)
mov
push
sbb
add
jge
into
es
icebp
cli
jp
jmp
mov
lods
ret
or
inc
mov
dec
in
pop
nop
mov
out
ins
pop
mov
jno
sbb
sub
jmp
jl
cli
push
sbb
(bad)
or
sbb
lods
push
pushf
movs
cmp
fst
stos
ret
jl
retf
jo
mov
push
push
cli
cmps
mov
pusha
add
sbb
sub
inc
mov
pop
loopne
inc
leave
neg
and
xchg
sbb
popa
dec
leave
pop
or
jmp
dec
mov
mov
mov
popa
sar
xor
jp
jb
test
jg
inc
shl
ss
nop
adc
add
fwait
jg
dec
cmp
movs
ds
je
or
mov
fsubr
mov
sti
nop
mov
jl
(bad)
pop
sub
fisubr
dec
dec
xor
xchg
sti
and
data16
out
(bad)
pusha
pop
fcomp
ret
mov
call
popa
pop
or
inc
ins
in
popa
xor
ror
stos
pop
adc
clc
add
inc
pushf
iret
mov
bnd
(bad)
sahf
dec
out
(bad)
out
(bad)
add
inc
xor
fmul
scas
repz
mov
mov
outs
sub
sub
in
mov
xchg
sahf
movs
aad
xor
sets
mov
in
sbb
leave
sbb
xchg
loop
add
call
mov
icebp
scas
and
sub
pop
adc
mov
fdivr
sbb
xor
call
icebp
imul
mov
and
ret
inc
shr
pop
out
sub
outs
enter
(bad)
in
rol
hlt
adc
mov
iret
cmps
add
repnz
or
pop
xlat
xchg
popf
sbb
mov
pop
cmps
pushf
sbb
test
pusha
shl
fisub
pushf
push
mov
inc
xchg
(bad)
das
ds
cli
pop
mov
sub
in
mov
and
mov
jne
push
jo
mov
xchg
push
mov
jl
pop
and
cld
sub
mov
je
jecxz
cmp
xchg
add
mov
jns
and
mov
push
sbb
fisttp
js
dec
lahf
push
pushf
mov
dec
jns
popf
(bad)
in
ds
inc
hlt
cmp
mov
fwait
test
cmp
jbe
adc
aaa
fs
call
stos
jg
shr
fcomp
fucomp
and
bts
jl
xchg
ficomp
icebp
cld
adc
mov
mov
lods
ins
xor
loop
ja
out
mov
fisttp
xlat
jmp
push
cs
out
fiadd
scas
loopne
sub
shl
ja
adc
add
dec
clc
mov
jno
popf
mov
xor
sbb
pop
clc
fadd
not
mov
(bad)
fs
pop
inc
fld
ja
cmp
stc
imul
out
and
frstor
xchg
jbe
cmp
dec
pop
jl
pop
mov
test
jnp
mov
xlat
sub
pop
mov
mov
sbb
push
xchg
test
sbb
(bad)
bound
fistp
mov
cmp
lock
iret
scas
outs
fisubr
push
jl
dec
sbb
mov
inc
loopne
sub
aad
inc
adc
call
or
iret
loop
mov
enter
cmp
fwait
or
cli
(bad)
jl
out
push
inc
or
and
scas
jl
dec
rcl
fnstenv
stc
jl
test
stos
(bad)
sub
sbb
data16
or
pop
sar
imul
jbe
xchg
mov
cmc
lods
mov
movs
ret
dec
jl
mov
xor
lods
scas
inc
(bad)
int3
ins
jmp
mov
push
ret
push
dec
outs
xchg
cmp
mov
xchg
popa
repnz
mov
jbe
push
jg
add
test
mov
jl
inc
sub
dec
and
xchg
adc
xchg
push
call
movs
sbb
push
xor
xor
push
jnp
test
lods
ret
loope
movs
mov
div
int3
rol
jl
pop
test
push
mov
mov
loop
mov
xchg
lahf
and
cmp
hlt
pop
icebp
fnstcw
(bad)
int3
in
arpl
push
out
pop
xchg
mov
and
mov
add
xor
pop
call
xor
push
jmp
loope
ret
mov
call
ror
mov
pop
xchg
mov
pop
popf
mov
mov
shl
pop
in
jbe
jmp
std
je
clc
in
and
push
dec
out
pop
(bad)
inc
in
retf
cmps
xchg
jne
mov
sbb
(bad)
pop
cmps
fwait
add
dec
aam
sbb
mov
inc
xor
movs
mov
bswap
out
int
jo
ins
mov
ss
jmp
jl
pop
add
adc
inc
in
mov
sar
out
jl
dec
xor
movs
cmps
sub
push
(bad)
xor
(bad)
shl
sbb
ins
push
push
lock
aad
cld
lock
jo
popf
jmp
or
adc
adc
test
ret
ins
pusha
std
lock
sub
fucom
pop
out
les
cmp
inc
shl
mov
out
push
xchg
repz
cwde
mov
and
loop
push
cmps
add
shl
mov
pop
mov
xor
adc
stos
in
jl
fcomp
or
xchg
or
int3
cmp
jg
das
call
pop
rol
cmp
fnstenv
fistp
inc
mov
sar
les
sahf
loop
and
arpl
arpl
pushf
sub
imul
sub
sub
rol
hlt
(bad)
pop
xchg
adc
imul
and
lods
jns
fnsave
mov
dec
addr16
addr16
adc
add
mov
sub
pop
outs
push
(bad)
sbb
shl
sbb
dec
pop
sbb
test
sbb
mov
pop
int3
scas
jnp
push
xchg
sub
and
ret
out
jb
inc
and
fcmovu
and
cmps
out
pusha
sub
ds
lock
xor
int3
popf
pop
std
sbb
add
sti
call
pop
int
mov
out
and
dec
sub
test
mov
xchg
fistp
sub
lods
ins
fnsave
mov
cmp
pusha
pop
cli
movs
fisubr
mov
push
test
(bad)
or
aaa
mov
inc
fucom
mov
mov
jle
mov
pop
mov
(bad)
pop
sbb
cmp
stos
fwait
or
push
test
mov
iret
retf
jl
cmp
or
pop
lahf
(bad)
ficom
inc
in
lahf
jl
cmp
jl
push
sub
daa
mov
addr16
shr
imul
sbb
adc
jmp
stc
add
in
mov
jl
mov
jae
add
ins
ins
or
jp
test
mul
mov
js
jne
mov
movs
mov
pop
ret
adc
pop
ins
shl
jae
out
ds
fdivr
cmp
xlat
jecxz
leave
js
sbb
sbb
sbb
(bad)
mov
scas
sub
sbb
popf
xchg
push
sbb
adc
or
icebp
sbb
mov
push
pop
sbb
shr
sub
push
mov
stc
mov
rcr
(bad)
mov
inc
test
loope
lods
enter
mov
jo
sub
or
movs
int
dec
push
cmp
out
jge
js
ins
and
dec
and
fsub
sti
loope
xlat
(bad)
cmp
les
and
pop
cld
fistp
or
loop
cmp
enter
and
mov
movs
pop
mov
or
sub
call
out
dec
sbb
adc
je
sbb
inc
repnz
pop
push
dec
jmp
pop
pop
pop
je
iret
loopne
fwait
inc
test
mov
or
mov
inc
adc
pusha
jmp
xor
mov
sbb
push
or
jmp
pop
inc
push
mov
mov
aas
test
and
mov
sbb
cmc
fmul
dec
inc
push
mov
pop
cmps
cli
fsubr
leave
pop
loope
lods
mov
lods
xor
pop
jecxz
sti
test
(bad)
add
pop
pushf
push
push
or
xchg
aad
xchg
jp
lock
dec
fild
xor
xchg
mov
mov
(bad)
clc
jae
inc
sbb
mov
jnp
retf
push
movs
loopne
pop
push
cmp
das
test
in
aaa
ds
(bad)
add
fsub
mov
clc
out
stc
push
mov
int3
mov
pusha
jb
add
daa
fsubr
push
dec
(bad)
pop
jg
nop
add
mov
stos
jns
int3
cmps
movs
add
pop
in
jbe
pushf
jecxz
xor
xlat
cwde
aam
xor
mov
cvttps2pi
pop
movs
jae
mov
sub
mov
inc
jle
lahf
movs
jmp
inc
or
sbb
orps
dec
movs
sbb
sbb
inc
paddsw
and
cmp
rol
sbb
inc
pop
pushf
out
ret
loope
rcr
mov
mov
rol
cmps
les
mov
jl
cmp
gs
or
cmp
jp
push
movs
push
dec
jb
xor
sub
fistp
jmp
push
push
mov
loope
mov
stos
test
xchg
not
stos
sub
mov
adc
int
jmp
sbb
pushf
jge
imul
add
outs
adc
mov
jle
jmp
pop
pop
mov
es
jnp
ds
adc
mov
sahf
mov
cmp
sbb
cli
lahf
pop
mov
mov
cmp
xchg
lahf
test
xchg
pop
pusha
int3
pop
imul
out
mov
jno
fsub
popf
ss
sub
push
inc
inc
mov
nop
jns
and
ficomp
push
fild
mov
mov
add
cmp
pop
mov
imul
fisub
hlt
sbb
adc
pop
movs
xchg
shr
xor
push
add
call
sbb
shl
or
adc
push
mov
mov
stos
sbb
mov
and
clc
cmp
xchg
pushf
es
cmp
sbb
fnsetpm(287
push
out
jnp
mov
xchg
shl
(bad)
lahf
xor
stos
sbb
loopne
fisubr
lds
xor
adc
test
or
pop
jne
mov
push
fimul
pop
into
(bad)
ja
xor
stos
into
xchg
or
mov
xlat
push
or
mov
add
sbb
mov
mov
mov
sbb
inc
push
sbb
inc
adc
mov
cwde
xchg
ror
xchg
stc
mov
es
jge
in
sbb
(bad)
call
cdq
or
fiadd
mov
mov
call
fisttp
repz
mov
ja
sar
lea
ja
jl
dec
jge
daa
xor
mov
call
loop
mov
or
movs
mov
add
gs
pop
cwde
lahf
mov
mov
dec
cmp
lock
mov
jmp
cmpxchg
dec
jmp
sub
sub
fnstenv
cdq
pop
mov
jg
fsub
enter
std
mov
inc
daa
xchg
pop
and
add
or
cli
jne
cli
mov
dec
push
jp
mov
int
mov
mov
jecxz
mov
es
jmp
or
pop
or
(bad)
xlat
movs
push
mov
jmp
shl
cmp
mov
xchg
std
jmp
mov
aad
pop
std
pop
inc
lock
test
mov
jl
cmp
test
sub
test
out
add
mov
sbb
pop
jae
int
jle
test
(bad)
repz
pushf
lods
in
xchg
ins
aam
cwde
(bad)
jge
mov
aad
fiadd
arpl
sub
rcl
fistp
fcomp
mov
pushf
adc
shl
lock
push
(bad)
mov
jne
test
pop
xchg
jg
(bad)
out
fmulp
sbb
or
adc
xchg
fmul
les
adc
out
mov
jno
mov
sub
enter
rcr
ss
jg
scas
cwde
stc
cmps
loop
lods
xor
mov
cwde
xchg
mov
daa
xor
fwait
bnd
jo
push
(bad)
xchg
aas
ss
outs
jge
cmp
adc
add
(bad)
out
cli
xor
adc
and
retf
xchg
movs
inc
loop
sbb
pushf
in
pop
cmp
clc
arpl
enter
es
lods
jg
pusha
push
jl
fstp
sbb
call
pushf
fcomp
push
daa
xchg
push
out
jl
cmp
out
push
inc
mov
enter
rcr
outs
or
das
fst
push
scas
pop
sbb
add
add
test
cmps
and
mov
sbb
aad
or
push
or
xchg
xchg
jl
mov
sbb
dec
movs
pushf
(bad)
adc
rcl
call
mov
aam
icebp
test
cdq
sbb
dec
sahf
cmp
loop
adc
mov
adc
and
jl
push
inc
jle
xor
mov
sbb
mov
add
push
jbe
in
dec
jl
mov
lods
dec
int3
push
or
mov
es
popa
sbb
mov
popf
sub
std
sbb
cmps
call
out
dec
fcom
fst
and
push
and
cdq
xchg
adc
xor
or
jmp
mov
popf
or
(bad)
fsub
adc
(bad)
pop
push
mul
push
push
mov
sub
jg
jmp
(bad)
leave
in
out
or
xchg
gs
adc
retf
stc
push
mov
gs
jecxz
in
cwde
icebp
es
lods
jmp
shl
mov
pop
cld
iret
inc
push
adc
iret
lahf
adc
adc
stos
jg
adc
and
mov
adc
movs
lahf
lds
adc
in
xchg
std
es
int
sbb
cwde
or
adc
out
and
cli
enter
sbb
xor
ss
inc
loopne
cmp
aad
add
ret
iret
ror
adc
clc
jp
ss
inc
into
(bad)
pushf
cmp
xchg
test
cwde
lahf
pop
iret
sbb
jno
jl
jl
mov
iret
jmp
in
sbb
iret
jl
sbb
adc
fldcw
out
dec
cmp
cld
xor
mov
ret
mov
inc
cmp
je
mov
jp
cs
mov
test
repnz
push
dec
mov
add
aam
sbb
lea
inc
movs
les
loop
pop
inc
jge
mov
adc
mov
mov
ret
je
repz
sub
fld
data16
adc
mov
xchg
jo
test
movs
or
xor
pop
mov
push
inc
pop
test
enter
not
retf
sub
imul
dec
or
add
sahf
jb
dec
shr
pop
pop
jl
scas
and
push
sub
add
dec
add
aaa
iret
jecxz
and
imul
inc
add
cs
in
aas
rol
xchg
sbb
scas
sub
aas
js
fadd
adc
cwde
pop
mov
xchg
fmul
imul
xchg
adc
inc
jg
test
test
xlat
or
push
(bad)
cwde
test
in
sub
out
fcom
push
stos
call
jae
into
(bad)
lahf
lea
lods
jmp
int
jo
push
jl
push
call
sbb
test
fmul
and
cmp
and
popf
cli
adc
jmp
ins
imul
mov
pop
lods
mov
sub
jo
and
inc
jno
fdivr
loop
fdivr
js
ins
inc
jecxz
js
dec
mov
nop
pop
dec
ss
mov
aad
into
adc
hlt
mov
aad
je
mov
inc
mov
lds
pop
xchg
std
int3
and
adc
sub
movs
retf
mov
mov
xor
in
mov
mov
(bad)
ror
imul
dec
fstp
test
ins
mov
cmp
add
add
cmp
push
xchg
adc
sub
shl
(bad)
sbb
cmp
in
loope
pushf
pop
pop
call
mov
fwait
pop
pushf
mov
out
bound
loope
cmp
call
das
popf
push
xchg
pop
mov
pop
mov
jo
adc
pop
xchg
pop
scas
sahf
jg
xor
call
jb
sub
push
mov
pusha
(bad)
or
or
or
test
xchg
xchg
pop
int3
aaa
and
mov
jmp
call
mov
pushf
pop
stc
cmp
mov
ds
pop
cmp
std
xchg
dec
jnp
pushf
cmp
xor
fisub
sbb
fnstsw
cwde
sbb
addr16
dec
push
dec
jbe
nop
sub
or
pop
sub
pminub
movs
leave
cmp
(bad)
aas
mov
inc
push
cmps
mov
shl
clc
adc
xchg
inc
jns
inc
movs
mov
jle
shl
push
mov
mov
sub
dec
ja
into
sbb
dec
(bad)
shr
loope
pop
adc
bound
je
mov
sbb
rol
iret
(bad)
xor
outs
es
jg
mov
cmps
cmps
xor
scas
lahf
inc
cmps
cwde
sbb
jg
lds
test
pop
mov
mov
sbb
std
pushf
fidivr
push
add
(bad)
dec
sub
push
loopne
mov
adc
iret
setl
movs
sahf
push
movs
out
popf
ss
mov
(bad)
popf
push
pop
ss
mov
cdq
sbb
sub
enter
mov
cs
movs
ds
jg
ins
jo
jle
sar
js
lea
pop
cwde
push
fadd
icebp
test
and
dec
out
pushf
xchg
push
imul
lods
sub
test
mov
dec
mov
sub
test
add
cmps
stos
icebp
pop
out
cmps
fbld
and
and
mov
mov
stos
adc
push
mov
xor
and
jb
push
iret
xor
adc
(bad)
stos
push
cmp
mov
pop
jns
sub
fld
sbb
cmp
xor
add
cmp
pushf
mov
stos
jl
sub
or
cmp
lods
into
lods
stos
xor
dec
and
cmp
jmp
cmp
pusha
adc
mov
cmps
jl
jnp
push
sahf
call
add
std
or
in
mov
lods
es
jecxz
pop
es
call
jo
out
jle
add
(bad)
or
or
jmp
cmp
inc
aad
jl
inc
jmp
loop
dec
lds
sub
lods
or
jb
push
je
xchg
ret
(bad)
mov
adc
and
jo
sbb
aad
out
test
cmp
cmp
int3
jecxz
inc
test
inc
sbb
inc
ret
dec
mov
jne
cmp
fs
mov
ret
xchg
cli
pop
push
cdq
in
mov
dec
push
pop
pop
out
ss
aad
fmul
cmps
adc
(bad)
retf
dec
jnp
dec
inc
daa
cli
mov
cmp
xor
xchg
jae
mov
call
push
add
pop
xchg
sar
jb
pushf
adc
addr16
xchg
pop
out
test
movs
aaa
inc
daa
lahf
jge
popfw
xor
dec
std
mov
mov
mov
mov
mov
rol
xchg
rcr
xchg
xor
test
inc
mov
sub
or
inc
fadd
(bad)
cmp
jp
(bad)
ins
es
jmp
js
pop
adc
daa
inc
sbb
cmp
mov
jb
pop
repz
fcom
mov
dec
inc
stos
pushf
stc
fxch
es
mov
hlt
loopne
cmp
pop
ja
call
sbb
push
lahf
movs
pop
sub
or
pushf
adc
out
ins
in
fdivr
jbe
jmp
movs
fild
cmp
sbb
mov
movs
div
and
rdtsc
int
lahf
movs
out
xor
(bad)
cmp
fistp
sub
(bad)
mov
inc
shl
(bad)
xchg
sti
test
adc
sbb
push
js
lahf
sbb
pushf
fmul
int
fmul
pop
outs
ds
ins
push
and
inc
dec
or
pop
call
fidivr
cli
xchg
cmps
push
sub
sub
shl
xor
add
out
scas
sub
movs
mov
popf
mov
cmp
push
cld
fild
int
jbe
imul
jne
cmp
jmp
jl
sbb
mov
jle
and
or
jl
jne
pushf
lds
rcr
cmp
dec
pushf
sbb
fwait
rcr
fsub
scas
pop
aam
xchg
ret
mov
call
xchg
pop
shr
aad
adc
fistp
xchg
ins
mov
mul
mov
mov
mov
jns
sub
neg
sub
pop
push
xchg
bound
int
push
jmp
sti
(bad)
jmp
xor
cwde
cmps
movs
xchg
(bad)
jl
cwde
mov
aam
mov
out
aam
in
sub
cli
push
dec
jp
xor
cmp
pusha
es
mov
fwait
stos
mov
hlt
sub
movs
xor
into
test
call
xchg
vaddsubps
int3
adc
sbb
std
repnz
lea
ret
imul
loopne
leave
stos
popa
xlat
xor
shl
pop
in
mov
pop
jmp
mov
arpl
daa
in
sbb
and
sub
popa
pusha
movs
aaa
mov
jb
or
mov
loope
xchg
mov
sbb
mov
sub
sbb
and
push
arpl
mov
ret
movs
and
ins
push
sub
out
inc
frstor
push
jbe
cmp
push
mov
das
mov
fild
f2xm1
push
xor
leave
fnstsw
xor
mov
mov
xor
pop
sar
xor
xlat
add
lahf
jg
xchg
movs
fiadd
retf
mov
jbe
sub
sbb
repnz
cmp
repnz
cmp
pop
xor
cmp
mov
mov
in
sar
in
push
loopne
mov
test
call
pop
pop
cmp
jecxz
sar
push
out
mov
les
xor
push
jl
rcl
jg
outs
pop
ins
lods
pop
ret
lds
fsub
mov
movs
pushf
ret
ret
add
sub
(bad)
fisttp
mov
iret
shr
and
inc
in
dec
aam
cmp
jl
push
push
dec
mov
mul
fistp
stos
jo
inc
cld
cmc
pop
jmp
mov
inc
sbb
stos
xchg
sub
mov
sub
mov
fcomp
pop
jg
leave
pop
loop
adc
test
inc
div
aam
jmp
aas
scas
pop
rol
in
pop
push
jge
nop
xchg
jge
mov
popf
outs
or
out
(bad)
push
popf
jl
pop
dec
icebp
cs
push
and
(bad)
adc
mov
fnsave
in
push
movs
push
mov
jmp
outs
aad
fild
xchg
in
adc
movs
mov
div
push
das
jp
mov
cmp
out
in
inc
repnz
jg
fnsetpm(287
lods
xor
aad
push
and
inc
jl
loopne
adc
jg
mov
jl
rcl
inc
push
mov
mov
inc
xor
popf
mov
in
or
cmps
and
sbb
inc
pop
mov
inc
shr
pop
jecxz
mov
dec
fcom
fs
in
(bad)
mov
clc
jne
push
fidiv
test
xor
mov
sub
cmps
jns
fmul
dec
mov
jne
and
xor
dec
in
adc
sbb
or
cmp
(bad)
jno
mov
cmp
push
mov
dec
xchg
popf
cmps
leave
in
in
(bad)
cld
cmp
out
in
hlt
mov
jg
push
js
(bad)
xor
test
fistp
xchg
inc
jne
mov
push
fcom
adc
adc
push
shr
(bad)
xor
pop
stos
jg
pop
mov
mov
mov
push
xchg
sub
pop
mov
pop
pop
or
test
push
outs
mov
cmc
jl
jl
sbb
hlt
sub
mov
dec
pop
push
sbb
jne
sub
xor
shr
fucomp
inc
cwde
into
in
xor
add
leave
stc
test
lods
es
pop
xor
ret
jno
stc
adc
scas
xor
es
arpl
cwde
scas
and
and
dec
mov
frndint
loopne
or
fs
in
(bad)
pushf
inc
stos
add
lahf
mov
je
cmp
fidiv
gs
test
mov
xchg
lock
cmp
aam
stos
jge
dec
adc
sub
daa
xor
ja
lahf
icebp
rcl
cmc
(bad)
loopne
pop
lock
in
int3
aas
sbb
add
repz
movs
in
sbb
push
pusha
cli
sbb
sub
and
lods
inc
adc
push
cmc
xor
jecxz
aas
fld
iret
xchg
cdq
or
sbb
sub
lahf
movs
dec
cs
fdiv
mov
jg
sbb
xor
fsubr
xchg
mov
sbb
lahf
jb
test
in
lods
test
cmp
and
sahf
mov
mov
imul
and
push
ins
mov
test
shr
les
in
sbb
loope
stc
jmp
mov
fs
mov
pushf
lahf
inc
xor
(bad)
aam
or
popf
mov
mov
mov
inc
jb
cs
stos
mov
xor
or
out
jg
cli
mov
test
mov
sbb
jno
mov
out
and
fldenv
inc
test
xchg
sbb
jecxz
pop
inc
jge
fcmovu
mov
mov
adc
dec
cmp
xchg
or
js
pop
mov
loop
mov
stc
int
mov
test
mov
jmp
and
add
and
test
fsubr
lea
mov
add
popf
jns
sbb
jl
push
fnstcw
adc
lds
mov
push
jg
lods
scas
push
and
mov
fsubr
cwde
cdq
jnp
(bad)
ins
fcomp
data16
aam
lahf
and
fdivr
jo
sbb
mov
jg
mov
mov
into
xor
stos
jl
sbb
sbb
test
fcom
std
pushf
hlt
xlat
les
jns
and
jbe
popf
(bad)
les
sub
ret
mov
sub
ss
push
jbe
stos
movs
sub
out
out
in
int
movs
or
fdiv
cmps
mov
xor
or
jmp
stos
push
or
cmp
stos
pop
rcl
lahf
sbb
lods
jmp
inc
sbb
idiv
xchg
or
xchg
in
inc
inc
aaa
mov
and
mov
fnstsw
dec
pop
cwde
mov
or
cdq
inc
cmp
int3
dec
sahf
loop
jo
mov
clc
lods
icebp
sub
inc
icebp
shl
dec
push
push
add
(bad)
lahf
fdiv
adc
sbb
mov
xor
fisub
xlat
movs
mov
movs
rcr
push
imul
sbb
sbb
(bad)
movs
gs
or
movs
cld
and
in
jmp
int
movs
(bad)
push
cwde
mul
(bad)
mov
mov
push
leave
adc
cmp
pusha
cdq
cmp
adc
xlat
cwde
sbb
mov
repnz
and
and
add
cmps
stc
jl
mov
xor
call
fs
loopne
ficomp
mov
ret
call
in
das
xchg
lods
ret
mov
pushf
ficomp
fdiv
mov
(bad)
pop
mov
mov
pop
ja
jae
pop
dec
lea
sub
xor
push
mov
call
lahf
scas
ror
test
push
popf
retf
jmp
mov
fdivr
(bad)
leave
call
push
(bad)
call
push
cwde
cmp
jmp
push
add
or
out
push
retf
mov
sub
hlt
out
pop
fmul
out
cmp
or
movs
push
shr
lods
sbb
or
test
rol
or
sti
mov
and
mov
inc
sbb
inc
fucomp
mov
stos
pop
inc
and
mov
mov
cmp
push
test
lods
movs
inc
iret
scas
mov
outs
sub
mov
pop
push
aas
rol
push
ficomp
jl
test
mov
and
sbb
and
js
jl
add
sub
jmp
mov
and
stos
cwde
or
movs
(bad)
movs
cmps
add
pop
cmp
xor
sub
mov
mov
call
mov
es
mov
in
jle
xchg
les
cmp
add
add
inc
mov
push
sbb
jl
cmps
test
daa
sar
fisttp
(bad)
aad
push
lods
xchg
ret
leavew
test
in
sbb
dec
imul
std
adc
int3
fst
and
or
out
fild
into
movs
int3
adc
push
xchg
ins
fwait
xchg
lods
(bad)
mov
xchg
inc
sahf
push
sar
push
(bad)
bound
sub
jge
jl
(bad)
std
iret
je
pop
test
clc
mov
aam
jmp
inc
xchg
mov
fcmovu
fild
add
or
cs
cmp
jge
mov
pop
sbb
xchg
mov
xchg
mov
and
movs
push
lods
sbb
gs
mov
fnstsw
mov
and
xchg
cmps
push
(bad)
cmp
jno
xchg
jecxz
push
add
dec
mov
call
or
adc
addr16
mov
mov
and
jge
mov
pusha
std
(bad)
mov
in
add
sub
mov
and
jnp
fs
mov
jl
pop
arpl
in
std
icebp
js
push
movs
jl
sahf
ficom
repz
clc
inc
repz
loope
stos
in
ins
push
xchg
outs
push
jns
data16
shl
dec
bound
push
repnz
jl
lahf
idiv
popa
push
mov
aad
mov
and
call
inc
inc
push
mov
out
jno
sti
enter
mov
int3
xor
scas
or
cmp
jp
rol
std
aas
les
fwait
sub
xchg
mov
xlat
mov
pop
in
xor
cdq
jmp
lahf
and
call
sbb
aad
xchg
ins
nop
mov
mov
xchg
add
add
lods
scas
outs
test
ret
mov
mov
pop
jge
and
push
nop
push
cmps
movs
dec
ins
neg
je
adc
movs
sbb
popf
cmp
aam
(bad)
sbb
test
pushf
test
lods
iret
cwde
clc
enter
fst
mov
xor
pop
jbe
mov
mov
not
xchg
mov
in
out
scas
movs
xor
and
in
loop
mov
sbb
mov
push
arpl
(bad)
mov
movs
add
jne
cmps
and
mov
fsubr
in
fidiv
sti
xchg
jmp
inc
sub
lods
xchg
sbb
test
in
or
addr16
fcomp
lahf
shl
in
cmps
dec
fs
pusha
xlat
shl
in
aaa
jecxz
ret
sub
cs
pop
jmp
shl
mov
sti
mov
loope
mov
in
jge
(bad)
add
mov
xor
inc
fadd
mov
sub
push
push
lahf
adc
adc
stos
and
cmps
test
or
adc
(bad)
sub
mov
add
mov
movs
stos
mov
call
loop
jp
inc
stos
push
shl
ja
xor
in
sbb
inc
repnz
lods
es
aam
mov
jl
lods
cmc
push
rcr
jp
xchg
call
(bad)
(bad)
outs
xor
pop
clc
test
mov
cmp
out
test
push
jg
push
jmp
retf
das
div
sub
and
inc
sbb
and
mov
push
adc
loop
jecxz
arpl
scas
sub
shl
jae
add
cmc
cs
ror
mov
jle
mov
or
fcmovu
xor
cmc
les
daa
cmp
enter
xchg
rcr
jg
inc
nop
sub
push
sbb
int3
sub
jle
adc
pop
sub
stos
xchg
lds
inc
xor
or
sahf
dec
movs
xchg
inc
xchg
fmul
mov
mov
sub
fimul
sub
cmps
sbb
out
cmp
pushf
jg
xor
rcl
cmp
retf
jo
lea
fucomp
pop
fist
lds
pop
in
mov
jb
sahf
inc
aam
jl
and
xchg
shl
shl
(bad)
int3
ficomp
into
push
mov
cmp
mov
test
push
stc
sti
scas
cdq
sub
fdiv
adc
test
pushf
pop
jge
cmc
fadd
mul
fiadd
loop
mov
cld
mov
jl
sub
fbld
xor
sbb
xor
inc
stc
mov
scas
sar
mov
xchg
lods
les
mov
fmul
jmp
out
fiadd
or
inc
sbb
jl
sbb
xchg
mov
out
fst
mov
movs
push
popf
bound
cwde
inc
lds
cmps
shr
out
cmc
and
and
mov
jns
add
aam
jecxz
stc
mov
xchg
mov
movs
dec
sbb
js
mov
movs
sahf
mov
sbb
sub
ror
mov
mov
or
std
(bad)
dec
xchg
scas
mov
clc
icebp
(bad)
repz
sbb
pop
adc
mov
inc
movs
mov
lods
sub
mov
aaa
repnz
dec
inc
sub
inc
(bad)
and
adc
(bad)
ss
xchg
push
dec
retf
cmp
jp
sub
jge
(bad)
fsub
xor
dec
es
and
mov
inc
lea
sub
cdq
ds
leave
jg
(bad)
pop
jmp
test
or
retf
in
in
test
xchg
inc
pop
and
dec
and
sbb
fimul
sbb
mov
sbb
test
sti
call
dec
out
cmps
lock
fnstenv
stos
pop
mov
mov
cmps
xchg
cmps
pop
cli
inc
(bad)
xor
out
jmp
xchg
dec
repz
out
xlat
call
sub
and
push
pop
popf
pop
mov
ss
sbb
sbb
ret
add
dec
and
sbb
fild
dec
out
jo
fisub
movs
clc
loopne
fmul
add
push
(bad)
rcl
fwait
mov
adc
jmp
test
popa
mov
lods
(bad)
movs
sbb
nop
call
stos
cmp
jl
or
mov
ja
mov
call
cdq
hlt
cdq
leave
or
(bad)
popf
cmp
in
ds
cmp
(bad)
mov
gs
ret
mov
ja
or
stos
movs
mov
stc
cmc
out
fstp
adc
mov
fistp
and
repnz
gs
cmp
rcr
popf
dec
das
dec
xchg
inc
sahf
jl
jae
gs
cmp
jg
outs
psubusb
fidiv
test
mov
pop
ja
inc
adc
cmc
fdivr
fs
jno
test
jl
data16
or
fist
dec
and
mov
mov
(bad)
mov
sub
aaa
test
pop
sub
sub
adc
es
jle
sahf
ror
mov
pop
dec
lods
fimul
mov
scas
jnp
arpl
jmp
arpl
jecxz
fisttp
sub
in
cmp
add
mov
aas
std
sbb
popa
push
jp
call
adc
sbb
int
aam
in
in
mov
xchg
adc
xor
push
repnz
mov
mov
les
aam
shl
inc
loop
int3
xchg
xchg
push
retf
cmp
mov
sub
pusha
jns
popf
jns
dec
outs
pusha
movs
mov
popf
or
cdq
lods
cmp
cwde
push
sub
enter
in
clc
and
add
mov
ret
lods
ror
not
add
mov
push
retf
fistp
and
pushf
pop
dec
retf
stos
dec
lods
movs
push
push
xor
push
mov
sbb
js
pop
sub
mov
lods
or
ins
mov
pop
mov
ret
fisttp
sbb
adc
popf
lods
mov
or
pop
stos
das
sub
sub
int
mov
dec
sub
mov
jecxz
and
xchg
les
mov
retf
pop
out
mov
rcr
sbb
fbstp
jmp
pop
sbb
mov
cli
mov
cli
sub
mov
pushf
xchg
(bad)
movs
xchg
std
shl
jmp
sub
bound
sub
xlat
inc
adc
mov
mov
sub
jl
xchg
rcr
pushf
push
xchg
mov
data16
test
mov
adc
enter
xchg
shl
mov
(bad)
fwait
inc
std
cwde
stos
and
(bad)
rol
push
addr16
jnp
enter
sbb
and
sbb
pop
(bad)
fcomp
sub
mov
fbstp
xchg
push
call
scas
lods
jg
or
es
cmps
xor
(bad)
call
xchg
cmp
fsub
and
fucomp
jmp
test
mov
loope
sbb
aaa
inc
jo
pop
mov
dec
xor
jle
sub
(bad)
add
sub
fcomip
js
repnz
aad
ins
mov
mov
cmp
pop
rcr
mov
cmp
adc
enter
xor
cld
stos
sub
mov
mov
(bad)
sbb
xchg
jle
test
(bad)
aad
cld
or
mov
mov
adc
scas
and
fs
xchg
ror
or
add
int3
dec
sbb
xor
movs
jle
xchg
adc
arpl
mov
or
add
inc
push
rcl
rcl
sbb
mov
mov
mov
jmp
adc
dec
xchg
inc
sub
push
adc
adc
sub
mov
or
fwait
cmp
pop
(bad)
cmp
xchg
int3
mov
push
inc
mov
pop
jne
or
push
xchg
hlt
cmps
sbb
in
adc
test
mov
mov
mov
inc
clc
mov
cmp
dec
jne
and
retf
mov
push
or
push
ltr
jmp
xor
or
clc
mov
popf
jp
xchg
enter
lds
jge
mov
jge
or
xchg
cld
push
lds
int3
add
(bad)
imul
push
in
mov
(bad)
cmps
pop
mov
jl
xchg
push
nop
push
loope
test
sub
cmp
push
pop
adc
icebp
fistp
push
ins
mov
loop
(bad)
mov
test
clc
mov
fnsave
push
add
sbb
mov
(bad)
cwde
sar
dec
jns
daa
aam
hlt
jl
adc
adc
or
mov
cmp
iret
push
mov
rol
mov
mov
and
jp
cmp
push
adc
mov
push
lods
pop
add
jmp
pop
clc
jl
loope
ins
fwait
cmp
inc
xlat
mov
inc
movs
aad
scas
out
ss
pop
scas
mov
inc
scas
mov
pop
sub
shl
push
mov
and
jl
ins
or
or
test
and
cli
pop
dec
in
div
add
jae
mov
add
fnstenv
or
add
fadd
pushf
jne
mov
inc
push
cwde
cmp
leave
or
pop
sbb
dec
sbb
arpl
dec
fldcw
and
add
mov
lods
sbb
fs
dec
gs
cdq
or
fstp
mov
in
nop
(bad)
sbb
out
dec
pop
push
movs
scas
push
cmp
in
ss
sbb
rol
sub
mov
repnz
out
adc
xor
test
aaa
shl
dec
(bad)
or
movs
daa
inc
movs
cmp
xchg
test
push
js
stc
fdiv
dec
xor
cmp
test
div
sbb
ss
or
nop
rol
sub
aaa
movs
ja
inc
mov
call
movs
pop
pop
sbb
movs
sbb
rcl
jle
mov
stc
lods
push
or
mov
mov
mov
push
push
int3
jb
and
cmp
loop
js
mov
sub
loop
cwde
pop
xlat
mov
pusha
mov
dec
cmps
jmp
push
es
xor
inc
fidivr
stc
(bad)
mov
mov
mov
pop
nop
aam
cld
add
cmp
xchg
cmp
or
jl
mov
pop
pop
inc
pop
sbb
sbb
jg
sub
cmp
xor
call
xor
xchg
(bad)
data16
mov
xor
out
mov
push
add
sbb
adc
fcmovu
mov
imul
jmp
mov
pusha
sub
enter
dec
pop
mov
fld
mov
jmp
nop
iret
test
addr16
clc
or
pop
stc
test
call
xlat
icebp
jl
movs
pop
in
inc
aaa
add
cli
(bad)
mov
cmp
xor
mov
inc
ins
cmp
pushf
fcomp
out
mov
iret
mov
(bad)
or
add
pop
jne
and
adc
das
xor
or
adc
adc
sub
loopne
(bad)
push
adc
cmp
dec
aam
es
icebp
mov
scas
xchg
fimul
sbb
sbb
add
movs
mov
add
rcl
in
mov
xor
movs
pop
int
nop
pop
push
xor
shr
add
imul
inc
mov
stos
popf
stos
push
jle
ins
fdivp
mov
mov
cmc
pop
sub
mov
rcl
movs
retf
ret
push
sbb
in
out
jmp
pop
int
jno
movs
(bad)
lahf
ret
movs
add
sub
pop
add
and
mov
pop
push
adc
stos
cli
xor
ins
mov
push
mov
mov
lahf
sub
jg
repnz
daa
fidivr
repnz
cmp
mov
lock
mov
mov
leave
fbld
mov
out
rcr
xchg
in
pusha
cmp
out
sub
lods
fbstp
add
test
shl
push
pop
cmp
pop
sbb
ds
add
sbb
sar
mul
or
(bad)
(bad)
mov
adc
fistp
ins
adc
outs
sub
sub
mov
pop
or
das
call
in
fcomp
clc
mov
add
retf
mov
sbb
into
add
xchg
fcom
aam
les
dec
xchg
mov
add
stc
mov
or
call
call
mov
gs
mov
xchg
cmp
dec
lock
and
dec
ins
mov
push
xchg
cwde
outs
lods
jecxz
inc
sahf
es
inc
repz
out
fsubr
lods
push
sub
push
retf
repz
cmp
sub
icebp
gs
mov
sbb
(bad)
movs
jb
movs
mov
cdq
aas
sbb
test
add
imul
mov
xchg
mov
(bad)
enter
add
outs
clc
mov
mov
xchg
dec
xor
test
mov
push
repz
inc
cmc
call
(bad)
jg
sub
cmp
in
and
push
out
pusha
cdq
mov
add
cmp
cdq
lock
(bad)
retf
enter
mov
sahf
mov
add
jmp
lods
jg
mov
cli
es
dec
push
xor
movs
cmp
out
stos
in
out
repz
call
inc
mov
sub
mov
pop
es
inc
sub
cli
enter
pushf
lea
lods
mov
sub
loop
push
jg
or
xor
or
iret
repnz
imul
neg
or
sbb
mov
(bad)
out
or
sar
sub
mov
inc
sub
adc
(bad)
mov
cwde
sbb
test
jle
mov
aaa
cmp
push
jb
int3
mov
sub
in
mov
imul
mov
ret
mov
adc
xor
push
mov
add
mov
inc
cwde
fist
push
stos
or
lock
ret
cmps
pusha
cld
jle
or
jmp
mov
jge
add
inc
enter
or
sub
xor
jmp
mov
jl
and
pop
je
mov
test
and
test
xchg
inc
dec
jecxz
ret
pop
lea
push
sbb
add
loope
cmps
loop
shl
mov
in
push
mov
mov
add
loope
fdiv
jg
in
call
dec
in
out
call
sub
push
adc
jbe
jnp
dec
call
ds
scas
addr16
data16
aas
sub
cwde
and
call
mov
(bad)
popa
pop
cmps
sub
push
mov
add
(bad)
out
inc
pop
pop
shl
adc
xor
xchg
sub
or
neg
lock
pop
in
jmp
stc
and
aaa
cmps
inc
mov
mov
pop
mov
or
adc
add
and
fsub
xlat
ins
mov
cld
inc
movs
adc
pop
les
lods
mov
inc
and
jne
clc
iret
or
fidivr
mov
pusha
mov
fsub
mov
and
hlt
mov
adc
(bad)
dec
stos
sbb
or
rol
stc
mov
cli
xor
in
(bad)
clc
cmp
sbb
cmps
movs
aad
adc
or
dec
jmp
hlt
inc
inc
mov
mov
jno
inc
push
ins
arpl
lock
sub
dec
mov
add
or
inc
lock
cld
iret
pop
mov
loopne
loope
or
std
outs
jae
push
sbb
or
sbb
mov
push
jae
xchg
mov
stc
push
iret
call
mov
fs
clc
lods
rcl
movs
(bad)
inc
pop
ins
aad
cld
jmp
sbb
add
or
xor
cmp
mov
arpl
fsubr
fnsave
adc
rcr
or
pusha
add
and
xor
pusha
hlt
inc
pusha
mov
mov
loop
mov
xchg
aam
cmps
adc
ret
call
add
xor
cmps
leave
mov
and
shl
dec
xor
lock
lock
lock
test
fist
mov
mov
rcr
clc
(bad)
(bad)
and
push
iret
sbb
in
hlt
stos
cld
retf
loope
pushf
pop
stc
fldenv
psubb
es
pop
adc
add
mov
sbb
imul
mov
call
and
repnz
and
cs
add
adc
idiv
xor
add
sbb
push
mov
push
(bad)
add
add
xor
mov
pop
inc
sar
loopne
test
push
repnz
in
imul
aam
push
inc
call
rol
adc
ins
adc
xchg
jmp
clc
jl
and
push
cmp
lea
and
mov
xor
xor
hlt
or
lahf
test
pusha
outs
dec
(bad)
push
icebp
add
jb
out
inc
mov
cmps
jg
jbe
xlat
icebp
dec
in
fdiv
sub
lock
imul
adc
cmp
(bad)
cli
hlt
mov
adc
int3
loopne
cmp
and
ret
sbb
popf
lods
outs
icebp
pop
lods
in
sub
sub
scas
(bad)
pop
mov
aas
clc
ins
adc
pop
pextrw
ins
in
outs
and
call
pusha
test
and
jmp
lahf
mov
lds
scas
and
add
pop
jmp
mov
(bad)
stc
jns
xor
adc
ds
push
fistp
popf
lods
mov
sub
mov
sbb
outs
jbe
enter
pushf
push
repnz
jp
xchg
lods
inc
sbb
fistp
mov
and
and
add
add
pop
mov
and
or
or
or
movzx
and
adc
pop
js
push
test
mov
and
stc
mov
and
std
push
dec
push
mov
and
in
out
push
mov
and
jmp
in
and
out
push
lock
mov
and
repz
and
xlat
push
fmul
fnstenv
mov
and
fild
loopne
loope
loop
fninit
mov
and
mov
retf
retf
mov
and
iret
push
ror
shl
mov
and
mov
mov
and
mov
pop
mov
int
mov
xor
push
movs
and
xlat
out
sbb
idiv
adc
lods
sub
lods
jge
dec
adc
pop
and
out
(bad)
stos
or
test
push
shl
pop
jle
int
push
les
jae
into
mov
test
mov
cmc
push
test
sub
pop
xor
call
or
js
outs
adc
inc
(bad)
out
cld
mov
pop
push
outs
jmp
stos
sti
clc
xlat
loope
int
lahf
out
pop
mov
bound
sub
cs
movs
pushf
jmp
sbb
mov
gs
rcr
jecxz
sbb
sbb
xchg
fldenv
mov
push
dec
and
sbb
rcl
pop
or
movs
fcom
cli
cmp
ss
movs
fisub
jbe
movs
mov
stos
jbe
movs
call
in
sahf
pushf
jp
movs
lahf
sbb
pop
push
mov
mov
mov
mov
mov
mov
movs
mov
pop
cmps
mov
mov
cmps
mov
pop
test
fidiv
pop
stos
mov
mov
stos
mov
pop
lods
mov
mov
lods
movs
mov
mov
jbe
movs
pop
mov
jbe
movs
cmp
jbe
movs
sbb
jbe
movs
cli
mov
jbe
movs
fisub
jbe
cmps
inc
int3
mov
mov
sbb
mov
mov
mov
mov
mov
shl
mov
ret
mov
pop
les
mov
pop
(bad)
mov
mov
(bad)
mov
pop
enter
(bad)
leave
mov
arpl
mov
sbb
pushf
mov
popf
pop
into
fdivr
iret
sbb
push
rcr
pop
int3
rcr
xlat
dec
sbb
fdivr
int3
rcr
xlat
sub
jne
sbb
movs
or
jbe
movs
jmp
fldenv
movs
mov
mov
jbe
movs
mov
add
movs
loopne
pop
add
movs
loop
cmp
movs
in
sbb
movs
out
cli
add
movs
call
pushf
retf
jmp
sbb
pushf
mov
fwait
pop
out
fdivr
out
sbb
push
lock
icebp
sbb
dec
sbb
fdivr
int3
repz
sub
fcomp
int3
cmc
sbb
or
fdivr
int3
neg
xlat
jmp
sbb
retf
fdivr
stos
sbb
fcomp
mov
mov
push
pop
mov
add
cmp
hlt
jmp
aad
xor
and
ins
idiv
in
ins
movs
idiv
xchg
(bad)
xchg
push
inc
push
sub
inc
fild
mov
add
jae
push
add
movs
xor
mov
adc
aaa
pushf
pushf
pop
pop
test
cmc
lock
mov
into
inc
pop
fadd
push
dec
call
pushf
aam
push
bound
test
arpl
add
test
fistp
jg
fidivr
ror
or
mov
inc
mov
mov
test
or
mov
pop
fistp
add
iret
add
push
and
movs
sbb
stos
add
push
push
adc
lock
and
adc
mov
repnz
xor
or
mov
in
fsubr
sbb
inc
add
mov
xchg
std
addr16
ret
push
mov
in
scas
lods
out
sbb
lods
fs
shl
popf
lods
ret
lock
loopne
sbb
dec
pop
fs
fsub
push
add
loop
daa
cmp
and
jmp
add
mov
mov
mov
mul
idiv
mov
test
jmp
fnstcw
or
mov
dec
arpl
push
push
leave
test
inc
je
jecxz
push
add
add
jle
enter
jmp
mov
bound
in
(bad)
fisubr
loopne
in
mov
lods
push
mov
mov
pushf
rcr
mov
jmp
mov
imul
(bad)
pushf
ror
adc
call
retf
(bad)
(bad)
mov
cmc
std
ficomp
dec
add
stc
fsubr
inc
popa
xor
aaa
rcl
test
jmp
in
cld
mov
inc
cmps
mov
pop
xchg
(bad)
xlat
jmp
jmp
sbb
repnz
mov
or
icebp
enter
retf
aad
lods
clc
jmp
add
fadd
cwde
xlat
stos
xor
pop
adc
outs
mov
outs
(bad)
mov
clc
fisttp
mov
mov
jmp
cld
aad
mov
pushf
out
clc
adc
lahf
cmovno
sbb
cli
mov
je
xchg
sbb
movs
fs
fadd
push
mov
jg
es
pop
fnstcw
inc
xchg
cli
call
sub
cwde
aam
mov
sbb
pop
shr
mov
cld
add
xor
mov
push
or
adc
loope
call
push
cs
mov
ins
jb
mov
(bad)
and
xor
das
or
mov
mov
pop
out
cmp
xor
jne
mov
fild
cmp
in
aad
stc
add
dec
mov
out
cwde
inc
xchg
ins
cmps
pop
push
mov
adc
xor
fsub
mov
cld
and
jl
dec
pop
xor
jl
addr16
xor
mov
add
in
xchg
cmp
jmp
sbb
in
jl
sbb
ret
mov
add
xor
inc
adc
ins
jg
inc
push
je
adc
mov
pop
mov
mov
out
fisub
fsub
and
sahf
test
cli
fs
push
arpl
cld
xor
inc
sbb
fidiv
call
rcr
mov
test
add
push
ins
jl
out
test
mov
cmps
aad
daa
addr16
arpl
rcl
xchg
pop
push
inc
fisub
sub
or
xor
test
pop
mov
cmp
hlt
repz
out
adc
or
pop
bnd
push
mov
push
popf
je
jno
test
retf
inc
xchg
mov
call
mov
fs
fimul
jbe
jg
or
nop
aad
jbe
mov
cwde
or
mov
mov
jmp
out
fmul
aam
and
int3
xchg
nop
data16
add
mov
push
lock
mov
add
ret
aad
push
xchg
cmp
cmp
dec
mov
xchg
cs
pop
jnp
pop
inc
clc
clc
clc
iret
pop
cmps
test
push
in
dec
jecxz
aas
mov
sub
or
jmp
jmp
add
repnz
cwde
data16
loop
iret
and
adc
into
inc
fbstp
or
xor
jns
iret
mov
mov
mov
mov
ja
out
cmp
sbb
(bad)
aam
inc
call
xchg
fs
xchg
xchg
fiadd
(bad)
mov
aad
retf
jecxz
out
std
push
mov
movs
push
mov
lahf
mov
dec
jmp
pop
xor
xor
xchg
cmp
mov
(bad)
jmp
jecxz
shl
repnz
jnp
sub
aas
test
dec
push
mov
or
dec
mov
scas
imul
jmp
lds
jg
(bad)
pop
cmp
sub
mov
mov
inc
lods
sub
mov
dec
enter
fwait
loopne
xlat
aad
fsub
out
sbb
ret
jbe
cld
sub
pusha
nop
call
mov
and
sub
mov
mov
das
mov
or
sbb
jb
test
mov
sub
mov
push
mov
xor
mov
sbb
cli
fmul
and
ds
sbb
sbb
sub
popf
(bad)
mov
fsubr
neg
and
cs
pop
pushw
push
pop
xor
sar
jb
inc
mov
add
lods
pop
fadd
sahf
sbb
(bad)
mov
cld
fidiv
xor
fmul
imul
lods
call
adc
push
jb
(bad)
lock
mov
xor
jmp
movs
and
and
mov
mov
not
hlt
mov
movs
call
cmc
or
cmps
shl
jmp
in
movs
mov
fcmovu
mov
movs
lahf
sbb
pop
mov
mov
cmps
mov
movs
or
xor
ins
sbb
cmps
pop
movs
test
mov
mov
movs
jae
movs
push
bound
in
jmp
movs
mov
mov
or
sbb
pop
mov
push
cmc
add
cmps
in
jg
mov
(bad)
lea
sub
nop
hlt
pop
mov
icebp
movs
mov
fcomp
jo
fcomp
mov
nop
cli
and
in
mov
je
fsub
cmp
sbb
cli
and
data16
xchg
gs
xchg
mov
in
aad
and
mov
ret
cmp
lea
add
fistp
mov
out
imul
jl
jg
inc
inc
popf
adc
ret
in
cmp
push
or
sbb
jb
out
mov
xchg
cld
xchg
mov
mov
mov
ficomp
lock
xchg
push
pop
mov
dec
mov
test
(bad)
adc
dec
lods
daa
pop
xchg
inc
mov
clc
cmc
sub
xchg
pusha
jp
call
je
ja
ret
adc
xlat
ret
call
icebp
jnp
retf
jnp
and
nop
jae
aaa
hlt
aam
xchg
dec
jb
fiadd
jl
add
test
jmp
sub
mov
pusha
pop
cmp
or
in
(bad)
(bad)
mov
jb
sbb
sbb
jae
mov
xlat
jb
scas
mov
adc
push
adc
jo
xchg
jge
clc
pop
cmp
jmp
xchg
mul
jl
adc
cmps
jae
sahf
stc
push
mov
xchg
jmp
xlat
jge
sbb
jnp
test
loopne
aaa
sbb
data16
jl
and
scas
dec
pop
test
in
mul
cdq
xchg
jg
retf
out
or
or
sub
in
mov
out
add
(bad)
jmp
mov
jae
adc
or
or
adc
lods
fst
stos
out
movs
shl
cwde
jns
cdq
icebp
cwde
icebp
rcr
adc
cli
push
mov
sbb
mov
jb
test
outs
cwde
jno
int3
add
mov
es
cmps
xchg
sbb
xchg
and
mov
fwait
inc
jecxz
and
cdq
add
fsub
call
and
in
jp
loopne
mov
out
repz
xor
ss
pop
lods
enter
ins
lods
ins
retf
mov
(bad)
pop
inc
mov
into
ins
add
sbb
test
arpl
sub
lock
inc
or
xchg
xchg
sbb
xchg
aas
ja
rol
mov
daa
adc
push
ja
pop
xchg
xor
mov
cmps
xchg
cmps
cmp
xor
xor
and
ror
adc
je
and
aad
pushf
xchg
shr
sub
cmc
ins
mov
popf
mov
clc
push
ss
pop
rcl
fstp
mov
movs
popf
rcl
pusha
xchg
aam
neg
fcomp
movs
in
and
fcom
pop
pop
ffree
inc
fwait
pushf
and
movs
js
xor
popf
test
sbb
or
cli
mov
cwde
lahf
call
lods
movs
sub
je
movs
jne
sahf
mov
ja
add
mov
out
retf
outs
retf
push
ficom
xor
adc
mov
repnz
cmp
mov
int3
cld
xchg
popa
ins
or
sub
sub
xor
aad
and
ret
and
sub
pop
sahf
pop
cdq
popf
fcom
arpl
xchg
mov
into
pushf
int
adc
mov
cmp
sbb
mov
retf
or
mov
sbb
(bad)
div
sub
aad
ret
retf
mov
mov
test
jl
jb
add
(bad)
retf
fidivr
push
stos
pop
(bad)
pop
fwait
pop
loop
int3
out
imul
push
jp
xchg
rcl
dec
shr
mov
lea
loope
imul
inc
in
bswap
ss
(bad)
out
repnz
xchg
imul
pusha
jmp
adc
fsub
jne
add
in
mov
mov
fistp
xchg
(bad)
sbb
rol
das
push
int3
test
dec
mov
xor
aad
pop
aad
inc
sbb
test
sub
adc
inc
repz
pop
xor
cmps
cmp
and
jmp
jo
dec
push
test
pop
rep
nop
inc
xchg
add
test
cmp
sbb
(bad)
xchg
xor
xchg
mov
mov
mov
xor
xor
sbb
out
cmps
and
movs
sub
cmp
or
mov
adc
push
mov
mov
in
fsubp
and
push
sbb
and
pop
or
movs
(bad)
xchg
sub
imul
adc
pop
aad
aad
je
es
xor
cmps
mov
shl
mov
mov
xor
sub
or
sbb
or
rcr
cwde
and
adc
mov
ret
push
ret
and
ret
cld
movs
sub
popf
test
nop
or
mov
xor
fmul
and
inc
loop
sub
mov
dec
mov
(bad)
fldcw
fiadd
stos
scas
lock
pop
push
test
or
jns
fmul
push
inc
out
pop
adc
pop
xor
out
push
or
ror
push
xor
push
or
in
mov
lock
sbb
es
lods
cdq
les
cwde
sub
xchg
mov
rep
jo
nop
xor
mov
push
push
mov
xchg
jbe
lods
adc
sub
fstp
rcr
sbb
lea
and
jg
into
pop
(bad)
and
mov
adc
mov
ret
cmp
in
jg
ficomp
dec
or
cmp
jbe
pushf
jo
in
push
ss
push
fcom
jne
mov
fs
pushf
fs
int
inc
cli
pop
xor
mov
jmp
ret
xchg
mov
pop
mov
icebp
or
scas
shl
popa
sbb
xor
or
fdivr
mov
cmp
nop
call
xor
(bad)
nop
pushf
pop
shl
fadd
test
or
test
shl
cwde
or
fstp
lds
cmp
repz
dec
jmp
ja
inc
jmp
xor
pop
inc
or
push
(bad)
lahf
int
rol
fmul
inc
jb
inc
mov
out
addr16
and
movs
xchg
rol
nop
test
cmp
jno
pop
daa
jmp
dec
cmp
pushf
sub
xor
sub
les
loopne
inc
idiv
pushf
fcmovnb
cmps
out
std
test
popf
mov
loop
push
out
jmp
jl
int3
into
adc
out
cdq
or
fsubr
xchg
cwde
jg
cmp
mov
xlat
mul
enter
or
cmps
cmps
jge
ret
sub
inc
xor
mov
and
inc
cmc
movs
or
dec
sbb
into
lds
jno
shr
mov
add
or
pop
adc
push
jae
popf
cmp
mov
sub
jl
shr
lea
mov
jle
ret
in
(bad)
mov
fsub
sahf
pop
test
aas
popa
fadd
mov
call
(bad)
pop
mov
jns
cs
mov
retf
popf
or
repz
xor
into
pusha
js
cmps
(bad)
(bad)
data16
ins
lods
jg
add
cld
iret
push
ficomp
push
js
cld
push
add
push
mov
rcr
in
jns
push
pop
aas
cmps
rcr
out
mov
mov
or
cmp
xchg
jmp
(bad)
push
cld
enter
enter
push
inc
ret
fiadd
and
sub
ret
and
fild
frstor
sub
and
mov
xlat
xchg
in
pushf
xchg
rcl
stc
out
pop
push
lock
mov
xor
add
(bad)
call
fiadd
fld
arpl
movs
nop
sahf
push
jl
leave
imul
jle
mov
rol
jo
inc
cwde
pop
mov
cmps
xor
iret
pop
or
pusha
addr16
mov
test
fwait
test
fwait
adc
mov
leave
and
lahf
int3
jl
push
enter
jbe
imul
lahf
xor
shl
sbb
pushf
ss
div
lods
xor
mov
cli
xor
push
adc
adc
pop
lahf
or
aam
or
scas
and
dec
xchg
stos
arpl
fadd
add
push
and
mov
pushf
test
push
aam
(bad)
(bad)
mov
xchg
iret
in
adc
pushf
jg
(bad)
cmp
retf
ds
add
ret
sbb
inc
rcr
cmp
test
add
fsub
iret
xor
or
pusha
arpl
sbb
aas
std
ja
jo
loop
jo
mov
int
sub
ror
(bad)
fsubr
daa
mov
jle
fistp
rcl
jae
jbe
sbb
dec
push
sbb
xlat
(bad)
sbb
mov
mov
cmp
mov
(bad)
clc
sbb
or
popf
xor
jmp
push
rol
mov
lock
mov
add
cmp
int3
or
js
je
sub
cmps
push
aas
cmp
and
sbb
test
inc
dec
xor
mov
mov
and
adc
movs
in
jbe
lds
jmp
pushf
and
movs
and
(bad)
push
pop
cmp
xchg
test
jmp
js
sahf
push
cwde
jmp
mov
pushf
mov
and
mov
jl
mov
out
push
add
xchg
add
mov
inc
call
scas
mov
pop
(bad)
jp
mov
dec
sbb
ret
adc
push
push
jo
out
jecxz
push
iret
call
push
xlat
jg
pop
call
xor
movs
loop
jg
sub
xchg
pop
cdq
pop
push
xchg
jg
rcl
lock
adc
mov
dec
or
arpl
jl
jae
ins
loop
jle
outs
and
cmp
test
aas
inc
xchg
or
out
xchg
adc
popa
sbb
test
pushf
pushf
xor
ret
test
mov
je
adc
xor
xor
dec
retf
out
dec
pop
pop
xchg
push
mov
ds
repz
(bad)
pop
add
out
ror
(bad)
pop
pop
fcom
adc
mov
aad
dec
jo
xor
js
in
data16
in
mov
pop
clc
out
xor
jmp
add
xchg
cwde
aam
test
fisub
enter
jnp
mov
(bad)
sub
add
adc
push
sbb
mov
mov
mov
xchg
cmps
pop
pop
xchg
dec
test
mov
(bad)
lods
adc
mov
and
inc
mov
sub
sub
fsub
jbe
and
(bad)
retf
mov
sub
cs
neg
sub
call
out
nop
mov
(bad)
(bad)
mov
sbb
test
(bad)
stc
outs
mov
jae
sahf
jbe
mov
stos
pushf
xor
(bad)
or
xor
and
sbb
ror
retf
mov
cmps
mov
cmps
(bad)
shl
js
mov
movs
scas
js
ins
mov
mov
into
mov
ins
mov
mov
cmp
aaa
ret
and
push
xor
pusha
out
mov
mov
sub
std
test
push
mov
mov
rol
xchg
fadd
push
cmc
mov
sub
mov
adc
add
or
(bad)
or
gs
loopne
xor
cmp
dec
sub
mov
sbb
mov
rcr
repnz
sahf
cmp
aad
lock
push
cwde
je
ror
out
sahf
cmp
in
jg
cdq
call
mov
shl
sbb
clc
repnz
push
xor
push
cli
push
and
push
inc
jg
jg
and
mov
pusha
jb
fwait
ret
into
movs
fistp
loope
or
shr
stos
and
aam
sbb
int3
mov
mov
cmp
dec
jg
mov
mov
and
enter
sbb
pop
fsub
movs
(bad)
or
sbb
and
or
dec
add
icebp
rcl
in
pop
adc
mov
cmps
or
sbb
mov
and
enter
dec
push
nop
jae
fld
mov
ins
shl
pushf
stc
lods
pop
cmps
repnz
xchg
pop
test
pop
(bad)
aaa
xor
outs
mov
mul
outs
mov
pop
push
std
test
mov
mov
jmp
fnstenv
loop
test
sbb
in
shr
in
mov
mov
push
mov
in
into
rcl
jns
ss
pop
shr
movs
fsubr
and
call
or
or
add
sti
jmp
clc
shr
cld
or
fiadd
std
lahf
pushf
out
or
fiadd
stc
imul
loope
(bad)
push
pop
aad
int
les
pop
lods
add
aad
sti
lahf
pushf
out
add
jecxz
(bad)
or
add
stos
mov
stc
neg
shl
mov
pop
or
add
cmc
mov
out
retf
pushf
neg
push
mov
jae
push
lods
cmp
inc
jo
aad
rol
or
(bad)
xor
(bad)
mov
inc
and
shr
xor
out
sub
add
jb
jns
int
out
mov
dec
fst
hlt
cmp
ss
fdivr
out
or
in
mov
lds
push
mov
(bad)
into
add
pusha
mov
jl
jmp
test
mov
cmps
imul
sub
fsub
fisub
sbb
mov
inc
shl
adc
into
pop
mov
lods
sbb
and
fiadd
jb
mov
shl
dec
inc
and
push
mov
push
dec
movs
test
mov
xor
inc
jecxz
call
imul
mov
adc
clc
mov
ins
push
gs
jmp
jb
stos
pop
push
sub
hlt
push
cwde
pushf
(bad)
sbb
push
movs
aaa
pop
or
mov
fs
cdq
mov
lods
mov
cmp
push
xor
or
add
jbe
mov
jmp
lock
xchg
add
test
aad
test
fcom
ret
shl
lahf
ror
adc
jl
jns
iret
aas
movs
test
sbb
mov
pop
out
cld
adc
mov
test
adc
jmp
imul
mov
mov
mov
je
loop
nop
rcl
adc
sar
jmp
adc
lods
sbb
lods
push
jl
test
les
in
fwait
and
push
cmp
scas
adc
fstp
loope
mov
fwait
gs
jle
push
js
fcom
and
mov
push
fwait
test
push
in
pop
mov
es
xlat
jle
jmp
push
sbb
mov
stc
mov
dec
fldenv
sbb
aaa
dec
fistp
ficom
or
cmp
inc
dec
sbb
out
sbb
outs
sub
dec
std
lods
mov
das
jl
loopne
mov
mov
mov
sub
int
sbb
jno
dec
xor
mov
mov
cmp
xchg
nop
pop
push
(bad)
int3
outs
push
cmp
jnp
sub
sbb
loope
test
and
out
test
cld
mov
sbb
shl
sub
mov
xchg
stos
fs
push
fsub
mov
retf
adc
jl
sbb
pop
xchg
lahf
dec
mov
add
mov
fdiv
gs
mov
sub
mov
xchg
scas
dec
pop
mov
push
pushf
jno
enter
mov
loop
int
out
sbb
loope
(bad)
stos
mov
pop
shl
push
movs
enter
xor
push
xchg
lods
add
mov
mov
cmp
jmp
mov
jbe
scas
adc
pop
xchg
fist
mov
push
scas
inc
push
rcr
mov
mov
faddp
out
sbb
mov
cmps
test
inc
mov
mov
push
in
jne
mov
mov
seto
xchg
jo
mov
pop
daa
mov
mov
dec
not
mov
(bad)
mov
lds
ds
xor
and
adc
in
stos
dec
xchg
ds
dec
shr
mov
jecxz
leave
mov
xchg
data16
test
imul
lds
and
pop
aam
mov
and
xchg
popf
xchg
adc
mov
inc
dec
sub
bound
jmp
mov
(bad)
push
xchg
or
movs
shl
lods
ds
xor
test
jge
mov
push
repz
cwde
sbb
lahf
pop
jmp
jbe
and
cmps
mov
jmp
adc
pop
adc
mov
sub
loopne
xor
or
ins
or
call
sub
fdivr
ins
iret
mov
nop
les
sbb
mov
sar
pushf
fcom
lahf
shl
mov
es
js
mov
test
push
sub
mov
push
sahf
mov
dec
and
out
cmps
jl
add
mov
adc
popa
and
dec
aaa
ss
xor
lds
push
jmp
pop
mov
sti
jo
sbb
xchg
cmp
or
mul
jl
fcom
mov
adc
out
jg
dec
push
cmp
mov
jmp
rol
es
out
and
ficom
icebp
fcom
loop
inc
mov
fisttp
mov
and
or
push
adc
jmp
bound
(bad)
test
les
in
sub
int
in
ja
pop
mov
mov
aam
xchg
jl
mov
outs
pop
cmp
push
aad
mov
jnp
sub
imul
cmps
xlat
lods
arpl
mov
push
imul
in
push
push
in
push
adc
xchg
xchg
lds
addr16
inc
pop
aas
fwait
jnp
fwait
jne
fild
repnz
shl
cmc
leave
gs
mov
xor
ret
pop
fsub
aam
pushf
adc
pop
pop
aas
sub
jg
mov
mov
sub
mov
or
or
arpl
ja
cld
sub
stos
mov
cmps
jp
push
(bad)
adc
adc
fcmovb
cmp
je
or
pop
sar
in
daa
xchg
dec
dec
xor
retf
mov
xor
dec
push
or
xlat
pusha
rol
js
mov
je
dec
call
paddsb
jne
mov
lods
sbb
cmps
std
mov
(bad)
cmp
ins
pop
jecxz
in
jmp
cld
fsubr
call
(bad)
(bad)
idiv
pusha
dec
test
jecxz
mov
mov
pushf
fs
pushf
push
ss
pushf
jo
test
mov
pushf
mov
mov
test
add
dec
lahf
sbb
mov
mov
movs
test
aad
cwde
fcmovu
(bad)
shl
aad
add
in
lods
inc
in
stos
(bad)
call
arpl
sbb
in
out
(bad)
in
jecxz
call
jmp
pushf
jne
fs
pushf
test
ficom
sbb
fs
mov
dec
lds
mov
adc
loope
movs
ret
mov
add
out
cmps
pop
movs
and
push
nop
dec
jbe
adc
(bad)
repnz
test
jge
pop
push
sar
lods
inc
(bad)
mov
jl
fcomp
pushf
jp
cmp
mov
jl
or
test
mov
push
push
lods
add
fstp
dec
cdq
mov
scas
test
lods
jmp
sti
push
xchg
sar
pop
sub
sbb
lock
repz
cmp
jg
fcmovnu
adc
ds
mov
push
pusha
lods
js
call
(bad)
jmp
mov
or
je
push
push
add
mov
jl
mov
mov
sbb
sti
fstp
pop
mov
xor
jmp
movs
lods
sbb
out
xchg
shl
test
and
lahf
mov
mov
push
xchg
mov
das
jb
js
pushf
fs
ins
jne
jo
shl
adc
and
lds
cld
pop
mov
test
mov
cmps
(bad)
push
mov
outs
and
inc
int3
inc
mov
out
jl
dec
sub
mov
jl
mov
mov
aad
sbb
jl
out
dec
(bad)
pop
call
cmp
ret
aam
ret
or
enter
loope
(bad)
mov
hlt
lods
loop
iret
into
mov
adc
pop
mov
lods
(bad)
mov
pop
lds
popa
daa
call
fbld
mov
mov
jle
std
jno
or
rcl
sub
daa
adc
movs
rcr
ret
add
popa
loopne
push
cwde
mov
out
push
mov
xchg
jns
add
or
sbb
or
jg
dec
lds
stos
fnstsw
pushf
or
pop
jp
gs
std
nop
sbb
out
js
cmps
dec
hlt
shl
or
lahf
push
adc
ret
mov
imul
loope
std
jecxz
(bad)
cli
pop
cmps
mov
pop
jbe
stos
mov
jge
sbb
nop
push
adc
inc
fistp
imul
pop
fmul
inc
adc
jge
sub
rol
cmp
test
mov
stos
mov
stos
xchg
or
adc
sbb
(bad)
repnz
mov
add
test
lahf
adc
test
(bad)
mov
mov
cmp
cmps
inc
lods
shr
sub
(bad)
hlt
mov
bound
nop
push
adc
xchg
je
cmps
dec
mov
es
pop
mov
mov
movs
sahf
jge
ret
pushw
jmp
sbb
add
mov
mov
sahf
cmp
cmps
jp
xor
adc
int3
mov
dec
cmp
pop
sub
jo
add
and
pop
jo
enter
cdq
sub
movs
push
push
ret
mov
ins
dec
sbb
sub
mov
rep
and
pop
push
pop
(bad)
jg
ret
fidiv
pop
enter
mov
repnz
mov
inc
cs
enter
push
push
cmps
popf
xchg
mov
mov
pusha
fdiv
retf
mov
lods
mov
adc
lea
aam
in
or
and
pop
pop
and
pop
scas
repz
outs
dec
mov
jae
scas
cmps
add
(bad)
les
scas
movs
add
mov
dec
hlt
(bad)
retf
cwde
xor
lock
out
aas
jno
mov
fst
jmp
add
sbb
dec
xor
jl
ins
aaa
dec
cmp
pop
pop
scas
push
mov
cmps
mov
push
enter
sub
adc
scas
(bad)
adc
mov
sub
movs
lock
imul
push
lods
jecxz
mov
sbb
push
adc
(bad)
(bad)
pop
shl
mov
cmp
fiadd
mov
xor
push
mov
aam
adc
jl
nop
xchg
rcr
stos
pop
cdq
mov
mov
call
sahf
push
aaa
movs
sahf
(bad)
xchg
push
std
inc
sbb
push
call
lods
dec
cmc
cld
sbb
shl
or
jno
mov
sub
or
sub
stos
push
add
inc
fwait
out
int3
out
cmp
aad
out
push
sbb
out
jmp
dec
shl
(bad)
lods
sbb
add
xor
pop
mov
pop
sub
imul
ins
les
mov
push
xchg
movs
(bad)
(bad)
fisub
out
mov
add
clc
call
adc
push
fadd
xchg
aas
ss
dec
leave
(bad)
int
cmc
test
lods
test
mov
xchg
pop
loopne
mov
jp
jmp
call
mov
pushf
adc
adc
or
xchg
aaa
pop
popf
lock
jmp
movs
pop
call
or
and
(bad)
in
pop
loope
jae
xor
scas
movs
mov
in
lock
aam
sbb
jp
lods
or
mov
fmul
xchg
test
mov
push
pop
sahf
(bad)
sub
shl
jnp
call
xchg
sbb
xchg
pop
push
(bad)
mov
push
in
and
mov
add
mov
fstp
int3
add
pop
and
lea
test
aas
cmc
ins
sbb
mov
inc
stos
movs
adc
mov
or
test
adc
mov
cwde
call
push
mov
pop
leave
push
test
sbb
iret
fadd
dec
push
sub
pop
sub
leave
mov
pop
mov
and
sti
cld
retf
daa
cmps
dec
jle
leave
sub
or
mov
cmp
sub
movs
sub
sahf
ret
pusha
cmp
pushf
mov
sub
xor
pop
in
mov
xchg
push
or
fmul
clc
xchg
arpl
inc
enter
xchg
adc
int3
loop
push
or
cwde
jb
xchg
adc
out
mov
push
test
fiadd
popf
iret
test
mov
sbb
iret
ds
in
adc
int3
mov
mov
add
adc
mov
adc
test
adc
or
inc
int
or
ror
movs
xor
xchg
xchg
sub
lock
xor
test
retf
(bad)
mov
fsubrp
and
jbe
pop
iret
icebp
(bad)
cmp
xchg
cmp
xchg
dec
jne
lods
and
cmp
and
int3
xlat
loop
pop
fbstp
movs
and
push
jmp
jl
push
dec
(bad)
pushf
jmp
push
add
test
jp
std
aas
das
xchg
mov
mov
inc
jo
dec
mov
xchg
push
addr16
push
scas
mov
add
fist
inc
js
cmp
adc
mov
int3
xchg
mov
daa
dec
ds
xchg
add
or
mov
fwait
cmps
push
xchg
int
into
arpl
out
sbb
cmc
fmul
push
lahf
pop
lea
mov
pop
jl
dec
mov
dec
call
sahf
pop
fisubr
popf
and
jmp
sbb
leave
je
push
mov
pop
(bad)
dec
jns
mov
(bad)
jnp
or
push
cld
mov
inc
mov
mov
mov
cmc
jmp
mov
add
sbb
mov
gs
test
ficomp
jnp
daa
int
(bad)
popa
ret
mov
in
stos
cmp
xchg
cmp
cmc
cmp
xchg
mov
call
xor
cs
or
mov
cmp
lahf
add
adc
add
call
inc
push
cli
repnz
xlat
enter
lea
out
stos
repz
rcl
pop
lock
sbb
cmp
out
loope
and
sub
jno
cmp
inc
stos
pop
dec
jno
std
dec
stos
add
sahf
in
leave
inc
cmp
ret
xor
sbb
mov
jl
mov
jnp
ja
shl
pop
or
inc
movs
iret
fisttp
cmps
pop
cmp
xor
push
mov
retf
cdq
jmp
mov
push
pop
cdq
fcmovnbe
sbb
iret
aad
dec
call
push
imul
inc
sub
and
rcr
lock
xchg
pop
jl
dec
dec
int3
dec
lock
stos
cwde
fdivr
jo
xchg
inc
cmp
or
mov
and
pop
rcl
mov
jl
nop
(bad)
mov
and
adc
retf
mov
xor
pop
pop
(bad)
jmp
fwait
jmp
(bad)
shl
fcomip
fnstcw
bnd
jmp
popf
fist
(bad)
xor
rcl
sbb
jo
je
pusha
xchg
sbb
cdq
cmp
push
test
nop
xchg
clc
cmp
stos
loopne
adc
cmp
mov
call
cmc
ret
pop
stc
repz
sbb
lods
popf
cmp
push
adc
scas
dec
add
ins
cmp
(bad)
shl
nop
fiadd
movs
rcr
jp
int3
inc
sbb
rcl
fcmovbe
mov
shl
sub
test
adc
enter
xchg
sbb
jmp
xor
loopne
ins
shr
stc
lods
xchg
adc
stos
inc
mov
ins
mov
cdq
ins
or
mov
push
pop
jl
xchg
iret
mov
jno
test
cmps
cmp
ror
outs
rcl
push
jl
sub
mov
mov
test
jge
pop
jle
in
xor
mov
hlt
pop
out
inc
aaa
xchg
pop
aam
loop
adc
lea
sub
(bad)
(bad)
pop
inc
fs
aam
(bad)
sbb
les
sbb
lods
test
daa
inc
pop
xchg
mov
rcr
inc
lock
sub
(bad)
ss
mov
or
pushf
shr
fwait
add
sub
lods
stos
xchg
inc
(bad)
xchg
jmp
lahf
loope
aas
or
cmp
cwde
cwde
int3
mov
ins
jne
iret
je
push
pop
test
mov
movs
pushf
mov
fcom
jg
cmp
out
dec
enter
and
adc
fwait
test
cmp
xchg
das
pushf
aad
pushf
jbe
pop
cmp
xchg
sbb
dec
std
adc
xchg
addr16
xchg
xchg
(bad)
cmps
fmul
lea
jne
push
xchg
lahf
mov
fmul
adc
push
loopne
xor
or
(bad)
sbb
aam
or
jg
cmc
clc
dec
cwde
(bad)
mov
aad
xchg
stos
mov
iret
test
xchg
or
nop
aam
in
mov
pusha
xor
inc
mov
add
mov
aad
arpl
push
call
(bad)
or
mov
movs
mov
hlt
and
mov
mov
mov
push
jl
jns
(bad)
sbb
adc
(bad)
sbb
pop
arpl
push
loop
cli
sbb
mov
shl
mov
push
push
sysexit
lock
imul
and
jo
cmp
dec
xchg
movs
cmp
and
movs
scas
sub
movs
sbb
in
pxor
xchg
fadd
test
sbb
xchg
sar
outs
mov
ret
shr
cmp
int3
test
rcl
pushf
call
dec
mov
outs
push
add
fild
mov
ret
push
jbe
inc
outs
cmp
xchg
scas
mov
lods
sahf
ja
lahf
addr16
pop
call
or
sbb
xor
xchg
mov
movs
push
repz
push
inc
in
cmp
sbb
cmps
pushf
jl
push
bound
or
add
adc
ret
push
out
mov
lock
in
push
scas
add
push
test
repz
sahf
push
cmps
jl
aad
sbb
mov
xchg
fimul
mov
cld
or
add
int
out
pusha
jb
lea
pop
(bad)
aad
sbb
cwde
and
iret
loopne
les
sbb
mov
adc
mov
mov
shl
lods
iret
sbb
and
cdq
sti
jg
mov
mov
dec
push
sub
in
dec
loope
fsubr
sbb
cmc
sub
enter
jmp
iret
push
popf
nop
push
mov
inc
ret
jne
outs
dec
call
cld
sub
add
popf
data16
stc
lahf
aam
dec
jmp
jl
in
cmps
cmp
(bad)
(bad)
and
cmps
push
mov
mov
pusha
fisub
push
loop
xor
inc
les
dec
scas
dec
les
jl
lea
cmps
mov
shr
loopne
mov
xchg
leave
mov
xchg
aam
out
cmps
sbb
int3
mov
xchg
or
adc
fcmove
and
mov
xor
xchg
pop
sub
or
in
or
stos
movs
test
int
loop
or
add
movs
movs
or
xlat
ins
mov
cmps
jle
js
sub
daa
nop
cmp
xchg
pop
icebp
mov
fcmovnb
push
ins
popa
pop
lahf
lea
popa
xchg
loop
into
enter
cld
in
cmps
push
mov
jecxz
es
ret
into
mov
in
inc
xchg
jnp
or
mov
sti
push
sub
lods
daa
aam
sbb
mov
not
inc
jno
or
cmps
inc
mov
and
add
mov
mov
jo
xlat
pop
xor
dec
sti
jp
mov
xor
xor
adc
or
adc
nop
add
cld
std
retf
lods
out
push
fist
mov
mov
rol
test
mov
add
std
addr16
cli
std
add
pop
cld
mov
mov
pop
mov
rcr
ja
daa
mov
mov
fwait
jg
pop
ja
xchg
les
sbb
icebp
nop
jp
sub
clc
cwde
int
mov
inc
mov
(bad)
shl
xchg
test
sbb
lock
jns
inc
mov
xor
pop
mov
adc
mov
jmp
xchg
xchg
fcom
std
pusha
test
fstp
les
movs
jmp
outs
das
cwde
cmps
(bad)
fidiv
rcr
les
aam
nop
mov
fcmovbe
out
and
lock
mov
test
aad
mov
test
inc
retf
nop
fcmovu
xchg
(bad)
(bad)
loopne
loop
sub
movs
cmps
out
jmp
out
cmc
sbb
sbb
enter
add
xchg
add
push
pop
or
or
xchg
or
push
(bad)
(bad)
enter
retf
int3
int
ret
rol
push
xchg
fidivr
or
xor
test
jnp
mov
test
shr
(bad)
jg
jge
pop
mov
int3
int3
aam
or
in
sub
int3
int3
jg
pop
test
(bad)
or
jl
adc
sub
daa
xor
add
cmp
sub
(bad)
sub
mov
push
cld
sbb
popf
xchg
in
jl
movs
fisub
xchg
inc
mov
mov
out
lods
cmp
movs
repnz
loope
mov
lods
or
lods
es
cmps
(bad)
push
push
sbb
out
pusha
out
push
cli
lock
dec
mov
sub
imul
xor
mov
sub
push
lds
mov
loope
sbb
mov
jmp
or
mov
test
xor
ficomp
call
and
nop
movs
cmp
gs
hlt
jns
inc
pop
(bad)
xor
fs
sub
mov
js
xchg
fs
test
pop
lahf
jmp
adc
push
adc
or
loope
xchg
jmp
pop
jmp
mov
lods
jo
jg
sub
adc
mov
mov
sub
adc
lahf
fbstp
ret
cwde
lea
xor
shl
dec
fisub
into
mov
pop
jg
std
mov
stos
jg
sub
pusha
and
ret
jl
test
push
dec
cmp
push
test
jmp
je
jns
aas
sahf
sbb
mov
jecxz
ret
push
mov
mov
jg
dec
arpl
jecxz
popf
stc
mov
out
leave
sahf
sub
pushf
out
jp
add
addr16
movs
or
lahf
fiadd
mov
ds
jp
sbb
jl
cmp
inc
js
movs
stos
lea
xchg
jecxz
mov
rol
test
jmp
or
repz
pop
or
mov
data16
repz
or
pop
push
pushf
mov
test
pop
pop
movs
and
pop
pop
fldcw
mov
jmp
scas
shr
fcmovbe
and
jno
sti
data16
leave
mov
out
pop
dec
mov
mov
cmp
ret
arpl
cmps
arpl
push
jl
popf
sbb
inc
xlat
bound
or
out
jge
sub
sbb
test
inc
cmp
rcr
test
ror
mov
pop
push
mov
jl
jno
rol
mov
mov
fldl2t
rcr
jo
inc
sub
fidivr
movs
shr
loope
pushf
sbb
sub
inc
push
inc
fild
and
jg
or
ffreep
xchg
mov
jnp
(bad)
pop
test
xor
xchg
pop
dec
sar
xchg
add
test
test
push
inc
dec
rcl
enter
sbb
enter
out
jle
mov
pop
jl
or
push
rcl
fsub
lahf
aam
jg
rcr
adc
pop
gs
mov
fcomp
jecxz
dec
xor
cwde
dec
xchg
test
fiadd
clc
test
pop
mov
or
push
fxch
aad
mov
aad
nop
xchg
jb
jne
mov
in
lea
or
cli
rcr
mov
sub
aam
push
push
or
hlt
adc
sub
inc
pop
outs
dec
fidiv
mov
cmps
mul
aas
int3
inc
mov
sbb
pop
xchg
arpl
cdq
int3
out
ror
and
cmps
shl
push
cmps
add
mov
sbb
aas
and
ffree
shl
dec
dec
push
mov
jns
and
xor
jg
enter
je
jl
jb
cmp
and
mov
adc
and
jg
mov
int3
sub
mov
mov
mov
pushf
xor
dec
div
aad
sti
mov
dec
call
lods
shl
add
mov
mov
bound
movs
(bad)
rep
test
lds
icebp
shl
pop
fwait
or
mov
lea
inc
adc
cmps
pop
jne
push
std
fisttp
pop
fsubr
mov
fwait
sub
clc
mov
in
scas
mov
mov
mov
cld
push
dec
into
xor
stos
add
(bad)
into
xor
mov
xchg
adc
cli
mov
shl
adc
mov
xor
mov
loopne
pop
mov
sub
lods
inc
xchg
sbb
or
sti
mov
pop
inc
int3
bound
stos
(bad)
add
ret
push
les
pop
mov
sar
cwde
lahf
add
or
into
xchg
jmp
stc
jmp
adc
lods
rcr
add
fiadd
in
cs
in
sahf
aam
fdiv
fs
mov
jge
mov
cmps
fwait
ret
or
cmp
jns
dec
sub
cli
or
das
in
xchg
mov
call
pop
in
jmp
ja
stos
lods
test
or
mov
mov
test
jl
mov
mov
inc
cwde
xchg
ret
xor
pop
or
sti
repz
sbb
fs
fnstsw
cdq
lock
fisttp
jg
cmps
push
inc
lock
in
mov
rcl
jne
cli
(bad)
add
popf
cmp
mov
in
push
mov
test
fisttp
push
fcomp
mov
sub
jp
mov
mov
add
xor
fcomp
pop
inc
movs
mov
push
in
int
mov
and
clc
mov
pop
add
or
or
js
(bad)
jmp
inc
stc
enter
cmp
scas
mov
scas
mov
jbe
sub
xchg
daa
fidivr
call
cmp
mov
and
sbb
iret
imul
jmp
shl
stos
fmul
xor
mov
or
cmp
cmps
dec
popf
push
push
adc
or
repnz
cmps
jmp
into
xchg
jmp
push
inc
xor
xchg
inc
mov
stos
test
pop
mov
xor
jge
mov
stos
je
and
inc
jmp
rcl
data16
sub
test
mov
lock
in
lods
sub
push
jo
push
lock
clc
push
lds
add
add
test
inc
cwde
pop
and
(bad)
and
fwait
scas
shr
adc
sub
loopne
mov
es
add
sbb
and
out
aad
movs
call
das
and
or
sub
(bad)
cmps
sub
xchg
fbld
xchg
int3
lods
lods
mov
and
fs
ins
xchg
pop
test
xor
cwde
imul
ret
ret
xchg
pushf
mov
jl
ins
dec
lock
mov
call
sub
jbe
icebp
cdq
or
add
aas
test
mov
das
inc
movs
mov
dec
test
cld
aad
push
mov
dec
js
mov
je
mov
mov
mov
mov
xchg
mov
enter
int3
jnp
mov
fwait
int3
movs
fadd
sub
in
fwait
or
js
xor
sbb
and
ds
cdq
pop
or
pushf
adc
add
aaa
sbb
inc
aam
sbb
je
mov
(bad)
fdiv
jb
call
repz
xor
mov
pop
lea
mov
rcl
iret
cmp
fcom
and
and
inc
mov
jae
dec
int
repnz
inc
sbb
fmul
retf
mov
mov
js
cmp
scas
xlat
out
adc
jno
jo
ins
dec
push
and
aad
daa
loope
ins
fisubr
xchg
mov
mov
xlat
loopne
ins
mov
push
lods
lahf
pop
movs
jno
(bad)
les
retf
js
mov
ins
ror
pushf
fs
nop
pop
ins
retf
mov
pushf
xchg
into
(bad)
pusha
sbb
add
mov
mov
mov
in
jo
in
xor
gs
sbb
cmp
cli
aad
leave
push
and
adc
pop
cmps
jo
cs
rcl
(bad)
jg
je
test
loopne
test
cmp
int3
push
movs
dec
mov
jmp
inc
inc
jae
jae
(bad)
aaa
clc
xchg
mov
push
lahf
mov
jge
mov
jg
xchg
lea
cli
sahf
int
leave
pop
pop
mov
mov
rol
sbb
or
and
add
pusha
lods
mov
mov
jg
cmp
xchg
ret
clc
leave
mov
dec
sub
fwait
jmp
sub
fs
mul
mov
cmps
outs
je
stos
shl
pushf
clc
lods
cmc
cmp
scas
mov
mov
sbb
scas
jae
dec
enter
push
ins
push
dec
scas
jne
in
out
and
jmp
scas
adc
scas
(bad)
int3
fcomp
adc
lods
adc
xchg
ret
sbb
mov
add
dec
xor
xchg
ins
xchg
jno
test
inc
inc
mov
sbb
or
les
and
and
jl
push
pop
loope
dec
dec
and
and
mov
fmul
out
shl
movs
fdivr
dec
ss
mov
push
sub
div
cmp
adc
push
push
repz
mov
popa
cmp
imul
cmp
cmps
popf
pop
adc
pop
xchg
and
sar
mov
js
mov
mov
pop
inc
fs
add
mov
sbb
fs
pop
adc
and
mov
jmp
pop
sar
(bad)
int
pop
xor
(bad)
and
shl
adc
mov
bound
push
in
and
outs
inc
shl
sahf
outs
out
push
outs
cwde
push
pushf
sbb
int
icebp
push
enter
outs
inc
cmp
movs
add
imul
movs
ds
inc
pop
repz
ret
mov
mov
jo
adc
mul
or
cli
(bad)
cmc
pop
cmc
imul
xchg
(bad)
jmp
cmps
jg
sub
sbb
jo
mov
pop
xor
fistp
mov
mov
push
inc
inc
cli
popf
sbb
dec
leave
addr16
xchg
gs
fs
addr16
and
data16
jne
ret
and
pop
pop
data16
jp
mov
cmps
sub
aas
jp
loop
sbb
(bad)
pop
nop
movs
xchg
jno
cdq
(bad)
fild
stos
jns
jge
fldcw
dec
pop
in
xchg
outs
or
pop
pop
(bad)
fist
inc
shl
pop
jmp
(bad)
cmp
scas
sub
lods
call
adc
rcr
xchg
ins
or
sbb
add
sub
test
or
pop
sbb
fdiv
ret
scas
nop
mov
je
in
lods
test
outs
sub
(bad)
xor
xlat
adc
inc
jbe
scas
jne
xchg
mov
ins
dec
les
std
sbb
push
dec
lods
sub
xor
xlat
mov
cwde
test
xchg
mov
int
pushf
(bad)
(bad)
push
mov
xlat
cmp
pop
mov
lods
push
arpl
repnz
pushf
push
imul
adc
call
out
movs
sar
push
scas
lods
pop
addr16
lods
jmp
out
inc
and
out
inc
and
xor
data16
shr
fisttp
mov
shl
aam
test
movs
or
movs
fldenv
not
mov
jnp
outs
push
frstor
pop
mov
in
fwait
sar
pop
clc
lock
xor
mov
aad
arpl
lods
add
add
xchg
xor
and
push
pushf
adc
int
sbb
cld
in
dec
sbb
and
in
add
xor
add
pop
(bad)
in
mov
or
or
ret
cld
push
add
shl
loope
push
xor
ret
cwde
mov
sub
add
jae
push
in
or
in
loopne
push
mov
jne
add
xor
aad
int
mov
mov
cmps
test
mov
scas
and
sahf
ins
xor
and
pop
scas
sbb
(bad)
in
sahf
sub
jle
xor
test
dec
inc
pop
xor
sahf
or
scas
sbb
pop
not
scas
sbb
or
sti
mov
scas
jne
mov
icebp
scas
test
xlat
add
loope
in
test
scas
fldcw
add
int3
jnp
lods
dec
test
sar
mov
or
movs
or
mov
sahf
or
cld
fdiv
mov
test
movs
mov
cld
in
cmps
stos
movs
ss
push
cmp
push
dec
imul
sbb
fbld
cmp
xlat
int
sbb
sbb
cmps
xor
cmp
sbb
push
add
or
repz
movups
cmp
cmp
js
mov
mov
je
icebp
jl
bound
dec
xor
jns
enter
imul
bound
jbe
add
sbb
sbb
repz
movs
sub
add
push
xchg
sub
inc
and
(bad)
(bad)
ror
dec
sbb
test
push
pop
test
add
add
std
pop
and
sar
outs
mov
sbb
sbb
pop
or
sub
int3
mov
sbb
sbb
pop
sbb
lock
test
rcl
cmp
arpl
aad
jge
loopne
ror
out
shl
push
addr16
jmp
(bad)
inc
ja
jno
xor
mov
in
stos
mov
fs
pushf
add
mov
fs
scas
sbb
std
pop
cmc
jmp
enter
xchg
shl
jo
and
dec
xchg
xchg
dec
imul
inc
loop
mov
clc
mov
sbb
call
jg
fst
inc
out
rcr
test
add
and
push
sbb
push
inc
movs
stos
rcr
sbb
cmp
sbb
cwde
fstp
loop
inc
(bad)
cmp
mov
push
js
rol
ret
xchg
push
or
addr16
shl
cld
pusha
dec
mov
push
outs
cmps
dec
test
in
in
xor
pushf
sbb
movs
and
repnz
push
out
dec
xor
cmp
and
test
fsubr
push
sbb
loopne
push
in
push
(bad)
(bad)
pop
aam
rcr
mov
(bad)
movs
xor
inc
aam
mov
push
inc
call
push
lock
push
loop
xchg
mov
(bad)
(bad)
inc
jl
stc
lock
and
push
xor
and
xor
movs
scas
sub
out
cdq
pushf
xchg
push
jge
jmp
and
xchg
fwait
stos
aad
test
fsubr
fisubr
jae
fisttp
std
mov
xchg
sbb
jecxz
xchg
imul
dec
stos
pushf
xchg
adc
loope
mov
ret
je
mov
call
sub
xchg
jecxz
mov
mov
movs
or
pop
shr
fadd
mov
cwde
ds
or
fist
sbb
fcmovb
xchg
bound
aas
loopne
int3
xchg
(bad)
xchg
pop
out
cmp
pop
stos
pusha
mov
pop
popf
or
movs
inc
push
cmp
cmp
stos
xchg
loop
call
push
loop
cli
(bad)
mov
xchg
or
mov
add
popf
sahf
ins
or
loopne
les
std
cmps
mov
(bad)
sbb
mov
xchg
cmc
gs
call
les
add
or
mov
push
enter
pop
sbb
lds
jns
pop
mov
in
clc
and
lds
pop
add
loop
mov
loope
scas
lahf
lahf
pop
enter
inc
shr
add
add
dec
rcr
cmp
dec
lods
push
and
div
std
out
mov
je
sbb
mov
xchg
pushf
(bad)
jle
sti
enter
mov
pop
xchg
mov
call
aam
imul
and
or
mov
mov
stc
xchg
pop
xchg
(bad)
int3
lds
clc
fwait
mov
sub
xchg
test
fimul
call
out
(bad)
stc
sbb
or
cli
xchg
xcrypt-ctr
cmps
fwait
aas
cmp
sub
push
fldenv
sbb
icebp
aaa
fistp
and
or
jl
sbb
push
jecxz
test
mov
push
or
call
fadd
xor
call
fstp
pusha
stos
xchg
jne
push
sub
xchg
mov
inc
sbb
mov
les
(bad)
loop
popf
icebp
test
shl
push
ficom
cmp
or
rcl
dec
aad
xor
adc
hlt
pop
test
nop
sbb
lahf
out
xchg
sub
push
xor
push
retf
in
jmp
jl
mov
dec
inc
mov
or
sub
mov
clc
mov
repz
push
jl
std
out
call
push
and
jns
cwde
xor
enter
push
cld
mov
mov
cli
pop
adc
sbb
sbb
pushf
inc
dec
or
(bad)
push
dec
popf
out
es
sbb
ins
sub
push
or
adc
cmps
les
xchg
mov
imul
mov
test
mov
jl
in
mov
mov
pop
mov
mov
push
push
push
mov
xchg
and
in
pop
(bad)
adc
inc
call
mov
(bad)
nop
arpl
imul
fcom
xor
call
cld
inc
fsubr
mov
mov
loopne
ret
enter
push
(bad)
rcr
out
aam
and
rcl
(bad)
push
mov
fidivr
int
mov
jg
fdivr
mov
out
mov
and
jl
sbb
xchg
je
mov
jo
rol
ins
sbb
add
bndstx
mov
mov
int3
(bad)
push
push
arpl
cwde
pop
push
xchg
int3
fcom
mov
push
adc
push
mov
repz
aaa
pop
retf
xchg
mov
pop
adc
cli
sub
scas
pop
mov
es
mov
jbe
addr16
mov
fcom
mov
popf
add
adc
jae
shl
ds
ret
push
movs
hlt
sub
fwait
stos
xchg
cwde
sahf
mov
shl
je
cdq
xchg
mov
in
jecxz
loope
cmps
sar
adc
or
push
mov
sar
aaa
in
push
mov
adc
xchg
test
mov
jle
jle
sbb
clc
and
sbb
sbb
cmc
mov
sub
call
pop
pop
nop
xchg
xlat
nop
push
cmps
sbb
add
(bad)
js
out
xor
lock
mov
test
stc
adc
(bad)
add
iret
pop
lods
ficomp
mov
cmp
fsubr
sar
pop
repz
pop
dec
pop
cmp
inc
jno
adc
sbb
popf
cwde
mov
fidivr
popf
sar
js
mov
xchg
adc
aaa
mov
add
mov
clc
cli
shl
enter
in
or
ret
mov
and
cmc
push
mov
pop
and
push
sbb
(bad)
enter
xchg
ret
mov
or
mov
mov
pop
in
mov
out
popf
inc
and
loop
or
mov
in
xchg
sub
pushf
cmp
bound
loopne
jl
js
test
into
push
out
pusha
cmp
mov
out
adc
mov
pop
mov
adc
cmps
sbb
stos
in
mov
fild
in
and
push
dec
mov
and
(bad)
pop
xchg
mov
dec
mov
ficom
sbb
jg
iret
call
xor
adc
mov
mov
add
push
fcom
lahf
popa
jo
push
and
mov
lea
jg
xor
pop
inc
push
mov
xor
sbb
(bad)
mov
ret
int
xchg
enter
(bad)
sub
(bad)
push
adc
outs
xor
mov
and
xor
sbb
xchg
ret
sbb
std
add
cwde
jl
fmul
fdiv
add
sbb
dec
fadd
in
push
js
mov
push
movs
(bad)
jno
pop
movs
ret
sbb
cmp
adc
popf
ins
push
movs
in
dec
sbb
pop
and
imul
cmps
sbb
adc
jl
mov
inc
fcom
and
mov
sbb
test
scas
repz
fistp
movs
pushf
mov
mov
sbb
pushf
retf
ss
add
adc
call
push
push
fistp
mov
out
xchg
xchg
adc
js
jo
clc
scas
out
push
fstp
add
scas
pop
fidiv
inc
adc
es
sub
sbb
dec
call
rcl
push
xchg
int3
xor
aam
nop
fld
push
xchg
icebp
lock
jns
test
in
push
enter
loope
or
call
in
mov
jb
push
shl
in
jae
frndint
hlt
xor
push
inc
sbb
test
mov
mov
dec
fscale
loope
push
xor
jp
sub
and
sbb
cmp
cmp
mov
jmp
not
enter
mov
or
retf
cmove
pop
sbb
ret
pop
cmp
lods
in
enter
popf
ret
clc
push
dec
mov
lds
pop
or
je
in
jg
jno
xor
arpl
rol
sub
jl
movs
and
fadd
addr16
imul
pushf
mov
rol
pushf
sub
bound
mov
sub
and
add
and
mov
xchg
xchg
es
aaa
adc
dec
and
push
mov
call
inc
jl
(bad)
push
or
xor
jmp
in
test
sbb
aam
ins
pop
cmps
add
imul
iret
fs
ret
out
mov
aad
outs
nop
adc
mov
stos
loop
xor
pop
jl
and
sub
mov
hlt
icebp
das
xor
(bad)
stc
sbb
int3
test
sbb
jmp
or
push
and
arpl
repnz
sbb
sbb
cmps
ror
adc
jmp
jbe
push
xlat
(bad)
pushf
es
xchg
and
call
jbe
sbb
jnp
xor
push
addr16
rcr
iret
scas
ds
mov
popa
lock
pusha
push
arpl
sbb
xor
mov
dec
lds
adc
vpunpckhdq
sbb
push
fsub
adc
aam
xchg
push
dec
jb
aaa
and
mov
cld
in
mov
sbb
dec
hlt
xor
xchg
pop
dec
mov
adc
sbb
fsubr
mov
movs
pushf
pushf
inc
sbb
cli
mov
movs
push
sbb
fsub
test
mov
and
movs
rcr
mov
loopne
scas
pushf
mov
(bad)
add
mov
fist
inc
fadd
pushf
jae
(bad)
les
enter
mov
mov
movs
inc
sbb
fdiv
mov
or
sbb
sbb
(bad)
fdiv
loopne
inc
mov
movs
in
pop
sbb
in
mov
movs
ins
sbb
fsubr
mov
movs
into
pushf
lock
mov
movs
mov
mov
movs
mov
in
movs
xchg
nop
mov
movs
or
fadd
and
je
or
(bad)
cmp
movs
or
pop
fcom
adc
adc
push
sub
mov
(bad)
sub
sbb
and
and
(bad)
add
cld
rcl
and
in
sbb
fadd
fisub
(bad)
iret
mov
movs
sbb
cmp
movs
cmp
les
(bad)
adc
add
inc
mov
movs
hlt
pushf
dec
sbb
xor
in
push
mov
int
mov
rcl
adc
add
pop
mov
movs
cmc
pushf
pop
sbb
shl
aam
xlat
sbb
fs
mov
xor
(bad)
mov
sbb
fdiv
push
movs
dec
(bad)
sbb
inc
pushf
js
je
sbb
mov
xor
fadd
push
movs
mov
fmul
inc
movs
xor
fcomp
movs
pushf
pushf
jo
(bad)
adc
mov
mov
movs
(bad)
mov
test
mov
lods
pop
sbb
sbb
mov
cld
sbb
fdiv
mov
out
test
loopne
(bad)
shl
(bad)
lods
sub
movs
int3
pushf
mov
mov
mov
mov
movs
sub
loop
retf
pusha
cwde
dec
mov
daa
xchg
pop
mov
cwde
movs
sbb
or
mov
mov
movs
out
lods
pop
fld
mov
int3
mov
mov
movs
mov
les
(bad)
enter
int3
and
sbb
clc
aam
jno
jo
lods
fsubr
dec
and
call
lods
and
(bad)
mov
and
clc
idiv
scas
dec
imul
lods
add
aad
or
clc
or
mov
sbb
adc
mov
ficomp
xchg
(bad)
and
ins
mov
mov
movs
push
pop
xor
(bad)
xor
cmp
mov
movs
pop
pop
inc
pop
adc
inc
lds
clc
mov
movs
jmp
push
pop
faddp
push
(bad)
pop
(bad)
pop
(bad)
pusha
and
mov
movs
stos
pop
push
lds
sbb
jl
jbe
sbb
test
pop
lods
mov
xlat
inc
mov
movs
xor
(bad)
movs
lds
mov
adc
adc
lods
out
neg
movs
mov
in
mov
popf
rcr
add
rcl
mov
out
cmps
cdq
nop
fcomp
sub
or
xor
idiv
cmc
or
clc
jae
or
pop
test
movs
loop
push
stos
xor
aad
repz
call
inc
xchg
idiv
add
jno
xchg
adc
(bad)
ret
and
or
sub
and
cli
clc
cmp
or
jbe
cwde
cli
or
leave
(bad)
or
cmp
adc
jbe
(bad)
mov
pop
add
cmc
clc
inc
fdiv
and
ret
das
fdiv
scas
dec
out
sahf
sbb
fld
gs
pop
jmp
fcmovu
or
jecxz
clc
adc
(bad)
cmps
test
mov
fadd
cmc
or
add
ret
fwait
outs
div
popf
jo
out
retf
mov
cld
push
jns
les
jp
imul
fisttp
sub
pushf
out
ss
repz
pushf
fnsave
(bad)
sbb
(bad)
or
or
hlt
sub
test
popf
jns
nop
(bad)
fbstp
push
in
std
int3
lock
mov
(bad)
pop
cmps
or
fidiv
mov
pop
in
(bad)
shl
pop
mov
xchg
lods
test
and
mov
out
jmp
loopne
or
lahf
lods
and
lea
repz
mov
mov
daa
clc
les
xchg
cmp
mov
movs
fbstp
(bad)
cmp
xchg
jae
xchg
pop
pop
mov
inc
cmovl
cs
scas
retf
push
sub
div
mov
mov
(bad)
push
cmc
jne
test
adc
mov
xchg
in
leave
(bad)
int
out
jecxz
out
sbb
cmc
add
xchg
sbb
fldenv
mov
rcl
mov
(bad)
or
mov
mov
add
add
fs
test
aad
dec
not
stc
add
mov
jnp
inc
and
or
mov
sti
xor
mov
sti
mov
aas
mov
mov
sbb
mov
lahf
mov
in
pop
mov
int
add
stos
xchg
cmps
pop
mov
js
add
aad
nop
cmp
fs
(bad)
mov
jmp
mov
or
jno
dec
movs
test
out
loop
das
push
mov
sti
js
out
cmp
call
mov
and
aad
xchg
in
ins
sbb
xlat
pop
mov
int3
xor
lods
push
lahf
xlat
aad
hlt
inc
scas
pop
js
mov
(bad)
jnp
int3
mov
jl
shr
cld
pop
(bad)
and
pop
addr16
or
das
inc
xchg
xlat
fucom
(bad)
out
cmp
sar
lea
shl
loop
adc
cmp
aam
loop
adc
mov
neg
in
out
fsub
jbe
xor
add
out
jo
scas
mov
mov
fisubr
mov
mov
lahf
pusha
popf
mov
pop
sub
lahf
mov
pop
mov
or
and
pop
mov
(bad)
mov
mov
mov
jmp
scas
call
lock
jl
rol
popa
not
inc
sub
movs
call
xchg
test
dec
movs
fsubr
rcr
lods
and
call
xor
sub
push
fdivr
lock
imul
test
or
mov
cpuid
push
pop
aam
stos
dec
push
dec
adc
fisubr
loop
es
aam
adc
(bad)
jno
sbb
cs
xchg
pushf
push
push
das
mov
sbb
das
(bad)
scas
xor
lds
push
xor
cmp
add
mov
jg
or
scas
rcr
or
jo
clc
jmp
imul
mov
adc
pop
xor
cld
movs
test
hlt
push
sbb
das
push
xor
xor
and
mov
mov
(bad)
(bad)
movs
mov
(bad)
jne
movs
xor
popf
xchg
fs
fnstsw
push
ins
mov
ret
cmp
push
jecxz
loope
cmp
push
cmp
pop
aas
and
cwde
fild
adc
inc
into
js
cdq
sub
mov
cli
cmps
pop
pmaxub
inc
mov
and
adc
jo
pop
mov
stos
aam
push
sbb
imul
mov
sub
mov
addr16
popf
inc
sub
ins
inc
adc
jl
stos
int3
push
sbb
test
push
pop
or
xchg
mov
sub
enter
mov
and
shl
stos
mov
mov
rcr
aam
mov
or
sbb
jns
fisubr
out
xor
add
mov
or
clc
enter
(bad)
sbb
fdiv
test
loopne
adc
shl
cld
add
xor
pop
xor
shl
mov
movs
loopne
cmps
sub
push
shl
aad
ret
add
xor
sbb
(bad)
xlat
inc
in
sub
adc
mov
out
test
and
xor
cwde
test
adc
pop
lods
cwde
mov
aaa
pop
push
xchg
and
mov
(bad)
sub
adc
jl
repnz
inc
test
mov
(bad)
mov
sbb
movs
loop
push
imul
jae
or
in
jmp
fcomp
dec
jmp
sbb
ins
xchg
iret
xchg
movs
outs
imul
pop
jecxz
adc
jbe
sub
pusha
sub
(bad)
iret
dec
mov
retf
movs
arpl
inc
cmps
(bad)
dec
in
sub
pop
sub
dec
(bad)
(bad)
mov
adc
dec
int3
cmps
jmp
xchg
push
cmps
aaa
(bad)
iret
enter
ins
dec
test
xchg
fxch
call
in
aas
add
daa
(bad)
pusha
ins
cmp
aaa
xchg
jb
sti
mov
imul
movs
leave
aam
pop
xchg
cwde
les
stos
scas
adc
xchg
or
mov
sub
push
cli
in
xlat
je
test
jmp
popf
test
lock
xor
mov
mov
mov
int3
jo
aas
mov
jmp
push
in
mov
fcom
and
mov
push
sbb
pop
stc
jg
and
imul
dec
dec
pop
mov
mov
push
loope
mov
test
pushf
sbb
fild
jae
cmps
pusha
sub
jge
jg
pushf
pushf
add
(bad)
jg
cld
inc
adc
jmp
out
and
nop
jl
xor
lock
inc
dec
mov
push
adc
movs
push
jae
or
aas
ret
adc
in
push
cmps
mov
enter
cmp
jno
call
lds
jns
mov
pop
dec
cld
int3
inc
leave
ins
bound
dec
or
or
inc
(bad)
daa
mov
jge
out
dec
cmp
mov
shl
push
sub
adc
enter
mov
sub
(bad)
or
lds
mov
sub
xchg
sub
ret
int
pop
test
enter
pushf
enter
aad
cmps
leave
add
in
in
and
pcmpeqd
call
(bad)
mov
mov
or
stc
jmp
and
cmp
and
cmp
inc
pop
shl
inc
and
and
movs
mov
loopne
add
ins
sbb
fwait
cmps
fs
out
mov
and
lock
mov
mov
fistp
pop
push
bound
pop
sub
jns
push
call
sbb
fwait
pop
jne
stos
ret
inc
ins
mov
push
gs
sub
mov
stos
jl
and
loope
mov
sbb
xchg
xchg
jo
push
sub
stos
fwait
lods
or
fwait
(bad)
jl
mov
sub
scas
ficom
push
in
fdiv
mov
sbb
pushf
mov
imul
add
fnstenv
lods
lahf
mov
xlat
jl
sub
sub
cmp
int3
(bad)
cwde
mov
shl
enter
sbb
adc
dec
and
or
jmp
jg
and
lock
call
sub
ret
jmp
out
arpl
cdq
dec
push
xor
mov
push
and
movs
bound
adc
sub
mov
iret
in
jge
adc
mov
xlat
xchg
inc
xchg
jmp
mov
mov
loop
dec
fisub
mov
(bad)
inc
push
mov
pop
or
call
sbb
mov
dec
mov
push
movs
gs
popf
mov
or
add
push
mov
data16
mov
(bad)
pushf
mov
and
cmp
dec
sbb
jo
(bad)
test
movs
fsub
fcomp
mov
mov
dec
movs
movs
sub
mov
mov
out
out
mov
pop
adc
push
sti
inc
(bad)
mov
adc
je
mov
cdq
jg
mov
xchg
push
in
sbb
xchg
(bad)
stos
cdq
xchg
cmps
pop
leave
leave
aas
sbb
pop
out
push
mov
inc
mov
fsubr
and
iret
fistp
aas
or
jmp
xor
sar
mov
fidivr
xor
add
push
xchg
adc
movs
addr16
push
mov
cmp
into
xchg
or
xor
xor
lds
retf
sbb
add
aam
ins
arpl
fadd
sub
jae
push
cmp
mov
in
mov
popf
lds
(bad)
xor
in
mov
test
fistp
out
ficomp
movs
xchg
or
lods
mov
cmps
sub
test
ftst
push
xor
and
aas
movs
js
cmps
cwde
dec
rcl
fsub
fsub
fs
xchg
adc
aad
arpl
pop
pop
aam
fadd
mov
or
mov
push
sbb
pop
push
es
xchg
cmps
test
loop
pop
lods
jns
in
cmps
jo
shl
mov
into
out
cmc
dec
mov
aaa
test
test
xchg
jl
and
pop
pop
push
into
shl
jmp
sahf
pop
lds
push
cmps
call
inc
and
mov
pushf
xchg
retf
or
push
xchg
pop
mov
cmp
cli
inc
pushf
int
clc
stc
popf
and
(bad)
test
sti
retf
cmc
outs
(bad)
ins
movs
mov
ins
sbb
fcomp
(bad)
push
and
push
iret
lods
push
in
sbb
and
mov
fsub
pushf
rcr
clc
int3
mov
mov
pushf
mov
sbb
inc
fsub
js
push
mov
movs
bound
push
xlat
dec
mov
pushf
call
and
sbb
clc
pop
mov
movs
pop
mov
mov
popf
je
(bad)
(bad)
push
movs
hlt
add
push
movs
enter
movs
dec
sbb
movs
push
sbb
or
int
push
div
movs
jmp
and
aam
dec
sub
in
out
dec
in
pop
ret
stc
daa
push
enter
ror
fsub
jnp
out
mov
push
jge
fwait
and
sbb
pop
outs
mov
or
push
mov
sbb
dec
pop
pop
inc
mov
mov
push
mov
ins
push
mov
xchg
add
dec
movs
mov
movs
or
mov
push
xchg
in
adc
adc
xchg
adc
popf
ins
mov
repnz
push
jae
push
cmps
mov
inc
mov
inc
pushf
mov
aam
test
push
pop
sbb
sti
cmp
jbe
enter
movs
dec
xchg
lods
sbb
dec
jecxz
cli
inc
aad
mov
xor
pop
pop
sub
pusha
(bad)
aaa
dec
xchg
std
add
stc
jno
je
push
fwait
mov
enter
rcr
sbb
cmp
cwde
aam
js
popf
mov
dec
push
das
push
stc
sbb
sub
enter
movs
mov
dec
sub
push
mov
jmp
fisttp
dec
mov
dec
pushf
lods
dec
xchg
aam
xchg
movs
popa
call
pop
dec
pop
movs
aam
mov
js
xchg
push
movs
std
and
movs
mov
push
pop
in
jl
xlat
in
sub
fwait
rep
aad
or
popa
mov
adc
cld
lea
adc
jae
fist
ret
scas
test
push
push
out
popf
push
loop
mov
inc
mov
adc
push
(bad)
aam
mov
enter
or
mov
in
ret
or
mov
enterw
mov
or
mov
sahf
push
adc
xor
aad
and
(bad)
nop
sbb
dec
xor
in
mov
mov
and
add
in
push
ins
mov
xchg
mov
fs
iret
sbb
fnstenv
or
dec
add
cmp
mov
jo
clc
mov
xor
ret
in
mov
dec
pushf
mov
ss
sti
cld
fadd
inc
adc
dec
cld
xor
stos
mov
es
mov
pop
cmp
sub
call
dec
xacquire
xlat
pop
out
hlt
lock
hlt
mov
or
sbb
mov
xchg
cmp
movs
popf
dec
(bad)
inc
push
mov
scas
xor
sub
es
mov
and
into
(bad)
mov
sbb
(bad)
in
xchg
setno
and
xchg
adc
adc
in
mov
mov
sbb
xchg
scas
and
mov
or
adc
adc
add
cmp
popf
add
lock
cmc
cwde
cmps
jl
push
adc
xchg
rol
popf
sub
in
dec
fcomi
mov
pop
mov
jle
sub
mov
push
or
or
cmp
cwde
xor
aad
shl
dec
pop
es
xlat
movs
ficom
pusha
fisttp
dec
pop
out
out
movs
and
scas
mov
jl
fsubr
dec
pop
push
div
adc
imul
and
fiadd
movs
fmul
sbb
cli
inc
shl
or
cmp
out
test
je
cld
xor
(bad)
rcl
stos
(bad)
fimul
rcr
cld
out
adc
cld
data16
sbb
or
sub
add
invd
icebp
mov
inc
and
inc
xor
adc
shl
cmp
and
pop
mov
or
test
dec
adc
or
pop
add
jo
dec
loop
mov
jmp
xchg
xchg
rcl
adc
add
(bad)
jmp
pushf
mov
scas
cmps
shr
ret
mov
xchg
cli
pop
dec
es
mov
sub
xchg
daa
dec
in
fisttp
scas
sub
sub
pop
xchg
and
jmp
lea
fiadd
pop
xchg
pop
data16
int3
out
dec
pusha
mov
inc
adc
mov
fdiv
sub
mov
xchg
loop
and
jnp
mov
xor
sbb
cmc
add
push
mov
jg
mov
into
inc
pop
mov
xchg
in
lahf
fadd
out
pop
ja
or
push
mov
jl
test
sub
xlat
lds
add
call
icebp
mov
push
push
sar
std
imul
ss
fucomip
jbe
jb
iret
ins
scas
sbb
push
bound
cdq
dec
xchg
cmp
enter
or
cmp
xchg
pushf
rcl
xlat
adc
sbb
push
sub
fistp
jle
dec
shl
push
cmps
jl
pop
fisttp
inc
jmp
enter
pop
jmp
mov
ret
loop
fadd
push
(bad)
addr16
xchg
int3
dec
dec
sbb
(bad)
xchg
xchg
mov
inc
sti
scas
sbb
std
sub
lahf
jl
mov
mov
xchg
movs
retf
loope
enter
push
lock
jp
inc
scas
mov
in
icebp
xor
jmp
loopne
pop
pushf
ins
movs
or
mov
movs
in
psubsb
mov
adc
lods
xlat
js
test
jno
int3
cmp
mov
fstp
jne
jmp
movs
cdq
and
xchg
in
xchg
pop
retf
jno
imul
out
lahf
call
shl
mov
les
cmp
sbb
les
pushf
lods
fnstsw
mov
add
push
outs
cmp
fwait
aas
mov
jmp
mov
xchg
mov
(bad)
mov
and
and
movs
je
lds
jg
adc
pop
enter
mov
push
aad
mov
xchg
popf
xchg
ins
mov
mov
or
mov
fcomp
cld
jge
loope
aad
sbb
ins
jbe
xchg
popf
pop
in
mov
add
or
dec
cwde
jbe
push
push
(bad)
cs
sbb
call
and
loop
loopne
mov
movs
or
fs
test
mov
sbb
sbb
outs
adc
adc
bound
sahf
fst
sbb
popf
or
popf
push
mov
mov
btc
cmp
sbb
or
jge
dec
mov
ins
dec
test
repz
and
ss
xor
xor
jno
movs
repz
mov
xor
movs
es
add
pop
cs
pop
fwait
cs
adc
mov
jb
movs
or
test
jmp
fistp
xor
pop
(bad)
mov
addr16
call
ficom
sub
mov
sbb
lods
rdmsr
sub
adc
fidivr
loopne
in
add
xchg
push
add
ss
xchg
xor
rcr
mov
or
mov
sahf
clc
push
xchg
imul
mov
hlt
mov
inc
in
sbb
dec
(bad)
mov
and
dec
xchg
xchg
jo
push
sub
test
xor
mov
fsub
cmc
sbb
test
les
jecxz
xchg
ret
lds
push
js
call
stc
sub
adc
and
xor
jle
jno
adc
or
hlt
pop
inc
mov
mov
movs
fistp
inc
int3
and
daa
cwde
and
sahf
cmps
pop
(bad)
lahf
sub
pusha
fcom
jnp
xchg
lds
adc
jmp
fs
loope
in
pop
lods
adc
jno
fsubr
jl
loope
sub
aam
aam
add
fwait
movs
or
jg
xchg
pop
(bad)
lods
mov
icebp
aas
adc
jl
adc
or
add
xchg
enter
sub
cdq
test
xor
mov
xchg
cmp
mov
sub
ret
xchg
mov
fsub
pushf
rcl
mov
nop
push
or
dec
mov
push
ins
call
in
shl
idiv
jns
stc
jnp
pop
repz
cmp
pushf
mov
cli
xchg
dec
push
ins
mov
test
je
call
loop
pop
dec
shl
push
outs
in
sahf
and
mov
xchg
fcom
movs
ja
ret
jb
iret
sub
pop
lock
mul
stos
jmp
ret
push
xor
sbb
repz
xorps
lods
sahf
adc
mov
dec
loopne
and
es
cdq
or
mov
fistp
fidivr
xchg
sbb
inc
mov
or
add
sub
movs
push
out
mov
pop
ficom
and
inc
pushf
aaa
pop
cwde
rcr
lock
jle
movs
mov
or
or
fstp
adc
mov
xchg
das
movs
cmp
movs
and
stos
or
push
xchg
xchg
jmp
xor
pop
mov
enter
scas
sub
and
gs
pushf
sbb
clc
cmps
push
pop
mov
jmp
std
or
add
jb
fsub
pop
imul
repnz
pop
in
nop
mov
and
sbb
cmp
push
cmp
and
or
fucomp
xchg
imul
xchg
sbb
(bad)
test
stos
cmp
mov
xor
mov
mov
(bad)
pusha
mov
loopne
push
fidivr
sbb
movs
xchg
imul
and
xchg
movs
in
jecxz
cmp
mov
(bad)
out
xchg
add
jecxz
sbb
sar
cmp
mov
mov
movs
das
inc
test
enter
jbe
mov
cld
xchg
ficomp
test
mov
mov
imul
shr
test
add
jbe
lods
les
leave
rol
pop
lds
push
sbb
sub
fild
sub
xchg
js
inc
or
repz
jge
dec
dec
dec
xor
in
pop
sbb
and
sbb
pop
int3
ds
inc
in
or
shl
jbe
stc
in
mov
mov
scas
rcr
mov
mov
mov
inc
movs
out
cmps
arpl
dec
test
fstp
inc
dec
mov
imul
(bad)
fsubr
(bad)
push
fbstp
loop
mov
(bad)
cmps
sub
ja
mov
outs
sbb
jb
mov
(bad)
shl
push
rol
inc
aaa
or
icebp
fadd
shr
mov
pop
dec
(bad)
(bad)
aam
popf
push
and
cmp
add
add
(bad)
sub
dec
sbb
xchg
xor
sub
pop
(bad)
lods
test
movs
add
sar
jnp
jl
loope
(bad)
adc
ja
xchg
pop
out
clc
jb
lahf
cmp
sbb
xor
lds
sar
xchg
ins
(bad)
popf
clc
lods
outs
out
sbb
mov
pop
sub
cmp
xor
jne
sahf
fiadd
std
xchg
dec
ja
pop
xor
or
cmp
jmp
or
jle
out
mov
es
push
xor
jns
or
sbb
lods
xor
aad
or
add
lock
(bad)
pop
data16
int3
ss
mov
(bad)
mov
pop
pop
fcomp
sbb
std
add
into
ror
pop
mov
jl
(bad)
or
push
test
jno
scas
jmp
test
inc
xor
cdq
or
pop
adc
push
jnp
xor
lock
pushf
das
pop
out
imul
fisttp
push
stos
stc
add
sar
test
fadd
ret
mov
jecxz
test
stos
repnz
pop
or
and
mov
mov
(bad)
mov
cld
fcmovu
dec
sub
mov
cs
into
pop
imul
push
repz
dec
xchg
push
inc
rol
cmp
xchg
cmp
scas
fstp
frstor
sbb
(bad)
call
jae
lods
jne
pusha
(bad)
iret
dec
ror
jns
mov
test
sbb
daa
fist
mov
mov
outs
out
test
or
mov
inc
inc
pushf
xlat
or
push
add
or
xchg
popa
mov
ror
sbb
sub
test
loop
cdq
loope
enter
(bad)
xchg
dec
paddq
and
jl
lock
xchg
in
out
cmp
push
enter
div
pushf
fisub
hlt
pop
sbb
int
or
fadd
je
mov
adc
cmps
add
mov
cli
iret
les
cwde
dec
loope
jg
in
cmc
push
fidiv
pushf
ins
fdivr
aaa
push
mov
in
sub
out
lds
imul
mov
xchg
aas
adc
mov
stc
xchg
out
ficom
or
xchg
adc
imul
test
xchg
shl
mov
(bad)
in
sub
enter
shr
sbb
les
out
dec
jbe
loope
in
loop
sbb
xchg
ds
dec
adc
push
jmp
sar
(bad)
call
sbb
popf
push
xchg
lods
jno
test
out
fdiv
ja
fisttp
push
xchg
jno
xlat
mov
add
ja
pop
push
mov
pop
fisubr
sub
loop
scas
sti
and
daa
ret
and
xchg
movs
stc
and
sbb
fcom
in
retf
into
outs
or
xor
push
sub
mov
add
jecxz
push
imul
push
dec
iret
pusha
addr16
xor
fcom
mov
mov
pushf
mov
mov
sbb
ins
cmp
adc
mov
fwait
cmps
xchg
cmps
inc
ds
mov
fwait
jb
movs
xchg
loope
dec
xor
movs
pop
add
(bad)
xchg
stos
cli
adc
cmps
mov
lds
in
push
sub
mov
xor
shr
push
sbb
gs
and
jbe
lods
hlt
and
mov
inc
punpcklbw
ins
jne
push
pop
cmp
cbw
adc
mov
popf
pusha
and
ret
cmps
in
and
sub
fwait
cmp
xor
mov
xchg
jbe
cmp
push
xlat
js
xchg
mov
pop
cmp
mov
jecxz
jbe
mov
mov
aaa
enter
fdivr
dec
mov
jmp
ins
pop
push
es
pop
int
ins
dec
adc
pop
push
jle
sbb
mov
mov
push
pop
or
repz
stos
ret
mov
popa
pusha
mov
sub
add
sbb
sub
mov
xor
jbe
inc
xchg
or
xor
jne
jle
stos
leave
mov
in
fcmovne
sub
sbb
lods
xor
and
dec
adc
mov
mov
push
mov
and
xchg
iret
xchg
(bad)
mov
in
mov
clc
fcomp
nop
mov
cld
or
adc
pop
mov
loop
lahf
popf
fdivr
add
stos
in
fcom
mov
lods
in
pop
push
dec
push
sbb
lods
jg
xor
(bad)
pop
(bad)
mov
(bad)
jp
xchg
cwde
mov
rol
js
adc
push
int
popa
or
(bad)
sbb
test
push
fs
shl
stc
int
jno
cld
push
push
jl
repnz
dec
mov
mov
test
jg
add
nop
xor
pusha
es
pop
sbb
int
into
aaa
cmp
hlt
rcr
aam
adc
shr
in
add
sar
push
cmps
or
ja
fidivr
rcl
xchg
popf
mov
retf
sbb
cmp
fadd
fnsave
sbb
jmp
in
or
xor
retf
push
idiv
fbstp
pop
push
mov
push
dec
push
jecxz
(bad)
and
je
cmp
cmp
sbb
mov
push
inc
fcmovnu
jmp
sbb
in
xor
and
jecxz
lods
or
push
data16
cwde
push
adc
add
mov
mov
fistp
pushf
xchg
mov
mov
xchg
dec
push
or
sbb
mov
jg
jmp
xor
jmp
leave
mov
mov
push
js
inc
(bad)
sub
xchg
(bad)
cmc
hlt
push
pop
mov
xchg
xchg
push
in
xchg
das
push
sbb
ins
icebp
jge
fimul
jb
jbe
repz
push
or
nop
inc
scas
sbb
sbb
push
nop
enter
fisttp
std
lods
stc
push
sub
ds
pop
repnz
jl
cmp
and
pop
push
sbb
sbb
xchg
movs
clc
bound
jle
push
sbb
imul
std
xchg
sbb
bound
ins
gs
aas
fstp
cmps
test
pushf
(bad)
and
sbb
xchg
adc
push
or
mov
aaa
or
repnz
or
mov
rcr
or
mul
push
xchg
repnz
jg
adc
adc
mov
jg
daa
push
sub
ret
pop
sar
fcom
mov
cmp
(bad)
enter
lds
dec
icebp
mov
cmp
rcl
aam
(bad)
mov
add
pop
pop
fs
sar
icebp
(bad)
ror
shl
pop
sbb
fmul
enter
push
(bad)
mov
in
mov
aas
fnstsw
adc
ret
adc
pop
cmp
mov
in
xchg
test
or
dec
push
pushf
std
ins
in
xchg
inc
in
pop
daa
inc
push
xor
mov
sar
jge
repnz
push
ins
sbb
push
fdivr
clc
mov
ss
stos
xor
sbb
popf
push
mov
jl
hlt
dec
outs
stos
imul
movmskps
inc
jno
(bad)
sbb
push
jb
in
js
fcom
xchg
mov
xchg
sti
or
fsubr
push
adc
enter
cld
icebp
xchg
(bad)
jne
and
cmp
mov
sbb
add
lods
pop
std
or
jbe
pop
hlt
outs
int3
or
cmp
retf
enter
pop
adc
aas
bound
jns
rcl
inc
push
test
xor
out
outs
in
call
mov
es
(bad)
pusha
sbb
and
adc
mov
int3
xchg
push
and
fstp
mov
mov
mov
mov
outs
int3
sbb
pushf
push
outs
(bad)
mov
call
fisub
sbb
test
mov
pushf
shl
shl
movs
icebp
xchg
enter
sbb
fisubr
xor
(bad)
sub
movs
popa
xchg
enter
cmps
js
(bad)
js
lds
loopne
adc
je
jo
retf
add
int
(bad)
sahf
dec
sahf
(bad)
icebp
test
pushf
mov
add
add
inc
sahf
and
xchg
fcom
add
jmp
std
sti
idiv
clc
and
mov
pop
jmp
lahf
xchg
(bad)
add
cld
xor
in
in
movs
cmp
inc
mov
and
cmp
stc
shr
sbb
cmps
lods
xlat
call
pop
jecxz
idiv
mul
and
pop
call
or
aad
add
sub
pop
sub
jo
adc
and
es
mov
mov
in
rcr
in
ret
xlat
xor
mov
jg
mov
stos
int3
push
add
mov
lock
sahf
mov
sub
mov
xchg
pusha
jae
fdivr
nop
and
mov
push
jmp
rol
test
mov
(bad)
pushf
pushf
into
or
cmp
js
push
and
pushf
sbb
inc
cmps
mov
test
fisttp
dec
mov
pop
push
and
or
loop
in
mov
pushf
loop
fimul
mov
mov
jo
mov
repnz
fistp
cmp
jno
ret
gs
fsub
stc
arpl
cmps
sahf
int3
(bad)
ror
and
movs
mov
xchg
imul
fwait
neg
fdivr
sbb
pushf
(bad)
xlat
dec
dec
loop
mov
and
mov
lods
fxtract
cmc
ret
push
int3
test
dec
in
in
mov
and
aam
nop
repnz
push
push
pop
sbb
xchg
bsf
aad
in
jl
mov
sbb
sub
dec
enter
test
lock
dec
add
ret
rcr
pop
mov
mov
push
sbb
and
pop
popf
adc
cwde
xor
pushf
nop
sub
cmc
call
test
daa
movs
pusha
pusha
push
fwait
mov
sbb
sar
adc
and
and
push
test
imul
jae
xor
push
ret
nop
inc
sub
fistp
in
push
aaa
cld
out
in
push
and
inc
xor
and
ja
xor
nop
movs
ins
je
and
inc
outs
jecxz
push
mov
mov
test
adc
popf
js
popf
mov
dec
ss
(bad)
cmp
arpl
rcr
sbb
ds
popf
pop
xchg
test
or
inc
jbe
jbe
fstp
jg
fs
jbe
jns
and
aad
movs
and
rcr
xor
mov
mov
dec
mov
mov
sub
and
fld
in
mov
fisub
test
nop
and
push
or
jp
xor
out
jns
mov
xor
ret
sbb
inc
xor
dec
or
call
repnz
push
dec
jnp
cwde
xchg
pusha
pop
movs
enter
push
imul
gs
or
test
dec
shl
pop
jo
jo
or
ins
jecxz
sbb
fdivr
cs
sub
cld
pop
and
arpl
pusha
data16
fld
jge
movs
movs
jge
mov
pop
jbe
mov
and
push
clc
and
mov
cmp
cmp
test
fstp
into
cld
pop
stos
jg
retf
data16
fs
aam
push
clc
pushf
aam
or
inc
loopne
xor
hlt
clc
xor
pop
cmps
stos
mov
cmp
fsub
sbb
jl
test
pushf
jmp
lods
out
and
pop
icebp
test
jne
into
gs
ffree
sahf
push
mov
lds
test
sub
ins
jmp
xor
mov
mov
in
movs
popf
fs
xchg
nop
xor
sub
in
adc
out
xor
cmps
loop
sub
xor
inc
gs
sub
repz
dec
adc
xchg
cmp
xchg
jo
push
inc
sub
fst
and
inc
call
jmp
in
(bad)
je
mov
inc
icebp
nop
cmp
mov
push
push
mov
pop
mov
retf
or
stos
mov
fld
add
push
push
mov
fadd
cmp
lock
sbb
add
out
or
sbb
fld
(bad)
xor
xor
scas
fisttp
enter
cld
fwait
aad
fcomp
sbb
mov
cmp
mov
in
jg
rcr
int3
mov
lods
pop
ins
sbb
(bad)
adc
xor
dec
jbe
stos
lods
xlat
dec
add
out
rcr
fisttp
data16
and
adc
fild
enter
shl
sub
fwait
(bad)
outs
jge
fsub
cdq
pop
mov
jnp
sahf
mov
mov
icebp
sti
movs
sbb
cmp
outs
movs
inc
lods
test
loopne
fmul
inc
sbb
push
and
dec
scas
jl
or
enter
jmp
inc
fmul
hlt
jp
dec
cmp
jmp
pop
shl
js
sbb
test
sub
dec
sti
movs
xor
fcom
cmp
sbb
and
or
mov
fild
jns
and
jge
inc
hlt
je
sbb
cli
mov
xchg
or
xchg
sbb
dec
loop
out
in
pop
push
aad
xor
inc
(bad)
pushf
iret
test
xchg
fs
pop
cmps
jle
test
xchg
mov
mov
int3
inc
ins
mov
loop
js
(bad)
and
test
ret
aad
(bad)
jge
stos
inc
ds
fild
sub
ss
jge
fbld
push
add
ins
stos
enter
aaa
mov
int3
std
and
sbb
mov
pushf
or
add
dec
pop
cmps
adc
add
out
push
pushf
inc
js
xlat
inc
jg
jge
sar
jl
ficomp
inc
test
call
das
iret
(bad)
(bad)
test
pushf
cmp
in
cmp
add
jb
push
and
fistp
pop
mov
pushf
jnp
int3
mov
rcr
cmp
movs
mov
aad
fcmovnb
push
test
jnp
fidiv
out
mov
adc
ins
xor
(bad)
or
or
sbb
and
dec
addr16
int
(bad)
in
and
mov
cld
mov
ja
add
jbe
cmp
inc
sbb
pop
push
fdiv
in
sbb
inc
je
fadd
pop
cld
(bad)
repnz
jl
fdivr
sbb
mov
mov
mov
stos
aam
mov
xchg
jne
aam
imul
cli
pop
mov
call
add
pop
mov
mov
aad
mov
popf
movs
lahf
cdq
mov
mov
push
inc
rcr
xchg
pop
lock
pop
cmc
sti
push
(bad)
sub
popf
push
push
jg
fcmovnbe
pop
adc
push
jno
test
repz
push
and
adc
adc
fistp
cmp
push
rcr
mov
sahf
mov
(bad)
in
aam
and
xor
pop
push
outs
dec
pop
jl
shl
adc
fldenv
lds
sahf
fidivr
popf
xor
xlat
adc
sbb
xchg
loope
popf
fistp
dec
push
ret
push
loopne
push
mov
(bad)
fnstsw
shl
fmul
xchg
rcr
mov
mov
aas
pop
xchg
shl
mov
mov
imul
mov
cmc
(bad)
xor
fwait
nop
je
ss
mov
add
sub
inc
sbb
jne
getsec
adc
test
stos
or
je
sbb
lods
ret
push
mov
bnd
daa
cwde
mov
je
sti
lea
sbb
mov
mov
pop
dec
imul
jge
fmul
(bad)
dec
hlt
test
add
out
adc
dec
cmp
int
jl
fcmove
cs
retf
js
add
test
mov
pop
cmp
retf
dec
sbb
clc
mov
mov
jb
pop
push
lea
loop
or
scas
or
stos
lods
(bad)
xor
mov
or
shl
lahf
or
lea
adc
rcr
lods
add
pushf
cmp
(bad)
and
xor
push
outs
dec
push
dec
ins
cmp
mov
stc
mov
fistp
pusha
and
sbb
gs
dec
mov
movs
mov
fs
add
movs
cmp
sub
aas
or
aad
sub
(bad)
push
stos
jge
aad
stc
jnp
aam
sbb
jle
imul
pop
test
pop
in
daa
das
push
sbb
leave
movs
adc
mov
fcomp
pop
mov
pop
es
inc
sub
xchg
sub
fisubr
xchg
pop
inc
das
xchg
mov
out
daa
scas
stos
xchg
sbb
loop
or
ins
inc
lea
pop
les
fstp
adc
sub
dec
lods
add
movs
ss
lods
xor
add
xchg
sbb
ret
test
inc
fsubr
xlat
fidiv
mov
loopne
test
popf
jb
sbb
xlat
dec
mov
fucomp
add
xchg
rol
mov
pop
ds
fmul
call
fdivr
into
(bad)
push
sti
ins
js
sbb
cdq
(bad)
mov
or
call
pop
add
xchg
aad
retf
mov
aad
pop
jns
pop
rcl
cmp
fdiv
sar
jmp
mov
into
xchg
fadd
dec
call
jo
mov
inc
xor
ins
jnp
cmp
dec
fisub
push
push
pop
cld
adc
sbb
movs
ins
adc
fild
xor
dec
test
sub
test
stos
sbb
push
mov
cli
ret
jo
and
jnp
mov
push
jne
jnp
dec
jle
xchg
xchg
jns
jmp
movs
in
mov
movs
inc
push
and
test
rol
mov
cli
add
dec
mov
aad
and
in
test
movs
adc
mov
lods
movs
lods
mov
pushf
or
loop
fcmovnb
pop
push
fmul
cmp
stc
mov
jg
fadd
pop
cs
mov
fistp
test
sbb
push
or
xchg
std
pop
mov
cld
cwde
(bad)
and
mov
sbb
xor
sbb
or
push
or
mov
jb
mov
sub
stos
(bad)
cdq
cwde
and
shl
out
xor
cs
ds
xor
xor
lds
nop
mov
mov
mov
and
ret
test
loopne
into
mov
fmul
fsub
and
xchg
push
(bad)
retf
fstp
mov
loope
fdiv
push
loopne
jmp
sahf
in
les
je
jmp
and
jecxz
push
loopne
cld
repz
add
xchg
cmp
lock
mov
movs
hlt
inc
cld
jge
pop
data16
pop
stos
jecxz
dec
js
push
lahf
fidiv
call
movs
int3
add
pusha
movs
mov
je
in
xchg
adc
xchg
push
stos
or
xchg
sahf
pop
mov
pushf
fadd
mov
retf
popf
call
aaa
mov
push
mov
mov
mov
add
cmps
adc
mov
in
cmc
in
movs
push
(bad)
pop
pop
push
lea
or
shl
fmul
sbb
push
dec
cmc
jbe
pop
xor
stos
adc
sbb
mov
fdivr
iret
or
ret
pop
or
or
movs
cs
cmps
gs
push
add
mov
mov
rcr
adc
xor
movs
aaa
sbb
inc
pop
mov
or
adc
pop
pop
jl
cmp
cwde
jne
jl
(bad)
sar
lds
jbe
mov
push
hlt
mov
xor
sbb
test
mov
add
call
arpl
mov
pusha
sbb
(bad)
push
fucomp
movs
adc
cmps
das
retf
aas
arpl
and
pusha
bound
pop
and
mov
pop
stos
cmc
mov
adc
jbe
jbe
pop
pop
(bad)
pop
in
retf
sbb
out
aam
int3
or
les
xlat
cmps
mov
shr
mov
scas
mov
fadd
mov
dec
inc
(bad)
xor
xchg
call
fucomip
arpl
adc
int3
mov
cmp
mov
xchg
jns
cmps
inc
or
fistp
fsubr
int
dec
add
into
mov
movs
dec
sbb
lock
mov
sub
fstp
jecxz
repz
fstp
fdiv
add
dec
aas
jge
out
cmp
scas
test
ds
and
push
inc
cwde
popf
xchg
les
push
js
in
movq
(bad)
pop
idiv
je
sub
in
movs
addr16
mov
les
dec
movs
dec
test
arpl
das
iret
mov
dec
fwait
sbb
sbb
mov
int
xchg
test
mov
mov
dec
inc
ror
test
dec
stos
adc
popa
fisub
push
mov
mov
shr
dec
xchg
(bad)
dec
push
mov
(bad)
mov
(bad)
adc
mov
repnz
dec
mov
int3
mov
mov
add
mov
sbb
jle
mov
ror
pusha
xchg
lds
lods
ficom
test
ror
and
pop
sbb
push
mov
or
push
sti
xchg
loopne
adc
jbe
aad
xlat
ins
inc
lds
pop
jmp
mov
not
mov
arpl
popf
mov
cmp
cs
jne
cmc
pop
mov
test
pop
xlat
and
mov
mov
pop
ret
fneni(8087
pop
js
mov
add
and
mov
movs
adc
sbb
jns
das
and
(bad)
add
dec
cmp
sbb
cwde
mov
cmc
cmp
mov
aad
test
pushf
into
inc
fistp
or
cli
nop
mov
mov
fxch
push
sub
stos
sub
sub
fcmovnb
sbb
enter
stos
inc
or
stc
cmp
jmp
js
rcl
push
in
pop
nop
(bad)
or
repz
and
adc
retf
test
pushf
jnp
imul
xchg
push
adc
cmc
sub
fistp
and
in
call
or
add
dec
arpl
into
cwde
in
idiv
xor
pusha
cdq
xlat
sbb
xor
add
in
addr16
xlat
sbb
enter
pop
rcr
lods
cwde
fwait
cmp
mov
ret
jae
popf
xlat
jae
sub
xor
xlat
mov
dec
aam
pushf
cmps
push
sub
dec
and
je
sub
iret
pusha
mov
and
push
pusha
add
out
stos
pop
cdq
in
pop
xchg
pushf
xor
xor
outs
sub
jge
mov
pusha
push
popf
jmp
pop
sbb
out
movs
jl
addr16
fmul
cmps
and
mov
out
clc
sbb
jo
and
ins
cmps
push
in
aas
arpl
repz
rcr
adc
lahf
ss
in
in
add
add
cwde
repnz
test
lahf
jg
jp
mov
gs
dec
mov
mov
faddp
int
fdivr
enter
pop
aam
repz
(bad)
push
mov
mov
nop
add
dec
adc
inc
in
sahf
push
lahf
mov
clc
push
mov
push
lahf
sbb
adc
push
and
adc
xor
lahf
inc
push
cmc
repz
ins
add
(bad)
out
adc
in
or
inc
movs
xchg
cmp
adc
adc
fs
sbb
lock
lds
mov
jl
retf
out
sbb
aaa
(bad)
adc
push
lds
pop
call
sub
adc
lahf
sbb
sbb
clc
in
inc
loope
xchg
cmp
pop
call
sub
push
cmp
sti
clc
push
leave
shl
add
test
push
sbb
enter
sbb
dec
arpl
xor
sbb
in
aad
sahf
xlat
lahf
mov
aad
sahf
xlat
movs
push
ret
mov
sahf
push
and
or
movs
fdivr
fadd
inc
mov
xchg
lock
(bad)
xchg
sbb
inc
test
test
pushf
cli
stos
stos
fdivr
mov
xor
mov
lock
push
movs
xlat
inc
xor
aad
cmps
pop
pushf
mov
(bad)
cmp
mov
out
inc
lahf
xchg
xchg
pop
lock
jne
loop
or
div
add
in
pushfw
push
fwait
cmp
loop
lea
sub
push
nop
clc
retf
loope
push
mov
inc
fsubr
pop
neg
test
ss
int
mov
push
stc
adc
rcl
int
fdiv
inc
stos
xor
shr
and
in
movs
xchg
ret
cwde
pusha
cmp
std
jbe
test
xor
mov
mov
(bad)
movs
sub
jecxz
test
adc
mov
sub
fdivr
leave
movs
mov
mov
mov
pusha
pop
mov
add
add
mov
lds
(bad)
pushf
and
xchg
sub
and
popf
sahf
das
sti
pop
mov
fwait
movs
dec
(bad)
and
add
push
fldenv
leave
push
in
sub
ror
push
mov
pop
(bad)
nop
das
fxch
sahf
mov
mov
dec
pusha
scas
loope
inc
mov
or
ins
mov
movs
mov
int3
shl
pop
add
add
sub
(bad)
fmul
mov
cwde
jmp
cmp
(bad)
loopne
push
push
mov
jmp
dec
movs
out
mov
mov
movs
fstp
pop
or
test
add
cmp
cmp
sahf
xor
adc
mov
fs
mov
jmp
xor
sbb
loop
fmul
adc
mov
jle
icebp
clc
sub
add
movs
test
call
mov
repnz
stc
popf
dec
xchg
cmp
xor
out
test
sbb
sub
repz
jle
sub
mov
mov
fsub
test
rol
rcl
mov
mov
mov
pop
or
xchg
and
fstp
cwde
cmc
ins
add
jbe
mov
jae
pushf
add
not
fmul
scas
sub
movs
(bad)
mov
fisttp
mov
(bad)
xlat
sub
pop
mov
les
movs
mov
pop
movs
(bad)
ret
lds
jg
or
adc
jns
sub
or
pop
mov
dec
sub
enter
enter
(bad)
sub
and
stos
xchg
mov
stc
(bad)
pop
std
shl
stc
add
cdq
cmps
xlat
fild
rcl
mov
imul
xchg
cmc
loope
fimul
(bad)
adc
inc
xchg
jbe
cmps
loopne
call
xor
rol
jnp
pop
lods
cld
sub
movs
mov
jmp
fst
push
(bad)
jge
je
test
and
jmp
jl
mov
mov
dec
add
jl
imul
(bad)
loopne
mov
fdiv
jmp
and
call
xor
lods
push
int
pop
stos
dec
xor
mov
retf
mov
cmc
test
test
mov
pop
adc
or
adc
repnz
stc
sub
clc
add
cmc
std
add
movs
pop
stc
retf
aam
xor
test
xlat
or
xor
mov
lahf
in
xchg
jno
sbb
jb
ret
push
shr
or
push
jne
dec
(bad)
fdivr
adc
xchg
xchg
adc
xor
in
fist
aad
mov
stc
movs
jg
xor
pop
mov
fsubr
cli
adc
fs
pop
retf
out
aam
or
sbb
mov
in
es
mov
repz
pushf
in
call
mov
stos
mov
fsub
loope
fucom
fcmovnb
xchg
out
xlat
jmp
fnstcw
mov
mov
in
pop
movs
enter
dec
mov
mov
pop
sbb
push
mov
cwde
dec
xor
mov
mov
jle
mov
mov
retf
mov
mov
xchg
movs
mov
dec
in
js
mov
fidivr
std
add
push
ja
mov
pop
inc
not
and
adc
rcr
js
ss
std
icebp
xchg
sub
mov
mov
jae
mov
push
mov
jecxz
mov
(bad)
loop
inc
stc
jae
adc
dec
mov
mov
fsubr
mov
adc
push
push
loope
lods
jle
lods
in
loop
mov
mov
loop
mov
rep
test
in
aam
div
push
mov
ficom
sbb
push
xlat
loop
sbb
out
(bad)
in
dec
clc
les
adc
stos
popf
jl
push
and
jnp
sub
adc
aad
(bad)
mov
sar
jo
test
push
(bad)
std
stc
pop
sbb
mov
ja
sahf
ficomp
les
in
push
sub
cmp
das
inc
movs
std
rcr
lods
sar
mov
scas
fwait
ins
jmp
jecxz
hlt
adc
shl
and
aad
leave
fcom
jl
cmps
jmp
pop
les
push
mov
push
add
repnz
mov
mov
adc
repnz
test
test
inc
pop
jne
scas
fistp
aam
stos
sbb
(bad)
lods
leave
or
jle
pusha
retf
adc
mov
mov
outs
adc
sub
je
in
xor
xchg
mov
jge
jg
fstp
shl
mov
int3
dec
call
sbb
mov
sti
(bad)
mov
fwait
mov
cmc
or
jp
(bad)
stc
push
test
(bad)
pusha
jo
push
out
call
daa
lahf
add
pop
rcl
push
movs
sbb
fistp
cmp
xlat
and
mov
and
fs
int3
mov
mov
xor
pushw
and
retf
shl
pop
or
scas
adc
fdivrp
jne
sub
loop
arpl
push
repz
fpatan
fs
jae
pusha
enter
outs
adc
loopne
test
xchg
xchg
push
(bad)
sar
daa
fnstsw
scas
and
movs
or
out
clc
fwait
aad
aad
shl
sbb
jmp
movs
xlat
ja
pop
(bad)
(bad)
hlt
sbb
nop
out
xchg
jbe
scas
jmp
loopne
(bad)
xor
aas
jl
test
mov
sub
xchg
mov
and
mov
in
adc
adc
cmp
mov
jb
sub
nop
pushf
in
out
push
out
fidiv
xor
ss
jnp
cmp
cmp
and
call
sbb
dec
mov
cmps
gs
cwde
xor
lea
sub
popf
mov
mul
jg
inc
mov
pop
into
adc
repz
jge
lods
ja
jbe
repz
cmc
xchg
cli
sub
dec
nop
dec
sbb
mov
(bad)
lea
mov
in
movs
adc
push
in
jnp
pushf
stc
(bad)
hlt
loopne
out
xor
out
aad
push
fcomp
and
push
sbb
fcomp
movs
cmp
ficom
icebp
je
adc
xchg
punpckhbw
ret
mov
scas
and
xchg
in
mov
or
ins
out
rol
inc
repz
fld
clc
stc
ror
add
cli
dec
push
cmc
mov
ret
nop
jg
in
adc
adc
xor
movs
test
or
popf
in
jp
nop
xlat
mov
mov
sahf
or
cmps
hlt
push
cmp
jmp
jmp
adc
stos
ficom
aam
jmp
jnp
into
rcr
adc
(bad)
fnstenv
jb
loopne
imul
(bad)
jae
popf
jae
pop
add
mov
clc
mov
pop
test
xor
jmp
movs
inc
adc
loopne
jo
test
mov
mov
push
test
mov
movs
(bad)
pop
mov
inc
call
and
mov
sbb
mov
shr
mov
mov
xlat
fs
dec
jl
out
test
mov
push
cmps
lods
add
jg
nop
imul
addr16
jle
(bad)
sub
movs
fsub
movs
inc
imul
dec
aaa
pusha
mov
mov
or
sub
push
add
lods
jmp
dec
lahf
push
stos
push
cmp
cli
mov
push
sbb
cwde
or
mov
inc
adc
icebp
loop
ins
mov
lahf
jg
mov
mov
xchg
inc
push
push
jbe
mov
fmul
mov
dec
adc
dec
jne
mov
pop
pushf
push
sahf
fucomip
cld
movs
dec
pusha
add
xchg
movs
call
or
enter
mov
xor
jmp
repz
pop
ins
in
pop
fldenv
push
or
and
(bad)
icebp
scas
pop
or
push
mov
mov
rol
lods
shr
mov
sbb
and
mov
jmp
in
fisubr
push
mov
out
and
and
fwait
lods
mov
cdq
push
mov
std
loopne
jae
rcr
adc
bound
push
popf
inc
ficomp
xchg
pop
or
add
in
arpl
popf
fbstp
and
push
mul
xor
adc
mov
(bad)
fdiv
mov
movs
sbb
sub
cwde
mov
(bad)
enter
pop
out
inc
push
(bad)
xchg
and
test
pusha
js
jo
jae
xor
ins
test
sar
loop
arpl
leave
out
sbb
dec
out
scas
jge
sbb
jbe
inc
ds
iret
push
pop
js
bound
sbb
rcl
pop
aam
xchg
push
xchg
adc
jns
sti
sar
adc
and
je
ins
sbb
mov
sahf
jo
aam
pop
jecxz
imul
fsubr
aaa
xchg
fs
mov
lea
mov
add
scas
in
jle
and
loop
lods
inc
test
mov
cmp
xchg
adc
call
gs
in
mov
retf
mov
fmul
retf
fsubr
push
(bad)
adc
adc
fwait
je
sti
mov
mov
popf
add
test
jno
sbb
je
out
sbb
enter
and
xchg
js
in
cli
test
test
fdivr
cmp
enter
mov
lds
sub
repz
inc
push
cdq
out
mov
mov
stos
fisub
cmp
je
(bad)
fsubr
cmps
and
and
stos
lods
scas
shr
imul
arpl
pop
mov
cmps
add
cs
mov
iret
jb
enter
mov
mov
mov
mov
jl
dec
xor
inc
mov
ja
vsqrtss
mov
fcom
retf
aad
push
clc
enter
lea
cmp
scas
mov
dec
test
inc
lods
mov
xor
mov
mov
lods
fisttp
mov
xchg
mov
sbb
pop
add
mov
lods
cmp
dec
fwait
popf
mov
out
mov
xchg
xchg
mov
icebp
ss
dec
movs
jo
out
add
mov
push
sbb
sub
pop
fisttp
movs
test
in
pop
xor
pop
call
jecxz
mov
(bad)
(bad)
leave
fmul
scas
mov
repnz
or
int3
lods
rcl
mov
mov
push
stos
mov
movs
movs
fbstp
adc
ror
and
mov
cmps
add
mov
test
test
jge
push
jnp
loopne
ss
mov
jl
jp
mov
in
mov
clc
stos
loopne
rcr
and
xchg
push
gs
and
add
cmps
xchg
sbb
neg
mov
(bad)
xor
movs
mov
popf
(bad)
push
pop
fsubr
sub
xchg
and
ds
mov
in
(bad)
jb
bound
mov
stos
sbb
dec
mov
mov
xchg
pop
mov
xlat
push
or
nop
inc
movs
and
ins
lock
shl
movs
inc
inc
aam
test
fisttp
or
xor
push
and
push
mov
popa
popa
enter
or
iret
dec
test
or
(bad)
mov
jl
fisttp
ins
call
sbb
jge
test
sti
jns
jmp
pop
cmp
push
test
shl
sub
popf
jbe
shl
mov
jl
mov
call
stos
sahf
shl
or
cmp
daa
stos
push
adc
jge
rcr
pop
pop
mov
movs
stc
sar
add
sbb
inc
shl
int3
and
(bad)
mov
lds
mul
xchg
mov
call
cld
dec
push
fild
scas
in
call
lods
fwait
test
sar
lods
mov
in
ins
pushf
arpl
xchg
(bad)
mov
mov
mov
(bad)
(bad)
shl
inc
sbb
lods
(bad)
xchg
add
jne
xor
cli
mov
fisttp
sti
imul
jg
(bad)
push
or
xlat
in
test
pop
adc
mov
in
call
stos
aaa
loop
lock
push
call
or
repz
test
pusha
push
sub
stos
shr
std
push
ins
out
(bad)
pop
cdq
adc
pop
push
xchg
cwde
mov
jne
dec
xor
cmp
(bad)
retf
lods
iret
bound
or
dec
dec
ficom
and
pushf
pushf
lods
xor
xor
es
out
xchg
fst
push
xchg
repnz
fs
in
pushf
pop
sbb
xchg
add
mov
sbb
jl
cmps
cld
adc
movs
adc
mov
fistp
loopne
ret
pusha
add
ret
bound
out
xor
xor
jmp
frstor
shl
stos
mov
mov
jne
retf
les
mov
test
test
dec
push
xchg
sahf
dec
in
dec
call
inc
mov
sub
nop
cmp
int3
dec
and
mov
std
aad
sub
xor
mov
(bad)
dec
movs
fsubr
cdq
test
int3
js
and
jmp
shl
je
xlat
lahf
inc
inc
aam
fs
mov
out
ins
rcl
mov
in
inc
mov
fwait
test
adc
sub
mov
mov
xchg
cmps
mov
inc
mov
push
jmp
mov
mov
movs
sbb
test
into
fbld
dec
loop
or
inc
push
xlat
fild
loope
mov
loope
adc
fwait
mov
or
mov
xchg
cmp
pop
sub
pop
cmp
aas
cs
stos
call
and
fsub
loope
or
int
or
loope
std
adc
add
inc
inc
(bad)
or
jmp
addr16
xor
and
(bad)
lods
fs
loope
dec
(bad)
popf
sahf
stc
ja
hlt
pop
jp
or
inc
mov
bound
and
mov
jge
ret
mov
ror
cmps
(bad)
mov
mov
(bad)
mov
pop
mov
int3
call
lods
(bad)
rcr
push
and
ins
xchg
xor
and
cmp
std
test
sbb
loope
xchg
lea
fmulp
paddsb
aad
mov
fsub
fadd
hlt
pusha
cmp
div
lea
test
fsubr
mov
shl
mov
ret
mov
call
cmp
xlat
inc
and
es
lock
pushf
or
inc
loop
jmp
xchg
nop
mov
ins
movs
sbb
(bad)
mov
dec
cmps
push
and
or
mov
jae
aad
test
cmp
xor
aad
sbb
push
int
mov
(bad)
int3
pushf
imul
mul
push
clc
sbb
mov
push
movs
and
nop
rcl
adc
push
rol
sbb
mov
push
adc
or
jne
nop
lods
sbb
jmp
mov
out
test
fsubr
gs
and
test
push
jo
cmp
popf
adc
int3
out
sbb
sub
movs
je
int3
xlat
sbb
scas
fiadd
pop
mov
int
cwde
sbb
(bad)
data16
int
fsub
cmps
cmp
fdiv
adc
sbb
inc
dec
out
lahf
jb
int
fcomp
pop
aam
(bad)
cdq
xchg
or
es
pop
sub
jo
push
loop
shl
ss
int3
dec
call
mov
jno
mov
dec
std
clc
push
test
mov
mov
jecxz
mov
mov
shl
sbb
stos
popf
sbb
mov
sbb
jecxz
push
mov
add
outs
sub
cmps
cmp
lahf
fs
inc
cmp
into
aas
int3
test
cmp
or
nop
xor
xchg
and
mov
mov
xor
mov
adc
pop
cwde
mov
xchg
adc
lds
out
jmp
scas
into
push
sbb
push
xlat
dec
mov
lahf
jl
frstor
mov
je
mov
pop
test
push
(bad)
in
clc
or
icebp
popf
cmps
iret
push
sbb
icebp
xor
scas
push
gs
in
lods
jb
push
sbb
popf
push
mov
jl
lods
es
push
imul
mov
shl
dec
(bad)
test
fidivr
push
mov
cmp
pop
jae
adc
mov
out
lea
stc
fcmovu
inc
mov
(bad)
test
fidiv
push
mov
out
pop
pop
stos
rcl
mov
mul
test
in
inc
cmp
and
mov
out
cmc
cmp
xchg
aaa
cli
gs
add
fs
sub
xchg
cmp
jns
mov
mov
pop
pop
jne
mov
movs
ins
shl
cdq
(bad)
cmc
je
xchg
mov
pushf
add
jns
adc
mul
and
sbb
cli
mov
fbld
jle
rol
(bad)
mov
sbb
adc
sahf
mov
in
mov
dec
rcr
mov
out
test
jl
push
push
movs
jbe
mov
cwde
in
test
add
mov
mul
les
xchg
sbb
test
push
sub
mov
sub
scas
and
pushf
out
repnz
test
dec
pop
jl
mov
scas
lods
mov
movs
mov
mov
mov
shl
inc
jl
xor
ret
xlat
adc
inc
out
pop
cmp
sbb
push
stos
pop
lock
pop
sti
pushf
cs
jl
xchg
fcom
rol
stc
bound
nop
jnp
jno
pusha
pop
jmp
adc
cmp
jl
or
mov
stos
(bad)
in
cmps
pop
lahf
and
lods
or
or
or
jmp
imul
adc
sbb
pushf
dec
call
arpl
icebp
xchg
icebp
inc
xchg
pop
adc
sbb
push
fbld
or
pop
movs
push
mov
cwde
xor
mov
xor
(bad)
or
sbb
retf
add
cmps
or
(bad)
aam
inc
xchg
icebp
clc
(bad)
cld
clc
sbb
gs
fmul
ins
fmul
push
sbb
inc
jbe
lods
loop
jmp
jp
mov
mov
sahf
aam
and
cwde
ins
or
aas
cmc
pop
and
inc
int3
mov
push
adc
movs
lods
cmp
mov
mov
test
or
lds
xchg
jg
lock
rcr
jg
lods
cmps
or
out
or
sahf
shl
xchg
sub
xchg
push
or
imul
mov
pop
cdq
inc
mov
push
fcom
(bad)
push
(bad)
(bad)
data16
aam
dec
mov
jbe
in
scas
test
js
sbb
push
cmps
inc
lea
dec
or
cld
into
push
xchg
test
mov
sbb
cmp
xor
inc
movs
pop
xchg
sbb
jge
xchg
cmp
sub
jno
in
adc
les
jg
jae
mov
sbb
lods
mov
adc
not
mov
(bad)
movs
(bad)
jg
shl
xchg
loop
add
ss
aaa
neg
stc
jl
xor
int
mov
mov
inc
mov
mov
mov
cmp
pop
sbb
add
test
xor
add
pop
cdq
mov
retf
inc
ud2
or
in
test
jmp
sbb
outs
sub
sbb
push
rol
sub
lods
adc
fs
jmp
mov
mov
mov
lods
jl
test
mov
dec
lock
cmc
loop
nop
inc
and
mov
fdiv
mov
push
movs
adc
mov
mov
cld
or
jmp
adc
sub
add
push
xchg
sbb
pusha
mov
xor
stos
nop
cmp
pop
fisttp
mov
mov
ja
mov
cld
in
mov
pop
cmps
adc
push
cdq
adc
or
movs
mov
dec
mov
rcl
push
test
or
jne
pop
pop
adc
ss
dec
mov
shr
cwde
dec
fsubr
jl
movs
inc
mov
movs
mov
lods
sahf
popa
xchg
and
lods
mov
pushf
jne
lods
cmps
sbb
out
cmps
sub
fcomp
jl
scas
(bad)
hlt
loop
cmp
(bad)
stos
sbb
lds
sbb
xchg
rcl
ret
cmp
and
aaa
retf
mov
test
dec
sub
pop
mov
dec
xchg
xlat
sub
sbb
mov
xchg
mov
adc
retf
ss
daa
sbb
mov
test
mov
aad
and
mov
(bad)
push
push
pusha
sbb
and
xchg
or
push
push
pop
mov
mov
mov
test
push
sbb
mov
pop
mov
dec
mov
dec
mov
div
inc
mov
cwde
not
pop
mov
pop
inc
hlt
push
sbb
mov
leave
popf
mov
jnp
in
cmp
xor
push
sbb
ins
daa
movs
movs
sahf
jmp
xchg
xchg
jg
test
mov
mov
stc
xchg
fisub
pushf
mov
xchg
jno
test
mov
add
and
aam
pop
dec
dec
jns
(bad)
mov
std
pop
mov
test
sub
mov
dec
cmp
ret
cmp
jns
lahf
fadd
into
clc
pop
stos
test
out
aad
fmul
sbb
mov
loopne
push
loope
jecxz
ds
or
mov
xchg
adc
mov
sahf
test
pushf
call
jmp
aad
imul
cmps
pop
test
inc
fisub
sub
xlat
sub
adc
xchg
or
es
cmps
fsub
dec
popa
mov
jo
dec
enter
xor
rcl
adc
mov
popf
lods
mov
dec
sub
push
mov
or
cmps
fisub
lods
test
jg
cmp
mov
fsub
sbb
out
or
loop
xchg
xchg
mov
mov
mov
movs
rcr
and
add
inc
ins
jl
add
movs
xchg
test
dec
lock
scas
jl
stc
mov
dec
push
cmps
cmp
sub
cmp
sbb
mov
cdq
pop
or
in
pushf
pop
pop
inc
mov
fwait
and
and
jp
cwde
out
sbb
rcr
xor
fcomp
pop
cmp
mov
push
jmp
mov
fisub
sub
mov
mov
or
mov
lea
mov
dec
test
mov
cmps
push
sbb
mov
std
(bad)
cmps
jne
out
fsub
adc
(bad)
je
ror
sbb
scas
add
fdivr
jg
fdiv
or
mov
clc
test
loope
bound
pop
lea
xor
xor
jbe
ss
xor
fidiv
(bad)
movs
test
mov
xor
dec
in
pop
rol
fisubr
or
sub
in
outs
mov
jo
mov
or
sbb
xchg
jnp
cdq
add
shl
inc
iret
cmp
xor
adc
pushf
jecxz
dec
sbb
mov
imul
outs
cld
sar
lea
mov
int3
cs
adc
cmc
loop
aad
jg
(bad)
mov
(bad)
fisubr
push
cld
outs
ror
jmp
jge
jo
popf
mov
adc
stos
mov
in
cli
and
mov
jl
cmp
sub
movs
jmp
or
in
mov
ins
(bad)
mov
lds
loope
int3
mov
sbb
sub
pop
addr16
sti
fnstenv
imul
ss
or
retf
pop
mov
dec
mov
or
cmps
mov
cwde
mov
mov
jo
sub
sub
data16
xchg
sbb
addr16
rcr
jge
sahf
inc
push
jmp
mov
jle
test
sbb
fisub
addr16
mov
jbe
int
(bad)
(bad)
mov
cmps
dec
sub
pop
in
fdivr
xchg
clc
add
jl
fwait
mov
int
aam
sbb
push
push
pop
fistp
push
jmp
xchg
pop
sbb
pop
sub
cmps
es
std
stc
sbb
test
jmp
repz
rcr
vcmpss
push
in
mov
lods
popf
pop
dec
jl
pop
sar
or
xor
xchg
or
and
inc
cli
or
imul
aam
aad
aaa
push
mov
(bad)
in
xchg
jecxz
xor
xchg
xchg
movs
mov
sbb
and
mov
cmps
(bad)
fidivr
push
dec
fst
mov
lods
cmps
mov
popf
mov
shl
(bad)
xor
mov
xchg
sahf
sbb
out
sub
mov
jecxz
shl
mov
addr16
mov
mov
sbb
test
pop
pop
sbb
xor
(bad)
jne
lea
jne
or
ror
push
sbb
mov
enter
push
out
(bad)
xor
cmps
jl
jbe
jne
inc
mov
clc
xchg
xchg
rcl
test
jo
(bad)
outs
cmps
adc
int3
mov
sbb
mov
jo
aam
mov
(bad)
jp
sbb
mov
jg
or
xor
inc
mov
je
pusha
jnp
frstor
jg
adc
push
cmp
cdq
sar
sub
mov
mov
jmp
push
sbb
xchg
sub
and
jecxz
xor
retf
mov
mov
retf
fst
ror
mov
out
push
retf
jb
cld
sahf
sbb
jae
sub
loope
fisub
mov
jle
pushf
sbb
mov
jmp
sar
dec
adc
add
push
in
movs
mov
sub
jg
xor
or
add
mov
jno
dec
cmps
(bad)
ja
enter
inc
xchg
or
pop
xlat
adc
jecxz
jo
add
adc
or
ins
cmp
xchg
cld
outs
jns
jge
movs
xchg
cmp
or
sbb
xor
sbb
jecxz
(bad)
out
movs
cwde
ins
ins
jnp
ja
out
sub
sbb
mov
xchg
jmp
icebp
and
or
mov
repz
(bad)
fsubr
mov
lock
in
mov
popw
call
and
aaa
popf
jae
or
mov
jnp
call
mov
(bad)
aad
dec
mov
es
xchg
xchg
jae
rcl
fdivr
jle
aad
(bad)
cwde
and
into
pop
or
mov
jnp
xor
arpl
aad
in
stc
loope
cmps
mov
mov
push
sbb
fwait
sbb
lock
pop
mov
inc
loop
cwde
cmps
jl
xchg
mov
inc
mov
add
and
outs
mov
retf
mov
icebp
(bad)
pushf
test
xchg
mov
pop
icebp
lahf
mov
mov
fisubr
outs
nop
sub
call
adc
adc
jo
ret
ja
mov
jge
mov
pop
fadd
xor
call
sbb
test
jns
(bad)
push
ss
cs
clc
pushf
inc
xor
fld
stos
test
loopne
leave
or
pushf
push
or
test
mov
xor
jb
jmp
dec
lock
push
in
iret
add
pushf
or
lahf
ror
pushf
and
les
xchg
push
out
sbb
retf
jno
nop
cmps
or
push
mov
sub
(bad)
iret
ficom
fild
mov
pop
icebp
mov
or
inc
or
arpl
pop
clc
stos
push
test
xor
lods
repnz
cs
loop
jg
pop
jl
mov
cdq
movs
jl
jle
mov
mov
sar
aas
jmp
jl
lock
inc
xor
pusha
aad
jae
scas
mov
lods
ss
pushf
xor
nop
jmp
fs
rcr
dec
cmps
add
pop
jo
pop
lahf
jl
fs
(bad)
outs
push
cmps
cmp
aas
es
call
xchg
sbb
adc
xlat
pop
pop
fistp
iret
cld
push
sub
(bad)
mov
fadd
or
sub
cmc
pop
and
add
cmp
daa
and
adc
retf
stos
nop
dec
xchg
das
data16
lock
mov
mov
mov
mov
cmc
rcr
mov
ficomp
(bad)
loopne
inc
rcr
mov
scas
push
mov
push
out
mov
mov
and
ss
sub
jo
dec
sbb
mov
push
xlat
loopne
icebp
push
fisttp
mov
fucomp
mov
retf
in
sbb
xchg
sub
add
bound
aas
xchg
inc
xlat
jl
jmp
inc
xchg
aaa
loopne
test
fs
mov
push
jl
imul
out
pop
pop
xor
or
cmp
jmp
fmul
inc
test
std
sbb
cmps
pop
sbb
movs
mov
dec
mov
cmp
loop
ds
in
ins
mov
mov
(bad)
pushf
les
call
ret
add
ss
retf
push
mov
xchg
jo
mov
movs
or
sub
mov
popf
ins
fs
dec
mov
fisttp
lock
inc
push
enter
mov
movs
mov
mov
push
ret
jl
js
xchg
pop
pushw
lahf
rol
lahf
pop
hlt
(bad)
push
sbb
and
cwde
mov
ss
lods
stos
out
inc
retf
and
fadd
sbb
cld
or
cmp
sbb
stos
pop
sets
mov
nop
stos
xchg
enter
jle
jo
push
gs
rcr
sub
pop
cld
out
sar
and
rcl
sbb
test
xchg
in
cmc
fld
jmp
add
movs
pop
sahf
jbe
lds
mov
mov
fidivr
fist
push
int
jl
pop
je
mov
cmps
aam
mov
(bad)
nop
mov
aas
hlt
xchg
test
jnp
(bad)
scas
push
test
jmp
cmp
lahf
nop
or
scas
movs
pusha
movs
jl
mov
pop
mov
repz
popf
movs
mov
adc
cdq
adc
mov
and
inc
ret
dec
sub
ftst
push
dec
call
mov
(bad)
icebp
call
call
mov
pushf
in
push
call
(bad)
cmp
cwde
mov
(bad)
fistp
js
nop
imul
adc
sbb
adc
push
out
into
and
dec
jne
jl
jns
mov
pop
adc
popa
outs
pop
int
das
icebp
adc
push
ror
cmc
mov
mov
pop
addr16
mov
add
cmps
jo
enter
je
jmp
push
(bad)
repnz
xor
sbb
pop
adc
cmps
test
push
lds
nop
les
in
rcl
push
call
repnz
out
jl
dec
test
(bad)
lds
js
lock
(bad)
pop
ret
jge
fdivr
add
or
cs
xlat
pop
pop
sub
mov
fmul
pop
xchg
pop
sbb
xchg
outs
mov
repz
jl
jne
ret
mov
outs
mov
test
add
les
in
adc
sbb
jbe
test
into
sub
fisttp
push
mov
cmps
jne
inc
aas
pop
cmp
sub
out
in
dec
or
xor
push
loopne
mov
cmps
sub
and
(bad)
cmps
shr
fcomp
popf
in
int
and
mov
mov
neg
jmp
push
int3
sbb
add
sub
mov
pushf
inc
push
sbb
sbb
in
xor
adc
mov
xor
push
cmp
(bad)
cld
out
pop
inc
push
pop
jmp
lea
jb
repz
xor
out
cmc
stc
adc
or
sbb
mov
jae
cwde
adc
dec
or
(bad)
mov
cmc
cmp
nop
fisttp
test
nop
adc
ins
inc
jmp
cdq
dec
jmp
cmp
push
cmp
setge
sbb
cmps
xor
mov
cmp
pop
push
(bad)
dec
jmp
mov
call
push
nop
ds
sub
sbb
mov
sbb
mov
cwde
les
mov
pusha
or
xor
adc
pusha
sbb
jg
sbb
xor
sub
call
jge
add
cld
mov
xor
cmp
in
push
push
sti
and
movs
jecxz
xchg
js
xchg
sbb
movs
jg
inc
push
and
lahf
nop
jg
fwait
int3
fidivr
cli
outs
or
jmp
add
or
fsubr
(bad)
imul
fnstsw
int3
push
or
stos
sub
ret
pop
jmp
pop
jmp
ins
jmp
and
outs
push
xor
test
mov
mov
test
dec
out
std
push
xor
push
push
sbb
mov
(bad)
imul
rcr
int3
pop
sbb
test
dec
mov
retf
mov
neg
xlat
xchg
mov
nop
push
pop
pop
cmps
xor
mov
inc
outs
sti
movs
stc
cmps
jl
xor
sbb
mov
hlt
pop
pop
xchg
sbb
push
cmps
dec
sbb
ins
mov
and
sbb
fdiv
push
sub
(bad)
pop
mov
movs
dec
pop
add
js
mov
movs
je
loope
(bad)
test
and
iret
mov
int3
mov
movs
mov
push
stos
movs
nop
pushf
mov
(bad)
cdq
add
and
and
movs
aam
jne
pushf
mov
mov
sbb
movs
jmp
(bad)
or
add
mov
pushf
ficom
pop
call
ret
(bad)
out
xchg
xor
xchg
cmp
mov
fmul
mov
aaa
push
(bad)
sahf
movs
arpl
jecxz
nop
mov
mov
lods
fsub
in
sub
clc
push
sbb
inc
inc
jns
cmp
mov
mov
clc
jmp
xchg
scas
dec
cld
push
cmp
scas
shl
div
or
xchg
mov
movs
sbb
pop
in
or
lahf
xchg
push
test
xchg
es
sbb
int
test
mov
mov
pusha
inc
in
pop
nop
cli
mov
data16
repz
inc
and
and
jne
and
inc
int3
in
test
sbb
xchg
js
cld
xor
and
(bad)
mov
shl
xlat
jo
sahf
js
cld
mov
fld
mov
mov
movs
sbb
mov
jmp
add
jge
clc
mov
push
pop
mov
mov
fsubr
(bad)
out
fcmovb
mov
mov
jmp
ja
test
out
pop
js
movs
nop
and
stos
mov
cmps
mov
xchg
sub
jge
inc
mov
sbb
fs
ret
int3
in
lods
pop
lahf
inc
ins
vmread
sub
xor
push
push
out
xchg
fistp
mov
shl
std
call
mov
popa
mov
xchg
shl
and
aad
mov
sbb
adc
cli
pop
push
test
jge
loopne
and
aaa
repnz
test
enter
pop
mov
cmp
xchg
pop
push
mov
mov
inc
test
sub
inc
mov
mov
jp
mov
or
mov
pop
or
je
dec
add
into
je
fidivr
fsubr
btr
push
rcr
mul
jne
loop
jl
cli
mov
int
mov
jmp
inc
mov
int3
cdq
test
push
les
mov
mov
in
loopne
push
push
scas
push
retf
fstp
push
xor
pop
ja
adc
cdq
movs
rcl
jl
pop
lods
cmc
mov
into
jecxz
sbb
adc
rcr
or
sbb
popf
or
mov
addr16
mov
pop
pop
nop
test
adc
mov
push
mov
adc
retf
pop
fcmove
mov
stos
je
iret
or
mov
pop
push
xchg
jmp
mov
loop
jb
(bad)
mov
xor
repz
out
popf
ins
mov
movs
push
xchg
into
sahf
cdq
adc
push
inc
mov
mov
sbb
pop
jbe
in
or
xchg
out
pop
(bad)
in
mov
std
pop
lods
push
fistp
pop
jl
dec
pusha
scas
mov
mov
dec
and
push
nop
sbb
sbb
lds
xchg
xor
inc
cmps
fbstp
push
aam
in
dec
pop
adc
ss
ins
clc
inc
pushf
scas
or
adc
int3
aad
sar
adc
pop
data16
mul
test
xchg
push
cmp
call
test
in
pop
int3
out
(bad)
xchg
and
aam
ins
or
pop
mov
shl
rcl
in
add
dec
mov
repz
cmp
jno
sbb
add
jle
mul
fstp
push
sahf
push
mov
mov
sahf
dec
movs
mov
mov
(bad)
stos
icebp
dec
lods
je
fidivr
sar
mov
xchg
call
mov
push
loop
in
stos
shl
push
ror
xor
mov
pop
xchg
cmp
pop
push
(bad)
out
xchg
in
and
test
mov
and
mul
iret
(bad)
in
fisub
scas
mov
xor
xchg
movq
and
inc
or
mov
jmp
js
cld
pusha
jmp
jle
or
leave
mov
cmps
stos
packuswb
mov
cmp
ins
jmp
sahf
and
jge
aaa
jne
dec
fst
out
mov
iret
lahf
hlt
out
xchg
inc
mov
fnsave
add
movs
jle
ss
fs
pop
in
xchg
movs
mov
push
std
adc
mov
cmps
jb
leave
mov
neg
mov
sbb
cmps
and
and
adc
add
add
enter
sbb
(bad)
push
movs
test
mov
mov
or
adc
sbb
or
out
xchg
les
cmp
xchg
sub
cwde
cs
lea
out
mov
adc
icebp
fsubr
adc
mov
fldenv
ss
mov
mov
pop
xchg
movs
rol
out
(bad)
jmp
pop
bound
add
jns
jnp
cmp
jecxz
les
rol
jne
or
sahf
xchg
or
adc
pop
fimul
fmul
ins
jmp
xlat
lods
push
loopne
and
les
movs
ret
scas
movs
call
pextrw
jb
call
mov
xchg
fdiv
mov
sub
adc
aas
push
outs
xchg
or
imul
jp
jp
not
mov
adc
ja
lods
sbb
(bad)
cmp
shl
or
sbb
add
pop
pop
xor
dec
jbe
out
pushf
sub
mov
mov
jg
cmp
or
test
(bad)
lods
dec
sbb
stos
mov
xor
lds
jg
jno
xor
mov
mov
ins
movs
and
xchg
loope
in
xchg
pop
in
gs
mov
call
aad
lods
pop
pop
push
call
cmps
and
(bad)
push
jge
out
int
xor
das
mov
sbb
out
aad
rcl
(bad)
and
mov
lods
aam
mov
dec
xlat
mov
out
lods
push
(bad)
cwde
cmp
lahf
xor
cmps
(bad)
dec
cwde
ror
sbb
mov
cmp
(bad)
shl
fimul
sbb
or
pushf
stos
mov
fdivr
in
xor
mov
mov
jno
pop
or
sbb
stos
scas
and
in
xchg
mov
cmc
aad
mov
mov
mov
cld
mov
cdq
aam
sub
dec
sub
pushf
pop
cwde
mov
mov
or
add
(bad)
mov
(bad)
adc
sahf
push
mov
or
xchg
fsubr
fdivp
mov
int
in
ret
push
movs
xchg
aaa
push
out
ror
dec
gs
imul
lds
cmp
mov
jbe
mov
(bad)
inc
call
mov
call
push
fsub
xchg
outs
mov
js
add
or
dec
out
xchg
and
(bad)
cmp
mov
jb
xchg
call
(bad)
fs
push
rcr
fistp
out
xor
pushf
pop
mov
loopne
nop
(bad)
mov
(bad)
sbb
mov
xchg
jg
(bad)
adc
stc
add
mov
movs
jbe
call
jle
cs
jecxz
xchg
pop
ja
lea
lods
sub
xchg
xor
push
mov
popf
sub
sub
inc
xchg
or
sbb
mov
inc
sahf
imul
std
(bad)
ins
cli
jmp
and
aad
xchg
fdiv
mov
nop
and
(bad)
ja
inc
or
in
jecxz
(bad)
(bad)
ins
leave
inc
pushf
push
ror
sahf
aad
xor
mov
cwde
in
(bad)
xchg
pop
repz
push
jge
mov
scas
out
adc
mov
fisub
scas
push
addr16
popf
and
jge
out
xchg
adc
mov
mov
(bad)
xor
sbb
pusha
jge
mov
sahf
or
ins
les
cmp
repnz
iret
inc
and
mov
sub
or
pusha
jge
cmp
jg
jae
test
cwde
and
dec
push
mov
pop
pop
pop
fwait
ds
and
mov
or
push
xchg
and
rol
sahf
pop
rol
push
inc
outs
fistp
clc
aam
jmp
push
mov
aam
cmps
rcl
outs
ins
mov
pusha
push
aam
sbb
pop
sub
jae
sbb
sbb
arpl
jns
or
sub
cdq
xchg
xchg
in
in
ss
xchg
fcomp
jge
out
pop
and
mov
pop
mov
adc
pop
out
fcomp
aad
(bad)
loopne
mov
clc
cmps
mov
shl
push
push
mov
adc
or
call
movs
mov
sbb
xor
and
fadd
lds
lods
(bad)
xlat
cld
test
cs
xchg
adc
fldlg2
mov
fild
push
rol
push
inc
jg
jl
mov
pop
jecxz
add
dec
cld
cmps
popf
push
jns
daa
out
adc
add
jnp
call
loopne
inc
test
int3
cwde
in
in
pop
(bad)
sub
add
lods
mov
ret
shr
loop
mov
int3
mov
cmps
movs
jge
(bad)
repz
call
mov
sbb
loopne
adc
frstor
mov
iret
test
mov
adc
cli
fucomp
mov
push
mov
cdq
mov
pop
ins
stos
mov
mov
aam
jge
adc
adc
pop
mov
jmp
sbb
sbb
(bad)
adc
push
ins
fstp
cmp
out
scas
je
dec
mov
ret
cmp
or
loop
clc
movs
pusha
cmp
(bad)
sub
sbb
sbb
mov
xchg
sbb
fsubr
loope
out
fwait
retf
pop
cmp
les
mov
pop
fwait
mov
fwait
cmp
adc
jnp
fs
xlat
hlt
xchg
jp
jnp
or
arpl
mov
and
(bad)
inc
pop
pop
xchg
sbb
or
adc
cmc
iret
fisub
rcl
mov
xchg
xchg
call
neg
sbb
(bad)
pop
xor
fcomp
adc
jl
mov
and
jne
xchg
pusha
in
in
jo
gs
in
test
(bad)
hlt
ss
and
adc
add
movs
loopne
outs
push
push
sbb
mov
add
cmp
mov
adc
cmps
cdq
mov
or
mov
test
xchg
bound
fwait
mov
neg
mov
outs
shl
add
test
push
xor
das
jge
addr16
popf
out
fadd
dec
cmc
jbe
mov
mov
sbb
dec
and
mov
leave
and
jne
add
cmps
retf
dec
jo
mov
mov
pop
add
clc
nop
scas
mov
call
lds
pop
das
(bad)
jg
and
std
fdivr
xchg
daa
cmp
and
clc
or
inc
(bad)
mov
lods
(bad)
cmp
pushf
pop
loop
test
sar
mov
jo
imul
mov
mov
and
mov
test
scas
loopne
adc
pop
fsubr
out
out
dec
test
das
adc
sar
sbb
xchg
daa
pop
cmps
pop
push
stos
inc
in
out
clc
in
movs
gs
(bad)
repz
ss
xor
jne
mov
test
rcr
sbb
fld
xor
out
rol
mov
lods
int3
lods
mov
stos
(bad)
sbb
sbb
mov
hlt
es
or
mov
movs
push
scas
mov
sbb
pop
in
enter
clc
(bad)
iret
lahf
pop
movs
mov
rcr
jle
jg
leave
popf
loopne
iret
sub
fisubr
mov
inc
push
jge
(bad)
in
and
mov
sub
xlat
sbb
pop
xchg
or
cmp
arpl
nop
pusha
sub
jge
stos
add
jmp
out
(bad)
stc
mov
setl
jg
dec
jbe
xchg
xchg
mov
jp
ja
aad
stc
mov
(bad)
adc
aad
stos
fdiv
inc
popf
xchg
pusha
sti
cmps
xchg
jg
push
stos
ret
jne
mov
xor
imul
jg
sbb
movs
adc
push
mov
jbe
scas
fstp
lahf
pushf
mov
xchg
pop
loop
fild
pop
pop
sub
mov
mov
mov
fst
xor
sub
push
frstor
rcr
dec
jno
and
test
gs
xchg
push
sub
sti
ret
adc
cli
icebp
test
mov
cdq
aas
sbb
fdivr
sbb
iret
xchg
jp
add
les
int3
sahf
scas
adc
or
push
leave
cmps
mov
sti
mov
sub
sbb
je
pusha
push
fsubp
cwde
out
or
adc
movs
cmp
lods
popa
dec
push
sub
jo
(bad)
in
fbstp
jge
ror
cs
cld
stos
xlat
mov
movs
cdq
jg
retf
sub
mov
mov
iret
fwait
dec
(bad)
mov
xchg
xchg
sub
or
popw
pop
pop
sub
mov
mov
xchg
sbb
pop
jne
sbb
mov
lea
pushfw
mov
(bad)
mov
enter
sub
sub
mov
adc
in
inc
loope
dec
pop
jmp
mov
inc
cmp
mov
fadd
sub
sbb
std
icebp
call
ret
inc
daa
int3
mov
inc
jmp
push
inc
outs
pop
aaa
xchg
ret
push
sar
mov
daa
cld
cdq
scas
or
add
push
jle
loop
pop
adc
clc
or
test
or
dec
ins
inc
or
iret
sbb
(bad)
xchg
xchg
mov
mov
out
xchg
mov
and
mov
icebp
cmp
out
pop
jo
aam
mov
pushf
xchg
cmc
mov
ja
jmp
adc
(bad)
xchg
rol
cwde
rol
push
iret
xchg
or
cmps
mov
mov
or
mov
ficomp
imul
aas
ss
pop
in
or
xor
mov
push
nop
fisttp
push
adc
(bad)
(bad)
fcomp
mov
mov
sub
retf
cmp
adc
add
out
cmps
jbe
mov
ret
jle
int3
xchg
jg
(bad)
push
push
dec
cmp
sbb
jg
repnz
jl
push
stc
xlat
test
pop
out
stos
jg
mov
mov
icebp
pop
jmp
pusha
push
aad
scas
pop
push
cwde
add
and
sbb
rol
out
loopne
cmp
cmp
cmp
test
and
sub
jo
stos
cmp
outs
clc
mov
sub
add
xchg
mov
add
fs
(bad)
push
jp
or
jl
or
push
stos
aaa
out
rcl
or
mov
dec
xchg
mov
sub
pop
cld
xor
out
xchg
sbb
mov
cmp
aad
add
jecxz
(bad)
retf
mov
xchg
push
inc
fwait
push
mov
imul
loopne
out
mov
in
jmp
pop
mov
push
aam
jne
arpl
sbb
push
stos
les
jl
sbb
add
xor
mov
and
and
pop
adc
dec
cmp
push
les
fiadd
loop
in
ss
lahf
int3
mov
aam
cmp
test
rcr
mov
gs
cmp
or
sub
inc
ror
test
xchg
sub
pop
les
stos
pop
push
xchg
jp
and
(bad)
iret
(bad)
ficomp
xchg
lods
fsub
sub
push
sub
pop
sbb
aam
dec
cvtdq2ps
stos
(bad)
cli
add
xchg
movs
xchg
xor
or
push
mov
fstp
pushf
pop
xchg
ins
jns
into
daa
jp
xor
pop
sbb
mov
jge
jne
sub
and
jle
push
jl
test
je
mov
pop
xchg
jno
ss
pop
pop
js
pop
pop
fld
xor
dec
(bad)
dec
dec
inc
int
cs
pop
adc
mov
adc
pop
retf
test
jne
les
test
mov
call
in
ds
out
push
cmps
scas
jecxz
pop
or
xchg
add
enter
sub
jnp
retf
cmp
fisubr
mov
pop
stos
test
loope
int3
or
sbb
push
cwde
(bad)
pop
es
push
dec
out
xchg
ss
sahf
test
retf
pusha
mov
call
jg
cmps
jbe
add
retf
adc
(bad)
push
es
mov
in
test
movs
sbb
dec
aas
(bad)
jl
es
sbb
mov
test
add
sub
pop
aam
fs
xchg
mov
shl
xchg
or
fadd
or
cmps
sub
sub
outs
mov
aad
pop
xchg
mov
jb
jle
sbb
xchg
dec
adc
xchg
loope
jg
lods
mov
stos
out
push
cmps
mov
loopne
push
loopne
clc
fcmovne
fldenv
loope
mov
mov
dec
pushf
and
scas
cmp
ins
addr16
test
push
loopne
shr
or
ja
(bad)
into
push
xchg
mov
pop
(bad)
hlt
popf
mov
shl
push
ss
jmp
mov
or
cwde
pop
sbb
and
cwde
in
aad
fsubr
mov
sub
xlat
pop
fs
mov
aam
call
cmp
xchg
call
mov
sub
pop
jg
sub
stos
icebp
mov
adc
push
je
push
cmp
mov
jo
(bad)
mov
fcomp
pop
adc
sub
pushf
fs
sbb
sub
xchg
jns
mov
out
loopne
cmps
test
mov
pop
mov
repnz
jge
out
aas
mov
mov
add
pop
pop
mov
inc
inc
xor
cli
mov
pop
sbb
sbb
xor
push
sub
mov
add
ffree
dec
test
mov
scas
mov
call
or
rcl
add
adc
out
in
int
fidivr
stos
in
(bad)
stos
lds
mov
enter
int3
add
pop
xlat
shl
les
clc
mov
or
out
ds
movs
ret
cmps
ror
sbb
push
in
jge
data16
fisub
dec
mov
mov
int3
dec
mov
les
mov
aad
bound
test
mov
mov
(bad)
sbb
xchg
jge
(bad)
ins
mov
xchg
movs
loopne
xchg
xor
push
fmul
into
iret
test
pop
call
add
bound
mov
fcomp
enter
jmp
inc
fbstp
push
adc
in
xchg
sbb
adc
inc
mov
push
mov
popa
test
lods
add
mov
mov
nop
xlat
pop
imul
mov
mov
dec
cli
aaa
fild
cwde
mov
imul
js
mov
repz
lds
mov
mov
xlat
(bad)
push
sahf
sbb
test
mov
pop
and
hlt
aas
mov
or
loope
inc
push
aaa
mov
fisub
loop
fsub
jmp
pop
scas
dec
add
mov
mov
dec
mov
pop
jl
inc
movs
leave
or
pop
mov
pop
mov
retf
shl
xor
(bad)
aam
push
jbe
mov
ss
dec
aam
or
jmp
cwde
mov
icebp
fwait
mov
jg
mul
xor
int
add
add
sbb
pop
push
push
shl
nop
ja
shl
fldenv
in
out
sub
pop
pop
sbb
inc
int
iret
fwait
mov
inc
push
mov
je
inc
pop
push
jg
mov
fwait
retf
shl
push
and
xchg
in
sbb
test
ret
lea
cdq
jg
fidivr
in
pop
mov
pop
cmp
fsubp
cwde
add
cmp
adc
lahf
jg
mov
and
movs
shl
mov
adc
or
cmps
pop
fmul
lods
ins
pop
jmp
vfrczsd
jge
adc
ja
sahf
pop
xchg
xor
push
call
mov
xor
jle
clc
xor
lahf
push
ret
mov
or
mov
xchg
xchg
movs
pop
iret
jg
jl
stos
xchg
les
add
popa
pop
xchg
pop
xchg
sbb
or
dec
fcmovu
cmp
out
cdq
adc
inc
push
pop
push
aaa
mov
out
ret
mov
leave
loop
shr
mov
xchg
cmps
arpl
sbb
in
sahf
mov
fcomp
lahf
mov
mov
dec
out
lock
pop
pop
push
(bad)
addr16
push
pop
lds
retf
cmp
xchg
repnz
fidiv
retf
cwde
sahf
mov
fcomp
addr16
sbb
mov
xor
mov
fcom
aad
scas
jge
push
pop
icebp
jo
out
mov
mov
repz
push
pop
jp
ficom
push
xchg
push
aad
(bad)
inc
push
sub
cli
mov
movs
icebp
nop
ins
mov
sub
cmc
mov
xchg
repz
(bad)
sbb
sti
lea
bnd
mov
dec
lea
aam
mov
adc
mov
mov
mov
adc
sub
clc
iret
cmps
push
mov
and
push
jo
mov
fucomip
(bad)
ror
(bad)
jl
jle
adc
ret
leave
cmp
cld
mov
f2xm1
repnz
cmp
and
sahf
jl
pop
stos
jge
lahf
mov
add
test
movs
push
or
(bad)
adc
xor
enter
sub
pop
jge
out
push
or
pop
or
(bad)
sbb
fisttp
jnp
jns
or
mov
jg
out
add
out
and
or
mov
movs
mov
lock
outs
fcomp
pushf
ret
xor
jnp
mov
mov
pushf
sub
sub
dec
mov
retf
aam
mov
hlt
mov
xchg
push
cmps
cwde
push
fcom
arpl
inc
cmp
sar
sub
ins
mov
sahf
push
sub
into
sbb
pushf
jo
xor
and
ror
push
xor
mov
test
jl
jno
jle
pusha
jg
push
mov
movs
mov
addr16
icebp
popw
push
pop
hlt
dec
and
adc
aad
cmp
ds
jmp
sub
inc
mov
test
cwde
pop
jg
sar
addr16
call
push
(bad)
(bad)
pop
or
cmps
movs
mov
hlt
pushf
gs
push
pop
push
push
xor
jmp
xchg
jle
jno
cmps
xchg
pop
adc
sbb
pop
lods
push
adc
aas
ins
or
out
pop
dec
fwait
sub
(bad)
mul
add
aam
adc
fwait
xor
not
mov
pop
dec
and
sbb
out
scas
xchg
data16
xor
adc
push
(bad)
sbb
mov
mov
stos
mov
mov
in
xor
adc
mov
mov
or
test
xchg
mov
or
or
sar
xchg
inc
jmp
mov
ret
daa
(bad)
mov
dec
repnz
xor
inc
out
jae
movs
mov
sbb
inc
sbb
sahf
sbb
xor
xlat
xor
and
lods
dec
pushf
mov
sbb
fs
loopne
not
test
test
and
test
stc
jae
cmps
push
sub
xor
push
mov
mov
or
xchg
mov
xor
std
mov
jmp
mov
dec
xchg
mov
rcr
js
shl
xor
fidiv
xchg
jns
ins
in
mov
pushf
inc
shl
test
loop
js
xchg
inc
inc
dec
clc
jp
cmp
mov
mov
xor
xchg
pop
lods
movs
imul
ss
sbb
test
xchg
xchg
cmps
pop
jg
shl
mov
add
cmp
and
sbb
call
pop
(bad)
sti
jl
lds
mov
(bad)
sbb
cmp
or
popf
stos
pusha
popf
jmp
mov
add
icebp
jmp
lea
clc
xchg
jne
xchg
out
mov
xor
xchg
sbb
cdq
fcomp
sbb
out
or
shr
cmp
pop
jmp
pop
dec
repnz
jecxz
(bad)
das
in
mov
int3
test
adc
in
daa
jmp
sbb
pushf
adc
xor
aad
mov
mov
cmp
imul
es
and
repz
fistp
retf
inc
pop
cmp
les
pop
xchg
adc
ss
push
cmp
lods
mov
fsubrp
inc
mov
add
cwde
es
test
dec
test
xchg
mov
icebp
cs
jmp
sbb
adc
dec
inc
mov
jg
pop
jge
es
pop
push
adc
dec
add
inc
mov
mov
sub
sbb
dec
xor
xor
mov
mov
pop
lods
dec
mov
pop
jl
jns
stc
mov
ja
sub
(bad)
stos
sub
(bad)
push
aam
mov
lods
or
xor
test
push
nop
mov
dec
sub
adc
out
mov
clc
push
mov
imul
cmp
sbb
pop
das
mov
dec
cmp
mov
or
or
test
sbb
imul
aam
or
call
nop
sahf
sub
push
sbb
mov
push
pop
sub
rcl
cwde
adc
jmp
pop
movs
pushf
sub
int3
shl
mov
jbe
cmps
sub
pop
or
in
shr
xchg
test
push
retf
mov
dec
cmps
mov
cmp
clc
es
sbb
mov
push
cmp
fmul
jae
add
(bad)
je
cdq
js
jno
mov
and
mov
mov
sbb
aaa
add
aaa
sbb
int3
aam
stos
test
push
pop
or
je
push
mov
inc
xchg
test
or
nop
push
sub
xor
mov
or
mov
adc
mov
xchg
je
or
pop
aad
and
pop
adc
cmps
ja
push
jl
and
jno
das
fistp
add
xor
stos
dec
test
jo
lahf
cwde
or
pop
fs
xchg
test
iret
push
adc
xchg
mov
lea
cld
adc
fs
rcl
xchg
call
sbb
loopne
(bad)
adc
iret
icebp
leave
fcomp
push
or
or
push
ss
push
jbe
xchg
add
xor
in
fsub
xchg
dec
iret
cmps
jl
sbb
ds
iret
pop
inc
adc
mov
movs
and
mov
div
stos
dec
sub
xor
sbb
in
cdq
call
ret
std
sbb
nop
sbb
rcl
mov
aam
or
mov
loop
jge
rol
sub
je
sub
push
jo
outs
xchg
lea
jl
xlat
mov
add
loopne
mov
mov
loope
or
mov
ins
pop
aad
mov
xchg
mov
ja
stos
cmp
mov
call
xor
or
scas
(bad)
icebp
(bad)
pop
xor
outs
aam
aam
mov
sub
es
(bad)
pop
loopne
inc
pop
sub
cli
nop
call
dec
xchg
and
fmul
mov
cmp
sbb
int3
pop
dec
loopne
in
pushf
sub
jmp
dec
xchg
outs
mov
dec
cmp
xchg
sub
dec
mov
retf
sbb
adc
popf
test
jo
mov
(bad)
out
pop
adc
jno
imul
leave
push
sbb
das
mov
fldenv
push
enter
push
(bad)
adc
scas
adc
test
out
je
fadd
cmps
or
in
sub
pop
or
(bad)
adc
inc
xor
std
inc
pop
clc
neg
addr16
add
dec
pop
dec
xchg
int
dec
(bad)
mov
ficomp
retf
dec
mov
rcr
das
dec
fild
sub
popf
inc
jg
push
pop
mov
or
jmp
and
push
fldcw
stos
add
mov
sub
scas
stos
pop
loope
cmp
push
add
cmp
fsubr
and
out
(bad)
lea
call
je
jmp
jbe
es
mov
in
imul
pushf
mov
xor
mov
xchg
cli
js
je
mov
jno
jg
pop
cmps
inc
and
xor
les
enter
mov
mov
test
and
sahf
(bad)
ins
mov
and
addr16
or
fldenv
inc
jge
mov
cmc
iret
pop
push
fld
xchg
push
sbb
adc
test
jle
movs
fmul
mov
enter
sbb
(bad)
pop
and
pop
push
push
cmp
add
sub
mov
and
push
pop
addr16
pop
movs
mov
mov
or
in
and
cmp
(bad)
aad
add
(bad)
movs
xor
jbe
or
int3
fsub
movs
adc
cli
or
loope
movs
retf
mov
inc
shr
inc
sub
mov
sub
gs
inc
loopne
xlat
ins
mov
js
leave
dec
(bad)
cmp
mov
add
xchg
push
lods
pop
pop
adc
fwait
shl
(bad)
in
mov
push
repz
fidivr
xchg
push
pop
push
jge
mov
mov
ds
xchg
out
mov
ja
mov
mov
stc
or
repnz
bound
fimul
mov
sub
fmul
push
out
push
xchg
outs
sbb
sahf
push
lds
(bad)
or
dec
inc
add
xor
and
pop
cmps
repnz
adc
xchg
movs
xor
xchg
lods
mov
or
sub
push
sub
mov
scas
dec
mov
xchg
icebp
mov
push
pusha
cmps
js
mov
adc
jge
mov
mov
sbb
movs
mul
clc
in
mov
mov
bound
sbb
cwde
pop
pop
pop
add
mov
and
jbe
movs
icebp
adc
mov
xor
and
mov
jmp
fld
call
adc
out
sub
mov
in
out
push
aas
adc
push
pushf
xchg
pop
nop
outs
nop
in
and
mov
sbb
rcr
out
mov
retf
mov
je
cmp
movs
cli
(bad)
(bad)
cwde
cwde
xchg
adc
mov
in
pop
lea
xchg
nop
and
mov
call
or
push
cwde
jle
sbb
test
ins
add
xchg
in
push
add
push
sbb
xchg
nop
jle
adc
add
clc
xchg
ror
les
and
cwde
test
enter
in
xchg
hlt
jp
test
lahf
dec
in
sbb
pop
mov
mov
(bad)
je
pop
jp
das
fs
lods
sahf
push
xor
ss
mov
push
add
xchg
mov
mov
jg
test
(bad)
fs
jb
xchg
fstp
xlat
jecxz
mov
adc
jo
es
imul
(bad)
mov
sub
inc
dec
and
jl
dec
retf
test
repz
sub
jmp
sahf
and
in
(bad)
aad
xchg
jmp
mov
mov
xchg
movs
mov
aad
mov
mov
sbb
mov
cwde
xchg
shl
mov
test
mov
push
dec
sbb
push
cmps
stos
jl
push
imul
fimul
jne
in
dec
test
popf
or
ss
pop
out
cmp
xchg
push
and
mov
(bad)
mov
out
inc
pop
jnp
js
test
inc
jns
lock
nop
pop
in
ins
sbb
pop
push
(bad)
addr16
loopne
dec
ins
xchg
push
movs
sbb
jne
xchg
cmc
std
mov
into
mov
pushf
jl
xor
sbb
pop
dec
fstp
movs
fwait
sbb
dec
pop
sub
xchg
arpl
(bad)
(bad)
mov
mov
nop
mov
sti
ins
mov
jmp
jbe
lds
mov
push
sbb
scas
(bad)
mov
jae
fisttp
sbb
cmp
cmp
popa
data16
xlat
mov
dec
movs
cld
xor
mov
icebp
pushf
cmp
movs
inc
sub
sahf
(bad)
ds
jno
pop
dec
pop
sbb
jl
(bad)
mov
mov
loop
mov
xchg
sub
in
add
inc
fwait
cmps
sbb
dec
xlat
rcl
push
test
pop
push
std
rcl
les
push
jb
jle
stc
pusha
(bad)
and
mov
jp
mov
js
sub
dec
mov
mov
jno
pop
aad
xchg
movs
stos
dec
inc
addr16
pop
xchg
xchg
stc
test
sbb
fimul
dec
cmp
js
ins
fmul
out
mov
sub
add
adc
xchg
or
mov
sbb
mov
push
sar
xlat
aam
xchg
mov
test
adc
mov
leave
sub
or
fwait
push
mov
stos
adc
in
and
adc
aaa
int3
xchg
cmp
push
movs
sbb
push
fwait
and
fiadd
movs
jle
mov
lods
js
pusha
stc
adc
xor
cmp
stc
imul
or
(bad)
cmp
add
xor
push
sahf
jl
pop
nop
cmp
ins
movs
dec
sbb
test
outs
shl
pop
mov
fcomp
mov
cld
stc
aad
cmc
pop
jae
mul
mov
xlat
xchg
loop
loopne
loope
ret
push
mov
cmp
dec
call
movs
and
pushf
pop
cmc
inc
dec
sahf
out
cmps
ret
pushf
push
mov
aas
sbb
inc
cwde
loop
(bad)
mov
es
test
cmp
pop
cmps
push
icebp
ins
xor
pop
sub
sbb
and
std
movs
in
mov
dec
fs
stos
xchg
mov
(bad)
adc
pop
mov
mov
sub
inc
in
imul
nop
(bad)
jge
jbe
mov
or
mov
(bad)
(bad)
arpl
inc
ja
jo
dec
sbb
int3
inc
sbb
movs
lds
cmc
cwde
or
push
add
or
mov
cmc
sti
loope
std
pushf
aad
repz
daa
or
popf
out
mov
cwde
mov
aam
mov
and
jge
cmp
xchg
pop
lods
ss
sahf
fadd
sbb
sbb
sub
aad
loope
sbb
adc
(bad)
sbb
dec
xchg
aad
xchg
cwde
lds
pop
lds
and
fsubr
add
mov
mov
and
fimul
out
je
sbb
in
(bad)
push
xor
js
jl
inc
mov
fsub
test
cwde
call
add
dec
mov
jl
and
ror
mov
add
test
push
dec
adc
ins
stos
adc
nop
sbb
scas
push
nop
dec
fisttp
call
popf
xchg
and
movs
adc
fs
std
cwde
mov
movs
ret
in
fwait
and
cmp
loop
scas
movs
jno
push
test
mov
popa
sbb
sub
sahf
(bad)
or
(bad)
movs
ja
mov
test
ja
jl
rcr
out
dec
ss
addr16
pushf
movs
pop
dec
dec
inc
jl
push
test
out
jle
aad
icebp
retf
(bad)
and
push
out
pop
gs
mov
cwde
rcl
adc
adc
jle
sqrtps
and
mov
mov
jmp
sbb
je
mov
jne
loop
xchg
movs
bound
mov
cwde
ret
jle
mov
in
dec
data16
sub
test
iret
sar
leave
in
movs
xor
sub
lods
jno
les
call
call
jl
leave
es
frstor
aas
pusha
icebp
aad
mov
mov
pop
push
rcr
(bad)
mov
lock
scas
push
sub
call
es
das
dec
std
pop
icebp
add
xlat
mov
ret
cmp
fadd
mov
hlt
mov
adc
pop
mov
jg
push
fld
ds
cwde
or
add
mov
push
pop
fild
push
ss
call
jnp
cmp
jbe
sub
xor
ret
push
sub
cdq
and
xlat
cmp
xchg
cmps
out
xor
retf
aaa
neg
scas
inc
xchg
adc
es
jecxz
hlt
movs
sbb
(bad)
mov
rcr
xlat
adc
into
pop
ja
lods
fwait
sbb
or
mov
hlt
cmp
adc
xchg
shl
sub
ins
fcom
jno
repnz
out
pop
fiadd
sahf
ins
mov
sub
mov
ins
jbe
and
(bad)
pusha
into
rcl
add
inc
mov
cmp
mov
popf
es
cmp
dec
fcom
sub
pop
jg
and
in
push
push
cmp
movs
lock
and
add
and
or
push
xchg
or
sti
sbb
inc
adc
mov
call
mov
mov
rcr
adc
push
test
fcmovnb
add
pop
or
pop
fs
out
(bad)
in
mov
cs
mov
jge
ja
inc
jbe
outs
adc
aas
sbb
cli
xor
ins
xchg
fldenv
stos
sahf
test
dec
xor
test
enter
push
sbb
loopne
pop
loop
and
inc
scas
sbb
jmp
push
adc
pop
test
or
or
pop
dec
xchg
sahf
inc
xor
call
mov
sar
jg
or
jno
cmps
pop
pop
ret
cmps
pushf
cmp
js
inc
dec
mov
or
ds
mov
xchg
fwait
dec
fwait
out
scas
cmp
dec
sbb
test
jne
(bad)
mov
lds
add
mov
xchg
add
xchg
mul
bound
loope
scas
stos
jl
iret
les
aam
xor
inc
mov
mov
sbb
fsubr
cmps
fcmovb
cmp
mov
xchg
sub
xchg
sahf
shr
pop
mov
ins
sub
std
and
mov
mov
(bad)
sahf
movs
xor
inc
push
xor
sbb
adc
sahf
mov
fadd
mov
movs
and
push
daa
add
ror
or
(bad)
rcr
mov
cwde
xchg
cdq
cld
idiv
sahf
pop
lods
mov
pushf
push
in
nop
sbb
in
repnz
sbb
mov
pop
dec
jge
pop
fimul
test
icebp
movs
ret
push
mov
nop
pop
mov
(bad)
xchg
sbb
or
jp
ins
ss
mov
mov
addr16
jnp
aam
mov
jne
pop
mov
int3
pushf
push
retf
(bad)
push
sbb
or
mov
(bad)
mov
jae
mov
pusha
(bad)
mov
enter
ja
pop
inc
(bad)
int3
pushf
sbb
mov
or
ins
xchg
mov
sti
fmul
rol
sbb
in
scas
mov
xchg
cwde
cld
(bad)
int
xchg
int
mov
shr
sbb
or
adc
xor
add
mov
js
xchg
stos
cld
mov
mov
fcomp
fstp
movs
(bad)
mov
movs
cmp
jecxz
mov
jl
fisttp
mov
mov
push
sbb
push
jl
adc
mov
in
nop
mov
dec
les
(bad)
lods
cwde
cdq
mov
cwde
mov
adc
mov
sbb
sub
mov
mov
ss
pushf
outs
lea
jmp
fcomp
and
movs
mov
mov
(bad)
int3
mov
sahf
cld
adc
mov
xlat
(bad)
dec
lea
cmp
das
pop
inc
test
test
nop
inc
pop
adc
push
in
out
stc
and
cmc
pop
mov
and
aam
mov
xchg
sbb
fcomp
jecxz
cmp
jbe
mov
jp
xchg
xor
cmp
xlat
xchg
aaa
in
mov
movs
enter
pushf
loop
cmps
sub
adc
mov
xlat
or
xchg
push
sbb
data16
mov
sbb
mov
shl
cmps
xchg
movs
sub
cwde
cmp
outs
sub
pop
fdiv
sbb
and
adc
daa
xor
dec
outs
jle
xchg
stos
or
and
call
push
push
mov
stos
jae
scas
add
fsub
movs
movs
pop
xchg
in
mov
xor
add
sbb
sub
jmp
xor
pop
repz
or
and
nop
adc
push
in
sbb
loope
mov
call
mov
push
(bad)
adc
dec
cli
and
mov
(bad)
lahf
push
mov
mov
movs
mov
js
stos
es
cmps
or
test
loop
mov
adc
cmp
adc
ret
xchg
cmp
neg
into
rol
popf
push
pop
jo
test
push
adc
mov
add
pop
xor
lds
adc
mov
mov
push
cmp
int
xchg
ret
or
sub
dec
mov
adc
sbb
int3
pop
xlat
push
hlt
cmp
pop
pop
xchg
fwait
lock
lods
push
push
jmp
cs
pop
aam
mov
fs
xor
cmp
addr16
jg
(bad)
mov
dec
xor
popa
clc
mov
ja
leave
push
ins
inc
and
xchg
mov
push
pop
rcr
push
lods
cld
out
jns
sti
pop
push
mov
cmps
(bad)
cmp
ficom
int3
test
or
jl
jmp
jl
sbb
lods
adc
mov
mov
lea
aaa
pop
(bad)
test
pop
add
inc
or
out
stc
test
and
repz
dec
ds
sub
outs
(bad)
pop
aaa
rcr
adc
out
fist
push
adc
jp
movs
mov
repnz
leave
je
and
mov
pop
push
cmp
or
sbb
movs
or
test
pushf
test
ss
and
cdq
inc
jge
(bad)
out
xor
mov
pop
pop
sahf
jae
in
in
mov
add
enter
or
xchg
pop
mov
aam
xlat
cs
or
sbb
pop
jmp
out
adc
cmp
mov
loop
out
dec
clc
xchg
int3
xchg
scas
mov
and
mov
dec
mov
out
in
pop
stos
lods
xchg
mov
fsub
cmp
out
out
fcom
fstp
out
add
in
mov
add
adc
movs
sbb
repnz
jo
cmc
sti
shl
ret
(bad)
jmp
nop
in
add
jmp
stos
pop
mov
mov
xor
xchg
xlat
and
mov
movs
fs
cmp
and
push
jl
call
and
stc
out
sbb
aaa
xor
sub
es
les
aam
mov
movs
pop
pop
cmps
and
cdq
xchg
adc
cli
fst
movs
(bad)
lea
inc
sub
sbb
push
sbb
push
sub
enter
popf
outs
xchg
xchg
(bad)
clc
sahf
or
or
cld
fcomp
out
jl
mov
call
pushf
mov
fsubr
mov
jmp
or
mov
cmc
clc
or
std
dec
pop
js
imul
dec
cmp
out
out
adc
mov
(bad)
mov
jl
xlat
mov
dec
mov
neg
shl
shl
mov
iret
jb
add
lods
fcom
sub
xor
call
in
fwait
jl
adc
inc
sub
push
or
add
sbb
mov
xlat
pop
out
fsub
or
xor
std
or
lea
leave
xor
rcl
call
jl
ss
dec
and
sbb
sub
nop
imul
mov
ret
sbb
mov
arpl
cmps
jecxz
mov
or
jl
shl
mov
or
add
sbb
cmps
aam
pushf
push
xchg
jl
test
test
mov
leave
clc
mov
xchg
cmp
outs
xlat
add
cmp
cmp
jo
outs
mov
stos
scas
sbb
cs
pushf
jl
sub
add
out
jmp
pop
mov
inc
adc
pop
lods
ds
sbb
ret
ss
sub
push
jg
retf
xor
icebp
dec
gs
inc
aas
push
in
and
adc
dec
(bad)
adc
cmp
ret
cmp
lahf
mov
sub
mov
adc
cwde
and
imul
rol
mov
mov
movs
pop
dec
dec
out
enter
test
push
sub
dec
add
aam
(bad)
movs
es
mov
and
loopne
movs
lahf
(bad)
sub
cmp
xlat
movs
jl
xor
xchg
xchg
sbb
test
xchg
sub
pop
repz
sbb
cwde
loop
sbb
aam
dec
xor
inc
mov
cld
sub
cmp
jl
xor
sahf
sbb
(bad)
xor
out
(bad)
pop
pop
pop
pop
or
fadd
and
add
out
out
sbb
pushf
pop
daa
repnz
cld
loopne
xor
push
pop
aaa
ins
call
stos
cmp
fdiv
fidiv
sbb
in
or
scas
cld
rcl
sub
jl
aaa
test
out
mov
fstp
sub
fs
jb
pop
jl
repnz
(bad)
(bad)
xchg
add
jmp
test
push
pop
or
push
call
out
fdivr
push
pop
jl
fadd
outs
inc
pushf
jecxz
pop
leave
das
push
and
or
sub
cs
std
jmp
cmc
fucomp
xor
call
es
fsubr
sahf
jo
pop
jmp
stc
pusha
movs
mov
sbb
cmps
cmps
dec
dec
ja
sbb
jge
or
push
and
mov
addr16
fld
sbb
(bad)
bound
xor
xchg
leave
leave
push
lds
jl
ins
dec
dec
fdivr
imul
pop
xchg
ret
fwait
and
and
neg
or
xchg
add
push
xlat
xchg
push
and
iret
adc
pop
mov
imul
idiv
ret
loop
ss
adc
call
xchg
push
movs
loop
push
gs
mov
sti
loop
adc
(bad)
jp
lahf
es
pushf
mov
fnstenv
mov
or
inc
mov
pop
cli
mov
fild
jl
(bad)
inc
pushf
pop
test
and
and
arpl
fs
dec
add
lods
and
in
inc
push
mov
sahf
out
data16
mov
loope
ins
mov
or
push
or
cwde
js
xchg
dec
push
pop
push
add
dec
add
ds
mov
mov
arpl
jg
fild
pop
add
(bad)
adc
inc
mov
out
movs
mov
sub
out
pop
cwde
xor
loopne
sub
je
gs
(bad)
test
push
push
adc
pop
adc
mov
in
fsub
mov
call
adc
outs
adc
clc
clc
icebp
inc
dec
aad
frstor
mov
outs
fisub
or
pop
push
add
pop
retf
enter
lds
test
add
jne
push
hlt
mov
or
stos
stc
fstp
sub
pop
add
add
movs
add
call
and
adc
adc
sub
imul
sbb
dec
inc
push
mov
ins
jge
(bad)
adc
jl
mov
jmp
retf
fstp
push
push
xchg
cmps
daa
or
cwde
(bad)
es
xchg
mov
jl
mov
xor
jmp
(bad)
mov
fdiv
mov
pop
test
cld
ins
pop
sbb
imul
mov
sub
lds
rol
fwait
pop
lods
scas
adc
test
pushf
adc
(bad)
and
and
mov
and
mov
pop
and
and
out
scas
push
aam
repz
test
adc
mov
out
sbb
sbb
ins
mov
enter
dec
idiv
rcr
sbb
sar
or
cld
fdiv
je
stos
sbb
or
cld
pop
mov
pop
jmp
cmps
clc
cld
lock
mov
jmp
mov
loope
mov
sar
js
sub
jo
js
cdq
jg
cld
add
enter
xor
fistp
int3
sbb
xor
pop
cmp
mov
(bad)
cwde
sbb
mov
pop
cmp
daa
mov
or
add
(bad)
add
mov
mov
imul
xchg
cli
int3
mov
cld
pushf
(bad)
push
loopne
xor
and
cwde
lahf
mov
in
stc
push
into
xchg
adc
retf
(bad)
iret
ret
xchg
jmp
add
inc
aaa
mov
loop
aas
sbb
mov
out
or
fnstenv
add
rol
add
scas
(bad)
cld
adc
jmp
adc
add
add
xor
rol
xchg
lods
into
fidivr
sahf
loopne
fmul
call
lahf
int3
jecxz
jmp
sbb
int3
jo
pushf
dec
ins
(bad)
ret
repz
pusha
jge
int3
and
mov
sbb
mov
or
pop
xor
inc
push
imul
or
mov
aad
lods
mov
in
mov
fs
pop
fs
retf
sahf
and
add
repz
clc
js
inc
and
and
dec
rcr
jl
aaa
pop
mov
addr16
neg
call
xchg
pushf
xchg
outs
xlat
jg
dec
cmps
ins
dec
mov
test
int3
test
fs
inc
sahf
jg
mov
fdivr
dec
push
xor
test
out
lds
mov
add
add
(bad)
cli
pushf
push
(bad)
repz
inc
aam
stos
push
mov
sbb
std
xlat
pop
pop
push
mov
stc
pop
popf
and
push
test
mov
adc
pop
push
jecxz
cmp
loop
pusha
lock
movs
xchg
adc
sahf
aas
call
sti
aas
and
jne
loop
ins
fild
mov
push
mov
movs
mov
push
mov
in
mov
xor
loopne
popf
jl
stc
(bad)
cmp
inc
pop
xor
add
out
ds
dec
add
push
fsubr
adc
(bad)
mov
shr
(bad)
cmps
adc
dec
hlt
xor
xchg
fdiv
xchg
cld
pop
ins
out
rcl
jmp
and
scas
and
sbb
mov
ss
cmp
je
jl
data16
(bad)
bnd
int
ret
js
js
fbstp
int3
inc
aad
mov
dec
dec
sub
push
or
jne
ins
add
sbb
mov
clc
sbb
mov
jno
jl
inc
and
jge
imul
add
loopne
or
test
pushf
add
icebp
inc
mov
loopne
fbstp
jo
xchg
push
cmc
mov
(bad)
mov
sbb
jl
mov
repz
cld
fist
and
cmps
out
pop
xchg
pop
out
aaa
cld
sbb
add
sbb
lock
stc
clc
inc
xchg
xor
imul
popa
dec
mov
ficom
outs
jne
push
mov
pop
jl
sub
jmp
sbb
jne
out
fisttp
mov
sbb
out
mov
daa
adc
jmp
(bad)
icebp
out
push
fisubr
push
push
test
stos
gs
int3
div
call
and
nop
not
jp
and
stc
movs
popf
lahf
ja
(bad)
jp
push
mov
outs
sbb
fs
dec
(bad)
jb
pop
fwait
push
sbb
repz
les
ins
mov
outs
xchg
adc
push
lea
fsubr
sbb
std
jnp
mov
dec
cmp
rcr
rcl
jns
and
gs
cmp
scas
pop
daa
stos
mov
in
fisub
cmp
cmp
cs
sbb
mov
mov
lods
jl
mov
mov
out
jnp
fcmovb
lock
ret
and
idiv
push
jae
lea
cwde
cs
xor
scas
cld
pusha
ret
rep
and
push
pop
push
dec
or
jmp
lods
test
jae
sar
cmp
cld
or
vprotb
mov
xchg
ficom
dec
add
je
out
fmul
out
jecxz
cwde
pop
xchg
xchg
in
xchg
lahf
pop
jl
sbb
pop
adc
sub
mov
mov
adc
cwde
loop
jb
mov
cmps
stos
fdiv
cmps
div
in
imul
into
out
xchg
outs
lods
mov
call
test
xchg
lods
fisubr
pop
popf
pop
mov
adc
faddp
mov
pop
call
(bad)
jmp
out
or
xchg
scas
dec
mov
add
dec
sub
aam
jl
cmp
mov
cmps
movs
mov
inc
shl
pushf
in
mov
popf
pushf
mov
xor
inc
or
loopne
xchg
lds
mov
jno
sahf
lea
(bad)
add
idiv
push
(bad)
mov
mov
inc
clc
add
adc
mov
int
(bad)
shl
pop
sbb
into
popa
repnz
mov
test
jmp
loop
(bad)
push
test
mov
cmps
xor
pop
lahf
fcom
push
add
loopne
and
xchg
imul
jo
push
mov
gs
mov
or
shl
dec
push
lods
aam
movs
out
mov
sub
int3
aaa
(bad)
loop
test
mov
inc
push
sahf
push
push
loope
(bad)
fcomp
dec
repnz
(bad)
movs
jno
movs
aam
loope
movs
mov
push
push
mov
leave
fistp
out
mov
outs
int
cmp
dec
sbb
call
not
gs
loopne
pop
retf
sub
in
mov
test
repz
pop
imul
mul
cmps
sub
sub
pop
icebp
pop
ret
movs
aam
adc
mov
ret
pop
in
and
loope
fld
out
mov
inc
dec
ins
dec
xchg
adc
std
fimul
mov
in
jb
sbb
jecxz
hlt
out
mov
out
stos
scas
sub
mov
ins
mov
push
lock
push
mov
clc
test
push
les
mov
mov
ror
add
cmps
aas
pop
sub
sar
cli
push
cmc
add
sbb
mov
pusha
jbe
sub
xchg
xlat
out
iret
mov
push
adc
cmp
pop
cmp
cmp
arpl
cmp
xchg
fisttp
mov
adc
mov
out
pushf
mov
lock
out
in
mov
xchg
add
push
dec
sub
mov
test
and
mov
out
push
vrcpss
retf
mov
mov
push
jecxz
sbb
add
in
loope
scas
sbb
xor
jbe
div
in
or
sbb
hlt
push
fs
dec
rol
cmp
fcom
popf
js
dec
mov
js
ds
ins
daa
cmp
push
mov
mov
dec
test
mov
loopne
iret
out
mov
jp
jo
jl
sbb
mov
inc
cld
pushf
jnp
je
and
popf
mov
test
retf
call
sub
and
(bad)
daa
inc
jno
into
dec
xchg
mov
ret
in
or
test
xchg
movs
fucom
aaa
dec
push
sti
xor
shl
xchg
sahf
(bad)
fsub
mov
jnp
addr16
and
and
lods
and
in
gs
xchg
movs
push
inc
(bad)
movs
test
loope
push
xchg
cmps
in
push
aas
jnp
fld
pushf
jne
(bad)
iret
out
(bad)
adc
into
mov
je
out
int3
mov
lea
(bad)
cmp
sub
daa
jge
mov
mov
in
sub
push
(bad)
faddp
imul
jl
in
and
rol
adc
sbb
xchg
push
outs
mov
lds
les
mov
and
movs
test
popf
addr16
sbb
push
mov
and
jge
inc
test
mov
sti
and
imul
int3
push
pop
pop
sar
ins
jmp
dec
pushf
shl
and
xor
jge
mov
das
fst
fstp
test
jecxz
mov
movs
sti
loop
bound
mov
pop
test
arpl
and
test
ficomp
xchg
scas
sti
pop
fstp
and
jle
fucomi
cld
cs
enter
in
loopne
in
cld
mov
inc
xchg
lea
out
mov
cs
push
fstp
dec
call
dec
fsubr
outs
push
jo
int
call
in
fsubrp
and
out
sbb
push
bnd
mov
dec
sahf
sbb
aam
dec
lds
(bad)
xchg
push
clc
sti
fistp
lods
sbb
cmp
xor
push
adc
xor
cmp
push
push
push
icebp
outs
retf
sub
retf
mov
in
test
or
dec
enter
clc
jae
mov
icebp
jecxz
icebp
jmp
jg
test
movs
mov
sub
sbb
rcl
mov
int3
jo
jg
in
imul
mov
pop
push
outs
pusha
fld
and
xchg
push
cli
aad
mov
scas
and
cmps
lock
out
jmp
or
adc
call
push
(bad)
lods
xchg
xchg
adc
push
xlat
sub
dec
push
test
call
mov
adc
mov
cld
jmp
stos
jl
jmp
inc
mov
xor
fsubr
xor
dec
jmp
xchg
(bad)
jg
aam
aad
adc
fstp
push
setne
push
movs
mov
jmp
fwait
out
and
sti
aas
sub
ficomp
jmp
sub
std
loop
jnp
or
xlat
cli
retf
sbb
sub
xchg
xchg
movs
loop
mov
out
nop
loope
xor
cmp
or
imul
inc
ss
jp
xor
adc
add
pop
dec
mov
mov
jl
xchg
xor
sub
bswap
sbb
inc
aaa
xchg
ficom
pusha
push
mov
adc
sbb
cmps
dec
push
and
push
(bad)
out
sbb
pop
adc
xlat
adc
out
or
mov
cmps
sbb
out
int
loopne
fimul
lock
ja
es
ss
push
sub
cmps
xor
cmp
mov
inc
or
cmp
mov
std
nop
sar
test
mov
into
jmp
mov
std
lods
test
and
(bad)
xlat
div
jmp
mov
pop
ror
cmps
xlat
xchg
pop
pop
je
adc
push
pop
les
test
sub
and
mov
fbstp
mov
in
stos
cmps
mov
xchg
addr16
jl
daa
lahf
push
mov
inc
sbb
push
iret
add
out
cmps
adc
neg
push
div
xchg
jecxz
xchg
xchg
cld
pop
adc
(bad)
and
loopne
xlat
add
rol
xchg
fistp
push
mov
cmps
push
jl
arpl
(bad)
outs
in
lods
ins
inc
jbe
rcr
ja
cmp
xchg
sub
or
stc
movs
mov
popf
sub
test
mov
xchg
call
jg
or
das
shl
pop
iret
out
call
jg
mov
cmps
aas
jle
xor
cmp
les
adc
test
pop
out
add
xchg
inc
pop
fisub
xor
add
inc
pop
retf
fcmovnbe
lock
or
inc
xor
jecxz
sbb
fst
lock
fimul
repz
add
cli
mov
enter
loope
mov
sbb
xor
pop
mov
rcl
(bad)
(bad)
xchg
and
fs
and
push
mov
data16
jb
(bad)
pop
xchg
repnz
cld
lods
push
xchg
jmp
cmp
(bad)
in
adc
mov
popa
lds
add
dec
xchg
(bad)
cmps
nop
mov
cmp
jmp
mov
in
sbb
jl
add
cwde
push
fldcw
(bad)
mov
in
pop
and
stos
sbb
dec
lods
mov
mov
inc
into
sti
sub
and
sub
std
add
test
and
pushf
and
jl
jl
cmp
out
and
in
test
fst
fldcw
push
aam
xchg
mov
xchg
lods
push
ficom
repnz
mov
aam
test
ja
jnp
cbw
cmp
sub
stos
sub
neg
adc
add
push
jmp
pop
mov
push
sbb
pop
out
daa
xchg
xchg
daa
dec
(bad)
popf
test
sbb
movs
test
cmc
jl
loope
sbb
fcmovbe
(bad)
fsubr
xchg
pop
mov
pop
mov
and
imul
fldenv
mov
cli
gs
frstor
stos
push
sub
mov
pop
test
sub
mov
xor
lods
movs
mov
outs
mov
add
lahf
popa
fld
pop
pusha
loopne
xchg
cmp
enter
lds
out
xchg
cli
or
cmc
push
stc
lock
std
not
add
mov
test
add
psubsb
xlat
xchg
sbb
jae
loop
dec
or
clc
pop
sti
mov
pop
add
xchg
cmp
dec
add
jo
add
ffreep
jg
sub
pop
add
sbb
push
movs
int
in
inc
xor
dec
sub
cmp
mov
add
xchg
adc
fnstsw
cmp
adc
mov
add
mov
stos
jl
inc
ja
adc
sbb
fsubr
mov
and
sbb
mov
fcomp
add
movs
ror
mov
clc
dec
stc
cmp
jmp
mov
adc
jle
add
mov
jecxz
mov
(bad)
jle
push
popf
icebp
mov
jge
cmp
pop
pop
mov
xchg
pusha
aam
inc
sub
jns
xchg
inc
xchg
sbb
rcl
stos
jb
cli
adc
mov
cmp
out
enter
loop
lods
cld
mov
lock
pop
(bad)
mov
sub
cdq
lods
adc
ror
add
lahf
setne
push
loop
fdivr
fdivr
in
jl
xlat
mov
add
or
add
popf
xchg
inc
dec
or
inc
imul
movs
xchg
or
and
aam
leave
std
ret
xchg
daa
cwde
cmc
jl
(bad)
mov
cmps
xchg
fs
ja
xor
in
imul
leave
out
or
mov
push
in
enter
add
(bad)
pop
add
(bad)
jb
mov
xlat
bound
int3
add
and
push
sub
or
sbb
push
ss
call
inc
cld
adc
fild
xchg
pop
test
and
rol
cld
pop
hlt
rol
fadd
xor
call
outs
into
in
popf
mov
cmps
mov
sbb
fst
mov
(bad)
out
std
loopne
dec
mov
(bad)
rcr
mov
or
push
adc
add
jns
mov
fisttp
or
dec
dec
stos
dec
pop
push
and
rcl
pop
and
dec
dec
push
(bad)
or
data16
fcomp
mov
aad
repnz
fisub
mov
or
push
jg
dec
add
fnstsw
fbld
test
ret
xor
mov
jmp
cmp
vmovq
nop
mov
and
cmps
lahf
dec
cdq
push
xchg
imul
xchg
addr16
pop
and
xor
mov
mov
sbb
xchg
cmp
popf
lea
sub
je
dec
mov
lds
inc
sbb
lods
cdq
or
sbb
fadd
out
xor
(bad)
mov
push
pop
sbb
mov
and
sbb
fidiv
pushf
add
cmp
out
xor
mov
sbb
fmul
(bad)
or
pushf
add
jmp
(bad)
sbb
jl
(bad)
movs
jle
jbe
enter
jbe
fnstenv
idiv
stos
push
sbb
and
(bad)
sbb
pop
leave
js
push
and
loope
loope
or
sbb
out
stc
sub
dec
cmps
mov
fadd
pop
dec
fcomp
adc
mov
mov
test
inc
cld
pop
into
dec
test
pop
mov
dec
pop
push
int3
adc
adc
lea
pop
pop
retf
cmp
loope
dec
mov
cmp
mov
and
pop
xor
iret
fdivr
ror
sbb
adc
dec
call
xchg
dec
adc
push
and
mov
adc
xchg
je
fsubr
pop
pop
je
pop
and
fwait
pop
loop
mov
movaps
mov
xor
mov
movs
sub
int3
push
test
out
jmp
jne
adc
sbb
push
jl
mov
test
adc
and
aad
inc
shr
jo
mov
mov
(bad)
adc
pop
dec
retf
ins
jbe
call
mov
out
out
rcr
or
adc
out
dec
out
pop
movs
(bad)
jo
cli
or
xchg
movs
jp
cli
xchg
sbb
xchg
fcomp
pusha
jg
push
cmps
js
cwde
movs
add
lock
jo
xchg
fnstsw
mov
cmp
pop
push
stos
pop
clc
mov
xor
xor
neg
lods
jmp
iret
inc
or
mov
lahf
(bad)
jg
push
inc
xchg
dec
out
inc
popa
movs
dec
fdivr
popf
nop
push
in
gs
pusha
push
je
jg
movs
(bad)
mov
xor
xor
push
loopne
mov
xchg
push
mov
jl
aad
xchg
fmul
add
test
mov
pushf
mov
xlat
xor
mov
mov
cwde
dec
jp
and
out
or
sub
mov
mov
int3
es
cdq
scas
jl
(bad)
sub
lods
lock
int3
cmps
or
imul
addr16
dec
fchs
fisttp
mov
jge
fmul
pop
lods
dec
mov
test
scas
cs
xchg
pop
aad
mov
imul
jp
mov
into
int
into
pop
pushf
cmps
lock
sbb
(bad)
repnz
lahf
cmps
xchg
in
pop
lods
cmps
add
aam
mov
push
es
cmp
fs
xor
push
mov
out
cmps
xchg
inc
neg
or
in
not
cmp
sub
xor
push
push
int3
pop
stos
fcom
jge
js
xor
xor
in
jae
fnstcw
fcomp
icebp
jl
rol
mov
inc
cmc
push
jnp
cdq
loop
sbb
and
mov
test
cmc
mov
sbb
mov
sub
aad
mov
sub
xchg
push
or
jl
mov
push
mov
fs
call
popa
cwde
sbb
lock
inc
popa
lock
and
out
push
jg
cmp
lea
jbe
test
loop
push
lods
adc
in
inc
cmp
mov
xchg
fmul
or
and
dec
mov
jne
and
inc
mov
popf
adc
ffreep
cmps
pop
lods
push
mov
in
loop
aas
and
pushf
jge
jmp
std
clc
add
(bad)
hlt
or
sbb
and
in
jl
in
xor
aam
jg
mov
cmp
dec
js
mov
fnsave
fisttp
dec
or
test
sub
ret
and
cld
mov
test
lods
push
mov
test
jbe
in
and
or
shl
neg
ret
pop
mov
repnz
pop
sbb
mov
add
mov
jne
pusha
loop
push
adc
es
dec
enter
sub
or
add
and
pop
call
fstp
rol
rcl
push
popa
dec
rol
cwde
cmp
xchg
mov
cdq
mov
int3
cmp
pop
in
test
sub
jae
sbb
fcom
sbb
fs
test
sbb
neg
pushf
in
arpl
pop
lock
mov
scas
xor
mov
xchg
fisubr
in
aaa
cmp
sub
mov
mov
inc
mov
int3
mov
int
hlt
fstp
ret
jne
hlt
mov
lea
and
xchg
or
or
add
jmp
fs
(bad)
cs
xchg
leave
mov
fbstp
and
les
call
sbb
xchg
or
fcomp
iret
movs
adc
out
hlt
ja
stos
or
dec
and
mov
jmp
mov
cwde
jns
lods
inc
mov
repz
and
imul
daa
iret
pushf
sub
or
add
or
cmp
push
icebp
test
sti
loop
loopne
adc
imul
add
jne
push
std
cmovnp
dec
push
fcom
xor
cld
mov
inc
sbb
inc
add
jp
jne
dec
popa
mov
mov
ins
inc
push
in
cld
imul
test
ins
push
scas
xor
outs
fsub
push
sti
dec
shr
stos
mov
arpl
bound
ss
shl
jmp
in
mov
idiv
mov
popf
mov
xchg
fst
or
fsub
xchg
ins
lds
call
test
stos
daa
(bad)
cmp
fcomp
sub
adc
sti
int
xor
imul
out
(bad)
xchg
std
test
stc
jb
cmp
cwde
(bad)
fmul
mov
cmp
xchg
repz
inc
mov
add
iret
sbb
call
test
je
out
lock
mov
js
mov
(bad)
mov
add
mov
movs
or
sbb
sub
cmp
fcomi
jne
sbb
cmps
cmp
dec
mov
test
cmp
out
les
(bad)
(bad)
fist
int3
dec
loop
dec
hlt
sub
enter
inc
adc
mov
xchg
mov
jmp
sub
(bad)
fsubr
inc
out
push
ja
scas
jge
mov
mov
mov
movs
(bad)
pop
or
cmps
adc
sbb
sahf
bnd
xchg
mov
cdq
sbb
sbb
daa
jae
js
mov
pop
sbb
cmp
test
sbb
mov
out
push
into
imul
sub
loope
out
js
retf
jl
pusha
in
movs
sbb
loope
out
js
retf
jl
adc
fnstcw
xchg
iret
xor
jl
lahf
mov
xlat
xchg
daa
inc
pop
loopne
outs
leave
inc
cmp
stos
ficom
idiv
popf
xchg
retf
rol
dec
jle
push
mov
sbb
adc
into
add
adc
lods
je
adc
fsubr
fistp
enter
fldenv
shr
fcomp
fild
test
or
xor
cld
sbb
push
fcom
es
dec
enter
leave
xor
and
pop
int
iret
(bad)
shr
loope
outs
pop
and
inc
sub
fbld
xor
mov
xor
sbb
in
xor
clc
or
or
mov
mov
sbb
popf
clc
retf
jo
mov
xchg
int
pop
repnz
jl
xlat
popf
adc
fsubrp
mov
sub
and
sbb
jge
mov
sbb
bound
loope
add
xchg
lds
mov
movs
loopne
xor
jge
push
je
mov
scas
sub
sbb
daa
mov
mov
jne
dec
cwde
movs
jg
iret
data16
sbb
cdq
pushf
loope
stos
test
mov
mov
fdivr
movs
xchg
popf
lds
(bad)
mov
xchg
stos
cdq
dec
fwait
and
popf
cld
push
mov
retf
pushf
jmp
jb
pushf
lock
rcl
pop
ror
test
out
dec
mov
add
cli
adc
mov
jns
aaa
mov
jecxz
out
fst
js
push
inc
mov
test
add
test
pop
pusha
pop
test
xchg
test
call
cmp
das
sar
fdiv
push
add
sbb
xor
and
fdivr
or
mov
lods
jg
in
(bad)
test
dec
fist
jecxz
repnz
sub
adc
neg
pushf
loope
sti
inc
fcmovnb
add
adc
movs
in
out
repnz
fucomi
fst
or
cmp
push
test
in
sub
adc
jo
rol
enter
ss
sbb
mov
call
sub
pop
adc
cwde
retf
and
ds
mov
push
cmps
out
inc
xor
mov
cmovs
fld
fsubr
dec
inc
cwde
xchg
dec
cmps
shl
not
sub
popf
sub
rcl
or
mov
add
sbb
lods
xchg
shl
fsub
mov
mov
adc
test
test
fisttp
push
js
push
inc
stc
(bad)
ds
xchg
dec
sbb
mov
jecxz
fsub
(bad)
movs
xlat
movs
in
xchg
(bad)
and
inc
jnp
loopne
sub
into
pop
in
lds
iret
imul
push
xchg
pop
xlat
loop
inc
jae
push
rcl
jno
aas
enter
test
mov
leave
sub
into
call
(bad)
ss
jmp
xlat
xchg
repz
mov
jbe
xchg
jmp
fidivr
loopne
call
push
lahf
jmp
dec
fdiv
cmps
or
add
rcr
cmps
or
xchg
jmp
adc
out
std
pop
sub
fdivrp
pop
cmp
xchg
mov
sbb
jl
cld
inc
mov
aad
adc
or
jno
and
test
xor
lahf
imul
add
out
push
add
sub
cmps
mov
movs
std
jb
xlat
inc
ret
iret
adc
rcl
jns
pushf
(bad)
and
and
adc
mov
mov
sbb
adc
out
arpl
push
push
cdq
gs
jmp
pop
(bad)
(bad)
stos
mov
gs
jg
out
test
pop
xchg
iret
add
xor
sub
lea
lods
les
lahf
jl
push
push
pop
fwait
pop
adc
ret
arpl
movs
pop
movs
fistp
pop
movs
push
ret
cmps
scas
mov
or
(bad)
shl
shl
loop
imul
xchg
push
test
arpl
or
mov
inc
sbb
je
mov
out
neg
out
test
lds
dec
cmp
jl
cmp
sbb
push
fiadd
aam
repnz
adc
adc
dec
mov
pushf
mov
(bad)
jecxz
jno
arpl
mov
les
lock
icebp
fnstsw
xchg
jmp
fidivr
scas
mov
ret
sbb
xchg
lods
inc
leave
jl
loop
dec
test
std
pop
adc
lock
xchg
scas
jno
jp
mov
cmp
faddp
sbb
cmp
cli
inc
out
loop
out
mov
cmp
adc
jge
sti
mov
icebp
aam
push
je
cmp
lahf
mov
cmps
movs
test
mov
mov
clc
inc
add
cmps
sti
pop
jmp
sbb
xor
mov
sbb
fcmovb
loope
sbb
or
test
fcomp
and
imul
movs
(bad)
sahf
(bad)
movs
mov
pushf
mov
movs
cwde
sbb
loop
sbb
jecxz
and
mov
movs
test
ins
iret
(bad)
mov
movs
js
pop
cmp
xor
dec
int3
enter
cmc
mov
sub
push
icebp
jecxz
and
into
sbb
or
das
aas
jge
pop
test
aas
jbe
cmp
mov
jecxz
xchg
out
nop
mov
sahf
xchg
call
lahf
cmc
and
xchg
pop
and
mov
ret
adc
test
nop
cmp
movs
iret
in
or
out
push
xlat
sub
cdq
add
mov
xchg
or
(bad)
adc
test
in
jmp
fninit
mov
cld
cmc
and
jmp
aad
jg
mov
test
loop
mov
je
xchg
loope
fcmovnu
fsub
in
jno
nop
cmc
add
xchg
inc
xchg
aad
clc
xlat
cld
ins
idiv
scas
out
add
jns
(bad)
push
cdq
aam
adc
retf
add
jl
stos
sbb
mov
ffreep
xchg
das
rcr
loope
or
int
pushf
jmp
jecxz
mov
jbe
cmp
jecxz
(bad)
jge
pusha
jmp
pop
dec
sti
sahf
cld
pusha
or
dec
(bad)
iret
lds
mov
test
mov
or
mov
add
push
jle
in
in
(bad)
int
mov
jno
icebp
jmp
jp
lods
fwait
cld
loopne
jge
fs
cs
mov
jmp
(bad)
and
mov
aas
js
push
mov
loop
outs
aas
icebp
sbb
or
fnsave
test
xchg
je
call
hlt
ins
test
sbb
call
scas
dec
inc
and
pop
sbb
into
popf
sahf
mov
sbb
jae
mov
imul
lods
cwde
xsha256
cmps
aam
jge
or
fcomp
call
clc
aam
jne
test
dec
test
cmp
jge
xlat
adc
adc
mov
mov
sbb
sbb
mov
mov
stc
movs
push
sbb
xchg
lds
mov
mov
(bad)
aam
stc
sub
hlt
(bad)
test
cmp
mov
nop
mov
mov
ds
mov
mov
jbe
fwait
rcr
push
fwait
ret
cli
test
repz
inc
aam
mov
(bad)
pushf
inc
xor
push
pop
and
movs
push
(bad)
stos
mov
sbb
mov
mov
dec
movs
call
mov
pop
movs
rcr
fdivr
pushf
loope
fcomp
js
mov
sbb
fnstenv
stos
call
pop
movs
test
or
add
sahf
or
and
mov
push
sbb
inc
dec
out
stos
mov
movs
or
movs
repnz
pop
sbb
jb
std
call
cli
mov
lock
test
cld
fs
sbb
sbb
or
call
(bad)
mov
mov
mov
pop
mov
jnp
pushf
xchg
scas
dec
pop
dec
sub
nop
xchg
mov
mov
xchg
xor
cmps
in
in
cmp
lods
stos
or
enter
mov
add
(bad)
stc
cwde
mov
add
push
cmc
call
int3
mov
hlt
jmp
in
and
add
int3
cmp
sti
(bad)
pushf
loopne
ret
stc
test
pop
movs
(bad)
mov
cld
(bad)
call
jo
mov
jbe
adc
idiv
add
jl
mov
add
shr
or
adc
bound
arpl
mov
shl
std
jmp
add
cli
in
sbb
sub
mov
rol
push
fwait
sbb
retf
js
pop
jmp
inc
xchg
out
mov
adc
lds
adc
mov
(bad)
push
mov
leave
pop
pushf
mov
mov
xchg
fsubr
sub
cmp
inc
push
cmp
fldenv
pop
lods
xlat
rcr
popa
and
adc
movs
xchg
mov
in
mov
ret
mov
xor
(bad)
fcomp
and
mov
fdiv
movs
shl
lock
aad
sbb
push
in
mov
or
js
adc
adc
sbb
add
div
pop
mov
push
mov
lds
sar
push
mov
or
add
les
and
neg
pushf
adc
pop
mov
sub
lods
test
lods
data16
jno
sbb
and
pop
jno
stc
push
mov
pushf
pop
jo
and
mov
push
inc
sbb
repz
mov
and
fcmovbe
adc
adc
nop
xor
mov
nop
jge
nop
sub
or
inc
inc
or
mov
mov
enter
pushf
mov
aad
mov
mov
lods
mov
cli
sbb
mov
push
rcl
jmp
mov
sbb
jne
rcl
jl
fld
sbb
mov
fsub
adc
dec
xor
(bad)
mov
clc
pop
xor
mov
cmc
adc
stc
out
retf
sbb
mov
lock
inc
scas
mov
in
sti
inc
push
stc
into
xor
aam
popf
movs
test
fcom
or
shl
popf
test
cmp
movs
(bad)
adc
(bad)
movs
sub
mov
xor
jns
lea
test
push
mov
rcl
mov
jl
je
jge
or
movs
pushf
pushf
out
pop
ret
or
fistp
int3
xchg
pop
pop
rcr
test
cmps
add
pop
mov
rcl
adc
dec
and
sbb
inc
movs
out
imul
movs
je
jns
fwait
cs
leave
cmc
movs
and
mov
es
mov
lods
cmp
mov
dec
shl
or
call
sub
arpl
pop
mov
lds
jle
or
sub
xor
ss
pop
sbb
popf
iret
cmps
cmps
push
out
hlt
outs
test
stos
lods
xchg
dec
jbe
pushf
aam
and
out
sbb
jae
sbb
(bad)
mov
movs
ret
dec
inc
in
mov
test
call
enter
cld
mov
stc
mov
arpl
mov
movs
ficom
icebp
or
call
ss
inc
xchg
sbb
enter
and
push
or
dec
cdq
pop
sbb
movs
ds
jbe
dec
sub
mov
sar
add
out
mov
jo
cmps
cmps
and
cdq
or
mov
sbb
pushf
and
xchg
xchg
sbb
fiadd
sub
shr
test
enter
lods
out
or
add
sbb
push
push
icebp
pusha
dec
jl
sub
mov
mov
push
mov
out
cmps
push
mov
cwde
jmp
and
ss
movs
mov
sub
jl
cli
jp
sbb
fs
bound
and
inc
cwde
sbb
out
sbb
sbb
cwde
pop
pop
cmp
repz
cmp
loopne
cwde
ret
sbb
jmp
pop
mov
mov
cwde
in
xor
sti
sbb
cmp
inc
mov
das
adc
out
in
mov
sub
adc
cmp
mov
inc
test
(bad)
sub
stos
cmp
fisubr
popf
repz
adc
cmps
stos
icebp
repz
mov
lahf
dec
dec
cdq
xchg
mov
stc
lods
pop
shr
out
cmp
fist
adc
lahf
test
mov
cld
inc
fs
stos
sbb
arpl
mov
xor
test
rcl
retf
cmp
pusha
call
dec
sar
adc
loop
sub
fst
in
cli
cdq
ins
jg
inc
cmp
jb
int3
mov
sbb
pop
mov
mov
inc
xchg
or
fnstsw
in
(bad)
int3
(bad)
and
int3
clc
in
xor
xchg
xlat
stos
(bad)
clc
es
pop
sub
div
test
popf
cmp
mov
repnz
xor
mov
movs
js
cmp
push
outs
mov
test
das
pop
sbb
lods
(bad)
jno
or
sub
adc
fnsave
aam
jno
repz
lods
(bad)
sahf
push
rcl
push
scas
adc
sub
stc
mov
inc
xchg
sbb
movs
imul
pop
xchg
popf
mov
sub
pusha
jbe
mov
das
pop
movs
lods
imul
scas
adc
and
sbb
shl
lods
xor
dec
rcr
add
mov
fwait
mov
cmps
push
add
nop
loope
test
push
pop
inc
push
mov
scas
sub
icebp
and
sbb
mov
mov
repz
cmp
mov
test
push
xor
cdq
loope
push
(bad)
jns
mov
movs
sbb
rcr
out
in
and
sbb
pop
sbb
int3
call
sub
cld
jb
imul
test
adc
pop
or
gs
add
mov
ret
inc
mov
fbstp
shl
retf
xchg
inc
ror
mov
fidivr
out
add
in
jbe
mov
sar
adc
lods
movs
xchg
mov
out
cmp
sub
or
pop
xor
xchg
retf
push
fist
jl
icebp
add
ds
addr16
or
mov
cld
mov
inc
push
sbb
in
out
loop
fst
jl
outs
sar
and
push
inc
xchg
shr
push
or
cmp
add
ret
inc
pop
in
arpl
xor
xchg
loope
pushf
nop
ret
jl
lods
sub
push
mov
movs
popf
jle
xchg
lea
pushf
fstp
into
inc
ins
jae
sbb
inc
mov
les
movs
pop
mov
xor
clc
loope
in
mov
lock
mov
cmc
test
fstp
push
ffree
jb
sbb
fimul
lahf
sbb
popf
call
xor
cwde
popf
out
out
add
fdiv
sti
les
inc
(bad)
xchg
fisub
push
test
inc
inc
outs
stos
sbb
push
jb
push
xchg
cmp
(bad)
cwde
push
mov
enter
daa
lods
cmp
aam
xchg
ficomp
push
nop
fld
popf
mov
mov
xchg
les
cmp
retf
call
and
pushf
adc
hlt
ss
imul
lods
pop
ins
nop
push
ret
jb
push
loop
mov
jle
mov
rep
enter
fwait
ror
sub
push
mov
ss
push
ret
aaa
nop
stos
shr
out
lea
pop
int3
pop
xchg
(bad)
ss
cmc
dec
sub
(bad)
cdq
(bad)
cmc
not
jne
fwait
dec
adc
(bad)
sbb
adc
sbb
je
pop
ss
and
(bad)
push
ja
movs
cmc
fwait
sbb
cmp
es
shl
(bad)
mov
adc
mov
pop
push
in
fs
cmp
movs
stos
xor
lock
mov
jle
call
dec
(bad)
popf
ror
xor
pop
xchg
clc
or
js
jp
sub
out
adc
dec
adc
call
cli
xchg
or
sub
lods
(bad)
in
jno
dec
xor
test
jg
mov
sbb
push
adc
sub
mov
mov
rcr
fs
ret
iret
(bad)
lods
test
sahf
mov
jl
pop
into
mov
lods
movs
xchg
mov
and
movs
test
adc
jb
jecxz
leave
out
mov
mov
mov
repz
push
(bad)
loopne
rcr
sbb
or
leave
dec
cmp
arpl
jns
ret
dec
int3
cmp
pusha
lods
in
jne
sti
movs
lahf
jbe
(bad)
and
cli
xchg
ja
inc
ja
mov
iret
iret
retf
xchg
cmps
jl
repnz
mov
(bad)
jge
sub
sbb
fist
mov
cmp
idiv
inc
mov
in
fmul
push
ins
call
lods
test
cld
adc
cmp
(bad)
ins
jmp
adc
jge
in
mov
sahf
bound
ror
jecxz
lock
(bad)
scas
cs
sub
inc
mov
dec
fs
test
in
pushf
clc
sbb
pop
sbb
loop
sbb
fsub
cmc
scas
push
int
ret
add
mov
out
adc
pop
stos
and
push
ficomp
mov
mov
dec
mov
push
(bad)
fld
inc
pop
inc
popf
cmps
xlat
das
xchg
xchg
(bad)
ins
mov
mov
inc
fstp
retf
popa
xchg
mov
mov
ins
test
lods
sbb
sub
mov
mov
sbb
pop
int
int3
mov
lods
loop
mov
mov
out
xchg
popf
ss
movs
pop
fmul
pop
adc
cmp
jl
nop
fstp
rol
gs
loopne
jecxz
or
movs
icebp
jl
and
mov
push
pop
or
sbb
bound
jbe
call
int
mov
iret
mov
inc
into
mov
loopne
push
ja
sbb
sub
movs
jno
std
aam
or
push
pop
cs
jle
in
movs
sbb
loope
xchg
mov
scas
and
nop
adc
out
sbb
(bad)
imul
repz
cld
test
mul
add
cli
mov
test
jnp
sbb
cmc
add
or
sbb
ds
sbb
sbb
or
lahf
and
aad
inc
mov
popf
mov
and
stos
ret
xor
test
std
or
push
(bad)
scas
popf
rcr
mov
aas
pushf
aas
(bad)
(bad)
out
(bad)
outs
int
mov
fnstcw
mov
sbb
jnp
call
mov
xor
mov
jg
xchg
xchg
scas
sub
jle
xor
xor
sar
inc
mov
std
jb
or
add
fwait
pop
call
sub
(bad)
(bad)
popf
push
les
jg
loope
test
lahf
mov
jg
int3
mov
movs
mov
push
mov
push
mov
nop
mov
sbb
repnz
xchg
jmp
add
cmp
fmul
mov
jl
mov
bnd
(bad)
xchg
out
cmp
mov
dec
push
jae
out
(bad)
cmps
or
inc
mov
call
mov
out
sub
pop
jl
jl
jg
dec
xor
out
cdq
mov
inc
dec
test
out
cmps
fcomp
fidiv
mov
push
jne
movs
iret
xchg
loop
jnp
pushw
cmp
cmp
inc
outs
jecxz
pushf
sti
shr
add
popf
les
pop
cs
mov
mov
mov
pop
pushf
ja
mov
rcr
lahf
mov
js
mov
cmp
or
adc
push
outs
jg
daa
ins
fcmovb
and
aam
xchg
and
fs
cwde
shl
sahf
xchg
sbb
mov
out
pop
sahf
and
mov
out
enter
mov
movs
jb
ins
xor
jnp
mov
loop
popa
stos
in
push
or
cmps
fwait
shl
pushf
pusha
shr
rcl
rcl
call
ret
xor
inc
jbe
iret
jns
and
lahf
mov
inc
push
pop
sub
mov
xchg
and
jecxz
fisttp
jg
mov
push
mov
fstp
sub
push
jg
pop
outs
cmps
or
das
dec
clc
cwde
sbb
loopne
popf
out
jno
shl
mov
pop
and
jo
test
dec
sti
loopne
jl
outs
mov
mov
add
adc
push
mov
fxtract
push
mov
xlat
sub
mov
adc
stos
ret
mov
test
mov
mov
in
lock
sahf
adc
mov
pop
mov
popf
ret
and
clc
sub
loopne
xchg
aam
jge
imul
and
jae
dec
lds
bound
fidivr
mov
movs
push
sbb
pop
sbb
inc
movs
push
lods
sub
fsubr
jg
or
cli
cmps
inc
movs
adc
out
stc
cmp
jae
or
shr
adc
push
cmps
pop
ja
ss
aam
(bad)
push
jmp
stos
shl
call
repnz
jle
stos
sbb
retf
sti
xlat
das
test
xor
mov
jecxz
xchg
and
cmps
and
mov
lea
lock
mov
jns
shl
sahf
mov
mov
mov
jp
dec
out
(bad)
mov
movs
lea
add
jnp
outs
in
ficom
stos
retf
push
jo
xchg
xor
bound
enter
cmp
(bad)
adc
mov
mov
mov
and
add
test
sbb
xchg
(bad)
in
dec
xchg
mov
adc
jecxz
inc
and
jg
dec
sbb
dec
push
jecxz
push
adc
fistp
jl
and
xchg
push
and
xchg
sbb
imul
jo
shr
add
das
cmp
test
aad
pusha
and
pop
cmps
aad
mov
not
xchg
and
cmp
test
mov
call
fmul
(bad)
ds
mov
in
out
out
push
mov
lahf
repz
sti
adc
cmp
pop
xor
inc
in
ror
sahf
cmp
jbe
adc
cmps
xchg
add
out
mov
mov
jg
inc
in
scas
mov
mov
mov
or
jmp
sbb
mov
push
push
loope
push
fcomp
cld
je
mov
xchg
cwde
or
iret
jnp
push
rcr
mov
aad
push
mov
mov
xor
jnp
sub
stos
cmp
mov
jbe
and
sbb
mov
(bad)
sbb
xchg
mov
xor
js
mov
test
aad
mov
inc
and
movs
pushf
and
mov
popf
push
out
aam
push
aas
adc
xchg
rol
int3
mov
and
cld
jl
mov
xchg
mov
(bad)
fidiv
mov
push
mov
jmp
xchg
fsub
out
mov
inc
loopne
sub
sbb
mov
mov
mov
ins
icebp
mov
sub
pop
fcomp
js
rcl
sbb
imul
mov
fsub
pushf
jle
data16
aam
ins
mov
(bad)
xchg
pop
inc
jbe
mov
cmps
jecxz
movs
and
xor
sub
xchg
pop
or
call
mov
dec
rcl
sbb
call
sub
int
fcom
mov
pop
pushf
shl
xchg
push
cmps
pop
adc
jge
push
ss
jne
sbb
sar
pusha
cmc
in
repnz
pop
sub
sbb
jle
sbb
fcom
or
aad
push
(bad)
xchg
iret
cmp
mov
or
cmp
sbb
jl
inc
jg
or
mov
mov
jg
repnz
in
scas
lds
and
jo
sub
lahf
mov
fcmovnbe
jl
in
inc
test
mov
test
jl
cmp
int3
movs
xchg
popf
or
mov
call
mov
jl
jbe
cmp
scas
pop
sbb
xchg
add
cmp
cmps
cmp
hlt
sbb
cmps
movs
aam
iret
(bad)
mov
jecxz
sub
in
(bad)
out
mov
mov
in
sbb
ins
jbe
jmp
dec
add
or
cwde
pop
int3
ficomp
lea
or
mov
pusha
push
jl
in
fist
lahf
push
pop
rcr
mov
call
(bad)
sbb
dec
fisttp
lods
jl
(bad)
icebp
mov
mov
push
xchg
add
loopne
inc
stos
pop
popf
stos
or
adc
sub
or
push
mov
cdq
iret
icebp
mov
jg
xor
pop
ret
call
inc
jo
and
popf
sbb
dec
fsubr
pop
push
mov
push
lds
jl
dec
shl
xchg
mov
adc
pushf
xchg
in
out
imul
stos
fs
daa
movs
pop
xchg
shl
adc
cmp
outs
cwde
jl
mov
push
gs
cmp
mov
fistp
dec
lahf
out
sub
jmp
inc
les
cmp
cmp
mov
lods
pushf
push
aad
scas
into
or
in
sbb
cwde
fstp
inc
xchg
inc
sub
aad
push
jns
mov
or
mov
retf
int3
adc
(bad)
add
and
ficom
sbb
and
fdiv
sbb
pop
jl
stc
stos
sbb
mov
dec
clc
retf
xlat
out
stos
cmps
push
fcomp
test
xchg
scas
mov
and
xchg
sub
pop
rep
sub
xor
add
pop
pusha
cmps
leave
loopne
rol
rcr
js
stos
jmp
lahf
jl
xchg
imul
enter
rcr
ret
out
jg
lods
or
push
or
mov
dec
adc
xchg
adc
loop
ins
lods
fsubr
shl
movs
ins
mov
mov
(bad)
nop
mov
xchg
pop
ds
dec
and
mov
movs
or
loope
pushf
adc
(bad)
cli
xor
mov
push
lods
mov
movs
movs
(bad)
mov
fcomp
add
or
test
and
fmul
movs
mov
fadd
aaa
aam
shl
cmp
loope
test
xchg
ror
mov
jo
cmp
sbb
fwait
cmps
fs
sbb
jmp
test
cld
mov
xchg
cwde
or
jnp
enter
imul
lea
xchg
sbb
mov
mov
cwde
jb
adc
lods
fiadd
xchg
enter
and
add
clc
imul
fld
fwait
test
dec
and
rcr
aam
add
sbb
sub
push
mov
sub
jp
pop
fs
test
mov
leave
push
ret
jne
sbb
and
mov
dec
pop
push
div
adc
(bad)
push
cmp
jnp
mov
test
add
xor
fisttp
sbb
xor
xchg
xor
int3
or
icebp
(bad)
call
jl
cmps
inc
xchg
push
jnp
lods
paddb
nop
pusha
xor
sbb
scas
xlat
cld
pop
call
(bad)
test
movs
and
into
pop
jl
jecxz
ds
xor
dec
call
popa
dec
jno
mov
mov
(bad)
jecxz
adc
and
out
inc
retf
call
mov
jecxz
ficomp
or
and
jb
pop
loopne
inc
or
xchg
popw
adc
loop
test
jecxz
lds
les
push
jl
jg
xor
popa
pop
cmp
or
(bad)
mov
in
mov
aaa
sub
cmp
push
dec
cld
inc
lea
mov
xchg
in
imul
sub
arpl
sar
in
jbe
sbb
push
sbb
dec
cmp
daa
push
pop
mov
sbb
call
jnp
and
inc
loopne
jl
mov
inc
test
mov
bound
int3
dec
sbb
inc
jmp
xor
addr16
or
add
loop
mov
xchg
aam
ins
or
pop
or
dec
mov
ss
sub
fdivr
rcl
xchg
sbb
add
or
pop
sahf
test
ficomp
rcl
js
fstp
and
cwde
adc
xchg
mov
rol
pop
out
pop
inc
sub
dec
ins
shr
jl
adc
pushf
dec
in
call
sbb
mov
sti
lock
sbb
jmp
mov
loopne
rcl
and
mov
pushf
mov
cli
sbb
inc
out
cmps
bound
push
lahf
fild
xchg
jns
mov
popf
call
jge
mov
fwait
imul
stos
fmul
pop
daa
and
mov
out
adc
xchg
push
mov
pop
(bad)
ss
sar
(bad)
out
sbb
mov
popa
out
push
dec
jns
cmps
repnz
add
mov
sbb
shl
or
mov
(bad)
arpl
push
pushf
sub
xor
fist
in
fisttp
pop
xor
inc
mov
mov
(bad)
in
sahf
fiadd
adc
iret
lock
pop
mov
xchg
adc
dec
in
dec
sbb
jl
stc
sbb
mov
cmps
jge
cwde
inc
popa
mov
dec
nop
pop
jmp
mov
mov
push
adc
clc
icebp
sbb
cmp
shr
inc
in
cmp
cli
mov
jl
mov
test
lods
mov
mov
mov
cld
sub
pushf
inc
mov
fistp
sbb
cwde
sbb
jl
mov
mov
inc
mov
out
jl
loope
xor
pushf
push
add
xchg
mov
lock
fld
shl
test
dec
ss
xchg
inc
cmps
pop
xor
pop
cmp
or
jg
in
cwde
pop
in
call
lock
popf
sbb
cld
aad
cld
movs
xchg
adc
mov
push
add
daa
or
dec
sub
jl
(bad)
ffree
xchg
lods
(bad)
pop
mov
fldenv
sub
dec
ds
push
mov
daa
and
sub
aaa
mov
movs
adc
(bad)
out
shl
adc
mov
add
enter
les
or
sbb
sbb
xchg
inc
lods
jl
imul
scas
mov
ins
xchg
(bad)
int
xchg
mov
shl
setle
mov
repnz
mov
js
jl
call
jl
mov
xor
clc
outs
adc
xlat
or
into
sbb
jbe
pushf
push
sub
push
ret
cld
push
call
sbb
test
sub
cdq
lods
and
scas
push
cdq
popa
fsub
(bad)
std
xchg
inc
lods
mov
mov
not
gs
ret
cmp
lds
cli
sbb
(bad)
sbb
mov
xchg
(bad)
jle
fs
mov
test
lgs
or
inc
mov
xlat
in
sbb
dec
clc
fistp
addr16
lds
imul
ret
sbb
mov
sub
push
mov
mov
movs
add
fdivr
out
pop
(bad)
sbb
dec
inc
xor
jno
shl
mov
push
sbb
jecxz
jno
ror
mov
(bad)
in
fistp
jge
cmp
xor
in
fcomp
mov
jo
pop
inc
sti
lea
in
cmp
retf
ffree
fadd
cwde
out
repz
movs
mov
dec
mov
pop
inc
xor
adc
out
ja
push
mov
cdq
mov
jnp
(bad)
neg
shl
xor
cli
mov
scas
mov
mov
nop
push
fild
sbb
mov
je
loop
les
inc
jl
retf
mov
(bad)
jmp
sahf
fucom
scas
mov
lods
out
int3
daa
mov
stc
add
jmp
sti
cwde
push
in
or
sub
dec
ins
xor
into
add
jle
ret
idiv
repz
movs
dec
pushf
sti
call
movs
enter
fcomp
mov
int3
sar
scas
mov
ret
adc
mov
(bad)
les
jge
adc
int3
jae
lods
(bad)
xlat
repnz
pop
sar
and
sbb
fs
cmp
mov
xor
mov
mov
sbb
fsubr
mov
sub
jl
mov
(bad)
loopne
cmps
js
shr
sbb
mul
sbb
adc
pop
sahf
sbb
pushf
mov
xchg
movs
mov
sahf
pop
call
jmp
(bad)
int3
int3
mov
xchg
jae
dec
jbe
jp
mov
mov
test
mov
in
mov
jne
repnz
mov
mov
int3
mov
jnp
or
pushf
mov
movs
add
jl
daa
fsubr
xor
movs
fdivr
sbb
ror
add
mov
mov
int
push
fstp
cmps
push
xchg
and
ins
jmp
int
pop
sub
and
and
rcr
pop
test
pushf
cmc
inc
(bad)
sbb
aam
mov
pop
outs
mov
retf
ror
mov
in
shl
pushf
jb
jo
jecxz
cmp
adc
jb
xor
pop
movs
test
pushf
sahf
jnp
in
mov
stc
push
cli
xor
mov
popf
repz
fistp
ins
dec
les
cwde
cmp
enter
scas
in
scas
mov
cwde
jmp
cwde
in
push
mov
nop
into
mov
shl
cld
cmp
cmps
test
inc
and
getsec
test
jbe
lods
aam
int3
wbinvd
(bad)
(bad)
xor
pop
jbe
movs
sub
mov
mov
adc
shl
dec
scas
movs
lock
jne
rep
js
in
sti
mov
(bad)
popf
sub
mov
mov
(bad)
movs
pushf
hlt
sbb
fld
fdiv
adc
js
xlat
outs
pop
inc
repz
movs
test
jne
pushf
rcr
xor
jbe
rcl
jge
xor
aam
movs
inc
movs
jo
xor
aaa
inc
push
movs
ret
xor
dec
fcom
or
lods
je
or
mov
and
pop
dec
hlt
inc
and
push
js
push
mov
mov
jmp
pop
iret
lods
pop
push
les
int
add
mov
pop
jmp
mov
or
cmp
mov
mov
mov
sub
ss
mov
pushf
fdiv
mov
call
add
add
test
sub
and
out
and
fs
fdivr
sbb
stc
loop
sbb
xor
movs
xor
ret
push
in
adc
mov
xor
shl
dec
loop
sbb
add
jl
dec
not
popf
stos
or
mov
mov
xchg
nop
ficom
mov
test
push
pushf
shl
lahf
jg
sub
and
mov
mov
iret
sbb
mov
call
sbb
push
out
sbb
mov
push
mov
add
sar
pop
int3
pushf
pop
stos
fld
inc
(bad)
mov
mov
jl
mov
mov
mov
stc
or
cmc
adc
(bad)
mov
rcl
rcl
pop
stos
popf
in
xchg
xor
mov
push
or
ret
in
fucomip
popf
aam
sub
cmp
mov
jmp
fsubr
mov
loop
out
in
inc
jmp
pop
xchg
in
test
add
enter
fs
pop
fcom
clc
dec
rol
mov
jne
xor
mov
ror
into
in
movs
mov
stc
jmp
pop
adc
xchg
mov
pop
test
dec
ds
and
(bad)
das
and
shl
in
in
cdq
sbb
fdivr
cdq
add
iret
rol
(bad)
cld
xchg
pop
cs
jl
cmp
or
mov
js
test
push
or
sti
outs
ja
ins
das
jb
mov
cwde
jmp
aas
xchg
push
and
xchg
sub
das
pop
pop
(bad)
push
test
outs
sbb
scas
(bad)
imul
push
imul
out
sti
add
fs
imul
jae
pushf
sbb
psubw
fimul
fadd
or
mov
loopne
push
add
pop
stos
fcomp
pop
inc
mov
inc
(bad)
sub
jno
nop
mov
stc
cmps
pushf
and
dec
mov
push
adc
xor
cmp
int3
sbb
std
fmul
pusha
aam
call
jmp
cmp
jb
(bad)
(bad)
mov
push
lahf
lahf
jl
cld
nop
jmp
mov
sbb
push
sar
rcr
xchg
mov
int3
dec
inc
shl
aad
fmul
mov
test
fld
dec
and
bnd
jg
jae
pop
sub
std
pop
cmp
daa
pop
lods
fbld
cmp
movs
je
data16
ss
dec
and
fsub
dec
out
cmps
movs
mov
pushf
(bad)
mov
cld
ror
movs
add
sub
mov
jecxz
add
fadd
(bad)
dec
clc
movs
call
scas
xlat
jne
stos
pop
cli
paddsw
enter
test
add
sahf
push
jl
cmps
and
sbb
pop
and
sub
add
out
mov
sbb
pop
push
mul
lds
and
js
enter
mov
lods
mov
xor
sbb
(bad)
in
mov
pop
mov
js
imul
jl
xor
movs
xor
pop
dec
push
mov
jecxz
ret
lods
rol
and
pop
push
rcr
fwait
jl
loope
sbb
loopne
sbb
adc
test
mov
ss
leave
push
jmp
cmps
aas
and
sbb
inc
dec
inc
mov
pop
shl
adc
pop
lock
inc
hlt
sahf
xchg
adc
or
dec
mov
outs
movs
dec
sbb
rol
or
pop
js
dec
mov
ins
dec
lods
outs
inc
fadd
or
xor
popa
mov
inc
dec
pusha
pushf
mov
add
mov
adc
mov
in
mov
pushf
inc
mov
sahf
cmps
lahf
mov
mov
pushf
ins
test
rol
ret
add
lock
mov
mov
test
mov
shr
or
push
adc
pop
mov
push
fsub
xor
std
jmp
sahf
rol
sbb
cmps
ror
ror
xchg
push
(bad)
clc
add
stc
add
mov
sbb
aad
sub
pushf
cmc
in
mov
mov
call
retf
add
or
je
sbb
mov
or
stc
(bad)
int3
add
add
jo
int3
pop
push
adc
test
or
cmp
sub
cmps
fs
add
and
jno
mov
add
(bad)
xor
retf
cmp
xor
stos
adc
mov
cli
push
inc
lds
jge
jne
or
in
sub
cmp
ins
xor
adc
das
int
int3
(bad)
pushf
mov
inc
jo
or
imul
ffree
jl
cmp
adc
rcr
pop
mov
mov
pushf
jns
lods
inc
cwde
push
(bad)
shr
and
push
push
add
fmul
popa
and
xor
call
fcomp
ins
pushf
adc
addr16
pushf
jae
loope
xor
xor
fld
cmp
(bad)
pop
sahf
movs
and
cmp
xlat
sbb
pop
xchg
fadd
mov
pushf
mov
imul
mov
les
(bad)
sbb
je
add
call
xor
jnp
dec
cdq
mov
pushf
mov
pop
sbb
out
ins
mov
push
test
mov
leave
loop
push
push
adc
clc
arpl
jae
out
cmps
sahf
pusha
cli
in
gs
movs
sbb
mov
mov
jl
(bad)
movs
dec
lahf
mov
xchg
inc
adc
sub
fist
sbb
cmps
jne
(bad)
fsub
pop
xchg
repnz
xchg
das
add
cld
cmp
pusha
mov
imul
xor
mov
(bad)
test
push
or
int
jmp
push
stc
or
sar
or
leave
adc
loope
lock
cld
mov
int3
shr
fldcw
ret
cli
idiv
shl
std
add
nop
enter
push
inc
push
mov
stos
lahf
adc
xor
adc
stos
mov
retf
mov
dec
mov
or
shl
push
(bad)
retf
mov
pop
xor
stos
in
push
imul
mov
jecxz
pop
fisub
mov
mov
add
mov
fcmovbe
clc
mov
inc
add
jne
fs
int3
(bad)
pop
fimul
cmp
pusha
mov
stos
int3
fistp
mov
fdivr
and
mov
inc
ds
movs
iret
mov
xor
jmp
pop
mov
push
rcl
mov
movs
xlat
pop
mov
push
sbb
in
loop
fmulp
mov
pushf
push
std
jecxz
in
cwde
xchg
fs
call
lods
mov
or
sbb
cmp
clc
or
adc
fadd
test
ja
stos
and
mov
jmp
iret
xlat
ficom
and
fcom
mov
ror
push
push
and
shr
xor
sti
ret
in
shl
inc
aaa
mov
ficom
in
xor
jle
sbb
xchg
js
(bad)
popf
xchg
mov
aas
and
or
retf
inc
mov
dec
lahf
add
hlt
jle
sahf
pop
cmps
cld
pop
mov
mov
mov
push
sub
pop
sbb
sub
loopne
popf
sbb
and
aad
push
pop
jge
push
dec
mov
(bad)
or
jecxz
xor
(bad)
ins
movs
and
mov
rcr
cmps
jae
(bad)
and
daa
popf
in
mov
cmp
jp
adc
xor
adc
lods
(bad)
ins
ins
xor
fadd
jg
mov
pushf
sbb
pop
sti
cmps
cmp
sbb
adc
fs
(bad)
pop
dec
push
fild
sar
ret
scas
xchg
clc
fdivr
mov
(bad)
pop
mov
pusha
cmp
push
dec
ja
in
pop
adc
mov
ds
cmc
pushf
mulps
xchg
pop
pop
cmps
pop
rol
(bad)
push
push
and
rcr
dec
mov
pop
pushf
call
fsubp
xlat
xor
sub
sub
cli
retf
xchg
ds
adc
cs
loopne
sbb
call
xchg
sbb
jmp
pop
push
pusha
xchg
and
sub
mov
movs
xchg
pop
mov
(bad)
dec
pop
and
add
sbb
or
movs
xor
movs
push
shl
cwde
test
jbe
test
mov
mov
ins
data16
sar
bound
fcomp
je
mov
stos
xor
adc
inc
dec
cmc
out
jae
sahf
(bad)
std
mov
mov
iret
ds
cmps
inc
leave
mov
xchg
pushf
lods
ret
jp
xchg
inc
repnz
push
pop
mov
or
js
je
dec
fmul
fnstenv
retf
inc
pop
xor
retf
std
push
cmp
jge
push
sbb
fsub
push
fwait
mov
pushf
push
jmp
sbb
cld
cwde
mov
adc
fiadd
cdq
xor
ret
jmp
lahf
jge
push
cmp
fdiv
lods
popa
clc
inc
sbb
movs
sbb
lds
add
jg
adc
xchg
pop
fnstenv
sbb
sbb
loope
xor
mov
mov
stos
cwde
adc
dec
ror
idiv
mov
dec
or
xchg
dec
add
sahf
lock
xchg
enter
cmp
aad
push
pop
scas
movs
mov
add
jl
repz
mov
inc
push
lahf
sub
and
stc
imul
hlt
pushf
add
xlat
ins
aad
adc
lods
sbb
xlat
push
mov
sbb
mov
aam
jl
jecxz
xchg
cwde
push
cmp
inc
mov
rcl
das
das
sbb
es
mov
push
mov
(bad)
cmps
or
xchg
and
cmp
inc
sub
fstp
sub
push
outs
fs
xchg
les
xor
sbb
lds
sbb
add
jl
fisubr
dec
mov
pop
mov
cmps
inc
pop
push
jg
imul
mov
jmp
push
push
or
lods
mov
jle
mov
mov
loopne
and
arpl
push
jge
mov
repz
in
xchg
mov
rcr
adc
(bad)
push
stos
retf
and
mov
call
dec
lods
inc
adc
stc
xchg
mov
clc
gs
pop
movs
out
sbb
(bad)
cli
cmp
cmp
cmp
lock
mov
cld
cld
adc
movs
(bad)
rcl
jbe
mov
add
jmp
dec
adc
ror
call
in
xor
adc
push
fs
out
push
or
into
int
mov
push
int
inc
nop
pop
jecxz
dec
jl
pop
jne
nop
push
jnp
pop
push
ret
rcr
adc
sbb
inc
(bad)
xchg
push
aas
push
jbe
pop
push
inc
int3
dec
push
jp
jns
add
les
test
loopne
enter
ret
int
ret
enter
cmp
loope
pop
or
pushf
iret
pop
(bad)
movs
test
(bad)
lods
movs
(bad)
pushf
mov
jne
test
lock
push
sub
adc
cmp
pop
and
fdivr
or
fcomp
cmp
out
in
push
push
push
sub
jo
inc
fadd
mov
dec
test
ja
pop
and
std
xchg
jbe
or
adc
pop
(bad)
in
mov
xor
inc
jl
ficomp
pushf
adc
out
or
cld
push
sbb
repz
scas
pusha
push
pop
pop
sbb
cmc
retf
add
out
inc
jecxz
movs
(bad)
fild
(bad)
movs
fcmovb
sub
js
test
and
in
aaa
lahf
pop
sbb
mov
jae
add
fdiv
push
stc
and
sbb
push
push
sub
pop
cli
pop
mov
adc
leave
in
cdq
loope
jg
push
adc
mov
mov
sbb
(bad)
sub
mov
sbb
daa
test
cmps
jg
(bad)
loopne
and
mov
sbb
(bad)
adc
sbb
sub
fdiv
aam
pop
dec
out
xchg
cwde
mov
imul
dec
movs
mov
inc
jno
aam
pop
ja
mov
adc
sbb
jmp
add
fwait
push
dec
test
icebp
fst
push
sbb
ret
lock
mov
ss
cs
push
pushf
pushf
pushf
mov
iret
xchg
sbb
push
dec
(bad)
mov
mov
imul
je
sbb
push
inc
mov
jge
jmp
cs
rcl
dec
or
pop
out
sbb
popf
shl
cmp
rcr
bound
xchg
push
jge
out
push
adc
lahf
jl
or
je
js
sbb
lock
sub
enter
aam
adc
and
loop
add
and
sbb
cmp
dec
ss
popf
sbb
push
pop
add
ror
not
mov
xchg
ins
or
xchg
ins
add
fwait
outs
jecxz
cli
jl
js
mov
sub
push
add
or
push
push
cmp
sbb
test
pop
fsub
inc
cld
cmp
push
pushf
mov
and
pop
pop
movs
pop
adc
repz
or
dec
shl
ja
out
daa
(bad)
dec
pop
fisub
pop
jmp
push
mov
mov
jbe
cs
mov
sbb
out
add
nop
push
jecxz
cmp
enter
mov
jge
loopne
cmps
imul
cmp
mov
mov
or
js
xor
jp
rcl
and
sub
in
aad
fstp
rcr
js
xchg
repz
aam
add
inc
cdq
test
push
cli
mov
pop
mov
mov
xlat
mov
test
add
cmc
pop
out
cmp
mov
js
retf
test
or
js
or
fisttp
in
loopne
test
jne
push
rol
mov
sahf
dec
sbb
sahf
adc
xchg
loop
(bad)
jecxz
lea
mov
jne
lods
ret
sbb
dec
mov
push
xchg
(bad)
mov
pop
out
inc
(bad)
dec
cmps
cmps
xchg
mov
repz
pop
lahf
xchg
jns
sbb
pop
sbb
in
in
push
push
cmp
inc
shl
jmp
fistp
push
push
cmc
nop
jge
ja
mov
cld
sub
jns
cwde
test
or
jl
push
or
shr
(bad)
mov
mov
clc
stos
ror
dec
dec
enter
push
pop
adc
push
push
mov
scas
cmc
jbe
pop
movs
mov
xor
leave
cmp
dec
aaa
js
sub
pop
xchg
xchg
and
xchg
rcl
mov
xchg
aad
bound
jge
pop
dec
mov
(bad)
dec
fs
es
shl
fisttp
jl
rol
sbb
cld
ds
mov
push
pushf
call
call
pop
or
mov
push
sbb
movs
inc
gs
jo
fcmove
retf
lahf
push
jge
dec
sti
cs
xor
cli
pop
ins
repz
loop
shr
mov
ror
jno
or
xchg
xchg
mov
loopne
int3
int3
(bad)
out
pop
sub
test
mov
clc
cli
call
mov
in
movs
pop
pop
jb
xchg
cdq
in
cmp
ror
std
in
gs
inc
dec
sar
and
or
cli
dec
stos
mov
in
pop
out
mov
dec
call
ins
pop
dec
push
push
cld
adc
jmp
out
rcr
lock
sbb
fisttp
cdq
ins
nop
outs
xor
clc
xchg
shl
sar
(bad)
mov
fimul
add
je
xor
fwait
pop
fs
es
pop
pop
cmps
jl
in
cmp
pushf
push
repz
repz
lahf
push
cmp
cs
loope
stos
pop
addr16
dec
fisubr
mov
mov
sbb
push
or
leave
sbb
fs
sbb
cmp
stc
enter
(bad)
sbb
test
enter
push
dec
clc
adc
jl
dec
mov
mov
sar
mov
nop
cmp
add
xor
dec
mov
jnp
imul
pop
pop
jg
iret
pop
push
mov
and
jb
dec
popa
aaa
rol
sub
adc
cmp
nop
jno
push
fdiv
nop
jno
jecxz
add
cmps
jle
sub
(bad)
adc
(bad)
mov
jnp
clc
mov
(bad)
int3
xchg
movs
int
cmps
(bad)
in
cwde
sbb
clc
push
in
popf
dec
test
mov
ins
lods
cmps
out
cld
dec
adc
jb
xor
or
jno
dec
mov
scas
jae
xchg
lock
movs
ins
out
pop
pop
pop
inc
and
mov
cmp
pushf
dec
xor
jbe
xchg
aad
inc
jb
dec
push
rcl
imul
fild
add
fnstsw
push
call
sar
ins
aam
sar
cld
call
jl
cli
ja
mov
pushf
mov
jecxz
lahf
into
or
inc
mov
dec
mov
(bad)
pop
into
cdq
sbb
sub
mov
(bad)
or
lock
add
add
and
jl
in
pop
mov
loope
cmc
lock
and
std
mov
mov
mov
xor
loopne
and
sub
push
push
out
lea
push
lods
mov
in
movs
sub
pop
dec
scas
jg
js
mov
sbb
(bad)
cmps
fdivr
shl
sbb
ins
outs
daa
mov
pusha
jle
xor
out
adc
adc
stc
and
sbb
push
mov
out
inc
and
push
in
ins
clc
add
dec
xor
test
shl
rol
sbb
and
xchg
dec
data16
mov
inc
movs
rol
or
(bad)
fsubp
mov
adc
ficomp
out
repz
adc
int3
int3
fimul
mov
xor
xchg
test
sbb
ret
mov
aas
stos
sub
les
pop
and
mov
es
fild
xor
mov
daa
xchg
fidiv
out
cwde
xor
fldcw
outs
xlat
aam
(bad)
fst
adc
xor
or
adc
rol
inc
xchg
xor
out
and
iret
pop
add
fisub
dec
jl
sahf
or
jae
pop
cmp
dec
(bad)
icebp
int
es
(bad)
sbb
mov
or
fiadd
inc
jne
mov
in
in
cmp
movs
stos
ins
push
fild
out
add
mov
scas
sbb
xchg
clc
cld
fnstcw
sub
jo
mov
movs
mov
cmps
clc
lock
les
movs
mov
nop
call
add
xlat
call
jb
out
dec
cwde
jl
add
jmp
push
daa
loope
test
and
fild
mov
movs
push
mov
mov
loopne
(bad)
(bad)
jl
cmc
clc
mov
cld
adc
repnz
fcomp
xchg
(bad)
lahf
jae
es
pusha
test
call
add
in
ret
fdivr
xchg
dec
cdq
jg
add
scas
imul
xchg
loop
mov
sbb
cmp
xor
fmul
repnz
inc
mov
dec
xchg
scas
jl
mov
xor
and
enter
mov
and
test
data16
dec
bound
(bad)
sahf
adc
jecxz
sahf
retf
dec
mov
adc
clc
push
push
sub
fdiv
inc
pop
adc
xchg
or
and
adc
vpmulhw
add
xchg
jmp
cmp
adc
dec
inc
cmp
in
loop
mov
add
dec
pop
mov
mov
icebp
mov
push
xor
shl
xor
push
sub
test
pusha
in
loopne
(bad)
xor
hlt
push
cdq
jl
inc
or
sbb
xor
push
cwde
dec
add
stc
fs
hlt
and
and
sbb
out
dec
(bad)
ins
add
test
ret
mov
pop
jns
xor
adc
inc
pop
fld
icebp
pop
sahf
cmp
inc
sbb
xor
rcl
sub
add
into
sbb
sbb
push
push
mov
scas
push
out
jo
std
push
loop
mov
mov
rol
sbb
and
inc
jge
xchg
cmp
hlt
inc
cdq
inc
call
cmp
sbb
lahf
mov
pop
or
pop
loop
sub
stos
stos
mov
mov
sub
stos
inc
fist
mov
jne
aad
jae
ins
pop
mov
push
xor
add
es
scas
mov
fild
jle
inc
lahf
pop
(bad)
pop
fistp
data16
in
xor
imul
or
shr
pop
and
jg
mov
add
dec
movs
movs
dec
mov
cmp
scas
pushf
movs
ja
jo
xor
test
sahf
(bad)
cmp
jo
cli
aam
xlat
dec
xor
mov
movs
in
cdq
int3
dec
mov
jl
pop
jmp
ret
jl
or
jns
mov
inc
daa
shr
dec
lods
(bad)
inc
push
repz
cmp
ss
dec
mov
fdivrp
sbb
mov
mov
(bad)
mov
mov
pushf
fcomp
xlat
mov
mov
movs
sbb
fiadd
mov
scas
push
cld
js
(bad)
add
je
or
sub
fidiv
fcomp
mov
lods
jo
lock
mov
mov
ins
sbb
mov
sbb
and
faddp
nop
iret
fiadd
out
and
aam
inc
xor
mov
push
push
sar
mov
jbe
sti
lahf
xor
jmp
mov
cmp
rcr
in
jmp
cmp
call
sbb
add
and
pop
and
mov
mov
jg
lods
es
inc
jo
adc
inc
scas
mov
and
push
fstp
sbb
cwde
stos
jg
js
mov
aad
repnz
add
enter
sub
pushf
mov
push
fcom
lahf
cwde
push
mov
mov
out
sbb
nop
rol
(bad)
cmp
in
mov
jo
jge
clc
mov
lahf
lahf
and
pop
jge
mov
pop
repz
popa
push
fimul
out
daa
push
xchg
cld
inc
mov
push
and
and
(bad)
jl
scas
push
pop
call
inc
push
or
xchg
ss
xchg
mov
fcmovnbe
xlat
shl
enter
outs
xchg
jmp
jle
bound
pushf
mov
js
hlt
(bad)
jp
ins
sahf
data16
(bad)
pop
xchg
pushf
icebp
dec
fadd
mov
dec
movs
inc
sti
push
rol
add
push
xchg
jp
pop
xor
mov
fcmovu
aas
inc
and
retf
jmp
iret
mov
sub
les
inc
retf
xlat
mov
sbb
fidiv
(bad)
iret
cwde
mov
sar
jae
(bad)
les
mov
jne
fisttp
cmp
retf
inc
cmps
jo
(bad)
fcmovu
rcr
dec
nop
push
jns
sbb
inc
cwde
pop
int3
xchg
or
mov
sahf
dec
adc
in
fwait
movs
jg
and
or
sbb
sbb
movs
xor
xlat
xor
jl
add
sbb
je
cld
mov
or
push
and
push
jecxz
les
aad
inc
push
lods
mov
aaa
clc
cmps
xchg
fild
jl
dec
sub
jg
pop
pop
sahf
xchg
and
in
retf
repz
mov
xor
jle
cmps
xor
pop
pusha
push
test
stc
sbb
sub
(bad)
add
push
fcomp
(bad)
call
fldenv
xor
and
and
add
adc
sbb
lods
mov
jo
test
mov
std
jle
(bad)
sbb
loopne
mov
xor
sub
sbb
xor
xor
cld
lock
paddw
in
sub
movs
cld
add
inc
fnstenv
cmp
test
pushf
sub
inc
mov
jmp
inc
lds
fadd
xor
ret
loope
call
dec
int
(bad)
lods
hlt
mov
xor
ins
out
adc
test
dec
aas
xlat
inc
xor
push
xchg
fldcw
sbb
ja
(bad)
xlat
mov
(bad)
test
mov
pop
test
mov
cmp
movs
jl
hlt
movs
xchg
lahf
cld
sub
xlat
sbb
pop
xor
aas
lahf
xchg
stos
push
in
shr
or
call
add
push
in
mov
out
add
push
cld
sub
movs
cld
mov
call
aad
fisubr
jb
mov
xor
inc
arpl
add
sbb
mov
mov
and
add
aad
sbb
mov
stos
add
in
movs
push
sbb
popf
arpl
movs
in
hlt
movs
dec
fs
mov
scas
mov
inc
cmp
and
lea
push
pop
jno
sbb
sbb
sub
(bad)
adc
mov
lahf
xchg
sub
loop
sbb
add
sub
jbe
inc
push
movs
call
stos
lahf
pop
mov
fldlg2
in
inc
jmp
out
inc
mov
mov
fstp
pushf
pop
(bad)
sbb
ret
stc
in
loope
scas
jne
or
cmp
xor
cdq
or
dec
cmp
cmc
fsub
rcl
test
cwde
ds
cmp
repnz
jns
sub
hlt
mov
aam
dec
loopne
leave
xor
mov
xor
mov
neg
pop
in
das
cmps
dec
lods
test
push
xor
pushf
repnz
mov
cli
and
sbb
mov
pop
push
ror
adc
pop
inc
test
adc
cmp
sbb
mov
popf
pop
push
(bad)
clc
or
cmp
cmps
sahf
xchg
enter
sbb
idiv
fsin
sub
mov
loopne
mov
das
(bad)
retf
and
sub
jecxz
pop
ja
mov
test
popf
sbb
popf
mov
push
cmps
jg
in
xor
sbb
loop
movs
xchg
pop
addr16
aam
mov
pop
aam
mov
(bad)
mov
(bad)
cmp
mov
pop
ja
mov
jmp
pop
retf
fld
fdivr
xor
sbb
pop
jo
or
dec
mov
shrd
call
cmp
and
xlat
retf
sbb
nop
fdiv
adc
cmps
scas
scas
scas
imul
dec
add
pop
call
pop
pop
inc
ins
outs
sbb
bound
pop
dec
push
ss
push
adc
mov
rcr
dec
ins
xchg
mov
lods
adc
lahf
add
pop
pop
stc
rol
hlt
mov
mov
int3
ror
sbb
sbb
mov
js
int3
clc
(bad)
into
pop
enter
mov
push
stc
loopne
adc
movs
and
pop
push
dec
xor
mov
ins
scas
cld
mov
mov
lods
fistp
hlt
aam
jne
xor
pop
push
dec
adc
(bad)
mov
fdivr
imul
sub
push
pop
mov
out
mov
(bad)
push
dec
dec
rol
push
adc
jecxz
mov
inc
fcmovnu
sub
mov
popf
mov
xor
push
jl
dec
cdq
cmp
fcomp
out
sbb
pushf
cwde
std
clc
adc
jg
test
xchg
mov
cmc
pop
int3
mov
sbb
fnstcw
(bad)
loopne
adc
cmp
test
xor
mov
push
in
xor
jle
sub
popf
jle
pop
iret
inc
xor
in
cmp
inc
inc
in
jle
and
mov
sub
int3
inc
xchg
cmc
xor
jo
aam
inc
sbb
fs
movs
adc
aam
movs
sbb
sti
adc
cli
adc
popf
add
add
int3
popf
add
aas
rcr
ins
xchg
shl
jne
in
adc
add
pushf
sbb
movs
pusha
(bad)
jl
xor
cli
jo
inc
popf
mov
ins
fsubr
push
sbb
xchg
les
fsubr
pusha
movs
lock
inc
aam
adc
imul
mov
xchg
test
fsubr
movs
cmp
movs
pushf
shl
lds
clc
aam
enter
(bad)
movs
sbb
shr
aad
xchg
loopne
xchg
mov
popf
int3
or
xor
mov
mov
cs
fs
xor
or
adc
inc
sbb
dec
popf
jl
xchg
dec
mov
popf
enter
fsub
cmc
add
popf
ins
(bad)
xchg
cmp
cmp
outs
cwde
and
mov
mov
cmps
xor
add
ins
cdq
xlat
imul
fdiv
sbb
mov
shl
xor
cmp
cli
cwde
lods
cld
mov
popf
inc
and
add
sbb
hlt
in
les
std
ins
adc
or
sub
ret
and
inc
sbb
loopne
lods
mov
sbb
inc
sbb
dec
pushf
push
mov
movs
adc
jl
dec
mov
pop
cwde
mov
mov
fcom
pusha
mov
sub
popf
push
ins
ins
fstp
dec
test
push
nop
cmps
xor
inc
pushf
dec
mov
mov
fistp
loopne
popf
sbb
mov
in
and
aam
lods
sbb
jge
sbb
mov
stos
jl
push
add
out
pusha
jp
cdq
scas
je
hlt
loopne
sub
mov
jo
mov
icebp
xchg
call
je
add
fs
je
pushf
push
add
jo
cmp
call
mov
sub
jne
cmp
cwde
mov
lea
not
movzx
pusha
mov
pusha
lea
ja
pushf
jmp
push
mov
pusha
mov
mov
pusha
pushf
pushf
push
lea
jmp
sbb
cmp
jb
sbb
jmp
icebp
mov
sub
mov
arpl
jo
dec
(bad)
fistp
add
sbb
pop
jo
push
cmp
ror
(bad)
cmp
hlt
cmps
mov
mov
lock
scas
je
into
lds
cmp
ins
pop
inc
test
jmp
fs
jae
pop
inc
mov
cdq
daa
jo
or
out
mov
ror
inc
xchg
sti
jns
aad
mov
out
repnz
adc
sub
sub
dec
icebp
mov
push
popf
fimul
xor
inc
push
clc
mov
into
sahf
xor
aas
push
or
fadd
sbb
pop
aaa
div
retf
lds
icebp
push
ror
cmc
bt
call
call
xlat
xchg
sbb
retf
iret
adc
mov
cmps
imul
movs
push
fistp
es
retf
xchg
pop
xchg
in
mov
cmp
xor
xchg
mov
or
out
and
inc
shl
enter
aam
xchg
or
adc
jl
cmp
push
sbb
add
hlt
cld
movs
imul
in
and
cdq
and
dec
rcl
xchg
repz
fwait
pop
pop
call
in
or
ret
stos
xchg
sti
fsub
cs
or
add
std
ror
je
add
rol
mov
mov
sbb
jmp
inc
rol
imul
aas
addr16
test
or
mov
test
mov
or
pop
push
inc
fld
push
(bad)
cmps
scas
arpl
cmc
movs
idiv
mov
icebp
ds
iret
cmp
or
pop
rcl
cwde
cmp
scas
fsub
movs
jle
shl
cmp
iretw
(bad)
stc
outs
fdiv
mov
mov
push
or
(bad)
sub
push
sbb
retf
call
dec
push
inc
in
sar
retf
out
dec
and
stc
adc
cld
mov
mov
outs
sub
pop
sub
in
aad
mov
xchg
cwde
adc
imul
pop
sub
ins
xor
lds
fcmovbe
and
addr16
pop
lds
xchg
call
jb
hlt
stos
shr
cmps
mov
xor
neg
inc
(bad)
jl
push
aam
push
out
mov
dec
mov
outs
and
mov
call
jmp
call
mov
not
lods
cmc
mov
cmp
mov
sub
call
push
or
test
mov
pop
mov
int
repnz
scas
sbb
aam
les
cld
idiv
fbstp
out
arpl
jl
push
loopne
cmps
stc
mov
inc
mov
pop
cmp
popa
aaa
xchg
movs
mov
add
sbb
mov
(bad)
fdivr
pop
jmp
or
imul
cmp
inc
jle
int
inc
fwait
and
clc
mov
movs
test
lods
sar
cs
ins
inc
mov
setg
inc
ror
test
pop
push
pop
cs
leave
ret
jge
mov
xchg
cmp
stos
rcr
sbb
jecxz
jno
in
add
and
pop
aas
or
mov
mov
push
cmp
je
sub
in
in
in
pop
lds
lds
nop
dec
mov
mov
or
sub
sub
cmps
clc
call
sbb
aad
add
jmp
jmp
jb
xchg
mov
and
nop
sbb
or
popa
xchg
inc
cli
mov
imul
arpl
push
push
mov
data16
xor
inc
and
dec
outs
jp
jecxz
dec
jne
hlt
add
fisttp
push
bound
pop
popa
jp
mov
add
loope
adc
sub
dec
mov
or
inc
pop
ja
arpl
fsqrt
leave
aam
jp
xchg
enter
jg
sbb
and
call
das
dec
mov
shl
add
cmp
jmp
inc
call
sub
test
imul
xchg
lock
mov
inc
jge
hlt
inc
cli
xchg
pushf
pop
xor
push
push
adc
and
mov
sti
mov
out
pop
xor
and
dec
push
mov
sahf
(bad)
loopne
inc
sub
test
add
ja
(bad)
adc
mov
xchg
xchg
and
jmp
xchg
imul
mov
mov
jnp
out
pop
mov
cmp
mov
dec
adc
mov
and
xchg
mov
sub
inc
cmp
jmp
push
sub
xor
cmp
inc
xor
mov
xchg
dec
scas
push
and
lds
stc
mov
popa
adc
in
(bad)
push
out
push
pushf
loope
cmp
cdq
mov
test
sbb
fdiv
cld
retf
or
cli
lahf
stos
outs
dec
movs
retf
(bad)
clc
out
mov
jecxz
sub
retf
lea
dec
adc
inc
test
xlat
int3
loope
ds
fwait
(bad)
dec
shr
sar
das
adc
sub
inc
add
lods
add
xor
and
fistp
sahf
mov
push
sbb
push
(bad)
enter
and
ja
pop
add
test
inc
ds
push
adc
push
pop
cmps
pop
pusha
lea
jne
shl
adc
shr
mov
push
push
add
cmc
cmp
movzx
call
mov
sahf
daa
and
sub
mov
xlat
out
push
fwait
pop
(bad)
dec
sti
and
add
int3
(bad)
ds
sbb
jbe
mov
icebp
or
imul
mov
cvtps2pd
int3
scas
adc
(bad)
push
ds
jns
push
sbb
aam
adc
(bad)
je
and
mov
mov
xchg
cld
sahf
arpl
je
js
mov
pushf
sbb
mov
mov
fadd
mov
bound
(bad)
cld
mov
mov
cmp
(bad)
mov
into
push
pushf
aam
fistp
xchg
sti
inc
or
iret
lds
leave
dec
inc
add
inc
into
and
sub
fisub
add
into
shr
adc
scas
inc
and
sbb
mov
xchg
fiadd
rcl
aad
mov
test
int
int
inc
jmp
ret
mov
pop
jl
dec
repz
sar
sub
pushf
push
pop
pop
cmp
les
in
fs
mov
in
mov
in
push
sub
pop
test
retf
popf
xor
mov
js
rcr
xlat
pop
jb
bextr
rcl
imul
pop
add
jecxz
inc
xchg
xchg
pop
gs
sti
fs
sbb
outs
aad
or
cmps
or
mov
sbb
ja
inc
mov
mov
add
mov
inc
mov
repnz
arpl
xchg
cmp
jns
sub
into
fild
inc
int3
outs
xor
and
dec
sbb
loop
fdiv
(bad)
cmp
xor
push
lods
pop
cmp
ror
dec
leave
jno
or
int
pop
(bad)
xor
and
mov
or
daa
and
retf
(bad)
(bad)
mov
out
xchg
mov
push
or
imul
push
add
sbb
cmp
and
or
jmp
sbb
cmp
popa
cld
or
dec
mov
arpl
scas
sub
push
nop
rcr
test
or
lods
mov
xor
and
jne
call
xor
mov
cwde
push
fnstsw
ins
in
sub
mov
sub
loope
imul
pop
xor
fwait
sbb
add
mov
cmps
inc
fisttp
add
adc
adc
fsubr
mov
xor
sub
push
add
xchg
scas
retf
push
xchg
dec
mov
mov
jecxz
movs
dec
retf
movs
push
sub
push
fidivr
push
or
call
std
jg
popf
and
dec
jnp
pusha
fstp
and
dec
adc
out
pop
aam
(bad)
push
enter
mov
ds
loop
sub
sbb
out
pop
je
or
data16
out
mov
rcr
shr
in
aad
cmp
push
jle
and
cwde
std
(bad)
jmp
rcl
clc
das
mov
sbb
jmp
jmp
jmp
or
sub
and
inc
leave
test
lock
test
movs
mov
xchg
leave
cmps
push
stos
mov
call
and
ret
fadd
push
aas
pop
inc
rol
and
inc
call
mov
and
out
stos
test
adc
pop
out
out
rcr
inc
jmp
imul
jecxz
dec
call
xchg
(bad)
outs
dec
mov
cmp
mov
pop
and
imul
sbb
aam
mov
repnz
sahf
mov
lods
hlt
dec
xchg
or
lock
lods
mov
popf
nop
inc
push
shr
xchg
jge
inc
pusha
sahf
dec
and
fs
jne
sar
stc
lea
add
mov
clc
call
test
repnz
push
call
daa
sti
int
and
int3
jne
xchg
aad
jge
nop
or
pushf
jbe
jns
xor
ret
xchg
test
nop
mov
ss
aaa
mov
aaa
dec
sahf
loope
inc
pop
sbb
hlt
jg
mov
xor
rcl
rcr
jg
ror
dec
xchg
adc
adc
faddp
aad
stos
sar
mov
shl
ret
mov
dec
aad
or
inc
loopne
lea
aaa
int
and
pusha
scas
pop
mov
addr16
inc
mov
data16
pop
jb
fisubr
scas
mov
sub
frstor
sub
pop
in
dec
leave
gs
xor
sbb
out
cmps
clc
btc
mov
clc
test
pushf
pusha
add
cmp
mov
mov
cmc
stc
jmp
aas
lock
and
jg
sub
mov
out
scas
neg
ss
movs
into
xor
cwde
cmp
test
fmul
in
sar
push
dec
into
std
sti
ret
inc
pop
retf
ror
jmp
das
jp
not
cmp
mov
jmp
loop
in
jo
iret
repz
ss
push
jno
mov
aad
add
test
mov
mov
inc
cli
and
sahf
dec
xor
adc
pop
mov
icebp
lock
call
outs
je
cli
hlt
sti
data16
adc
mov
cmp
sti
mov
test
or
jb
sti
bts
jg
aas
mov
mov
pop
jmp
int3
jo
pop
call
das
jbe
and
inc
mov
fistp
loope
call
shl
out
dec
xor
and
std
push
add
dec
rcr
sub
adc
arpl
mov
mov
cmp
dec
leave
jl
pop
sbb
mov
pop
in
sub
sbb
adc
mov
test
pop
inc
jo
dec
mov
push
neg
js
sbb
div
adc
ret
pop
ret
push
lea
jae
push
add
mov
call
mov
mov
outs
jecxz
stos
mov
jecxz
scas
arpl
xchg
fmul
repz
arpl
(bad)
addr16
sub
stos
in
jecxz
imul
(bad)
movs
dec
test
mov
arpl
sbb
(bad)
pop
cmovp
ja
dec
call
scas
pop
pusha
pop
out
inc
fcom
push
jl
xchg
data16
inc
sahf
sub
mov
cli
jecxz
mov
es
push
out
push
jae
xor
jmp
add
xchg
add
int
fcomp
out
in
(bad)
retf
cmps
sti
inc
fcomip
in
mov
arpl
fwait
rcr
test
out
cmc
adc
or
out
arpl
inc
into
fnstsw
sub
call
arpl
xor
sub
leave
xchg
pop
cld
mov
sbb
fxam
ins
cmp
das
hlt
push
out
sub
xchg
sar
adc
xchg
cmp
cmp
fidiv
(bad)
stos
popa
sub
xlat
aaa
test
outs
call
ror
inc
into
jne
leave
data16
mov
stos
daa
dec
xor
enter
push
sbb
das
rol
fwait
push
fs
or
dec
push
pusha
push
sub
ret
mov
cmp
and
ret
mov
std
or
mov
jbe
cmps
rol
mov
pop
out
shr
add
xchg
push
neg
aaa
and
mov
ror
ror
mov
lea
stc
bt
clc
push
shl
stc
mov
stc
jmp
pushf
stos
pushf
lea
jmp
add
push
push
inc
push
je
jb
jne
add
inc
into
fdivr
fistp
or
sub
fisub
pop
pushf
pop
ret
dec
and
fs
popa
push
and
nop
push
inc
(bad)
call
dec
xor
dec
pop
or
mov
or
add
mov
and
mov
pop
movs
cld
xchg
popf
sahf
cmp
test
mov
ins
mov
stos
daa
push
shr
in
(bad)
adc
xchg
dec
cmp
dec
pop
rcl
jne
mov
retf
jg
clc
(bad)
(bad)
xchg
mov
and
outs
jne
inc
dec
in
xchg
ins
adc
xor
popa
(bad)
adc
shl
int
int
stos
fld
mov
and
stos
xchg
jbe
xor
mov
mov
aaa
mov
add
mov
inc
test
fstp
xlat
stos
ret
sbb
dec
pusha
data16
cmp
loope
xor
bound
lahf
push
sbb
lods
pusha
pushf
dec
inc
cmp
sar
not
rcr
not
shl
inc
add
pushf
jmp
aas
xchg
movs
sbb
cdq
rcl
add
mov
and
dec
jmp
in
mov
push
sub
std
jp
jge
out
lds
inc
shr
xor
and
mov
xchg
lods
stos
shl
jg
cmovae
inc
std
lock
fisub
add
ror
jne
sub
mov
shr
jg
jb
call
rol
jb
(bad)
out
iret
or
add
lahf
adc
ffree
jle
mov
cmp
std
pop
retf
add
repnz
retf
mov
sar
jns
shl
iret
inc
push
std
rcr
das
das
les
xchg
call
pop
addr16
pop
or
lds
mov
dec
mov
and
xor
icebp
xor
shr
aad
mov
fsub
in
cld
and
fs
inc
std
push
mov
movs
sbb
pop
add
cmps
mov
clc
and
scas
and
jl
enter
cmp
add
out
sub
inc
shr
add
js
pop
push
lds
gs
into
aam
adc
popf
lods
outs
inc
mov
jnp
clc
inc
push
jno
or
mov
js
xchg
aam
inc
jns
and
mov
adc
scas
lsl
sub
and
(bad)
pop
in
fsub
push
fwait
push
add
push
lods
cmps
push
push
nop
shr
mov
sti
push
addr16
cmc
rol
jg
xchg
add
sar
lock
shl
imul
push
jmp
shr
dec
loopne
in
xor
movs
into
div
mov
movs
mov
cld
and
jmp
adc
aas
mov
mov
ja
sbb
or
shl
push
(bad)
fsub
in
push
xor
cmp
dec
and
rcl
mov
ror
dec
mov
fdivr
xchg
(bad)
addr16
clc
bnd
jg
or
inc
xchg
mov
mov
inc
mov
bound
mov
push
cmp
movs
cmp
std
aam
and
sub
dec
movs
or
sahf
sub
enter
out
sahf
mov
pop
or
daa
inc
test
pop
fs
lds
mov
popa
adc
jnp
inc
in
sbb
fdivr
imul
(bad)
out
aad
add
cwde
mov
jnp
jmp
sbb
aaa
adc
or
mov
add
sahf
lock
sub
(bad)
je
call
cmp
xchg
enter
adc
xchg
(bad)
and
cmp
outs
outs
inc
ror
push
pop
dec
jge
bt
cmc
clc
cmp
pusha
lea
jne
pushf
clc
sub
aam
neg
bt
mov
pushf
call
xchg
xchg
test
mov
stc
add
mov
add
fild
icebp
xor
mov
fist
mov
jg
jg
inc
(bad)
xchg
cmp
mov
jmp
rcr
mov
and
int
mov
xlat
mov
jno
mov
inc
jmp
cdq
jno
jns
sbb
inc
sub
push
dec
adc
add
dec
daa
push
out
mov
(bad)
jo
cmp
or
std
in
ficomp
jp
repz
xor
inc
cld
push
sbb
stc
cmp
lock
xor
and
push
mov
sub
inc
inc
bound
fiadd
mov
cld
pop
clc
jb
push
ins
mov
das
sar
cmps
mov
mov
jbe
xor
inc
ret
popa
(bad)
test
xor
adc
in
sbb
fidiv
inc
fcomp
and
jo
xor
adc
sbb
aam
out
cmps
and
in
test
adc
outs
test
dec
push
inc
sub
movs
sub
cmp
ins
mov
enter
pop
xlat
sub
sti
(bad)
hlt
mov
and
nop
inc
cmp
cdq
mov
or
adc
dec
repz
push
cld
das
mov
fst
leave
push
dec
adc
jne
call
pusha
test
jmp
jmp
push
test
call
call
fbstp
fidivr
inc
fild
pop
scas
push
out
jae
pop
pop
test
mov
out
(bad)
ror
add
sub
cli
adc
add
es
lock
test
dec
lods
inc
ret
inc
mov
jle
or
xchg
sub
adc
(bad)
pop
into
(bad)
mul
aaa
sub
fwait
int
ror
mov
fsub
or
sbb
dec
adc
cmp
pop
jno
mov
stos
adc
int
test
adc
jl
rcr
pop
das
retf
imul
mov
cmc
icebp
test
das
sti
repz
adc
pop
xchg
(bad)
ja
scas
fbstp
mov
add
adc
xor
mov
call
call
lea
call
pushf
pusha
pusha
push
lea
jmp
sar
btr
mov
xchg
call
lea
jne
inc
rcr
test
sbb
sub
rcr
push
bsr
mov
shl
cmc
or
inc
add
bt
sete
mov
clc
test
jmp
push
dec
adc
cli
scas
shl
jl
inc
repnz
pop
add
cmps
and
pop
fild
aaa
cs
das
iret
fsubr
add
pop
add
mov
fild
inc
or
out
adc
data16
mov
imul
dec
xchg
jne
sbb
jbe
cmp
in
pusha
adc
sbb
inc
or
movs
pop
jecxz
sbb
out
das
pop
and
mov
mov
jge
lock
in
into
cmp
retf
sbb
sub
cmp
cld
push
pop
pop
dec
push
mov
mov
mov
xchg
jmp
test
pop
push
jbe
les
daa
cld
(bad)
sub
fwait
stos
xchg
mov
xchg
lods
test
out
stos
gs
out
pextrw
ins
cli
movs
(bad)
dec
push
push
xor
and
nop
cs
lahf
mov
stos
pushf
mov
pushf
lea
jmp
lea
lea
jp
cmc
cmp
sub
bt
pusha
push
pop
mov
cmp
mov
call
call
mov
imul
popf
gs
sbb
jne
in
call
mov
addr16
pmaddwd
movs
lea
sbb
xchg
lock
fwait
pusha
outs
shr
inc
add
mov
inc
loope
inc
pop
into
(bad)
xlat
and
xor
fisttp
cmps
inc
aas
sbb
call
scas
mov
lock
adc
pop
imul
out
inc
ins
mov
test
pop
push
and
add
mov
int
(bad)
dec
jns
gs
jmp
pop
retf
in
push
lods
addr16
xchg
cmps
std
mov
jne
outs
add
jne
je
xchg
cmp
aam
push
mov
scas
cmp
sub
dec
jae
pop
or
sbb
pop
stos
pushf
leave
shr
cmp
lock
lock
adc
push
iret
jecxz
shl
add
mov
cmp
test
div
mov
cli
adc
xchg
sahf
pop
aam
cwde
loop
jnp
sbb
pop
sub
js
addr16
mov
cmp
ja
push
or
sub
inc
out
sub
jmp
mov
retf
dec
pop
scas
retf
sub
cmp
not
es
imul
das
lea
inc
aaa
int
jne
mov
fist
xchg
inc
jge
ret
ss
jbe
sub
sahf
or
mov
xchg
cld
xchg
cmps
jmp
in
stc
inc
mov
mov
sub
mov
cmp
pop
ror
out
cmps
leave
std
adc
mov
xchg
pop
lock
inc
jl
int
jmp
int3
sar
cli
jo
mov
in
test
dec
push
movs
adc
bound
ror
dec
inc
gs
xor
stos
(bad)
dec
aaa
into
fadd
inc
retf
fiadd
stos
cmp
push
jmp
sub
push
cdq
push
jns
jl
push
dec
ret
xchg
test
push
xchg
add
push
lock
call
pop
jno
cs
cmp
jecxz
cld
pop
xor
das
(bad)
dec
cmp
test
(bad)
ins
push
jno
mov
mov
lods
pop
jnp
dec
nop
push
(bad)
sbb
movs
jmp
clc
fxch
test
or
jmp
pop
popf
sar
xchg
adc
cmc
inc
cmp
dec
mov
pop
je
xor
imul
mov
pop
daa
movs
or
ins
ret
aas
ss
xor
xor
mov
jno
ins
loop
enter
pop
fwait
aad
inc
(bad)
outs
aaa
je
jb
sahf
neg
jmp
sub
mov
pop
jb
fsubr
cmc
mov
popw
adc
cmc
test
popf
mov
or
add
sub
jecxz
jmp
sti
push
push
outs
scas
jnp
arpl
adc
inc
mov
dec
das
pusha
mov
inc
cmp
adc
lahf
(bad)
xchg
xchg
aas
mov
js
pop
call
mov
and
lahf
fist
pop
hlt
xchg
push
gs
lock
sti
dec
xor
call
idiv
in
cmp
das
jnp
pop
les
repnz
jo
push
arpl
mov
aad
retf
imul
popa
dec
bound
xchg
cld
adc
mov
icebp
inc
jg
clc
lods
ret
fbstp
sbb
or
stc
adc
ins
push
pop
inc
sub
mov
xchg
cmp
loop
in
add
cli
sub
adc
jmp
out
aam
inc
pusha
in
xchg
data16
mov
sar
add
sar
fs
mov
retf
adc
xor
repz
je
jg
add
(bad)
rcr
adc
loopne
jmp
push
pop
jo
test
sub
mov
out
pop
xor
movs
out
(bad)
xor
outs
test
dec
out
cmp
popf
add
jb
clc
xchg
or
arpl
arpl
(bad)
mov
jne
lock
pop
push
or
popa
push
xabort
ror
iret
add
push
xchg
mov
push
mov
lea
jmp
sete
lods
push
jmp
sbb
sub
leave
adc
loop
pop
cwde
push
in
test
and
mov
stc
int
aaa
sbb
add
movs
inc
sti
out
adc
or
and
jae
nop
repz
or
push
inc
leave
rdpmc
jmp
dec
sbb
fist
loop
mov
dec
retf
or
pop
in
data16
adc
nop
stos
sbb
cld
movs
fdiv
fwait
pop
(bad)
xchg
pop
stc
ret
pop
xchg
push
pop
xchg
add
mov
mov
mov
pop
add
movs
xchg
cld
cmp
push
std
addr16
and
cmps
xor
test
jo
jmp
mov
mov
call
inc
call
inc
sub
inc
out
out
and
sub
pop
sbb
into
int3
out
xor
into
push
cmps
les
div
aas
jno
mov
pop
lock
xchg
jge
enter
inc
mov
mov
call
inc
imul
jae
int3
add
jne
xor
dec
movs
cmc
or
push
popf
adc
sbb
aaa
push
aaa
pop
mov
loopne
ins
sub
adc
adc
cwde
es
jp
ins
into
and
lods
jg
xchg
aad
jbe
out
mov
add
jle
test
push
sub
add
push
test
push
mov
sub
loope
and
adc
test
add
push
sbb
mov
ret
sub
mov
cs
add
ror
dec
xor
mov
mov
sbb
mov
mov
mov
lods
mov
dec
test
jo
fcom
sub
loop
jne
arpl
out
add
lock
mov
ins
ss
dec
and
dec
outs
add
clc
push
dec
loope
pop
mov
sbb
mov
enter
adc
xchg
sub
bound
add
lea
jae
jmp
jmp
fidivr
add
dec
cmp
pop
(bad)
cmp
add
add
int
sbb
add
daa
add
add
add
std
sbb
add
cmp
add
add
retf
add
add
add
add
push
add
sub
add
push
push
add
jbe
add
cmp
pop
jbe
add
cmp
add
add
jmp
fdiv
sub
jle
push
(bad)
adc
mov
aam
pusha
dec
in
pop
into
inc
and
xchg
sti
iret
mov
pop
pop
daa
push
jmp
ret
push
push
cmp
add
imul
xchg
std
or
dec
inc
cmp
jecxz
mov
arpl
sar
jmp
push
add
add
xlat
add
push
call
clc
push
cs
scas
push
call
jle
test
inc
xchg
outs
hlt
(bad)
mov
div
iret
(bad)
mov
and
shr
sub
fidivr
ja
inc
mov
and
or
inc
adc
cmp
jecxz
xor
mov
repnz
and
(bad)
sub
push
repz
fdiv
pop
add
das
jne
cld
pop
lahf
movs
xor
xor
jae
fwait
mov
mov
sahf
les
jl
mov
push
gs
push
jnp
fwait
jecxz
push
jg
pop
mov
sub
sbb
in
(bad)
(bad)
dec
(bad)
stos
push
mov
jns
add
jns
cmps
adc
xchg
inc
mov
sbb
pop
mov
into
push
cmp
cmp
push
lea
movzx
aad
adc
lea
out
inc
mov
dec
enter
mov
stos
repz
test
fdiv
call
mov
mov
inc
ret
pop
cmp
dec
icebp
(bad)
dec
jbe
jl
cs
leave
jb
and
mov
shl
jne
ret
repz
ins
and
pop
mov
sbb
dec
mov
fld
sbb
jmp
push
repnz
sbb
out
jb
in
cmp
test
xchg
pusha
imul
push
adc
push
dec
cmp
push
adc
xchg
sub
out
dec
mov
and
mov
jecxz
outs
aad
popa
cmps
cmp
test
mov
cmc
dec
add
fwait
add
push
iret
jecxz
shl
inc
out
outs
jo
arpl
mov
outs
ret
jnp
fnstcw
in
add
int
icebp
cwde
jb
es
dec
inc
fld
sbb
dec
sub
inc
pop
div
push
jmp
xchg
xchg
jmp
js
shl
pusha
call
int3
lods
add
scas
xor
arpl
out
add
in
lahf
push
lock
adc
mov
sub
and
and
cmp
stc
cmp
dec
lods
les
cmp
inc
(bad)
fist
add
pushf
scas
jae
fild
pop
and
(bad)
icebp
popa
lods
out
sbb
vxorps
inc
dec
jp
gs
sbb
add
fs
imul
add
(bad)
std
loop
imul
pusha
pushf
add
lea
pushf
lea
jmp
jae
pusha
clc
cmp
stc
xor
push
pusha
lea
call
call
cld
push
jecxz
enter
jns
push
add
in
xchg
xchg
pop
mov
popa
or
cmp
xchg
xlat
push
add
retf
jg
push
fdiv
add
bound
cmp
inc
cmp
ror
idiv
adc
mov
push
xchg
(bad)
push
or
mov
neg
push
popa
mov
stos
ret
cmps
pslld
and
sbb
or
lock
sub
(bad)
fsubr
neg
sub
in
and
dec
outs
lock
ds
or
xor
sar
jmp
add
jge
dec
(bad)
cmp
shr
les
daa
sbb
mov
in
test
xor
mov
sahf
mov
jbe
data16
sar
mov
call
nop
cld
jecxz
sub
fisttp
mov
test
pop
loope
xor
rol
cdq
les
sti
dec
out
inc
fld
gs
jg
add
inc
mov
std
fadd
fcmovb
pushf
xor
(bad)
xchg
mov
sti
sbb
jmp
cmps
inc
addr16
cmps
popa
sub
add
cmp
mov
xchg
(bad)
(bad)
pop
jmp
fcom
push
add
in
push
sti
mov
jmp
ins
ficomp
loope
cmps
push
dec
ds
sub
sub
stc
xchg
pop
xchg
jno
(bad)
mov
mov
and
dec
push
mov
stc
mov
mov
dec
jno
mov
fsubr
cli
test
out
(bad)
hlt
cmp
nop
lock
cmp
mov
aam
or
mov
shl
push
push
xor
in
test
adc
mov
adc
sub
fdiv
push
push
out
and
call
xchg
das
mov
mov
ins
imul
mov
fdivp
xor
mov
mov
jo
aaa
sub
adc
xchg
mov
push
xor
outs
repnz
push
daa
out
pop
ret
add
add
clc
add
add
xor
xor
xor
push
xor
xor
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
sahf
ss
pop
aaa
cdq
aaa
int
fnstenv
hlt
aaa
xchg
(bad)
cmp
cmp
cmp
cmp
dec
cmp
popa
cmp
cmp
test
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
test
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ins
ds
movs
ds
fstp
in
jmp
cli
add
and
jl
test
add
add
fadd
add
or
daa
xor
xor
sahf
xor
add
or
and
inc
xor
pop
xor
xor
xor
xor
xor
xor
cmp
xor
pop
xor
jle
xchg
mov
mov
enter
in
xor
xor
xor
xor
xor
bound
xchg
mov
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ss
dec
xor
popa
xor
dec
ss
arpl
mov
ss
ss
aaa
aaa
push
aaa
imul
lock
adc
sti
cmp
sar
cmp
cmp
cmp
ja
in
jmp
ds
ds
ds
lea
cdq
add
add
add
les
add
and
xor
inc
xor
jnp
xchg
xor
xor
xor
xor
dec
ss
ss
xchg
call
or
adc
daa
aaa
push
aaa
test
lea
mov
aaa
add
cmp
or
sbb
and
dec
cmp
test
mov
lods
cmp
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
mov
cmp
push
ds
ds
ds
ds
ds
mov
mov
sar
(bad)
fstp
std
adc
jbe
jg
movs
aas
mov
mov
aas
add
add
add
add
inc
xor
xor
sti
cmp
cmp
cmp
cmp
add
dec
add
add
xor
xor
pop
aaa
xor
aaa
mov
cmp
cmp
cmp
cmp
cmp
jb
jns
mov
movs
cmp
cmp
idiv
pop
aas
inc
aas
outs
aas
xchg
aas
add
pusha
add
cwde
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
outs
xor
jg
test
mov
xchg
xor
int3
xor
xor
xor
xor
xor
xor
xor
jecxz
out
ss
ss
aaa
sbb
daa
aaa
xor
inc
aaa
dec
aaa
push
aaa
pop
aaa
fs
ins
aaa
je
jl
test
mov
xchg
aaa
pushf
aaa
movs
aaa
lods
aaa
mov
mov
aaa
aam
fdiv
in
in
aaa
hlt
aaa
cld
aaa
add
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
les
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
les
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
inc
cmp
pop
cmp
je
test
nop
cmp
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
sbb
and
and
sub
sub
xor
xor
dec
cmp
jo
je
js
jl
cmp
cmp
cmp
sar
aam
fdivr
fdivr
loopne
in
call
cmp
and
sub
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
push
cmp
test
xchg
cmp
mov
cmp
fdivr
in
cmp
clc
cmp
add
sbb
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
nop
ds
ds
mov
lods
ds
mov
mov
ds
ds
ds
add
add
or
or
adc
and
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
mov
aas
lods
aas
mov
mov
mov
aas
sar
lock
clc
aas
cld
aas
add
add
add
add
xor
or
or
adc
adc
sbb
sub
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
adc
sbb
sbb
and
and
sub
sub
inc
xor
xor
je
js
jl
xor
xor
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
sub
xor
xor
cmp
cmp
inc
xor
jo
js
jl
xor
xor
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
mov
les
in
in
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
xor
dec
xor
imul
enter
aam
fdiv
in
call
xor
push
ss
ss
ss
ss
ss
test
mov
movs
lods
ss
mov
mov
les
enter
sbb
cmp
ss
hlt
cmp
adc
and
sub
cmp
cmp
ds
cld
or
push
aas
push
aas
int
add
add
add
mov
jmp
xor
ss
ss
ss
ss
ss
ss
ss
ss
ss
jne
jns
jge
dec
aaa
push
aaa
adc
popf
cmp
cmp
cmp
cmp
cmp
cmp
jge
cwde
cmp
test
in
es
je
js
jl
cmp
add
nop
add
push
xor
xor
xor
xor
xor
mov
ss
aaa
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
ds
test
mov
mov
nop
ds
ds
ds
mov
lods
ds
mov
mov
ds
mov
add
and
dec
xor
xor
xor
xor
xor
xor
mov
(bad)
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jle
ret
aaa
or
cmp
cmp
cmp
cmp
cmp
cmp
adc
das
cmp
mov
cdq
cmp
cmp
cmp
cmp
cmp
cmp
ja
movs
cmp
cmp
cmp
cmp
cmp
mov
mov
ret
aas
out
add
add
add
adc
sbb
xor
push
xor
xor
mov
stos
xor
xor
xor
xor
xor
jp
mov
mov
retf
xor
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
xor
pop
outs
ss
sub
aaa
pushf
aaa
movs
aaa
cmp
imul
js
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xchg
movs
cmp
cmp
cmp
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
jae
xchg
xor
inc
ds
outs
ds
movs
ds
ds
mov
sar
(bad)
fdivr
loope
out
out
ds
ds
ds
ds
or
adc
pop
aas
and
sub
xor
aas
aas
inc
aas
dec
aas
push
aas
bound
addr16
jo
jns
cmp
aas
xchg
aas
mov
aas
aam
in
lock
cmc
aas
add
add
aam
add
xor
js
xchg
xor
xor
lods
xor
xor
popf
xor
xor
xor
xor
xor
xor
shl
xor
and
sub
xor
ss
ss
ss
ss
ja
xchg
xchg
ss
ss
add
adc
pusha
aaa
jbe
lahf
aaa
lods
aaa
enter
in
aaa
push
adc
sbb
cmp
push
cmp
jg
sahf
cmp
cmp
cmp
cmp
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
gs
je
lods
aas
mov
ret
aas
out
add
add
add
add
adc
xor
inc
xor
push
xor
pusha
xor
xor
xor
xor
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
test
mov
nop
ss
ss
mov
ss
mov
ss
shl
fdiv
fdiv
in
call
ss
add
or
or
adc
sbb
and
and
sub
xor
cmp
cmp
inc
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pusha
aaa
push
aaa
js
xor
aaa
mov
nop
aaa
cwde
aaa
pushf
aaa
movs
aaa
test
mov
mov
mov
aaa
int3
aaa
aam
fdiv
loopne
in
in
aaa
lock
clc
aaa
cld
aaa
add
or
adc
adc
sbb
and
sub
sub
xor
cmp
inc
cmp
pop
cmp
jge
xchg
xchg
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
bound
ins
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
ds
xchg
cmc
add
or
adc
sbb
push
aas
sub
das
aas
xor
aas
aas
inc
aas
dec
aas
push
aas
pop
aas
pusha
aas
imul
aas
jbe
cmp
xchg
aas
popf
aas
mov
aas
mov
aas
into
aas
fnstcw
fistp
in
out
aas
cmc
aas
cli
aas
add
add
cld
add
add
xor
xor
xor
xor
xor
xor
inc
xor
push
xor
arpl
push
xor
mov
(bad)
xor
stos
xor
xor
xor
xor
xor
xor
xor
xor
xor
bound
data16
mov
nop
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
sub
inc
xor
xor
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
dec
xor
js
jl
xor
xor
mov
shl
loopne
in
call
xor
sbb
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
xor
ss
lods
ss
mov
mov
les
enter
add
or
adc
adc
sbb
sbb
and
and
sub
sub
dec
aaa
ins
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
mov
shl
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
sbb
cmp
cmp
cmp
cmp
cmp
cmp
jae
scas
cmp
cmp
cmp
cmp
cmp
in
hlt
cmp
cmp
popa
cmp
xchg
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ja
xchg
add
add
loopne
add
or
daa
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
xor
lea
xchg
ss
ss
ss
mov
lods
ss
mov
mov
lds
leave
ss
shl
aad
loope
jl
mov
cmp
mov
mov
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
outs
cmp
ja
jnp
jg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
pop
aas
(bad)
aas
into
aas
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
cmp
add
or
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sysexit
adc
pop
xor
sub
aaa
xor
inc
xor
fs
pop
aaa
and
daa
aaa
sub
das
aaa
xor
aaa
aaa
cmp
aas
aaa
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
arpl
addr16
imul
aaa
(bad)
aaa
and
inc
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
mov
aas
push
aas
jo
lock
hlt
aas
clc
aas
cld
aas
add
add
add
jl
add
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ins
ss
ss
ss
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
enter
das
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
outs
cmp
ja
jnp
jg
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
xor
(bad)
cmp
sbb
cmp
int
sar
aad
fnstcw
fnstsw
loope
in
jmp
ds
ds
ds
add
add
aas
adc
adc
aas
and
sub
inc
aas
mov
aas
clc
aas
add
add
add
add
pop
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
jge
cdq
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
jne
jns
jge
xor
aam
in
cmp
cmp
jns
xchg
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
push
cmp
popa
cmp
ins
cmp
jns
jge
cmp
xchg
cmp
jno
add
add
add
lock
add
xor
xor
xor
mov
aaa
inc
aaa
push
aaa
data16
mov
iret
cmp
cmp
cmp
jge
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
xchg
cmp
fistp
add
pop
adc
sbb
es
inc
ds
arpl
imul
ds
jg
test
mov
(bad)
ds
ds
ds
cmps
lods
ds
mov
ds
sar
fidivr
in
ds
ds
or
adc
sbb
and
sub
xor
cmp
inc
aas
dec
aas
push
aas
pop
aas
fs
ins
aas
je
jl
test
mov
xchg
aas
pushf
aas
movs
aas
lods
aas
mov
mov
aas
fistp
in
aas
(bad)
aas
add
add
add
add
xchg
xor
xor
xor
xor
or
dec
xor
pushf
xor
test
push
ss
sub
das
xor
aaa
cmp
lea
out
aaa
sti
aaa
add
or
pop
cmp
cmp
cmp
push
cmp
jb
js
popf
cmp
sar
aam
fdivr
fdivr
loopne
in
call
cmp
cmp
cmp
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cwde
cmp
test
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
pushf
cmp
cmp
les
in
in
cmp
cmp
cmp
cmp
cmp
cmp
or
or
sbb
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
cwde
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
xor
dec
cmp
push
cmp
cmp
cmp
cwde
cmp
stos
cmp
sar
add
add
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
test
mov
pushf
ds
lods
ds
ds
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
sbb
sub
xor
xor
cmp
dec
aas
pop
aas
pop
aas
jo
cmp
aas
nop
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
fdivr
loopne
call
add
add
add
push
xor
xor
inc
xor
xor
xor
cwde
xor
test
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
cmp
dec
xor
pop
xor
mov
xchg
xor
shl
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
sbb
sub
sub
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
inc
xor
push
xor
pusha
xor
ins
xor
js
jl
xor
xor
aam
fdiv
in
call
xor
cld
xor
adc
sbb
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
ss
shl
aam
fdiv
fdiv
loopne
in
call
aaa
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
push
aaa
mov
mov
mov
aaa
(bad)
aaa
retf
aaa
(bad)
aaa
or
adc
sbb
sbb
sub
sub
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
dec
cmp
cmp
mov
cmp
les
in
in
cmp
cmp
cmp
cmp
cmp
cmp
or
or
inc
cmp
pusha
cmp
cmp
cmp
cmp
cmp
in
push
cmp
dec
ds
cmp
ds
ds
in
ds
ds
daa
aas
ss
jae
js
popf
aas
cmps
aas
mov
add
add
add
add
enter
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
out
std
xor
mov
aaa
inc
aaa
mov
les
lds
push
cmp
fdivr
mov
movs
cmp
cmp
jne
add
push
cmp
jmp
aas
add
add
add
inc
xor
xor
xor
push
xor
mov
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
sbb
pop
aaa
in
cmp
cmp
cmp
cmp
lea
cmps
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
hlt
cmp
nop
test
mov
add
add
popf
xor
xor
xor
inc
xor
pop
xor
xor
xor
xor
xor
xor
mov
fnstenv
loopne
xor
lods
cmp
cmp
cmp
(bad)
cmp
test
call
cmp
cmp
cmp
cmp
cmp
dec
ds
aas
sub
inc
aas
dec
aas
add
add
push
xor
je
jl
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
jmp
inc
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
jno
(bad)
xor
mov
aaa
in
sub
cmp
clc
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
(bad)
ds
aas
add
add
add
push
xor
xor
xor
xor
xor
mov
popf
xor
xor
xor
xor
xor
xor
adc
push
xor
jge
call
aaa
xchg
aaa
popf
aaa
mov
fbstp
add
adc
sub
(bad)
cmp
push
cmp
jle
scas
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
popf
ds
add
mov
add
add
add
xor
xor
xor
xor
xor
push
xor
pop
xor
arpl
xor
outs
xor
ja
jnp
jg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
div
movs
ss
std
ss
aaa
test
mov
iret
aaa
hlt
aaa
cmp
push
outs
cmp
jbe
jp
jle
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aaa
cmp
fwait
cmp
adc
das
ds
pop
ds
scas
ds
inc
aas
ja
jle
xchg
aas
add
add
push
add
add
jg
xchg
popf
xor
xor
xor
xor
xor
push
xor
imul
xor
xor
xor
xor
xor
xor
movs
xor
xor
xor
xor
shl
loope
out
ss
ss
jmp
cmp
cmp
sti
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
sar
fdivr
jmp
cmc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
and
sub
pusha
cmp
jo
je
js
jl
cmp
cmp
int3
cmp
fdivr
in
call
ds
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
mov
nop
ds
ds
ds
mov
lods
sar
ds
ds
ds
ds
add
add
or
sbb
cmp
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
mov
test
mov
mov
mov
aas
les
enter
sar
in
aas
add
add
xor
add
or
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
push
xor
xor
xor
cwde
xor
loopne
call
xor
xor
xor
xor
xor
or
and
inc
xor
dec
xor
push
xor
pop
xor
xor
xor
xor
xor
shl
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
inc
xor
push
xor
xor
xor
enter
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
inc
xor
xor
xor
xor
xor
test
lods
xor
xor
add
or
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
inc
xor
push
xor
pushf
xor
test
lods
xor
mov
xor
adc
adc
sbb
sbb
and
and
sub
sub
push
ss
jl
xor
mov
mov
nop
ss
ss
ss
ss
lock
ss
ss
add
add
or
or
adc
xor
push
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
pushf
aaa
mov
aaa
int3
aaa
shl
aam
fdiv
fdiv
loopne
in
add
and
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
xchg
cmp
cmp
mov
pop
cmp
je
xchg
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sub
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
je
js
aaa
cmp
push
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
xor
dec
cmp
pusha
cmp
js
cmp
cmp
mov
mov
cmp
loopne
call
cmp
adc
sbb
and
sub
xor
cmp
inc
ds
ds
ds
ds
ds
cmp
ds
ds
cmps
ds
sar
fdivr
in
clc
add
add
or
or
adc
adc
sbb
sbb
and
cs
ss
jbe
mov
fidivr
add
add
cmp
add
sub
call
cmp
dec
ds
xchg
ds
ds
out
cld
or
es
xor
aas
push
aas
addr16
out
repz
add
add
add
push
xor
xor
xor
jl
mov
xchg
xor
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
adc
sbb
sbb
and
and
sub
sub
xor
xor
dec
xor
jo
je
js
jl
xor
xor
xor
loopne
in
call
xor
xor
xor
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
jnp
mov
popf
ss
ss
ss
adc
and
aaa
pop
aaa
imul
pushf
aaa
lods
aaa
mov
aaa
icebp
aaa
add
adc
and
xor
cmp
jae
cmp
stos
cmp
cmp
cmp
cmp
jbe
mov
jae
cmp
pop
cmp
pushf
cmp
aam
fdivr
call
cmp
cld
cmp
or
or
sub
dec
ds
ds
ds
ds
ds
ds
ds
js
jl
cmp
mov
mov
nop
ds
ds
ds
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
aas
inc
aas
data16
js
mov
xchg
aas
add
add
and
add
or
and
cmp
dec
xor
mov
xor
xor
lea
mov
xor
xor
xor
xor
xor
xor
xor
jno
mov
sti
xor
xor
xor
xor
xor
stc
xor
push
ss
xor
ss
ss
ss
and
and
aaa
push
aaa
iret
aaa
loopne
in
aaa
sti
aaa
or
xor
cmp
cmp
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
js
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
movs
cmp
sub
aaa
ds
ds
ds
ds
jb
js
jg
mov
(bad)
ds
mov
ds
idiv
sbb
daa
aas
cs
cmp
dec
aas
pop
aas
fs
jo
test
mov
nop
aas
xchg
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
mov
aas
(bad)
aas
fidivr
out
out
aas
idiv
(bad)
aas
add
add
add
adc
add
push
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
xlat
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xchg
xor
xor
xor
xor
xor
fwait
xor
xor
pop
xor
in
xor
xor
ss
ss
and
aaa
mov
cmp
cmp
cmp
xor
push
cmp
cmp
test
lods
cmp
cmp
enter
sar
aam
fdivr
lock
cmp
cmp
and
and
sub
sub
xor
xor
cmp
pop
cmp
jo
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
iret
cmp
and
mov
push
aas
inc
aas
arpl
cmp
aas
stos
aas
mov
add
xor
xor
xor
jp
lods
xor
xor
xor
xor
xor
xor
xor
xor
leave
xor
(bad)
ss
or
and
aaa
cmp
aaa
push
aaa
jbe
cli
aaa
adc
cmp
cmp
dec
cmp
pop
cmp
ins
cmp
cmp
cmp
(bad)
cmp
jg
mov
jmp
fwait
cmp
cmp
cmp
cmp
je
sar
add
xor
add
add
add
stos
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jne
mov
xchg
xor
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
test
xchg
xor
xor
xor
pusha
ss
adc
aaa
fdiv
cmp
cwde
cmp
cmp
cmp
cmp
cmp
cmp
cmp
add
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
inc
cmp
dec
cmp
pop
cmp
fs
jo
je
js
jl
cmp
cmp
fstp
push
ds
sbb
sub
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
ds
js
jl
cmp
mov
cwde
ds
lods
ds
ds
call
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
dec
aas
pop
aas
pop
aas
jle
mov
(bad)
aas
cld
aas
add
add
add
add
add
xor
xor
push
xor
ins
xor
jl
mov
xchg
xor
xor
mov
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
cmp
bound
mov
cwde
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
sub
xor
inc
xor
xor
xor
xor
xor
xor
xor
push
xor
push
ss
ss
das
aaa
push
aaa
push
cmp
lods
cmp
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sub
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jo
je
js
jl
cmp
cmp
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
pusha
cmp
mov
cwde
cmp
movs
cmp
out
cmp
or
sbb
sub
aas
ds
ds
xchg
ds
ds
ds
ds
aas
sbb
das
aas
push
fistp
add
add
dec
xor
xor
xor
xor
xor
xor
xor
imul
movs
xor
dec
xor
xor
xor
xor
ds
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
test
(bad)
xor
push
ss
mov
ss
xor
pop
aaa
jl
mov
mov
pushf
aaa
movs
aaa
test
lods
aaa
mov
mov
mov
aaa
les
enter
shl
fidiv
out
out
aaa
adc
sub
xor
dec
cmp
lahf
cmp
cmp
cmp
and
and
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jg
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
bound
ret
cmp
dec
aas
pop
aas
je
mov
test
ret
aas
add
add
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
and
xor
dec
xor
jns
xchg
xor
xor
xor
ss
arpl
mov
popf
ss
aaa
ins
aaa
xchg
mov
aaa
out
aaa
or
and
cmp
pop
cmp
nop
cmp
cmp
fs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sti
ds
aas
push
aas
mov
aas
add
add
add
add
xor
xor
xor
ins
xor
xor
xor
dec
xor
xor
xor
xor
cwde
xor
test
lods
xor
xor
enter
shl
call
xor
cmp
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
fdiv
xor
cmp
push
ss
les
enter
shl
or
getsec
adc
pusha
aaa
fs
push
aaa
mov
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
aaa
add
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
xor
inc
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
pop
cmp
cmp
cmp
cmp
jbe
cmp
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
dec
cmp
js
jl
cmp
cmp
mov
sar
loopne
in
call
cmp
adc
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
xchg
ds
mov
lods
ds
mov
mov
ds
ds
or
or
adc
adc
sbb
sbb
and
and
pop
aas
xchg
fwait
aas
mov
add
add
xor
jbe
mov
test
mov
xor
xor
xor
xor
xor
jg
mov
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
out
xor
pusha
ss
mov
call
sbb
dec
aaa
push
aaa
imul
mov
mov
aaa
xlat
aaa
fdiv
out
jmp
cmc
aaa
cli
aaa
add
or
adc
sbb
and
daa
cmp
cmp
cmp
inc
cmp
push
cmp
arpl
ins
cmp
jl
cmp
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
bound
ins
cmp
jnp
cmp
cmp
cmp
cmp
aad
fidivr
in
jmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
pop
cmp
imul
cmp
jg
mov
mov
cwde
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
push
outs
cmp
jle
mov
lea
xchg
cmp
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
push
cmp
ja
test
stos
cmp
sar
stc
cmp
and
sub
ds
ds
outs
ds
mov
xchg
mov
ds
ds
ds
lock
or
pop
aas
and
xor
ds
dec
aas
pop
aas
gs
jb
jg
mov
cdq
aas
cmps
aas
scas
aas
mov
aas
sar
fdivr
in
out
aas
idiv
add
add
add
add
or
adc
sbb
and
scas
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
jo
cmp
cmp
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sub
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
dec
cmp
stos
cmp
push
aas
fs
jbe
jl
mov
mov
pushf
aas
movs
aas
test
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
fdivr
loopne
in
repnz
add
add
or
sbb
sbb
xor
pop
xor
jge
mov
xor
xor
xor
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
inc
xor
push
xor
pop
xor
push
xor
jl
xor
xor
cwde
xor
scas
xor
aam
out
jmp
ss
cmps
xlat
mov
aaa
fnsave
cmc
aaa
or
mov
cmp
cmp
cmp
cmp
cmp
pusha
cmp
cmp
push
cmp
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
inc
cmp
jle
cwde
cmp
(bad)
cmp
sbb
cs
ds
outs
cmp
ds
aas
ss
push
aas
fwait
aas
cmps
aas
mov
(bad)
aas
sar
fistp
in
aas
(bad)
aas
add
add
add
or
pop
xor
xor
pop
xor
xor
xor
xor
xor
nop
xor
mov
xor
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
dec
xor
push
xor
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
xor
inc
xor
bound
mov
nop
xor
clc
xor
xor
outs
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
xor
cmp
pop
xor
mov
xchg
xor
mov
xor
in
call
xor
cld
xor
xor
cmp
inc
ss
ss
ss
ss
ss
ss
ss
xchg
mov
xor
pushf
aaa
stos
aaa
ret
cmp
push
cmp
cmp
cmp
dec
cmp
mov
xor
aam
jecxz
adc
cmp
cmp
jno
mov
xor
sahf
lods
ds
ds
xchg
aas
sar
add
add
add
pushf
add
add
xor
jno
cwde
xor
xor
xor
push
xor
jg
mov
fnsave
and
imul
xor
xor
xor
fidiv
and
jge
mov
mov
adc
cmp
dec
aaa
js
xchg
aaa
mov
cmp
cmp
arpl
movs
cmp
cmp
cmp
cmp
cmp
imul
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
loope
dec
ds
push
aas
inc
aas
push
aas
cmp
aas
add
add
mov
add
pop
xor
xor
xor
xor
xor
and
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
pop
xor
js
jl
xor
xor
xor
mov
xor
xor
mov
fdiv
icebp
xor
xor
xor
xor
xor
xor
xor
repnz
jmp
aaa
push
xchg
aaa
movs
aaa
mov
cmp
push
cmp
jbe
mov
mov
cmp
cmp
cmp
cmp
outs
cmp
xchg
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
push
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
scas
cmp
adc
aaa
ds
fs
ds
mov
mov
ds
fdivr
fdivr
loopne
in
call
ds
ds
ds
or
adc
sbb
and
sub
inc
aas
push
aas
push
aas
ins
aas
xchg
aas
mov
fdivr
stc
aas
add
add
add
enter
sbb
cmp
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
inc
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sub
xor
je
js
jl
xor
xor
les
aam
fdiv
in
call
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
xor
mov
nop
ss
ss
ss
mov
ss
ss
ss
ss
ss
add
add
or
or
adc
adc
sub
dec
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
nop
aaa
mov
mov
aaa
les
enter
shl
aam
fdiv
clc
aaa
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cwde
cmp
test
les
in
in
cmp
cmp
cmp
cmp
cmp
cmp
or
or
sub
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
nop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
and
sub
sub
xor
xor
cmp
cmp
push
cmp
cmp
cmp
cwde
cmp
fstp
idiv
adc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
mov
mov
cmp
out
cmp
or
push
adc
and
daa
cmp
inc
ds
ds
bound
jno
test
lods
ds
aas
and
xor
cmp
aas
lea
lahf
aas
sar
add
lock
fadd
add
sub
xor
push
xor
xor
sbb
pop
xor
xor
xor
xor
xor
xor
xor
outs
xor
loop
dec
aaa
mov
aaa
repz
add
or
and
nop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
cmp
push
cmp
outs
cmp
cmp
cmp
cmp
mov
test
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cs
(bad)
cmp
and
cwde
cmps
ds
idiv
sti
ds
add
pop
aas
or
(bad)
adc
pop
aas
push
aas
mov
aas
in
aas
cld
aas
add
add
jo
add
adc
sbb
das
xor
push
xor
ins
xor
push
xor
mov
cdq
xor
xor
xor
xor
xor
xor
dec
xor
jns
mov
movs
xor
xor
xor
xor
push
xor
lea
(bad)
xor
in
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
shl
fidiv
loop
jmp
aaa
sub
dec
aaa
jo
(bad)
aaa
mov
jmp
push
cmp
cmp
cmp
test
dec
cmp
push
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
enter
sar
aam
fdivr
fdivr
loopne
in
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
es
pop
cmp
mov
test
mov
cmp
sar
fdivr
call
cmp
cld
cmp
or
or
adc
adc
sbb
es
ds
bound
je
test
xchg
ds
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
hlt
ds
or
inc
aas
ins
aas
jge
movs
aas
(bad)
aas
add
add
add
mov
add
sbb
inc
xor
xor
xor
ins
xor
sub
in
xor
xor
jbe
stos
xor
xor
xor
xor
xor
xor
xor
jns
std
xor
push
ss
stos
ss
aaa
xchg
aaa
jmp
or
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jp
xchg
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
loopne
or
cmp
dec
aas
pop
aas
add
add
push
add
add
xor
xor
jecxz
add
sub
cmp
mov
xchg
xor
xor
xor
xor
xor
inc
xor
xor
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
cmp
dec
xor
push
lea
mov
clc
xor
xor
xor
xor
sub
movs
adc
pushf
aaa
jmp
push
cmp
cmp
cmp
cmp
(bad)
cmp
cmp
dec
cmp
cmp
cmp
movs
cmp
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
lea
sar
push
ds
ds
ds
ds
fnstsw
in
inc
aas
inc
aas
dec
aas
push
aas
pop
aas
pusha
aas
jo
js
jl
cmp
aas
mov
mov
nop
aas
xchg
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
mov
mov
aas
cmc
aas
stc
aas
add
add
hlt
add
add
xor
sbb
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
cwde
xor
loopne
call
xor
xor
xor
xor
xor
or
sbb
sub
cmp
inc
xor
dec
xor
push
xor
pop
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
and
aaa
xor
xor
xor
xor
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
ins
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmps
xor
out
xor
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
test
cwde
mov
lods
ss
mov
mov
les
enter
jbe
mov
aaa
xchg
cmp
cmp
cmp
cmp
cmp
jnp
movs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
pop
cmp
dec
ds
xchg
les
dec
aas
push
jnp
mov
mov
aas
add
add
xor
xor
xor
xor
pop
xor
xchg
xor
xor
pop
xor
xor
xor
xor
xor
xor
xchg
xor
xor
xor
xor
mov
ss
aaa
xchg
aaa
or
cmp
cmp
cmp
cmp
cmp
mov
lahf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pusha
cmp
push
ds
ds
ds
idiv
sbb
add
add
xor
adc
xor
fbstp
mov
sub
dec
aaa
ja
xchg
aaa
mov
cmp
test
sub
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
imul
cmp
cmp
cmp
cmp
push
cmp
and
ds
out
adc
cmp
popa
aas
popf
aas
add
add
add
cld
xor
shl
inc
xor
xor
xor
xor
xor
xor
sbb
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
aas
xor
ret
xlat
ss
lock
getsec
sbb
sub
cmp
inc
aaa
push
aaa
pusha
aaa
jb
jg
mov
cwde
aaa
stos
aaa
mov
ret
aaa
shl
loop
out
aaa
sti
aaa
or
sbb
aaa
cmp
push
cmp
outs
cmp
mov
call
cmp
cmp
je
xchg
dec
cmp
cmp
cmp
sti
cmp
pop
or
(bad)
adc
pop
sbb
pop
and
daa
sub
das
xor
aaa
cmp
aas
ds
ds
ds
ds
ds
ds
ds
ds
arpl
imul
aas
fs
cmps
aas
add
add
add
add
xor
xor
mov
cmp
cmp
jns
int3
cmp
cmp
cmp
add
add
add
cmp
xchg
xor
inc
cmp
pusha
cmp
xchg
aas
lock
add
add
add
and
xor
repz
cmp
cmp
xor
pop
cmp
push
cmp
mov
mov
mov
cmp
int3
cmp
sbb
cs
xchg
add
add
add
dec
xor
xor
xor
xor
xor
push
xor
jo
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
xor
(bad)
cs
cmp
mov
cmp
cmp
cmp
dec
cmp
cmp
xchg
mov
mov
cmp
cmp
cmp
cmp
push
aas
add
add
jne
xor
and
xor
xchg
xor
xor
or
push
xor
(bad)
push
ss
sub
mov
ss
ss
mov
mov
(bad)
call
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
dec
aaa
push
aaa
pop
aaa
jb
(bad)
add
inc
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
imul
cmp
cmp
cmp
cmp
and
cmp
mov
add
pop
xor
and
mov
aaa
xor
dec
aaa
jb
mov
mov
cmp
jns
fdivr
push
cmp
push
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
push
cmp
jno
xchg
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
add
adc
add
xor
xor
xor
xor
xor
xor
mov
ret
xor
dec
ss
fidiv
cmc
ss
inc
aaa
xor
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ins
cmp
lahf
cmp
cmp
mov
out
nop
cmp
cmp
cmp
xchg
cmp
cmp
cmp
mov
jmp
aas
push
aas
mov
loope
out
aas
add
add
add
mov
xor
xor
xor
xor
xor
xor
pop
xor
xor
xor
jb
jl
mov
mov
xor
cmps
xor
xor
xor
xor
xor
mov
and
ss
ss
push
aaa
sub
js
xchg
aaa
lock
add
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
mov
call
cmp
cmp
cmp
cmp
xchg
cmp
mov
jmp
aas
aas
aas
xchg
cdq
aas
add
add
mov
add
adc
xor
push
xor
xor
xor
pusha
xor
xor
xor
xor
xor
dec
sbb
imul
test
mov
cmp
cmp
cmp
cmp
cmp
xchg
cmp
cmp
sbb
sub
cmp
aas
cmp
test
mov
cmp
cmp
cmp
cmp
cmp
cmp
push
ds
cli
ds
sbb
aas
dec
aas
scas
aas
mov
add
lods
add
add
and
arpl
out
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xchg
stos
ss
aaa
test
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
fidiv
lock
or
xor
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
pusha
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
add
add
add
push
xor
xor
xor
xor
xor
xor
dec
xor
jle
hlt
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
stos
xor
aaa
ss
ss
ss
pop
aaa
fwait
aaa
les
in
div
or
and
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
popa
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
retf
cmp
lock
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
ds
ds
ds
ds
mov
lods
ds
mov
mov
les
enter
sar
in
lock
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
pop
aas
jo
nop
aas
cwde
aas
pushf
aas
mov
aas
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
in
aas
add
add
mov
add
or
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xchg
xor
xor
mov
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
sbb
cmp
push
xor
js
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
push
xor
js
jl
xor
xor
xor
popf
xor
dec
ss
lods
ss
push
aaa
dec
aaa
ja
mov
add
inc
cmp
cmp
ins
cmp
cmp
cmp
cmp
test
mov
cmp
cmp
cmp
cmp
cmp
cmp
sar
sar
ds
inc
aas
jae
scas
aas
clc
aas
add
add
add
mov
xor
popf
xor
xor
xor
xor
xor
xor
test
mov
xor
xor
fwait
xor
xor
xor
xchg
inc
ss
ss
ss
push
adc
es
cmp
dec
aaa
mov
ret
aaa
sbb
cmp
sahf
cmp
cmp
cmp
jl
int3
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
test
push
aas
das
aas
inc
aas
push
aas
bound
jae
test
xchg
aas
mov
add
inc
add
mov
xor
xor
xor
xor
xor
aaa
xor
xor
xor
xor
xor
getsec
inc
aaa
leave
aaa
loopne
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
addr16
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
sub
pop
cmp
jbe
(bad)
cmp
clc
cmp
outs
aas
jmp
add
add
add
add
xor
mov
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
outs
xor
scas
xor
xor
xor
xor
xor
xor
push
shl
xor
xor
xor
xor
xor
in
ss
ss
aaa
repz
or
cmp
cmp
cmp
cmp
cmp
int
out
(bad)
cmp
cmp
cmp
cmp
scas
ds
or
adc
aas
jno
add
add
add
add
xor
xor
xor
bound
push
xor
xor
test
lods
xor
xor
xor
xor
xor
xor
xor
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
dec
xor
pop
xor
xor
lods
xor
xor
enter
fidiv
loop
or
pop
xor
xor
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
fdiv
add
ss
ss
xchg
xchg
ss
cmps
ss
ss
ss
hlt
ss
aaa
push
aaa
pop
aaa
push
aaa
jg
lea
fwait
aaa
test
aaa
shl
loope
repz
add
(bad)
cmp
cmp
arpl
jge
nop
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jnp
movs
cmp
pop
aas
xchg
aas
in
repz
add
add
sbb
xor
mov
xor
push
xor
xor
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
outs
xor
and
dec
bound
jnp
mov
(bad)
ss
xor
push
aaa
pop
aaa
xchg
lahf
aaa
stc
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
ds
lods
sar
adc
gs
imul
fidivr
add
add
adc
xor
pop
xor
fdiv
add
xor
ja
cwde
xor
and
cmp
clc
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
jbe
fwait
xor
xchg
mov
aaa
mov
cmp
cmp
jne
(bad)
cmp
cmp
cmp
cmp
dec
cmp
ins
cmp
fnstsw
call
cmp
or
aaa
cmp
popf
cmp
cmp
cmp
cmp
cmp
inc
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
(bad)
cmp
cmps
cmp
in
cmp
(bad)
cmp
inc
ds
ds
cmp
ds
add
pop
aas
adc
and
sub
ds
dec
aas
pop
aas
pusha
aas
imul
aas
mov
(bad)
aas
fdivr
cmc
aas
add
add
add
adc
das
xor
xor
xor
xor
xor
xor
test
lods
xor
xor
xor
outs
xor
xor
xor
xor
xor
xor
pusha
xor
mov
mov
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
scas
xor
aam
fdiv
add
sbb
ss
ss
ss
ss
ss
outs
ss
test
xchg
ss
shl
add
adc
push
aaa
xor
push
aaa
pop
aaa
pop
aaa
fs
xchg
aaa
mov
aaa
jmp
repnz
cli
aaa
add
or
sbb
and
cmp
cmp
cmp
cmp
imul
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
mov
cmp
cmp
cmp
cmp
cmp
inc
cmp
data16
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
jae
(bad)
cmp
cmp
cmp
aas
es
xor
cmp
inc
aas
dec
aas
pop
aas
bound
ins
aas
jbe
mov
pushf
aas
mov
aas
lods
aas
mov
mov
mov
aas
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
movs
xor
xor
mov
add
add
add
inc
xor
xor
cmp
cmp
pusha
xor
xor
xor
test
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
pop
xor
xor
xor
pushf
xor
mov
xor
xor
xor
xor
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cwde
cmp
test
lods
cmp
cmp
enter
pop
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
jo
add
add
add
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
adc
xor
add
jnp
sub
dec
xor
xor
jle
int3
xor
xor
xor
xor
inc
cmp
cmp
xchg
ds
adc
adc
add
sub
daa
cmp
add
add
adc
adc
add
lds
cmp
add
adc
sub
add
ins
xor
xchg
xor
pop
aaa
dec
cmp
cmp
inc
cmp
cmp
aas
cmp
add
adc
and
add
pop
xor
xor
jl
mov
add
mov
(bad)
cmp
cmp
add
add
adc
or
add
adc
cmp
sub
add
xor
arpl
pop
xor
push
xor
xor
or
xchg
ss
push
lock
sbb
xor
adc
stos
sar
out
aas
add
add
add
add
mov
mov
loope
adc
push
ss
std
cmp
cmp
aas
add
add
add
add
xor
jns
xchg
xor
xor
xor
xor
xor
xor
repz
mov
push
cmp
add
add
add
mov
jo
add
add
add
cmp
cmp
cmp
aas
add
add
js
loope
add
and
inc
cmp
add
nop
adc
cmp
add
or
fbstp
cmc
xor
imul
mov
lds
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
add
mov
add
pop
xor
jnp
mov
cli
xor
xor
dec
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
je
js
jl
xor
xor
loopne
in
call
ss
mov
enter
(bad)
ss
and
ins
aaa
mov
mov
cmp
cmp
cmp
mov
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
aas
sar
add
or
adc
daa
aas
inc
aas
pop
aas
gs
je
jns
mov
scas
aas
fdivr
jmp
add
add
add
shl
sti
xor
xor
xor
xor
xor
xor
xor
outs
xor
mov
xor
sbb
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
mov
movs
fdiv
in
xor
inc
aaa
inc
aaa
push
aaa
pop
aaa
push
aaa
xchg
aaa
pushf
aaa
ret
aaa
retf
aaa
shl
fdiv
fidiv
in
jmp
repz
cli
aaa
push
pop
cmp
cmp
and
cmp
xor
cmp
cmp
push
cmp
jbe
jnp
xchg
mov
xchg
cmp
cmp
out
cmp
pop
cmp
cmp
cmp
cmp
lea
cli
aas
add
add
adc
jo
add
and
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
scas
xor
hlt
xor
test
ss
aaa
pop
aaa
data16
jae
movs
aaa
in
jmp
clc
cmp
cmp
xor
inc
test
add
adc
add
add
xor
xor
inc
xor
xor
jl
xor
aaa
pop
cmp
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aas
cmp
ins
cmp
(bad)
inc
ds
ds
sar
fstp
sbb
and
aas
add
adc
fadd
add
cmp
xor
xor
xor
xor
pop
xor
ja
xor
xor
dec
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
xchg
xor
mov
iret
xor
in
xor
and
popf
mov
lea
stos
aaa
add
fdivr
in
cld
cmp
imul
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
ds
ds
ds
ds
ds
mov
ds
mov
ds
lock
ds
or
(bad)
and
sub
ds
inc
aas
dec
aas
push
aas
pusha
aas
data16
xchg
aas
xchg
aas
test
add
add
adc
mov
xor
xor
xor
xor
imul
ss
adc
sbb
xor
inc
aaa
pop
aaa
popa
aaa
xchg
aaa
or
mov
cmp
cmp
cmp
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
sar
cmp
adc
cmp
ins
ds
js
jl
cmp
mov
mov
nop
fidivr
loopne
in
call
add
add
add
xor
test
xor
push
xor
pop
xor
xor
xor
xor
xor
dec
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
call
xor
cmp
bound
call
cmp
cmp
cmp
add
adc
add
xor
xor
xor
xor
arpl
jge
mov
cdq
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
div
push
cmp
cmp
cmp
cmp
cmps
cmp
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aas
cmp
or
push
aas
adc
sbb
and
daa
aas
cs
xor
aas
dec
aas
push
aas
pop
aas
popa
aas
imul
cmp
aas
xchg
aas
pushf
aas
cmps
aas
mov
aas
add
add
adc
add
xor
xor
xor
xor
xor
xor
jg
fidiv
adc
xor
xor
push
xor
(bad)
xor
xor
xor
xor
xor
xor
xor
xor
(bad)
xor
das
aaa
mov
cmp
cmp
sar
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sar
in
mov
aas
add
add
adc
add
jg
xchg
lock
or
sbb
sub
xor
inc
xor
push
jno
js
push
xor
jb
sahf
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
inc
xor
xor
jb
ja
add
add
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
les
enter
add
add
add
add
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
push
cmp
pop
cmp
ins
sar
aam
fdivr
fdivr
loopne
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
add
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
fdiv
loopne
in
mov
mov
xor
xor
xor
xor
xor
xor
sbb
and
cmp
cmp
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
sub
cmp
cmp
inc
xor
pusha
xor
je
jl
xchg
xor
mov
xor
xor
xor
xor
or
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
cmp
push
xor
push
xor
mov
xor
inc
ss
ss
mov
xchg
ss
shl
lock
adc
xor
dec
aaa
push
aaa
jo
nop
aaa
mov
shl
lock
adc
xor
dec
cmp
ins
cmp
mov
nop
cmp
cmp
cmp
cmp
cmp
cmp
je
js
cmp
cmp
add
add
add
add
sbb
and
cmp
mov
xor
or
sbb
sub
dec
ss
ss
ss
ss
ss
aaa
add
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
les
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sbb
and
and
sub
sub
xor
xor
inc
cmp
pop
cmp
cmp
fdivr
call
cmp
cld
cmp
cmp
pop
aas
jl
movs
aas
les
enter
add
add
sub
dec
xor
xor
push
add
add
es
cmp
adc
add
add
add
xor
cmp
cmp
(bad)
aas
loopne
add
and
add
add
dec
xor
aaa
mov
cmp
add
xor
add
add
mov
xor
xor
xor
jl
cmp
cmp
cmp
add
add
add
mov
xor
xor
cmp
ds
arpl
add
add
add
add
add
fidivr
dec
cmp
cmp
pusha
push
add
add
fdiv
repnz
xor
cmp
and
add
add
add
add
dec
xor
(bad)
xor
xor
cmp
add
adc
or
add
jb
bound
add
add
push
xor
cmp
sahf
aas
add
add
daa
xor
xor
movs
cmp
addr16
mov
add
add
add
xchg
xor
cmp
cmp
rcl
adc
add
sub
enter
add
add
push
add
add
add
xor
xor
cmp
add
loopne
add
add
add
cmp
aas
add
push
add
add
push
xor
cmp
or
(bad)
cmp
add
add
add
add
ss
call
cmp
ds
adc
mov
adc
add
add
add
fwait
xor
cmp
cmp
cmp
cmp
js
add
pop
add
add
add
mov
add
add
and
xlat
xor
mov
loope
sbb
cmp
inc
pop
add
add
shl
add
aaa
or
pop
cmp
cmp
cmp
add
push
pop
add
add
outs
cmp
add
add
add
add
xor
xor
ss
retf
cmp
pop
add
add
add
jo
mov
xor
(bad)
ss
fdivr
mov
cmp
scas
add
add
add
das
xor
xor
xor
cmp
nop
pop
add
add
add
leave
aaa
(bad)
aaa
ret
mov
add
or
sub
dec
xor
xor
xor
ss
cmp
cmp
cmp
pop
add
add
sar
sldt
pop
add
add
jo
jnp
gs
fdiv
jmp
aas
je
add
add
pop
add
add
add
xor
sub
xor
cmp
cmp
aas
aad
add
add
pop
add
add
inc
xor
add
add
xor
add
add
sbb
sbb
add
and
ss
aaa
mov
cmp
adc
add
add
add
xor
cmp
cmp
add
and
add
add
pushf
xor
xor
cmp
add
inc
sbb
adc
add
data16
xor
push
sbb
sbb
add
ret
aaa
adc
scas
cmp
mov
aas
add
add
add
add
and
xor
sar
add
add
add
add
les
sub
add
add
int
(bad)
mov
add
add
add
dec
xor
jb
jge
add
add
inc
xor
sbb
sar
cmp
sbb
cmp
aas
retf
aas
add
and
add
or
xor
pop
xor
xor
aaa
dec
aaa
xchg
cmp
cmp
add
add
sbb
or
add
xor
adc
add
sbb
adc
add
rdtsc
stos
cmp
aas
fdivr
stc
aas
add
add
sbb
and
add
push
xor
mov
cmp
leave
cmp
cmp
sar
add
add
add
xor
ss
ss
aas
add
sbb
adc
add
xchg
xor
xor
cmp
aas
add
sbb
and
add
lea
mov
div
sub
push
cmp
cmp
sar
cmp
add
add
sbb
sbb
add
mov
xor
xor
aas
cmc
aas
add
sbb
and
add
adc
push
xor
xor
mov
xor
outs
cmp
mov
jp
add
add
add
dec
xor
movs
xor
xor
push
cmp
ds
add
add
add
mov
pop
cmp
in
cmp
add
add
add
add
add
mov
cmp
jo
add
add
add
xor
xor
lahf
cmp
lahf
cmp
cmp
add
sbb
sbb
add
outs
xor
xor
xor
cmps
ss
add
nop
sbb
sbb
add
sub
addr16
mov
or
je
add
add
add
cmp
scas
xor
fidivr
push
cmp
add
add
mov
rcr
adc
add
(bad)
xor
shl
xor
add
add
sbb
sbb
add
pop
xor
aad
sbb
jl
mov
add
sub
add
cmp
xor
xor
xor
xor
xor
xor
jmp
cmp
add
sbb
sbb
add
dec
xor
bound
ja
fdiv
mov
lahf
aaa
movs
cmp
adc
add
mov
xor
aas
add
sbb
sbb
add
dec
xor
xor
mov
xchg
xor
sbb
or
add
push
xor
add
add
and
mov
cmp
sbb
adc
add
push
aaa
addr16
cmp
cmp
add
add
add
and
sbb
adc
add
push
aaa
sar
das
cmp
aas
add
add
add
add
add
xor
ss
cmp
add
add
mov
xor
sbb
sbb
add
cmp
outs
xor
xor
cmp
aas
add
add
add
test
or
out
ss
ss
in
cmp
mov
add
add
mov
xor
pushf
cmp
add
rcr
adc
add
lods
xor
xor
aaa
sub
add
rcr
add
add
add
cmp
cmp
loopne
add
add
push
xor
cmp
add
add
sbb
adc
add
push
ss
ss
aaa
pushf
cmp
adc
add
repnz
cmp
adc
add
add
add
cmp
ds
and
add
add
sbb
or
add
sbb
push
cmp
xor
add
add
add
cmp
xor
xor
jle
pop
cmp
adc
add
(bad)
xor
aaa
xor
test
add
add
add
div
mov
aas
cmc
aas
add
add
add
add
add
xor
mov
add
add
push
xchg
xor
xor
cmp
cmp
cmp
sbb
adc
add
xor
add
nop
sbb
adc
add
mov
(bad)
xor
mov
popf
cmp
cmp
mov
add
mov
cmp
cmp
mov
add
add
cmp
cmps
xor
xor
xchg
ss
xor
jne
add
sbb
or
add
dec
cmp
add
sbb
adc
add
sub
popa
xor
sbb
add
add
ins
xor
pop
cmp
jg
add
add
sbb
adc
add
inc
cmp
cmp
add
sbb
add
outs
xor
xor
xor
xor
dec
aaa
mov
add
add
jle
test
iret
cmp
add
add
sbb
or
add
out
add
add
sbb
or
add
aad
inc
cmp
inc
sbb
adc
add
mov
cmp
push
sbb
sbb
add
pop
xor
pop
ss
or
mov
add
add
add
xor
xor
aas
in
aas
add
add
add
jp
mov
mov
cmp
or
les
sub
jge
add
add
ins
ss
cmp
cmp
pop
ds
sbb
add
add
add
cmp
aaa
pusha
cmp
mov
add
mov
aaa
mov
cmp
mov
add
add
add
xor
cmp
push
cmp
rcr
add
add
aaa
retf
rcr
sbb
add
xchg
xor
das
xor
clc
cmp
cmp
cmp
add
sbb
sbb
add
out
xor
xor
xor
cmp
add
sbb
adc
add
(bad)
push
xor
cmp
cmp
adc
add
movs
xor
jmp
adc
add
leave
xor
cmp
add
and
add
or
popf
aas
add
add
sbb
add
xor
cmp
add
add
add
add
cmp
ss
aaa
ret
aaa
push
addr16
cmp
cmp
sbb
add
xor
dec
cmp
ds
aas
ds
sar
add
add
add
sbb
shl
xor
aaa
hlt
cmp
cmp
add
add
add
add
fnstenv
xor
mov
sbb
dec
xor
mov
add
add
add
test
mov
add
pop
xor
cmp
cmp
cmp
aas
add
add
add
add
jge
out
cmp
sbb
add
jle
das
xor
add
stos
cmp
add
sbb
add
out
aaa
ins
cmp
cmp
dec
push
mov
test
cmc
pusha
mov
mov
mov
lea
jne
shld
sar
push
xadd
sub
mov
add
lea
or
mov
neg
push
sar
mov
cmc
call
push
dec
pop
stos
add
mov
mov
stos
aas
repz
ret
arpl
xchg
cmp
adc
dec
adc
mov
mov
jae
inc
sar
adc
sbb
cld
push
lds
(bad)
mov
sbb
mov
cmps
push
jl
xor
mov
scas
push
pop
inc
cmp
jae
in
add
and
jmp
scas
aad
not
bsf
mov
test
clc
jge
push
cmp
mov
lea
jne
sub
xor
push
jmp
test
add
xchg
mov
inc
mul
daa
push
pop
jmp
cmp
lahf
cmp
cmp
add
push
and
ins
xor
add
fnstenv
(bad)
iret
jae
ret
mov
rcl
mov
or
mov
in
adc
cmp
or
mov
repnz
aas
mov
idiv
jbe
xor
rcr
jl
daa
daa
xchg
movs
xchg
pop
cmps
push
pop
fs
or
loopne
push
pop
jo
sbb
rcl
xchg
imul
adc
dec
scas
and
ret
scas
fiadd
xor
inc
ss
sahf
mov
xchg
xlat
cwde
es
push
inc
cmp
bt
clc
xor
call
jae
test
popa
ficom
jl
js
bound
add
mov
idiv
rcl
or
adc
out
mov
retf
sbb
lahf
mov
add
cmc
js
push
inc
stc
jns
sbb
jbe
and
inc
fdiv
mov
clc
loop
mov
popf
lock
js
fs
inc
push
fs
(bad)
retf
pslld
pop
dec
xor
or
pop
repz
or
cmp
or
dec
sahf
and
xor
neg
(bad)
dec
aam
fucom
ins
inc
or
icebp
(bad)
in
jno
add
in
and
adc
cmp
or
shr
adc
mov
and
fcom
add
push
adc
out
pop
jecxz
mov
mov
ds
xor
xor
xchg
sbb
hlt
xor
les
clc
push
mov
(bad)
addr16
mov
ds
inc
xor
add
hlt
aad
push
outs
mov
cmp
outs
push
bound
push
pop
pusha
and
(bad)
mov
out
lock
outs
cmp
shr
xchg
pop
(bad)
xchg
or
push
mov
pop
mov
sbb
repnz
inc
pop
xchg
push
xor
or
test
cmp
or
push
dec
and
xlat
jnp
iret
scas
xor
jmp
pop
stos
sbb
xor
shr
jne
push
sbb
repz
sub
mov
pop
xchg
popf
and
push
lods
and
cmp
ss
(bad)
clc
ret
sbb
inc
mov
jbe
mov
sub
cwde
in
mov
les
xor
mov
std
clc
add
ja
dec
out
cmp
fldenv
dec
jns
ins
popa
or
add
adc
std
cmp
hlt
jmp
clc
mov
mov
xor
test
jae
fdivr
jb
ror
pop
jmp
push
jmp
cmps
clc
or
push
mov
ret
daa
das
add
and
call
sahf
mov
adc
out
adc
cmp
icebp
pop
mov
jmp
fcmovnb
xor
push
sbb
adc
xchg
repnz
jno
addr16
les
and
sub
pop
lea
sbb
setl
mov
cmp
and
add
scas
inc
jo
cmp
and
mov
loopne
push
repnz
and
out
inc
ret
push
pop
neg
xor
mov
out
(bad)
dec
mov
cmps
push
scas
stos
mov
sbb
jmp
(bad)
retf
enter
sub
dec
adc
xor
sar
cmp
cwde
cmc
loope
jmp
sbb
lea
xchg
cmp
cmp
cdq
lock
ds
mov
cmps
mov
dec
adc
dec
das
and
jmp
and
jae
(bad)
cld
lock
add
cmps
sbb
xchg
jno
cmp
lds
iret
shufps
cld
push
add
cmp
sub
sbb
mov
mov
adc
adc
push
dec
bound
popf
and
mov
cmc
icebp
push
sahf
adc
xchg
sub
inc
mov
cld
cmps
jno
jo
push
rcr
inc
mov
out
cld
mov
xchg
and
lds
or
jge
push
cli
adc
cld
adc
sbb
xchg
jmp
jl
sub
jae
xor
loop
jmp
pop
scas
sub
xchg
mov
and
ins
xchg
clc
push
lea
xchg
add
retf
and
div
enter
add
cmp
js
xor
movs
aaa
or
or
fnstenv
sbb
dec
mov
pop
jb
mov
dec
push
push
cmp
in
(bad)
bound
out
mov
cmp
std
adc
addr16
xor
xor
add
mov
sub
push
sar
jae
bound
xor
pushf
cmp
pushf
lea
ja
pushf
imul
cmp
jmp
aam
cli
jo
mov
stos
fistp
aaa
jle
fcom
sub
push
cld
das
and
mov
lods
repnz
addr16
retf
cmp
jmp
cmp
dec
loope
dec
in
and
das
popa
shr
ins
inc
sbb
dec
pusha
fld
push
adc
pop
popf
out
bound
adc
jns
addr16
pop
imul
mov
and
out
sbb
mov
cs
sbb
lea
ja
(bad)
stos
push
pop
mov
push
(bad)
inc
clc
mov
push
out
stos
push
cmp
and
jg
fwait
rcl
sbb
rcr
test
jp
mov
sub
mov
sbb
lock
and
mov
dec
retf
xchg
pop
xor
push
mov
fcmovnbe
ja
movs
es
mov
jae
pusha
xlat
fdiv
cmps
stos
shl
retf
and
add
mov
add
in
cmp
inc
inc
inc
pop
dec
les
or
das
test
mov
fild
mov
add
sub
and
add
cmp
popa
cmp
ret
out
mov
stos
into
or
scas
shl
dec
jne
out
pop
addr16
pop
repnz
and
sub
fnstsw
into
test
and
jg
adc
int3
xor
mov
inc
jmp
xchg
mov
mov
adc
dec
aas
lods
mov
sub
mov
mov
pusha
lea
jmp
mov
xchg
sub
sub
ja
dec
(bad)
pop
je
and
sub
(bad)
sub
aaa
out
jecxz
out
mov
mov
(bad)
lods
ins
add
push
loopne
leave
je
fisubr
push
dec
lahf
cld
inc
sti
iret
les
mov
retf
jge
inc
ins
jo
push
mov
mov
shr
xchg
cmp
and
mov
sbb
jmp
fidiv
mov
aas
jno
adc
mov
fiadd
test
add
or
scas
xchg
call
fstp
inc
mov
inc
das
imul
push
mov
out
(bad)
pop
add
cmp
(bad)
test
hlt
inc
mov
push
mov
clc
pop
and
add
dec
fcmove
xor
std
cmp
cwde
cmc
jno
push
pop
mov
repnz
xchg
in
leave
adc
stc
je
lds
push
cmps
loopne
push
cli
jecxz
jae
dec
mov
jb
out
inc
pop
push
inc
jecxz
cmp
xor
sub
adc
cli
and
and
(bad)
mov
cmps
aad
imul
mov
ins
pusha
popa
ins
ss
call
mov
mov
ror
pop
bswap
pusha
jg
mov
sub
dec
call
adc
std
adc
pop
push
jl
fadd
mov
sub
dec
aad
bound
in
pop
aam
les
pop
retf
outs
or
nop
retf
mov
push
sbb
push
retf
mov
push
pop
jns
aam
or
cld
not
arpl
dec
sub
lock
push
mov
test
hlt
dec
inc
imul
or
cmp
sub
lods
and
push
push
(bad)
push
fisttp
xchg
jl
fild
jnp
stc
enter
lods
push
clc
lods
or
sbb
mov
dec
mov
sub
sub
mov
cmc
inc
in
pop
add
mov
cmp
clc
mov
(bad)
fcmovne
inc
ja
in
or
pop
sub
jmp
xor
cmp
or
std
cmp
mov
idiv
xchg
pop
and
(bad)
push
mov
mov
cmp
xlat
xchg
int3
into
mov
or
or
mov
icebp
dec
cld
xchg
mov
pop
icebp
cmp
or
xchg
sub
aam
mov
es
call
loop
dec
cmc
retf
pop
xor
add
hlt
jl
aaa
or
mov
cmc
push
aas
call
loop
jmp
pop
inc
popf
inc
sub
cdq
scas
(bad)
retf
mov
(bad)
pop
add
or
out
cmps
dec
outs
mov
loop
push
mov
ret
fnsave
xlat
and
dec
int
adc
xlat
cmp
mov
jg
fdiv
fsub
inc
pop
movs
imul
jne
mov
sti
ins
xchg
cmp
scas
cmc
push
dec
out
mov
mov
idiv
push
fistp
mov
(bad)
and
sbb
out
push
repnz
scas
adc
or
leave
ret
stc
fcom
inc
ins
ins
sar
add
js
add
xchg
ins
mov
(bad)
xlat
sbb
cmp
ins
dec
loop
inc
cmp
repnz
xchg
cmp
stos
idiv
push
retf
mov
inc
je
pop
xchg
test
xor
cmpxchg8b
(bad)
retf
jge
mov
and
xchg
sti
pop
data16
fisub
sbb
adc
adc
jmp
add
push
in
ins
push
les
or
cmps
fcom
and
mov
push
push
mov
jp
or
adc
pop
push
and
jne
dec
in
cmc
aad
cmc
or
cli
mov
shl
test
dec
mov
sub
out
ret
fs
add
stos
and
shl
xchg
dec
mov
dec
iret
mov
lds
jbe
or
pop
sub
pop
and
scas
mov
pop
xor
sub
(bad)
sub
je
jmp
rol
cmps
repnz
data16
imul
mov
ins
test
das
inc
popf
and
inc
pushf
mov
sub
pop
jg
mov
or
stos
das
out
rcr
icebp
cld
test
push
stos
aam
add
cmp
inc
mov
ins
int3
jnp
pop
or
mov
jne
push
and
sub
mov
gs
adc
icebp
xchg
add
in
adc
or
cmp
push
adc
mov
inc
or
pop
sbb
(bad)
ins
fist
add
aas
sbb
stc
ins
(bad)
aas
(bad)
mov
add
adc
(bad)
data16
pop
cs
xchg
mov
movs
mov
lods
push
and
rcr
aam
aas
sub
and
imul
push
addr16
sub
imul
inc
loop
pop
or
lahf
xlat
sbb
adc
jle
sti
xchg
(bad)
mov
popa
mov
sbb
out
into
xlat
lods
dec
sbb
add
daa
mov
sbb
mov
jae
mov
push
rcr
ret
push
hlt
mov
das
xchg
dec
and
les
scas
lea
je
pushf
pushf
add
cmp
pushf
push
pusha
cmp
pushf
mov
lea
jb
pushf
jmp
repnz
jmp
int3
test
xchg
sub
call
or
cmp
sbb
and
aas
push
out
ja
cli
shr
jl
cmp
test
xchg
adc
les
cmp
pop
pop
push
pop
push
aaa
dec
pop
jp
dec
add
sbb
cmc
xchg
adc
sub
lods
jp
fistp
imul
inc
and
cmc
test
ja
test
inc
xlat
jnp
mov
shr
dec
xor
std
jbe
into
cld
aad
cld
add
and
push
or
adc
test
mov
mov
lea
dec
in
adc
adc
ret
outs
dec
(bad)
jl
cmp
mov
out
xchg
xchg
inc
cmps
mov
xor
leave
cmc
std
and
ficomp
push
mov
fst
stc
ret
adc
xlat
mov
xchg
sbb
adc
or
mov
test
sub
fsubr
mov
jp
sti
cmps
xor
std
test
add
xor
test
fwait
(bad)
xor
mov
lods
mov
pop
repnz
mov
sub
(bad)
repnz
clc
aam
adc
push
loop
xchg
xchg
sub
fs
jne
xor
lea
mov
test
pusha
cmp
cmp
jmp
dec
jae
cmp
sub
sub
pop
inc
std
jmp
sbb
js
and
cmp
test
mov
push
mov
xchg
jl
mov
jp
arpl
or
rol
sbb
add
arpl
les
mov
mov
adc
icebp
cmp
pop
push
sub
loopne
(bad)
in
push
xor
cmp
jl
add
sbb
popf
xchg
dec
movs
iret
adc
adc
cdq
jno
retf
sar
sbb
movs
pusha
popa
int
fimul
mov
mov
mov
cwde
(bad)
pop
jbe
fdiv
fcomp
jecxz
repnz
in
adc
sub
push
es
int
cmp
retf
fs
imul
push
shr
jbe
rcl
or
ja
nop
enter
hlt
test
addr16
sub
retf
shl
sub
pop
aaa
scas
push
cdq
shl
dec
mov
test
bswap
pop
fisttp
sbb
fisttp
call
(bad)
ret
out
lods
xchg
sub
pop
call
or
and
jnp
loop
lea
jne
lea
mov
lea
jmp
jg
lea
aaa
fcmovne
jg
cmp
out
adc
cli
add
xchg
jne
test
jl
dec
inc
sub
push
not
inc
add
sbb
push
xchg
rcr
or
shr
cdq
sub
jae
push
retf
mov
mov
retf
sub
das
and
jae
mov
jg
bound
aad
loopne
mov
inc
xor
out
sub
mov
push
and
movs
daa
mov
and
popf
inc
jmp
inc
jb
push
push
sbb
jo
xor
mul
dec
data16
jmp
shl
mov
clc
mov
cmc
pushf
add
mov
sub
je
bt
bt
shld
call
mov
pushf
xchg
add
jmp
adc
or
mov
bsf
adc
mov
jmp
pushf
mov
call
das
xadd
pusha
lea
mov
call
pushf
pushf
mov
mov
push
mov
pusha
repz
pop
mov
call
jmp
pushf
inc
bt
add
bt
test
cmp
sub
pushf
mov
jmp
dec
call
push
pop
mov
lea
jmp
call
das
cmp
sar
das
mov
bt
neg
rcr
mov
call
pushf
pop
jmp
call
push
pushf
pop
call
call
pushf
neg
mov
not
jmp
push
mov
push
mov
mov
pusha
pushf
pop
pushf
push
mov
call
movsx
pusha
jmp
neg
stc
btr
mov
setnp
movzx
btr
pop
shld
pop
add
shl
and
sub
pop
rcl
inc
xchg
pop
add
pop
not
pop
movsx
btc
pop
shr
ror
jmp
pushf
mov
pushf
mov
mov
mov
lea
jmp
mov
pushf
mov
push
pushf
mov
lea
jmp
pushf
mov
jmp
sub
pushf
mov
push
push
push
pushf
lea
jmp
add
mov
pushf
call
xadd
sub
aam
test
mov
rol
xor
lahf
mov
and
sub
rcl
btr
mov
stc
pusha
test
sub
pusha
mov
pushf
push
div
pushf
push
mov
mov
jmp
push
pusha
mov
pusha
push
mov
push
lea
jne
add
inc
rcr
bt
mov
push
pushf
pushf
and
cmc
test
mov
pushf
cmp
jmp
aam
shr
mov
cmc
sub
pusha
call
push
div
pushf
pushf
jmp
sub
stc
call
push
pop
cmc
neg
or
add
mov
cmp
cmc
add
mov
sbb
shl
jmp
call
call
rcl
mov
pushf
sub
mov
imul
pushf
push
pusha
mov
pushf
jmp
inc
push
inc
not
movsx
rol
bswap
cmc
xor
sub
rcl
bsf
pushf
movzx
sub
shrd
sub
sub
neg
mov
test
jmp
pushf
mov
jmp
mov
pushf
mov
push
push
pushf
pop
call
mov
jmp
inc
push
pushf
cmc
call
bt
pusha
jmp
call
push
pushf
dec
mov
bt
jmp
not
jmp
shrd
mov
adc
pushf
mov
jmp
pushf
call
jmp
cmp
bt
stc
sub
clc
test
push
shl
push
mov
pushf
mov
jmp
push
pop
mov
pushf
lea
jmp
pushf
mov
jmp
not
mov
bt
bt
push
add
mov
pushf
pusha
mov
lea
jmp
mov
pusha
mov
push
pushf
lea
jmp
mov
mov
mov
call
mov
pusha
mov
pushf
pushf
push
ret
push
mov
mov
pushf
pushf
mov
mov
lea
jmp
shr
pushf
pushf
jmp
pushf
mov
mov
lea
jmp
push
pop
push
lea
jmp
push
mov
push
pushf
pop
push
call
mov
push
mov
pushf
pushf
pop
jmp
xor
push
jmp
add
jmp
movzx
pushf
jmp
call
mov
pushf
pop
pushf
call
stc
clc
sub
test
jmp
call
call
call
mov
push
pushf
lea
jmp
pushf
repz
pop
pusha
mov
pushf
pushf
mov
mov
mov
pushf
push
push
lea
jmp
call
shr
call
test
call
mov
mov
push
lea
jmp
pusha
jmp
add
jmp
call
push
call
and
lea
test
mov
ror
mov
cmp
add
call
jmp
mov
pushf
pushf
pop
pushf
pushf
call
pushf
inc
stc
stc
call
test
not
clc
test
stc
and
push
jmp
mov
pushf
mov
pusha
push
pushf
lea
jmp
setg
mov
push
mov
lea
jmp
call
jmp
lea
pop
mov
setbe
neg
add
xor
setno
mov
shl
shld
clc
and
xor
bswap
dec
movsx
setnp
inc
lea
bts
bswap
neg
and
shrd
shrd
shr
add
setle
push
pop
ror
inc
stc
xor
not
pusha
pop
movzx
dec
call
xor
call
mov
mov
lea
jmp
rep
bswap
xadd
shrd
stc
mov
shl
mov
bt
cmp
call
or
cmp
stc
xor
push
mov
pushf
jmp
clc
bswap
bswap
mov
clc
mov
pushf
add
pushf
mov
mov
pusha
push
lea
jmp
bswap
sub
rol
ror
pushf
movzx
inc
push
dec
test
btc
rol
sub
neg
bt
sub
rcr
sbb
sub
btc
shr
test
pusha
mov
stc
add
pushf
mov
pushf
pushf
mov
pushf
lea
jmp
cmp
push
pusha
lea
jne
rcr
cmp
xor
movsx
pop
pusha
lea
jmp
shl
mov
cmc
bt
push
add
pushf
pushf
mov
call
push
mov
push
pushf
pop
jmp
and
xor
jle
daa
mov
push
mov
stc
cmp
test
add
call
mov
repz
pop
pushf
call
pusha
pushf
jmp
mov
pusha
push
mov
lea
jmp
mov
push
pop
mov
mov
mov
lea
jmp
cwde
mov
xchg
call
mov
pushf
jmp
mov
push
popf
mov
mov
mov
lea
jmp
pushf
pop
call
clc
push
popf
mov
lea
jmp
mov
lea
js
push
pushf
push
pushf
repz
pop
push
mov
jmp
pushf
pushf
jmp
mov
mov
jmp
shl
call
push
test
pusha
sub
pushf
mov
mov
mov
rol
bt
neg
bt
test
add
cmp
clc
cbw
call
call
mov
mov
mov
pushf
pop
jmp
call
mov
pusha
pushf
mov
mov
jmp
mov
mov
pusha
mov
push
lea
jmp
cmc
call
pushf
jmp
push
pop
push
mov
mov
mov
lea
jmp
pushf
jmp
movzx
pusha
mov
movzx
mov
jmp
push
pop
push
mov
pushf
lea
jmp
jmp
push
pop
push
pushf
mov
lea
jmp
inc
mov
ror
bsf
bsf
mov
pusha
cmc
cmc
clc
not
cmp
jmp
pusha
jmp
add
pushf
push
push
mov
test
bt
call
pushf
mov
mov
push
mov
push
pushf
push
push
lea
jmp
push
repz
pop
pushf
pusha
push
mov
mov
mov
mov
pusha
push
push
lea
jmp
jmp
test
xor
call
pusha
mov
not
push
test
sub
call
mov
push
pop
push
lea
jmp
dec
pushf
pushf
push
call
mov
mov
push
lea
jmp
push
pushf
mov
call
sub
pushf
lea
inc
jmp
push
push
jmp
pusha
pushf
pop
jmp
push
pop
pusha
push
pushf
lea
jmp
test
mov
stc
clc
push
xor
cmc
call
push
jmp
xchg
push
mov
stc
push
stc
bt
sub
mov
lea
jne
bt
sub
pushf
push
call
jmp
idiv
pusha
mov
call
jmp
call
xor
bt
sub
pushf
pushf
call
call
mov
jmp
mov
pushf
mov
pushf
lea
jmp
lea
jne
bsf
xor
call
jmp
dec
mov
neg
lea
jge
cmc
not
pusha
bt
xor
call
jmp
call
pushf
jmp
mov
call
mov
push
push
jmp
mov
pushf
pop
jmp
clc
call
mov
pushf
lea
jmp
call
jmp
pusha
jmp
mov
pushf
mov
cld
mov
call
add
mov
call
mov
jmp
jb
pushf
mov
mov
mov
mov
lea
jge
mov
pusha
mov
lea
jmp
mov
pusha
jmp
jne
pushf
push
pusha
mov
mov
bswap
bswap
mov
pusha
push
jmp
aas
aam
pushf
mov
not
shr
jmp
mov
pushf
pushf
pushf
lea
jmp
test
sub
call
sub
mov
jmp
jmp
mov
call
call
repz
pop
jmp
pusha
mov
mov
jmp
pushf
call
mov
push
pusha
mov
push
ret
in
jnp
xchg
jnp
out
cdq
jnp
push
sar
mov
add
jnp
mov
jnp
sub
jnp
leave
stos
jnp
leave
stos
jnp
jecxz
jnp
ret
pushf
jnp
out
mov
add
mov
jnp
clc
cwde
jnp
ret
pushf
jnp
loope
jnp
adc
jnp
outs
scas
jnp
popa
pushf
jnp
stos
mov
jnp
mov
jnp
mov
jnp
das
mov
add
mov
jnp
mov
mov
add
mov
jnp
jb
jnp
jo
jnp
gs
jnp
stos
mov
jnp
call
add
mov
add
jnp
dec
mov
jnp
outs
scas
jnp
adc
jnp
add
jnp
gs
jnp
push
sar
scas
jnp
das
mov
add
mov
jnp
xchg
jnp
sub
jnp
xchg
mov
jnp
out
cdq
jnp
adc
jnp
ret
pushf
jnp
ins
mov
jnp
jecxz
jnp
popf
mov
jnp
cmp
jnp
and
jnp
cmps
call
inc
mov
add
jnp
adc
jnp
add
jnp
add
jnp
ins
mov
jnp
fisub
jnp
clc
cwde
jnp
fcomp
jnp
sbb
jnp
das
mov
add
lods
jnp
add
jnp
fcomp
jnp
pop
mov
jnp
(bad)
mov
jnp
mov
jnp
data16
add
add
mov
jnp
mov
mov
add
jnp
cmp
jnp
loope
jnp
dec
mov
jnp
fidivr
jnp
call
add
add
jnp
sub
jnp
adc
jnp
gs
jnp
shl
jnp
cmps
call
jecxz
jnp
shl
jnp
fisub
jnp
call
mov
jnp
dec
mov
add
mov
add
jnp
nop
movs
jnp
sub
jnp
dec
mov
add
mov
jnp
repz
jnp
das
mov
add
jnp
ins
mov
jnp
popa
pushf
jnp
leave
stos
jnp
jecxz
jnp
sub
jnp
clc
cwde
jnp
add
jnp
cmps
call
ins
mov
jnp
clc
cwde
jnp
xchg
jnp
shl
jnp
je
jnp
outs
scas
jnp
jb
jnp
cmp
jnp
fisub
jnp
call
add
mov
jnp
aam
jnp
ins
mov
jnp
shl
jnp
out
cdq
jnp
(bad)
mov
jnp
jo
jnp
dec
mov
jnp
jecxz
jnp
mov
mov
jnp
add
jnp
add
jnp
call
add
mov
jnp
inc
mov
add
mov
add
jnp
fcomp
jnp
adc
jnp
mov
jnp
inc
mov
jnp
fidivr
jnp
je
jnp
popf
mov
jnp
add
jnp
mov
mov
jnp
popa
pushf
jnp
loope
jnp
data16
add
mov
jnp
popa
pushf
jnp
dec
mov
add
jnp
cmps
call
ins
mov
jnp
xchg
mov
jnp
sbb
jnp
ins
mov
jnp
in
jnp
pop
mov
jnp
xchg
jnp
nop
movs
jnp
in
jnp
cmps
call
sbb
jnp
das
mov
add
scas
jnp
push
mov
lea
je
mov
pusha
push
lea
jne
sub
bswap
cmc
bsr
mov
bt
cmc
and
test
bt
bt
jmp
add
lea
je
push
pushf
push
pusha
push
ret
add
bt
pusha
rol
call
movsx
ror
ror
lea
bt
cmp
cmc
cmc
cmp
jmp
call
mov
push
pop
mov
lea
jmp
call
mov
push
jmp
add
test
cmc
shrd
pushf
pusha
mov
pusha
pushf
pop
push
push
pop
push
lea
jmp
pushf
call
lea
jo
pop
push
pushf
mov
mov
lea
jmp
push
mov
mov
pushf
push
pusha
mov
repz
pop
pushf
call
mov
pushf
lea
jmp
sub
cmc
stc
pushf
imul
pushf
mov
pushf
push
call
call
mov
push
push
mov
lea
jmp
push
pop
pushf
mov
push
push
lea
jmp
xor
btr
stc
daa
mov
cmp
sub
push
mov
push
pusha
push
lea
jmp
push
repz
pop
pushf
pushf
push
mov
pushf
push
mov
mov
push
mov
lea
jmp
jmp
push
pop
push
mov
pushf
pushf
lea
jmp
mov
push
mov
lea
jmp
lea
cpuid
jmp
mov
call
mov
mov
pushf
push
lea
jmp
neg
not
setl
pop
bt
popf
not
pushf
mov
pusha
pushf
mov
pushf
push
ret
stc
bt
sub
push
cmp
call
bt
clc
pusha
cwde
call
call
mov
cmc
pusha
cmp
call
shl
sar
shl
mov
xor
pusha
jmp
repz
pop
call
xchg
mov
movzx
xor
mov
setl
cmp
shr
inc
mov
bt
jmp
push
pop
mov
pusha
lea
jmp
push
call
pushf
jmp
pushf
pushf
mov
mov
call
mov
mov
jmp
mov
mov
mov
pushf
push
lea
jmp
jmp
mov
push
mov
call
call
lea
call
pusha
pushf
mov
mov
pushf
lea
jmp
lea
cpuid
cmc
test
sub
jmp
call
rol
jmp
call
pop
jmp
jmp
pop
pop
pushf
lea
jmp
mov
pusha
mov
pushf
lea
jmp
pusha
mov
call
push
push
mov
pushf
mov
mov
push
pusha
pushf
push
lea
jmp
sub
aaa
shl
neg
mov
xor
mov
push
push
sub
test
shl
push
call
push
pop
mov
push
pushf
mov
lea
jmp
push
mov
mov
mov
pushf
push
lea
jmp
mov
lea
jne
push
pushf
push
ret
jmp
push
lea
or
pusha
neg
setl
bswap
add
rol
add
movzx
inc
sar
das
lea
cmp
test
push
cmp
mov
call
add
pushf
mov
mov
mov
jmp
call
shl
dec
and
mov
cmp
pusha
add
pushf
mov
push
push
lea
jmp
call
xor
btc
not
push
add
movzx
inc
push
bswap
push
push
sbb
sbb
mov
not
test
setp
push
jmp
xchg
mov
call
ror
bsr
bsr
clc
mov
bswap
pushf
stc
call
mov
add
call
mov
push
mov
pusha
call
call
mov
neg
mov
mov
sbb
xchg
movsx
btr
xchg
ror
cmp
rcr
mov
shld
rol
xadd
xchg
shl
bswap
rcr
jmp
pushf
mov
push
push
repz
pop
call
not
push
mov
mov
pushf
pushf
cwde
mov
pusha
jmp
add
mov
pusha
pushf
push
mov
push
pushf
mov
lea
jmp
pushf
pop
pusha
push
pop
mov
lea
jmp
mov
push
push
mov
std
cld
call
call
pushf
mov
pushf
mov
mov
push
ret
mov
jmp
bts
mov
movzx
mov
jmp
call
lea
jne
test
sub
call
sub
clc
jmp
call
call
pusha
jmp
call
mov
call
pushf
pop
push
pushf
pusha
mov
push
pop
pushf
lea
jmp
pushf
pop
push
call
push
inc
push
bt
add
pushf
mov
mov
jmp
pusha
pushf
mov
mov
jmp
call
xadd
neg
btr
setno
pushf
ror
push
rcr
clc
push
bswap
add
add
bt
lea
bsr
sub
call
push
repz
pop
call
call
pusha
pushf
test
sub
cmp
jmp
mov
lea
jne
add
call
mov
call
repz
pop
jmp
add
call
add
stc
mov
clc
mov
clc
stc
cmp
sub
jmp
stc
add
pusha
clc
sub
jmp
sub
jno
mov
test
jp
stc
pusha
add
bt
cmp
stc
sub
pushf
rol
test
clc
push
neg
pushf
push
jmp
cwde
mov
push
test
lea
jo
sub
pushf
call
jmp
call
push
cwde
push
stc
sub
pushf
jmp
bswap
movsx
mov
stc
movzx
btc
mov
call
push
pop
push
lea
jmp
stc
shld
pushf
mov
call
repz
pop
jmp
cmc
sub
push
mov
lea
push
mov
push
pushf
pushf
pushf
lea
jmp
jmp
call
btr
not
rcr
bswap
shld
mov
pushf
stc
sub
pusha
mov
cmc
stc
and
lea
jns
pushf
pushf
pop
pushf
push
pop
pusha
pushf
pushf
lea
jmp
shrd
movzx
lea
bt
add
bswap
neg
jmp
pusha
call
add
clc
mov
stc
stc
ror
push
add
push
call
clc
call
jmp
mov
pusha
pushf
call
sbb
neg
mov
cmc
add
push
pushf
pop
pushf
push
pop
pusha
push
lea
jmp
and
call
pushf
pushf
mov
mov
push
lea
jmp
lea
jno
mov
pusha
pusha
inc
mov
push
mov
lea
jmp
sub
xor
rcl
bsf
mov
rol
mov
pusha
mov
jmp
sar
add
pushf
mov
push
call
mov
pusha
lea
jmp
jmp
movsx
stc
mov
sub
shl
or
pusha
mov
cmp
pusha
sub
clc
shl
mov
mov
call
call
mov
pushf
pushf
lea
jmp
btr
clc
neg
movzx
mov
setg
add
pushf
rcr
rol
inc
dec
shl
sub
ror
cmc
mov
rol
not
neg
bsf
add
rol
mov
mov
jmp
call
mov
mov
call
mov
inc
jmp
bts
movzx
lea
mov
rcr
inc
rol
add
call
pushf
cmc
rol
cmc
neg
jmp
mov
mov
jmp
jmp
bt
xor
movzx
mov
and
sub
movzx
call
pushf
jmp
inc
call
pusha
mov
jmp
xchg
movzx
shrd
xadd
movzx
bsr
jmp
mov
push
pushf
push
push
lea
jmp
not
pusha
jmp
mov
mov
mov
lea
jmp
movzx
pusha
shl
push
pop
shr
setnp
adc
movsx
mov
inc
bsr
lea
mov
rcr
or
not
neg
not
setno
btr
pop
ror
bswap
shrd
jmp
push
ror
push
jmp
pushf
push
mov
pushf
pop
pushf
push
call
push
movzx
mov
pusha
push
bt
bts
add
bts
pushf
sub
lea
not
movsx
bsf
add
mov
cmp
shl
push
shr
jmp
pushf
jmp
dec
sar
sar
movzx
call
jmp
sub
pushf
push
pushf
mov
pushf
mov
lea
jmp
mov
pusha
pushf
push
mov
lea
jmp
mov
cmc
sub
pushf
mov
lea
jmp
lea
jnp
stc
add
pushf
pusha
jmp
pusha
pushf
pushf
mov
mov
mov
push
lea
jmp
mov
lea
jno
push
pusha
mov
mov
pusha
mov
pushf
lea
jmp
test
jmp
adc
stc
mov
sub
jno
sub
cmc
jmp
bsf
pushf
aas
mov
call
cmp
add
mov
call
cwde
mov
jmp
push
mov
pushf
call
mov
bt
push
sub
test
test
bt
bt
shr
jmp
rcl
ror
adc
rcl
mov
clc
call
pushf
pusha
mov
mov
push
mov
pushf
lea
jmp
jmp
add
add
call
neg
neg
cmp
neg
mov
jmp
mov
push
call
jmp
pushf
jmp
mov
dec
cmp
stc
cmc
pusha
neg
pushf
bt
sub
stc
pushf
mov
cmp
cmp
stc
test
sub
mov
push
mov
mov
mov
lea
jmp
not
mov
not
mov
pusha
jmp
mov
jmp
mov
repz
pop
cmc
pushf
mov
stc
cmp
pusha
pusha
mov
shl
call
push
pop
mov
lea
jmp
mov
pushf
lea
jmp
rcr
movzx
pusha
bt
stc
xor
call
jmp
push
pop
mov
mov
lea
jmp
mov
jmp
pushf
pusha
pushf
pushf
mov
push
repz
pop
pushf
call
clc
shr
not
rdtsc
cmp
clc
cmc
sub
pushf
pusha
call
xchg
push
jmp
pusha
mov
pusha
repz
pop
push
push
jmp
pushf
jmp
repz
pop
mov
push
call
not
call
call
call
shl
shl
dec
sbb
mov
call
mov
push
mov
push
ret
pusha
pushf
jmp
cmp
xchg
cmp
push
bt
mov
pushf
sub
call
mov
jmp
call
push
lea
pushf
mov
pusha
lea
jmp
call
pushf
or
lea
ja
push
mov
mov
lea
je
call
movzx
movsx
seta
neg
mov
and
shl
mov
clc
clc
pushf
clc
add
pusha
jmp
mov
push
push
pushf
pop
pushf
push
call
cmp
pushf
mov
mov
mov
mov
jmp
sub
stc
bt
rol
call
not
adc
mov
mov
sub
sub
jo
add
push
pushf
pushf
pushf
pop
pushf
mov
pushf
push
pop
pushf
pushf
lea
jmp
pop
lea
pusha
call
cmc
sub
pushf
test
cmp
add
pusha
pushf
pop
jmp
call
cmc
cmc
bt
rol
mov
jmp
mov
mov
pushf
lea
jmp
inc
aad
xor
movzx
clc
jmp
call
mov
jmp
push
inc
test
add
cmc
bt
cmc
sub
mov
pushf
mov
push
lea
jmp
jmp
pusha
mov
call
pushf
lea
ja
lahf
movzx
clc
mov
shl
lea
pusha
sub
aas
lea
movsx
shld
sar
bsf
and
rcr
btc
btr
lea
sub
mov
mov
jmp
pushf
call
call
cmc
call
pushf
pushf
pushf
lea
jne
bsf
rcr
shl
mov
cmp
cmp
and
cmc
pushf
call
cmc
cmc
add
pusha
pusha
pushf
pop
call
pushf
mov
pushf
push
lea
jmp
push
mov
jnp
pusha
push
pushf
repz
pop
mov
call
shl
pusha
cmc
mov
clc
pusha
cmc
add
stc
sub
jmp
call
mov
jmp
mov
mov
mov
pushf
push
ret
mov
mov
lea
jne
pusha
pushf
pop
pusha
call
mov
pushf
mov
pushf
pop
mov
call
call
push
pushf
mov
mov
mov
call
not
not
mov
call
push
pop
pusha
lea
jmp
mov
push
push
pushf
lea
jmp
push
lea
jne
add
shld
add
xor
call
bt
cmp
jmp
mov
pushf
pushf
pop
mov
mov
jmp
mov
pushf
lea
jne
jne
shld
mov
push
bt
and
pusha
mov
cmp
pusha
lea
jne
btr
dec
inc
pusha
xor
movsx
call
mov
pushf
mov
mov
mov
pushf
push
mov
lea
jmp
rcl
shld
not
bsr
mov
bt
add
pusha
mov
push
mov
pushf
lea
jmp
bswap
sbb
lea
push
sub
dec
shl
or
mov
test
adc
mov
setne
xadd
sub
add
or
test
cmc
mov
add
bswap
xor
mov
lea
inc
mov
ror
pusha
neg
shrd
pusha
rcr
rol
add
mov
rcr
ror
sub
shl
xor
bswap
inc
movzx
mov
movsx
pushf
mov
pushf
inc
pushf
call
call
lea
je
cmp
xor
cmp
cmc
call
cmc
test
test
push
pushf
add
std
jmp
pushf
jmp
pusha
mov
mov
mov
pusha
mov
mov
push
lea
jmp
push
jmp
stc
aam
mov
jbe
clc
xor
stc
mov
push
mov
test
bt
sub
jmp
call
lea
jne
pushf
mov
mov
pusha
lea
jmp
add
stc
cmp
sub
jmp
bsf
aas
push
aad
mov
call
cmp
test
add
pushf
push
mov
pusha
lea
jmp
add
or
pushf
pushf
movzx
dec
bts
call
mov
repz
pop
pushf
mov
pusha
push
mov
jmp
push
call
mul
push
mov
call
pusha
pusha
mov
jmp
mov
push
push
lea
jmp
add
push
call
mov
mov
lea
jmp
mov
rol
pushf
clc
pushf
neg
call
mov
jmp
mov
jmp
sub
pushf
mov
clc
pusha
mul
jmp
pusha
push
call
jmp
mov
mov
mov
mov
mov
mov
pushf
pushf
pushf
lea
jmp
shl
or
pushf
mov
jmp
jmp
push
mov
mov
lea
jmp
cmp
pusha
stc
sub
mov
pushf
shr
jmp
pushf
push
pop
push
lea
jmp
jmp
ror
mov
shr
mov
pusha
pusha
add
push
call
push
repz
pop
mov
pusha
mov
call
push
pop
mov
mov
mov
push
lea
jmp
call
mov
dec
mov
rol
jmp
neg
mov
call
pusha
lea
jmp
mov
pusha
push
pushf
push
lea
jmp
jmp
push
pop
pushf
lea
jmp
jmp
pusha
inc
pushf
pushf
push
mov
lea
jmp
mov
mov
jmp
rol
bsf
sub
pusha
sar
lea
sub
btr
sub
bt
mov
stc
clc
call
