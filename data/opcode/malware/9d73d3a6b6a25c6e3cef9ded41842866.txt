(bad)
fnsave
stos
cmp
pushf
cmps
sbb
imul
inc
fs
pop
adc
dec
adc
pop
mov
sbb
popa
loopne
cmp
cmp
pop
nop/reserved
ss
push
loop
sbb
jb
(bad)
xchg
outs
arpl
call
fsubr
dec
xchg
pop
mov
fsubr
arpl
call
xchg
retf
push
adc
xor
sbb
imul
mov
ss
jne
jnp
sbb
pop
adc
sbb
mov
outs
clc
mov
out
dec
pusha
cmp
xchg
imul
ds
imul
(bad)
sbb
imul
mov
out
ss
in
not
sub
nop
jae
outs
pop
retf
adc
xchg
call
sbb
dec
in
sbb
mov
xchg
imul
out
arpl
push
pop
ss
sbb
cmp
out
ss
and
pop
push
pop
ss
inc
nop
or
pop
ss
sub
xor
mov
adc
pop
iret
gs
pushf
adc
leave
xchg
fnstenv
out
or
enter
repnz
inc
loopne
xchg
mov
in
xchg
dec
arpl
inc
loopne
xchg
fisttp
sbb
leave
pop
daa
test
jbe
add
dec
fdivrp
sbb
leave
call
and
(bad)
sbb
dec
imul
repnz
fld
lea
je
out
sbb
fiadd
fwait
sbb
aas
stos
xchg
sbb
add
into
xchg
xchg
aaa
xchg
ror
jl
out
mov
out
loop
jnp
pop
ss
imul
out
imul
imul
sbb
aaa
imul
fld
out
cmp
push
sbb
xchg
imul
ss
clc
pop
xchg
pop
xchg
out
lods
jnp
sbb
ss
mov
test
cmp
and
or
in
sbb
fnstenv
add
ja
add
lods
je
(bad)
cmp
(bad)
sbb
xchg
out
add
pop
ss
sar
adc
pop
adc
cs
cs
jnp
mov
jl
out
jmp
out
cmc
imul
aaa
imul
inc
imul
pusha
cmp
movs
push
cmp
xchg
mov
push
jecxz
loop
ja
add
ja
add
ja
add
sbb
cmps
sub
cmc
and
out
mov
imul
shl
(bad)
xchg
icebp
call
(bad)
fstp
add
scas
enter
ds
out
mov
xchg
mov
fiadd
or
packssdw
dec
fisubr
sbb
aaa
add
je
push
add
(bad)
imul
repnz
leave
imul
xor
pop
fnsave
(bad)
ror
inc
imul
mov
xchg
outs
fimul
xchg
xchg
fiadd
stos
mov
dec
mov
cmp
test
fistp
out
in
out
loope
add
jne
imul
pop
imul
cmp
sbb
icebp
and
sbb
xor
test
xchg
add
inc
ja
sbb
inc
xchg
pminub
out
lock
xchg
loope
repnz
sbb
xor
mul
call
loopne
xor
out
frstor
fidivr
out
pop
stos
cmps
inc
push
mov
cmp
dec
mov
sbb
jae
outs
fidivr
jb
pop
ss
loop
sbb
xor
aas
popf
xchg
sbb
stos
or
leave
push
jmp
inc
jg
push
inc
jnp
push
imul
push
sbb
sub
out
aas
popf
xchg
sbb
stos
or
pop
stos
cmps
idiv
loop
jmp
mov
xchg
shr
or
inc
and
popf
lock
mov
fistp
pop
push
pop
ss
and
or
mov
ds
loop
pop
push
pop
ss
sbb
jb
mov
dec
ds
sbb
pop
or
push
aaa
push
mov
sbb
push
out
inc
xchg
(bad)
inc
jnp
pop
ret
or
xor
mov
and
push
xchg
outs
pop
(bad)
loop
in
loop
sahf
(bad)
xchg
cmps
popf
or
push
call
xchg
imul
das
loop
jmp
sbb
push
push
and
xchg
call
loop
xchg
sbb
jmp
neg
inc
imul
pusha
cmp
push
icebp
out
sbb
enter
pushw
ins
cwde
retf
loop
test
sbb
enter
inc
fbld
xchg
imul
das
loop
jmp
sbb
push
push
and
sbb
out
leave
imul
pushf
or
mov
ds
xchg
and
mov
push
loop
sub
ret
ins
cwde
retf
loop
out
pop
loop
xchg
outs
cwde
ret
loop
into
pop
loop
xchg
outs
cwde
(bad)
xchg
sbb
mov
xchg
outs
lds
fwait
and
leave
imul
imul
imul
repz
pusha
cmp
inc
cmp
adc
pushf
and
cs
xchg
jae
(bad)
jmp
dec
cvtpi2ps
out
dec
arpl
jnp
test
loopne
iret
je
xlat
mov
call
rcr
mov
retf
mov
jae
xchg
jae
outs
pop
ret
in
ror
xchg
jae
outs
pop
retf
inc
jmp
mov
pusha
cmp
inc
cmp
push
mov
pop
and
jmp
dec
psrld
out
dec
arpl
jnp
test
loopne
iret
je
xlat
mov
call
rcr
mov
retf
mov
and
cs
xchg
jae
sbb
inc
fbld
(bad)
jae
inc
push
loop
dec
gs
ins
inc
and
pop
mov
pop
and
sbb
movs
sbb
mov
outs
fist
addr16
int
outs
(bad)
fnsave
jmp
std
mov
sbb
jno
out
div
inc
jmp
mov
pusha
cmp
push
cmps
cmp
pop
xchg
outs
fcmove
outs
xchg
test
cmp
mov
cmc
jo
sbb
mov
movs
dec
pop
xor
ucomiss
xchg
sbb
sbb
cmp
sbb
mov
cs
xchg
icebp
xor
inc
jmp
mov
pusha
cmp
inc
cmp
outs
add
pop
xchg
pop
imul
shl
mov
push
imul
imul
cmp
sbb
inc
imul
jae
out
ror
xor
xchg
(bad)
xor
inc
jmp
mov
popa
loopne
adc
outs
jmp
or
inc
pop
imul
cmp
cmp
xchg
jo
sbb
loopne
loop
arpl
pop
ins
add
into
pushf
add
mov
sbb
jmp
or
gs
pop
pop
or
(bad)
xchg
into
inc
pop
xchg
icebp
call
jecxz
pop
imul
inc
imul
jae
mov
mov
sbb
into
push
xchg
icebp
pop
daa
adc
fs
mov
push
mov
pop
fild
pop
ss
ja
out
in
xor
pop
stos
out
(bad)
cmp
daa
xchg
jae
out
fld
outs
in
mov
jecxz
pop
retf
push
pop
ss
loop
loopne
loop
jle
sbb
mov
scas
push
ss
aas
mov
xor
stos
xchg
sbb
stos
cmps
idiv
loop
sbb
loop
dec
fisubr
loop
xor
(bad)
mov
clc
mov
sbb
adc
imul
inc
outs
lds
mov
fidiv
imul
imul
je
out
dec
fbld
adc
loopne
adc
jmp
or
inc
pop
imul
cmp
cmp
mov
ss
out
pop
xchg
sbb
leave
xchg
sbb
push
jmp
test
out
pop
push
out
(bad)
sub
nop
mov
sbb
leave
cmp
ss
sbb
leave
imul
cmp
ret
sub
sbb
ss
lds
sbb
data16
adc
mov
loop
loope
push
adc
imul
call
sbb
mov
fwait
test
imul
mov
xchg
outs
fmulp
outs
fwait
test
ret
popa
sub
imul
ret
sub
sbb
ss
in
test
jae
imul
xor
pop
mov
ficom
mov
pop
into
loop
cmc
xchg
pop
push
pop
ss
in
data16
std
mov
not
imul
push
out
xchg
dec
outs
mov
or
xchg
out
pushf
add
mov
sbb
leave
loop
sahf
dec
xchg
out
arpl
jnp
je
(bad)
fst
sub
xchg
jae
mov
push
xchg
repz
imul
mov
push
rcl
out
ror
sbb
test
cld
jae
imul
bound
push
sub
loop
imul
jae
ficomp
inc
push
data16
mov
out
mov
jnp
je
out
cmp
imul
leave
cs
xchg
jae
ficomp
fs
xchg
sbb
imul
imul
aad
(bad)
leave
leave
xchg
sbb
test
xchg
shr
or
sti
and
cs
push
popa
ss
mov
ss
mov
sbb
or
adc
bound
and
sbb
ror
dec
loop
xor
and
push
mov
pop
xor
arpl
sub
fs
imul
mov
lea
out
mov
out
xchg
into
pushf
add
outs
inc
mov
pop
pushf
sbb
aas
stos
xchg
sbb
push
sbb
xchg
sub
mov
frstor
outs
in
xchg
outs
fidiv
mov
in
mov
into
loop
imul
bound
xor
push
jae
ins
sbb
push
fisub
push
xlat
pusha
xor
and
loop
sub
loop
pop
mov
pop
out
mov
sbb
leave
call
call
arpl
cmc
in
out
fst
data16
lea
pop
imul
ss
cmps
sbb
ss
in
imul
sbb
imul
das
loop
jmp
sbb
push
push
xchg
hlt
add
nop
jnp
mov
leave
push
out
loop
xchg
punpckldq
out
ss
jmp
(bad)
mov
cmc
pop
add
sbb
mov
fwait
outs
fcmove
push
pop
cmc
int3
push
out
imul
out
ss
imul
je
scas
inc
imul
aad
bound
cmc
jmp
mov
sbb
leave
imul
push
pop
out
mov
xchg
push
repnz
sbb
adc
mul
ds
out
pop
aas
xchg
cmc
add
cmc
sbb
out
fiadd
mov
leave
xchg
sbb
xchg
push
ror
xchg
sbb
leave
cmp
test
and
sbb
push
out
ror
loop
test
cwde
(bad)
xchg
sbb
retfw
je
mov
push
xchg
mov
mov
push
inc
xchg
out
pushf
add
mov
sbb
leave
loop
nop
mov
sbb
leave
cmp
xchg
mov
sbb
leave
cmp
jg
sbb
jae
out
fnstsw
out
rcl
sahf
cmp
sbb
enter
stos
enter
loopne
loop
adc
retf
adc
add
test
xchg
sbb
ficom
and
mov
(bad)
leave
xchg
sbb
mov
test
cwde
mov
mov
push
xchg
mov
mov
bound
mov
pop
loop
xchg
out
mov
in
ss
loopne
xchg
sbb
imul
ss
loopne
xchg
sbb
into
adc
leave
call
adc
imul
sub
(bad)
leave
imul
mov
in
ss
cwde
nop
xchg
sbb
jbe
push
retf
xchg
sbb
add
out
imul
bnd
jecxz
lods
jecxz
retfw
cmps
sbb
leave
xchg
sbb
je
out
mov
out
ss
aaa
add
std
je
(bad)
dec
xchg
sub
cmc
sbb
sbb
mov
jmp
leave
xchg
out
inc
dec
lea
movs
pop
pop
ss
loopne
xchg
sbb
adc
leave
call
sbb
mov
sbb
leave
push
sbb
test
psubsb
xchg
fnstcw
push
sbb
imul
(bad)
sub
nop
mov
(bad)
ret
xchg
sbb
leave
imul
cmp
bound
ss
aaa
add
je
(bad)
dec
xchg
sub
cmc
nop
sahf
sbb
mov
jmp
leave
xchg
out
inc
dec
lea
rol
pop
ss
loopne
xchg
sbb
loop
loop
call
sbb
mov
sbb
leave
push
sbb
xchg
mov
pop
add
cmp
loop
imul
(bad)
sub
nop
mov
cvtps2pd
xchg
sbb
leave
imul
cmp
bound
ss
out
pushf
add
mov
sbb
leave
loop
ja
add
je
(bad)
dec
xchg
sub
cmc
and
jmp
leave
xchg
out
inc
popa
and
aaa
imul
pop
push
sahf
(bad)
sub
jne
retf
cmps
sbb
leave
call
sbb
mov
sbb
leave
push
sbb
dec
mov
pop
sub
leave
xchg
fnstcw
push
sbb
imul
(bad)
sub
nop
mov
(bad)
ret
sahf
repnz
leave
imul
sub
out
inc
mov
loop
xchg
mov
movs
lahf
sbb
mov
jmp
leave
xchg
out
inc
popa
and
aaa
imul
mov
stos
push
imul
sbb
ss
icebp
(bad)
sbb
imul
xchg
sbb
or
xchg
mov
ins
sub
sbb
aas
inc
pop
ss
imul
mov
fdivp
out
sbb
enter
sub
cwde
mov
cwde
out
xchg
sbb
data16
ror
sbb
push
sbb
loop
loope
stos
call
sbb
enter
mov
sbb
leave
cmp
cmp
xchg
jae
outs
lds
mov
fidiv
out
and
imul
sbb
ss
xchg
mov
mov
aaa
imul
ss
sbb
and
cwde
xchg
xchg
sbb
aaa
imul
mov
xchg
mov
mov
sbb
leave
cmp
xchg
sbb
data16
loop
ja
(bad)
outs
cwde
mov
sbb
mov
xchg
sbb
add
je
ins
cwde
cmps
xchg
sbb
data16
loop
push
out
imul
bound
adc
out
int
xchg
sbb
out
xor
enter
push
xchg
jo
ss
jae
outs
lds
mov
fidiv
out
out
imul
xchg
sbb
data16
int
xchg
sbb
push
sbb
loop
loope
stos
call
sbb
imul
out
psrad
xchg
mov
mov
sbb
leave
cmp
cmp
xchg
jae
pop
cmp
aad
bound
cmc
call
(bad)
fnsave
(bad)
sbb
leave
cmp
xchg
sbb
data16
loop
dec
outs
pop
retf
sub
loop
sahf
dec
xchg
out
mov
in
ss
xchg
fwait
sbb
leave
imul
into
xchg
sbb
pop
cmp
ss
loopne
xchg
sbb
pop
mov
mov
or
enter
ss
psadbw
out
lds
push
icebp
leave
xchg
sbb
leave
cmp
nop
mov
sbb
leave
cmp
and
out
bnd
lds
mov
ficom
bound
ss
icebp
leave
xchg
sbb
out
or
fisubr
enter
es
movs
xor
sbb
mov
xchg
xchg
rcl
jecxz
imul
(bad)
psrad
xchg
mov
or
adc
bound
imul
xchg
iret
sbb
leave
imul
and
sbb
enter
mov
movs
sbb
enter
push
xchg
repz
imul
mov
bound
xor
out
lds
bound
mov
xchg
mov
push
xchg
mov
mov
fs
sahf
xchg
ret
sbb
leave
imul
aaa
imul
sbb
imul
cmc
or
sbb
xor
ins
cwde
sahf
xchg
sbb
mov
xchg
push
mov
sbb
data16
ins
leave
xchg
sbb
(bad)
outs
out
ss
inc
nop
sbb
jecxz
call
pop
sbb
imul
xchg
loopne
mov
mov
loop
loope
sbb
xchg
mov
sbb
leave
loop
sahf
dec
xchg
out
mov
out
ss
sbb
enter
inc
mov
loop
xchg
mov
push
xchg
repz
imul
mov
bound
aaa
imul
mov
sbb
leave
imul
aas
push
sbb
enter
ss
push
jmp
mov
sbb
leave
cmp
cmp
xchg
jae
outs
lds
mov
fidiv
out
cmp
imul
leave
arpl
cwde
sti
imul
mov
(bad)
loop
xchg
out
mov
out
ss
inc
leave
xchg
sbb
fimul
(bad)
lds
fidiv
pop
inc
leave
xchg
sbb
jmp
inc
leave
xchg
sbb
imul
(bad)
xchg
sbb
aaa
imul
pop
outs
sbb
mov
xchg
mov
imul
loop
xchg
mov
adc
out
mov
pause
mov
call
fistp
push
push
xchg
mov
sbb
leave
jmp
xor
loopne
out
inc
leave
xchg
sbb
out
pop
loop
xchg
push
xor
jb
repnz
mov
xchg
mov
outs
mov
loop
xchg
mov
cld
add
sbb
lds
mov
cdq
leave
xchg
sbb
mov
sbb
data16
loop
arpl
ror
loop
test
cwde
sahf
xchg
sbb
mov
xchg
ficomp
cmp
jmp
xchg
sbb
data16
loop
arpl
xchg
sbb
data16
loop
arpl
cwde
ficom
loop
xchg
ficomp
cmp
or
leave
xchg
mov
ss
loopne
mov
sbb
leave
imul
imul
aad
bound
cmc
loopne
cmc
leave
xchg
sbb
pop
sbb
call
sbb
out
sbb
data16
loop
arpl
xchg
sbb
ss
jmp
mov
sbb
leave
cmp
cmp
sbb
leave
cmp
cmp
sbb
leave
cmp
cmp
aas
xchg
cmc
loopne
std
leave
xchg
sbb
pop
sbb
add
leave
xchg
mov
dec
mov
out
push
pop
add
jbe
cmp
outs
cmp
imul
mov
repz
pusha
cmp
js
lods
mov
ss
add
jae
out
imul
mov
mov
push
pop
imul
repnz
movq
xchg
sbb
imul
retf
loop
or
jae
out
imul
ins
js
lods
mov
sbb
enter
inc
mov
scas
icebp
cs
leave
xchg
sbb
xor
jae
cmp
mov
outs
clc
addr16
dec
push
dec
mov
into
pushf
add
jmp
pop
ss
ja
add
sbb
push
imul
icebp
cmp
cli
push
imul
jmp
or
gs
fwait
and
fwait
outs
fcmovne
outs
xchg
test
mov
jecxz
jbe
out
(bad)
push
xchg
lock
out
mov
fild
adc
pop
imul
(bad)
cmps
sbb
icebp
outs
mov
sbb
ja
out
jbe
cmps
sbb
scas
sub
adc
imul
out
leave
imul
cmp
xchg
pop
imul
mov
push
pop
ss
add
fisttp
in
ss
loop
sub
sub
jmp
cmp
mov
jecxz
mov
push
js
ss
imul
hlt
cmps
sbb
cmp
enter
adc
jbe
cmps
sbb
(bad)
cmps
sbb
ja
or
leave
outs
fild
ror
hlt
xor
sbb
ja
push
out
imul
xor
push
pop
ss
loop
test
ins
(bad)
fstp
inc
in
ss
cmp
pop
ss
pop
scas
sub
mov
fistp
loop
popf
loop
test
ins
(bad)
fstp
push
adc
imul
cmp
pop
outs
push
adc
xchg
sbb
xor
pop
arpl
cld
xor
out
lock
test
sub
ss
cmps
mov
enter
xor
pop
ss
sbb
stos
push
test
imul
mov
lock
add
icebp
outs
or
imul
enter
xor
pop
imul
pushf
fsub
sbb
test
outs
mov
sbb
enter
xor
push
pop
ss
loop
test
push
xchg
lock
add
fild
sbb
ja
out
push
hlt
cmps
sbb
ss
add
inc
xlat
imul
xchg
xchg
ss
fild
ss
jb
cmps
sbb
jbe
push
mov
(bad)
cmps
sbb
ja
push
mov
imul
xor
push
pop
ss
out
fcomip
out
ss
xor
loop
sahf
xor
pop
ss
out
test
adc
hlt
cmps
sbb
cmp
xchg
(bad)
sub
xchg
cmp
ss
sbb
movs
sbb
mov
in
bound
xchg
ret
cwde
cmps
shl
sbb
stc
imul
dec
push
sbb
mov
push
pop
ss
add
fstp
inc
fbld
icebp
stos
sub
sbb
push
js
ss
xor
pop
ss
sub
loop
popf
cmp
pop
sub
pop
stos
push
dec
aaa
imul
rol
sbb
sub
jmp
jae
pop
ss
cdq
repnz
mov
leave
xchg
mov
pop
fwait
outs
fstp
fucom
ins
xchg
sub
cmp
imul
mov
outs
xchg
mov
xor
mov
out
stos
out
ss
nop
cmps
push
cmps
sub
pushf
fdiv
ss
pop
int
addr16
xchg
das
jle
ss
adc
or
jle
imul
pusha
int3
ins
xchg
push
mov
out
lea
in
jne
call
jae
pop
ss
in
aaa
fwait
outs
fstp
leave
add
xor
pop
sbb
xchg
loop
cmp
call
arpl
outs
outs
in
pop
fwait
outs
(bad)
imul
cs
pop
mov
imul
outs
repnz
xor
pop
ss
jbe
ficomp
cmp
cmps
sbb
ins
dec
out
mov
jmp
jbe
out
cs
pop
mov
imul
outs
repnz
sub
loop
addr16
ss
ja
ficomp
cmp
cmps
sbb
inc
fbld
lds
pop
daa
pop
push
loop
dec
cmp
jns
sbb
cmps
mov
xchg
jae
outs
fcmovne
outs
xchg
test
mov
out
inc
xor
sbb
mov
out
fsubrp
mov
mov
mov
out
ficomp
mov
xor
pop
cmp
loop
in
lods
(bad)
and
mov
xor
push
mov
out
fisubr
mov
xor
inc
mov
out
ficomp
sbb
je
mov
xchg
shr
or
cmp
loope
mov
test
sbb
movs
sbb
ss
mov
xchg
repnz
xchg
sub
fidiv
call
aaa
mov
fidiv
cs
xchg
jae
and
sub
sbb
or
sahf
push
xchg
out
push
xchg
out
xor
push
pop
ss
aas
sub
loop
sahf
push
mov
out
imul
jmp
cmp
imul
mov
out
imul
movs
sbb
ss
pop
xor
sbb
mov
(bad)
sbb
mov
pusha
mov
xchg
int
outs
out
ss
inc
nop
jae
mov
ss
mov
jle
xor
lds
mov
fidivr
imul
cmp
sbb
push
imul
cmp
push
add
cmc
xchg
or
sbb
je
lea
ss
ja
add
loop
(bad)
pcmpgtd
out
std
sub
sbb
cmps
loop
loop
(bad)
pslld
out
xor
push
pop
ss
cmc
xchg
xchg
lods
mov
jle
xor
pop
rol
ret
sbb
jmp
or
icebp
sbb
xor
outs
pop
shl
mov
xchg
jae
outs
pop
retf
adc
jnp
push
into
call
xor
pop
fiadd
jecxz
ss
nop
jae
mov
jae
mov
inc
xchg
lea
pop
xchg
sbb
xchg
repnz
jae
or
mov
sbb
imul
cmc
outs
clc
addr16
sbb
clc
xchg
into
inc
pop
xchg
icebp
xchg
loop
sub
loop
arpl
xor
cli
dec
imul
shl
mov
aam
outs
clc
mov
jmp
pusha
cmp
push
leave
outs
xchg
test
cmp
jecxz
or
adc
xchg
out
ss
iret
adc
xchg
out
ss
sti
adc
xchg
out
ss
not
sub
sbb
xchg
out
ss
xor
out
jae
push
xor
jecxz
and
cmp
mov
sbb
sbb
pop
call
sbb
cmp
hlt
bound
int3
call
repz
test
div
push
and
sahf
fisubr
stos
xor
cmc
ss
push
add
adc
sub
dec
fidiv
mov
dec
leave
add
iret
mov
out
cmp
into
call
not
int3
call
in
into
call
adc
xor
and
arpl
out
ss
sub
jbe
jg
and
mov
xchg
adc
pop
sbb
leave
xchg
loop
sub
popf
or
push
mov
loope
inc
and
mov
in
or
push
fisubr
and
outs
xchg
sub
fs
sbb
push
(bad)
pop
sbb
mov
jmp
sbb
push
icebp
xchg
out
push
fistp
mov
jecxz
imul
and
sbb
xor
adc
xchg
inc
mov
jmp
sbb
mov
into
call
loope
inc
sub
jecxz
sub
fisubr
sbb
ss
sbb
das
loop
not
int3
call
out
mov
jecxz
jae
ins
pop
es
push
xor
sahf
fisubr
dec
into
loop
sbb
imul
mov
fstp
cmp
jle
fistp
aaa
push
scas
xchg
into
call
loope
inc
push
outs
in
and
or
push
fisubr
stos
xor
and
(bad)
ss
xor
sbb
faddp
mov
or
aaa
xchg
div
loop
or
imul
jno
sbb
mov
sbb
leave
xor
inc
jmp
or
gs
push
pop
ss
adc
(bad)
or
adc
jmp
(bad)
jmp
and
ins
pop
cmp
push
ss
inc
mov
hlt
ss
lock
sbb
inc
fbld
or
or
mov
(bad)
(bad)
mov
and
xchg
mov
pop
ss
sbb
push
nop
imul
ss
(bad)
sahf
push
xchg
out
cmp
aas
push
jae
ins
or
jecxz
sbb
sbb
sbb
add
xor
sub
mov
xchg
jae
outs
out
aaa
mov
int
xchg
out
aaa
mov
mov
jmp
xor
cmps
sbb
mov
cdq
out
pop
mov
out
mov
jecxz
jae
and
add
push
dec
into
loop
loop
pop
push
pop
ss
push
sub
int
and
jae
and
(bad)
jecxz
aaa
imul
gs
push
ror
outs
xlat
movs
sbb
leave
call
mov
clc
mov
ret
sub
imul
xchg
and
sbb
imul
imul
lods
(bad)
(bad)
jmp
out
adc
leave
xchg
out
xor
push
pop
ss
addr16
sbb
ss
not
sub
repnz
xchg
and
or
ss
pop
mov
add
leave
xchg
out
and
test
loop
push
loop
mov
out
inc
imul
fst
loop
add
and
faddp
mov
mov
xchg
sbb
imul
mov
add
ret
lea
out
test
ror
data16
sbb
ss
mov
xor
mov
addr16
lds
cwde
lds
popf
or
cmps
je
out
mov
sbb
leave
lods
(bad)
out
fst
out
fst
and
dec
jbe
ss
lods
outs
out
cmp
jb
fst
or
cmp
ss
leave
jmp
pop
push
pop
ss
(bad)
jmp
out
jo
imul
iret
xchg
sbb
xchg
loop
sub
xchg
mov
loop
(bad)
jge
(bad)
and
aas
sbb
imul
leave
xchg
(bad)
loop
dec
(bad)
sbb
faddp
mov
sahf
shr
xor
push
mov
jno
and
es
stos
lahf
or
leave
sbb
cmp
leave
cmp
inc
outs
imul
xor
push
pop
ss
sbb
add
loop
imul
fiadd
ret
movhlps
xchg
sbb
retf
imul
sbb
leave
xchg
or
pop
xchg
outs
(bad)
test
shl
adc
repnz
xchg
xchg
adc
jmp
jmp
sbb
xor
loop
sbb
jnp
sbb
leave
xchg
or
mov
out
imul
fwait
out
inc
fstp
push
leave
xchg
mov
loop
imul
ss
xchg
call
xchg
out
pmaxsw
repnz
xchg
call
loop
outs
xchg
test
out
mov
loop
push
mov
and
mov
stos
add
cmp
mov
call
sbb
leave
xchg
push
ds
imul
loope
not
cmpps
ins
mov
test
loop
mov
xchg
out
stos
push
pop
test
in
mov
or
leave
jmp
xor
outs
adc
loop
imul
or
imul
mov
loop
test
out
ss
sub
adc
pop
mov
xchg
ins
cwde
xchg
mov
loop
(bad)
jg
leave
xchg
fild
push
cmp
leave
loopne
mov
mov
push
cmp
leave
loop
mov
xchg
sbb
leave
loop
shr
sbb
out
movs
jmp
fidivr
ret
movd
out
mov
cmp
leave
push
bound
jne
(bad)
fldl2t
xchg
sbb
push
shr
sbb
leave
imul
push
add
xchg
mov
stos
or
movs
jmp
addr16
cmp
sbb
leave
xchg
or
leave
outs
xchg
test
mov
stos
add
ret
int3
nop
loop
sbb
mov
sub
adc
xchg
push
repz
cli
cmps
sbb
leave
xchg
(bad)
sbb
ficom
sbb
jmp
bound
imul
dec
arpl
adc
loopne
jmp
sub
ss
cmp
call
imul
sub
out
adc
leave
xchg
ins
or
push
sbb
mov
out
add
leave
xchg
and
ss
sbb
mov
xchg
outs
in
jle
fistp
mov
in
push
imul
xor
jg
in
mov
jecxz
push
imul
xor
fistp
sti
xchg
loop
sub
adc
xchg
push
push
or
out
inc
ret
leave
xchg
out
sub
ss
and
jecxz
aaa
imul
mov
sbb
mov
cmp
leave
and
sub
mov
or
leave
push
xor
loope
xchg
es
mov
inc
and
mov
loop
fs
mov
mov
xchg
mov
(bad)
leave
xchg
and
ss
and
imul
ss
iret
popf
or
sbb
sub
(bad)
xor
push
repz
or
sbb
cmp
(bad)
xor
sbb
frstor
cmp
leave
bound
bound
pop
sti
adc
xchg
mov
xor
leave
jmp
xchg
sbb
mov
jmp
mov
xchg
pop
mov
adc
leave
xchg
out
mov
stos
add
hlt
xor
push
pop
xor
jle
ret
outs
sbb
xchg
(bad)
jmp
mov
jecxz
sbb
loop
pop
push
pop
ss
leave
xchg
addr16
lds
cwde
lds
popf
or
cmps
je
out
mov
sbb
leave
xor
inc
jmp
or
gs
and
xchg
aad
pop
jmp
lock
push
add
ss
sbb
mov
cmps
outs
pop
(bad)
pushf
adc
and
out
cwde
mov
out
cmp
sbb
out
ror
xor
sbb
into
jbe
sbb
inc
movs
popf
jae
out
jae
outs
fbstp
test
mov
xchg
xor
push
mov
popf
jae
jecxz
cmp
mov
jecxz
sbb
(bad)
out
xchg
imul
mov
xchg
fstp
mov
cwde
mov
cs
fwait
jbe
out
jae
out
sub
and
imul
dec
or
stos
jne
ret
imul
into
sub
sbb
frstor
xor
sbb
out
push
out
sahf
into
sub
sbb
frstor
inc
addr16
xor
pop
sbb
addr16
leave
push
and
in
frstor
ss
addr16
mov
sbb
cmp
in
shr
inc
popa
adc
push
xchg
sbb
sbb
push
sbb
cmp
mov
leave
xchg
and
imul
push
fstp
mov
sbb
push
pusha
retf
stc
mov
pop
mov
imul
sub
ss
xor
mov
pop
leave
xor
inc
jmp
mov
mov
jp
push
mov
mov
loop
imul
pop
imul
fs
(bad)
call
fistp
push
push
xchg
icebp
sub
or
push
aaa
imul
call
outs
lds
mov
fisubr
mov
clc
mov
sbb
imul
pop
loop
jmp
sbb
out
adc
xchg
adc
leave
xchg
mov
and
out
leave
xchg
mov
cmp
sbb
into
pop
pop
xchg
icebp
pop
adc
mov
mov
mov
test
imul
ds
cmc
test
out
imul
fs
cmp
mov
mov
mov
push
aaa
imul
add
imul
pop
imul
mov
xchg
adc
ss
sahf
enter
mov
jmp
inc
ins
ins
pop
cmp
(bad)
sbb
mov
pop
daa
mul
dec
fisubr
sbb
idiv
ja
and
imul
jmp
ss
out
xchg
jae
outs
pop
ret
nop
jae
outs
pop
ret
jmp
pusha
sub
imul
mov
loop
xor
loop
inc
push
loop
dec
gs
int
mov
lods
lea
ss
ja
add
jne
imul
leave
push
out
cmc
dec
cmp
sbb
jg
out
mov
sbb
pop
daa
mul
in
ss
dec
fsubrp
mov
ss
adc
sub
aaa
imul
mov
xchg
xchg
adc
sub
lea
pop
imul
sbb
push
imul
fidivr
mov
ss
sbb
ins
mov
fs
cmp
inc
or
pushf
add
imul
xor
out
ss
sbb
add
imul
xchg
adc
mov
call
(bad)
fstp
inc
lea
pop
imul
imul
leave
push
mul
inc
addr16
or
out
mov
lods
mov
loopne
out
pop
stos
cmps
inc
push
mov
push
fisttp
ins
pop
mov
sbb
in
loop
div
fs
sbb
push
pop
or
cmp
push
je
pcmpgtd
out
inc
xchg
dec
pop
imul
pop
cmp
sbb
in
xor
sub
pop
pop
pop
pop
xor
ds
inc
cmp
cvttps2pi
sub
or
push
sbb
pusha
cmp
pop
dec
pop
inc
pop
pop
ss
imul
mov
fistp
xor
fisub
add
mov
imul
cmp
bound
imul
or
sahf
mov
ss
loop
js
stos
xor
jne
mov
sbb
jno
adc
add
std
je
psrld
inc
mov
push
xchg
arpl
and
mov
cmp
es
aas
sbb
loop
jnp
cs
icebp
ss
cmp
out
out
mov
imul
imul
xchg
sar
imul
mov
jmp
or
icebp
cs
adc
mov
ror
jg
imul
mov
fs
pop
leave
fs
pop
xor
mov
pop
inc
outs
fs
imul
mov
sbb
push
sbb
cmp
xor
mov
not
gs
cmp
mov
sbb
call
setge
in
xor
mov
xor
mov
aaa
jmp
jecxz
push
xor
mov
fidivr
imul
push
nop
out
cmp
mov
cmp
and
lds
mov
fidivr
inc
mov
inc
mov
loop
mov
adc
arpl
stos
fs
into
int
fdiv
sbb
(bad)
ins
pop
cmp
ds
adc
pop
mov
mov
lds
mov
fisubr
mov
lea
jnp
sbb
jbe
ja
dec
je
inc
cmps
out
daa
lea
sti
ja
cmps
pop
out
lea
sti
ja
cmps
sub
cmps
sti
ja
cmps
sti
ja
cmps
sub
cmps
sti
ja
out
sti
ja
cmps
push
cmp
movs
(bad)
cld
je
ja
jno
and
cmps
out
daa
lea
sti
ja
cmps
pop
out
lea
outs
ja
cmps
push
aas
lea
sti
ja
cmps
or
cmps
sti
ja
(bad)
mul
leave
test
lea
and
imul
xor
ficomp
sti
retf
sub
lea
sti
ins
push
xor
ja
mov
sti
(bad)
push
cmps
sti
ja
mov
jecxz
cmps
sti
(bad)
cmps
sti
ja
dec
xchg
cmps
sti
fnstsw
sti
ja
mov
out
cmps
sti
xchg
aad
sti
ja
push
sti
ja
cmps
sti
xor
jp
loop
jnp
sbb
dec
je
inc
(bad)
sbb
cmc
or
cmps
sti
ja
ss
sbb
cmps
sti
ja
cmps
sti
ja
cmps
call
ja
fs
ja
cmps
shl
jbe
ja
out
sti
ja
cmps
inc
lea
sti
ja
cmps
cmp
cmps
sti
ja
(bad)
sti
ja
cmps
pushf
adc
cmps
sti
ja
cmps
xor
cmps
sti
ja
dec
je
inc
cmps
pop
xlat
lea
sti
ja
cmps
mov
movs
(bad)
sbb
fs
ja
cmps
shl
cld
je
ja
out
sti
ja
cmps
inc
lea
sti
ja
cmps
cmp
cmps
sti
ja
(bad)
sti
ja
cmps
pushf
adc
cmps
sti
ja
cmps
xor
cmps
sti
ja
jno
and
cmps
pop
xlat
lea
sti
ja
cmps
mov
jl
sti
ja
cmps
or
es
xchg
sbb
cmc
outs
clc
mov
dec
cmp
inc
ds
adc
mov
lock
xchg
aaa
test
adc
cs
sbb
imul
fwait
mov
test
sbb
outs
loop
xchg
arpl
xchg
sbb
cs
dec
jns
out
jae
pop
loop
imul
xor
sbb
mov
pushf
push
xchg
mul
mov
xchg
hlt
jecxz
out
mov
sbb
mov
xchg
ins
sbb
push
xchg
outs
and
push
loop
sbb
sub
stos
es
push
int3
inc
sub
sbb
push
add
or
jbe
push
or
pop
mov
sbb
add
imul
cmp
mov
imul
sub
dec
mov
out
out
cmp
mov
aaa
mov
out
pop
ins
push
les
outs
lds
fwait
mov
dec
and
ret
sahf
lock
pushw
fistp
(bad)
fs
pop
cmp
(bad)
cmp
jmp
leave
xchg
mov
dec
mov
cmp
into
sub
imul
pop
and
out
idiv
outs
fadd
and
fmul
je
xlat
mov
jecxz
repnz
and
xor
hlt
jb
out
mov
push
out
cmc
lea
out
xchg
lock
adc
fs
pusha
fldcw
fidiv
and
mov
jns
call
stos
add
leave
pop
fidiv
shr
mov
out
fisubr
jmp
ss
push
xor
mov
push
imul
das
mov
retf
pushf
cmc
add
jae
ins
or
(bad)
movs
sbb
retf
aad
sub
push
xor
mov
leave
mov
out
jae
or
mov
xchg
jae
outs
fidivr
loopne
ror
mov
mov
out
(bad)
movs
sbb
in
mov
imul
add
jmp
stos
in
add
and
(bad)
movs
sbb
imul
jnp
out
jae
(bad)
jnp
out
dec
mov
stos
leave
loop
adc
bound
xchg
or
cmps
jne
(bad)
movs
sbb
not
movs
sbb
imul
das
mov
ret
pushf
fisttp
pop
push
jae
ins
or
(bad)
movs
sbb
ret
aad
sub
push
xor
mov
leave
mov
out
jae
or
mov
loopne
ror
mov
mov
out
(bad)
movs
sbb
jmp
scas
pop
pop
ss
dec
fnstcw
pop
mov
out
movs
sbb
shr
mov
out
cmp
int3
aam
repz
(bad)
movs
sbb
je
outs
adc
and
cmp
popf
dec
test
push
cs
pop
fidivr
outs
in
xor
imul
mov
out
ja
add
ja
add
ja
add
sbb
ds
imul
jmp
ss
cmc
xchg
xchg
std
pusha
xchg
xchg
stc
ficom
scas
sbb
fidiv
sbb
jle
out
imul
or
mov
sbb
jae
outs
fisubr
mov
clc
mov
call
imul
sbb
dec
imul
shl
(bad)
retf
xchg
sbb
sub
mov
imul
sub
sub
loop
cmc
mov
out
mov
outs
fadd
and
add
mov
and
mov
xchg
and
push
xor
cli
lods
sbb
leave
shl
push
jnp
xchg
neg
in
inc
sub
fbstp
push
sbb
leave
xchg
addr16
leave
push
pop
leave
push
out
imul
bound
leave
xchg
sbb
ss
jmp
push
adc
out
loop
leave
xchg
aam
mov
sbb
leave
pop
data16
xor
sbb
leave
xchg
mov
cmps
retf
pop
sahf
cmp
out
out
xchg
sbb
pop
lods
sbb
ss
ja
add
jne
imul
mov
xchg
mov
in
out
mov
xchg
sbb
shr
je
mov
xor
out
pop
imul
xchg
sbb
add
add
mov
out
sbb
push
imul
fwait
outs
fcmovne
ficom
loopne
xchg
pmaxub
out
xor
push
pop
cmp
nop
mov
sbb
leave
cmp
mov
mov
sbb
leave
cmp
nop
mov
sbb
leave
cmp
cmc
gs
mov
scas
sbb
mov
sbb
leave
loop
loop
pop
push
pop
add
je
(bad)
shr
sub
nop
mov
sbb
leave
cmp
cmc
adc
add
pusha
jmp
imul
fisub
sbb
mov
mov
inc
ins
mov
fs
cmp
mov
mov
adc
mov
lods
sbb
inc
fbld
cli
mov
call
mov
loope
add
jne
imul
pop
imul
cmp
sbb
(bad)
xchg
cmps
popf
or
push
leave
push
pop
dec
pop
push
sbb
inc
xchg
rdmsr
jg
out
fst
ss
xchg
loope
xchg
scas
sbb
jmp
pop
sbb
cmps
sbb
fisub
sbb
leave
push
repz
jnp
push
ficomp
sbb
imul
mov
mov
jmp
lea
pop
outs
push
and
sbb
xchg
xchg
adc
push
out
cmc
xor
sbb
jmp
mov
mov
mov
jl
pop
sub
loop
nop
jae
mov
jae
mov
ss
sbb
pop
imul
inc
arpl
inc
jle
out
neg
jecxz
test
push
pop
imul
es
xchg
loope
push
scas
sbb
cmp
sbb
daa
loop
xor
loop
loop
xchg
(bad)
jle
out
imul
mov
clc
mov
test
cs
jnp
jmp
mov
mov
sbb
loop
sub
loop
nop
jae
mov
das
imul
pop
imul
cmp
sbb
xor
test
mov
sbb
es
xchg
loope
mov
imul
stos
mov
imul
xchg
loope
fisub
pop
cs
fidivr
ror
push
mov
mov
icebp
sub
(bad)
jecxz
out
inc
dec
bndldx
out
fmulp
mov
in
xchg
(bad)
in
lods
inc
loope
sub
and
xchg
xchg
xor
stos
cmps
div
out
icebp
imul
pop
imul
jmp
sub
xor
jmp
neg
jecxz
test
pop
sub
retf
pushf
ror
cmc
shl
pop
mov
ret
sbb
imul
test
xchg
sar
mov
popa
loopne
adc
jae
mov
pop
retf
xor
loop
loope
mov
sub
inc
outs
in
mov
xchg
(bad)
push
dec
leave
push
div
ins
sub
sbb
into
inc
aas
xchg
arpl
sbb
outs
in
stos
in
pop
jmp
jno
(bad)
ss
and
push
out
sub
push
loope
inc
jns
pop
lods
out
mov
sbb
out
sub
mov
add
imul
sbb
leave
pop
cli
xchg
(bad)
push
dec
leave
push
div
dec
sub
sbb
hlt
inc
and
lds
xchg
or
pop
stos
mov
dec
mov
cmp
fidiv
add
(bad)
dec
aam
cmp
dec
jb
out
jae
outs
(bad)
mov
cmp
pop
fsubrp
movs
sbb
pop
popf
or
cmp
jecxz
mov
xchg
adc
pop
in
adc
sbb
add
sbb
pushf
pop
fwait
(bad)
and
imul
frstor
call
stos
or
in
jno
sbb
mov
cmp
out
shr
push
and
retf
xchg
push
adc
xor
pop
ss
data16
out
bnd
loop
xchg
call
pop
into
sbb
jae
mov
dec
mov
imul
sbb
jp
sbb
test
fs
ss
in
xchg
sbb
push
jmp
lods
fwait
sbb
mov
out
xchg
cmc
loop
sbb
loop
adc
push
loopne
test
mov
ss
jmp
pop
daa
hlt
and
out
leave
push
repz
js
out
mov
xchg
pop
add
imul
xchg
xchg
sbb
leave
loop
leave
leave
xchg
sbb
leave
add
leave
xchg
sbb
mov
xchg
push
or
jecxz
ss
pop
fidivr
movs
sbb
leave
xchg
sbb
xchg
xchg
adc
sbb
imul
fwait
outs
fstp
mov
es
(bad)
xchg
cmps
popf
or
push
ds
int
xchg
sbb
cmp
jb
xchg
sbb
jmp
arpl
xchg
jae
out
repnz
loop
xchg
sbb
leave
cmp
ds
imul
imul
rcl
jne
mov
loop
xchg
cmovp
out
repnz
pop
fwait
outs
fcmovnu
data16
sbb
iret
call
(bad)
jb
out
push
imul
scas
pushf
push
dec
mov
xchg
mov
or
pop
imul
aas
pop
imul
imul
rcl
jne
mov
loop
xchg
pminsw
out
repnz
loop
xchg
sbb
leave
add
imul
inc
pop
imul
imul
rcl
jne
mov
loop
xchg
cpuid
jb
out
repnz
data16
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
rol
iret
cmp
xchg
sbb
popa
add
ret
mov
push
das
out
mov
mul
inc
dec
(bad)
psubsw
out
mov
sbb
leave
cmp
dec
fisub
mov
or
imul
jb
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
je
out
mov
out
jne
mov
sbb
enter
jb
out
repnz
div
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
cmp
out
mov
out
jne
mov
sbb
enter
jne
out
repnz
scas
jne
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
rol
iret
cmp
xchg
sbb
popa
add
ret
mov
test
out
mov
mul
ror
loop
lods
(bad)
jne
out
fisubr
sbb
pop
xchg
cmp
out
ret
leave
xchg
sbb
push
movs
sbb
leave
xchg
sbb
push
not
leave
cmp
dec
fidivr
movs
sbb
ficomp
sbb
imul
call
lar
out
push
imul
scas
pushf
push
dec
mov
xchg
mov
or
pop
imul
pop
jmp
sbb
imul
imul
rcl
jne
mov
loop
xchg
movlps
out
repnz
(bad)
je
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
fsubr
out
mov
out
cmc
nop
sub
sbb
ss
mov
loop
and
imul
retf
loop
scas
movs
sbb
mov
lods
(bad)
out
inc
jg
cwde
retf
loop
add
je
mov
dec
sub
sbb
push
popa
out
ss
mov
loop
and
imul
retf
loop
push
movs
sbb
ficom
sbb
imul
call
(bad)
in
(bad)
sub
loop
xchg
sbb
leave
cmp
ds
imul
imul
rcl
cmc
xor
out
(bad)
ss
fs
loope
xchg
sbb
push
cmp
cmp
loop
imul
bnd
pusha
push
imul
mov
out
mov
and
retf
xchg
out
jns
out
lock
out
leave
xchg
out
fdivr
sbb
leave
xchg
sbb
repnz
sbb
xor
xchg
fcomp
inc
adc
xchg
sbb
xor
xchg
call
in
jno
sbb
mov
xchg
xchg
pop
pop
ss
jns
and
mov
div
xchg
sbb
out
sbb
pop
xor
pop
ss
sbb
fiadd
cmps
sbb
mov
sbb
mov
sbb
leave
loop
loop
stos
sbb
leave
jmp
ss
mov
sbb
leave
xchg
push
jmp
inc
jae
cwde
imul
data16
loope
xchg
sbb
(bad)
pop
cmp
add
out
bnd
loop
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
sub
out
mov
out
cmc
in
sub
sbb
ss
mov
loop
and
imul
retf
loop
xchg
cmps
sbb
mov
lods
lss
out
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
clc
sub
sbb
mov
sbb
leave
jmp
sbb
leave
xchg
sbb
leave
push
(bad)
fxch
xchg
sbb
mov
sbb
leave
loop
icebp
leave
xchg
sbb
stos
sbb
leave
loop
hlt
dec
push
sbb
mov
sbb
leave
sub
imul
ss
aaa
imul
(bad)
pop
pop
xchg
lock
add
imul
ss
(bad)
in
xchg
sbb
mov
out
ss
in
xchg
sbb
xchg
xchg
or
cmp
out
jmp
fidiv
sbb
mov
xchg
fs
sub
aaa
imul
mov
pop
sub
loop
nop
mov
out
leave
cmp
stos
mov
sbb
leave
out
sbb
xchg
sbb
add
imul
xchg
sbb
adc
xchg
fnstenv
loop
in
leave
xchg
sbb
sbb
add
retf
xchg
ins
cwde
retf
loop
add
cmc
nop
push
out
mov
push
mov
out
(bad)
popa
out
ss
mov
loop
and
imul
retf
loop
into
fcomp
mov
lods
cmovbe
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
dec
push
out
mov
out
cmc
add
(bad)
popa
out
ss
mov
loop
and
imul
retf
loop
fcomp
leave
ficom
loop
xchg
pmaxub
sub
sbb
leave
xchg
sbb
leave
cmp
test
xchg
sbb
gs
leave
xchg
fnstcw
loop
in
xchg
sbb
bound
or
movs
sbb
enter
or
sahf
repnz
fimul
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
aam
out
mov
out
cmc
test
out
(bad)
popa
out
ss
mov
loop
and
imul
retf
loop
(bad)
fstp
mov
out
and
retf
xchg
outs
fcmovnu
push
fstp
imul
call
(bad)
in
(bad)
sub
loop
xchg
sbb
leave
sub
imul
aad
je
sbb
ficom
fstp
ficomp
sbb
imul
call
(bad)
or
movs
push
imul
scas
pushf
push
dec
mov
xchg
mov
or
and
imul
out
imul
imul
rcl
jne
mov
sbb
enter
or
sahf
repnz
sub
mov
in
sbb
iret
call
(bad)
(bad)
call
xchg
sbb
leave
adc
imul
push
and
imul
imul
rcl
jne
mov
loop
xchg
psrld
imul
repnz
xchg
or
movs
cmp
out
scas
pushf
push
sahf
int3
outs
call
rol
iret
cmp
xchg
sbb
popa
add
ret
mov
inc
push
out
mov
div
mov
sbb
enter
or
sahf
repnz
pop
fwait
outs
fcmovnu
push
ficomp
imul
call
(bad)
in
(bad)
sub
loop
xchg
sbb
leave
cmp
ds
ret
je
sbb
fisub
ficomp
fisubr
sbb
imul
call
(bad)
in
(bad)
sub
loop
xchg
sbb
leave
add
imul
std
ret
je
sbb
fidivr
sbb
mov
loope
imul
or
movs
cmp
out
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
rcl
sbb
mov
sbb
leave
cmp
xchg
sbb
add
ret
je
mov
nop
push
out
mov
div
mov
out
(bad)
popa
out
ss
mov
loop
and
imul
retf
loop
into
fistp
pop
imul
ss
push
loope
xchg
sbb
movs
push
out
mov
out
cmc
js
out
(bad)
popa
out
ss
mov
loop
and
imul
retf
loop
push
fistp
mov
sbb
mov
sbb
leave
loop
cmc
sub
out
pop
adc
mov
dec
out
popa
loopne
loope
xchg
sbb
cmp
ss
adc
imul
bnd
repnz
imul
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
cmp
sbb
call
ficomp
loop
xchg
(bad)
or
arpl
stos
or
imul
scas
pushf
push
sahf
int3
outs
call
xchg
push
loope
xchg
sbb
loopne
out
mov
out
pushf
rcr
sbb
imul
imul
rcl
cmc
dec
push
out
(bad)
ss
fs
loope
xchg
sbb
push
cmp
cmp
push
imul
bnd
int
sub
loop
xchg
sbb
leave
sub
imul
out
ss
ja
add
jne
imul
leave
push
out
cmc
xor
out
mov
xchg
data16
ficomp
loop
xchg
setp
imul
ss
jmp
xchg
push
loope
xchg
sbb
add
and
ficom
sbb
leave
xchg
sbb
xchg
pop
out
mov
lods
mov
mov
out
or
retf
xchg
mov
dec
mov
push
sbb
cmp
in
mov
into
xchg
sbb
mov
imul
frstor
shl
leave
xchg
sbb
adc
imul
xchg
outs
ficomp
fwait
jmp
out
mov
sbb
leave
cmp
cmc
rcr
popf
jae
out
jae
fistp
inc
aad
sbb
add
sbb
imul
fwait
sbb
pop
mov
cmp
imul
sub
jne
imul
fsubp
pop
loop
call
mov
aam
outs
clc
mov
jae
imul
sbb
pop
xchg
outs
fidiv
xchg
out
jae
addr16
mov
out
mov
sbb
leave
loopne
adc
ss
mov
sbb
leave
loop
xor
loop
sub
loopne
adc
xor
out
arpl
dec
xor
movs
xchg
mov
cmp
out
mov
sbb
leave
xchg
push
mov
adc
mov
pop
sbb
leave
out
pop
xor
mov
aaa
sub
scas
xchg
sbb
mov
lods
mov
xor
out
mov
xchg
sbb
ficomp
bound
xchg
sbb
xor
loop
add
imul
push
retf
xchg
sbb
mov
out
pop
aaa
out
pop
aaa
sub
mov
pushf
sub
imul
mov
sbb
leave
xchg
jmp
pop
jnp
sbb
leave
xchg
mov
xor
out
fidivr
rcr
packssdw
jne
push
sbb
leave
xchg
mov
cdq
mov
sbb
ss
sbb
(bad)
xchg
sbb
inc
data16
nop
pop
out
pop
stos
push
inc
xor
out
cmp
out
ss
loope
xchg
sbb
out
push
loopne
xchg
mov
push
pop
out
leave
fidiv
leave
xchg
sbb
leave
fisubr
leave
xchg
sbb
leave
fidivr
leave
xchg
sbb
pusha
out
test
fisub
and
leave
xchg
out
fld
mov
or
sbb
aaa
imul
xchg
mov
sbb
leave
xchg
mov
pushf
push
out
mov
lods
push
adc
loope
xchg
sbb
cli
fistp
leave
xchg
outs
cwde
mov
sbb
pop
das
lea
leave
xchg
mov
and
sbb
into
inc
pop
xchg
icebp
lods
bound
ss
mov
sbb
leave
push
sbb
ficom
mov
ss
sti
jnp
out
pavgw
xchg
out
mov
clc
pop
imul
xchg
sbb
xor
leave
xchg
mov
loop
cmp
mov
out
ss
ja
add
ja
out
loope
xchg
sbb
imul
add
adc
fs
ss
add
loop
sbb
imul
xchg
outs
fcmove
fidiv
leave
xchg
(bad)
psubsw
out
dec
mov
sbb
leave
xchg
mov
pushf
pop
out
mov
neg
mov
sbb
leave
imul
pushf
in
inc
imul
xchg
sbb
add
add
xchg
cmc
bound
push
imul
add
popf
mov
sbb
leave
push
cwde
inc
xchg
sbb
or
aad
mov
dec
pop
imul
imul
sbb
ss
in
jne
fwait
out
ficom
sbb
imul
xchg
sbb
data16
stos
add
ja
add
cwde
retf
loop
and
cmp
loop
imul
leave
xchg
out
sub
inc
or
lods
clc
jp
imul
into
jnp
leave
xchg
out
icebp
repz
sbb
retf
xchg
sbb
rcr
imul
mov
xchg
outs
fisub
xchg
cs
leave
xchg
pmaxub
iret
sbb
leave
add
imul
sbb
frstor
cmp
out
shl
bound
xchg
sbb
test
add
popa
loopne
or
loop
sub
loop
loop
arpl
rol
or
pop
sub
loop
loop
addr16
cmps
add
or
xchg
or
ss
jnp
adc
retf
ss
jnp
adc
sub
sbb
fs
dec
shr
cmp
iret
dec
pop
imul
add
out
lock
imul
call
cs
xchg
xor
jecxz
jae
mov
(bad)
sub
sbb
inc
arpl
mov
loop
ficom
sbb
cmp
mov
sbb
(bad)
imul
into
inc
pop
xchg
icebp
xchg
xchg
or
mov
fdiv
pop
sub
imul
ins
loop
cmp
push
dec
shl
or
push
imul
jae
mov
ss
out
ss
cmc
int3
pop
out
mov
dec
out
pop
xchg
mov
xchg
pop
out
mov
adc
imul
mov
xor
fisub
add
fsubrp
xlat
sbb
mov
sub
jp
xchg
into
in
lods
pop
xchg
ds
shl
bound
icebp
lods
bound
sub
nop
mov
pop
loop
cmp
test
shl
sbb
xchg
lock
adc
jmp
leave
fisub
std
leave
xchg
setb
imul
repnz
fld
sbb
leave
push
jmp
sbb
sbb
mov
xchg
outs
fiadd
stos
cmps
imul
bound
sub
nop
mov
pop
loop
cmp
test
jb
imul
neg
rcl
cmp
test
mov
loop
pop
rcr
aas
stos
xchg
add
fisubr
std
leave
xchg
sbb
xor
ss
jbe
in
pushf
fst
or
xor
inc
jmp
repz
sbb
dec
pusha
cmp
inc
ds
inc
ret
xor
push
pop
out
mov
lods
mov
xor
sbb
ss
sahf
(bad)
xchg
cmps
popf
or
push
ds
sbb
cmp
mov
dec
jmp
rcr
mov
jo
imul
fwait
outs
fistp
cmp
out
sbb
fisubr
sbb
fimul
in
sbb
iret
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
loop
imul
repnz
cmps
add
imul
scas
pushf
push
sahf
int3
outs
call
rol
iret
cmp
mov
loop
add
mov
popa
add
imul
cs
imul
rcl
jne
mov
std
leave
xchg
mov
test
out
mov
out
xchg
mov
lock
ret
push
mov
loop
and
imul
cmps
cs
imul
rcl
jne
mov
std
leave
xchg
mov
push
scas
out
cmc
sub
out
(bad)
popa
out
ss
mov
loop
pop
sub
imul
imul
rcl
loop
cmp
inc
jmp
loop
cmp
loop
imul
bnd
push
je
push
mov
loop
add
ret
push
mov
loop
cmp
imul
pop
jmp
sbb
imul
imul
rcl
jne
mov
std
leave
xchg
mov
clc
pop
out
mov
out
jne
mov
sbb
leave
xchg
mov
mov
sbb
inc
pop
out
(bad)
popa
out
ss
mov
loop
and
pop
std
je
push
mov
loop
xor
imul
in
je
push
mov
loop
and
imul
pop
jmp
sbb
imul
imul
rcl
cmc
sub
sbb
ss
fs
sbb
pop
xor
pop
ss
sbb
fidivr
sbb
pop
inc
cmp
out
sbb
fimul
sbb
fimul
in
sbb
iret
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
loop
imul
repnz
nop
mov
pop
loop
cmp
test
out
repnz
pop
fwait
outs
fcmovnu
retf
ss
sbb
iret
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
mov
repnz
nop
mov
pop
loop
cmp
mov
imul
repnz
jp
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
out
sbb
fsubrp
(bad)
sbb
mov
je
imul
cmp
bound
pop
inc
cmp
out
sbb
ficom
sbb
fidiv
sbb
imul
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
es
imul
repnz
nop
mov
pop
loop
cmp
cmp
imul
repnz
inc
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
out
sbb
fisubr
sbb
mov
ss
add
loop
cmc
cwde
pop
out
pop
adc
mov
dec
out
popa
out
sbb
pop
jge
pop
ss
sbb
fdivp
xlat
sbb
ficom
xlat
sbb
imul
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
xchg
imul
repnz
nop
mov
pop
loop
cmp
call
data16
out
ficom
sbb
imul
call
(bad)
in
(bad)
sub
nop
mov
pop
loop
cmp
inc
push
imul
repnz
or
imul
cmp
out
scas
pushf
push
sahf
int3
outs
call
rol
iret
cmp
mov
loop
add
mov
popa
sbb
imul
aaa
shl
mov
loop
sub
imul
out
ss
ja
add
jne
imul
sub
imul
mov
loop
lods
or
imul
mov
loop
sub
imul
leave
xchg
mov
mov
xchg
mov
adc
xor
imul
retf
loop
push
int3
sbb
(bad)
in
pop
fwait
outs
fld
mov
clc
mov
arpl
imul
add
ror
mov
xchg
sbb
ss
adc
loopne
adc
imul
mov
aaa
loop
mov
xchg
sbb
jmp
loop
loop
cmc
jl
out
adc
imul
ret
pushf
icebp
mov
out
je
punpckhdq
retf
sbb
leave
add
ja
out
mov
fisubr
jecxz
imul
xchg
sbb
add
je
(bad)
out
xor
out
fimul
and
aas
stos
call
sbb
ss
loope
xchg
sbb
out
push
loopne
xchg
mov
or
out
mov
lods
sbb
gs
test
fiadd
loop
call
call
sbb
ss
loope
xchg
sbb
ret
ss
test
mov
xchg
mov
mov
popf
add
leave
loop
test
xchg
sbb
add
movs
enter
fidivr
sbb
mov
lock
imul
mov
out
icebp
out
add
leave
xchg
out
imul
sbb
ss
sti
jnp
out
pavgw
xchg
out
mov
xchg
ja
imul
xchg
sbb
cmp
leave
xchg
mov
loop
cmp
mov
out
ss
ja
add
ja
out
loope
xchg
sbb
imul
sbb
out
mul
aaa
imul
add
loop
and
imul
xchg
outs
fcmove
fiadd
leave
xchg
(bad)
psubsw
out
dec
mov
sbb
leave
xchg
mov
test
sbb
mov
sbb
leave
imul
lods
xchg
and
retf
loop
add
ss
bound
push
imul
sbb
out
mov
sbb
leave
push
cwde
dec
nop
sbb
or
aad
popf
call
sbb
xor
pop
xchg
outs
ficomp
out
ss
(bad)
retf
dec
pusha
sub
imul
ss
(bad)
retf
dec
fidivr
push
loop
call
sbb
ss
mov
sbb
leave
cmp
mov
out
adc
arpl
ss
push
mov
xchg
sbb
leave
cmp
push
pop
imul
rcl
ss
or
fidiv
leave
xchg
sqrtps
xchg
sbb
xchg
sbb
jl
out
pop
pusha
cmp
cmp
imul
pusha
sbb
imul
daa
push
je
psrad
imul
stos
neg
loop
call
and
lds
sbb
ficomp
loop
call
ins
cwde
stos
xchg
sbb
mov
aam
pusha
xchg
push
mov
xchg
sbb
sub
scas
jmp
(bad)
bndldx
imul
mov
sbb
leave
push
sbb
retf
xchg
sbb
mov
pop
sbb
loop
ja
xchg
push
mov
or
sbb
leave
xchg
lar
imul
mov
sbb
leave
and
shl
ss
inc
jmp
add
popa
loopne
adc
push
jmp
fidivr
into
sbb
leave
push
jmp
jl
out
mov
imul
pushw
imul
lock
sbb
ss
add
add
imul
cmp
mov
aaa
cmp
sbb
imul
fidiv
rcr
add
dec
pop
les
ja
xor
imul
xchg
mov
mov
sbb
mov
out
loope
cmp
out
fiadd
rcr
xor
outs
clc
mov
sbb
imul
adc
and
imul
xor
sbb
into
inc
pop
xchg
icebp
bound
push
jne
sbb
imul
fwait
sbb
cmp
push
imul
aaa
xchg
xchg
adc
xchg
mov
jo
sbb
mov
jmp
leave
xchg
out
inc
outs
outs
in
fnstsw
jmp
mov
cwde
inc
out
mov
xor
add
jne
jo
mov
dec
imul
fisttp
call
jne
mov
sbb
fidivr
adc
outs
imul
jae
mov
add
mov
movs
sbb
ss
pop
enter
add
(bad)
je
push
ret
sbb
sahf
bnd
pop
ret
sbb
ss
shl
test
inc
out
push
xchg
mov
jecxz
xchg
jmp
loop
sahf
fisub
dec
mov
fadd
imul
mov
add
ja
add
ja
add
ja
add
ja
add
jne
push
sbb
pop
ins
lea
ss
movs
pop
popa
out
ror
ja
cmp
sub
je
setb
imul
aaa
cmp
sub
ja
punpckldq
imul
aaa
cmp
sub
je
(bad)
push
imul
aaa
cmp
sub
ja
cmovb
imul
aaa
cmp
sub
jbe
rsqrtps
imul
fdiv
mov
ss
dec
pop
pop
sbb
push
hlt
cmps
sbb
ss
dec
pop
pop
sbb
push
hlt
cmps
sbb
ss
dec
pop
pop
sbb
cmps
enter
jb
sbb
pop
pop
sbb
inc
retf
fisub
sbb
(bad)
loop
ja
cmp
sub
ja
pmaxsw
imul
aaa
cmp
sub
ja
paddd
imul
aaa
cmp
sub
je
bswap
adc
ja
cmp
sub
je
pmaxub
imul
add
ror
inc
push
test
or
dec
cmp
out
retf
cmc
stos
sub
cmc
jo
out
xchg
dec
jb
ss
call
jo
adc
ja
xchg
rcr
adc
out
xchg
push
js
ss
call
addr16
adc
pushf
shr
sbb
add
pop
sbb
imul
out
es
cmps
sbb
sbb
cmps
sbb
add
loop
ja
pop
xor
imul
out
es
cmps
sbb
sub
cmps
sbb
add
loop
inc
js
adc
imul
out
es
cmps
sbb
push
hlt
cmps
sbb
add
loop
dec
js
sub
imul
out
es
cmps
sbb
push
hlt
cmps
sbb
ss
sub
loop
ja
xchg
rcr
push
dec
out
xchg
ja
pop
ss
call
arpl
imul
cmc
outs
clc
mov
repz
popa
aam
mov
dec
out
pop
sahf
cmp
ss
xchg
adc
leave
loop
jne
mov
sbb
leave
xchg
fldenv
enter
imul
imul
ja
sbb
pusha
or
leave
pop
rol
pusha
loopne
loope
adc
cs
ss
mov
ss
jne
imul
mov
pop
add
(bad)
je
(bad)
sbb
or
sbb
ss
loop
pop
js
ss
dec
pop
push
ins
pop
into
inc
mov
dec
pop
jg
or
out
add
(bad)
je
pop
in
sub
ja
sub
imul
out
into
inc
pop
xchg
icebp
add
loop
pop
js
ss
loop
das
inc
pop
add
imul
mov
dec
pop
cmp
popf
add
ret
pop
in
sub
ja
and
imul
out
ss
ja
add
ja
add
ja
add
ja
add
imul
pop
jg
sbb
imul
lock
dec
pop
pop
sbb
xor
cmps
sbb
ss
loop
pop
js
ss
loop
das
inc
pop
ss
jne
imul
xor
add
(bad)
in
sub
ja
cmp
xchg
sub
pushf
rcr
ss
loop
pop
js
ss
loop
das
inc
pop
ss
jne
imul
xor
add
(bad)
je
pop
in
sub
ja
cmp
imul
out
ss
shr
test
xchg
rcr
sub
ja
add
sbb
imul
push
add
sbb
in
sub
jne
mov
sbb
adc
mov
pop
imul
add
cmps
sbb
jb
cmps
sbb
aaa
imul
mov
sbb
imul
pop
mov
pop
ss
cmc
pushf
dec
out
xchg
jg
pop
ss
loop
pop
js
ss
loop
or
add
sbb
pop
push
cmp
je
(bad)
cwde
in
sub
ja
adc
stos
sub
pushf
icebp
loope
sbb
je
lea
cmp
adc
jne
mov
sbb
aaa
imul
add
sti
cmp
imul
ja
lea
je
(bad)
xor
imul
add
dec
sbb
pop
push
cmp
je
(bad)
cwde
in
sub
ja
sub
imul
out
icebp
aaa
mov
loop
pop
js
ss
loop
or
ss
sbb
imul
add
imul
jmp
pop
ss
cmc
cld
dec
out
xchg
inc
js
ss
leave
xchg
lea
ja
lea
ja
lea
ss
pop
push
sbb
add
in
sub
ja
sub
imul
out
into
pushf
add
imul
add
cmps
sbb
jb
cmps
sbb
ss
leave
imul
pop
jg
sbb
cmp
jne
mov
sbb
adc
retf
pop
imul
add
cmps
sbb
jb
cmps
sbb
pop
jae
sbb
imul
je
movs
sbb
ss
cmc
cmp
sbb
ss
loop
pop
js
ss
loop
das
inc
pop
ss
jne
imul
pop
pop
out
add
dec
pop
js
pop
add
sbb
ss
imul
ja
lea
ja
lea
aaa
imul
xchg
imul
pop
imul
add
(bad)
je
pop
in
sub
ja
cmp
imul
out
ss
shr
test
xchg
sar
sub
ja
add
sbb
imul
and
out
mov
pop
jmp
mov
sbb
add
xchg
sub
ja
xchg
shr
test
xchg
sar
sub
ja
add
imul
and
out
mov
(bad)
lea
movs
sbb
ss
imul
out
into
inc
pop
xchg
icebp
add
loop
pop
js
ss
loop
or
ss
ja
add
sbb
pop
imul
add
ret
(bad)
sbb
sub
jne
imul
sbb
ja
lea
ja
lea
je
lea
ss
and
out
mov
pop
jmp
mov
sbb
or
imul
out
ss
shr
test
xchg
rcr
sub
ja
add
imul
sub
out
mov
(bad)
(bad)
out
sub
jne
mov
sbb
pop
imul
scas
enter
xor
loop
loop
xor
loop
cmc
mov
sbb
imul
mov
mov
sub
pop
sub
loop
jne
mov
sbb
pop
pushf
sbb
mov
sub
dec
fidiv
loop
call
js
ss
xor
loop
ja
xchg
rcl
xor
sbb
pusha
and
imul
ja
lea
sbb
cs
ss
mov
ss
jne
imul
mov
pop
add
(bad)
je
(bad)
sbb
in
out
xchg
das
inc
pop
ss
loop
pop
js
ss
dec
pop
push
ins
pop
into
inc
mov
dec
pop
jg
or
out
add
les
(bad)
in
sub
ja
cmp
imul
out
fld
mov
loop
pop
js
ss
loop
das
inc
pop
ss
sbb
imul
mov
dec
pop
cmp
popf
add
ret
pop
in
sub
ja
cmp
xchg
sub
ja
add
ja
add
ja
add
ja
add
ja
add
imul
pop
jg
xchg
imul
lock
dec
pop
pop
sbb
xor
cmps
sbb
ss
loop
pop
js
ss
loop
or
add
ja
add
sbb
jmp
mov
sbb
sub
mov
mov
dec
imul
add
cwde
je
sbb
ss
jne
push
sbb
ja
jp
or
inc
pop
ss
xchg
or
sbb
and
shl
stos
sub
cmc
dec
je
sbb
pop
imul
add
add
imul
ja
lea
je
(bad)
xor
imul
add
repz
add
sbb
jmp
mov
sbb
sub
mov
mov
lods
lea
ja
lea
je
(bad)
xor
imul
or
repz
imul
pop
push
cmp
je
(bad)
cwde
in
sub
ja
cmp
imul
out
dec
sahf
sbb
pop
imul
add
cmps
sbb
jb
cmps
sbb
ss
pop
add
sbb
imul
gs
sbb
ss
cmc
in
jne
sbb
ss
loop
pop
js
ss
loop
das
inc
pop
ss
ja
add
imul
ss
pop
sub
(bad)
je
lea
ss
imul
imul
shl
mov
sbb
ja
lea
ja
lea
add
imul
add
(bad)
je
pop
in
sub
ja
cmp
stos
sub
ja
xchg
shr
test
xchg
rcr
sub
ja
add
sbb
ss
sbb
in
sub
jne
mov
sbb
sub
mov
pop
imul
add
cmps
sbb
jb
cmps
sbb
aaa
imul
shr
sbb
imul
pop
mov
pop
ss
cmc
fdiv
sbb
ss
loop
pop
js
ss
loop
das
inc
pop
ss
jne
imul
pop
xchg
out
ss
jne
imul
pop
cmp
pop
add
sbb
ss
imul
ja
lea
je
lea
ss
ja
add
sbb
xchg
sub
jne
mov
sbb
sbb
mov
call
out
add
pop
ss
loop
or
ss
ja
add
sbb
jmp
mov
sbb
ss
imul
out
ss
shr
test
xchg
sar
sub
ja
add
jne
imul
mov
pop
ss
(bad)
je
(bad)
sbb
xor
sbb
ss
loop
pop
js
ss
loop
das
inc
pop
ss
jne
imul
pop
sub
sbb
imul
mov
pop
add
sbb
ss
imul
lds
sbb
fsubp
and
in
lahf
sbb
imul
mov
popa
aam
sub
mov
(bad)
and
add
imul
pop
imul
mov
xchg
adc
ss
sahf
enter
cmps
imul
pop
imul
mov
jb
sbb
icebp
adc
ss
into
pushf
add
cs
dec
mov
sbb
push
div
fbld
sbb
leave
xchg
fldcw
push
mov
sbb
fs
sbb
ss
xchg
adc
push
out
cmc
jmp
xchg
jae
out
fld
lea
pop
outs
push
into
cmp
push
je
(bad)
sbb
imul
leave
sbb
mov
call
xor
inc
jmp
or
pusha
aad
xor
movd
aaa
fwait
outs
(bad)
imul
mov
sbb
leave
cmp
inc
cs
int3
ja
sbb
ss
mov
jmp
loop
push
div
(bad)
loop
xchg
mov
add
sbb
mov
imul
sbb
fidiv
sbb
xor
(bad)
loop
xchg
mov
xor
out
mov
sbb
inc
jp
or
imul
leave
cmp
mul
imul
(bad)
push
xchg
lock
loop
push
div
fisub
loop
xchg
mov
clc
jl
sbb
inc
jp
push
xchg
out
mov
sbb
leave
cmp
stos
and
popf
dec
xchg
loopne
daa
add
cwde
ss
sbb
add
imul
arpl
pop
ss
sbb
fsubp
lock
(bad)
loop
popf
dec
xchg
out
push
je
push
ss
sbb
or
leave
popa
xchg
or
mov
pop
ss
sbb
fidivr
lock
cmp
fldenv
loop
xchg
mov
or
mov
sbb
inc
jp
cmp
sub
nop
mov
sbb
leave
cmp
cmp
imul
dec
xchg
jmp
imul
xchg
sbb
xor
imul
lea
retf
loop
lods
addr16
leave
gs
or
ds
pop
ss
sbb
fiadd
out
add
push
out
sub
nop
mov
sbb
leave
cmp
cmc
fimul
ds
add
je
(bad)
pop
test
xchg
sbb
pop
stos
rcl
pop
pop
imul
pop
jmp
sbb
xchg
mov
sbb
pusha
cmp
push
movs
cmp
pop
xchg
outs
fidivr
jae
sbb
popa
cmp
adc
xchg
sbb
inc
arpl
add
ins
ss
clc
mov
fist
popa
aad
and
push
data16
pop
out
mov
les
imul
mov
adc
leave
cmp
and
cmc
lock
sbb
ss
mov
xchg
addr16
sbb
aaa
push
div
fldenv
jmp
out
mov
adc
leave
xchg
in
daa
add
scas
je
push
fistp
or
imul
xchg
sbb
xor
fldenv
jmp
out
mov
neg
mov
adc
leave
loop
popf
mov
xchg
or
push
pop
ss
lock
ss
out
into
xchg
sbb
inc
jp
add
sub
nop
mov
adc
leave
cmp
call
pop
loop
ins
xchg
or
pop
push
pop
ss
lock
ss
out
into
xchg
sbb
inc
jp
push
test
out
mov
adc
leave
cmp
dec
and
xchg
(bad)
push
xchg
lock
out
into
xchg
sbb
test
out
mov
adc
leave
cmp
and
popf
mov
xchg
or
loopne
pop
ss
lock
ss
out
into
xchg
sbb
inc
jp
mov
sub
nop
mov
adc
leave
cmp
loop
imul
mov
xchg
or
mov
(bad)
lock
ss
jmp
sbb
xchg
sbb
inc
jp
cmc
test
out
mov
adc
leave
cmp
mov
mov
xchg
or
push
(bad)
lock
ss
out
into
xchg
sbb
inc
jp
cmp
mov
adc
leave
cmp
xchg
and
jne
retf
movs
sbb
leave
xchg
mov
and
adc
mov
xchg
outs
fistp
inc
pop
add
je
pmulhuw
xchg
sbb
ficomp
in
xchg
aad
cmp
pop
cmc
rcl
imul
pusha
out
mov
out
aas
jmp
outs
fild
mov
sbb
and
ds
icebp
into
xchg
sbb
fs
(bad)
xor
out
aaa
push
sbb
leave
xchg
out
mov
in
ss
loope
xchg
sbb
cmp
fcomp
imul
xchg
sbb
or
bound
aaa
imul
mov
sbb
leave
imul
imul
shl
(bad)
leave
rcl
into
xchg
sbb
pop
ds
ss
loope
xchg
sbb
jmp
mov
pop
in
xchg
out
pop
and
mov
stos
adc
not
into
xlat
mov
sub
mov
cmp
stos
pop
imul
cmps
sbb
cmps
retf
pop
inc
ds
ss
loope
xchg
sbb
jle
sbb
(bad)
loop
jne
retf
pop
je
pop
ss
loope
xchg
sbb
xchg
lock
frstor
(bad)
sbb
mov
pop
loop
cmp
and
movs
test
out
ror
loop
lods
push
retf
loop
add
les
cwde
retf
loop
sbb
imul
mov
pop
loop
cmp
shl
imul
bnd
cwde
retf
loop
xor
imul
xchg
sbb
mov
jecxz
mov
xchg
mov
int3
mov
sbb
leave
xchg
mov
dec
jl
sbb
ss
loope
xchg
sbb
into
repz
ret
sbb
leave
xchg
mov
dec
neg
loop
scas
jmp
mul
aaa
imul
mov
sbb
leave
call
cmp
imul
leave
loop
jmp
sbb
xchg
sbb
cmp
rcr
imul
into
xchg
sbb
pop
sti
inc
pop
add
lds
cwde
retf
loop
and
imul
push
cwde
retf
loop
adc
imul
xchg
sbb
adc
imul
pushf
sbb
fisttp
cwde
loop
sbb
mov
loop
enter
inc
jnp
cwde
loop
sbb
lock
loop
enter
frstor
loop
sbb
mov
xor
leave
xchg
in
out
pop
jmp
sbb
xchg
sbb
leave
cmp
nop
mov
sbb
leave
cmp
bound
imul
bnd
cwde
retf
loop
and
imul
pushf
sbb
mov
xchg
mov
test
sbb
leave
xchg
push
xor
ja
add
imul
xchg
sbb
mov
dec
or
imul
xchg
sbb
xchg
push
jmp
inc
jp
sbb
leave
xchg
mov
inc
js
sbb
leave
xchg
mov
mov
fwait
sbb
cmp
dec
daa
imul
mov
pop
loop
cmp
in
xchg
(bad)
inc
ja
add
cmc
ins
js
sbb
imul
xchg
sbb
data16
test
xchg
sbb
ficom
and
mov
out
in
loopne
xchg
sbb
fidiv
cmc
sbb
jns
out
jbe
cld
sbb
xor
mov
xchg
sbb
xor
fbstp
imul
imul
es
pusha
cmp
mov
out
pop
aas
xchg
cmc
add
je
lea
ss
imul
test
loop
stos
xchg
or
mov
imul
xor
test
out
mov
hlt
cmps
sbb
ja
jae
imul
mov
add
dec
stos
sub
cmc
push
jp
sbb
add
je
(bad)
daa
imul
add
sbb
imul
dec
out
pop
outs
out
ss
lods
fcom
cmc
clc
jnp
sbb
xchg
sub
nop
mov
or
leave
cmp
push
lods
xchg
sbb
leave
imul
mov
out
ss
out
out
xchg
test
inc
fbld
pop
imul
and
cmps
in
test
fsubr
clc
xor
loop
inc
mov
loop
xchg
mov
lods
bound
fstp
outs
and
adc
xchg
pop
into
jnp
test
loopne
iret
je
xlat
mov
call
outs
mov
enter
jmp
scas
fist
lock
xchg
fist
dec
pop
out
lock
dec
lock
xchg
out
adc
sbb
aaa
push
jmp
loop
pop
and
add
bound
pop
sti
inc
pop
add
lds
cwde
test
sub
imul
jns
sbb
test
out
lods
fcom
sbb
ficom
loop
out
mov
fisub
and
test
and
imul
ss
mov
inc
pop
add
lds
pop
test
js
sbb
leave
xchg
push
xor
out
ss
cmp
je
(bad)
fucomi
sub
jne
retf
movs
sbb
ss
xor
loop
nop
mov
loop
out
pop
loopne
out
sub
sbb
popf
mov
sbb
add
lds
cmp
je
out
mov
xchg
push
mov
movs
sbb
ss
cmp
je
(bad)
fucomi
sub
jne
cmc
cmps
sbb
ss
pop
lock
xchg
push
lock
out
ss
inc
xchg
out
inc
aas
xchg
cmc
add
ja
add
ja
add
jne
imul
pop
imul
cmp
imul
add
ja
add
dec
faddp
call
movs
leave
fs
mov
out
push
repnz
xchg
mov
fs
mov
xchg
fs
sub
aaa
imul
mov
or
leave
cmp
push
imul
pop
imul
fidivr
imul
fnsave
sbb
leave
fs
mov
out
push
repnz
xchg
mov
inc
jp
sbb
leave
xchg
fs
sub
aaa
imul
mov
or
leave
cmp
push
imul
pop
imul
jb
imul
inc
fisttp
push
cmp
movs
loop
out
ror
loop
out
push
lock
xchg
outs
fidivr
imul
retf
ja
outs
pop
cli
out
out
sub
xchg
jae
(bad)
sbb
sbb
imul
add
bound
imul
ss
int
xor
imul
jmp
cmc
movs
jnp
sbb
jae
in
imul
mov
fdivp
and
jae
out
imul
cmp
mov
imul
ss
shr
test
add
ja
add
ja
add
jne
imul
add
(bad)
je
lea
ss
imul
ss
cmc
je
out
pop
imul
test
outs
cmp
and
imul
inc
inc
(bad)
out
sub
out
pop
adc
(bad)
imul
mov
or
leave
jmp
hlt
addr16
pop
push
loop
(bad)
or
leave
lods
bound
ss
out
inc
aas
xchg
cmc
out
movs
fist
repz
xchg
mov
pop
fbld
pop
add
sbb
imul
std
sbb
mov
call
push
loopne
adc
push
pop
imul
pop
fbld
sbb
leave
loop
xor
loop
nop
mov
or
leave
cmp
icebp
inc
sub
ja
add
cmc
cmp
sbb
imul
test
loop
add
ja
add
outs
jbe
lea
cmp
dec
fiadd
jmp
ss
jne
push
sbb
ss
cmps
sbb
ss
jae
mov
mov
sbb
imul
cmp
stos
cmp
ja
add
ja
out
stc
xor
inc
mov
and
clc
mov
fistp
imul
or
push
push
jmp
into
jnp
cdq
cmps
push
sbb
xor
arpl
imul
cld
arpl
sbb
ss
imul
and
jo
or
imul
mov
push
fistp
imul
dec
push
sbb
ss
out
cmp
xor
in
sub
loop
add
ss
leave
xchg
outs
cwde
ficom
out
mov
sub
loop
xchg
loop
add
leave
xchg
fldenv
loop
cmc
retf
xchg
sbb
leave
cmp
test
xchg
sbb
fidivr
sbb
mov
out
ss
aad
xchg
sbb
pop
mov
jmp
mov
leave
inc
(bad)
(bad)
sbb
out
sbb
sbb
xchg
fmulp
inc
je
cwde
rcl
cmp
leave
xchg
fs
xor
jb
retf
xchg
sbb
mov
push
aaa
imul
(bad)
sbb
leave
inc
(bad)
retf
xchg
sbb
out
pop
loopne
xchg
int3
cwde
out
xchg
sbb
add
ja
xchg
rcr
sub
cmc
pushf
out
mov
retf
adc
imul
movs
sbb
xor
mov
xchg
add
ss
adc
push
pop
imul
fbld
dec
ficom
and
movs
sbb
xor
loop
add
sbb
dec
ins
out
mov
lods
inc
sbb
jae
call
sbb
cmp
hlt
ins
ins
out
xchg
imul
push
mov
push
imul
imul
shl
(bad)
retf
xchg
sbb
imul
(bad)
in
xchg
sbb
push
loop
xchg
sub
imul
out
or
sub
add
in
stos
sub
imul
sub
imul
sub
imul
sub
imul
sub
imul
sub
adc
add
loop
jnp
(bad)
cmp
xchg
mov
sbb
leave
push
loop
xchg
sub
imul
sub
imul
sub
push
imul
sbb
imul
inc
jnp
cmp
out
sbb
sbb
out
xchg
sbb
mov
xchg
sbb
ss
sbb
leave
xchg
mov
mov
out
pavgb
xchg
data16
xor
pop
xor
loop
jne
imul
mov
xchg
mov
add
or
imul
xchg
sbb
ss
(bad)
ja
add
jne
mov
sbb
cmp
cmp
and
imul
xor
xchg
into
pop
pop
xchg
icebp
loope
sbb
xchg
sbb
leave
lods
(bad)
jmp
xchg
sbb
je
out
mov
out
add
sbb
aaa
xchg
sbb
xchg
rcr
mov
out
mov
xchg
fs
sub
aaa
imul
sub
out
push
mul
loop
xchg
mov
enter
mov
jmp
leave
xchg
out
inc
dec
lea
out
sub
ja
sub
imul
mov
movs
sbb
add
or
jmp
sbb
xchg
sbb
out
adc
leave
xchg
mov
sbb
adc
leave
xchg
mov
mov
out
mov
div
imul
mov
xchg
mov
add
pop
or
imul
xchg
sbb
ss
(bad)
ja
add
jne
mov
sbb
cmp
out
add
pop
ss
imul
xor
nop
mov
call
fistp
push
push
sahf
into
jnp
cmp
pop
mov
pop
ss
cmc
adc
out
leave
pop
sti
mov
psrld
imul
imul
sbb
leave
xchg
out
or
ss
sbb
mov
xchg
sbb
push
pop
jecxz
unpckhps
ja
add
jne
mov
paddd
imul
add
pop
xor
imul
xor
popf
mov
sbb
leave
push
cwde
ss
sbb
or
movs
mov
lods
push
aaa
xchg
sbb
data16
call
pop
inc
aas
pop
ss
call
fdivrp
in
sbb
pop
xchg
out
ss
sbb
xchg
sbb
pop
addr16
ds
mov
loop
imul
pop
lods
xor
add
cmc
pop
(bad)
out
leave
pop
addr16
aas
imul
aas
outs
out
mov
out
jne
imul
xchg
sbb
data16
call
pop
inc
aas
pop
ss
call
fiadd
sbb
pop
xchg
out
ss
sbb
xchg
sbb
pop
retf
xor
mov
imul
mov
loop
imul
pop
ret
xor
add
cmc
xor
out
leave
pop
retf
xor
mov
imul
xchg
push
(bad)
in
lods
push
aaa
xchg
sbb
data16
call
pop
leave
xor
out
call
fisubr
and
ss
sbb
xchg
sbb
pop
iret
xor
xor
imul
mov
loop
imul
pop
add
pop
ss
cmc
lods
arpl
sbb
ja
cvtps2pd
imul
punpckhbw
sbb
leave
xchg
fs
sub
aaa
imul
push
add
ja
add
retf
lea
ss
shl
and
out
fild
sbb
enter
fst
stos
mov
sbb
leave
loope
sbb
xchg
sbb
or
sbb
push
cdq
cmp
pop
inc
xor
add
cmc
adc
sbb
ja
bswap
xor
hlt
repz
jecxz
xchg
out
mov
sbb
leave
push
in
(bad)
loop
xor
loop
nop
mov
sbb
leave
cmp
ret
xchg
sbb
add
lds
cwde
ret
xchg
sbb
cmp
imul
sbb
aaa
xchg
sbb
xchg
sar
je
out
mov
out
leave
xchg
out
push
add
ja
add
retf
lea
ss
sar
ins
ins
out
fbld
in
lods
(bad)
enter
fst
stos
mov
sbb
leave
loope
sbb
xchg
sbb
or
sbb
push
cdq
cmp
pop
test
pop
ss
cmc
pop
ins
out
leave
pop
mov
cmp
sbb
leave
xchg
out
mov
call
fistp
push
push
adc
xchg
(bad)
inc
ret
outs
in
xchg
outs
fidivr
xchg
mov
mov
sbb
leave
cmp
nop
mov
sbb
leave
cmp
adc
imul
bnd
mov
shl
(bad)
cmc
retf
xchg
sbb
leave
loop
ja
add
ja
add
ja
add
sbb
test
outs
out
mov
xchg
lea
pop
imul
leave
xchg
movsx
imul
or
push
pop
imul
jbe
fs
sub
aaa
imul
mov
xchg
mov
pop
pop
jle
ss
push
jmp
in
outs
out
pop
imul
xchg
sbb
add
jne
mov
jecxz
xchg
cpuid
xor
nop
mov
call
fistp
push
push
ja
out
in
retf
xchg
sbb
out
call
leave
ficom
jecxz
xchg
jle
ss
in
retf
xchg
sbb
imul
loop
sbb
ret
loop
jp
sbb
xchg
sub
cmc
mov
sbb
pop
outs
lea
imul
(bad)
jecxz
ss
jmp
into
pushf
add
loopne
stc
retf
xchg
sbb
add
loop
lahf
sbb
leave
adc
imul
leave
movs
sbb
mov
out
inc
xchg
outs
ficomp
mov
xchg
sbb
cmp
loop
lahf
sbb
leave
adc
imul
leave
xchg
mov
aaa
add
retf
je
sbb
fidiv
push
jmp
inc
push
mov
imul
xchg
outs
ficomp
sbb
push
pop
add
dec
sub
jne
imul
fsubrp
imul
call
sbb
ds
cmps
sbb
ror
imul
mov
xchg
outs
fcmovu
jp
push
leave
push
jmp
inc
arpl
(bad)
xor
inc
push
imul
gs
pop
jl
mov
adc
imul
ss
int3
ss
dec
jnp
adc
push
rcr
cmp
sub
cmc
test
out
mov
cs
xchg
icebp
push
shl
stos
sub
push
xchg
sub
cmc
mov
out
or
imul
ja
(bad)
xor
add
pop
ss
in
loop
ja
pop
cmp
ror
add
pop
ss
in
loop
inc
js
and
push
hlt
cmps
sbb
push
hlt
cmps
sbb
ss
sar
and
fisubr
sub
sbb
fdivp
cmps
sbb
ss
sar
sub
fisubr
sub
sbb
jge
sub
sahf
in
ss
into
pushf
add
mov
sub
mul
add
(bad)
cmps
sbb
je
xchg
sbb
imul
sbb
cmps
sbb
adc
cmps
sbb
ss
sub
cmps
sbb
ss
cmps
sbb
ja
xchg
sbb
imul
push
hlt
cmps
sbb
sbb
cmps
sbb
je
xchg
sbb
imul
inc
jns
push
leave
push
jmp
adc
mov
loope
imul
imul
ds
movs
sbb
imul
cmp
out
imul
es
movs
sbb
imul
and
out
imul
push
cwde
movs
sbb
imul
sbb
out
imul
push
cwde
movs
sbb
imul
add
out
imul
mov
sbb
adc
les
loop
pop
xor
ds
loope
stos
xchg
xor
lods
mov
and
pop
sbb
mov
xor
pop
cmp
jno
pop
sbb
stos
xchg
sbb
add
cmc
lock
pop
push
ja
cmp
fst
pushf
fisubr
sbb
imul
push
out
imul
xchg
push
sbb
adc
fisttp
in
sbb
nop
jg
ins
pop
adc
xchg
dec
dec
jecxz
xchg
std
pusha
retf
ret
sbb
arpl
sbb
jbe
movs
sbb
imul
jb
movs
sbb
imul
jle
movs
sbb
imul
jp
movs
sbb
imul
cbw
movs
sbb
imul
bound
out
imul
outs
cwde
movs
sbb
imul
push
movs
sbb
imul
push
cwde
movs
sbb
imul
push
cwde
movs
sbb
imul
pop
cwde
movs
sbb
imul
pop
cwde
movs
sbb
imul
inc
cwde
movs
sbb
imul
inc
cwde
movs
sbb
imul
dec
cwde
movs
sbb
imul
dec
cwde
movs
sbb
imul
mov
movs
sbb
imul
mov
movs
sbb
imul
mov
sti
out
imul
mov
sti
out
imul
cmps
cwde
movs
sbb
imul
mov
sti
out
imul
scas
cwde
movs
sbb
imul
stos
cwde
movs
sbb
imul
xchg
cwde
movs
sbb
imul
xchg
cwde
movs
sbb
imul
sahf
cwde
movs
sbb
imul
call
sbb
xchg
out
imul
sbb
sbb
mov
out
imul
mov
out
imul
neg
out
imul
repnz
movs
sbb
imul
(bad)
cwde
movs
sbb
imul
cli
cwde
movs
sbb
imul
out
movs
sbb
imul
loop
movs
sbb
imul
out
cwde
movs
sbb
imul
jmp
sbb
(bad)
cwde
movs
sbb
imul
rcr
out
imul
ficomp
out
imul
ficomp
out
imul
into
cwde
movs
sbb
imul
retf
sbb
imul
ss
movs
sbb
imul
xor
out
imul
ds
movs
sbb
imul
cmp
out
imul
es
movs
sbb
imul
and
out
imul
cs
movs
sbb
imul
sub
out
imul
push
lahf
movs
sbb
imul
adc
out
imul
push
lahf
movs
sbb
imul
sbb
out
imul
push
lahf
movs
sbb
imul
add
out
imul
push
lahf
movs
sbb
imul
or
out
imul
jbe
movs
sbb
imul
jb
movs
sbb
imul
jle
movs
sbb
imul
jp
movs
sbb
imul
data16
movs
sbb
imul
bound
out
imul
outs
lahf
movs
sbb
imul
push
movs
sbb
imul
push
lahf
movs
sbb
imul
push
lahf
movs
sbb
imul
inc
lahf
movs
sbb
imul
inc
lahf
movs
sbb
imul
dec
lahf
movs
sbb
imul
dec
lahf
movs
sbb
imul
mov
movs
sbb
imul
mov
sti
out
imul
cmps
lahf
movs
sbb
imul
mov
sti
out
imul
scas
lahf
movs
sbb
imul
stos
lahf
movs
sbb
imul
xchg
lahf
movs
sbb
imul
xchg
lahf
movs
sbb
imul
sahf
lahf
movs
sbb
imul
call
sbb
mov
out
imul
mov
out
imul
neg
out
imul
repnz
movs
sbb
imul
(bad)
lahf
movs
sbb
imul
cli
lahf
movs
sbb
imul
out
movs
sbb
imul
loop
movs
sbb
imul
out
lahf
movs
sbb
imul
jmp
sbb
(bad)
lahf
movs
sbb
imul
rcr
out
imul
ficomp
out
imul
ficomp
out
imul
(bad)
lahf
movs
sbb
imul
ret
sbb
imul
into
lahf
movs
sbb
imul
retf
sbb
ss
.byte
