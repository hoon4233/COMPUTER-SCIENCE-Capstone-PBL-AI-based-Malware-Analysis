push
cmp
and
and
inc
dec
sub
add
sbb
inc
test
arpl
out
pop
push
daa
gs
and
add
and
inc
pop
lods
inc
inc
cmp
add
gs
xor
cmps
popf
mov
sbb
pop
pop
mov
adc
or
xor
push
xchg
ret
dec
(bad)
cmc
pop
into
cmp
inc
cmp
jp
sub
adc
sub
xor
inc
ret
test
pusha
jnp
sbb
jmp
jae
retf
call
icebp
jg
jmp
fs
cmp
cwde
arpl
lods
es
js
rcl
data16
js
jmp
pop
imul
fld
and
inc
mov
adc
inc
dec
pop
xor
retf
call
jno
data16
push
adc
add
sbb
add
xor
cmp
data16
or
rol
cmp
sbb
add
data16
bound
adc
mov
outs
dec
std
push
dec
cmp
scas
sbb
int3
dec
mov
cmp
mov
stc
sub
dec
dec
scas
addr16
mov
outs
mov
inc
sub
dec
dec
scas
push
into
aam
pushf
mov
dec
jno
sub
mov
mov
push
and
inc
sub
and
inc
push
das
mov
inc
and
ret
push
dec
add
jae
jg
imul
or
dec
pop
inc
cmp
in
inc
test
inc
ret
pop
imul
push
lea
test
mov
xor
add
and
test
pushf
bound
and
push
arpl
lods
pusha
out
jl
xchg
and
push
fs
cmp
arpl
int3
ret
data16
fild
inc
cmp
and
inc
cmp
fisttp
pop
lea
sub
inc
jmp
enter
jae
and
je
jge
inc
loop
sbb
cwde
adc
loopne
cmp
sub
and
lea
sub
popa
sbb
fist
lea
mov
cmp
data16
sbb
rol
cmp
and
test
fdiv
test
hlt
out
loop
and
inc
(bad)
and
enter
or
dec
and
adc
fdivr
pop
ja
enter
enter
mov
cmp
dec
arpl
cmp
movs
or
arpl
mov
fstp
arpl
mov
pushf
enter
mov
(bad)
dec
or
mov
xor
xor
mov
xor
aad
adc
cmp
and
adc
and
cmp
dec
repz
and
lds
(bad)
mov
cmp
arpl
stc
sub
ret
xor
(bad)
cmp
xchg
lea
cmp
mov
jmp
fist
or
pop
in
mov
adc
fsubr
rol
inc
cmp
test
arpl
add
inc
push
and
inc
push
and
xor
fist
dec
aad
sbb
lods
movs
sar
inc
inc
cmp
adc
push
pop
ret
mov
ret
mov
inc
and
enter
mov
cmp
adc
push
mov
aas
and
inc
(bad)
sub
arpl
in
push
arpl
mov
lods
xor
inc
push
iret
cmp
rol
mov
lahf
adc
arpl
dec
arpl
xor
and
xchg
pop
inc
or
mov
push
jnp
dec
xor
dec
xor
xor
int3
and
cmp
push
lahf
test
xor
pop
inc
or
mov
in
stos
xor
fwait
mov
lods
es
jecxz
pop
hlt
out
enter
push
outs
jb
retf
movs
add
shl
scas
es
mov
fwait
mov
cmp
cmps
push
mov
out
es
mov
fwait
mov
cmp
scas
es
xor
sub
push
add
jmp
sbb
dec
fstp
dec
xor
add
scas
es
add
xchg
xor
scas
es
popa
and
mov
fsubr
add
lods
es
cmc
(bad)
rol
arpl
sbb
es
cld
cmps
stos
mov
cmp
fsubr
fistp
cmp
out
enter
inc
cmp
mov
and
adc
call
push
cli
mov
push
jo
pop
call
mov
mov
lahf
mov
dec
nop
and
popa
imul
cmps
stos
mov
cmp
push
push
mov
and
or
dec
mov
jno
retf
sub
jmp
cmp
pop
sahf
inc
into
call
mov
ret
fucomi
(bad)
leave
fistp
mov
int
popf
mov
ret
fucomi
cdq
adc
movs
lds
and
out
les
pushf
mov
(bad)
jno
movs
mov
jae
sbb
jecxz
mov
test
inc
inc
cmp
popa
fwait
enter
mov
add
retf
fst
mov
xchg
stos
cld
fisub
cmp
mov
cmp
jmp
push
pop
add
pop
xchg
mov
imul
fsubr
add
lods
es
inc
xchg
enter
add
jnp
sbb
out
enter
adc
call
mov
mov
lahf
enter
enter
mov
add
retf
fst
mov
xchg
stos
cld
fisub
cmp
mov
cmp
jmp
push
pop
add
pop
xchg
test
push
inc
cmp
popa
fwait
enter
inc
dec
nop
and
popa
imul
jg
sub
adc
xor
dec
xor
sbb
jecxz
mov
mov
lahf
enter
enter
inc
dec
nop
and
ror
dec
and
enter
retf
ins
jmp
xor
push
cmp
pop
mov
jp
arpl
jnp
sbb
out
enter
adc
call
ja
je
mov
ret
cmc
jg
pushf
xor
dec
cmp
test
mov
lahf
retf
and
push
jp
add
fistp
outs
jb
mov
stc
add
cmps
mov
fwait
enter
sbb
out
enter
adc
call
pop
imul
fisubr
pushf
xor
int3
dec
xor
push
and
inc
push
fstp
ja
mov
push
and
mov
js
arpl
ret
jmp
pop
arpl
int
cmp
enter
pop
push
push
dec
adc
movs
xchg
fsub
arpl
add
pop
dec
pushf
mov
call
retf
pushf
aaa
cmp
call
pop
ret
enter
enter
xchg
std
adc
jnp
sbb
out
enter
pop
outs
jb
retf
fadd
xchg
inc
enter
enter
inc
mov
and
loop
and
int3
js
xor
sub
lods
adc
lods
mov
enter
dec
out
inc
std
push
xor
add
test
aaa
xor
in
call
push
dec
pop
jmp
test
mov
sub
arpl
and
cmp
xor
movs
xor
push
inc
or
and
lds
pushf
mov
bound
mov
jno
movs
test
arpl
int3
xlat
xor
lahf
out
xor
cld
jmp
and
mov
mov
and
loopne
nop
and
popa
outs
dec
mov
scas
es
sahf
pop
xlat
add
and
ret
rol
and
pop
pushf
mov
call
rcl
xor
cmps
inc
fstp
fistp
ret
adc
push
outs
test
push
and
arpl
mov
je
push
fistp
ret
xor
cmps
inc
fstp
js
inc
cmp
and
ror
xor
test
es
mov
adc
push
and
xchg
inc
xor
loopne
shl
adc
arpl
inc
fwait
inc
mov
and
mov
mov
xchg
mov
ret
fucomi
add
pop
cmc
jg
call
cmp
cmp
arpl
pop
xlat
add
out
das
cmp
fst
inc
cmp
cld
jmp
and
add
lods
es
cmp
test
jae
ficomp
nop
in
pop
imul
and
add
xor
mov
lahf
enter
enter
mov
inc
fsub
push
and
sbb
aam
retf
ja
cmp
popa
lahf
dec
std
push
push
enter
enter
popf
ret
adc
call
inc
cmp
sub
cmp
arpl
js
pop
(bad)
mov
mov
sbb
loop
and
xor
jg
xor
or
popa
fwait
retf
pop
add
sub
push
sbb
fild
ss
mov
lods
out
ret
enter
sbb
out
enter
push
outs
jb
(bad)
lock
imul
xchg
cmp
mov
loop
pop
jns
inc
mov
popa
imul
adc
dec
mov
sub
es
mov
jmp
lods
movs
stos
inc
lods
xchg
push
sub
sub
add
dec
sub
je
and
and
and
add
test
or
lahf
data16
mov
rol
sti
and
jecxz
and
test
xor
pop
inc
mov
pop
lahf
inc
dec
jae
adc
pop
nop
and
outs
jmp
inc
lahf
inc
or
jmp
lods
movs
stos
and
nop
xor
iret
jno
js
jmp
cmp
push
cmp
cmps
push
mov
lds
imul
adc
dec
mov
cmps
push
mov
cmp
sub
jno
arpl
(bad)
pop
loop
scas
xor
push
and
inc
push
and
inc
push
and
inc
cmp
mov
or
cmp
or
and
test
mov
imul
cmps
stos
mov
cmp
dec
arpl
jo
xor
ret
mov
push
and
sub
dec
popa
sub
les
inc
ret
test
mov
xchg
cmps
mov
xchg
retf
jmp
dec
arpl
jp
mov
jno
movs
test
sub
and
pop
push
add
and
fcomi
dec
and
mov
lods
out
ret
enter
inc
aaa
and
xchg
and
movs
frstor
test
mov
xchg
mov
stc
fistp
mov
std
sub
sahf
xor
adc
arpl
aad
or
cmp
ficomp
(bad)
fcmovnbe
(bad)
ret
int3
mov
je
stos
(bad)
fistp
mov
push
test
inc
retf
les
out
(bad)
fstp
popf
mov
jg
xor
add
popa
lahf
dec
std
push
ror
rol
mov
mov
je
and
data16
mov
je
jns
xor
cmp
fsubr
xor
loop
xchg
jae
inc
mov
mov
loopne
xchg
inc
ins
scas
pop
mov
shr
inc
cmp
and
hlt
std
fistp
mov
mov
and
sbb
mov
ret
loop
test
inc
mov
dec
cdq
mov
out
les
test
loop
and
retf
xor
mov
lahf
dec
std
sub
stc
cmp
daa
mov
(bad)
mov
movs
fidivr
mov
or
jp
add
ficomp
ret
dec
mov
add
mov
pop
and
dec
mov
pop
mov
mov
sub
les
je
(bad)
rcr
mov
jl
mov
stc
sub
sbb
test
inc
cmp
ficomp
jg
arpl
out
inc
cmp
and
sub
mov
jg
or
popf
arpl
mov
(bad)
dec
add
inc
push
jmp
ret
push
aad
xchg
mov
add
pushf
inc
cmp
mov
cmp
les
inc
push
je
add
fneni(8087
test
sbb
push
and
arpl
sbb
mov
enter
stc
sub
ret
xor
ret
inc
cmp
dec
into
mov
popf
arpl
mov
(bad)
dec
add
inc
push
popf
add
test
pushf
push
aad
xchg
mov
add
pushf
inc
cmp
mov
cmp
les
inc
push
je
add
fneni(8087
test
sbb
push
and
arpl
sbb
mov
enter
stc
sub
ret
xor
ret
inc
cmp
rol
mov
cmp
mul
popf
arpl
mov
(bad)
dec
movs
les
and
inc
push
and
arpl
ins
test
inc
aad
xchg
mov
add
pushf
inc
cmp
mov
cmp
les
inc
push
je
add
fneni(8087
test
sbb
push
and
arpl
sbb
mov
leave
fistp
ret
xor
dec
bound
dec
les
inc
mov
sahf
mov
scas
rcr
ret
inc
dec
movs
les
and
inc
mov
and
cld
xchg
fistp
xchg
push
xlat
add
fistp
mov
sub
xor
jo
add
and
cdq
or
jmp
(bad)
and
mov
and
(bad)
in
popf
mov
ret
adc
lods
es
retf
inc
mov
fstp
mov
je
jns
jae
enter
cdq
cmp
jmp
mov
loopne
jmp
movs
nop
jmp
and
ret
pushf
mov
test
popf
mov
cmp
nop
inc
movs
les
and
les
and
inc
mov
jmp
ret
(bad)
int3
mov
je
(bad)
in
popf
mov
imul
cdq
retf
les
out
(bad)
jmp
dec
repz
lods
fistp
mov
cmp
sub
addr16
cmp
ficomp
ret
(bad)
retf
hlt
xchg
cmp
fsubr
cdq
cmp
jmp
mov
out
(bad)
aad
popf
mov
ret
adc
lods
es
lock
arpl
xlat
(bad)
jb
and
outs
mov
mov
mov
je
jns
jae
enter
popa
pop
and
mov
lods
out
ret
enter
mov
ds
int3
mov
je
(bad)
aad
popf
mov
push
jmp
lods
mov
dec
mov
movs
mov
pop
and
ret
pushf
mov
(bad)
mov
cmp
ficomp
cmp
or
inc
push
and
stos
push
and
ror
es
cmp
ficomp
ret
and
data16
mov
je
jle
and
ret
jmp
jecxz
leave
ret
inc
cmp
ficomp
ret
ffree
ficomp
ret
fneni(8087
lods
sub
and
inc
into
sub
mov
ficomp
nop
in
cdq
mov
add
xor
mov
lahf
dec
std
sub
cs
and
ret
pushf
mov
ret
imul
mov
xor
mov
mov
xor
add
and
inc
mov
lahf
dec
std
sub
outs
aas
and
ror
cmp
test
pushf
adc
(bad)
retf
xor
mov
lahf
dec
std
sub
mov
cwde
mov
cmp
arpl
cmp
and
enter
enter
les
popf
mov
xchg
fistp
mov
mov
test
pushf
ret
jmp
xlat
(bad)
int3
mov
ret
push
mov
fiadd
and
mov
scas
fsubp
ret
push
mov
pushf
push
dec
lods
es
cmp
js
mov
inc
fsub
mov
cmps
mov
ficomp
ret
(bad)
sub
and
mov
xor
add
and
inc
mov
lahf
dec
std
sub
push
cmp
arpl
and
lds
add
cmp
ficomp
ret
jns
jae
enter
cdq
adc
jmp
mov
add
mov
lock
inc
mov
(bad)
mov
test
pushf
adc
xchg
or
into
fistp
jp
ficomp
ret
sar
imul
fstp
cmp
fistp
inc
push
and
mov
sahf
mov
pusha
les
inc
mov
sahf
mov
sbb
inc
mov
fstp
jge
pop
inc
cmp
fcomp
and
mov
ret
sbb
fstp
ret
fucomi
lds
fstp
push
and
ret
or
mov
xor
les
inc
mov
sahf
mov
test
ror
es
cmp
ficomp
mov
scas
push
mov
retf
les
popf
mov
xchg
fistp
mov
xchg
fistp
mov
cdq
fistp
mov
mov
scas
push
mov
rcr
popf
mov
ret
fistp
rcr
popf
mov
ret
cld
int
popf
mov
mov
and
fs
lods
out
ret
enter
test
mov
pushf
pop
xor
ficomp
in
fistp
mov
jmp
push
outs
retf
pushf
mov
ret
retf
pushf
mov
ret
retf
pushf
mov
ret
enter
enter
mov
mov
pushf
pop
xor
fstp
in
mov
mov
cmp
and
loopne
and
inc
ins
inc
jmp
enter
jae
and
jecxz
movs
push
adc
push
dec
xchg
jno
arpl
cmp
in
inc
inc
cmp
and
dec
push
and
ret
mov
retf
fistp
cmp
adc
pushf
mov
js
bound
and
add
out
and
jecxz
popf
daa
inc
fwait
inc
mov
mov
enter
repz
popa
lahf
mov
arpl
retf
pop
loop
and
inc
lods
in
mov
movs
ins
jae
push
pop
push
ss
enter
xchg
xlat
add
dec
add
or
and
cs
and
enter
cmps
pop
and
push
hlt
out
enter
push
outs
jb
sbb
call
cmp
jmp
and
cwde
mov
and
enter
enter
pop
mov
add
jl
arpl
sbb
add
mov
arpl
and
fdivr
inc
cmp
scas
arpl
jge
and
xchg
add
out
aas
aas
and
jl
and
inc
xor
pushf
gs
movs
outs
pop
mov
inc
popa
inc
cmp
data16
movs
pop
popa
xor
add
inc
cmp
add
and
dec
and
shl
xor
xchg
inc
jge
and
push
outs
loopne
mov
pop
fidivr
inc
ret
fidivr
mov
ret
leave
lods
movs
test
arpl
and
jl
mov
cmp
add
arpl
and
aam
pusha
inc
cmp
and
shl
cld
add
gs
sub
adc
pop
mov
and
aam
pusha
inc
cmp
and
shl
cld
add
fistp
cmp
in
mov
sti
inc
add
movs
outs
pop
mov
fs
add
and
mov
cmp
add
in
hlt
aas
and
enter
enter
pop
mov
and
inc
cmp
fistp
cmp
in
enter
rcl
ins
inc
cmp
arpl
and
fdivr
inc
cmp
fistp
cmp
gs
int
xchg
enter
pop
mov
and
cmp
and
inc
add
cmp
inc
cmp
aam
xchg
and
test
and
inc
pushf
enter
cmps
mov
fidivr
(bad)
cmp
mov
imul
and
(bad)
cmp
mov
pop
fidivr
out
cmp
push
xlat
add
arpl
mov
xchg
push
cmp
add
and
jo
int
inc
cmp
mov
movs
or
and
enter
inc
lahf
je
add
test
inc
xor
pop
adc
cmp
inc
les
movs
arpl
pop
and
arpl
push
pushf
gs
movs
outs
pop
mov
adc
(bad)
or
lods
mov
sbb
add
sbb
add
lods
movs
shl
cld
add
in
adc
arpl
retf
mov
inc
cmp
data16
cmp
and
inc
mov
and
cmp
and
mov
aam
xchg
xchg
xor
arpl
popa
cwde
dec
mov
adc
jg
loopne
cmp
mov
cmp
and
rol
xor
(bad)
lods
fs
sar
and
sub
add
sbb
inc
cmp
pusha
cli
add
fs
add
add
pop
cwde
inc
dec
jbe
cmp
and
or
jge
popa
stos
jle
push
mov
xor
add
aam
xchg
xchg
jl
ins
idiv
sar
cmp
popa
cdq
rol
xor
movs
push
mov
cmp
add
aam
xchg
and
stos
and
xor
jge
jmp
jns
arpl
cmp
and
inc
xor
scas
data16
mov
and
stos
and
xor
jge
jmp
jmp
cmp
repz
and
inc
xor
inc
dec
nop
and
in
dec
cdq
sahf
and
add
jg
sub
adc
xor
jb
pushf
push
test
daa
inc
cmp
fsubr
xchg
and
cmc
jg
or
data16
mov
or
data16
aad
cmp
cmp
and
imul
xchg
jl
fild
ss
mov
lods
es
xchg
push
aad
cmp
cmp
and
or
popa
cmp
cmp
and
pop
xchg
push
aad
cmp
cmp
and
pop
hlt
out
enter
xor
xor
in
gs
mov
bound
dec
nop
and
mov
es
popf
data16
cmp
cld
jmp
popa
retf
enter
add
arpl
movs
mov
add
ret
arpl
pop
fsub
cmp
add
lods
mov
ret
arpl
cmp
and
add
mov
(bad)
test
arpl
js
pushf
inc
dec
nop
and
popa
rol
and
stc
push
jl
inc
retf
add
lods
mov
inc
cmp
and
cmp
test
arpl
xlat
(bad)
int3
js
xor
cmp
popa
xchg
ret
fdivr
cdq
or
jmp
and
add
je
inc
push
and
inc
push
and
cmp
je
xor
test
bound
ret
cmc
jg
or
push
ret
sub
dec
gs
pop
and
stc
mul
retf
add
lods
mov
scas
pusha
and
mov
cmp
fist
icebp
mov
xchg
ret
fdivr
add
iret
gs
inc
inc
cmp
out
enter
gs
popa
lahf
cmp
retf
jmp
inc
xchg
js
jmp
popa
xchg
retf
jmp
adc
jmp
dec
(bad)
int3
js
xor
js
xor
mov
xchg
adc
pushf
xor
(bad)
mov
ror
push
jge
arpl
ins
jae
inc
pop
cmp
enter
enter
xor
dec
sub
mov
jl
(bad)
fisubr
cmp
(bad)
jno
movs
mov
jae
xor
scas
ds
ret
cmc
jg
push
mov
add
arpl
push
push
dec
mov
inc
add
arpl
push
dec
dec
mov
inc
add
arpl
push
jg
mov
inc
add
arpl
push
jae
mov
inc
add
arpl
sub
dec
aas
and
retf
out
add
add
inc
xor
addr16
pop
cwde
and
xchg
ja
add
ins
les
fisubr
dec
mov
jne
jmp
out
cmp
cmps
mov
xchg
ja
add
push
cmp
aad
sub
fwait
ret
ins
idiv
and
cmp
sub
add
dec
mov
sub
jge
inc
cmp
dec
mov
mov
jbe
and
sbb
lds
jae
imul
mov
hlt
pusha
add
cmps
mov
popa
xchg
retf
out
add
mov
shr
push
cmp
inc
dec
mov
sub
xor
jge
neg
add
popa
pushf
inc
aam
pushf
mov
mov
rol
addr16
lods
fwait
or
outs
jmp
and
jge
fwait
ret
jecxz
cmp
push
je
fsub
test
cmp
or
cmp
fsub
test
sbb
enter
push
mov
pop
inc
mov
and
inc
sub
pop
jg
push
push
enter
jge
es
sbb
aas
movs
pop
inc
aas
push
xor
lds
gs
dec
(bad)
jmp
and
aad
arpl
and
cmp
cmps
stos
mov
imul
mov
hlt
bound
js
call
inc
cmp
call
inc
cmp
arpl
sbb
dec
jbe
mov
cmp
sub
lds
gs
dec
sbb
mov
add
bound
lods
fwait
ret
ins
idiv
and
dec
sub
cmp
sbb
aad
cmp
scas
ss
mov
jo
cmp
loopne
cmp
arpl
movs
pushf
inc
cmp
dec
mov
jnp
sbb
out
enter
dec
outs
jb
mov
cmp
cmp
(bad)
and
jge
and
dec
jp
pushf
test
int3
movs
pushf
test
das
(bad)
call
inc
cmp
cld
mov
sti
cs
inc
dec
nop
and
xchg
ss
cld
(bad)
popa
retf
inc
sar
push
call
out
ret
mov
cmp
sbb
data16
arpl
push
inc
ret
arpl
js
jmp
inc
ret
loopne
mov
inc
add
lahf
xor
iret
inc
retf
cmp
jmp
and
arpl
js
jmp
fisub
cmp
jmp
scas
ss
xor
pop
cmp
xor
(bad)
bound
cmp
bound
js
movs
inc
push
int
add
lds
xlat
add
fsubr
adc
mov
fsub
jl
and
inc
outs
jb
imul
mov
push
gs
and
push
lahf
mov
bound
mov
jno
movs
test
inc
cmp
and
pop
push
mov
(bad)
fdivrp
pushf
mov
cmp
and
xor
loop
mov
sti
mov
arpl
cmp
add
sti
pushf
mov
mov
jecxz
cmp
cmp
cdq
sbb
sub
(bad)
into
retf
pushf
mov
and
pop
xor
pushf
enter
mov
mov
outs
jns
data16
aad
cmp
scas
imul
jecxz
pushf
enter
fdivr
imul
dec
test
lahf
xchg
adc
(bad)
popa
enter
mov
ins
mov
cmp
scas
mul
jecxz
pushf
enter
sar
jecxz
into
retf
pushf
mov
into
retf
pushf
mov
add
mov
dec
mov
loop
mov
fistp
rcr
pushf
sbb
loopne
sub
add
and
xor
pushf
sbb
call
add
fistp
cmp
fistp
cmp
fistp
ret
xor
test
mov
adc
mov
inc
cmp
mov
push
mov
sub
mov
inc
cmp
and
xlat
cld
(bad)
mov
sub
ror
mov
je
push
gs
mov
cmp
fistp
cmp
and
hlt
ror
pushf
mov
ret
dec
(bad)
fistp
shr
shl
pushf
inc
mov
jecxz
ret
add
jmp
es
adc
scas
push
sti
mov
cdq
fwait
scas
ret
dec
jp
pushf
inc
cmp
xor
movs
pushf
mov
xor
arpl
mov
mov
mov
and
mov
dec
xchg
pushf
xor
int3
push
sar
arpl
scas
out
jecxz
pushf
ins
ret
inc
add
(bad)
scas
ret
(bad)
pusha
fistp
jg
pushf
hlt
in
pushf
mov
cmp
and
imul
in
inc
mov
jbe
lods
fs
test
mov
rcr
pushf
inc
mov
xchg
scas
ret
mov
aam
mov
mov
mov
mov
leave
retf
pushf
mov
in
mov
lds
jo
bound
mov
movs
fidiv
cmp
xor
data16
add
mov
push
jp
add
and
les
out
push
cmp
arpl
lods
neg
jecxz
pushf
ret
pusha
inc
mov
sti
lahf
ret
les
mov
lahf
ret
and
popa
enter
mov
jecxz
pushf
retf
mov
enter
mov
loop
pushf
retf
mov
popf
loop
pushf
sub
test
pushf
adc
xchg
mov
and
arpl
mov
sbb
pushf
xor
scas
out
loop
pushf
enter
mov
loop
pushf
rol
push
adc
inc
sbb
nop
mov
dec
outs
scas
idiv
loop
pushf
adc
xor
xor
inc
ret
sahf
ret
fcmovb
and
cmc
jg
ins
imul
in
inc
mov
mov
int3
jmp
sub
test
arpl
mov
scas
ret
mov
sbb
mov
scas
ret
inc
sub
sbb
icebp
loop
pushf
dec
std
sub
and
arpl
inc
sub
dec
mov
scas
out
rcr
pushf
dec
mov
test
and
xor
cmp
out
cmp
arpl
mov
xchg
scas
ret
push
cmp
mov
mov
xchg
sahf
cli
pushf
mov
loop
pushf
inc
mov
xchg
jne
pop
inc
dec
or
mov
int3
popa
rol
loopne
movs
pop
inc
dec
xor
mov
int3
rol
push
dec
mov
loopne
cmp
stos
lock
mov
dec
mov
mov
push
cdq
(bad)
pushf
mov
ret
dec
mov
pop
test
and
xor
scas
addr16
and
inc
mov
adc
enter
mov
retf
retf
mov
int
je
sub
sti
pushf
mov
sahf
cli
pushf
mov
sahf
cli
pushf
mov
xor
movs
inc
cmp
and
inc
cmp
sbb
cmp
movs
pop
jl
and
inc
cmp
sbb
cmp
movs
pop
jl
and
inc
cmp
in
ins
idiv
sub
push
dec
cmp
jg
mov
xor
ret
xchg
loop
pushf
test
mov
(bad)
mov
add
(bad)
test
mov
mov
mov
inc
imul
inc
sub
out
rcr
pushf
rol
addr16
cmp
push
xlat
add
fninit
(bad)
into
retf
pushf
mov
into
retf
pushf
mov
add
mov
dec
mov
jnp
sbb
out
enter
jge
jb
retf
movs
add
ficom
sbb
push
mov
sti
popa
pushf
inc
mov
test
or
add
and
in
popa
fwait
enter
add
rol
lea
out
cmp
test
arpl
xor
inc
into
sub
in
test
arpl
cmp
inc
into
and
lds
pop
inc
cmp
sub
sar
retf
jmp
loop
mov
ds
adc
push
daa
push
ficom
sar
stos
aaa
movs
es
sub
xchg
popf
and
inc
mov
ins
imul
pop
add
mov
arpl
popa
fwait
(bad)
jge
arpl
js
bound
bound
and
inc
inc
inc
ins
idiv
inc
cmp
popa
pushf
inc
xor
loopne
cmp
loopne
cmp
ret
push
inc
mov
xchg
and
bound
loopne
cmp
jecxz
ret
add
lods
mov
mov
sbb
arpl
sbb
inc
cmp
popa
pushf
inc
xor
arpl
cs
add
push
inc
mov
popa
sahf
inc
mov
cmps
xor
add
and
push
mov
ins
imul
pop
add
mov
cs
shl
movs
mov
and
dec
mov
pop
ret
arpl
movs
es
ret
sbb
out
enter
push
mov
imul
xor
daa
push
cmp
and
pop
push
and
inc
outs
and
enter
mov
cmp
iret
ins
rol
aas
xor
loop
jbe
and
inc
jb
pushf
inc
inc
leave
jmp
jp
sbb
jno
movs
test
inc
inc
cmp
and
push
sbb
fisubr
pushf
enter
enter
dec
imul
dec
mov
arpl
sub
inc
mov
arpl
xor
inc
mov
adc
xchg
push
arpl
mov
(bad)
stos
cmp
outs
mov
and
inc
push
and
xor
dec
arpl
bound
adc
shl
xor
push
or
cmp
arpl
cmp
and
inc
push
and
inc
push
and
inc
mov
cmp
inc
cmp
fist
pop
mov
and
add
cmps
inc
inc
mov
xchg
cmps
mov
xchg
enter
stos
outs
dec
arpl
aad
xor
lods
mov
sub
cmps
adc
movs
mov
ds
sub
push
imul
sub
add
iret
gs
js
jmp
fist
mov
cmp
je
inc
mov
lahf
stos
cmp
movs
push
arpl
sub
adc
xor
or
dec
imul
inc
push
movs
arpl
dec
sub
dec
arpl
cmp
push
imul
loop
xchg
inc
mov
adc
popa
sub
movs
xor
scas
es
mov
loopne
ret
jge
and
mov
mov
lahf
adc
push
dec
imul
adc
popa
lahf
adc
or
aad
xor
movs
xchg
cdq
adc
jne
inc
cmp
and
pop
in
mov
lods
xor
dec
pop
and
cmp
fsubr
xchg
or
cmp
dec
arpl
cmp
in
xor
int3
adc
and
xchg
xchg
enter
mov
(bad)
or
inc
push
and
inc
imul
adc
popa
lahf
adc
push
jae
dec
sub
inc
mov
dec
mov
jmp
arpl
in
push
arpl
mov
adc
call
mov
mov
and
jo
lods
mov
inc
add
outs
cmp
xor
jg
mov
outs
and
ror
add
data16
mov
iret
jo
mov
jge
push
adc
adc
addr16
sbb
pop
mov
iret
push
xor
loop
jg
arpl
xor
pop
push
or
add
and
test
out
xor
sub
adc
xor
pusha
sub
xor
jecxz
mov
mov
and
sub
les
inc
aad
xor
jge
mov
cmp
xor
or
and
lds
inc
cmp
sbb
inc
mov
outs
and
sbb
and
cmp
in
mov
lods
adc
push
xchg
inc
in
mov
inc
cmp
cmps
push
test
cmp
adc
cld
jg
fiadd
and
mov
pushf
(bad)
and
popa
mov
push
cmp
gs
cli
popa
sbb
xchg
and
popa
pushf
stos
adc
mov
(bad)
sub
add
sub
add
and
pushf
inc
dec
and
sub
es
pushf
adc
mov
pop
pushf
inc
dec
out
call
add
lods
es
fld
arpl
xchg
es
int3
cmps
mov
rol
xor
cmps
push
test
cmp
push
mov
in
or
cld
jmp
and
adc
sub
push
adc
or
xor
mov
cdq
cmp
jmp
(bad)
lods
xor
jmp
popa
outs
dec
mov
push
and
xor
mov
add
sub
add
xchg
xor
hlt
bound
scas
movs
(bad)
and
cdq
cmp
jmp
inc
repz
xor
inc
lods
lahf
out
jge
repz
inc
cmp
mov
repz
lods
adc
repz
repz
mov
shr
mov
js
mov
shr
mov
stc
cmp
lahf
mov
jg
repz
jp
mov
shr
mov
shr
mov
ret
repz
mov
xor
mov
shr
mov
es
jb
ret
shr
int3
arpl
and
shr
pop
pop
add
fs
mov
repz
mov
shl
mov
push
lods
mov
sar
mov
mov
enter
mov
xor
sbb
shr
mov
rcr
shr
xor
and
stos
and
cmp
xchg
and
lds
inc
jp
mov
shr
xor
inc
lods
dec
shr
push
lods
mov
shr
mov
xor
lods
lahf
out
jge
repz
shr
mov
jo
mov
shr
mov
enter
shr
mov
shr
jl
shr
cmp
adc
repz
lds
shr
xchg
and
cmps
fwait
inc
lods
mov
xor
lods
lahf
mov
jg
repz
shr
mov
jo
mov
shr
mov
enter
shr
mov
shr
jl
shr
sub
shr
mov
shr
mov
and
inc
mov
fstp
mov
jae
sbb
scas
es
pop
lods
es
cli
popa
lahf
lods
jnp
add
js
jmp
adc
xchg
inc
cmp
and
cdq
cmp
xor
lods
mov
cmp
and
inc
sti
popa
cdq
inc
(bad)
push
mov
jb
arpl
js
fstp
cmp
inc
xor
dec
nop
movs
rcr
lods
movs
rcr
mov
cmp
popa
mov
js
jmp
xor
sbb
sub
fs
imul
or
aad
and
add
cld
bound
xor
jmp
mov
and
sub
and
add
je
out
jae
arpl
popa
cwde
adc
es
xchg
ss
mov
arpl
and
add
je
cdq
cmp
xor
mov
and
xor
adc
cmp
sub
add
ins
pop
xchg
cmps
jnp
ret
pop
in
mov
lods
adc
push
xchg
jne
movs
mov
test
xchg
arpl
jne
or
bound
les
dec
mov
ss
mov
and
xor
adc
arpl
popa
adc
push
imul
loopne
enter
dec
mov
sub
cmp
in
inc
mov
pop
in
and
sub
retf
cld
jg
jmp
sub
cmp
in
inc
ret
jmp
retf
test
in
inc
cmp
lods
xchg
inc
cmp
fiadd
cmp
int3
fisttp
test
add
iret
je
dec
cmp
fsubr
push
in
cdq
and
xor
add
and
mov
call
es
and
js
mov
xor
rol
xor
popf
and
sub
test
inc
in
and
popa
fwait
xor
int3
(bad)
cmp
int3
pop
or
and
cmp
sub
mov
out
in
push
xor
jmp
iret
jge
cmp
and
enter
jp
and
retf
ins
test
mov
mov
add
fiadd
cmp
cdq
and
aam
inc
std
cdq
and
int3
or
test
add
iret
je
(bad)
rcl
lods
xchg
inc
js
call
inc
or
loopne
leave
and
mov
call
es
std
ret
data16
js
mov
aam
add
scas
jbe
and
sub
test
inc
in
and
popa
xchg
xor
lods
xchg
inc
add
fiadd
cmp
cmc
or
jg
call
inc
mov
pop
enter
test
jno
nop
fild
and
sub
dec
pop
movs
mov
rol
xor
cmps
push
test
aad
jmp
and
test
mov
dec
arpl
aas
dec
arpl
cmp
fs
xor
int3
imul
and
add
movs
nop
cmp
and
sub
fist
mov
aad
sub
fist
movs
aad
sub
jb
xchg
arpl
mov
and
inc
cmp
lock
jno
movs
mov
and
pop
push
mov
inc
mov
lods
out
rcr
enter
xor
cmp
fstp
int
movs
test
xchg
and
into
mov
pop
adc
jmp
gs
(bad)
outs
aad
sub
sub
cmp
sahf
mov
pop
xor
enter
add
mov
enter
cmp
pushf
mov
ret
add
sbb
mul
out
ret
inc
aad
sub
lods
mov
dec
sti
mov
push
xchg
push
loop
and
inc
mov
pushf
mov
lods
test
inc
push
sar
rcr
adc
adc
inc
cmp
dec
popa
sub
and
add
(bad)
test
mov
xchg
mov
xor
and
test
push
and
(bad)
int
pushf
mov
cmp
data16
ret
or
aam
xchg
xchg
xchg
mov
jnp
arpl
cmp
data16
mov
je
(bad)
ja
arpl
mov
je
popf
loop
arpl
mov
je
inc
cmp
and
inc
test
test
mov
lods
movs
mov
cmp
and
mov
data16
mov
je
inc
cmp
and
inc
outs
dec
setle
or
data16
aas
and
rcl
arpl
cmps
cmps
adc
cmp
in
mov
lods
xor
push
mov
ja
or
fmul
mov
pushf
inc
dec
nop
and
fcom
cli
cmps
push
mov
ins
test
arpl
add
inc
push
and
inc
push
and
xor
fist
dec
aad
sub
lods
xchg
ret
and
add
es
push
and
jae
dec
fmul
rcl
pop
inc
cmp
fldcw
inc
cmp
out
enter
ficom
inc
xor
shl
push
push
aad
and
cmp
push
ja
dec
xor
xor
fist
dec
aad
arpl
cmps
cmps
pop
bound
adc
shl
add
jb
lods
fwait
mov
lods
es
push
and
add
je
xor
fist
dec
ret
test
mov
out
enter
push
sbb
lds
xor
js
xor
cmp
and
inc
push
and
inc
ret
mov
jne
arpl
push
addr16
iret
push
mov
sub
push
pop
push
and
xor
fist
mov
cmp
fist
mov
cmp
lods
fwait
push
dec
fmul
jo
fs
(bad)
jno
movs
mov
scas
push
push
mov
jnp
mov
jnp
xchg
addr16
and
inc
cmp
lods
movs
int3
js
xor
and
popa
inc
push
and
xor
fist
dec
aad
and
cmp
adc
es
ins
jb
inc
push
and
xor
fist
mov
cmp
fist
mov
cmp
fist
mov
cmp
iret
outs
stc
shl
arpl
ret
jmp
in
mov
adc
fsub
pop
inc
jnp
cli
bound
inc
cmp
data16
pop
mov
and
adc
test
mov
mov
ret
data16
fcom
outs
or
and
cli
and
inc
push
and
inc
push
and
and
data16
sahf
fdiv
push
dec
and
dec
std
push
addr16
iret
jne
or
mov
cmp
and
add
iret
gs
jns
cmp
popf
xor
movs
ss
pusha
inc
inc
mov
add
xor
jne
pop
push
push
dec
mov
outs
xchg
aas
add
lods
mov
mov
mov
or
mov
int
mov
test
mov
or
movs
inc
aas
and
mov
push
movs
es
jp
pop
jg
push
cmps
dec
out
inc
rol
arpl
lods
fwait
or
ss
inc
mov
and
enter
ja
aam
cdq
ins
int3
mov
pop
and
dec
ret
enter
adc
push
jae
inc
data16
popa
lahf
enter
enter
cdq
cmp
mov
in
pop
in
mov
lods
sub
push
mov
imul
and
xor
add
cmp
and
enter
xchg
ret
loopne
xor
movs
and
lods
es
ror
jb
aam
dec
std
push
imul
push
jmp
push
bound
lds
rcl
jge
and
xchg
arpl
ins
ins
test
test
arpl
mov
loopne
pop
jb
mov
cmp
push
mov
push
jecxz
push
mov
xchg
push
push
jle
add
and
ret
add
idiv
pop
add
push
int3
retf
cmp
in
mov
or
arpl
jb
push
lahf
jnp
ret
cwde
rcr
rcr
sahf
mov
ret
adc
push
outs
test
mov
lods
xchg
inc
int
movs
dec
out
fs
int
dec
cmp
fistp
adc
lea
inc
cmp
das
arpl
push
ja
jae
arpl
mov
fistp
and
mov
fcomp
ret
retf
pushf
mov
ret
jae
mov
mov
pop
and
inc
cmp
jno
inc
cmp
ficomp
cmp
and
cmp
and
mov
aam
xchg
hlt
pushf
mov
cmc
(bad)
rol
arpl
lods
movs
sub
fstp
lock
loop
arpl
js
arpl
stc
sub
psrad
mov
ret
add
and
test
and
dec
cmp
fucom
mov
int
and
xchg
lahf
mov
js
arpl
stc
sub
mov
aam
xchg
sub
inc
cmp
and
mov
cmps
cdq
inc
inc
pop
mov
pop
and
inc
movs
rcr
mov
add
and
int3
fwait
add
sub
and
dec
cmp
fucom
mov
int
and
xchg
lahf
mov
jns
arpl
stc
sub
jbe
data16
ret
add
xor
and
dec
cmp
fucom
mov
int
and
xchg
lahf
mov
jns
arpl
stc
sub
cmp
arpl
aaa
and
inc
movs
rcr
(bad)
aad
daa
inc
cmp
and
mov
jbe
cld
rcr
mov
jg
xor
pop
pusha
arpl
loopne
mov
loop
arpl
mov
je
pusha
loop
arpl
aad
daa
inc
cmp
retf
cmp
and
clc
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
sti
and
xchg
lahf
mov
jns
arpl
stc
sub
stos
jle
arpl
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
sti
and
xchg
lahf
mov
jle
arpl
stc
sub
bnd
arpl
aaa
and
inc
movs
rcr
(bad)
aad
and
popf
add
and
mov
jbe
cld
rcr
mov
jg
xor
mov
loopne
stc
dec
dec
arpl
ret
icebp
fistp
cs
arpl
aad
arpl
rcr
add
fstp
cmp
fstp
mov
je
xchg
jecxz
arpl
aad
and
cmps
cmps
popa
aad
and
popf
imul
cmps
cdq
inc
inc
pop
mov
and
clc
pop
and
inc
movs
rcr
mov
add
and
int3
jg
cmp
lods
xchg
mov
lods
out
ret
enter
add
and
fmul
fucom
mov
int
and
xchg
lahf
mov
jle
arpl
stc
sub
mov
arpl
aaa
and
inc
movs
rcr
push
push
out
mov
mov
xlat
data16
loopne
test
test
arpl
mov
data16
dec
xchg
mov
rcr
mov
cmp
aam
mov
loop
(bad)
jecxz
arpl
rcr
mov
jg
xor
mov
data16
arpl
mov
data16
dec
test
jg
pushf
hlt
rcr
mov
cmp
sbb
imul
cmps
cdq
inc
inc
aaa
or
mov
pushf
mov
cmp
int3
ja
cmp
and
fmul
fucom
mov
aas
data16
inc
arpl
mov
fidivr
push
sbb
jl
arpl
stc
xor
cmp
and
lds
and
inc
sti
mov
arpl
shl
inc
cmp
fstp
stc
fistp
mov
(bad)
mov
stc
fistp
mov
add
jmp
mov
add
mov
ficomp
and
sti
jb
cmps
bswap
(bad)
mov
std
ret
enter
and
fiadd
fistp
cmp
fistp
cmp
or
inc
cmp
pushf
pushf
mov
mov
movs
fiadd
cmp
push
pushf
mov
ret
mov
cmp
scas
out
ret
adc
mov
pop
jl
arpl
stc
cmp
mov
aaa
and
inc
movs
rcr
push
push
jns
add
ficomp
mov
arpl
arpl
mov
data16
dec
test
jg
pushf
hlt
rcr
mov
cmp
aam
mov
loop
out
jge
arpl
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
loopne
mov
cmp
ficomp
ret
test
fstp
ret
lods
ret
enter
enter
mov
inc
and
jg
mov
int
inc
cmp
and
mov
cmp
arpl
int
xchg
enter
pop
cmp
inc
cmp
ficomp
cmp
ficomp
ret
push
push
jge
add
fstp
cmp
test
loopne
ret
jge
and
mov
and
mov
int
movs
int3
mov
je
idiv
test
sahf
mov
cmp
fistp
mov
cmp
pushf
mov
ret
pop
ret
mov
rcr
mov
jg
xor
mov
sbb
test
arpl
mov
data16
dec
ds
jg
pushf
hlt
rcr
mov
cmp
aam
mov
loop
sbb
and
clc
aaa
and
inc
movs
rcr
push
push
out
mov
mov
inc
sbb
mov
sbb
test
arpl
mov
data16
dec
xchg
mov
rcr
mov
cmp
xchg
xchg
mov
push
and
sar
jne
cmp
ficomp
ret
hlt
(bad)
mov
ret
test
lods
out
ret
dec
std
sub
rol
fistp
ret
mov
add
ret
mov
aaa
and
inc
movs
rcr
push
push
jns
add
ficomp
mov
sbb
test
arpl
mov
data16
dec
test
jg
pushf
hlt
rcr
mov
cmp
aam
cmps
mov
cmps
mov
aad
pop
inc
cmp
and
mov
cmps
cdq
inc
inc
aaa
or
mov
pushf
mov
cmp
dec
push
lahf
jg
pushf
hlt
rcr
mov
cmp
adc
cmp
and
mov
cmps
cdq
inc
inc
pop
mov
and
clc
pop
and
inc
movs
rcr
mov
add
and
int3
inc
jg
and
test
and
dec
cmp
fucom
mov
pusha
cli
and
xchg
lahf
mov
add
ret
loop
es
arpl
icebp
pop
inc
cmp
and
mov
cmps
cdq
inc
inc
aaa
or
mov
pushf
mov
cmp
int3
sar
fimul
and
fmul
fucom
mov
int
and
xchg
lahf
mov
add
ret
mov
add
clc
aaa
and
inc
movs
rcr
(bad)
aad
pop
inc
cmp
and
mov
jbe
cld
rcr
mov
jg
xor
dec
sbb
mov
cli
and
xchg
lahf
mov
add
ret
jmp
sbb
cmp
and
mov
cmps
cdq
inc
inc
aaa
or
mov
pushf
mov
cmp
dec
jg
jg
pushf
hlt
rcr
mov
cmp
and
cmp
and
mov
cmps
cdq
inc
inc
aaa
or
mov
pushf
mov
cmp
dec
jns
jg
pushf
hlt
rcr
mov
cmp
shl
cmp
and
clc
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
cli
pushf
mov
rcr
mov
jg
xor
mov
sbb
test
arpl
mov
data16
dec
xchg
mov
rcr
mov
cmp
and
add
ficomp
mov
sbb
test
arpl
mov
data16
dec
xchg
mov
rcr
mov
cmp
push
sbb
rol
mov
daa
sbb
test
pusha
inc
cmp
repz
sub
scas
fidivr
push
int3
mov
dec
add
ret
mov
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
stc
and
xchg
lahf
mov
push
and
ret
mov
push
and
clc
aaa
and
inc
movs
rcr
push
push
aam
add
ficomp
mov
push
es
cmp
and
dec
cmp
fucom
mov
inc
pop
arpl
inc
arpl
mov
fidivr
push
sbb
push
and
ret
or
mov
pushf
mov
cmp
dec
arpl
cmp
dec
arpl
cmp
push
imul
mov
loop
movs
pop
arpl
xchg
lahf
mov
add
test
pushf
push
ins
fcmovnbe
mov
mov
pushf
mov
cmp
fistp
inc
cmp
ficomp
mov
bound
stos
adc
mov
(bad)
mov
in
mov
lods
xor
fwait
sub
das
jmp
ficomp
ret
jp
xchg
es
jg
out
(bad)
mov
cmp
fsubr
xchg
or
loopne
arpl
mov
je
inc
cmp
aam
mov
js
(bad)
retf
js
pop
inc
dec
call
cmp
and
inc
cmp
aam
mov
cmp
and
stos
loope
arpl
ds
rcl
xchg
mov
mov
and
mov
jno
movs
mov
and
pop
push
enter
jmp
cmp
retf
jecxz
cmp
test
ret
dec
mov
inc
cmp
test
mov
lds
es
mov
loopne
cmp
or
and
retf
out
adc
test
sahf
mov
or
enter
mov
rcr
test
mov
imul
pop
sahf
mov
cmp
jmp
fsub
mov
xor
inc
mov
sbb
fstp
cmp
fistp
ret
ja
and
adc
scas
out
cmp
fistp
mov
sahf
mov
cmp
aaa
inc
cmp
jmp
rol
jae
and
inc
jmp
arpl
mov
idiv
sub
push
xor
inc
mov
(bad)
mov
aas
sbb
push
inc
cmp
and
sub
and
xlat
mov
xchg
clc
and
nop
mov
inc
cmp
fistp
dec
sub
inc
or
mov
aas
and
test
push
and
cmp
fistp
ret
test
ret
mov
lods
fstp
ret
hlt
mov
pushf
mov
ret
hlt
popf
fstp
rcr
adc
push
mov
mov
(bad)
mov
dec
sub
inc
or
mov
popf
clc
and
mov
xor
mov
dec
mov
mov
pushf
mov
ret
fistp
cmp
fucomi
les
pusha
or
mov
xor
mov
or
out
ret
fistp
mov
and
movs
(bad)
aad
pushf
mov
mov
push
jg
cli
mov
bound
jecxz
add
ficomp
ret
int3
mov
je
les
dec
arpl
cmp
dec
arpl
cmp
fistp
or
dec
std
sub
cwde
cmp
mov
jb
and
mov
ret
mov
loop
arpl
inc
clc
and
mov
xor
mov
push
sahf
mov
mov
and
(bad)
mov
jg
mov
and
enter
xor
dec
mov
and
sub
and
sar
jmp
mov
xor
pop
adc
and
inc
cmp
and
cld
lods
fstp
cmp
sbb
addr16
cmp
ficomp
or
sub
or
rcr
mov
ret
test
sbb
mov
(bad)
and
pushf
inc
mov
and
dec
mov
(bad)
cli
mov
out
rcr
adc
jns
inc
cmp
and
cmps
mov
adc
int3
adc
and
inc
ret
mov
push
and
mov
ret
jae
and
les
sub
sbb
and
mov
lods
out
rcr
enter
sbb
out
inc
push
xor
pop
push
ds
and
jo
lods
movs
mov
push
and
enter
adc
lods
fwait
jo
lods
movs
mov
push
and
enter
adc
fist
push
aad
push
inc
cmp
jno
adc
test
cmp
jno
dec
mov
dec
mov
inc
in
sub
adc
and
xchg
int3
jns
dec
adc
mov
(bad)
arpl
sti
movs
mov
jae
arpl
cmps
push
pop
cmp
test
js
xor
int
xor
mov
sub
mov
in
adc
sbb
push
dec
xor
gs
jge
mov
and
enter
enter
push
xor
gs
xor
jae
ins
int3
imul
xor
popa
popf
int3
jns
dec
mov
inc
in
sub
adc
test
mov
js
xor
cmp
arpl
cmp
push
arpl
loop
scas
ret
add
push
(bad)
inc
mov
fwait
adc
push
jo
and
test
mov
fwait
push
arpl
sub
stc
jno
arpl
movs
push
inc
cmp
jns
(bad)
fldenv
es
dec
mov
xor
lods
out
fstp
pushf
enter
std
fstp
pushf
add
and
int3
mov
je
(bad)
std
les
jg
mov
sti
sub
arpl
movs
xchg
add
and
adc
xchg
cmps
mov
or
ret
push
dec
cmp
ret
test
mov
xchg
cmps
mov
xlat
mov
or
and
fstp
pushf
add
and
int3
mov
je
(bad)
std
les
adc
dec
std
push
push
enter
enter
hlt
stc
les
cmp
in
pop
ret
mov
xor
mov
cmp
iret
imul
cmp
jnp
sbb
out
enter
popa
cmp
and
adc
call
sbb
sbb
aam
mov
loop
sub
and
push
inc
cmp
(bad)
rol
arpl
lods
movs
sub
jbe
bound
sub
adc
data16
aad
push
inc
cmp
shl
sub
aam
xchg
mov
inc
fstp
pushf
adc
and
cmps
dec
aad
push
inc
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
mov
stc
sub
cli
push
and
clc
aaa
and
inc
movs
rcr
push
cmp
and
mov
jbe
cld
cmp
dec
cmp
cmp
int3
ret
jb
and
test
and
dec
cmp
fucom
mov
int
and
mov
xor
mov
or
push
sahf
jg
out
les
int3
out
cmp
int3
and
and
dec
cmp
fucom
mov
int
and
mov
xor
mov
pop
arpl
arpl
mov
data16
int3
imul
fisub
cmp
fnsave
int3
and
ret
sbb
data16
and
ret
mov
stc
xor
xor
dec
jno
jg
out
les
dec
inc
sahf
jg
out
les
int3
mov
test
lods
xchg
mov
lods
out
loop
pushf
enter
jae
and
dec
cmp
fucom
mov
int
and
mov
xor
mov
sti
and
mov
xor
mov
push
arpl
arpl
mov
data16
dec
xchg
mov
cmp
int3
div
and
test
and
les
int3
jecxz
cmp
lods
xchg
mov
lods
out
loop
pushf
enter
jae
and
dec
cmp
fucom
mov
and
arpl
inc
arpl
mov
fiadd
fistp
cmp
fistp
cmp
or
out
fstp
pushf
adc
add
cmp
lds
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
mov
stc
sub
or
data16
mov
je
stos
or
arpl
stc
sub
mov
aam
xchg
test
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
dec
arpl
stc
sub
pop
jecxz
arpl
mov
je
jmp
mov
or
arpl
aaa
and
inc
movs
rcr
push
push
aam
add
fistp
cmp
shl
ins
cmp
test
pushf
adc
mov
inc
fstp
pushf
adc
sbb
cmp
cmp
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
jp
and
ret
or
data16
mov
je
data16
arpl
stc
sub
mov
aaa
and
inc
movs
rcr
push
push
aam
add
fistp
cmp
sbb
cmp
enter
lods
movs
test
test
pusha
inc
cmp
repz
sub
test
pushf
push
push
xor
inc
fstp
pushf
push
aad
push
inc
cmp
pop
push
inc
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
fimul
sub
lahf
loopne
arpl
mov
je
(bad)
or
sub
scas
(bad)
arpl
sbb
cmp
and
mov
cmps
cdq
inc
inc
xor
mov
data16
mov
je
sbb
sub
push
or
and
inc
movs
rcr
push
cmp
and
mov
jbe
cld
cmp
dec
cmp
cmp
int3
lahf
outs
cmp
dec
mov
jg
out
les
int3
outs
jno
and
test
dec
popa
sub
and
add
jmp
cmp
sti
pushf
mov
cmp
les
cmp
cdq
fwait
sahf
ret
adc
(bad)
mov
mov
ins
cmp
sti
pushf
mov
cmp
and
mov
aam
xchg
cmp
mov
and
pop
push
lea
dec
jmp
fistp
mov
adc
pop
inc
cmp
int3
ret
ins
cmp
test
not
rcr
enter
enter
mov
ja
arpl
int3
push
outs
cmp
fistp
cmp
and
ss
and
enter
mov
cmp
fistp
cmp
and
les
dec
int3
popf
jg
or
loope
arpl
aas
and
rcl
xchg
xor
ins
lds
and
cmp
fistp
ret
test
mov
bound
popf
fstp
rcr
adc
or
cmps
dec
xor
ins
lds
inc
push
test
mov
aad
dec
inc
cmp
fistp
ret
test
aad
xchg
rcr
enter
enter
sub
fistp
cmp
jecxz
inc
cmp
ficomp
cli
mov
bound
and
cld
movs
fstp
cli
mov
bound
jecxz
sub
ficomp
ret
int3
mov
je
les
dec
arpl
cmp
dec
arpl
cmp
fistp
pop
and
dec
std
sub
ret
cmp
arpl
ret
push
cmp
jmp
fisttp
push
loop
arpl
inc
clc
and
mov
xor
mov
pop
cwde
mov
mov
and
(bad)
mov
jg
mov
and
enter
xor
dec
mov
and
xor
and
sar
jmp
mov
xor
ins
lds
xchg
inc
cmp
and
mov
push
and
cmp
fistp
cmp
dec
mov
rol
fistp
ret
dec
add
pushf
inc
cmp
and
int3
mov
je
test
mov
sub
out
cmp
fcmovnbe
aad
fistp
ret
push
adc
arpl
retf
inc
cmp
fistp
ret
or
sti
fcmovnbe
aad
fistp
push
das
mov
imul
and
int3
fwait
ins
cmp
sub
push
mov
mov
cmps
mov
lods
mov
hlt
test
adc
dec
(bad)
cmp
les
int3
push
adc
(bad)
aad
fistp
mov
ror
cmp
and
xchg
and
out
rcr
adc
in
dec
inc
cmp
lods
movs
sub
fistp
ret
mov
adc
mov
gs
add
jnp
sbb
out
inc
push
xor
pop
push
ds
adc
pusha
pop
movs
movs
mov
aad
dec
inc
cmp
push
outs
test
mov
fwait
int3
imul
mov
adc
ja
test
test
sub
enter
xchg
inc
push
xor
mov
and
adc
jge
inc
cmp
dec
arpl
push
mov
sub
and
xchg
xor
inc
mov
xchg
cmps
mov
xchg
enter
mov
sbb
pop
aad
inc
inc
cmp
jp
mov
jno
movs
test
inc
cmp
and
push
adc
sbb
arpl
cmp
push
dec
aad
dec
inc
cmp
or
xchg
xor
adc
pushf
dec
cmp
aam
mov
adc
fist
dec
mov
bound
jnp
pushf
mov
ret
inc
dec
and
mov
ss
and
inc
push
es
inc
mov
mov
bound
sub
ret
xor
jle
hlt
pop
mov
and
xchg
bound
inc
ins
idiv
xor
cmp
and
popa
xchg
adc
cmc
dec
inc
cmp
and
int3
js
xor
cmp
and
je
test
inc
aad
dec
inc
cmp
cmps
mov
call
mov
pop
and
ret
out
add
je
inc
push
bound
fist
mov
or
inc
pop
(bad)
mov
mov
jnp
sub
ret
xor
pop
push
pushf
mov
and
cmps
mov
lahf
enter
sub
dec
arpl
cmp
dec
arpl
cmp
and
or
and
push
aad
dec
inc
cmp
arpl
ret
lds
or
adc
loopne
and
into
adc
jae
jno
adc
ds
jae
jno
adc
loopne
and
cs
jae
jno
adc
jl
mov
adc
jae
jno
adc
jge
mov
adc
mov
bound
push
adc
je
mov
dec
inc
cmp
adc
je
mov
dec
inc
cmp
adc
je
xchg
inc
aad
dec
inc
cmp
adc
je
test
inc
aad
dec
inc
cmp
lods
movs
sub
or
adc
jl
mov
cmp
or
adc
mov
cmp
or
adc
loop
and
xchg
sbb
sub
or
adc
loop
and
sbb
arpl
mov
inc
retf
add
lods
movs
push
arpl
mov
fadd
xchg
adc
and
sub
fist
mov
add
sahf
add
add
and
mov
jl
mov
and
sub
fist
pushf
data16
sahf
sbb
add
and
mov
jg
mov
and
ror
imul
lahf
mov
cmp
and
mov
mov
pushf
je
mov
inc
inc
cmp
cmp
add
and
inc
lods
arpl
sub
fcomp
aad
inc
inc
cmp
or
add
and
cmp
and
fcomp
aad
inc
inc
cmp
add
add
and
ins
movs
arpl
sub
fcomp
aad
inc
inc
cmp
lods
movs
sub
fist
pushf
data16
sahf
cmp
add
and
mov
jg
mov
sbb
push
(bad)
jno
movs
mov
fwait
xchg
cmp
pop
arpl
sar
dec
aad
lahf
mov
sar
and
int3
loopne
ret
test
and
inc
ins
int3
sbb
and
mov
cmp
mov
xchg
adc
pcmpgtb
adc
jl
or
scas
es
mov
fwait
push
aam
sub
and
adc
mov
call
arpl
sahf
pusha
ret
add
adc
add
sbb
add
(bad)
mov
int3
pop
adc
or
and
shr
call
arpl
cmp
and
inc
mov
or
arpl
cmp
pusha
ret
add
and
add
(bad)
mov
int3
pop
adc
or
sub
mov
fwait
out
arpl
cmp
and
and
dec
popa
sub
dec
bound
cmp
dec
fild
and
inc
push
and
dec
push
xor
enter
pop
push
adc
je
mov
inc
inc
cmp
adc
add
pusha
ret
add
arpl
inc
or
and
inc
ins
dec
setp
or
cmp
and
cmp
retf
inc
cmp
adc
add
pusha
ret
add
arpl
pop
or
and
inc
ins
dec
jnp
jg
or
cmp
and
loope
data16
cmp
arpl
cmp
arpl
sub
and
loope
and
sub
je
(bad)
out
arpl
out
and
and
mov
xor
pushf
je
mov
pushf
je
test
inc
push
xor
cmp
arpl
and
push
or
inc
cmp
(bad)
and
(bad)
mov
test
sahf
xor
add
adc
add
inc
ret
add
dec
leave
inc
cmp
daa
arpl
ins
dec
mov
(bad)
out
arpl
cmp
and
test
cli
scas
inc
inc
cmp
and
inc
push
bound
je
jb
and
sub
and
and
add
arpl
cmp
and
inc
ret
fidivr
inc
ret
loope
and
ins
cmp
arpl
cmovl
inc
cmp
daa
arpl
ins
dec
mov
(bad)
out
arpl
cmp
and
rcr
inc
cmp
adc
add
inc
ret
add
and
jge
mov
cmp
and
inc
cmp
sti
and
mov
arpl
sahf
or
add
fisttp
inc
ret
fidivr
inc
ret
loope
and
push
push
pop
or
push
and
arpl
dec
or
out
arpl
cmp
and
rcr
rol
push
and
je
mov
pushf
je
test
inc
push
xor
sar
arpl
xor
cmp
je
adc
data16
out
and
and
push
push
and
loop
test
inc
push
and
je
mov
pushf
je
test
inc
push
xor
es
cmp
inc
cmp
and
inc
cmp
(bad)
and
(bad)
mov
test
sahf
adc
add
adc
add
pusha
ret
add
and
inc
push
adc
pop
sub
aaa
mov
call
inc
inc
cmp
and
inc
ret
fidivr
inc
ret
loope
and
push
push
jb
or
arpl
popf
and
inc
push
and
inc
ins
dec
gs
jg
or
cmp
and
aad
data16
cmp
arpl
cmp
data16
and
and
sar
dec
arpl
je
popf
loop
arpl
cmp
and
and
inc
cmp
and
lds
push
jne
arpl
cmp
data16
and
and
cmp
arpl
je
rcr
(bad)
and
and
inc
cmp
and
pop
test
arpl
lds
arpl
cmp
inc
ret
add
dec
mov
push
push
and
shr
sahf
jg
or
data16
cmp
rol
xchg
jl
or
adc
jl
or
adc
loope
and
pop
push
inc
or
dec
arpl
je
popf
loop
arpl
cmp
and
and
inc
cmp
and
popa
mov
fist
mov
fist
popf
arpl
sub
cmp
and
sub
dec
arpl
je
mov
(bad)
std
and
and
xor
arpl
movs
xchg
inc
aad
fwait
mov
lds
pushf
mov
push
cmp
push
adc
cmps
and
movs
sub
jmp
inc
ret
test
mov
or
aad
xchg
mov
sahf
sub
add
lods
movs
sub
arpl
mov
xchg
adc
arpl
and
inc
ret
fidivr
inc
imul
adc
aam
sub
and
adc
mov
call
arpl
sahf
pusha
ret
add
adc
add
sbb
add
(bad)
mov
int3
pop
adc
or
and
shr
cwde
jg
or
cmp
and
inc
mov
dec
daa
inc
cmp
adc
add
pusha
ret
add
and
add
(bad)
mov
int3
pop
adc
or
sub
mov
fwait
out
arpl
cmp
and
and
dec
popa
sub
dec
bound
cmp
dec
fild
and
inc
push
and
dec
push
xor
enter
pop
push
adc
je
mov
jl
cmp
adc
add
inc
ret
add
dec
ja
sub
mov
data16
mov
and
scas
and
loop
mov
jp
cmp
data16
cmp
and
test
push
push
mov
sub
arpl
adc
(bad)
and
rol
rol
adc
push
push
and
inc
push
push
inc
cmp
arpl
(bad)
xor
inc
push
and
(bad)
and
mov
cmp
and
inc
ret
fidivr
inc
ret
loope
and
ins
cmp
arpl
cmovle
inc
dec
pusha
inc
mov
data16
mov
and
push
and
loop
test
inc
mov
bound
ret
fidivr
inc
ret
loope
and
ins
cmp
arpl
add
sub
daa
arpl
ins
dec
mov
(bad)
out
arpl
cmp
and
ins
mov
rcr
or
pushf
je
test
inc
push
xor
sar
ja
cmp
and
sub
and
(bad)
mov
test
sahf
push
ret
dec
arpl
cmp
pusha
ret
add
dec
in
cmp
and
sub
mov
dec
mov
inc
aad
jge
cmp
and
test
and
mov
lods
lods
mov
or
adc
jl
or
adc
loope
and
push
push
fldenv
cmp
and
and
ins
dec
jo
jg
or
cmp
and
mov
arpl
cmp
arpl
cmp
arpl
sub
and
inc
push
test
cmp
je
inc
out
arpl
out
and
and
bound
and
loop
xchg
inc
push
and
je
mov
pushf
je
test
inc
push
xor
movs
cmp
arpl
(bad)
inc
push
cmp
inc
cmp
std
and
(bad)
mov
test
sahf
pop
ret
dec
arpl
cmp
pusha
ret
add
and
inc
push
(bad)
cmp
and
adc
mov
call
jle
cmp
and
inc
ret
fidivr
inc
ret
loope
and
pop
push
cmps
arpl
dec
dec
sub
dec
arpl
je
rcr
(bad)
and
and
inc
cmp
and
pop
test
arpl
retf
inc
cmp
adc
add
inc
ret
add
dec
and
inc
mov
data16
cmp
and
and
inc
cmp
and
imul
arpl
cmp
data16
and
dec
ja
cmp
clc
mov
fwait
jg
or
and
test
sahf
add
add
adc
add
pusha
ret
add
and
inc
push
bound
dec
jge
cmp
(bad)
mov
cwde
jg
or
jmp
sti
loop
and
hlt
into
fistp
retf
add
lods
movs
test
bound
sub
ret
xor
push
inc
ja
sub
mov
shr
jecxz
cmp
and
inc
push
and
inc
mov
mov
movs
ret
ins
lds
xor
inc
mov
xor
inc
mov
popa
xchg
inc
cmp
rol
mov
xchg
adc
popa
lahf
adc
push
jae
add
arpl
int3
sub
ret
test
arpl
inc
ret
sub
and
jo
add
push
imul
loopne
enter
or
out
add
je
xor
dec
pop
cmc
jg
or
and
test
mov
adc
cmp
enter
dec
cmp
arpl
imul
mov
aam
xchg
or
lea
int3
mov
je
push
and
cmp
test
arpl
mov
jmp
ret
mov
adc
ret
test
mov
dec
mov
loop
cmp
es
push
push
cld
rol
cmp
fistp
cmp
push
jb
enter
mov
arpl
aas
cmp
inc
mov
xor
arpl
mov
je
stos
sub
enter
enter
mov
or
mov
xor
mov
xor
arpl
mov
je
imul
and
rol
xor
dec
pop
lock
out
les
int3
ret
push
cmp
sub
push
push
cmps
rol
cmp
fistp
cmp
lods
movs
rol
xor
dec
shl
and
les
int3
orps
cs
push
push
sti
rol
cmp
fistp
cmp
push
jb
cmp
and
mov
xor
mov
xor
arpl
mov
je
data16
rol
xor
dec
pop
repz
out
les
int3
jae
cmp
ret
rcr
mov
ret
push
push
jno
add
fistp
cmp
dec
and
in
arpl
mov
je
inc
mov
rcr
dec
(bad)
jg
or
mov
fstp
cmp
and
test
lods
out
ret
fistp
ret
sbb
out
inc
push
jae
xor
fwait
test
jbe
mov
mov
xor
inc
mov
gs
push
mov
fistp
dec
sub
inc
push
aaa
pop
cmp
jns
inc
cmp
enter
and
pop
push
gs
sbb
mov
dec
arpl
retf
cmp
data16
mov
je
push
and
test
test
arpl
mov
nop
mov
into
fcomp
xchg
xchg
and
mov
xor
mov
(bad)
sub
movs
repz
out
(bad)
rcl
pushf
mov
cmp
fcomp
ficom
mov
div
arpl
xor
rol
mov
adc
mov
push
and
out
retf
adc
test
cmp
fistp
mov
int3
mov
je
(bad)
sub
rol
push
push
push
adc
add
fistp
cmp
fistp
mov
int3
mov
je
adc
and
enter
enter
mov
fistp
mov
int3
mov
je
jb
and
rol
push
push
push
scas
rol
cmp
fistp
cmp
fistp
mov
int3
mov
je
mov
adc
mov
push
in
rol
cmp
fistp
cmp
lods
out
retf
enter
mov
fistp
mov
int3
mov
je
(bad)
sub
rol
push
push
push
daa
xlat
add
fistp
cmp
fistp
mov
int3
mov
je
retf
arpl
dec
test
inc
mov
mov
sub
pushf
mov
mov
mov
xchg
ret
add
and
mov
stc
xor
(bad)
aad
pushf
mov
ret
xor
retf
inc
xor
loop
mov
aam
cmps
mov
mov
xchg
jmp
push
ret
add
fneni(8087
test
fistp
aas
and
test
daa
arpl
cdq
lahf
mov
mov
movs
fidivr
xor
jecxz
ret
mov
cmp
arpl
ret
or
and
mov
lods
out
retf
enter
mov
push
adc
mov
aad
jnp
cmp
cdq
fwait
mov
adc
and
and
sub
xchg
stos
cld
fisub
cmp
mov
cmp
cli
arpl
(bad)
mov
cmp
mov
push
sub
push
mov
mov
aad
jnp
cmp
lods
movs
sub
cmp
mov
aad
je
cmp
push
arpl
mov
je
bound
and
stc
mov
inc
retf
(bad)
in
rcr
rcr
mov
jg
out
(bad)
mov
cmp
data16
mov
je
mov
and
ret
out
(bad)
mov
cmp
fcomp
mov
lahf
mov
(bad)
cld
and
mov
xor
mov
test
pushf
adc
xor
leave
cld
and
mov
xor
mov
sub
and
arpl
mov
cmps
mov
push
cmp
fcomp
mov
lods
out
retf
enter
mov
xor
pushf
hlt
(bad)
mov
cmp
and
(bad)
mov
cmp
dec
in
repz
out
(bad)
mov
cmp
ficomp
cmp
rcr
jmp
cwde
mov
pushf
outs
dec
xor
(bad)
jmp
mov
pushf
inc
(bad)
sub
mov
(bad)
in
lods
xchg
mov
lods
out
retf
enter
mov
mov
je
xchg
in
arpl
mov
je
sub
ret
out
(bad)
mov
cmp
rcr
ret
test
mov
stos
mov
fucomi
cmp
jge
adc
jmp
ror
push
cmp
fcomp
(bad)
test
mov
lahf
mov
dec
aaa
arpl
cdq
lahf
mov
adc
mov
cmp
mov
sub
arpl
mov
je
inc
ret
mov
dec
arpl
cmp
aaa
arpl
int3
mov
cmp
fcomp
rcr
pushf
mov
ret
dec
mov
push
xor
pushf
hlt
rcr
pushf
mov
cmp
and
sub
js
aad
jbe
cmp
fistp
cmp
enter
push
cmp
and
adc
fsub
or
adc
div
jg
or
and
inc
push
cmp
retf
xor
pop
push
ins
int3
xor
and
inc
aad
jbe
cmp
sbb
inc
mov
imul
mov
xor
jl
test
(bad)
jmp
out
adc
xor
arpl
dec
repz
and
bound
arpl
ins
int3
inc
push
cmp
add
push
and
cmp
fistp
repz
inc
push
and
arpl
mov
je
dec
cmps
fistp
ret
dec
mov
cmps
xor
arpl
add
cmc
jg
pushf
inc
dec
nop
and
out
pop
cmp
and
sti
out
imul
mov
in
inc
cld
fnstsw
lods
mov
mov
loopne
jl
cdq
leave
test
mov
rcr
pushf
inc
(bad)
adc
dec
mov
fst
mov
xchg
stos
cld
fisub
cmp
mov
cmp
sti
cmps
movs
and
mov
rcr
pushf
inc
mov
shr
in
add
inc
sti
mov
arpl
mov
xchg
cmp
xchg
pop
movs
les
test
pushf
adc
ret
dec
scas
cdq
jg
out
les
int3
outs
push
cmp
arpl
and
les
test
pushf
adc
ins
jae
cmp
fistp
ret
loop
fistp
ret
pop
push
and
les
int3
addr16
cmp
adc
movs
nop
mov
and
sub
mov
add
and
add
aaa
arpl
cdq
add
cmp
and
add
add
add
and
xchg
data16
dec
test
inc
aad
jo
cmp
lods
mov
mov
jmp
arpl
and
inc
into
inc
(bad)
sub
mov
add
and
popa
lods
arpl
mov
sub
pop
arpl
xlat
add
add
and
xchg
data16
cmp
xor
cmp
cdq
(bad)
repnz
sub
(bad)
enter
enter
sub
dec
arpl
cmp
and
add
and
add
dec
popa
sub
mov
jecxz
stc
ret
inc
mov
fist
mov
(bad)
scas
ret
test
mov
(bad)
scas
ret
mov
fs
cmp
push
mov
test
int3
adc
xor
int3
mov
inc
mov
fist
push
or
dec
nop
mov
(bad)
cmp
stc
ret
inc
mov
fist
mov
(bad)
scas
ret
test
mov
(bad)
scas
ret
mov
fs
cmp
push
mov
test
int3
adc
xor
int3
out
cmp
popa
fist
push
or
dec
nop
mov
xor
mov
xor
stc
jmp
(bad)
jmp
mov
jmp
and
add
test
jl
jmp
fs
js
or
and
sub
and
add
dec
pusha
ds
popf
ins
inc
cmp
iret
mov
cmp
and
inc
cmp
xor
inc
mov
mov
inc
cmp
cld
jmp
and
xchg
arpl
and
add
je
shl
and
sub
arpl
cmp
dec
arpl
cmp
and
inc
push
lds
call
jae
cmp
and
aad
data16
cmp
sub
push
and
jecxz
fistp
xor
jl
and
ror
aam
data16
push
pop
mov
data16
enter
mov
sub
test
push
and
mov
rcr
pushf
inc
cmp
or
out
rcr
pushf
adc
(bad)
sub
and
pop
mov
cmc
jg
or
and
test
mov
push
fs
xlat
add
nop
and
and
inc
aad
retf
mov
in
mov
mov
push
and
lods
dec
arpl
cmp
sub
ins
int3
jmp
cmp
retf
ins
dec
arpl
cmp
and
inc
push
and
scas
xor
adc
dec
outs
inc
cmp
and
pushf
je
mov
ins
inc
cmp
shl
xchg
arpl
out
jge
and
add
je
div
and
sub
test
aaa
dec
cmp
icebp
cmp
in
mov
movs
mov
and
pop
push
jnp
outs
inc
loop
pop
daa
arpl
popa
outs
ret
ins
lds
sub
mov
cmp
arpl
add
out
aas
and
jl
and
pop
push
cmp
arpl
mov
cmp
and
lds
arpl
mov
pop
sub
mov
or
dec
xlat
add
fucomi
(bad)
rcr
pushf
mov
mov
or
mov
sahf
mov
ret
test
fistp
ret
hlt
aad
pushf
mov
cmp
mov
out
rcr
adc
adc
loope
and
mov
and
dec
std
push
or
mov
(bad)
cdq
rcr
ret
call
mov
ret
xchg
dec
cmp
(bad)
(bad)
pushf
mov
ret
test
rcr
push
call
mov
or
(bad)
retf
sahf
mov
rcr
adc
fisttp
in
pushf
mov
cmp
arpl
mov
and
jl
nop
and
sub
cmp
nop
and
dec
xlat
add
and
ret
xlat
add
nop
and
push
fs
fisttp
jl
nop
and
sub
int
and
mov
cmp
fstp
test
and
mov
bound
mov
sub
les
arpl
and
inc
xor
test
and
pushf
and
add
sub
xor
int3
ja
cmp
and
mov
lods
out
rcr
enter
inc
cmp
lods
out
ret
fistp
cmp
data16
pushf
data16
movs
arpl
mov
pop
data16
data16
pushf
data16
sahf
data16
mov
pop
push
mov
(bad)
gs
cmp
xor
mov
mov
pop
cmp
arpl
sahf
data16
movs
arpl
dec
rcl
and
xor
int3
fisttp
and
mov
dec
xor
fidiv
and
stc
adc
arpl
ret
jmp
jecxz
in
fstp
rcr
inc
mov
mov
test
mov
mov
arpl
jp
inc
cmp
lods
movs
sub
and
inc
mov
bound
or
inc
cmp
and
cld
cmp
pushf
mov
cmp
cld
and
and
push
ss
mov
cmp
and
mov
and
enter
enter
inc
ret
leave
mov
loop
mov
fistp
jg
bound
mov
pushf
inc
cmp
fistp
pushf
data16
mov
bound
ret
jge
and
mov
and
sub
and
mov
xor
mov
(bad)
dec
add
inc
push
and
jb
data16
cmp
and
je
test
inc
aad
imul
and
mov
lods
out
rcr
enter
inc
ret
adc
(bad)
sub
cld
and
mov
xor
mov
and
inc
mov
bound
or
test
int3
(bad)
jecxz
cmp
pushf
mov
cmp
cld
and
and
push
aaa
and
mov
cmp
and
mov
and
int3
mov
pushf
mov
jge
pop
inc
cmp
xor
popa
push
and
inc
push
ret
mov
cmp
arpl
adc
jge
mov
cld
and
sti
mov
arpl
cmp
mov
pushf
jge
pop
addr16
pop
inc
sub
repz
and
mov
or
test
int3
repz
cmp
and
sar
jmp
mov
mov
dec
mov
cmp
pushf
mov
rcr
adc
mov
mov
fistp
cmp
(bad)
cmp
fistp
jg
mov
and
popa
push
and
inc
push
jecxz
add
sub
jecxz
jg
mov
and
test
and
mov
and
les
pushf
mov
rcr
adc
mov
mov
fistp
cmp
(bad)
cmp
fistp
jl
mov
xor
and
push
popa
push
and
inc
push
mov
aas
sub
dec
fidivr
out
xor
daa
arpl
fcom
mov
out
les
pushf
mov
rcr
adc
mov
cmp
fistp
cmp
(bad)
cmp
fistp
jl
mov
and
rol
push
popa
push
and
inc
push
dec
mov
cmp
sub
inc
ret
fidivr
push
xor
daa
arpl
test
loopne
ret
jge
and
mov
sbb
dec
dec
xchg
jg
or
inc
imul
push
imul
and
cmp
fistp
mov
scas
out
cmp
pushf
mov
add
or
or
sbb
inc
ret
fidivr
xchg
cmp
test
arpl
mov
(bad)
retf
mov
sbb
test
movs
int3
mov
je
(bad)
enter
ins
dec
dec
cdq
jg
out
(bad)
enter
ins
int3
mov
test
and
les
pushf
mov
mov
and
mov
(bad)
sbb
dec
jb
jg
or
mov
fist
mov
and
aam
popa
inc
cmp
fistp
mov
scas
out
cmp
pushf
mov
add
or
retf
cmp
and
ret
fidivr
pop
cmp
test
arpl
mov
(bad)
int3
mov
pushf
mov
jge
pop
inc
cmp
mov
mov
dec
mov
mov
mov
bound
mov
je
ins
in
arpl
mov
je
dec
xor
arpl
stc
xor
jmp
arpl
rcr
retf
sahf
mov
cmp
dec
arpl
cmp
or
mov
and
mov
xchg
mov
push
and
inc
ret
mov
cmp
rol
xlat
add
sub
jge
loopne
ret
jge
and
mov
mov
xchg
mov
push
adc
add
fistp
push
and
(bad)
int
pushf
mov
int
and
xchg
xchg
mov
cmp
int3
mov
sahf
mov
jge
pop
inc
cmp
test
pushf
adc
(bad)
mov
fistp
ret
sar
and
sub
fistp
frstor
mov
ret
inc
cmp
ficomp
cmp
arpl
push
and
inc
push
and
inc
push
and
inc
cmp
mov
inc
aad
addr16
cmp
fistp
mov
scas
out
rcr
enter
sub
rcr
inc
cmp
xchg
inc
mov
sbb
dec
fucomp
adc
aam
fstp
lahf
data16
ret
inc
cmp
mov
xor
cmp
(bad)
xchg
jg
pushf
hlt
leave
ficomp
cmp
fistp
cli
and
cmc
jg
bound
and
mov
push
and
inc
push
dec
xlat
add
and
adc
and
rcl
out
mov
push
and
aad
inc
cmp
and
cmps
mov
cmp
pushf
xor
fist
push
ret
mov
cmp
push
arpl
sub
(bad)
push
outs
jb
retf
fsub
mov
enter
enter
dec
add
inc
cmp
and
ret
push
mov
pop
push
lds
push
test
mov
fcom
cli
pop
push
test
fist
pushf
data16
push
adc
loopne
and
dec
ret
fidivr
cmp
jp
or
add
cmp
add
and
mov
leave
lods
movs
jp
cmp
add
or
add
and
je
mov
pushf
je
mov
addr16
cmp
arpl
movs
pop
xor
das
pushf
je
mov
addr16
cmp
arpl
movs
pop
xor
xor
aad
pusha
inc
cmp
rol
or
pop
je
mov
call
inc
push
adc
loopne
and
inc
mov
pop
fidivr
je
mov
call
inc
mov
and
je
mov
inc
dec
and
pop
cmp
adc
jl
push
inc
mov
sbb
jg
pop
je
mov
call
inc
push
adc
loopne
and
inc
mov
jg
jl
push
dec
ss
xor
fist
push
ret
pop
outs
int3
pop
inc
cmp
jecxz
pop
cmp
in
mov
fs
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
jne
test
mov
jecxz
pop
push
inc
sub
lods
fwait
add
xor
loopne
xor
in
push
cmp
jecxz
sbb
arpl
sub
fwait
popa
dec
xlat
mov
sub
inc
xor
pop
inc
mov
dec
arpl
push
and
mov
fistp
shl
inc
cmp
and
inc
sbb
arpl
and
stos
adc
out
sbb
add
call
add
mov
add
inc
add
cdq
mov
xchg
mov
inc
inc
jmp
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
xlat
and
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
cmp
shl
inc
lods
mov
inc
.byte
.byte
