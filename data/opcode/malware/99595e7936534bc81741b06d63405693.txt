push
mov
sub
push
call
push
mov
push
call
push
push
call
test
je
push
mov
push
call
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
push
mov
push
push
call
mov
cmp
je
int
mov
call
mov
push
call
add
mov
mov
mov
mov
push
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
cmp
jb
jmp
mov
add
mov
mov
push
mov
push
call
add
mov
mov
push
mov
add
push
mov
push
call
add
mov
add
add
mov
mov
add
mov
mov
sub
mov
mov
test
jne
push
ret
mov
push
mov
push
call
add
mov
push
ret
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
push
mov
mov
jmp
xor
jmp
sub
lea
push
ret
mov
push
ret
xor
shl
jmp
xor
mov
mov
sub
mov
mov
mov
cmp
jb
jmp
mov
mov
mov
add
mov
mov
mov
mov
push
mov
push
call
add
mov
mov
lea
mov
mov
push
mov
push
call
add
mov
add
mov
mov
test
jne
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
mov
jmp
xor
jmp
xor
jmp
sub
lea
shl
push
ret
xor
mov
sub
mov
mov
mov
mov
mov
add
mov
mov
mov
pop
ret
int3
push
mov
sub
mov
mov
mov
add
mov
mov
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
push
push
mov
mov
mov
mov
mov
mov
jmp
add
lea
push
ret
xchg
jmp
mov
jmp
sub
lea
jmp
add
jmp
add
jmp
xor
push
ret
int
jmp
mov
shr
lea
push
ret
pop
jmp
push
jmp
int
shl
mov
mov
mov
mov
mov
test
je
mov
lea
jmp
sub
jmp
mov
push
ret
add
jmp
xor
push
ret
add
shr
push
ret
int
shl
push
ret
push
jmp
pop
jmp
sub
jmp
add
jmp
sub
mov
cmp
jb
jmp
mov
mov
mov
add
mov
add
mov
mov
mov
add
mov
jmp
pop
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
mov
mov
mov
mov
mov
mov
push
call
mov
mov
mov
mov
mov
mov
test
je
lea
push
lea
push
lea
push
push
mov
push
mov
push
call
test
je
call
movzx
cmp
jne
movzx
cmp
je
lea
push
lea
push
lea
push
push
push
mov
push
call
test
je
mov
lea
mov
sub
jmp
jmp
call
jmp
mov
mov
add
mov
mov
push
ret
push
ret
push
ret
mov
add
mov
cmp
sbb
neg
mov
mov
mov
add
mov
mov
cmp
sbb
neg
mov
cmp
je
cmp
je
mov
jmp
mov
mov
mov
mov
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
push
mov
mov
mov
mov
mov
mov
push
ret
push
jmp
int
mov
push
ret
lea
push
ret
int
push
ret
sub
jmp
int
push
ret
sub
mov
cmp
jae
mov
jmp
jmp
mov
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
mov
mov
mov
mov
mov
mov
push
push
push
mov
sub
push
push
pop
call
mov
mov
mov
pop
ret
int3
int3
push
mov
sub
push
push
mov
mov
mov
mov
mov
lea
push
ret
xor
jmp
sub
shl
shl
jmp
xor
shl
jmp
push
mov
shr
lea
xchg
shr
shr
jmp
add
push
ret
add
jmp
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
add
mov
mov
sub
mov
mov
imul
mov
mov
mov
mov
sub
mov
mov
add
mov
mov
mov
xor
mov
mov
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
push
mov
lea
push
ret
lea
shr
push
ret
sub
push
ret
lea
lea
jmp
mov
mov
jmp
sub
lea
push
ret
sub
mov
mov
mov
pop
mov
lea
push
mov
push
mov
xor
lea
dec
add
push
ret
pop
pop
mov
pop
ret
int3
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
add
xor
push
push
jnp
inc
adc
gs
add
je
add
data16
aad
inc
ins
loopne
arpl
je
add
je
push
imul
push
jb
xchg
adc
add
add
ins
xchg
fs
imul
adc
add
jb
popa
jne
push
data16
gs
pusha
add
add
je
add
fs
dec
jbe
popa
inc
ins
inc
js
adc
add
sub
and
dec
adc
push
add
je
gs
jnp
jne
outs
dec
popa
fidiv
gs
adc
add
outs
inc
imul
adc
add
push
cdq
pusha
inc
imul
add
adc
jb
pusha
gs
lea
add
add
add
outs
outs
dec
popa
dec
jo
gs
add
je
add
cmp
push
push
ja
push
adc
adc
add
ins
daa
pusha
jb
sbb
add
add
add
jae
data16
push
add
add
je
add
je
add
je
gs
jns
jne
outs
inc
imul
outs
inc
add
jo
ins
xchg
push
imul
add
outs
gs
lea
popa
imul
je
add
je
add
je
add
je
add
je
push
add
dec
nop
add
adc
add
add
adc
add
pop
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
adc
add
mov
int
lods
add
push
push
pop
jnp
jb
jge
arpl
outs
outs
and
gs
pop
jne
add
jge
outs
and
pop
push
and
sbb
or
adc
add
adc
add
adc
jge
jno
cs
pop
cs
jo
mov
jno
cs
(bad)
fdiv
mov
jno
cs
xor
aaa
jo
cs
and
push
jo
sbb
adc
cs
shr
add
rep
pop
cs
int
stos
jo
mov
jo
cs
ja
push
or
adc
add
adc
push
int
add
fst
add
jge
add
(bad)
wbinvd
add
push
add
adc
add
add
lea
add
popf
add
adc
add
lea
add
lea
add
pusha
adc
add
add
push
adc
add
add
pop
rol
add
(bad)
call
adc
sbb
add
add
add
add
adc
add
adc
add
mov
add
adc
add
add
add
add
fst
add
add
fst
add
int
add
int
add
popf
jno
add
sub
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
(bad)
call
adc
add
adc
add
add
adc
add
gs
adc
add
add
add
push
(bad)
(bad)
fst
add
fst
add
int
add
lods
adc
pusha
retf
pop
fs
and
add
add
lea
add
popf
pop
add
lea
add
lea
add
pop
sbb
add
je
je
add
add
pop
fadd
add
add
add
sbb
add
add
imul
sbb
add
add
or
push
add
frstor
add
int
add
fst
add
sbb
gs
cmp
add
add
popf
ja
add
add
clts
add
pop
add
lea
add
dec
sbb
inc
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
sbb
adc
add
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
loopne
loopne
and
call
pop
sbb
adc
adc
mov
cwde
gs
popf
mov
je
in
or
outs
add
and
add
add
inc
loopne
inc
dec
popa
push
test
loopne
or
adc
pop
int
push
sbb
adc
neg
sbb
(bad)
movs
xor
add
add
pop
aaa
test
fmul
shr
inc
int
shl
div
push
test
std
pop
xchg
adc
inc
mov
inc
call
pop
add
xor
ret
inc
pop
in
pop
stos
sub
xchg
mov
inc
xor
(bad)
int
inc
inc
or
add
add
push
add
mov
inc
call
into
call
mov
dec
pop
ret
push
mov
das
pop
adc
or
fld
add
je
or
ficomp
or
dec
or
xchg
pop
adc
mov
lahf
add
adc
push
xchg
add
adc
adc
adc
test
add
cmp
nop
pop
inc
add
sbb
or
cmp
xor
jno
(bad)
push
add
dec
pop
dec
add
or
push
pop
(bad)
cmc
mov
les
ror
add
inc
pop
ret
push
mov
sub
jle
jge
fstp
add
add
popa
cmp
cmp
or
add
int
les
mov
pop
pop
es
inc
sbb
add
popf
dec
ret
inc
mov
cmp
jle
scas
adc
add
push
or
pop
inc
or
outs
or
arpl
dec
inc
dec
lea
cwde
stc
or
add
adc
mov
mov
or
pusha
adc
adc
pop
adc
xchg
push
push
pushw
cld
(bad)
fldcw
call
inc
push
adc
sbb
add
pop
(bad)
call
(bad)
pop
(bad)
leave
pop
adc
or
push
pop
add
sahf
xchg
rol
mov
add
hlt
push
mov
in
jg
push
ror
sbb
jle
addr16
arpl
push
push
cmc
add
sbb
loopne
jae
xchg
dec
push
pop
mov
das
clc
jae
pop
(bad)
push
aaa
adc
rep
jmp
jmp
mov
jne
es
mov
jmp
rcl
sbb
(bad)
enter
or
push
add
scas
pop
je
pop
call
mov
fisttp
pop
sbb
(bad)
jmp
fs
jb
shr
pop
(bad)
pop
and
mov
pop
dec
in
cld
jae
mov
fidiv
sub
cs
cmp
sahf
ins
cld
add
pop
add
xchg
jmp
xchg
add
aad
mov
pop
inc
or
dec
cld
add
add
int
inc
in
gs
adc
aad
jne
pop
jge
push
inc
in
sub
add
xchg
jle
movs
fs
add
push
add
or
push
push
push
adc
mov
lea
push
inc
(bad)
std
jmp
pop
dec
adc
ror
sbb
add
call
dec
push
ret
pop
jne
out
call
add
mov
push
push
movs
cli
das
add
xchg
in
or
popf
ja
out
sahf
lea
inc
call
pop
xchg
rol
imul
add
mov
hlt
call
add
pop
inc
hlt
std
mov
pushf
adc
add
cmp
push
or
sbb
mov
mov
xchg
les
mov
adc
jmp
add
mov
sub
jmp
sahf
cmp
add
adc
add
mov
cmp
aad
mov
adc
mov
rcl
adc
std
out
or
pop
inc
or
rcl
pop
dec
cmp
push
mov
ret
mov
rol
inc
pop
in
push
out
push
adc
cmovge
call
addr16
add
or
dec
adc
(bad)
pop
dec
ret
inc
mov
add
mov
add
or
inc
adc
mov
mov
mov
je
or
mov
adc
adc
add
xlat
scas
add
xor
or
add
inc
mov
stos
fs
and
push
jmp
popf
push
inc
or
xchg
adc
inc
mov
xchg
inc
mov
add
icebp
cmp
adc
add
inc
adc
sar
inc
pop
pop
add
sub
jbe
cmps
sbb
add
movs
add
xchg
jmp
xchg
cmp
pusha
add
fmulp
add
inc
push
sub
mov
mov
cmc
inc
or
xchg
adc
popf
call
adc
pop
or
pop
or
or
add
mov
push
push
inc
pop
jge
push
retf
cmp
pop
add
add
arpl
nop
fsubr
lock
pop
jne
(bad)
xchg
cmp
pusha
or
dec
loop
call
stos
gs
(bad)
ss
js
(bad)
jmp
mov
test
add
and
jb
imul
nop
mov
add
inc
dec
add
into
pop
inc
add
inc
or
sahf
out
push
or
adc
retf
movs
inc
add
popf
dec
pop
mov
dec
pop
ret
push
mov
lea
inc
mov
xor
aam
(bad)
rcl
pop
ret
push
adc
add
test
jne
add
push
icebp
(bad)
adc
xchg
sbb
test
je
ret
mov
pop
mov
adc
cdq
inc
push
push
icebp
call
xchg
adc
xchg
adc
mov
fisttp
add
inc
mov
push
push
or
xor
xor
add
dec
mov
pop
leave
into
nop
enter
div
faddp
add
outs
add
sbb
add
push
hlt
push
cmc
push
sub
or
sbb
inc
or
sbb
mov
rol
(bad)
and
and
mov
or
mov
add
in
shr
dec
push
in
cmps
aad
or
mov
(bad)
ja
dec
xor
push
xor
add
addr16
pop
inc
dec
fsubr
ja
inc
or
xor
mov
mov
call
pop
les
movs
xchg
push
inc
dec
(bad)
mov
dec
jne
cmps
pop
in
sub
push
add
xchg
jg
or
shr
add
retf
dec
lea
sbb
inc
icebp
add
int
les
mov
push
inc
mov
sub
loopne
mov
push
pop
add
xor
call
call
dec
iret
dec
inc
outs
add
xchg
push
add
inc
(bad)
call
int3
or
add
test
call
lds
cmp
adc
cmp
lea
popa
mov
xor
(bad)
jne
popa
push
jge
add
or
pop
add
mov
mov
in
add
(bad)
sar
push
inc
in
push
push
inc
cmp
mov
(bad)
jecxz
out
iret
push
add
add
sub
adc
jnp
call
jmp
cwde
jge
lea
sub
adc
xor
gs
(bad)
xchg
jno
mov
push
pusha
mov
cmc
sub
add
sbb
pop
mov
int3
call
push
mov
or
and
out
add
rcl
add
pop
ret
push
push
jmp
mov
dec
inc
adc
ror
sbb
pushf
adc
ret
push
mov
and
lods
mov
test
and
cmp
jno
out
add
dec
movs
inc
add
outs
or
adc
rcl
jmp
sbb
jne
lahf
into
call
xchg
fdiv
bound
adc
jmp
movs
inc
add
ins
or
or
call
adc
into
call
inc
ficomp
or
or
add
lea
push
mov
int
(bad)
inc
push
call
inc
add
ret
or
in
xchg
lahf
icebp
push
fiadd
pop
adc
add
mov
or
in
shr
dec
and
push
mov
pop
push
mov
pop
pop
pop
pop
add
mov
mov
mov
push
popf
into
jmp
sbb
pop
call
push
ret
or
cld
popf
inc
add
call
call
loop
jne
mov
or
mov
add
adc
mov
rol
add
call
mov
fcom
mov
fild
adc
add
cmc
scas
clc
dec
add
mov
mov
enter
shl
jne
sub
call
push
cmpps
clc
cmp
push
push
call
lea
or
inc
mov
jb
push
sbb
dec
sbb
and
cwde
jle
or
or
add
imul
psubsb
xor
or
mov
mov
push
adc
lea
out
sbb
jmp
cmc
sbb
and
sbb
and
sbb
xor
sbb
jb
(bad)
jmp
jmp
(bad)
je
sub
je
sub
adc
icebp
dec
call
add
push
xor
or
push
and
das
adc
lea
cld
pop
call
call
push
sbb
adc
nop
ja
cmp
mov
mov
pop
jmp
add
aad
pop
adc
or
sbb
xchg
jb
lahf
inc
add
pop
add
add
pop
mov
mov
pop
ret
push
mov
inc
or
pop
add
sar
add
ror
jmp
jne
add
dec
(bad)
or
inc
lahf
in
mov
xor
test
imul
sbb
dec
adc
push
jmp
mov
mov
sbb
pop
push
mov
scas
push
mov
pop
xor
test
ins
imul
dec
cmp
pop
or
mov
aad
add
sahf
in
push
pop
cmp
add
push
sbb
int
add
sahf
loope
jmp
push
push
call
push
ror
ret
push
in
jl
add
lea
mov
out
sbb
sbb
inc
pop
mov
test
popa
adc
mov
mov
sub
inc
test
push
call
fcomp
mov
dec
cmp
popf
add
jne
pushf
dec
in
inc
push
or
call
test
cmp
and
adc
mov
xor
add
fmul
mov
inc
mov
call
aam
adc
gs
pop
add
add
loopne
(bad)
jmp
pushf
pop
call
stos
bound
aaa
rol
(bad)
cmp
popa
add
rol
cwde
push
sub
js
add
lahf
adc
mov
mov
stc
jnp
adc
add
sbb
add
adc
shr
jmp
popf
xchg
gs
popf
mov
mov
mov
out
sbb
rol
pop
popf
jns
add
(bad)
(bad)
xchg
dec
adc
mov
inc
sbb
cmp
inc
sbb
adc
sub
sbb
js
sbb
mov
mov
data16
mov
xchg
inc
sbb
add
adc
adc
inc
shr
repz
jmp
int
dec
sbb
or
cmps
cwde
add
add
adc
or
movs
xlat
sub
(bad)
into
call
push
cmp
call
sbb
add
in
sub
pop
mov
dec
mov
push
add
or
mov
daa
adc
call
xchg
or
mov
pop
test
add
mov
xor
fiadd
call
sbb
mov
add
adc
mov
add
or
shl
ret
test
jnp
adc
adc
add
add
xchg
test
out
test
add
push
hlt
ja
scas
adc
add
pop
or
mov
push
sbb
ror
xrelease
es
pop
sldt
inc
or
adc
shl
push
add
call
test
test
call
pop
lea
add
add
in
and
sub
lea
and
call
lea
push
and
jecxz
and
sbb
jne
dec
xchg
add
sbb
les
and
or
xchg
adc
add
mov
add
inc
dec
and
push
add
jne
repz
jp
push
sbb
inc
jne
repz
fs
movs
repz
mov
add
(bad)
dec
and
xor
or
mov
pop
pop
(bad)
mov
ret
push
movs
inc
jnp
sbb
sbb
cld
or
sbb
movs
retf
push
add
add
sbb
ret
push
mov
xchg
in
sbb
icebp
push
jmp
enter
mov
fisttp
add
mov
push
push
lock
out
inc
jns
push
shl
mov
mov
push
fmul
imul
jmp
xlat
jne
out
jmp
(bad)
push
or
les
add
nop
lods
lea
lea
mov
or
dec
nop
dec
add
rol
or
icebp
mov
movs
push
or
sbb
sbb
add
or
push
mov
push
repnz
out
je
inc
pop
or
adc
sub
test
mov
xchg
shl
out
xchg
push
add
dec
pop
add
add
push
add
mov
sub
aaa
mov
mov
je
cld
ja
out
adc
pop
or
push
mov
and
pop
jmp
out
push
push
add
sub
cdq
push
iret
stc
imul
add
lods
jl
mov
add
pop
stos
or
aaa
retf
mov
cmp
mov
and
sub
sbb
retf
mov
push
(bad)
retf
repz
inc
ja
es
jmp
adc
je
stos
push
adc
sbb
push
or
mov
mov
jbe
or
pop
ds
div
leave
mov
mov
push
(bad)
je
in
or
dec
inc
shl
or
push
or
and
out
add
sub
add
cmp
enter
in
mov
les
inc
sbb
sbb
adc
stc
cmp
or
adc
int
inc
or
aam
add
sbb
rcl
adc
out
push
mov
dec
or
into
jne
fmulp
jmp
push
dec
adc
fsub
cdq
dec
(bad)
mov
xlat
sub
add
mov
cmp
sahf
enter
bound
push
in
or
dec
inc
inc
adc
les
sbb
xchg
inc
hlt
mov
push
mov
bound
or
add
fnstsw
push
test
mov
push
or
add
xor
push
push
add
adc
add
xchg
inc
add
ds
or
pop
and
add
jbe
add
rcr
ror
xor
lds
push
adc
pop
ds
add
jmp
je
(bad)
sbb
jmp
cmps
sti
pop
cmp
mov
xchg
cmp
test
xchg
push
add
and
dec
add
or
addr16
mov
pop
mov
mov
mov
push
shl
or
call
inc
add
dec
add
test
mov
push
push
or
mov
data16
sbb
mov
add
es
pop
adc
jae
add
add
movs
bound
jmp
adc
jbe
fisubr
push
rol
push
(bad)
ror
push
mov
adc
leave
sahf
jecxz
dec
inc
push
add
fnstcw
push
push
pop
add
jp
jmp
pop
add
stos
in
ret
add
mov
mov
mov
add
pop
pop
test
inc
dec
or
aas
jne
or
call
pop
push
aas
in
push
mov
or
mov
add
sti
cmp
cmp
sub
push
add
test
or
mov
add
fs
cld
mov
test
push
movs
cwde
cli
or
add
adc
pcmpgtd
mov
pop
lods
inc
mov
int3
mov
and
adc
push
or
bound
cmp
push
out
mul
adc
or
shr
add
or
and
rcl
add
jmp
movs
cmp
jno
cmps
mov
mov
add
ss
clc
cmps
pop
or
jmp
pop
push
(bad)
or
sar
push
data16
adc
add
dec
dec
leave
push
xchg
leave
inc
sbb
rcl
mov
xchg
mov
sbb
mov
mov
cmp
and
mov
rol
shr
mov
arpl
add
test
or
ds
jmp
ds
cmp
(bad)
sub
jb
ds
sbb
add
ss
add
cld
mov
mov
push
push
push
enterw
call
cmp
mov
xchg
jo
pop
int
jb
cmp
(bad)
lea
add
fld
mov
add
cmps
lods
mov
cmp
call
pop
lahf
push
dec
jne
and
test
popa
adc
or
jb
xchg
enter
pop
leave
ud1
sub
jb
cmp
clc
jmp
add
add
call
cmp
dec
adc
jge
pop
mov
push
add
xchg
leave
inc
dec
mov
xchg
sti
or
adc
ret
dec
mov
mov
push
mov
fwait
popa
pop
inc
sar
je
outs
loop
mul
ret
cmp
arpl
xchg
fadd
mov
or
je
std
inc
jmp
xchg
sti
or
rcl
clc
out
or
out
pop
add
mov
add
nop
cmp
cmp
push
mov
cmp
cld
cmp
test
sbb
mov
push
fcomp
int
mov
fstp
fst
inc
jne
add
sbb
lea
lds
cld
stos
int3
test
and
or
iret
or
add
iret
stos
(bad)
call
ror
test
add
out
adc
fbstp
inc
sbb
push
hlt
mov
jge
fsub
mov
retf
inc
test
inc
adc
ror
xchg
je
stos
gs
push
lods
mov
pop
add
and
(bad)
call
adc
add
fnstenv
(bad)
call
push
shl
push
adc
sar
or
push
add
int
mov
mov
sbb
je
aaa
dec
cld
(bad)
push
or
(bad)
fidiv
adc
daa
jmp
add
(bad)
jmp
ror
cli
fimul
test
and
mov
aaa
inc
clc
xchg
push
adc
and
mov
aaa
inc
hlt
push
push
lea
cmp
gs
add
cmp
push
jecxz
mul
inc
into
mov
(bad)
ror
shl
adc
push
or
mov
mov
mov
push
add
add
(bad)
(bad)
call
inc
or
fsubr
jmp
jmp
dec
and
adc
inc
adc
rcr
enter
call
(bad)
fld
sub
inc
sar
add
adc
and
ret
push
inc
fadd
jmp
adc
add
rol
push
push
inc
lea
out
xchg
adc
jmp
jmp
(bad)
(bad)
pop
pop
adc
add
and
push
push
mov
(bad)
in
adc
aaa
fdiv
fld
push
mov
mov
or
and
jne
daa
adc
call
data16
add
adc
add
push
push
sbb
inc
adc
adc
call
and
je
es
adc
mov
adc
lea
mov
fnstenv
inc
and
add
cmp
fsqrt
(bad)
jmp
sbb
pop
or
add
rcl
cmp
add
das
inc
sbb
shl
fisttp
or
(bad)
xchg
shr
pop
test
loope
mov
xor
push
push
adc
xor
mov
iret
xor
inc
xchg
xchg
ror
call
test
arpl
mov
add
mov
xchg
js
pop
add
add
(bad)
call
cs
adc
sbb
sbb
nop
movs
add
cs
call
xchg
xlat
je
xchg
push
adc
add
inc
cld
xchg
push
sbb
push
(bad)
call
lea
(bad)
mov
gs
jmp
shl
mov
push
or
pop
stos
out
xchg
push
add
ret
test
jne
push
lds
push
jmp
push
iret
mov
sub
push
in
pop
sbb
pop
or
mov
(bad)
jmp
inc
add
push
add
fdiv
pop
pop
in
adc
sub
push
xchg
out
pop
push
xchg
mov
add
fldpi
sbb
test
add
scas
jmp
xchg
jle
frstor
mov
fimul
mov
(bad)
add
add
push
push
push
out
pop
mov
out
lea
movmskps
outs
call
jmp
push
add
inc
(bad)
rcr
sub
or
push
push
sub
mov
or
push
cmp
shl
inc
cld
mov
lea
int
cmp
adc
inc
mov
sbb
icebp
mov
inc
adc
sub
dec
sbb
aam
stc
mov
fdivr
jne
sub
inc
add
movs
(bad)
jne
jl
or
xor
in
cmp
pop
lahf
jge
out
repz
mov
jne
in
or
pop
cmps
enter
imul
pop
lock
ja
nop
shl
adc
push
xchg
add
out
sar
ja
out
call
xchg
pop
or
call
pop
leave
add
(bad)
push
fs
inc
push
push
inc
push
or
jno
push
cmp
adc
in
jne
cmp
lea
repz
push
xor
lea
fs
mov
test
xor
xchg
shl
or
in
jnp
fnstsw
sbb
add
add
dec
xor
add
arpl
or
sbb
inc
loopne
add
int
imul
pop
lock
pop
mov
lahf
ja
sbb
sahf
in
push
es
or
adc
jne
call
sbb
out
jne
xor
xchg
adc
xchg
shl
adc
aam
or
push
add
pop
dec
and
and
and
ret
push
cmps
fs
push
(bad)
lea
push
shl
stos
in
jmp
push
push
jp
sbb
adc
sbb
fcom
adc
pop
leave
lahf
add
push
inc
fs
dec
push
mov
add
inc
adc
mov
sub
mov
aam
add
iret
jmp
push
jo
add
lea
push
je
stos
inc
adc
adc
mov
jo
jmp
mov
aam
adc
adc
mov
sbb
add
jg
add
xchg
movs
call
inc
add
add
cmps
mov
js
jmp
test
pop
mov
jg
xor
jge
cs
call
mov
sbb
add
dec
mov
ss
adc
inc
mov
inc
mov
out
adc
nop
sbb
xor
lahf
inc
adc
add
pop
or
push
call
pop
or
fdivr
sub
cmp
and
mov
test
push
fdiv
movs
mov
add
sahf
inc
adc
(bad)
push
or
ins
call
test
movups
sahf
jg
jbe
add
sahf
inc
sbb
push
push
add
pop
lea
add
pop
adc
dec
sbb
sti
jbe
push
push
pop
fst
jb
(bad)
dec
rcl
jmp
mov
mov
xchg
ret
dec
mov
mov
mov
pop
mov
in
adc
jg
call
mov
jae
xchg
pop
or
mov
mov
jbe
add
push
push
adc
leave
scas
cmp
out
sbb
test
add
sti
add
jge
cld
dec
jne
out
call
sbb
sbb
add
jmp
mov
in
mov
inc
add
fwait
or
pop
push
mov
push
push
test
dec
push
cmps
push
or
add
scas
js
call
add
(bad)
movs
cmp
jmp
faddp
or
inc
mov
pop
fdivr
sub
add
ret
and
call
test
loop
push
push
jmp
arpl
out
push
mov
pushf
push
adc
fwait
into
call
push
fmul
(bad)
cmp
mov
mov
add
jle
mov
jle
into
mov
adc
cmp
jb
cmps
dec
add
push
call
cmps
aas
mov
movs
(bad)
in
stos
jl
push
pushf
(bad)
call
popa
aad
es
sbb
push
dec
add
ficomp
push
mov
push
test
jge
in
ins
mov
jmp
inc
cdq
xchg
shl
ret
mov
cmp
in
test
je
xor
xchg
inc
or
push
adc
in
ret
push
(bad)
jl
in
adc
xchg
inc
sbb
push
cld
(bad)
loopne
add
or
or
add
sub
jnp
adc
mov
ins
test
and
mov
xchg
jg
(bad)
fld
call
in
repz
arpl
pop
sbb
or
out
mov
mov
jnp
hlt
stos
push
shl
jne
mov
mov
pushf
inc
call
pop
adc
push
add
push
cwde
inc
add
dec
or
push
mov
push
or
xchg
jne
xchg
ror
call
test
ud0
jbe
mov
arpl
(bad)
push
sbb
pop
push
into
pop
leave
(bad)
sbb
push
outs
sub
das
fs
adc
cld
cld
pop
jmp
add
popf
inc
lea
mov
adc
imul
punpcklbw
call
shl
hlt
jmp
pop
jmp
pop
(bad)
jge
fdiv
jns
scas
imul
fucom
pop
mov
mov
add
movs
out
add
adc
jmp
adc
add
call
inc
add
mov
push
adc
jmp
adc
jge
mov
add
sti
call
stos
idiv
lea
push
push
inc
cdq
or
pop
mov
fdiv
pop
call
loope
mov
cmc
ror
dec
call
fimul
ret
push
add
shl
jns
sbb
mov
xchg
fsubp
mov
sbb
inc
aad
inc
in
and
push
push
call
call
push
leave
mov
xchg
js
popf
hlt
add
mov
push
push
iret
call
ds
add
and
mov
inc
ss
jmp
xchg
inc
or
add
push
in
call
pop
adc
jmp
mov
jo
or
sbb
xchg
call
int3
ja
mov
out
add
add
push
call
out
push
pop
dec
aam
fsubr
dec
sti
add
aam
pop
dec
lods
call
cmc
iret
inc
inc
popf
mov
add
or
pop
mov
mov
daa
sbb
dec
jo
or
pop
inc
mov
mov
or
inc
sbb
dec
sub
je
nop
pop
mov
add
mov
mov
out
pop
jne
nop
pop
or
jo
add
add
add
out
xor
dec
cmp
je
(bad)
fild
jne
push
mov
jne
or
int
inc
add
push
sub
es
mov
mov
mov
mov
inc
jo
push
lea
jmp
push
push
cmp
jne
adc
add
push
sub
(bad)
adc
sub
lea
mov
jmp
add
es
je
xchg
mov
call
xchg
fild
(bad)
dec
lods
add
adc
sub
lea
xchg
push
add
inc
or
fstp
cmp
je
inc
loop
mov
push
mov
mov
mov
mov
sbb
(bad)
ror
push
mov
cmp
and
mov
push
mov
mov
adc
test
cmp
sti
call
aad
test
or
je
(bad)
jmp
adc
out
je
mov
pushw
lea
call
adc
add
test
add
sbb
mov
push
call
mov
mov
inc
or
call
mov
pop
dec
or
dec
or
cmps
or
add
fdiv
fisttp
jmp
jmp
cmps
dec
lock
and
rcl
add
ret
pop
add
inc
(bad)
or
rcr
cmp
inc
sbb
push
mov
ins
mov
add
or
ins
arpl
test
or
inc
jne
add
shl
hlt
jne
out
call
pop
inc
sbb
jnp
minps
mov
and
(bad)
push
sbb
add
les
mov
dec
or
movs
fwait
jmp
lahf
mov
and
movs
ret
out
jmp
dec
in
push
or
adc
lea
pop
lea
jp
lock
inc
aad
dec
adc
mov
and
add
dec
leave
ret
rcl
dec
gs
lahf
push
pushf
adc
and
jb
add
mov
add
and
lea
dec
lea
adc
dec
adc
arpl
lea
push
call
mov
jnp
int
mov
inc
or
fmul
add
and
inc
sbb
inc
jne
push
sub
push
sbb
mov
or
cmp
pop
mov
xchg
mov
and
out
pop
jne
sbb
push
jo
inc
xchg
jp
add
inc
add
addr16
mov
jg
xchg
sbb
jmp
cmc
cmp
dec
and
add
jecxz
inc
add
or
inc
push
sbb
add
js
or
adc
dec
xchg
pop
cmp
jne
xchg
push
inc
add
cdq
mov
retf
fstp
add
cmps
test
stc
call
push
dec
add
int
add
xchg
(bad)
inc
inc
lea
inc
add
add
loopne
push
inc
push
or
pop
xchg
inc
add
cwde
jg
xchg
adc
test
(bad)
inc
push
sbb
xchg
adc
mov
mov
cmc
push
push
add
dec
mov
call
xchg
dec
or
fs
mov
adc
jmp
mov
mov
leave
mov
imul
mov
pop
mov
(bad)
shr
inc
dec
idiv
fst
sub
xchg
cli
add
or
add
pop
xchg
add
dec
pop
mov
cld
jle
enter
add
push
add
cmp
pop
push
mov
cmps
pop
call
mov
push
or
jns
pop
test
movs
mov
cmps
add
jns
mov
(bad)
sbb
xchg
inc
call
jmp
push
mov
sbb
add
popf
push
call
mov
daa
push
sbb
rcr
rol
cmc
adc
loop
pop
push
mov
sbb
push
les
inc
add
pusha
inc
test
mov
cmc
daa
cmc
(bad)
cli
addr16
add
dec
mov
sti
(bad)
sbb
pusha
sbb
xchg
adc
mov
add
or
inc
add
fst
mov
and
enter
push
call
sahf
pop
cmp
jmp
mov
mov
push
lods
imul
add
inc
call
jmp
xor
aad
adc
call
mov
mov
cdq
pop
loop
push
xchg
clc
add
xchg
mov
sbb
jge
fsubr
sbb
ud0
add
es
or
adc
dec
int
inc
rol
add
sbb
sub
add
idiv
scas
ret
jge
push
call
and
sti
add
add
pop
mov
in
jmp
idiv
push
outs
leave
lea
ja
fsubr
cmps
std
jne
push
jne
xor
add
dec
pop
inc
mov
push
adc
nop
add
hlt
cli
imul
add
imul
and
call
(bad)
shr
add
sbb
in
pop
(bad)
mov
adc
adc
cmp
loope
sub
dec
jnp
(bad)
shr
jmp
cmp
add
cmp
out
push
inc
xor
sbb
add
or
(bad)
(bad)
sbb
sub
jmp
mov
adc
fwait
or
call
setg
push
out
lds
push
and
sub
adc
pop
loopne
or
fstp
push
inc
and
aaa
pop
adc
sbb
iret
adc
aaa
pop
and
cmc
mov
xchg
jmp
add
jecxz
mov
xchg
mov
stos
push
inc
and
dec
xchg
stos
pop
inc
xor
add
mov
inc
add
rcr
nop
pop
in
cmp
push
push
adc
mov
mov
loopne
jne
cmp
sti
jmp
sbb
ss
clc
pop
sbb
cmps
dec
adc
mov
aas
pop
push
iret
add
cmps
adc
mov
sub
fstp
push
cld
sbb
xchg
add
int
jmp
adc
add
inc
cld
cmp
ins
jae
and
sti
mov
ins
call
mov
pushf
sub
mov
push
lea
inc
mov
adc
mov
sbb
mov
sbb
add
pushf
mov
push
push
sahf
and
xor
sbb
ss
sar
push
test
and
call
les
inc
cld
push
add
inc
adc
jmp
inc
(bad)
or
fs
mov
pop
ret
mov
ins
call
adc
mov
add
(bad)
jbe
or
cvtps2pd
add
jne
dec
push
adc
cmp
mov
scas
or
sahf
pop
add
in
hlt
jmp
clts
mov
lea
loop
rol
sbb
mov
daa
mov
outs
out
shr
mov
add
mov
sub
push
mov
stc
int
mov
xchg
les
sub
jmp
push
push
clc
adc
add
jle
jne
ficomp
les
add
in
cmp
xor
out
shl
out
ins
and
add
push
or
test
neg
xchg
clc
add
mov
add
pop
(bad)
inc
add
inc
inc
or
scas
lods
or
pop
int3
push
pop
pop
cmp
and
adc
pop
add
js
pop
call
imul
sbb
mov
mov
sub
mov
and
or
lea
add
loopne
je
push
inc
add
rcr
add
mov
add
add
push
add
mov
jae
(bad)
fadd
mov
inc
ds
or
cmp
mov
xchg
pop
cmp
dec
add
jno
dec
add
nop
je
fs
add
or
inc
out
mov
xchg
aaa
pop
mov
mov
mov
add
loope
in
add
call
(bad)
xchg
pop
xchg
inc
lea
pop
dec
push
add
nop
or
sub
jns
push
inc
add
add
push
add
aam
push
jmp
xchg
jns
and
adc
add
(bad)
call
jns
jbe
or
or
add
mov
add
loop
out
shr
scas
in
adc
mov
stos
pop
call
or
sub
call
push
inc
add
mov
jb
or
jmp
or
cmp
lea
push
mov
jb
mov
mov
sbb
add
xor
mov
rol
inc
add
xor
add
add
jge
int
sub
pop
push
fs
add
(bad)
rcr
(bad)
fdiv
out
sbb
push
pop
frstor
add
movs
jne
inc
xor
(bad)
call
jg
clc
adc
rol
jmp
sahf
inc
or
pop
mov
cmps
pop
mov
add
nop
cmp
and
jnp
sbb
mov
fdivr
cmp
dec
add
push
jo
jne
mov
pop
or
sbb
cmp
(bad)
jg
push
gs
xchg
push
mov
mov
mov
data16
not
adc
add
aam
or
push
popf
add
int
jnp
int
add
imul
retf
jbe
mov
push
fadd
adc
dec
or
lahf
pop
mov
inc
or
mov
pop
adc
mov
mov
(bad)
dec
or
movs
rol
mov
ss
or
add
pop
mov
ror
ficom
mov
mov
mov
mov
add
fnstenv
je
lahf
adc
push
mov
cmp
add
adc
add
(bad)
repnz
rcl
cmp
and
std
popf
adc
mov
or
xchg
jmp
pop
adc
retf
(bad)
jecxz
adc
sub
dec
mov
adc
sub
add
mov
sub
add
sbb
sub
and
cmp
jne
push
adc
inc
fst
push
(bad)
sbb
jmp
aam
(bad)
call
pop
mov
jge
inc
leave
pop
inc
sub
add
into
(bad)
int
add
sahf
pop
add
cmps
sub
adc
(bad)
sub
xchg
lahf
into
(bad)
xchg
test
out
sar
call
sbb
adc
test
jne
lahf
add
adc
inc
sub
icebp
arpl
push
adc
cmp
stos
(bad)
push
add
sub
and
inc
sub
inc
mov
call
mov
popf
inc
sub
shr
(bad)
jecxz
add
push
shr
add
inc
add
(bad)
sub
aaa
adc
sbb
or
or
(bad)
inc
pop
cmp
dec
jbe
jmp
inc
add
push
sahf
dec
adc
adc
call
pop
sbb
push
xchg
pop
and
call
in
mov
sub
push
stos
and
mov
stos
call
mov
mov
(bad)
(bad)
jp
call
sub
call
retf
cmp
leave
fistp
add
add
les
mov
sub
dec
push
popf
push
add
inc
add
sbb
push
inc
ins
dec
add
adc
mov
mov
not
mov
lahf
or
adc
push
in
je
fnstsw
mov
mov
out
lahf
adc
add
add
mov
popf
jge
xchg
sar
add
cmps
je
rol
mov
iret
add
cdq
inc
mov
mov
mov
sahf
inc
sbb
rcl
mov
adc
or
pop
push
adc
jmp
add
push
mov
int3
push
call
loope
call
mov
cmp
adc
sub
dec
mov
shl
xchg
gs
fstp
dec
test
xchg
add
cmp
inc
loopne
lea
inc
call
lea
test
xchg
shr
lea
add
sbb
iret
pop
xor
cli
jmp
add
xchg
inc
adc
fadd
mov
jne
nop
jg
dec
xchg
jae
xor
mov
xchg
dec
or
adc
add
push
imul
or
sbb
xlat
and
sub
push
xchg
into
jmp
xchg
pop
mov
xchg
add
mov
or
add
lds
or
adc
add
pop
jmp
push
rol
mov
mov
mov
sub
mov
mov
mov
cmp
push
and
mov
aam
mov
and
pop
xchg
push
or
inc
add
fadd
mov
cmp
add
and
push
push
(bad)
add
je
add
fdiv
mov
xchg
dec
add
(bad)
inc
sbb
shl
mov
adc
call
or
add
jmp
sub
add
pop
cdq
push
cmp
ja
fwait
sbb
adc
or
pop
aam
mov
push
inc
inc
or
adc
inc
or
adc
mov
xchg
js
fcom
or
adc
je
inc
rol
adc
add
loopne
mov
mov
call
mov
sbb
or
aam
mov
add
into
and
inc
add
(bad)
dec
add
adc
adc
adc
add
sbb
adc
add
jbe
inc
add
push
and
or
sbb
sbb
add
push
inc
or
loope
test
push
(bad)
jmp
add
inc
add
xchg
inc
or
inc
add
int3
inc
add
dec
adc
add
push
mov
popf
jne
adc
aam
mov
(bad)
(bad)
aam
call
and
fcomp
or
pop
mov
(bad)
jle
ss
sbb
inc
mov
xchg
leave
jbe
ror
mov
add
sbb
mov
and
out
add
int
push
mov
pop
push
mov
adc
push
dec
add
dec
add
or
mov
out
add
nop
inc
add
sbb
jne
nop
add
mov
mov
cmp
add
inc
mov
(bad)
sbb
nop
adc
nop
sbb
aam
add
adc
sbb
push
adc
add
sbb
pop
jne
nop
inc
or
mov
fs
pop
mov
pop
ret
push
gs
out
add
rcr
push
je
push
xchg
lahf
(bad)
adc
add
and
inc
add
or
mov
aam
out
adc
add
shl
lock
add
adc
lea
adc
add
cmps
je
cli
adc
mov
(bad)
jne
test
(bad)
call
or
(bad)
(bad)
and
add
adc
xor
pop
and
add
je
add
je
mov
sbb
xor
add
adc
add
push
cmp
and
add
sbb
add
add
push
mov
mov
ret
or
or
sbb
add
movs
jne
xchg
cmps
jbe
add
cmps
(bad)
call
xchg
dec
mov
lods
cwde
loope
test
call
lea
inc
add
fidiv
pop
pop
xchg
push
add
mov
mov
call
push
mov
pop
mov
sbb
adc
adc
adc
or
int
inc
into
adc
add
test
jnp
movs
inc
xchg
int3
inc
xchg
int
mov
mov
ret
and
mov
add
mov
lock
ret
(bad)
jmp
nop
add
stos
add
(bad)
je
or
mov
lea
mov
mov
fwait
invd
add
int3
adc
push
retf
xlat
jbe
adc
sub
jg
lods
adc
shr
int3
jae
sub
add
cmp
(bad)
call
sbb
push
in
iret
(bad)
jmp
aam
pop
sar
cli
std
inc
or
push
push
gs
jbe
sbb
adc
jne
add
xchg
gs
cmp
jmp
add
out
call
mov
jp
call
pop
adc
sbb
call
push
int3
pop
call
ficomp
mov
sub
add
push
add
(bad)
inc
adc
mov
add
repnz
rol
popf
inc
ret
push
retf
xchg
sbb
jb
adc
jmp
jle
gs
sbb
rcr
cdq
gs
or
adc
mov
jp
call
mov
push
cmp
(bad)
inc
pop
call
mov
in
push
cmp
fsub
aad
push
push
mov
(bad)
imul
pop
add
mov
mov
es
and
cmp
dec
call
adc
cmp
es
pop
(bad)
dec
pop
pop
mov
mov
std
jl
(bad)
movs
jne
stos
es
and
jne
cdq
rol
adc
ret
cmp
push
mov
add
add
into
xchg
rol
dec
adc
or
add
addr16
pushf
shl
pop
ret
add
in
push
add
lea
lea
jne
lea
mov
add
lea
ret
cmp
or
popf
mov
jne
pusha
rcl
or
nop
js
je
sbb
pop
fistp
push
add
xchg
mov
inc
cmp
cmovo
xor
sar
mov
data16
call
push
inc
ret
cmp
in
add
lock
adc
cmp
das
adc
sbb
pop
or
inc
mov
adc
add
pop
test
mov
cmp
add
scas
or
pop
xor
push
pop
pop
pop
adc
push
(bad)
fwait
push
mov
and
mov
push
sar
mov
jle
or
adc
add
inc
push
mov
mov
pop
dec
mov
cmp
jecxz
mov
xchg
or
cmps
mov
test
out
popf
mov
jbe
std
jge
not
add
push
std
int
inc
mov
je
push
rcl
xor
add
dec
sti
push
add
cmp
sbb
or
sbb
add
jl
xchg
aam
xchg
into
add
sti
lds
sub
add
inc
push
mov
jle
lock
ret
call
push
push
je
dec
or
or
adc
lea
adc
clc
inc
call
push
call
jmp
xchg
enter
adc
dec
and
mov
mov
popf
loop
lea
mov
adc
push
cld
(bad)
mov
je
(bad)
iret
pop
add
in
jno
(bad)
aas
add
push
cli
push
add
aaa
adc
and
sar
dec
int
ret
(bad)
mov
mov
(bad)
mov
pop
pop
or
add
sar
out
adc
add
pop
xor
add
cdq
adc
xor
jl
pop
popf
adc
inc
add
add
jmp
sbb
call
into
push
sbb
dec
inc
je
jo
push
in
inc
dec
pushf
dec
add
adc
push
cmps
pushf
mov
inc
lea
inc
mov
rol
mov
and
stc
mov
std
jmp
adc
push
retf
shl
and
ficom
add
push
and
add
and
adc
(bad)
call
fbstp
imul
adc
mov
inc
or
xor
add
aam
cmp
jae
(bad)
cmp
push
cmc
fdivr
(bad)
jmp
sbb
cwde
mov
xchg
or
add
or
mov
cmp
jg
out
aaa
adc
mov
adc
mov
mov
mov
repz
or
add
sahf
movs
mov
sahf
push
mov
and
int3
mov
mov
add
(bad)
neg
sti
inc
aam
das
cld
(bad)
push
mov
cmp
js
cmp
xor
call
mov
push
(bad)
mov
add
push
cdq
fmul
xchg
call
adc
imul
mov
mov
add
ret
cmps
mov
mov
adc
push
inc
pushf
sub
repnz
lds
adc
lds
mov
jns
rol
and
push
add
dec
add
sahf
lea
(bad)
movs
movs
lock
pop
add
xchg
movs
out
lea
(bad)
movs
movs
lock
(bad)
inc
adc
ins
test
adc
inc
sbb
and
pop
movs
inc
sbb
ds
xor
cwde
fwait
out
adc
ret
bound
call
hlt
or
popf
push
inc
add
jns
icebp
inc
sub
add
push
push
call
mov
adc
jns
mov
xchg
adc
xchg
loope
call
not
js
je
inc
call
pop
push
mov
pop
iret
adc
push
push
pushf
push
push
daa
add
dec
mov
call
and
pop
ret
mov
add
hlt
jmp
xor
add
or
mov
mov
sbb
xor
add
sbb
jge
inc
add
out
(bad)
adc
add
fbld
pushf
sbb
mov
out
popf
xchg
gs
popf
call
or
xchg
cmps
xchg
inc
pop
(bad)
jbe
sub
add
dec
push
add
nop
out
jmp
(bad)
mov
adc
pop
add
nop
jo
je
inc
call
pop
xchg
mov
pop
iret
jb
push
xchg
lea
mov
rol
cmps
(bad)
jmp
pop
jmp
add
jmp
inc
mov
push
add
mov
inc
add
(bad)
jmp
inc
or
out
lea
mov
jmp
ret
inc
mov
inc
cdq
jne
push
xchg
pop
stos
cwde
inc
arpl
lds
push
add
xor
jbe
adc
jne
(bad)
aas
inc
mov
jne
out
push
pop
ret
sbb
jmp
push
pop
sbb
xchg
loopne
add
fst
xchg
(bad)
dec
xchg
mov
sahf
inc
mov
out
adc
ror
cmp
jno
push
and
into
xchg
mov
ds
pop
aas
mov
pop
div
pop
inc
sbb
sub
jmp
call
adc
or
test
dec
add
xchg
enter
adc
push
and
add
mov
jbe
xchg
add
sub
call
mov
inc
or
push
lea
add
adc
mov
cwde
pop
mov
inc
mov
pop
sbb
add
arpl
add
sahf
xchg
rol
adc
xchg
js
lea
mov
jmp
push
fadd
jmp
and
mov
lea
mov
cmp
add
dec
mov
sbb
sbb
add
add
lahf
inc
or
inc
pop
call
xchg
pop
pop
pop
and
mov
xchg
clc
cld
and
pop
add
add
mov
sbb
add
add
movs
pop
add
sti
outs
jmp
mov
push
lock
je
popf
shl
pop
jmp
pop
adc
inc
lea
push
sar
sbb
add
dec
xchg
inc
add
ffree
add
inc
adc
(bad)
cmp
push
inc
test
sahf
icebp
(bad)
adc
enter
jae
adc
cmp
add
inc
sub
ret
div
mov
out
xchg
add
stos
or
dec
int3
out
ficom
adc
add
ja
add
xchg
push
inc
jmp
dec
or
jmp
adc
int
xchg
mov
cli
inc
call
stos
mov
push
sbb
bound
push
and
lea
add
lock
jae
mov
out
clc
(bad)
inc
pop
push
add
jne
retf
jle
imul
inc
or
inc
popf
fmul
inc
xchg
dec
mov
sahf
inc
or
jmp
aam
daa
mov
mov
imul
sahf
fild
call
mov
push
mov
pop
add
add
xchg
shl
inc
rcl
or
xor
lahf
inc
or
jb
ret
push
mov
mov
test
add
sbb
jecxz
pop
add
xchg
cdq
add
(bad)
and
mov
data16
pop
stc
(bad)
call
push
add
add
(bad)
adc
mov
push
popf
shl
jmp
daa
ror
data16
(bad)
clc
(bad)
call
rol
push
xchg
in
in
jmp
and
(bad)
adc
add
fst
call
test
invd
jb
sahf
inc
add
pop
lea
jmp
sar
push
inc
mov
movs
push
add
(bad)
clc
adc
lea
cmp
data16
dec
idiv
call
push
adc
adc
jae
les
push
xchg
leave
inc
cmp
and
mov
pop
add
pop
sti
mov
loop
jge
cmp
push
lea
xchg
stc
or
adc
adc
pop
jb
popf
aas
mov
out
mov
push
dec
test
dec
imul
pop
inc
mov
or
clc
jl
stos
call
push
xchg
jge
pop
sbb
mov
jg
add
sahf
inc
clc
(bad)
call
(bad)
pushf
shl
cld
add
imul
in
inc
sbb
sbb
xchg
cmp
add
shr
add
sub
jbe
dec
(bad)
loope
mov
inc
mov
clc
adc
push
add
pushf
inc
sbb
call
dec
add
adc
or
dec
lea
add
dec
add
and
call
ret
call
(bad)
aam
pop
add
pop
add
dec
or
xor
add
and
call
pop
sahf
outs
or
sahf
outs
str
inc
mov
pop
stc
orps
jnp
mov
cs
out
sbb
adc
push
or
add
cld
mov
popf
adc
dec
rcr
jae
popf
inc
cld
push
push
pop
mov
sub
cdq
jge
data16
add
xor
fdivr
sub
cmp
cmp
pop
call
(bad)
inc
sti
mov
fisubr
(bad)
push
fld
ret
test
sbb
add
rol
jmp
jge
xchg
push
cld
jbe
pop
sqrtps
dec
sbb
pop
jb
xchg
inc
add
jge
adc
jmp
inc
add
jge
cld
or
mov
lea
inc
sub
jbe
push
mov
pushf
add
jge
inc
clc
xor
xchg
inc
or
add
daa
or
or
jb
xchg
dec
add
push
lea
xchg
inc
sbb
xchg
push
add
push
lea
cwde
push
adc
pushf
or
or
mov
fwait
add
std
xchg
(bad)
call
fs
add
frstor
inc
sbb
pop
jb
xchg
dec
add
push
lea
(bad)
clc
or
adc
push
add
mov
adc
push
jge
push
or
ror
nop
add
(bad)
xor
cwde
inc
sbb
aam
and
jb
(bad)
push
add
push
(bad)
dec
add
call
push
add
jge
or
push
sti
sub
(bad)
sub
or
or
mov
adc
(bad)
shl
mov
add
jmp
push
or
jne
fs
sbb
es
add
sahf
mov
adc
jae
push
push
add
sahf
mov
adc
pop
lea
mov
lea
into
sub
inc
mov
mov
enter
(bad)
cmps
imul
add
(bad)
call
push
pop
and
cmp
pop
add
add
push
adc
add
sbb
xchg
jmp
mov
xchg
push
jnp
or
(bad)
push
std
xchg
inc
adc
outs
push
inc
aam
inc
fcom
add
sbb
ja
nop
stc
or
data16
test
stc
test
mov
jmp
sbb
mov
mov
lea
add
lea
into
sub
dec
mov
lea
enter
(bad)
push
imul
adc
call
push
pop
and
cmp
data16
jle
jmp
mov
adc
xchg
jmp
lea
xchg
dec
jnp
test
dec
sub
cld
inc
mov
lock
push
cmp
gs
(bad)
arpl
add
add
inc
add
push
push
add
mov
mov
lea
dec
mov
cs
lea
push
push
out
sti
call
(bad)
push
pop
and
cmp
gs
jle
jmp
cwde
inc
add
cmps
dec
add
push
mov
xchg
dec
jnp
push
shr
(bad)
xchg
dec
repz
add
(bad)
push
dec
(bad)
pop
arpl
mov
(bad)
mov
push
inc
or
adc
(bad)
fisub
inc
mov
adc
inc
mov
adc
push
cdq
lea
mov
mov
out
movntps
pop
sti
lea
push
mov
in
retf
jl
push
(bad)
jmp
or
shl
mov
xchg
rcr
pop
or
push
xchg
push
mov
adc
(bad)
lea
push
call
adc
jmp
or
add
dec
push
mov
jmp
call
stos
imul
mov
(bad)
inc
add
and
ficom
in
rcr
pop
adc
add
push
ret
pusha
mov
fsub
add
jecxz
add
lahf
sbb
sub
mov
ret
in
(bad)
adc
in
or
adc
ss
cwde
fld
int
pop
ret
xor
add
add
(bad)
mov
jne
test
xor
adc
adc
cmp
and
xor
push
mov
fisttp
adc
adc
pop
adc
push
lods
call
xor
add
cmc
mov
gs
sbb
ret
(bad)
jmp
add
mov
ja
movs
rol
jmp
retf
cmp
add
data16
(bad)
cmp
call
lea
int3
(bad)
dec
mov
mov
jne
enter
mov
popf
adc
call
aaa
or
inc
test
sbb
add
fadd
add
dec
push
test
mov
sbb
rol
and
and
and
lea
cmc
push
(bad)
dec
fcos
call
add
and
push
lea
add
fnstsw
mov
gs
add
loope
call
add
call
call
call
push
inc
mov
movs
sub
jmp
xchg
les
pop
adc
std
adc
(bad)
push
dec
mov
in
sar
notrack
fwait
mov
dec
adc
paddusw
(bad)
push
dec
mov
mov
imul
movs
jmp
call
pop
aaa
call
(bad)
inc
adc
and
call
push
dec
mov
gs
mov
ret
add
imul
jmp
fidiv
movs
scas
mov
imul
imul
dec
mov
mov
dec
mov
in
mov
cld
add
dec
fiadd
(bad)
fnsave
add
fiadd
jge
jbe
arpl
add
fiadd
mov
push
sti
add
mov
jo
fnsave
mov
jp
jmp
or
mov
popf
adc
inc
test
in
lea
add
popf
inc
mov
add
ror
add
sub
add
fcmovnb
add
mov
call
(bad)
into
lock
call
adc
add
dec
sti
pop
cmc
inc
mov
cld
sbb
mov
mov
out
imul
(bad)
adc
or
fstp
xchg
add
fcom
add
int
xchg
pop
add
(bad)
fadd
lea
xor
add
adc
add
pop
lea
jge
mov
dec
pop
add
mov
mov
pop
add
mov
cmps
xchg
pop
add
adc
add
add
pop
add
adc
push
push
cmp
call
push
xor
inc
mov
mov
fiadd
cmps
into
jbe
imul
push
call
(bad)
aad
push
std
xlat
mov
pop
pop
fiadd
mov
mov
sub
je
sahf
mov
sub
pop
sbb
add
jne
aas
mov
mov
mov
(bad)
in
mov
pop
mov
cmp
and
push
push
movs
pop
fiadd
or
dec
adc
xchg
adc
pop
push
aad
adc
jge
inc
fnstsw
push
jne
fiadd
int
jl
out
int3
pop
cmp
add
add
dec
fld
mov
in
jne
fadd
jbe
or
lea
xor
pop
or
dec
jns
mov
adc
inc
(bad)
nop
in
mov
(bad)
out
or
dec
or
or
pop
mov
and
lea
pop
test
jne
add
inc
(bad)
jne
fmul
rcl
add
xchg
les
inc
dec
jnp
sbb
(bad)
call
dec
xchg
adc
xor
mov
mov
mov
add
(bad)
in
xor
call
mov
test
loop
cmp
bound
mov
add
inc
add
dec
rol
rcpps
inc
mov
xchg
fwait
or
mov
or
adc
sub
mov
cwde
pop
mov
dec
jnp
add
(bad)
jae
jmp
fist
call
por
je
movs
jmp
add
sbb
mov
(bad)
jne
inc
mov
xor
dec
pop
pop
add
add
addr16
int3
imul
fdivrp
inc
adc
mov
pop
xor
test
ret
je
fdiv
jmp
push
ror
or
fldenv
cdq
mul
jns
add
loope
out
rcl
add
pop
addr16
(bad)
shr
add
cmp
and
inc
dec
or
call
dec
pop
and
lea
pop
(bad)
jne
inc
(bad)
jne
xlat
dec
in
jae
add
les
movs
push
jnp
dec
(bad)
dec
pop
dec
add
adc
add
inc
aas
push
call
test
push
movntps
pop
mov
cdq
jb
cmp
pop
add
out
(bad)
call
pop
imul
inc
or
rol
add
fldpi
sub
test
and
add
cwde
call
adc
or
mov
add
repnz
inc
adc
shr
rol
std
cmp
jb
stos
popw
push
inc
out
adc
add
cwde
repz
(bad)
jmp
in
jne
in
je
std
xlat
(bad)
call
mov
push
dec
loope
push
mov
push
mov
lea
pop
push
data16
xchg
data16
mov
pop
ret
fidiv
add
pop
or
push
jbe
in
fild
pop
iret
push
mov
pop
add
adc
sahf
xor
push
cmps
pop
(bad)
mov
cmc
jne
add
rcr
xchg
adc
ror
mov
sub
inc
fldcw
cdq
add
add
clc
cmp
push
jno
gs
fadd
(bad)
inc
or
xlat
and
adc
mov
xchg
in
sbb
popa
push
mov
adc
outs
fucomip
or
int3
ins
and
adc
adc
shl
cmp
outs
sub
jne
ins
add
push
add
sbb
add
push
lea
out
jno
mov
das
(bad)
shr
(bad)
jne
addr16
mov
add
fstp
pop
movs
aad
add
or
gs
(bad)
add
pop
(bad)
ss
jno
add
ltr
jno
add
pop
ret
sub
aad
add
jno
mov
fiadd
(bad)
retf
inc
or
add
adc
ret
out
test
mov
sbb
mov
mov
jmp
cmp
inc
add
mov
xchg
add
adc
mov
sar
fisttp
fdiv
data16
add
aad
dec
sar
inc
adc
push
out
sbb
adc
adc
mov
mov
in
xchg
add
inc
cmc
push
push
aaa
adc
lea
pop
je
mov
(bad)
call
jbe
push
ret
gs
add
adc
fisub
in
sahf
jmp
mov
xchg
pop
or
daa
popa
cwde
pop
add
mov
push
and
in
daa
lea
mov
add
icebp
push
cmp
inc
add
addr16
call
adc
loopne
imul
sti
jmp
and
jmp
and
dec
mov
mov
lea
shl
adc
jge
mov
mov
popf
push
add
mov
leave
(bad)
pop
sti
imul
add
imul
je
lahf
aas
jmp
lahf
por
and
mov
fld
fstp
jo
or
lldt
lahf
lock
add
xor
out
nop
adc
imul
or
mov
mov
inc
or
shl
cmp
call
sub
call
mov
data16
xchg
data16
data16
(bad)
push
mov
mov
frstor
je
mov
xor
jne
mov
or
sahf
inc
or
rcl
xchg
inc
add
push
enter
mov
xchg
in
adc
lea
gs
pop
or
pop
movntps
mov
mul
inc
cld
cmps
std
mov
mov
mov
xchg
shl
clc
mov
sbb
mov
stos
pusha
add
cdq
mul
cdq
inc
cld
jmp
adc
add
add
xchg
push
or
push
adc
mov
loop
jne
lahf
fisttp
and
add
xchg
lahf
inc
cld
in
pop
add
adc
lock
bound
ja
xchg
push
aas
jmp
mov
(bad)
cmp
sbb
fadd
popf
mov
jo
dec
cdq
sbb
xlat
sldt
add
mov
add
outs
sbb
add
jecxz
in
push
adc
imul
sbb
mov
mov
call
xchg
test
adc
and
mov
xor
add
cmp
add
ltr
adc
sahf
xchg
xor
add
je
stos
or
and
jne
mov
or
cdq
inc
or
fcomp
lea
add
pop
inc
or
lea
push
xchg
or
xchg
and
and
mov
stc
mov
push
jmp
cwde
ins
imul
add
(bad)
inc
popf
shl
je
add
rcl
sar
add
repz
pop
mov
ins
adc
loopne
(bad)
jne
and
rcl
add
jbe
dec
adc
je
movs
xor
add
repz
pushw
dec
pushf
div
push
jmp
sahf
push
jmp
sar
and
add
add
dec
sahf
inc
or
outs
add
daa
pop
pop
in
sldt
xor
mov
stos
stos
ins
sti
jmp
sbb
jne
jmp
pop
call
push
pop
or
repz
adc
ror
mov
and
jge
push
sub
add
fbstp
add
dec
fwait
add
dec
(bad)
add
push
push
sbb
fwait
dec
mov
mov
sub
ror
jmp
xchg
ror
dec
sbb
adc
push
xchg
push
mov
loop
dec
sbb
rol
mov
push
jmp
mov
(bad)
call
pop
mov
or
mov
mov
adc
je
outs
or
or
int3
cmp
dec
(bad)
mov
shr
shl
mov
mov
iret
and
jae
cmc
add
sbb
or
sbb
add
add
xchg
aam
call
adc
(bad)
push
jae
or
add
fwait
clc
mov
inc
sub
cmp
mov
clc
jmp
and
movs
sub
inc
push
xor
add
adc
(bad)
inc
xor
stos
in
push
inc
adc
push
mov
sti
(bad)
cmp
je
add
adc
add
pop
adc
les
add
jmp
push
push
ror
and
xor
adc
add
xchg
dec
or
push
movntps
dec
and
(bad)
jbe
xchg
shr
jmp
add
add
xchg
test
add
test
add
fadd
xchg
cwde
pop
adc
ins
jns
mov
add
sub
jle
(bad)
pushf
xor
or
mov
data16
adc
jmp
mov
stos
jmp
mov
dec
ror
imul
add
mov
(bad)
dec
fs
stos
jmp
gs
add
xchg
jne
out
int
(bad)
sub
inc
imul
xor
mov
cmp
sbb
lea
dec
call
(bad)
push
pop
mov
pop
jge
jne
in
push
add
inc
cld
dec
cdq
dec
adc
add
shr
inc
dec
cmp
(bad)
dec
ror
and
xchg
jmp
mov
fld
jle
cwde
jbe
push
inc
jmp
nop
(bad)
push
dec
pop
(bad)
cmp
lock
push
lds
(bad)
jp
mov
nop
rcl
adc
rcl
(bad)
fdivrp
jmp
adc
add
mov
(bad)
jmp
in
(bad)
push
inc
sbb
add
inc
cld
push
adc
add
imul
fmul
cmp
adc
mov
mov
call
into
push
sub
stos
cli
pushf
xor
and
(bad)
cmp
sbb
int
cmp
add
loopne
mov
lea
push
loope
ret
xor
mov
jne
pop
add
loope
out
sbb
out
sahf
fdivr
call
pop
or
dec
jns
sbb
and
add
popf
inc
add
dec
xlat
call
sahf
xor
xlat
push
cwde
dec
scas
call
add
and
lea
mov
sbb
push
data16
sub
xchg
leave
ja
es
imul
push
xor
(bad)
jmp
out
popf
mov
jne
mov
mov
sbb
sbb
call
inc
(bad)
in
push
out
jmp
cwde
(bad)
pusha
add
dec
pop
add
cwde
adc
mov
add
das
fild
dec
pop
mov
out
mov
call
mov
test
test
(bad)
(bad)
jmp
add
fst
fucomi
(bad)
cwde
mov
sar
mov
xlat
cwde
mov
clc
mov
or
rol
add
fld
jae
scas
adc
call
femms
pop
add
lea
(bad)
cmp
add
push
lods
add
add
(bad)
fimul
dec
push
mov
cmps
or
into
(bad)
iret
clc
jmp
cld
call
out
add
pop
mov
add
(bad)
aad
add
adc
(bad)
dec
out
mov
jmp
xor
test
jmp
jne
or
sbb
dec
aas
imul
adc
sbb
call
cld
dec
adc
add
(bad)
ja
lods
xlat
or
adc
inc
adc
add
cwde
imul
into
jae
mov
mov
(bad)
stos
call
cdq
int
adc
cld
jmp
adc
imul
mov
push
push
jns
pushf
adc
sub
jmp
call
mov
(bad)
push
pop
add
add
loopne
(bad)
sub
xor
fs
adc
or
jge
(bad)
lea
std
jmp
pusha
dec
adc
add
popa
enter
add
mov
mov
inc
stos
jecxz
jmp
inc
cld
jmp
adc
add
sbb
int
mov
push
inc
adc
cwde
not
push
sbb
add
sbb
dec
call
daa
push
pop
mov
mov
xchg
and
pop
psubsb
(bad)
call
dec
sti
add
dec
movntps
in
(bad)
jl
mov
loop
xor
pop
pop
enter
psubsb
(bad)
call
mov
add
loop
mov
inc
mov
jbe
jae
pop
les
ss
add
imul
and
(bad)
jne
xchg
mov
jmp
push
mov
std
mov
mov
adc
push
mov
add
mov
add
mov
(bad)
inc
sbb
xor
(bad)
dec
mov
sbb
(bad)
push
in
out
(bad)
jmp
add
mov
push
mov
loopne
or
inc
mov
rol
pop
add
push
push
mulps
xchg
adc
mov
cld
jmp
idiv
mov
sbb
cld
jmp
adc
inc
add
mov
std
call
std
stos
in
cmp
lods
(bad)
call
cmp
sub
xchg
leave
ja
sub
imul
out
fst
add
xlat
or
sub
neg
jae
daa
adc
mov
in
sbb
push
dec
mov
inc
add
shr
(bad)
mov
(bad)
dec
and
loopne
je
fld
add
pop
push
mov
jne
in
popf
mov
or
stos
fmul
sahf
cmp
mov
cwde
pop
and
mov
(bad)
jg
mov
(bad)
push
test
(bad)
jno
adc
inc
add
add
push
sar
(bad)
mov
cmp
mov
call
jae
es
jmp
push
clc
cmp
mov
add
inc
loopne
inc
rcr
or
repz
pop
mov
(bad)
jne
xchg
gs
lea
add
movs
pop
mov
call
add
out
or
pop
adc
nop
mov
add
call
mov
push
push
xor
(bad)
push
cli
gs
push
mov
add
pop
add
or
test
out
inc
pusha
clc
jae
stos
jnp
cli
dec
fiadd
mov
aas
push
add
mov
cmc
and
into
add
and
adc
mov
push
cmp
jle
push
jnp
mov
push
adc
std
jmp
and
cmp
push
out
test
inc
or
and
push
retf
stos
popa
pop
call
xor
push
call
add
xchg
aad
inc
add
adc
clc
mov
cmp
mov
adc
out
jns
(bad)
push
mov
mov
and
psubsb
push
sti
add
jl
lea
dec
mov
sbb
adc
in
pop
cdq
xor
xor
lahf
sbb
push
jl
sbb
or
mov
push
jnp
add
(bad)
ins
jnp
or
or
adc
cmp
and
mov
(bad)
cmc
stos
enter
fdiv
sar
inc
int
shl
and
movs
retf
out
push
fs
push
je
jne
jmp
jp
inc
cld
nop
adc
add
orps
inc
fist
add
std
out
pushf
adc
push
stos
bound
mov
mov
inc
push
add
pop
mov
adc
pusha
and
mov
cmp
gs
lea
adc
adc
cmp
xor
mov
fadd
jne
fsub
call
dec
inc
call
sub
xchg
leave
ja
push
leave
imul
stc
(bad)
push
xor
(bad)
cmp
pop
out
popf
mov
mov
stos
pop
sbb
adc
in
retf
adc
int3
push
cmc
inc
cmp
add
push
fild
dec
adc
pop
push
mov
ret
ja
mov
out
mov
jmp
add
jmp
cld
sbb
mov
stos
(bad)
cmp
jbe
xchg
push
sti
add
mov
call
(bad)
aaa
call
push
push
out
ror
test
inc
or
xor
out
xchg
adc
adc
pop
leave
iret
aaa
call
push
push
add
out
sub
mov
dec
adc
jne
test
ins
adc
add
loop
pop
and
cmp
ret
xchg
jne
jmp
mov
pop
add
fcmove
add
inc
jmp
pop
add
ret
fcom
scas
ror
imul
or
add
xor
out
xchg
adc
adc
leave
dec
cmp
push
push
fst
inc
mov
sub
push
cdq
aaa
hlt
pop
div
je
(bad)
shl
sub
sub
ret
mov
jbe
xor
lea
adc
pop
adc
rcr
xor
ret
(bad)
inc
adc
add
mov
lea
mov
jbe
cmp
call
pop
cmc
jnp
rcl
push
pop
adc
mov
int3
ret
mov
popa
adc
sar
and
mov
cwde
jge
pop
bound
jmp
ror
add
dec
xchg
inc
or
add
int3
jmp
xchg
(bad)
push
out
pop
jne
dec
jmp
shr
scas
sbb
ret
aaa
xor
out
mov
pop
xor
cmp
jbe
push
pop
mov
sub
icebp
sahf
pop
add
fsubr
add
add
(bad)
into
loop
sbb
jmp
jmp
pop
add
mov
sbb
xor
iret
(bad)
pop
pop
ret
push
lahf
pop
jg
sbb
sub
push
add
test
xchg
jge
or
daa
mov
iret
les
or
xchg
inc
or
retf
jmp
(bad)
add
mov
inc
lock
dec
jmp
dec
sti
(bad)
inc
aad
mov
dec
mov
fmul
dec
rol
stos
fmul
mov
xor
(bad)
push
adc
shr
mov
fmul
jl
sbb
dec
xor
rcl
mov
xlat
mov
add
int
mov
xlat
mov
stos
inc
jo
int
mov
xlat
mov
pop
xchg
mov
int
push
call
pop
cmps
cmps
add
adc
add
or
aad
stos
fsubr
not
add
dec
test
add
sbb
test
add
lea
add
jl
lods
mov
fmul
fcom
call
cmps
xchg
sbb
sbb
push
add
xchg
xchg
sbb
sbb
push
add
xchg
xchg
and
or
adc
and
int
lea
gs
cmp
adc
lea
add
popf
gs
add
ins
fdivr
mov
jge
add
adc
mov
xor
add
adc
mov
xor
mov
mov
fsub
lea
adc
mov
mov
sbb
pop
cmp
pop
into
dec
mov
jl
push
push
xchg
cmp
sbb
mov
lahf
inc
adc
add
push
idiv
push
pop
sti
test
add
fst
jmp
mov
add
pop
test
xchg
pop
mul
jbe
push
pop
or
ins
psubsb
pop
add
inc
push
(bad)
ja
sti
test
sub
mov
ds
or
dec
cwde
pop
repnz
push
adc
test
add
pusha
sbb
rol
mov
ds
xchg
pop
mul
jnp
push
stos
push
add
fst
push
add
fisttp
jmp
add
inc
leave
fwait
shl
adc
icebp
jmp
jbe
test
add
cmp
cwde
pop
mov
xor
add
or
mov
das
shl
out
sub
add
add
ja
mov
psubsb
lock
call
pop
jnp
fidivr
mov
cmc
sbb
or
push
pop
mov
loope
gs
sbb
call
inc
cmp
add
xlat
add
add
push
mov
add
loope
dec
mov
movntps
add
jmp
mov
test
and
(bad)
mov
add
(bad)
cli
retf
add
mov
mov
cwde
mov
in
clc
mov
pop
sti
ja
aam
or
pop
or
xor
call
pop
test
jbe
cmc
fcomip
inc
add
pop
or
sub
pop
or
pop
adc
add
or
popf
add
ret
retf
mul
clc
mov
sti
ja
lahf
inc
or
fstp
lea
push
adc
mov
add
in
jbe
out
jmp
ins
adc
add
mov
jmp
jmp
call
pop
(bad)
push
movntps
xor
xchg
jecxz
mov
mov
cdq
dec
adc
shl
movs
pop
out
jmp
jmp
and
call
mov
or
ret
out
mov
out
mov
jmp
pop
pop
mov
pop
mov
add
pushf
shl
or
mov
dec
adc
push
scas
cmp
xchg
adc
or
pop
add
les
jo
inc
repz
inc
(bad)
push
mov
xchg
in
sbb
inc
push
mov
ins
out
jmp
dec
or
add
xor
dec
movs
jmp
pop
jns
jne
jne
stc
jmp
inc
clc
and
jae
mov
out
je
(bad)
out
lea
mov
cs
cld
and
push
call
(bad)
call
pop
jmp
aaa
out
dec
sahf
ja
mov
inc
mov
into
in
push
cmp
clc
add
cmps
inc
jge
movs
out
mov
lea
clc
inc
stc
stos
out
pop
mov
pop
clc
(bad)
cmp
out
call
push
push
test
jne
mov
pushf
inc
hlt
mov
sti
je
call
psubsb
add
xor
(bad)
ja
pushf
lock
add
adc
maxps
add
imul
(bad)
inc
into
mov
xchg
gs
dec
sahf
inc
in
stos
jne
add
es
jne
std
movs
dec
adc
jmp
pushf
jge
imul
cmps
pop
add
adc
lock
inc
stos
sub
or
loope
add
adc
mov
add
sbb
mov
pushf
in
push
add
(bad)
test
fsub
leave
push
add
cmp
js
mov
cdq
inc
or
adc
cmp
sar
jmp
jne
dec
pop
mov
inc
pop
ret
adc
mov
sub
hlt
test
sbb
inc
mov
xor
pop
add
adc
jne
es
or
xor
inc
mov
adc
add
or
addr16
sbb
pop
or
stc
pop
mov
pop
pop
cmp
push
mov
pushf
jge
imul
je
cmp
mov
sti
cmc
dec
jmp
enter
push
movs
push
jbe
dec
sti
and
icebp
cmps
push
or
push
cld
cmp
ja
jmp
jnp
jmp
mov
push
inc
sti
mov
test
cmp
(bad)
call
push
cmp
push
jne
not
push
jne
(bad)
add
cmps
fiadd
(bad)
int
or
add
jg
popf
cli
rcr
popf
adc
xor
dec
gs
mov
in
inc
adc
jmp
push
cdq
(bad)
call
sahf
shl
cmp
push
jne
ja
push
movs
cmp
add
and
add
nop
jle
fld
add
and
mov
clc
add
pop
lahf
(bad)
jmp
xchg
rcr
pop
ret
adc
pop
call
add
rol
inc
or
inc
mov
inc
test
mov
cmp
pop
cmp
push
nop
rol
mov
test
jge
clc
jp
dec
or
das
sub
mov
dec
add
aas
out
pop
adc
adc
shl
or
dec
pop
pop
xchg
iret
pop
add
pop
adc
mov
fnsave
push
sbb
shl
mov
adc
mov
fidiv
sub
and
push
push
out
or
fdivr
test
arpl
pop
push
(bad)
icebp
loopne
sub
pop
pop
push
cwde
cmp
push
mov
mov
in
inc
dec
(bad)
or
xchg
push
add
mov
inc
push
adc
ja
mov
add
fsubr
jmp
int
push
xor
inc
fst
ret
push
lahf
fistp
call
sbb
mov
punpckhdq
es
pop
out
jae
add
jmp
fs
xor
loop
lock
add
in
jmp
aam
fisttp
jo
mov
push
call
sub
xor
dec
or
ins
adc
add
mov
fld
or
test
pop
xor
and
rol
imul
push
adc
idiv
adc
or
xchg
sbb
je
lock
ret
and
inc
cmp
mov
(bad)
dec
and
dec
add
std
lock
cmc
jmp
or
aad
jge
lods
(bad)
jne
jmp
je
xchg
call
mov
jns
data16
es
sbb
ret
mov
in
stos
mov
push
inc
out
sbb
in
add
js
lea
add
add
stc
cmp
mov
lds
xor
cmp
je
add
add
push
mov
in
sbb
pop
in
pop
shr
out
shl
mov
in
add
mov
xchg
jle
sbb
inc
jnp
jno
mov
push
jno
adc
popa
and
add
and
sbb
jmp
mov
mov
push
(bad)
or
jg
(bad)
call
aad
inc
call
call
ror
inc
pop
xchg
fs
sbb
je
adc
sbb
inc
mov
cmc
test
add
pop
mov
push
xchg
mov
xor
mov
out
std
jecxz
lea
cmp
call
mov
sbb
fs
pop
pop
jmp
in
lahf
or
push
stos
test
adc
sbb
mov
sbb
loopne
adc
jmp
sti
in
popf
adc
mov
pop
add
inc
push
add
sub
test
(bad)
jne
sti
and
pop
adc
lock
dec
jmp
nop
fmul
clc
cmps
dec
jecxz
push
mov
mov
push
out
push
loop
lea
jecxz
jne
sti
adc
and
pop
pop
push
(bad)
pop
leave
(bad)
sbb
mov
mov
jne
cli
sti
ror
mov
push
shl
add
es
add
ror
sbb
or
jecxz
pop
add
cdq
xlat
imul
pop
cli
mov
pop
adc
call
mov
enter
add
or
adc
dec
dec
fwait
dec
adc
retf
add
add
and
push
aad
jns
or
add
call
(bad)
pop
cmp
add
xor
out
mov
mov
or
mov
movs
call
cmp
cmp
and
mov
adc
cmp
gs
(bad)
mov
or
call
mov
clc
out
add
(bad)
dec
sub
mov
jmp
sbb
(bad)
jne
mov
adc
or
dec
jnp
lock
dec
xor
(bad)
xor
dec
push
call
pop
inc
mov
push
cmc
test
cli
sbb
leave
xor
test
cmps
adc
push
(bad)
pop
idiv
mov
mov
jbe
imul
push
shl
jmp
cmp
add
cwde
pop
and
cmc
pop
icebp
dec
xchg
inc
and
jmp
and
jmp
or
pop
add
or
mov
inc
rol
fdivr
fistp
popf
(bad)
stc
mov
cmp
jmp
popf
sahf
or
jns
call
fist
xchg
shl
pop
ror
dec
pop
dec
dec
pop
xor
shl
jae
(bad)
sbb
push
(bad)
pop
jmp
push
fmul
sbb
call
mov
je
add
sahf
add
cmp
loope
add
adc
add
(bad)
sub
mov
je
popf
xor
mov
pop
mov
es
cmp
bound
call
bound
mov
mov
in
push
adc
or
jbe
jbe
xchg
mov
inc
add
adc
push
addr16
(bad)
call
jmp
dec
arpl
mov
xor
inc
sbb
cli
inc
add
div
pop
cmp
mov
add
repnz
cmp
(bad)
add
dec
mov
push
sub
in
adc
pop
ret
pop
adc
push
jmp
or
(bad)
call
imul
or
dec
jns
cdq
popa
pop
mov
call
adc
mov
call
or
shl
psubsb
sar
fistp
dec
pusha
call
push
call
pop
inc
mov
mov
adc
add
xor
add
inc
movs
sahf
inc
cld
in
sbb
fwait
dec
sbb
or
fwait
bnd
sbb
push
adc
mov
sbb
pop
mov
mov
or
add
repz
arpl
mov
out
or
inc
add
inc
cmp
int3
(bad)
jmp
add
add
dec
adc
lahf
mov
cdq
inc
hlt
xchg
jge
adc
(bad)
call
dec
pop
mov
mov
or
popa
int3
dec
(bad)
(bad)
(bad)
fucomp
je
push
dec
pop
mov
fs
jmp
ins
or
movs
pop
int3
jmp
add
inc
adc
test
xor
xchg
aas
add
ror
mov
sti
and
jmp
dec
stc
xchg
inc
or
xchg
bnd
jns
call
xchg
or
sbb
stos
jmp
data16
repz
jmp
and
mov
add
push
sti
mov
or
lea
jmp
inc
popf
stc
enter
mov
cwde
out
call
adc
je
push
pop
sti
mov
cli
mov
sub
add
pop
mov
cdq
inc
or
push
or
push
lahf
std
jmp
popf
pop
in
add
movs
adc
add
sbb
mov
mov
or
pop
add
cld
and
inc
push
mov
or
push
inc
inc
rol
mov
xchg
add
stc
in
popf
adc
mov
pop
mov
std
sub
inc
push
push
(bad)
jmp
cmp
imul
rcl
je
sub
sti
jmp
sahf
je
add
cwde
inc
adc
push
div
sbb
add
inc
cld
(bad)
and
inc
test
fdivr
jne
jmp
or
cmps
add
int
pop
or
out
call
outs
out
mov
add
in
fist
repz
stos
(bad)
call
mov
js
xor
cmp
ret
adc
dec
das
push
mov
out
jmp
mov
sbb
mov
pop
mov
ffreep
ret
push
mov
in
jbe
xor
out
cmp
add
add
scas
hlt
xor
inc
mov
nop
inc
adc
mov
fld
push
push
sub
push
sahf
push
lea
outs
push
cmp
stos
les
jmp
or
jne
das
(bad)
or
scas
mov
add
or
push
(bad)
sub
ja
push
enter
push
call
test
add
in
xor
mov
(bad)
out
or
push
sahf
jmp
push
lea
out
mov
(bad)
push
mov
and
(bad)
out
add
inc
int3
out
mov
sub
leave
loope
(bad)
jne
cs
popf
stos
cmp
cmp
xchg
push
push
aad
js
popf
cs
ror
add
cmps
and
outs
pop
mov
mov
(bad)
cmp
les
push
fmul
ret
jne
dec
mov
add
leave
call
push
inc
inc
sbb
sub
mov
cmp
cmp
les
push
fidivr
retf
and
sub
out
ja
inc
pop
mov
add
pop
or
mov
sub
leave
es
shl
in
mov
add
popf
mov
shl
adc
cld
hlt
jmp
inc
push
call
mov
mov
(bad)
gs
cmp
mov
jnp
cwde
adc
inc
push
mov
add
mov
mov
sub
jge
sub
adc
cmp
ret
(bad)
dec
loopne
jbe
jmp
sbb
adc
inc
jge
dec
jmp
sub
mov
push
retf
out
lea
leave
out
fs
pop
test
add
add
push
call
sbb
nop
sbb
call
push
lahf
inc
lock
and
push
sbb
out
dec
add
dec
int
in
mov
lods
push
mov
or
mov
pop
inc
clc
fdivr
sbb
adc
lea
mov
(bad)
(bad)
jp
inc
clc
adc
add
repz
mov
sbb
push
xchg
jl
lea
mov
mov
mov
sahf
or
in
lahf
dec
in
(bad)
fsub
call
rcl
and
stos
or
xchg
in
lea
push
call
xchg
mov
mov
mov
jmp
pop
lods
out
call
(bad)
call
repnz
sbb
or
cmp
jmp
mov
or
cmps
imul
push
inc
lock
mov
pop
inc
or
pop
ret
lds
push
out
mov
mov
test
popf
je
aam
bnd
mov
add
xor
lea
push
mov
inc
pushf
cmps
stos
xor
aad
jo
pop
call
mov
or
sbb
sbb
push
sbb
or
xlat
push
mov
loopne
mov
lahf
inc
adc
scas
or
movs
cmp
xor
jne
sahf
inc
in
or
call
enter
pusha
and
cmp
movs
ror
dec
mov
inc
add
rcr
pop
add
push
mov
sbb
mov
mov
dec
or
fisttp
call
push
push
je
push
stos
push
jmp
add
nop
jp
popf
movs
jnp
cdq
cmp
(bad)
mov
shl
mov
add
cli
mov
jge
lea
jae
lahf
inc
or
rcl
mov
out
sbb
fisttp
lea
sub
test
lods
add
or
jne
lea
mov
lahf
dec
pop
mov
cdq
inc
or
mov
adc
mov
mov
inc
add
retf
add
sahf
clc
sub
adc
add
movs
dec
aam
and
call
movs
inc
aam
movs
dec
lods
mov
retf
mov
lea
(bad)
out
adc
or
(bad)
push
push
cmc
xor
inc
sbb
dec
mov
out
div
cwde
push
add
rcl
mov
inc
sbb
pop
je
xchg
or
jne
xchg
pop
jmp
xchg
pop
or
push
cmp
iret
push
mov
inc
add
popf
(bad)
call
adc
or
in
mov
xchg
jns
add
popf
mov
jne
inc
popf
clc
call
out
add
popf
add
mov
push
inc
sub
popf
inc
add
fadd
push
cmc
sub
add
dec
mov
jns
sbb
add
(bad)
dec
add
mov
aad
add
cmp
push
push
sub
rcl
adc
mov
mov
pushf
aas
add
shr
add
add
sbb
call
iret
add
popf
sbb
push
or
sub
pushf
inc
or
pop
mov
sahf
pop
call
pop
sbb
push
movs
arpl
dec
cmp
mov
pushf
lock
add
mov
sahf
test
inc
inc
cmp
mov
add
rol
xchg
pop
mov
cmps
push
mov
lea
xchg
outs
push
push
add
mov
mov
cmp
mov
(bad)
call
(bad)
xchg
and
ds
jae
loope
jmp
psubusb
add
pop
mov
retf
push
add
(bad)
sub
or
loopne
pop
loop
push
sahf
jne
jmp
sub
push
cdq
mov
mov
xchg
push
pop
(bad)
push
inc
(bad)
clc
jmp
sub
xchg
xchg
jae
call
mov
adc
shr
in
push
(bad)
push
stos
movs
push
(bad)
adc
add
adc
adc
retf
(bad)
sub
adc
adc
jae
mov
in
sar
jmp
add
sub
push
xor
jecxz
fcomp
sub
adc
mov
ins
je
stos
sub
jle
xchg
dec
adc
call
or
sar
push
hlt
cmp
std
jmp
xchg
mov
mov
xor
sub
leave
pop
adc
push
inc
sti
sar
sub
call
mov
push
call
add
(bad)
push
sub
mov
stc
mov
lods
std
jmp
xchg
test
sbb
cmp
int3
stos
sub
retf
cld
data16
lea
dec
jmp
add
leave
rcl
add
and
add
and
mov
mov
push
push
enter
(bad)
inc
mov
push
push
jne
clc
call
add
mov
cwde
je
inc
sbb
add
pop
call
je
in
(bad)
dec
inc
adc
push
sbb
dec
mov
add
cmp
add
adc
pop
stos
sub
lea
test
mov
sub
(bad)
and
mov
ret
mov
les
rol
add
cdq
inc
adc
push
mov
xchg
cmp
xor
xchg
mov
jl
mov
test
sbb
xor
mov
add
pop
fistp
mov
lea
(bad)
sub
ret
jno
lea
xor
dec
sbb
jne
lea
sbb
cmc
adc
mov
pop
retf
ret
lds
test
xor
mov
int
pop
leave
mov
div
pop
and
jae
scas
dec
sub
push
sbb
repnz
jne
les
popf
pop
push
aad
ja
lea
pop
leave
lea
mov
xchg
jp
pop
xchg
sub
add
int3
into
call
fidiv
push
cwde
int3
cmps
call
test
inc
or
xor
jne
das
std
mov
sub
add
adc
jnp
sub
cmp
je
inc
sbb
adc
cmps
push
jne
sbb
add
cmps
add
(bad)
jbe
push
int3
push
mov
pop
xchg
xchg
add
or
jmp
jl
cmp
mov
push
je
(bad)
pop
jmp
(bad)
dec
enter
js
push
je
xchg
push
mov
lea
push
mov
add
or
xchg
add
adc
add
adc
dec
or
xchg
mov
mov
fadd
and
mov
jbe
jle
fcom
add
push
les
mov
or
(bad)
add
inc
ficom
mov
sub
mov
adc
add
add
adc
add
int
lea
add
or
mov
xchg
add
add
push
add
add
sub
cmp
jne
push
pop
cmp
loopne
mov
xchg
js
popf
xchg
adc
and
mov
jecxz
sub
movs
and
stos
or
(bad)
sub
push
add
adc
add
nop
sub
mov
xchg
ja
pop
test
mov
jne
cmps
sbb
jne
dec
inc
sub
dec
inc
sub
sbb
add
add
popf
push
mov
ffreep
inc
mov
mov
jle
(bad)
or
dec
(bad)
jmp
inc
add
xchg
js
int
adc
loopne
les
sbb
add
add
lea
adc
or
test
mov
sbb
mov
iret
jbe
pop
mov
(bad)
jmp
js
sbb
xchg
fadd
jmp
sti
les
add
mov
call
mov
add
sbb
les
sbb
inc
test
adc
(bad)
adc
jmp
mov
out
dec
and
push
jne
stos
add
or
push
jnp
sbb
or
adc
or
mov
adc
mov
(bad)
adc
mov
jg
dec
adc
movs
mov
mov
adc
(bad)
adc
add
sbb
push
jne
jp
or
push
mov
push
rol
sbb
pop
ret
push
jne
lods
add
call
je
and
mov
add
jp
lea
cmp
and
mov
rcl
sub
adc
adc
stos
mov
dec
add
(bad)
sub
in
stos
add
fs
dec
cmp
aam
jmp
adc
inc
adc
cld
xchg
add
pushf
or
int3
push
call
add
fcomp
mov
in
les
adc
inc
test
mov
gs
add
push
or
push
jmp
sahf
(bad)
imul
xor
inc
test
mov
shr
jbe
sar
push
rcl
jne
add
dec
adc
cmp
and
lea
add
stos
jmp
or
jne
or
mov
add
sahf
dec
adc
push
or
aaa
add
out
dec
add
push
int
xor
cmp
jbe
push
lds
mov
jmp
push
popf
pop
add
fdivr
add
movs
jmp
clc
out
sbb
inc
push
jne
popf
(bad)
out
push
add
xor
push
mov
les
mov
xchg
dec
or
rol
lea
dec
call
xchg
shl
mov
mov
jns
sub
push
ret
push
dec
aam
rcl
call
mov
jge
push
movs
jmp
mov
(bad)
inc
add
lds
int
push
xor
push
faddp
lea
mov
push
int3
or
push
xor
jne
mov
push
call
(bad)
or
push
sbb
xor
jne
out
push
(bad)
jmp
jne
mov
cmp
or
push
cmp
sbb
add
adc
add
pop
mov
add
cmp
std
jb
inc
mov
(bad)
dec
or
dec
push
xor
xchg
in
xchg
push
call
push
push
xor
int3
jnp
and
add
jl
or
xor
add
push
mov
add
call
sub
jb
jl
add
adc
(bad)
adc
jle
push
push
mov
sbb
pop
pop
dec
adc
push
xchg
sbb
in
adc
js
int
push
push
inc
shl
jne
jnp
or
cmp
mov
jmp
mov
lea
mov
js
sub
sar
mov
jp
call
mov
mov
jp
call
sbb
inc
or
adc
or
out
mov
ja
jmp
or
inc
movs
mov
mov
sbb
add
mov
jne
add
push
daa
jne
xor
(bad)
jno
loopne
call
pop
sbb
push
pop
(bad)
cmp
add
jbe
jmp
xchg
(bad)
mov
nop
inc
add
mov
sbb
add
sbb
add
test
dec
test
fimul
adc
ret
nop
ja
cmp
push
push
or
or
adc
cmps
aam
mov
mov
ja
lock
fimul
lods
fcompp
mov
or
or
repnz
inc
icebp
or
int
jge
cmp
call
je
or
ret
ret
mov
push
pop
sbb
(bad)
jmp
popf
les
pop
or
push
mov
inc
or
add
sbb
add
mov
add
mov
js
sbb
mov
mov
jge
test
out
mov
mov
jns
call
call
or
(bad)
aas
or
(bad)
jne
ja
or
push
(bad)
fs
fnstsw
call
pop
mov
push
add
push
dec
call
mov
adc
lock
jne
movs
scas
stos
add
call
stos
add
mov
stos
mov
out
push
aad
jp
dec
sbb
ror
jne
nop
fs
sbb
adc
ss
jae
add
adc
ret
adc
push
mov
nop
jmp
push
ret
push
jmp
stc
mov
sbb
int
mov
jp
in
inc
mov
mov
and
hlt
es
xor
inc
clc
jbe
mov
shl
clc
test
add
mov
or
shl
pop
leave
unpckhps
jmp
jmp
add
pop
ret
sub
mov
(bad)
mov
hlt
xchg
aad
cmp
mov
inc
sbb
std
inc
in
rcl
push
stos
test
call
data16
jmp
in
aam
inc
(bad)
mov
or
mov
or
in
test
shl
mov
add
cmp
jmp
aaa
sbb
inc
cmp
dec
sbb
dec
jo
in
cmc
fistp
je
js
in
push
sbb
or
in
or
add
mov
jmp
aaa
dec
jmp
jmp
jne
jo
hlt
add
push
aam
call
inc
out
mov
fild
fsubp
mov
outs
dec
or
or
call
sbb
mov
aaa
dec
cdq
or
in
xchg
jbe
in
nop
sbb
in
nop
sbb
hlt
les
(bad)
call
adc
dec
add
movs
xchg
mov
cmp
jmp
push
mov
push
push
punpcklbw
fldl2t
cmp
(bad)
(bad)
(bad)
push
call
fst
push
mov
add
push
push
or
add
add
mov
mov
ins
adc
add
mov
push
call
sbb
inc
in
nop
sbb
mov
xor
and
mov
rcl
sub
movs
mov
pop
pop
push
push
xchg
mov
mov
sbb
inc
leave
mov
std
jae
mov
mov
das
push
add
imul
stc
(bad)
inc
add
adc
add
lea
xchg
jmp
mov
mov
das
push
or
xchg
rol
dec
adc
push
out
mov
mov
lea
test
movs
pop
lock
xchg
fdiv
xchg
push
sbb
sbb
jae
add
cmove
inc
mov
or
dec
leave
ins
inc
mov
add
jne
mov
cld
call
add
or
cmp
or
lahf
stc
je
inc
push
inc
pop
(bad)
jmp
adc
mov
jmp
mov
dec
mov
add
popf
inc
sbb
jae
xchg
inc
clc
mov
out
and
add
mov
cwde
jmp
shl
pop
or
int
inc
or
pop
mov
popf
dec
or
adc
mov
sahf
push
xchg
lea
sti
scas
add
pop
or
ds
push
add
int3
je
pop
and
push
add
icebp
dec
push
(bad)
pop
sbb
mov
lea
(bad)
inc
and
add
and
call
xor
add
pop
xchg
pop
ret
shl
or
push
add
and
dec
mov
add
mov
xor
cmp
sbb
inc
cld
sbb
adc
mov
xchg
jbe
popf
gs
sub
mov
out
xchg
call
mov
in
xchg
cdq
inc
in
cmc
sub
je
adc
or
adc
cwde
add
or
add
xchg
mov
adc
adc
or
data16
sub
hlt
call
push
data16
mov
sbb
or
inc
push
add
mov
sbb
mov
adc
ss
or
in
mov
out
push
mov
add
pop
add
xchg
test
jmp
inc
or
mov
mov
lea
lock
cdq
inc
clc
movs
mov
jmp
mov
in
and
push
test
in
adc
call
mov
inc
push
add
adc
inc
add
dec
in
loopne
add
inc
in
rcl
mov
mov
in
pusha
adc
mov
adc
jmp
out
pop
lea
call
dec
pop
push
test
add
push
pop
add
and
jmp
(bad)
popf
or
pop
add
retf
pop
push
aad
add
add
sahf
jmp
pop
push
mov
mov
pop
ins
adc
jne
inc
push
mov
push
mov
es
or
jbe
add
adc
adc
fild
push
mov
adc
cld
mov
js
pop
(bad)
fstp
nop
ja
dec
popf
aam
dec
popf
jo
je
jae
(bad)
and
jb
add
gs
mov
fwait
adc
push
popf
push
or
cli
mov
fwait
adc
push
add
xchg
inc
or
lahf
sbb
push
scas
lods
jge
push
call
sub
arpl
push
sbb
call
push
jno
add
push
aam
sbb
call
std
push
call
dec
adc
add
(bad)
clc
or
inc
cmps
in
lahf
inc
stc
push
add
add
adc
mov
inc
in
rcl
and
sbb
inc
int
sbb
popf
ss
popf
jns
add
cmp
in
inc
int
pop
or
adc
(bad)
rcl
jmp
mov
sbb
push
inc
or
pop
sub
mov
mov
inc
add
add
inc
add
push
adc
(bad)
push
add
popf
adc
inc
inc
adc
inc
push
xchg
inc
add
and
add
xchg
js
or
add
pop
add
fist
add
push
push
adc
data16
cmp
fs
mov
mov
aad
adc
xchg
inc
add
push
add
fst
add
xchg
sti
test
inc
mov
add
movups
jmp
adc
adc
xchg
inc
or
add
sbb
in
mov
cwde
push
call
(bad)
lldt
out
sub
sub
mov
xchg
aas
add
imul
shr
push
dec
or
and
jo
xchg
inc
cld
fiadd
clc
add
out
add
mov
xchg
jbe
int
jecxz
clc
jmp
add
adc
hlt
mov
loop
dec
push
pop
sbb
sbb
mov
xchg
stc
into
xchg
sub
add
xor
jne
cdq
jnp
sbb
push
pop
jge
jg
dec
adc
mov
fwait
inc
add
dec
or
imul
add
sbb
xchg
jnp
xchg
pop
or
and
cmp
add
sbb
and
std
jne
test
add
(bad)
push
sbb
pop
push
iret
pop
leave
pop
sbb
push
es
sub
push
dec
sbb
xchg
cwde
add
pop
hlt
lea
sbb
inc
xor
dec
xchg
sub
add
jl
inc
inc
call
loope
jae
aam
hlt
call
add
mov
push
sbb
sbb
jo
add
push
add
into
or
add
sbb
lds
mov
xchg
or
adc
mov
lea
and
clc
call
stos
jbe
(bad)
shr
push
push
dec
clc
mov
add
mov
nop
(bad)
cmp
inc
or
dec
adc
test
pop
mov
rcl
mov
cmps
push
sbb
inc
sbb
sbb
sub
or
jae
pop
inc
or
push
out
jno
push
leave
xchg
pop
adc
aas
cmp
je
es
sbb
push
push
cmp
jne
push
pop
or
push
loop
rcl
adc
add
push
or
cmp
pop
mov
mov
les
mov
pop
leave
pavgw
imul
call
or
or
add
and
mov
mov
xchg
cmp
inc
fdivr
mov
xor
outs
enter
lea
inc
call
mov
dec
jne
inc
call
mov
inc
mov
mov
cmp
and
mov
lea
in
mov
(bad)
push
or
cmp
dec
push
je
les
mov
sbb
pop
jmp
(bad)
push
or
adc
xchg
cmp
inc
add
mov
dec
loope
or
xor
adc
jno
cmp
jne
adc
(bad)
call
add
or
loope
inc
xchg
lahf
ds
mov
add
push
add
movs
xor
inc
mov
js
lea
(bad)
pushf
add
(bad)
lahf
add
mov
inc
add
push
adc
(bad)
adc
daa
cmp
or
out
repnz
mov
mov
mov
add
push
adc
xchg
add
aad
push
call
push
xchg
ja
add
int
test
call
mov
sahf
ds
mov
push
sbb
call
dec
add
aaa
push
xor
call
mov
cmp
push
(bad)
inc
mov
sub
adc
(bad)
mov
adc
add
cli
mov
das
dec
or
add
fild
add
dec
adc
add
retf
mov
pop
add
jmp
add
add
pop
or
shl
lahf
pop
pop
cmp
mov
es
or
add
push
add
sbb
or
cmp
add
out
mov
addr16
call
out
mov
pop
lds
inc
dec
mov
add
pop
pop
adc
(bad)
addr16
fcom
(bad)
fadd
out
xchg
loop
xor
dec
jg
xor
std
push
dec
dec
lods
push
gs
mov
int
jae
add
jne
std
(bad)
jp
adc
nop
pop
jp
jbe
mov
xchg
jbe
popf
data16
cmps
ror
push
or
cmp
data16
stos
add
jne
les
mov
and
add
push
pop
ja
push
loopne
push
and
mov
not
mov
popa
adc
test
gs
add
sub
add
int
int
push
mov
pop
add
jae
or
int
pop
or
adc
add
shr
adc
dec
or
lds
or
in
dec
shl
or
adc
add
inc
push
data16
in
mov
push
add
aam
add
cmp
or
inc
add
fiadd
loopne
cmp
add
adc
push
xchg
and
aam
add
fdivr
mov
pop
inc
add
and
popf
add
mov
push
inc
repz
pop
jp
or
xchg
test
add
adc
sub
add
adc
(bad)
call
or
mov
sbb
and
add
call
dec
sbb
mov
jle
inc
sbb
xchg
adc
or
add
je
pop
inc
or
push
mov
xchg
push
adc
xchg
push
adc
add
xor
pop
dec
or
adc
or
mov
mov
pop
int
fld
add
cmp
add
jbe
cmp
jne
rcl
add
cdq
les
pop
call
mov
ja
dec
pop
adc
js
adc
(bad)
adc
sbb
push
adc
cmps
jmp
inc
in
add
push
adc
js
fiadd
jmp
pop
add
call
or
push
adc
xor
pop
or
inc
rcl
adc
pop
add
pushf
mov
mov
push
call
push
sub
push
adc
pop
and
dec
out
or
mov
aam
mov
mov
ret
pop
inc
or
add
xor
jne
pop
dec
add
inc
add
int
mov
pushw
add
adc
add
fimul
jne
pop
add
into
pop
inc
or
inc
rcl
mov
push
inc
or
add
sbb
adc
dec
xchg
pop
push
add
inc
add
nop
push
in
inc
popf
sub
add
adc
mov
add
add
adc
add
cmp
call
push
ret
push
cmp
pusha
add
out
jb
xchg
push
lea
sub
je
pop
adc
int
add
ret
push
lods
adc
adc
add
rcl
sub
dec
mov
shl
cmp
xchg
arpl
popf
pop
inc
sar
pop
dec
test
(bad)
inc
push
adc
fs
str
ss
std
mov
xchg
js
dec
push
jmp
add
gs
stc
jmp
push
inc
adc
sbb
mov
es
jne
xchg
jge
sbb
jns
or
fdiv
fs
push
jne
pop
cmp
or
sbb
(bad)
fs
jmp
jmp
push
push
mov
add
adc
add
fmul
or
test
pop
adc
add
popf
jmp
mov
mov
mov
imul
and
adc
adc
add
lods
mov
sub
add
bound
jmp
push
or
dec
aad
inc
add
add
or
shl
mov
jmp
cmp
add
mov
sbb
int
cmp
and
mov
in
out
mov
mov
addr16
dec
push
adc
pop
adc
ror
sub
push
jmp
call
gs
add
jnp
jle
adc
jne
stos
gs
int3
add
inc
adc
mov
mov
xchg
ja
int
add
jbe
int3
or
rcl
je
es
or
rcr
xor
les
adc
inc
adc
add
inc
in
jae
add
aad
adc
xchg
add
mov
adc
cmc
movs
(bad)
dec
add
adc
adc
data16
dec
add
mov
inc
adc
mov
mov
lea
add
push
mov
nop
jbe
int3
and
fsub
(bad)
sbb
add
push
push
or
add
xchg
fild
jmp
push
add
sbb
stos
bound
(bad)
dec
add
(bad)
pushf
and
call
(bad)
retf
inc
mov
adc
xchg
and
mov
(bad)
lea
call
rcl
adc
jle
sub
add
xchg
(bad)
jbe
adc
mov
add
int3
mov
push
jns
pop
sbb
ret
push
mov
inc
or
mov
dec
jo
sahf
push
dec
add
imul
test
sbb
add
nop
push
inc
add
leave
mov
dec
jne
push
add
dec
push
inc
or
iret
xchg
pop
ret
fs
(bad)
sbb
push
adc
inc
pop
jne
xchg
or
mov
dec
push
or
shl
xchg
push
add
jmp
jne
dec
inc
or
adc
or
rcl
push
mov
mov
mov
or
mov
dec
inc
add
or
mov
add
mov
adc
or
stos
adc
dec
dec
nop
ds
nop
ds
pop
arpl
mov
jle
inc
push
mov
cmps
mov
or
mov
and
add
pop
mov
pop
pop
ret
push
gs
jb
int
inc
mov
adc
lds
fisub
cld
add
or
fcmovne
lds
movs
add
add
jnp
call
dec
int
push
push
(bad)
push
dec
pop
nop
add
pop
adc
call
mov
dec
ds
pop
adc
inc
dec
aam
inc
dec
aam
mov
pop
mov
cmc
mov
inc
add
inc
pop
push
mov
xchg
add
pop
ret
push
mov
xor
dec
lock
les
or
add
push
(bad)
fcmovne
lds
movs
add
movs
sbb
jmp
test
dec
sbb
push
mov
jge
sbb
mov
sbb
mov
add
cld
push
mov
movs
dec
add
and
adc
stc
sub
lahf
out
sub
mov
jg
pop
add
sahf
cdq
add
mov
sub
mov
dec
aam
sub
cld
dec
pop
aam
pop
pop
lods
push
jne
cld
jmp
cmp
loopne
lea
or
clc
add
aaa
sbb
push
mov
movs
es
or
pop
aaa
add
(bad)
jmp
and
rcl
jb
(bad)
ror
adc
ja
mov
call
cmps
sbb
push
call
xor
add
cmp
ins
sub
sub
push
add
(bad)
dec
cld
add
pop
fcom
pop
mov
gs
(bad)
jmp
cmp
adc
lea
add
jl
adc
push
push
loopne
call
xor
add
and
mov
push
xor
mov
mov
rcr
jb
jge
(bad)
push
or
add
sbb
jae
sub
cmp
add
setne
lahf
out
jmp
mov
add
bound
mov
cdq
jbe
or
pop
push
inc
jno
add
or
mov
xchg
(bad)
je
mov
adc
pushf
shl
dec
add
push
inc
inc
fst
shr
sar
leave
adc
or
ret
add
push
pop
add
movs
sbb
shl
ror
mov
adc
pushf
shl
dec
add
add
jne
push
inc
inc
pop
pushf
shl
daa
shr
sar
leave
nop
ror
ret
xchg
push
add
pop
adc
ds
mov
mov
call
inc
push
or
add
xchg
or
jnp
std
cmp
pop
or
push
adc
push
lock
xchg
test
jmp
out
pop
in
or
mov
mov
add
cmp
popa
sbb
xor
push
xor
movs
adc
inc
test
sbb
jmp
daa
test
add
cdq
pop
add
shl
cs
add
loope
push
mov
sar
or
nop
pop
or
fadd
adc
mov
pop
mov
es
in
pop
ret
push
mov
jmp
and
pop
add
add
lea
push
push
mov
push
mov
pop
ror
xchg
cld
pop
add
mov
sahf
xlat
mov
mov
xchg
popa
or
lahf
inc
or
lock
or
push
mov
sahf
dec
adc
pop
adc
jmp
or
pop
cmp
push
je
dec
call
mov
jbe
cmp
(bad)
jmp
out
push
mov
repz
dec
cwde
inc
and
add
fwait
or
movs
loopne
add
cld
pop
jmp
adc
das
out
test
mov
call
std
add
mov
and
movs
push
or
pop
popf
add
push
popf
inc
add
push
add
stos
sub
push
mov
lea
fisttp
mov
lds
jno
add
int
cmp
icebp
retf
cmc
push
add
dec
aas
add
adc
js
cmp
push
adc
add
adc
or
call
xor
lea
or
mov
xchg
mov
or
popa
and
(bad)
in
out
call
sbb
cmp
or
add
jg
ret
xchg
pop
and
jno
or
sbb
push
pop
mov
cmp
fdivrp
inc
add
test
cmovnp
adc
clc
and
ds
daa
mov
mov
je
xchg
arpl
lea
(bad)
call
pop
cld
jmp
lldt
add
add
add
jmp
and
add
je
xchg
add
sbb
fst
sbb
mov
pop
adc
push
push
call
push
movs
repz
add
adc
ret
adc
std
jne
pushf
dec
call
call
call
add
sbb
call
es
or
dec
sbb
cmovnp
push
pop
or
push
add
pop
or
mov
xchg
or
(bad)
imul
adc
or
arpl
mov
mov
shl
pop
or
adc
add
scas
adc
ficomp
xor
pop
or
add
or
pop
and
push
ret
cmp
and
mov
push
sub
add
fwait
dec
adc
fidiv
push
and
adc
or
mov
call
push
jecxz
inc
xchg
sbb
or
out
pop
inc
add
sahf
pop
je
test
add
popa
push
dec
je
cmp
adc
jnp
jmp
gs
add
seta
std
push
cwde
add
movs
add
xchg
add
cs
int
add
add
inc
mov
mov
mov
push
push
mov
and
push
add
jmp
stos
popa
add
pop
mov
jmp
cmp
jmp
adc
fs
call
(bad)
shl
into
mov
add
and
push
mov
cmc
in
add
nop
out
sbb
add
mov
je
add
adc
push
xor
add
sub
addr16
jmp
push
adc
push
jmp
fadd
add
fdivr
push
sbb
dec
call
pop
fdiv
push
cmp
jmp
or
fild
add
aam
jp
mov
cmp
add
push
add
in
rol
inc
pop
sbb
push
movs
jnp
add
sbb
fadd
jae
inc
fisttp
dec
lea
push
xchg
push
cld
add
pop
add
jg
std
inc
mov
jmp
mov
call
adc
jae
xor
mov
add
inc
shl
sub
xor
jmp
dec
pop
add
mov
std
inc
mov
jmp
xchg
out
adc
add
sub
push
pusha
(bad)
dec
cld
add
push
aam
dec
xchg
fdivrp
push
dec
call
cmc
sub
add
popf
mov
jmp
push
shr
outs
fsub
jbe
pop
add
xor
sahf
cmp
call
por
or
sub
add
test
test
dec
push
add
inc
mov
je
push
dec
je
sub
lea
mov
jns
out
inc
lea
lea
std
dec
adc
cmc
dec
push
lea
std
lods
add
mov
fadd
lea
(bad)
fnstcw
pop
sbb
mov
fdivp
and
push
or
add
loope
add
cmp
push
das
add
lea
add
out
lea
dec
lea
add
add
sbb
call
add
cmp
push
int
test
and
xor
popf
out
in
std
lea
popf
dec
lea
and
mov
lods
push
neg
add
add
stos
ficom
in
into
inc
adc
mov
xor
loope
js
jecxz
gs
or
(bad)
jge
push
test
mov
sbb
stos
jecxz
push
inc
push
xor
inc
in
cmps
add
(bad)
data16
adc
mov
inc
add
cmps
add
adc
add
adc
adc
(bad)
dec
adc
add
inc
dec
push
pop
xor
add
push
nop
call
fmul
mov
loop
(bad)
nop
in
add
call
push
cwde
mov
stos
loop
call
(bad)
jmp
ss
sbb
cdq
mov
(bad)
dec
add
(bad)
dec
xchg
(bad)
imul
jge
ret
repz
lds
loop
(bad)
cli
sub
mov
add
mov
add
test
inc
lea
ja
sub
inc
lods
add
jge
test
in
push
and
add
add
aaa
fdivr
push
inc
inc
sbb
jecxz
jmp
aas
int
jle
add
mov
inc
xor
aas
dec
enter
(bad)
cmp
inc
enter
sbb
loope
jmp
cmp
adc
lea
test
inc
add
push
jmp
(bad)
xor
movs
leave
movs
add
adc
dec
xchg
cwde
jmp
cwde
test
adc
jne
(bad)
adc
mov
jbe
sbb
mov
add
rol
or
adc
rcl
adc
mov
adc
jmp
add
daa
rcr
data16
adc
mov
shl
or
or
xor
daa
inc
add
(bad)
mov
cmp
call
sub
add
dec
mov
jmp
(bad)
inc
and
inc
dec
xchg
xor
std
push
in
mov
jne
pop
push
lea
add
out
mov
std
push
adc
cld
or
add
cmc
mov
dec
cld
stos
aas
into
call
xchg
dec
or
shl
inc
xor
inc
cld
iret
pop
add
inc
or
or
out
xlat
pop
add
adc
mov
mov
inc
imul
add
vmovss
adc
add
lods
out
xor
std
test
mov
add
nop
lods
dec
lea
mov
cld
add
sub
jne
pop
lea
pop
mov
notrack
dec
or
add
xchg
jae
fs
in
mov
out
mov
ins
xchg
inc
cwde
add
or
dec
cld
add
(bad)
call
std
cmc
jmp
ins
(bad)
(bad)
fbstp
inc
je
adc
xchg
icebp
str
sub
lea
fisubr
(bad)
in
hlt
(bad)
jmp
add
pop
test
sbb
dec
add
je
(bad)
call
add
mov
cmp
and
jo
push
add
and
std
xor
dec
lea
(bad)
jmp
call
push
sub
dec
call
adc
jae
daa
jge
imul
push
cld
add
add
cmc
int3
std
dec
cli
sti
inc
add
js
sub
adc
add
push
in
aam
call
ds
push
in
cwde
jmp
xchg
mov
cmp
mov
imul
movaps
std
test
mov
in
cmp
std
call
jb
jne
pop
add
mov
sbb
push
cmp
push
movs
pop
or
popf
rol
mov
jae
sbb
push
ins
dec
mov
cmp
add
pop
mov
cmp
push
lock
cmps
loopne
inc
lds
add
(bad)
inc
cld
pop
fdivr
inc
mov
repz
stos
retf
mov
inc
sbb
push
add
clc
jmp
sbb
(bad)
inc
mov
aaa
mov
je
pop
mov
rcl
lea
fmul
gs
adc
inc
add
call
push
fcom
xor
aaa
mov
in
nop
adc
pop
(bad)
push
or
add
pusha
fmul
inc
add
sbb
add
mov
inc
mov
add
dec
aad
dec
cmp
push
fsubr
fisttp
call
jb
push
and
in
adc
jmp
sub
ds
add
movs
or
jmp
jno
inc
add
adc
push
out
dec
xor
aas
add
adc
jne
fiadd
(bad)
jmp
push
sahf
dec
sbb
das
mov
inc
adc
add
adc
std
push
push
mov
fiadd
cmp
xor
jbe
dec
in
adc
setne
add
or
jbe
add
mov
mov
add
rol
push
test
jmp
fmul
mov
enter
ins
sbb
ins
sbb
cmc
inc
and
jp
and
inc
add
xor
adc
dec
bts
dec
xor
inc
je
stc
jae
(bad)
push
ret
call
adc
sbb
add
hlt
(bad)
int3
inc
and
adc
cmp
ins
pop
fistp
mov
fstp
fcom
pop
push
shl
sahf
rcl
push
dec
add
and
jo
or
(bad)
dec
jnp
jmp
mov
pop
push
inc
fld
push
sbb
ja
add
fdivr
pop
push
jmp
xchg
lock
gs
add
fld
ret
fsincos
jl
fucomip
loop
inc
pop
stc
fadd
dec
rcr
mov
jl
push
or
sbb
add
popf
inc
sub
popf
add
and
(bad)
jbe
inc
pop
xor
dec
xchg
xchg
(bad)
jl
add
add
fld
test
(bad)
fdiv
xchg
idiv
and
rcr
dec
push
pop
cdq
aas
or
in
inc
je
add
arpl
dec
jb
cld
sbb
dec
clc
fadd
not
push
jp
sahf
in
idiv
push
push
cld
jmp
(bad)
sbb
inc
daa
fld
add
out
(bad)
(bad)
pop
mov
mov
inc
xchg
(bad)
jg
mov
bound
jb
xchg
aaa
jmp
into
xor
(bad)
aam
add
aam
add
mov
xchg
mov
gs
jbe
cmp
adc
add
pusha
add
jecxz
jae
pusha
add
adc
xchg
inc
add
and
outs
jb
ja
pop
push
and
out
jo
dec
add
fs
xor
add
push
stos
mov
sub
or
add
call
jne
lahf
add
xchg
dec
or
aad
and
leave
and
adc
add
lea
inc
gs
and
mov
ret
bts
pop
or
stc
dec
pusha
adc
je
sub
sbb
in
(bad)
(bad)
sub
inc
adc
push
(bad)
adc
iret
push
kxorb
cmps
(bad)
(bad)
(bad)
rep
push
aaa
jne
pusha
push
sub
add
lods
mov
adc
jae
test
jo
stos
sub
pop
call
sbb
shr
pop
add
fnstenv
push
iret
mov
add
cs
(bad)
inc
cs
cmps
mov
cld
dec
jl
or
mov
mov
lahf
jl
mov
add
test
into
movs
cmps
or
sbb
add
jnp
add
icebp
xor
and
mov
dec
lock
lock
mov
data16
mov
mov
mov
sahf
inc
or
pop
mov
jbe
mov
mov
mov
push
pop
sbb
inc
jnp
add
add
(bad)
inc
or
stos
and
add
push
add
in
cwde
add
push
mov
lahf
(bad)
xor
dec
push
mov
xchg
mov
sbb
adc
jne
sahf
dec
sbb
sbb
call
pop
or
sbb
add
push
push
sbb
inc
push
lea
test
push
pop
lock
adc
jb
push
in
adc
add
lea
lock
aam
rcr
push
add
mov
xor
and
mov
fwait
inc
lock
sub
jmp
sbb
add
push
cmp
rol
add
add
jmp
lahf
jae
in
or
add
xor
pushf
mov
adc
(bad)
loopne
xchg
sbb
xchg
cwde
rcl
(bad)
aam
aam
test
in
mov
mov
xchg
jbe
pop
dec
mov
mov
movs
std
dec
mov
jmp
mov
lea
mov
std
call
add
jo
inc
jne
inc
hlt
xchg
mov
sahf
jae
xchg
push
lock
pop
out
out
mov
aam
jne
xchg
mov
or
pop
adc
repnz
jmp
shl
es
adc
int3
sbb
jne
sbb
std
push
jg
(bad)
stos
ins
std
jne
inc
lea
add
jns
add
sbb
mov
add
push
add
or
pop
pop
adc
push
add
pop
add
je
(bad)
call
mov
push
mov
cmp
imul
jge
lea
js
fwait
call
lea
inc
dec
call
add
sub
psubsb
push
add
push
pop
cmp
je
push
out
pop
jmp
lahf
inc
or
sbb
cli
inc
sbb
or
test
ret
mov
pop
mov
in
add
push
sahf
aas
sbb
add
adc
cmp
and
mov
cmps
push
mov
sahf
dec
sbb
sbb
add
adc
pop
push
fucompp
add
fisttp
add
pusha
xchg
push
pop
or
movs
sbb
sub
(bad)
jae
popf
int3
jmp
fwait
inc
or
fldl2t
add
xchg
xchg
jbe
pop
loop
mov
push
add
ds
push
cmp
pusha
jmp
out
add
loopne
jne
lahf
jne
movs
stos
mov
lahf
jnp
and
sbb
les
jne
xchg
push
add
jmp
dec
add
or
jmp
push
push
or
rcr
cmp
push
out
daa
add
out
mov
test
add
pushf
adc
add
or
xchg
std
add
mov
data16
jae
(bad)
push
or
inc
push
xor
(bad)
xlat
les
adc
add
adc
cmp
jne
xchg
cmp
jne
xchg
push
or
mov
in
das
add
add
loop
(bad)
sbb
movs
(bad)
out
push
add
es
or
xchg
pushf
aas
xor
xor
push
dec
or
mov
lea
sbb
xor
or
push
xor
(bad)
fcmovb
inc
sub
adc
mov
xchg
ja
sbb
sbb
and
add
adc
push
push
xor
xchg
push
jbe
xchg
inc
or
sbb
mov
or
push
mov
das
add
add
inc
aad
jae
xchg
push
xor
arpl
add
xchg
or
shl
aas
xor
push
xor
push
adc
add
add
pop
aad
xor
add
adc
pop
neg
push
call
(bad)
push
or
pop
sbb
in
add
pop
sbb
cmp
pop
adc
or
aaa
call
fwait
jne
adc
rcl
add
push
adc
add
repnz
dec
jecxz
pop
ret
adc
jns
push
push
add
adc
in
pop
lea
fs
popf
adc
mov
mov
cwde
add
repz
jmp
pop
loopne
call
shl
(bad)
in
mov
jp
in
jmp
retf
push
add
sbb
cdq
inc
in
cwde
dec
in
mov
cwde
inc
or
pop
add
add
sbb
pop
leave
(bad)
sbb
push
push
jl
mov
or
in
movs
xchg
ja
mov
sbb
jmp
ins
add
cmps
mov
js
mov
ins
mov
sbb
jno
inc
test
adc
add
rcr
movs
dec
inc
jns
test
mov
rcl
jb
add
(bad)
adc
add
ror
sbb
cmps
out
nop
adc
mov
movs
add
inc
stos
sbb
adc
test
adc
xor
adc
pop
push
adc
jmp
xchg
inc
or
dec
xor
ja
mov
mov
add
ret
xchg
dec
add
pop
or
xchg
inc
add
push
add
add
inc
lahf
jb
adc
add
outs
mov
call
mov
hlt
or
lea
mov
mov
jmp
pop
fsub
sbb
jg
cmp
in
mov
mov
add
in
or
rcr
mov
lahf
push
xor
add
mov
add
into
nop
inc
add
bound
pop
movs
mov
sub
jmp
mov
(bad)
inc
fadd
mov
mov
mov
jmp
cld
pop
push
lea
outs
(bad)
or
(bad)
in
xchg
add
push
add
cmps
out
imul
pop
fiadd
in
sahf
jnp
push
xchg
in
mov
push
mov
add
popa
inc
clc
or
sbb
int
jnp
inc
jmp
inc
clc
push
xlat
jb
inc
stos
jmp
sub
(bad)
jae
xchg
jnp
popf
lea
mov
inc
lock
dec
jne
pop
lea
jo
jne
mov
adc
out
(bad)
(bad)
call
fdiv
sub
or
push
(bad)
pop
cld
lea
adc
mov
(bad)
adc
inc
adc
icebp
out
call
xchg
repz
push
mov
fwait
push
adc
jmp
push
imul
pop
mov
inc
adc
or
dec
mov
fcmovne
ror
push
mov
add
push
ins
push
push
push
ror
add
test
in
repz
rcl
jb
(bad)
push
sbb
fsubr
repz
mov
ins
xor
addr16
mov
sti
cmc
pop
std
dec
or
inc
add
or
or
mov
add
pop
repnz
mov
push
pop
mov
push
push
push
jne
cli
jmp
jnp
sub
or
jnp
(bad)
call
aad
rcl
loop
mov
mov
add
mov
inc
pop
pop
aam
adc
nop
pop
jmp
cmp
jge
xchg
jge
dec
pop
fmul
arpl
std
(bad)
jmp
or
out
std
inc
adc
jle
sbb
stos
(bad)
pop
retf
dec
pop
ret
call
lea
or
add
sbb
mov
push
or
leave
adc
push
sub
sub
add
fwait
(bad)
std
pop
das
mov
add
out
ret
xor
dec
lea
out
shl
push
fmul
cmc
fcom
sbb
inc
push
push
cmc
repnz
sbb
retf
mov
scas
div
and
dec
sbb
ss
je
inc
add
jne
add
pop
pop
or
dec
sbb
cmc
call
cmps
push
inc
add
sbb
pop
mov
cmp
and
js
pop
out
cmp
clc
call
(bad)
dec
add
lea
mov
int3
xor
loopne
push
cmc
sub
call
add
xchg
js
or
mov
dec
xchg
push
xor
push
sbb
cmp
out
push
push
imul
mov
adc
mov
and
add
pop
xor
push
dec
add
inc
or
call
sbb
gs
ja
pop
adc
push
fs
mov
add
xor
or
adc
call
fistp
inc
adc
cwde
mov
popf
out
xor
and
mov
and
fs
add
add
dec
add
push
mov
jg
mov
mov
jbe
mov
sbb
mov
adc
ret
push
mov
add
mov
or
mov
dec
add
inc
add
lea
push
push
pop
push
sbb
add
sbb
out
mov
scas
dec
or
mov
jg
mov
sbb
xchg
push
add
iret
or
push
xchg
xchg
xchg
jmp
jnp
push
cmovno
or
xchg
js
std
call
jp
pop
and
and
pop
pop
es
pop
ret
neg
add
push
jge
inc
push
je
or
push
sbb
pop
and
jl
dec
adc
call
mov
out
xor
add
and
mov
xchg
arpl
or
pop
out
stos
push
push
xchg
push
push
push
into
call
fs
or
inc
pop
add
lds
push
push
dec
call
push
jmp
jle
nop
popf
push
int3
push
jle
jnp
push
xor
xor
shl
lea
cmp
and
mov
add
call
fld
mov
xor
xor
dec
mov
cmc
cmp
call
sahf
icebp
sti
add
jp
jne
rol
sbb
hlt
je
imul
xor
push
push
add
int
(bad)
cmp
(bad)
loopne
out
add
in
add
push
push
test
add
dec
jge
popf
jge
xchg
popf
adc
or
in
add
nop
add
adc
aam
jge
jge
in
and
inc
lea
jge
out
push
inc
xor
dec
xor
xchg
out
adc
cmp
push
data16
push
call
push
push
add
popf
fisttp
adc
inc
add
loopne
neg
div
sbb
cld
scas
pop
out
and
pop
leave
ficomp
or
out
std
jmp
shl
out
push
(bad)
pop
std
adc
test
add
add
in
xchg
add
fadd
scas
sbb
call
or
in
out
adc
mov
mov
pushf
(bad)
cmp
stc
xchg
stos
imul
int
add
fucom
xor
dec
mov
jne
popf
(bad)
jp
(bad)
jle
call
push
jle
retf
add
add
aad
retf
std
shl
leave
rol
dec
nop
stc
dec
adc
ja
test
(bad)
pop
out
retf
push
push
dec
mov
add
sbb
sub
jle
lea
pop
xor
pop
xchg
jmp
adc
mov
add
aas
push
shl
jecxz
xchg
leave
loopne
cmc
cmp
push
add
repz
or
dec
xchg
stos
ins
mov
or
(bad)
cwde
pop
mov
jns
xchg
sub
or
add
cld
stos
jle
fstp
pop
xor
push
mov
cmc
mov
(bad)
cli
pop
retf
popf
jle
add
jmp
inc
imul
mov
jg
adc
mov
inc
mov
add
rcl
cdq
ja
mov
xchg
test
fsub
or
(bad)
pop
jb
sahf
mov
pop
dec
idiv
mov
in
add
sbb
fs
adc
xor
push
jbe
add
in
cld
call
mov
cmp
mov
sbb
movs
dec
push
xchg
(bad)
call
dec
add
push
sbb
mov
adc
add
inc
mov
adc
out
push
sbb
out
add
fisubr
sub
adc
pop
jne
jbe
add
sbb
stos
loop
add
aas
mov
push
pop
out
pop
sbb
pop
mov
ror
cs
jmp
cwde
pop
pop
(bad)
xor
or
cmp
or
call
cmovl
xchg
dec
pusha
lea
push
mov
fadd
add
add
mov
scas
adc
mov
or
inc
push
sbb
mov
push
push
sbb
pop
inc
add
leave
inc
jmp
inc
test
pextrw
and
add
leave
out
pop
pop
add
sub
pop
cmp
popa
and
sahf
add
rcl
add
popa
sub
lea
push
call
ficomp
sahf
mov
add
and
sbb
jb
jns
jb
data16
push
cmp
and
mov
adc
fwait
pop
(bad)
jp
mov
adc
or
pop
out
(bad)
push
add
add
push
out
sub
lods
add
mov
push
push
mov
xchg
loop
addr16
mov
aam
arpl
sub
sbb
add
push
mov
outs
push
dec
lea
push
mov
lds
mov
xchg
inc
and
add
push
cmp
loope
cmp
xor
mov
lods
jne
lea
or
mov
lods
add
mov
out
dec
adc
les
fisttp
(bad)
jmp
iret
cmc
sti
pop
(bad)
cli
sbb
push
je
dec
mov
xchg
cdq
(bad)
call
(bad)
add
lods
arpl
jno
jmp
lea
jno
push
gs
jmp
call
and
push
add
lea
jnp
lds
in
push
fsub
sub
sbb
jmp
fsub
sub
aam
xor
add
aam
xor
aam
cmp
frstor
and
mov
add
(bad)
pop
out
push
adc
mov
dec
push
call
mov
and
movs
and
mov
jecxz
cmp
(bad)
call
and
sbb
dec
mov
pop
out
mov
ja
jmp
add
fsub
sub
sbb
dec
xlat
and
dec
and
adc
and
adc
and
in
and
adc
add
dec
adc
jmp
inc
lea
out
in
mov
mov
popf
(bad)
(bad)
mov
adc
add
adc
mov
mov
call
es
inc
add
imul
xchg
(bad)
dec
mov
fs
movs
jp
mov
in
loopne
mov
clc
push
pop
lds
adc
pusha
adc
dec
call
sbb
xchg
add
jl
call
(bad)
pop
out
adc
mov
lahf
dec
loopne
mov
add
shr
adc
pop
xchg
sbb
nop
sbb
mov
mov
or
fst
mov
fisubr
adc
jmp
mov
(bad)
inc
mov
sub
fwait
aas
adc
pop
out
iret
adc
mov
add
xor
call
and
pop
(bad)
cmp
inc
jno
push
lea
pop
and
add
cmc
mov
add
add
sahf
dec
and
sahf
(bad)
call
xchg
pop
mov
xor
add
(bad)
rcr
data16
ret
data16
mov
adc
or
adc
add
sbb
adc
mov
adc
fst
mov
int
jmp
mov
popf
inc
mov
and
mov
mov
(bad)
call
cmp
lods
pop
ret
(bad)
push
out
dec
sbb
pop
push
dec
mov
mov
push
(bad)
mov
add
movs
xlat
add
push
stos
jmp
sub
or
mov
(bad)
mov
xchg
fadd
fst
cmp
sub
push
xchg
(bad)
dec
pushf
mov
and
add
int3
pop
add
sahf
sbb
sub
lea
mov
jecxz
inc
cmps
mov
add
aam
pop
inc
push
or
cmp
add
or
jge
fild
rcr
jmp
sahf
jbe
call
mov
mov
sbb
push
cmp
pusha
pop
(bad)
(bad)
fst
or
push
add
nop
pop
add
mov
push
mov
mov
mov
mov
addr16
add
jmp
cmp
shl
imul
test
adc
add
cmp
and
jmp
and
add
call
mov
adc
add
mov
or
push
jb
sahf
mov
out
and
or
add
dec
sub
and
mov
ss
mov
adc
lds
rcl
xor
popf
cmp
pop
test
add
lea
xor
adc
in
and
push
add
lea
faddp
pop
adc
add
jnp
dec
and
(bad)
pop
sbb
add
inc
mov
pop
leave
add
fidivr
mov
lea
clc
or
sbb
and
inc
frstorw
and
inc
mov
push
iret
arpl
(bad)
push
jnp
lahf
push
jmp
test
adc
rcr
les
adc
rcl
pop
pop
add
iret
adc
xor
xchg
jo
sbb
cmp
mov
mov
cmp
sub
sbb
sbb
inc
jno
ss
and
inc
inc
addr16
pusha
and
add
sbb
fist
add
pop
or
xlat
pop
or
std
and
mov
add
pop
mov
jmp
xchg
mov
add
bound
test
pop
and
shl
stos
dec
test
and
ud0
in
idiv
or
shl
call
xchg
enter
add
sbb
inc
ret
push
jmp
xchg
add
hlt
inc
fs
jae
data16
lea
retf
out
aaa
stos
std
xor
push
push
gs
jmp
add
pop
jmp
add
cmp
rcl
lea
inc
call
jmp
sbb
mov
sub
dec
mov
add
cmp
push
(bad)
pop
out
test
(bad)
(bad)
fistp
push
gs
add
xor
mov
inc
in
paddusw
add
pop
inc
(bad)
push
cdq
pop
cld
gs
fdivr
push
test
mov
mov
add
aad
stos
std
lea
add
add
fisubr
ror
cwde
push
mov
js
pop
aam
psubsw
adc
add
push
les
push
or
add
mov
cmp
push
or
add
pop
cmp
je
add
mov
mov
aam
xchg
pop
jmp
jnp
rcl
dec
push
sub
shr
fistp
add
adc
test
add
push
(bad)
push
add
sldt
ficomp
sbb
dec
sbb
add
test
push
dec
lea
mov
(bad)
stos
mov
add
lea
mov
call
test
test
or
add
lds
(bad)
stos
call
mov
mov
pop
push
jmp
push
sbb
out
aad
std
mov
pop
cld
jne
fdivr
call
xchg
cmps
stos
std
test
sbb
add
shl
dec
(bad)
call
jmp
out
test
inc
mov
pop
call
xchg
pop
out
xchg
stos
std
mov
mov
mov
mov
pop
and
add
mov
fiadd
and
mov
cmp
push
add
add
push
cmp
je
push
sbb
or
or
jne
in
push
jmp
adc
adc
dec
mov
sti
sub
je
into
sub
pop
adc
call
pop
or
inc
fwait
mov
cmps
std
call
daa
adc
test
add
call
test
adc
(bad)
call
adc
push
sbb
shr
cmp
push
out
adc
add
xchg
adc
out
xchg
xchg
lea
inc
pop
(bad)
sub
data16
inc
add
add
mov
std
push
call
cmps
mov
out
pop
adc
jmp
call
call
adc
(bad)
std
cdq
dec
test
les
and
lea
(bad)
jmp
add
mov
call
je
(bad)
dec
add
add
lea
enter
movs
std
mov
add
or
pop
(bad)
(bad)
push
lea
or
mov
mov
cmc
ja
add
jnp
inc
adc
pop
xchg
(bad)
mov
pop
sti
cmp
ss
push
dec
jae
add
cmp
call
sub
adc
xor
in
or
inc
call
mov
jnp
inc
test
(bad)
push
mov
mov
mov
hlt
(bad)
cmp
dec
sbb
shl
add
mov
sbb
ja
call
jmp
xchg
push
jb
add
xchg
dec
mov
call
mov
and
or
add
add
mov
test
lock
je
push
dec
mov
test
or
popf
std
inc
movs
std
push
sbb
shr
or
(bad)
call
xlat
iret
push
call
add
(bad)
sti
add
add
arpl
inc
pop
inc
jge
inc
or
add
(bad)
dec
mov
inc
mov
dec
xchg
inc
test
call
(bad)
adc
call
inc
push
out
push
sbb
ret
push
and
add
adc
jge
mov
and
inc
push
call
loope
jae
outs
mov
dec
sub
ficomp
movs
mov
in
test
dec
pop
mov
cmc
repz
sbb
mov
push
cmc
pop
fcos
mov
(bad)
jle
inc
pusha
inc
pop
add
xchg
ror
mov
adc
sub
sub
adc
sub
jo
mov
inc
add
add
(bad)
jnp
es
add
out
jb
and
jle
jnp
sbb
sbb
mov
dec
cwde
imul
mov
sbb
jne
das
mov
pushf
adc
nop
test
sbb
mov
mov
xchg
aad
call
movs
in
(bad)
call
dec
sub
or
(bad)
jae
shl
shl
dec
lahf
add
out
push
cld
inc
call
mov
stos
xchg
stc
inc
in
scas
xor
ficom
push
movs
dec
jne
add
das
jae
pop
mov
pop
add
adc
shl
inc
push
lea
mov
(bad)
mov
pop
jmp
mov
cld
adc
popf
lea
jl
nop
clc
cmp
inc
movsx
int
jb
and
and
out
jnp
add
aaa
push
cmp
cmp
jg
das
add
(bad)
inc
loopne
cmps
and
cmp
stos
jne
sahf
lods
push
push
inc
push
call
fidiv
mov
push
push
mov
dec
jo
pop
mul
ja
mov
mov
mov
jmp
sti
jnp
in
loop
jmp
xor
pop
movs
out
nop
xchg
adc
push
sar
dec
mov
mov
add
xchg
ret
cmp
sub
push
xchg
sar
add
fs
push
out
lea
(bad)
(bad)
call
adc
(bad)
fdiv
out
dec
mov
movs
clc
push
jmp
dec
shl
or
stos
pop
adc
add
mov
sbb
cld
push
adc
mov
xchg
loopne
sti
xchg
and
mov
std
pop
enter
mov
lds
rcl
add
and
dec
jmp
test
jne
mov
cmp
std
lea
leave
out
or
test
adc
or
sbb
add
add
sar
out
nop
(bad)
inc
rol
fnstcw
call
inc
or
test
imul
and
pop
xchg
movs
pop
inc
xor
dec
mov
xor
imul
adc
push
push
pushf
enter
mov
mov
(bad)
inc
add
mov
and
xor
push
lea
ror
std
(bad)
dec
or
loopne
dec
(bad)
sar
pop
cmp
popf
adc
jmp
inc
lea
fwait
cmp
cmp
mov
sbb
mov
aas
lea
inc
push
call
add
into
mov
push
sbb
lea
mov
cmc
inc
push
dec
adc
and
mov
fwait
cld
loop
mov
push
pop
(bad)
jmp
adc
and
call
adc
dec
aam
push
push
aam
add
jp
call
xchg
add
cmp
mov
call
outs
movs
push
push
dec
xlat
test
icebp
mov
lea
cmc
scas
dec
(bad)
cli
inc
mov
add
std
jmp
xor
std
dec
test
push
jns
mov
sub
mov
inc
push
push
inc
cld
loope
add
add
gs
jmp
dec
cld
push
dec
test
sub
jmp
nop
(bad)
dec
add
enter
adc
or
add
mov
adc
pop
adc
add
inc
push
lea
cwde
call
add
cwde
ds
test
call
add
(bad)
call
inc
shl
jmp
adc
inc
(bad)
clc
inc
fcom
mov
and
lea
test
call
pop
and
mov
cld
mov
mov
sbb
mov
(bad)
stos
mov
cld
inc
(bad)
sub
(bad)
call
(bad)
inc
sub
pop
dec
dec
pop
aam
adc
sbb
dec
dec
pop
xchg
sbb
rcr
imul
in
jne
or
pop
mov
cmp
push
jo
inc
shr
cmc
dec
add
fwait
mov
out
inc
or
xor
movups
inc
add
sub
or
add
int3
(bad)
call
out
psrlw
dec
or
retf
mov
adc
jne
sbb
je
xchg
mul
popa
jnp
stc
dec
and
xor
je
mov
(bad)
call
or
das
jmp
or
or
add
mov
aaa
sub
and
add
dec
dec
ficom
push
push
push
or
lods
(bad)
lds
lea
test
mov
push
mov
jmp
stos
inc
fldcw
aam
add
lahf
xchg
xchg
jmp
dec
sbb
dec
nop
cmc
(bad)
dec
(bad)
jmp
sub
ins
push
or
adc
jne
inc
fld
and
jae
and
mov
jmp
or
js
jmp
push
lea
nop
and
imul
mov
cmp
push
test
add
adc
out
pop
xchg
std
mov
mov
add
or
sub
sub
lods
(bad)
lods
mov
and
add
dec
(bad)
loop
dec
adc
(bad)
xor
mov
mov
lea
or
pop
inc
add
in
test
(bad)
xchg
jae
xor
lock
jmp
add
push
jo
add
add
pop
jmp
lea
xchg
sbb
add
inc
push
mov
cwde
clc
push
mov
pop
dec
xchg
std
add
inc
fcom
fisttp
pop
sbb
add
cmp
pop
ror
call
add
mov
cmp
ins
aas
mov
push
xchg
pop
out
jae
loop
inc
or
inc
std
jne
sti
push
add
adc
push
mov
es
push
mov
scas
fild
or
add
add
mov
mov
jge
(bad)
(bad)
add
add
xor
inc
add
adc
jmp
test
(bad)
fimul
fistp
dec
mov
add
mov
jne
sbb
adc
xor
xor
sub
inc
int
dec
fdiv
xchg
arpl
fst
mov
add
sti
call
pop
lea
add
inc
std
inc
fldl2t
push
pop
xchg
xchg
push
add
mov
fadd
sub
sub
fwait
push
adc
ja
pop
push
ror
xor
jle
adc
packssdw
mov
jmp
jmp
xchg
stc
add
aas
popf
dec
or
push
jl
add
jmp
test
add
lahf
add
push
pop
pop
mov
jmp
pop
or
rcr
lea
inc
out
popf
adc
push
dec
mov
cli
imul
cmc
cwde
jne
dec
stc
outs
jle
adc
mov
pusha
enter
push
mov
inc
add
in
mov
mov
inc
jg
(bad)
and
out
(bad)
xchg
std
mov
rol
(bad)
std
popf
inc
and
jle
imul
cmp
jmp
shr
adc
add
add
std
sub
lods
inc
mov
sbb
(bad)
out
popf
in
std
test
add
push
push
push
xor
lahf
inc
hlt
push
pop
push
je
popf
mov
(bad)
sub
sbb
pop
mov
rcr
add
sbb
(bad)
and
mov
mov
std
jmp
xlat
out
stos
jmp
pop
add
ror
sahf
dec
fs
pop
pop
jne
and
inc
mov
add
je
push
es
in
mov
push
mov
lahf
int3
call
push
pop
mov
cwde
dec
lock
repnz
xchg
(bad)
dec
mov
sahf
int3
call
jmp
call
mov
jne
cwde
inc
cld
mov
xchg
adc
add
add
push
push
xchg
(bad)
mov
sub
adc
popf
inc
add
push
lea
sbb
pop
adc
call
or
leave
pop
dec
mov
or
inc
xor
push
mov
inc
push
inc
adc
jae
jbe
xchg
pushf
inc
adc
shl
call
(bad)
push
push
dec
sbb
mov
add
and
add
jecxz
jne
adc
packssdw
push
push
test
jg
push
jb
xchg
jmp
xchg
cmp
and
push
pop
or
inc
loope
(bad)
out
jp
dec
or
jmp
sub
(bad)
jmp
xchg
(bad)
dec
dec
mov
out
adc
outs
fnstsw
shl
mov
mov
xor
adc
mov
sahf
dec
adc
push
push
mov
inc
mov
mov
in
cmp
gs
out
jne
pushf
dec
or
mov
dec
adc
push
mov
aas
aaa
inc
rcr
call
push
dec
push
add
add
or
ja
cmp
mov
inc
adc
add
jp
call
add
dec
adc
jnp
xchg
cdq
or
mov
add
pop
jmp
sbb
dec
push
pop
unpckhps
push
adc
push
(bad)
call
add
dec
popf
pop
add
addr16
stos
xchg
lds
add
xchg
out
sbb
adc
call
add
push
popf
inc
add
dec
adc
xchg
clc
push
jl
jmp
(bad)
jmp
push
or
push
push
push
call
jne
sahf
jecxz
(bad)
and
imul
add
xor
cmp
sbb
pop
xor
add
aam
std
je
xchg
add
xchg
or
mov
pop
cmp
bound
test
popa
adc
aas
not
xor
bound
jae
sti
sub
adc
clc
test
dec
sbb
add
dec
pop
leave
dec
inc
mov
adc
mov
or
add
lea
cmp
pop
ja
jne
add
add
popf
xchg
jl
sahf
ins
sbb
dec
sti
add
lds
fadd
fcom
push
push
shr
jne
mov
add
pop
push
mov
mov
cdq
add
into
repz
cli
fs
add
pop
pop
pop
adc
push
stos
jne
rcl
call
adc
mov
inc
sbb
cmps
push
jbe
xchg
pop
sbb
leave
mov
clc
leave
add
adc
jne
mov
jp
out
pop
inc
mov
cmp
std
stc
bound
sub
pop
test
fmul
pop
adc
mov
stc
xchg
add
mov
mov
fsub
sbb
add
jne
push
stc
std
jo
in
lea
dec
mov
clc
add
sbb
adc
dec
stos
in
out
mov
add
in
adc
gs
jne
int
sar
mov
cmps
pop
je
xor
push
iret
inc
sub
lock
jno
cmc
pop
sub
shl
stos
nop
arpl
lea
dec
cwde
inc
in
jbe
sub
inc
nop
sbb
push
jo
add
in
jae
ja
pop
cmp
jb
sub
xchg
inc
lock
rol
xchg
mov
cld
jae
xchg
fnstcw
mov
xor
mov
lea
pop
push
mov
inc
pop
push
(bad)
rcr
(bad)
mov
jmp
mov
pop
mov
or
pop
in
and
pop
cdq
mov
cmp
inc
mov
adc
xor
cs
mov
mov
rcl
je
(bad)
pop
out
mov
vpsllw
fild
jae
ins
dec
jmp
push
add
mov
jmp
pop
cmps
std
call
pop
push
(bad)
rcr
lea
dec
out
pop
jmp
jecxz
mov
sahf
(bad)
icebp
stos
push
mov
add
add
sbb
add
push
call
into
ins
push
mov
inc
mov
pop
(bad)
xlat
mov
add
xchg
arpl
pop
jecxz
je
jmp
add
dec
out
dec
jns
push
ret
xchg
and
adc
outs
pop
mov
or
enter
add
fisttp
add
pop
ret
in
mov
loop
jne
dec
ror
fs
add
fadd
popa
add
mov
pop
mov
mov
js
pop
mov
out
call
dec
les
cmp
sub
aaa
inc
add
dec
std
call
mov
xchg
call
and
call
add
fst
enter
stc
aad
add
cmp
sub
(bad)
shl
push
pop
out
mov
std
mov
shr
add
(bad)
mov
or
sbb
mov
mov
int3
in
add
(bad)
fild
or
add
dec
out
fsub
std
pop
mov
dec
adc
enter
dec
cmp
add
bound
out
adc
call
pop
xchg
push
out
xchg
(bad)
(bad)
jbe
daa
shl
(bad)
fnstenv
fidivr
popw
jmp
fucomi
and
lea
shl
push
data16
dec
dec
loop
mov
or
call
push
push
push
mov
add
add
sbb
cmp
inc
scas
jmp
push
push
mov
and
cs
stos
(bad)
dec
push
test
cdq
pop
add
fild
dec
out
add
out
xor
add
rcr
cmp
push
push
data16
jge
mov
mov
xchg
jnp
gs
cld
inc
add
pop
sbb
out
call
es
fiadd
or
jb
jne
pop
add
int
inc
mov
outs
out
in
bnd
sub
mov
sbb
mov
pop
pop
sbb
int
jge
fiadd
add
fild
nop
fdiv
out
out
add
and
mov
inc
ins
(bad)
cmp
out
cmp
push
call
mov
lea
retf
gs
in
gs
loopne
std
jne
dec
out
xchg
adc
adc
jge
adc
movs
repnz
popf
in
clc
and
jmp
add
in
jmp
add
data16
pusha
sar
jne
jecxz
call
sbb
outs
test
pop
out
xchg
in
dec
call
push
lea
leave
out
test
std
mov
in
jge
fld
xor
ffreep
pop
mov
adc
int
add
test
popf
fild
add
push
loop
pop
(bad)
fs
jmp
in
std
call
out
push
test
ins
std
call
pop
add
stos
jo
call
dec
adc
sar
std
(bad)
cli
fld
cmps
push
sbb
ss
xchg
fld
cmp
xor
add
test
xchg
xchg
add
pop
sub
pusha
jmp
adc
outs
jmp
mov
jne
add
popf
call
or
lea
movs
cmps
cli
jmp
ficomp
sbb
test
or
sub
add
in
add
pop
inc
mov
cmc
jo
add
dec
mov
add
int3
out
push
pop
add
and
std
inc
fadd
cwde
dec
xchg
fist
add
sub
pop
mov
pushf
outs
call
push
add
loopne
add
int
mov
ficomp
movs
jp
mov
out
cdq
call
dec
add
and
std
(bad)
call
call
lahf
add
call
push
(bad)
shl
call
pop
xchg
jmp
add
or
mov
jmp
mov
inc
cdq
mov
mov
fnstcw
lea
faddp
inc
mov
add
add
dec
fnstcw
(bad)
loopne
out
lahf
adc
mov
out
mov
out
add
and
std
inc
add
pop
fcomp
rcl
(bad)
enter
sbb
mov
fidivr
lea
out
pop
adc
mov
lea
add
adc
xor
sub
push
mov
add
(bad)
fs
(bad)
fstp
mov
push
std
mov
cmp
add
sti
adc
add
data16
cmp
imul
aad
cld
mov
add
or
add
mov
rol
je
add
sbb
mov
cmc
test
(bad)
jmp
add
lea
cs
out
xchg
jmp
mov
xlat
mov
fstp
add
push
jmp
jmp
push
mov
push
mov
jmp
inc
sub
jnp
xchg
std
mov
add
xlat
mov
sbb
xor
mov
xor
(bad)
dec
mov
pop
(bad)
pop
sbb
lods
jb
jmp
call
cmps
dec
mov
mov
mov
push
dec
jle
nop
addr16
jmp
mov
ss
adc
add
xchg
mov
std
inc
dec
(bad)
inc
or
out
addr16
aad
std
call
xchg
jb
stos
in
out
lea
add
stos
cmps
outs
jmp
fimul
in
mov
sbb
add
adc
jle
fmul
(bad)
jmp
dec
out
lea
add
mov
dec
mov
std
push
in
je
cmp
push
in
lea
std
dec
xchg
das
add
int
ret
lods
push
jp
mov
mov
push
in
lea
std
jne
in
jae
cmp
adc
nop
ret
adc
xor
mov
mov
(bad)
scas
data16
jmp
jmp
jecxz
ds
std
push
xchg
mov
inc
mov
fimul
fs
cli
call
push
pop
mov
fld
inc
pop
mov
or
ret
mov
aad
push
mov
nop
mov
or
mov
mov
fnstcw
sub
inc
sub
rcr
adc
dec
push
(bad)
enter
pop
push
cmp
lods
cmc
(bad)
jmp
add
sub
jmp
outs
sub
bound
push
dec
adc
add
push
into
or
stos
mov
push
pop
mov
pop
cmp
je
push
xchg
push
mov
daa
mov
outs
(bad)
imul
inc
sbb
xchg
push
cmp
ja
push
jno
add
mov
jne
xchg
sbb
push
push
(bad)
(bad)
mov
bound
mov
mov
adc
out
mov
add
adc
push
jmp
push
leave
test
add
dec
into
ds
push
push
cmp
push
jo
xor
int
test
add
lea
js
loop
xor
push
mov
xchg
adc
add
jae
add
mov
adc
pop
dec
retf
add
adc
jne
out
(bad)
pop
dec
push
mov
loopne
jb
mov
add
mov
mov
push
pop
xor
cmps
lea
mov
adc
jne
nop
fdiv
xchg
sbb
add
cmp
inc
add
pop
pop
(bad)
dec
push
add
push
mov
dec
mov
int3
ds
int3
fcom
fisttp
clc
and
cli
call
push
push
mov
push
xchg
into
or
ret
inc
retf
jmp
arpl
aad
add
adc
mov
(bad)
xchg
push
mov
int3
jae
cmps
cmp
mov
sub
add
xchg
(bad)
test
mov
mov
shl
stos
mov
add
popf
int3
dec
xor
pop
repnz
mov
and
mov
clc
and
out
call
std
leave
inc
in
jne
(bad)
call
pop
add
mov
mov
push
pop
pop
and
push
mov
add
cwde
jmp
mov
mov
sbb
or
push
xor
cmps
sub
sbb
fld
sbb
adc
xchg
(bad)
cli
call
pop
test
mov
dec
imul
xchg
add
jne
and
mov
lea
push
lea
out
popf
adc
mov
mov
inc
pop
jmp
pop
xchg
rcl
mov
xchg
jmp
pushf
mov
jmp
dec
adc
aaa
jne
addr16
inc
mov
add
and
add
mov
clc
ss
pop
xchg
(bad)
push
mov
inc
or
mov
push
jl
add
ror
push
sbb
movs
jne
cmp
mov
es
add
es
push
pop
ret
push
mov
xor
test
mov
inc
sbb
or
add
push
xor
rcr
jb
cmps
sbb
add
ror
sbb
pop
add
mov
mov
nop
jmp
out
shl
js
ins
or
rol
add
popf
push
push
jmp
sahf
jmp
inc
int
add
push
les
mov
push
push
sub
push
add
popf
aas
(bad)
imul
cwde
jmp
push
push
or
call
pop
data16
push
xchg
mov
(bad)
xchg
cwde
arpl
sbb
push
test
popf
xor
jl
xchg
(bad)
jae
jmp
cmp
add
add
dec
push
pop
outs
(bad)
push
mov
inc
sbb
sbb
dec
mov
sub
into
movs
lahf
cmp
stos
cwde
dec
cld
dec
and
mov
mov
inc
mov
add
push
daa
fucomi
adc
mov
into
les
mov
fld
fmul
std
jne
movs
inc
stc
stos
ins
push
lea
or
inc
add
jmp
jmp
pop
stos
ins
fimul
stos
jmp
dec
cmp
int
xchg
mov
(bad)
call
add
mov
mov
sahf
fadd
or
cmp
fistp
aas
mov
inc
mov
arpl
lea
lea
pushf
shl
add
ror
or
or
dec
sar
sub
scas
movs
inc
fdivr
int3
call
xchg
pop
sahf
(bad)
call
push
(bad)
push
push
out
(bad)
jae
mov
push
jmp
inc
mov
cmp
div
push
push
cmp
(bad)
cmp
add
repnz
and
push
push
push
daa
pop
push
jmp
add
shl
(bad)
dec
jl
mov
pop
mov
fcomp
push
xchg
mov
mov
sahf
inc
sub
push
xor
leave
sahf
dec
push
push
dec
push
add
and
(bad)
push
add
jge
add
and
mov
call
push
push
call
notrack
std
(bad)
push
lods
sahf
inc
inc
and
mov
add
adc
popf
pushf
xchg
adc
push
out
and
sbb
rcr
add
push
xchg
ret
push
push
mov
popa
push
cmp
mov
add
xchg
sub
je
fwait
iret
imul
add
cld
mov
lea
pop
sahf
xchg
movs
add
(bad)
(bad)
fisttp
add
fstp
add
adc
pop
call
inc
in
cmp
loopne
mov
mov
mov
xchg
lds
retf
(bad)
iret
inc
sbb
movs
add
ss
pop
dec
mov
xchg
pop
(bad)
cmp
gs
mov
aaa
jns
pop
push
cmp
adc
adc
adc
add
inc
mov
daa
xlat
mov
push
mov
xchg
not
test
dec
add
add
sbb
mov
sti
out
(bad)
adc
pop
out
rcr
imul
push
pop
dec
or
adc
ds
pop
adc
pop
jmp
xchg
xchg
jl
(bad)
shl
adc
inc
mov
fdiv
xchg
(bad)
test
push
and
mov
inc
add
psubsb
and
add
retf
push
add
divps
mov
adc
add
adc
mov
mov
add
mov
sahf
rcl
lods
sbb
rcl
cmp
mov
adc
inc
cdq
sbb
xchg
push
pop
cmp
adc
add
jne
add
aad
sbb
out
mov
add
(bad)
clc
imul
clc
push
test
adc
add
adc
ret
test
xor
add
adc
aad
std
inc
rcr
(bad)
rcr
mov
adc
mov
cwde
dec
or
or
stos
push
adc
mov
(bad)
mov
call
inc
(bad)
jmp
inc
mov
rol
or
inc
adc
push
adc
inc
adc
inc
inc
cwde
inc
adc
pop
push
(bad)
and
add
push
inc
mov
cwde
dec
or
inc
push
add
(bad)
or
jmp
shr
add
sub
jge
daa
ret
pop
shr
xchg
ror
jmp
adc
push
adc
xchg
pop
inc
rol
sub
add
movs
ins
(bad)
dec
or
jle
dec
xchg
jbe
dec
sbb
pop
push
rol
rcl
retf
int
push
add
add
cwde
jbe
sbb
iret
jle
adc
rol
pop
push
ror
or
inc
adc
adc
sbb
ror
adc
and
inc
ror
mov
adc
adc
pop
sbb
ror
call
mov
mov
add
pop
push
add
or
jmp
dec
pop
mov
xchg
test
adc
add
xor
add
pop
pop
xor
jl
(bad)
jmp
mov
push
mov
jmp
shl
mov
lea
sbb
call
xor
adc
std
aaa
pop
int
pop
mov
add
mov
adc
adc
ror
mov
mov
push
sbb
adc
outs
push
push
sub
call
test
inc
sub
add
dec
push
add
rcr
add
cmps
push
add
loope
xchg
mov
cmp
add
xchg
(bad)
dec
xchg
test
inc
xor
or
xchg
test
mov
add
mov
jmp
and
shr
enter
add
adc
leave
lods
and
push
jl
shl
(bad)
dec
in
iret
add
mov
call
into
push
or
es
cpuid
outs
cs
loop
add
inc
inc
seto
inc
sbb
pop
push
add
rcr
ror
mov
sbb
and
mov
xchg
ja
fst
cmp
jmp
cli
mov
or
std
jbe
lods
call
pop
add
cs
push
dec
adc
imul
dec
cmp
adc
mov
jecxz
adc
dec
push
mov
cmp
inc
cmp
inc
cmp
dec
adc
ror
je
jbe
cli
mov
cmp
push
cmp
ds
add
int
pop
pop
push
dec
mov
xor
adc
and
cmp
popf
xchg
jge
aam
test
bound
mov
je
push
dec
adc
inc
push
inc
or
sbb
ja
pop
sbb
nop
in
pop
ss
cli
mov
cmp
add
in
fcmovu
ds
dec
cs
xchg
mov
into
cmp
addr16
mov
repz
mov
sbb
or
dec
and
push
mov
cmp
inc
ror
xor
mov
xchg
jbe
lea
mov
inc
cmp
pop
adc
push
xchg
pop
push
cld
cmp
add
cmp
pop
imul
sub
pop
cmp
sbb
add
arpl
pop
sbb
mov
cdq
jbe
or
adc
mov
inc
xchg
mov
or
mov
sub
and
cmp
pop
adc
push
lds
push
cld
or
sbb
int
push
mov
and
sub
std
mov
inc
xchg
adc
xor
mov
mov
and
jecxz
or
push
push
mov
in
adc
lock
out
xor
sahf
mov
sub
popa
inc
mov
adc
and
inc
test
xchg
push
call
add
add
imul
add
adc
add
add
jp
inc
jns
jbe
frstor
adc
inc
cmps
dec
or
fsub
inc
sar
ja
mov
push
mov
mov
das
mov
retf
inc
adc
xor
add
push
add
add
add
inc
loopne
cli
cli
retf
cmp
jnp
(bad)
(bad)
out
sbb
add
prefetchnta
cmp
cmp
sar
retf
cmp
dec
jb
loopne
cmp
loope
mov
push
enter
mov
(bad)
push
cmp
add
fist
push
lea
jmp
push
xchg
add
pop
imul
pop
add
mov
fmulp
add
test
adc
inc
push
lods
add
sbb
(bad)
dec
xchg
fld
sbb
pop
sbb
es
xor
mov
add
adc
ret
stc
stos
retf
add
mov
retf
inc
push
push
test
push
out
popf
push
add
push
jp
mov
daa
mov
mov
adc
pop
mov
push
call
mov
push
mov
std
inc
inc
mov
xor
and
dec
adc
mov
mov
adc
adc
dec
or
inc
mov
mov
push
mov
cmp
inc
adc
or
sbb
xchg
cmp
mov
and
(bad)
jne
stc
dec
fdiv
clc
stos
enter
enter
sub
fadd
add
push
push
xor
sar
pop
cmp
jmp
loop
push
clc
xor
ins
pop
pop
xchg
rcl
or
add
cmp
mov
pop
pop
or
inc
je
xchg
std
pop
loope
cmp
add
jp
jb
sbb
cwde
add
push
push
test
arpl
push
stos
gs
pop
pop
push
push
sbb
mov
sbb
push
jno
push
mov
xchg
mov
jbe
retf
push
and
imul
or
je
call
sbb
bound
inc
add
pop
and
pop
pop
pop
retf
outs
jne
pop
sti
jmp
push
rcr
cld
pop
or
mov
mov
inc
into
rol
dec
out
add
add
mov
jg
lea
(bad)
push
outs
retf
push
jmp
push
out
or
add
pop
push
mov
inc
dec
push
dec
pop
cmp
push
inc
add
mov
movzx
mov
or
mov
movzx
pop
add
mov
mov
mov
int
mov
mov
dec
inc
push
jbe
adc
pop
ret
add
mov
mov
cmp
test
jg
mov
add
xchg
mov
clc
(bad)
cmp
add
xor
or
arpl
add
les
jmp
xchg
arpl
dec
mov
add
inc
int
inc
mov
cld
cmp
mov
add
mov
inc
aaa
inc
mov
(bad)
mov
mov
fsubp
mov
or
fidiv
mov
or
cmp
mov
pop
add
and
mov
addr16
push
pop
in
lahf
dec
inc
inc
out
inc
cmp
cmp
cmovbe
arpl
inc
(bad)
cmovbe
push
inc
sub
cmovbe
and
inc
cmps
cmovbe
adc
inc
add
xchg
cmovbe
and
inc
xchg
inc
cmp
inc
or
cmovbe
jecxz
add
mov
mov
adc
add
ror
(bad)
jmp
cmp
mov
outs
mov
sub
mov
xchg
mov
push
mov
mov
dec
xchg
pop
inc
lock
mov
sub
cmp
fdivr
mov
mov
mov
leave
fisub
in
sahf
int3
or
scas
jl
xchg
pop
bnd
scas
jnp
xchg
sub
arpl
sub
add
stos
mov
clc
out
jo
inc
jb
push
pop
sub
push
std
iret
dec
imul
mov
scas
dec
inc
add
les
sub
dec
add
add
cli
lea
mov
xlat
cmp
ds
test
mov
in
mov
stos
add
jo
mov
scas
iret
sub
push
iret
sbb
loope
and
(bad)
jae
push
jne
push
fisttp
mov
add
mov
add
add
push
mov
push
pop
ins
push
jb
mov
fiadd
pop
aad
inc
cld
(bad)
xlat
je
push
ins
cli
sub
(bad)
je
add
jae
mov
cli
jmp
scas
inc
add
shl
inc
mov
or
sub
mov
js
add
adc
jmp
xlat
jne
add
jg
inc
fnstsw
inc
mov
inc
lods
inc
je
mov
add
pop
loopne
jb
lods
push
ins
push
jb
mov
jge
ror
adc
and
xchg
in
mov
push
pop
repz
push
and
inc
test
ins
mov
stos
inc
cmp
add
ror
and
scas
inc
dec
mov
add
(bad)
pop
mov
stos
dec
inc
jae
adc
addr16
stos
cmps
mov
or
aas
(bad)
call
in
cmp
dec
bound
add
adc
or
das
cmp
(bad)
std
inc
mov
adc
inc
test
stos
jl
sahf
push
push
pop
inc
sub
push
lods
(bad)
mov
push
shl
ror
(bad)
aaa
sbb
rcl
(bad)
(bad)
or
or
add
sub
xchg
add
cmp
push
lds
sbb
add
fsubr
div
lahf
test
add
dec
movs
xor
or
xchg
mov
pop
movs
xlat
push
mov
dec
push
mov
sbb
(bad)
fst
add
dec
push
mov
lock
cs
mov
sahf
inc
je
rol
push
imul
scas
sti
test
inc
and
(bad)
call
inc
ins
out
pop
mov
add
adc
add
pop
add
(bad)
jb
ds
mov
xchg
popf
sar
dec
cmp
loope
add
sub
int
xor
xchg
(bad)
out
sti
adc
mov
jg
xor
xchg
sti
mov
add
push
je
sahf
dec
pop
push
inc
push
push
aas
sub
enter
popf
sub
packssdw
dec
lahf
inc
cmp
fcom
pop
aad
ret
inc
(bad)
add
inc
ins
(bad)
daa
push
pop
aam
pop
call
(bad)
pop
cmp
add
std
xor
xor
xlat
cmp
mov
push
sbb
push
add
push
fnstcw
push
add
add
push
ins
jbe
push
push
inc
xlat
out
mov
jle
xor
xchg
stc
daa
rep
aam
add
fidiv
dec
mov
push
mov
cmps
ror
data16
jl
loopne
jp
out
add
add
xor
rcl
std
mov
stc
sub
inc
cmp
push
cdq
inc
pop
add
mov
je
outs
fdivr
jmp
rcr
push
add
add
int
lds
lahf
icebp
call
push
pop
jb
xchg
push
add
adc
add
and
add
jg
inc
push
cdq
dec
pop
add
push
inc
push
scas
sub
loopne
pop
pavgw
pop
shl
inc
xchg
lahf
dec
inc
les
data16
sbb
and
lahf
push
inc
sbb
and
mov
sbb
dec
xchg
xchg
addr16
xchg
sub
test
jl
push
jns
(bad)
sub
inc
mov
gs
clc
inc
add
ret
push
pop
xor
add
pop
add
add
jno
dec
sub
pop
add
icebp
add
add
jno
or
lahf
mov
inc
pop
add
pop
lahf
add
jmp
mov
sbb
add
pop
add
add
sbb
push
add
or
mov
mov
lods
jmp
add
sbb
mov
std
loopne
add
or
dec
add
add
xlat
inc
cmp
mov
add
cmp
push
pop
jb
ficom
dec
and
dec
xchg
popf
inc
pusha
add
sbb
mov
xchg
fwait
dec
pop
(bad)
push
ss
pop
add
push
lock
and
and
mov
popf
inc
dec
xor
mov
outs
xchg
pushf
inc
dec
pop
inc
push
inc
push
push
or
inc
jbe
mov
stc
pushf
inc
ins
push
pop
ss
dec
pushf
dec
pop
add
adc
inc
sar
and
and
xchg
sti
push
mov
sahf
add
(bad)
pushf
sahf
push
dec
adc
(bad)
jmp
fbld
pop
mov
cmps
test
add
call
add
repz
test
outs
std
add
adc
leave
and
add
adc
cmovno
std
dec
icebp
fwait
out
call
jns
neg
nop
in
push
mov
xchg
(bad)
jl
fwait
inc
cmp
aam
push
sub
iret
push
dec
and
mov
test
inc
leave
xchg
xor
cdq
inc
pop
xor
cwde
add
xchg
add
test
aam
pop
xchg
mov
push
daa
mov
or
add
xchg
mov
adc
jmp
push
(bad)
sub
push
mov
gs
fst
push
pop
push
dec
pop
call
es
leave
in
push
cmovo
aas
inc
push
shr
cmps
push
cmps
sahf
push
lea
add
push
pop
add
loopne
jp
out
add
test
adc
rcl
std
mov
sti
sub
inc
cmp
inc
pop
add
xchg
add
and
jmp
retf
jmp
jmp
xchg
inc
je
adc
lds
xchg
icebp
call
push
dec
jb
add
xchg
pop
or
adc
mov
add
adc
push
push
inc
mov
mov
xchg
jno
push
icebp
mov
sbb
xor
ds
push
mov
jb
add
das
lock
pusha
mov
das
inc
xor
push
pslld
mov
pop
mov
add
jae
jae
jae
xor
cdq
inc
pusha
(bad)
jns
jo
call
test
push
push
or
add
sub
inc
stc
cwde
push
sub
shr
xlat
out
jne
dec
xchg
leave
call
push
in
mov
cmp
neg
je
into
jmp
inc
ins
add
es
outs
cmp
arpl
mov
xchg
inc
js
jmp
(bad)
dec
xchg
inc
add
cwde
dec
je
sbb
icebp
add
add
push
std
mov
dec
ins
add
dec
fs
push
jbe
into
jb
mov
mov
add
add
adc
add
outs
fld
pavgw
or
inc
pop
lea
add
fscale
dec
call
inc
pop
sbb
adc
adc
mov
js
inc
sbb
and
inc
sbb
adc
add
jmp
mov
es
dec
je
sahf
push
int
mov
add
dec
push
xor
jb
(bad)
jmp
es
push
xor
into
dec
mov
(bad)
jno
into
test
sar
mov
or
mov
mov
mov
(bad)
(bad)
push
ins
adc
jne
add
popa
push
sahf
pop
push
add
jbe
add
call
pop
test
add
retf
xor
cmps
aam
push
sahf
jmp
and
ins
es
pop
adc
pop
call
push
adc
nop
add
sbb
test
sbb
add
add
push
push
xchg
and
mov
and
jae
xor
sbb
lds
add
xchg
adc
call
sbb
xchg
or
sbb
add
adc
dec
pop
push
int
pop
push
push
add
pop
mov
mov
push
fsubrp
mov
jne
and
ins
push
and
pop
adc
pop
call
cmp
pop
call
push
add
mov
xor
mov
pop
push
call
jb
pop
jo
call
call
(bad)
jae
mov
xchg
(bad)
mov
add
rcl
cdq
and
push
sub
mov
mov
and
add
xchg
xchg
add
xor
push
lahf
dec
cmp
sbb
add
mov
jne
out
pop
test
fs
retf
xor
fimul
add
jmp
es
lahf
xor
mov
jmp
xor
sbb
inc
int3
sahf
mov
call
sahf
push
int
add
push
pop
pusha
(bad)
jp
inc
pop
add
aas
rcl
std
mov
pop
lea
mov
sahf
xor
mov
movs
std
jmp
stos
sahf
add
and
loop
jmp
ds
cmp
jae
cdq
cld
add
ja
sahf
icebp
call
cmps
data16
(bad)
(bad)
dec
xchg
cld
add
cdq
test
or
mov
cmp
add
aad
or
sub
or
jne
push
or
jne
xchg
rol
adc
inc
mov
data16
pushf
ss
data16
pushf
cmp
data16
pushf
cmp
data16
pushf
cmp
data16
pushf
cmp
data16
pushf
ss
or
pushf
ss
add
add
iret
mov
adc
mov
xor
jbe
fwait
jno
xchg
test
add
jae
inc
std
mov
add
dec
mov
cli
(bad)
jmp
xchg
add
in
mov
jecxz
or
inc
lea
add
mov
(bad)
add
sub
mov
test
(bad)
cmp
mov
add
inc
pusha
sub
inc
xchg
popa
pusha
or
jl
inc
push
sahf
add
xchg
mov
mov
pop
mov
push
mov
add
jecxz
mov
and
mov
push
add
add
cwde
call
sub
enclu
std
dec
and
inc
ins
adc
or
jmp
pop
pop
test
add
out
xor
mov
cld
inc
dec
xor
lahf
shr
sub
jmp
dec
push
mov
out
cmps
jmp
mov
sub
sbb
xor
add
sbb
mov
dec
cmp
push
xchg
mov
int
jl
inc
push
add
push
xor
inc
mov
popa
and
pop
pop
pop
push
push
push
into
dec
mov
movs
or
add
aam
inc
adc
lahf
mov
xor
sub
mov
call
pop
xchg
xchg
add
add
mov
lahf
dec
cmp
pop
xor
xchg
outs
pop
mov
pop
mov
xor
xchg
push
fst
mov
push
adc
dec
adc
fstp
mov
pop
xchg
adc
jmp
lea
mov
pop
aaa
mov
add
add
xchg
sub
dec
cmp
jmp
ret
xor
(bad)
shl
mov
push
add
test
inc
mov
imul
out
add
push
seto
dec
aad
dec
leave
sub
mov
pushf
adc
or
cs
inc
push
xor
push
inc
push
jl
xor
or
add
and
int
push
mov
jp
inc
fstp
call
adc
leave
in
push
movups
aas
inc
push
(bad)
jmp
cmp
popa
pop
mov
xchg
sahf
outs
adc
pushw
mov
push
inc
sub
je
xchg
loopne
aam
and
mov
xchg
and
and
push
mov
iret
ds
xchg
(bad)
jmp
mov
iret
jle
jbe
add
fst
xor
dec
pop
ret
out
ret
and
mov
sub
je
popf
dec
sub
sub
stos
in
std
push
inc
rcl
jb
out
sbb
add
xchg
and
shl
jle
sbb
jge
jne
jmp
pop
push
(bad)
or
adc
add
jmp
push
out
push
pop
dec
inc
mov
or
push
mov
add
dec
jmp
cmp
xor
or
push
dec
mov
add
aaa
dec
and
adc
leave
push
add
daa
adc
ja
jmp
and
jecxz
les
icebp
jne
jns
pop
xor
xor
js
(bad)
jmp
or
jmp
sub
inc
and
cdq
pop
sbb
push
cli
pop
push
mov
ret
xchg
outs
sbb
sbb
jl
xor
mov
add
rol
icebp
push
sub
pop
xchg
and
mov
call
add
inc
into
out
xchg
fwait
jl
adc
mov
mov
sub
jb
inc
sub
jle
je
xor
fwait
jl
(bad)
push
adc
jmp
mov
add
daa
div
cdq
test
push
push
cs
movs
jnp
add
ins
push
je
in
jae
xchg
push
stos
bound
call
inc
push
push
mov
and
mov
adc
mov
sub
xor
shl
sahf
aam
inc
jns
mov
ret
add
inc
xchg
jmp
inc
xor
add
cmp
mov
sub
psrlw
(bad)
dec
dec
or
xchg
rol
adc
or
sbb
dec
adc
mov
adc
sub
push
push
adc
add
xchg
jne
dec
mov
cmc
mov
cdq
inc
in
inc
jns
add
add
mov
ror
and
fimul
mov
inc
ja
add
jmp
xchg
jl
pop
or
mov
cmp
dec
shl
dec
pusha
inc
xchg
ret
or
jb
mov
(bad)
cmp
(bad)
std
inc
add
(bad)
xor
aaa
push
push
(bad)
shr
ja
push
inc
call
push
xor
sub
pop
push
pop
inc
rcl
lock
adc
add
pop
mov
mov
xor
test
cmp
jmp
enter
sbb
test
ret
add
mov
mov
dec
mov
or
add
pop
call
pop
push
gs
neg
xchg
iret
jne
mov
and
sti
add
or
(bad)
adc
(bad)
adc
add
lea
pushf
add
dec
sub
or
jne
(bad)
dec
and
push
cmp
ror
inc
rol
add
xchg
(bad)
push
adc
rcl
pop
pop
pop
xor
adc
in
mov
pop
jmp
cmp
enter
inc
push
push
cmp
add
cdq
mov
push
aas
sbb
nop
sbb
aaa
inc
mov
lea
cmp
fdivr
add
stos
sar
add
xchg
adc
adc
pop
mov
xchg
cli
or
push
mov
sub
neg
loopne
(bad)
ror
iret
sbb
jmp
test
rol
(bad)
push
call
mov
inc
adc
add
mov
stos
(bad)
(bad)
bound
mov
call
add
std
inc
add
lea
ficomp
mul
add
sbb
mov
adc
fst
inc
test
retf
jnp
fld
xor
dec
add
fcom
sbb
mov
adc
inc
mov
shr
ficom
or
lahf
pop
call
add
push
pop
in
sbb
adc
inc
aaa
mov
add
push
or
fidiv
mov
push
add
xchg
jl
or
adc
mov
das
push
mov
xor
(bad)
loopne
dec
inc
xchg
ret
or
or
and
jno
inc
pop
and
sbb
add
add
mov
repz
pop
inc
add
inc
mov
cmps
sbb
stos
stos
adc
push
inc
fwait
pop
jmp
dec
sahf
push
or
fidiv
jecxz
je
adc
add
dec
adc
inc
dec
adc
sbb
adc
mov
test
xor
and
add
adc
add
adc
sqrtps
std
dec
popf
dec
inc
push
fdiv
mov
daa
cmp
jecxz
xchg
xchg
jl
int
test
popf
adc
mov
repnz
call
inc
lea
push
test
pop
add
push
rcl
sub
mov
cmp
mov
mov
adc
sbb
stc
(bad)
sbb
dec
cmc
lahf
retf
shr
pop
fdivr
push
xor
mov
mov
cdq
pop
inc
nop
pop
jno
rcl
not
add
add
adc
int
push
xor
sbb
test
inc
and
push
movs
retf
ror
xor
fisubr
mov
add
xor
dec
mov
xor
cld
pop
pop
push
call
(bad)
mov
dec
adc
add
adc
pusha
sub
push
jmp
ss
sbb
leave
mov
mov
cmc
add
sub
inc
int
jle
or
adc
xor
add
add
int
inc
adc
sbb
add
xchg
test
int
cmp
sbb
icebp
add
fdivp
mov
sub
mov
pop
std
inc
mov
aad
test
stos
and
add
dec
inc
data16
jae
sahf
push
fadd
fst
mov
std
inc
lea
fld
and
mov
add
outs
test
add
sbb
and
push
test
frstor
fstp
mov
sahf
inc
hlt
movs
fdiv
add
sub
jge
adc
add
pushf
mov
sbb
xchg
inc
popf
push
push
pop
popf
pop
add
push
add
jge
pop
add
add
fidiv
or
pop
and
popf
inc
cld
pop
popa
add
jmp
inc
cmp
sahf
inc
and
in
test
mov
(bad)
cmp
cmps
push
mov
dec
mov
lahf
adc
stos
sar
jge
pop
je
inc
fdiv
cmp
and
vgf2p8mulb
add
shr
je
es
stc
jmp
(bad)
fwait
mov
add
add
adc
inc
movs
push
inc
cld
fisubr
enter
jmp
test
cld
std
(bad)
push
push
add
dec
and
sbb
shr
and
xchg
mov
inc
test
fprem1
mov
add
fld
xchg
daa
inc
cld
pop
push
add
(bad)
mov
iret
adc
(bad)
femms
sub
adc
out
jbe
(bad)
xor
xrelease
and
mov
adc
or
jns
inc
and
aad
add
add
scas
loopne
(bad)
bound
add
(bad)
cli
add
jmp
test
add
cmps
sar
packsswb
retf
sar
sub
and
dec
mov
cmc
adc
add
repz
into
push
mov
pushf
aaa
add
or
add
and
adc
fcmovnu
push
mov
adc
add
lods
or
add
call
ror
sbb
into
sub
add
jle
dec
cwde
xor
push
cmp
icebp
aam
in
(bad)
push
or
call
sub
test
aad
pavgw
std
dec
movs
xchg
retf
shr
and
add
inc
mov
dec
xor
rol
add
inc
add
dec
and
fld
dec
xor
je
(bad)
into
adc
(bad)
mov
ss
(bad)
xchg
add
dec
fmul
xchg
adc
inc
sbb
inc
push
lea
inc
add
rcl
dec
adc
(bad)
push
(bad)
std
call
sbb
add
add
mov
cmp
into
mov
push
shl
lea
sbb
adc
push
mov
sub
pop
shl
into
dec
inc
mov
or
in
sub
mov
mov
sldt
movs
(bad)
cmp
and
inc
pop
cmp
cli
sub
fild
add
mov
cdq
je
and
add
lds
pop
adc
add
sar
rcr
fs
stos
sub
hlt
xor
xchg
xchg
inc
in
vpcmpeqd
fwait
inc
hlt
pop
popf
icebp
add
test
jne
sub
xchg
loope
or
vmovapd
sub
inc
jns
inc
in
add
pushf
(bad)
loope
push
sbb
inc
int
jmp
jge
adc
add
(bad)
stc
psllq
std
dec
xor
adc
call
nop
sti
push
outs
dec
mov
into
xor
add
movs
aam
rol
mov
mov
push
inc
int3
aaa
add
loop
mov
sahf
xor
or
out
sbb
add
add
push
fcom
add
popf
movs
jae
(bad)
push
adc
adc
jmp
push
aas
sbb
in
add
dec
or
add
lea
shl
pop
inc
inc
cwde
ret
or
sub
jb
nop
dec
push
std
sbb
add
(bad)
push
and
mov
inc
pop
jmp
sub
pop
pop
inc
jmp
adc
rcr
aam
xor
inc
xchg
jle
into
movs
in
push
call
jbe
and
mov
mov
push
test
mov
scas
std
mov
mov
(bad)
dec
pop
mov
xchg
rcl
aam
test
adc
inc
jne
ss
dec
xor
jmp
pop
dec
pop
add
xchg
les
inc
cmp
jecxz
test
sub
std
push
popa
sbb
add
lea
push
std
(bad)
clc
push
mov
mov
add
add
push
stc
adc
mov
dec
fxch
and
push
sbb
dec
pop
in
mov
mov
cmp
and
ror
or
xor
shl
mov
in
lock
mov
mov
inc
lea
xor
shr
sbb
loope
jge
sbb
call
sbb
dec
xor
mov
cmp
ret
or
dec
les
fucomp
jb
mov
stos
dec
int3
sub
test
mov
adc
imul
xor
mov
jmp
add
mov
jl
dec
sbb
jne
sub
sub
push
mov
mov
dec
std
(bad)
js
mov
dec
xor
stc
mov
dec
add
xchg
mov
xlat
data16
shl
stos
cld
mov
push
add
data16
cmp
cmc
add
adc
inc
test
add
inc
fld
mov
inc
cld
push
retf
fld
xchg
shr
jb
or
addr16
(bad)
push
and
xchg
mov
xor
pop
ss
add
(bad)
mov
add
pop
enter
cmp
and
test
or
mov
scas
mov
shl
shr
add
adc
mov
int3
std
call
inc
mov
mov
adc
add
jecxz
movups
dec
push
add
popf
pushf
or
dec
lock
push
sbb
popf
xor
dec
dec
xchg
jbe
aam
xchg
xchg
xchg
pop
adc
push
jmp
lea
add
addr16
pop
pop
add
adc
and
inc
mov
mov
or
jmp
aaa
adc
out
mov
jg
push
dec
mov
add
adc
loop
mov
xchg
inc
inc
sub
mov
add
lea
and
lods
cwde
rcl
xlat
aad
add
int
push
mov
push
ss
dec
sbb
inc
dec
push
adc
add
push
push
(bad)
dec
jl
and
inc
or
aad
mov
xor
inc
or
mov
mov
jns
mov
or
pop
in
jbe
gs
or
add
add
pop
mov
push
or
stos
mov
jp
in
ror
push
rol
mov
mov
jp
lock
(bad)
sub
(bad)
adc
std
dec
sbb
hlt
sbb
dec
adc
cmp
ret
cmps
cmp
mov
loopne
jge
adc
adc
stc
pavgw
std
dec
xor
or
dec
add
cld
scas
push
cmp
dec
adc
xchg
mov
pop
sbb
into
and
sar
test
call
inc
leave
push
ins
fsub
mov
or
hlt
pop
(bad)
lds
pop
call
push
aaa
mov
jns
lock
or
jmp
add
not
cmp
or
add
adc
dec
xor
sti
mov
popf
pop
fdivr
and
rcr
cmp
or
inc
and
in
(bad)
aad
add
dec
add
push
or
mov
push
call
add
into
retf
ja
cli
mov
sub
push
or
push
sub
aam
rcr
pop
mov
sbb
add
(bad)
adc
std
push
and
jmp
aam
mov
dec
call
mov
add
je
add
mov
repnz
xchg
mov
(bad)
push
add
add
xor
cmc
dec
push
aas
sbb
(bad)
icebp
jmp
mov
push
aaa
push
mov
mov
add
push
rol
fstp
and
adc
add
inc
cld
pop
pusha
std
(bad)
cwde
or
mov
call
cmps
(bad)
pop
inc
(bad)
add
lods
mov
cmp
les
add
push
jmp
call
push
add
adc
mov
and
(bad)
mov
or
add
popf
jl
cld
call
into
jle
mov
xchg
ret
or
in
inc
mov
add
adc
adc
pop
enter
shr
adc
shr
push
mov
inc
mov
clc
mov
push
cmp
rcr
inc
fisttp
popf
push
in
xlat
repz
inc
adc
mov
lds
push
imul
push
push
and
dec
jnp
cld
add
call
(bad)
fmul
into
jle
push
mov
and
fcomp
adc
inc
mov
jns
dec
jle
shr
pop
arpl
push
mov
ja
add
sti
mov
dec
cmp
into
bound
mov
and
sub
add
sbb
add
add
xlat
lock
dec
hlt
movs
in
test
mov
(bad)
paddsb
and
leave
outs
or
mov
sbb
dec
sar
dec
push
adc
inc
inc
xchg
mov
jae
(bad)
jl
(bad)
cli
adc
or
mov
or
cmp
add
or
mov
dec
dec
out
push
cmp
mov
and
into
cmovne
add
push
adc
add
adc
add
(bad)
adc
mov
mov
adc
lds
stc
movs
adc
cmp
add
rcl
call
(bad)
inc
lds
retf
add
xlat
(bad)
mov
adc
mov
jns
fcom
jae
(bad)
ss
ja
inc
movs
mov
cmp
mov
mov
ja
fdiv
sub
push
inc
movs
loope
in
inc
in
or
push
div
mov
icebp
push
mov
adc
add
jl
(bad)
cld
and
xchg
or
mov
push
adc
adc
jmp
into
mov
add
jmp
add
xor
dec
adc
add
add
aas
fld
add
push
add
(bad)
ins
sahf
fmul
dec
adc
(bad)
sbb
and
cmp
push
je
ja
in
movs
adc
sbb
ja
in
mov
in
xchg
adc
pop
push
mov
mov
jns
cmp
nop
or
inc
sub
cmc
std
(bad)
pop
sbb
add
retf
lock
sbb
(bad)
fdivr
add
shl
add
push
mov
je
xor
sbb
cmp
(bad)
cmp
fidiv
mov
repz
int
cmp
fwait
or
push
dec
popf
cmc
add
add
mov
add
daa
fld
mov
inc
cld
push
xor
(bad)
ins
xchg
cmp
aad
cwde
gs
call
(bad)
aam
mov
outs
aas
adc
aam
mov
outs
inc
clc
movs
aad
mov
mov
call
outs
aas
xor
push
repnz
add
or
sbb
add
or
cld
dec
movs
add
inc
fldcw
in
push
aad
mov
sbb
mov
repnz
xchg
outs
jbe
and
mov
fdivr
adc
enter
and
test
mov
ins
dec
loopne
scas
or
call
(bad)
inc
push
push
sbb
or
mov
ins
dec
shl
add
std
push
dec
or
scas
adc
adc
cmp
je
push
pop
jno
pop
xchg
or
mov
jmp
ret
std
std
call
or
mov
jmp
adc
inc
add
adc
mov
icebp
mov
or
xor
cmc
adc
mov
add
dec
push
add
(bad)
rol
xlat
sti
iret
cmp
add
xchg
mov
add
adc
test
test
cmps
push
movs
out
cmp
mov
(bad)
push
cmp
add
add
sbb
add
sbb
cmp
add
sbb
add
sbb
add
add
adc
add
aas
add
adc
aas
add
adc
add
cmp
add
cmp
add
sbb
add
sbb
add
add
cmp
add
sbb
add
xchg
add
adc
add
mov
test
pop
mov
test
out
loopne
mov
add
push
cwde
and
popf
adc
push
sbb
cmp
add
retf
inc
add
xchg
cmp
pop
adc
add
nop
sbb
aad
push
add
add
pop
adc
add
dec
das
div
sub
jne
sbb
add
mov
dec
jne
or
add
push
das
div
pop
dec
jne
lds
lahf
mov
mov
ret
adc
mov
lahf
mov
add
je
push
push
in
mov
je
add
push
cld
(bad)
mov
pop
adc
enter
(bad)
int
add
jle
jns
cmps
lods
mov
adc
mov
mov
or
add
adc
push
add
adc
lods
mov
add
inc
sbb
fst
jae
sbb
mov
or
add
push
inc
cld
(bad)
or
punpckldq
data16
jb
and
xchg
lahf
xchg
add
mov
pop
adc
push
or
movs
nop
pop
push
adc
mov
call
imul
cld
mov
dec
pop
add
std
jg
gs
dec
add
lahf
sbb
lods
mov
xchg
xchg
popa
cld
int
dec
fcom
or
xchg
sub
push
fisubr
in
mov
out
cmps
fisubr
sbb
push
repz
adc
mov
add
sbb
add
mov
pop
mov
dec
sbb
cmp
mov
sbb
lea
sbb
enter
mov
inc
xchg
inc
lock
sahf
into
sar
dec
add
or
jbe
clc
jle
sahf
dec
clc
stos
pop
cld
cmp
clc
xchg
jb
dec
add
retf
dec
repz
push
jge
add
ds
push
xchg
fmul
mov
mov
call
lock
mov
fadd
fistp
lds
mov
pop
adc
stos
dec
add
pop
add
js
or
sti
call
xchg
mov
or
test
push
inc
clc
dec
cmp
add
ficom
dec
repz
cmp
loope
jg
jns
mov
data16
add
popf
push
or
cmp
dec
clc
aam
cld
test
add
xchg
pop
mov
aam
lock
pop
or
popf
push
dec
out
loopne
xor
jnp
cwde
add
psrad
cmp
jmp
stos
pop
mov
fidivr
cld
add
push
add
outs
test
call
fadd
pop
out
cld
add
push
jns
add
imul
pop
fnstsw
in
jno
inc
lds
push
cld
push
pop
ret
push
lea
aad
sub
call
or
out
adc
punpckldq
mov
fadd
jmp
jle
cs
or
and
mov
xchg
test
popa
lea
inc
fmul
add
bound
mov
and
mov
aad
out
into
aam
test
lock
push
aaa
pop
xchg
data16
mov
call
call
leave
into
inc
xchg
push
cld
adc
nop
sbb
sbb
cmp
pop
(bad)
cmps
push
inc
adc
add
aam
dec
add
stc
rol
cmp
aam
mov
sahf
sub
add
xor
xchg
call
pop
dec
pop
add
cwde
inc
clc
mov
adc
add
das
leave
repz
dec
xchg
pop
int3
jmp
mov
(bad)
ins
or
pusha
call
add
int
xchg
add
inc
adc
pop
cwde
test
pop
mov
jae
sbb
adc
pop
inc
adc
add
mov
shl
inc
sbb
and
add
adc
jl
xchg
inc
clc
fs
add
push
inc
adc
int
daa
ret
int
sbb
add
xchg
sti
sbb
push
push
dec
push
out
jl
cwde
inc
cld
adc
hlt
mov
inc
adc
popf
xchg
mov
push
mov
lea
dec
mov
inc
adc
pop
js
mov
call
add
sti
(bad)
jmp
xchg
add
push
xchg
mov
add
or
adc
xchg
test
mov
fs
lock
sbb
or
inc
rol
sbb
add
daa
xchg
push
pop
rcl
cmp
shl
add
loopne
rcl
add
loop
mov
jae
inc
add
pop
call
ja
xchg
aam
hlt
call
sahf
stos
push
adc
adc
pop
cmp
sti
mov
adc
add
adc
add
pop
(bad)
adc
mov
sbb
jmp
jno
pop
fwait
cmp
int
call
pop
or
ret
add
cdq
add
xchg
fdivr
lods
cmovg
jp
mov
push
mov
(bad)
mov
mov
sbb
mov
mov
mov
jg
adc
test
(bad)
jno
test
mov
cld
sbb
jns
jbe
je
jbe
jns
add
mov
mov
or
add
cmp
inc
gs
xchg
jg
cmps
pop
add
xchg
mov
adc
test
sbb
add
mov
arpl
push
mov
test
adc
push
out
push
cmp
add
cmp
push
push
dec
jg
add
test
mov
aas
vaddsubps
jle
mov
mov
add
ins
add
mov
arpl
jne
ins
(bad)
mov
push
xchg
ror
sbb
add
(bad)
inc
call
mov
mov
push
sbb
test
mov
add
mov
bound
add
push
aaa
repz
or
dec
push
xchg
xchg
push
sub
sbb
jle
pop
mov
mov
(bad)
(bad)
sar
seto
or
adc
add
or
or
mov
inc
xor
add
mov
adc
lods
adc
call
xor
add
ret
mov
mov
fisttp
pop
aas
add
add
dec
mov
test
jno
sbb
jmp
adc
test
add
sar
test
add
jmp
add
mov
adc
addr16
mov
nop
jl
adc
mov
or
or
mov
pop
nop
mov
sbb
in
adc
and
(bad)
loopne
cwde
hlt
cli
(bad)
call
add
mov
jecxz
adc
add
out
lea
lock
mov
add
push
mov
mov
adc
shr
adc
data16
mov
into
sbb
mov
lock
or
int
mov
dec
daa
fbstp
gs
punpckldq
popf
adc
dec
xchg
ins
add
jmp
imul
stos
push
add
sbb
or
mov
std
(bad)
call
imul
adc
jmp
add
data16
hlt
xchg
xchg
dec
or
cld
(bad)
call
ins
xchg
mov
jecxz
add
aam
mov
jge
push
retf
adc
mov
pop
(bad)
shl
dec
or
fbstp
mov
stc
(bad)
call
cld
xchg
popa
dec
or
nop
mov
dec
adc
mov
(bad)
cld
lods
adc
mov
mov
inc
add
mov
jg
pop
mov
jg
pop
popa
mov
push
or
mov
adc
sub
loope
push
call
mov
fldenv
gs
add
mov
sbb
jecxz
adc
sbb
mov
add
stos
push
add
js
aad
or
pop
in
adc
add
retf
jae
out
mov
mov
mov
push
add
sti
gs
ror
add
fidiv
mov
loope
into
dec
retf
stc
and
(bad)
jmp
xchg
jle
xchg
push
mov
(bad)
jmp
imul
lea
cmp
cld
xchg
pop
cwde
mov
pop
fisttp
add
push
adc
cmp
mov
fiadd
dec
sbb
out
fldcw
sbb
in
or
test
or
lahf
test
push
sldt
loop
les
fst
xchg
mov
xchg
jno
mov
inc
push
push
add
pop
sbb
push
adc
in
xchg
push
push
mov
stos
push
adc
jge
(bad)
mov
dec
sub
jno
mov
add
add
pop
cld
jmp
jno
mov
add
jae
jecxz
push
scas
mov
jge
push
retf
adc
jg
adc
mov
pop
(bad)
shl
fdiv
mov
add
add
xor
js
pop
dec
or
mov
int
mov
pop
cwde
mov
int
lods
adc
xchg
mov
pop
mov
adc
mov
mov
add
add
aad
mov
movs
push
add
test
popa
add
add
inc
clc
jne
cmp
pop
cmps
out
pop
retf
pop
mov
add
sbb
punpcklbw
pop
pop
xchg
rcl
popf
pop
mov
add
adc
add
int
call
mov
clc
push
add
adc
cli
call
adc
clc
jmp
push
pop
pavgw
out
xchg
adc
leave
push
jle
pop
adc
jg
dec
push
mov
(bad)
or
add
add
test
cmc
or
aas
jle
bound
adc
pop
dec
adc
fimul
mov
push
add
pop
push
or
add
mov
dec
fadd
mov
dec
add
pop
dec
mov
iret
out
add
into
into
icebp
mov
jbe
mov
add
add
pop
xchg
xchg
ret
jmp
sar
jb
nop
add
add
lods
push
add
adc
and
dec
retw
push
sbb
call
test
add
pop
cwde
mov
std
fild
adc
add
sbb
inc
test
push
or
scas
push
add
dec
cld
mov
stc
leave
pushw
mov
nop
mov
les
out
(bad)
inc
or
(bad)
lock
stos
push
add
pop
mov
mov
add
add
pop
outs
cld
xchg
(bad)
add
sbb
or
or
pop
cwde
mov
or
jmp
adc
adc
push
push
or
scas
push
add
dec
cld
mov
clc
leave
mov
ret
nop
mov
aam
mov
adc
push
nop
movs
add
add
add
rol
movs
lods
push
add
fmul
mov
xchg
cmc
or
cmp
adc
mov
dec
push
add
pop
(bad)
shr
push
dec
adc
fisttp
mov
push
add
pop
push
or
add
cwde
mov
dec
fadd
mov
add
dec
add
pop
dec
mov
iret
out
into
iret
out
mov
jae
mov
add
add
pop
mov
cmp
push
nop
add
add
lods
push
add
pop
ins
jmp
push
mov
xor
pop
push
or
pop
mov
add
sub
push
leave
pop
inc
xchg
or
push
mov
add
mov
push
mov
shl
push
fadd
nop
cmc
and
add
push
push
add
sbb
jmp
add
js
cmps
adc
mov
dec
nop
mov
add
frstor
lods
adc
sar
test
push
fst
mov
push
add
out
adc
xor
mov
and
add
dec
int
jns
and
cld
call
push
push
test
mov
adc
cmp
lock
inc
dec
jo
(bad)
or
push
ror
dec
and
inc
inc
dec
jo
(bad)
or
int
add
test
mov
out
xchg
sbb
dec
cdq
dec
push
or
and
sub
jno
or
leave
mov
cld
xchg
popa
cld
frstor
mov
mov
add
xchg
push
ds
and
in
add
nop
push
add
jne
std
dec
sti
hlt
stos
mov
std
dec
mov
call
mov
mov
add
mov
iret
add
xlat
jmp
mov
call
sbb
xchg
adc
xor
jg
add
in
je
stos
inc
or
mov
mov
aas
int3
adc
add
popf
ror
outs
sbb
add
mov
test
sbb
add
inc
mov
stc
cwde
aaa
dec
lea
xchg
push
mov
dec
outs
add
add
unpcklps
pop
dec
sbb
jmp
sahf
add
mov
add
cmps
invd
mov
xchg
call
data16
ret
sahf
dec
sahf
mov
fs
mov
adc
jge
add
add
dec
popf
dec
inc
cld
frstor
mov
std
dec
xchg
pop
or
inc
add
adc
push
fcomp
push
mov
rcr
inc
sar
adc
mov
icebp
or
xchg
mov
loop
bound
add
mov
sahf
in
std
call
enter
sahf
dec
adc
or
mov
mov
add
fwait
sbb
inc
dec
mov
adc
inc
shr
call
inc
je
add
int
jmp
and
sbb
mov
int
push
cmp
mov
int3
std
dec
push
mov
mov
cmp
adc
add
loope
push
xchg
or
lds
das
mov
push
out
add
int
nop
movs
ret
adc
rdmsr
das
dec
mov
push
add
and
jge
call
and
mov
std
dec
sub
psrad
add
lea
retf
or
aas
mov
nop
mov
add
(bad)
int3
xchg
aad
or
dec
push
mov
add
cmp
nop
mov
ffree
mov
mov
iret
out
push
call
jmp
data16
push
add
sbb
jmp
call
mov
add
fld
add
cld
psrad
add
mov
mov
push
xor
mov
or
pop
adc
dec
push
cmp
jmp
test
sbb
call
push
adc
adc
mov
ror
add
stos
push
adc
mov
les
or
test
outs
hlt
jmp
lahf
pop
or
lahf
xchg
xchg
xchg
adc
add
loop
test
push
lea
xchg
adc
mov
je
add
dec
cld
(bad)
inc
sbb
xchg
adc
je
jmp
aad
push
add
add
aaa
retf
sub
(bad)
mov
dec
add
ret
xchg
add
test
sbb
stos
push
adc
adc
popf
cwde
mov
leave
ror
push
adc
int
leave
data16
dec
or
sar
cmps
push
iret
out
sbb
add
add
cwde
mov
jmp
dec
mov
add
pop
sahf
retf
shl
or
sbb
and
out
movs
adc
or
pop
sub
clc
xchg
lahf
mov
retf
fs
cld
jle
sbb
loop
pop
or
inc
mov
push
add
rcr
leave
mov
dec
adc
pop
or
popf
sahf
sbb
push
inc
mov
inc
push
cmps
adc
daa
xor
out
(bad)
pop
clc
lea
lock
xchg
mov
arpl
push
add
call
fwait
pop
or
xchg
inc
add
jb
imul
pop
jbe
aaa
into
sbb
xlat
mov
pop
hlt
repz
nop
mov
or
ret
adc
int3
mov
fwait
nop
mov
sbb
popf
adc
out
mov
inc
inc
cmps
adc
pop
das
iret
out
add
(bad)
pop
cld
lea
lods
mov
or
mov
or
push
add
test
dec
lock
mov
and
sti
(bad)
ficomp
add
fnstsw
adc
jg
retf
or
popf
fwait
(bad)
sar
dec
or
sbb
add
xchg
adc
les
or
dec
mov
dec
adc
sbb
xchg
nop
mov
popf
les
sar
xor
push
mov
add
sbb
sbb
add
pop
mov
push
add
push
(bad)
add
inc
add
sar
pop
test
in
add
adc
cmp
add
ja
(bad)
pop
or
add
popf
sub
test
add
sub
jne
cmp
pop
push
mov
call
xor
or
add
jns
das
rol
das
rol
dec
or
xchg
fwait
mov
adc
mov
xchg
dec
or
push
dec
cwde
cwde
mov
or
jmp
sbb
push
xchg
mov
dec
mov
or
daa
xchg
lea
mov
sbb
add
mov
mov
dec
in
inc
adc
nop
mov
data16
push
cwde
mov
sbb
xor
jo
mov
adc
dec
mov
jo
cdq
push
adc
pop
std
xchg
pop
pop
jmp
inc
lds
cwde
dec
or
adc
cmc
test
add
cdq
sbb
push
adc
add
fs
xchg
cwde
mov
ret
push
xchg
in
push
dec
xchg
pop
or
lock
pop
rol
adc
mov
dec
aaa
fsub
adc
mov
es
add
loope
std
ss
add
ss
add
sbb
add
add
mov
add
pop
call
or
push
shl
xor
sbb
mov
adc
mov
call
push
pushf
adc
add
adc
add
pop
inc
das
sbb
push
push
pop
inc
pop
sbb
push
pusha
pop
inc
out
sbb
pop
inc
fistp
mov
and
inc
scas
sbb
add
pop
inc
scas
sbb
add
push
inc
scas
sbb
add
push
inc
outs
sbb
add
mov
stos
push
inc
scas
push
inc
adc
call
add
test
repz
cmp
das
es
and
dec
cld
(bad)
fisttp
test
or
ficom
setg
mov
mov
push
repnz
pop
std
add
pop
add
stos
push
repnz
or
add
or
mov
repnz
xor
add
imul
mov
push
add
repnz
or
add
or
add
push
add
pavgw
or
stos
adc
psllq
repnz
add
repnz
repnz
repnz
add
repnz
add
add
mov
adc
inc
je
stos
out
sub
nop
std
dec
push
out
add
inc
xlat
jne
popf
in
dec
adc
daa
icebp
inc
jg
shl
xchg
jbe
or
fcom
test
out
mov
in
dec
out
test
xchg
pop
xchg
icebp
push
fild
or
or
add
adc
push
mov
inc
shl
and
pop
push
call
or
dec
adc
mov
sub
add
test
je
iret
ret
mov
mov
and
and
mov
call
jne
xchg
jns
mov
mov
pop
call
push
add
movs
aad
add
xchg
adc
mov
(bad)
jmp
stc
int3
mov
sbb
fldcw
call
(bad)
sbb
enter
dec
add
or
adc
inc
outs
inc
add
mov
mov
shl
and
xchg
sbb
add
inc
daa
add
add
add
mov
popf
(bad)
add
das
add
mov
inc
frstor
push
add
rol
ja
mov
mov
mov
inc
(bad)
fsub
or
stos
aam
popf
ds
mov
xor
stos
int3
inc
pop
idiv
xchg
sbb
push
dec
fiadd
mov
fsub
or
fadd
stos
rol
aam
adc
push
sbb
xor
inc
sbb
rcl
pop
rcr
xchg
sbb
add
jecxz
repz
imul
push
(bad)
xchg
sbb
mov
call
fsub
sbb
(bad)
call
es
jne
inc
add
add
add
push
(bad)
mov
mov
inc
add
push
mov
loopne
and
add
jne
inc
add
outs
mov
popf
inc
aad
add
sub
shl
or
aas
ror
dec
fisttp
and
adc
aad
inc
add
das
adc
mov
inc
int
fadd
data16
adc
add
int3
inc
int
mov
fndisi(8087
adc
push
sahf
fadd
and
test
inc
add
outs
mov
xor
sbb
xor
sbb
xchg
sbb
shr
adc
add
cwde
in
test
dec
or
aas
push
or
fiadd
mov
add
mov
jmp
test
fadd
inc
mov
call
shl
sbb
push
add
mov
adc
xchg
outs
inc
add
cmp
jne
cwde
jns
popf
in
push
je
mov
pop
ror
fisttp
xor
sbb
xchg
adc
cwde
mov
and
xchg
(bad)
dec
or
mov
jbe
add
aas
in
jmp
mov
add
xlat
push
mov
dec
or
int
xchg
es
dec
sbb
jle
dec
leave
add
js
cli
dec
push
push
les
stos
retf
add
jge
dec
sub
test
ds
xor
call
dec
adc
push
cld
mov
ds
dec
test
push
(bad)
cmp
(bad)
stc
push
sar
cmp
push
int3
fiadd
push
inc
ds
or
enter
xchg
inc
or
push
or
add
sbb
or
adc
jg
fnstcw
dec
cld
push
cld
jecxz
test
cmp
lock
fmul
packsswb
ins
cdq
push
dec
or
sti
test
movs
xchg
lds
dec
clc
and
adc
loop
inc
cmp
das
rcr
loopne
jmp
add
stc
adc
mov
xchg
cmp
lock
cld
je
or
cmps
cmp
jno
adc
jmp
adc
and
ds
hlt
push
stc
div
dec
or
cli
div
push
or
push
in
inc
cdq
mov
rol
add
in
ins
sub
push
hlt
je
or
dec
sbb
pop
lahf
psrlq
cmp
sbb
cld
inc
sbb
push
cld
mov
or
enter
cmp
mov
mov
add
jg
iret
loop
lahf
dec
repnz
hlt
push
cld
fiadd
ins
cmp
xchg
push
cli
out
mov
in
jmp
jle
cld
sub
mov
mov
mov
nop
fisttp
int3
fst
mov
or
sahf
pop
xchg
pop
inc
dec
or
cwde
enter
or
cs
or
js
std
push
cdq
pop
add
add
scas
xchg
sbb
daa
out
push
cld
mov
add
loopne
push
cdq
aaa
retf
sub
js
rcr
xchg
clc
add
adc
rcl
cmp
aam
or
lea
add
adc
std
call
cmp
push
cld
out
aam
and
pop
cld
out
mov
mov
pop
adc
sub
dec
mov
xchg
retf
dec
clc
movs
ret
push
div
retf
daa
retf
fild
enter
xchg
push
dec
call
retf
pop
dec
hlt
cmp
add
mov
adc
xchg
and
xchg
clc
test
ss
call
stos
pop
dec
hlt
and
test
add
movs
cmp
jne
cmp
sub
test
fcomp
sub
adc
out
idiv
cwde
in
adc
mov
cmp
dec
adc
xlat
(bad)
mov
xchg
(bad)
cli
add
dec
xor
jmp
out
inc
sahf
pop
hlt
add
aaa
or
mov
push
cmp
inc
add
adc
aaa
inc
or
xchg
cmps
ja
ins
popa
(bad)
mov
or
mov
mov
xor
adc
inc
push
dec
hlt
add
les
out
cld
inc
aad
cmp
pusha
xor
cwde
or
je
sti
push
sbb
inc
inc
xor
inc
sbb
add
inc
cmp
out
mov
aam
or
aam
sbb
or
mov
adc
add
mov
or
jns
mov
or
scas
dec
mov
push
cld
mov
cmp
(bad)
cli
adc
aam
jns
rcl
iret
sub
add
call
xchg
test
inc
cmp
test
xor
mov
(bad)
in
cmp
sbb
lds
xchg
das
inc
adc
push
mov
dec
out
mov
add
loop
dec
or
pop
mov
(bad)
cmps
xor
pusha
sti
jmp
jns
add
jecxz
mov
stos
mov
in
inc
inc
mov
add
push
dec
adc
int3
xchg
daa
stos
push
xor
push
cwde
inc
ret
and
inc
or
push
cwde
cmp
inc
in
cmp
mov
(bad)
pusha
cmc
xchg
push
xlat
mov
mov
push
test
cs
mov
and
push
mov
push
add
add
add
jbe
jbe
mov
jl
imul
test
cmp
mov
push
in
stos
mov
retf
sti
dec
fmul
add
xchg
test
jmp
jge
sti
sub
je
pop
bound
or
icebp
mov
or
inc
jp
data16
or
das
int3
das
jmp
cli
pcmpeqd
sub
test
shl
mov
dec
mov
fs
punpckldq
data16
fadd
inc
(bad)
pop
adc
sub
mov
je
in
sbb
fsub
jo
rcl
or
cmp
(bad)
adc
add
jmp
mov
icebp
jmp
adc
jns
adc
pop
dec
adc
inc
mov
repnz
mov
sub
lods
xchg
scas
sbb
sti
mov
pop
movs
fs
cmps
mov
xchg
mov
add
fdivr
mov
cmp
jmp
not
add
xchg
jns
(bad)
popa
or
popf
jmp
lea
dec
icebp
mov
sub
mov
mov
mov
mov
nop
push
sbb
and
xchg
add
dec
mov
aam
adc
test
mov
fwait
mov
or
push
push
pop
mov
pop
icebp
cli
test
cmps
iret
mov
(bad)
loop
pop
push
sti
jmp
dec
mov
inc
mov
call
xor
lea
lahf
fcmovb
mov
push
mov
push
xor
mov
dec
inc
add
cmp
add
jge
fnstenv
sbb
jmp
movs
push
pop
jg
mov
jg
lods
sbb
call
or
mov
std
or
adc
inc
push
add
adc
or
retf
inc
inc
pop
or
pushf
and
add
jp
xchg
scas
inc
movs
mov
es
dec
adc
sti
sub
add
cdq
push
test
pop
mov
imul
lds
ror
loop
push
cwde
jae
fwait
inc
mov
pop
inc
fadd
sbb
sbb
leave
adc
loopne
inc
inc
test
mov
and
rol
add
cwde
jb
cmps
mov
loop
inc
pushf
mov
sti
call
sbb
dec
dec
(bad)
dec
in
ins
cmp
add
xchg
jns
std
pop
add
and
inc
icebp
mov
mov
adc
add
add
mov
ror
daa
pop
mov
cwde
in
add
jmp
sti
mov
or
(bad)
mov
(bad)
mov
xchg
cdq
add
xchg
push
pushf
mov
shl
add
sbb
xor
cmps
retf
loope
dec
fnstcw
xchg
loope
sti
and
stos
mov
xchg
rcl
sti
and
add
stos
mov
sti
and
cmp
sti
and
or
sti
and
jmp
and
stos
mov
sti
and
call
and
stos
mov
sti
and
stos
mov
sti
and
inc
add
sbb
add
add
mov
(bad)
push
addr16
inc
popf
test
movs
adc
(bad)
stos
xchg
popa
cld
lea
mov
call
jmp
inc
inc
nop
adc
int3
jne
add
ja
mov
call
test
cwde
inc
or
add
fucompp
(bad)
call
fdivr
lods
sbb
cmp
add
pop
mov
inc
call
int3
inc
push
mov
in
into
push
add
pop
pop
add
aas
push
add
fist
call
adc
jge
inc
iret
inc
add
(bad)
iret
pop
ret
mov
rol
adc
iret
pop
add
stos
cwde
fiadd
inc
call
adc
jge
cmc
into
inc
add
in
pop
pop
fwait
sti
push
xchg
xchg
xchg
clc
add
popf
in
mov
jmp
xchg
push
gs
(bad)
(bad)
fisttp
(bad)
or
add
pushf
std
xor
sldt
push
(bad)
sbb
std
jge
add
or
xlat
inc
lea
and
push
add
inc
xchg
dec
fist
push
add
push
pushf
sti
push
(bad)
jns
jne
push
add
fwait
sti
push
xchg
jns
jne
push
add
pushf
sti
push
xchg
jns
jne
add
adc
dec
push
add
pushf
sti
push
push
jns
jne
adc
dec
push
add
pushf
sti
push
add
adc
push
inc
sti
adc
push
gs
test
std
inc
in
pop
adc
pop
out
cmp
push
xchg
idiv
push
add
pop
pop
push
stc
cld
sub
add
add
aad
rcr
sbb
stc
fmul
int3
dec
fmul
int3
pop
fmul
int3
xchg
imul
xchg
inc
or
adc
shl
inc
int
ret
iret
int3
int3
mov
int3
int3
cdq
fmul
int3
push
imul
xchg
inc
or
and
and
xchg
push
inc
or
rol
add
xchg
inc
sti
adc
fwait
iret
int3
int3
sbb
int3
int3
(bad)
push
mov
mov
adc
push
or
sub
and
pusha
pusha
and
mov
push
cld
add
add
add
int3
int3
pop
iret
int3
int3
test
iret
int3
int3
push
push
mov
xchg
in
mov
inc
int
dec
add
pop
add
or
inc
or
ror
add
lea
add
push
inc
add
stos
mov
ret
into
int3
int3
sbb
int3
int3
(bad)
imul
inc
xchg
(bad)
push
or
push
mov
inc
dec
daa
shl
mov
inc
or
shl
imul
add
(bad)
push
add
rcr
std
jae
inc
call
and
ret
test
inc
nop
in
je
pusha
mov
call
push
mov
adc
mov
cdq
jno
add
add
fnstsw
cmp
sbb
mov
sub
pop
not
push
add
add
ins
movs
std
(bad)
fisub
mov
js
cmp
je
and
or
inc
sti
jne
ins
jno
cmc
addr16
add
sar
jne
inc
sti
jne
jns
aaa
or
test
xor
call
out
push
mov
xchg
in
jmp
not
ret
es
push
push
clc
mov
adc
add
push
add
stos
inc
xchg
fisubr
pop
imul
dec
xor
shl
jne
jo
add
or
jb
test
push
add
imul
inc
or
and
inc
sbb
aaa
sti
jmp
sbb
sbb
add
pop
add
lea
xor
lock
sbb
add
pop
add
imul
cmp
sti
mov
add
xchg
pusha
or
jecxz
ret
push
mov
xchg
push
push
mov
add
(bad)
mov
shl
cmp
fucom
push
call
add
push
inc
test
xchg
shl
push
int
(bad)
cmp
outs
add
xor
std
(bad)
fst
xchg
or
pop
(bad)
mov
xchg
inc
fadd
sub
dec
popf
(bad)
aad
add
push
mov
push
xchg
shl
push
sbb
or
fadd
xor
fdiv
jo
adc
xchg
xchg
dec
call
pop
push
lea
nop
fdiv
jecxz
push
jge
dec
cmp
ins
add
jmp
(bad)
pop
push
dec
ret
xchg
jne
int
std
daa
cmc
push
add
ins
add
add
(bad)
dec
ds
shl
mov
inc
push
add
push
addr16
mov
(bad)
stos
outs
inc
or
stc
jmp
ds
mov
add
mov
push
and
dec
cwde
xchg
sbb
dec
and
mov
push
cmps
jns
mov
test
je
shr
add
stos
push
pop
ret
xchg
adc
rcl
jg
aam
call
div
push
pop
ret
xchg
adc
push
fisub
(bad)
and
xor
test
push
call
aaa
(bad)
pop
mov
push
push
xchg
cmp
test
adc
xchg
ss
add
dec
call
outs
push
cmc
mul
pop
movs
mov
push
jmp
add
jne
jl
cmp
cmps
mov
mov
inc
push
push
stos
popf
add
mov
adc
push
push
clc
mov
outs
call
mov
adc
mov
add
fmul
xchg
jmp
cmp
lea
clc
lea
out
mov
imul
retf
push
retf
jge
jno
cmc
arpl
sbb
fist
(bad)
pop
push
push
push
outs
call
pop
les
test
inc
xchg
add
add
dec
lahf
or
in
(bad)
adc
mov
xchg
mov
ja
popf
adc
xchg
addr16
add
dec
or
sbb
sar
push
leave
fisub
sti
push
aaa
or
and
and
push
inc
cmp
les
mov
add
nop
sbb
sbb
adc
rol
mov
push
jne
ds
or
adc
add
adc
xor
add
and
sti
pop
fs
in
adc
dec
adc
mov
jbe
ret
add
jne
cmp
inc
and
jmp
cdq
in
mov
mov
shl
dec
dec
pop
into
and
push
push
jge
inc
add
cmp
ret
(bad)
fs
mov
xchg
in
sub
add
push
(bad)
test
xchg
mov
add
int
dec
js
add
fs
mov
push
xor
xchg
popf
xchg
inc
xchg
loopne
push
test
add
push
xchg
std
jp
test
adc
sar
mov
leave
(bad)
sti
push
xchg
xchg
clc
test
sti
sbb
mov
pop
stc
jmp
repz
adc
fnstenv
pushf
(bad)
mov
pop
inc
add
push
add
nop
mov
add
sbb
add
pop
stc
(bad)
cmp
inc
cld
fs
in
stos
imul
test
rcl
add
xchg
(bad)
fdivr
push
std
dec
pop
test
stos
cld
pop
xchg
rcl
push
push
enter
test
mov
std
stos
push
inc
mov
jne
mov
jne
std
add
in
push
add
mov
adc
add
sti
adc
jge
adc
add
xchg
cli
mov
ret
xchg
mov
dec
add
add
mov
je
inc
sti
loopne
adc
bound
pop
add
ja
(bad)
push
das
sar
push
push
std
jle
(bad)
jp
jg
rcl
or
into
ds
lea
inc
add
popf
push
xchg
xchg
div
cmp
popf
push
add
mov
push
inc
lds
dec
jg
or
push
call
mov
inc
in
shl
inc
call
pop
push
iret
inc
cld
stos
addr16
push
fwait
std
call
jecxz
jmp
sahf
call
enter
pop
sahf
inc
push
stos
mov
adc
sti
adc
push
shl
jne
and
int
lock
xor
shr
dec
call
ret
daa
adc
clc
imul
inc
push
add
fdivp
jecxz
out
pop
cmp
lock
dec
loopne
push
jge
inc
pop
adc
add
ds
add
iret
inc
cld
add
stos
push
std
call
icebp
inc
add
fstp
add
dec
mov
in
add
or
loopne
bound
add
fld
mov
xchg
cmp
or
add
jl
dec
popf
adc
call
lods
std
inc
clc
sub
add
bound
shl
add
aam
push
out
jg
dec
in
push
cmc
aas
sti
(bad)
cli
dec
add
and
inc
adc
and
inc
push
stos
movs
sub
rcl
sti
xlat
xchg
enter
mov
add
push
or
das
add
dec
add
aad
ja
add
jp
call
mov
jnp
and
pop
mov
call
inc
js
and
ret
add
add
pop
rcr
push
stc
or
stos
inc
add
test
xrelease
das
shl
xchg
shl
jno
cmc
pop
sbb
push
sbb
inc
push
push
add
mov
stc
(bad)
cmp
out
(bad)
xchg
movs
sti
movmskps
aaa
(bad)
loope
das
shl
xor
inc
shl
(bad)
xor
lea
adc
mov
call
jl
add
popf
or
add
ins
cmp
pop
call
adc
push
add
push
enter
gs
rol
dec
jp
push
dec
adc
sub
push
stos
in
push
jle
xchg
dec
or
sbb
push
aad
(bad)
stos
imul
adc
add
data16
call
mov
or
dec
mov
in
not
jne
ins
jno
test
les
shr
cmc
test
bound
add
sbb
adc
jecxz
push
test
jne
test
call
(bad)
pop
add
add
dec
push
jle
call
and
das
rol
add
pushf
or
pop
test
je
mov
aaa
repz
ret
popf
jno
push
out
push
xor
add
dec
test
arpl
or
mov
popf
dec
jg
stos
in
and
mov
cmp
xchg
lods
jl
add
mov
adc
push
mov
je
clc
push
jg
jmp
adc
adc
mov
add
mov
add
inc
add
pop
call
(bad)
or
out
push
push
out
gs
and
pop
add
dec
or
test
dec
mov
mov
jmp
loope
mov
add
aam
and
or
adc
inc
mov
adc
dec
lea
lds
ret
inc
jmp
scas
or
dec
pop
xchg
scas
jae
sbb
pop
push
call
xor
xchg
ror
or
test
and
call
push
add
push
push
mov
push
call
adc
cmc
inc
add
cdq
xchg
je
add
push
mov
push
push
call
cmp
push
jg
dec
adc
jge
xchg
(bad)
push
xchg
jnp
je
out
retf
out
sti
pop
aam
sbb
jnp
mov
mov
push
pop
into
cs
test
add
xchg
dec
in
cmp
add
jbe
or
enter
int
ret
add
adc
push
push
add
jg
rcl
inc
cdq
aad
or
cmp
pusha
mov
cmps
imul
ret
inc
mov
or
mov
sti
inc
cld
(bad)
sbb
add
mul
jne
add
out
daa
adc
sti
push
xchg
test
xchg
arpl
add
xor
add
dec
ins
mov
or
push
inc
add
mov
push
add
or
adc
xchg
adc
popf
or
cmp
xor
or
inc
mov
add
inc
add
fiadd
test
dec
jo
pop
inc
or
mov
push
mov
test
lahf
(bad)
pop
mov
add
xchg
in
adc
mov
sti
mov
movs
jg
stc
sbb
add
xor
push
push
mov
or
add
pop
add
xchg
les
mov
add
in
punpckldq
sub
jge
adc
in
sub
leave
into
sahf
sti
push
out
jg
std
into
inc
add
adc
int
inc
add
add
mov
pop
push
inc
add
xor
call
pop
test
mov
in
add
sahf
mov
mov
mov
xchg
xchg
mov
add
lea
sbb
add
loopne
call
adc
enter
xchg
and
add
pop
je
push
fcomip
sub
leave
push
mov
jg
in
push
inc
add
add
adc
mov
pop
inc
add
add
xchg
add
sbb
mov
or
xor
dec
lahf
sti
push
xchg
jg
std
mov
or
fucomp
call
data16
and
add
adc
dec
aad
push
out
sti
jne
mov
jg
test
pusha
add
add
lea
add
mov
sub
add
dec
clc
push
xor
and
xchg
sbb
inc
dec
adc
(bad)
(bad)
pop
mov
leave
inc
dec
and
add
xchg
loopne
pop
push
push
stos
es
nop
mov
inc
push
mov
es
fsub
sti
mov
add
mov
add
int3
xor
lea
mov
add
push
or
ins
dec
add
push
push
or
iret
lahf
or
adc
mov
sbb
mov
fsub
pop
pushf
adc
sub
add
dec
clc
fidiv
jo
and
xchg
sbb
inc
pop
sbb
(bad)
fld
mov
leave
inc
dec
sbb
jge
add
adc
jne
sar
stos
push
pop
enter
xchg
fsub
or
pushf
shl
and
data16
(bad)
pop
add
frstor
push
mov
xchg
ret
pop
je
dec
mov
ret
pop
add
xchg
call
mov
retf
int3
mov
add
add
mov
add
pop
popf
or
mov
sub
pop
push
xchg
call
or
pop
mov
add
xchg
in
(bad)
ficomp
ret
fld
sbb
jge
mov
pop
je
pop
mov
adc
cmps
and
and
jmp
dec
mov
dec
mov
pop
add
mov
(bad)
fild
sti
push
push
mov
inc
add
(bad)
jmp
sar
inc
cmps
add
pop
mov
push
pop
push
sub
inc
pop
mov
das
not
and
lea
push
inc
xchg
inc
or
sub
mov
add
xor
add
cmc
cmp
sbb
adc
(bad)
jmp
jno
or
adc
sbb
or
call
push
jbe
fs
cmp
add
sbb
jmp
sahf
jno
pop
retf
aas
push
mov
cmp
pop
dec
add
xor
dec
call
adc
or
mov
push
call
movs
dec
cld
call
nop
push
jns
daa
mov
push
bound
add
scas
pop
add
adc
add
xor
xchg
sar
or
pop
pop
std
inc
add
jne
add
add
fs
push
ret
je
inc
call
pop
inc
jne
add
pop
les
pop
out
addr16
push
push
lea
add
jmp
or
cmp
test
push
jge
or
or
adc
mov
mov
jmp
adc
rcl
nop
pop
add
add
dec
push
ret
push
xor
test
(bad)
jns
int
push
push
jne
cmp
popf
mov
ret
inc
test
xchg
inc
loopne
jle
rcr
gs
inc
cld
stos
stos
sti
push
test
(bad)
cmp
mov
add
daa
(bad)
(bad)
jmp
out
nop
adc
pop
test
sbb
std
pop
and
xchg
inc
and
je
pop
sbb
adc
jne
enter
xchg
add
mov
loopne
mov
clc
jg
daa
and
retf
popa
fst
out
pop
sbb
mov
arpl
lds
data16
retf
mov
pcmpgtw
nop
shl
outs
shl
or
cwde
inc
dec
xor
jle
xor
cli
or
xor
rcl
xor
repz
or
pop
cld
add
pop
add
sbb
les
data16
jmp
and
push
jae
inc
rol
add
jle
add
mov
jno
add
add
lea
aad
or
aad
fidiv
or
lds
or
mov
or
cwde
inc
pop
xor
ret
cwde
inc
dec
test
and
pop
xor
les
sahf
test
or
push
je
fst
add
sahf
lods
sbb
sbb
std
cdq
push
and
cwde
aam
lahf
add
and
(bad)
jne
call
mov
adc
sbb
imul
int3
sbb
cli
pop
dec
mov
sbb
add
mov
dec
mov
inc
and
and
dec
je
(bad)
push
jg
add
pop
pop
enter
lds
ret
sbb
jne
adc
push
xchg
push
mov
fadd
stos
jle
dec
(bad)
repz
lock
in
call
sti
xor
adc
loope
sbb
and
and
int3
sbb
jle
std
add
add
lea
push
xor
add
push
xchg
pop
shl
je
pop
loopne
adc
addr16
je
rcl
fcom
je
shl
pop
pop
cwde
aad
pop
fimul
push
ret
cwde
aad
pop
push
mov
pop
ss
push
xor
scas
push
aaa
fst
jg
test
push
cmp
daa
dec
leave
(bad)
inc
adc
js
inc
in
push
aam
mov
mov
fisttp
out
and
ret
inc
leave
pop
add
lea
pop
arpl
xchg
rol
test
push
push
adc
addr16
shr
add
movs
push
std
call
adc
add
rcl
stos
inc
cmp
and
add
outs
jb
xchg
fld
call
jb
lock
inc
in
int
add
adc
call
call
(bad)
clc
mov
jno
stos
adc
jmp
sbb
jne
lods
inc
jmp
sub
call
xor
add
inc
cld
mov
pop
inc
adc
mov
mov
inc
mov
stos
inc
in
lock
add
bound
(bad)
stos
test
call
mov
ss
push
adc
pop
sub
add
xchg
jne
cmps
jno
call
fld
sti
ret
push
test
mov
add
sub
jmp
test
jne
cmps
jno
movs
jne
add
pop
xchg
inc
add
or
push
inc
push
add
dec
addr16
pop
data16
jno
in
push
add
push
push
cmp
add
add
add
xchg
les
sar
loope
jp
xor
mov
stos
mov
inc
add
add
add
fs
cmp
sti
jne
xchg
inc
loopne
sbb
dec
inc
jl
(bad)
int
(bad)
mov
xchg
xchg
inc
adc
add
and
popf
repz
out
mov
adc
push
mov
ret
inc
cmp
shl
push
retf
inc
dec
adc
push
ss
jns
cmps
dec
lahf
and
call
pop
xor
adc
rcl
add
adc
xor
fmul
jmp
push
xchg
inc
lahf
adc
int3
inc
sub
sahf
enter
int3
(bad)
jmp
test
xchg
mov
add
inc
lea
jmp
test
inc
pop
cmp
add
mov
stos
sbb
repnz
push
jp
(bad)
and
add
mov
inc
pushf
mov
rcl
jl
retf
pop
dec
mov
cmp
and
add
add
call
mov
pop
mov
cli
push
es
mov
jns
loopne
aad
cmp
sar
mov
pusha
(bad)
push
jg
dec
inc
call
sbb
cwde
(bad)
and
aad
pop
mov
call
add
add
int
dec
call
xchg
or
or
add
pop
push
and
xchg
xchg
adc
pop
ret
inc
movs
push
mov
inc
or
rol
mov
ret
rcl
jae
or
or
or
add
mov
xor
lea
pop
ret
ficom
push
sub
xchg
add
xchg
adc
(bad)
mov
jmp
mov
nop
adc
adc
xor
jp
sti
sbb
dec
call
test
sbb
inc
pop
mov
int3
test
push
int3
int3
add
jmp
ficom
push
or
dec
xchg
xchg
inc
add
or
xor
ret
pushf
jp
add
sahf
in
mov
jg
leave
call
mov
xchg
mov
test
scas
call
adc
int3
int3
or
int3
int3
cmp
push
push
push
push
push
lea
push
lea
push
sbb
shl
add
jp
add
lahf
in
mov
jg
inc
add
or
and
(bad)
int3
jns
add
daa
in
lea
mov
mov
cmp
bound
call
adc
mov
mov
jne
adc
add
adc
add
mov
add
adc
jle
or
push
jg
push
(bad)
add
add
call
fstp
test
sbb
test
xor
sti
je
popf
leave
(bad)
int3
mov
rcr
and
push
mov
dec
mov
daa
ror
and
push
mov
in
push
mov
mov
jge
push
daa
js
mov
add
sbb
loopne
lock
out
or
sar
pop
rcl
or
adc
inc
hlt
pop
aad
add
shl
push
jmp
jne
xchg
dec
mov
jl
mov
inc
xchg
xchg
ror
sti
fs
(bad)
fst
add
adc
inc
vaddsd
add
cld
mov
mov
loopne
mov
push
xchg
mov
cdq
inc
dec
push
push
inc
mov
add
(bad)
div
rcl
idiv
mov
mov
sub
clc
jmp
adc
mov
(bad)
loopne
(bad)
cmp
fs
adc
add
inc
popa
mov
add
add
sbb
dec
or
shl
or
push
add
mov
jne
mov
push
adc
loopne
cld
jne
fwait
cmp
popf
adc
mov
cs
mov
mov
inc
jmp
test
cmp
mov
add
add
and
jno
jmp
std
dec
adc
and
pop
pop
fdivp
cli
push
xchg
lahf
jg
in
jge
add
and
mov
xchg
cmp
mov
pop
mov
dec
lea
int
inc
fadd
cmp
cmp
rol
dec
fcomp
test
aam
mov
add
jle
inc
jne
inc
sbb
aaa
in
mov
xchg
nop
popa
hlt
lea
popa
cld
pop
sti
pusha
hlt
aam
clc
fs
adc
add
inc
fcomp
xor
add
dec
push
inc
enter
add
mov
inc
shl
stc
jg
or
movs
mov
inc
xchg
add
mov
inc
cmps
push
pop
dec
adc
cld
add
test
enter
int
dec
icebp
cli
sbb
lea
add
xchg
clc
inc
fadd
(bad)
call
sub
ret
push
mov
dec
inc
dec
cld
out
or
xchg
js
dec
cmp
xchg
clc
aas
add
mov
je
clc
inc
or
add
shl
add
shl
ins
not
push
xchg
or
sub
mov
xchg
ss
sub
push
adc
mov
push
sbb
fisttp
or
in
std
je
mov
stos
push
or
test
adc
daa
adc
daa
adc
and
add
sti
(bad)
ficom
nop
pushf
xchg
out
pop
sbb
mov
std
inc
mov
mov
and
push
push
cmps
sbb
mov
icebp
inc
cld
xchg
sti
jne
nop
ins
pop
or
sub
add
add
loopne
inc
or
adc
inc
add
add
pop
movs
lock
push
sbb
xchg
xor
mov
pop
or
adc
repz
add
dec
aam
pop
imul
ret
(bad)
call
sub
or
jno
add
(bad)
dec
add
scas
cwde
add
sbb
cmp
xchg
call
fst
xchg
ss
mov
(bad)
sub
je
in
aas
add
push
jno
or
cmp
mov
(bad)
sub
pop
lods
cwde
popf
push
add
mov
sub
out
xchg
mov
adc
add
fld
add
pop
lea
icebp
popa
addr16
sahf
and
and
push
add
xor
dec
jmp
push
xchg
mov
add
push
jg
inc
sbb
mov
ins
xchg
jmp
or
xor
mov
cmp
fcom
inc
cld
icebp
idiv
inc
add
jmp
lea
sti
jne
lea
pop
adc
call
add
mov
jmp
adc
inc
and
dec
popa
and
and
push
xchg
dec
mov
lods
xor
inc
sbb
and
(bad)
rcr
mov
adc
ret
add
std
adc
xor
dec
xor
cmps
adc
(bad)
ds
mov
mov
add
mov
mov
test
jne
lods
inc
cld
call
fs
pop
add
(bad)
(bad)
cmp
add
pop
adc
inc
jno
daa
fs
dec
push
xchg
mov
inc
lds
mov
stc
mov
jmp
jl
add
ja
xor
cwde
pop
and
jl
or
dec
push
mov
call
add
add
cld
xchg
pop
stc
(bad)
jp
sti
(bad)
shl
arpl
dec
lahf
dec
hlt
inc
mov
add
jae
pop
push
cld
pop
push
add
push
sahf
dec
lock
(bad)
out
xor
sti
inc
inc
jmp
in
xchg
in
jmp
in
pushf
jmp
add
pop
std
xor
inc
cld
mov
adc
push
and
push
inc
or
add
dec
in
mov
addr16
outs
fst
push
not
mov
inc
add
int
or
pushf
loopne
stos
xchg
test
add
fdivr
stos
xchg
test
adc
sar
cmp
push
xchg
sti
leavew
popf
in
std
jmp
(bad)
jmp
push
mov
mov
std
call
inc
add
push
add
stos
fild
add
adc
mov
add
jmp
inc
cld
test
jmp
xchg
fdivr
stos
xchg
push
std
stc
sub
in
cli
call
aad
mov
cmp
jmp
xchg
sti
push
fadd
adc
mov
sti
inc
add
cdq
sub
xchg
xchg
inc
sbb
xchg
sti
push
stos
push
pusha
xchg
push
sbb
movs
mov
add
lahf
in
push
ret
lahf
jno
data16
mov
fild
xor
ret
and
je
inc
fwait
mov
int
aaa
ret
loope
sbb
dec
mov
out
jae
in
jno
add
dec
add
call
jmp
or
add
push
mov
lods
add
dec
das
mov
jne
dec
in
in
cli
jmp
add
pop
stos
mov
call
push
push
add
sbb
jmp
pop
xchg
xchg
rol
pop
aaa
ret
and
and
xchg
add
jmp
in
jne
cli
mov
(bad)
call
pop
daa
(bad)
std
push
mov
xchg
ror
aaa
clc
cli
jmp
pop
call
adc
mov
(bad)
adc
rcr
pop
std
jae
sub
jne
inc
in
jnp
add
add
loop
aaa
call
mov
(bad)
rcr
push
add
xlat
retf
inc
frstor
mov
sub
sbb
inc
in
gs
mov
aad
or
sti
out
call
sti
dec
test
push
movs
cli
loop
stos
dec
pop
pop
inc
dec
ror
add
xchg
fwait
jns
xchg
out
mov
mov
shl
(bad)
cmps
(bad)
mov
shl
push
inc
pushf
xor
add
ret
dec
adc
add
jae
or
inc
les
sldt
fst
inc
add
push
xchg
push
shl
add
or
jmp
aas
add
shl
dec
out
sbb
sti
dec
xchg
(bad)
mov
sar
pop
adc
add
pop
push
fwait
in
push
(bad)
push
test
pop
test
xchg
fwait
xor
iret
push
std
push
stos
mov
add
mov
out
mov
add
inc
cld
(bad)
xchg
mov
int
add
xchg
pushf
add
adc
test
mov
inc
or
ins
cmc
sar
jae
cdq
inc
lds
test
dec
add
sub
jle
cmp
ret
add
add
add
push
mov
cld
(bad)
pop
inc
mov
mov
test
xor
and
mul
cmp
mov
mov
test
push
cld
jmp
gs
fmul
inc
fnsave
push
jne
cli
jmp
mov
fcmovne
rcr
push
jne
add
add
stos
int3
inc
lea
jle
adc
and
dec
xchg
jo
loopne
jo
addr16
xor
adc
pop
(bad)
aad
jp
adc
ret
xchg
cmp
adc
pop
mov
mov
mov
leave
inc
or
jmp
stos
jmp
int
mov
cli
xor
fst
push
mov
(bad)
mov
inc
loopne
call
mov
sbb
add
sti
sub
lea
gs
out
je
inc
cld
adc
rcl
jo
(bad)
push
add
popa
adc
adc
cli
call
cld
stos
jmp
push
inc
std
inc
add
push
push
movs
mov
les
adc
add
in
xor
inc
push
test
adc
test
retf
inc
int
add
jne
stc
(bad)
jp
les
jmp
jmp
adc
mov
clc
addr16
in
push
call
push
cwde
jno
add
mov
call
pop
push
cwde
jno
addr16
jo
adc
pop
push
cwde
sti
push
cmps
in
xchg
out
je
nop
call
fstp
clc
sub
stos
in
push
pop
dec
cwde
sti
push
in
jle
shl
lds
push
adc
xlat
push
inc
loop
sbb
loopne
dec
push
out
jmp
push
add
add
js
add
adc
je
xchg
cmp
jmp
movs
iret
push
std
and
movs
fsub
sbb
mov
xchg
push
xor
cmp
gs
xchg
das
mov
jge
pop
xchg
mov
and
jg
fistp
test
sbb
xchg
sbb
test
cmp
jno
bound
and
and
das
rcl
ds
adc
test
push
sbb
add
cld
jne
jmp
mov
call
add
in
and
jle
pop
gs
push
sub
cmp
xor
call
mov
mov
int3
test
inc
in
xor
cli
pop
out
jae
mov
push
jg
aad
inc
hlt
jbe
test
push
pop
hlt
call
jmp
repz
jne
out
adc
pop
sti
jne
add
aad
int
test
pop
push
add
dec
inc
push
push
or
push
sti
jne
jmp
dec
clc
es
test
sbb
add
push
add
pop
sbb
loop
add
sbb
push
or
jne
push
cld
jne
out
or
jno
call
add
adc
addr16
ret
push
imul
mov
cmp
xchg
adc
mov
hlt
data16
push
pop
leave
int3
pop
adc
sbb
das
in
or
cmp
jno
ret
add
retf
into
aad
mov
jmp
xor
out
clc
or
mov
add
adc
mov
cmp
or
push
inc
call
jmp
std
cli
jne
dec
push
jmp
xor
adc
push
mov
stc
jmp
in
stos
std
mov
xchg
dec
out
pushf
adc
mov
test
cs
or
pop
adc
add
ins
pop
add
add
dec
sbb
mov
adc
pop
movs
dec
jmp
pop
(bad)
in
or
add
loopne
or
inc
mov
dec
cld
jne
inc
cld
jne
rcl
int
jg
(bad)
hlt
(bad)
(bad)
jae
inc
sbb
dec
push
push
adc
pop
or
and
(bad)
add
adc
cmc
cmp
add
mov
mov
popf
adc
push
jmp
ja
xchg
ror
sbb
pop
pop
adc
frndint
(bad)
call
out
ss
jno
ret
pop
add
into
retf
inc
inc
in
(bad)
loope
pop
ss
jae
rcl
(bad)
or
fdivp
jmp
es
cmp
jmp
push
inc
(bad)
adc
add
fst
cmc
push
mov
lock
jne
loope
or
test
cs
jmp
loope
sbb
dec
cmc
jmp
or
call
and
sbb
mov
int3
pop
test
lock
call
mov
sbb
pusha
add
jne
in
adc
gs
pop
cld
jne
in
add
dec
std
mov
pop
cld
jne
shr
shl
ss
xor
inc
aad
add
xor
dec
mov
dec
jne
pop
or
dec
imul
cli
jmp
inc
loope
cmp
jne
fimul
movs
and
jmp
sahf
in
inc
add
sub
jne
jecxz
sbb
adc
cld
cli
jne
in
or
clc
sti
(bad)
jmp
add
xchg
xchg
pop
jo
sbb
push
sbb
or
sahf
or
rcl
jne
jbe
or
dec
jmp
pop
cs
adc
add
ret
cmp
jb
jg
stos
das
(bad)
pop
or
pop
or
push
loop
add
popf
pop
adc
mov
jg
mov
out
movs
sub
std
(bad)
(bad)
sar
and
jb
into
lock
adc
inc
add
push
std
(bad)
fmul
push
std
pop
add
inc
ds
inc
add
mov
adc
add
inc
fs
mov
xchg
mov
sar
and
scas
lods
sti
and
dec
push
inc
lea
push
add
shl
add
adc
cmc
or
xor
pop
add
ror
dec
shl
add
sar
xor
outs
mov
push
push
inc
or
inc
add
add
add
inc
ds
inc
ds
inc
add
push
mov
inc
push
mov
push
push
mov
push
push
mov
es
mov
and
mov
push
push
mov
add
adc
mov
push
dec
mov
add
mov
push
dec
mov
adc
mov
out
mov
in
mov
fmul
add
add
in
adc
push
add
xchg
add
add
inc
add
pop
mov
pop
xchg
push
add
nop
adc
push
inc
xchg
inc
pop
leave
sahf
fld
adc
xchg
pop
mov
fld
es
add
nop
cmp
or
cld
mov
adc
add
arpl
std
push
mov
push
loopne
pushf
adc
and
test
fiadd
sar
adc
jb
mov
(bad)
sub
and
stos
xor
(bad)
mov
ds
inc
add
dec
add
mov
inc
add
cld
shl
int3
xchg
cmc
or
mov
cli
and
cmc
push
inc
(bad)
fld
push
add
int3
xlat
inc
add
push
inc
mov
mov
add
out
add
mov
outs
mov
loopne
cld
sbb
std
(bad)
xlat
push
add
cld
fadd
cmps
push
inc
or
in
xchg
push
inc
push
(bad)
cmc
or
xchg
push
jmp
in
cli
and
lock
inc
int
inc
add
ds
inc
add
inc
add
inc
add
add
inc
add
inc
add
add
push
mov
xchg
mov
xchg
mov
adc
mov
push
xchg
mov
xchg
mov
xchg
mov
aam
mov
(bad)
xchg
mov
xchg
mov
xchg
mov
aam
mov
(bad)
xchg
mov
xchg
mov
push
mov
or
push
clc
inc
adc
inc
add
inc
ds
inc
add
add
nop
inc
push
add
aad
pop
leave
mov
inc
add
push
add
(bad)
fiadd
push
push
add
nop
pop
push
add
(bad)
fiadd
out
inc
push
dec
pop
leave
push
fdivr
push
(bad)
mov
cs
jne
mov
xchg
push
aad
jne
sub
test
xchg
std
jne
inc
cld
adc
cwde
xchg
call
add
xor
jg
stos
xlat
out
and
pop
pop
mov
fldpi
push
add
imul
in
jo
jp
add
call
call
cli
jne
add
xchg
std
jne
inc
cld
adc
call
adc
add
mov
fsubr
adc
pop
pop
mov
xchg
nop
xlat
jmp
sbb
jmp
pop
cld
jne
mov
xchg
xor
cmp
std
xor
sbb
cmp
js
inc
frstor
push
stos
push
mov
adc
add
push
movs
fcom
adc
dec
sbb
mov
rol
ret
push
in
push
mov
in
jo
stos
bound
jmp
pop
in
retf
mov
mov
or
test
push
std
jne
(bad)
cld
adc
test
out
sbb
add
pop
jg
call
mov
enter
adc
jmp
adc
leave
out
retf
push
std
jae
pop
cmp
inc
out
lea
inc
or
pop
pop
ret
es
mov
push
std
pop
dec
adc
imul
int
mov
ret
inc
xor
add
add
shl
sbb
nop
sbb
call
rcl
jo
movs
sbb
inc
sbb
(bad)
xchg
or
push
cmc
mov
call
iret
pop
call
(bad)
int
call
fs
pop
pop
mov
cli
push
push
jmp
lea
dec
dec
mov
xlat
push
ret
js
add
add
adc
pop
push
std
(bad)
mov
push
fcomp
int
push
push
mov
add
aad
sub
inc
or
push
xor
pop
mov
mov
add
int
push
(bad)
in
push
push
cmps
cmp
shl
mov
xchg
cmp
xor
xchg
int
add
aad
adc
add
out
and
fst
jae
(bad)
out
jae
push
mov
xchg
int3
jmp
xchg
push
je
xor
push
push
add
inc
dec
pop
pop
ret
push
mov
inc
or
adc
dec
inc
sub
inc
push
jo
call
add
lods
movs
add
dec
adc
add
sub
add
mov
add
in
ins
pop
sbb
adc
rcr
or
add
retf
js
inc
pop
add
add
adc
push
call
jae
int
in
add
add
adc
add
add
cmp
add
adc
(bad)
(bad)
mov
jo
call
(bad)
fidivr
pop
fadd
(bad)
nop
mov
call
adc
adc
push
sbb
add
sahf
dec
or
jg
add
mov
out
stos
mov
pop
mov
pop
cmp
or
jne
mov
ret
mov
jmp
adc
jne
addr16
outs
pop
std
call
add
add
sahf
pop
or
ins
loope
lds
dec
stos
nop
add
add
mov
add
and
sub
js
jo
add
mov
add
sub
and
(bad)
adc
std
xchg
cmc
and
lds
in
cmc
and
lds
(bad)
call
sahf
fistp
push
pop
add
popf
popf
mov
push
cmp
rcl
call
mov
or
imul
dec
xchg
shl
mov
jae
fidiv
ins
sbb
fsubr
(bad)
jmp
inc
fldcw
shl
or
nop
fdivr
and
adc
int3
xchg
mov
mov
dec
or
adc
and
inc
dec
imul
push
shl
xor
sahf
rcr
add
pop
lahf
sti
push
push
les
mov
mov
call
xor
inc
sub
jle
jle
mov
mov
or
rcl
jle
(bad)
push
cmc
sar
test
mov
sbb
and
inc
hlt
int
pop
std
stos
mov
les
xchg
shl
out
add
xchg
xlat
jg
rol
adc
inc
xchg
xor
jl
push
pop
mov
mov
ret
pop
adc
std
out
mov
adc
popf
xchg
mov
add
sbb
stos
push
sbb
add
jmp
ficomp
dec
gs
push
ror
push
ds
imul
xchg
sbb
mov
sub
push
inc
add
lahf
aad
sub
jne
cdq
pop
in
cmp
stc
mov
or
jbe
movs
inc
les
jmp
pop
push
pop
aad
xchg
dec
std
jmp
nop
mov
popf
pop
test
mov
xchg
add
int
add
cmc
inc
std
call
mov
pop
pop
call
mov
pop
add
fidivr
add
xlat
aas
mov
jmp
adc
push
cmc
sahf
in
dec
pop
loope
xor
(bad)
jmp
clc
(bad)
cmp
xchg
mov
jg
mov
popf
jno
add
inc
xor
sub
push
jnp
stos
test
or
popf
pop
adc
cmp
add
push
fnstsw
push
and
sbb
rcl
add
pushf
push
add
fidivr
jbe
add
or
fs
mov
mov
les
xchg
popa
cld
sbb
push
stc
dec
add
inc
std
call
push
add
xlat
adc
fucomp
repnz
jns
push
popa
add
inc
imul
out
push
in
into
adc
test
jne
ltr
popf
mov
lea
push
mov
cmp
jno
(bad)
dec
adc
(bad)
sbb
cmp
push
les
push
sub
add
sahf
push
add
inc
cmp
je
mov
call
xor
shl
adc
mov
push
pop
sahf
cmp
push
xor
and
mov
mov
inc
mov
fimul
test
adc
add
pop
(bad)
dec
fidiv
mov
xchg
or
adc
js
popf
je
cmp
aas
push
movs
sbb
ins
add
retf
test
add
xchg
ror
fdivrp
dec
cmp
push
add
enter
adc
inc
aad
push
mov
add
cmp
call
mov
xchg
xlat
(bad)
dec
xchg
jns
push
push
add
pop
and
xor
add
xchg
ror
jns
add
cmp
inc
shr
add
sti
ja
xchg
inc
or
arpl
add
les
push
add
xchg
add
add
shl
mov
pop
push
idiv
xor
inc
xchg
push
inc
clc
fs
xchg
lea
jmp
aaa
add
or
jmp
push
push
adc
jg
cdq
mov
call
xor
add
sti
dec
push
mov
add
add
gs
mov
adc
pop
rcl
jae
repz
pop
mov
icebp
mov
call
rol
cli
mov
out
outs
sar
ret
xchg
call
pop
shl
fcmovbe
adc
ret
(bad)
sbb
or
std
out
dec
std
inc
or
add
add
add
es
add
pop
mov
adc
jmp
sbb
jge
test
inc
stos
in
cli
and
inc
je
pop
jb
mov
mov
cmp
sti
jmp
sbb
cmp
cli
jmp
sbb
fs
push
dec
inc
add
dec
push
call
push
xchg
(bad)
cmp
cli
call
mov
rol
popa
call
(bad)
xchg
add
std
jae
jmp
sbb
cmp
xchg
mov
jle
lea
jo
and
push
jmp
fnsave
inc
mov
xor
mov
jb
scas
add
adc
cli
mov
sbb
jmp
cmp
inc
and
dec
or
gs
call
fs
mov
jmp
ret
data16
mov
mov
push
gs
add
test
int
add
xlat
ltr
pop
add
and
call
pop
add
popf
scas
push
push
lea
xor
ds
inc
loopne
idiv
jne
jmp
and
fs
jne
jmp
jmp
seto
jns
mov
add
adc
repz
add
movs
xchg
jmp
not
add
sbb
cli
call
xchg
xchg
les
push
cmc
jae
xchg
aaa
jmp
imul
dec
mov
xlat
xchg
ret
xchg
xchg
jne
lea
lea
cmc
add
hlt
xchg
jmp
sti
jne
out
adc
push
or
mov
out
mov
dec
add
add
inc
cld
xchg
cmp
inc
xchg
data16
pop
retf
ret
xchg
out
mov
xchg
in
sub
pop
or
mov
or
add
add
(bad)
movntps
jmp
mov
push
(bad)
mov
fnstsw
out
jnp
jne
aas
add
xor
ins
lods
push
movups
pop
xchg
jle
pop
pushf
and
inc
push
add
(bad)
jg
cmp
push
(bad)
sub
nop
sbb
cmp
and
adc
nop
call
jle
or
adc
add
mov
add
popa
xchg
add
(bad)
mov
adc
add
add
mov
add
int
push
adc
arpl
lea
test
add
repz
std
call
es
or
clc
xchg
movsx
sbb
pop
dec
cli
add
imul
fmul
add
adc
xor
je
cmc
out
add
adc
call
add
stos
pop
add
xchg
fst
add
(bad)
sar
inc
shl
xlat
cmp
sbb
into
pop
push
out
sar
call
fdiv
rcl
jl
movs
lods
cmp
lea
(bad)
and
fs
pusha
dec
mov
add
xor
sbb
addr16
add
pushf
dec
std
mov
mov
add
loopne
and
test
gs
add
push
mov
add
call
adc
mov
sub
xchg
adc
add
dec
loope
sbb
stos
data16
jmp
repz
call
cli
call
int3
adc
push
loope
fidivr
inc
clc
fs
add
push
dec
add
mov
icebp
mov
xchg
sar
inc
sbb
pop
or
test
test
and
and
mov
mov
push
fucomp
mov
cli
dec
or
pop
dec
fidivr
ror
inc
in
jmp
hlt
int
jns
popf
fs
and
ins
icebp
push
clc
lds
adc
jne
in
sbb
dec
push
mov
in
mov
jecxz
lock
adc
mov
cli
call
dec
adc
jae
pop
(bad)
push
add
cmc
push
repz
in
push
nop
jae
add
in
pop
js
add
int
add
retf
add
adc
push
fdivr
inc
add
popf
fdivr
or
mov
adc
add
mov
lea
call
cmp
cwde
inc
xchg
sbb
jo
out
jmp
call
pop
adc
jne
retf
jo
cmc
mov
les
call
call
cmp
jne
nop
jns
fnstsw
sub
retf
cli
jmp
hlt
cli
jne
retf
push
retf
jo
push
or
call
cli
call
int3
pop
call
push
mov
nop
fild
inc
lea
pop
pop
inc
stc
mov
in
or
or
loopne
pop
stc
leave
cli
(bad)
arpl
inc
pop
mov
add
(bad)
retf
or
or
or
pop
add
xchg
fdivr
mov
mov
cli
pop
div
add
mov
(bad)
cli
fst
xor
and
loopne
and
add
int3
adc
scas
xchg
js
popf
aaa
add
sub
push
cmp
jmp
enter
inc
call
add
mov
add
add
sub
(bad)
sbb
outs
cmp
je
in
jno
mov
add
sbb
mov
shl
mov
jno
cld
jne
(bad)
jo
std
enter
popa
or
(bad)
jg
les
jbe
cld
jne
enter
bound
push
stos
bound
jmp
inc
cld
jne
xchg
rol
xchg
enter
cmc
ror
pop
cwde
shl
mov
adc
movs
into
mov
adc
add
inc
std
cmp
loop
lods
into
push
adc
dec
adc
add
xlat
iret
cmp
(bad)
mov
add
lea
(bad)
ror
ret
iret
add
add
mov
aaa
xchg
push
std
(bad)
rcl
int
int
lds
rol
call
jne
imul
xchg
jns
popf
jno
fcom
je
mov
push
pop
push
std
retf
int3
(bad)
retf
push
mov
nop
in
sbb
mov
or
and
push
mov
(bad)
inc
call
adc
add
add
retf
xchg
add
or
mov
(bad)
(bad)
cmp
add
cmp
mov
or
add
xchg
push
add
adc
call
push
inc
xchg
mov
std
je
mov
pop
mov
adc
mov
loopne
add
add
push
cmc
test
adc
pop
adc
inc
jmp
inc
cmps
push
cmc
mov
(bad)
clc
(bad)
and
jg
mov
je
xchg
or
pop
cmp
call
data16
mov
cmp
iret
fidivr
aaa
call
inc
push
icebp
pop
or
in
into
ret
adc
add
add
cmp
out
pop
push
xor
jg
pop
jae
add
jae
add
push
add
shl
(bad)
gs
adc
into
aam
mov
in
inc
adc
mov
ss
sbb
push
sar
lods
and
adc
clc
add
fs
mov
nop
clc
(bad)
and
mov
adc
xor
or
repnz
retf
cli
mov
mov
adc
xor
retf
cli
mov
loope
dec
xchg
mov
(bad)
call
retf
cli
jmp
mov
(bad)
cmp
addr16
adc
push
(bad)
clc
out
jno
add
jns
cli
call
std
retf
int3
(bad)
and
add
jge
add
push
out
ror
shl
jle
sbb
cmp
add
pop
std
inc
mov
outs
xor
inc
or
mov
jg
int3
inc
repz
fisttp
sahf
rol
add
cmp
add
add
not
add
pop
inc
repz
mov
and
xlat
retf
int3
sbb
retf
int3
jl
dec
and
bswap
cmp
add
push
icebp
push
rol
(bad)
leave
adc
sub
fld
push
fst
leave
push
fst
dec
std
jmp
push
mov
cdq
in
sub
pop
add
add
inc
sub
test
and
mov
rcl
test
adc
lods
frstor
data16
push
mov
ret
lods
sbb
fst
fst
ja
inc
pop
push
mov
leave
stos
add
fcom
mov
lahf
les
push
std
mov
lahf
enter
push
std
mov
mov
mov
repnz
mov
int
add
repz
icebp
add
rcl
rol
call
lea
vmovhps
(bad)
cld
outs
ret
lods
sbb
fdivr
call
pop
or
nop
sbb
add
xor
jg
add
inc
adc
push
pop
cmp
or
jmp
add
add
push
sar
(bad)
xchg
inc
frstor
adc
xchg
rol
mov
mov
pop
mov
cli
xor
test
add
add
sub
jne
fmul
pop
adc
jae
pop
fdivr
pop
into
add
pop
push
lods
cli
push
out
xchg
fs
cmp
jno
mov
sbb
ja
int
out
jmp
push
mov
push
cmc
adc
dec
out
out
xchg
cmp
int3
(bad)
add
fist
cmp
les
sti
lock
sbb
out
jmp
pop
pop
push
sub
ror
pop
pop
dec
dec
or
push
inc
add
jle
call
inc
cdq
popa
cld
pop
lahf
jno
out
add
xor
inc
pop
mov
jae
and
jno
add
cmps
pusha
add
addr16
inc
leave
jmp
adc
inc
test
add
add
adc
rcr
adc
ret
push
enter
add
add
(bad)
retf
int3
pop
(bad)
retf
int3
imul
retf
int3
push
dec
and
inc
and
mov
(bad)
call
sbb
add
add
and
shl
and
xor
shl
push
or
pop
jno
into
fadd
sbb
or
and
xchg
(bad)
mov
loopne
sar
ret
cld
dec
sbb
fdiv
(bad)
je
xchg
mov
fsub
adc
popf
add
cmp
loopne
or
xor
cmp
imul
jno
mov
mov
ret
retf
int3
fld
retf
int3
inc
mov
jno
out
or
rcl
inc
data16
or
or
int3
jmp
jb
sahf
sub
add
push
xor
jg
or
sti
pop
add
retf
pop
retf
sbb
adc
mul
data16
xor
jg
into
cwde
cmc
or
aas
lock
push
xchg
xchg
not
(bad)
push
fstp
add
add
and
stos
xor
std
(bad)
sub
push
std
(bad)
cmc
jns
add
jp
add
add
add
ret
lds
inc
dec
cdq
inc
add
pop
inc
add
mov
cwde
mov
fdivr
and
and
test
or
ror
(bad)
in
push
pop
inc
fist
out
movs
push
xchg
xchg
not
(bad)
mov
sbb
(bad)
mov
in
add
push
fdivr
adc
and
mov
lea
add
jle
add
jle
add
jle
add
pop
mov
movs
pop
mov
xchg
pop
mov
xchg
pop
mov
xchg
test
xchg
pop
mov
xchg
pop
mov
pop
mov
fs
mov
add
push
pop
mov
push
pop
mov
inc
pop
mov
inc
pop
mov
pop
sbb
add
pop
add
lods
push
clc
push
pop
xchg
xor
add
jge
add
jge
add
jge
add
pop
add
nop
out
mov
(bad)
pop
add
nop
(bad)
adc
xchg
dec
pop
leave
fiadd
cmps
adc
xchg
mov
lahf
inc
add
xlat
mov
cld
push
sar
dec
push
jno
mov
add
lds
pop
mov
xor
xchg
mov
mul
lea
mov
and
sub
add
jge
add
cmp
std
(bad)
mov
jnp
add
push
add
or
inc
add
push
jg
or
cmc
or
movs
clc
repz
and
and
or
push
add
mov
inc
xor
mov
xchg
out
add
add
add
push
cmp
xor
push
std
(bad)
pop
push
add
jl
inc
add
dec
inc
mov
in
adc
adc
out
pop
xchg
cmc
or
push
dec
call
cli
and
and
inc
add
jnp
add
jl
add
jl
add
jns
add
jns
add
jns
add
add
add
push
mov
push
mov
push
push
mov
push
push
mov
push
mov
push
mov
push
push
mov
push
push
mov
push
mov
push
mov
adc
mov
push
push
mov
push
mov
adc
add
adc
inc
adc
add
jl
add
add
ds
push
add
nop
cmps
push
add
adc
popf
inc
add
push
mov
pushf
inc
add
fnstcw
mov
jp
add
inc
aad
pop
leave
mov
push
jmp
ja
inc
lea
std
inc
add
xchg
shl
lds
jg
stos
ja
push
cmp
lds
ret
add
sbb
add
xor
push
jmp
shl
push
call
test
jno
rcl
push
inc
imul
in
jo
stos
ret
test
xchg
inc
or
add
dec
shr
cmp
jmp
mov
aam
add
and
xchg
rcl
sti
(bad)
adc
jae
cld
pop
ret
(bad)
clc
jmp
add
ret
in
aad
or
cdq
cmp
adc
jmp
lods
and
jbe
inc
dec
cmps
mov
jbe
adc
pop
add
nop
shl
jne
pushf
inc
sbb
add
jae
stos
jne
dec
gs
adc
lahf
adc
mov
cld
xor
push
clc
xchg
loope
xchg
adc
jo
stos
ss
gs
jmp
ret
in
adc
int3
gs
mov
add
dec
shl
jmp
cld
xor
cmc
daa
cld
(bad)
jmp
lds
sti
mov
mov
cli
je
inc
cld
adc
mov
je
rcl
sti
jmp
(bad)
or
test
data16
out
sbb
add
pushf
inc
fld
adc
push
shl
add
adc
mov
popf
adc
rol
jne
rol
popf
mov
inc
mov
add
shl
gs
push
std
dec
out
ja
xchg
sbb
rcl
mov
push
(bad)
pusha
hlt
cli
rcl
mov
test
loop
enter
inc
shl
aas
(bad)
shr
(bad)
rcl
push
add
mov
add
fld
gs
jmp
and
std
jmp
out
int
add
out
jle
popf
pop
push
mov
jmp
inc
cdq
nop
inc
ins
adc
jo
cld
mov
inc
popf
nop
inc
ins
stos
jno
call
xchg
jecxz
cld
sub
cli
push
out
xchg
pop
pop
mov
jne
add
or
jbe
add
push
xlat
imul
push
push
call
ret
xchg
inc
sbb
push
std
mov
jmp
and
adc
push
add
out
jnp
push
xchg
add
xor
sbb
push
retw
jmp
std
out
fdivr
push
iret
test
add
arpl
lds
out
xor
push
std
sbb
add
in
mov
test
std
pop
cmps
loop
ret
cmps
out
call
xchg
call
push
movs
test
dec
aam
or
lds
int
xchg
mov
popa
loopne
(bad)
fisttp
pop
std
in
add
out
mov
cmp
call
xor
inc
xor
aad
pop
cmp
call
add
pop
dec
call
test
jae
(bad)
lock
ret
jmp
shl
dec
call
test
nop
aad
pop
int
das
ret
stos
call
cmp
cmc
pusha
std
jae
inc
in
sahf
call
call
pop
pop
cmp
inc
test
pop
push
push
clc
xchg
loope
add
inc
loopne
add
and
fsqrt
push
cli
push
or
or
add
add
add
(bad)
bound
jmp
(bad)
jmp
add
or
aad
inc
add
and
push
movs
gs
jmp
loop
(bad)
cmp
push
add
adc
inc
(bad)
cli
inc
mov
sahf
jo
not
lods
rcl
add
lahf
jo
add
pop
and
mov
dec
lahf
cli
push
push
mov
push
inc
mov
jne
cmp
add
jmp
(bad)
cmp
xchg
jne
pushf
inc
dec
cmp
(bad)
test
pushf
inc
sbb
dec
std
inc
jnp
mov
mov
mov
std
push
add
(bad)
loop
inc
fucom
aad
call
adc
add
out
inc
int
adc
popf
adc
and
(bad)
adc
je
mov
jne
mov
xchg
push
sbb
mov
and
call
ins
mov
test
mov
in
hlt
mov
add
inc
add
aam
dec
push
std
dec
call
add
adc
push
stc
fiadd
stc
push
sti
stos
jecxz
xor
ds
inc
(bad)
(bad)
cli
push
cli
xor
ds
fiadd
stc
out
cli
stos
in
xor
(bad)
loope
inc
popf
stc
fdivrp
add
stos
in
les
repz
adc
test
jae
add
es
nop
sbb
cmp
jmp
xor
jae
jne
add
or
idiv
inc
(bad)
ret
jecxz
jo
push
std
(bad)
loopne
fiadd
clc
or
mov
push
dec
add
std
push
jne
idiv
push
push
call
and
add
call
movs
xor
pop
dec
shr
xor
add
add
das
rcl
add
(bad)
shl
(bad)
pusha
add
cli
(bad)
dec
add
add
inc
in
int
cli
adc
jle
add
call
inc
or
adc
mov
fs
push
xor
dec
xchg
das
les
outs
cld
dec
cli
add
loopne
out
es
loope
shr
std
jmp
pop
add
sbb
jo
dec
inc
cld
xor
stos
cld
jecxz
mov
shl
xchg
dec
pop
add
add
pop
jmp
addr16
jo
pop
add
sahf
cli
push
cmps
sti
push
mov
sub
mov
xor
cld
adc
mov
out
or
cld
(bad)
jmp
adc
pop
mov
out
int3
push
add
loopne
in
call
inc
popf
(bad)
in
stc
add
stos
call
add
int
les
aad
inc
jmp
mov
add
adc
fsubr
dec
std
dec
sbb
js
xchg
adc
jne
jmp
cli
push
cmps
hlt
cli
jne
inc
dec
push
cld
adc
pop
jle
call
adc
imul
(bad)
dec
dec
ror
popf
out
jmp
pushf
add
(bad)
jge
mov
add
ret
push
out
mov
and
jmp
xchg
shl
or
dec
mov
or
inc
pop
ret
(bad)
call
cmp
push
std
jmp
push
out
add
std
call
je
call
pusha
mov
pop
dec
std
push
jge
xchg
and
cli
pop
add
shl
hlt
popf
sbb
call
mov
xchg
adc
push
push
std
out
out
dec
sub
pop
xor
push
out
dec
std
inc
add
je
jp
imul
in
inc
dec
pop
mov
push
cmc
cmps
cld
dec
add
add
cld
or
or
loopne
adc
test
add
xchg
or
mov
mov
loopne
adc
jge
adc
test
adc
add
adc
jge
add
cli
pop
push
call
sti
je
jmp
cmc
jmp
push
out
mov
int3
test
cwde
jo
push
std
add
scas
inc
in
and
addr16
sti
cmp
clc
cmc
cmp
(bad)
cli
xchg
add
or
cli
inc
add
loopne
add
mov
or
ins
loope
shl
inc
loopne
sbb
js
inc
push
fisttp
push
ins
aad
dec
jnp
xchg
loope
mov
out
in
cli
inc
lea
add
pop
jmp
cmp
cli
inc
add
dec
xchg
jns
dec
addr16
cmp
inc
pop
js
call
test
jo
add
pop
fadd
ins
or
or
dec
shr
adc
add
cli
push
data16
imul
aad
mov
(bad)
leave
dec
ror
adc
push
add
call
aam
pop
dec
jbe
imul
out
jmp
call
aad
ret
aaa
adc
aaa
adc
mov
in
cli
adc
ror
in
cli
mov
inc
in
in
jmp
push
cmc
add
in
mov
cli
push
add
inc
in
imul
push
movs
ins
add
adc
push
mov
sub
fnstsw
jne
adc
xchg
add
mov
xor
std
pop
sahf
(bad)
int3
cmc
and
int
cld
xor
es
and
adc
and
cmp
adc
dec
push
inc
scas
inc
lds
sub
push
in
in
mov
push
inc
cld
or
inc
aad
lea
sbb
add
nop
dec
lock
mov
pop
pop
xchg
xor
and
lods
aad
dec
sti
push
xchg
sub
shl
fisttp
xchg
shl
sti
adc
ds
fadd
xchg
mov
xor
lahf
clc
lods
aam
pop
dec
(bad)
sti
push
add
repz
push
sti
icebp
test
aam
add
sbb
xchg
rol
cmp
or
dec
pop
add
xor
pop
pop
pop
push
pop
rcl
or
xchg
std
and
data16
rcr
ret
mov
icebp
adc
cld
jmp
out
xchg
dec
mov
scas
mov
mov
push
data16
cmp
rcl
je
adc
iret
push
gs
jmp
and
xchg
lds
sbb
mov
fsubr
rol
xchg
and
or
mov
push
(bad)
mov
cmp
out
fstp
in
(bad)
rol
and
lds
movs
inc
add
push
test
aas
inc
or
aaa
das
jmp
mov
outs
pop
xor
cmp
and
call
push
sub
push
call
mov
xchg
mov
mov
je
es
out
neg
sti
pop
push
cmp
in
retf
(bad)
lea
std
call
mov
call
test
jno
add
gs
add
in
mov
add
xchg
shl
in
data16
pop
cmc
inc
fdivrp
call
mov
xor
or
and
adc
(bad)
dec
adc
mov
xor
inc
imul
ret
test
sti
pop
pop
mov
push
push
sub
xor
add
xchg
rol
cmp
call
xchg
popf
mov
call
test
call
mov
pop
ret
(bad)
xor
mov
(bad)
mov
jbe
adc
aad
or
push
sbb
std
jno
xchg
mov
jmp
push
pop
ret
push
xor
add
cdq
xchg
jmp
inc
in
mov
push
mov
pop
push
mov
jne
push
pop
cld
sar
iret
hlt
pusha
add
lea
mov
mov
inc
mov
test
and
push
fmul
mov
mov
clc
mov
lahf
pop
or
pop
std
je
pop
cli
add
xchg
stc
aas
add
and
push
xchg
add
fild
add
cmps
adc
lea
sbb
jle
pop
mov
mov
psubsb
loope
shl
dec
add
imul
lea
dec
and
push
add
iret
or
xchg
lahf
dec
cld
pop
fcomip
mov
add
mov
add
mov
test
lahf
int3
shl
dec
and
jb
xchg
push
mov
fwait
pop
hlt
cmp
daa
jne
lahf
pop
clc
dec
das
add
push
jo
es
fisub
sbb
mov
add
fwait
dec
cld
(bad)
dec
jbe
push
dec
aaa
(bad)
rol
mov
add
out
add
lea
adc
ret
bnd
push
xor
cmps
sbb
xor
jp
not
repnz
adc
add
jmp
inc
pusha
sbb
add
fimul
mov
xchg
call
sub
xchg
call
or
ficomp
lock
sbb
fidivr
adc
rcl
add
mov
jecxz
mov
xchg
out
dec
or
mov
mov
cs
xor
outs
and
mov
adc
add
inc
out
cwde
sbb
adc
add
lahf
leave
rol
cmps
inc
mov
xor
js
or
aaa
mov
sbb
lahf
dec
or
add
fst
adc
movs
cmp
pop
mov
cdq
add
mov
sub
or
pop
popf
sub
dec
sbb
add
cwde
and
inc
lea
cld
addr16
xlat
cld
call
or
xchg
and
add
pop
add
sub
mov
lock
dec
jo
loope
adc
rol
sbb
lods
xchg
fadd
sahf
aas
adc
push
jg
xchg
push
add
or
fdivr
mov
jo
loope
pop
xchg
add
xchg
je
(bad)
(bad)
mov
push
scas
add
and
or
aas
popf
cmp
add
adc
adc
out
loopne
nop
adc
push
or
inc
add
pop
mov
dec
lea
dec
push
add
fwait
inc
or
add
ss
sbb
sar
jne
xchg
push
lock
lahf
in
popf
sar
mov
push
lahf
cmp
test
lock
int
pop
pop
xchg
push
popf
lock
sar
push
es
lock
in
jne
xchg
mov
push
stos
loop
lock
adc
jo
fadd
sub
fadd
add
add
sbb
and
mov
mov
mov
loopne
push
adc
fcom
push
sub
sub
sar
inc
add
inc
adc
je
mov
push
push
add
adc
sbb
(bad)
xor
cld
jbe
add
mov
inc
add
adc
fwait
push
fiadd
adc
test
sub
cld
mov
cwde
lds
dec
xchg
nop
xchg
jmp
mov
add
adc
jmp
xadd
push
jns
xchg
dec
shl
add
cwde
xchg
das
inc
or
add
cdq
inc
clc
add
pop
cdq
aas
or
or
add
fst
mov
or
adc
adc
adc
or
pop
sti
jmp
sbb
test
out
ja
xchg
leave
sub
push
in
fcom
or
into
fcomi
(bad)
ficomp
sti
lea
add
jge
stos
push
inc
cld
popf
sbb
add
or
sbb
adc
adc
xchg
push
cld
data16
add
cmp
or
lds
add
or
and
xor
inc
add
lea
inc
adc
inc
add
xchg
call
popa
push
xchg
(bad)
repz
mov
int3
pop
pop
add
xchg
adc
dec
and
ret
cmp
cdq
shr
int3
or
jmp
adc
add
cld
inc
fcom
add
mov
in
lea
add
jmp
push
mov
std
call
xchg
lea
(bad)
fcom
or
push
into
clc
shl
stc
push
add
retf
and
int3
add
sahf
add
dec
xchg
jle
sub
cwde
dec
clc
cwde
int
add
(bad)
add
xor
xchg
repnz
loopne
cmp
add
and
and
les
int
dec
lock
add
fadd
or
dec
add
lods
add
and
xchg
test
jge
ud2
mov
sldt
push
stos
clc
mov
fisttp
inc
add
jmp
retf
xchg
lea
sti
aam
or
xchg
adc
xchg
xchg
inc
or
adc
xchg
int3
add
nop
dec
pop
rcl
jge
mov
pop
mov
fst
adc
(bad)
add
iret
xchg
jl
add
mov
fcmovnu
mov
into
xchg
adc
sbb
add
dec
pop
adc
adc
mov
mov
jmp
sbb
jmp
mov
cwde
sar
dec
sbb
inc
fistp
in
sbb
add
pop
xor
add
pop
add
mov
add
and
mov
pop
cmp
das
cld
inc
movs
or
imul
mov
sbb
aas
xor
push
or
inc
cld
mov
add
xchg
fdivr
push
jmp
retf
popa
fisttp
mov
push
add
pop
iret
jmp
movs
add
inc
sbb
push
add
xor
xchg
not
loopne
sub
sar
les
xchg
add
ror
mov
add
or
add
mov
xchg
or
stos
add
stos
call
pop
mov
mov
mov
int3
add
add
es
pop
popa
mov
in
add
xchg
adc
dec
push
xchg
push
mov
pop
inc
aad
add
daa
and
xchg
js
sbb
add
or
fiadd
push
cdq
inc
nop
ror
js
fst
mov
rcr
popf
add
add
int
mov
pop
add
popf
xchg
into
jmp
dec
fst
pop
pop
ss
mov
in
push
xor
mov
out
add
or
sub
ficomp
cmp
test
pop
cmc
add
sar
mov
int
(bad)
xor
movs
and
or
add
inc
and
idiv
push
test
jg
in
lods
int
mov
xchg
outs
mov
shl
xchg
mov
cmp
popf
jnp
enter
lea
or
cmp
hlt
and
xchg
mov
cmp
in
adc
push
jmp
xchg
jbe
dec
pushf
push
add
push
pop
xchg
into
aam
(bad)
aam
sbb
sbb
lods
int3
cld
jmp
push
or
xchg
into
aad
lods
into
aad
add
mov
fsub
test
and
call
mov
inc
adc
inc
mov
sub
sbb
push
(bad)
or
add
mov
push
sti
je
jg
nop
rcl
add
push
movs
mov
hlt
and
add
jne
xchg
pusha
cld
dec
adc
cmp
(bad)
hlt
and
call
jne
and
test
or
and
mov
or
add
or
(bad)
std
(bad)
fnstsw
hlt
data16
inc
add
fisub
into
and
mov
clc
dec
clc
div
pop
jmp
sbb
inc
and
jns
es
add
xchg
loopne
lock
and
(bad)
push
dec
clc
sub
push
fwait
iret
repz
adc
dec
dec
add
mov
cli
and
adc
add
mov
mov
inc
out
push
add
scas
call
mov
jns
(bad)
sbb
xchg
repnz
jmp
jge
loopne
and
mov
lea
bound
sbb
test
cmps
pop
mov
clc
xchg
repnz
add
sbb
clc
popf
jns
or
mov
mov
xchg
jns
or
add
mov
rcl
dec
hlt
mov
or
dec
inc
jns
add
rol
xchg
or
push
and
mov
dec
push
adc
jg
jge
dec
push
adc
cld
je
dec
add
fst
add
add
pop
adc
jg
cld
aam
test
jbe
jl
cmps
pop
jno
sbb
add
mov
dec
mov
lea
add
pop
pop
adc
clc
xor
mov
mov
xchg
jge
lock
inc
mov
js
mov
clc
mov
and
mov
les
iret
sbb
cld
je
jge
cld
jbe
hlt
lock
jno
dec
in
jl
adc
add
pop
aad
pop
or
push
mov
les
add
repnz
add
mov
xchg
iret
test
xchg
cli
pop
scas
sbb
inc
stc
jg
dec
push
add
push
js
pop
push
push
add
adc
pop
add
ja
call
pop
nop
push
jno
mov
int3
rcl
push
mov
xchg
idiv
or
aad
(bad)
fstp
mov
into
adc
fld
shl
jno
sti
adc
push
push
adc
push
call
push
dec
adc
xchg
push
add
add
(bad)
inc
popf
mov
mov
call
lea
mov
cmps
xchg
adc
pop
adc
(bad)
jmp
pmaxsw
(bad)
ror
sti
dec
hlt
mov
and
push
mov
jbe
(bad)
push
dec
pushf
in
add
adc
cld
sub
int
dec
adc
pop
mov
push
push
add
sti
and
call
mov
sar
push
inc
sbb
pop
xchg
mov
push
add
jne
or
adc
mov
or
mov
in
loop
add
add
rol
push
call
mov
std
repz
inc
mov
inc
ffree
in
std
adc
adc
sti
adc
push
sub
fsubp
xlat
jg
jp
sbb
jl
clc
std
jl
std
xor
add
or
pop
cmp
add
xchg
mov
add
sbb
push
dec
adc
adc
psubsb
jl
add
push
jno
sahf
int3
int3
rcl
je
fwait
clc
add
or
push
mov
cli
jmp
or
cmp
jecxz
int
push
mov
(bad)
push
xor
inc
cld
push
mov
mov
or
sbb
inc
shl
punpckldq
xor
xchg
popf
jo
push
or
mov
jle
cmp
push
add
(bad)
dec
add
dec
sahf
lods
sbb
les
mov
add
sbb
xor
(bad)
sbb
add
cmp
push
add
xor
ret
punpcklwd
std
(bad)
fld
inc
int
aaa
iret
mov
adc
mov
(bad)
not
jl
add
adc
test
adc
add
sbb
movups
add
lea
inc
je
(bad)
out
and
jg
xchg
test
test
mov
(bad)
add
pop
push
inc
clc
pop
adc
add
add
cmp
jmp
pushf
cmp
mov
into
ror
test
adc
add
adc
add
in
add
adc
jmp
mov
jle
add
ja
cld
pop
xor
sub
retf
iret
std
jl
popf
adc
cmp
or
push
mov
add
add
out
out
push
sbb
xchg
out
mov
inc
je
xchg
out
mov
jmp
jmp
rol
test
or
adc
js
jno
pushf
mov
jmp
sti
(bad)
push
add
call
popf
lock
icebp
push
cld
push
aad
add
pop
add
retf
add
cwde
mov
add
add
ficomp
adc
pop
sbb
xchg
pop
fcom
mov
mov
xchg
aaa
(bad)
mov
sbb
movs
lea
add
(bad)
mov
data16
sbb
xor
push
mov
pop
pop
pop
jg
pop
xchg
mov
(bad)
jmp
jmp
mov
data16
jo
add
jae
cmp
(bad)
stos
sbb
xor
add
add
push
inc
add
ud0
push
jg
mov
xchg
lds
pop
add
rcl
out
imul
fadd
cld
push
test
pop
add
push
jno
push
xor
add
or
push
mov
cmps
mov
sar
add
into
push
or
or
sbb
adc
jge
dec
push
std
push
push
inc
inc
adc
cmp
call
sti
push
stos
mov
dec
jmp
out
dec
call
pop
push
adc
(bad)
out
(bad)
mov
sti
mov
add
add
push
test
xchg
outs
js
add
and
test
outs
js
adc
or
cmp
fs
dec
mov
out
or
jmp
das
jmp
call
or
push
mov
mov
std
inc
dec
call
add
cwde
icebp
lods
cmp
push
mov
xchg
jo
hlt
adc
add
add
sbb
int
push
lea
in
call
mov
ror
jle
add
jne
icebp
adc
in
xor
sti
pop
add
adc
rcl
add
in
cmp
push
ins
or
inc
add
mov
mov
mov
mov
call
mov
or
pop
add
popf
adc
pop
add
shl
sbb
mov
add
mov
push
test
adc
and
adc
mov
adc
and
mov
sbb
sti
adc
cmp
in
inc
lea
jecxz
cmp
sti
and
jge
add
cdq
adc
add
jb
mov
pop
sbb
inc
adc
adc
sbb
sti
call
(bad)
(bad)
jle
adc
ret
cmps
xchg
jecxz
sbb
pop
out
stos
adc
jle
push
mov
adc
fnstenv
sbb
inc
dec
push
lds
inc
fnsave
xor
in
push
rol
les
or
add
int
xchg
xchg
popf
dec
and
and
jg
fwait
imul
inc
cmp
and
jb
call
cmps
or
push
fwait
inc
or
outs
add
jo
add
mov
sbb
mov
cmps
push
or
popa
push
add
imul
and
add
sbb
jae
ret
xchg
inc
and
mov
add
fst
add
and
xchg
xchg
sub
call
add
or
sub
stc
cmp
mov
les
and
add
sbb
add
push
mov
adc
add
or
jmp
adc
adc
push
push
xchg
inc
xchg
out
shr
fcmovnu
(bad)
das
neg
adc
shl
je
pop
pop
mov
mov
push
fst
das
shr
das
leave
faddp
das
dec
dec
push
push
out
push
cmc
pop
mov
inc
call
pop
or
ret
add
add
dec
push
cmp
call
push
fmul
pop
iret
pop
add
sbb
cmp
outs
sbb
imul
push
push
adc
adc
test
fcom
jmp
xchg
push
or
sahf
sbb
int
and
fbld
add
movs
xor
add
pop
jg
fcomp
std
dec
ins
add
add
push
or
mov
push
movs
sbb
call
jne
add
ror
mov
xchg
test
dec
pop
jg
or
test
xchg
add
jne
inc
call
pop
add
sahf
out
sti
je
inc
call
pop
mov
cli
je
inc
call
shl
fsubr
and
call
sub
inc
mov
add
push
push
add
dec
sub
or
add
or
sbb
(bad)
push
add
fwait
inc
or
pop
je
hlt
(bad)
add
add
or
adc
xchg
sub
pavgw
maskmovq
div
add
cmp
push
and
pop
pop
mov
push
jne
inc
inc
sbb
out
call
dec
call
(bad)
cld
stos
out
push
aas
call
pop
add
add
ret
sqrtps
add
adc
inc
add
cwde
cld
pop
popf
adc
add
push
sbb
or
jno
mov
mov
test
iret
cmp
pop
xchg
mov
out
nop
adc
sbb
(bad)
outs
int3
jae
jns
cmp
xchg
add
ret
setno
cld
dec
adc
in
adc
(bad)
jl
fwait
cli
(bad)
adc
std
dec
adc
pop
not
test
jmp
popa
push
mov
hlt
mov
lock
popf
xchg
std
adc
mov
inc
aaa
mov
jg
or
cmp
add
inc
(bad)
pop
or
pop
and
sar
daa
(bad)
pop
cmp
(bad)
mov
aad
into
outs
shr
enter
pusha
cdq
jmp
xchg
cmp
cmp
xor
imul
add
mov
inc
adc
sbb
cld
jmp
add
and
xchg
int3
jmp
xor
xor
cmp
push
in
dec
cwde
add
gs
add
inc
or
clc
sbb
adc
nop
ror
test
adc
add
repnz
adc
add
sub
js
pop
mov
inc
add
int
add
pop
jmp
je
xchg
dec
add
imul
adc
jge
push
add
dec
out
push
into
inc
test
push
xchg
inc
lea
jo
loopne
jo
sub
sar
xor
pop
pop
sti
add
jg
dec
ja
sbb
jmp
xchg
hlt
add
add
out
dec
adc
push
(bad)
jecxz
push
call
les
shl
sti
inc
in
push
sbb
cmp
shr
sti
dec
sbb
addr16
sti
jmp
in
adc
dec
push
add
pop
test
inc
cdq
jmp
jmp
mov
jmp
add
sbb
and
(bad)
jne
stc
jmp
inc
push
(bad)
dec
add
add
or
inc
nop
(bad)
push
ja
ret
xchg
push
mov
inc
push
call
adc
hlt
jmp
inc
popf
loopne
add
jae
add
adc
je
(bad)
cli
add
add
cld
cmc
inc
loope
je
pop
psubsb
or
add
xchg
hlt
call
xor
aaa
(bad)
and
call
xchg
dec
sti
adc
rcr
jno
or
movs
xchg
mov
push
das
inc
sbb
mov
xchg
fsubr
push
sbb
sub
loop
xor
inc
xor
sbb
sbb
call
adc
(bad)
inc
das
ror
pop
ret
mov
push
call
push
push
or
test
enter
sbb
jne
enter
cld
or
jmp
stos
push
ret
jl
push
add
cmp
ins
lock
or
test
in
ret
inc
add
mov
add
push
push
push
add
xchg
rcl
xchg
int3
fild
lea
fsubr
rcl
xchg
mov
sbb
mov
xchg
jmp
add
stos
dec
call
mov
jns
inc
push
test
jae
jmp
cli
jmp
out
or
cmp
add
pop
add
dec
mov
ret
inc
test
icebp
add
inc
xor
or
or
mov
repnz
add
mov
push
(bad)
in
push
mov
push
xchg
scas
jg
dec
scas
add
inc
jmp
lahf
jmp
(bad)
call
push
mov
mov
and
or
xchg
add
add
jno
inc
and
xchg
cwde
fld
sahf
mov
inc
test
and
xchg
push
xchg
data16
jmp
sub
push
inc
lock
std
stos
call
add
ror
jno
(bad)
pop
or
sbb
jmp
add
out
pop
mov
jg
add
adc
mov
inc
mov
push
xchg
jb
test
xor
add
cmp
js
mov
push
test
call
or
or
dec
call
push
jne
pusha
add
adc
jmp
sub
pop
dec
fldenv
xor
mov
sub
das
call
gs
mov
add
enter
push
test
daa
test
sbb
sbb
popf
adc
dec
add
and
add
ds
push
inc
push
lods
jmp
push
test
mov
xchg
fnstcw
cli
xor
add
xor
push
call
add
hlt
jmp
add
adc
adc
fdivr
jae
inc
call
pop
fsubrp
sti
jne
loopne
(bad)
fs
call
xchg
mov
jb
lods
pop
in
inc
sbb
rcr
loop
pop
into
leave
inc
cld
fwait
loop
jmp
xchg
jns
add
or
inc
in
push
xchg
mov
mov
out
loop
ret
out
call
pop
mov
add
mov
in
and
inc
je
daa
rol
or
(bad)
xlat
mov
xchg
adc
ret
cmc
or
add
mov
push
adc
ret
(bad)
jecxz
push
(bad)
call
add
add
jmp
jne
in
xor
adc
jle
pop
jnp
test
sar
stos
idiv
cwde
mov
adc
inc
leave
add
mov
inc
cld
cld
xchg
push
dec
jne
pop
sbb
adc
add
cld
pop
mov
inc
pop
ret
push
in
mov
add
adc
mov
outs
(bad)
test
dec
push
(bad)
sar
sti
jbe
in
cld
int3
push
add
rcl
or
rol
mov
(bad)
das
in
test
xchg
clc
(bad)
stos
in
test
hlt
idiv
stos
adc
enter
cmp
add
push
push
lea
clc
(bad)
push
data16
mov
jg
cdq
push
mov
into
xchg
mov
jmp
adc
test
gs
xchg
xchg
cmp
mov
push
xor
daa
xlat
push
jmp
(bad)
jmp
(bad)
stos
jmp
push
stos
bound
add
cmc
and
inc
into
jmp
stos
jmp
push
adc
sti
push
mov
add
int
jb
push
ror
push
jg
mov
ror
xchg
inc
cld
ja
sti
neg
push
or
pop
mov
cmps
add
ror
sbb
out
add
sub
sti
mov
add
adc
add
out
and
add
lea
ret
jb
mov
std
call
jmp
inc
clc
and
jmp
stos
xchg
or
sldt
faddp
mov
xchg
neg
and
jl
retf
add
mov
jg
les
sub
sbb
add
daa
sar
or
call
jb
pop
dec
cld
dec
and
call
ds
nop
adc
leave
das
call
sti
inc
call
add
sahf
ins
add
add
jne
cmp
call
xor
ret
call
dec
ds
add
cld
in
sti
call
je
push
popa
in
mov
mov
pop
sbb
add
xchg
loope
add
inc
iret
inc
add
adc
das
xchg
push
test
pop
xor
es
add
inc
gs
inc
dec
rol
sbb
sti
jmp
adc
add
mov
or
(bad)
stos
dec
mov
in
mov
dec
(bad)
fsub
in
out
out
mov
mov
inc
fst
ret
add
int3
adc
add
adc
inc
mov
in
jg
sub
out
jne
iret
add
popf
adc
inc
add
jmp
adc
push
lock
hlt
inc
add
add
aam
pop
jmp
call
xchg
push
cdq
mov
in
mov
add
test
aas
xchg
inc
xchg
inc
call
mov
fdiv
(bad)
and
xchg
mov
push
shr
adc
add
xor
mov
movups
inc
in
shr
pop
repz
mov
cld
jmp
ins
add
jge
xor
cld
(bad)
cmp
add
or
or
ror
test
push
call
cld
mov
add
xor
adc
push
cwde
dec
sbb
or
jmp
push
data16
out
fidiv
clc
int
add
and
jb
pop
fld
add
in
or
lea
push
lea
pop
int
add
or
in
aam
imul
jne
pop
scas
fcom
push
add
cmps
push
std
or
sub
arpl
or
shl
xchg
adc
mov
clc
jbe
push
jp
adc
frstor
mov
mov
inc
ins
pop
or
loopne
and
in
test
mov
add
aad
inc
xchg
adc
add
in
pushw
adc
or
dec
add
add
jb
xor
xchg
in
idiv
jmp
dec
push
push
add
shl
push
push
cmp
or
cwde
push
push
mov
(bad)
fld
and
cmc
mov
add
aad
adc
fld
mov
fsubr
rcr
les
cmps
ror
stos
jbe
xor
add
in
jg
stos
pop
dec
cld
dec
dec
das
int
lock
xchg
sub
add
fdivr
(bad)
fimul
aad
jmp
fsub
fsubr
jo
jne
lock
call
add
push
push
add
pop
add
nop
jp
inc
aad
xchg
add
add
push
inc
push
cmp
in
test
sti
pop
add
inc
loopne
xlat
or
push
inc
fdivr
add
and
adc
rcl
jno
(bad)
adc
lds
dec
call
test
push
iret
adc
inc
rol
retf
or
jg
inc
sbb
pop
add
aaa
int3
in
cmp
sti
pop
pop
xor
add
add
pop
repz
add
or
add
push
push
or
and
(bad)
test
xchg
hlt
add
stc
push
adc
int3
inc
movs
mov
add
out
das
rcl
cmp
test
xchg
mov
popf
jmp
xor
push
std
dec
adc
sbb
mov
dec
jmp
push
mov
clc
jg
add
popf
mov
call
inc
add
mov
test
(bad)
mov
cli
(bad)
jp
in
popf
adc
or
inc
xlat
sti
push
out
push
mov
neg
bound
(bad)
mov
mov
adc
add
push
xchg
popa
loopne
dec
inc
loopne
cmp
(bad)
cli
sar
sbb
inc
add
in
push
(bad)
call
inc
or
add
ret
mov
cmp
adc
or
call
inc
pop
or
int3
adc
ja
dec
inc
call
lea
mov
add
push
or
sub
or
push
and
call
add
stos
pop
add
push
test
and
lds
mov
sbb
daa
daa
lds
movs
sbb
add
sbb
(bad)
shr
dec
lea
mov
inc
add
int
jg
ins
popf
mov
hlt
loope
xchg
xchg
pop
jo
daa
shr
and
or
xor
xchg
xchg
pop
jo
push
(bad)
mov
mov
adc
mov
(bad)
jle
cmp
push
adc
cmp
int
and
push
je
hlt
and
jo
call
ins
add
out
add
outs
fcomp
adc
push
call
xchg
mov
rol
sahf
sti
push
push
mov
rcl
push
xchg
push
in
or
or
inc
add
sahf
jns
push
loope
cmp
mov
ror
add
xor
jb
add
ror
aaa
enter
cmp
push
das
rcl
jo
(bad)
adc
mov
sbb
cld
dec
push
jg
add
mov
jg
or
test
fst
add
movs
lahf
dec
or
bound
add
and
mov
add
cwde
mov
cmp
pop
cmc
cmp
sbb
pusha
cmp
fiadd
out
mov
nop
sbb
or
js
(bad)
push
cld
mov
jp
sub
add
add
inc
std
dec
gs
add
add
std
dec
add
add
adc
ds
add
xor
out
test
cld
dec
xor
add
mov
add
add
inc
std
dec
push
(bad)
mov
sbb
jbe
ds
dec
test
mov
jge
add
xchg
inc
jge
(bad)
call
pop
leave
into
jno
add
das
shl
inc
mov
or
xchg
cmc
and
sbb
movs
ins
and
dec
jmp
lds
push
cmp
je
jb
fst
mov
xor
mov
add
mov
inc
daa
sti
test
jmp
into
out
cmp
push
call
mov
jo
dec
sbb
jne
push
push
push
add
cmps
addr16
js
fadd
pushf
xlat
jne
xchg
(bad)
push
mov
inc
push
push
call
add
push
out
inc
pop
sub
pop
loope
push
add
push
pop
and
add
std
mov
jg
mov
rcl
push
push
mov
xchg
(bad)
cmp
lea
or
mov
and
retf
ret
xor
fld
push
jg
sbb
add
add
pop
or
sti
xor
mov
xchg
(bad)
cmp
add
dec
fdivr
jmp
fwait
sti
push
inc
les
scas
adc
sbb
pop
pushf
adc
or
dec
or
push
or
adc
adc
push
xor
xchg
into
psrlw
data16
add
mov
bnd
das
xchg
jae
or
pop
mov
lea
test
pusha
cmp
punpckldq
mov
sbb
adc
jg
add
mov
xor
dec
stos
xchg
popa
cld
frstor
shl
ror
mov
add
pop
out
sbb
shr
jg
aam
or
mov
in
(bad)
data16
or
add
je
cdq
dec
or
push
or
pop
sti
pop
pop
in
inc
xor
mov
and
div
sub
ret
and
sbb
xor
shl
das
leave
fsubrp
xor
rol
dec
add
nop
loop
or
call
sbb
stos
jno
mov
xor
xor
dec
jmp
jg
movs
push
jne
mov
sbb
inc
inc
mov
xor
ret
cdq
or
jmp
mov
jmp
popa
push
test
add
jmp
call
call
jne
std
dec
adc
pop
push
xlat
push
xor
out
adc
adc
cld
es
inc
int
xor
push
add
loopne
xchg
sbb
push
pushf
pop
clc
out
xlat
xchg
jne
(bad)
dec
or
add
stos
in
sti
aas
push
push
xchg
xchg
cmc
(bad)
cmp
jnp
push
add
sar
enter
xor
mov
xchg
test
je
pop
lea
pop
clc
xchg
shl
push
mov
sti
mov
fld
in
fild
or
add
shl
add
sti
pop
or
vorps
push
inc
add
test
in
xor
rcr
xor
inc
repz
jne
push
inc
push
sbb
data16
dec
xchg
aam
ds
xchg
xchg
inc
cld
jne
add
adc
(bad)
aam
pop
mov
dec
push
cmp
les
mov
mov
sti
push
add
gs
ds
sbb
adc
movs
sub
jae
cwde
add
lea
outs
icebp
jmp
push
stos
add
inc
add
cwde
hlt
cmp
or
(bad)
jmp
adc
(bad)
das
fistp
ficomp
jg
jge
inc
lds
sbb
add
sub
dec
push
retf
inc
(bad)
lahf
cld
(bad)
jmp
ret
popa
adc
sar
scas
pop
push
cwde
push
clc
push
mov
aam
loope
xchg
daa
jno
stos
(bad)
rcl
das
lock
sub
adc
das
lock
lds
lock
push
lock
push
mov
adc
xchg
daa
inc
lock
out
test
dec
jae
mov
xchg
xchg
out
jne
mov
sar
inc
lds
repz
in
dec
lds
sar
inc
pop
pop
call
mov
push
xlat
mov
in
mov
push
push
sub
add
fucomi
sti
add
int3
inc
add
add
mov
adc
dec
push
repz
std
dec
jnp
ror
(bad)
fstp
mov
test
sbb
pop
xor
mov
add
idiv
pop
push
inc
fst
enter
pop
fstp
sub
call
into
aam
jmp
add
fadd
or
or
or
imul
sbb
mov
ret
add
lods
mov
shl
mov
or
ror
mov
fisttp
and
fst
push
fstp
sub
movs
lods
sub
adc
frstor
fstp
mov
push
add
lea
or
sbb
or
or
fnstcw
mov
jmp
xor
pop
add
call
push
std
fadd
or
push
mov
cmp
pop
or
mov
adc
mov
fiadd
inc
add
mov
add
jmp
movs
shr
loopne
je
stos
push
int3
out
rcl
jmp
cmps
or
mov
mov
lea
cmp
adc
je
adc
psrlw
cld
dec
cmc
sbb
hlt
add
or
mov
push
pop
int
xchg
aad
dec
sbb
add
add
ins
cld
dec
sbb
add
add
je
dec
fiadd
(bad)
(bad)
inc
fcomp
adc
add
dec
add
mov
add
fstp
test
fnstsw
call
mov
dec
loop
add
add
xor
(bad)
inc
add
inc
fsubr
or
loopne
test
(bad)
pusha
jo
add
add
push
loopne
add
push
add
or
lahf
inc
add
les
sbb
fnstsw
add
fst
fistp
add
adc
fadd
lahf
inc
add
add
dec
fwait
inc
add
int3
inc
fdiv
inc
add
jmp
int3
inc
fsub
inc
add
mov
ja
dec
dec
popa
and
sbb
fstp
je
cdq
in
sbb
ret
inc
jmp
loope
(bad)
shr
test
push
push
fdiv
dec
add
add
shr
jmp
retf
inc
fsub
call
push
inc
fmul
adc
add
(bad)
jp
in
sbb
add
fadd
lea
add
pusha
test
test
stos
in
or
cwde
cmc
or
mov
and
pop
mov
fdiv
call
or
movs
inc
add
sbb
test
push
sbb
xchg
rcl
add
push
add
fwait
int3
inc
fsubr
xchg
ret
inc
cdq
in
inc
fstp
jne
stos
in
inc
imul
imul
mov
movs
inc
int
or
loopne
loopne
rcl
out
push
push
fsub
xor
ins
dec
clc
enter
enter
add
mov
fcomp
mov
dec
(bad)
nop
push
sti
shl
bound
sbb
add
dec
lock
pop
pop
aam
mov
dec
adc
mov
fcom
aam
int3
pop
fldenv
sbb
ins
mov
or
push
mov
sbb
(bad)
mov
add
or
adc
add
fild
stos
retf
jns
sti
mov
add
test
adc
rcr
inc
cld
sub
sti
push
fild
call
(bad)
push
jl
frstor
dec
retf
jne
aas
inc
sbb
add
mov
add
call
jg
test
adc
rcr
inc
cld
imul
push
sti
(bad)
jp
xchg
push
add
sbb
sti
inc
in
out
adc
in
cmp
xchg
add
jnp
enter
adc
inc
pop
out
cmps
and
scas
(bad)
sti
(bad)
pop
mov
dec
or
xchg
(bad)
inc
std
call
fimul
mov
ret
add
add
cmps
mov
xor
std
jae
aas
pop
add
ror
push
adc
add
pop
sub
or
adc
les
push
push
or
fist
test
sahf
or
lea
jne
cdq
call
loopne
or
mov
mov
or
and
(bad)
inc
out
nop
adc
pop
loop
or
dec
adc
jl
sbb
cmp
lea
test
xchg
pop
sub
test
push
mov
add
test
fmul
test
test
xchg
(bad)
push
xchg
xchg
cmc
push
lods
jg
stos
popa
push
mov
pop
push
xchg
push
sahf
mov
add
nop
mov
adc
inc
push
hlt
jae
mov
dec
push
jl
push
pop
pop
adc
ret
or
in
jo
(bad)
push
or
add
push
ret
das
call
mov
add
jne
fadd
dec
sbb
cmp
fs
cld
je
mov
jge
(bad)
push
mov
cli
add
adc
or
mov
xchg
dec
fcomp
out
xor
fs
shl
push
dec
sar
adc
popa
cmp
dec
ja
add
and
adc
push
(bad)
fs
(bad)
dec
adc
push
inc
sbb
call
jle
dec
push
mov
cld
adc
adc
adc
aad
sti
jmp
cmp
enterw
dec
in
and
jno
xchg
push
in
inc
fst
add
loopne
test
add
retf
push
ja
mov
cmps
aaa
repz
aaa
ret
or
cli
dec
rol
push
mov
sbb
dec
dec
into
sti
call
add
shl
ds
pop
push
jns
mov
pop
xlat
cmp
jno
movs
imul
add
mov
adc
add
mov
stos
pop
adc
js
jmp
add
jne
or
je
or
loop
in
sbb
sti
(bad)
popf
ret
cld
call
test
jno
call
inc
(bad)
(bad)
(bad)
stos
int3
jg
push
or
and
lods
call
aam
and
add
add
dec
cmc
mov
rcl
sti
pop
xchg
mov
in
xchg
xor
mov
push
add
std
or
fmul
pop
push
adc
shl
das
sar
cld
add
adc
jmp
and
rol
adc
paddb
imul
jg
cdq
xchg
mov
shl
rol
xchg
sub
pavgw
push
xor
xchg
mov
pop
pusha
mov
loopne
cwde
in
pop
xlat
sti
dec
adc
mov
stos
mov
dec
xor
ret
iret
iret
(bad)
fist
xchg
fist
cmp
push
pop
inc
xchg
int
mov
in
in
push
das
push
or
in
push
sti
mov
test
out
ds
pop
adc
jno
push
(bad)
push
pop
fisubr
cld
push
push
retf
jge
test
repnz
ror
cs
or
pop
or
fdivr
mov
sti
mov
add
(bad)
(bad)
mov
stc
cld
dec
(bad)
mov
cli
jmp
(bad)
cmp
mov
inc
add
add
adc
imul
adc
mov
inc
fdiv
pop
lods
cmp
and
call
xchg
sahf
push
mov
clc
sub
and
jg
dec
sub
mov
popf
std
mov
mov
adc
call
adc
jo
loopne
xlat
cmc
add
shr
fucomp
adc
out
push
(bad)
repnz
rcl
jmp
push
push
add
ret
add
add
adc
xchg
stos
xchg
rcl
sti
jmp
stos
bound
lea
lods
cli
jmp
fadd
(bad)
sub
cld
mov
popa
(bad)
call
cs
jmp
sti
test
adc
(bad)
jmp
rcl
xchg
mov
push
test
xor
cwde
popa
(bad)
jmp
add
pusha
(bad)
(bad)
cmp
cmp
xor
(bad)
push
inc
retf
push
mov
shl
in
test
add
adc
or
lea
add
adc
not
cmp
test
mov
sti
mov
inc
(bad)
call
mov
sti
mov
sar
std
(bad)
jmp
call
sar
add
popf
dec
(bad)
call
jmp
(bad)
sti
(bad)
fstp
sub
sub
inc
rdpmc
repz
cmp
fdiv
es
push
test
aad
push
rol
lea
ror
std
jmp
adc
stos
add
psrlw
imul
jno
jle
xchg
add
out
je
sahf
outs
dec
jne
aad
imul
add
xchg
jg
lods
jno
cwde
pop
add
cmp
clc
push
sub
dec
add
aam
jmp
jg
sahf
jmp
lea
sbb
mov
pop
and
je
cwde
cmc
outs
and
stc
and
dec
jno
inc
push
inc
ss
jg
mov
daa
adc
jae
fisubr
je
aam
push
jmp
sti
jmp
lahf
inc
add
rol
sar
(bad)
mov
jg
(bad)
cwde
(bad)
std
jmp
sar
sub
jmp
sar
call
addr16
push
cld
mov
pusha
(bad)
jmp
adc
and
std
jmp
sbb
dec
xchg
sbb
stos
aam
add
fist
inc
(bad)
cmp
xor
scas
sar
inc
add
dec
je
and
sti
cmp
in
(bad)
shr
std
(bad)
cli
adc
mov
cwde
les
xchg
xchg
pop
dec
in
adc
ja
add
mov
cmp
sti
lea
std
jmp
aam
jmp
lahf
xchg
fs
call
std
jmp
cmp
jp
test
sti
dec
imul
add
ins
sti
mov
pop
(bad)
jmp
ins
sti
test
std
dec
adc
test
pop
add
(bad)
popf
pop
(bad)
jmp
jb
sbb
setno
or
or
xchg
push
add
sbb
aaa
scas
mov
add
add
pop
add
dec
push
hlt
outs
retf
add
imul
dec
sahf
mov
movups
or
lea
or
push
call
xchg
je
stos
push
movups
and
mov
xlat
sbb
std
(bad)
jmp
inc
add
imul
or
push
jne
push
ins
fwait
push
mov
push
je
push
call
fs
je
stos
push
mov
fucomp
add
push
or
jp
mov
sti
std
jmp
push
mov
call
stos
pushf
mov
sti
jmp
dec
(bad)
jmp
cdq
add
fcom
dec
(bad)
loopne
(bad)
(bad)
jmp
(bad)
jmp
inc
xchg
ror
or
and
and
inc
idiv
stos
popf
cmp
ror
call
mov
or
sti
mov
pushf
cld
mov
push
std
jmp
adc
std
(bad)
cmp
ins
sub
test
adc
std
(bad)
jmp
call
cmps
call
and
xchg
pop
inc
add
call
cwde
xchg
js
cmp
inc
push
call
pusha
mov
call
push
mov
add
data16
push
xchg
call
shl
xchg
out
je
sub
test
inc
add
sbb
mov
mov
mov
jge
dec
lea
popf
mov
stos
imul
es
test
test
xor
(bad)
cmp
je
imul
sub
push
xchg
je
call
and
sti
pop
push
shl
push
sub
cld
push
add
adc
dec
push
and
sti
call
or
out
std
jmp
push
ins
or
test
adc
mov
push
(bad)
(bad)
jmp
xor
xchg
js
mov
inc
into
fwait
mov
(bad)
loopne
cli
jmp
push
les
add
xchg
mov
add
xchg
xchg
fs
push
call
std
jmp
inc
stc
push
test
push
imul
mov
ins
sti
(bad)
mov
mov
mov
lea
call
into
aam
test
adc
jmp
xchg
mov
sub
xchg
sti
jmp
imul
sub
cmps
add
jmp
imul
xor
call
mov
adc
test
(bad)
jp
add
add
pop
lea
ins
sti
test
or
adc
mov
jge
dec
(bad)
enter
sbb
sti
call
into
or
and
add
xor
sti
call
or
ins
sti
pop
push
shl
mov
popa
(bad)
call
inc
add
jne
push
in
jne
sti
sub
jmp
and
pop
popf
adc
dec
adc
mov
inc
(bad)
jmp
ins
cmp
adc
call
dec
push
jmp
bound
add
mov
jmp
sti
xor
cmc
inc
mov
rol
add
mov
jno
cmp
ret
test
push
dec
pop
add
pop
sbb
cld
jge
popa
and
sbb
sti
lea
imul
js
push
mov
push
(bad)
jmp
push
pop
ficomp
(bad)
sub
jae
mov
inc
add
sti
std
(bad)
jmp
dec
xor
je
stos
push
test
pop
sti
setno
(bad)
dec
push
arpl
pop
jg
or
call
in
and
or
pop
outs
(bad)
dec
xchg
hlt
and
movs
jg
fldcw
push
sbb
sldt
dec
jl
(bad)
call
loope
push
iret
loop
sar
dec
pop
retf
rol
or
sub
jmp
dec
mov
add
and
or
push
mov
add
add
sti
jmp
in
add
mov
mov
call
addr16
push
push
and
test
adc
test
test
sti
dec
sbb
mov
popa
add
xchg
into
popa
or
aam
inc
inc
in
add
pop
xchg
in
pop
and
call
add
stos
push
test
adc
or
ins
push
pop
mov
jbe
jne
stos
push
cld
dec
push
sti
dec
pop
sbb
mov
sbb
mov
jo
stos
fs
jge
retf
stos
fs
add
add
pop
jno
fcomp
cld
(bad)
std
call
fs
dec
fsubr
inc
call
and
cmp
fld
mov
inc
repnz
sub
stos
arpl
pop
shr
into
je
push
or
adc
mov
mov
mov
adc
mov
fld
push
retf
scas
add
mov
add
push
fucom
xor
pop
xchg
out
jg
push
es
xor
push
add
inc
or
pushf
rcl
or
sbb
(bad)
stos
bound
jmp
mov
(bad)
sti
sub
stos
sti
(bad)
leave
fs
jmp
fwait
or
ss
xchg
push
jo
push
in
pusha
(bad)
sti
mov
jmp
jmp
sbb
mov
adc
xchg
stos
fs
test
(bad)
sti
inc
icebp
jmp
sbb
cmp
fcom
mov
push
add
test
(bad)
(bad)
jmp
call
add
and
sti
dec
hlt
std
jmp
retf
sbb
add
jno
add
stos
and
sti
(bad)
icebp
arpl
dec
arpl
push
and
in
pushf
adc
mov
std
dec
add
gs
dec
cs
(bad)
stos
fs
mov
jmp
adc
or
jg
imul
dec
int3
sbb
add
rcl
add
xchg
or
pusha
push
(bad)
call
fs
test
(bad)
sti
push
mov
sti
push
std
js
hlt
add
mov
aam
cmp
test
add
dec
cs
jp
cld
push
adc
(bad)
dec
ins
sti
sbb
(bad)
jmp
adc
add
ins
cld
jae
pop
mov
sti
xor
jb
call
add
(bad)
dec
sbb
fcomp
sbb
(bad)
nop
(bad)
std
inc
add
push
jmp
add
nop
lock
jmp
and
daa
jne
imul
aad
lds
(bad)
jmp
sti
call
std
(bad)
jp
mov
test
and
cld
push
adc
cld
dec
sahf
std
call
mov
push
js
in
jle
imul
bt
call
push
lea
or
push
outs
xor
sti
jmp
mov
mov
mov
psllw
rol
push
push
xor
mov
add
push
pop
add
jl
psllq
dec
call
inc
xchg
mov
xor
push
cli
dec
push
sti
cmpxchg
shl
call
pop
movs
xchg
je
stos
xchg
sti
dec
addr16
dec
(bad)
(bad)
out
(bad)
imul
add
addr16
(bad)
fstp
mov
stos
addr16
mov
cli
dec
hlt
std
jmp
xor
push
xor
sti
call
je
mov
push
call
jmp
push
std
jmp
jge
repnz
pop
int
pop
(bad)
sbb
mov
add
xchg
cmp
adc
cli
jmp
push
int
mov
test
xchg
sbb
fcmovu
adc
mov
(bad)
jmp
(bad)
cld
(bad)
fst
sti
js
stos
jg
or
jmp
xchg
je
stos
ins
dec
call
xor
mov
nop
cld
dec
ins
sti
outs
mov
jg
mov
sti
jmp
ins
shl
out
imul
xor
sti
(bad)
jge
fild
in
jmp
std
dec
pop
in
jmp
outs
sti
jmp
imul
outs
sti
dec
push
cmp
sti
lea
add
adc
je
push
ins
imul
mov
imul
adc
std
jmp
push
test
dec
sti
jmp
push
(bad)
call
push
js
push
call
mov
cmp
out
test
imul
movs
test
inc
add
push
add
pop
add
mov
fucom
aaa
call
cli
jmp
push
sbb
jmp
je
push
xchg
xor
push
test
es
xor
stos
ins
test
jne
or
call
stos
out
xor
cmp
cmp
arpl
ins
sti
inc
add
aam
inc
dec
ins
out
pop
mov
or
push
std
jg
mov
add
push
sti
jmp
imul
add
sbb
mov
fdivr
jmp
pushf
mov
or
adc
(bad)
in
jmp
std
jmp
shr
xchg
pusha
sti
call
sub
stos
ins
aaa
enter
lea
imul
push
cs
stos
ins
sti
jne
xchg
cmp
movs
push
(bad)
fucomp
cld
ins
mov
adc
ror
repnz
(bad)
jmp
inc
dec
push
jmp
inc
dec
jmp
inc
push
call
ret
aas
call
add
mov
push
dec
in
jmp
(bad)
call
ins
push
sub
std
jmp
jno
es
cmp
stos
ins
add
out
push
push
adc
stos
(bad)
mov
add
mov
lea
sti
(bad)
fidivr
jo
and
call
or
jmp
jb
pop
cmps
dec
cld
pop
fmulp
pop
call
inc
push
data16
mov
mov
fs
push
scas
xchg
shr
add
jl
add
sbb
push
ret
mov
icebp
rcl
inc
in
je
push
sbb
inc
mov
stos
add
stos
mov
jo
cmp
jecxz
sub
jl
in
and
inc
dec
push
add
ficom
push
jmp
adc
sar
(bad)
icebp
nop
in
sub
in
inc
or
lods
call
mov
add
push
sti
ret
mov
call
pop
sahf
push
cld
push
add
inc
stos
xchg
cmc
add
adc
pop
ret
imul
enter
jmp
push
push
push
or
fisttp
inc
or
jno
out
adc
ja
add
mov
pop
mov
dec
adc
stos
jge
dec
pop
add
xor
add
or
add
add
add
or
out
nop
jecxz
(bad)
or
adc
lahf
adc
push
add
mov
or
xchg
adc
add
mov
add
lea
mov
mov
dec
or
push
outs
add
pop
test
add
xor
call
mov
data16
aas
inc
dec
lods
xor
movs
cmp
mov
pop
xchg
xchg
test
xchg
les
je
imul
mov
mov
mov
mov
fadd
xchg
mov
add
cmp
jecxz
add
lea
xchg
movs
sar
jmp
pop
xchg
mov
xchg
faddp
or
in
mov
mov
ret
add
add
push
push
dec
push
jge
push
call
sahf
pop
adc
mov
sbb
jmp
popf
or
(bad)
jmp
adc
(bad)
adc
push
call
push
fstp
pop
sahf
push
jg
jge
or
(bad)
jne
inc
jmp
mov
fucom
je
inc
call
pop
outs
push
test
xchg
test
push
daa
add
(bad)
loop
mov
xchg
test
xchg
mov
arpl
sbb
xchg
int
adc
mov
fdivr
mov
loop
inc
int
retf
into
jns
inc
in
imul
adc
mov
fadd
mov
mov
mov
jmp
xchg
test
add
xor
push
cmp
dec
or
xor
je
addr16
hlt
test
sti
pop
push
dec
sti
push
in
dec
jg
and
pop
je
mov
inc
aam
fistp
xchg
and
xchg
aad
mov
xor
mov
inc
mov
or
fcom
add
add
jecxz
call
push
sbb
jg
mov
jmp
sbb
sti
push
mov
outs
adc
sti
jmp
mov
addr16
sti
push
mov
jmp
push
jns
mov
jbe
mov
sti
jbe
mov
sti
jbe
mov
sti
jbe
mov
sti
jbe
shr
add
shl
mov
jbe
mov
sti
jbe
mov
sti
jbe
mov
jg
or
push
jne
jp
jb
test
jb
jne
je
call
jmp
mov
jb
inc
push
je
sub
inc
add
lods
jb
in
je
jmp
(bad)
cli
stos
jb
add
stos
jb
cmc
in
je
call
jmp
std
je
cmp
je
stos
stos
jb
xor
stos
jb
movs
je
push
rol
jl
popf
pop
call
jmp
cld
inc
add
stos
sti
mov
pop
add
mov
js
stos
stos
mov
pop
pop
add
mov
sti
jmp
loope
add
call
jmp
mov
sti
mov
pop
add
add
stos
mov
or
sub
jmp
pop
call
push
cld
(bad)
fnstsw
stos
stos
sti
mov
push
add
xor
shr
mov
in
adc
jo
push
adc
add
xor
push
call
inc
popf
inc
add
adc
mov
mov
push
mov
push
inc
add
push
call
test
ret
cmps
cmps
push
mov
add
inc
xchg
xchg
bnd
popf
inc
or
adc
rcl
movs
ja
cmps
push
mov
xchg
add
and
push
call
mov
inc
adc
adc
adc
je
std
mov
push
mov
lea
add
and
push
call
xor
inc
sbb
adc
pop
add
lea
push
mov
push
inc
add
push
call
test
test
pusha
adc
mov
push
pop
push
fwait
call
xor
push
cmp
add
and
push
inc
test
push
inc
dec
push
push
mov
jg
add
rcr
adc
(bad)
out
push
lds
xor
dec
and
xchg
adc
push
jo
call
mov
push
sbb
mov
mov
xor
dec
xchg
adc
or
(bad)
push
cmp
js
adc
jno
add
fs
or
call
pop
sbb
ret
jbe
jo
push
sub
pop
call
out
pop
mov
ds
adc
(bad)
jbe
xor
mov
(bad)
mov
aaa
shl
adc
push
mov
jg
push
stos
xchg
mov
sbb
addr16
jo
mov
je
push
mov
inc
cmp
pop
or
adc
dec
inc
and
cmp
mov
sti
xor
jno
xchg
aam
push
call
stos
stos
sti
mov
mov
data16
jle
push
xchg
cld
aas
popf
inc
pusha
aam
xor
inc
cld
sub
jecxz
lea
mov
xchg
push
push
jno
sbb
push
pop
mov
xchg
inc
pop
inc
sti
adc
rcl
or
push
sbb
nop
adc
xor
jne
xchg
xchg
adc
jne
or
dec
lahf
sbb
inc
add
adc
sbb
loopne
jg
pop
sbb
add
dec
sbb
xor
adc
add
add
cmp
adc
sbb
add
loope
das
shl
adc
sbb
add
adc
add
lods
ror
sar
cld
dec
cmp
or
xor
xchg
imul
jg
jne
lods
sti
mov
addr16
push
cld
retf
stc
adc
jmp
inc
call
pop
dec
jo
push
adc
fstp
adc
in
aam
xchg
dec
push
aas
call
adc
adc
xor
sbb
add
je
stos
jno
dec
inc
sti
jne
popf
adc
push
test
call
add
out
neg
es
mul
jne
pop
mov
popa
pop
sbb
xchg
cmps
fadd
mov
sti
jne
mov
add
stos
jno
outs
pop
out
data16
je
inc
dec
lea
mov
and
jmp
and
int
add
(bad)
cmps
jo
push
and
sti
jne
add
stos
jno
stos
and
jmp
mov
adc
push
lahf
aaa
repz
sti
inc
(bad)
shr
pop
dec
in
fwait
stos
sti
leave
push
mov
push
(bad)
mov
jno
cwde
int3
out
call
stos
and
lea
sti
jne
stos
jno
call
jne
test
mov
cli
(bad)
cmp
cld
add
add
cwde
push
mov
in
dec
mov
inc
add
push
test
sub
(bad)
rcl
cld
call
sahf
cld
inc
add
inc
mov
dec
call
pop
(bad)
fsincos
xor
mov
outs
add
jmp
mov
xchg
call
inc
or
pushf
xchg
lea
test
mov
jno
mov
lds
fsub
or
test
dec
jns
jns
inc
sub
cmp
sbb
test
pop
add
push
push
clc
xchg
loope
mov
inc
push
inc
aam
test
adc
add
sub
inc
call
cmp
jle
xor
adc
(bad)
mov
adc
or
pusha
shl
sahf
test
mov
daa
push
or
dec
add
or
js
push
add
ret
je
mov
add
add
test
push
jmp
enter
sub
(bad)
loopne
sti
shl
movs
aaa
mul
push
das
shl
lea
movs
sti
pop
push
dec
jo
rcl
(bad)
lea
shl
in
sbb
in
mov
add
inc
push
jmp
in
mov
sti
adc
push
push
mov
jno
ja
sti
jne
add
sbb
mov
mov
push
push
stos
sbb
jno
add
add
icebp
xor
mov
pop
lea
jns
xor
push
jmp
mov
jmp
jg
rol
mov
push
push
fwait
rcl
int3
fistp
adc
daa
push
add
cmp
push
or
push
sbb
dec
dec
ret
jne
mov
jno
cli
das
test
popf
pop
sub
sti
je
dec
test
sti
jne
fisttp
mov
gs
inc
pop
pop
data16
xor
mov
call
jge
add
push
sbb
mov
jp
dec
add
int
in
jbe
mov
inc
adc
imul
or
js
bswap
inc
xor
and
dec
adc
sub
jg
push
inc
data16
imul
or
and
or
imul
jnp
sub
and
sbb
add
jl
int
inc
jne
push
inc
or
mov
in
leave
cli
jns
and
clc
mov
mov
cdq
push
rol
(bad)
cwde
fisttp
pop
mov
cmc
xor
pusha
test
mov
dec
(bad)
adc
aam
call
and
sub
sti
jmp
(bad)
pop
mov
cwde
or
std
call
push
enter
inc
in
add
mov
jp
inc
ds
or
aaa
iret
loopne
repz
push
or
fdiv
or
ds
add
dec
or
add
call
inc
adc
inc
call
adc
xchg
lahf
push
mov
xchg
dec
(bad)
sar
out
fld
sahf
in
xchg
call
xchg
xchg
enter
xor
lahf
mov
aad
sti
cmp
cs
sub
rol
add
aaa
inc
fldcw
inc
loopne
in
push
mov
(bad)
popf
jnp
dec
inc
call
adc
das
shl
dec
imul
aaa
mul
xlat
mov
and
sub
jno
sahf
push
or
sbb
inc
or
or
lock
loopne
jae
daa
adc
sub
mov
pop
xchg
and
push
jg
xor
sti
pop
push
int3
jecxz
adc
in
fst
add
loope
sti
jne
inc
dec
call
push
push
or
push
pop
push
daa
js
xor
stos
or
adc
dec
je
cwde
in
adc
add
mov
sbb
xchg
mov
xchg
dec
jmp
push
add
hlt
sar
call
jp
add
mov
mov
mov
xchg
(bad)
and
ret
add
push
in
das
xchg
ret
test
sti
jmp
sub
test
add
jns
push
sub
mov
jno
adc
pop
outs
sub
add
into
dec
hlt
lock
add
dec
sti
mov
jg
std
ja
mov
xor
mov
cmp
std
inc
loopne
dec
or
add
in
adc
push
call
pop
push
or
or
or
mov
mov
(bad)
and
inc
cdq
aaa
aaa
(bad)
das
adc
jne
xchg
mov
call
aam
fist
cwde
xor
dec
jns
pusha
cmp
mul
das
test
arpl
jno
sahf
push
or
cmp
push
fadd
mov
adc
dec
xor
test
adc
jne
cwde
dec
lea
dec
jmp
mov
jmp
popa
test
inc
test
fwait
sub
lea
jg
mov
movs
jno
push
pop
sldt
push
mov
mov
adc
xor
or
clc
out
xchg
neg
ja
call
pop
fdivp
jns
nop
mov
test
add
push
dec
cwde
in
adc
call
popf
jp
shr
add
jmp
or
jne
cmc
in
inc
(bad)
mov
int
call
pop
and
out
adc
add
jne
(bad)
call
sbb
add
and
push
mov
add
pusha
pop
fadd
lea
fmul
aam
mov
dec
add
inc
call
pop
nop
push
jo
mov
call
mov
pop
mov
mov
stos
push
cld
or
adc
xor
mov
jmp
jmp
sti
jne
cdq
push
xchg
push
xchg
jp
mov
call
adc
push
mov
cwde
into
mov
ds
pop
cmps
aaa
retf
mov
data16
mov
inc
adc
add
mov
push
mov
dec
push
adc
or
dec
adc
or
shl
not
or
xchg
pop
jmp
jns
cmp
sti
pop
test
and
lea
sub
call
sub
push
into
stos
dec
call
push
mov
mov
pop
pop
add
call
stc
call
jge
adc
pop
push
pop
ret
sub
enter
inc
and
outs
mov
and
out
inc
and
inc
into
neg
out
aam
popa
je
imul
pusha
and
out
les
or
out
les
adc
adc
add
xor
xlat
shl
test
hlt
imul
in
div
push
adc
int
loop
mov
push
cmp
push
or
add
add
test
daa
inc
jno
pop
push
jno
das
fild
inc
and
and
cld
mov
out
iret
mov
les
dec
out
sti
push
cmps
mov
add
dec
inc
sti
jne
in
dec
lock
mov
jno
sbb
add
pushf
dec
add
imul
jno
call
push
push
push
jne
push
push
or
push
push
and
add
xor
mov
xchg
in
add
pop
push
push
pop
push
xchg
push
xchg
lds
add
cmp
dec
sub
jg
popf
cdq
vshufps
adc
sub
call
cmps
xor
mov
lods
jo
xchg
mov
adc
jno
mov
icebp
lds
out
add
push
lods
jo
imul
or
xchg
xor
in
add
add
xchg
and
mov
and
mov
fdivr
dec
jge
sbb
and
inc
pop
imul
ins
or
mov
pop
je
in
inc
clc
into
xor
xchg
sub
fsincos
jmp
or
jge
loopne
mov
jp
inc
mov
shr
call
jmp
push
int3
xchg
jns
add
or
and
je
jmp
sbb
adc
dec
movs
in
inc
or
ins
xchg
out
inc
add
mov
and
stos
call
push
add
push
imul
mov
or
jne
xchg
jno
inc
ret
sub
xchg
sbb
push
add
in
jbe
jmp
call
sahf
fmul
into
lahf
sti
push
xchg
in
add
xchg
sti
inc
push
pop
ret
xchg
xchg
push
mov
cld
(bad)
and
lds
jne
mov
in
push
add
jne
test
es
ds
xchg
sti
xor
sti
or
pushw
dec
dec
push
push
inc
dec
test
mov
push
cmp
cld
add
xchg
pop
jo
sahf
ret
jmp
and
add
std
das
jno
jnp
xchg
(bad)
(bad)
xor
xchg
mov
ja
sti
(bad)
lea
mov
jge
adc
dec
adc
popf
xor
fidiv
xchg
xchg
ss
xchg
push
(bad)
mov
xchg
xchg
cmp
push
push
sub
mov
jle
sbb
mov
mov
mov
add
sbb
inc
jne
xchg
rcr
add
xchg
jns
jmp
add
add
adc
sbb
movs
inc
call
iret
add
push
dec
dec
call
dec
fcom
(bad)
sti
pop
xor
vorps
cmp
adc
aam
xchg
ds
and
pusha
pop
mov
xlat
inc
and
push
pop
add
and
inc
dec
jmp
cmp
push
cld
add
cmp
or
sahf
cmp
push
retf
adc
cmp
je
xchg
cmp
pop
pop
push
fadd
cmp
popf
inc
nop
push
cld
xor
push
add
add
fnstcw
pop
add
or
dec
aam
xchg
ins
add
and
ret
clc
adc
xor
jmp
mov
stos
inc
dec
push
mov
xor
jmp
cwde
rcl
out
(bad)
pop
or
push
arpl
mov
jg
jmp
adc
fdivr
add
or
das
out
jp
inc
rcl
add
daa
rol
shr
leave
out
or
test
fist
sbb
adc
mov
xchg
sti
jne
test
inc
jne
lahf
ret
push
stos
ins
or
mov
rcl
test
pop
pop
outs
les
call
(bad)
xchg
nop
lahf
call
sbb
add
imul
pusha
add
jne
jmp
stos
xchg
rcr
xlat
xchg
rcr
push
push
stos
ins
sbb
dec
jmp
adc
sub
int
call
cmp
add
push
adc
mov
sbb
div
ds
push
dec
push
push
add
mov
mov
add
stos
call
jns
lea
mov
jmp
(bad)
dec
jns
jae
xchg
xchg
mov
cmp
dec
xchg
stos
jle
jmp
fwait
jns
xchg
jne
add
fdivr
pop
or
and
cmp
adc
or
jg
push
add
(bad)
sti
inc
stos
bound
lea
adc
push
add
sbb
call
je
xchg
jns
(bad)
iret
add
push
xchg
add
xchg
xchg
pop
jo
inc
cmp
bound
(bad)
push
cmp
push
and
add
pop
xchg
shr
adc
push
jecxz
in
rcl
pop
les
(bad)
(bad)
fst
xchg
shr
mov
inc
ficom
and
out
fld
enter
push
mov
into
add
arpl
cli
enter
js
push
xchg
push
repz
jg
add
sub
in
xor
ret
pusha
xor
push
sbb
adc
stos
jmp
add
mov
in
cmps
sbb
(bad)
dec
and
mov
sub
and
adc
sbb
mov
aam
add
add
adc
add
stos
jmp
xchg
es
movs
cld
call
push
hlt
add
add
jle
xchg
push
add
inc
hlt
mov
mov
hlt
fdiv
sti
call
call
data16
shr
(bad)
bound
push
into
xchg
mov
adc
or
add
push
sti
dec
shl
adc
clc
sbb
jnp
xchg
push
add
inc
hlt
mov
xor
or
sti
(bad)
mov
adc
pushw
call
inc
call
sbb
xor
push
adc
xor
sti
aaa
inc
dec
jbe
mov
cmc
cmp
add
add
call
and
jmp
jge
adc
call
pop
test
sti
adc
je
cwde
inc
or
sub
jne
cwde
in
or
add
imul
loopne
popa
test
push
adc
shl
add
xchg
pop
shl
call
js
add
pop
add
arpl
inc
jmp
rol
sub
(bad)
jecxz
cmp
cwde
cli
(bad)
push
and
stc
(bad)
dec
add
fcomp
push
mov
dec
call
adc
mov
jecxz
push
lock
xchg
data16
or
gs
mov
adc
jbe
push
std
clc
jb
fst
add
add
inc
adc
rcl
div
sbb
add
lds
imul
and
inc
out
test
adc
inc
add
jns
pop
je
mov
(bad)
rol
sti
push
cmps
in
jg
cmp
adc
outs
add
loope
dec
popf
pop
in
xor
sti
test
gs
jne
sti
push
rcl
dec
push
gs
pusha
jmp
rcl
xchg
xchg
pop
jo
mov
jmp
push
pop
add
and
jl
jge
je
data16
rol
push
mov
add
and
das
and
(bad)
ficomp
sub
push
sub
ja
mov
add
jmp
or
call
add
out
jge
pop
jle
and
inc
xor
sti
mov
out
or
add
mov
inc
popa
xchg
mov
repz
adc
pop
add
cdq
push
mov
sbb
call
inc
outs
sub
mov
xchg
(bad)
cmp
add
xchg
pop
jo
and
pop
mov
(bad)
out
mov
push
rol
ror
inc
push
push
xchg
push
dec
push
(bad)
fadd
dec
(bad)
fcom
dec
jmp
add
inc
add
and
adc
out
push
out
push
inc
push
sub
dec
(bad)
call
xchg
jbe
xchg
sbb
jbe
xchg
hlt
jmp
adc
shl
shr
sbb
jno
fcomp
push
(bad)
pop
aam
or
xor
sbb
add
iret
lahf
cld
call
jo
mov
in
adc
xor
mov
inc
push
jmp
add
cli
(bad)
cmp
pop
or
pop
xor
into
mov
in
dec
stc
sub
adc
inc
add
and
or
dec
xchg
dec
pushw
cmp
mov
inc
sti
jo
add
dec
cld
jmp
jg
inc
das
out
jne
mov
dec
push
mov
mov
jecxz
les
ret
jmp
xchg
push
or
(bad)
pop
fimul
shl
das
ror
mov
stc
stos
pop
add
xchg
mov
inc
ror
cmp
fild
add
adc
adc
mov
xchg
inc
and
clc
jl
das
inc
adc
add
retf
and
pop
mov
fistp
sub
nop
enter
pop
adc
cmc
xchg
stc
(bad)
jmp
jne
xchg
inc
shl
push
jmp
or
inc
add
add
xchg
mov
or
xor
loop
leave
mov
sti
push
inc
mov
hlt
gs
jg
adc
xor
sbb
or
jne
loope
or
data16
jge
sti
dec
int3
adc
cwde
hlt
popa
mov
jg
pushf
pop
adc
jne
in
sbb
add
data16
pusha
adc
jne
mov
out
cli
gs
and
sti
jne
in
adc
pop
in
xchg
jecxz
jmp
in
and
or
jne
in
or
gs
sbb
sti
call
adc
sahf
(bad)
push
push
hlt
data16
sbb
xor
sti
jne
in
adc
add
pop
in
call
ret
push
in
push
pop
jecxz
mov
rol
sub
call
adc
push
mov
sti
sub
pop
pop
push
loopne
push
jne
add
sbb
adc
test
jg
or
push
push
ret
cmp
leave
retf
and
push
mov
add
cwde
call
stos
and
fstp
into
add
aaa
push
cld
fmul
mov
jno
mov
fstp
retf
cmp
fneni(8087
mov
and
inc
aam
das
shl
or
dec
cld
inc
lea
mov
stos
xchg
adc
inc
jo
inc
dec
lea
add
or
jmp
int3
stc
aam
int3
dec
aam
int3
pop
aam
int3
xchg
jmp
mov
fisttp
cmc
push
push
add
jno
add
adc
shr
xchg
push
mov
add
pop
jmp
jg
pop
add
ud2
xchg
dec
fistp
int3
leave
sbb
int3
fstp
leave
int3
push
jmp
add
out
cmp
and
inc
push
psrad
xor
inc
mov
xor
sbb
inc
or
call
add
add
div
push
jg
gs
(bad)
jb
rcr
pop
ret
pop
sbb
int3
test
sbb
int3
push
jmp
jge
inc
add
es
int
popf
add
add
push
add
mov
popf
inc
push
dec
cld
xor
out
das
lds
inc
lock
test
rol
pop
push
add
lds
add
mov
jg
popa
xchg
mov
or
push
add
inc
add
out
dec
pop
aaa
mov
xor
add
lods
adc
sti
(bad)
cmp
dec
lock
or
int
add
inc
push
mov
mov
das
shr
push
nop
ret
mov
inc
mov
sti
call
loopne
mov
dec
pop
pop
xchg
fndisi(8087
pop
push
inc
xchg
into
mov
xchg
fmul
add
sbb
add
mov
mov
add
outs
or
outs
or
add
sbb
data16
xor
pop
jnp
int
or
inc
bound
sub
data16
jo
test
add
adc
jne
fdivr
push
repnz
ret
add
call
jge
loopne
or
xor
add
pop
das
cli
jmp
xchg
fxch
cmp
test
sub
je
test
call
in
jg
inc
xlat
inc
or
inc
lock
fs
add
daa
ret
hlt
xor
xlat
jns
xchg
popf
lock
inc
or
ror
sub
das
shl
mov
in
stos
push
push
in
mov
add
pop
xchg
push
enter
data16
mov
jg
test
ins
clc
mov
mov
int3
leave
pop
leave
int3
fstp
leave
int3
cmp
dec
and
test
sbb
(bad)
shl
sbb
(bad)
rcl
(bad)
adc
add
mov
mov
add
repz
add
into
xchg
rcl
mov
pop
lahf
pusha
mov
cld
pop
sahf
cmp
fst
popf
dec
jmp
add
shl
in
cli
xchg
(bad)
cld
mov
pop
cmp
popf
adc
(bad)
rol
call
pop
adc
jne
add
add
inc
mov
popa
in
aad
cld
jmp
sti
call
xchg
loopne
call
xlat
sti
push
cmps
mov
push
push
cmc
mov
cld
sbb
xchg
cld
call
adc
add
ins
scas
inc
int
adc
aad
sqrtps
cld
dec
fdiv
js
push
cld
add
sub
in
rol
mov
add
mov
add
scas
pusha
out
adc
(bad)
lea
ret
add
pushf
scas
inc
pop
inc
lahf
push
add
mov
and
das
mov
adc
jns
inc
add
cmp
xor
jo
rcl
add
push
push
stos
ret
dec
call
add
ins
out
adc
cmp
fs
popf
fs
push
test
je
xchg
cld
mov
in
push
pop
push
call
cmp
xor
(bad)
rcr
jo
fmul
mov
imul
add
or
(bad)
std
je
cdq
dec
adc
add
cmp
sub
movs
fwait
xchg
jmp
cmc
cli
shl
test
repnz
add
(bad)
jo
or
mov
add
loopne
sti
shl
jecxz
(bad)
out
xchg
mov
or
add
and
sti
jne
mov
clc
dec
pop
pop
pop
adc
xchg
or
mov
std
int
dec
xchg
cmc
add
jg
push
inc
adc
imul
popf
xchg
jmp
mov
pop
call
ret
pusha
push
push
adc
std
adc
xor
dec
adc
pop
pop
sahf
into
sti
push
push
jmp
in
mov
xchg
or
add
lock
fmul
leave
dec
cld
call
dec
test
adc
dec
in
push
(bad)
nop
in
dec
mov
retf
(bad)
lock
push
push
test
arpl
add
xchg
rcl
or
add
or
adc
mov
push
jno
fs
fdiv
dec
call
mov
ret
sbb
add
xchg
jo
adc
das
call
mov
and
mov
pop
dec
arpl
dec
int
call
push
adc
jmp
in
hlt
jmp
add
or
adc
ret
inc
in
add
(bad)
jmp
mov
xchg
imul
(bad)
jo
ss
jo
data16
sbb
mov
cmp
in
std
js
jmp
push
xchg
xchg
in
add
adc
jmp
cmovb
fist
add
ret
inc
pop
push
add
popf
jmp
mov
add
lds
push
lea
ret
add
popf
xor
add
xor
xlat
jo
jbe
jo
push
and
pop
pop
add
pop
popf
cmp
jmp
add
les
add
pop
call
jmp
cmc
inc
add
push
add
addr16
cmp
mov
(bad)
and
std
(bad)
fst
xchg
fiadd
dec
sbb
add
(bad)
es
repz
imul
push
in
std
dec
inc
jge
xor
add
push
cwde
dec
clc
dec
adc
dec
fs
add
adc
add
dec
push
add
jge
mov
add
and
les
add
inc
jo
pushf
lock
dec
cld
jmp
clc
stos
ins
push
call
push
dec
jg
call
add
adc
add
call
hlt
sub
and
ret
add
call
in
jmp
call
jno
sub
inc
xor
xchg
mov
call
pop
enter
sub
push
or
xor
jl
cmc
mov
jmp
mov
jne
popf
inc
int3
call
jmp
jmp
and
xor
movs
adc
jmp
add
fstp
add
mov
mov
mov
push
call
push
adc
jne
adc
jmp
mov
inc
add
jno
(bad)
sub
mov
fsubr
nop
sbb
dec
shl
push
cwde
push
sub
popf
icebp
std
inc
mov
in
push
cmc
in
inc
add
mov
fdivr
cld
cmp
ins
sti
call
adc
mov
jecxz
dec
call
sbb
dec
pop
sti
or
loopne
jecxz
std
push
lea
xchg
push
add
add
mov
mov
pop
out
sti
and
dec
dec
adc
push
add
(bad)
add
add
cli
pop
cld
shr
mov
jg
popf
cwde
dec
std
lea
sti
push
xchg
cld
call
xchg
scas
add
adc
jg
stos
cmp
xor
xchg
ror
in
xchg
ins
adc
call
jg
popf
pop
je
add
stos
and
inc
pop
jmp
jmp
daa
adc
ss
fsubr
call
test
xor
sbb
xchg
(bad)
dec
push
jmp
and
aaa
(bad)
and
dec
push
stos
and
ret
dec
adc
and
(bad)
and
or
push
inc
pop
add
frstor
cmp
mov
(bad)
loopne
add
or
inc
xchg
cmc
ret
arpl
lea
std
jmp
clc
cmp
pop
pop
add
add
(bad)
push
je
push
bound
cmp
mov
sbb
jne
rol
pop
mov
mov
dec
push
add
add
in
enter
inc
dec
mov
repz
or
sbb
shr
cmp
sbb
add
push
push
hlt
mov
mov
adc
cld
dec
sub
add
(bad)
or
push
push
call
jns
adc
jbe
add
push
in
add
xchg
hlt
add
dec
adc
das
inc
adc
dec
add
ret
inc
add
rol
unpckhps
add
dec
std
call
out
call
mov
or
lahf
popa
ret
push
push
test
ss
repz
sbb
sti
push
cdq
inc
call
jbe
add
push
ror
and
sti
call
call
hlt
add
adc
jge
mov
push
(bad)
nop
jmp
(bad)
push
call
ror
add
jg
sti
dec
cmp
call
jmp
mov
or
lahf
sbb
(bad)
jle
ss
mov
adc
sbb
jmp
es
in
stos
jmp
popf
fs
mov
jmp
mov
jmp
dec
jmp
sbb
push
sti
ss
add
add
ror
sti
setno
inc
dec
mov
push
into
jmp
add
mov
or
test
inc
call
xchg
push
call
mov
scas
daa
(bad)
or
cmp
jne
adc
int
ror
sti
movups
jmp
add
scas
jnp
push
adc
mov
adc
pop
rcr
push
fcom
xlat
sbb
dec
or
xchg
(bad)
fdivr
(bad)
in
mov
sbb
std
adc
dec
cmp
inc
mov
jg
fadd
jl
inc
adc
push
pop
mov
add
cwde
les
loopne
or
mov
add
movs
icebp
xchg
test
dec
fnstenv
enter
inc
lea
je
stos
push
loopne
cmp
inc
pop
cmp
and
push
jmp
in
sti
jg
jmp
or
xor
jg
cli
push
xor
add
inc
movs
mov
in
and
cwde
les
adc
inc
add
add
ins
jmp
fisttp
sti
mov
inc
xchg
mov
inc
popf
(bad)
loop
dec
mov
mov
jle
leave
fidivr
adc
push
inc
add
add
sub
mov
pop
adc
or
rcl
sbb
arpl
adc
and
xchg
jb
call
mov
adc
or
das
rcl
sbb
(bad)
and
xor
mov
xor
jg
jmp
test
jmp
adc
gs
add
loopne
sti
jne
mov
or
(bad)
dec
aam
mov
ret
inc
test
scas
adc
lea
xchg
push
(bad)
je
xchg
or
xor
(bad)
das
test
adc
pusha
mov
sub
fdiv
add
sahf
mov
shr
xchg
mov
inc
sbb
xchg
sbb
add
stos
adc
dec
sbb
add
mov
push
mov
stos
fs
and
sti
jne
jmp
or
(bad)
jmp
adc
push
es
push
xor
push
or
adc
cld
dec
or
inc
pop
jae
sub
push
xor
inc
push
add
in
dec
inc
add
xchg
rcl
mov
jge
sbb
jno
mov
jle
inc
xor
sbb
cmp
clc
pop
push
inc
ins
pop
mov
repz
hlt
inc
fisttp
and
add
fcomp
fiadd
or
add
and
jo
xor
lock
lods
xor
repnz
call
pop
nop
in
lea
inc
dec
call
into
add
jmp
or
nop
iret
jo
jae
lock
sbb
sub
cld
or
fnstsw
sub
into
mov
mov
push
inc
mov
xor
add
addr16
shl
dec
out
pop
movs
shl
jge
push
inc
jle
add
mov
rcl
pop
mov
out
or
mov
data16
rcl
push
xchg
mov
fwait
les
bound
adc
hlt
pop
and
jg
ins
dec
inc
inc
pop
jecxz
adc
call
and
mov
mov
pop
ret
jge
jne
loop
or
pop
add
and
sti
dec
int3
or
cmp
xchg
push
fs
and
rcr
pop
mov
or
adc
je
sub
cmp
call
bound
ror
call
push
popa
cld
addr16
pop
add
push
cmp
dec
sbb
lods
pop
ret
push
jg
add
pop
add
fst
add
loope
xchg
rol
test
jg
inc
mov
and
push
mov
push
mov
cld
dec
mov
push
and
mov
add
push
mov
(bad)
dec
and
or
inc
sbb
adc
add
les
dec
and
jns
dec
add
xchg
shr
sti
je
cwde
js
ftst
jo
(bad)
and
push
mov
ror
push
push
and
or
sub
add
add
inc
sbb
add
push
scas
or
loopne
mov
ds
dec
jg
jne
pop
pop
push
sub
add
(bad)
ds
dec
jge
and
fadd
data16
jl
xchg
or
xor
mov
ret
mov
push
cld
jmp
inc
add
and
add
adc
dec
push
add
xlat
add
jp
ror
fstp
mov
inc
push
mov
inc
data16
add
jnp
cmp
pop
sti
(bad)
fdivp
jmp
mov
adc
enter
add
push
adc
jl
rdtsc
fdivr
dec
cld
jno
loopne
je
retf
test
movs
jg
jmp
xchg
add
add
inc
pop
dec
jmp
clc
sti
jmp
add
inc
sar
cmp
mov
inc
int
add
xchg
push
(bad)
mov
adc
ror
inc
in
and
sti
(bad)
lea
cld
call
xor
jmp
loopne
ror
add
pop
pop
test
cmp
cmp
je
cmps
push
and
int
cmc
mov
add
or
xor
sbb
cmp
add
sub
stos
mov
or
fst
add
int3
pop
sbb
jmp
in
cs
lea
dec
test
mov
sar
out
push
(bad)
int
in
or
sbb
dec
sti
jne
fdivp
jno
enter
fdiv
ret
pusha
sub
popa
pop
(bad)
sti
(bad)
sbb
fisub
stos
mov
add
adc
add
pop
dec
push
stos
popa
add
cld
sub
jmp
test
xchg
xchg
rcl
jl
sub
aaa
dec
arpl
dec
loope
xchg
xchg
cmc
or
add
pop
xor
mov
jp
(bad)
push
loopne
dec
adc
cmp
cmp
stc
push
popa
aas
cmp
cmp
dec
adc
dec
cli
add
push
in
add
cmp
or
icebp
xchg
xchg
es
into
push
je
push
pop
adc
inc
test
add
data16
sbb
inc
popf
adc
add
into
inc
push
ret
cmp
sbb
dec
jmp
inc
dec
mov
(bad)
xor
jp
sbb
rcl
rcr
xchg
or
nop
dec
xchg
arpl
pop
adc
pop
pop
jge
lea
xchg
or
dec
cli
add
adc
add
dec
adc
retf
xor
xor
or
xlat
(bad)
jg
mov
pop
std
mov
or
push
jge
mov
bndldx
popa
call
fnstcw
dec
adc
inc
lock
enter
cmp
jne
push
cmp
inc
ret
(bad)
jno
mov
push
or
dec
mov
std
mov
retf
jmp
shl
sti
adc
nop
shl
mov
xor
xchg
mov
inc
adc
hlt
aam
or
adc
push
rcl
and
mov
add
sti
or
jb
add
leave
data16
jp
add
test
cld
dec
test
mov
mov
or
andnps
(bad)
cmp
adc
push
in
aas
mov
fld
mov
inc
(bad)
iret
daa
inc
loope
jns
sbb
inc
lock
add
add
sbb
mov
js
push
in
or
push
or
movs
adc
adc
outs
lock
js
mov
push
jl
ins
cli
inc
add
inc
in
into
cmp
retf
test
pop
jne
test
call
rcl
sub
lea
out
dec
pop
enter
fsubr
popf
mov
add
jecxz
add
add
leave
inc
xlat
inc
xchg
aad
or
and
xchg
xchg
cmp
push
cmp
sub
stos
add
fstp
sbb
adc
int
inc
in
ins
lock
jg
jne
push
cld
addr16
cld
jmp
add
loope
test
mov
jne
add
retf
adc
sahf
ins
jmp
int3
xchg
or
mov
dec
call
test
cli
pavgb
inc
lock
xchg
std
dec
inc
lock
inc
das
leave
xlat
or
push
enter
or
(bad)
push
out
jo
xchg
ins
lock
or
xchg
add
add
inc
pop
and
scas
pop
hlt
push
push
in
add
push
in
cmp
pop
add
movs
push
jg
(bad)
sub
pushw
loopne
je
push
test
dec
push
cmp
adc
or
icebp
pop
add
out
in
or
rcr
jg
inc
inc
or
cmp
add
ins
or
xchg
pop
add
mov
daa
pop
mov
data16
push
xchg
xor
xor
fst
and
cld
test
xchg
mov
mov
call
shl
inc
push
mov
xchg
jns
xchg
bound
mov
loopne
dec
xchg
xor
imul
test
lock
push
jae
out
data16
jne
push
jg
adc
adc
sti
jne
into
mov
les
cs
daa
sub
adc
inc
xchg
jno
cmp
and
sti
inc
xchg
pop
inc
or
xor
data16
add
int
test
push
push
daa
pop
mov
pop
lock
adc
ja
(bad)
and
in
cmp
sti
(bad)
lea
cld
call
or
fadd
dec
xchg
hlt
ins
dec
mov
(bad)
jmp
(bad)
jmp
leave
fimul
push
cmc
jle
or
add
int
outs
stos
fdivr
(bad)
mov
stos
fadd
add
adc
add
sti
jmp
scas
fidiv
(bad)
jmp
enter
mul
lods
sti
xlat
sti
mov
int3
mov
aam
add
push
push
inc
add
les
lds
fdiv
mov
sbb
mov
add
cld
add
and
jg
sbb
mov
jg
inc
or
aam
jno
movs
xor
stos
mov
sti
call
push
add
adc
mov
cld
sbb
int
push
mov
lock
jae
xor
fsub
jmp
add
jne
shl
test
jmp
pop
loopne
add
ret
sti
or
rol
add
outs
jmp
cld
sti
(bad)
nop
aam
jmp
shl
or
add
fcom
sti
ret
jmp
add
inc
mov
inc
or
adc
push
cmp
sti
pop
xchg
inc
add
int3
sbb
dec
fstp
ret
inc
add
lds
adc
int
or
lea
test
fnstcw
add
pop
add
cld
push
add
mov
in
push
push
add
inc
xchg
mov
fdivr
lahf
(bad)
xchg
into
cli
sbb
mov
sti
add
and
cld
add
add
hlt
jle
or
sbb
push
dec
data16
mov
dec
push
(bad)
call
jmp
adc
push
sbb
pop
data16
sub
aam
(bad)
int
add
int
sub
and
xor
ret
push
rcl
test
daa
xlat
cmp
dec
push
jl
das
or
add
dec
push
cld
jb
lahf
mov
icebp
mov
push
cld
mov
loop
or
add
adc
cmp
sbb
xor
mov
int3
rcl
je
aas
(bad)
je
pop
jo
aam
rcpps
in
or
jg
jmp
inc
data16
adc
jmp
mov
push
cld
or
jge
call
jg
mov
cmp
xchg
inc
cdq
call
clc
stos
push
call
fidiv
cld
out
fs
call
adc
enter
push
push
loop
(bad)
imul
inc
add
push
xchg
mov
sbb
movs
sbb
jmp
sbb
add
shl
inc
adc
jno
inc
pop
push
call
add
push
adc
cld
or
pop
add
add
dec
adc
adc
dec
jle
push
movs
jbe
jmp
sar
add
out
push
xor
sub
pop
loopne
pop
pop
add
add
sub
pusha
and
cmc
push
mov
cli
inc
test
sub
and
add
add
sti
inc
inc
add
inc
jmp
stos
jmp
aam
loopne
enter
gs
out
iret
jecxz
adc
mov
or
add
add
popa
adc
mov
pushf
jns
(bad)
push
call
pop
push
pushf
sti
push
(bad)
in
inc
inc
popf
les
push
popf
or
fdiv
add
stos
add
push
adc
daa
push
push
out
sahf
sti
dec
call
pop
call
add
add
mov
jmp
dec
jnp
call
aam
jns
and
aam
stos
push
or
push
and
test
adc
xchg
cmc
jmp
dec
adc
or
aaa
lock
xchg
xchg
add
test
jno
into
addr16
xor
data16
add
popf
pop
cld
sahf
addr16
and
push
(bad)
rcr
push
call
adc
add
imul
jg
imul
cld
je
cdq
pop
or
call
cld
cmc
rcl
std
jae
inc
sti
adc
push
(bad)
cmp
setns
out
fsubr
add
std
mov
in
push
ret
into
ins
fadd
jo
ret
adc
jmp
add
jmp
push
in
jne
(bad)
jns
call
jmp
clc
or
cmp
push
pop
fs
fadd
mov
adc
add
fsubr
adc
mov
movs
adc
cmp
adc
int
cld
adc
jg
test
jg
dec
cdq
inc
loopne
int3
mov
in
sar
sub
loope
xchg
add
adc
add
inc
in
clc
jmp
jno
mov
rcl
(bad)
call
add
add
xchg
sti
call
cdq
sti
inc
xchg
add
add
gs
jmp
inc
lds
adc
lds
clc
mov
push
push
xor
jmp
stos
call
and
jno
outs
shl
jmp
adc
call
les
in
fs
push
add
add
adc
push
add
jmp
adc
jg
mov
mov
push
xchg
mov
hlt
add
dec
gs
mov
nop
jecxz
mov
add
xchg
xchg
push
and
enter
mov
in
jmp
popf
mov
cld
call
xchg
test
mov
adc
add
movs
pop
jmp
clc
cli
push
add
dec
add
add
sbb
in
jg
inc
cli
aas
push
dec
adc
inc
push
xor
xchg
push
xchg
sti
jne
stc
xor
or
in
jno
movs
xlat
adc
or
movs
cdq
add
adc
add
sbb
nop
iret
adc
call
sti
inc
push
adc
cmps
sbb
jp
or
xor
loope
call
test
or
pusha
(bad)
adc
xor
mov
xor
sti
je
movs
xlat
psrlw
call
adc
enter
jmp
xor
xchg
cmp
add
or
test
xchg
popa
fmul
test
ja
jmp
sbb
push
xchg
sahf
loop
js
pop
je
pop
dec
xor
mov
pop
cmp
in
jmp
sbb
pop
pop
pop
push
test
add
xor
call
mov
lea
les
shl
mov
inc
dec
call
sahf
jecxz
adc
cld
dec
jmp
sti
jmp
ins
std
push
pop
xchg
cmp
mov
dec
call
pop
jecxz
and
test
and
(bad)
out
(bad)
dec
push
add
pop
adc
dec
mov
mov
stos
mov
in
call
loope
cmp
adc
push
cld
mov
cmp
add
cld
mov
sbb
(bad)
jmp
mov
mov
(bad)
loope
sti
adc
mov
adc
add
out
lea
add
add
(bad)
(bad)
xor
call
in
out
mov
and
dec
sbb
push
cld
push
and
cld
call
sbb
dec
(bad)
lock
push
mov
xchg
shl
or
inc
jge
inc
dec
mov
(bad)
call
mov
add
retf
add
add
sti
test
add
jmp
call
add
jno
cmp
jb
psrad
das
leave
xor
inc
push
xchg
add
cmp
call
jmp
adc
jp
cmp
stos
in
cmps
mov
sbb
movups
lea
sti
add
movs
sbb
sub
cld
jae
jle
pop
jge
add
xor
aaa
test
lea
add
in
sti
dec
jecxz
inc
or
jecxz
jg
add
fst
xchg
push
pop
sti
test
in
sti
inc
or
add
test
in
into
adc
xor
add
cmp
or
adc
mov
daa
loope
stos
mov
sti
test
adc
mov
das
loope
sub
dec
adc
lea
pop
adc
push
(bad)
pushf
and
jmp
call
loop
sub
xchg
or
cmp
add
xchg
jl
in
loop
test
sti
jmp
cmp
adc
loop
add
push
sti
test
in
sti
call
inc
jmp
push
loope
stos
xchg
mov
(bad)
mov
mov
loope
stos
inc
aam
lea
sti
push
mov
sti
push
add
(bad)
or
xor
in
cwde
iret
dec
cld
test
adc
mov
adc
cmp
adc
nop
and
jmp
jecxz
cmp
add
sbb
sti
push
(bad)
dec
call
xchg
push
or
movs
pop
or
and
call
add
loope
mov
sti
xor
loope
stos
adc
lea
sti
(bad)
call
in
dec
cmp
push
loope
sbb
sti
add
push
inc
mov
cli
daa
data16
stos
pop
push
xchg
sbb
push
jg
imul
cmp
cdq
or
add
sbb
in
(bad)
mov
mov
loope
push
aam
int
sub
sahf
or
or
xor
in
adc
int
and
add
sub
cmp
push
sbb
pop
pop
sbb
mov
dec
loope
jmp
cmp
add
or
hlt
push
std
dec
xchg
js
sbb
in
sti
dec
jmp
sub
loope
stos
jle
mov
cmc
call
data16
push
mov
pushf
pushf
inc
in
jmp
and
or
test
sahf
sar
mov
in
sti
inc
add
bound
call
mov
mov
push
cwde
xchg
in
jmp
jmp
cmc
jmp
aad
clc
int
mov
std
or
add
iret
aaa
(bad)
xchg
xchg
add
push
push
cmp
mov
add
xor
jbe
sti
push
mov
stos
and
inc
mov
je
adc
cmp
push
adc
push
loope
or
jg
fwait
add
loope
jmp
cmp
or
mul
data16
add
push
sti
mov
icebp
sti
(bad)
cmp
sti
adc
push
shl
push
xchg
sub
call
dec
sahf
cmp
test
dec
cld
mov
push
loope
mov
add
je
mov
lea
push
inc
xor
jmp
out
mov
call
cmc
(bad)
jmp
mov
icebp
sti
inc
dec
out
xchg
mov
xchg
mov
pusha
or
cmp
das
shl
in
scas
out
(bad)
fisttp
add
(bad)
mov
push
jg
int
(bad)
inc
icebp
sti
push
add
pop
clc
xor
dec
in
fs
sti
leave
into
jns
push
inc
fdivr
sub
cli
jne
clc
jns
jmp
(bad)
jmp
add
adc
add
jmp
mov
inc
add
xor
push
das
jmp
mov
bound
add
adc
add
inc
push
push
adc
push
ds
jg
shl
mov
or
loopne
push
cld
mov
repnz
ins
adc
loope
addr16
(bad)
cmp
jge
xchg
push
xchg
and
add
jmp
cmp
sti
dec
xlat
or
add
add
sar
or
jo
inc
ret
inc
test
sti
add
inc
xor
dec
or
jmp
xchg
push
inc
add
cwde
inc
or
jmp
jne
cli
mov
in
ret
add
sti
jmp
add
outs
leave
aaa
ret
test
cld
inc
add
jmp
(bad)
pop
sbb
dec
dec
push
jle
in
cmp
sti
adc
out
xchg
fdivr
lea
loopne
out
shl
push
xchg
sbb
mov
cmp
je
std
stc
pop
cmc
mov
push
mov
push
add
gs
sbb
(bad)
mov
sti
pop
or
push
cld
test
pop
call
call
mov
pop
in
or
or
jmp
mov
cld
pop
call
aam
or
add
nop
in
cli
(bad)
cli
jmp
or
hlt
in
(bad)
in
sti
ret
call
inc
add
iret
xchg
rcl
jne
popf
dec
lock
sbb
inc
lds
les
int
or
sbb
in
cld
jae
xchg
dec
clc
push
jb
std
(bad)
rol
push
in
jno
mov
sti
(bad)
cmp
push
pop
push
nop
cld
push
(bad)
sub
push
push
out
push
cmp
xlat
add
popa
adc
ja
xor
cli
cmp
mov
push
push
cmc
mov
mov
pop
(bad)
fadd
mov
sub
div
adc
shl
leave
punpckldq
mov
fdivr
inc
adc
dec
jne
push
mov
data16
call
push
loopne
or
add
dec
call
mov
pop
inc
popf
mov
leave
mov
push
imul
cmp
cmovne
inc
icebp
pop
add
or
sub
add
pop
shl
add
push
shl
xlat
ror
add
pop
lds
cmp
jmp
ds
xlat
jl
push
mov
adc
xor
dec
out
mov
push
pushf
xor
push
and
cmp
outs
pop
mov
add
push
call
cwde
dec
mov
dec
push
add
scas
lea
movs
shl
pop
mov
add
cs
call
adc
ror
add
dec
fcmovnb
ret
inc
popf
cld
jmp
push
xor
mov
dec
push
mov
add
imul
leave
pop
mov
push
es
inc
xchg
mov
(bad)
fist
mov
push
rol
xor
mov
push
rol
inc
in
pop
test
sbb
je
(bad)
rol
or
mov
call
or
add
push
ds
adc
outs
push
xchg
rol
add
add
shl
add
ror
ror
dec
push
mov
xchg
inc
add
dec
adc
add
ret
fwait
mov
or
idiv
or
aaa
or
inc
and
add
sub
xor
jmp
mov
dec
loop
or
inc
or
cmp
xor
fld
rol
shr
fild
sub
sub
lahf
or
jmp
aad
and
add
pop
loopne
call
push
push
outs
pop
push
in
adc
test
cmps
add
sbb
dec
fstp
test
loope
mov
xchg
inc
or
jnp
je
sahf
inc
or
loope
add
rep
push
push
fadd
or
mov
in
or
pop
idiv
add
je
dec
adc
add
pop
cmp
and
or
pusha
and
adc
or
or
cmp
inc
adc
sbb
add
mov
add
icebp
push
cmp
loopne
mov
xchg
sbb
jbe
mov
popf
add
xchg
cmp
mov
push
xor
add
les
or
xlat
add
pusha
jmp
cld
add
add
cmp
aad
mov
je
into
mov
adc
sbb
ror
mov
add
mov
pop
loope
sbb
push
inc
in
mov
xchg
(bad)
dec
pop
add
add
jne
sti
mov
sbb
pop
mov
leave
pop
mov
sbb
jecxz
pop
add
push
(bad)
add
xor
adc
lea
push
push
(bad)
sbb
jne
xor
dec
mov
and
inc
inc
add
fdivrp
std
test
sti
mov
add
sbb
or
add
movs
add
add
push
mov
mov
add
xchg
add
mov
and
je
fsubr
add
adc
int
sbb
jp
push
add
aas
or
call
jmp
not
add
xor
push
lods
push
dec
add
mov
icebp
adc
and
add
dec
sbb
or
adc
ret
add
sbb
lock
pop
add
dec
fnstcw
(bad)
(bad)
(bad)
(bad)
pop
retf
pop
dec
lahf
cld
push
inc
imul
and
std
jne
sub
call
push
push
adc
ret
sub
add
jns
out
push
fld
push
add
fmul
pop
cdq
outs
cld
cmc
pop
je
adc
or
jecxz
push
pop
add
xor
jmp
movs
adc
fisttp
add
add
cmc
mov
and
aaa
jne
or
xchg
cdq
add
pop
or
add
pop
call
push
add
int
add
outs
push
outs
push
fcom
add
frstor
add
loope
cmp
xor
pop
fadd
dec
fcmovnu
nop
dec
retf
inc
popf
and
dec
les
mov
dec
adc
cmp
add
add
ss
out
(bad)
fld
fdiv
not
adc
add
or
fcom
pusha
adc
push
aam
mov
dec
adc
in
and
add
mov
xlat
add
xchg
xor
sbb
std
jmp
cmc
push
or
add
or
ficom
xor
inc
add
es
out
add
fucom
mov
aas
clts
xchg
inc
add
sub
mov
and
cdq
add
dec
pushf
inc
clc
call
adc
mov
sti
jmp
mov
sar
jmp
fsub
mov
pushf
shr
pmulhuw
mov
and
adc
adc
call
add
cmp
push
pop
outs
add
and
ins
jns
push
lock
jnp
cdq
adc
lock
mov
add
push
cmp
loopne
into
out
nop
cmp
pop
ss
je
mov
cld
inc
outs
cld
mov
add
and
test
outs
or
jecxz
add
push
adc
pop
sahf
xor
xor
cmc
pop
sbb
pop
movs
dec
mov
add
sti
jae
lods
sbb
jg
cmp
add
dec
jecxz
xlat
sub
(bad)
(bad)
lock
dec
les
test
movs
jmp
ss
gs
(bad)
xor
push
jo
add
mov
jmp
add
push
sbb
add
retf
ror
das
sbb
int
pop
lds
fld
je
rol
xor
push
outs
pop
push
aam
mov
cmp
in
inc
aam
mov
and
jne
xchg
ds
es
mov
add
sub
call
fwait
outs
loopne
(bad)
imul
mov
(bad)
inc
dec
add
dec
xchg
mov
pop
xchg
cmp
(bad)
jmp
leave
push
cwde
inc
add
push
mov
stos
adc
jmp
cli
jecxz
pop
adc
jmp
sbb
pop
stos
sub
fst
icebp
add
pop
ror
in
dec
fld
rcl
adc
jne
sub
adc
lds
cmp
pop
mov
shr
pop
int3
pop
or
in
jne
mov
out
sub
call
inc
pop
pop
into
cmp
pop
stos
sub
(bad)
cmp
add
mov
adc
add
ds
leave
push
ret
(bad)
sub
mov
ret
add
add
add
mov
imul
addr16
cwde
out
test
jb
vmovups
lds
xchg
sar
aad
xchg
cld
mov
(bad)
leave
test
shr
sbb
lea
or
rcr
call
sbb
rcl
cld
call
push
adc
push
sbb
jo
add
adc
add
sub
outs
clc
(bad)
inc
jne
out
or
(bad)
pop
inc
adc
inc
dec
cmp
pop
push
cmc
cmps
std
call
dec
adc
cld
call
and
cmp
add
cs
jecxz
int3
pop
add
push
add
inc
int
xor
add
mov
or
cld
push
es
push
test
mov
cmp
clc
add
repz
xor
hlt
cld
jmp
nop
ds
or
repz
push
mov
push
(bad)
cmp
(bad)
aam
fst
cmp
clc
push
sub
add
cmp
or
xchg
ds
mov
add
cld
push
xchg
cmp
ror
jl
out
dec
or
push
ror
add
ins
sub
movs
ret
add
lods
add
push
mov
pop
repz
push
and
repz
jne
lods
add
cmps
pop
jmp
lea
bound
aad
adc
mov
push
outs
add
push
lods
(bad)
jmp
push
mov
push
(bad)
sub
out
or
mov
shl
jle
dec
dec
hlt
ret
sti
jmp
lods
hlt
inc
sbb
cld
paddusw
je
mov
add
cmp
cmc
les
(bad)
xor
push
call
not
or
outs
add
add
fld
add
mov
or
mov
ret
cmc
outs
push
mov
mov
jg
adc
xlat
inc
inc
(bad)
dec
push
or
and
hlt
es
call
(bad)
(bad)
fmul
ret
jl
pop
and
xor
jmp
xor
pop
or
xchg
jmp
mov
add
add
mov
adc
cld
fisub
cld
xchg
push
mov
adc
fld
mov
mov
jno
jge
cmp
push
rol
and
int
or
mov
aam
pop
fldcw
or
ret
(bad)
and
mov
add
rol
sbb
or
cmp
inc
or
sbb
fild
int
fcomp
or
fwait
mov
cmc
sar
retf
inc
fld
neg
mov
out
test
(bad)
pop
xor
push
test
(bad)
pop
movs
outs
ret
add
int
out
popf
cld
call
xor
add
shr
fs
shl
int3
test
sti
jge
in
cmps
adc
add
cmps
or
xor
xor
pop
out
inc
dec
jle
call
and
add
sti
mov
std
call
lods
add
add
jne
outs
(bad)
jp
xor
pop
jle
push
push
pop
dec
push
push
int3
pop
push
push
cmps
add
jge
push
mov
jecxz
inc
and
sbb
push
cmp
cmps
or
popf
(bad)
and
add
pop
adc
dec
jmp
jmp
or
inc
loop
inc
or
dec
outs
adc
add
adc
and
dec
call
adc
int3
mov
or
loopne
aad
xor
out
jle
xor
xchg
sbb
es
mov
push
pop
pop
push
push
imul
and
into
stos
jp
fcom
fisttp
sub
cld
dec
icebp
sti
out
(bad)
cld
inc
add
adc
add
mov
(bad)
cmp
rcr
rol
jl
sar
xlat
call
push
stos
and
cmp
dec
sti
or
adc
push
add
dec
cmp
mov
jge
out
adc
mov
push
sub
jae
mov
call
add
add
mul
pushf
inc
or
adc
add
add
push
sbb
xor
or
les
leave
inc
push
call
call
js
mov
mov
movs
pop
jmp
add
jne
or
stos
popf
add
hlt
or
dec
sub
push
cmp
ret
cld
inc
add
pop
call
mov
xchg
inc
loopne
push
ds
stos
or
push
add
lea
fadd
mov
cld
dec
or
mov
jecxz
cmp
mov
(bad)
int3
add
in
push
(bad)
jmp
xor
and
(bad)
sub
cmp
add
jmp
int
or
push
ret
rcl
pop
add
or
or
adc
mov
dec
aaa
sbb
xchg
or
or
aaa
in
inc
int
fild
call
inc
or
shl
aas
cli
xor
into
(bad)
jnp
sar
push
add
ror
cld
push
out
sub
add
push
mov
jnp
adc
outs
adc
or
add
push
popf
add
sahf
adc
add
pushf
add
stos
pop
cld
jg
in
jecxz
mov
cmps
push
push
push
lds
fstp
add
jl
jmp
or
pop
mov
cld
inc
add
shr
cmp
add
add
jl
adc
or
call
loop
repz
cmp
mov
push
push
sbb
bound
or
push
sbb
les
daa
adc
push
(bad)
jmp
pop
cmps
mov
neg
stos
ret
and
push
or
push
push
inc
add
les
push
jle
call
dec
push
(bad)
or
adc
cld
call
repz
imul
or
cld
jmp
retf
shl
add
or
test
cld
call
shl
cmp
cld
(bad)
fdivr
push
push
jge
adc
mov
pop
or
jmp
ret
and
xor
sti
jle
mov
cld
mov
sti
cmp
and
add
jle
add
jns
push
aam
jmp
mov
call
stos
cld
jmp
push
push
jne
pop
(bad)
jp
mov
jmp
sbb
add
add
add
jne
or
mov
std
(bad)
cmp
cmc
inc
pop
shr
into
mov
add
cld
dec
push
mov
mov
add
dec
cli
mov
push
dec
fnstsw
cld
inc
add
adc
push
dec
jbe
push
xchg
pop
push
mov
add
or
fs
inc
add
adc
jge
adc
or
in
mov
les
xor
lea
add
fmul
jmp
jbe
jmp
mov
jmp
rol
call
fmulp
sub
jns
mov
sbb
cli
or
aad
cmps
push
ret
add
xchg
or
test
adc
mov
pop
xor
mov
ret
mov
loopne
push
push
lea
push
add
call
std
push
cmp
jne
std
stos
or
test
jbe
std
stos
or
test
jbe
std
cmp
test
add
jbe
std
or
adc
or
test
test
call
adc
adc
sbb
ror
sbb
sub
adc
cld
add
test
std
pop
cmp
jmp
mov
stos
push
call
add
push
(bad)
adc
cmp
add
jne
outs
push
push
cmp
rcr
or
lods
sbb
add
ficomp
jg
imul
adc
xor
add
push
ins
fucomi
pusha
sbb
add
cwde
or
jb
cld
jmp
cmp
sbb
stos
sbb
std
add
cmp
add
xchg
mov
test
sbb
in
std
push
jg
call
xor
jle
test
cld
mov
push
idiv
call
mov
xchg
loop
or
jmp
fbstp
mov
pop
add
mov
add
pop
jecxz
mov
shr
jg
fwait
sbb
push
sar
sbb
or
repz
lds
dec
sbb
inc
std
push
add
xchg
retf
std
stos
sbb
call
ret
std
call
sldt
jmp
sub
test
inc
adc
xor
xor
xchg
mov
adc
adc
pavgb
add
pop
out
scas
lock
in
sti
call
pop
(bad)
call
mov
std
call
dec
jnp
fst
add
mov
jecxz
les
xchg
into
outs
sub
das
dec
jp
jl
and
(bad)
std
stos
sbb
mov
adc
cld
call
sbb
jmp
out
(bad)
std
sub
push
retf
add
les
std
jmp
add
idiv
stos
adc
add
add
sahf
xor
mov
cmp
jmp
pop
jecxz
cmp
jle
fisubr
or
adc
lea
push
mov
fst
test
cld
push
push
or
cmp
xchg
add
fwait
add
popf
xchg
repnz
and
cli
xor
arpl
out
outs
(bad)
jbe
add
(bad)
lock
or
add
add
mov
add
int
ins
jne
push
or
xchg
mov
std
mov
out
add
call
jmp
sub
jmp
adc
mov
das
cs
cwde
jae
mov
cdq
(bad)
lock
sbb
mov
std
inc
add
adc
xor
jne
dec
push
and
in
(bad)
std
sub
out
push
adc
cmp
add
je
test
push
adc
cmp
add
and
test
add
lds
test
sar
inc
add
adc
dec
add
fisubr
jmp
test
daa
pushf
out
stos
adc
je
popf
lea
lock
std
jmp
adc
add
popf
les
adc
test
adc
mov
sahf
mov
call
out
idiv
hlt
pop
(bad)
inc
add
lock
add
or
adc
adc
add
sbb
jnp
sbb
adc
pop
dec
adc
add
add
inc
in
idiv
pushf
adc
add
adc
lea
xchg
mov
add
mov
std
add
stos
adc
add
add
sub
cld
bswap
push
cli
call
test
call
adc
jmp
mov
adc
or
adc
add
add
or
adc
not
std
jmp
add
push
or
add
int
(bad)
call
je
jb
xor
cld
jmp
cwde
mov
std
call
mov
push
ins
cld
mov
cld
std
jmp
sbb
lods
push
sbb
test
outs
add
les
add
popf
enter
add
or
sbb
and
inc
push
add
aad
je
jbe
pop
test
pusha
pop
test
add
dec
rol
pusha
loopne
jmp
or
int
mov
je
sbb
add
in
std
call
adc
(bad)
cmp
jmp
dec
rol
add
add
add
dec
popf
aas
cld
lds
test
adc
call
add
cwde
pushf
hlt
std
stos
jmp
movs
and
sbb
adc
jmp
je
pop
add
xchg
arpl
call
sbb
std
push
je
adc
mov
enter
add
add
adc
add
mov
std
stos
call
add
cld
fmul
inc
pop
lahf
test
sub
not
shr
call
dec
jmp
and
pop
(bad)
loopne
add
sub
jnp
jo
mov
xchg
outs
pop
mov
idiv
mov
imul
jnp
mov
add
adc
std
call
jmp
or
xchg
aaa
push
iret
add
dec
hlt
std
call
call
sbb
stos
call
idiv
jge
or
(bad)
xchg
fdivr
or
pop
mov
or
jmp
(bad)
cli
adc
sbb
adc
idiv
(bad)
test
test
test
cwde
in
(bad)
cmp
rol
adc
add
int
test
dec
add
adc
adc
pop
jne
rol
add
cs
cwde
in
idiv
xchg
test
test
test
add
pop
outs
inc
mov
clc
std
dec
xchg
mov
push
in
dec
(bad)
jmp
pop
movs
xchg
lods
std
stos
jmp
or
xchg
in
call
call
xchg
call
add
adc
stos
xchg
aas
clc
push
xchg
mov
call
mov
test
div
call
call
jmp
stos
jmp
mov
xor
xor
dec
not
(bad)
lods
lock
jmp
sbb
mov
add
or
dec
cmp
push
fld
mov
pusha
(bad)
cmp
rcl
cmp
arpl
push
mov
dec
jmp
cli
jmp
dec
pop
and
jne
sbb
lock
stos
in
add
lea
cmp
cmp
add
loopne
std
dec
call
add
xor
mov
jmp
(bad)
stos
jmp
call
or
add
mov
xor
add
jmp
and
adc
int
pop
test
movs
std
push
add
xchg
gs
push
xor
stos
aam
shr
adc
jmp
idiv
mov
adc
test
idiv
(bad)
add
sbb
je
aam
fdivr
or
out
rcr
cld
jmp
sbb
inc
jmp
push
cld
neg
push
je
(bad)
clc
cli
xor
cdq
mov
neg
sbb
in
shr
out
fcomp
add
xchg
mov
test
push
loope
jmp
nop
add
xchg
ror
push
nop
mov
add
or
idiv
pushf
adc
add
jmp
pop
sbb
test
loop
test
(bad)
inc
mov
and
test
jmp
nop
lock
inc
add
jmp
test
dec
js
test
test
neg
inc
stos
scas
jmp
loope
mov
jl
jmp
clc
mov
mov
(bad)
jp
push
dec
xchg
mov
std
call
test
movs
in
cmp
je
add
rcl
je
(bad)
fld
dec
ret
std
(bad)
jmp
(bad)
dec
daa
inc
jmp
push
pop
xor
test
and
and
dec
(bad)
sub
mov
test
test
test
pop
pop
add
test
loopne
and
add
and
loopne
stos
call
idiv
lea
test
add
stos
scas
inc
je
scas
add
pop
push
je
adc
std
sub
sub
je
mov
imul
test
add
mov
(bad)
cmp
out
add
int3
std
jmp
out
sub
add
repnz
test
test
jmp
fdivr
push
dec
push
in
push
cmc
push
jnp
test
call
std
dec
call
std
jmp
call
idiv
gs
and
std
or
add
dec
push
dec
push
call
imul
inc
repnz
sahf
mov
std
jmp
jmp
test
sub
mov
jmp
cmp
pop
mov
out
pushf
test
not
fimul
dec
jmp
push
icebp
idiv
push
mov
sub
adc
and
lock
inc
add
in
lea
call
sub
std
jmp
sbb
loopne
sbb
enter
jmp
std
jmp
jmp
jecxz
or
call
(bad)
lock
stos
jecxz
je
cmp
jge
test
test
imul
mov
int3
or
add
pop
mov
jmp
je
push
lods
std
push
call
xor
std
jmp
int3
std
call
repnz
jmp
pop
mov
mov
loop
mul
std
sbb
je
fisub
jae
mov
dec
push
cmp
add
add
add
add
hlt
call
dec
stos
std
(bad)
cmp
test
test
test
in
push
idiv
xchg
(bad)
cmp
fnstcw
add
or
add
or
add
cmp
into
or
add
add
add
in
mov
xor
ds
add
shr
pop
mov
into
lock
clc
(bad)
xor
or
icebp
pop
mov
icebp
inc
or
jecxz
xchg
sahf
out
inc
jno
jne
pop
lock
clc
(bad)
and
or
clc
pop
rcl
lea
inc
add
add
push
and
add
and
adc
mov
push
push
cmp
add
cwde
les
cdq
imul
cmps
inc
sbb
repz
jns
jne
xchg
sar
cli
je
daa
idiv
jnp
je
add
(bad)
stos
in
mov
xor
or
fnstcw
jle
data16
xchg
or
push
mov
add
je
jne
je
or
in
pop
mov
pop
ds
dec
add
ins
hlt
jnp
pushf
pop
ds
fsub
jmp
pusha
not
hlt
jnp
lea
mov
adc
(bad)
je
je
adc
push
jne
pop
inc
or
je
cs
pop
mov
rcr
mov
cld
mov
mov
add
pop
adc
or
je
jb
mov
jb
or
cld
je
pop
inc
clc
pop
jo
std
(bad)
inc
jmp
xchg
inc
lock
shl
jmp
pop
push
shl
dec
lock
xchg
stc
add
sub
dec
lea
xor
sub
add
call
push
xchg
ds
lods
or
adc
rcl
add
adc
mov
xor
pop
sbb
adc
or
xchg
call
xchg
popa
jo
mov
call
(bad)
(bad)
(bad)
dec
cs
cld
and
add
pusha
jo
add
enter
idiv
push
sar
fiadd
xchg
pop
inc
div
pop
inc
lock
jo
stos
add
xchg
push
adc
(bad)
cmp
jecxz
out
push
mov
aas
add
mov
jmp
idiv
jmp
int3
jmp
aam
int3
xchg
dec
and
xchg
push
and
add
push
sahf
or
or
cmc
mov
loope
enter
fsubr
fs
cli
xlat
inc
dec
and
(bad)
cmc
sti
rol
aam
add
push
mov
call
or
or
ror
int3
fstp
in
push
push
push
xor
ja
ror
add
sbb
add
jmp
popa
add
or
call
not
mov
dec
push
(bad)
stos
call
add
fst
fisubr
inc
or
mov
add
add
add
mov
or
les
fiadd
adc
add
push
lock
or
add
(bad)
fnsave
add
cmp
je
(bad)
push
lock
mov
mov
add
mov
add
and
or
push
inc
or
add
or
jmp
pop
adc
shl
pop
inc
or
pop
pop
std
mov
mov
call
xchg
adc
add
dec
cld
(bad)
shr
add
push
call
add
inc
clc
push
inc
push
lea
push
push
cmp
lea
das
idiv
into
xchg
and
sbb
jmp
pop
mov
call
sub
or
int3
xchg
jge
or
loop
popa
sub
into
cmp
push
in
cmp
inc
fst
jne
push
push
or
je
adc
not
div
mov
pop
pop
or
cmp
push
in
sbb
add
rcr
cld
ds
xor
xchg
inc
div
pop
jge
fcomp
idiv
mov
leave
dec
push
mov
dec
lea
loopne
call
movs
adc
dec
push
cmc
push
les
mov
stc
jp
or
adc
sbb
in
lods
popa
std
push
dec
jecxz
pop
call
pop
call
add
pusha
jo
ss
test
inc
in
mov
not
mov
pop
call
mov
pusha
jo
and
mov
sahf
push
call
adc
cmp
push
in
cmp
mov
xor
pop
inc
cld
mov
jne
inc
div
pop
jge
mov
xor
inc
add
(bad)
dec
push
mov
leave
push
lea
loope
call
push
push
in
lea
loope
push
gs
les
arpl
in
add
clc
jp
pushf
adc
or
in
cmp
dec
jecxz
push
call
pop
call
xor
add
xor
add
not
add
popa
rol
jo
pop
ror
mov
adc
idiv
inc
xlat
cmp
dec
in
mov
and
inc
or
xchg
arpl
jne
out
es
call
push
(bad)
dec
push
jne
sbb
jp
les
xchg
jmp
cmp
add
retf
jno
push
adc
into
dec
push
jle
dec
mov
inc
je
or
pop
out
out
aas
sub
or
push
xchg
(bad)
das
fcom
add
dec
pop
cmp
inc
dec
imul
pop
xchg
iret
cmp
out
jmp
ds
sbb
aaa
xor
xchg
pop
xor
add
cmp
add
push
add
ror
add
out
sub
inc
push
add
or
push
daa
sub
cmp
pop
fimul
push
in
push
mov
push
mov
ror
and
adc
add
mov
add
es
mov
jp
add
add
(bad)
sti
mov
mov
xor
and
add
cli
(bad)
push
adc
sar
mov
cmp
push
mov
into
popa
mov
retf
ror
jmp
xchg
rol
adc
pop
mov
dec
ret
and
loopne
int3
ret
or
add
fimul
adc
add
add
dec
push
(bad)
jne
dec
or
dec
jecxz
jmp
retf
retf
xchg
mov
mov
mov
mov
or
ficom
xchg
or
cmp
dec
in
cmp
add
mov
adc
push
pop
adc
adc
push
dec
adc
push
pop
adc
push
jne
idiv
add
push
pop
(bad)
loopne
push
push
push
cmp
jne
dec
cld
movs
add
movs
call
push
imul
dec
and
mov
pop
jae
aam
push
add
nop
nop
push
push
push
call
into
fsub
fisttp
push
push
lea
call
adc
or
mov
push
add
add
push
call
movs
xlat
int3
int3
cdq
in
int3
add
push
xor
clc
adc
popf
xor
push
and
jmp
and
and
adc
and
push
pop
and
xchg
jge
push
lahf
push
and
jmp
in
and
in
and
push
shl
(bad)
pop
and
(bad)
push
and
add
cs
icebp
(bad)
mov
icebp
cmps
jecxz
ret
mov
fild
sbb
mov
inc
xchg
adc
inc
or
shr
jl
add
and
out
icebp
inc
jecxz
fs
or
push
and
bound
xor
outs
or
and
inc
mov
jno
add
dec
add
ror
mov
shr
push
cld
bndstx
sbb
fisub
xchg
jnp
dec
mov
(bad)
pusha
sbb
(bad)
nop
jnp
sbb
enter
jmp
stc
and
sbb
lods
dec
xchg
ret
xchg
(bad)
sub
lea
sub
out
xchg
pop
add
mov
push
mov
inc
adc
or
push
out
(bad)
mov
mov
xor
ins
or
mov
div
dec
call
inc
or
jmp
aas
push
pop
or
push
sbb
(bad)
(bad)
adc
adc
(bad)
data16
gs
mov
add
idiv
call
sbb
sbb
push
pop
ret
xchg
mov
mov
in
sbb
or
xchg
add
mov
or
mov
in
or
test
add
pop
push
pop
dec
push
and
out
mov
test
cmp
mov
add
(bad)
out
sbb
sbb
(bad)
pop
sbb
jg
das
jmp
shl
dec
scas
add
sbb
jmp
or
pop
add
int
xchg
loope
mov
popf
shl
cmp
jmp
add
pop
add
inc
and
stos
lahf
add
push
leave
ret
in
add
jmp
int
pop
mov
add
out
test
sub
push
push
xlat
jecxz
push
rcl
and
shr
xchg
clc
jmp
into
cmc
js
push
test
popa
(bad)
mov
div
jmp
add
sbb
jmp
add
adc
adc
mov
shr
xchg
pop
add
add
mov
xor
cmp
call
(bad)
int
add
fst
hlt
jmp
cs
push
cmp
bound
jmp
sbb
jne
mov
sbb
push
fcom
and
idiv
cmp
call
test
not
repnz
shl
dec
cdq
add
aam
lock
sahf
push
hlt
sahf
call
dec
cmp
push
add
movs
or
jmp
jb
inc
or
out
jne
xchg
idiv
ficom
dec
push
mov
jne
jne
in
push
mov
clc
stos
sbb
dec
mov
cmp
add
in
push
push
bound
push
mov
(bad)
(bad)
cmp
jnp
sub
call
adc
jnp
jmp
push
call
adc
mov
sbb
inc
add
aad
or
mov
pop
and
sar
fwait
add
add
jge
inc
add
pop
shl
inc
popf
adc
pop
or
mov
in
(bad)
fwait
pop
or
cdq
jne
push
(bad)
sar
fwait
adc
lods
mov
jnp
dec
rcr
push
fcomp
mov
scas
jns
sbb
add
sar
pushf
out
inc
sbb
out
add
or
out
add
je
mov
add
unpcklps
out
add
adc
dec
pop
add
push
push
lea
adc
scas
add
mov
pop
xor
sar
nop
ret
mov
jecxz
or
sbb
and
xchg
neg
add
adc
div
rol
add
inc
add
add
in
xchg
push
or
in
(bad)
xor
jecxz
push
jmp
push
ret
add
push
push
adc
add
adc
jmp
xchg
mov
push
add
push
call
xor
jmp
add
popf
adc
data16
or
and
add
lea
mov
adc
cmp
adc
push
sub
jne
cdq
inc
or
pop
mov
fsubrp
sbb
xchg
shl
movs
shr
add
mov
or
sub
adc
jne
mov
jnp
add
jmp
add
dec
in
push
cdq
int3
add
adc
and
jmp
jmp
add
dec
cld
push
add
sbb
push
std
dec
jle
add
call
mov
in
cmp
push
dec
popf
fst
push
cwde
not
lods
jnp
cmp
add
push
cld
push
out
loop
xor
and
inc
jg
add
out
(bad)
(bad)
in
fs
(bad)
clc
jmp
adc
jmp
add
add
or
jmp
cmp
sub
rol
push
jne
mov
jnp
adc
add
rol
test
lea
lea
add
or
out
xchg
mov
les
call
xor
je
or
inc
mov
nop
xchg
inc
sbb
bound
cld
out
int3
push
call
xchg
xlat
mov
add
pop
add
add
data16
inc
(bad)
in
mov
push
lods
adc
mov
or
xchg
gs
lea
add
xor
inc
or
mov
or
pop
mov
inc
or
xchg
ror
arpl
lea
jmp
inc
jmp
ja
lea
add
sub
sbb
or
xlat
jne
jl
cld
sub
add
inc
hlt
pop
aaa
jo
ficom
dec
or
xlat
leave
ret
es
add
div
mov
movs
cmps
sbb
stos
mov
push
push
or
stos
sbb
je
(bad)
xor
and
call
add
sub
push
xchg
jg
push
pop
push
add
rol
dec
aam
cmp
je
lea
mov
jo
(bad)
jmp
cmp
mov
or
imul
shl
ja
pop
in
push
push
retf
mov
lods
add
adc
inc
in
std
sbb
call
add
push
pop
in
adc
adc
inc
enter
pop
mov
sbb
or
aad
add
adc
jp
jne
jecxz
fstp
and
mov
inc
(bad)
add
sbb
add
dec
adc
and
call
jne
cwde
repz
push
mov
or
add
stos
xor
shr
js
enter
les
adc
adc
add
mov
call
lds
fdiv
jne
ds
cmp
pop
add
pop
lds
mov
add
pop
mov
jmp
in
shl
pop
adc
mov
pop
mov
push
out
rcl
bts
jmp
adc
fcom
add
or
cwde
jmp
por
add
xor
sbb
add
adc
push
and
xor
repz
jp
jne
jnp
mov
dec
sbb
shl
adc
and
cmp
gs
popf
ficom
dec
in
scas
dec
mov
adc
cld
mov
jecxz
jmp
idiv
stos
mov
add
xchg
loopne
popa
rol
int
or
and
outs
es
test
sbb
add
sbb
xchg
dec
cld
stos
fiadd
mul
stos
std
imul
push
mov
inc
int
shl
test
adc
pop
cld
sbb
or
jo
inc
inc
cld
cmps
scas
add
shl
sub
add
inc
hlt
fidivr
jo
pop
rcl
imul
sbb
sub
rcl
pusha
enter
in
or
mov
pop
jne
int
or
lahf
std
inc
add
fmul
int3
pop
aam
int3
test
aam
int3
add
push
add
or
enter
jne
push
dec
or
or
push
mov
ds
add
jmp
xchg
shl
retf
add
pop
or
jecxz
push
cli
in
retf
push
ja
outs
add
xor
mov
add
xor
loopne
push
mov
(bad)
jmp
rcl
leave
into
aas
not
fnstsw
imul
dec
or
adc
in
data16
std
mov
mov
dec
iret
adc
jg
adc
add
jecxz
rcr
cmp
add
and
sub
outs
fdivr
pop
adc
clc
add
fsubr
rol
pop
daa
ror
push
mov
add
or
lea
xchg
jge
shr
loopne
retf
cli
mov
aas
rcr
sar
add
or
add
adc
jns
add
pop
xchg
ret
xchg
jl
jge
pop
xor
xchg
mov
iret
test
stos
xchg
lea
popf
pop
add
ret
mov
shl
add
jl
mov
jne
push
jnp
pop
dec
jmp
mov
stos
pop
and
adc
and
fs
add
(bad)
lea
xor
in
jne
xor
and
pop
jmp
mov
je
xchg
gs
int
dec
test
jns
jb
xchg
test
adc
add
aaa
adc
add
pop
mov
jnp
stos
test
and
add
mov
jl
sub
in
sub
jae
push
mov
mov
sbb
cmp
or
loopne
fwait
mov
add
pop
(bad)
sbb
add
add
inc
xchg
ficomp
(bad)
movs
mov
pop
add
add
xchg
movs
jns
sti
jp
jge
jnp
mov
adc
ret
rol
ins
adc
add
not
cmp
or
jmp
or
ja
dec
in
cmp
sar
cmp
push
(bad)
hlt
mov
cmp
lock
scas
test
ds
or
out
cmp
add
(bad)
sbb
cmp
cmp
add
add
xchg
jmp
out
and
rcl
adc
add
xchg
ficomp
sahf
rol
clc
nop
cmp
sub
inc
hlt
adc
inc
adc
cmp
out
retf
cmp
aas
ds
test
mov
add
add
fidiv
shr
jecxz
test
(bad)
jl
std
adc
dec
(bad)
clc
add
(bad)
data16
cdq
push
jmp
sar
xchg
ficomp
fst
cmp
jp
sub
adc
shl
cmp
xor
das
mov
cli
adc
add
add
loop
adc
push
sbb
test
push
ror
popa
add
add
aas
mov
(bad)
dec
xchg
push
dec
fisttp
and
cmps
push
hlt
inc
sahf
retf
sti
jl
pop
sti
pop
mov
js
shr
inc
add
xor
pop
add
adc
loop
add
adc
add
add
push
or
mov
inc
test
pop
push
cld
mov
sbb
pop
popf
lods
cmp
mov
lock
mov
fild
hlt
aam
xor
fdivrp
nop
mov
mov
dec
retf
mov
push
lea
add
out
into
out
jl
xchg
mov
jecxz
mov
jmp
xor
xor
adc
cmp
retf
cmp
push
sbb
ror
xchg
dec
loopne
adc
add
cdq
cmp
sar
xchg
ficomp
pop
adc
idiv
sub
adc
inc
adc
jmp
cld
sub
out
test
in
pushf
loopne
and
dec
lods
cmp
sar
inc
hlt
mov
aaa
jne
mov
jge
into
cmp
sbb
shl
cmp
(bad)
cmp
add
cmp
fadd
add
jmp
out
pop
retf
cmp
lea
sub
(bad)
rcl
inc
orps
xor
sti
xlat
(bad)
fstp
shl
ficomp
or
out
jp
mov
sbb
add
adc
das
ret
jae
cld
ins
sbb
add
not
pop
(bad)
loopne
imul
push
in
out
mov
out
fsubr
jl
ins
das
jge
push
in
sti
shl
pop
or
adc
hlt
jl
cs
fcomp
add
in
out
jbe
xor
cdq
mov
xor
arpl
adc
shl
test
pop
fbstp
int
popa
pop
test
or
sar
adc
mov
add
data16
cmp
adc
add
xchg
stc
inc
lock
or
push
in
add
mov
div
in
or
dec
not
int3
jnp
add
jns
inc
or
sub
add
das
dec
in
(bad)
lock
mov
or
scas
add
mov
jg
push
sub
fdivr
jecxz
push
rol
push
adc
fld
cmp
jne
int
clc
add
xchg
add
int
ror
add
adc
add
xchg
gs
dec
xor
leave
inc
(bad)
out
dec
pushf
sub
cdq
push
mov
add
(bad)
clc
add
pop
adc
out
mov
xchg
ret
sub
dec
pop
xor
arpl
mov
test
sbb
lea
or
add
mov
rcl
mov
jl
mov
jne
push
jnp
ficomp
jmp
sub
and
and
adc
and
dec
sub
xor
add
pop
add
inc
jle
lea
xor
mov
mov
push
je
or
push
popf
leave
je
add
gs
dec
test
lahf
adc
push
scas
in
jb
xchg
test
sbb
add
mov
jns
test
mov
imul
(bad)
loopne
loop
inc
hlt
sbb
add
jl
jge
ret
xor
sbb
je
push
mov
mov
add
or
jg
add
test
xor
test
out
mov
add
pop
(bad)
add
int3
or
push
loopne
hlt
xchg
ficomp
pop
fldenv
add
sbb
popa
jnp
in
pop
jnp
mov
adc
stos
sahf
ret
fiadd
ins
sbb
add
add
pop
or
popf
loopne
cmps
or
ror
jnp
dec
cld
(bad)
jmp
mov
popf
jne
mov
inc
xchg
xchg
jge
mov
xor
push
shl
popf
dec
call
or
fwait
je
sub
test
add
(bad)
jge
(bad)
movs
dec
rol
add
adc
pop
push
fadd
clc
adc
(bad)
call
pop
inc
adc
push
dec
and
out
(bad)
cmp
das
popf
pop
test
pop
pop
test
add
dec
fdivp
shr
retf
xchg
loopne
nop
cwde
jl
ins
sbb
int
clc
add
jcxz
push
fistp
dec
sbb
mov
sar
xchg
ficomp
pop
adc
into
sub
adc
shl
ret
cmp
out
popf
dec
test
lahf
xor
das
adc
mov
add
sbb
pop
nop
fidiv
pop
test
data16
cmp
adc
scas
sar
mov
add
or
enter
and
es
hlt
inc
push
imul
pop
or
data16
rcr
inc
add
pop
add
mov
and
xchg
sbb
cmp
sbb
sbb
or
jae
inc
mov
sbb
ret
sbb
pop
popf
lods
lahf
sub
sbb
retf
or
jne
inc
cmps
xor
fdivrp
adc
jnp
aad
mov
jmp
mov
push
lea
dec
and
push
sar
mov
jecxz
push
repz
loopne
pop
jnp
push
pushf
retf
std
stc
xor
add
dec
jmp
cmp
retf
sahf
or
pop
and
add
ja
stos
mov
dec
loopne
pop
add
scas
or
rcl
ficomp
fst
cmp
jnp
sub
pop
jnp
lds
jnp
push
ret
rol
mov
dec
cld
test
or
dec
popf
loopne
movs
or
(bad)
sar
jecxz
mov
jne
(bad)
jb
inc
push
xchg
jge
pop
lahf
jne
imul
shl
fwait
dec
call
or
sahf
je
in
jnp
add
add
xchg
jmp
out
pop
retf
pushf
or
push
add
or
adc
add
push
cli
xlat
es
cmp
rcl
sar
xchg
ficomp
popf
adc
jnp
lods
push
jnp
mov
adc
ret
rol
ins
adc
add
cld
test
jmp
sbb
add
movs
pop
lock
ret
out
pop
sbb
jge
sahf
jl
mov
pop
cld
shl
jmp
lea
add
pop
call
shr
sbb
xor
loopne
adc
push
jne
dec
push
jle
test
fidiv
dec
inc
bound
xor
or
iret
push
add
scas
cwde
dec
in
add
mov
jno
add
add
(bad)
sbb
add
(bad)
stc
inc
pusha
sbb
push
in
dec
add
dec
ja
xor
je
xchg
pop
or
inc
dec
push
leave
pop
xchg
not
jl
in
sub
inc
vmovlps
lds
mov
sbb
xor
push
mov
test
inc
add
cmp
dec
mov
popa
cdq
pop
test
dec
movs
mov
xor
mov
dec
xchg
cmp
je
mov
sub
cmp
dec
push
mov
mov
add
mov
adc
shr
dec
push
adc
mov
cdq
cli
cmp
test
cmp
in
inc
add
cmps
jbe
xor
push
pop
xchg
(bad)
mov
ficom
mov
push
cli
pop
pop
jbe
mov
mov
popf
adc
add
loop
mov
push
js
je
pop
dec
je
(bad)
daa
add
adc
add
pop
xchg
add
out
jnp
fst
bound
test
mov
nop
jmp
and
mov
mov
test
jne
clc
add
or
sub
jno
mov
cmovnp
jle
popf
pop
bndstx
bndldx
std
jmp
movs
jmp
mov
jnp
xchg
sbb
push
cmp
cwde
mov
or
call
push
adc
test
rol
test
idiv
cmps
push
lods
jmp
xchg
mul
jg
(bad)
jge
je
add
shl
ret
xchg
adc
jmp
imul
(bad)
add
mov
(bad)
inc
call
cmps
adc
test
ins
idiv
mov
lods
outs
test
dec
xchg
jne
add
mov
(bad)
pop
and
je
jo
cmp
jmp
or
inc
mov
xlat
mov
xchg
imul
push
cmp
(bad)
jecxz
add
mov
mov
or
and
call
jmp
dec
lods
mov
popa
or
in
or
push
push
dec
sub
and
and
jo
push
and
pop
jmp
push
dec
cwde
jmp
mov
idiv
aaa
mov
test
cmp
push
repz
sub
stos
add
dec
jecxz
(bad)
iret
sub
xchg
stc
or
xor
push
sbb
jge
pop
je
sbb
rol
nop
dec
lods
and
dec
dec
and
cmps
add
nop
mov
sbb
lds
cmp
icebp
jo
into
push
fisubr
mov
push
mov
sub
add
adc
sti
dec
cmp
pop
test
push
push
mov
cmp
jmp
or
sub
lea
dec
adc
dec
jmp
xor
js
jecxz
mov
adc
or
or
or
add
add
fwait
mov
(bad)
cmp
dec
popa
addr16
mov
xchg
aaa
add
jb
inc
mov
cdq
inc
loopne
ins
or
inc
sbb
cmp
jmp
inc
mov
push
mov
sbb
jne
lods
inc
sbb
dec
adc
pop
sbb
cmp
dec
cdq
add
add
mov
xor
mov
pushf
mov
dec
push
enter
mov
xchg
jmp
jne
movs
mov
cmp
cmp
test
mov
int
adc
sar
jnp
add
cmp
test
dec
sbb
rol
push
sar
sbb
push
imul
lea
sahf
sub
les
mov
and
(bad)
dec
(bad)
mov
sub
ficomp
retf
add
sub
lea
sbb
rol
scas
mov
dec
in
xor
add
mov
adc
data16
mov
add
cmp
aaa
add
adc
rcl
push
lahf
adc
xor
add
mul
loop
adc
cmp
lahf
sub
jae
inc
into
hlt
jge
add
xor
xor
idiv
add
stos
loop
pop
in
add
mov
jne
and
xchg
fadd
mov
xlat
jmp
mov
mov
test
adc
add
cwde
mov
cmp
mov
xchg
in
(bad)
loope
les
xchg
pop
inc
mov
dec
sub
mov
adc
add
lea
add
jb
mov
jae
int
mov
adc
add
in
mov
aam
sti
je
in
test
push
movs
add
fstp
jg
dec
aas
call
mov
dec
cmc
xchg
jge
or
push
rol
jmp
shr
popf
cmp
idiv
and
inc
push
aam
lock
and
add
add
add
or
jne
add
fsub
(bad)
ja
xor
mov
data16
jge
(bad)
xlat
out
fmul
lock
pop
inc
aam
in
(bad)
nop
sub
fsub
(bad)
ret
xchg
and
pop
jb
shl
add
jne
je
scas
je
jmp
pop
adc
mov
fcom
mov
les
add
add
push
out
int
xor
jnp
(bad)
ins
jne
push
jmp
add
imul
pop
repnz
fdivrp
gs
(bad)
inc
out
popa
call
add
dec
shr
dec
imul
imul
repnz
pop
mov
rcr
pop
cmp
xchg
rcl
add
xchg
add
push
push
int3
jmp
icebp
add
push
nop
repz
push
dec
fmul
pop
sbb
repz
jbe
sub
repz
movups
jnp
add
lds
dec
and
nop
pop
cmp
xchg
les
inc
int3
into
in
add
mov
sbb
jne
(bad)
cmp
rol
xchg
add
pop
add
sub
(bad)
call
push
add
lea
cli
(bad)
fst
jecxz
xchg
dec
xchg
add
push
add
xchg
cmps
mov
cmps
icebp
mov
push
add
icebp
mov
repz
aas
or
dec
xchg
mov
adc
dec
cld
jmp
cli
stos
push
sub
lea
inc
pop
mov
inc
dec
add
inc
dec
(bad)
inc
pop
sub
inc
dec
xor
inc
dec
mov
inc
sbb
pop
es
or
add
aaa
inc
vunpckhps
lds
sbb
adc
jne
pop
jmp
movs
mov
outs
or
adc
sub
pop
mov
push
push
ror
push
push
retf
push
retf
int3
jecxz
aam
rcl
int3
rcl
int3
rcl
int3
and
int3
adc
int3
add
adc
sti
adc
aas
and
add
add
adc
std
lds
sub
add
jmp
nop
pop
jne
nop
push
pop
cmp
pop
and
shl
add
push
add
push
inc
add
push
movs
adc
mov
(bad)
push
stos
retf
movups
mov
mov
adc
and
add
imul
add
dec
push
jne
mov
stos
inc
pop
ja
data16
adc
push
add
jne
mov
cmp
inc
or
in
test
pop
inc
add
inc
call
push
adc
je
add
push
adc
imul
rcl
add
jbe
push
sbb
push
inc
call
and
sub
adc
je
inc
inc
dec
push
inc
js
cld
cmp
les
cmp
push
sahf
mov
add
ret
clc
enter
add
add
neg
sbb
pop
sbb
mov
psrad
sub
sbb
fsub
(bad)
mov
mov
pop
inc
mov
pop
push
jmp
mov
xchg
ror
push
(bad)
cli
call
mov
jnp
in
pop
inc
pushf
and
pop
test
push
add
add
push
xlat
fwait
push
push
pop
jnp
(bad)
repz
pop
pop
test
pop
or
mov
mov
jae
add
sbb
lea
push
movs
movs
cwde
aad
movs
mov
mov
mov
xchg
sub
xchg
(bad)
dec
mov
dec
clc
data16
mov
adc
mov
ja
int
leave
and
and
mov
repz
femms
cmp
call
nop
fwait
add
adc
data16
pop
xchg
sldt
jmp
aaa
add
xor
jb
sub
(bad)
out
mov
mov
jns
add
cmps
leave
jne
push
out
inc
cmc
imul
add
sbb
adc
and
adc
jne
mov
loope
clc
adc
add
push
out
inc
lds
(bad)
jmp
add
mov
cmps
lea
gs
dec
inc
rol
push
push
mov
ret
sbb
or
ficomp
mov
cmovne
mov
cmovle
pop
jmp
xor
mov
mov
ret
xor
push
xchg
mov
add
adc
cld
and
pop
call
xchg
inc
xchg
fist
dec
mov
cmp
add
notrack
lock
jge
int
xchg
popf
xor
jle
inc
movs
pop
add
sbb
les
lock
addr16
mov
sbb
inc
hlt
(bad)
aam
shl
sti
mov
jmp
data16
idiv
cdq
mov
xchg
mov
out
fcomp
add
add
inc
sti
(bad)
and
or
xor
in
rcr
mov
out
ins
push
dec
lock
lds
inc
hlt
mov
(bad)
jne
in
stos
je
xor
lods
push
mov
mov
xor
dec
popf
inc
adc
sub
add
fidivr
jmp
sbb
jecxz
jne
add
sahf
xor
add
cmp
inc
jmp
push
repnz
cmps
mov
sar
out
jmp
mov
ja
int
xor
mov
adc
pop
cmp
dec
shl
dec
sbb
add
lea
idiv
dec
call
movups
or
call
sub
jmp
mov
xor
dec
xchg
fwait
add
test
or
hlt
movs
loop
mov
or
xor
fild
lea
xor
fisub
cmp
adc
data16
fs
sbb
add
add
and
cs
stos
sysexit
add
adc
data16
outs
dec
outs
pop
mov
sahf
inc
loopne
outs
std
dec
and
mov
inc
loopne
(bad)
mov
mov
jge
hlt
dec
idiv
jmp
jne
and
or
mov
mov
add
mov
div
dec
cmp
enter
not
mov
jne
in
jecxz
retf
jo
loopne
and
adc
jmp
data16
jne
shr
idiv
and
or
push
enter
mov
call
cmps
lea
sbb
add
inc
test
in
add
add
pusha
jbe
fsub
xlat
mov
mov
or
scas
adc
jmp
jmp
or
push
shr
mov
adc
sub
dec
add
stc
aas
or
xor
add
push
aas
inc
stos
(bad)
cmps
(bad)
fcom
jge
add
ja
sbb
cli
mov
mov
mov
push
mov
lock
pop
rol
adc
rol
repz
lea
and
add
xchg
out
jg
cmp
(bad)
stos
mov
add
xchg
out
jge
mov
scas
rcr
out
inc
add
popf
adc
aad
mov
stos
cmp
push
hlt
jl
clc
shr
cmps
stos
or
ficomp
jl
add
aad
jge
add
out
jne
push
mov
adc
add
out
pop
cmp
fsubrp
cmp
xchg
stc
add
adc
jne
cwde
jge
cli
and
jo
add
sub
idiv
sbb
scas
jne
xor
push
data16
(bad)
icebp
jmp
mov
div
sbb
inc
outs
jmp
pop
cmp
sbb
lea
data16
mov
xchg
dec
call
popf
adc
jmp
lahf
dec
call
add
mov
xor
hlt
aam
(bad)
repz
xor
add
xor
dec
xor
add
lea
jnp
mov
mov
push
mov
sub
cwde
into
scas
test
sbb
shl
cli
mov
xchg
add
add
repz
cli
add
jl
add
lahf
cmp
jecxz
add
rcl
add
mov
stc
jmp
pop
bound
or
adc
pop
mov
fsub
(bad)
nop
hlt
pop
add
add
pop
in
in
shl
shr
push
ror
mov
inc
call
add
dec
push
sar
jmp
and
test
sub
fimul
add
push
jbe
inc
fsub
mov
mov
dec
jno
ins
call
xchg
fmul
stos
mov
mov
sahf
inc
loopne
mov
add
sbb
push
pop
mov
adc
add
inc
loopne
add
nop
mov
jge
mov
movs
rol
lds
int3
mov
add
xchg
mov
les
(bad)
xchg
push
lea
push
call
mov
push
shr
sbb
mov
mov
neg
std
cmp
add
and
(bad)
jecxz
sub
mov
push
push
test
jae
fs
add
push
movs
test
and
lea
ret
jbe
imul
adc
or
pop
add
ret
push
jne
aam
out
add
cli
cmc
popf
push
xor
push
movs
mov
fisub
mov
xchg
and
(bad)
sar
idiv
stos
fadd
jge
add
sar
aam
or
into
fs
cmp
push
imul
rcr
add
test
sbb
pop
mov
push
inc
add
xchg
dec
cld
mov
int
mov
leave
ret
frstor
jne
xlat
xor
pop
mov
fdiv
pop
int
movs
xor
add
inc
nop
(bad)
fisttp
add
or
lea
adc
add
xchg
rol
xor
out
dec
sub
cmps
mov
enter
add
push
jnp
movs
movs
mov
enter
add
(bad)
enter
add
mov
add
push
mov
add
pop
adc
and
inc
mov
dec
adc
je
nop
stc
add
je
leavew
je
lds
sbb
or
adc
or
adc
add
xchg
inc
adc
jmp
jno
add
adc
add
jmp
mov
jae
sbb
adc
adc
adc
add
adc
sbb
mov
(bad)
adc
neg
pop
je
xchg
ret
add
push
dec
cli
jae
str
dec
adc
ret
add
jmp
movs
mov
je
sbb
add
lea
iret
xor
into
and
sub
push
add
adc
add
int
(bad)
(bad)
fst
push
and
add
int3
adc
add
lahf
adc
pop
or
ficom
inc
or
sub
lods
adc
add
test
sbb
int
push
adc
adc
add
test
into
push
or
ficomp
je
sahf
push
add
into
sub
push
cli
cmc
pop
jno
add
pcmpeqb
mov
add
adc
mov
cwde
sar
push
mov
ficom
add
sti
add
adc
adc
add
push
or
cmp
call
add
sgdtd
lea
je
(bad)
stc
add
add
cdq
ret
sbb
jmp
cdq
ret
push
add
push
sbb
add
inc
sbb
int
mov
xchg
shl
iret
ja
or
or
push
pop
test
sbb
add
stos
test
test
sar
add
cld
xor
push
bound
pop
xchg
mov
retf
mov
retf
mov
retf
mov
retf
mov
retf
or
pop
rol
mov
shl
add
je
sub
or
dec
adc
jecxz
push
and
scas
push
add
call
pop
add
or
pop
add
stc
add
push
add
xchg
ret
pop
add
jecxz
ret
adc
test
pop
add
push
sub
in
iret
out
pusha
sbb
test
pop
add
or
pop
add
sbb
lock
rcr
add
adc
add
jnp
push
out
inc
dec
push
je
sahf
pop
add
sbb
adc
dec
sbb
pop
add
and
or
push
mov
lods
adc
and
fst
sbb
sbb
int
or
adc
add
dec
sbb
call
adc
aas
or
inc
je
jp
jg
adc
inc
jne
xchg
mov
adc
mov
adc
mov
adc
adc
inc
or
dec
je
or
shl
mov
add
add
cld
jmp
lods
call
dec
hlt
mov
xchg
sub
push
dec
jns
test
adc
ror
jnp
xchg
popf
rol
adc
je
cdq
ret
pop
add
pop
adc
add
mov
add
loopne
je
fdivr
add
add
push
je
cmp
add
aam
jmp
xor
xor
add
mov
or
sbb
add
add
jle
jnp
or
pop
ja
frstor
or
push
dec
mov
jecxz
sbb
add
popf
push
jecxz
or
add
lea
add
mov
inc
or
add
adc
adc
add
inc
push
pop
adc
cmp
(bad)
jmp
jmp
xchg
dec
lock
jp
(bad)
jmp
sbb
inc
pop
and
je
(bad)
test
and
mov
push
outs
dec
jmp
xchg
jne
mov
sti
xchg
and
cmp
imul
test
or
adc
inc
push
stos
xchg
push
sbb
ret
retf
cmp
xor
into
nop
div
clc
(bad)
popa
pop
push
inc
repnz
rcl
sbb
xor
je
jge
into
pop
into
push
push
add
xchg
or
pushf
idiv
pop
or
sub
ss
jne
movs
jne
call
adc
dec
or
or
popa
jo
mov
sub
popf
sbb
pop
push
mov
add
mov
sub
or
fdivr
inc
add
popa
mov
cli
outs
or
psrlq
add
dec
add
mov
xor
push
lock
mov
or
cdq
pop
lea
mov
jg
mov
js
repz
mov
add
xor
ss
add
shr
pop
leave
sar
retf
push
lock
retf
(bad)
cmp
and
mov
add
mov
imul
retf
lea
add
(bad)
(bad)
aaa
cmp
add
pop
daa
add
add
scas
cmp
popa
or
mov
call
test
xor
dec
aad
push
addr16
inc
test
add
mov
jg
dec
xor
add
in
add
aaa
mov
adc
xchg
dec
push
cmps
shr
xchg
sbb
es
pop
mov
jp
adc
arpl
mov
xor
pop
or
repnz
adc
add
jge
dec
clc
das
je
xchg
inc
add
lds
iret
outs
or
sti
xor
aam
dec
add
and
pop
adc
int3
pop
sbb
sti
push
xchg
mov
jmp
inc
data16
int
dec
or
cmp
mov
shr
iret
pushf
mov
adc
push
mov
test
aad
pop
add
mov
xor
xor
or
push
cwde
idiv
add
lea
or
mov
das
lea
add
(bad)
cmp
mov
push
loop
pop
mov
add
xchg
js
retf
xor
pop
mov
pop
mov
or
push
xor
call
leave
dec
push
mul
cmp
xchg
adc
mul
mov
xchg
and
mul
add
push
pop
xchg
adc
mul
add
jmp
mov
add
not
or
cmp
lea
mov
cmp
pop
and
ret
push
rol
fdiv
aad
inc
pop
sub
dec
in
adc
cmp
and
ret
push
rol
fdiv
loop
add
sbb
push
add
cdq
cmp
and
ret
xchg
pop
fmul
aam
inc
(bad)
jmp
push
push
cdq
cmp
and
ret
xchg
pop
fmul
sub
in
lods
push
add
movs
sbb
add
sti
inc
xchg
inc
call
pop
add
(bad)
idiv
add
mov
call
ror
not
pop
inc
xor
rol
jmp
mov
idiv
stos
sub
mov
pushf
cmp
mov
je
lock
jmp
inc
or
add
arpl
jo
mov
pop
iret
jnp
push
push
lahf
push
push
mov
mov
adc
push
mov
push
jmp
sbb
xchg
mov
push
out
push
jmp
neg
push
je
daa
sbb
sahf
movs
mov
inc
mov
inc
add
mov
push
out
inc
loop
fstp
pop
push
mov
mov
mov
imul
inc
not
imul
dec
mov
not
mov
cld
fst
stc
inc
clc
xchg
lods
stc
push
stos
leave
fisttp
loop
dec
test
clc
cmp
jmp
inc
add
or
push
jne
add
xchg
jge
ins
push
add
add
adc
inc
add
mov
push
pop
xor
cld
test
ss
retf
call
sbb
jns
mov
inc
lea
int3
mov
mov
mov
mov
jo
add
(bad)
std
sub
ret
xor
push
mov
clc
aas
or
push
jne
jne
cmp
cld
lea
cld
jge
inc
add
fdivrp
(bad)
call
add
dec
inc
dec
call
sub
push
push
popf
add
mov
inc
adc
lea
inc
mov
jo
inc
popf
cwde
jge
stos
mov
leave
in
or
inc
push
push
push
call
ret
push
mov
pop
jne
(bad)
inc
dec
in
inc
or
inc
or
dec
inc
add
cs
(bad)
jmp
sbb
xchg
loope
mov
not
push
out
jmp
outs
mov
imul
div
call
and
jne
es
jmp
outs
not
jbe
and
push
stos
add
jmp
jg
jne
call
lea
pop
push
stos
add
call
xchg
sub
jp
idiv
test
dec
call
add
mov
div
call
pop
push
push
mov
and
sti
retf
or
aam
je
daa
dec
jmp
xor
std
cdq
jne
push
div
cdq
adc
jmp
cdq
jne
call
adc
add
call
aam
div
mov
cld
stos
cwde
pop
push
dec
call
cld
stos
cwde
pop
push
stos
and
call
pop
pop
ret
mov
not
lea
pop
ret
ja
not
lea
pop
ret
sub
sbb
loop
sbb
jecxz
add
inc
imul
sub
in
cdq
imul
sti
xchg
add
adc
test
lock
sbb
in
jp
out
xchg
rcl
inc
in
cwde
into
cmp
sbb
jne
inc
add
sbb
jmp
inc
mov
ret
sub
or
push
fdiv
or
jge
jno
jmp
add
add
cwde
push
pop
pop
jns
push
xchg
dec
push
aad
dec
mov
adc
add
int
push
call
push
push
pop
test
add
sub
or
mov
das
(bad)
shr
pop
jns
or
(bad)
cmp
stos
call
lea
sar
add
xchg
dec
jmp
xchg
jne
sbb
jmp
mov
cmp
sub
dec
jmp
add
jne
xchg
jne
call
(bad)
rol
push
mov
or
dec
jns
test
or
push
lods
sahf
ss
xchg
jne
push
movs
nop
add
loope
xor
idiv
and
dec
jmp
add
adc
adc
loop
aaa
sbb
inc
add
lea
inc
jecxz
dec
xchg
test
dec
cs
(bad)
adc
dec
adc
xchg
not
(bad)
loop
rcl
pop
jmp
sbb
adc
inc
add
jne
pop
or
sldt
sahf
in
xor
mov
inc
jecxz
(bad)
xchg
test
xchg
xor
jmp
adc
mov
dec
sbb
push
add
(bad)
push
shl
lea
inc
jecxz
push
xchg
test
push
mov
dec
mov
in
sahf
in
sub
add
ins
adc
loopne
les
rcl
push
mov
add
(bad)
cmc
jmp
or
and
mov
mov
aas
call
add
jne
push
lock
ja
neg
or
mov
inc
add
(bad)
stc
inc
cli
stos
xchg
mov
sbb
jmp
mov
out
fdiv
and
pop
adc
nop
add
add
gs
lea
dec
mov
std
mov
call
loope
add
push
jmp
pop
inc
dec
in
xchg
push
adc
sbb
mov
mov
and
inc
shr
add
adc
mov
aas
push
adc
inc
or
dec
sbb
or
fsub
add
dec
adc
pop
jmp
popf
jp
mov
mov
lahf
inc
adc
push
je
xchg
adc
dec
jmp
adc
outs
ud0
dec
push
jmp
jbe
jmp
and
or
lea
cdq
inc
(bad)
loopne
fsubr
rcl
jmp
sub
add
jg
inc
pop
sbb
std
jmp
and
dec
call
not
dec
mov
jmp
pop
or
ret
push
mov
daa
rcl
pop
(bad)
xor
sar
pop
cwde
pop
fadd
add
je
inc
lea
inc
loopne
pop
or
push
(bad)
jle
inc
in
or
cmc
popf
inc
or
pop
out
loopne
dec
mov
out
inc
mov
cwde
pop
clc
cmp
xchg
adc
or
mov
cs
je
and
je
cmc
call
add
or
cmp
jne
repz
call
add
mov
mov
and
test
(bad)
sub
push
lahf
jne
in
fsin
jmp
add
and
add
aad
push
xchg
dec
imul
jo
stc
dec
sar
adc
int
add
add
or
mov
or
mov
adc
or
loopne
not
and
jecxz
and
add
mov
(bad)
bound
das
push
adc
ret
and
bound
inc
out
adc
aas
jecxz
sub
test
or
inc
(bad)
adc
push
les
mov
call
cmp
dec
aaa
mov
cld
mov
adc
jne
inc
mov
sti
(bad)
shl
inc
fld
adc
mov
mov
cmp
push
ret
add
in
rcl
jne
xchg
or
add
adc
push
sti
mov
xchg
pop
out
cmp
popw
push
xor
mov
push
push
jmp
pushf
or
imul
pop
not
sbb
push
push
int3
cwde
jne
stos
add
add
enter
in
not
mov
inc
int
jne
pop
sbb
adc
push
push
je
loope
fwait
mov
push
sti
mov
adc
jae
mov
mov
push
adc
je
mov
add
sbb
inc
pop
inc
not
out
scas
in
inc
pop
mov
in
nop
adc
jne
jmp
sbb
mov
push
xchg
out
in
add
inc
add
push
sbb
jmp
or
push
sti
inc
jbe
inc
int
mov
mov
popf
ja
not
shr
inc
int
jne
push
sbb
in
rcl
cli
addr16
inc
add
jmp
sti
mov
in
cmps
in
inc
(bad)
in
je
in
je
sub
test
mov
add
sub
mov
movs
sti
ret
div
cli
adc
out
fadd
aas
ret
adc
xor
stos
adc
out
fcom
sar
pop
sahf
push
sub
movs
or
scas
sar
pop
lahf
add
push
push
cld
push
push
push
xor
mov
add
add
test
add
ins
fs
movs
xor
fisubr
fs
bound
mov
add
jbe
jmp
bound
jmp
jne
in
int
cmc
jmp
ret
test
enter
ret
rcl
xchg
in
rcl
dec
xor
mov
inc
add
lea
std
jbe
inc
ror
adc
push
rol
test
cwde
xor
mov
fmul
(bad)
jbe
push
call
int
dec
in
je
stos
(bad)
mov
shr
sbb
add
lahf
fdivr
jmp
push
jmp
sbb
jne
jmp
test
gs
and
not
ret
fild
xor
adc
or
xchg
fdivr
mov
aaa
ds
inc
fld
jne
jmp
adc
push
sti
test
and
and
not
add
fstp
fwait
jmp
mov
aad
add
stos
inc
mov
xchg
daa
shr
mov
push
pop
mov
mov
inc
dec
sbb
into
or
in
pusha
sbb
inc
mov
add
sar
inc
add
ins
dec
push
pop
add
pop
sbb
mov
push
cwde
(bad)
stos
pop
add
(bad)
fdiv
adc
jbe
fst
push
mov
dec
push
add
add
out
push
and
imul
test
mov
call
call
adc
lea
clc
cmp
lock
xchg
sbb
add
push
mov
adc
iret
push
sti
test
push
push
lea
dec
push
or
cmc
xchg
lock
call
cmc
call
dec
pop
pop
movs
rcl
inc
push
xor
xchg
pop
inc
shl
xor
pop
xor
jmp
push
pop
push
imul
enter
push
dec
inc
dec
mov
call
pop
xchg
mov
xchg
mov
inc
add
inc
dec
mov
in
inc
mov
jmp
movs
pop
out
sub
dec
lea
xor
add
adc
inc
in
ins
sbb
add
out
packsswb
add
repz
adc
mov
mov
mov
test
arpl
neg
stc
(bad)
mov
neg
fcmovu
clc
mov
sahf
add
pop
mov
lock
fcomi
add
adc
mov
push
pop
scas
nop
call
clc
adc
adc
or
sahf
ds
or
repnz
dec
in
xchg
push
cld
punpcklbw
jmp
add
repz
ins
idiv
call
mov
mov
add
adc
stos
or
push
mov
sbb
iret
jne
and
repz
cmp
cmp
jecxz
jne
cmp
dec
sbb
dec
or
loope
add
xchg
pop
ficomp
dec
pop
ret
mov
ret
add
fist
xchg
inc
cld
mov
sbb
dec
pop
cmp
sub
mov
shl
test
inc
sti
addr16
add
not
div
loope
int3
test
stos
inc
pop
pop
dec
cmp
in
cld
xlat
call
je
jecxz
or
pusha
div
inc
add
xlat
add
add
push
ror
sbb
fucomip
cmp
in
inc
sbb
or
inc
or
push
sti
add
adc
sub
add
fwait
mov
hlt
inc
add
je
and
add
mov
add
adc
jne
in
pop
dec
inc
sub
cwde
cmp
jmp
popf
arpl
jo
sti
lds
out
pop
adc
adc
rcl
jae
shl
add
xchg
shl
cld
jge
adc
mov
push
sub
adc
pop
jp
test
push
test
adc
add
xchg
fcom
xchg
in
sbb
adc
mov
sahf
aad
inc
jns
js
rcl
test
and
lea
dec
aad
call
mov
add
xor
inc
pop
(bad)
shl
test
xchg
in
(bad)
sbb
shl
add
shl
or
sti
mov
sub
cmc
add
dec
hlt
dec
push
daa
out
push
stos
std
(bad)
xchg
rcl
call
push
inc
push
jmp
pusha
arpl
dec
sti
push
call
jne
fsubrp
call
out
xlat
jp
mov
dec
cmp
or
push
add
push
mov
jnp
test
dec
test
or
cli
or
push
push
mov
add
inc
not
mov
(bad)
enter
div
jmp
lods
inc
jecxz
inc
jmp
test
int
je
add
push
xlat
je
call
call
add
shr
jmp
sti
mov
pop
leave
dec
cmp
in
push
hlt
sbb
loopne
inc
test
add
xchg
mov
dec
mov
shl
shr
xchg
jbe
inc
fs
arpl
add
rol
lea
dec
push
out
fisttp
add
inc
push
nop
inc
or
fild
fiadd
push
repz
ret
fiadd
push
fist
jmp
fild
int
add
and
stc
(bad)
fst
inc
add
adc
mov
push
leave
pop
inc
sub
hlt
and
or
fdivr
add
adc
rcl
add
xchg
ds
imul
dec
xor
fdiv
and
jnp
jmp
push
jmp
test
popa
pop
inc
mov
rcr
mov
inc
or
or
cmp
adc
inc
sar
add
mov
xor
rcl
sub
int
add
push
xchg
push
add
adc
cmp
sti
push
adc
je
call
inc
mov
inc
mov
jge
inc
xor
mov
inc
sub
inc
enter
add
lea
stc
(bad)
in
or
xlat
out
sub
push
test
push
xlat
(bad)
jmp
jecxz
push
jmp
and
push
add
mov
int
cmp
sbb
adc
clc
out
dec
call
push
shl
dec
jne
add
push
not
push
out
push
cmc
cmp
fcmovnbe
in
test
in
xor
(bad)
inc
hlt
push
jo
mov
pop
mov
mov
push
in
xlat
(bad)
jmp
dec
pop
leave
push
inc
sub
inc
dec
push
out
jmp
idiv
or
outs
aaa
daa
adc
stos
not
ss
mov
shl
add
fwait
retf
pop
call
scas
ror
cdq
into
retf
jns
xor
pusha
enter
push
mov
enter
sub
add
outs
loop
jnp
sbb
inc
(bad)
and
add
cwde
retf
data16
jmp
scas
rcl
jae
pop
int
mov
dec
mov
xor
push
add
repnz
iret
sti
cmc
call
movs
add
xor
outs
or
movs
ror
fld
add
add
push
mov
fnsave
xor
jge
je
outs
or
and
leave
inc
push
addr16
add
iret
jp
test
add
pop
nop
rol
sti
xor
clc
call
ror
pop
ins
add
push
nop
rol
mov
in
jae
in
je
pop
sar
ret
pop
sar
jb
xlat
aas
add
adc
rol
adc
pop
jmp
adc
pop
rol
rol
fsubr
push
cld
(bad)
js
xchg
aas
push
mov
jecxz
push
rol
lea
push
push
outs
fisttp
add
sub
inc
nop
inc
pop
xchg
shl
pop
xchg
mov
xor
adc
cli
adc
dec
push
mov
push
into
popa
div
mov
sti
test
mov
inc
add
loop
cs
out
add
jmp
dec
inc
adc
fist
inc
mov
add
dec
xor
push
cli
dec
dec
push
stos
inc
add
sub
inc
pop
xchg
shl
pop
adc
div
mov
sti
sub
lea
into
cmp
inc
adc
jne
ins
add
mov
and
rcl
test
and
test
add
sti
mov
in
out
or
or
inc
push
int
jmp
add
or
xchg
sti
sub
or
int
push
ins
sti
push
stos
and
nop
push
sbb
inc
int
push
mov
lock
xorps
bound
mov
mov
out
fst
push
call
cmc
call
rol
xchg
inc
(bad)
jmp
sti
add
mov
or
xchg
arpl
mov
dec
inc
int
dec
call
xchg
lea
out
cmp
dec
je
add
sti
scas
pushf
in
and
stos
pop
not
or
pop
cld
add
stos
and
sbb
push
(bad)
cld
dec
dec
pop
push
push
leave
push
bound
push
(bad)
(bad)
inc
imul
push
pop
nop
inc
sbb
into
inc
cld
xchg
(bad)
(bad)
and
ins
add
adc
(bad)
adc
jmp
mov
inc
add
mov
inc
in
or
add
test
sub
out
and
out
jg
test
adc
cmp
or
push
call
je
jne
xor
(bad)
sbb
inc
add
mov
mov
div
stos
dec
mov
jmp
call
fxch
inc
add
ins
out
call
push
pop
add
arpl
adc
fcos
(bad)
fst
shr
fsub
or
lods
retf
dec
cli
leave
stos
lods
rol
and
(bad)
cld
mov
div
call
jmp
call
idiv
jb
sub
mov
clc
sub
add
mov
ins
jecxz
(bad)
idiv
jmp
(bad)
cli
imul
movs
or
jmp
xor
cld
xchg
xchg
rcl
not
cwde
pop
not
ins
out
shl
cld
mov
enter
in
cmp
inc
nop
pop
sti
xor
inc
cld
mov
add
adc
push
add
shr
push
sbb
push
mov
and
pop
sti
mov
out
cwde
xchg
xchg
sbb
xor
aas
idiv
and
loope
dec
mov
pushf
mov
inc
aaa
xchg
push
sbb
xor
mov
scas
std
jmp
mov
adc
pop
ins
repz
add
fisttp
cmp
push
dec
pop
xlat
push
push
out
push
push
int3
in
adc
not
push
lahf
inc
fmul
inc
inc
add
sbb
push
aaa
adc
mov
sbb
add
inc
sar
xchg
clc
jmp
dec
call
add
push
inc
or
and
jl
pop
add
mov
mov
enter
stc
dec
adc
aaa
cmp
test
sub
std
jmp
sub
sub
mov
cmp
add
loopne
stos
in
sub
add
adc
fdivr
cmp
out
inc
in
test
sbb
adc
push
add
pop
jnp
push
or
and
adc
add
rol
loopne
(bad)
stos
sbb
ret
fdivr
jmp
push
add
imul
popf
mov
fdivr
push
jae
add
push
fdivr
push
out
(bad)
jmp
test
fdivr
call
jmp
or
or
jmp
jmp
loopne
cld
call
mov
sbb
or
movs
test
clc
jmp
cdq
call
and
test
add
jmp
imul
cmc
sar
call
xchg
mov
mov
push
sub
je
xor
push
jecxz
jp
out
je
xor
mov
inc
add
jae
std
call
std
stos
call
neg
xchg
aam
sub
out
cmp
test
fwait
in
mov
(bad)
jmp
xchg
jmp
lds
jnp
mov
xchg
js
add
popf
(bad)
clc
dec
out
jb
popf
inc
add
adc
sar
std
imul
mov
loope
dec
push
sbb
dec
jmp
sbb
shl
add
push
adc
lea
jmp
jecxz
call
call
imul
jmp
std
inc
pop
neg
iret
sub
mov
enter
in
cmp
jg
lds
push
jne
cmp
rcl
mov
inc
icebp
out
inc
add
mov
mov
add
xchg
ja
aad
aas
add
push
div
fwait
add
lea
leave
push
dec
jg
jne
add
test
(bad)
push
or
fist
test
imul
lahf
adc
jmp
xchg
dec
cld
cs
push
jge
gs
adc
adc
push
fnstcw
xor
xor
push
inc
xchg
mov
arpl
loope
add
jmp
adc
push
sti
push
add
sti
push
add
jmp
inc
add
push
sti
(bad)
nop
ret
jmp
lea
add
popf
lea
push
inc
pop
out
push
push
or
mov
mov
xchg
mov
push
repz
fistp
cmp
push
adc
es
jmp
xchg
into
out
sub
data16
sub
jne
push
cmp
push
mov
into
out
jae
mul
sub
je
xchg
mov
push
lea
or
add
je
(bad)
stos
xor
xchg
push
or
dec
mov
pop
adc
add
rol
in
jne
cdq
cmp
cdq
jne
jle
outs
mov
in
loop
es
ds
jle
(bad)
mov
call
pop
cmps
rcl
aam
push
mov
fdivrp
push
outs
ror
add
out
mov
fsubrp
and
bound
(bad)
pop
div
in
je
xor
pop
xor
call
(bad)
iret
mov
cdq
push
adc
std
jp
pop
cmps
mov
dec
xchg
ret
inc
xchg
in
push
push
test
icebp
xor
mov
sub
rol
add
push
mul
(bad)
mov
dec
lds
add
mov
arpl
in
push
mov
add
cwde
aas
adc
loop
leave
mov
lea
push
idiv
nop
shl
enter
int3
imul
jg
sbb
pop
pop
inc
or
cli
mov
add
sti
mov
stc
loopne
call
pop
jae
mov
add
jmp
loopne
push
sti
push
in
mov
jmp
pop
mov
mov
xor
push
xor
int
add
or
adc
adc
fdiv
mov
ss
jnp
add
shr
sti
daa
fst
dec
push
push
sti
nop
adc
dec
call
push
mov
into
stos
jmp
push
xlat
popa
and
lods
daa
inc
popf
scas
sub
jmp
cmp
jp
sub
push
mov
fdiv
test
pop
add
test
iret
call
add
xchg
add
shl
call
and
aam
xor
shl
add
fst
and
aam
dec
in
push
shl
cli
dec
xchg
jecxz
add
mov
jne
in
mov
mov
call
pushf
and
cdq
inc
aam
aas
in
add
sub
mov
add
jecxz
gs
inc
pop
fwait
inc
aam
push
in
jmp
jmp
sbb
in
out
shl
push
mov
icebp
out
inc
jmp
lea
in
inc
add
or
call
jae
cmc
inc
and
call
in
stos
ret
sub
call
mov
fs
sti
out
lods
cmc
dec
(bad)
xlat
add
out
(bad)
push
ror
xor
test
inc
mov
add
dec
adc
fucomi
push
(bad)
jmp
nop
call
sbb
jge
xchg
aam
xchg
add
adc
sub
cmp
jne
and
inc
inc
out
scas
jb
test
lods
push
out
in
mov
xchg
loopne
pop
xchg
sub
pusha
sbb
in
out
mov
call
inc
loopne
mov
jecxz
sbb
push
mov
nop
or
add
call
mov
out
int3
mov
xchg
fsubp
in
add
sbb
lock
shl
sub
in
inc
fstp
sub
mov
jge
int
add
push
adc
mov
sub
sti
out
or
inc
sbb
rcl
cmp
add
and
mov
cmp
jnp
adc
rcl
je
mov
loop
push
in
mov
jecxz
in
mov
push
mov
test
int
loopne
int3
mov
enter
jmp
add
mov
stos
js
lds
adc
lds
push
add
jmp
add
adc
mov
clc
sub
div
xchg
or
add
shl
adc
(bad)
nop
sub
popf
or
add
push
sti
gs
and
inc
pop
ficomp
sub
pop
mov
fs
mov
xchg
cld
mov
sbb
cli
inc
xor
and
mov
idiv
int
jecxz
pop
int
push
mov
cmps
std
stos
mov
mov
call
xchg
xlat
push
mov
or
adc
sbb
adc
inc
add
(bad)
mov
mov
fsubp
in
add
pushf
shl
call
and
gs
inc
pop
adc
rol
jle
add
dec
int3
add
sbb
push
pop
adc
mov
pop
in
inc
dec
sub
out
aam
call
in
push
sbb
cmp
xor
mov
mov
jnp
adc
push
shl
xchg
cld
mov
gs
mov
cmps
cmp
test
sub
add
(bad)
fcom
stos
int3
enter
jmp
test
jmp
jbe
lds
sub
in
not
sub
and
xchg
in
nop
adc
mov
mov
div
xchg
or
add
xlat
xchg
(bad)
adc
in
inc
or
mov
sti
gs
fs
inc
or
add
retf
pop
mov
in
mov
adc
jne
gs
jmp
ror
or
adc
xchg
bound
add
adc
ds
sti
cmp
pop
or
adc
mov
stos
xchg
mov
std
dec
retf
sub
(bad)
imul
pop
in
ret
idiv
or
add
pusha
idiv
mov
lds
shl
in
inc
or
movs
clc
mov
pop
adc
in
adc
add
lea
xchg
pop
mov
add
push
add
push
and
in
loopne
pop
mov
jne
leave
dec
push
sti
cmp
in
inc
add
lea
lea
in
(bad)
cmp
dec
inc
mov
shl
test
stos
(bad)
not
fadd
call
cdq
std
jmp
rcl
clc
imul
inc
retf
pop
add
jno
(bad)
mov
xor
jg
xor
add
sti
add
mov
xor
jnp
sbb
shr
inc
add
adc
in
push
adc
dec
fiadd
jae
in
nop
adc
xlat
sbb
neg
(bad)
in
inc
pop
push
cmp
je
mov
not
jg
sbb
push
sti
test
popa
or
add
mov
test
stc
mov
(bad)
mov
enter
push
int
xor
(bad)
mov
or
gs
cmp
les
and
mov
enter
and
mul
jae
mov
fidivr
add
or
add
fld
adc
add
or
pop
mov
add
imul
inc
sbb
int3
mov
stos
or
sub
ror
inc
int
shl
test
pop
retf
not
fadd
call
es
pop
rcl
add
pop
jcxz
push
retf
fiadd
add
retf
and
adc
dec
xor
in
adc
push
sti
add
loopne
mov
pusha
push
jnp
push
fld
push
shr
inc
add
adc
out
loopne
(bad)
call
fld
outs
cld
in
and
call
int
pop
retfw
in
inc
int
cmp
je
mov
not
and
retf
dec
ja
test
or
adc
mov
call
(bad)
fadd
dec
cmp
mov
int
xor
cli
mov
or
pop
idiv
lods
push
les
add
int3
dec
push
sbb
not
push
out
sbb
(bad)
clc
mov
mov
add
popf
pop
and
fstp
inc
add
adc
add
out
adc
pop
mov
test
ret
push
sbb
sti
cmp
sbb
sbb
stos
or
dec
call
mov
mov
cld
retf
push
mov
leave
mov
repz
std
call
jle
pop
cmps
rcl
fsub
sahf
ror
test
push
daa
mov
movs
jbe
(bad)
stos
mov
sub
pop
dec
adc
fs
mov
stc
mov
pop
dec
sahf
mov
cmp
sti
push
cld
xor
and
ret
test
adc
bound
out
mov
loop
pop
mul
inc
(bad)
int
out
fldenv
push
call
into
pop
adc
mov
inc
int3
outs
push
sbb
inc
ret
push
jle
into
push
cli
inc
(bad)
lea
out
in
(bad)
jmp
in
jp
cdq
sbb
and
add
test
add
jnp
std
inc
pop
bound
pop
inc
iret
call
inc
push
retf
call
mov
add
pop
mov
out
mov
sub
adc
lahf
mov
test
out
mov
fdivr
mov
jns
idiv
aam
idiv
add
cwde
in
jae
fdivr
fadd
out
(bad)
std
jmp
push
test
xchg
push
ror
icebp
inc
cli
mov
dec
fsub
push
lea
cmps
push
lea
ret
push
lea
stos
push
push
mov
push
push
out
not
cmps
icebp
push
test
add
es
nop
rcl
lea
add
xor
jne
fmul
cmp
sub
lea
add
mov
bound
inc
xlat
nop
xchg
sbb
cmp
sub
pop
push
add
or
xor
push
test
add
ja
mov
ret
pop
stos
(bad)
mov
xor
jmp
add
idiv
mov
or
push
cmp
add
test
arpl
lea
push
and
fdiv
inc
jg
push
sbb
je
stos
xor
mov
jg
push
gs
(bad)
std
xor
popa
and
inc
cli
inc
xlat
nop
add
push
sbb
je
fs
push
ror
(bad)
and
(bad)
nop
aad
or
xchg
call
jmp
mov
adc
call
inc
int
pop
cwde
(bad)
xlat
adc
dec
jno
cmp
test
fdiv
ds
popa
sbb
jge
imul
and
add
add
int3
out
hlt
aad
push
mov
lea
add
call
add
jmp
mov
das
push
sbb
push
shl
push
call
sbb
sti
dec
stos
or
sbb
iret
jae
mov
sub
test
(bad)
cld
int
mov
add
adc
mov
rol
add
test
rcr
mov
jmp
aam
xor
inc
add
push
jnp
popa
inc
div
ror
push
add
pop
aam
push
add
xor
add
add
cmc
shl
call
sahf
and
xor
sahf
inc
or
sub
inc
pop
scas
mov
mov
out
popf
adc
mov
cli
pop
mov
retf
mov
ds
pop
stos
mov
imul
mov
inc
stos
push
jl
addr16
addr16
push
inc
add
mov
je
(bad)
gs
push
add
jle
imul
sub
daa
sbb
scas
add
enter
shr
mov
lahf
inc
test
addr16
mov
sahf
dec
mov
aam
lods
inc
add
ror
adc
lods
out
jae
jne
mov
fadd
and
stos
inc
add
scas
call
mov
cmps
lea
lods
cld
dec
cmps
call
mov
pop
call
mov
sahf
jge
cwde
push
mov
add
inc
mov
enter
test
aam
push
mov
dec
aad
stos
mov
xchg
shl
call
mov
mov
dec
inc
out
test
sbb
sti
out
mov
lea
inc
jecxz
repz
push
inc
mov
clc
daa
cmps
sub
popa
add
cmc
sahf
std
jmp
(bad)
jmp
inc
sbb
add
cdq
inc
in
xchg
xor
xor
and
jge
cdq
adc
clc
mov
call
div
lahf
out
call
push
push
jge
loop
and
jge
cdq
add
clc
call
out
inc
lods
ror
sti
aam
xor
dec
add
pop
pop
add
xor
sahf
aas
adc
push
pop
push
mov
in
rol
xor
xor
clc
add
push
les
out
cld
call
rol
pop
add
data16
out
(bad)
retf
jmp
mov
inc
cld
(bad)
push
cmps
push
cmp
pop
or
cmp
sti
add
shl
call
int3
pushf
(bad)
call
out
out
or
test
loopne
call
and
xchg
adc
jecxz
jmp
mov
out
jmp
and
mov
popf
lea
div
dec
iret
inc
in
add
adc
add
fs
jecxz
fs
ror
shr
mov
shl
das
(bad)
dec
sub
into
pushf
ds
push
sbb
mov
pop
adc
cmp
call
(bad)
clc
mov
sub
jp
pop
xchg
(bad)
inc
and
(bad)
nop
aam
call
cld
(bad)
jle
add
stos
popf
pop
cld
cmc
xchg
movs
std
mov
adc
rol
dec
xor
mov
jmp
jae
stos
call
dec
lea
lods
dec
call
pop
ror
lea
lods
mov
xchg
test
test
idiv
mov
mov
push
fwait
jne
mov
movs
std
cmp
add
dec
test
not
sar
(bad)
cmp
add
pop
scas
std
cli
jbe
mov
dec
sub
xchg
push
scas
mov
movs
pop
mov
mov
inc
test
mov
mov
test
inc
test
lods
jnp
mov
je
add
adc
mov
push
aas
daa
inc
popf
pushf
inc
or
call
push
pop
idiv
stos
inc
mov
mov
test
dec
leave
inc
sub
adc
xor
ds
push
test
jmp
jae
stos
jmp
idiv
movs
add
test
jmp
daa
inc
fld
inc
test
in
test
xchg
push
xor
aad
cld
sar
retf
mov
pushf
fwait
mov
stos
in
imul
rol
cld
(bad)
(bad)
js
(bad)
lock
jmp
cli
xor
addr16
mov
add
cld
call
cmps
jnp
sbb
add
pop
adc
call
jmp
push
lods
jmp
mov
lea
int
test
stos
jmp
push
push
test
cmp
lea
idiv
stos
inc
rol
call
lea
xchg
push
push
pop
movs
cmp
push
dec
(bad)
loopne
add
add
mov
aam
push
cmp
push
outs
(bad)
mov
das
out
fdivp
push
aaa
adc
inc
call
mov
call
in
out
mov
adc
inc
inc
add
in
mov
jnp
(bad)
(bad)
shr
test
push
pop
idiv
stos
xchg
mov
nop
fcom
add
pop
push
idiv
push
mov
push
test
imul
ror
and
push
push
push
mov
clc
xor
call
mov
(bad)
jle
mov
lock
mov
fsub
call
add
(bad)
xchg
js
cli
jmp
pop
xlat
jmp
mov
mov
dec
jecxz
(bad)
(bad)
jmp
outs
addr16
inc
mov
inc
or
mov
inc
or
inc
mov
rcl
mov
fdivr
call
nop
push
fdivr
nop
pop
cld
dec
out
push
mov
cs
fs
call
cmp
nop
fadd
push
fcom
xor
xchg
les
jmp
fstp
jne
adc
add
inc
add
mov
dec
ins
add
test
jmp
pop
or
push
stos
fs
call
inc
fisttp
idiv
loopne
push
jmp
(bad)
out
inc
fdiv
push
sbb
stos
jb
(bad)
shr
cli
out
(bad)
cld
call
aam
push
ins
add
pop
mov
inc
sbb
fdiv
call
(bad)
popa
(bad)
call
push
outs
sub
cmc
leave
xlat
(bad)
cli
mov
cmps
xor
xchg
push
sbb
fstp
div
add
popa
pop
push
mov
push
dec
mov
loop
pop
(bad)
out
mov
into
xor
and
xor
addr16
push
call
mov
outs
std
pop
mov
out
fmul
push
inc
jecxz
(bad)
out
pop
stos
jb
mov
dec
jmp
or
jne
inc
dec
inc
xchg
jge
sub
adc
retf
lea
jmp
stc
in
test
jne
cmp
jecxz
std
jmp
lea
in
jae
test
add
mov
stos
call
repz
adc
test
and
mov
sar
or
cli
and
scas
mov
add
lods
imul
sbb
stos
push
xor
dec
dec
push
cmp
xor
mov
dec
sti
mov
add
call
push
dec
jbe
and
sbb
(bad)
mov
xchg
dec
movs
int3
inc
dec
jmp
movs
not
pusha
fdiv
add
stos
pop
stos
inc
aas
mov
je
in
scas
inc
(bad)
mov
(bad)
je
std
call
loopne
inc
jge
pop
int3
repz
test
dec
mov
dec
add
adc
jb
sahf
lea
mov
push
mov
div
loop
xor
add
pop
mov
mov
sti
shr
loop
dec
iret
mov
jmp
in
push
(bad)
pop
lea
fwait
pop
cld
xor
add
jne
loop
sub
push
sti
mov
cmps
ins
jb
sti
out
mov
add
lea
(bad)
call
(bad)
add
inc
fstp
bswap
shr
fldenv
push
call
into
bound
or
cmp
pop
mov
push
cli
gs
inc
mov
shl
inc
in
and
add
test
xchg
push
rol
shr
stc
mov
push
jecxz
sub
fnstsw
inc
add
iret
push
pop
push
adc
jne
vpunpckhdq
dec
lea
test
call
push
daa
adc
cld
(bad)
stc
mov
test
dec
lea
mov
jmp
jne
mov
jae
test
mov
lods
add
dec
dec
push
sahf
je
xchg
dec
imul
sbb
lods
(bad)
dec
sbb
fist
test
stos
in
mov
mov
push
idiv
nop
shl
enter
mov
xchg
sbb
sar
dec
xor
inc
div
in
adc
std
dec
sti
test
sbb
iret
cmp
test
mov
inc
mov
add
cld
inc
ret
aad
inc
cld
push
add
in
cli
jmp
call
into
mov
ja
in
push
daa
adc
sahf
test
dec
push
xchg
jne
gs
imul
xor
mov
inc
jecxz
cmp
idiv
loopne
out
daa
jmp
sar
inc
lea
cmp
push
movs
adc
std
stos
inc
add
pop
mov
fisttp
scas
call
push
jge
mov
in
aad
jmp
mov
out
ret
in
xor
xor
jge
inc
test
repnz
stos
rol
pop
add
xchg
dec
jmp
jae
add
data16
call
scas
add
sub
inc
fld
push
in
xor
mov
arpl
sub
push
push
call
stos
pop
jmp
jp
mov
(bad)
fidivr
mov
mov
aam
cmp
inc
(bad)
in
mov
lea
je
pop
sbb
sti
push
sti
addr16
inc
add
add
stc
movs
std
mov
xchg
adc
neg
(bad)
enter
add
dec
cmp
add
pushf
xor
imul
(bad)
int3
idiv
sahf
ret
out
mul
pushf
icebp
call
call
call
stos
pop
out
rcr
add
push
jge
add
mov
out
shl
(bad)
push
add
fild
sti
push
sti
add
push
(bad)
mov
je
sahf
sbb
xor
jl
xchg
adc
add
adc
mov
and
inc
add
dec
xor
ficom
push
push
sti
mov
test
add
movs
std
call
jne
aad
cld
mov
pop
movs
cmp
mov
inc
add
test
lea
adc
add
mov
(bad)
jmp
out
push
adc
fcmovnbe
push
test
call
mov
add
jmp
push
inc
add
cmps
call
add
(bad)
lock
dec
in
test
fbld
mov
out
(bad)
std
call
shl
and
adc
sbb
adc
pop
idiv
cmc
lea
into
popa
cmp
icebp
xor
cli
rcr
jmp
cmp
mov
cmp
sbb
(bad)
addr16
push
sti
(bad)
and
add
or
push
sti
dec
xchg
mov
inc
std
inc
add
and
dec
jne
fdivr
push
mov
aam
sti
mov
stos
in
pop
push
inc
sub
add
add
imul
out
mov
inc
je
mov
lea
clc
fucomp
sub
popa
call
dec
not
leave
out
imul
not
gs
cwde
in
imul
cli
setl
jmp
jne
inc
jecxz
(bad)
in
test
jmp
push
test
xor
adc
push
aas
jmp
mov
adc
jne
add
or
add
push
sti
(bad)
rol
in
popf
adc
add
push
sti
gs
in
popf
stc
jmp
stos
in
pop
mov
gs
pop
test
adc
add
push
mov
nop
adc
call
sub
add
dec
pop
cmp
int
inc
add
add
gs
loope
call
stos
data16
add
pop
fsubr
adc
jb
js
and
jecxz
pop
pop
iret
call
imul
mov
inc
sub
test
xchg
std
stos
nop
dec
cld
mov
add
arpl
call
xor
inc
jecxz
sub
test
test
mov
aam
push
in
mov
or
cmp
(bad)
stos
push
push
mov
sbb
inc
retf
cmp
mov
pop
push
mov
out
fild
xchg
popf
clc
push
div
rol
inc
fstp
dec
mov
sbb
out
int
sub
add
add
push
add
push
lea
add
popf
mov
fdivr
jge
call
cmp
cmp
add
dec
das
xor
jmp
jno
mov
push
jne
mov
pop
fisubr
push
jne
add
stos
test
mov
std
ins
std
jmp
cmp
adc
ror
(bad)
std
in
push
in
adc
adc
cmp
push
movs
test
std
stos
scas
cmp
push
sbb
jle
std
jmp
dec
call
test
jg
add
add
aaa
dec
call
cmps
leave
neg
push
push
xor
fnclex
sbb
test
adc
aas
add
add
mov
mov
pop
cdq
xor
push
cmp
sahf
cmp
jne
mov
loop
jge
test
jmp
jecxz
mov
mov
add
sub
bound
aaa
and
in
ret
dec
call
mov
or
gs
(bad)
fcmovbe
je
in
lea
xor
inc
in
inc
mov
xchg
sub
jnp
add
in
inc
cmp
call
push
add
xchg
std
add
call
pop
imul
pop
in
xchg
sub
push
rcl
or
pop
jne
push
shl
jl
mov
cmp
outs
push
stos
stos
(bad)
lea
leave
loop
xor
push
lea
inc
cld
dec
adc
add
xor
sbb
sbb
jne
add
(bad)
loop
out
xor
je
mov
cwde
std
stos
(bad)
dec
lea
jl
pop
test
xor
jge
or
aam
cvtps2pd
add
int
add
call
dec
add
popf
sahf
inc
enter
jne
lock
in
sbb
jne
push
aad
jbe
xor
sbb
mov
call
add
mov
and
inc
leave
ret
mov
add
jae
call
shl
push
xor
mov
aaa
dec
call
into
leave
mov
cmp
test
dec
push
cwde
lods
mov
imul
add
cmp
pop
cdq
lock
in
sbb
jbe
pop
mov
add
mov
inc
aam
pop
cmp
add
push
jg
out
pop
call
rcr
retf
(bad)
fdivrp
stos
mov
push
lea
xor
dec
call
adc
call
(bad)
test
movs
ficom
mov
std
stos
(bad)
dec
lea
sahf
out
lds
je
test
imul
mov
movs
fimul
inc
mov
xor
(bad)
call
inc
int
mov
inc
movs
call
mov
mov
cli
mov
inc
mov
call
jo
cli
(bad)
push
test
sbb
inc
dec
pop
inc
mov
test
(bad)
mov
xor
cli
(bad)
nop
je
and
ja
jns
cmp
lods
add
cmp
adc
sbb
jmp
jmp
test
jmp
inc
mov
cmp
(bad)
push
cmp
add
adc
pop
int
inc
int3
pushf
adc
add
add
jge
xchg
jl
xchg
mov
inc
sub
push
call
sub
(bad)
cmp
cdq
inc
or
int
jg
mov
cmp
outs
fnstcw
cmc
jne
sub
add
(bad)
push
jmp
or
call
into
mov
dec
push
mov
cwde
(bad)
cmp
push
push
or
pop
mov
lahf
mov
and
add
div
xchg
xchg
test
test
push
sar
add
out
repnz
out
push
xlat
mov
aas
mov
cmp
sub
jbe
jbe
aam
mov
shl
stos
ret
(bad)
mov
xchg
mov
call
cmps
fadd
push
out
pop
mov
add
jl
test
ret
out
mov
pop
div
lea
(bad)
cmc
jne
aas
inc
lds
xchg
ret
or
mov
std
call
retf
fs
pop
mov
add
int
call
cld
push
cs
mov
popf
jl
aam
stos
call
std
jmp
shl
add
add
adc
int3
std
stos
dec
inc
mov
push
add
out
pop
test
pop
add
xchg
test
daa
cmp
sbb
adc
xacquire
test
jne
mov
jp
add
add
pop
sti
outs
or
xchg
test
popf
adc
mov
add
rcr
rcr
xchg
repnz
les
test
xor
pop
pop
dec
ror
push
cmc
inc
icebp
std
cli
into
jns
adc
inc
rcl
inc
shr
push
loope
jno
cli
rcl
or
add
psubd
loopne
popf
xor
xchg
les
arpl
jl
and
imul
retf
cwde
sub
sub
jnp
ror
pop
test
idiv
rol
test
daa
add
push
mov
push
lea
vpshufb
add
test
cmp
dec
mov
into
push
movs
call
jns
adc
shl
retf
inc
shr
push
loope
ror
rol
mov
inc
or
cmp
mov
mov
loopne
dec
cs
(bad)
pushf
push
add
push
test
add
sub
add
xchg
jl
aad
mov
mov
cmp
retf
test
xor
xchg
lea
cmp
test
add
(bad)
retf
fwait
sub
add
addr16
retf
cmp
xor
sub
adc
aaa
adc
lea
idiv
push
loop
add
mov
add
jns
jnp
int3
sbb
movs
add
pop
add
add
add
pop
inc
push
iret
jmp
xchg
xlat
test
movs
and
dec
mov
inc
pop
adc
jmp
adc
cli
aad
jmp
adc
adc
rol
add
add
jl
cmp
mov
or
xor
stos
cmc
cmp
leave
cmp
call
sbb
jbe
div
sub
adc
jg
add
lahf
inc
cmps
(bad)
cli
test
xchg
cld
(bad)
mov
sub
inc
mov
cmp
ss
cli
inc
add
push
add
nop
adc
je
ret
loop
imul
neg
cmc
inc
jmp
adc
dec
adc
mov
mov
adc
xor
cmp
dec
call
dec
in
inc
ffree
cmc
adc
sub
out
int
aaa
add
and
jecxz
movs
push
test
and
push
adc
rcl
and
push
adc
enter
shl
mov
shl
jnp
arpl
jne
cs
inc
call
(bad)
or
mov
jns
in
push
sbb
jne
(bad)
or
movs
fwait
idiv
stos
sub
push
stos
add
bound
(bad)
sbb
xor
inc
add
sbb
or
mov
jns
imul
or
add
push
pop
add
dec
sub
movs
mov
jmp
inc
or
push
lods
sub
xor
mov
sub
(bad)
fisubr
dec
push
nop
jl
add
movs
int3
mov
mov
add
push
ret
push
xor
sub
mov
dec
xor
and
or
outs
mov
hlt
sbb
jmp
(bad)
loop
ss
sub
add
int3
mov
inc
shl
xor
jne
(bad)
dec
push
xor
daa
retf
inc
add
sub
xor
sub
les
idiv
test
push
call
sub
xchg
mov
add
inc
leave
stos
daa
mov
rcl
imul
adc
sub
add
xchg
daa
adc
test
add
push
add
dec
call
jmp
stos
or
cmp
push
out
push
aaa
or
jne
mov
repnz
mov
jp
push
adc
jmp
into
call
stos
xchg
(bad)
mov
sub
movs
call
daa
jne
add
stos
repnz
nop
rcl
(bad)
or
jo
inc
stos
dec
cwde
sub
(bad)
push
push
mov
into
ds
jne
add
hlt
cli
jmp
jbe
lds
sub
adc
jmp
sbb
mov
(bad)
int
xor
cmp
add
enter
jmp
int3
fisub
test
mov
push
daa
pop
bound
xor
enter
and
adc
idiv
dec
adc
jne
fwait
outs
mov
jne
xchg
std
push
mov
add
mov
test
add
mov
cld
dec
nop
push
sbb
mov
inc
idiv
sub
(bad)
xchg
xchg
sbb
lds
and
mov
div
cli
sti
inc
nop
push
sbb
jmp
xlat
call
xlat
cli
jmp
je
pop
movs
adc
das
or
jbe
sbb
xchg
pop
dec
push
adc
mov
mov
idiv
rcl
inc
int
mov
les
ror
xor
inc
idiv
adc
mov
stos
and
popf
push
inc
idiv
jne
push
je
(bad)
mov
lea
idiv
jge
mov
or
call
mov
mov
leave
mov
jmp
ror
test
or
and
mov
arpl
cvtpi2ps
loope
sbb
add
cmp
dec
jl
xchg
idiv
jbe
or
int3
adc
add
push
je
call
sbb
add
shl
sub
add
dec
pop
push
add
jle
fucomip
and
push
sar
mov
and
push
jl
test
mov
data16
fild
add
je
push
jle
mov
mov
and
fnstsw
lock
push
push
enter
not
inc
add
push
jne
stos
data16
fisttp
mov
or
idiv
cmp
enter
inc
mov
pop
or
adc
popf
pop
idiv
test
int3
or
push
add
jg
int3
jmp
mov
sbb
add
add
jle
lock
push
call
leave
mov
mov
push
idiv
shr
mov
pop
or
adc
gs
idiv
aam
or
xchg
test
cmp
push
push
or
mov
dec
xlat
(bad)
cmp
adc
(bad)
loopne
xlat
dec
mov
inc
int
cli
push
add
jmp
adc
add
cmc
jmp
sar
push
call
adc
fs
mov
test
idiv
add
push
dec
pop
aam
push
call
mov
cmp
(bad)
jp
into
mov
or
test
jae
std
add
stos
push
daa
jmp
mov
clc
les
or
dec
push
lock
in
push
xchg
jns
ror
not
mov
pushf
mov
call
movs
pop
add
sbb
ror
xchg
(bad)
(bad)
cmp
mov
mov
jne
add
int3
cli
jmp
ds
adc
adc
push
add
jne
call
shl
cmc
jne
or
jmp
inc
mov
lea
mov
or
(bad)
xor
shl
not
add
add
rcr
cmp
test
push
pop
mov
std
call
or
mov
call
add
sbb
test
(bad)
stos
cmp
gs
cs
popf
sbb
ret
stos
or
gs
jns
mov
sbb
add
mov
sbb
sbb
inc
pop
dec
clc
out
nop
adc
xchg
clc
or
xchg
aam
out
pop
idiv
test
add
cwde
or
test
push
inc
lock
add
push
out
adc
dec
xchg
or
xor
out
mov
inc
push
call
mov
jnp
call
add
stos
sbb
ret
test
test
sbb
ret
stos
or
add
add
ret
sub
push
inc
nop
inc
pop
fdivp
push
gs
dec
inc
dec
jbe
push
mov
inc
add
adc
jmp
ret
mov
fwait
sahf
rcl
push
mov
add
or
adc
mov
call
inc
push
inc
movs
popf
adc
add
mov
jl
adc
mov
out
xchg
push
adc
or
xchg
(bad)
(bad)
jo
loope
pop
jnp
mov
mov
sbb
mov
jp
rol
aam
mov
add
cmp
inc
mov
xchg
or
push
loop
sub
ret
shl
cmc
jne
dec
add
add
dec
push
in
add
int
lods
shl
es
int
bound
rcr
(bad)
and
fs
shl
add
cmc
add
jmp
or
je
jle
mov
adc
push
add
inc
aad
cmc
(bad)
es
jne
xchg
xchg
dec
push
div
int
mov
sbb
(bad)
add
loopne
mov
or
jne
xor
cld
lods
inc
add
int
dec
or
scas
div
push
xchg
movs
mov
shr
adc
loop
sub
shl
adc
inc
adc
jmp
sbb
fadd
std
jmp
(bad)
test
sbb
push
(bad)
aad
call
xchg
dec
(bad)
push
sbb
call
xchg
aad
mov
add
jmp
pop
sbb
mov
test
ret
mov
xchg
std
cmp
in
pop
and
jne
mov
jmp
in
mov
adc
push
test
inc
aad
js
js
bound
add
enter
add
repz
xchg
cmp
call
mov
pop
jnp
inc
out
cmp
xchg
mov
test
mov
push
add
or
lods
scas
stos
sbb
xchg
aam
test
or
sub
add
sbb
mov
pusha
add
push
lea
cmps
or
mov
jns
cdq
pop
jnp
jns
add
aam
jae
imul
push
mov
add
mov
add
mov
call
lea
pusha
mov
xor
leave
pop
inc
add
mov
sub
inc
cld
dec
(bad)
add
xor
(bad)
cmp
(bad)
cmp
stc
inc
push
add
(bad)
cwde
test
mov
pop
and
xchg
lea
or
sbb
clc
or
repnz
dec
add
inc
or
push
inc
imul
fst
call
retf
sar
ins
jne
sub
cmp
pop
fist
xor
test
fist
stos
mov
inc
movs
fcmovnb
jle
ins
inc
movs
fs
jne
imul
adc
jne
adc
mov
sub
cli
xchg
ret
or
push
pop
test
idiv
neg
add
jge
test
movs
loop
inc
sbb
adc
mov
fidivr
mov
rol
not
adc
idiv
arpl
xchg
stos
adc
mov
nop
mov
test
daa
cmps
(bad)
stos
mov
inc
dec
lea
dec
call
push
add
mov
adc
add
fwait
adc
loop
fst
test
icebp
lock
js
add
in
push
adc
inc
nop
pop
add
xchg
dec
lea
mov
inc
pop
adc
add
xchg
push
and
imul
mov
aaa
adc
and
add
add
adc
loopne
outs
or
mov
add
add
dec
push
mov
lea
push
and
lea
push
stos
addr16
xchg
dec
and
xchg
dec
and
call
adc
je
or
adc
inc
aad
inc
jno
sub
mov
inc
pop
jb
add
or
adc
and
and
and
sbb
sub
cli
pop
in
adc
pop
jno
sub
fs
adc
bound
push
mov
mov
cmp
push
add
sbb
sub
adc
adc
add
sbb
and
xor
sbb
mov
sti
call
outs
and
fidivr
and
adc
imul
and
gs
test
push
bound
pop
ins
and
push
je
jo
fnstsw
stos
pop
xor
push
add
mov
sbb
dec
div
not
call
adc
xor
sahf
outs
and
stc
bound
xor
call
pop
cmps
push
or
xchg
push
add
or
push
and
xlat
cmc
je
adc
cdq
out
adc
pop
cmp
adc
add
adc
jne
clc
and
cwde
adc
mov
jno
fs
jp
inc
popf
je
add
std
add
lea
mov
xor
sahf
jle
lea
add
ds
dec
mov
outs
aam
(bad)
sar
add
mov
(bad)
pop
or
nop
add
inc
inc
xor
daa
shr
lahf
out
push
xchg
ins
and
xchg
xchg
mov
not
push
xor
adc
bound
(bad)
jg
xchg
and
mov
not
cmps
(bad)
jnp
adc
(bad)
out
jmp
lea
push
and
add
sbb
add
sar
push
add
call
pop
test
sub
add
(bad)
pop
xor
popa
sbb
add
adc
rcl
and
cmps
add
push
jle
dec
push
jle
push
dec
sbb
jno
add
or
cmp
lock
test
stos
cs
lds
add
inc
or
loope
adc
retf
lock
inc
add
call
jl
push
(bad)
jl
jmp
xor
nop
scas
mov
mov
and
popf
add
inc
or
adc
sub
mov
call
mov
cmp
out
fisttp
dec
cmp
add
out
push
add
cwde
pushf
push
nop
or
cmp
jle
loope
add
iret
std
push
mov
out
vpsubusb
adc
push
lea
cld
add
cmp
add
lods
sti
call
rol
push
inc
cdq
scas
and
adc
cmp
inc
bound
fsub
add
out
xchg
sti
dec
add
jo
shl
sub
dec
adc
sti
jmp
xchg
push
clc
or
xchg
push
loopne
adc
scas
std
stos
xchg
mov
mov
cli
dec
inc
sub
xchg
xchg
push
sub
adc
or
jle
push
bound
sbb
add
adc
sub
lea
out
xchg
sti
inc
add
push
and
push
dec
adc
push
inc
lea
jl
sub
movs
sti
dec
aam
push
inc
lea
(bad)
jle
xor
cld
ins
sahf
test
dec
push
popf
scas
and
adc
add
push
sub
add
mov
jle
stos
(bad)
mov
jmp
xchg
jle
movs
adc
add
add
adc
(bad)
fld
jl
das
call
mov
adc
test
sbb
popa
push
in
cmc
(bad)
adc
and
lea
add
push
xchg
pop
jmp
push
leave
mov
mov
jmp
push
retf
xor
mov
inc
dec
push
aas
dec
push
add
stos
inc
push
lea
pop
sub
lods
sti
jl
test
mov
mov
add
adc
jno
in
cmc
cmp
pop
and
lds
add
inc
or
xor
adc
iret
(bad)
sti
push
dec
inc
mov
call
(bad)
adc
add
or
add
mov
push
and
(bad)
adc
lea
adc
jmp
cmp
push
add
or
xchg
cmp
push
mov
movs
cdq
push
and
gs
add
jns
mov
adc
(bad)
(bad)
mov
test
add
add
mov
mov
add
add
sar
mov
xor
mov
inc
push
(bad)
jg
xor
dec
data16
pop
adc
mov
xor
and
je
sahf
jmp
repnz
jns
sbb
add
dec
and
and
mov
ja
add
add
push
lea
inc
call
jmp
in
outs
and
mov
add
fdivrp
jp
(bad)
call
lea
fmul
mov
add
jmp
push
aaa
jge
call
jle
jne
add
cmp
sbb
xor
inc
add
mov
jle
aad
add
lea
cmps
xchg
mov
dec
push
lea
add
push
sub
add
(bad)
cmp
push
adc
jmp
and
and
sbb
imul
mov
add
mov
and
sbb
mov
add
and
xchg
mov
and
mov
push
sub
mov
inc
not
mov
and
dec
div
out
in
fcomi
lea
add
cmp
stos
jae
push
cmc
sbb
and
pop
add
mov
jp
cmp
xchg
(bad)
or
add
fst
add
dec
push
mov
add
int
sub
test
(bad)
stos
mov
pop
dec
outs
loopne
lea
mov
call
push
and
mov
add
and
xor
mov
aam
int3
call
les
mov
call
and
push
fwait
inc
les
out
call
sti
inc
jmp
cld
call
fs
xor
stos
cmp
mov
call
lock
mov
adc
jp
rol
call
jmp
fld
inc
cdq
adc
lea
dec
call
push
mov
mov
call
movs
pop
cld
inc
ja
std
jmp
(bad)
jmp
push
cwde
call
mov
cmc
jmp
aad
inc
inc
inc
lea
inc
call
adc
test
adc
pop
call
xchg
and
or
out
push
sbb
call
add
add
mov
adc
pushf
xchg
dec
mov
mov
jg
stos
in
enter
push
fmul
push
xor
pusha
ret
lea
(bad)
(bad)
jecxz
push
cwde
dec
aam
cli
pop
rol
push
in
call
mov
adc
sbb
std
stos
cmp
cwde
push
test
add
popf
mov
inc
inc
add
push
in
mov
(bad)
loop
ret
imul
xor
call
loope
inc
add
jp
popa
repz
add
add
or
out
nop
sbb
dec
mov
xor
(bad)
lods
in
pop
add
and
sub
pusha
sbb
test
and
or
fwait
jge
stos
cmp
inc
pusha
jl
inc
stos
jge
stos
xchg
inc
mov
std
xchg
inc
or
add
les
mov
inc
test
pop
add
cmp
out
pusha
sbb
fcmovnbe
push
cld
add
add
cmp
push
call
cwde
sti
inc
shr
sbb
dec
push
fcomp
sti
dec
sbb
lea
rcl
test
xor
adc
dec
sub
cmc
mov
and
push
mov
cmp
adc
dec
arpl
cmc
xor
inc
add
add
mov
dec
cld
add
pop
dec
aam
or
mov
mov
dec
jecxz
or
push
cld
add
cwde
mov
add
push
aam
mov
sbb
fcomp
mov
call
push
or
in
clc
(bad)
fiadd
in
mov
repnz
cmp
adc
adc
add
adc
mov
out
aam
test
add
int
dec
push
cmp
lds
daa
les
xchg
push
push
int3
adc
fs
add
jmp
outs
lahf
xchg
mov
dec
pop
xchg
and
adc
add
add
test
pop
pop
sbb
cmp
je
inc
sbb
xchg
sti
(bad)
jle
add
sbb
in
mov
fiadd
push
pop
add
into
loop
or
cmc
xor
adc
add
icebp
std
push
jnp
fldenv
lea
sub
add
add
in
pushw
das
daa
movups
add
lea
add
pop
pop
adc
call
adc
add
fisubr
add
pop
bound
test
push
adc
pop
add
int
je
addr16
(bad)
xchg
xor
or
sub
add
add
push
add
xor
mov
and
adc
push
sahf
int
pop
mov
sub
fst
and
sldt
mov
bound
add
std
dec
inc
lea
call
cmp
test
inc
dec
lea
call
push
pop
xchg
add
adc
add
pusha
add
imul
into
cmp
(bad)
xchg
sub
add
imul
test
cli
dec
mov
fs
mov
mov
sub
and
int
call
pop
es
add
adc
and
call
rcr
lea
sub
movs
jg
inc
cmp
dec
xchg
mov
jl
xor
inc
gs
inc
sbb
mov
and
jae
repnz
xor
pop
adc
pusha
mov
out
add
adc
jmp
xor
stos
add
nop
adc
leave
add
adc
je
add
cmp
aaa
and
cmc
mov
adc
push
pop
pushf
adc
add
test
jmp
push
and
(bad)
sar
mov
add
push
mov
jns
dec
aas
bound
fsub
call
mov
add
xchg
xor
add
ins
std
inc
add
ins
and
cwde
fs
inc
pop
sar
stos
push
aas
and
push
push
and
pop
aas
and
push
aas
and
pop
outs
and
pop
aas
and
mov
add
add
inc
cmp
add
xor
pop
scas
and
adc
add
aad
and
add
push
jg
stc
adc
add
rol
add
mov
pusha
adc
adc
or
aad
(bad)
dec
in
cmc
pop
sub
jne
push
jg
cdq
adc
add
adc
add
test
push
jg
mov
add
mov
pop
and
adc
jb
add
inc
lea
inc
sub
sbb
call
adc
add
into
sbb
adc
pop
xchg
enter
xchg
mov
jmp
pop
add
adc
inc
jno
add
add
fs
adc
inc
add
mov
jle
lock
lea
sar
std
adc
add
in
mov
out
pop
out
cmc
lea
xor
lea
xor
call
loope
add
(bad)
fsub
dec
adc
pop
pop
adc
add
xor
outs
and
mov
xor
push
nop
rol
gs
inc
sub
seto
sti
jmp
adc
(bad)
fnsave
test
xor
mov
fst
call
push
push
and
sub
test
adc
push
push
push
pop
mov
add
movs
mov
mov
mov
cli
inc
add
sub
adc
add
or
push
sbb
mov
dec
or
mov
scas
and
sbb
add
sbb
call
loopne
sbb
call
push
test
adc
mov
and
imul
aam
call
pop
(bad)
ins
add
popf
pop
mov
out
scas
jp
mov
jns
jno
cli
dec
add
xor
add
xor
addr16
push
stos
loope
clc
out
jae
xchg
inc
and
mov
mov
add
mov
ja
stos
lock
add
push
sub
(bad)
adc
mov
fsubr
fld
mov
xchg
cmps
clc
dec
push
fmul
push
add
and
and
es
pop
les
ror
call
and
stos
loope
shl
call
pop
ss
inc
push
sbb
sbb
add
xchg
push
cld
dec
push
add
fmul
push
pop
sbb
add
cmc
das
mov
call
add
sbb
add
test
popf
test
add
gs
inc
inc
push
mov
xor
popf
adc
std
push
inc
add
pop
add
mov
nop
int3
rcl
and
mov
sub
adc
dec
adc
pop
mov
xor
add
pop
jae
dec
jg
cmc
adc
add
gs
nop
aad
or
inc
and
movs
cwde
xchg
(bad)
stos
pop
jecxz
fistp
je
and
add
in
cmp
rol
cmc
je
and
jns
mov
mov
xor
pop
sbb
sub
adc
push
jne
jb
call
xor
adc
call
mov
add
dec
adc
and
lea
mov
add
add
add
or
adc
add
push
pop
xchg
xor
std
xchg
cmp
fs
aas
cmp
scas
fwait
mov
(bad)
push
out
adc
mov
in
sub
and
add
dec
inc
out
rcl
mov
add
adc
out
push
sbb
jns
inc
add
add
xchg
(bad)
sub
mov
sbb
js
in
inc
pop
ins
jo
dec
push
add
adc
in
pusha
sbb
call
test
push
mov
loop
adc
nop
shr
stos
ins
lock
xchg
push
pop
mov
mov
mov
repnz
(bad)
inc
es
adc
jmp
add
arpl
dec
inc
add
and
mov
push
daa
adc
js
mov
jne
ror
push
mov
imul
(bad)
(bad)
push
mov
lahf
out
cmp
push
sbb
adc
xchg
sub
sub
ror
bound
ret
mov
push
aaa
adc
add
ret
js
jmp
adc
xlat
add
mov
push
push
or
cli
pushf
cmp
ds
jecxz
int
inc
adc
or
dec
xchg
inc
push
mov
xor
jmp
add
fisttp
mov
xchg
push
sbb
mov
imul
pop
inc
add
adc
aad
cmp
pop
mov
jmp
xor
cdq
inc
in
mov
dec
push
cwde
push
hlt
fs
adc
add
jmp
stos
mov
mov
fs
jnp
stos
mov
test
cmc
(bad)
fdivr
dec
push
cdq
pop
cld
jne
test
jp
add
in
jae
add
out
add
lahf
adc
mov
inc
mov
cmc
push
lea
jns
cmp
cmc
push
jmp
mov
jne
inc
popf
mov
movs
mov
nop
mov
inc
mov
xchg
mov
sub
add
add
call
(bad)
adc
dec
mov
xor
mov
pop
div
push
sub
xchg
push
adc
pop
adc
add
add
sbb
lods
mov
dec
(bad)
cli
(bad)
jmp
push
(bad)
add
add
add
jmp
stos
pop
lea
or
jmp
mov
cmc
adc
push
xlat
outs
sbb
push
push
or
stos
call
cmc
jmp
test
call
fistp
jge
add
add
sub
div
in
xchg
jmp
dec
sub
out
push
cwde
mov
rol
call
mov
lea
push
push
cld
add
out
jmp
cdq
add
cdq
sbb
pop
lahf
out
push
cdq
mov
sub
cmc
push
out
mov
inc
add
test
jmp
or
loop
and
cmc
push
ds
mov
stc
out
call
add
mov
test
je
jmp
mov
push
pop
lea
jge
adc
mov
jns
jmp
test
(bad)
mov
add
call
add
int
mov
lea
mov
adc
sbb
dec
lea
aad
jmp
jmp
stos
in
adc
call
jmp
xchg
fwait
loopne
jmp
mov
mov
jmp
sahf
sub
ficom
mov
add
add
jmp
push
add
xchg
adc
test
jmp
jmp
mov
popf
cmp
xchg
push
mov
nop
in
cmc
lea
mov
mov
lods
cmc
inc
xchg
mov
dec
pop
add
loopne
mov
xchg
jmp
pushf
sbb
cmc
push
cmp
dec
mov
test
cmc
call
jmp
mov
in
cmc
pop
jle
add
call
(bad)
xchg
pop
hlt
fs
sbb
add
adc
or
or
int
and
stc
inc
fst
add
jne
mov
or
test
mov
jp
inc
mov
cmc
inc
mov
adc
mov
pop
pop
out
nop
adc
adc
inc
in
cli
call
push
out
nop
adc
cmc
xchg
ret
and
lea
xchg
sbb
add
add
xchg
xchg
pop
cld
call
fs
pop
jmp
adc
inc
mov
idiv
push
cli
mov
idiv
jp
cmp
and
pop
jmp
in
cmc
dec
inc
cld
lahf
adc
add
mov
(bad)
rol
pop
mov
rol
or
jns
mov
inc
add
pusha
sub
adc
mov
adc
add
push
dec
lea
rol
adc
dec
push
push
push
cld
add
cs
cmp
adc
lea
mov
add
push
cmc
(bad)
adc
add
mov
sti
dec
add
inc
add
test
fdivp
push
sbb
loop
es
push
fsub
(bad)
nop
fdivr
out
pop
std
dec
xchg
outs
(bad)
jmp
(bad)
jmp
jne
(bad)
ror
imul
cmc
and
lock
push
nop
(bad)
shr
pop
call
push
add
sti
jmp
call
loopne
loop
(bad)
cmc
push
add
cmc
(bad)
shr
(bad)
out
data16
call
push
mov
sbb
add
stc
pop
jmp
rcr
sub
adc
dec
pop
add
mov
add
push
fsub
nop
fadd
add
dec
cwde
sti
dec
jmp
call
lea
jae
inc
test
fdiv
push
(bad)
pop
lea
xchg
push
cld
or
imul
std
mov
jne
jp
jp
pop
adc
dec
lea
push
call
mov
call
aam
add
into
pop
adc
pop
push
jmp
in
inc
add
ret
pop
add
push
in
cdq
std
jmp
je
cs
jecxz
test
es
or
jmp
or
in
inc
add
loop
std
cmp
or
cmc
push
xor
inc
mov
aam
add
call
jne
sti
call
add
xchg
bound
cmp
(bad)
pusha
fdivr
out
data16
call
add
sbb
(bad)
out
stc
xchg
push
clc
pop
xchg
out
dec
call
add
jmp
(bad)
lea
cmc
(bad)
push
fadd
call
into
out
mov
shl
sbb
cmc
push
push
call
cmc
mov
out
call
jmp
loopne
(bad)
out
gs
push
or
inc
lea
cmc
call
push
into
dec
lea
sub
(bad)
cmp
inc
cld
pop
fmul
jg
in
push
adc
add
add
lds
jmp
jne
loopne
js
jecxz
sub
dec
add
mov
inc
cld
or
fidivr
jecxz
inc
in
lea
or
loop
mov
jp
dec
test
jl
call
lea
inc
rol
loop
sti
in
lea
imul
adc
add
imul
or
cmc
pop
dec
sti
mov
mov
push
cmp
dec
lea
pop
call
mov
popa
sbb
test
test
pop
add
rcl
in
pop
or
(bad)
shr
cld
in
add
xor
inc
test
add
in
push
cmp
call
dec
xlat
push
push
push
lea
int
cld
into
fisubr
push
xchg
mov
call
call
sbb
push
call
(bad)
std
push
fimul
mov
pusha
or
cmp
jmp
aas
dec
add
pusha
and
push
sbb
in
dec
cmc
test
jmp
hlt
inc
add
push
add
xchg
inc
aas
je
add
push
sbb
adc
call
test
jmp
hlt
inc
add
dec
lea
inc
jecxz
sbb
cmc
push
mov
pushf
std
stos
xchg
mov
pop
enter
jecxz
mov
sub
aam
loopne
mov
add
lea
(bad)
loopne
into
test
add
lds
popf
(bad)
jmp
retf
cli
add
dec
push
cmp
cld
add
ss
mov
mov
leave
sub
fs
mov
push
idiv
gs
mov
stos
push
xor
adc
int3
add
stos
int3
xchg
out
mov
aam
(bad)
call
int3
xchg
cmp
pop
lea
fsubr
clc
adc
std
mov
ds
dec
shr
mov
add
add
pop
idiv
cmp
mov
into
dec
in
adc
cld
adc
jne
mov
push
bound
sub
loop
sti
in
push
not
lea
rol
xchg
fbstp
jne
fidiv
xchg
cmp
mov
fcomp
xchg
dec
std
jmp
xlat
outs
xchg
add
fs
xchg
mov
inc
mov
ficomp
test
mov
fisttp
mov
cmc
jne
fistp
loopne
idiv
stos
fbstp
xchg
retf
in
leave
cmc
push
call
cmc
dec
popa
int
push
mov
call
test
lea
mov
call
clc
inc
push
or
cdq
cmp
xor
ds
in
les
mov
push
sub
(bad)
jmp
std
dec
mov
xor
cld
not
sub
dec
cmp
call
enter
push
mov
push
cld
add
fwait
std
stos
xchg
mov
popa
int3
(bad)
and
stc
dec
pop
push
test
jne
popf
std
push
mov
add
(bad)
shr
jge
std
inc
add
mov
test
dec
push
sbb
call
xchg
add
call
jmp
enter
in
out
(bad)
jmp
and
cmp
add
popa
pushf
mov
jns
or
inc
cld
adc
jae
mov
enter
sub
or
(bad)
mov
push
sub
mov
xchg
push
bound
sbb
loop
clc
leave
cmc
push
not
cmp
int3
dec
push
cmp
push
cld
add
ds
aam
add
mov
sub
cmc
call
add
add
gs
inc
pop
std
call
push
shr
pop
je
(bad)
fiadd
repnz
pop
mov
mov
mov
push
lds
push
les
add
mov
xor
xchg
cli
dec
push
fwait
add
adc
mov
add
mov
push
stos
cmp
and
ss
or
loop
cmp
and
out
pop
fs
or
in
dec
mov
add
out
xchg
int
push
cmc
iret
xchg
cli
lea
add
fild
sbb
adc
push
add
cwde
inc
and
mov
adc
call
cmp
and
inc
(bad)
push
mov
adc
call
push
jecxz
inc
rol
push
push
aaa
pop
nop
lea
add
jne
jb
call
std
stos
push
add
fs
inc
push
ins
std
sub
add
or
push
enter
in
data16
add
jmp
je
cmps
loop
cs
cmc
lea
das
push
rcl
add
jnp
inc
cmp
lea
push
adc
aam
and
adc
add
fldenv
mov
retf
add
aas
outs
and
fld
imul
sti
dec
cmp
jne
mov
test
bound
cmc
dec
pusha
std
(bad)
fdivr
and
adc
add
pop
mov
call
loope
inc
inc
ror
xor
nop
or
add
call
std
stos
push
add
inc
and
inc
pop
arpl
stos
nop
xchg
push
add
add
and
gs
adc
lea
loop
cs
cmc
(bad)
fst
(bad)
adc
(bad)
call
int3
cmc
mov
call
pop
dec
sbb
call
lea
shr
inc
std
push
dec
lea
aaa
call
sahf
sub
mov
add
dec
lea
adc
call
xor
sub
into
jb
fisttp
test
sti
(bad)
fnsave
ja
push
xor
or
daa
sti
dec
fdiv
push
push
jno
lds
(bad)
push
add
scas
(bad)
(bad)
sbb
mov
add
dec
pop
imul
add
addr16
push
cwde
arpl
add
sub
and
jno
and
pop
add
push
pop
add
movs
pop
mov
(bad)
rcl
adc
jno
and
pop
add
fxch
sub
fimul
mov
fisub
sub
and
into
dec
push
fidivr
add
mov
sti
dec
sub
and
shl
push
fsub
jbe
dec
inc
std
(bad)
fsubr
and
adc
add
push
cmc
call
enter
cmps
dec
push
jecxz
push
nop
sbb
fs
mov
add
scas
ins
std
stos
dec
add
inc
and
mov
addr16
add
cmp
add
stos
dec
add
inc
and
gs
std
push
mov
adc
lea
loop
sub
cmc
(bad)
rcl
xor
xchg
push
mov
adc
cmc
inc
lea
(bad)
mov
and
adc
imul
int
jno
xlat
add
add
xlat
jns
xor
add
shl
test
(bad)
int3
jbe
dec
inc
std
call
and
xchg
xor
mov
adc
adc
adc
call
push
lds
push
arpl
pop
nop
popf
adc
adc
jae
mov
add
pop
jno
stos
add
push
add
sbb
and
mov
addr16
cmp
add
sub
call
in
and
in
push
sub
or
imul
mov
push
mov
adc
call
les
or
fidivr
dec
sbb
add
jnp
je
ror
mov
add
add
test
movs
jnp
push
mov
cli
dec
test
jne
mov
test
bound
pop
add
shl
cld
(bad)
fcomp
xor
xchg
push
mov
add
mov
arpl
push
jecxz
push
nop
sbb
inc
je
mov
mov
movs
call
cwde
out
cmp
xchg
xchg
add
push
cmp
and
gs
std
push
sbb
adc
aaa
sub
mov
(bad)
adc
ltr
aam
mov
inc
dec
(bad)
loope
mov
pop
adc
call
add
jge
shr
loop
jmp
dec
lea
xor
aas
cli
cld
call
adc
push
dec
lea
mov
call
and
lahf
outs
and
jp
outs
cmp
mov
dec
or
add
sahf
inc
and
jns
mov
rol
adc
dec
mov
call
add
outs
cmc
push
push
(bad)
leave
sub
push
dec
lea
loop
xor
sub
add
adc
push
dec
lea
call
push
fsub
and
popf
ds
inc
mov
dec
jns
out
stos
aam
mov
inc
dec
(bad)
popa
mov
add
add
adc
loopne
cld
(bad)
std
lahf
shr
jecxz
jmp
adc
loope
xor
(bad)
sti
cld
call
popf
push
mov
adc
and
cld
jmp
sub
js
outs
cmp
jno
dec
(bad)
sar
add
call
pop
(bad)
pusha
mov
push
push
add
jecxz
push
nop
sbb
int3
ins
std
mov
(bad)
movs
adc
stos
(bad)
call
in
and
mov
pusha
std
cmp
add
stos
(bad)
call
in
and
gs
std
push
dec
and
test
or
mov
dec
xor
pusha
adc
pusha
mov
add
inc
lea
push
and
jge
call
mov
js
jbe
imul
inc
mov
add
jnp
cld
push
or
push
movs
pop
push
stos
sahf
outs
and
inc
call
push
cld
add
scas
lock
inc
and
inc
fwait
push
add
int
add
add
popf
push
pop
pop
or
dec
mov
sub
jne
jp
call
in
aaa
imul
cld
adc
add
mov
call
mov
movs
ret
mov
inc
lea
cld
call
sbb
fist
xchg
idiv
jmp
and
std
call
int
lea
or
cmp
push
shr
sbb
dec
lea
mov
stos
jge
ins
mov
(bad)
dec
cdq
mov
aam
es
cmc
pop
(bad)
addr16
(bad)
nop
aam
out
repnz
(bad)
jle
add
mov
jmp
dec
jmp
call
xchg
repnz
call
push
cld
call
icebp
mov
adc
push
pop
push
pop
in
xor
ins
sbb
push
add
retf
mov
jmp
push
or
xor
jmp
push
call
add
dec
adc
add
sar
fst
add
mov
bound
mov
add
fld
inc
mov
add
add
sar
gs
jns
mov
test
pusha
mov
stc
push
aaa
pusha
dec
call
popf
inc
enter
stc
add
inc
or
mov
cdq
jnp
push
jns
gs
dec
es
int3
cmp
shr
cmp
adc
(bad)
cld
inc
mov
push
cmp
ret
inc
push
int3
xor
dec
xor
popf
inc
enter
int3
aam
mov
mov
cmc
rol
add
fsubr
cmp
fwait
push
jmp
addr16
adc
xchg
in
push
inc
inc
ins
std
stos
xchg
shr
xchg
call
(bad)
loop
imul
jmp
rol
sub
cmc
adc
call
shr
adc
ins
addr16
sub
bound
sti
inc
inc
add
test
dec
xchg
arpl
call
jnp
cmc
dec
in
call
cmp
mov
dec
mov
(bad)
dec
mov
adc
jecxz
mov
cmc
sbb
sti
mov
inc
push
test
add
add
push
cmp
sti
mov
idiv
stos
mov
jne
scas
std
call
call
push
out
mov
cdq
dec
mov
shr
data16
je
jns
test
imul
sbb
lea
jns
pushf
test
sbb
fild
mov
pop
cld
cmp
shl
dec
in
mov
jns
dec
gs
jb
test
popa
add
adc
cld
int3
js
arpl
mov
jns
pushf
test
add
aam
inc
loope
sti
mov
aad
lea
lea
mov
or
rol
jmp
cmps
rcl
fdivr
cli
inc
bound
cwde
and
loop
outs
pop
cmc
push
daa
sbb
cld
or
out
bound
fstp
(bad)
ficom
jge
(bad)
cmp
or
out
cld
jmp
and
loop
dec
pop
cmc
jmp
idiv
add
call
mov
outs
stc
cdq
stos
push
push
and
push
xchg
sbb
jae
imul
call
dec
or
sub
dec
pop
add
cmp
mov
add
dec
sbb
pop
outs
rcr
scas
cmp
push
jecxz
(bad)
pop
cmc
xor
adc
stc
mov
movs
xchg
add
jae
sbb
test
cld
jmp
aas
je
push
popa
dec
call
push
pusha
cmc
jne
mov
or
mov
lea
popa
pop
test
scas
rol
(bad)
mov
shl
arpl
stos
push
or
stc
adc
in
mov
or
inc
push
push
mov
cdq
(bad)
stos
xchg
mov
add
shr
xor
cld
push
icebp
mov
aaa
cmc
cld
call
addr16
push
xor
ins
mov
push
pusha
loop
repz
pop
mov
ins
cmc
cwde
cmp
add
stos
add
jb
call
test
adc
inc
mov
adc
adc
std
pop
jb
mov
jmp
mov
push
stos
adc
rcl
mov
ror
and
out
clc
addr16
push
push
scas
inc
adc
inc
int
mov
ins
les
gs
inc
adc
xchg
and
jmp
and
push
ds
dec
push
add
push
sub
pop
nop
xchg
sbb
jne
add
fs
jne
push
jb
pop
add
dec
pop
shr
add
lea
xchg
mov
or
jb
pop
xor
std
and
add
sbb
bound
add
mov
bound
les
loopne
xchg
xor
and
(bad)
std
push
rcl
call
sbb
push
(bad)
cmc
mov
(bad)
cmc
push
adc
xor
xchg
mov
inc
pop
inc
lea
cmc
(bad)
jge
inc
cld
push
jnp
(bad)
les
cmp
dec
(bad)
loopne
(bad)
out
xchg
sti
dec
sbb
inc
pusha
std
stos
inc
bound
cmp
call
arpl
push
not
lea
test
stos
dec
bound
sbb
(bad)
cld
dec
add
idiv
stos
leave
inc
cld
xchg
jp
pusha
cmp
cmp
cli
mov
jns
jne
add
add
push
jge
adc
int
add
out
outs
xor
in
shr
xchg
xor
jmp
xchg
push
fdiv
pop
inc
fadd
pop
push
inc
test
int3
dec
bound
add
dec
in
call
push
push
scas
jmp
add
push
inc
mov
cmp
and
call
push
aam
pop
iret
mov
retf
inc
cld
data16
pop
sub
fst
add
dec
adc
mov
cmc
iret
mov
inc
mov
lea
jge
inc
cld
add
cmp
mov
push
(bad)
fadd
dec
xor
inc
cld
call
fs
inc
pop
dec
bound
cmp
sbb
call
push
not
lea
arpl
or
push
inc
aam
sbb
jne
nop
jnp
xchg
sbb
adc
sbb
inc
lods
add
lahf
push
add
adc
sbb
sti
nop
xchg
adc
test
fld
lea
loop
mov
cmc
sub
add
mov
push
dec
not
aaa
sbb
push
dec
std
call
scas
xor
imul
xchg
out
inc
lock
jmp
add
push
pop
pop
or
shl
imul
jecxz
scas
pushf
js
add
leave
idiv
cmp
add
xchg
or
add
or
jb
push
ds
adc
call
imul
int3
push
add
into
jle
mov
and
mov
mov
inc
add
or
rcr
jnp
loope
jg
fst
bound
not
push
push
test
xchg
jmp
add
dec
push
or
(bad)
je
xchg
arpl
pop
xchg
js
dec
in
mov
push
add
pop
sbb
inc
push
push
jmp
adc
inc
inc
lods
inc
clc
and
mov
lea
sbb
sahf
ins
add
ficomp
ds
xchg
cli
call
sti
cli
imul
xchg
dec
call
dec
int3
push
mov
outs
jns
jp
mov
inc
jle
ja
push
add
repz
add
mov
push
lea
lock
sub
sti
push
or
repz
mov
mov
cld
es
lock
xchg
arpl
sbb
fs
push
and
call
call
xchg
mov
pop
jmp
ins
cmc
(bad)
stos
loop
inc
dec
leave
ret
add
add
jns
push
ds
addr16
stos
mov
ror
cld
ins
cmc
jmp
stc
push
mov
mov
mov
cmp
inc
or
popa
sub
aam
out
nop
pusha
xchg
jns
fs
neg
pop
push
imul
mov
int
jl
xchg
in
call
cld
inc
add
add
mov
js
inc
cmp
dec
adc
inc
mov
ins
push
(bad)
repnz
adc
push
mov
out
lea
sub
push
xor
push
sbb
in
xor
ds
push
sbb
dec
cld
call
(bad)
push
loopne
nop
jl
pop
or
dec
push
arpl
data16
dec
lea
dec
(bad)
loopne
cld
call
push
pop
(bad)
clc
test
outs
stc
mov
jnp
(bad)
jp
jne
push
push
dec
in
call
inc
jne
sbb
fcomp
stos
sbb
add
fsubr
lea
je
mov
ja
ins
test
xchg
nop
repnz
cmp
sub
sub
out
lea
ins
cmc
push
rol
push
adc
add
in
push
jp
jne
imul
je
cmc
adc
pop
inc
call
stos
iret
(bad)
aam
adc
mov
add
inc
and
inc
xchg
std
jns
cmc
call
jb
sbb
add
(bad)
shl
push
inc
test
call
call
mov
xchg
(bad)
cmp
inc
xchg
jge
pop
cmc
or
adc
imul
push
je
cmc
adc
not
cwde
(bad)
call
test
cmp
js
adc
push
inc
aam
jns
mov
clc
push
inc
int
je
gs
pop
std
push
test
ins
cmc
push
push
pop
rol
call
pop
imul
dec
add
add
inc
bound
add
sbb
pop
(bad)
cmp
push
mov
lea
adc
sbb
cmc
inc
jmp
lock
push
(bad)
stos
mov
cmc
inc
mov
stos
mov
stc
out
(bad)
cmc
call
inc
mov
ror
call
ja
jmp
jmp
add
adc
push
mov
(bad)
jp
rcl
pop
push
(bad)
sar
cld
call
rol
push
cmp
mov
sti
push
inc
cmps
xchg
sub
mov
(bad)
rol
push
scas
mov
les
das
mov
push
sbb
nop
inc
idiv
mov
mov
bound
add
cmc
jne
rol
in
mov
std
scas
(bad)
jns
leave
mov
adc
push
lea
clc
jmp
mov
xor
cmc
adc
jne
rol
xchg
mov
cmp
mov
js
nop
sbb
lea
add
cld
(bad)
ficom
or
sbb
mov
call
mov
mov
cmc
adc
dec
(bad)
loopne
idiv
stos
mov
pop
test
dec
push
push
mov
out
mov
mov
fwait
mov
call
(bad)
loopne
mov
mov
inc
in
lea
clc
inc
add
mov
ret
(bad)
stos
mov
cmc
push
xchg
or
repz
(bad)
jle
mov
in
push
std
jmp
cmp
mov
push
lea
sub
mov
jmp
les
in
mov
dec
and
add
stos
mov
cmc
inc
jmp
loop
inc
mov
idiv
jp
mov
stos
mov
call
push
cmp
or
jecxz
jae
mov
in
or
fcmovnbe
jae
movs
inc
fcomp
dec
test
or
dec
push
mov
add
bound
jle
push
push
jmp
mov
add
ins
(bad)
xchg
push
sbb
(bad)
call
(bad)
stos
in
jb
stos
mov
(bad)
cmp
jae
stos
retf
mov
test
adc
cmp
cmc
xor
add
and
lock
xchg
or
outs
pop
(bad)
fcom
xlat
inc
nop
(bad)
inc
lea
add
add
pop
mov
jmp
call
sbb
out
dec
sub
lea
cmps
cmc
call
lea
xchg
mov
jmp
rol
shr
std
inc
inc
add
add
scas
cmc
push
out
lea
mov
push
cmp
add
(bad)
fwait
mov
push
in
push
inc
lea
xor
jge
cmc
call
into
xchg
in
mov
jmp
(bad)
cli
cdq
jnp
push
dec
mov
cmc
cs
call
dec
add
cmps
outs
enter
add
stos
sub
mov
or
mov
cmc
call
mov
jmp
cmc
mov
idiv
stos
pop
sbb
add
out
jmp
mov
push
idiv
aaa
idiv
pop
sub
mov
mov
sbb
sbb
xchg
dec
(bad)
jmp
jmp
xchg
push
jmp
cwde
mov
add
mov
lds
adc
call
cmp
stos
mov
movs
lock
lea
jne
jmp
sbb
push
push
arpl
inc
jbe
cmc
test
add
sbb
cdq
lahf
adc
push
push
pop
loop
mov
cmc
xor
cld
dec
or
fs
sbb
dec
add
sub
lea
call
add
push
add
(bad)
push
xchg
sti
mov
cmc
test
test
pop
loop
xor
cmc
add
and
jg
(bad)
fld
into
jne
out
push
lea
test
(bad)
stos
movs
dec
mov
lahf
mov
push
xor
inc
bound
sbb
inc
sub
call
cmp
jae
mov
add
xor
push
mov
dec
mov
add
mov
jle
xor
dec
mov
mov
test
jp
adc
push
push
inc
fstp
sti
(bad)
std
mov
cmc
call
pop
movs
(bad)
push
rol
jnp
std
test
call
pop
loop
sti
push
popf
push
add
stos
sbb
push
lds
add
pop
fwait
mov
sub
std
jmp
sar
pop
pop
push
add
jmp
pop
sub
add
lahf
and
cmc
or
cmp
test
dec
lea
clc
jmp
cmps
lock
test
call
and
xor
idiv
push
dec
push
add
sub
(bad)
stos
test
mov
test
idiv
stos
adc
repnz
jmp
cdq
mov
sub
std
dec
sub
or
sar
mov
jge
and
push
add
xchg
mov
push
mov
rol
call
test
pop
mov
dec
mov
fild
(bad)
clc
or
xor
call
inc
dec
inc
lea
mov
dec
push
cmp
mov
dec
jmp
mov
aas
idiv
cmp
clc
call
mov
fs
aad
call
add
push
(bad)
fs
clc
stos
mov
popf
mov
stos
stos
cmc
call
daa
stos
sub
into
push
inc
cld
sbb
dec
ror
pop
mov
jmp
stos
dec
push
dec
fstp
(bad)
inc
mov
stos
cmc
inc
ds
lea
xchg
loop
add
jae
add
movs
call
mov
inc
jecxz
(bad)
adc
adc
sti
add
(bad)
call
enter
jmp
(bad)
rcl
(bad)
cli
fwait
mov
stos
cmc
call
xchg
push
add
jmp
stos
loop
call
jmp
lods
cmc
ret
add
imul
push
push
stos
sbb
push
stos
cmc
test
test
mov
add
call
add
mov
cli
jmp
sti
imul
call
(bad)
mov
jae
into
stos
cmc
pop
or
add
inc
clc
push
add
ja
lea
inc
dec
mov
test
adc
jg
inc
adc
sub
dec
push
and
jne
lds
add
add
rol
push
pop
adc
lea
add
mov
cmp
sub
xor
push
fadd
push
add
mov
push
push
les
hlt
inc
lea
mov
add
sbb
dec
stos
(bad)
mov
ret
mov
push
mov
mov
push
(bad)
(bad)
iret
sub
cwde
push
add
enter
cli
daa
int
dec
call
aam
repnz
dec
inc
clc
cmp
or
xchg
mov
jmp
nop
mov
inc
fcomp
cli
add
(bad)
dec
call
nop
mov
or
or
fld
push
mov
dec
push
sub
inc
add
je
pop
add
jbe
repz
inc
lea
dec
dec
push
mov
cmc
adc
push
pop
jae
add
push
jmp
scas
loop
sti
test
mov
div
stos
sar
and
call
xchg
stos
jae
xor
mov
fmul
inc
add
and
inc
stos
jae
add
jmp
lock
stos
stos
add
adc
retf
sbb
ret
push
inc
retf
mov
mov
ret
(bad)
dec
fidiv
cmc
inc
test
sub
arpl
out
adc
add
xchg
or
jp
inc
(bad)
fistp
add
call
pop
push
std
stos
das
and
scas
stos
cmc
pop
fs
adc
rcl
call
sbb
rcl
cli
dec
sub
push
add
xchg
jb
adc
fadd
jmp
xchg
mov
call
sub
dec
call
dec
push
push
push
out
lea
cmc
call
call
push
sub
jmp
sub
(bad)
(bad)
dec
adc
idiv
push
push
xchg
push
sbb
call
lea
jge
sbb
push
adc
mov
jmp
dec
xor
jne
cmps
jae
xchg
dec
or
add
push
add
in
mov
imul
div
test
fmul
add
int
stos
add
or
push
pop
cld
movs
mov
adc
mov
aas
inc
add
retf
fist
and
stos
cwde
js
xchg
es
add
retf
int
add
add
mov
dec
push
lea
xor
sti
mov
fbstp
mov
int
jmp
xchg
cmp
loopne
inc
fld
pop
in
cs
call
aad
push
call
push
push
xchg
xchg
adc
mov
add
rcr
adc
pmovmskb
scas
pushf
mov
dec
inc
dec
inc
in
je
add
xchg
inc
in
inc
idiv
jmp
ror
add
cmp
call
retf
sti
add
jp
js
jnp
add
ficom
or
aam
std
mov
push
xchg
int3
sti
add
in
push
mov
js
jp
add
mov
jae
movs
jb
std
stos
inc
cmp
push
rol
call
pop
pop
mov
dec
jg
pop
jge
cmc
push
cmp
push
add
cli
mov
std
(bad)
jle
lea
mov
dec
push
cwde
cmp
std
call
mov
call
inc
dec
push
push
ret
mov
aaa
aad
out
pop
idiv
push
pop
add
add
dec
push
fcmovbe
adc
mov
push
push
mov
dec
stos
xchg
xchg
push
sbb
add
jno
inc
add
inc
cld
cld
adc
dec
sub
add
outs
mov
dec
adc
push
jmp
jmp
(bad)
ins
add
adc
add
dec
push
fcmovbe
adc
mov
adc
mov
mov
push
push
mov
test
loope
add
mov
push
mov
sbb
mov
leave
push
pop
or
push
sbb
fist
push
loop
pop
mov
cld
xor
ds
mov
push
(bad)
test
inc
inc
xchg
jb
dec
inc
pop
test
push
loop
int3
mov
test
sbb
scas
or
lds
sbb
add
mov
es
adc
not
dec
or
or
jb
(bad)
std
jmp
add
std
mov
xchg
dec
int3
dec
stos
mov
lds
inc
mov
push
add
or
or
push
cmp
pop
push
push
sub
xchg
adc
ret
add
in
mov
jmp
sbb
inc
cld
das
adc
clc
push
stos
jl
xchg
push
adc
js
mov
sub
add
inc
mov
lea
inc
not
push
int3
test
push
push
test
outs
add
std
push
add
push
jnp
xchg
mov
add
dec
dec
stos
mov
sub
mov
xor
sbb
xchg
jmp
fmul
inc
dec
sti
jae
cmc
lea
cli
arpl
push
cwde
and
mov
loop
ror
dec
mov
lea
mov
add
inc
add
xchg
dec
(bad)
and
cmc
dec
push
push
or
mov
push
push
sar
add
jbe
call
inc
or
inc
test
mov
adc
cmp
xor
fs
push
xchg
aas
lea
std
inc
repz
add
dec
lea
add
idiv
stos
popf
jle
mov
sub
cmp
(bad)
mov
xchg
inc
dec
std
stos
inc
dec
lea
shl
clc
mov
push
adc
jae
gs
std
push
inc
repz
jle
jp
push
mov
push
jmp
adc
shl
div
(bad)
retf
lea
sub
sar
retf
inc
stc
out
add
addr16
jle
xchg
adc
push
push
sbb
call
mov
push
mov
(bad)
out
jle
dec
push
stos
test
jge
int3
dec
pop
sbb
or
sbb
adc
and
dec
or
call
cmp
or
cmp
adc
sbb
popf
xchg
sar
inc
dec
cmp
and
push
inc
lea
mov
adc
psrad
std
mov
adc
jle
cld
add
or
adc
inc
movs
push
sti
mov
jns
gs
sahf
(bad)
sahf
add
add
sbb
xor
adc
jne
pop
and
mov
aaa
add
push
movs
jae
xchg
aam
and
sar
addr16
inc
add
aam
jmp
add
inc
pushf
sbb
adc
mov
pushf
out
sub
mov
adc
sbb
sub
xchg
add
dec
adc
push
xchg
inc
call
xor
jl
jge
xor
inc
adc
es
out
(bad)
dec
jp
ja
inc
add
mov
(bad)
call
or
xor
aaa
inc
mov
shl
stos
dec
mov
lea
add
adc
popf
inc
dec
push
stos
data16
inc
dec
mov
call
mov
inc
inc
pop
inc
in
clc
(bad)
jmp
add
cdq
add
adc
push
mov
xchg
loope
mov
clc
cmp
aaa
push
push
cld
mov
jns
pop
mov
and
jmp
add
test
fild
jne
mov
js
xor
add
and
adc
aas
xor
jle
popf
adc
mov
mov
jmp
fdiv
daa
repnz
add
sub
rol
xchg
mov
or
mov
or
xchg
rol
pop
add
sbb
pushf
add
xchg
add
jns
sbb
fwait
cmc
xor
sbb
mov
aad
cmp
add
mov
cli
(bad)
fst
mov
in
cmps
pop
imul
out
inc
add
xchg
jns
xchg
xchg
mov
cmp
and
pavgw
add
loop
mov
inc
add
add
or
jne
(bad)
sbb
add
out
jnp
dec
sar
jmp
or
test
jmp
shr
jb
adc
mov
outs
pop
mov
xchg
pop
or
cli
(bad)
fucomp
cmp
xlat
or
in
inc
in
jp
add
jmp
je
std
inc
add
inc
loopne
jnp
add
jmp
movs
es
jmp
outs
adc
sub
mov
jb
mov
aas
dec
add
sub
adc
call
xchg
adc
inc
mov
push
(bad)
loopne
out
test
cmc
push
stos
sub
int3
int3
test
in
out
xchg
pop
or
aaa
xor
jne
in
inc
adc
aad
add
es
push
and
inc
add
adc
mov
out
jmp
or
inc
jmp
jmp
loope
pop
cmp
and
or
jmp
sbb
adc
add
push
push
cmp
cmp
xor
mov
ficom
or
loopne
adc
and
loopne
cwde
cmc
mov
lea
push
inc
ret
jno
stos
ds
or
push
jmp
add
mov
jbe
es
rcl
call
add
sbb
mov
mov
cli
(bad)
push
cwde
out
pop
xchg
cmp
sbb
rol
inc
add
pop
cli
out
outs
cmc
inc
cmp
or
xchg
out
in
pop
ret
inc
frstor
lds
and
inc
add
xchg
mov
stc
(bad)
mov
cmp
inc
popf
sti
dec
jnp
xchg
push
push
mov
jmp
push
xchg
cmc
pop
cmp
pop
cli
imul
cmc
adc
mov
xchg
adc
cwde
xchg
sub
push
rcr
shl
in
or
cmc
jae
inc
add
jle
push
xor
xchg
xor
inc
pop
cli
inc
mov
push
and
mov
add
adc
add
int3
jmp
adc
sar
rcl
dec
xor
inc
add
lea
or
mov
add
mov
xor
dec
xchg
or
pop
adc
add
inc
push
xchg
jle
pop
jae
inc
or
fisub
push
push
pop
mov
sbb
pop
mov
add
call
mov
jnp
adc
pop
push
add
fbld
aam
xchg
jnp
jns
jnp
jns
jnp
jns
call
cld
dec
or
call
adc
add
cdq
ja
push
xchg
pusha
mov
mov
(bad)
hlt
pusha
mov
add
jnp
sbb
pusha
mov
data16
jnp
and
pop
mov
mov
pop
mov
mov
add
je
data16
fs
clc
mov
fimul
sbb
cdq
pop
add
fisub
xchg
xchg
pop
push
popf
jp
pop
xchg
jp
pop
mov
jbe
pop
(bad)
aad
add
adc
add
xchg
xchg
mov
add
jae
cmp
sub
jae
das
add
sub
pop
add
jae
pcmpgtd
jecxz
or
sbb
inc
sbb
pop
cli
mov
jbe
nop
jmp
sbb
push
dec
in
stc
fsubrp
add
pusha
dec
push
pop
pushf
loope
fld
loope
xchg
cmc
push
jge
lods
pop
add
stos
daa
not
push
enter
or
loop
add
push
xchg
cmc
mov
mov
sub
loope
dec
jge
cdq
test
test
dec
bound
pop
cli
inc
mov
mov
inc
or
push
cli
mov
sbb
rcl
bound
dec
in
stc
out
jmp
dec
push
imul
int
loop
inc
xchg
cmc
push
add
jl
addr16
pop
add
push
not
es
inc
test
jmp
mov
push
cli
sub
jl
cdq
xchg
fcomip
inc
data16
ins
shr
add
push
cli
inc
mov
mov
in
imul
not
popa
add
dec
push
stos
add
test
out
fnstsw
ins
loope
add
rcr
fs
out
push
jmp
lods
loop
imul
cmc
adc
inc
gs
push
inc
popf
mov
dec
cld
outs
fldcw
ror
popa
stos
call
push
mov
xchg
out
in
push
ret
inc
add
dec
and
mov
sbb
inc
mov
mov
push
adc
xor
ja
bound
daa
xor
jo
stos
call
inc
mov
test
add
div
js
rcr
pop
(bad)
push
mov
push
sub
loop
popf
aas
cmc
adc
add
sub
loope
lea
add
imul
rol
leave
test
sub
jp
sub
mov
jmp
add
jno
add
add
imul
dec
xor
das
fimul
add
mov
mov
add
inc
add
jmp
ret
lods
scas
jmp
adc
nop
push
in
cmc
mov
jns
out
imul
inc
lea
add
inc
fsubr
cld
cmp
shl
inc
lea
mov
clc
outs
ja
jmp
pusha
mov
test
arpl
mov
add
push
push
cli
out
xchg
sti
call
push
ja
call
add
ror
repnz
ins
fimul
dec
push
ret
add
shr
inc
loop
jecxz
cmc
cmp
add
adc
popf
adc
(bad)
fadd
cwde
cmc
push
cmc
and
add
aaa
xor
dec
test
and
call
jmp
loop
sahf
(bad)
xor
mov
inc
loop
pop
(bad)
xor
outs
pop
cmps
(bad)
fcomp
cmc
or
add
cwde
movs
ror
or
imul
enterw
imul
into
nop
mov
push
call
retf
adc
shl
mov
xor
ds
cli
push
push
call
retf
ja
imul
mov
dec
ja
mov
in
jb
jmp
(bad)
popa
dec
xor
div
in
jae
stos
push
rcl
sahf
shl
add
cwde
jbe
call
pop
loop
lea
leave
xchg
stc
sub
stos
in
push
push
mov
lea
stc
push
inc
push
xor
leave
cli
call
adc
(bad)
jmp
mov
cdq
add
call
mov
cli
(bad)
push
pushf
mov
or
cli
mov
add
mov
add
cwde
cmp
in
add
icebp
inc
add
pop
out
sbb
jmp
adc
pop
cmp
add
mov
pop
xlat
sub
mov
(bad)
stc
push
or
call
fild
add
push
out
popf
retf
movs
push
cli
mov
fdivr
lds
cmp
sbb
mov
in
inc
add
jle
pop
pop
lea
cmc
ror
sbb
push
lea
dec
(bad)
push
fdivr
out
push
xlat
inc
or
inc
rol
call
push
add
push
fild
adc
pop
push
push
xchg
push
test
sub
push
or
xchg
push
sbb
popf
and
pop
lea
out
ss
test
dec
push
cdq
jae
mov
cmp
cmp
fdiv
sbb
sbb
call
push
nop
sbb
sbb
out
call
cmc
call
adc
xor
cwde
loope
jmp
out
inc
add
out
lea
cmc
dec
push
push
(bad)
adc
add
sbb
push
xor
inc
popf
inc
mov
dec
rol
loop
sbb
cdq
inc
mov
inc
cld
xchg
in
fbstp
call
push
mov
push
sub
dec
(bad)
nop
fadd
call
fisub
aaa
push
inc
mov
pop
inc
cld
and
in
pop
test
dec
push
call
sbb
dec
push
mov
cdq
loop
int3
jmp
lea
in
bound
call
mov
call
(bad)
(bad)
push
mov
add
sbb
inc
inc
test
dec
push
cdq
mov
mov
cmc
mov
in
cmp
push
stos
pop
retf
sbb
add
push
enter
not
or
call
mov
out
fmul
mov
loope
les
jecxz
or
cmc
cmp
call
mov
add
enter
dec
cli
out
pop
sti
jmp
call
ret
mov
mov
out
pop
clc
call
mov
bound
dec
cli
mov
(bad)
bound
cli
dec
movs
sbb
std
stos
xchg
out
push
pop
mov
cmp
adc
sbb
in
imul
fdiv
call
adc
jmp
pop
mov
push
push
xchg
jae
add
mov
mov
in
inc
cmc
push
xor
push
or
push
add
sub
std
xchg
ds
ja
add
adc
inc
fimul
test
call
ffree
mov
add
add
push
adc
mov
cmp
adc
cmp
jb
sub
mov
mov
cdq
cmp
push
cli
jmp
or
dec
adc
push
sbb
push
cmp
xlat
ins
jno
mov
fisttp
xchg
dec
push
adc
sbb
add
cmp
adc
stc
cmp
out
int
or
push
cli
fisub
xchg
mov
and
cli
fisttp
ret
mov
push
pop
ficom
sbb
(bad)
mov
inc
add
call
push
adc
gs
sbb
cmp
adc
popf
push
adc
add
pop
bound
push
sbb
inc
cmp
fadd
dec
jmp
fsubr
inc
int
add
push
cli
test
nop
aaa
inc
int
or
push
cli
fstp
push
pushf
adc
add
shr
test
cdq
push
push
sub
push
mov
popf
jmp
aam
add
jno
push
dec
jl
outs
and
mov
or
sbb
dec
stos
inc
add
in
std
stos
mov
jmp
fnstcw
add
and
jns
inc
add
pop
xor
fisttp
sub
add
loop
push
adc
jmp
shl
xchg
out
push
sbb
push
mov
sahf
jmp
arpl
inc
pop
mov
add
cli
mov
ja
inc
dec
fcomp
fs
sub
movs
adc
add
dec
and
rcr
xor
xor
jb
add
push
add
mov
dec
push
adc
sub
std
xchg
jle
xchg
pop
add
add
add
loop
mov
push
jnp
pop
pop
jle
(bad)
push
add
mov
inc
(bad)
mov
jae
or
nop
xchg
mov
fucomp
mov
add
(bad)
shl
pop
adc
aad
adc
xor
or
bound
aaa
push
push
push
adc
adc
cli
and
add
out
dec
mov
push
js
adc
jmp
jmp
pop
cmc
adc
push
sub
adc
add
daa
adc
mov
sub
call
fcomp
aam
push
cli
addr16
or
add
call
add
sbb
and
call
add
sbb
and
out
mov
enter
fidivr
and
fnstcw
and
inc
cmc
je
or
(bad)
push
call
ror
add
call
xor
sbb
sbb
out
(bad)
shl
and
popa
push
adc
lds
jmp
xor
inc
fidivr
and
inc
cmc
je
add
(bad)
fcom
jge
outs
and
jmp
lea
fs
adc
ret
sbb
add
and
stos
fs
adc
add
adc
shl
sbb
inc
ss
(bad)
and
das
push
jmp
mov
adc
fcom
add
loope
pop
inc
adc
add
jmp
lea
cli
addr16
adc
add
ret
jno
push
xor
add
dec
and
inc
cmc
je
sti
dec
jmp
sub
inc
inc
mov
cld
add
jmp
add
xchg
push
inc
xchg
cli
dec
div
push
data16
push
push
jbe
push
dec
into
xchg
push
and
inc
cmc
je
inc
fs
jmp
cli
ins
add
add
sbb
pop
jne
inc
std
mov
add
popf
cmp
je
fs
mov
cmp
lea
pop
(bad)
shl
add
mov
dec
call
push
jge
jle
test
sar
mov
add
(bad)
shr
jmp
les
add
nop
jb
in
add
dec
sar
dec
push
in
adc
cli
imul
xor
add
out
cmc
push
aaa
dec
adc
mov
lea
dec
sub
inc
adc
fsub
pop
xor
aaa
(bad)
(bad)
popa
xor
push
inc
cmc
xlat
add
cmc
std
jnp
cli
sub
pop
sbb
add
xchg
xchg
push
sbb
push
push
xor
add
dec
inc
dec
push
cmp
jmp
stos
data16
rol
push
push
pusha
xchg
adc
test
call
inc
mov
push
push
stos
push
fcom
lahf
adc
xor
add
pushf
push
sub
fst
push
xor
rol
and
pop
rcr
arpl
cmps
sbb
add
test
inc
sbb
push
cli
mov
push
or
jo
add
pop
dec
mov
xor
lea
xor
push
add
add
xor
ds
cli
inc
addr16
je
sub
(bad)
push
add
lea
push
push
stos
loope
inc
jno
dec
push
stos
loope
inc
or
mov
push
push
or
bound
pop
pop
add
loope
dec
xor
and
push
push
cmps
mov
sub
mov
and
push
add
int3
addr16
inc
mov
push
ror
push
fs
push
add
int
push
pop
push
into
jecxz
lahf
daa
add
jmp
push
sahf
fst
enter
popf
inc
ins
cmp
les
idiv
loopne
out
popf
mov
dec
movs
xchg
cli
dec
mov
pushf
jmp
xchg
cli
adc
loop
popf
mov
cmp
add
mov
inc
pop
cmp
jg
call
hlt
xchg
cli
jne
xchg
jmp
in
or
mov
enter
cmp
sbb
or
or
(bad)
sbb
inc
xchg
cli
jne
xchg
jmp
push
int3
ja
cli
jae
xchg
out
les
fld
add
adc
cmc
mov
in
or
mov
cmc
pop
xchg
or
jns
and
nop
ret
inc
pop
add
mov
retf
jnp
xor
jno
mov
lock
shl
je
retf
adc
xchg
mov
jo
stos
aas
notrack
push
cmc
je
and
fild
add
and
dec
push
call
dec
mov
push
pop
sahf
or
rol
jecxz
dec
and
jns
xchg
cwde
out
cld
pop
ret
inc
lea
les
xchg
lahf
jnp
add
jo
mov
lock
ds
test
inc
xchg
mov
inc
cmp
add
pushf
push
jmp
pop
cmc
jbe
mov
and
mov
jns
std
movs
ds
test
rcr
inc
and
push
pop
xor
shr
mov
inc
pop
ret
bound
mov
bound
mov
or
or
cmc
xor
cli
mov
dec
call
cmc
call
dec
fdiv
inc
cli
imul
out
dec
mov
jo
push
cli
movs
inc
cli
jmp
sbb
shl
gs
call
adc
popf
pop
or
mov
loope
cmc
jmp
push
test
popa
xor
imul
cli
mov
jecxz
(bad)
loopne
or
popf
adc
hlt
(bad)
adc
add
sbb
inc
jge
bound
inc
and
inc
add
ins
push
call
test
bound
mov
leave
cmovns
push
cmps
(bad)
cmc
jne
mov
push
test
gs
aas
cmps
adc
xchg
pop
add
mov
or
mul
cmp
inc
add
adc
sar
out
loopne
call
pop
and
jae
ffree
adc
xchg
pop
add
popf
mov
or
shl
mov
ror
add
and
and
cli
mov
add
push
out
pop
mov
test
popa
sbb
rol
add
sub
add
mov
inc
jmp
sub
sub
out
push
call
pop
out
fstp
mov
add
push
je
xor
imul
dec
inc
add
inc
mov
or
movs
pop
cli
mov
into
and
cmc
jmp
xchg
(bad)
jge
jmp
adc
gs
add
dec
jmp
enter
(bad)
push
push
cld
out
(bad)
cmc
inc
jmp
jmp
cs
imul
dec
inc
inc
mov
int
or
xor
cli
mov
xor
loopne
call
jmp
xchg
ret
ds
pop
dec
push
aas
add
popf
pop
div
stos
dec
push
push
adc
inc
aas
jo
sub
jmp
cmp
cli
addr16
add
ja
push
inc
mov
push
add
push
adc
push
test
cmp
cmp
cmc
xor
ins
retf
int
jmp
cmp
mov
scas
call
out
mov
sub
xchg
pop
test
fdiv
std
stos
test
ins
scas
mov
jmp
dec
mov
scas
push
mov
mov
mov
pop
into
push
adc
add
test
popa
scas
mov
jmp
lea
dec
lea
loop
arpl
cmc
pop
ja
mov
test
fist
test
cmp
std
stos
and
scas
mov
jmp
adc
fwait
dec
aam
mov
push
push
add
not
lea
mov
add
mov
(bad)
rcr
add
pushf
jnp
out
adc
sub
daa
jb
cmc
xor
jmp
test
into
(bad)
push
les
sbb
jmp
cli
imul
add
and
(bad)
loopne
clc
(bad)
cmp
(bad)
fadd
push
cli
lds
jmp
sti
inc
out
fcomi
adc
fcomi
adc
test
pop
xor
stos
xchg
shl
add
cmc
push
push
fucom
xchg
in
cmc
pop
aaa
in
fs
sub
cmc
(bad)
nop
in
cld
out
sub
mov
cmc
call
push
test
aam
(bad)
cli
ss
xor
add
inc
mov
mov
daa
adc
push
and
push
(bad)
stos
jmp
mov
in
cmc
push
out
lea
xchg
push
test
outs
xor
jp
mov
popf
adc
and
add
mov
or
call
push
add
adc
xor
cmp
mov
jmp
jmp
(bad)
stos
jmp
mov
inc
cld
and
(bad)
call
push
push
cwde
pop
into
(bad)
and
std
out
sub
inc
cmp
mov
add
push
clc
call
jmp
imul
call
sbb
inc
mov
call
mov
imul
stos
in
jo
sbb
lea
mov
push
mov
push
mov
mov
inc
inc
cmc
push
popa
(bad)
cli
xchg
fwait
jl
jmp
mov
add
cwde
std
mov
loop
inc
in
cmc
mov
cdq
mov
jmp
push
fs
ss
aaa
add
call
push
imul
jmp
add
adc
xchg
add
cwde
clc
call
push
popf
jb
call
pop
aaa
adc
sbb
call
add
out
out
sub
cmc
xor
mov
jns
adc
pop
add
cli
call
or
add
adc
les
add
sbb
mov
mov
cdq
add
adc
add
sbb
in
jne
int
pop
jmp
shl
push
adc
xor
lock
pop
inc
add
pushf
push
mov
fdivr
(bad)
cld
cld
out
dec
xchg
jle
add
add
enter
fcom
(bad)
shl
pushf
add
popf
cli
push
mov
add
cli
push
outs
inc
test
(bad)
dec
add
cmc
push
(bad)
sbb
pushf
jno
(bad)
dec
scas
fidiv
cwde
jmp
dec
iret
push
cli
mov
jmp
shl
push
push
jne
cmp
mov
xor
movs
push
cli
inc
and
push
loopne
(bad)
call
data16
sbb
mov
sbb
dec
lea
add
xchg
push
xchg
sbb
and
add
repnz
dec
sub
mov
and
aad
std
(bad)
mov
and
dec
and
add
push
call
sbb
xchg
add
push
je
dec
stos
push
pop
pushf
push
add
pushf
push
add
jno
je
sub
daa
push
jmp
mov
add
xchg
(bad)
loope
xchg
add
mov
dec
call
push
addr16
call
push
ja
lea
sbb
(bad)
xor
cmp
test
cli
dec
push
sub
mov
adc
outs
and
push
pop
adc
add
xor
dec
lods
bswap
int
mov
jle
and
inc
mov
call
fwait
outs
and
lea
add
sbb
test
pop
adc
inc
add
cmp
add
call
cmp
imul
jbe
je
jmp
mov
daa
push
lea
dec
lea
adc
xchg
cmps
adc
lock
adc
cmp
and
push
adc
mov
popf
cdq
outs
and
lods
sub
test
(bad)
call
xor
cmp
adc
repz
paddw
out
dec
lea
add
jl
and
push
push
js
lea
clc
pop
adc
pop
cmc
inc
mov
jmp
fst
sub
ror
or
xchg
pop
push
pop
mov
sub
cmp
push
inc
xor
xchg
pop
push
and
mov
clc
int3
adc
add
jp
imul
add
daa
mov
add
addr16
js
nop
sub
stos
xchg
mov
sbb
add
inc
xor
fincstp
out
dec
adc
adc
add
push
pop
xchg
add
out
(bad)
loop
pop
loop
mov
cmp
adc
out
sub
call
xchg
cmc
inc
and
int
pop
jmp
cmc
dec
jp
add
and
std
call
sub
rol
push
test
push
push
movups
pop
mov
cmc
push
pop
ror
js
in
call
push
sti
jns
add
jmp
mov
xchg
jle
cmp
cmc
push
les
pusha
mov
jmp
cli
xor
(bad)
inc
or
jecxz
pop
out
push
lea
in
inc
pop
sbb
rcl
push
lea
pop
clc
call
sbb
sahf
add
dec
int
adc
call
push
test
fs
cmps
cmp
jmp
push
ja
lea
rcl
add
xchg
and
inc
and
mov
cmc
push
or
in
(bad)
fstp
push
cmp
(bad)
and
add
add
nop
jns
inc
mov
jmp
test
jp
std
stos
nop
cmp
test
pop
cld
mov
add
cmp
int3
cmc
call
(bad)
add
and
push
in
mov
dec
or
in
out
sbb
call
dec
add
lea
add
call
dec
lea
cmp
rol
call
push
(bad)
xchg
mov
fwait
retf
cmc
(bad)
adc
cld
out
sbb
push
pop
lods
inc
popf
xchg
mov
stos
retf
cmp
std
call
ror
and
jmp
leave
cmc
call
dec
test
and
dec
(bad)
fsubr
inc
add
fild
retf
fcomp
inc
jmp
in
lea
xchg
add
(bad)
cli
call
je
mov
cmc
cmp
xchg
jmp
dec
clc
dec
pushf
push
(bad)
push
loop
mov
dec
clc
(bad)
jp
pop
test
add
add
sbb
test
mov
mov
enter
clc
rol
loop
mov
pop
(bad)
loopne
test
mov
test
xor
lea
pop
xor
push
adc
loopne
add
icebp
xor
dec
inc
inc
add
add
push
test
mov
test
enter
iret
inc
cld
test
mov
les
aaa
loop
test
mov
mov
sub
cmp
clc
jmp
fnsave
or
dec
push
enter
jmp
push
jle
mov
add
clc
(bad)
cmc
call
add
jmp
or
cmp
jmp
enter
(bad)
into
call
cmp
loop
and
mov
fmul
js
loop
icebp
(bad)
cmc
ret
imul
cli
push
cli
out
xor
jmp
mov
test
add
pop
cmp
call
dec
mov
in
mov
pop
mov
lea
push
call
cmp
or
jne
cmovne
psubsb
int3
cmc
adc
push
retf
cmc
adc
jae
xor
and
mov
add
xor
pop
dec
int3
cmc
push
not
lea
fstp
idiv
retf
aaa
cmp
out
cs
(bad)
fidiv
add
push
cli
addr16
adc
adc
into
fist
lea
xor
cmc
add
std
mov
xor
call
pop
cli
inc
sbb
jo
les
fstp
shl
add
mov
(bad)
clc
dec
xor
add
lea
fist
(bad)
shl
pushf
mov
dec
shl
add
push
push
mov
xchg
dec
(bad)
nop
int3
cld
out
imul
aam
mov
mov
dec
(bad)
nop
int3
stc
out
imul
call
stc
push
push
dec
jnp
add
mov
or
mov
mov
stos
imul
dec
sub
and
push
sbb
push
or
fnstenv
pop
add
mov
jns
mov
adc
push
lea
dec
(bad)
push
int3
cld
out
addr16
(bad)
(bad)
or
add
out
addr16
dec
cmc
push
call
jmp
adc
out
cs
jmp
xchg
gs
je
lds
in
fstp
pop
add
stos
int3
push
jmp
pop
sub
adc
adc
lea
clc
jmp
rol
fadd
adc
cmp
bound
adc
imul
xor
push
pushf
mov
nop
sbb
push
repz
cld
pop
ror
push
lods
mov
jmp
cmc
mov
loop
add
inc
(bad)
sub
xlat
inc
or
push
dec
(bad)
loopne
clc
jmp
fcmovnb
inc
cmp
push
(bad)
push
mov
add
(bad)
(bad)
pop
push
(bad)
dec
xchg
mov
mov
or
lock
(bad)
call
lea
mov
and
add
cmp
popf
mov
mov
push
mov
push
lea
into
sub
call
push
test
pop
push
(bad)
(bad)
cmc
push
movs
aaa
cmp
xchg
mov
xor
inc
cld
loope
fisubr
test
dec
push
stos
mov
mov
cmc
call
push
dec
dec
add
pop
cld
test
stos
lods
int
sbb
popf
mov
push
push
mov
xchg
clc
jmp
fadd
movs
sub
cmc
(bad)
nop
fadd
call
(bad)
xor
std
cli
push
data16
sbb
push
int
std
call
lea
add
xlat
cmc
call
test
ret
(bad)
fs
cmc
push
dec
test
rol
loop
pop
sbb
push
adc
cmc
call
inc
cmc
jmp
fs
call
mov
adc
iret
jno
retf
mov
cli
dec
(bad)
push
mov
add
xor
jne
xlat
sub
cmps
in
dec
lods
scas
jnp
cmc
loopne
add
mov
jmp
jb
inc
or
and
std
stos
xchg
mov
cld
(bad)
out
push
push
push
(bad)
test
cmc
call
add
sub
aam
dec
add
cdq
aam
push
sbb
call
push
pop
add
test
sub
loop
mov
pop
jle
(bad)
inc
add
adc
add
mov
mov
inc
or
dec
rol
call
cmp
add
rol
or
sbb
add
add
push
xchg
shl
adc
mov
imul
add
jne
add
push
or
mov
aad
xor
sti
loope
cmp
mov
in
into
div
sbb
dec
push
xchg
scas
(bad)
jmp
xchg
cmp
add
or
popa
sbb
test
add
pop
cli
out
fs
inc
test
jno
inc
and
mov
cmp
rol
mov
ss
mov
aaa
adc
sbb
push
je
cli
out
dec
jnp
add
outs
jo
addr16
adc
call
repnz
cmp
call
(bad)
sbb
add
(bad)
dec
outs
and
aad
push
into
pop
cli
adc
push
dec
(bad)
repz
(bad)
jns
mov
loop
sbb
ss
sbb
add
shr
or
push
xor
stc
pop
jo
shl
je
and
std
push
aam
pop
(bad)
aam
xor
add
cli
jg
xor
loop
repnz
test
sbb
adc
sbb
jl
cli
(bad)
jo
out
pop
aam
pushf
mov
sbb
in
(bad)
jmp
inc
mov
pop
xor
dec
and
ja
bound
push
cli
test
mov
push
mov
add
cwde
fdivrp
(bad)
shl
add
arpl
adc
add
inc
jg
aad
add
push
dec
dec
mov
sahf
aam
lea
xor
mov
test
sub
sbb
or
dec
fadd
mov
cmp
inc
sub
push
push
aam
push
and
scas
cmp
jmp
cwde
cli
dec
ds
add
inc
and
xchg
push
(bad)
jmp
push
and
xchg
add
pop
bound
pop
lods
push
mov
pop
add
das
xor
(bad)
cmp
out
fstp
ds
scas
cli
daa
popf
pop
mov
xchg
lahf
add
cli
mov
cmp
mov
loopne
pop
cli
mov
cmp
mov
cmp
add
lahf
cli
test
pop
jecxz
pop
pop
mov
ror
cmp
adc
dec
xor
push
cli
test
test
inc
clc
inc
add
pop
dec
mov
add
adc
mov
push
cmp
jmp
push
adc
out
dec
push
pop
cli
mov
xor
call
push
jmp
lea
dec
pop
dec
(bad)
icebp
cmp
add
call
mov
cmp
add
add
jge
sub
test
push
xor
add
lods
aaa
sti
inc
add
xchg
pushf
push
push
or
add
mov
mov
je
hlt
mov
dec
adc
popa
cmp
add
adc
sti
dec
push
push
aas
rol
call
push
pop
inc
mov
std
scas
and
mov
add
add
xor
jnp
push
enter
pop
adc
sti
dec
cdq
push
push
sbb
add
xchg
dec
lea
(bad)
add
jmp
mov
rcr
mov
fst
pop
jno
(bad)
inc
push
mov
cld
lock
or
je
or
fist
call
add
push
xchg
push
pop
mov
add
adc
call
stos
arpl
sbb
pushf
push
adc
push
out
rol
call
pop
mov
cmc
push
adc
add
add
pop
cmc
push
ja
lea
cld
mul
jmp
push
popf
scas
and
adc
add
add
push
std
stos
inc
add
push
clc
int
add
cmp
jmp
fdivr
push
xor
je
cli
(bad)
mov
push
add
(bad)
jmp
pushf
jmp
stos
jmp
adc
call
inc
add
mov
add
pop
dec
push
pop
xchg
push
jns
mov
add
jns
inc
mov
push
in
adc
adc
pop
loop
push
lds
add
int
inc
lods
mov
jns
leave
js
inc
inc
mov
cli
daa
int
dec
mov
cli
loop
call
push
out
and
loop
(bad)
str
add
(bad)
imul
jmp
loopne
jne
in
jae
inc
mov
std
sub
cmc
push
lods
or
nop
adc
fisubr
fcomip
sbb
xor
dec
(bad)
call
or
jne
jmp
call
popf
jne
push
out
loop
sbb
inc
repnz
inc
add
or
lods
std
push
mov
or
dec
add
pop
mov
add
xor
dec
or
clc
stc
mov
push
sub
(bad)
dec
add
sbb
shr
(bad)
pushw
mov
call
xor
je
cwde
inc
or
dec
add
add
movs
sti
jmp
dec
pop
ret
rcl
dec
in
loop
(bad)
fdivp
test
or
inc
mov
in
or
jp
mov
or
dec
add
fisub
loop
cli
jmp
dec
dec
mov
inc
pop
(bad)
dec
or
add
in
jle
jno
add
push
scas
std
jmp
call
push
push
mov
call
mov
jmp
add
xlat
push
mov
dec
add
lock
mov
jmp
shl
add
stos
mov
jp
ret
lahf
sti
inc
add
fsubr
push
push
push
mov
call
mov
jmp
mov
ret
mov
mov
test
pop
inc
clc
inc
push
or
fst
call
xor
push
jle
and
inc
cmp
ins
mov
stos
xchg
jb
adc
rol
or
push
mov
add
lahf
loop
pop
fdiv
add
cli
mov
ror
or
loop
sbb
cmc
pop
and
test
out
dec
push
push
mov
adc
pop
aaa
sti
dec
pop
jmp
pop
jnp
sub
cdq
jae
xor
xchg
pop
lock
or
jle
dec
mov
add
cli
mov
add
rcl
cdq
xchg
fdivrp
daa
jmp
cli
arpl
sbb
add
adc
ret
inc
int
mov
add
adc
lds
push
sub
std
call
icebp
mov
dec
xchg
pop
and
sbb
cmp
add
add
jge
cli
(bad)
call
adc
lods
add
sahf
and
adc
add
ds
inc
loop
mov
cmc
(bad)
mov
adc
ss
adc
fchs
adc
mov
dec
jnp
call
mov
xchg
(bad)
cli
push
out
mov
cli
dec
adc
xlat
mov
adc
mov
loop
lods
jmp
lea
sbb
cmp
cwde
in
aam
in
mov
sbb
mov
rol
cld
sub
pop
adc
push
mov
add
or
(bad)
xchg
sub
add
sbb
inc
add
mov
add
cmp
(bad)
xchg
adc
ins
test
add
mov
nop
fst
add
repz
add
cmp
adc
mov
add
sub
adc
mov
add
in
cwde
add
mov
or
pop
mov
aaa
pushf
add
add
mov
mov
aaa
sahf
add
mov
addr16
inc
add
add
sbb
inc
mov
inc
mov
dec
push
jmp
and
adc
add
jmp
bound
test
pop
jmp
inc
add
mov
adc
loop
cli
mov
sub
call
out
dec
lea
pushf
push
mov
adc
(bad)
loope
adc
pop
adc
out
aad
(bad)
jle
dec
ss
(bad)
jle
dec
sub
add
out
cmc
lea
adc
inc
jnp
inc
add
adc
add
mov
jae
sub
out
int
cmp
fdiv
test
dec
jmp
inc
cmc
adc
push
push
mov
dec
cdq
xor
jne
stc
mov
sub
loope
into
icebp
in
push
mov
dec
call
xchg
inc
pop
dec
cmc
xor
jmp
rol
sbb
jmp
mov
xchg
cmp
std
out
dec
cmc
inc
fs
push
cli
mov
lahf
inc
or
fbstp
jne
dec
jmp
or
jge
dec
push
inc
cmc
adc
inc
add
loopne
inc
(bad)
in
adc
dec
cli
imul
pop
sub
push
push
xor
mov
jmp
pop
sar
and
sar
clc
stc
call
std
cmps
xchg
push
adc
inc
jmp
dec
movs
dec
cli
mov
stos
sbb
call
mov
xchg
jle
pop
adc
add
dec
loop
ss
pop
add
mov
add
int
not
push
jmp
loopne
dec
cli
inc
mov
adc
add
(bad)
jmp
push
add
pop
out
dec
jle
adc
ror
loope
stos
add
push
call
test
js
dec
cli
(bad)
loopne
out
or
sbb
xchg
loope
push
inc
bound
add
std
push
add
adc
add
sbb
jmp
sbb
sbb
jmp
pop
clc
inc
add
jns
leave
popf
out
mov
xor
push
adc
test
rcl
call
mov
inc
(bad)
inc
add
dec
jmp
dec
loop
call
sub
lea
add
sub
add
call
cmp
je
movs
inc
push
adc
or
jmp
push
adc
push
and
in
std
cmp
push
and
sbb
iret
adc
rol
sbb
add
push
pop
test
push
add
stos
add
jns
inc
add
add
cmp
push
cmp
adc
js
in
pop
push
xor
jno
xor
sbb
and
mov
inc
add
cs
not
je
inc
loop
cmp
cmc
pop
cld
jl
inc
or
out
mov
push
std
sti
push
stos
call
xor
cli
push
xor
inc
cmc
je
or
adc
or
push
cli
mov
mov
call
jbe
jmp
out
(bad)
in
adc
test
into
sub
adc
fcom
stc
aam
cli
jmp
test
gs
add
call
pcmpeqw
xchg
loop
mov
cmc
test
addr16
jnp
or
adc
enter
jmp
mov
out
enter
shr
test
cli
addr16
inc
add
dec
mov
movs
xchg
pop
jmp
ss
inc
test
fldenv
add
shl
mov
push
addr16
and
jmp
cdq
jle
add
loop
jl
cmc
push
into
js
(bad)
pusha
fsub
inc
or
push
cli
call
pop
sub
jmp
sub
inc
aad
and
jmp
jae
add
push
sub
jmp
enter
cmc
jmp
shr
daa
add
cdq
push
cli
addr16
inc
add
mov
out
jb
inc
or
sbb
add
push
inc
dec
in
xor
add
cli
inc
mov
mov
call
into
inc
add
add
adc
adc
out
in
cmp
inc
int
cmp
adc
push
pop
pop
push
pop
pop
xchg
push
mov
adc
call
sbb
cld
cwde
ret
xor
add
call
pop
xor
(bad)
loope
push
add
add
call
ror
xor
dec
adc
pop
mov
add
movs
jne
xor
js
pop
push
adc
mov
adc
out
push
sti
dec
div
call
sbb
sahf
outs
and
clc
pop
sbb
pop
push
inc
jne
pop
std
push
dec
(bad)
jmp
xor
(bad)
inc
je
dec
loop
jbe
cmc
jmp
add
push
sub
(bad)
pusha
je
inc
pop
sbb
add
or
inc
or
inc
stc
call
(bad)
idiv
xchg
inc
xor
xor
arpl
and
mov
push
rcl
cmc
xor
stos
and
lahf
shl
stc
push
add
gs
jmp
add
int3
sbb
(bad)
jp
in
es
mov
dec
(bad)
adc
sub
push
mov
stc
dec
sbb
scas
retf
idiv
adc
fs
add
jne
stc
call
jle
inc
pop
cli
cmp
xor
mov
das
ret
cmp
mov
add
and
(bad)
fisttp
loop
xchg
cmp
test
dec
(bad)
popf
ror
sbb
cmp
sbb
adc
popf
push
call
cmp
repnz
and
(bad)
call
push
inc
xor
mov
arpl
lds
add
scas
push
sbb
cs
add
and
not
stc
push
add
loop
(bad)
cwde
int3
sbb
call
dec
mov
dec
(bad)
xchg
hlt
sub
push
cld
sub
jp
leave
sub
jp
lods
in
(bad)
loope
push
jmp
add
cmp
jecxz
(bad)
in
mov
cmp
push
push
sub
and
mov
sbb
out
pop
adc
inc
add
aad
push
jle
jmp
inc
mov
mov
add
sar
mov
dec
call
je
fist
add
inc
or
adc
call
idiv
cld
mov
inc
int
loope
clc
aaa
mul
push
sub
mov
push
test
dec
jmp
sbb
adc
dec
xor
stc
mov
stos
cmps
add
inc
pop
ret
pusha
cmp
inc
dec
xor
iret
fdivr
sub
rol
or
jnp
add
mov
into
add
arpl
mov
jge
or
or
stos
lahf
icebp
cmp
lods
pop
push
mov
push
(bad)
mov
call
pushf
ds
mov
push
cmp
dec
stos
xor
push
movs
inc
and
cmp
fs
mov
add
cld
sub
inc
pop
enter
hlt
sti
dec
call
and
call
adc
dec
push
cwde
cmps
sbb
call
sbb
push
in
call
xchg
in
xchg
mov
popa
add
out
repz
inc
fdivrp
stos
xchg
mov
pushf
xor
stc
out
add
sub
sti
loope
arpl
add
mov
cmc
xor
call
shl
inc
(bad)
cmp
add
in
and
cwde
in
(bad)
mov
dec
push
jl
jge
cmp
add
sbb
jns
test
jp
cmp
jb
add
call
lea
neg
dec
leave
arpl
stos
in
jmp
sbb
add
mov
cmp
shl
sbb
fs
add
popf
adc
dec
iret
or
(bad)
call
pop
ret
bound
add
and
test
add
loope
jae
mov
call
cmova
mov
rcr
push
push
test
add
xchg
mov
outs
add
jp
ret
and
int3
adc
or
add
pop
inc
add
push
aaa
stc
dec
loop
jl
movs
pop
dec
call
adc
mov
xor
sbb
inc
popf
adc
add
or
fadd
out
mov
in
paddw
aas
sub
mov
sub
push
cdq
pop
cld
test
call
into
mov
icebp
push
test
loop
mov
leave
(bad)
cmp
test
add
pop
add
loopne
call
cwde
dec
fdivr
call
sub
jecxz
popf
out
inc
mov
ja
push
sub
je
mov
inc
add
mov
(bad)
out
add
inc
mov
aas
and
sub
arpl
mov
fadd
out
mov
loope
inc
xor
push
sbb
add
inc
push
add
add
pop
add
cmp
out
stos
sub
adc
pop
add
mov
call
jo
sar
call
gs
push
xor
je
stc
mov
jp
inc
popf
sub
aas
sar
call
push
cmp
movups
dec
add
pop
test
pop
push
add
xchg
mov
xor
mov
lahf
aas
inc
cmc
dec
inc
(bad)
cli
jne
jmp
adc
add
fisubr
sar
xchg
mov
jmp
adc
test
fdivp
(bad)
in
push
loop
int
add
sar
inc
pushf
sub
cmp
add
(bad)
mov
(bad)
adc
jmp
adc
sti
test
and
sar
movs
mov
stc
push
mov
inc
(bad)
cmp
jmp
adc
add
xchg
push
icebp
add
imul
adc
inc
dec
shl
sub
loop
sbb
sar
imul
xchg
mov
push
cli
dec
adc
call
pop
lods
sbb
and
cld
jmp
adc
xor
pop
xchg
adc
stc
sub
mov
clc
inc
out
imul
pop
add
popf
ins
std
jmp
and
inc
pop
jno
jmp
adc
add
mov
cwde
pop
add
repnz
not
stc
push
cmc
pop
push
std
cli
nop
jno
sbb
sbb
mov
adc
mov
stc
mov
jbe
nop
jmp
adc
and
leave
out
stc
push
out
jb
ret
not
cmp
loop
int
add
jbe
stc
xor
icebp
add
push
outs
imul
add
lea
js
cwde
sub
jg
sub
mov
xchg
cmp
clc
lahf
dec
xor
aaa
jecxz
dec
cwde
aas
inc
cmc
enter
outs
aad
push
adc
add
fisubr
sar
xchg
mov
add
adc
sub
sub
mov
mov
jnp
idiv
in
ds
(bad)
add
data16
inc
mov
sti
cmp
(bad)
jmp
es
jmp
stc
mov
loope
push
sub
inc
add
mov
call
sti
test
aaa
inc
add
inc
pop
std
jmp
dec
jmp
sub
add
jp
inc
or
jmp
mov
add
pop
sub
clc
fild
lods
jmp
adc
pushf
add
test
sub
inc
add
adc
clc
pop
dec
mov
ja
stc
push
call
jl
(bad)
stc
sub
add
sbb
test
aaa
inc
add
sub
dec
adc
jle
xchg
pop
clc
sub
stos
loope
adc
lods
popf
loop
sbb
(bad)
stc
imul
xor
das
pop
dec
inc
aam
inc
int
add
aam
idiv
scas
push
loope
pop
sub
ret
push
mov
add
adc
pushf
adc
jmp
sbb
fwait
cmps
sbb
pop
(bad)
stc
push
push
cmp
in
mov
cmp
call
push
cmp
jns
lds
xchg
sbb
push
xor
xor
enter
js
dec
sbb
mov
adc
add
cwde
ret
std
dec
cwde
aam
xor
xchg
jne
test
bound
mov
sbb
add
mov
mov
(bad)
stc
mov
sbb
dec
mov
mov
add
mov
sbb
push
hlt
xor
adc
fidivr
mov
and
nop
sti
call
add
ja
cmc
je
or
or
fidivr
loope
jns
imul
inc
sbb
inc
mov
test
mov
add
mov
loop
add
push
call
cmp
jecxz
mov
add
popf
sub
lds
mov
sub
aad
jp
stos
sub
cmp
sbb
mov
push
add
in
sbb
jmp
(bad)
shl
mov
out
fwait
idiv
jle
add
cwde
daa
dec
push
fwait
inc
and
mov
add
push
std
stos
daa
outs
sub
sbb
aas
sbb
test
sub
pop
mov
loope
mov
stc
dec
call
mov
push
std
stos
mov
or
sbb
ficomp
adc
fld
(bad)
jmp
inc
pop
xor
add
stos
sub
mov
shl
shl
test
adc
pop
jns
(bad)
imul
sub
inc
(bad)
idiv
push
add
test
stc
addr16
adc
add
cwde
(bad)
sar
cmp
and
sbb
dec
stos
and
pop
xor
pushf
add
add
pop
adc
fist
pushf
sti
std
lahf
sbb
pop
adc
call
(bad)
or
add
out
jmp
out
inc
cmc
or
jns
mov
je
hlt
loope
mov
neg
push
or
mov
mov
push
pop
push
xchg
sbb
xor
add
fisubr
and
call
and
inc
dec
and
add
lea
call
push
scas
loop
cmp
xor
arpl
shl
pop
mov
add
add
pop
cmp
retf
stc
xor
jg
and
push
add
into
mov
inc
add
dec
lea
add
adc
adc
add
add
xchg
mov
jg
and
jg
and
sbb
test
ret
and
loopne
adc
lea
add
mov
jp
and
or
add
mov
ins
call
stos
pop
push
adc
push
adc
add
out
adc
cli
(bad)
arpl
cwde
pop
sbb
call
sahf
xchg
sbb
(bad)
mov
in
fld
fst
call
push
cmp
fcom
add
lahf
sti
cld
call
sbb
lea
in
cmc
add
rol
mov
add
popf
idiv
inc
test
push
add
adc
out
cld
cld
(bad)
jle
add
pop
adc
xchg
pop
push
test
adc
push
xchg
mov
sbb
cwde
and
fs
stc
mov
hlt
fld
or
or
popf
add
adc
push
cmc
push
add
add
adc
fst
call
pop
push
push
push
lea
cmc
cmc
add
in
adc
push
mov
call
or
mov
call
call
push
mov
mov
and
psubsb
dec
push
xchg
lods
and
adc
add
xchg
test
add
(bad)
arpl
cwde
pop
sbb
call
cmp
add
pop
mov
xchg
in
push
sbb
sar
dec
adc
add
pop
std
call
jle
mov
repz
push
movs
adc
std
stos
xchg
in
rcl
add
out
mov
add
loope
cmp
or
test
lea
pop
call
mov
adc
xchg
repz
add
pop
pop
add
adc
add
div
sbb
jmp
add
loope
fst
push
call
je
(bad)
dec
jge
sbb
popf
xchg
test
push
push
call
mov
push
ror
add
inc
jne
jmp
xchg
mov
lea
push
mov
dec
loope
sub
imul
push
shr
stos
pop
pop
cmp
pushf
add
sbb
push
sub
xchg
mov
adc
lds
int
xchg
jle
and
adc
sbb
inc
popf
dec
jge
aad
add
fwait
sbb
or
aad
mov
in
inc
mov
adc
call
out
add
inc
and
jle
and
retf
ret
int3
inc
and
mov
and
idiv
cmps
rcr
and
xchg
jmp
or
in
xor
or
mov
sbb
dec
cmp
mov
dec
test
je
mov
test
icebp
jge
popf
adc
(bad)
in
or
mov
icebp
jge
popf
adc
mov
stc
inc
add
ja
and
xchg
mov
and
movs
add
adc
idiv
(bad)
aam
sub
sbb
add
mov
loope
push
or
or
mov
or
test
std
(bad)
fld
add
sbb
add
popa
and
inc
add
jbe
and
adc
add
dec
sbb
lea
xlat
jne
cdq
mov
call
aam
jl
outs
sbb
mov
sub
add
mov
mov
loope
push
test
hlt
and
mov
adc
add
lds
ret
mov
add
or
fnstsw
and
adc
add
adc
adc
push
jmp
mov
int
or
int3
into
cld
inc
adc
sbb
add
push
jge
cmp
sbb
(bad)
fdivr
dec
lods
and
add
sub
std
jmp
and
adc
add
xchg
sbb
adc
cmc
add
and
sbb
sbb
in
je
fsub
sub
push
test
test
adc
dec
cld
loope
push
psadbw
push
sar
add
push
aam
and
xor
call
and
adc
add
or
je
(bad)
or
pop
mov
fwait
push
std
jmp
jmp
test
sbb
inc
or
or
or
aad
mov
aam
mov
aam
call
add
data16
add
inc
and
jns
and
enter
mov
arpl
idiv
es
inc
mov
sbb
add
int3
loope
pop
or
mov
sbb
jno
std
dec
sbb
jl
les
mov
pop
lea
add
aam
call
xchg
aam
dec
xchg
lods
sbb
and
lods
sbb
push
data16
jl
adc
test
hlt
jns
fst
add
add
sbb
std
jp
test
adc
shr
mov
stos
sbb
pop
xchg
pop
add
add
jae
xor
add
fdivr
add
dec
jmp
stc
shr
mov
dec
ins
ins
and
bswap
pop
test
add
pushf
xor
add
outs
cmp
and
pop
add
fs
cmp
pop
std
stos
outs
jge
push
pop
add
inc
mov
sub
jae
mov
add
push
add
dec
pop
add
sbb
cmp
mov
add
popf
push
or
jno
sti
call
test
xchg
sbb
adc
jmp
add
push
push
call
xchg
bound
cwde
inc
sbb
mov
add
push
in
or
in
pushf
jno
cli
dec
push
and
adc
sbb
push
stc
imul
adc
sbb
adc
xor
std
mov
and
adc
sbb
les
push
sbb
test
sbb
(bad)
leave
ror
adc
std
dec
loope
xchg
sbb
lea
rcr
call
outs
idiv
call
and
lock
call
or
div
loope
jo
neg
mov
inc
std
push
inc
and
ret
shr
pop
sbb
jmp
popa
sbb
sub
lds
add
lea
(bad)
lahf
xor
jne
xor
movups
inc
and
lahf
sbb
add
add
call
loope
pop
adc
xor
add
(bad)
(bad)
loop
test
push
cmc
mov
dec
enter
lahf
clc
mov
and
sbb
add
in
mov
jbe
add
lock
sti
test
fwait
adc
dec
sahf
add
push
sbb
mov
cmp
add
xchg
and
mov
add
jmp
cmp
aaa
int3
add
sbb
xor
dec
inc
mov
call
pop
in
cmp
cdq
test
icebp
sbb
popa
rol
add
add
mov
pop
cmp
ss
add
cmps
and
or
add
push
aaa
idiv
adc
mov
lea
add
push
(bad)
and
fcom
add
int
sbb
adc
lea
movs
add
push
add
popf
sbb
add
idiv
loope
movs
add
add
call
pop
(bad)
ins
and
mov
adc
lea
cmp
call
push
dec
test
jp
sbb
push
(bad)
mov
adc
call
mov
or
mov
adc
sbb
dec
sub
push
pop
dec
lea
add
int
call
out
not
lahf
mov
adc
add
and
xchg
adc
or
sub
jne
sub
test
stc
mov
or
lock
add
aam
and
mul
jns
lds
add
sbb
add
or
inc
call
add
push
sbb
and
loope
add
fst
add
adc
add
pop
adc
add
inc
add
stc
call
adc
addr16
call
fmul
dec
add
aad
and
sbb
add
add
xor
cwde
les
add
test
dec
mov
add
adc
sbb
and
adc
add
stos
ins
and
or
adc
adc
test
iret
pop
add
jg
cmc
dec
inc
test
inc
push
mov
dec
push
add
or
add
jecxz
cmc
jmp
arpl
xor
test
call
xor
add
add
sbb
adc
jae
adc
inc
dec
(bad)
icebp
xor
pop
call
(bad)
shl
sbb
fst
add
enter
leave
daa
pop
and
add
adc
inc
(bad)
push
jne
cmp
jp
test
(bad)
outs
(bad)
lea
or
or
je
push
ins
and
jne
pop
add
pop
test
sbb
add
shl
mov
adc
cmp
xor
add
sbb
adc
cmc
add
and
adc
enter
pop
add
push
push
call
adc
lock
rol
adc
add
fisttp
or
call
aam
test
jge
sbb
adc
fs
adc
cmc
dec
ror
sbb
add
push
add
jge
test
sbb
add
jnp
sbb
push
lea
adc
fs
adc
cmc
call
or
and
push
add
or
adc
add
cmp
(bad)
fld
mov
add
int
call
call
test
cld
or
cwde
in
dec
push
sbb
call
mov
mov
stc
dec
out
or
in
dec
push
enter
pop
adc
call
jle
test
cld
ror
test
dec
push
mov
adc
call
mov
add
add
fst
test
sti
in
mov
add
cwde
sub
add
loopne
push
lea
pop
push
call
adc
and
push
xchg
and
mov
dec
and
xchg
mul
add
lea
add
mov
or
inc
call
adc
add
xor
add
mov
sbb
xchg
pop
lods
add
pop
jl
or
adc
mov
adc
add
adc
daa
fst
add
mov
add
push
jecxz
mov
fwait
test
addr16
xchg
adc
sub
add
adc
add
enter
pusha
add
adc
call
test
in
pop
adc
add
call
mov
adc
add
xchg
and
and
add
movs
aam
add
fdivr
(bad)
fnstsw
sbb
adc
push
xor
add
adc
add
adc
cmc
call
or
ins
push
cmp
and
adc
add
in
(bad)
fdivr
lahf
xor
rol
jnp
je
popf
inc
test
inc
call
and
mov
add
div
push
lea
adc
pop
pop
cmc
inc
add
pop
cmp
and
adc
add
in
(bad)
in
clc
inc
xor
jmp
and
rol
pushf
inc
test
inc
call
adc
int3
(bad)
and
and
popf
adc
push
rcl
add
inc
add
in
adc
add
int3
mov
add
and
cmp
call
lock
stos
jmp
les
xor
add
(bad)
push
ret
and
sbb
add
cli
cld
stos
inc
dec
lea
je
int
call
push
add
add
jne
cli
cld
jp
dec
lea
add
in
lea
call
push
push
lea
mov
cli
cld
stos
inc
dec
(bad)
icebp
add
add
call
push
or
add
jg
cld
jmp
add
fdiv
push
or
add
inc
dec
(bad)
loope
cmp
or
add
fcomi
push
add
add
inc
dec
lea
mov
int
call
mul
add
and
jnp
mov
out
push
add
add
mov
add
fs
add
and
adc
jb
push
sbb
add
out
mov
scas
add
add
dec
fwait
test
adc
stos
add
xor
add
push
xor
and
xor
xchg
xor
add
and
push
inc
jne
std
stos
xchg
les
inc
test
push
(bad)
push
xor
add
adc
cmc
call
in
adc
and
stc
push
fs
push
push
push
add
mov
xor
stos
xchg
les
xchg
les
dec
test
call
push
sbb
add
test
cld
cli
cdq
mov
lds
add
or
cdq
test
adc
mov
push
push
sub
inc
int
mov
add
das
call
jmp
push
(bad)
push
add
adc
call
add
dec
(bad)
stc
add
lea
test
retf
mov
mov
xor
jo
push
lea
adc
mul
sub
(bad)
xchg
sub
add
adc
add
leave
aaa
adc
cmps
sub
cmc
sbb
add
xchg
test
sbb
add
xor
inc
int
call
and
mov
add
xor
add
xor
adc
add
aaa
jl
popf
adc
stos
fcom
add
pop
sbb
add
xchg
and
push
adc
cmp
add
add
fs
add
(bad)
jecxz
test
dec
add
dec
das
div
test
cmp
push
sbb
mov
cmc
call
aaa
pop
add
adc
push
pop
xchg
and
int3
adc
push
xor
xchg
les
inc
test
inc
mov
add
add
jecxz
and
div
mov
add
sub
add
push
call
into
int3
or
or
cmp
and
dec
mov
add
out
test
and
add
ins
and
ret
inc
dec
call
pop
int3
or
add
mov
idiv
dec
int3
and
pop
je
mov
fdivr
imul
and
int
add
imul
dec
cmp
add
lea
dec
push
sbb
add
(bad)
cld
dec
and
dec
movs
dec
in
push
enter
pop
adc
call
jle
test
add
in
inc
xor
fs
les
cwde
movs
and
or
add
retf
jecxz
call
adc
or
adc
mul
xor
jnp
mov
out
add
and
adc
add
pop
je
lds
push
push
popf
adc
push
sub
lea
add
push
xor
add
dec
pop
dec
and
mov
add
jge
dec
sbb
mov
inc
div
sub
cwde
pushf
and
or
add
cmc
fdiv
jmp
jmp
test
add
or
xor
and
adc
add
rol
add
push
pop
mov
cdq
outs
pop
push
movs
and
mov
add
push
mov
pushf
pop
add
xchg
test
stos
and
pop
pop
add
fsubr
dec
mov
xor
sub
xchg
and
pop
pop
add
sub
mov
ja
push
mov
jae
add
cmp
loope
shl
add
add
int
xor
pop
into
jnp
cmp
add
mov
add
jge
int
add
(bad)
pop
add
mov
pop
xchg
add
add
add
ror
lea
call
mov
rol
xchg
mov
sbb
add
mov
dec
push
add
(bad)
lea
and
adc
stc
dec
mov
call
push
mov
loope
add
inc
and
mov
test
push
push
(bad)
loope
pop
call
dec
movs
and
pushf
adc
and
mov
xchg
pop
mov
push
add
dec
out
and
pop
lock
xor
add
call
pop
test
add
pop
je
mov
pushf
std
jmp
adc
stc
call
call
test
mov
bound
aaa
push
test
mov
bound
add
mov
test
into
test
mov
xor
(bad)
out
retf
aas
lea
xor
adc
jecxz
(bad)
jmp
pop
stc
dec
push
add
pop
push
cmp
jbe
or
sbb
not
ror
bound
dec
cmp
add
add
neg
rol
add
xor
add
push
add
xchg
pop
push
and
std
aad
and
xlat
stc
jmp
mov
push
mov
clc
sbb
test
loop
mov
clc
xor
pushf
adc
jmp
xor
mov
xor
call
add
(bad)
sbb
mov
or
push
inc
add
xor
stc
call
test
pop
dec
adc
sar
cmp
add
call
addr16
xchg
addr16
xchg
pop
and
inc
push
aaa
std
stos
mov
cmp
jmp
test
adc
add
adc
add
cdq
pop
test
pop
mov
push
and
mov
push
popa
jmp
dec
add
pop
sbb
pushf
jno
stc
dec
and
pop
mov
mov
cld
jmp
add
jb
add
in
imul
call
(bad)
bound
add
into
pop
mov
add
sub
stos
jmp
and
pop
je
ins
mov
test
dec
mov
jmp
push
add
in
aad
call
mov
bound
dec
pop
dec
and
rol
movs
mov
bound
or
and
adc
add
add
sbb
add
cli
inc
mov
add
out
not
pop
dec
and
mov
dec
push
cwde
pop
and
fcom
add
jmp
inc
test
rol
adc
sub
loop
dec
and
push
cmp
mov
or
add
xchg
in
inc
and
daa
inc
and
fnstsw
stos
in
idiv
mov
sub
imul
and
mov
out
add
fcom
push
cmc
daa
mov
sbb
xchg
test
dec
mov
push
add
push
call
cwde
mov
call
jmp
add
addr16
fucomp
cmp
sub
add
loopne
ins
jb
add
lea
call
mov
adc
add
dec
and
push
jecxz
fcom
dec
(bad)
shl
in
dec
pop
push
push
in
and
jmp
test
add
sbb
add
xchg
add
sbb
pop
add
cwde
push
and
movhps
call
lds
inc
int
test
mov
jb
add
or
add
out
das
sub
jnp
cdq
nop
test
mov
test
callw
mov
dec
push
add
fcom
push
adc
add
adc
std
jmp
inc
sbb
mov
mov
add
mov
popa
lock
adc
push
push
nop
test
sar
(bad)
(bad)
in
add
(bad)
fldenv
test
pop
stc
dec
out
adc
cmp
movs
jp
cld
stos
fs
(bad)
loope
xchg
add
mov
mov
fst
icebp
cld
sbb
mov
adc
not
dec
mov
jmp
push
icebp
cld
mov
icebp
xor
sbb
mov
shl
adc
xor
jns
jno
ja
stos
mov
and
fst
call
xchg
push
and
rcl
dec
popf
adc
not
xor
and
fs
mov
push
mov
add
mov
icebp
cld
stos
aas
ins
mov
sbb
dec
or
or
call
mov
add
sbb
add
popf
and
and
push
add
lahf
(bad)
push
jge
inc
and
add
mov
stc
dec
sbb
add
mov
dec
push
movs
dec
and
mov
dec
push
movs
mov
sbb
add
idiv
jp
bound
test
clc
cld
stos
movs
mov
add
add
lahf
and
mov
add
loope
pop
add
adc
call
(bad)
addr16
cs
cmp
scas
add
dec
ins
pop
push
test
and
sbb
sbb
call
and
adc
add
pop
and
or
es
add
movs
test
pop
add
add
in
or
add
iret
mov
test
mov
add
lea
add
lea
cli
call
mov
test
mov
adc
movs
and
pop
adc
(bad)
sar
pop
add
adc
dec
adc
ficomp
fiadd
add
test
test
adc
add
add
addr16
adc
add
int
div
dec
lea
pop
add
adc
push
hlt
call
fmul
sbb
sahf
test
sbb
add
test
rcl
imul
sbb
add
test
add
les
out
test
cwde
push
and
jge
test
mov
jnp
std
lahf
int3
(bad)
xchg
cmc
ja
fst
push
mov
add
nop
jae
test
xchg
icebp
dec
push
sbb
pop
test
cld
add
stos
add
popa
cmc
xchg
add
mov
push
inc
mov
add
mov
out
cld
cmp
dec
(bad)
loope
push
add
call
push
xchg
movs
mov
sub
add
cmc
int
cld
jmp
add
mov
push
and
add
jecxz
and
sbb
inc
add
arpl
xor
movs
mov
mov
mov
cld
push
inc
and
pop
stc
call
cld
ret
add
shr
cld
call
add
ror
pop
mov
add
dec
or
mov
mov
fucomi
stos
add
aas
jmp
mov
mov
cmc
mov
(bad)
call
setno
dec
pop
dec
call
push
xlat
je
add
cmc
call
or
pop
dec
mov
pop
mov
push
(bad)
fsub
test
movs
or
add
stos
push
div
sar
(bad)
sub
dec
push
fwait
ins
shl
xchg
inc
cld
jmp
call
push
pop
sub
cmps
push
or
test
outs
pop
(bad)
loope
push
push
add
ret
pushf
(bad)
call
popa
shl
popf
(bad)
call
dec
push
dec
mov
add
out
lea
xor
(bad)
jp
jp
test
test
add
add
popf
mov
push
jmp
and
inc
test
jmp
test
mov
jnp
sbb
dec
push
call
jno
cld
(bad)
mov
inc
std
mov
add
iret
movs
cwde
mov
stos
pushf
enter
cmc
jmp
je
add
call
call
mov
rol
int
or
push
cmp
mov
or
add
call
adc
je
inc
cdq
(bad)
call
out
call
mov
add
add
add
inc
pop
push
or
leave
cmp
xchg
shl
iret
add
xchg
enter
cmc
jmp
xchg
(bad)
call
xchg
loopne
pop
pop
in
test
int
or
mov
std
push
shl
iret
jne
jg
jp
enter
cmc
inc
add
shl
xchg
(bad)
call
push
jecxz
daa
or
test
pop
add
mov
or
je
add
jg
jmp
jmp
xchg
(bad)
call
xchg
jecxz
inc
lahf
in
test
or
pusha
mov
add
stos
inc
shl
iret
xor
xchg
enter
cmc
call
je
add
cmc
jmp
jecxz
or
clc
add
popf
add
iret
mov
mov
stos
xchg
shl
iret
inc
sub
std
sub
cmc
jmp
shl
xchg
(bad)
call
(bad)
loopne
aad
add
add
push
or
ret
xchg
call
test
cmp
shl
stc
(bad)
fst
bound
sahf
adc
stos
or
cld
loope
add
(bad)
shl
dec
and
push
push
push
test
stos
mov
jnp
xchg
adc
test
fdivp
call
jecxz
add
xor
cwde
mov
call
shr
adc
lock
add
mov
loopne
pop
cmp
push
in
(bad)
push
in
std
dec
hlt
jp
jne
push
xchg
jmp
and
sbb
imul
jg
ds
dec
and
stos
and
and
imul
fistp
rol
mov
clc
or
pop
add
push
cwde
ret
call
push
push
adc
stos
call
lock
add
pop
xchg
jne
pop
sbb
push
mov
nop
cmp
pop
div
outs
add
loop
cld
cli
daa
out
jmp
daa
test
xchg
fdiv
add
sub
cli
mov
mov
pop
xchg
sbb
sbb
add
sbb
push
mov
packssdw
push
mov
mov
mov
dec
popf
nop
dec
or
cmp
push
and
ins
mov
push
mov
stc
dec
ins
mov
add
mov
(bad)
jmp
jae
jmp
xor
sbb
lods
push
mov
test
(bad)
cmp
push
adc
ins
mov
pop
xor
repz
mov
rcl
addr16
ss
add
jmp
add
(bad)
aad
rcl
jecxz
push
dec
or
add
and
add
mov
cmps
adc
rcl
sub
out
pop
call
dec
adc
daa
xor
add
test
dec
ret
mov
pop
inc
or
out
fild
pusha
cld
jmp
out
mov
cmc
jmp
add
cmp
call
std
push
call
into
add
mov
adc
shl
dec
lea
inc
lea
add
mov
cmp
imul
frstor
idiv
mov
adc
dec
call
jmp
push
jg
cld
and
or
add
push
cwde
add
push
xor
les
add
add
aad
(bad)
cmp
cld
fisubr
shl
add
sahf
push
push
mov
call
idiv
aam
pop
call
add
jge
mov
test
ficomp
jmp
loop
(bad)
in
rol
cmp
not
loopne
sub
in
add
mov
push
pop
dec
add
test
dec
jecxz
(bad)
push
in
out
push
cmc
dec
xchg
cmp
inc
test
jecxz
adc
cld
dec
in
mov
fist
add
push
xchg
inc
aam
dec
cld
add
out
cld
mov
xchg
sbb
jge
test
xchg
cmc
jmp
retf
arpl
pop
xchg
mov
dec
jmp
add
loop
test
add
dec
(bad)
push
in
call
sahf
xlat
or
add
xchg
retf
bound
cwde
push
aam
clc
jb
jmp
fisubr
test
idiv
xchg
pop
and
test
push
mov
aam
rcl
push
call
push
xlat
or
int
add
jge
test
push
cld
or
sbb
sub
cld
or
push
sbb
outs
adc
push
loope
mov
or
xchg
(bad)
std
stos
jecxz
shl
xchg
sub
pusha
add
sbb
leave
clc
int
jge
test
test
xor
pop
xchg
add
adc
fnstsw
push
inc
and
call
push
pop
adc
jmp
aam
inc
(bad)
fld
out
add
cdq
in
push
lods
mov
in
(bad)
push
in
out
mov
inc
adc
hlt
ftst
mul
and
add
(bad)
jecxz
rol
add
retf
jne
cli
dec
in
shl
cmp
aaa
push
call
push
cmp
call
idiv
mov
jge
push
int
cmp
cmps
sar
int3
push
push
jne
and
call
cld
mov
enter
cmp
jmp
inc
sub
push
mov
popa
or
push
push
jle
mul
cli
retf
mov
sbb
add
stc
add
fnstcw
xchg
rcl
bound
mov
(bad)
cmp
add
dec
cld
or
(bad)
je
push
retf
lods
shr
push
std
fist
test
in
push
sbb
push
pushf
lods
std
stos
retf
mov
sbb
cmp
dec
push
add
das
push
add
mov
imul
adc
add
fistp
adc
leave
xor
adc
adc
add
cmp
call
pop
rol
push
mov
arpl
adc
sar
daa
int
add
and
hlt
add
push
mov
add
aaa
push
adc
add
shr
mov
scas
sub
dec
in
dec
enter
mov
mov
(bad)
(bad)
pop
xlat
or
ficom
pavgw
loopne
adc
sar
popf
psadbw
push
add
mov
fisub
mov
jnp
or
xchg
mov
(bad)
test
add
stos
retf
cli
inc
fstp
add
adc
add
call
rcr
xchg
cld
push
mov
and
adc
and
push
add
adc
push
xchg
jbe
jmp
(bad)
idiv
(bad)
lock
add
pop
cli
push
xor
xchg
les
pop
stc
mov
add
inc
cld
(bad)
jmp
push
cmp
(bad)
push
in
out
jecxz
jmp
pop
enter
test
inc
fcomi
cld
stos
cmp
lea
inc
cld
call
fsubr
js
les
es
push
add
cmp
test
add
jne
enter
add
cmp
pop
pop
outs
aam
pop
jns
test
sbb
imul
stc
fdivrp
(bad)
jle
stc
mov
sar
repnz
int
call
hlt
setno
add
or
mov
ret
pusha
std
mov
cld
dec
add
cmp
mov
sub
add
nop
ss
add
(bad)
shl
test
(bad)
idiv
in
(bad)
std
sub
pop
mov
retf
push
pavgw
btr
cmc
push
mov
jmp
(bad)
inc
(bad)
std
cli
leave
dec
call
mov
push
add
ja
test
movs
imul
cld
stos
(bad)
popa
add
retf
test
iret
test
sub
push
add
dec
mov
add
adc
mov
int
call
xchg
lods
std
call
push
cmp
out
lock
out
lods
std
add
sub
push
push
fcmovbe
and
retf
push
push
xchg
div
stos
movs
mov
pop
dec
sbb
retf
push
mov
sar
je
add
mov
int
jmp
cdq
or
add
mov
iret
and
(bad)
loopne
sti
mov
add
push
sbb
jo
loope
popf
add
lea
add
adc
add
ret
arpl
adc
add
aam
nop
adc
mov
int3
mul
ja
mov
call
int3
push
mov
sar
je
add
mov
into
idiv
xor
add
add
ss
imul
iret
pop
rol
int
mov
adc
mov
retf
test
popf
adc
push
test
add
jne
sbb
push
adc
and
mul
mov
stc
dec
loope
sbb
push
mov
aam
(bad)
jmp
pop
mov
mov
(bad)
push
or
call
imul
pop
pop
rol
(bad)
mov
pusha
jmp
retf
mov
aaa
loope
int
addr16
add
sbb
add
ret
add
adc
pop
call
mov
idiv
mov
call
add
jae
(bad)
cmp
cld
dec
push
mov
mov
fdiv
jmp
or
out
bound
(bad)
jmp
push
rol
fdivr
mov
jne
jmp
sub
test
xor
dec
push
push
add
mov
pop
call
push
into
sbb
ficom
push
jae
jmp
cmp
je
in
mov
fdiv
push
or
out
push
jno
imul
pop
rol
fdivr
mov
sbb
or
loope
pop
in
(bad)
pop
push
add
sbb
add
popa
add
add
dec
scas
inc
or
xlat
bound
add
std
add
icebp
sti
adc
push
fldcw
push
or
xlat
jecxz
sahf
aad
inc
imul
loope
popf
int
push
stos
fadd
add
ja
unpckhps
add
stos
popa
add
scas
inc
pop
int
and
fsub
add
xor
inc
call
repnz
push
es
adc
xlat
lods
shr
add
inc
and
fdivr
enter
inc
(bad)
mov
mov
mov
push
in
add
int
fsubr
mov
add
popf
lods
popa
mov
add
add
dec
add
adc
ins
aad
push
xor
cmp
push
mov
fdiv
jmp
fstp
je
inc
div
jne
or
inc
call
jmp
cmps
mov
mov
aaa
pop
jmp
or
test
(bad)
push
bound
add
lds
push
call
out
call
pop
push
popf
(bad)
std
jp
mov
ret
and
cmc
call
sbb
or
clc
call
arpl
add
or
pop
cld
add
xchg
xor
or
sbb
jmp
xchg
xor
pop
add
mov
out
mov
sar
push
add
push
xor
inc
call
push
jnp
add
pusha
xlat
cmc
jmp
cmp
je
inc
div
add
inc
call
mov
mov
sti
out
add
hlt
idiv
mov
pushw
add
push
xchg
cli
dec
dec
push
in
and
jmp
call
les
aam
cmp
in
or
std
stos
shr
call
push
mov
sbb
cmp
out
mov
jns
sbb
ror
pop
sbb
add
add
and
imul
dec
push
test
pop
jmp
sbb
push
jge
test
test
into
in
push
cmp
sar
aam
mov
push
add
std
sbb
sbb
out
mov
fstp
sbb
ror
sub
add
push
mov
arpl
add
stos
aam
sbb
sbb
bound
dec
add
(bad)
xlat
je
push
scas
in
adc
push
jmp
cmc
jmp
and
lea
out
ins
div
out
or
add
add
cli
xor
add
lahf
adc
fcomp
dec
cmp
inc
or
adc
dec
push
add
push
add
mov
push
jmp
sbb
xchg
push
add
adc
push
call
sbb
xchg
push
add
adc
add
xor
jmp
push
push
add
js
push
stos
push
cmp
pop
add
dec
imul
fcom
inc
or
out
push
not
pop
aam
adc
jmp
(bad)
imul
lea
inc
call
mov
cmp
jo
push
test
dec
lea
add
ret
mov
xor
idiv
dec
ja
jmp
test
rcl
add
xchg
lock
stos
push
not
xchg
push
inc
test
imul
cmp
cmp
(bad)
nop
aam
call
adc
and
jo
fcom
push
cwde
xchg
fdivr
cli
addr16
call
idiv
mov
or
sbb
inc
sbb
js
jmp
addr16
lea
ret
cmp
not
sub
std
call
ins
sti
push
push
sbb
push
sub
push
(bad)
shr
call
push
ror
sbb
push
call
add
out
mov
xor
cdq
inc
aam
push
cld
and
sti
loop
jmp
dec
adc
in
test
sbb
cmp
outs
test
push
(bad)
rol
push
lea
inc
mov
or
lea
hlt
jmp
call
mov
adc
mov
iret
outs
test
dec
push
sbb
(bad)
shr
call
sbb
test
and
stc
out
out
(bad)
mov
ins
test
cmc
push
jae
jmp
lea
js
inc
mov
xor
loopne
cmc
inc
add
imul
inc
test
xor
clc
cmps
adc
adc
inc
dec
inc
mov
or
imul
and
push
mov
std
mov
add
ins
idiv
fwait
adc
add
lods
std
cmp
popf
leave
ins
idiv
aam
movs
std
or
aad
pop
test
jge
call
mov
jmp
ins
idiv
jge
jge
cwde
push
push
cwde
xchg
pushf
std
stos
push
lea
inc
test
std
fwait
jge
mov
push
dec
xchg
movs
std
push
push
lea
sub
adc
lea
sbb
jmp
ins
jnp
mov
clc
mov
add
daa
cmc
jmp
ins
div
xor
(bad)
xchg
lods
sbb
dec
adc
dec
jge
std
jmp
out
pop
cld
push
imul
or
jmp
push
clc
clc
lods
adc
add
ins
or
lea
cmc
jmp
js
outs
add
mov
mov
pop
idiv
gs
jge
push
js
aas
test
sub
adc
pop
test
idiv
or
and
stos
ins
test
shl
mov
cmp
out
(bad)
fsub
mov
or
in
pop
idiv
in
jno
jmp
lea
jns
aas
add
test
loope
or
add
stos
jns
jg
ins
jnp
adc
pop
idiv
inc
xor
stc
cmps
adc
adc
inc
imul
add
out
push
push
es
add
push
call
mov
fstp
inc
add
xchg
movs
std
sub
dec
or
push
out
pop
test
call
xor
stos
imul
jge
jge
cwde
imul
cwde
xchg
pushf
std
stos
imul
sub
(bad)
cmp
test
idiv
std
mov
mov
push
dec
xchg
movs
std
push
push
lea
and
adc
adc
jmp
push
les
pop
cmc
jmp
push
je
nop
xor
(bad)
xchg
pushf
sbb
dec
pop
mov
enter
jmp
call
mov
movs
std
stos
push
add
pop
je
xchg
jmp
lods
pop
add
ret
push
add
jle
dec
popa
cmp
ins
mov
mov
pop
idiv
gs
jge
push
outs
pop
ds
sub
adc
pop
test
idiv
or
mov
mov
call
arpl
ins
or
inc
push
jecxz
mov
add
pop
not
sub
std
cli
addr16
popf
ja
not
loope
push
arpl
sti
sub
addr16
and
cld
jmp
imul
mov
cld
movs
ins
pop
ins
push
call
test
cld
stos
call
adc
stos
ins
adc
push
idiv
call
push
imul
call
add
xor
push
or
cmc
jmp
push
dec
push
cld
push
cdq
cmp
mov
int3
adc
mov
jmp
add
int
xchg
lods
push
mov
jmp
test
xor
inc
mov
std
stos
add
sub
rcl
test
lea
not
lea
nop
sub
jmp
add
idiv
int
jge
test
not
dec
mov
push
push
arpl
pop
aaa
arpl
adc
idiv
xchg
dec
cld
add
(bad)
std
push
push
jge
arpl
call
xchg
mov
mov
retf
pop
test
xchg
cld
(bad)
cmp
test
pop
adc
push
add
bound
loopne
cmc
(bad)
jmp
je
inc
div
test
or
inc
call
mov
push
mov
outs
sti
out
pop
idiv
push
sti
in
fst
dec
push
cli
call
adc
push
jne
sbb
push
jge
jns
test
popf
jbe
test
sbb
call
(bad)
loopne
cmc
jmp
push
test
fs
pop
scas
idiv
loope
pop
test
xchg
(bad)
std
jmp
mov
outs
idiv
cmc
inc
jl
mov
test
test
imul
jnp
hlt
(bad)
mov
add
arpl
(bad)
adc
call
mov
adc
fstp
test
arpl
(bad)
adc
call
push
pop
mov
test
ins
es
dec
sbb
not
xchg
or
stos
fs
(bad)
mov
xor
dec
aad
push
mov
fs
call
(bad)
aam
inc
add
jmp
ins
not
adc
call
push
cld
sub
stos
stc
cmps
adc
adc
movs
dec
ins
imul
dec
add
call
call
std
push
push
(bad)
shr
push
(bad)
adc
stc
call
ins
test
add
xor
(bad)
sar
ins
add
sbb
ror
test
lea
not
lea
mov
inc
test
mov
imul
pop
dec
mov
push
cmp
call
imul
xchg
lods
dec
push
push
lock
fwait
popa
icebp
popf
pop
add
cld
push
xchg
rcl
test
movs
dec
adc
cld
pop
pop
ds
xchg
pushf
std
sub
test
fs
cmp
jge
sbb
mov
xor
(bad)
jmp
test
push
jmp
xor
and
push
jge
add
cwde
arpl
xchg
shr
cmp
imul
jmp
push
call
dec
mov
cld
push
test
jne
je
jp
jge
test
pop
cld
dec
push
hlt
or
arpl
inc
jb
sub
lock
or
call
fmul
mov
adc
test
cld
xor
cmps
and
imul
cld
inc
test
std
sbb
mov
push
gs
add
or
pop
test
arpl
xor
add
stos
inc
test
inc
test
inc
mov
lods
sub
rcr
or
in
(bad)
sub
jmp
sbb
(bad)
nop
fs
jne
cld
call
addr16
call
push
scas
inc
or
imul
cmp
std
fwait
adc
adc
lds
call
cmp
cld
call
std
push
push
lea
cld
(bad)
jp
test
std
into
cmp
mov
(bad)
div
lea
pop
cmc
jmp
push
cld
cmp
sub
add
ins
call
push
ja
test
add
add
aas
bound
cwde
and
mov
sti
dec
ins
idiv
mov
cmc
jmp
adc
push
pop
and
call
push
pop
sbb
mov
sbb
inc
test
std
sbb
lock
push
push
sbb
mov
push
ins
aaa
call
ficom
push
sbb
in
push
push
and
in
(bad)
jmp
std
cli
imul
push
ja
test
movs
fcmovu
cld
stos
bound
cwde
and
std
stos
push
inc
cmp
not
and
std
mov
inc
sub
add
add
dec
std
push
mov
xchg
jle
test
dec
pop
jge
test
pop
xor
stos
ins
push
(bad)
mov
sub
dec
aam
push
push
test
sbb
adc
sti
inc
cmc
sbb
bound
test
xor
stos
imul
or
push
ja
test
add
movs
push
frndint
stos
aas
bound
cwde
and
mov
out
ins
not
and
call
push
sbb
mov
adc
test
dec
sbb
not
push
xor
cmp
nop
ins
cmp
dec
push
adc
add
push
test
imul
adc
sti
inc
cmc
cdq
aam
cli
aas
bound
cwde
es
stos
ins
call
push
daa
adc
push
inc
bound
push
ins
mov
arpl
es
aas
outs
ins
imul
(bad)
cmp
sub
dec
std
stos
ins
mov
mov
add
test
cmp
ins
not
xchg
xor
sub
call
ficom
jmp
push
adc
sti
dec
add
out
add
mov
not
sbb
push
out
add
push
mov
loope
aaa
mov
push
mov
loopne
inc
push
sbb
call
mov
out
test
idiv
cmp
mov
xor
sub
inc
call
(bad)
adc
or
push
jecxz
sti
dec
add
add
out
add
mov
not
sbb
inc
frndint
stos
out
add
push
inc
cdq
jge
pop
aaa
mov
idiv
push
jl
pushf
or
test
not
push
test
loop
mov
stos
mov
call
mov
add
add
jmp
xchg
clc
call
pop
add
sbb
mov
test
idiv
mov
test
add
test
arpl
dec
movs
inc
sar
stos
jecxz
add
cld
cmp
sar
stos
or
test
test
imul
dec
and
(bad)
jp
jge
sahf
adc
jge
mov
cmc
jmp
pop
and
jmp
add
mov
mov
fdivr
sbb
test
adc
dec
add
in
add
push
cld
cmp
xchg
sar
call
inc
add
mov
inc
fdivr
stos
sub
mov
cmc
dec
or
(bad)
push
mov
jmp
in
loopne
stos
or
sub
test
sbb
clc
dec
sbb
das
std
stos
mov
leave
aas
mov
push
cmps
test
mov
push
pop
iret
mov
xchg
add
xor
sbb
paddq
cmp
mov
scas
inc
sbb
mov
add
inc
sbb
mov
test
mov
dec
cld
push
dec
in
dec
std
push
call
xor
xlat
add
push
enter
mov
inc
add
pop
cmp
add
movs
test
cmp
cmp
std
or
not
sti
hlt
(bad)
jmp
std
cli
mov
push
inc
stc
mov
idiv
mov
mov
dec
mov
add
lea
mov
jmp
add
mov
imul
mov
cld
call
je
push
pushf
dec
(bad)
jp
jnp
test
mov
call
or
push
lea
jo
jmp
mov
mov
mov
(bad)
nop
mov
call
(bad)
enter
scas
idiv
adc
sti
push
add
inc
test
sub
arpl
sti
push
movs
and
cld
stos
inc
bound
cwde
in
std
cmp
not
adc
jmp
aad
push
bound
pop
popf
push
inc
jns
loope
mov
std
mov
push
sbb
mov
test
or
test
lea
not
xchg
xor
jmp
call
mov
push
sahf
test
mov
push
push
(bad)
sti
pop
mov
into
cld
stos
push
test
xor
dec
bound
dec
sahf
dec
std
push
call
push
not
test
idiv
push
(bad)
sti
cmp
into
cld
mov
not
fstp
sbb
call
lea
mov
push
test
jmp
mov
push
xchg
test
rcr
sti
cmp
adc
cld
call
(bad)
fnstenv
je
cld
cmp
test
mov
(bad)
std
movs
jge
mov
sti
pop
gs
stos
jmp
les
cmp
hlt
jmp
stos
test
or
inc
bound
ds
or
push
call
stos
add
sbb
je
nop
adc
mov
call
fdivr
pop
add
inc
test
rcr
sti
pop
movs
xchg
stos
inc
test
mov
stos
not
fdivr
pop
xor
xchg
les
stos
not
ss
std
push
mov
xor
(bad)
(bad)
cmp
mov
fcomi
call
add
add
test
mov
(bad)
call
test
mov
movs
cmc
call
call
xchg
inc
cmc
call
cmps
test
cmc
test
std
mov
test
mov
cmps
test
stos
xor
add
mov
jnp
add
call
mov
hlt
jmp
inc
lea
pop
cmc
jmp
test
aas
lea
cld
inc
mov
stos
test
clc
stos
and
mov
leave
cmc
jmp
mov
hlt
dec
cmp
(bad)
loopne
cmc
(bad)
jmp
(bad)
jmp
call
test
xor
add
dec
cmp
aam
test
push
dec
cmp
aad
test
mov
stos
idiv
pop
xchg
mov
mov
cmc
jmp
jge
push
adc
call
push
lods
div
sbb
sub
push
pop
xchg
idiv
sbb
push
sbb
push
(bad)
loopne
idiv
add
sub
(bad)
dec
popf
cmp
jmp
cld
jl
mov
stc
stos
dec
push
push
cmp
aad
stos
loope
cdq
stos
test
test
jnp
in
test
xor
pop
mov
jmp
jge
push
test
sbb
add
stos
xor
idiv
jne
fdivr
call
call
jmp
mov
lods
idiv
adc
sti
pusha
xor
cmp
or
adc
call
aam
popa
add
xchg
mov
std
mov
cmc
jmp
cmps
idiv
mov
add
stos
jnp
mov
jnp
call
aam
arpl
retf
cld
push
bound
sub
jecxz
stos
lods
call
push
test
idiv
movs
sbb
cld
stos
inc
bound
sbb
das
std
cmp
daa
add
clc
call
sbb
sub
push
fcom
dec
std
add
jmp
push
cwde
lea
std
mov
call
mov
test
or
stos
not
add
push
(bad)
and
idiv
dec
push
adc
lea
push
push
inc
cld
data16
int3
cld
mov
add
(bad)
jecxz
stos
lods
call
popf
not
adc
inc
sar
sub
add
lods
mov
xchg
(bad)
pushf
idiv
enter
cli
sbb
cwde
(bad)
xchg
cld
mov
push
cwde
mov
inc
cmp
mov
popf
test
or
add
not
push
enter
push
(bad)
loopne
push
dec
lds
push
mov
push
rcl
sti
imul
sbb
push
xor
add
lea
jmp
ja
test
rcl
sti
pusha
cmc
adc
jge
add
call
(bad)
stos
stos
call
(bad)
clc
jo
jmp
stos
test
mov
xor
std
push
lods
mov
imul
(bad)
cmc
call
xchg
dec
cld
stos
stos
or
dec
es
call
mov
adc
(bad)
cmp
test
idiv
xor
add
mov
(bad)
nop
pushf
xor
sub
cmc
call
test
not
sbb
fcomp
mov
mov
fdivr
stos
mov
(bad)
adc
cmc
(bad)
cmp
retf
cld
call
lea
cld
jmp
(bad)
call
adc
test
add
mov
add
jb
xchg
push
sbb
dec
sbb
push
inc
stos
not
jb
xchg
mov
stos
idiv
cmc
add
std
jmp
call
test
test
nop
cmp
call
cmps
mov
jbe
add
stos
test
cwde
cmps
test
push
pop
call
test
jge
lods
test
push
not
test
mov
rcr
call
stos
call
mov
cmp
(bad)
enter
jmp
loop
cmps
test
sti
call
sbb
dec
adc
fs
mov
pop
pop
mov
fs
mov
sbb
pop
mov
or
int3
scas
push
or
inc
test
push
inc
cld
add
push
std
mov
mov
adc
add
mov
add
cmp
jge
sub
push
xchg
test
pop
cmc
(bad)
jmp
movs
sbb
add
mov
(bad)
loopne
sti
out
cmc
idiv
mov
mov
xchg
jl
stos
mov
idiv
xor
and
add
adc
(bad)
idiv
std
inc
mov
push
cmp
push
mov
aas
cmc
jmp
stos
cld
push
xchg
jge
sub
cmp
lods
sbb
ins
mov
sbb
jmp
call
push
mov
iret
mov
ror
cld
call
ret
push
(bad)
adc
jl
mov
idiv
pop
push
adc
xchg
inc
mov
gs
loopne
or
pop
push
cld
(bad)
(bad)
and
mov
cmc
call
movs
dec
push
std
inc
shl
dec
bound
fsub
jnp
sub
xor
add
inc
ds
fdivr
dec
std
jmp
push
xchg
std
test
imul
add
cmp
call
sti
add
and
and
test
mov
bound
xchg
aad
or
adc
adc
push
jmp
in
(bad)
jp
xchg
lods
stos
movs
jnp
cdq
dec
dec
lea
add
rol
rcl
sti
add
repnz
ret
mov
jno
dec
cmp
(bad)
neg
xor
pusha
stc
(bad)
neg
xchg
movs
std
cli
mov
xor
and
cmp
std
stos
movs
dec
push
mov
add
stos
mov
cmp
rol
aaa
(bad)
jmp
pop
sbb
int3
or
test
add
js
imul
push
jmp
rcl
push
rcl
mov
test
cmp
push
or
push
inc
call
push
test
pop
add
jns
mul
ror
rol
jmp
mov
cdq
shl
cmp
(bad)
cmp
lahf
ror
cmp
inc
fstp
or
int
call
mov
add
pop
add
lea
call
push
sbb
iret
mov
loope
add
pop
lahf
out
aad
mov
call
push
cmp
push
call
rcl
movs
or
jo
hlt
jmp
mov
cmp
test
sahf
jle
test
or
int3
sti
or
pop
std
stos
inc
bound
pop
aam
(bad)
adc
cld
call
call
xchg
add
popa
mov
inc
cli
jl
test
test
test
loope
lea
add
cmp
jnp
push
inc
test
in
dec
std
jmp
inc
lds
inc
stc
jns
inc
or
inc
add
xchg
test
stos
xchg
add
or
mov
(bad)
jmp
add
fs
sbb
push
add
int
loope
mov
jmp
mov
cmp
hlt
call
mov
(bad)
cmp
mov
push
call
mov
ror
hlt
dec
inc
test
add
(bad)
stc
jl
call
xchg
mov
cli
xchg
push
fmul
push
call
cmc
call
mov
jno
test
test
mov
sahf
popa
std
mov
jl
cdq
mov
lea
cmc
jmp
pusha
sub
test
stos
xchg
or
cwde
mov
cmp
call
cld
dec
mov
test
test
and
dec
push
cmp
mov
js
idiv
into
push
or
cwde
xchg
hlt
cld
cli
mov
adc
mov
loope
ror
dec
cmp
pushf
mov
popf
test
mul
adc
pop
mov
push
push
jl
(bad)
jp
cmp
push
test
push
mov
mov
add
(bad)
test
sbb
and
rcl
xchg
call
inc
call
adc
dec
push
cld
inc
sar
push
cmp
fwait
dec
ror
aam
mov
ret
ds
not
int3
dec
std
cmp
loope
add
push
dec
xchg
hlt
cld
push
push
(bad)
adc
idiv
push
mov
push
sbb
call
push
mov
loope
inc
(bad)
not
adc
cld
add
dec
call
js
call
push
fmul
dec
std
jmp
movs
xchg
(bad)
not
xor
repz
mov
push
call
mov
cwde
cmc
or
cmp
cmc
call
mov
not
adc
cld
mov
add
test
sbb
or
mov
call
test
call
mov
fldcw
cld
call
inc
scas
je
push
inc
cli
call
mov
call
mov
push
mov
dec
std
stos
mov
scas
ror
jle
add
cwde
push
xchg
ss
pop
xor
sbb
adc
test
adc
add
mov
add
mov
inc
stos
std
stos
mov
push
lock
sub
dec
cwde
test
fcom
jmp
(bad)
cli
sub
(bad)
jge
jl
mov
sar
fwait
push
lea
sub
dec
in
cmp
std
in
test
imul
sbb
idiv
dec
push
and
gs
mov
js
idiv
dec
(bad)
hlt
jmp
mov
aas
cmp
add
cld
stos
std
stos
call
jmp
loop
dec
(bad)
pop
fimul
call
pop
jae
jmp
test
or
jmp
inc
mov
test
test
or
cmc
call
call
push
(bad)
cld
dec
add
push
idiv
scas
mov
mov
test
in
cld
stos
cwde
mov
call
test
sbb
int3
cld
cmp
test
sbb
idiv
hlt
pop
cli
dec
lods
jo
xchg
imul
jle
cmc
dec
add
xchg
call
push
cwde
xor
sbb
sar
stos
adc
push
test
sub
call
pop
add
xchg
icebp
mov
add
cdq
idiv
adc
stos
std
call
dec
nop
sar
cmp
jl
sub
rcl
hlt
dec
xchg
test
fdiv
lahf
std
jmp
(bad)
cli
and
test
jmp
not
repnz
lea
and
idiv
or
jmp
test
imul
cwde
mov
and
gs
mov
js
idiv
add
dec
(bad)
hlt
jmp
mov
ds
adc
add
xchg
test
jmp
jecxz
dec
cld
fcmovu
or
call
add
popa
pop
cmp
stc
imul
dec
inc
mov
test
test
mov
call
add
xchg
call
lea
cld
dec
cmp
jmp
pushf
mov
push
test
push
pop
cmc
adc
dec
std
mov
(bad)
push
xchg
cli
out
inc
idiv
xor
test
inc
out
cld
sub
mov
and
in
dec
std
jmp
inc
mov
mov
xchg
idiv
cmc
retf
mov
jge
test
xchg
dec
std
stos
sahf
mov
mov
cmp
clc
ret
cdq
sbb
sub
push
or
push
test
sub
(bad)
loopne
lea
push
mov
add
push
(bad)
adc
add
pop
fnstsw
xchg
div
loopne
cmc
(bad)
jmp
fsubr
xchg
xor
popf
mov
lea
dec
xchg
mov
xchg
not
xchg
mov
push
mov
loopne
fstp
push
push
lods
push
sbb
push
sub
xor
call
(bad)
cmp
add
es
mov
cli
cmp
mov
div
mov
stc
dec
jmp
fadd
stc
out
jge
jmp
out
jae
jne
rol
sbb
stc
das
jmp
push
stc
imul
xchg
idiv
push
sbb
mov
mov
cmp
call
(bad)
popf
mov
js
test
mov
std
popf
cmp
cld
mov
lods
mov
adc
or
popf
hlt
cld
sub
dec
call
idiv
(bad)
fstp
mov
ja
test
sar
pop
add
int3
test
pop
stc
mov
(bad)
push
call
xor
test
test
jmp
push
int
add
push
shl
call
sar
jmp
or
add
and
inc
add
jmp
lods
sar
push
test
(bad)
loopne
cmc
jmp
inc
xchg
jge
jge
sbb
not
pushf
mov
(bad)
rcl
hlt
(bad)
cli
inc
xchg
jge
jge
mov
not
pop
lods
push
cwde
pop
xchg
push
cwde
test
cld
stos
jmp
add
inc
retf
(bad)
jmp
aad
pop
inc
pop
xor
(bad)
int3
sbb
add
std
inc
(bad)
or
popf
push
div
jmp
stc
rol
add
pop
leave
call
ds
mov
cmp
test
xchg
adc
(bad)
jge
cmp
cld
dec
jmp
imul
jo
idiv
add
sahf
fmul
push
cwde
xchg
hlt
cld
stos
out
call
xchg
mov
cmp
test
sar
(bad)
mov
test
pop
stc
mov
mov
int
sti
push
in
inc
int
cmp
test
call
add
adc
hlt
call
sar
call
lea
cmc
jmp
outs
stc
dec
jl
or
test
push
adc
or
call
mov
inc
xchg
jge
jge
cwde
call
mov
lea
inc
xchg
std
cdq
jge
mov
not
push
lods
push
pop
push
xchg
push
add
pop
call
inc
jmp
stos
call
jae
push
pop
xor
(bad)
mov
add
(bad)
stc
inc
popf
sub
add
div
jmp
movs
mov
(bad)
cmp
fcomp
call
jle
mov
clc
jmp
(bad)
push
in
push
call
jge
cmp
cld
add
jge
lods
mov
shl
or
xchg
hlt
cld
stos
jmp
call
inc
fstp
bound
in
not
adc
cld
lahf
sti
xchg
retf
addr16
push
stc
mov
push
call
xor
pushf
cmp
test
jmp
rcl
hlt
inc
add
add
add
jl
call
adc
(bad)
mov
push
jl
mov
test
adc
call
mov
lea
cmc
jmp
jmp
(bad)
std
fwait
jge
cwde
jmp
push
dec
lea
hlt
(bad)
jp
xchg
std
fwait
jge
add
mov
not
cmps
lods
push
sbb
hlt
cld
stos
in
xor
(bad)
vcvtsi2sd
jae
(bad)
pop
xor
(bad)
dec
sbb
add
inc
pop
sub
add
cmps
stc
mov
out
inc
in
not
popf
dec
std
stos
jmp
inc
test
fcomip
push
pop
movs
leave
push
add
xchg
movs
cmc
and
jmp
cs
sbb
lea
sti
(bad)
jp
loope
fcmovnu
test
stc
inc
dec
cwde
in
dec
push
mov
shl
sar
jns
adc
inc
loope
(bad)
fdiv
push
fsub
cmps
std
jmp
test
add
(bad)
inc
add
shl
mov
call
test
(bad)
jmp
add
mov
in
(bad)
dec
add
cdq
jle
test
in
test
std
lea
js
not
out
std
stos
fmul
adc
xchg
cmp
fdiv
push
add
call
in
dec
lea
adc
in
(bad)
jmp
call
sahf
aam
cmp
fs
and
mov
add
push
add
or
sbb
retf
dec
lea
idiv
call
dec
push
add
enter
jmp
jmp
cmc
jmp
jmp
mov
lock
iret
and
inc
xor
sub
add
fdivr
out
sar
push
or
mov
shr
mov
push
(bad)
mov
std
clc
inc
add
jmp
push
lahf
cmc
jmp
and
cwde
jmp
push
mov
jmp
inc
add
out
jns
test
fdiv
dec
call
mov
lea
lods
cmc
(bad)
cmp
test
jmp
jge
or
not
loope
std
add
jmp
(bad)
jmp
inc
xchg
dec
xchg
xchg
mov
std
call
adc
int3
mov
stc
cmp
inc
loope
mov
add
leave
call
(bad)
call
loopne
sbb
std
dec
idiv
std
call
add
and
mov
xchg
xchg
dec
and
call
call
idiv
(bad)
fdivr
es
jmp
test
push
cmp
(bad)
test
mov
push
call
cld
dec
loop
or
mov
cmc
jmp
pop
jge
add
mov
test
adc
(bad)
push
popf
cmc
jmp
stc
dec
pop
jge
js
test
add
adc
add
lea
mov
pushf
cmc
jmp
sbb
popa
or
test
in
test
xchg
jge
call
lea
nop
mov
inc
add
in
dec
xchg
jge
test
not
lea
and
push
lea
sti
dec
jecxz
call
dec
int3
and
push
cmp
mov
jne
enter
xchg
ror
mov
inc
std
stos
inc
xchg
inc
mov
sti
div
xor
xchg
les
loope
push
cmc
add
push
in
call
jle
cli
mov
ret
test
out
imul
or
push
inc
adc
stos
inc
clc
lea
cmps
push
xor
stos
fst
adc
inc
pop
add
add
bound
add
in
call
sbb
add
xchg
lods
std
stos
in
add
in
idiv
pop
push
stc
sysexit
mov
pushf
sbb
test
jecxz
test
xchg
mov
lea
dec
xchg
int
jl
test
not
add
jecxz
lea
cmc
jmp
in
idiv
or
fistp
std
fiadd
fcomp
idiv
push
int3
and
or
call
in
not
xchg
jl
stos
in
(bad)
mov
lods
cmc
jmp
mov
jp
dec
dec
jl
pop
aas
cli
mov
add
ins
clc
(bad)
jmp
call
push
cmc
add
cmp
mov
in
setno
push
call
adc
jl
test
test
in
and
mov
push
call
mov
or
out
jmp
daa
out
mov
cmp
(bad)
mov
dec
push
add
cmp
lea
push
push
xor
aas
cli
push
in
jmp
shl
inc
test
in
cmp
pop
rcpps
jmp
mov
dec
stc
dec
mov
idiv
stos
fucomip
jmp
es
mov
mov
dec
push
add
cmp
add
add
adc
pop
call
push
rol
xlat
hlt
jmp
das
mov
mov
in
inc
fmul
inc
dec
inc
loope
and
es
in
mov
adc
jmp
gs
dec
jmp
je
aad
add
or
fisubr
mov
stc
push
(bad)
pushf
arpl
arpl
mov
or
mov
popa
pop
jne
sar
push
add
dec
cmc
sub
(bad)
jmp
imul
push
cmp
imul
pop
sub
out
mov
pop
call
push
addr16
arpl
arpl
nop
adc
(bad)
mov
imul
mov
push
mov
sar
jnp
mov
mov
jmp
or
inc
loope
mov
mov
vmovss
stc
out
jecxz
(bad)
(bad)
test
add
add
cmp
push
cmc
adc
rcl
adc
cmps
mov
cld
cmp
call
sar
(bad)
jle
cmp
jge
cmp
sub
lods
mov
sub
ror
push
sahf
in
clc
imul
jge
mov
test
call
sti
jmp
stos
std
stos
call
xor
add
(bad)
dec
loope
xchg
neg
xchg
sar
call
xor
loope
dec
jmp
mov
(bad)
jp
adc
mov
xchg
sar
in
loop
add
sar
in
mov
mov
out
idiv
out
call
push
xor
push
dec
push
push
adc
add
add
jmp
hlt
push
stc
out
add
jmp
jp
sbb
std
adc
(bad)
adc
(bad)
fstp
xor
xor
stc
mov
mov
inc
fnsave
pushf
fs
stc
gs
sub
sbb
stos
dec
test
mov
test
jmp
cmp
call
cmc
dec
shl
mov
pop
scas
lea
movs
lea
fcmovne
fmul
push
sbb
call
retf
adc
(bad)
add
xor
stos
jmp
(bad)
fadd
test
out
sub
ss
stc
call
imul
das
adc
inc
xchg
mov
or
enter
(bad)
stos
inc
arpl
sbb
jnp
stos
in
out
pop
in
not
adc
call
xchg
cmc
add
mov
jl
call
pop
cmp
xchg
ret
scas
jmp
mov
push
enter
adc
movs
mov
gs
adc
inc
mov
adc
adc
cld
scas
mov
add
fidivr
or
in
lods
mov
adc
call
adc
(bad)
push
and
(bad)
nop
in
xor
dec
test
inc
add
dec
push
fisubr
ret
test
inc
shl
fsubr
not
adc
jmp
cmc
add
cmp
rcl
test
inc
inc
mov
adc
adc
cld
mov
in
add
fnstsw
or
jmp
mov
test
aas
loope
cmc
in
test
enter
adc
mov
or
jl
mov
cld
(bad)
jle
xchg
lock
stc
mov
dec
std
stos
mov
call
push
cwde
int
cld
stos
mov
not
add
jl
stos
mov
aaa
push
jl
jmp
pop
xchg
push
jp
cdq
push
lea
cmp
jmp
pop
mov
xchg
fnstsw
add
int3
stos
cld
stos
mov
not
jl
std
sub
call
push
fcom
(bad)
nop
mov
jo
cmc
jmp
mov
xchg
int
jge
test
or
push
cmc
cmp
inc
std
stos
data16
pop
int3
stos
cld
mov
call
lea
cmc
jmp
mov
jns
imul
inc
addr16
sbb
xchg
mov
idiv
movs
ins
dec
std
stos
out
pop
push
add
lea
test
inc
xchg
dec
std
sub
dec
sbb
idiv
jle
mov
jmp
mov
idiv
jne
adc
retf
inc
shl
cmc
cmp
push
mov
mov
mov
aaa
cmp
stos
push
xchg
or
add
mov
les
mov
leave
inc
mov
cmc
cmp
stos
arpl
sbb
cmp
test
mov
inc
dec
retf
(bad)
lock
leave
jmp
int
test
mov
mov
ins
gs
sbb
popf
aad
idiv
add
test
mov
(bad)
ficom
add
sar
int3
jl
mov
cmc
jmp
test
sbb
lahf
std
jp
dec
lea
mov
jmp
mov
jge
test
not
fwait
sar
mov
(bad)
loopne
cmc
jmp
mov
(bad)
jge
cmp
movs
cmp
dec
call
(bad)
idiv
sahf
fsub
push
xchg
xor
pop
add
add
mov
push
mov
call
rol
test
mov
test
(bad)
sbb
sbb
jmp
popf
lods
std
stos
mov
test
lock
add
and
xor
and
bound
push
fucom
jnp
mov
(bad)
loopne
cmc
jmp
movs
lea
imul
dec
(bad)
idiv
enter
jmp
push
aad
std
cli
mov
test
mov
add
xchg
add
out
idiv
inc
fst
stos
xchg
ror
add
mov
imul
push
pop
idiv
pop
xchg
jl
push
mov
push
ret
mov
mov
pop
cmc
inc
jne
(bad)
(bad)
call
(bad)
push
mov
call
vmovlps
lahf
cmp
or
mov
push
in
call
or
loopne
popf
sbb
push
cmc
inc
add
add
mov
test
mov
dec
fstp
sar
jp
jmp
mov
cld
push
popf
or
push
mov
movs
sub
jmp
in
idiv
push
popf
lods
xor
mov
call
add
lds
or
mov
(bad)
nop
mov
call
(bad)
fisttp
rcr
xchg
lea
not
push
cmc
dec
movs
or
aaa
mov
lea
idiv
or
rol
adc
dec
call
(bad)
ds
mov
ins
idiv
push
push
mov
mov
push
add
popf
test
mov
call
(bad)
ds
mov
cmc
call
shl
test
mov
jmp
push
or
dec
(bad)
loopne
cmc
dec
mov
addr16
stc
mov
and
(bad)
jmp
mov
jge
jge
mov
not
popf
int3
cld
stos
jmp
lea
add
cmp
inc
jmp
adc
loopne
call
call
(bad)
cmp
idiv
stos
mov
dec
push
movs
test
cwde
jmp
ds
mov
sbb
(bad)
cmp
cmp
movs
mov
dec
(bad)
loopne
cmc
call
mov
jmp
pop
stc
mov
sar
lea
add
movs
jge
cwde
jmp
stos
jmp
cmp
loope
ds
dec
movs
cld
std
push
dec
(bad)
adc
dec
call
push
cmp
idiv
stos
mov
dec
push
add
imul
xchg
stos
cld
(bad)
ds
mov
and
jmp
sar
xchg
mov
dec
lea
mov
addr16
push
stc
mov
sar
jle
inc
mov
int
jge
test
not
xchg
int3
cld
stos
out
lea
idiv
stos
cmp
add
ds
and
sbb
push
dec
(bad)
adc
dec
call
push
cmp
mov
idiv
mov
dec
push
call
adc
mov
sbb
jmp
iret
cmp
xchg
mov
dec
lea
mov
addr16
cwde
and
stos
iret
cmp
cmp
(bad)
int
jge
test
not
xchg
int3
cld
cmp
dec
lea
idiv
stos
test
mov
call
arpl
pop
call
loopne
push
call
(bad)
cmp
mov
idiv
call
push
fwait
test
test
imul
pop
cmps
cld
inc
add
sbb
dec
sar
test
dec
lea
mov
mov
lods
inc
push
stc
mov
mov
add
pushf
jge
test
not
xchg
int3
cld
stos
jmp
lea
idiv
mov
loope
dec
jmp
adc
xor
add
jp
dec
(bad)
rcr
push
call
(bad)
cmp
mov
pop
idiv
stos
mov
dec
push
pushf
test
cmp
imul
test
ss
mov
pmaddwd
sbb
cmp
test
xor
xor
add
jmp
fwait
jmp
stos
sub
add
add
jmp
dec
jmp
sqrtps
clc
(bad)
fst
jge
imul
inc
std
fwait
lods
jl
jmp
imul
test
dec
and
(bad)
push
in
pop
call
ds
lds
movs
cld
call
lds
lea
in
idiv
in
mov
mov
xor
sbb
enter
sub
mov
jmp
push
jae
div
inc
xor
ss
jne
mov
test
not
(bad)
lods
jl
jmp
call
out
test
cld
and
(bad)
loopne
push
call
(bad)
aaa
cli
(bad)
inc
call
add
cmps
aas
xchg
cmp
in
imul
jg
cld
push
fdivp
dec
adc
jl
call
adc
call
xchg
jmp
cmp
xor
in
test
pop
idiv
cmp
popa
call
ins
dec
add
sar
or
dec
push
sar
in
dec
mov
fadd
dec
jmp
mov
push
stos
dec
(bad)
stos
fadd
jbe
(bad)
xchg
dec
sub
imul
mov
or
test
sub
(bad)
jmp
fninit
push
cmc
popa
pop
adc
mov
add
lea
call
push
push
cmc
bound
shl
stos
push
push
out
mov
jmp
jae
scas
(bad)
in
test
idiv
iret
push
jae
stos
fsub
neg
test
movs
pushf
stos
cld
stos
add
add
jmp
add
sub
idiv
mov
bound
enter
jmp
test
push
or
jmp
mov
mov
out
(bad)
jmp
stos
xchg
inc
pop
jmp
mov
std
mov
mov
retf
add
push
jmp
add
imul
test
dec
and
pop
call
ds
mov
pop
idiv
sub
dec
push
fwait
test
sbb
imul
stc
(bad)
cld
(bad)
jle
cli
mov
add
mov
out
lea
cmc
call
out
mov
cmp
cwde
sub
inc
add
add
mov
std
call
pop
ror
push
dec
lea
idiv
jp
mov
sbb
push
dec
arpl
or
dec
(bad)
push
fsub
ja
cld
jmp
dec
push
call
out
movs
cld
call
and
pop
mov
add
out
push
call
push
fadd
(bad)
cmps
cld
jmp
call
clc
jmp
out
inc
lods
cld
stos
call
cmp
call
adc
call
movs
(bad)
push
dec
(bad)
loopne
pusha
call
(bad)
sub
mov
idiv
call
mov
add
dec
stc
mov
sub
jmp
loope
mov
shr
cmc
call
mov
(bad)
jge
cmp
ja
xchg
(bad)
cli
jecxz
les
xchg
cwde
xchg
xor
mov
add
dec
cmc
dec
mov
lods
cld
stos
xchg
xchg
adc
(bad)
xchg
mov
mov
test
add
cmp
addr16
dec
stc
mov
sub
jmp
fild
mov
fdivr
idiv
stos
int
cld
cmp
inc
cmp
and
jmp
add
jge
cmp
push
loope
les
xchg
(bad)
loopne
cmp
dec
cmc
ins
cmc
ds
add
call
std
stos
loop
inc
test
iret
test
xchg
lea
dec
idiv
pop
mov
push
test
test
std
stos
mov
test
fild
test
loopne
mov
add
cmp
idiv
adc
or
jnp
pop
adc
and
in
ins
add
popa
add
jecxz
inc
cwde
mov
mov
jmp
add
mov
mov
mov
xor
movs
fdivr
mov
loop
inc
lods
mov
call
(bad)
std
push
cmp
movs
jl
stos
in
popa
add
fs
push
mov
not
out
mov
sub
int3
not
adc
cmps
cli
int3
test
mov
not
xchg
(bad)
std
jmp
(bad)
cmp
add
cmc
xchg
sar
cwde
clc
push
pop
add
callw
stos
xchg
ror
sbb
(bad)
cmp
or
jl
test
not
cmps
jl
call
push
mov
not
out
mov
mov
not
mov
cmp
jecxz
jmp
sbb
out
cmps
in
or
cmc
call
fst
call
popf
inc
(bad)
jmp
retf
idiv
adc
add
xchg
lds
dec
sbb
jmp
retf
test
inc
(bad)
lods
cld
stos
mov
sbb
pusha
fs
call
mov
retf
add
mov
and
jmp
fild
mov
retf
dec
xchg
jge
test
not
mov
dec
(bad)
loopne
cmc
jmp
xchg
stc
(bad)
retf
and
(bad)
fcom
xor
sar
das
fild
scas
test
xchg
lods
sbb
cdq
cld
dec
pop
cli
mov
fistp
mov
retf
fcom
test
retf
callw
cld
call
ret
aaa
inc
add
push
test
xchg
lods
xor
mov
adc
popf
mov
test
in
call
out
dec
(bad)
shl
sub
idiv
lea
not
push
cmc
je
das
test
cli
xchg
les
xchg
test
jl
cmp
xor
jae
add
test
mov
imul
dec
cdq
cld
dec
pop
cli
mov
idiv
mov
test
push
mov
test
retf
imul
jmp
adc
add
lods
xor
mov
adc
mov
test
in
call
add
(bad)
iret
dec
(bad)
ror
(bad)
jmp
dec
enter
push
cmc
ja
inc
adc
enter
(bad)
idiv
mov
fsub
lods
test
pop
cli
mov
cmc
call
enter
mov
imul
mov
pop
cli
mov
cmc
inc
add
fdivr
lods
test
int
(bad)
cmp
int3
imul
jo
sti
(bad)
fmul
out
call
cmp
(bad)
jmp
aaa
clc
retf
test
cmc
mov
jl
cdq
retf
test
retf
sub
xchg
rol
test
int
call
(bad)
std
add
stos
retf
dec
lea
cld
call
retf
test
xchg
push
cmc
dec
test
std
stos
mov
imul
rcr
sti
dec
cli
mov
dec
clc
jmp
retf
pop
mov
stos
cld
sub
(bad)
mov
and
(bad)
fsub
adc
lea
add
mov
call
mov
(bad)
idiv
pop
out
add
push
stc
push
cmp
adc
test
std
mov
adc
mov
push
push
sub
mov
into
idiv
test
repz
stos
int3
lods
cmp
clc
hlt
push
test
test
int3
xor
add
hlt
and
(bad)
fdivr
mov
stos
xor
test
fcom
test
mov
out
adc
cmp
lods
retf
imul
and
xor
int3
or
dec
push
stc
mov
sti
dec
fstp
push
mov
jne
mov
add
inc
xchg
call
jne
fdivr
call
clc
aaa
retf
addr16
push
push
stc
arpl
adc
add
jp
lea
add
in
je
inc
pop
and
mov
adc
dec
push
xor
pusha
adc
les
sldt
jno
add
sbb
dec
sbb
test
pop
adc
mov
adc
mov
dec
in
adc
adc
cmc
ins
add
mov
add
test
and
mov
add
nop
mov
pop
add
sub
dec
lea
sbb
in
add
lods
fdiv
mov
cwde
mov
loope
pusha
sbb
(bad)
test
inc
or
cmp
inc
movs
inc
add
pop
dec
push
mov
or
loopne
int
int
add
mov
push
push
push
cmc
sbb
call
pop
call
adc
or
add
mov
dec
mov
add
sbb
inc
pop
mov
and
sbb
add
fwait
and
dec
pop
add
pop
pop
cmp
fldenv
bound
mov
pop
add
(bad)
mov
xchg
dec
mov
push
call
lea
adc
add
push
add
inc
out
out
ret
adc
inc
push
std
lock
add
sahf
into
fucom
test
mov
jl
call
loope
inc
fdecstp
pop
and
jno
loope
stos
fdiv
push
mov
(bad)
test
and
sbb
add
mov
dec
push
add
ret
mov
cmp
dec
xlat
ins
bound
popa
hlt
pop
add
adc
test
pop
dec
(bad)
push
hlt
pop
add
adc
add
push
in
mov
dec
fdiv
and
dec
lea
add
sub
and
add
push
int
loope
xlat
jp
sbb
test
cld
call
fdiv
pop
and
xor
push
mov
int
scas
cmp
dec
push
pop
mov
add
scas
(bad)
cld
call
and
adc
inc
xchg
add
aam
ins
bound
mov
pop
add
shl
mov
inc
xchg
dec
(bad)
loope
pop
add
add
dec
adc
lods
fcomp
add
(bad)
loopne
test
js
dec
call
adc
push
lea
cmp
add
fld
add
cld
xchg
loopne
add
inc
mov
dec
pop
call
pop
adc
dec
mov
loope
cmp
not
test
cld
xchg
scas
test
lods
and
fstp
and
mov
add
inc
inc
xchg
sti
cmps
test
shl
loop
stc
mov
adc
jg
add
inc
xchg
dec
(bad)
xchg
aaa
pop
add
adc
leave
in
adc
(bad)
fnstenv
pop
push
xchg
fstp
(bad)
fld
mov
xchg
pop
push
lea
aaa
cmp
add
adc
icebp
fistp
jp
cdq
inc
mov
dec
shl
pop
add
inc
dec
xchg
loope
sti
shl
push
mov
repnz
sub
dec
push
mov
adc
call
into
test
dec
adc
call
jb
dec
shl
repnz
stc
mov
cmp
add
aam
mov
push
dec
(bad)
push
cmp
add
adc
add
add
adc
movs
xor
add
push
loopne
test
jne
call
aam
adc
lea
cmp
add
pop
add
dec
stc
dec
fild
aam
les
mov
call
call
pop
add
xor
popa
enter
mov
dec
lods
add
mov
dec
push
mov
add
and
pop
ficom
add
add
mov
js
dec
clc
pop
cmps
cdq
aam
ins
and
mov
xor
call
mov
xchg
dec
(bad)
adc
or
jo
sbb
lea
pop
push
out
mov
inc
add
call
and
push
push
fcomp
adc
add
(bad)
clc
test
les
dec
mov
call
jmp
sbb
push
inc
lods
cdq
jmp
push
pop
lods
and
jg
sti
call
test
add
sahf
pop
add
add
mov
ja
call
jmp
loope
push
add
call
mov
inc
xchg
dec
(bad)
loope
pop
add
adc
dec
pop
call
lea
pop
push
cmps
fistp
dec
jmp
shl
cmp
add
add
adc
add
(bad)
leave
inc
mov
dec
or
jecxz
jmp
xchg
loope
cmp
not
or
add
push
sbb
call
fiadd
inc
jbe
call
pop
cmps
jmp
add
cmp
add
aam
mov
inc
xchg
dec
(bad)
xchg
cmp
add
push
call
lea
xor
push
fdivr
(bad)
fld
call
adc
cmp
add
adc
add
call
mov
xor
dec
call
xchg
loope
imul
not
cdq
dec
and
clc
popa
stos
jmp
mov
add
cmps
mov
dec
adc
xchg
std
jae
test
push
stc
mov
push
add
adc
dec
pop
jmp
xchg
mov
dec
(bad)
push
xor
int
sbb
popf
adc
std
adc
pop
push
push
fnstsw
call
in
test
xor
push
jge
and
add
ds
mov
les
mov
call
jmp
pop
cmp
dec
xor
add
out
not
pushf
dec
and
cld
mov
push
push
adc
call
dec
pushf
and
ficom
add
add
xchg
sti
iret
movs
jns
ins
bound
popa
xor
add
fcomip
mov
inc
xchg
dec
(bad)
adc
add
sbb
mov
add
jns
pop
push
(bad)
fstp
dec
loope
cmp
test
xor
push
jge
and
add
jb
sbb
test
inc
mov
(bad)
fnstsw
loope
mov
xchg
loope
daa
fcomip
push
(bad)
fwait
dec
and
cli
sbb
sbb
lea
add
iret
(bad)
sti
call
pushf
and
sahf
adc
inc
xchg
cli
sub
push
stc
mov
xor
add
call
mov
inc
xchg
dec
(bad)
mov
adc
add
adc
(bad)
leave
inc
pop
push
xchg
mov
dec
in
test
lea
inc
cmp
add
adc
add
jmp
les
cmp
loope
mov
aas
xchg
loope
hlt
(bad)
push
lea
clc
jne
sub
dec
push
fdiv
add
sti
scas
sti
(bad)
fimul
add
cmp
mov
add
cli
call
in
ins
bound
mov
inc
push
add
fdiv
mov
xchg
dec
(bad)
push
inc
pop
add
adc
mov
adc
lea
inc
pop
push
push
fnstcw
call
jmp
adc
(bad)
rol
mov
out
and
adc
add
add
rcr
cmp
jp
pop
dec
mov
dec
loope
dec
jmp
pop
add
xor
in
fdiv
push
mov
shr
mov
sbb
call
mov
call
inc
xchg
out
jecxz
mov
lock
mov
xor
add
add
pop
call
mov
xchg
dec
(bad)
adc
add
pop
call
lea
pop
push
push
iret
mov
call
loope
pop
jmp
mov
push
cmp
and
pop
add
out
out
sub
les
inc
mov
call
add
jmp
jno
loope
add
mov
out
sub
push
dec
mov
sbb
add
add
and
sahf
push
add
add
mov
jbe
dec
call
not
dec
sbb
(bad)
cmp
xchg
dec
mov
adc
add
add
push
add
in
or
jmp
push
(bad)
loop
and
adc
add
in
mov
les
inc
mov
dec
call
xchg
loope
repnz
push
push
fwait
dec
and
in
mov
mov
call
and
add
dec
mov
call
sbb
dec
ins
jge
nop
sbb
repnz
call
push
add
cmp
pop
adc
add
in
shr
xor
stc
dec
push
add
int
pop
push
stos
call
cld
(bad)
fucom
push
push
push
call
add
xor
call
jne
and
push
and
add
(bad)
mov
call
lahf
mov
add
lahf
and
and
dec
adc
push
adc
add
in
fdivr
jmp
add
and
add
add
cwde
pushf
and
out
inc
adc
(bad)
loope
mov
fst
call
mov
mov
int
or
inc
and
mov
clc
cmp
add
adc
add
call
and
adc
add
add
test
loope
add
test
sbb
add
iret
xlat
cld
jmp
add
xchg
and
push
adc
cmp
mov
out
push
cwde
xchg
and
or
add
push
sbb
and
adc
ds
cdq
loop
(bad)
fnstcw
lea
aaa
inc
push
add
xchg
xchg
and
sahf
adc
test
cld
stos
cwde
les
inc
xchg
inc
mov
call
loope
sbb
test
in
lea
adc
dec
loope
mov
div
(bad)
cmp
cwde
pushf
and
fwait
cmp
ret
je
add
loope
mov
not
lahf
jae
mov
out
test
pushf
and
aaa
cmp
add
mov
xchg
stc
call
sbb
add
stc
ret
lahf
mov
test
loope
mov
test
jecxz
(bad)
cmp
add
in
cmc
call
xchg
and
pop
adc
pop
add
push
int3
jae
xchg
popf
mov
pop
add
add
sahf
inc
and
dec
xchg
stc
ret
in
push
cwde
xchg
and
or
add
pop
add
pop
add
or
add
cdq
in
(bad)
fld
test
push
loope
cmps
jecxz
pop
out
iret
dec
inc
(bad)
popf
mov
add
inc
dec
lea
inc
(bad)
adc
add
xor
sub
push
push
gs
inc
pop
jle
push
jmp
call
mov
loope
jmp
sub
add
je
inc
or
jmp
(bad)
or
pop
add
push
add
add
mov
push
push
push
rol
add
jmp
dec
pushf
pop
add
dec
scas
hlt
inc
inc
and
rol
add
shl
dec
lea
push
push
inc
mov
inc
and
inc
mov
sbb
and
pop
add
mov
pop
xor
add
cld
stos
sti
push
add
xchg
mov
sldt
push
xchg
and
push
pop
add
scas
pushf
cld
stos
xchg
test
adc
test
sldt
or
adc
add
rol
add
(bad)
neg
stos
call
iret
lea
sub
add
dec
cld
dec
adc
push
add
mov
add
xor
inc
dec
(bad)
fldcw
add
call
push
mov
add
cmc
mov
xchg
rol
add
push
add
inc
xchg
movs
cld
stos
cdq
inc
and
inc
mov
(bad)
fstp
clc
adc
neg
push
sbb
mov
and
call
add
iret
lea
cmp
adc
push
add
ds
jmp
lds
dec
iret
and
pop
sub
dec
push
fcomp
dec
cmc
jae
cld
cli
aas
dec
lea
pop
call
rcl
add
inc
xchg
add
call
(bad)
dec
inc
loope
in
neg
out
mov
sahf
retf
mov
call
jmp
test
rol
add
clc
xor
sub
cmp
mov
xchg
and
dec
adc
push
(bad)
clc
repnz
add
jmp
jp
sbb
push
jecxz
and
push
adc
push
cmc
ins
xchg
cld
mov
arpl
mov
(bad)
xchg
xor
add
mov
call
vmovupd
jne
jns
push
scas
mov
sti
cmps
imul
cld
call
push
stc
(bad)
shl
adc
popf
adc
call
sti
call
push
sbb
je
fwait
pop
and
rol
add
add
repz
sbb
xor
(bad)
jle
cli
mov
loope
sbb
out
idiv
imul
push
daa
adc
loope
rol
adc
or
out
test
push
add
add
dec
loopne
add
and
dec
inc
loope
ja
test
push
aam
adc
pop
add
mov
(bad)
ds
mov
xor
add
call
push
mov
test
aam
and
sldt
jle
adc
push
stc
mov
adc
add
cmc
clc
sar
pop
or
pushf
and
mov
adc
add
adc
add
add
cdq
jmp
(bad)
fnstcw
or
adc
push
xor
add
xor
add
(bad)
sti
call
aad
lea
xor
dec
push
sbb
add
xchg
and
dec
adc
pop
xor
nop
les
xchg
and
adc
pop
(bad)
pop
sbb
repnz
adc
push
ja
test
stc
jnp
test
push
push
(bad)
loope
rol
adc
imul
push
add
add
gs
xchg
cld
push
push
lea
xor
mov
inc
add
in
imul
fist
jmp
fwait
mov
pop
sldt
mov
fwait
cld
cmp
and
add
shl
push
add
push
mov
sbb
sahf
aas
add
dec
lea
sub
sbb
mov
loopne
idiv
call
fs
and
add
add
mov
mov
xor
xchg
jmp
xchg
xchg
and
add
dec
and
ds
das
cmp
mov
jnp
mov
cli
ins
stos
cmp
xchg
aam
mov
repz
xchg
(bad)
cmp
mov
out
test
cli
call
test
pop
add
ins
(bad)
dec
and
add
pop
add
sbb
dec
cmp
cmp
pop
pop
test
add
push
push
add
xor
jmp
test
fucom
test
dec
(bad)
push
repz
add
dec
cld
dec
push
or
push
mov
rcl
mov
add
ds
cmp
add
mov
call
loopne
xor
add
ja
fst
push
test
xor
aaa
dec
push
mov
mov
xchg
cld
stos
add
push
and
test
sub
dec
push
dec
int3
sbb
add
imul
fyl2x
pop
(bad)
and
pop
add
xchg
sti
call
pop
test
loopne
jo
add
xchg
and
lea
add
adc
add
cmp
pop
lods
cmp
nop
sbb
shl
je
sbb
icebp
pop
add
dec
cld
inc
add
in
lea
adc
sti
(bad)
(bad)
not
mov
gs
xchg
cld
push
dec
lea
icebp
pushf
add
cmp
push
add
add
jecxz
and
adc
arpl
mov
add
lea
sbb
xor
push
add
mov
adc
push
jge
test
pop
add
xchg
shr
ret
mov
adc
(bad)
xchg
cld
pop
add
imul
mov
je
int
call
push
out
test
pop
test
cmp
xchg
add
mov
stc
dec
push
add
movs
xchg
cmp
(bad)
mov
pop
pop
test
pop
add
mov
xor
call
mov
dec
loopne
cmp
(bad)
xchg
not
or
div
add
neg
or
xchg
and
adc
push
add
pop
lahf
and
int
add
pop
xchg
sti
dec
and
fcom
add
xchg
and
int
add
(bad)
and
lahf
adc
(bad)
adc
pop
add
repz
inc
push
out
(bad)
sbb
(bad)
adc
add
mov
add
addr16
ror
sbb
inc
sbb
loope
arpl
add
push
or
call
jmp
popf
je
int3
sbb
add
and
jl
or
cmp
pop
cmp
ins
(bad)
fdivr
mov
cld
sub
fst
call
push
sub
(bad)
adc
push
add
xchg
sti
inc
pop
push
lea
cmc
mov
adc
loope
les
pop
adc
shl
js
dec
adc
loope
pusha
add
push
stc
movs
idiv
into
push
adc
mov
sub
rcl
jae
es
stos
call
test
cmp
xor
push
pop
popf
and
int
add
lods
(bad)
cld
inc
enter
add
pop
test
cmp
test
dec
cmp
in
mov
cmp
sbb
jmp
mov
test
inc
pop
sahf
jmp
pop
add
dec
enter
pusha
stc
call
mov
loopne
xor
neg
add
dec
lea
sbb
mov
fndisi(8087
inc
int
test
aas
cmps
pushf
imul
clc
mov
repz
jae
cld
inc
movs
mov
jno
add
jecxz
and
add
xchg
xchg
cld
stos
mov
test
push
test
pop
add
add
jae
test
pop
fdivr
mov
pop
mov
dec
sub
mov
test
mov
test
add
int
mov
(bad)
(bad)
test
sub
add
push
dec
lea
mov
add
lea
or
fwait
and
push
add
repz
stos
xchg
ret
sbb
daa
push
xor
push
test
cmp
jle
dec
lea
push
call
push
sbb
add
ret
dec
lea
push
call
push
add
loope
add
xor
ret
dec
lea
cld
loopne
int
call
push
adc
add
push
pushf
and
adc
(bad)
cld
stos
mov
test
loopne
fldcw
not
rcr
jge
and
add
lea
and
adc
add
push
jb
daa
jnp
sub
dec
lea
add
pop
mov
adc
sti
call
sub
push
push
popa
pushf
cld
stos
les
lea
les
fst
(bad)
push
icebp
pop
add
adc
call
push
push
or
add
out
(bad)
and
pop
add
mov
jmp
je
add
in
hlt
jmp
cmp
push
mov
sub
fsub
dec
adc
call
rcl
jge
fcomp
pop
xchg
iret
lea
adc
jne
sub
(bad)
popa
hlt
push
add
adc
int
jnp
jno
std
addr16
cmp
cld
push
test
adc
pop
and
and
ins
adc
cmps
sbb
xchg
mov
je
lea
call
(bad)
shl
push
add
add
out
inc
inc
idiv
jae
mov
inc
sub
push
cwde
push
and
sbb
ja
jmp
mov
(bad)
jmp
(bad)
mov
cmp
jmp
call
xor
dec
cmp
push
mov
sub
sub
movs
popf
adc
call
push
xchg
sahf
adc
jg
fcomp
xchg
xchg
iret
lea
hlt
ins
add
call
(bad)
shl
push
add
add
adc
add
xor
or
push
cmp
cld
cli
fcomip
inc
rcl
sbb
or
shl
and
and
and
add
mov
lea
je
fst
call
(bad)
push
hlt
push
add
adc
fst
out
inc
mov
add
dec
lea
pushf
add
sub
cmp
in
je
add
push
aaa
adc
loope
je
pop
adc
add
add
xor
mov
push
push
dec
mov
call
sbb
mov
call
sbb
cdq
cld
mov
clc
cmp
adc
and
dec
fiadd
and
or
fiadd
clc
addr16
adc
cmc
nop
(bad)
dec
sbb
jl
stos
mov
sbb
lea
pop
and
sub
test
hlt
sbb
mov
and
ficomp
and
add
xchg
jnp
or
loope
sbb
pop
jecxz
xchg
(bad)
jmp
cmp
or
cld
inc
jmp
xchg
adc
pusha
mov
sbb
add
add
lea
stc
call
sub
adc
rol
pop
push
call
cmc
dec
lahf
add
mov
jecxz
add
push
call
(bad)
inc
test
das
inc
cmp
lea
add
and
push
pop
add
cmp
dec
lea
je
int
call
lea
movs
add
push
call
lea
jecxz
add
add
mov
loopne
test
fwait
mov
add
(bad)
icebp
hlt
je
pop
push
call
push
sbb
add
sub
lea
push
mov
dec
sbb
mov
cwde
mov
pushf
or
add
or
dec
push
add
mov
add
int
mov
(bad)
fst
adc
push
add
sub
inc
je
popf
adc
not
cdq
mov
adc
and
dec
adc
(bad)
cld
sbb
dec
push
gs
aad
add
dec
les
inc
ror
mov
add
cwde
rcr
aas
inc
and
adc
add
sbb
add
sar
rcr
and
ret
test
mov
call
push
aas
test
mov
dec
daa
test
add
adc
dec
and
and
sbb
push
vpaddsb
adc
push
fmul
push
cmc
adc
or
enter
nop
stc
dec
lods
sti
call
and
adc
test
adc
clc
sbb
loope
stc
inc
add
mov
je
int
call
xor
aas
push
sbb
lea
add
dec
mov
dec
test
loopne
std
push
not
xchg
jae
ror
mov
sbb
mov
clc
mov
adc
jnp
maskmovq
test
xor
or
push
add
xchg
sbb
ret
cmp
add
push
jle
and
ret
scas
adc
push
add
add
enter
neg
lea
xchg
pop
mov
jmp
leave
xchg
and
adc
add
add
mov
add
add
dec
sbb
dec
dec
test
pop
add
call
push
test
xor
mov
test
jg
and
push
add
mov
xor
fnstsw
and
push
add
std
dec
test
sbb
add
or
and
dec
cmp
leave
cli
inc
add
cmc
cli
dec
cmc
sbb
popf
adc
sbb
movs
add
or
hlt
add
push
(bad)
shl
movs
add
push
(bad)
leave
cmc
lods
add
mov
call
or
rcr
push
call
ds
cwde
jge
mov
adc
dec
test
add
sbb
xchg
test
or
jg
mov
hlt
cmp
std
cmp
(bad)
jp
mov
add
in
xor
lods
sbb
and
pop
sub
stos
or
loopne
int
push
fcom
call
xchg
xchg
and
add
jge
and
push
adc
add
pop
add
mov
or
or
dec
lea
sbb
test
sub
inc
and
cmp
hlt
xor
test
pop
pop
xchg
imul
stc
call
stos
sti
dec
or
pop
inc
ret
add
jno
stc
dec
pop
add
int3
pop
jb
sub
dec
mov
in
int3
(bad)
jmp
adc
or
sbb
adc
xor
mov
xchg
xchg
loope
call
push
or
(bad)
shr
inc
fisttp
sub
inc
(bad)
mov
mov
add
add
jne
mov
and
adc
(bad)
cld
stos
ror
repz
popf
push
call
push
inc
jnp
and
pop
add
and
add
or
test
loopne
shl
cwde
int3
sbb
lea
and
pop
add
jge
test
adc
add
add
pop
jnp
sbb
dec
(bad)
fyl2x
inc
mov
repnz
push
in
pop
add
adc
cld
call
mov
jmp
leave
sti
jge
jle
and
xchg
jnp
jmp
mov
je
adc
push
jmp
mov
(bad)
stos
fwait
clc
imul
add
add
in
xor
iret
jnp
xor
sti
jnp
sbb
test
xor
test
(bad)
xor
neg
or
imul
fwait
stc
mov
lock
fst
imul
xor
jp
and
push
add
xchg
xchg
and
int3
adc
bswap
adc
call
push
xchg
and
add
mov
inc
popf
fscale
ja
sar
imul
jl
jno
ins
jmp
adc
pop
xchg
inc
dec
adc
je
enter
mov
cmc
jmp
cld
jmp
inc
dec
(bad)
mov
add
push
pop
xchg
adc
add
pop
div
loopne
add
mov
mov
and
cld
call
add
adc
ffree
loopne
ja
test
lea
pop
xchg
xlat
inc
or
adc
je
lea
push
call
fidiv
or
sub
test
push
test
sbb
jmp
jl
and
add
add
add
ret
mov
adc
(bad)
xchg
xlat
pop
add
cmp
cmp
sbb
push
push
call
mov
iret
or
in
sldt
mov
xor
pop
sbb
idiv
sub
jecxz
popf
xlat
std
ja
mov
imul
movs
or
and
retf
cmp
popa
std
jp
sub
xor
rol
call
mov
mov
ss
call
or
dec
mov
call
adc
mov
call
or
xchg
xchg
and
add
call
jl
add
adc
call
adc
test
push
test
sbb
cmps
pop
adc
mov
aad
add
dec
jne
sbb
sub
sub
xchg
push
cmc
jecxz
dec
test
cmp
sub
inc
sbb
shl
jmp
loopne
pop
or
jmp
add
sbb
(bad)
add
or
inc
ins
mov
test
and
adc
add
(bad)
jmp
adc
enter
movs
dec
push
jecxz
popf
cwde
test
dec
adc
stos
add
cmp
push
jno
and
jmp
lea
add
add
jmp
dec
sbb
call
cwde
xchg
and
rcl
call
sub
ret
lea
test
fst
mov
dec
xchg
out
dec
sbb
push
pop
or
mov
fs
nop
sub
loopne
call
call
add
push
push
and
sbb
sbb
(bad)
and
xor
push
cmp
add
aam
out
ja
(bad)
ficomp
test
add
aas
sbb
(bad)
mov
shl
jmp
(bad)
aam
loopne
not
ret
sbb
(bad)
jno
mov
fst
not
inc
add
push
inc
ffree
test
push
pop
push
push
dec
adc
clc
add
cli
cmc
call
icebp
mov
add
add
inc
add
test
mov
or
jmp
push
xchg
mov
push
inc
add
add
out
jmp
ins
test
push
sub
fs
cmp
adc
add
int
pop
mov
hlt
call
test
jl
inc
mov
mov
inc
popf
sbb
mov
hlt
sbb
add
ss
inc
and
push
call
mov
inc
add
mov
sbb
aam
sbb
cmc
mov
cld
cli
imul
pop
adc
dec
xor
add
xor
ins
add
stos
ins
inc
and
fstp
jge
ins
lea
rcr
lds
inc
test
or
mov
mov
popf
adc
or
mov
inc
jp
add
lods
and
pop
add
mov
leave
cld
cmp
and
sbb
add
push
test
call
mov
test
rcr
or
adc
mov
jo
call
add
(bad)
cmp
jmp
adc
and
push
out
stc
dec
jl
adc
rcr
fst
jge
ficomp
div
xor
mov
and
adc
je
or
test
scas
(bad)
sahf
ror
xchg
mov
not
mov
pushf
cli
dec
pop
push
nop
sbb
je
xor
sbb
add
and
mov
test
fst
push
call
dec
xlat
add
mov
lock
adc
dec
mov
mov
popf
cmp
popa
aaa
jl
lea
mov
js
call
adc
jmp
cmp
mov
adc
and
cli
sub
sub
lock
(bad)
out
fdivp
(bad)
jmp
adc
cli
ins
and
stos
pop
and
xchg
out
or
inc
lahf
cmp
push
adc
pop
jmp
cmp
ss
pop
dec
idiv
stos
stc
enter
int
call
mov
push
adc
push
icebp
sub
or
call
ror
push
jmp
cmp
mov
adc
and
stc
stos
int3
sub
lock
(bad)
out
loopne
(bad)
(bad)
push
jl
adc
push
add
cwde
mov
adc
mov
adc
(bad)
xchg
xor
xchg
call
(bad)
adc
pop
movs
sbb
int3
adc
(bad)
push
xor
xchg
call
push
and
push
call
call
mov
inc
ret
cld
call
inc
in
ins
and
jmp
and
add
jmp
pop
fdiv
call
fadd
adc
sar
cwde
(bad)
fucomi
stc
and
and
sub
loope
or
sbb
sbb
aam
push
sbb
je
xor
inc
jno
div
xor
mov
mov
mov
cld
add
jp
inc
and
xchg
cmp
mov
pop
div
xor
arpl
adc
push
add
jmp
mov
mov
push
push
jge
inc
mov
ins
and
sahf
jmp
and
sbb
mov
out
(bad)
adc
jg
test
add
or
je
or
add
push
call
mov
mov
cld
push
dec
and
popf
js
pushf
push
add
lea
div
test
xor
sbb
call
out
add
cmp
into
aad
cwde
(bad)
xlat
out
stc
push
push
and
add
pop
xchg
or
jl
push
add
adc
inc
or
fcomip
jmp
xor
shl
adc
(bad)
xor
push
and
stos
cld
jmp
shl
inc
int
or
imul
adc
mov
xor
and
add
sbb
cmp
add
add
jmp
pushf
add
xor
add
call
pop
jge
jl
xchg
adc
push
inc
dec
inc
mov
call
jmp
push
(bad)
xchg
xor
adc
idiv
les
push
call
inc
sub
cld
stos
jnp
push
cdq
test
add
add
xchg
xchg
sbb
into
adc
fwait
jne
cmp
aas
not
sub
jecxz
lea
std
(bad)
cmps
push
add
xchg
movs
test
jmp
adc
push
movs
add
bound
fcomp
(bad)
loope
loopne
pop
adc
add
call
(bad)
mov
adc
mov
add
ss
bound
dec
out
stc
mov
or
out
(bad)
fucomp
ins
and
mov
adc
cld
push
ror
mov
div
movlps
and
xchg
jmp
and
call
push
jecxz
(bad)
popa
sti
mov
sub
or
add
addr16
sbb
call
adc
pop
dec
adc
mov
sbb
cwde
addr16
push
movs
jno
cld
stos
mov
cwde
mov
int3
fcom
add
push
pop
pusha
add
adc
jmp
adc
pop
(bad)
sbb
int3
adc
call
pop
adc
add
sbb
add
adc
pusha
add
cwde
hlt
jmp
push
and
out
loopne
and
test
sbb
xchg
mov
in
cmp
pop
idiv
cli
mov
jmp
adc
add
ja
xchg
pop
mov
test
pop
adc
idiv
add
xchg
sbb
fcom
add
cmp
call
pop
xchg
sbb
int3
adc
push
sub
push
std
stc
bound
cdq
inc
mov
dec
jmp
pop
(bad)
adc
fmul
add
ins
cdq
hlt
jmp
bound
fmul
dec
adc
(bad)
mov
adc
dec
loop
sbb
jle
add
adc
jne
jmp
int3
inc
es
ror
mov
out
call
call
jp
mov
mov
jno
fsubrp
jecxz
push
push
and
outs
ret
add
mov
add
pushf
cwde
lock
sbb
pop
sbb
xor
push
add
bound
add
jae
jl
push
push
add
and
add
push
add
adc
rcl
bound
inc
out
stc
nop
fadd
test
in
jmp
adc
fs
push
fistp
out
add
adc
and
nop
inc
and
nop
cmp
fucomp
mov
mov
or
push
add
pop
xor
mov
sub
test
out
inc
movs
sub
add
inc
inc
daa
je
fdiv
and
dec
mov
jmp
add
jmp
add
sbb
cwde
mov
sbb
add
mov
pusha
stc
dec
out
fcmove
mov
div
out
jbe
push
add
mov
pop
and
jbe
test
mov
call
jmp
xor
pop
push
call
pop
in
test
inc
add
dec
sub
add
jg
mul
and
test
push
add
jecxz
adc
fdiv
and
int
sbb
sub
call
data16
adc
cld
cwde
fs
(bad)
(bad)
icebp
test
adc
cmp
xor
jecxz
call
hlt
call
call
ret
lds
dec
test
inc
call
adc
(bad)
push
sbb
call
jl
ins
adc
add
out
add
imul
and
adc
add
in
jo
test
sub
repz
outs
mov
test
lahf
cld
out
mov
adc
fst
adc
push
and
adc
call
int
inc
shr
adc
xlat
cld
cwde
aam
stc
dec
sub
pandn
idiv
sub
fild
dec
adc
jl
sti
dec
loope
clc
call
pop
and
adc
sbb
add
in
cmp
pop
adc
ins
sbb
add
mov
pop
sbb
push
cmp
mov
in
mov
hlt
mov
jo
xchg
jl
jmp
mov
jnp
cdq
inc
imul
xchg
lods
and
sbb
add
xchg
sbb
mov
add
xchg
cld
cmp
push
xchg
lods
and
sbb
add
xchg
sbb
pop
adc
movs
in
js
jmp
push
add
pop
jmp
xchg
shr
idiv
in
or
call
push
add
shl
sub
data16
jne
out
test
pushf
pop
xchg
mov
add
(bad)
lock
push
adc
idiv
test
stc
dec
adc
dec
loopne
test
int3
or
add
jmp
dec
adc
sbb
imul
mov
in
cmp
and
popa
in
push
push
ret
xor
out
shl
test
mov
and
xchg
cmp
shr
div
xor
pop
sbb
int3
hlt
call
jnp
sar
dec
push
not
bound
mov
inc
xchg
popa
sbb
je
add
repz
pop
cmp
les
in
lock
cld
out
fdiv
dec
gs
add
(bad)
sbb
in
mov
or
xchg
(bad)
stc
jecxz
lock
retf
cld
out
fdiv
call
xchg
adc
sbb
jl
dec
jecxz
and
cmp
call
inc
cdq
add
cmp
dec
sar
cwde
and
stc
call
xor
(bad)
rdmsr
idiv
add
mov
and
aaa
sub
pop
mov
fdivr
sub
test
jno
dec
(bad)
fldcw
add
call
lea
sbb
cdq
sub
add
jmp
and
fs
inc
fld
test
sti
inc
add
mov
lea
test
int
test
out
mov
add
xchg
test
adc
add
jl
call
and
pop
add
rcl
add
test
dec
call
mov
sub
inc
mov
lods
and
add
and
xchg
push
adc
xlat
call
sub
jecxz
pop
stos
sbb
jmp
push
in
mov
or
sbb
sub
pop
not
sub
loope
popf
jmp
add
adc
add
push
add
(bad)
push
test
call
push
(bad)
fldcw
add
call
pop
mov
mov
mov
dec
jl
pop
adc
add
mov
adc
xchg
sbb
sbb
add
xchg
sub
add
fdivr
call
adc
cdq
sar
adc
pop
and
inc
push
push
jne
movs
cld
add
push
mov
jmp
adc
jl
popf
adc
imul
inc
test
mov
bound
jle
test
xchg
sbb
pop
adc
jnp
jmp
add
adc
test
inc
push
lea
add
adc
neg
lds
dec
into
jl
mov
mov
adc
pop
sbb
(bad)
adc
pop
add
fdivr
call
mov
jl
and
push
pop
and
inc
push
push
xor
nop
mov
inc
add
(bad)
mov
lea
adc
or
lock
aas
test
mov
bound
mov
adc
add
adc
movs
xor
imul
jmp
push
and
push
sub
loope
div
mov
push
push
add
jmp
pushf
call
add
and
call
cmp
push
nop
adc
dec
jecxz
sbb
test
inc
mov
call
in
neg
adc
mov
adc
(bad)
xchg
neg
or
nop
hlt
(bad)
cmp
jmp
test
aam
push
sub
sahf
lds
(bad)
pop
lods
and
adc
add
inc
dec
lea
out
add
in
test
or
mov
out
not
pop
test
mov
cld
jmp
add
out
not
add
lods
and
push
add
movs
in
jae
stos
pop
lods
and
adc
add
jmp
and
adc
add
pop
rcr
sbb
fs
(bad)
dec
adc
fisttp
mov
and
call
push
mov
ret
and
test
call
call
add
into
ss
add
in
dec
(bad)
nop
cmp
test
cld
or
push
lea
dec
(bad)
push
in
stc
out
jbe
call
aaa
stc
mov
lods
idiv
stos
sar
jnp
in
test
mov
jl
lock
test
std
mov
push
push
cmp
sbb
in
not
push
cld
add
xor
or
in
test
ds
and
add
sub
add
mov
not
sbb
jmp
push
cld
add
dec
ds
dec
mov
je
xchg
jne
adc
add
pop
cs
test
jo
add
iret
bound
mov
push
push
gs
rol
jp
pop
inc
mov
inc
lea
mov
idiv
push
out
lea
idiv
rcl
inc
idiv
call
test
mov
pop
inc
pop
addr16
inc
add
lahf
mov
pusha
enter
lea
out
or
call
outs
mov
push
test
or
mov
not
inc
push
test
(bad)
mov
add
and
jmp
outs
mov
push
test
add
cmps
lea
push
mov
mov
stos
div
dec
jmp
outs
mov
test
push
mov
add
not
mov
and
inc
fimul
push
sbb
add
adc
jmp
mov
or
stc
je
add
cmp
xchg
push
pop
jmp
xchg
pavgb
add
mov
inc
call
in
test
and
xchg
push
sbb
push
inc
adc
dec
dec
xchg
rol
jecxz
xlat
push
enter
mov
add
push
jecxz
ja
mov
xchg
add
pop
xor
inc
or
jecxz
sub
fst
mov
push
jecxz
std
in
adc
sbb
add
in
xor
push
jnp
imul
pop
and
sub
jne
test
call
jmp
leave
idiv
and
or
add
add
push
clc
(bad)
seto
push
(bad)
loopne
idiv
jmp
adc
or
pop
cld
or
daa
rcl
sbb
jmp
xchg
inc
cld
stos
pop
bound
push
mov
out
lock
mov
push
inc
retf
mov
test
shl
add
call
cld
xchg
adc
add
pushf
mov
push
stos
mov
clc
push
add
imul
test
mov
add
movs
jge
sti
mov
push
(bad)
shl
test
sub
mov
mov
stos
out
sub
cwde
je
jmp
add
xchg
mov
push
stos
mov
push
cmp
scas
mov
inc
pop
pop
push
mov
maskmovq
push
jge
jp
test
mov
imul
pop
idiv
sbb
dec
mov
mov
dec
lea
push
add
push
cld
or
add
jmp
lea
mov
mov
dec
(bad)
lock
jmp
mov
jnp
test
cdq
push
mov
sbb
cwde
dec
pop
add
pop
mov
gs
nop
call
or
cdq
sar
cmp
xchg
add
push
sbb
stos
mov
jmp
push
nop
push
call
adc
test
jmp
sbb
imul
jnp
jne
push
jb
mov
jnp
loope
test
not
sahf
sar
mov
push
add
push
cmp
movups
push
inc
inc
mov
dec
lea
idiv
stos
mov
div
cdq
adc
(bad)
mov
in
idiv
push
in
lods
ins
sub
idiv
(bad)
ds
xor
cmps
jge
sbb
not
mov
sub
cwde
jne
(bad)
cli
jmp
stos
(bad)
jg
inc
lea
add
(bad)
cmc
test
not
aaa
in
test
jmp
(bad)
call
jmp
add
pop
call
lea
idiv
jp
call
and
add
sti
sbb
test
cmp
test
cmp
not
add
dec
add
add
sbb
cmp
nop
iret
push
add
adc
inc
jmp
sbb
xchg
mov
jmp
mov
cmc
(bad)
cmp
add
push
xchg
enter
mov
(bad)
fstp
mov
mov
add
cmp
pop
sar
add
mov
add
dec
popf
js
pushf
push
add
dec
add
(bad)
adc
push
sbb
call
push
add
add
in
outs
cld
jmp
add
call
push
add
add
cmc
adc
add
lahf
mov
or
jmp
add
and
bound
(bad)
call
push
add
pop
cmp
jg
cld
inc
push
dec
lea
leave
loopne
and
imul
add
mul
pop
push
ret
inc
fwait
in
push
xor
add
adc
in
je
call
mov
xor
push
push
inc
stc
inc
add
mov
pushf
mov
mov
adc
add
xchg
out
call
iretw
push
leave
mov
sub
xchg
pop
cld
(bad)
jp
test
jb
cld
push
mov
mov
jnp
test
adc
dec
call
push
(bad)
push
leave
add
into
cmp
mov
inc
add
mov
loopne
xchg
jmp
cli
in
je
jmp
sbb
aas
add
push
loopne
or
loopne
add
xchg
out
add
jne
mov
lods
cld
cmp
dec
ss
call
add
push
cmp
je
xchg
mov
fsub
adc
addr16
in
test
and
mul
lods
clc
mov
push
rcl
mov
test
mov
jecxz
(bad)
push
in
in
cmc
(bad)
fidivr
sbb
outs
test
out
std
call
xchg
jmp
cli
mov
mov
cld
fisttp
aas
add
push
loopne
fst
add
push
adc
lea
mov
jnp
lds
push
push
pop
lock
sti
mov
test
mov
mov
inc
nop
idiv
mov
lds
jne
add
xor
in
cmp
ins
js
jmp
adc
jnp
jne
push
xchg
jmp
(bad)
ds
pop
adc
loope
xor
das
(bad)
loopne
inc
(bad)
punpckldq
or
mov
or
call
push
call
sub
ins
add
(bad)
std
call
mov
jecxz
sbb
mov
sub
inc
rcr
and
idiv
(bad)
push
in
fdiv
(bad)
fidiv
sbb
ret
test
mov
test
mov
mov
cld
xchg
push
loopne
add
int
add
rcr
jle
fst
add
iret
xchg
ror
test
mov
xchg
in
inc
pop
lds
xor
popa
das
adc
jp
pop
cmp
pop
adc
cmp
pop
cmp
mov
and
push
push
call
bt
mov
fchs
add
add
sbb
fsub
xchg
fimul
xchg
inc
adc
inc
xchg
jmp
fadd
div
(bad)
jne
fidivr
call
push
in
mov
mov
dec
mov
xchg
imul
jmp
mov
mov
repz
pop
add
push
or
jmp
add
(bad)
in
stc
push
add
jge
cmp
cld
jmp
add
mov
call
(bad)
dec
mov
das
dec
add
push
cmp
(bad)
jne
xchg
cld
stos
call
fs
mov
xor
add
nop
call
mov
mov
add
jne
mov
jp
push
cmp
cmp
add
pop
test
scas
xor
call
bound
(bad)
adc
and
call
mov
ins
mov
sbb
call
test
add
sbb
je
call
push
add
push
add
add
pop
xor
adc
pushf
cld
stos
inc
mov
cmp
adc
pusha
rol
add
imul
jnp
stos
xchg
mov
xor
clc
xor
cmp
xor
test
cmp
(bad)
pop
lods
push
(bad)
jg
inc
lods
clc
(bad)
inc
add
out
sub
mov
xor
ins
cmp
out
lods
cwde
push
nop
call
daa
call
sub
push
add
add
add
add
bound
mov
test
std
lods
add
jle
jmp
jns
jne
lods
(bad)
jp
in
inc
add
push
rcl
jno
inc
test
in
push
(bad)
sbb
daa
pushf
in
mov
(bad)
call
pop
lods
lea
loope
addr16
lea
or
adc
imul
(bad)
stc
(bad)
cli
out
push
test
or
shr
(bad)
adc
call
in
mov
movs
jnp
push
push
mov
add
cli
sub
push
call
movs
sar
popf
xchg
pop
enter
(bad)
push
aam
call
pop
mov
mov
push
xchg
ins
nop
and
in
jb
jmp
(bad)
pusha
in
out
arpl
inc
add
stc
lds
(bad)
out
arpl
inc
xchg
cmp
jne
(bad)
jns
loop
call
rcl
ins
mov
sar
into
not
pop
mov
dec
sub
xchg
cmp
(bad)
clc
cmps
mov
add
in
inc
fstp
dec
lea
add
pushf
loopne
call
add
dec
je
cmc
(bad)
jg
jmp
push
cwde
gs
call
mov
push
cld
or
pop
add
int3
cmp
outs
test
pop
test
loope
cld
call
je
xchg
push
cld
or
add
pop
add
fnstcw
daa
adc
cld
(bad)
fldcw
call
rol
lods
adc
add
iret
ja
jmp
clc
jmp
add
mov
sti
sbb
div
pop
sub
add
adc
add
cwde
data16
retf
xor
inc
sahf
std
stos
fmul
adc
loope
adc
inc
stc
dec
add
push
and
imul
pop
stc
out
xor
jmp
dec
cld
or
add
ror
test
inc
fdiv
sub
call
adc
jae
or
add
add
aas
pop
cld
inc
inc
test
daa
shl
rol
sbb
ret
daa
sbb
call
data16
test
arpl
mov
retf
test
xor
out
and
test
repnz
stc
inc
add
retf
stc
push
add
inc
xchg
outs
cld
sub
call
enter
pop
pop
call
lea
fistp
test
sar
int3
sbb
mov
jmp
scas
inc
fld
test
std
ficom
push
add
gs
ja
push
test
push
call
push
sub
push
call
add
push
rcl
sti
dec
pop
add
pop
push
add
aam
adc
lahf
cmp
daa
or
dec
push
mov
add
cmp
add
stc
call
push
add
test
mov
mov
xor
cmp
xor
outs
lock
adc
mov
pop
scas
inc
popf
(bad)
lea
ins
and
rcr
mov
mov
xor
enter
add
enter
cmp
in
data16
jmp
call
lea
test
add
push
in
call
leave
imul
adc
mov
(bad)
inc
pushf
test
cmp
adc
call
not
add
bound
dec
add
clc
enter
pop
stc
mov
sub
aas
sub
test
and
test
or
test
push
push
dec
lea
data16
inc
dec
push
xchg
push
jne
fcom
(bad)
movs
and
std
stos
into
add
xor
add
mov
out
int
mov
clc
(bad)
fisttp
std
mov
sar
xor
add
push
(bad)
dec
repnz
stc
call
les
push
adc
jne
retf
or
mov
loopne
aad
not
push
pushf
push
add
jge
push
cld
add
mov
or
into
stc
out
inc
cld
(bad)
mov
das
loope
leave
into
not
jne
ins
mov
sub
scas
and
ds
test
(bad)
push
shl
mov
mov
add
aad
mov
mov
or
std
mov
add
jecxz
push
sar
push
xchg
add
mov
es
pop
sbb
test
fcom
jmp
dec
lea
pusha
je
idiv
dec
shl
sti
add
sub
call
push
mov
cmc
cs
not
adc
imul
fdivr
outs
pushf
jne
arpl
push
ins
or
xor
int3
imul
push
add
movs
call
test
add
outs
retf
ins
or
adc
add
ds
inc
loopne
inc
add
mov
loopne
idiv
outs
mov
sbb
dec
mov
inc
add
int3
jnp
test
outs
mov
stos
mov
pop
int
div
fdivr
cwde
int3
push
cmp
test
add
add
outs
fsub
jmp
test
ds
imul
push
or
push
stos
bound
or
or
sbb
jne
cs
add
xor
cwde
mov
cld
push
sbb
add
mov
inc
cld
stos
out
add
dec
cld
call
xor
call
sbb
sahf
inc
and
fcmovne
pop
add
mov
add
xor
rol
jnp
fndisi(8087
cli
jnp
test
mov
call
xchg
mov
add
sti
push
and
pop
out
inc
add
out
adc
and
pusha
mov
pop
cmc
das
push
in
aam
jecxz
pusha
cmp
sbb
inc
cmp
sub
rcl
test
iret
mov
stos
fimul
and
rcl
push
xchg
push
cld
push
int
add
xchg
inc
cmc
call
add
adc
(bad)
jmp
leave
add
bound
icebp
add
jnp
lahf
bound
mov
dec
or
outs
mov
fmul
nop
pushf
pusha
inc
push
repz
repnz
or
add
iret
cmp
add
nop
fadd
add
call
(bad)
push
ja
test
shl
imul
lds
cmp
outs
call
cmp
addr16
(bad)
frstor
push
gs
jnp
push
add
xchg
adc
stc
dec
dec
into
adc
pop
cmp
test
sub
add
or
xchg
jne
sub
push
mov
xlat
ins
or
popa
adc
inc
cmp
mov
add
outs
or
jmp
adc
xchg
imul
in
idiv
or
cmp
inc
int
mov
(bad)
(bad)
int3
cwde
imul
fst
add
repnz
or
stos
add
cmp
call
sbb
pop
jmp
adc
push
cmp
or
(bad)
aam
mov
mov
mov
sbb
pushf
mov
call
adc
cmp
in
rcpps
ror
pop
add
or
or
push
stos
in
or
and
pop
(bad)
inc
push
pop
add
push
idiv
shl
inc
popf
test
test
lods
(bad)
stos
inc
test
add
pusha
sbb
push
aam
add
outs
test
sbb
cld
push
jnp
jo
add
ror
pop
test
cmc
mov
jmp
out
sti
sti
jmp
xchg
cmc
push
cmp
shl
adc
push
retf
clc
(bad)
fisttp
mov
mov
rol
xor
jnp
js
shr
imul
pop
call
stos
mov
mov
sti
add
mov
bound
pop
das
inc
popf
jp
sahf
test
add
out
mov
test
cdq
cmp
(bad)
nop
enter
adc
mov
aam
lea
cdq
ins
cld
add
dec
mov
jne
add
sbb
popf
cmp
cld
stos
cwde
xor
fst
test
add
sahf
cmp
cld
call
fcomp
cli
mov
mov
test
sbb
cmp
pop
mov
push
shr
fcomp
lea
in
cli
sbb
imul
jae
test
sti
jp
push
in
push
data16
imul
add
jae
add
cmps
sbb
mov
push
shr
fsub
push
pop
fmul
(bad)
fst
test
sti
xor
and
jmp
adc
shl
push
fmul
jae
sub
or
jns
popf
mov
jmp
cmp
stos
xchg
xor
add
mov
bound
inc
pop
cmp
pop
aam
pusha
jne
inc
adc
mov
iret
cmp
cwde
aam
inc
ss
out
(bad)
adc
dec
sub
aam
imul
adc
ins
test
test
xor
lahf
cmp
std
push
pusha
add
int
add
test
cmp
(bad)
test
adc
cwde
mov
sbb
push
(bad)
jge
cmp
mov
push
xor
inc
aas
push
cmc
jg
cld
cli
movs
mov
dec
lock
cmp
int3
add
sbb
test
add
jle
(bad)
stos
std
pop
push
scas
(bad)
test
sar
jbe
push
clc
jp
test
sbb
cmp
pusha
xor
and
test
scas
in
cmp
push
mov
inc
add
test
js
fsubr
addr16
xor
push
lea
dec
call
xchg
test
mov
jne
inc
test
inc
call
(bad)
adc
jmp
mov
cld
push
cmp
(bad)
fadd
dec
xor
push
pushf
call
jecxz
sti
call
aas
push
xchg
cdq
ins
pushf
adc
add
scas
push
call
pop
loope
mov
pusha
ins
mov
cli
sti
inc
stc
dec
call
mov
call
and
out
icebp
sti
(bad)
(bad)
aas
test
idiv
mov
dec
pop
cld
push
test
inc
sub
sub
(bad)
ror
mov
xchg
ins
ins
or
pop
aam
xchg
cli
sti
call
push
cwde
push
call
mov
add
call
adc
stc
imul
popf
lods
je
imul
mov
sti
inc
add
test
inc
sub
arpl
or
aas
dec
(bad)
rcr
out
hlt
sti
jmp
fsub
lahf
mov
pop
push
inc
test
js
imul
call
es
xchg
call
dec
sbb
push
sub
add
imul
adc
mov
add
mov
add
popf
cmp
mov
cwde
jne
cmc
inc
out
(bad)
jmp
add
pushf
dec
aam
pop
pushf
call
ret
or
adc
jg
sti
call
mov
inc
jne
ret
xor
inc
bound
pop
in
call
push
into
loopne
add
push
ins
test
jno
(bad)
push
je
inc
popf
push
cdq
add
jl
mov
outs
add
xor
lds
lea
(bad)
hlt
call
adc
add
imul
mov
inc
test
sub
int
(bad)
mov
lds
add
or
idiv
push
clc
clc
out
out
sti
jmp
cmp
jnp
call
mov
lds
jg
sti
jmp
rol
push
icebp
call
cmp
mov
xor
fnstcw
jg
ins
and
iret
test
loopne
repnz
mov
push
sub
test
push
add
clc
mov
mov
lea
add
outs
aam
test
stc
dec
gs
lea
adc
int
mov
inc
out
mov
lds
mov
or
add
cmp
mov
adc
mov
push
mov
add
and
adc
and
mov
imul
push
dec
call
or
jae
ins
dec
push
mov
je
push
add
sbb
push
add
into
in
call
inc
mov
inc
and
outs
xor
and
fs
std
nop
xchg
and
sbb
add
add
mov
push
mov
and
xchg
sbb
pushf
pop
add
test
(bad)
cld
stos
inc
bound
cmp
and
sbb
cld
stos
xchg
test
inc
bound
call
xor
sub
jae
mov
pop
imul
dec
adc
add
movs
inc
xchg
popa
sbb
cwde
dec
adc
ja
push
inc
add
in
add
adc
and
push
push
mov
(bad)
and
adc
sub
lea
adc
loop
ins
and
imul
ror
pop
push
ret
adc
sub
(bad)
rol
cmp
not
je
add
dec
adc
repnz
call
cld
mov
add
dec
js
jb
imul
cwde
pop
mov
sbb
in
mov
jecxz
mov
cld
push
into
jmp
push
int3
sbb
add
not
push
push
and
out
ins
ins
call
dec
mov
out
jnp
not
push
and
add
add
inc
mov
call
ins
sub
cdq
push
jl
jno
add
dec
ins
cmps
imul
call
jmp
mov
call
call
mov
je
or
adc
mov
idiv
stos
inc
test
(bad)
fstp
and
adc
add
outs
pop
cld
push
inc
and
addr16
call
popf
xchg
or
stc
call
adc
cmp
pop
add
pop
xchg
mov
dec
cli
push
mov
add
popf
dec
call
adc
add
adc
cli
adc
sbb
cmp
and
jl
lods
stos
arpl
shl
cmp
and
sbb
add
jnp
nop
mov
(bad)
leave
bound
int
and
sbb
add
jnp
push
pushf
xchg
ins
and
jl
pusha
mov
push
xchg
ins
and
retf
add
jne
add
xchg
jnp
pusha
cmp
je
mov
cmp
or
not
(bad)
fbld
adc
mov
dec
jnp
addr16
popa
loope
push
adc
mov
scas
mov
call
mov
add
ds
pop
xlat
add
popf
sti
pop
add
shl
push
stc
dec
inc
mov
call
outs
test
dec
retf
jns
add
xchg
jp
(bad)
les
sbb
xchg
lods
dec
push
adc
add
in
xchg
jmp
je
mov
mov
outs
clc
dec
stos
dec
inc
add
mov
mov
jl
popa
adc
add
jp
repnz
(bad)
adc
add
ficomp
sar
ins
and
sbb
and
jns
pop
jns
dec
push
push
ins
and
jns
pop
mov
pushf
push
lods
and
adc
add
dec
bound
call
adc
(bad)
shl
dec
adc
sti
inc
cld
jmp
mov
bound
jmp
cld
sbb
in
cmp
mov
loopne
scas
test
stos
jns
sti
stos
fs
push
and
push
frstor
cmp
or
fst
pop
test
add
cmps
pop
pop
mov
add
sub
call
xchg
pop
add
daa
in
nop
pop
mov
popf
jge
pop
sbb
cmp
lods
and
mov
fwait
test
pop
sbb
jmp
adc
sbb
adc
stos
ds
mov
add
lods
clc
pop
add
jno
test
inc
mov
mov
dec
sahf
loopne
cmp
mov
mov
int
add
mov
pushf
pop
add
xchg
mov
inc
popf
inc
test
inc
mov
call
call
adc
dec
jmp
mov
add
dec
mov
loop
xor
add
mov
loopne
pushf
push
push
daa
adc
dec
pop
dec
and
jg
pop
test
xchg
lods
and
pop
add
gs
push
cld
push
bound
pop
and
call
push
std
clc
mov
fadd
lea
mov
call
test
sbb
push
scas
push
and
fist
xchg
lods
and
mov
or
dec
xor
fwait
clc
(bad)
cli
add
adc
fisub
adc
inc
and
or
and
xchg
dec
and
dec
and
jmp
push
push
dec
and
in
and
retf
(bad)
push
add
mov
ins
sbb
dec
and
mov
and
and
add
xor
dec
jmp
add
mov
adc
inc
leave
mov
ins
and
sbb
cmp
push
add
add
and
push
or
sbb
lock
(bad)
jle
clc
mov
add
imul
mov
adc
fst
mov
adc
add
dec
push
pop
inc
sbb
xor
push
or
pop
movs
mov
in
add
xor
mov
add
ror
in
call
dec
jmp
mov
add
js
xchg
jmp
pop
mov
dec
adc
(bad)
pusha
js
call
adc
add
aas
test
sbb
jecxz
mov
icebp
(bad)
cmp
not
push
cld
add
adc
mov
jg
call
push
cli
clc
mov
pop
sbb
call
adc
add
jae
adc
add
hlt
nop
pop
mov
out
add
xbegin
lock
adc
add
in
in
mov
jmp
dec
xor
popa
adc
push
into
ins
test
test
rol
xor
imul
fs
ret
call
add
pop
push
aam
cmp
rcl
mov
outs
dec
(bad)
push
mov
call
jp
xchg
test
cli
das
pop
pusha
adc
mov
jle
stos
ins
test
dec
or
out
(bad)
nop
ins
cli
dec
enter
jmp
dec
aam
push
add
lea
not
aad
add
(bad)
mov
push
mov
aam
cld
sar
xchg
test
stc
pop
pop
and
push
lea
idiv
push
mov
mov
ins
test
cmp
mov
xor
cmps
push
cmp
cld
push
jns
mov
ins
jnp
dec
sar
pop
nop
adc
shl
idiv
cli
inc
call
adc
div
sar
test
js
mov
imul
inc
int3
push
push
pop
mov
adc
push
scas
add
imul
add
inc
call
inc
test
jne
push
cld
mov
xor
loope
ss
not
sbb
call
and
lea
enter
in
lea
mov
xchg
imul
or
cld
inc
mov
pop
cld
stos
jecxz
lea
add
mov
pusha
cmp
movs
(bad)
stos
mov
not
or
pop
cld
push
ds
jne
mov
jp
add
pop
je
imul
add
mov
cmc
call
xor
add
or
aam
adc
pop
nop
sbb
repnz
mov
jnp
sbb
test
add
out
jne
push
(bad)
call
xchg
bound
cwde
dec
aam
test
cld
call
cmps
cmc
call
clc
imul
call
xor
cmp
cmp
arpl
(bad)
fst
inc
xchg
popa
imul
ds
mov
loopne
add
cdq
mov
stc
mov
loopne
sub
nop
loopne
int3
mov
dec
mov
out
inc
sbb
popa
add
inc
or
pusha
nop
not
in
dec
mov
add
inc
or
xchg
dec
call
xor
jp
sbb
in
pop
sahf
loope
in
or
xor
add
and
dec
cdq
in
jbe
mov
or
and
push
adc
out
iret
mov
in
cmp
xchg
dec
in
push
sbb
call
add
dec
sar
add
push
mov
(bad)
nop
hlt
push
mov
stc
jl
inc
sbb
add
push
mov
jg
adc
not
fs
test
adc
fwait
mov
push
add
(bad)
ror
repz
enter
les
push
add
or
lods
or
adc
adc
push
fld
inc
movs
sbb
add
pop
adc
ror
cmp
lock
inc
in
cmp
dec
mov
aas
ror
cmps
mov
mov
mov
rcl
arpl
sbb
mov
mov
mov
add
or
adc
dec
add
sahf
cmp
mov
add
mov
(bad)
aas
cs
lea
cmp
mov
jl
mov
cdq
mov
sbb
xchg
pop
add
cdq
mov
sbb
xchg
pop
add
cdq
mov
xchg
add
add
cmp
push
stos
sub
jmp
mov
test
inc
cmp
cmp
mov
lahf
inc
add
jmp
adc
inc
test
(bad)
(bad)
and
mov
pop
dec
inc
jnp
xchg
lahf
cmp
jge
clc
mov
adc
jne
mov
cli
jnp
mov
mov
or
ja
add
sbb
fiadd
cmp
es
or
jecxz
xor
movs
fisubr
mov
jmp
jmp
jnp
ror
ret
push
pop
test
mov
inc
or
push
jne
popf
and
test
int
cmp
inc
add
test
out
lea
dec
or
add
mov
cmp
scas
div
push
mov
jne
movs
dec
sar
mov
inc
or
mov
(bad)
movs
push
stc
dec
dec
mov
sbb
sbb
dec
cwde
call
add
pusha
push
ins
add
fs
sub
mov
in
sub
mov
pop
adc
iret
jb
lahf
ds
adc
xchg
push
(bad)
adc
jecxz
mov
sbb
add
mov
or
rcr
fst
mov
loopne
ss
pop
sahf
test
je
xchg
lock
add
xlat
jp
cwde
sub
adc
and
inc
dec
lea
idiv
stos
mov
(bad)
(bad)
(bad)
movs
ins
aam
(bad)
add
addr16
push
bound
sbb
sbb
xchg
pop
test
sub
jmp
aas
je
push
adc
pop
test
mov
xor
fisttp
repz
and
mov
sbb
pusha
hlt
not
dec
push
push
stos
sub
inc
in
(bad)
loopne
dec
call
mov
ret
sbb
loopne
pop
mov
ret
add
(bad)
jmp
inc
xor
cdq
add
push
add
mov
rcr
add
push
add
cmp
push
adc
les
cmp
add
add
push
pushf
jmp
lahf
push
and
outs
push
adc
test
test
jmp
mov
jmp
push
add
imul
leave
jno
call
nop
push
ins
add
add
jecxz
push
mov
sbb
mov
pop
inc
fsub
adc
adc
mov
adc
inc
rol
dec
add
pop
add
mov
mov
jno
add
xor
inc
jno
xor
loopne
sub
test
and
dec
push
cwde
shl
pop
cmc
scas
jle
call
jmp
cmp
test
call
push
xor
dec
test
loopne
mov
test
test
bound
sbb
and
push
cld
call
and
add
adc
add
and
push
loopne
pushf
lods
test
xchg
adc
(bad)
lods
test
xchg
dec
ror
and
cmp
mov
pop
cld
stos
xchg
mov
add
popf
inc
aam
aad
bswap
adc
call
add
inc
and
add
mov
sub
push
dec
loopne
pop
lods
test
push
inc
push
call
fs
ins
shr
dec
ror
loop
cld
jmp
call
or
pop
div
fwait
jne
cmc
mov
aam
cmp
(bad)
je
xchg
fmul
lea
mov
les
inc
test
mov
add
lahf
mov
mov
cmp
adc
pop
lods
div
stos
cwde
jmp
jge
push
adc
and
sar
out
dec
cld
jmp
push
loope
pop
adc
lea
add
lods
test
stc
sbb
add
mov
fistp
push
cld
xchg
inc
int3
mov
cmp
xchg
call
push
dec
push
inc
sbb
jmp
(bad)
cmp
push
cmp
xchg
ins
mov
and
jbe
es
loopne
add
adc
test
jecxz
sub
pop
xchg
cmp
push
adc
mov
push
aam
sub
mov
jo
je
(bad)
into
stos
lea
inc
cld
inc
(bad)
loopne
test
dec
aad
inc
pop
test
mov
mov
jg
add
sar
jg
or
add
push
adc
dec
dec
or
and
dec
add
xor
dec
add
adc
sbb
push
inc
add
push
inc
add
push
add
cmc
sbb
int
or
in
inc
add
push
or
aad
inc
add
push
adc
movs
sbb
add
popf
push
adc
mov
inc
add
sbb
popf
push
adc
aad
inc
add
pop
mov
ret
mov
ret
dec
mov
jne
fsub
sub
stc
mov
xlat
(bad)
jg
adc
add
pop
sbb
clc
mov
xlat
(bad)
jg
cmp
pushf
xlat
(bad)
jg
(bad)
mov
(bad)
jg
cmp
pop
xlat
(bad)
jg
cmp
(bad)
mov
pop
adc
pop
sbb
mov
push
test
adc
adc
sbb
adc
sbb
mov
push
sub
lahf
(bad)
mov
(bad)
sbb
push
push
mov
inc
or
mov
add
sahf
les
mov
lea
add
cmp
jbe
push
and
mov
adc
sbb
or
mov
loope
mov
or
dec
adc
sbb
push
sub
unpckhps
push
cmps
lods
dec
mov
push
dec
push
sub
(bad)
and
adc
add
xchg
mov
sub
push
dec
mov
mov
call
or
push
xor
adc
add
pop
adc
push
push
lods
add
cmp
fimul
mov
add
mov
inc
or
aad
pop
jno
add
inc
test
or
aad
pop
jno
dec
mov
sbb
adc
mov
popa
inc
add
int
lahf
jne
mov
mov
sbb
and
bound
call
sub
sahf
loopne
sbb
popf
adc
mov
dec
adc
add
xchg
arpl
aas
add
lea
add
jo
push
jne
jmp
add
xor
(bad)
cmp
inc
dec
inc
test
mov
test
dec
not
ror
sti
add
lods
cli
call
sbb
leave
xchg
xlat
pop
mov
cmp
fcom
add
inc
not
(bad)
mov
xchg
adc
dec
imul
dec
cld
stos
fwait
test
push
lahf
and
inc
jmp
adc
pop
jmp
mov
jo
push
sbb
push
sbb
mov
xlat
(bad)
inc
mov
mov
sbb
mov
sbb
push
cdq
mov
dec
cwde
cmc
jmp
or
cmp
bound
mov
adc
inc
push
jnp
mov
jne
xor
popf
movs
es
mov
mov
dec
push
and
push
stos
inc
sub
adc
pop
xor
add
lahf
mov
cld
adc
dec
push
mov
mov
mov
sbb
mov
push
cld
inc
aad
out
mov
inc
jns
iret
mov
ret
dec
push
out
movs
cmp
aad
push
cmp
and
pop
sub
inc
mov
add
int
cmp
push
fdivr
and
or
sar
jae
cli
jae
movs
mov
jmp
jns
dec
adc
cmp
popf
adc
mov
ss
cmc
mov
cld
jmp
push
(bad)
ins
or
xchg
inc
cld
mov
mov
call
clc
push
add
ret
std
scas
enter
mov
sar
sahf
and
aam
adc
sbb
and
clc
dec
cwde
dec
dec
imul
call
(bad)
push
stc
mov
sub
cmp
not
pop
test
mov
dec
push
xchg
inc
cmp
dec
bound
enter
add
ja
cld
(bad)
jle
stc
mov
cwde
or
mov
fidivr
inc
or
push
xor
push
dec
cld
stos
(bad)
cmp
call
jmp
push
pop
sub
test
int
xor
mov
add
mov
imul
loope
call
mov
cmps
jnp
mov
xor
add
xchg
outs
sbb
std
dec
cld
stos
xchg
outs
cmp
jl
sub
cld
or
cld
jmp
call
test
mov
pop
and
mov
pop
(bad)
ror
sti
push
mov
inc
jno
fmul
mov
add
cmp
push
push
dec
int3
aas
call
cmc
sbb
test
mov
mov
sub
mov
rol
push
add
stos
inc
bound
call
cmp
(bad)
jle
stc
mov
movs
test
dec
push
xchg
add
sar
out
add
call
inc
test
push
add
sub
test
adc
jne
neg
mov
lea
pop
add
test
cli
pop
bound
ror
gs
call
adc
clc
div
data16
jnp
add
cld
jle
lea
inc
je
add
test
adc
push
jl
aas
add
xchg
add
push
add
aas
cs
mov
stc
mov
sbb
pop
inc
inc
xchg
jbe
adc
je
add
and
int
test
push
call
aam
inc
fstp
add
rol
add
adc
data16
and
(bad)
call
adc
iret
call
add
shr
mov
idiv
adc
xlat
mov
mov
sbb
mov
(bad)
sar
clc
dec
jo
inc
and
mov
push
cld
sub
push
cmps
cmp
std
inc
je
inc
loopne
mov
push
int
rcl
sbb
push
add
mov
add
jne
mov
mov
idiv
push
push
cdq
imul
(bad)
jp
cmp
rcl
push
mov
nop
loopne
or
jns
in
add
inc
push
cmp
push
cmp
lods
jl
mov
call
mov
stc
mov
add
call
scas
xchg
sbb
and
sbb
mov
retf
jmp
stos
not
stos
and
(bad)
idiv
add
adc
pop
sbb
call
jmp
dec
pusha
movs
int
add
test
std
stos
clc
icebp
lea
clc
dec
dec
mov
inc
stc
dec
xchg
xchg
mov
data16
xchg
adc
popf
inc
test
les
mov
mov
pop
(bad)
rol
add
aas
bound
mov
mov
not
(bad)
test
stos
mov
pop
cmp
mov
add
call
jmp
adc
and
mov
call
push
cmc
ins
call
mov
call
xchg
mov
jge
mov
xor
mov
(bad)
test
popa
push
test
cdq
ds
mov
call
add
mov
aam
inc
test
(bad)
imul
(bad)
ins
movs
(bad)
adc
test
(bad)
test
adc
jecxz
jne
inc
cld
jp
mov
popf
adc
adc
cmp
je
call
popf
adc
(bad)
cmp
push
jmp
idiv
mov
pushf
loopne
rcr
(bad)
jmp
push
push
stc
mov
test
add
div
pop
nop
aas
sub
(bad)
inc
pop
push
inc
fst
cdq
add
pop
add
pop
cmp
fisttp
cdq
inc
nop
aad
xor
inc
dec
push
add
sbb
repz
add
pop
push
lea
das
mov
stos
out
icebp
xor
daa
cmp
or
test
jmp
popf
ins
(bad)
push
jge
dec
call
stos
sbb
add
cdq
idiv
add
fst
add
jmp
fsubr
not
push
or
ficom
push
popf
int3
sub
add
stos
cwde
(bad)
dec
fdiv
cld
(bad)
jmp
test
jle
imul
jmp
cs
call
pushf
not
adc
call
jmp
dec
mov
push
test
jmp
dec
xor
lea
test
jmp
adc
cld
push
push
test
or
loopne
dec
cwde
add
div
in
jge
cli
xchg
test
retf
cwde
idiv
cli
test
call
jl
dec
adc
outs
push
test
cld
push
jmp
mov
cwde
loopne
into
cwde
test
cwde
aad
(bad)
cmp
adc
jmp
inc
xchg
test
add
fst
lea
or
or
adc
cmp
cdq
div
xchg
test
add
xchg
out
test
idiv
pop
push
mov
sub
lods
and
xchg
imul
ja
hlt
call
pop
hlt
add
add
mov
sbb
mov
not
add
sbb
push
xor
sqrtps
clc
dec
sahf
mov
dec
xchg
test
xchg
loopne
es
mul
xor
and
mov
stos
ins
jmp
and
mov
xchg
dec
lea
stos
mov
stos
inc
loopne
fsubr
test
add
dec
adc
popa
ins
dec
lea
pushf
mov
jmp
jmp
xchg
mov
(bad)
fst
adc
mov
stos
sti
jmp
mov
cmp
lds
out
outs
hlt
call
push
idiv
pushf
fwait
mov
inc
add
imul
call
mov
mov
aaa
adc
inc
dec
cld
sub
cmp
add
xchg
cmp
inc
cdq
popf
inc
stos
xchg
idiv
mov
mov
mov
stos
add
inc
mov
idiv
and
mov
add
add
push
add
push
idiv
xor
popf
test
sub
mov
push
pusha
sar
pusha
fs
push
clc
(bad)
add
pop
outs
hlt
push
xchg
mov
and
xchg
test
dec
stc
pushf
inc
or
call
push
add
test
add
lea
test
mov
and
sbb
xchg
push
mov
xchg
test
push
test
dec
adc
pop
push
add
sti
sbb
mov
push
test
or
not
mov
out
mov
and
in
test
and
sub
dec
push
test
(bad)
mov
push
hlt
jmp
jmp
test
call
lea
mov
call
(bad)
mov
jmp
(bad)
and
add
or
idiv
add
inc
jo
sar
dec
imul
int3
test
call
push
jle
mov
mov
mov
cmp
inc
test
inc
loopne
cmp
jmp
push
test
call
fcomp
dec
(bad)
nop
xchg
add
dec
xchg
cli
out
push
hlt
dec
add
sahf
idiv
xchg
xlat
pop
test
add
lds
jge
push
not
or
clc
into
add
push
push
jmp
test
std
(bad)
jb
mov
loope
pushf
push
add
stos
aas
loopne
fsubr
neg
xchg
test
pop
push
dec
(bad)
nop
xchg
or
pop
pop
hlt
inc
add
xor
cld
dec
dec
inc
stc
out
ins
bound
pusha
lock
mov
loopne
cdq
out
je
push
clc
mov
int3
mov
stos
sar
dec
test
test
mov
mov
imul
test
sbb
add
add
std
call
rcl
adc
xchg
mov
test
idiv
jge
cmp
je
call
inc
jo
sar
dec
stc
out
push
call
(bad)
push
hlt
dec
jp
mov
test
jmp
call
lods
add
imul
add
mov
hlt
(bad)
(bad)
jp
mov
shl
imul
lods
loopne
call
cli
out
push
hlt
(bad)
cmp
push
or
loopne
mov
movs
cmp
call
in
loopne
cwde
in
test
lea
test
into
div
inc
add
adc
dec
cdq
jmp
push
popf
lods
loopne
jmp
(bad)
rcr
cli
out
push
hlt
call
clc
mov
adc
dec
(bad)
jmp
pop
adc
jns
mov
adc
test
lods
idiv
jne
cmp
mov
xchg
inc
fucomi
test
lea
lea
add
pop
mov
sub
sbb
sub
(bad)
(bad)
mov
jmp
sbb
jmp
lods
add
imul
xchg
cmps
hlt
(bad)
faddp
add
push
bound
cwde
movs
mov
stos
jmp
xchg
push
hlt
add
mov
(bad)
(bad)
inc
add
add
test
int
jmp
adc
jmp
mov
jo
inc
test
call
in
mov
retf
fucomip
neg
jbe
push
lea
hlt
pmaddwd
aas
cld
cli
pop
not
inc
test
cmc
mov
dec
lea
add
jmp
push
push
jmp
out
fdivp
push
add
imul
aaa
dec
hlt
call
inc
mov
push
cwde
inc
hlt
icebp
call
cmp
mov
sub
mov
push
std
stos
fidivr
inc
fsub
sub
hlt
inc
add
dec
(bad)
rcl
mov
jmp
inc
inc
mov
mov
fdiv
push
daa
adc
call
hlt
add
cmp
stos
cwde
mov
imul
mov
clc
(bad)
fisttp
fld
int
xor
jne
push
sbb
loopne
(bad)
fdiv
push
cmp
mov
test
fdiv
(bad)
sar
mov
sub
(bad)
jge
test
fucomi
test
adc
idiv
test
dec
xchg
dec
mov
adc
not
sbb
jmp
inc
bound
cwde
movs
fdivr
pop
in
not
sbb
stos
idiv
mov
sar
push
pusha
mov
sub
add
or
jmp
push
jne
imul
sbb
push
cmp
jmp
inc
shr
sub
stc
mov
and
cld
dec
out
mov
jmp
idiv
(bad)
lock
add
stos
jmp
pop
pop
add
pushf
cmp
cwde
mov
mov
and
imul
(bad)
add
int3
mov
pusha
stos
mov
push
mov
cmp
jmp
fisub
test
push
hlt
pop
movs
dec
(bad)
stos
ds
push
cdq
lods
mov
loopne
mov
add
sub
and
call
test
(bad)
test
cmc
lahf
hlt
jmp
out
sets
mov
lock
mov
loope
pop
push
add
stos
cmp
cwde
cdq
sbb
and
imul
push
cmp
mov
pusha
pushf
mov
push
mov
mov
add
popa
or
lea
call
movs
xchg
jmp
call
loopne
mov
sub
mov
push
call
nop
fcom
jmp
out
or
inc
loope
or
add
stos
in
popf
fild
add
pop
test
inc
pusha
jne
ins
fs
adc
idiv
jne
inc
cld
push
ins
or
adc
mov
cmps
idiv
push
mov
inc
cld
call
push
push
into
dec
lea
sbb
cld
jle
rcl
sub
push
pop
mov
dec
hlt
and
aaa
inc
cld
add
jmp
mov
pop
in
push
ja
test
movs
in
cld
stos
inc
bound
cwde
popf
fdivr
cmp
call
push
cmp
push
lea
mov
push
loopne
cmp
test
adc
inc
cdq
sub
call
test
sti
loope
(bad)
nop
in
call
mov
mov
mov
stc
in
pop
rcl
loope
sbb
inc
pop
test
add
mov
sbb
adc
push
cwde
mov
mov
adc
call
add
sbb
push
cmp
loop
(bad)
adc
and
dec
jb
dec
add
pop
sbb
call
hlt
sub
cmp
call
lea
idiv
mov
aas
cld
cmp
jge
jmp
not
pop
push
call
retf
cmp
lock
push
push
ja
test
movs
xchg
aas
mov
add
mov
out
loopne
idiv
mov
jmp
cmp
fld
int3
mov
jmp
mov
mov
hlt
add
aaa
cld
push
test
cmp
idiv
dec
aam
dec
pop
cmp
cld
stos
fidivr
jo
adc
add
mov
cmp
test
jmp
test
and
xchg
mov
push
loop
jne
mov
dec
mov
test
dec
dec
(bad)
shl
dec
jecxz
(bad)
shr
es
les
inc
cmp
dec
inc
test
mov
dec
push
fld
call
(bad)
ds
mov
xor
mov
dec
push
(bad)
call
ror
stc
push
(bad)
adc
push
xchg
mov
fucomi
imul
or
clc
call
lea
mov
imul
test
or
adc
inc
sbb
in
test
add
add
cmp
inc
mov
dec
push
xchg
lods
add
jmp
call
push
test
mov
or
(bad)
call
adc
ins
add
loopne
pop
jmp
lea
add
pop
xchg
ds
nop
clc
dec
not
(bad)
sbb
sbb
test
mov
(bad)
in
adc
int
add
add
jmp
cmc
push
add
fld
lea
cmp
push
call
shl
push
jmp
not
xor
cld
mov
inc
cld
push
shr
int
mov
test
rol
and
out
pop
cmc
call
dec
add
(bad)
fnsave
addr16
sbb
add
xchg
popa
adc
inc
dec
mov
mov
mov
adc
cmp
jmp
and
adc
test
inc
dec
push
mov
div
fnsave
add
push
xor
pop
retf
iret
cmp
add
loopne
adc
ror
int
push
push
test
push
mov
fidivr
ror
sbb
(bad)
rcl
ins
daa
mov
and
jge
mov
jge
popa
add
jne
fnstcw
dec
test
out
mov
clc
push
movs
mov
stos
fsubr
(bad)
fnstcw
cmp
call
ins
aam
jbe
cld
call
std
push
dec
mov
adc
idiv
push
bound
test
jmp
cmps
cmp
cmps
adc
loop
clc
out
push
hlt
jmp
rcl
push
inc
sub
(bad)
pop
cld
add
dec
inc
not
(bad)
add
ins
test
push
out
push
hlt
call
cmp
adc
stc
jbe
clc
out
pop
cmc
jmp
add
faddp
dec
mov
and
pop
push
sbb
push
push
push
enter
loope
add
test
div
mov
push
jmp
sbb
push
inc
in
neg
pushf
rcl
cmp
std
or
call
(bad)
nop
mov
call
mov
xor
and
std
mov
jmp
stc
call
adc
push
cwde
movs
call
retw
test
idiv
xchg
push
hlt
add
cmp
adc
cli
out
ds
call
pop
add
jne
aad
cld
sahf
mov
dec
push
fld
mov
cmp
cmp
add
(bad)
in
loopne
mov
not
adc
cld
cmc
repz
jmp
gs
ret
test
test
and
popa
ins
loop
clc
out
dec
hlt
dec
cmp
mov
(bad)
loopne
or
test
add
inc
imul
enter
cld
out
shl
(bad)
(bad)
aaa
stc
mov
mov
dec
push
fiadd
add
mov
cmp
cmp
cmp
std
sub
bound
sub
pop
mov
xor
in
bound
outs
call
pushf
cmc
pop
cmp
fcom
push
fnstenv
stos
ret
test
mov
pusha
je
xchg
clc
dec
pop
xchg
int3
push
xchg
xchg
hlt
add
inc
dec
jmp
pop
mov
psubsb
popa
or
pushf
(bad)
jne
xor
mov
or
call
inc
cmp
mov
mov
das
jbe
test
mov
mov
sub
call
add
sub
xchg
cmp
pushf
loopne
xchg
mov
dec
mov
add
mov
mov
gs
inc
inc
mov
frstor
inc
sub
(bad)
in
idiv
loopne
mov
jmp
dec
loopne
add
test
jne
xor
call
call
inc
outs
stc
mov
mov
loopne
pushf
mov
addr16
xchg
cmp
cmc
call
mov
cmp
in
and
cmp
push
push
adc
out
rcl
(bad)
(bad)
fst
cmp
adc
call
pop
aam
dec
out
adc
pop
test
push
mov
and
xchg
rcl
add
xor
shr
out
loop
cmps
mov
push
mov
dec
std
cmp
ror
inc
pop
dec
push
sbb
les
call
rcr
ins
sbb
cs
clc
mov
jne
adc
and
cmp
cmc
in
cmp
call
jge
int
lock
ret
loope
sti
mov
and
add
push
mov
cmp
or
iret
jne
jne
pusha
cld
push
mov
mov
push
xchg
hlt
add
dec
cld
call
call
push
mov
call
test
cmps
fs
add
mov
jl
int3
push
in
jle
scas
push
clc
mov
dec
add
sti
xchg
clc
pop
out
ins
or
xor
loopne
call
mov
dec
pusha
cmp
xchg
clc
out
cld
sti
jmp
loope
sbb
int3
in
cmp
cdq
add
adc
push
or
mov
lea
adc
add
add
pop
mov
daa
les
pushf
sbb
ins
sbb
fs
sbb
add
ins
or
pushf
sbb
dec
adc
push
push
punpcklwd
dec
adc
mov
clc
pop
mov
add
inc
sbb
cmp
mov
adc
fcmovne
out
test
push
push
sbb
xchg
pushf
sbb
fst
add
fst
add
add
int
pop
mov
cld
mov
popf
adc
add
in
call
adc
mov
out
sbb
push
and
dec
adc
(bad)
loope
les
pop
adc
mov
adc
ja
mov
(bad)
xchg
neg
and
mul
ret
sbb
or
test
(bad)
fstp
or
inc
int3
pop
add
clc
(bad)
frstor
mov
xchg
add
adc
rcr
mov
lock
adc
add
dec
fwait
push
and
dec
xchg
add
test
dec
push
add
mov
cmp
rcr
pop
test
sbb
add
pop
sbb
mov
int
in
sub
jl
icebp
sbb
add
cmp
int
call
push
or
sbb
add
fstp
repnz
call
mov
push
cmp
add
dec
fidivr
repnz
call
mov
les
not
movs
sbb
dec
adc
(bad)
shl
out
pop
adc
out
xor
jle
stc
mov
inc
call
mov
stc
mov
jg
or
mov
push
daa
adc
jae
mov
push
(bad)
adc
addr16
not
add
int3
clc
(bad)
fstp
(bad)
push
das
cld
jp
cmp
sar
pushf
rcr
clc
dec
in
imul
add
pushf
lea
add
pop
sbb
daa
(bad)
in
test
popa
and
scas
add
call
mov
hlt
pop
lea
add
sbb
retf
and
dec
cmp
mov
or
jmp
mov
hlt
pop
mov
xlat
and
pop
fs
pop
add
fisttp
test
fneni(8087
loop
mov
mov
mov
in
dec
xchg
pop
cld
popf
and
in
clc
dec
inc
inc
cmp
add
xchg
mov
push
aam
mov
push
add
jne
sahf
ins
or
scas
inc
sbb
jmp
shr
ins
rcr
idiv
xchg
pop
add
sahf
aas
mov
fst
mov
out
inc
cmc
inc
add
sahf
or
idiv
add
jp
dec
mov
idiv
stos
sahf
xchg
enter
call
push
fadd
stos
jg
mov
sub
xchg
xchg
adc
or
xchg
mov
jmp
push
mov
push
cld
cmps
xchg
aam
stos
out
call
test
fcomp
idiv
stos
mov
xor
add
idiv
stos
cdq
test
xchg
idiv
or
out
push
std
iret
cmp
gs
pop
clc
dec
cmp
dec
(bad)
push
mov
out
xor
inc
test
(bad)
sar
fs
jnp
inc
cmp
(bad)
nop
mov
mov
add
and
imul
stos
call
cld
dec
jg
mov
out
push
test
jo
idiv
stos
mov
dec
push
cmp
loopne
mov
mov
push
sbb
loopne
loopne
test
fwait
in
imul
add
sbb
fwait
jge
stos
in
imul
mov
cmp
add
nop
mov
inc
jmp
jmp
test
movs
mov
mov
loopne
jno
not
pushf
lods
lods
stos
jmp
mov
fnstsw
out
icebp
fcomip
mov
idiv
stos
popf
test
add
nop
idiv
or
jmp
push
or
adc
add
fs
mov
mov
mov
in
idiv
ds
dec
push
fsub
mov
xchg
popf
lods
lods
jmp
test
jb
loop
cwde
pop
idiv
stos
mov
mov
xor
push
hlt
or
push
loopne
cwde
push
idiv
cmp
dec
lea
idiv
mov
xchg
mov
adc
adc
add
fwait
cs
push
push
scas
inc
popf
add
std
aam
cld
mov
in
dec
push
rol
mov
stos
in
dec
call
(bad)
sbb
add
sub
cmp
rcr
in
not
xchg
inc
cld
jmp
(bad)
cli
mov
dec
push
cwde
xchg
movs
dec
in
not
mov
call
push
test
push
jg
lea
sub
jmp
push
cld
jne
sub
push
scas
inc
mov
stos
in
imul
cdq
xchg
idiv
std
mov
fwait
in
imul
movs
cmp
cmp
adc
add
pop
cld
sub
mov
mov
jmp
dec
jmp
push
cwde
xchg
mov
cli
jmp
mov
fdiv
push
or
mov
fucom
jnp
in
test
cwde
ins
idiv
add
cmp
dec
lea
idiv
mov
lods
mov
adc
adc
or
int
call
and
call
hlt
adc
xchg
enter
dec
call
dec
jne
mov
(bad)
push
mov
loopne
idiv
sub
add
xor
jmp
sbb
mov
add
(bad)
cmp
inc
inc
xchg
push
int3
outs
fdivr
dec
nop
cmp
add
nop
push
cld
xor
(bad)
lock
shl
cli
add
pop
call
pop
cmp
adc
popf
jno
mov
pop
clc
adc
and
pop
test
pop
add
add
xor
jmp
iret
cmp
or
pop
add
lea
push
jle
ins
shr
inc
loopne
popa
sbb
pop
stos
jmp
xchg
dec
lea
(bad)
mov
pop
addr16
push
or
jmp
sbb
add
dec
lea
jnp
(bad)
adc
sti
out
aaa
hlt
call
add
push
call
pusha
fdivr
out
es
(bad)
ds
mov
ins
loopne
outs
jmp
mov
imul
cld
sbb
call
jle
stc
mov
idiv
stos
nop
push
cld
cmc
inc
sub
mov
and
idiv
and
loope
fucomi
test
cs
ins
enter
cmp
call
push
cmp
std
stos
aam
mov
div
mov
push
(bad)
hlt
add
mov
push
cmc
mov
push
call
push
or
xor
aam
lods
mov
loopne
movs
out
pop
xchg
push
cmp
fldcw
and
mov
call
ret
mov
popf
loopne
in
call
xor
int
test
lods
xor
imul
mov
mov
inc
mov
call
add
lea
add
data16
sbb
mov
ins
add
mov
clc
mov
pusha
mov
pop
test
and
mov
inc
pusha
ins
jb
clc
mov
test
out
in
imul
dec
sbb
add
arpl
aaa
fcmovnu
(bad)
(bad)
fst
cld
dec
call
add
pop
bound
or
mov
pushf
push
jb
mov
dec
jmp
mov
clc
dec
pop
sbb
mov
ins
mov
retf
jne
inc
std
call
add
and
popf
in
jmp
in
pop
mov
jne
jno
pop
mov
je
lea
idiv
cmc
stc
je
add
cli
add
push
sbb
push
in
out
xor
sahf
xlat
add
stos
jp
jne
int
cld
(bad)
iret
dec
test
xchg
ins
mov
jp
add
jmp
mov
dec
in
into
test
fcmove
not
adc
xor
add
xor
sub
cmp
std
or
bound
loope
inc
pop
fidiv
call
sub
lea
push
sbb
call
(bad)
jge
inc
jmp
adc
cmp
jge
dec
pop
dec
call
push
jecxz
adc
add
pushf
cmp
shr
cld
add
push
mov
adc
push
mov
stos
cld
push
pop
push
add
ins
hlt
call
daa
sbb
and
test
cmp
jmp
aaa
inc
pop
xor
add
fld
mov
sub
push
mov
adc
add
(bad)
adc
add
daa
rcl
ins
sbb
inc
and
mov
rcl
je
dec
fdiv
imul
cmp
(bad)
and
adc
add
dec
push
mov
add
mov
daa
cld
cmp
mov
jno
loopne
(bad)
int3
imul
add
cmp
fcomp
adc
add
add
pop
xor
xor
sub
arpl
test
or
xchg
sbb
pop
add
xchg
mov
out
sbb
(bad)
(bad)
pop
stc
mov
add
repz
fistp
cld
dec
stc
mov
repz
lea
mov
call
loopne
jnp
test
dec
test
mul
mov
or
fild
test
xchg
ins
and
fcomip
cmp
retf
adc
retf
xor
or
jecxz
hlt
inc
add
xchg
inc
std
call
and
retf
idiv
loope
and
xor
jmp
dec
add
mov
add
clc
call
mov
ins
add
mov
out
xor
dec
xor
add
imul
mov
add
mov
mov
jmp
xchg
aas
push
xchg
dec
hlt
call
pop
int3
add
int
mov
fild
fsub
popf
jns
idiv
and
test
push
mov
jns
call
(bad)
stos
enter
(bad)
idiv
add
out
test
sub
imul
add
lods
(bad)
jmp
mov
push
xchg
test
mov
or
call
cmp
push
test
sub
enter
popa
fdiv
jle
or
adc
xor
cmp
sahf
xchg
cld
jp
jnp
and
(bad)
rol
fwait
sub
mul
or
leave
and
(bad)
push
cld
(bad)
dec
xor
mov
and
push
hlt
push
in
sub
sar
fdivr
int
dec
(bad)
push
int3
jmp
daa
jo
call
adc
add
ret
call
adc
clc
imul
push
cmps
call
out
bound
pop
movs
lock
push
mov
iret
leave
iret
test
lea
mov
xchg
int
push
mov
jge
sub
not
sar
pop
sbb
jnp
add
pop
mov
push
jge
(bad)
lea
aaa
loopne
cmps
int
pop
test
lea
dec
xor
fucomi
sub
mov
and
stos
jle
add
mov
pop
test
jne
call
jl
cld
stos
pop
dec
mov
cmp
add
jg
test
mov
inc
pop
aam
cld
xchg
inc
mov
and
xchg
test
dec
xchg
inc
mov
test
(bad)
stos
imul
push
clc
mov
enter
fcomp
xor
add
lds
cmp
adc
add
test
or
retf
jnp
cdq
mov
hlt
push
popf
adc
sbb
or
sti
test
movs
jnp
(bad)
stos
push
(bad)
push
int3
pop
add
jnp
in
icebp
addr16
in
clc
out
imul
lds
cmp
inc
cld
lds
mov
pop
mov
and
add
int3
loopne
data16
div
shl
pop
mov
and
xchg
stos
int3
loopne
jbe
div
adc
pop
mov
and
xchg
(bad)
push
loopne
(bad)
int3
div
shl
pop
mov
and
mov
loopne
jbe
test
pop
sbb
inc
add
in
push
je
into
xor
stc
mov
loopne
es
cmp
xchg
fdivr
cli
fistp
push
sbb
push
push
clc
mov
push
imul
pushf
cmp
cwde
inc
mov
xchg
push
cld
call
enter
pusha
dec
push
clc
dec
xchg
push
hlt
adc
push
cld
push
mov
scas
(bad)
call
add
bound
cmp
add
mov
test
lods
ins
nop
and
inc
nop
and
sub
push
scas
cmp
push
mov
loopne
pop
fcomi
lea
dec
lea
dec
fdivr
loopne
or
scas
xor
mov
add
add
pop
push
lea
(bad)
(bad)
adc
or
mov
jg
lea
idiv
push
js
adc
push
(bad)
loopne
or
pop
xor
push
repz
mov
icebp
icebp
cmp
inc
test
jno
(bad)
lock
idiv
sub
and
sub
dec
push
mov
fsub
sbb
(bad)
push
add
sub
call
mov
jne
sar
sub
xor
call
push
mov
push
cmp
lds
jge
mov
imul
cmp
idiv
inc
push
call
add
popa
mov
loopne
push
call
sbb
push
cmp
pusha
loopne
add
jno
dec
shl
pop
mov
push
cld
cmp
inc
dec
test
(bad)
repnz
pop
jmp
cwde
cli
call
int3
xor
fcom
push
bound
mov
add
ins
sub
test
imul
mov
cld
(bad)
dec
mov
add
movs
mov
push
mov
idiv
or
add
add
test
sub
call
les
mov
add
cld
cwde
pop
sub
jnp
cmp
mov
or
(bad)
jmp
not
add
into
jl
or
add
sar
mov
xor
(bad)
adc
adc
or
(bad)
(bad)
push
dec
lea
xor
push
shr
imul
lods
adc
shl
call
not
dec
lea
idiv
call
add
test
rcr
inc
movs
and
sub
xchg
sbb
loopne
idiv
sbb
jl
jmp
inc
test
test
mov
sbb
xchg
inc
mov
dec
loopne
shr
test
cwde
pushf
sub
cmp
mov
dec
xchg
inc
mov
adc
add
sar
(bad)
cmp
add
test
add
pushf
adc
push
push
(bad)
sbb
neg
fadd
test
sbb
add
lahf
ins
nop
mov
xor
cmp
jge
sub
imul
mov
add
push
hlt
and
add
dec
adc
mov
fadd
xchg
xchg
cmp
jge
jge
call
add
sbb
add
fld
rol
out
test
mov
pop
test
aad
add
ret
test
test
jle
stos
dec
push
(bad)
shr
sbb
popf
adc
in
adc
add
sbb
pushf
xchg
aam
(bad)
nop
mov
cld
lds
in
cmp
add
jns
add
popf
aam
(bad)
cli
inc
bound
cwde
cmps
pusha
jmp
in
div
loopne
clc
pop
sbb
jbe
jmp
adc
push
in
cmp
add
add
repz
bound
sub
loopne
mov
div
shl
je
sbb
test
add
test
not
pop
test
clc
and
sub
out
inc
fst
stc
dec
or
(bad)
jmp
xor
jmp
call
mov
or
idiv
call
jmp
aam
(bad)
and
push
add
pop
out
inc
pop
push
ins
adc
test
push
jle
mov
add
call
int3
es
je
push
popf
fdivr
stos
jmp
arpl
mov
repz
stos
clc
stos
sti
stos
jmp
mov
aam
lea
daa
idiv
jmp
(bad)
nop
aam
call
sahf
rol
xchg
stos
cmp
jge
jge
add
call
and
stos
xchg
mov
call
add
clc
imul
jmp
imul
test
test
cld
stos
jnp
imul
push
cld
stos
fwait
ror
adc
clc
call
jo
xchg
adc
add
or
test
inc
test
jne
mov
dec
inc
mov
add
push
dec
mov
dec
(bad)
shr
pop
call
pop
fadd
fwait
inc
dec
mov
out
(bad)
and
and
cli
xchg
idiv
add
dec
lea
idiv
jp
js
rcl
shr
and
out
hlt
call
rol
stos
and
push
sbb
(bad)
push
aam
call
outs
int3
dec
inc
jle
lods
dec
or
imul
sti
xor
inc
call
sbb
lea
idiv
stos
std
jl
mov
dec
push
mov
loopne
jo
not
cdq
ins
nop
inc
jp
cld
add
stos
sar
add
call
test
idiv
movs
test
add
cwde
ds
popf
cdq
jge
stos
in
imul
shr
idiv
adc
call
add
arpl
call
call
xchg
sub
sub
pusha
loopne
push
clc
dec
and
sub
jmp
inc
add
sbb
jmp
(bad)
jge
cmp
push
cdq
jmp
les
stos
cli
dec
clc
call
aas
bound
pop
movs
inc
dec
clc
aam
imul
lods
xor
imul
imul
push
jp
mov
cmp
sub
pop
test
add
pushf
ins
nop
inc
and
pushf
cmp
push
std
movs
cmp
jge
cmp
push
stc
jmp
mov
and
call
and
pop
mov
jae
iret
pop
test
jmp
pop
in
neg
js
lea
add
mov
(bad)
adc
sub
arpl
hlt
dec
jns
mov
idiv
mov
cmp
in
dec
push
lea
call
mov
mov
js
jmp
stc
sbb
or
dec
push
(bad)
ins
nop
adc
sub
adc
dec
mov
pusha
call
in
mov
test
inc
test
idiv
xor
aam
cld
out
xchg
inc
mov
xor
(bad)
std
stc
push
push
mov
jnp
leave
jns
mov
push
add
jmp
cmp
add
add
mov
mov
xor
pop
mov
dec
mov
stc
push
push
or
add
add
jbe
call
cwde
enterw
pusha
jmp
gs
(bad)
push
in
add
adc
add
fdiv
and
clc
dec
pop
cmps
sub
mov
mov
(bad)
fst
cli
(bad)
std
clc
das
push
jns
jnp
cdq
xchg
(bad)
push
push
data16
cmp
add
mov
push
mov
call
push
call
sub
clc
dec
inc
mov
sbb
add
mov
dec
lock
push
jmp
sbb
and
inc
mov
push
test
sbb
cdq
pop
mov
jmp
(bad)
mov
dec
idiv
stos
lock
add
test
sbb
add
jae
xor
jmp
push
mov
call
mov
adc
pop
mov
jmp
loopne
idiv
cmp
movs
and
jmp
dec
jae
add
mov
cmc
xchg
cld
cli
icebp
cmp
xchg
clc
jmp
add
gs
jmp
cwde
movs
or
stos
jmp
and
je
dec
je
dec
not
pop
test
jne
sbb
push
cmp
add
push
add
pop
mov
enter
outs
stc
mov
fcomip
jmp
add
call
je
adc
pop
mov
xchg
popa
clc
mov
call
pop
idiv
out
js
push
clc
mov
xchg
jmp
jmp
nop
sub
jmp
adc
xor
mov
aam
push
or
out
push
xchg
popa
hlt
cmp
add
dec
cld
jp
mov
call
add
clc
imul
lods
and
adc
idiv
xor
imul
pop
call
cmc
xchg
sbb
jmp
call
sbb
sub
inc
test
idiv
xor
inc
mov
(bad)
call
push
dec
pop
mov
dec
(bad)
adc
xor
call
loope
mov
dec
mov
lea
call
call
inc
dec
dec
(bad)
loopne
idiv
sub
push
(bad)
nop
in
call
add
fmulp
add
jmp
(bad)
pusha
in
call
fmulp
dec
inc
jle
lods
dec
call
inc
inc
test
inc
cmc
sbb
stos
cmp
pusha
xor
mov
fldenv
cdq
jecxz
push
pop
popf
or
push
loopne
lods
out
not
xchg
ins
nop
test
sbb
stos
stos
in
into
adc
sti
idiv
stos
sub
push
sbb
inc
jmp
xchg
cmp
cld
sbb
mov
enter
cld
mov
clc
mov
dec
lea
inc
loopne
retf
adc
call
hlt
inc
xchg
pop
jl
inc
retf
xor
stos
inc
bound
pop
pushf
inc
inc
add
out
not
pop
test
sti
dec
and
dec
push
xchg
ins
rcl
hlt
add
sbb
mov
daa
cld
stos
cli
movs
repnz
in
jge
mov
ins
or
inc
hlt
(bad)
mov
in
out
out
idiv
mov
add
cmp
jecxz
mov
add
add
test
mov
in
jle
push
xor
push
or
dec
push
in
dec
mov
push
dec
mov
fst
add
add
int
cmp
in
sub
push
and
sbb
jne
ja
mov
mov
jno
sbb
in
mov
lea
jl
stc
adc
add
cs
cdq
xchg
and
adc
add
jns
mov
xor
call
mov
test
mov
(bad)
fst
call
push
mov
mov
clc
push
pop
imul
clc
mov
xor
popf
adc
xor
scas
cmp
cmp
ins
jecxz
sbb
popf
adc
add
jg
mov
jno
clc
dec
jl
stc
adc
add
std
es
dec
clc
mov
dec
(bad)
mov
sbb
out
xor
(bad)
mov
sbb
push
cwde
dec
sbb
mov
add
cmp
fst
and
adc
add
push
imul
(bad)
fstp
add
lea
add
xchg
jmp
pop
or
adc
mov
cld
stos
jmp
cmp
push
xor
inc
aas
push
fsub
push
xor
inc
dec
lea
add
call
push
xchg
xchg
ins
and
inc
push
mov
pop
add
pop
or
call
and
cld
cmp
ins
and
inc
inc
aad
or
or
es
push
ret
add
(bad)
push
ret
popf
jb
add
add
hlt
test
lea
dec
push
xchg
mov
lds
cdq
jl
or
mov
call
test
sub
jge
push
and
clc
int3
jge
out
cwde
arpl
and
adc
sbb
in
mov
test
mov
dec
push
call
push
add
out
mov
std
int3
sbb
ss
clc
mov
xor
call
push
ror
popa
sub
(bad)
adc
les
lea
hlt
dec
xor
add
call
push
fsub
add
addr16
inc
call
add
stc
adc
add
std
pop
and
in
clc
mov
xor
test
clc
dec
adc
dec
jo
imul
lods
cmp
pop
popa
sbb
xchg
xchg
sbb
int
add
stos
xchg
jl
sub
cdq
cmp
jno
test
dec
lea
xor
add
xor
inc
add
call
and
or
jmp
or
call
clc
call
out
neg
popf
ins
and
cld
les
jmp
je
add
sbb
pop
jmp
inc
adc
loopne
test
movs
sbb
fst
add
aaa
or
(bad)
inc
je
arpl
iret
cdq
out
not
add
popf
lods
and
adc
add
adc
call
xor
jmp
jne
test
dec
adc
adc
add
push
pop
xchg
sub
div
push
jnp
inc
push
adc
adc
add
(bad)
in
sbb
inc
cdq
inc
push
push
clc
xor
add
sar
dec
jbe
add
adc
lea
aaa
sub
ss
sbb
imul
movs
cmp
sbb
sbb
sbb
lea
add
xor
push
ror
push
xor
(bad)
adc
add
stc
out
aaa
hlt
(bad)
jle
stc
xchg
adc
sbb
imul
cmps
cmp
add
cwde
fs
add
xchg
mov
xor
xchg
sbb
sbb
mov
cld
stos
aas
bound
xchg
mov
fst
add
inc
pop
cld
push
sahf
lods
and
adc
add
sbb
push
aam
adc
test
mov
dec
in
imul
test
sbb
add
lea
add
adc
add
iret
xor
push
sahf
ins
and
sar
adc
add
je
jmp
mov
call
and
push
nop
sbb
xor
(bad)
xchg
xor
(bad)
out
test
dec
add
jnp
div
xchg
lock
push
xor
jmp
stos
fs
aam
test
call
jmp
xor
cmc
push
not
inc
test
loopne
push
cmp
push
or
add
call
addr16
jle
mov
xor
sbb
or
retf
add
outs
cmp
jmp
hlt
daa
call
xchg
aad
pop
data16
rcr
add
clc
dec
pop
dec
pop
mov
push
push
mov
jecxz
idiv
pop
mov
shl
arpl
add
(bad)
out
in
movs
pop
add
cld
rol
inc
popf
push
les
lea
inc
push
xchg
jns
lds
lea
sbb
add
pop
jge
push
nop
inc
and
mov
pop
pop
int
movs
(bad)
sbb
retf
ins
cld
mov
mov
nop
fwait
and
sbb
add
adc
push
pop
shl
pusha
xchg
xchg
and
push
add
sbb
cld
push
stc
push
adc
jg
rcr
call
add
shl
mov
repz
add
cmp
mov
out
inc
cmp
call
push
xchg
nop
fwait
and
adc
push
cld
jmp
mov
mov
inc
and
shr
fldenv
inc
and
jne
inc
fst
and
add
sub
add
push
inc
and
dec
lods
inc
int
mov
fdiv
aam
mov
cmps
add
and
call
cmp
push
sbb
and
xchg
and
adc
push
cld
or
add
lea
mov
add
leave
and
rcl
add
stos
xchg
ret
or
(bad)
jae
cmp
push
adc
add
xor
dec
and
push
lea
icebp
pop
int
call
mov
icebp
cmp
and
adc
and
sti
inc
fsub
adc
aam
cmp
add
and
fsub
sbb
lods
and
fsub
and
mov
inc
and
lahf
inc
and
mov
jg
sbb
or
mov
mov
sbb
or
call
cmp
(bad)
fstp
and
sbb
add
cmp
fwait
xor
xchg
pushf
and
add
int3
adc
or
addr16
lea
cld
jmp
lea
push
call
push
sub
movups
dec
test
mov
cmp
push
movs
mov
or
xchg
and
dec
adc
or
movs
jae
inc
cmp
adc
or
mov
xor
test
and
clc
mov
test
add
movs
jae
mov
xor
je
(bad)
fbstp
xor
pop
sbb
sub
mov
and
inc
push
xor
xor
inc
jno
dec
mov
cld
inc
pop
adc
adc
add
pop
pop
xchg
in
sbb
add
pop
fild
and
clc
mov
int
push
inc
mov
not
call
cmp
add
cs
push
aaa
adc
(bad)
fnstsw
fist
test
mov
pop
jmp
lds
int
xchg
add
adc
push
sbb
pop
add
aad
xor
add
and
push
mov
pop
pop
inc
(bad)
loope
pop
add
pop
mov
(bad)
(bad)
dec
fcomp
add
jns
pop
call
cwde
aad
pop
jge
mov
add
mov
mov
rol
int
call
mov
int3
rol
call
push
pop
adc
test
adc
aas
xchg
sub
push
sbb
cld
cmp
and
and
sbb
add
pop
and
jmp
xor
add
add
out
inc
dec
and
cdq
(bad)
jmp
and
sub
xor
push
cld
pop
add
pop
add
loope
and
adc
pop
add
repnz
call
aam
adc
and
lahf
pop
add
stos
sahf
dec
and
lahf
mov
add
mov
push
out
add
retf
and
push
or
(bad)
shl
push
ja
(bad)
pop
mov
jle
xor
add
xchg
rol
or
loopne
je
adc
stc
pmaxsw
jb
aas
adc
cmp
jl
jno
clc
je
or
and
fldenv
sub
mov
add
(bad)
fild
sub
adc
test
adc
and
pop
sbb
iret
lock
adc
and
loopne
or
mov
lods
inc
dec
fwait
jae
jno
add
jmp
fdiv
(bad)
popa
cld
sbb
xchg
cld
daa
add
cld
sti
dec
call
add
mov
daa
je
jmp
cld
pop
add
adc
pop
(bad)
icebp
icebp
aaa
call
std
call
adc
(bad)
shr
clc
adc
clc
push
lods
and
xchg
and
pushf
adc
and
fsub
xor
add
xchg
(bad)
call
shl
xor
fldenv
jo
add
push
(bad)
shl
add
daa
clc
pop
test
mov
sbb
clc
idiv
or
daa
clc
push
or
adc
sbb
mov
and
jecxz
push
adc
mov
cmp
adc
sbb
mov
adc
call
cld
dec
mov
cmp
adc
fsub
dec
adc
call
mov
mov
rol
call
cmp
cmp
dec
test
mov
out
call
out
cmp
call
stc
jmp
add
push
and
mov
je
(bad)
cmc
in
sub
mov
out
sub
out
pop
idiv
mov
sub
inc
jno
jge
jno
cs
jno
or
sub
and
push
sbb
jno
mov
pop
call
jbe
call
hlt
pop
push
add
add
xchg
std
(bad)
xor
daa
call
les
jae
jno
pop
and
xchg
pop
and
cdq
pop
and
cmp
mov
dec
(bad)
icebp
out
call
push
and
mov
inc
push
fwait
mov
xchg
sldt
jne
adc
call
and
adc
add
fwait
or
pop
adc
pop
add
mov
dec
mov
hlt
inc
dec
adc
std
jmp
and
mov
call
lea
out
call
call
std
stos
leave
cs
jno
jae
cmp
std
stos
leave
clc
je
hlt
jle
rcl
pop
mov
jle
mov
(bad)
cli
push
clc
pop
add
sub
cld
stos
sub
and
cmp
das
cwde
sub
push
inc
cmp
sub
mov
sub
nop
aam
arpl
adc
add
jbe
and
(bad)
dec
loopne
mov
in
add
jno
lds
and
and
adc
add
jo
dec
add
cwde
jb
pop
movs
and
imul
mov
cmp
mov
ret
sbb
sub
inc
mov
je
stos
or
popf
mov
add
add
add
inc
or
xchg
(bad)
and
fsub
dec
sbb
call
cmp
and
sbb
mov
add
xor
jmp
jle
inc
in
shl
jl
xor
pop
ins
(bad)
aam
out
(bad)
sti
dec
lods
test
call
mov
in
jmp
push
aam
xor
jecxz
lea
sbb
call
sub
cmc
mov
mov
retf
inc
and
inc
sbb
add
jl
in
and
sub
psrlw
je
lea
fadd
add
test
outs
add
pop
idiv
sbb
and
or
pop
add
and
fst
add
push
jecxz
add
push
test
pop
and
int
add
cmp
idiv
popf
cs
test
fwait
and
rcl
add
mov
push
cld
cmp
pop
add
xchg
and
push
add
xor
mov
dec
lods
clc
(bad)
shl
mov
dec
push
mov
(bad)
mov
cs
sbb
add
fdiv
call
call
and
fwait
mov
leave
push
add
xor
cdq
and
add
or
call
rcr
call
sub
adc
test
(bad)
jl
jno
mov
mov
fcomip
mov
clc
mov
add
hlt
inc
mov
hlt
pop
lea
daa
mov
mov
and
xchg
shl
xchg
shl
mov
and
shl
mov
pop
cld
cmp
idiv
int
jae
test
sub
and
ret
add
adc
mov
arpl
mov
dec
mov
dec
add
fdivr
call
xchg
and
adc
push
lea
add
jge
and
inc
inc
jmp
ror
call
and
out
xor
pushf
and
and
mov
pop
cld
add
cmp
dec
(bad)
push
in
aas
add
adc
call
pop
movs
and
int
and
and
sbb
add
and
adc
push
jne
pop
cld
call
pop
test
loopne
jmp
sbb
and
jmp
jg
and
fwait
push
mov
inc
psubb
add
mov
in
add
add
xchg
jae
in
dec
sub
rcr
popf
jns
clc
pop
ret
mov
add
(bad)
fstp
pop
adc
and
fcom
add
mov
cld
inc
(bad)
mov
sbb
test
and
add
pop
or
inc
fidivr
add
fdivr
cld
pop
ins
loop
mul
pop
jmp
in
and
jmp
sub
and
push
push
pop
xor
pop
jmp
jge
and
sbb
je
in
jl
cwde
mov
mov
adc
(bad)
push
in
inc
add
adc
out
mov
dec
mov
inc
add
push
mov
mov
cmc
adc
popa
adc
stos
call
mov
fistp
aaa
adc
call
stos
movaps
jmp
mov
mov
pop
sbb
(bad)
(bad)
jge
cmp
movs
(bad)
idiv
sbb
scas
jl
xor
idiv
add
sbb
loopne
call
jg
add
inc
cs
inc
int
xchg
add
adc
push
pop
sbb
xchg
inc
nop
(bad)
div
xchg
jp
and
adc
add
mov
inc
add
push
inc
lea
in
lahf
add
adc
add
retf
dec
jno
mov
and
add
jge
jae
cmp
in
pop
jl
sbb
call
xchg
dec
xor
jp
and
jns
and
adc
add
add
jl
loopne
sbb
mov
cmps
add
pop
jg
jno
idiv
int
mov
add
pop
bound
int
ret
addr16
popf
adc
add
push
or
je
xchg
dec
add
mov
mov
add
mov
paddb
repz
add
inc
xor
push
and
adc
jmp
push
and
mov
test
repz
ret
jne
clc
push
xchg
mov
push
and
cmc
sldt
into
push
fisttp
fcom
and
adc
add
push
push
push
imul
and
fisubr
or
call
add
aas
jno
push
and
mov
test
push
add
jnp
and
adc
add
and
and
add
cwde
and
jl
mov
daa
adc
mov
xor
div
(bad)
ss
and
and
push
cmp
add
and
sub
out
sub
iret
push
and
add
or
or
mov
je
mov
and
or
test
adc
add
add
or
cmp
cmc
adc
add
int3
lea
adc
clc
mov
dec
and
ret
pop
stos
or
xor
sub
xor
jl
jno
pop
ins
loop
mul
mov
test
call
push
out
mov
add
sbb
or
adc
add
push
dec
and
xchg
and
xchg
jnp
and
sldt
jbe
(bad)
inc
jmp
loopne
(bad)
shl
iret
add
add
pop
adc
pushf
xor
idiv
dec
mov
test
cmp
call
adc
add
ja
and
xlat
rcl
and
add
loope
test
ret
psubb
fwait
dec
mov
inc
cmp
test
adc
clc
mov
mov
call
adc
jle
jl
and
adc
add
mov
cmp
adc
xor
inc
add
add
add
sbb
adc
add
add
cmp
loope
add
shl
mov
adc
pop
mov
jnp
and
adc
add
xlat
addr16
adc
add
push
clc
push
jl
and
sldt
or
and
mov
push
push
and
xchg
sbb
or
or
je
in
pop
call
xchg
and
lea
add
loope
sbb
dec
adc
mov
loope
cmps
add
dec
jmp
add
mov
sbb
test
idiv
or
loopne
inc
adc
mov
adc
out
mov
call
or
push
hlt
cmps
add
adc
mov
(bad)
aas
(bad)
stc
aad
lea
aad
call
push
aam
sbb
lods
and
and
mov
and
test
xor
mov
sub
pop
cld
sub
and
jp
and
ja
and
jle
and
jle
and
jp
and
sbb
sbb
add
jne
add
in
fbstp
ror
push
cwde
inc
and
add
sti
idiv
jmp
inc
lea
xor
int
push
lea
aad
push
xchg
jne
mov
jne
sub
and
adc
add
ror
popf
rol
jno
idiv
(bad)
sti
fbld
or
inc
add
hlt
xchg
add
call
and
and
sbb
push
fadd
dec
sbb
mov
sbb
daa
out
sti
push
inc
lea
aam
(bad)
mov
sbb
mov
pushf
and
fucomp
sbb
pop
add
pop
push
lea
xor
fst
push
lea
aam
push
add
jne
cs
jp
mov
cmps
mov
cmps
rol
fnstsw
fs
(bad)
jmp
pop
inc
mov
ret
and
jae
rcr
pmaddwd
pop
(bad)
jmp
mov
xor
dec
jb
mov
movs
or
sti
add
stos
xabort
aaa
sbb
imul
clc
push
mov
mov
push
pop
or
push
push
imul
push
inc
or
xor
popf
movs
mov
xor
add
sbb
ds
sbb
lea
std
sti
call
pop
or
add
out
and
and
mov
popa
sbb
repz
sbb
lea
shr
call
call
std
stos
mov
mov
or
push
push
cmp
fcom
sti
inc
movs
mov
or
push
push
sbb
mov
fucomi
sti
inc
mov
or
push
push
fsub
push
dec
adc
sti
call
dec
idiv
dec
or
push
push
add
idiv
sbb
mov
lea
adc
and
call
dec
and
test
test
idiv
int
mov
jno
rol
fucomip
repnz
clc
pop
add
clc
lea
rol
add
das
and
movs
or
pop
inc
lea
cmp
call
mov
je
push
mov
jno
add
pop
push
call
cmp
cmp
add
gs
cmps
ins
adc
test
add
or
adc
lods
adc
sbb
add
mov
dec
jge
and
call
push
cmp
call
dec
mov
mov
mov
push
je
add
lea
out
lea
aaa
rol
adc
(bad)
adc
pushw
sub
jne
add
aaa
mov
dec
adc
jmp
les
pop
adc
(bad)
shl
rol
adc
out
adc
data16
sub
jne
sahf
lods
and
adc
add
sbb
(bad)
loope
mov
or
out
out
lea
int3
add
adc
push
aaa
mov
int
push
lea
aaa
fs
gs
daa
cld
push
mov
jne
cmp
add
jp
fcomp
pop
es
push
stos
shl
push
cmp
je
pop
adc
movs
sub
cld
stos
mov
dec
and
add
clc
(bad)
sar
add
push
call
in
out
(bad)
jmp
mov
sbb
repz
out
push
add
popa
cmp
add
out
out
push
add
add
loope
aam
fst
call
mov
sbb
fst
push
mov
adc
add
dec
dec
pop
push
mov
add
out
fucomp
fisubr
dec
ret
push
push
std
and
jg
push
xor
push
cmp
mov
lds
xchg
adc
pop
adc
push
add
or
adc
xor
inc
jge
xor
add
or
adc
mov
sbb
push
and
adc
xor
inc
mov
mov
call
push
inc
jmp
out
mov
xor
or
jmp
add
lea
mov
and
add
add
popf
inc
push
xor
and
aam
cld
sub
mov
ret
xchg
jmp
or
cmp
push
add
inc
push
mov
sbb
call
xchg
pop
adc
mov
add
fstp
mov
stos
ins
adc
cmp
lea
add
cmp
add
pop
call
push
jg
mov
fidiv
add
jmp
mov
xchg
out
call
pop
jne
mov
test
push
add
in
js
jmp
(bad)
add
sbb
shl
add
pop
add
xor
add
push
xchg
adc
fcom
add
push
loope
inc
add
add
xor
add
push
call
push
test
pop
add
cld
shl
sldt
sahf
(bad)
movs
add
mov
je
push
pop
add
pop
(bad)
sbb
sub
mov
jno
push
mov
push
add
mov
push
call
(bad)
xchg
cmp
add
cmp
push
out
and
push
jge
jno
add
or
out
test
add
int
out
je
cmp
rcl
push
cmp
add
adc
out
call
fdivr
lds
add
cmp
add
xor
sbb
lea
cmp
call
push
push
adc
out
adc
in
adc
(bad)
push
adc
mov
push
adc
in
pop
cld
jmp
and
pushf
xor
loope
ins
and
call
jge
cmps
adc
call
xchg
add
add
call
adc
int
add
sub
in
inc
push
lea
jl
int
push
(bad)
loope
pop
push
push
xchg
adc
mov
pop
jne
and
call
add
jge
jno
add
pop
inc
mov
jno
add
dec
sbb
push
popa
loopne
push
sub
fnstenv
add
call
jmp
out
mov
popf
fs
pushf
xor
jle
in
add
jmp
push
cwde
fs
push
xchg
adc
fcom
add
inc
stc
hlt
sti
stos
nop
ins
and
adc
adc
jge
mov
add
int
je
adc
sti
mov
je
jmp
sar
xor
call
add
adc
inc
fiadd
add
je
or
popf
je
leave
adc
add
inc
call
lea
adc
cwde
daa
adc
jge
je
xor
sti
xchg
xor
cmp
mov
aas
mov
push
(bad)
push
pop
pusha
add
adc
call
out
dec
and
fwait
fs
cli
cmp
test
ja
je
push
hlt
sti
call
add
fsubrp
lea
or
jmp
gs
xor
dec
inc
push
fsub
call
xchg
aas
jge
xor
add
or
jmp
push
add
mov
call
ret
mov
mov
call
push
xor
in
call
fs
cmc
ins
cmps
inc
int
mov
je
sub
xchg
(bad)
fucomp
jmp
add
in
jmp
jmp
push
cmp
out
je
cmp
lea
or
(bad)
dec
adc
(bad)
push
adc
lea
add
jge
je
adc
add
stc
or
pop
fsubrp
inc
push
stc
ins
add
mov
inc
outs
add
stos
inc
jmp
push
gs
push
mov
pop
add
push
mov
dec
dec
pop
add
push
cwde
jl
lods
adc
add
call
mov
cld
and
outs
out
push
mov
add
dec
sbb
jmp
inc
inc
push
lods
push
mov
dec
daa
mov
test
adc
sbb
sbb
add
daa
fist
cmp
adc
popf
(bad)
cld
stos
lea
rol
add
jno
add
int
pushf
bound
push
add
push
xor
add
pop
add
jae
in
jmp
mov
push
add
or
call
push
inc
inc
mov
add
pop
out
test
sub
push
lea
xor
fisttp
mov
and
add
bound
or
outs
or
call
mov
jl
add
pop
add
shr
push
or
sub
lea
add
pop
arpl
int
add
sar
rcl
mov
add
lea
call
and
mov
sbb
rcl
lea
add
inc
lahf
(bad)
sti
sub
lock
call
call
pop
jle
jge
xor
cld
add
movs
adc
or
adc
jge
jno
mov
jno
add
fst
call
mov
add
mov
xor
mov
lock
test
add
fs
test
cld
stos
call
clc
out
pop
add
adc
inc
mov
add
xchg
in
xor
cmp
push
mov
push
in
(bad)
jle
add
rol
enter
add
mov
and
inc
and
ja
cwde
pop
mov
arpl
popf
xor
cwde
jno
xor
mov
lea
add
push
add
add
adc
call
add
push
push
in
push
add
jge
mov
call
jmp
add
add
push
out
(bad)
paddsb
stos
pop
adc
inc
dec
or
or
add
add
and
pop
mov
mov
inc
ret
push
mov
dec
inc
or
jecxz
inc
add
out
push
(bad)
loopne
in
(bad)
cmp
push
dec
js
dec
jecxz
call
pusha
jmp
aaa
push
push
ror
pop
stos
loop
push
add
xor
mov
cmp
and
test
xchg
cmp
(bad)
sub
sar
loop
inc
jmp
loop
push
xchg
jge
cli
loope
push
ror
add
mov
(bad)
lock
jmp
loop
push
cwde
pop
movs
(bad)
and
add
(bad)
adc
inc
add
sar
mov
push
call
pop
ins
pushf
add
or
add
xchg
xchg
ins
stos
in
add
in
pop
or
mov
movs
out
out
dec
xchg
in
std
sub
add
dec
xchg
mov
(bad)
xchg
pop
(bad)
jmp
sbb
test
out
inc
add
xchg
add
mov
push
mov
ins
out
jmp
jecxz
inc
in
add
test
in
out
mov
cmp
adc
or
cdq
pop
out
dec
cld
mov
in
(bad)
shr
or
cli
fdivp
dec
data16
call
stos
data16
call
add
xchg
add
pop
gs
mov
sti
or
xor
add
mov
(bad)
jmp
jmp
in
int
in
mov
pusha
lea
in
mov
pusha
jne
cmp
out
lea
out
jmp
in
call
inc
xchg
and
push
mov
out
jmp
xchg
cmp
stos
in
mov
cmp
jge
sub
cmp
sti
stos
mov
psraw
hlt
call
into
aaa
sub
push
lea
lock
xor
xor
sbb
add
je
inc
or
jmp
(bad)
loopne
adc
mov
add
lea
cmp
push
push
xchg
dec
in
adc
xchg
mov
inc
call
push
jge
jno
out
call
in
adc
dec
dec
xchg
jge
stos
jmp
test
out
out
xor
inc
aaa
push
fcomp
lahf
sbb
out
push
add
adc
call
mov
mov
jmp
out
sti
mov
xor
add
jne
inc
inc
(bad)
loopne
out
(bad)
cmp
push
push
xor
add
int
xor
shr
out
push
jne
or
push
out
push
out
int
test
jmp
mov
dec
in
add
mov
movs
adc
add
aaa
pop
mov
adc
push
call
in
push
xor
pop
xor
cmp
out
push
(bad)
shl
sub
cmp
sar
nop
pushf
in
jmp
or
(bad)
mov
out
adc
jge
add
mov
out
push
dec
xor
imul
out
(bad)
fadd
push
(bad)
shr
sbb
out
sti
dec
jge
push
out
push
inc
inc
(bad)
lock
test
es
sub
sbb
call
push
sbb
jmp
out
call
rcl
adc
add
push
aas
jge
dec
mov
jmp
cmp
out
lea
(bad)
sbb
out
pop
sub
ins
in
pop
xor
cld
jp
cmp
popa
es
lock
inc
jge
int
fist
pop
movs
cmp
in
out
call
(bad)
jmp
dec
add
or
push
in
sbb
mov
sti
sbb
add
push
in
adc
jmp
call
xchg
shl
push
shr
mov
mov
push
cmp
imul
adc
out
push
inc
jge
fldln2
out
jmp
jmp
inc
int
mov
imul
push
fmul
push
cmp
push
(bad)
push
in
push
call
push
fwait
push
out
push
mov
adc
sub
push
push
mov
jmp
sbb
jmp
call
cwde
push
rcl
pop
xor
call
pop
xchg
ret
jge
add
imul
in
pop
inc
mov
(bad)
stos
cmp
(bad)
clc
ret
ss
cld
mov
jmp
jp
call
push
add
mov
out
(bad)
pusha
in
add
jmp
jmp
sbb
out
jmp
mov
cmp
jno
imul
add
fcom
sti
inc
ret
test
inc
jge
sbb
out
jmp
shl
add
add
aaa
add
pop
jge
mov
out
call
xchg
adc
add
pop
pop
out
push
pop
adc
jge
mov
cmps
in
inc
push
pop
movs
jl
add
call
sbb
(bad)
fcomp
out
jmp
mov
mov
sbb
idiv
pop
test
ret
push
aaa
add
stos
mov
push
ja
jge
icebp
mov
mov
test
adc
push
in
call
(bad)
adc
std
inc
add
adc
ret
sahf
jmp
push
inc
jge
jno
xor
sti
cmps
in
jge
sbb
sbb
cld
stos
mov
sti
stos
in
push
aaa
(bad)
(bad)
cmc
mov
add
sub
add
cli
add
mov
mov
in
pop
add
mov
out
call
in
call
mov
out
dec
xchg
sbb
fst
push
lea
test
ret
fistp
xor
sbb
mov
test
mov
push
mov
addr16
lea
sti
in
jmp
lock
pop
sub
mov
jge
lds
(bad)
push
in
and
jmp
mov
mov
cli
sti
stos
bound
mov
mov
out
push
aaa
sbb
loope
jo
ss
idiv
int
ins
lods
int
je
fst
add
xor
adc
in
inc
add
dec
movs
sbb
mov
in
call
adc
pop
push
add
sub
call
pop
mov
out
lea
xchg
xor
stc
div
add
call
push
dec
movs
sbb
add
sti
inc
ins
add
movs
mov
idiv
fst
inc
es
call
test
mov
sar
call
call
adc
(bad)
cmp
in
jmp
gs
(bad)
fcomp
(bad)
jmp
inc
add
aad
sub
jge
sub
ror
mov
(bad)
jnp
add
mov
or
cmp
add
adc
lea
popf
push
xor
dec
movs
cmp
mov
in
push
mov
dec
adc
sub
mov
not
call
jmp
add
add
mov
out
call
adc
pop
dec
adc
mov
push
aas
add
movs
jge
jmp
out
call
rcr
pop
or
retf
cmp
pop
movs
xor
shr
fdiv
sti
cmp
out
lea
dec
push
xor
mov
mov
mov
inc
add
cwde
push
jne
idiv
push
jne
js
out
mov
mov
jmp
mov
add
fs
stos
mov
add
je
(bad)
stos
mov
mov
mov
jmp
movs
jo
sub
out
inc
pushf
ins
(bad)
jmp
xor
xchg
ror
jns
add
mov
call
add
xchg
inc
(bad)
loopne
out
jmp
mov
(bad)
(bad)
jge
adc
in
sub
call
(bad)
push
push
push
arpl
test
pop
cld
stos
cwde
mov
div
mov
ror
pop
lahf
movs
cmp
mov
call
add
jle
add
jmp
clc
out
push
push
lahf
movs
sub
jmp
call
(bad)
call
rol
mov
push
mov
jge
inc
shl
xchg
mov
test
(bad)
add
mov
push
sahf
movs
pusha
add
stos
mov
call
push
xchg
push
adc
aaa
cld
mov
lea
pop
add
dec
lock
sahf
gs
xchg
out
sti
jmp
push
cli
gs
inc
cwde
out
inc
call
mov
sbb
mov
in
out
ret
aaa
cmc
mov
or
add
lock
popf
gs
push
out
sti
push
push
cld
int
mov
jp
or
xchg
push
not
call
mov
call
ret
aaa
cld
mov
mov
fadd
lock
movs
gs
adc
sti
jmp
push
add
cli
ins
or
(bad)
xchg
out
inc
call
mov
pop
call
ret
aaa
ins
mov
call
push
pop
or
test
add
std
cwde
les
pop
mov
popf
pop
add
mov
in
(bad)
(bad)
mov
shl
add
loopne
add
adc
shl
push
cwde
gs
fsubrp
out
je
add
mov
jmp
push
mov
xor
div
jmp
mov
cmps
jmp
popa
cmp
gs
mov
add
stos
sahf
fsubr
mov
out
(bad)
out
lea
int3
xchg
xor
sti
call
add
xchg
pop
and
mov
ret
pop
jmp
jne
in
call
inc
fcos
jl
and
loope
(bad)
sub
mov
fcomp
(bad)
nop
mov
out
push
out
(bad)
fisubr
or
mov
mov
push
push
cmp
addr16
mov
stos
out
les
add
test
mov
push
jge
and
push
in
add
in
push
ins
shr
mov
(bad)
bound
cmp
sti
(bad)
(bad)
mov
xor
sbb
stos
neg
push
push
inc
xor
sub
test
add
xchg
inc
pop
mov
xchg
inc
dec
pushf
xor
push
mov
xchg
cmc
dec
add
cmp
dec
push
loopne
jge
adc
enter
sahf
inc
stos
call
mov
call
inc
and
push
or
and
popf
adc
inc
push
adc
cmp
add
gs
pusha
aam
add
nop
cmp
mov
adc
pop
cmp
out
push
cmp
lea
call
call
ret
ja
mov
call
cmps
push
cld
mov
sbb
fstp
cmp
call
les
mov
mov
push
push
add
pushf
gs
push
in
add
in
push
xor
(bad)
push
out
pop
mul
mov
push
call
dec
add
mov
mov
ret
push
test
push
xchg
adc
imul
out
mov
push
fist
pop
movs
mov
call
in
out
pop
xchg
cmp
cwde
dec
cld
movs
cmp
imul
rcr
add
retf
(bad)
sti
call
(bad)
call
push
loop
shl
push
jmp
cmp
adc
call
push
pop
adc
cmp
sub
stos
shr
lea
add
add
inc
jmp
(bad)
push
or
(bad)
xor
mov
xor
(bad)
xlat
mov
cdq
dec
lods
loop
movs
jl
adc
call
xchg
add
adc
mov
mov
inc
xchg
add
fld
push
xor
jmp
call
or
pop
in
call
out
call
cwde
ror
test
jmp
push
daa
adc
or
in
inc
push
mov
(bad)
nop
in
hlt
out
(bad)
call
(bad)
mov
lods
sahf
lea
cmc
sti
in
sti
jmp
push
cmps
xor
jne
out
pop
shl
add
pop
loopne
inc
add
add
scas
call
call
ret
add
push
in
inc
inc
int
mov
push
push
lods
inc
push
add
inc
push
push
add
push
add
add
add
aaa
lock
call
je
enter
pop
adc
shl
adc
in
add
out
pop
and
jmp
out
xlat
mov
rcl
or
hlt
push
mov
mov
sahf
iret
out
push
cwde
fs
xchg
cld
adc
cli
sti
stos
(bad)
mov
push
(bad)
add
pop
call
push
sub
into
inc
popf
nop
dec
and
scas
enter
push
lea
add
hlt
pop
call
push
adc
cdq
pop
add
pop
scas
pop
cld
es
in
inc
add
or
cmc
inc
repnz
jmp
je
mov
out
mov
push
mov
bound
adc
adc
add
mov
in
sti
stos
sub
add
add
mov
and
add
scas
in
jmp
pop
movs
inc
fisttp
sub
jmp
mov
add
xchg
jmp
rcl
aam
push
sbb
das
das
fsubr
push
fsub
xor
mov
inc
xor
idiv
dec
push
call
push
sub
mov
inc
or
scas
in
icebp
xchg
out
js
push
add
xchg
(bad)
jmp
push
mov
shl
(bad)
push
not
mov
adc
cmp
and
adc
int
sti
stos
sub
jge
add
out
mov
add
adc
gs
inc
cmp
sti
sub
add
add
dec
add
mov
out
push
movs
inc
sbb
lods
jo
cmps
call
mov
or
(bad)
push
adc
xchg
adc
call
push
pop
push
adc
jne
stc
sti
push
mov
add
fdiv
add
call
add
popf
mov
dec
and
loopne
icebp
ss
enter
lea
sar
inc
retf
sbb
xor
mov
(bad)
cli
mul
push
xchg
mov
dec
lds
add
lock
stos
pusha
fdiv
add
jno
(bad)
xor
or
pop
mov
jns
sti
push
add
retf
leave
push
add
addr16
movs
inc
lea
clc
xchg
loop
inc
jno
cld
dec
aas
mov
push
adc
mov
xor
xchg
add
(bad)
out
push
test
adc
add
ds
xchg
shl
call
into
out
push
popa
add
fnstsw
inc
fnstsw
dec
and
ficom
loop
or
push
add
stos
retf
push
int
mov
xor
or
add
(bad)
fimul
cli
cmps
in
add
adc
scas
cmp
adc
adc
mov
lock
cmp
mov
sbb
jno
fisttp
and
or
pop
cmp
test
sti
cli
pop
add
int
je
push
add
fwait
mov
jmp
aas
fs
fcmovu
div
jecxz
(bad)
or
test
adc
call
sti
jmp
adc
xchg
sbb
pop
shl
retf
jp
out
push
cmp
movs
jbe
sti
stos
inc
mov
push
aam
inc
jno
adc
pop
adc
outs
xor
out
push
pop
add
dec
in
inc
pop
cmp
loopne
out
out
push
lea
cmc
pop
call
xchg
retf
push
mov
add
retf
xor
cmp
idiv
sbb
in
add
adc
add
pusha
xor
pop
jo
and
jge
mov
fistp
(bad)
shr
mov
push
adc
rcl
add
clc
sti
mov
push
aad
sub
dec
in
pop
call
lds
fs
add
cld
mul
int3
mov
lea
mov
adc
add
sti
inc
adc
aam
adc
jmp
mov
adc
mov
out
cmp
mov
data16
inc
jno
push
add
pop
call
push
pop
add
int
out
int
dec
and
fistp
push
lea
repz
call
push
rcl
fcmovbe
xor
dec
ret
idiv
pop
fbstp
ss
mov
mov
adc
inc
add
jmp
pusha
in
fdivrp
jmp
je
scas
fbstp
into
out
mov
push
mov
rcl
pop
jne
add
movs
and
sti
stos
pop
add
rol
or
add
repz
call
mov
cmps
inc
fst
inc
mul
mov
std
cmp
dec
sbb
into
sti
push
push
push
loop
push
icebp
pop
adc
xor
mov
adc
xor
cmp
push
(bad)
ja
inc
xor
sbb
dec
push
call
retf
out
push
pop
add
sbb
aas
dec
and
fadd
out
xchg
(bad)
push
lea
repnz
call
data16
call
dec
fst
out
mov
mov
add
pusha
test
sti
stos
pop
hlt
mov
adc
fbld
rol
rcl
pop
mov
out
sub
push
rol
mov
push
add
neg
sti
push
cmps
inc
dec
cmp
frstor
(bad)
mov
jge
mov
sbb
imul
push
adc
adc
pop
jno
call
push
dec
popa
adc
add
gs
in
push
mov
push
js
inc
shr
add
shr
(bad)
lea
iret
inc
popf
aaa
dec
and
pop
add
fsub
repnz
add
pop
in
call
rcl
or
xor
mov
fdiv
out
push
xchg
mov
ins
mov
add
(bad)
add
call
je
test
(bad)
add
pop
ins
adc
add
push
add
rol
pop
or
call
add
cmp
and
fld
(bad)
dec
aaa
mov
and
loop
inc
adc
adc
adc
add
mov
mov
call
push
cwde
inc
adc
add
ss
xchg
jp
inc
xor
and
sbb
(bad)
out
push
pop
add
or
ficomp
retf
push
call
push
mov
std
(bad)
fst
add
in
pop
mov
ret
jg
int3
imul
int3
add
push
or
out
rcl
add
mov
push
fmul
xor
jmp
popa
push
leave
ret
fimul
add
fadd
or
loopne
jae
clc
jg
jg
mov
nop
fsub
sahf
mov
fxch
imul
ins
pop
and
cmp
cmp
std
shl
test
add
adc
icebp
add
adc
(bad)
jmp
adc
jle
jmp
push
and
mov
out
call
(bad)
fadd
push
in
adc
addr16
cmp
ret
int3
outs
jne
push
and
push
and
jns
int3
sbb
int3
jle
xor
(bad)
cmc
adc
add
shr
push
aaa
inc
and
in
test
cmc
adc
test
adc
cmc
adc
push
shr
in
adc
imul
mov
adc
add
popf
inc
sbb
adc
icebp
mov
adc
neg
js
cmps
add
adc
add
adc
add
push
adc
or
rcr
or
rcr
push
jg
hlt
and
mov
repnz
sbb
jecxz
and
pop
shl
pop
inc
and
arpl
jb
pop
xor
sbb
sub
add
rcl
sbb
rcl
cld
sbb
adc
dec
and
out
mov
sbb
cli
pop
ret
mov
int3
mov
cdq
ins
mov
add
push
xor
shr
mov
out
mov
xor
xor
xor
mov
mov
out
and
fmul
xor
jns
inc
and
scas
mov
inc
cs
inc
cs
push
push
shl
lods
fmul
pushf
cs
fsubr
fst
sbb
rcl
adc
inc
push
fmul
xchg
pushf
lock
cs
vmovq
jl
(bad)
cmp
adc
movs
inc
idiv
rcl
adc
call
aas
jne
(bad)
test
cli
dec
ret
mov
int3
jle
mov
or
add
jo
mov
mov
xor
loop
mov
cmps
push
adc
mov
push
mov
xchg
cld
adc
in
adc
int
fstp
rcr
out
gs
mov
xor
sbb
mov
out
fisub
push
cmps
add
loop
jno
mov
adc
push
xor
mov
add
push
aam
add
jmp
push
add
sbb
mov
aad
cld
sub
jmp
mov
lods
mov
add
call
mov
inc
inc
or
fsubr
jne
int
add
xchg
add
cwde
push
cld
mov
leave
xor
inc
xchg
cmc
cld
add
stos
popf
inc
inc
adc
out
mov
(bad)
push
(bad)
mov
adc
(bad)
fild
enter
in
jmp
aaa
inc
popf
jg
sbb
aam
push
jno
jge
cdq
mov
call
mov
xor
adc
sbb
dec
cld
jmp
sti
cli
test
cmp
cmps
rol
mov
pop
mov
cmps
mov
jmp
pusha
dec
inc
fld
jge
add
jge
fstp
call
mov
outs
xor
test
cld
stos
sub
adc
leave
jbe
out
mov
ret
in
jmp
xchg
adc
add
pop
adc
jmp
sahf
movs
aam
shr
jmp
push
sahf
inc
and
test
(bad)
mov
xor
add
sahf
dec
cld
(bad)
call
mov
mov
sbb
stos
test
inc
fwait
dec
cld
stos
sahf
inc
and
add
popa
shl
test
add
ror
call
in
push
jg
sbb
xchg
loopne
mov
and
mov
jp
jmp
dec
test
call
aad
dec
inc
dec
jnp
sbb
sar
adc
dec
test
sbb
cmp
call
mov
add
ins
xor
mov
hlt
cld
cmp
adc
adc
jmp
lea
retf
add
mov
mov
push
mov
cmps
mov
push
jp
sbb
jns
dec
test
jns
dec
test
jp
dec
sub
mov
jp
dec
or
mov
xchg
mov
add
in
dec
cld
jmp
jmp
cmps
out
adc
jmp
mov
popa
add
jp
dec
test
xchg
mov
fst
add
push
pop
in
call
out
adc
aam
push
mov
jge
cdq
lahf
dec
in
out
fsubr
bound
pop
xor
std
add
call
je
xchg
push
loopne
cwde
gs
pop
dec
cld
sub
mov
jge
cmp
call
mov
hlt
nop
cli
lahf
xor
setno
add
lahf
cmp
sti
stos
xlat
mov
jge
jmp
fucomip
dec
aam
mov
xor
std
push
xor
sqrtps
add
sahf
cmp
sti
mov
mov
jge
cdq
sahf
dec
aam
fsubr
retf
out
mov
inc
es
sub
cld
sbb
cld
jmp
cld
cli
and
xor
cld
add
stos
test
hlt
mov
cld
call
cld
stos
test
mov
aaa
cld
cmp
cld
stos
test
xor
ss
call
cld
push
gs
je
ss
jp
gs
test
ss
stos
pushf
inc
and
add
sahf
pop
jmp
inc
add
stos
pushf
dec
clc
outs
fsubrp
inc
add
pop
imul
dec
pop
xor
std
sbb
cld
jmp
jmp
cmps
loope
adc
jmp
mov
push
add
jg
inc
test
xchg
mov
inc
sbb
cld
stos
fwait
or
add
adc
out
mov
sbb
add
je
ss
add
jp
or
fadd
lea
out
mov
sbb
add
gs
iret
sub
pop
adc
out
mov
add
dec
in
mov
in
jmp
jle
sbb
jle
call
jmp
push
out
inc
add
cmp
sti
stos
call
call
or
fwait
pop
jmp
xor
test
add
stos
nop
dec
cld
(bad)
call
mov
movs
push
sbb
stos
call
cmp
ss
sub
xor
and
popf
inc
or
add
push
cwde
xor
imul
cmp
in
jmp
cwde
in
jmp
cwde
in
jmp
inc
adc
pop
dec
cld
mov
mov
enter
std
push
cmp
jmp
lea
aaa
jmp
lea
ret
jmp
mov
dec
dec
sbb
in
push
out
cmp
js
pop
sub
mov
leave
out
jmp
sub
mov
push
jmp
test
inc
fild
ins
out
lea
into
call
push
mov
retf
mov
xor
pop
mov
jmp
push
push
adc
add
dec
xchg
sbb
push
mov
sahf
(bad)
popfw
imul
pop
jnp
call
aad
cmp
popf
jns
pop
test
mov
fidiv
psrlw
(bad)
dec
xchg
enter
inc
xor
jmp
ret
cwde
xor
jmp
lea
out
inc
add
imul
ins
out
push
movs
je
imul
shl
jmp
pop
xor
jmp
lea
cmp
jmp
fild
jge
dec
push
inc
movs
lods
mov
mov
jmp
sbb
nop
(bad)
stos
ins
jmp
(bad)
lock
in
jmp
jp
inc
add
sub
mov
sub
jmp
jmp
test
pushf
(bad)
stos
ins
jmp
lea
out
call
ins
jge
stc
push
push
movs
nop
stos
ins
out
jmp
cmp
pushf
(bad)
call
lea
sub
inc
jns
mov
mov
jge
cdq
xchg
mov
mov
lds
jmp
mov
in
push
je
inc
pop
jno
push
sub
add
inc
sbb
mov
out
push
test
cld
jmp
cld
stos
lea
jmp
mov
fwait
jmp
xchg
inc
adc
cwde
push
cld
mov
add
out
jmp
push
call
in
xor
imul
mov
ret
jmp
push
inc
adc
cmp
mov
xor
movs
(bad)
out
cld
stos
mov
pop
shr
(bad)
cmp
mov
xor
add
pushf
fidiv
psrlw
add
dec
xchg
push
pushf
add
jmp
movs
add
inc
cld
stos
(bad)
jge
gs
inc
mov
jne
jo
inc
test
adc
sbb
out
xor
push
dec
mov
in
call
cmp
adc
cmp
inc
test
jo
inc
mov
jne
outs
inc
inc
test
add
jge
cdq
mov
outs
into
call
mov
xor
add
sbb
inc
cld
jmp
cld
cli
cdq
mov
inc
and
fwait
inc
or
dec
mov
inc
jo
std
test
mov
in
push
xor
inc
int
ficom
mov
xchg
loopne
add
fisub
cld
dec
adc
mov
ins
xlat
inc
test
fldl2t
fmulp
imul
mov
mov
movs
mov
push
enter
outs
mov
sub
jne
outs
mov
mov
addr16
push
and
cld
jmp
cld
stos
call
mov
movs
jge
cld
stos
call
cwde
push
in
jmp
sub
stos
push
out
lea
out
call
push
out
push
cld
jp
movs
and
push
in
(bad)
cmp
pop
call
fs
(bad)
loopne
out
jmp
mov
jl
pop
pop
mov
add
or
add
arpl
call
mov
ds
sbb
arpl
add
jge
icebp
adc
jne
or
jne
add
push
jno
jl
leave
push
dec
test
fs
mov
jo
enter
cld
stos
sub
jmp
lea
mov
out
mov
dec
cmps
mov
call
loope
xor
bound
jmp
cwde
fdiv
call
pop
in
(bad)
mov
push
in
call
pop
in
call
pop
in
inc
add
xchg
dec
pop
in
call
adc
dec
pop
cld
mov
xchg
xor
jne
jmp
push
dec
cld
out
pop
call
mov
je
adc
call
movups
add
and
inc
dec
inc
cld
sub
mov
jl
dec
and
cs
call
mov
add
add
adc
stos
xor
sbb
out
loopne
ret
mov
jns
loopne
adc
add
and
add
out
ret
push
cmp
or
cld
mov
jbe
enter
cld
push
je
loopne
jmp
lea
sub
lea
xor
(bad)
pop
fs
(bad)
loopne
out
inc
add
mov
jl
pop
and
xor
arpl
call
mov
push
inc
sbb
fs
add
inc
cdq
fs
aad
xchg
inc
test
mov
dec
mov
pop
call
mov
fs
adc
push
gs
add
cld
push
inc
and
sbb
iret
xor
pop
sti
mov
dec
dec
add
push
add
call
dec
mov
lods
push
inc
fsubrp
mov
(bad)
fst
jmp
push
xchg
gs
pushf
aaa
cld
jmp
cld
cli
xchg
gs
lods
aaa
cld
stos
xchg
gs
add
cld
call
cld
aas
cld
stos
xchg
mov
gs
or
cld
stos
xchg
mov
das
cld
call
or
fiadd
cli
jns
mov
jmp
cmp
xchg
jmp
sbb
ret
jmp
push
inc
adc
call
xor
enter
cld
or
dec
cld
add
cs
call
mov
hlt
lea
std
cli
xchg
gs
xor
cld
stos
xchg
movs
jo
push
jmp
cwde
fdivr
jl
repz
stos
repz
or
stos
push
jle
push
lea
scas
out
jmp
jae
imul
inc
gs
imul
cld
add
mov
mov
movs
jo
push
repz
cmp
or
push
cld
mov
or
dec
movs
mov
inc
fsubrp
xor
addr16
jmp
cwde
loope
jmp
xchg
or
lds
enter
cld
cmp
test
push
jmp
push
lea
ret
fld
mov
mov
mov
ror
call
xor
jle
adc
jle
ds
jle
ds
jle
sub
push
jno
jl
dec
push
cmp
jmp
cld
jmp
xchg
add
dec
push
lea
out
dec
push
out
push
inc
and
sbb
sbb
push
clc
cld
call
popa
mov
shr
mov
xchg
jmp
lea
mov
pop
pop
ins
out
mov
dec
ins
out
inc
add
call
mov
xor
pop
std
sbb
gs
jmp
cld
cli
sbb
sub
mov
call
cld
stos
sbb
sub
pushf
inc
adc
cld
stos
sbb
sub
pushf
fs
mov
sub
fs
push
jmp
cmp
jg
mov
repz
in
jmp
sbb
stos
jmp
out
adc
fcom
mov
repz
call
sahf
mov
jmp
js
psubb
jne
js
cmp
add
cmp
cmp
inc
add
mov
cld
stos
push
inc
and
sbb
push
sbb
call
cld
push
dec
cld
sahf
pop
call
mov
je
(bad)
cld
mov
gs
inc
sub
and
sbb
(bad)
and
ins
mov
call
(bad)
aad
jmp
repz
aad
or
jmp
ficom
inc
and
pop
inc
or
(bad)
(bad)
inc
js
clc
test
(bad)
(bad)
call
push
retf
push
aad
sub
add
pop
cmc
scas
(bad)
push
fnsave
call
inc
and
push
inc
or
(bad)
fwait
xor
(bad)
test
dec
test
fs
jmp
leave
inc
inc
pop
jp
push
sub
icebp
push
push
push
call
sbb
push
inc
or
pop
mov
enter
cld
stos
sbb
ficomp
call
xor
cld
stos
push
cmp
sti
cmp
inc
and
sbb
mov
jns
neg
mov
in
jmp
jns
push
test
jge
cmp
push
sbb
call
mov
(bad)
cld
sub
dec
push
nop
sbb
sub
out
(bad)
fsub
jmp
push
inc
nop
jl
sbb
mov
out
xor
mov
neg
xchg
jmp
adc
fnsave
jge
xchg
mov
frstor
(bad)
jl
(bad)
dec
mov
iret
call
mov
mov
out
stos
jmp
leave
mov
add
mov
mov
push
push
xor
mov
psrlw
push
in
sbb
cmp
sti
jmp
inc
sub
dec
loopne
into
call
mov
movs
adc
cld
stos
or
fdiv
inc
and
or
dec
les
xchg
scas
jnp
mov
(bad)
call
pop
dec
mov
inc
add
dec
(bad)
jmp
push
jecxz
or
aad
mov
xor
movs
out
cld
stos
or
cld
pop
shr
inc
xor
xor
xor
cld
cld
or
gs
in
cmp
jmp
cld
jmp
cld
stos
or
hlt
js
cld
mov
movs
je
mov
jmp
cwde
add
add
mov
out
jmp
mov
mov
mov
cmp
push
inc
and
or
es
jo
stos
mov
in
mov
cld
outs
shr
shl
loop
add
gs
sub
gs
stc
cmp
sbb
and
or
add
(bad)
dec
cwde
xor
mov
dec
test
ret
lds
sbb
mov
jg
test
nop
jl
popa
or
mov
int3
call
sbb
mov
jmp
lods
inc
or
mov
mov
mov
push
cld
call
mov
jmp
sbb
xor
cmp
(bad)
loopne
out
dec
ret
sbb
(bad)
mov
mov
mov
inc
cmp
stos
movs
movs
sub
jb
dec
mov
adc
out
(bad)
loopne
out
(bad)
cmp
idiv
test
mov
push
cmp
add
call
jmp
sbb
repz
sub
repz
cmp
pop
call
mov
(bad)
loopne
out
jmp
mov
push
jno
jge
cmp
call
enter
cld
jmp
xor
mov
mov
call
in
inc
sbb
sbb
add
mov
(bad)
data16
jmp
mov
sti
call
or
loope
xor
mov
cld
add
(bad)
call
cmp
ret
jmp
sbb
jmp
mov
and
mov
add
pop
call
mov
test
cld
jmp
adc
pop
enter
mov
mov
jne
mov
popf
mov
addr16
call
cld
mov
stos
xor
xor
lock
pop
and
jmp
lea
(bad)
jmp
mov
jbe
mov
add
sbb
mov
inc
fucomip
xor
mov
mov
call
fcomp
mov
lods
into
sti
(bad)
mov
into
sti
inc
inc
adc
fcom
sti
mov
cmc
repnz
stos
mov
call
mov
movs
cwde
or
stos
sahf
gs
popf
cmp
add
cmp
cmp
stos
mov
inc
or
fild
repz
call
out
jmp
lods
out
mov
dec
lods
out
call
call
mov
jne
cld
or
or
adc
and
nop
mov
dec
sbb
sbb
xor
mov
jmp
ret
mov
repz
jo
jmp
adc
pop
(bad)
sti
mov
pusha
xor
xor
call
jmp
(bad)
fadd
jmp
lea
out
call
lea
out
call
stos
mov
jno
jge
cdq
sahf
mov
out
xor
stos
mov
mov
movs
in
call
add
dec
mov
jge
mov
test
(bad)
aaa
mov
jge
icebp
popf
dec
mov
lahf
stos
out
mov
inc
es
stos
movs
lods
add
int3
sti
inc
add
xor
push
jmp
lea
psubsw
stos
out
lea
out
dec
test
jne
mov
jge
loope
dec
aaa
cmp
inc
aaa
sub
out
jmp
jae
sti
jmp
jmp
test
sbb
stos
cmps
jmp
lea
loop
sbb
add
out
(bad)
loopne
out
jmp
cmps
mov
jge
cmp
call
enter
cld
push
ror
div
xchg
mov
mov
call
cmp
jmp
lea
sub
fdiv
test
lea
xor
or
out
jmp
fcomp
ret
jmp
test
lahf
jmp
cwde
fidiv
enter
mov
jae
pusha
enter
ficomp
jmp
adc
pop
sar
mov
out
dec
movs
in
inc
jmp
xchg
mov
mov
call
add
sbb
mov
mov
sti
dec
fcmovnb
jmp
sbb
jg
mov
and
repz
inc
adc
mov
sub
(bad)
jmp
jmp
mov
jge
gs
jge
push
mov
mov
jge
sbb
call
lods
out
mov
xor
idiv
call
jmp
sbb
repz
xchg
mov
loopne
sbb
adc
xor
in
jmp
stos
out
inc
cld
sub
mov
stos
out
push
and
sbb
jmp
cwde
in
inc
add
test
out
lea
mov
jge
sub
and
mov
cmp
adc
add
mov
call
jmp
pop
xor
jo
out
jmp
lods
jge
shr
and
cwde
mov
and
mov
inc
fldenv
sub
xor
in
(bad)
jmp
dec
push
cld
mov
xor
add
call
jmp
lea
mov
adc
out
lea
jmp
add
mov
push
mov
pop
mov
call
push
inc
add
int
into
push
push
mov
jge
popa
mov
jge
icebp
mov
jge
loope
mov
push
sbb
dec
lods
pop
pop
call
mov
loopne
cld
jmp
cdq
and
jmp
lea
mov
xchg
lods
jge
mov
out
push
jge
stos
lods
out
jmp
cmp
jmp
lea
(bad)
jmp
lea
pop
out
jmp
pushf
jge
in
out
jmp
gs
aas
and
stos
call
nop
fs
fsub
(bad)
dec
lods
jmp
lods
out
mov
or
mov
dec
call
mov
xor
cmc
sbb
call
add
popf
out
(bad)
fdiv
out
mov
dec
addr16
call
dec
inc
int
into
add
xchg
mov
aad
stos
mov
jge
add
mov
push
call
mov
mov
hlt
cld
cmp
sti
sub
cld
sbb
cld
jmp
cld
cli
mov
add
xor
stos
mov
mov
sti
inc
xchg
pop
jmp
test
call
stos
out
mov
fs
cld
push
movs
sub
jmp
sub
ret
out
mov
out
loopne
pop
je
popf
push
add
and
ret
fcom
shr
mov
(bad)
mov
gs
fcom
idiv
jmp
lea
out
inc
add
cmps
jge
shr
xor
stos
cdq
gs
mov
xor
stos
mov
sqrtps
add
xchg
push
mov
cdq
gs
mov
mov
xchg
loopne
call
gs
fwait
jge
cmc
test
push
cld
call
or
adc
in
nop
jge
xor
push
xor
or
lods
xchg
loopne
pop
add
dec
and
jge
push
test
inc
xor
stos
push
mov
xchg
loopne
or
(bad)
call
(bad)
jge
push
cmps
out
inc
cld
stos
push
jge
cmp
test
jne
scas
xor
jge
xchg
cmps
out
inc
add
cld
jp
movs
adc
movs
out
jmp
cmp
call
push
outs
movs
out
lea
or
dec
pop
movs
out
(bad)
lock
jmp
mov
jge
mov
movs
jge
adc
xor
jmp
jmp
cwde
frstor
mov
out
mov
jecxz
loopne
add
adc
adc
add
scas
lea
out
jmp
mov
adc
fst
add
push
xchg
dec
cwde
push
mov
mov
cmp
stos
mov
out
ret
push
int3
scas
and
call
gs
mov
movs
xor
mov
repz
(bad)
xor
add
xor
add
dec
adc
adc
add
mov
ret
mov
loop
add
adc
setno
push
mov
mov
call
mov
stos
mov
out
ret
inc
int3
scas
and
ficom
and
(bad)
movs
adc
movs
out
jmp
add
fiadd
xor
add
adc
add
movs
jge
mov
out
push
jge
int
xor
jmp
movs
out
inc
xor
stos
std
fs
hlt
js
cld
mov
movs
adc
mov
repz
mov
out
lea
out
jmp
add
movs
out
jmp
cld
push
fs
je
xor
jp
movs
xor
push
nop
jmp
sbb
jmp
into
pop
movs
out
(bad)
lock
out
jmp
call
jns
out
jmp
enter
push
xor
and
dec
adc
adc
call
stos
movs
jge
movs
mov
das
cld
stos
pop
mov
jne
aas
or
adc
add
jmp
out
lea
out
call
movs
ret
mov
loope
add
add
and
push
mov
or
(bad)
cmp
add
call
ret
push
retf
scas
and
push
(bad)
inc
add
and
xchg
gs
in
daa
cld
jmp
dec
inc
pushf
sub
out
lea
out
call
mov
mov
out
add
xchg
(bad)
fst
sti
(bad)
cmp
das
call
mov
ret
push
int
and
add
stos
xchg
adc
popf
pop
and
xchg
movs
dec
call
dec
xchg
gs
mov
pop
cld
cmp
jmp
mov
pop
repz
fcomp
add
jmp
lea
out
jmp
mov
fisttp
push
cld
stos
xchg
movs
dec
stos
mov
jmp
repz
cmp
stos
mov
cmp
mov
jae
mov
jnp
mov
mov
call
mov
mov
mov
enter
cld
stos
int
pusha
rcl
jmp
lea
sub
jmp
mov
movs
xchg
inc
cld
sub
movs
dec
or
repz
fsub
(bad)
jmp
repz
pop
repz
pop
repz
mov
push
repz
xchg
outs
inc
mov
mov
jb
mov
out
jmp
xchg
xor
xchg
call
sub
jmp
lea
out
call
add
xchg
push
fs
push
push
cld
sub
fs
xor
sbb
mov
jmp
cld
cli
stc
je
stos
mov
jmp
xchg
inc
adc
mov
mov
pop
mov
out
mov
xor
add
mov
je
add
call
call
inc
jmp
jmp
lea
out
jmp
mov
rcl
jge
or
jge
cmc
cdq
aaa
sub
or
jmp
add
sti
jmp
inc
cli
mov
mov
pop
mov
cdq
in
call
add
sbb
mov
aad
out
inc
sti
stos
std
fs
adc
cld
mov
fs
mov
jl
mov
jmp
sub
repz
in
dec
mov
lea
imul
stos
cwde
pop
fisub
cwde
mov
sub
std
xchg
scas
sub
inc
jnp
sub
out
call
stc
idiv
jmp
cld
stos
mov
or
cmp
xor
call
cmp
(bad)
call
cwde
and
jmp
pop
xchg
sbb
stos
mov
fiadd
out
jmp
jae
imul
sbb
(bad)
je
stos
mov
jmp
or
idiv
stos
mov
int
mov
lea
sub
cmp
jge
xchg
mov
push
fs
fs
jmp
cld
cli
std
movs
jl
mov
jmp
xchg
inc
adc
mov
mov
pop
mov
inc
mov
sbb
mov
call
bound
call
inc
cdq
jmp
jns
jge
ror
cld
mov
movs
pusha
call
call
(bad)
imul
mov
retf
out
lea
mov
lea
(bad)
out
(bad)
rol
(bad)
fadd
add
mov
jns
out
inc
movs
or
mov
jmp
cwde
(bad)
sti
(bad)
stos
mov
mov
mov
mov
push
dec
clc
mov
mov
out
mov
clc
sahf
mov
out
mov
je
out
cld
mov
movs
sub
pop
repz
add
jecxz
(bad)
stos
mov
dec
mov
jmp
xchg
das
sub
pushf
jge
jge
out
jmp
inc
and
jmp
cld
cli
in
movs
or
fwait
out
jmp
mov
fwait
jmp
(bad)
loopne
out
jmp
fwait
jge
popa
xchg
add
fwait
jge
lods
call
add
push
shl
cld
push
je
jnp
out
jmp
sbb
repz
les
shl
out
(bad)
loopne
in
(bad)
cmp
jge
add
sub
sbb
movs
pushf
jmp
out
jmp
cwde
les
cmps
inc
fwait
out
lea
in
dec
add
jo
or
out
call
call
stos
xchg
ror
clc
xor
call
or
jmp
sbb
pop
dec
pushf
out
(bad)
loopne
out
jmp
cwde
jge
mov
aad
cld
sub
fs
add
fs
inc
sub
jmp
jmp
cwde
loope
jmp
call
stos
lea
sub
xchg
out
inc
cld
stos
jmp
out
jmp
dec
loope
(bad)
push
jmp
mov
push
dec
in
mov
add
stos
cwde
out
xor
(bad)
in
cwde
add
in
dec
clc
pop
mov
retf
out
mov
inc
(bad)
jmp
sub
je
or
sti
(bad)
fdiv
mov
call
dec
repz
cwde
jmp
lea
fucomp
xchg
addr16
out
lea
shr
ja
out
lea
icebp
call
pushf
out
lea
out
dec
cwde
jge
in
out
push
cld
push
inc
and
jmp
out
mov
sub
mov
call
cmps
push
inc
(bad)
jmp
mov
xchg
out
inc
cld
sub
out
jmp
fsubr
jmp
cwde
lods
sbb
add
cli
xchg
jmp
lea
dec
fild
out
out
ret
cwde
ins
(bad)
in
call
xchg
jmp
lea
test
(bad)
je
out
lea
enter
out
out
(bad)
loopne
jmp
lea
out
jmp
xchg
jge
lds
sub
stos
test
jmp
in
(bad)
call
xchg
jmp
lea
out
out
lea
call
mov
xchg
out
inc
sub
stos
test
jmp
cwde
lods
xor
stos
xchg
jmp
lea
out
jmp
xchg
jge
adc
sub
push
movs
cmp
add
out
jmp
sub
bound
out
call
xchg
jge
loope
sub
xchg
out
inc
cld
sub
out
jmp
fsub
jmp
cwde
movs
sbb
cli
xchg
jmp
lea
in
dec
xchg
jge
add
imul
jne
cmp
inc
dec
mov
(bad)
call
jmp
fisubr
imul
loop
test
xchg
out
jmp
movs
cmp
xchg
out
jmp
out
sbb
fcom
mov
test
dec
sub
call
jmp
(bad)
pop
out
xor
xchg
mov
call
cwde
xchg
mov
out
lock
lea
cli
pop
add
lods
out
inc
cld
stos
sahf
movs
in
dec
xchg
out
jmp
pop
cmps
or
mov
out
mov
xor
mov
add
(bad)
out
mov
lock
mov
loop
stos
scas
pushf
addr16
xor
rcr
dec
cli
xor
sbb
jl
test
out
(bad)
jge
inc
and
jmp
lea
stc
adc
jmp
inc
mov
jmp
jne
stc
adc
test
stc
or
cmp
jl
and
out
inc
add
sub
mov
push
cld
push
xor
sti
push
gs
clc
push
cld
stos
test
jmp
or
shl
out
(bad)
loopne
out
(bad)
cmp
mov
sub
jl
mov
stos
pop
cld
sbb
cld
jmp
jmp
add
cwde
pop
iret
jmp
mov
xor
call
jmp
pusha
addr16
jmp
xchg
(bad)
dec
push
and
sahf
gs
addr16
cld
push
jl
jno
push
daa
test
jmp
call
or
sahf
sbb
stos
call
inc
pop
loope
sub
cmp
xchg
out
mov
in
stc
cld
jmp
pop
add
add
fwait
gs
xor
cld
call
daa
test
jmp
pop
cld
stos
cdq
mov
pop
cld
mov
adc
test
loopne
cld
add
push
mov
movs
jo
call
in
inc
inc
sbb
sbb
mov
jns
jmp
imul
jmp
pop
repz
call
imul
mov
jmp
lods
xchg
fild
xchg
loopne
mov
aam
jne
dec
jne
inc
jne
add
call
jbe
test
(bad)
outs
es
jl
inc
(bad)
es
push
(bad)
pop
es
push
es
dec
mov
jl
add
inc
es
idiv
es
cli
ss
jl
sar
cs
jl
sar
add
jmp
stc
push
es
stc
push
es
stc
push
es
jl
add
push
es
stc
(bad)
and
add
mul
push
stc
out
and
inc
stc
out
imul
fisub
inc
stc
(bad)
and
adc
into
and
add
add
(bad)
and
adc
mov
jne
clc
mov
sub
jl
sar
scas
and
sar
and
std
neg
push
inc
sbb
xchg
xchg
dec
sbb
out
in
fsubrp
sbb
dec
xchg
push
enter
jmp
in
push
(bad)
imul
stos
out
inc
add
adc
call
jmp
push
push
sbb
sub
mov
mov
enter
jmp
push
push
out
xor
idiv
loopne
in
mov
aaa
cmps
imul
jne
jmp
fmul
jmp
mov
in
call
(bad)
fcom
(bad)
jmp
lea
in
out
inc
add
shl
pop
fwait
jmp
jmp
cwde
popf
cmp
jmp
mov
in
out
lea
in
jmp
jmp
lea
test
and
mov
es
and
stos
in
xor
jne
into
cld
mov
out
retf
mov
mov
out
cmp
sub
out
jmp
mov
in
call
lea
stc
stos
and
jmp
mov
jmp
mov
out
cmp
add
mov
in
lea
out
jmp
in
ret
pop
in
jmp
jb
imul
out
inc
add
movs
inc
stos
fsubr
jmp
or
call
mov
or
sub
out
xor
in
add
(bad)
shl
sub
fucomp
mov
add
out
stos
lea
hlt
cld
adc
call
jmp
add
cwde
gs
jmp
pop
movs
dec
(bad)
stos
jmp
(bad)
outs
fsubr
lea
pop
in
jmp
repnz
jl
or
out
inc
movs
inc
stos
jmp
or
shr
out
(bad)
loopne
in
(bad)
cmp
mov
sub
jl
push
jmp
and
sbb
jmp
cli
call
jmp
out
lea
lock
xchg
jmp
mov
mov
stos
mov
cmp
out
jmp
push
push
sbb
cmp
mov
in
jmp
enter
jmp
push
dec
repz
(bad)
fisubr
push
imul
stc
jecxz
dec
jae
call
in
call
pop
xchg
jmp
call
aad
(bad)
fdiv
jmp
mov
push
add
cmc
xor
cld
cli
mov
jmp
lea
push
jmp
mov
add
(bad)
iret
sbb
call
cmc
add
out
(bad)
mov
jl
add
xor
out
jne
in
fisub
imul
(bad)
and
in
into
and
adc
cdq
mov
pop
shl
retf
out
mov
inc
movs
in
sub
and
sbb
and
jmp
cld
cli
cdq
test
and
stos
mov
add
dec
ja
inc
in
jle
test
mov
jmp
pop
stos
xchg
(bad)
stos
call
out
lea
xchg
out
jmp
jb
imul
out
call
cmc
add
adc
add
lea
out
dec
fwait
cmp
in
push
outs
in
ret
sbb
call
lea
add
cwde
out
dec
ret
sbb
jl
fucom
out
push
sub
cld
jmp
jmp
cwde
xchg
dec
dec
out
out
mov
aaa
or
shl
out
(bad)
out
sbb
add
lock
xor
mov
ins
adc
loope
in
lea
dec
out
(bad)
jp
(bad)
and
add
ror
mov
jl
sbb
out
jmp
xor
sti
cmp
inc
and
xchg
inc
or
loope
dec
loop
enter
cld
jmp
stos
or
out
mov
add
repz
stos
xchg
gs
mov
cld
call
or
mov
jbe
add
cmp
mov
mov
out
(bad)
cmp
adc
in
inc
sbb
pop
pop
add
test
cld
stos
test
jmp
lea
mov
out
mov
or
sub
enter
jmp
in
pop
inc
dec
mov
jl
add
mov
xor
inc
sub
dec
mov
or
out
mov
xor
movs
cld
retf
cld
stos
mov
outs
rcl
jmp
lea
out
jmp
jecxz
inc
icebp
xchg
loopne
retf
(bad)
fst
and
mov
mov
ret
shr
movs
lock
lea
out
call
in
push
add
jno
jl
cdq
loopne
pop
cmp
out
xor
in
dec
or
enter
jmp
aad
pop
inc
dec
mov
jl
mov
xchg
and
pop
jl
cmp
dec
mov
and
xchg
mov
out
mov
in
xor
mov
(bad)
cmp
jmp
lea
out
call
add
jl
cmp
in
mov
jecxz
inc
movs
pop
mov
out
jmp
sbb
call
lea
in
lea
in
lea
mov
jl
sub
stc
pop
cld
stos
fild
adc
(bad)
inc
add
add
cld
stos
fisttp
pop
sbb
push
xchg
in
mov
xor
lock
mov
xor
pop
lock
push
adc
add
xchg
push
fsubr
fs
stos
(bad)
jl
gs
jl
stc
mov
jl
in
mov
jne
mov
mov
jl
add
cmp
dec
cwde
cs
call
mov
hlt
(bad)
icebp
cld
cli
xchg
gs
mov
cld
stos
xchg
gs
hlt
mov
cld
call
jmp
cwde
pushf
pop
(bad)
cmp
call
lea
out
dec
jmp
je
push
cld
push
movs
in
jmp
add
sbb
pop
jp
out
(bad)
loopne
out
jmp
call
out
inc
cld
sub
movs
add
call
in
(bad)
fsub
call
lea
out
jmp
out
push
xor
inc
or
mov
out
xor
or
test
and
call
jmp
gs
pop
inc
int
jmp
jne
mov
jl
cmp
jl
cdq
fmul
ficomp
out
mov
mov
lock
stos
fdiv
call
inc
into
mov
call
call
out
(bad)
jmp
lea
add
call
lea
mov
jl
aad
xchg
push
test
call
add
push
add
add
xchg
xchg
pusha
mov
out
std
dec
ficom
jmp
call
ret
push
xchg
pusha
(bad)
jp
and
push
jnp
lea
xor
out
call
in
out
push
stos
ror
(bad)
fdivp
pop
psrlw
(bad)
dec
xchg
pusha
sbb
out
neg
movs
in
(bad)
jmp
ret
test
ja
xor
in
call
jmp
sbb
out
(bad)
fmul
out
lea
mov
mov
jl
mov
jmp
xor
add
mov
pop
enter
jmp
xor
mov
jl
mov
(bad)
sbb
in
mov
jl
(bad)
inc
sti
sub
movs
dec
or
out
jmp
fsub
pushf
or
call
or
jmp
push
add
call
retf
jmp
in
jno
or
jmp
test
mov
jl
add
arpl
push
movs
sub
jmp
sbb
call
cmps
push
jmp
out
out
lea
test
dec
pop
out
out
mov
lods
out
dec
fmul
in
out
xor
jmp
pop
pop
xchg
imul
adc
popf
ret
jmp
xchg
inc
sbb
mov
mov
sbb
enter
cld
stos
test
jno
adc
cmc
cmp
out
lea
push
jmp
(bad)
lock
test
out
lea
push
jmp
pop
jl
cdq
fmul
in
out
xor
mov
mov
and
call
cmc
call
mov
sub
jl
loope
mov
jne
mov
mov
jl
sub
dec
lods
out
sbb
sahf
add
out
mov
xor
movs
test
cld
stos
test
jmp
lea
movs
jmp
lea
add
(bad)
test
cmc
pop
lea
pop
mov
and
call
es
repz
dec
xlat
test
xchg
imul
inc
mov
jmp
in
out
lea
mov
jmp
lea
call
mov
dec
mov
add
out
psubsb
add
xor
movs
and
cld
stos
xor
mov
call
pop
mov
repnz
jl
push
icebp
out
imul
jl
xor
mov
into
sbb
lock
sbb
lock
jne
add
out
mov
sub
scas
sbb
mov
cmps
sbb
mov
sahf
sbb
mov
xchg
sbb
lock
mov
xchg
test
out
jle
test
out
jbe
test
lock
sbb
lock
jl
and
add
jl
xor
mov
dec
sbb
out
inc
sbb
out
sbb
in
sbb
mov
sbb
mov
es
mov
jne
in
push
sbb
mov
jne
in
push
sbb
in
push
sbb
in
push
sbb
add
in
(bad)
sbb
in
neg
test
in
out
sbb
in
out
imul
dec
mov
or
out
mov
je
fdivr
call
sti
stos
retf
mov
sbb
cmp
movs
push
sub
in
(bad)
mov
sbb
inc
add
popa
sbb
fcom
mov
(bad)
out
(bad)
cli
add
call
gs
mov
cdq
mov
loopne
sbb
sti
dec
mov
dec
cmc
in
and
lds
or
adc
xor
in
(bad)
loopne
call
ret
es
sbb
sbb
mov
xor
add
movs
mov
cld
stos
scas
pushf
je
sbb
cmp
clc
shr
jmp
ret
sub
jmp
xor
cld
jmp
jmp
test
adc
stos
mov
and
out
lea
in
call
mov
(bad)
leave
mov
push
jge
stos
mov
jmp
add
cmp
call
lea
pop
in
jmp
jmp
mov
push
sti
mov
jmp
sbb
retf
out
(bad)
loopne
out
jmp
shr
inc
sbb
jmp
mov
xor
add
xchg
ror
xchg
popa
out
xor
mov
mov
and
lea
iret
jmp
pop
ins
mov
dec
push
repz
sbb
dec
pop
add
jne
retf
cld
push
pop
jne
adc
push
xchg
out
lea
lods
dec
mov
mov
jne
push
movs
mov
add
nop
dec
repz
fsub
call
lea
mov
mov
sahf
mov
idiv
or
mov
(bad)
cwde
movs
loopne
stos
mov
push
add
out
ret
xchg
inc
mov
iret
and
adc
adc
add
jmp
jl
lods
jae
push
cld
add
jp
mov
push
mov
idiv
popf
cwde
xchg
inc
jmp
out
sti
sbb
call
ret
out
inc
mov
push
and
adc
add
jmp
inc
sbb
stos
fdivr
jae
push
int3
pop
cld
call
jmp
add
cwde
cmps
les
aad
out
lea
lods
dec
mov
mov
jb
push
cld
push
movs
and
mov
jmp
sbb
call
(bad)
loopne
scas
jmp
in
jl
pop
stos
out
inc
cld
sub
out
jmp
fsubr
jmp
lea
lods
jmp
jmp
mov
stos
out
jmp
jge
call
test
add
fs
out
lea
scas
call
jmp
mov
test
push
cld
jp
movs
loopne
jmp
jmp
cmp
call
jmp
(bad)
loopne
scas
jmp
jmp
xor
push
cld
or
jmp
fsubr
stos
push
jmp
lea
mov
jl
fnstenv
jmp
movs
loopne
jmp
repz
and
ret
lea
add
pop
scas
jmp
jb
imul
out
inc
movs
aam
jmp
or
call
(bad)
loopne
scas
(bad)
cmp
jl
ins
stos
out
push
jge
stos
out
jmp
cwde
cdq
add
mov
out
lea
add
out
lea
mov
movs
add
out
jmp
push
mov
or
push
add
push
enter
in
call
repz
loop
test
push
imul
jns
jmp
or
jmp
sbb
jmp
call
call
inc
jmp
jmp
lea
mov
jl
cdq
mov
mov
jge
cmp
xor
jle
test
push
imul
mov
jmp
pop
push
ja
sub
cli
(bad)
cmp
jmp
pop
pop
stos
jmp
sbb
jmp
add
sbb
dec
in
out
jmp
out
mov
sbb
call
in
addr16
dec
mov
jl
fucomp
out
push
and
cld
jmp
jmp
cwde
movs
cmp
jmp
sbb
loopne
(bad)
loopne
in
jmp
jmp
mov
add
out
inc
cld
stos
popf
movs
dec
mov
out
jmp
pop
movs
mov
push
call
mov
sti
jmp
jmp
movs
or
sbb
xor
mov
sub
call
(bad)
rcr
call
mov
jl
jno
out
inc
add
movs
add
fs
out
jmp
mov
jmp
call
mov
jl
pop
in
out
push
add
pushf
cwde
jmp
pop
xchg
in
push
call
lea
in
jmp
in
jl
sbb
add
add
in
out
jmp
fmul
call
(bad)
enter
jmp
test
mov
setno
idiv
or
jmp
dec
jmp
adc
fsubrp
ret
xchg
lds
loopne
sbb
adc
adc
xor
sti
call
add
fsubrp
push
cld
push
jl
in
out
inc
movs
or
repz
xchg
mov
stos
in
call
(bad)
lock
jmp
mov
jl
pop
fsubrp
jmp
mov
fs
mov
dec
std
stos
in
call
lea
add
in
jl
mov
out
push
jge
test
out
jmp
push
(bad)
mov
call
adc
adc
xor
sti
(bad)
jp
jl
mov
xor
cld
mov
mov
push
mov
movups
dec
in
out
neg
movs
xor
sub
call
in
out
ret
enter
jmp
lea
mov
adc
jmp
mov
fucomp
push
cmp
cld
call
jmp
cwde
lea
jmp
cmps
pusha
fucomip
lea
in
dec
jmp
mov
fsubr
push
cld
push
movs
dec
js
out
jmp
add
sbb
call
(bad)
loopne
in
jmp
jmp
inc
add
cld
sub
jmp
fsub
scas
ds
lea
repz
jmp
movs
mov
movs
hlt
cmps
jmp
push
add
fsubrp
lea
sar
call
jmp
dec
mov
mov
idiv
popf
xchg
xchg
mov
cmp
push
mov
out
ret
push
ret
mov
stos
call
je
pop
push
add
or
jge
(bad)
out
jmp
and
cld
jmp
inc
add
mov
mov
sub
dec
out
adc
jmp
jmp
cmp
jl
sbb
out
push
adc
call
jmp
sbb
call
lea
in
dec
call
out
push
stos
call
adc
(bad)
fcom
call
(bad)
fmul
(bad)
jmp
mov
jmp
stos
call
push
movs
sti
call
call
out
lea
cli
jmp
call
out
jmp
jmp
jne
add
callw
ins
push
inc
push
mov
scas
lea
in
call
in
mov
nop
sti
jmp
adc
add
add
ins
mov
call
in
mov
in
push
sub
cld
jmp
inc
movs
fmul
inc
repz
add
jecxz
push
dec
out
lea
repz
jecxz
mov
iret
out
jmp
cld
push
movs
hlt
data16
jmp
sub
call
lea
sub
call
loop
test
into
out
push
add
pop
adc
adc
xor
loop
inc
add
xchg
movs
push
pushf
dec
repz
mov
out
and
sbb
and
cwde
pushf
lods
cld
stos
loop
mov
into
out
ret
pop
xchg
je
stos
loop
push
pop
into
out
lea
jae
jmp
jb
imul
out
inc
movs
hlt
test
add
inc
repz
cmps
cmp
stos
in
push
jl
out
(bad)
loopne
in
(bad)
cmp
adc
in
mov
shr
push
inc
and
mov
out
mov
test
(bad)
cli
daa
enter
jmp
mov
sti
mov
xor
movs
cmp
cld
stos
nop
int3
ja
adc
std
scas
in
lea
cmps
jmp
lea
add
add
(bad)
mov
fs
jmp
xchg
mov
jecxz
jne
fldl2e
adc
out
jne
loopne
retf
test
data16
rol
push
mov
jl
cdq
ror
and
in
sub
mov
(bad)
fdivr
call
lea
add
in
jne
ficomp
jne
fst
dec
inc
fisubr
mov
in
mov
into
out
push
push
lea
add
out
lea
in
jmp
fidivr
jns
jl
sbb
jl
pop
int
jmp
movs
xchg
test
dec
repz
add
sahf
mov
sub
out
push
in
pop
push
int3
movs
les
int3
out
call
test
jl
popf
in
inc
mov
stos
xchg
jge
test
mov
mov
stos
retf
call
jmp
int3
in
(bad)
cmp
adc
test
popf
mov
mov
out
xchg
out
pop
sahf
retf
movs
les
out
call
jmp
aam
out
mov
in
push
leave
cld
mov
push
shr
jmp
retf
stos
pushf
mov
cmp
out
daa
retf
out
pop
push
retf
or
out
call
mov
out
mov
in
push
mov
ret
shr
jmp
retf
call
popf
add
push
retf
out
pop
dec
retf
cmp
out
call
add
out
mov
in
jmp
retf
push
in
jmp
gs
pop
ret
sbb
mov
or
call
lea
loopne
jmp
enter
leave
out
push
cmp
or
scas
sti
add
jmp
sti
jmp
jmp
cwde
jns
jmp
mov
call
lea
frstor
test
retf
xor
das
cld
call
sti
push
jl
push
or
pop
std
stos
enter
leave
out
inc
add
mov
int
test
mov
call
(bad)
fcom
sub
sbb
jl
gs
out
push
test
pusha
stc
(bad)
out
jmp
cwde
xchg
sbb
mov
call
lea
fsubrp
aaa
test
leave
out
inc
sti
stos
mov
xor
cmps
sti
call
jmp
sbb
call
(bad)
fcom
(bad)
fdiv
in
jmp
int3
jl
pop
retf
out
inc
sti
sub
out
jmp
enter
jmp
lea
fst
push
test
add
out
push
mov
xor
cmp
push
push
fcmovne
out
lea
in
dec
retf
jl
lods
int3
out
push
sti
push
movs
push
jo
repz
mov
call
(bad)
loopne
in
jmp
retf
vpmaxsw
add
inc
idiv
sti
sub
jmp
fsub
scas
sbb
out
lea
in
jmp
retf
jns
out
jmp
movs
xor
cmp
jmp
xor
stos
retf
fmul
out
lea
in
call
retf
popf
retf
out
push
sti
add
jp
je
test
out
sub
cmp
test
stos
int3
in
(bad)
loopne
in
jmp
int3
ret
cwde
in
jmp
nop
loopne
cmp
and
mov
out
jmp
fidivr
out
jmp
mov
call
lea
add
and
(bad)
cmp
test
jl
mov
out
push
sti
sti
call
jmp
sbb
call
lea
in
dec
int3
jl
pop
int
push
jl
cmp
out
jmp
fdivr
call
(bad)
fcomp
inc
add
(bad)
ss
int
inc
movs
xor
cmp
call
int3
call
(bad)
clc
sbb
jmp
int3
jl
(bad)
out
jmp
cld
push
jl
push
call
stos
int3
call
lea
in
call
add
retf
out
push
movs
in
fsubr
jmp
mov
fsubr
ss
fsubr
(bad)
fmul
retf
fstp
fucomip
push
clc
sti
sti
mov
inc
or
scas
mov
stos
(bad)
enter
cld
cmp
out
xchg
fsubr
mov
add
fs
cld
push
fs
je
or
push
fs
ror
cld
stos
lods
jl
test
add
dec
lods
fwait
cld
stos
(bad)
jb
fsubrp
lea
pop
repz
cmp
push
lods
fidivr
fucomp
push
pushf
sti
sbb
jmp
cwde
ins
(bad)
jmp
cwde
test
(bad)
sahf
add
push
fucomi
(bad)
enter
clc
fucomp
jmp
xchg
in
jmp
ficomp
pop
ins
(bad)
jmp
cmp
out
(bad)
lea
in
jmp
fidiv
fidivr
rol
lods
cmps
fdivr
fucomi
jmp
jl
test
add
(bad)
call
fsubr
mov
add
out
lea
call
lea
fucomi
lea
int
xor
xlat
jl
std
int
lods
cmps
xlat
jl
leave
(bad)
jmp
jl
test
out
jmp
pop
test
call
lea
out
xchg
cmp
out
lea
in
jmp
pop
xor
xlat
jl
add
(bad)
int
lods
cmps
fdivr
(bad)
jmp
cmp
mov
mov
dec
cmp
out
jmp
fsubr
jmp
enter
jmp
lea
call
lea
into
(bad)
xor
into
lods
xchg
fdivr
fldz
push
cmp
pushf
sti
stos
stos
jl
mov
out
jmp
pop
push
jmp
sbb
call
lea
pop
out
dec
aam
mov
shr
push
dec
ret
fsubr
jmp
add
lds
aam
ret
or
out
adc
out
pop
push
aam
rol
call
fsubr
call
mov
aad
push
cmp
fadd
call
jmp
fsubr
(bad)
cmp
adc
test
test
std
mov
call
lea
push
out
jmp
fisttp
imul
ja
jbe
jl
sub
out
push
cld
call
jmp
in
call
inc
(bad)
jmp
fsubr
mov
enter
jmp
lea
out
inc
stos
sti
stos
test
test
out
jmp
mov
add
out
lea
add
xor
add
stos
cmps
sar
out
out
inc
add
cld
push
jne
imul
cli
call
test
fucomip
out
lea
push
in
jmp
aam
dec
mov
aam
lea
out
push
test
xor
aam
jmp
fcomp
call
lea
in
jmp
sar
add
out
jmp
jge
test
out
jmp
pop
movs
imul
shr
(bad)
aad
out
lea
add
jmp
repnz
jl
popf
out
out
inc
movs
jl
aam
jmp
or
call
lea
and
(bad)
cmp
push
stos
ss
mov
in
out
inc
add
movs
or
shr
jmp
cwde
sahf
xor
cli
shr
inc
(bad)
lock
lea
in
dec
aam
mov
out
out
push
jge
cmp
out
jmp
pop
cmps
imul
aam
jp
in
out
lea
sbb
pop
or
jl
in
in
out
inc
stos
sahf
movs
jl
in
out
jmp
sbb
call
(bad)
lock
in
jmp
cli
inc
or
in
jl
mov
out
jmp
sub
sti
jmp
sub
inc
sahf
mov
in
lea
in
call
jmp
mov
xchg
loopne
jmp
pop
and
test
jmp
mov
out
jmp
sbb
call
(bad)
lock
stos
clc
rol
test
aam
inc
sti
sub
jmp
enter
jmp
lea
add
not
(bad)
fst
out
push
sub
lods
test
and
call
jmp
pop
sbb
dec
jmp
je
idiv
push
movs
jl
jmp
sbb
retf
out
(bad)
call
dec
add
cmps
call
out
inc
sti
sub
out
jmp
fsub
call
lea
in
jmp
out
lea
jmp
jmp
movs
sbb
adc
jmp
das
std
stos
out
add
jmp
in
call
out
mov
add
jmp
cmc
sti
jp
inc
and
call
mov
xor
movs
rol
stos
pushf
dec
cld
pop
fsub
retf
out
mov
inc
movs
xlat
cld
sub
out
jmp
fsub
call
lea
in
jmp
call
out
jmp
stos
call
clc
mov
jmp
stos
call
out
lea
in
call
call
out
push
sti
jp
jge
test
mov
jmp
call
(bad)
loopne
in
jmp
in
jl
pop
in
out
push
xchg
sti
or
sbb
out
jmp
fsub
call
lea
in
jmp
jmp
lea
movs
xchg
sti
stos
popf
jge
test
mov
call
jmp
stos
jmp
(bad)
rcr
out
lea
or
jmp
repnz
int
out
inc
jge
test
add
mov
dec
movs
jmp
stos
jmp
loopne
in
(bad)
cmp
mov
sub
jl
dec
in
out
push
xchg
sti
sbb
jmp
cwde
movs
jmp
cli
jmp
out
lea
in
dec
jmp
mov
xchg
sti
stos
pushf
jge
cmp
out
jmp
add
pop
movs
jmp
mov
call
lea
(bad)
in
jmp
pop
add
popf
jmp
inc
jge
mov
out
jmp
sbb
call
(bad)
lock
jmp
cli
inc
add
dec
fucomip
jmp
enter
lea
jmp
mov
jmp
add
fsubrp
lea
in
call
jmp
lea
mov
jge
test
mov
(bad)
cmp
call
lea
or
jmp
jmp
fsubrp
push
sti
mov
out
jmp
sbb
call
fucomp
(bad)
loopne
in
jmp
cli
scas
add
in
jl
pop
fsubrp
jmp
push
xchg
sti
jmp
jmp
cwde
mov
std
stos
in
call
(bad)
lock
in
jmp
in
jl
or
cmp
in
in
out
jmp
dec
mov
std
push
call
lea
add
adc
(bad)
jp
mul
jno
out
push
sti
call
jmp
sbb
call
(bad)
shl
mov
push
in
jl
std
jmp
jmp
jmp
cwde
movs
or
mov
call
(bad)
loopne
in
inc
add
jmp
mov
fsubr
inc
sti
stos
lea
jmp
pop
(bad)
aam
push
call
lea
dec
in
jmp
jmp
movs
mov
movs
enter
call
xchg
xlat
jl
push
jmp
or
jmp
cli
(bad)
fmul
dec
rcr
lea
out
jmp
jmp
movs
xor
test
out
jmp
pop
mov
std
stos
jmp
dec
add
jmp
adc
fld1
out
inc
movs
test
adc
or
call
mov
mov
loopne
pop
mov
and
call
sbb
in
dec
call
xor
jae
mov
call
(bad)
loopne
out
jmp
out
mov
jmp
inc
cld
stos
cdq
movs
add
mov
out
jmp
pop
mov
std
push
call
lea
in
jmp
call
out
jmp
movs
sbb
adc
(bad)
call
call
out
(bad)
loopne
out
call
out
cmps
add
out
lea
out
push
pop
fwait
sti
cli
cdq
jge
test
add
(bad)
mov
call
out
(bad)
loopne
in
jmp
call
out
push
jge
cwde
call
cli
call
sbb
push
call
lea
push
in
jmp
in
lea
out
jmp
jge
stos
in
jmp
add
fcom
call
(bad)
loopne
out
(bad)
jmp
lea
out
inc
mov
shr
sbb
dec
jecxz
mov
out
out
(bad)
loopne
out
(bad)
cmp
test
mov
out
push
mov
sbb
jecxz
jmp
sbb
jp
call
lea
in
dec
loop
lea
in
push
movs
inc
cmp
out
jmp
fcomp
mov
fcom
in
(bad)
jmp
lea
out
out
inc
mov
mov
mov
adc
add
add
push
in
jmp
loop
mov
jmp
call
add
adc
push
movs
sbb
pop
in
dec
je
cdq
in
cmp
add
push
mov
cld
cmp
out
loopne
in
jmp
cli
add
in
mov
mov
(bad)
jmp
xchg
adc
dec
adc
(bad)
cli
popf
movs
sbb
adc
call
movs
sbb
adc
call
jecxz
cmps
(bad)
out
out
lea
in
dec
jecxz
lea
out
push
sti
push
jl
js
out
jmp
sbb
call
lea
add
cmc
jmp
stos
cli
mov
mov
in
out
inc
sti
sub
out
jmp
fsub
call
lea
cli
inc
mov
mov
out
jmp
movs
inc
test
out
jmp
push
in
and
out
out
lea
out
inc
add
in
lea
jecxz
push
sti
jp
jl
stos
in
out
jmp
cmp
call
lea
in
jmp
stos
(bad)
jmp
jmp
or
out
jmp
fcom
call
lea
stc
scas
mov
jl
leave
jmp
mov
mov
pop
in
call
pop
(bad)
stos
jmp
dec
or
jmp
bnd
jl
or
cwde
mov
sbb
mov
dec
xchg
push
jb
out
out
lea
push
in
(bad)
cmp
push
mov
add
inc
jmp
mov
sbb
jmp
cli
call
jmp
out
lea
out
dec
jmp
mov
out
sti
stos
xchg
jge
cmp
out
jmp
pop
xchg
sbb
mov
call
lea
in
jmp
(bad)
mov
fucom
out
inc
add
movs
sbb
jmp
cmp
stos
call
out
(bad)
call
(bad)
loop
es
out
jmp
sub
sti
jmp
jmp
cmps
cmp
or
out
mov
out
jmp
out
xlat
in
or
dec
movs
and
stos
jmp
cmc
mov
inc
int
fst
mov
jl
pop
jmp
push
shl
sti
jp
movs
cmp
jmp
call
(bad)
loopne
in
jmp
call
out
push
movs
sbb
call
cli
(bad)
fsub
jmp
lea
(bad)
jmp
lea
out
call
call
out
push
cmp
inc
xor
and
cdq
inc
or
fwait
jg
push
xor
jne
mov
clc
out
fsub
bound
out
mov
je
(bad)
cld
call
sti
add
stos
cwde
inc
and
fwait
inc
or
push
out
and
in
mov
aam
imul
and
push
(bad)
call
(bad)
inc
sbb
test
add
cmc
or
cld
mov
jmp
mov
aaa
dec
pop
mov
jmp
mov
clc
jmp
dec
add
(bad)
mov
mov
jl
test
(bad)
fisub
out
mov
movs
sar
in
stos
fs
push
xor
call
dec
push
mov
call
jg
inc
dec
clc
(bad)
iret
jmp
jmp
stos
dec
pop
ret
xchg
inc
sbb
add
mov
mov
cli
xor
mov
mov
stos
stos
xchg
mov
adc
jne
out
out
mov
sbb
jle
out
mov
sbb
std
jmp
jl
test
(bad)
pop
gs
out
mov
movs
push
mov
lock
mov
and
lahf
inc
or
push
jecxz
adc
add
in
mov
(bad)
push
imul
xor
jmp
(bad)
inc
sbb
cwde
dec
add
add
test
mov
jmp
mov
sbb
adc
xor
mov
pop
mov
jmp
mov
cli
aad
imul
fs
jp
pop
ret
es
sbb
add
sbb
mov
cmc
xor
movs
lds
mov
jmp
push
stc
sub
pop
push
cwde
inc
and
sahf
inc
or
push
(bad)
adc
jmp
cmp
push
imul
rcr
call
dec
add
movs
and
jns
in
out
mov
add
xor
mov
and
call
jnp
int
dec
into
imul
jl
cdq
xchg
dec
call
(bad)
in
out
mov
movs
push
mov
or
imul
call
dec
pop
mov
jmp
xor
into
add
stc
cmp
inc
sbb
call
mov
mov
mov
rol
sti
stos
pop
mov
push
into
mov
mov
cmp
call
xor
xor
int
cmp
inc
mov
call
mov
xor
cld
sub
sti
or
inc
or
int
xor
cmp
call
cwde
(bad)
retf
ds
inc
aad
mov
xor
mov
cmps
cld
cmp
mov
pop
jmp
mov
inc
and
or
fst
add
out
mov
sub
or
ds
ret
es
or
aad
mov
cs
movs
jecxz
cld
stos
jg
(bad)
push
sbb
cmp
xchg
hlt
dec
add
call
aad
jge
pop
das
and
jmp
push
jl
sub
call
mov
movs
bsf
add
stos
mov
sti
stos
mov
mov
data16
mov
xchg
xor
mov
aaa
mov
call
pop
leave
mov
jmp
in
or
(bad)
add
jne
movs
cld
call
into
loopne
out
mov
inc
cmp
mov
sti
or
in
xchg
sti
jmp
or
retf
scas
xor
sub
mov
cmp
call
mov
xchg
pusha
pushf
cli
call
cwde
cli
jmp
mov
call
sbb
cmp
add
lds
nop
adc
out
(bad)
fsub
dec
cmp
mov
add
icebp
dec
call
in
jmp
pop
nop
inc
pop
inc
es
sub
fwait
es
dec
test
xor
dec
adc
xor
inc
sbb
out
xor
inc
pop
mov
xor
call
cwde
in
jmp
pop
in
jmp
sti
(bad)
cmp
scas
jmp
pop
in
jmp
push
int3
sbb
sub
add
stos
out
call
aad
pop
inc
ret
xor
loope
pop
shl
xor
rol
shl
xor
inc
dec
sahf
mov
xor
xor
xor
call
in
jmp
xchg
inc
or
xor
push
inc
xor
jno
jge
jmp
pop
call
mov
fs
xor
je
idiv
push
inc
and
mov
shl
push
cmp
mov
test
xlat
imul
push
popa
in
call
cmps
(bad)
jmp
add
out
sbb
fcom
mov
xchg
jo
enter
cld
sbb
xchg
nop
sbb
and
xor
jmp
mov
and
dec
pop
out
call
aad
xchg
inc
or
xor
dec
cmp
fdiv
xor
in
out
push
fdivr
call
or
sahf
pop
inc
add
xor
test
cld
stos
mov
call
mov
movs
pop
retf
mov
clc
sti
cmp
inc
or
(bad)
xor
xor
in
(bad)
imul
lods
pop
in
call
cmps
(bad)
call
cmps
cmps
inc
movs
xor
mov
sbb
clc
add
cmps
xor
jne
cwde
mov
inc
cdq
idiv
stos
mov
jo
or
sti
inc
inc
int
pop
clc
data16
jne
xchg
mov
popf
adc
jmp
push
fdivrp
sbb
add
popf
aas
repz
cmps
sub
jne
xchg
mov
pop
sbb
jmp
(bad)
lods
inc
pop
cmp
clc
add
push
sub
inc
push
sbb
jmp
mov
and
dec
popf
out
call
aad
mov
cmp
leave
test
cmp
div
sub
sbb
xor
sti
call
jmp
push
lods
inc
mov
pop
add
cmp
test
jne
nop
mov
lea
add
fsub
sti
jmp
lods
inc
dec
cmp
dec
inc
nop
rol
pop
add
jl
sti
call
lods
inc
sbb
sub
cld
sbb
and
call
and
jmp
sbb
pop
aad
mov
cmp
enter
scas
mov
call
popa
xchg
sub
mov
daa
jmp
mov
repz
in
call
aad
add
cs
test
xlat
cwde
sub
inc
cmp
call
mov
hlt
or
cld
cli
cdq
rol
stos
cdq
fs
adc
sti
call
or
ficom
mov
daa
mov
jecxz
call
xor
enter
inc
aad
stc
mul
mov
jge
cdq
pushf
dec
lock
ficomp
mov
movs
push
enter
fs
mov
out
cmp
inc
push
out
sub
xchg
sti
sbb
mov
fstp
adc
daa
mov
call
hlt
test
and
call
push
cmp
mov
call
xor
xchg
sti
call
or
fnclex
xor
add
mov
call
cmp
sti
inc
les
or
rol
mov
xor
inc
aad
cld
sub
xchg
nop
adc
sub
mov
in
out
lea
daa
out
mov
sbb
mov
pop
call
mov
sub
enter
cld
add
stos
push
jmp
lea
adc
(bad)
xor
out
mov
call
mov
fistp
push
cmp
(bad)
test
sbb
mov
call
mov
inc
bound
or
in
or
inc
or
(bad)
xor
add
sub
call
xchg
aam
call
mov
call
rol
mov
aaa
xor
inc
xchg
scas
cld
stos
imul
adc
jmp
jmp
sbb
jne
cmp
sbb
pop
pop
pop
xchg
inc
and
fwait
inc
or
(bad)
xor
inc
mov
sub
add
add
(bad)
imul
dec
push
in
call
les
or
into
add
xor
imul
sub
jmp
mov
sbb
dec
popf
fistp
call
cwde
cwde
inc
sbb
sub
jne
sub
inc
(bad)
sbb
stos
leave
push
ret
push
les
or
into
add
xor
and
cdq
adc
jmp
mov
out
mov
or
mov
call
lds
(bad)
test
cmp
ss
push
jno
jge
cmp
call
mov
hlt
xchg
or
xor
stos
cwde
inc
and
add
xlat
loop
inc
cmp
test
(bad)
imul
mov
in
call
mov
ins
cmp
push
mov
or
add
jne
popf
cld
push
add
push
sbb
call
pop
ficomp
cld
stos
mov
inc
hlt
dec
call
push
loopne
inc
pop
xor
(bad)
jmp
xor
scas
jmp
int
call
xchg
les
or
daa
xor
movs
or
fwait
rcl
jmp
mov
in
mov
sbb
dec
xor
mov
call
fwait
inc
int
into
lds
jge
and
out
inc
add
lods
and
sub
jmp
push
mov
or
aad
mov
pop
in
(bad)
cmp
mov
call
int
xor
sub
call
(bad)
aam
call
cmps
mov
or
cmp
enter
cld
stos
pop
mov
jge
sub
mov
add
psubsw
out
mov
jecxz
mov
sbb
call
and
das
pop
lds
out
jne
cs
test
mov
or
(bad)
add
mov
pushf
cld
stos
pop
sub
adc
out
jne
xor
pop
push
mov
push
fwait
inc
or
add
into
fidiv
in
and
enter
cmp
inc
(bad)
add
mov
sahf
cld
cmp
popf
adc
jmp
(bad)
clc
xor
call
jmp
mov
loop
mov
sbb
call
push
into
repnz
sub
mov
ret
jmp
ficomp
(bad)
fcomp
(bad)
jmp
enter
jmp
lea
jmp
lea
jmp
mov
sbb
call
call
mov
sub
enter
cld
stos
pop
cmp
mov
add
imul
(bad)
fadd
out
(bad)
fdiv
inc
sbb
(bad)
clc
push
out
lea
jmp
lea
jmp
mov
adc
dec
int
mov
call
mov
(bad)
jmp
and
push
xor
jnp
cmp
aam
add
call
mov
mov
ret
cld
cmp
xchg
sti
stos
xchg
cmp
xor
sbb
call
cld
push
xor
std
sbb
mov
clc
dec
and
jmp
call
mov
mov
ret
cld
cmp
and
xchg
inc
or
rcr
add
adc
and
call
cwde
int3
mov
call
push
sti
call
fld
mov
outs
xor
mov
pushf
cld
stos
dec
add
sahf
pxor
(bad)
push
out
lea
inc
jmp
lea
addr16
mov
idiv
mov
dec
out
call
aad
xchg
inc
popf
sbb
test
sbb
xchg
ss
dec
int
mov
sub
sbb
and
lea
out
push
dec
xchg
sti
jmp
jmp
cwde
mov
sti
dec
and
mov
pxor
pop
dec
and
call
mov
push
xor
sub
mov
pop
and
(bad)
fdivr
push
(bad)
or
jmp
lea
jmp
lea
jmp
lea
adc
mov
movs
in
(bad)
jmp
xor
add
and
call
mov
xchg
inc
xlat
add
inc
xchg
stos
cld
stos
dec
and
(bad)
or
in
inc
sbb
pop
xlat
add
test
push
mov
dec
or
out
inc
inc
call
push
xor
inc
(bad)
popf
cld
sub
xor
sti
sbb
call
pop
push
cdq
jp
pusha
adc
sar
pxor
mov
add
loope
cld
call
add
cwde
mov
sbb
and
pop
mov
call
push
add
jne
lahf
cld
push
shr
xor
sti
stos
lahf
out
rcl
call
pop
ficomp
call
push
inc
sub
push
in
sahf
cld
jmp
add
dec
sahf
cld
cli
cmps
shr
idiv
ja
out
adc
dec
jmp
add
sbb
pop
add
or
mov
mov
jmp
pop
mov
ret
jae
int
je
imul
mov
out
cmp
cmc
loopne
inc
popf
push
pop
scas
test
shl
lea
pusha
scas
cmp
pop
ret
(bad)
inc
dec
push
inc
scas
or
pop
ret
add
gs
jae
pop
push
dec
scas
jmp
mov
sbb
pop
pop
ret
jne
jne
or
pop
pop
ret
and
push
adc
test
adc
mul
sub
jne
fstp
pop
ret
cmc
dec
jne
int
add
push
sbb
xor
add
test
(bad)
jmp
adc
push
sbb
pop
xor
int3
mov
or
shl
jmp
xor
mov
jle
sbb
shl
mov
cmc
loop
sbb
shl
mov
fucom
inc
or
or
and
sbb
pop
ret
(bad)
adc
cld
pop
shl
out
add
call
pop
push
push
or
adc
mov
xor
add
xor
repnz
(bad)
shl
inc
popf
push
inc
adc
push
adc
in
nop
adc
inc
dec
jns
or
cmc
ds
nop
adc
push
cmc
rcr
inc
add
ror
ret
lods
fcomp
inc
or
adc
push
mov
fwait
cld
stos
test
xor
cld
stos
cwde
inc
xchg
adc
movaps
pop
sahf
dec
js
adc
jl
or
push
test
pushf
cld
stos
test
push
movs
sbb
cld
stos
test
jmp
inc
xchg
imul
add
out
nop
adc
cmps
fld
out
pop
push
lds
sub
dec
push
xor
sti
stos
lods
rcl
jmp
or
or
ret
dec
movs
jmp
adc
or
push
out
pop
sahf
lds
test
dec
inc
mov
gs
sti
push
rcl
not
push
cmp
inc
popf
sbb
cmps
or
ret
add
fcomp
push
adc
aaa
sbb
out
pop
into
shr
adc
out
jl
jmp
push
adc
mov
out
cmp
add
mov
out
jle
jmp
inc
push
cwde
(bad)
mov
add
mov
mov
stos
stos
rcl
push
imul
cmps
or
adc
sbb
adc
rcl
out
pop
pop
ret
pop
adc
out
ja
(bad)
cmp
push
xchg
(bad)
mov
mov
mov
cmp
(bad)
mov
xor
push
inc
push
add
(bad)
mov
cmc
or
jmp
adc
movs
add
push
or
mov
out
ja
dec
push
inc
push
xchg
(bad)
mov
gs
mov
push
rcl
push
sub
fiadd
sbb
jbe
dec
ret
add
mov
adc
cmp
or
pop
into
movs
push
sbb
mul
xchg
dec
mov
mov
in
mov
jmp
add
adc
mov
mov
imul
call
pop
dec
ret
(bad)
sbb
out
outs
sti
inc
add
push
inc
push
(bad)
(bad)
mov
jne
mov
push
rcl
push
imul
mov
mov
imul
out
pop
push
shr
sbb
out
ins
sti
(bad)
mov
(bad)
(bad)
mov
cmc
addr16
cli
mov
push
add
imul
inc
or
sbb
ret
mov
imul
call
pop
sahf
shr
pop
scas
pop
fwait
aam
out
ins
sti
dec
push
push
not
mov
out
data16
call
push
sbb
outs
sti
dec
push
push
mov
test
cmp
pop
mov
mov
xor
push
jmp
mov
hlt
and
cld
cli
pop
call
loope
sbb
mov
movs
aas
mov
fcmovnbe
adc
out
(bad)
loopne
rol
xor
fcom
push
jmp
add
adc
add
int
add
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
or
adc
add
or
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
(bad)
cmc
inc
cmc
dec
cmc
jmp
(bad)
cmc
call
stos
repz
repz
repz
repz
repz
repz
lods
repz
lods
repz
lods
repz
add
lods
repz
test
dec
lods
repz
repz
repz
cmps
repz
fst
add
mov
adc
add
repz
mov
inc
mov
call
mov
jmp
adc
add
test
repz
add
repz
cmps
repz
repz
repz
test
jmp
test
dec
test
jmp
test
inc
test
jmp
test
dec
stos
repz
mov
repz
jmp
repz
mov
repz
mov
jnp
repz
mov
repz
mov
repz
mov
repz
mov
repz
mov
repz
jns
repz
repz
mov
repz
mov
repz
repz
add
mov
repz
movs
repz
movs
repz
movs
repz
repz
repz
shl
add
scas
repz
shl
iret
scas
repz
aam
jmp
repz
lods
repz
jmp
lods
repz
aam
dec
add
lods
repz
repz
jmp
scas
repz
mov
call
mov
(bad)
fild
repz
mov
jmp
mov
call
mov
call
mov
jmp
mov
(bad)
jmp
scas
repz
mov
scas
repz
scas
repz
repz
shl
add
sar
repz
mov
repz
mov
repz
mov
repz
mov
repz
repz
repz
scas
repz
scas
repz
repz
scas
repz
scas
repz
scas
repz
scas
repz
add
scas
repz
lods
repz
fistp
repz
fnstcw
repz
jg
repz
repz
repz
mov
repz
mov
repz
repz
jge
repz
cmp
mov
repz
(bad)
mov
repz
add
mov
repz
mov
repz
mov
repz
repz
repz
mov
repz
aad
jmp
push
add
aam
add
mov
push
add
popf
mov
add
xor
lea
add
cmc
adc
add
and
add
pop
push
add
cmps
mov
repz
mov
add
cmp
repz
mov
repz
cmp
repz
repz
repz
mov
jmp
mov
mov
repz
mov
jmp
mov
repz
mov
push
mov
dec
movs
repz
repz
movs
repz
mov
repz
mov
jmp
repz
mov
repz
add
movs
repz
mov
repz
movs
repz
repz
movs
repz
movs
repz
(bad)
repz
cmps
repz
movs
repz
movs
repz
movs
repz
test
call
repz
adc
add
mov
shl
jmp
mov
repz
repz
mov
mov
add
inc
test
jmp
repz
test
call
test
(bad)
stc
test
dec
adc
add
lahf
repz
sahf
repz
sahf
repz
sahf
repz
repz
add
repz
sahf
repz
mov
repz
adc
add
mov
repz
movs
repz
movs
repz
movs
repz
movs
repz
repz
repz
adc
add
cmp
sub
add
cmp
(bad)
cmp
rcl
jp
cmp
adc
cmp
in
nop
cmp
push
xchg
cmp
dec
xchg
cmp
push
xchg
cmp
cmp
cmp
mov
cmp
cdq
lea
add
xchg
cmp
jns
cmp
jne
cmp
xchg
(bad)
cmp
jge
cmp
imul
cmp
(bad)
cmp
add
(bad)
cmp
jge
cmp
or
adc
add
and
loope
inc
add
aas
add
aas
add
in
add
inc
add
mov
add
adc
add
adc
add
push
inc
add
adc
add
adc
add
adc
add
add
xor
dec
mov
fmul
dec
add
(bad)
sbb
rcl
retf
mov
mov
lea
mov
stos
sbb
mov
mov
stos
fstp
inc
(bad)
push
mov
fmul
pusha
mov
stos
fst
and
add
push
mov
stos
popf
push
push
and
push
jns
fadd
mov
add
xchg
adc
pop
add
call
inc
or
(bad)
adc
mov
and
sahf
clc
sbb
add
add
pop
shr
adc
xor
in
neg
add
mov
jne
pop
rcl
or
idiv
xchg
es
push
pushf
rcl
pusha
(bad)
test
or
mov
daa
cs
jbe
sbb
dec
test
jmp
idiv
adc
pop
rcl
out
dec
add
xchg
or
dec
mov
rcl
add
stos
xor
and
xchg
cld
iret
adc
push
and
inc
dec
addr16
addr16
fidivr
lods
dec
outs
add
add
sbb
push
call
test
addr16
add
rcl
dec
shl
mov
push
add
and
adc
into
idiv
shl
rcl
loopne
test
pop
add
add
adc
shr
enter
fst
cmps
pop
ds
cmps
movs
or
adc
cld
dec
aaa
or
addr16
lods
mov
cld
sti
dec
pop
or
add
sbb
rcl
sub
idiv
cmp
add
dec
je
les
ss
in
push
and
cli
ins
dec
xchg
add
add
lea
add
pop
adc
inc
mov
rcl
movs
ins
add
call
add
adc
mov
add
xor
add
(bad)
add
pop
inc
add
ss
sub
add
jno
imul
ja
ins
cli
jbe
add
jbe
popa
cmp
and
jno
imul
arpl
hlt
ja
add
add
stos
in
call
inc
add
das
xor
xor
shl
inc
add
pop
pop
and
pop
imul
xor
add
jecxz
dec
jecxz
jmp
or
add
pop
add
fst
add
int
add
int
add
fst
add
add
int
add
popf
adc
add
pop
loopne
adc
add
adc
add
or
add
pop
adc
add
add
or
or
adc
adc
std
push
sbb
sbb
add
and
sub
sub
xor
xor
add
xor
sbb
cmp
cmp
and
inc
or
inc
inc
adc
dec
add
dec
dec
sbb
push
cld
dec
push
push
add
pop
pop
or
pusha
in
js
fs
push
push
cmp
jo
data16
and
js
outs
jnp
test
outs
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
sbb
add
sbb
add
add
sbb
add
and
jge
and
ins
adc
add
and
jge
and
jge
and
ins
adc
add
and
add
pop
adc
mov
pop
adc
int
adc
int
adc
mov
pop
adc
and
je
adc
je
adc
je
adc
je
loope
je
add
dec
pop
adc
cmp
pop
adc
dec
pop
add
int3
pop
add
sbb
add
sbb
add
or
add
or
add
sbb
add
sbb
add
or
add
or
add
fcom
add
fcom
adc
mov
push
adc
int
add
pop
add
pop
add
pop
add
add
lahf
push
add
lahf
push
add
(bad)
push
add
(bad)
push
add
lahf
push
add
lahf
push
add
(bad)
push
add
(bad)
push
add
pop
push
add
pop
push
adc
cmp
push
and
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
add
adc
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
add
dec
adc
add
sbb
adc
add
or
adc
add
or
adc
add
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
adc
add
adc
add
adc
add
adc
add
and
ins
adc
add
and
jge
and
jge
and
ins
adc
add
and
add
mov
adc
add
adc
add
adc
add
adc
add
adc
add
adc
adc
adc
adc
adc
add
adc
add
adc
fcom
add
int3
adc
add
add
or
add
add
or
add
sbb
add
sbb
add
or
add
or
add
fmul
add
fmul
add
mov
adc
add
adc
add
add
adc
add
lar
(bad)
lar
(bad)
lar
lahf
adc
add
adc
add
adc
add
add
add
cmp
adc
add
adc
add
adc
add
adc
add
adc
add
and
jge
and
ins
adc
add
and
jge
and
jge
and
ins
adc
add
and
mov
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
adc
adc
dec
adc
add
adc
cmp
adc
add
add
pop
adc
add
add
add
add
sbb
add
or
add
or
add
sbb
add
sbb
add
or
add
or
add
add
int
add
fcom
add
int3
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
lar
(bad)
lar
(bad)
lar
dec
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
int
add
xchg
dec
jge
mov
movs
test
mov
mov
cmps
add
lods
pushf
scas
pop
mov
mov
cmp
ret
xchg
aad
(bad)
gs
enter
mov
rol
loopne
fcmovne
fmul
fild
add
mov
out
lock
out
sbb
(bad)
in
adc
mov
add
push
adc
push
and
int3
cld
push
cmp
and
pop
jne
sbb
or
pop
ins
stc
and
jno
adc
sub
push
das
fld
xor
loope
es
aad
cmp
add
test
cmp
icebp
xor
add
imul
dec
jb
and
adc
pop
dec
pop
sub
jae
lds
imul
jb
mov
cmp
outs
jg
xchg
add
dec
mov
mov
mov
cmc
popf
cwde
fwait
mov
mov
cmps
add
test
mov
popa
and
(bad)
aad
ret
xchg
xchg
mov
gs
enter
mov
rol
(bad)
fcmovne
fcmove
fild
repnz
inc
out
call
out
sbb
add
ret
adc
mov
add
dec
mov
mov
mov
cwde
fwait
mov
mov
cmps
add
test
mov
popa
and
jp
mov
xchg
xchg
mov
gs
retf
pop
mov
rcl
and
fcomp
leave
ror
fild
mov
call
out
sbb
out
in
adc
mov
dec
add
push
sbb
or
sbb
adc
inc
int
pop
jne
sbb
or
and
jno
adc
sub
add
push
das
(bad)
xor
loope
es
aad
cmp
test
pop
inc
inc
adc
inc
in
dec
dec
fldenv
std
or
add
pop
pop
dec
push
dec
pop
sub
pop
ss
movs
popa
dec
dec
cdq
gs
jge
push
push
or
outs
jg
cwde
add
add
movs
jl
mov
dec
test
mov
mov
add
sbb
lods
movs
mov
mov
mov
(bad)
fadd
ret
xchg
fdiv
pop
in
iret
jge
rcl
or
fild
add
mov
fsubr
sbb
out
not
in
in
call
inc
add
sub
add
xor
jo
gs
adc
add
ss
add
push
inc
add
aam
add
inc
arpl
aaa
push
outs
in
fs
fist
add
push
adc
add
adc
ficom
xor
fist
xor
dec
sbb
popf
adc
add
arpl
xor
fs
sbb
add
xor
jae
jo
inc
popa
jns
push
add
ins
inc
popa
jns
push
add
jae
sbb
add
add
fiadd
inc
and
inc
arpl
push
jae
scas
adc
pop
adc
add
push
add
adc
adc
add
gs
je
ds
and
data16
pop
icebp
(bad)
inc
pop
aas
push
dec
clc
push
jb
cmp
add
ds
ds
jge
jb
mov
sbb
add
add
pop
jb
push
add
dec
sbb
add
and
inc
jnp
pusha
jo
cmp
arpl
imul
clc
pop
popa
xor
pusha
je
cmp
arpl
inc
pop
popa
add
arpl
test
hlt
inc
push
and
cmp
cld
gs
hlt
cmp
add
pop
gs
arpl
inc
jns
xchg
pop
gs
push
and
cmp
mov
cmp
lods
pusha
jo
mov
popa
je
cmp
outs
lock
pop
pusha
pop
jb
lock
inc
and
data16
push
and
outs
das
inc
popa
je
cmp
sbb
add
mov
xor
and
sub
fs
inc
jo
mov
gs
and
push
dec
dec
lods
xor
push
jb
inc
and
jae
in
gs
sub
pop
jns
cmp
jb
cmp
cmp
imul
cmp
mov
pop
imul
cmp
push
imul
mul
outs
popa
push
and
jns
arpl
cmp
jo
xor
popa
je
cmp
jge
fs
and
fs
aas
imul
and
and
fs
loope
pop
mov
ins
stc
ds
lods
ss
and
add
dec
push
cmp
daa
das
cs
jb
add
jge
outs
mov
lock
jb
cmp
popa
cmp
bound
outs
aaa
pop
jae
data16
cmp
jp
and
cmp
push
inc
pop
dec
cmp
pop
sbb
add
mov
sbb
sub
jge
pop
outs
and
push
arpl
cmc
push
outs
out
hlt
pop
outs
out
xor
lods
cmp
pop
popa
and
pop
outs
cwde
sbb
add
xor
ins
sbb
sub
xor
jo
jge
pop
and
cmp
mov
pop
imul
add
ins
jp
push
and
popa
outs
cmp
cli
or
jae
je
push
imul
hlt
pusha
and
add
gs
and
and
fs
mov
cs
je
cmp
enter
(bad)
xor
popf
sbb
sub
mov
cmp
and
popa
ins
hlt
imul
dec
and
xor
or
mov
cmp
imul
lock
jl
std
or
add
jg
xor
repnz
sub
sub
xor
arpl
xor
push
outs
pop
repz
outs
and
pop
and
cmp
je
das
pop
imul
cmp
add
(bad)
xor
mov
cmp
je
xor
and
push
arpl
repnz
outs
add
das
lock
xor
pop
and
imul
imul
and
xor
(bad)
sub
jo
imul
push
jne
das
imul
pop
or
iret
and
xor
or
jge
pop
outs
and
popa
arpl
add
icebp
dec
outs
sti
data16
loope
pusha
je
imul
stc
data16
or
and
xor
sub
das
cmp
and
cmp
outs
lods
gs
and
cmp
and
gs
or
add
jg
xor
and
push
pop
gs
push
arpl
add
push
and
popa
jo
gs
cmp
or
and
xor
or
pop
gs
push
and
push
pop
je
push
push
and
cmp
imul
std
or
and
xor
or
ins
xor
and
and
add
clc
arpl
xor
popa
je
or
inc
push
sub
cmp
cmp
push
inc
imul
ins
fs
outs
xor
pop
gs
pop
and
xor
popa
je
clc
push
and
cmp
jne
fs
add
cld
cmp
ja
pusha
push
or
cmp
push
xor
arpl
cmp
and
and
push
imul
cmp
cmp
clc
push
outs
pop
clc
pop
outs
pop
xor
pop
jb
cmp
cmp
or
iret
adc
xor
sub
add
ins
xor
push
arpl
not
das
jb
sti
sub
loope
or
call
xor
mov
or
lods
xor
and
and
push
push
outs
pop
clc
pusha
jb
push
pop
gs
fs
addr16
add
jg
xor
pop
sbb
sub
jl
imul
outs
je
and
push
jo
jp
and
and
cmp
inc
(bad)
std
or
arpl
fs
xor
inc
imul
push
sub
ins
push
outs
icebp
cs
gs
ss
int
add
cmps
or
add
gs
repnz
jge
popa
ins
add
xor
outs
cmp
cmp
add
(bad)
push
pop
je
cmp
nop
data16
lahf
cmc
or
lea
outs
xor
add
outs
sbb
cs
inc
add
sbb
add
adc
add
adc
add
add
adc
add
adc
add
adc
inc
add
adc
add
add
adc
add
rcl
rcl
add
popf
adc
add
adc
rcl
add
adc
add
xchg
adc
add
sbb
shl
add
add
fistp
add
push
adc
add
add
ficomp
add
push
adc
add
add
int
add
and
adc
add
add
add
sbb
sbb
rcl
add
dec
sbb
rcl
add
int
add
fst
add
fst
lock
adc
add
adc
call
adc
jg
adc
add
adc
add
adc
add
adc
inc
add
sar
sar
adc
add
add
pop
jmp
mov
lea
xchg
add
out
ret
xchg
and
xor
cs
pop
add
adc
add
adc
add
sub
int
add
in
popaw
outs
popf
adc
add
add
dec
jo
fst
add
in
xor
add
cmp
imul
xor
push
xor
add
mov
jo
popf
xor
and
sbb
sbb
add
add
inc
xor
ins
jns
add
adc
add
or
adc
push
sbb
push
xor
add
add
xor
or
sbb
cmp
jmp
xor
add
idiv
int
pop
or
adc
add
xor
lea
js
dec
js
mov
adc
or
mov
add
movs
add
ins
mov
adc
add
icebp
cmp
cwde
std
pop
add
jno
pop
jns
dec
jns
pop
std
push
fs
js
or
std
(bad)
(bad)
fdivr
(bad)
call
xor
push
jb
adc
add
xor
gs
adc
add
cmp
xor
jo
lock
bound
adc
add
gs
jne
add
xlat
gs
jns
adc
add
pop
add
lea
add
dec
push
add
cwde
xor
mov
add
xchg
sub
jb
pop
sbb
add
data16
popa
sub
data16
add
jo
fcomp
(bad)
pop
pop
add
pop
pop
add
xor
sbb
jb
sbb
jb
adc
pop
add
xor
add
xor
int
add
adc
fs
dec
add
add
jb
xor
lea
add
push
sub
push
popa
and
add
inc
pop
push
jae
xor
cwde
pop
pop
lods
dec
add
jle
pop
fs
add
mov
add
pop
add
pop
push
add
pop
add
pop
add
add
xor
ins
adc
add
adc
fst
add
adc
push
jb
ss
jae
pop
jb
lock
fs
sub
lock
outs
xor
add
out
push
dec
sar
xor
lea
add
jge
pop
ins
sub
lock
xor
jge
pop
arpl
add
add
ins
push
pop
popa
outs
arpl
dec
xor
pop
xor
sub
imul
daa
or
push
popa
jae
test
gs
int3
arpl
and
(bad)
(bad)
jge
popa
jae
cmc
inc
ins
lods
fs
adc
jae
out
pop
jo
cli
arpl
popa
loope
daa
add
div
gs
imul
jb
adc
pop
arpl
and
xor
arpl
xor
jge
gs
lahf
sub
add
das
push
fs
push
jb
outs
push
jo
cmp
popa
jb
outs
pop
pop
jb
pop
fs
ss
das
lock
jmp
pop
jb
xor
popa
jae
add
dec
and
push
jae
out
popa
arpl
and
xor
loope
jb
popf
adc
add
pop
push
arpl
pop
jb
out
push
jo
jge
pop
outs
cs
cs
jb
push
fs
xor
repz
jmp
pop
imul
pop
and
jae
pop
arpl
mov
data16
and
or
xor
outs
cmp
imul
pop
popa
ins
xor
push
jb
xor
jge
(bad)
jmp
xor
and
xor
lods
cs
jo
repz
pop
fs
cs
pop
repz
je
pop
pop
add
xor
cmp
arpl
pusha
jns
mov
pop
arpl
fs
jb
fs
jb
adc
add
popa
outs
jl
push
fs
pop
jb
jno
jae
das
arpl
and
xor
popa
and
daa
fst
add
mov
xor
ins
bound
icebp
pop
jb
(bad)
pop
pop
jae
add
pusha
gs
pop
jb
add
push
jb
inc
pop
jb
adc
add
bound
push
pop
cmp
xor
xor
dec
and
pop
push
daa
dec
adc
add
push
pop
gs
and
push
je
lock
gs
repz
jmp
pop
outs
je
bound
pop
jae
add
xor
(bad)
jmp
push
ins
xor
pop
sbb
add
jge
push
ja
out
(bad)
jmp
pop
and
inc
popa
(bad)
stc
push
and
pop
jae
das
inc
arpl
and
pop
jae
pop
push
pop
add
pop
and
fs
bound
push
pop
add
adc
add
inc
push
je
add
pop
pop
imul
pop
jo
lock
pop
fs
xor
icebp
bound
gs
hlt
(bad)
jmp
push
arpl
and
xor
ins
das
pop
outs
push
inc
jb
inc
mov
xor
repz
(bad)
std
push
push
je
pop
and
lock
fs
xor
lock
je
bound
add
xor
and
dec
jae
outs
inc
arpl
and
xor
jb
sbb
bound
and
ins
sub
dec
popa
arpl
dec
push
outs
and
pop
popa
sbb
popa
push
arpl
dec
jb
add
and
popa
jae
mul
jmp
fs
ss
fcomip
push
je
inc
pop
add
popa
push
arpl
dec
jb
icebp
xor
je
inc
arpl
and
xor
jb
pop
pop
add
mov
dec
jb
scas
dec
pop
jae
inc
arpl
jb
je
push
jb
inc
pop
jb
pop
add
add
jge
arpl
cmp
jno
pop
xor
addr16
push
jae
inc
arpl
dec
jb
fst
add
mov
inc
pop
je
aaa
pop
outs
out
bound
(bad)
bound
lods
xor
jb
ret
add
pusha
push
arpl
dec
jb
icebp
xor
dec
pop
addr16
push
jae
inc
arpl
dec
jb
add
pop
push
add
mov
push
and
fs
xor
sldt
ins
inc
fs
dec
push
daa
sbb
dec
pop
arpl
jae
aaa
imul
inc
push
daa
or
bound
ror
fst
arpl
dec
pop
add
pop
bound
pop
gs
add
add
in
pop
push
je
xor
adc
add
or
add
sbb
add
sub
add
add
mov
add
js
add
jbe
add
ja
add
cdq
pop
add
xor
add
mov
add
imul
add
add
jmp
add
jmp
add
leave
sbb
add
add
jo
add
add
jp
add
clc
push
sub
xchg
add
js
add
jbe
add
fcom
add
jmp
jb
adc
add
add
mov
sbb
add
push
add
jge
push
ins
xor
push
add
push
ja
adc
add
in
addr16
xor
outs
in
jno
add
jle
(bad)
dec
stos
sub
pop
xor
das
mul
jns
add
push
push
popa
cs
add
retf
push
leave
(bad)
(bad)
dec
xor
mov
pusha
ins
sbb
add
mul
int
add
or
arpl
pop
add
xor
push
cld
push
sub
add
and
add
and
add
sub
add
sub
add
sub
add
and
add
xchg
cmp
sar
cmp
test
cmp
cmp
cmp
inc
cmp
jge
cmp
jne
cmp
pop
xchg
cmp
add
cmp
int
cmp
fldenv
cmp
aad
cmp
add
shl
cmp
mov
and
add
cmp
lds
cmp
icebp
sbb
add
cmp
popa
and
add
and
add
and
add
and
add
and
add
and
add
and
add
das
cmp
imul
and
add
cmp
in
and
add
and
add
and
add
and
add
and
add
cmp
inc
and
add
cmp
dec
and
add
cmp
in
cmp
frstor
add
and
cmp
int
cmp
fldenv
add
and
add
and
add
and
add
and
add
add
and
add
and
add
cmp
std
cmp
cmp
mov
cmp
lds
cmp
lds
cmp
and
cmp
sub
cmp
cmp
cmp
cmp
sar
cmp
xchg
cmp
cmp
in
cmp
add
cmp
cmp
cdq
cmp
add
add
cmp
popa
inc
cmp
inc
inc
cmp
and
cmp
(bad)
sti
arpl
std
bound
loope
imul
in
pusha
je
sti
pop
add
std
jno
jg
push
arpl
pop
data16
pop
popa
popa
stc
pop
outs
pop
adc
add
arpl
arpl
in
push
jo
call
arpl
add
in
jbe
inc
imul
std
jb
lods
repnz
inc
jmp
push
sahf
movs
sbb
fstp
add
stc
push
js
lock
je
in
(bad)
jmp
add
pop
add
xor
dec
jmp
push
js
adc
add
pop
add
mov
in
(bad)
inc
add
adc
add
pop
add
jae
popa
jae
pop
add
cs
je
pop
add
sub
pusha
outs
pop
adc
add
lock
push
scas
stc
jb
int
add
out
neg
fst
add
rcl
jbe
popf
push
add
rcr
inc
rcr
test
adc
add
add
jbe
or
mov
add
push
daa
xor
push
mov
add
and
adc
add
pop
push
and
outs
jo
out
or
push
add
add
loop
dec
cmp
inc
jne
inc
push
fs
fs
das
call
and
add
pop
neg
add
add
cmp
out
push
jo
sbb
js
loopne
dec
jne
push
gs
rep
dec
out
loope
outs
and
arpl
mov
dec
dec
pop
add
pop
mov
dec
mov
mov
dec
xchg
adc
add
dec
pushf
pop
add
sahf
push
ds
or
in
inc
das
repnz
je
mov
push
cld
(bad)
jmp
test
fst
push
rol
pop
and
push
dec
sbb
xor
push
or
xor
imul
loope
jb
pop
pop
je
jecxz
popa
(bad)
icebp
daa
dec
add
popa
inc
pop
clc
data16
loop
and
out
push
(bad)
mov
sub
add
sub
add
out
sub
mov
sub
jnp
inc
add
add
inc
add
inc
add
sub
add
(bad)
aas
add
(bad)
aas
add
sub
pop
sub
adc
inc
add
sub
sahf
sub
data16
jae
inc
add
sub
sub
sub
add
push
sub
push
cmps
xor
push
(bad)
aas
add
(bad)
aas
add
inc
add
inc
add
sub
inc
add
inc
add
inc
add
inc
add
inc
add
sub
inc
add
sub
add
sub
add
adc
add
adc
add
add
adc
inc
aam
add
int
add
lea
add
fst
add
adc
add
adc
add
adc
inc
cld
add
sar
fadd
adc
lods
idiv
adc
push
adc
adc
mov
adc
add
adc
add
add
imul
add
pop
adc
adc
add
add
adc
push
adc
adc
add
adc
xor
add
xor
imul
and
popa
add
adc
add
adc
cli
adc
ficom
push
add
adc
popf
adc
add
adc
icebp
adc
sbb
add
das
adc
xor
imul
add
adc
pop
adc
add
adc
sahf
adc
adc
xchg
adc
jns
push
add
add
adc
add
adc
je
pop
add
add
and
jae
rcl
imul
or
adc
adc
imul
mov
jae
movups
add
repnz
ficom
fs
adc
popf
adc
add
adc
stc
adc
add
imul
popf
adc
add
jae
push
adc
scas
sbb
sbb
sbb
mov
add
push
sbb
pop
sbb
dec
sbb
add
sbb
sbb
push
sbb
add
sbb
sbb
cmp
arpl
xor
jae
sbb
das
sbb
add
push
add
pop
imul
hlt
pop
jae
mov
pop
imul
add
cmp
add
sbb
cmp
add
sbb
sbb
sbb
mov
jb
dec
pop
add
add
scas
sbb
outs
sbb
lahf
sbb
ins
sbb
jno
add
sbb
imul
sbb
je
data16
jae
sbb
pop
imul
sbb
jae
cs
pop
add
push
imul
stc
push
popa
add
push
add
jecxz
imul
rcl
imul
jo
sbb
popa
add
add
pop
sbb
add
sbb
mov
imul
mov
sbb
jno
add
sbb
sbb
jo
jb
test
popa
add
add
pop
sbb
dec
sbb
add
adc
add
cmp
popa
add
adc
fst
add
fist
imul
cmps
adc
imul
popf
adc
jb
fist
add
push
sbb
sbb
sbb
mov
imul
addr16
jo
outs
sbb
jno
add
add
adc
pop
sbb
and
imul
cs
pop
add
adc
fs
adc
add
imul
adc
addr16
adc
add
adc
add
adc
add
adc
add
adc
add
sbb
and
popa
add
sbb
add
sbb
sbb
mov
sbb
sbb
pop
adc
add
pop
add
add
adc
add
adc
add
adc
add
pop
add
adc
add
adc
and
add
adc
add
adc
add
adc
add
adc
out
adc
add
lock
adc
add
adc
add
adc
adc
pop
adc
cmp
inc
add
sbb
xor
pop
add
sbb
cdq
sbb
mov
sbb
sbb
imul
add
push
add
pop
add
sbb
add
sbb
sub
pop
add
add
adc
sbb
adc
adc
mov
adc
mov
add
mov
adc
add
adc
cmp
push
add
adc
sti
adc
add
adc
push
sbb
xor
push
add
sbb
cmp
pop
add
sbb
sbb
lahf
sbb
add
add
sbb
sbb
xchg
sbb
add
sbb
add
sbb
adc
add
add
adc
add
adc
adc
call
xor
add
adc
mov
adc
add
adc
icebp
adc
or
cmp
adc
das
sbb
sbb
xor
add
inc
add
sbb
mov
pop
add
sbb
jo
jb
outs
sbb
jnp
add
adc
test
pop
add
dec
add
adc
adc
adc
adc
add
adc
add
adc
add
adc
call
xor
add
adc
fist
pop
add
adc
add
add
adc
hlt
adc
icebp
adc
xor
jae
dec
sbb
and
jb
pop
sbb
retf
adc
adc
lahf
adc
mov
pop
add
dec
add
adc
pop
adc
adc
add
add
push
adc
push
sbb
sub
popa
add
add
pop
add
sbb
add
sbb
add
pop
push
add
sbb
add
pop
imul
loopne
popa
add
pop
bound
or
js
popf
pop
add
and
pop
add
pop
popa
add
adc
popf
pop
add
sbb
adc
add
leave
adc
adc
adc
add
add
add
bound
imul
sbb
pop
imul
and
popa
add
pop
add
ret
add
pop
xor
pop
adc
push
pop
pop
add
pop
add
pop
jns
out
push
fs
push
pop
add
add
push
add
sub
push
push
add
pop
arpl
and
add
push
adc
cmp
xor
pop
adc
dec
adc
scas
adc
lahf
adc
lods
adc
mov
add
jle
popa
add
add
add
push
add
xchg
adc
jnp
xor
fist
imul
rcl
xor
data16
push
add
retf
add
adc
add
push
push
aas
add
push
inc
add
push
inc
add
adc
cmp
add
adc
pop
add
add
add
inc
add
add
adc
mov
adc
cmp
add
add
jo
mov
add
push
add
adc
pop
adc
pop
add
adc
aas
add
adc
add
adc
xor
add
pop
add
adc
add
adc
add
adc
inc
add
adc
push
add
add
adc
das
adc
ins
adc
xor
add
adc
add
adc
add
mov
gs
in
outs
jb
fs
fild
jnp
add
push
adc
push
adc
add
pop
add
adc
add
cmc
jno
xor
pop
and
cli
arpl
(bad)
std
jb
lods
call
add
mov
add
push
adc
add
adc
add
adc
int
add
fst
add
adc
adc
add
adc
sub
imul
and
add
adc
scas
adc
mov
adc
cwde
adc
adc
add
add
adc
and
mov
imul
add
sub
adc
adc
adc
adc
aad
pop
add
adc
push
adc
sbb
xor
call
dec
add
adc
add
adc
add
adc
or
xor
out
adc
std
adc
and
jae
and
arpl
cmp
pop
add
push
add
adc
mov
add
icebp
outs
das
sahf
cmc
arpl
stos
push
je
sti
pop
ins
jp
push
add
bound
sub
push
jp
bound
cmc
(bad)
jmp
gs
cmp
push
and
rep
das
push
mul
adc
popa
and
jno
int
add
pusha
shr
sahf
mov
xor
retf
or
add
imul
jg
inc
cmc
fmul
dec
stos
xchg
push
icebp
xchg
mov
jge
adc
pop
mov
loope
mov
xor
les
(bad)
nop
loop
(bad)
(bad)
idiv
icebp
mov
nop
add
lahf
push
sahf
push
push
cli
jae
push
into
bnd
mov
repnz
int3
cli
mov
fild
enter
mov
cmp
fldenv
adc
add
das
push
pop
mov
mov
pop
fst
adc
cmp
push
push
ret
fadd
push
stos
pop
jnp
lea
es
(bad)
fdiv
adc
rcl
scas
mov
int3
(bad)
sub
aam
out
xor
mov
cmp
test
out
ds
cmp
or
fdiv
fnstcw
jo
sub
cld
jmp
into
push
mov
or
fcomp
inc
mul
lods
adc
dec
jle
lea
mov
stc
push
je
outs
add
add
retf
iret
xchg
add
ja
xchg
or
and
pop
cmp
iret
fild
pushf
add
inc
push
xchg
icebp
push
mov
pop
xchg
in
mov
adc
pop
xor
add
mov
mov
out
dec
scas
inc
lea
popf
movs
sbb
sbb
add
lods
add
lea
stos
or
jecxz
cwde
xor
mov
ss
jbe
cmp
add
pop
sti
xor
xchg
pop
xchg
sar
push
mov
and
add
add
mov
inc
adc
ja
add
sub
add
or
jns
scas
mov
xor
jge
aad
clc
fwait
or
jbe
or
mov
nop
jl
mov
aas
sbb
imul
and
mov
push
int
lock
mov
shl
(bad)
jl
inc
fdecstp
mov
int
push
mov
das
dec
ret
lods
mov
add
add
adc
inc
or
jecxz
loop
(bad)
neg
icebp
fsubp
popa
fimul
cwde
int3
mov
push
cmp
jne
test
mov
bound
sbb
stos
jbe
rol
pop
fcomp
aaa
test
(bad)
scas
push
out
jecxz
std
and
add
mov
clc
xchg
mov
xor
sbb
(bad)
les
pop
cmp
cdq
inc
lods
out
imul
pop
adc
add
imul
int
xor
rcl
loopne
addr16
xor
mov
sbb
test
push
mov
out
cwde
adc
jg
push
and
add
sahf
cli
sub
mov
ins
ret
lods
or
cs
enter
clc
xlat
pop
imul
div
pop
les
add
mov
ret
adc
cmp
and
pop
lea
add
ror
adc
lea
loop
sti
int3
ss
xor
add
sahf
popa
mov
mov
add
adc
adc
(bad)
dec
sub
mov
je
(bad)
data16
enter
sbb
jno
mov
sbb
jnp
mov
outs
cmp
fs
push
es
mov
inc
mov
inc
or
adc
add
mov
dec
out
cli
mov
ret
clc
sub
std
retf
inc
gs
cmc
jp
cwde
test
retf
mov
repz
pop
sub
pop
cmp
add
js
and
dec
fnstcw
mov
outs
jecxz
push
jecxz
mov
inc
inc
xor
jbe
mov
fisubr
adc
push
mov
mov
jle
in
xchg
and
add
movs
mov
add
je
mov
stos
mov
adc
mov
cli
add
int3
jb
das
fdivr
pop
dec
push
(bad)
mov
pop
xchg
mov
ficom
cmps
adc
popa
scas
mov
mov
test
add
ins
cmp
add
add
mov
xchg
cmps
in
test
add
fst
add
or
mov
inc
sbb
mov
std
adc
ds
xchg
and
adc
jnp
and
and
ud1
xor
adc
xor
rol
add
repz
inc
add
add
jl
loope
xchg
repnz
lahf
or
sbb
ins
sar
bswap
int3
fidiv
imul
or
fwait
dec
push
pop
pusha
inc
push
mov
(bad)
sub
mov
sub
cmp
ins
fidiv
adc
add
call
inc
pusha
jle
nop
jo
pop
ret
cmp
sub
jno
call
xchg
cdq
movs
in
js
jle
push
xchg
call
pop
outs
jl
cld
fdivr
ret
add
scas
adc
data16
mov
cmp
out
inc
call
xchg
inc
pop
jo
ret
dec
pushf
adc
xchg
test
add
xlat
cmp
lock
cli
add
int3
mov
inc
je
fisub
push
(bad)
lea
add
cmp
inc
js
sbb
mov
lahf
ins
mov
cld
xor
cwde
xor
push
ror
push
mov
and
mov
jns
jle
div
inc
inc
add
mov
jmp
cdq
mov
add
pop
push
int
or
mov
xlat
or
ins
cwde
push
in
loopne
push
call
leave
push
adc
and
add
add
addr16
call
and
xor
adc
leave
adc
call
(bad)
xchg
mov
sbb
mov
ss
jbe
sbb
xchg
ss
dec
repz
out
cmc
loop
jae
popf
jmp
mov
push
sti
pushf
dec
jmp
xor
lds
jns
jae
repz
push
std
inc
dec
or
add
jne
nop
sbb
(bad)
(bad)
xchg
clc
jle
cmp
bound
xor
(bad)
xchg
repnz
lods
imul
xchg
aam
jo
in
jnp
add
or
gs
jle
xchg
gs
add
cmp
arpl
push
test
adc
add
pop
aas
or
jmp
cdq
xchg
sti
cwde
cs
(bad)
ss
lods
xchg
mov
add
and
or
aas
loop
adc
neg
daa
mov
ror
in
mov
push
sbb
dec
(bad)
idiv
dec
adc
add
add
arpl
inc
jl
sub
dec
in
sbb
out
add
jp
mov
xchg
inc
xlat
push
jg
jl
and
js
cld
aaa
push
sub
and
or
mov
push
inc
xor
push
(bad)
dec
ficom
int
add
add
inc
or
out
add
sbb
pop
mov
cmc
es
mov
add
xor
mov
cdq
xchg
mov
inc
dec
nop
(bad)
jo
pop
fsub
les
xchg
mov
pop
(bad)
cs
out
ins
icebp
xchg
pop
(bad)
lods
inc
add
popf
mov
add
in
adc
add
cmps
shl
std
js
xor
push
sub
cmp
ins
(bad)
test
repnz
scas
cld
mov
push
jb
test
out
mov
sub
jb
sahf
psubb
pop
mov
pop
adc
add
mov
add
jg
add
jb
or
mov
or
sub
sub
ds
dec
xlat
cmp
add
xor
push
fmul
or
inc
sbb
add
cmp
iret
lods
lods
nop
cmps
and
sub
pop
jns
or
lds
fisubr
add
jne
(bad)
cmp
add
add
ins
(bad)
out
rol
push
loopne
dec
mov
pop
push
sbb
shr
repnz
cwde
dec
fwait
xor
(bad)
jno
xor
pop
aaa
pusha
mov
mov
cli
cmp
or
leave
cld
or
lock
ret
mul
aaa
cmp
shr
stc
pop
sbb
pop
adc
ins
pushf
xchg
add
jmp
ins
push
fs
jae
or
imul
aad
push
xor
retf
mov
imul
adc
mov
mov
inc
gs
sbb
pop
add
mov
stos
push
pushw
pop
sbb
fwait
adc
sbb
dec
jae
mov
add
xchg
retf
frstor
arpl
pop
arpl
xchg
mov
adc
in
push
adc
aas
add
ins
adc
pop
cmp
sbb
mov
cli
mov
sti
push
pop
and
push
jb
xchg
cmp
jo
sub
aas
aas
push
pop
retf
push
lahf
xchg
fwait
mov
cwde
pop
std
ins
xor
inc
dec
cld
mov
out
inc
push
push
ror
mov
retf
mov
adc
aam
dec
push
jnp
fst
or
retf
pop
lods
rcr
cmp
adc
cwde
jle
aad
retf
pop
push
stos
fs
dec
push
imul
psrlw
mov
fld
aaa
pop
out
ja
add
sbb
pop
cs
rdmsr
fbstp
dec
out
ror
jb
xor
fs
ja
movs
xchg
or
cs
push
(bad)
dec
out
sbb
and
ret
fist
cli
jmp
and
ja
ds
scas
xor
mov
enter
cmp
add
gs
push
lea
mov
ins
sub
xchg
es
imul
repz
xor
add
dec
mov
xchg
(bad)
push
sub
stc
jb
and
scas
jno
ficomp
sub
add
inc
push
and
xchg
xchg
rdrand
add
add
rcr
dec
xchg
in
call
add
dec
dec
leave
pop
test
mov
stos
test
lock
add
and
scas
mov
call
hlt
dec
push
inc
add
out
dec
pop
mov
test
lods
shr
dec
push
inc
inc
int3
imul
jb
sahf
jo
add
pop
xchg
addr16
adc
jbe
shl
dec
or
cmp
outs
inc
jle
out
pop
adc
mov
xchg
jle
add
or
das
jp
call
(bad)
ins
sbb
inc
push
add
lods
retf
pop
out
iret
add
out
jnp
(bad)
(bad)
mov
mov
adc
cld
test
fimul
ret
fisubr
or
and
dec
lahf
mov
nop
mov
sub
cmp
int
fdivr
dec
ins
push
retf
mov
test
addr16
push
scas
inc
(bad)
xchg
mov
push
or
adc
mov
sub
dec
and
outs
add
push
stos
aam
aaa
jle
mov
push
repz
jle
mul
call
xor
xchg
test
sbb
hlt
adc
out
dec
ins
scas
dec
fsub
mov
sbb
push
and
add
jl
xchg
add
mov
inc
rcl
(bad)
sbb
or
adc
movs
test
shl
mov
jmp
ja
add
retf
and
retf
(bad)
jl
cmp
inc
adc
mov
fwait
xabort
loop
lods
jne
jno
sar
and
xchg
arpl
pop
xor
(bad)
sub
fnstsw
scas
cmp
mov
xor
movs
xchg
or
shr
dec
sbb
pop
mov
dec
xor
je
js
ret
fldenv
mov
add
lds
ror
pop
or
hlt
fmul
mov
pop
scas
das
jb
movs
test
test
jmp
xor
pop
jge
mov
stos
dec
sbb
push
pop
add
dec
pop
add
in
cmps
out
adc
pop
cmps
(bad)
(bad)
fistp
jbe
sbb
adc
pushf
mov
into
inc
cmp
(bad)
test
movs
lds
int
add
cmps
test
cmp
call
add
pop
retw
(bad)
and
sub
arpl
xchg
xchg
bound
div
stos
push
in
(bad)
adc
(bad)
mov
(bad)
jmp
rcl
je
push
mov
add
(bad)
jge
lds
les
ret
cmp
xchg
or
retf
repnz
cmc
movs
nop
cmp
out
mov
call
(bad)
int
xor
je
fdiv
dec
fcmovnbe
mov
in
pop
and
arpl
nop
sbb
jmp
outs
loop
mov
jecxz
fadd
loop
add
rcl
(bad)
loope
int3
adc
cli
in
pop
xor
rcl
(bad)
sbb
jbe
rcr
(bad)
add
fmul
pop
inc
stos
pusha
and
call
ja
es
sub
pop
xchg
xchg
dec
push
movs
fs
xor
lock
retf
jle
ret
push
pusha
in
inc
inc
jno
sbb
stos
shl
pop
cmp
stos
es
mov
and
and
(bad)
gs
add
mov
cmp
dec
sbb
and
int3
add
xchg
inc
pop
mov
out
(bad)
div
pop
vmovshdup
jle
push
ss
fnstenv
movs
pop
ret
fild
or
pusha
jns
rcr
and
sahf
jp
scas
mov
xchg
int
inc
xchg
mov
aaa
xchg
(bad)
pop
fsub
imul
imul
aas
pop
nop
test
jb
leave
aas
imul
rol
inc
inc
xor
loope
add
test
out
mov
add
sub
cdq
mov
mov
cmp
or
mov
mov
ss
fsubrp
(bad)
loope
push
arpl
xchg
push
mov
out
cli
mov
mov
push
retf
fcmovb
mov
aam
icebp
loop
ret
mov
mov
loop
cmp
int3
loopne
movs
mov
loop
xchg
xchg
pop
push
xor
dec
xor
repnz
ror
(bad)
push
pop
cmp
or
pop
mov
xor
out
push
dec
sbb
or
xlat
push
and
push
sbb
mov
xor
lahf
sbb
aad
mov
cmps
dec
mov
std
test
xlat
in
lods
(bad)
ja
add
mov
loop
hlt
jp
clc
dec
aad
mov
push
rcl
sbb
pop
or
mov
ja
and
(bad)
in
inc
dec
ret
sub
sahf
adc
add
cmp
jno
adc
das
jl
nop
cmp
fdivr
mov
aad
movs
add
push
mov
and
add
in
in
ret
mov
pop
adc
add
xor
bound
cmp
inc
jp
jns
je
push
cmp
xor
pop
pop
push
dec
sub
imul
adc
idiv
into
adc
call
adc
jmp
adc
add
adc
add
adc
call
adc
add
add
adc
add
push
add
adc
push
adc
add
add
pop
sbb
add
sbb
add
adc
dec
sbb
add
adc
cmp
adc
dec
sbb
add
adc
sbb
add
sbb
add
sbb
add
add
add
add
add
pop
dec
add
add
sbb
add
pop
add
into
pop
hlt
jmp
pop
idiv
les
std
(bad)
mov
pop
xor
fcom
popa
add
rol
sbb
add
dec
mov
pop
mov
das
pop
xlat
add
pop
add
cmp
pop
adc
dec
pop
adc
dec
pop
adc
ds
adc
inc
pop
add
add
push
pop
add
add
pop
add
sbb
je
sbb
ja
sbb
push
pop
sbb
or
or
fcom
or
add
xor
rcr
icebp
fstp
add
pop
xor
gs
xor
mov
pop
xor
gs
xor
pop
pop
xor
and
cmp
popf
push
add
add
jbe
aaa
(bad)
in
add
out
or
fiadd
jmp
das
out
(bad)
mov
sar
pop
loopne
mov
cmps
or
mov
adc
out
jns
nop
inc
movs
sbb
aad
mov
test
mov
ins
cld
loop
hlt
xchg
icebp
rol
popf
shr
add
out
pusha
std
mov
cmp
adc
or
(bad)
out
pop
std
stc
mov
jne
cmp
addr16
mov
pop
aad
add
add
movs
cli
dec
sub
sti
shl
int
xor
add
mov
dec
fdiv
and
iret
inc
fisubr
fadd
xlat
add
push
sbb
push
lea
(bad)
enter
mov
jle
mov
inc
add
mov
(bad)
pop
pop
mov
or
int3
sub
ss
ror
push
mov
push
shl
fld
jmp
or
out
in
scas
jno
lods
movs
push
lock
lods
lahf
pop
enter
add
icebp
test
rol
inc
mov
loopne
add
pop
or
fs
xchg
or
popa
out
dec
imul
sub
fist
(bad)
dec
(bad)
hlt
imul
inc
mov
add
mov
fwait
mov
pop
xor
ficom
add
lock
retf
jns
dec
fisttp
cmp
sbb
pushf
mov
into
cmp
es
shl
push
xor
mov
push
fisubr
and
inc
lock
xor
outs
sti
fcomp
repz
out
add
std
add
mov
sub
and
add
(bad)
push
mov
retf
out
int3
pop
cmc
(bad)
sub
mov
mov
sbb
movs
cs
stos
mov
jg
sar
in
jecxz
lods
call
scas
je
pop
ret
jmp
fild
or
jae
and
shr
push
xchg
sub
push
jecxz
add
xchg
pop
xchg
xor
jl
mov
out
dec
mov
xchg
(bad)
hlt
push
cmps
jnp
sbb
sbb
sbb
repz
(bad)
jge
ror
pop
pop
retf
addr16
mov
je
lods
mov
push
movs
pop
add
(bad)
sub
into
cmp
out
dec
add
sub
mov
cmps
or
movs
aas
xchg
sub
xlat
cdq
(bad)
scas
jecxz
add
ins
outs
cli
inc
fsubp
push
fild
sbb
addr16
mov
push
mov
arpl
pop
push
push
ins
add
ficomp
mov
fidivr
cmc
push
pop
xor
mov
dec
stos
sub
add
jle
pop
inc
xchg
(bad)
ret
(bad)
mov
mov
sub
mov
pop
fwait
jae
popa
in
or
pop
add
or
jae
jno
inc
test
lods
xchg
inc
outs
scas
loop
aas
mov
and
call
(bad)
sti
sar
(bad)
push
(bad)
rol
add
movs
cmps
retf
push
test
scas
adc
arpl
sbb
jge
(bad)
xchg
das
mul
pop
add
jp
push
pop
pusha
clc
jle
imul
test
mov
xchg
cli
dec
iret
cmps
add
mov
add
cwde
push
addr16
push
bound
jle
scas
add
or
fnstenv
iret
inc
(bad)
mov
ror
mov
hlt
jmp
stos
mov
pop
xchg
and
and
mov
je
int3
push
dec
jb
and
pop
pop
(bad)
iret
or
pop
sub
test
mov
cdq
add
(bad)
leave
repz
cmp
add
add
pop
daa
sbb
pcmpeqd
into
inc
sbb
popa
shl
nop
in
gs
scas
pop
push
adc
xlat
enter
rcl
clc
(bad)
push
into
jmp
push
mov
cmp
xchg
add
dec
or
pusha
jmp
rcr
mov
inc
pushf
add
xchg
sbb
fmul
out
jns
dec
sbb
push
je
mov
push
mov
sub
cmps
mov
xor
icebp
call
mov
mov
cmps
mov
pop
out
xor
xor
jmp
das
cmp
dec
sub
add
cmp
test
scas
pop
ss
cmovge
sbb
in
pop
jno
hlt
mov
sub
and
cmc
(bad)
xchg
test
jp
in
cmps
and
jp
icebp
jae
pop
fisubr
or
inc
leave
cmp
pop
mov
outs
pusha
jmp
ror
inc
fistp
xchg
add
popf
cmps
cld
mov
clc
and
dec
aad
cmp
mov
or
cmp
adc
pop
gs
inc
xchg
outs
clc
outs
xlat
aas
fbstp
dec
mov
mov
sbb
xchg
or
mov
fucomip
xlat
clc
cmc
mov
cmc
ja
mov
cmp
add
adc
xchg
and
push
and
mov
aam
jo
retf
push
xor
ror
mov
mov
ins
fcom
sub
ret
cmp
pop
xchg
pop
dec
leave
pop
add
shl
push
loop
push
sbb
and
or
adc
lahf
push
dec
outs
pushf
ds
sbb
stc
ins
pusha
(bad)
out
shr
(bad)
jmp
mov
int3
ja
mov
and
jae
test
mov
and
in
or
cmp
jmp
sbb
je
(bad)
pop
repz
xor
add
or
vpcmpgtw
(bad)
hlt
sbb
xchg
xchg
sbb
test
gs
inc
leave
bound
pop
sbb
dec
sub
add
iret
adc
mov
jl
mov
fld
neg
les
shr
adc
movs
popf
cmc
lods
add
in
adc
ja
sub
stc
pop
sar
aaa
ss
and
mov
jg
inc
ficom
icebp
dec
add
mov
mov
cmps
sbb
jp
xor
mov
xchg
mov
std
addr16
(bad)
es
iret
stc
ja
sub
(bad)
mov
sub
add
push
div
push
sub
fisub
pop
jno
dec
mov
(bad)
xor
and
clc
retf
call
stc
sbb
scas
data16
jge
adc
pop
mov
add
sbb
sub
xor
sbb
daa
pop
cmp
int
ja
add
mov
pusha
dec
jp
cs
cmp
dec
xchg
add
pop
sub
cld
inc
jbe
xlat
test
into
rcr
dec
add
push
inc
sub
mov
sub
cmp
mov
push
test
aad
inc
cmp
push
jne
xor
cmp
pop
and
add
jne
adc
pusha
xchg
xchg
mov
mov
jae
nop
movs
xor
leave
repnz
retf
cs
aam
fdiv
mov
test
xchg
mov
sub
shl
add
imul
jb
pop
xor
fsub
ins
lds
push
dec
imul
mov
adc
pop
fcomp
xchg
popf
push
add
bound
add
les
inc
stos
xor
sbb
leave
push
fistp
rcl
aas
add
ficomp
ror
add
test
sbb
into
or
cmp
or
into
ficomp
je
pusha
push
add
or
sbb
fistp
pop
test
sbb
and
xor
mov
cmp
jno
sar
xor
daa
xchg
scas
push
clc
sar
lahf
cmp
ret
cmp
add
in
or
jns
cmp
data16
ds
sar
add
jp
xchg
aaa
and
fdiv
push
xor
test
xor
xor
imul
call
ret
repnz
cmps
and
push
cmp
sub
and
jge
and
jecxz
and
(bad)
mov
sub
or
sub
outs
mov
inc
int
cs
mov
das
fst
dec
jno
add
dec
or
add
int3
jb
sub
dec
jbe
jmp
ret
jne
les
jg
pop
sti
jl
jp
jl
pop
jbe
into
add
xlat
mov
mov
in
xor
dec
out
outs
mov
clc
outs
leave
lea
push
dec
das
push
lds
bound
add
jle
popa
cld
fsub
pusha
xchg
mov
pop
fs
and
inc
(bad)
addr16
(bad)
dec
cmp
dec
and
(bad)
int3
dec
es
adc
call
cmc
nop
mov
inc
jecxz
ss
or
add
inc
cs
std
aas
aaa
in
inc
inc
sub
mov
add
cmp
push
xor
xor
movs
arpl
mov
out
push
test
push
and
gs
pop
mov
pop
push
hlt
push
pop
sbb
call
in
daa
pop
pop
dec
pop
pop
sbb
popf
pop
sbb
(bad)
in
mov
mov
jecxz
cmps
xor
(bad)
leave
in
out
ins
scas
in
add
js
push
mov
aam
add
in
add
sbb
jmp
dec
inc
addr16
iret
cld
mov
hlt
or
mov
sbb
(bad)
outs
into
sti
(bad)
mov
and
repnz
lock
push
pop
hlt
ds
cmc
add
cmps
xchg
js
cmp
fld
mov
fisub
(bad)
in
fsubp
test
fnsave
mov
imul
mov
cmps
sbb
and
xchg
shl
aam
push
jecxz
lds
xchg
les
(bad)
fld
aam
push
(bad)
test
add
sub
rol
inc
mov
cmp
dec
(bad)
jge
xchg
jo
enter
leave
xor
int3
fidivr
mov
fsubr
popf
xchg
and
pop
nop
jnp
sub
fldcw
xchg
xchg
push
cmp
and
adc
mov
sahf
ret
pop
cmp
add
mov
cdq
push
scas
das
fwait
or
icebp
call
dec
mov
lock
lea
mov
mov
cdq
cli
mov
mov
inc
ins
cwde
sub
dec
xor
cmp
adc
test
mov
test
sysret
xchg
(bad)
loopne
add
push
stos
add
movs
cmp
scas
cmps
push
sub
jo
fwait
lods
jne
out
cmps
cmp
arpl
div
mov
mov
jb
test
lods
mov
mov
div
xchg
aam
mov
int
mov
mov
inc
mov
ins
mov
or
shl
push
mov
jno
int3
mov
xchg
mov
popf
push
add
xor
mov
mov
jg
(bad)
outs
out
aaa
or
and
jmp
jl
lock
outs
dec
xchg
call
mov
les
leave
push
loopne
add
cli
aas
pop
push
add
xchg
and
cli
sbb
mov
(bad)
scas
mov
push
pop
jo
jae
mov
xchg
ror
aas
dec
ror
ret
sbb
fdiv
cmp
mov
push
dec
js
pop
ja
mov
loopne
cmp
mov
sub
pop
dec
loop
das
in
test
adc
add
or
je
mov
xchg
jge
sub
xor
add
dec
push
sbb
fild
cmps
dec
clc
cld
in
sub
push
mov
pop
fidivr
mov
mov
inc
jg
pop
jecxz
sub
repnz
or
lea
nop
or
sub
xchg
dec
jmp
sub
jmp
test
dec
or
jecxz
or
mov
sbb
pop
jl
lods
sub
outs
mov
punpcklwd
out
test
hlt
sub
add
rcl
nop
ins
imul
cwde
gs
call
retf
scas
jae
sar
pusha
fnstenv
pop
inc
dec
jmp
cld
add
sub
(bad)
and
push
or
mov
mov
mov
add
mov
push
cmp
shr
mov
loop
cmp
sbb
mov
jo
mov
adc
or
jnp
push
out
lock
jmp
stos
sbb
jb
fwait
push
dec
arpl
jno
add
cli
cmp
fst
xor
mov
imul
rcr
mov
and
sti
inc
fistp
dec
dec
jo
fdivp
out
fimul
push
gs
add
cs
fsubr
cdq
cmp
(bad)
mov
push
xor
push
in
dec
ret
rcl
imul
add
leave
xor
bound
fidiv
mov
jl
adc
dec
nop
mov
and
pop
cmp
cmp
pop
adc
mov
mov
repnz
jp
dec
pop
xlat
fwait
jecxz
scas
bound
xor
mov
test
test
push
sbb
js
jnp
ror
xor
push
dec
test
hlt
sub
dec
inc
or
mov
push
cmc
sbb
pusha
out
mov
pop
ret
mov
addr16
xor
fiadd
xor
and
push
pop
aad
(bad)
mov
jle
(bad)
adc
call
add
cld
xchg
jns
and
mov
test
push
xchg
add
add
cmp
xchg
xor
mov
int
jp
imul
inc
sbb
mov
or
xor
popf
std
jns
cmovne
xlat
out
into
sbb
xor
mov
out
mov
stc
popa
sbb
push
retf
jmp
adc
mov
add
jns
or
out
push
jno
mov
(bad)
add
test
mov
sbb
hlt
or
dec
mov
and
xor
sub
test
adc
sub
mov
into
rcl
popa
out
inc
cli
inc
icebp
mov
cmp
aaa
or
jle
add
ins
(bad)
dec
xor
outs
(bad)
fs
jmp
or
mov
repz
inc
sahf
dec
adc
adc
jns
mov
popf
mov
add
add
mov
and
pop
dec
fdivr
jns
pop
sub
jg
xchg
lods
cwde
cli
or
scas
mov
nop
sti
mov
mov
add
pop
pop
sti
mov
fldl2t
xor
cmps
int3
test
mov
pushf
dec
repz
push
es
mov
dec
dec
mov
lods
outs
jmp
xor
mov
xchg
fsubr
push
ret
mov
inc
sub
xchg
add
repnz
mov
jg
fs
xchg
repnz
jge
dec
xchg
jp
(bad)
fcmovne
jge
fcmovu
jmp
in
push
dec
jecxz
(bad)
into
imul
jp
jno
in
rcl
dec
dec
dec
fldenv
push
sti
hlt
push
push
enter
pop
shl
jb
adc
rol
add
dec
jae
lock
mov
cli
lahf
xchg
(bad)
jns
test
xlat
push
jne
(bad)
into
mov
sub
frstor
lods
int3
(bad)
idiv
push
loopne
sub
pop
push
jl
jmp
jnp
cdq
gs
shld
mov
or
dec
out
add
retf
xchg
ins
inc
adc
stos
arpl
cmp
pushf
adc
add
or
sub
mov
movs
xor
sbb
mov
ret
and
sbb
sti
mov
mov
aaa
push
add
aas
dec
hlt
or
bound
add
sbb
xchg
jnp
and
shl
xlat
(bad)
iret
stos
out
push
jb
jmp
or
rcl
dec
sbb
jae
cmps
pop
inc
gs
cmps
pop
pop
push
lods
dec
into
out
scas
div
scas
es
rcl
xlat
icebp
pop
mov
sti
sahf
inc
out
and
cld
add
mov
xor
jae
adc
cmp
call
sbb
jb
inc
stos
jmp
adc
push
pop
and
jge
jae
fs
ficomp
movs
bswap
cwde
sbb
or
pop
mov
je
cmp
bound
add
div
mov
call
scas
push
adc
cmp
or
sar
pop
aas
push
test
and
popf
pop
adc
mov
and
ror
adc
push
mov
inc
pop
pop
xor
and
sbb
out
add
pop
sub
mov
push
dec
int3
je
int
sbb
stc
ret
inc
in
mov
mov
jle
adc
les
lock
or
push
icebp
rep
inc
addr16
hlt
fcom
push
sub
mov
sbb
mov
pusha
fidiv
ffree
lds
out
add
push
cmp
jmp
inc
shl
test
pop
aaa
add
push
mov
mov
scas
or
mov
pop
xchg
or
out
cmps
pusha
add
mov
rcr
mov
cmp
or
sbb
test
sbb
aas
add
lahf
adc
push
sbb
shr
js
mov
sbb
iret
push
jge
lock
fidiv
mov
or
inc
xor
push
sub
add
mov
cmps
gs
mov
pop
out
sbb
repz
retf
or
mov
add
jne
pushf
imul
cmp
js
and
out
pop
sbb
push
fs
mov
add
adc
or
cmp
fld
add
lea
or
(bad)
les
mov
push
cmps
mov
jmp
inc
lods
ror
lods
mov
push
and
xchg
add
inc
sub
push
mov
xchg
xor
or
sbb
mov
sub
sbb
pop
sbb
sbb
adc
lea
dec
das
inc
pop
and
jbe
push
ret
rol
pop
jmp
push
test
add
xlat
mov
mov
add
in
xlat
retf
leave
mov
ins
dec
retf
xchg
sbb
(bad)
rcl
push
into
push
and
and
mov
lds
mov
mov
xchg
pop
dec
mov
adc
(bad)
retf
call
bound
push
sub
popf
adc
add
add
repnz
gs
sub
fbld
push
pop
and
mov
mov
push
(bad)
jmp
cmp
sub
jmp
xor
imul
adc
sub
dec
cs
mov
mov
mov
gs
jno
cmp
xor
cli
repnz
and
(bad)
jne
adc
sti
add
fist
int3
jns
mov
ja
pop
mov
sbb
pop
sub
xor
pop
sbb
rol
add
sbb
or
fld
push
je
or
push
(bad)
xchg
(bad)
ds
test
pop
fdiv
or
xor
out
mov
mov
retf
xlat
cmps
dec
push
(bad)
jo
adc
jl
cld
xchg
fwait
add
adc
mov
shl
xor
pop
out
aam
or
pop
jp
rcr
and
mov
jo
enter
inc
in
imul
pop
add
fs
rcr
jb
and
add
jmp
test
loope
mov
inc
sub
or
ins
xor
out
xor
push
jns
arpl
inc
mov
sbb
je
inc
sub
cvtdq2ps
and
int3
jo
ins
fnsave
xor
mov
pop
(bad)
xchg
cmp
pop
shl
add
pop
lahf
dec
js
jb
cmp
mov
enter
xchg
clc
leave
jge
leave
mov
in
push
mov
into
cld
mov
xchg
inc
out
and
or
rol
mov
adc
test
mov
and
ficomp
shr
ds
add
fldenv
outs
pop
jb
sbb
enter
(bad)
das
push
push
jp
nop
aas
xchg
push
rcr
mov
push
mov
xchg
xchg
mov
adc
jmp
or
into
imul
fisubr
daa
cmp
push
popa
lods
and
push
sub
or
loope
add
dec
arpl
push
and
add
lahf
icebp
in
jp
movs
ffree
(bad)
addr16
xchg
rol
mov
inc
loopne
cmp
jmp
pop
jp
mov
pop
int3
pop
ds
jg
cmp
mov
adc
xor
and
in
fbstp
push
xor
(bad)
jmp
aam
movs
(bad)
hlt
jp
or
and
enter
rcr
dec
inc
ja
pop
pop
sbb
sub
test
je
add
ss
sbb
xchg
popf
test
sbb
ss
cdq
jnp
push
fadd
cmp
push
add
out
sbb
enter
loope
mov
xchg
xchg
ja
sar
push
in
push
xor
(bad)
outs
and
and
jle
imul
cmp
push
sub
mov
movs
mov
sbb
lea
daa
scas
into
mov
push
pop
jl
int
int3
bound
frstor
adc
sbb
cmp
sub
int
clc
psraw
push
fsub
cmp
mov
imul
bound
jbe
adc
lock
sub
popf
push
add
pushf
aam
aaa
mov
retf
sub
int
jmp
fwait
jb
push
pop
add
add
dec
inc
dec
mov
pop
mov
(bad)
sbb
loope
cmp
fs
enter
mov
jo
loop
inc
or
or
or
(bad)
clc
or
ins
int
les
mov
enter
(bad)
mov
fs
xchg
shr
pop
adc
out
and
popf
jl
add
ret
dec
push
pop
xor
push
xchg
and
data16
mov
clc
mov
imul
push
dec
adc
xor
imul
shl
cmp
lods
test
mov
mov
add
fiadd
fadd
ins
jge
jb
das
(bad)
jae
pop
leave
jle
cmp
adc
loop
and
adc
cmps
call
mov
or
gs
mov
sar
lods
sub
jo
neg
inc
push
scas
pop
add
cdq
mov
adc
mov
jb
std
cdq
inc
fwait
rcl
push
movs
dec
push
shl
je
push
add
jne
or
daa
sbb
std
sub
cmp
mov
pushf
je
(bad)
pop
loop
mov
push
add
ins
or
xor
aas
in
push
stos
in
loopne
push
add
aam
aaa
stos
jecxz
stc
add
inc
sti
leave
and
pop
push
xchg
jns
add
inc
pop
retf
cdq
outs
movs
xchg
js
retf
movs
mov
or
scas
nop
pop
cmp
xchg
xchg
sbb
pop
aad
inc
pop
adc
dec
adc
sbb
shl
ds
cdq
les
push
retf
mov
movups
loop
movs
ins
aad
mov
push
fild
add
fisttp
add
xor
pop
jmp
cmp
mov
fld
mov
xor
xlat
imul
push
xor
dec
sti
add
jmp
stc
jbe
push
mov
hlt
loope
add
jle
neg
push
mov
test
add
test
test
cs
sub
lock
movs
ret
movs
test
outs
(bad)
cmp
dec
inc
adc
add
mov
mov
dec
dec
pusha
mov
and
push
(bad)
and
cmp
(bad)
lea
jmp
pusha
add
add
add
into
mov
push
mov
or
jno
xor
stos
pushw
hlt
sbb
sub
push
lods
mov
push
out
sub
sub
dec
lahf
jl
int3
sahf
(bad)
xor
mov
and
xchg
(bad)
xchg
inc
psllw
cmc
jae
mov
pop
rcl
sbb
mov
popf
test
xor
ja
sbb
(bad)
ficomp
sbb
jb
pushf
ret
stos
shl
repnz
clc
retf
dec
fwait
iret
leave
or
xchg
enter
xchg
popf
pop
and
arpl
adc
and
jge
mov
dec
pop
fwait
adc
mov
nop
mov
push
in
push
or
add
push
shl
mov
scas
pop
mov
cld
mov
dec
add
shl
mov
arpl
inc
push
cmp
std
jo
in
(bad)
mov
div
cli
int
jae
stc
or
outs
jl
pop
adc
pop
mov
and
mov
jmp
mov
inc
jbe
mov
daa
les
scas
dec
jmp
scas
mov
shl
adc
out
push
xchg
mov
outs
aam
or
cmp
popa
pop
mov
and
cmp
pop
and
rcl
push
ins
dec
fimul
sub
popf
push
add
aad
push
idiv
mov
out
jmp
call
dec
fsubr
popf
push
out
push
mov
add
ja
add
pop
into
fucomp
out
xor
cs
lahf
movs
jno
cli
cmps
inc
lea
cdq
out
jno
dec
mov
mov
xchg
lods
and
js
pop
es
cdq
ins
jo
inc
push
adc
push
sub
sahf
add
xchg
clc
fisub
aas
arpl
pop
rcl
lods
xchg
dec
xor
ds
mov
mov
nop
test
sub
ret
or
outs
out
dec
mov
xchg
or
mov
mov
sub
pop
mov
xchg
fxch
or
lods
sbb
mov
(bad)
repnz
sub
add
jge
not
push
xchg
jge
leave
mov
mov
(bad)
dec
pop
hlt
cmps
sub
push
lds
retf
lahf
push
push
jl
loopne
xchg
xor
inc
dec
cmp
pop
sub
rcl
mov
por
loopne
iret
push
test
sub
mov
add
cdq
scas
pop
pop
inc
int
or
aad
test
loopne
neg
imul
mov
sub
mov
inc
mov
cmc
test
xor
add
and
dec
and
ffree
leave
aas
jle
sbb
cmps
sbb
outs
xchg
ds
or
add
add
test
das
mov
in
icebp
ja
push
pop
retf
cmc
xor
sahf
fcomip
fistp
in
xchg
sbb
addr16
jecxz
mov
push
enter
push
aad
or
stc
dec
and
std
jno
ins
and
scas
sbb
inc
mov
add
mov
jae
and
push
rcl
pop
popf
mov
test
push
mov
scas
fisubr
retf
movs
cmp
iret
pop
push
sub
pop
aad
pop
and
xor
adc
mov
mov
int
div
daa
push
cmp
mov
pop
out
xchg
mov
push
xchg
ins
fcom
movs
adc
je
add
das
jp
cmp
out
out
gs
setbe
scas
js
ret
xlat
sbb
popf
js
cs
(bad)
mov
mov
dec
sbb
pop
cmp
lods
test
dec
push
pop
add
mov
iret
mov
movs
jmp
cmp
test
aaa
add
mov
ss
mov
mov
sub
add
popa
(bad)
push
mov
mov
mov
cmp
push
js
cmp
lock
daa
jmp
inc
je
sbb
fbstp
xlat
int
pushf
lods
test
sub
inc
dec
xchg
and
inc
dec
(bad)
pushf
(bad)
xchg
pusha
(bad)
fwait
adc
jp
test
sahf
aaa
test
xor
push
fcmovnu
xchg
push
adc
xor
aas
call
pushf
cmps
or
jle
mov
ss
mov
inc
push
lahf
mov
popa
lods
ins
addr16
cmp
es
cmps
xchg
xor
and
ror
cld
cdq
jge
adc
add
add
add
push
into
int3
lods
inc
stos
into
sbb
inc
xchg
jg
jle
(bad)
jbe
jnp
adc
push
std
pop
gs
or
popa
inc
push
scas
mov
iret
rcr
cmp
xlat
adc
sub
mov
in
(bad)
xchg
cmp
scas
or
inc
or
xchg
nop
ja
dec
out
xlat
cmps
(bad)
cld
mov
aad
pop
add
dec
pop
mov
cdq
nop
in
xor
xchg
in
jbe
or
push
add
imul
ret
int3
sub
out
dec
in
jg
ins
lahf
aam
out
sub
mov
dec
xchg
dec
push
sub
cld
push
(bad)
cmps
imul
pop
xchg
imul
popf
push
add
popf
push
add
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
movhps
add
push
add
push
push
add
push
push
add
push
push
add
push
push
add
loope
add
rcl
add
rcl
add
add
rcl
add
rcl
add
int
adc
xchg
xor
push
xchg
xor
add
adc
add
adc
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
and
add
adc
add
add
and
add
adc
add
in
add
in
add
aam
add
aam
add
(bad)
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
or
sbb
add
or
test
sbb
add
adc
add
adc
add
or
add
or
add
or
pop
sbb
add
adc
add
sbb
add
adc
add
adc
add
adc
add
adc
add
sbb
add
adc
add
or
iret
adc
add
or
call
or
outs
sbb
add
adc
add
adc
add
adc
add
add
or
pop
adc
add
adc
add
adc
add
adc
add
or
xchg
adc
add
adc
add
adc
add
sbb
add
pop
or
daa
sbb
add
adc
add
sbb
add
sbb
add
or
mov
or
jae
or
repz
add
add
or
ret
sbb
add
sbb
add
or
jecxz
or
and
or
mov
adc
add
or
sbb
or
jnp
or
stos
adc
add
sbb
add
adc
add
adc
add
or
or
or
imul
add
or
jmp
or
sub
or
add
stos
adc
add
add
adc
add
or
cmp
or
mov
sbb
add
adc
add
add
adc
add
add
adc
add
add
adc
add
or
pushf
adc
add
adc
add
add
or
xchg
adc
add
or
add
hlt
adc
add
add
or
add
or
test
or
push
sbb
add
pop
or
and
or
movs
pop
or
pusha
sbb
add
adc
add
adc
add
or
mov
or
jo
or
lock
add
or
rcl
add
adc
add
or
add
loopne
or
and
or
mov
pop
or
pop
adc
add
sbb
add
or
test
or
cmp
or
clc
pop
or
mov
pop
or
dec
adc
add
sbb
add
or
pop
adc
add
pop
or
sub
or
test
or
dec
pop
or
dec
adc
add
adc
add
add
adc
add
push
or
dec
or
out
push
or
out
wbinvd
add
or
pop
adc
add
pop
or
adc
add
adc
add
push
or
out
or
push
pop
or
push
adc
add
pop
or
push
adc
add
adc
add
push
or
(bad)
wbinvd
add
pop
or
add
adc
add
adc
add
pop
or
mov
or
mov
or
push
push
or
push
pop
or
(bad)
adc
add
adc
or
mov
or
push
adc
add
push
or
ss
or
ss
or
data16
add
or
push
push
or
push
pop
or
cmps
adc
add
adc
or
add
push
adc
add
or
and
or
adc
or
xchg
adc
add
adc
or
xor
or
xor
or
xor
or
mov
or
push
adc
or
ret
add
push
or
xchg
adc
add
adc
or
repnz
add
add
adc
or
bound
or
xor
or
mov
push
or
jmp
add
or
cmp
or
or
or
call
add
adc
add
adc
or
sub
or
cmp
or
mov
push
or
add
pop
adc
add
or
retf
add
adc
add
adc
add
adc
add
adc
add
adc
add
or
dec
adc
add
adc
add
adc
add
adc
add
adc
call
adc
jmp
adc
dec
adc
inc
add
adc
jmp
adc
push
adc
push
idiv
xor
adc
jmp
adc
call
adc
push
adc
inc
adc
jmp
idiv
push
adc
add
adc
add
adc
add
or
(bad)
adc
add
add
adc
add
adc
dec
adc
call
adc
inc
adc
jmp
adc
inc
adc
(bad)
fst
cmc
dec
adc
call
adc
call
adc
jmp
adc
call
adc
call
dec
call
inc
jmp
cmc
inc
add
cmc
call
cmc
dec
cmc
call
adc
dec
cmc
call
adc
inc
cmc
jmp
adc
inc
adc
dec
es
adc
add
aad
or
aad
or
les
or
les
or
xlat
pop
or
xlat
pop
or
cmps
pop
or
cmps
pop
or
xchg
sbb
or
add
sbb
or
or
cld
or
cld
or
cld
or
or
cld
or
cld
or
std
or
push
std
or
push
std
or
push
std
or
push
std
or
push
std
or
push
std
or
push
std
or
sbb
or
jmp
dec
fistp
dec
dec
fistp
dec
fwait
sbb
or
fwait
sbb
or
mov
push
dec
call
push
push
dec
pop
sbb
push
pop
sbb
push
cmp
dec
dec
sbb
push
pop
sbb
push
pop
sbb
push
sbb
dec
sub
dec
sbb
dec
add
sbb
dec
cmp
dec
or
dec
sbb
dec
or
add
add
rol
ret
adc
push
rcl
pop
pop
ret
pop
(bad)
sbb
call
sbb
call
sbb
add
sbb
add
sbb
sbb
sbb
std
sbb
push
std
sbb
add
push
std
sbb
inc
std
sbb
inc
std
sbb
ja
sbb
ja
sbb
inc
(bad)
sbb
inc
(bad)
sbb
push
(bad)
sbb
push
(bad)
sbb
inc
(bad)
sbb
inc
(bad)
sbb
jbe
sbb
jbe
sbb
or
or
or
or
(bad)
or
leave
or
leave
or
test
cld
or
or
leave
or
leave
or
add
cdq
or
leave
or
leave
or
test
cld
or
or
mov
or
sbb
dec
or
sbb
js
or
sbb
dec
or
sbb
dec
or
sbb
or
or
add
add
and
push
in
or
out
or
fstp
cld
or
pop
dec
mov
add
adc
int3
push
adc
mov
add
adc
add
adc
adc
push
adc
inc
adc
inc
adc
adc
inc
adc
clts
push
inc
clts
push
push
clts
push
inc
clts
push
inc
adc
pop
inc
adc
pop
adc
pop
pop
add
pop
pop
add
std
pop
sbb
cld
pop
sbb
cld
pop
sbb
cld
pop
sbb
cld
pop
sbb
sbb
jne
sbb
(bad)
std
sbb
(bad)
std
sbb
xchg
std
sbb
xchg
std
sbb
(bad)
std
sbb
(bad)
std
sbb
je
sbb
add
je
sbb
xchg
sbb
xchg
sbb
push
adc
sbb
sbb
inc
adc
sbb
sbb
ja
sbb
ja
sbb
inc
bndstx
inc
bndstx
push
bndstx
push
bndstx
inc
bndstx
inc
bndstx
jbe
sbb
jbe
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
mov
add
ins
sbb
add
add
ins
adc
add
add
lea
add
jge
add
jge
add
ins
sbb
add
adc
add
adc
add
adc
add
add
add
sbb
add
movlps
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
lods
adc
add
adc
add
adc
add
adc
add
adc
add
pop
add
pop
push
add
pop
or
add
add
idiv
dec
push
idiv
pop
add
add
add
dec
xor
dec
idiv
sbb
jb
jmp
add
or
sbb
add
sbb
dec
add
sbb
add
sbb
add
sbb
fstp
push
add
sbb
dec
sbb
popf
sbb
add
add
or
dec
sbb
add
or
add
sbb
add
mov
or
add
pop
add
push
add
cmps
add
(bad)
dec
jle
sbb
sbb
add
sbb
sbb
sbb
add
or
add
add
sbb
add
sbb
dec
sbb
fstp
sbb
fstp
sahf
add
sbb
dec
sbb
popf
sbb
add
or
add
sbb
add
adc
jb
pop
and
add
into
add
adc
add
bound
pop
and
add
scas
add
add
add
dec
and
add
adc
add
and
add
and
add
pop
xor
fstp
mov
add
pop
pusha
add
pop
and
fstp
call
pop
add
pop
inc
add
adc
dec
pop
sbb
popf
sbb
adc
lea
js
pop
pop
cmp
pop
sbb
add
adc
add
push
add
stos
add
or
dec
pop
mov
sbb
sbb
add
pop
inc
add
push
idiv
(bad)
adc
add
push
and
fst
ret
adc
dec
push
push
add
push
adc
add
fst
mov
dec
push
je
popf
push
xor
popf
pop
loop
mov
push
dec
add
sbb
arpl
lea
ins
add
sub
pop
pop
rol
aas
adc
add
pop
add
sbb
pop
pop
mov
dec
push
cld
dec
jl
sbb
pop
repnz
add
or
add
push
add
or
sbb
rol
adc
add
sbb
pop
add
push
mov
dec
sbb
aas
add
adc
dec
sbb
nop
add
cmp
lea
aaa
add
rol
cmp
adc
add
dec
sbb
daa
add
mov
dec
sbb
xchg
sbb
push
lock
sbb
add
or
movntps
or
sbb
add
sbb
std
dec
sbb
add
sbb
add
sbb
repz
sbb
add
sbb
mov
sbb
add
pop
cwde
add
sbb
add
sub
pop
sbb
add
adc
add
pop
add
sbb
pop
sbb
dec
jnp
sbb
sbb
add
sbb
add
sbb
add
adc
add
sbb
add
add
sbb
int
popa
add
sbb
add
sbb
int
add
popf
sbb
add
sbb
popf
sbb
add
adc
lea
jns
pop
sbb
add
les
aas
adc
add
imul
pop
sbb
dec
sbb
sbb
sbb
adc
dec
sbb
(bad)
(bad)
adc
add
sbb
add
push
add
sbb
add
sbb
dec
sbb
popf
sbb
add
sbb
popf
sbb
add
add
sbb
add
adc
pop
add
sbb
add
std
dec
jge
sbb
sbb
add
add
or
sbb
add
sbb
call
add
sbb
add
sbb
add
sbb
fstp
push
add
sbb
sbb
dec
sbb
popf
sbb
add
adc
dec
sbb
add
adc
add
sbb
add
iret
add
adc
dec
sbb
pop
sbb
add
scas
add
(bad)
dec
jle
sbb
sbb
add
sbb
sbb
add
sbb
add
adc
add
sbb
add
sbb
add
pop
add
sbb
add
sbb
dec
sbb
popf
sbb
add
adc
add
sbb
add
adc
jb
pop
adc
add
fld
aas
adc
add
bound
add
pop
adc
add
mov
add
add
adc
sbb
adc
add
adc
add
adc
add
wrmsr
add
adc
add
punpcklbw
fisttp
and
fst
xchg
add
sldt
int
add
cmovo
popf
adc
add
add
prefetchnta
popf
adc
add
pshufb
lds
aas
adc
add
push
add
movs
add
or
dec
js
add
adc
dec
(bad)
add
push
idiv
(bad)
adc
add
push
and
fisttp
mov
adc
dec
push
push
add
push
adc
fisttp
popf
add
push
hlt
dec
push
je
popf
push
xor
popf
paddusw
mov
push
dec
add
or
arpl
lea
ins
add
sub
pop
bswap
add
adc
add
pop
add
sbb
pop
shrd
dec
push
cld
dec
jl
sbb
add
psadbw
or
push
adc
add
add
adc
add
or
ret
add
or
and
fisttp
mov
add
or
inc
add
adc
dec
or
xchg
add
cmp
lea
pop
or
rol
cmp
adc
dec
or
sub
pop
push
mov
dec
or
mov
sbb
push
repz
or
add
add
movntps
or
or
add
or
std
dec
or
add
or
add
or
cmc
inc
add
or
add
or
(bad)
dec
sbb
add
sbb
imul
sbb
add
fld
aas
sbb
add
sbb
pop
and
dec
jnp
sbb
and
add
sbb
add
sbb
add
add
sbb
add
sbb
add
and
add
sbb
fstp
and
frstor
xchg
add
sbb
add
sbb
add
sbb
dec
sbb
add
sbb
lea
jns
pop
sbb
add
lds
aas
sbb
add
imul
add
pop
and
add
mov
sbb
and
add
sbb
sbb
sbb
add
sbb
add
sbb
add
push
add
sbb
add
sbb
dec
sbb
popf
sbb
add
sbb
add
popf
sbb
add
sbb
pop
sbb
add
sbb
pop
add
sbb
add
std
dec
jge
sbb
sbb
add
pop
inc
push
pop
(bad)
jbe
dec
cld
push
repz
inc
rcl
aas
add
push
(bad)
aas
mov
add
push
inc
rcl
pop
add
push
call
mov
push
inc
rcl
jg
fst
add
mov
push
jg
mov
pop
add
call
jl
cmc
inc
pop
add
call
push
hlt
inc
inc
push
push
das
add
jmp
aas
push
sti
inc
dec
push
push
mov
add
add
adc
add
adc
call
adc
call
adc
(bad)
jmp
adc
add
adc
(bad)
mov
mov
data16
mov
lods
loope
xor
call
js
add
pop
je
loope
cmp
std
das
xor
dec
xor
fs
aad
imul
add
outs
imul
ins
and
add
add
dec
sbb
add
sbb
call
cmp
dec
cmp
(bad)
jge
and
xor
xor
(bad)
mov
inc
xor
add
inc
xor
pop
adc
sbb
inc
xor
add
cmp
add
cmp
add
add
xor
xor
cs
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
lock
or
add
sub
jmp
adc
add
push
add
fst
add
int
add
ret
or
push
add
add
add
add
jge
cmp
mov
push
adc
add
int
cmp
cmp
adc
push
cmp
pop
or
add
inc
push
cmp
add
sub
or
xchg
adc
add
test
push
adc
add
cmp
ss
or
fcom
cmp
aaa
repnz
add
repnz
add
push
cmp
loop
add
add
push
cmp
sbb
add
add
cmp
pop
cld
add
add
add
hlt
add
add
cmp
std
repnz
add
test
outs
adc
add
cmp
mov
adc
add
push
cmp
into
push
or
adc
cmp
pop
pop
or
and
cmp
xchg
pop
or
mov
push
or
add
ds
cmp
xchg
or
cmp
cmp
mov
add
sbb
cmp
popf
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
aaa
adc
add
adc
add
add
add
adc
add
adc
add
adc
add
adc
add
adc
fst
add
jp
add
adc
add
adc
in
adc
adc
mov
adc
add
adc
add
adc
das
adc
das
adc
add
pop
add
fs
adc
mov
add
adc
cmp
adc
popa
adc
add
adc
add
jb
das
adc
pop
adc
add
pop
add
adc
xor
popa
add
adc
mov
adc
add
adc
add
adc
pop
adc
out
adc
add
adc
lock
loope
add
adc
add
mov
adc
adc
add
add
js
add
xchg
adc
sub
pop
add
adc
ja
and
scas
adc
mov
adc
add
add
nop
adc
pop
adc
das
adc
add
jb
jo
pop
add
adc
sub
push
add
jb
xor
outs
add
adc
add
adc
adc
add
adc
add
adc
out
adc
out
adc
add
adc
cmp
push
add
pop
add
adc
add
adc
sbb
arpl
inc
adc
and
and
outs
adc
add
jno
rcl
add
pop
add
adc
adc
add
add
pop
add
add
adc
jnp
add
add
adc
add
jb
jge
pop
add
adc
pop
adc
adc
add
adc
mov
pop
add
adc
sti
adc
adc
add
adc
das
adc
pop
adc
add
adc
xor
add
pop
add
add
adc
add
inc
add
sbb
mov
sbb
outs
sbb
add
sbb
add
sbb
das
sbb
add
inc
add
sbb
xor
pop
add
sbb
push
sbb
add
sbb
das
sbb
pop
sbb
add
sbb
(bad)
pop
push
add
add
pop
data16
pop
pop
add
pop
and
add
pop
add
pop
pop
add
pop
add
pusha
sbb
das
sbb
pop
sbb
add
sbb
les
fs
sbb
mov
and
mov
add
push
add
pop
add
sbb
add
pop
pop
add
pop
add
pop
add
add
sub
sub
pop
popa
add
pop
jno
cs
add
add
push
add
pop
push
add
push
add
xor
add
add
in
xor
fcom
xor
lea
add
std
push
cmp
add
sti
cld
or
or
sub
pop
or
outs
add
fwait
movs
push
outs
jno
cmp
test
jae
movs
push
data16
imul
mov
imul
push
add
clc
cli
cmc
(bad)
call
adc
pop
add
push
add
push
pop
add
adc
ja
fst
and
clc
adc
stc
adc
jo
cmp
jb
and
sbb
add
sbb
mov
push
add
cmp
ins
sbb
push
arpl
jnp
push
add
add
add
adc
add
dec
sbb
sub
pop
add
adc
push
add
adc
add
add
adc
add
push
adc
fs
adc
add
adc
add
adc
push
add
adc
add
out
xor
and
gs
inc
inc
sahf
int3
xor
pop
adc
add
sbb
sbb
popa
sbb
add
sbb
add
mov
jno
test
add
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
adc
adc
add
adc
repz
add
adc
add
adc
add
adc
popf
adc
add
sbb
cmp
push
add
add
pop
add
sbb
sbb
movs
sbb
sahf
sbb
sbb
add
jb
jp
pop
add
and
sbb
add
push
add
sbb
adc
add
adc
cmp
pop
add
adc
add
adc
mov
sbb
pop
adc
adc
add
adc
add
adc
int
add
retf
adc
adc
lea
add
clc
mov
inc
pop
add
sbb
cmp
pop
add
push
add
push
add
sbb
adc
add
add
jns
pop
add
pop
add
push
add
adc
jp
jb
sub
adc
add
add
cmps
pusha
jb
mov
add
mov
imul
iret
cmc
jmp
js
cld
cmps
push
cmp
repz
call
call
sub
sub
xor
cdq
jb
js
add
mov
mov
je
cmps
push
jb
add
add
jg
jb
(bad)
mov
jb
int
inc
into
cmc
push
jb
sbb
add
and
jb
mov
adc
add
adc
add
adc
mov
adc
or
cmp
or
cmp
fcom
inc
add
adc
fist
xor
add
jmp
sbb
push
sbb
dec
sbb
push
sbb
adc
add
adc
jge
inc
add
dec
add
ja
pop
adc
adc
mov
push
add
jno
and
push
add
sbb
and
pop
add
sbb
xor
jb
sbb
mov
add
pop
add
scas
cwde
pop
jae
pop
add
in
pop
dec
icebp
in
(bad)
in
mov
imul
lods
cmc
(bad)
in
mov
imul
cmps
push
add
in
jmp
gs
and
cmp
es
dec
pop
add
sub
iret
sub
in
xor
pop
ss
add
push
js
or
pop
jb
sub
push
add
add
jae
pop
add
pop
add
push
sub
fst
add
scas
push
pop
add
pop
adc
add
push
push
add
push
and
hlt
push
pop
add
pop
pop
add
push
add
rcl
inc
add
push
add
cdq
cmp
das
iret
popa
jae
add
call
lahf
shl
xor
imul
add
push
add
test
add
jb
push
add
push
pop
add
push
adc
add
push
jno
mov
and
mov
push
add
push
and
out
jno
cli
adc
add
add
repnz
and
das
adc
add
adc
add
adc
and
and
cmp
bound
(bad)
adc
mov
adc
popa
add
adc
adc
add
pop
add
adc
pop
add
add
adc
add
add
push
sahf
ja
or
adc
add
add
adc
add
adc
add
mov
gs
add
(bad)
cwde
cmc
push
mov
gs
popa
lea
add
adc
xor
pop
add
adc
adc
add
adc
mov
adc
add
add
jle
push
arpl
add
cmc
(bad)
jns
outs
outs
cwde
sub
inc
adc
add
pop
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
push
add
adc
adc
add
adc
or
add
adc
add
inc
adc
add
adc
adc
scas
adc
mov
adc
sahf
adc
adc
jp
pop
add
and
je
jno
cmp
adc
adc
outs
adc
inc
adc
and
add
das
cwde
push
bound
popf
cmc
(bad)
fcomi
cmp
add
mul
adc
add
dec
add
div
add
mul
add
adc
loope
and
add
adc
add
adc
add
adc
add
imul
add
adc
pop
idiv
add
div
jmp
popa
data16
popa
gs
xchg
cmc
dec
add
sub
add
mov
jae
adc
add
inc
add
adc
add
adc
add
adc
add
test
cmc
aaa
add
cmc
adc
add
cmc
cmp
adc
add
cmc
dec
add
adc
loopne
cmp
cmc
aas
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
aas
add
cmc
aas
add
cmc
adc
add
cmc
xor
add
adc
add
adc
add
adc
add
hlt
aaa
add
hlt
adc
add
hlt
inc
add
hlt
and
add
hlt
sub
add
adc
fcomi
cs
hlt
cmp
hlt
sub
add
add
hlt
dec
add
hlt
adc
add
adc
add
adc
add
adc
add
adc
add
mov
(bad)
jp
popa
add
sbb
mov
add
jno
popa
sbb
mov
pop
add
nop
push
arpl
das
add
add
and
push
add
xor
cmc
jmp
mov
jae
fdiv
jmp
mov
add
sub
mov
pop
popa
add
pop
imul
jmp
add
sbb
cmp
pop
add
jo
scas
sbb
mov
arpl
scas
sbb
sbb
add
add
cmp
arpl
add
jnp
popa
add
push
add
imul
mov
add
pop
jno
xor
pop
add
pop
pop
add
jo
pop
pop
pop
add
push
arpl
mov
pop
xor
enter
stos
push
pop
add
push
arpl
sti
push
popa
add
push
dec
add
pop
add
push
pop
add
mov
cmp
popa
add
das
clc
pop
outs
and
push
outs
and
outs
outs
scas
clc
pop
jo
mov
mov
push
ins
jns
outs
and
popa
gs
xchg
das
not
and
popa
sub
push
and
jb
sub
popa
gs
neg
mov
xchg
push
add
add
test
out
cmc
outs
gs
xchg
push
outs
mov
outs
and
mov
pop
sahf
adc
add
xchg
pusha
xor
je
adc
mov
jb
lods
mov
outs
clc
pop
imul
push
add
adc
pop
add
push
add
add
add
pop
add
adc
add
adc
add
and
popa
add
adc
add
adc
add
adc
add
mov
or
add
lods
lock
add
lock
jno
xor
sbb
add
sbb
add
sbb
add
add
xor
sbb
add
sbb
add
adc
add
sbb
add
adc
add
sbb
jmp
and
dec
sbb
add
sbb
add
sbb
add
sbb
add
pop
dec
add
sbb
add
pop
xor
pop
inc
add
pop
and
movs
adc
(bad)
pop
cmp
pop
inc
add
pop
xor
add
pop
cmp
pop
aaa
add
sbb
add
sbb
add
sbb
add
sbb
add
pop
sub
add
xor
pop
sub
sbb
add
sbb
add
popa
add
sbb
jo
outs
add
adc
adc
adc
add
push
xor
add
add
pop
xor
sbb
add
pop
add
ja
push
add
adc
add
jp
je
popa
arpl
adc
add
push
inc
add
adc
jo
sub
add
sbb
add
sbb
add
sbb
add
push
cs
sbb
add
push
inc
add
push
inc
add
push
and
sub
inc
add
add
push
inc
add
adc
cmp
sub
adc
aas
add
sbb
add
adc
add
mov
xor
add
push
add
adc
add
adc
add
adc
out
adc
sub
adc
sti
adc
add
sbb
add
sbb
add
sbb
sbb
sbb
mov
sbb
call
add
and
adc
add
add
sbb
and
add
adc
add
adc
add
sbb
add
sbb
add
sbb
add
xor
sbb
add
adc
add
adc
add
add
adc
sti
adc
cmc
adc
add
jb
das
adc
pop
adc
add
adc
adc
sbb
add
add
cmp
push
add
adc
push
and
jo
pop
and
jb
pop
xor
sub
adc
jb
pop
add
add
add
sbb
das
sbb
xor
pop
add
sbb
add
sbb
add
pop
add
push
sbb
add
jb
add
jnp
ins
lock
jae
pop
add
push
sbb
pop
inc
add
pop
aas
add
push
add
cmp
ins
sub
add
lahf
adc
adc
add
add
add
fs
outs
pop
pop
add
xchg
adc
cmp
pop
add
pusha
pop
outs
or
adc
push
sbb
add
adc
fst
add
xor
outs
leave
jns
fst
add
ins
sbb
add
adc
add
adc
sbb
add
fisubr
gs
add
mov
adc
add
fst
xor
sbb
add
ja
arpl
add
mov
inc
add
sbb
add
adc
add
push
add
mov
pop
imul
pop
push
add
jae
pop
gs
jge
gs
jge
gs
outs
je
push
add
sub
je
push
add
ins
sbb
add
adc
in
adc
add
add
inc
add
adc
add
adc
add
adc
add
adc
push
adc
jmp
adc
jmp
inc
add
adc
sub
add
adc
stos
sbb
add
add
ins
sbb
add
adc
xor
inc
add
adc
and
adc
cmp
cs
sbb
add
adc
add
sbb
add
adc
add
adc
iret
adc
add
adc
add
adc
add
sbb
add
adc
retf
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
das
add
adc
add
xor
add
adc
add
call
adc
add
jnp
push
sbb
adc
je
pop
add
adc
add
jno
outs
xor
jne
jo
add
popa
dec
arpl
jns
imul
add
push
outs
add
lock
dec
push
xor
add
call
add
in
pop
cmp
js
inc
adc
imul
sub
add
cmp
add
scas
adc
add
jl
outs
mov
add
jno
jo
pop
adc
add
popa
ins
ins
jp
add
xor
test
add
das
adc
add
and
add
add
out
add
adc
add
adc
in
out
add
adc
add
adc
add
adc
add
adc
(bad)
adc
adc
or
jo
das
adc
repnz
lock
push
adc
add
add
mov
aas
add
adc
add
adc
add
adc
add
and
add
adc
add
add
and
add
adc
add
adc
add
in
add
in
add
in
add
in
add
adc
add
adc
add
adc
add
adc
add
cs
out
add
in
add
in
add
in
add
out
add
in
add
in
add
adc
add
in
add
in
add
add
in
add
adc
add
adc
add
adc
add
adc
add
adc
add
aaa
add
add
dec
in
add
in
add
in
add
in
add
adc
add
in
add
in
add
in
(bad)
jl
cmp
adc
add
adc
add
in
add
adc
add
in
add
add
in
add
in
add
in
add
adc
add
in
add
in
add
in
add
in
add
adc
add
in
add
adc
add
adc
add
adc
add
in
add
adc
add
in
add
in
add
add
jo
jo
jnp
xor
jo
pop
ins
cmp
add
out
pop
add
and
add
and
sbb
add
inc
add
aam
inc
add
pop
xor
and
add
adc
inc
add
sbb
sbb
add
sbb
add
jecxz
add
jecxz
add
in
add
jecxz
add
pop
and
lea
add
inc
mov
pusha
adc
mov
add
out
mov
add
pop
pop
add
jl
cs
adc
add
jecxz
add
jecxz
add
jecxz
add
jecxz
add
add
sbb
cmp
add
loop
add
push
and
pop
adc
add
sbb
add
adc
add
adc
add
jecxz
add
sbb
add
jecxz
add
jecxz
add
jecxz
add
push
xor
popf
loop
add
add
loop
add
loop
add
loop
add
push
sub
sbb
add
adc
add
adc
add
loop
add
loop
add
loop
add
loop
add
add
dec
push
add
sbb
cmp
add
loope
add
adc
sub
add
xor
adc
add
loop
add
sbb
add
loop
add
loop
add
loop
add
adc
sub
cmps
loope
add
adc
add
mov
adc
dec
add
sbb
pop
sbb
pop
sbb
add
sbb
push
sbb
imul
add
add
push
add
push
add
pop
add
adc
xor
or
adc
push
add
dec
add
adc
pop
add
adc
ins
add
adc
add
adc
add
adc
add
adc
pop
add
adc
pop
add
adc
add
add
sbb
add
sbb
push
sbb
pop
sbb
add
add
jp
push
add
dec
add
sbb
pop
sbb
add
ins
add
adc
sbb
adc
add
dec
add
or
add
or
add
sbb
add
sub
pop
xor
add
pop
cs
sbb
mov
pop
cmp
pop
cmp
pop
cmp
lods
adc
fst
sub
add
sbb
xor
pop
add
sbb
mov
jb
lahf
sbb
lahf
sbb
add
ins
add
pop
add
adc
cmp
data16
sbb
add
jo
pop
add
push
add
adc
adc
pop
adc
add
adc
adc
das
adc
add
adc
add
adc
in
pop
add
adc
lock
fist
pop
add
adc
add
adc
sbb
adc
sub
data16
sbb
add
push
add
pop
add
sbb
add
mov
jb
lahf
sbb
lahf
sbb
add
ins
add
pop
add
adc
pop
sbb
mov
dec
add
adc
and
pop
add
daa
add
adc
xor
pop
add
adc
mov
adc
das
adc
add
adc
out
adc
add
adc
add
adc
add
adc
lock
pop
adc
pop
adc
add
sbb
sub
sbb
sbb
sbb
scas
sbb
mov
sbb
add
adc
sbb
sbb
jo
jb
das
adc
das
adc
add
adc
sbb
sbb
sub
adc
add
xor
pop
add
adc
adc
jae
push
add
adc
test
add
mov
and
clc
adc
add
adc
add
adc
add
adc
add
adc
add
sbb
ins
or
add
or
add
sbb
add
add
jo
sbb
add
sub
pop
sbb
add
add
adc
add
add
inc
sbb
mov
dec
add
add
add
lds
xor
add
adc
sbb
inc
add
pop
add
pop
add
mov
outs
je
cmp
pop
add
mov
push
add
pop
add
mov
pop
imul
add
dec
adc
cmp
outs
add
adc
leave
adc
pop
pop
add
xor
pop
pop
add
and
add
sub
data16
das
and
add
pop
popa
add
sub
enter
push
pop
add
imul
xor
push
pop
add
pop
add
sub
add
add
jb
out
push
pop
add
push
xor
int
add
(bad)
push
push
add
push
adc
and
and
hlt
push
pop
add
adc
adc
adc
add
popa
pop
arpl
push
add
pop
push
pop
add
add
pop
add
dec
add
add
push
add
add
sub
add
sbb
push
add
push
pop
add
add
jae
pop
add
imul
lds
add
jae
pop
add
adc
add
add
adc
pop
add
outs
add
adc
pop
add
adc
adc
adc
add
adc
enter
push
add
xor
jno
add
adc
pop
add
add
adc
popa
add
xor
or
adc
push
add
add
ret
outs
ret
inc
jge
pop
ins
mov
add
add
outs
add
pop
addr16
jne
jne
jno
add
aaa
and
add
aaa
jb
in
cmp
push
shl
outs
das
cmp
popf
adc
add
bound
pop
xor
leave
cmp
mov
bound
mov
cmp
ins
add
jb
pop
xor
xor
jnp
and
jne
jne
jno
ins
inc
xor
gs
add
xor
outs
pop
xor
ins
add
leave
cmp
and
pop
ins
jne
gs
fs
(bad)
aas
pop
and
je
outs
fild
add
cmp
pop
and
je
outs
out
jo
imul
jno
daa
and
pop
jb
jno
gs
fs
add
add
add
push
(bad)
jp
pop
push
and
popf
xlat
cmp
add
xchg
push
pop
ja
clc
and
sub
fist
into
jge
aad
pop
mov
or
dec
xlat
mov
push
test
sbb
and
gs
add
aam
movs
add
int
fs
in
out
imul
xor
cmp
and
jmp
xchg
jnp
test
cmp
adc
in
dec
cmps
cmp
cmps
mov
je
bound
rol
sar
fist
xchg
fild
enter
mov
retf
out
leave
dec
pop
sbb
test
jge
aaa
ja
jge
movs
and
js
imul
stos
add
dec
push
dec
cmp
dec
add
add
pop
retf
add
mov
fstp
mov
push
fisubr
std
sub
xor
fiadd
mov
fistp
jl
dec
and
add
nop
popf
test
outs
inc
jp
idiv
pop
inc
sub
and
bound
sbb
(bad)
ss
(bad)
fadd
jle
addr16
sbb
add
add
repnz
jmp
push
loop
movs
jmp
aaa
outs
pop
mov
enter
dec
imul
fisubr
push
jl
fst
jb
call
mov
int3
or
aad
jmp
jo
int
jae
sub
fcom
mov
push
add
xlat
outs
movs
cmp
daa
sahf
dec
inc
mov
rol
sbb
mov
jg
int3
stos
mov
mov
shr
pushf
outs
push
mov
inc
and
xchg
jg
jbe
je
mov
loopne
sahf
pop
ds
xchg
js
fld
imul
repz
inc
cmp
call
pop
jecxz
or
add
bswap
mov
xlat
xor
ss
add
jge
cmp
fist
mov
sub
push
push
sub
mov
dec
fwait
pop
aam
adc
ja
mov
xor
ins
adc
pop
cmp
out
jecxz
outs
adc
lahf
icebp
jo
adc
scas
out
add
add
(bad)
sbb
sets
mov
mul
iret
fidiv
std
and
std
lds
in
jns
pop
and
(bad)
pop
daa
xchg
iret
jmp
lock
std
mov
movs
jae
jo
cs
and
(bad)
jmp
dec
pop
mov
imul
aam
push
xor
nop
adc
cmp
pop
sub
pop
mov
cmp
pop
xchg
lods
xchg
or
pop
dec
jne
mov
popa
ret
add
pushf
mov
or
stc
cli
out
xor
adc
jge
les
add
movs
call
mov
iret
mov
or
pushf
cli
adc
shr
sub
adc
jne
pushf
cdq
add
clc
cmp
sbb
(bad)
jp
ss
inc
jle
in
mov
xor
sti
mov
jb
mov
add
(bad)
sub
js
xchg
dec
sub
cmp
rcl
fistp
mov
repz
sbb
stos
sub
mov
mov
inc
add
sub
iret
retf
dec
inc
mov
add
dec
aaa
bound
stos
ins
(bad)
mov
xlat
(bad)
cmc
popf
lods
jecxz
js
std
add
or
push
jmp
jae
inc
inc
std
xor
sub
add
xchg
jge
mov
xor
pop
sub
pop
enter
add
xchg
pop
(bad)
jo
aad
ins
dec
sbb
push
inc
add
xor
rol
xchg
add
xchg
jo
mov
cmp
sbb
sbb
out
test
sar
mov
je
xchg
sub
xchg
cmps
movs
xor
and
lea
sbb
call
inc
cmp
fist
jmp
sub
pop
std
inc
mov
push
dec
xchg
mov
xor
ins
push
push
adc
push
test
push
or
adc
adc
jno
inc
and
jp
test
out
pop
btr
scas
sbb
fdivr
cmp
sbb
call
jecxz
push
int
jecxz
and
or
(bad)
lahf
sbb
sub
add
and
test
mov
imul
imul
fiadd
enter
fsubr
sbb
add
call
(bad)
jb
lods
pop
fcmove
xor
pop
(bad)
ins
xchg
arpl
mov
or
mov
aas
cmc
adc
lods
leave
enter
vbroadcastss
cwde
cli
or
sti
mov
add
repz
mov
xor
(bad)
scas
dec
or
pop
stos
icebp
push
bound
mov
jb
pop
mov
fcom
stos
add
js
jno
cmp
mov
ss
adc
(bad)
in
cwde
ins
(bad)
vpsraw
and
pop
pop
mov
sbb
adc
sbb
and
fcomp
add
ficomp
mov
imul
xor
cmp
imul
sub
xor
in
sub
pop
and
or
(bad)
xchg
xor
push
arpl
(bad)
out
and
mov
lea
add
stos
push
(bad)
add
sbb
mov
push
xchg
mov
shl
lods
push
aas
retf
mov
mul
scas
sti
dec
das
fild
(bad)
sub
inc
jae
shl
daa
test
add
(bad)
adc
dec
sub
jmp
loope
cmps
mov
add
xor
add
ja
sub
dec
lods
xlat
(bad)
call
sbb
cdq
(bad)
jge
mov
(bad)
outs
pushf
je
inc
mov
xchg
scas
and
cld
pop
pop
adc
mov
xor
mov
fcomp
(bad)
jge
or
fistp
movs
adc
fbstp
jmp
jnp
xor
add
mov
je
lock
dec
adc
push
xchg
imul
lahf
xor
rcl
jmp
sub
mov
imul
punpckhbw
int
shl
push
inc
and
inc
repnz
ret
add
nop
jmp
pop
mov
fs
shl
sbb
repz
retf
lea
mov
jno
adc
(bad)
jmp
int3
in
jp
ja
ds
dec
aaa
not
inc
cmps
mov
mov
push
sti
not
je
or
adc
sbb
sar
cmp
mov
aaa
jno
pushf
cmc
sbb
mov
xchg
xor
aad
xor
push
test
xchg
popa
fsub
(bad)
jbe
(bad)
cld
pop
iret
ret
dec
push
jne
outs
or
or
xchg
xchg
pop
clc
daa
adc
loopne
push
movs
lock
dec
or
mov
mov
pop
lahf
cwde
push
test
(bad)
mov
mov
mov
daa
mov
dec
es
inc
mov
mov
xchg
clc
jmp
jle
push
push
xor
nop
leave
icebp
cmp
sub
sbb
sub
add
jge
(bad)
pop
inc
xchg
addr16
push
and
popa
test
aas
retf
and
add
arpl
shl
xor
mov
xchg
int3
inc
sub
ss
adc
sbb
jecxz
das
sub
jle
dec
xchg
fwait
push
call
jbe
scas
mov
cmps
arpl
pop
call
into
test
bound
xchg
xchg
jbe
add
or
cdq
xchg
mov
add
or
xor
(bad)
xor
cli
push
out
loopne
fdivr
popa
gs
mov
mov
sahf
ret
or
push
ins
leave
jmp
dec
fnstsw
in
loopne
cmps
ret
call
ss
and
add
aas
xor
cs
outs
add
xor
cmp
add
add
add
sbb
(bad)
mov
(bad)
lods
adc
add
(bad)
mov
(bad)
lods
adc
add
(bad)
jge
and
(bad)
ins
adc
jge
add
jge
xor
adc
push
lds
add
adc
add
add
lds
add
adc
add
adc
jo
pop
add
xor
jnp
push
add
adc
adc
add
inc
outs
and
and
pop
cmp
gs
pusha
add
mov
adc
hlt
adc
lock
adc
sub
adc
lock
adc
add
add
push
add
adc
adc
add
dec
pop
outs
mov
xor
jb
cmp
sbb
add
sbb
mov
pop
add
push
add
outs
add
sbb
sbb
pop
sbb
add
pop
pop
add
sbb
pop
outs
add
add
pop
inc
add
pop
jb
int
add
int
add
fst
inc
add
pop
add
pop
pop
add
pop
pop
add
add
cmp
add
sbb
retf
sbb
mov
sbb
popf
sbb
sbb
jo
jb
mov
inc
add
pop
add
add
pop
cmp
ins
sbb
add
sbb
pop
add
push
jb
cmp
push
add
pop
push
add
push
ss
push
pop
add
pop
pop
add
push
add
fst
add
(bad)
push
cmp
adc
inc
add
pop
xor
add
pop
inc
add
push
pop
add
sbb
sbb
xor
add
inc
add
sbb
mov
pop
add
add
sbb
add
jb
outs
sbb
jnp
add
push
outs
add
add
imul
push
add
pop
add
push
add
push
push
pop
add
push
pop
add
adc
js
hlt
adc
add
mov
add
adc
pop
add
sbb
sbb
and
sbb
sbb
add
add
ins
sbb
add
push
add
jb
cmp
sbb
add
adc
pop
add
and
xor
adc
add
add
sbb
add
add
adc
add
and
add
adc
add
adc
add
adc
and
mov
adc
add
push
add
push
add
sbb
sbb
add
push
add
and
dec
adc
add
adc
add
adc
add
add
add
sbb
sbb
add
adc
jge
sbb
sub
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
in
dec
add
adc
clc
adc
add
push
add
add
add
sbb
sbb
xchg
sbb
xchg
sbb
lods
sbb
scas
sbb
sbb
jb
push
add
pop
add
sbb
sbb
jb
push
adc
adc
and
js
and
jp
or
daa
xor
loope
es
in
xor
inc
and
cmp
add
push
inc
sbb
inc
push
inc
dec
push
adc
dec
pop
cld
cmp
lock
push
sub
pop
jo
outs
je
pop
arpl
dec
add
ins
and
xor
es
or
scas
sub
pop
adc
add
adc
add
adc
add
adc
add
sbb
outs
sbb
add
push
add
pop
push
js
cli
push
jne
add
inc
dec
push
and
cld
dec
inc
add
xor
adc
add
push
push
fisub
js
loopne
cmp
xor
bound
xor
and
pop
dec
dec
lea
add
lds
push
popaw
add
add
pop
ss
xor
push
xor
sbb
push
xor
daa
cmp
xor
bound
jo
xor
adc
add
ss
adc
add
adc
add
sbb
add
adc
add
adc
add
adc
add
adc
adc
add
adc
add
adc
add
add
adc
stc
adc
add
sbb
and
pop
add
sbb
leave
adc
mov
add
push
sbb
add
adc
mov
pop
add
push
add
outs
add
adc
jp
pop
add
sbb
add
sbb
retf
add
sbb
das
sbb
add
mov
sbb
push
sbb
out
pop
add
in
addr16
pop
ins
add
sbb
sbb
cld
pop
pop
add
sbb
in
pop
pop
add
adc
lea
add
xor
adc
mov
imul
lahf
adc
pop
pop
add
adc
jo
ins
add
add
pop
jb
das
pop
pop
add
add
pop
add
pop
pop
add
pop
pop
add
pop
add
xor
push
jb
fst
add
mov
add
add
push
add
in
addr16
push
popa
add
push
add
add
pop
add
cmc
push
addr16
push
pop
add
adc
and
pop
add
add
adc
mov
adc
add
pop
add
pop
add
add
pop
add
add
sub
adc
je
pop
add
add
inc
push
pop
add
push
add
push
pop
add
push
imul
mov
pop
add
adc
pop
add
add
adc
jo
sub
adc
add
sbb
push
add
adc
sbb
adc
mov
push
add
add
popf
adc
call
add
push
add
add
outs
add
adc
push
add
adc
push
add
add
outs
add
adc
add
adc
add
adc
push
add
adc
add
adc
add
adc
add
adc
add
adc
push
add
adc
add
adc
push
adc
adc
pop
adc
add
adc
adc
add
xchg
adc
add
adc
add
popa
add
add
xor
add
jo
or
adc
add
adc
add
adc
add
adc
add
adc
mov
add
add
in
adc
cli
adc
adc
loope
dec
add
adc
and
pop
add
add
adc
add
inc
add
dec
add
adc
and
jb
les
add
pop
add
adc
add
add
jo
add
jno
add
mov
add
and
add
jnp
pop
add
adc
fcom
pop
add
adc
push
adc
push
adc
mov
add
adc
and
pop
add
adc
stc
adc
icebp
adc
add
adc
adc
and
dec
add
adc
sub
add
adc
add
adc
adc
mov
pop
add
jb
adc
adc
add
pop
add
adc
add
das
adc
add
add
jle
pop
add
adc
adc
ficom
arpl
mov
adc
lds
pop
add
adc
repz
stc
adc
repnz
int
add
retf
adc
adc
adc
adc
adc
add
pop
pop
je
pop
fs
pop
outs
and
add
pop
jo
mov
add
mov
jb
lahf
lock
jo
pop
pop
outs
jb
push
imul
and
pop
imul
jb
pop
icebp
bound
inc
pop
outs
xor
push
imul
adc
rcl
add
adc
and
push
add
adc
add
adc
add
lock
out
adc
add
adc
adc
add
imul
pop
arpl
add
scas
dec
pop
inc
scas
xor
add
dec
sbb
add
dec
add
mov
add
mov
add
adc
add
adc
add
adc
add
mov
add
mov
add
mov
add
adc
add
add
cmp
mov
add
mov
add
mov
add
mov
add
pop
cs
mov
add
mov
add
mov
add
mov
add
mov
jmp
pop
imul
and
push
add
sbb
sbb
add
pop
add
sbb
sbb
ins
sbb
add
add
xchg
sbb
add
jnp
push
add
arpl
pop
sbb
add
sbb
and
pop
add
pop
pop
add
pop
pop
add
pop
pop
add
xor
fst
add
add
ss
pop
jae
xor
adc
mov
push
pop
jb
xor
add
add
ss
pop
jbe
inc
fs
add
sub
xor
inc
push
xor
gs
pop
outs
retf
sbb
add
add
mov
inc
nop
repnz
out
inc
dec
cwde
jmp
add
pop
push
(bad)
push
bound
pop
data16
pop
push
dec
popa
outs
sub
jb
bound
and
jp
add
es
jne
daa
das
int
add
add
sbb
imul
icebp
push
gs
sbb
popa
pop
outs
mov
adc
pop
add
adc
arpl
pop
sbb
sbb
push
sbb
add
clc
jno
mov
outs
je
inc
and
dec
push
outs
(bad)
clc
pop
ins
ins
inc
outs
add
pop
and
inc
pop
popa
add
jno
and
push
push
je
push
add
fidiv
pop
jb
ss
pop
outs
mov
arpl
push
ss
daa
and
outs
push
in
push
outs
loop
popa
gs
xor
bound
push
pop
ja
inc
pop
je
xor
cmp
pop
fs
adc
add
pop
daa
and
popa
ins
add
mov
imul
in
outs
gs
jecxz
and
jecxz
and
pop
popa
and
push
add
pop
daa
and
push
das
std
pop
popa
and
pop
and
add
mov
out
arpl
std
push
je
clc
(bad)
call
stc
pop
daa
loope
push
gs
push
je
add
jmp
push
jne
cld
pop
ja
in
outs
xor
pusha
jb
stc
arpl
sbb
add
mov
push
je
out
bound
std
pop
ja
loop
outs
bound
pusha
jb
stc
arpl
sbb
add
pop
jae
adc
add
jmp
add
add
or
in
dec
cs
cmp
dec
push
ins
and
cmp
add
outs
ins
in
push
je
inc
fs
in
push
cld
(bad)
push
and
neg
neg
je
mov
pop
popa
and
pop
jae
out
outs
ret
popa
mov
in
data16
(bad)
jmp
dec
outs
jecxz
cmp
add
dec
push
ins
pusha
cmc
cmp
mul
jp
pusha
gs
daa
sub
mov
outs
sub
pop
outs
and
pop
ins
and
arpl
push
out
jb
mov
imul
adc
add
jmp
gs
in
and
in
jbe
out
imul
in
jae
out
outs
repnz
add
jno
add
xor
arpl
in
pop
outs
and
pop
outs
ret
mov
outs
popa
mov
icebp
jno
and
push
test
arpl
jp
arpl
cmp
pop
dec
mov
pop
jb
loop
gs
jecxz
bound
neg
outs
and
pop
outs
xor
outs
popa
retf
sti
pop
add
repnz
jne
mov
jae
loop
je
add
cmc
jno
hlt
neg
lods
in
and
loop
cs
adc
add
icebp
jno
lock
dec
sub
pop
outs
and
pop
outs
xor
pop
jb
cli
push
gs
sbb
add
out
push
test
arpl
jp
arpl
jp
pop
push
xchg
cli
arpl
das
icebp
pop
addr16
add
jno
push
std
pop
outs
xor
pop
outs
xor
pop
jb
cli
push
fst
add
add
pop
jne
mov
jae
cli
pop
je
neg
jecxz
jno
hlt
cmc
pop
lods
jecxz
and
pop
pop
je
pop
add
f2xm1
jno
lock
push
inc
cli
arpl
cmp
arpl
cmp
pop
dec
cmp
and
outs
mov
(bad)
inc
add
std
pop
outs
jo
pop
outs
jae
outs
popa
mov
pop
adc
add
mov
jae
stc
pop
je
neg
and
jno
xor
pop
gs
in
pop
and
arpl
loope
cmc
push
pop
cmp
inc
push
ins
loopne
cmp
cli
out
jb
loop
jb
xor
inc
add
das
in
jns
clc
push
gs
repz
out
jae
div
sub
inc
popa
leave
loope
add
add
mov
pop
dec
sahf
neg
push
inc
push
ins
pusha
icebp
cmp
jp
pop
jb
in
pop
jb
dec
sub
in
pop
imul
adc
js
repz
outs
cmp
arpl
das
repz
outs
add
shl
je
fistp
mov
pop
dec
push
stc
pop
cmp
aas
push
ins
loopne
cmp
fcomip
outs
outs
cmp
pop
push
add
pop
jb
neg
mov
aaa
and
bnd
out
jae
mul
xor
arpl
in
gs
adc
add
mov
pop
dec
sahf
neg
push
aas
push
ins
pusha
icebp
cmp
jp
pop
jb
add
jb
dec
sub
cmc
jno
outs
neg
and
outs
je
mov
gs
pop
jb
in
outs
mov
aas
push
ins
and
(bad)
dec
add
add
mov
popa
cmp
push
and
inc
cmp
lock
arpl
cli
pop
outs
and
pop
bound
mov
imul
jb
out
pop
and
pop
jb
icebp
pop
and
in
jbe
cld
push
add
sbb
add
call
pop
jb
mov
popa
sub
pop
sub
sti
popa
push
out
arpl
mov
loop
jns
cmc
ja
mov
arpl
mov
pop
add
add
out
outs
gs
add
loopne
pop
add
clc
outs
jae
(bad)
push
and
cmc
arpl
mov
bound
cmc
pop
je
std
pop
ins
das
cmc
jno
retf
icebp
pusha
gs
adc
add
cli
push
and
adc
jp
pop
daa
push
mov
bound
pop
pop
arpl
jno
and
pop
outs
add
sbb
imul
xor
push
and
adc
retf
outs
mov
mov
gs
pop
jb
cld
push
ins
lock
add
clc
outs
jae
cld
push
and
scas
adc
cli
loopne
daa
or
push
jb
rep
and
pop
pop
ins
sub
push
je
std
pop
add
cli
pop
je
icebp
pop
outs
add
mov
mov
add
cmp
bound
pop
and
gs
das
loope
and
std
sbb
arpl
adc
add
out
outs
je
mov
jae
repnz
gs
pop
jno
pop
pop
arpl
loopne
jb
sti
push
add
repz
and
loopne
popa
sub
loop
add
sti
lock
and
sti
pop
jae
ficomp
adc
add
push
imul
cld
pop
jae
call
jno
scas
in
jb
mov
js
add
pop
je
mov
popa
das
loopne
and
sti
pop
arpl
pop
and
div
sub
push
je
mov
popa
xor
sbb
add
call
mov
mov
outs
sbb
addr16
mov
jne
hlt
pop
imul
pop
je
mov
gs
pop
and
stc
pop
and
push
pop
outs
sbb
push
and
push
and
jecxz
imul
out
jb
sti
push
popa
mov
icebp
jno
lahf
stc
push
and
pop
arpl
pop
and
pop
popa
add
sub
jmp
pop
and
jae
out
outs
xor
jno
xor
push
imul
out
arpl
cmc
push
cs
add
pop
stc
push
and
stc
pop
arpl
add
lock
popa
sub
call
pop
and
stc
pop
jae
out
outs
xor
push
add
xor
pop
ins
mov
add
ins
cmc
ja
mov
arpl
mov
es
add
xchg
pop
outs
das
in
arpl
mov
gs
hlt
pop
jb
mul
ds
(bad)
jmp
stc
data16
mov
stc
pusha
jo
hlt
outs
jae
stc
pop
and
hlt
arpl
add
add
clc
gs
add
stc
out
push
and
out
pop
fs
pop
jae
fstp
and
data16
sbb
pop
and
out
cmp
push
jae
in
je
push
add
lds
push
fs
pop
arpl
jecxz
popa
popa
repz
gs
cmp
push
and
pop
arpl
add
add
popa
sub
push
and
add
repnz
jb
add
bound
in
pop
outs
mov
addr16
adc
pop
and
neg
mov
icebp
and
jecxz
fs
arpl
hlt
pop
and
fisub
sbb
outs
add
gs
cmp
push
and
not
ins
in
pop
outs
ret
jae
jecxz
je
adc
gs
add
imul
arpl
jns
pop
addr16
lock
jb
call
add
je
gs
sbb
push
and
clc
push
gs
and
cmp
outs
jae
not
shl
sub
mov
adc
add
mul
stc
in
push
and
in
arpl
cmc
pop
das
or
pop
addr16
outs
and
add
add
mul
sub
push
and
jmp
sub
pop
gs
mov
add
(bad)
repnz
mov
add
stc
pop
das
jns
pop
addr16
add
arpl
clc
pop
add
push
and
outs
je
repnz
gs
pop
xor
add
gs
mov
add
mov
add
pop
outs
ins
jmp
out
add
hlt
cmc
pop
outs
fucomip
pop
arpl
mov
popa
and
pop
arpl
in
pop
imul
pop
outs
das
out
arpl
mov
arpl
mul
mov
repnz
outs
cwde
call
pop
gs
add
dec
adc
add
push
data16
jo
pop
gs
jmp
add
and
outs
jne
in
pop
arpl
pop
je
cmc
pop
ins
retf
add
in
jno
sbb
(bad)
(bad)
out
out
gs
repz
gs
pop
jb
adc
add
add
jmp
jb
call
jno
cmp
pop
gs
(bad)
(bad)
cmp
pop
fs
in
pop
arpl
add
out
add
loopne
or
pop
adc
(bad)
jmp
add
add
sbb
adc
or
adc
rcr
add
mov
aas
push
mov
aas
fisubr
sar
fst
add
fst
inc
int
add
add
int
lock
add
push
data16
aas
lea
add
lea
lock
popf
adc
add
adc
add
mov
cmp
dec
adc
add
add
pop
adc
add
stos
cmp
dec
adc
add
adc
add
stos
cmp
jmp
adc
add
sar
add
add
adc
add
fs
fst
add
or
stos
cmp
fst
add
fst
add
int
add
mov
cmp
test
adc
add
adc
add
cmp
gs
cmp
and
add
or
add
dec
sbb
add
ins
jmp
pop
sbb
add
add
scas
cmp
dec
sbb
add
sbb
add
cmp
test
add
sbb
sbb
add
scas
cmp
and
add
inc
ret
fst
add
fst
add
push
jmp
int
add
fst
add
dec
scas
cmp
lea
add
lea
add
add
pushf
pop
add
std
lods
cmp
and
add
icebp
sar
pop
pop
add
dec
pop
add
or
call
add
popf
adc
add
pop
add
and
pop
add
pop
mov
cmp
sbb
pop
add
or
mov
cmp
fst
add
int
add
add
int
add
sub
lods
cmp
int
add
rcl
add
movs
push
add
int
cmp
mov
stos
cmp
sub
add
lods
cmp
icebp
lods
cmp
lea
cmp
dec
push
add
movs
sar
pop
push
add
inc
push
add
jmp
add
add
or
xor
cmp
or
add
add
addr16
or
adc
cmp
fst
add
iret
adc
cmp
inc
stos
cmp
lea
add
ret
pushf
adc
add
mov
call
adc
add
stos
cmp
and
adc
push
adc
jmp
dec
adc
add
or
cmp
dec
adc
add
stos
push
add
dec
adc
add
cmp
xor
adc
add
cmp
(bad)
fst
add
lods
cmp
fst
add
adc
add
adc
add
test
add
add
test
add
cmp
lea
add
cmp
pushf
adc
add
ins
jmp
pop
adc
add
mov
add
add
pop
adc
add
add
xchg
lods
cmp
inc
mov
add
lods
cmp
sbb
lds
add
adc
add
imul
or
add
adc
add
les
add
adc
add
adc
add
adc
add
adc
add
lds
add
add
mov
call
adc
add
scas
cmp
lea
add
pop
adc
add
add
loope
cmp
aad
cmp
sbb
adc
add
add
cmp
dec
adc
add
push
dec
adc
add
adc
add
adc
add
cmp
popf
scas
cmp
int
add
pop
les
add
adc
add
adc
add
jmp
int
add
fst
add
popf
movs
cmp
lea
add
lea
add
popf
adc
add
add
cmp
jno
cmp
lea
add
pop
adc
add
add
popa
scas
cmp
xchg
lods
cmp
std
lods
cmp
popa
cmps
cmp
dec
adc
add
adc
add
imul
or
adc
add
cmp
or
adc
add
adc
add
scas
cmp
int
add
add
fst
add
ficom
add
push
lods
cmp
inc
lods
cmp
jge
cmp
and
add
popf
ret
cmp
lahf
adc
add
ins
jmp
lea
add
popf
adc
add
adc
add
add
pop
adc
add
scas
cmp
dec
adc
add
adc
add
scas
cmp
add
in
lods
cmp
xor
add
cmp
adc
add
adc
add
adc
add
scas
cmp
fst
add
int
add
int
add
in
(bad)
cmp
int
cmp
lea
add
lea
add
lahf
adc
add
cmp
jns
cmp
and
add
ins
pop
cmp
add
dec
sbb
add
add
sbb
add
jp
add
sbb
add
sbb
add
jae
add
(bad)
sbb
add
adc
pop
add
int
add
int
add
fst
add
fst
add
int3
pop
add
int
add
sbb
add
jp
add
cmp
popf
pop
add
adc
pop
add
cmp
add
cmp
imul
sbb
add
add
add
sti
mov
add
xchg
mov
add
mov
add
inc
mov
add
add
cmp
add
mov
ss
push
add
fwait
mov
add
cmp
jmp
popf
push
add
outs
xchg
add
mov
add
sar
add
mov
add
pushf
xor
add
mov
add
adc
add
add
sti
mov
call
xor
or
mov
call
mov
dec
mov
(bad)
fst
ss
adc
jmp
fst
jmp
int
add
jnp
jmp
pop
jl
add
add
jl
add
jl
add
add
adc
jmp
pop
adc
jmp
dec
js
add
js
add
add
jmp
jmp
dec
adc
jmp
sbb
mov
add
mov
adc
jmp
or
mov
add
stos
mov
add
imul
adc
add
jmp
int
add
xchg
mov
add
stos
mov
dec
jecxz
add
mov
dec
mov
call
add
sub
add
mov
dec
add
movs
in
add
mov
call
mov
dec
add
adc
add
push
xor
add
dec
xor
add
adc
add
adc
add
jmp
call
add
push
xor
add
adc
add
add
adc
add
adc
add
add
dec
adc
add
add
add
add
sar
add
sbb
sbb
add
cdq
sar
add
add
mov
adc
add
adc
add
add
or
mov
(bad)
fst
add
popa
mov
dec
adc
add
adc
add
dec
xor
add
add
add
adc
add
mov
call
mov
inc
xor
add
add
sub
add
adc
add
mov
(bad)
fmul
add
adc
add
dec
xor
add
sar
add
adc
add
aad
add
adc
add
add
cmp
int
add
mov
add
fst
add
xor
xor
add
jmp
popf
adc
add
adc
add
adc
add
adc
add
mov
call
add
add
add
mov
call
add
cmps
inc
xor
inc
add
inc
xor
dec
mov
call
mov
dec
and
dec
adc
add
add
adc
add
jmp
int
add
jnp
jmp
popf
adc
add
xor
add
adc
add
lods
jmp
add
lea
add
cmp
add
sbb
add
lods
jmp
pop
sbb
add
lods
jmp
dec
sbb
add
stos
jmp
sbb
xor
add
sbb
add
sbb
add
stos
jmp
fst
add
xchg
cwde
xor
add
pop
add
add
pop
stos
jmp
int
add
jnp
jmp
sbb
xor
add
pop
add
mov
pop
add
cmp
add
bound
add
sbb
add
sbb
add
sti
test
add
sahf
pop
xor
add
add
push
xor
dec
stos
jmp
fst
add
stos
stos
jmp
int
add
sahf
push
xor
add
jmp
int
add
imul
jmp
lea
add
or
xor
add
push
add
adc
push
add
sub
xor
add
cmps
div
pop
push
add
jmp
jmp
dec
push
add
aad
jmp
sbb
cmps
jmp
mov
div
sbb
cmps
jmp
or
cmps
jmp
fst
jmp
int
add
ins
loop
add
adc
jmp
int
add
pop
cmps
jmp
popf
adc
jmp
add
lea
xor
popf
adc
jmp
lea
jmp
pop
adc
jmp
dec
adc
xor
add
cmps
jmp
dec
adc
jmp
sbb
test
dec
push
xor
add
adc
jmp
fst
add
add
les
add
adc
add
jmp
int
add
lea
add
stos
lods
jmp
xchg
shl
popf
adc
add
adc
add
lods
jmp
pop
adc
add
lods
jmp
dec
adc
add
adc
add
stos
jmp
dec
adc
add
add
stos
jmp
or
mov
add
stos
stos
jmp
or
stos
jmp
fst
add
stos
stos
jmp
int
add
mov
adc
add
jmp
int
add
gs
jmp
popf
adc
add
adc
add
add
lea
add
jo
xor
stos
jmp
pop
adc
add
test
add
sbb
add
loop
xor
add
test
add
std
test
add
fwait
stos
jmp
sbb
movs
xor
add
stos
jmp
fst
add
sub
jmp
mov
xor
adc
add
jmp
popf
adc
add
adc
add
cmovb
lods
cmovb
lea
add
cmp
add
lods
jmp
dec
adc
add
lods
jmp
pop
adc
add
add
in
cmp
sbb
stos
jmp
or
adc
add
xor
adc
add
les
add
adc
add
adc
add
adc
add
xor
add
les
add
adc
add
jmp
popf
adc
add
add
popf
adc
add
ret
lea
add
stos
lods
jmp
pop
adc
add
add
add
push
adc
add
add
cmp
imul
add
jne
add
inc
cmp
sbb
ret
or
lods
jmp
fst
add
fst
add
sar
int
add
xor
cmp
fst
add
push
jmp
int
add
test
jbe
add
inc
cmp
add
mov
cmp
popf
adc
add
xor
dec
inc
cmp
pop
sbb
add
mov
add
add
sbb
add
inc
inc
add
add
dec
mov
add
stos
jmp
sbb
sbb
add
sbb
add
cmp
fst
add
stos
stos
jmp
add
int
add
loope
add
fst
add
iret
pop
add
adc
inc
cmp
popf
pop
add
lea
add
lea
add
sbb
pop
add
popf
mov
add
stos
jmp
pop
pop
add
jne
add
mov
pop
add
leave
inc
cmp
cmp
add
pop
add
jmp
inc
add
add
inc
cmp
sbb
mov
add
stos
jmp
fst
add
test
add
cs
add
push
add
xor
inc
cmp
test
cmp
int
add
push
aam
add
aas
cmp
lea
add
ins
mov
add
stos
test
dec
sbb
add
add
lock
add
add
inc
inc
cmp
xor
push
add
scas
out
aas
add
add
in
inc
cmp
stos
cmps
jmp
add
add
adc
fld
add
push
add
fst
add
int
add
int3
adc
jmp
xchg
pop
cmp
scas
adc
add
cmc
inc
cmp
popf
adc
add
lea
add
popf
adc
add
stos
test
call
add
sub
add
dec
adc
add
pop
adc
add
lea
add
sbb
adc
xor
add
adc
xor
adc
add
ficom
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
int3
cmp
lea
add
adc
add
add
movs
jmp
fs
cmp
pop
adc
add
dec
adc
add
(bad)
sbb
adc
add
cmp
add
adc
add
adc
add
adc
add
pop
cmp
outs
or
add
stc
cmp
add
adc
add
adc
add
adc
add
adc
add
add
pop
cmp
outs
or
add
aad
cmp
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
mov
cmp
aas
or
sbb
add
sar
cmp
sbb
adc
add
adc
add
adc
add
adc
add
pop
cmp
add
mov
adc
add
cmp
int
add
popf
adc
add
adc
add
adc
add
pop
cmp
outs
pop
(bad)
sbb
add
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
mov
cmp
das
pop
(bad)
sbb
add
add
lds
cmp
sbb
adc
add
adc
add
adc
add
adc
add
(bad)
sbb
adc
add
cmp
add
adc
add
adc
add
adc
add
adc
add
pop
cmp
lea
add
or
add
add
pop
cmp
add
dec
adc
add
pop
cmp
pop
adc
add
adc
add
cmp
and
add
fstp
add
adc
add
pop
cmp
and
add
mov
adc
add
movs
jmp
aam
cmp
outs
adc
add
cmp
add
adc
add
adc
add
adc
add
add
adc
add
pop
cmp
jg
(bad)
sbb
cmp
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
mov
jmp
cmp
aas
or
add
dec
cmp
or
sbb
add
sbb
add
add
pop
add
fst
add
fst
add
mov
pop
add
ins
cmp
push
jmp
sbb
cmp
popf
pop
add
xor
cmp
stos
mov
dec
add
pop
cmp
(bad)
pop
add
mov
pop
add
adc
cmp
dec
pop
add
sub
cmp
arpl
add
in
cmp
push
pop
add
add
fcomp
and
add
hlt
pop
cmp
adc
add
or
cmp
pop
pop
add
add
cmp
movhps
add
push
add
fst
add
or
push
add
fst
add
pop
cmc
add
push
add
sbb
push
add
stc
cmp
add
push
add
popf
push
add
add
mov
add
outs
adc
add
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
cli
xchg
push
add
dec
pop
cmp
sbb
add
fstp
movhps
add
pop
cmp
ficom
cmp
rcl
cmp
loopne
add
add
push
pop
cmp
rcl
cmp
mov
pop
cmp
xchg
adc
cmp
call
add
pop
cmp
pop
adc
cmp
dec
adc
cmp
pop
adc
cmp
das
adc
add
adc
add
or
add
adc
add
stos
mov
(bad)
jl
cmp
fst
add
add
adc
add
(bad)
sbb
adc
add
cmp
popf
adc
add
adc
add
adc
add
jmp
inc
pop
cmp
pop
adc
add
adc
add
add
adc
add
sub
adc
add
adc
add
adc
add
add
stos
mov
call
adc
add
cmp
jg
(bad)
sbb
adc
add
aas
cmp
fst
add
fst
add
int
add
int
add
popf
adc
add
stos
mov
call
cmp
popf
adc
add
pop
cmp
mov
add
aad
cmp
pop
adc
add
pop
cmp
dec
adc
add
pop
cmp
popa
adc
add
pop
cmp
das
adc
sbb
add
int
cmp
sbb
adc
add
adc
add
adc
add
(bad)
sbb
adc
add
add
cmp
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
mov
adc
add
pop
cmp
pushf
adc
add
cmp
(bad)
adc
add
cmp
pop
adc
add
adc
add
adc
add
adc
add
pop
cmp
add
sbb
pop
cmp
adc
pop
cmp
sbb
pop
cmp
pop
adc
add
pop
cmp
out
add
push
adc
add
adc
add
adc
add
adc
add
add
mov
adc
add
mov
inc
add
cmp
pop
adc
add
cmp
dec
adc
add
adc
add
adc
add
jbe
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
pop
cmp
outs
jne
sbb
adc
add
cmp
add
int
add
int
add
popf
adc
add
adc
add
jmp
loopne
cmp
lea
add
fistp
add
add
dec
cmp
outs
adc
add
jne
cmp
pop
sbb
add
add
dec
sbb
add
sbb
add
add
mov
cmp
add
sbb
dec
cmp
or
add
ror
add
(bad)
sbb
pop
add
add
cmp
fst
add
fst
add
int
add
int
add
popf
pop
add
pushf
pop
add
stos
call
popf
pop
add
pop
dec
cmp
mov
add
push
dec
cmp
jg
(bad)
sbb
add
mov
pop
add
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
add
stos
call
or
dec
cmp
jg
(bad)
sbb
pop
add
pop
sub
add
push
add
fst
add
int
add
int
add
fst
add
fcom
add
push
jmp
pop
dec
cmp
popf
push
add
aaa
dec
cmp
lea
add
add
push
dec
cmp
lahf
push
add
fmul
add
dec
cmp
popa
push
add
or
add
add
xor
push
add
out
inc
cmp
push
push
add
jmp
cmp
and
inc
cmp
adc
add
inc
inc
cmp
pop
push
add
or
add
nop
sbb
push
add
(bad)
cmp
fst
int
add
int
add
fst
add
int3
adc
jmp
cmovbe
add
inc
cmp
mov
cmp
popf
adc
cmp
outs
jno
sbb
add
shr
cmp
dec
adc
add
pop
adc
add
dec
adc
add
cli
xchg
jmp
add
ret
add
jb
sbb
cmp
sbb
adc
add
fst
add
adc
add
adc
add
inc
cmp
fst
add
adc
add
adc
add
adc
add
daa
xor
xchg
adc
add
sbb
adc
add
inc
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
xchg
jmp
adc
xor
das
sbb
add
lds
add
adc
add
adc
add
adc
add
adc
add
sub
fst
add
sbb
xor
add
scas
sbb
sbb
inc
cmp
lea
add
lea
add
popf
adc
add
adc
add
jmp
pop
adc
add
add
mov
adc
add
sub
dec
adc
add
sub
cli
xchg
jmp
sbb
adc
add
retf
cmp
dec
xchg
jmp
cmc
data16
add
add
adc
add
adc
add
adc
add
cmp
outs
sbb
add
and
adc
add
cmp
popf
adc
add
adc
add
jmp
iret
and
stos
xchg
jmp
(bad)
and
jg
(bad)
sbb
add
inc
inc
cmp
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
add
stos
xchg
jmp
test
xor
das
pop
(bad)
sbb
add
fld
add
adc
add
adc
add
adc
add
adc
add
adc
add
daa
xor
int
add
movs
daa
xor
pushf
adc
add
daa
xor
lea
add
aam
xor
add
sahf
adc
add
add
es
pusha
adc
add
add
mov
xor
bound
add
ins
es
das
push
(bad)
sbb
add
cmp
sbb
adc
add
adc
add
adc
add
daa
xor
stos
xchg
jmp
dec
daa
xor
add
outs
adc
add
jno
cmp
int
add
int
add
popf
adc
add
adc
add
jmp
adc
add
add
or
xor
dec
sbb
add
daa
xor
pop
sbb
add
es
push
sbb
add
es
and
add
pop
daa
xor
add
adc
add
cmp
xor
and
add
add
xor
adc
daa
xor
jg
(bad)
sbb
pop
add
lds
add
pop
add
fst
add
fst
add
int
add
int
add
pushf
pop
add
stos
jmp
scas
sbb
sbb
cmp
lea
add
lea
add
pop
pop
add
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
jmp
sbb
sbb
add
pop
add
or
pop
add
sbb
pop
add
or
add
stos
jmp
fst
add
dec
es
int3
push
add
inc
es
mov
push
add
jno
cmp
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
pushf
push
add
stos
call
xor
pop
push
add
pop
and
add
(bad)
sbb
add
cmp
push
add
dec
push
add
dec
push
add
sbb
push
add
or
add
mov
jmp
out
call
and
add
or
add
into
and
jg
(bad)
sbb
adc
cmp
fst
add
int
add
int
add
popf
adc
add
stos
call
xor
popf
adc
xor
stos
call
xor
pop
adc
xor
sub
jmp
call
xor
add
jmp
add
adc
xor
stos
call
xor
add
and
stos
call
xor
out
add
icebp
and
stos
call
xor
leave
adc
add
xor
scas
adc
add
cmp
popf
adc
add
adc
add
add
adc
add
and
add
jmp
add
add
and
add
lock
add
adc
add
xor
add
adc
add
adc
add
adc
add
jmp
inc
and
add
(bad)
sbb
adc
add
add
push
cmp
fst
add
int
add
int
add
popf
adc
add
adc
add
and
jmp
adc
add
rcl
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
jmp
xor
or
add
xor
jg
(bad)
sbb
adc
add
cmp
or
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
adc
add
adc
add
adc
add
adc
add
jmp
add
nop
sbb
add
adc
add
add
dec
adc
add
adc
add
add
mov
jmp
gs
sbb
add
rcl
fst
add
fst
add
int
add
int
add
fst
add
fcom
add
push
jmp
xchg
sbb
add
cmp
lea
add
popf
adc
add
adc
add
adc
add
in
jmp
gs
sbb
add
adc
add
add
sbb
adc
add
adc
add
and
or
and
add
jg
nop
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
gs
sbb
cmp
lea
add
lea
add
pop
sbb
add
add
dec
sbb
add
add
in
jmp
sbb
add
add
xor
aas
adc
add
in
cmp
or
sbb
add
sbb
add
pop
add
jg
(bad)
sbb
pop
add
cmp
pop
add
fst
add
int
add
int
add
popf
pop
add
pushf
pop
add
stos
jmp
popf
pop
add
push
add
xor
pop
pop
add
nop
xor
dec
pop
add
js
xor
popa
pop
add
xor
add
add
ins
xor
push
pop
add
xchg
xor
push
pop
add
and
xor
call
add
xor
cmp
jmp
adc
add
xor
add
push
add
int
add
int
add
popf
push
add
popf
push
add
mov
add
mov
jmp
call
add
stos
call
add
jg
nop
sbb
add
inc
push
cmp
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
stos
out
(bad)
cmp
xor
add
sbb
and
stos
out
push
xor
fist
xor
stos
out
jmp
sbb
add
pop
push
xor
rcl
xor
mov
sbb
add
out
sbb
add
cmp
xor
xchg
adc
xor
popa
adc
xor
push
adc
mov
adc
xor
pop
adc
xor
aas
bound
add
cmp
or
adc
add
or
adc
add
stos
call
xor
int
add
ins
sbb
nop
sbb
adc
add
adc
add
add
adc
add
adc
add
das
xor
pop
adc
add
xor
outs
or
add
cmp
adc
add
add
dec
adc
add
adc
add
add
mov
jmp
or
add
ror
fst
add
add
fst
add
int
add
int
add
fst
add
fcom
add
push
jmp
or
sbb
cmp
lea
add
popf
adc
add
adc
add
adc
add
loop
(bad)
stc
das
xor
dec
adc
add
or
sbb
add
jns
cmp
add
sbb
adc
add
adc
add
adc
add
xor
cmp
jmp
or
add
jge
cmp
fst
add
int
add
int
add
popf
adc
add
adc
add
xor
jg
(bad)
sbb
or
add
add
dec
adc
add
add
pop
adc
add
add
jecxz
jmp
xor
sbb
cs
or
cs
jg
(bad)
sbb
adc
add
dec
cmp
or
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
add
adc
add
cs
pushf
adc
add
cs
scas
push
(bad)
sbb
dec
cmp
lea
add
lea
add
pop
adc
add
add
dec
adc
add
add
in
call
das
xor
dec
adc
add
cs
aas
push
(bad)
sbb
adc
add
cmp
or
adc
add
add
adc
add
adc
add
(bad)
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
das
xor
call
add
xor
pop
sbb
add
xor
dec
sbb
add
xor
add
pop
sbb
add
xor
dec
sbb
add
xor
cli
jmp
call
das
xor
adc
add
das
das
xor
and
add
addr16
xor
adc
add
pop
das
xor
out
add
call
pop
add
adc
pop
add
push
das
xor
fcom
add
push
das
xor
jp
jmp
pop
add
add
sub
xor
pushf
pop
add
out
xor
(bad)
pop
add
loopne
xor
pop
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
jmp
xor
adc
sub
add
dec
cs
adc
cs
out
add
cmp
add
(bad)
sbb
dec
cmp
fst
add
int
add
int
add
popf
push
add
popf
push
add
mov
add
mov
jmp
push
add
test
xor
mov
add
jge
xor
pop
push
add
jne
xor
outs
adc
add
cmp
dec
push
add
dec
push
add
sbb
add
push
add
or
add
call
add
sub
jg
(bad)
sbb
adc
cmp
int
add
fst
add
int
add
int
add
pushf
adc
(bad)
sbb
dec
cmp
popf
adc
add
lea
add
add
pop
adc
add
sub
jmp
adc
xor
dec
adc
xor
sbb
add
mov
adc
xor
and
xor
adc
xor
loope
add
call
add
xor
lds
add
sub
aam
add
add
jo
xor
movs
adc
add
adc
add
adc
add
adc
add
xor
cmp
jmp
adc
add
adc
add
xor
adc
add
adc
add
adc
add
add
stos
jmp
inc
add
adc
add
xor
fst
add
inc
sub
add
sti
sub
(bad)
sbb
adc
add
push
cmp
popf
adc
add
adc
add
adc
add
jmp
adc
add
sub
add
add
sub
pop
adc
add
add
sub
dec
adc
add
sub
and
add
stos
sub
add
adc
add
sub
add
cvtps2pi
adc
add
or
add
jo
xor
aam
add
(bad)
add
adc
add
adc
add
adc
add
adc
add
add
jmp
push
nop
sbb
add
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
jmp
call
push
nop
sbb
add
lds
add
adc
add
adc
add
adc
add
adc
add
add
nop
sbb
adc
add
dec
cmp
int
add
int
add
popf
adc
add
adc
add
jmp
adc
add
sub
pop
adc
add
sub
dec
adc
add
xor
pop
adc
add
xor
push
adc
add
sub
push
adc
add
xor
add
movups
add
sub
sbb
sub
stos
in
jmp
adc
add
adc
add
sub
fst
add
lds
xor
into
adc
add
sub
mov
sub
nop
adc
add
adc
add
xor
xchg
adc
add
xor
sbb
add
add
sbb
add
xor
arpl
add
jo
xor
push
sbb
add
xor
sub
add
xchg
sti
xor
sbb
add
arpl
xor
or
add
dec
sti
xor
adc
add
cmp
xor
jecxz
add
mov
pop
add
mov
xor
iret
pop
add
les
add
push
cmp
add
mov
pop
add
rcl
add
pop
add
mov
add
pop
cmp
push
pop
add
outs
push
cmp
inc
pop
add
addr16
cmp
ja
add
nop
pop
cmp
inc
pop
add
jge
cmp
push
pop
add
push
pop
cmp
dec
pop
add
and
add
add
cmc
push
cmp
or
add
add
in
cmp
jge
add
adc
ins
sbb
add
push
add
je
cmp
ret
push
add
cmps
push
cmp
rcl
add
push
cmp
ret
push
add
clc
push
cmp
sbb
add
cmp
jb
add
sub
sbb
add
push
cmp
je
add
mov
push
add
pop
push
add
add
ss
add
dec
push
add
dec
push
add
pushf
push
cmp
cmp
add
xchg
push
cmp
imul
cmp
jp
add
mov
add
adc
cmp
fcom
cmp
test
push
cmp
sahf
adc
cmp
icebp
adc
cmp
loopne
add
lods
push
cmp
jae
add
add
imul
bound
add
dec
push
cmp
jne
add
fst
add
add
in
push
cmp
push
adc
cmp
cmp
cmp
cmp
cmp
call
push
cmp
pop
sbb
add
cmp
push
add
dec
push
cmp
xchg
add
fst
add
adc
add
add
adc
add
adc
add
add
popf
adc
add
call
add
popf
adc
add
mov
add
popf
sbb
add
add
adc
adc
add
adc
add
add
and
adc
add
add
add
fcom
add
sbb
add
add
sbb
add
cmp
adc
add
cmp
fst
add
fst
add
int
add
int3
adc
add
jmp
adc
add
adc
add
add
push
cmp
pop
adc
add
add
add
jns
cmp
pusha
adc
add
adc
add
sbb
sbb
xor
add
adc
add
adc
add
adc
add
(bad)
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
add
jmp
adc
add
pop
cmp
lea
add
or
add
add
add
cmp
dec
adc
add
push
cmp
popa
adc
add
push
cmp
push
adc
add
cmp
and
add
in
cmp
stos
mov
jmp
adc
add
adc
add
push
cmp
add
fst
add
ret
push
cmp
into
adc
add
adc
add
adc
add
push
cmp
mov
push
cmp
scas
push
(bad)
sbb
xor
add
adc
add
adc
add
add
dec
adc
add
(bad)
sbb
add
xor
adc
add
add
add
sbb
adc
add
adc
add
push
cmp
or
push
cmp
fst
add
and
add
adc
add
push
cmp
ficom
add
inc
push
cmp
rcl
add
cmp
adc
add
push
cmp
xchg
adc
add
cmp
sahf
adc
add
pop
cmp
add
lea
add
push
pop
cmp
sbb
add
pop
cmp
push
sbb
add
pop
cmp
sbb
jmp
sbb
add
sbb
add
sbb
add
pop
cmp
sbb
add
sbb
add
add
add
pop
add
jle
cmp
rcl
add
fistp
loop
add
add
aam
cmp
aad
add
or
cmp
movs
pop
add
in
cmp
scas
sbb
sbb
cmp
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
outs
sbb
add
xor
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
add
call
add
pop
cmp
fcom
add
inc
pop
cmp
iret
push
add
in
pop
cmp
fist
add
es
cmp
rcl
add
push
pop
cmp
mov
pop
cmp
xchg
push
add
push
pop
cmp
mov
push
cmp
mov
add
leave
push
cmp
cmp
jmp
push
add
add
ins
push
cmp
pop
push
add
es
cmp
dec
push
add
and
add
add
pop
push
cmp
adc
add
push
push
cmp
and
add
ror
adc
add
retf
add
adc
cmp
rcl
cmp
les
cmp
xlat
adc
cmp
cmps
adc
cmp
add
cdq
adc
cmp
mov
cmp
fwait
adc
cmp
push
add
hlt
dec
cmp
push
adc
cmp
dec
adc
cmp
das
adc
add
cmp
sbb
adc
add
sbb
adc
add
outs
adc
add
add
xor
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
adc
add
adc
add
cmp
(bad)
adc
add
cmp
pop
adc
add
add
add
fs
cmp
pusha
adc
add
add
pop
push
cmp
add
and
add
adc
add
cmp
add
add
cmp
add
add
and
jmp
jmp
add
adc
add
cmp
fcom
add
xchg
push
cmp
int3
adc
add
cmp
sahf
adc
add
adc
add
cmp
mov
push
cmp
mov
add
add
mov
adc
add
push
cmp
outs
adc
add
gs
add
add
dec
adc
add
add
sbb
adc
add
add
das
adc
sbb
add
xchg
cmp
adc
add
inc
xor
add
fst
add
int
add
int3
adc
add
push
cmp
add
int
add
mov
cmp
pushf
adc
add
pop
cmp
lea
add
fcomp
add
pop
cmp
xchg
adc
add
cmp
pop
adc
add
adc
add
cmp
bound
add
jno
cmp
push
adc
add
add
and
add
jp
cmp
pop
adc
add
pop
cmp
add
add
adc
add
pop
cmp
call
adc
add
adc
add
cmp
retf
add
adc
add
pop
cmp
int3
adc
add
cmp
mov
pop
cmp
mov
add
popf
adc
add
pop
cmp
push
adc
add
add
inc
adc
add
pop
cmp
add
push
adc
add
pop
cmp
inc
adc
add
pop
cmp
adc
add
or
add
add
or
adc
add
adc
add
adc
add
adc
add
pop
cmp
jp
add
into
pop
cmp
fcom
add
int
add
mov
adc
add
add
adc
add
cmp
jno
add
pop
push
cmp
bound
add
pop
sbb
add
add
dec
sbb
add
add
sub
add
push
cmp
inc
sbb
add
cmp
adc
add
or
sbb
add
push
cmp
adc
add
xchg
push
cmp
loop
add
dec
push
cmp
add
jnp
add
sub
add
pop
add
test
jmp
pop
add
gs
jmp
pop
add
lds
add
jmp
cmp
pop
pop
add
and
jmp
cmp
pop
pop
add
add
jmp
cmp
sbb
add
add
add
jmp
cmp
add
add
push
pop
add
sbb
add
or
add
mov
cmp
int
add
mov
push
add
fcom
add
inc
popa
cmp
ret
push
add
(bad)
push
add
xchg
push
add
pushf
push
add
inc
popa
cmp
mov
sbb
add
add
cmp
add
jg
add
jo
add
jae
add
dec
push
add
aad
cmp
xor
add
aaa
push
add
ss
add
sbb
add
in
cmp
stos
out
(bad)
std
dec
cmp
sbb
dec
cmp
or
add
or
adc
cmp
into
adc
cmp
loope
add
imul
add
add
adc
add
gs
cmp
lea
inc
add
adc
add
mov
cmp
jg
nop
sbb
add
jge
cmp
pop
adc
cmp
dec
adc
add
sbb
adc
jmp
adc
cmp
add
or
dec
cmp
fist
add
dec
cmp
into
adc
add
dec
cmp
loope
add
mov
cmp
rcl
add
dec
cmp
mov
dec
cmp
xchg
adc
add
dec
cmp
test
add
cmp
xchg
adc
add
cmp
addr16
add
jle
add
add
lds
add
add
add
mov
adc
add
cmp
and
add
add
int3
jle
add
jle
add
adc
add
cmp
iret
adc
add
adc
add
jle
add
adc
add
jle
add
adc
add
adc
add
adc
add
add
adc
add
(bad)
sbb
add
and
adc
add
add
pop
adc
add
add
dec
adc
add
add
loope
call
add
jg
add
add
aas
jle
add
adc
add
adc
add
jle
add
adc
add
add
jle
add
adc
add
cmp
rcl
add
sbb
add
jmp
in
(bad)
jnp
cmp
pushf
adc
add
cmp
stos
in
dec
cmp
pop
adc
add
cmp
sub
jmp
adc
add
jg
add
jecxz
(bad)
jmp
cmp
and
add
adc
add
add
jle
add
add
add
add
jle
add
adc
add
cmp
stos
jecxz
(bad)
fstp
add
adc
add
jecxz
jmp
adc
add
jge
add
jge
add
cmp
stos
in
dec
cmp
dec
adc
add
add
in
call
adc
add
cmp
jmp
add
add
xchg
jge
add
jge
add
add
in
dec
adc
add
jl
add
jge
add
add
and
add
jmp
add
adc
add
adc
add
adc
add
adc
add
add
int3
jmp
sbb
add
(bad)
sbb
add
stc
pop
cmp
sbb
sbb
add
sbb
add
sbb
add
add
push
cmp
fst
add
loope
cmp
int
add
retf
add
pop
add
pop
push
cmp
into
pop
add
add
add
push
cmp
nop
pop
add
not
mov
push
cmp
outs
or
add
mov
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
add
dec
pop
add
das
or
sbb
add
add
pop
add
or
pop
add
sbb
pop
add
or
add
cmp
jmp
push
add
popa
push
cmp
fst
add
sub
int
add
xchg
push
cmp
popf
push
add
adc
push
add
mov
push
add
add
lahf
js
add
js
add
add
push
js
add
enter
jp
add
add
mov
cmp
dec
push
add
jno
cmp
pop
push
add
jns
cmp
push
push
add
and
add
push
add
lahf
jp
add
push
add
cwde
jp
add
adc
cmp
iret
adc
cmp
add
fist
cmp
aam
add
and
cmp
cmps
adc
cmp
xchg
adc
cmp
mov
cmp
cwde
adc
cmp
jg
(bad)
sbb
add
pop
pop
cmp
dec
adc
add
pop
adc
add
dec
adc
add
stos
enter
js
add
add
ja
add
cmp
unpckhps
add
ja
add
(bad)
sbb
adc
add
cmp
fst
add
adc
add
adc
add
adc
add
adc
add
ja
add
(bad)
sbb
cmp
lea
add
add
pop
adc
add
add
add
dec
adc
add
add
retf
jmp
adc
add
cmp
sbb
add
xchg
jnp
add
adc
add
adc
add
imul
fst
add
int
add
int
add
fst
add
fcom
add
push
jmp
adc
add
add
cmp
mov
add
dec
jnp
add
jp
add
(bad)
sbb
pop
cmp
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
adc
sbb
pop
cmp
or
adc
add
adc
add
adc
add
add
retf
cmp
add
adc
add
adc
add
cmp
int
add
mov
cmp
sahf
adc
add
adc
add
cmp
popf
adc
add
cmp
xchg
adc
add
int3
jmp
adc
add
int3
jmp
adc
add
add
cmp
push
adc
add
nop
sbb
adc
add
cmp
sbb
adc
add
adc
add
adc
add
adc
add
cmp
mov
adc
add
pop
cmp
popf
adc
add
adc
add
adc
add
stos
int3
jmp
xor
add
in
pop
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
stos
int3
jmp
ss
sbb
add
pop
pop
cmp
or
adc
add
adc
add
adc
add
adc
add
adc
add
add
cmp
sbb
adc
add
cmp
popf
adc
add
adc
add
adc
add
jmp
sbb
add
sbb
add
imul
add
adc
add
xor
add
sbb
add
add
sbb
add
sbb
add
fucomi
call
adc
add
in
cmp
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
mov
add
scas
adc
sbb
dec
cmp
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
add
dec
pop
add
sbb
jmp
pop
add
jmp
cmp
sbb
add
adc
add
pop
add
cmp
cmp
push
pop
add
or
add
pop
add
jb
cmp
ficom
add
jb
cmp
iret
push
add
jb
cmp
fcom
add
mov
cmp
int
add
mov
cmp
jp
jmp
add
cmp
xchg
add
bound
add
cmp
cmp
jmp
push
add
mov
push
add
ret
cmp
dec
push
add
retf
cmp
sbb
cmp
das
xor
add
cmp
sbb
push
add
or
adc
fst
add
outs
xor
add
inc
cmp
int
add
int
add
popf
adc
add
lea
add
call
add
arpl
add
add
cmp
dec
adc
cmp
pop
adc
cmp
push
adc
cmp
add
and
cmp
adc
cmp
and
cmp
adc
arpl
add
adc
add
arpl
add
adc
add
arpl
add
adc
add
cmp
push
jmp
adc
add
cmp
scas
xor
add
adc
add
add
adc
add
add
dec
adc
add
(bad)
sbb
add
mov
cmp
dec
adc
add
add
sbb
adc
add
adc
add
inc
cmp
or
inc
cmp
fcom
add
call
add
adc
add
inc
cmp
add
rcl
add
outs
inc
cmp
mov
inc
cmp
xchg
adc
add
adc
add
cmp
xchg
adc
add
cmp
pusha
adc
add
adc
add
adc
add
adc
add
adc
add
cmp
stos
shr
inc
inc
cmp
sbb
add
adc
add
inc
cmp
cmp
jmp
adc
add
cmp
loope
add
xchg
inc
cmp
scas
sbb
add
adc
add
adc
add
adc
add
jmp
adc
add
dec
cmp
dec
adc
add
add
dec
cmp
pop
adc
add
cmp
jmp
add
adc
add
cmp
adc
add
jle
cmp
jg
(bad)
sbb
adc
add
cmp
fst
add
fst
add
int
add
int
add
fst
add
fcom
add
push
jmp
push
(bad)
sbb
cmp
add
lea
add
popf
adc
add
adc
add
adc
add
aam
(bad)
mov
adc
add
cmp
pop
adc
add
add
dec
adc
add
adc
add
inc
cmp
or
retf
sbb
sysenter
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
cmp
add
adc
add
adc
add
adc
add
jmp
adc
add
dec
cmp
sub
jmp
sbb
add
dec
data16
dec
sbb
add
add
sbb
add
sbb
add
add
call
add
dec
cmp
cmp
jmp
sbb
add
mov
cmp
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
mov
add
mov
jmp
pop
add
jb
cmp
mov
add
add
mov
add
add
jp
cmp
or
jmp
pop
add
and
add
sbb
sbb
pop
add
shl
or
pop
add
sbb
pop
add
or
pop
add
cmp
jmp
push
add
sbb
cmp
call
add
jmp
add
jmp
call
cmp
call
add
inc
cmp
cmp
jmp
call
cmp
sbb
jmp
out
jmp
out
call
inc
cmp
stos
out
(bad)
sti
inc
cmp
call
add
add
inc
cmp
cmp
jmp
out
call
out
jmp
cmp
push
jmp
out
call
call
cmp
call
add
inc
cmp
cmp
jmp
call
cmp
sbb
jmp
add
out
jmp
inc
cmp
cli
out
call
cmp
stos
call
cmp
call
add
aas
cmp
cmp
jmp
call
cmp
call
add
adc
add
adc
add
adc
add
add
adc
add
jmp
in
jmp
in
jmp
adc
add
add
les
add
adc
add
cmp
dec
adc
add
adc
add
rol
or
adc
add
adc
add
adc
add
add
js
add
adc
add
adc
add
js
add
adc
add
adc
add
inc
cmp
lea
add
cs
cmp
jg
(bad)
sbb
add
test
adc
add
add
dec
adc
add
add
sbb
adc
add
add
dec
cmp
sbb
dec
cmp
or
add
push
adc
add
adc
add
dec
cmp
loope
add
or
add
adc
add
dec
cmp
mov
dec
cmp
lea
add
or
add
dec
cmp
lea
add
add
add
add
add
std
dec
cmp
dec
adc
add
dec
cmp
aas
daa
nop
sbb
add
std
cmp
dec
adc
add
adc
add
adc
add
add
stos
jmp
push
jmp
dec
cmp
jg
nop
sbb
adc
add
jbe
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
dec
cmp
popf
adc
add
cmp
mov
add
jo
cmp
pop
adc
add
cmp
dec
adc
add
cmp
pop
adc
add
adc
add
cmp
pop
adc
add
adc
add
cmp
pop
adc
add
cmp
movups
add
add
add
adc
add
dec
cmp
(bad)
adc
add
adc
add
adc
add
inc
cmp
stos
adc
add
adc
add
adc
add
adc
add
sbb
add
cmp
sbb
add
add
add
sub
cmp
add
dec
sbb
add
sbb
add
cmp
prefetchnta
add
cmp
jne
add
test
cmp
add
add
cmp
add
dec
cmp
(bad)
pop
add
idiv
cmp
fist
add
daa
cmp
enter
and
cmp
fwait
pop
add
pop
cmp
enter
push
cmp
jge
add
add
ret
cmp
add
lods
cmp
add
cmp
add
and
add
pop
cmp
xor
add
sbb
cmp
pop
pop
add
sbb
cmp
movhps
add
cmp
sbb
add
cmp
movhps
add
cmp
xchg
add
jnp
cmp
iret
push
add
in
cmp
add
test
cmp
iret
push
add
fidivr
add
xlat
cmp
add
(bad)
cmp
add
cmp
outs
and
add
jno
add
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
jmp
add
cmp
add
add
add
in
cmp
pop
push
add
fidivr
cmp
push
push
add
idiv
cmp
rcl
cmp
outs
and
add
jno
add
adc
add
popf
adc
add
lea
add
call
add
cmp
add
add
sub
add
add
add
push
dec
cmp
aas
and
add
jo
add
add
sbb
adc
add
or
adc
nop
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
adc
add
add
dec
cmp
stos
in
(bad)
std
dec
cmp
lahf
adc
add
inc
cmp
stos
in
push
inc
cmp
popa
adc
add
add
mov
sbb
jmp
adc
add
jecxz
dec
inc
cmp
adc
add
mov
cmp
pop
adc
add
inc
cmp
adc
add
fiadd
add
jmp
inc
cmp
fst
add
xchg
inc
cmp
retf
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
cmp
inc
adc
add
add
add
inc
cmp
inc
adc
add
add
inc
cmp
and
add
pop
inc
cmp
inc
adc
add
cmp
ja
add
xchg
inc
cmp
push
adc
add
add
adc
add
cmp
aam
add
repnz
cmp
jnp
add
das
inc
cmp
retf
add
inc
cmp
mov
inc
cmp
lods
adc
add
cmp
jg
add
retf
dec
cmp
add
outs
sbb
add
add
and
add
add
inc
inc
cmp
inc
adc
add
cmp
xor
add
mov
add
add
pop
inc
cmp
xor
add
test
add
add
xor
jbe
add
mov
sbb
add
sbb
add
cmp
stos
adc
add
add
cmp
mov
inc
cmp
in
adc
add
inc
cmp
fcom
add
pop
inc
cmp
outs
sbb
add
inc
cmp
xchg
adc
add
inc
cmp
jno
add
cmovae
add
add
call
adc
add
inc
cmp
and
add
fiadd
add
add
stos
inc
cmp
in
add
sub
add
add
fild
add
add
fadd
add
add
adc
adc
add
adc
add
inc
cmp
stos
adc
add
inc
cmp
fst
add
adc
xchg
adc
add
inc
cmp
pop
sbb
add
dec
cmp
dec
sbb
add
dec
cmp
mov
dec
cmp
push
sbb
add
add
dec
cmp
mov
dec
cmp
xchg
adc
add
dec
cmp
adc
add
dec
cmp
push
adc
add
dec
cmp
jecxz
add
scas
dec
cmp
(bad)
pop
add
test
cmp
sub
add
retf
add
sbb
add
js
add
sbb
add
cmp
sbb
add
or
add
ja
add
add
pop
add
pop
ja
add
add
sub
add
add
adc
adc
add
ja
add
add
adc
add
ja
add
ja
add
add
mov
adc
add
jo
add
pop
add
sbb
add
push
add
add
pop
add
add
jle
cmp
or
add
fld
add
outs
cmp
int
add
cmp
add
jmp
push
add
pshufw
call
add
ja
add
(bad)
sbb
add
and
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
add
sbb
add
aas
adc
add
push
add
sbb
push
add
or
adc
add
stos
out
dec
cmp
fst
cmp
int3
adc
cmp
lahf
adc
cmp
mov
cmp
sahf
adc
cmp
mov
mov
adc
cmp
dec
adc
cmp
pop
adc
cmp
push
adc
cmp
push
adc
cmp
push
adc
cmp
push
adc
cmp
push
adc
cmp
ficom
add
adc
add
adc
add
jb
add
add
adc
add
jb
add
jae
add
jae
add
jno
add
jno
add
add
jmp
cmp
dec
adc
add
outs
cmp
pop
adc
add
adc
add
outs
cmp
push
adc
add
adc
add
adc
add
add
outs
cmp
or
add
outs
cmp
ficom
add
retf
add
adc
add
cmp
mov
outs
cmp
lods
adc
add
adc
add
outs
cmp
lods
adc
add
outs
cmp
adc
cmp
ins
adc
add
outs
cmp
jge
add
mov
adc
add
and
outs
cmp
dec
adc
add
adc
add
outs
cmp
push
adc
add
adc
add
ins
cmp
js
add
out
cmp
mov
add
nop
outs
cmp
js
add
jge
cmp
lods
adc
add
outs
cmp
pushf
adc
add
cmp
out
adc
add
add
add
pushf
jo
add
add
xchg
jo
add
add
xchg
jbe
add
add
pop
jbe
add
add
cmp
add
adc
add
cmp
and
add
inc
jbe
add
adc
add
jbe
add
adc
add
jne
add
add
push
je
add
add
into
jne
add
add
sbb
add
add
adc
add
cmp
xlat
adc
add
jne
add
add
cmp
add
adc
add
jne
add
adc
add
je
add
add
or
adc
add
jne
add
add
repz
add
jne
add
jne
add
adc
add
jne
add
add
add
pcmpeqw
add
add
call
adc
add
adc
add
adc
add
adc
add
adc
add
add
aam
cmp
movups
add
jne
add
adc
add
jne
add
add
xor
adc
add
jae
add
add
add
mov
sbb
add
add
shl
add
call
add
pop
add
mov
cmp
cmp
add
in
mov
add
pop
add
out
cmp
sbb
add
mov
add
xor
add
outs
mov
add
pop
add
add
push
pop
add
movs
mov
add
pop
add
mov
sbb
add
sbb
add
add
mov
add
mov
add
add
xchg
jmp
push
pop
add
nop
mov
add
add
mov
pop
add
cmc
mov
add
add
pop
add
out
mov
add
push
add
sti
mov
add
push
add
fs
add
push
add
xchg
mov
add
push
add
pop
mov
add
mov
add
mov
add
mov
add
mov
add
add
sub
add
push
mov
add
add
add
dec
mov
add
add
dec
mov
add
add
inc
mov
add
add
fidiv
add
push
scas
cmp
(bad)
adc
cmp
int3
adc
cmp
rcl
add
adc
cmp
mov
mov
add
mov
add
adc
cmp
add
lahf
adc
cmp
xchg
cmp
pop
adc
cmp
dec
adc
cmp
pop
adc
cmp
dec
adc
cmp
pop
adc
cmp
sub
add
(bad)
scas
cmp
pop
adc
cmp
outs
sbb
add
cmp
fist
add
add
add
add
pushf
mov
add
adc
add
cmp
mov
add
shr
add
adc
add
lods
cmp
lahf
adc
add
cmp
(bad)
adc
add
cmp
pop
adc
add
add
jnp
cmp
pop
adc
add
adc
add
cmp
pop
adc
add
add
adc
add
mov
add
xchg
sar
pop
sbb
add
adc
add
add
adc
add
sar
mov
add
cmp
cmp
iret
adc
add
sar
lahf
adc
add
cmp
in
add
js
cmp
lahf
adc
add
sbb
add
sbb
add
add
mov
add
and
add
pop
sar
sub
add
sbb
cmp
pop
sbb
add
cmp
dec
sbb
add
sar
fst
add
jg
cmp
into
adc
add
cmp
and
add
loopne
cmp
adc
add
or
adc
add
adc
add
add
adc
add
mov
add
add
cmp
inc
sbb
add
cmp
push
sbb
add
mov
add
mov
sbb
add
mov
add
fdivr
add
lds
add
mov
sbb
add
cmp
les
add
aam
cmp
mov
add
cmp
adc
add
call
add
adc
add
cmp
add
add
pop
mov
add
jbe
cmp
add
add
xchg
mov
add
mov
add
mov
add
jb
cmp
xchg
sbb
add
cmp
test
add
pop
mov
xchg
sbb
add
cmp
sbb
add
mov
add
push
cmp
les
add
pushf
mov
add
cdq
mov
add
inc
mov
add
out
mov
add
cmp
add
and
adc
add
cmp
aam
add
jnp
cmp
inc
sbb
add
add
add
mov
cmp
leave
adc
add
mov
add
cmp
adc
add
cmp
jp
add
xor
add
in
mov
add
leave
mov
add
sar
add
mov
sbb
add
mov
add
mov
cmp
add
repz
add
out
mov
add
jmp
cmp
mov
pop
add
dec
stos
cmp
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
jg
(bad)
sbb
pop
add
std
xchg
cmp
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
stos
sub
inc
add
add
mov
add
push
mov
add
(bad)
mov
add
push
sub
jmp
cmp
rcl
add
pop
mov
add
stos
mov
add
xchg
mov
jmp
cmp
cmp
addr16
add
xchg
cmp
add
push
push
add
pusha
mov
jmp
popf
les
add
add
xchg
les
add
push
add
add
add
push
add
ins
les
add
mov
add
and
add
pop
les
add
les
add
les
add
adc
cmp
rcl
cmp
cmp
ret
add
add
mov
add
fidivr
add
pop
mov
add
xor
jmp
in
mov
add
out
cmp
sbb
cmp
dec
adc
cmp
call
add
add
cmp
add
jg
add
out
mov
add
enter
call
add
mov
add
or
add
hlt
mov
jmp
and
add
sub
add
out
cmp
jbe
add
sar
(bad)
mov
adc
add
add
adc
add
cmp
cmp
add
mov
jmp
pop
mov
add
inc
mov
add
aas
mov
add
cwde
mov
jmp
xchg
mov
add
into
mov
add
fwait
mov
jmp
les
jmp
jno
cmp
add
stos
sub
(bad)
jp
cmp
ja
add
ja
cmp
adc
add
adc
add
adc
add
adc
add
cmp
jmp
add
add
sub
add
xchg
mov
add
dec
mov
add
sub
add
add
daa
mov
add
and
add
pop
mov
add
push
mov
add
(bad)
mov
add
(bad)
mov
add
es
add
add
add
cld
mov
add
mov
adc
add
adc
add
mov
retf
adc
add
mov
add
bsr
add
adc
add
mov
add
mov
adc
add
cmp
(bad)
adc
add
adc
add
mov
add
std
mov
add
ss
add
xor
add
lods
mov
add
add
mov
add
sar
add
adc
add
mov
add
test
cmp
cmp
add
in
cmp
sub
add
fidivr
add
outs
mov
add
dec
mov
add
test
add
adc
add
add
adc
add
cmp
and
lods
cmp
xor
add
lea
add
data16
add
test
add
add
cmp
cmp
js
add
stc
cmps
cmp
mov
add
loop
cmp
jp
add
dec
test
add
sbb
add
cmps
cmp
sbb
add
lds
add
add
mov
pop
add
sbb
add
adc
cmp
loopne
add
push
test
add
pop
add
sbb
add
inc
test
add
cmps
cmp
and
add
frstor
add
mul
add
adc
add
or
cmp
push
cmps
cmp
add
mov
add
inc
test
add
pop
add
loop
cmp
sub
add
xor
cmp
cmp
add
xor
add
mov
pop
add
daa
test
add
pop
add
push
test
add
add
cmp
pop
add
push
test
add
pop
add
xor
add
in
cmps
cmp
adc
add
add
jmp
sbb
add
cmps
cmp
(bad)
sbb
add
movs
cmp
(bad)
sbb
add
cmps
cmp
rcr
add
jmp
add
or
add
cmc
movs
cmp
lea
add
scas
movs
cmp
jl
add
stos
movs
cmp
dec
sbb
add
mov
add
shl
add
mov
push
sbb
add
sbb
add
mov
add
int
cmp
adc
cmp
adc
cmp
loopne
add
mov
adc
cmp
not
add
cmp
(bad)
adc
cmp
fwait
adc
cmp
(bad)
adc
cmp
std
adc
add
add
mov
add
jnp
cmp
std
adc
add
mov
add
xchg
mov
add
call
add
adc
cmp
xor
cmp
add
add
xchg
test
add
xchg
test
add
dec
cmps
cmp
icebp
sbb
add
cmps
cmp
add
test
cmps
cmp
mov
cmps
cmp
rcr
add
cmps
cmp
stos
and
dec
adc
add
cmps
cmp
or
add
mov
add
pop
cmps
cmp
into
adc
add
add
adc
add
cmp
into
adc
add
cmp
mov
cmps
cmp
stos
and
inc
add
and
jmp
cmps
cmp
xchg
adc
add
cmps
cmp
cmp
jmp
cmps
cmp
push
adc
add
movs
cmp
dec
adc
add
cmps
cmp
pop
adc
add
movs
cmp
sub
add
add
cmp
push
adc
add
movs
cmp
fst
add
sbb
adc
add
imul
fst
add
rcl
add
add
aad
add
int3
adc
add
or
add
jp
add
cmp
lea
add
lea
add
popf
adc
add
jmp
test
(bad)
sbb
add
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
stos
and
(bad)
jmp
pop
(bad)
sbb
add
fnstcw
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
int
add
pushf
adc
add
adc
add
sbb
add
adc
add
add
add
adc
add
add
jmp
adc
add
add
dec
adc
add
add
adc
add
adc
add
add
in
cmp
outs
adc
add
mov
cmp
fist
add
gs
add
adc
add
adc
add
adc
add
adc
add
add
jmp
mul
sbb
cmp
popf
adc
add
adc
add
sbb
add
add
or
dec
add
pop
sbb
add
pushf
cmp
jmp
add
add
sbb
sbb
add
xchg
aas
add
sbb
add
add
sbb
add
add
and
or
add
fnstsw
add
pop
add
mov
cmp
int
add
int
add
popf
pop
add
pushf
pop
add
stos
or
call
cmp
jg
(bad)
sbb
cmp
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
add
jmp
add
add
mov
cmp
aas
or
sbb
pop
add
dec
jge
add
pop
add
or
pop
add
fst
add
fcom
add
stos
or
jmp
or
add
cmp
int
add
popf
push
add
popf
push
add
lea
add
lea
add
add
pushf
push
add
stos
or
dec
or
call
add
popf
adc
add
add
dec
push
add
inc
shl
pop
push
add
dec
push
add
dec
push
add
sbb
add
cmp
add
adc
add
cmp
sbb
add
imul
add
adc
add
int3
adc
mov
jmp
mov
cmp
mov
adc
cmp
popf
adc
add
lea
add
popf
adc
add
stos
or
dec
adc
cmp
sub
jmp
dec
adc
add
pop
adc
add
outs
(bad)
xor
sbb
adc
unpckhps
add
cmp
jg
(bad)
sbb
adc
cmp
fcom
add
adc
add
adc
add
adc
add
adc
add
jmp
int
add
popf
adc
add
mov
jmp
lea
add
add
popf
adc
add
enter
adc
add
add
add
add
dec
adc
add
cmp
aas
adc
add
dec
cmp
sbb
add
inc
cmp
or
adc
add
adc
add
adc
add
or
(bad)
fst
add
or
adc
add
adc
add
fnsave
int
add
int
add
add
pushf
adc
add
cmp
scas
adc
sbb
jl
add
cmp
pop
adc
add
add
dec
adc
add
add
or
call
add
jmp
add
add
sbb
adc
add
lea
add
adc
add
add
add
or
add
movs
jg
add
(bad)
sbb
adc
add
cmp
fcom
add
xor
adc
add
adc
add
adc
add
adc
add
adc
add
add
lea
add
pop
adc
add
mov
add
add
dec
adc
add
add
add
add
test
add
add
fnstsw
add
adc
add
adc
add
or
(bad)
jl
cmp
outs
cmc
(bad)
sbb
adc
add
jle
add
adc
add
adc
add
adc
add
adc
add
jmp
popf
adc
add
add
adc
add
add
pop
adc
add
add
mov
add
pop
adc
add
add
add
test
sar
or
add
icebp
jge
add
adc
add
adc
add
adc
add
mov
fst
add
fst
add
int
add
int
add
fst
add
popf
adc
add
mov
add
add
(bad)
adc
add
cmp
jg
(bad)
sbb
add
sbb
sbb
add
cmp
dec
sbb
add
add
sbb
sbb
add
add
sbb
call
pop
add
or
pop
add
fwait
aam
add
pop
add
int
add
fcom
add
fcom
add
in
imul
sbb
push
add
cmp
popf
pop
add
popf
pop
add
lea
add
mov
add
cmp
jmp
clc
mov
outs
adc
add
movs
imul
add
add
dec
pop
add
sbb
pop
add
or
add
or
sbb
dec
cmp
outs
adc
add
xchg
imul
add
push
add
int
add
fst
add
fst
add
int3
push
add
int
add
jp
jmp
add
scas
lahf
cmp
scas
adc
add
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
jmp
pop
push
add
jmp
add
add
sbb
push
add
xchg
xchg
aas
add
push
add
or
add
or
add
add
and
icebp
(bad)
sbb
adc
cmp
fcom
cmp
int
add
int
add
popf
adc
add
stos
sbb
dec
sbb
call
sbb
add
adc
xor
dec
adc
add
pop
adc
add
lods
push
das
repnz
sbb
adc
cmp
or
add
pop
push
add
sbb
adc
add
cmp
jmp
or
(bad)
sbb
adc
add
cmp
fst
add
adc
add
adc
add
adc
add
add
call
add
add
(bad)
sbb
cmp
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
cli
adc
(bad)
mov
adc
jmp
xor
jg
(bad)
sbb
adc
add
cmp
or
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
jmp
ins
imul
adc
call
xor
stos
adc
push
xor
jg
(bad)
sbb
cmp
lea
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
jmp
add
sbb
sbb
add
int
cmp
or
add
adc
add
adc
add
adc
add
adc
add
push
add
push
add
jmp
sti
push
add
adc
add
adc
add
adc
add
adc
add
add
add
sub
inc
add
adc
jmp
xor
jmp
add
adc
push
xor
das
pop
(bad)
sbb
adc
add
cmp
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
int
add
jp
jmp
aas
jo
add
add
adc
add
adc
add
imul
pop
adc
add
add
xor
sbb
add
add
dec
adc
add
inc
add
adc
add
add
or
add
in
cmp
push
adc
add
adc
add
adc
add
adc
add
add
cmp
sbb
adc
add
adc
add
adc
add
adc
add
add
call
add
(bad)
sbb
cmp
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
add
add
cli
jmp
jmp
sbb
add
sbb
add
pop
add
or
pop
add
scas
popa
inc
add
pop
add
int3
pop
add
fist
add
fcom
add
in
test
add
pop
add
in
cmp
mov
add
sbb
pop
add
popf
pop
add
lea
add
add
mov
add
cmp
jmp
jge
xor
outs
sbb
add
movs
test
add
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
add
or
jmp
outs
sbb
add
xchg
test
add
push
add
int
add
int
add
fst
add
fst
add
add
int3
push
add
int
add
jp
jmp
popf
push
add
stos
call
add
call
add
push
add
pop
push
add
pop
push
add
sub
jmp
fwait
ins
xor
popf
adc
add
add
dec
push
add
mov
inc
add
add
sbb
push
add
xchg
dec
inc
add
add
push
add
or
add
jne
cmp
ficom
add
rcl
add
add
adc
add
adc
cmp
lea
add
popf
adc
add
lea
jmp
cld
ins
xor
dec
adc
add
add
pop
adc
add
lea
add
dec
adc
add
es
inc
add
add
pop
adc
add
dec
test
add
(bad)
sbb
adc
add
adc
add
cmp
fst
add
adc
add
adc
add
adc
add
jmp
push
outs
xor
lea
add
add
xor
pushf
adc
add
data16
(bad)
adc
add
adc
add
push
add
add
and
adc
add
xor
push
adc
add
xor
and
add
push
add
imul
imul
outs
adc
add
in
cmp
fst
add
add
int
add
int
add
fst
add
fst
add
int3
adc
add
adc
add
jmp
repz
sbb
add
xor
(bad)
adc
add
imul
fisubr
add
add
(bad)
imul
movs
imul
mov
adc
add
add
push
add
jmp
add
add
mov
adc
add
gs
cmp
fst
add
int
add
int
add
fst
add
fst
add
int3
adc
add
adc
add
jmp
sahf
gs
scas
adc
add
adc
add
adc
add
add
add
pop
adc
add
add
add
sbb
jmp
xor
add
out
sbb
add
adc
add
adc
add
adc
add
add
or
jmp
(bad)
fst
add
stos
jmp
dec
adc
add
imul
add
int
add
lahf
adc
add
in
jmp
cld
push
add
popf
adc
add
pop
inc
add
adc
add
add
pusha
xor
add
pop
adc
add
add
add
adc
add
adc
add
adc
add
add
in
cmp
add
outs
in
sbb
adc
add
xchg
cmp
fist
add
gs
cmp
int
add
fst
add
fst
add
int3
adc
add
adc
add
jmp
sub
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
add
sbb
jmp
add
mov
sbb
add
add
ins
pop
xor
das
adc
add
push
xchg
cmp
sbb
sbb
add
pop
add
fst
add
int3
pop
add
int
add
call
add
pop
add
cmc
xchg
cmp
popf
pop
add
lea
add
lea
add
add
popf
pop
add
popf
pop
add
mov
add
lea
add
cmp
jmp
and
add
add
dec
pop
add
pop
pop
add
pop
pop
add
lea
add
dec
pop
add
sbb
or
or
add
or
add
pop
pop
add
sbb
add
dec
xchg
cmp
outs
adc
add
add
push
add
add
jge
cmp
fst
add
fst
add
int
add
int3
push
add
jp
jmp
shr
scas
adc
add
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
jmp
pop
push
add
dec
push
add
and
add
out
call
add
push
add
push
push
add
push
xor
stos
out
dec
push
add
fst
add
mov
xor
sbb
adc
add
daa
shl
popf
adc
add
(bad)
adc
add
and
adc
add
nop
adc
add
add
mov
cmp
outs
loope
sbb
add
push
nop
cmp
pop
adc
cmp
dec
adc
add
sbb
adc
add
call
add
(bad)
sbb
cmp
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
jmp
popf
adc
add
adc
add
add
popf
adc
add
push
add
pop
adc
add
add
add
cmp
aas
or
add
push
mov
add
add
inc
mov
add
adc
add
adc
add
add
xor
fst
add
fst
add
int
add
int
add
sbb
adc
add
adc
add
jb
add
add
(bad)
adc
add
cmp
jg
(bad)
sbb
nop
cmp
pop
adc
add
mov
add
add
dec
adc
add
add
pop
adc
add
add
loope
(bad)
std
outs
xor
sbb
outs
xor
das
or
sbb
adc
add
cmp
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
outs
xor
scas
or
add
cmp
popf
adc
add
adc
add
add
adc
add
in
call
add
sub
jmp
dec
adc
add
adc
add
add
ret
add
adc
add
add
or
add
push
mov
add
(bad)
sbb
adc
add
cmp
fcom
add
and
adc
add
adc
add
add
adc
add
adc
add
jmp
stos
outs
xor
mov
adc
add
adc
add
adc
add
adc
add
add
add
sub
jmp
dec
adc
add
add
jg
xor
jmp
add
add
sbb
adc
add
add
test
add
adc
add
adc
add
add
movs
mov
add
(bad)
sbb
adc
add
cmp
fcom
add
xor
adc
add
adc
add
adc
add
adc
add
adc
add
add
lea
add
pop
sbb
add
cmps
xor
add
dec
sbb
add
add
pop
sbb
add
add
or
add
dec
mov
add
add
fisttp
add
sbb
sbb
add
add
cmp
jmp
repz
outs
or
add
in
cmp
fst
add
int
add
int
add
popf
pop
add
add
popf
pop
add
mov
add
lea
add
call
add
pop
add
pop
pop
add
pop
pop
add
lea
add
dec
pop
add
pop
pop
add
lods
jg
add
add
add
pop
add
sbb
add
pop
lea
add
or
sbb
pop
add
cmc
mov
add
add
dec
lea
add
add
push
add
fst
add
int
add
int3
push
add
call
add
push
add
jne
cmp
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
mov
add
lea
add
cmp
jmp
pop
push
jmp
inc
push
(bad)
sbb
add
xor
add
add
sbb
push
add
or
push
add
sbb
add
sbb
out
jmp
xor
fst
xor
outs
adc
add
mov
add
adc
add
int
add
popf
adc
add
mov
add
call
add
add
adc
add
pop
adc
add
call
adc
add
dec
adc
add
lds
sbb
adc
cmp
sbb
add
aad
cmp
or
adc
add
fcom
add
adc
add
add
adc
add
jmp
push
addr16
lahf
adc
add
adc
add
in
jmp
or
xor
dec
adc
add
adc
add
inc
add
adc
add
add
dec
jno
add
add
dec
adc
add
add
sbb
add
sub
adc
add
add
adc
add
adc
add
add
pop
mov
add
(bad)
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
add
stos
jmp
popf
adc
add
adc
add
adc
add
add
dec
adc
add
add
adc
add
add
add
dec
adc
add
(bad)
cmp
aas
adc
sbb
adc
add
adc
add
mov
add
adc
add
adc
add
adc
add
ins
xor
mov
adc
add
cmp
int
add
popf
adc
add
add
adc
add
add
stos
in
jmp
xchg
imul
aad
sbb
add
cmp
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
jmp
(bad)
fisubr
jg
(bad)
sbb
add
mov
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
jmp
int
add
jp
jmp
popf
adc
add
adc
add
adc
add
adc
add
adc
add
add
aad
sbb
add
fisttp
add
lods
mov
add
add
adc
add
adc
add
ins
xor
or
ins
xor
jg
(bad)
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
stos
in
jmp
xor
in
jmp
in
ins
xor
mov
add
add
in
xor
pop
sbb
add
cmp
add
mov
xor
aas
adc
add
cmp
sbb
add
sbb
add
sbb
add
add
sbb
mov
cmp
fst
add
out
cmp
int3
pop
add
mov
mov
xor
add
push
jmp
(bad)
xchg
cmp
jp
jmp
mov
adc
sbb
call
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
cmp
das
adc
sbb
add
pop
add
or
pop
add
sbb
add
pop
add
or
mov
cmp
stos
mov
cmp
call
add
push
add
dec
xchg
cmp
mov
push
add
jne
cmp
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
sub
add
add
sbb
add
lea
add
dec
push
add
sbb
imul
or
push
add
sbb
add
int
cmp
outs
ror
add
cwde
cmp
int3
adc
cmp
fst
add
int
add
int3
adc
jmp
popf
adc
jmp
add
lea
jmp
rcl
add
lea
add
pop
adc
jmp
stc
xchg
cmp
popf
sbb
add
add
dec
adc
inc
add
add
sbb
adc
inc
add
adc
add
or
add
cmc
xchg
cmp
ficom
add
add
adc
add
adc
add
adc
add
ror
add
adc
add
adc
add
adc
add
add
cmp
add
mov
jmp
cdq
cmp
sbb
add
sbb
add
inc
je
add
add
adc
add
adc
add
adc
add
mov
(bad)
jg
cmp
int
add
ja
cmp
fst
add
scas
cwde
cmp
iret
adc
add
adc
add
cwde
cmp
lea
add
std
cwde
cmp
popf
adc
add
cmp
outs
sbb
add
add
lds
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
cli
mov
jmp
mov
(bad)
mov
mov
push
xchg
cmp
stos
mov
(bad)
out
xchg
cmp
cmp
cmp
outs
sbb
add
test
add
adc
add
adc
add
add
adc
add
adc
add
add
call
add
(bad)
sbb
cmp
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
cli
mov
jmp
pop
(bad)
sbb
add
lds
add
add
adc
add
adc
add
adc
add
adc
add
stc
(bad)
fst
add
fst
add
add
dec
stc
(bad)
fnstsw
call
adc
add
mov
stc
call
js
dec
adc
add
cmps
stc
inc
inc
stc
push
adc
add
add
add
shr
stc
call
adc
add
cmps
stc
dec
stc
call
ja
call
adc
add
inc
stc
dec
js
dec
adc
add
adc
add
movs
stc
(bad)
stc
inc
stc
call
stc
dec
adc
add
cmps
stc
dec
jp
inc
add
adc
add
stc
push
stc
call
jae
call
add
dec
sbb
add
stc
jmp
jge
dec
add
dec
sbb
add
mov
stc
dec
stc
dec
sbb
add
dec
stc
call
jb
(bad)
fst
add
fst
add
xlat
scas
stc
inc
add
inc
stc
dec
jb
(bad)
fst
add
int
add
pop
mov
call
jno
dec
pop
add
pop
scas
stc
dec
jbe
dec
pop
add
retf
scas
stc
inc
inc
stc
call
pop
add
pop
pop
add
addr16
stc
inc
pop
add
add
or
lods
stc
push
inc
stc
call
pop
add
or
push
add
fst
add
xchg
jmp
lods
stc
dec
stc
jmp
stos
stc
(bad)
(bad)
stc
dec
stos
stc
push
mov
stc
jmp
stos
stc
call
lods
stc
inc
add
lods
stc
jmp
lods
stc
jmp
stc
dec
lods
stc
dec
stc
call
push
add
std
mov
add
mov
push
add
pop
lods
stc
inc
stc
(bad)
fild
stc
call
stc
(bad)
stc
lods
stc
inc
stc
dec
adc
stc
inc
add
mov
stc
call
mov
stc
call
cmps
stc
jmp
cmps
stc
(bad)
jmp
stc
(bad)
sti
movs
stc
inc
cmps
stc
inc
cmps
stc
jmp
mov
add
cdq
lods
stc
call
jl
(bad)
mov
jl
dec
stc
(bad)
mov
jl
inc
add
js
jmp
js
dec
jns
(bad)
jmp
stc
push
js
inc
stc
jmp
jns
call
stc
inc
jns
dec
jnp
dec
jnp
jmp
stc
call
jge
jmp
jge
(bad)
sti
jge
jmp
add
jle
jmp
jle
call
jle
jmp
jle
jmp
stc
call
jge
inc
ja
push
ja
jmp
lods
stc
push
lods
stc
(bad)
fild
dec
lods
stc
jmp
stc
inc
stc
dec
lods
stc
inc
add
stc
call
stc
call
stc
call
stc
jmp
cmps
stc
push
cmps
stc
(bad)
jmp
stc
call
cmps
stc
call
cmps
stc
jmp
cmps
stc
jmp
cmps
stc
call
cmps
stc
call
movs
stc
inc
movs
stc
jmp
stc
call
stc
(bad)
jg
stc
inc
movs
stc
call
movs
stc
jmp
add
jbe
call
jbe
jmp
jne
call
jne
jmp
ja
(bad)
mov
jne
(bad)
fnsave
inc
jbe
jmp
jbe
inc
cmps
stc
push
jbe
call
cmps
stc
push
cmps
stc
call
add
test
(bad)
cmp
stc
call
stc
call
stc
(bad)
fnstenv
(bad)
fnstenv
call
jns
call
jns
jmp
jns
(bad)
sti
jp
inc
jp
(bad)
std
jp
jmp
stc
(bad)
jge
stc
(bad)
jge
stc
dec
jns
(bad)
aas
jns
inc
add
jns
dec
jns
jmp
js
jmp
stc
push
stc
jmp
stc
(bad)
jmp
stc
(bad)
fnstsw
jmp
jns
jmp
je
jmp
stc
jmp
adc
add
adc
adc
add
fist
add
pop
movs
stc
call
add
test
dec
sldt
jae
stc
jmp
sldt
pop
sbb
add
cmps
stc
(bad)
mov
cmps
stc
call
add
cmp
jmp
jnp
jmp
stc
call
stc
(bad)
jns
stc
dec
jnp
dec
jnp
push
jnp
dec
jnp
inc
add
jp
call
jnp
jmp
stc
jmp
stc
(bad)
jge
stc
call
jp
push
jp
dec
cmps
stc
(bad)
jns
stc
jmp
stc
jmp
stc
call
stc
call
jns
call
jns
jmp
jp
push
stc
jmp
add
js
dec
jp
dec
cmps
stc
(bad)
stc
cmps
stc
(bad)
in
cmps
stc
dec
stc
(bad)
cmp
cmps
stc
push
cmps
stc
jmp
stc
(bad)
jmp
cmps
stc
call
cmps
stc
call
sahf
stc
call
sahf
stc
inc
sahf
stc
call
xchg
stc
inc
add
xchg
stc
call
(bad)
stc
(bad)
std
(bad)
stc
dec
xchg
stc
(bad)
mov
xchg
stc
dec
add
out
stc
jmp
sahf
stc
dec
mov
stc
(bad)
stc
mov
add
(bad)
movs
stc
jmp
movs
stc
dec
movs
stc
call
movs
stc
jmp
cmps
stc
inc
add
cmps
stc
dec
stc
jmp
cmps
stc
jmp
mov
add
pop
xchg
stc
push
xchg
stc
(bad)
mov
(bad)
stc
call
(bad)
stc
dec
(bad)
stc
call
(bad)
stc
call
xchg
stc
dec
add
test
bound
jp
addr16
pop
arpl
bound
add
sub
add
adc
and
inc
les
arpl
cmp
add
fs
jmp
je
push
push
ins
lock
(bad)
push
adc
gs
pop
ins
and
pop
dec
sbb
jb
aaa
imul
sbb
gs
pop
jb
popa
pop
outs
nop
push
inc
add
sbb
add
mov
cld
pop
ins
jo
aas
add
add
xor
and
ins
jae
sub
pop
inc
cs
pop
ins
xor
pop
ins
xor
add
pusha
pop
bound
jb
(bad)
addr16
je
cmp
adc
add
sub
pop
arpl
pop
xor
add
pop
push
add
and
outs
repnz
add
sbb
and
and
inc
add
sbb
mov
dec
jb
mov
jo
jle
cmp
sbb
push
fs
pop
data16
popf
add
fs
and
sub
jb
ss
jae
adc
add
xor
leave
dec
jb
add
mov
jmp
ss
ins
add
pop
data16
stc
(bad)
inc
pop
inc
imul
pop
pop
ins
cli
xor
inc
imul
add
das
dec
add
inc
or
imul
or
mov
adc
dec
outs
outs
xor
pop
jo
pop
pop
outs
add
xor
jns
jb
repz
gs
push
jae
push
jb
cmp
add
ins
xor
jo
rcl
outs
pop
or
mov
pop
dec
call
arpl
adc
je
dec
pop
ins
add
fiadd
push
aaa
fs
hlt
pop
pop
inc
and
imul
sti
(bad)
inc
adc
jb
add
xor
pop
arpl
adc
xchg
xor
addr16
jp
pop
je
adc
add
fs
das
addr16
jb
xor
adc
add
xor
push
outs
xor
ror
gs
dec
pop
ins
and
jb
popa
pop
cmp
popa
jmp
addr16
je
add
aaa
push
ins
(bad)
xor
pop
add
adc
jb
xor
pop
pop
outs
xor
cmp
xor
push
pop
imul
sub
in
add
sub
ins
jo
push
outs
jno
pop
push
dec
sbb
add
fs
test
push
je
pop
inc
and
gs
popa
add
and
push
fs
sub
gs
add
jb
out
pop
fs
ss
pop
dec
and
sbb
add
bound
pop
pop
imul
aaa
imul
push
imul
je
pop
jb
ins
sub
fs
pop
bound
xor
push
pop
jb
and
imul
data16
adc
cmp
arpl
retf
jae
pop
aaa
add
sub
push
and
dec
popa
jmp
pop
fst
push
adc
gs
push
les
shr
fs
hlt
pop
pop
push
add
hlt
dec
pop
add
push
pop
ins
cmp
pop
fs
pop
pop
gs
adc
popa
mov
xor
add
push
dec
gs
xor
add
adc
xor
jb
jle
outs
jae
xor
or
xor
fisub
popa
and
add
pushf
push
cmp
mov
arpl
add
and
add
ins
push
xor
add
push
fbstp
outs
jae
adc
pop
je
pop
jb
in
xor
add
pop
jae
pop
gs
(bad)
jmp
pop
inc
leave
xor
arpl
push
add
pop
jo
jl
push
add
pop
bound
ins
push
add
sbb
popa
pop
jb
push
pop
jae
xor
xor
dec
push
xor
dec
imul
push
ins
mov
(bad)
call
clc
pop
outs
repnz
je
not
(bad)
(bad)
push
cli
pop
and
inc
hlt
pop
pop
dec
cmp
pop
push
popf
adc
add
fs
and
add
retf
fs
jb
das
pop
jae
stc
push
add
cmovno
xor
cmp
adc
add
xor
outs
and
outs
jnp
pop
outs
and
arpl
pop
push
jae
adc
ret
gs
pop
push
jb
pop
inc
jne
inc
pop
inc
and
pop
add
push
inc
jne
inc
pop
inc
adc
pop
push
cli
add
add
lock
push
add
xor
inc
hlt
pop
pop
inc
and
imul
add
add
push
xor
add
scas
pop
pop
outs
pop
adc
mov
xor
jp
pop
push
dec
adc
jg
pop
gs
pop
push
jo
push
jo
pop
jb
or
xor
pop
pop
dec
add
cmp
fs
xor
mov
adc
outs
in
inc
ss
adc
jecxz
pop
add
mov
icebp
add
xor
je
adc
dec
pop
pop
popa
and
imul
adc
mov
add
imul
add
pushf
add
push
inc
outs
mov
jns
das
xor
push
jo
pop
pop
je
adc
int
pop
arpl
popa
outs
xor
pop
jb
inc
inc
add
adc
jo
pop
push
jb
xor
out
adc
add
push
fs
fistp
fisub
imul
adc
cli
xor
push
and
dec
add
inc
dec
fs
popf
adc
add
push
fs
pop
bound
pop
ins
inc
mov
add
cdq
adc
jb
push
cmp
jg
push
jb
adc
add
fs
pop
pop
pop
gs
dec
push
and
popa
pop
xor
xor
jae
adc
inc
and
push
pop
push
lds
popa
mov
jns
add
adc
(bad)
cld
pop
xor
add
das
push
ins
jmp
adc
(bad)
in
pop
dec
outs
sub
imul
pop
bound
ss
xor
xor
push
pop
jbe
inc
pop
outs
push
cmp
ins
ss
sbb
add
jo
test
push
je
add
push
outs
jno
pop
add
push
push
dec
shr
xor
pop
ins
or
xor
fs
sbb
gs
add
push
push
gs
xor
jae
repz
sbb
gs
ins
jae
xor
dec
lock
out
inc
add
rcr
cmp
cmp
aas
jne
inc
pop
jb
sbb
add
add
inc
add
push
xor
outs
inc
jb
xchg
add
jno
arpl
fcom
inc
imul
sbb
gs
push
jb
dec
add
adc
xor
xor
arpl
jmp
jae
cmp
add
iret
add
dec
push
inc
in
pop
outs
repnz
or
adc
inc
cmp
je
add
dec
add
and
add
icebp
dec
arpl
xor
dec
arpl
push
pop
outs
inc
dec
aas
ins
les
je
push
xchg
add
fs
mov
push
outs
jb
pop
jae
push
pop
add
pop
fs
push
outs
jae
dec
pop
push
sbb
push
fs
ins
inc
pop
outs
xor
pushf
add
push
fs
xor
push
outs
add
and
pop
js
add
add
dec
pop
sbb
imul
adc
pop
ja
dec
pop
or
add
push
imul
adc
xor
cmp
gs
bound
mov
or
lea
je
push
outs
jae
dec
pop
push
pop
adc
push
push
add
je
push
outs
(bad)
call
(bad)
call
adc
pop
push
ins
dec
pop
je
adc
push
ja
xor
rcr
nop
adc
push
imul
jecxz
jae
dec
pop
outs
fist
fs
push
addr16
(bad)
jmp
dec
gs
pop
arpl
jmp
or
dec
and
xor
(bad)
dec
cmp
neg
add
fs
gs
push
pop
popa
pop
out
outs
cmp
inc
add
xor
pop
pop
jb
sti
jno
and
push
push
and
push
outs
and
add
call
dec
pop
outs
shl
add
adc
push
add
cld
idiv
in
in
arpl
mov
jmp
jno
popf
adc
add
loop
fs
out
imul
push
push
xor
outs
je
out
ins
mov
dec
add
mov
aas
jb
stc
arpl
add
jp
cmp
sbb
add
out
popa
jb
inc
add
push
jecxz
je
sti
inc
gs
xor
add
dec
outs
das
cld
push
imul
call
dec
add
ficom
xor
je
add
cmp
push
gs
out
js
adc
imul
imul
cmp
pop
push
lea
leave
add
push
outs
scas
in
je
pop
pop
jae
add
adc
push
fs
outs
bound
jb
add
rcl
and
outs
jno
bound
push
push
sbb
in
je
out
je
imul
mov
pop
push
gs
push
ja
sti
pop
fs
push
sahf
cmps
sbb
(bad)
push
xor
add
push
pop
jbe
clc
pop
inc
in
loope
add
aas
jb
icebp
arpl
jecxz
jo
in
pop
(bad)
leave
cmc
xor
adc
add
cmc
inc
imul
dec
add
pop
outs
in
cmp
cmc
pop
je
adc
dec
out
popa
and
dec
outs
sub
push
inc
das
out
push
shl
pop
add
xor
cmp
cmc
pop
je
adc
add
mul
(bad)
(bad)
pop
arpl
dec
add
popa
adc
gs
outs
(bad)
(bad)
cmp
neg
lea
cs
out
popa
xor
xor
outs
xor
jno
cs
inc
add
push
dec
mov
cld
pop
add
dec
pop
js
push
pop
ins
jp
(bad)
inc
add
sbb
xor
je
sbb
gs
addr16
sub
(bad)
jmp
push
cmp
push
retf
jbe
neg
inc
push
dec
je
std
arpl
push
cmp
add
push
cmp
ins
or
imul
stc
in
outs
push
and
jno
xor
(bad)
jmp
push
xor
xor
pop
jne
inc
push
ja
adc
jo
sti
push
fs
push
addr16
jb
js
fs
icebp
pusha
add
xor
xor
pop
popa
popa
jb
inc
imul
xor
xor
pop
popa
popa
ret
gs
icebp
addr16
push
push
add
repz
jo
in
popa
add
loope
xor
inc
push
pop
add
repnz
jo
in
popa
and
dec
outs
sbb
push
inc
and
pop
add
loopne
imul
in
push
outs
mov
pop
dec
dec
push
mov
jo
out
ja
stc
push
addr16
pop
arpl
add
cmps
adc
fs
xor
icebp
arpl
out
jae
add
icebp
pop
jo
repnz
gs
xor
in
imul
in
imul
pop
popa
popa
repnz
push
icebp
pop
jo
jecxz
cs
stc
pop
add
clc
pop
push
xor
jno
dec
in
jno
cmp
inc
add
push
popa
mov
ds
cmc
arpl
out
ins
add
and
push
pop
adc
jno
pop
in
inc
add
cmp
pop
inc
cmp
add
adc
outs
sub
pop
outs
fdivp
pop
je
clc
pop
jae
in
(bad)
call
pop
inc
inc
add
xor
pop
ins
int
(bad)
jmp
repnz
ficomp
hlt
clc
pop
dec
in
stc
pop
push
popf
adc
dec
fcom
inc
add
fisub
(bad)
jmp
dec
jb
icebp
pop
jae
inc
pop
imul
(bad)
inc
inc
pop
imul
jno
jl
pop
outs
jnp
push
jbe
fisub
test
inc
outs
jle
jno
sbb
dec
imul
aas
jb
in
inc
cs
imul
add
inc
add
pop
adc
jb
in
inc
out
hlt
push
je
pop
push
jae
adc
jo
inc
pop
ins
lock
gs
cli
pop
je
call
aas
jb
loopne
dec
sub
addr16
mov
adc
jb
loopne
inc
mov
arpl
jmp
(bad)
dec
loopne
inc
add
and
popa
cs
dec
popa
pop
lock
add
aas
jb
jecxz
inc
xor
push
popa
cmp
pop
ins
or
hlt
push
dec
sub
out
js
adc
pmuludq
loopne
jno
add
pop
jne
push
js
popf
adc
add
hlt
push
inc
stc
stc
outs
gs
rep
add
push
xor
gs
pop
dec
add
xor
cmp
adc
pop
inc
popa
cdq
cmc
pop
inc
xchg
inc
add
jg
push
gs
imul
sti
inc
gs
add
push
push
push
gs
pop
jne
pop
pop
jns
jmp
xor
dec
pop
outs
ret
push
les
aas
outs
sbb
adc
imul
loopne
dec
jb
jecxz
ins
add
pop
push
cld
in
push
add
add
inc
outs
es
imul
adc
dec
lods
in
pop
fs
pop
jne
stc
arpl
cli
push
outs
adc
add
in
pop
mov
arpl
cli
push
outs
rcl
add
add
shl
push
fs
push
push
dec
out
sahf
sbb
(bad)
call
loope
outs
adc
pop
lock
icebp
aas
pop
ins
add
arpl
push
popa
jae
adc
add
pop
xor
out
ins
xor
jno
sub
addr16
lea
sbb
mov
pop
ins
mov
in
sbb
dec
add
mov
mov
or
pop
in
pop
push
and
outs
jnp
push
imul
pop
arpl
sbb
add
sti
pop
inc
pop
cmc
push
je
sbb
add
cld
pop
dec
mov
cli
pop
imul
pop
aas
outs
add
pop
je
clc
pop
imul
pop
adc
fdivrp
ds
clc
arpl
add
stc
outs
je
cli
pop
gs
pop
add
dec
outs
xor
pop
je
stc
pop
imul
stc
outs
imul
pop
add
aas
outs
jle
arpl
cli
ja
pop
in
push
outs
jbe
arpl
nop
pop
aas
jb
clc
arpl
bnd
sub
cmp
loope
outs
mov
pop
xor
add
dec
xor
push
ins
and
pop
ins
push
repz
in
jmp
(bad)
cmp
pop
xor
mov
cmp
dec
push
fisub
push
pop
cmp
outs
xor
cmp
cli
inc
add
sbb
outs
mov
dec
gs
jo
neg
dec
push
add
pop
je
add
pop
outs
jo
arpl
push
push
(bad)
mul
das
clc
pop
je
stc
pop
jae
dec
push
outs
sar
add
push
dec
je
out
jo
not
in
repnz
jae
push
add
or
dec
je
in
or
push
gs
pop
jae
push
add
sub
cmp
outs
xor
inc
jne
out
dec
sbb
add
dec
add
xchg
sbb
mov
out
dec
imul
inc
pop
adc
arpl
icebp
pop
jb
dec
pop
data16
add
retf
adc
jb
inc
icebp
push
gs
imul
dec
ds
sub
inc
cs
pop
add
adc
popa
sbb
cmp
gs
dec
pop
data16
loop
popa
add
loope
pop
outs
popf
adc
dec
add
push
fcmovu
sbb
jmp
dec
pop
ins
xor
pop
jb
call
movs
repnz
outs
mov
jp
sbb
call
hlt
pop
push
jo
outs
imul
inc
add
adc
gs
dec
imul
fstp
sbb
inc
cmp
mov
ins
mov
in
arpl
repz
gs
out
ins
lods
jmp
cld
hlt
pop
push
int
push
push
or
cmp
add
pop
push
popa
sbb
loope
data16
cmp
inc
cmp
push
add
pop
adc
jb
call
xor
inc
add
jle
push
outs
cmp
pop
js
adc
call
ins
jo
push
xor
imul
fist
dec
jb
mov
ficom
(bad)
pop
add
adc
jb
jecxz
inc
sbb
xor
inc
sti
(bad)
in
out
ins
or
xor
popa
push
sti
(bad)
inc
adc
jb
add
arpl
cmp
popa
and
pop
outs
xor
pop
retfw
outs
mov
cmc
ja
dec
adc
call
push
xor
imul
icebp
outs
gs
icebp
arpl
repz
inc
sbb
arpl
out
inc
loop
inc
int3
inc
xor
push
mov
pop
popa
push
idiv
outs
add
sbb
pop
js
adc
sbb
push
inc
fs
(bad)
(bad)
cmp
aas
jb
loope
push
and
jno
cli
imul
ds
(bad)
out
adc
jb
call
xor
dec
push
jb
std
(bad)
jmp
aas
gs
fdiv
outs
fcomp
not
fstp
xor
jno
sbb
add
jno
push
cmc
arpl
(bad)
pop
push
and
pop
outs
xor
add
aas
gs
in
jb
cmc
ds
in
data16
push
je
pop
pop
outs
loope
ja
int
adc
push
div
fdivrp
pop
jae
inc
outs
pop
idiv
call
aas
jb
call
ds
cmp
pop
add
dec
push
xchg
cmps
cs
mov
pop
add
in
jno
push
data16
pop
arpl
pusha
gs
(bad)
(bad)
mov
in
jno
jp
data16
js
and
sbb
gs
ds
jecxz
arpl
pop
outs
sbb
and
in
jno
in
push
je
inc
jb
out
in
outs
jae
add
cli
addr16
sti
repz
gs
dec
js
inc
loopne
imul
fcomp
lea
lds
movs
out
gs
out
jb
out
outs
jno
xchg
add
out
gs
pop
cmp
(bad)
in
arpl
lock
and
cmp
jae
inc
add
push
push
popa
and
pop
inc
and
add
clc
pop
outs
fst
xchg
add
jecxz
push
mov
push
aad
or
popa
in
inc
fs
clc
push
inc
int
fild
jmp
inc
fs
clc
push
push
lea
push
add
arpl
fistp
cmp
and
inc
hlt
outs
inc
rcr
popa
mov
adc
push
pop
ins
push
(bad)
jmp
adc
add
pop
je
cmc
pop
jne
adc
add
hlt
outs
inc
pop
repz
add
ficom
push
jb
cmp
(bad)
push
push
dec
gs
repnz
inc
adc
pop
loop
popa
jmp
adc
push
jo
repnz
or
pop
add
ficomp
and
pop
inc
and
pop
dec
add
cmp
pop
inc
lea
arpl
cli
push
ins
mov
pop
jne
fdivr
inc
push
xor
push
pop
ins
jo
ins
jo
adc
push
xor
jno
and
cmp
jae
xor
jg
xor
push
aas
push
sbb
icebp
arpl
fnstcw
push
fst
add
inc
popa
mov
icebp
pop
push
add
cld
out
pop
add
push
ss
icebp
cmp
std
jno
or
pop
outs
and
hlt
not
add
arpl
out
jb
(bad)
pusha
gs
dec
je
stc
pop
scas
inc
add
or
ins
push
sbb
outs
outs
std
push
outs
outs
cmc
outs
pusha
cli
arpl
adc
add
arpl
push
ins
add
jo
pop
data16
add
xor
aas
fs
(bad)
push
push
mov
pop
inc
fst
inc
add
cmc
arpl
loop
outs
add
jo
inc
add
arpl
xor
fcomp
xor
pop
dec
cld
std
push
ins
lock
add
pusha
push
cmp
popa
cmp
jns
dec
ficomp
out
push
ins
mov
pop
je
sti
pop
inc
add
mov
cli
outs
jo
arpl
jmp
aas
fs
icebp
pop
fs
(bad)
call
dec
pop
outs
push
cli
pop
fiadd
add
dec
pop
outs
push
cli
pop
gs
push
fst
xor
jae
push
pop
ins
add
data16
int
rol
repz
idiv
data16
shl
pop
lea
add
pop
je
push
pop
outs
cs
pop
gs
adc
inc
retf
outs
mov
loopne
je
inc
add
leave
adc
jb
in
inc
jp
outs
outs
cmp
inc
add
aas
jb
icebp
arpl
stc
pop
gs
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
mov
add
mov
add
mov
add
mov
add
mov
add
cmp
add
dec
mov
add
sub
scas
xor
mov
js
cmp
xor
inc
and
dec
push
and
xor
pop
arpl
outs
gs
js
jns
aam
outs
ss
popa
ja
inc
pop
sub
dec
fs
xor
dec
adc
push
mov
add
out
inc
adc
call
lahf
cmp
popf
pop
add
mov
ss
ins
cmp
inc
inc
lea
add
dec
jne
add
jne
add
pop
add
sub
push
popa
inc
jo
mov
pop
data16
aas
add
pop
add
movhps
add
add
pop
add
ins
leave
cmp
or
leave
cmp
fcom
add
int
add
int
add
frstor
add
fst
add
int
add
int
add
popf
push
add
lahf
push
add
mov
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
or
adc
add
or
adc
add
add
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
add
sbb
add
push
cmp
dec
push
cmp
dec
push
cmp
sub
stc
push
cmp
dec
push
cmp
dec
push
cmp
dec
push
cmp
sbb
sub
jg
xor
jg
pop
cmp
popf
adc
add
adc
add
cmp
jne
cmp
ja
cmp
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
add
and
add
adc
adc
add
adc
add
adc
add
add
adc
add
sbb
add
in
add
fst
add
aam
add
mov
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
cwde
adc
add
add
add
aas
sbb
add
add
cmp
add
pop
sbb
add
sbb
add
add
pop
adc
add
sbb
add
add
prefetchnta
add
pop
add
or
add
mov
sbb
add
sbb
add
pop
add
add
add
add
ret
pop
add
mov
add
(bad)
pop
add
stc
pop
add
cwde
pop
add
or
add
mov
pop
add
test
adc
add
add
adc
add
pop
add
addr16
add
int3
pop
add
push
pop
add
fist
add
inc
pop
add
into
pop
add
inc
pop
add
mov
add
pop
add
mov
pop
add
sti
push
add
sbb
add
in
push
add
movhps
add
pop
add
out
add
repnz
add
mov
pop
add
int3
push
add
fwait
pop
add
iret
push
add
xchg
pop
add
cmps
push
add
lds
add
mov
push
add
test
add
dec
jae
add
cmp
add
pop
push
add
jnp
xor
pop
mov
pop
gs
sub
outs
jnp
outs
je
sar
add
xor
ins
lea
call
push
cmc
dec
push
add
sbb
jb
add
adc
add
stos
cmps
jmp
mov
xor
add
adc
int3
adc
add
pushf
adc
add
lea
add
pushf
adc
add
mov
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
sbb
adc
or
adc
add
fcom
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
repz
adc
add
cmp
push
adc
add
adc
add
adc
add
cmp
dec
adc
add
repz
aas
adc
add
repz
push
adc
add
adc
add
repz
aam
add
loope
cmp
(bad)
adc
add
add
adc
add
adc
add
cmp
fwait
adc
add
out
add
adc
add
out
add
add
mov
adc
add
adc
add
adc
add
cmp
xchg
adc
add
lock
adc
add
cmp
stc
adc
add
cmp
add
stos
adc
add
lock
call
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
adc
add
add
add
add
add
add
add
adc
add
jo
and
adc
ins
jo
and
adc
jge
adc
jge
adc
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
add
sbb
sbb
add
sbb
add
sbb
add
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
push
(bad)
(bad)
and
repnz
push
cmp
cmp
gs
adc
and
ins
jp
push
add
lea
xor
inc
add
push
sar
push
int3
inc
dec
pop
dec
inc
push
mov
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
add
or
adc
add
or
adc
add
fst
add
adc
add
adc
add
adc
adc
test
mov
test
int
add
int
add
mov
adc
add
js
and
adc
ins
js
and
adc
jge
adc
add
ins
js
and
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
aaa
bound
sub
add
xor
sbb
sbb
ja
or
popf
adc
add
xlat
xor
dec
cdq
cmp
push
push
add
add
add
dec
adc
add
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
dec
cmp
dec
pop
hlt
pop
rcr
add
ins
sub
add
(bad)
hlt
call
cmc
hlt
dec
add
cld
fst
add
or
adc
add
add
add
int
add
popf
adc
add
adc
add
mov
call
mov
dec
pop
add
sbb
(bad)
mov
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
add
dec
mov
dec
add
pop
add
pop
neg
mov
mov
push
add
pop
add
fst
add
int
add
int
add
pop
mov
(bad)
fst
add
or
pop
add
or
add
or
dec
fisubr
lods
add
pop
add
lea
add
lea
add
fadd
int3
fidivr
or
add
dec
pop
add
sbb
add
mov
add
dec
pop
add
sbb
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
push
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
add
lea
add
lea
add
popf
push
add
popf
push
add
int
cmp
lea
add
pop
push
add
pop
push
add
or
push
add
pop
push
add
pop
push
add
or
push
add
sbb
push
add
int
cmp
or
push
add
sbb
push
cmp
or
adc
fst
add
int3
adc
add
fst
add
icebp
push
cmp
popf
adc
add
in
cmp
dec
jmp
int
cmp
aad
cmp
mov
cmp
aad
cmp
dec
adc
add
xchg
adc
add
add
sub
call
add
adc
cmp
std
fidivr
add
cmp
inc
fstp
add
cmp
dec
fstp
add
fidivr
add
cmp
stc
fidivr
add
fidivr
add
fidivr
add
cmp
push
fstp
add
fidivr
add
fstp
add
fidivr
add
fidivr
add
cmp
cmp
fidivr
add
add
cmp
xchg
(bad)
cmp
(bad)
(bad)
cmp
cdq
(bad)
cmp
xchg
(bad)
cmp
popf
(bad)
cmp
and
cmp
cmp
cmp
xor
cmp
adc
cmp
inc
fidivr
add
fidivr
add
fnstcw
add
fnstcw
add
fnstcw
add
fnstcw
add
fnstcw
add
ja
inc
add
adc
add
adc
add
adc
add
adc
add
adc
add
imul
add
imul
add
imul
add
add
add
push
add
sbb
adc
sbb
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
cmc
add
add
add
add
add
add
add
dec
lar
pop
lar
pop
lar
push
adc
add
adc
add
adc
add
adc
add
cmp
fcom
add
loope
cmp
add
(bad)
adc
add
cmp
jbe
add
movs
fnstcw
add
adc
add
cmp
into
adc
add
adc
add
cmp
mov
add
mov
cmp
cwde
adc
add
sbb
add
cmp
cmp
(bad)
cmp
pusha
sbb
add
sbb
add
sar
add
add
add
icebp
sar
add
sar
add
sbb
add
sbb
add
pop
add
(bad)
(bad)
cmp
leave
pop
add
cdq
sar
add
add
pop
add
(bad)
(bad)
cmp
xchg
pop
add
xor
pop
add
pop
(bad)
cmp
xchg
pop
add
in
cmp
outs
sbb
add
lds
add
add
add
std
les
add
add
test
pop
add
rol
add
pop
add
aad
cmp
sbb
pop
lock
pop
add
or
call
or
pop
adc
fst
add
fst
add
int
add
fcom
add
int
add
hlt
call
hlt
dec
push
add
lods
xchg
call
and
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
add
mov
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
ins
movs
cmp
sub
cwde
jmp
pop
adc
add
or
add
add
pop
adc
add
jmp
add
adc
add
and
adc
add
inc
adc
add
int3
adc
add
sbb
add
sbb
add
call
add
adc
add
inc
adc
add
jle
add
add
scas
pop
add
lea
add
jp
add
pop
pop
add
leave
sbb
add
add
dec
sbb
add
push
adc
add
add
lea
add
jmp
add
add
adc
sbb
add
adc
add
xchg
jmp
fst
add
fst
add
int
(bad)
aas
add
int
add
fst
add
fstp
stc
aas
int
add
int
add
popf
icebp
cld
aas
popf
adc
add
pop
inc
popf
adc
add
xlat
sti
aas
lea
add
pop
adc
add
push
inc
dec
adc
add
add
pop
adc
add
add
test
adc
add
add
sub
adc
mov
pop
(bad)
cmp
call
test
mov
je
and
(bad)
std
jg
in
mov
xchg
push
add
mov
push
xchg
inc
mov
lods
inc
push
leave
cmps
jp
cmp
inc
cmp
aam
mov
mov
inc
stc
xchg
addr16
add
jb
xor
leave
int
ficom
imul
imul
jecxz
out
das
mov
add
stos
movs
mov
test
repz
xchg
xchg
jmp
call
jbe
or
xchg
jb
repz
sub
xor
add
call
(bad)
push
cmp
mov
pop
mov
lock
xor
push
lock
and
out
xchg
leave
sbb
jmp
jb
sahf
enter
outs
mov
xchg
xchg
cmp
fcomp
jne
adc
add
fadd
int3
(bad)
ror
fdiv
aas
sbb
or
(bad)
pusha
xor
inc
mov
aaa
fild
add
popf
sub
jmp
gs
test
in
lea
test
adc
lods
nop
mov
mov
mov
fisubr
leave
xchg
fcmovb
sar
fist
add
aas
mov
cwde
fsubr
aas
mov
pop
rcl
fwait
aas
add
or
and
mov
aas
xor
mov
imul
dec
shr
dec
jl
scas
dec
aas
inc
cli
sbb
shr
aas
jno
cdq
jmp
sbb
es
call
jl
inc
jge
dec
ds
outs
repnz
mov
xor
out
sbb
ja
inc
add
ins
shl
cmp
push
cmp
lahf
dec
or
fsub
shl
cmp
mov
sbb
push
pusha
adc
ds
cs
adc
xchg
stos
rol
test
adc
inc
mov
add
sbb
jecxz
cmp
fsub
cmp
mov
mov
push
dec
bnd
add
push
sbb
pop
pop
bound
xor
cmp
lahf
fcmovnb
mov
or
cmp
pop
push
add
jnp
xor
outs
lahf
jne
gs
push
hlt
inc
push
add
sti
sub
cmp
jp
xor
add
or
lea
add
daa
xor
gs
inc
ins
mov
popa
pop
inc
or
mov
add
adc
xor
imul
arpl
push
hlt
call
lea
add
daa
xor
gs
fs
cmp
mov
xor
pop
adc
xchg
mov
add
add
sub
xor
ja
jno
inc
lea
add
mov
add
sub
popa
cs
pop
cs
outs
imul
daa
adc
lds
pop
and
imul
fs
aas
mov
pusha
ins
cli
jae
je
arpl
frstor
inc
inc
add
cs
pop
inc
int
add
aad
cmp
popf
adc
add
xor
push
and
outs
ret
popa
mov
or
cdq
jnp
popa
jno
outs
inc
xchg
push
outs
je
push
xor
pop
fs
inc
pop
adc
add
cmp
or
sub
jb
jle
pop
das
jno
gs
push
push
hlt
jmp
adc
add
sub
outs
loope
pop
outs
lock
dec
(bad)
in
pop
pop
pop
cs
jne
je
jae
inc
xor
lea
add
inc
mov
add
sub
lods
fs
outs
mov
push
xor
xchg
mov
add
add
cmp
xor
pop
add
ins
jl
outs
jle
outs
je
push
xor
push
mov
add
sub
imul
jp
inc
cs
inc
sbb
mov
add
adc
add
jae
addr16
dec
fbld
jb
pop
push
call
mov
add
inc
xor
add
add
cmp
lea
add
mov
pop
pop
adc
add
adc
add
sub
push
jb
jp
gs
pop
push
push
cmp
inc
std
cmp
sbb
add
or
add
sbb
add
mov
cmp
std
sti
cmp
fst
add
retf
adc
add
adc
add
add
cmp
int
add
mov
adc
add
pop
cmp
or
cmp
jmp
add
cmp
xor
cmp
ins
mov
arpl
jb
outs
mov
sbb
pop
push
jo
pusha
pop
outs
bound
jb
cli
jae
je
jbe
outs
jnp
outs
je
sbb
pop
cmp
sub
push
and
xor
push
gs
pop
push
imul
inc
xor
fst
add
int
add
int
add
popf
adc
add
adc
add
adc
add
adc
add
sbb
add
add
dec
sbb
add
add
add
pop
sbb
add
add
dec
sbb
add
add
sbb
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
mov
add
addr16
add
addr16
add
in
cmp
cmp
and
add
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
add
fst
add
rcl
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
xchg
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
push
push
add
add
sbb
push
add
or
push
add
sbb
push
add
adc
add
or
adc
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
mov
adc
add
add
lea
add
pop
adc
add
push
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
sbb
adc
add
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
and
je
jne
pop
jo
outs
outs
das
push
outs
je
pop
xor
or
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
dec
adc
or
add
xor
add
add
pop
sbb
add
add
dec
sbb
call
add
adc
or
add
adc
sbb
add
ins
adc
or
add
and
add
sbb
sbb
add
add
fst
add
rcl
add
int
cmc
(bad)
fcom
add
jge
add
add
int
add
mov
pop
cmc
inc
adc
add
pop
add
popf
pop
add
xchg
pop
add
lea
cmc
call
add
add
dec
pop
add
dec
pop
add
popa
pop
add
pop
pop
cmc
inc
add
add
sbb
pop
add
adc
add
or
or
add
add
add
or
pop
add
loope
add
fst
cmc
call
adc
add
sldt
add
sub
add
add
int
add
lods
pop
idiv
inc
pop
add
jno
add
lea
add
cmc
push
bnd
or
add
call
xor
add
sub
add
adc
add
or
add
add
inc
push
add
in
adc
add
or
and
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
inc
adc
xchg
outs
dec
popa
xlat
jne
push
mov
frstor
mov
sti
xchg
mov
sti
xchg
mov
lock
(bad)
pop
retf
pop
imul
ins
dec
ja
bound
fst
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
add
adc
add
adc
add
adc
add
cmp
imul
push
mov
inc
cmp
jbe
inc
xchg
inc
xchg
call
movs
popf
(bad)
aas
mov
mov
jmp
jg
jmp
push
cmp
jae
inc
inc
add
cmp
arpl
xchg
addr16
sbb
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
dec
push
pop
dec
mov
bound
sti
jo
cmp
jmp
cmps
movs
jmp
mov
or
mov
jecxz
(bad)
jmp
lds
(bad)
stc
(bad)
sar
jmp
push
call
inc
add
test
mov
inc
inc
aad
push
inc
cli
scas
ins
dec
mov
arpl
int
add
int
add
popf
adc
add
adc
add
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
sbb
adc
add
adc
add
cmp
outs
arpl
sti
jno
xor
or
push
stos
test
mov
inc
lock
dec
hlt
fcos
jb
fdivr
jne
(bad)
push
icebp
into
call
pop
inc
add
popa
jmp
jmp
push
push
jmp
pop
call
dec
call
dec
jmp
into
dec
jmp
cmp
dec
or
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
retf
inc
inc
es
inc
in
ds
jb
inc
push
dec
jmp
push
jmp
mov
jmp
repnz
in
out
clc
(bad)
(bad)
ffree
in
ffreep
out
push
shl
mov
add
setno
pop
sub
test
imul
(bad)
jns
push
pop
jmp
lods
pusha
jmp
mov
push
mov
dec
(bad)
cli
xchg
dec
loop
inc
dec
cmp
push
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
push
cwde
dec
pop
xor
clc
cmp
jmp
(bad)
jp
push
jmp
pop
call
call
(bad)
sahf
(bad)
out
push
loop
arpl
loop
bound
loop
mov
loop
add
mov
jmp
pop
sub
sub
sub
sub
sub
sub
sub
push
cmps
pop
call
pop
jmp
call
dec
iret
dec
div
cmp
or
adc
add
sbb
adc
add
add
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
rcl
scas
cmp
inc
jmp
inc
jmp
push
jmp
pop
jmp
(bad)
mov
call
loop
and
jecxz
repz
in
in
inc
add
jmp
mov
pop
fwait
dec
lods
imul
push
imul
push
imul
jmp
dec
stos
imul
test
outs
jmp
ja
(bad)
out
ror
mov
xor
adc
add
adc
add
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
jp
jno
push
cmp
fadd
dec
push
pop
call
popa
jmp
fs
test
inc
(bad)
jmp
jmp
add
(bad)
jmp
gs
push
in
jmp
jo
retf
call
imul
push
push
(bad)
jp
imul
push
imul
pop
stos
imul
sub
push
jmp
xchg
pop
(bad)
cmp
dec
test
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
xchg
pop
push
ret
jo
inc
xchg
inc
(bad)
(bad)
push
jmp
jb
call
pop
jmp
push
(bad)
cmp
ja
sbb
jmp
in
jecxz
add
and
jecxz
bnd
jmp
jmp
jmp
call
jecxz
cmc
call
mov
dec
stos
imul
push
imul
push
imul
jmp
dec
stos
push
jmp
test
jmp
cmps
outs
push
loopne
pop
(bad)
fcmovnb
dec
std
push
xor
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
outs
inc
clc
inc
xchg
inc
(bad)
out
(bad)
push
jmp
jbe
dec
jns
(bad)
fild
dec
scas
ins
jmp
mov
in
inc
add
jecxz
jmp
jecxz
jmp
jecxz
(bad)
jecxz
(bad)
jecxz
mov
jecxz
call
jp
jmp
call
imul
push
imul
jp
imul
push
imul
pop
scas
imul
sub
imul
push
jmp
jp
jmp
outs
pop
jmp
push
not
inc
xor
pop
add
fst
add
fst
add
int
add
int
add
fst
add
mov
xchg
inc
in
xchg
inc
(bad)
out
les
mov
pop
dec
cmps
outs
dec
mov
ins
call
ins
call
jbe
add
out
mov
jmp
jecxz
jmp
jecxz
jmp
loopne
push
(bad)
jmp
(bad)
jmp
(bad)
jmp
(bad)
call
(bad)
sub
stos
(bad)
jmp
or
(bad)
aad
(bad)
jp
imul
jmp
(bad)
fisubr
imul
imul
mov
lahf
imul
out
popa
push
pop
jmp
push
frstor
dec
pop
lea
add
pop
adc
add
dec
adc
add
cwde
movs
pop
test
xchg
cmp
pop
cwde
push
push
call
arpl
push
lods
jbe
loopne
jbe
add
shr
je
cmp
loop
mov
(bad)
jmp
in
in
call
loopne
jmp
jecxz
xchg
(bad)
mov
in
jmp
in
jmp
in
jmp
mov
fwait
call
lods
imul
imul
sub
imul
jmp
dec
sahf
outs
call
popa
jmp
pop
jmp
mov
adc
add
adc
add
adc
add
adc
add
fs
adc
push
stc
popf
cwde
inc
jmp
gs
movs
ins
call
stos
jbe
add
shr
jbe
push
test
(bad)
cld
movs
cdq
jmp
in
jmp
loop
jmp
loop
jmp
jmp
call
loope
jmp
in
push
jmp
mov
in
jmp
loop
jmp
loop
jmp
add
mov
xchg
(bad)
fisub
imul
stos
stos
imul
jmp
dec
mov
outs
call
call
push
imul
inc
and
add
pop
adc
add
add
dec
adc
add
(bad)
dec
jmp
lds
sub
jmp
arpl
add
cmps
jo
push
cmps
ja
push
cmps
jo
loop
ja
iret
mov
sar
mov
jecxz
jmp
jecxz
jmp
jecxz
jmp
jecxz
(bad)
jecxz
(bad)
jecxz
mov
jecxz
mov
in
jmp
in
jmp
in
jmp
add
jecxz
jmp
jecxz
jmp
jecxz
jmp
jecxz
(bad)
clc
add
sub
(bad)
cmp
imul
retf
call
push
jmp
push
jmp
dec
test
fst
add
int
add
or
xchg
dec
sti
mov
outs
inc
add
mov
jo
out
jno
aam
jo
aam
jo
inc
test
jae
mov
aam
push
aam
jmp
aam
jmp
aam
push
shl
jmp
shl
jmp
shl
jmp
loopne
push
shl
jmp
shl
push
shl
inc
add
shl
push
shl
jmp
shl
push
loop
dec
add
jmp
lahf
imul
jmp
dec
xchg
imul
imul
(bad)
retf
jne
inc
adc
add
dec
pop
add
jge
pusha
jl
ror
add
pop
call
xchg
ja
pushfw
imul
pushf
push
push
pushf
push
push
lahf
jno
leave
sahf
jno
in
mov
jmp
fucomip
jmp
shl
jmp
shl
jmp
jecxz
(bad)
jecxz
gs
push
in
jmp
iret
loop
imul
jmp
inc
into
lods
dec
shl
jmp
shl
jmp
shl
push
iret
jecxz
loope
jmp
jmp
sahf
imul
pop
xchg
imul
mov
mov
inc
mov
call
int
in
mov
(bad)
mov
adc
add
add
setp
mov
push
call
movs
arpl
push
pushf
jno
jmp
pushf
push
(bad)
pushf
push
(bad)
pushf
jno
aaa
test
dec
loopne
jmp
shl
push
shl
jmp
shl
jmp
shl
jmp
shl
push
into
loop
jecxz
loop
loop
jecxz
loop
jecxz
mov
jecxz
(bad)
lods
sar
add
mov
jno
retf
(bad)
(bad)
(bad)
mov
jae
inc
enter
ins
mov
xor
push
jecxz
xchg
fucomp
jmp
pushf
imul
mov
jmp
fsub
jmp
fucomi
push
(bad)
mov
adc
add
dec
(bad)
push
mov
outs
call
movs
jne
push
movs
je
pop
(bad)
movs
imul
test
call
shr
jmp
fninit
jmp
fninit
jmp
(bad)
jmp
loop
arpl
loop
(bad)
fninit
inc
add
out
mov
call
nop
jbe
iret
mov
pop
nop
ins
call
ins
dec
arpl
dec
mov
mov
jbe
push
jmp
push
(bad)
jmp
(bad)
(bad)
cli
out
jmp
fucomp
jmp
(bad)
jmp
(bad)
jmp
fsubr
inc
add
jecxz
call
inc
or
loope
dec
(bad)
fcmovnb
inc
ins
call
mov
(bad)
jne
fimul
je
dec
mov
xchg
retf
movs
retf
movs
iret
in
push
fsub
jmp
fsub
jmp
fsub
jmp
fsub
push
fninit
jmp
fninit
inc
add
fninit
push
jo
push
mov
push
mov
push
mov
loopne
jbe
fimul
ins
dec
mov
sbb
arpl
sbb
arpl
add
jo
sbb
inc
(bad)
jmp
jecxz
(bad)
fninit
push
out
jmp
fsub
call
add
fnclex
call
(bad)
inc
shr
(bad)
data16
sahf
push
call
lea
jge
jne
lea
call
jne
outs
test
jmp
leave
in
jmp
leave
in
push
fsub
jmp
fsub
inc
add
jecxz
(bad)
fsub
jmp
(bad)
call
nop
jno
in
jno
in
jo
aad
ja
ror
ja
push
(bad)
jbe
push
nop
jbe
dec
nop
ins
call
mov
mov
push
jo
mov
jecxz
jmp
jecxz
jmp
jecxz
push
jecxz
jmp
add
jecxz
jmp
loop
jmp
mov
dec
mov
(bad)
pop
retf
leave
rcr
lahf
outs
call
nop
push
dec
jle
jnp
jne
jmp
call
iret
in
jmp
iret
in
push
loop
inc
add
loop
push
loope
push
out
(bad)
jl
jle
pop
(bad)
imul
(bad)
(bad)
jno
push
(bad)
(bad)
jo
les
jbe
ror
jmp
(bad)
ins
call
(bad)
ins
dec
lea
jae
call
fwait
(bad)
call
loop
jmp
jecxz
jne
in
inc
add
in
jmp
(bad)
push
loopne
jmp
(bad)
mov
dec
lds
dec
lods
push
inc
imul
mov
jg
jg
mov
jg
xchg
into
call
int
jmp
enter
add
in
jmp
enter
enter
cli
xchg
call
mov
mov
mov
(bad)
imul
mov
inc
mov
inc
mov
push
mov
push
mov
mov
mov
xchg
mov
xchg
mov
test
loop
jecxz
in
in
inc
add
int3
in
push
loopne
jmp
loopne
push
fucomip
jmp
mov
call
test
dec
test
mov
inc
jg
push
mov
push
mov
sti
movs
cmp
xchg
(bad)
in
call
add
in
push
leave
in
jmp
leave
in
(bad)
cmp
fdivr
(bad)
lea
jge
jle
jl
jle
push
je
pop
mov
lea
lea
mov
(bad)
mov
aam
jno
aad
ja
and
ja
adc
(bad)
ds
inc
add
jecxz
jmp
jecxz
jne
in
jmp
loop
jmp
in
jmp
aad
jmp
imul
js
outs
push
lock
popa
dec
mov
jle
jg
jle
jg
mov
jb
mov
lods
jmp
add
retf
in
jmp
in
push
enter
retf
in
jmp
jmp
dec
dec
jle
or
mov
sti
mov
dec
mov
pop
(bad)
je
push
(bad)
xchg
movs
xchg
xchg
xchg
xchg
xchg
add
sbb
in
jmp
loop
jmp
jecxz
push
enter
jecxz
jmp
loop
call
jmp
imul
push
imul
ja
popa
cli
loop
push
dec
xchg
pop
dec
xchg
push
mov
dec
dec
lea
jmp
mov
in
call
leave
in
jmp
leave
in
push
in
push
in
jmp
in
(bad)
jge
cmp
adc
js
mov
jle
jg
jg
jge
jle
retf
(bad)
fimul
imul
lea
daa
lea
add
and
xchg
dec
movs
xchg
push
jecxz
arpl
loop
arpl
loop
arpl
loop
mov
loop
mov
(bad)
jmp
dec
jne
push
imul
push
imul
jbe
pop
jmp
dec
not
test
sbb
js
add
xchg
call
movs
loopne
jmp
in
call
loopne
jmp
in
push
in
jmp
mov
call
fdiv
add
jb
add
jb
adc
jns
(bad)
cdq
jg
(bad)
call
dec
call
add
pop
pushf
imul
pushf
imul
pushf
push
jg
imul
clc
ret
loopne
jmp
ret
jmp
jmp
loopne
push
loop
jmp
cli
mov
pop
mov
(bad)
jmp
(bad)
jmp
imul
jmp
rcl
xchg
pop
dec
test
push
cdq
jg
add
add
jns
(bad)
popf
jae
ss
in
jmp
fucomip
call
fucomip
jmp
fsubrp
push
loope
dec
aad
push
xchg
test
jge
push
aad
inc
fdiv
sbb
iret
cwde
jg
mov
xchg
jne
sub
imul
test
jae
loop
pusha
loope
jmp
loop
(bad)
(bad)
push
loopne
jmp
fwait
jae
pop
lahf
arpl
pop
lahf
imul
push
(bad)
(bad)
jp
imul
xchg
shl
je
inc
add
xchg
js
jle
jns
sbb
loopne
movs
fucomp
jmp
loopne
call
fsubrp
jmp
fucomp
push
in
dec
rol
push
(bad)
jge
pop
rol
call
aad
inc
aad
inc
add
aad
call
js
dec
xchg
js
aas
xchg
jg
cmp
jg
lea
jle
or
in
jecxz
repz
jecxz
loop
loop
jecxz
cmc
lock
push
lock
jmp
(bad)
dec
(bad)
fsubr
arpl
int
(bad)
dec
stos
(bad)
(bad)
jp
(bad)
(bad)
call
add
mov
bt
test
dec
xchg
jg
add
jns
dec
xchg
xchg
push
in
jmp
jmp
xchg
jmp
jmp
jmp
push
jmp
(bad)
in
iret
mov
imul
cmp
fld
dec
fld
(bad)
xchg
test
jl
test
jl
rcl
jns
rcl
(bad)
mov
xchg
jg
les
call
push
loop
(bad)
jmp
(bad)
jmp
mov
aad
dec
mov
call
ins
call
dec
dec
arpl
add
jp
imul
nop
xchg
mov
dec
xchg
jle
adc
into
jmp
jmp
jmp
lock
call
lock
jmp
lock
jmp
(bad)
test
jmp
cmp
fadd
dec
fld
fld
call
fadd
inc
jae
xor
fdiv
inc
fdivr
inc
xchg
js
nop
xchg
jns
in
les
jmp
in
jecxz
repz
loop
jecxz
loop
jecxz
mov
loop
fprem
int3
call
ins
dec
ins
(bad)
fisubr
ins
inc
add
stos
arpl
int
arpl
sbb
lahf
push
popa
push
xchg
push
adc
(bad)
pop
inc
movs
(bad)
dec
jle
add
jmp
jmp
in
jmp
out
in
call
out
in
jmp
jmp
into
dec
fdivr
jge
cmp
jp
ins
xlat
jp
mov
cmp
mov
cmp
(bad)
xchg
xchg
xchg
aaa
(bad)
xchg
xor
stos
jae
rcl
inc
cmps
jl
cmp
(bad)
movs
call
in
push
jecxz
arpl
loop
arpl
loop
(bad)
jecxz
mov
jecxz
fisttp
call
test
inc
add
ins
call
ins
dec
ins
dec
ins
(bad)
jnp
outs
(bad)
popf
xchg
push
sbb
add
xchg
mov
test
inc
fsubr
push
out
in
jmp
out
in
call
out
in
jmp
out
in
push
fstp
inc
add
sar
cld
sar
in
sar
in
aad
(bad)
std
aam
(bad)
std
aad
dec
(bad)
cmp
cmp
xchg
xor
jge
inc
xlat
jae
inc
stos
jns
std
shl
jmp
jmp
in
jmp
(bad)
jmp
(bad)
jmp
(bad)
call
stc
fdivrp
gs
jo
add
push
lods
jbe
push
scas
jbe
jecxz
jbe
shr
ins
dec
lods
ins
call
adc
add
adc
mov
call
mov
jae
push
lods
mov
jge
fdivr
mov
in
in
jmp
in
jmp
loopne
jmp
clc
sar
add
mov
rol
(bad)
jle
test
jle
test
outs
sar
outs
fdivr
jg
jnp
jge
cmp
imul
(bad)
cmp
xchg
aaa
(bad)
jge
(bad)
sar
mov
sar
xor
in
jmp
in
call
loopne
jmp
in
jmp
jecxz
add
push
ficomp
call
lods
jbe
shr
ja
push
test
ins
call
ins
(bad)
js
push
je
adc
add
add
nop
xchg
push
or
cdq
sahf
ja
test
jl
cs
push
cmp
mov
mov
push
out
inc
add
ret
or
cmp
scas
aam
(bad)
jmp
jnp
(bad)
aam
(bad)
out
out
(bad)
out
out
(bad)
call
test
cld
aam
(bad)
in
out
(bad)
jmp
dec
xchg
inc
sar
sbb
in
jmp
loop
jmp
loop
jmp
in
call
in
call
add
jmp
push
lods
push
push
cmps
jo
push
test
jbe
shl
jbe
shl
adc
adc
add
adc
add
adc
add
xchg
add
arpl
jmp
jns
adc
jl
out
movs
jl
hlt
lahf
jge
sub
mov
xchg
sub
cmp
iret
cmp
scas
in
(bad)
jg
jnp
jle
test
jno
test
outs
in
(bad)
jg
test
jl
test
ins
aam
jmp
jp
cmp
cmp
das
test
(bad)
aas
icebp
int
mov
jecxz
mov
call
in
inc
add
call
in
(bad)
aas
mov
imul
test
call
cmps
push
aam
jo
inc
cmps
jo
push
test
ja
dec
mov
pop
adc
add
add
dec
adc
add
add
mov
mov
cmc
fwait
mov
inc
sar
sar
sar
add
test
jae
aaa
iret
xchg
aaa
sar
retf
dec
into
cmp
iret
cmp
in
jmp
in
(bad)
jmp
jnp
(bad)
in
(bad)
out
in
push
in
(bad)
jmp
jnp
jmp
test
in
in
(bad)
in
in
(bad)
cmp
cmp
sub
jecxz
xor
jecxz
xor
add
loope
call
repz
mul
loope
jle
jle
imul
call
jno
les
jo
shl
pop
adc
pop
add
fst
add
int
add
int
add
fst
add
sbb
ins
(bad)
call
jl
add
add
jge
add
fnstenv
aaa
(bad)
xchg
aaa
fnstcw
dec
xlat
xchg
dec
xlat
cmp
xlat
cmp
lods
xlat
cmp
jg
jnp
jg
jnp
outs
aad
jmp
jnp
jl
test
jl
jp
ins
aam
jmp
cmp
cmp
stos
cmps
jmp
xor
fucomip
jmp
in
call
fucomip
jmp
test
(bad)
jmp
(bad)
fstp
jno
inc
sahf
jno
inc
popf
jno
push
mov
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
xchg
fs
add
add
push
nop
test
jae
test
jge
test
jge
aaa
aam
push
xlat
jge
(bad)
rol
call
aam
dec
aad
dec
aad
jmp
aam
(bad)
cld
loope
(bad)
in
loope
(bad)
out
loop
(bad)
cld
loope
(bad)
cld
loope
(bad)
in
loope
(bad)
jmp
cmp
rol
inc
add
mov
cmp
cmps
cmps
(bad)
out
fisubr
push
cli
fdivr
repnz
jecxz
in
icebp
out
inc
stos
jle
lea
jne
pop
pushf
imul
pushf
imul
fwait
jno
lds
add
adc
add
fst
add
adc
add
adc
add
adc
add
add
adc
add
xchg
push
sbb
mov
jle
add
jb
add
jge
add
jge
aaa
fidivr
fiadd
inc
xchg
fwait
xlat
cmp
(bad)
cmp
xlat
cmp
int3
jp
jge
cmp
outs
int3
jnp
ins
int3
jp
jge
cmp
mov
cmp
add
cmp
xchg
fiadd
jmp
mov
inc
cmps
xchg
(bad)
mov
(bad)
mov
scas
xchg
adc
jp
out
jp
jmp
dec
jle
or
movs
je
stc
scas
imul
mov
hlt
inc
test
adc
add
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
ds
movs
jg
sbb
inc
fdivr
aaa
fld
dec
aad
call
(bad)
cmp
(bad)
cmp
fld
(bad)
mov
xlat
cmp
or
cmp
or
cmp
cmp
ss
xchg
dec
(bad)
xchg
inc
(bad)
xchg
inc
(bad)
xchg
xchg
fdiv
xchg
fdivr
fdiv
test
jb
mov
jb
sbb
js
jg
jg
mov
jle
pop
movs
je
jnp
imul
mov
cmp
or
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
lods
pop
pop
fisub
js
add
sar
aaa
(bad)
jl
inc
sar
inc
(bad)
xchg
xchg
xlat
jge
xchg
xlat
xchg
mov
cmp
(bad)
cmp
xlat
cmp
mov
cmp
add
pop
(bad)
cmp
xlat
cmp
(bad)
xchg
xchg
xchg
cmp
jge
xlat
xchg
(bad)
(bad)
xchg
(bad)
(bad)
jl
adc
jae
adc
shl
add
jl
adc
jb
add
jns
add
dec
movs
jg
or
lods
jne
(bad)
mov
add
popf
adc
add
add
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
add
sbb
mov
imul
movs
js
rcl
jl
xor
jge
(bad)
aad
inc
sar
pop
sar
push
(bad)
xchg
or
xchg
push
xlat
xchg
mov
(bad)
xchg
add
or
xchg
or
cmp
(bad)
cmp
aad
inc
(bad)
xchg
jmp
(bad)
xchg
aaa
(bad)
xchg
inc
shl
inc
sar
sar
sar
adc
inc
shl
sub
js
(bad)
mov
arpl
add
sbb
add
pop
add
or
push
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
add
mov
jns
inc
test
jae
inc
(bad)
jl
xchg
(bad)
xchg
xchg
aad
dec
rol
(bad)
xchg
mov
xchg
xchg
xchg
mov
cmp
(bad)
xchg
push
(bad)
xchg
mov
xchg
xchg
xchg
xor
jge
aaa
aam
inc
(bad)
jge
(bad)
call
xlat
jge
add
jb
add
jns
adc
jb
add
js
(bad)
cmps
jg
or
je
std
lahf
jo
lea
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
push
rol
test
inc
aam
inc
aad
call
jae
pop
rol
rol
push
rol
inc
rol
call
rol
inc
sar
sar
sar
sar
iret
jge
xchg
shl
adc
inc
stos
jns
nop
stos
jns
mov
jg
jl
jno
xor
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
push
fs
jae
add
xchg
sar
sar
xchg
jae
xchg
jae
mov
xchg
mov
jge
test
jge
test
jge
push
into
xchg
push
shl
test
jae
test
jl
xor
jge
ret
inc
iret
jge
ret
shl
adc
jb
add
jb
add
jns
push
lods
jle
or
jp
lods
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
add
ins
or
movs
ja
adc
jns
add
sar
mov
jge
mov
jae
add
jae
pop
sar
shl
aam
jae
add
jge
add
jl
xor
sar
inc
shl
inc
stos
jae
nop
shl
adc
inc
stos
jg
mov
push
add
fmul
mov
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
jno
pop
mov
jae
cmp
xchg
jnp
push
pop
jnp
sbb
xchg
pop
jnp
sbb
sbb
sbb
rcl
inc
pop
je
ret
push
jnp
sar
adc
(bad)
adc
jns
push
add
dec
pop
test
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
sbb
jg
cmp
jle
jg
jl
mov
jl
xlat
aad
ja
add
stc
add
pop
jbe
aaa
jns
(bad)
ss
mov
jp
jl
jp
cmp
add
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
stos
aaa
rol
mov
repz
cmp
jmp
repz
cmp
inc
add
repz
push
repz
xchg
repz
add
lea
add
pop
clc
repz
adc
repz
sbb
add
adc
add
hlt
(bad)
std
adc
add
adc
add
adc
add
dec
adc
or
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
popf
adc
add
adc
add
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
sbb
adc
add
adc
add
sbb
add
sbb
add
add
fstp
add
lea
add
int
add
popf
sbb
add
push
add
lea
add
int
add
jge
add
popf
sbb
add
and
add
add
adc
add
adc
add
repz
adc
add
repz
adc
add
repz
jmp
(bad)
cli
push
repz
xor
jmp
xor
call
xor
jmp
xor
(bad)
cmp
jecxz
stos
xor
push
add
ins
sbb
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
mov
dec
addr16
mov
rol
ins
xchg
cli
stc
ins
fwait
cli
hlt
popa
xchg
jmp
inc
mov
jbe
inc
adc
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
add
dec
adc
add
inc
sub
mov
mov
aam
mov
jno
scas
call
inc
mov
inc
ss
mov
jmp
push
call
push
(bad)
in
mov
jp
inc
cli
jecxz
dec
mov
test
add
fst
add
int
add
int
add
popf
adc
add
add
adc
add
adc
add
adc
add
sbb
add
add
jnp
inc
push
gs
inc
test
and
inc
inc
cmp
inc
(bad)
scas
sub
jmp
xor
cmp
ins
jmp
jno
add
jns
pop
push
jmp
jne
(bad)
fisttp
mov
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
popf
lods
inc
and
cmp
jmp
mov
sub
(bad)
mov
add
sub
in
jmp
sub
dec
cmp
jmp
jmp
data16
jp
data16
jmp
dec
pop
push
jg
fisub
push
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
add
lea
add
lea
add
mov
mov
hlt
je
push
jmp
popa
call
inc
and
(bad)
jmp
jmp
daa
in
dec
push
xchg
jmp
jmp
jmp
data16
jp
data16
jmp
dec
pop
data16
(bad)
inc
add
jns
jmp
stos
dec
inc
popf
adc
add
lea
add
popf
adc
add
lea
pop
and
inc
jmp
push
dec
jno
popf
pop
inc
push
(bad)
jmp
(bad)
cli
daa
in
jmp
sub
(bad)
call
add
jmp
jmp
jmp
data16
jp
data16
jmp
dec
pop
data16
fistp
jmp
fs
jmp
stos
dec
cs
adc
add
adc
add
adc
add
ds
pusha
xchg
inc
out
xchg
inc
push
dec
(bad)
imul
pop
push
push
dec
(bad)
(bad)
jmp
(bad)
cli
sub
jmp
sub
(bad)
mov
push
outs
dec
gs
addr16
jp
data16
jmp
dec
gs
fisubr
jmp
imul
pusha
(bad)
push
test
push
add
lea
add
lea
add
popf
adc
add
call
jbe
push
call
push
push
jg
jbe
pop
pop
clc
(bad)
jmp
(bad)
cli
sub
jmp
sub
(bad)
sti
cmp
call
sub
jmp
and
call
stos
inc
add
popa
addr16
push
(bad)
fisub
stos
jmp
push
push
and
adc
add
adc
add
dec
pop
js
inc
std
bound
jmp
call
imul
jmp
(bad)
jmp
sub
jmp
sub
dec
sub
jmp
sub
jmp
sub
jmp
xor
data16
fisubr
jmp
arpl
stos
imul
jmp
stos
dec
sub
popf
adc
add
imul
pop
jmp
outs
call
popa
jae
cmp
xlat
(bad)
jmp
(bad)
jmp
jmp
sub
dec
sub
jmp
sub
call
sub
jmp
sub
jmp
inc
stos
(bad)
fisub
jmp
add
push
data16
jmp
jo
or
cwde
lea
add
push
lahf
inc
or
inc
stc
imul
jmp
pop
outs
jmp
sub
(bad)
jmp
(bad)
jmp
jmp
sub
dec
ds
inc
add
xchg
xor
push
jns
push
inc
mov
test
out
dec
push
cmp
push
push
inc
xchg
sub
ret
call
(bad)
push
sub
(bad)
cmp
shl
retf
xor
dec
call
push
jno
call
ins
jmp
pop
ins
(bad)
jl
ins
jmp
inc
mov
sub
(bad)
jmp
(bad)
jmp
jmp
sbb
jmp
push
mov
les
(bad)
fistp
int3
pop
fs
arpl
ins
outs
push
push
test
call
cs
jmp
in
jmp
in
(bad)
jp
in
jmp
sub
inc
add
jae
dec
xchg
push
test
push
addr16
cmp
pop
jb
lea
jmp
loop
sbb
in
(bad)
jmp
(bad)
jmp
push
sub
push
call
js
loopne
js
ficomp
dec
pop
imul
pop
imul
pop
call
addr16
add
mov
jae
jp
retf
call
daa
in
jmp
in
jmp
in
(bad)
jp
in
jmp
daa
in
call
jo
xchg
push
fld
pop
call
outs
(bad)
aas
push
dec
jb
mov
sub
call
sub
(bad)
jmp
(bad)
jmp
inc
add
pop
outs
call
inc
pop
outs
inc
pop
js
rcr
call
pop
push
push
pop
imul
pop
imul
outs
ins
push
dec
stos
call
sub
jmp
in
jmp
in
(bad)
jp
in
jmp
inc
sar
jge
(bad)
push
jg
hlt
pop
jns
(bad)
cmp
arpl
bound
call
cmp
dec
and
call
and
(bad)
jmp
(bad)
jmp
call
jae
pop
gs
(bad)
jns
jae
(bad)
dec
ins
inc
dec
outs
call
push
outs
call
push
jns
push
push
jns
pop
dec
imul
jb
dec
mov
jmp
in
jmp
in
inc
add
in
(bad)
jnp
in
call
inc
mov
call
je
in
jno
dec
cld
push
pusha
jno
aas
fs
bound
(bad)
mov
push
clc
dec
and
call
and
(bad)
jmp
(bad)
jmp
dec
gs
jnp
jb
retf
fs
fsub
inc
add
dec
ins
call
dec
outs
jmp
push
js
adc
dec
jb
call
and
jmp
in
jmp
in
jmp
in
inc
mov
jmp
dec
push
pop
cld
push
pop
jno
ds
cmp
gs
xchg
dec
jne
repnz
movs
jmp
and
dec
and
call
and
inc
add
and
(bad)
jmp
call
inc
pop
ja
jle
ja
iret
arpl
(bad)
(bad)
call
push
ins
jmp
outs
jmp
js
dec
dec
pushf
dec
and
jmp
in
jmp
in
call
in
loop
jns
jmp
dec
data16
add
push
xchg
dec
repz
pop
jo
arpl
bound
mov
pop
xlat
jmp
and
dec
and
call
and
(bad)
jmp
jmp
pop
jnp
adc
sbb
and
rcl
dec
bound
(bad)
(bad)
jmp
dec
jae
adc
cmp
add
mov
call
and
jmp
in
jmp
gs
jmp
dec
fs
pop
adc
pusha
jo
aas
fs
inc
dec
jbe
mov
test
sub
dec
or
call
or
(bad)
jmp
call
call
mov
push
push
mov
add
xchg
inc
je
rcl
rcl
mov
gs
dec
push
xchg
jmp
or
call
or
jmp
stc
(bad)
fisttp
(bad)
fmul
(bad)
frstor
dec
dec
gs
pop
pop
int3
arpl
pop
(bad)
cmp
jb
inc
fs
test
or
jmp
or
dec
or
call
or
(bad)
jmp
dec
push
jle
mov
dec
push
mov
xor
jp
xor
push
jne
mov
bound
xchg
sbb
jmp
or
call
or
call
imul
add
inc
imul
dec
imul
inc
fs
push
dec
pop
push
pop
call
ins
push
pop
jp
inc
daa
fdivr
sub
in
jmp
or
dec
or
call
or
(bad)
jmp
dec
push
jle
jge
jge
ins
dec
jle
imul
cmp
aaa
push
mov
lds
inc
add
push
je
mov
pop
in
jmp
pop
in
call
or
inc
dec
jns
loope
push
fisttp
dec
dec
imul
js
pop
push
mov
push
clc
pop
arpl
pop
pop
jle
out
cmp
pop
pop
lock
or
call
or
(bad)
out
or
inc
add
cmp
push
jle
jl
jge
jl
jl
ins
dec
jl
ins
dec
jge
cmp
leave
push
mov
(bad)
push
jp
enter
cmps
daa
(bad)
jmp
or
dec
or
call
dec
js
adc
jmp
dec
js
ror
call
dec
imul
xchg
dec
or
add
popa
test
arpl
retf
popa
jg
scas
pop
jle
mov
pop
test
stc
dec
sahf
inc
cmp
jmp
jl
jg
jl
jle
jl
outs
push
jl
outs
push
jl
cmp
dec
dec
jg
leave
dec
jg
push
arpl
jmp
or
dec
add
aaa
cmp
dec
outs
call
outs
jmp
dec
js
ror
dec
jno
mov
popf
adc
add
sbb
imul
arpl
xchg
push
je
xchg
push
jnp
mov
jmp
dec
jg
mov
jmp
jge
ins
push
cmp
push
jl
jno
cmp
push
jl
add
ins
push
jl
cmp
dec
jle
retf
jmp
es
cmp
in
jmp
or
dec
sbb
ins
call
dec
jae
push
inc
ins
jmp
inc
outs
jmp
dec
outs
sti
xlat
jge
sbb
adc
add
test
push
pop
call
push
jp
add
test
inc
dec
mov
mov
dec
push
jge
jg
jl
jle
jl
outs
xor
jge
cmp
dec
jg
xor
jg
xchg
dec
mov
test
(bad)
cmp
dec
cmp
call
dec
jae
(bad)
jmp
dec
outs
inc
add
push
push
add
adc
add
xchg
push
jo
(bad)
dec
je
test
inc
dec
mov
mov
jmp
jle
ins
push
jle
jg
jl
jl
jl
ins
dec
jge
ins
push
jge
cmp
jg
sub
mov
xor
inc
add
pop
jg
sub
jle
and
call
pusha
cmp
dec
cmp
dec
jb
cld
dec
jb
fmul
out
ror
gs
lea
add
lea
add
popf
adc
add
adc
add
dec
sbb
pop
cmp
pop
jnp
xchg
(bad)
mov
push
mov
mov
inc
add
push
jle
jge
jge
ins
push
jge
push
jg
cmp
push
push
mov
leave
pop
mov
les
call
pop
jnp
add
inc
pop
jbe
push
pop
jbe
cvtdq2ps
(bad)
ficomp
in
cld
push
jns
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
add
lea
add
lea
add
movs
imul
dec
addr16
sbb
pop
je
mov
mov
mov
mov
mov
dec
push
jg
mov
dec
push
jg
ss
mov
leave
push
mov
(bad)
push
mov
les
call
pop
je
add
inc
pop
ja
push
pop
cmp
add
pop
ja
cld
pop
ins
jmp
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
cmps
imul
sbb
push
mov
mov
call
jg
push
push
mov
mov
inc
add
push
mov
aaa
push
mov
(bad)
push
jnp
lds
call
push
jne
add
inc
push
jne
(bad)
pop
jbe
push
pop
ja
maxps
fcomp
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
xchg
xchg
dec
add
pop
adc
jne
xchg
inc
push
jp
mov
inc
push
jp
xor
jp
xor
jnp
ret
inc
push
jnp
adc
inc
pop
jbe
add
inc
push
ja
mov
outs
js
pusha
je
int
add
int
add
popf
adc
add
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
fs
xor
call
call
ja
xchg
mov
test
mov
xor
mov
ret
inc
fdiv
ret
ror
inc
add
aad
cmc
or
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
movs
fs
add
push
stos
jns
push
scas
outs
mov
shl
ret
jmp
enter
mov
mov
add
int
add
fst
add
fst
add
int
add
int
add
popf
adc
add
adc
add
out
(bad)
stos
xchg
add
stos
pop
add
add
sbb
pop
sub
sbb
pop
or
sbb
add
sbb
add
sbb
add
sbb
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
lea
add
popf
sbb
add
add
add
pop
sbb
pcmpgtw
add
jns
add
stos
adc
jmp
loope
(bad)
sbb
add
sbb
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
dec
sub
push
xchg
mov
repnz
stc
int
push
jecxz
mov
outs
pusha
daa
int
add
int
add
fst
add
fst
add
int
add
int
add
ret
dec
sub
lods
mov
inc
(bad)
cmp
leave
ret
push
ret
lahf
jmp
push
jmp
push
std
or
pop
sbb
add
add
dec
sbb
add
jne
add
push
rol
inc
jmp
mov
(bad)
jmp
call
loopne
jmp
fs
jnp
arpl
jmp
mov
gs
sub
fst
add
int
add
fild
pop
jmp
mov
dec
add
jmp
add
cmps
inc
iret
movs
(bad)
mov
mov
jmp
pop
push
pop
add
xchg
popf
popa
sub
pop
std
ss
call
gs
fsqrt
retf
jmp
stos
jmp
stos
jmp
sti
out
mov
add
jmp
(bad)
fldenv
dec
and
sbb
and
or
out
dec
call
in
(bad)
fcomip
mov
push
into
cmps
call
in
jmp
call
mov
jmp
loop
(bad)
fidivr
out
mov
jmp
ins
inc
add
retf
stos
jmp
out
call
fmul
dec
scas
jmp
lods
push
mov
call
dec
out
inc
adc
mov
jb
mov
call
dec
repnz
call
outs
call
inc
add
repnz
dec
call
mov
cwde
lods
outs
hlt
adc
das
ficomp
jmp
call
mov
inc
cmps
je
mov
stos
cmp
out
in
stos
call
loop
and
jns
adc
adc
js
dec
cmc
mov
stos
in
out
jmp
loope
(bad)
cmp
jge
dec
sar
inc
sar
inc
lods
jne
int
mov
sub
out
jmp
in
out
(bad)
in
int3
stos
call
mov
push
mov
add
jmp
jmp
int
(bad)
cmp
jle
cmp
add
sar
(bad)
ror
jmp
in
jmp
cmps
ins
call
mov
dec
adc
pushf
push
loopne
sbb
xchg
inc
aad
(bad)
cmp
jle
dec
iret
jge
sub
xchg
(bad)
cmp
out
jmp
jmp
jge
cmp
add
fwait
jg
sbb
add
nop
adc
push
push
shl
mov
jnp
ins
iret
jge
cmp
jle
cmp
int
inc
lock
in
jmp
mov
stos
jb
adc
add
int
add
adc
out
pop
enter
inc
ja
call
add
sar
sar
ror
call
stos
mov
jle
jae
sub
add
add
dec
adc
add
add
imul
jb
test
jp
aaa
sar
(bad)
ror
call
lods
jne
push
lods
jae
add
dec
mov
add
fst
add
int
add
int
add
popf
adc
add
jg
sbb
push
mov
jae
inc
stos
jae
inc
cmps
outs
fcom
mov
pop
dec
adc
add
add
pop
adc
add
add
in
add
in
adc
add
sldt
popf
adc
add
add
adc
add
adc
add
adc
add
adc
add
add
dec
adc
add
adc
add
adc
add
adc
xor
adc
add
adc
add
(bad)
(bad)
dec
adc
add
push
sbb
jmp
arpl
ins
push
ins
xchg
cmp
jns
arpl
daa
addr16
push
cmp
arpl
jnp
outs
jae
sbb
popa
cs
push
jbe
and
jp
data16
mov
arpl
jns
and
cmp
and
sub
je
fs
jns
sub
add
jns
inc
push
push
ins
out
jnp
ds
jns
jae
ins
push
ins
and
push
cmp
mov
fs
jne
and
xor
push
cmp
pop
jnp
outs
jae
push
push
test
outs
and
inc
jp
pop
outs
sbb
outs
sub
outs
cmp
and
je
jae
add
pop
cmp
jnp
push
xor
pop
popa
sbb
popa
add
cmps
xor
jo
jns
fisub
jb
fs
push
and
enter
jge
bound
outs
push
dec
xor
outs
ss
pop
cmp
pusha
je
xor
xor
scas
inc
xor
cs
ja
jae
add
push
ins
fs
push
mov
je
sub
jno
jo
sbb
outs
xor
jae
jnp
ins
and
sub
xor
gs
inc
push
outs
mov
fs
dec
pop
jmp
ja
cmp
cmps
fs
push
mov
js
outs
repz
arpl
jns
popa
add
cs
jbe
ss
inc
push
jne
ins
fs
sub
pushf
jno
jae
inc
push
push
outs
ins
imul
pop
sub
jo
gs
fs
pusha
push
arpl
jno
outs
sbb
jbe
jns
ins
xor
ins
push
ins
push
jae
push
popaw
les
bound
outs
inc
arpl
add
inc
arpl
xor
stc
arpl
stos
sub
jb
data16
rcr
and
outs
sub
xor
jp
push
jno
imul
ins
push
jb
pop
imul
pop
jae
ja
jb
pop
jns
sub
fs
addr16
mov
ds
jns
imul
imul
inc
pop
jae
ss
xor
lds
cs
pop
jae
outs
fs
(bad)
jb
jo
imul
xor
sub
sbb
js
imul
pop
jo
cmp
xor
and
and
add
pop
sub
xor
and
gs
and
cmp
jbe
frstorw
ds
xor
sub
ins
push
dec
mov
arpl
das
addr16
sbb
dec
mov
adc
sbb
xor
js
popa
mov
xor
out
jbe
cmp
sub
add
sub
(bad)
and
sbb
cs
imul
xor
jnp
arpl
push
push
dec
jle
dec
fs
cmp
jl
push
xor
sub
dec
es
in
(bad)
push
popa
in
sbb
xor
es
xor
cmp
and
push
addr16
add
retf
gs
inc
ds
jne
je
jbe
push
mov
jo
mov
sbb
sub
fsubr
and
xor
sub
xor
push
popa
bound
ins
and
pop
jae
push
push
fs
cs
gs
jp
fs
inc
and
add
push
xor
popa
xor
std
push
outs
daa
sbb
sub
js
cmp
xor
and
adc
jmp
popa
pop
jb
jne
dec
push
and
in
pusha
jo
hlt
ja
je
je
ds
pusha
popa
je
jbe
ins
and
jns
imul
push
imul
outs
cs
lea
inc
movs
sbb
pop
test
inc
xchg
sbb
inc
lea
inc
test
aaa
pop
test
inc
xchg
sbb
inc
lea
inc
sbb
pop
test
inc
push
sbb
inc
int
xor
les
aaa
pop
lds
inc
rcr
ds
or
sbb
pop
add
sbb
inc
or
add
aaa
pop
add
sbb
inc
or
sbb
pop
add
sbb
inc
dec
push
xor
inc
sbb
pop
inc
inc
inc
inc
push
sbb
inc
lea
inc
movs
sbb
pop
test
inc
xchg
sbb
inc
lea
inc
test
aaa
pop
test
inc
xchg
sbb
inc
lea
inc
sbb
pop
test
inc
push
sbb
inc
add
int
xor
les
aaa
pop
lds
inc
rcl
ds
or
sbb
pop
add
sbb
inc
or
sbb
pop
add
sbb
inc
or
sbb
pop
add
pop
ds
dec
push
xor
inc
sbb
pop
inc
inc
inc
inc
push
pop
ds
lea
inc
movs
sbb
pop
test
inc
add
xchg
sbb
xor
test
aaa
pop
test
inc
xchg
sbb
xor
sbb
pop
test
inc
push
sbb
xor
les
aaa
pop
lds
inc
rcr
ds
or
sbb
pop
add
pop
ds
or
sbb
pop
add
pop
ds
or
pop
aaa
pop
add
add
push
ds
dec
push
xor
inc
sbb
pop
inc
inc
inc
inc
push
sbb
xor
movs
sbb
pop
test
inc
xchg
sbb
xor
test
aaa
pop
test
inc
xchg
sbb
xor
sbb
pop
test
inc
push
sbb
xor
les
aaa
pop
lds
rcr
xor
add
and
aaa
pop
add
push
ds
or
pop
aaa
pop
int
add
fst
add
and
xor
and
jge
repnz
imul
ret
daa
loop
pop
xor
cmp
sub
cmp
sub
cmp
sub
cmp
sub
xor
add
pusha
sub
add
adc
add
jp
lahf
and
pushf
xor
add
xor
adc
sub
cmp
inc
sub
inc
ds
sub
add
mov
and
xor
and
jl
lea
push
sub
cmp
sub
cmp
add
cmp
daa
inc
cmp
sub
cmp
es
aas
loop
add
dec
push
add
and
and
add
xor
mov
daa
out
sbb
xor
pop
and
fldenv
arpl
in
ss
idiv
jmp
in
aas
fld
add
adc
add
add
sbb
and
jmp
sub
add
pop
adc
add
and
ss
and
stos
es
das
and
push
sub
ds
mov
push
cmp
ds
sub
add
add
sbb
adc
and
xor
and
xor
and
xor
xor
or
dec
xor
and
sbb
jb
inc
pop
into
ss
sbb
scas
and
aaa
adc
test
aaa
test
sub
adc
daa
sar
sub
ds
xchg
add
test
and
add
call
or
mov
fidiv
dec
and
lods
xor
mov
gs
fwait
ss
and
aaa
mul
mov
aaa
pop
and
cmp
sub
jp
aaa
cmp
daa
push
cmp
daa
js
pop
daa
jbe
pop
daa
xchg
sub
daa
dec
cmp
sub
and
sub
(bad)
cmp
sub
ds
pop
test
add
sbb
add
or
xor
or
xchg
or
add
mov
xor
pop
fidiv
test
or
add
aaa
adc
sbb
and
jbe
dec
add
cmp
add
cmp
fwait
cmp
add
cld
xor
adc
std
iret
cmp
(bad)
ds
jl
xor
enter
hlt
ds
aas
and
mov
aas
mov
ja
add
pop
xor
pop
enter
xor
xor
pop
cld
xor
push
xor
add
push
xor
add
xor
add
xor
leave
add
aaa
adc
(bad)
cmp
or
push
cmp
lahf
fld
add
push
pop
(bad)
xor
pop
xor
add
test
popf
jmp
aaa
push
add
cmp
(bad)
jmp
(bad)
icebp
cmp
stc
cmp
add
sar
test
clc
sti
sar
inc
cmp
sahf
neg
aas
sbb
sbb
add
sbb
in
aaa
xor
add
xor
add
xor
add
xor
add
das
add
hlt
add
cmp
ins
cmp
std
std
cmp
cld
dec
cmp
adc
retf
test
aas
dec
test
add
add
push
add
aaa
cmp
inc
cmp
aaa
cmp
ins
sbb
add
add
xor
add
xor
cli
out
cmp
cli
adc
fs
inc
ds
adc
add
add
pop
add
inc
push
aaa
sar
je
push
add
dec
stc
cdq
cmp
stc
adc
mov
imul
icebp
adc
add
add
xor
add
in
xor
add
xor
test
sub
aaa
test
sub
cmp
adc
inc
sub
cmp
and
jno
sub
sub
cmp
add
sub
cmp
sub
cmp
xor
xor
pusha
cmp
mov
add
sahf
cmp
das
add
or
sbb
add
sub
ins
xor
cmp
xor
cmp
fistp
int
add
popa
sbb
add
and
xor
and
xor
add
and
xor
and
xor
and
xor
sbb
jns
cmp
xchg
sub
xor
jbe
lds
xchg
xor
sub
xor
sub
xor
hlt
sub
cmp
xor
cmp
xor
cmp
sbb
fnsave
cmp
add
xor
cmp
xor
in
xor
cmp
bound
cmc
xor
adc
jnp
inc
xor
cmp
das
sbb
jne
and
cmp
das
mov
cmp
das
mov
cmp
xor
cmp
hlt
pop
cmp
hlt
xchg
cmp
hlt
mov
hlt
sub
sub
ds
repz
ds
repz
ds
hlt
mov
outs
repnz
data16
pop
repz
add
add
sti
and
pop
sub
xor
and
xor
xchg
xor
mov
mov
daa
bound
and
sub
xor
add
dec
xor
sub
xor
test
cwde
sub
sub
aaa
jmp
cmp
sub
cmp
cs
push
das
cmp
cmp
xor
cmp
sub
cmp
sub
mov
jl
cs
das
hlt
(bad)
dec
push
add
add
sub
add
dec
and
xor
(bad)
mov
div
fwait
daa
or
xor
pop
xor
and
xor
push
xor
sub
xor
sub
xor
sub
aaa
mov
xor
cmp
xor
cmp
sub
cmp
ret
sub
cmp
add
das
mov
cmp
hlt
mov
cmp
hlt
sub
(bad)
std
cmp
mov
es
xchg
mov
pop
add
sub
daa
outs
xor
jmp
es
xor
es
fisub
int3
xor
and
xor
and
xor
add
and
xor
es
gs
cmp
lea
cmps
xor
and
call
xor
sub
and
and
and
and
and
xor
and
xor
and
xor
sub
xor
xor
xor
stos
and
shl
push
ss
and
out
and
pop
adc
jno
fdiv
jg
sti
cmp
sub
add
add
xchg
adc
sahf
xor
and
xor
and
add
xor
and
xor
and
xor
add
and
xor
and
add
fwait
xor
add
sbb
je
inc
and
xor
fwait
outs
and
ss
and
ss
(bad)
mov
stc
ss
pop
or
jg
or
aaa
jnp
xor
movs
pop
aas
aaa
mov
pop
aaa
cmps
pop
mov
push
sub
cmp
push
cwde
cmp
cs
cmp
cs
popa
cs
push
sub
cmp
add
cs
push
cs
int
xor
fwait
sub
std
sub
cmp
cmp
fldcw
inc
cmp
sub
sub
cmp
sub
cmp
int3
cmp
sbb
sub
cmp
sub
cmp
sub
cmp
sub
cmp
sub
inc
sub
inc
cmp
popa
sub
cmp
sub
sar
call
ds
push
data16
push
cs
ds
sub
ds
(bad)
ds
xor
mov
sar
frstor
add
and
xor
and
and
xor
xor
and
xor
cmc
xor
and
xchg
push
xor
cmp
dec
and
mov
imul
shl
mov
shl
xor
and
repnz
fnsave
adc
adc
xor
and
xor
or
jno
sbb
add
out
sbb
stos
xor
push
(bad)
xor
add
push
add
push
xor
push
inc
xor
push
pop
xor
push
jg
pop
pop
int3
xor
and
xor
adc
fidiv
mov
ss
ins
ss
cwde
ss
ss
and
add
cli
ss
and
xor
add
pop
and
mov
sub
cmp
jg
test
xchg
cmp
es
dec
es
es
adc
pop
cmp
sub
jnp
and
jmp
sub
jmp
cmp
xchg
cmp
lahf
cmp
daa
mov
fs
ret
daa
aad
mov
adc
sbb
add
add
lea
add
test
and
mov
jge
adc
cld
xor
push
fidiv
out
push
or
(bad)
pop
pop
xor
cdq
xor
and
xor
and
xor
adc
mov
ss
div
jae
ins
aaa
pop
and
aaa
cdq
and
aaa
mov
sub
repz
sub
cmp
add
jae
in
cmp
sub
daa
sub
cmp
sbb
cmp
sub
cmp
sub
cmp
sub
cmp
dec
push
sbb
arpl
ds
sub
add
add
adc
add
xor
dec
xor
data16
sub
mov
stos
xor
daa
das
xor
jbe
add
lea
mov
repnz
mov
mov
lock
adc
xor
adc
xor
and
xor
and
add
scas
adc
test
in
jns
hlt
ss
adc
std
adc
jmp
aaa
(bad)
adc
mov
cld
cmp
and
icebp
pop
call
add
sbb
cmp
pop
pop
cmp
sub
cmp
sub
cmp
sub
jno
jns
popa
sbb
cmp
xchg
sbb
ds
dec
ds
sub
(bad)
sub
sub
xchg
imul
movs
lea
loopne
loop
data16
fnsave
add
push
add
shl
(bad)
das
xchg
es
xor
add
adc
ins
daa
inc
xor
push
xor
daa
mov
loopne
lods
xor
es
xor
in
dec
and
xor
inc
xor
es
xor
pop
xor
and
xor
and
xor
sti
xor
and
lea
and
add
movs
add
sbb
movd
inc
adc
ss
repnz
pop
aaa
cli
adc
bt
dec
invd
cmp
and
and
cmp
into
cmp
fnstsw
inc
sbb
cmp
dec
cmp
sbb
cmp
sub
cmp
add
aaa
sub
cmp
xchg
sub
shl
ds
cmp
aas
or
sbb
add
and
shl
and
outs
and
xor
cmps
xor
pop
xor
adc
xor
adc
xor
pop
adc
bound
fistp
inc
and
add
adc
add
add
xchg
and
xor
sub
xor
sub
and
daa
sbb
xor
sbb
add
js
arpl
lods
sbb
stos
xor
dec
sbb
jmp
loopne
add
push
push
jo
pop
sbb
dec
adc
cmp
jl
add
xor
adc
cmp
and
cmp
dec
and
or
jge
lds
lea
add
pop
and
xor
sub
xor
sub
xor
sub
xor
daa
mov
xor
push
sbb
shl
adc
and
cld
or
cmp
aaa
cmp
add
adc
cmp
adc
ret
or
dec
cmp
or
or
adc
data16
push
lods
cmp
and
xchg
and
ds
inc
aas
pop
and
add
sbb
add
or
mov
add
xor
daa
sub
sbb
xor
daa
xor
jg
hlt
and
lahf
cmp
xor
arpl
dec
cmp
mov
cmp
imul
bnd
adc
add
mov
add
sub
jmp
xor
ret
xor
daa
shl
push
sub
xor
es
xor
rcr
lahf
add
dec
sbb
ss
push
sub
in
or
aad
(bad)
shl
cdq
sbb
add
or
pop
and
xor
sbb
jns
and
sub
dec
xor
and
xor
es
xor
or
cmp
and
cmp
mov
cmp
stc
cmp
push
sar
fisub
std
cmp
and
jecxz
sub
ds
test
int
icebp
call
adc
add
and
fsub
xor
(bad)
daa
out
xor
jns
sbb
and
jb
daa
ss
ss
and
cmp
or
cmp
lods
cmp
andnps
mov
imul
and
cmp
and
cmp
or
aas
dec
sub
(bad)
in
pop
add
add
cmp
adc
xor
es
xor
es
xor
es
xor
sbb
xor
sbb
aas
int
bnd
adc
add
sbb
retf
and
xor
xor
and
es
and
ins
xor
mov
or
test
in
enter
call
or
and
and
(bad)
and
adc
mov
xor
sbb
xor
pop
sbb
push
xor
push
sbb
xor
adc
or
mov
cmp
or
and
movs
and
adc
pop
aaa
in
and
add
dec
and
arpl
xor
adc
cwde
cmp
cmovp
cmp
(bad)
cmp
cmp
inc
push
pop
cmp
push
test
cmp
fidivr
and
cmc
cmp
or
mov
cmp
or
cmp
or
or
jmp
and
cmp
or
pop
or
and
cmp
and
cmp
and
cmp
and
cmp
and
cmp
and
cmp
and
cmp
and
cmp
ret
cmp
ror
cmp
and
jbe
adc
mov
cmp
je
pop
lds
jns
fiadd
nop
ds
pop
test
fild
lods
and
mov
pop
aam
aaa
or
aas
jge
mov
sbb
push
add
mov
jecxz
push
sbb
gs
push
xor
and
pop
xor
es
inc
es
xor
and
shl
es
xor
add
cmps
and
xor
and
daa
and
fnsave
xchg
and
xor
sbb
xor
and
xor
and
xor
clc
xor
ins
and
ss
sbb
jno
je
ja
shl
aaa
mov
leave
aaa
movs
and
aaa
imul
lds
dec
or
cmp
or
cmp
or
cmp
push
cmp
add
or
cmp
or
cmp
or
push
xor
and
xchg
cmp
les
imul
cmp
popa
cmp
or
cmp
or
cmp
setno
or
cmps
cmp
hlt
or
ds
icebp
ds
or
aas
and
ds
pop
or
pushf
or
or
add
adc
add
and
lds
imul
pop
and
dec
and
xor
pop
add
xor
and
and
xor
mov
jnp
les
movs
and
xor
xor
push
push
push
xor
popa
xor
push
bound
add
into
push
mov
xor
pop
in
xor
cld
xor
or
xor
jl
rcr
mov
mov
call
pop
or
and
xor
and
xor
add
pop
xor
add
enter
(bad)
xor
and
xor
and
xor
push
xor
xor
add
sti
push
je
sbb
fdiv
and
add
fwait
and
aaa
out
and
aaa
xlat
and
aaa
cmp
aaa
inc
or
xchg
or
or
or
cmp
or
cmp
or
dec
pop
dec
cmp
pop
lea
nop
or
push
fisttp
ds
daa
or
aas
add
or
adc
add
and
and
mov
call
xor
push
jge
and
in
mov
pop
das
xor
pop
dec
xor
and
and
lahf
xor
and
xor
or
xor
or
add
xor
add
xor
add
fnstenv
add
add
xor
add
xor
add
outs
xor
rol
xor
mov
and
xor
xor
inc
and
ss
and
ss
and
ss
and
aaa
or
mov
cmp
and
cmp
and
and
cmp
loope
pusha
sbb
cmp
mov
fs
int
xchg
sahf
sbb
cmp
test
sbb
ds
ss
dec
xor
jo
and
pushf
ds
sbb
ds
sbb
aas
add
fst
add
aad
push
xor
push
mov
dec
pop
mov
xor
or
jne
adc
xor
fwait
xor
add
loopne
jo
xor
cwde
add
cmps
add
xor
and
and
cmp
and
xor
add
xor
add
xor
add
lods
xor
add
xor
add
xor
and
xor
pop
and
std
and
xor
xor
sbb
retf
and
cmp
fidivr
nop
sbb
cmp
sbb
sbb
sbb
sub
sbb
sbb
push
sbb
cmp
add
dec
and
add
fiadd
xchg
xor
add
into
xor
inc
xor
js
xchg
push
(bad)
xor
add
xor
add
xor
jno
sub
cwde
cmp
sbb
cmp
sbb
int3
cmp
push
inc
cmp
sbb
ins
cmp
add
push
jge
dec
push
pushf
cmp
inc
cmp
xchg
cmp
mov
cmp
adc
cmp
adc
and
dec
adc
fidivr
cmps
adc
push
adc
aas
push
adc
add
sbb
add
xor
(bad)
mov
xor
add
test
xor
(bad)
xor
test
add
test
bound
lods
xchg
xor
lods
mov
xchg
lods
shl
lods
xor
xor
jp
jno
retf
cmp
stos
icebp
cmp
scas
cmp
mov
retf
cmp
cmp
lods
scas
push
cmp
adc
cmp
scas
fstp
add
cmp
(bad)
adc
mov
add
adc
add
and
fisub
push
hlt
mov
mov
out
push
xor
cmps
mov
and
fnstenv
shl
nop
xor
pushf
cmps
xor
ss
test
cmp
add
aas
mov
cmp
mov
cmp
mov
cmp
mov
cmp
mov
cmp
and
inc
mov
cmp
scas
sub
outs
lods
mov
ds
test
bound
lds
in
adc
ds
unpckhps
aas
jae
sub
out
adc
fst
repnz
add
shl
xor
mov
lock
jne
push
test
xor
lahf
xor
xor
xor
mov
xchg
xor
mov
lods
xor
mov
jmp
xor
cmps
mov
xor
and
sub
add
movs
sbb
movs
cmp
lods
push
xor
lods
je
xchg
movs
mov
movs
loop
push
cmps
sti
xor
cmps
adc
xor
and
mov
sub
push
lods
inc
aaa
(bad)
stos
push
aaa
fisubr
test
pop
lods
test
pop
lods
test
aaa
leave
movs
icebp
aaa
fwait
test
cmp
sbb
jp
and
jbe
aaa
cmp
test
cmp
add
test
cmp
test
cmp
test
cmp
test
sbb
cmp
inc
cmp
scas
push
cmp
scas
js
jge
xchg
cmp
scas
cmp
scas
retf
cmp
scas
push
cmp
scas
cmp
scas
push
cmp
scas
cmp
mov
push
scas
mov
scas
fistp
nop
stos
(bad)
cmp
xor
push
adc
cmp
adc
cmp
adc
cmp
stos
cmp
cdq
cmp
stos
mov
cmp
stos
or
xor
cmp
popa
adc
cmp
cs
inc
ds
pop
ds
test
mov
add
repz
ds
test
idiv
fld
imul
int
repnz
sldt
(bad)
cmps
and
std
cmps
push
xor
cmps
ja
push
mov
test
xor
pop
xor
sbb
popa
cmps
cmp
dec
cmps
inc
xor
imul
aam
xor
movs
popf
xor
add
movs
(bad)
xor
movs
loop
mov
push
xor
mov
arpl
and
test
jb
lods
xor
cmps
sub
mov
outs
xor
xor
mov
repz
mov
shl
sti
xor
mov
in
fwait
mov
dec
sub
enter
push
mov
and
push
cmp
sbb
aaa
(bad)
fdiv
out
or
pop
test
cmp
lods
mov
sti
lods
or
cmp
scas
mov
cmp
fidivr
mov
out
cmp
stos
or
jecxz
xor
adc
pop
cmp
stos
cmp
add
cmp
mov
cmp
fidivr
arpl
mov
iret
stos
sar
ds
push
push
scas
xchg
fsubr
mov
aas
add
je
call
adc
add
add
xchg
mov
push
xor
mov
adc
mov
add
lahf
add
mov
xor
movs
stos
xor
movs
loopne
inc
movs
push
xor
push
movs
lea
lds
push
mul
dec
aaa
inc
mov
sub
clc
stos
pop
cmp
stos
mov
cmp
test
cmp
test
cmp
test
cmp
test
cmp
test
cmp
push
cmp
add
mov
cmp
test
cmp
lahf
mov
lahf
mov
cmp
lahf
fstp
lahf
or
lods
mov
aas
mov
stos
repz
(bad)
add
mov
mov
pop
xor
xor
mov
cmc
xor
add
mov
mov
or
mov
xor
mov
adc
arpl
inc
xor
sahf
jle
rcr
xor
lahf
fnsave
lods
sahf
jmp
xor
mov
inc
xor
mov
xchg
out
lahf
test
hlt
lahf
mov
call
lahf
loop
shl
sbb
mov
xor
mov
xor
mov
xor
mov
xor
mov
xor
movs
xchg
movs
cmps
xor
mov
xor
mov
xor
mov
xor
mov
xor
mov
xor
imul
push
xor
push
dec
ss
pop
add
jnp
bound
leave
mov
shl
mov
mov
xor
mov
mov
mov
aaa
das
movs
fdiv
xchg
movs
repnz
shr
cmp
dec
cmp
test
cmp
outs
cmp
test
sar
mov
cmps
pop
cmp
add
mov
sbb
ins
sahf
sbb
xor
cmp
je
lds
ret
sahf
loop
push
lahf
or
cmp
cmp
cmp
cmp
lahf
popf
cmp
lods
cmp
lahf
aad
fwait
lahf
repnz
stos
adc
stos
sbb
stos
cs
stos
push
cmp
stos
imul
jb
cmp
xchg
cmp
stos
stos
cmp
stos
mov
cmp
stos
jmp
popf
sbb
js
dec
cmp
fstp
cmp
jno
ret
cmp
clc
fwait
pop
ds
ss
stos
repz
add
push
add
fisub
sub
cmps
mov
xor
cmps
retf
movs
je
cwde
movs
push
cmp
inc
cmp
les
fwait
pushf
cmp
movs
fwait
xor
aas
sahf
fwait
cmp
fwait
pop
cmp
jle
push
aas
mov
fdivr
pop
push
repz
cmps
pop
xor
test
push
cmps
mov
xor
mov
ss
fdiv
push
scas
push
aaa
xor
pusha
cmp
sahf
fnstcw
leave
pushf
enter
cmp
stos
test
cmp
sbb
lock
test
ds
jmp
test
aas
cmps
loop
lea
add
add
jl
sub
pop
test
xor
movs
out
xor
movs
jno
int3
cmps
cmps
xor
cmps
mov
stc
movs
retf
movs
fidiv
pop
mov
dec
xor
mov
push
xor
xchg
xor
mov
std
xor
mov
xor
fnstenv
js
pop
mov
xor
add
xor
adc
movs
scas
push
ss
jo
push
scas
xor
scas
shl
scas
loope
shr
aaa
xor
test
mov
pushf
or
cmp
cmps
cmp
mov
cmp
mov
cmp
sub
mov
les
std
mov
cmp
xor
add
pop
scas
inc
cmp
mov
cmp
mov
cmp
mov
jno
cmp
adc
push
cmp
movs
push
cmp
outs
movs
idiv
outs
mov
aam
popf
mov
add
pop
test
xor
test
xor
test
fnstenv
and
pushf
div
pop
cmp
stos
(bad)
cmp
mov
cmp
scas
aas
cmp
dec
mov
sar
push
repz
mov
push
xor
mov
cdq
xor
test
xor
test
xor
test
xor
jl
dec
test
inc
xor
add
cmps
enter
xlat
xor
call
popf
gs
sub
cmp
adc
inc
stos
or
popf
test
lahf
cmp
stos
mov
add
jmp
mov
or
push
mov
cmp
lods
sub
movs
mov
cmp
add
dec
mov
addr16
call
dec
inc
repz
add
mov
test
xor
xor
mov
jns
cmp
lds
mov
test
xor
lea
icebp
test
xor
pushf
pop
xor
pushf
push
iret
movs
jnp
fsub
dec
xor
gs
scas
cmps
adc
mov
push
aaa
pop
pushf
shl
test
xchg
hlt
test
xor
mov
mov
repz
lock
add
mov
mov
add
inc
test
xor
movs
jmp
xor
lock
lock
mov
cmp
xchg
mov
imul
mov
mov
aaa
popf
mov
mov
cmp
test
mov
icebp
scas
xor
test
jp
cmp
movs
ret
test
cmp
inc
stos
popf
aas
mov
fucom
repnz
add
mov
cmp
fbld
scas
xor
mov
jle
push
popf
jno
test
clc
ss
mov
das
cmp
test
pop
cmp
lods
and
jb
pop
cmp
jl
ret
lods
scas
cmp
xchg
cmp
lods
sbb
stos
sub
cmp
stos
fnstcw
mov
scas
cmp
test
test
ds
test
ds
jnp
sbb
lods
aas
push
stos
(bad)
aas
js
repz
sldt
jp
cmps
xor
repz
cmps
mov
daa
cmps
ret
xor
add
cmps
shl
xor
fidiv
lock
sub
inc
mov
mov
mov
lods
xor
in
mov
lock
sbb
sbb
stc
lahf
das
arpl
sahf
ss
mov
iret
ss
jecxz
pusha
mov
xor
adc
mov
add
icebp
lods
pop
cmp
aaa
cmp
lods
and
repnz
sar
stos
cmp
aaa
stos
jo
and
adc
test
dec
cmp
test
cmp
test
jmp
daa
cmps
ds
repz
adc
add
movs
jg
add
push
cmps
or
leave
mov
mov
xor
mov
icebp
xor
mov
sbb
mov
fnsave
mov
jl
loopne
mov
les
repnz
mov
dec
aaa
mov
outs
aaa
jecxz
jp
mov
lods
ins
cmp
add
test
cmp
test
cmp
test
inc
cmp
cmps
stos
cmp
lods
ret
cmp
lods
inc
ds
stos
sub
adc
push
aas
push
stos
jmp
call
add
dec
mov
dec
xor
pop
xor
lahf
mov
xor
cmps
sahf
xor
cmps
and
cmp
and
ss
movs
int
movs
push
aaa
sbb
fdiv
clc
mov
je
ret
stos
into
cmp
test
cmp
test
mov
imul
add
jno
and
cmp
shr
sbb
pop
aas
add
pop
stos
jl
mov
repz
cmp
mov
shl
mov
test
inc
mov
cmps
xor
movs
or
mov
movs
jle
clc
mov
jecxz
call
mov
xchg
aaa
mov
mov
xlat
aaa
add
stos
mov
pop
cmp
cmp
test
jp
dec
test
cmp
test
cmp
stos
xchg
cmp
test
cmp
(bad)
cmp
cmps
xor
scas
mov
xchg
scas
push
cmp
xor
repz
adc
add
cmp
cmps
mov
retf
xor
mov
adc
and
pop
xor
xor
mov
jns
or
cmp
xchg
mov
jge
cmp
movs
and
sub
xchg
mov
cmps
call
cmp
test
cmp
pop
cmp
lods
sti
cmp
add
mov
pop
aas
mov
repz
adc
add
mov
xor
in
xor
push
xor
xchg
add
sub
test
xor
test
xor
test
bound
stos
ss
add
cdq
adc
add
cmp
add
std
and
cmp
push
jg
cmp
jg
cmp
mov
call
cmp
jle
cmp
jnp
cmp
jl
cmp
sar
adc
fdivr
aas
pop
mov
jmp
xchg
xchg
mov
add
cdq
xchg
xor
dec
xor
xchg
xor
sub
fild
xor
cmp
push
add
jo
inc
xor
pop
cmp
ss
add
aaa
cmp
pushf
aaa
cwde
jle
cmp
jle
cmp
cmp
inc
cmp
jle
cmp
jle
cmp
add
jge
cmp
jnp
cmp
jl
cmp
or
jp
cmp
jl
cmp
jge
cmp
jmp
aas
out
cmp
outs
ja
aas
dec
ja
aas
mov
(bad)
repz
mov
xor
mov
jmp
test
xor
add
add
mov
cs
test
xor
sub
jnp
shl
xor
adc
ss
jg
ss
cmp
cmp
mov
pop
aaa
jo
ins
aaa
rol
ins
cmp
jge
cmp
jnp
cmp
js
cmp
dec
jp
cmp
nop
ds
adc
add
test
xor
xchg
pusha
xchg
xor
or
out
cmp
sbb
cmp
jle
cmp
jp
cmp
out
fnstenv
xor
fdiv
ds
je
dec
sbb
add
imul
add
mov
ins
ja
stos
ins
jmp
push
sbb
cmp
jno
cmp
jno
cmp
and
xor
cmp
outs
sar
outs
or
je
cmp
je
cmp
je
cmp
je
cmp
call
ds
jb
add
stos
jb
aas
dec
jae
aas
adc
aas
loop
mov
mov
jmp
pop
jae
(bad)
stc
adc
add
sbb
jge
push
xor
arpl
xor
(bad)
out
dec
push
dec
xor
push
jmp
xor
push
jle
loope
mov
inc
imul
xor
add
dec
xor
xor
jae
out
shl
fldenv
xor
data16
outs
addr16
jo
add
aaa
enter
sub
xor
cmp
outs
or
js
pop
cmp
imul
cmp
outs
and
and
cmp
je
cmp
je
cmp
leave
jb
add
in
je
aas
mov
repz
sbb
add
popa
xor
shl
xor
arpl
movs
popa
out
ret
xor
push
in
xor
pushw
xor
push
gs
xor
aas
push
add
mov
ins
les
nop
imul
imul
cmp
outs
fstp
(bad)
jo
cmp
ins
ins
cmp
sub
mov
shl
call
add
punpckhbw
mov
gs
jmp
ins
or
xchg
push
cmp
outs
cmps
cmp
adc
add
call
aas
jle
repz
adc
add
push
add
pop
addr16
xor
fnsavew
leave
data16
lods
addr16
xor
ins
loopne
mov
xor
dec
bound
mov
jo
cmp
imul
or
sbb
add
popa
mov
cmp
add
adc
add
add
arpl
sbb
xchg
ins
fnstenv
ins
es
dec
ins
mov
outs
ins
in
xor
or
xor
ss
adc
push
arpl
and
aaa
fisub
aaa
jo
dec
cmp
outs
sar
and
cmp
dec
cmp
push
in
cmp
add
xor
pusha
outs
mov
push
outs
fidivr
imul
jae
mov
imul
jae
pop
cmp
dec
je
cmp
mov
push
sbb
cli
imul
fst
add
test
push
xor
sbb
punpcklbw
xor
add
cmp
cmp
data16
xchg
xor
cmps
xor
addr16
xor
in
loop
in
xor
add
cmp
sbb
xor
xor
jl
dec
xor
xor
call
arpl
mov
xor
popa
cli
xor
add
popa
adc
xor
popa
xor
popa
dec
xor
bound
das
popa
jno
and
ins
cmps
xor
ins
shl
popa
fidiv
bound
xor
cdq
popa
pop
xor
in
popa
mov
xor
push
pop
or
xor
ss
bound
xchg
ss
pop
xchg
add
mov
pop
aad
scas
pop
repnz
pusha
adc
pop
pop
xor
xlat
pop
inc
aaa
sbb
aaa
mov
add
dec
adc
iret
xor
popa
xlat
xor
popa
fbstp
popa
out
xor
popa
div
popa
pop
xor
jge
pop
xor
pop
arpl
xor
add
popf
gs
xor
jge
dec
xor
gs
xor
int
ja
frstor
aaa
in
mov
aaa
add
arpl
aaa
movs
arpl
aaa
ins
push
pop
cmp
ins
cmp
(bad)
repz
adc
add
popa
aas
xor
pusha
push
xor
pusha
pop
xor
pusha
repz
add
adc
add
(bad)
xor
arpl
xor
arpl
xor
arpl
xor
arpl
xor
(bad)
fbstp
in
(bad)
out
in
out
xor
div
and
pusha
pop
xor
rdtsc
sub
popa
pop
xor
daa
xor
das
xor
add
pop
aaa
xor
pusha
inc
xor
pop
push
xor
pop
pop
xor
pop
addr16
pop
outs
xor
ja
and
pusha
xchg
inc
pusha
(bad)
xor
bound
xor
bound
xor
(bad)
(bad)
xor
(bad)
xlat
xor
popa
fbstp
in
popa
out
add
in
out
xor
div
and
pusha
pop
xor
push
sbb
push
and
sub
xor
push
cmp
push
inc
xor
push
dec
xor
push
push
xor
push
pop
xor
push
arpl
push
imul
jae
push
fs
sbb
push
mov
fs
xor
fs
xor
mov
xor
add
push
mov
rcl
xor
push
ret
xor
push
retf
xor
push
hlt
dec
add
sbb
imul
pop
ins
idiv
push
ins
(bad)
ds
adc
call
add
push
pop
inc
xor
pop
xor
pop
(bad)
xor
pop
cmps
xor
pusha
or
sbb
xor
pusha
push
xor
pusha
imul
add
xor
pusha
fwait
xor
pusha
mov
pop
pusha
retf
xor
pusha
sti
xor
push
repz
sldt
mov
pusha
fwait
cmp
scas
cmp
(bad)
iret
cmp
(bad)
idiv
push
pop
or
jns
adc
and
pop
inc
cmp
pop
cmp
pop
(bad)
cmp
add
pop
ret
cmp
xlat
cmp
pop
(bad)
cmp
pop
pop
cmp
pop
(bad)
jge
pop
cmp
pop
cmp
pop
aas
cmp
pop
outs
cmp
jnp
sub
pop
mov
push
pop
iret
cmp
imul
lea
cmp
pop
xor
pop
cmp
pop
ja
in
xchg
cmp
add
imul
xor
push
cmp
pop
(bad)
sub
pop
sub
mov
cmp
mov
pop
xchg
dec
pop
ret
cmp
cmp
push
adc
shr
adc
ds
push
mov
cmp
add
imul
aas
or
aas
cmc
push
stos
aas
lds
aas
pop
(bad)
hlt
push
add
inc
sub
xchg
push
pop
xor
push
scas
xor
addr16
xor
addr16
xor
gs
xor
addr16
xor
gs
gs
int
and
std
arpl
cmp
xor
data16
lds
movs
fs
xor
imul
arpl
xor
sub
push
xchg
xor
push
shl
push
repz
push
adc
imul
xor
test
add
push
mov
xor
sbb
ss
dec
adc
gs
and
ror
ss
dec
mov
std
dec
cmps
imul
or
imul
aaa
lds
aaa
icebp
dec
sub
fisttp
aaa
std
dec
dec
aaa
or
aaa
int
shl
mov
add
push
das
cmp
push
outs
cmp
push
fwait
cmp
push
repz
push
dec
cmp
(bad)
cmp
push
lahf
cmp
scas
cmp
push
mov
cmp
push
fistp
xchg
push
or
jno
aaa
cmp
dec
jg
inc
dec
(bad)
cmp
dec
lahf
cmp
scas
cmp
add
dec
sti
cmp
dec
inc
cmp
dec
push
cmp
dec
cmp
dec
ja
or
cmp
dec
xchg
cmp
dec
cmps
cmp
dec
mov
cmp
fs
cmp
dec
xor
xchg
dec
xchg
cmp
dec
cmps
cmp
dec
mov
cmp
fs
xor
add
jno
das
cmp
shl
xor
xor
push
fs
inc
fs
cmp
xor
xchg
fs
cmp
leave
fs
ds
sub
aad
push
ds
fs
gs
add
ds
retf
ds
idiv
cdq
arpl
aas
pop
gs
aas
jns
daa
aas
imul
arpl
mov
arpl
aas
jns
mov
aas
sbb
push
add
or
bound
xor
pop
xor
popa
dec
xor
push
mov
sub
xor
bound
xor
bound
jmp
popa
xchg
dec
popa
xchg
xor
add
popa
cmps
xor
mov
xor
popw
xor
das
xor
dec
xor
addr16
xor
addr16
xor
div
xor
xor
addr16
xor
push
xchg
xor
cmps
xor
addr16
pop
push
xlat
xor
out
add
test
pop
and
gs
xor
mov
gs
xor
gs
gs
xor
icebp
gs
or
pop
iret
xor
jge
(bad)
jns
aaa
lea
shl
icebp
bound
adc
add
ss
(bad)
fbstp
add
cmc
bound
aaa
loope
inc
aaa
mov
aaa
sbb
aaa
sbb
aaa
cdq
arpl
aaa
jns
cmps
aaa
stc
arpl
aaa
movs
arpl
aaa
jno
pop
cmp
dec
dec
cmp
dec
ja
cmp
dec
mov
or
cmp
dec
inc
cmp
dec
cmp
dec
scas
cmp
add
dec
ret
cmp
dec
pop
cmp
pop
cmp
daa
cmp
aaa
cmp
dec
push
cmp
cmp
ja
test
dec
xchg
cmp
dec
mov
dec
dec
(bad)
cmp
xlat
cmp
dec
adc
test
cmp
dec
dec
cmp
dec
cmps
cmp
mov
cdq
dec
(bad)
cmp
add
dec
out
jns
idiv
cdq
dec
pop
cmp
dec
pop
cmp
dec
daa
cmp
fs
cmp
arpl
arpl
cmp
gs
cmp
fistp
fs
dec
pop
cmp
imul
cmp
ror
cmp
ror
add
mov
dec
(bad)
cmp
mov
ds
dec
inc
ds
inc
addr16
dec
xchg
ds
cmps
cmp
ds
dec
(bad)
mov
ds
inc
out
cdq
inc
idiv
cdq
dec
pop
aas
mov
aas
jns
daa
aas
test
inc
push
aas
mov
inc
ja
add
leave
dec
xchg
leave
dec
xchg
aas
mov
dec
mov
jmp
dec
xlat
aas
mov
xor
add
adc
xor
sub
fldenv
leave
xor
xchg
dec
gs
xor
cmps
xor
mov
lea
xor
gs
mov
pop
xor
gs
xor
gs
xor
dec
xor
add
gs
xor
pop
outs
xor
pop
jg
add
pop
xlat
xor
out
sub
xor
pop
xor
bound
xor
bound
xor
bound
xor
pop
push
xor
bound
cdq
pop
mov
dec
pop
iret
xor
pop
fbstp
mov
pop
push
add
xor
pop
das
xor
add
pop
aas
xor
pop
dec
xor
pop
pop
xor
pop
outs
xor
jg
inc
pop
(bad)
xor
lahf
xor
scas
xor
fbstp
mov
fs
xor
fs
xor
fs
xor
fs
xor
fs
xor
fs
fs
mov
inc
xchg
xor
inc
stos
xor
inc
xlat
xor
inc
div
fs
xor
pop
xor
leave
arpl
xor
and
cdq
xchg
stc
arpl
xor
mov
fs
mov
das
adc
or
or
sub
sbb
sub
ss
popa
mov
fldenv
ss
out
add
dec
gs
aaa
jne
aas
aaa
and
aaa
cdq
arpl
shl
mov
fs
aaa
add
mov
dec
push
inc
dec
(bad)
dec
pop
cmp
das
cmp
dec
aas
cmp
dec
dec
cmp
dec
pop
cmp
dec
outs
cmp
lahf
cmp
(bad)
cmp
dec
xlat
cmp
out
imul
dec
pop
cmp
dec
daa
cmp
dec
aaa
cmp
dec
inc
cmp
dec
push
cmp
dec
cmp
dec
ja
sbb
cmp
dec
xchg
cmp
dec
cmps
cmp
dec
mov
stc
dec
(bad)
cmp
dec
xlat
cmp
dec
out
jmp
inc
and
xor
inc
pop
cmp
inc
outs
cmp
inc
(bad)
cmp
inc
mov
inc
out
test
inc
pop
cmp
inc
pop
cmp
daa
cmp
inc
aaa
cmp
dec
inc
cmp
dec
push
cmp
inc
addr16
inc
ja
sub
cmp
xchg
cmp
ret
cmp
dec
out
or
cmp
pop
ja
fstp
leave
pop
fwait
cmp
pop
fistp
pop
out
cmp
add
(bad)
cmp
pop
(bad)
xor
cmp
push
pop
aas
cmp
xchg
pop
xchg
cmp
dec
pop
out
cmp
pop
pop
sub
sbb
pop
imul
pop
scas
ds
pop
mov
ds
fistp
popa
pop
out
rcr
rcr
aas
mov
pop
aas
loope
das
aas
rcr
aas
add
xor
pop
xchg
aas
stc
pop
cmps
aas
jmp
pop
(bad)
aas
or
aas
cmp
aas
or
call
cmc
jmp
add
push
inc
jmp
inc
inc
das
xor
push
xor
xor
inc
ja
mov
inc
xchg
xor
inc
cmps
xor
inc
mov
pop
inc
(bad)
xor
inc
out
test
add
and
aad
xor
add
dec
push
xor
xor
dec
stos
xor
dec
out
lea
jge
sbb
ins
inc
das
xor
push
xor
inc
imul
inc
xchg
xor
inc
mov
stc
inc
fbstp
icebp
inc
out
xor
push
inc
inc
rdpmc
xor
xor
inc
das
xor
aas
xor
add
inc
pop
xor
inc
outs
xor
inc
(bad)
xor
inc
lahf
xor
scas
xor
inc
iret
xor
inc
fbstp
jno
out
xor
popa
sub
popa
push
xor
popa
jae
and
inc
cmps
xor
inc
iret
xor
popa
fbstp
popa
out
xor
(bad)
push
bound
xor
add
popa
bound
xor
mov
popa
xchg
xor
test
popa
(bad)
xor
stc
popa
out
test
pop
pop
ss
pop
ss
daa
imul
sbb
ss
pop
ja
cmp
ss
pop
xchg
cmp
sub
ss
pop
(bad)
add
pop
pop
xlat
ss
out
test
pop
pop
aaa
jns
sub
inc
sub
pusha
aaa
xor
sub
loope
shl
sub
aaa
dec
sub
cmp
adc
cmp
cmp
sub
cmp
inc
cmp
xor
sub
cmp
xor
add
jmp
xor
cmp
xor
cmp
xor
leave
xor
mov
xor
jmp
xor
xor
xor
xor
stc
xor
sub
les
or
aam
cmp
in
or
hlt
cmp
add
dec
xor
add
cmp
and
sub
xor
imul
push
cmp
cmp
xor
xor
stc
xor
test
xor
cmp
xor
cmp
sub
adc
popf
sub
ins
cmp
cs
inc
mov
xor
pushf
cmp
lods
cmp
xor
int3
cmp
xor
cmp
cld
cmp
or
jno
sbb
cs
mov
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
aam
cmp
cs
cmp
cs
jno
sbb
loope
sub
add
and
cmp
add
dec
cmp
loope
ins
cmp
inc
sub
pushf
cmp
loope
mov
cmp
mov
sar
cmp
jno
sbb
popa
shr
mov
ror
jno
pop
ds
shr
mov
ror
add
popa
shr
ds
ror
ds
fstp
mov
sar
ds
aas
jno
sbb
loope
sub
and
cmp
add
dec
aas
icebp
rcr
loope
imul
aam
aas
inc
aam
aas
xor
fwait
aas
popa
aam
aas
loope
mov
aas
mov
fdivr
mov
cwde
cmc
dec
pop
add
add
push
sub
das
inc
sub
inc
sub
and
sub
xchg
and
and
pop
xor
sub
and
and
loope
lods
xor
mov
xor
fdiv
mov
and
xor
and
shl
xor
and
add
dec
xor
and
add
and
and
and
loope
lods
xor
and
inc
and
xor
and
xor
cld
xor
or
inc
and
sub
xchg
es
and
pop
xor
and
nop
xor
les
mov
and
hlt
xor
es
add
fldenv
and
jmp
and
push
xor
and
je
sbb
test
sbb
xchg
xor
movs
xor
mov
jns
les
mov
and
xor
and
pop
and
jns
and
imul
inc
xor
sub
xor
sub
xor
sub
xor
add
sub
xor
sub
xor
sub
xor
sub
xor
sub
xor
sub
xor
sub
xor
and
jns
and
jmp
and
and
and
and
and
cmp
movs
xor
jns
les
mov
add
pop
add
pop
pop
adc
jns
and
imul
inc
ss
and
and
pop
test
cdq
pop
xchg
ss
pop
mov
stc
push
les
mov
pop
in
test
and
fstp
adc
jns
and
jmp
pop
inc
aaa
mov
add
pop
fs
jmp
and
cmp
movs
aaa
imul
les
mov
and
aaa
test
sub
cmp
adc
jns
and
imul
cmp
sub
sub
sub
imul
les
icebp
sub
cmp
add
sub
cmp
xor
mov
sub
inc
sub
cmp
sub
leave
sub
sub
sub
xchg
les
mov
add
mov
cmp
add
es
jmp
es
mov
sub
cmp
sub
cmp
sub
cmp
pop
xchg
cmp
add
pop
call
cmp
sub
cmp
cmp
cmp
or
sub
ds
sub
sub
pushf
ds
int3
ds
sub
inc
aas
mov
fs
or
pushf
aas
popf
sub
sub
add
xor
cmp
add
leave
and
xor
add
and
and
and
mov
pop
hlt
xor
and
imul
pop
xor
and
in
add
dec
and
xor
pop
xor
push
pushf
xor
int3
xor
pop
xor
shl
xor
and
xor
add
pop
in
mov
and
xor
xor
xor
fnstenv
push
xor
and
xor
and
xor
xor
les
xor
sbb
test
xor
int3
xor
pop
and
sub
xor
pop
and
add
jns
mov
mov
and
mov
and
leave
and
and
aaa
jns
mov
aaa
inc
and
cmp
sub
stc
sub
sub
cmp
sub
cmp
sub
sub
sub
mov
sub
add
pop
sub
push
js
leave
push
lods
cmp
push
int3
cmp
pop
in
cmp
sbb
and
inc
cmp
pop
cmp
movs
cmp
pop
les
or
hlt
cmp
sbb
leave
sub
inc
sub
cmp
sub
cmp
sbb
cmp
sbb
cmp
sbb
cmp
add
mov
pop
sbb
aam
add
pop
sbb
adc
leave
sub
(bad)
push
ds
sub
sub
sub
ds
sub
ds
sub
mov
sub
adc
call
add
cmc
jmp
daa
adc
cmp
and
jmp
daa
xor
daa
je
add
cdq
daa
test
mov
test
pop
daa
les
cdq
daa
aam
cmp
clc
xor
daa
sub
stc
daa
pop
xor
(bad)
hlt
(bad)
fst
add
int
hlt
das
aad
adc
shl
or
mov
daa
xchg
xor
daa
loopne
movs
daa
push
xor
and
ins
xor
and
and
add
test
xor
xor
mov
xor
or
aam
cdq
xor
ss
xor
sbb
add
or
adc
stc
xor
jns
xor
sbb
inc
aaa
lea
and
or
sub
cmp
inc
sub
jge
les
int3
cmp
movs
sub
cmp
movs
sub
cmp
gs
cld
cmp
inc
daa
or
cmp
daa
sbb
sbb
daa
sub
pop
sub
sub
jge
inc
test
dec
ds
daa
pop
ds
daa
mov
std
es
ds
add
movs
ds
lods
ds
daa
mov
jno
fdivr
popa
sub
aas
int
hlt
call
and
das
shl
mov
sbb
jno
sub
push
sub
inc
sub
sub
sub
sub
sub
mov
lods
xor
sub
xor
jne
nop
xor
enter
cmp
sbb
cwde
ss
sbb
lods
sbb
aaa
ins
sbb
aaa
mov
sbb
sub
jl
cmp
sbb
push
xor
cmp
adc
add
adc
add
adc
add
adc
add
adc
add
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
or
adc
add
or
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
add
sbb
sbb
add
sbb
add
sbb
add
sbb
add
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
fst
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
or
add
adc
add
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
sbb
add
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
add
adc
add
sbb
adc
add
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
add
adc
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
add
dec
adc
add
sbb
adc
add
or
adc
add
or
adc
add
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
add
dec
sbb
add
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
int
add
int
add
fst
add
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
pop
adc
add
dec
adc
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
sbb
adc
add
or
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
add
sbb
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
sbb
add
add
dec
sbb
add
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
pop
add
popf
pop
add
lea
add
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
pop
add
fst
add
fst
add
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
sbb
add
push
add
or
push
add
sbb
push
add
or
adc
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
add
lea
add
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
or
adc
add
or
adc
add
fst
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
pop
adc
add
add
dec
adc
add
add
pop
adc
add
add
dec
adc
add
adc
add
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
adc
add
add
add
pop
sbb
add
add
dec
sbb
add
add
pop
sbb
add
add
dec
sbb
add
sbb
add
sbb
add
sbb
add
sbb
add
pop
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
add
popf
pop
add
popf
pop
add
lea
add
lea
add
popf
pop
add
popf
pop
add
lea
add
lea
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
pop
pop
add
pop
pop
add
dec
pop
add
dec
pop
add
sbb
pop
add
or
pop
add
sbb
pop
add
or
add
push
add
fst
add
int
add
int
add
fst
add
fst
add
int
add
int
add
popf
push
add
popf
push
add
lea
add
lea
add
popf
push
add
popf
push
add
lea
add
lea
add
pop
push
add
pop
push
add
dec
push
add
dec
push
add
pop
push
add
pop
push
add
add
dec
push
add
dec
push
add
sbb
push
add
or
push
add
sbb
push
add
or
push
add
fst
add
int
add
int
add
fst
add
int
add
int
add
popf
adc
add
lea
add
popf
adc
popf
adc
add
lea
add
pop
adc
add
dec
adc
add
pop
adc
add
dec
adc
add
sbb
adc
add
sbb
adc
add
or
adc
add
adc
add
adc
add
adc
add
add
adc
add
adc
add
push
(bad)
int3
rcl
pushf
adc
add
jne
sar
ret
(bad)
int3
and
mov
inc
dec
mov
inc
dec
mov
mov
inc
xor
mov
inc
push
mov
inc
adc
mov
mov
movs
mov
inc
adc
cmp
mov
call
popf
dec
aam
ror
mov
dec
inc
clc
inc
test
(bad)
fincstp
mov
(bad)
push
ins
popf
dec
lock
shl
mov
dec
inc
cld
mov
adc
jmp
fwait
dec
hlt
not
mov
add
and
hlt
(bad)
fcom
jae
mov
dec
mov
fld
push
sbb
(bad)
push
or
push
ins
sbb
shr
mov
add
or
repz
inc
add
sar
lock
shr
push
ret
test
(bad)
int3
rcl
add
inc
fwait
in
nop
jecxz
inc
mov
mov
inc
scas
mov
inc
lahf
scas
mov
inc
push
mov
mov
inc
push
mov
inc
push
mov
mov
inc
push
lods
mov
inc
adc
mov
inc
push
mov
mov
inc
or
loop
mov
inc
in
mov
inc
(bad)
mov
mov
add
xor
push
add
iret
iret
and
add
mov
add
not
mov
inc
call
mov
lldt
mov
mov
cdq
inc
shl
and
dec
or
add
xchg
cmp
adc
inc
dec
les
push
ins
cdq
jle
js
add
and
inc
or
xchg
inc
add
adc
add
test
rol
jo
add
movs
call
je
add
ins
cdq
dec
cld
not
mov
jg
mov
into
repz
dec
add
movs
ret
ins
cdq
jle
js
add
inc
nop
inc
cld
out
leave
pop
mov
mov
add
adc
leave
ficom
sub
add
inc
cwde
jne
je
add
jne
or
adc
les
cmp
push
or
cmc
(bad)
sti
xchg
mov
mov
fdivr
push
pop
mov
(bad)
int3
rcl
add
and
mov
inc
popf
lods
mov
inc
(bad)
mov
mov
inc
xchg
aad
inc
test
mov
inc
addr16
inc
pusha
adc
add
push
add
fcomp
cmp
add
or
add
not
mov
add
(bad)
out
or
repz
mov
nop
inc
call
inc
and
in
fdiv
push
lods
jmp
je
xchg
les
ret
enter
sar
inc
(bad)
in
nop
sti
mov
inc
mov
movs
mov
inc
test
mov
inc
fstp
add
mov
inc
inc
mov
data16
push
add
xlat
out
mov
scas
add
fs
cld
mov
(bad)
lock
xor
inc
in
inc
lea
and
std
xlat
imul
xchg
add
dec
adc
inc
jl
repnz
lods
(bad)
fstp
add
push
(bad)
int3
rcl
and
add
inc
repnz
mov
and
add
inc
or
lea
cmps
lea
add
les
sub
jmp
and
jo
cmp
ret
mov
sti
(bad)
push
inc
movs
lea
add
stos
mov
inc
push
(bad)
int3
test
(bad)
int3
ror
and
xchg
mov
add
jmp
lea
not
mov
xchg
fmul
ja
cld
(bad)
rol
mov
mov
mov
int3
inc
push
(bad)
int3
mov
adc
cld
add
call
add
sbb
add
je
or
jne
dec
clc
out
fincstp
cmp
shl
add
sbb
push
call
adc
in
push
(bad)
int3
mov
(bad)
int3
test
(bad)
int3
rcl
inc
mov
push
mov
adc
jmp
mov
mov
and
fild
inc
cld
jae
dec
push
rsm
adc
adc
add
jmp
mov
int3
sub
int3
inc
push
(bad)
int3
mov
add
inc
ins
xchg
js
je
jl
je
add
jo
out
movs
sub
or
add
push
or
mov
add
je
or
jne
inc
cld
dec
repz
sub
out
fdiv
mov
and
mov
rol
cli
js
test
loop
inc
pop
mov
and
cmc
xor
pcmpeqb
push
cmp
cmp
add
clc
out
sbb
add
mov
add
ja
xchg
mov
or
ins
xchg
mov
mov
or
imul
repz
mov
in
sar
xchg
mov
mov
call
mov
out
xlat
out
cld
xchg
add
je
inc
lock
scas
add
push
js
dec
lock
(bad)
fisttp
add
fs
test
adc
add
adc
add
into
fisttp
js
xchg
mov
jmp
(bad)
fisttp
mov
sub
jmp
jbe
(bad)
push
and
into
jmp
gs
fdivrp
mov
(bad)
repz
dec
pop
mov
add
mov
inc
out
call
jmp
ins
mov
jmp
pop
lds
cmp
adc
sar
rcl
mov
mov
mov
lea
dec
adc
rcl
repz
push
push
ret
xor
int3
sub
int3
ror
inc
(bad)
in
add
sar
pop
mov
xchg
pop
mov
jmp
xor
xchg
lea
inc
test
mov
jl
je
add
jae
mov
add
enter
cld
push
mov
add
shl
mov
xchg
lea
add
test
push
cmp
add
jmp
jo
clc
bound
or
inc
push
adc
add
(bad)
xor
add
je
xchg
mov
pavgw
cli
push
push
mov
sub
mov
xchg
stc
dec
add
xchg
or
add
call
or
inc
loope
xchg
or
gs
dec
or
inc
mov
adc
test
jbe
cmp
cmp
ins
add
push
out
int
repnz
fisttp
(bad)
int3
and
aaa
inc
add
push
or
add
jo
mov
int3
ror
and
xchg
mov
mov
or
push
mov
into
out
or
or
outs
cld
mov
xchg
lds
xchg
les
sbb
mov
add
je
repz
push
ins
adc
mov
xchg
mov
int
add
je
(bad)
jg
adc
add
mov
dec
mov
xchg
mov
lea
and
xchg
cmp
je
repz
add
stos
dec
jl
xchg
mov
inc
add
in
(bad)
out
shl
mov
dec
mov
ret
ins
mov
jmp
rcr
mov
adc
and
add
mov
sub
push
and
gs
rol
mov
fdivr
push
mov
mov
mov
push
push
adc
push
add
jl
ds
sub
sti
adc
les
inc
call
call
add
enter
lock
call
test
dec
nop
mov
ja
daa
mov
dec
cmp
add
or
rol
enter
sub
mov
push
cmp
push
jg
je
add
jg
push
adc
add
shr
ds
je
dec
cmp
add
shr
mov
and
adc
inc
add
xchg
mov
and
adc
add
lahf
cli
(bad)
mov
and
je
xchg
mov
cmc
xor
add
or
iret
rol
push
mov
inc
jnp
xchg
xchg
adc
jmp
inc
mov
imul
inc
mov
add
push
mov
xchg
mov
ja
add
pop
idiv
mov
mov
mov
sub
fwait
adc
dec
and
mov
es
sti
jnp
jg
jl
cmp
mov
(bad)
lock
nop
mov
dec
out
or
add
je
ins
sub
xchg
fild
test
xchg
mov
ja
mov
push
or
inc
or
ret
out
into
jmp
fsub
(bad)
jmp
mov
mov
xor
push
aam
cmp
mov
sub
dec
int3
add
push
add
mov
(bad)
in
(bad)
out
(bad)
xor
add
or
mov
mov
mov
push
lods
popa
clc
maskmovq
idiv
lock
xchg
cwde
ja
je
jl
je
add
mov
adc
dec
add
push
and
idiv
push
adc
lock
and
imul
add
je
dec
lock
and
inc
sbb
enter
fmul
xor
dec
mov
xchg
lahf
cmp
out
pop
xor
xor
repz
cld
shl
xor
leave
cld
add
mov
lahf
dec
lock
ja
add
out
pop
or
je
ror
dec
popf
dec
lock
lahf
cmp
out
pop
sbb
test
sahf
cmp
ja
xor
cmp
xchg
sahf
dec
or
push
sbb
xor
adc
mov
jo
or
int3
addr16
adc
xchg
mov
ret
rcr
int3
add
and
hlt
add
jmp
popf
cmp
not
sti
mov
dec
inc
or
inc
xchg
adc
inc
inc
or
hlt
mov
dec
cld
cmc
(bad)
call
inc
jl
cmp
dec
ins
adc
out
push
push
ret
inc
popf
jecxz
out
push
or
add
call
xor
dec
cld
imul
test
cmp
dec
push
or
shl
int3
and
xchg
fwait
cmp
call
mov
hlt
(bad)
push
mov
push
fmul
jl
inc
clc
out
data16
mov
fwait
cmp
call
mov
xor
push
add
ins
fwait
dec
lock
mov
inc
cld
xor
add
jmp
popf
dec
hlt
not
add
int3
pushf
inc
hlt
(bad)
pop
sbb
popf
dec
or
cld
pop
push
xchg
xchg
pushf
adc
sub
call
not
add
mov
and
popf
dec
in
out
pop
in
rcl
add
adc
push
inc
xchg
mov
jmp
inc
ror
loope
int3
inc
loope
int3
mov
cmp
cmp
jmp
mov
(bad)
push
mov
pop
call
push
lock
mov
push
add
js
dec
lock
imul
js
adc
test
adc
add
adc
add
popa
loopne
leave
and
push
js
xchg
fwait
xchg
add
and
push
ins
jp
pop
loopne
shl
inc
test
in
sbb
call
mov
adc
test
bound
add
pop
sbb
dec
ins
fwait
nop
dec
jo
add
cmps
call
pushf
call
jbe
inc
sbb
pop
fmul
ins
popf
inc
adc
popa
aam
jmp
push
push
sbb
dec
jl
nop
dec
jo
add
inc
cli
sbb
js
cmp
pop
mov
rcl
in
pop
loopne
mov
not
loope
int3
sub
ret
int3
inc
loope
int3
mov
xor
rol
je
cmp
sbb
(bad)
(bad)
mov
push
jmp
je
push
out
mov
push
in
mov
push
jecxz
mov
push
icebp
jae
push
out
inc
mov
out
push
add
mov
push
in
inc
cmp
ja
push
jmp
cmp
jb
push
stc
cmp
add
push
hlt
mov
xchg
leave
and
mov
push
call
not
pop
jmp
stc
xor
je
push
out
pop
add
fmul
add
lahf
dec
call
and
xor
jg
jo
mov
jmp
cdq
cmp
stos
xchg
sub
shr
push
fmul
sub
pop
add
ffreep
int3
inc
fld
int3
rcr
inc
pusha
mov
cmp
sbb
(bad)
(bad)
out
push
hlt
mov
cmp
ret
call
add
cmp
jg
jne
xchg
cwde
mov
or
cld
shl
or
jo
dec
cld
not
daa
push
fdivr
repz
xchg
mov
adc
push
in
jmp
and
jne
or
mov
lahf
cmp
push
push
ret
(bad)
int3
mov
ret
int3
test
ret
int3
inc
fadd
int3
rcr
inc
add
pusha
mov
cmp
sbb
(bad)
push
mov
add
and
or
mov
popf
dec
clc
pop
pop
xchg
or
add
mov
sahf
cmp
push
push
ret
(bad)
int3
mov
ret
int3
test
ret
int3
rcl
int3
and
mov
add
cld
fldl2t
(bad)
inc
add
push
hlt
mov
sbb
dec
pop
or
pop
xchg
sahf
nop
inc
js
add
inc
inc
mov
or
mov
sahf
fcomp
adc
int3
sub
ret
int3
inc
fld
int3
rcr
inc
and
cmp
fldl2e
(bad)
(bad)
out
dec
hlt
mov
jg
mov
add
jg
mov
cmc
fisttp
repz
push
mov
or
add
dec
or
cld
movs
hlt
mov
popf
cmp
not
daa
push
pushf
(bad)
inc
and
adc
dec
in
jmp
and
jne
or
pop
in
inc
dec
popf
cmp
(bad)
out
push
ret
(bad)
int3
sub
ret
int3
add
inc
fadd
int3
rcr
push
hlt
je
add
pushf
xchg
sti
push
(bad)
icebp
xor
repz
or
mov
fwait
cmp
dec
mov
outs
idiv
ret
call
add
stc
movs
or
xor
repz
addr16
adc
js
add
repz
push
out
mov
dec
(bad)
stc
mov
call
xor
jg
lods
or
push
push
pop
dec
shr
xchg
adc
out
call
mov
jmp
mov
fwait
jl
fild
repz
inc
popf
inc
lock
out
popa
lock
jl
push
adc
test
or
inc
mov
popa
fsubr
adc
add
mov
dec
mov
fwait
idiv
arpl
dec
fwait
test
pop
repz
mov
xchg
(bad)
cmp
repz
fwait
idiv
and
dec
sub
cwde
jnp
adc
xchg
repz
out
push
push
mov
xchg
idiv
repz
adc
jmp
std
pop
test
icebp
jae
call
call
gs
mov
push
repz
jno
adc
popf
jl
lahf
push
repz
imul
mov
pop
test
repz
repz
call
push
mov
jne
inc
add
xchg
movs
cld
jmp
les
push
repz
out
lahf
arpl
sbb
dec
call
not
pop
mov
js
(bad)
sti
test
inc
cld
and
shl
rcr
or
je
jl
mov
(bad)
xor
mov
pop
(bad)
icebp
inc
idiv
mov
add
repz
jl
pop
sub
jnp
pop
(bad)
stc
cmp
mov
dec
into
jl
dec
add
cmp
inc
add
idiv
xor
test
repz
add
xor
or
idiv
sti
jb
test
into
jl
add
fild
gs
inc
sti
rol
(bad)
icebp
push
idiv
ret
adc
(bad)
cmp
jl
scas
add
gs
add
(bad)
stc
cld
cmc
dec
or
dec
into
jl
outs
add
xor
ins
(bad)
icebp
push
call
mov
(bad)
(bad)
jl
ds
inc
cmp
sub
(bad)
stc
add
call
jno
test
call
add
dec
xor
popa
(bad)
icebp
pop
idiv
jecxz
mov
call
jl
iret
add
push
mov
add
(bad)
stc
adc
jmp
push
jmp
fidivr
add
gs
add
add
(bad)
icebp
and
inc
add
mov
dec
fidivr
add
bound
cdq
push
sti
dec
add
stc
daa
idiv
cmp
test
fidivr
add
jns
cdq
or
adc
add
icebp
sbb
inc
pop
mov
call
jl
out
add
je
cwde
push
sti
fild
inc
(bad)
stc
pop
idiv
retf
jb
test
repnz
add
jl
scas
add
jne
cwde
adc
mov
xor
call
push
jmp
jl
jg
repz
cmp
(bad)
(bad)
stc
cmp
call
mov
(bad)
fcomp
jl
aas
add
xor
inc
(bad)
icebp
sub
jmp
adc
repnz
mov
add
add
cmp
ins
(bad)
stc
pop
idiv
jmp
mov
dec
jl
iret
add
fs
inc
sti
ret
add
icebp
dec
idiv
mov
mov
call
fidivr
add
dec
mov
add
stc
push
idiv
jnp
mov
call
fidivr
add
ins
xor
pop
mov
icebp
fs
inc
imul
add
adc
test
xor
mov
idiv
add
add
dec
aam
test
dec
ja
(bad)
std
cmps
pop
sti
retf
add
int3
js
(bad)
mov
xchg
out
cli
stos
add
movs
std
repnz
lea
add
add
and
pop
repz
mov
xchg
test
pop
add
push
out
test
dec
jmp
xchg
jl
ds
push
call
push
dec
lods
mov
xchg
mov
add
push
call
push
jmp
xchg
test
out
push
push
out
test
(bad)
dec
jmp
lods
mov
xchg
jl
mov
xchg
out
cli
mov
push
inc
mov
ins
add
test
mov
push
push
mov
mov
sti
arpl
dec
lock
(bad)
push
jle
adc
mov
mov
mov
push
push
add
out
nop
mov
sbb
push
mov
das
idiv
or
jns
push
xor
mov
add
pop
idiv
jecxz
xchg
xchg
mov
(bad)
repnz
out
nop
and
mov
push
call
not
or
ja
push
sti
mov
dec
mov
in
dec
mov
add
push
xchg
repnz
mov
(bad)
repnz
pop
push
jmp
dec
xchg
mov
inc
je
test
repnz
jmp
push
out
xchg
out
cli
sbb
dec
mov
test
xchg
cmps
in
in
div
std
jle
cmp
cmp
bnd
inc
les
std
repnz
out
xchg
mov
add
mov
dec
mov
xor
jmp
std
repnz
add
jmp
bound
lea
inc
mov
call
dec
call
not
or
ja
push
sti
and
push
mov
clc
dec
mov
add
dec
xchg
add
movs
mov
fsubr
jmp
nop
mov
inc
je
jge
iret
cld
repnz
out
dec
call
cli
mov
dec
mov
or
jmp
stc
bnd
cld
jle
push
adc
xchg
sar
repnz
(bad)
cmp
les
repnz
jmp
dec
mov
add
sub
(bad)
cmp
adc
cld
repnz
mov
add
pop
idiv
adc
push
xor
xchg
movs
pop
jmp
dec
call
not
or
ja
push
sti
mov
rcl
add
xchg
and
test
add
ret
in
(bad)
jnp
mov
mov
cmp
mov
idiv
dec
clc
mov
push
lock
repnz
sbb
jmp
add
push
test
stc
inc
idiv
or
add
bnd
push
fmul
jecxz
xchg
add
and
dec
test
push
call
(bad)
mov
std
repnz
dec
test
push
in
icebp
sbb
call
std
bnd
push
ror
xchg
repnz
stc
dec
test
dec
mov
add
xchg
cmp
push
mov
sub
jmp
addr16
add
xor
jg
mov
repnz
loope
adc
mov
ja
push
sti
jmp
dec
mov
lods
push
mov
add
xchg
and
test
stc
repnz
pushf
leave
jmp
stos
xchg
mov
inc
je
lea
repnz
dec
push
out
xchg
cli
jnp
push
mov
mov
xchg
repnz
in
popf
hlt
push
stc
jle
pusha
mov
dec
lea
lea
stc
repnz
out
xchg
mov
daa
idiv
add
jne
stc
repnz
add
stc
push
idiv
(bad)
dec
mov
xchg
lea
clc
repnz
inc
stos
clc
push
call
test
cmp
ja
push
sti
cmp
mov
ror
add
xchg
(bad)
mov
clc
repnz
pop
sbb
inc
mov
inc
je
test
repnz
out
popa
test
out
xchg
out
cli
adc
dec
mov
or
inc
xchg
add
inc
in
loope
jmp
jle
mov
test
sti
bnd
inc
in
mov
call
dec
mov
sub
call
div
xor
add
loope
idiv
jae
xchg
xchg
lds
repnz
call
dec
call
repz
iret
or
ja
push
sti
sbb
push
mov
add
inc
xchg
inc
mov
int3
outs
out
(bad)
fist
add
jge
mov
dec
rcl
out
cli
stos
test
or
call
sti
bnd
add
mov
call
mov
les
repnz
call
dec
mov
sub
push
gs
cmp
push
lea
lods
icebp
dec
xchg
cmc
rcr
call
not
add
rcl
sldt
dec
xchg
std
push
adc
mov
cmc
repnz
sub
dec
ret
(bad)
out
push
ret
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
je
add
add
je
add
je
add
je
add
mov
dec
add
dec
add
dec
add
dec
add
xor
test
dec
add
dec
add
add
xor
movs
xor
lods
xor
push
xor
xor
pop
xor
ins
xor
cmp
dec
add
dec
add
xor
and
dec
add
dec
add
xor
sub
dec
add
dec
add
dec
add
dec
add
xor
xor
dec
add
add
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
