repz
jle
inc
jmp
fdivr
ja
add
mov
out
pop
cli
pop
sbb
push
mov
jp
cmp
jno
dec
shr
push
jecxz
sub
mov
sbb
fisttp
xor
ds
retf
out
fmul
movs
aas
mov
mov
mov
es
xchg
arpl
(bad)
pusha
aas
xor
aas
cmp
ja
pop
mov
std
mov
not
sar
outs
(bad)
fild
shl
push
icebp
idiv
jb
or
cld
repnz
cmp
(bad)
ds
repz
test
retf
cmp
int3
xchg
and
(bad)
and
test
mov
pop
retf
(bad)
loop
xor
add
in
push
xor
sahf
pop
fdiv
shl
jno
mov
push
pop
cmp
ss
and
pop
mov
stc
mov
sbb
scas
jp
sbb
loopne
sub
jo
fwait
lock
pop
push
sbb
and
fcomp
das
imul
cmp
rol
dec
pop
data16
cwde
enter
mov
and
cmps
fsubr
pop
popf
aas
popa
movs
rol
repz
push
adc
das
stos
inc
fcom
aaa
aaa
xchg
out
adc
add
mov
test
out
push
sbb
int3
lods
cmc
jb
mov
outs
cmp
mov
or
or
test
cwde
xchg
enter
(bad)
in
pop
iret
mov
enter
xchg
pop
sbb
fnstsw
jle
ror
out
add
aad
data16
retf
jecxz
push
cwde
imul
repz
pushf
pop
or
mov
cdq
sub
dec
mov
mov
mov
stos
aas
mov
jg
lock
mov
popa
xor
pop
sbb
stc
fbstp
mov
fidiv
(bad)
ror
and
jp
add
fidivr
and
push
pop
push
xchg
push
sbb
add
pop
xor
sub
pop
jmp
int3
push
das
ret
fidivr
mov
gs
adc
aas
cwde
sbb
mov
sbb
ficomp
mov
sbb
rcl
movs
movs
sahf
jle
dec
fwait
popf
mov
mov
push
sbb
es
add
inc
lahf
sti
repz
popf
sub
mov
adc
adc
(bad)
cmp
cvtps2pd
test
jge
mov
cmps
sub
inc
pop
or
cmc
(bad)
repnz
xor
repz
gs
(bad)
mov
cmp
pop
leave
mov
shl
int
inc
mov
push
repz
mov
push
shl
(bad)
mov
jmp
pop
ret
mov
(bad)
nop
lahf
stos
fst
shl
hlt
into
sbb
push
mov
(bad)
inc
popf
fidivr
repz
pop
pop
addr16
sbb
xchg
adc
enter
ins
mov
sbb
add
xchg
mov
(bad)
repz
jns
xlat
push
jle
mov
(bad)
mov
or
mov
mov
add
xchg
movs
out
xchg
or
lods
xor
inc
rcr
pusha
(bad)
adc
jns
mov
hlt
lahf
pop
shl
daa
jae
jnp
fwait
mov
mov
push
jae
pop
push
mov
jl
stc
int3
xchg
lods
out
retf
jl
fimul
and
cmp
push
ror
(bad)
mov
cmps
ret
shl
fcmovnb
mov
aas
xchg
lds
push
sub
fcomip
ds
and
push
jl
mov
jmp
into
cmps
mov
xchg
cmps
xor
test
jmp
mov
inc
pusha
mov
cmp
mov
mov
ret
fsubr
xlat
pop
inc
xor
daa
mov
dec
cdq
jecxz
(bad)
ds
lods
js
mov
in
mov
scas
test
cmc
lahf
dec
cdq
dec
or
pusha
pushf
xchg
daa
mov
mov
aas
inc
xor
mul
xor
mov
adc
ds
jmp
iret
imul
loop
mov
int3
movs
pop
xchg
sub
or
repz
stos
push
js
aam
fucomp
outs
fdiv
xor
es
dec
call
sbb
xor
int3
mov
inc
clc
int3
das
arpl
dec
enter
out
std
xchg
int3
rol
test
call
into
daa
(bad)
sub
sub
xor
inc
mov
mov
les
xchg
rol
inc
rcl
sub
addr16
push
pushf
jg
push
mov
pop
sub
jmp
sbb
mov
cmp
xchg
data16
(bad)
arpl
mov
adc
data16
outs
into
fldcw
adc
cmps
int3
xor
mov
ins
ins
xchg
cmp
cmp
sbb
hlt
call
jmp
and
popf
aam
xchg
lods
fdivr
push
cmp
mov
push
sbb
aam
fimul
out
scas
ret
mov
sbb
int3
push
push
out
lea
imul
adc
dec
cld
push
mov
mov
jo
push
jb
jp
clc
adc
popf
jb
dec
xor
mov
int3
xor
scas
cmp
ss
mov
sbb
ret
sti
jo
xor
nop
sbb
sbb
xor
adc
je
ret
inc
jns
mov
or
les
jne
repz
mov
retf
fs
outs
aam
add
adc
or
xlat
xchg
pop
(bad)
lods
pop
fmul
sub
(bad)
inc
jge
xor
loop
daa
mov
inc
pop
or
loopne
mov
sbb
pop
and
mov
inc
pop
or
repnz
jno
ret
mov
mov
mov
jb
movs
inc
adc
sbb
imul
jmp
dec
add
aaa
(bad)
or
push
add
push
aas
fnsave
dec
or
out
out
jg
stos
xchg
adc
(bad)
push
mov
push
cmp
int
jae
push
mov
jbe
movs
fstp
inc
inc
aad
push
xor
dec
push
sahf
fld
and
add
cmp
loop
push
cmp
call
bound
sub
test
jl
cmp
popf
mov
ds
jge
jmp
pop
adc
add
push
or
fisubr
loop
push
xor
inc
out
mov
cmp
push
and
sub
idiv
enter
hlt
xchg
jnp
das
cld
cmp
into
or
cmp
ja
movs
clc
out
jecxz
fist
jp
add
pop
retf
pop
mov
addr16
iret
mov
aam
aaa
int3
stos
inc
add
(bad)
cmp
enter
cmp
ret
iret
mov
and
cdq
shl
aas
les
in
shl
mov
aad
push
adc
fdivr
cs
pop
jle
shl
mov
mov
push
mov
repnz
rcr
shr
mov
mov
arpl
pop
cmp
cdq
dec
add
clc
adc
cmps
arpl
adc
gs
fld
rcl
imul
cs
inc
fdivr
adc
xchg
mov
mov
test
or
xor
push
xchg
rcr
fnsave
clc
and
jmp
cmp
sub
sbb
fsubr
push
dec
in
bound
xlat
jecxz
cmp
mov
cmps
aam
mov
ret
fild
inc
dec
jge
out
add
les
adc
int3
fsub
idiv
mov
push
push
je
lock
push
cmp
int
push
bound
mov
nop
call
pop
cmps
push
pop
cmp
jb
mov
push
or
xchg
lods
dec
jle
fs
test
gs
(bad)
rcl
ss
loope
out
xor
loop
call
inc
(bad)
sbb
pop
(bad)
mov
mov
stos
add
mov
enter
xor
test
enter
je
lds
rcl
xor
xchg
inc
in
dec
jae
scas
aam
and
adc
rol
scas
movs
shr
cld
sub
jno
aad
les
loopne
xchg
xchg
add
dec
or
sti
loopne
sbb
or
sbb
int3
adc
test
adc
and
adc
inc
ds
loop
adc
pop
in
enter
ins
outs
enter
mov
cdq
test
mov
jecxz
jns
popf
dec
dec
or
or
les
sbb
mov
loopne
fucom
push
jecxz
mov
add
pop
push
jge
or
mov
cwde
mov
retf
pop
arpl
js
or
pop
inc
xor
adc
daa
test
jno
lods
in
popa
push
(bad)
(bad)
sbb
push
mov
sub
mov
xchg
inc
xlat
push
(bad)
ss
push
fsub
out
push
test
retf
popa
(bad)
clc
push
pop
(bad)
mov
test
mul
pop
pop
push
dec
fwait
jb
cmc
int
retf
iret
loope
adc
inc
outs
cs
xor
rcl
(bad)
jp
sbb
pop
ds
push
mov
mov
fidivr
mov
mov
aad
dec
out
ss
mov
aas
push
and
scas
inc
je
ds
mov
lods
ret
mov
sbb
push
push
iret
mov
sbb
dec
cmp
push
shl
cmp
sub
add
mov
xchg
mov
dec
jmp
(bad)
out
or
mov
pop
or
ret
push
inc
mov
sub
outs
cld
jmp
adc
jmp
mov
lock
das
ds
je
cmc
fmul
xor
cmp
xor
dec
mov
(bad)
jmp
and
mov
out
ret
push
or
scas
xor
xlat
xchg
xchg
pop
call
movs
sbb
loopne
data16
(bad)
loopne
pop
popa
xchg
pop
aam
cdq
mov
or
mov
ins
gs
mov
cmps
push
mov
lods
and
(bad)
adc
ja
inc
push
push
scas
mov
jmp
in
push
clc
mov
int3
imul
inc
jmp
and
jne
mov
jae
or
xchg
stos
mov
(bad)
idiv
iret
idiv
out
mov
in
cmp
adc
mov
adc
rol
das
mov
ss
and
add
or
adc
xchg
push
jp
cli
jp
sub
stos
movs
cdq
test
bound
push
iret
mov
push
or
test
fs
and
test
dec
push
aas
jp
xchg
fstp
lds
mov
sbb
out
out
repnz
aam
add
scas
call
retf
jmp
rcl
aad
(bad)
ss
hlt
loope
add
push
cmp
into
cli
dec
jns
nop
fadd
test
mov
and
jnp
loope
push
sbb
xchg
mov
les
sbb
sar
sub
adc
and
sbb
fld
mov
(bad)
jae
pop
mov
mov
jb
add
sub
xor
inc
inc
mov
cld
jl
cmp
std
jmp
ror
push
iret
(bad)
push
mov
push
push
jmp
dec
mov
mov
inc
call
ficom
sbb
xlat
les
adc
mov
mov
jbe
shl
scas
fcom
push
rcr
xor
out
mov
xchg
mov
mov
lahf
push
cmp
sbb
(bad)
sbb
fs
pop
clc
sub
cmp
shl
jns
sbb
lds
pop
pop
push
sub
mov
adc
movs
adc
sbb
dec
mov
lods
loop
out
and
imul
and
xchg
sahf
mov
ins
rol
ss
lods
push
push
push
aas
lods
pop
ja
into
test
jmp
out
sbb
xchg
jg
inc
cwde
retf
out
jmp
call
arpl
add
int
std
retf
mov
cmp
stos
mov
xchg
ja
fdiv
ja
fadd
lods
pusha
xchg
mov
push
inc
add
xchg
and
(bad)
pop
shr
xchg
clc
xchg
pushf
xchg
sahf
cmc
jge
test
clc
adc
jbe
cmp
jbe
stos
shr
sbb
fcom
dec
xlat
fist
pop
inc
jnp
cmp
int3
jle
out
fs
cmp
or
daa
cwde
xor
inc
or
mov
test
sbb
cmp
daa
loopne
mov
pop
add
das
sahf
inc
mov
and
add
sub
sar
xchg
and
out
push
mov
aam
fldlg2
icebp
imul
jp
mov
(bad)
in
hlt
mov
cmp
shr
push
bound
repnz
adc
es
xor
sbb
scas
pop
sub
xchg
shr
fbld
icebp
xor
add
cli
and
adc
push
adc
mov
mov
aam
shr
push
inc
push
repnz
cmps
pop
adc
cmp
adc
and
inc
inc
(bad)
es
adc
pop
sub
mov
sbb
ret
and
jg
add
or
or
jecxz
xchg
pop
jno
cwde
(bad)
pop
lds
ds
imul
sbb
cmc
test
rcr
jmp
inc
pop
adc
mov
aas
(bad)
mov
cmp
push
xor
mov
sar
add
mov
out
loopne
stc
pop
push
inc
jo
add
fsub
push
(bad)
dec
push
inc
and
or
sahf
push
push
clc
movntps
push
mov
in
pop
pop
out
mov
pop
les
dec
frstor
out
mov
(bad)
sbb
scas
mov
sub
mov
fcmovbe
jnp
push
addr16
cmp
mov
dec
out
test
push
les
mov
data16
cmp
cmp
jb
lds
inc
mov
jecxz
test
dec
stos
das
mov
inc
mov
push
stos
outs
fadd
push
dec
jl
jecxz
int3
movs
jmp
pop
bnd
xor
and
cli
mov
fistp
ret
sub
mov
jmp
push
and
push
movs
mov
jo
setp
adc
xchg
mov
lods
cli
fst
(bad)
popf
mov
test
xor
mov
pop
call
test
cmp
(bad)
cmp
dec
aas
xchg
pop
mov
sbb
dec
sti
shr
sub
adc
sbb
push
test
and
dec
call
xor
ret
mov
std
jne
xchg
or
xchg
shl
push
xchg
mov
push
rcl
je
bound
and
jns
xor
cmp
dec
cmp
jg
xchg
(bad)
jno
mov
xchg
cs
and
stos
mov
pop
cli
sbb
aas
adc
jne
lea
lahf
(bad)
test
shl
mov
data16
fcom
cmps
int3
jecxz
inc
cwde
lahf
(bad)
xor
cmp
lods
nop
cmp
pusha
dec
xchg
data16
aas
adc
jne
rol
call
test
stc
mov
pop
cld
mov
inc
mov
bound
ror
mov
sahf
loop
out
gs
push
mov
mov
arpl
es
or
dec
or
les
outs
cmp
out
sbb
pop
or
mov
imul
cmps
push
jno
dec
outs
and
mov
loopne
cmp
adc
and
or
(bad)
dec
pop
std
gs
sbb
inc
sbb
sub
jmp
and
pop
enter
imul
pop
and
(bad)
lahf
call
clc
sahf
mov
aaa
push
cli
xor
cmp
mov
jno
into
lods
imul
dec
stos
pop
sub
lahf
xor
adc
(bad)
loopne
add
fist
cmps
lds
or
xchg
adc
pop
adc
fstp
adc
jge
lea
add
jne
mov
adc
lods
or
pop
fdivr
xchg
mov
pop
xor
mov
and
jmp
xchg
bound
out
scas
xchg
pop
sbb
jg
or
retf
call
mov
xchg
ret
mov
movs
ds
add
push
push
or
xchg
pop
call
repz
mov
jp
nop
jb
xor
ins
loopne
push
and
push
in
mov
aam
adc
add
ss
xor
cdq
add
retf
xchg
jb
mov
xchg
nop
ins
add
idiv
mov
daa
pop
lea
loop
loopne
mov
jge
adc
xor
imul
popw
xchg
mov
mov
push
jl
scas
inc
fld
xchg
xchg
cmps
cmp
shld
mov
call
push
test
inc
sahf
imul
sbb
or
(bad)
xchg
fnstsw
xchg
mov
fld
xor
xchg
mov
or
std
push
adc
add
add
js
mov
paddq
and
jge
ret
add
(bad)
adc
aaa
(bad)
imul
jl
bound
pop
movs
sahf
nop
(bad)
loopne
(bad)
(bad)
in
add
push
nop
xchg
inc
lock
adc
add
lock
jbe
shl
clc
dec
call
bound
cmp
scas
popa
mov
movs
shr
(bad)
and
and
inc
mov
sahf
sub
push
push
test
aaa
mov
add
push
mov
in
movs
das
das
push
adc
adc
stc
sbb
xor
or
popa
out
mov
ja
retf
sub
mov
jmp
test
pop
pop
fnsave
pop
out
cmp
jl
sub
push
xchg
jmp
jno
data16
cli
xor
jg
sbb
mov
stos
aam
mov
jle
push
mov
xchg
inc
jle
pop
dec
cwde
in
nop
cmp
mov
gs
ror
or
gs
pop
sub
js
ja
sbb
adc
mov
or
imul
push
push
jo
pop
sub
clc
and
push
sbb
out
xchg
xchg
xchg
jne
rcr
dec
test
mov
sub
push
rcl
call
adc
xchg
pop
sbb
push
and
(bad)
and
sub
and
mov
pop
aas
mov
repz
mov
xlat
jno
sub
cmp
(bad)
adc
pushf
aam
cmps
enter
loope
pop
ret
(bad)
sub
mov
mov
dec
mov
dec
ret
and
int3
mov
cmp
mov
inc
shl
pop
in
scas
stos
push
adc
aam
sub
gs
mov
mov
xor
iret
push
shr
stos
xor
inc
fst
mov
leave
dec
mul
fwait
aam
push
pop
push
(bad)
and
or
call
xchg
sbb
and
jge
or
jbe
push
ds
jnp
jnp
jge
dec
pusha
adc
xchg
adc
lock
jae
jne
ds
pushf
(bad)
std
ret
jg
pop
add
jge
out
jge
cmp
jnp
adc
cs
dec
and
mov
aad
mov
adc
loope
xchg
push
push
cmp
inc
pushf
ins
fnstenv
mov
movs
test
nop
ret
or
lock
inc
push
shl
sub
movs
ret
fld
aaa
(bad)
hlt
sub
push
(bad)
(bad)
sti
fcos
iret
mov
adc
push
shl
mov
aam
rcr
stos
mov
enter
cmp
stos
inc
push
leave
and
int3
mov
adc
sub
hlt
int3
sub
and
fcom
sar
dec
sar
cmp
push
fwait
cmp
fistp
fdivr
out
push
jp
aas
test
sbb
sbb
fadd
mov
adc
inc
adc
mov
sahf
dec
xor
je
retf
popf
mov
test
ins
cld
inc
dec
hlt
ds
and
in
cld
sub
int3
sahf
xor
sub
dec
fcomp
and
pop
pop
loopne
push
mov
shr
jo
xchg
jmp
mov
(bad)
in
shr
outs
and
cmp
movs
push
adc
sar
adc
imul
inc
loopne
push
cmp
in
int3
shl
or
cld
test
arpl
cwde
adc
lahf
inc
repz
or
out
push
repz
test
jbe
bound
cmp
xchg
xchg
sub
adc
les
rcr
push
(bad)
mov
xchg
add
mov
sub
fistp
mov
pushf
cdq
js
pusha
fnsave
sbb
fcmovnu
sbb
icebp
test
pop
jmp
(bad)
add
jle
enter
cmp
or
inc
jecxz
inc
mov
aam
jge
inc
sbb
cmp
jnp
cmp
cmps
dec
jg
out
ret
cmp
inc
icebp
movs
jecxz
ss
cwde
jl
cmp
jl
ret
imul
adc
cdq
jne
jmp
jb
ror
cmp
(bad)
clc
das
hlt
enter
push
pop
xchg
test
imul
pop
cmp
call
imul
and
mov
aam
or
add
mov
repnz
add
daa
cs
mov
mov
xchg
fcomp
jp
sub
and
xchg
inc
xor
retf
jo
div
sub
retf
(bad)
pop
test
loopne
enter
retf
iret
xor
sbb
ds
out
push
dec
dec
push
outs
mov
ds
mov
inc
jl
and
repz
loopne
daa
push
cmps
adc
hlt
jge
xchg
into
sbb
dec
xchg
bound
adc
sbb
or
inc
leave
and
scas
inc
clc
frstor
xor
cmp
mov
xor
sbb
test
mov
cmps
sub
fistp
movs
outs
ss
sbb
inc
cmp
int3
lock
mov
mov
iret
in
add
fisttp
outs
(bad)
out
int
or
es
mov
sbb
xor
inc
pop
and
and
js
pop
out
rol
cld
xor
les
shl
xlat
xor
movs
lahf
cmps
and
sbb
sahf
xor
sub
push
(bad)
push
mov
xchg
fcomp
cmp
pop
xchg
aad
dec
jmp
sub
popa
inc
retf
nop
scas
push
jmp
inc
sbb
xchg
pop
jecxz
xor
and
in
cmp
loope
sub
mov
test
cmps
ins
out
pop
ins
mov
aaa
pop
sahf
daa
repnz
out
pop
push
dec
adc
jle
inc
xchg
cs
jmp
adc
pop
push
sbb
mov
(bad)
ins
lahf
xor
sub
sub
push
mov
ret
fisttp
xchg
mov
ins
or
ins
push
ror
inc
dec
mov
clc
inc
push
icebp
push
addr16
inc
add
es
inc
inc
jge
pop
and
popa
lods
(bad)
fdiv
div
sbb
or
or
jp
jmp
cmp
xchg
stc
and
sti
cli
adc
push
sbb
mov
sbb
mov
cdq
lods
pusha
rcl
movs
loop
pop
into
sub
aam
sub
mov
ds
inc
std
add
cmc
lahf
rcr
lods
dec
sub
pop
cmp
call
cdq
out
out
and
iret
push
shr
or
dec
mov
sti
les
(bad)
push
xchg
mov
pop
ror
fadd
push
push
out
out
shl
xchg
call
xchg
sub
in
mov
cmp
pop
sub
adc
out
mov
sub
mov
dec
jl
sahf
or
ds
add
rcl
cmp
mov
aaa
(bad)
mov
jb
mov
adc
cmp
iret
cmp
sbb
push
popa
sti
xchg
xor
jns
sar
add
jl
mov
test
pop
or
add
retf
outs
cli
dec
jl
cmps
ficom
dec
xchg
jmp
aad
and
enter
stos
popf
xor
(bad)
jecxz
inc
xchg
test
mov
sub
sbb
ret
fadd
push
and
stos
mov
sub
iret
retf
xchg
clc
stc
lahf
and
(bad)
and
mov
mov
mov
cmp
js
aas
dec
pop
out
pop
repz
xlat
aam
sub
jmp
jo
retf
lock
or
je
je
cmp
popf
push
cmp
retf
pop
iret
(bad)
movs
jle
cmp
inc
adc
fdiv
jbe
cmp
cmp
jl
scas
mov
mov
fstp
lahf
adc
xor
fsin
aam
rcr
adc
in
sbb
icebp
cld
das
cmp
addr16
cld
cmp
add
ret
dec
sbb
cmp
add
fild
mov
in
aad
in
add
push
(bad)
(bad)
add
xchg
ficom
fs
jecxz
test
lods
sub
fs
xor
sbb
mov
mov
sub
jb
jp
inc
jns
pop
popa
fdivr
sub
jmp
dec
and
mov
push
popa
sub
leave
loope
out
sbb
js
jae
call
mov
and
mov
outs
imul
mov
(bad)
loopne
rcl
xor
push
push
xlat
not
lods
stos
pop
addr16
ret
fld
jge
mov
stos
retf
pop
jmp
mov
sbb
xchg
fs
and
jne
xlat
fild
es
test
mov
les
jo
xor
out
pop
call
bound
cmp
fldenv
aas
stc
stc
repz
push
pop
mov
stos
mov
in
or
mov
cmps
push
dec
fsubr
sub
cmp
mov
and
fs
data16
dec
inc
sub
jg
push
int3
pop
xchg
lds
cdq
daa
das
adc
adc
int
(bad)
cmp
or
sub
std
jo
inc
and
mov
inc
ret
enter
and
cwde
mov
ins
cmc
and
inc
inc
mov
leave
pushw
sub
jmp
(bad)
dec
outs
cmps
sar
jbe
arpl
pop
pop
adc
shl
mov
add
or
ret
ret
pop
push
(bad)
pop
movs
les
xlat
sbb
mov
pop
movs
ficom
push
inc
mov
mov
fbld
jmp
jns
xor
push
add
stc
xchg
pop
jo
shl
test
inc
pop
push
sub
fbstp
loope
pop
outs
sahf
adc
jae
sub
pop
aad
pushf
fcmovnb
mov
xchg
sbb
jge
mov
sbb
nop
das
or
cld
lea
neg
test
in
push
movsx
out
mov
mov
imul
retf
adc
push
push
call
data16
lods
inc
jno
fidivr
jmp
hlt
repz
stos
mov
xor
pop
jecxz
push
ja
inc
and
jp
cld
jle
sub
push
movs
std
imul
movs
mov
jl
cli
or
or
cmp
push
out
or
popf
fs
add
out
pop
pop
push
xchg
stos
jle
ds
outs
fimul
sbb
popa
inc
mov
aaa
pop
(bad)
mov
loopne
not
pop
lea
push
xchg
push
stos
mov
cwde
mov
lds
or
xor
or
sbb
and
sbb
enter
lahf
sahf
cmp
push
call
mov
enter
imul
retf
and
xor
nop
fwait
dec
pop
xchg
sub
jmp
sub
out
dec
out
or
adc
xchg
xchg
and
sub
and
call
daa
mov
lds
mov
je
push
adc
inc
imul
gs
inc
inc
(bad)
cwde
bnd
mov
(bad)
adc
dec
jmp
popa
adc
shl
pop
mov
dec
gs
push
inc
mov
(bad)
sub
sbb
pop
test
out
out
xchg
inc
cmps
lock
aaa
inc
pop
add
cmc
out
hlt
dec
loopne
fld
movs
push
pop
movs
adc
push
and
(bad)
adc
test
sbb
aam
cmp
movs
call
sbb
sbb
cwde
and
fdiv
imul
jno
xchg
push
or
jmp
cmp
push
inc
cmps
cmps
add
ins
cmp
add
dec
cld
mov
outs
sahf
loopne
xor
in
stos
sbb
push
lock
adc
inc
push
mov
mov
adc
call
dec
cmps
mov
mov
stos
sbb
adc
daa
push
out
aad
mov
in
fisub
out
sti
enter
pop
jmp
aaa
ins
xchg
sub
mov
xchg
lock
sub
add
cld
add
mov
popa
bound
in
int
rcr
lahf
ja
mov
adc
mov
cmp
push
push
pop
sub
test
dec
int
sar
adc
ret
sub
jmp
xor
jbe
dec
or
stc
dec
nop
adc
cdq
std
mov
add
mov
push
das
inc
mov
mov
mov
sub
push
jecxz
inc
shl
sub
and
sti
shr
mov
jnp
stos
sahf
inc
lahf
pop
in
repz
add
xor
inc
sahf
cli
mov
xor
aad
ret
pop
or
ins
aam
mov
scas
xor
xchg
scas
mov
bound
mov
mov
pop
call
xor
or
sbb
sub
rol
cdq
aad
lahf
xor
xlat
into
mov
xchg
dec
dec
and
pop
adc
push
sub
ficomp
js
(bad)
cmp
mov
inc
or
jp
aas
adc
sar
ror
pop
xchg
ret
retf
gs
das
add
xor
mov
dec
(bad)
cmp
(bad)
xor
dec
pop
stos
mov
je
aas
sub
push
mov
stc
mov
sbb
int
ss
jne
push
xor
mov
outs
xchg
pushf
sub
mov
inc
or
dec
fadd
pop
inc
sbb
mov
sti
rcl
xchg
shr
leave
test
jo
sub
adc
add
or
test
xor
and
mov
adc
adc
(bad)
jmp
add
ss
int3
nop
cmps
cmp
or
jg
jmp
addr16
mov
addr16
cmp
push
(bad)
icebp
mov
add
(bad)
(bad)
aas
into
test
in
test
adc
fs
push
lods
call
adc
ret
push
fsub
test
sahf
outs
outs
stos
shl
sub
fidivr
xor
push
and
vpmacsdqh
cmp
mov
or
sbb
icebp
aaa
stos
cmc
fld
jg
jp
dec
ja
mov
aas
jg
stos
and
popf
into
cmp
fbstp
mov
addr16
shl
xchg
pop
into
cmc
mov
ds
xor
gs
fiadd
popf
and
add
jbe
sbb
add
jbe
xchg
xor
movs
(bad)
push
cmp
push
mov
mov
aad
call
sti
or
push
jecxz
sub
sub
(bad)
loop
pop
loop
in
iret
ret
lock
mov
sub
sti
fcmovne
mov
outs
pop
fs
xor
(bad)
mov
push
loop
mov
cli
mov
outs
(bad)
mov
rcl
dec
push
add
jecxz
adc
mov
inc
aam
mov
scas
cwde
std
shr
pop
ins
xchg
mov
scas
hlt
outs
repnz
jnp
xor
fild
mov
shl
cld
lea
ret
mov
iret
fcom
sub
inc
jmp
and
mov
es
scas
gs
xchg
push
dec
inc
pop
xchg
or
ds
in
mov
aad
lock
aad
cmp
cs
mul
sub
pop
cmp
and
mov
mov
cwde
inc
cmp
mov
dec
or
cmp
inc
(bad)
or
and
rcl
jl
pushw
xor
inc
cmp
addr16
aas
popf
sahf
jo
mov
xchg
shl
lods
inc
ja
dec
adc
or
add
enter
aas
mov
and
sub
call
xor
test
movs
xchg
outs
je
sbb
call
xor
inc
rcl
loop
xchg
inc
mov
movs
dec
jbe
popa
push
retf
pop
cmc
sbb
mov
daa
xchg
sar
das
mov
inc
pop
inc
rcl
dec
mov
in
xchg
clc
cdq
add
inc
cs
xchg
das
sbb
fcomp
pop
(bad)
inc
lahf
ss
test
cdq
mov
mov
fistp
clc
mov
aas
mov
pop
retf
dec
pushf
(bad)
jp
mov
mov
push
and
cmp
pop
adc
call
xor
dec
dec
sbb
push
push
loope
rcr
(bad)
outs
push
and
xchg
xor
mov
je
xor
enter
inc
js
fld
xchg
(bad)
dec
push
imul
and
push
jge
mov
jmp
cwde
(bad)
retf
into
adc
add
movs
dec
fld
cmp
test
cwde
cmovb
enter
push
inc
or
mov
push
and
cmps
inc
arpl
inc
into
xchg
sub
adc
inc
xor
out
popf
movs
xor
pop
ins
fidivr
jb
push
dec
test
mov
adc
jle
cli
mov
mov
sbb
out
outs
fst
test
inc
pop
ficom
sbb
pop
mov
xchg
mov
mov
pushf
mov
and
xor
push
test
cmovne
fild
xchg
mov
xor
and
bound
xor
sbb
iret
sbb
push
sbb
sar
pop
push
std
jge
test
xchg
adc
outs
xchg
cmp
push
and
sbb
in
inc
std
mov
push
mul
xchg
add
rcl
mov
outs
adc
push
sbb
imul
push
add
aad
jmp
cmps
push
inc
addr16
xchg
sar
sbb
shl
jbe
adc
fdiv
outs
xchg
or
push
ds
inc
pop
test
and
int
cld
fdiv
mov
ret
or
outs
inc
mov
aas
dec
add
shl
in
xor
out
pop
std
push
(bad)
daa
clc
cmps
pop
add
jle
sub
add
sbb
in
cmps
adc
dec
jns
ret
jmp
mov
fnstcw
jge
lahf
rol
mov
jle
adc
dec
fidiv
cmp
cmc
movs
call
xchg
xor
lods
loopne
ds
push
jns
dec
hlt
add
sbb
mov
(bad)
ds
adc
dec
xchg
push
lahf
or
pop
call
fwait
sub
dec
shl
fsubr
inc
cs
pop
call
push
sub
pushf
enter
pusha
or
scas
jmp
push
les
mov
out
neg
ret
mov
add
dec
popf
jg
inc
lahf
push
add
xchg
fwait
loope
sti
jbe
pop
cmps
out
test
pop
shl
pop
pushf
push
js
or
pop
arpl
retf
sub
dec
xor
push
inc
and
and
sub
xor
nop
lahf
cmp
xor
mov
out
test
add
shl
inc
pop
pop
xor
icebp
cmc
scas
jecxz
push
call
ret
in
jmp
into
test
add
inc
lods
mov
push
jecxz
les
lea
clc
push
adc
sbb
cld
cmp
and
fcomp
xchg
or
cli
xor
push
inc
test
mov
xchg
es
fwait
out
lahf
repnz
outs
xchg
neg
lahf
pusha
fild
push
dec
ins
retf
dec
popa
cmp
fst
mov
out
xchg
pushf
jne
arpl
mov
loope
das
shr
xchg
outs
jge
(bad)
pop
mov
inc
nop
enter
fisub
and
pop
jp
not
iret
pop
mov
clc
jno
xchg
outs
jo
pusha
in
pushf
pusha
pop
data16
stc
adc
xchg
loop
inc
test
mov
sub
cmp
stos
and
mov
xor
sar
inc
sar
and
xchg
shr
loope
and
xchg
cmp
sbb
sahf
arpl
js
fisttp
outs
test
sti
daa
pop
and
mov
or
gs
retf
mov
or
and
push
sub
gs
fs
loope
in
mov
(bad)
and
push
shr
les
adc
(bad)
pop
mov
bound
pop
mov
push
jl
jl
cmp
aas
sub
lds
in
push
cmp
call
cmp
sbb
idiv
pop
daa
sbb
out
pushf
dec
or
not
and
xor
sub
nop
shr
adc
mov
repnz
and
shr
and
lock
data16
pop
jle
mov
sbb
mov
in
gs
add
jl
push
or
imul
lea
ss
cmp
adc
adc
ins
mov
sub
mov
imul
imul
aad
aas
fsubr
xchg
mov
fdivp
out
enterw
inc
sub
es
stos
adc
inc
add
fcom
dec
nop
sub
mov
popa
loope
enter
shl
icebp
mov
not
mov
test
cld
pop
adc
ins
jg
aas
mov
cmp
and
dec
dec
test
jge
push
cmc
scas
or
sub
ins
mov
push
jns
sbb
xor
out
(bad)
xor
aas
pop
xchg
jl
and
out
js
std
mov
ds
repnz
add
lods
ficom
imul
pusha
std
mov
out
cmp
sbb
mov
push
or
aaa
scas
push
cdq
sbb
ins
jp
retf
cli
mov
mov
inc
loope
in
outs
cmp
cmp
jg
scas
jo
mov
bound
jno
jnp
retf
push
daa
inc
sub
add
retf
loop
xor
bound
(bad)
push
sahf
outs
ror
rcr
test
inc
push
fiadd
adc
mov
mov
or
mov
(bad)
lock
sbb
ja
aad
loope
add
jge
jae
(bad)
mov
rcr
into
xor
imul
and
sbb
cld
add
dec
adc
cdq
xchg
mov
(bad)
lahf
daa
push
imul
std
neg
dec
mov
das
xor
push
mov
pop
and
push
cmp
imul
not
popa
lds
mov
jb
popf
jo
out
fcom
fistp
nop
pop
popf
dec
mov
loop
outs
mov
cmp
sbb
in
scas
ret
std
jl
pop
out
pop
cmp
jo
out
jecxz
pushf
adc
mov
popf
fistp
mov
inc
sub
jecxz
xchg
leave
pop
jecxz
jge
out
out
(bad)
push
xchg
in
pushf
loope
sub
add
call
hlt
inc
or
mov
ins
pop
mov
cmp
push
test
xor
pop
mov
pop
jns
stos
ja
cs
push
fistp
or
imul
cwde
pop
sbb
add
in
repnz
jecxz
inc
mov
bound
mov
cmps
cdq
mov
stos
idiv
cmp
int
iret
js
mul
out
sbb
mov
cmp
xchg
icebp
pop
test
pop
in
push
test
cmp
hlt
cli
ss
xchg
mov
loope
mov
out
inc
aaa
stos
std
dec
cmp
rcl
std
das
mov
xchg
inc
cld
sbb
and
inc
sahf
lahf
pop
lock
xchg
cmc
das
enter
pop
cmp
inc
or
js
push
in
and
sub
(bad)
xor
rcl
and
stos
stos
cld
aad
push
pop
ds
fidiv
push
cwde
sbb
cwde
jns
shl
jbe
xlat
mov
sbb
cmp
sbb
(bad)
adc
jnp
pushf
dec
fdivrp
mov
enter
cmp
in
sub
mov
(bad)
jle
jbe
dec
jbe
cmp
es
scas
sbb
push
push
pminsw
imul
daa
and
test
sub
retf
sbb
(bad)
push
loope
pop
cwde
retf
jl
je
push
(bad)
ror
jae
mov
jecxz
adc
jecxz
add
mov
cmc
dec
sbb
add
mov
pop
push
jp
nop
or
nop
into
xchg
xchg
and
xchg
dec
pop
xchg
pop
or
or
sbb
cmp
out
les
sbb
rol
cmps
mov
xchg
sub
or
fbstp
mov
mov
or
(bad)
adc
push
mul
push
and
scas
enter
and
sbb
add
inc
inc
xchg
push
mov
cld
mov
xchg
and
jbe
inc
mov
xchg
loope
retf
mov
(bad)
or
cmp
add
jecxz
mov
movs
and
jno
xchg
sbb
jne
aam
lds
xor
(bad)
mov
enter
outs
cmc
xchg
inc
out
cmp
push
loop
cmp
xor
imul
imul
adc
jne
out
es
jae
ds
adc
cmp
imul
fidivr
cmp
inc
popf
test
dec
adc
outs
fnstsw
dec
mov
cmps
leave
and
or
fld
adc
push
stos
xchg
shr
ins
push
pop
mov
mov
out
outs
inc
fcomip
outs
sub
popa
mov
retf
in
jnp
int3
jl
jne
xchg
push
adc
sub
scas
inc
cmp
jbe
cld
lods
std
add
adc
push
stos
pop
adc
cmps
test
pop
imul
mov
dec
mov
sbb
push
cmp
and
inc
or
jmp
(bad)
xor
add
test
mov
jle
cmps
mov
xchg
enter
xchg
outs
jle
fcom
fs
or
inc
push
jbe
repnz
xchg
push
ret
push
es
cs
push
jb
nop
into
loopne
gs
xchg
nop
stc
aam
inc
dec
jae
fimul
adc
sahf
sub
pop
fnsave
or
pop
cmp
cmc
cmc
cwde
cld
rcr
(bad)
imul
cs
jmp
sbb
dec
call
jmp
xlat
shl
fst
(bad)
aas
mov
cli
call
sub
xchg
or
cmp
pop
ror
test
pop
adc
loope
repnz
pusha
or
in
outs
sbb
out
jecxz
cmp
xchg
push
mov
mov
sbb
ja
scas
pop
fstp
pushf
retf
add
test
fst
xchg
cmp
rcl
xrelease
stc
repz
inc
inc
out
sar
lahf
xchg
mov
lods
mov
stos
inc
add
push
outs
add
stos
mov
pop
and
pop
jae
enter
iret
sub
mov
in
bound
ret
not
xchg
mov
sbb
jae
or
xor
and
bound
xor
in
add
ret
(bad)
mov
(bad)
(bad)
mov
push
ja
push
bound
rep
or
mov
fisttp
icebp
add
mov
ss
mov
dec
pop
pop
mov
inc
jecxz
fmul
adc
mov
cmp
gs
icebp
adc
mov
aaa
jmp
and
cmp
stos
loop
popa
pop
int3
add
xchg
stos
push
cmc
pushf
popf
pushf
push
daa
mov
dec
in
dec
sub
push
test
mov
sbb
push
test
das
xchg
fimul
xor
jnp
sub
ds
cmp
shr
enter
inc
dec
jne
sti
mov
in
push
sub
inc
das
mov
frstor
sub
push
popa
ret
jnp
mov
push
repz
sbb
leave
(bad)
sub
pop
add
aaa
mov
pop
xchg
push
in
push
rol
call
jl
rcr
pop
in
mov
xchg
add
add
pop
call
adc
dec
ins
out
sbb
rol
pop
imul
dec
rep
xor
xor
ret
dec
pop
ss
bnd
call
scas
jbe
and
cmp
xchg
fsub
push
mov
nop
cmp
daa
fidivr
sub
ret
add
leave
in
or
outs
jp
retf
stos
jg
loop
ins
lds
loop
rol
cmc
cmp
mov
je
imul
test
mov
jbe
ret
hlt
cdq
jmp
(bad)
ds
test
jp
sub
add
stos
adc
test
hlt
(bad)
loopne
xor
mov
mov
fbstp
sub
sub
imul
mov
xchg
rcr
test
(bad)
mov
or
xchg
nop
rcl
mov
sub
in
push
ins
sub
clc
iret
or
and
jl
test
xchg
lea
pusha
adc
movs
icebp
out
call
jmp
inc
loop
pushf
mov
fidiv
jle
pushf
add
inc
mov
test
mov
(bad)
pop
outs
repnz
pop
out
outs
cmc
stos
sti
cmp
sbb
add
mov
(bad)
sbb
add
mov
cld
jg
add
dec
loope
leave
movs
outs
fistp
pop
fidivr
(bad)
push
mov
fisttp
sub
xchg
shr
sbb
fnsave
inc
xor
in
imul
add
mov
inc
bound
mov
jecxz
pusha
std
sbb
scas
cdq
(bad)
sub
push
push
xchg
sbb
inc
push
std
jmp
imul
cmp
lods
sub
mov
mov
ds
jle
pop
pop
cmc
add
hlt
int3
sub
int
add
sub
and
loope
jno
int
hlt
push
xchg
mov
test
das
call
ds
push
or
pop
xor
and
xor
jne
sar
pushf
add
shl
pop
js
lods
cli
pop
pop
das
lods
mov
sbb
lahf
loope
mov
imul
jne
stos
mov
jmp
lods
cmp
fstp
mov
cmp
(bad)
fldcw
cwde
or
das
jns
outs
pop
sbb
mov
push
pop
sbb
and
and
fidiv
pop
dec
imul
imul
in
pop
popf
or
pop
movs
in
lahf
push
sbb
xchg
cmp
mov
mov
mov
pop
cwde
in
push
adc
lea
out
pusha
cmc
fcom
int
xor
test
mov
mov
cmp
dec
and
mov
out
jns
mov
add
or
in
add
movs
mov
ficomp
sub
cmp
call
nop
or
lahf
jl
jl
and
add
inc
outs
inc
loope
mov
xor
iret
mov
cs
jmp
aad
std
push
pop
xchg
mov
inc
mov
stos
push
dec
push
out
movs
pop
(bad)
fwait
cdq
adc
es
xchg
push
cmp
popf
push
fwait
jl
mov
shl
push
cmp
gs
(bad)
cli
fwait
jno
sbb
and
sbb
cmp
fisttp
out
in
inc
out
jns
pop
das
jns
aad
xchg
mov
xchg
mov
or
out
jbe
add
lock
popf
adc
or
outs
push
dec
(bad)
cs
mov
xor
cmp
std
cmp
add
jle
popa
cmp
fwait
pusha
jae
add
scas
enter
lods
or
sti
inc
and
cmps
(bad)
test
sbb
fcom
mov
jne
xor
xchg
mov
loope
stos
jle
cdq
sbb
icebp
and
mov
lahf
test
call
es
retf
inc
xchg
test
stos
js
movs
ds
call
add
mov
bound
or
pusha
mov
and
ins
dec
push
(bad)
lods
fcomp
push
jo
mov
sbb
jle
into
out
jmp
mov
pop
jmp
retf
dec
cdq
xor
pop
fadd
(bad)
cmp
scas
ds
sbb
sahf
(bad)
add
pop
movs
xchg
lods
test
jmp
fistp
loope
test
push
aad
sub
adc
push
jge
pop
fdiv
pop
sub
fisttp
sub
mov
test
in
mov
and
mov
sbb
cli
mov
and
test
lahf
mov
dec
push
mov
enter
call
iret
cmp
sbb
retf
test
adc
push
rcr
in
stos
ins
add
push
cmc
aam
adc
pusha
inc
pop
xor
mov
xchg
mov
add
out
push
ja
sbb
push
(bad)
(bad)
xchg
call
in
adc
dec
rcl
out
or
sub
fadd
call
pop
inc
xor
xchg
imul
jmp
inc
add
sbb
stos
xor
inc
xchg
enter
jg
mov
mov
data16
adc
and
clc
cli
mov
shl
cmp
(bad)
div
mov
in
cmp
bt
push
adc
mov
and
and
mov
mov
out
and
dec
jmp
sar
pop
pop
leave
sbb
ins
or
test
xchg
and
jl
inc
pushf
jae
cmp
(bad)
in
lahf
mov
sbb
hlt
jne
(bad)
jmp
ja
call
push
inc
imul
and
jp
mov
sar
dec
mov
xchg
jo
xor
test
idiv
adc
pop
cmp
jl
sub
xor
mov
mov
cmp
ja
inc
lea
and
mov
imul
rcl
fistp
(bad)
add
in
jl
xor
and
jl
leave
test
xor
stos
aad
jge
cmp
adc
adc
mov
dec
loop
shl
pop
adc
xchg
aad
lock
inc
fwait
pop
lock
jp
test
gs
adc
mov
sahf
imul
test
sbb
out
js
add
popf
add
xchg
inc
test
mov
xchg
call
int3
mov
jmp
xor
sub
jmp
inc
jno
cmc
xor
push
aaa
adc
movs
mov
jb
jp
in
jbe
xchg
pop
xchg
sar
scas
pop
lahf
stos
in
(bad)
cmp
nop
inc
and
sub
jno
inc
xchg
div
jl
sti
mov
adc
jmp
clc
xchg
inc
inc
(bad)
xchg
pushf
and
and
je
enter
or
popa
inc
(bad)
dec
imul
scas
adc
mov
js
mov
sub
arpl
push
adc
daa
stos
mul
ds
sbb
xchg
sub
pop
in
mov
shr
nop
sub
jmp
addr16
pop
xor
pop
sbb
add
test
(bad)
int
cmp
out
add
pop
mov
jns
sub
push
lds
sbb
xor
loopne
mov
or
enter
shr
or
fs
test
fisub
inc
xor
popa
imul
mov
xor
fdivr
xchg
add
jmp
les
mov
xor
gs
dec
mov
mov
push
pop
lods
or
(bad)
lods
call
xchg
dec
pop
loop
push
dec
mov
jl
repz
mov
nop
push
adc
test
mov
and
aas
xchg
rol
cmp
xor
and
inc
test
mov
sahf
shl
int
add
mov
pop
sub
in
test
int
cmp
inc
add
pop
pop
xchg
out
jns
xlat
movs
mov
jno
mov
(bad)
push
push
cmp
push
push
test
out
enter
(bad)
into
loopne
push
rol
hlt
xchg
mov
(bad)
stos
lods
fisub
xchg
call
adc
hlt
add
sbb
std
in
stos
fcomp
ds
aad
fnstenv
cmp
jmp
std
sbb
adc
mov
xchg
popf
jnp
jge
sbb
adc
push
jno
cmps
sbb
retf
loop
shr
cmp
xchg
jmp
stos
jbe
or
cmps
test
xchg
push
jo
sbb
push
test
retf
inc
jbe
(bad)
sub
loop
fisttp
jmp
mov
out
mov
inc
fs
sbb
jle
jnp
test
sub
adc
dec
xchg
lods
dec
pop
lock
jae
push
fisubr
push
push
mov
and
sub
dec
jge
arpl
sub
popf
lea
push
(bad)
sbb
inc
adc
popa
and
adc
dec
xchg
push
cld
and
pop
xchg
mov
mov
push
fidiv
xor
xchg
adc
add
dec
ins
or
das
sub
sub
sub
mov
imul
das
inc
mov
movs
jmp
inc
call
mov
jnp
lds
pop
pop
ret
fwait
mov
adc
xor
cld
mov
pop
movs
xor
add
in
ror
pop
xor
sbb
jl
and
xor
cmp
cmp
pop
adc
lock
jg
fcomi
aaa
out
shl
fcmovnu
pop
sub
test
dec
fwait
in
cmp
sbb
je
add
movs
jle
xchg
push
pusha
cmp
pop
aaa
sub
mov
dec
fwait
mov
xchg
xchg
aaa
retf
addr16
ja
adc
pushf
les
mul
mov
mov
pop
cld
mov
(bad)
daa
mov
push
adc
stc
idiv
push
cmp
aam
lock
out
neg
inc
adc
dec
in
sbb
xlat
mov
stc
loope
mov
aas
dec
xchg
mov
and
mov
push
push
pushf
jbe
(bad)
lods
shl
ret
pop
mov
add
sbb
dec
outs
add
lods
xor
clc
or
mov
sub
imul
jg
push
(bad)
fistp
je
dec
cli
imul
stos
aaa
adc
mov
int
or
sub
mov
retf
popf
stos
mov
in
add
jmp
outs
test
sbb
xchg
cld
jl
and
add
sar
sbb
mov
mov
(bad)
imul
xchg
push
and
cmp
cdq
xchg
outs
jg
sub
xor
mov
popf
xchg
cmp
mov
push
cmp
daa
cmps
call
jne
mov
loopne
test
dec
mov
lds
sbb
sbb
into
cmp
ret
cdq
imul
push
jp
ffreep
sti
xchg
mov
add
imul
inc
mov
jb
mov
hlt
(bad)
rcr
inc
dec
sti
xor
sbb
(bad)
and
mov
repnz
sub
cld
sub
push
pushf
movups
inc
ficom
into
xchg
fst
dec
jge
in
call
in
test
adc
(bad)
sar
push
dec
repz
jbe
mov
pop
mov
push
xchg
sub
lea
out
push
xchg
repnz
and
in
in
pop
push
out
xchg
pushf
int
xor
ins
dec
push
or
mov
mov
test
rol
(bad)
sbb
fisttp
retf
cmp
sbb
dec
les
aam
push
out
xor
mov
inc
test
out
push
inc
xchg
add
push
cld
xor
test
jns
mov
cmp
ins
icebp
addr16
dec
xchg
adc
sub
test
bound
xchg
(bad)
stc
add
imul
ins
fmul
data16
and
inc
and
mov
(bad)
mov
(bad)
call
je
sub
in
mov
cwde
fild
adc
outs
jge
call
ins
add
jns
push
fnstsw
dec
xor
outs
inc
mov
(bad)
or
icebp
out
js
imul
lods
bound
cmp
sbb
loope
mov
or
loop
stos
mov
(bad)
int3
jmp
jle
leave
fs
sahf
addr16
rol
dec
in
mov
imul
mov
call
sbb
in
and
pop
test
mov
test
mov
xchg
ja
xor
pop
jle
clc
mov
mov
shr
mov
inc
leave
xchg
jae
xor
jns
adc
fsubr
data16
xchg
pop
or
shl
xor
mov
loop
loope
pop
imul
pop
stos
movs
push
mov
out
into
push
(bad)
int3
dec
lea
call
in
jp
jae
or
jae
add
push
pop
les
int3
fwait
xor
cli
lea
push
cdq
jmp
push
or
vunpcklps
fwait
pop
fld
data16
or
call
mov
cs
push
xlat
push
(bad)
mov
sbb
adc
js
push
or
xchg
int3
clc
mov
jbe
not
imul
adc
fild
cmp
iret
sbb
inc
xchg
add
sbb
xchg
cmc
dec
mov
je
mov
jmp
xchg
(bad)
xchg
loopne
mov
rcr
and
mov
outs
neg
adc
inc
ret
(bad)
js
mov
xchg
pop
pop
in
and
xchg
pop
xor
cmp
outs
scas
or
mov
add
(bad)
test
test
adc
cli
fldcw
jge
sub
(bad)
inc
mov
jge
dec
jbe
dec
jno
lock
push
out
push
and
push
push
shl
les
gs
inc
call
adc
aaa
cmc
test
dec
or
mov
mov
lock
js
out
idiv
in
mov
test
sub
popa
inc
inc
adc
pop
outs
outs
pop
popf
adc
or
iret
movs
aas
jp
fwait
popa
adc
add
jnp
inc
mov
nop
daa
sub
jns
or
lds
popa
ror
add
xor
mov
aas
out
add
mov
inc
push
das
in
adc
lods
mov
gs
inc
aaa
mov
js
imul
jecxz
jp
dec
dec
rcr
mov
cmp
aas
int3
js
std
test
movs
repz
imul
movs
xchg
cmp
iret
mov
add
push
mov
fwait
mov
dec
xor
cmp
jecxz
test
cmp
aas
ror
pop
adc
dec
cld
xchg
jno
mov
(bad)
jbe
in
or
dec
pop
mov
(bad)
mov
or
sub
outs
neg
aaa
ret
pop
mov
fs
sti
int
mov
lods
rep
mov
mov
rcr
mov
aad
and
in
and
jp
ret
stos
sbb
arpl
stc
mov
jmp
mov
loope
mov
das
push
pop
movs
out
inc
xchg
and
push
addr16
sbb
int3
js
xchg
jmp
imul
pop
out
in
pop
adc
xor
jbe
push
fsubr
xor
rcl
or
outs
jb
pop
mov
repz
mov
sbb
cmp
push
data16
aam
(bad)
xchg
js
push
dec
outs
loope
out
icebp
out
popa
out
inc
je
(bad)
xor
inc
sub
dec
sub
fucomi
lods
push
pop
fdiv
scas
xor
push
icebp
cmc
jle
cmp
sti
leave
aas
into
pop
xor
call
jb
jmp
loopne
js
push
dec
jae
xchg
movs
addr16
or
loope
sar
fcomip
aam
sbb
xchg
xchg
adc
pop
and
(bad)
test
mov
popa
punpckhbw
stos
xchg
int3
push
aad
repnz
das
xchg
popf
enter
in
bound
test
rcl
gs
sbb
inc
cmp
or
jo
out
js
dec
mov
and
popa
js
dec
xor
(bad)
(bad)
dec
sub
or
adc
inc
cmps
lock
scas
pop
(bad)
sub
ins
in
mov
xor
jmp
cmp
inc
xchg
ds
sar
xor
nop
mov
lods
xor
test
push
add
push
inc
std
ds
dec
adc
jo
xor
ss
jge
mov
idiv
and
test
and
aaa
icebp
retf
stc
dec
mov
imul
jno
mov
ret
movs
and
out
shl
mov
iret
out
cmp
push
sbb
add
test
sub
(bad)
(bad)
fimul
fwait
and
push
and
add
int
cmp
xor
lock
pop
dec
ret
rol
pop
pop
sub
icebp
mov
jae
into
cmp
imul
push
jmp
push
popf
enter
add
mov
push
enter
push
imul
dec
lods
sbb
cmps
pop
dec
jmp
iret
inc
xor
adc
jecxz
out
jns
mov
cmc
loop
inc
sahf
imul
mul
sub
xchg
jmp
sub
retf
ss
shr
mov
out
mov
push
cmps
add
cdq
retf
and
das
mov
outs
aas
mov
std
lock
xchg
shl
jnp
test
and
mov
jmp
add
sar
dec
lock
popf
inc
and
shl
mov
out
mov
inc
je
cmp
int
out
popf
bnd
aad
mov
ja
pushf
or
cmp
and
adc
inc
and
push
fadd
sbb
xor
dec
jmp
shr
retf
(bad)
jge
mov
jl
cld
iret
fbld
lods
shl
sbb
sub
push
cmp
add
cld
ror
in
jp
mov
sbb
xor
loopne
inc
daa
sub
call
(bad)
mov
gs
cmps
jl
popa
adc
fsubr
into
stos
iret
mov
push
fldcw
nop
(bad)
pop
add
out
ds
inc
jo
dec
xchg
push
movs
icebp
cmp
std
test
hlt
shr
xor
cmp
sub
xor
push
lock
add
div
push
push
mov
popf
fwait
ins
xlat
dec
not
mov
jge
add
arpl
mov
pop
repnz
mov
idiv
ret
out
aas
int3
or
xchg
mov
out
adc
fnsave
aad
(bad)
jb
xor
in
mov
repz
lock
and
sbb
clc
repnz
pop
add
dec
int
enter
mov
and
popf
shl
inc
pop
add
jge
ret
add
pop
retf
adc
cmps
lea
jle
popa
mov
aam
inc
test
aaa
in
mov
mov
and
add
inc
(bad)
fsubp
mov
mov
ret
sbb
jmp
jge
mul
push
xchg
jb
or
stos
ficomp
add
inc
inc
aad
imul
pop
cld
addr16
arpl
mov
stos
cwde
sub
gs
out
or
xchg
repnz
dec
xor
adc
jl
add
inc
fwait
dec
bound
test
rcr
mov
xor
mov
sub
push
imul
ret
cmc
xlat
adc
jecxz
mov
mov
push
cwde
inc
cdq
inc
pushf
and
fs
jne
jns
mov
fst
push
cmp
out
sub
lods
mov
sahf
adc
and
pop
cmp
popf
in
pusha
cmp
jl
cmp
push
xor
sub
xor
jle
in
(bad)
das
mov
scas
rcr
mov
mov
popf
jno
xor
dec
mov
inc
imul
sbb
leave
cld
push
arpl
xor
push
inc
xchg
fmul
into
daa
lea
pop
cdq
nop
add
retf
and
and
loop
sub
inc
sar
mov
xor
outs
retf
cmps
mov
xchg
inc
mov
neg
sbb
push
ret
and
(bad)
(bad)
into
mov
push
in
push
mov
cmp
mov
xor
ja
push
loop
mov
xchg
iret
jo
fadd
scas
(bad)
dec
jg
repz
fs
pop
or
pop
lds
xchg
test
outs
pop
ret
mov
call
add
movs
dec
rol
sbb
(bad)
adc
inc
and
movs
mov
sahf
dec
ss
xchg
adc
jbe
cmp
movs
dec
mov
ret
shld
js
jno
fmul
lea
lahf
xchg
arpl
fs
dec
in
cdq
call
pop
mov
jmp
push
enter
daa
ret
sub
(bad)
push
lock
enter
sbb
xchg
inc
cmc
mov
xchg
sbb
dec
mov
xor
fcomp
cs
push
popa
adc
or
sti
aaa
mov
(bad)
mov
data16
lods
ret
int3
pop
jmp
cdq
test
ja
rcl
xchg
dec
and
in
sbb
sbb
test
and
add
cmp
std
call
or
xchg
ret
inc
mov
inc
fldcw
data16
hlt
movs
shl
sub
jno
adc
aas
call
pop
xor
inc
(bad)
mov
leave
pop
push
popa
xchg
sub
nop
jns
adc
inc
or
and
bound
sub
or
jno
inc
mov
xchg
int3
mov
dec
cwde
loopne
mov
jne
fsubr
aam
lock
mov
ret
fs
cmp
out
inc
mov
dec
mov
cmp
retf
(bad)
nop
fnstsw
jg
xor
dec
xchg
and
out
sub
jl
jne
nop
call
cld
xchg
mov
xor
xor
jp
pop
pop
add
test
loop
xchg
es
xor
aaa
mov
popa
and
mov
jno
mov
push
mul
jp
loopne
xchg
sub
cmps
inc
shl
pop
repz
jo
jne
fild
adc
inc
scas
retf
call
mov
jae
dec
jo
sbb
inc
stos
gs
cs
les
or
lods
clc
cmp
jg
test
xchg
popa
loopne
inc
je
and
loopne
push
cli
repz
cmc
mov
pop
sbb
pop
cmp
add
xchg
add
jmp
in
sub
movs
mov
and
mov
ja
faddp
dec
into
mov
xor
arpl
and
jge
add
pop
add
jle
rcl
fdiv
jecxz
jmp
cmps
xchg
jl
push
mov
lea
loop
data16
call
mov
adc
xchg
and
(bad)
stos
pop
ficom
retf
adc
sub
js
bswap
bound
inc
mov
fidiv
sbb
les
in
ficom
sub
movs
xchg
mov
(bad)
repz
dec
into
neg
fucom
test
shl
xor
mov
cmp
xor
lahf
popa
sub
in
cli
or
sub
ret
cmp
shr
inc
(bad)
mov
xchg
xchg
dec
jge
(bad)
mov
enter
xchg
lods
stc
cdq
dec
xchg
(bad)
mov
pop
and
dec
dec
and
cli
ds
rcl
jmp
xchg
push
outs
(bad)
cmp
xor
ins
mov
or
mov
dec
(bad)
mov
fwait
adc
std
pop
addr16
call
ja
add
lods
jge
fmul
mov
ins
mov
out
cmp
dec
pop
fs
sti
dec
call
push
inc
daa
(bad)
pop
cmp
aas
push
mov
xchg
dec
stos
xchg
sar
lea
outs
inc
sub
ret
pop
push
lea
lds
aad
retf
hlt
int
adc
dec
adc
in
jae
mov
mov
popf
nop
fadd
rcr
sbb
ja
sbb
addr16
mov
sbb
movs
hlt
cmps
xchg
jno
or
(bad)
adc
xchg
fdiv
or
(bad)
cmps
adc
aad
iret
mov
repz
push
aaa
es
push
rcl
cmp
mov
loopne
repnz
push
pop
push
ror
loopne
sbb
out
jle
dec
cmp
rcr
xor
xor
cdq
imul
adc
push
inc
ss
and
(bad)
fcomp
inc
aad
push
inc
inc
dec
cmps
les
aam
shl
aas
dec
test
in
and
mov
pop
fnstsw
stc
scas
(bad)
loop
cmp
pop
or
cld
xchg
mov
fcom
out
push
in
mov
retf
and
or
xor
inc
int
mov
jmp
xchg
xor
ret
and
push
fisub
xchg
mov
out
lods
xlat
mov
jecxz
bound
int
dec
retf
call
das
aad
xor
call
inc
(bad)
(bad)
xchg
loop
in
cmc
(bad)
popf
rol
inc
mov
jmp
fcmovnb
cmps
push
jecxz
mov
add
ss
push
xor
dec
aas
test
ja
mov
daa
test
jmp
push
leave
sub
cmp
data16
ud0
aad
imul
inc
je
mov
or
dec
out
sar
js
enter
fbstp
inc
pusha
arpl
loope
xchg
sub
and
retf
xchg
aas
sub
fcom
(bad)
dec
adc
ret
mov
and
imul
idiv
sbb
iret
sub
mov
test
adc
fwait
dec
mov
ret
fwait
jo
add
xor
out
mov
push
outs
sahf
mov
or
dec
jp
stc
pushf
fcomp
adc
in
outs
ror
adc
pop
popf
xchg
and
stos
scas
fistp
jmp
(bad)
pushf
mov
mov
iret
mov
(bad)
cmp
xchg
mov
(bad)
lahf
iret
aad
adc
push
aam
add
fwait
mov
jp
idiv
xchg
rol
mov
shl
adc
lods
sub
fistp
jns
aas
dec
push
or
push
je
inc
push
movs
hlt
add
mov
int3
cmp
jmp
mov
(bad)
icebp
xor
dec
movs
sar
inc
retf
mov
scas
xor
or
popa
push
repnz
pop
hlt
arpl
popa
mov
stos
pop
push
movs
daa
inc
sbb
paddsb
pop
push
clc
movs
retf
lock
sbb
sti
int3
js
push
sbb
push
push
(bad)
cmp
adc
test
cli
mov
add
and
mov
fbld
ins
mov
repnz
enter
sbb
je
imul
out
sub
push
pop
aad
fdiv
or
sahf
imul
and
mov
in
sub
jg
jmp
mov
inc
int
aam
stos
lea
sbb
jle
cld
and
jl
sub
lods
pop
daa
mov
movs
mov
mov
fistp
test
fwait
dec
mov
jl
jo
stc
inc
jno
mov
jecxz
jae
mov
sub
mov
adc
ret
adc
jnp
cs
in
bound
fs
mov
sub
test
xchg
dec
adc
ret
sub
jmp
cmp
movs
xor
mov
cmc
xor
cmp
cwde
(bad)
ja
pop
stos
jmp
(bad)
test
xor
out
mov
push
xor
lock
shr
ds
pop
xor
punpckldq
mov
inc
call
push
enter
mov
or
dec
inc
inc
ror
pop
pop
add
mov
and
add
mov
gs
mov
mov
leave
js
mov
es
hlt
pop
cld
mov
mov
stos
ret
push
sub
mov
mov
ds
xchg
mov
mov
add
pushf
es
push
sahf
xor
mov
adc
jecxz
jg
mov
or
movs
call
hlt
xor
stc
sbb
aam
mov
in
inc
loopne
cdq
cmp
push
sub
xor
or
mov
pushf
mov
nop
outs
sbb
addr16
ret
nop
pushf
sbb
jns
js
movs
ficom
mov
mov
dec
pop
test
pop
fwait
xor
pop
sub
ret
sbb
xchg
loop
rol
mov
cmps
mov
xor
push
cwde
repnz
mov
stc
inc
in
fadd
lods
fs
jmp
fwait
xchg
aas
add
sahf
aam
mov
scas
push
mov
adc
inc
test
cmp
xor
jno
repnz
cmp
or
mov
neg
mov
fild
out
and
popf
rcl
lahf
push
lahf
sahf
push
sub
fcom
push
repnz
mov
cdq
(bad)
sbb
fucom
rcl
mov
push
add
sub
or
fisttp
stc
pop
repnz
lods
push
push
sahf
push
mov
push
add
sar
add
or
js
test
adc
shl
pusha
xlat
ds
gs
mov
loop
xor
jg
adc
cmp
fist
cmps
and
out
xchg
loopne
jne
cdq
stos
push
lock
data16
xlat
lahf
pop
dec
mov
int3
dec
and
out
add
xor
push
and
jns
dec
add
ja
mov
mov
pop
cli
jg
and
xchg
ret
adc
adc
inc
inc
jnp
loopne
int
xor
(bad)
mov
push
mov
ja
cmp
mov
ins
jge
push
ds
jb
pop
retf
and
repz
cmp
loopne
clc
imul
in
lea
loope
jecxz
or
add
jbe
fadd
mov
push
pusha
pop
sar
cld
imul
push
sahf
into
iret
inc
fs
mov
adc
add
xchg
loop
sub
movs
mov
push
nop
sbb
ss
cmp
mov
test
shl
sub
push
cwde
dec
lods
pop
stos
je
mov
pusha
xchg
pop
or
fsubr
js
les
mov
imul
pop
cmp
inc
jl
push
shl
cwde
jne
popf
aaa
jnp
pop
sbb
mov
dec
mov
dec
lods
jl
and
mov
rol
int
fnsave
ror
div
dec
ret
push
dec
daa
or
loope
jl
das
les
jmp
push
adc
inc
daa
dec
xor
cmp
into
retf
test
(bad)
aaa
test
mov
cmp
pop
stos
or
fs
mov
push
adc
push
xchg
dec
jnp
jle
imul
mov
mov
jns
xchg
in
pop
xchg
(bad)
xor
pop
icebp
xchg
inc
loop
(bad)
fcmovb
mov
dec
inc
or
push
fwait
iret
int
inc
enter
in
repz
int3
ds
push
xchg
push
sbb
in
rcl
inc
out
dec
mov
xchg
cmp
or
loopne
retf
xchg
push
into
or
out
out
int3
fld
mov
jg
retf
sbb
or
cmp
xor
sbb
in
out
div
inc
xchg
xchg
dec
mov
les
mov
sub
mov
mov
fistp
js
int
jns
jl
ja
sbb
sbb
inc
xchg
repz
mov
xchg
scas
mov
cmp
test
xchg
inc
les
push
in
xchg
sub
jge
jg
daa
call
jnp
inc
les
cwde
loopne
sub
test
aam
mov
mov
test
inc
xchg
pop
sbb
fwait
mov
cmp
push
das
mov
mov
sti
fisttp
or
cmc
dec
xchg
jl
scas
mov
sbb
sbb
test
sbb
(bad)
stos
rcr
mov
stos
sub
or
mov
std
mov
loope
add
out
in
ret
xchg
push
xchg
(bad)
aas
inc
stos
adc
lods
test
scas
movs
cld
push
shl
stc
out
outs
out
inc
iret
mov
cmp
cmps
mov
pusha
push
popf
mov
mov
out
xchg
dec
mov
mov
shr
sbb
dec
lock
cdq
add
cmp
inc
gs
cmp
call
or
repz
lods
push
in
add
sti
add
push
jp
sahf
mov
lods
inc
retf
mov
in
or
icebp
cmp
mov
bound
sbb
cmp
pop
pop
sar
mov
(bad)
test
iret
dec
ror
test
out
mov
mov
push
pop
ret
lods
xchg
inc
xchg
dec
stc
hlt
jmp
loop
out
aam
ja
xlat
scas
xchg
jmp
rol
dec
or
dec
jb
sub
enter
pop
scas
sub
jge
jl
(bad)
call
or
sub
and
mov
mov
cmc
dec
adc
adc
pop
aam
hlt
mov
mov
nop
xchg
ret
cmp
sub
dec
or
mov
outs
ret
movs
stc
(bad)
pop
ret
add
sti
push
lds
hlt
pop
fisttp
movs
les
aam
addr16
int3
cmc
or
mov
or
dec
ins
hlt
mov
bound
ja
loop
add
aad
cs
mov
push
test
rcr
aam
push
xor
in
retf
outs
test
test
sbb
loop
xor
bnd
mov
sbb
cmps
imul
ret
out
ret
inc
xchg
iret
outs
stos
dec
mov
sbb
xor
movs
pusha
mov
xchg
fild
mov
jle
ror
and
or
das
inc
mov
in
add
jno
fbld
mov
adc
mov
lock
mov
mov
addr16
iret
cmp
add
loop
lea
mov
mov
jl
sub
mov
cmps
aad
cmp
repz
loop
aaa
mov
and
fidivr
xor
pop
out
dec
adc
push
mov
loop
call
and
jmp
mov
and
push
(bad)
lahf
push
cdq
xchg
push
out
jecxz
(bad)
xchg
retf
lods
shr
std
pop
ret
jae
inc
mov
mov
sub
pop
pusha
pop
les
rcl
mov
xchg
xchg
fwait
dec
(bad)
std
push
jo
adc
mov
repz
mov
sub
xchg
not
push
mov
scas
out
(bad)
jg
std
jmp
xlat
or
xor
dec
fsub
popf
dec
out
add
ins
or
xlat
sar
push
pusha
ins
lock
sbb
imul
sti
imul
xchg
push
xchg
xchg
sub
adc
mov
jbe
adc
repnz
pop
dec
xor
adc
jno
jge
clc
enter
jmp
mov
stos
xchg
stos
xchg
fidivr
sbb
hlt
mov
lahf
mov
xor
pop
cmp
popf
int
cmp
in
dec
in
iret
sub
push
jo
cld
xchg
ficomp
mov
jbe
adc
cmp
xor
sub
xchg
mov
jle
retf
aaa
add
jecxz
call
mov
cs
ss
cmp
sbb
les
inc
and
mov
jg
int
jb
daa
mov
mov
xchg
pusha
call
sbb
pushf
loop
mov
(bad)
retf
lods
(bad)
jp
int3
gs
cmp
lods
jmp
int3
and
pop
cmp
dec
sub
movs
mov
mov
inc
movs
sub
cmp
jne
xchg
cmps
sbb
test
sub
fwait
stos
jl
and
gs
adc
and
out
cmp
leave
(bad)
outs
jmp
dec
xor
ja
sbb
les
loop
fstp
xchg
mov
sahf
mov
cmp
xchg
add
loope
mov
dec
movs
call
sub
adc
sar
cli
dec
stos
scas
loop
popa
pop
xor
sar
imul
iret
lea
cmp
sti
add
adc
pop
mov
mov
dec
fwait
jmp
sbb
push
and
test
mov
push
sbb
rcr
sbb
xchg
out
cvttps2pi
push
dec
das
fdiv
popa
cmp
sahf
popf
daa
mov
in
dec
outs
cld
sub
dec
(bad)
aad
mov
mov
and
outs
sar
push
cli
pop
ret
test
fucom
adc
jmp
repz
jle
out
dec
mov
push
push
and
retf
and
mov
cli
cli
and
dec
imul
enter
mov
push
aas
div
popa
(bad)
xchg
xor
push
stos
push
retf
retf
popa
and
sub
mov
retf
nop
sub
jb
loope
xchg
mov
fs
mov
sahf
fdivr
gs
or
add
pop
and
xchg
pop
inc
mov
push
mov
adc
popa
cmp
mov
(bad)
fmul
stos
mov
es
xor
and
mov
and
ins
mov
cs
in
cs
ret
xchg
pop
sbb
retf
imul
jmp
fwait
cli
push
gs
stc
(bad)
loope
fdiv
push
cs
adc
popf
pushf
xchg
mov
sbb
loopne
fsub
loopne
add
scas
mov
(bad)
rcl
xor
rcl
xchg
and
int3
pusha
pop
scas
out
out
or
jbe
(bad)
pushf
lock
loopne
lods
jecxz
cmp
xchg
cmp
(bad)
push
jmp
mov
pop
adc
pop
jl
pushf
mov
fcmovb
sbb
sbb
xchg
fisttp
and
pop
push
mov
mov
push
dec
pop
aam
and
adc
sbb
fldenv
sbb
stos
aas
push
test
ror
test
xchg
sbb
repnz
jl
xlat
jp
in
mov
loop
shr
push
shl
or
stos
in
jae
jne
jne
mov
rol
cmp
jbe
dec
jbe
mov
xchg
cs
mov
fs
fistp
dec
and
jno
cld
ins
pop
sahf
cmp
in
push
ja
xchg
dec
shl
cmp
add
arpl
cmps
and
mov
cwde
fld
xchg
jno
push
enter
(bad)
out
mov
inc
pop
pushf
cs
ja
sar
mov
out
ja
xor
mov
xor
mov
mov
adc
je
mov
pop
pop
dec
pop
int3
inc
loopne
cmp
mov
sbb
ds
sbb
mov
adc
mov
push
sub
pusha
push
ret
in
outs
cmps
xchg
out
jge
inc
into
test
dec
(bad)
jmp
test
inc
adc
loop
xchg
imul
idiv
mov
fcomp
xchg
ss
cdq
xchg
in
movs
adc
hlt
mov
jg
mov
je
retf
repz
test
cmp
ins
aaa
xchg
in
adc
xacquire
jge
cs
test
pop
out
fisubr
hlt
dec
jecxz
xchg
dec
jp
push
std
sar
and
mov
cmp
xchg
mov
loope
push
mov
stos
cmp
and
(bad)
mov
stos
out
test
cld
scas
xchg
mov
int3
sar
mov
pop
pop
aas
xchg
sub
int3
mov
sbb
jecxz
jle
mov
add
mov
sbb
and
cli
mov
dec
xchg
push
sti
xchg
mov
inc
add
add
jle
adc
iret
dec
cli
mov
test
mov
stos
jae
call
(bad)
mov
mov
dec
push
das
jp
cs
outs
mov
cwde
mov
fistp
adc
pop
fild
rol
mov
outs
push
pop
pusha
clc
fld
mov
mov
addr16
sbb
mov
stos
mov
int
sbb
jecxz
and
popa
mov
nop
xchg
repz
cld
in
sbb
addr16
push
jbe
fiadd
shl
int3
inc
sbb
pushf
bound
cmp
pop
retf
dec
inc
add
cmc
mov
push
xchg
add
test
mov
xor
mul
dec
ror
dec
inc
lods
push
shr
xchg
adc
inc
push
fsub
enter
hlt
hlt
mov
jp
jle
(bad)
push
inc
lock
sub
xor
(bad)
cli
loop
mov
(bad)
jl
sahf
inc
(bad)
loop
dec
mov
fwait
or
ds
xchg
test
mov
adc
fisttp
sub
fstp
pop
mov
push
rol
mov
adc
imul
and
in
inc
fimul
add
repz
sub
push
outs
(bad)
push
les
cld
mov
cmp
call
pop
dec
int3
sahf
jae
fld
fnsave
xor
in
push
shl
pop
out
xchg
in
push
mov
ficomp
cmc
clc
fwait
or
jne
add
push
cs
push
mov
jg
aam
scas
ja
xor
sub
adc
xchg
sbb
mov
or
orps
jle
pop
adc
pop
jnp
lock
mov
test
fdiv
mov
popf
jno
retf
cli
mov
dec
movs
and
xchg
mov
xor
mov
addr16
(bad)
in
sbb
pop
mov
jmp
mov
shl
add
xchg
fld
fcom
sub
paddq
adc
sti
push
jmp
jge
(bad)
xor
dec
xor
dec
push
push
xor
int
icebp
sahf
add
repnz
fisub
fs
lea
inc
and
jnp
iret
pop
pop
hlt
push
dec
imul
or
hlt
xchg
mov
fmul
pop
push
and
push
add
ja
movs
loop
adc
sub
ss
fs
call
int
jecxz
pop
js
fild
and
sahf
sub
scas
das
pop
or
jmp
int3
sti
sub
push
mov
cwde
sbb
add
or
pusha
rcl
xchg
ror
in
mov
dec
sub
test
ror
or
push
jge
call
jle
mov
loop
cld
fadd
and
xchg
dec
inc
out
out
push
out
mov
push
aam
xchg
xchg
test
mov
mov
mov
sub
aad
gs
daa
dec
and
(bad)
loopne
jmp
push
xor
fcmovnb
push
pop
push
jmp
nop
mov
call
lods
aas
mov
xor
xchg
(bad)
aaa
fwait
inc
or
fdivr
pop
mov
dec
rcl
xchg
sti
lahf
loope
in
addr16
call
(bad)
jp
xchg
icebp
test
adc
jo
cld
jge
sub
inc
aam
xchg
and
push
retf
cmp
in
inc
(bad)
adc
inc
lock
ror
pop
adc
(bad)
stc
pusha
dec
adc
je
loop
add
fs
rol
jle
les
mov
test
repz
pop
jp
dec
data16
jle
scas
bound
call
or
adc
in
jno
jb
ret
adc
dec
movs
lock
pop
and
mov
adc
and
loopne
xchg
pop
fimul
jmp
mov
push
mov
sbb
fild
loopne
sbb
or
lahf
pop
xchg
inc
(bad)
gs
jp
into
xchg
sbb
push
aaa
aas
fsub
adc
jp
cmps
or
imul
scas
pusha
and
rcr
cmp
dec
mov
je
pop
repz
fild
mov
jae
cdq
pop
ror
push
hlt
ins
add
pop
cmp
sub
js
ins
repnz
out
pop
je
inc
int3
and
aam
mov
jecxz
into
test
jne
xor
retf
xor
cmp
aas
dec
mov
sub
pusha
(bad)
mov
inc
ror
sar
or
out
das
sbb
call
push
mov
mov
ja
ds
and
hlt
sar
repnz
fwait
retf
xchg
inc
(bad)
int3
pop
xchg
imul
add
mov
les
bound
stos
mov
xchg
stos
repnz
and
ret
test
not
jmp
mov
lahf
sub
jg
sbb
pop
(bad)
xchg
cmps
jae
clc
int3
inc
dec
rol
int3
dec
fwait
xor
in
mov
clc
cmp
cmps
push
cwde
loopne
sub
ins
(bad)
retf
bound
movs
out
sbb
and
ficom
clc
scas
test
les
outs
and
jmp
cmp
jecxz
cmps
and
push
cmp
mov
add
inc
sbb
xchg
inc
adc
push
push
arpl
aas
(bad)
adc
ins
pop
call
or
imul
(bad)
xchg
add
ret
inc
shl
sti
cli
ins
dec
jl
mov
popa
lods
mov
xchg
aad
imul
ror
push
jne
pop
mov
dec
(bad)
movs
pop
pusha
adc
lds
ins
in
sbb
mov
add
sub
jmp
ins
cli
leave
push
sbb
sar
sahf
repnz
fild
(bad)
mov
and
xor
fst
fstp
test
cmp
dec
jae
scas
sub
dec
sbb
mov
jl
retf
sub
aas
cld
jbe
in
or
or
cmc
xchg
pop
add
mov
xor
xchg
mov
pop
xor
sub
arpl
arpl
jge
repz
scas
xchg
sub
movs
jae
xchg
shl
out
and
adc
lock
adc
(bad)
cmp
push
repz
cmc
cmp
and
adc
or
adc
lock
lock
test
and
mov
loopne
outs
leave
jg
mov
lods
lea
inc
fsubr
jmp
loopne
movs
cmps
popf
(bad)
(bad)
arpl
xor
jne
clc
sbb
(bad)
pusha
push
hlt
add
mov
gs
jp
repz
and
sub
or
xchg
inc
loope
loope
mov
inc
push
lea
sbb
pusha
push
rcl
push
sbb
shr
out
xchg
and
ins
and
push
jno
sbb
adc
push
repz
or
sti
mov
daa
push
iret
mov
push
cmp
das
in
imul
fidiv
(bad)
aam
jl
inc
jecxz
js
or
add
xor
lock
(bad)
outs
in
xor
ret
popf
nop
cmp
cmp
cmp
sub
mov
xchg
les
loopne
cmps
xchg
sub
js
rcr
ins
jbe
loopne
jbe
push
test
dec
repnz
fst
add
mov
loope
adc
cs
cmp
cmp
and
in
adc
pushf
inc
pop
mul
mov
mov
test
xchg
jnp
fs
fsubp
dec
inc
fsubr
movs
mov
lea
sbb
jmp
xor
retf
es
dec
scas
or
daa
pop
das
jp
arpl
ret
and
repz
test
mov
jl
iret
popa
in
in
sbb
sub
adc
je
jmp
push
stc
je
adc
jo
jl
add
repnz
adc
(bad)
enter
xchg
(bad)
out
into
(bad)
jmp
(bad)
pop
xchg
aam
add
push
and
sub
mov
add
addr16
inc
mov
add
mov
mov
scas
enter
ret
pop
mov
data16
sub
neg
(bad)
sbb
imul
sbb
jmp
sbb
jbe
shr
retf
out
ficom
push
aad
or
aam
push
(bad)
jecxz
ja
dec
jmp
dec
inc
adc
fstp
xchg
push
lea
shl
xchg
in
hlt
sbb
test
stos
jnp
fcomp
mov
(bad)
and
push
adc
scas
sub
jg
outs
fdivr
xor
jo
loope
rcl
mov
jb
mov
cmps
xlat
mov
lods
movq
or
mov
xchg
lods
hlt
pusha
fcomp
mov
(bad)
or
push
daa
cmps
pop
adc
xor
dec
mov
sub
aam
sbb
mov
in
js
cmp
fs
ins
pusha
mov
ins
sub
ins
setp
mov
call
sub
jg
rep
mov
and
cs
pop
fcomp
xchg
data16
push
adc
out
jmp
je
xor
lahf
mov
lods
cwde
cld
es
xor
fs
cli
out
inc
lea
pop
push
and
aaa
loopne
pop
arpl
sbb
cli
sti
dec
pop
lahf
repnz
int3
jno
xor
sub
stos
fadd
mov
sub
pop
and
push
and
mov
imul
mov
repz
push
jo
mov
sbb
je
pop
jo
jnp
add
sbb
jecxz
xchg
inc
out
aaa
pop
sub
jl
shl
fsub
dec
ficom
cmp
adc
cmp
call
rol
xchg
or
sbb
std
(bad)
xchg
mov
arpl
ror
and
repnz
dec
pop
jnp
inc
and
fwait
mov
out
pop
push
cmp
mov
jae
test
mov
cmp
ins
fcmovne
xchg
out
cli
in
sbb
retf
imul
push
lahf
retf
test
loopne
dec
aam
aad
and
mov
jl
ficom
xor
icebp
and
les
es
jp
ins
jb
outs
pop
jb
add
pop
ss
inc
inc
pop
dec
out
int3
push
jo
retf
int
jl
pop
mov
inc
push
call
in
dec
mov
ins
jmp
test
pop
pop
xchg
sbb
dec
xchg
jns
cmp
inc
xor
mov
jmp
iret
sub
jne
(bad)
in
push
dec
mov
int3
mov
and
dec
je
jecxz
and
aas
pop
mov
mov
out
das
shr
push
lds
push
(bad)
push
dec
push
inc
mov
mov
xchg
sub
shr
les
mov
dec
sub
jbe
sub
xchg
mov
icebp
nop
ins
push
or
or
fist
push
and
in
jae
scas
scas
pmuludq
xor
cmp
int3
xchg
mov
ja
in
mov
and
lods
ficomp
int3
add
pushf
iret
fidiv
jmp
push
hlt
mov
push
repz
sub
push
retf
pop
out
scas
jbe
ret
inc
jp
mov
sub
hlt
dec
sahf
xor
(bad)
test
fwait
(bad)
dec
push
add
aam
aaa
aam
mov
cmp
jmp
cdq
mov
pop
push
jno
pop
fmul
adc
dec
sub
retf
jle
xor
pop
push
adc
fs
xor
repz
ss
(bad)
dec
pop
ds
or
pop
and
popf
sti
dec
retf
aas
jmp
aam
das
push
movs
xchg
or
imul
mov
adc
(bad)
xchg
in
aaa
mov
pop
loope
sahf
iret
stos
cmp
cli
mov
push
push
sbb
mov
xor
adc
fnsave
jo
inc
push
inc
push
add
stos
pop
pop
jp
retf
cdq
jns
mov
aas
fsub
fist
jge
adc
cmp
mov
das
pop
call
or
(bad)
mov
ud0
fist
sub
test
test
into
push
fst
jp
mov
push
adc
jg
mov
ss
stc
xchg
lods
out
add
push
mov
xchg
ret
pop
xchg
jl
sub
sbb
test
ds
cmp
pop
pusha
mov
int3
mov
sbb
xor
pop
sub
pushw
ins
rcl
pop
fcom
and
call
arpl
movs
call
adc
jge
mov
(bad)
pop
ja
cld
dec
push
leave
repnz
jno
sbb
rcl
and
mov
scas
arpl
jle
hlt
cmps
sub
lahf
push
stc
jb
cmps
xchg
xchg
scas
push
inc
pusha
idiv
push
mov
jp
jo
xchg
mov
push
ds
pop
cmp
and
mov
lea
(bad)
out
rcr
scas
jg
dec
inc
adc
push
test
(bad)
out
icebp
arpl
jns
push
iret
or
xchg
jp
ret
loopne
mov
xchg
(bad)
push
add
ins
es
push
hlt
popa
(bad)
and
(bad)
inc
fst
out
ss
cdq
dec
jbe
xchg
retf
lahf
xchg
add
push
cmp
neg
xor
jns
mov
(bad)
cwde
dec
jb
or
xchg
and
pop
dec
push
xor
sub
cli
xchg
push
jmp
or
fistp
popf
sub
inc
push
aaa
iret
ficom
or
pushf
xor
les
cli
add
mov
in
test
mov
jno
adc
jo
and
adc
mov
movs
or
int
xchg
mov
xchg
inc
mov
xchg
movs
and
clc
jle
and
aaa
pop
push
mov
xchg
push
mov
adc
dec
sub
stc
cmp
push
iret
test
gs
call
add
inc
fwait
in
add
jbe
retf
ds
jb
leave
je
xor
out
cdq
movs
lods
cmc
xchg
test
and
out
inc
lods
sbb
adc
adc
lahf
iret
pop
mov
dec
mov
mov
nop
fwait
cmc
lds
ret
mov
adc
popf
or
fs
jae
std
out
pop
in
adc
int3
xlat
lods
(bad)
ja
sub
icebp
aaa
ds
mov
clc
xchg
clc
mov
kandnw
mov
fiadd
mov
and
xor
sbb
fwait
nop
xor
movs
mov
out
mov
into
fidiv
nop
inc
dec
(bad)
mul
aas
sbb
mov
loopne
xchg
pop
inc
push
dec
add
shl
add
cs
inc
in
adc
test
push
add
(bad)
push
mov
ret
dec
xchg
mov
mov
sbb
xchg
pop
test
js
mov
add
mov
sub
xchg
xchg
jmp
icebp
push
add
cmp
add
hlt
sahf
pop
cmp
in
inc
fisub
lds
in
scas
dec
push
popf
sbb
cmp
repnz
ret
movs
aam
xchg
push
(bad)
lahf
icebp
pop
pop
es
jecxz
and
xchg
loopne
ret
sahf
ret
xor
push
dec
mov
mov
pop
imul
mov
pop
and
call
scas
es
out
and
inc
dec
mov
dec
sub
int
or
rcl
lds
add
ins
hlt
dec
and
add
bound
cmp
jae
mov
(bad)
mov
mov
clc
jecxz
and
xchg
div
mov
clc
push
add
ss
inc
adc
add
in
xor
int
xlat
icebp
adc
xchg
and
test
adc
push
push
test
les
test
pop
mov
(bad)
es
mov
or
jecxz
repnz
pop
rol
out
test
cmc
inc
rol
cmp
into
cmp
bound
pop
scas
dec
cmp
lock
lahf
iret
stos
jae
push
int3
mov
xchg
mov
movs
aam
push
fimul
stos
xchg
dec
adc
aam
sbb
into
or
mov
int
push
push
or
add
dec
sti
shl
into
retf
rcr
add
dec
and
and
faddp
fxch
mov
push
in
xor
mov
cs
lods
sbb
jo
movs
frstor
loopne
adc
inc
xchg
jo
jae
fsubr
popa
(bad)
imul
push
shr
cld
sub
adc
inc
adc
seto
repz
daa
xchg
outs
out
add
push
aad
ror
mov
aas
mov
dec
pushf
gs
aam
rol
jnp
test
and
pop
pop
mov
rcr
add
inc
imul
test
xor
enter
jp
mov
xchg
xchg
nop
push
sbb
mov
adc
es
sub
pop
xchg
dec
shl
pop
xor
and
(bad)
cwde
jecxz
add
adc
arpl
shr
xor
jg
sub
add
mov
cwde
enter
inc
or
mov
loopne
add
jl
call
bound
cmp
fcomp
lahf
add
inc
test
adc
xor
inc
scas
xchg
mov
and
repnz
loope
icebp
mov
pop
hlt
arpl
popf
and
repz
loope
in
jge
jnp
jo
addr16
arpl
repnz
cmps
mov
mov
dec
sahf
lock
pop
cmp
sbb
dec
pop
jle
ds
lea
fs
cdq
aad
cmp
pop
pushf
pop
dec
into
imul
push
(bad)
jnp
jg
in
clc
shl
imul
fwait
lock
mov
xlat
mov
lock
push
test
hlt
rcr
mov
inc
pop
xor
sbb
enter
xchg
or
mov
hlt
retf
sbb
push
adc
cmp
mov
cs
jecxz
mov
cld
sbb
bnd
inc
inc
sub
leave
outs
aaa
mov
mov
cmps
mov
inc
xor
inc
inc
movs
aas
in
enter
pop
mov
int
es
sbb
sub
fidiv
mov
into
loop
fidiv
and
icebp
sar
les
and
cmp
push
mov
pop
cmps
xor
lock
imul
fcomip
mov
retf
sbb
add
jle
loopne
in
scas
mov
jns
lea
cmp
jge
loope
mov
aas
aad
ret
jne
jno
cmp
mov
cli
pop
cdq
imul
jg
jg
sti
xchg
cmp
mov
in
out
retf
call
sbb
jp
add
push
nop
shr
div
ret
mov
mov
inc
jns
cmp
cld
jecxz
cli
push
cmp
hlt
jmp
fild
rcl
push
xchg
cli
jge
push
pop
rcr
mov
xchg
xchg
pop
loop
dec
inc
cs
movs
adc
cmp
and
ds
sub
adc
imul
out
mov
and
jno
sub
inc
inc
jp
scas
repz
lock
stos
outs
int
adc
and
jno
add
stos
movs
cmps
inc
sti
(bad)
fdivr
xor
sbb
sub
out
sub
cmp
mov
ins
jae
inc
sbb
es
inc
cmp
mov
inc
or
mov
mov
adc
sub
or
out
nop
fwait
scas
mov
ja
mov
pushf
outs
sbb
sub
ret
pushf
out
pusha
int
mov
mov
jg
push
scas
clc
xchg
pop
sbb
jl
enter
push
sub
inc
mov
lods
push
inc
rol
push
inc
mov
lds
push
add
adc
fstp
(bad)
sbb
loopne
inc
in
jl
jo
inc
pop
gs
xchg
movs
ja
stos
inc
arpl
shr
pop
pop
or
adc
in
xor
push
(bad)
add
pop
lahf
push
ds
(bad)
in
cmp
or
mov
leave
mov
sub
pop
sahf
adc
cli
fsubr
div
ins
mov
lock
sahf
or
mov
cmps
and
pop
ret
xor
sti
mov
pop
ret
jnp
dec
aas
nop
push
xchg
inc
es
retf
clc
mov
mov
mov
mov
in
fld
sar
fsubr
xor
clc
mov
jg
push
sar
dec
xor
or
call
pop
call
add
adc
dec
(bad)
les
test
mov
int
gs
mov
mul
bound
and
mov
push
xor
push
xor
adc
bound
adc
push
cld
enter
pop
shr
out
cli
sub
fdiv
mov
jno
stos
in
out
pop
mov
ja
rol
aad
cdq
adc
test
rcr
or
popf
icebp
pop
xchg
out
push
xchg
cmp
in
xchg
arpl
push
dec
arpl
jge
stos
and
push
in
shl
xchg
test
lods
leave
lock
hlt
mov
add
lods
cmp
out
imul
jg
les
push
pop
and
or
out
and
sub
mov
test
sub
xchg
xchg
sti
(bad)
mov
loopne
add
in
(bad)
mov
xor
int3
jne
sbb
mov
enter
les
leave
mov
in
ins
adc
mov
out
inc
lods
xchg
or
call
inc
xor
aad
ins
jp
pop
bound
jmp
scas
xor
outs
jle
inc
jge
jp
aad
ret
inc
push
sbb
xchg
sub
imul
xchg
sbb
push
mov
je
idiv
daa
cmp
push
(bad)
fucomip
adc
rcl
cmc
cmps
not
scas
dec
cdq
out
mov
inc
lock
lds
pusha
mov
lea
mov
cmps
lea
push
movs
cmp
test
test
(bad)
jl
iret
test
enter
or
in
mov
dec
pop
test
sbb
inc
cdq
xor
(bad)
xchg
sbb
jl
xor
xchg
loope
ror
fstp
je
or
xchg
add
add
add
push
lahf
mov
aaa
test
repnz
xchg
mov
out
fadd
xchg
inc
cmp
cmp
mov
scas
ret
fadd
retf
lds
jg
ret
sub
and
das
xchg
iret
inc
in
into
and
shr
or
xchg
repnz
stos
aad
stc
push
mov
cmp
lods
pop
jmp
inc
retf
aas
pop
es
scas
pop
sub
inc
add
fstp
add
sub
sbb
mov
repnz
or
jb
mov
pop
add
cli
cmc
xchg
sub
mov
dec
popa
aam
ins
lock
(bad)
pusha
enter
cs
ror
lahf
mov
sub
dec
adc
xchg
arpl
leave
mov
inc
dec
test
mov
add
adc
pop
test
cdq
in
mov
bound
outs
adc
mov
test
neg
sahf
push
sti
fild
hlt
outs
pop
lods
stos
sbb
lahf
(bad)
aad
add
inc
fidiv
in
fisubr
jmp
call
sub
ss
adc
loop
jmp
push
fadd
or
xor
outs
and
dec
movs
sti
xlat
cli
shl
mov
(bad)
mov
adc
call
push
xchg
mov
std
test
cmp
sub
out
bound
cdq
scas
addr16
mov
sub
scas
jmp
mov
pushf
scas
jbe
mov
dec
push
fsubrp
mov
xchg
mov
mov
div
div
dec
pop
adc
cmps
aaa
sahf
rcl
mov
dec
add
idiv
cmp
pop
ss
cmp
mov
mov
scas
mov
jle
mov
sti
sbb
lock
dec
xchg
ror
scas
mov
lea
arpl
xchg
ins
cmp
jo
xchg
pop
cs
test
mov
clc
sub
xchg
jo
cmp
or
mov
jnp
cmp
int3
retf
mov
inc
(bad)
mov
repnz
dec
mov
lahf
pop
push
(bad)
scas
(bad)
jmp
and
fdiv
xchg
in
inc
mov
inc
ins
xchg
retf
in
xor
in
out
cwde
xchg
xchg
sub
sub
out
inc
ret
test
aad
jmp
retf
cli
pop
jmp
rol
repnz
retf
fucomi
pop
cmps
inc
jmp
scas
leave
movs
mov
adc
jle
jb
addr16
sbb
or
cmp
int3
fimul
test
mov
inc
rcr
jbe
mov
jmp
repnz
push
sub
pop
mov
mov
cmc
int
pop
mov
jmp
push
adc
rol
js
inc
mov
retf
in
sti
hlt
clc
jo
outs
js
push
out
mov
daa
pushf
mov
mov
adc
mov
jecxz
aas
ins
in
dec
les
rcl
jne
cmc
cmps
pop
imul
lock
mov
mov
add
xor
fistp
mov
std
add
push
inc
lds
pmullw
(bad)
std
push
mov
lea
rol
xchg
and
mov
sbb
mov
fisubr
stos
iret
sub
into
xchg
popa
ret
ret
cld
jg
movs
pop
pushf
lea
out
(bad)
nop
in
sahf
shl
inc
stos
push
mov
xchg
leave
push
inc
test
je
fistp
stos
fadd
jae
xchg
shl
xchg
mov
(bad)
repz
test
inc
cli
mov
leave
(bad)
(bad)
rcl
lahf
and
mov
sar
(bad)
in
cmp
inc
call
xchg
stos
ss
mov
rcl
mov
test
loop
xchg
or
xchg
in
xchg
bound
imul
shl
push
or
sbb
neg
sbb
or
xchg
push
ret
or
shl
ret
or
out
jle
retf
stc
aam
xlat
daa
ret
arpl
out
or
sar
mov
aaa
mov
pop
imul
loopne
js
repz
push
out
test
jmp
stos
out
dec
dec
aam
ret
aad
mov
ror
sub
les
xor
cmp
xlat
push
cmp
lds
shl
inc
inc
pop
push
xchg
xchg
or
mov
scas
push
iret
cdq
inc
imul
inc
or
sub
jae
ss
mov
cld
out
pushf
int
add
jmp
(bad)
js
ret
nop
xchg
frstor
sub
iret
add
mov
pop
or
jo
xchg
xchg
sbb
inc
sbb
mov
dec
daa
leave
mov
aas
ror
movs
(bad)
inc
fprem1
stos
and
sbb
push
mov
and
jne
push
dec
(bad)
ss
jl
sbb
aaa
ds
xchg
lock
sub
sub
scas
sbb
shr
loop
cmc
jo
adc
arpl
xchg
jmp
xchg
int3
dec
aaa
(bad)
or
popf
mov
call
loop
mov
adc
out
jge
sbb
pusha
scas
and
fstp
push
sbb
xlat
in
add
or
jno
test
bnd
add
fist
cmps
(bad)
sbb
fdivrp
shr
jb
fwait
outs
jmp
cmps
loopne
cmp
fs
mov
add
cs
fst
xor
jns
enter
add
mov
imul
inc
mov
xchg
jnp
cmp
(bad)
cmp
dec
xchg
shl
inc
ret
popa
and
lds
push
or
lahf
lods
(bad)
xchg
lds
push
js
mov
ss
jmp
(bad)
(bad)
inc
movntq
sub
xchg
mov
pop
inc
aas
mov
inc
lods
push
lock
test
jecxz
ds
pop
imul
stos
cdq
jg
arpl
jp
fcom
xchg
rcl
push
mov
cmp
xor
sbb
mov
jo
mov
aaa
ins
xchg
mov
addr16
test
cdq
fstp
cld
mov
sub
xor
out
nop
xor
and
sub
xor
dec
mov
shr
enter
push
repz
xor
sbb
jl
(bad)
adc
fmul
clc
pop
push
das
jg
xor
inc
dec
pop
dec
inc
stos
test
cmp
xor
fcmovne
(bad)
ds
mov
mov
retf
sub
retf
xor
pop
lds
mov
mov
ret
mov
add
(bad)
int
jmp
pop
push
dec
test
jge
push
or
adc
fcomp
mov
sbb
push
push
hlt
xchg
retf
in
jo
push
mov
xor
jle
dec
ds
mov
pop
jae
jae
(bad)
outs
jmp
pop
sub
cmp
stos
and
cmp
loopne
addr16
sub
jp
leave
repnz
inc
cli
adc
xchg
mov
jo
scas
fadd
inc
stc
add
inc
lahf
xor
lds
add
stos
mov
das
jnp
sub
jb
ror
scas
push
xchg
aas
loope
inc
ds
inc
mov
into
mov
sbb
movs
lahf
inc
jbe
jl
mov
test
xor
test
pop
shl
shr
adc
out
mov
inc
jb
lds
int3
inc
mov
cdq
jne
pusha
mov
out
scas
(bad)
sub
(bad)
repnz
mov
adc
pop
test
fiadd
mov
in
aam
sbb
or
sbb
push
cmp
dec
cmc
sub
inc
adc
into
inc
cwde
xchg
cwde
sar
add
mov
mov
xchg
es
cmp
sbb
sti
add
push
and
nop
loopne
imul
jno
outs
les
pop
add
shr
xchg
and
loope
cmps
sub
sbb
xor
test
add
pop
loope
adc
jle
test
add
pop
adc
mov
sub
cld
mov
mov
iret
mov
neg
jmp
cmps
in
xchg
xor
adc
out
ins
repnz
test
xchg
pop
pop
xchg
lods
xchg
and
add
aaa
scas
sti
les
pop
ficomp
dec
call
cdq
outs
out
sbb
add
mov
jnp
out
sbb
fwait
ds
fidivr
lods
lods
fldcw
rcl
xchg
in
jmp
and
xchg
cmp
cmp
jp
push
or
push
movs
jmp
xchg
loope
pop
mov
jp
cld
ins
jne
jmp
es
jns
add
jae
mov
inc
pop
in
test
add
hlt
sub
mov
cdq
mov
or
daa
cmp
jl
outs
out
mov
ret
arpl
dec
and
pop
out
icebp
call
pop
aad
aas
cmps
mov
cmc
dec
inc
sahf
(bad)
sti
std
jge
jle
fwait
jns
cld
pcmpeqd
cmc
cmp
inc
push
mov
movs
lahf
mov
div
(bad)
xchg
pop
lods
loopne
mov
sub
pop
(bad)
mov
mov
sub
xchg
jnp
pop
in
mov
test
stos
dec
jg
sahf
out
mov
xor
dec
mov
mov
ret
scas
add
sbb
retf
shr
pop
out
(bad)
loopne
inc
or
(bad)
bound
push
add
and
dec
std
(bad)
call
cld
inc
inc
xor
daa
lock
dec
cmps
dec
fcmovnb
or
dec
cwde
popf
and
rcr
ins
out
pop
shr
sti
xor
shr
mov
xchg
je
aaa
fist
popf
imul
rcl
jmp
dec
add
lds
icebp
stos
push
enter
jg
not
pop
out
(bad)
mov
call
jo
xor
xor
dec
sbb
mov
in
cmp
loop
lock
xchg
ret
rdpmc
push
push
pop
pop
mov
xlat
push
push
push
sbb
lock
pop
xchg
mov
das
sahf
lea
outs
push
in
call
and
addr16
mov
(bad)
push
sti
lea
pop
cmps
xor
(bad)
sbb
lods
mov
shr
jmp
test
jle
fiadd
in
sbb
jmp
cld
jo
retf
sub
mov
push
(bad)
pop
mov
push
jo
dec
adc
cwde
enter
xor
add
push
addr16
scas
and
xchg
and
dec
cs
mov
dec
ins
out
movs
jl
retf
in
mov
push
les
sub
in
inc
sbb
mov
xor
and
clc
fsub
add
out
call
js
mov
pop
sub
sub
sub
es
xchg
sbb
adc
in
stc
fsubp
mov
call
jbe
js
out
mov
cdq
xchg
inc
adc
js
mov
adc
inc
adc
push
(bad)
dec
movs
pop
xlat
(bad)
out
mov
or
daa
faddp
in
ss
out
fs
scas
adc
jb
lahf
xchg
xor
pop
(bad)
test
fisubr
pusha
enter
xchg
inc
aam
mov
or
mov
out
pop
mov
(bad)
mov
icebp
mov
mov
and
mov
cmps
or
ret
test
out
pop
mov
sbb
inc
mov
outs
jl
cli
mov
pop
test
mov
and
cmp
mov
pop
stos
add
pop
sub
lock
out
outs
lahf
sbb
and
cmp
repnz
(bad)
shl
add
jp
pop
call
mov
add
jle
push
cmps
loop
mov
and
cwde
test
jl
push
mov
mov
arpl
mov
lods
aad
popf
lds
movs
nop
jle
lar
cmps
xor
call
test
pushf
or
mov
mov
jp
es
pushf
or
mov
push
and
cs
xchg
stos
in
(bad)
cmp
xchg
push
cs
push
sbb
aam
mov
jecxz
jmp
das
inc
retf
push
inc
clc
mov
mov
mov
sub
je
cld
outs
jbe
cmc
(bad)
push
pop
cmp
pop
adc
push
mov
push
icebp
ret
or
out
cmp
add
push
mov
push
lock
push
pop
pop
mov
rol
xor
ds
and
adc
ret
fild
push
push
pop
jmp
call
inc
adc
pusha
scas
jns
mov
out
cld
out
pmullw
adc
sub
pushf
cmp
or
gs
mov
push
ret
cmp
add
fs
inc
lock
push
aaa
jecxz
cmp
xchg
mov
jnp
pop
hlt
sbb
pop
adc
sub
pop
xchg
call
and
ins
test
shl
jae
in
aam
lea
in
ins
add
imul
pop
pop
or
push
push
jmp
test
adc
inc
add
lods
ret
dec
shl
aad
je
inc
xor
dec
fwait
mov
repz
push
in
data16
(bad)
fsubp
das
and
js
pushf
jp
ss
push
sahf
imul
or
cmp
mov
push
repnz
in
xlat
call
jmp
jmp
or
sbb
dec
out
sbb
push
scas
mov
lods
sub
sub
sub
xlat
int3
and
pop
fdiv
js
inc
mov
push
lods
mov
adc
(bad)
into
gs
jmp
cld
and
ss
es
jns
loope
in
imul
ss
movs
mov
sub
data16
pop
xchg
popf
loopne
adc
xchg
or
fdivr
adc
ds
add
xchg
adc
jo
fs
dec
lahf
pushf
loopne
(bad)
daa
cmp
xchg
ret
or
mov
pop
push
add
or
inc
call
mov
push
adc
mov
dec
xchg
stos
test
push
int
imul
das
xchg
mov
aaa
fbstp
imul
push
psubb
(bad)
out
push
sbb
sub
into
mov
ret
call
call
fnsetpm(287
(bad)
and
ror
mov
dec
icebp
jns
sbb
or
cli
and
sub
inc
adc
and
popf
mov
inc
popf
xchg
fwait
mov
dec
push
inc
mov
mov
mov
pusha
pop
retf
popa
test
jl
imul
xor
fidiv
pop
arpl
(bad)
sub
and
dec
lea
xor
pop
xor
cmp
mov
mov
adc
xchg
pop
stos
adc
jmp
push
call
inc
mov
ret
pop
out
in
movs
rcr
mov
add
imul
sub
and
inc
mov
push
jl
adc
loopne
in
mov
mov
cld
(bad)
icebp
stos
sbb
sub
hlt
mov
xor
fsubrp
inc
mov
call
call
mov
std
imul
xor
ja
shr
xchg
(bad)
cmp
mov
popa
test
and
ret
movs
mov
das
cmps
push
leave
test
je
push
dec
pop
aam
loop
ret
adc
psubb
leave
inc
int
sahf
jg
jne
nop
aad
call
ja
jbe
sahf
cmps
and
pop
xchg
mov
dec
loopne
in
out
into
and
repz
jmp
xor
popa
repz
adc
call
jmp
lock
mov
mov
push
jae
js
das
popf
mov
daa
neg
mov
mov
mov
arpl
daa
and
je
je
inc
push
lock
mov
fidivr
pushf
jecxz
ret
pop
adc
(bad)
clc
mov
stos
ss
out
out
jne
iret
jmp
(bad)
push
xor
test
je
push
(bad)
ret
push
or
ja
jbe
addr16
sub
dec
mov
push
cmp
cld
push
(bad)
int
mov
les
push
mov
mov
ret
lods
cmp
cmps
stos
push
pop
add
clc
mov
mov
fistp
push
or
ds
ret
push
jbe
mov
push
stc
pop
(bad)
xor
push
push
lods
cs
sbb
js
(bad)
xchg
mov
cmc
or
xor
jmp
pop
sbb
neg
xor
jae
xchg
mov
mul
or
jge
pop
sbb
pop
pop
push
call
ret
mov
dec
loopne
inc
push
clc
add
mov
test
call
xchg
call
das
les
jmp
test
data16
stos
xor
cmp
(bad)
mov
movs
adc
leave
iret
enter
dec
mov
shl
ds
push
iret
push
mov
outs
xor
pop
xchg
pop
into
mov
pop
rcr
ja
loop
sub
data16
ret
arpl
adc
xchg
in
sbb
fisub
mov
mov
push
cld
leave
addr16
and
shl
mov
dec
loopne
dec
mov
lds
cld
push
aas
fisubr
xchg
loop
xchg
mov
ret
ucomiss
in
sbb
mov
jnp
aas
movs
or
jno
adc
(bad)
in
fmul
js
and
cmp
test
cmps
cdq
data16
sar
jmp
pushf
fsub
in
ja
sahf
ins
xor
push
dec
movs
ret
inc
fdiv
jbe
rcr
(bad)
push
cmp
or
mov
push
cmps
loope
xor
or
ins
jb
(bad)
daa
aam
test
inc
xor
mov
ficomp
fwait
nop
adc
loop
lods
mov
mov
dec
inc
out
mov
dec
in
test
mov
mov
xchg
cmp
push
xor
push
es
scas
call
mov
clc
dec
in
dec
stos
cld
jne
dec
gs
or
adc
xchg
out
mov
fist
dec
xchg
jmp
gs
ret
xchg
aaa
sub
dec
sub
and
test
fs
out
daa
cwde
mov
push
add
in
ins
jle
call
adc
cld
push
imul
cmps
jp
jle
or
js
in
and
add
cld
dec
inc
fs
push
jmp
mov
mov
lods
lahf
jle
es
xor
in
rcl
(bad)
imul
movs
fadd
pop
in
ss
(bad)
sub
repnz
and
popf
pop
mov
(bad)
xor
add
pop
lods
fs
cmps
retf
adc
call
lock
pop
sub
lods
fdivr
mov
test
jno
sub
cmps
into
pusha
mov
in
das
cld
or
sub
call
sbb
push
movs
jne
dec
retf
out
or
loopne
fbld
in
xchg
or
mov
xor
mov
aas
add
sub
xchg
leave
pop
push
xchg
(bad)
adc
add
jge
les
jb
ret
and
pusha
sub
inc
mov
add
les
inc
or
pop
repz
repz
sti
retf
mov
dec
hlt
sub
js
jnp
aam
shl
repnz
ins
lock
and
fdivr
jmp
sbb
mov
das
dec
icebp
push
inc
mov
cmc
xchg
sub
cwde
aad
out
repnz
jns
cwde
mov
div
adc
push
add
sub
sti
out
movs
xchg
fiadd
xchg
ja
add
cdq
push
sub
jne
clc
fwait
icebp
das
jecxz
mov
push
scas
aas
xor
add
push
out
aam
movs
std
mov
es
call
mov
mov
jno
fistp
sbb
sub
scas
aad
sbb
aas
test
push
ins
test
inc
je
dec
fcmovnb
scas
fwait
aam
sahf
jo
pop
sub
cmp
aam
xchg
test
fs
fninit
add
jl
pop
pop
inc
movs
fs
das
cmps
nop
sbb
out
push
shr
mov
icebp
(bad)
cmp
sbb
sahf
mov
adc
add
mov
in
cmps
test
out
and
mov
dec
push
jbe
mov
inc
sbb
cld
xor
mov
iret
dec
icebp
cmp
cmp
jbe
dec
add
stos
adc
jb
mov
add
fnsetpm(287
rol
loopne
lock
inc
sub
leave
xchg
jo
aad
mov
push
int3
xchg
jmp
outs
fwait
shl
jge
ins
rol
pop
cdq
push
pop
dec
das
add
fild
pop
mov
mov
push
lods
int3
mov
inc
hlt
jl
add
inc
mov
loope
jbe
jp
faddp
mov
push
sub
iret
repnz
cmp
jl
or
adc
es
push
or
rol
push
ins
enter
xchg
sahf
in
inc
xchg
jmp
mov
mov
adc
pop
mov
sub
leave
sti
push
imul
push
xchg
shl
cmp
bound
xchg
imul
dec
xor
xchg
push
push
fcomp
cmc
jb
addr16
inc
sub
ret
sub
jge
popf
fst
inc
push
mov
push
fcmovu
das
lods
dec
mov
out
fstp
hlt
nop
retf
scas
add
clc
cmp
inc
mov
cwde
xchg
shr
pushf
push
or
cdq
out
out
stos
inc
fild
lea
lock
dec
dec
out
in
sbb
mov
mov
xchg
cmps
ret
repz
rol
lahf
sahf
mov
mov
aam
rcl
pop
inc
cdq
sti
js
mov
rcl
xor
mov
aas
mov
mov
out
aaa
mov
data16
jnp
cld
mov
jmp
fs
outs
cmp
(bad)
clc
sbb
jo
jo
and
mov
(bad)
std
rol
int3
mov
test
push
pushf
aas
cli
push
mov
xor
icebp
aas
add
icebp
ffree
jl
sti
out
das
inc
pop
jae
xacquire
push
out
cld
inc
jecxz
xor
call
ror
clc
mov
mov
lahf
les
inc
sbb
push
in
call
int3
xor
jmp
xchg
(bad)
jmp
jmp
pop
fdivrp
test
push
test
mov
mov
dec
dec
mov
mov
cmp
mov
adc
lods
imul
call
sub
mov
cmp
jb
popf
ss
call
fimul
xchg
in
add
mov
adc
sub
aas
cmps
push
mov
jp
xor
or
adc
daa
cmc
push
and
inc
cmp
jo
jo
es
xchg
loop
mov
leave
movs
push
xor
cwde
loop
push
mov
push
(bad)
out
mov
sub
jns
jg
inc
int
(bad)
mov
cmps
sub
mov
or
cld
mov
das
fcmove
or
add
mov
je
fwait
outs
mov
aaa
push
push
sub
or
cmps
call
icebp
mov
jl
jmp
fidivr
ins
mov
daa
inc
cmps
or
xchg
imul
(bad)
imul
inc
sbb
mov
dec
cs
stos
mov
xchg
fsubr
icebp
mov
pusha
js
xchg
pop
xchg
jg
ret
mov
shl
inc
mov
cmc
pushf
ret
das
dec
data16
leave
sbb
xchg
sbb
daa
sub
mov
xchg
test
fild
inc
dec
xchg
cmc
in
neg
adc
loop
out
and
es
(bad)
pusha
in
sub
ret
add
rcr
sub
je
pop
mov
cmp
gs
test
dec
or
jmp
or
mov
in
enter
outs
out
push
cmps
add
pushf
ret
stos
sub
inc
and
div
cmp
or
jae
out
xor
mov
rol
inc
sub
aam
pop
mov
sub
test
int3
xor
das
adc
sub
add
add
bswap
mov
cmp
xchg
js
cmp
sar
enter
inc
xlat
xchg
aaa
adc
gs
shl
adc
(bad)
aam
xchg
mov
cmc
or
ja
loopne
leave
pop
shl
add
xchg
loope
stc
in
push
mov
ins
pop
imul
loopne
cmp
test
push
push
sbb
(bad)
mov
mov
hlt
arpl
clc
ret
dec
jo
iret
xchg
push
popa
or
out
(bad)
push
cld
repnz
cmp
jle
or
pop
xchg
rdmsr
mov
gs
xchg
(bad)
mov
mov
dec
inc
jge
stos
ins
cld
xchg
imul
jp
loopne
mov
xchg
shr
shl
xchg
pop
nop
mov
mul
sti
int3
ret
and
jne
mov
add
leave
mov
lahf
imul
in
or
leave
stos
add
mov
sti
cld
pop
lds
mov
pop
popa
(bad)
inc
std
std
mov
je
add
loope
hlt
(bad)
pusha
push
jp
fwait
movs
call
add
outs
movs
cmp
adc
sbb
lds
scas
out
popf
call
test
test
jp
adc
xchg
lds
sub
dec
mov
inc
push
add
sub
data16
jbe
in
cmp
adc
sub
push
mov
into
jbe
pop
adc
pop
call
inc
in
jo
mov
xchg
jmp
jnp
div
and
(bad)
not
push
int3
popa
ins
sti
lea
jo
fidiv
xor
xchg
into
jle
sub
ficom
fst
jbe
sahf
in
(bad)
call
pop
bound
jne
add
jno
out
iret
xor
fistp
aam
call
push
xor
stc
sahf
test
mov
xchg
jno
lock
in
sub
scas
sti
cmps
xchg
aaa
add
sub
lock
clc
aad
push
mov
add
es
jnp
addr16
rcl
pushf
fimul
(bad)
lahf
jne
or
mov
mov
test
xchg
sbb
mov
out
pop
aam
in
pop
outs
mov
mov
jmp
rcr
(bad)
(bad)
popf
ins
not
inc
cmp
imul
iret
(bad)
aam
push
stc
mov
xchg
mov
cmps
push
clc
cmp
mov
mov
xchg
arpl
cmp
je
int3
inc
inc
sub
push
dec
sbb
addr16
pop
xchg
popa
(bad)
cmp
jp
mov
in
mov
xchg
rcl
out
mov
inc
std
fistp
retf
xchg
nop
lods
push
jecxz
stos
(bad)
aas
out
and
cmp
xor
inc
xchg
cmp
cmp
inc
in
jmp
rcr
mov
sub
inc
aad
aad
sub
pop
jg
lea
mov
jae
xor
inc
rcr
je
addr16
lock
adc
mov
and
sub
adc
cmp
sub
aas
cs
das
shr
mov
das
mov
and
in
adc
daa
push
dec
mov
add
iret
pop
test
add
int
outs
dec
dec
inc
loopne
or
ret
mov
mov
nop
fucomp
jg
ror
cmp
or
je
iret
ret
push
sub
adc
into
fld
pushf
and
dec
jbe
mov
aad
dec
(bad)
nop
leave
jp
shl
inc
or
je
cmp
cmp
cs
and
xchg
inc
sbb
retf
push
scas
in
pop
inc
sub
(bad)
jnp
or
(bad)
mov
lock
mov
or
pushf
mov
icebp
aaa
sub
(bad)
cmps
xchg
xchg
jne
add
sar
mov
mov
xchg
out
xchg
sbb
rcr
rcr
les
pop
sub
pop
xor
imul
(bad)
mov
xchg
daa
out
jg
push
jl
cld
in
jo
xor
repnz
daa
mov
jecxz
mul
jl
stos
xor
jle
sbb
sbb
jl
in
hlt
push
mov
mov
aas
mov
push
adc
imul
jecxz
or
cdq
popa
dec
xchg
inc
jp
sub
lods
movs
sub
(bad)
mov
cs
add
pop
scas
inc
lds
push
xor
loop
mov
lea
jo
popf
fdivr
cli
sbb
inc
int
pop
pop
jg
cld
xchg
inc
jg
xchg
out
aam
retf
cmp
sub
mov
inc
movs
sub
aam
int
clc
mov
shl
cli
xchg
inc
mov
shufps
push
adc
nop
cmc
xchg
stos
mov
inc
pop
pop
clc
sbb
fcomp
mov
lods
and
xchg
push
out
mov
mov
pop
and
(bad)
mov
push
js
movs
mov
je
xchg
push
fcom
hlt
xor
js
stos
sbb
mov
sbb
and
inc
xchg
mov
xchg
bnd
test
test
mov
jecxz
dec
cs
push
enter
sbb
pop
rcr
test
jb
pop
mov
pop
in
ds
int3
outs
xchg
(bad)
call
dec
shr
push
jecxz
dec
test
(bad)
gs
repnz
inc
fmul
sbb
cld
jnp
sbb
loop
cli
xchg
loopne
mov
ret
leave
pushf
dec
call
enter
faddp
mov
xlat
aad
loop
xchg
mov
mov
jg
cmp
(bad)
xlat
div
aad
test
add
aam
cmp
adc
mov
and
push
ins
nop
push
sbb
push
rol
xchg
sbb
push
and
mov
cmps
adc
call
stos
clc
add
aam
cmc
cdq
lods
inc
xchg
shr
das
dec
jge
jb
pop
cld
pop
sahf
popa
in
fldcw
inc
or
ret
or
push
push
std
imul
shl
pop
push
cld
out
mov
push
adc
xchg
(bad)
sahf
(bad)
pop
jg
push
or
nop
mov
sahf
aad
into
pop
loop
aam
pushf
ror
mov
sub
(bad)
ins
mov
mov
in
xchg
or
and
xor
stos
enter
outs
mov
dec
shl
xchg
sbb
retf
clc
mov
loope
ret
push
jg
xchg
cs
mov
sub
outs
add
inc
sub
ss
add
retf
stc
mov
pop
cmp
and
(bad)
addr16
pop
mov
jnp
adc
jle
jle
aas
and
sub
pop
or
cmp
fcmovbe
lock
std
retf
jb
push
add
es
sub
mov
(bad)
sahf
pop
cmc
cmp
dec
mov
mov
push
scas
stc
adc
sahf
mov
cli
in
dec
fidivr
int3
scas
jmp
cmp
ss
sbb
in
pop
cmp
aaa
mov
cmc
mov
sub
jmp
test
adc
add
inc
adc
es
mov
in
mul
mov
mov
movs
dec
iret
test
or
xchg
ret
retf
push
pop
mov
hlt
push
fst
push
push
retf
push
es
sar
neg
mov
inc
lea
pushf
lahf
rcl
xchg
jl
stos
mov
ficomp
stc
leave
jg
push
push
mov
dec
mov
not
lock
pop
sti
ja
mov
sbb
popa
in
fcom
fild
(bad)
out
cmp
(bad)
jns
and
stos
pop
sahf
call
mov
gs
sahf
retf
test
(bad)
adc
xchg
jmp
jge
fnstsw
psubsw
retf
or
mov
sub
icebp
cmc
ret
je
and
pop
mov
lds
scas
adc
xchg
test
push
dec
add
mov
fimul
in
in
out
lods
leave
pop
mov
js
adc
jle
sbb
xchg
mov
mov
mov
call
pop
adc
fstp
ins
cwde
xchg
test
scas
dec
mov
or
sti
cld
xchg
inc
add
retf
dec
mov
bound
test
jecxz
cld
xor
movs
test
pushf
jo
ret
xchg
push
cdq
jmp
push
call
sbb
mov
rcl
nop
sahf
push
add
mov
sar
aas
mov
push
push
(bad)
ins
sub
aam
mov
add
dec
mov
enter
jmp
popa
pop
outs
and
pop
aam
inc
mov
lods
mov
(bad)
sti
and
mov
jmp
loop
std
and
lods
add
retf
loopne
cmp
mov
stos
cmc
and
hlt
adc
imul
in
test
mov
sahf
xchg
xchg
or
sub
mov
dec
cmp
push
lock
(bad)
frndint
les
fmul
fwait
shl
cwde
es
fdivr
pop
fwait
les
into
int
pushf
(bad)
push
aad
in
(bad)
sbb
jne
in
push
push
ins
ins
dec
xchg
movs
jge
xchg
aad
jp
aas
loop
arpl
push
pop
ins
popf
scas
daa
push
push
jo
or
mul
sub
xchg
lock
mov
sar
push
mov
xor
jle
das
ins
adc
or
xchg
sub
jecxz
lahf
mov
es
xor
scas
(bad)
xor
sub
popa
inc
popf
clc
cmp
or
sub
xchg
xchg
imul
stc
es
sub
sbb
(bad)
dec
pushf
iret
xor
xlat
cmp
cmp
(bad)
cmc
sbb
mov
lea
adc
push
sbb
lock
aad
xchg
xchg
aad
fadd
rcr
add
fmulp
mov
stos
call
loopne
fcom
fdivp
(bad)
xchg
adc
push
sbb
sbb
icebp
and
pop
clc
jnp
xor
imul
sbb
and
jg
xor
ss
fist
mov
sbb
push
shl
pop
adc
sub
mov
mov
jnp
dec
shr
mov
mov
daa
xchg
add
xchg
rol
adc
cld
or
rcr
lods
loopne
aad
and
hlt
jo
mov
shl
inc
retf
mov
idiv
sbb
mov
sar
mov
jge
cwde
cmps
adc
call
mov
sub
mov
lods
ficom
cmp
(bad)
(bad)
mov
int3
cld
mov
sbb
cs
jecxz
add
ret
mov
(bad)
jnp
adc
push
dec
pop
pop
jle
fistp
rcl
or
clc
and
int3
into
jo
cmp
fs
fcom
adc
sti
(bad)
inc
fs
inc
ds
pop
loop
loopne
in
jecxz
or
sub
fcomip
xchg
mov
fwait
(bad)
in
jecxz
jmp
div
movs
lahf
adc
ret
jo
and
jo
or
(bad)
(bad)
sahf
dec
inc
int3
daa
add
xchg
pushf
lahf
addr16
push
jp
mov
outs
mov
sahf
pushf
movs
xchg
cs
aaa
inc
xor
fwait
stos
add
xchg
lods
jecxz
in
jae
aas
jno
in
and
in
xor
or
adc
leave
push
fs
pop
cld
in
mov
fnstcw
and
and
xchg
fstp
imul
sbb
in
shl
adc
sub
(bad)
push
or
daa
scas
js
add
jmp
or
xchg
pusha
push
inc
sahf
mov
lock
mov
add
(bad)
mov
inc
data16
xor
xchg
inc
bound
and
push
add
sub
xchg
adc
xchg
sar
stos
mov
fsubr
adc
sbb
dec
dec
cmps
xlat
in
inc
jecxz
inc
les
jecxz
xor
out
cmp
imul
ret
icebp
scas
adc
in
test
pop
cmp
mov
push
sar
lock
sbb
mov
dec
movs
mov
sbb
dec
mov
fs
pop
pusha
inc
cli
out
jecxz
cli
fiadd
pop
scas
xchg
inc
shl
fwait
mov
xlat
mov
in
call
ret
movs
mov
sahf
mov
add
stos
mov
push
sub
add
jle
xchg
xchg
call
lods
cli
call
pop
lahf
scas
inc
movs
push
xchg
xchg
push
ja
arpl
inc
cld
aam
jl
(bad)
push
inc
lahf
mov
xchg
mov
mov
fdivp
(bad)
iret
sbb
ja
adc
lahf
mov
dec
mov
out
xchg
retf
jmp
stos
mov
cmp
sbb
ret
stos
(bad)
mov
adc
adc
pop
and
mov
xchg
pop
mov
frstor
push
adc
xchg
cs
add
pop
xchg
push
inc
jmp
ins
shl
fwait
push
aam
mov
push
dec
jp
cmp
xor
xor
ja
into
in
cmp
dec
adc
fcomp
jl
rol
ror
inc
push
add
iret
cdq
sub
sub
push
cmc
adc
out
jb
mov
sbb
add
jo
push
pushf
ss
mov
mov
sbb
xor
add
mov
xor
out
or
std
push
push
das
pop
xchg
dec
push
jo
cmps
mov
jg
or
cmps
push
push
mov
lds
dec
jbe
jb
mov
retf
sub
nop
dec
cmps
retf
mov
fiadd
setp
scas
repz
loope
out
sub
push
xor
mov
jl
mov
lahf
mov
outs
mov
imul
sub
sbb
repnz
mov
(bad)
cmp
mov
jge
push
dec
cmc
ds
mov
inc
sbb
mov
arpl
push
test
cwde
cmp
push
sbb
cmc
ficom
xor
pusha
cmp
pop
mov
ins
ret
arpl
sub
dec
sub
mov
and
xchg
in
add
and
fild
loop
inc
and
xchg
cmp
std
(bad)
leave
mov
ds
push
and
mul
add
test
jmp
xor
inc
scas
jl
or
dec
jmp
mov
add
hlt
pop
les
icebp
add
imul
inc
xchg
pop
pusha
test
and
push
add
mov
nop
push
inc
fwait
jl
in
xchg
ds
sahf
lock
retf
jp
pushf
scas
mov
inc
jecxz
mov
dec
adc
jge
push
bound
aaa
bound
jno
lds
call
aam
ins
xor
hlt
shr
fistp
in
cwde
fneni(8087
das
add
loope
das
mov
les
xchg
jmp
in
and
out
(bad)
stos
ret
cmc
dec
out
and
fmul
jmp
mov
push
jl
fwait
mov
pop
jecxz
mov
xlat
retf
pop
sbb
xor
and
mov
into
dec
inc
push
adc
ins
cdq
mov
adc
js
and
pop
call
out
pop
xchg
push
addr16
sub
movs
jmp
dec
aam
sbb
arpl
inc
xchg
addr16
gs
cmps
xor
cmp
mov
xchg
stos
popf
fld
lahf
lods
xchg
xchg
mov
arpl
int3
pop
aaa
std
daa
jo
mov
sahf
gs
imul
(bad)
push
mov
out
sub
arpl
pop
mov
popa
not
bound
inc
add
in
xor
sub
imul
adc
ss
inc
dec
js
inc
outs
shl
stos
inc
(bad)
pop
dec
rol
xor
(bad)
pop
pop
scas
mov
lahf
cmp
sar
ja
pop
imul
mov
fistp
into
and
cdq
fistp
(bad)
leave
adc
nop
arpl
nop
pop
mov
ja
mov
jmp
adc
std
sar
cld
and
in
sbb
xchg
mov
fisttp
mov
dec
sbb
imul
and
push
mov
(bad)
sbb
stc
ret
call
adc
push
push
add
adc
mov
add
es
mov
sub
pusha
test
fidiv
xor
sbb
sbb
xchg
pop
cmp
sbb
fimul
cs
or
fsub
sub
mov
cmc
sti
test
jl
js
mov
fwait
and
sar
jp
push
in
mov
add
in
sub
dec
dec
sub
or
add
ret
rol
xchg
mov
sti
mov
mov
sbb
xchg
(bad)
push
nop
(bad)
xor
mov
pop
aam
sub
xchg
xchg
fwait
mov
or
in
add
jne
arpl
push
xchg
stc
lods
cmps
cld
das
ret
push
mov
mov
popf
dec
imul
push
mov
adc
loopne
mov
loopne
sbb
or
js
out
movs
and
push
mov
dec
xor
retf
out
rcr
sub
jmp
nop
adc
test
outs
xchg
or
es
scas
mov
(bad)
mov
cmp
xor
push
(bad)
push
adc
add
mov
jge
xor
ss
add
out
jae
or
retf
ret
cmp
inc
out
inc
cwde
lahf
dec
mov
retf
movs
arpl
aas
neg
cmp
or
push
pop
clc
sub
sbb
adc
push
pusha
bound
pop
push
rcr
icebp
mov
(bad)
pusha
arpl
cmp
cmp
jno
movs
mov
adc
cwde
mov
(bad)
imul
daa
test
add
ja
mov
push
dec
mov
pop
in
fistp
jecxz
aaa
mov
out
pop
push
cmp
test
ror
push
mov
mov
repnz
cmps
mov
repnz
cmp
xor
int
sub
jmp
or
and
(bad)
sahf
fdiv
repz
dec
jl
xchg
mov
aaa
jecxz
add
cwd
stos
jmp
or
pop
popa
test
pop
ss
mov
shl
fcomi
xchg
out
or
cmp
cmps
loope
and
xchg
xchg
pop
retf
lahf
mov
loope
pop
std
inc
mov
adc
adc
mov
loope
(bad)
clc
xor
xor
imul
sti
cld
sbb
cld
pop
lahf
jl
in
jmp
sbb
push
fs
push
sar
jo
adc
loope
cdq
ror
jl
mov
and
lahf
push
aaa
jg
mov
xchg
push
xor
out
jle
mov
mov
sub
ficom
mov
xchg
aad
mov
inc
sar
jmp
(bad)
test
xor
ret
stos
sbb
call
pop
call
dec
leave
jp
fdiv
cmp
inc
mov
fld
je
push
sub
xor
popf
cmp
add
enter
mov
xor
mov
mov
shl
add
pop
sub
mov
sahf
adc
das
shl
add
xchg
sbb
mov
hlt
imul
pop
jmp
xchg
out
fsub
sahf
hlt
shl
mov
xlat
nop
jns
cmps
rcr
mov
inc
les
(bad)
popa
jle
sub
fs
(bad)
adc
out
fsubp
jne
cmp
out
ror
xchg
dec
adc
dec
xchg
repnz
adc
popa
cdq
dec
dec
mul
push
call
xchg
jmp
dec
xchg
ret
jne
jge
or
pop
pusha
and
sets
aad
pop
mov
sub
mov
xchg
pusha
jle
stos
repz
imul
inc
(bad)
cwde
cmp
addr16
shl
jmp
mov
add
mov
or
into
scas
and
std
or
aaa
push
adc
sbb
popa
js
xor
push
std
cld
push
dec
xchg
retf
mov
lahf
ret
jp
xor
add
jmpw
sub
pop
mov
in
push
jb
mov
repz
or
int3
and
lea
pushf
(bad)
out
dec
xchg
lds
test
mov
mov
and
ds
mov
cmps
imul
loopne
sub
clc
in
sub
std
mov
xlat
mov
out
push
mov
jbe
adc
lahf
lahf
jo
popa
mov
xchg
ret
addr16
jg
pop
sub
hlt
adc
dec
outs
sahf
ja
repnz
(bad)
not
mov
push
jmp
inc
ja
iret
test
popf
icebp
sub
hlt
xchg
out
(bad)
(bad)
in
scas
addr16
sub
inc
mov
in
out
pop
add
bound
sbb
mov
inc
outs
inc
inc
dec
jp
retf
add
cmp
xchg
cmp
scas
jbe
cmc
ficomp
imul
jbe
mul
rcl
dec
or
sub
mov
cmp
dec
mov
mov
out
(bad)
or
push
xchg
sub
pop
int
push
inc
pop
retf
test
into
bound
test
fs
add
pop
pusha
loope
das
pusha
fsubp
adc
mov
fs
and
adc
mov
jge
mov
mov
in
cdq
inc
mov
rcl
jle
mul
cmp
cmp
mov
cdq
mov
nop
mov
sar
jae
and
ficom
nop
(bad)
jle
and
adc
and
sub
loopne
lds
xor
movq
add
bound
hlt
cdq
adc
retf
sub
sub
leave
cmp
inc
cmp
mov
gs
pop
push
inc
fs
xchg
mov
inc
(bad)
shl
pop
sub
mov
xor
push
fs
out
xor
inc
fnop
jle
ret
(bad)
clc
push
fsubrp
daa
xchg
int
leave
inc
mov
ins
jbe
jle
dec
rcl
mov
adc
pop
jecxz
gs
pop
jle
loop
fimul
push
pop
or
mov
sub
push
dec
add
pop
mov
not
es
imul
xchg
dec
sbb
push
or
or
(bad)
loopne
movs
push
xor
test
lock
push
and
dec
mov
ror
stos
and
sahf
and
adc
xor
dec
and
and
dec
pusha
sahf
icebp
or
and
mov
popa
jb
idiv
xchg
pop
push
sub
test
xchg
js
sti
aaa
inc
jns
jmp
push
cmc
fs
sub
jle
out
(bad)
cs
sar
inc
nop
clc
push
xchg
jns
in
add
test
push
jp
add
ja
jmp
call
cmp
loop
icebp
sbb
sar
cmp
sti
(bad)
stos
cs
ret
add
ja
test
inc
mov
adc
adc
cs
push
cmp
and
dec
test
sbb
lea
cli
outs
xlat
enter
pop
cmp
ror
xchg
movs
mov
and
pop
jnp
hlt
in
and
ret
test
or
jb
mov
dec
in
pop
lds
sbb
rol
cld
xchg
xchg
fimul
pop
lds
sub
mov
js
push
nop
scas
repnz
mov
xlat
xchg
test
fwait
jle
nop
nop
sti
cmp
add
mov
ss
cmp
lods
(bad)
push
cmp
fcomp
pop
cdq
idiv
cmp
mov
fild
mov
mov
pusha
pushf
jnp
cs
loopne
push
and
int3
xor
cmp
cs
xchg
mov
xchg
xchg
adc
adc
sub
add
inc
jbe
push
leave
outs
cdq
mov
mov
or
das
jle
in
idiv
ss
(bad)
out
jmp
cwde
cld
pushf
lahf
add
ficomp
sub
jo
sbb
int3
fnstcw
sbb
(bad)
xor
jmp
fsubr
sahf
fstp
jnp
cmp
popa
fadd
fisubr
adc
xchg
inc
xchg
or
ds
mov
xlat
mov
aam
push
call
fst
push
add
xchg
and
jnp
sub
into
mov
dec
stos
jae
in
pushf
jmp
jg
fwait
sbb
lahf
ss
imul
retf
push
nop
adc
shr
in
cdq
jno
xchg
test
movs
sar
mov
fnsave
add
retf
aas
pop
adc
mov
push
call
xor
push
jbe
mov
call
pushf
cwde
mov
cmp
mov
mul
mov
js
push
or
lods
in
xor
pop
fst
cmp
fstp
jl
scas
popa
rol
ins
les
push
mov
call
aas
gs
es
jne
stos
xchg
inc
shr
iret
xchg
dec
xor
les
loop
fiadd
cmp
sbb
pop
(bad)
sbb
(bad)
jecxz
out
mov
jmp
fisubr
call
cli
add
fwait
enter
ss
leave
and
(bad)
mov
mov
push
(bad)
mov
inc
iret
(bad)
pop
cmp
mov
test
es
pop
iret
push
mov
pushf
fist
push
xchg
arpl
and
les
ret
out
push
cld
add
adc
(bad)
pop
(bad)
sub
pop
aad
test
or
je
inc
xor
cmc
sbb
(bad)
leave
push
add
adc
cmc
(bad)
cmp
jle
call
push
cmp
sbb
xchg
cli
and
pop
aas
jb
inc
lds
daa
fiadd
(bad)
xor
or
mov
adc
bound
stos
and
popa
ror
rcr
shr
xchg
sub
out
call
in
or
add
jmp
aaa
sar
pushf
mov
sub
enter
sub
test
loopne
dec
dec
in
into
icebp
sub
sub
or
xchg
gs
in
inc
sbb
jge
sbb
int3
out
(bad)
int3
mov
push
inc
and
xchg
in
mov
push
cmp
(bad)
shl
ret
xor
and
(bad)
scas
mov
pop
jno
dec
clc
je
(bad)
xor
dec
push
sub
sti
dec
mov
(bad)
mov
sub
mov
mov
add
fistp
xchg
xchg
call
cli
xlat
mov
sti
xor
mov
inc
(bad)
(bad)
out
dec
out
icebp
and
pop
dec
fnstsw
push
xor
xor
loopne
dec
je
mov
dec
push
out
jp
mov
aad
inc
es
loopne
dec
sub
xlat
sti
and
push
cmps
lahf
and
cdq
mov
dec
sti
iret
aaa
push
push
jl
xchg
lahf
xor
daa
or
jae
dec
mul
jge
push
neg
xchg
iret
test
mov
loopne
pop
iret
dec
cdq
(bad)
push
adc
and
faddp
xchg
movs
jecxz
repnz
test
test
push
or
lods
add
inc
lock
push
nop
ja
ins
xor
sub
dec
mov
mov
xlat
mov
addr16
pop
in
imul
xchg
test
iret
and
cmp
cmp
jb
jae
(bad)
fcom
dec
les
inc
je
inc
rcr
sbb
mov
push
(bad)
mov
sub
xor
mov
(bad)
mov
jmp
xor
push
mov
adc
adc
sub
retf
in
fsub
sbb
xor
xor
jmp
and
in
pop
(bad)
pop
and
fisubr
aaa
loopne
inc
mov
push
jne
stc
cmp
(bad)
iret
cmc
cmp
cli
arpl
dec
pop
and
call
inc
pop
outs
cld
fild
test
mov
sub
mov
xor
sbb
cmc
sbb
jmp
or
adc
test
push
sub
cmp
mov
fdivr
mov
ins
push
cmps
xchg
lahf
cmp
mov
test
xchg
and
mov
push
push
(bad)
mov
(bad)
into
aad
mov
ss
in
jmp
call
or
retf
or
lods
out
and
stos
hlt
cli
or
imul
inc
loope
pop
mov
mov
enter
das
loop
test
scas
add
push
sub
sbb
xor
jne
iret
in
or
push
ficom
mov
sub
loopne
loope
mov
xchg
adc
and
dec
sub
aaa
pop
mov
mov
(bad)
stos
dec
je
je
push
test
lods
jge
shl
mov
push
mov
adc
pop
(bad)
add
leave
inc
pop
xchg
jne
imul
pop
pop
fs
in
dec
jbe
loopne
adc
aad
fsub
nop
or
sti
push
push
repnz
sub
ret
lods
mov
movs
dec
stos
inc
add
dec
mov
daa
inc
mul
push
xchg
or
add
cdq
repnz
mov
add
aam
dec
cmps
mov
inc
aaa
inc
jbe
mov
leave
stos
fisub
mov
mov
lea
loop
inc
test
(bad)
retf
jae
adc
fcom
push
inc
test
dec
mov
std
(bad)
std
push
loope
movs
test
pop
xor
loope
loop
jl
or
and
cmp
xor
cwde
imul
xchg
pop
or
shl
push
push
jno
push
sbb
das
xor
in
mov
xor
cmp
cli
shr
pop
and
inc
ftst
hlt
xor
sbb
and
cmp
ds
(bad)
ins
sbb
call
cmp
call
xchg
outs
bound
(bad)
ins
mov
cld
(bad)
jmp
not
mov
cli
sub
push
call
push
in
lea
push
addr16
mov
jmp
pop
mov
jmp
imul
cmp
loop
dec
adc
mov
xchg
scas
inc
lds
inc
inc
in
or
mov
jne
jae
repnz
loope
inc
sub
mov
rcr
dec
mov
out
fld
pop
cmp
lods
std
ror
adc
add
add
movs
outs
cmc
cwde
sbb
xchg
imul
push
lahf
xchg
cli
xlat
cmp
js
sub
pop
cmp
mov
ss
arpl
lods
push
push
addr16
lahf
in
clc
movs
ret
cmp
shl
adc
arpl
call
fnsave
adc
std
pop
fs
mov
mov
mov
inc
sahf
lds
inc
lds
jmp
js
mov
fs
dec
sub
xchg
jnp
outs
jl
mov
lods
mov
dec
push
add
dec
and
mov
(bad)
retf
cli
stc
mov
mov
rcl
sub
inc
mov
pop
inc
push
jo
jl
sti
js
(bad)
xor
loope
arpl
adc
mov
jae
inc
cmps
push
ins
repz
and
mov
and
addr16
xor
or
cmp
push
stos
dec
(bad)
cmp
pop
cli
repz
mov
in
pop
cmc
gs
nop
cwde
jl
imul
cmp
test
shr
int3
clc
sub
xchg
mov
pop
add
sub
outs
sub
add
call
adc
cmp
outs
leave
cmp
mov
arpl
push
hlt
pop
adc
test
jl
mov
add
imul
xchg
sbb
(bad)
dec
dec
shr
pop
in
(bad)
pusha
outs
cmp
pop
add
xchg
mov
loop
push
cmp
test
test
cmp
shr
mov
mov
daa
ins
dec
or
pop
shr
cmps
mov
or
pop
jecxz
fcmovbe
daa
push
(bad)
sbb
push
stos
push
jnp
sbb
sar
aas
xchg
dec
retf
into
pop
push
nop
inc
sar
mov
retf
adc
add
out
cmp
sbb
sub
mov
push
cs
and
retf
jae
and
mov
in
loopne
loopne
push
add
dec
jnp
fs
push
xor
stc
adc
xor
std
and
les
xor
outs
ret
mov
dec
inc
popf
push
test
outs
mov
lea
lods
shl
mov
sbb
and
inc
xlat
xchg
data16
nop
pusha
fisubr
push
ins
cld
repnz
xor
arpl
jb
cmp
inc
loop
adc
movs
mov
test
jb
add
adc
sub
js
out
mov
mov
sbb
inc
je
aam
jbe
out
stc
outs
inc
lahf
outs
mov
js
sub
ins
imul
pop
lea
jnp
popf
cli
adc
neg
ds
sub
cmp
out
test
inc
inc
outs
js
aas
and
mov
xor
repz
clc
push
loop
or
(bad)
cld
pop
push
xor
les
outs
fcmovnu
ret
ror
mov
mov
test
imul
pop
push
aad
shl
leave
push
jo
sbb
cmp
sbb
icebp
push
xor
out
ja
loopne
rcr
cld
shl
or
pop
sar
mov
mov
clc
xor
ret
mov
shr
inc
cmps
jl
mov
ret
xor
(bad)
jl
icebp
cwde
dec
push
imul
dec
cmp
movs
sahf
dec
outs
pop
and
xchg
xchg
loopne
pop
mov
lahf
imul
push
ss
xchg
push
jnp
fstp
out
pop
lock
loope
xchg
test
xchg
or
jp
rcl
out
jp
cmp
push
xor
mov
ror
and
xor
mov
xchg
fcomi
inc
mov
push
ficom
sar
push
aaa
dec
loopne
stc
jl
das
out
cmp
jge
xchg
in
xor
std
jb
inc
(bad)
or
adc
xchg
nop
rol
mov
xchg
lahf
sbb
pop
xlat
jecxz
jecxz
xor
xor
lahf
jne
pop
and
fidivr
adc
fisubr
xor
push
popa
into
cli
lock
int
mov
imul
cmp
sahf
adc
(bad)
mov
sub
jb
ret
xchg
clc
(bad)
push
sbb
scas
jb
loop
movs
rol
xor
pop
jmp
setg
xor
xor
adc
sub
dec
jecxz
retf
mov
sbb
inc
mov
jbe
pushf
sbb
mov
ss
cmc
ficomp
cmps
gs
aad
bnd
dec
jbe
sub
sbb
clc
sbb
enter
call
pop
lock
callw
sbb
dec
mov
push
loope
loopne
aas
pusha
mov
mov
jecxz
stos
cli
push
inc
idiv
xor
xchg
stos
test
in
jmp
mov
(bad)
jecxz
mov
dec
outs
test
ins
not
sbb
cmps
les
cmp
pop
cmps
leave
lds
je
dec
nop
ja
js
std
(bad)
jne
adc
dec
jbe
sti
xchg
mov
pushf
les
mov
and
xchg
es
xchg
into
aas
shl
movs
rcl
aaa
mov
cmp
inc
gs
les
push
test
loope
mov
xchg
outs
shl
xchg
ret
inc
mov
stos
daa
cmp
push
lods
mov
imul
cmps
pop
sbb
loope
lahf
add
xchg
xchg
dec
rcl
pop
cmp
and
cs
je
sub
xchg
rol
xor
jp
mov
in
jge
dec
mov
fisttp
retf
repz
scas
ins
fcomip
stos
mov
push
push
addr16
stos
pop
adc
or
cmp
jecxz
aad
ins
je
pop
je
sbb
xchg
shr
sub
retf
int
xchg
xchg
dec
sub
repnz
dec
mov
mov
ret
push
xchg
dec
pop
das
xchg
xchg
std
cld
pop
jle
mov
pushf
sahf
je
xchg
shl
(bad)
jbe
ja
sahf
push
mov
stos
dec
xchg
fbld
mov
leave
jl
pushf
jmp
js
mov
add
dec
or
cmp
imul
jle
lock
mov
jnp
pop
jg
dec
mov
aad
and
lock
pop
dec
clc
jo
cmc
in
dec
aad
xchg
loopne
add
imul
sub
rcl
popa
xor
fdivr
sbb
sub
and
call
std
fcom
xchg
(bad)
loope
push
in
call
rol
lds
ret
movs
ret
(bad)
loope
or
cld
fbstp
test
lahf
test
js
nop
dec
pusha
jp
cwde
adc
pushf
loop
adc
mov
lods
rol
mov
jbe
loope
and
mov
inc
repnz
inc
ja
and
xor
outs
mov
retf
lods
mov
adc
cmp
out
nop
mov
cwde
inc
jo
or
js
jl
hlt
mov
cli
or
in
adc
in
mov
or
aam
and
fsubr
cmps
push
cmp
mov
xor
inc
pop
and
into
jo
mov
mov
or
xor
sub
mov
fcos
mov
inc
fnsave
lahf
and
jo
mul
jp
fs
jmp
jp
mov
and
clc
into
pop
inc
scas
mov
pushf
mov
cmp
ss
(bad)
cs
jo
add
cmp
pusha
jmp
xchg
(bad)
or
cmc
js
lock
or
mov
fwait
jg
adc
cli
mov
mov
pop
mul
call
fistp
jp
xchg
xchg
mov
cmp
xchg
adc
inc
xchg
das
pushf
aam
and
lahf
sbb
xor
daa
jmp
xchg
fs
dec
jmp
pop
mul
cli
popa
sub
mov
in
inc
inc
cmp
and
lods
lds
mov
sub
sub
sahf
ins
icebp
xchg
xchg
int3
mov
cmp
sti
dec
xor
pop
adc
aas
cmps
jl
sbb
into
jl
add
fidiv
ds
(bad)
mov
adc
mov
adc
pop
and
lods
es
cmp
xchg
(bad)
mul
into
hlt
ja
aam
arpl
call
(bad)
loopne
loopne
retf
inc
ror
xor
and
fstp
test
outs
cli
sbb
xor
jle
and
aas
mov
dec
jnp
loopne
and
or
lahf
ss
loope
ret
arpl
sub
movs
les
jle
cli
test
xor
add
arpl
xor
in
jl
lock
sti
mov
push
pop
(bad)
push
and
adc
into
cmp
mov
mov
dec
push
xor
cmp
or
aas
mov
jbe
xchg
xchg
pop
and
aas
int
cmc
lea
aaa
dec
out
(bad)
xor
test
sti
add
sub
cmc
mov
scas
test
adc
retf
iret
mov
pushf
stc
pushf
xor
xchg
dec
add
jg
shl
mov
sbb
movs
stos
sti
pusha
and
sub
in
mov
fwait
sbb
movs
push
movs
std
jmp
jns
cli
mov
cdq
and
lahf
cmp
movs
scas
push
inc
xchg
mov
mov
dec
retf
ins
daa
stos
xchg
stos
aad
mov
adc
mov
les
xchg
movs
xchg
ins
inc
aas
(bad)
xor
outs
arpl
fcom
std
or
pop
mov
scas
pop
call
cmp
sti
movs
mov
pop
xchg
(bad)
cmp
lea
mov
pop
inc
jo
pusha
mov
and
and
sub
sub
pop
imul
ds
dec
lds
fcom
clc
gs
scas
mov
mov
lds
gs
ret
gs
xchg
call
jmp
sbb
idiv
cs
pop
addr16
imul
ret
adc
shl
fcmovnb
and
push
push
fwait
jg
shl
mov
aaa
imul
aam
mov
addr16
add
stos
movs
xor
out
int3
jecxz
in
out
shr
pop
cld
loope
push
lahf
sbb
fdiv
add
call
sahf
xor
push
dec
pop
xchg
adc
js
fs
test
popf
call
fwait
or
mov
and
lods
rep
push
je
cwde
in
sbb
cdq
sub
test
jne
clc
imul
in
ret
icebp
ds
test
or
inc
out
in
mov
pop
pop
rcl
out
repnz
movs
mov
in
pop
(bad)
loope
stc
inc
cmp
clc
jno
(bad)
add
jl
out
push
scas
adc
aad
jg
sub
fnstcw
leave
hlt
ds
pop
cmps
(bad)
sbb
scas
scas
and
imul
cwde
inc
lds
lea
out
inc
jnp
call
cmp
stos
and
inc
xchg
ja
cmps
mov
or
add
inc
mov
cmc
ss
(bad)
bound
scas
pop
cvttss2si
dec
lods
push
jo
adc
lods
fcmovb
in
or
add
ins
out
sub
inc
xor
push
das
xchg
xchg
nop
cmp
not
or
xor
fimul
bound
loop
add
xchg
sbb
scas
dec
aad
data16
fidivr
ret
cmps
and
iret
push
xchg
arpl
sub
test
jg
aam
mov
test
aas
jnp
xchg
sbb
jmp
cmp
xor
xchg
pop
hlt
out
adc
(bad)
jae
mov
das
and
xchg
sti
jp
mov
xchg
mov
mov
mov
pusha
pushf
ret
xchg
sub
or
push
cdq
outs
daa
inc
sahf
fcmove
adc
mov
int
push
in
test
sahf
push
in
jns
push
jle
jmp
bound
cmps
ret
pop
adc
mov
int
sbb
addr16
popf
ja
sub
les
sbb
test
and
sahf
push
xchg
(bad)
pushf
fadd
sbb
aaa
dec
xchg
ss
cmp
stos
xor
mov
jno
dec
xchg
xchg
inc
arpl
cmp
invd
in
add
retf
sub
dec
lea
sbb
test
mov
call
lods
arpl
mov
adc
ret
inc
cli
fisub
cmp
mov
rcl
push
add
adc
dec
lods
ins
fucomp
sahf
retf
add
cdq
sub
sbb
push
bound
xor
jae
cdq
aam
dec
mov
cmps
stos
mov
pop
repz
xchg
fist
cwde
mov
out
mov
mov
les
adc
mov
xor
xchg
outs
xor
mov
adc
inc
test
sbb
enter
xchg
and
out
sub
push
outs
inc
cli
(bad)
cmps
cmp
sbb
loope
mov
cli
sub
cli
and
shl
cmp
mov
in
dec
inc
iret
test
fmul
inc
je
test
mov
fucomi
out
and
mov
stos
ret
mov
push
(bad)
loop
cmp
std
push
adc
es
repz
sub
in
mov
push
sub
xchg
test
(bad)
cld
jl
scas
js
jmp
std
mov
rol
sub
sub
js
(bad)
iret
mov
mov
ret
outs
dec
js
out
ret
into
or
popf
mov
fwait
addr16
adc
xchg
fs
(bad)
std
adc
and
in
jl
div
cmc
ds
sub
or
not
xor
inc
ds
xor
add
aam
les
mov
mov
dec
icebp
aam
inc
cdq
aad
(bad)
sub
cmp
adc
sbb
or
stos
cmps
test
xor
inc
test
cmp
or
cdq
inc
pushf
xchg
sub
jno
jmp
mov
add
push
xchg
push
pop
addr16
adc
daa
imul
push
aas
mov
in
cmp
movs
aam
xor
or
dec
aas
cdq
inc
push
or
xchg
push
xor
sbb
popa
(bad)
add
call
jnp
push
sbb
fbstp
sahf
pop
sub
push
pop
cmps
(bad)
jmp
push
int
ja
gs
in
jg
into
hlt
or
inc
repz
lds
or
inc
lea
and
loope
ins
jno
iret
shufps
jne
sub
add
(bad)
mov
ffreep
xor
push
add
imul
loopne
adc
dec
iret
pop
fst
xor
ja
push
adc
jge
cmp
hlt
xchg
add
jl
jae
les
cs
and
cdq
adc
std
or
cld
mov
xor
aaa
iret
ret
sti
rcr
add
sub
aas
retf
popf
das
pushf
test
call
ins
push
into
xchg
std
je
fwait
aam
mov
sub
mov
xlat
fs
addr16
mov
sbb
cdq
popf
mov
mov
retf
cld
push
pop
into
in
push
xchg
jne
dec
add
les
jno
cld
sbb
or
test
jae
push
(bad)
out
xor
sub
inc
enter
sub
aad
repz
out
and
adc
daa
sub
mov
ss
retf
mov
iret
fcomp
add
mov
icebp
xchg
repnz
sbb
test
inc
scas
iret
sub
or
inc
test
or
xchg
xchg
shl
out
inc
add
in
jl
cmp
loope
pop
lea
fist
xchg
int3
pop
ret
xchg
pop
push
sub
bound
out
inc
test
push
inc
cmp
daa
ins
mov
movs
pop
cmp
cdq
xor
(bad)
retf
mov
lods
xchg
push
mov
add
(bad)
cmp
inc
push
adc
pop
loop
enter
add
pop
cs
xchg
pop
inc
lds
rol
aam
push
push
xchg
sbb
clc
pop
sbb
sub
xchg
add
popf
sti
inc
pushf
push
or
xchg
adc
ds
adc
test
pop
clc
dec
xor
mov
and
sahf
inc
sahf
jnp
in
add
push
jp
neg
xor
retf
dec
jo
sub
sahf
hlt
stc
das
jge
call
dec
daa
iret
arpl
pop
xchg
fucomip
ins
and
xor
push
sub
jge
imul
mov
mov
pop
iret
repnz
mov
pop
loop
nop
add
dec
(bad)
push
ss
cmp
and
ret
(bad)
cmp
in
in
add
mov
jnp
push
sahf
push
xor
adc
nop
pop
jp
jo
in
sahf
ins
cmps
stc
mov
pmaxsw
push
cmp
nop
inc
stos
rol
rcl
(bad)
push
xchg
adc
bound
mov
daa
xchg
lahf
or
jo
inc
mov
mov
or
sti
aam
jmp
scas
lahf
cld
mov
xor
js
pushf
xchg
mov
xchg
(bad)
mov
mov
iret
sub
mov
cmp
cmp
das
inc
fsubrp
add
pop
test
lods
pushf
test
into
cli
retf
shr
fcomp
(bad)
adc
cmc
(bad)
enter
mov
xlat
mov
xor
scas
xchg
adc
or
addr16
hlt
movs
jge
dec
test
nop
push
cli
adc
cmp
scas
or
xchg
mov
and
xor
push
or
xchg
div
out
xchg
fwait
into
mov
pop
mov
mov
mov
xlat
loopne
retf
out
retf
mov
test
movs
adc
sbb
push
and
xchg
movs
sar
stc
mov
and
dec
cmc
jge
hlt
out
fadd
mov
cmp
jns
les
rcr
inc
mov
fiadd
jmp
cld
fdiv
mov
call
arpl
jecxz
rcl
adc
push
xchg
sbb
push
or
dec
nop
rol
adc
mov
in
push
adc
dec
xchg
lods
sbb
xor
sbb
test
pop
fidivr
inc
add
pop
test
fnstsw
sbb
xor
inc
sub
xchg
sub
jle
call
cmps
es
bnd
sbb
mov
pushf
xor
dec
lock
dec
jae
retf
mov
retf
dec
bound
jne
or
retf
sub
push
dec
push
mov
ja
xchg
cwde
mov
jbe
jns
jno
sub
mov
imul
fcom
(bad)
(bad)
cmp
mov
cs
cli
sbb
jae
mov
ficomp
jno
retf
call
jecxz
push
push
mov
fwait
inc
cld
repz
push
and
push
mov
test
dec
stos
sahf
lds
sar
jecxz
out
shl
loope
stc
fsub
cmp
or
xchg
(bad)
adc
mov
xor
xchg
adc
lea
(bad)
adc
fcmove
out
loop
cmp
inc
les
aaa
call
adc
retf
fs
push
or
adc
arpl
gs
xor
and
mov
xchg
lock
adc
pop
vphaddubw
adc
push
jns
lods
aam
nop
push
fisttp
mov
imul
sbb
adc
cmp
mov
cmps
ins
push
pop
in
xor
retf
mov
cmps
popf
jnp
enter
das
mov
push
fnstsw
or
mov
mov
rcl
call
push
mov
inc
fisub
and
retf
fisub
jle
shl
mov
aas
loopne
aaa
dec
pop
add
rcr
rol
sti
outs
cld
push
sysexit
add
popf
adc
in
xor
popa
mov
js
pop
shr
mov
sub
mov
pushf
jnp
(bad)
cdq
cmp
jecxz
das
mov
push
push
aaa
adc
add
mov
mov
jmp
rcl
lods
dec
sbb
rcl
fdivr
shl
nop
(bad)
jmp
aaa
dec
sbb
and
pop
outs
scas
and
push
xchg
shr
add
or
or
(bad)
fsubr
sub
jge
je
xor
cmp
rcl
jo
mov
(bad)
sar
jne
push
test
xchg
mov
cmp
sub
das
push
sub
(bad)
jo
aad
imul
(bad)
dec
dec
sub
movs
pop
(bad)
das
div
sbb
adc
or
cmc
loopne
or
push
pusha
cmp
adc
ds
pop
or
sub
xchg
adc
mov
cmps
and
retf
fwait
pop
call
jmp
fnsave
or
cmp
imul
test
jae
xlat
call
retf
xor
mov
add
retf
popa
mov
and
xor
jg
sub
arpl
mov
fstp
mov
sub
outs
ds
mov
mov
mul
dec
jge
aas
daa
adc
fist
arpl
xchg
sub
lahf
stos
mov
mov
push
mov
push
dec
icebp
cmps
cs
add
sbb
dec
out
jg
mov
xchg
aam
in
xchg
sahf
retf
icebp
rcl
sbb
fwait
mov
movs
test
movs
shl
aaa
ret
hlt
lods
lahf
mov
mov
pop
and
call
cmp
pop
sbb
(bad)
std
and
aam
and
outs
xchg
mov
ins
(bad)
cmp
ret
xor
retf
jae
dec
sub
inc
sbb
retf
imul
pop
xchg
jmp
in
cwde
cs
js
ja
imul
adc
hlt
sub
mov
push
pop
fwait
out
test
sbb
mov
(bad)
mov
in
lods
xchg
mov
inc
ins
mov
adc
jbe
xor
std
or
pop
mov
inc
ror
out
push
sbb
addr16
movs
or
jbe
mov
retf
dec
mov
in
es
jnp
jl
inc
xor
mov
pop
cdq
mov
leavew
push
pop
inc
cmp
clc
or
hlt
cwde
mov
fmul
inc
or
out
sub
adc
out
xacquire
sbb
sbb
fdivr
dec
into
xor
inc
adc
jnp
xor
or
push
xchg
cmp
sar
fwait
enter
mov
xor
and
mov
sar
adc
sub
push
mov
stc
xchg
jg
jb
add
in
mov
mov
es
mov
or
cwde
inc
xchg
lea
outs
out
push
and
push
sbb
mov
mov
jne
call
movs
loope
or
push
fbld
jb
shr
pushf
sbb
jo
mov
rcr
ins
stc
fidivr
mov
fist
aad
js
mov
sbb
pop
gs
imul
call
rcr
test
mov
pop
mov
ss
sub
xchg
mov
push
mov
leave
jno
mov
icebp
cmp
loope
dec
push
mov
fiadd
xlat
pushf
enter
or
and
pop
mov
cmp
adc
xor
jg
add
and
stos
dec
jmp
xor
aaa
jl
fbld
mov
jbe
xor
mov
lods
sbb
ret
ins
jge
push
cmps
mov
dec
lods
xor
fidiv
ret
sahf
sbb
dec
or
ret
mov
inc
(bad)
and
xchg
jo
stos
cmps
fsubr
scas
xchg
lods
cli
(bad)
mov
add
pop
cmp
mov
ss
lds
cmp
jmp
push
sub
xor
mov
jb
cmp
jp
pop
into
jb
pop
inc
hlt
stos
push
sahf
push
cmp
jae
add
push
rdmsr
pushf
outs
cmp
adc
adc
push
pop
es
shl
sub
mov
xchg
add
mov
aad
jg
pop
or
pop
fld
xor
push
cmp
pop
cdq
and
cmp
aad
jbe
xchg
or
jecxz
jmp
push
fsub
dec
dec
xor
sub
nop
clc
loopne
arpl
jb
out
lods
cmp
daa
cmps
popf
pop
repz
fwait
loop
shr
inc
mov
mov
je
dec
fwait
add
scas
out
sub
or
inc
adc
mov
and
xchg
xchg
pop
cmp
aaa
outs
cdq
xchg
add
and
out
cli
outs
ins
outs
xor
imul
stos
jp
push
adc
aad
test
ins
aas
fwait
xor
cmc
lods
push
(bad)
xor
add
test
cmc
mov
xor
stc
test
(bad)
(bad)
(bad)
sbb
pop
daa
jne
aas
fld
mov
mov
inc
add
test
dec
scas
mov
inc
das
test
fist
mov
jb
stc
stos
fistp
es
rol
cmps
scas
mov
clc
cmp
mov
ins
pop
and
cmps
jbe
jnp
mov
xchg
xor
fcmovnbe
jbe
pop
retf
pop
into
pop
xchg
mov
loop
mov
lahf
xor
rcr
xor
push
mov
xchg
ds
xor
cmp
xchg
(bad)
mov
ffreep
hlt
mov
sti
jle
lds
cdq
pop
icebp
(bad)
inc
add
inc
in
and
inc
aad
pop
loopne
rcl
mov
jmp
data16
out
bnd
out
call
scas
dec
cmp
out
out
cmp
pusha
mov
sar
add
jge
xchg
retf
stos
nop
xor
mov
retf
dec
xchg
pop
jbe
hlt
and
outs
xchg
cmps
xor
pushf
lock
js
mov
inc
popa
xchg
or
push
mov
add
sub
repz
(bad)
call
outs
sahf
or
lea
out
iret
data16
mov
(bad)
sbb
pop
das
test
pop
xor
mov
cwde
jae
das
xchg
pop
xchg
pop
lods
xor
iret
sub
jmp
sub
pop
mov
popf
out
jno
cmp
xlat
xchg
xchg
sub
sub
cmp
inc
push
xchg
sub
inc
dec
add
cli
jno
std
mov
sub
jecxz
sahf
sti
fs
sti
add
enter
add
jno
cli
js
cs
xor
cdq
hlt
push
dec
ds
pmullw
adc
jecxz
js
xchg
jmp
dec
aam
jecxz
fist
ret
and
fst
hlt
sub
sub
das
add
mov
in
jle
jb
inc
or
stos
retf
fist
popf
movs
push
int
jbe
fimul
pushf
leave
xchg
cmp
mov
rcr
push
jmp
nop
and
mov
int
cdq
ror
xor
sbb
mov
leave
xlat
lahf
lods
push
xchg
jecxz
call
jmp
(bad)
retf
fwait
xchg
test
fld
sahf
in
add
leave
xor
mov
dec
leave
jle
dec
xlat
xor
push
inc
sub
imul
pop
lea
adc
fs
sub
pop
mov
out
dec
std
or
gs
int3
jecxz
mov
adc
lahf
hlt
cmp
cmps
mov
mov
ins
xchg
adc
clc
cmp
xchg
popf
in
(bad)
mov
dec
sbb
inc
jmp
inc
psrad
call
nop
add
inc
icebp
xchg
jns
shr
push
and
pusha
loop
mov
into
retf
inc
and
mov
adc
aas
fwait
out
adc
mov
push
movlhps
mov
(bad)
stos
aas
dec
addr16
push
in
xchg
push
cmp
popa
loop
clc
test
add
xchg
push
push
in
leave
adc
gs
mov
test
arpl
fadd
movs
push
dec
pushf
repnz
sar
dec
repnz
xchg
repz
and
mov
stos
outs
jle
mov
retf
cmp
nop
ror
adc
and
test
or
rcl
ret
add
pop
or
inc
jl
jb
(bad)
cmc
push
mov
xor
test
mov
xchg
mov
inc
into
retf
iret
ins
mov
int3
(bad)
dec
jge
xchg
popa
xchg
jmp
aad
clc
jle
(bad)
ja
add
push
test
push
jns
loope
push
out
test
and
mov
test
mov
les
sub
jo
mov
mov
adc
iret
jns
or
arpl
adc
int3
ins
lea
mov
stos
adc
int
rcr
repz
inc
sbb
and
mov
pmuludq
mov
fs
loop
adc
dec
pusha
mov
fstp
mov
int
dec
fdivr
add
cmps
fist
cld
pop
into
xchg
push
or
push
ficom
test
in
pop
cmp
adc
test
ss
fld
xchg
push
ret
out
xchg
dec
je
es
xchg
lahf
dec
push
sbb
popa
imul
lds
test
into
ret
push
out
mov
xchg
xchg
bound
rcl
jnp
pop
lahf
cmc
cs
in
les
call
(bad)
push
inc
nop
not
inc
dec
xchg
xchg
dec
leave
cmp
int3
mov
dec
stos
test
jno
mov
inc
bound
fist
or
mov
test
cmp
cmps
rep
aaa
stos
fwait
ds
jne
clc
aas
nop
ins
inc
mov
xchg
pop
sti
and
in
or
les
in
ret
and
cmc
in
das
lods
pop
cmp
mov
fsubr
xlat
cli
nop
or
mov
or
cmp
bound
push
mov
xchg
dec
cwde
call
jmp
jp
ret
add
mov
pop
loopne
int3
mov
prefetch
(bad)
and
dec
arpl
movs
call
xchg
ds
mov
je
add
and
push
adc
xchg
adc
mov
and
xlat
leave
fwait
scas
jg
std
iret
mov
pushf
mov
sbb
pop
mov
icebp
sbb
or
test
repz
in
in
jmp
mov
xchg
xchg
xor
dec
mov
cs
add
xchg
bound
xchg
push
in
inc
push
loope
push
test
scas
mov
jns
mov
inc
or
pop
rcr
mov
sahf
mov
bound
scas
in
or
fstp
aad
pop
movd
mov
pop
sbb
in
je
mov
dec
push
xchg
shr
bound
push
cmps
pop
inc
fcmovnbe
xchg
repz
push
and
dec
cmp
sub
ss
or
pop
xchg
movs
iret
lock
jg
aad
clc
outs
add
fadd
clc
into
mov
add
ins
jp
mov
popf
mov
mov
js
iret
cli
iret
sbb
test
push
jbe
cmp
ds
cmp
lahf
fsubr
mov
or
aaa
hlt
popf
mov
mov
mov
and
lock
cmp
fcom
ins
mov
mov
retf
mov
aam
aas
leave
xchg
call
mov
push
and
cmp
cmp
inc
inc
pop
scas
mov
sub
jp
add
and
nop
add
mov
repnz
stc
loop
pop
lock
push
or
out
lods
(bad)
and
in
lahf
inc
dec
retf
sbb
xlat
loop
(bad)
aas
and
shl
loopne
or
inc
(bad)
loop
and
sbb
leave
fimul
clc
mov
test
(bad)
push
add
call
adc
pusha
sub
cld
dec
ins
das
pop
or
lods
mov
repnz
shl
xchg
adc
jecxz
ins
je
loop
mov
test
lahf
push
push
clc
loop
mov
sbb
scas
mov
or
std
xlat
push
nop
jl
popa
xor
push
or
sbb
sbb
fist
cmp
retf
fcomp
mov
push
sbb
jle
js
(bad)
xor
sub
inc
dec
ins
pop
sub
fsubr
sub
mov
fdiv
mov
(bad)
mov
test
push
sbb
mov
xor
xchg
adc
adc
mov
aad
loop
adc
cmps
fild
pop
mov
jmp
or
mov
retf
and
xor
ins
mov
push
xchg
sbb
stc
sub
popf
(bad)
dec
int3
push
mov
jle
adc
daa
test
in
mov
mov
cmp
jnp
imul
in
test
in
sbb
out
jecxz
xor
xor
aam
enter
movs
sub
fdivr
pop
sub
retf
loopne
and
out
out
lods
xor
(bad)
shr
jno
push
or
leave
outs
movs
push
jg
cld
out
lods
cld
inc
bsf
js
ror
xor
push
xchg
dec
dec
fst
xchg
es
repnz
lea
and
pop
sub
mov
loop
mul
push
adc
jecxz
push
mul
enter
xor
test
outs
cld
retf
imul
mov
ja
cmp
scas
sbb
scas
cmp
fisub
jle
adc
popa
push
push
jnp
xchg
adc
aas
inc
jnp
mov
mov
fisub
inc
add
push
ins
sahf
mov
cmp
stos
call
icebp
in
mov
es
and
sar
jnp
mov
std
mov
and
loopne
inc
sbb
cmp
movs
(bad)
mov
cmps
xor
and
aam
clc
outs
sbb
into
jbe
mov
mov
ins
or
sbb
sahf
xor
lds
std
sbb
stos
(bad)
dec
adc
je
adc
jle
xchg
cmp
push
add
mov
sub
fwait
in
popa
sbb
push
push
jp
inc
stos
stos
push
inc
repz
jmp
xchg
push
movs
mov
addr16
dec
out
cmp
cdq
call
pop
lds
push
sbb
repz
mov
stc
arpl
call
xchg
lds
mov
stc
add
loopne
mov
mov
lods
and
inc
sub
fdiv
or
cmp
push
or
sahf
adc
leave
xor
popf
pushf
out
popa
pusha
xor
iret
sbb
aad
sbb
sar
mov
add
jno
test
or
sub
jo
mov
cmp
gs
mov
ins
adc
mov
xchg
mov
add
pop
sub
sub
jmp
and
stos
test
mov
movs
mov
and
adc
fnstenv
adc
cwde
xchg
inc
cs
or
push
dec
jecxz
jmp
add
sahf
std
jp
bound
fnstsw
xchg
add
loop
dec
movups
popa
ja
push
ficomp
in
inc
dec
dec
int3
into
loope
outs
mov
inc
je
add
jno
ret
mov
in
stc
(bad)
dec
in
and
dec
mov
ins
rep
inc
test
loopne
add
inc
and
repz
mov
sub
in
jle
mov
sub
pop
mov
pop
xor
push
(bad)
lds
dec
fidiv
arpl
shr
popf
movs
inc
ss
out
mov
xchg
dec
mov
sub
mov
sub
pop
cmp
or
movs
fdiv
(bad)
xchg
ret
stc
mov
jle
aas
or
fnstcw
loope
jp
xchg
mov
repnz
jmp
imul
arpl
cmp
sahf
push
mov
fst
nop
mov
ins
inc
pop
repz
sub
xchg
ret
push
das
add
jmp
jae
and
cmp
in
mov
jmp
js
shl
mov
jbe
loopne
inc
test
push
sahf
push
push
aam
in
mov
jnp
or
jle
jmp
mov
jbe
adc
mov
nop
dec
jne
test
jmp
loope
lahf
or
(bad)
out
hlt
sub
push
sbb
jecxz
mov
fimul
sbb
clc
into
cmp
movs
xlat
loop
adc
pop
mov
inc
pop
sub
out
mov
arpl
adc
sbb
sbb
inc
out
or
mul
mov
aas
leave
scas
movs
cwde
(bad)
outs
pop
test
inc
inc
sti
pop
pop
es
ins
jns
sar
repz
(bad)
adc
std
loopne
push
loopne
xchg
mov
mov
or
and
xchg
or
and
cdq
adc
add
push
push
push
sbb
mov
push
jge
jge
pop
xchg
lds
arpl
rcl
(bad)
clc
inc
loop
and
mov
pushf
mov
ret
xchg
jbe
fisub
repnz
lea
dec
bound
stos
dec
lods
cmps
push
stos
int
or
push
jmp
push
rol
in
pushf
fs
sub
sahf
or
imul
mov
test
imul
mov
push
ds
int3
test
sub
out
pop
scas
xor
xor
repnz
mov
shl
xor
jecxz
push
cdq
(bad)
jmp
inc
(bad)
xchg
(bad)
mov
jge
jp
(bad)
aaa
(bad)
fnstsw
sbb
dec
adc
cmp
mov
cmp
ret
jns
add
push
xchg
cmp
inc
dec
xchg
pop
shr
jbe
push
enter
cmps
cmp
ret
jns
pop
xchg
sbb
lods
ins
pop
jle
lods
add
push
jg
xor
loope
mov
lea
push
sti
jg
pop
mov
inc
out
lock
dec
dec
mov
arpl
sahf
inc
xor
xchg
or
addr16
lahf
daa
lods
cmp
cmp
pop
lods
dec
shl
popf
test
and
pop
aaa
outs
js
ret
inc
mov
xor
xor
dec
jecxz
mov
stos
push
ret
cmps
mov
mov
repz
lods
int
mov
lock
fnstsw
out
lock
sbb
(bad)
popa
sub
cdq
and
lahf
and
outs
xchg
xchg
push
daa
mov
and
sbb
push
cmc
les
cld
add
mov
hlt
repz
out
mov
fadd
or
xor
xchg
dec
fdivr
das
ins
cmp
enter
test
pushf
sub
test
stos
and
jne
push
push
or
shl
(bad)
sti
or
dec
xchg
jb
push
xchg
out
fsub
int3
mov
js
enter
jns
je
pop
test
sub
adc
fcomp
lock
push
outs
test
push
gs
int
and
test
mov
ret
arpl
and
popf
sub
xchg
js
dec
cmp
pop
push
cwde
mov
or
sti
jg
dec
or
loop
(bad)
push
mov
outs
mov
cmps
sar
pushf
jmp
sbb
mov
adc
mov
jmp
sbb
add
popf
xchg
bound
mov
fbld
add
dec
lahf
dec
cmp
scas
mov
mov
mov
xchg
adc
lods
sub
add
gs
in
sti
scas
sbb
xchg
clc
xchg
adc
call
sahf
ss
(bad)
ss
cdq
cwde
xor
cli
ret
loope
or
jnp
xchg
arpl
mov
xchg
fcomp
jmp
mov
data16
jmp
fs
fcom
ds
out
push
mov
js
or
lock
jle
stos
mov
push
sub
mov
inc
pop
aad
sub
movs
(bad)
sub
push
movs
pop
lahf
stos
and
adc
mov
in
seto
retf
(bad)
jecxz
mov
loop
out
and
jmp
xor
mov
rcr
(bad)
(bad)
mov
int3
lahf
mov
add
stos
imul
sbb
ret
aaa
pop
or
push
fmul
mov
retf
sbb
jge
push
xchg
leave
inc
adc
mov
out
add
ds
push
or
jl
pop
test
push
xchg
cmp
lods
xlat
cmp
push
bound
test
fld
enter
out
cmps
(bad)
aam
push
inc
mov
ud2
loop
inc
adc
loopne
not
sbb
leave
call
mov
inc
outs
call
(bad)
adc
mov
inc
sub
mov
inc
inc
mov
(bad)
mov
and
xor
fdivr
rcl
pop
pop
sub
arpl
or
and
clc
imul
mov
mov
pop
sbb
movs
or
pusha
and
movs
aas
test
mov
retf
sbb
mov
push
mov
pop
mov
popa
std
inc
push
mov
cmp
call
inc
ins
fcom
ins
sub
ret
int
inc
clc
xchg
mov
pop
pop
sti
shl
inc
retf
(bad)
cmp
xor
movs
clc
or
pushf
and
cmps
sub
(bad)
(bad)
ja
bound
or
test
sub
mov
push
ins
imul
outs
xchg
cmp
scas
jg
hlt
jmp
in
dec
pop
ins
jmp
adc
cli
clc
imul
lahf
imul
stos
(bad)
leave
fwait
adc
mov
inc
pop
push
aam
jmp
push
test
or
inc
out
sbb
sti
out
and
cmc
jne
push
inc
aas
data16
div
pop
dec
loopne
and
cmp
js
inc
mov
mov
jo
cmp
add
mov
xchg
(bad)
shl
push
cld
pop
sbb
pop
leave
add
in
sub
mov
cmp
adc
call
imul
or
push
daa
push
mov
fwait
sub
mov
lock
xchg
cld
xchg
mov
adc
push
inc
adc
or
mov
je
(bad)
arpl
ins
xchg
out
nop
sbb
jne
loope
pushf
outs
dec
push
cmp
jge
data16
ret
or
pop
inc
in
cmps
add
hlt
jns
vxorps
mov
sub
xchg
xor
sti
sub
push
je
or
jmp
sbb
aam
pop
dec
out
mov
into
cdq
cwde
aas
sbb
pushf
or
pop
popa
cmps
cmp
popa
nop
fadd
sbb
clc
and
shl
push
cmp
sti
or
addr16
lds
in
in
push
fld
push
cmc
adc
scas
or
movs
int
jecxz
gs
loope
push
sub
(bad)
aad
add
(bad)
mov
push
lahf
and
adc
movs
mov
idiv
cmc
test
dec
cld
or
fst
aas
sub
mov
mov
cmp
xchg
mov
add
out
aad
repz
fmul
aam
ds
test
jge
adc
pop
pushf
pop
pop
add
or
or
fld
ss
xor
into
inc
retf
rcr
cmp
xchg
cmps
push
mov
or
xlat
mov
sbb
pushf
out
sub
loopne
mov
cmp
mov
dec
mov
push
add
pop
fwait
sub
xor
aas
enter
mov
or
ret
mov
in
ror
jae
add
mov
outs
mov
fild
dec
movs
sti
jge
mov
add
dec
sbb
and
fwait
xchg
and
jno
fwait
outs
cs
push
aas
or
cmp
out
(bad)
jl
mov
cmp
mov
jmp
gs
imul
lods
lock
push
sub
inc
mov
dec
xor
loopne
or
xchg
rcl
mov
cmp
inc
pop
inc
repz
sub
xchg
mov
or
or
not
out
scas
push
dec
cmc
jmp
inc
mov
sbb
jnp
sub
lahf
addr16
and
lahf
xchg
loop
ins
dec
sub
sub
cmp
scas
cld
sbb
and
mov
mov
inc
dec
inc
fidiv
jg
push
stos
push
jl
imul
or
xchg
jg
jno
add
xchg
xor
add
mov
add
js
inc
sbb
popf
retf
lods
pop
es
mov
stos
stos
xor
xor
lea
stos
call
stos
ds
mov
ja
jmp
jecxz
cmp
mov
std
aaa
jl
sub
cmp
addr16
div
fdivp
ja
hlt
dec
sti
push
ds
aad
mov
out
popa
and
pop
pop
fs
add
and
std
test
int3
test
sub
xchg
xchg
out
add
sub
dec
or
or
out
cmp
xor
shr
push
rep
push
loop
mul
add
jno
add
movs
cmp
mov
add
xor
test
clc
clc
cmc
outs
push
pushf
or
xchg
mov
push
jmp
inc
mov
out
data16
mov
retf
pop
jnp
scas
cmc
mov
es
xchg
adc
inc
(bad)
dec
aaa
add
dec
cmps
inc
sub
sar
jge
dec
in
mov
stos
(bad)
mov
(bad)
call
(bad)
pop
imul
leave
inc
or
mov
xor
inc
leave
lahf
imul
(bad)
push
movs
pusha
rol
jmp
sti
pop
retf
mov
sub
ds
bound
out
leave
mov
sti
cmp
mov
loope
jmp
push
adc
mov
test
iret
test
push
int3
dec
push
push
xchg
sub
ss
scas
lds
es
fwait
loopne
cmp
daa
int
movs
and
hlt
push
cmp
jle
(bad)
inc
aas
lds
test
push
add
inc
jbe
xor
xor
and
scas
mov
adc
or
iret
inc
mov
xchg
jl
(bad)
cmp
jmp
jmp
pop
sbb
cwde
int3
stc
scas
push
aad
mov
mov
(bad)
retf
cmp
inc
imul
jl
adc
gs
mov
out
fstp
ret
mov
in
and
jecxz
in
jmp
inc
es
(bad)
cmp
gs
push
mov
les
dec
xor
cmp
mov
pushf
jb
shl
mov
inc
movs
sub
add
xlat
jecxz
jo
inc
mov
ret
(bad)
fsubr
inc
or
das
xchg
retf
stc
xor
pusha
jl
(bad)
sar
jp
add
sub
mov
shl
mov
addr16
mov
ret
mov
xor
sbb
pop
and
ins
into
nop
dec
outs
es
dec
(bad)
mov
call
push
sar
mov
adc
sahf
inc
ror
dec
inc
mov
and
mov
es
xchg
jnp
adc
inc
push
repz
push
pop
cmc
call
sbb
mov
in
arpl
cwde
inc
out
adc
shr
xor
or
fnstenv
popf
jnp
js
sub
push
mov
pop
out
aaa
inc
cmp
mov
aam
fidivr
imul
mov
or
pop
out
sub
outs
in
(bad)
adc
jge
and
mov
pop
push
into
pop
ret
sub
(bad)
adc
dec
ret
add
add
push
push
daa
iret
fwait
repz
cld
push
aam
pusha
xor
jnp
js
xchg
push
arpl
div
imul
pusha
xor
and
cs
xchg
cmps
jle
sub
fldcw
test
test
jno
ss
and
jle
jle
je
addr16
mov
mov
jo
cmp
(bad)
pop
inc
test
pop
dec
mov
xchg
push
mov
add
pop
mov
jge
shl
sub
push
jp
jns
mov
pushf
mov
out
jnp
pop
cmps
xor
retf
jg
dec
add
test
call
push
cs
aaa
push
or
out
pop
and
pop
pop
mov
lods
inc
icebp
dec
sub
dec
retf
sbb
cmp
(bad)
popa
stos
xor
adc
ud0
mov
fild
sub
movs
pop
ja
in
sub
out
test
out
enter
popa
mov
bound
push
imul
push
aam
fild
int3
or
and
mov
mov
retf
out
jecxz
push
mov
xor
push
es
cmps
lods
jmp
outs
pop
jge
cmp
dec
mov
fs
mov
leave
test
dec
adc
sub
sub
cmp
xor
push
adc
jmp
pop
jle
daa
mov
push
arpl
out
into
fdiv
inc
(bad)
xchg
das
ret
add
repnz
fild
addr16
ret
push
xor
jmp
push
mov
inc
scas
jle
call
push
or
push
mov
sbb
and
xchg
lahf
pushw
mov
pop
dec
outs
xor
jb
loop
adc
mov
jne
add
mov
add
call
lea
fcom
sbb
nop
cld
fdivr
push
cmp
sbb
iret
xor
in
mov
sahf
dec
dec
dec
out
jl
icebp
sub
es
ret
jno
retf
xchg
push
add
movs
dec
dec
mov
push
cmps
xchg
mov
in
test
sbb
call
(bad)
and
lods
cli
ins
jmp
cmps
das
cmp
jge
out
ret
adc
jmp
int
adc
mov
push
xor
retf
retf
in
stos
movs
inc
or
nop
mov
sti
inc
call
and
mov
popf
pop
dec
jle
adc
adc
jp
sub
cmp
mov
inc
cmp
push
aas
(bad)
sbb
daa
loop
hlt
ret
loop
xor
mov
mov
retf
dec
fsubr
jne
rol
imul
es
push
retf
test
stos
(bad)
xchg
add
and
cmp
test
fidivr
pop
in
sar
call
repz
adc
mov
dec
pop
mov
and
repz
add
jecxz
dec
call
scas
mov
cld
adc
xor
ret
mov
mov
arpl
mov
jp
loop
cli
or
mov
jb
jg
mov
cmps
sub
or
sti
repnz
mov
fst
in
cmc
inc
cs
mov
jno
jns
hlt
jmp
mov
and
cli
mov
loop
std
cmps
cmp
loope
pop
mov
rcr
mov
dec
pop
les
stos
and
push
retf
out
enter
pop
dec
cmp
or
in
retf
sbb
fstp
pushf
or
or
pop
dec
add
mov
int3
pop
sbb
or
std
pushf
shl
lds
sbb
hlt
sbb
in
cdq
jecxz
and
out
pop
inc
fdiv
dec
es
dec
test
stos
test
add
mov
fbld
or
dec
sbb
pop
dec
adc
idiv
mov
push
push
mov
jmp
push
mov
fstp
repnz
push
cmps
dec
cmc
test
jmp
mov
fdiv
movs
xor
sahf
push
dec
xor
push
mov
(bad)
jbe
and
jnp
and
(bad)
push
pop
lds
fidivr
ins
push
xor
cmp
or
inc
in
stos
mov
mov
jno
stos
in
stos
xor
das
movs
mov
cmp
cmc
cmp
test
retf
fldz
xor
lods
bound
out
scas
add
mov
retf
mov
sahf
shl
xchg
and
add
jmp
jmp
into
cwde
pop
stos
and
push
jecxz
xlat
lock
movs
fldcw
or
lods
mov
jns
xor
mov
mov
fist
std
stc
sub
stos
out
aam
or
jle
push
dec
stos
xchg
leave
inc
sbb
mov
sub
sbb
pop
pop
imul
xor
jl
dec
sti
xor
jg
popf
lds
jle
stos
adc
sub
adc
inc
or
xchg
(bad)
icebp
push
loope
out
push
mov
push
outs
pushf
adc
(bad)
cmps
shl
push
push
je
jae
test
push
cmp
pop
mov
mov
in
mov
mov
(bad)
lds
packsswb
call
ret
jnp
sub
outs
lahf
dec
rcr
(bad)
fbstp
sub
push
cmp
loope
rol
push
ins
je
xor
jl
shl
(bad)
popf
jle
mov
aam
xchg
cdq
cmp
inc
cmp
imul
dec
cs
inc
rol
cmp
xchg
jns
(bad)
lods
push
adc
inc
ds
mov
dec
addr16
popf
shl
xchg
loope
cmps
cmps
(bad)
and
shr
daa
xchg
jle
jo
sub
pop
mov
xchg
retf
and
xor
xchg
mov
retf
add
dec
in
push
iret
jle
pop
icebp
add
dec
dec
fild
cli
xor
je
jae
int
gs
fidiv
repnz
jb
imul
icebp
cmp
mov
aaa
sub
ret
add
aaa
test
mov
ret
dec
dec
cdq
jnp
pop
cmc
sub
push
and
xchg
adc
sbb
cmp
cld
rol
xor
and
test
push
mov
push
ror
lahf
out
dec
mov
lods
mov
pop
stos
loop
adc
hlt
lods
and
mov
jns
retf
jp
inc
xchg
mov
jmp
push
(bad)
(bad)
xchg
repnz
jmp
xchg
movs
aaa
push
int3
and
pop
xor
rcr
icebp
cmp
(bad)
dec
sbb
movs
sahf
bsr
popf
daa
movs
fistp
adc
pop
sub
mov
pop
and
ficom
or
pushf
int3
call
sbb
push
fsubr
sub
cmps
dec
and
jl
std
ret
imul
mov
jmp
mov
sbb
mov
xor
xor
fisttp
cdq
mov
aaa
mov
fdiv
xchg
ins
xor
aad
repz
jne
(bad)
fwait
xchg
jmp
(bad)
ret
addr16
mov
sub
xchg
mov
clc
imul
sbb
or
xor
imul
push
inc
cmp
ja
daa
inc
mov
mov
sbb
push
jg
mov
mov
sbb
or
fwait
sub
mov
jno
xchg
repnz
mov
mov
add
cs
(bad)
xor
fptan
shl
dec
fsub
popa
or
cld
mov
icebp
cmp
jnp
out
movs
inc
mov
sahf
jbe
inc
mov
sub
cmps
sbb
ud2
xor
cmps
xchg
mov
push
mov
inc
loopne
adc
lods
repnz
add
mov
shr
mov
jge
and
jae
loopne
xor
inc
cmp
pop
xchg
daa
movs
push
xor
xchg
xchg
test
or
or
pop
test
sub
in
inc
aas
and
xor
lods
dec
(bad)
adc
je
pop
inc
xor
or
sub
pop
aaa
int
adc
imul
push
cld
and
jl
les
mov
mov
or
and
cmps
sahf
aad
add
cmp
test
jne
push
cmp
std
sbb
adc
ffreep
or
enter
in
pop
cmp
test
lds
loopne
add
call
mov
and
fnsave
rcr
pop
xchg
out
sbb
jl
inc
cmp
add
xor
and
das
sbb
cld
cmc
fimul
in
lock
and
xchg
cmp
retf
jb
sbb
outs
movs
sahf
mov
adc
jp
neg
ins
or
inc
sbb
mov
out
jg
lods
imul
ss
das
in
jo
pop
cwde
cli
dec
(bad)
cmp
les
repnz
adc
movs
(bad)
outs
mov
dec
scas
iret
test
mov
pop
add
(bad)
stos
daa
mov
das
and
fdivrp
jbe
sbb
out
(bad)
aad
add
ret
xchg
(bad)
int3
push
xor
inc
nop
stos
lods
(bad)
out
cmp
inc
mov
or
sbb
fcmovnbe
push
jmp
adc
icebp
xchg
movs
inc
or
pop
ret
sbb
sub
mov
mov
pushf
aad
adc
test
ror
retf
pop
cmp
xor
pop
fidivr
call
popf
in
pop
mov
mov
call
fstp
inc
test
push
inc
jb
inc
sar
test
push
cmp
test
inc
stos
push
push
and
stos
push
je
push
jmp
mov
mov
xor
nop
scas
outs
test
stos
mov
rcl
add
jmp
cs
xor
ss
sub
cmp
adc
xor
xchg
scas
sbb
(bad)
in
mov
test
jnp
(bad)
sahf
les
sahf
and
xor
xlat
ret
hlt
mov
jns
fstp
ss
lds
push
outs
adc
sub
out
rol
adc
mov
retf
xchg
push
retf
int3
hlt
aaa
fnsave
mov
push
cli
cmp
mov
sbb
test
adc
in
fstp
add
stc
jmp
dec
dec
push
mov
pop
hlt
add
inc
movs
fisttp
std
inc
and
sub
cmp
gs
cmp
push
sar
enter
xchg
cmp
fbld
adc
xor
cli
hlt
out
ret
dec
enter
cdq
leave
cwde
push
or
add
adc
out
jo
iret
sub
push
xchg
adc
mov
nop
test
xchg
and
and
mov
call
mov
cmp
cmp
push
mov
cs
mov
cli
(bad)
and
jmp
mov
(bad)
xchg
xor
and
pop
mov
stc
out
mov
rol
sbb
fidivr
jmp
dec
fadd
test
ret
jmp
pusha
xchg
adc
xchg
jmp
test
sti
cmp
enter
sbb
or
out
mov
cld
sti
in
dec
pop
or
mov
sub
idiv
enter
cmps
xor
jnp
rcr
jnp
jmp
mov
cmp
imul
data16
jecxz
int3
push
and
sbb
and
dec
enter
cwde
sub
ja
rcl
xchg
clc
fisttp
cmp
hlt
mov
mov
aas
xchg
stos
mov
mov
push
sub
wrmsr
test
cmp
clc
mov
ins
(bad)
(bad)
shl
sbb
sub
mov
sbb
xor
cdq
(bad)
pop
and
lea
fs
ins
xor
inc
add
addr16
cmp
or
ja
or
mov
adc
pop
xchg
jb
adc
int3
outs
es
jl
stc
sub
shl
out
sahf
push
int3
call
data16
xchg
xchg
cmps
dec
fistp
movs
mov
fwait
lea
aaa
fdiv
fist
int
push
jbe
add
mov
add
adc
pop
lds
push
jle
xor
xchg
and
call
xchg
pushf
mov
out
aas
xchg
pop
and
loope
loop
cli
inc
test
jno
sub
sbb
inc
push
sar
rcl
xor
data16
in
popa
jmp
in
mov
mov
inc
mov
lock
and
mov
jo
popa
and
outs
retf
push
mov
push
or
(bad)
mov
mov
dec
xchg
(bad)
and
push
xchg
cmc
cs
(bad)
arpl
xchg
retf
xchg
ins
int
ins
jnp
sbb
sbb
test
mov
in
imul
push
rcr
call
aad
sub
xchg
jnp
aas
leave
inc
sub
or
xor
and
xor
imul
enter
push
mov
repnz
mov
mov
les
stos
xchg
xchg
outs
jp
xchg
xchg
pop
test
dec
cmp
div
cmc
fst
jns
bound
jecxz
adc
loop
out
jbe
xchg
imul
xor
stc
aaa
add
mov
mov
mov
arpl
sub
xor
into
inc
ins
in
mov
test
jmp
adc
out
push
pop
in
xchg
jo
push
and
aaa
cmps
push
es
mov
xchg
push
jno
add
cmps
mov
fdivrp
and
ss
nop
add
repnz
xchg
xchg
out
xchg
xchg
stos
cmp
arpl
cmp
aam
inc
mov
xchg
fs
adc
xchg
pop
data16
push
xor
mov
sub
pop
cmp
out
inc
inc
jb
mov
jo
pushf
movs
add
fbstp
shr
loopne
fistp
and
ds
fild
mov
(bad)
gs
fwait
call
dec
inc
xor
lods
fimul
in
fbstp
aam
push
das
mov
or
(bad)
sbb
retf
in
je
jp
dec
cli
mov
add
push
das
sub
fsub
adc
sti
aaa
test
out
and
scas
loop
ins
aam
mov
sub
pop
jl
mov
shl
ret
dec
mov
xchg
movzx
add
int3
add
cmp
std
retf
mov
jne
or
jb
clc
retf
cmp
repz
dec
xchg
(bad)
test
mov
outs
mov
fidiv
mov
div
imul
pop
xchg
fnstenv
and
aad
mov
popa
mov
test
or
jmp
inc
fwait
mov
push
dec
inc
mov
mov
xchg
jge
jnp
int3
cmps
pushf
pop
inc
mov
mov
and
cwde
push
ret
leave
jecxz
pop
inc
dec
(bad)
jmp
dec
xlat
pop
mov
or
add
fcom
loope
lds
cmp
movs
nop
sub
cli
(bad)
pop
enter
arpl
fwait
xor
int3
pop
popf
arpl
cmc
out
ja
clc
jecxz
mov
stos
js
add
add
push
inc
pop
test
and
jno
iret
mov
fnstsw
mov
mov
pop
aad
sub
clc
sub
adc
mov
mov
fs
mov
sub
aas
(bad)
sahf
pop
(bad)
inc
sub
icebp
cmp
and
stos
or
push
xchg
pop
imul
mov
inc
xchg
fmul
jns
xor
pop
pop
hlt
ficomp
cmp
pop
mov
out
dec
inc
push
jmp
cwde
mov
jg
sbb
fmul
mov
mov
cwde
mov
mov
pop
sub
lods
sti
fwait
loopne
bound
jns
pop
fiadd
ja
loopne
rol
push
dec
retf
push
jle
je
shl
or
mov
mov
add
add
xchg
std
jge
outs
jne
dec
jle
in
push
fs
les
pop
mov
add
enter
fisttp
stos
xchg
push
jmp
or
jmp
stc
mov
call
ret
mov
adc
mov
out
mov
and
in
mov
ret
dec
fdivr
mov
cmc
sbb
mov
pop
gs
xchg
fldenv
push
test
shl
into
call
and
xchg
sub
mov
sti
dec
xor
cmp
gs
loope
es
ins
aad
(bad)
leave
dec
add
mov
(bad)
pop
imul
in
(bad)
call
call
or
fidivr
mov
adc
cmp
rcl
adc
pop
lods
fwait
sbb
adc
popa
xlat
(bad)
xchg
fild
lahf
sahf
adc
or
leave
cli
mov
cs
stos
xchg
jb
leave
add
dec
sub
out
rol
fisub
xchg
enter
lock
cli
and
mov
shl
call
cmps
push
push
dec
cmp
dec
repnz
mov
sahf
push
cmp
sub
mov
test
cmp
mov
aam
cmp
adc
cmp
aad
leave
jmp
call
dec
dec
xor
(bad)
cmc
sub
xor
test
push
jp
arpl
fisub
out
xor
inc
retf
loop
sar
cmp
addr16
pop
mov
mov
xchg
cmc
mov
push
fistp
cs
loop
and
enter
jo
mov
das
loope
fwait
xchg
aas
mov
inc
inc
mov
ja
mov
call
jge
fidivr
inc
add
fldcw
ficom
sub
cmp
out
js
stc
cmp
cwde
sahf
data16
jge
mov
jge
(bad)
std
pusha
inc
outs
sbb
aad
mov
daa
xchg
dec
in
mov
xchg
call
mov
pop
sub
movs
(bad)
pop
jmp
inc
or
sbb
ret
push
mov
xchg
inc
mov
jne
mov
sbb
pop
fwait
aaa
mov
jp
push
adc
add
pop
inc
daa
push
add
mov
adc
ins
icebp
push
pop
add
mov
int3
mov
inc
and
ret
ret
stos
fisubr
mov
fst
cmp
(bad)
adc
mov
adc
mov
outs
sbb
sub
jecxz
lahf
xor
data16
xchg
xchg
mov
add
rol
push
rcl
xchg
stos
mov
xchg
jp
push
aam
sbb
idiv
sahf
repz
dec
push
adc
mov
or
adc
cmc
cmps
arpl
lods
cmp
jmp
adc
sub
fcom
xchg
cmp
(bad)
cmps
out
into
jne
retf
in
dec
pop
mov
inc
fsubp
(bad)
loopne
mov
jle
mov
inc
add
dec
xor
mov
jnp
push
shr
nop
out
test
sbb
or
jnp
movs
sahf
rcr
out
pop
sar
ds
fs
add
mov
stos
pusha
repz
mov
mov
aaa
push
cmps
out
push
adc
sar
jnp
or
pop
pop
cmps
pop
ror
add
adc
or
fsubr
adc
sub
push
sub
aas
les
push
mov
cmp
jmp
pop
dec
inc
pusha
fmul
lds
pop
repnz
gs
sbb
repnz
pop
mov
retf
push
mov
rcr
add
or
dec
stos
inc
xor
mov
push
pusha
sbb
add
test
fisttp
inc
test
push
(bad)
cmc
div
stos
xor
aas
movs
sbb
test
mov
jp
lahf
mov
(bad)
push
pusha
mov
das
mov
pusha
pop
push
aas
xor
ins
cmps
mov
mov
xor
std
in
cmp
mov
in
fcom
mov
adc
leave
add
sub
add
xor
out
xchg
and
xchg
loop
sub
in
mov
dec
ds
sbb
dec
xor
adc
push
icebp
icebp
xchg
cli
cmps
(bad)
ret
sbb
call
sub
add
push
lock
mov
cmp
icebp
mov
imul
mov
xor
and
sub
imul
inc
imul
hlt
aaa
in
pusha
scas
sub
sbb
sub
cmps
fst
jmp
sub
leave
adc
call
or
cmp
call
sbb
mov
mov
jp
cmc
in
icebp
adc
inc
jbe
jg
ret
or
dec
jne
mov
std
out
mov
pop
movs
or
push
movs
push
ror
les
sbb
test
jb
ret
pop
bound
fmul
iret
lods
xchg
retf
push
je
cmp
lar
stc
lds
mov
std
sub
pop
and
retf
jo
(bad)
mov
mov
loop
and
inc
movs
(bad)
je
fbstp
mov
push
jno
pop
scas
xor
jecxz
mov
add
pop
push
mov
jo
mov
pop
scas
jno
clc
mov
ficom
cmps
cld
movs
pop
imul
dec
push
les
hlt
mov
rol
dec
cmp
jle
call
mov
repnz
pop
sub
mov
dec
sub
sub
loope
ins
repz
add
adc
(bad)
leave
cwde
sahf
arpl
adc
dec
sbb
cmp
ret
cmp
sub
dec
inc
div
mov
rol
repz
xchg
push
stc
inc
jmp
mov
daa
retf
fdivr
mov
retf
sbb
or
mov
les
cdq
pop
loopne
inc
cmps
jmp
repnz
sub
sbb
xchg
pop
mov
or
fild
xchg
out
stos
popa
ficomp
xor
repnz
rol
fidiv
xchg
(bad)
dec
mov
push
adc
ret
pop
je
out
sbb
sahf
in
sbb
jmp
sti
adc
retf
push
rep
xchg
inc
mov
iret
mov
aaa
addr16
pushf
jmp
call
or
and
ror
je
xchg
(bad)
fs
xchg
fdivr
bound
mov
xchg
int3
ds
jb
xchg
jp
inc
ficomp
out
scas
les
loopne
pushf
lahf
adc
adc
mov
sbb
xor
mov
loop
sub
cmp
lea
jb
jb
mov
pop
mov
jg
out
xchg
mov
sar
jle
and
ror
jl
sar
mov
mov
fistp
repz
mov
xchg
xchg
and
test
ror
ficom
xchg
adc
or
shl
push
or
out
test
clc
mov
loope
(bad)
push
cmp
sub
jae
imul
inc
js
sub
jbe
xchg
shl
daa
adc
fsub
add
jmp
test
test
fmul
loope
jl
iret
loopne
pop
(bad)
fistp
sti
pop
loope
or
movs
cli
aad
add
push
popa
mov
sti
in
push
inc
les
mov
cmp
test
popa
movs
int3
cdq
int
aam
jl
sbb
loop
inc
push
lahf
sbb
push
push
iret
sbb
out
mov
dec
xchg
pop
imul
movs
loopne
jo
rol
shl
sub
mov
pop
and
gs
aaa
fld
in
inc
xchg
jg
push
les
mov
loop
lods
cs
sbb
pusha
sar
inc
test
mov
xchg
inc
add
cmp
push
pop
push
cwde
rcl
and
xchg
push
adc
jmp
mov
lds
pop
pop
sbb
sbb
(bad)
cmp
enter
inc
sar
int3
sub
adc
adc
std
push
call
adc
and
popf
dec
sub
inc
ror
bnd
ret
test
inc
jbe
xor
sahf
dec
out
mov
push
shl
test
add
mov
retf
lea
nop
inc
xchg
xor
retf
xchg
add
stc
mov
ss
mov
fwait
imul
or
out
push
outs
push
mov
add
mov
inc
ja
mov
adc
xchg
je
inc
outs
rcl
stos
jno
ja
shl
movs
xchg
(bad)
js
inc
mov
pop
jge
push
inc
mov
outs
mov
aam
jp
outs
and
mov
imul
out
outs
rol
or
jle
mov
daa
push
dec
cli
rcr
(bad)
shl
xor
push
stos
jg
cmp
xchg
lods
lea
aas
dec
ret
add
push
mov
inc
jge
xchg
mov
mov
inc
ret
outs
adc
xor
popa
push
inc
xchg
ret
ds
cmps
jl
and
cmp
clc
inc
in
cld
scas
jg
data16
jmp
aam
sub
call
movs
mov
in
neg
adc
dec
repz
test
out
cli
sub
jle
fiadd
and
sbb
jge
pcmpeqd
jb
push
jle
out
adc
mov
outs
jge
xor
mov
xchg
aam
cdq
dec
push
xchg
sbb
push
in
pop
outs
jb
out
pop
xor
mov
inc
lods
clc
pushf
popa
inc
inc
mov
inc
(bad)
(bad)
jb
iret
xchg
lahf
ficomp
movs
or
jp
jge
cdq
sub
leave
sub
dec
jge
xchg
mov
push
lods
mov
ficom
aas
sub
mov
mov
mov
dec
call
mov
popf
mov
retf
inc
ss
push
xchg
push
fnstcw
pop
in
jmp
adc
adc
stc
call
push
loope
adc
into
mov
jne
jmp
retf
out
aad
or
add
mov
call
pop
es
repz
xchg
inc
inc
mov
add
aam
push
sbb
loop
cmps
ins
dec
pusha
pop
xor
aad
pop
mov
xor
push
push
and
jp
pusha
ds
or
cmp
jnp
aad
dec
mov
out
test
ror
push
ins
sbb
and
test
pusha
call
push
xchg
xchg
ret
shl
popf
cmp
fisttp
push
mov
cmps
mov
hlt
cmc
cmp
outs
mov
jecxz
push
mov
lds
mov
retf
jecxz
scas
ror
lock
daa
bound
out
aam
ret
hlt
jmp
mov
push
push
rol
rep
adc
mov
mov
jg
(bad)
sub
fstp
jge
sbb
iret
arpl
mov
int3
dec
jge
fstp
jo
jg
(bad)
lods
push
jb
sbb
mov
js
in
lds
push
jecxz
add
xchg
popf
aam
lods
xchg
cmp
test
mov
mov
and
out
xchg
jo
cmp
xchg
mov
retf
in
ret
mov
nop
lods
ret
mov
add
test
sub
sbb
scas
out
mov
mov
mov
test
mov
inc
jb
adc
adc
loop
pushf
add
dec
sahf
ins
jnp
in
sbb
mov
mov
or
movs
stos
sbb
jmp
cs
and
xchg
loope
loop
inc
mov
xchg
jge
out
aad
pop
imul
mul
(bad)
or
in
or
sub
cld
cmps
rol
pop
cld
cs
mov
fsubr
mov
pop
ja
aaa
test
push
and
jp
fwait
jp
add
or
jp
aam
xor
mov
bound
mov
shl
dec
xchg
mov
cli
out
add
repnz
push
inc
retf
mov
push
or
push
mov
jo
fsub
mov
dec
push
stos
sbb
sahf
cld
repz
xchg
sub
add
call
mov
ret
test
loop
pop
add
xchg
push
call
in
ss
xchg
cmp
clc
push
fisttp
push
ds
jle
psubsw
push
add
fisubr
jne
pop
pop
(bad)
mov
fcmovnbe
cmp
or
ja
cmc
pop
nop
fild
push
push
sbb
jae
mov
clc
aaa
(bad)
cmp
mov
js
je
jns
(bad)
push
mov
push
xor
inc
retf
jp
shr
hlt
cmp
mov
outs
and
and
repz
or
adc
lea
jecxz
sti
pop
inc
shl
loope
sbb
push
jno
inc
fstp
aad
pushf
pop
pop
cmp
xchg
push
mov
cwde
(bad)
mov
ror
pop
cmps
jge
loopne
jmp
and
addr16
retf
repz
leave
sub
mov
lds
ror
or
cdq
iret
adc
aaa
add
loope
inc
inc
mov
mov
scas
jmp
xchg
mov
retf
mov
out
mov
pusha
jge
mov
stos
ins
cmp
or
fisttp
test
call
(bad)
enter
jns
hlt
and
std
dec
jne
fs
enter
mov
pushf
lods
sub
cmp
enter
mov
retf
jae
mov
movs
push
movs
dec
repnz
inc
clc
mov
test
fucom
or
hlt
jmp
mov
cmp
jns
shl
leave
fisttp
sbb
push
in
(bad)
inc
pop
jecxz
repz
mov
mov
pop
(bad)
and
and
daa
cmc
jnp
push
mov
and
sahf
cmps
loopne
leave
sub
movs
pop
jg
adc
mov
mov
xor
mov
gs
pop
out
inc
mov
bound
sahf
inc
adc
je
les
sub
mov
cdq
mov
in
nop
inc
mov
cmp
jl
sub
mov
push
sub
dec
in
aas
sub
cmc
(bad)
(bad)
and
adc
movs
inc
mov
cmps
push
pop
ret
push
fst
and
cli
mov
lods
or
dec
out
(bad)
arpl
add
push
mov
cmp
addr16
scas
pop
test
fidiv
ror
div
inc
mov
xchg
pop
mov
daa
jbe
out
push
(bad)
loopne
mov
xor
in
shr
jp
aas
sub
mov
stos
ins
inc
push
push
loope
jl
into
(bad)
pop
in
rcr
jns
mov
push
into
fcom
mov
addr16
push
push
test
lods
loop
fimul
inc
test
add
jmp
jmp
(bad)
cmp
sar
push
pop
mov
repnz
pop
cmp
fidivr
hlt
add
add
(bad)
cmp
repnz
and
in
leave
nop
mov
add
and
sub
lods
arpl
mov
das
cmp
iret
xchg
jecxz
adc
sbb
pushf
xchg
dec
icebp
or
cmp
div
pop
xchg
jmp
mov
scas
out
mov
div
retf
pop
jo
cmp
cmps
sub
cmp
mov
xchg
lock
mov
fwait
inc
(bad)
(bad)
test
jmp
pop
jmp
mov
add
push
inc
cdq
call
arpl
push
mov
fild
ja
jge
bound
cmp
sbb
std
das
test
aas
jp
dec
aas
scas
cmps
mov
xor
adc
ret
imul
ja
stos
jnp
jns
and
rcr
add
mov
cmp
mov
or
mov
jp
pop
jmp
in
iret
fwait
lods
cmp
imul
inc
dec
outs
aas
icebp
lods
add
jp
bound
loop
ins
or
pusha
(bad)
ret
test
sbb
stos
jmp
inc
cmc
in
mov
fadd
stos
fiadd
cs
xchg
inc
out
xchg
or
sbb
mov
adc
jae
xor
(bad)
mov
popa
das
ja
or
movs
push
mov
in
(bad)
cli
(bad)
in
clc
or
push
mov
mov
adc
xchg
test
stos
fnstcw
sti
inc
pop
test
out
test
(bad)
ja
cs
cmc
jbe
(bad)
stos
pusha
movs
cmps
mov
add
mov
mov
jno
xchg
push
inc
mov
inc
nop
fst
xchg
cdq
mov
ins
or
sahf
in
and
mov
push
push
pop
cld
adc
pop
push
mov
adc
fbstp
and
out
hlt
test
sar
fld
(bad)
(bad)
xchg
add
retf
mov
call
cmp
mov
mov
pop
mov
test
lahf
adc
lahf
xor
aaa
(bad)
or
sub
imul
cmp
nop
inc
dec
jne
shl
cmp
fist
fnstenv
aam
xor
out
dec
inc
inc
jp
sub
jmp
sahf
pop
movs
dec
sbb
push
sub
xchg
jns
sbb
les
fucomip
mov
mov
in
rol
jg
retf
xchg
adc
sbb
add
mov
cmp
iret
daa
out
daa
nop
dec
scas
push
sub
(bad)
test
fdiv
dec
int
arpl
idiv
std
loopne
xor
adc
(bad)
addr16
mov
lds
sbb
jmp
mov
adc
popf
ins
push
xchg
push
xor
mov
test
or
test
stc
jl
jne
sar
repnz
repz
in
adc
into
mov
inc
test
jno
rol
xor
aad
ret
outs
xchg
rcr
popf
out
xchg
push
cmps
cmps
mov
pop
std
mov
cmc
sbb
xor
cs
sbb
dec
movs
call
std
in
cld
test
xchg
das
les
fdivp
pusha
fwait
sar
cmc
push
xor
mov
retf
dec
cs
movs
fimul
in
cld
add
lock
in
and
(bad)
fst
or
sub
dec
cmp
jb
(bad)
(bad)
jnp
daa
(bad)
cmp
shl
pop
stos
adc
leave
dec
dec
jmp
aas
jg
jbe
push
loope
out
push
shl
or
sbb
mov
out
add
ret
repz
adc
mov
daa
loope
mov
mov
ins
xor
retf
sar
mov
adc
in
fidivr
movs
je
add
into
push
mov
pop
push
mov
clc
adc
rcr
popa
or
xchg
mov
fwait
imul
sub
xchg
mov
cs
xor
push
cmp
or
addr16
test
or
cwde
xchg
lahf
ret
push
xlat
or
imul
out
sub
lods
mov
repnz
inc
and
outs
loopne
mov
fxtract
jp
outs
popf
mul
cmps
jle
jns
adc
jae
aas
cmp
pop
fild
inc
into
cmp
in
movs
retf
jl
add
hlt
mov
fst
jb
mov
xchg
mov
hlt
fist
mov
jbe
retf
lods
inc
popa
lods
mov
mov
xor
cmp
pop
jo
imul
or
sub
lock
push
fisttp
sbb
jmp
fistp
and
xlat
fs
mov
mov
cmp
out
fisttp
adc
push
test
ret
cdq
sub
aad
and
pop
fwait
and
sbb
pusha
mov
arpl
shl
call
dec
and
addr16
adc
and
in
out
lods
push
in
das
jnp
push
(bad)
jnp
int3
jmp
lods
ror
hlt
jge
idiv
sbb
inc
sbb
mov
mov
loopne
or
jae
into
mov
sub
sti
pop
mov
sbb
mov
and
jo
shl
aas
adc
retf
jle
popf
jp
das
push
sbb
or
dec
push
or
lock
jg
xchg
outs
add
jle
xor
and
pop
mov
aaa
push
add
popf
sub
popa
out
mov
ret
push
xor
sbb
in
mov
adc
dec
inc
aas
mov
loope
(bad)
adc
jg
xor
outs
mov
inc
push
ds
lea
lea
cmp
mov
clc
mov
xor
pop
xchg
inc
gs
pop
(bad)
frstor
fsubr
rol
fcmovb
into
sub
xchg
add
push
mov
inc
outs
aaa
fstp
add
hlt
or
adc
repnz
ret
pop
aas
mov
cmps
xor
xlat
fstp
dec
xor
jge
add
fwait
arpl
push
test
inc
xchg
scas
inc
pop
inc
cmp
ins
mov
sub
aad
mov
clc
inc
icebp
shl
ret
push
add
dec
icebp
dec
addr16
cmp
cmp
hlt
scas
cmp
test
mov
les
stos
mov
(bad)
jl
adc
clc
call
push
int3
cmp
xor
(bad)
stos
lods
retf
ror
lds
push
xchg
fdivr
arpl
mov
test
push
jmp
mov
mov
fisttp
arpl
test
pop
inc
cmc
push
ja
loope
bound
inc
sub
stc
ret
sti
mov
sub
jno
cdq
sbb
ins
adc
push
(bad)
push
scas
into
lea
push
call
rol
xor
jecxz
push
in
xchg
and
cli
sti
out
in
xlat
push
rcr
sub
out
fmul
mov
cmp
outs
stos
pushf
pop
sub
in
cs
xchg
cmp
inc
imul
mov
jge
mov
jo
mov
call
pusha
pop
push
mov
leave
inc
add
xchg
and
out
(bad)
ret
cmps
sub
mov
xor
mov
and
xchg
push
adc
shr
sub
(bad)
mov
inc
loopne
nop
adc
sub
scas
gs
sub
xchg
fwait
(bad)
out
shl
lock
adc
sti
fwait
sar
scas
(bad)
inc
jge
retf
xchg
es
sbb
out
mov
mov
adc
adc
adc
ret
pop
mov
or
jge
inc
call
xchg
mov
test
mov
push
or
stos
test
xchg
call
into
out
scas
mov
add
ja
mov
push
cmps
mov
imul
xchg
mov
xchg
push
ds
adc
stos
and
call
sub
xchg
rcl
ror
shl
sub
pushf
jecxz
cwde
int3
lahf
cld
xchg
xchg
xor
and
movs
neg
icebp
mov
push
cmp
scas
pop
sar
pusha
mov
and
xchg
ret
mov
out
jp
inc
jns
ins
push
jae
xchg
mul
inc
retf
jne
jmp
jne
jb
les
ret
aad
or
popa
sub
xor
jns
leave
push
ret
es
xchg
pop
in
mov
mov
int
popa
push
repnz
sbb
out
jmp
jcxz
fwait
xchg
(bad)
into
mov
pop
retf
(bad)
pop
shl
cmp
aaa
call
xchg
jl
pushf
xchg
into
into
stc
sti
jae
fdiv
lods
push
sbb
dec
jp
aaa
frstor
cdq
js
loope
xchg
mov
or
sub
outs
sub
pop
inc
test
mov
in
add
cli
sahf
xchg
(bad)
jmp
sub
loope
xor
xor
inc
retf
add
xchg
pop
xor
pop
(bad)
es
jmp
push
lods
xchg
fnstenv
jae
mov
sbb
mov
int3
dec
loope
mov
repnz
loopne
scas
xor
mov
test
loopne
adc
add
xchg
mov
add
shr
push
mov
xchg
adc
mov
dec
mov
popa
dec
loop
xchg
out
xchg
jmp
repnz
inc
xchg
push
aas
jnp
(bad)
pop
add
stos
in
or
xor
jne
imul
sub
add
xchg
mov
fcmovnbe
jge
cmps
aaa
cmps
xor
dec
mov
inc
cmps
es
xchg
fwait
addr16
mov
fwait
push
jnp
scas
push
fsubr
ja
sub
mov
les
jmp
adc
jge
ret
mov
test
aam
xchg
pop
idiv
aas
icebp
dec
ja
inc
sbb
mov
and
les
mov
jmp
add
sbb
dec
pop
retf
cmc
mov
lahf
lea
test
das
pushf
mov
adc
jecxz
pop
inc
jecxz
out
sub
scas
add
sbb
sub
daa
add
or
add
loope
push
ins
aas
idiv
xchg
daa
add
and
in
cmp
enter
stc
or
aam
xchg
pop
lods
xor
movs
data16
sbb
sub
(bad)
jmp
stos
mov
inc
aam
sbb
cmp
mov
xchg
xor
inc
push
ins
test
xchg
adc
in
rcr
jae
mov
imul
sti
jp
leave
shl
imul
pop
in
jbe
jl
mov
repnz
sub
sbb
pop
mov
(bad)
sub
ret
fidiv
inc
pop
mov
dec
xor
jmp
call
ja
sub
mov
out
arpl
test
mov
fisubr
mov
sbb
inc
mov
stos
jns
pop
mov
mov
pusha
mov
call
mov
clc
sti
add
sub
in
call
jmp
mov
(bad)
mov
movs
jmp
dec
jns
js
mov
push
(bad)
lock
mov
enter
les
test
pop
mov
xchg
cld
shr
cdq
mov
out
lds
and
call
mov
adc
and
jnp
add
gs
rcl
mov
mov
jbe
cdq
iret
pop
push
repnz
and
push
mov
xchg
mov
call
bound
out
div
mov
out
loopne
ror
sbb
test
sub
push
(bad)
dec
mov
fcomp
push
pushf
mov
jo
sbb
shl
mov
stc
shl
les
clc
xor
sub
jno
in
jmp
aaa
popa
pop
lahf
jns
add
mov
nop
push
popa
sub
outs
inc
mov
repz
loopne
mov
or
jbe
aas
sbb
ja
shl
dec
adc
scas
ins
aad
arpl
iret
adc
mov
xor
mov
ins
xor
(bad)
ins
mov
push
imul
lahf
xchg
inc
push
or
push
outs
add
xchg
lea
push
bound
lods
hlt
sub
adc
push
call
arpl
xchg
test
jle
adc
aam
mov
or
add
fsubr
out
data16
pop
cli
test
adc
mov
std
pusha
sbb
movs
enter
ja
shr
sbb
ja
sub
test
sub
cmp
mov
mov
leave
ins
sub
stc
jae
mov
jb
iret
cmp
popf
push
in
cdq
cmp
iret
bound
and
push
inc
imul
sbb
pop
movs
push
pop
lods
inc
mov
pop
sub
fld
sub
in
test
cs
aas
dec
movs
push
mov
push
add
xchg
xchg
mov
imul
fcom
je
std
inc
mov
cmp
fsub
pop
sub
mov
scas
cli
xchg
fisttp
push
pop
adc
test
inc
int
pop
stos
pop
enter
in
dec
outs
(bad)
clc
cmp
cmp
mov
and
addr16
je
push
sub
and
(bad)
mov
(bad)
lods
hlt
loopne
adc
jg
fisttp
ins
jge
inc
out
(bad)
push
inc
sub
mov
or
and
out
shl
dec
iret
xchg
xchg
(bad)
aam
ror
fs
sbb
test
mov
add
fs
sbb
repnz
outs
lds
rol
xchg
nop
(bad)
rol
push
loopne
mov
mov
iret
xchg
jmp
(bad)
out
xor
push
xchg
ss
(bad)
mov
mov
jno
nop
push
outs
sar
mov
movs
xor
jns
or
jnp
adc
jns
pop
cs
jae
out
push
dec
fwait
scas
and
(bad)
js
sbb
data16
movs
fistp
je
xor
lahf
cmp
loopne
adc
jmp
je
pop
enter
xor
(bad)
(bad)
aam
mov
jo
cmp
dec
push
mov
cmp
mov
dec
das
shl
ds
jecxz
cmp
outs
lods
outs
in
xor
mov
sub
jle
hlt
jno
jb
push
cmc
adc
nop
jo
jmp
jmp
pop
and
pop
cdq
xchg
inc
sbb
and
out
(bad)
mov
mov
push
mov
lods
pop
scas
add
mov
aad
adc
jle
stc
pop
clc
movs
cmps
test
add
les
sub
sub
cmps
(bad)
enter
pushf
sar
sbb
inc
sbb
adc
lahf
(bad)
xchg
xchg
dec
and
inc
pop
aas
movs
jne
mov
lock
into
bound
mov
xchg
sub
test
jle
push
add
aas
inc
pop
xor
add
xchg
push
(bad)
xchg
fisubr
ret
cmps
jns
sub
add
fisub
retf
add
push
les
xor
int3
repz
es
ins
hlt
setne
or
add
sar
sbb
test
in
xor
xchg
retf
cwde
leave
ja
lahf
pop
sub
icebp
(bad)
fcom
out
lds
mov
adc
lock
mov
cmp
arpl
cmp
xor
mov
ds
jns
inc
xor
sub
in
lods
arpl
rcr
fwait
scas
mov
mov
sahf
es
jo
push
out
loop
test
cld
iret
(bad)
mov
cdq
jp
push
jbe
out
(bad)
in
fld
and
fcom
sbb
xchg
mov
retf
sbb
cmc
adc
mov
jge
jmp
(bad)
sahf
jmp
mov
push
mov
retf
movs
(bad)
in
fwait
stc
nop
enter
retf
clc
jbe
adc
and
lods
repnz
pusha
pusha
clc
jmp
lods
mov
stc
push
adc
cmp
jl
mov
adc
adc
pop
movs
shl
xchg
push
cmps
mov
or
retf
xor
movs
gs
xchg
push
sbb
and
mov
push
out
ja
imul
rcr
and
jmp
inc
adc
cwde
adc
cdq
inc
addr16
xor
sub
push
pop
test
retf
push
outs
out
hlt
xor
cmc
or
cld
push
add
or
js
sub
mov
call
cmp
lahf
push
inc
or
or
gs
push
xchg
sub
dec
imul
push
int3
xchg
je
push
mov
clc
cld
into
std
push
(bad)
repz
jmp
aaa
jae
pop
jnp
and
xor
lods
retf
ret
dec
mov
outs
add
ss
hlt
stos
rcr
cmp
pusha
ret
fistp
frstor
cmp
ins
xlat
jl
retf
loop
fbld
out
movs
push
mov
rcr
and
mov
rcl
jmp
push
or
adc
sbb
stos
mov
add
mov
dec
mov
shl
call
into
aad
mov
sar
jge
fwait
push
adc
dec
cld
in
pushw
push
neg
ret
js
sbb
mov
inc
mov
sbb
dec
fisubr
add
add
lahf
mov
and
jecxz
mov
jns
mov
mov
(bad)
movs
repnz
div
push
dec
jmp
cdq
popa
and
mov
jnp
lods
inc
inc
cmp
test
addr16
pop
sub
mov
pop
call
retf
ja
push
add
ret
lds
aaa
push
and
or
jecxz
adc
inc
stos
mov
jne
xor
sub
lods
movs
mov
mov
pop
out
out
sub
lea
aaa
sbb
add
cmc
mov
iret
ds
jmp
es
jae
int
jge
cmp
xchg
fistp
push
pop
and
add
push
out
(bad)
lods
inc
icebp
je
pop
xor
jne
hlt
scas
fild
xchg
(bad)
aad
call
or
out
mov
sbb
loope
or
xor
mov
idiv
test
or
mov
dec
fwait
loopne
or
cld
rcl
cmps
jbe
(bad)
cmc
pop
inc
hlt
and
mov
or
daa
inc
aam
adc
mov
fnsave
cmps
movs
data16
ds
cmp
add
push
ins
jne
mov
(bad)
xor
or
xchg
sub
and
stos
xchg
int3
test
(bad)
retf
es
xor
repnz
in
test
xchg
xchg
aas
cld
xchg
jge
aaa
and
dec
lds
ins
jae
rol
push
mov
pop
data16
mov
into
push
mov
popa
jno
sbb
mov
xchg
sti
pop
(bad)
in
push
lock
inc
scas
repz
pop
(bad)
retf
cmps
in
and
push
push
mov
aas
pusha
int
inc
sbb
rcl
ins
int
cld
adc
bound
adc
imul
jnp
dec
cld
xchg
and
push
inc
pop
pcmpeqd
jecxz
dec
js
iret
jnp
jnp
sar
inc
gs
mov
pop
lods
and
icebp
add
inc
pop
mov
movs
lods
cdq
push
jl
mov
scas
arpl
call
xchg
(bad)
rol
sub
fcomp
iret
in
jge
in
arpl
inc
outs
es
mov
fwait
xchg
cli
sbb
xchg
add
jmp
inc
mov
xchg
push
push
jmp
rol
dec
jmp
push
pop
rcr
and
inc
aaa
in
and
nop
xchg
mov
mov
xchg
mov
cmc
(bad)
jmp
dec
sahf
jo
mov
enter
cs
adc
sbb
push
lahf
in
pushf
xlat
bound
stos
mov
jecxz
jg
movs
test
movs
addr16
fild
test
adc
cli
xor
test
popf
sbb
dec
jae
nop
pushf
xchg
je
cwde
or
gs
in
and
sahf
or
data16
mov
xchg
ins
ret
jmp
out
into
mov
pop
ss
sar
sub
mov
je
aas
aad
fmul
mov
neg
lahf
outs
int3
iret
cli
lods
daa
int
jnp
push
and
inc
ds
or
push
out
shl
mov
gs
(bad)
enter
outs
iret
push
mov
sbb
mov
adc
xor
mov
cdq
push
lods
fxch
sar
jno
test
fs
fisub
dec
retf
xchg
push
adc
push
outs
xchg
xor
jmp
dec
fst
out
push
test
out
or
mov
fisub
and
mov
jge
outs
jns
or
and
adc
add
xchg
mov
pop
dec
mov
cmc
pop
rcr
shr
sub
(bad)
push
(bad)
jg
test
jo
inc
add
jne
sti
cmp
fild
fcom
or
jbe
xchg
jae
out
in
adc
mov
jmp
pop
test
lea
shl
aas
mov
mov
fs
inc
int3
mov
push
sbb
and
pusha
ficomp
cmp
mov
push
sub
inc
aas
fsub
imul
fisttp
es
lods
iret
mov
fisttp
(bad)
dec
ror
sub
sar
(bad)
retf
inc
dec
fucomip
push
jbe
mov
sub
push
fsub
jle
push
xor
mov
pop
in
cmp
sar
jmp
pop
xchg
sbb
js
out
movs
fidiv
xchg
int
xchg
fisttp
ss
and
ds
fld
adc
repz
xor
push
retf
dec
mov
pop
adc
jmp
push
cli
scas
mov
aaa
rol
mov
aaa
ret
popa
imul
push
imul
mov
inc
mov
cmps
pop
retf
shl
fmul
fdivr
jnp
xchg
and
cwde
push
rcl
push
dec
xchg
bound
mov
lods
leave
mov
sar
test
lock
retf
sub
cmp
in
(bad)
mov
add
(bad)
xchg
sbb
xor
popf
test
inc
dec
enter
gs
or
fisttp
dec
pop
inc
(bad)
call
cli
(bad)
fsub
sahf
or
sahf
jno
add
sub
mov
pop
add
rol
lock
adc
(bad)
xor
popa
(bad)
push
add
hlt
shl
jecxz
jnp
xor
xlat
(bad)
jge
push
out
(bad)
pop
movs
call
das
loop
or
sbb
sbb
call
push
dec
jns
inc
adc
mov
mov
pop
pop
js
aad
jl
jno
bound
ja
test
mov
sub
retf
lock
adc
scas
jl
fsub
std
popf
xor
xchg
gs
repz
shr
cmps
adc
aas
in
and
mov
test
loopne
inc
lods
push
mov
popf
jno
dec
mov
or
int
je
sahf
pop
mov
mov
sbb
ret
mov
mov
lea
aam
popf
push
aas
ins
das
or
push
sbb
loopne
push
mov
lea
cmps
test
pop
into
ret
imul
cmp
(bad)
(bad)
out
xchg
(bad)
pop
mov
xchg
mov
mov
outs
(bad)
xchg
xor
loop
clc
inc
data16
cmp
cmp
sub
inc
(bad)
je
push
(bad)
pushf
adc
aas
xor
in
or
loop
mov
out
ret
test
pop
and
pop
movs
xchg
das
add
je
rol
in
rcl
bound
jg
cmps
mov
and
fisttp
pop
retf
scas
call
in
xor
xchg
aad
fist
mov
mov
cs
stc
ins
hlt
mov
in
push
mov
xor
mov
leave
jg
lock
sub
fcom
ficomp
std
aas
jecxz
add
push
cmc
and
repz
xchg
pop
mov
jmp
sub
sub
cmp
jge
test
cdq
call
retf
mov
cs
xor
push
std
inc
fcmovu
(bad)
retf
dec
push
xchg
punpckhwd
mov
add
push
and
push
mov
retf
jnp
inc
les
aad
int
test
mov
repz
repz
jns
imul
jp
mov
outs
mov
dec
inc
xchg
pop
lds
or
sbb
sbb
sbb
enter
lods
test
xchg
push
fdivr
jmp
jae
aam
mov
and
pop
xlat
imul
shl
dec
retf
pusha
(bad)
mov
adc
mov
call
loopne
cmp
popa
add
mov
mov
push
xchg
loope
outs
jmp
fwait
scas
mov
push
mov
push
mov
pusha
not
scas
mov
test
out
xchg
ds
push
out
loopne
inc
sar
jge
cmp
cwde
rcr
and
mov
mov
jmp
daa
std
fcomp
outs
xor
cmp
adc
dec
shl
shr
idiv
stos
scas
mov
arpl
push
cmp
cwde
rcr
hlt
xchg
sub
test
dec
test
add
and
movs
les
(bad)
in
enter
mov
adc
jmp
ss
push
dec
in
inc
in
add
fwait
adc
dec
sar
cld
sub
mul
addr16
jnp
inc
dec
cmp
pop
mov
inc
pop
cmp
ffree
sbb
xor
iret
mov
push
je
in
cmp
inc
psrad
ret
mov
data16
push
xchg
ror
(bad)
push
adc
hlt
or
jl
sub
inc
xchg
push
fmul
sti
cmp
bound
stc
std
hlt
arpl
retf
fisttp
aam
add
sbb
mov
cld
es
add
add
ret
mov
adc
xor
iret
ret
jle
mov
or
in
xor
ss
xor
xchg
sub
mov
div
popf
das
or
ss
(bad)
lock
mov
xor
jp
arpl
cs
mov
jb
push
dec
repnz
test
xor
pushf
mov
xchg
pop
lods
inc
ins
cmps
call
mov
imul
(bad)
xchg
cwde
fs
push
pop
iret
sahf
mov
test
enter
test
cmc
or
test
ss
sahf
cmps
imul
xchg
fwait
movs
jmp
mov
mov
fs
jno
pushf
fstp
or
add
add
sub
shr
in
mov
or
pop
cld
jo
jns
xlat
data16
es
and
jae
mov
pusha
mov
gs
xchg
rol
cmps
(bad)
pusha
adc
mov
dec
(bad)
or
fwait
dec
adc
cmc
ja
out
jne
mov
add
fild
scas
add
imul
adc
je
xchg
xchg
mov
push
and
and
pop
mov
rol
and
fdivrp
sbb
or
fwait
or
cli
data16
test
add
cld
sbb
fsub
jge
cmp
mov
mov
popa
cmp
push
stos
xor
out
mov
fisubr
loope
aas
mov
daa
and
out
outs
fwait
cwde
dec
cdq
pushf
xchg
push
pop
aam
push
ret
(bad)
sub
and
dec
mov
dec
pop
xlat
mov
aaa
test
ror
or
fistp
fmul
gs
int
jnp
cs
aaa
xchg
push
push
leave
sbb
sbb
mov
push
xchg
push
loop
dec
xchg
mov
in
xor
cmp
pop
xchg
dec
iret
inc
jae
xor
iret
stc
mov
int3
mov
dec
idiv
inc
xchg
inc
hlt
mov
pop
stos
mov
dec
push
cmp
add
js
mov
call
jnp
fwait
bswap
hlt
int
inc
ins
int3
outs
pop
cld
fwait
shl
stos
xchg
mov
scas
imul
pop
pushf
jne
loope
scas
dec
jmp
test
(bad)
imul
test
into
add
jno
xchg
pop
movs
mov
pop
ret
cmps
inc
(bad)
xchg
or
push
push
addr16
cwde
add
loope
ds
jg
adc
pop
int3
jmp
in
jnp
xchg
cmp
lock
or
sub
in
cmp
inc
sbb
fs
popa
push
or
push
pop
mov
stos
(bad)
dec
pop
mov
xor
pushf
pushf
in
(bad)
mov
or
pop
ret
loopne
mov
fdivp
inc
lock
(bad)
pop
je
mov
push
xor
imul
cmp
fwait
js
jg
ja
mov
or
idiv
bound
or
jne
and
stos
mov
je
cmc
fldenv
stos
aad
pop
out
loop
sub
pushf
cmps
pop
dec
add
push
push
push
ja
ins
adc
push
jae
push
pop
imul
cmp
mov
pushf
push
call
int3
sub
push
js
add
in
cmp
jg
(bad)
fmul
cmp
mov
inc
dec
and
pop
stos
sbb
stos
imul
mov
stos
sahf
fisubr
movs
xchg
loope
inc
lds
(bad)
or
adc
xlat
xor
fstp
popa
push
push
jecxz
outs
es
movs
jp
fadd
ss
dec
or
add
add
imul
xchg
mov
add
adc
outs
fs
pusha
js
shr
fisttp
lock
mov
loopne
fisttp
cmp
adc
lock
push
inc
and
les
xor
cmp
outs
outs
imul
cmps
popf
rcr
dec
adc
out
cmovp
cld
cmp
(bad)
adc
pop
and
dec
je
pop
cmp
xchg
enter
retf
inc
mov
push
movs
hlt
xchg
push
(bad)
and
jecxz
sub
shl
push
ins
scas
pushf
(bad)
loop
pop
je
out
ins
push
mov
push
test
lods
and
jne
add
out
in
je
sar
or
les
(bad)
daa
lods
lea
pop
ins
xchg
pop
jnp
dec
push
hlt
mov
xchg
cmp
xor
daa
test
pop
xchg
xor
inc
popf
mov
push
and
mov
xchg
sbb
ret
or
imul
inc
call
out
or
daa
jo
(bad)
int
cmp
mul
or
in
xor
inc
inc
clc
cs
sbb
jo
inc
adc
imul
retf
or
cmp
out
adc
stc
popf
outs
popf
sar
push
fmul
adc
repnz
sbb
test
mov
mov
mov
lods
cmc
neg
dec
je
xchg
and
call
or
aad
jmp
mov
imul
mov
xchg
sub
dec
push
in
iret
fwait
jge
arpl
in
adc
jae
fdiv
inc
jge
push
pop
fbstp
xor
ror
frstor
popa
and
jns
les
xor
jnp
shl
punpckldq
cld
xchg
loope
cmp
add
neg
add
imul
or
push
mov
test
and
add
xchg
sub
clc
dec
sbb
sub
mov
adc
mov
nop
scas
cmp
lahf
sbb
pop
stos
jmp
cmc
dec
mov
ja
xchg
jne
xchg
repnz
mov
hlt
cs
and
out
shr
jmp
cmp
sti
movs
(bad)
xchg
sbb
hlt
test
cmps
popf
cld
bound
sub
push
sbb
jnp
push
inc
inc
pop
jae
dec
cwde
add
iret
push
pop
js
mov
or
lods
test
popa
adc
mov
xchg
inc
std
fwait
mov
stos
dec
scas
rcl
pop
pop
adc
mov
xchg
mov
ret
jmp
jge
lods
cmp
adc
call
xchg
pop
or
sub
es
aam
adc
int3
or
lods
sbb
mov
cli
into
stos
fadd
jmp
ja
fisub
movs
mov
xchg
dec
outs
jns
mov
cld
and
mov
cmp
gs
sbb
imul
mov
jp
mov
inc
out
cmc
pop
xchg
stos
paddd
sbb
popa
outs
pusha
mov
outs
ins
iret
dec
ret
jbe
and
mov
mov
sub
cmp
adc
cmp
retf
sbb
test
ds
int
les
das
mov
and
xchg
(bad)
int
aas
mov
dec
out
cmp
ret
popf
mov
ret
sub
cwde
sbb
test
and
inc
movs
imul
movs
mov
jecxz
aas
loopne
daa
call
and
fmul
mov
add
lods
into
ret
repnz
xchg
mov
das
xor
and
adc
fiadd
aas
cmps
ds
mov
xor
(bad)
mov
jnp
mov
inc
leave
not
push
loopne
jo
lgs
nop
es
mov
jmp
sub
in
sub
bound
loope
inc
lock
xor
pop
mov
cld
movs
aam
sub
mov
push
fwait
test
test
ss
push
xor
push
jmp
mov
push
cmp
(bad)
sbb
add
neg
loopne
lock
fmul
xor
mov
outs
sub
pushf
add
pop
jbe
std
dec
xor
mov
out
mov
std
mov
cmp
imul
outs
shl
sbb
test
daa
inc
cmp
mov
adc
lea
je
mov
addr16
ja
adc
sbb
dec
mov
cmp
into
(bad)
in
xchg
adc
mul
mul
repnz
inc
rol
push
hlt
sti
fsub
movs
sbb
adc
mov
pushf
fcomp
sub
jb
mov
mov
inc
imul
or
and
mov
daa
xor
std
rol
mov
sub
int
pusha
xchg
std
and
mov
lods
push
ret
adc
ficom
je
pop
aas
mov
int3
outs
xlat
xchg
jo
jno
std
ss
pusha
mov
out
xor
add
fiadd
cmp
lods
and
pop
pop
push
mov
repz
fdiv
pushf
inc
add
loope
ret
push
xchg
shl
pushf
mov
rol
fwait
xchg
enter
adc
fucomp
mov
in
popf
or
sbb
or
shl
outs
add
out
xchg
xor
or
int3
std
cmp
mov
push
je
mov
xlat
retf
pushf
(bad)
cmp
retf
jge
and
cld
and
jbe
loope
in
loopne
pop
mov
outs
daa
dec
popf
mov
aad
inc
jo
aad
test
retf
clc
lock
xchg
out
inc
jo
fld
retf
xchg
mul
imul
jmp
daa
pop
cld
icebp
pop
xor
aas
add
cmp
cmp
push
and
(bad)
aaa
or
cmps
jae
ja
fucomip
push
mov
lods
xchg
sbb
push
loop
lds
mov
and
xchg
pop
aam
pop
pop
(bad)
xor
mov
mov
push
rol
sahf
cs
adc
call
push
mov
fsubr
cmp
push
add
mov
in
sub
cli
pop
cmp
dec
cmp
sub
cmps
and
jae
inc
shl
sbb
addr16
ret
in
and
push
std
add
(bad)
fisubr
jns
sbb
stos
xor
les
lahf
mov
(bad)
mov
cmc
mov
pop
jb
inc
lahf
push
jg
sub
mov
fdivr
jbe
mul
iret
add
sbb
pop
add
inc
cmps
test
sbb
add
xor
inc
mov
and
mov
aad
inc
das
(bad)
(bad)
call
jle
xor
jmp
test
pop
mov
popa
(bad)
sbb
arpl
xchg
ret
mov
inc
xchg
jmp
lahf
pop
xchg
jecxz
mov
outs
pop
out
(bad)
gs
pop
push
add
xchg
sahf
in
add
dec
outs
mov
or
or
lds
sbb
or
mov
push
and
int3
data16
mov
sbb
inc
sbb
(bad)
xchg
adc
and
or
fdivr
inc
sbb
dec
mov
and
inc
jl
mov
fldcw
stc
leave
ins
shl
mov
ror
xchg
mov
scas
jle
push
jb
neg
dec
xchg
or
inc
sub
dec
test
dec
repz
fldcw
jne
mov
js
push
add
cmp
sahf
mov
mov
xchg
add
mov
cmp
jl
repnz
hlt
stos
xor
clc
xor
push
gs
fidiv
dec
enter
int3
push
xchg
(bad)
neg
retf
cmp
lock
jae
shl
or
pop
mov
cmc
push
inc
pusha
inc
inc
rcr
ins
in
out
inc
in
mov
mov
or
cmc
in
push
mov
cvtps2pi
fdivp
scas
pop
sbb
ror
pop
ds
scas
scas
pop
cdq
shr
adc
mov
add
loopne
lods
movs
daa
adc
mov
cmp
fwait
ss
mov
lods
cmc
inc
cmp
test
mov
and
std
cmp
das
xor
add
sub
mov
or
adc
lods
push
daa
stos
mov
xor
fiadd
sbb
and
and
out
cmp
movs
cwde
jne
mov
xor
pop
shl
sbb
xchg
xor
lea
sbb
sub
std
cmp
popf
repnz
mov
and
cmp
call
jle
out
or
push
test
pop
sub
push
inc
cmc
add
dec
and
mov
cmp
push
ret
or
test
cmp
fnsetpm(287
ins
loop
xchg
aam
adc
scas
adc
mov
mov
xor
mov
test
je
daa
mov
inc
and
gs
dec
(bad)
lods
and
out
push
(bad)
(bad)
ins
push
stos
or
xchg
mul
cwde
fstp
add
icebp
and
test
mov
inc
int3
xor
push
sub
mov
mov
scas
dec
das
add
inc
jne
mov
int3
lea
mov
mov
cwde
retf
push
or
neg
aaa
inc
aam
cmp
nop
push
mov
lds
test
int
pop
out
mov
mov
jmp
jg
jno
mov
inc
sbb
cmc
jmp
test
(bad)
cmc
imul
sub
inc
pop
and
jb
es
in
in
and
jb
shr
or
cmps
and
adc
test
jl
gs
push
fstp
cwde
aaa
xor
mov
loope
movs
(bad)
call
scas
adc
test
sub
adc
fwait
test
jmp
pop
lahf
xor
xchg
mov
xchg
sub
loopne
sbb
clc
sahf
mov
jge
inc
fwait
mov
sub
and
dec
sbb
les
sub
loope
sbb
sbb
adc
xor
in
es
or
fidiv
bound
jl
sub
mov
outs
es
inc
sbb
out
push
adc
pop
rol
pop
or
pop
add
inc
or
pop
enter
int
cmc
inc
(bad)
cld
adc
xor
adc
test
mov
push
das
ins
push
ins
repnz
mov
gs
cmp
push
(bad)
outs
sub
ins
cmps
dec
(bad)
pushf
cmp
ins
enter
mov
push
cs
leave
sub
lahf
ret
mov
pop
pop
sub
shl
jge
ins
dec
sbb
test
aaa
aas
pop
mov
ja
jmp
sub
adc
mov
mov
scas
das
or
push
inc
imul
test
add
fistp
es
jmp
jmp
mov
scas
pop
jmp
or
sbb
outs
add
mov
pop
mov
jmp
out
inc
fimul
aaa
mov
cli
sbb
pop
jns
inc
cmps
inc
bswap
xchg
jge
lock
xchg
mov
mov
sub
xor
sub
in
pop
jl
xchg
fwait
lea
mov
or
out
add
fcomp
push
mov
xlat
fcom
push
cli
push
ins
sbb
mov
inc
fimul
rol
mov
push
int3
mov
pop
push
mov
in
outs
jecxz
xchg
add
jbe
mov
fimul
and
or
ror
push
mov
push
sti
xchg
clc
sbb
cli
sbb
xchg
mov
(bad)
cmc
sbb
sub
mov
fld
xchg
and
push
and
xchg
fwait
test
mul
xor
mov
es
clc
push
rcr
sahf
jb
and
push
fiadd
aas
jge
pop
fbld
les
in
adc
idiv
push
js
cwde
out
inc
fdivr
mov
scas
frstor
popa
jb
loope
int3
mov
push
or
dec
cmp
xchg
cmp
test
aas
mov
movs
xchg
push
jno
push
add
movs
xor
int3
movs
inc
(bad)
jmp
xchg
xchg
jnp
xor
into
and
pusha
out
mov
sbb
rcl
into
fcomp
and
jmp
mov
cmp
push
xchg
sub
mov
or
test
loope
int
sub
in
inc
sbb
outs
rcl
clc
popf
jnp
pusha
mov
dec
add
jmp
cdq
jbe
sbb
inc
mov
mov
pop
stos
and
inc
imul
sbb
mov
in
idiv
sub
aaa
mov
imul
mov
lds
retf
mov
cmp
in
mov
dec
in
ss
xor
push
add
ins
fs
pop
movs
jne
sbb
test
ss
sbb
cwde
and
fdivr
or
xor
fcomp
mov
mov
aaa
sbb
sub
aam
lahf
jne
shl
push
outs
sub
jmp
dec
into
icebp
dec
cmp
daa
(bad)
fist
faddp
mov
(bad)
movs
inc
push
data16
retf
js
pop
enter
lods
sbb
pop
sti
sahf
std
sti
add
dec
(bad)
fidivr
(bad)
fdivr
shl
je
jno
sbb
sub
add
mov
sbb
cmps
call
jge
lfs
lods
push
mov
xchg
(bad)
jmp
test
mov
mov
popf
int3
inc
aas
sbb
loopne
retf
in
(bad)
cmp
adc
push
movs
lock
sahf
xchg
scas
arpl
outs
add
lods
xor
dec
fwait
outs
test
ins
sbb
int3
out
imul
aad
repnz
inc
mov
xor
mov
test
mov
fst
cmp
sbb
lods
call
icebp
movs
aaa
and
sar
ss
mov
loopne
fild
jmp
out
cmp
mov
lahf
shr
push
nop
mov
ror
dec
jno
mov
push
not
daa
mov
mov
aaa
mov
loope
fmul
aas
dec
(bad)
sbb
mov
xchg
cmp
mov
mov
lods
xor
rcl
inc
fcomp
hlt
inc
cwde
jbe
mov
cmc
pushf
xrelease
sbb
push
add
mov
adc
lahf
fdivr
mov
jno
or
cmp
(bad)
or
fucom
add
fdivr
js
cmp
popf
call
inc
repnz
jl
mov
ss
aaa
sbb
daa
in
mov
fdivr
inc
push
hlt
movs
bound
mov
out
scas
add
sub
stos
test
ins
ja
sbb
xchg
xor
push
sbb
add
ficomp
mov
push
xchg
push
ins
gs
inc
ja
lods
into
movs
xor
loopne
stc
inc
mov
pop
mov
mov
inc
sub
(bad)
cs
mov
frstor
mov
and
sti
bound
mov
mov
or
call
cmp
or
inc
dec
call
fucomp
xor
fwait
dec
std
loopne
or
ficomp
(bad)
cmp
rol
cmp
cld
ds
retf
cli
xlat
lds
dec
and
es
or
add
int3
push
jecxz
jo
test
mov
or
lods
imul
rcl
or
repz
out
in
and
setp
lods
aaa
sub
not
mov
test
mov
pop
sbb
xor
popa
sti
pop
lock
(bad)
mov
jge
(bad)
ret
mov
push
xor
xchg
test
je
icebp
inc
inc
jae
mov
push
aas
sbb
ret
(bad)
dec
outs
xchg
xlat
xor
and
fsqrt
pop
fcomp
jecxz
pushf
mov
outs
scas
sti
xor
mov
sti
js
mov
push
stos
inc
test
and
xchg
xor
mov
in
inc
dec
xchg
fs
imul
pop
adc
and
rcr
push
push
or
jl
inc
mov
push
inc
add
(bad)
int
pop
arpl
mov
call
dec
mov
loopne
pop
rcl
xlat
or
jp
cdq
adc
xor
xchg
into
div
dec
int3
cs
ss
sub
push
rcr
xchg
aas
jl
mov
inc
sbb
cs
cmp
push
movs
and
jl
cmp
fs
pushf
and
hlt
enter
loopne
in
push
cmp
sbb
fwait
pushf
jns
xor
jmp
push
aam
mov
fwait
ret
xor
jp
cdq
or
cmp
and
ja
or
jo
outs
call
into
out
mov
mov
stc
push
or
cmp
mov
push
ret
jmp
sbb
test
dec
arpl
add
stos
jge
loopne
sub
and
leave
xlat
sub
jb
push
shr
movs
enter
je
sub
lds
xchg
dec
ror
arpl
scas
movs
jle
cmp
xchg
jb
jl
adc
loope
mov
ror
sti
(bad)
push
xchg
xor
fcomp
mov
add
cmp
or
xchg
adc
cmp
cmp
lahf
inc
ins
cld
imul
inc
sar
inc
(bad)
daa
push
mov
add
js
cmp
mov
cwde
pop
iret
xor
cmps
inc
imul
in
dec
outs
sbb
add
adc
mov
adc
mov
cmovp
inc
jnp
sub
push
dec
inc
pop
adc
jb
mov
sbb
add
xchg
call
mov
cwde
adc
sub
imul
inc
pop
xchg
imul
lods
and
(bad)
dec
and
jle
loopne
aas
test
stc
call
mov
inc
and
leave
enter
sub
jmp
lds
xlat
mov
fidivr
mov
pop
rcr
push
xlat
imul
mov
sbb
mov
and
push
(bad)
sub
adc
adc
add
dec
jl
out
xchg
adc
pop
and
cmps
jp
mov
pop
ins
pushf
push
imul
shr
into
jp
push
dec
(bad)
cdq
test
add
add
mov
push
and
cmp
cs
ins
jo
xchg
push
mov
retf
mov
(bad)
jg
test
loopne
clc
mov
and
cmc
pusha
jl
adc
mov
and
rcl
push
shl
mov
jae
sbb
es
in
daa
mov
dec
adc
test
push
mov
in
out
outs
pop
inc
add
sub
in
pop
adc
or
sbb
test
test
inc
retf
rcl
jbe
ret
(bad)
dec
pop
mov
jno
sub
ins
and
retf
jb
test
inc
idiv
mov
dec
aad
jecxz
(bad)
jae
sbb
and
push
popa
mov
push
jl
fist
mov
jmp
pushf
sub
loope
sahf
sbb
(bad)
cmp
adc
fld
data16
pop
dec
je
ds
sub
dec
je
inc
ficom
nop
popw
in
adc
imul
mov
sti
push
mov
sub
inc
in
arpl
movs
pop
outs
pop
je
mov
out
ins
xchg
loopne
out
cld
jmp
(bad)
push
xchg
add
or
test
imul
xchg
data16
jnp
and
fwait
enter
xchg
dec
ficom
pop
dec
hlt
(bad)
mov
sub
inc
xchg
ja
movs
or
lods
inc
push
push
ds
test
cmps
adc
and
mov
add
mov
and
inc
jne
imul
mov
movs
call
and
fiadd
in
sub
jmp
test
jecxz
std
neg
lods
fadd
mul
test
and
into
cmp
or
into
push
sub
pushf
in
mov
std
loope
cmc
jmp
jge
jb
mov
sbb
retf
ss
fwait
xor
lahf
leave
repz
fldenv
mov
fs
rol
sbb
dec
mov
std
ins
out
mov
hlt
les
(bad)
push
jl
gs
mov
call
inc
es
test
jecxz
in
pop
ss
ret
and
sar
mov
aam
mov
and
cdq
inc
out
mov
adc
retf
not
pop
cmps
push
adc
(bad)
in
aas
int3
jne
mov
cmp
xor
pop
(bad)
xor
outs
icebp
mov
not
pop
push
and
aam
pop
lahf
aas
pop
ja
js
or
rcr
dec
push
in
fwait
or
les
mov
fidiv
in
clc
pop
add
int3
add
out
addr16
lds
aam
sar
jmp
cld
adc
mov
mov
mov
lods
dec
lahf
dec
loopne
jl
jmp
cmp
mov
shl
cmp
dec
jnp
mov
adc
mul
loopne
pop
fsub
pop
cld
bswap
mov
test
mov
jnp
fdivp
mov
ss
cli
jnp
or
push
out
jmp
data16
and
sti
jmp
std
pop
adc
das
jg
movs
ja
sub
mov
dec
mov
in
adc
cmp
mov
nop
pop
cmc
mov
mov
ss
xor
les
stos
stc
sti
cmps
andnps
jbe
leave
rcr
lock
pop
ins
mov
and
dec
idiv
jecxz
mov
jmp
in
jl
mov
adc
mov
xchg
push
or
add
cmp
je
sar
sub
xchg
dec
mov
rcr
std
fucomi
addr16
dec
sub
out
sub
sub
stos
sbb
js
inc
lahf
(bad)
and
xor
idiv
mov
mov
nop
cdq
aas
adc
mov
mov
dec
(bad)
sbb
push
shl
jmp
fsub
retf
frstor
jmp
fcom
dec
and
mov
clc
stc
push
scas
inc
loop
sbb
out
sbb
mov
or
aam
xchg
test
push
xchg
fcmove
jbe
fisubr
arpl
test
ror
mov
bsr
shr
jecxz
add
add
push
js
xchg
iret
aas
bound
shr
mov
aam
imul
inc
mov
inc
or
mov
jo
imul
push
mov
cmps
and
ffreep
cmp
(bad)
nop
rol
sub
inc
cmp
out
(bad)
jp
ins
adc
ja
scas
mov
inc
sbb
push
std
cdq
push
data16
fst
add
mov
in
fidivr
push
xchg
mov
add
or
data16
outs
js
push
rcl
aas
cmps
(bad)
movs
sar
cmp
xcrypt-cbc
cmps
shl
outs
loop
push
out
retf
sub
es
test
sahf
jb
push
cmps
xchg
hlt
mov
loopne
out
mov
sub
cli
pop
retf
in
xchg
das
pusha
call
jge
sub
dec
adc
in
das
add
mov
pop
push
or
mov
or
push
fwait
pusha
stc
movs
pop
adc
mov
push
xor
dec
add
repnz
shr
ret
jnp
mov
ja
jne
movs
iret
add
mov
aad
mov
repz
cdq
jmp
xor
ins
bound
bound
pop
push
icebp
inc
or
pop
pop
dec
scas
neg
test
pop
pop
push
mov
js
cwde
jge
and
test
lods
fisub
(bad)
pusha
ins
adc
frstor
jnp
int3
stos
push
xor
sbb
fisttp
sub
cmp
das
xor
nop
(bad)
ret
add
mov
mov
loop
jl
xchg
loop
ins
mov
jecxz
mov
retf
cmp
clc
inc
dec
add
(bad)
fcomp
xchg
mov
xor
inc
sbb
inc
cmp
mov
outs
jmp
daa
sub
mov
stos
xchg
sahf
and
stc
clc
mov
leave
lea
retf
adc
mov
mov
adc
xchg
xor
sub
fldcw
sbb
cdq
aas
fwait
icebp
mov
sar
rcl
lods
inc
cwde
fs
sbb
in
pop
mov
lock
in
jo
xchg
pop
or
bt
cmp
xchg
mov
mov
pushf
inc
dec
lds
inc
fldenv
adc
dec
ds
mov
sahf
sar
(bad)
cmp
push
xchg
and
(bad)
inc
movs
aam
push
pop
aam
imul
push
mov
(bad)
popf
cmp
repnz
cmp
(bad)
mov
pushf
adc
jae
cmp
mov
js
jecxz
mov
mov
xchg
or
out
push
adc
icebp
xchg
stos
repnz
mov
push
call
arpl
iret
cli
pop
add
movs
xor
xchg
sbb
jno
shl
inc
add
mov
mov
retf
xchg
adc
dec
ret
das
(bad)
xchg
dec
xor
inc
cmps
mov
mov
push
jns
fucomp
mov
(bad)
jns
pop
jno
inc
sub
repnz
or
hlt
std
cmp
sub
(bad)
jo
or
add
jne
push
mov
sbb
sahf
xchg
call
cli
icebp
out
xchg
mov
sub
syscall
add
xor
sahf
jmp
push
ficomp
xchg
test
sbb
aaa
xlat
scas
and
retf
and
mov
xchg
mov
leave
and
test
cmps
sub
jnp
repnz
or
sbb
std
jp
pop
jle
les
lods
mov
sbb
xchg
cwde
xchg
out
jl
xlat
pop
iret
std
loop
adc
pop
pop
ins
mov
rcr
je
stos
add
mov
data16
inc
or
test
mov
cdq
lahf
dec
mov
lods
icebp
daa
inc
jb
fidivr
cmp
mov
shr
xor
jno
aad
pusha
dec
pop
aas
call
scas
repnz
loope
adc
jl
dec
std
mov
xchg
addr16
test
mov
ins
dec
jnp
leavew
pusha
test
and
jl
mov
xor
mov
pop
shr
in
push
cmc
sahf
mov
mov
push
push
jge
mov
popa
clc
add
xor
cmp
pop
pop
jle
ja
push
sbb
sub
xchg
mov
scas
cli
cmp
fwait
jno
xor
imul
rcr
lds
in
fwait
mov
dec
add
push
je
dec
int
ret
jp
int
pop
and
(bad)
or
loope
add
xchg
stos
xlat
in
neg
(bad)
mov
pusha
pop
sub
xchg
cmp
sub
jbe
les
jbe
push
mov
dec
add
mov
mov
mov
push
stc
rcr
mov
les
fadd
imul
mov
xchg
scas
jge
adc
adc
daa
popf
and
int
fcom
mov
xor
pop
xor
jecxz
mov
pop
cmp
out
div
push
arpl
test
(bad)
retf
dec
cmp
mov
outs
cld
in
retf
add
xor
call
clc
cmp
push
mov
xchg
cmps
ds
rcl
call
mov
mov
adc
jle
mov
repz
jle
jno
mov
scas
sub
retf
cmp
ss
and
cmp
mov
test
sub
xor
mov
or
loopne
push
xchg
dec
call
or
inc
call
call
jmp
add
jl
pop
in
dec
mov
sbb
adc
std
push
(bad)
rol
and
ror
jns
cmp
(bad)
movs
hlt
aam
icebp
and
sbb
xor
adc
add
ret
xchg
mov
out
out
stos
pop
pop
les
fs
xor
test
jne
xor
cmps
and
sbb
add
mov
sbb
and
pop
pop
pop
inc
pop
outs
mov
aas
sub
div
(bad)
out
mov
leave
sbb
retf
retf
stos
mov
pushf
mov
add
adc
js
push
mov
push
xchg
or
add
clc
add
div
call
fiadd
xor
xchg
cmps
ret
cmp
int3
mov
mov
clc
(bad)
sahf
cmp
loopne
dec
mov
pop
xor
fisubr
jmp
cdq
lahf
mov
aam
jle
dec
and
inc
(bad)
or
adc
stc
sbb
mov
pop
and
xor
fcomp
jl
ret
mov
sub
shr
xchg
pop
loopne
in
neg
jg
pop
in
leave
repnz
int3
xor
ret
dec
mov
push
pushf
mov
adc
rcr
out
adc
int
and
or
int
rcl
dec
shl
ret
int
cmp
test
mov
push
mov
inc
retf
ret
cmps
add
dec
popf
pop
dec
cdq
mov
add
fwait
out
out
cmc
xchg
jb
mov
mov
jmp
xor
in
sti
or
test
mov
fimul
xchg
addr16
les
jecxz
adc
stos
inc
sbb
aad
mov
cmp
(bad)
dec
lds
mov
adc
ins
(bad)
or
pop
sbb
aam
stc
aam
iret
gs
pushf
mov
das
xchg
in
jb
stos
jae
test
mov
aad
mov
pushf
xchg
in
add
call
and
fisttp
iret
xchg
outs
in
dec
mov
mov
(bad)
aam
sbb
xchg
mov
mov
ret
rol
xor
cmp
mov
dec
xchg
jle
push
add
inc
mov
mov
pop
nop
stc
aam
into
jnp
jge
jge
mov
xor
sbb
cmps
lods
add
dec
mov
sub
stos
cdq
adc
call
sub
jmp
sub
out
and
(bad)
pushf
mov
test
or
(bad)
xor
add
or
jecxz
mov
push
xor
dec
repz
push
mov
sub
movs
addr16
mov
movs
sbb
pop
adc
sbb
ret
in
mov
call
mov
add
pop
xchg
sbb
aas
fmul
pusha
hlt
fidiv
pop
xor
test
enter
jns
add
lock
mov
retf
jmp
loop
aaa
xchg
cmp
clc
aaa
scas
imul
push
adc
add
sub
push
push
enter
hlt
fs
jae
xor
lock
dec
xor
and
add
jbe
packsswb
inc
inc
mov
and
fmul
or
cmp
pop
xor
dec
mov
mov
sub
push
outs
je
(bad)
mov
mov
arpl
mov
cdq
adc
fsubp
arpl
cmp
adc
call
and
jo
clc
adc
pop
leave
ror
cmp
and
aam
pushw
sbb
mov
in
addr16
mov
adc
scas
ss
imul
aaa
popf
mov
mov
retf
or
push
es
icebp
inc
int3
int3
push
mov
jmp
xor
xor
lea
mov
jnp
mov
or
and
jl
int
jne
mov
sbb
jnp
mov
(bad)
xchg
nop
add
jne
(bad)
cmp
repnz
retf
jecxz
mov
aas
adc
mov
arpl
imul
popf
xchg
add
sub
int3
inc
stc
mov
xlat
and
enter
sbb
hlt
jmp
arpl
retf
or
in
hlt
mov
push
pop
push
add
ja
xor
aaa
enter
leave
hlt
mov
js
cmp
xchg
lods
push
imul
jle
iret
test
daa
cs
retf
out
fld
test
or
aam
xchg
xlat
shl
retf
pop
mov
not
imul
ja
mov
jns
cli
fdivr
loop
(bad)
adc
mov
int3
imul
in
int3
push
add
dec
rcr
xchg
out
pop
(bad)
cmp
push
pop
popf
jle
push
sub
std
sub
hlt
xchg
nop
ins
jb
loop
cwde
jp
xchg
dec
mov
fimul
sar
out
lods
scas
mov
or
in
push
jge
rcl
inc
rol
and
push
push
xor
push
inc
mov
add
arpl
in
dec
mov
inc
repnz
pop
cmp
xor
pop
dec
jno
mov
dec
add
inc
je
jo
ins
sbb
push
mov
mov
jge
nop
fsub
(bad)
ss
xor
mov
jge
jecxz
aaa
jmp
sbb
mov
loope
mov
mov
nop
clc
lock
call
and
mov
std
rcl
mov
js
in
jns
mov
jle
cwde
xor
xor
push
movs
cmp
xchg
loopne
ud1
jnp
ss
inc
dec
adc
adc
sbb
jg
xor
rcr
adc
(bad)
mov
adc
dec
mov
out
push
sbb
xchg
cmp
inc
loop
pop
into
loopne
retf
cmp
jbe
and
loope
mov
rcl
mov
pop
pusha
loope
jmp
mov
mov
sub
adc
mov
les
cli
or
or
sbb
retf
mov
cmc
daa
aam
imul
mov
cmp
mov
in
sti
fnstsw
cwde
loop
shl
dec
add
xor
mov
in
xchg
adc
(bad)
jbe
popf
ror
cmp
loope
push
inc
or
mov
sub
loope
cdq
das
in
ret
and
call
or
jbe
pop
inc
cmp
jl
aas
inc
in
pushf
jbe
sub
xor
fwait
mov
mov
icebp
sbb
dec
sti
popa
mov
inc
inc
xchg
ficom
mov
or
xchg
das
dec
mov
mov
jp
(bad)
sbb
and
sbb
mov
sar
push
popa
jnp
jnp
xor
push
cmc
lods
pop
test
and
mov
into
pop
push
mov
out
jl
mov
inc
mov
neg
or
mov
mov
(bad)
sub
js
into
add
(bad)
jg
and
pop
and
sub
inc
pop
mov
loop
sbb
dec
push
mov
enter
jp
not
mov
std
test
xchg
jg
push
aas
shr
fwait
mov
pusha
cmp
stc
adc
mov
mov
fld
dec
les
les
inc
adc
mov
test
push
test
scas
xchg
int
dec
les
pop
das
cmp
(bad)
dec
in
ret
fwait
stos
mov
cmp
sbb
fist
mov
mov
push
add
test
xchg
push
addr16
in
loop
push
xchg
aaa
cdq
into
dec
dec
fwait
mov
adc
(bad)
in
shr
pop
cmp
les
pop
add
(bad)
dec
xchg
hlt
or
inc
sub
std
jl
daa
cmp
push
neg
dec
jmp
jne
movs
jmp
cld
adc
add
add
test
add
fwait
arpl
rcl
iret
pop
jnp
repz
iret
xor
cmc
std
xor
cwde
sub
repnz
sbb
mov
push
jae
test
aad
add
xor
(bad)
pop
loope
xor
cmp
aam
(bad)
in
inc
mov
or
xor
test
fistp
mov
xchg
inc
cmp
and
js
stos
xchg
pop
add
hlt
fcom
mov
add
pop
jmp
addr16
aam
pop
dec
xor
idiv
ss
je
inc
arpl
nop
adc
mov
iret
xchg
add
mov
or
mov
loopne
inc
xor
test
or
dec
pop
jmp
iret
cmp
jle
enter
(bad)
and
mov
inc
pop
shl
push
ins
loopne
inc
jge
cmp
jge
xor
into
sbb
stos
bound
jmp
push
push
fwait
inc
dec
in
jecxz
mov
ds
and
xchg
mov
js
xor
cmp
mov
(bad)
mov
movs
or
outs
in
js
xor
dec
add
ss
scas
jns
mov
repz
cmps
(bad)
mov
les
cwde
aaa
daa
das
dec
in
push
adc
and
mov
dec
pop
sbb
add
mov
int3
jle
jmp
pop
imul
and
add
into
cmp
xchg
stc
mov
icebp
shl
test
jno
out
fmul
mov
mov
jb
pushf
mov
jae
xchg
mov
clc
jp
data16
mov
aaa
mov
xchg
retf
lahf
add
in
dec
xor
pop
mul
or
iret
ret
jg
test
or
retf
mov
mov
cmc
inc
les
ret
cmp
mov
xchg
mov
imul
push
aaa
repnz
pop
(bad)
jge
add
push
rol
push
mov
aad
cmc
pushf
je
and
jmp
stc
adc
fwait
test
jae
int3
jecxz
or
stos
sar
mov
push
ss
sbb
add
or
xchg
mov
mov
(bad)
jmp
push
jnp
pop
inc
aas
les
inc
jne
in
inc
jns
sub
js
dec
adc
adc
bound
aaa
lock
dec
inc
add
push
lea
leave
pop
loopne
xor
sub
std
in
aad
dec
iret
and
in
xor
mov
out
test
in
cdq
ins
out
add
ret
jmp
xor
xchg
outs
add
pop
sub
mov
push
pop
pop
call
jnp
aas
cmp
fdivr
pop
inc
lahf
scas
fdivr
in
std
xor
xchg
scas
push
sub
aad
ja
adc
xchg
stos
lods
(bad)
sbb
push
cmps
fadd
aad
or
pop
in
jg
scas
jae
dec
lds
jmp
das
and
adc
stc
add
push
call
pop
cld
add
repnz
push
popf
je
dec
popf
stos
push
xacquire
retf
sub
dec
inc
jno
test
push
add
mov
call
cmps
ret
fs
sub
call
cmp
sbb
dec
jl
xor
push
mov
lahf
test
push
cmp
call
arpl
mov
sub
push
test
push
gs
push
cwde
fwait
shl
xor
in
div
cmps
dec
cmp
int3
cmp
push
inc
mov
retf
dec
xchg
pop
in
sub
sbb
bound
or
sbb
xchg
push
lahf
mov
jp
das
fsub
dec
leave
push
retf
loope
aam
aam
push
pop
mov
hlt
mov
enter
popf
mov
scas
sub
mov
xchg
adc
cdq
arpl
inc
add
enter
js
sahf
adc
out
and
mov
dec
ret
or
xlat
fdivr
pop
pop
push
adc
mov
dec
cli
jg
pop
popa
stos
cwde
les
mov
dec
sar
movs
fwait
sar
dec
adc
repz
mov
test
mov
xchg
or
push
add
pop
mov
dec
lods
cmp
cli
mov
test
mov
fstp
inc
sub
jle
jns
cmp
out
bound
retf
shr
fdivr
test
arpl
dec
mov
in
div
mov
ret
dec
jge
xchg
(bad)
xchg
outs
ins
or
js
sbb
sbb
rcr
shl
xor
daa
cmp
outs
hlt
cld
imul
jb
sti
in
dec
mov
add
(bad)
jmp
cmps
arpl
add
retf
pop
sbb
sar
icebp
stos
out
lds
arpl
mov
sahf
mov
fadd
jbe
aaa
mov
(bad)
xlat
xor
pop
xchg
sub
aam
add
and
add
mov
stos
cmp
adc
popa
daa
cmps
xlat
sub
aam
jecxz
jb
inc
test
pop
movs
out
repz
push
pop
dec
sub
cmp
mov
daa
adc
mov
cdq
call
repz
pop
popa
sbb
xchg
adc
and
paddw
clc
mov
jne
test
loop
movs
fs
xchg
cmp
js
cld
sbb
stc
(bad)
pushw
pop
push
pop
jns
xchg
cmp
dec
pop
jb
adc
add
push
popf
mov
xchg
sbb
(bad)
int
mov
cmp
inc
fistp
sahf
mov
jle
jns
cli
mov
gs
pop
jae
daa
int3
dec
adc
je
sub
or
jno
and
and
ins
dec
dec
dec
pop
movs
mov
adc
lea
xlat
cmp
lock
xlat
inc
and
inc
mov
int3
add
mov
fnstsw
dec
dec
fbld
retf
and
xchg
test
dec
in
sub
jns
pop
cmps
fwait
inc
mov
mov
ins
std
fimul
dec
lods
idiv
stos
aaa
mov
(bad)
in
xchg
stc
xor
fld
bound
daa
adc
je
lock
xor
in
jle
mov
xor
test
xchg
pop
add
adc
and
push
imul
sbb
movs
jbe
iret
push
fdiv
repnz
xor
popf
mov
sub
pop
adc
cli
and
xchg
ins
jg
mov
mov
inc
lock
adc
out
ds
mov
arpl
jnp
icebp
cdq
arpl
mov
pop
add
ret
popa
xchg
mov
sbb
fmul
xchg
and
ins
jne
repnz
in
sti
es
std
cli
in
xchg
test
jmp
cmp
leave
xor
in
jmp
daa
lock
jb
pop
sti
push
adc
cmp
jp
fcmovb
gs
out
push
or
push
cmp
dec
movs
dec
add
repnz
ja
cmp
loopne
imul
mov
pusha
sbb
retf
les
je
inc
retf
mov
std
add
ins
(bad)
lea
mov
icebp
dec
js
or
in
popa
ja
or
(bad)
xchg
pop
mov
imul
xor
mov
pop
call
inc
cmp
push
scas
xchg
mov
dec
iret
mov
inc
(bad)
jecxz
inc
fld
xchg
retf
push
cdq
mov
int3
and
pop
out
stos
cmc
cmp
movs
call
xor
je
and
dec
xchg
pop
jmp
or
js
cmp
daa
fs
mov
loop
mov
and
out
sti
adc
(bad)
mov
in
clc
call
in
cmp
daa
into
data16
cmp
(bad)
dec
mov
(bad)
or
fimul
push
nop
fidiv
fmul
aaa
ds
(bad)
int3
inc
jge
popf
daa
jae
loopne
ins
rol
fmul
cmp
cmp
push
fmul
adc
adc
dec
retf
mov
mov
xlat
aam
cdq
mov
imul
mov
push
and
arpl
fstp
lock
or
jg
mov
dec
pop
rcl
(bad)
out
inc
mov
inc
test
bound
jne
mov
cmp
push
inc
sub
mov
push
iret
retf
sar
cdq
fiadd
aad
adc
ins
jecxz
sbb
sub
jae
(bad)
scas
enter
daa
xchg
push
fyl2xp1
jle
jmp
mov
mov
retf
in
mov
xchg
daa
jge
pusha
xchg
or
or
or
iret
add
stos
xchg
sti
pop
retf
test
jmp
sbb
or
sub
mov
mov
lock
stos
lds
mov
push
sub
sbb
push
shl
adc
pop
mov
imul
stos
ins
mov
xlat
or
mov
call
push
ss
cmp
push
xor
mov
stos
xor
mov
push
into
pop
ss
dec
fimul
push
(bad)
cmp
push
inc
call
pop
mov
mov
mov
aaa
xor
loopne
inc
pop
rcr
sub
add
retf
jno
cmp
jmp
push
outs
hlt
leave
push
inc
inc
jecxz
jo
and
sub
or
push
into
xchg
sub
stos
and
xor
lea
push
push
sub
test
mov
sub
imul
jp
push
mov
stos
(bad)
out
jl
repz
inc
xchg
and
clc
daa
das
xor
add
jg
in
xchg
sub
pop
inc
lods
dec
jnp
cmp
test
out
nop
daa
and
sahf
pushf
adc
rcr
mov
mov
push
mov
mov
add
movs
add
jge
test
mov
or
jecxz
cmp
inc
cwde
pop
sti
sbb
xchg
adc
sbb
jecxz
xchg
push
(bad)
xchg
ja
jmp
push
leave
stos
std
ins
mov
xlat
dec
lods
ret
test
pop
inc
je
test
xor
xor
clc
les
push
jp
mov
fcomi
cmp
or
rcl
jp
mov
pop
shl
push
push
into
fist
in
jmp
mov
jmp
retf
inc
cli
das
dec
mov
hlt
mov
xchg
call
out
xchg
aad
xchg
dec
call
mov
xchg
enter
jo
jbe
mov
xchg
dec
mov
nop
xchg
out
xchg
and
shl
sbb
popa
sbb
xor
xchg
ret
inc
pusha
pop
mov
out
cmps
jae
mov
jnp
sub
or
int3
cs
leave
cwde
and
cmp
cli
xchg
cmc
mov
dec
adc
push
int
fnstenv
mov
shl
test
bound
nop
sub
cld
fs
std
push
pop
jmp
loope
cmp
sar
mov
stos
div
xor
into
mov
movs
hlt
clc
or
idiv
(bad)
mov
jge
stos
mov
dec
mov
push
xchg
xchg
ins
inc
jb
inc
cdq
sub
xor
shr
sub
ret
xor
nop
push
cli
ficomp
pop
mov
jmp
repnz
in
cmp
mov
or
add
aas
dec
push
ds
test
dec
daa
arpl
jge
popf
cli
cli
shl
f2xm1
inc
sub
mov
jb
test
jns
ret
repnz
leave
popf
xchg
xchg
mov
(bad)
std
or
sti
loop
leave
mov
jmp
or
shl
shl
aas
jle
lahf
lahf
cmp
imul
div
clc
mov
movs
test
enter
push
adc
fucomip
test
call
push
fwait
lods
inc
lea
lods
add
jo
jecxz
add
pop
sbb
inc
push
sub
mov
in
retf
fdiv
inc
cmp
xchg
and
shl
mov
pop
je
repnz
es
xor
sti
xchg
sbb
arpl
push
pop
adc
and
gs
in
xor
shl
movs
in
call
inc
test
sub
cld
retf
inc
add
adc
inc
lock
jg
dec
(bad)
cli
call
ror
xchg
loop
mov
data16
inc
sub
repnz
pop
out
add
sub
xor
js
hlt
jns
mov
or
mov
push
cs
rcr
cmp
mov
rol
sti
test
sbb
sub
xchg
inc
icebp
mov
sub
inc
mov
in
mov
push
in
push
stos
pop
sub
aam
lds
(bad)
pusha
into
test
ja
jge
ret
aad
pop
push
ins
fild
mov
sbb
and
cmp
mov
rcr
pop
aas
mov
in
mov
adc
mov
xor
or
xchg
pusha
or
cli
cwde
pop
shr
cmp
outs
add
ss
mov
dec
sbb
sub
je
or
xchg
lahf
xchg
repnz
add
jnp
cmp
bound
(bad)
xchg
inc
jmp
sar
xor
jbe
mov
cmp
fistp
lods
push
aaa
es
in
test
mov
and
sahf
xor
mov
or
sahf
push
(bad)
mov
mov
mov
dec
push
and
in
mov
dec
adc
sub
xchg
clc
popa
mov
jg
add
jmp
and
mov
pusha
leave
pop
add
xchg
mov
lock
js
aad
xchg
inc
mov
jmp
cmp
pop
pop
test
or
xchg
pop
xlat
fnsetpm(287
cmp
aas
mov
adc
xchg
lods
mov
shl
mov
cmp
test
je
clc
mov
adc
mov
(bad)
sti
icebp
inc
aad
aaa
sbb
mov
xor
jecxz
dec
dec
lea
nop
jno
mov
pop
jno
jb
pop
cmp
sti
push
xor
into
stc
idiv
push
out
push
scas
jecxz
pop
loope
icebp
xchg
rcr
dec
sbb
mov
add
fcmovnu
xchg
xchg
out
mov
mov
push
(bad)
lods
fcom
fcomip
adc
xor
mov
xchg
push
xchg
jns
fs
popa
scas
sar
jns
mov
ss
movs
aaa
push
mov
cmp
push
in
mov
int3
xor
xchg
inc
sbb
test
mov
ins
test
xchg
nop
pop
dec
mov
les
shr
(bad)
cwde
out
sbb
outs
(bad)
sbb
outs
xchg
add
sti
sbb
out
mov
mov
fisubr
add
dec
rcl
adc
jns
fisubr
jo
push
cmc
sbb
out
adc
sar
push
in
out
xchg
idiv
pop
loop
mov
ins
push
xchg
sub
adc
mov
pop
mov
push
mov
in
inc
clc
sar
pop
movs
fcmove
cmp
push
retf
(bad)
cli
aas
mov
jbe
xor
or
mov
retf
cmp
stos
mov
lods
sbb
jmp
aas
xchg
dec
sti
push
xchg
nop
or
out
aas
ins
mov
test
and
popa
inc
sbb
sbb
outs
rcr
sahf
sub
jp
jp
adc
and
pop
or
cmps
out
arpl
out
push
stos
sahf
loopne
inc
dec
imul
or
fs
push
inc
xchg
dec
inc
std
sub
mov
cmp
dec
sbb
cmp
aaa
addr16
push
pop
cmc
in
mov
adc
xor
call
pop
jp
cs
in
dec
cmp
jnp
lock
aad
fbstp
lods
in
rcl
call
pop
or
or
les
push
dec
repnz
sub
xchg
aam
ds
jle
adc
enter
inc
inc
hlt
(bad)
mov
xchg
mov
pop
rol
retf
sub
sub
addr16
call
fsub
arpl
sti
sub
mov
fcomp
adc
inc
push
inc
(bad)
mov
movs
mov
retf
ss
jnp
test
jp
adc
push
sbb
aad
push
sbb
xor
(bad)
mov
cmp
mov
inc
jmp
or
pop
dec
sub
loopne
out
cmc
sub
jae
adc
movs
lock
popf
or
xchg
dec
sti
xchg
adc
dec
dec
sbb
mov
ins
pusha
xor
add
test
mov
inc
cmp
pop
(bad)
inc
cwde
add
push
sbb
lea
pop
add
dec
fdivrp
fldpi
jno
adc
pop
mov
cmp
and
jns
not
sbb
ins
scas
jmp
inc
mov
scas
jmp
xchg
arpl
fld
cmp
les
mov
mov
xchg
lock
pop
call
popf
push
int
push
aad
xchg
std
or
das
ret
mov
inc
pop
clc
out
je
or
pop
inc
(bad)
repnz
les
cli
into
cmps
mov
test
ds
jg
out
pop
fild
xor
sbb
jle
add
adc
xor
inc
stos
leave
jecxz
push
je
push
mov
call
mov
push
cld
aam
shl
js
inc
fnstcw
adc
outs
es
sub
sub
push
hlt
jnp
imul
fst
retf
xchg
jge
stc
repz
pop
retf
xchg
fsub
sub
fwait
hlt
out
xchg
sbb
xchg
js
or
mov
stc
add
shl
lods
shl
jmp
jmp
mov
stos
fmul
fidivr
ja
loope
mov
sub
(bad)
in
jg
lea
hlt
pushf
pop
dec
cli
out
inc
stos
repnz
push
sar
jmp
in
das
cmp
lahf
or
out
call
push
lods
bound
mov
out
repnz
jmp
call
bound
mov
adc
sbb
adc
scas
mov
or
pop
mov
inc
ds
cmp
xchg
cmps
cmp
imul
nop
imul
inc
jmp
fwait
jo
stos
push
mov
adc
and
jge
add
pop
arpl
mov
mov
mov
cmp
adc
mov
fsubr
pop
daa
cmp
jbe
add
cmp
cmp
imul
mov
pop
or
push
or
sub
or
cmp
call
dec
jbe
sbb
and
jnp
or
sbb
stos
adc
(bad)
inc
int3
cli
xchg
sub
jecxz
adc
shl
adc
cmps
mov
mov
add
xor
dec
sub
push
imul
add
icebp
inc
test
xor
or
dec
cmp
cld
jecxz
push
mov
mov
cmp
je
call
mov
jb
inc
mov
cmc
add
in
xchg
in
ins
std
add
imul
cmps
dec
push
cmp
cmp
out
ret
add
jmp
(bad)
mov
fsub
and
mov
xchg
aam
push
into
xor
cli
je
mov
cmp
std
mov
inc
jmp
mov
jp
pop
sub
retf
push
outs
scas
pop
ja
(bad)
repnz
xchg
add
sbb
mul
adc
ds
inc
and
mov
or
pusha
mov
leave
adc
cmp
jg
push
push
add
out
cwde
pusha
cmps
adc
sahf
aas
out
loopne
jns
push
mov
lods
mov
int3
xor
sahf
fcmove
adc
sbb
jns
xor
(bad)
xchg
mov
call
add
lea
inc
jne
add
les
retf
retf
add
push
mov
inc
leave
in
pop
(bad)
jmp
sbb
cld
sub
add
je
sbb
ror
or
shl
pop
in
movs
inc
push
jbe
ja
add
stos
dec
les
sub
mov
sub
mov
and
xchg
cmps
cmp
inc
push
ror
aas
dec
(bad)
add
add
push
in
aas
movs
fadd
dec
xor
cmp
in
cmp
fcomp
arpl
inc
push
xchg
arpl
mov
pushf
(bad)
in
(bad)
shr
dec
xor
xchg
mov
int
fdiv
cli
xor
xor
lods
mov
push
push
call
pop
sub
sbb
std
inc
pushf
es
xchg
(bad)
dec
push
and
pop
mov
mov
mov
es
add
data16
pushf
inc
ret
cld
(bad)
(bad)
and
imul
ja
cmc
adc
cmps
(bad)
(bad)
clc
in
imul
xlat
jl
push
xor
movs
mov
leave
enter
mov
and
adc
test
cmp
cmp
push
add
inc
test
clc
xor
inc
ret
jns
mov
sbb
nop
ret
fwait
imul
js
fcomp
add
mov
mov
adc
or
outs
iret
fdivr
jnp
mov
xchg
push
aas
adc
sahf
add
xor
jge
lea
stos
mov
sbb
inc
aaa
ret
cmp
sar
mov
sub
mov
pop
push
push
inc
test
xchg
pop
lahf
mov
mov
dec
int3
iret
and
mov
pop
loopne
sti
xchg
cs
sub
jmp
add
(bad)
pop
paddusb
xor
(bad)
pop
jge
and
push
push
retf
push
ds
cmp
jno
pop
pop
and
or
ret
jae
(bad)
cmp
in
je
ror
ret
jmp
sti
rol
mov
cwde
loopne
mov
dec
in
frndint
in
sbb
outs
xchg
or
outs
jp
inc
inc
stc
sub
fdivp
jne
daa
ficomp
mov
push
mov
mov
mov
cmc
retf
xchg
les
mov
inc
sub
push
repnz
lea
mov
xchg
mov
(bad)
ror
pop
xchg
test
and
imul
mov
imul
inc
xchg
mov
pop
ds
sub
jmp
xor
sti
xor
popa
dec
lea
(bad)
leave
jl
xchg
icebp
jmp
fwait
mov
xor
pop
mov
xor
xor
aas
and
popf
inc
sti
div
gs
pop
cs
add
mov
mov
sub
inc
mov
push
push
rcr
and
ret
mov
sar
push
xor
ds
and
outs
jmp
scas
(bad)
fdiv
xchg
retf
xor
mov
xor
lods
retf
inc
jecxz
cmps
retf
ror
mov
add
jp
inc
push
sub
out
lods
je
mov
push
or
xor
les
dec
mov
jg
mov
dec
sti
lods
xlat
mov
cmp
sti
jo
cmp
sti
ret
retf
test
ds
and
cmps
dec
in
cmp
fst
sbb
nop
jecxz
push
sbb
sub
data16
sahf
add
mov
sahf
out
arpl
jo
fdiv
or
mov
lods
xor
mov
inc
xchg
gs
int3
sub
rcr
add
pop
push
pop
push
jl
inc
inc
mov
test
jbe
jmp
adc
movs
sbb
not
sbb
add
scas
and
jl
xor
in
mov
mov
push
inc
push
mov
jae
adc
xchg
repnz
mov
pushf
push
cmp
cmp
int
jle
fdivp
aam
aas
push
repz
and
mov
loop
cli
xor
popa
push
dec
mov
xor
imul
and
add
jp
cmp
add
loope
jmp
xchg
pushf
retf
add
xlat
sbb
xchg
aas
out
int
(bad)
xchg
in
adc
mov
test
js
xor
mov
cmp
pop
fwait
push
data16
cwde
add
js
jae
pop
cmp
outs
mov
test
retf
js
inc
jbe
rcr
push
lds
mov
jnp
arpl
push
xchg
mov
add
inc
sub
imul
xchg
sub
call
rcr
cmp
(bad)
repz
xchg
sti
out
adc
repnz
xor
inc
and
mov
push
mov
inc
stos
test
outs
mov
mov
cmp
jns
aaa
stc
loopne
jnp
cs
dec
jno
jl
xor
js
pop
nop
adc
retf
push
cmp
arpl
pop
mov
cmp
cli
push
jecxz
rcl
inc
cs
push
push
push
push
sub
xor
pop
pop
mov
mov
aaa
cmp
xor
add
outs
inc
shl
(bad)
enter
aas
xchg
xchg
pusha
je
jge
je
or
leave
xchg
xchg
jmp
ja
inc
popa
xchg
add
aad
stos
cli
sahf
call
call
(bad)
pop
cmps
fiadd
fisubr
scas
aas
je
arpl
arpl
stos
push
pop
add
mov
call
icebp
cli
mov
mov
sti
scas
(bad)
adc
jg
shl
and
outs
xchg
fadd
out
cmp
jmp
lods
xchg
movs
cmp
lock
std
xor
sbb
pop
add
rcr
inc
push
xchg
out
pop
sti
lahf
hlt
cmp
clc
push
(bad)
iret
mov
adc
jae
test
retf
movs
jl
cli
pop
jecxz
pop
sbb
cld
pop
outs
jl
pop
xchg
and
in
mov
aad
test
xchg
sub
(bad)
mov
push
sub
xor
cld
(bad)
test
push
test
ret
call
mov
loop
cmp
inc
cs
add
inc
aaa
mov
movs
mov
pavgb
ficom
lods
out
mul
add
mov
mov
outs
fstp
sbb
cdq
inc
or
fsubr
enter
pop
std
mov
(bad)
cmp
iret
dec
xchg
sahf
shl
cmps
ror
call
xchg
in
and
clc
push
cmps
sbb
mov
mov
call
mov
sbb
popf
stc
enter
add
jne
xchg
scas
retf
scas
rol
xlat
in
jmp
push
das
(bad)
ret
mov
cld
pmuludq
xchg
(bad)
xchg
retf
jmp
sar
jecxz
neg
lods
jbe
popf
test
scas
xchg
adc
iret
leave
ret
sbb
fild
imul
inc
icebp
pop
ret
mov
xchg
in
cld
faddp
imul
pop
mov
pusha
adc
push
sahf
mov
sbb
add
iret
enter
(bad)
sbb
out
jg
push
mov
jge
add
or
mov
es
inc
adc
xchg
mov
push
and
sbb
jnp
fidivr
lea
dec
mov
mov
sub
adc
mov
adc
js
mov
out
xchg
sub
fwait
inc
mov
ret
fdiv
mov
lahf
cmp
dec
fcomp
cli
sahf
test
out
hlt
adc
in
mov
or
xor
into
ret
out
repz
(bad)
out
loope
cmp
call
loop
test
lock
fcomp
mov
add
mov
stos
fwait
inc
arpl
std
sbb
or
pop
mov
mov
dec
mov
retf
lods
jno
js
push
push
sbb
xor
xor
fwait
mov
push
ds
mov
push
ja
xor
xchg
mov
cs
and
xchg
pop
inc
stos
sar
mov
cmp
out
fsub
xchg
imul
xchg
jp
add
jle
cmp
xor
inc
xor
mov
add
aad
mov
out
ret
adc
jle
popa
sar
loope
int3
cli
icebp
jge
dec
inc
out
inc
mov
or
outs
xchg
fidiv
aam
push
rcr
repnz
push
aaa
test
call
adc
jmp
cdq
movs
xchg
fcom
aas
add
and
sub
les
jg
or
mov
and
pop
jne
pmaddwd
cmc
imul
test
imul
sbb
arpl
fidiv
jecxz
call
aaa
int
popa
adc
mov
arpl
lds
call
ss
loope
mov
inc
test
scas
inc
push
sbb
out
enter
mov
and
sub
loopne
scas
(bad)
sbb
mov
inc
cmp
out
mov
xchg
jmp
adc
es
in
cmps
lea
push
push
fs
mov
cmp
out
dec
nop
mov
dec
cmp
repz
ss
in
cmc
pop
inc
and
mov
je
test
shl
(bad)
mov
sub
mov
jbe
aad
stc
cs
shl
jae
pop
xchg
adc
cwde
jns
les
mov
arpl
xchg
jp
inc
test
jns
lods
inc
mov
adc
iret
cmp
bound
arpl
add
out
pop
push
inc
call
lock
cmc
jns
sahf
pop
pop
mov
sbb
mov
stos
mov
ins
jmp
dec
mov
pop
jbe
js
aam
mov
mov
fsubr
stos
pop
sbb
mov
arpl
jae
sub
(bad)
jmp
ins
sub
add
ds
rcl
scas
jns
sub
xor
inc
pop
frstor
test
das
sbb
mov
icebp
cmp
call
aas
retf
adc
add
out
mov
jb
imul
xchg
aad
ficom
lods
sbb
xchg
sub
sti
xor
stc
inc
rcr
repnz
mov
pop
sar
daa
ret
mov
loope
mov
add
into
stc
cmps
sbb
push
ins
sub
jo
(bad)
shl
mov
ja
jmp
movs
mov
xchg
mov
xchg
xchg
add
jmp
retf
imul
es
jns
ins
inc
or
xchg
ror
stos
xchg
mov
jo
xchg
or
pop
mov
int
loope
data16
sub
inc
mov
jle
cmp
jle
dec
mov
ret
push
aas
mul
jl
or
out
xor
mov
dec
mul
xchg
js
and
pushf
or
repz
pop
fnstsw
mov
stc
jecxz
push
data16
push
std
dec
lds
xor
sub
xchg
das
aad
push
jle
push
push
and
mov
outs
out
inc
cli
out
inc
test
stos
rcl
xchg
(bad)
je
push
push
xor
or
pushf
jb
cmp
lods
cmp
sub
cdq
xchg
cmps
nop
xor
adc
inc
sahf
stc
adc
sbb
test
aaa
mov
pop
sbb
pop
imul
jecxz
(bad)
pop
not
jecxz
iret
dec
sub
fnstcw
or
(bad)
xlat
call
fcomp
jle
sbb
sbb
es
pop
aas
push
idiv
sub
sbb
xchg
mov
mov
mov
pop
push
xchg
in
push
cs
test
xchg
fdivr
addr16
popa
imul
dec
dec
movs
call
out
mul
div
ja
int
mul
pop
addr16
lahf
outs
ret
xchg
pop
les
stos
sar
(bad)
into
mul
mov
sub
or
imul
mov
jnp
xor
mov
rol
add
push
scas
rcl
pop
fiadd
aaa
cld
bound
xlat
jge
cmp
pop
or
add
jp
repz
les
mov
cmp
(bad)
push
push
jmp
fucomi
jno
mov
cmp
in
inc
push
pushf
push
fwait
out
and
gs
ds
aaa
xor
xchg
and
cmp
cmp
inc
and
add
mov
add
scas
mov
outs
mov
out
fist
retf
or
loope
jbe
call
mov
xchg
mov
hlt
int3
movs
jo
xor
dec
js
sub
pop
add
inc
dec
mov
fsub
jnp
push
or
lods
sbb
lock
cwde
ret
pop
pop
loopne
int
cld
es
mov
xor
cmps
jae
mov
mov
jae
dec
pop
mov
pop
repnz
aam
clc
pusha
out
sahf
xchg
adc
dec
jns
sbb
nop
sti
push
cmps
jno
pop
bound
mov
add
in
xor
mov
mov
nop
xchg
(bad)
adc
push
daa
mov
cmp
mov
xchg
jae
sub
mov
mov
fistp
dec
lods
mov
sti
push
(bad)
mov
rol
mov
inc
xor
scas
in
cmp
push
mov
pop
bound
dec
push
in
nop
stc
scas
mov
sahf
adc
retf
dec
xor
sti
xor
dec
adc
pop
cwde
jmp
in
int
xlat
xchg
jmp
jb
cdq
repnz
fadd
clc
dec
xor
cmp
shl
mov
inc
add
xchg
adc
xor
pusha
or
sbb
ss
ror
(bad)
mov
shr
jg
mov
xor
fistp
push
scas
scas
mov
aad
fwait
xchg
bound
push
ds
out
mov
and
stc
shl
lods
ins
pushf
lea
inc
sbb
sbb
bnd
mov
cld
fs
loope
add
mov
(bad)
cmp
movs
xor
lea
cmp
aad
ins
jmp
ss
pop
daa
call
(bad)
xchg
cmc
xchg
dec
or
xchg
(bad)
sbb
push
sar
or
sbb
push
xor
movs
mov
or
and
push
adc
outs
(bad)
inc
push
jmp
push
and
or
aaa
ret
fist
out
mov
jno
mov
scas
cld
adc
inc
cmps
aad
leave
clc
clc
enter
out
repz
adc
fisttp
dec
push
jge
(bad)
cmp
loop
loopne
jmp
sti
push
fwait
loopne
aad
mov
pop
or
lar
xchg
jle
(bad)
push
jne
out
cli
jl
int
push
pop
test
push
(bad)
in
fwait
stc
xchg
ret
daa
pop
pusha
xchg
pop
mov
xchg
adc
ret
ss
adc
fidivr
mov
mov
and
mov
mov
gs
dec
sbb
mov
pop
sub
cmp
test
mov
mov
arpl
sbb
inc
das
lock
mov
outs
dec
aas
js
mov
test
sub
scas
shl
jge
cld
and
mov
lods
push
ss
sbb
jge
xchg
mov
cs
jbe
sbb
sbb
mov
push
retf
mov
(bad)
iret
adc
test
out
cwde
popa
xchg
fsub
mov
mov
cmp
adc
push
into
not
dec
das
sahf
ins
neg
xor
repnz
adc
push
xchg
push
sbb
xor
cmp
push
and
test
je
sbb
add
adc
into
jne
adc
inc
push
xor
sub
sub
(bad)
mov
retf
add
mov
push
mov
xchg
fdivr
mov
xchg
fdiv
mov
mov
neg
imul
xor
cmp
cmp
add
xchg
mov
push
outs
push
xchg
pop
add
out
xor
fs
(bad)
add
mov
xchg
hlt
(bad)
push
nop
mov
call
cli
dec
les
ret
cwde
mov
leave
cmp
or
stos
(bad)
jge
and
or
jmp
mov
xchg
dec
sub
aad
cmps
repnz
pushf
push
push
mov
pop
sar
cmps
push
in
pop
jno
setb
inc
jae
jmp
mov
inc
movs
xor
pop
mov
js
pop
mov
mov
jge
dec
nop
inc
push
pusha
fldenv
jle
pushf
shr
cmp
ss
fucomp
psllq
lods
mov
adc
jb
push
js
dec
in
les
push
mov
call
add
xchg
sti
retf
sbb
ret
jb
pop
out
into
mov
mov
pop
dec
mov
push
in
jmp
jo
pop
pop
clc
pushf
push
jmp
sub
push
and
sbb
sub
popa
fist
imul
movs
test
stos
cmp
idiv
ins
mov
call
push
add
pop
mov
lahf
add
out
or
aad
xor
add
int3
and
and
xor
inc
test
pop
or
idiv
retf
fst
xor
cmc
xor
dec
repnz
add
jle
ins
ret
in
sub
push
(bad)
jle
push
jle
(bad)
and
dec
jp
sti
mov
jne
jmp
inc
mov
cli
mov
and
loopne
fcom
int3
fwait
stos
fld
std
adc
repz
call
ss
popf
sahf
(bad)
nop
test
xchg
push
mov
mov
mov
(bad)
mov
jns
xchg
les
xor
test
hlt
shr
stc
repz
or
xchg
ins
xor
push
sti
sahf
fld
sbb
stos
out
pushf
bound
mov
(bad)
cmps
mov
stos
xchg
push
in
outs
xor
or
add
test
push
xchg
lods
aam
xchg
popa
pusha
imul
push
leave
dec
iret
and
and
aam
push
inc
ret
sahf
outs
pop
mov
call
dec
mov
(bad)
ss
mov
pop
arpl
in
cli
(bad)
add
std
(bad)
xchg
lds
cs
mov
adc
xchg
jne
retf
mov
stos
outs
pop
sbb
test
and
add
cmp
mov
and
mov
dec
sub
test
mov
cwde
lahf
adc
sub
(bad)
mov
scas
lds
cmp
sbb
jo
inc
cwde
mov
inc
lods
(bad)
and
in
inc
sub
sub
or
xor
mov
dec
lock
jecxz
lods
stc
push
cmp
bnd
pop
fcom
mov
adc
jmp
sbb
xor
jp
mov
pop
cmp
dec
fsub
xchg
mov
jmp
jle
xor
jle
mov
(bad)
fadd
push
in
test
iret
ins
mov
push
imul
mov
mov
mov
inc
cmp
mov
loope
pcmpeqd
loope
jle
xor
(bad)
pusha
cmp
data16
test
pusha
mov
cmc
fidivr
out
fisub
xchg
outs
sub
aas
cmc
push
rcr
or
pop
push
sbb
push
outs
jle
sub
popf
int
push
aad
outs
js
daa
pop
mov
mov
jmp
sub
icebp
std
ret
mov
loop
adc
inc
xor
mov
jns
ins
and
mov
mov
fstp
idiv
(bad)
in
xchg
and
dec
into
and
mov
enter
jmp
sbb
in
mov
sub
sub
push
sbb
das
mov
data16
adc
dec
movs
std
iret
push
mov
dec
mov
inc
test
mov
xchg
popa
pop
sub
xchg
dec
adc
and
imul
mov
add
xor
mov
xchg
or
stc
sbb
dec
ds
lock
xchg
data16
arpl
xchg
xor
nop
jle
add
mov
iret
retf
repnz
xlat
sub
jnp
push
jae
jns
lods
in
xor
add
inc
mov
xchg
fwait
mov
push
in
push
mov
data16
dec
and
xchg
sub
retf
mov
and
pop
fisttp
cwde
imul
sub
int
pushf
fisub
mov
mov
popf
pop
pushf
int
out
(bad)
mov
cmp
aad
daa
xchg
mov
sbb
retf
hlt
add
and
fisttp
outs
pusha
jnp
pop
retf
adc
pop
aam
jmp
leave
ds
sub
jmp
or
in
popa
cmps
pop
inc
les
mov
scas
(bad)
cmp
cmp
lock
add
mov
leave
addr16
cmps
imul
jp
jmp
jne
cmps
sbb
pop
sar
jge
lock
pusha
xchg
sub
xchg
stos
cmp
inc
stc
int3
lahf
dec
aad
outs
daa
nop
sbb
imul
popa
call
cwde
jmp
mov
jmp
icebp
stc
inc
pusha
(bad)
nop
or
jp
clc
sti
xor
dec
pop
and
retf
retf
bound
and
mov
and
fidiv
aaa
out
out
imul
hlt
jg
jmp
jl
fcom
push
test
mov
xchg
sbb
add
icebp
cwde
push
test
xchg
push
mov
push
arpl
in
jl
dec
retf
xchg
xchg
mov
fldenv
xchg
push
pop
ss
sub
mov
fdiv
in
jmp
test
popf
repnz
xor
and
cld
pmulhuw
retf
in
cld
inc
loope
mov
js
inc
(bad)
in
cmp
sub
test
mov
rol
pop
mov
mov
pop
and
imul
xor
cs
ja
or
shr
loopne
outs
push
rcl
rcr
mov
les
xor
xor
arpl
jbe
push
in
dec
adc
call
xchg
adc
inc
or
call
rol
mov
test
int3
iret
lahf
fcom
add
fld
or
xlat
xor
xchg
shl
inc
repnz
xchg
xchg
ror
cmp
cdq
sahf
(bad)
jl
into
retf
adc
aam
jne
xor
nop
aam
std
pop
add
jb
push
cmp
loope
loope
div
sti
lock
pop
into
sub
mov
adc
cld
sub
mov
add
ds
out
dec
lods
or
or
imul
repz
(bad)
mov
sbb
rcl
fnstsw
add
ret
adc
(bad)
daa
fbld
mov
pop
lds
cld
stos
ds
std
pop
ror
sub
loopne
sub
mov
cs
jl
dec
(bad)
les
xor
sub
in
loopne
jl
cmps
mov
lea
push
jge
popa
fadd
imul
repnz
jmp
or
xchg
jo
sub
and
movs
icebp
cld
or
adc
ror
ds
shl
in
xor
jae
sbb
(bad)
call
fisttp
retf
inc
and
stc
fmul
mov
jmp
mov
(bad)
push
mov
nop
or
movs
repnz
jnp
int3
jl
clc
shl
nop
pop
(bad)
je
pop
mov
ins
ja
mov
fadd
jns
loopne
cmps
sbb
popf
fild
or
cmc
mov
push
sbb
ss
cmp
cs
dec
shr
mov
jg
fcomp
cmps
call
out
push
stc
push
add
push
mov
scas
lock
dec
pop
cmp
outs
inc
fisttp
outs
jns
dec
cmp
jne
popa
jl
inc
adc
scas
push
popa
call
push
ja
ins
pop
outs
imul
in
out
xchg
jmp
xchg
or
inc
imul
adc
mov
ds
ficomp
adc
jge
(bad)
enter
jp
mov
sahf
test
jl
sbb
bound
aaa
and
push
pop
mov
les
fsubr
mov
mov
inc
xchg
arpl
ret
cld
pop
sti
daa
stos
jp
jb
dec
retf
out
lock
scas
sub
jae
out
cmp
mov
sub
jnp
ja
lods
int3
cmc
sub
xor
mov
dec
daa
lea
call
dec
outs
mov
stos
fdiv
je
rol
cld
cdq
out
scas
and
out
out
mov
mov
or
dec
ror
scas
lods
mov
mov
jge
in
inc
sbb
(bad)
jo
ret
mov
pop
and
xor
mov
or
jg
inc
ret
test
jp
(bad)
and
loope
push
lods
mov
adc
xchg
push
jmp
pop
cmp
lds
adc
sub
(bad)
addr16
jmp
push
add
repnz
in
idiv
sub
jmp
cmc
cmp
nop
bswap
push
xchg
xchg
cdq
mov
retf
(bad)
push
int
cmp
into
std
out
loopne
not
dec
gs
jnp
jmp
das
ss
inc
pop
jg
(bad)
mov
dec
xchg
lods
jo
iret
das
mov
(bad)
movs
inc
sahf
mov
pop
repnz
pop
sub
sahf
(bad)
int3
jmp
adc
loope
lea
adc
stos
mov
sub
cmc
jno
in
mov
and
cwde
test
mov
push
pop
adc
jb
sti
(bad)
or
imul
cld
inc
jge
out
push
pushf
jmp
dec
sahf
mov
ds
inc
enter
fadd
cmp
push
ds
mov
add
scas
jno
outs
pop
loopne
push
push
out
bound
addr16
das
sbb
or
push
mov
in
xor
mov
jge
les
les
ret
cmp
cs
and
out
adc
mov
xlat
out
add
mov
or
sbb
push
jmp
push
test
cmp
and
cmp
push
xchg
arpl
out
daa
lea
out
std
sbb
test
gs
xchg
dec
fild
mov
imul
xchg
push
ret
out
add
or
lods
xchg
sahf
cli
daa
pushf
std
(bad)
out
popf
and
jp
xchg
test
hlt
sbb
push
mov
out
cmp
shr
sar
xor
test
(bad)
sbb
iret
mov
mov
or
(bad)
sub
dec
jbe
jp
imul
iret
rol
mov
fs
mov
aad
enter
shl
mov
xlat
cmp
sub
aad
xor
and
mov
fdivr
inc
int
xchg
xor
mov
test
inc
test
sahf
pop
sbb
or
pop
mov
ins
scas
xchg
int3
fs
inc
sub
mov
aam
xchg
jmp
jl
int3
ins
movs
jb
or
repz
mov
(bad)
dec
mov
mov
mov
xchg
dec
out
lds
loope
sbb
cmps
push
push
mov
dec
fwait
and
hlt
push
repz
int
push
out
daa
test
icebp
pop
push
popf
(bad)
pop
xchg
mov
mov
push
dec
and
les
shr
adc
dec
rcl
mov
jle
les
loopne
xlat
xchg
(bad)
cld
xor
lahf
pushf
stos
arpl
push
pop
test
xchg
push
jns
(bad)
pop
shl
add
ja
or
jb
add
mov
loopne
push
pop
jns
pushf
sbb
les
pop
cli
stos
push
cwde
in
pop
loop
icebp
(bad)
test
sahf
ret
xchg
movs
dec
arpl
mov
stos
cmp
mov
sahf
rcl
add
inc
stos
mov
pusha
addr16
xor
and
out
es
dec
mov
mov
inc
push
adc
pop
xor
mov
retf
(bad)
mov
out
loopne
cmp
xchg
adc
aas
loope
cmp
mov
mov
dec
popa
call
xor
in
jmp
clc
fdiv
xchg
out
ins
mov
test
cmp
xor
mov
xchg
add
cwde
cmp
cmp
and
out
adc
xchg
pop
pusha
nop
pushf
stos
push
xlat
popa
pop
xor
adc
cmp
xchg
mov
mov
fistp
or
pop
(bad)
mov
test
imul
in
test
fdiv
adc
mul
push
push
xchg
rcr
and
xlat
sbb
sbb
ds
and
iret
ins
jne
push
shl
dec
inc
(bad)
fst
sub
mov
div
and
dec
sbb
sbb
push
and
jne
sub
sbb
mov
mov
fsub
ja
mov
sbb
cmp
mov
xor
adc
xor
shl
and
xor
xchg
and
sub
and
mov
pop
and
repz
das
test
sub
inc
or
jne
push
movs
cs
int
daa
mov
push
gs
cmp
stc
jmp
add
add
movs
sbb
sbb
sti
scas
pop
aas
cld
push
mov
(bad)
jmp
inc
adc
sbb
cmp
push
or
inc
add
xor
mov
xor
sub
das
jmp
pop
test
nop
aas
lock
jge
sbb
mov
cld
(bad)
hlt
cmp
je
push
(bad)
in
xchg
xor
cmps
lods
mov
cli
std
adc
xchg
rol
shl
mov
rcr
shr
inc
sar
cwde
mov
pop
fadd
mov
aam
sbb
mov
into
push
test
cmp
mov
clc
dec
mov
je
mov
scas
push
push
inc
or
scas
mov
xchg
sahf
retf
push
cmp
adc
adc
jne
or
sar
(bad)
inc
les
pusha
pop
shr
and
adc
loop
mov
add
pop
addr16
dec
in
cmp
out
lds
rol
repz
pop
sbb
push
push
gs
sub
push
lahf
mov
mov
mov
or
fcomp
push
dec
cld
add
jnp
add
xor
dec
gs
pop
xchg
mov
in
jbe
pop
loopne
out
mov
into
jl
xchg
pusha
scas
fwait
jae
out
loope
loopne
fwait
push
pusha
(bad)
xor
in
fistp
jmp
sub
popa
in
arpl
neg
gs
sbb
sar
ret
sub
mov
ficomp
inc
pop
mov
push
mov
push
sub
test
add
mov
xchg
(bad)
push
(bad)
mul
addr16
(bad)
xlat
xor
cmp
cs
fdiv
aam
fldcw
scas
test
(bad)
in
adc
fwait
imul
xlat
jmp
out
psubusb
jnp
ins
jmp
fsubr
dec
add
sbb
shr
mov
out
bound
inc
push
mov
movhps
sahf
popf
xchg
loop
mov
pop
retf
(bad)
inc
scas
rol
icebp
jbe
mov
jnp
movs
mov
lds
lahf
lods
xchg
into
das
repnz
scas
sar
scas
xchg
scas
push
scas
ins
push
and
(bad)
scas
icebp
sbb
pop
sub
ror
fistp
adc
and
mov
mov
ins
pop
push
push
arpl
or
push
retf
sbb
mov
div
push
(bad)
scas
inc
cmp
sub
inc
mov
pop
ss
ficomp
jg
ror
sbb
cmc
unpckhps
loopne
les
mov
ret
xchg
push
ficom
stos
push
jne
fs
pusha
push
mov
ret
dec
mov
sahf
mov
ficom
bswap
fdivr
test
xchg
(bad)
sbb
fs
mov
push
mov
outs
pop
enter
in
push
imul
test
inc
xlat
or
repnz
aaa
xchg
stos
mov
and
and
lahf
jbe
add
mov
and
jbe
cld
or
lods
mov
add
push
adc
inc
aas
sub
clc
and
in
cmp
call
das
or
fisttp
mov
das
int3
and
mov
retf
mov
add
sub
int
inc
(bad)
xchg
pop
mov
repnz
jns
pop
jmp
cmp
xchg
out
xchg
ficomp
xchg
in
add
dec
jmp
sbb
pushf
pop
mov
dec
lock
dec
dec
rcl
cmp
jl
or
jmp
ds
jg
sar
lods
ins
in
into
and
arpl
or
sub
jg
jmp
mov
in
mov
loope
jl
sub
jg
mov
inc
call
dec
(bad)
sub
xor
cmp
lods
mov
jmp
mov
nop
je
sti
outs
dec
outs
into
dec
jnp
sub
jno
or
jne
and
imul
mov
pop
xchg
cmp
js
cdq
movs
and
sti
das
or
call
ficomp
cs
popa
pop
in
je
jb
mov
sub
sahf
cs
in
mov
js
rol
adc
outs
sub
pushf
cmp
mov
retf
mov
dec
fbstp
(bad)
(bad)
sbb
cwde
cmp
dec
or
pop
add
inc
rcl
test
in
xchg
sub
mov
ins
lock
retf
cmp
je
inc
push
jl
mul
xchg
lods
inc
sahf
cmp
mov
ins
aam
(bad)
inc
xchg
imul
outs
(bad)
retf
mov
mov
sahf
rol
retf
icebp
mov
nop
or
stos
test
jl
adc
dec
mov
xchg
xchg
xor
call
sbb
and
ret
in
fs
mov
cdq
jl
iret
adc
sbb
imul
inc
in
cmp
jo
push
sub
loopne
sub
adc
out
jle
push
xlat
dec
cmp
rol
xchg
inc
es
pop
or
fiadd
movs
inc
test
inc
adc
clc
test
pinsrw
js
mov
mov
inc
fdivr
jns
imul
pop
je
out
and
cmp
lods
mov
sub
leave
hlt
retf
je
inc
nop
sub
and
dec
mov
std
xor
fsubr
or
stos
scas
mov
addr16
and
es
and
imul
loop
mov
pushf
ds
dec
stos
hlt
mov
or
popf
ror
hlt
or
jns
mov
dec
int
aam
pop
sub
mov
out
popf
pusha
in
push
cmc
aam
push
push
(bad)
imul
push
sbb
retf
mov
retf
nop
(bad)
pop
das
add
mov
jmp
in
das
dec
adc
inc
(bad)
lods
in
(bad)
gs
jbe
lds
dec
or
sub
push
push
aam
and
adc
cmps
lods
test
mov
aam
xchg
fisttp
fld
in
shl
popf
das
sub
jge
ror
inc
mov
add
inc
mov
pushf
neg
or
daa
aam
es
test
add
je
ins
xor
jno
mov
push
mov
cdq
hlt
ja
cmp
int
mov
loopne
setl
data16
push
mov
aas
xor
mov
pop
push
sub
dec
mov
dec
ins
sub
mov
retf
repnz
add
daa
addr16
arpl
xor
stos
enter
sti
jmp
cdq
iret
(bad)
inc
cmp
or
je
xor
or
retf
scas
xchg
(bad)
sar
jmp
xchg
sub
js
lods
std
jb
xor
sbb
loopne
jecxz
jp
cmp
sbb
xor
cmp
pop
fidiv
cmp
jne
fbstp
sbb
int3
fcomp
mov
shl
cmp
movs
jecxz
clc
repnz
dec
fsub
loop
mov
call
mov
xor
aad
mov
clc
(bad)
retf
outs
lea
repnz
pop
sub
jge
in
push
mov
ret
lds
mov
adc
popa
imul
xor
sub
int3
and
push
out
cwde
mov
xchg
xchg
push
cmps
(bad)
repnz
push
pop
rcr
les
or
int
add
sub
mov
hlt
daa
ret
cld
sub
pop
dec
xchg
pop
scas
and
jbe
mov
add
dec
jns
scas
cmc
sub
add
inc
pop
lahf
loope
adc
add
jge
mov
das
(bad)
jmp
jno
jg
pop
mov
hlt
bnd
lods
retf
lods
mov
sti
xchg
jge
cmp
cmp
test
div
stc
les
int
mov
fwait
dec
(bad)
inc
mov
sub
mov
(bad)
retf
dec
push
mov
clc
mov
xchg
fwait
aas
retf
movs
and
ss
lock
retf
or
pop
shl
adc
mov
out
mov
loope
out
inc
imul
jecxz
push
fistp
jmp
in
outs
pop
push
add
lahf
test
lahf
inc
xor
rcl
sbb
sbb
mov
fnstsw
clc
adc
aaa
inc
rol
jecxz
ins
or
xchg
(bad)
inc
les
cld
add
nop
pusha
aam
mov
out
ins
sub
mov
aam
mov
adc
ins
les
retf
mov
mov
mov
int
jmp
scas
repnz
les
inc
push
gs
dec
loope
lods
ret
(bad)
(bad)
fs
cmp
or
add
loop
add
jle
and
xchg
rcr
stos
rcr
mov
lahf
dec
push
cwde
dec
push
stos
bound
jmp
out
jne
(bad)
push
std
fild
lock
or
aam
add
jecxz
fisubr
pop
and
in
add
push
jns
cmp
mov
xchg
add
sbb
ds
mov
out
retf
sbb
rol
sti
into
or
mov
stc
(bad)
enter
retf
xor
(bad)
leave
dec
adc
push
fsubr
sbb
jmp
sbb
aam
movs
cdq
ror
dec
xchg
mov
arpl
pusha
test
nop
xchg
sti
adc
or
js
call
aaa
ret
sbb
jecxz
and
retf
sbb
fcomip
das
mov
sti
and
inc
sbb
outs
jmp
in
push
xor
in
mov
sbb
pop
in
cmp
adc
inc
or
mov
pop
and
rcr
popa
arpl
mov
nop
pop
pop
jl
ja
add
sti
out
or
or
pop
jmp
jmp
adc
mov
out
xchg
push
int3
inc
add
xchg
dec
push
dec
rcl
popa
nop
inc
loop
arpl
mov
jecxz
popa
push
mov
ret
jmp
out
gs
add
or
data16
xcrypt-cfb
cmps
mov
aas
(bad)
popa
ret
push
dec
sub
mov
mov
mov
nop
sahf
stos
cmps
daa
or
ret
mov
int
in
ret
pop
push
jmp
xchg
xchg
out
test
mov
pop
mov
in
nop
sar
movs
(bad)
js
test
xchg
gs
push
mov
scas
sbb
(bad)
mov
sub
dec
sub
mov
inc
out
outs
mov
mov
push
fwait
mov
retf
cld
sar
add
cmps
xor
cmp
adc
mov
xor
in
repz
ror
xchg
push
lds
sub
adc
(bad)
sti
paddq
sbb
xchg
daa
ret
std
aam
dec
jge
push
les
xchg
push
or
adc
out
jno
in
mov
push
jle
imul
push
mov
jge
retf
sub
sbb
dec
add
and
mov
or
sbb
pmullw
push
(bad)
jmp
push
inc
pop
push
nop
stc
mov
inc
sbb
push
fdiv
and
cli
out
mov
adc
aaa
mov
xor
jae
stos
and
nop
in
pop
idiv
mov
stos
sbb
jno
dec
mov
je
test
jnp
in
rol
push
mov
mov
jp
mul
ror
dec
pushf
test
js
repz
and
popa
shl
mov
sub
xlat
pushf
jns
xor
push
sbb
in
xchg
mov
fs
repz
sub
xor
out
out
mov
pusha
mov
ins
sbb
(bad)
push
cdq
retf
or
mov
fsubr
imul
retf
mov
stos
jnp
adc
aaa
mov
les
cmp
nop
outs
shl
std
mov
add
rcl
mov
adc
or
or
or
mov
daa
in
xchg
ror
mov
mov
daa
fist
xor
aaa
jo
lahf
cmp
aam
xor
push
cwde
lock
rol
and
movs
mov
and
xchg
gs
data16
popa
jb
lods
or
mov
outs
sbb
cmp
popf
pop
aaa
cmps
int3
das
sbb
shl
sbb
jbe
adc
pop
les
and
cli
mov
repz
push
pusha
push
cli
mov
pusha
retf
adc
mov
sar
shr
lock
xchg
test
pop
aaa
jecxz
or
add
mov
mov
shl
xchg
jnp
jmp
pop
xchg
fxch
out
test
xchg
enter
ret
and
push
inc
test
into
xchg
add
or
mov
pop
jl
add
push
mov
pop
aas
xchg
mov
and
jbe
xchg
movs
xlat
inc
mov
mov
inc
adc
stos
pop
dec
pop
mov
dec
and
jmp
mov
lock
loopne
dec
ret
dec
adc
(bad)
call
ret
pop
mov
dec
lds
xlat
shl
or
mov
jne
(bad)
mov
retf
out
in
cli
scas
jb
mov
ins
sbb
sub
mov
inc
xlat
movups
mov
jno
jnp
mov
jns
pop
sbb
dec
ins
ret
add
ja
ds
mov
outs
xor
add
cmp
test
iret
scas
cli
dec
shl
xor
or
sub
test
(bad)
sub
scas
jecxz
jg
cmp
mov
cmc
ret
push
retf
xchg
xor
xor
(bad)
adc
rcr
(bad)
jae
dec
sub
or
or
inc
addr16
xor
retf
ds
cmp
adc
cmp
or
cmps
cmp
cmps
xchg
sbb
test
movs
les
pop
inc
repnz
out
fs
jmp
test
push
or
ret
repnz
aad
pop
sub
sub
sub
sti
add
push
test
lods
aas
mov
and
enter
sar
test
in
(bad)
push
add
js
push
ja
dec
lea
arpl
(bad)
(bad)
ror
std
push
ins
adc
jp
lds
add
jns
ror
cdq
cmp
jl
ja
rcr
mov
push
shl
ss
icebp
add
xchg
inc
pop
cmp
fisttp
movs
rol
jp
inc
adc
lahf
pushf
xor
sub
addr16
int
add
int
mov
dec
or
retf
pop
daa
cmp
mov
sub
adc
sub
sub
add
addr16
cmps
nop
jmp
inc
neg
xchg
rdmsr
mov
fild
test
xor
add
imul
sahf
fsubr
repz
dec
adc
loop
pop
mov
cmps
ret
jo
dec
(bad)
not
add
cmc
popf
xchg
and
pop
push
dec
cmp
test
mov
push
stos
rcl
cwde
fwait
loop
jne
push
pop
out
(bad)
dec
retf
push
fistp
or
mov
push
lahf
jnp
sub
mov
stos
mov
shl
outs
mov
in
shl
hlt
fdiv
shl
mov
mov
cld
mov
sbb
fcom
jmp
mov
les
sti
or
aaa
ror
nop
pop
inc
in
cmove
inc
shr
or
popf
and
rol
or
sub
mov
(bad)
dec
ret
add
xchg
or
and
lahf
add
mov
push
pop
aaa
arpl
cmc
loope
dec
popf
mov
enter
ins
movs
leave
loop
xor
pop
mov
push
jns
cmp
sar
pop
loope
cmc
xchg
sahf
mov
jbe
iret
push
iret
sbb
dec
sahf
neg
jmp
fwait
cmp
mov
xchg
mov
jnp
mov
aaa
sqrtps
mov
fmul
mov
pushf
add
or
ja
cwde
jmp
inc
scas
(bad)
addr16
fistp
jmp
push
repz
dec
addr16
inc
adc
push
jg
sar
(bad)
or
mov
call
lock
sahf
rcl
scas
repz
mov
repz
nop
lods
sub
xor
popf
and
jle
cmps
and
stos
mov
setae
fs
(bad)
movs
mov
movs
mov
xchg
shl
push
test
push
repnz
xchg
popf
fs
arpl
(bad)
fwait
cmp
outs
jmp
(bad)
mov
loopne
jge
cwde
jbe
pop
(bad)
ficom
stos
sub
sbb
xor
scas
div
test
jns
or
jns
sbb
gs
jmp
les
in
xor
push
lea
in
push
ins
into
adc
movs
jae
bound
mov
retf
es
cmc
mov
mov
add
add
or
ficom
in
mov
and
xor
test
and
cmp
push
and
aas
jecxz
test
adc
retf
or
inc
lods
aaa
je
inc
test
in
sbb
cdq
add
lods
and
mov
sbb
les
push
mov
mov
pop
cdq
xchg
repnz
das
ds
lods
fcmovne
int3
jmp
rcl
lahf
fmul
lds
push
sar
fdivr
fnstenv
(bad)
jo
push
push
push
sub
ficomp
sti
hlt
dec
jl
and
cmps
test
and
mov
or
xor
cmp
push
jno
dec
cmc
push
mov
mov
push
stc
mov
icebp
xchg
pop
loope
adc
pop
not
jle
or
inc
call
adc
mov
movs
mov
lods
pop
mov
jns
sub
mov
shr
cmp
jle
aam
adc
dec
imul
clc
shl
mov
in
lods
mov
out
dec
clc
or
sub
out
xchg
sub
call
and
xchg
and
mov
bound
cmps
xchg
pop
daa
sub
scas
or
push
inc
push
or
inc
xchg
add
cmp
lods
lahf
in
lahf
(bad)
rcr
test
loop
jns
adc
je
pop
inc
mov
mov
cld
adc
mov
in
xchg
dec
push
sub
stos
and
jnp
cdq
sbb
(bad)
cld
adc
imul
pop
scas
aas
js
mov
dec
xchg
add
test
pop
jb
ret
xor
fcomp
mov
out
xchg
cmp
inc
fwait
ins
sti
inc
or
pop
push
cmp
mov
ins
mov
cmp
push
mul
stos
xchg
rcr
adc
(bad)
in
dec
adc
dec
add
jle
fs
pop
icebp
xchg
lods
push
ret
pop
mov
mov
cwde
inc
(bad)
pop
loop
sub
jg
push
sub
call
add
repz
or
sub
nop
jle
jp
adc
repnz
ficom
popf
or
adc
jp
dec
cmp
out
or
mov
xchg
cmps
sub
cld
dec
cdq
xor
jge
clc
scas
inc
ret
pop
mov
in
push
mov
les
outs
(bad)
outs
mov
mov
ficom
xchg
xor
pop
xor
loope
jns
push
dec
sti
push
lock
pop
(bad)
fiadd
aam
into
and
mov
xchg
call
push
sub
test
mov
push
mov
jns
aad
fistp
cmc
loope
add
leave
cmp
xor
push
dec
out
mov
mov
mov
test
not
jmp
call
(bad)
not
pop
pop
xchg
adc
cli
in
inc
call
mov
das
int
(bad)
out
addr16
xor
inc
inc
shr
addr16
adc
xor
adc
mov
loop
mov
inc
adc
aad
mov
outs
jmp
xchg
dec
loopne
add
fild
push
out
mov
or
sbb
mov
jl
scas
in
(bad)
and
cdq
sbb
add
add
pusha
fcom
dec
pop
shl
ffreep
mov
adc
xchg
ins
mov
mov
test
push
movs
sbb
in
push
test
out
mov
or
mov
gs
stos
dec
lock
adc
mov
jmp
std
pop
add
dec
dec
push
icebp
push
out
repz
jge
push
sbb
mov
pop
stos
outs
jmp
mov
(bad)
dec
jbe
popa
inc
(bad)
stc
jle
mov
inc
push
add
stc
and
fmul
dec
push
pop
push
cld
std
sub
sub
jge
mov
mov
cmps
in
pop
or
movs
push
shr
ss
mov
add
mov
out
dec
xchg
mov
fsubrp
mov
sbb
jb
and
sti
es
call
imul
out
jmp
aaa
inc
cmp
jne
jp
xchg
xchg
out
mov
push
in
mul
xchg
stc
out
pop
dec
add
or
jo
mov
test
std
mov
xor
jbe
or
push
sar
xor
inc
nop
out
pop
out
mov
or
push
jmp
fs
mov
jmp
xchg
sub
jnp
or
loop
xchg
adc
or
push
pop
or
sub
xor
and
push
or
push
jge
push
jge
cs
pop
mov
into
mov
mov
pop
mov
shl
cmp
repnz
inc
xlat
cmps
jb
push
dec
cmp
push
xchg
popf
clc
push
cmp
mov
aas
jge
mov
xchg
retf
fistp
gs
icebp
es
jmp
xor
or
sub
aas
out
in
push
dec
daa
fwait
add
inc
int3
mov
lods
icebp
sub
stc
mov
enter
daa
cmp
dec
jl
dec
ins
jns
hlt
xchg
xchg
ret
inc
leave
mov
out
pusha
dec
pushf
repnz
in
call
repnz
dec
in
xchg
inc
movs
cmp
adc
and
ds
adc
pop
(bad)
aam
jp
sbb
je
or
loop
loop
pushf
push
retf
hlt
stc
add
inc
gs
cld
jecxz
(bad)
sub
dec
add
or
xor
xchg
cli
xchg
test
call
mov
mov
sub
cmps
xchg
and
mov
cmp
mov
adc
loope
ja
cmp
sbb
ret
mov
sub
std
push
jnp
stc
(bad)
aaa
in
test
nop
or
(bad)
push
dec
lock
dec
and
ret
aad
xchg
push
or
push
loopne
xor
mov
retf
dec
sahf
mul
mov
cmp
test
mov
pushf
dec
lds
dec
int
and
fmul
pushf
push
das
inc
int
in
(bad)
out
rcl
loopne
mov
loop
out
test
cmp
shl
sbb
mov
mov
js
stos
push
xor
mov
fwait
jns
nop
mov
add
repnz
(bad)
mov
mov
adc
aaa
(bad)
xchg
cld
ds
mov
cmc
xchg
sti
movs
popf
jno
lea
lods
lea
int3
jnp
or
jbe
mov
sbb
cmp
cmp
es
cmp
lock
push
stc
add
xor
inc
xlat
cmp
sbb
pusha
popf
jp
xor
mov
loop
dec
jne
in
fwait
(bad)
add
cs
out
outs
sbb
mov
(bad)
clc
aam
aam
repnz
cdq
sub
jno
stos
addr16
and
sbb
mov
cmp
inc
fs
inc
les
push
inc
in
fisubr
inc
push
mov
xchg
fisub
int
sbb
add
push
pop
add
maskmovq
div
ret
gs
pusha
mov
jo
xor
cmp
jl
jb
call
pop
ret
cli
fisub
xchg
and
das
xor
push
scas
fwait
and
movs
sbb
mov
or
fs
mov
out
cs
jg
dec
out
mov
jle
je
xor
repnz
sub
call
xor
ins
sbb
pop
repz
ret
push
imul
pop
scas
lock
pusha
jae
ins
inc
loope
(bad)
cmp
jb
call
sbb
cmp
addr16
lock
pop
(bad)
dec
mov
mov
sub
mov
xor
jae
mov
jne
fsub
sbb
mov
(bad)
int
retf
aas
xchg
lods
idiv
outs
fnstsw
div
jp
dec
ret
sbb
jns
(bad)
out
cs
sbb
(bad)
out
scas
js
xchg
adc
mov
inc
test
int3
test
arpl
lahf
addr16
pop
adc
mov
mov
stos
rcr
mov
(bad)
and
push
dec
into
push
mov
sbb
xchg
pushf
or
xchg
xor
(bad)
out
or
std
inc
push
repnz
gs
call
lahf
mov
jmp
and
cmps
jle
aad
mov
push
jmp
retf
(bad)
rcl
jge
cld
mov
inc
out
jl
mov
mov
dec
xchg
ret
fisttp
daa
push
cmp
cmp
mov
div
cdq
out
lock
sti
cld
sbb
add
mov
or
fst
imul
mov
mov
xor
popf
(bad)
fstp
jne
loope
jg
sub
xor
fld
dec
imul
ins
mov
iret
and
test
jmp
jg
pop
loope
loop
out
iret
jge
pushf
cmp
mov
movs
vphaddwd
mov
int3
inc
jecxz
xchg
add
sahf
in
fidiv
sbb
fs
push
adc
inc
push
mov
mov
mov
dec
jbe
pop
jmp
push
frstor
mov
mov
cmp
adc
pop
ins
leave
fmul
leave
in
sub
inc
cwde
sub
in
xchg
in
pop
fs
rcr
push
cs
lods
mov
mov
ja
push
adc
sbb
(bad)
push
cs
xor
bound
mov
fild
or
sub
jecxz
cmps
jne
mov
lock
lock
add
stos
inc
mov
add
mov
dec
push
add
mov
cli
loop
mov
xlat
ja
add
mov
stc
test
test
cs
pop
sub
xchg
mov
jnp
mov
jl
ds
push
lods
pop
or
cmp
xchg
mov
call
jle
sub
movs
xchg
enter
adc
retf
xchg
out
xchg
std
mov
cld
mov
jae
dec
sbb
scas
add
jl
repnz
mov
(bad)
sbb
pop
es
scas
ins
lods
pushf
xchg
jo
add
jl
pushf
xor
(bad)
and
stos
sbb
xor
cmp
xchg
jmp
add
aad
adc
push
mov
in
(bad)
fbstp
sub
push
pusha
pop
jg
cmp
sub
xor
fcmovnb
or
adc
cwde
cmp
mov
fbstp
mov
fwait
mov
sub
jge
push
push
jmp
(bad)
mov
xor
out
mov
mov
dec
scas
mov
push
shl
pop
add
xor
cmp
sbb
inc
mov
in
pop
das
rcl
sbb
arpl
data16
stc
in
addr16
cmp
add
movs
jmp
gs
adc
push
jg
shr
and
retf
adc
sar
jmp
mov
mov
cmp
xchg
js
push
ins
xchg
sti
rcl
pop
hlt
mov
sub
dec
and
daa
fisubr
enter
(bad)
jbe
xchg
addr16
sahf
push
dec
loopne
sub
int
jae
hlt
sub
ja
xchg
pop
popf
sbb
fiadd
sub
out
cmp
pop
retf
or
ret
dec
mov
adc
or
adc
xchg
xchg
jmp
add
std
sti
scas
xor
mov
stc
inc
aad
(bad)
add
nop
pushf
and
std
in
mov
xchg
in
fdiv
stos
mov
mov
comiss
dec
push
outs
push
cmp
(bad)
pop
retf
loope
aam
lods
pop
mov
pop
out
leave
fidivr
dec
retf
stc
xchg
cmp
lock
mov
mov
pop
clc
das
loopne
dec
jns
retf
fsub
push
cmps
out
scas
fmul
mov
fcmovbe
leave
mov
push
mov
aaa
iret
inc
in
sbb
bound
inc
lahf
push
adc
test
gs
repz
mov
sub
js
test
daa
adc
mov
rcr
adc
std
sbb
sbb
(bad)
test
add
inc
in
mov
aas
adc
mov
mov
inc
mov
mov
aas
test
int
lock
xchg
mov
daa
jg
sbb
jns
fisubr
out
inc
jge
mov
inc
stos
pop
imul
fild
cmp
jno
sti
xor
or
dec
cwde
jg
out
cld
cmp
push
sub
jl
loopne
jmp
and
mov
xor
inc
sbb
pop
mov
outs
or
push
test
rcl
cld
ror
loopne
cld
not
icebp
test
inc
jnp
jmp
in
ret
ins
stc
adc
fiadd
and
and
out
xchg
sbb
pusha
jecxz
cmp
leave
in
jo
rcr
pop
jo
sub
inc
jbe
mov
mov
mov
add
in
sbb
sub
or
cdq
lds
aas
(bad)
frstor
out
inc
ja
aam
mov
scas
xchg
push
mov
push
inc
subps
in
or
dec
cld
xchg
jl
out
add
sub
add
arpl
out
sbb
hlt
jmp
push
jmp
xchg
fsubr
mov
lock
or
loop
jno
mov
push
mov
cdq
adc
in
or
mov
push
inc
movs
popa
in
stc
sub
rcr
les
sub
call
inc
sbb
out
mov
adc
sub
xor
pop
lahf
dec
out
inc
pop
jae
imul
movs
push
mov
call
jmp
repnz
sub
jmp
test
ret
movs
dec
pop
scas
lods
rol
push
sbb
cli
je
fucomip
cmp
or
fsubrp
retf
xchg
stos
fcomp
js
fisubr
adc
add
jl
mov
mov
sbb
js
in
int
out
push
retf
dec
(bad)
dec
bound
fdiv
gs
sbb
jmp
xchg
cli
xor
sbb
mov
mov
and
retf
push
repz
movs
lods
out
inc
pop
xchg
sti
cmp
aam
mov
in
pushf
(bad)
dec
ds
int
rcl
add
lar
stos
jb
lock
cdq
jne
push
xchg
lods
push
dec
ret
lods
lds
outs
xchg
or
lahf
(bad)
fs
ret
push
pushf
shl
ss
cmp
pushf
sbb
stc
lock
or
shr
out
outs
push
mov
mov
icebp
ins
call
mov
cmp
pusha
aam
push
mov
adc
jae
mov
in
retf
rcr
mov
test
adc
push
add
cmp
or
daa
sub
aam
xchg
jl
lods
mov
shl
and
ds
stos
retf
xor
sub
jg
ds
mov
bound
imul
cdq
cmc
xchg
sub
push
add
loope
sub
pop
shr
out
push
pop
adc
push
out
push
aas
pop
les
lock
xchg
jl
jge
in
fs
pushf
ds
mov
sbb
retf
and
fisttp
gs
bswap
and
mov
aam
or
fimul
fbld
xchg
dec
xchg
mov
inc
neg
mov
sub
add
fstp
xchg
xchg
cli
mov
stos
hlt
ja
out
and
dec
xchg
xchg
pop
adc
pop
adc
icebp
mov
repz
retf
cmp
or
cmp
mov
les
fild
je
fcom
shr
std
mov
cmp
sub
sbb
iret
push
adc
mov
mov
mov
int3
push
das
das
sbb
inc
pop
push
add
mov
fstp
js
ss
or
pop
clc
add
pusha
stos
(bad)
dec
std
cmp
xor
or
int
mov
mov
adc
adc
push
push
setg
repz
ret
iret
sub
ret
lods
cmp
xchg
pop
mov
stos
mov
xchg
jl
aam
or
inc
retf
add
and
stc
jmp
shl
into
mov
test
cmp
dec
jo
push
lds
iret
sub
stos
(bad)
es
mov
pop
pop
icebp
and
xchg
or
cmp
stos
and
adc
sahf
xor
clc
in
sub
xchg
icebp
pop
mov
or
jg
adc
mov
push
iret
in
imul
sub
shl
pop
pop
xchg
xchg
aam
retf
in
cmp
and
(bad)
fdiv
dec
push
dec
adc
sbb
push
and
dec
mov
into
shl
mov
ret
bound
jecxz
nop
inc
aas
mov
adc
and
gs
int3
cmp
cmp
push
test
inc
sub
jnp
sbb
sbb
cwde
jb
fist
adc
xlat
enter
pushf
push
outs
mov
lock
ret
adc
test
(bad)
adc
lea
clc
dec
xchg
sbb
imul
imul
aam
repnz
lods
pop
mov
jmp
sti
jmp
aam
xchg
scas
add
mov
mov
add
repz
inc
xor
int3
inc
push
sbb
test
or
xchg
mov
and
sbb
adc
test
xor
and
fcomp
or
mov
ss
adc
lds
or
cmp
or
inc
(bad)
stos
inc
loopne
int3
xchg
mov
retf
lds
jle
retf
(bad)
(bad)
aam
mov
xor
sbb
mov
inc
fild
ret
inc
pop
xor
loop
fst
(bad)
jmp
push
fistp
scas
dec
inc
and
in
xchg
and
mov
inc
push
pop
xchg
or
and
arpl
xchg
jmp
das
mov
xor
cmp
scas
in
aam
dec
gs
fwait
mov
jae
(bad)
fld
push
cdq
xchg
lock
sbb
pusha
xor
mov
push
xchg
xchg
(bad)
or
ffreep
mov
out
push
in
push
or
push
add
push
xor
pop
or
dec
retf
push
leave
dec
aam
push
and
out
jecxz
and
jle
cwde
and
(bad)
das
inc
fdivr
jge
pop
hlt
dec
or
fisttp
xchg
xchg
aaa
(bad)
dec
ins
push
dec
ss
cmp
xchg
out
mov
call
sub
fwait
mov
sub
add
add
pop
sbb
adc
arpl
lea
push
pop
leave
push
sub
jns
scas
mov
fwait
inc
sub
add
retf
adc
push
xchg
jmp
mov
inc
jl
inc
jae
mov
xchg
pop
inc
and
je
in
and
mov
div
adc
test
cmc
ins
gs
rcr
push
retf
ss
fadd
inc
fwait
adc
(bad)
shl
push
jmp
pop
arpl
mov
mov
jae
test
into
and
sub
mov
sbb
jne
daa
push
jp
(bad)
lods
int3
adc
mov
mov
xchg
loopne
les
or
pop
out
cmps
out
dec
push
cwde
pop
inc
sub
enter
ins
lahf
ret
dec
pop
fadd
and
pop
mov
dec
packuswb
mov
jmp
movs
jne
push
add
cs
cmp
xor
retf
sub
daa
rcr
enter
leave
xor
ss
or
aaa
aam
inc
jb
in
loop
jmp
dec
lods
jno
in
jg
mov
das
sbb
fsubr
pop
outs
jmp
mov
scas
mov
neg
jb
arpl
jmp
idiv
xchg
jne
adc
cmps
jge
in
mov
test
scas
and
mov
imul
aam
mov
sub
loope
inc
addr16
xchg
mov
mov
cmp
dec
fistp
and
imul
jg
cmc
mov
pop
(bad)
xchg
mov
pop
dec
pushf
xor
cwde
mov
test
movs
pop
inc
loopne
sub
std
add
out
push
pop
cmp
mov
adc
arpl
pushf
das
mov
mov
outs
scas
in
mov
cmp
pusha
repnz
lods
mov
and
pop
loop
jo
ret
dec
add
push
and
or
mov
jbe
aaa
inc
in
xor
pop
jge
xchg
dec
mov
sbb
dec
ret
mov
invd
mov
aad
imul
nop
push
xchg
or
test
push
(bad)
movs
sub
fsub
stos
cs
and
les
(bad)
fs
sti
test
sbb
fsubr
cmc
(bad)
iret
inc
std
jns
fisttp
(bad)
jl
xchg
xchg
ins
inc
dec
scas
std
repz
enter
push
popa
and
or
sti
jecxz
rol
and
(bad)
sbb
cmovno
mov
(bad)
lahf
mov
in
lods
xor
retf
daa
or
push
cmp
pop
mov
mov
stos
cmps
in
aam
movs
push
mov
shl
shr
mov
je
pop
cli
repnz
jno
stos
mov
inc
mov
jmp
icebp
scas
dec
cmc
pop
in
das
in
xchg
gs
xchg
push
adc
sahf
imul
sub
test
pop
xchg
and
mov
mov
jle
xchg
sahf
add
inc
pop
test
xchg
xchg
mov
repz
or
stc
cdq
pop
and
stos
dec
(bad)
jmp
inc
cwde
adc
xchg
stc
sub
cli
ins
add
sbb
mov
mov
sub
cwde
sub
adc
in
push
and
stos
cmp
and
out
outs
dec
push
fcom
fidivr
shr
push
int3
mov
cmc
in
cmc
sbb
cdq
(bad)
push
dec
test
or
mov
loopne
and
pusha
stc
and
pause
and
xor
xchg
xor
lock
dec
ds
push
mul
imul
adc
sbb
bound
ffreep
int3
mov
pop
and
lahf
cwde
cmp
fwait
test
mov
cs
sub
imul
mov
jg
push
test
bndldx
gs
cmc
adc
(bad)
pop
xchg
fld
in
mul
test
add
shl
inc
aam
iret
lods
lds
xor
fiadd
out
test
dec
mov
and
fild
lods
(bad)
jns
adc
adc
test
add
jns
faddp
leave
movs
retf
dec
inc
xor
push
scas
stc
cmp
ficom
mov
ja
mov
loope
fsubr
and
mov
mov
nop
jae
out
mov
or
sbb
div
jge
repnz
mov
adc
or
mov
jp
retf
and
loop
xchg
xchg
mov
dec
imul
movs
(bad)
jecxz
outs
adc
sub
mov
sub
jb
ss
jbe
iret
mov
pushf
pop
inc
mov
inc
xchg
popf
sbb
mov
clc
sahf
cmp
pop
arpl
iret
pop
cmp
sbb
jg
or
or
scas
(bad)
bound
xor
add
or
xchg
sbb
fld
in
xchg
mov
pushf
in
xor
test
pop
dec
repnz
neg
sbb
dec
call
scas
sti
mov
xchg
dec
in
mov
mov
iret
movs
sbb
mov
ins
xor
ja
dec
dec
iret
outs
or
test
mov
(bad)
mov
sbb
fiadd
fs
(bad)
jns
cmp
xor
fmul
repnz
scas
inc
push
inc
cmp
push
fwait
jmp
scas
in
ret
adc
imul
out
std
push
scas
(bad)
push
ins
mov
loopne
mov
add
scas
fadd
jbe
mov
jo
lock
jmp
adc
mov
in
jb
jecxz
dec
loope
cld
(bad)
div
adc
test
sub
xchg
inc
xchg
ja
pop
mov
pop
xor
add
jmp
aad
push
cmps
sub
ss
enter
leave
stos
pop
xchg
sub
or
cmp
adc
nop
mul
out
cwde
pushf
repnz
xchg
loopne
sub
popa
push
pop
xor
fcom
rol
adc
sbb
out
xor
inc
mov
pop
jmp
xchg
jge
push
jns
xchg
mov
push
ds
fist
repz
out
mov
imul
jne
(bad)
sub
push
inc
cwde
bound
dec
pushf
mov
or
or
(bad)
out
cli
test
xchg
repz
pop
lds
mov
pop
sub
fld
push
stos
dec
adc
jg
and
punpckhbw
push
nop
sub
retf
clc
jg
xchg
fdivr
adc
clc
outs
lea
pop
cdq
call
push
adc
sbb
xlat
ja
div
in
pop
or
fdivrp
mov
xchg
cmp
sub
xor
jmp
and
cmp
adc
lahf
retf
(bad)
push
std
jg
dec
mov
retf
sti
popf
stos
mov
(bad)
xchg
imul
jl
mov
pushf
push
ret
frstor
stos
and
in
into
sub
xchg
rol
aaa
btc
jmp
enter
aad
ds
and
mov
shl
xor
and
push
dec
pop
(bad)
aas
xchg
fidiv
sbb
aad
cmp
xchg
adc
popf
(bad)
pop
pop
enter
shl
shl
mov
loopne
lea
xor
push
mov
ds
sbb
xchg
jg
popa
iret
and
ret
mov
sub
rol
mov
add
es
jbe
mov
les
idiv
xor
addr16
mov
into
mov
inc
pushf
dec
jne
cmps
daa
push
inc
arpl
pop
retf
cld
les
inc
xchg
cmp
loop
mov
add
and
mov
mov
jb
int
call
call
rcr
neg
aas
(bad)
out
sub
xchg
dec
test
xlat
dec
pop
pushf
in
fdivr
xchg
cld
jno
(bad)
xchg
stos
inc
xchg
ins
mul
and
push
mov
rol
arpl
in
call
das
test
loope
mov
inc
dec
fistp
sbb
xor
or
test
sub
mov
inc
or
sahf
fldenv
jle
leave
scas
outs
sahf
mov
dec
repnz
call
adc
add
or
dec
xor
mov
out
arpl
mov
bnd
in
mov
or
ss
and
sahf
enter
mov
xchg
mov
sti
pop
test
test
cmps
scas
enter
fisubr
mov
xchg
test
jge
pop
sub
mov
jns
jo
mov
sbb
xor
jp
mov
outs
and
aad
sbb
imul
std
pop
push
aaa
mov
in
lahf
mov
loope
icebp
call
not
gs
jmp
add
ss
into
xchg
(bad)
inc
outs
mov
add
rcr
push
and
mov
sub
mov
pop
ret
or
cmps
pop
push
inc
outs
jge
test
jge
pop
scas
xchg
jecxz
push
xchg
adc
(bad)
(bad)
jmp
leave
jno
inc
xchg
mov
jle
sbb
mov
(bad)
xchg
xchg
(bad)
mov
jno
push
call
std
imul
in
cmp
sti
jmp
ficomp
out
mov
in
cmp
mov
(bad)
push
pop
jno
xchg
scas
std
sub
push
sub
mov
outs
lock
ss
retf
(bad)
sti
je
sbb
pop
push
mov
cmp
add
popa
jo
push
lods
ret
ficom
(bad)
gs
jle
mov
and
popf
push
xchg
add
pop
push
ins
sbb
xchg
xchg
sub
mov
fst
sbb
mov
push
xor
mov
imul
push
or
aaa
push
cli
popa
ins
outs
retf
sbb
cmp
mov
mov
sub
jmp
popa
jbe
sahf
cmc
push
(bad)
bound
out
and
sub
ret
dec
mov
add
pusha
fdiv
lods
jno
push
pop
(bad)
aad
hlt
xor
or
sbb
jp
push
daa
sub
fiadd
(bad)
mov
test
xor
(bad)
push
xor
adc
pop
fucomp
push
or
cli
push
inc
push
lods
int
xchg
jmp
(bad)
xor
(bad)
cmp
test
retf
shl
sbb
sar
out
or
repz
or
mov
cwde
inc
dec
xchg
jnp
iret
repz
repz
cmp
jns
xor
les
or
ins
mov
fsub
rol
xchg
jmp
and
mov
daa
inc
jmp
shr
mov
test
and
fwait
jecxz
cmp
pop
cmc
adc
ret
sub
out
aad
adc
popf
jnp
in
outs
(bad)
(bad)
xchg
adc
adc
sti
leave
sub
in
dec
mov
xchg
mov
push
xchg
xlat
mov
mov
mov
mov
retf
pop
jae
add
clc
mov
pushf
adc
(bad)
or
mov
ret
mov
aaa
cld
cmps
cmp
or
sub
push
lods
xchg
mov
cdq
pop
repnz
ins
popa
aad
add
mov
retf
ror
xor
mov
dec
cmps
mov
add
test
jb
xchg
dec
add
lock
fadd
test
js
shr
lock
mov
data16
lahf
mov
fimul
rcl
in
push
int3
add
inc
mov
xchg
and
lods
xchg
cli
cmp
inc
lea
stos
in
cmp
nop
jb
dec
sbb
fsub
push
sbb
repnz
iret
arpl
sbb
aad
mov
mov
rcl
mov
or
ins
aas
popa
mov
test
or
lods
fistp
push
cli
lahf
add
xor
aad
clc
mov
sti
xchg
mov
int3
test
jmp
sub
(bad)
mov
not
out
push
into
arpl
cli
adc
jns
lds
stos
push
fbld
sbb
and
adc
aaa
(bad)
mov
retf
arpl
rol
and
daa
dec
test
dec
aas
call
ss
inc
lods
and
outs
call
and
sub
jo
xchg
ins
and
xor
not
in
loop
addr16
(bad)
cmps
or
mov
sbb
push
inc
cmps
mov
ret
fbld
sbb
jbe
nop
sbb
xchg
inc
mov
in
push
xchg
inc
ss
push
adc
pop
sub
aas
hlt
push
sub
sbb
icebp
lods
loop
dec
dec
sbb
pop
sbb
in
out
pop
sub
mov
fild
or
in
cmp
jl
cdq
stos
leave
pop
(bad)
sbb
pop
jp
push
cli
mov
lods
push
nop
xlat
call
xchg
dec
jg
cwde
mov
jmp
pop
addr16
lods
out
ror
xchg
push
and
lods
fcomp
into
test
ins
xlat
(bad)
in
sar
icebp
xor
adc
dec
dec
xor
pop
fcomp
ja
ret
jns
arpl
sar
adc
xchg
in
mov
cmc
mov
xchg
sub
sbb
scas
mov
retf
shl
retw
xchg
sbb
xor
sahf
or
scas
xchg
xchg
popa
lods
out
xchg
enter
xchg
cdq
rcr
icebp
bound
out
push
test
dec
pop
aam
enter
ret
push
leave
mov
push
xchg
cmps
stos
(bad)
ja
test
push
fist
inc
mov
mov
nop
jmp
aam
pop
xlat
je
imul
js
inc
pop
aaa
jmp
int
das
movs
shr
cli
inc
inc
mov
test
mov
pop
dec
in
addr16
les
movs
pop
stos
push
jmp
or
fsubr
sbb
call
xlat
repz
cmps
mov
push
adc
cmp
popa
fs
sbb
cld
sub
movs
and
push
sub
sti
mov
addr16
in
shl
push
mov
jecxz
mov
sbb
sub
out
mov
aas
dec
xor
add
push
or
sbb
(bad)
js
nop
adc
mov
out
das
jne
stos
inc
or
mov
push
(bad)
stc
inc
mov
push
xchg
inc
iret
xchg
into
mov
repz
ficomp
push
loop
jno
out
mov
mov
mov
test
add
fwait
ds
out
xor
mov
inc
int3
ror
inc
push
inc
add
test
push
(bad)
ss
sub
push
or
jecxz
mov
aas
xor
inc
cmps
fwait
iret
xor
mov
mov
adc
icebp
test
pop
rcr
idiv
ins
and
das
jne
cld
daa
cmp
cdq
fwait
dec
fistp
retf
sbb
push
call
pop
cmc
or
mov
mov
js
pop
sub
jnp
jle
mov
add
push
and
lahf
mov
pushf
cli
inc
ret
mov
popf
add
iret
aaa
and
sbb
xchg
test
call
fidiv
retf
in
loop
jo
scas
loopne
fwait
sti
pop
add
(bad)
clc
pop
xor
shl
test
sub
mov
clc
cmp
jbe
sar
(bad)
jp
clc
sbb
or
mov
lock
inc
inc
arpl
fwait
mov
adc
test
xor
das
rol
fisttp
jmp
lea
push
out
sahf
xchg
dec
push
sub
xor
mov
and
push
ret
arpl
ret
and
fistp
sub
bound
out
pushf
ret
movs
jno
addr16
js
xchg
cmps
cmp
in
das
xor
(bad)
xchg
imul
sbb
mov
cmp
aaa
mov
sahf
add
mov
(bad)
adc
pusha
xchg
sti
inc
push
xor
jno
sub
jl
sbb
fldenv
mov
(bad)
js
enter
cmp
cmp
outs
jecxz
add
std
(bad)
fist
sub
or
adc
pushf
xchg
into
cmp
sub
std
cwde
jo
pop
xchg
in
std
hlt
mov
std
sub
sbb
out
sbb
inc
push
fpatan
dec
push
mov
sbb
xchg
xchg
push
sub
pop
sbb
mov
in
ds
mov
movs
sbb
lods
xlat
mov
mov
sub
out
sbb
loope
lods
pextrw
mov
pop
stos
ret
inc
lock
sbb
rcr
cmp
fistp
mov
pop
(bad)
arpl
dec
fild
and
mov
gs
cdq
mov
sub
push
cs
sub
mov
push
(bad)
shr
push
movs
push
test
xor
cmps
hlt
(bad)
test
and
out
cdq
sub
xor
push
gs
xchg
mov
lock
xchg
je
jp
cmc
stc
addr16
jmp
addr16
(bad)
stos
mov
adc
lock
cmp
out
lahf
add
gs
arpl
popa
(bad)
sub
jmp
push
fwait
call
rcl
fdivr
sub
(bad)
iret
jp
pushf
push
xchg
outs
popf
jge
xor
cdq
icebp
ret
es
lods
adc
daa
inc
aaa
inc
mov
mov
adc
jmp
inc
cmc
out
mov
jecxz
pop
stos
mov
(bad)
xchg
cmps
mov
sti
xchg
cs
pop
inc
sub
pop
rcr
in
cmp
add
bnd
call
loopne
pop
xchg
scas
pop
cmp
outs
adc
cmc
popa
sub
push
pusha
add
push
sub
ret
bound
int
pop
xchg
cli
inc
xchg
mov
sbb
scas
cs
mov
pop
inc
sahf
sub
xor
jle
pop
addr16
scas
fist
jp
jnp
jle
jl
or
sahf
jg
sahf
dec
bound
sub
jecxz
retf
mov
or
les
fcomi
out
ja
push
adc
xor
(bad)
fs
jns
jecxz
fcom
call
cmps
test
je
or
push
mov
stc
jo
fcomp
jbe
aas
mov
and
mov
je
shr
sti
into
ss
shr
add
nop
xor
sub
shl
stc
popa
pop
aaa
ror
ror
cmp
sub
test
mov
call
lods
stos
mov
sbb
xchg
stos
ins
clc
mov
test
pop
cmp
pop
ds
inc
in
pushf
adc
xor
xchg
test
ss
arpl
and
(bad)
cmps
call
std
ret
hlt
xchg
movs
cli
jl
push
ins
cmp
add
std
bound
test
test
jne
repnz
dec
inc
mov
lds
inc
dec
pushf
fwait
xchg
ja
ret
adc
cmp
sub
icebp
xchg
nop
sub
test
add
mov
(bad)
push
fwait
out
fistp
(bad)
mov
adc
dec
hlt
xor
push
push
push
mov
xor
xchg
jb
pop
and
mov
ins
sub
mov
mov
mov
sbb
mov
sbb
imul
cmp
xchg
xchg
push
scas
push
sahf
jle
cld
or
sbb
and
and
cmp
pop
shr
jge
sbb
sbb
sbb
jmp
xor
stc
hlt
movs
cmp
add
xor
sbb
outs
aaa
std
sbb
and
dec
int3
sar
add
mov
dec
je
sahf
lods
sbb
sbb
cmc
shl
(bad)
movs
sahf
in
mov
bound
not
xor
jnp
js
in
scas
adc
inc
jmp
nop
(bad)
call
xchg
xchg
sbb
mov
call
bound
outs
cwde
stos
xchg
shl
jo
cli
xor
test
ins
fnstenv
xchg
sbb
pop
xchg
jg
aas
je
cmps
xchg
xchg
les
(bad)
pop
pop
sub
fcom
rol
mov
fwait
stos
ret
inc
dec
push
dec
pop
cdq
add
xor
pop
inc
out
ficom
xchg
lock
pop
mov
jecxz
dec
arpl
jle
dec
fdivr
out
mov
mov
pop
sbb
adc
test
inc
movs
adc
jg
cmc
mov
sub
and
sbb
les
fisub
sbb
aad
push
push
push
ja
xchg
cmps
mov
mov
xor
jne
xchg
mov
mov
out
pop
pop
fadd
enter
aam
or
les
vandnps
iret
fst
out
lahf
in
push
xor
movs
in
dec
mov
mov
add
pop
(bad)
sub
sahf
and
jle
aas
push
outs
lock
dec
out
stc
shl
sub
int
dec
mov
adc
les
mov
hlt
push
sub
imul
add
cmp
ret
xchg
les
sub
mov
repz
retf
mov
fcomi
xor
(bad)
xor
sbb
into
add
es
xor
fist
ja
(bad)
mov
jo
pop
mov
int
xchg
lds
aas
es
xor
repz
adc
xor
test
enter
mov
std
pop
cli
jl
cmp
xchg
(bad)
mov
imul
std
jae
or
sbb
jp
aaa
fnstcw
rol
dec
cwde
jo
jae
lahf
sub
cmp
imul
jge
xchg
std
xchg
aas
stc
test
jno
add
xlat
imul
jmp
rcr
xchg
mov
mov
jge
(bad)
fcomp
sbb
shl
test
sub
push
pop
jne
mov
xchg
sbb
mov
(bad)
push
add
cmp
stc
and
repnz
xchg
mov
aam
add
jg
mov
jecxz
sti
aam
jb
dec
retf
xchg
inc
sub
ret
and
loopne
retf
adc
mov
dec
jge
mov
lea
dec
movs
aam
push
lea
xor
inc
jmp
ret
cmps
in
in
out
aas
inc
dec
dec
in
push
mov
test
icebp
ret
mov
xlat
fist
cmp
shr
mov
pop
in
mov
sti
sbb
pop
pause
pop
cs
icebp
add
enter
mov
inc
mov
aaa
jl
ds
inc
add
call
iret
clc
leave
enter
data16
sbb
push
ret
adc
mov
es
aam
cmc
sub
into
aas
jl
jg
sbb
push
test
mov
sbb
neg
dec
jmp
xor
gs
xor
xchg
mov
test
rcr
push
add
retf
push
pushf
mov
sbb
jae
mov
or
jo
repnz
jle
aaa
cmps
shl
inc
out
int
cmps
push
icebp
jg
push
and
hlt
cmp
aaa
dec
nop
cli
mov
inc
movs
ja
out
pop
shl
mov
cmc
push
xor
sbb
add
adc
ret
addr16
retf
pop
or
push
fs
xor
mov
sbb
popf
xlat
jno
out
mov
dec
fldenv
(bad)
shl
call
scas
(bad)
jecxz
dec
data16
mov
cmp
data16
inc
xor
xchg
fs
pushf
in
sbb
(bad)
xchg
bound
sbb
out
retf
(bad)
or
pop
fxch
sbb
mov
xor
adc
inc
(bad)
jl
popa
lea
push
js
adc
aad
popa
xchg
xchg
sub
hlt
test
fistp
push
xchg
cmp
sbb
and
push
mov
pop
and
cwde
xchg
push
stos
retf
sub
aaa
sbb
push
dec
jl
mov
and
movs
pop
loop
xchg
retf
out
and
cmp
cmp
add
fwait
mov
mov
jg
xchg
cld
mov
mov
call
ins
sbb
push
sti
arpl
idiv
sub
retf
push
retf
lock
or
jae
mov
mov
pop
add
sbb
sar
test
cmc
and
and
adc
and
inc
cli
mov
out
pop
stos
fcomi
inc
push
fiadd
jb
xor
ret
pop
(bad)
jmp
cmp
push
sbb
xor
ins
and
sub
mov
mov
add
mov
cmp
dec
mov
js
add
ss
cld
push
mov
es
push
pop
pop
(bad)
mov
call
cmp
aaa
sbb
sub
call
and
ret
rcl
aam
adc
pushf
int3
xchg
mov
pushf
jge
retf
cli
shl
cs
inc
sbb
push
add
(bad)
sub
add
mov
and
retf
xchg
(bad)
aad
pop
das
mov
dec
mov
or
xor
push
xchg
xlat
sub
mov
pop
ret
arpl
or
mov
and
outs
sub
lea
aas
sub
out
and
adc
outs
mov
jp
(bad)
mov
jge
jno
adc
hlt
add
cli
push
fwait
ret
outs
in
dec
jb
ja
ror
xchg
sbb
xor
test
push
hlt
pop
and
inc
cli
sub
xor
in
pop
push
push
mov
mov
sbb
fwait
int
aad
push
add
aam
add
das
or
loopne
jl
xchg
push
lods
in
adc
mov
shl
jle
add
adc
sub
xor
sahf
and
xchg
add
stos
xlat
dec
mov
inc
dec
xchg
aam
push
or
inc
and
mov
or
add
aaa
inc
movs
or
xor
sbb
pop
ficomp
cmp
movs
dec
adc
push
mov
mov
mov
(bad)
mov
push
or
push
jnp
pop
ds
js
mov
retf
adc
fisttp
aad
cdq
push
adc
jmp
outs
jo
sbb
fdivr
dec
fist
outs
sahf
ret
es
xor
div
jp
mov
adc
outs
bound
xor
sub
pop
cmp
ds
cmp
push
clc
mov
jg
mov
(bad)
xchg
std
test
and
cmps
sub
lock
jg
push
xchg
jge
push
pop
jmp
ss
jnp
xor
mov
fucomip
jge
mov
inc
mov
retf
and
pop
mov
or
jo
xchg
fwait
jp
cmp
or
call
leave
xchg
push
jns
and
(bad)
push
ret
lods
xchg
xchg
in
lods
push
jne
mov
inc
jno
in
pop
mov
adc
pop
xchg
out
stc
jb
sbb
test
fwait
mov
data16
jno
push
mov
leave
inc
mov
xchg
pop
inc
popf
jg
mov
and
fild
in
jmp
push
movs
or
fs
adc
fs
imul
retf
sub
and
mov
or
pop
push
push
ret
int3
xchg
lahf
adc
dec
and
fisub
mov
int3
pushf
mov
add
cmps
xlat
cmp
xor
aam
stos
xor
dec
mov
fidiv
inc
inc
and
xchg
lods
sub
test
and
(bad)
cld
jmp
dec
jae
mov
js
dec
test
lock
fdivp
pop
cmc
xchg
repnz
clc
test
jg
in
out
xchg
loop
call
cmp
xchg
loope
loope
mov
loop
push
out
data16
lock
(bad)
xchg
inc
cmp
sti
jmp
mov
push
mul
jns
sbb
push
nop
dec
inc
(bad)
outs
lods
out
cmp
pop
(bad)
retf
daa
dec
imul
push
adc
std
push
jno
in
out
xor
jmp
nop
inc
mov
mov
cwde
idiv
push
mov
lods
inc
sbb
add
push
xchg
cdq
pop
movs
cmps
adc
mov
add
call
daa
push
xchg
inc
mov
cmp
xor
fndisi(8087
test
pop
rol
mov
mov
call
stos
jmp
lahf
aaa
mov
mov
xchg
cmp
push
jg
mov
std
fst
call
daa
dec
add
mov
out
out
or
cmps
pop
aaa
and
cdq
mov
add
dec
cmp
push
mov
aad
std
icebp
mov
push
mul
fwait
enter
nop
rcl
outs
daa
xor
mov
inc
xlat
retf
aam
xchg
mov
sub
aaa
xor
or
xchg
outs
fist
mov
fdivrp
ins
hlt
pop
repnz
aam
nop
icebp
mov
fcom
les
ss
jmp
xor
dec
loope
movs
ret
jg
imul
xchg
push
xor
iret
cmp
cmp
jp
(bad)
push
push
adc
leave
dec
popa
mov
and
ins
(bad)
or
or
rol
clc
sbb
repz
xor
(bad)
cmp
push
fwait
out
out
popf
dec
fwait
push
adc
stos
jae
cmp
cmc
(bad)
stc
mov
imul
cmp
mov
jge
xor
mov
push
sbb
arpl
inc
sbb
push
adc
add
cmp
sub
retf
mov
xchg
jl
in
push
mov
jb
hlt
ficom
inc
lods
xchg
sbb
push
stos
mov
repnz
std
add
xchg
mov
lods
xchg
push
mov
xor
popf
call
lds
mov
jp
push
pop
arpl
jo
fidivr
sub
loop
enter
or
sub
fld
(bad)
xchg
int
out
mov
std
adc
jo
dec
lds
ret
cmp
and
mov
fwait
pop
fadd
pop
hlt
inc
out
cmps
stos
aaa
test
ins
repnz
adc
or
add
out
not
mov
jbe
fs
mov
mov
cmp
add
cmc
inc
out
aad
hlt
in
out
loope
xchg
adc
add
or
rcr
pop
mov
retf
jo
retf
xor
mov
xchg
sub
pusha
mov
mov
bswap
or
sub
out
(bad)
lock
inc
sar
out
fidiv
mov
sub
cdq
mov
jnp
mov
or
data16
jnp
adc
mov
push
or
fs
or
ficom
dec
ss
sbb
and
pop
clc
cmp
jno
loope
shr
loop
mov
add
push
bound
test
mov
add
inc
jmp
mov
add
inc
add
rcl
inc
into
(bad)
mov
popf
xchg
fst
mov
or
sub
add
jmp
int
cwde
jmp
popa
sbb
jo
ret
and
xchg
test
cmps
cwde
jl
mov
inc
loopne
mov
adc
cdq
adc
dec
push
dec
xchg
retf
dec
push
push
xor
mov
push
(bad)
push
fcom
lock
pop
mov
mov
aad
jnp
jmp
je
mov
inc
sub
gs
pshufw
(bad)
out
add
push
adc
mov
ins
shl
pop
in
(bad)
or
test
les
(bad)
hlt
pop
in
fidivr
pushf
mov
or
daa
push
cmc
inc
jno
repnz
sub
mov
lock
pop
(bad)
xchg
xchg
les
int
jns
outs
mov
retf
push
lock
xchg
mov
mov
inc
xor
mov
inc
iret
(bad)
ja
jmp
push
xchg
or
jmp
sub
xor
xchg
fcomp
and
adc
cmp
dec
pop
stos
jmp
mov
xor
call
(bad)
retf
cmp
jmp
(bad)
dec
xchg
adc
mov
fist
rol
loop
(bad)
arpl
dec
movs
call
push
cs
or
in
repz
or
aaa
mov
cmp
fstp
xor
pop
dec
enter
rol
adc
mov
pushf
pop
rcl
xchg
xor
fs
push
inc
or
or
outs
cmp
ja
lahf
retf
sar
movs
fsub
js
int
nop
pushf
jmp
enter
xchg
dec
xchg
inc
push
add
stos
push
and
out
mov
cmp
jge
mov
imul
dec
cmp
not
cmp
(bad)
push
jle
in
jbe
ret
sub
xchg
jg
mov
push
cmps
daa
dec
jg
dec
sbb
repnz
inc
outs
inc
sbb
adc
std
call
sub
test
loop
dec
gs
test
sub
call
xchg
pop
stos
leave
and
xchg
and
sub
std
push
add
call
add
cmp
inc
(bad)
fst
(bad)
aam
iret
arpl
daa
push
cmps
and
xchg
pusha
and
ret
not
pop
mov
mov
daa
retf
xor
call
rcl
push
dec
shl
cmp
push
inc
adc
fiadd
add
mov
(bad)
cli
(bad)
fstp
clc
dec
xchg
mov
mov
(bad)
nop
jmp
cmp
fdiv
jmp
test
dec
mov
jecxz
in
adc
fild
retf
mov
push
sbb
data16
das
cmp
push
retf
ins
adc
inc
or
or
cwde
dec
inc
outs
test
inc
xchg
jmp
mov
inc
retf
inc
fs
adc
mov
add
(bad)
retf
pop
out
adc
adc
mov
sub
dec
add
xchg
(bad)
jmp
test
inc
cmp
dec
enter
movs
xchg
dec
inc
sub
out
jae
sbb
mov
test
test
mov
mov
xchg
inc
repz
gs
call
icebp
aad
inc
and
(bad)
jns
mov
pop
sahf
(bad)
std
xor
sbb
xor
xchg
call
sysenter
inc
in
dec
adc
xchg
pop
sub
loop
push
xlat
ret
and
test
push
(bad)
(bad)
cdq
sbb
daa
push
out
lods
sbb
inc
push
out
(bad)
and
sbb
aam
jb
mov
cwde
(bad)
outs
mov
mov
push
(bad)
adc
xchg
cmp
xor
ja
imul
clc
out
and
les
(bad)
pop
les
int
shl
movs
mov
inc
jmp
dec
daa
in
push
jmp
stc
(bad)
xor
fldenv
push
or
mov
pop
in
dec
push
mov
sahf
adc
mov
test
mov
clc
ins
or
or
dec
fld
les
aam
cli
inc
sub
std
cmp
cli
adc
xchg
push
test
or
add
fadd
pop
or
push
cmps
pop
aaa
dec
(bad)
in
retf
retf
gs
es
inc
adc
xor
sub
xchg
xor
push
cld
addr16
xchg
ins
addr16
retf
jns
adc
push
jo
sbb
xor
int
ss
inc
mov
jge
aad
(bad)
cmp
mov
mov
xchg
aas
pop
mov
fmul
dec
stos
sbb
cwde
repz
cmp
dec
and
mov
jo
retf
xchg
mov
leave
xlat
lea
mov
sti
call
(bad)
jmp
dec
cmp
pop
not
mov
(bad)
imul
sub
sbb
nop
into
xor
add
aaa
adc
imul
movs
scas
addr16
inc
fcomp
cmp
xor
in
sub
out
data16
scas
sub
(bad)
and
xchg
enter
(bad)
lahf
push
out
(bad)
mov
addr16
sub
hlt
pop
xchg
or
enter
mul
call
addr16
mov
jmp
mov
enter
aad
dec
push
push
fstp
xor
pop
les
sbb
cmp
push
es
and
or
cld
jle
retf
ins
imul
mov
inc
mov
pusha
scas
pushw
mov
(bad)
in
mov
mov
cs
xor
fstp
(bad)
cmp
inc
outs
vpsubw
and
lods
in
xchg
call
outs
out
pop
fistp
pop
add
gs
pop
xchg
jae
jg
js
push
mov
js
(bad)
int
push
mov
aas
adc
bound
test
stos
gs
mov
mov
xchg
clc
mov
sahf
std
or
mov
and
inc
out
fsubr
into
push
test
add
mov
inc
in
sub
mov
push
push
adc
and
cmp
mov
sub
ds
repz
(bad)
fstp
(bad)
ror
xchg
ret
mov
cmp
cli
ret
mov
push
repz
jge
sahf
xchg
in
mov
mov
imul
dec
lahf
enter
push
ins
fadd
sub
int
inc
inc
add
jb
(bad)
push
xchg
enter
and
loopne
cmp
inc
mov
sar
mov
lods
int
retf
sbb
repnz
add
in
sub
sahf
mov
jbe
sbb
loop
int
xor
push
dec
(bad)
hlt
pushf
pop
xor
cmp
sbb
jo
ins
shl
adc
xchg
mov
cmc
jno
xor
out
mov
outs
jb
add
out
test
or
test
pusha
cdq
jae
dec
repz
clc
not
pop
in
shr
cmp
xor
jp
cmps
dec
pop
rcr
test
inc
xor
sub
(bad)
ins
jmp
(bad)
sub
stos
xchg
clc
xchg
pop
(bad)
fnsave
jae
gs
std
aad
or
rol
sahf
push
daa
mov
test
jns
jbe
mov
ret
jns
std
and
jo
jmp
mov
popf
sbb
cs
xchg
clc
mov
clc
xchg
jno
ins
gs
pop
hlt
aas
dec
xchg
lahf
push
fild
jb
mov
xchg
jns
leave
mov
dec
mov
push
inc
sbb
inc
jecxz
lahf
and
(bad)
jl
imul
add
xchg
movs
dec
sbb
gs
stc
aam
mov
retf
fnstcw
sub
pop
(bad)
lea
adc
repnz
push
pop
sahf
xchg
in
adc
(bad)
out
dec
shl
sbb
lds
adc
inc
xchg
ret
xchg
xchg
sbb
repnz
ficom
xchg
fwait
jo
jle
mov
out
mov
mov
xchg
mov
sbb
in
xchg
xor
mov
xchg
dec
aam
xchg
xor
dec
xchg
push
(bad)
call
push
xchg
cdq
stos
add
push
jns
std
rol
imul
les
int3
lds
mov
pop
call
add
in
xchg
jbe
out
mov
gs
shl
adc
xor
inc
in
aam
int
loope
xchg
xchg
jg
sub
arpl
jge
xchg
(bad)
xchg
jo
out
icebp
inc
jnp
fwait
sar
cld
pop
inc
ret
lock
out
pop
lds
fiadd
or
sub
add
int3
xchg
xacquire
and
dec
dec
push
dec
movs
fldpi
test
cli
icebp
pop
push
mov
pop
add
pop
lea
lods
jbe
into
(bad)
jle
xor
inc
add
jmp
fisttp
test
(bad)
out
xchg
jmp
sub
sahf
(bad)
(bad)
xor
jno
push
(bad)
xchg
aam
push
push
outs
sti
div
jno
(bad)
stos
jbe
jecxz
mov
in
into
pop
and
push
call
push
adc
pop
dec
mov
mov
es
out
ret
movs
add
test
xchg
js
hlt
fldcw
push
div
stos
adc
sub
adc
dec
iret
inc
xor
outs
gs
mov
addr16
mov
fimul
inc
les
movs
mov
(bad)
pop
mov
addr16
mov
hlt
xchg
mul
outs
mov
leave
test
dec
dec
pop
and
xchg
push
xchg
loop
js
dec
inc
retf
mov
xchg
fs
jp
jl
fmul
push
and
ret
sub
es
cmp
das
stos
in
lock
sbb
jo
nop
gs
inc
cmps
and
mov
aaa
add
ds
out
jle
not
outs
xor
mov
call
add
jo
inc
mov
in
les
test
cmps
sbb
push
add
retf
ret
jb
push
cmp
pop
cmp
dec
retf
ficomp
ret
je
sahf
xchg
xchg
jg
out
cmp
rcr
fisttp
push
int3
and
icebp
mov
jno
cmc
nop
mov
stc
ds
mov
jp
int3
ins
or
stos
sbb
sub
or
dec
jb
xchg
sub
inc
jo
inc
xchg
fisub
or
push
add
jns
js
fcom
pop
les
leave
jmp
lock
repnz
test
inc
push
push
pop
or
inc
aas
shr
xchg
mov
jmp
jno
pushf
adc
gs
mov
psrlq
cwde
aas
cwde
pop
jmp
cmps
retf
bound
aad
idiv
mov
js
push
call
inc
repz
add
sub
lods
clc
xchg
jne
xchg
and
retf
sub
stos
hlt
not
sub
dec
cdq
ret
mov
repz
jmp
cmp
pushf
adc
ins
and
mov
mov
(bad)
loope
xchg
and
mov
pop
pop
imul
adc
xchg
clc
call
inc
mov
xchg
pop
lock
aaa
mov
mov
add
xchg
int
std
pop
dec
out
add
mov
imul
iret
clc
xchg
out
repz
cmp
fsub
push
add
in
inc
dec
jmp
les
xchg
movs
xchg
fisubr
xor
jecxz
xor
lahf
cdq
and
and
repz
call
xchg
push
aaa
sti
cld
jmp
cmps
jo
repnz
(bad)
icebp
call
ins
out
bound
outs
xchg
pop
fmul
add
stos
(bad)
sahf
outs
ss
xor
inc
sub
lea
jmp
dec
and
(bad)
push
mov
movs
pop
nop
mov
add
and
pop
(bad)
jae
cwde
sub
dec
mov
lods
jb
(bad)
nop
sahf
sub
mov
or
call
pop
daa
cs
pushf
test
(bad)
jno
popa
cmc
shr
mov
mov
test
mov
lods
fistp
das
xchg
std
inc
or
jp
fidivr
push
xchg
sbb
fistp
lock
xor
pusha
xchg
cmp
nop
pop
and
mov
dec
shld
pop
(bad)
pop
(bad)
icebp
xor
leave
or
adc
cmp
mov
aas
push
lods
xchg
add
inc
stc
add
fnsave
sub
jg
push
out
fadd
lock
mov
or
mov
sub
nop
neg
addr16
pop
neg
inc
push
adc
xchg
xchg
push
nop
push
adc
push
sbb
inc
fst
pushf
mov
mov
or
movs
in
sub
sbb
aas
lods
adc
mov
out
out
or
inc
sub
push
adc
sar
jp
in
outs
xchg
push
fdivr
js
cmps
push
out
into
push
repz
dec
out
in
dec
push
push
add
adc
sub
aad
sar
xor
push
pop
push
or
add
arpl
xor
lahf
inc
push
cwde
scas
mov
pop
jnp
adc
jne
cdq
ss
jecxz
out
pop
(bad)
pusha
adc
xor
xchg
or
nop
push
and
ins
xor
movs
imul
lock
sbb
add
clc
cmp
xor
or
cmp
pusha
div
sbb
(bad)
xchg
lds
sbb
and
in
std
mul
inc
xchg
lea
inc
(bad)
clc
pop
ret
xchg
je
clc
cmp
fdiv
cmp
inc
nop
xchg
mov
inc
mov
ret
xchg
pop
or
(bad)
sub
loopne
mov
xchg
cmc
jmp
jl
mov
(bad)
repz
lock
sti
fs
in
(bad)
into
sti
(bad)
loop
and
in
jb
mov
sar
jl
and
adc
in
call
dec
pop
mov
add
leave
add
xchg
pop
xchg
cli
repnz
repz
daa
push
xchg
(bad)
(bad)
xchg
sbb
cld
bound
movs
cld
adc
pop
ss
das
inc
cmc
pop
jne
adc
adc
dec
and
ds
cmp
cs
shl
div
mov
ds
dec
out
arpl
add
xchg
adc
push
mov
aam
retf
push
icebp
ins
imul
sbb
in
push
fdivr
xchg
movs
push
rol
inc
inc
iret
jmp
inc
out
adc
ja
hlt
mov
call
xchg
jecxz
xor
inc
(bad)
test
popf
push
jne
or
mov
jmp
test
xchg
push
mov
push
push
sbb
xchg
neg
jo
inc
xlat
jg
xchg
pop
es
test
movs
push
mov
inc
movs
nop
lahf
xchg
mov
dec
add
ficom
and
jae
clc
push
pop
lea
lock
loopne
sub
xchg
cld
add
ret
mov
fwait
stos
hlt
jo
dec
jnp
in
xchg
pop
mov
add
and
cmp
push
movs
mov
popa
out
or
out
push
loop
mov
mov
push
repnz
dec
or
(bad)
pop
xchg
pop
pop
xchg
jl
or
jo
cmp
lods
je
mov
adc
push
ret
test
push
xor
aaa
lahf
aad
popf
nop
loop
call
lahf
fldenv
adc
cmp
out
or
or
call
mov
add
stos
xchg
xor
dec
push
dec
pop
enter
mov
stc
ret
xchg
jno
clc
retf
mov
mov
ret
sbb
or
sub
dec
jno
inc
ins
cmp
pushf
and
mov
cdq
call
arpl
rcr
data16
lds
inc
adc
and
adc
xor
or
mov
fiadd
ja
retf
es
fstp
cli
fwait
psubq
ret
xchg
lahf
aam
sub
test
xchg
daa
not
xchg
nop
enter
aad
(bad)
stc
repnz
jmp
xchg
in
jo
mov
inc
sub
jae
pop
call
push
mov
inc
(bad)
jle
adc
(bad)
jnp
es
add
inc
clc
loope
cld
cmps
aaa
test
jbe
sti
adc
mov
mov
mov
aas
ss
out
test
mov
out
push
pop
add
mov
mov
push
shl
movs
cs
pop
mov
adc
lock
sbb
and
cld
jmp
and
adc
test
retf
cmc
inc
and
or
inc
cmp
mov
jmp
jle
icebp
xor
mov
mov
jno
dec
movs
fs
call
iret
pop
int
loop
(bad)
aad
mov
seta
popa
add
mov
fmulp
sahf
inc
lock
pop
aaa
mov
push
adc
sbb
adc
sti
mov
cli
adc
add
xchg
(bad)
mov
xchg
stos
ret
rcr
adc
xor
retf
adc
inc
cs
inc
xor
sar
iret
push
jp
arpl
movs
jecxz
lods
jecxz
(bad)
fdivr
push
xchg
in
lods
adc
xor
sbb
pop
stos
in
retf
shr
dec
mov
rcl
push
sti
push
fwait
test
data16
sbb
addr16
xor
mov
push
fnstcw
cdq
sbb
sbb
in
out
arpl
test
pusha
mov
popf
and
fs
cmps
xchg
or
ss
sub
(bad)
push
xlat
lahf
bound
push
push
cmp
aam
out
test
pop
cdq
retf
xchg
xor
std
jg
out
call
push
fwait
shl
lds
test
repnz
mov
inc
sbb
test
xor
cmp
jmp
adc
enter
push
or
rcl
(bad)
xchg
cmp
aaa
mov
pop
and
mov
int
leave
fstp
ds
int
mov
cmp
add
fs
xchg
xor
jecxz
sbb
and
push
int3
cmp
movs
cmp
scas
dec
stos
sbb
retf
pop
test
mov
es
jge
ret
hlt
in
add
aad
mov
inc
hlt
mov
or
out
inc
push
je
test
sbb
gs
rcr
jnp
inc
(bad)
mov
into
jecxz
dec
adc
adc
sub
cmps
xor
je
ins
imul
mov
test
mov
inc
dec
lods
push
stos
bound
cmp
sbb
inc
and
jnp
dec
fwait
jb
sbb
repz
dec
scas
loop
mov
kxorw
pop
lds
fucomip
call
enter
retf
fwait
cdq
sbb
fwait
adc
in
adc
rol
push
fild
or
mov
push
xchg
loopne
and
lahf
mov
nop
sub
cwde
and
retf
pop
jecxz
fadd
pushf
mov
cmc
push
jl
jmp
out
cmp
push
popa
out
out
call
xchg
popf
repnz
repz
mov
sar
cmp
popf
jns
mov
out
push
xchg
inc
or
push
push
les
scas
mov
aaa
xchg
inc
sbb
inc
push
mov
out
jbe
inc
sub
jge
add
outs
arpl
dec
dec
imul
sub
pop
ja
test
int3
sub
sub
into
es
sbb
cmps
das
stc
pavgb
inc
add
mov
jp
mov
inc
xchg
cli
(bad)
mov
push
addr16
lods
test
xlat
pop
retf
adc
iret
in
mov
sub
jle
xlat
ds
sbb
aad
add
sahf
and
sbb
mov
adc
ror
ror
lods
shl
pop
repz
mov
call
int3
sub
adc
mov
mov
inc
lea
jle
bound
add
js
jle
sbb
loope
aas
ins
and
mov
sar
jbe
pop
sar
leave
cmc
inc
jmp
jmp
sub
dec
jp
inc
dec
and
push
push
ret
fidiv
jmp
stos
test
lahf
(bad)
cmps
and
adc
fidiv
dec
js
sub
fidivr
adc
js
sbb
loopne
dec
mov
add
lock
das
call
(bad)
loope
sti
push
adc
xchg
sbb
lea
xor
sub
stos
inc
adc
push
mul
adc
movs
sub
and
repz
mov
fisttp
retf
(bad)
loopne
retf
push
jl
sbb
xchg
mov
rcl
or
loopne
shr
xchg
ds
fiadd
mov
fadd
cmp
shl
pop
dec
nop
sbb
push
xchg
sub
ficomp
(bad)
neg
arpl
out
std
int
push
hlt
mov
fistp
push
xor
inc
leave
dec
icebp
inc
aaa
cmps
test
sahf
dec
bound
ja
fcomp
shr
test
xchg
jb
mov
sbb
or
mov
mov
cmp
jne
and
jmp
xchg
or
and
mov
xor
xor
popa
sbb
mov
dec
fcomp
lock
shr
mov
xchg
sbb
xor
mov
adc
nop
sub
add
cmp
stos
sbb
xor
rcl
imul
ror
adc
push
add
pop
pop
(bad)
je
aam
mov
nop
aaa
mov
es
or
clc
sub
(bad)
mov
(bad)
jmp
mov
test
retf
xchg
jmp
imul
ret
bound
pop
fmulp
cdq
mov
or
js
cld
push
rcr
test
xchg
sbb
sar
jg
xor
inc
sbb
leave
pop
add
or
daa
jne
pop
push
icebp
pop
retf
adc
clc
xchg
jo
aad
inc
xor
test
inc
push
sub
ret
ret
addr16
cmp
movs
shr
xchg
mov
mov
xchg
xor
adc
mov
div
or
arpl
cwde
outs
jne
aam
mov
movs
mov
jle
jp
jb
push
push
fwait
push
pop
mov
test
xchg
mov
je
inc
call
call
nop
and
lock
sbb
xchg
jmp
fstp
mov
add
xchg
ffreep
aad
loopne
mov
and
(bad)
jl
mov
sub
inc
fsubrp
(bad)
adc
dec
jg
das
lods
cmp
xlat
adc
aaa
mov
stos
xchg
xchg
sub
xchg
rcr
(bad)
jmp
pop
push
push
test
ins
leave
bnd
mov
mov
push
lds
pop
mov
and
ficom
mov
jmp
out
mov
jecxz
mov
mov
jle
xchg
pop
shl
jo
sahf
inc
or
jl
fistp
loop
cwde
retf
push
sbb
aas
fcom
jmp
push
dec
mov
test
arpl
mov
pop
fsubp
into
cdq
into
loop
jbe
sub
push
xor
(bad)
nop
(bad)
test
add
xchg
mov
fst
push
lods
push
jne
pop
lods
cld
imul
push
and
jle
inc
retf
jmp
xchg
pop
das
mov
adc
lods
add
mov
dec
popf
xchg
out
aam
pop
xchg
dec
push
cmp
sar
mov
push
sbb
outs
xor
xchg
mov
repz
jle
fs
mov
test
dec
inc
mov
xlat
push
mov
and
enter
in
sbb
scas
icebp
dec
sbb
(bad)
mov
xor
pop
pop
enter
push
in
sbb
or
pop
ret
or
jg
add
inc
scas
inc
out
jnp
xchg
xchg
cmp
adc
cmc
mov
xchg
lea
mov
repnz
loope
std
and
(bad)
xchg
cmp
(bad)
fist
push
or
mov
sub
mov
aaa
jmp
jne
xchg
mov
jo
outs
lock
test
mov
aaa
inc
out
int3
add
inc
outs
nop
cmp
int3
inc
sbb
dec
jmp
sbb
mov
jo
add
popa
sti
adc
push
aas
fist
and
push
cmp
call
xchg
cmp
sub
(bad)
and
mov
(bad)
aaa
and
mov
add
inc
retf
pop
outs
mov
je
xchg
xor
imul
adc
ss
ins
push
sbb
mov
lahf
pop
outs
jns
mov
and
fsubr
dec
pop
mov
lock
in
fidivr
icebp
jne
pushf
cmp
mov
retf
sbb
aas
out
in
mov
xor
scas
jnp
push
cmps
mov
cld
mov
test
(bad)
mov
pop
jns
pop
push
or
xchg
nop
xchg
dec
add
jg
and
hlt
mov
push
and
pushf
imul
jmp
int3
inc
(bad)
pop
inc
rol
add
js
adc
pop
xchg
inc
cli
adc
stos
mov
clc
inc
mov
xor
and
mov
movs
cli
adc
ins
xchg
add
cmps
adc
push
(bad)
imul
xor
push
jmp
jge
arpl
pop
js
pop
int3
js
cs
pop
and
outs
in
sbb
sub
fidiv
mov
jmp
in
mov
imul
imul
lahf
scas
adc
mov
add
test
iret
adc
fbld
push
fcom
imul
add
ffree
ins
jns
pusha
pushf
sti
mov
pop
xchg
xchg
push
inc
pushf
or
mov
int3
fs
sub
loopne
pushf
cld
test
push
cmp
and
fisttp
repnz
dec
mul
addps
push
stos
loope
aam
mov
repz
mov
lds
mov
cdq
pop
lahf
pop
or
xchg
mov
test
xchg
sub
stos
mov
or
jmp
iret
loope
push
or
cwde
es
inc
sbb
es
jecxz
loopne
cmp
aad
sbb
jb
sbb
cmp
cmps
lock
cmp
jecxz
imul
push
mov
clc
addps
and
push
adc
ret
dec
fisubr
test
sub
loopne
test
rcl
xor
out
sbb
mov
data16
cmp
sbb
call
fs
push
imul
cdq
xchg
cmovns
les
mov
sub
dec
and
cmp
ret
dec
pop
push
nop
stc
ds
push
dec
aaa
cld
stc
and
push
cmps
mov
mov
rcl
pop
or
sbb
cmps
sub
rcl
movs
ds
and
shr
mov
out
sti
jo
pop
add
in
or
jae
adc
add
xchg
jecxz
pop
(bad)
pushf
out
jo
xor
pop
sbb
das
xchg
std
cld
cmp
mov
rol
mov
mov
jl
movs
loope
inc
adc
(bad)
addr16
dec
cmp
adc
pop
in
cwde
xchg
cmp
out
(bad)
retf
ds
xchg
xchg
ins
or
push
into
out
push
mov
stos
jae
jmp
movs
sbb
mov
jo
push
cmps
mov
adc
js
inc
bound
out
mov
fild
loope
dec
jbe
jecxz
xchg
pusha
xchg
sbb
lahf
ficom
xchg
push
inc
xchg
xor
inc
out
jnp
lods
fcomp
pop
addr16
lods
es
sub
jb
add
push
aaa
jmp
push
xchg
scas
sbb
ss
lock
inc
je
jge
bound
mov
push
and
jl
cmp
pop
fidiv
inc
es
push
enter
ret
mov
cmp
adc
(bad)
xchg
inc
push
inc
adc
pop
les
(bad)
inc
call
jnp
gs
out
jno
call
cmp
dec
mov
jmp
mov
or
mov
push
xor
call
movs
mov
adc
add
sahf
jp
and
mov
daa
ret
retf
js
cmp
enter
adc
cmp
int3
scas
lods
mov
test
js
fdivr
imul
lods
or
xor
sub
data16
int
sub
jecxz
jo
fidiv
adc
pop
test
mov
sub
or
or
mov
xor
out
in
jmp
sbb
cld
je
aas
or
ja
add
test
and
jo
and
ins
rol
arpl
dec
fs
out
cmps
mov
push
pop
sahf
dec
add
or
std
inc
jmp
daa
(bad)
push
shl
inc
jle
sbb
mov
ret
cdq
retf
jmp
jbe
lock
repz
scas
add
push
adc
jnp
ins
pop
addr16
fcomp
jge
jmp
fidiv
pop
call
xchg
out
call
push
push
lock
outs
add
inc
lock
scas
add
mov
sti
pop
jae
inc
lock
xchg
lock
call
push
jl
popf
cmc
ret
and
call
push
inc
adc
xchg
repnz
aad
in
hlt
xor
out
les
xor
ja
repnz
push
add
adc
je
mov
mov
das
sbb
jle
pop
jecxz
adc
aad
cmps
jmp
or
loop
inc
les
adc
(bad)
bound
test
fwait
in
mov
or
inc
pop
mov
cdq
mov
add
aaa
jne
outs
fs
verr
leave
inc
lahf
mov
xor
jmp
xchg
sub
mov
out
xchg
or
mov
bnd
push
in
ds
mov
lods
imul
dec
popa
dec
aam
sbb
cmp
push
push
xchg
push
cmp
or
lock
mov
pusha
ins
popf
fsub
addr16
rcl
push
mov
(bad)
xchg
jle
jmp
sub
cmps
aam
sbb
jmp
aam
jno
repz
gs
lds
aas
pushf
inc
push
ret
pop
xchg
int3
sbb
mov
fwait
sub
retf
daa
sub
sub
xor
or
fisttp
fst
dec
or
outs
mov
cmp
bound
dec
jl
leave
sbb
clc
sub
sbb
repz
jge
les
imul
lods
out
jge
jbe
sbb
js
cmc
push
push
add
mov
int
sbb
fidiv
xchg
mov
sti
jg
int3
push
jbe
je
retf
mov
push
fstp
ds
inc
jae
push
(bad)
jge
mov
mov
aas
adc
jno
jmp
add
out
inc
inc
jns
(bad)
inc
pop
jle
sahf
(bad)
mov
mov
push
cdq
frstor
in
xor
xor
mov
cmc
ds
gs
jne
and
jno
xchg
(bad)
sar
(bad)
or
jnp
dec
add
mov
mov
shl
or
pusha
mov
retf
int
push
and
adc
xchg
es
jne
cmp
mov
or
stos
imul
xchg
stos
aaa
std
retf
pushf
leave
pop
cmc
mov
inc
shl
mov
lock
lods
out
aas
(bad)
repnz
pop
or
adc
fsub
mov
mov
dec
test
scas
xchg
mov
std
pushf
add
test
adc
mov
(bad)
dec
inc
fucomi
push
add
push
(bad)
jae
sub
rcl
and
fs
push
lods
cli
pop
pop
jmp
xchg
out
adc
hlt
mov
scas
das
adc
add
dec
mov
xor
jbe
xor
pop
scas
(bad)
pop
sub
aas
lds
mov
rol
dec
inc
movs
push
shl
pop
sub
clc
mov
mov
sbb
retf
retf
mov
lock
adc
sbb
mov
sub
movs
addr16
aas
test
(bad)
in
sub
xor
retf
je
add
jg
dec
sub
into
ror
mov
loope
cmp
sbb
int
sbb
fcomp
(bad)
mov
mov
add
inc
xchg
mov
shl
test
dec
movs
xor
(bad)
mov
xor
or
cmp
jl
mov
mul
loopne
out
adc
sub
xchg
add
scas
lahf
adc
sub
data16
pop
sub
mov
inc
xchg
test
ror
stc
sbb
inc
push
in
sbb
nop
add
vpcmpgtw
int3
lahf
int3
repz
ss
les
dec
adc
dec
xor
scas
push
push
jecxz
adc
icebp
leave
pop
inc
cmp
loop
and
sub
out
jo
pusha
xor
aaa
out
lahf
sar
pop
add
inc
outs
out
je
cmps
mov
jae
cmp
jg
and
mov
mov
push
cmp
scas
mov
mov
iret
into
ret
icebp
dec
adc
cmp
jo
aam
jne
dec
cmps
aaa
out
cmp
cmc
push
mov
iret
adc
pop
xchg
dec
pop
mov
out
pop
aam
lahf
and
jns
stc
js
int
mov
sub
sub
mov
call
test
sbb
pop
xchg
ss
inc
add
dec
xor
or
cmp
mov
shl
mov
sub
push
xchg
repz
fdivr
inc
dec
fidivr
fdivr
ins
retf
mov
lahf
inc
sbb
leave
mov
inc
xchg
jmp
inc
cmp
mov
xor
mov
js
mov
fstp
out
ss
mov
into
xor
mov
pusha
das
aad
aam
mov
ds
retf
mov
fs
sbb
xchg
shr
adc
es
jmp
test
sar
pop
mov
pop
sahf
repnz
jmp
xchg
repnz
dec
adc
and
lock
and
shl
xor
into
mov
mov
test
mov
dec
bound
jae
add
pop
fwait
out
or
in
dec
je
sub
mov
fild
stos
jmp
mov
adc
ds
dec
out
sbb
fmul
sti
dec
inc
es
fist
outs
mov
outs
int3
adc
ins
fs
mov
or
xor
jne
xor
mov
jge
adc
inc
adc
(bad)
sbb
cmc
xor
and
(bad)
rcl
sar
sub
neg
jmp
cld
xor
xchg
pushf
or
mov
push
call
cli
mov
jno
pop
in
cmc
dec
or
xor
xchg
test
or
dec
mov
sbb
sahf
clc
fistp
inc
push
xchg
shl
push
test
aad
scas
mov
sub
stos
pop
dec
imul
xchg
or
jnp
in
fild
retf
ret
add
not
jbe
push
add
cmp
mov
inc
inc
in
add
lahf
mov
add
and
fisub
xchg
daa
add
push
and
les
xchg
add
lock
mov
shl
push
shl
into
lahf
inc
pop
mov
mov
or
fidivr
push
or
mov
xchg
mov
int
inc
test
shl
in
repnz
loop
rcr
neg
sub
jo
mov
inc
xlat
call
int3
fist
pop
mov
add
jmp
dec
cdq
mov
adc
push
cmp
add
inc
fmul
sbb
loopne
(bad)
fs
mov
pusha
sub
mov
sbb
sub
arpl
sbb
sub
repz
(bad)
icebp
cmp
jns
sub
inc
in
scas
aaa
mov
ins
sub
aad
sti
inc
repz
ss
aaa
xchg
mov
ins
cmp
pop
push
js
(bad)
and
add
mov
pusha
fs
test
mov
or
ss
cmp
or
mov
les
mov
into
test
mov
bound
adc
adc
mov
push
adc
test
and
retf
cmp
and
je
in
aaa
cmc
pop
pop
loopne
popf
inc
mov
mov
jb
aaa
sub
sub
mov
scas
aas
dec
xor
jnp
repnz
aam
jge
js
fwait
push
sbb
and
jns
shl
sbb
mov
inc
jge
out
dec
push
ret
cli
sub
stos
xor
inc
cmp
ss
jnp
xchg
lods
in
or
push
dec
(bad)
ss
adc
(bad)
mov
(bad)
hlt
inc
push
xchg
sbb
ret
push
arpl
fs
push
call
aam
pop
jecxz
xlat
xlat
mov
test
inc
xor
mov
(bad)
pop
(bad)
and
mov
sbb
cmp
cdq
outs
(bad)
cld
adc
repnz
jp
sub
and
test
repz
lock
jne
ins
xchg
cmp
or
sbb
jno
(bad)
jle
idiv
aas
in
jbe
mov
cli
inc
sbb
icebp
dec
jl
sub
outs
call
(bad)
out
jmp
xchg
jmp
xchg
or
in
add
in
movs
and
fs
shl
js
jns
gs
adc
hlt
lahf
sbb
inc
jno
repnz
mov
jge
push
mov
out
adc
cmp
std
fbstp
and
mov
cmp
pop
mov
(bad)
daa
das
adc
mov
jg
mov
fisubr
pusha
or
jecxz
mov
xchg
int
add
into
adc
adc
test
cmp
retf
mov
mov
sub
inc
pop
cdq
xchg
cmp
jo
mov
cli
jle
je
or
or
lahf
pop
inc
or
daa
sub
imul
mov
(bad)
add
js
lea
mov
es
adc
sub
jno
(bad)
pop
es
jnp
adc
mov
cld
push
(bad)
jae
add
jae
mov
scas
inc
jp
mov
jbe
inc
das
xchg
add
mov
sbb
jge
ins
call
xchg
aam
ret
inc
xchg
jb
mov
aam
test
repz
rcr
ins
cmps
sahf
jno
cdq
les
jp
sahf
jecxz
mul
sbb
rol
int
shr
sub
push
fisttp
imul
sub
mov
dec
test
jmp
div
pushf
ins
cmp
sahf
jnp
addr16
jns
xor
and
inc
idiv
and
frstor
int3
out
cmp
xlat
mov
push
add
test
hlt
add
push
or
cwde
pop
ins
inc
or
fucomip
(bad)
test
and
push
(bad)
cmp
cmp
push
daa
lea
pop
cmc
xchg
es
dec
jns
je
mov
ins
xor
xor
mov
int3
aas
adc
leave
movs
lock
dec
jmp
daa
sbb
cli
test
or
sbb
mov
xchg
enter
ds
add
stos
mov
fcom
je
mov
dec
jbe
pop
stos
cmp
(bad)
(bad)
mov
xchg
popa
rcr
push
fcomp
lds
loopne
jne
pop
sar
inc
mov
xchg
cmc
jo
mov
outs
push
aad
stos
icebp
out
fisubr
xchg
stos
mov
neg
sti
daa
cmp
adc
push
jmp
into
(bad)
call
out
pop
aaa
xor
sbb
push
aad
scas
ret
jbe
test
(bad)
mov
cld
xchg
mov
and
cld
sbb
xchg
add
sti
adc
mov
lds
cs
gs
cmps
dec
cmp
and
leave
cmps
test
retf
fdivr
and
mov
repz
sahf
jo
retf
jl
inc
ret
test
int
inc
xor
in
and
adc
outs
push
ret
inc
cmp
sub
adc
scas
pop
ret
jmp
int3
mov
xchg
add
into
aaa
mov
dec
mov
dec
aam
jmp
js
or
xchg
data16
scas
jbe
out
out
push
sbb
lods
adc
lock
inc
sub
sar
mov
and
adc
xchg
mov
in
pop
aam
nop
xchg
jnp
popf
popf
mov
cwde
rcl
add
pop
mov
add
push
adc
jno
cmp
mov
xor
(bad)
hlt
imul
inc
mov
and
push
and
sub
div
jmp
das
xchg
pop
mov
mov
adc
dec
mov
js
cmp
or
out
inc
pop
(bad)
mov
mov
test
lahf
fst
(bad)
inc
fmul
jge
aam
xchg
or
inc
in
call
adc
xchg
les
(bad)
pop
inc
mov
stc
stos
jb
add
lahf
aas
xor
lahf
dec
sbb
mov
pop
cld
push
mov
(bad)
out
mov
sar
xchg
cmp
and
loopne
pop
ret
lds
adc
mov
call
test
xchg
dec
(bad)
je
cmps
push
loop
aam
lock
dec
add
lds
jl
sub
push
jmp
and
push
add
xchg
adc
jle
fs
xchg
repz
popa
push
xchg
lods
dec
(bad)
cmc
cmp
adc
xor
into
ret
mov
daa
ret
ins
mov
ins
cld
xchg
jg
pushf
outs
sbb
inc
sub
sbb
(bad)
sub
inc
mov
test
outs
sub
in
cmp
jg
mov
test
xchg
cli
inc
arpl
cmp
stos
scas
(bad)
repz
lock
sub
xor
jl
mul
aaa
loopne
movs
adc
xchg
dec
loope
sbb
(bad)
xchg
retf
xor
inc
enter
xchg
jmp
sahf
xchg
push
js
mov
je
sub
xchg
sahf
add
out
sbb
cwde
pop
xor
cmc
lea
jl
add
push
pop
repnz
in
in
push
not
repnz
mov
mov
add
inc
fadd
fild
cmp
dec
popa
mov
xchg
xchg
fdivr
les
xor
ins
pop
jge
shl
cmp
into
aam
cmps
std
out
fcmove
repz
or
jmp
out
inc
gs
(bad)
out
cmp
jne
ins
jmp
cmp
sub
sbb
out
ss
(bad)
cmp
fnsave
mov
inc
fnstcw
stos
sbb
xor
lock
mov
in
mov
fwait
jbe
jb
add
imul
(bad)
icebp
adc
mov
rol
xchg
cmps
and
adc
inc
xor
dec
adc
in
test
stos
push
mov
xchg
sti
cwde
push
ror
in
addr16
dec
ja
pop
nop
sub
cld
inc
xor
adc
lds
dec
retf
pop
add
movs
test
leave
sub
les
push
push
and
lock
inc
dec
inc
in
ds
xor
lods
adc
xor
dec
mov
mov
jle
and
and
inc
retf
jne
js
test
add
shld
cli
dec
push
sbb
mov
fnstenv
dec
or
inc
and
sub
inc
jmp
rol
lock
in
je
fimul
fwait
jmp
pop
test
cmp
sub
test
int
out
mov
(bad)
fist
mov
mov
fbld
push
push
out
mov
mov
dec
nop
mov
daa
pop
in
xchg
mov
pop
addr16
dec
mov
adc
add
ins
xchg
test
xor
repnz
xchg
out
fisubr
cdq
xchg
add
pop
and
inc
mov
jge
pop
push
(bad)
pop
xor
xchg
(bad)
call
mov
jmp
xchg
(bad)
in
mov
mov
jmp
aaa
aas
cmp
xor
or
mov
dec
data16
iret
mov
fnstenv
call
and
fwait
clc
(bad)
in
add
loope
ss
jns
cmps
ins
adc
xchg
adc
mov
fadd
cmps
cdq
adc
pop
mov
inc
xlat
sbb
or
inc
movs
stos
mov
inc
adc
aas
xchg
retf
jne
adc
fs
pop
call
in
xchg
jecxz
mov
dec
jne
pop
ret
ds
xchg
dec
imul
push
mov
mov
mov
ret
adc
arpl
ja
call
sti
ss
or
mov
nop
mov
xchg
leave
out
ss
mov
aad
loopne
(bad)
sahf
xchg
fsubrp
popa
into
mov
fst
dec
std
mov
iret
repnz
mov
daa
ss
retf
dec
mov
mov
repnz
into
inc
sbb
push
pop
mov
push
mov
mov
jg
sbb
cmp
fcomi
aaa
dec
add
fild
cld
and
out
cmp
aam
fnstenv
repz
pusha
test
jmp
jnp
out
aas
stos
cmps
dec
imul
cs
xchg
xchg
pop
adc
into
pop
out
test
call
xor
test
scas
mov
jnp
mov
xor
xchg
adc
ret
jb
dec
ret
jo
ret
sub
xor
sbb
(bad)
sbb
xchg
jecxz
stc
or
mov
ret
call
lock
pop
icebp
lds
sub
push
fdiv
popf
lds
call
addr16
movs
sub
xchg
or
jo
jmp
xchg
push
xor
mov
mov
cmps
mov
jle
push
dec
(bad)
sub
push
ficomp
sti
jae
aas
cmp
pop
imul
fs
or
fnstenv
and
xchg
add
gs
icebp
or
xchg
inc
out
or
and
outs
adc
in
and
int3
add
mov
imul
bound
fistp
das
call
or
jmp
out
fdiv
jmp
pop
mov
int3
xchg
fnsave
sub
aaa
pop
bound
ins
pop
fisttp
jle
repnz
daa
and
xor
fdivrp
retf
fisubr
test
loop
mov
jle
push
xor
push
pop
pusha
dec
sti
sahf
mov
mov
or
retf
bound
xor
sub
mov
(bad)
sub
mov
shl
sbb
mov
ds
mov
inc
pop
jnp
sti
pusha
jbe
push
cmp
leave
pop
fistp
aas
pop
cmp
cmp
push
(bad)
cmp
jg
push
and
dec
neg
xchg
hlt
push
(bad)
outs
(bad)
dec
jae
fwait
and
adc
or
inc
pop
jg
out
pushf
lahf
or
fwait
xchg
jbe
xchg
mov
in
mov
pop
inc
imul
pop
and
jns
xchg
xchg
ret
mov
ficom
push
mov
lods
pop
mov
int3
mov
and
sub
aas
add
or
(bad)
mov
std
mov
mov
dec
das
inc
scas
in
cmp
push
movs
int
jp
enter
prefetchw
or
inc
push
mov
sub
dec
(bad)
mov
xchg
jae
fwait
mov
fcomip
(bad)
adc
cdq
fs
cwde
mov
lea
mov
aas
pop
aaa
xor
or
add
rcl
scas
nop
or
add
and
push
cmp
jns
rcl
cmp
cmp
test
fld
inc
mov
xor
jg
inc
repz
sar
das
jle
out
adc
enter
sbb
and
fadd
hlt
or
dec
sbb
hlt
mov
and
fst
push
sub
xor
sar
mov
ds
pop
jae
shl
inc
mov
sub
mov
pop
mov
ret
inc
jg
inc
into
xchg
aam
iret
pop
std
hlt
and
out
arpl
std
adc
nop
mov
lods
sub
xchg
push
out
ret
mov
test
or
sahf
and
fsub
xchg
add
adc
shl
inc
mov
xor
xchg
cmc
or
pop
daa
xor
push
xchg
(bad)
stos
mov
bound
in
stos
je
push
add
and
es
pop
and
and
mov
aaa
sbb
inc
(bad)
sbb
inc
mov
cmc
and
cld
jo
cmp
cs
in
jge
mov
sahf
jbe
test
js
bswap
call
stos
(bad)
lods
add
imul
dec
stos
jns
in
into
pop
cmp
xchg
jne
dec
and
add
xchg
jl
pushf
scas
sbb
daa
inc
pop
mov
std
jle
jg
out
jmp
xchg
inc
adc
sti
cmp
or
popf
call
add
hlt
or
dec
sbb
je
and
sub
jmp
pop
and
or
call
rcr
jge
(bad)
out
cmp
rcr
pop
mov
test
imul
aas
les
fcmovb
in
jecxz
xor
jno
jmp
ret
pop
leave
fadd
(bad)
pop
inc
sar
sbb
js
mov
loopne
xchg
fnstenv
mov
and
pop
mov
cs
jp
sahf
psllq
daa
xor
sub
icebp
adc
into
lods
cmp
pop
test
sbb
mov
leave
xor
leave
fild
enter
outs
adc
mov
jno
mov
and
ror
sar
aam
push
cmovp
cmp
push
mov
jp
sbb
es
or
xchg
push
cmp
or
or
add
daa
sbb
(bad)
popa
jne
adc
stos
sti
std
mov
sti
pop
xchg
arpl
aad
in
pop
or
das
int3
jle
in
addr16
ins
push
sar
data16
and
jns
push
test
out
rep
push
inc
bound
push
adc
ficom
adc
cmp
or
sbb
inc
cs
sub
jmp
sub
adc
dec
push
fcomip
jbe
fcomp
sbb
vmovaps
sbb
sbb
adc
scas
push
imul
inc
arpl
cmp
lods
scas
fdivp
mov
ds
xchg
test
and
jno
outs
addr16
push
rcr
xchg
shl
add
jno
fwait
xor
push
sub
iret
test
dec
mov
sbb
or
clc
cld
jae
mov
xchg
inc
(bad)
frstor
(bad)
pop
pop
mov
xchg
aas
das
and
fdivr
ret
inc
cmp
popa
call
aaa
sbb
push
add
bound
mov
lods
push
cmp
ror
mov
sar
mov
js
popf
(bad)
stos
(bad)
ror
loop
inc
add
jle
popf
mov
pop
jecxz
jl
mov
lock
inc
xchg
cmp
into
out
out
rol
test
push
pushf
jg
cwde
(bad)
cmp
fsubrp
jo
xor
sub
cmp
cli
fcomp
jg
push
or
push
adc
rol
fs
pop
iret
sub
adc
jle
dec
and
mov
into
loope
or
dec
and
add
daa
test
aas
or
mov
sub
dec
add
xor
adc
add
les
cmp
pop
rcr
pop
pop
inc
adc
ss
dec
fdiv
enter
add
sahf
push
es
repz
and
xchg
out
in
push
rcl
dec
jl
les
pusha
outs
jae
xor
dec
or
mov
into
jge
pushf
add
jne
ret
xchg
mov
inc
(bad)
inc
pop
out
ja
enter
ret
sbb
xchg
movs
cmp
sub
fdivr
adc
repz
loop
dec
imul
outs
(bad)
fadd
out
jmp
mov
retf
jmp
xor
pushf
aaa
and
jo
inc
lahf
cmc
outs
and
in
shl
push
pop
sbb
ret
cmp
mov
sbb
imul
cmps
mov
mov
ins
nop
daa
loopne
xchg
xor
mov
sbb
pop
stos
(bad)
add
sbb
add
xchg
shl
or
cmp
sub
pop
dec
cmp
cwde
xchg
hlt
fsubr
inc
cmc
xchg
repnz
mov
mov
imul
dec
push
test
rcr
sub
loope
mov
jp
addr16
adc
and
dec
popf
mov
xchg
pop
dec
retf
jbe
enter
fabs
nop
jmp
mov
mov
inc
shr
aam
inc
loope
js
dec
xor
aam
cli
mov
mov
mov
lock
call
pop
pop
jns
pop
fucomip
cs
xor
inc
pop
movs
out
fist
inc
lock
sbb
and
js
push
mov
aam
inc
mov
mov
jb
pop
adc
rcr
pop
mov
cmp
stos
iret
adc
add
adc
repnz
fwait
movs
or
push
mov
push
adc
fldenv
pop
sub
fidivr
mov
push
imul
mov
push
movs
mov
outs
xchg
loope
fcomi
mov
inc
push
(bad)
imul
stos
shl
cmp
mov
fld
xor
dec
mov
dec
jl
imul
aam
jmp
arpl
cmp
and
loop
xchg
mov
jmp
jge
cmp
inc
cmc
(bad)
std
sub
lock
pop
ret
ror
(bad)
add
mov
cmp
(bad)
push
inc
retf
popa
arpl
int3
pop
cmp
xchg
rol
xor
and
shr
call
rol
scas
aad
pop
jbe
mov
cli
dec
inc
inc
mov
fst
outs
popf
xchg
mov
pop
cli
cli
ret
mov
jno
jbe
repnz
mov
mov
jge
test
jg
stos
scas
ss
xchg
sbb
int
movs
es
add
add
cmp
mov
sub
sub
or
jmp
int
or
sbb
sub
out
dec
imul
mov
(bad)
jae
movs
test
popf
mov
out
mov
(bad)
jo
and
stc
test
pop
aaa
xor
psrad
repnz
movs
aaa
sub
mov
and
push
sub
retf
(bad)
or
dec
ja
sub
mov
push
mov
ins
mov
pushf
imul
punpcklbw
rol
popf
or
jmp
fcmove
push
aam
mov
retf
into
pop
jns
hlt
movs
pop
pop
ret
jecxz
fiadd
in
(bad)
xor
shr
push
(bad)
iret
dec
les
sbb
icebp
mov
(bad)
jp
mov
add
pop
xchg
push
pop
push
inc
aad
out
jno
ret
push
shl
push
jmp
popf
int
xchg
cdq
data16
aaa
inc
out
sub
loopne
ficom
mov
pop
jns
or
cmps
dec
pusha
repnz
aas
(bad)
jmp
shl
jmp
mov
fnstsw
pop
and
fbstp
mov
mov
leave
mov
(bad)
lds
jge
jl
mov
pop
fxch
js
ja
xchg
cmp
dec
sbb
in
retf
cmps
cmc
test
(bad)
mov
aaa
mov
add
ret
bnd
or
add
ret
push
imul
les
push
cmp
in
loope
xchg
call
stos
pushf
fcom
int3
dec
pop
aam
xor
and
cmps
(bad)
rcr
outs
scas
jae
push
cmps
(bad)
cmp
fisttp
out
adc
hlt
ds
jne
inc
xchg
mov
pop
imul
stos
sar
cmps
mov
stc
int
cmp
(bad)
xchg
dec
fwait
loop
cmp
push
and
mul
adc
mov
enter
pop
fwait
shr
sub
mov
mov
ds
mov
(bad)
mov
sub
push
lock
add
xchg
xor
loope
jle
sbb
cmp
dec
mov
mov
das
and
mov
fisub
jle
push
mov
jge
nop
(bad)
jl
cmc
adc
loope
cmp
or
mov
adc
jmp
out
adc
mov
jecxz
xchg
test
jg
aam
push
popf
je
or
stos
imul
xchg
pop
or
sub
xchg
cmp
into
mov
rol
mov
or
pop
inc
add
call
es
movs
jns
mov
mov
dec
int3
lods
sub
pop
into
imul
pop
jae
cdq
clc
scas
push
fisubr
les
repz
push
shl
pop
sub
jp
and
jmp
test
mov
jge
sti
xchg
and
(bad)
fcom
ss
cmp
fwait
imul
sbb
add
lods
ins
mov
cmps
not
mov
jmp
je
call
jne
cdq
or
ja
ror
fmul
dec
cmc
sti
ret
movs
adc
shl
mov
pop
ret
jno
icebp
jmp
pop
mov
int
fld
into
fsub
mov
call
inc
adc
mov
arpl
ds
mov
jge
and
add
fs
sub
or
clc
mov
in
push
or
in
cli
repz
add
test
adc
pop
jbe
outs
fldenv
in
loopne
call
or
ss
addr16
fwait
es
jo
scas
mov
sub
inc
jge
push
outs
aad
lahf
lods
jae
data16
and
in
mov
sbb
xlat
call
(bad)
nop
add
mov
fdiv
pop
fwait
iret
xor
movs
push
jecxz
(bad)
jmp
shl
push
push
mov
add
mov
jp
dec
aam
dec
xor
cmp
dec
test
lea
(bad)
cmp
mov
aaa
xor
or
jmp
sub
jge
ret
aas
mov
sbb
stos
leave
dec
fsub
cmp
adc
xchg
adc
cmp
scas
pop
test
clc
loop
or
add
or
in
repz
add
adc
call
sub
cmp
or
dec
jno
nop
xchg
adc
aaa
mov
seta
nop
fs
in
retf
sbb
arpl
cmp
dec
or
aaa
sbb
(bad)
hlt
mov
mov
pop
push
xor
mov
jb
adc
ret
inc
int3
les
clc
sets
adc
xor
inc
and
inc
test
(bad)
cwde
jmp
test
xchg
fistp
sub
loop
and
aas
or
mov
sbb
jecxz
es
mov
dec
out
pop
cmps
sub
shl
(bad)
jle
(bad)
ins
sbb
jne
cmp
pop
jmp
fnsave
clc
fdivr
nop
(bad)
jmp
popa
(bad)
jp
xchg
cmp
sbb
gs
jge
mov
test
cmp
fs
into
stos
add
mov
mov
icebp
arpl
enter
clc
ret
(bad)
sbb
mov
loopne
inc
imul
repz
add
sahf
cmps
repnz
or
mov
dec
push
pop
push
aas
mov
imul
mov
xor
mov
icebp
and
jbe
lock
mov
js
les
push
sub
and
jbe
iret
cmp
pop
sub
add
push
pop
or
cmp
xchg
adc
(bad)
stc
aas
mov
and
int
sub
(bad)
nop
nop
pop
fnop
aam
cmp
popf
(bad)
jmp
rcr
mov
stc
daa
outs
fcom
int3
lds
mov
inc
iret
pop
(bad)
idiv
cmp
cmp
jmp
or
rcl
add
push
sub
hlt
xor
lds
xchg
pop
sub
ss
aas
jns
lea
ret
loop
push
jo
in
sar
mov
pop
rol
adc
(bad)
scas
cmp
xchg
ret
xor
cmc
repz
or
(bad)
std
adc
ret
fiadd
xor
mov
div
nop
fs
std
std
jbe
(bad)
pop
sub
(bad)
inc
pop
cwde
adc
rcl
jp
test
mov
mov
dec
mov
rcl
imul
daa
into
mov
test
and
mov
push
retf
pop
stc
(bad)
mov
sbb
xchg
test
cs
mov
mov
int3
call
xchg
mov
sub
je
ss
adc
fistp
adc
icebp
dec
adc
dec
mov
xchg
adc
cdq
dec
cmps
dec
adc
loope
xor
dec
sti
repz
sub
mov
pop
sub
js
bound
adc
and
mov
movs
cwde
mov
fnsave
mov
dec
xor
out
add
inc
ror
cmp
cmp
xchg
nop
arpl
ins
add
out
cs
mov
mov
xchg
aaa
fnsave
push
shr
repz
xchg
adc
jp
sbb
leave
leave
pop
mov
mov
dec
fcom
mov
(bad)
stc
jo
sub
jecxz
arpl
rol
sbb
mov
mov
mov
jae
ret
mov
fsub
dec
repz
enter
mov
jg
sub
int
mov
movs
pop
pop
(bad)
cli
pop
lds
dec
adc
sbb
push
mov
inc
ja
call
aaa
mov
jo
and
bound
pusha
in
repnz
imul
and
adc
call
sub
mov
xchg
cwde
in
mov
repnz
xchg
clc
sbb
or
or
ins
hlt
(bad)
out
loop
ret
clc
stos
leave
xor
rol
inc
int3
mov
push
mov
adc
xchg
test
sbb
sub
jge
loop
jge
jmp
or
out
push
add
inc
dec
add
jge
mov
movs
push
test
scas
ret
jg
mov
xchg
cmp
mov
xchg
add
fs
push
ffreep
aam
jle
lds
aam
jmp
dec
test
cmp
daa
aad
(bad)
je
loope
je
popf
pop
adc
lock
cmp
add
ficom
xchg
outs
add
adc
mov
cli
xor
movs
push
ret
out
adc
loope
cmps
cs
xchg
ror
mov
push
lods
jle
les
jl
int
dec
jge
or
scas
mov
jp
mov
cli
mov
mov
xor
mov
je
jo
push
in
pop
mov
sub
ret
cs
cmp
fsub
out
or
mov
je
mov
lods
gs
jmp
or
in
outs
jecxz
ins
jnp
xor
fistp
into
push
nop
pop
cmp
mov
(bad)
lea
in
arpl
adc
push
test
pushf
ds
xor
retf
test
adc
jmp
sbb
jae
xchg
push
jnp
fs
mov
inc
retf
retf
mov
xchg
retf
imul
mov
sub
push
jmp
jo
inc
cmp
fstp
xchg
pop
mov
sbb
jno
adc
jne
mov
add
pushf
sub
push
lock
lock
ret
sbb
push
(bad)
xor
ja
and
pop
mov
cmp
test
push
fst
pop
gs
push
sti
rol
jmp
mov
xor
gs
sar
cvtps2pd
inc
call
pop
mov
stos
out
jb
sub
xor
fist
xchg
mov
xacquire
push
je
pop
(bad)
jge
push
ret
clc
in
in
xchg
dec
jne
push
xor
inc
xor
lahf
inc
and
mov
vmovntps
inc
pop
(bad)
data16
and
or
(bad)
loop
(bad)
mov
int3
jnp
aaa
pushf
test
adc
push
jmp
sub
test
jecxz
out
sbb
es
and
and
pusha
jmp
mov
fld
popa
jl
test
inc
es
sahf
arpl
(bad)
cmp
sbb
adc
jbe
jge
into
pop
idiv
fild
es
adc
daa
out
ins
xor
sub
jae
cmp
xor
xchg
pop
jbe
aam
call
inc
(bad)
cmp
movs
mov
in
jne
adc
jmp
fwait
ret
or
add
cmps
xchg
in
lock
inc
inc
dec
xchg
jae
jmp
sub
(bad)
mov
mov
aam
mov
imul
push
scas
push
add
xchg
xchg
pop
rcr
test
mov
mov
push
sbb
sub
or
fldenv
aam
sbb
retf
fwait
mov
mov
push
jge
push
jnp
out
out
les
sar
(bad)
outs
jg
xchg
inc
push
std
adc
xchg
sti
test
sub
jge
imul
pop
cmps
jb
and
pop
aam
adc
sub
mov
sbb
test
or
pop
xor
retf
les
add
cmp
pop
(bad)
mov
jl
es
sbb
cs
neg
jo
adc
jbe
xchg
jbe
mov
out
mov
aad
xchg
popf
ja
loop
aam
fisub
mov
fs
pusha
jae
mov
gs
out
cmps
and
cmp
into
sbb
not
cmps
cld
sar
ss
sahf
pushf
add
pop
in
push
and
xlat
dec
sbb
aaa
mov
movs
add
mov
xor
retf
jmp
push
xor
out
mov
or
push
js
jbe
mov
jg
mov
jb
(bad)
sbb
cmp
out
xchg
sbb
xchg
push
sbb
sbb
pop
pushf
pop
and
xor
fcom
or
mov
mov
sub
ins
cld
int3
popf
xchg
or
cmps
cwde
shl
loopne
jno
sbb
xor
(bad)
retf
mov
aaa
(bad)
aam
fwait
pop
div
sbb
mov
push
mov
sahf
sti
gs
sub
jecxz
push
inc
std
xor
xchg
bnd
push
jmp
movs
xchg
xor
cmp
retf
add
cmps
stos
cdq
xor
mov
mov
push
lods
pop
pop
test
xchg
pop
sub
xchg
pop
cmp
jle
dec
out
mov
adc
shl
sahf
push
repnz
fs
mov
cmp
ret
inc
cmc
push
cmp
or
out
outs
adc
outs
pusha
mov
fdivrp
mov
int
lock
push
ret
sub
enter
xchg
out
cdq
cli
neg
add
js
inc
xchg
mov
xchg
pop
mov
leave
push
cld
mov
out
and
inc
jle
daa
fistp
pop
jecxz
les
mov
sti
aaa
adc
xchg
fild
mov
idiv
pop
inc
fidiv
loope
loop
push
(bad)
fmul
stc
xchg
(bad)
sub
pop
and
adc
mov
fcmovnu
push
test
jg
adc
xchg
bound
jmp
xor
sbb
outs
in
mov
adc
xchg
mov
cmps
ja
sbb
rcr
sbb
pushf
xchg
(bad)
push
pushf
sub
cs
int3
into
mov
fadd
mov
jl
je
std
iret
or
fnstsw
into
cdq
out
out
inc
push
xchg
popf
aaa
xchg
test
mov
fdivr
add
popa
int3
xchg
out
push
mov
add
jecxz
sbb
retf
xchg
adc
pop
mov
mov
cmp
aam
mov
scas
mov
mov
popa
xchg
call
out
dec
popa
loopne
sub
mov
mov
and
mov
sti
in
in
cmp
call
push
pop
jnp
jge
ret
pop
add
scas
push
pop
shl
add
cmp
add
push
dec
mov
mov
push
pop
test
es
lds
dec
inc
mov
jnp
ja
dec
fs
test
out
ja
jl
out
in
pushf
xor
inc
sbb
loop
ins
mov
lods
cmp
fs
xchg
mov
and
mov
push
add
iret
fs
pushf
pop
sbb
dec
jge
jmp
jmp
xchg
xor
imul
push
into
ror
jno
xor
adc
leave
sbb
jl
ja
xor
sub
add
nop
icebp
add
xchg
iret
adc
xor
inc
fdiv
mul
(bad)
adc
sub
fstp
push
stos
out
fwait
sbb
jp
and
in
sbb
jb
dec
in
push
xchg
mov
mov
shl
js
(bad)
sar
push
movs
cmps
(bad)
cmc
outs
ss
aas
inc
outs
push
mov
mov
and
scas
pop
pop
xor
aam
or
aad
mov
add
push
stos
push
rcl
add
bound
fs
jmp
mov
call
data16
pop
aas
ret
mov
jbe
clc
rcl
push
out
clc
sub
pop
sub
lock
jle
jb
inc
mov
sbb
repz
mul
ins
aas
sub
pop
mov
fwait
mov
pusha
xchg
(bad)
inc
push
fwait
lods
cmp
cmp
mov
ins
push
int
mov
sbb
push
popf
xchg
adc
mov
xor
imul
retf
xchg
jg
int
aam
sub
jg
cmp
jns
xchg
xor
ss
jmp
aaa
out
dec
inc
mov
xor
adc
mov
or
mov
pop
cmp
mov
adc
jae
cdq
lods
and
mov
out
pop
daa
movs
pop
push
inc
and
lods
cmps
adc
xchg
cmps
out
retf
pop
cmp
dec
pop
cmp
call
(bad)
aas
repz
iret
mov
cmp
out
in
fwait
cli
hlt
inc
dec
scas
test
mov
test
cmp
daa
dec
xchg
push
mov
pop
ficom
lds
pop
mov
add
mov
hlt
enter
fwait
pop
aas
mov
imul
mov
rcl
mov
mov
xchg
fs
(bad)
dec
movs
or
addr16
jl
push
lock
cmps
adc
jecxz
scas
and
mov
inc
xor
aaa
repz
adc
push
lods
in
pop
mov
data16
mov
and
fs
cmp
sar
cwde
mov
es
in
retf
cmp
push
xchg
and
sub
adc
sbb
mov
dec
pop
adc
ret
and
les
xor
and
(bad)
mov
aad
(bad)
out
push
pop
and
jb
mov
cwde
push
test
pop
or
jo
adc
add
cmp
add
jp
ins
push
fiadd
enter
(bad)
stos
ds
popf
jno
jge
pop
sar
jmp
mov
xchg
jno
retf
sub
fistp
lahf
inc
div
jmp
cmp
inc
out
loopne
lds
mov
cmp
icebp
gs
ss
aaa
cmc
or
inc
fisttp
out
xchg
cs
sub
dec
lock
pushf
ret
sub
jmp
pop
push
std
fbld
dec
sbb
out
dec
std
inc
lds
in
fs
(bad)
jbe
jle
xchg
pop
xchg
movs
movs
test
pop
ja
inc
mov
pop
mov
dec
adc
mov
addr16
jnp
ins
pop
dec
xor
dec
dec
dec
jnp
das
pop
mov
sub
xchg
(bad)
mov
inc
cmp
dec
mov
pop
push
nop
sub
sub
das
imul
jno
(bad)
dec
dec
loope
adc
pushf
jmp
and
xchg
inc
lock
mov
push
add
daa
scas
clc
or
push
loopne
push
daa
push
xchg
mov
sbb
push
adc
sub
xor
push
dec
fsubr
call
pop
dec
xchg
push
push
xchg
mov
cli
or
sbb
cmp
mov
mov
add
scas
lods
cmp
and
test
or
adc
adc
mov
cmp
inc
fdiv
out
jmp
xchg
pop
fsub
mov
(bad)
ds
shl
dec
jns
xchg
aaa
add
stc
adc
xor
sub
lds
jle
popa
aaa
outs
and
scas
push
aaa
pop
nop
sub
stos
fst
scas
xor
(bad)
fld
sbb
cli
mov
push
mov
in
imul
inc
adc
mov
addr16
pop
outs
sub
gs
in
ja
mov
inc
loop
add
and
and
test
daa
test
xchg
aad
ret
or
xor
not
ss
das
data16
mov
into
adc
test
aas
jo
(bad)
stc
inc
cmp
in
inc
popa
loopne
in
lock
jl
add
mov
sbb
out
add
nop
mov
imul
imul
div
adc
add
push
jb
xchg
fwait
popa
cli
push
repz
rol
fs
sub
ds
movs
sar
cmps
and
fld
xchg
push
lea
push
arpl
pop
pop
mov
inc
jle
dec
test
cmc
fld
popa
mov
jecxz
jns
jnp
inc
fcmove
cmps
dec
es
bound
pushf
pop
test
sub
inc
icebp
xchg
popf
pop
neg
in
inc
test
mov
add
lds
pushf
movs
aad
mov
sbb
(bad)
adc
in
lahf
inc
(bad)
cmp
dec
lods
das
mov
xor
pop
mov
stos
in
jno
lods
pop
test
jge
retf
push
or
loopne
bnd
sbb
pop
pushf
and
push
adc
add
outs
lods
fs
pop
add
sbb
jmp
mov
imul
retf
out
inc
mov
mov
icebp
ins
out
jge
neg
dec
push
add
in
sub
or
add
sbb
dec
mov
adc
popf
mov
sub
push
jo
mov
pop
xor
mov
sub
fstp
lock
xchg
and
or
(bad)
jg
in
popa
test
retw
into
sub
fisubr
fs
ffree
pushf
enter
push
jmp
sbb
lahf
jo
in
dec
pusha
jnp
(bad)
or
sbb
jl
imul
xchg
push
xor
out
jnp
mov
xchg
pusha
add
pop
loope
mov
pop
mov
add
jp
mov
mov
(bad)
outs
sahf
shr
adc
lds
in
scas
call
adc
jge
scas
and
xlat
lea
jmp
out
jmp
retf
test
xchg
cdq
and
pop
pop
xchg
jbe
int3
inc
ja
out
retf
int3
jno
sub
ror
mov
mov
stos
sub
push
jbe
test
cmp
adc
nop
jle
ds
cli
xchg
xor
js
mov
mov
jle
mov
cmp
test
dec
cdq
adc
push
dec
mov
pop
xor
jo
pop
das
dec
mov
lds
leave
aas
cmp
push
and
leave
fisttp
sbb
out
(bad)
cmc
jecxz
pop
scas
bswap
sbb
jmp
mov
cmp
sub
and
dec
sub
std
xchg
enter
inc
inc
retf
sbb
and
mov
cwde
call
faddp
jl
adc
sbb
push
and
int
imul
cmps
loop
mov
aam
dec
bound
sub
and
pusha
icebp
jo
aaa
xchg
popf
add
pop
retf
js
mov
push
dec
cmp
cmps
daa
(bad)
lahf
out
push
test
call
mov
and
mov
and
iret
jbe
pop
lods
add
inc
mov
hlt
xor
cmp
mov
jb
jmp
ror
xlat
not
inc
leave
(bad)
xchg
lock
sbb
out
clc
stc
mov
mov
jb
add
push
push
xchg
loope
ins
mov
and
fmul
pusha
mov
les
jecxz
aam
and
jge
fstp
in
stc
inc
(bad)
test
sub
data16
out
mov
aad
dec
cmp
mov
stos
xchg
adc
sbb
cmps
jmp
xor
xchg
mov
jae
add
sub
push
imul
mov
push
inc
push
mov
cli
dec
xor
dec
outs
push
addr16
and
scas
add
mov
cmp
xchg
ret
lds
jnp
ja
cld
(bad)
cmc
jno
dec
xor
jmp
mov
inc
fsubrp
jp
inc
xor
or
iret
xor
imul
loop
int3
sub
sti
or
mov
int3
add
push
imul
sti
mov
push
sub
in
jmp
stc
test
jno
fistp
cmp
bound
movs
mov
inc
aam
xchg
mov
dec
shr
js
mov
leave
int3
mov
xor
(bad)
cmp
add
adc
shl
ret
lds
dec
push
je
sub
cwde
enter
sbb
adc
daa
sbb
enter
ins
in
jb
hlt
test
inc
jne
(bad)
out
inc
into
test
(bad)
in
jbe
mov
push
xchg
pusha
push
loop
je
xchg
pop
push
pop
cwde
je
iret
es
mov
sahf
push
sbb
rol
outs
mov
add
outs
dec
dec
in
mov
cmc
in
inc
add
and
mov
mov
stos
jl
xchg
push
inc
stos
adc
pop
not
mov
out
repz
mov
mov
(bad)
jecxz
xor
clc
sar
iret
cmp
fst
jae
add
ficomp
ds
jmp
stc
pop
jb
fistp
pop
mov
movs
aam
sti
add
push
sub
lods
xor
cmp
xor
movs
fbld
cld
dec
jnp
idiv
push
lds
imul
xchg
not
xchg
xchg
lods
and
xchg
pusha
xchg
lock
scas
jmp
sbb
inc
test
push
loop
cmp
seto
cmps
retf
and
dec
mov
imul
arpl
je
idiv
mov
mov
test
clc
push
loopne
pop
inc
out
mov
cld
cmp
lea
fdivr
xchg
mov
sbb
pop
mov
inc
repnz
test
scas
jo
imul
fabs
fstp
mov
cmp
mov
or
in
les
cli
adc
xchg
mov
inc
in
(bad)
ficomp
mov
inc
add
xchg
rcl
dec
or
loope
fmul
call
ds
dec
jp
repz
test
xlat
xchg
adc
sbb
sbb
outs
fadd
pop
popf
loopne
pusha
adc
pop
(bad)
arpl
mov
mov
stos
shl
pusha
fldcw
retf
imul
mov
retf
push
sar
push
jmp
scas
lds
push
push
pop
fsubrp
dec
shl
lahf
aad
xchg
scas
aas
dec
add
mov
push
cli
add
push
ret
(bad)
xchg
and
cmp
(bad)
enter
lods
mov
je
sti
(bad)
jle
jno
or
inc
ficomp
and
retf
jb
push
es
xchg
xor
sub
push
shl
stos
jge
mov
sub
jno
sub
pop
mov
(bad)
sahf
add
outs
or
or
xor
mov
and
pop
aas
mov
iret
das
add
stos
jp
in
enter
inc
mov
out
jnp
lahf
mov
outs
cmp
dec
push
adc
ror
mov
inc
sub
mov
in
push
push
jge
mov
cmps
dec
cdq
pop
popf
cmp
cmc
xor
mov
arpl
sub
dec
sbb
(bad)
mov
loopne
push
aas
test
pop
inc
add
or
shl
pop
shl
lods
push
and
outs
repz
sbb
mov
jae
jg
imul
sahf
push
ror
xchg
cmp
cmp
std
xchg
and
sub
std
(bad)
in
jno
aad
in
test
jle
jecxz
outs
call
sbb
retf
add
int3
xchg
leave
pop
stos
xor
xchg
aam
add
gs
sub
push
mov
inc
mov
mov
push
rcr
(bad)
sub
jbe
es
das
adc
inc
movs
popf
or
aaa
sub
add
xchg
dec
mov
cmp
dec
call
div
popf
push
xchg
jo
or
je
ins
fsubr
retw
xchg
adc
push
bound
in
xor
in
retf
xor
rol
xchg
leave
pusha
rol
imul
cmp
test
and
or
push
cmpps
xchg
inc
js
js
cli
aad
jnp
xchg
rol
fisubr
and
test
cmp
pop
adc
icebp
mov
xor
sahf
push
lock
jecxz
movs
lods
mov
inc
call
add
pop
and
mov
(bad)
xchg
(bad)
mov
loopne
inc
sub
pop
sete
retf
and
xchg
sub
pop
xchg
sub
out
punpckhbw
adc
or
push
dec
aas
cld
or
out
test
inc
mov
ins
inc
ins
push
mov
and
mov
jmp
or
xor
js
aas
jmp
data16
xchg
push
or
sub
arpl
dec
sbb
mov
rcl
lds
sub
stos
cmp
xor
push
stos
clc
xor
and
pop
mov
push
fwait
shl
in
in
push
push
jne
push
lods
leave
std
pop
movs
jmp
push
push
cmp
pusha
cld
pop
adc
and
cmp
pop
push
pusha
movs
fldenv
pop
mov
fdivr
push
or
call
(bad)
xor
adc
das
lods
je
adc
mov
sub
xchg
adc
test
xor
in
adc
sar
stos
or
pushf
loopne
lods
sbb
or
jns
adc
add
or
mov
das
je
fsubr
repz
fstp
loopne
test
and
(bad)
pandn
stos
xor
or
stos
repz
les
data16
aad
jno
imul
mul
aam
sub
std
(bad)
pop
push
rcl
clc
pop
leave
push
int
sub
cwde
repz
mov
sub
(bad)
mov
not
mov
stos
pop
repz
pop
push
lods
shl
pop
mov
retf
loope
inc
add
xchg
xor
pop
(bad)
jo
cli
push
stos
pop
test
dec
sbb
push
mov
add
sbb
ins
cmc
hlt
in
rsqrtps
sbb
out
shr
sahf
mov
fdiv
dec
or
xor
adc
xchg
adc
pop
push
push
in
test
push
sbb
pop
call
jmp
ret
jns
jmp
das
dec
pop
mov
xchg
mov
(bad)
sub
in
xchg
dec
pop
and
retf
clc
mov
cmp
push
cmp
sbb
pushf
xchg
mov
repnz
imul
dec
and
and
(bad)
xchg
add
aam
ins
aad
xchg
mov
or
mov
dec
pushf
mov
pop
sbb
xchg
sti
inc
or
xor
ret
or
mov
xchg
jns
sbb
test
cs
jmp
mov
inc
leave
call
cs
icebp
retf
pop
xlat
xor
call
sbb
lea
adc
inc
mov
ja
xor
arpl
cmp
dec
and
cmp
out
mov
jns
lock
and
(bad)
outs
mov
dec
addr16
movs
(bad)
imul
xchg
push
push
adc
out
mov
repnz
es
sti
mul
push
mov
out
push
mov
pop
into
jns
adc
xchg
jp
(bad)
aad
push
ins
mov
mov
in
cmp
dec
int
xlat
fcmovbe
push
inc
test
outs
cs
sahf
inc
popf
jo
mov
cdq
adc
push
pcmpeqw
mov
dec
(bad)
cmp
adc
sbb
repnz
ins
mov
xor
xchg
mov
sub
fwait
rcl
adc
xchg
fisub
outs
sahf
jmp
in
inc
mov
mov
inc
stos
sti
sbb
xchg
mov
inc
int3
lods
jg
(bad)
cli
and
test
mov
sub
pop
std
inc
sub
push
xor
test
cmc
cmps
test
mov
aad
adc
push
cwde
sub
idiv
dec
push
stos
inc
push
or
dec
dec
xor
xchg
retf
aam
sub
out
and
cmp
jb
fdivr
cdq
ins
inc
loope
lahf
dec
push
add
adc
mov
mov
loop
add
mov
ds
push
outs
(bad)
jmp
aas
fxch
ds
ins
mov
out
mov
cmps
stc
loop
xor
iret
mov
loop
adc
std
add
mov
ret
sbb
outs
ss
das
out
scas
aas
lods
rcr
push
push
(bad)
call
xchg
scas
mov
sbb
aaa
ja
or
in
adc
mov
xchg
mov
push
ins
mov
dec
xchg
aam
dec
in
or
popf
push
jo
pop
not
mov
scas
pop
xchg
and
jnp
adc
mov
mov
int
stc
lahf
xchg
cdq
xchg
(bad)
jbe
das
leave
icebp
sub
mov
mov
rcr
mov
sti
add
test
sbb
xchg
sbb
adc
pop
xchg
and
stc
les
inc
jb
push
adc
iret
adc
cmp
mov
jmp
xchg
sbb
jo
bound
inc
ja
call
imul
test
adc
jmp
repz
sub
mov
fcom
in
rol
and
mov
ds
(bad)
xor
movs
mov
mov
ret
cmp
into
adc
pop
xchg
inc
push
int3
xchg
cmps
ds
enter
fwait
in
xchg
lock
repnz
in
add
out
xchg
mov
fbstp
test
clc
mov
xchg
test
les
in
cmp
sub
mov
pop
test
inc
inc
mov
dec
int
fst
in
scas
retf
jmp
scas
pop
inc
add
adc
repz
mov
and
clc
push
xchg
imul
inc
dec
ja
mov
sbb
adc
pop
jns
xlat
jl
inc
adc
(bad)
mov
lods
call
xchg
jle
movs
aam
into
inc
xchg
ins
shl
and
dec
cmp
(bad)
mov
loope
mov
inc
nop
fimul
test
ins
mov
sub
sti
xchg
test
mov
fdivr
mov
add
push
cmp
sub
mov
push
xor
sbb
fcmove
out
neg
push
and
xchg
int3
test
xor
inc
cmps
mov
pop
lods
rcr
add
into
cmp
inc
xchg
mov
daa
and
xchg
retf
in
jbe
test
lds
int3
inc
xchg
xchg
stc
push
mov
jle
js
(bad)
sbb
fprem1
xor
dec
mov
aam
popf
xor
dec
jmp
das
jmp
inc
cmp
popa
scas
shl
adc
nop
mov
add
xchg
into
mov
xchg
adc
in
adc
push
inc
pushf
sub
mov
in
inc
loope
les
cld
inc
inc
iret
jg
outs
fcmovnbe
mov
lods
jg
sub
js
pop
ret
cld
shl
test
or
inc
daa
inc
imul
jne
rcl
mov
pop
mov
cmps
enter
clc
xchg
ret
jg
fucomi
lahf
test
jns
out
ins
pop
mov
sbb
pop
jmp
add
iret
mov
add
icebp
xchg
inc
cmc
mov
jns
jmp
cli
sub
mov
ins
cdq
dec
repz
(bad)
js
sub
retf
scas
cs
clc
push
jl
or
inc
mov
inc
mov
jg
jnp
jl
repnz
mov
lsl
fsub
cli
lea
mov
jecxz
or
xor
retf
cs
push
sub
inc
nop
aad
test
jle
cmp
ror
mov
pop
push
inc
aaa
sahf
inc
dec
and
rcl
push
imul
leave
pop
rcl
scas
sub
iret
push
outs
ja
mov
push
es
dec
inc
jne
push
ss
mov
retf
clc
fadd
or
mov
jnp
xchg
cs
pop
addr16
adc
cmp
sub
mov
aaa
lods
adc
push
(bad)
imul
hlt
sbb
ror
xchg
hlt
pop
fs
cmp
(bad)
mov
xor
sti
imul
push
xchg
cmp
mov
stc
xlat
mov
push
es
xor
hlt
xor
xor
mov
cli
outs
std
jg
hlt
sbb
sahf
jle
push
pushf
arpl
callw
inc
push
mov
sar
add
shl
mov
ins
aaa
in
fxch
dec
mov
sub
(bad)
loope
dec
cmp
mov
add
out
sbb
add
add
sbb
out
dec
popa
adc
call
sar
mov
dec
xor
lahf
js
push
dec
fisubr
call
cli
sub
es
in
shl
and
push
cmps
cmps
into
dec
mov
gs
mov
call
fld
lods
inc
add
inc
ficomp
push
pusha
xchg
jp
out
ds
and
or
cmp
push
cmc
lea
loopne
sbb
int
mov
daa
mov
xchg
cmp
inc
xor
rcl
cmp
xor
call
push
cmp
mov
leave
dec
nop
adc
into
push
jp
jge
mov
sub
xchg
or
stos
pop
inc
jae
pop
fs
push
push
add
(bad)
jecxz
adc
movs
ins
jns
or
push
in
pop
pop
and
loopne
inc
idiv
mov
cld
call
push
add
xchg
mov
shr
mov
ins
push
lods
inc
and
call
jl
xor
xchg
adc
rcl
xchg
mov
lahf
ss
imul
hlt
jmp
mov
dec
lods
int
out
cdq
outs
or
mov
jno
xchg
in
cmp
mov
sub
jmp
movs
jbe
aad
mov
sub
sbb
xor
call
mov
shld
mov
mov
scas
sahf
ins
mov
enter
add
mov
lahf
lock
sub
add
jge
push
sbb
es
cmp
mov
aas
clc
and
cmps
cdq
adc
stos
pop
leave
icebp
cwde
push
ret
pop
sub
jle
in
dec
aam
ins
mov
or
mov
pop
out
cmc
stos
ret
mov
xchg
jecxz
nop
jmp
stc
cmp
call
std
mov
cmp
lahf
mov
aad
loopne
inc
lods
clc
in
(bad)
jg
xchg
and
cmp
call
in
add
imul
dec
or
rcr
mov
mov
push
daa
mov
shl
sahf
and
scas
mov
les
sbb
pop
adc
int3
mov
std
adc
sbb
xor
and
loope
or
mov
dec
ins
ins
mov
mov
icebp
inc
jge
jnp
pushf
xor
pop
es
mov
xchg
pusha
not
fcomp
xchg
mov
jecxz
in
fdivr
add
mov
test
mov
popa
ds
and
out
pop
jns
xchg
shr
jecxz
xchg
push
(bad)
cld
aas
stos
ins
ret
in
cmp
gs
xchg
data16
imul
cmp
jecxz
retf
pop
jnp
mov
and
jmp
fimul
inc
pushf
icebp
iret
sbb
repnz
mov
nop
das
inc
repz
call
js
gs
pop
rcl
add
cmp
rsqrtps
(bad)
shl
js
std
jb
aaa
call
test
cmp
and
rol
iret
adc
dec
sbb
in
out
jg
nop
sub
aam
clc
mov
xchg
mov
add
push
cmp
mov
jmp
cmp
and
and
ds
pop
es
mov
mov
xchg
in
cdq
fbstp
mov
(bad)
gs
pop
imul
jl
not
cli
nop
inc
rcr
aad
xchg
(bad)
std
mov
xor
mov
sub
push
push
ss
push
(bad)
retf
ja
pop
in
out
pop
mov
movs
sub
and
pop
push
iret
cdq
stos
outs
repz
ret
out
push
pop
dec
sub
xchg
inc
adc
adc
xchg
adc
cmp
jmp
xchg
inc
dec
fwait
jbe
adc
mov
push
aas
inc
sbb
cdq
data16
cli
movs
retf
xchg
jg
mov
ss
mov
leave
inc
inc
das
(bad)
push
popa
js
xchg
movs
sub
mov
aam
ds
dec
mov
xchg
into
in
enter
pop
dec
gs
or
aaa
xor
jb
fs
popf
sbb
xor
into
scas
cmps
fisubr
cmp
fldcw
inc
push
push
and
xchg
sbb
xchg
sub
mov
emms
cmp
ins
lock
xchg
push
mov
or
enter
aas
adc
xor
xchg
movs
and
dec
loopne
into
sti
and
outs
cdq
cmps
aam
retf
sub
repz
std
ins
fdiv
xor
je
adc
sbb
loop
push
jo
imul
jo
sub
add
sbb
mov
fs
jb
add
sar
data16
fdivr
outs
jg
push
push
ins
push
mov
cmps
pop
mov
enter
push
scas
xchg
xor
push
sahf
in
pop
or
jnp
cmp
es
movs
in
jge
mov
push
lock
dec
jno
fidivr
arpl
sbb
mov
sbb
mov
cmp
scas
jne
data16
cmp
adc
dec
int3
es
push
xor
rcl
jg
adc
mov
jl
jg
rcl
xchg
das
inc
daa
addr16
sbb
leave
ror
fmul
ficomp
arpl
mov
fs
adc
(bad)
fcom
outs
cmp
shl
ins
les
movs
push
fsubp
shr
ds
xchg
je
add
jg
(bad)
div
dec
div
fist
push
(bad)
stos
aas
nop
out
out
lds
xlat
repz
push
or
inc
les
sbb
addr16
adc
std
mov
jle
ds
add
cmps
stc
dec
loop
xchg
and
xchg
nop
pusha
stc
push
push
sbb
into
inc
mov
ds
adc
push
cmp
int
sbb
ret
xchg
jnp
inc
ss
jns
shl
ret
sub
(bad)
adc
ror
int
(bad)
dec
or
mov
mov
sbb
out
or
mov
mov
ficomp
mov
rcr
xor
fwait
inc
xchg
mov
sbb
(bad)
jmp
int3
std
shr
mov
jecxz
inc
ja
stc
movs
and
xchg
add
sti
xchg
in
adc
inc
addr16
ss
adc
call
cmps
add
fild
and
xchg
addr16
push
test
repz
dec
stc
xchg
jae
fstp
sub
sub
in
retf
clc
sbb
inc
(bad)
stos
test
nop
cmp
(bad)
push
repnz
inc
sahf
mov
sub
sbb
mov
sbb
daa
div
pop
or
in
outs
ret
cmp
(bad)
ins
jnp
push
ss
and
out
xor
jo
movs
test
out
or
jmp
xchg
cmp
jnp
xor
cmps
xchg
pop
add
shl
jnp
data16
lahf
jnp
aas
xchg
cmp
(bad)
cdq
hlt
cmc
sbb
or
xor
ins
dec
sahf
(bad)
in
inc
adc
sbb
(bad)
aaa
adc
mov
sbb
ror
fisubr
sub
inc
jge
sbb
xor
or
jge
dec
mov
mul
jae
fcomp
lahf
retf
mov
adc
ds
ret
cmps
inc
pop
sub
mov
repz
rcl
repnz
adc
arpl
les
sahf
lock
mov
retf
pop
fisubr
xchg
imul
mov
mov
or
mov
xchg
push
cmp
dec
mov
sub
jo
imul
call
retf
(bad)
xor
rcr
jb
popa
pop
add
cmps
xchg
adc
jmp
or
jge
mov
sti
mov
fldcw
xor
mov
sbb
addr16
dec
ret
mov
leave
xor
lods
in
xchg
push
add
adc
adc
leave
cld
repnz
pop
into
and
ret
hlt
ret
in
in
add
fcomp
call
cs
xor
jae
ror
sbb
retf
ret
mov
fs
xor
sub
popf
pop
xor
sbb
push
adc
ja
mov
xor
push
sahf
and
pop
fisttp
pop
fimul
or
outs
inc
loop
adc
in
pop
dec
test
and
stc
xor
inc
dec
mov
adc
xor
fisub
loope
addr16
lock
xchg
(bad)
xlat
inc
mov
movs
mov
mov
add
out
out
data16
aad
pushf
sbb
aas
cmps
push
sbb
sti
lock
mov
imul
ss
shl
nop
or
push
adc
xor
shl
aam
sub
shl
xor
inc
add
dec
aas
(bad)
addr16
dec
scas
ss
int3
push
ins
ret
das
mov
out
idiv
cmp
movs
push
mov
js
mov
cmp
leave
jae
jmp
(bad)
dec
pop
sbb
dec
xchg
cld
mov
les
and
pop
cwde
gs
aad
pushf
rcr
inc
rcr
push
cdq
jecxz
mov
mov
dec
imul
and
adc
in
dec
ins
mov
test
xor
mov
cmp
mov
xchg
xor
and
mov
inc
in
fwait
mov
dec
jbe
add
jo
fist
jo
mov
jb
popa
mov
sbb
add
xchg
xchg
mov
jecxz
repnz
sub
ds
arpl
scas
hlt
push
jmp
cmp
jbe
fs
add
cdq
add
and
cmp
dec
adc
xchg
mov
mov
mov
sbb
and
and
xchg
clc
addr16
ins
out
imul
call
jmp
or
stc
(bad)
inc
pop
clc
cmp
leave
mov
fld
rcl
jecxz
mov
inc
fwait
in
shr
ror
push
cmp
(bad)
xchg
les
fbstp
(bad)
fst
pop
mov
sti
sahf
outs
lahf
test
pop
(bad)
int3
and
xlat
mov
or
pop
fisubr
loope
fsub
sbb
movs
mov
sub
jecxz
pop
(bad)
cmps
cmp
pop
jne
in
fdivr
pop
data16
(bad)
retf
dec
retf
hlt
iret
adc
retf
int
and
je
adc
mov
dec
scas
popf
sub
(bad)
push
pop
mov
mov
xlat
adc
out
xchg
retf
mov
mov
sub
pop
pop
outs
(bad)
stc
xlat
out
xchg
retf
mov
test
sub
bound
test
out
inc
in
movs
or
fwait
or
aam
push
and
cmp
call
pop
cmp
test
fadd
cmp
lock
and
sub
jb
ja
clc
sahf
xchg
push
aam
sub
stos
jp
es
mov
cmc
fist
or
movs
cmp
mov
cli
ret
call
adc
daa
pop
rcl
in
retf
fsubr
mov
push
pop
mov
adc
dec
inc
clc
xor
sbb
stc
or
int3
nop
scas
inc
je
cmp
cmp
jae
mov
repz
mov
je
pop
fist
and
in
cmp
sub
sbb
pop
iret
fcom
idiv
int
scas
pop
ins
(bad)
mov
sbb
(bad)
push
fsub
xor
push
xchg
push
movs
or
jle
movs
into
cmp
push
test
xor
arpl
inc
add
das
jnp
push
fisubr
mov
dec
clc
mov
pop
rcr
xor
test
mov
int3
xchg
mov
inc
test
retf
cld
icebp
aaa
rol
sbb
dec
ret
jb
inc
push
mov
push
jno
jg
les
jmp
mov
mov
add
jmp
(bad)
jmp
retf
sbb
cmps
mov
sub
call
push
sbb
mov
bt
pop
and
jo
xchg
addr16
out
and
mov
stc
add
or
shl
movs
mov
mov
idiv
mov
(bad)
retf
in
inc
call
cdq
in
inc
mov
and
mov
sbb
inc
lods
int3
outs
mov
test
aad
add
sbb
or
mov
mov
mov
xor
xor
(bad)
fadd
adc
inc
clc
test
or
xchg
mov
pop
mov
add
and
push
rcl
sahf
fild
sbb
adc
movs
sbb
add
fisubr
xchg
sbb
or
sub
inc
inc
fld
sub
add
mov
nop
jge
sub
push
jnp
inc
push
imul
stos
and
sbb
fs
cs
xchg
inc
jmp
fs
sbb
sbb
push
cmc
aaa
cdq
nop
xchg
pop
out
jcxz
adc
or
ret
cmc
xchg
mov
sldt
mov
or
pusha
in
test
inc
cmps
loopne
pop
test
cmp
loop
stc
loope
mov
pop
adc
sub
fimul
dec
jb
ret
xor
test
or
jo
ds
stos
mov
jge
add
test
iret
cmp
jl
lahf
fnstenv
aaa
ins
loop
mov
push
push
jl
xchg
sub
jge
cs
inc
push
xchg
clc
mov
push
mov
enter
or
or
(bad)
ss
inc
mov
push
(bad)
pushf
cs
push
fsubp
fs
inc
popa
(bad)
aaa
pop
in
jns
sub
fsubr
add
dec
mov
mov
mov
sbb
lock
in
into
pop
jg
dec
loop
mov
daa
rcl
lods
cwde
add
xchg
nop
pushf
lock
mov
out
call
aam
fwait
rcr
repz
or
xor
ins
in
mov
out
iret
imul
imul
inc
ss
inc
call
hlt
dec
mov
ins
les
mov
aaa
pop
leave
mov
pop
mov
repz
mov
call
mov
pop
repnz
mov
test
movs
fisubr
jb
ds
out
call
mov
rol
test
jmp
fdivr
jmp
and
pop
mov
sbb
(bad)
push
xchg
iret
int
fist
arpl
mov
push
push
sub
test
scas
mov
xchg
dec
es
nop
jl
ins
in
inc
xor
pusha
add
mov
fadd
sbb
icebp
xor
xchg
jecxz
(bad)
sub
sar
sbb
imul
jl
mov
outs
cwde
movs
test
inc
aaa
sub
out
int3
out
sar
es
ins
ins
lock
scas
daa
cmps
in
stc
out
jle
xchg
mov
xchg
sub
pop
mov
(bad)
scas
xor
in
idiv
inc
leave
or
retf
inc
xchg
repz
adc
aad
sti
js
out
xchg
xor
cmp
shl
int3
fs
test
int
pop
or
sub
daa
jbe
mov
sub
pop
clc
fwait
jg
pop
enter
add
cld
and
add
inc
dec
out
into
push
inc
test
xor
jae
jbe
adc
adc
mov
arpl
and
xchg
test
je
(bad)
cld
dec
adc
push
bound
xchg
and
push
dec
dec
nop
inc
movs
das
cmp
jl
mov
clc
aaa
mov
sbb
jge
leave
xor
sub
cld
pushf
push
test
mov
jne
jg
loope
(bad)
or
shl
int
xor
jne
les
les
(bad)
adc
xchg
cld
jns
int3
cmp
mov
xchg
retf
dec
ins
daa
push
mov
xchg
dec
xchg
push
imul
aaa
dec
stos
mov
sti
jl
iret
test
push
repz
leave
pop
pop
gs
loopne
lahf
cld
adc
xchg
or
fs
stos
and
cmps
sub
ret
adc
adc
adc
mov
enter
xchg
test
not
test
mov
ret
scas
ror
jmp
pushf
das
movs
pop
fcom
adc
cmps
xor
retf
cmc
mov
jmp
jne
jne
(bad)
popa
mov
fcom
in
mov
stc
iret
xor
shl
or
and
in
mov
lock
aaa
fwait
loopne
hlt
(bad)
mov
mov
into
leave
mov
cmp
shl
xor
fcmovnb
push
aas
mov
fisubr
pop
ret
test
mov
xchg
in
dec
es
sub
jl
(bad)
xor
cli
cmc
es
aaa
jns
test
push
rcr
(bad)
xchg
xchg
mov
jmp
clc
inc
cmp
xchg
push
xor
cli
ret
sahf
data16
inc
cmps
and
inc
adc
lea
mov
pop
inc
fcomp
jg
push
mov
fbstp
cmp
arpl
xchg
stc
add
(bad)
jl
push
fwait
scas
data16
hlt
adc
cld
mov
xchg
idiv
aam
nop
data16
lahf
or
mov
out
pop
cmps
push
std
leave
push
cmps
test
xchg
fs
psrlq
fimul
fs
je
push
dec
and
jmp
ret
push
aaa
cli
jns
add
hlt
inc
sbb
mov
lds
sbb
lea
ret
loop
mov
jecxz
std
ja
mov
pmulhw
dec
push
xchg
push
xor
repz
dec
es
mov
and
adc
lea
sar
adc
lods
out
xchg
inc
pop
(bad)
test
xchg
aaa
ja
hlt
imul
repz
aas
jne
test
jne
xor
in
and
pop
es
pop
repz
pop
fnstsw
arpl
sbb
xchg
jbe
aas
lods
int3
mov
cmps
jbe
jno
sub
cmp
jl
outs
pop
dec
fucomip
dec
xor
mov
dec
xchg
arpl
in
inc
scas
mul
jmp
stos
xchg
mov
xchg
fnstenv
push
bound
mov
sbb
mov
xchg
std
call
dec
mov
mov
scas
xor
push
push
imul
mov
jbe
sub
jbe
ins
and
pop
pop
fdiv
imul
ds
jnp
push
leave
mov
sub
add
(bad)
fld
xor
std
test
mov
xchg
add
and
sub
stos
in
mov
pop
push
(bad)
jo
sub
aad
sub
sub
out
and
leave
adc
adc
mov
cmp
pop
xor
out
adc
int
push
clc
rcl
repnz
push
xchg
into
mov
stc
call
jg
fmul
dec
jbe
lds
repz
inc
loope
stc
cwde
data16
jne
push
imul
or
aad
jo
lahf
cmp
cmp
sbb
shl
mov
sub
(bad)
mov
cs
mov
cdq
(bad)
jmp
cmp
xchg
fdiv
push
xor
or
push
jb
and
jb
jnp
add
jg
stos
mov
push
mov
ins
jle
and
imul
lea
(bad)
push
adc
pop
mov
inc
test
add
pop
aam
ds
add
mov
pop
mov
sub
push
cmp
dec
mov
cmp
retf
sbb
cmp
push
mov
shl
sub
hlt
sub
or
and
mov
or
xchg
adc
clc
out
test
mov
loopne
xchg
push
push
mov
div
mov
mov
hlt
pop
push
call
mov
adc
outs
out
dec
test
pop
mov
(bad)
(bad)
mov
jo
jecxz
int3
(bad)
and
sub
sbb
cwde
shl
xor
push
fsubr
pop
mov
jg
retf
dec
icebp
inc
adc
jp
pop
ficom
xor
add
inc
dec
adc
inc
aas
in
fs
and
or
ret
icebp
dec
or
call
jecxz
push
dec
or
inc
aad
xchg
sbb
enter
test
mov
xchg
add
inc
add
jnp
add
xor
xor
cmp
enter
(bad)
in
dec
cmp
xchg
rcr
pop
les
pop
es
mov
retf
and
les
push
cmp
pop
aaa
fadd
stos
mov
cmps
lds
ds
mov
sub
pop
add
push
mov
out
xor
rcl
jns
test
mov
push
mov
icebp
loopne
jno
inc
dec
inc
mov
mov
das
xor
cmps
inc
fdivr
fmul
mov
mov
jae
mov
push
iret
fs
mov
and
ds
out
movs
fsub
push
outs
mov
hlt
jecxz
icebp
dec
xor
rcl
les
call
lea
daa
dec
retf
out
icebp
push
mov
inc
and
mov
push
xchg
mov
scas
std
mov
mov
mov
outs
cli
or
and
std
icebp
pop
cmp
xor
dec
shr
(bad)
lahf
mov
aam
mov
cmp
les
sar
xchg
jae
inc
pop
and
daa
push
(bad)
cmps
dec
ja
scas
sbb
fisttp
jo
sbb
push
or
fwait
ret
addr16
xchg
mov
cwde
xor
or
xchg
jl
mov
xchg
xor
popa
mov
loope
fnstenv
jecxz
rol
push
fs
aam
stc
lock
pop
xchg
aaa
repnz
jle
and
dec
mov
neg
not
push
gs
imul
sbb
stos
fs
stos
movs
mov
xchg
inc
cmp
rdpmc
retf
mov
ret
sbb
out
je
in
aam
jle
clc
xor
in
push
xor
(bad)
sbb
adc
sub
jo
fdivr
call
scas
in
jbe
mov
xchg
push
mov
or
pop
xchg
shl
inc
adc
dec
shl
in
dec
nop
enter
arpl
xchg
jl
sub
cmp
or
outs
mov
(bad)
fmul
jbe
in
sti
aaa
shl
into
cld
lods
retf
jns
sbb
shl
or
mov
in
test
fimul
adc
aam
jge
xchg
enter
jmp
jl
(bad)
dec
hlt
sbb
jle
mov
(bad)
jns
cmps
lds
mov
xchg
out
mov
scas
out
xor
sbb
test
mov
or
add
push
mov
cli
push
push
in
scas
pop
jb
jecxz
or
push
pop
cmp
lods
(bad)
dec
push
xor
inc
xchg
jns
ins
enter
mov
jmp
or
call
adc
int
inc
mov
test
aad
inc
pop
push
dec
nop
mov
xor
js
push
add
pop
in
sub
or
es
jl
cs
(bad)
in
sbb
xor
repz
mov
push
mov
in
icebp
retf
dec
mov
dec
dec
jp
mov
aad
dec
lods
xor
fisub
sub
inc
mov
mov
mov
add
mov
xchg
push
adc
lock
shl
scas
dec
adc
jno
loope
rcr
mov
hlt
pop
mov
jge
push
cmps
dec
dec
mov
pop
call
push
cwde
jmp
push
mov
pop
out
cmc
inc
fdivr
bound
leave
repnz
and
nop
lea
sbb
inc
xchg
dec
add
xor
in
outs
gs
xchg
in
retf
cld
cmp
and
fist
jns
ds
cmp
push
cmc
shl
adc
mov
inc
push
cdq
fsub
dec
cs
pusha
add
xor
jl
dec
dec
pop
je
push
aad
xchg
push
imul
iret
xchg
ja
adc
rcl
test
add
adc
fwait
ror
dec
pop
in
int3
xor
rcl
dec
out
stc
inc
lahf
sti
add
mov
scas
xchg
xchg
dec
xchg
(bad)
inc
je
adc
enter
call
add
mov
and
shl
ss
cli
aaa
repnz
rcr
out
pop
sahf
mov
push
add
cmps
mov
sbb
dec
ret
sub
xchg
push
lods
mov
mov
rcl
and
cmp
out
adc
das
add
mov
sbb
jge
fild
(bad)
gs
out
jbe
aas
scas
pop
jl
mov
dec
xor
and
sub
xor
push
repz
sti
mov
aas
test
mov
movs
fnstsw
xor
rol
out
bound
jmp
mov
and
add
retf
cmp
je
add
and
pop
les
push
(bad)
jmp
mov
or
xchg
rcr
aaa
fstp
mov
or
push
fadd
cs
aaa
cld
xor
enter
mov
sbb
mov
shl
in
aad
int
adc
enter
ds
adc
scas
adc
xchg
popf
and
xor
mov
nop
outs
add
and
inc
leave
in
sub
ficomp
and
dec
mov
cmp
int3
or
pushf
mov
nop
and
ins
add
dec
cld
addr16
jae
int3
push
push
mov
ret
inc
in
not
or
or
fs
push
mov
add
mov
mov
loopne
dec
sbb
mov
(bad)
sub
sub
xor
cmp
jo
retf
bound
aaa
paddb
fisub
xor
jae
mov
mov
in
ins
inc
aas
cmp
aas
cmp
jge
or
fst
loope
lea
jbe
dec
scas
xor
fist
pushf
cmp
jo
popf
sbb
push
adc
scas
js
sbb
jns
das
das
inc
jg
lods
loopne
sub
icebp
xor
jg
ins
leave
mov
xchg
scas
inc
ja
lahf
sbb
gs
in
mov
mov
rep
addr16
scas
leave
popf
push
cmp
cmp
mov
mov
cmps
add
out
xor
jb
movs
ins
in
or
call
xor
mov
rcr
pop
xor
div
gs
out
add
sti
inc
scas
(bad)
icebp
mov
jecxz
retf
mov
mov
jmp
test
mov
and
or
scas
mov
push
jge
or
mov
jnp
(bad)
movs
das
mov
aad
fsubr
hlt
adc
sbb
mov
sub
retf
xchg
shl
call
cmp
scas
jmp
mov
arpl
add
mov
adc
dec
xchg
jne
or
test
cmp
into
jne
fimul
sahf
inc
lock
mov
jge
popf
popa
retf
repnz
sub
add
in
test
(bad)
mov
or
cmps
xchg
in
pusha
and
add
adc
jl
mov
mov
jb
hlt
jp
and
add
imul
out
je
push
retf
ret
inc
push
(bad)
pushf
mov
(bad)
ds
ss
lahf
pop
inc
push
mov
test
push
fdivrp
xchg
(bad)
xchg
cdq
popa
(bad)
sbb
mov
outs
push
push
xchg
in
adc
shl
and
fisttp
sub
sbb
les
jmp
fcmovnu
(bad)
jecxz
test
outs
(bad)
xor
fild
mov
push
mov
sub
push
inc
adc
movs
ror
dec
mov
pop
push
pushf
mov
repz
and
mov
and
sti
jo
or
xlat
imul
inc
xchg
dec
jno
fisub
add
outs
rcr
jno
cmp
arpl
mov
dec
(bad)
inc
or
fsub
jbe
push
(bad)
mov
out
daa
mov
loopne
aam
(bad)
rol
aas
inc
movs
(bad)
cmp
mov
lods
in
lahf
add
sahf
into
mov
mov
rcr
inc
sub
sub
fiadd
sbb
xor
popf
(bad)
adc
sbb
xchg
adc
(bad)
cmp
sbb
(bad)
xchg
repz
pop
xchg
fsub
xchg
dec
or
(bad)
sti
cmc
pop
mov
xchg
jb
aad
push
add
xchg
ficom
movs
adc
clc
lods
adc
mov
gs
fist
das
sbb
shr
cli
pop
iret
dec
test
mov
shl
not
push
and
arpl
loopne
pushf
retf
adc
push
fcomp
dec
jne
xchg
mov
add
fist
std
jmp
adc
xchg
jle
fidiv
mov
mov
loop
sub
sbb
xor
ss
push
adc
cmp
jmp
shr
fnstsw
movs
and
sub
sbb
shr
shl
and
ret
stc
mov
mov
push
popa
in
iret
jae
xchg
stos
pop
push
xchg
call
add
mov
gs
ret
repnz
clc
mov
xchg
mov
lahf
cmp
lods
push
shl
leave
xchg
imul
mov
rcl
push
cmc
inc
fldenv
sub
in
das
arpl
aam
mov
mov
jl
pop
(bad)
sbb
xchg
ficom
mov
movs
test
enter
(bad)
sbb
mov
popf
dec
ss
xor
cld
xor
xchg
inc
mov
leave
aaa
leave
fucomi
pop
sti
(bad)
iret
inc
jg
and
cmp
std
xchg
adc
(bad)
mov
push
mov
dec
sahf
or
outs
div
and
cli
call
(bad)
das
mov
dec
cmp
(bad)
into
sub
add
retf
out
jbe
jge
scas
in
rcl
jne
mov
fidivr
xchg
pop
dec
jmp
mov
add
jbe
and
inc
and
jno
fisttp
or
(bad)
(bad)
lea
or
dec
repnz
sub
lods
adc
fsub
repnz
lods
jg
sbb
fsub
cmp
repz
aaa
call
sbb
pusha
jb
daa
fidivr
test
addr16
test
test
cmp
ins
xchg
adc
add
sub
xchg
mov
jge
not
(bad)
bnd
lahf
outs
mov
cld
shl
enter
add
pop
es
xchg
mov
stos
xchg
push
mov
jge
test
mov
adc
xchg
sbb
sbb
push
push
and
mov
hlt
xlat
adc
adc
xor
xor
xchg
mov
jl
push
push
jecxz
cmps
jmp
aas
imul
mov
mov
add
int3
add
inc
aas
frstor
jl
inc
xor
push
div
aas
push
retf
xchg
add
pop
loopne
ja
movs
inc
push
mov
push
add
test
clc
add
pop
jmp
inc
out
mov
jmp
pushf
push
test
jg
pop
xchg
push
div
jns
fistp
lock
(bad)
xor
bound
mov
xchg
and
retf
loopne
ret
dec
and
pusha
inc
ret
loop
xchg
rcr
aam
push
add
(bad)
cmp
mov
fs
add
jb
mov
ds
rcr
scas
fldcw
jg
int3
ret
arpl
adc
mov
popf
inc
or
xchg
seta
das
jmp
enter
clc
fstp
lds
push
xchg
movs
addr16
push
es
cwde
add
xchg
imul
popa
pop
mov
rcr
jae
jg
out
int3
in
sbb
movs
fadd
popf
mov
dec
dec
inc
mov
add
xchg
pop
test
sbb
lods
ret
pop
sub
(bad)
and
inc
or
retf
xchg
out
repz
inc
idiv
in
mov
daa
imul
inc
pusha
dec
dec
sub
(bad)
or
rcl
sub
cmp
xchg
in
adc
lahf
adc
add
mov
ret
push
xchg
fnstenv
fdivr
cmp
ss
add
fs
cwde
aaa
cmp
sbb
adc
adc
std
sti
ds
popf
lahf
jle
xor
scas
sub
(bad)
in
xor
xor
cli
ud1
jne
and
push
add
cmp
mov
test
xchg
int3
sbb
lahf
cmp
retf
sbb
popf
pop
and
ins
pop
idiv
cmp
cmp
cmp
push
lock
sub
xchg
and
jno
pop
pop
xchg
or
mov
mov
aas
dec
sbb
pop
pop
(bad)
outs
xor
nop
test
inc
in
jmp
cmp
mov
adc
or
jno
cmp
and
push
inc
int
push
loop
ja
aam
push
in
test
lock
adc
jmp
mov
retf
ja
retf
ins
xchg
outs
mov
sahf
xor
xchg
ds
mov
lods
iret
dec
mov
xchg
lahf
mov
xchg
or
in
push
pusha
and
je
repnz
mov
test
test
push
out
retf
sub
cmps
jp
sub
ficom
mov
sar
mov
mov
xor
fimul
mov
add
lock
or
or
in
adc
mov
jo
mov
pop
xchg
scas
sub
out
sbb
mov
mov
in
js
pushf
ds
xor
jno
out
bound
xchg
sbb
ret
mov
sbb
out
cmps
ror
lahf
jb
aad
inc
or
push
xchg
mov
cmp
sbb
sub
jge
inc
inc
push
cmp
popa
add
loope
xor
mov
or
lea
cmps
repnz
dec
sbb
dec
scas
mov
or
sub
xor
xor
inc
push
in
call
test
adc
aad
jmp
frstor
xlat
mov
sbb
and
adc
cs
jbe
out
cli
jg
mov
xor
stos
dec
int3
mov
jecxz
pop
inc
aaa
sbb
or
jl
sbb
outs
fsubr
mov
adc
mov
mov
out
push
mov
daa
scas
xchg
push
jns
add
in
inc
repz
sub
iret
popa
loop
mov
lahf
ins
sub
add
retf
xor
pop
sbb
enter
pop
xor
test
(bad)
mov
retf
(bad)
pslld
mov
(bad)
jl
test
mov
stc
ss
push
lods
out
ret
sbb
lahf
mov
stos
and
push
cmp
jmp
popa
dec
cmc
in
inc
retf
xor
sbb
ss
xor
aas
in
es
mov
dec
test
jl
mov
sub
dec
sub
je
push
xchg
mov
cmp
(bad)
push
inc
in
fsubp
mov
jle
(bad)
xor
xor
sub
or
stos
(bad)
in
leave
icebp
dec
or
dec
das
pop
(bad)
bound
xor
popf
pop
nop
mov
outs
and
mov
test
xchg
fist
dec
fstp
mov
or
cmp
call
dec
pop
popf
adc
sbb
and
aaa
mov
sahf
adc
mov
xchg
xchg
cmp
cmp
or
shl
mov
lahf
aam
nop
dec
lock
dec
es
cmp
imul
pushf
push
dec
les
and
mov
dec
adc
pop
add
(bad)
loopne
retf
jns
in
xor
push
or
ds
call
in
mov
xlat
pop
les
push
pop
outs
cmc
jnp
jg
mov
adc
xchg
in
adc
mov
mov
pop
shl
sti
xlat
(bad)
popf
jne
mov
push
sub
in
mov
iret
into
test
add
jg
(bad)
in
and
lock
mov
stc
int3
and
xchg
add
jp
movs
ret
(bad)
dec
mov
sbb
and
popw
jl
cli
not
jle
in
or
xchg
mov
xchg
or
iret
icebp
scas
fcom
rol
in
sub
cwde
std
sbb
cmp
(bad)
adc
pop
mov
push
and
shl
pop
and
inc
outs
sbb
addr16
int
imul
xlat
sub
add
iret
mov
aas
mov
push
loop
inc
out
sub
add
addr16
cmp
cdq
or
loope
inc
pop
lods
mov
adc
jae
jp
lock
mov
inc
mov
(bad)
jecxz
xchg
imul
sahf
jp
ror
outs
scas
aad
mov
ret
dec
es
push
sti
mov
mov
pop
add
or
mov
mov
jl
mov
and
clc
dec
jne
jne
xchg
sbb
pop
mov
jmp
aas
bound
ja
repnz
loope
cld
jne
and
test
enter
bound
je
add
pop
push
cmps
dec
retf
lock
ds
loopne
repnz
test
push
push
and
jmp
jno
adc
enter
push
or
adc
jno
iret
jns
sub
mov
mov
jecxz
pop
fwait
mov
inc
fs
mov
movs
xor
pop
mov
pop
xchg
rcl
int
test
js
mov
out
xchg
xchg
xchg
pop
pop
in
inc
pop
ins
mov
pop
outs
ja
cmp
xchg
daa
mov
out
xchg
(bad)
(bad)
sub
add
(bad)
ins
movs
sbb
test
icebp
pop
xor
loop
mov
cmp
fdiv
(bad)
mov
inc
cmp
stos
sbb
loopne
jg
pop
sub
sbb
cmc
sbb
retfw
ins
or
adc
dec
or
mul
(bad)
stc
jno
cs
or
in
jmp
stos
cmp
or
mov
pop
retf
mov
or
rcr
push
dec
cmp
push
xchg
cmc
cmp
inc
dec
rol
gs
(bad)
aad
cwde
push
mov
and
mov
lea
sub
lods
mov
xor
cmp
xor
out
je
je
nop
int
xchg
dec
add
add
pop
repz
cs
add
mov
(bad)
fistp
push
push
cmp
xchg
mov
jnp
adc
hlt
iret
push
inc
cmp
jne
dec
outs
sub
data16
push
mov
(bad)
les
xchg
out
div
xchg
mov
(bad)
mov
add
or
xchg
in
add
push
xchg
rcl
xchg
xchg
mov
retf
mov
pop
outs
push
lods
(bad)
mov
in
push
adc
push
cmp
call
mov
jae
cmp
xchg
cmc
shr
add
movs
imul
adc
jp
lods
enter
test
dec
mov
xchg
jl
xchg
mov
xlat
xor
jmp
mov
lds
push
push
inc
call
aas
push
adc
jbe
loop
ret
add
push
fstp
add
cwde
shr
xchg
xor
inc
pop
(bad)
push
or
pop
lahf
clc
mov
cli
mov
imul
aas
add
push
xchg
loope
mov
fisttp
lock
pop
mov
jge
mov
xchg
cmp
jmp
add
jmp
pop
ret
retf
cs
sahf
push
(bad)
xchg
retf
loope
loope
and
mov
movs
pop
jecxz
push
in
fdivr
cmps
lock
call
mov
push
or
sub
cmp
mov
mov
cld
aad
loopne
retf
sub
arpl
(bad)
mov
pop
mov
mov
fld
push
std
add
mov
push
loope
(bad)
cmp
(bad)
mov
push
mov
pop
call
scas
pop
cmps
mov
sub
push
frstor
cmps
(bad)
aaa
retf
cmp
mov
pop
mov
sbb
test
je
or
push
pop
xchg
xor
retf
and
xchg
dec
in
ret
lock
imul
adc
lahf
jne
pop
dec
movs
les
daa
xor
inc
out
mov
and
cmps
fimul
ret
mov
rol
aad
and
pop
xor
icebp
add
inc
push
lea
test
je
aas
ss
inc
cli
in
mov
in
pop
sub
in
push
mov
adc
jbe
mov
pop
sub
sub
dec
lods
test
sbb
data16
sti
fdivr
test
fstp
sbb
dec
jae
arpl
retf
add
pop
loopne
mov
mov
in
sti
sar
loop
neg
out
ja
stos
jbe
call
add
aam
push
(bad)
xchg
jo
idiv
push
lods
retf
(bad)
aaa
xor
out
jbe
mov
rcr
mov
scas
dec
pop
jmp
sbb
div
mov
fimul
ds
sbb
sar
jno
or
and
imul
enter
js
mov
and
lods
loop
ja
loop
and
adc
mov
xchg
ds
lock
loop
pop
sub
int
pushf
scas
retf
shl
test
aad
ret
mov
ins
ins
jns
mov
test
lds
adc
cmp
inc
(bad)
fidiv
inc
and
(bad)
(bad)
and
psubsw
push
add
jg
ficom
aam
aaa
(bad)
fmul
add
pop
loope
cpuid
out
push
cmp
sahf
ret
in
repnz
push
fsub
xor
push
mov
push
or
sti
fistp
ins
push
into
int
shl
adc
sbb
xchg
or
mov
mov
pop
pop
and
or
cmps
jo
jge
pusha
(bad)
addr16
enter
aaa
test
fisttp
xor
lock
adc
jbe
fild
cmp
mov
jl
arpl
lods
adc
xor
pushf
mov
iret
push
adc
xor
lock
imul
(bad)
sub
and
(bad)
xchg
lea
cmc
mov
fdivr
mov
mov
les
inc
push
ja
push
pop
bnd
inc
enter
mov
test
dec
ds
cld
pop
and
hlt
push
adc
repz
fwait
test
dec
jo
push
pop
das
xor
adc
(bad)
push
(bad)
std
mov
cmp
cmps
aam
add
gs
mov
xchg
popa
sub
fs
sub
ret
mov
js
dec
add
outs
inc
(bad)
mov
mov
xchg
or
inc
pop
ror
inc
mov
jo
xchg
add
cmc
popa
scas
jo
push
jns
mov
popa
out
push
int3
test
push
out
imul
adc
addr16
xchg
pop
mov
test
loopne
mov
adc
and
jl
mov
inc
sub
inc
xlat
xchg
cmc
xchg
shl
pop
sub
add
mul
jp
call
test
add
sbb
out
jg
add
fistp
mov
lods
dec
out
jmp
push
je
cld
pop
in
adc
and
ret
popa
lds
stos
loop
sar
pop
cmps
shr
cmp
add
jne
sub
and
inc
or
nop
add
adc
jbe
jns
add
in
xchg
push
cmp
mov
push
test
and
imul
mov
dec
dec
int3
fcmove
xor
in
pop
jb
retf
adc
dec
xor
nop
lahf
push
or
mov
lahf
mov
xlat
nop
mov
rol
(bad)
(bad)
jmp
mov
aas
aam
pusha
sbb
mov
xchg
push
iret
jmp
add
pop
push
popa
xchg
(bad)
cmp
jge
mov
adc
or
sti
push
into
mov
stos
mov
push
xor
sar
shr
dec
cwde
in
(bad)
add
and
out
(bad)
xor
dec
push
(bad)
adc
push
div
pop
fdivr
pop
fnsave
sbb
push
jae
sbb
xchg
xchg
ror
lahf
jo
sub
mov
aam
mov
popf
sahf
sub
jae
jmp
enter
sub
sahf
xor
dec
jae
or
test
out
pop
sub
lea
loope
into
xor
jnp
call
test
cli
int
adc
dec
outs
or
jmp
loope
cmp
iret
leave
out
and
es
call
ret
cmc
pop
jnp
loope
xor
push
ins
pop
jle
cs
fdiv
lea
bound
mov
mov
jo
(bad)
xor
push
aad
mov
xor
scas
dec
leave
test
std
sar
icebp
jo
mov
mov
cmp
cmp
lods
lahf
frstor
in
shl
xor
and
outs
mov
ret
jns
call
mov
add
xlat
sub
test
dec
or
retf
cmp
adc
fistp
xchg
xlat
pop
stos
mov
jp
(bad)
rcl
adc
(bad)
popa
jb
in
and
pusha
out
aas
or
nop
sub
imul
mov
cdq
mov
mov
mov
mov
cmp
repnz
test
push
ficomp
push
xchg
lods
inc
or
sti
adc
(bad)
jle
cmps
cmp
call
sub
lods
fcmovu
(bad)
lods
cli
mov
jg
movs
call
or
pop
sub
or
pop
push
mov
cwde
fdivr
loopne
ret
mov
inc
sbb
pop
gs
retf
mov
xor
sbb
sbb
push
lahf
cwde
xor
xchg
lods
outs
and
adc
scas
add
and
jle
inc
jns
in
in
mov
cmp
mov
xchg
ret
mov
call
adc
jo
mov
pop
push
xor
icebp
cmp
add
out
sub
pop
sbb
add
adc
and
xchg
inc
enter
inc
push
repnz
and
jo
je
lds
xchg
inc
mov
into
imul
xchg
das
das
or
es
vcvttsd2si
push
add
stos
adc
pushf
xor
out
shr
cmp
fisttp
lods
movs
hlt
iret
repnz
mov
dec
retf
ins
loop
out
add
sar
cmp
loopne
or
mov
mov
push
and
shr
fdivr
sub
pop
mul
dec
imul
add
add
fdivr
jl
fbstp
mov
lods
lods
xchg
leave
mul
or
loope
sub
and
sbb
or
lahf
adc
mov
sahf
call
inc
sub
ror
ins
pop
mov
xchg
dec
bound
rol
mov
outs
and
ror
ffreep
or
stc
sbb
lock
cmp
shl
xchg
xor
dec
xlat
pop
cmp
pop
xor
lock
cmp
mov
cmp
push
int3
cmp
sub
addr16
in
sti
scas
ins
sub
test
pop
mov
cmps
ret
fst
in
sbb
xor
cdq
xor
movs
hlt
mov
dec
push
aas
mov
cmp
mov
mov
xor
mov
movs
inc
(bad)
hlt
cmp
rcr
mov
push
add
mov
imul
push
adc
sub
and
push
imul
cli
fdivp
sbb
mov
cmp
psubd
and
jp
jnp
stos
call
rcl
jmp
in
mov
lock
(bad)
cli
inc
xchg
ficom
sub
es
add
mov
mov
mov
pop
fisubr
dec
sub
and
int3
add
(bad)
xchg
in
es
push
and
mov
inc
cmp
adc
push
repz
cmps
xor
adc
fwait
xchg
aaa
test
aam
pop
aas
pop
mov
add
mov
and
icebp
lock
and
aam
(bad)
sbb
hlt
ds
inc
adc
shr
int
je
ror
jecxz
loopne
jl
adc
imul
leave
mov
push
mov
pushf
dec
lahf
out
jle
xor
es
int3
mov
sub
xchg
lods
sti
(bad)
sub
push
jmp
scas
or
in
outs
ins
int3
call
mov
inc
or
pop
push
mov
add
stc
imul
outs
test
out
dec
jl
outs
cs
mov
fimul
mov
jmp
fwait
or
cwde
xor
cli
mov
fidiv
(bad)
int
aaa
fimul
div
test
in
daa
loopne
and
mov
shr
add
jp
mov
pop
mov
div
sar
sbb
mov
ror
cmp
jae
xor
mov
and
xchg
jne
sub
mov
mov
shr
test
mov
pushf
xor
scas
in
pusha
iret
fisub
cmp
pop
jl
sti
xor
or
and
cdq
mov
lock
mov
add
stos
add
mov
mov
sti
test
outs
xchg
in
in
scas
(bad)
cmps
les
scas
cld
(bad)
repnz
mov
pop
das
stos
cli
std
in
aaa
shr
push
mov
addr16
and
out
popa
dec
xchg
nop
ja
mov
push
xadd
pop
mov
adc
sub
pop
xor
xchg
sar
aad
pop
add
ds
fwait
dec
inc
jmp
lea
jp
add
mov
popa
pop
lds
adc
ror
ins
dec
sti
ins
pop
jmp
jae
and
sub
cdq
in
fcomi
repnz
pop
mov
(bad)
pop
hlt
sti
push
mov
mov
xchg
mov
addr16
xchg
push
sbb
jmp
pop
mov
retf
pop
out
push
nop
add
pop
jp
dec
sub
not
out
retf
add
fcmovb
scas
in
dec
jno
mov
and
mov
(bad)
sti
sbb
in
adc
jmp
mov
out
fsubrp
test
jo
xor
xchg
mov
xlat
mov
mov
sub
push
adc
iret
ins
dec
lea
repz
jge
and
add
ds
(bad)
dec
pop
push
jmp
clc
test
aam
adc
push
xchg
daa
fild
call
pop
mov
cwde
(bad)
aam
mov
js
cmps
sbb
movs
data16
daa
push
(bad)
mov
lods
sub
cmp
movs
sahf
cmp
scas
mov
inc
icebp
mov
ficom
sub
hlt
xchg
lock
mov
sbb
jmp
push
js
push
jmp
push
mov
add
add
adc
sub
push
xor
xlat
mov
push
inc
(bad)
mov
test
mov
sub
cmps
adc
loop
test
int3
dec
test
pop
mov
std
mov
stos
inc
dec
inc
fnstsw
mov
sti
sar
dec
fucomp
mov
mov
jmp
inc
sub
cmp
outs
add
xor
rcl
push
cmp
sbb
adc
rcr
jl
xor
int3
pop
add
shl
lock
pop
xor
ins
fdivr
adc
fcom
mov
jae
inc
cmp
call
inc
sahf
ud0
out
and
int
push
fdivr
out
rcl
jo
icebp
jmp
daa
jb
je
push
stos
sti
(bad)
test
mov
and
pop
push
aad
add
and
cmps
push
mov
push
popa
call
and
sbb
xchg
cs
or
fimul
test
jae
xchg
dec
xchg
cli
inc
dec
fisttp
xlat
and
sub
test
mov
fcomp
adc
xchg
popa
lahf
pop
or
push
mov
jmp
sub
dec
cmps
add
mov
cmp
sbb
in
lods
in
push
mov
(bad)
jg
mov
inc
stos
pusha
sub
sti
push
xor
sub
inc
pop
xor
xlat
wbinvd
sub
int
aad
xchg
test
xor
into
mov
jne
xchg
push
inc
ins
mov
in
gs
mov
aaa
jge
pop
shl
js
call
mov
adc
xchg
cmp
sbb
push
push
aas
pop
js
div
mov
arpl
sub
mov
push
stc
dec
aaa
les
mov
pop
leave
es
inc
cli
dec
inc
les
outs
loope
sub
mov
jp
out
ins
add
out
sub
adc
or
dec
fcomip
sub
fidiv
cmp
dec
fisub
jno
or
repz
add
jae
xchg
cmp
xchg
mov
lds
adc
scas
xchg
mov
cmp
inc
sub
bound
sbb
cmc
popf
test
jge
or
aas
stc
sub
je
in
aaa
xor
jecxz
push
add
mov
ja
dec
dec
xchg
jne
out
jae
adc
in
rcl
sub
in
sti
cmp
jmp
(bad)
cmp
rol
push
sub
inc
std
in
lds
xchg
xchg
stos
mov
addr16
push
(bad)
and
(bad)
jmp
jnp
repz
or
inc
inc
cmp
inc
mov
mov
and
mov
outs
movs
xor
outs
jle
push
pushf
mov
sub
jo
mov
popf
push
loopne
sub
sbb
aam
and
leave
push
xchg
jae
push
arpl
cmps
cld
push
sub
cmp
or
sar
pop
sub
or
mov
repz
xor
jo
push
mov
fsubr
shl
xor
add
js
sti
push
jle
xchg
pusha
mov
mov
cmps
sub
and
xor
pushf
mov
mov
jl
loope
or
xchg
imul
out
es
das
sub
cli
mov
(bad)
lahf
repz
into
push
fcom
jnp
(bad)
(bad)
in
sahf
aam
js
mov
adc
imul
test
jne
cmc
leave
cmp
cwde
addr16
add
movs
inc
(bad)
iret
nop
cmp
inc
push
push
mov
outs
int3
loopne
fsub
sub
jnp
out
mov
mov
and
scas
cld
out
out
fstp
push
mov
push
lds
inc
xchg
retf
ror
mov
test
in
add
cwde
xchg
daa
xchg
pop
(bad)
sbb
lods
sti
jnp
lods
cmps
inc
cmc
jle
xor
out
aad
clc
xchg
data16
pop
test
jge
lods
in
jmp
cmp
mov
movs
iret
mov
mov
mov
pop
sub
sti
jmp
mov
stc
pop
ret
adc
jge
stos
jle
enter
ja
jmp
hlt
(bad)
inc
add
or
int3
pop
into
sbb
test
mov
lods
out
jg
mov
mov
xor
cld
in
ins
and
xchg
sbb
jne
or
sbb
lods
push
iret
mov
pop
pop
data16
arpl
jle
sbb
fbstp
test
sub
add
ins
outs
cli
retf
inc
mov
jp
dec
mov
out
and
mov
and
sub
mov
jle
xor
stc
movs
cld
rcr
(bad)
and
(bad)
shr
jo
xchg
mov
test
ins
icebp
nop
jo
and
sbb
out
cwde
mov
add
xchg
es
ja
and
dec
outs
pop
add
mov
int
or
inc
retf
test
test
jge
fsubr
fwait
repz
jmp
mov
inc
sub
test
out
xchg
inc
jmp
lahf
xchg
mov
idiv
(bad)
fild
xlat
cmc
retf
add
out
sub
sbb
mov
xchg
int3
(bad)
xor
into
enter
jl
sub
xchg
cmovno
or
in
mov
push
loop
(bad)
neg
xor
movs
dec
nop
das
jne
ss
stos
adc
adc
clc
out
cmp
push
rol
xor
jp
in
mov
pop
jo
ret
shl
(bad)
jnp
fmul
pop
outs
lock
(bad)
fucom
nop
xor
arpl
pop
dec
loopne
fld
call
test
xchg
pop
mov
add
enter
bound
pop
jnp
or
retf
cmc
or
in
xchg
push
adc
int
(bad)
cmp
popa
fsubr
cld
jecxz
int3
(bad)
jnp
test
push
sbb
and
jns
xchg
fld
mov
mov
cld
inc
(bad)
mov
call
daa
push
retf
sbb
push
sub
pop
cmp
mov
outs
aas
sbb
xchg
ins
mov
scas
movs
lahf
imul
xor
cmp
add
xchg
add
mov
idiv
mov
test
scas
and
hlt
pop
add
icebp
hlt
cmp
fild
add
aam
dec
add
cli
xchg
test
call
repnz
push
fwait
or
shr
and
sbb
ret
shl
inc
jmp
sti
and
outs
add
imul
jp
shl
test
dec
jge
fisttp
push
hlt
scas
push
jnp
or
int
mov
jbe
int3
inc
pusha
adc
xor
sub
sub
sub
inc
and
jmp
mov
xchg
into
push
enter
jecxz
mov
push
cdq
xlat
xchg
push
sbb
xchg
popw
sub
adc
cmps
call
ds
nop
sti
pop
repz
inc
es
loopne
out
adc
or
mov
lea
mov
aad
cld
sub
mov
out
cs
lods
adc
repnz
inc
jp
sbb
adc
mov
push
push
leave
jmp
out
and
call
retf
fidivr
adc
sub
push
stos
fwait
cs
sub
ret
pop
mov
jo
inc
sub
xchg
mov
cmp
mov
ins
inc
out
xor
sub
push
(bad)
in
xchg
jns
sbb
jae
(bad)
jnp
mov
outs
push
sbb
ins
or
lea
sbb
lods
les
pop
(bad)
jnp
leave
scas
and
add
fcomp
cld
mov
adc
jp
mov
xor
mov
mov
pop
cmp
test
into
test
mov
loop
push
aaa
movs
and
sbb
pfsub
dec
mov
(bad)
adc
aaa
fistp
ffreep
and
add
mov
es
cmc
syscall
push
inc
jecxz
sbb
inc
push
cli
lds
xor
dec
cmps
cld
movs
and
xchg
retf
inc
inc
sub
push
inc
inc
mov
shr
pop
pop
out
adc
inc
in
add
cmp
shl
push
cwde
sti
dec
add
cmp
xor
xor
xchg
in
out
mov
jne
sub
xchg
in
popf
(bad)
loopne
pop
mov
rcr
ret
sub
aad
inc
jle
add
sub
icebp
fidivr
test
mov
mov
push
test
lock
adc
or
jle
mov
xor
inc
pop
les
xchg
retf
cld
cmp
int
mov
mov
movs
cmp
out
and
xor
adc
jmp
mov
push
jbe
mov
test
pop
and
jne
loopne
out
jnp
inc
gs
push
dec
push
shl
sbb
add
adc
jle
loop
sbb
push
bound
fcmovu
fdivr
popf
sub
jne
add
popa
jle
dec
out
rol
xor
fisttp
xor
(bad)
mov
ficom
or
jg
cmp
faddp
inc
loope
pop
and
and
idiv
sub
in
add
pop
(bad)
out
inc
popf
push
std
mov
sub
jge
call
aad
sub
or
repnz
mov
int3
enter
bound
mov
arpl
pop
mov
or
inc
and
movs
inc
xlat
enter
sbb
or
xchg
fucom
ins
enter
mov
paddb
in
neg
add
leave
or
iret
movs
aaa
sub
jecxz
fdivr
sub
arpl
gs
fidivr
fbstp
clc
jae
and
jp
das
test
daa
outs
xlat
popa
mov
cmp
je
icebp
xor
fcmovb
or
shl
xchg
push
pop
(bad)
loopne
mov
rcl
test
addr16
fidiv
push
cmp
retf
inc
dec
push
aam
ins
add
(bad)
cli
add
enter
shl
push
movs
inc
ret
ret
mov
retf
adc
dec
fisttp
(bad)
cld
xchg
sar
dec
inc
inc
(bad)
cmp
lods
cmp
movs
in
call
les
xor
in
shl
push
push
mov
cmps
add
mov
jnp
in
pop
loopne
pop
iret
lods
add
mov
in
loop
push
jmp
sbb
test
push
daa
scas
ret
cmp
movs
les
push
cmc
and
xchg
call
add
add
fadd
ret
loope
lock
nop
and
pop
call
push
inc
(bad)
imul
int3
xchg
sahf
test
int3
jo
imul
movs
lock
fist
sbb
xchg
mov
or
out
les
xor
mov
outs
mov
mov
nop
(bad)
pop
cmc
movs
test
jg
and
jns
jb
clc
in
test
xor
cli
lahf
sar
daa
mov
mov
ficomp
mov
mov
lods
aaa
mov
cmps
movs
adc
mov
mov
mov
pop
shl
mov
scas
fmulp
or
sbb
and
lods
fisttp
xchg
out
dec
mov
sub
adc
mov
inc
(bad)
push
in
cdq
mov
cmp
mov
popa
inc
add
xchg
or
mov
add
sub
ins
or
fstp
call
int
jmp
push
or
dec
jae
cmp
call
enter
push
mov
pop
push
pushw
je
stos
aaa
div
or
mov
test
scas
mov
mov
test
jmp
jle
je
pop
cmp
mov
add
adc
cs
or
scas
cmp
push
lock
mov
bound
aas
xchg
inc
out
mov
js
lock
daa
inc
sub
fmul
add
xchg
xchg
inc
aam
retf
outs
ins
xor
fidiv
xchg
fbstp
aam
aad
les
leave
add
icebp
das
mov
xchg
mov
jle
xor
cdq
mov
in
aas
mov
stos
jb
movs
test
cmc
inc
test
adc
add
push
dec
xchg
xlat
push
leave
xor
test
ss
movsx
call
xchg
add
mov
mov
gs
out
xlat
aaa
js
retf
inc
into
dec
mov
push
iret
push
jg
retf
and
or
pop
add
iret
add
dec
shl
push
lods
cmp
mov
jne
sbb
push
xchg
bound
add
pop
pusha
out
pop
repnz
gs
sub
pop
or
dec
das
ja
push
out
or
cmp
jp
lods
mov
call
ins
cs
dec
jo
icebp
nop
repnz
or
xchg
adc
cmp
(bad)
cdq
inc
inc
inc
scas
fwait
lods
ja
pop
inc
adc
inc
inc
push
cs
(bad)
icebp
cmps
movs
or
rol
repz
pushf
xor
(bad)
xor
and
jmp
cli
sub
js
nop
mov
fistp
adc
sti
sub
jmp
push
dec
or
xchg
and
jmp
cmps
repnz
xchg
jp
and
je
loop
xchg
ror
dec
repz
adc
(bad)
(bad)
stc
pop
out
jp
arpl
repnz
xor
xchg
jge
fdivr
inc
outs
lock
scas
out
cmc
repz
cli
iret
push
inc
sbb
sti
cmp
pop
sbb
out
xchg
pop
loopne
fadd
movs
xchg
repz
mov
arpl
xchg
int3
cmps
fist
jge
cmp
stos
enter
mov
ret
mov
xchg
retf
cmp
std
xchg
jp
dec
adc
mov
sar
add
jmp
mov
jb
xor
ret
in
daa
lock
add
in
xor
std
in
loopne
ror
push
sbb
mov
in
dec
rcl
pop
pushf
movs
push
adc
test
in
sub
dec
sahf
push
das
int
fucom
(bad)
rol
xchg
sub
mov
in
adc
jmp
dec
test
jns
sbb
xor
aam
pop
mov
arpl
packssdw
mov
xchg
ss
lods
sub
jmp
lods
cmp
jmp
ds
loop
fadd
sub
or
dec
cwde
rcr
movs
push
rol
ja
adc
je
pop
mov
scas
aaa
adc
cmp
mul
jmp
popa
add
add
movs
pop
repnz
add
pop
pushf
pop
popa
xlat
or
sbb
xchg
mov
inc
adc
inc
jno
sbb
push
fist
xchg
xchg
xchg
push
xor
dec
adc
cmc
push
sub
and
aaa
or
retf
add
retf
stc
pop
(bad)
cmp
cmps
cmps
(bad)
iret
cmp
popa
push
jae
sbb
and
fld
into
xor
ret
xchg
pop
sbb
nop
sub
fisub
ss
inc
and
and
gs
sbb
jge
jno
movs
cmp
loopne
dec
push
repz
push
out
retf
cmp
test
inc
mov
pushf
shr
sahf
dec
or
ds
pop
add
dec
mov
inc
sbb
pop
and
in
mov
leave
leave
or
iret
mov
iret
test
xchg
enter
sub
or
movs
inc
mov
mov
cmps
sub
mov
(bad)
xchg
sar
aaa
cli
daa
push
bound
mov
and
sub
bound
dec
push
pop
push
je
(bad)
push
lea
pop
or
in
daa
or
mov
dec
cmp
dec
test
xchg
add
cs
ret
pop
xor
cld
inc
cld
xchg
jmp
(bad)
mov
inc
repnz
sub
mov
xor
movs
test
outs
test
mov
sub
or
test
cwde
mov
pop
out
mov
pop
shl
ds
xchg
xchg
inc
aas
dec
xchg
(bad)
fnstcw
mov
xchg
sub
int3
xchg
mov
loope
cmc
out
ss
aam
popa
gs
pop
les
xchg
(bad)
mov
xchg
(bad)
jbe
cs
cmp
cdq
mov
test
test
or
inc
movs
mov
xchg
adc
fwait
jb
rcr
(bad)
stc
in
outs
gs
mov
cs
aaa
mov
push
sub
in
arpl
cmps
enter
dec
mov
sbb
pop
mov
fistp
sbb
std
dec
xor
aaa
test
(bad)
loope
jp
push
mov
xor
retf
lds
inc
(bad)
jne
xor
jg
outs
repnz
cmp
mov
es
sub
cmp
lahf
pop
add
inc
add
add
adc
mov
push
lds
lods
mov
jb
std
(bad)
std
pop
popf
daa
mov
loope
icebp
jge
sub
aaa
repz
dec
mov
jle
fisttp
sbb
gs
add
and
addr16
mov
nop
inc
add
xor
addr16
inc
mov
mov
and
loope
int3
xchg
cmc
pop
xor
mov
lds
mov
in
jp
inc
mov
fsubrp
inc
call
les
xchg
or
sahf
nop
add
push
fwait
popf
xchg
int
cwde
inc
xchg
pop
cmps
stc
loop
adc
gs
mov
inc
pop
cli
iret
push
fst
dec
dec
sahf
lods
loope
call
ret
hlt
cdq
outs
pop
je
retf
mov
jns
adc
jb
push
jno
xchg
dec
cmps
xor
push
pop
popf
adc
imul
in
fisttp
mov
mov
or
inc
dec
xchg
ins
(bad)
(bad)
inc
xor
xchg
jno
outs
shl
in
jmp
retf
in
inc
leave
cld
stos
jle
xchg
pop
mov
push
xor
push
pop
pop
out
cdq
xor
ds
fsubr
xor
fsubr
inc
add
dec
jae
push
cwde
retf
jbe
lahf
stos
jmp
gs
sbb
adc
mov
ss
(bad)
out
nop
mov
mov
fmul
inc
cmps
or
test
jbe
nop
sub
sbb
inc
stos
pop
in
fsubr
pop
pop
mov
cdq
pop
test
mov
(bad)
jle
sub
mov
jo
sub
mov
mov
jbe
je
xor
inc
std
inc
dec
mov
fbstp
pop
in
sub
ror
xchg
cmp
or
jns
xchg
imul
cwde
out
shr
adc
push
adc
cmp
dec
xchg
inc
inc
lahf
js
mov
push
inc
push
push
(bad)
mov
xchg
fimul
pop
xor
pusha
out
out
dec
dec
ja
pusha
push
push
inc
movs
mov
mov
test
cs
aad
and
or
sub
adc
xchg
inc
je
xchg
mov
fcom
shr
repnz
rol
test
call
dec
jmp
pop
xor
adc
fadd
lahf
ret
add
and
push
xchg
mov
test
pop
xchg
inc
popf
jno
xor
mov
mov
je
je
mov
cli
push
xchg
add
add
cs
fist
add
xchg
(bad)
mov
test
scas
and
sbb
push
push
mov
fs
in
mov
out
repnz
lahf
clc
nop
dec
cmp
mov
sub
push
mov
or
xchg
inc
xchg
cmp
mov
in
xchg
pop
test
push
cmp
mov
pop
push
es
retf
inc
or
lods
test
popa
push
ds
paddd
push
dec
mov
mov
push
sbb
mov
cli
push
in
les
xchg
pop
outs
and
mov
adc
fdivr
ins
xchg
inc
mov
add
and
jle
jno
ret
nop
dec
dec
jmp
mov
sti
or
sahf
lea
sahf
fimul
mov
sub
sub
test
jle
test
mov
dec
push
jno
xor
xchg
add
sahf
es
fdivr
sti
jmp
xchg
imul
lods
es
xchg
push
jo
cmc
test
lock
push
ins
pop
int
sbb
ds
mov
in
pushf
mov
aad
test
mov
aaa
rcr
adc
xor
add
sub
mov
retf
mov
int3
and
jne
dec
xchg
sahf
bound
jmp
out
fs
sub
in
sbb
jbe
rcr
jae
js
cmp
mov
inc
out
mov
fcomi
hlt
push
ja
push
in
test
and
aam
mov
js
pop
je
adc
cmp
push
fsubr
cmp
in
ffreep
xchg
je
push
enter
test
ret
lods
sub
cmpxchg
out
jae
add
lea
adc
clc
call
pop
loop
retf
push
sti
dec
out
les
(bad)
neg
pop
out
push
gs
sahf
ror
scas
sub
or
mov
jmp
xchg
imul
call
int3
mov
cmp
scas
inc
and
dec
dec
js
cmc
add
push
mov
out
cwde
xchg
movs
je
jb
aam
cmps
sub
sub
jl
cmps
sub
ins
fucomp
loope
rol
push
lods
sbb
mov
sub
pop
sti
xor
xchg
das
cmp
outs
dec
in
sub
inc
call
fsub
popa
icebp
stc
mov
mov
sub
mov
inc
rcr
and
pop
loopne
adc
nop
lock
xchg
int3
mov
xchg
xor
push
movs
and
add
sbb
sbb
(bad)
fcomip
popa
mov
dec
pusha
pop
hlt
cdq
adc
cmp
xor
jne
fs
pop
mov
das
sub
mov
sbb
adc
(bad)
cld
call
lods
cdq
call
fisttp
mov
sbb
xor
les
in
cmp
jg
ret
push
movs
cwde
push
push
add
lock
fsubr
xor
in
pop
nop
(bad)
cli
or
daa
mov
dec
sahf
hlt
mov
jp
jmp
inc
jo
dec
dec
mov
dec
pop
rcl
push
int
cld
xchg
out
inc
iret
aam
xchg
(bad)
sub
aas
std
fisub
mov
xor
fdiv
les
add
and
xchg
call
pop
sti
lods
push
shl
in
cmp
mov
nop
xor
mov
in
in
cmp
test
sbb
sahf
sbb
mov
sub
repz
pop
inc
aaa
lods
inc
xchg
add
jecxz
push
jl
cmove
ror
inc
call
push
fistp
into
or
jmp
outs
mov
int
les
ror
push
or
ror
sub
test
xor
arpl
mov
pop
int3
and
pop
xchg
push
imul
mov
inc
sub
mov
mov
or
in
aaa
and
mov
sub
popa
outs
xchg
xchg
shr
(bad)
mov
mov
and
cli
je
call
cmps
mov
(bad)
cmp
out
addr16
iret
mov
fidivr
fcomip
imul
jg
cwde
or
sbb
cdq
pop
popa
outs
sbb
and
mov
lahf
mov
cmc
sar
pop
les
ret
cwde
in
pop
jg
adc
sub
and
dec
push
pop
ret
jle
xor
dec
rcr
loopne
mov
mov
bound
add
in
push
push
shl
jae
aam
jno
cmp
leave
jnp
push
bound
stc
inc
jg
pushf
add
adc
inc
mov
lea
fdiv
(bad)
call
pop
adc
ffree
stos
scas
cwde
jo
lds
push
inc
aad
test
retf
fld
movs
inc
in
mov
ret
(bad)
(bad)
adc
out
loopne
clc
add
pop
out
nop
lahf
lea
mov
sub
mov
xchg
stos
ins
mov
repnz
out
cmp
sbb
and
jnp
in
and
int3
mov
jns
lds
repnz
pushf
scas
dec
retf
cmp
retf
xchg
xchg
test
loope
mov
xchg
dec
adc
jo
inc
es
fiadd
pop
sub
les
out
loop
lds
sti
fidivr
mov
cmp
xchg
jg
mov
fistp
cmp
loop
sub
xchg
adc
dec
stos
inc
cmps
lds
mov
int
xchg
mov
adc
push
or
je
aad
nop
(bad)
fwait
mov
mov
test
mov
xchg
xor
or
push
jb
rcl
pushf
xchg
test
mul
aam
pop
jmp
loope
mov
inc
retf
sar
mov
adc
aam
xchg
rcl
in
cdq
popa
popf
mov
mov
imul
lods
cmp
or
sbb
pop
push
stos
shr
data16
out
add
jg
(bad)
jmp
dec
cmps
clc
(bad)
sub
adc
mov
pop
shl
lock
ins
je
cmp
fwait
movs
inc
call
out
inc
movs
cmp
outs
fwait
dec
test
and
mov
cmp
cmp
dec
mov
push
jg
imul
xchg
mov
jge
retf
dec
int3
cwde
rcl
test
xchg
loopne
fcomp
rcl
jbe
fcom
mov
iret
aam
mov
aam
push
add
int3
xchg
and
push
jg
test
mov
stos
and
mov
mov
or
push
inc
(bad)
arpl
pop
gs
je
daa
adc
(bad)
fsubr
mov
or
sti
mov
cmp
cmp
ror
ret
out
shr
ret
sub
sahf
mov
test
sar
cli
mov
cmp
leave
push
int
out
pop
jmp
std
ror
jns
xchg
inc
sub
(bad)
imul
mov
xchg
(bad)
call
ss
ss
loop
fwait
sbb
jmp
sti
cmp
sub
push
or
mov
push
cmp
or
xor
aad
mov
push
mov
dec
and
xor
inc
push
mov
call
dec
mov
jb
push
ds
xor
pop
or
stos
in
push
mov
adc
(bad)
jne
ds
aas
sub
test
iret
pop
push
mov
(bad)
in
mov
pop
cli
int
push
int3
(bad)
jno
lds
xchg
or
cwde
xchg
dec
jns
cmc
int3
mov
sbb
out
(bad)
rep
mov
push
push
movs
jecxz
cmp
xor
inc
in
add
mov
in
sbb
sbb
daa
or
mov
fisttp
ret
sub
imul
mov
ja
fldenv
xor
mov
lea
inc
or
and
jecxz
aaa
fbstp
iret
rcr
inc
mov
in
xchg
ds
push
fdiv
push
daa
push
add
mov
(bad)
mov
add
push
cmps
xor
(bad)
jb
bound
cld
xchg
jbe
ss
call
add
sbb
pushf
(bad)
repnz
add
in
cmps
leave
push
mov
retf
cmc
repnz
retf
and
and
sbb
es
int
enter
jne
jae
(bad)
jge
push
repz
xor
add
daa
out
cwde
hlt
shl
inc
xchg
mov
pushf
sub
dec
mov
jecxz
add
pop
fisttp
ins
mov
mov
add
in
(bad)
xor
jns
shl
(bad)
xor
nop
gs
xchg
mov
scas
loopne
addr16
mov
ja
sbb
or
test
nop
call
or
fidivr
aam
jo
iret
mov
add
pop
mov
mov
repz
sub
fmul
mov
pop
sti
jmp
mov
or
dec
test
(bad)
out
dec
push
gs
movhps
push
es
add
inc
push
ret
xchg
cmp
imul
popf
lds
je
dec
cwde
sub
enter
(bad)
mov
cmp
adc
mov
dec
pop
in
(bad)
cld
mov
out
jo
dec
jnp
pusha
mov
lds
inc
(bad)
cdq
dec
cmps
jecxz
mov
or
push
retf
adc
fisubr
fst
mul
mov
mov
in
rcl
sub
pop
jg
lea
call
adc
push
dec
movs
cli
sti
in
mov
scas
jmp
fbstp
ret
fwait
push
sbb
and
repz
mov
(bad)
adc
push
sub
add
mov
fcom
lock
leave
mov
or
rcr
mov
rcl
push
mov
pop
add
rcl
jnp
jne
pop
mov
daa
push
sar
and
je
or
adc
sbb
neg
mov
or
xchg
xchg
outs
arpl
ficom
xchg
into
fistp
mov
(bad)
stc
and
or
call
nop
hlt
sbb
call
fsubr
pop
mov
adc
add
addps
cmp
dec
mov
outs
aad
dec
inc
add
sbb
shl
pushf
mov
in
call
cld
(bad)
mov
cmp
or
es
adc
into
pushf
js
shr
test
ds
mov
fisttp
shl
cdq
retf
cmps
mov
adc
ret
sub
push
pop
enter
je
cdq
cmp
es
jb
adc
mov
addr16
loop
test
adc
push
out
sub
cs
lahf
xchg
pop
push
xchg
push
call
and
and
mov
shl
mov
add
or
sub
test
test
scas
nop
mov
call
cmp
(bad)
fnstcw
icebp
push
xor
ret
inc
retf
push
pop
fidiv
lahf
mov
je
pushf
push
pop
adc
xchg
adc
in
fdivr
div
cdq
and
pusha
or
xchg
nop
lods
movs
jle
test
or
pop
(bad)
push
pushf
lods
mov
pusha
lahf
mov
inc
fwait
int3
jle
or
jecxz
sbb
pop
mov
out
cld
test
mov
pop
mov
shl
fucomip
imul
nop
sbb
cld
bound
and
mov
sub
enter
(bad)
repz
(bad)
mov
js
xchg
pop
or
or
addr16
mov
fld
dec
arpl
add
add
cmps
mov
push
scas
stos
faddp
leave
int3
push
fild
sub
xor
xor
fdivr
and
in
jmp
cmp
sub
enter
rcr
and
sbb
dec
(bad)
xchg
pop
mov
pushf
out
and
popf
ret
push
mov
or
ret
test
or
leave
pop
dec
dec
sbb
mov
add
mov
push
daa
mov
fwait
leave
aas
mov
fsub
(bad)
js
xor
xchg
mov
popf
ss
or
lock
or
xchg
dec
out
rcr
and
mov
jo
shr
jg
mov
scas
mov
mov
ins
mov
push
icebp
mov
jns
and
pop
sub
fbld
fwait
pushf
lock
dec
inc
addr16
cmp
mov
adc
add
and
aam
or
mov
mov
jmp
sbb
xchg
cmp
or
outs
jae
sahf
mov
or
(bad)
pop
scas
sahf
imul
add
js
push
cli
xor
push
mov
sti
dec
add
and
sbb
mov
push
xchg
pop
sub
cmp
add
(bad)
mov
inc
cmc
jnp
jae
aam
push
es
dec
nop
es
jle
inc
jmp
pop
cmp
bound
(bad)
jno
not
(bad)
pop
inc
or
div
sub
out
fst
ins
lods
pop
rcr
mov
inc
aam
inc
push
pop
into
ret
cld
clc
dec
lahf
clc
mov
add
fs
icebp
mov
or
nop
xchg
hlt
shr
mov
jmp
test
jne
fwait
push
retf
mov
dec
(bad)
and
rol
out
cmps
sub
enter
xchg
sahf
mov
out
pop
and
inc
inc
sbb
lods
pusha
xor
and
in
cmp
adc
ja
xchg
imul
sub
hlt
(bad)
sti
lea
jmp
clc
data16
addr16
shl
jg
rcl
dec
push
xor
ret
(bad)
xor
ja
mov
mov
cmp
in
fstp
lahf
inc
sub
mov
loopne
pop
repnz
(bad)
ffree
pop
dec
stos
retf
fs
je
mov
(bad)
leave
mov
pop
scas
add
xchg
or
sbb
and
bnd
cmc
jnp
in
sbb
pop
or
dec
popf
out
into
dec
or
mov
mul
in
pop
jo
lahf
xchg
in
idiv
dec
retf
cld
jno
and
inc
fwait
xlat
xchg
fcomp
mov
ss
pop
xchg
xchg
pop
mov
jmp
jg
neg
in
in
retf
int3
aaa
aas
push
fcmovb
xor
mov
outs
adc
pop
mov
fadd
or
sub
mov
or
add
fstp
cmp
xor
iret
xlat
iret
push
cmp
repnz
dec
push
icebp
pop
and
add
hlt
data16
sbb
pop
mov
retf
movs
jne
cmp
adc
cmps
nop
and
repz
lock
in
mov
data16
sub
inc
mov
jo
mov
popa
retf
mov
in
xchg
jbe
mov
ret
mov
inc
mov
adc
pusha
mov
cmp
ja
or
test
push
pop
outs
inc
add
dec
push
imul
mov
clc
int3
jbe
or
adc
out
fs
jno
mov
xchg
and
add
and
les
int3
cmps
dec
movs
nop
enter
test
repnz
icebp
mul
shr
repnz
ja
cwde
and
retf
sub
je
rcl
mov
ja
call
cmp
xor
ret
jg
mov
xchg
adc
push
rcl
pop
and
ss
sahf
loopne
rol
mov
idiv
jge
cmc
cs
inc
retf
add
pop
je
adc
pop
xor
(bad)
mov
leave
adc
sti
adc
sbb
dec
ror
fsubr
cs
shl
adc
cmp
mov
mov
shl
and
dec
mov
cdq
cmp
int3
jns
pushf
cmp
jmp
mov
rcr
mov
adc
lahf
push
aam
gs
jge
sti
loop
sbb
fwait
fs
rol
mov
mov
push
cmp
cmp
les
in
or
push
xchg
leave
aam
dec
mov
xor
je
mov
jmp
mov
adc
lods
ss
mov
sub
xlat
hlt
lea
retf
mov
and
xchg
jge
pop
jle
pop
neg
test
fdiv
(bad)
xchg
pop
adc
fild
fisub
mov
movs
mov
push
ret
outs
pop
popf
mov
fstp
xor
sub
data16
iret
mov
stos
pop
out
jmp
inc
test
pusha
xor
in
cmps
pop
in
es
js
and
xchg
push
addr16
cmp
push
sbb
stos
es
movs
retf
or
aaa
adc
repz
mov
aas
aaa
daa
or
sbb
jle
out
scas
pop
dec
fs
and
adc
inc
dec
jle
aam
xchg
xchg
pop
ins
(bad)
popw
push
lea
mul
mov
call
fs
xchg
(bad)
lods
sar
scas
inc
jg
pop
inc
inc
mov
or
arpl
in
or
aad
jns
jecxz
jmp
fldcw
mov
mov
shl
xchg
rcl
mov
sub
mov
mov
hlt
push
iret
loopne
in
(bad)
jae
sti
sub
nop
sbb
jae
xor
mov
ss
std
inc
aad
aam
aad
mov
push
clc
sbb
pop
fbstp
jns
ret
pop
push
in
mov
inc
or
mov
or
dec
mov
addr16
ret
inc
out
sub
dec
push
dec
fwait
leave
lods
pop
jge
sbb
(bad)
lods
movs
pop
ret
sbb
inc
inc
add
ret
sar
dec
xor
sbb
std
loopne
(bad)
imul
mov
sbb
scas
icebp
adc
cwde
mov
imul
jecxz
popf
fwait
push
pop
gs
add
sub
xchg
xchg
push
cmp
jle
dec
pop
iret
jnp
imul
mov
push
xor
dec
sbb
test
cmp
and
neg
dec
lods
neg
stos
inc
test
and
adc
cld
push
and
sbb
or
int3
jnp
push
adc
pop
push
scas
cld
dec
rcl
xor
push
adc
movs
mov
sbb
jne
fld
dec
push
cmps
adc
sbb
push
adc
cld
ja
adc
xchg
shl
sbb
popf
jno
mov
lods
scas
cmp
mov
sub
stc
frstor
xchg
jge
inc
sahf
test
mov
cdq
pop
clc
dec
mov
lods
push
dec
inc
push
aam
and
mov
in
jbe
loop
jbe
mov
sub
adc
fadd
call
in
int
jmp
loopne
push
es
stc
call
mov
adc
pop
mov
or
nop
(bad)
hlt
push
aaa
lahf
lods
inc
push
int3
cmp
push
mov
inc
cdq
adc
dec
arpl
aam
shl
lds
mov
cdq
mov
lds
cld
imul
xor
adc
pop
(bad)
adc
loope
mov
test
sahf
je
xchg
dec
xor
mov
aaa
or
scas
xchg
(bad)
test
aad
ja
mov
jb
stos
pop
(bad)
test
cs
les
popf
outs
hlt
pusha
imul
and
sar
dec
pop
repnz
cmp
jge
jmp
and
cmp
movs
jns
adc
or
stos
mov
pushf
mov
and
ja
aam
or
xor
jmp
fwait
mov
dec
cmp
sub
cwde
push
xchg
ds
retf
pop
pop
aaa
out
push
xchg
mov
in
int
pop
clc
jecxz
xchg
hlt
sbb
fadd
repz
jae
and
in
pop
xchg
push
push
inc
xchg
mov
sub
mov
push
daa
dec
xchg
test
inc
lock
mov
sti
jbe
mov
(bad)
fmul
outs
into
jg
mov
cli
rol
(bad)
cmp
shl
mov
pushf
push
scas
fs
and
inc
jmp
push
dec
loope
rcl
or
ret
shl
loopne
je
xor
frstor
mov
and
xor
mov
dec
fstp
push
ss
aad
jl
sbb
lods
mov
(bad)
jns
fmul
jmp
aad
jmp
mov
add
cld
aad
jns
mov
cmp
mov
sbb
mov
loope
pop
or
cmc
aad
dec
test
push
int
stos
jge
fs
xlat
cmps
lods
mov
sbb
xor
inc
fwait
stos
outs
nop
mov
pop
movs
test
daa
lahf
jne
scas
jmp
adc
in
(bad)
iret
out
movs
xchg
xor
and
xchg
(bad)
rcl
imul
movs
(bad)
xchg
cmp
mov
in
ss
pop
into
call
fnstsw
add
xchg
pop
repnz
fisub
jnp
leave
lods
xchg
xor
stc
stos
adc
stc
sub
or
jmp
call
push
daa
xchg
push
js
ja
mov
repz
sti
out
int3
dec
mov
cs
jmp
inc
not
jecxz
jns
sahf
stc
loopne
sub
mov
mov
fld
nop
cmp
mov
gs
cmp
popf
out
neg
xchg
jmp
jle
cmps
std
ds
lock
rol
sar
rol
ret
push
or
fadd
inc
push
mov
xor
xchg
int3
out
mov
loope
sahf
jle
fcom
loopne
or
sbb
lahf
lock
mov
add
mov
scas
jo
mov
out
pop
xchg
sub
test
xchg
stos
pusha
sahf
in
cmp
fcomp
out
xchg
xchg
fsubp
mov
aaa
xor
xchg
(bad)
out
inc
stos
(bad)
movs
test
mov
push
stos
loopne
lods
adc
std
add
inc
int
pusha
popa
push
push
sub
inc
ds
cmp
jnp
xchg
aam
add
mov
movs
icebp
fadd
stos
or
jge
push
mov
(bad)
(bad)
not
push
inc
int
xchg
dec
pushf
js
xor
pop
pusha
les
cdq
add
lods
stc
push
out
mov
cdq
pushf
add
bound
sub
mov
add
push
jb
xchg
into
cld
pop
jnp
xor
sbb
mov
sub
js
mov
dec
lahf
pop
ret
push
data16
in
or
jecxz
inc
dec
adc
adc
loop
xor
pop
repnz
mov
mov
jmp
cmp
adc
lea
add
cmc
data16
pushf
stos
jecxz
outs
je
mov
(bad)
outs
mov
inc
add
xchg
cmp
xchg
(bad)
enter
mov
xlat
mov
stc
(bad)
push
(bad)
push
push
sub
lock
int3
jmp
shl
and
test
loop
jmp
push
sbb
ins
xor
mov
cmp
test
push
pop
push
in
pushf
ds
xchg
sub
fdiv
jae
mov
iret
xchg
jns
dec
sbb
xchg
fisttp
mov
test
and
fild
shr
mov
fisubr
dec
jb
clc
sub
mov
mov
mov
inc
inc
test
mov
dec
into
jg
mov
or
int
jecxz
xchg
outs
and
jle
mov
shl
out
push
adc
or
js
sub
or
mul
ret
add
push
je
xchg
(bad)
sub
imul
ins
(bad)
push
mov
push
sbb
or
pop
ftst
xchg
jne
mov
mov
repnz
or
sbb
push
push
cmp
mov
je
xchg
ret
push
ins
imul
sbb
xlat
outs
mov
xchg
jae
inc
jmp
cmp
mov
enter
sbb
and
inc
sti
loop
xor
(bad)
ficomp
test
mov
dec
sti
cld
mov
pop
fidivr
cmps
in
outs
lods
sbb
rcl
aam
rcl
stos
mov
mov
in
aaa
mov
mov
fist
mov
repz
jp
(bad)
das
mov
jmp
in
rcr
(bad)
mov
repnz
sub
sahf
aaa
xchg
jmp
mov
(bad)
mov
popf
cli
jo
inc
ins
jmp
cmp
repnz
sub
push
lock
xor
sahf
mov
cmp
mov
aam
push
jns
mov
(bad)
xor
enter
jge
xor
rol
jmp
sahf
xchg
out
aad
sub
test
inc
pop
scas
imul
sbb
outs
retf
fsubr
jbe
(bad)
out
sahf
mov
into
and
xchg
lods
adc
lock
sub
cmc
repz
sbb
inc
cld
ins
sahf
data16
in
aas
movs
sahf
add
jno
push
ror
pop
push
pop
or
pop
add
adc
add
addr16
fistp
and
and
stos
mov
pop
gs
pop
adc
jg
lahf
mov
lea
jne
xchg
shr
push
inc
mov
leave
(bad)
sub
cmp
inc
sub
js
fwait
repnz
mov
or
lods
scas
iret
rol
mov
test
add
and
pop
loop
cmp
test
push
fucomip
stos
jl
rol
in
icebp
ds
add
cmp
cmp
mov
out
(bad)
dec
mov
lods
xor
sbb
cmp
ret
cmp
and
fsub
stos
mov
iret
lds
call
mov
pop
test
jmp
aaa
fnsave
dec
in
cmps
ins
mov
das
add
fcom
call
push
dec
xlat
fidivr
lock
hlt
cmps
jo
mov
enter
xchg
sahf
cmp
jmp
mov
jge
data16
scas
aam
daa
arpl
add
fidiv
mov
outs
dec
je
or
cwde
fmul
sub
out
(bad)
add
(bad)
fidivr
cwde
mov
adc
out
xchg
cmps
test
retf
xchg
mov
adc
ja
scas
adc
scas
daa
mov
sub
sub
out
cmps
ror
call
inc
mov
jb
jno
and
test
mov
adc
push
imul
pop
cmps
loop
jo
mov
lock
or
inc
stos
jb
dec
mov
mov
cdq
jne
xchg
sbb
or
js
push
cmp
xchg
sub
ret
xor
test
sbb
mov
jmp
lahf
mov
leave
jle
rol
cmp
mov
cmp
aaa
mov
push
(bad)
and
stos
dec
mov
addr16
xchg
nop
pop
call
lahf
xchg
addr16
mov
retf
inc
retf
(bad)
rol
pop
push
fcmovbe
sbb
and
fistp
fldenv
lock
ffree
pop
push
cmps
or
sahf
adc
neg
repnz
retf
pop
xchg
scas
pusha
xor
out
xor
pop
lea
pop
(bad)
adc
and
and
arpl
inc
push
popa
push
mov
out
into
sbb
add
test
xor
lock
or
into
in
lods
popa
hlt
jnp
xor
xor
push
pop
adc
and
test
cld
mov
outs
(bad)
scas
in
icebp
and
or
pop
mov
xor
jmp
lock
push
ret
jl
push
aam
cmps
sub
js
je
outs
dec
xor
(bad)
xchg
mov
and
lock
setg
in
movs
mov
lock
out
xor
shr
call
pop
mov
jp
stos
or
jno
sub
jo
retf
jmp
add
(bad)
fistp
cwde
mov
mov
dec
jg
jo
xchg
inc
adc
sbb
add
jbe
adc
aad
pop
shl
mov
repz
sbb
add
(bad)
into
cmc
(bad)
popa
add
mov
and
mov
dec
inc
gs
ds
inc
stos
adc
xor
sti
add
ds
jne
rol
not
fisttp
lahf
mov
shl
into
ins
dec
mov
(bad)
mov
xor
mov
mov
stos
repz
mov
lock
pusha
jmp
sub
xlat
fsub
leave
js
cs
ficomp
clc
jecxz
mov
pop
mov
out
nop
sbb
stos
cmp
rcr
cmp
pop
addr16
push
lahf
adc
(bad)
push
call
sub
push
imul
mov
xchg
add
test
lock
ror
dec
fidiv
push
addr16
or
ss
sub
js
xchg
xor
mov
xor
in
ffreep
dec
int
pushf
pushf
std
jo
sti
inc
mul
mov
jg
(bad)
outs
and
lock
xor
sub
inc
cmps
pop
add
mov
pop
dec
push
lds
popa
clc
cwde
push
stos
(bad)
pop
sub
adc
sbb
mov
mov
shl
fist
ins
jno
test
push
lods
aaa
xor
sub
lods
xor
nop
xchg
(bad)
xor
icebp
test
and
adc
fdiv
mov
lahf
ret
aaa
inc
hlt
shr
test
addr16
adc
daa
(bad)
out
xlat
jne
enter
sub
jno
jecxz
cmp
and
push
mov
xor
imul
fst
pop
mov
iret
lea
mov
(bad)
in
(bad)
test
pop
ins
mov
nop
mov
cmps
fild
add
call
add
adc
adc
add
sub
xchg
mov
inc
(bad)
sti
add
retf
aad
je
mov
pop
dec
add
jae
lock
movs
ret
nop
gs
aad
stos
sub
jae
sbb
iret
push
mov
and
stc
pop
cmp
aas
lock
fucomip
pop
into
movs
push
jg
sbb
outs
adc
add
xchg
(bad)
cmp
mov
repnz
xchg
test
mov
sub
(bad)
repnz
lds
sub
mov
sub
fbld
adc
sbb
xchg
test
push
inc
cmp
shr
cwde
push
lock
cmc
test
sub
xlat
cmp
ds
mov
scas
fdivr
out
sbb
mov
mov
push
iret
sub
xor
sub
push
xchg
aam
xchg
push
mov
mov
fild
movs
enter
fistp
rcr
pop
(bad)
dec
jae
mov
sbb
dec
xchg
xchg
loop
sub
xchg
xchg
ss
cwde
push
cmp
mov
xor
xchg
xor
nop
xor
rcr
pop
int3
jmp
jecxz
aam
jo
push
aam
pop
jbe
cld
cmps
xchg
xchg
cmp
xchg
mov
xchg
jmp
xchg
loope
jge
pop
pusha
aad
ret
rol
mov
adc
or
push
xchg
inc
inc
neg
cmp
imul
test
inc
inc
pop
xchg
ins
sub
and
or
outs
dec
sbb
lahf
and
push
sbb
repnz
dec
bound
and
sbb
xchg
push
pop
(bad)
sti
or
mov
movs
mov
(bad)
pusha
pusha
and
cmp
dec
inc
dec
xor
int3
jns
xchg
retf
push
and
cmove
sub
aas
cmp
in
sub
jbe
inc
ja
or
sbb
retf
mov
xor
push
cld
push
mov
or
pushf
mov
mov
dec
je
stos
add
int
ficomp
mov
mov
(bad)
(bad)
xor
ja
gs
imul
ret
mov
ss
iret
enter
fisub
loop
xchg
cmps
cmp
pop
lods
or
cld
mov
movs
xor
mov
push
loopne
mov
in
not
jo
retf
loopne
test
into
repz
nop
mov
sti
inc
xchg
xor
iret
pop
sub
sbb
pop
mov
fwait
sub
or
aaa
push
shl
cmp
mov
dec
mov
(bad)
jno
je
(bad)
jg
pop
fisub
push
inc
in
sbb
aam
pop
ffreep
loopne
nop
lds
dec
jmp
mov
adc
lods
clc
adc
mov
fidivr
fadd
or
mov
mov
sub
vmread
jb
mov
fcomp
movs
in
push
inc
or
jbe
mov
xor
test
rol
xchg
in
mov
cld
adc
ja
xor
int3
fnsave
dec
jo
call
cmc
addr16
and
icebp
sbb
in
jmp
stc
stc
scas
add
scas
out
xchg
cmp
movs
xchg
test
inc
out
and
adc
push
jnp
arpl
add
lahf
mov
mov
addr16
call
mov
mov
dec
cli
or
mov
xchg
adc
jle
fdivr
sti
sub
mov
aas
mov
repz
rol
add
mov
in
imul
jmp
adc
sbb
or
mov
jne
shl
cmp
lea
(bad)
adc
nop
jno
or
mov
mov
outs
mov
(bad)
enter
and
dec
in
add
enter
fwait
les
adc
or
mov
xor
in
cmps
scas
or
mov
add
loop
lds
xchg
test
mov
shl
std
das
rcr
jecxz
enter
fwait
ret
xor
shl
cmp
fisttp
push
and
out
(bad)
daa
arpl
psrad
test
or
mov
fmul
loop
push
or
mov
call
pop
jno
shr
push
mov
es
daa
push
and
into
jmp
push
add
mov
out
xchg
jl
or
mov
inc
xchg
pusha
mov
push
adc
enter
inc
rcl
lds
adc
arpl
stos
aad
data16
aam
mov
repnz
mov
int3
push
neg
outs
ret
cwde
pop
jmp
sub
sahf
jo
dec
jmp
sub
rcr
loopne
ret
jns
mov
punpckhwd
call
inc
jne
out
and
fcomp
out
aam
cmc
sbb
fs
sbb
cmp
ss
test
xor
sbb
repz
jmp
mov
pop
(bad)
mov
mov
(bad)
push
mov
xchg
fiadd
test
retf
dec
(bad)
stc
cmc
leave
xchg
push
dec
ins
rcr
hlt
push
jb
mov
aad
mov
pop
inc
dec
push
xchg
(bad)
pop
fidivr
inc
push
xor
clc
test
lds
sub
inc
cmp
sub
mov
mov
stos
jbe
(bad)
shl
push
fistp
fwait
pop
outs
scas
test
add
jp
idiv
mov
push
xchg
sar
popf
ret
and
(bad)
jb
fimul
pop
sub
cmp
cmc
rcl
outs
mov
(bad)
pop
push
(bad)
dec
pop
gs
inc
xchg
jnp
mov
ret
into
mov
pop
cmps
mov
mov
pop
adc
lds
out
mov
xchg
in
in
add
mov
add
pop
jb
xchg
sub
sahf
or
into
jl
popa
bound
or
or
clc
push
out
stos
inc
sti
imul
dec
cmp
out
lods
js
sar
xchg
retf
das
xchg
mov
in
mov
stos
inc
sahf
ins
test
in
xchg
dec
or
dec
jbe
and
cli
jnp
push
sahf
loope
push
xchg
mov
iret
lea
push
mov
sub
rcr
pop
dec
je
(bad)
bound
and
xor
push
test
leave
jo
sub
inc
fsubr
cmps
daa
mov
stos
loope
icebp
call
out
inc
sbb
xchg
shr
sahf
xchg
int3
and
push
and
ins
sub
push
jecxz
push
mov
mov
aas
sbb
cmp
sar
ss
aam
jl
aas
fsubr
jnp
inc
mov
ds
mov
test
jmp
mov
ss
jb
(bad)
xchg
(bad)
pop
push
iret
(bad)
mov
add
ret
(bad)
(bad)
call
int3
or
imul
pop
cld
jecxz
in
mov
nop
mov
in
inc
jle
fs
inc
mov
push
lods
repnz
dec
rcr
mov
lods
sbb
adc
stos
jl
xchg
lods
(bad)
int
or
jae
scas
xor
pop
retf
jmp
adc
mov
movs
(bad)
pop
cmp
xor
mov
cld
xor
xchg
xor
and
xor
sub
data16
movs
test
rcl
popa
mov
cli
jl
push
popa
mov
and
(bad)
mov
or
aam
fist
in
pushf
xchg
int3
loopne
xchg
(bad)
cli
mov
and
add
xchg
xor
ror
dec
fst
add
daa
adc
sahf
mov
shl
scas
xchg
jecxz
dec
cmp
pop
hlt
pop
mov
mov
fstp
mov
loop
xlat
imul
scas
arpl
inc
pop
jns
mul
ror
ret
adc
imul
ret
xchg
pop
test
or
pop
or
into
mov
ror
mov
stos
loop
(bad)
mov
inc
icebp
mov
(bad)
pushf
xor
shl
add
outs
lods
sub
mov
cmp
mov
int
mov
pop
or
inc
sub
dec
pop
pop
movs
xor
inc
or
(bad)
dec
pop
ds
div
jne
retf
lds
pusha
imul
dec
popf
mov
sbb
les
and
fmul
pop
xchg
data16
rcr
mov
cld
jmp
xchg
dec
aam
frstor
retf
mov
enter
popfw
mov
(bad)
(bad)
ins
xchg
mov
jo
sub
cmp
(bad)
mov
xchg
test
push
mov
cli
ret
push
(bad)
jecxz
push
adc
ret
or
xchg
push
repnz
shr
xchg
lods
enter
mov
cmps
cmp
ret
mov
push
add
mov
mov
xor
movs
cld
sahf
dec
not
in
add
rcl
cmp
pop
mov
jbe
xchg
int3
cli
xchg
mov
ja
lahf
retf
xchg
jo
pop
add
fcomp
es
jmp
xchg
popf
adc
cmp
loope
scas
ret
and
add
add
popf
sar
out
jmp
shl
fst
nop
adc
fdivr
push
ret
sar
sbb
int
gs
inc
mov
mov
jne
push
cmp
das
shl
retf
or
cmps
xchg
mov
sub
push
fist
std
xchg
mov
shl
stos
inc
lods
cdq
sub
jle
dec
adc
sbb
call
mov
sbb
sub
xchg
add
test
pop
cmp
fidiv
ins
fcmove
mov
mov
(bad)
call
call
test
xor
imul
arpl
mov
sub
pop
loopne
adc
adc
in
arpl
mov
and
inc
mov
test
clc
jl
cmp
retf
fnstsw
sub
push
mov
sub
cmp
xchg
mov
push
push
xchg
dec
mov
fistp
sbb
cmc
mov
xchg
test
movq
mov
dec
xchg
push
out
scas
xchg
inc
inc
js
xor
mov
mov
retf
pop
mov
aas
movs
(bad)
in
test
and
add
out
mov
(bad)
adc
jmp
xchg
(bad)
out
das
and
push
jge
shl
adc
push
and
clc
xchg
mov
pop
imul
dec
imul
cmp
mov
xor
xchg
fisttp
in
popf
loope
mov
cs
push
outs
jno
lahf
push
addr16
mov
fdivr
jmp
mov
mov
lahf
jg
jno
mov
aad
mov
cmp
ins
jns
cmp
aad
pop
sahf
jmp
xchg
hlt
sti
cmc
mov
mov
push
push
test
and
(bad)
mov
rol
push
inc
addr16
stos
leave
test
cmp
ss
dec
push
cld
(bad)
pop
inc
adc
xchg
rcl
push
adc
(bad)
enter
in
xchg
jmp
(bad)
mov
inc
mov
push
ret
sbb
adc
inc
mov
push
aad
cmc
(bad)
leave
add
adc
jg
mov
adc
call
fidiv
mov
push
adc
sub
inc
movs
mov
xor
jl
nop
xor
sub
cmps
xchg
cvtdq2ps
add
or
getsec
mov
pop
or
cmps
mov
and
xchg
imul
xchg
icebp
call
pop
mov
aaa
pop
cs
add
fild
in
pop
add
cs
xlat
xor
scas
push
and
pop
sub
push
jno
fisttp
xor
retf
cli
hlt
(bad)
(bad)
call
jns
dec
pop
fsub
inc
inc
cmp
(bad)
mov
sbb
leave
mov
ret
(bad)
fs
in
(bad)
imul
popa
movs
push
pushf
dec
out
(bad)
cmp
shl
sbb
lahf
repz
les
inc
cmp
mov
or
in
inc
fmul
sbb
dec
sub
jns
xchg
leave
lahf
cmp
popa
imul
imul
out
or
loope
sub
movups
shl
mov
sub
add
dec
mov
rcr
popa
dec
mov
mov
les
xchg
add
test
inc
push
mov
dec
ficomp
xor
(bad)
stos
fisub
sbb
test
dec
aad
inc
add
std
mov
mov
fstp
in
sub
push
mov
cdq
sub
lea
retf
retf
(bad)
repnz
imul
add
ja
enter
fistp
outs
iret
test
daa
stos
shl
aaa
popf
xor
xchg
lahf
ret
mov
ja
call
rol
mov
push
mov
imul
cdq
pop
pop
pop
pushf
pop
mov
push
inc
jl
xor
cwde
es
mov
js
dec
add
aas
arpl
into
das
(bad)
cdq
nop
mov
(bad)
xchg
out
hlt
and
in
test
loope
push
adc
jbe
repnz
adc
xor
pop
mov
dec
jmp
lods
mov
adc
gs
cmp
cmp
dec
dec
mov
xor
mov
jmp
add
das
mov
push
ret
stc
hlt
test
lock
add
adc
aas
and
and
jge
or
jno
out
cld
clc
or
sbb
push
jnp
mov
in
lods
leave
xchg
jg
mov
(bad)
outs
out
in
add
sbb
cmp
cmps
loopne
add
mov
in
stos
lods
xchg
and
push
lods
icebp
jmp
sti
push
hlt
and
inc
cmps
sbb
sub
jmp
repnz
inc
fchs
retf
xchg
xchg
in
xor
sahf
sub
xchg
(bad)
repz
das
pop
data16
pushf
jb
cld
adc
inc
adc
ficom
inc
clc
hlt
xchg
jmp
cmps
hlt
in
mov
loope
dec
add
pop
inc
mov
das
mov
data16
int3
fwait
stos
(bad)
gs
gs
add
inc
mov
xchg
test
loop
dec
push
adc
adc
iret
dec
add
mov
cmps
(bad)
out
loope
add
mov
sub
push
neg
xor
and
les
sub
mov
mov
jl
aas
pop
rol
push
je
mov
mov
stos
fisub
inc
xchg
push
and
fcmovnu
adc
fnsetpm(287
pop
repnz
push
out
jmp
jg
ss
or
cli
lea
cmp
stc
fst
xor
jmp
rcl
mov
js
add
fisub
jns
ror
test
adc
cmp
cmp
rcl
scas
test
xor
into
lods
shr
pushf
scas
jge
test
dec
rcr
push
add
arpl
(bad)
retf
int3
jmp
adc
lods
cmp
pushf
adc
call
in
push
dec
lahf
lock
mov
je
add
leave
fstp
repz
jmp
fst
test
clc
jb
ja
fninit
dec
or
pushf
dec
inc
rcl
pushf
add
ret
sti
pusha
xchg
out
jno
outs
pop
mov
and
mov
and
ret
and
ja
stos
inc
and
outs
mov
ins
js
mov
xchg
xor
sub
pop
xchg
retf
xlat
lods
call
sar
and
or
push
mov
sar
inc
sbb
fcom
and
fst
imul
ror
mov
inc
mov
sbb
addr16
loope
ss
jg
jo
sti
xor
shl
cmc
mov
sbb
sar
(bad)
aad
cli
adc
idiv
add
sbb
or
dec
or
fwait
sti
pop
ds
sbb
aam
add
and
add
cmps
sub
xchg
outs
hlt
pop
outs
inc
add
mov
mov
out
sub
mov
jg
fs
xchg
and
setns
repnz
add
pop
mov
pop
mov
es
int3
imul
or
jecxz
sbb
cmp
dec
cld
out
mov
cdq
jmp
add
loope
mov
into
push
push
xor
ds
push
jno
fdivr
dec
fld
out
pop
cld
pop
mov
cmp
cld
lss
daa
cmp
jg
js
mov
cmps
movs
sub
push
sti
sub
cli
in
sub
in
retf
sbb
jnp
shl
neg
adc
cmp
clc
xchg
xchg
xchg
push
fwait
je
movs
push
add
pushf
mov
jb
in
out
pop
pushf
cli
aaa
inc
jmp
stc
add
jbe
stos
sub
ja
daa
ret
mov
sbb
fbstp
mov
cmp
shl
xor
inc
jl
mov
cli
sbb
inc
(bad)
mov
cmp
and
mov
cwde
mov
adc
inc
sahf
aam
adc
and
xchg
lds
in
lahf
cli
scas
add
jns
pop
push
into
add
rol
sbb
iret
clc
scas
push
or
(bad)
loop
cwde
ret
jmp
in
aas
jg
pop
jbe
sub
sub
sub
mov
clc
push
jno
xchg
jne
sbb
test
mov
xchg
fcomp
push
popa
sbb
(bad)
bound
dec
jg
jbe
retf
(bad)
lods
push
outs
loopne
out
icebp
add
ins
addr16
xchg
or
test
push
enter
push
fwait
(bad)
cmp
jb
adc
iret
inc
cmp
dec
and
out
cs
je
fwait
enter
add
push
mov
cmc
arpl
jge
pop
push
adc
mov
mov
mov
jbe
mov
pushf
retf
pop
pushf
stos
and
xor
mov
fidivr
inc
iret
sub
xor
and
or
pop
pop
xchg
mov
dec
leave
(bad)
dec
popf
std
push
and
jge
(bad)
ror
xor
xchg
pop
adc
cmp
test
dec
bound
(bad)
fcmove
daa
sbb
inc
test
loop
lds
push
ror
out
fldenv
inc
ds
mov
pusha
(bad)
sub
push
in
loopne
mov
cwde
sahf
aam
jnp
xor
mov
test
add
add
in
bound
cli
xchg
lahf
sub
out
mov
std
xor
inc
cmp
outs
out
repnz
aaa
or
rcl
push
lahf
sti
shl
pop
add
xchg
es
int
and
movs
addr16
add
and
clc
push
sbb
cmc
xchg
mov
or
fisubr
and
aad
je
jnp
push
repnz
jo
aaa
lds
push
test
jmp
mov
add
cmps
dec
jp
xchg
mov
push
mov
fwait
mov
push
sub
add
mov
jae
in
mov
js
gs
arpl
nop
push
scas
xor
(bad)
loopne
(bad)
jns
aam
sub
mov
push
inc
mov
loop
dec
push
(bad)
fs
cmp
pop
add
mov
adc
(bad)
pop
scas
mov
aad
push
out
int3
mov
les
pop
(bad)
mov
adc
cmp
lahf
rol
jmp
pop
cmp
dec
inc
sbb
daa
(bad)
xor
mov
js
sbb
sbb
movs
pop
fmul
mov
mov
shl
or
xchg
mov
push
ins
rcl
push
lgs
fwait
adc
xchg
test
jbe
js
mul
(bad)
mov
fwait
cli
cmps
jecxz
scas
ds
xchg
pop
lahf
push
cld
lea
int3
ja
repnz
loop
shl
dec
xchg
paddb
mov
repnz
lahf
lods
pop
inc
jns
test
lods
jecxz
outs
jg
popf
idiv
adc
in
cmp
push
ins
jp
inc
out
(bad)
outs
(bad)
movs
shl
call
out
pusha
dec
dec
jnp
retf
pop
cmp
jns
push
mov
mov
addr16
aam
cld
addr16
jmp
jne
mov
mov
ds
dec
dec
out
inc
stc
dec
sub
jp
fisub
test
sub
xor
mov
jmp
and
enter
(bad)
xor
cmp
xor
es
retf
lahf
cld
mov
(bad)
mov
xor
adc
mov
les
mov
cmp
mov
xchg
push
loop
addr16
fwait
out
ins
movs
dec
mov
repz
mov
out
push
jmp
repz
repnz
jae
pop
(bad)
arpl
or
repnz
add
adc
les
add
fwait
pop
in
xchg
imul
jns
iret
lods
sbb
mov
mov
sbb
push
lahf
retf
das
lahf
adc
mov
out
mov
adc
fisttp
and
sub
repz
push
push
in
js
ret
cmp
mov
push
rcl
lds
push
in
push
bound
(bad)
ffreep
xchg
repz
or
pop
push
mov
xor
adc
in
sub
cmps
cld
push
push
int3
lahf
add
dec
pop
add
push
fcom
cld
mov
adc
fsubr
cmp
frstor
into
leave
or
leave
lods
sub
cmp
loopne
ss
inc
mov
push
test
jecxz
mov
les
push
jbe
in
sti
sti
and
inc
leave
(bad)
les
in
inc
jo
inc
mov
or
nop
push
xor
mov
pushf
xchg
(bad)
and
mov
cmp
out
lods
nop
scas
mov
movs
cli
jecxz
dec
push
into
push
cld
mov
jns
out
adc
aam
fnstenv
xchg
ret
mov
push
ret
div
inc
repz
inc
or
pop
cmp
adc
pop
cmp
xor
sub
(bad)
call
ins
cmp
out
je
outs
adc
and
lods
nop
push
sub
jmp
adc
stos
mov
jns
aad
test
pop
jp
ret
cmp
jb
lahf
gs
int3
mov
test
jne
xchg
push
(bad)
call
retf
pop
sbb
fdiv
in
jbe
lahf
idiv
push
sub
mov
pop
mov
dec
sti
loop
jo
xchg
sbb
mov
test
outs
dec
mov
shl
test
ror
or
fimul
push
inc
pop
(bad)
jmp
adc
rcr
shl
pop
cdq
shl
sub
out
add
jno
repnz
push
dec
mov
loope
mov
dec
xchg
jmp
test
jmp
les
in
dec
sbb
xchg
nop
out
push
inc
sbb
push
cmc
xchg
in
sub
xchg
fiadd
dec
popa
in
fwait
xchg
sbb
(bad)
sar
test
aad
fsub
dec
jb
aad
pop
dec
(bad)
mov
jbe
mov
lds
jecxz
xor
xlat
enter
mov
push
sbb
aam
jg
mov
dec
dec
imul
sub
dec
popa
jmp
mov
std
add
sub
cmp
mov
xchg
mov
imul
xor
lods
mov
arpl
repnz
jle
dec
mov
mov
cwde
ss
shl
xchg
jmp
iret
mov
repnz
pop
(bad)
mov
mov
fwait
mov
and
outs
push
vmaxpd
in
inc
cmps
xor
(bad)
sub
mov
add
inc
rol
test
ins
ja
push
das
push
mov
shl
es
mov
imul
cmp
fstp
fidivr
jno
pop
cmp
sti
in
clc
cmp
loopne
push
lahf
dec
nop
cmps
pusha
xor
outs
in
push
gs
cmp
xchg
nop
movs
inc
mov
lea
xchg
jnp
aam
test
lea
call
jo
loope
xchg
(bad)
hlt
mov
test
mov
mov
stos
cmps
fist
jnp
xor
jae
mov
out
push
gs
inc
dec
out
ret
and
push
in
dec
push
sahf
(bad)
and
and
jmp
jle
mov
cmp
adc
rcr
jecxz
sbb
jo
or
retf
shl
int3
test
cmps
test
mov
loop
(bad)
mov
adc
jecxz
pop
and
fist
fst
out
push
adc
add
inc
add
mov
(bad)
mov
mov
mov
out
fwait
push
pusha
mov
jl
sub
adc
retf
int
(bad)
push
(bad)
sub
jmp
and
xor
or
cmps
mov
mov
in
mov
aaa
fmul
(bad)
mov
dec
test
lea
or
pop
cs
mov
dec
ret
int3
jl
out
jg
les
addr16
icebp
mov
pop
mov
pop
in
jmp
jp
jbe
repnz
jne
movs
shl
pop
iret
mov
aad
jno
xchg
aaa
fld
std
mov
movs
aaa
add
call
push
sub
and
sub
push
pop
(bad)
(bad)
mov
mov
ret
stos
call
pop
jmp
aad
xor
jns
inc
sub
pop
or
je
or
lock
outs
pop
xlat
inc
bound
mov
sub
int3
xchg
mov
(bad)
xor
(bad)
jae
sbb
mov
pop
mov
test
inc
cwde
xchg
ins
into
sub
mov
or
nop
es
or
lods
xchg
out
dec
jbe
jmp
hlt
mov
lahf
sub
call
push
test
push
ja
jns
cmp
sbb
call
xor
ret
pop
call
mov
push
xchg
cdq
out
not
pushf
mov
rcl
out
push
push
pop
retf
data16
adc
adc
sbb
pop
cmp
fsubr
push
mov
fwait
sbb
or
mov
xchg
jg
icebp
jmp
push
xchg
pop
push
pop
sub
xchg
stos
lahf
jmp
mov
inc
pop
fistp
jbe
jmp
call
xor
cmc
iret
rcl
lods
cmc
arpl
mov
inc
mov
inc
xchg
pop
inc
dec
and
mov
cmp
loop
ss
xor
pop
push
add
loop
pop
jl
imul
cmps
mov
push
mov
xor
xchg
mov
sbb
jbe
mov
lahf
test
lock
repnz
out
sbb
gs
push
cmp
call
xchg
cmp
ins
xor
pop
test
dec
adc
ds
jl
sub
dec
mov
xor
jle
or
mov
mov
in
inc
mov
int3
in
sbb
out
and
ds
stos
xchg
cmps
add
(bad)
(bad)
mov
xchg
(bad)
lods
mov
adc
sbb
xor
mov
xchg
dec
cmp
adc
inc
xor
cmp
mov
cs
sbb
xor
adc
movs
std
aad
inc
cmp
xchg
ror
cwde
dec
stos
xchg
out
shl
mov
xchg
sub
dec
cs
das
pop
push
cld
add
push
test
xor
cmps
fisub
add
push
scas
and
(bad)
inc
rol
adc
push
adc
shl
sub
dec
push
jl
aaa
outs
ja
push
inc
adc
das
and
sbb
and
adc
cmp
push
std
mov
out
cmps
jge
mov
cmp
fist
sbb
jmp
dec
pop
adc
data16
in
(bad)
inc
xor
cld
and
xchg
jle
out
pop
repz
pop
(bad)
cmc
das
add
mov
xchg
cmp
pop
gs
loope
out
js
aad
xchg
xor
or
in
mov
mov
fnstcw
push
sub
xor
not
sub
sbb
xchg
fs
jo
jecxz
mov
arpl
cmc
fwait
push
or
ret
movs
retf
or
in
push
mov
gs
out
xchg
dec
test
xchg
sar
ss
inc
jno
ficom
icebp
mov
ds
fsubr
imul
cmc
pop
gs
fiadd
fwait
jmp
sbb
cmp
retf
sbb
mov
sbb
jge
int
test
(bad)
xchg
cmps
or
repz
icebp
mov
add
mov
push
nop
xor
cdq
idiv
imul
and
jp
mul
fsubrp
in
aam
sbb
test
push
aaa
cli
xor
inc
xchg
inc
sub
std
or
cmp
jmp
adc
push
dec
mov
inc
sbb
jne
loope
rcl
jb
scas
mov
bound
imul
scas
scas
ins
sahf
dec
add
stos
cmps
dec
jl
ret
xchg
mov
and
std
daa
xchg
jbe
mov
push
mov
sub
mov
adc
mov
xchg
arpl
(bad)
and
pusha
aaa
mov
adc
fwait
and
out
inc
imul
mov
mov
stos
pop
mov
adc
cmps
push
nop
popa
pop
xor
scas
cmps
or
sub
out
jno
push
test
mov
call
dec
inc
ss
cmc
clc
rol
fidivr
cmps
(bad)
adc
into
adc
mov
or
in
push
push
jnp
jno
xchg
sub
sub
dec
mov
lahf
nop
xchg
test
dec
jle
fldenv
sahf
pop
push
pop
mov
(bad)
cld
inc
pop
mov
xchg
sbb
int
loop
dec
dec
fimul
xor
sub
enter
int3
push
sahf
aas
ja
sub
mov
out
icebp
movs
pop
mov
repz
fs
xchg
pop
icebp
mov
xor
outs
imul
cmp
fwait
(bad)
jmp
jecxz
ins
(bad)
in
not
push
push
gs
push
ins
or
inc
cli
mov
dec
jl
push
int3
jne
sub
retf
mov
je
outs
ret
jo
nop
lock
push
inc
pushf
sbb
clc
xor
movs
xchg
mov
leave
es
in
fwait
mov
in
add
push
lods
int
lock
sub
pop
test
jb
or
lds
in
push
jmp
mov
out
inc
push
xchg
nop
jge
ret
mov
xor
aam
mov
dec
lahf
addr16
jmp
lods
lock
or
faddp
inc
dec
cmp
fbld
ins
adc
mov
push
and
ss
sahf
out
mov
sbb
jmp
out
or
popa
int
arpl
cmp
xchg
mov
cmp
adc
adc
and
or
mov
sub
pop
out
jge
add
es
mov
pop
mov
pop
cmp
and
sub
adc
xor
mov
aad
push
(bad)
ret
enter
sub
or
jns
ret
inc
push
push
sbb
arpl
gs
xchg
fmul
das
xchg
inc
imul
mov
cld
out
cmp
mov
sbb
pop
jmp
add
sbb
fwait
nop
xchg
mov
xchg
jmp
mov
mov
je
aad
nop
fist
sbb
mov
rcl
inc
je
add
push
mov
sahf
xchg
and
pop
dec
dec
call
cmp
xchg
mov
mov
gs
loop
dec
adc
lods
push
in
add
mov
gs
mov
sbb
xchg
mov
arpl
lods
shl
mov
inc
not
mov
push
sbb
add
adc
mov
fs
dec
iret
inc
xchg
repz
lock
pop
out
jl
dec
cmp
mov
inc
test
ror
(bad)
out
rol
div
fnsave
(bad)
out
sub
mov
jns
pop
inc
fld
nop
mov
je
shl
out
shr
inc
enter
ss
cmp
inc
(bad)
stc
out
xchg
retf
adc
imul
pop
in
mov
ret
(bad)
cmc
test
jb
mov
push
mov
xchg
add
jnp
es
jecxz
sbb
and
mov
scas
mov
mov
fbstp
lock
sar
inc
cwde
cmc
int
(bad)
cmp
jno
lea
ins
imul
out
sub
fnstsw
div
aas
pop
fsubr
xlat
int3
fist
aad
push
jmp
cmp
call
jo
sub
jg
and
rcl
dec
sub
retf
outs
adc
mov
fistp
ret
mov
ins
add
icebp
sar
scas
test
dec
dec
push
in
jb
dec
pop
mov
out
sbb
jge
or
test
movs
mov
ins
add
das
fiadd
cmp
adc
cmp
mov
repz
or
sbb
addr16
mov
or
popf
popa
scas
fnstcw
jecxz
adc
adc
stos
inc
movs
ins
xor
sub
fild
jmp
jno
movs
sbb
not
add
(bad)
adc
sbb
fstp
out
pop
jne
dec
fs
adc
xor
xchg
aam
out
scas
and
xor
fidivr
cmps
push
stc
add
das
mov
pop
mov
into
xchg
sti
dec
mov
dec
scas
repnz
sbb
jp
push
retf
fcmovu
aaa
fnsave
mov
shr
xor
lods
fld
and
and
es
pop
add
sbb
sub
pop
and
mov
mov
mov
sbb
pushf
mov
in
jge
cmp
(bad)
xor
lahf
es
mov
aas
xchg
stos
cmp
xor
clc
pop
and
adc
retf
cs
call
adc
fsubr
pop
loope
stos
icebp
std
or
outs
adc
add
cmps
stc
rol
xchg
dec
lds
adc
aaa
shr
repz
fild
shl
pushf
lds
pop
test
cmp
sbb
adc
or
push
xchg
retf
xchg
outs
lods
outs
push
mov
aas
int3
add
sbb
sbb
inc
pop
inc
shr
xlat
mov
cwde
xchg
addr16
push
jnp
mov
inc
std
push
lds
pop
jge
shl
pop
nop
inc
mov
ret
lods
inc
adc
jmp
es
cmps
cmp
aad
sub
jmp
and
jo
sub
movntps
test
call
pop
lahf
mov
xchg
cvtpi2ps
out
pop
cmps
stos
and
sbb
or
xchg
stos
pop
mov
push
test
jns
jne
sahf
in
in
inc
lock
cmp
xor
mov
pop
pop
inc
dec
xchg
scas
jb
xor
pop
pop
or
mov
add
loopne
mov
bound
sar
outs
cwde
and
(bad)
jae
mov
jg
(bad)
pusha
dec
xchg
fsub
call
xchg
and
and
cmp
mov
lock
jmp
daa
in
cmps
cld
shl
out
retf
or
jae
nop
push
jmp
in
stos
jp
push
cmps
in
in
nop
push
test
test
stos
mov
fbld
fdivr
lock
test
and
xchg
pop
nop
les
pop
adc
call
dec
mov
mov
jmp
pop
push
lods
data16
jae
call
aas
or
xor
inc
hlt
leave
adc
retf
adc
and
pusha
mov
dec
cli
mov
add
xchg
dec
mov
ins
arpl
xchg
pop
in
pop
push
mov
scas
jo
das
fnstenv
mov
mov
sbb
xor
iret
dec
jmp
aas
out
(bad)
mov
push
cld
fadd
mov
cld
xor
or
lods
inc
retfw
lds
scas
mov
sbb
hlt
adc
inc
jle
mov
in
push
xchg
jno
lods
or
fwait
inc
daa
in
jnp
gs
xor
test
jmp
sub
jl
pushf
mov
out
dec
sub
popa
xchg
lds
and
jnp
movs
enter
daa
lea
jecxz
xchg
js
ret
jbe
mov
neg
lahf
xor
adc
test
mov
test
add
jmp
ss
popf
mov
add
fst
and
movd
xchg
inc
sbb
jo
xchg
in
pushf
popf
and
retf
cwde
shl
mov
mov
pop
inc
sahf
xor
xchg
mov
mov
and
cli
pop
rcr
arpl
xor
xor
add
rol
vpavgw
call
and
in
sti
fs
push
mov
xor
dec
and
gs
and
outs
xor
jmp
out
sbb
and
or
xchg
xchg
adc
bound
sbb
pop
cmp
xor
push
mov
adc
inc
repnz
or
int
sub
ins
push
push
adc
imul
les
fs
and
xchg
mov
sub
mov
adc
pusha
or
hlt
jb
fucomp
ror
cmps
inc
dec
(bad)
mov
add
xor
stos
xchg
movs
aam
repz
mov
add
cwde
cld
jmp
js
fild
shl
ins
and
out
repz
jo
inc
and
mov
mov
xchg
gs
add
dec
scas
inc
jle
mov
test
dec
ret
push
in
(bad)
jo
sahf
es
sbb
frstor
xor
(bad)
mov
pop
xchg
aas
pop
mov
inc
ss
(bad)
(bad)
push
add
dec
adc
jo
inc
repnz
mov
inc
outs
out
repz
int
push
jbe
push
mov
aas
data16
xor
loope
mov
int3
mov
retf
or
cmp
in
enter
syscall
fwait
xchg
daa
pusha
pop
in
ins
add
cwde
rcl
bnd
je
cmp
sub
lds
pop
pop
fadd
(bad)
je
aam
sub
or
arpl
inc
xchg
lock
fbld
cmp
jno
inc
pop
aaa
sbb
jle
int3
or
xchg
in
jne
and
or
ret
into
mov
mov
nop
js
jae
std
mov
in
test
in
xor
cwde
cld
jb
dec
jmp
mov
(bad)
outs
xchg
mov
add
push
pushf
mov
retf
push
nop
imul
out
sub
adc
jle
and
aaa
pop
inc
mov
cmps
(bad)
imul
sbb
xor
outs
and
pop
mov
mov
scas
icebp
loopne
out
push
jmp
(bad)
and
push
mov
push
fisub
mov
push
xchg
rcl
mov
cmc
pop
(bad)
imul
test
pop
lods
pop
(bad)
mov
add
fimul
sti
push
pushf
adc
aaa
inc
imul
scas
xcrypt-ecb
cmps
retf
pop
sbb
das
call
xchg
jno
push
sub
mov
jecxz
(bad)
scas
fdivr
div
or
inc
and
inc
je
or
cmp
add
mov
mov
mov
cmps
push
pop
(bad)
push
inc
mov
mov
(bad)
jg
inc
lahf
cli
add
pop
inc
imul
test
push
cli
adc
int
or
loopne
add
in
les
and
js
xor
popw
data16
xor
dec
addr16
add
hlt
or
sub
or
cmp
nop
xchg
add
sbb
outs
cmps
dec
cmp
inc
mov
pop
clc
sbb
scas
sbb
retf
mov
fcmovnb
pop
push
jmp
sahf
sub
cmp
lea
mov
inc
(bad)
push
sub
mov
xor
fimul
pop
mov
jb
call
push
and
mov
push
xchg
fisub
aas
test
xchg
test
test
sub
adc
sbb
sti
jp
pop
and
cmp
push
adc
(bad)
jl
inc
xor
cmp
scas
adc
mov
call
iret
add
ret
in
mov
std
fbstp
pusha
jns
gs
pop
push
inc
mov
fistp
inc
jg
ins
xchg
mov
adc
jno
lea
jmp
mov
add
mov
mov
scas
mov
test
mov
sub
imul
mov
lahf
dec
jo
mov
dec
(bad)
xor
arpl
jmp
daa
or
sti
jg
fld
fidivr
sub
dec
dec
std
movs
inc
pop
mov
in
hlt
retf
out
ror
movzx
clc
lock
arpl
movs
mov
out
xor
repnz
into
sbb
lods
std
mov
iret
pusha
cdq
imul
pop
clc
mov
or
jle
add
addr16
vdivps
sbb
mov
dec
push
nop
mov
jae
adc
mov
fistp
lea
cmps
push
pushf
dec
mov
sub
jo
leave
stos
int3
jmp
clc
or
sbb
in
jno
adc
mov
mov
and
dec
sar
push
xchg
clc
adc
jno
cdq
inc
mov
dec
or
mov
inc
push
push
ins
xchg
push
inc
dec
je
ins
pop
lods
cmp
inc
sub
stos
mov
lea
movs
xlat
push
push
mov
xchg
dec
or
cli
adc
xchg
mov
inc
push
mov
out
scas
sub
push
rol
adc
cmp
mov
out
ss
test
andps
mov
mov
cli
int3
push
cmp
in
mov
stos
push
adc
sub
mov
or
pop
(bad)
popa
cmp
fwait
push
inc
sub
mov
mov
xchg
sub
outs
ins
aaa
sub
aad
jg
pushf
dec
cmp
fdivr
mov
ror
xchg
(bad)
clc
jmp
test
int3
mov
std
mov
repnz
dec
pop
mov
sbb
push
pushf
aaa
jl
mov
int3
lds
or
mov
sub
inc
je
cdq
movs
pusha
xor
jmp
add
sub
call
retf
pop
(bad)
jno
nop
mov
fwait
and
sbb
xchg
and
and
or
popf
xchg
or
jo
sub
add
sub
sbb
arpl
lock
xchg
les
add
push
lods
enter
vmwrite
leave
inc
mov
sub
add
ror
nop
(bad)
in
in
ret
leave
mov
loopne
bound
mov
jne
repnz
and
push
mov
icebp
xchg
push
repnz
sbb
sahf
push
cmp
add
push
jle
xchg
pop
or
mov
adc
cmp
or
or
cld
adc
adc
push
cwde
push
ror
jno
scas
mov
jg
add
inc
cmp
das
ja
mov
jo
in
in
stos
loope
sbb
ds
mov
sbb
push
sahf
mov
aam
stc
push
(bad)
dec
and
inc
out
jl
fwait
mov
js
cmps
popf
idiv
in
in
jo
pop
jecxz
xchg
push
test
mov
movs
sar
in
mov
push
sub
gs
(bad)
outs
dec
test
scas
mov
pop
movs
pusha
inc
xchg
xchg
adc
imul
leave
out
sti
out
jbe
(bad)
shl
test
in
mov
mov
rcl
jmp
imul
call
xor
cld
dec
jnp
inc
sub
mov
(bad)
popa
into
aas
lock
je
add
sahf
lds
test
scas
sbb
lea
xchg
jbe
mov
xchg
mov
push
jge
push
and
adc
fist
out
xlat
shl
xchg
(bad)
xor
xor
das
bound
(bad)
in
in
push
xlat
or
cmp
sti
movs
xor
dec
pop
sbb
pop
int3
fs
sbb
pop
lock
out
stos
retf
cmp
mov
gs
loopne
jmp
cdq
mov
pop
adc
mov
cli
ret
nop
mov
lods
inc
mov
xchg
sbb
adc
fisttp
ret
aaa
sub
push
and
(bad)
jmp
aam
add
push
in
les
fldenv
dec
push
outs
(bad)
ror
mov
and
xor
aaa
iret
popa
inc
fstp
sbb
repz
in
xchg
lahf
retf
mov
int3
aam
lds
inc
add
cwde
(bad)
pusha
dec
dec
aas
repnz
je
adc
dec
nop
rcr
jae
dec
ja
iret
push
mov
sub
xor
jnp
hlt
inc
nop
adc
loope
jmp
add
or
add
pop
out
je
and
jnp
imul
xor
sti
dec
adc
mov
sahf
jae
mov
adc
cdq
push
xor
imul
mov
lds
jmp
mov
push
pop
call
push
xchg
test
xchg
jmp
nop
sbb
and
mov
arpl
imul
(bad)
(bad)
jl
pusha
into
jns
lods
mov
xor
scas
dec
or
lods
jmp
out
mov
call
pop
add
movs
xchg
stos
pop
(bad)
mov
lock
rol
mov
out
jge
sbb
(bad)
adc
xchg
jbe
adc
xor
xchg
iret
inc
push
das
sbb
mov
enter
jecxz
retf
lods
imul
xchg
arpl
mov
push
sub
mov
mov
scas
xchg
or
xchg
stos
(bad)
in
push
imul
xlat
vpunpcklwd
cwde
cmp
into
ror
(bad)
not
inc
imul
mov
fdivr
sbb
and
movs
popa
pushf
fcmove
ins
xchg
ins
adc
push
push
inc
cmp
js
(bad)
cmc
imul
xchg
lds
pop
das
cmp
or
adc
out
fcomi
fwait
aas
cwde
sbb
test
cld
add
test
sub
sub
lock
cmp
mov
xor
jnp
ins
jge
out
ret
movs
or
fcom
mov
xor
loop
jbe
sbb
pop
ins
(bad)
scas
dec
dec
push
cmp
xchg
lahf
ins
adc
push
jmp
pop
pop
xchg
sub
(bad)
movs
movs
dec
adc
pop
int3
mov
movs
mov
repnz
adc
push
scas
loop
fst
lahf
sbb
loope
and
mov
ret
mov
xor
xor
fwait
retf
aad
(bad)
loope
xchg
adc
(bad)
aad
xchg
popf
mov
xor
je
enter
pop
sahf
das
xor
pop
imul
ss
ins
retf
ret
mov
xchg
jl
adc
ror
mov
mov
fwait
push
fidivr
bsr
out
scas
ins
push
sbb
mov
shr
data16
push
add
rcr
push
in
(bad)
jno
jo
sub
push
cmc
iret
add
sub
sbb
mov
xchg
fcmovnb
mov
(bad)
push
jns
rol
inc
xor
inc
fmul
hlt
rcl
bound
jge
(bad)
push
ds
cmp
iret
fcomp
mov
movs
mov
adc
iret
enter
inc
jg
call
fadd
int3
stos
jne
int3
hlt
out
inc
or
fsubrp
shl
push
stc
sub
pop
jmp
in
mov
out
lock
sub
out
ret
xor
mov
cmps
jo
daa
jnp
or
mov
pop
xor
scas
mov
mov
sahf
cmp
mov
das
fbstp
mov
sub
ret
popf
pop
in
jmp
(bad)
movs
repnz
and
push
movs
shl
nop
sbb
(bad)
adc
fbstp
loopne
cmp
jno
pop
enter
xchg
mov
xchg
mov
adc
int
stos
cwde
pop
sub
mov
cmp
movs
add
ficom
ss
push
jl
stos
lahf
gs
retf
xor
sub
mov
or
ins
dec
mov
(bad)
mov
add
std
jg
cmp
mov
push
adc
fdivr
dec
mov
jne
mov
cmp
ja
(bad)
out
pop
gs
dec
test
inc
clc
mov
dec
pushf
ficom
sbb
sar
xchg
mov
push
xchg
push
je
sar
sub
adc
and
jmp
mov
jmp
xor
sbb
cmp
push
inc
push
push
mov
sbb
(bad)
inc
and
test
ins
push
cs
cmp
test
mov
aad
mov
adc
in
adc
ss
pop
cmp
xchg
lock
inc
sub
mov
mov
iret
or
add
push
xchg
dec
mov
jno
test
mov
dec
fmul
mov
adc
xor
stc
test
in
imul
or
ret
(bad)
cmp
inc
xchg
sbb
and
sub
xor
sub
fidivr
xchg
in
sahf
in
mov
loopne
add
sub
cmp
leave
(bad)
pop
cmc
and
push
clc
arpl
xchg
cdq
scas
cmps
push
adc
push
jnp
cdq
adc
mov
popf
mov
add
ret
push
push
or
aas
scas
ds
sbb
jo
pop
mov
xchg
push
or
scas
lods
ret
sahf
jl
adc
inc
ds
movs
loop
in
mov
pop
lods
pop
push
mov
fwait
cmps
fsubp
scas
push
or
rcr
in
scas
cmp
stos
mov
xor
jmp
cmp
sub
and
pop
(bad)
lock
xor
cmps
loope
dec
pop
imul
mov
cmps
ins
jne
xchg
mov
pop
jle
push
imul
push
dec
jne
in
ss
mov
push
dec
adc
mov
cdq
and
or
jecxz
cmp
lods
xlat
lods
test
inc
inc
and
pop
jecxz
jo
dec
lock
jl
mov
jp
inc
xchg
pushf
retf
xor
adc
stc
mov
dec
dec
inc
(bad)
stos
sub
fs
and
jg
mov
jecxz
adc
(bad)
hlt
jmp
dec
or
je
div
xchg
rol
mov
lods
(bad)
push
pushf
popf
ja
push
and
retf
ja
fisub
stos
(bad)
scas
aas
outs
add
fwait
(bad)
sti
cdq
push
mov
xchg
scas
fild
mov
push
pop
ret
mov
inc
fcom
xchg
sub
xchg
ins
mov
fcomp
jae
repz
sbb
dec
jecxz
lds
popf
cwde
out
cli
ins
mov
shl
push
leave
or
mov
out
rcr
rcr
adc
bound
ret
ja
sahf
fistp
push
cmp
jne
outs
int
mov
out
pushf
cmp
pop
add
sub
(bad)
(bad)
jno
push
(bad)
jp
lock
popf
stos
sbb
cmp
jp
stos
mov
dec
test
addr16
leave
hlt
xchg
cdq
dec
xchg
xor
fdiv
push
out
mov
call
loop
js
jmp
hlt
mov
cmp
jne
out
fcomp
jp
jmp
das
scas
pop
in
xchg
bound
inc
neg
popf
sahf
hlt
xor
das
int
sub
or
jmp
xchg
mov
nop
push
in
test
xor
arpl
push
enter
int3
in
mov
in
jne
cmp
adc
cvttps2pi
pop
pop
jo
inc
ret
fstsw
imul
clc
dec
fcom
and
out
and
in
into
ja
xchg
ds
or
sahf
push
push
ja
adc
in
pop
xchg
and
fisttp
pop
jg
jns
fcom
mov
adc
dec
aaa
mov
retf
jg
mov
mov
or
add
test
xchg
bound
inc
(bad)
retf
and
mov
pop
ins
jno
mov
bound
cmp
xchg
movs
sbb
(bad)
out
adc
jecxz
out
rcr
pop
mov
push
in
jno
or
dec
sahf
push
mov
cmps
sub
and
adc
and
gs
xor
(bad)
lock
stc
jnp
ret
test
cld
push
xchg
call
ret
add
es
popf
out
hlt
inc
mov
call
xchg
jmp
push
xchg
jns
ret
out
and
mov
enter
xchg
push
lds
(bad)
scas
iret
pop
scas
call
arpl
pop
add
leave
pop
or
retf
mov
out
mul
shl
sub
repnz
lea
dec
retf
mov
push
push
add
ret
mov
adc
cld
(bad)
movs
aad
xchg
jg
inc
and
mov
cmp
inc
jp
pushf
push
not
cmp
mov
in
inc
xchg
cwde
addr16
(bad)
adc
inc
and
add
fninit
mov
adc
fild
call
cli
stc
test
mov
ss
push
mov
(bad)
repz
mov
lods
jns
sub
fcom
fdiv
outs
imul
aad
xor
sub
rol
aas
stos
neg
idiv
and
inc
cmp
inc
mov
jmp
mov
in
dec
enter
pop
lea
hlt
(bad)
mov
pop
sti
push
mov
bound
xor
sub
mov
loope
stc
test
pop
shl
add
fs
fdivp
retf
ret
xchg
push
fsubr
or
daa
jb
xchg
xchg
ins
xchg
retf
cmc
lea
popf
ror
ins
lahf
sbb
leave
int3
pop
mov
xchg
mov
cmp
jp
enter
enter
xchg
test
xchg
push
add
push
sar
jp
jmp
mov
mov
leave
repnz
jns
dec
xchg
sub
xchg
test
les
sbb
out
cld
mov
scas
pop
push
mov
push
lds
sbb
dec
jnp
pop
xchg
nop
inc
cs
shl
mov
pop
sub
js
add
into
int3
pop
inc
mov
sti
push
mov
imul
and
cmp
ja
inc
xor
and
ret
sub
mov
int3
sub
(bad)
rcr
into
fld
(bad)
es
jns
mov
sbb
mov
mov
sub
jns
adc
mov
aam
stc
call
enter
cwde
or
inc
sub
je
inc
xchg
arpl
repnz
sahf
bound
sub
dec
pop
jo
jmp
pop
sbb
mov
and
inc
inc
cmp
ret
mov
cmps
dec
aas
sub
hlt
push
movs
test
(bad)
mov
aam
xchg
(bad)
rcl
test
inc
xchg
jle
inc
(bad)
xchg
les
in
rcl
in
push
mov
jbe
lahf
cmc
pushf
fistp
lods
jmp
adc
mov
scas
imul
ds
jl
inc
mov
lock
pop
add
les
icebp
dec
mov
ss
fild
or
adc
les
imul
and
push
cld
or
push
fs
setne
cs
xor
and
loope
stos
ja
pop
sub
push
push
pushf
jb
xor
or
push
enter
dec
mov
mov
mov
dec
out
test
(bad)
dec
les
xchg
push
dec
push
and
leave
test
inc
rcl
sbb
aam
push
jbe
sbb
mov
adc
jp
dec
jo
mov
cld
push
jmp
mov
jmp
loopne
in
xchg
(bad)
in
xor
rol
dec
popa
pop
shl
loop
cmps
mov
sbb
(bad)
dec
fwait
movs
inc
js
inc
or
sbb
adc
mov
sub
out
jns
mov
movs
jbe
ins
sub
lock
push
gs
ficom
xor
nop
rol
and
iret
mov
cs
jnp
cmp
movs
loopne
xchg
dec
sti
xchg
or
mov
mov
retf
sub
and
sub
jnp
and
mov
cwde
sub
stos
or
daa
mov
lds
and
in
push
jmp
test
inc
fadd
fwait
push
out
xchg
xor
dec
dec
push
nop
imul
iret
unpcklps
fwait
mov
xchg
(bad)
sbb
mov
xchg
pop
sbb
sbb
stc
lods
xchg
sti
push
stos
jns
fcmovnu
mov
clc
cmp
test
shl
xchg
shl
mov
lods
adc
cmp
cmp
sahf
in
add
xchg
ins
jmp
inc
mov
shl
out
push
sbb
jmp
push
cdq
lock
cs
push
fnsave
dec
inc
hlt
sti
mov
cs
mov
mov
add
inc
and
ficom
stos
repz
ins
dec
mov
cmp
xor
js
jg
adc
popa
aam
call
dec
xor
sbb
(bad)
stos
stc
and
push
test
and
cmp
inc
out
xchg
fisubr
xor
rcl
aaa
push
sub
cmp
jne
dec
xor
xchg
mov
xor
sbb
mov
fstp
add
pushf
shl
mov
jae
kaddb
out
aaa
mov
xchg
loopne
inc
dec
sub
rcl
outs
out
jle
jne
pop
push
idiv
ins
icebp
retf
pusha
or
sub
scas
or
fs
lea
pop
retf
not
cmp
(bad)
pop
int3
rcl
aad
ret
inc
fmul
repz
ins
or
mov
xor
icebp
mov
inc
jnp
push
out
inc
mov
push
push
mov
mov
fdivr
sbb
jmp
arpl
jmp
and
or
sbb
add
bound
ret
mov
fdiv
push
(bad)
out
test
xchg
cld
jmp
push
push
ret
dec
inc
loopne
clc
mov
dec
cwde
jmp
inc
mov
xor
call
sbb
push
(bad)
out
shl
jae
std
ins
jle
ds
ret
sbb
mov
fcomip
jne
mov
gs
(bad)
gs
cmps
cmps
push
mov
(bad)
jmp
ficomp
(bad)
mov
push
xor
cmp
inc
xchg
mov
sbb
pop
dec
int
iret
jg
scas
cmps
lahf
nop
ret
cmp
int3
(bad)
lea
push
lods
sub
add
dec
add
out
jge
push
jl
movd
cdq
outs
mov
nop
loopne
cmp
ss
fwait
inc
mov
jnp
mov
enter
xlat
int
daa
mov
(bad)
retf
rcl
fstp
xchg
and
loop
and
daa
mov
xor
and
and
pushf
(bad)
lea
dec
cdq
movs
int
pusha
test
xchg
add
mov
and
les
addr16
jo
rol
test
inc
adc
outs
fwait
adc
mov
jp
div
cdq
jb
jne
or
das
mov
push
xor
loop
push
xor
push
dec
outs
(bad)
loop
iret
scas
(bad)
push
(bad)
sbb
cmc
cmp
sub
sub
in
add
jmp
sti
scas
fist
fst
push
pop
(bad)
push
shl
rcl
inc
repz
pop
cmps
and
out
jnp
mov
add
dec
mov
jl
(bad)
jbe
cmp
or
bound
jno
mov
jle
pop
jecxz
push
stos
leave
addr16
ret
jo
int
fidivr
dec
(bad)
addr16
neg
out
movs
lds
inc
adc
shl
fidiv
popa
or
repnz
cmp
xor
enter
cmp
inc
push
call
daa
push
call
movs
mov
mov
mov
or
pop
(bad)
daa
inc
xor
push
jmp
push
gs
lahf
cmp
out
inc
sub
xchg
data16
cwde
int3
jne
mov
inc
push
mov
adc
(bad)
sub
inc
push
mov
jno
and
(bad)
dec
mov
jle
push
scas
mov
ret
adc
sub
cmp
mov
jle
daa
cmp
and
pop
lahf
imul
outs
aam
push
pusha
cmc
push
stos
std
cli
cmps
into
adc
jnp
push
add
xor
mov
add
mov
mov
mov
out
and
jecxz
ret
ret
xchg
sbb
in
jmp
enter
stos
pop
fsub
adc
not
mov
and
pop
mov
or
dec
retf
retf
mov
shl
fidiv
imul
inc
sub
inc
dec
lods
ds
push
rol
and
(bad)
mov
fst
call
cmps
pop
out
les
ins
mov
test
fild
ins
dec
xchg
outs
jbe
xchg
mov
mov
fstp
ret
inc
inc
stos
cmp
jne
fwait
test
adc
clc
mov
stc
retf
inc
inc
dec
mov
xchg
sub
std
cld
out
inc
cmp
loope
mov
xchg
ror
or
jno
stc
jmp
outs
adc
mov
ret
in
xor
scas
(bad)
fcomp
inc
das
mov
icebp
loopne
test
(bad)
loopne
or
pop
fsub
ret
xor
std
dec
and
jns
jmp
test
mov
jne
(bad)
fdivr
add
add
push
in
fwait
push
fs
gs
push
fs
in
add
jb
mov
xor
shl
jo
inc
stc
repz
loope
xlat
and
mov
(bad)
fxch
jae
mov
mov
fdivr
push
mov
and
outs
jns
adc
and
aam
sti
sub
push
fwait
sbb
push
test
cwde
idiv
test
out
cmps
mov
mov
xor
out
loopne
in
jg
inc
movs
mov
ret
xchg
shl
xchg
iret
int
retf
sbb
mov
sub
pop
sub
push
hlt
daa
in
cdq
xchg
and
dec
sbb
dec
loopne
int
pop
ja
stos
loope
adc
add
loop
and
pop
jo
mov
mov
jg
mov
mov
jo
call
fistp
lahf
inc
inc
cld
push
fldcw
push
lods
aad
call
jl
dec
js
push
inc
sub
sbb
mov
xchg
sub
mov
fstp
dec
push
xchg
xchg
push
or
mov
sub
adc
bnd
push
aaa
mov
mov
lds
outs
aam
out
in
fsubr
(bad)
adc
inc
sub
and
dec
xchg
daa
pop
out
daa
mov
adc
nop
xrelease
cli
inc
arpl
sbb
mov
sbb
scas
cmp
ss
(bad)
xlat
adc
stc
or
ds
iret
mov
inc
mov
data16
mov
xchg
aas
loope
jg
aad
adc
pop
in
retf
fistp
adc
cmps
aas
rcl
test
inc
pop
mov
outs
je
mov
std
in
sub
imul
cld
scas
sbb
pop
sub
xlat
sar
nop
mov
pop
ja
je
lahf
out
xor
(bad)
dec
cdq
test
call
imul
dec
femms
dec
xchg
lahf
sbb
xor
repnz
icebp
aad
dec
sub
push
xchg
daa
sar
push
dec
and
sub
icebp
or
cmp
xlat
leave
or
or
fimul
sbb
fnstsw
out
adc
scas
mov
xchg
(bad)
pop
sub
inc
jb
repz
daa
(bad)
adc
sub
arpl
or
js
cli
mov
xlat
lock
not
add
dec
stos
jecxz
imul
aam
xor
push
pop
fidivr
cmp
jbe
dec
mov
sub
sti
and
xcrypt-ecb
cmps
mov
add
in
mov
je
(bad)
and
arpl
ret
xchg
sub
jmp
sysexit
jg
adc
retf
xor
popf
ins
nop
add
pop
shl
ins
mov
(bad)
sahf
jecxz
fwait
je
xchg
out
and
push
lock
cmp
add
retf
cmp
jb
mov
push
mov
mov
mov
arpl
data16
(bad)
idiv
adc
cs
inc
mov
imul
mov
jnp
jb
jp
lods
stos
xchg
add
sbb
fwait
retf
adc
bts
sub
lods
cmc
pop
fbstp
pop
lds
cwde
lds
call
xor
cdq
mov
sbb
int
out
mov
xchg
cwde
std
jno
nop
lods
test
icebp
xchg
cmp
inc
jbe
repnz
cmps
retf
add
xchg
push
pushf
mov
xor
in
xchg
mov
and
pop
sbb
fstp
inc
fstp
adc
and
dec
sub
pop
jmp
xlat
les
shr
fsub
repnz
dec
aas
lds
in
rol
icebp
outs
dec
(bad)
cli
xchg
inc
sub
adc
jno
stos
in
sub
imul
(bad)
sti
sub
iret
gs
mov
sub
or
ds
mov
sub
test
xchg
inc
popf
sar
mov
pop
cmp
sbb
jg
mov
test
in
push
cwde
mov
push
cmp
ret
mov
mov
rcr
aad
jle
test
mov
in
int3
or
cli
jecxz
add
mov
cmps
rol
xchg
xchg
das
sub
rcr
call
out
(bad)
jmp
test
jl
mov
daa
(bad)
ds
inc
in
stos
and
mov
in
shl
fist
add
push
xchg
push
cmp
imul
mov
enter
icebp
xor
lea
sub
ret
fdiv
or
or
fmul
movs
fld
pop
xor
xchg
inc
xchg
mov
call
movs
adc
test
inc
mov
mov
jge
not
or
mov
sub
mov
repnz
repnz
lock
aas
in
in
les
test
jecxz
nop
sub
xor
cli
in
fwait
leave
js
bound
cmovo
jmp
push
push
and
and
mov
mov
push
fmul
mov
je
xor
jnp
pop
mov
fwait
in
pusha
or
mov
mov
(bad)
bound
clc
push
data16
and
pcmpeqd
repnz
scas
mov
sbb
sbb
shl
pop
call
mov
fs
add
out
jp
push
test
sti
mov
in
mov
mov
outs
int3
ja
dec
mov
fisttp
jnp
(bad)
test
mov
fnstcw
mov
xor
jmp
fnstenv
cmp
ret
mov
ror
push
inc
inc
dec
cmp
sub
adc
enter
repz
sbb
cdq
cdq
icebp
jae
dec
mov
retf
out
in
shr
cmp
out
bound
xchg
fcmove
mov
jbe
adc
cmp
push
xchg
xchg
inc
ret
(bad)
clc
cli
add
xchg
jo
xchg
or
cmp
push
pop
fistp
add
sub
aaa
cmc
aaa
in
call
inc
push
sbb
xor
mov
jl
jbe
jmp
aaa
mov
arpl
fldenv
jno
or
cli
fs
loope
in
xchg
lds
xlat
adc
or
mov
je
stos
jb
cmc
push
xchg
mov
rol
aas
retf
sub
cmps
fsub
adc
(bad)
repnz
push
sahf
aad
pop
and
(bad)
lock
adc
pop
pop
mov
mov
pop
(bad)
xor
lahf
pop
test
mov
sbb
fst
jmp
int
mov
out
lock
(bad)
xor
fwait
sbb
je
jp
shl
xchg
not
mov
mov
dec
add
shl
and
div
adc
(bad)
xor
loop
sub
sub
mov
aad
out
and
sub
jge
pop
lock
mov
push
movs
jmp
retf
xor
cmp
(bad)
(bad)
jecxz
cmps
mov
dec
iret
xor
iret
xor
rcr
sub
aam
pushf
ss
movs
out
fstp
sbb
adc
jmp
lds
retf
jb
outs
mov
adc
mov
xor
mov
cmp
test
cmp
xor
leave
retf
jmp
ss
dec
and
(bad)
ins
int3
jo
cli
je
cmps
add
and
sar
hlt
push
add
sub
aaa
mov
add
mov
adc
mov
into
pop
and
scas
out
data16
sti
inc
lds
mov
push
adc
(bad)
ficomp
(bad)
movs
clc
push
pop
jecxz
cmp
dec
mov
mov
cmp
repnz
call
repnz
ds
or
and
cwde
sbb
xor
retf
mov
and
xlat
mov
test
mov
inc
cwde
test
mov
adc
fstp
lea
enter
xor
jge
clc
in
fbstp
xchg
and
dec
mov
jo
sahf
sbb
daa
jg
(bad)
jl
mov
push
fistp
shl
aaa
dec
retf
mov
test
clc
adc
push
test
jecxz
popa
jno
sub
pop
retf
jnp
retf
ins
or
xchg
xor
xchg
rcr
das
push
pop
jns
addr16
sar
movs
out
jbe
add
xor
ins
push
push
in
mov
mov
and
(bad)
call
jmp
xchg
test
jne
cmp
cmp
push
dec
dec
mov
jl
cmps
lods
xor
aaa
(bad)
mov
xchg
test
popf
dec
sbb
cmp
xor
inc
loop
push
cwde
cmp
or
push
xchg
cli
adc
cmp
mov
data16
pushf
xor
cld
shr
mov
or
ins
fldcw
scas
aam
loopne
sbb
jle
fwait
stos
adc
(bad)
hlt
jl
cmc
(bad)
jb
and
cld
test
fcom
add
xor
mov
push
(bad)
hlt
push
fisub
dec
sar
repnz
add
lds
fisttp
sbb
pop
mov
inc
push
sbb
loope
add
test
mov
mov
xlat
out
push
inc
dec
push
jecxz
ins
loope
(bad)
jbe
sbb
ret
ror
enter
inc
ds
inc
call
shr
and
fmul
into
lods
adc
mov
sahf
jmp
rol
lahf
adc
mov
in
repnz
mov
int
push
dec
(bad)
dec
in
add
mov
cmp
call
pop
aad
sti
adc
jb
lds
(bad)
inc
xor
les
sub
addr16
xchg
or
sub
cmc
push
jecxz
rcl
fcomp
mov
dec
call
gs
cmp
mov
mov
cmps
int3
rol
push
pop
mov
adc
pushf
jg
push
adc
scas
ins
into
(bad)
addr16
je
sti
fisubr
pop
jl
push
pop
fndisi(8087
adc
cmp
sbb
adc
sbb
jbe
mov
sub
or
push
gs
fwait
dec
adc
or
xchg
sti
lea
adc
sbb
sbb
pop
jp
mov
icebp
push
cli
in
cld
push
mov
push
add
pusha
sahf
into
mov
jae
sti
push
outs
imul
inc
ret
(bad)
or
fnstenv
retf
cli
lds
push
inc
mov
push
xor
mov
shl
and
cmps
repnz
fisttp
mov
test
add
arpl
xor
sub
cmp
test
cmp
jmp
mov
(bad)
aas
and
aaa
cwde
xchg
lods
or
iret
nop
xchg
mov
aaa
mov
pop
xchg
mov
xchg
pop
jno
push
mov
mov
dec
pop
movs
nop
inc
and
test
mov
cmp
mov
cmp
pop
ins
enter
sub
pop
xor
fcomp
js
jae
je
sbb
cmp
fs
or
stos
xchg
sahf
div
pushf
mov
ret
out
xchg
mov
cdq
xlat
adc
push
mov
cmps
xchg
mov
jg
push
clc
(bad)
ret
fild
repz
adc
sbb
jne
ins
rcr
push
call
mov
cmp
fcom
adc
aas
in
or
lock
cld
or
or
ss
cmc
ja
aaa
xchg
xchg
mov
(bad)
aam
ret
js
pop
pop
sub
mov
sbb
mov
(bad)
xlat
jno
xchg
push
not
mul
dec
pop
mov
clc
adc
push
pop
sbb
nop
in
mov
fwait
lods
clc
jecxz
enter
adc
test
mov
cld
and
sub
push
ins
adc
into
pushf
repz
or
movs
push
mov
push
mov
fnstenv
lock
jl
pusha
aam
or
jne
popf
ret
xor
pushf
dec
mov
pop
mov
pop
adc
xchg
cmp
pop
lds
inc
mov
jno
jne
sahf
aad
aad
popa
xor
cmps
mov
mov
inc
inc
out
rol
add
push
or
inc
adc
or
jmp
xchg
push
add
fbld
push
js
call
hlt
xchg
es
cmps
push
icebp
xor
push
cdq
sahf
jg
data16
lock
mov
stc
call
mov
das
scas
or
ss
lods
cmps
ret
or
aas
es
xchg
inc
pop
mov
stos
mov
inc
mov
(bad)
lods
into
es
out
mov
cmp
ficom
call
add
sub
and
lock
stos
jmp
push
loop
clc
sub
jp
fistp
push
pandn
cli
mov
sub
popf
mov
pop
inc
inc
gs
mov
lds
fdivr
dec
(bad)
in
into
mov
mov
xor
pop
cmp
not
inc
and
or
out
fstp
xor
cmp
sub
mov
xchg
inc
push
aas
pop
(bad)
sub
cmp
and
loop
ret
fistp
ret
js
sar
into
xchg
add
jb
inc
jl
dec
leave
xor
push
xchg
mov
pop
out
jmp
add
ror
jp
pop
(bad)
sbb
xchg
cmp
in
das
and
hlt
pushf
mov
jne
addr16
out
mov
or
aad
pop
fcom
xor
test
push
jb
xor
mov
mov
movs
inc
push
fist
stc
pop
loopne
dec
stos
stos
xchg
test
cmc
add
xchg
push
aad
xchg
es
xor
imul
ficom
mov
lds
scas
mov
pop
xchg
xor
bnd
push
xor
popa
jno
jp
cmp
retf
fistp
leave
sti
retf
shr
int
or
lods
xchg
dec
ret
cli
and
mov
cmp
nop
(bad)
outs
push
enter
mov
push
mov
test
adc
rol
and
xor
imul
push
std
sub
test
fwait
jmp
test
mov
mov
stos
sub
int3
in
std
push
adc
dec
daa
dec
nop
movs
enter
daa
lds
bswap
cld
add
jp
mov
mov
add
jo
(bad)
sub
dec
sub
test
mov
pop
mov
push
fwait
adc
or
cmp
hlt
or
or
in
and
mov
mov
sub
test
in
cs
dec
fstp
push
out
jg
cmp
adc
daa
jne
jns
xchg
inc
(bad)
fstp
dec
adc
push
loope
fcomp
popa
push
retf
xchg
cmp
mov
loop
adc
add
push
push
scas
stos
test
arpl
dec
maxps
iret
fcmovnbe
mov
call
jle
adc
jmp
das
ficom
jbe
adc
addr16
scas
call
in
adc
xchg
aaa
in
inc
dec
stos
jae
addr16
iret
push
mov
push
out
jbe
mov
int
lahf
je
mov
cmc
xchg
imul
mov
inc
cmps
out
and
xlat
inc
fwait
stc
out
hlt
imul
or
pop
dec
dec
and
mov
fnstenv
out
jp
and
mov
or
mov
fmul
xchg
cmp
stos
in
mov
rol
pushf
push
adc
dec
iret
jno
lods
jo
adc
mov
retf
fwait
inc
mov
or
inc
int
mov
and
xor
out
mov
push
pusha
mov
sub
stos
pop
cmp
inc
mov
adc
sub
(bad)
pop
push
and
push
mov
popf
sub
mov
int3
test
imul
ins
lods
or
into
ss
movs
test
jecxz
sbb
push
cmp
sub
lods
sub
ins
ins
push
leave
and
mov
jle
or
in
adc
pushf
rol
cli
lea
iret
imul
(bad)
out
push
or
or
imul
out
int
mov
in
test
out
pop
cmp
adc
jg
sub
arpl
add
call
or
pop
mov
jmp
mov
add
cmp
push
pop
push
mov
push
aam
sti
imul
sbb
fdiv
rcr
cli
and
stc
ror
jle
xor
mov
clc
in
jo
das
sbb
sbb
fwait
and
jns
gs
dec
shl
test
aaa
dec
cmp
jg
mov
xchg
add
adc
xchg
loope
cmp
popa
ret
and
(bad)
test
add
add
sahf
xchg
jb
aaa
imul
test
gs
ins
repz
cmc
jb
sahf
pop
cmps
push
aaa
mov
sub
retf
or
mov
daa
(bad)
repz
sub
and
jmp
clc
test
test
cmp
out
jns
popa
sub
push
pop
rcr
dec
push
(bad)
dec
fadd
icebp
popa
sbb
or
pop
xor
add
jbe
fmul
cs
loopne
cmp
mov
popf
addr16
lods
cmp
mov
sbb
shl
and
mov
pushf
pop
(bad)
pop
in
aas
pop
xchg
mov
pop
jg
mov
cwde
jle
add
sub
test
mov
popf
(bad)
bound
fwait
xchg
jb
addr16
cmp
pushf
js
test
add
retf
or
cmp
sahf
enter
push
les
xchg
jno
jmp
xchg
xor
pop
mov
(bad)
out
adc
aaa
mov
xor
sub
mov
mov
jmp
xchg
xchg
les
repz
mov
xchg
bound
cmp
cmp
stos
fdivr
sahf
mov
or
add
movs
test
lods
xchg
call
les
xchg
fild
das
mov
inc
jle
mov
(bad)
ja
rcl
outs
je
pop
ds
and
jecxz
push
jmp
test
xchg
xchg
(bad)
inc
in
push
test
fist
repz
fnstsw
jle
pusha
pop
aaa
inc
fimul
add
push
or
xor
jbe
in
cmc
cs
push
es
daa
fsub
push
and
pop
push
ins
jle
test
xchg
or
icebp
aad
popa
jmp
add
pop
jno
mov
mov
clc
loopne
ins
test
dec
retf
adc
and
sub
bound
aaa
adc
xor
or
movs
repz
rcr
lahf
ins
loop
inc
and
call
sbb
sbb
xchg
aad
(bad)
adc
mov
mov
lahf
xchg
add
push
cmc
cmp
jo
jle
push
lock
(bad)
ds
pop
mov
rcl
sbb
sbb
imul
ja
and
out
into
aas
movs
js
sub
inc
sbb
jmp
mov
xchg
sbb
mul
lods
add
jecxz
iret
cwde
in
push
dec
inc
imul
cmp
mov
inc
cmp
bound
mov
fsub
dec
jle
xor
pop
scas
inc
lds
cmp
pusha
out
jmp
hlt
push
ins
outs
sub
pop
sahf
pop
imul
or
mov
pusha
test
lods
xor
cmc
xchg
retf
inc
pushf
sbb
in
xchg
inc
hlt
cmp
arpl
adc
mov
bound
mov
mov
jp
(bad)
cmps
pop
shr
or
jl
dec
mov
jbe
jbe
dec
mov
xchg
dec
hlt
ss
pop
push
sahf
call
loope
bound
xchg
(bad)
ds
dec
xor
pop
inc
les
cmc
idiv
and
mov
pop
lds
fwait
ins
loope
je
push
xchg
mov
mov
neg
xor
cmp
inc
mov
aas
aaa
mov
sub
jp
mov
das
not
sub
mov
jno
imul
jmp
mov
test
push
push
into
lock
xchg
ds
shl
bound
sbb
sub
cmps
mov
fucomp
cmps
pop
and
into
(bad)
loopne
or
push
out
jno
mov
sbb
js
jecxz
cmp
ret
call
sub
cmps
mov
aam
movs
push
jge
daa
pop
pushf
jle
push
adc
adc
jl
hlt
ror
movs
not
popf
pusha
push
outs
dec
out
icebp
nop
sub
test
jge
adc
cmp
test
dec
(bad)
push
cmp
push
inc
shl
jmp
sti
cld
mov
push
jmp
(bad)
je
fdivr
loope
enter
and
mov
fidiv
call
lods
inc
mov
mov
outs
dec
js
stc
cwde
adc
clc
fpatan
push
shl
aas
jge
pop
(bad)
hlt
sti
sub
pop
repnz
out
pop
jp
sub
jl
stc
push
mov
fmulp
push
ret
nop
sub
call
aad
nop
call
not
aad
and
push
mov
inc
sbb
retf
fbstp
pop
and
pushf
pusha
push
into
das
xchg
sbb
dec
sbb
popa
push
js
int3
repnz
xchg
mov
mov
lods
in
imul
mov
movs
dec
inc
(bad)
push
cmp
icebp
cli
scas
aas
mov
(bad)
xor
dec
out
inc
aaa
repnz
jmp
cmp
and
fwait
popa
loop
(bad)
nop
loop
aam
out
adc
loop
(bad)
cmp
sbb
xor
in
pop
mov
jo
cdq
jne
loop
les
test
inc
cmps
gs
daa
mov
mov
push
or
and
inc
mov
cmp
sbb
jmp
jmp
aam
add
retf
xchg
jns
mov
cmps
in
push
or
and
ret
jne
sbb
sub
inc
xor
mov
(bad)
add
adc
dec
pushf
and
loopne
mov
fs
fcom
shr
mov
xchg
adc
shr
and
mov
cmp
repz
gs
jmp
mul
jge
shl
dec
add
jp
ds
push
lock
mov
lock
(bad)
in
cmp
xor
rcr
sbb
mov
stos
cs
test
sti
test
in
mov
sub
mov
dec
jb
mov
imul
jmp
aam
push
arpl
push
cdq
push
sbb
push
cdq
iret
pusha
(bad)
or
(bad)
mov
or
dec
jo
bound
sbb
xchg
or
imul
sbb
or
dec
iret
jmp
retf
stos
dec
xlat
sbb
addr16
cmp
rcr
in
push
shl
inc
ja
xchg
or
sbb
jbe
push
je
jge
ror
or
es
cdq
and
mov
push
push
fdiv
in
dec
fsub
iret
adc
mov
pop
movs
xor
add
xor
xchg
stos
retf
sar
add
rol
test
jns
xchg
retf
add
jae
jge
push
fcomp
sbb
mov
cmp
sub
pop
daa
mov
sti
xchg
ins
call
push
add
jmp
xchg
fs
pop
(bad)
in
xchg
push
mov
xchg
xchg
rol
mov
push
mov
xor
fstp
int
xchg
(bad)
test
push
adc
sub
clc
mov
cmp
fcom
aam
adc
sub
call
lods
ss
inc
mov
push
jmp
and
cld
lahf
sbb
adc
xor
and
addr16
outs
xchg
mov
jg
inc
outs
out
mul
or
mov
leave
lds
or
(bad)
inc
loope
xchg
test
sti
sub
leave
in
pop
scas
add
xchg
(bad)
out
nop
xlat
ret
xchg
xor
jns
xchg
ins
iret
pop
and
loop
jnp
pop
test
sbb
cdq
imul
out
jl
pop
cli
adc
xlat
dec
cmp
cmp
mov
mov
and
mov
push
dec
pop
fs
add
test
mov
xor
(bad)
adc
mov
jl
out
xchg
jbe
call
push
cmc
mov
xchg
in
add
xchg
cmp
into
loop
mov
aam
ins
or
jl
push
sub
(bad)
xchg
test
add
retf
inc
in
in
mov
out
mov
(bad)
rol
inc
or
sti
(bad)
add
pop
ja
jno
test
inc
popa
inc
mov
call
int
cmp
cmp
fmul
mov
mov
mov
stc
fisttp
cmp
and
pop
xor
adc
repnz
jns
jp
pop
pop
cmp
fiadd
(bad)
fsub
xchg
sub
arpl
sub
outs
lods
not
lock
ror
xor
push
mov
xchg
stos
sbb
jp
push
push
movs
scas
xor
daa
sub
jb
mov
push
in
retf
push
cmp
and
dec
inc
(bad)
mov
rcr
and
stc
test
repnz
cmp
imul
push
cmp
mov
fsub
imul
cmc
mov
cmps
mov
push
pop
pop
in
stos
cmps
cli
dec
divps
dec
loope
lods
fdiv
xor
das
push
arpl
push
jns
mov
std
ds
in
sbb
jle
das
push
sub
xchg
in
dec
mov
jmp
rcr
out
cmp
adc
ret
lahf
sahf
adc
xchg
add
retf
sub
fidiv
test
xchg
adc
(bad)
imul
jmp
cli
add
mov
popa
pusha
adc
jle
call
or
dec
jne
mov
rcr
jmp
hlt
lock
iret
jmp
mov
sub
ins
or
rol
cmp
inc
(bad)
cld
mov
mov
test
and
in
test
xor
imul
(bad)
mov
cld
pop
sbb
out
aam
mov
nop
jecxz
sar
jbe
xor
pop
(bad)
aad
pop
push
inc
(bad)
jle
mov
inc
mov
(bad)
xor
retf
ins
movs
jle
pop
movs
push
mov
cmp
push
lods
xchg
stos
gs
cmp
sub
jmp
pop
xor
shr
scas
and
bound
jle
sti
pop
adc
pop
(bad)
ds
cmp
ret
int
or
jecxz
scas
stc
pushf
arpl
loopne
ss
xor
xchg
xor
cmp
dec
imul
lock
sbb
(bad)
icebp
add
sbb
(bad)
test
add
sti
or
stos
test
xor
sbb
mov
mov
xchg
push
xchg
mov
test
push
push
scas
pop
pop
aas
aam
call
aaa
inc
mov
pop
or
aad
and
je
scas
fsub
mov
cmp
mov
out
and
lock
hlt
add
rol
mov
outs
mov
nop
retf
xchg
fisub
mov
dec
add
or
lds
pop
sar
ss
adc
std
add
cmp
push
retf
jo
es
jo
bound
ins
pop
sar
add
inc
fdivr
mov
adc
mov
nop
ss
mov
mov
pop
outs
jno
mov
fcmove
pop
xchg
xchg
(bad)
sub
mov
xchg
jne
xchg
jns
cmp
sbb
stc
jnp
sbb
loop
mov
sub
aaa
inc
push
ror
loop
mov
add
cmp
sub
fwait
popa
sub
add
push
sub
(bad)
in
mov
retf
cmp
jbe
inc
adc
dec
xchg
fwait
call
xchg
pop
push
mov
scas
jne
movs
mov
jp
or
(bad)
mov
std
call
mov
stos
data16
push
mov
cmp
mov
dec
stos
xchg
fcmovnbe
sbb
rcr
adc
lea
je
mov
inc
mov
sub
clc
aas
aaa
neg
popf
rcr
mov
jmp
sub
inc
fsub
int
out
pop
inc
retf
fbld
mov
xor
lock
mov
add
mov
jmp
in
jmp
fisttp
int3
dec
repnz
add
xchg
jmp
scas
push
xchg
dec
push
cmp
test
sbb
inc
out
scas
or
outs
retf
std
inc
jg
cmc
shl
jno
cli
xchg
ror
data16
cmp
aad
sub
jg
push
xor
inc
test
nop
or
sub
mov
repz
out
mov
mov
jbe
and
retf
push
ror
or
mov
sub
in
aam
popf
lock
add
add
cs
sbb
out
cmp
(bad)
xor
add
hlt
in
nop
dec
or
mov
xlat
sahf
pop
pop
sub
ror
bnd
push
push
inc
xchg
mov
into
retf
cdq
xchg
out
gs
or
dec
out
mov
data16
lea
into
cwde
xor
pop
(bad)
push
imul
pop
out
stc
retf
(bad)
cmps
mov
xlat
jo
push
mov
lea
jle
ret
inc
jo
push
xor
add
retf
xchg
mov
fist
outs
jge
and
(bad)
mov
repz
popf
ret
jo
sbb
dec
xor
ret
ss
loope
mov
ret
mov
sub
pop
push
std
mov
icebp
lea
jp
cld
cmp
inc
fwait
adc
push
jnp
adc
lods
fs
ret
into
and
dec
inc
cmps
rcr
or
es
ficomp
int3
daa
dec
sub
pop
cmp
inc
es
push
(bad)
shr
dec
inc
into
push
test
cmps
int3
cmp
retf
stos
jg
push
jge
add
daa
movs
xchg
rcl
push
sub
(bad)
adc
push
mov
sti
mov
cmc
mov
adc
cmp
gs
mov
cmps
inc
test
fldenv
inc
dec
faddp
xor
test
cli
or
hlt
in
push
mov
js
lock
test
xchg
je
add
jnp
(bad)
xchg
jb
cmp
cmp
sti
aam
mov
or
call
test
lods
adc
xchg
pop
mov
sbb
dec
inc
(bad)
mov
in
loope
mov
clc
jmp
mov
rcr
in
cmps
dec
mov
and
jne
(bad)
cmp
das
push
xor
mov
xor
fsubr
adc
mov
ins
sbb
xor
aaa
sbb
ss
out
std
out
in
mov
cmp
mov
fwait
adc
push
div
(bad)
in
das
icebp
xchg
push
push
lahf
stc
push
jge
mov
add
sub
cld
(bad)
dec
jl
test
vcmpneqps
in
out
ret
lods
lds
sbb
push
stos
cs
jne
jle
push
aam
sbb
and
inc
inc
rcl
aaa
sub
std
hlt
inc
(bad)
lea
pop
aaa
test
inc
pop
cmps
es
add
push
popf
and
sbb
popa
ds
push
retf
cmp
int3
cmp
pop
scas
mov
mov
xchg
popf
xacquire
in
sbb
push
sar
lods
popa
or
jecxz
xor
fisttp
mov
push
xchg
mov
stos
adc
mov
cli
stc
loopne
call
test
jecxz
pop
sub
ret
int3
movs
aaa
cwde
jl
popa
push
fwait
cwde
add
and
jg
jp
xor
imul
test
bound
sbb
jbe
cld
xchg
or
pusha
inc
je
stos
jmp
jge
leave
loope
(bad)
imul
pop
je
push
iret
adc
add
and
and
add
pop
out
sbb
push
popf
stos
fnstsw
mov
popf
mov
lahf
sbb
mov
fidivr
ins
out
xchg
cmps
stos
cli
mov
scas
dec
pop
je
dec
aas
dec
pop
js
test
loope
jle
jp
aam
in
lock
cmp
movs
bound
push
mov
sbb
xchg
ret
pushf
and
inc
ins
in
loopne
mov
sub
in
inc
imul
xchg
nop
cld
repz
sbb
stos
jo
inc
out
xchg
cmps
lods
sub
lahf
dec
lahf
mov
adc
(bad)
aam
sbb
into
aaa
pop
and
push
cmp
jmp
sti
les
and
push
es
icebp
hlt
icebp
popf
jb
jnp
mov
(bad)
in
jnp
les
xor
popf
fimul
sub
pushf
(bad)
mov
mov
mov
sbb
sbb
mov
push
test
mov
pop
dec
addr16
push
cmp
xchg
add
xchg
xchg
inc
pop
mov
mov
xchg
out
sbb
and
repnz
inc
je
jnp
retf
(bad)
sbb
mov
mov
nop
lods
mov
imul
or
in
mov
pop
pusha
cdq
nop
inc
push
inc
dec
pop
fst
test
dec
js
int3
mov
test
xchg
ret
push
jmp
mov
adc
(bad)
sbb
outs
pop
aaa
push
sbb
repz
mov
pusha
rcr
sub
shr
and
jmp
inc
and
pop
mov
pmaddwd
pop
mov
or
arpl
sub
add
(bad)
push
xchg
push
imul
pop
bound
sub
or
adc
enter
push
xlat
js
cmc
cmp
lahf
xchg
xchg
jmp
aam
adc
dec
repnz
mov
and
ret
cmp
add
cmps
movs
cmp
cmp
loope
fucom
fwait
mov
jo
dec
and
test
push
adc
inc
xor
sti
jl
mov
ret
fwait
jns
std
xor
leave
ffree
pop
fist
pmullw
mov
xchg
push
mov
sbb
rcr
dec
adc
inc
jne
jne
jns
adc
dec
dec
jae
ja
jecxz
retf
xchg
inc
imul
sbb
xor
mov
mov
cmp
and
test
loopne
test
mov
(bad)
cdq
(bad)
or
sbb
mov
xor
cmp
lods
ret
out
pop
dec
cli
test
adc
pop
aam
push
aam
jg
and
clc
loop
out
and
popf
in
mov
mov
pop
fisub
cmc
int3
jbe
jne
cmps
pushf
mov
push
xor
ss
cmp
cli
mov
inc
cwde
(bad)
xchg
arpl
sub
add
stos
inc
lods
ja
jno
(bad)
cdq
fs
push
pop
fwait
xor
loope
xchg
xchg
xchg
mov
mov
pop
stos
push
cmc
(bad)
aaa
out
xor
xchg
mov
inc
call
xchg
pop
mov
adc
pop
fiadd
mov
inc
out
mov
sti
in
mov
or
sub
jne
ror
jge
imul
in
cmc
and
pop
scas
loopne
fsubr
popa
mov
pop
out
cmp
js
(bad)
and
cwde
fisub
xlat
jmp
pop
cdq
cld
(bad)
mov
stos
dec
cmc
repz
xrelease
std
xchg
leave
dec
pop
dec
outs
xchg
call
and
aas
std
mov
sub
cmp
lea
dec
clc
jns
or
xchg
add
pop
xchg
fdiv
fsub
adc
and
mov
in
pop
adc
ins
iret
or
(bad)
std
aad
loop
call
rcr
mov
in
xchg
gs
mov
aas
mov
mov
out
in
ret
or
cmp
cmp
mov
jg
aad
jo
aaa
pop
test
mov
retf
call
pushf
push
les
pop
pop
sub
mov
gs
cld
cwde
int3
mov
ds
xchg
stos
gs
std
pcmpeqd
jno
je
in
les
push
out
push
inc
push
gs
mul
popa
adc
add
sbb
jmp
pop
xor
sub
mov
out
jno
sub
and
xchg
jb
mov
popa
imul
aad
xor
aad
pop
clc
dec
in
or
inc
(bad)
inc
push
sub
dec
stos
jp
adc
retf
jns
pop
and
add
mov
cmp
xchg
std
clc
fwait
add
das
in
shr
push
sahf
pop
aaa
ins
mov
ficom
popa
rcl
fisub
fcomi
inc
mov
push
pop
dec
bound
push
mov
lea
cld
int
mov
dec
and
in
lods
mov
cmp
repnz
inc
pushf
sahf
push
mov
(bad)
sbb
data16
pushf
test
sbb
pushf
cli
hlt
jbe
xor
in
lock
and
or
jp
(bad)
ss
cmps
in
addr16
dec
out
out
arpl
fsubr
push
mov
fdiv
retfw
mov
out
mov
push
inc
lods
sub
outs
push
pop
jbe
inc
or
xchg
inc
dec
jne
lods
sti
dec
push
inc
lods
in
dec
inc
loope
mov
xor
(bad)
(bad)
jo
ja
lods
icebp
inc
cmp
mov
mov
cmps
sbb
in
pusha
je
imul
push
adc
cld
adc
in
push
pushf
add
mov
push
cmps
popa
sti
add
popa
or
and
mov
and
popa
(bad)
in
icebp
clc
iret
adc
mov
aaa
sbb
jo
cmovg
fsubr
dec
test
xor
iret
jl
fcomip
mov
loop
sub
dec
sbb
fucomp
stc
pop
outs
pop
imul
or
xor
jmp
loop
ret
lahf
mov
sti
inc
outs
in
popa
add
dec
int3
mov
or
mov
ret
and
jp
and
jecxz
repz
nop
mov
dec
mov
xor
outs
push
inc
(bad)
cdq
sub
iret
add
pop
sbb
or
push
js
aaa
xchg
jne
in
aad
pop
mov
pop
cmp
mov
stc
xor
dec
and
add
xchg
cmp
mov
lahf
jl
sbb
mov
movs
stc
das
pop
mov
xchg
jl
inc
pusha
xor
lods
push
mov
cmp
js
push
lock
adc
dec
inc
mov
or
test
loopne
(bad)
mov
cmp
and
aam
bound
out
ficom
inc
je
ret
mov
jmp
and
leave
ret
ficomp
mov
aas
imul
dec
push
cmp
mov
push
jb
popf
jb
adc
adc
mov
adc
iret
bound
push
jb
fistp
sahf
xor
in
enter
popa
pop
in
inc
cwde
ja
add
imul
rcr
test
jle
or
retf
sbb
or
push
push
xor
mov
(bad)
call
mov
(bad)
lea
cli
mov
mov
and
or
jg
jg
inc
in
add
mov
jl
dec
nop
data16
popa
popa
pop
in
jg
add
adc
cdq
and
push
mul
fistp
pop
inc
mov
hlt
push
rol
dec
ins
xchg
pop
scas
and
xchg
leave
scas
jns
sar
mov
cwde
and
(bad)
aas
adc
sbb
pop
xchg
mov
and
in
scas
cmp
ret
sti
daa
cmc
aam
mov
mov
add
cld
mov
pop
pusha
mov
jbe
sub
cdq
pop
mov
inc
or
call
loope
pop
jmp
cmp
lods
(bad)
and
jle
mov
jp
mov
sub
cmp
fsub
int
js
stc
nop
iret
and
or
mov
sub
cmp
mov
out
cmp
arpl
(bad)
aaa
pop
push
sub
inc
test
adc
mov
dec
sahf
jno
or
fadd
lea
adc
inc
and
and
cmps
in
xchg
adc
mov
repz
loopne
xchg
and
mov
push
enter
movs
fadd
sub
outs
fimul
inc
and
mov
push
ja
adc
lods
pop
rcl
pop
ins
ret
mov
loope
jb
xchg
je
popf
daa
mov
cmp
adc
inc
xor
(bad)
mov
cld
push
clc
mov
pusha
and
rsm
mov
adc
mov
adc
shr
xor
pop
push
int
jno
(bad)
add
dec
dec
mov
inc
int
(bad)
leave
xchg
jl
inc
mov
shl
mov
dec
psllq
jae
xchg
mov
xor
js
jecxz
cdq
nop
cmp
mov
xchg
out
les
sub
mov
dec
test
ins
test
inc
or
add
xor
ja
outs
and
in
add
mov
out
pusha
ret
test
cmc
push
lods
mov
popf
dec
test
adc
cwde
jb
xchg
mov
out
in
jmp
cmc
mov
dec
retf
aad
pop
xor
gs
loop
imul
stos
call
cmp
mov
adc
cmc
hlt
adc
int3
ret
lea
xlat
adc
xchg
inc
fnstcw
adc
xchg
test
in
test
jb
xor
test
gs
jmp
jae
xchg
pop
xor
hlt
pop
push
movs
adc
mov
push
call
or
sub
adc
shl
fstp
mov
or
push
out
jp
les
lahf
cmp
dec
test
fist
aad
hlt
call
clc
xor
sub
jne
(bad)
bound
inc
dec
and
inc
js
inc
jmp
rcr
cmp
leave
inc
mov
or
xor
mov
ret
inc
push
sbb
push
hlt
in
sahf
retf
push
(bad)
in
xchg
pop
sti
mov
bnd
shr
pop
xchg
sar
lea
xlat
inc
push
sbb
pushf
and
rcr
scas
cdq
stos
inc
movs
adc
inc
cmps
xchg
or
test
inc
and
adc
push
popa
cmc
movs
(bad)
pop
jp
lods
pop
fild
cld
mov
mov
retf
cld
je
in
push
loope
push
outs
push
retf
lahf
outs
outs
popf
ja
ror
adc
call
dec
mov
inc
xchg
imul
xor
cmp
mov
push
mov
lds
fdiv
inc
loopne
iret
ss
popf
push
push
loope
and
js
and
and
xchg
mov
iret
ss
cwde
xchg
ja
mov
cld
cmp
dec
xor
push
xchg
test
aad
push
arpl
adc
xorps
lods
mov
and
sub
rol
cmp
scas
dec
xor
pop
test
pop
pop
pop
jbe
cmc
inc
adc
mov
in
dec
jns
pop
mov
aaa
jl
test
stos
(bad)
(bad)
fistp
outs
dec
mov
cmc
cmp
dec
or
jmp
stos
mov
pop
lahf
lods
mov
sub
xchg
shl
sti
pop
fnstcw
sbb
out
enter
push
(bad)
jmp
and
in
out
sbb
sbb
cmps
add
icebp
into
mov
sbb
call
xor
jno
cmps
ja
mov
cmp
cmp
out
inc
mov
imul
lea
push
xor
adc
sbb
fsubr
sub
push
xor
adc
add
or
xor
xchg
pushf
clc
mov
rcr
lods
xor
xchg
jl
scas
cmp
jae
mov
xor
in
mov
cld
pop
add
jl
movs
jnp
push
aaa
cmc
outs
mov
cmp
out
push
mov
and
and
sbb
(bad)
mov
pop
rol
cwde
addr16
(bad)
mov
jb
xchg
out
or
(bad)
out
(bad)
lock
mov
fdiv
lods
stos
pop
lock
popf
jnp
adc
imul
mov
out
dec
adc
cwde
dec
xor
cmp
add
shl
dec
or
jbe
movs
cld
mov
mov
xchg
mov
pop
or
or
shr
int
out
xchg
(bad)
inc
retf
sar
xchg
push
pop
xor
lea
xor
test
jno
out
mov
sti
sbb
mov
jbe
mov
sub
(bad)
das
and
sahf
inc
mov
xor
mov
mov
je
push
sbb
dec
adc
jns
dec
sub
inc
retf
repz
inc
xchg
cmp
or
and
(bad)
js
mov
bound
sub
outs
fcmovnbe
outs
clc
dec
cmp
enter
aas
sbb
(bad)
cs
cmps
addr16
movs
(bad)
mov
dec
test
sbb
cmp
and
fcom
jnp
or
(bad)
icebp
mov
sti
ret
sub
cmp
mov
sahf
adc
stos
adc
push
call
mov
jns
stos
add
(bad)
xchg
mov
loopne
push
daa
pop
mov
mov
sub
push
mov
sub
inc
in
push
int3
ss
push
push
mov
cmps
mov
mov
stos
jnp
push
jmp
pushf
mov
sbb
pop
repnz
sti
aas
push
hlt
add
hlt
push
popf
xchg
mov
adc
or
aad
(bad)
repnz
test
or
mul
pop
xchg
jmp
mov
arpl
aas
xchg
adc
and
leave
imul
call
daa
ret
gs
js
pushf
dec
movs
sti
adc
hlt
cmp
cmc
mov
push
pop
xchg
dec
cli
sbb
lea
xchg
mov
sbb
test
stos
popa
and
xchg
jle
mov
and
jecxz
mov
cmc
xor
xchg
push
les
loop
sbb
push
in
jae
xor
fwait
sbb
jo
sub
sbb
push
sub
push
dec
mov
out
mov
(bad)
dec
mov
sub
lods
retf
mov
and
rcr
ins
lahf
mov
adc
clc
mov
and
and
aam
inc
test
dec
aad
stc
mov
repz
jl
xor
nop
sar
lea
or
out
cmp
leave
in
sbb
cmp
jmp
movs
loop
stc
and
cmp
fwait
lds
pop
out
retf
cwde
jae
sbb
inc
mov
xchg
lahf
sbb
das
movs
shr
imul
jmp
jmp
pop
sbb
dec
pop
cmp
repz
xor
cmp
stos
idiv
ss
test
sub
(bad)
or
add
es
push
fadd
(bad)
inc
jp
icebp
enter
popf
outs
inc
push
mov
leave
jl
add
data16
inc
shrd
fsubr
hlt
adc
cmp
ins
and
adc
inc
scas
add
push
loope
jo
inc
movs
xchg
cmps
arpl
xchg
xchg
enter
stos
pop
add
test
add
rol
(bad)
aam
xchg
sbb
inc
rcl
loopne
and
ret
add
adc
add
lods
in
ds
test
mov
jmp
sub
test
pop
push
aad
and
cmp
in
mov
sbb
add
jmp
fwait
aam
ja
jmp
and
push
sar
mov
ins
fnstcw
mov
fstp
nop
xor
aad
cwde
mov
sub
push
pop
sbb
pop
ins
adc
xchg
push
jmp
jo
mov
inc
mov
cld
mov
mov
mov
cmp
cmc
pushf
or
in
stos
repz
not
pop
pop
xchg
(bad)
push
sub
push
mov
stos
mov
cld
ja
dec
mov
sbb
and
add
inc
mov
lods
push
adc
cmp
sub
cmc
je
push
daa
cmp
das
mov
je
inc
lock
int
test
call
das
push
in
mov
ja
cmp
cmp
jb
jno
sub
out
and
xchg
xchg
retf
mov
cmp
out
push
mov
pop
out
in
dec
adc
inc
sub
mov
ds
or
(bad)
rol
int3
xchg
dec
rol
and
push
mov
add
jb
movs
jbe
addr16
(bad)
retf
dec
(bad)
mov
fsubr
cmp
and
sbb
jb
mov
std
sbb
js
(bad)
fdivr
push
jne
inc
inc
jg
jmp
sti
aaa
add
jl
push
inc
addr16
(bad)
mov
fwait
hlt
fs
pusha
or
xor
mov
mov
rcr
and
fiadd
js
mov
(bad)
imul
cmp
loop
xchg
bound
xchg
scas
mov
nop
sub
cmp
adc
xchg
cwde
ins
jmp
inc
adc
hlt
adc
rol
jb
les
popf
dec
int3
dec
mov
mov
(bad)
jge
pop
(bad)
aam
xor
outs
les
xchg
push
or
je
ins
dec
in
or
add
xchg
cmp
clc
mov
in
idiv
dec
or
and
jmp
out
scas
inc
pop
fiadd
cmp
fcom
imul
stos
sub
cmc
sub
or
enter
sub
push
sub
ror
rcl
lahf
rcl
jecxz
inc
and
cmps
pop
stc
fwait
dec
xchg
xlat
enter
pusha
je
inc
pop
fs
and
xor
jg
pop
aaa
sub
dec
xlat
addr16
iret
mov
push
xor
cmp
pop
in
test
dec
out
mov
jne
jae
sbb
pop
mov
jl
push
mov
cmps
pop
push
adc
inc
push
(bad)
cld
(bad)
nop
xor
aam
push
mov
cmc
or
in
mov
out
mov
fld
add
push
mov
jle
imul
out
fstp
cld
lock
sbb
mov
add
sar
ds
pop
mov
out
lea
imul
scas
dec
mov
movs
test
dec
stc
cmp
adc
xchg
retf
out
(bad)
jns
not
jmp
xchg
mov
mov
mov
into
dec
in
test
mov
xor
shl
push
movs
imul
fsubr
inc
test
xchg
imul
dec
scas
push
in
rol
mov
or
call
inc
fwait
cmp
push
pop
push
cmp
push
xor
iret
fwait
pop
daa
pop
ret
mov
das
sbb
add
mov
in
mov
div
xchg
inc
mov
inc
ret
mov
retf
jmp
xchg
pop
nop
mov
xchg
sub
jo
aam
push
pop
push
push
and
cs
jb
scas
push
push
mov
iret
outs
push
xchg
jo
ror
cmp
push
mov
xor
add
mov
popa
rcr
cli
jnp
rcr
jp
or
xchg
or
inc
data16
xor
mov
inc
sub
pop
add
neg
jno
cmp
ds
and
cmp
cli
dec
test
aam
inc
popf
mov
icebp
push
repnz
xchg
cmps
inc
add
add
cli
cmp
fmul
pop
call
arpl
call
push
pop
dec
cdq
lods
push
add
sub
lods
data16
das
and
xchg
fistp
in
cmp
add
mov
xor
out
bound
mov
inc
sub
scas
(bad)
push
push
jp
scas
add
popa
(bad)
sbb
leave
out
jmp
xchg
inc
mov
or
stc
xchg
repz
inc
push
retf
push
sbb
(bad)
retf
push
sub
mov
ror
ss
sub
cli
cmp
mov
and
ret
fisubr
or
or
lahf
stos
inc
(bad)
jmp
xchg
mov
ret
(bad)
stos
ds
pop
sbb
jo
sub
sub
pop
pop
sub
jbe
xchg
imul
lods
cmc
xchg
pushf
ins
mov
aas
adc
jg
bound
fstp
in
pop
aam
mov
mov
xor
sbb
push
inc
or
xor
mov
xchg
sbb
jbe
dec
jne
adc
daa
les
sbb
mov
mov
xor
and
movs
clc
test
sub
cmps
aas
xchg
mov
jo
push
dec
in
and
inc
sti
stos
jmp
mov
in
sub
inc
imul
add
xor
movs
cs
jnp
arpl
add
or
mov
adc
mov
adc
jno
jmp
aad
and
mov
sub
std
cld
push
jmp
pusha
call
cmp
movs
test
lods
in
add
ret
mov
xchg
xchg
jbe
out
or
inc
movs
(bad)
popf
jl
(bad)
cs
js
scas
daa
out
movs
and
mov
movs
addr16
ins
outs
xchg
jne
xchg
call
add
shl
inc
jo
inc
xchg
fsubr
cld
inc
add
bound
push
sbb
je
bswap
stos
or
pop
lds
fild
jne
dec
dec
pushf
push
popf
ret
xchg
cwde
fisttp
push
dec
inc
sbb
das
shr
icebp
lock
adc
jle
xor
and
jb
sub
inc
rcl
sub
jae
repnz
sub
imul
push
and
ror
mov
inc
jmp
inc
jl
dec
cli
scas
in
imul
dec
pop
sbb
mov
stc
and
adc
xlat
jecxz
cmp
add
adc
cmp
sbb
push
out
jne
call
mov
(bad)
xor
aam
repnz
int
in
pop
scas
or
jns
mov
cmp
cdq
mov
imul
sub
arpl
lea
mov
lock
inc
xchg
loopne
in
mov
xchg
or
push
popf
sar
ins
and
out
sub
clc
es
and
outs
test
sub
add
cmovg
pop
mov
dec
imul
pop
inc
jle
xor
push
push
xor
sbb
je
inc
jo
jbe
addr16
icebp
dec
push
jp
inc
cmp
repnz
and
sub
inc
cmps
test
loopne
sbb
movs
loopne
into
push
test
stos
pusha
push
mov
daa
pop
cdq
jo
inc
jle
sbb
daa
mov
jp
in
loope
bound
hlt
sbb
ins
shl
sub
mov
cmps
imul
scas
mov
jmp
sub
push
inc
ja
jp
movs
xor
dec
out
mov
or
push
ficom
inc
sti
out
jmp
fstp
mov
test
xor
bound
hlt
mov
push
mov
dec
fs
xor
pop
cmps
or
dec
cmc
movs
retf
jmp
push
fs
iret
ins
test
sti
mov
leave
les
lahf
push
jbe
or
cmp
lods
xor
push
outs
xor
test
adc
test
fsubr
mov
or
dec
pop
lods
imul
adc
lahf
adc
pop
and
loopne
(bad)
jge
cli
hlt
out
mov
inc
mov
enter
adc
jle
pop
call
and
sbb
pushf
mov
lock
outs
aam
dec
outs
or
add
in
or
and
dec
mov
jnp
clc
rcpps
fistp
mov
pop
test
xor
hlt
adc
movs
shl
dec
bound
adc
jmp
nop
inc
xchg
cmp
dec
cmps
lahf
cmps
repz
outs
test
es
adc
repnz
rcr
and
cli
add
out
(bad)
popf
mov
jle
sub
ins
xor
das
mov
popf
scas
and
test
cld
push
aas
xor
push
jo
cli
jmp
(bad)
sbb
xchg
mov
cmp
fwait
mov
es
mov
add
lock
arpl
sbb
sbb
movs
or
xchg
pop
test
call
add
and
outs
pop
jle
xchg
rcr
or
push
push
jmp
out
jb
inc
dec
js
jp
lods
aam
rcl
mov
add
inc
mov
fild
mov
inc
or
add
xchg
jo
cmp
jns
es
cld
outs
mov
and
adc
jo
mov
mov
adc
rcl
cli
pusha
pop
pop
pop
retf
mov
adc
iret
cld
xor
cwde
push
lods
inc
loop
xchg
cmp
xchg
mov
cmp
bound
push
inc
mov
repnz
in
jmp
add
outs
pop
lock
push
dec
ins
dec
loope
mov
shr
into
sbb
xchg
xchg
jp
jae
fwait
nop
cwde
in
push
loope
or
xchg
stos
les
pop
lock
out
(bad)
repz
pop
call
call
pop
mov
dec
outs
lock
pop
out
gs
xchg
and
je
mov
push
(bad)
mov
repz
cs
fidiv
dec
and
push
push
repz
ds
fwait
and
loopne
add
jecxz
mov
daa
ss
xor
cwde
fwait
imul
xchg
xchg
sub
jmp
sub
add
mov
dec
jno
xor
mov
and
mov
push
sub
clc
les
cwde
xor
enter
scas
sub
pop
jl
ins
rcl
push
shr
or
mov
gs
mov
xchg
ret
fmul
retf
mov
retf
das
mov
push
fisub
xchg
push
sbb
jae
push
add
scas
mov
test
jne
jg
aam
dec
(bad)
adc
jns
int3
pop
mov
mov
inc
bound
add
out
or
jl
addr16
inc
lock
and
inc
mov
out
push
cmp
xchg
scas
aaa
push
mov
add
xlat
mov
cmps
mov
fwait
mov
adc
ss
mov
in
out
mov
(bad)
xchg
rcl
fbstp
(bad)
movs
ins
dec
bsr
push
loopne
test
inc
mov
lock
mov
lea
popf
test
mov
sub
fsubr
xchg
inc
lea
repnz
jmp
jb
(bad)
push
jbe
test
fs
dec
add
cmp
push
pop
aas
adc
pop
cld
js
ret
or
pop
sub
in
test
div
shl
sbb
pop
call
xchg
jnp
aam
jae
cmp
cmc
shl
jne
jmp
mov
lock
cdq
jo
outs
repnz
fbstp
sub
push
mov
in
fst
xchg
test
push
out
jnp
cmps
mov
(bad)
retf
ins
fild
mov
scas
imul
sahf
push
mov
lahf
push
ins
mov
xchg
mov
inc
mov
cdq
sahf
loope
dec
nop
loop
push
repz
daa
cwde
and
test
and
jg
xchg
sub
dec
div
cli
sbb
jge
aad
dec
stc
mov
push
rcl
mov
xchg
mov
lock
loope
scas
pop
inc
xor
mov
arpl
sub
push
(bad)
ds
pop
sub
jmp
pop
cld
xchg
and
call
mov
repz
rol
aaa
or
iret
popf
jmp
mov
push
jo
pushf
fst
pusha
inc
es
nop
cdq
bndldx
inc
xchg
(bad)
sbb
dec
adc
push
arpl
push
add
and
popf
fstp
in
sbb
fistp
ret
xchg
pop
lds
dec
add
cli
cmps
iret
ss
fldenv
test
ficom
jge
mov
out
pop
test
imul
ja
arpl
pusha
gs
inc
inc
and
sahf
adc
repz
xor
rol
sub
jecxz
fimul
in
rcr
fst
lods
mov
test
imul
add
cmp
xor
les
mov
sub
outs
sub
loope
xor
mov
mov
and
stos
mov
(bad)
or
(bad)
lea
aad
jecxz
jnp
push
ret
cdq
paddb
pop
jmp
retf
add
mov
adc
jno
and
push
call
cmp
mov
test
movs
adc
cmps
cmp
cmps
add
loop
dec
push
mov
pop
push
ja
xchg
push
fcom
lock
adc
loopne
cmp
xor
adc
fsubr
add
mov
rol
inc
lahf
or
and
inc
shl
dec
or
iret
addr16
dec
ja
sti
adc
in
mov
popa
xlat
mov
js
mov
cs
mov
cmc
aad
int3
stc
(bad)
sub
ret
sub
jl
(bad)
iret
pop
or
nop
and
jl
das
mov
pop
mov
popf
or
mov
int3
jge
inc
hlt
sbb
pop
aam
les
pop
js
out
popf
adc
jb
jns
jp
sub
retf
ins
out
into
(bad)
cmp
jge
shl
mov
inc
dec
push
fild
add
imul
xchg
add
xor
bound
jmp
add
xor
xchg
mov
cwde
inc
sub
sbb
jno
(bad)
sub
scas
sbb
cmc
cld
fcmovu
fsubr
mov
cmp
repz
add
xlat
sti
mov
mov
into
dec
imul
in
jmp
sbb
mov
icebp
jle
das
inc
(bad)
mov
mov
lds
sub
fisttp
enter
push
fwait
shl
or
fstp
stos
imul
sub
popf
std
sub
xchg
mov
mov
pusha
add
fdivr
cmps
xlat
cmp
(bad)
xlat
push
sbb
or
sahf
mov
jmp
pop
or
xchg
add
xchg
enter
sub
std
ss
mov
dec
lds
add
lahf
jae
in
psrlq
xor
jmp
xacquire
xchg
rol
xor
xchg
xchg
dec
mov
and
std
inc
neg
push
mov
movs
lahf
ret
sub
xchg
push
and
pop
cmp
ds
push
xlat
sti
call
mov
popa
hlt
dec
xchg
inc
xchg
sti
mov
add
(bad)
or
pusha
lock
mov
inc
out
aaa
inc
cdq
fcomp
cmps
cmp
mov
push
cmp
xchg
sbb
push
jle
push
fcom
dec
dec
push
add
mov
xor
jmp
lahf
test
pusha
cld
out
lahf
add
or
pusha
jmp
jmp
sbb
push
lea
xchg
sbb
nop
jo
repz
lahf
xchg
and
data16
or
shl
(bad)
outs
dec
out
retf
cmc
ret
daa
cwde
rcl
push
jno
cmp
mov
mov
cmp
push
inc
or
or
and
or
cmps
and
test
cld
test
in
clc
movs
cs
dec
push
lods
push
in
push
xchg
stos
aam
jne
fsubr
enter
xchg
imul
fwait
daa
out
in
jle
std
lods
(bad)
loop
sbb
inc
fsub
push
aaa
arpl
ss
xchg
test
jae
and
mov
jo
adc
and
jno
rol
sbb
cwde
adc
jle
lock
mov
pop
ret
fidivr
adc
es
jne
mov
jbe
out
dec
mov
outs
test
test
imul
inc
dec
(bad)
rol
ret
sub
pop
repz
retf
scas
jg
add
cmp
clc
mov
pop
add
cmps
arpl
stos
lea
inc
mov
pop
mov
cmp
xchg
lahf
fmul
call
ret
out
xchg
outs
test
xor
push
sub
jo
push
fdiv
scas
int
sub
(bad)
call
pop
or
js
dec
jo
popf
xor
cli
nop
in
cmp
ret
pop
cmp
xor
dec
hlt
dec
idiv
add
popf
bound
data16
dec
stos
mov
not
(bad)
cmps
jmp
in
loopne
xor
xchg
sub
mov
int
xchg
mov
(bad)
mov
loop
cld
test
cs
sbb
jne
xchg
loopne
out
xchg
xchg
inc
adc
ins
popa
je
shl
pop
stos
bound
xor
js
and
mov
dec
mov
sub
dec
mov
test
retf
stos
in
jge
cmp
xchg
jmp
dec
cmc
es
test
fadd
pop
xor
addr16
mov
jne
dec
adc
jmp
in
fcmovbe
imul
jl
jle
imul
jbe
cld
add
aam
(bad)
call
pop
push
push
in
rol
std
sbb
pop
sbb
fiadd
es
sahf
push
jmp
scas
dec
pop
js
imul
mov
neg
pop
icebp
mov
pop
pop
int3
shr
addr16
arpl
cmp
mov
xor
fdiv
int
je
inc
addr16
ins
gs
pushf
in
push
leave
sbb
cmps
pop
xchg
fiadd
stos
jle
inc
pop
jb
fs
(bad)
pop
pop
cmps
stc
sar
stos
xchg
mov
pushf
loopne
imul
(bad)
into
out
int
jmp
mov
mov
in
cmp
cmp
arpl
not
xor
in
shl
jbe
push
mov
mov
mov
inc
ins
and
mov
popa
(bad)
fcomp
pop
call
daa
mov
sub
sahf
and
inc
test
jne
inc
inc
mov
sbb
repnz
mov
in
je
ud1
pop
cdq
jmp
repz
cpuid
fimul
es
fs
xchg
ins
cmp
inc
leave
ret
xor
sbb
test
sar
pop
lds
mov
cmp
push
mov
jb
xchg
jmp
ss
cli
mov
add
mov
jp
sbb
out
cmps
mov
mov
ss
ficom
jmp
pop
mov
pop
call
(bad)
mov
loope
nop
(bad)
mov
retf
(bad)
(bad)
mov
xchg
clc
out
sbb
aas
jg
jmp
test
ds
pop
sub
mov
add
out
mov
cmp
mov
cmc
mov
pop
mov
shl
cwde
shl
fimul
sbb
xor
adc
xor
jo
gs
icebp
xchg
cmps
add
mov
cli
pushf
jmp
add
push
iret
cdq
pop
cli
xchg
and
mov
dec
movs
inc
cmps
jb
push
iret
mov
ret
or
imul
pop
xor
inc
fs
imul
dec
rol
xchg
cmps
mov
lods
jecxz
stos
push
repnz
adc
arpl
cmp
int
cmp
stos
add
mov
sbb
repnz
add
cmp
lahf
js
push
jns
idiv
mov
imul
sbb
inc
jge
mov
enter
adc
lahf
mov
loop
pop
xor
pop
mov
jecxz
fisubr
(bad)
out
pop
imul
test
mov
bound
jb
cwde
inc
das
pop
mov
xor
arpl
(bad)
mov
or
out
sbb
mov
xchg
test
fist
push
push
aas
sbb
sbb
xlat
imul
push
xchg
and
retf
push
mov
xchg
js
mov
scas
sub
scas
jp
fwait
in
test
xchg
mov
jmp
push
out
and
cmp
call
or
xor
fistp
aaa
ret
xchg
sub
pop
out
mov
ret
inc
lahf
lods
push
in
outs
pop
pop
clc
push
dec
cmp
in
sbb
push
mov
hlt
les
mov
cmc
stos
mov
xchg
aam
xchg
fst
fisttp
jmp
cdq
jo
(bad)
ror
rcr
sti
pop
int3
cmps
fcomp
js
mov
xchg
ins
mov
pop
pusha
mov
cmc
(bad)
xor
mul
fmul
push
lahf
mov
mov
inc
xchg
psubsb
retf
push
pushf
mov
add
xchg
clc
out
xchg
nop
loopne
push
push
adc
mov
ds
iret
xchg
addr16
cmps
sar
ret
ins
dec
cdq
mov
pop
repz
jge
movs
mov
jl
or
sbb
dec
adc
jmp
movs
sub
(bad)
es
push
fidivr
mov
mov
jg
ja
or
adc
and
aam
inc
xor
xor
jmp
sbb
add
push
hlt
popf
mov
movs
and
or
out
xchg
xor
push
out
(bad)
push
fidivr
mov
push
outs
mov
mov
adc
in
outs
pushf
ds
out
les
push
(bad)
mov
cmp
lahf
in
out
jl
rol
add
in
xchg
daa
pop
out
test
cmp
xor
out
das
ja
cdq
cmps
mov
out
push
adc
loop
jae
test
int
clc
hlt
cmp
mov
inc
mov
lahf
jns
gs
xor
in
adc
outs
inc
mul
sahf
jle
fidiv
dec
push
and
shl
jmp
jo
mov
add
push
ds
mov
out
mul
jbe
inc
or
mov
mov
das
movs
ins
sahf
icebp
adc
cmp
lock
lea
cmp
jne
ins
mov
leave
and
push
xchg
cmps
bound
push
cwde
arpl
and
(bad)
loop
sub
inc
sub
adc
mov
mov
xlat
cmp
and
(bad)
into
pushf
sbb
fidivr
ror
and
fwait
push
fadd
adc
mov
std
xchg
sbb
push
push
bound
(bad)
stos
fidivr
cdq
sbb
xor
cli
loopne
das
pop
mov
push
inc
xor
jnp
jmp
aad
inc
ret
ret
sub
lock
pop
cmp
lods
fisttp
add
push
or
pop
mul
inc
popf
aaa
sbb
jo
dec
stos
das
push
adc
shl
push
jle
and
repnz
scas
lahf
and
jp
shl
cld
xor
dec
shr
shl
push
and
cmps
das
sti
lahf
sahf
jp
call
fimul
fist
je
cmps
adc
js
mov
adc
scas
outs
rcr
sbb
add
in
test
jns
jnp
hlt
adc
mov
ins
xchg
sahf
xor
retf
hlt
cmp
out
or
or
cwde
push
in
cmp
push
dec
add
push
(bad)
dec
inc
into
aaa
sbb
add
into
sbb
push
cwde
inc
arpl
pop
add
ficom
xor
fnstenv
fwait
repnz
xchg
imul
rcr
aas
pop
sbb
pop
xor
add
pop
xchg
xor
shl
mov
xchg
ret
shl
adc
stos
inc
add
dec
call
mov
push
dec
lds
push
outs
and
(bad)
and
and
adc
xchg
push
retf
pop
mov
mov
dec
sbb
pop
call
mov
dec
mov
cmp
xchg
js
adc
sub
xchg
jmp
rol
aad
inc
xchg
xor
(bad)
cmp
cld
add
loope
rcr
push
lods
sub
movs
pop
cmp
outs
sub
mov
inc
sbb
pop
cmc
into
stc
mov
inc
sub
pop
sbb
retf
test
pop
arpl
retf
cs
pop
and
push
xchg
test
and
(bad)
inc
add
fcomp
add
ret
jnp
hlt
xlat
dec
fsubr
inc
inc
pop
repnz
movs
cmp
nop
dec
sbb
xchg
imul
arpl
call
push
inc
je
dec
pop
mov
loope
cmp
and
out
cmp
pop
push
cmp
sar
iret
je
popa
pop
jmp
pop
push
in
shr
retf
les
rcl
add
clc
jge
les
test
(bad)
cmp
retf
loope
outs
test
cmp
adc
mov
ret
out
(bad)
mov
jbe
outs
iret
jmp
in
mov
loop
es
push
rol
mov
mov
add
pop
ret
mov
ficom
mov
push
add
xchg
xchg
sbb
fnstsw
cmps
(bad)
push
mov
fcom
imul
nop
stos
es
cmp
jnp
jp
lds
adc
les
xchg
adc
mov
mov
sti
dec
cmp
xchg
hlt
mov
adc
jg
mov
leave
jp
out
inc
and
push
test
add
xor
dec
xor
sahf
arpl
stc
xor
jb
xchg
sbb
adc
bswap
dec
inc
aaa
call
jle
cwde
mov
sub
cmps
jmp
sahf
hlt
jne
mov
or
pop
loope
push
or
sub
bound
fs
aas
sbb
pop
add
call
inc
ficomp
sbb
enter
mov
mov
in
add
inc
loopne
sub
loopne
rcr
je
pop
ret
xchg
aad
(bad)
mov
js
and
sub
fbstp
cmp
into
mov
mov
xor
xchg
jnp
cmp
cmp
jbe
or
lock
or
lea
hlt
nop
push
es
neg
mov
inc
idiv
arpl
mov
push
out
push
mov
sbb
push
gs
mov
inc
or
ins
xchg
sub
inc
pop
fstp
ret
mov
push
cmp
mov
jno
xor
add
and
jmp
xor
xchg
dec
pop
jo
retf
or
push
scas
dec
fimul
shl
xchg
mov
and
fsub
mov
push
leave
fdivr
test
mov
cmp
stc
fdivp
mov
imul
(bad)
dec
mov
mov
and
mov
ret
cs
fadd
call
mov
mov
aas
and
adc
ret
not
in
jne
mov
gs
daa
pslld
not
add
lahf
retf
sbb
div
xchg
and
mov
inc
push
std
in
mov
cvttps2pi
push
sub
jno
sbb
jmp
repz
jo
adc
lods
enter
pop
ret
mov
push
push
jmp
add
sbb
ins
inc
outs
adc
rcl
xor
(bad)
ficomp
out
push
imul
add
lock
sub
iret
imul
js
adc
repz
lds
inc
fs
fs
es
loope
fwait
add
(bad)
sub
lea
add
iret
cld
dec
adc
and
(bad)
sti
adc
and
imul
xchg
arpl
sub
sub
xor
xchg
xchg
js
or
mov
out
dec
cmp
mov
add
push
and
inc
daa
out
test
test
dec
jne
cmp
or
cmc
repz
int
data16
ins
jnp
cld
dec
mov
cmp
loopne
adc
imul
push
stos
stc
imul
das
mov
sub
and
push
add
ficomp
or
xor
je
mov
ins
mov
add
fcomp
jl
outs
fcmovnu
inc
cmp
into
xchg
or
dec
lahf
mov
add
fcmovne
test
(bad)
mov
sbb
fild
inc
inc
jle
cmp
dec
cdq
push
cmp
popa
mov
es
pop
xchg
aaa
retf
sub
sbb
xchg
add
sahf
xchg
sub
imul
pushf
cli
test
mov
sub
sbb
cmps
jp
lahf
adc
cs
nop
aaa
shr
or
in
mov
(bad)
repnz
jmp
adc
xor
stos
pusha
xchg
fbld
dec
pop
push
add
dec
gs
mov
cmp
sbb
ss
xor
retf
pop
lahf
mov
mov
jecxz
mov
and
(bad)
mov
retf
in
in
dec
mov
or
loope
cmp
iret
call
jmp
mov
pop
sti
je
pop
call
add
icebp
add
or
add
xchg
jb
bswap
cs
and
mov
mov
loopne
sahf
dec
add
jl
sub
xor
pop
repnz
out
repz
cmp
push
mul
mov
mov
js
ficomp
lods
jns
ja
push
mov
aaa
js
(bad)
lock
retf
dec
sub
jb
sub
inc
xor
dec
(bad)
retf
addr16
imul
cs
pusha
xchg
pop
mov
cwde
cmps
mov
xor
gs
popf
xchg
mov
mov
pop
sbb
pop
in
push
and
repz
sbb
(bad)
out
sbb
jmp
xchg
xor
adc
or
cmp
jnp
rcr
dec
repz
mov
rol
xchg
jg
stc
aaa
scas
shl
fild
xchg
adc
mov
sahf
cwde
cmp
imul
sbb
mov
push
pop
mov
or
cli
adc
pop
gs
xchg
dec
stos
iret
mov
adc
xor
pop
fcomi
popf
imul
xor
jge
mov
pusha
test
cmc
mul
cmc
div
cmp
inc
les
pop
je
loope
sbb
addr16
adc
or
idiv
pop
mov
mov
push
js
sub
frstor
test
adc
inc
icebp
(bad)
mov
pop
and
dec
cmps
test
sbb
sbb
xor
outs
(bad)
push
pop
add
inc
std
int3
add
rcl
jo
lahf
add
fs
ins
out
adc
aaa
stos
sbb
stc
cli
cwde
mov
je
repz
arpl
push
lock
sub
setns
sub
stos
jg
imul
mov
rcr
aam
push
mov
mov
(bad)
jmp
mov
dec
out
fild
ja
punpcklwd
fld
mov
adc
jge
(bad)
dec
xchg
lahf
mov
loop
cmp
cdq
cmps
jp
jb
iret
pop
or
sbb
icebp
imul
loope
xor
mov
mov
pop
sub
test
jmp
aaa
scas
sbb
ins
xchg
or
mov
mov
fs
int3
loopne
into
dec
enter
imul
xor
cmps
cmc
dec
test
mov
xchg
popf
mov
sar
ret
xor
pushf
and
fldcw
mov
jmp
adc
aaa
cmp
xchg
xor
shl
(bad)
fmul
add
in
mov
mov
add
or
mov
imul
or
push
mov
outs
sar
jle
sbb
jbe
xchg
and
jp
addr16
pop
jnp
fcomp
scas
push
mov
mov
fstp
ror
pop
loopne
jmp
inc
push
sbb
test
sbb
scas
je
push
stc
jg
mov
cwde
lds
push
movs
add
xor
mov
lds
(bad)
mov
mov
xchg
imul
popf
xchg
sbb
jmp
inc
cmps
in
add
fs
pop
mov
iret
mov
mov
push
add
mov
dec
out
jp
pop
in
retf
xor
mov
mov
ds
ja
jmp
adc
pushf
mov
add
popa
push
sti
loope
js
sub
push
and
(bad)
sbb
mov
mov
ret
dec
push
xor
inc
dec
pop
push
jl
outs
cs
fdivr
test
inc
sbb
das
xchg
dec
mov
push
mov
retf
sbb
mov
ja
xor
xor
mov
loopne
lods
pop
jmp
aas
aad
sub
hlt
cmp
xchg
mov
inc
or
je
and
sti
jno
cld
dec
mov
pop
cmp
cmp
push
in
or
(bad)
adc
ds
xor
jmp
cmps
and
mov
push
xchg
leave
mov
in
mov
test
push
aad
aam
xchg
movs
popf
ja
cli
pushf
fwait
xchg
gs
data16
sub
(bad)
jns
neg
fnstenv
mov
scas
jbe
aaa
add
xor
jb
mov
jge
or
leave
icebp
ret
mov
jle
xchg
lds
cmp
jbe
sbb
(bad)
lods
pop
cmp
test
(bad)
sub
gs
or
push
xor
je
retf
imul
xor
jmp
shl
mov
jge
sub
and
mov
xchg
cli
push
call
adc
and
push
add
adc
lock
mov
cmps
movs
fwait
sub
jl
inc
and
icebp
pop
lahf
icebp
rol
ins
call
outs
sub
or
mov
ret
sub
rcl
gs
out
loope
outs
inc
aam
or
jnp
sub
ret
and
and
and
push
fdivp
pop
rol
hlt
cmp
gs
bound
mov
bound
mov
mov
jp
fcomp
mov
sub
out
jmp
xlat
cmp
jb
(bad)
outs
enter
push
outs
fwait
sbb
retf
icebp
jge
shr
aaa
inc
daa
aaa
int3
or
inc
cmp
gs
retf
xor
sub
fimul
cmc
dec
mov
ss
add
loop
push
sbb
inc
jge
loopne
xor
add
nop
stc
pop
test
push
lahf
jne
ret
arpl
mov
cmp
push
scas
sub
jl
enter
aaa
xor
dec
das
movs
in
iret
ret
call
mov
sbb
dec
xor
retf
test
or
jae
shr
xor
nop
std
pop
out
and
out
das
icebp
enter
and
pop
ss
xchg
hlt
xchg
ds
inc
out
ss
ss
cmp
pop
pop
pop
call
pushf
sub
nop
or
out
movs
add
data16
xor
idiv
adc
xor
jbe
(bad)
xchg
mov
and
or
dec
(bad)
xor
jo
jno
repz
in
xor
outs
sub
mov
jns
(bad)
popf
jmp
xchg
push
repnz
sub
into
fistp
je
in
or
jne
push
loop
imul
adc
sub
out
push
popf
lock
push
out
inc
adc
push
(bad)
or
sub
mov
pop
(bad)
mov
inc
cmp
in
aas
mov
and
pop
inc
outs
mov
push
pop
mov
mov
(bad)
jmp
rol
jmp
xchg
int3
xchg
pop
les
sti
add
push
daa
xor
xor
xchg
loop
ja
mov
dec
mov
adc
cmps
dec
in
xchg
imul
aaa
jnp
inc
pop
inc
and
mov
nop
(bad)
(bad)
rol
aad
imul
xor
jmp
shr
or
sub
push
add
fwait
hlt
jnp
sub
fstp
fwait
rcl
out
inc
inc
loopne
movntq
out
xor
xchg
dec
and
in
in
sub
sahf
sub
in
xchg
pop
add
div
inc
dec
push
sub
shr
cmp
lahf
inc
sbb
jne
xchg
or
out
pop
sub
lds
repnz
scas
sbb
add
xor
ja
cmp
sub
and
cli
push
inc
sahf
ja
jle
add
sti
outs
(bad)
xchg
lods
mov
inc
cmp
(bad)
jne
ror
or
aas
pop
cli
adc
mov
pop
cs
jbe
xor
ficomp
xchg
lahf
add
jae
mov
sub
sti
cld
inc
mov
scas
cld
popf
call
cmc
sbb
fs
adc
imul
mov
rcr
cmp
in
mov
sar
das
fstp
mov
lods
(bad)
out
mov
pushf
scas
fs
stos
mov
das
pushf
cld
dec
les
sub
loope
cmp
sub
fsubr
lahf
ss
sar
not
pushf
mov
imul
xchg
(bad)
dec
inc
mov
out
sbb
pop
add
in
jl
call
add
mov
sub
cmp
cdq
fld
jb
xor
ins
xchg
jmp
outs
mov
jg
pop
pusha
jmp
shl
stos
dec
and
aad
lea
pop
inc
popa
cs
and
xchg
dec
adc
xchg
jbe
jnp
scas
xor
push
adc
js
mov
aaa
inc
aas
enter
pop
scas
add
(bad)
popa
and
push
sub
outs
and
(bad)
fidiv
jl
push
push
mov
inc
jge
scas
outs
xchg
mov
jl
dec
mov
mov
jle
test
cs
les
test
pop
sub
mov
imul
inc
add
cdq
xlat
and
xor
push
xor
cmp
push
lahf
popa
mov
into
ins
in
xchg
cwde
pop
lods
cmp
or
pop
rcl
adc
in
shl
imul
ins
and
ficom
daa
stos
sub
arpl
mov
push
ror
cmps
adc
adc
or
and
mov
or
loopne
jne
mov
xor
xor
xchg
sub
stos
push
xchg
sbb
add
sbb
jecxz
arpl
nop
fwait
imul
gs
retf
(bad)
arpl
mov
outs
cld
xchg
out
mov
adc
dec
scas
inc
xchg
jmp
pop
xor
xlat
mov
mov
(bad)
and
push
inc
xchg
jl
enter
sbb
push
(bad)
repz
cmp
movs
fcomp
loopne
push
sahf
or
fcom
addr16
js
and
add
popf
pop
add
int3
fst
push
mov
jg
shl
jp
cmps
cld
mov
popaw
push
pop
add
je
jo
in
cmp
pop
mov
mov
mov
add
(bad)
loope
add
inc
(bad)
xor
dec
mov
mov
sub
dec
mov
inc
cmp
sbb
gs
dec
cmps
cld
push
jo
mov
mov
out
jg
fprem
call
adc
dec
call
xchg
pop
std
add
mov
dec
push
popa
icebp
push
adc
xchg
je
cli
pop
push
sbb
sahf
push
dec
cmps
jne
fild
setno
daa
or
or
mov
jle
xchg
xchg
fmul
cmps
cmpps
sti
shl
mov
(bad)
adc
imul
mov
add
(bad)
mov
and
imul
xchg
inc
push
fnstenv
jmp
mov
les
cli
imul
shr
jmp
(bad)
cmp
ret
mov
add
sahf
shl
push
test
aam
scas
sub
pop
sub
test
std
retf
pop
retf
push
dec
std
ds
mov
lods
retf
xchg
pop
std
aaa
pop
test
(bad)
nop
jp
popa
iret
arpl
aam
out
jnp
mov
jb
ret
in
xor
dec
cmp
mov
sub
pop
mov
xchg
stc
fs
mov
lock
ins
fisubr
icebp
(bad)
cmps
xchg
mov
pusha
in
daa
imul
jge
ficom
or
les
cmc
fnsave
sbb
mov
retf
fldcw
mov
test
sub
imul
dec
add
and
fsub
call
jge
pusha
cs
popa
pusha
fidivr
daa
xor
cmps
fidivr
mov
and
fs
sbb
cwde
fdivr
sti
(bad)
repnz
mov
fwait
popf
add
div
dec
sbb
les
je
call
vmovaps
mov
lahf
jl
(bad)
stc
and
dec
mov
(bad)
dec
sub
dec
cld
inc
mov
push
add
retf
inc
push
jo
add
jp
sbb
xor
push
div
sbb
push
or
cmp
mov
push
push
mov
mov
mov
xor
retf
inc
mul
outs
addr16
jbe
dec
aad
or
adc
cmps
xchg
sbb
pusha
fmul
fs
jp
jo
sbb
scas
push
in
lock
ja
push
cmp
jge
mov
adc
enter
loope
mov
push
sub
inc
cmc
loop
scas
enter
sahf
mov
add
sub
sbb
push
cld
cmc
xor
addr16
cmp
adc
loopne
lock
retf
fcomp
cmps
sub
fild
mov
scas
and
pop
call
sbb
scas
add
and
(bad)
idiv
xor
not
dec
mov
movs
stos
je
das
in
into
fwait
inc
mov
adc
jg
shr
fwait
lods
stc
cs
mov
cmc
aad
mov
lock
jge
and
ficom
sub
(bad)
mov
in
retf
pushf
scas
fsubr
jmp
fnsave
lock
xchg
sbb
les
iret
dec
cli
arpl
pop
push
rol
jl
jo
inc
fcmovu
push
les
mov
xchg
rcl
dec
mov
movs
(bad)
xor
cld
mov
mov
mov
idiv
xchg
aas
enter
dec
jb
xchg
enter
cmps
das
fwait
popf
js
pop
push
scas
jmp
xchg
inc
setl
xor
cmp
sbb
xchg
xor
mov
popf
add
pusha
stos
inc
jl
add
push
stos
nop
pop
mov
pop
mov
pop
shl
jge
mov
jmp
loope
inc
sub
jecxz
xchg
cmp
je
popf
xchg
cdq
loope
call
sbb
int3
mov
fld
stos
xchg
(bad)
repnz
das
jge
adc
sbb
push
pushaw
leave
pop
or
aam
nop
lahf
(bad)
push
out
and
or
mov
in
sbb
jmp
in
mov
cwde
dec
push
jbe
xchg
aad
(bad)
xor
movs
std
mov
call
push
test
sbb
push
adc
xor
out
mov
pushf
ins
sbb
mov
jo
jmp
adc
pusha
sub
stos
xchg
push
lahf
je
xchg
mov
adc
xchg
ins
sar
pop
mov
test
outs
ins
add
fucomi
sahf
lock
cmc
gs
push
push
sbb
ret
mov
cmp
cmp
pop
dec
fiadd
cwde
mov
mov
fs
sahf
inc
sbb
test
xchg
mov
push
and
push
jl
xchg
push
add
mov
neg
jle
mov
sbb
sbb
imul
scas
gs
cmp
getsec
rcr
in
ret
or
lea
sbb
shr
sbb
out
mov
dec
test
mov
call
icebp
add
sub
mov
cwde
jnp
pop
cli
mov
repz
sub
test
jle
retf
xchg
ret
bound
out
mov
jmp
arpl
and
out
addr16
test
and
ds
stc
loopne
(bad)
mov
adc
mov
ds
mov
loope
pop
pop
aam
push
jmp
repnz
aaa
aam
pushf
hlt
adc
fst
mov
cmp
push
int
out
and
mov
(bad)
and
xchg
pop
test
repnz
fs
pusha
xchg
push
stos
(bad)
movs
jbe
mov
jmp
mov
dec
lahf
sub
pop
cmps
aam
fwait
mov
mov
mov
push
or
sahf
inc
mov
push
stos
(bad)
test
stc
push
mov
mov
aas
int3
jmp
js
jne
in
outs
clc
cwde
mov
pop
pop
(bad)
jl
or
icebp
out
cld
inc
jge
or
inc
and
retf
dec
xchg
push
add
ret
cdq
push
pop
mov
das
movs
push
test
ins
dec
inc
mov
mov
imul
out
mov
fidiv
fistp
(bad)
xchg
fbstp
sub
dec
xchg
stos
test
cmp
lods
clc
sbb
mov
outs
cmp
das
dec
jb
retf
test
scas
fucomip
jecxz
xchg
xlat
jmp
jge
pushf
or
push
in
or
es
jmp
int3
sub
pop
jmp
int3
rcl
xchg
dec
ret
dec
mov
sub
cmp
push
mov
add
mov
mov
ret
inc
inc
hlt
pop
jb
stos
shl
inc
lods
retf
in
cmps
mov
pop
lds
cld
div
test
ins
mov
outs
adc
(bad)
mul
fwait
dec
mov
inc
fisub
lock
cdq
stc
xchg
xchg
jp
push
jmp
adc
sub
dec
pusha
pop
rcl
jb
mov
shl
sahf
sub
inc
jle
ds
jg
sbb
mov
ret
jmp
add
pop
retf
xchg
dec
std
xchg
sbb
js
xchg
ret
fild
mov
jmp
inc
jne
out
shr
push
retf
xchg
jecxz
adc
rol
jno
loope
mov
cli
xor
mov
movs
out
dec
fs
fwait
jecxz
xor
stc
js
shr
sti
xchg
mov
(bad)
adc
xchg
adc
mov
pop
mov
fsub
pop
jb
mov
xor
adc
jae
sub
addr16
imul
repz
cdq
and
mov
pop
nop
cli
push
(bad)
xor
pop
in
xor
fwait
dec
jecxz
shl
out
test
fimul
aas
sub
retf
and
push
shr
and
fdiv
cmp
retf
outs
sub
push
jmp
shl
mov
or
fisttp
xchg
sbb
lock
adc
jp
(bad)
xlat
fisttp
dec
pop
sti
dec
jl
adc
or
dec
std
xchg
adc
(bad)
out
xlat
sar
enter
inc
iret
addr16
xchg
js
mov
out
mov
test
call
push
(bad)
fstp
push
daa
sbb
inc
and
adc
fs
fsubr
loopne
fbstp
xchg
mov
test
mov
in
mov
sub
pop
je
mov
jecxz
mov
xchg
jb
mov
sub
cmc
xchg
nop
shr
call
sar
add
mov
imul
xchg
xchg
dec
test
mov
push
outs
cmp
fsub
aam
xor
fcomp
loopne
popf
test
or
or
cmps
pusha
cmp
inc
arpl
bnd
xchg
mov
pop
lock
sbb
iret
cmc
stos
leave
pop
retf
pop
outs
out
add
pop
cld
shl
loope
sub
ss
cmp
push
jp
sbb
mov
cmp
xchg
inc
cmp
mov
jne
mov
in
iret
test
jge
sub
push
xchg
pop
mov
xchg
or
sub
retf
pop
push
or
(bad)
jmp
mov
sub
in
push
pop
loop
push
mov
test
test
test
sub
(bad)
stos
out
add
xchg
int3
jmp
add
test
lods
cmps
stos
cmp
test
fist
call
cwde
pusha
xchg
pop
pop
jnp
jmp
fwait
mov
js
in
add
(bad)
jmp
pop
scas
lock
xchg
jo
std
in
loopne
int
loopne
out
sub
cdq
mov
jecxz
hlt
xchg
in
cmp
leave
adc
xchg
test
mov
aad
pushf
jns
fcmovne
push
xchg
adc
repnz
dec
mov
fwait
imul
aad
bnd
xor
cmp
shr
mov
(bad)
push
inc
scas
inc
sub
out
mov
imul
test
jl
in
lds
icebp
push
out
dec
and
inc
inc
and
jecxz
mov
mov
loop
jge
xor
mov
push
sahf
popf
(bad)
in
push
lock
cwde
fcom
lods
pop
fist
repz
push
inc
add
wrmsr
mov
test
mov
outs
push
push
stos
sti
inc
add
ret
pop
in
icebp
jne
dec
inc
ins
sahf
and
jmp
sti
sub
jmp
push
xchg
je
mov
ins
out
mov
xlat
fwait
call
test
pop
out
inc
inc
cmp
cmp
data16
imul
jle
push
ss
popa
or
mov
pop
xor
jne
popf
out
mov
lds
xor
mov
ds
pop
(bad)
aam
sahf
adc
dec
js
or
cmp
fcom
icebp
jns
push
lods
movs
call
adc
fcom
mov
popa
add
mov
stos
dec
and
fbld
pop
mov
mov
xor
push
mov
sahf
jo
lock
xor
icebp
ins
out
fsub
out
or
test
inc
div
sahf
pop
push
pop
scas
jle
les
and
adc
cmp
test
ds
jmp
popa
adc
sub
sub
js
cmps
lea
cmp
sub
xor
sbb
(bad)
test
loope
rcl
inc
fiadd
loopne
mov
inc
sub
movs
mov
push
stos
sub
add
ror
and
inc
xchg
test
dec
outs
mov
int3
adc
sbb
call
les
ss
shr
jne
cld
aam
movs
xchg
scas
cmp
mov
dec
shl
pushf
lods
test
test
pop
ins
mov
icebp
addr16
in
(bad)
mov
sub
sub
xchg
mov
dec
xchg
mov
call
sub
rol
xor
pop
pop
cli
mov
sti
mov
cmp
add
pushf
fidivr
retf
jge
std
push
jecxz
push
adc
sub
loop
fbstp
xchg
adc
pop
pop
mov
(bad)
pop
icebp
bound
add
push
mov
test
(bad)
data16
or
popf
mov
cdq
nop
ds
daa
mov
xchg
adc
mov
test
dec
adc
ret
dec
pop
add
int3
push
push
add
inc
lds
push
and
jnp
xlat
lahf
xchg
mov
rol
popf
jmp
mov
mov
aam
jecxz
add
(bad)
into
clc
loopne
xchg
xchg
cld
inc
ds
xor
adc
stos
cmp
test
mov
cmp
ss
mov
adc
or
call
cmp
jnp
lahf
jns
jecxz
in
je
fisubr
jne
xor
jno
and
fisttp
mov
cmps
xor
je
or
fnstcw
xor
sub
xchg
xchg
test
pop
push
inc
sbb
mov
push
sti
mov
test
cdq
gs
lahf
ret
in
pop
ins
and
test
sub
out
sub
mov
arpl
and
je
cdq
mov
and
(bad)
sti
jl
xor
mov
ss
sti
jg
outs
mov
xor
hlt
mov
dec
enter
stc
pop
outs
push
cmps
aas
test
sub
retf
jo
and
sbb
push
jecxz
test
add
pop
inc
dec
cmc
dec
mov
repnz
xchg
push
mov
repnz
dec
mov
xor
inc
ficom
shr
push
fsubr
push
and
popa
scas
sbb
pop
inc
repz
sub
outs
(bad)
mov
pusha
dec
cmp
ss
push
sbb
inc
cmp
sahf
mov
ins
push
push
dec
int
or
test
xchg
and
aam
ret
cmc
cmp
cwde
xchg
cdq
leave
jnp
das
test
mov
mov
aaa
and
out
(bad)
pop
mov
mov
out
aas
mov
or
mov
loope
imul
repz
addr16
mov
xchg
fst
in
cs
(bad)
xor
or
jp
jne
lods
mov
lahf
rol
add
test
sub
jmp
shr
cmp
(bad)
mov
push
mov
dec
mov
leave
mov
jle
mov
mov
pop
add
pop
or
pop
ins
fisub
sar
movs
fdivr
pop
xchg
mov
enter
sub
sub
mov
js
mov
inc
sbb
stos
jns
add
adc
(bad)
(bad)
xor
int3
jne
js
test
out
mov
xchg
test
xchg
push
je
aas
pushf
loope
jae
cwde
xchg
lea
push
xchg
fwait
jo
ins
sti
sbb
scas
ret
mov
mov
leave
cld
dec
cs
xor
adc
loope
inc
sbb
mov
mov
jns
repz
or
jae
xchg
mov
xchg
push
movs
mov
xor
gs
push
dec
xchg
adc
add
jecxz
jbe
into
retf
xor
mov
mov
dec
adc
push
or
aas
pushf
cmps
sbb
test
test
push
daa
pop
and
mov
and
pop
push
xchg
lds
lods
inc
lods
push
fcmovnu
out
xchg
sbb
mov
adc
mov
jnp
sahf
adc
inc
jb
movs
and
push
arpl
stos
mov
sbb
xor
push
fist
mov
rcr
into
xor
pop
(bad)
fmul
lahf
xchg
clc
lds
cmps
stos
mov
out
fwait
movs
mov
inc
ins
xchg
cmp
and
(bad)
les
push
sub
adc
imul
in
mov
and
sahf
addr16
and
cmps
jle
rol
dec
retf
add
push
push
cmp
dec
call
jmp
add
ret
fs
pop
jo
fsubr
mov
mov
jo
(bad)
mov
test
jle
sub
into
stos
lds
adc
lock
and
jle
inc
and
xchg
in
jbe
(bad)
mov
pop
dec
inc
mov
nop
fdiv
or
in
nop
pop
pop
scas
fcomip
pop
das
jmp
mov
adc
pop
bound
and
dec
fs
mov
mov
pop
jmp
fadd
test
es
adc
lahf
lea
(bad)
aas
clc
fidivr
jp
repz
imul
mov
fwait
std
inc
test
or
imul
cmp
cmps
add
fld
mov
inc
js
popf
add
arpl
mov
cmps
scas
fild
fsub
in
sub
xor
popf
add
pop
mov
fsub
and
pop
cmps
pop
and
xor
out
ins
xor
fcmovbe
(bad)
mov
data16
xchg
pushw
call
in
sar
outs
cmp
cmp
ror
sti
xor
push
fcom
push
mov
xor
mov
mov
mov
inc
sub
xor
pop
cmc
repnz
mov
shl
push
pop
mov
fs
int3
(bad)
enter
lods
xor
mov
pop
movs
pop
xchg
jne
adc
rol
neg
popf
and
inc
sub
into
enter
adc
vphadddq
jnp
call
nop
lock
mov
dec
loope
xor
(bad)
test
push
lahf
aam
adc
retf
mov
pop
fwait
push
popf
es
and
retf
sbb
mov
push
das
ja
leave
jmp
xchg
sahf
inc
stos
arpl
mov
or
mov
xchg
into
loope
pop
push
std
int3
sbb
mov
push
jmp
jb
gs
inc
ds
xchg
pop
fld
cwde
call
out
int3
scas
push
call
cdq
cmp
sub
addr16
add
push
cdq
dec
cmc
stos
fs
test
mov
nop
mov
movs
push
les
ret
xlat
push
jg
xchg
outs
fsub
inc
clc
mov
aad
cmp
mov
(bad)
cmp
push
cmc
pop
mov
xchg
repz
cmp
sbb
test
xchg
adc
jge
imul
jmp
inc
push
popa
jno
scas
adc
adc
jg
das
std
push
shr
pop
xor
scas
xchg
cmp
xchg
fistp
loopne
mov
sub
inc
adc
mov
cmp
sbb
inc
aas
or
popf
(bad)
xor
and
push
inc
pushf
pop
in
in
in
cmp
add
inc
gs
iret
xchg
inc
js
cmp
inc
or
sbb
fld
mov
out
in
mov
lahf
das
ret
add
outs
push
aaa
retf
jmp
xchg
in
jae
iret
mov
mov
mov
lahf
loopne
lods
pop
sti
ja
out
mov
push
mov
pop
test
movs
and
and
push
push
jle
add
pop
call
cmps
(bad)
ss
das
add
inc
push
je
or
test
xor
aam
mov
jmp
ja
pop
repnz
or
popf
jns
xchg
mov
leave
and
out
ja
mov
pop
ficomp
aaa
xchg
aam
call
sti
mov
ds
jp
test
or
je
retf
aad
push
sub
xchg
mov
bound
ror
push
(bad)
push
xor
and
sti
pop
outs
dec
cmp
in
xor
(bad)
into
dec
loopne
mov
es
bound
cmp
cmp
sub
sahf
xchg
jmp
nop
pop
(bad)
shl
aam
inc
hlt
(bad)
lock
out
shr
mov
adc
shr
mov
and
push
in
ins
pop
push
or
jp
xchg
int3
ror
xchg
mov
lods
add
or
sbb
jbe
mul
in
add
mov
out
xchg
bound
hlt
xchg
mov
sar
xor
aad
in
mov
and
out
inc
dec
xchg
aas
xchg
jae
ins
and
call
mov
sub
xor
xchg
dec
call
cmc
imul
loopne
div
sar
mov
adc
pop
dec
adc
stos
jge
jecxz
xchg
retf
jle
retf
mov
mov
shl
rcl
jbe
jmp
cmc
sbb
cli
aas
cmp
movs
inc
add
cdq
fnstsw
ret
sub
lods
ret
jmp
lods
sub
push
adc
(bad)
pop
int
repnz
xor
aaa
inc
adc
xchg
add
mov
inc
mov
mov
mov
pop
movs
and
mov
mov
mov
xor
sub
clc
dec
xor
(bad)
mov
mov
push
xchg
(bad)
mov
jae
scas
neg
adc
std
mov
nop
cmc
jle
push
push
sub
ror
lea
push
fsub
xor
sbb
aam
std
iret
inc
jns
fwait
ret
xor
mov
shr
push
xchg
or
pslld
cld
mov
test
daa
mov
xchg
ret
adc
fcomp
sti
xchg
stos
cld
ja
xchg
cmp
inc
fist
into
jb
repnz
dec
cmp
sbb
xchg
push
inc
ficomp
dec
cmp
leave
mov
dec
mov
or
adc
sub
push
ds
cs
push
repz
js
inc
jecxz
clc
mov
add
jmp
movntps
cdq
out
dec
inc
mov
test
push
fstp
mov
adc
clc
sbb
jmp
sahf
or
or
add
mov
cdq
jnp
and
sbb
popa
pushf
adc
push
clc
ins
sbb
jmp
or
les
jmp
xchg
es
push
xor
jecxz
fs
jnp
jecxz
mov
test
(bad)
mov
pop
sahf
aam
jno
cld
loopne
push
inc
inc
into
fcompp
cmps
add
xlat
ss
cmp
cli
xor
inc
cmps
scas
sub
aas
aad
icebp
adc
(bad)
out
addr16
lock
sbb
cmps
retf
cmp
cmp
mov
(bad)
adc
xchg
icebp
jbe
jmp
stos
test
jg
out
fwait
in
test
out
or
cmps
out
and
sbb
je
repnz
pop
test
(bad)
movs
(bad)
aas
je
adc
sar
add
adc
aaa
mov
enter
pop
test
popf
loope
out
cwde
into
ins
push
xor
jmp
dec
retfw
gs
dec
sbb
mov
popf
mov
jo
fdiv
out
fdiv
ficomp
mov
imul
gs
push
mov
dec
sub
arpl
jae
test
xor
bound
or
lahf
test
xor
push
mov
(bad)
(bad)
js
inc
or
ds
xor
aad
aad
dec
addr16
movs
aad
pop
stos
pop
not
das
cs
jae
jmp
sti
push
popf
jo
or
bound
add
retf
sub
cmp
xor
xchg
jge
push
xchg
xchg
pushf
mov
dec
dec
adc
pop
xchg
test
lods
iret
jle
in
dec
add
movs
fsub
add
out
mov
call
mov
sahf
cmps
xor
icebp
(bad)
sub
or
push
and
int3
inc
add
(bad)
test
mov
adc
cmps
in
cmp
xor
push
push
bound
mov
pop
xchg
push
imul
(bad)
stos
jg
cmp
cmp
jnp
push
push
retf
repnz
inc
retf
cs
popa
jmp
imul
inc
out
mov
cmp
in
call
mov
xor
sbb
push
cmps
test
movs
cs
inc
dec
sub
jae
inc
dec
pusha
push
add
cmp
or
std
xchg
mov
js
sub
mov
sub
push
aaa
outs
cmovno
and
imul
test
neg
cdq
mov
cmp
mov
adc
(bad)
and
test
and
inc
(bad)
adc
sub
sbb
nop
lahf
xlat
and
sbb
iret
or
xor
push
lock
fs
push
leave
xchg
jo
sub
lds
popf
push
mov
mov
dec
mov
xchg
pop
add
jnp
nop
outs
pmaddwd
retf
test
mov
pop
pop
nop
shl
aas
add
mov
xchg
push
mov
jmp
xchg
mov
cmp
add
inc
dec
(bad)
hlt
mov
addr16
jge
(bad)
arpl
push
sub
jnp
popf
cmp
cdq
cli
xchg
outs
out
and
js
cmp
mov
icebp
(bad)
pusha
(bad)
jl
cwde
push
jmp
push
push
sbb
mov
cmp
(bad)
fsub
ins
cmps
mov
gs
inc
pop
jp
sub
test
es
inc
mov
xchg
fnstsw
popf
or
push
mov
std
dec
xchg
in
fmulp
stc
repnz
pop
add
(bad)
cdq
inc
imul
xor
data16
fcomp
div
inc
mov
cli
mov
lahf
out
enter
inc
aad
test
mov
jmp
xchg
sbb
repz
pop
cmps
test
pushf
lds
sar
or
(bad)
cmp
scas
and
push
dec
jmp
inc
push
les
retf
ret
sub
stc
imul
push
xchg
cmp
jae
dec
ret
sar
test
(bad)
test
sbb
ss
and
cmp
das
sub
xlat
loopne
(bad)
loop
ds
cmp
fimul
xor
mov
lahf
mov
or
xchg
dec
dec
cmp
cmps
cld
movs
cmps
jmp
sub
jp
mov
call
and
idiv
enter
xchg
cmps
cld
pop
mov
je
shl
loope
xchg
scas
daa
mov
aam
push
add
adc
aam
inc
cld
loopne
sar
mov
mov
or
mov
enter
sub
xchg
xchg
jle
(bad)
adc
mov
js
sub
jle
retf
mov
mov
dec
fmul
mov
push
movs
aas
sub
fcmovb
es
retf
jp
mov
imul
add
outs
gs
cmp
jg
daa
cmp
pop
or
mov
pop
fwait
out
mov
inc
pop
sbb
dec
inc
fdiv
nop
xchg
xchg
dec
call
add
jo
jle
or
ret
test
xchg
cmp
pop
movs
push
cs
scas
jbe
lds
xor
xchg
stc
cmp
imul
enter
enter
lds
push
sbb
mov
pop
pop
jbe
outs
jecxz
jo
pop
dec
mov
(bad)
retf
outs
fsubr
or
push
and
in
inc
mov
(bad)
sbb
ins
sub
(bad)
icebp
cmp
xlat
jmp
fimul
inc
mov
aas
cmc
jp
adc
div
xchg
fadd
in
(bad)
or
mov
mov
int
idiv
scas
outs
jne
mov
add
xchg
inc
das
loop
inc
aad
(bad)
push
fldenv
loopne
int3
xor
xor
jmp
fild
mov
cmps
ins
dec
add
bound
in
sub
fldenv
xchg
test
stos
lahf
dec
inc
mov
out
jecxz
stos
jp
xor
jmp
pop
cmp
sub
push
jne
jmp
das
movs
mov
inc
movs
cmc
xor
out
shl
pop
inc
xor
mov
xor
push
loopne
mov
xor
xchg
in
clc
(bad)
jmp
out
mov
outs
push
fld
cmp
rol
add
(bad)
scas
adc
sti
push
popa
in
xchg
je
or
dec
call
dec
inc
loope
into
or
aaa
mov
bound
jae
jb
pop
add
push
inc
int
mov
or
mov
inc
test
mov
push
adc
or
xchg
or
jae
mov
ror
pushf
fdiv
push
add
or
(bad)
push
push
iret
dec
pushf
imul
ja
mov
hlt
into
jb
loope
push
adc
jge
jae
mov
xor
dec
mov
push
arpl
dec
pop
sbb
bound
push
jge
pushf
mov
pop
adc
inc
sbb
jmp
xor
fdiv
pusha
stos
inc
sub
les
cmp
(bad)
ret
mov
adc
gs
dec
scas
inc
sbb
ret
sbb
adc
hlt
outs
lahf
stos
mov
loope
les
mov
sti
retf
out
cmp
test
outs
jecxz
(bad)
in
or
mov
inc
mov
dec
outs
popf
push
(bad)
int3
adc
dec
mov
les
cwde
mov
add
rcl
mov
outs
into
pop
int3
dec
int3
push
inc
adc
or
cmp
test
aaa
popf
add
mov
test
xor
ret
retf
sub
cdq
or
and
sub
frstor
add
or
inc
mov
sub
leave
mov
test
addr16
aaa
scas
gs
pop
or
push
pop
add
xchg
movs
sub
lock
mov
jns
cmp
test
push
sbb
lea
sar
pusha
mov
out
and
mov
adc
pop
mov
dec
test
(bad)
ror
mov
and
bound
test
lahf
add
push
cmps
aas
inc
dec
out
retf
push
pop
mov
pop
push
test
ds
inc
(bad)
scas
mov
cli
shl
push
cmp
cmp
jg
fisubr
and
into
js
pop
push
sti
aas
cmp
pop
frstor
loop
scas
sbb
mov
iret
idiv
sub
aaa
nop
(bad)
mov
cmp
nop
mov
mov
jno
dec
inc
dec
mov
or
sub
pop
dec
fadd
ret
rol
mov
jmp
cmps
sti
rcl
mov
pop
out
div
xor
pop
adc
ret
jbe
pop
iret
loopne
ds
dec
lea
push
stos
int3
mov
inc
retf
mov
cmps
aad
aas
jle
inc
sub
jg
cs
fcom
iret
pop
jno
or
gs
lock
fiadd
mov
mov
mov
jnp
add
mov
inc
xor
rcr
dec
jne
cs
data16
push
xchg
lods
push
pop
not
test
enter
repz
enter
fwait
cmp
(bad)
ror
pop
test
add
fwait
gs
xor
mov
in
retf
ret
xchg
repz
xchg
out
popf
movs
add
rcr
or
sar
stos
sar
out
dec
shl
mov
mov
mov
ins
idiv
push
(bad)
test
mov
xchg
jmp
call
aam
inc
sbb
mov
or
(bad)
inc
mov
mov
fild
push
lahf
jb
jno
jg
dec
lods
xchg
ret
in
push
in
addr16
retf
xchg
das
popa
daa
mov
ror
es
pop
mov
adc
stc
fldenv
imul
push
ret
mov
out
stc
xchg
cmp
in
(bad)
int3
test
mov
sub
or
inc
pushf
or
enter
jge
popa
add
sub
pop
in
enter
lock
shl
das
lds
jecxz
clc
jg
mov
sub
in
int3
(bad)
fdivr
pop
inc
in
xor
leave
sar
mov
push
jmp
or
cmp
bound
out
and
ja
jb
lea
dec
mov
jne
sbb
sbb
cmps
mov
push
test
sbb
or
cs
cmp
inc
aam
in
jbe
pusha
fnsetpm(287
int3
call
(bad)
mov
mov
adc
mov
push
fwait
and
loope
fwait
call
inc
xchg
arpl
repz
lods
push
pop
mov
xchg
sti
ds
cmp
lahf
je
shl
xor
fs
xor
ds
and
out
pop
jmp
sbb
jae
dec
mov
mov
les
test
jmp
fild
pusha
sub
jmp
mov
inc
ja
cmp
cmp
jle
sahf
cli
pop
xor
stc
ret
dec
jmp
or
pop
mov
retf
vshufps
stos
nop
xchg
loope
shl
cld
jge
push
add
es
dec
push
lods
jae
and
pusha
retf
add
in
and
ins
out
fisttp
test
fs
int3
test
add
mov
sbb
dec
mov
fidivr
sbb
fcomp
add
jl
ret
fdivr
cmps
popf
cmp
and
jae
mov
scas
ins
mov
mov
jecxz
enter
jne
xchg
dec
retf
adc
cmps
inc
and
mov
std
cwde
mov
fcom
jbe
xor
cmp
jmp
add
(bad)
icebp
scas
sub
loopne
pop
lods
push
fldenv
shl
push
lahf
jns
cld
sbb
add
scas
mov
or
(bad)
test
inc
dec
and
movs
jbe
jle
jmp
addr16
adc
cmp
mov
xchg
sub
xor
pop
in
in
xchg
mov
call
ret
aas
lea
call
(bad)
push
mov
add
jle
shl
mov
gs
add
repnz
fisub
stc
enter
sub
mov
dec
sbb
or
lea
retf
in
lds
leave
test
xor
mov
push
arpl
test
cmp
pop
or
test
fnstcw
sub
test
sbb
loope
pusha
pushf
and
(bad)
xchg
or
ror
mov
adc
mov
push
cmp
pop
retf
dec
sub
push
fld
test
inc
xchg
in
hlt
lock
repz
int3
call
div
ins
fidiv
mov
xor
movs
test
inc
cmc
adc
sub
pop
sar
dec
mov
cmp
xchg
mov
sub
fsubp
lds
sbb
xchg
ret
cmp
ss
sar
xchg
std
cmps
sar
xchg
icebp
iret
xchg
nop
mov
(bad)
pop
idiv
cld
fimul
add
aam
xchg
inc
mov
loope
mov
rol
pop
mov
mov
adc
mov
cmp
pop
and
ret
mov
xchg
xchg
aaa
movs
xor
sar
add
xchg
mov
or
pop
lods
int
das
mov
pop
div
mov
fwait
xrelease
xchg
fdivr
xor
push
sahf
inc
mov
xchg
test
xor
inc
jge
lods
lahf
fcom
sub
stos
(bad)
loop
rol
iret
pusha
and
xchg
clc
int3
xchg
push
push
push
shl
jb
ret
adc
in
repz
adc
aas
sbb
jmp
pop
lea
push
and
cli
shl
fiadd
add
push
imul
xor
into
ins
adc
out
call
iret
mov
jo
dec
push
iret
call
stos
sub
arpl
xchg
add
sbb
ja
pop
cdq
div
mov
ficom
in
loopne
bound
rcr
(bad)
shl
mov
xchg
push
mov
cmps
mov
nop
sub
outs
mov
int
xor
(bad)
xchg
mov
nop
fyl2x
clc
push
mov
sub
ja
gs
scas
jmp
or
sub
xor
inc
mov
mov
dec
retf
mov
dec
mov
sahf
xchg
adc
js
rol
dec
test
cmp
cmps
jae
jmp
shl
mov
in
jle
mov
shl
rol
push
fst
mov
pop
add
xchg
cmp
mov
dec
iret
mov
cmp
or
dec
pop
mov
daa
je
sub
xchg
iret
pop
cmp
int
(bad)
subps
mov
sbb
stos
mov
mov
je
out
enter
dec
jnp
shl
jns
fnstsw
in
sbb
lods
xchg
push
mov
jp
adc
sub
mov
loop
(bad)
adc
in
out
ficomp
cmp
push
retf
jg
das
imul
test
(bad)
mov
cmp
push
or
ret
inc
add
mov
bound
call
mov
cmp
cmp
mov
jl
push
jle
xlat
out
push
push
inc
xor
fidivr
dec
into
fnsave
or
xchg
movs
adc
mov
mov
jae
xchg
xor
in
xor
mov
outs
scas
xchg
xor
pop
fisttp
out
or
mov
repz
sbb
jae
jbe
mov
pop
pextrw
arpl
out
or
add
mov
sbb
jno
fld
iret
or
cli
xor
fild
out
and
and
enter
xchg
or
icebp
adc
jge
in
xor
(bad)
jmp
pop
call
push
jmp
(bad)
(bad)
jl
adc
not
imul
(bad)
inc
mov
add
stos
gs
imul
cmp
lods
push
mov
out
daa
push
mov
into
cmc
jo
test
cli
jl
repnz
clc
outs
sbb
ja
mov
adc
cmp
aas
cli
lahf
test
lea
scas
xor
addr16
fdiv
retf
das
xchg
xor
push
xchg
out
dec
mov
adc
or
mov
ja
pop
je
loop
mov
adc
mov
mov
xchg
xor
(bad)
push
sar
dec
xchg
mov
mov
pop
push
add
mov
mov
(bad)
(bad)
stos
xchg
not
mov
xlat
repz
jg
jbe
add
dec
lahf
(bad)
mov
and
xchg
hlt
retf
idiv
jmp
adc
sbb
xchg
inc
xor
test
jp
std
call
mov
ret
adc
add
mov
dec
in
inc
fbstp
or
sbb
mov
lock
push
sbb
fs
inc
inc
(bad)
jp
inc
mov
stos
das
movs
mov
popf
xor
push
xor
aaa
nop
test
(bad)
gs
nop
mov
mov
dec
cs
outs
call
aaa
or
or
(bad)
sbb
rol
sahf
mov
mov
ins
in
cmp
sub
sar
and
jle
enter
mov
dec
popf
les
push
mov
std
test
test
add
jb
iret
popf
xchg
inc
add
int3
mov
mov
xor
inc
mov
lods
pop
mov
fwait
xchg
or
dec
inc
and
jp
xor
enter
cs
cdq
inc
test
pushf
packssdw
sti
loopne
mov
push
mov
in
test
pop
mov
jp
shl
popf
das
xchg
xchg
out
(bad)
fcom
mov
nop
mov
in
loope
loope
test
xchg
out
loopne
jbe
lods
out
stc
test
shl
sub
sahf
popa
std
psubusb
jae
xchg
sahf
mov
std
retf
(bad)
bound
mov
adc
ins
rol
aaa
sub
idiv
in
sti
mov
jnp
cmp
(bad)
push
xor
sub
cs
mov
xor
fstp
adc
ror
out
in
nop
mov
ret
or
outs
push
aam
push
sub
mov
les
xchg
pop
clc
sub
(bad)
in
nop
add
cli
and
push
outs
ror
jecxz
sahf
dec
(bad)
out
mov
es
push
xchg
pop
push
add
inc
mov
in
cmc
cs
adc
(bad)
xor
dec
mov
cmp
jae
test
out
into
jns
jo
cmc
shl
adc
inc
fxch
outs
or
jge
mov
sub
sub
inc
sbb
mov
ror
jecxz
and
aas
sub
and
fadd
repz
das
mov
cmp
push
mov
pop
mov
aam
lahf
frstor
sar
retf
xchg
sub
xchg
and
and
(bad)
fiadd
push
adc
fidiv
cmps
push
adc
inc
ds
icebp
push
xor
std
pop
mov
retf
popa
(bad)
adc
(bad)
aaa
shl
call
dec
lahf
and
sbb
mov
aam
push
rcl
out
add
imul
inc
push
ror
out
adc
mov
ins
(bad)
cmp
fsub
or
loop
test
add
and
movs
ret
stc
rcl
out
retf
dec
jmp
inc
xchg
aaa
add
xchg
dec
add
mov
cdq
enter
sar
xor
cmc
pop
dec
jno
jmp
cmc
or
jo
shr
add
push
cs
pop
mov
push
gs
sub
sbb
mov
movs
ss
retf
aam
addr16
ins
cdq
mov
adc
mov
popa
scas
leave
jle
in
daa
pop
add
pop
mov
ret
push
movs
xchg
mov
jmp
dec
aad
add
sub
mov
retf
push
xchg
sahf
or
scas
push
js
fstp
adc
mov
push
(bad)
cs
jo
sbb
fdivr
xor
push
(bad)
aad
xchg
fsub
pusha
aas
jne
sbb
xchg
(bad)
push
int3
push
push
repz
cmp
gs
jmp
movs
int3
xchg
mov
mov
mov
cmps
(bad)
and
loop
fld
mov
int3
shl
retf
fisubr
xchg
mov
daa
aam
and
leave
int3
mov
imul
adc
pop
pop
xchg
das
and
xchg
push
cmp
int3
add
xchg
inc
lock
lods
pusha
out
xchg
inc
repz
sbb
mov
xlat
test
movs
ins
jbe
push
push
mov
leave
loop
dec
or
daa
imul
nop
pusha
aam
cmps
sub
repz
out
mov
(bad)
fstp
movs
shr
xlat
sub
mov
aas
jmp
cdq
xchg
cmc
mov
out
test
popf
pop
stos
jge
stos
xchg
jae
mov
cli
lahf
dec
js
mov
dec
stc
mov
(bad)
cmp
sub
repz
mov
jbe
xchg
cmp
lds
fbld
cmp
dec
lea
xchg
stos
test
(bad)
aam
dec
icebp
int3
movs
mov
sar
mov
xor
jbe
xor
imul
push
leave
mov
mov
add
and
(bad)
cmp
test
pop
mov
pop
adc
lock
sub
mov
mov
aas
cmc
sub
sbb
sar
jg
mov
mov
inc
jns
call
les
push
das
cmp
stos
xor
shr
clc
cmp
mov
hlt
lock
lds
push
in
(bad)
inc
fistp
adc
sar
cmp
cmp
call
(bad)
adc
jno
xchg
pushf
xor
inc
les
jb
bound
inc
push
fld
dec
fcom
popa
rcr
xor
mov
test
push
scas
cmp
aaa
xchg
cmp
pop
enter
rol
dec
les
je
test
ret
push
in
bnd
jg
hlt
rcr
daa
pushf
nop
mov
in
loopne
and
cli
mov
jmp
xor
pop
or
test
mov
jmp
inc
mov
int
jle
xor
cmp
inc
sub
aaa
jb
mov
xchg
scas
sub
pop
in
dec
push
inc
(bad)
pop
ja
sub
xor
sub
loopne
xchg
push
test
fdivr
or
lods
fnstcw
xchg
dec
retf
in
(bad)
adc
sbb
es
sub
xchg
(bad)
in
call
mov
cdq
cmp
or
push
sub
jbe
mov
mov
mov
adc
in
fimul
addr16
in
nop
mov
pop
mov
pop
mov
in
lock
cdq
mov
xchg
lods
je
(bad)
jne
mov
bnd
stos
cmps
cdq
add
cdq
mov
in
loope
add
fimul
mov
mov
mov
and
cmp
and
mov
push
es
enter
bound
inc
pop
pop
jmp
popa
mov
out
rcr
lahf
inc
in
mov
or
mov
fcom
fadd
lock
imul
out
movs
jle
cmc
aad
sbb
ret
cdq
adc
adc
mov
mov
in
add
jns
dec
repnz
int3
lods
mov
and
cmp
stos
jae
mov
add
dec
fisubr
mov
enter
jnp
aad
push
mov
mov
(bad)
fs
and
stos
sub
fadd
ror
fcom
aam
int3
jl
jge
retf
adc
pop
shl
inc
push
out
nop
push
mov
outs
fst
xor
jb
and
inc
sbb
ds
xchg
mov
dec
enter
pop
add
push
cmp
xor
sub
je
push
dec
push
mov
leave
xor
test
jmp
bound
cs
outs
xchg
movs
rol
dec
rcl
sub
push
mov
lahf
adc
jp
jge
cmp
imul
retf
paddusb
mov
retf
inc
outs
out
dec
pop
sub
icebp
xchg
dec
xor
data16
adc
fdiv
test
outs
mov
movs
sbb
push
lods
bswap
gs
push
jecxz
fdivr
pop
xor
adc
mov
iret
(bad)
cmps
cdq
mov
mov
cwde
lahf
bnd
pop
cmp
stos
and
in
jmp
lahf
mov
shl
and
fadd
(bad)
mov
mov
rol
add
loope
(bad)
mov
in
jno
cli
and
fstp
jno
jl
shr
xor
imul
cli
scas
loopne
jns
mov
jle
mov
push
scas
sub
aam
outs
ins
pop
outs
aad
push
(bad)
mov
shl
cld
arpl
and
fidivr
retf
sub
cmp
adc
bound
push
lock
xor
call
jp
sbb
pop
outs
sub
(bad)
loop
(bad)
fcmovnb
cmp
lea
push
bnd
jns
jb
outs
bound
fld
div
rcr
push
mov
test
push
dec
pop
add
cmp
ficom
lds
adc
jle
pop
nop
(bad)
fidivr
fwait
and
push
push
mov
xor
mov
shl
mov
mov
retf
cs
sbb
push
push
cmp
lods
adc
cdq
cmp
nop
out
out
fisttp
in
mov
ret
or
jne
mov
leave
pop
enter
ja
ret
in
repz
movs
ret
lea
loop
aas
shl
push
cmc
cmc
bswap
inc
xchg
mov
daa
je
mov
aaa
adc
mov
mov
push
sbb
lahf
adc
mov
xor
je
push
out
jg
xchg
add
ins
and
cwde
in
das
adc
out
in
imul
mov
sbb
imul
xor
pop
sub
sbb
jo
dec
mov
fs
mov
int
fiadd
push
mov
xchg
jbe
ss
and
inc
xor
inc
push
stos
jmp
dec
ja
add
retf
stc
jno
mov
add
ror
(bad)
mov
out
pop
scas
mov
or
mov
clc
out
jmp
je
xlat
fild
(bad)
cli
jb
sbb
pop
fisub
fistp
loope
mov
cli
xchg
xchg
push
fist
push
(bad)
xchg
inc
out
leave
push
cmp
mov
mov
mov
inc
or
dec
push
sbb
into
cwde
mov
push
std
and
js
inc
ja
push
(bad)
aaa
jl
and
cmp
hlt
ds
out
test
cmp
ss
lea
mov
cli
ds
sar
jbe
mov
fdivr
test
sub
cmp
std
inc
and
cmp
out
push
pop
mov
jbe
stos
jbe
stos
movs
or
and
ret
or
movs
dec
(bad)
sti
jnp
hlt
add
and
out
or
jp
dec
stos
mov
mov
rol
bound
jp
fisub
out
dec
scas
lahf
mov
imul
add
or
and
retf
lahf
test
and
adc
fld
retf
inc
sub
test
xchg
ins
and
xchg
(bad)
stos
add
and
push
dec
pushf
inc
cwde
fisub
test
fcom
jg
mov
sub
jmp
test
in
(bad)
div
in
imul
adc
dec
shl
leave
sub
fild
xchg
xchg
push
sahf
mov
sbb
shl
inc
cmp
retf
jg
xchg
dec
not
jge
dec
call
js
dec
mov
call
cwde
inc
xrelease
xchg
frstor
inc
mov
add
inc
jno
xor
(bad)
in
neg
out
mov
imul
in
sub
mov
repz
jl
aas
sbb
mov
push
ror
push
mov
push
sub
mov
xor
mov
inc
pop
out
xchg
imul
cmp
nop
mov
popf
rol
push
imul
sub
mov
adc
(bad)
mov
stos
leave
popf
int3
adc
jae
lds
xchg
add
aaa
test
jge
cmp
jb
add
clc
in
dec
and
fbld
movs
fimul
push
inc
addr16
ret
xor
and
(bad)
mov
jecxz
and
cdq
cmp
aaa
xor
fsubr
test
in
lods
mov
cs
call
mov
xchg
sub
mov
pop
and
stos
sub
test
xchg
inc
add
or
push
xchg
dec
aam
mov
cdq
ja
mov
pop
out
movs
mov
xchg
outs
push
or
add
cmp
add
sub
add
sub
xchg
(bad)
add
mov
add
mov
xlat
mov
stc
inc
(bad)
fld
(bad)
aas
xor
daa
daa
stos
ss
adc
xchg
cmp
sub
imul
scas
inc
push
cmp
retf
in
xchg
xchg
ss
push
lods
es
mov
push
inc
adc
fbstp
in
repnz
mov
out
push
loopne
add
dec
ss
add
pop
mov
popa
into
ja
fidivr
loop
mul
in
push
push
loope
je
pop
(bad)
(bad)
jbe
imul
adc
jmp
in
jp
push
jnp
push
adc
mov
std
bound
jle
fs
(bad)
dec
sti
in
push
mov
not
lods
adc
sahf
imul
jmp
jmp
fucom
adc
jmp
add
imul
pop
jns
fdivr
xchg
mov
(bad)
pop
out
addr16
fistp
jmp
xchg
push
ins
enter
xor
mov
inc
inc
push
sbb
je
xchg
fcomp
movs
cmp
pop
and
movs
std
data16
cmp
xchg
iret
(bad)
out
inc
jle
mov
jmp
jbe
je
xor
mov
push
jno
(bad)
test
mov
loop
mov
sti
imul
cdq
dec
fnstsw
lods
mov
dec
sub
jns
jbe
or
fsubrp
xchg
fwait
cmc
adc
stos
test
(bad)
call
jo
lods
in
dec
pusha
push
aas
push
push
inc
jmp
push
pop
cwde
sub
cmp
ds
or
into
inc
cmp
push
jecxz
rol
fsub
fsubp
sub
(bad)
sub
add
lea
clc
out
or
cmp
and
pop
adc
dec
sbb
jo
cmp
jne
pop
stos
sbb
xchg
pop
addr16
out
ss
ret
sub
mov
adc
inc
daa
ret
rol
and
out
imul
sub
lods
mov
push
int3
sbb
test
rep
cmps
and
call
popf
cld
in
retf
push
addr16
fdiv
pop
pushf
loope
mov
stc
(bad)
iret
xchg
call
outs
mov
je
jmp
xchg
and
add
adc
test
dec
cli
sahf
pop
mov
dec
xor
fild
cld
push
inc
cmp
js
fld
cmp
dec
jo
enter
mov
mul
jp
ss
repz
sub
add
ins
iret
lock
mov
add
push
jg
arpl
pushf
mov
mov
push
push
jnp
ret
stos
cmc
and
xbegin
addr16
jne
enter
inc
xor
add
ror
fisttp
aas
rcl
cmp
inc
sbb
add
aaa
mov
lock
push
fmul
add
ficom
dec
add
xor
xchg
das
jo
pop
pop
int
xchg
pop
inc
mov
sub
test
and
or
jmp
fisttp
aaa
fdiv
or
mov
aam
inc
out
push
shl
jae
xchg
loop
in
mov
clc
cmp
movs
popa
enter
int3
(bad)
fiadd
push
or
sbb
xor
(bad)
mov
jae
xchg
mov
test
add
push
test
adc
xor
cld
test
push
jae
pop
push
xchg
in
xchg
dec
fwait
gs
pusha
imul
and
int
es
mov
pushf
repnz
cld
dec
retf
sub
fwait
pushf
cmp
(bad)
mov
dec
ficomp
mov
sbb
xor
mov
bswap
mov
xchg
(bad)
adc
xchg
push
dec
mov
or
mov
cdq
inc
inc
jbe
leave
add
pop
jbe
jp
scas
cmp
dec
jns
and
cwde
pop
adc
sub
stos
nop
out
shl
inc
and
pop
gs
(bad)
mov
call
into
add
add
shr
ret
fwait
mov
xchg
pop
xchg
or
into
dec
inc
shl
xor
dec
sti
cmps
aas
push
icebp
push
jae
es
or
mul
lods
and
data16
fimul
mov
jmp
lock
pop
mov
cmp
pop
ins
push
dec
arpl
sar
(bad)
imul
jp
neg
sub
xor
sub
sbb
shl
xor
sub
sub
pop
dec
pop
mov
push
outs
mov
add
cmc
cmp
dec
fimul
mov
ret
sbb
fisubr
mov
aaa
cdq
adc
inc
jne
mov
add
fs
cmp
je
mov
cmps
hlt
call
sub
shr
lahf
scas
sbb
pushf
(bad)
cmp
and
add
(bad)
cmp
cld
iret
(bad)
repz
inc
neg
jg
daa
xchg
les
jp
pushf
repnz
inc
fstp
mov
sub
aas
sub
inc
adc
pop
in
adc
push
int
into
mov
mov
std
fwait
(bad)
(bad)
fistp
(bad)
pop
mov
pop
dec
loopne
repnz
fnstenv
aad
fabs
add
std
jecxz
js
in
xor
out
fdiv
adc
mov
jmp
lahf
repnz
push
lods
mov
js
jmp
mov
push
dec
jb
cmp
inc
push
add
mov
bound
sahf
xor
hlt
jmp
out
std
adc
push
in
pop
cmc
aas
sub
int
push
mov
cmp
lods
shr
aas
pop
push
fcmove
fdiv
xchg
leave
stos
jp
dec
ins
pop
jae
xchg
cmc
out
daa
sbb
or
inc
ja
ins
(bad)
xchg
rcl
sahf
and
dec
jmp
test
mov
fisttp
les
and
in
(bad)
or
retf
fcom
ret
ret
cmp
add
arpl
pop
or
outs
sete
mov
repz
jecxz
(bad)
adc
mov
inc
and
mov
pop
in
dec
push
sar
rcl
xchg
mov
fwait
jb
inc
xchg
sahf
cli
les
xchg
nop
(bad)
xchg
repnz
imul
mov
ret
pop
gs
cmp
mov
xchg
sub
add
sub
pop
mov
outs
loope
(bad)
outs
les
loopne
add
add
cli
(bad)
sub
cmp
popa
fimul
sub
bound
imul
in
mov
cmps
add
repnz
adc
adc
jbe
das
test
adc
adc
out
push
jg
out
push
fstp
clc
jo
add
dec
(bad)
cmc
lea
mov
mov
mov
mov
adc
nop
out
fstp
lds
pop
mov
xor
xor
sub
lods
xchg
sbb
jle
mov
xchg
xor
mov
popf
sbb
out
mov
mov
std
lods
mov
retf
outs
int3
mov
shr
mov
adc
xchg
pop
sbb
jbe
cmp
out
icebp
sub
push
jl
push
sub
loope
test
js
out
loope
loope
push
clc
mov
pushf
push
aaa
jb
and
dec
lea
or
push
fnstenv
mov
mov
jbe
loope
out
jl
out
mov
inc
mov
in
mov
enter
icebp
call
je
loop
out
cld
jp
iret
push
xor
fimul
mov
jo
mov
add
xchg
xchg
push
xor
sub
mov
aad
and
push
stos
hlt
mov
cdq
jb
xchg
jg
ds
icebp
xor
sahf
or
out
jae
pop
xchg
push
jo
sub
sub
jb
rcr
mov
cmps
pop
cmp
cmp
(bad)
lods
sub
cs
test
mov
in
mov
lods
xchg
mov
xlat
push
sub
xchg
xchg
retf
in
test
scas
sbb
retf
repnz
ins
inc
sub
push
sub
pop
and
stos
jp
cmp
cmp
lds
mov
mov
or
or
add
jae
jp
(bad)
into
in
or
pop
sahf
ret
mov
and
out
add
dec
fisttp
xor
call
aad
cld
cmp
dec
cmc
repz
fwait
cmp
in
scas
fcomip
data16
pop
sub
fld
clc
lods
mul
arpl
ins
or
and
cwde
ja
cdq
repnz
dec
imul
iret
jbe
stos
gs
or
mov
aad
aas
xor
fisub
loop
scas
mul
pop
int3
lea
(bad)
not
pop
out
jle
cmp
xor
bound
xchg
pop
adc
add
lds
sbb
jmp
imul
xor
push
lahf
xchg
adc
cmp
inc
scas
ret
inc
ja
push
imul
adc
mov
ret
aaa
in
xchg
retf
cwde
out
xor
adc
sub
les
push
xor
jge
inc
jb
scas
cwde
push
sub
das
scas
push
std
cld
jo
fisubr
mov
xor
mov
out
iret
jecxz
jo
inc
shl
scas
jmp
repz
or
dec
jmp
stc
pop
sbb
jne
cdq
lods
scas
and
das
or
mov
in
xchg
retf
dec
aas
mov
sub
lods
outs
inc
adc
aaa
inc
das
adc
iret
inc
adc
fwait
xor
sbb
imul
cmp
shl
xor
aas
ret
jmp
bound
push
dec
xor
mov
shl
adc
inc
fdiv
xchg
inc
sbb
mov
jno
pop
xchg
pop
cmps
mov
mov
dec
inc
push
movq
std
sub
push
jl
jl
jns
xchg
aas
or
xchg
inc
cmps
stos
fild
lahf
or
xor
popf
retf
enter
cwde
(bad)
sbb
fs
add
sti
ret
xor
ins
fnsave
out
je
xor
mov
jno
push
sti
jecxz
cmp
(bad)
shr
xor
xlat
push
ins
lahf
xchg
sbb
mov
mov
push
jg
push
les
jg
inc
or
jecxz
jbe
adc
pop
jle
mov
je
add
ins
movs
cmp
mov
ret
cmp
popf
es
leave
xchg
sub
sahf
mov
in
and
mov
lahf
mov
movs
dec
clc
sub
sub
cmp
pushf
not
mov
add
sbb
retf
push
fdivp
pushf
xchg
jo
sbb
jmp
nop
sahf
repnz
fidiv
dec
fwait
icebp
mov
sub
(bad)
pop
(bad)
mov
jns
cmps
and
push
push
int3
cdq
jl
mov
out
or
pusha
jg
fs
shl
(bad)
pop
mov
imul
jno
jg
cmp
inc
cs
dec
int3
xchg
leave
push
into
sbb
mov
int
pop
xchg
and
out
inc
inc
jne
nop
mov
or
cmps
(bad)
repz
fscale
mov
jne
pop
aad
int3
sub
cmp
pop
dec
push
jne
cli
movs
dec
cmp
mov
mov
push
movs
bound
inc
dec
js
inc
ficom
out
stc
or
fbld
dec
sub
push
inc
sub
push
mov
retf
xor
and
cdq
xor
ror
xchg
inc
push
cmp
in
(bad)
and
inc
pop
packssdw
jg
ret
adc
out
bound
dec
test
fcmovbe
dec
xchg
add
mov
dec
and
loopne
into
fisttp
pop
popf
pop
mov
mov
mov
jb
sbb
inc
xchg
xchg
sub
mov
jb
gs
stos
cli
cld
adc
lahf
and
pusha
lds
sub
mov
add
mov
pushf
stos
cli
fidiv
push
lods
mov
(bad)
mov
stos
popf
xor
xor
adc
and
mov
and
fcmovbe
adc
lahf
in
adc
pop
mov
xchg
mov
rol
rcr
neg
dec
xchg
test
lock
xchg
(bad)
lock
push
std
mov
xchg
test
fimul
push
fadd
sub
inc
loopne
aam
shl
in
das
iret
pop
(bad)
fdiv
ss
jae
js
pop
rcl
adc
jbe
jbe
ins
inc
retf
jns
xor
xchg
enter
ficomp
mov
xchg
fsub
and
add
jne
dec
xor
cmp
cmp
lahf
jno
and
or
outs
add
mov
push
cmps
fmul
cmp
aaa
fbstp
jb
pop
in
sbb
into
jmp
dec
mov
inc
out
sbb
aad
scas
push
icebp
xchg
or
mov
je
mov
cld
sub
cs
shl
loope
push
and
mov
dec
clc
xchg
sbb
out
or
jl
push
pusha
into
adc
cli
out
gs
shr
mov
push
jmp
stos
call
push
lahf
xchg
repnz
ins
iret
icebp
(bad)
sti
adc
in
mov
ins
lock
cmp
loope
in
pop
(bad)
or
pop
ret
mov
sub
sub
(bad)
imul
pusha
push
add
ja
dec
mov
and
mov
mov
ret
mov
sub
mov
mov
xor
pop
cmp
cmp
ss
xchg
out
test
jg
xlat
jbe
pushf
cmp
mov
xchg
mov
retf
loopne
outs
sahf
xor
push
dec
sbb
cmps
mov
ss
daa
mov
and
xor
out
test
pop
aam
es
repz
sub
xchg
or
adc
pushf
rcl
iret
das
cmp
jb
mov
mov
out
add
pop
inc
push
pop
mov
clc
fcom
jl
jg
ins
xchg
ret
mov
(bad)
xchg
fistp
imul
stos
inc
loope
mov
jns
or
mov
lock
fidiv
pop
xor
sahf
xchg
enter
icebp
mov
jns
leave
xor
ret
clc
dec
test
retf
call
mov
popa
bound
(bad)
aas
mov
jge
(bad)
fsub
sub
cmp
or
cmp
loopne
movs
xchg
gs
call
mov
cs
(bad)
pushf
mov
ins
jg
movs
popa
retf
xchg
dec
sbb
jae
pushf
mov
jle
mov
mov
pop
mov
dec
push
clc
fsub
mov
int3
lods
inc
mov
les
cmc
jecxz
int
jne
retf
dec
mov
or
cmp
gs
mov
jge
inc
aaa
sbb
arpl
je
int3
call
rcr
out
sbb
cmp
sahf
mov
daa
mov
fwait
enter
cdq
inc
fdiv
loope
xor
dec
mov
cmps
xchg
pop
xor
mov
or
push
pushf
retf
mov
jbe
ds
test
fdivr
popa
and
mov
addr16
jle
or
sub
lock
shl
mov
xor
xchg
idiv
jno
nop
loop
sub
lods
mov
ins
mov
out
lods
inc
mov
ins
in
daa
cli
retf
push
(bad)
or
pop
xchg
jecxz
lods
imul
mov
fidiv
push
sar
leave
stos
pop
mov
popa
fwait
cld
out
popa
in
sbb
pop
sub
cld
adc
jg
mov
outs
int
shl
loope
add
mov
imul
mov
adc
ins
call
inc
dec
push
bound
int3
mov
cmp
cmps
imul
pop
sub
inc
mov
inc
pop
sbb
and
test
cmc
out
lods
jle
mov
outs
inc
adc
cmps
push
push
jo
in
xor
cwde
stos
xchg
ins
inc
and
or
mov
sbb
loope
xlat
mov
(bad)
retf
and
jmp
adc
les
test
mov
inc
cmp
jmp
cld
cld
jp
inc
sbb
outs
shl
(bad)
enter
pusha
sub
retf
jmp
cmps
dec
jno
popf
sub
mov
imul
scas
add
loopne
xchg
cs
cli
xor
jmp
dec
or
fdiv
xor
js
popa
iret
aas
xor
sub
dec
pop
sub
xor
rol
push
inc
shr
pushf
mov
mov
(bad)
xchg
repz
inc
ret
out
aad
mov
xor
out
push
mov
and
mov
cmp
adc
in
and
aaa
aas
ret
mov
bound
ja
lds
mov
cmp
bound
arpl
push
stos
jmp
test
pop
adc
outs
js
cmc
jle
add
push
scas
inc
sub
int
xor
cmp
rcr
retf
enter
sahf
adc
inc
dec
mov
retf
dec
fist
inc
jge
int
xor
movs
aad
sbb
cli
sub
push
fcmovbe
ficomp
leave
bound
dec
lods
inc
xchg
mov
or
cwde
stos
fidivr
arpl
std
jmp
xchg
es
sti
add
inc
mov
xor
mov
loope
push
and
pop
mov
mov
jmp
pop
sbb
retf
xor
(bad)
mov
mov
push
dec
(bad)
add
add
push
jo
add
push
(bad)
pop
xchg
fcmovne
pop
std
mov
(bad)
mov
loope
aam
mov
xchg
push
ja
rcl
pavgb
push
sub
sub
stos
cmp
loope
cmp
retf
push
and
push
sub
cmps
sub
jmp
fs
mov
fisttp
fdiv
pop
sub
or
jl
xor
pop
push
pop
jmp
es
mov
push
adc
dec
push
gs
or
loopne
pushf
stc
or
(bad)
daa
pop
ins
jle
dec
inc
fwait
pusha
aad
cmp
dec
out
dec
dec
hlt
mov
fwait
aad
in
sbb
sub
hlt
test
outs
(bad)
sbb
adc
imul
lea
out
adc
(bad)
mov
enter
in
out
dec
stc
fdivr
inc
mov
jg
lods
fistp
xor
std
scas
outs
pop
adc
and
or
mov
mov
pop
clc
xchg
iret
(bad)
stos
outs
adc
xor
movs
test
dec
mov
jmp
inc
or
sub
mov
retf
dec
fs
sub
in
imul
aad
stos
shl
cmc
sub
dec
out
(bad)
sar
cmp
loope
stos
lods
cmp
outs
xchg
mov
inc
mov
repnz
fcomp
mov
adc
and
xchg
xchg
mov
xchg
add
push
mov
sub
and
sar
hlt
(bad)
cld
mov
and
sub
iret
mov
sub
adc
pop
dec
or
and
div
sbb
shl
adc
cs
loopne
fwait
repnz
add
in
popf
sbb
dec
push
rcl
outs
stos
cmp
cmc
(bad)
mov
data16
test
add
mul
push
mov
les
cmp
(bad)
adc
mov
in
push
sbb
sbb
xor
adc
push
and
(bad)
adc
mov
cmp
mov
je
mov
xlat
cmp
sbb
not
push
cmp
std
push
scas
xor
fs
xor
sbb
cmp
sbb
add
arpl
xchg
mov
inc
mov
ins
xchg
repnz
mov
inc
adc
push
shl
or
push
xchg
push
jl
adc
mov
jmp
inc
jmp
sub
mov
loop
ds
xor
fwait
std
(bad)
or
lahf
sbb
xchg
retf
enter
rol
push
mov
pop
sub
jo
add
inc
mov
xchg
push
ins
lods
movs
outs
sbb
sbb
mov
cli
ds
and
hlt
mov
fadd
lahf
xor
adc
pop
sahf
jg
adc
or
inc
shl
in
imul
sub
xlat
ja
cli
and
imul
mov
xchg
ja
mov
fdiv
push
rcr
in
xlat
(bad)
(bad)
aad
dec
fisttp
(bad)
mov
aam
mov
sbb
(bad)
outs
fst
sub
retf
and
adc
mov
and
dec
jp
xchg
shl
mov
outs
mov
repnz
push
pushf
or
lds
(bad)
in
sbb
in
adc
aam
loop
jl
in
push
(bad)
mov
mov
and
xor
ret
push
push
push
add
mov
mov
sub
inc
push
mov
test
shr
out
jle
dec
cs
cmps
lea
xchg
loopne
cmc
jle
sub
mov
mov
cmp
push
enter
lods
push
add
gs
les
inc
test
cmc
push
out
lds
inc
cmc
xchg
push
jbe
push
push
aad
mov
pop
xchg
jno
rol
mov
add
loopne
sbb
dec
or
cs
scas
ficom
push
sub
jb
in
pop
sbb
sub
or
jbe
scas
add
(bad)
fs
mov
push
into
stos
mov
jmp
fistp
in
clc
sub
push
scas
ins
or
inc
stos
mov
or
cwde
add
sbb
xor
jmp
in
mov
fsubr
mov
xchg
push
lock
or
cmp
push
jmp
ins
lds
push
cmp
jnp
xchg
xor
movs
jo
mov
mov
sahf
loop
div
xchg
push
test
dec
int
fdiv
retf
lea
adc
call
adc
push
or
and
cmp
fs
out
hlt
inc
push
clc
xor
fcmovb
push
sub
mov
mov
push
sub
and
add
xor
adc
int
add
xchg
dec
or
jg
movs
aaa
ins
test
jp
mov
ds
xor
sub
ror
lock
clc
xor
cmp
sbb
mov
fadd
sub
cmp
bound
mov
sar
fiadd
pop
(bad)
fisttp
pop
mov
cmp
xchg
cmp
ret
sbb
mov
mov
inc
retf
mov
inc
pop
mov
mov
adc
shr
xor
and
rcl
push
mov
inc
lock
mov
retf
enter
lock
inc
sub
adc
lea
add
fbstp
mov
dec
js
pop
mov
scas
mov
loope
inc
mov
mov
cmp
js
dec
adc
push
jbe
and
loope
stc
adc
es
push
lea
imul
add
dec
cmc
popf
fcom
mov
cld
std
popa
rcl
(bad)
cmp
dec
dec
loopne
add
cld
leave
in
xor
jecxz
repnz
cmp
dec
jbe
inc
jbe
sub
mov
int3
dec
ins
dec
or
jmp
sti
mov
mov
(bad)
sbb
ror
neg
xchg
leave
mov
std
popf
xchg
sub
jns
mov
retf
mov
sbb
out
jle
mov
jnp
xchg
clc
cli
popa
out
pop
stos
add
out
shr
inc
push
ja
jae
movs
pusha
ffreep
mov
push
add
inc
loope
xchg
test
or
loope
nop
ret
mov
popa
push
sbb
inc
cmp
leave
mov
loope
hlt
es
scas
jnp
fimul
adc
add
push
sub
inc
out
push
mov
rcl
scas
(bad)
jp
sub
sti
shr
lahf
fndisi(8087
(bad)
jo
int
fwait
iret
sbb
mov
lods
xor
(bad)
dec
pop
or
mov
dec
sub
test
pop
mov
lahf
push
(bad)
cmc
js
das
mov
mov
jecxz
enter
mov
dec
pop
jmp
push
pop
popa
aam
ret
adc
out
retf
or
ja
aaa
loopne
sbb
jge
xor
or
mov
aad
mov
movs
adc
dec
pushf
test
pop
push
imul
jg
mov
cmp
mov
jb
xchg
lock
pushw
mov
xor
cli
mov
sub
sahf
adc
in
inc
mov
fnstsw
icebp
add
push
pop
mov
lock
call
lods
imul
outs
stos
push
mov
xchg
push
or
inc
out
shr
ret
pop
dec
in
mov
dec
mul
js
and
call
in
call
sub
ss
mov
mov
pop
jo
sahf
adc
aas
push
stc
sub
cmp
adc
or
inc
nop
xor
xor
js
mov
push
xlat
adc
mov
add
cwde
imul
push
or
popf
es
popa
out
data16
pop
call
sbb
mov
dec
add
outs
jg
daa
dec
mov
mov
push
xchg
mov
ja
and
icebp
jmp
mov
(bad)
lock
repnz
ins
cdq
sbb
test
mov
aam
test
push
aas
mov
clc
jns
ror
sub
xor
xor
int
mov
add
clc
(bad)
mov
shr
dec
mov
mov
xchg
aas
repz
push
push
(bad)
outs
popf
push
fidiv
arpl
xor
mov
fnstenv
pop
movs
sub
adc
ficom
and
cwde
repz
in
mov
pop
xor
push
mov
stos
mov
lods
dec
ror
sti
adc
xor
push
mov
sub
in
xchg
pop
adc
and
retf
inc
pop
jmp
push
mov
xchg
push
fild
lods
cmps
push
outs
cmp
aam
adc
mov
fnstenv
sub
cmps
pop
retf
aas
call
mov
sar
fadd
js
ret
push
mov
mov
int3
in
inc
adc
aaa
dec
xchg
daa
cmps
xor
xor
add
push
shr
pop
xor
int
shl
out
sbb
mov
pushf
add
push
cmps
lods
and
ds
xchg
mov
aam
jmp
adc
push
mov
fnstsw
or
int3
push
inc
xchg
movs
frstor
inc
mul
or
xor
js
cmp
pop
dec
jo
jno
xchg
fadd
ficom
mov
popfw
or
test
push
mov
dec
add
mov
shr
imul
pop
dec
xlat
xchg
sbb
jbe
or
cli
and
ins
dec
sbb
sar
push
div
sti
mov
mov
sbb
fidiv
cmc
rol
test
movs
push
jl
loope
pop
sub
xor
pop
mov
rcr
inc
dec
enter
push
ret
pushf
push
and
repz
mov
js
inc
fwait
sbb
aas
aad
jno
mov
or
xchg
mov
les
into
mov
retf
aam
pop
xchg
mov
das
test
retf
jp
and
(bad)
or
mov
nop
sar
jbe
ins
adc
cmc
mov
call
and
sbb
shr
out
dec
add
scas
loopne
shl
dec
add
out
cmp
push
fild
mov
(bad)
adc
aam
mov
mov
cmp
les
test
mov
shr
pop
or
and
(bad)
or
push
pusha
mov
imul
scas
lods
in
inc
pause
nop
jbe
xor
pop
mov
mov
and
mov
movs
xchg
xchg
add
mov
pop
jb
rcr
shl
pushf
and
xchg
loopne
movs
add
sbb
inc
in
sub
adc
int3
in
je
mov
dec
(bad)
std
and
fsub
std
xchg
cmps
mov
cs
hlt
mov
cwde
mov
mov
mov
(bad)
sbb
add
pop
test
and
xor
mov
xor
repnz
cdq
(bad)
mov
outs
loopne
leave
gs
pop
mov
in
inc
jmp
movs
sub
push
(bad)
callw
xchg
cdq
lds
retf
and
push
loope
mov
adc
xor
(bad)
aaa
pop
(bad)
inc
jg
and
dec
std
out
iret
movs
es
mov
in
mov
or
jb
movs
jg
mov
mov
out
jmp
jmp
stos
retf
and
neg
(bad)
adc
jp
mov
mov
mov
dec
cmc
adc
test
enter
aam
cmp
or
nop
pop
cld
ds
push
mov
jne
jb
xor
aaa
les
mov
sbb
ror
xchg
out
loope
in
pop
dec
ret
jmp
ds
add
rcl
jno
in
dec
test
daa
sbb
shl
(bad)
jae
pop
sbb
dec
sar
aaa
and
and
inc
cs
icebp
or
es
and
inc
sub
aas
out
popa
cmp
cmps
mov
fnstsw
fdivr
and
rcr
add
jae
ss
cmp
iret
push
jo
lock
push
dec
enter
je
ret
pop
jl
pop
ret
or
mov
cmp
aad
ret
imul
inc
stc
es
aam
jnp
adc
imul
pop
retf
add
xchg
sbb
xchg
retf
into
pushf
sbb
push
(bad)
sub
lahf
test
iret
dec
push
inc
pop
cmp
push
(bad)
xor
es
mov
mov
push
xor
mov
mov
jae
scas
xchg
cld
test
inc
jnp
das
mov
scas
mov
repnz
int
repnz
fisub
sub
push
ins
aaa
sub
rcl
and
data16
test
movs
mov
push
popf
dec
or
aam
enter
add
shl
inc
(bad)
fmul
cmp
ds
cmp
cmp
fidiv
loope
mov
mov
mov
mov
out
adc
ret
shl
xchg
dec
daa
mov
mov
pop
push
jae
call
xlat
loopne
jne
das
imul
push
and
js
test
(bad)
lock
test
ret
sub
arpl
(bad)
mov
or
retf
adc
add
outs
outs
retf
xchg
sahf
push
add
rcl
test
jmp
mov
cs
push
mov
mov
push
cmp
push
xchg
mov
pop
(bad)
sub
jge
cmc
and
rol
aam
pop
mov
stos
jle
mov
pop
(bad)
pushf
push
inc
mov
pop
adc
sbb
push
xor
test
iret
bound
inc
and
retf
xor
fcmovb
push
out
bound
and
fidiv
lock
test
cmps
adc
lea
mov
jge
fldenv
ds
mov
mov
retf
dec
pushf
aas
jle
sti
mov
adc
lods
fisttp
sahf
inc
xchg
jp
ror
pop
inc
popa
pop
jl
jae
cli
ret
push
mov
int
retf
pop
push
call
add
jae
pop
mov
(bad)
retf
hlt
mov
inc
(bad)
lahf
or
xchg
cmc
jmp
adc
je
sahf
aaa
cmp
jp
push
aas
das
mov
or
lods
imul
test
mov
adc
mov
xlat
inc
xchg
stos
lahf
push
aaa
rol
mov
or
rcl
push
mov
gs
xchg
ss
xor
nop
mov
push
jge
push
call
out
push
mov
rcr
vandnps
lahf
push
and
daa
cmp
dec
push
leave
rol
mov
pop
xchg
ficom
adc
and
pop
or
jnp
push
ror
add
sub
mov
leave
pop
add
jg
xor
jp
(bad)
ins
adc
or
in
xor
jle
cmp
cmps
xor
outs
imul
rcr
mov
sahf
jmp
retf
mov
mov
shl
dec
jp
(bad)
mov
rcl
ds
jg
mov
sub
mov
mov
popa
imul
sti
ror
(bad)
lock
jmp
imul
js
in
loopne
pop
xchg
jmp
sahf
mov
sub
mov
dec
aas
xchg
ficom
ret
call
icebp
js
mov
cmp
jmp
out
push
add
or
or
(bad)
pop
xor
or
mov
dec
mov
dec
add
add
sub
pop
push
add
push
adc
mov
loope
test
pop
or
test
bound
ins
js
xchg
rcl
aam
js
jns
inc
xor
test
and
xchg
hlt
jmp
push
pop
cmp
mov
bound
cli
int
push
(bad)
jns
jecxz
xchg
mov
cmp
pop
mov
mov
mov
icebp
push
adc
mov
(bad)
inc
push
mov
arpl
outs
hlt
add
lds
sbb
std
ret
inc
xor
test
das
inc
retf
in
mov
dec
push
aam
xchg
cmc
sahf
jno
outs
repz
pop
mov
rcr
in
out
cmps
mov
adc
add
xchg
mov
iret
fs
mov
fcmovb
mov
jle
jne
adc
jmp
xchg
push
mov
inc
mov
cmp
xchg
pop
loope
inc
aas
(bad)
aam
retf
cdq
femms
out
xchg
loopne
add
xchg
pop
add
mov
retf
clc
adc
loopne
out
retf
aas
(bad)
pushf
jle
jnp
cs
sti
cmps
retf
test
mov
mov
rcr
iret
fisub
jnp
into
jne
ret
leave
pop
(bad)
fwait
into
in
int3
mov
cmp
pop
mov
cwde
call
ds
jne
mov
test
xor
pop
icebp
adc
daa
cmp
mov
jne
sbb
ret
sbb
je
fsubr
mov
add
out
aaa
je
lock
mov
mov
ja
shr
cld
mov
ja
test
sub
mov
add
stos
ret
lods
inc
test
fdiv
stos
pop
stc
rol
fadd
shl
and
fistp
add
popf
add
mov
cmp
fist
cmp
sahf
scas
cli
or
jno
mov
mov
mov
xchg
jmp
aam
inc
xchg
mov
sahf
xor
movs
mov
shl
cmp
mov
aaa
aas
inc
sub
push
(bad)
data16
mov
mov
inc
push
add
das
bound
dec
mov
and
and
mov
sub
push
lock
nop
mov
int
dec
retf
adc
ror
sbb
out
call
mov
pop
pop
sbb
and
push
out
rol
and
ret
lods
ret
inc
jmp
aas
mov
xor
leave
fcmovu
ficom
mov
inc
mov
fld
add
fstp
sub
jae
ret
xor
dec
jnp
cmp
shl
sub
test
xchg
cmp
js
popf
je
push
sbb
in
je
scas
mov
dec
xchg
in
arpl
jbe
mov
fsub
mov
jbe
addr16
in
(bad)
out
sti
dec
push
or
inc
push
in
test
push
into
int
retf
movs
xchg
inc
lahf
leave
xchg
adc
std
out
cdq
loop
pop
xchg
loop
push
call
mov
aas
inc
popf
push
mov
ds
repnz
rol
mov
jbe
repnz
push
dec
cmp
jb
sbb
pushf
(bad)
clc
cmp
int3
push
hlt
test
mov
push
and
xchg
or
ss
pop
mov
ficom
jnp
xchg
out
iret
loopne
cwde
(bad)
fwait
and
cld
repnz
pushf
js
mov
xor
leave
jo
xor
fdiv
xor
push
jmp
or
inc
dec
cmp
mov
enter
dec
mov
pop
cmc
inc
push
fild
fisubr
dec
mov
rep
cmps
jbe
retf
xlat
or
push
sbb
cmps
fucomip
es
mov
scas
das
cmp
xor
loopne
xor
mov
sub
mov
imul
xor
adc
add
xchg
inc
mov
std
mov
lahf
imul
jmp
add
call
xchg
jg
cdq
neg
push
pop
xor
or
inc
cli
sub
ins
std
cld
ficomp
sbb
lea
int3
loop
push
mov
ins
retf
loope
sbb
lods
les
lahf
fisubr
shr
cmp
push
pop
jbe
fistp
xor
outs
add
ret
dec
nop
movs
mov
pop
jecxz
ret
mov
pop
shr
sar
ror
sbb
rcr
shl
es
aam
lods
std
mov
in
stc
push
fs
push
adc
sar
mov
ds
in
loope
mov
sub
sub
adc
stos
int3
jmp
shr
jmp
mov
lock
sub
das
test
sahf
repz
or
lock
shl
cmp
shl
add
jo
les
push
je
retf
xchg
dec
scas
add
adc
cli
nop
dec
cmps
or
fst
xchg
pushf
or
call
xchg
repnz
shl
movs
fstp
rcl
fcmove
and
icebp
fldcw
mov
shl
lods
in
rol
inc
or
out
pop
pop
inc
in
lahf
into
test
fisubr
in
imul
cs
push
add
mov
call
stos
sub
mov
adc
movs
(bad)
out
and
mov
shl
imul
mov
xchg
jg
rcr
(bad)
dec
mov
in
and
outs
sbb
outs
jmp
(bad)
lds
jno
shl
mov
xchg
cmp
imul
aas
adc
inc
out
addr16
adc
and
mov
adc
inc
dec
out
in
aam
cmp
xchg
sub
add
leave
inc
lods
xchg
mov
and
cwde
xor
shr
jae
test
je
mov
fld
fimul
out
call
push
iret
movs
mov
sahf
nop
neg
int
js
cld
jmp
pusha
adc
ret
fiadd
inc
or
fnstcw
aaa
cmp
frstor
xor
mov
aad
retf
loope
push
pop
rol
sbb
and
add
mov
xor
fisttp
mov
aam
cmp
sti
pop
les
mov
mov
push
movs
mov
or
ret
fldcw
in
sbb
push
add
test
inc
adc
dec
aas
mov
and
clc
cmp
xchg
addr16
sbb
gs
push
aas
xor
scas
dec
imul
cmps
mov
nop
adc
dec
std
cmp
sub
or
imul
pop
pop
out
sbb
lea
aam
sub
aad
imul
sbb
add
(bad)
aas
add
aaa
xor
iret
es
aas
push
adc
and
imul
call
in
leave
sar
sbb
push
fidiv
xor
pusha
int
idiv
mov
clc
xchg
add
test
mov
adc
pushf
cli
mov
mov
out
loope
aaa
dec
fld
adc
cwde
jae
fcomp
xchg
push
push
and
ja
and
xchg
retf
jb
sub
scas
xlat
lock
sub
or
retf
fxam
bnd
adc
push
sub
retf
nop
jl
mov
das
push
iret
push
out
push
xor
ret
sub
cmp
jp
jl
or
mov
sbb
mov
jge
cmp
aas
sbb
or
test
ins
cmp
jmp
cmp
sahf
push
pop
popf
jne
mov
aam
iret
pop
test
inc
adc
sub
xchg
and
add
add
cmp
dec
or
sbb
inc
(bad)
aam
outs
push
or
pop
call
mov
or
dec
ins
jb
sbb
sbb
addr16
sub
aam
or
(bad)
cmp
adc
clc
int
pop
jb
sbb
popf
mov
cmps
push
sahf
cld
clc
jp
stc
nop
in
clc
into
lds
jb
sub
repz
xchg
xchg
cmps
pop
inc
stos
stc
or
jae
(bad)
cli
nop
jmp
cli
mov
stos
clc
data16
popf
add
fsubr
aam
push
loopne
cli
jp
sti
nop
in
cli
cmp
or
fbstp
mov
dec
jns
mov
sub
xchg
fld
out
ds
fs
pop
popa
aam
or
and
cmp
pop
(bad)
mov
xor
mov
fmul
jmp
adc
gs
and
dec
cli
test
dec
cs
js
mov
or
push
dec
adc
ja
addr16
cmps
xlat
dec
dec
cmp
shl
in
rcr
shr
rcl
ins
mov
pop
addr16
gs
cmps
add
xor
mov
or
fsubr
fnsave
inc
adc
inc
mov
movs
retf
and
sar
jecxz
mov
dec
jnp
lds
and
mov
or
and
cmp
jmp
inc
loopne
cs
aas
mov
inc
addr16
aam
imul
int
dec
or
or
shl
jmp
das
js
jmp
and
in
add
inc
dec
mov
sbb
jl
cli
xchg
inc
ffreep
dec
push
jmp
sbb
fwait
jp
retf
mov
ds
jbe
push
add
jge
(bad)
dec
mov
jg
data16
xchg
mov
push
ss
cmp
inc
pushw
sub
inc
ss
std
(bad)
out
repnz
bound
push
sub
mov
mov
das
das
hlt
cmp
inc
jecxz
push
mov
cmc
pop
cmp
xlat
xchg
pop
add
push
pop
sub
xchg
or
sub
mov
mov
movs
data16
sahf
cmps
push
and
test
bound
cmp
mov
in
lods
adc
xor
retf
xor
(bad)
lock
push
shr
mov
inc
scas
inc
fisttp
ss
jp
call
std
mov
jmp
outs
jecxz
test
sub
or
jnp
cmc
or
test
rcl
and
add
cwde
out
cmp
dec
or
shr
stos
push
dec
mov
(bad)
jmp
movs
mov
cmp
cli
push
push
fidiv
xor
(bad)
popf
retf
push
fs
push
loop
inc
mov
xchg
cmp
cmc
in
xchg
mov
mov
mov
ds
pop
or
mov
sar
jno
retf
push
stos
sahf
add
test
outs
add
(bad)
dec
pop
cmc
mov
and
xor
pop
ds
or
sub
sbb
jge
(bad)
or
inc
fwait
and
or
xchg
inc
mov
stos
dec
jle
xor
imul
pop
hlt
dec
xchg
(bad)
or
push
mov
and
fidivr
or
call
sub
or
jb
pop
outs
or
inc
(bad)
inc
cmp
jg
repz
cmp
cmp
jg
sub
mov
adc
mov
mov
repz
fs
test
push
(bad)
cdq
fsubp
cmp
(bad)
sub
mov
pop
clc
or
xlat
retf
ffreep
jl
dec
retf
jae
cmp
(bad)
aam
loop
pop
fidivr
mov
ret
xchg
int3
movs
inc
or
xchg
xor
aaa
mov
xor
pop
mov
arpl
cmp
mov
and
inc
in
pop
jl
fistp
or
nop
mov
jno
jp
pop
sbb
mov
dec
xchg
push
mul
dec
in
pusha
in
shr
hlt
test
cmp
fwait
xchg
clc
lahf
ss
fild
mov
mul
enter
pop
popa
push
push
xlat
cld
sub
sub
inc
les
xor
mov
lahf
mov
sbb
fdiv
jns
mov
xchg
test
inc
inc
fstp
cmp
or
(bad)
bound
cmp
cs
pop
cs
(bad)
int3
rcr
inc
fcmovnu
adc
pop
in
mov
mov
adc
mov
jp
jno
sub
mov
mov
je
sub
int
dec
xor
inc
xchg
push
adc
sbb
aam
jmp
sub
not
popa
iret
xchg
xchg
mov
dec
mov
ficomp
fadd
lea
dec
jnp
xchg
icebp
pop
cs
imul
mov
(bad)
std
or
mov
pop
shl
call
ret
dec
sbb
add
add
mov
out
mov
cli
cli
jmp
pop
add
dec
sbb
push
movs
pop
cmp
(bad)
popa
lahf
mov
(bad)
ja
retf
inc
(bad)
mov
mov
into
xor
aam
mov
push
retf
push
push
mov
pop
jmp
and
jecxz
and
lods
into
pop
imul
xchg
cmps
leave
into
push
xchg
and
in
es
jns
jmp
add
iret
cmp
push
add
sbb
pop
xor
sub
mov
jb
rcl
mov
pop
bound
xor
xchg
add
or
nop
inc
or
mov
and
jb
dec
aam
imul
adc
in
arpl
adc
fistp
add
push
xchg
loopne
(bad)
sbb
lods
dec
je
int3
sahf
inc
sub
xchg
push
sbb
inc
sbb
fdivr
(bad)
mov
jecxz
push
add
faddp
popa
jg
pop
mov
cs
cdq
imul
cmp
cwde
adc
or
je
sub
jl
mov
inc
fyl2x
cli
retf
jge
and
inc
or
retf
cmc
sbb
sbb
and
xor
repz
mov
enter
cmps
sub
xchg
sbb
mov
sti
enter
sub
stos
lods
lods
xor
mov
jg
imul
and
dec
fidivr
jnp
sub
(bad)
fdecstp
mov
cmp
add
popa
fcomp
cs
int3
loop
xchg
dec
and
and
dec
inc
(bad)
jmp
cmp
hlt
data16
sbb
mov
jnp
je
add
adc
stos
push
loop
sub
clc
icebp
popa
xchg
add
gs
imul
scas
cmp
sub
xchg
stos
in
jnp
ss
lods
push
pop
dec
adc
rol
mov
sbb
cmp
in
mov
mov
into
dec
mov
adc
and
ret
add
push
mov
dec
jb
int3
xor
aad
and
sub
les
sub
sub
adc
jle
push
std
adc
push
mov
sub
in
lock
push
test
sti
mov
enter
call
aas
jge
imul
hlt
cmps
adc
pop
mov
mov
sbb
sub
pop
add
pop
sti
pop
push
div
movs
aas
or
mov
mov
pop
iret
ret
std
test
mov
jmp
cmp
leave
push
sbb
ret
xchg
dec
sbb
daa
mov
movs
arpl
sub
cmps
and
adc
jecxz
xchg
mov
iret
push
les
and
jecxz
xor
sub
js
dec
xchg
(bad)
jns
and
xor
fwait
xchg
sahf
jl
mul
(bad)
push
out
adc
(bad)
fldcw
pop
lea
aam
jmp
add
ins
sub
idiv
mov
and
push
loope
sbb
stos
call
inc
int3
fsubrp
scas
not
jecxz
(bad)
fistp
mov
clc
das
xor
div
imul
outs
cli
push
add
(bad)
pop
cmps
pop
aaa
mov
in
retf
outs
xchg
das
jl
inc
pushf
(bad)
adc
adc
or
dec
mov
out
sub
sbb
pop
neg
not
mov
and
(bad)
imul
inc
(bad)
jno
fucomi
mov
dec
bound
call
sub
test
pushf
popf
leave
stos
mov
(bad)
jl
outs
push
pop
mov
loopne
xchg
jecxz
or
lds
fldenv
(bad)
clc
mov
xchg
sti
fcomip
or
int3
xchg
in
fxch
xor
retf
repnz
cmp
pop
mov
mov
hlt
iret
dec
sub
cli
mov
fcom
lock
hlt
sub
es
leave
xchg
shl
or
pop
jns
mov
mov
fcom
scas
movs
je
push
push
test
xchg
jnp
inc
movs
dec
dec
int3
xor
xchg
pop
arpl
jne
bound
cmp
mov
mov
retf
in
pushf
cwde
pop
pop
pop
mov
jl
dec
mov
mov
cli
mov
lahf
into
lds
dec
test
icebp
mov
push
je
mov
fwait
push
stc
movs
mov
mov
retf
mov
cwde
jl
sub
fimul
mov
xor
es
aas
and
fcmovb
loop
int
aas
cmps
push
imul
outs
test
fnstcw
test
cwde
lahf
imul
aas
aaa
cmp
repnz
adc
int3
into
and
jge
and
je
add
push
mov
xchg
int
shl
ror
out
inc
inc
scas
pop
adc
sbb
cmp
fidivr
mov
jns
bound
pop
popf
mov
and
rcl
es
mov
into
fidiv
sahf
(bad)
mov
clc
(bad)
adc
div
jno
jne
sub
ins
in
cmp
ret
jg
jbe
pop
mov
xchg
sbb
lods
fs
xchg
(bad)
(bad)
xor
push
or
jmp
fs
jb
int3
les
cmp
cwde
or
ss
cmp
push
and
mov
dec
and
mov
mov
push
dec
test
mov
popa
ds
sub
sub
or
mov
scas
dec
clc
mov
fsub
retf
outs
fmul
push
xor
call
ja
jne
jo
push
and
(bad)
pop
push
test
xor
jb
retf
mov
xchg
scas
sbb
or
daa
enter
mov
ss
sti
in
pop
fdivp
iret
lods
std
dec
jge
repnz
dec
cld
mov
push
mov
out
cwde
invd
out
push
es
jmp
(bad)
push
stos
les
jbe
cmps
jmp
aas
jbe
in
pop
sar
add
ins
xor
movs
xchg
outs
aam
fistp
sub
dec
mov
dec
mov
aad
or
add
adc
sub
sub
rcr
and
mov
mov
loop
jmp
repz
pop
sbb
enter
in
push
movs
jbe
jmp
pop
loop
jns
lds
ret
stos
dec
push
int
and
mov
lods
sub
in
not
shl
ins
pop
sti
loopne
push
enter
push
xchg
push
xchg
cmc
pop
enter
mov
or
je
data16
jecxz
push
loope
xlat
and
out
test
or
popa
pop
in
pop
push
jmp
mov
sbb
lods
add
int3
outs
push
retf
in
xor
out
dec
call
adc
retf
lods
xor
aaa
ret
and
int3
ret
mov
adc
push
neg
ins
pop
mov
or
dec
jae
arpl
mov
push
inc
sub
and
cld
sbb
je
xchg
jne
stos
(bad)
inc
and
jne
retf
shl
cmp
pop
jb
pop
lock
into
add
xchg
cmp
in
ret
or
mov
sub
xchg
movs
inc
test
add
xlat
jo
jmp
jne
and
inc
mov
inc
push
mov
push
mov
out
dec
push
inc
dec
pop
dec
icebp
sti
xchg
jo
rol
jae
pop
mov
sahf
shl
in
ret
cs
scas
adc
add
mov
scas
xchg
bound
or
and
mov
repnz
adc
jno
(bad)
adc
inc
pop
sbb
ins
push
out
leave
les
sub
mov
mov
fwait
sbb
push
into
and
cmp
sub
cmp
lahf
ret
(bad)
sub
pop
enter
mov
cmps
iret
shr
nop
inc
push
sub
mov
ret
cmp
push
(bad)
mov
push
imul
in
js
jo
inc
add
das
mov
jno
push
les
dec
dec
mov
pop
(bad)
fcmovb
enter
dec
pop
into
stos
(bad)
xor
adc
enter
js
ret
mov
cdq
aaa
mov
inc
pusha
inc
inc
stos
mov
sti
js
inc
js
mov
inc
fiadd
je
test
ret
mov
push
inc
jmp
mov
cmps
sub
push
mov
adc
mov
lahf
loope
xor
out
cmp
rol
aaa
cmp
int
std
fwait
(bad)
(bad)
fdiv
call
daa
mov
pop
inc
sbb
sbb
dec
jmp
mov
in
cmp
jg
sahf
wbinvd
inc
ss
xchg
cs
stc
(bad)
ins
adc
cli
jne
mov
jle
les
imul
and
loope
ins
push
fwait
ret
xor
imul
cmc
and
push
xchg
sub
add
mov
sub
aaa
call
inc
push
cmp
repz
sahf
sti
stos
adc
mov
push
lods
aas
stos
inc
inc
xchg
dec
mov
outs
rol
fistp
in
lahf
enter
mov
push
leave
mov
cs
ss
int
inc
mov
xchg
ficomp
leave
cmps
fcomp
test
cmps
or
fst
imul
ficomp
mov
(bad)
leave
sub
cli
mov
leave
dec
retf
mov
sbb
in
or
bound
mov
cmp
push
add
aam
mov
xchg
push
xor
xchg
in
push
pushf
mov
out
enter
mov
mov
sbb
sub
in
xor
push
push
mov
aad
les
(bad)
scas
adc
mov
fild
pusha
sub
mov
xor
(bad)
mov
mov
repnz
push
mov
retf
fwait
repnz
fidiv
in
lds
mov
adc
test
xchg
jmp
pop
sub
test
inc
xchg
fwait
mov
pop
mov
jecxz
add
les
cmp
mov
push
aas
mov
cdq
cmp
or
add
mov
out
pop
adc
mov
pop
mov
add
rcr
pop
outs
ins
sti
lds
sbb
pop
mul
out
cmp
pop
int3
shl
out
jg
lock
and
mov
shl
pop
jg
and
je
adc
out
fiadd
pop
(bad)
mov
push
sbb
sub
xchg
push
popa
sub
xor
clc
pop
pushf
leave
popf
cmps
icebp
pop
mov
xor
jmp
pushf
in
movs
push
arpl
dec
xchg
jo
xor
arpl
xor
push
mov
mov
aam
iret
mov
in
outs
jae
test
jbe
mov
or
push
out
mov
mov
push
dec
adc
fsave
inc
fidiv
jne
or
dec
push
pop
ja
cmp
pop
(bad)
call
cmp
mov
pop
inc
push
in
cmp
xor
loop
rcl
aas
aas
cmp
add
jl
ror
addr16
ret
push
pop
mov
jo
fidivr
inc
out
jns
loope
fcomip
(bad)
jnp
ret
xchg
mov
shr
lea
test
pop
adc
stos
das
jns
(bad)
in
fldenv
mov
dec
dec
mov
stos
data16
xchg
pushf
(bad)
mov
dec
ins
ficom
sahf
shl
mov
mov
wrmsr
dec
or
repnz
cmp
dec
xchg
js
xchg
out
sbb
and
adc
and
mov
leave
imul
sbb
push
jge
mov
enter
pop
mov
xchg
xor
mov
lea
adc
bswap
paddusw
dec
fsub
aaa
xor
xor
aam
int
ins
dec
mov
dec
xchg
rol
aaa
mov
inc
or
jmp
lock
inc
cmp
lea
rcr
xchg
jne
jmp
mov
push
sub
push
mov
ins
sbb
(bad)
cmc
call
xor
mov
cmp
popf
jbe
fidiv
inc
pop
push
cmps
add
push
mov
jp
push
xchg
xchg
(bad)
out
mov
outs
adc
mov
lahf
rcr
repz
inc
inc
push
rcl
fimul
mov
hlt
cmp
adc
adc
push
fild
test
sbb
dec
mov
fmul
fnsave
test
movs
ds
mov
and
(bad)
jmp
mov
jns
int3
out
mov
xor
adc
loope
pop
xor
repz
xchg
push
add
pop
xor
xchg
sbb
fstp
inc
pop
je
dec
mov
mov
mov
fidiv
adc
out
mov
jge
jne
int3
cmp
jne
movs
ret
mov
pop
xchg
mov
out
inc
shr
iret
xchg
(bad)
aad
inc
(bad)
je
(bad)
in
loop
jne
sbb
cmp
push
loop
lahf
in
es
mov
add
aam
outs
push
aad
jno
aad
jns
add
(bad)
loopne
mov
pop
lahf
pop
and
iret
mov
loopne
ins
fist
(bad)
push
and
repz
pop
inc
inc
xor
pop
xchg
fsubrp
(bad)
dec
movs
mov
(bad)
(bad)
sbb
inc
adc
pop
fstp
mul
push
push
mov
(bad)
pop
scas
out
sar
retf
sub
inc
sbb
push
std
xchg
pop
iret
fild
loop
pop
(bad)
push
retf
rcl
movs
js
ret
inc
jb
cli
mov
fdiv
sbb
mov
inc
lea
out
cli
jnp
lahf
sti
sbb
adc
(bad)
fdivr
hlt
push
addr16
movs
cld
loop
xchg
cmp
stos
jb
daa
mov
fmul
xchg
xchg
fimul
mov
repz
gs
inc
in
or
pop
popf
push
sub
inc
sahf
imul
pushf
pop
xlat
cmp
mov
fpatan
push
sti
inc
out
mov
mov
sar
mov
or
inc
inc
sbb
scas
iret
pusha
push
and
mov
ret
xor
mov
sub
cmp
pushf
in
(bad)
outs
pop
sub
mov
(bad)
inc
jo
iret
adc
shl
push
push
fimul
mov
add
fisubr
rol
xchg
popa
add
out
inc
cmps
push
fst
loopne
pop
in
adc
fxch
cli
xor
into
mov
test
adc
add
fs
pop
aas
psraw
aaa
outs
lods
outs
ds
test
mov
lock
xchg
enter
sub
sub
pop
mov
push
retf
leave
scas
xor
(bad)
test
mov
stos
jno
push
inc
pop
sahf
jns
xchg
mov
and
cmovnp
mov
hlt
adc
dec
push
in
lahf
sub
dec
pop
mov
sbb
bound
aam
mov
and
push
retf
mov
jae
mov
repz
mov
jmp
inc
xor
lock
mov
sub
fadd
mov
cs
jb
pop
repz
out
loop
sub
(bad)
lock
fist
lods
je
imul
mov
loope
dec
movs
mov
xchg
test
loopne
(bad)
fiadd
mov
or
add
xor
call
pop
and
or
jp
inc
out
adc
movs
call
ins
inc
dec
sub
js
not
cmp
mov
repz
xor
pop
jp
xlat
ficom
push
out
fucomi
inc
out
mov
lds
mov
mov
fmul
or
mov
clc
cmp
test
(bad)
das
fcomip
shl
push
xchg
test
mov
outs
ret
xchg
add
call
xchg
dec
mov
inc
and
ret
pushf
fadd
mov
test
scas
(bad)
movs
div
jle
cmp
cmp
xor
pop
add
fwait
int3
jo
cli
cmp
push
sahf
jmp
jl
xor
loopne
xor
or
lahf
es
and
test
mov
xchg
mov
push
dec
adc
arpl
add
inc
pop
ins
arpl
mov
(bad)
cmps
sahf
ja
adc
in
rol
(bad)
mov
imul
cmc
inc
(bad)
(bad)
int
mov
xor
ret
imul
adc
mov
repz
movs
pop
mov
ficomp
jp
jg
mov
push
jge
cmps
(bad)
jns
in
xchg
std
jmp
lods
mov
scas
push
in
xchg
in
stos
stos
int3
int3
out
xor
adc
in
jp
lea
add
adc
out
mov
mov
cmp
add
fist
xchg
test
test
repnz
mov
fcom
mov
mov
ret
call
loopne
adc
out
imul
xchg
xchg
pop
sbb
dec
out
js
shl
ins
fisubr
mov
sub
mov
repz
int
cmp
daa
xchg
and
rol
jne
and
shl
push
jnp
repz
inc
cmp
cmp
sti
fbstp
fsubr
jle
popf
mov
cmc
inc
xor
add
cmp
mov
ror
int3
mov
(bad)
mov
jns
scas
mov
cld
adc
sbb
inc
mov
loopne
std
fimul
pop
mov
arpl
fnstcw
loope
push
loope
xor
and
sbb
movs
mov
pop
sub
inc
push
sahf
and
and
sub
xor
ret
sub
retf
jl
sub
dec
movs
ja
fcom
sbb
cld
pop
out
sahf
inc
js
push
ret
test
jl
mov
jg
pushf
xchg
mov
cmc
xor
push
xor
xchg
jbe
push
dec
add
dec
ret
pop
inc
test
dec
enter
lods
(bad)
xchg
mov
mov
ret
xchg
push
cmp
loope
rol
into
adc
dec
mov
and
icebp
fistp
sbb
add
adc
mov
mov
pop
mul
rcl
mov
cmp
push
scas
adc
and
mov
mov
mov
and
nop
sub
stos
mov
mov
adc
and
ss
pop
sub
fisub
hlt
mov
pusha
dec
hlt
inc
daa
xchg
(bad)
lods
test
int
push
clc
lock
aaa
mul
dec
sub
xchg
xor
xchg
pop
mov
pop
and
ret
retf
sbb
shl
mov
xchg
cmc
jl
sbb
aam
cmp
(bad)
fidiv
iret
cmp
mov
mov
fwait
pop
imul
in
std
arpl
add
ja
pop
sar
xor
stos
sbb
sahf
adc
xor
mov
add
mov
cmps
jp
jno
test
push
xchg
stc
cmp
dec
(bad)
fnstsw
jge
xor
lahf
nop
not
aad
sub
icebp
test
xlat
jmp
iret
mov
es
and
call
ins
aad
xchg
push
int
or
retfw
call
sub
sar
sub
test
xchg
push
xor
mov
aas
lods
jp
xor
adc
repz
fisubr
xchg
sbb
ss
lds
retf
popf
inc
test
cmc
lods
nop
aam
pop
imul
mov
push
pop
jmp
push
xchg
leave
dec
inc
mov
test
xchg
sahf
mov
fst
adc
(bad)
shl
ins
mov
es
jb
ret
ss
mov
stos
add
ror
xchg
pop
adc
pushf
movs
mov
ja
pop
xchg
stos
outs
dec
push
data16
sub
jmp
out
add
xchg
jmp
xchg
pop
(bad)
xchg
cwde
pop
int3
cmps
adc
jle
fstp
sub
lods
clc
in
xchg
push
mov
(bad)
pop
pop
jae
lods
into
fisubr
leave
xor
fmul
sbb
push
sbb
add
jnp
retf
xlat
mov
cmc
jnp
xor
dec
movs
mov
rol
out
cmp
add
cmp
(bad)
retf
mov
xor
sbb
je
into
shl
fist
adc
and
jae
popa
jge
aad
pop
mov
test
push
outs
mov
mov
aas
xor
out
push
push
loopne
bound
and
cmps
ret
repnz
cld
push
mov
jo
sbb
mov
ss
ds
pop
add
xchg
sti
add
test
mov
repnz
sub
push
xchg
xchg
xlat
cmp
cmps
in
fidiv
(bad)
nop
jno
lods
mov
cld
fstp
pop
dec
js
jae
sbb
fcomp
or
mov
cli
shl
cmp
inc
arpl
mov
push
(bad)
(bad)
(bad)
xor
dec
mov
inc
sar
and
mov
cmps
push
cld
jns
push
je
mov
outs
shr
mov
mov
cmp
into
push
pop
inc
pop
retf
jecxz
jecxz
adc
test
jmp
call
stc
ins
sbb
jge
cmc
test
lods
jmp
clc
bound
sub
xor
mov
daa
call
and
ins
xchg
push
cmc
jb
xchg
cmp
call
movs
adc
cmp
outs
lods
mov
and
adc
dec
dec
lock
rol
outs
cmp
sub
and
retf
dec
(bad)
js
push
mov
aad
ss
pop
stc
pushf
cs
test
xor
cmp
mov
in
dec
(bad)
call
pop
(bad)
je
mov
adc
das
data16
push
xchg
jmp
(bad)
daa
mov
mov
jmp
fwait
mov
or
jmp
retf
enter
push
int
mov
ret
scas
movs
lods
rcr
add
pop
sbb
movs
lahf
xor
retf
stos
cli
inc
shl
call
leave
push
imul
cld
pop
mov
fnsave
xor
xchg
in
mov
mov
dec
lods
jae
nop
xchg
sub
sbb
fimul
jae
add
lods
dec
push
inc
out
test
sbb
cmps
cmp
js
fs
mov
or
retf
lds
out
jecxz
into
(bad)
xchg
cmp
adc
mov
xor
xor
fnstcw
cwde
jo
mov
cli
cmp
push
mov
xchg
mov
fdiv
idiv
(bad)
loopne
cs
jnp
dec
sbb
mov
sar
cmp
jns
shr
ficomp
sbb
fst
inc
repnz
push
out
pop
(bad)
(bad)
push
cld
cmp
scas
jge
sar
cmp
push
push
xor
inc
adc
in
xor
in
stos
jno
mov
scas
loopne
sbb
outs
aas
(bad)
(bad)
sbb
ins
inc
in
jmp
dec
daa
mov
dec
mov
test
pushf
push
cli
or
aaa
inc
lods
xor
xchg
fld
sahf
xor
(bad)
fst
aad
xor
retf
ins
loopne
or
scas
inc
dec
daa
push
das
cs
(bad)
sbb
push
loope
fimul
inc
fisub
sbb
mov
pop
packsswb
cmp
mov
mov
icebp
lods
retf
mov
mov
xchg
imul
inc
xchg
mov
repnz
aad
push
mov
dec
dec
xchg
out
sub
stc
mov
sub
pop
or
jmp
pop
mov
push
aam
or
and
xchg
in
jnp
adc
inc
push
jne
ror
jae
ret
test
cmp
add
adc
lea
inc
pop
cwde
cli
add
jle
mov
jmp
rep
pop
fisub
es
and
iret
adc
es
jg
sbb
or
addr16
cmp
cmp
in
and
push
fiadd
lock
shl
mov
scas
cld
test
arpl
das
cwde
push
and
add
adc
pop
mov
imul
es
mov
call
mov
sbb
stc
shl
ret
ret
(bad)
lahf
push
jmp
push
jecxz
enter
test
xchg
push
and
dec
inc
xor
std
xchg
mov
retf
bound
(bad)
in
test
mov
out
icebp
cmp
ins
mov
(bad)
sbb
push
dec
es
int
in
cmps
pop
cmp
cmp
sub
push
or
inc
and
pop
fst
pop
(bad)
imul
mov
sub
push
retf
inc
out
pusha
jne
mov
mov
mul
jne
push
stos
add
mov
jle
push
xchg
jp
pop
je
stos
pop
retf
das
test
out
mov
test
outs
cmp
xor
out
mov
mov
imul
lock
adc
mov
div
mov
std
sub
and
shl
movs
out
retf
int
out
jp
mov
xchg
cmps
test
(bad)
enter
dec
xor
mov
jp
icebp
sahf
loopne
push
jns
jae
(bad)
sahf
dec
jg
enter
jmp
sar
ja
mov
mov
mov
sti
dec
xchg
sub
cmp
mov
pop
cli
fwait
lahf
xor
not
cmp
mov
(bad)
lock
jl
in
cdq
jp
xor
pushf
and
cmc
movs
daa
xor
test
add
cmp
sbb
lods
sub
push
(bad)
movs
xor
mov
inc
pop
sbb
adc
cmp
iret
or
inc
and
xor
inc
mov
dec
mov
in
rol
pop
cmp
mov
sti
imul
out
stc
cmp
pop
inc
jle
sbb
add
fimul
aaa
repnz
xor
ret
std
hlt
jg
imul
(bad)
dec
inc
pop
dec
retf
or
enter
push
jp
xor
outs
jbe
sub
and
frstor
(bad)
fwait
mov
mov
inc
xor
bound
ss
xor
bnd
mov
pop
pop
ja
test
cmps
repz
aam
mov
mov
fstp
xchg
adc
retf
mov
mov
xchg
in
sub
or
sub
pop
sti
fcmovb
gs
shl
mov
movs
dec
jne
stos
shl
rcr
sub
(bad)
pop
lock
or
xor
sub
push
pop
push
adc
adc
cmps
loopne
fcomp
mov
cmp
and
pusha
cmp
and
mov
mov
fwait
jb
cmp
mov
retf
sti
adc
fisub
add
fs
test
mov
mov
push
cmp
and
cmp
clc
aam
loop
pop
cmp
es
ficom
adc
fldln2
push
inc
movs
push
pop
(bad)
fidiv
iret
in
sub
xor
bnd
dec
(bad)
ftst
adc
sahf
mov
push
cli
(bad)
aam
mov
dec
xchg
push
fiadd
push
iret
lock
std
push
mov
ds
pushf
pusha
sub
fs
js
sub
and
mov
cmp
mov
mov
ret
lds
(bad)
fistp
sbb
inc
(bad)
cmp
add
dec
retf
mov
mov
cli
adc
cwde
aad
gs
add
les
xor
push
mov
push
jle
cmp
cmp
add
iret
inc
jmp
pop
or
cmp
retf
mov
fld
cmp
lea
mov
xchg
scas
retf
mov
stos
ds
pop
jo
shl
into
fstp
aas
movs
mov
mov
fsubr
cmp
inc
mov
pop
xor
aad
clc
push
fst
in
pop
vmovaps
xor
pop
aam
mov
mov
mov
pop
xchg
and
mov
pusha
sbb
out
sub
(bad)
cmp
dec
dec
push
pushf
ds
fs
les
je
lds
mov
mov
adc
out
cwde
les
jnp
popf
xchg
arpl
mov
push
(bad)
mov
add
out
dec
popf
clc
repnz
sbb
xchg
add
pop
repz
ret
in
fadd
jmp
mov
push
xchg
shl
xchg
jecxz
ja
ss
xchg
std
xchg
mov
sti
aas
sbb
sbb
adc
test
stc
push
enter
dec
mov
vsqrtpd
lock
lahf
hlt
ins
iret
movs
sub
shr
enter
add
cwde
xchg
inc
add
mov
nop
dec
(bad)
popa
ja
jae
nop
or
icebp
pushf
add
iret
imul
mov
aas
jp
shr
dec
pop
jecxz
repz
sahf
(bad)
push
mov
mov
jg
xchg
js
(bad)
jae
outs
add
sbb
xchg
jbe
jb
xchg
hlt
bound
cs
rcl
push
mov
ret
sti
icebp
xchg
push
cmp
cwde
in
jmp
pop
leave
add
scas
jmp
fsubr
fmul
jae
enter
sahf
popf
sbb
inc
adc
shl
loop
sub
stos
outs
lds
xor
jge
adc
mov
xchg
aad
(bad)
add
(bad)
inc
xchg
and
adc
inc
out
and
inc
clc
pop
pop
sahf
fstp
sub
sti
cmps
in
repz
sar
jne
dec
mov
lds
push
dec
add
sub
(bad)
dec
jl
fwait
mov
fnsave
dec
(bad)
dec
popf
in
leave
jb
nop
xchg
addr16
ds
xchg
or
cld
inc
mov
xchg
loope
clc
dec
jmp
mov
and
xchg
adc
sbb
push
pop
mov
add
xor
xor
mov
shl
aad
fs
mov
fcom
jno
or
xor
and
push
and
xor
mov
inc
fidivr
outs
ins
and
std
jae
jecxz
jne
in
mov
xor
jmp
pop
sbb
mov
test
mov
push
push
mov
das
sti
mov
in
fcmovnu
or
clc
das
lds
test
add
das
mov
cdq
out
stos
push
repnz
xor
xchg
mov
jl
shl
cdq
jge
out
mov
mov
ret
movs
push
dec
or
mov
(bad)
out
int3
addr16
xor
sbb
xchg
mov
ret
add
test
idiv
sub
adc
sti
cmp
push
enter
sub
repz
pop
into
or
arpl
jmp
out
ins
inc
mov
and
xor
retf
(bad)
in
inc
fs
scas
mov
in
test
les
jmp
fidivr
scas
sub
xchg
xchg
cmc
out
stos
mov
mov
daa
shl
mov
pop
js
and
push
retf
push
paddsw
test
dec
adc
mov
and
in
repnz
adc
ret
jmp
bound
call
xor
cmp
cs
mov
fisttp
mov
frstor
jbe
xchg
retf
jg
mov
cld
jg
and
push
xlat
lock
imul
jge
nop
fs
mov
loope
outs
mov
dec
popa
xor
jb
jo
jno
xchg
pop
xchg
loopne
test
sub
dec
jmpw
sbb
push
scas
jmp
inc
cwde
clc
adc
fdiv
mov
sub
inc
push
dec
lods
(bad)
in
jge
mov
pushf
fsubr
fstp
jmp
adc
repnz
(bad)
rol
test
xlat
bound
push
add
xchg
xor
xlat
cwde
rcl
repnz
test
ins
fsubr
sub
jp
(bad)
pop
inc
bound
cmc
xchg
mov
test
out
cmp
ror
mov
les
xor
daa
jns
lahf
in
retf
hlt
or
mov
mov
mov
push
push
pop
loope
inc
dec
dec
mov
cmp
jp
ins
push
(bad)
arpl
retf
(bad)
pop
dec
cmp
or
rcr
mov
mov
clc
cmp
mov
inc
sub
mov
ins
mov
dec
scas
jp
(bad)
ss
fwait
push
fisttp
lahf
inc
icebp
test
ss
in
or
imul
and
pop
pop
leave
outs
cmp
popa
inc
dec
mov
lds
rcl
sar
mov
pusha
mov
inc
fimul
mov
aaa
arpl
in
cmp
mov
retf
dec
jle
add
push
xor
aaa
cmp
jp
sbb
jnp
push
repnz
test
sbb
xor
les
(bad)
fcmovne
hlt
sub
ss
out
lds
mov
xor
pop
hlt
xchg
or
loopne
mov
stos
stos
dec
mov
dec
ja
lods
or
(bad)
or
add
scas
fwait
ss
xor
push
adc
arpl
jmp
adc
popf
out
mov
mov
add
push
cmps
adc
and
in
(bad)
aam
jmp
(bad)
dec
add
mov
cdq
bound
pusha
and
imul
inc
ss
cmp
test
adc
call
jmp
jmp
fisub
sub
sahf
xchg
cmps
mov
xchg
ds
inc
(bad)
and
aad
mov
cmp
sbb
mov
cmp
(bad)
add
pop
mov
sub
jo
scas
xor
pop
pop
ret
enter
mov
cmp
(bad)
pop
cli
icebp
mov
inc
fwait
mov
(bad)
aas
imul
fcomp
test
sbb
mov
fcom
or
mov
and
jg
xchg
rcl
mov
pop
mov
(bad)
cli
xlat
sar
pop
inc
movs
jnp
mov
xchg
(bad)
push
xchg
add
fwait
xchg
push
dec
stc
cli
pusha
dec
lahf
shl
repz
sbb
bnd
sahf
fwait
in
pop
sub
call
inc
xchg
push
adc
ins
movhps
jg
inc
ror
imul
add
push
(bad)
lock
pusha
dec
mov
dec
mov
add
lock
cmp
push
cs
clc
pop
pushf
aas
sar
push
jl
mov
xchg
ror
dec
pop
xor
inc
fmul
push
rol
mov
es
cmc
js
fs
fdiv
inc
pop
adc
sub
mov
out
fld
cmp
fst
inc
cmp
sub
js
dec
mov
fs
test
cmc
pop
sbb
clc
pop
pop
pusha
leave
push
enter
aam
loop
push
loope
jae
jle
lahf
retf
jmp
jmp
scas
dec
jnp
ja
cmc
pop
shr
lods
xor
sahf
data16
jne
mov
mov
adc
sub
mov
addr16
scas
push
fimul
mov
inc
sar
imul
xor
(bad)
sti
sub
or
sti
jg
sbb
mov
push
cmp
cmp
sub
add
pop
(bad)
pop
inc
pusha
cmp
mov
int
stos
mov
mov
mov
(bad)
aaa
pop
sub
and
mov
popa
pop
fnstsw
xor
nop
jle
jns
retf
and
lds
mov
stos
mov
inc
fmul
js
and
jne
jae
add
dec
repz
xchg
xchg
push
(bad)
push
out
cli
mov
xchg
sub
mov
xchg
mov
push
mov
(bad)
nop
xchg
sbb
xchg
ins
pop
gs
or
fwait
adc
rcr
xor
xchg
int
dec
cmp
es
add
mov
add
jge
hlt
sti
retf
ss
adc
test
jge
out
inc
and
aaa
outs
jl
xor
ss
sub
cmp
movs
and
cld
retf
inc
mov
(bad)
int
xor
div
xchg
fcom
sar
stos
pop
sub
loopne
fwait
or
jl
mov
addr16
xor
aas
and
adc
cld
cmp
ficom
pop
sub
adc
cwde
aam
fisubr
adc
stc
jmp
pop
movs
(bad)
sub
adc
arpl
and
add
fdiv
test
mov
push
aaa
adc
inc
or
mov
popf
push
add
call
add
adc
and
ror
mov
xor
into
sub
dec
mov
jl
fnsave
bound
lods
test
inc
shr
sub
mov
rcr
scas
je
jns
mov
or
xchg
jae
sub
(bad)
call
inc
leave
and
adc
iret
(bad)
mov
loope
xchg
sbb
loop
push
cmps
adc
mov
shr
push
jmp
iret
inc
(bad)
xor
lahf
lock
aas
add
mov
cmp
lods
jnp
sbb
lea
xor
pop
xor
clc
sbb
pop
(bad)
adc
or
ss
ins
es
call
and
fmul
sub
ret
les
jno
mov
rcr
aas
int
aaa
ds
mov
bound
repz
push
jge
push
ficomp
jmp
sbb
fcom
ret
je
pop
int
add
stos
add
push
stc
add
rcl
aas
mov
arpl
(bad)
out
retf
xor
xor
push
out
pop
mov
xchg
pop
mov
stc
xchg
xchg
pop
jg
jno
repnz
arpl
sbb
cmp
pop
dec
stos
mov
or
adc
cmc
ret
sbb
out
nop
add
push
add
popf
push
es
cmp
ret
xchg
sub
jbe
aas
adc
push
mov
or
or
push
test
xor
popa
add
mov
retf
mov
xchg
js
jo
and
xchg
mov
sbb
imul
jge
xchg
fdivr
fs
add
retf
and
xchg
sahf
fst
cmps
cmps
(bad)
push
cli
jo
xchg
xchg
pop
mov
add
or
loopne
shr
enter
dec
mov
clc
push
das
dec
pop
jmp
js
lods
xchg
out
mov
jo
push
popf
push
adc
dec
sbb
mov
arpl
pop
jmp
shl
push
jmp
in
(bad)
js
aam
xor
in
mov
or
xchg
pop
dec
pop
mov
ds
sub
push
dec
int
and
sar
stos
sti
rcr
xchg
mov
std
daa
fdivp
mov
in
clc
stos
xor
mov
out
dec
test
cld
cli
fcmovbe
or
scas
mov
or
adc
or
cli
sub
mov
fwait
mov
cmp
cmp
push
pop
stos
out
in
xor
hlt
push
inc
push
inc
retf
call
dec
sub
lods
sub
mov
call
icebp
movs
pop
(bad)
sub
adc
adc
add
adc
pusha
xor
inc
dec
mov
inc
fst
sahf
jmp
fwait
dec
mov
test
stos
retf
(bad)
cmp
push
push
xor
jne
sbb
stos
int
in
dec
add
adc
(bad)
fisttp
xchg
and
data16
ds
xor
mov
pop
xchg
aas
clc
and
out
retf
mov
xor
pop
test
cmp
xchg
dec
xchg
cs
movs
dec
inc
popa
repnz
mov
vphsubwd
std
outs
into
push
bound
dec
sbb
mov
std
cmp
cmp
inc
fnstsw
push
cli
repnz
cmp
inc
cmps
rol
(bad)
xor
inc
add
in
cs
or
push
les
iret
lds
enter
pop
push
in
(bad)
and
test
shl
ficom
and
mov
mov
cmps
rol
dec
push
clc
repz
dec
cmp
mov
cld
repnz
mov
xchg
inc
cmps
out
ins
fucomi
in
cmp
lods
mov
imul
repnz
mov
pop
jmp
cmp
xchg
jge
push
ret
mov
jmp
xchg
adc
sub
inc
inc
mov
pushf
pop
rcl
inc
xchg
stos
out
mov
xor
sub
xchg
mov
scas
pop
clc
in
sbb
jmp
int3
mov
in
cld
shl
addr16
and
push
mov
lock
cs
sub
mov
or
(bad)
mov
ins
popa
xor
dec
outs
popf
fadd
jmp
fcomp
sub
aas
shl
jle
pop
arpl
test
xor
addr16
mov
xchg
and
shl
pop
(bad)
pop
mov
enter
iret
aam
and
xor
mov
cli
adc
inc
call
xor
jg
test
fbstp
adc
aam
and
loop
ins
xchg
repz
fld
shl
or
push
sti
jae
es
das
mov
loope
mov
jns
fwait
in
mov
lds
mov
cmp
rcl
sar
and
pop
(bad)
jp
dec
sbb
push
pop
cmp
cmp
fstp
cmp
ds
sub
icebp
lahf
inc
int3
jo
gs
fmul
gs
nop
jno
into
dec
mov
jecxz
jg
push
xor
fisttp
mov
(bad)
movs
mov
aas
out
mov
inc
aam
mov
mov
dec
and
or
cmps
mov
pop
adc
dec
xchg
(bad)
imul
hlt
call
mov
push
loope
or
nop
mov
out
xlat
daa
mov
jmp
jp
sub
mov
and
and
cmp
pusha
test
pop
adc
xchg
jp
out
push
clc
loope
sti
and
loopne
cmp
arpl
xchg
mov
mov
in
mov
mov
adc
(bad)
shl
test
push
popf
cmp
cmp
or
xor
loopne
es
cld
int3
and
sub
retf
sbb
pop
xchg
(bad)
icebp
adc
icebp
and
and
aaa
jecxz
shr
dec
sub
cwde
stos
clc
adc
shl
cmp
repnz
push
push
xor
sbb
ud0
hlt
adc
mov
ins
sbb
cmp
jg
sbb
mov
and
mov
out
popf
push
stc
jmp
pop
iret
es
lock
pop
xchg
cs
or
mov
mov
test
jmp
fdiv
inc
ret
rcl
ror
loope
fist
inc
mov
xlat
jg
pop
mov
test
pop
dec
mov
mov
mov
sar
outs
fs
scas
pop
fild
sub
dec
leave
lahf
int3
jl
inc
adc
add
ss
sub
mov
jge
das
out
jmp
(bad)
jbe
jne
rcr
cld
sldt
rol
fs
into
data16
xor
mov
retf
cmc
lds
int3
call
nop/reserved
xor
dec
mov
sbb
aad
mov
inc
fild
mov
loopne
pop
sub
rol
ret
sti
mov
push
fwait
int3
imul
mov
xchg
movs
ret
idiv
bound
or
sub
test
push
aam
imul
dec
(bad)
not
sub
mov
aas
es
daa
pop
cli
aas
xchg
je
sbb
xchg
scas
sub
adc
mov
hlt
pop
es
jl
xor
and
mov
xlat
inc
mov
or
fucomi
aaa
xor
pushf
sbb
and
dec
ins
cdq
sar
xchg
test
or
jmp
ins
mov
clc
dec
scas
hlt
fadd
iret
mov
sar
pop
push
das
mov
clc
sbb
stos
mov
in
out
add
call
or
out
shr
(bad)
iret
sub
xor
arpl
fistp
(bad)
and
mov
psubw
or
and
sub
push
xor
clc
sbb
mov
and
sbb
dec
jg
xchg
movs
mov
ins
es
movs
dec
test
mov
call
inc
xor
jmp
es
hlt
es
push
sub
repz
mov
div
outs
aaa
xor
push
inc
movs
pop
ficomp
in
outs
mov
rcr
(bad)
fld
mov
cmp
inc
lock
mov
aad
inc
call
cld
ja
and
(bad)
ror
jo
sub
fs
push
mov
mov
aaa
cmp
aas
repz
lea
or
jb
retf
cvtps2pd
lahf
mov
stos
ins
rcl
adc
rcl
and
xchg
mov
inc
jmp
or
fyl2x
rcl
sub
mov
push
enter
pop
stos
and
cmp
(bad)
xor
or
movs
repz
cli
dec
ds
sar
xor
test
mov
jb
movs
rcr
and
jnp
jbe
xchg
jae
pop
adc
xchg
sti
and
mov
pop
ja
movntps
push
pop
inc
lea
and
push
adc
out
jmp
aam
fwait
mov
aas
shl
or
int3
ins
or
jno
pushf
push
sbb
std
iret
push
out
cmp
push
sbb
jmp
fdiv
mov
rol
ret
mov
shl
lahf
push
cwde
adc
icebp
cmp
aam
shl
mov
in
and
ret
mov
ret
out
jecxz
out
cmp
movs
ret
test
mov
bound
xor
fucom
add
arpl
(bad)
jecxz
cdq
xor
js
lods
mov
hlt
dec
pop
shl
jns
arpl
mov
test
sub
jp
jae
sbb
sbb
pop
ins
jp
lock
cmc
sbb
movs
aas
or
pop
jg
les
sar
repnz
sbb
out
(bad)
outs
pop
and
call
add
loop
fst
push
push
mov
lock
icebp
push
inc
sti
les
mov
pop
popf
pop
test
add
mov
inc
dec
xchg
inc
cs
test
mov
pusha
pop
cmc
call
sahf
test
inc
xchg
mov
mov
retf
imul
stos
sub
pusha
sbb
jbe
repnz
cmp
cli
add
rcr
sar
and
pop
push
nop
jo
stos
push
ins
push
push
add
inc
inc
cmp
jnp
jno
idiv
mov
cld
or
out
adc
test
mov
daa
jp
movs
or
test
dec
iret
dec
aam
loop
add
dec
and
jmp
mov
out
dec
and
ins
popf
outs
gs
sub
push
pop
sar
xchg
aaa
mov
pop
aad
mov
mov
in
(bad)
ja
xor
rcl
fiadd
rcl
pop
enter
(bad)
push
pushf
mov
cmp
add
out
shl
ds
les
push
sbb
dec
sub
push
jge
mov
pop
mov
jno
fld
fstp
fucomp
fidivr
arpl
adc
(bad)
fbstp
rcr
dec
add
shl
test
cmc
cmc
jge
fcomp
cli
add
ret
mov
mov
jno
test
mov
int3
pop
(bad)
aam
ror
retf
fild
fwait
sub
push
mov
add
inc
xchg
add
bound
dec
and
lds
jp
pop
fnstenv
shl
push
daa
aam
das
repnz
aad
lock
fldcw
in
in
ffreep
bound
loop
xchg
and
mov
fsub
push
add
retf
loop
mov
out
sub
outs
icebp
cdq
aaa
inc
arpl
pushf
aaa
adc
fbstp
xor
fstp
aaa
jae
in
mov
ins
or
mov
fisttp
jbe
(bad)
mov
cmp
popf
ds
out
lock
enter
xchg
bound
or
(bad)
jecxz
hlt
cmp
push
mov
(bad)
xchg
xchg
mov
jnp
icebp
add
cli
hlt
rcl
es
jb
adc
push
sub
pop
mov
xchg
test
test
cwde
dec
mov
out
clc
adc
push
push
mov
aas
ror
cmps
in
xchg
add
ds
mov
loope
shl
es
mov
jmp
call
fild
mov
into
and
adc
cmp
rol
sbb
aaa
adc
sbb
xchg
not
scas
fdiv
dec
mov
mov
popf
rol
getsec
in
xor
pop
out
mov
xor
test
sub
sahf
or
xchg
push
setle
mov
push
push
dec
fst
and
aas
bnd
sbb
int3
sub
std
ffree
mov
sub
scas
xchg
mov
enter
loope
iret
mov
push
cmps
sbb
scas
scas
xor
inc
cmps
cmp
es
and
call
pop
cmp
lea
psubsw
mov
movs
aaa
pop
add
mov
mov
dec
hlt
icebp
cmp
fstp
cli
mov
or
icebp
cwde
mov
add
inc
sbb
std
ja
cwde
push
popf
add
(bad)
iret
adc
cmps
sbb
ss
jle
stc
adc
dec
mov
xchg
add
xor
or
fwait
inc
cmp
(bad)
adc
aas
jb
adc
aad
mov
fdiv
out
sti
fst
dec
xchg
outs
xchg
xchg
and
gs
(bad)
jmp
jge
fimul
pop
pop
int
xor
popa
xor
in
cmp
lods
call
js
dec
push
mov
inc
and
outs
sar
mov
addr16
xor
or
in
bound
inc
sub
test
lahf
cdq
out
add
fcomp
add
mov
shl
rep
mov
cwde
lods
add
and
cmps
cmp
inc
or
test
addr16
or
cmp
adc
pop
rol
or
in
aaa
xchg
ret
lock
jns
dec
es
mov
aad
dec
sub
data16
mov
ret
push
adc
iret
xchg
sub
and
mov
xchg
(bad)
retf
and
int3
mov
sub
dec
retf
jbe
or
dec
xchg
iret
dec
xlat
in
mov
ja
(bad)
aad
pop
into
cmp
jl
pop
(bad)
adc
loopne
(bad)
pop
adc
cmp
sbb
xchg
add
push
fstp
test
out
popa
mov
mov
test
stos
pop
jbe
call
iret
stos
(bad)
pop
ins
push
pop
daa
sar
into
jnp
out
iret
cmp
jge
ss
mov
stc
adc
adc
sar
mov
sub
das
test
pop
push
pusha
jmp
adc
int
stos
sub
xchg
cld
inc
lea
fistp
mov
push
xor
dec
iret
cmp
fucom
mov
aaa
popf
fbld
call
push
test
test
cs
call
mov
cli
inc
pop
jbe
ins
in
(bad)
stos
std
add
fisubr
sbb
ds
jg
add
mov
movs
imul
rcl
xchg
fist
test
xor
clc
sub
inc
scas
js
stos
imul
adc
mov
cli
jmp
xchg
xlat
pop
pop
popf
push
fst
test
mov
or
stc
cmp
or
xor
(bad)
fisttp
mov
in
(bad)
cmc
inc
in
fsubp
and
fisub
inc
inc
push
imul
cdq
jecxz
xor
enter
cld
clc
lds
lock
push
inc
retf
or
ins
cmp
push
xchg
and
sub
adc
out
mov
popf
iret
cli
xchg
pop
mov
sub
cmp
bound
mov
rcr
clc
sbb
popa
add
mov
in
sbb
mov
call
cwde
jge
pushf
in
fs
sbb
inc
push
cmc
loop
xchg
cmp
fdiv
sbb
loopne
pushf
scas
aas
popa
shl
mov
mov
movs
sbb
xor
in
shl
icebp
imul
dec
out
sbb
outs
int
xor
int3
xchg
pusha
mov
push
sub
inc
test
mov
stc
push
inc
inc
xor
(bad)
dec
inc
jg
cmp
sub
repz
cmp
clc
repnz
das
test
ds
cs
sub
mov
xchg
adc
dec
xor
fs
sub
stos
cwde
aaa
jns
xlat
cs
jle
sbb
fnstsw
cdq
rcl
jbe
lock
enter
ret
inc
inc
add
inc
fs
jecxz
jae
in
sub
ds
rol
sbb
xor
mov
mov
(bad)
pop
cmps
adc
enter
or
and
(bad)
(bad)
sti
mov
mov
mov
psadbw
popf
jp
xchg
mov
shl
cmp
lea
pop
dec
xor
inc
and
pushf
sub
sahf
xor
mov
pop
xlat
xor
or
retf
jp
jo
inc
push
cmp
or
ins
iret
mov
push
push
cmp
push
sub
cli
lds
aas
lds
xor
jne
mov
retf
add
jle
stos
push
repnz
and
push
cmc
or
inc
cmp
daa
mov
ja
dec
bound
fsub
bound
mov
rcl
cmps
push
or
jno
and
enter
jl
aas
push
push
add
leave
sub
cmp
fld
das
inc
shr
inc
in
aad
push
aad
int
sti
mov
mov
sbb
jmp
jecxz
fsubr
les
enter
pop
pop
dec
js
ds
mov
cmp
ja
xchg
dec
cmp
cmp
test
and
xchg
pushf
mov
jg
pop
mov
nop
test
cs
sbb
pop
cmps
jbe
dec
arpl
ds
lods
in
jne
xor
sbb
pop
hlt
mov
ret
pusha
add
xor
hlt
scas
lea
call
mov
shr
cmp
or
(bad)
mov
std
sub
inc
mov
add
in
sbb
pop
test
mul
mov
inc
fmul
mov
add
sti
xchg
leave
mov
push
pop
inc
shl
cmp
sar
mov
push
(bad)
cmp
dec
stos
cmp
add
xor
cmp
dec
push
cmp
mov
sar
push
repz
imul
push
sar
push
sbb
shl
imul
sbb
dec
adc
dec
jns
adc
pop
hlt
mov
or
cmp
or
inc
(bad)
cmp
stc
dec
test
cld
inc
inc
cmc
mov
push
ficomp
mov
jb
ret
les
mov
xchg
push
ss
es
pop
mov
dec
cmc
js
int3
mov
inc
push
mov
xor
mov
inc
push
xor
nop
cwde
out
sbb
jg
jg
test
test
sar
jb
inc
and
push
pop
inc
popf
div
mov
push
test
push
or
xor
push
push
stos
mov
sub
add
(bad)
cdq
mov
sub
cmp
adc
xor
les
cli
retf
xor
(bad)
ror
loope
(bad)
call
iret
loopne
fsubr
pop
dec
adc
loopne
popf
push
fisubr
rcl
cli
rcl
mov
fmul
shl
push
scas
jle
test
lods
sub
jnp
ror
shl
pop
push
out
or
adc
push
les
fisub
lods
push
cld
std
(bad)
call
sub
adc
xchg
jo
sub
stc
push
test
mov
inc
pop
mov
movs
test
pop
cwde
lods
push
addr16
jne
ror
enter
mov
fnstcw
dec
adc
out
inc
cli
icebp
push
neg
pop
mov
mov
loop
push
cld
jbe
pusha
push
or
dec
sbb
xchg
cld
div
pushf
idiv
cdq
fsub
inc
das
pop
clc
jns
imul
leave
cmp
enter
std
int
in
mov
or
movs
sbb
fs
fldenv
and
fnstsw
sbb
xchg
mov
jge
add
fist
pop
dec
call
lea
xlat
dec
mov
jo
mov
mov
leave
shl
add
and
inc
les
pop
outs
mov
mov
enter
icebp
mov
mov
rol
les
mov
mov
pop
fst
test
and
push
and
cmp
mov
adc
(bad)
mov
retf
push
gs
cld
dec
scas
jl
jecxz
pop
jo
and
mov
js
ja
or
aas
in
icebp
cmp
out
lock
cmp
inc
jg
nop
test
lea
mov
mov
ret
fimul
xchg
out
popa
sub
mov
cmp
jecxz
aas
inc
(bad)
mov
cmp
mov
sahf
fdivr
or
lods
jge
out
mov
test
es
in
jns
cmp
or
repnz
mov
pushw
mov
test
test
cmc
leave
inc
xor
stos
pop
xor
cmp
mov
push
add
gs
mov
add
add
test
popf
add
fdivr
xchg
xchg
mov
idiv
retw
mov
loopne
cmp
fcom
test
(bad)
(bad)
cmp
ds
push
pop
pop
dec
stos
rcl
leave
retf
sub
inc
cmp
mov
(bad)
mov
and
jge
xchg
mul
adc
leave
add
gs
jmp
enter
out
jbe
mov
clc
mov
shr
dec
push
sti
sub
sub
std
pop
loope
pop
clc
add
add
adc
gs
mov
clc
dec
(bad)
aam
imul
out
fsub
mov
shr
fisttp
sbb
lock
push
cmps
jne
test
push
mov
cdq
lods
and
sbb
mov
sbb
mov
out
cmp
cli
arpl
mov
xor
(bad)
sub
cmp
push
lds
int
retf
outs
dec
es
aad
(bad)
sbb
mov
pop
leave
jbe
inc
and
lods
shr
sbb
sbb
out
jo
add
test
push
and
(bad)
push
xchg
aam
sbb
fcom
jns
xchg
mov
movs
imul
xchg
nop
cmp
sub
lea
mov
aaa
dec
inc
lahf
pop
rcr
mov
loop
cld
shl
inc
stos
add
jge
sub
je
push
mov
dec
fstp
(bad)
mov
shr
mov
stos
ds
push
ja
call
pop
adc
mov
cmp
xchg
and
jnp
int3
imul
add
xor
mov
(bad)
test
add
int
cmp
rol
xor
ror
stc
jge
shl
inc
into
rcl
loopne
xchg
jecxz
push
cmp
int
push
mul
push
repz
inc
jg
mov
mov
xor
jg
pop
cmp
fistp
mov
cmp
repnz
(bad)
jmp
in
inc
repz
push
mov
or
inc
inc
dec
in
cmps
add
mov
push
jmp
(bad)
mov
cmps
loop
sbb
pop
js
call
xlat
push
ret
inc
out
mov
ins
ins
(bad)
out
out
and
adc
mov
shr
jmp
fisubr
out
jmp
shr
fistp
sub
ret
lock
or
test
inc
dec
sub
cmp
pop
lea
loope
(bad)
fist
or
fwait
adc
push
imul
pop
shl
fld
iret
and
dec
int3
dec
jae
loopne
stos
inc
mov
jno
jae
cli
jecxz
jno
movs
fisubr
scas
in
xchg
stos
es
popa
jnp
add
add
mov
aas
add
int3
test
pop
cs
fwait
aas
outs
pop
sub
cld
(bad)
jg
or
das
jge
pop
mov
jns
dec
xchg
cmp
mov
mov
test
sub
xchg
cwde
push
adc
in
push
jle
push
retf
jmp
fs
(bad)
cmp
xchg
xchg
movs
ret
mov
sbb
movs
mov
in
fcom
jmp
mov
retf
mov
fwait
rol
jp
push
icebp
xchg
sbb
dec
xchg
in
mov
sub
mov
mov
and
pop
and
retf
test
arpl
(bad)
test
dec
mov
sti
out
popf
cmc
sbb
in
add
and
stos
sar
fistp
mov
test
mov
ds
fwait
out
adc
int
dec
xlat
adc
sbb
dec
rcr
xchg
mov
in
cmc
sub
ss
iret
dec
jle
mov
mov
mov
in
jbe
push
pop
daa
adc
mov
int3
test
test
and
and
push
mov
data16
fcmovbe
fdecstp
test
rcl
dec
sti
inc
ds
ficom
mul
clc
dec
lods
fisttp
push
pop
dec
xchg
hlt
js
push
repz
mov
out
xlat
mov
jo
icebp
clc
cmp
nop
in
xor
ret
mov
aam
jl
(bad)
out
mov
dec
dec
stos
cmp
lock
sub
loopne
cmp
mov
mov
sbb
xor
adc
xor
repz
add
ja
inc
imul
in
stc
add
or
add
cmp
rcr
fild
fs
outs
sahf
mov
in
stos
ret
bound
mov
mov
xchg
es
inc
and
test
inc
jne
movs
push
inc
je
xor
mov
ds
sbb
sbb
mov
mov
aam
pop
xor
outs
pop
sub
cmp
retf
dec
loope
mov
daa
mov
test
mov
jbe
ja
(bad)
jns
xor
pop
cmps
add
push
mov
loopne
add
xchg
xor
movs
push
int3
bound
std
jmp
or
rcr
retf
leave
int3
push
in
sti
add
add
cmp
sbb
cmp
push
jp
loope
jb
xor
aas
or
jl
hlt
call
add
mov
cmp
fcomp
sahf
mov
into
loopne
xchg
fsubr
test
imul
adc
adc
cmp
jns
jecxz
sar
stos
fistp
xchg
test
out
mov
dec
add
mov
mov
and
(bad)
(bad)
pop
jle
ss
pop
cmc
cmp
jae
xchg
ins
add
mov
inc
rol
(bad)
enter
dec
jno
cli
mov
push
push
or
push
adc
retf
fucomip
cld
push
bound
inc
dec
mov
push
mov
xchg
sub
aaa
pop
adc
mov
mov
scas
ret
in
mov
imul
push
adc
mov
mov
leave
dec
lods
ficom
xor
scas
mov
inc
and
mov
jne
movs
cmps
cmp
cmp
mov
xchg
mov
call
test
cmps
jge
(bad)
mov
jae
xor
inc
stos
cld
ret
cs
dec
dec
(bad)
hlt
dec
cmps
sahf
push
mov
test
iret
stos
mov
jle
shr
fsub
ret
sbb
cmp
cmp
lock
pop
jbe
clc
inc
xchg
out
mov
mov
call
lea
cld
xchg
sbb
add
cmc
stos
and
pusha
mov
ficomp
imul
clc
mov
mov
rcl
mov
lods
cmps
ins
sbb
jae
retf
sbb
xchg
push
ret
mov
mov
mov
mov
in
pop
imul
fistp
mov
jmp
push
popa
xchg
cmps
mov
mov
mov
push
outs
clc
pop
jmp
push
jno
push
jle
call
sub
(bad)
jge
aaa
mov
mov
mov
push
test
std
shld
daa
iret
repz
push
aaa
inc
mov
pusha
jecxz
ret
and
adc
inc
jne
and
sub
push
scas
imul
jmp
out
cmps
xchg
push
fcmovnbe
leave
mov
cmp
pop
fdivr
cdq
mov
ds
icebp
loopne
xor
cli
jle
jbe
add
fnstsw
xor
sub
mov
sub
cmc
push
jbe
stos
add
icebp
dec
xor
daa
imul
ds
(bad)
stc
mov
hlt
pop
inc
and
cdq
cli
bound
fdivr
cli
sbb
mov
fst
sbb
fsub
mov
sbb
cmp
jecxz
scas
shl
out
adc
ret
and
pushf
adc
mov
xor
test
adc
call
mov
(bad)
scas
push
rcr
mov
aas
std
rcr
jge
je
das
fsubr
pop
mov
mov
retf
in
cdq
ret
push
adc
lahf
xchg
cmp
aas
ds
dec
repz
jne
push
jge
in
jp
fadd
mov
in
loop
add
dec
dec
rcl
mul
jmp
out
mov
sysexit
cli
call
shl
rol
rol
xlat
cmps
inc
xor
retf
sbb
(bad)
leave
mov
into
cmp
sbb
add
sub
pushf
aad
int
sbb
hlt
jb
iret
out
push
sbb
jecxz
lds
xchg
leave
lds
dec
jmp
push
out
sbb
lock
loopne
mov
repnz
hlt
mov
fcomip
js
hlt
test
push
(bad)
fs
cmps
mov
test
movs
jb
inc
mov
mov
enter
xchg
mov
lock
aaa
clc
push
add
mov
jb
fnstsw
xchg
mov
enter
push
fsub
pop
cmps
jbe
std
mov
repnz
xchg
cmp
ds
lds
aaa
frstor
or
test
test
push
sbb
pop
cwde
scas
cmp
iret
adc
adc
jle
cmp
stos
xchg
or
aam
loop
cmc
xor
mov
cmps
add
cmp
pop
je
int3
push
(bad)
out
fcomp
push
jle
cmp
sbb
cmp
mov
scas
cld
outs
repz
retf
pop
sub
adc
cmc
sub
cmp
ja
out
loopne
add
sbb
dec
lods
jmp
xor
sbb
outs
mov
push
jno
add
sti
leave
popf
mov
ret
mov
or
mov
cli
mov
or
rcl
loop
xor
mov
mov
jne
rcr
and
popf
mov
(bad)
movs
xchg
mov
cwde
sub
cs
dec
call
pusha
xchg
shl
enter
popa
in
fild
stc
xor
pop
shrd
scas
adc
imul
dec
fiadd
xchg
popa
cdq
xchg
pusha
fnstenv
movs
sbb
adc
loop
push
and
fwait
pop
movs
cdq
call
xchg
mov
inc
aam
call
lods
lds
xchg
add
sub
shl
pop
retf
popf
mov
and
test
mov
add
sbb
adc
dec
mov
scas
and
addr16
cli
movs
sub
out
outs
std
pushf
or
inc
push
jnp
je
mov
(bad)
sbb
rep
mov
cdq
mov
adc
sub
push
sbb
stc
mov
ins
pop
inc
es
mov
aad
dec
daa
pop
mov
int
cmc
(bad)
or
adc
mov
scas
(bad)
aas
adc
ret
push
aad
cmp
xchg
mov
mov
jle
xchg
ror
sub
inc
movs
jmp
adc
cmps
imul
xchg
sub
les
ja
xor
cld
sub
int3
lahf
inc
out
ins
adc
cmp
mov
xchg
mov
leave
loop
sub
xchg
mov
xor
or
mov
xor
ret
daa
jp
call
xchg
adc
sbb
jmp
and
fsub
dec
imul
aaa
xchg
cmps
fidiv
pushf
outs
mov
fisttp
retf
dec
sbb
cld
das
push
inc
mov
addps
imul
fnsave
ins
cmc
retf
pop
xchg
neg
int
jecxz
loopne
xchg
loope
sub
xchg
(bad)
push
sti
fnstsw
dec
pop
movs
cwde
mov
pop
(bad)
icebp
pop
shl
(bad)
mov
or
adc
sub
cmps
les
aam
push
push
and
std
pop
sub
mov
sbb
pop
fisub
inc
mov
pop
mov
test
shl
outs
mov
inc
sti
bound
pusha
popf
mov
daa
outs
or
lock
retf
cmp
aam
aam
push
sbb
sub
cli
jmp
mov
and
(bad)
mov
(bad)
arpl
fyl2xp1
dec
sub
dec
mov
call
inc
xchg
test
ds
mov
mov
call
(bad)
pusha
pop
xor
or
add
addr16
xchg
repz
fwait
adc
popa
clc
cmp
repz
mov
in
cmps
adc
sub
dec
sub
sbb
mov
jecxz
addr16
sub
xor
dec
mov
in
cld
mov
sub
mov
inc
aas
test
mov
add
mov
jno
mov
lods
push
mov
cmp
cmc
(bad)
cld
out
pop
dec
cwde
fwait
sub
cld
cmp
mov
jmp
xchg
pusha
and
mov
fidiv
push
xor
and
add
retf
(bad)
sub
pop
or
mov
adc
add
lahf
inc
pushf
outs
out
push
fmul
mov
sub
xor
push
cmp
cmp
xchg
leave
mov
cdq
cmc
pop
xchg
dec
or
jl
mov
jecxz
aad
iret
jns
test
or
in
inc
in
mov
loopne
arpl
inc
aam
add
cmp
or
push
mov
in
mov
call
fcmovnu
mov
add
jle
sub
fidivr
rcl
xchg
xchg
scas
les
mov
pop
ds
cdq
pushf
cld
call
sbb
test
scas
pop
popf
adc
pop
sub
call
dec
ret
cmps
jo
arpl
(bad)
retf
add
stc
sub
nop
outs
(bad)
ds
aas
iret
xchg
imul
adc
sub
dec
xor
jp
mov
mov
aaa
movs
test
pusha
aad
call
sbb
mov
xchg
add
loop
in
fs
retf
fisttp
data16
sbb
aam
outs
cld
ror
pop
mov
movs
retf
shl
jecxz
test
xchg
push
in
or
mov
inc
int3
out
adc
pop
inc
lods
mov
fcom
pop
mov
dec
in
bound
out
inc
push
xor
push
mov
outs
or
inc
cmc
in
in
fild
pop
fmul
mov
pop
mov
xchg
sub
or
aas
popf
ret
sub
pop
out
jne
std
fdiv
push
jnp
mov
mov
jmp
or
cmp
ja
call
scas
and
ficomp
movs
or
and
retf
mov
lods
ja
inc
mov
in
std
aas
sbb
mov
aam
loope
cmp
call
sub
les
dec
sub
rol
xchg
and
sbb
fwait
je
mov
cmp
mov
pop
sar
in
adc
stos
in
sub
jg
push
cdq
ja
lahf
jae
in
ret
fsub
sahf
and
mov
xor
pushf
test
out
xchg
ins
mov
hlt
lods
ja
or
pop
mov
inc
mov
dec
sahf
dec
cwde
idiv
mov
mov
fwait
mov
and
fild
mov
test
in
mov
push
push
pop
push
push
jmp
sub
call
lock
jno
pop
out
hlt
scas
scas
pop
aas
jg
xor
ja
and
retf
mov
mov
or
cmps
sahf
in
and
or
ds
adc
ror
rcl
mov
jp
cmps
(bad)
push
nop
scas
test
in
pop
enter
mov
ss
xchg
push
push
push
enter
inc
dec
pop
sub
loopne
inc
fidiv
lods
cs
sti
jle
jb
sbb
nop
xor
out
repz
stos
sub
ficom
xchg
cwde
mov
cdq
shl
test
aam
pop
(bad)
and
fist
neg
in
es
dec
xchg
aas
jns
cmps
fcmovu
mov
out
fist
out
and
call
ins
jmp
jl
mov
dec
ss
loope
mov
xor
inc
div
mov
sti
cmc
test
lock
aad
addr16
pop
cld
jl
movs
out
pop
inc
mov
add
add
das
sub
mov
lods
mov
jl
(bad)
push
in
sub
jl
mov
push
rcr
fidivr
xor
shr
dec
lds
hlt
push
and
and
call
scas
jmp
inc
adc
mov
in
cmp
test
dec
in
xchg
pop
cs
pop
jne
pop
jmp
mov
pop
std
xchg
jno
bound
mov
retf
xor
jbe
cmp
in
and
ins
and
cmp
xchg
scas
inc
xor
in
loopne
fldenv
addr16
xchg
jmp
adc
out
fwait
outs
scas
add
test
int
sahf
xchg
mov
sbb
push
sbb
mov
push
daa
jb
sub
in
pushf
and
jo
adc
imul
inc
lods
fwait
and
bswap
fwait
adc
mov
pop
mov
inc
ss
int3
push
jl
movs
imul
imul
jae
mov
loope
shr
pop
ja
data16
out
adc
repz
icebp
sahf
cmps
mov
sub
xor
sub
jbe
sbb
sti
out
mov
add
sbb
jns
cli
lods
(bad)
xor
hlt
cmp
ins
lock
and
clc
xchg
cmps
jg
ins
lock
inc
or
bnd
pop
pop
push
xor
test
aam
repz
dec
and
dec
mov
into
cmp
test
pop
push
and
xchg
sbb
mov
jb
dec
and
or
rsm
push
test
ins
retf
pop
push
movs
neg
mov
popf
cs
mov
inc
fisttp
inc
out
mov
je
imul
cdq
sbb
lahf
and
jl
mov
ret
call
fcom
iret
push
sbb
adc
in
ret
fcom
xchg
retf
adc
inc
ds
mov
push
cmc
neg
mov
pusha
outs
in
inc
push
mov
mov
neg
mov
hlt
pop
icebp
mov
cli
lock
repz
pop
popa
or
jmp
outs
aaa
in
retf
fdivrp
push
aad
in
sahf
(bad)
jbe
mov
and
in
jge
or
mov
adc
enter
je
not
leave
sub
mov
jecxz
jp
pushf
movs
and
jns
imul
jmp
add
xor
push
jo
cmps
call
inc
mov
(bad)
je
fmul
dec
mov
aam
repnz
cs
and
lahf
scas
lea
fadd
cmps
shl
mov
nop
mov
inc
push
sbb
lahf
fdivr
jg
test
push
addr16
adc
outs
sahf
shr
and
call
pushf
push
sbb
aam
loop
pop
test
cmp
or
xor
jl
inc
xor
add
(bad)
and
xchg
or
(bad)
(bad)
mov
sub
sbb
out
jnp
fwait
mov
mov
cmp
data16
retf
bnd
mov
mov
hlt
adc
out
cmp
push
repnz
(bad)
sub
(bad)
(bad)
adc
es
gs
sub
mov
cwde
data16
test
(bad)
imul
outs
ret
retf
retf
out
(bad)
pusha
and
retf
push
adc
cmps
js
call
addr16
lock
adc
or
ds
imul
or
std
add
add
adc
adc
dec
popf
inc
mov
repnz
les
fldcw
imul
xor
lock
call
repz
pop
lock
push
jle
test
mov
mov
mov
cdq
cmp
mov
dec
adc
cdq
sub
xchg
lahf
and
leave
loopne
retf
and
mov
lock
enter
popf
mov
dec
push
(bad)
mov
xor
inc
pop
mov
das
xor
adc
int3
repnz
jge
sbb
(bad)
push
lds
or
popf
jecxz
mov
inc
in
pop
imul
xor
shr
jl
test
cwde
mov
mov
adc
cmp
cdq
cmp
or
leave
test
xor
jecxz
xchg
in
out
aad
popa
push
addr16
mov
call
(bad)
out
pop
retf
cs
jne
xchg
out
outs
jge
add
imul
popf
push
push
pop
adc
push
xchg
dec
js
aaa
fnstcw
test
mov
push
mov
das
dec
xor
pop
lea
inc
mov
das
mov
and
push
jnp
sbb
movs
mov
cmp
inc
and
mov
in
mov
int
(bad)
or
or
loop
sbb
retf
lods
dec
add
mov
add
xor
push
mov
mov
add
jbe
push
jmp
pop
stc
jl
sbb
ss
dec
sar
push
aad
idiv
push
cmps
aam
adc
lods
sahf
lds
aaa
iret
shl
xchg
mov
mov
adc
inc
push
cmps
sub
les
add
shr
aad
fldln2
mov
dec
cmp
call
pushf
icebp
cmp
or
sti
retf
mov
jecxz
mov
fdiv
cld
ds
fnstsw
stos
gs
pop
(bad)
mov
pop
mov
or
sub
test
rol
in
nop
and
cmp
pop
inc
mov
pop
iret
mov
mul
loop
dec
sub
adc
fidiv
fs
ss
fnstcw
icebp
pop
jne
ins
mov
cwde
sub
cmp
mov
xor
add
inc
pushf
mov
iret
fsub
xchg
sub
adc
adc
and
adc
or
mov
mov
cmp
xchg
mov
(bad)
pop
dec
lea
shl
aaa
sub
ret
dec
stos
cmp
dec
xchg
icebp
mov
add
jmp
add
pop
add
mov
inc
mov
loopne
int
js
aaa
mov
jns
cli
push
movs
mov
scas
add
mov
add
jle
jnp
push
mov
cli
xor
imul
(bad)
aam
scas
xchg
lea
(bad)
mov
(bad)
rcr
mov
fldcw
call
dec
in
mov
jmp
xor
dec
mov
sub
cdq
or
icebp
out
es
jno
je
mov
stos
stos
fistp
(bad)
push
push
lea
cmc
mov
pop
sub
sub
fsubr
pop
lods
das
lods
jae
push
je
out
add
(bad)
push
or
and
std
outs
gs
test
jo
sar
sbb
dec
ret
ja
sub
mov
sub
mov
dec
cmp
xor
inc
test
jmp
sbb
loop
push
lahf
xchg
mov
(bad)
inc
push
outs
into
sub
iret
jnp
add
movs
inc
add
das
arpl
mov
and
or
or
out
push
outs
xchg
cmp
ret
jno
and
scas
xor
sbb
daa
(bad)
jno
mov
ret
in
inc
adc
mov
out
loope
sbb
xchg
jbe
jbe
retf
scas
(bad)
retf
inc
fist
movs
retf
cli
popa
push
cli
div
inc
sar
push
cmp
test
out
shr
out
pop
in
pop
inc
popa
lock
movs
push
iret
cmp
fmulp
jmp
push
fidivr
sbb
nop
pop
or
add
into
test
es
lods
push
std
movs
sar
jbe
clc
xchg
sub
cli
aaa
repz
gs
or
sub
push
push
mov
pop
ins
scas
lock
inc
sub
mov
sbb
push
jp
lods
mov
jp
xor
in
cli
cdq
cli
call
jbe
inc
repnz
call
or
fldenv
nop
mov
jne
loop
mov
mov
push
cmps
push
pop
xchg
mov
push
push
fwait
or
mov
not
in
jmp
mov
push
adc
rcl
(bad)
std
in
stos
cdq
cmp
push
in
fwait
repnz
dec
jecxz
ins
xchg
and
mov
in
inc
and
(bad)
(bad)
sar
add
sub
sbb
jo
into
xor
mov
jecxz
mov
je
lock
aad
pop
add
call
(bad)
cmp
loopne
cmps
pop
adc
popf
out
dec
popa
(bad)
jne
shl
loope
mov
iret
jbe
in
xchg
dec
(bad)
stos
dec
into
test
xchg
and
add
inc
mov
inc
leave
in
xor
adc
sub
lods
frstor
sub
pop
xor
test
sub
xor
repnz
sahf
(bad)
push
xchg
push
ficomp
repnz
xchg
pusha
mov
loop
jmp
les
(bad)
pop
jnp
ss
aam
es
xchg
aad
push
pop
fxch
xchg
pop
mov
int
dec
add
xor
enter
out
jo
adc
adc
fstp
or
test
loopne
fcom
push
repnz
mov
dec
xchg
in
xor
dec
add
stc
sub
ss
out
inc
ins
ja
cdq
xchg
mov
mov
xor
jb
dec
pusha
sahf
or
jp
test
repz
xor
mov
inc
jg
mov
xor
hlt
jl
push
pop
retf
clc
(bad)
push
add
lock
call
mov
sbb
(bad)
pushf
dec
cmp
jg
xchg
imul
and
or
push
stos
into
ds
int3
push
mov
cmc
cwde
sub
mov
fld
xor
xor
stos
xchg
leave
sahf
mov
push
xchg
fidivr
int3
push
cmps
push
clc
repz
int
inc
pop
fwait
pop
dec
jle
xchg
enter
xor
(bad)
(bad)
in
pop
sti
adc
pop
mov
mov
xchg
iret
test
loop
push
daa
imul
call
test
pop
idiv
out
imul
xor
lods
pop
add
mov
int
lahf
mov
in
lahf
jl
dec
mov
add
mov
je
mov
sbb
sub
out
int3
sahf
jecxz
ins
xor
push
rcl
out
(bad)
cmp
cmp
clc
mov
and
pop
loopne
ret
sub
jae
ffreep
dec
xor
xchg
nop
out
adc
retf
add
mov
dec
dec
pop
in
retf
fst
leave
mov
jp
xchg
outs
lock
jbe
jmp
sahf
outs
or
mov
jns
pushf
and
jmp
cmps
sub
imul
int3
mov
lods
or
mul
arpl
mov
sbb
iret
or
(bad)
mov
dec
sahf
mov
xchg
cmp
mov
adc
push
call
test
je
loopne
mov
pop
push
or
push
jmp
adc
js
mov
cmc
fdivr
or
xchg
xor
xor
test
in
repz
add
sbb
nop
retf
mov
mov
cli
dec
popf
jno
lahf
jmp
and
pop
pop
mov
xchg
xlat
mov
pop
add
out
icebp
pusha
jp
cmp
popa
mov
test
mov
mov
mov
jae
xor
das
cs
mov
into
bound
test
mov
icebp
pop
xchg
movs
repz
mov
pop
ja
xor
mov
xchg
mov
ss
ret
repnz
sub
mov
shl
into
or
push
cmp
aad
xchg
xor
enter
mov
in
inc
int
jge
pusha
shl
sbb
mov
xchg
add
stos
add
add
mov
out
add
cmp
jb
pop
fsubr
jg
push
sbb
jp
mov
jecxz
les
cmp
data16
mov
daa
or
ins
sbb
push
and
cwde
push
cmp
repnz
pop
cmp
or
push
imul
inc
push
aad
mov
aad
and
in
sbb
ins
fld
out
xchg
cmps
sub
es
cmps
outs
(bad)
cmc
sub
jmp
xchg
imul
in
and
sub
mov
pop
gs
int3
(bad)
cdq
push
dec
pop
sbb
(bad)
dec
xchg
mov
movs
or
sete
xchg
test
inc
mov
mov
dec
xchg
into
lods
mov
cmp
fsubr
sahf
fistp
icebp
pop
and
aas
loopne
into
fcmovnu
jg
or
fadd
push
fcom
lds
out
xor
retf
js
cmp
gs
ss
pop
jo
xchg
mov
push
mov
xchg
ins
xor
xchg
sub
xchg
ret
out
push
push
pop
adc
pusha
dec
pop
adc
sub
clc
sbb
inc
stc
pusha
pop
jecxz
sbb
xor
sbb
fidivr
dec
mov
cmps
sub
(bad)
push
mov
aas
sub
(bad)
icebp
or
jp
inc
cmp
adc
pop
(bad)
mov
arpl
push
pop
cmps
mov
ja
mov
push
in
mov
bound
ret
adc
jbe
sub
out
(bad)
out
test
jle
dec
jp
mov
lods
std
push
mov
movs
cmc
cmp
mov
cmp
xchg
aas
lods
daa
jmp
xlat
sub
fsub
rol
or
outs
fadd
movs
imul
ret
cmps
stos
mov
test
ror
jmp
cmps
inc
(bad)
shl
pop
dec
lods
daa
hlt
test
(bad)
shr
pop
ret
mov
fcom
arpl
aad
ins
sub
sub
fiadd
fcom
iret
mov
mov
std
inc
cdq
sbb
and
fld
not
sub
xor
sub
es
mov
outs
repnz
(bad)
jmp
xchg
push
movs
stos
rcr
fcomp
xrelease
loopne
scas
jo
(bad)
iret
jl
push
xchg
mov
fdiv
push
inc
adc
cmpxchg
mov
jmp
and
fsub
repnz
xchg
imul
loope
mov
and
sub
and
mov
repz
pop
xor
lds
hlt
leave
mov
push
or
dec
cmp
fwait
(bad)
dec
outs
mov
rep
sahf
nop
enter
dec
mov
nop
and
xor
cld
xor
mov
imul
mov
gs
jg
add
mov
ret
in
jecxz
sbb
sub
adc
jmp
ins
fwait
sbb
js
inc
mov
mov
mov
xor
jp
add
mov
push
dec
jo
cmp
and
sub
(bad)
int3
mov
add
or
nop
push
and
mov
inc
aam
pop
xor
mov
addr16
call
lea
mov
mov
inc
push
(bad)
loope
adc
js
jl
inc
(bad)
aad
daa
mov
sbb
pop
mov
push
(bad)
stos
xor
in
inc
cmc
pop
ss
aam
dec
(bad)
in
xor
pop
push
out
fidivr
retf
mov
xor
adc
movs
or
bound
and
scas
test
cli
daa
std
xchg
xchg
dec
aaa
jb
xchg
xor
ins
mov
jge
jo
jbe
push
test
addr16
les
add
not
sub
xchg
not
popf
(bad)
cmp
imul
mov
dec
out
inc
add
dec
lods
inc
lds
or
push
and
pop
outs
rcl
add
push
fcomp
test
and
rcr
fs
and
dec
pusha
mov
std
das
dec
cmc
lea
dec
mov
sub
fcom
cdq
shl
mov
inc
call
mov
sub
imul
push
jl
out
jbe
inc
(bad)
cld
sbb
inc
adc
lock
or
add
cli
mov
xchg
push
sbb
jg
stos
mov
aas
xchg
int3
lahf
outs
lock
inc
and
pop
sti
inc
add
mov
adc
or
xchg
or
xchg
lods
push
test
ds
cmp
nop
xchg
mov
jbe
jmp
or
dec
xor
pop
fcom
aad
push
(bad)
fldenv
aaa
mov
push
fbstp
ret
in
cmc
ror
mov
frstor
jnp
or
div
mov
cmc
mov
inc
lea
jmp
pusha
push
sahf
xor
dec
dec
in
jno
into
sar
xchg
cmc
xor
pop
out
mov
inc
popf
enter
push
leave
arpl
iret
jge
push
sbb
pop
sbb
mov
pop
dec
nop
dec
cmp
out
(bad)
mov
xchg
ds
cmc
fcom
inc
(bad)
pop
adc
xchg
sahf
or
xor
lahf
outs
sahf
int
stc
lock
aas
outs
aam
and
nop
adc
xchg
daa
or
mov
jns
fcom
push
jp
inc
dec
lds
sahf
shr
pop
mov
and
inc
cmc
stos
xchg
loop
push
pop
call
fnstenv
push
add
add
cdq
fist
push
aaa
in
sti
jbe
dec
ret
sti
add
sub
dec
shl
ds
inc
shl
std
outs
xor
inc
sahf
xlat
mov
stos
xor
fbstp
xchg
inc
add
pop
movs
fdiv
out
xchg
cwde
int3
sar
mov
sar
mov
push
shl
int3
movs
inc
lods
icebp
sub
mov
push
nop
dec
sub
sbb
enter
dec
retf
sub
idiv
movs
xor
pushf
add
push
jne
test
mov
and
mov
retf
and
mov
(bad)
jae
bnd
mov
mov
js
(bad)
and
fbld
jb
and
pop
cmp
mov
and
dec
pop
repnz
push
sub
sbb
les
ss
mov
pop
popa
mov
cmps
jmp
jns
pop
jmp
test
pusha
or
pop
push
arpl
sar
mov
fidivr
mov
aam
shl
pop
xor
sbb
loopne
and
or
(bad)
scas
mov
add
lds
push
cwde
mov
mov
cmp
mov
pop
mov
mov
or
xor
ds
mov
call
cwde
mov
clc
sub
out
lods
test
ret
(bad)
push
add
gs
shr
sub
in
push
gs
stc
add
xchg
call
movs
or
xchg
into
push
icebp
repz
das
dec
xchg
add
fstp
sub
mov
js
(bad)
mov
aaa
(bad)
stos
jecxz
mov
js
sti
push
cmp
mov
jp
fsub
stos
sub
(bad)
push
sub
hlt
cmc
adc
mov
mov
(bad)
cli
push
call
call
sti
pushf
(bad)
jo
(bad)
cmp
xor
and
sahf
retf
dec
cwde
mov
mov
xchg
outs
and
rcl
dec
inc
mov
movs
mov
push
aam
fsub
add
clc
jbe
test
(bad)
fdivp
enter
lahf
jecxz
popf
xchg
push
xchg
test
lds
outs
(bad)
jge
cmp
rol
push
mov
and
mov
sbb
push
and
add
ficom
adc
pop
inc
imul
test
mov
mov
sub
cmps
push
cdq
fwait
dec
adc
push
pushf
mov
add
dec
fsubr
sub
adc
cmps
mov
test
xchg
aaa
clc
imul
(bad)
mov
jl
fsubr
in
ret
mov
fimul
nop
inc
mov
scas
cmp
push
xchg
out
fidivr
call
add
(bad)
mov
mov
jmp
add
ret
cli
and
inc
popf
mov
xchg
sub
xor
int3
ins
dec
arpl
scas
jp
jmp
cwde
pop
lea
fsub
xchg
jno
sub
fwait
sbb
imul
lahf
dec
push
pushf
inc
call
pushf
aas
pop
(bad)
scas
movs
sahf
scas
neg
ror
sahf
retf
adc
std
or
pusha
in
push
aas
dec
mov
inc
cmp
xchg
clc
cmps
jnp
bnd
dec
mov
popa
test
cld
scas
sbb
lods
cmps
sti
fld
rcr
add
out
and
dec
popf
cmp
das
push
jp
in
hlt
sub
xor
pushf
cmp
adc
lahf
in
stos
es
jle
aaa
lock
cli
xchg
and
adc
xlat
pop
bound
call
fs
adc
xor
fisub
sbb
cmps
mov
jl
daa
test
mov
jge
sahf
xchg
push
sbb
out
movs
jmp
xchg
test
xor
ret
pop
call
jbe
add
sub
sub
in
test
xor
lahf
std
jcxz
pop
jb
xchg
div
inc
jge
inc
mov
popf
and
inc
mov
or
dec
jl
push
mov
mov
mov
cmp
rcr
xor
xchg
or
adc
and
out
(bad)
in
pop
cdq
inc
call
xchg
sbb
in
loopne
cmp
mov
add
dec
icebp
mov
fisub
jg
out
cmp
(bad)
xchg
pop
push
sbb
enter
shl
std
dec
cdq
in
or
cld
cmp
lds
jl
push
mov
xlat
stos
dec
mov
xchg
inc
nop
push
ins
cmp
xor
ret
ds
mov
mov
loopne
call
push
or
cmc
shl
xchg
adc
scas
je
fs
in
cwde
push
cmp
dec
mov
inc
pop
js
ret
and
or
add
xchg
mov
push
fidiv
inc
pop
cdq
fdivr
mov
pusha
lock
aaa
out
cmp
call
(bad)
add
punpckhdq
xchg
test
loop
(bad)
fprem
sbb
and
lds
outs
arpl
(bad)
aam
xor
ins
jne
mov
int3
mov
call
xor
lock
pop
lea
add
repnz
cmps
sbb
retf
pop
jns
cmp
cdq
gs
jle
jmp
mov
stc
idiv
(bad)
bound
repz
retf
jns
xchg
icebp
retf
sub
and
push
retf
mov
(bad)
jbe
adc
cmc
aam
je
xchg
mov
sub
mov
adc
mov
adc
mov
pop
jnp
repnz
shr
dec
and
clc
cld
icebp
inc
shl
xchg
sub
xchg
jmp
jmp
in
dec
inc
repz
and
test
mov
(bad)
int3
popa
inc
or
or
fcmovbe
in
call
repz
mov
pushf
cmp
aad
inc
retf
inc
les
jl
jnp
lods
xchg
repz
mov
mov
sub
cmc
mov
(bad)
and
push
cmps
(bad)
pop
scas
rol
test
int3
out
cmps
mov
sbb
loopne
popf
push
xchg
sub
mov
cwde
cmc
ja
test
pop
pop
retf
sbb
arpl
jbe
out
jae
(bad)
retf
retf
xchg
mov
push
retfw
mov
imul
xchg
in
cmp
xor
and
mov
rcl
or
sbb
xor
mov
leave
push
sbb
inc
inc
mov
and
out
shl
fwait
add
pop
inc
xor
or
cmp
test
push
mov
lea
out
nop
or
in
push
leave
dec
sub
mov
cmp
dec
xchg
mov
inc
sub
aam
push
inc
mov
cs
mov
dec
int
adc
dec
sbb
pusha
add
loop
(bad)
call
fsubr
xchg
retf
mov
aaa
push
es
lock
cli
xlat
xor
out
inc
push
data16
mov
fisttp
retf
nop
pop
cmps
scas
mov
imul
enter
dec
jne
mov
cmp
into
mov
mov
mov
mov
mov
aas
and
cmp
mov
mov
aad
ds
lds
call
adc
not
cmp
dec
inc
lds
fistp
inc
mov
cmps
cwde
cmp
fcom
ins
(bad)
fild
lods
adc
add
jp
adc
xor
adc
(bad)
nop
clc
jmp
and
ins
sbb
dec
mov
sbb
mov
mov
mov
xchg
mov
and
pminsw
shl
data16
sbb
lds
in
aam
shl
ins
or
ret
jp
int
in
aam
rcr
test
and
mov
xchg
mov
cmp
push
daa
mov
int
cmps
out
jl
xchg
sub
push
push
jmp
ins
mov
outs
mov
(bad)
rcr
add
or
xor
jle
xlat
fs
cmps
add
and
pushf
push
inc
jp
inc
sub
outs
retf
cdq
out
mov
sahf
cwde
clc
xor
mov
mov
sysenter
popf
inc
and
cmc
xchg
scas
add
idiv
rcl
fcomp
int
icebp
lahf
pop
call
mov
inc
sbb
outs
add
ins
fcom
popf
mov
(bad)
mov
cdq
and
dec
dec
imul
ds
in
stos
(bad)
adc
test
fidiv
adc
adc
movs
sub
pushf
jecxz
fdivr
xchg
sub
in
inc
repz
pop
fstp
pop
mov
inc
test
int3
int3
jno
sbb
outs
sahf
or
loopne
inc
adc
lds
xor
pop
imul
push
(bad)
out
hlt
sub
movs
adc
lods
loope
add
mov
mov
nop
add
retf
push
hlt
(bad)
adc
sub
out
jge
pop
mov
jo
lds
or
xchg
daa
std
and
div
lods
pop
enter
fmul
jle
fsubr
push
cmp
jmp
mov
ds
(bad)
and
fs
(bad)
pushf
mov
push
mov
xor
xor
in
or
lahf
into
leave
cmp
mov
(bad)
fmul
mov
adc
push
xor
dec
pop
icebp
inc
icebp
dec
gs
xlat
ret
mov
mov
mov
dec
neg
adc
cli
mov
or
mov
and
rcr
xor
lods
mov
or
lahf
dec
gs
dec
xor
ret
out
push
pop
mov
gs
aad
and
stos
jae
cli
mov
jbe
and
(bad)
shl
repnz
ficomp
call
fdiv
mov
sub
jp
inc
loop
scas
lahf
cmps
and
sbb
aaa
mov
out
push
outs
sahf
jmp
clc
xchg
out
shl
mov
mov
jle
push
loopne
add
mov
mov
mov
fcmovne
mov
sbb
and
and
sbb
push
(bad)
out
mov
cmc
mov
mov
mov
imul
arpl
jmp
out
cmp
stos
mov
xor
pop
ffree
lahf
lahf
jecxz
mov
fmulp
mov
cmp
scas
addr16
add
shrd
test
stos
cmp
into
xchg
jl
call
cmp
loop
dec
test
and
cmp
mov
call
fwait
cmp
cdq
mov
ret
retf
add
xchg
cmp
mov
xchg
clc
mov
pop
adc
and
daa
and
sub
(bad)
rcr
(bad)
mov
sahf
mov
ror
hlt
repz
lock
lahf
mov
(bad)
cmp
rcl
xchg
pop
and
fs
ins
popf
sbb
loope
neg
das
jnp
lds
mov
mov
mov
in
and
ficom
xchg
arpl
xor
and
jl
into
cmp
mov
jg
add
out
sub
aam
icebp
mov
call
dec
mov
push
ds
jge
into
in
retf
ror
sbb
sbb
jbe
mov
mov
jns
adc
mov
jne
mov
lahf
retf
loopne
clc
ins
popf
rcr
mul
cdq
xchg
mov
dec
sub
xchg
shl
xchg
jae
adc
mov
mov
add
aaa
mov
imul
iret
in
mov
ror
pop
cmp
xchg
fs
mov
iret
push
repnz
push
loopne
push
mov
lds
les
inc
test
aaa
dec
loope
jge
aad
xchg
lahf
lods
daa
out
retf
inc
aaa
push
(bad)
xchg
mov
js
fbld
add
in
shl
test
jecxz
mov
cmp
aad
(bad)
sub
pop
adc
mov
fistp
data16
xchg
xchg
cmp
inc
jae
push
mov
jno
inc
xchg
sar
jne
ret
pop
or
push
js
pop
and
cmps
jne
cmp
in
dec
inc
cs
aas
jl
fisttp
into
push
aam
dec
adc
cdq
mov
imul
push
fidiv
and
pop
push
mov
mov
mov
imul
sub
scas
push
and
enter
js
lea
lds
mov
jne
dec
and
out
loop
mov
js
dec
mov
jb
out
jmp
sub
xor
add
adc
clc
sahf
std
mov
xchg
xor
push
(bad)
cmp
pushf
(bad)
jle
sbb
sub
mov
push
lea
add
jmp
mov
xchg
xchg
stos
sub
pop
ret
in
xor
ror
in
jecxz
fnstcw
inc
inc
dec
cmps
int
mov
xchg
mov
int3
(bad)
popa
ins
xchg
test
add
dec
in
push
dec
sub
repz
cmps
mov
lods
jp
jns
enter
cmp
cmp
add
dec
shl
push
into
int3
mov
out
mov
inc
mov
sbb
mov
adc
xchg
sub
xor
lock
jp
test
cmc
xchg
enter
shl
inc
bound
add
fistp
cmp
fwait
cdq
shr
call
sub
dec
pop
lods
xor
add
es
mov
lock
pop
aas
sti
loopne
push
cmp
sbb
or
mov
jmp
add
push
cmp
mov
movs
outs
cli
into
or
push
xchg
mov
xor
in
fnsave
mov
stos
push
mov
jmp
or
push
inc
outs
pushf
xchg
jo
aas
and
cmp
ins
aas
pop
add
(bad)
cmps
sub
scas
int
xchg
push
dec
push
hlt
ins
ficom
dec
inc
dec
scas
sub
push
aaa
dec
(bad)
xor
ret
movs
mov
repnz
dec
xchg
adc
inc
push
mov
push
mov
sbb
inc
jecxz
das
inc
ins
mov
mov
fcmovbe
jnp
lods
out
xchg
xchg
add
cmp
ss
mov
dec
imul
mov
xchg
cmp
jp
call
mov
(bad)
in
xor
push
dec
(bad)
sub
mov
pop
fmul
xchg
push
cmp
mov
iret
dec
and
test
arpl
push
cmp
mov
movs
push
in
mov
lock
sbb
fstp
push
xchg
xor
loopne
adc
push
mov
cdq
xor
sub
add
jmp
rol
leave
ins
fabs
lods
and
cs
rcr
inc
mov
dec
shl
nop
adc
cs
scas
shld
scas
jmp
lahf
ins
xchg
clc
sbb
ss
pushf
sahf
dec
dec
sti
push
(bad)
push
xor
mov
push
cmp
dec
jmp
imul
jo
pushf
push
inc
loopne
into
jno
inc
daa
mov
icebp
jnp
push
retf
icebp
arpl
push
jb
out
fdivp
push
jl
dec
inc
stos
(bad)
sbb
cmps
daa
adc
loopne
mov
mov
movs
fucom
xchg
add
sar
cmp
scas
out
sbb
retf
sub
push
dec
fs
jnp
jle
aas
adc
cmp
clc
sbb
add
retf
fldz
jae
mov
inc
lods
pushf
or
mov
mov
mov
mov
mov
pop
iret
lahf
mov
scas
shr
mov
inc
retf
int
and
dec
push
sbb
cmp
lods
jnp
jmp
add
jl
mov
sub
sub
cld
add
sub
jl
hlt
ror
push
inc
aad
dec
femms
ins
ins
mov
std
ss
or
jmp
(bad)
aaa
adc
nop
adc
leave
jmp
pop
cld
retf
jmp
jmp
or
js
push
and
aas
lock
fnstenv
jecxz
loopne
popf
inc
gs
lods
add
cmps
mov
xor
mov
ds
sub
dec
ret
pop
push
or
add
aaa
xchg
dec
jecxz
std
call
jg
nop
retf
xchg
dec
scas
loopne
push
and
cmp
pop
xchg
pop
test
adc
cwde
out
adc
outs
cmp
aas
fdiv
jmp
sub
outs
mov
mov
les
in
add
xor
sbb
mov
and
loop
push
movs
push
mov
int
pop
popf
cmp
ins
les
mov
and
std
iret
mov
xor
call
in
sbb
and
out
shl
or
jl
loope
sbb
pslld
mov
cs
sbb
xor
addr16
xchg
push
fdiv
adc
sub
mov
jle
mov
test
push
mov
cmp
and
xchg
jmp
mov
sub
mov
or
or
test
fnsave
das
movs
loopne
pushf
mov
loope
shl
cmps
dec
dec
imul
aas
pop
inc
jecxz
add
push
adc
popf
mov
jmp
shl
jno
in
rol
or
cs
cdq
jmp
mov
aad
push
(bad)
cmp
xchg
push
sti
sbb
mov
fstp
fs
leave
mov
bound
push
inc
inc
rcl
push
sub
xor
add
fcomp
or
sar
xchg
mov
das
sub
push
nop
mov
outs
inc
repnz
call
add
inc
sub
push
and
sti
dec
pop
mov
dec
out
call
stos
ficomp
in
outs
inc
dec
mov
mov
jne
pushf
jp
pop
in
jbe
pop
jmp
mov
inc
and
pop
sbb
repz
stos
xor
dec
aas
je
mov
and
lds
pop
(bad)
adc
pop
add
jmp
mov
ins
cmps
shr
stc
mov
xor
mov
xchg
imul
cmp
jmp
cmp
push
gs
es
mov
and
imul
es
repnz
mov
fist
ins
mov
inc
aam
sbb
loop
repnz
sub
in
push
jae
jl
paddq
jne
pop
mov
addr16
jl
pop
call
mov
fimul
(bad)
lods
lea
mov
pop
stos
push
add
sub
shl
icebp
add
add
xchg
je
mov
outs
inc
inc
or
test
es
mov
fisttp
cmps
or
fmul
out
cmp
sub
dec
imul
pop
neg
and
pop
and
mov
push
bnd
mov
add
pop
cwde
xchg
dec
in
inc
add
call
xchg
adc
repz
fs
call
pushf
dec
and
and
add
data16
push
loopne
xchg
adc
addr16
mov
ins
cwde
imul
das
push
cld
cwde
push
test
inc
mov
imul
mov
dec
xor
push
retf
push
or
je
mov
iret
das
cmp
mov
out
jp
adc
std
cmp
mov
mov
lea
or
mov
push
fild
fidiv
push
ds
lods
call
in
out
add
dec
or
cmp
enter
out
or
mov
leave
cmp
cmc
retf
pop
neg
inc
nop
ds
int
test
mov
(bad)
stos
aam
and
ins
in
push
mov
cmp
pop
xor
add
jle
ja
outs
mov
mov
aam
push
xchg
and
jg
push
jmp
(bad)
es
icebp
gs
mov
in
fisttp
jmp
mov
int
inc
lods
cmc
xchg
pop
adc
xchg
js
jecxz
lods
add
pop
cmps
aas
icebp
leave
nop
(bad)
aam
sbb
sar
mov
cdq
xor
sub
mov
sti
fcomi
mov
fisub
xchg
mov
dec
xor
xlat
or
jmp
sti
mov
mov
xchg
pop
adc
mov
fstp
pop
(bad)
arpl
je
fcomp
and
div
mov
pop
or
lock
dec
lods
sbb
pushf
xchg
rcl
jnp
jbe
sbb
mov
xchg
xlat
dec
and
mov
pop
and
cmp
and
adc
retf
mov
fwait
dec
lahf
call
arpl
pop
les
pushf
jl
rcr
push
mov
fcomp
sub
xchg
pop
hlt
ret
push
(bad)
scas
xor
add
jmp
pop
loopne
movs
xor
mov
out
sub
pop
jnp
aam
xor
inc
jo
mov
push
push
cmps
test
hlt
test
mov
fmul
lahf
out
daa
mov
int
or
retf
jnp
or
out
retf
scas
scas
adc
or
stos
and
call
outs
mov
cmps
shl
(bad)
into
retf
imul
scas
xor
jecxz
mov
push
fild
jb
xor
pusha
mov
sahf
aaa
ss
mov
mov
pop
mov
test
xchg
adc
sub
fistp
out
inc
stos
mov
and
mov
xor
pop
cdq
test
repnz
inc
outs
dec
add
xchg
int3
xchg
mov
and
mov
push
xchg
(bad)
into
dec
xchg
xor
out
fcom
xchg
cmp
mov
jle
xor
stos
leave
stos
pop
sahf
scas
into
push
loop
mov
lods
mov
aad
fst
cli
scas
mov
inc
outs
sub
jb
adc
mov
sti
xor
push
lods
sbb
addr16
mov
ret
ss
or
scas
adc
sahf
jmp
sahf
in
ret
cmp
shr
loopne
jnp
sub
test
push
sbb
aaa
mov
mov
xor
hlt
cmp
(bad)
fist
(bad)
ins
adc
cmp
out
jmp
mov
pop
je
jmp
jns
shr
ret
popf
addr16
mov
mov
push
jnp
repnz
jg
addr16
jle
retf
(bad)
popf
and
mov
mov
enter
outs
scas
xchg
stos
fbld
xchg
sahf
jecxz
push
and
sbb
jecxz
mov
inc
xchg
or
mov
pop
xchg
adc
jmp
mov
and
add
lods
sbb
addr16
cld
lock
outs
dec
repz
dec
es
mov
mov
lods
not
fs
mov
mov
sbb
mov
mov
sbb
xchg
jmp
jo
mov
cmp
(bad)
cmp
arpl
adc
jp
imul
jl
adc
jl
xchg
daa
jmp
imul
sub
dec
adc
out
mov
jb
loopne
sub
or
jo
jb
sub
hlt
and
pop
xchg
xchg
pop
mov
cdq
cs
jmp
mov
mov
nop
dec
xchg
mov
imul
pop
jno
test
push
adc
xchg
fwait
pop
pop
jbe
test
cwde
iret
jmp
dec
jae
ss
loop
cmp
or
sub
xchg
addr16
jne
or
mov
sbb
or
rcr
inc
inc
cmps
push
aas
call
rcr
je
inc
and
inc
adc
and
or
sub
mov
adc
iret
xchg
neg
ret
and
je
and
cmp
aas
inc
fs
repnz
jmp
std
imul
sahf
inc
jbe
add
imul
sub
loopne
dec
mov
cmp
mov
jg
cli
cmps
mov
mov
hlt
int
pusha
mov
mov
lds
inc
xchg
fs
cmp
mov
mov
idiv
sub
xchg
(bad)
out
xor
add
fadd
pop
push
fidivr
mov
(bad)
mov
or
or
lock
lahf
ss
das
dec
xchg
cmp
test
adc
(bad)
in
lds
bound
fsubr
lahf
jne
sbb
shl
int3
outs
(bad)
mov
addr16
gs
or
sbb
pushf
cmp
dec
inc
sbb
push
sbb
push
mov
pop
inc
push
pushf
jo
sbb
arpl
repnz
mov
in
add
retf
cli
cs
xchg
ret
fwait
or
mov
xchg
xchg
xor
scas
(bad)
mov
mov
dec
mov
sub
int
retf
hlt
stos
loope
adc
std
sub
mov
push
mov
push
add
and
jb
shl
cmp
jne
cli
pop
mov
push
push
adc
inc
mov
pop
popa
dec
test
aas
sub
push
ss
in
dec
mov
int
ror
arpl
call
mov
add
cld
inc
js
enter
ret
inc
mov
mov
or
jmp
dec
push
adc
mov
movs
lahf
mov
xor
out
sahf
mov
shl
inc
idiv
aam
push
repnz
aaa
in
jnp
dec
sub
push
and
mov
sbb
std
dec
imul
addr16
mov
lea
ret
cmp
cmp
sub
aad
pop
sbb
fidiv
js
mov
das
dec
ss
inc
push
adc
cmps
jmp
dec
and
sbb
iret
movs
fild
fsubr
ret
leave
fstp
or
scas
les
cli
ds
fwait
sub
pop
jb
sub
aas
lock
xchg
mov
aam
jge
and
(bad)
not
mov
jge
pop
shl
test
loopne
cmps
add
mov
cmps
ins
xchg
adc
xor
inc
iret
daa
test
aas
test
sub
sub
jp
mov
pop
fldenv
data16
sbb
pop
xchg
(bad)
cmc
mov
xor
adc
repz
(bad)
and
add
adc
push
and
mov
dec
pop
fs
push
in
fstp
push
cmp
cmc
sbb
lock
ss
mov
pop
adc
rcl
lock
mov
jno
cld
or
inc
pop
push
mov
sub
dec
imul
stos
fidivr
les
shl
cmp
movs
jmp
or
cdq
push
aam
add
mov
jnp
push
mov
pusha
vrsqrtps
imul
dec
pop
inc
nop
test
jnp
mov
inc
hlt
cmp
in
lahf
stc
mov
mov
dec
aad
mov
ds
in
add
je
and
or
popf
xor
cmp
add
hlt
jg
adc
mov
pop
ins
lea
int
ins
or
loopne
inc
mov
mov
and
xor
(bad)
jo
dec
fisubr
xor
call
cmp
dec
xor
jnp
leave
xlat
aam
stc
ins
xor
xchg
mov
out
lock
mov
into
pushf
and
mov
clc
jl
xchg
push
std
test
gs
mov
mov
xor
and
jne
add
lock
lods
adc
iret
jbe
xchg
cwde
push
pop
mov
js
(bad)
fisttp
push
xchg
add
rol
dec
mov
scas
imul
adc
bound
add
sbb
es
cs
std
stc
mov
lds
cld
aaa
dec
xlat
mov
into
(bad)
push
inc
push
into
pop
call
das
retf
inc
cmp
cld
loop
shr
imul
addr16
aad
daa
ja
mov
sbb
mov
movs
xchg
imul
fdiv
repnz
mov
hlt
mov
inc
aam
jmp
test
and
fstp
jae
repz
cmps
lock
mov
sub
hlt
sub
inc
and
out
test
movs
test
sub
sbb
fbld
sbb
push
shr
in
jno
push
aaa
popf
std
pop
cmp
(bad)
popf
sub
xor
outs
clc
mov
mov
sbb
dec
mov
push
ins
dec
sub
dec
sub
push
add
xchg
lock
dec
sbb
inc
xor
sbb
enter
pop
fisttp
popa
ins
jl
gs
pushf
popf
mov
push
jle
cmp
mov
lds
mov
daa
jno
test
(bad)
sbb
pop
clc
inc
out
sti
push
mov
fsub
mov
pop
imul
clc
mov
das
shl
rol
test
xchg
ds
inc
dec
mov
adc
fld
push
cli
inc
and
fdivr
aaa
sbb
lock
cdq
aam
mov
fimul
nop
mov
retf
fiadd
jg
scas
(bad)
sbb
out
mov
adc
fdiv
popa
ret
mov
in
dec
nop
repnz
push
and
sub
cmps
and
shr
fistp
jmp
nop
xchg
pop
aaa
fs
push
fidivr
retf
aad
cmps
jne
sti
xor
inc
bound
jne
mov
div
stc
lods
or
cmp
dec
fmul
in
leave
vandnps
or
test
mov
cwde
mov
add
mov
popa
pusha
into
enter
retf
xor
lds
fdivp
cdq
vpsubw
idiv
psraw
cwde
pop
or
cmps
mov
movs
das
jnp
mov
push
sub
addr16
bound
scas
push
fwait
mov
dec
enter
push
xchg
lods
inc
sub
cmp
xchg
mov
mov
adc
movs
cld
cmp
mov
xor
sahf
fstp
mov
cdq
jge
or
push
std
jle
adc
and
nop
ins
and
cmp
rcl
jecxz
sub
sub
mov
fwait
adc
cmp
cmp
in
int
cmp
(bad)
ret
in
mov
inc
xchg
pop
jge
cmp
aas
jb
loope
xchg
loopne
pop
sub
outs
cmp
add
fwait
xchg
lds
rcr
mov
mov
gs
mov
sbb
cdq
shr
cmps
scas
ret
xlat
fsubr
(bad)
(bad)
test
push
call
out
mov
jle
ret
fwait
scas
mov
in
ftst
push
nop
js
mov
sub
inc
repz
cmp
sub
les
push
mov
cmp
(bad)
aaa
mov
mov
clc
mov
add
test
lods
cmps
shr
cdq
sbb
or
imul
ficomp
mov
jge
retf
and
mov
or
repnz
loopne
jcxz
or
das
add
jo
mov
scas
push
imul
and
dec
imul
ss
out
sub
stos
push
hlt
frstor
std
fadd
or
cwde
rol
rcr
push
leave
cmp
stc
jecxz
push
js
(bad)
fcomp
xchg
mov
(bad)
mov
inc
inc
ja
ror
dec
aaa
mov
cmp
and
std
aas
mov
push
or
out
(bad)
xchg
aaa
int
(bad)
sub
dec
je
xchg
int3
inc
xchg
loopne
or
mov
stc
cli
scas
in
mov
hlt
pop
ror
add
pop
outs
mov
inc
icebp
mov
jecxz
sub
push
inc
mov
jne
mov
and
or
js
pusha
ds
dec
adc
mov
iret
pop
pop
jg
sbb
push
or
fild
add
jp
mov
data16
popf
mov
cmp
xchg
pop
out
(bad)
xlat
cmp
push
ret
and
mov
leave
push
push
inc
sub
push
rcr
loope
and
mov
and
fimul
hlt
ins
loopne
mov
enter
mov
ficom
add
xchg
jns
es
jmp
dec
xchg
loopne
dec
mov
and
jle
(bad)
dec
movs
jb
outs
aaa
adc
out
mov
lods
imul
and
outs
mov
test
cli
xchg
outs
mov
fidiv
stos
lods
mov
dec
sub
hlt
in
loope
std
and
movs
test
cmc
dec
mov
adc
cmc
iret
push
push
ror
fimul
push
mov
adc
sbb
mov
cmp
pop
repz
push
test
xor
ficom
cdq
inc
repnz
arpl
or
into
fdiv
adc
js
jno
fnstenv
cmp
fmul
jb
fistp
sub
jnp
fs
cmp
sahf
push
pop
jb
fistp
and
(bad)
retf
nop
fbstp
add
pop
mov
sub
jmp
retf
mov
(bad)
lahf
int3
bound
mov
sbb
sub
sti
lods
(bad)
or
add
rol
outs
xchg
add
mov
pusha
inc
pop
mov
jmp
or
ret
outs
push
fnsave
push
pop
fstp
cmps
add
loopne
std
pop
pop
iret
inc
(bad)
mov
lahf
dec
data16
xchg
xchg
cli
pop
inc
shr
cli
mov
xchg
mov
pushf
shl
cwde
adc
out
adc
xchg
(bad)
jmp
add
dec
jno
and
mov
inc
cmp
adc
dec
push
jne
dec
enter
adc
test
out
xchg
sbb
(bad)
in
sahf
and
fsubr
add
(bad)
push
out
dec
das
mov
mov
pop
out
pop
imul
(bad)
fdiv
test
mov
enter
jle
cdq
mov
loope
push
fwait
arpl
outs
ins
das
fistp
inc
icebp
jne
ficom
fadd
sub
rol
xor
dec
les
dec
mov
stos
out
aas
push
inc
jl
shl
daa
mov
and
xor
leave
jmp
xchg
jbe
out
and
mov
nop
mov
leave
sahf
dec
sub
xor
xchg
inc
or
xchg
ins
bt
jnp
mov
sub
nop
adc
stc
rol
rol
sbb
idiv
mov
shr
imul
div
loopne
cmps
xor
stc
iret
pop
and
mov
mov
push
sub
sbb
adc
push
inc
jg
mov
ins
ds
or
retf
enter
push
and
or
ins
ins
ja
cmp
into
retf
icebp
jno
lds
push
push
cmp
inc
dec
mov
or
aam
ja
jg
test
js
adc
fstp
add
std
mov
cmc
retf
add
data16
mov
add
scas
fmul
jmp
aam
call
mov
pop
xchg
add
sbb
les
pop
xor
xor
xchg
mov
ds
adc
jmp
jb
pop
fdiv
and
sub
std
sbb
push
xchg
sahf
gs
mov
dec
stos
xchg
sub
int3
jb
addr16
mov
jecxz
jne
ds
mov
jne
sub
aas
mov
das
test
in
bound
test
shl
cmovp
fimul
sti
outs
lods
ret
in
push
adc
or
mov
mov
adc
dec
mov
push
in
std
cdq
retf
and
daa
ss
mov
dec
lds
repz
test
pop
nop
loope
nop
imul
stos
jne
clc
xchg
pop
ds
stc
call
(bad)
in
push
repz
dec
mov
arpl
inc
sbb
jl
push
movs
(bad)
adc
mov
ds
push
stos
in
fmul
push
ret
inc
cmp
mov
int3
in
mov
mov
jmp
out
nop
push
push
jo
and
idiv
lock
lds
cmp
xchg
dec
nop
call
pop
cmp
cmps
xchg
jmp
push
and
add
cdq
push
pop
add
or
xor
fisubr
or
ins
stos
sub
sub
jo
cld
mov
lods
fsubr
mov
aaa
ds
data16
ss
xchg
int
lea
jbe
rcr
fcmovnu
mov
add
adc
in
int3
rcl
cmp
pop
stc
pop
dec
bound
cmc
xchg
mov
mov
mov
ret
mov
xchg
leave
aaa
mov
xor
cmp
imul
sbb
cmc
pop
xchg
cmp
adc
lahf
push
xor
mov
in
jne
and
cld
and
(bad)
sub
lods
je
xchg
xchg
cmp
xor
mov
mov
jne
or
inc
inc
es
fsubr
jb
sar
dec
cdq
jle
aam
out
mov
pop
ja
xchg
ja
sahf
sbb
lock
enter
shl
aas
popa
js
std
nop
cmp
aaa
sar
nop
leave
sub
sbb
add
cmp
sbb
or
rcr
add
sub
adc
cmc
sbb
pop
and
aaa
jmp
das
daa
mov
sti
out
aam
mov
stos
enter
xchg
push
call
sbb
jle
cmp
leave
mov
mov
js
jg
push
pushf
stc
mov
mov
jp
pop
cmps
dec
mov
jp
push
into
es
popf
mov
clc
daa
popf
(bad)
jle
cs
cmp
fisttp
mov
out
ret
inc
jge
pop
sbb
out
xchg
dec
aas
or
jb
les
mov
sbb
sbb
xchg
sub
pusha
push
shl
ss
shr
dec
push
and
out
je
push
clc
fs
push
dec
mov
inc
sar
not
enter
inc
jns
gs
nop
scas
(bad)
xchg
stc
das
mov
inc
fisttp
mov
mov
lods
aam
popf
push
pop
repz
mov
(bad)
in
push
sub
mov
push
enter
mov
pop
jmp
movs
sbb
sub
xlat
lds
sub
cmp
inc
in
rcl
mov
mov
call
int
and
in
retf
cs
test
cmp
aaa
cmp
pop
movs
shr
pop
fcomp
sti
mov
jl
sub
ins
inc
ds
add
daa
cld
mov
or
int3
push
call
mov
mov
rcr
aas
fdivr
sub
dec
in
adc
jne
xor
mov
rol
(bad)
enter
push
idiv
jb
cmc
mov
js
lock
nop
nop
mov
cmp
push
sbb
sbb
jmp
pop
or
jl
je
ins
push
test
lock
pop
in
imul
mov
outs
aam
or
loope
gs
sbb
sbb
cli
in
inc
mov
shr
xchg
or
aas
test
in
in
mov
sub
xchg
daa
xchg
ret
push
cld
addr16
push
ss
xchg
lea
loope
repnz
adc
stos
shr
jle
mov
xchg
xchg
retf
cmp
icebp
fld
mov
sbb
mov
mov
xchg
pop
sub
jnp
shl
out
sub
les
fsub
mov
call
out
push
pop
sbb
pop
nop
sar
cs
add
ret
push
mov
popf
push
daa
fimul
pop
int
adc
cdq
int
aas
mov
(bad)
jmp
cmp
outs
fdivp
idiv
clc
js
push
push
jbe
fcomi
push
add
mov
or
js
ror
jmp
sbb
mov
jp
mov
lods
scas
cmps
add
sbb
adc
(bad)
cmps
enter
or
adc
gs
(bad)
add
or
cmp
mov
test
mov
lds
loope
adc
push
(bad)
cld
ret
imul
inc
push
dec
xchg
not
or
jl
mov
ins
and
inc
jae
and
lods
mov
inc
rcr
fsub
sub
add
lahf
cmp
arpl
jl
lea
in
jg
and
xor
mov
cmp
pop
pushf
or
push
dec
jbe
fnsave
cmps
(bad)
jmp
xchg
repz
cdq
sub
or
mov
ja
loop
ficomp
xchg
sbb
imul
push
jmp
out
sahf
jo
outs
jecxz
shl
loopne
xor
cmp
dec
js
scas
addr16
outs
mov
jle
(bad)
cwde
ret
(bad)
pop
xor
clc
push
add
pop
inc
jmp
les
and
fild
aas
imul
out
push
dec
movs
into
cdq
dec
enter
sbb
add
sub
cmp
leave
scas
nop
mov
scas
mov
sub
inc
movs
outs
xor
test
xor
ret
xchg
jae
push
or
xor
pop
aad
xchg
stos
jb
jmp
xchg
lds
push
jp
es
idiv
das
es
and
in
sub
(bad)
and
sub
dec
mov
push
pmaxub
mov
and
adc
jle
sbb
jo
pop
fild
scas
data16
pop
inc
jp
loope
and
hlt
or
imul
jl
jl
clc
imul
idiv
mov
and
out
fnstcw
stos
mov
push
fistp
out
push
or
(bad)
(bad)
cmp
fcmovnu
push
inc
retf
xchg
stos
test
pushf
pop
(bad)
js
dec
cdq
jg
(bad)
stos
push
jno
test
xchg
mov
hlt
push
dec
das
ret
loope
add
mov
sahf
and
retf
lea
push
inc
aas
fbstp
hlt
push
stos
cmc
dec
mov
iret
or
movs
inc
aam
jae
fdiv
popa
sub
scas
and
mov
xor
xor
pop
cmp
aas
push
xchg
cmp
add
jmp
outs
lods
out
mov
sub
repnz
mov
lock
push
rcr
(bad)
sbb
jns
adc
movs
pushf
mov
stos
in
test
jo
dec
push
pushf
lahf
mov
cmp
pop
pop
inc
and
out
sbb
inc
ins
stc
icebp
jo
in
call
mov
arpl
retf
jae
jbe
int
(bad)
or
dec
inc
jge
retf
adc
mov
add
shl
push
inc
retf
mov
stos
sub
(bad)
in
dec
(bad)
shl
ss
pop
and
out
mov
in
imul
das
mov
add
inc
xor
icebp
das
adc
loope
loop
add
stc
sbb
scas
xor
or
iret
xchg
sahf
sbb
adc
jae
inc
cmp
mov
in
and
mov
cmp
adc
mov
and
jecxz
(bad)
lock
push
jno
popf
or
scas
bound
(bad)
repnz
fsubr
sti
(bad)
mov
or
xchg
jo
jnp
sar
or
retf
shl
pushf
mov
stc
test
ja
adc
fdiv
call
addr16
mov
fdiv
push
stos
(bad)
sbb
dec
cld
push
xchg
push
(bad)
cmc
stos
hlt
mov
sbb
js
test
lock
mov
scas
mov
sbb
push
fld
test
inc
jmp
pushf
xor
sbb
popf
loope
pop
in
jne
adc
cdq
clc
jle
cmc
jae
mov
loope
in
mov
cmps
and
dec
jle
cmps
and
adc
adc
cwde
imul
ins
or
mov
or
div
in
rcr
adc
adc
add
cmp
lahf
cli
cld
sub
or
or
sub
hlt
mov
inc
jg
mov
mov
xchg
dec
mov
iret
in
test
mov
cmp
ret
mov
xchg
and
cmps
inc
xchg
das
nop
pop
pop
push
cli
inc
ret
cld
dec
mov
hlt
mov
jne
mov
xor
clc
in
cmp
int
dec
imul
test
mov
and
jbe
ins
sub
adc
xchg
jecxz
mov
cli
les
sbb
jl
rcr
movs
nop
jno
call
mov
clc
xchg
mov
mov
aam
xchg
in
inc
or
push
loopne
sub
sahf
cmps
outs
xchg
and
pmulhuw
fcmovu
dec
xchg
adc
aas
cmp
inc
adc
(bad)
sti
call
inc
es
mov
xchg
mov
retf
(bad)
fist
adc
shl
sbb
sbb
aas
popa
popa
popf
cwde
inc
or
test
jns
mov
imul
inc
jge
add
mov
aam
call
inc
mov
mov
test
call
inc
push
mov
loopne
cmc
lods
loopne
aaa
das
jno
test
mov
lods
pop
sbb
or
cmp
add
adc
pop
imul
test
out
call
test
test
push
dec
inc
movs
test
push
push
mov
fwait
out
inc
mov
rcr
lea
out
xor
test
scas
adc
cmp
cmp
sub
jo
add
mov
dec
push
add
dec
cmp
mov
sar
cmp
cmps
rcl
mov
jl
inc
shr
mov
inc
aaa
jl
xchg
lock
int
xlat
jecxz
out
retf
and
popa
xor
ds
mov
fmul
retf
pop
sbb
jg
jecxz
outs
(bad)
cld
in
pop
pop
or
jecxz
fistp
ret
dec
mov
lock
test
mov
sbb
cld
adc
clc
or
push
mov
(bad)
fild
mov
(bad)
xchg
fwait
inc
test
sbb
sub
jno
out
jecxz
sub
xchg
je
ffreep
(bad)
xchg
in
mov
(bad)
jne
mov
and
inc
fld
fwait
bound
adc
ret
fwait
in
adc
mov
(bad)
mov
stos
pop
inc
add
dec
call
lods
repz
lahf
pop
fbstp
inc
daa
in
int3
call
or
icebp
ins
lea
fs
adc
(bad)
pusha
xchg
or
idiv
mov
push
sub
sbb
cdq
mov
fcomi
loope
into
mov
adc
imul
add
xor
les
mov
rcr
mov
scas
(bad)
pop
fsubrp
add
mov
sub
cmc
adc
inc
mov
lods
aas
(bad)
lock
cli
dec
inc
bound
wrmsr
adc
inc
stos
or
fs
adc
jl
aad
jmp
cmp
cmp
repnz
add
mov
xchg
dec
sub
sbb
clc
sub
jne
repnz
fmul
adc
in
mov
cld
push
out
jns
sub
daa
push
jp
aaa
out
adc
xlat
cli
outs
ss
clc
pop
ss
sar
stc
inc
cld
mov
mov
call
jo
push
in
mov
dec
push
xchg
movs
js
lods
sahf
mov
rcr
nop
jbe
(bad)
mov
mov
aad
xchg
data16
test
call
xor
loope
jle
jl
xchg
cld
inc
push
push
out
pop
pushf
and
in
pop
pop
mov
or
xchg
movsx
in
and
add
jecxz
xchg
stos
mov
or
mov
add
sub
stos
xchg
xor
or
not
xor
dec
sbb
stc
jno
mov
pop
push
loope
push
pushf
jmp
(bad)
push
(bad)
test
popf
aam
jp
mov
neg
push
and
push
lods
ins
mov
les
mov
jmp
inc
scas
fs
jmp
in
cmp
or
inc
idiv
gs
jg
pop
sub
test
or
push
pop
inc
sbb
movs
jg
or
pop
icebp
das
hlt
(bad)
icebp
add
add
jnp
pusha
mov
xchg
and
and
mov
dec
in
lahf
ins
and
pop
sbb
sub
xchg
pusha
jmp
or
cwde
cmp
mov
push
loopne
ds
iret
mov
and
sbb
pop
mov
loope
aas
xchg
fwait
add
or
outs
es
cmp
fdivr
cmp
jecxz
mov
inc
cmp
mov
jne
pop
lods
mov
aaa
shl
jle
adc
push
inc
mov
adc
cmp
mov
shr
repnz
les
int3
mov
hlt
retf
jmp
in
mov
xchg
movups
mov
and
scas
test
push
xchg
movs
pop
jno
nop
lock
sbb
push
mov
add
pushf
les
sbb
add
inc
fist
popa
pop
sub
retf
mul
xor
stos
cmp
adc
cmps
pushf
mov
scas
clc
movs
test
mov
fwait
mov
push
jns
xchg
mov
mov
mov
(bad)
loopne
pop
in
sbb
addr16
sbb
test
fdiv
mov
iret
pop
jl
xchg
mov
pusha
push
lss
shl
jge
mov
add
mov
sahf
jne
mov
pop
sub
add
retf
or
xor
rcr
sahf
sbb
inc
pop
mov
call
mov
push
mov
sbb
mov
test
jmp
push
hlt
sbb
sbb
test
enter
jmp
dec
push
test
mov
sub
dec
xchg
sub
(bad)
and
rcl
in
cwde
inc
call
inc
pop
cmps
sub
(bad)
push
shr
mov
repnz
cli
scas
hlt
retf
jp
inc
pop
punpckhdq
dec
int3
shl
fadd
xchg
adc
mov
gs
ins
nop
mov
jmp
push
jns
sub
and
movs
dec
inc
in
into
adc
fwait
shl
xchg
cli
out
ror
mov
dec
pop
jp
inc
xchg
test
repz
ficom
in
vcvttpd2dq
add
ret
xchg
aam
fmul
pop
int3
inc
(bad)
mov
xchg
mov
xchg
jp
push
inc
sbb
add
scas
in
adc
jnp
ficomp
das
mov
sahf
pop
mov
repnz
iret
adc
dec
dec
aaa
push
call
ret
inc
adc
or
xchg
xlat
outs
repz
cmps
push
ror
push
dec
in
mov
xchg
ret
bound
out
fadd
jp
push
jg
ja
push
adc
xchg
jge
mov
ror
xchg
stos
mov
or
pop
sub
(bad)
mov
in
sub
dec
dec
cmp
jne
test
pop
mov
lods
mov
pop
into
jno
in
repz
mov
mov
mov
test
pop
pushf
mov
aas
and
push
rcr
int3
ficom
sub
aad
test
sbb
call
sbb
dec
imul
add
ins
jno
stos
inc
mov
dec
push
xor
push
mov
loop
mov
jae
push
push
shl
lods
mov
sbb
xchg
test
mov
retf
daa
jmp
jp
mov
add
sub
cmp
loope
pop
rcl
adc
ds
imul
std
loope
aas
test
lods
popf
iret
mov
imul
push
rcl
je
ret
inc
into
xor
(bad)
cmp
sbb
(bad)
lock
je
mov
mov
sub
cmc
mov
(bad)
clc
or
fbstp
and
sti
pushf
mov
inc
push
jne
fs
add
and
add
call
rcl
push
jp
sub
mov
cmp
ds
lahf
or
leave
push
lahf
pop
mov
dec
cdq
js
cmp
and
xor
cmp
cmp
mov
mov
push
imul
sub
xchg
mov
mov
adc
or
mov
sub
dec
adc
call
ficomp
jae
pop
adc
sbb
ds
mov
mov
fist
dec
mov
hlt
ja
xor
inc
sub
(bad)
(bad)
movs
popf
movs
xor
xchg
sbb
retf
repnz
mov
cdq
xchg
out
aam
(bad)
es
jecxz
mov
pop
aas
mov
jmp
push
dec
out
test
fidivr
daa
leave
mov
xchg
xchg
cmp
rol
imul
jg
sub
scas
popf
sub
sub
xchg
push
sbb
xchg
iret
adc
dec
jae
aas
push
js
inc
(bad)
addr16
pop
jmp
imul
dec
nop
adc
inc
mov
jb
jge
shl
aad
pop
jns
mov
fsubr
lock
xchg
addr16
je
xlat
cmp
inc
int
push
mov
xor
scas
and
sar
inc
add
(bad)
push
clc
push
mov
std
cwde
sbb
cmp
mov
inc
sbb
test
mov
in
inc
out
stc
adc
stos
imul
mov
mov
and
scas
xor
push
mov
mov
cld
cmp
pushf
sub
push
or
mov
push
xor
cmps
dec
ins
popf
dec
xchg
jbe
ja
inc
retf
out
aam
es
ret
retf
fild
sbb
mov
fdiv
mov
lahf
add
dec
pushf
or
jb
stc
inc
fist
out
mov
dec
mov
cmp
add
jp
enter
ret
enter
sti
and
retf
les
(bad)
mov
mov
outs
pop
fld
fisttp
inc
ret
xlat
daa
and
and
and
fnstcw
jle
ficom
out
sahf
cli
fistp
sti
pop
dec
(bad)
xor
mov
in
adc
xchg
jnp
sbb
xor
inc
test
adc
cmp
es
loop
test
int
sbb
pop
out
mov
popf
aas
mov
sub
repz
loope
test
lods
dec
gs
repnz
lods
dec
ret
loope
push
xor
dec
je
stos
mov
(bad)
jg
push
in
mov
lods
cmp
sub
lahf
in
cld
repnz
movs
xchg
cmp
in
outs
mov
stos
push
out
nop
pop
adc
adc
xchg
movs
mul
imul
push
sub
push
pop
cmps
dec
xchg
cmp
adc
push
stc
mov
mov
and
shr
enter
hlt
js
aad
and
call
mov
mov
jl
not
sbb
xlat
cli
jbe
cmp
loop
xchg
xor
(bad)
neg
sbb
rol
ror
mov
jnp
jb
scas
je
cmp
xor
shl
mov
dec
xor
mov
adc
and
jl
cmp
(bad)
dec
cmp
clc
xor
es
cmp
in
in
enter
xor
and
mov
pop
out
jns
scas
bound
out
loopne
push
sbb
adc
mov
mov
push
mov
popf
jl
xor
jmp
pop
out
push
jnp
and
inc
and
push
xchg
lock
mov
loopne
mov
retf
test
imul
sub
(bad)
xchg
cmp
add
or
dec
sti
dec
fisttp
dec
sub
data16
push
jl
fsub
add
loop
pop
in
int
test
shl
mov
aas
mov
dec
stc
into
std
outs
dec
loopne
sahf
or
jmp
jnp
xchg
push
push
aaa
dec
shl
mov
icebp
xchg
(bad)
fldl2e
sar
or
mul
fwait
aas
sub
push
add
inc
hlt
ffree
outs
or
xor
inc
or
clc
repnz
jg
sbb
shr
clc
push
adc
dec
outs
pop
shl
mov
sar
and
sbb
inc
fmul
push
sub
jmp
ficom
sub
mov
aaa
imul
xor
mov
adc
ins
inc
in
xor
push
js
rcl
jge
add
mov
lock
mov
inc
dec
mov
mov
out
in
repnz
fbstp
es
clc
dec
ja
jecxz
test
sub
push
mov
aas
scas
add
cwde
xchg
push
repnz
(bad)
jp
sbb
push
xchg
stos
or
inc
scas
pop
out
aad
dec
sub
repnz
and
inc
faddp
shl
and
hlt
pushf
xor
push
xor
shl
inc
test
shr
fisubr
aam
test
pop
lods
mov
xchg
imul
or
jo
inc
or
inc
aam
jmp
hlt
xchg
in
bound
push
fadd
outs
pop
xchg
sub
mov
jg
sub
cli
lock
sub
addr16
add
fwait
mov
xchg
lods
call
add
push
push
and
and
(bad)
pusha
mov
mov
loope
aaa
jns
and
adc
xchg
ja
fdivp
pop
jnp
push
pop
add
inc
xchg
jle
sbb
ficom
les
retf
in
pop
sbb
nop
aaa
cmps
outs
(bad)
or
dec
(bad)
ds
xchg
jbe
mov
sub
test
data16
jecxz
inc
xor
pusha
mov
push
fwait
xchg
int3
inc
mov
or
call
cmc
fmul
mov
dec
add
mov
cmps
jns
iretw
stc
ret
ret
lock
retf
gs
imul
in
xor
push
pusha
sub
push
cmc
out
xchg
jecxz
xor
add
pop
inc
popa
mov
sub
test
imul
jecxz
addr16
movs
dec
mov
and
ret
sbb
(bad)
jmp
movs
loop
jne
mov
and
xchg
jg
in
sbb
xchg
sub
pop
mov
movs
xor
in
dec
jg
dec
gs
dec
pop
cmps
push
(bad)
fiadd
and
addr16
pop
pop
inc
mov
push
inc
adc
xchg
(bad)
test
repz
lahf
pop
jo
cs
lods
dec
je
sub
fdivrp
or
add
stos
into
aas
int
jl
ficomp
xor
aas
data16
and
(bad)
or
ds
cmps
pop
in
mov
pop
lods
test
in
in
sbb
aad
cmc
or
pop
stos
xor
adc
push
test
in
fcom
mov
jl
rcr
or
std
shr
xor
push
mov
sbb
lock
adc
out
inc
cmp
cdq
into
lea
jne
mov
cmp
push
or
add
stos
push
jle
cmp
call
pushf
div
movs
push
in
shl
ss
icebp
movs
shl
retf
mov
sbb
fisubr
out
pop
test
jo
sub
push
pop
jle
xor
inc
pushf
jne
(bad)
mov
pop
dec
pop
hlt
aas
les
xor
mov
inc
cmc
call
pop
xor
push
xor
cmp
sub
xor
cwde
inc
fiadd
push
icebp
rcr
mov
mov
repnz
cmps
xor
xchg
xchg
(bad)
jo
mov
lahf
or
scas
cmp
mov
sbb
int
xchg
mov
fwait
xor
mov
jmp
or
jb
int
pop
leave
or
fcmovnb
and
adc
push
push
mov
inc
inc
adc
(bad)
sub
sbb
fwait
test
(bad)
mov
outs
leave
mov
pop
dec
mov
popf
jle
jbe
push
sbb
(bad)
int
dec
adc
adc
fwait
repnz
xchg
cwde
inc
dec
push
sahf
mov
test
out
ja
push
xor
gs
mov
loop
mov
cmps
test
sub
dec
dec
jmp
and
jns
add
or
push
mov
dec
mov
loopne
ja
(bad)
xchg
cmps
aaa
push
jns
lods
xchg
push
or
popa
dec
jg
cli
pop
shr
gs
in
bound
call
or
test
xchg
mov
sar
jbe
fstp
push
cmp
mov
sbb
hlt
and
test
xchg
dec
mov
pop
mov
mov
push
loopne
mov
stos
shl
xor
aas
and
addr16
cs
fcom
pushf
jb
daa
and
gs
jno
pop
sub
push
sub
add
sub
loopne
outs
imul
pop
sub
xchg
inc
enter
cwde
cmp
cld
ret
shrd
sub
and
sahf
stos
scas
add
jno
push
jbe
imul
(bad)
mov
cmp
dec
xor
shl
dec
cmp
dec
mul
fwait
sbb
std
icebp
push
in
aam
call
in
dec
repz
out
call
xchg
xchg
addr16
sbb
in
fmul
rcr
mov
out
call
out
sbb
jnp
adc
sub
xchg
mov
outs
adc
xchg
(bad)
push
or
call
ret
push
enter
xchg
scas
mov
pushf
iret
fmul
xor
sbb
lods
push
or
cld
mov
inc
fidiv
mov
push
loop
retf
mov
lea
mov
add
std
sub
cwde
fst
clc
push
push
adc
js
movs
scas
pop
jb
mov
cmps
arpl
cmp
xor
xchg
dec
adc
or
jne
test
push
xchg
or
jmp
and
es
ror
ret
aam
into
mov
loop
dec
clc
push
ins
jp
call
mov
dec
mov
test
sbb
ss
or
mov
(bad)
mov
xchg
aam
js
and
push
je
xor
dec
xchg
daa
aam
enter
scas
popf
jmp
mov
cld
lods
std
pushf
rol
mov
loopne
scas
mov
(bad)
idiv
clc
inc
cmp
into
sbb
inc
test
bndstx
mov
cmc
and
push
data16
push
xchg
jo
jns
adc
jle
and
das
movs
or
stos
pop
sub
xor
mov
or
fiadd
aad
push
aas
pop
inc
cmp
mov
xchg
shr
fnstcw
shl
int
leave
sub
ror
jns
and
idiv
and
ret
shl
mov
xchg
(bad)
cli
sub
ror
sub
ror
mov
xor
hlt
cmp
dec
imul
add
push
pop
call
xchg
out
into
inc
pushf
jl
inc
sbb
ds
cld
xchg
sub
cmp
stc
jecxz
std
imul
xor
adc
inc
shr
mov
inc
mov
ror
in
pop
xchg
test
mov
inc
fbld
pop
loopne
xchg
sub
adc
mov
(bad)
sub
jb
sub
pusha
adc
xchg
push
push
xchg
sub
mov
outs
shl
int3
fwait
xchg
push
enter
data16
mov
push
mov
xchg
jbe
inc
out
ror
sbb
js
mov
out
adc
mov
repnz
sub
sbb
push
std
pusha
sub
or
push
dec
xchg
fisttp
xor
out
mov
test
xor
aad
push
adc
push
cwde
and
or
and
pop
repz
adc
imul
shl
inc
repz
xchg
les
push
js
or
jl
xchg
fist
pop
rol
(bad)
aam
pop
scas
iret
test
int
imul
jl
mov
iret
aad
adc
sbb
sar
cmps
cld
cdq
hlt
xchg
mov
fst
inc
mov
xor
mov
pop
movs
into
fild
lock
(bad)
xchg
sub
inc
mov
and
test
test
mov
sbb
mov
fucompp
leave
fwait
adc
lock
retf
scas
sub
lock
sti
jmp
mov
iret
dec
fxch
mov
sub
cld
repz
out
scas
and
scas
push
sbb
es
cmp
pop
adc
sub
cli
loopne
(bad)
or
mov
fnsave
enter
inc
ins
jbe
xor
nop
or
cdq
fcomp
jge
lock
adc
test
cdq
daa
pop
jb
call
jno
(bad)
in
cmp
gs
add
adc
sbb
sahf
test
xchg
or
imul
lods
xor
imul
loope
and
sbb
and
fnsave
mov
pop
jg
sub
mov
and
out
mov
mov
add
pusha
adc
push
add
inc
enter
push
rcr
jl
add
out
test
stos
mov
xchg
cmp
bswap
cmps
mov
add
sar
aam
(bad)
sbb
mov
ret
cs
mov
push
jno
shr
ins
mov
repz
mov
mov
adc
dec
daa
mov
mov
and
xchg
(bad)
mov
cli
(bad)
adc
sub
and
pop
test
adc
cmp
adc
push
or
push
adc
adc
adc
aad
shl
ffreep
out
cmp
and
cs
mov
dec
fiadd
adc
xchg
mov
push
test
jle
dec
ss
lods
lock
and
mov
pop
inc
cmp
adc
inc
mov
push
jne
ss
mov
clc
push
cmp
pushf
inc
push
paddsw
sahf
enter
or
out
leave
mov
int3
add
jecxz
mov
int3
ins
push
fsubr
das
retf
adc
jle
xchg
xor
push
mov
jg
pop
(bad)
jmp
sbb
dec
(bad)
mov
popa
xchg
loop
in
add
ins
inc
fwait
popf
or
int
arpl
movs
ret
xchg
enter
aam
popf
mov
call
test
and
neg
int
into
mov
xor
int3
loop
ds
jb
push
jmp
nop
inc
retf
mov
loope
jle
aaa
jb
xchg
push
scas
(bad)
aam
scas
jnp
ds
dec
ficom
(bad)
ja
sbb
jo
test
xor
jae
sbb
jae
add
imul
call
add
iret
pop
shl
mov
aaa
stos
out
cmp
es
xor
and
nop
push
shr
mov
test
sbb
fimul
jns
pop
dec
jb
mov
movs
inc
ins
or
and
sti
jmp
xor
jg
jne
cmp
dec
aad
dec
jge
xchg
inc
cmp
outs
adc
imul
and
sub
inc
cmps
ffreep
loope
test
and
imul
pop
cmps
jnp
js
aas
sub
mov
and
fisttp
ficom
ja
sbb
cmp
bnd
in
repz
adc
(bad)
push
fadd
xor
or
xchg
dec
cmp
dec
sub
pop
in
sub
sub
mov
pop
adc
push
cmp
mov
lods
mov
fisub
int
div
mov
call
inc
cmp
out
cs
fdiv
popf
jb
xchg
mov
pop
imul
out
mov
int
into
push
shl
jno
add
and
sub
arpl
jb
mov
push
into
(bad)
loopne
or
pushf
lahf
jl
stos
into
mov
mov
cld
sar
outs
cwde
cmp
adc
adc
push
xchg
test
inc
cwde
xor
out
(bad)
aas
xor
and
fidiv
(bad)
retf
leave
sahf
inc
rcl
push
(bad)
hlt
data16
shl
rcr
retf
arpl
pusha
xchg
inc
or
push
cwde
arpl
clc
pop
dec
cmp
or
inc
out
scas
jg
or
dec
shl
cwde
and
or
das
test
out
adc
adc
std
sbb
mov
cmp
fstp
inc
cmps
fucomi
mov
iret
and
add
ja
sbb
sar
outs
cli
sahf
addr16
mov
pop
(bad)
pop
or
stc
fwait
stos
pop
push
mov
mov
bound
pop
mov
ins
mov
cmps
in
pop
stos
pop
es
xor
mov
mov
dec
fs
or
xor
int
mov
jecxz
movs
movs
sub
in
stos
lds
iret
push
jae
mov
push
cmp
mov
cwde
int3
pusha
mov
sbb
mov
or
add
inc
push
jns
mov
bound
push
shr
adc
xchg
sub
outs
fwait
push
mov
aas
dec
(bad)
jecxz
or
(bad)
repnz
fstp
xchg
fistp
jecxz
push
into
sahf
pop
xchg
add
and
in
test
jle
scas
xor
adc
inc
xor
pop
xchg
data16
jge
push
nop
mov
mul
repz
ret
retf
out
ret
push
test
mov
idiv
stos
jbe
pop
repnz
loop
xchg
lar
mov
sub
xchg
jo
gs
fdivr
mov
cmps
les
lock
mov
enter
fistp
mov
or
ss
test
loopne
add
stos
push
push
sahf
call
mov
data16
fdiv
ins
jp
nop
pushf
push
or
or
je
in
jno
rcl
push
sbb
cwde
test
mov
xor
sbb
inc
imul
or
sub
mov
das
clc
sub
aas
sbb
sub
(bad)
scas
jmp
push
cmp
and
jge
bound
adc
inc
xchg
fst
imul
cli
daa
jge
mov
sbb
les
fstp
adc
sbb
sub
push
pop
not
add
pop
lds
adc
mov
cmps
mov
sub
or
pop
test
idiv
mov
ret
stos
and
xchg
inc
push
out
mov
ds
inc
mov
adc
jmp
cmp
arpl
sti
movs
or
aaa
jg
dec
dec
and
push
vmread
and
push
jmp
mov
movs
push
mov
cmp
sub
xchg
sub
jno
clc
fmul
enter
test
or
pop
xor
dec
cld
rcr
push
lock
push
into
jmp
aam
aas
dec
dec
out
fwait
mov
enter
dec
call
test
rcr
call
lods
(bad)
mov
adc
jo
push
cmps
jle
mov
retf
push
mov
push
xor
cli
mov
into
daa
repnz
add
repz
add
push
add
xor
loop
mov
mov
mov
mov
jmp
pop
sbb
mov
mov
adc
mov
add
or
ret
scas
pop
pop
jmp
push
outs
movs
mov
outs
inc
idiv
push
data16
mov
(bad)
pop
ins
stc
inc
daa
cmp
out
jmp
add
into
shl
bound
push
fcom
dec
xor
xchg
mov
mov
sbb
push
xchg
pushw
mov
icebp
cmp
xchg
call
or
inc
pusha
sbb
cmp
jno
pop
mov
cmp
pushf
scas
cmps
pop
arpl
mov
sub
(bad)
jbe
pop
out
fisub
sahf
aad
loop
sbb
push
push
ret
push
mov
(bad)
mov
jle
mov
aaa
dec
pop
mov
shl
dec
or
pop
into
mov
scas
(bad)
mov
loopne
mov
jae
pop
sub
adc
sbb
rcl
test
mov
aas
jo
mov
out
retf
clc
(bad)
ins
ret
mov
stc
mov
xlat
mov
ret
inc
shr
imul
bound
pop
stc
add
(bad)
call
sub
sub
inc
xchg
ds
sahf
fidivr
pop
stos
sub
retf
shl
call
mov
repnz
mov
fld
jge
or
shl
cwde
mov
mov
addr16
sahf
dec
jp
(bad)
mov
mov
mov
in
jbe
mov
popf
lock
cmp
repnz
ror
xchg
call
jge
aam
dec
mov
mov
test
mov
fidiv
pop
aaa
frstor
js
jp
push
adc
mov
sub
mov
aas
dec
push
push
xor
pop
jl
retf
add
cwde
and
dec
xchg
jmp
inc
cmp
jle
push
sbb
nop
pop
cdq
outs
lahf
out
adc
mov
cld
popf
sub
xchg
mov
cli
retf
cmp
cmp
add
test
pop
add
daa
mov
icebp
or
in
iret
test
iret
(bad)
rol
sahf
xchg
mov
add
mov
pop
fxch
ss
aaa
inc
mov
mov
mov
stos
fdiv
das
arpl
mov
rol
pop
or
sbb
js
and
cdq
cmps
in
or
ror
enter
mov
and
push
mov
call
out
pop
addr16
push
jmp
outs
pop
cmp
cmp
cmps
pop
addr16
dec
add
mov
sti
xor
adc
push
xor
retf
dec
out
sub
and
icebp
(bad)
adc
loope
cdq
jns
aam
pop
aad
jno
xchg
adc
dec
stos
cmp
sbb
inc
push
mov
lahf
icebp
stos
pop
mov
push
dec
xchg
and
out
mov
pushf
call
push
add
std
mov
mov
adc
xor
mov
or
dec
mov
test
aam
(bad)
cld
or
sub
pop
loopne
(bad)
test
mov
xchg
jo
int
sub
push
es
sbb
jo
jo
adc
mov
inc
mov
mov
out
or
ds
hlt
and
(bad)
jo
lahf
fcom
mov
cmp
push
cdq
fwait
sbb
hlt
in
(bad)
inc
loopne
or
in
inc
push
aaa
pmullw
lahf
xor
xchg
sub
(bad)
repnz
inc
mov
shl
pusha
jle
out
cli
cmc
mov
inc
mov
idiv
out
adc
mov
push
int3
xchg
lea
inc
or
loop
xor
movs
hlt
mov
xor
inc
inc
stc
jae
fcmovu
scas
in
rcr
xchg
push
mov
and
rep
jno
(bad)
ret
outs
pop
cmp
or
adc
test
push
jp
ss
cmp
cmp
inc
loopne
mov
or
push
cli
dec
cmps
sub
movs
or
cmp
cmp
add
pop
pop
cmps
mov
mov
xchg
push
push
not
push
mov
mov
sar
int3
clc
jmp
xor
push
fadd
hlt
shl
loop
retf
xchg
sbb
mov
or
sub
and
xlat
mov
out
lods
pop
popf
mov
push
jns
pop
mov
js
nop
push
mov
jmp
imul
jno
cdq
push
pop
sub
jno
loopne
cmc
pushf
xor
test
jmp
repz
mov
(bad)
cli
sub
jmp
(bad)
daa
push
test
lock
or
xor
xchg
iret
bound
aas
and
ds
into
xor
mov
(bad)
or
jp
xor
pushf
xchg
push
call
je
and
fmul
scas
imul
cdq
es
popf
imul
cs
pop
(bad)
xlat
ret
pop
hlt
jp
xor
pop
mov
pop
fadd
and
and
xchg
inc
cwde
div
dec
xchg
adc
xchg
aas
mov
or
jae
sub
jmp
push
mov
xor
(bad)
pop
inc
xchg
scas
xchg
addr16
mov
adc
test
fstp
mov
mov
mov
movs
mov
mov
sti
imul
clc
sahf
arpl
cmps
pop
pop
popf
retf
mov
push
add
lods
sbb
repz
xor
push
pop
sti
push
pop
cmp
aas
nop
je
imul
mov
pop
add
cld
cmp
xchg
and
shr
aas
sbb
mov
xchg
push
scas
daa
mov
push
cwde
push
outs
(bad)
psllw
inc
retf
mov
sub
sahf
popf
daa
(bad)
(bad)
jg
xor
scas
xchg
mov
lahf
movntq
out
jno
outs
cwde
in
sub
jne
scas
push
repnz
(bad)
jnp
es
jecxz
adc
mov
adc
retf
test
sbb
popf
sahf
mov
lock
int3
cmp
das
fidivr
cmp
in
mov
ja
loope
outs
int
ss
les
mov
sub
jp
or
jne
inc
mov
pop
jl
xlat
hlt
fmul
fidivr
into
retf
cmp
inc
mov
mov
and
mov
jo
sbb
nop
adc
adc
in
pushf
mov
(bad)
ss
aam
mov
imul
out
dec
jmp
push
mov
aad
mov
dec
adc
add
pop
leave
lds
mov
xor
je
std
mov
imul
adc
aaa
stc
fcomp
or
es
inc
mov
mov
pop
adc
adc
jb
pop
push
xchg
loopne
push
lds
push
mov
mov
daa
int3
push
rcr
ins
ja
add
push
jle
stos
in
iret
mov
and
ins
popf
pushf
adc
inc
out
inc
scas
adc
imul
jmp
fsubrp
push
dec
fistp
cli
ret
adc
cmp
daa
add
mov
movs
fisubr
lock
sbb
outs
mov
push
test
inc
cwde
rcr
bound
jge
adc
(bad)
enterw
cwde
mov
push
mov
enter
mov
adc
lahf
cwde
mov
mov
and
outs
dec
jnp
jl
mov
jnp
or
push
int
std
loop
mov
hlt
xor
mov
cmc
and
mov
xchg
aas
test
xor
fsubrp
jmp
ds
mov
pop
jle
ins
cmps
clc
bound
scas
out
jg
and
sbb
(bad)
and
cmp
inc
push
pushf
mov
in
std
int3
xor
adc
xchg
fmul
je
lahf
lds
inc
cmp
mov
shl
pop
(bad)
call
mov
cwde
push
imul
mov
ret
push
retf
pusha
push
and
push
ja
push
pop
movs
les
bound
adc
inc
sbb
sbb
in
and
or
cmp
add
rol
dec
jb
push
loopne
jmp
test
jns
and
xor
in
jge
pop
jno
fcomp
mov
push
data16
cld
movs
fisubr
cld
fiadd
cld
outs
jns
lods
fdivr
rcl
push
ror
sti
icebp
pushfw
mov
in
(bad)
fisttp
pop
js
pop
cmp
ds
test
jnp
lds
out
mov
mov
and
xchg
push
xchg
and
xchg
in
out
xchg
jp
pop
das
dec
and
pop
cs
sub
je
test
cmps
inc
(bad)
scas
xchg
aam
rcl
mov
adc
fadd
gs
jbe
and
pop
jo
cli
cmp
test
fadd
das
jecxz
movs
push
xchg
pop
sbb
dec
movs
sbb
or
int3
out
and
ret
jb
or
mov
pop
push
movs
mov
pop
mov
enter
(bad)
adc
xor
jb
jecxz
push
xchg
neg
hlt
mov
test
adc
mov
pop
sbb
pushf
outs
call
inc
cmp
xor
mov
jmp
scas
in
sub
lods
cmp
leave
das
dec
dec
jg
jmp
scas
adc
cmp
leave
das
mov
arpl
xor
sub
mov
pop
in
aas
out
shr
inc
sbb
adc
(bad)
(bad)
loopne
push
or
cmp
pop
dec
les
paddd
or
lock
pop
shl
sub
xchg
push
sbb
(bad)
mov
arpl
pop
out
shr
or
fs
fsub
xor
call
inc
in
mov
shl
mov
enter
aaa
es
lahf
scas
test
and
mov
sbb
arpl
push
push
cwde
mov
hlt
mov
push
nop
xchg
sahf
xchg
push
or
xchg
clc
nop
inc
lahf
mov
mov
jb
mov
retf
iret
cli
div
mov
push
lds
inc
add
fdivr
cmp
stos
(bad)
cmps
fld
into
loop
push
popf
push
bound
popa
dec
sbb
pop
or
(bad)
cmps
jp
mov
jo
out
inc
xor
adc
mov
or
mov
lock
call
add
icebp
xchg
add
js
fadd
lock
aas
stos
aam
xchg
add
scas
cmps
mov
or
adc
jp
test
xchg
jae
and
out
fs
fsubr
fcom
inc
test
pusha
inc
lea
js
ins
retf
loopne
mov
arpl
pop
clc
loopne
push
ficom
xor
adc
cmp
(bad)
sub
xchg
into
xchg
adc
addr16
fs
mov
(bad)
mov
jl
(bad)
or
jle
jb
stos
mov
neg
add
inc
xor
push
retf
sbb
cmp
fsub
fadd
call
add
xchg
cmp
xchg
mov
and
call
pushf
(bad)
jecxz
pop
(bad)
adc
adc
imul
sub
sub
xchg
retf
sbb
jl
mov
or
mov
and
mov
mov
mov
imul
push
inc
lods
inc
inc
pop
push
jo
sbb
sti
jo
xor
into
mov
inc
test
pop
pop
test
bound
mov
mov
xlat
or
inc
adc
and
xchg
sbb
lea
add
(bad)
xor
ds
push
scas
rcl
fiadd
mov
jb
daa
addr16
sahf
pop
push
xor
out
sahf
mov
mov
pop
aam
push
cmc
pop
movq
xchg
out
jmp
in
(bad)
pusha
(bad)
sbb
rol
jecxz
fild
out
mov
jno
xchg
adc
fcomp
xor
cs
push
test
mov
pop
fdivr
fmul
or
test
sub
das
loopne
jb
bound
sbb
fdivr
js
sub
popf
stos
xlat
inc
push
test
add
xchg
and
xchg
sub
ret
and
retf
lahf
dec
sbb
sub
sub
inc
jg
push
pop
cld
ret
jmp
test
adc
pop
nop
inc
mov
ret
sub
jmp
(bad)
dec
hlt
out
xchg
add
imul
jp
mov
ins
ss
add
sahf
jecxz
cmp
movs
sub
jo
rcr
cdq
pop
scas
dec
pushf
mov
sbb
push
and
mov
pop
jle
cmp
cdq
into
sbb
pushf
jmp
sub
retf
jbe
inc
cmp
lahf
mov
cmp
cmps
add
cmp
shr
mov
retf
push
mov
sub
scas
call
std
ja
or
pop
cwde
adc
inc
mov
lahf
jb
fisttp
and
inc
aaa
in
sti
push
shl
mov
std
jp
in
mov
xor
pop
fidiv
xor
rcl
cmp
xchg
shl
cmp
mov
mov
adc
add
cwde
into
and
test
sar
enter
jnp
cld
fadd
jo
cmp
xchg
cmp
add
mov
sbb
cwde
sub
inc
and
into
lahf
inc
mul
lock
mov
and
inc
push
mov
xchg
cmp
(bad)
jmp
xchg
xchg
ror
mov
xor
test
push
leave
pop
push
jnp
(bad)
push
jge
and
mov
add
imul
pop
and
test
cmp
loopne
mov
fwait
jecxz
push
add
outs
dec
jb
pushf
movs
jbe
mov
cmp
sub
addr16
fcmovu
das
sti
outs
addr16
(bad)
fcmovnb
aad
ss
nop
or
jno
aas
cdq
mov
xor
aas
push
adc
mov
mov
push
int3
xchg
pop
and
lock
mov
pop
cmp
sub
retf
not
ficomp
out
jle
inc
mov
dec
add
jl
ins
ret
xor
sbb
jo
mov
das
lods
outs
loopne
cwde
sub
push
js
inc
pop
movs
test
loopne
rcl
bound
xor
dec
pop
loop
data16
(bad)
lock
sahf
scas
pop
call
jae
adc
out
(bad)
fistp
movs
mov
mov
fiadd
dec
iret
pop
jge
cmp
mov
cld
test
mov
(bad)
test
popf
lock
unpcklps
mov
lods
stos
popf
imul
pushf
adc
jnp
es
fld
add
pop
mov
je
dec
xchg
jno
pop
ror
dec
sbb
cmp
push
sti
inc
or
test
scas
cmps
dec
popf
mov
movs
imul
pop
xchg
ret
(bad)
adc
push
sbb
fldenv
pop
mov
and
mov
popf
dec
(bad)
fcom
xor
pop
pushf
pop
cs
xor
loope
xchg
mov
sub
minps
outs
outs
sbb
sub
xlat
test
in
out
adc
push
iret
xchg
sub
xchg
jge
dec
outs
imul
mov
mov
aaa
adc
adc
sub
addr16
mov
jbe
dec
nop
xor
cld
xchg
aam
mov
dec
jmp
sub
sub
loopne
je
or
ret
cmps
fsubr
mov
out
stos
shr
fdiv
cs
jmp
imul
repz
push
xlat
stos
repnz
push
(bad)
jmp
leave
dec
inc
adc
push
test
inc
loop
enter
mov
xchg
mov
inc
loopne
adc
clc
mov
xchg
inc
gs
jno
inc
cmp
push
cmps
cmp
cmp
fadd
jg
not
xor
jl
popa
fs
sahf
sub
fbstp
sub
mov
lock
cmps
jae
in
addr16
paddd
adc
ins
jnp
ficom
cwde
call
sbb
adc
or
or
cs
xchg
inc
cmps
cs
clc
mov
idiv
xor
add
sub
pop
mul
push
popf
xor
bound
in
mov
mov
loop
outs
jmp
push
pop
aaa
adc
inc
jg
ds
ins
cdq
lock
in
aam
outs
pop
pop
shl
inc
pusha
inc
and
xchg
mov
mov
cmp
xor
inc
gs
mov
pusha
sbb
mul
xchg
jnp
test
loopne
sahf
sbb
xchg
jo
neg
push
adc
xchg
dec
dec
pop
outs
and
out
cli
scas
sub
shl
mov
jmp
sbb
cdq
lods
push
sub
idiv
shl
mov
mov
dec
in
out
mov
xchg
neg
jmp
jge
mov
cdq
pop
(bad)
in
mov
cmove
push
out
rcr
adc
rcl
movs
shr
pop
pop
push
jnp
dec
adc
les
mov
and
fs
cmps
cmp
mov
xchg
ins
fmul
(bad)
pop
xchg
push
xor
je
xchg
dec
inc
push
pop
xchg
ins
scas
push
sbb
mov
xchg
fidiv
xchg
ror
ss
add
and
(bad)
cld
inc
xor
jae
aaa
cmp
mov
jno
aad
mov
ins
and
xchg
jbe
int
idiv
push
retf
cmp
cmp
shr
(bad)
fsub
mov
inc
mov
inc
cdq
(bad)
outs
xchg
jnp
jnp
inc
pop
fsub
retf
jbe
cmp
xlat
xor
push
aas
outs
ds
cmc
jmp
and
sub
dec
mov
inc
pushf
stos
mov
push
xor
ror
mov
dec
test
xchg
jne
rcl
(bad)
ins
push
mov
repnz
sub
lds
ins
and
or
aam
and
lods
stc
les
and
aad
inc
pop
mov
icebp
(bad)
(bad)
mov
ins
rcr
jb
popf
mov
mov
in
mov
dec
dec
clc
dec
inc
daa
inc
jl
mov
sar
mov
xchg
test
push
fs
sbb
int3
xchg
mov
out
enter
xor
jmp
dec
dec
out
iret
mov
inc
adc
pop
push
adc
mov
xchg
rcl
sbb
jns
add
clc
movs
and
outs
dec
dec
popa
ret
ret
cmp
out
mov
xchg
add
lea
sub
mov
in
pop
iret
push
sbb
jno
xor
and
jle
push
test
rcr
loope
loope
pop
shr
mov
pop
icebp
cmp
imul
movs
int3
mov
pop
fldcw
mov
les
in
xchg
(bad)
mov
adc
test
jb
cmps
push
sbb
pop
dec
dec
jno
rcr
xchg
sbb
mov
dec
out
sub
rcl
fwait
popa
mov
sub
inc
int3
inc
fwait
and
jne
adc
je
loopne
idiv
and
sahf
cmp
pop
ins
lock
pushf
inc
add
dec
dec
jne
test
dec
mov
call
ret
hlt
mov
xchg
lods
mov
je
fdivrp
lock
jle
jne
mov
aas
sub
(bad)
cmp
lea
arpl
out
mov
gs
lock
push
inc
movs
push
ja
hlt
jo
push
(bad)
adc
add
pop
jbe
xchg
div
inc
dec
push
sahf
jb
jle
pop
repnz
jb
inc
and
icebp
sbb
in
push
shl
ins
push
adc
fs
jbe
mov
popf
jb
idiv
loop
clc
add
push
in
daa
mov
mov
inc
lods
loop
icebp
std
and
aas
sbb
or
dec
xlat
pusha
(bad)
iret
(bad)
mov
mov
add
cmp
test
mov
loope
mov
mov
dec
clc
je
cwde
popa
js
jmp
neg
test
(bad)
lahf
jg
cmp
lods
aad
sbb
mov
pop
ret
call
inc
push
adc
push
inc
(bad)
jmp
inc
jbe
jg
std
mov
cmp
(bad)
xchg
daa
mov
sahf
cmp
xor
jmp
and
adc
je
or
mov
xchg
out
out
cwde
push
push
loope
scas
pop
aad
or
cmp
imul
jo
sub
sar
leave
aas
xor
sub
call
add
adc
pusha
jb
push
push
push
inc
adc
push
frndint
sbb
sahf
icebp
outs
mov
outs
aas
cs
adc
mov
add
les
inc
pop
test
mov
ficom
push
imul
inc
in
pop
add
adc
scas
ficomp
in
add
pop
and
fistp
cmps
adc
mov
js
sub
and
je
jle
in
mov
pop
push
iret
aad
mov
gs
xchg
or
pop
adc
cmp
adc
test
ficomp
push
ficom
loope
sahf
mov
and
jo
pusha
ds
and
dec
hlt
out
hlt
aas
std
test
fild
mov
inc
cmp
mov
sti
sar
pop
push
inc
outs
(bad)
std
(bad)
pop
cli
aas
or
mov
test
in
mov
(bad)
fimul
push
xchg
movs
mov
pop
out
mov
inc
aas
mov
push
xor
and
js
sub
or
sub
es
repnz
jns
and
enter
lds
or
inc
or
adc
or
mov
jo
std
or
push
xchg
mov
or
(bad)
jae
xchg
out
push
(bad)
xchg
push
jp
mov
pop
adc
cwde
push
test
std
xchg
cs
adc
test
add
jo
adc
jae
dec
fbld
call
inc
add
fwait
and
xchg
cld
cmp
fs
sbb
pop
dec
inc
cmp
sub
rcr
int
(bad)
xchg
je
daa
mov
add
mov
dec
pop
loopne
cld
jle
mov
xor
cmp
(bad)
(bad)
mov
mov
xchg
jmp
xor
cmp
xor
aas
cmp
retf
iret
adc
cs
ds
ret
ror
or
inc
cmc
ror
nop
jbe
pop
inc
jl
dec
das
fstp
fild
cdq
pop
or
out
or
ds
ds
sbb
push
or
xchg
pusha
mov
ret
xchg
test
call
adc
sbb
test
inc
in
mov
mov
lock
add
inc
xor
mov
lea
addr16
jle
in
jo
mov
ffreep
cmc
push
mov
and
pop
push
in
(bad)
clc
mov
jns
lahf
loopne
(bad)
sub
inc
sbb
cmp
jb
and
xchg
jno
test
dec
sbb
in
and
dec
call
out
add
das
pop
inc
dec
dec
std
(bad)
aam
rep
sti
call
cmc
jb
nop
(bad)
sti
enter
out
xchg
mov
fild
mov
add
jmp
stos
push
jb
cmp
cmp
ins
push
in
jnp
cwde
pop
pop
lock
stos
test
retf
inc
and
rcl
loopne
push
ja
mov
lods
add
ret
jmp
aam
leave
pushf
add
jne
call
xor
pop
loop
add
rol
pop
fcom
(bad)
add
gs
fst
setl
add
mov
mov
mov
das
in
fdivr
sbb
sub
inc
xchg
pop
jle
in
adc
repz
gs
sti
add
test
xor
pop
mov
mov
inc
jnp
dec
adc
ret
bound
cmps
ret
adc
push
push
cmc
xor
mov
sub
jg
inc
add
fdivrp
adc
xchg
pop
dec
cmc
cmps
jnp
sub
add
pop
adc
adc
jnp
dec
xchg
pop
add
push
mov
retf
ret
cmp
mov
pushf
cmp
sahf
mov
sub
shl
mov
pop
minps
sti
in
pop
jecxz
adc
ja
pop
into
xchg
mov
imul
(bad)
cdq
fistp
test
bound
and
pop
movs
repz
pop
xor
inc
push
mov
push
add
xor
cwde
sbb
ja
out
cli
pop
js
inc
inc
mov
cmp
js
pop
mov
shl
movs
cmp
lea
test
mov
and
div
ja
mov
pusha
shl
add
fcomp
movs
sub
xchg
clc
sbb
bound
jae
into
popa
push
movs
fcom
clc
std
mov
and
dec
jnp
sub
hlt
pop
xchg
std
fist
retf
sub
pushf
pop
cmc
cli
rcl
sbb
pop
cmp
sbb
inc
(bad)
iret
loope
or
nop
jbe
je
call
fistp
icebp
xchg
dec
outs
mov
(bad)
(bad)
retf
popa
test
xlat
xor
mov
mov
