push
mov
sub
push
push
push
mov
add
xor
push
push
mov
mov
call
mov
mov
cmp
jbe
mov
mov
mov
push
push
mov
call
inc
pop
pop
cmp
jb
lea
push
push
lea
push
mov
push
push
mov
push
push
call
push
push
call
pop
pop
pop
leave
ret
push
mov
mov
mov
mov
mov
mov
sub
test
jne
inc
jmp
and
push
push
lea
lea
cmp
mov
je
mov
mov
add
push
mov
call
mov
test
je
mov
and
add
cmp
je
mov
mov
lea
push
push
push
call
test
je
inc
mov
mov
lea
cmp
jne
mov
inc
mov
imul
add
lea
cmp
jne
xor
inc
pop
pop
leave
ret
xor
jmp
push
mov
push
push
mov
push
mov
mov
cmp
je
push
cmp
mov
je
push
lea
call
test
jne
xor
mov
cmp
jne
pop
test
je
mov
jmp
xor
pop
pop
leave
ret
push
mov
push
push
push
push
call
pop
ret
push
mov
push
call
test
jne
pop
ret
mov
add
mov
call
xor
inc
pop
ret
push
mov
sub
mov
push
push
xor
push
mov
mov
mov
call
push
call
push
push
pop
push
push
call
push
call
push
call
push
push
push
call
push
call
push
call
push
push
push
call
push
call
add
push
call
push
push
push
call
push
call
push
call
push
push
push
call
mov
add
lea
push
push
lea
push
push
mov
mov
push
call
mov
mov
push
push
call
pop
pop
test
je
push
push
call
mov
mov
and
push
push
mov
mov
push
call
add
test
je
mov
inc
cmp
jb
mov
push
add
push
push
call
mov
lea
add
lea
add
mov
mov
lea
mov
mov
mov
and
call
mov
mov
mov
mov
call
push
mov
push
push
push
call
push
call
mov
call
test
je
push
call
push
mov
mov
mov
mov
push
call
mov
test
jns
push
push
call
mov
mov
mov
mov
pop
mov
pop
leave
ret
push
mov
sub
push
xor
inc
push
push
call
push
call
mov
sub
mov
jne
mov
jmp
mov
test
je
mov
add
test
je
push
mov
mov
sub
sub
lea
mov
je
dec
shr
inc
mov
mov
movzx
mov
and
mov
cmp
jne
mov
and
add
add
add
dec
jne
mov
test
jne
pop
xor
inc
pop
leave
ret
push
push
mov
mov
mov
mov
mov
mov
mov
cmp
jb
push
mov
mov
mov
mov
mov
lea
xor
test
je
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
dec
imul
mov
mov
mov
lea
ror
lea
not
imul
add
xor
mov
mov
mov
mov
mov
mov
mov
mov
mov
inc
mov
inc
cmp
jb
pop
pop
pop
ret
push
mov
mov
movzx
test
jne
xor
jmp
push
push
shr
xor
dec
je
mov
mov
cmp
je
mov
movsx
mov
movzx
push
call
mov
mov
mov
movzx
push
call
pop
pop
cmp
jne
movzx
shr
inc
dec
cmp
jb
xor
inc
pop
pop
pop
ret
xor
jmp
push
mov
mov
mov
sub
push
mov
test
jne
xor
jmp
mov
push
add
mov
push
mov
mov
mov
xor
add
add
add
mov
mov
cmp
jae
jmp
mov
mov
mov
mov
add
push
push
call
pop
pop
test
je
inc
mov
cmp
jb
mov
mov
mov
cmp
jne
xor
jmp
movzx
mov
add
je
mov
add
cmp
jae
cmp
jb
xor
cmp
je
inc
cmp
jne
push
lea
push
push
call
add
lea
push
mov
mov
call
test
je
lea
push
push
push
call
mov
jmp
xor
mov
pop
pop
pop
leave
ret
mov
mov
mov
mov
rol
imul
add
mov
mov
mov
ret
push
mov
push
push
mov
imul
push
mov
cmp
jb
mov
push
call
mov
add
imul
push
xor
pop
div
mov
mov
mov
mov
sub
mov
test
je
mov
sub
push
mov
call
xor
div
mov
add
cmp
jae
mov
mov
imul
xor
div
xor
mov
sub
imul
div
mov
cmp
jae
mov
sub
push
push
push
call
add
add
add
add
cmp
jne
pop
pop
pop
leave
ret
push
mov
sub
push
mov
test
je
mov
test
je
cmp
je
add
push
push
mov
lea
xor
sub
nop
lea
mov
inc
mov
cmp
jb
mov
push
pop
lea
add
call
mov
mov
test
je
mov
sub
nop
mov
mov
mov
inc
dec
jne
push
mov
push
mov
push
push
push
call
mov
mov
mov
call
lea
push
push
push
push
call
pop
add
pop
jmp
xor
pop
leave
ret
mov
mov
ret
push
mov
push
push
call
mov
pop
push
call
mov
pop
pop
ret
add
mov
rep
xchg
bound
jecxz
cld
js
(bad)
jg
scas
cmp
push
ror
aam
inc
jns
mov
leave
sub
shr
out
pop
and
sbb
pop
and
sub
and
or
ret
sbb
sub
xor
inc
stos
(bad)
push
rep
xchg
bound
jecxz
fstp
pop
push
and
push
push
push
ror
aam
inc
jns
cmp
jbe
push
mov
shl
pop
ins
sub
pop
jecxz
xor
loope
ror
je
adc
call
lock
dec
dec
mov
lock
push
cmp
bndstx
mov
push
call
jle
cld
cmps
jle
call
(bad)
fiadd
icebp
xor
int3
mov
hlt
das
and
add
add
add
add
mov
pop
(bad)
mov
push
xchg
or
aad
pop
arpl
fdivr
dec
retf
movs
dec
xchg
jne
repz
pop
cmp
mov
xchg
nop
dec
les
jo
shl
xchg
loopne
mov
call
fimul
cmp
pop
inc
jo
scas
das
call
add
add
add
fs
jae
in
inc
pop
push
stc
cmp
mov
jg
and
push
test
sar
shr
jne
int3
jecxz
ins
mov
pop
mov
das
ins
jae
cmp
js
imul
sbb
pushw
add
and
jl
and
cld
pop
lods
sbb
add
lock
je
fs
jmp
loopne
and
add
add
add
add
add
test
scas
sub
loopne
dec
push
push
push
cld
xchg
add
or
pop
dec
adc
mov
in
sbb
jecxz
retf
scas
fwait
retf
adc
stc
jge
pop
icebp
nop
inc
stos
dec
arpl
or
pop
and
mov
frstor
cmp
in
ins
cmp
jmp
outs
jb
jl
add
leave
inc
inc
pop
adc
cmp
push
or
icebp
add
mov
inc
retf
fwait
add
jo
and
ins
retf
jne
or
or
mov
stos
jmp
or
push
push
int
data16
not
mov
(bad)
test
jl
ins
mov
movs
jne
xor
lock
inc
pop
lock
mov
ret
xchg
out
imul
das
sbb
adc
ret
push
adc
cdq
loope
xor
push
lahf
push
mov
fsub
or
dec
std
div
dec
adc
arpl
icebp
and
stc
push
aaa
out
test
inc
(bad)
cwde
push
fs
jnp
xchg
add
xor
ds
shr
and
xchg
in
dec
push
jb
mov
xchg
scas
mov
in
mov
fwait
in
or
cmps
rol
adc
pop
outs
mov
cmp
cmp
push
(bad)
push
into
js
cli
das
adc
xor
mov
ss
and
pop
icebp
cmp
clc
(bad)
and
ret
cdq
or
inc
out
jle
xchg
bound
sbb
cmp
das
lods
mov
aad
stos
fcomp
adc
adc
dec
fs
and
xchg
push
repz
daa
call
add
lock
adc
imul
and
ds
sbb
ret
retf
jmp
lods
sub
jns
sar
jns
jp
or
adc
leave
cmp
test
xor
inc
fimul
mov
sbb
inc
rol
retf
pop
in
jmp
xchg
in
jle
dec
inc
in
(bad)
mov
cli
push
pop
retf
repnz
mov
ins
shr
into
mov
les
add
add
add
addr16
inc
stos
push
or
mov
push
cmc
imul
imul
in
ret
lock
arpl
xor
icebp
aad
fidivr
loope
push
lds
jns
pop
loopne
xlat
sub
jnp
leave
fidivr
mov
sub
xchg
lods
mov
das
cmps
jmp
pop
xchg
xchg
je
push
rcl
cmp
shl
inc
ja
inc
stos
sbb
repz
mov
cdq
test
fisubr
fld
addr16
icebp
jns
cmc
cmp
aam
outs
mov
add
movs
outs
jmp
lods
sbb
sbb
pop
xchg
sub
loope
fdivr
jae
movs
ja
sub
push
scas
adc
cmp
sahf
rcr
es
leave
push
aaa
xchg
push
mov
test
add
add
jbe
(bad)
fwait
xor
data16
mov
fld1
adc
daa
adc
sar
loop
test
loop
fcmovbe
adc
mov
inc
sub
movs
xor
in
stc
mov
dec
and
push
add
add
cmp
pop
test
push
pop
mov
dec
call
es
push
xor
dec
xor
cwde
xor
inc
mov
shl
mov
sahf
retf
cs
pop
sbb
or
cmp
dec
add
adc
add
push
mov
sbb
xchg
inc
cmc
cmp
aam
fdiv
addr16
sub
movs
pop
xchg
xchg
push
test
xor
mov
cdq
(bad)
arpl
into
repnz
jmp
add
add
add
add
aad
or
or
ja
out
or
jl
ins
sub
mov
jae
dec
inc
std
mov
sub
dec
pop
test
out
lds
inc
adc
setle
and
jmp
inc
push
cmp
pop
mov
shl
movs
mov
mov
aaa
aam
jmp
fucomp
loope
mov
add
mov
or
pushf
sbb
cs
leave
imul
sub
in
fcomp
ret
sahf
rcr
jo
xchg
jl
cmc
(bad)
dec
mov
call
push
xchg
pop
iret
movs
push
xchg
je
scas
scas
jp
inc
call
in
push
cmp
xor
jb
pop
mov
ins
not
cmp
ret
je
cli
icebp
dec
pop
inc
adc
push
add
xchg
pop
dec
pop
aaa
and
mov
cmp
sbb
test
add
add
push
jns
mov
cmps
in
lock
je
xor
push
jmp
or
and
int
adc
jae
iret
ret
xor
inc
xchg
mov
imul
push
not
and
ror
mov
sub
cmp
loop
movs
pop
loop
popf
dec
(bad)
push
jmp
mov
jno
mov
pop
call
int3
push
popf
outs
test
aam
div
inc
jg
add
add
add
add
(bad)
test
xor
lea
adc
fisttp
in
jnp
in
lods
adc
cmp
cs
pop
leave
jb
pop
inc
jg
cmps
mov
lods
add
push
or
stos
retf
jns
jg
dec
aam
inc
add
adc
lds
in
jbe
sub
repz
out
loope
push
icebp
add
out
nop
push
xchg
jp
mov
add
add
add
mov
add
fsub
test
dec
xor
mov
ret
enter
or
mov
mov
sbb
adc
add
pop
call
sbb
pop
jno
jge
cwde
xor
inc
push
mov
movs
iret
pop
imul
jb
icebp
pop
call
xlat
cmps
pop
jae
bound
xlat
retf
mov
in
fsubr
sti
adc
mov
enter
push
retf
jae
loop
das
addr16
jmp
sbb
rcr
mov
mov
push
mov
movs
push
sbb
retf
xchg
and
popf
push
dec
das
fnstenv
mov
sbb
xchg
or
jg
pop
push
jmp
mov
xchg
arpl
add
add
add
mov
jnp
sahf
mov
push
push
aad
shr
sub
and
int
das
lock
test
pop
fisubr
push
pop
and
aad
push
test
mov
popf
jnp
inc
dec
xchg
cld
(bad)
js
outs
fisubr
mov
mov
aam
add
sub
inc
sbb
sbb
retf
sahf
aas
xchg
fistp
mov
scas
lea
add
add
add
add
(bad)
mov
push
xor
cmp
pop
jmp
lea
pinsrw
dec
push
out
mov
jmp
xchg
ds
pop
push
fild
nop
(bad)
je
mov
jbe
sub
push
cli
ins
sub
push
leave
push
(bad)
test
outs
stc
inc
mov
out
je
(bad)
cmp
push
dec
retf
jb
rol
rcr
fidivr
in
add
add
add
or
lods
jecxz
movs
sub
xchg
push
fidiv
push
mov
mov
out
adc
pop
xor
or
jle
aaa
ins
and
adc
jle
test
fist
pushf
pop
mov
push
cmp
cli
sbb
outs
pop
jle
add
sbb
add
add
add
cmp
xor
push
mov
stc
mov
retf
mov
xchg
adc
push
jo
mov
js
aad
ins
cli
(bad)
scas
int
mov
pop
test
fidiv
nop
(bad)
fmul
ss
retf
mov
jmp
ja
rol
jecxz
xchg
mov
inc
inc
xor
loop
dec
stc
pop
test
add
add
add
add
hlt
xchg
outs
add
sbb
and
icebp
xor
inc
push
and
xchg
call
dec
jns
call
call
out
ins
sub
dec
inc
push
lea
lods
mov
inc
sbb
xchg
mov
mov
jns
mov
push
pop
cmc
pusha
sar
rcr
fld
push
hlt
mov
push
jmp
push
dec
push
pop
les
push
fst
xor
icebp
xchg
sti
pop
push
mov
add
add
add
add
pop
inc
dec
adc
jb
movs
mov
add
stc
dec
push
xor
inc
adc
xor
fisttp
jmp
mov
cmp
gs
sub
js
push
dec
push
push
repnz
das
or
mov
lahf
add
mov
in
mov
adc
mov
adc
sar
jp
sub
mov
stos
xor
push
aas
xor
pop
adc
mov
add
cmp
xchg
(bad)
int3
fisubr
std
adc
xor
int3
jg
mov
mov
add
mov
shr
pop
cmp
das
jg
xor
and
dec
xchg
jmp
xchg
inc
(bad)
jl
pop
xchg
adc
cmps
int
add
xchg
add
gs
xchg
pop
inc
adc
push
cmp
jmp
add
add
add
add
fcom
cli
scas
adc
mov
stc
mov
repnz
sub
jnp
out
xor
shl
fbstp
lea
pop
pop
imul
(bad)
sahf
inc
push
xchg
out
and
ins
(bad)
(bad)
ret
sahf
sub
pop
mov
cmp
mov
mov
xor
cld
push
out
add
add
add
add
mov
ins
adc
imul
outs
lds
cs
push
cmp
sbb
fidivr
pop
or
xor
sub
mov
push
aas
mov
mov
push
cdq
pop
test
pop
jne
mov
int
imul
adc
jo
mov
cmp
cmp
mov
xchg
inc
leave
xchg
xor
xchg
repnz
or
add
add
add
aam
and
std
imul
mov
add
mov
cmp
and
jne
rcr
enter
sar
bound
mov
xor
push
xor
add
fcmovnb
cld
push
loopne
mov
sub
adc
push
xor
lds
js
(bad)
cmp
loopne
cmps
retf
mov
inc
fcmove
push
mov
jmp
addr16
add
add
add
add
arpl
imul
sti
retf
and
mov
jns
pop
test
mov
sub
loopne
adc
enter
fistp
mov
mov
mov
jle
ins
sar
outs
lods
add
popa
pop
ror
inc
lds
fldcw
and
push
pop
outs
fdivp
repnz
in
sbb
or
push
aam
mov
add
add
add
add
popf
pusha
sbb
js
(bad)
mov
jae
int
fsubr
mov
push
push
iret
loop
loopne
jne
or
sbb
fadd
repnz
bound
cmp
ror
and
sub
sub
icebp
sbb
mov
(bad)
mov
mov
mov
cmp
jne
imul
mov
ret
add
add
jnp
into
ja
fdivr
inc
dec
cmp
push
xor
aad
xchg
nop
out
jne
mov
dec
and
mov
sub
outs
loopne
jo
mov
push
lods
movs
inc
adc
sbb
pop
sbb
sbb
xchg
sbb
sar
int3
xchg
call
and
mov
pop
mov
div
mov
sub
add
add
add
fcmovb
cmp
cmp
aaa
jno
out
bound
mov
(bad)
(bad)
into
cld
and
mov
jb
xchg
cwde
out
mov
test
icebp
lock
mov
scas
cmp
pusha
mov
lock
cld
test
cmps
in
stos
loop
gs
pop
inc
hlt
bound
ds
cli
fdiv
xchg
movs
xchg
add
add
add
in
cwde
xchg
pop
dec
inc
pop
dec
nop
retf
add
fild
push
retf
xchg
push
push
clc
shr
lea
mov
gs
sub
xchg
cmp
call
sti
sti
xor
xor
js
mov
mov
and
in
test
fs
loope
push
or
fdivr
cdq
lahf
jmp
add
mov
xor
push
push
dec
outs
and
jle
jbe
lahf
sub
sbb
pop
jbe
pop
cld
int
js
adc
neg
jo
jb
les
jp
repz
jns
jmp
iret
jo
fwait
retf
cwde
mov
sahf
mov
data16
jmp
xchg
mov
cmp
retf
push
adc
jne
push
sbb
(bad)
push
in
rcr
add
add
add
add
adc
out
fs
mov
mov
cmp
pop
add
ficom
inc
jmp
mov
jo
sbb
push
dec
mov
and
int
lods
mov
bswap
and
jne
add
and
xchg
sub
test
mov
or
(bad)
xlat
(bad)
cmp
loope
sar
and
add
add
and
xchg
aas
push
cmp
fisttp
and
out
add
xlat
push
sub
jo
mov
inc
sbb
dec
push
xchg
pop
or
push
cwde
(bad)
jecxz
mov
jns
lods
and
sub
call
pop
outs
mov
in
xor
add
cld
mov
sahf
jae
add
push
sub
xchg
cmc
test
add
add
add
adc
cld
adc
outs
add
lods
sub
adc
repnz
jbe
aam
dec
mov
repz
inc
pusha
pushf
out
push
fwait
xchg
push
movs
std
ja
imul
sbb
fwait
shr
jae
repnz
cmps
mov
lock
mov
cmp
xchg
sub
adc
fild
mov
hlt
mov
cmc
fwait
hlt
inc
test
add
xor
jae
dec
add
es
jnp
xchg
xchg
sub
xlat
rcr
mov
sbb
aad
jbe
mov
popf
and
(bad)
aam
int
mov
or
and
push
inc
ficom
xchg
xor
rol
gs
test
and
nop
mov
nop
repz
fisub
and
xchg
fld1
in
mov
mov
xchg
outs
mov
hlt
mov
jbe
je
popa
inc
lea
and
add
add
add
add
lds
xchg
ret
or
mov
sbb
push
mov
into
loopne
in
jo
int3
das
out
cmp
aaa
and
pop
es
push
sub
push
test
dec
mov
test
dec
loop
inc
clc
xor
addr16
hlt
repnz
icebp
aad
xchg
adc
pop
xor
(bad)
in
mov
add
jmp
dec
push
sub
pusha
push
cdq
pop
and
add
add
add
add
and
js
test
fsubr
pusha
add
and
add
arpl
(bad)
cmp
pop
mov
test
ins
or
sbb
lds
movs
iret
inc
sar
xor
cmp
mov
test
mov
jmp
mov
fcomi
or
js
je
call
jns
mov
jl
or
add
rcl
and
or
adc
sti
push
cmps
rcl
shl
xor
xchg
mov
sbb
dec
mov
stos
pop
loope
sub
aad
xchg
pop
mov
into
cmp
ja
out
mov
adc
sub
jecxz
outs
scas
dec
ret
xchg
and
adc
test
outs
imul
add
add
add
add
adc
test
(bad)
nop
dec
inc
mov
mov
fucom
or
mov
stos
push
xchg
push
mov
sbb
les
mov
and
les
lds
pop
push
fbstp
adc
fs
lock
or
outs
or
mov
movs
scas
mov
mov
jmp
mov
add
add
add
ficom
pushf
pop
call
jg
pop
pop
test
out
cmp
add
xchg
lds
push
and
out
dec
cmps
adc
aaa
xor
or
les
xor
pop
ins
movs
nop
stc
mov
ja
pop
loop
pusha
in
in
sahf
rol
adc
adc
jno
in
aad
pusha
test
pop
mov
xor
(bad)
adc
add
add
add
mov
dec
mov
ret
pop
ss
div
(bad)
add
xchg
jmp
mov
fdivr
mov
(bad)
pop
icebp
mov
fadd
ss
pushf
adc
xchg
sti
fimul
js
repnz
jecxz
mov
inc
or
cli
pop
stos
in
test
xchg
xchg
out
adc
cli
rcr
cmc
or
out
push
mov
fcmovbe
jae
mov
aad
cmp
push
jbe
int3
in
cwde
fwait
pop
sbb
pusha
popf
inc
out
pop
mov
mov
fsubr
pop
popa
inc
dec
sar
sbb
ins
dec
clc
das
push
jae
push
call
mov
nop
call
loopne
fmul
cmp
push
retf
add
add
add
add
sbb
fcom
xor
out
push
mov
not
jnp
or
in
arpl
sub
(bad)
icebp
xchg
(bad)
cld
sub
fcomp
and
shl
inc
aad
lahf
adc
in
mov
shl
(bad)
jg
enter
call
pop
imul
xor
in
je
out
loopne
sbb
mov
adc
mov
xor
pusha
cld
pop
jmp
test
pop
mov
sub
dec
cmp
and
les
jne
icebp
xor
sbb
add
repz
adc
mov
add
movs
pop
test
inc
add
inc
or
dec
sbb
mov
or
pop
cmp
mov
pop
aam
scas
inc
pop
sbb
xor
adc
xor
push
jmp
in
xchg
fild
pop
test
sub
pop
fwait
push
sub
(bad)
jp
in
test
pop
and
pop
mov
out
mov
in
sub
(bad)
mov
rcr
push
xchg
aad
add
pop
dec
jl
adc
jmp
pop
daa
cmp
(bad)
stos
pop
stos
(bad)
mov
lods
call
std
mov
sbb
add
add
add
dec
scas
scas
xchg
jno
mov
add
(bad)
nop
repnz
stos
dec
cli
or
neg
ins
(bad)
shl
retf
dec
jbe
xor
pop
cmps
or
mov
js
and
mov
lods
shl
popa
outs
cs
xor
push
in
push
sahf
xor
xor
stos
adc
dec
in
cdq
mov
outs
lahf
loopne
push
arpl
cmps
sbb
test
es
and
in
dec
jno
jle
mov
add
add
add
add
in
xchg
jle
sub
ins
sub
pop
xchg
add
(bad)
cld
jle
dec
fucomp
out
mov
nop
out
call
cmp
push
rol
into
icebp
or
pop
sahf
adc
aas
hlt
loopne
xor
xchg
ret
push
std
out
les
cmp
and
sub
or
test
mov
imul
adc
hlt
xchg
fld
mov
inc
nop
inc
fld
out
aam
mov
aaa
imul
mov
enter
and
loope
not
outs
ret
sub
mov
call
dec
fs
xor
mov
mov
out
mov
icebp
loop
popf
in
ret
dec
sbb
push
pop
mov
xchg
inc
xor
cdq
lods
jl
jmp
not
dec
in
daa
xor
push
dec
mov
add
add
mov
mov
mov
cmp
or
push
add
push
aam
jo
jmp
jnp
sub
pop
push
test
or
inc
call
movs
push
sahf
lds
mov
pusha
movs
sub
mov
loop
aas
fcom
dec
(bad)
in
push
pop
add
add
add
int
xchg
xor
test
cmps
sbb
dec
aas
xor
stos
enter
add
scas
nop
out
jnp
pop
test
pop
nop
add
pop
and
cmp
popf
inc
fild
inc
das
rcr
(bad)
inc
xor
pop
sub
add
mov
jmp
mov
adc
je
int
push
repnz
dec
lds
add
add
loope
stos
xor
fldenv
into
sub
inc
int3
test
push
mov
push
push
pop
in
ftst
arpl
mov
xor
ins
into
push
(bad)
jmp
(bad)
sar
es
and
inc
jne
push
nop
out
je
add
aam
push
in
mov
aas
push
jbe
lods
cmp
or
or
xor
cmc
rcr
lahf
push
hlt
leave
cmp
add
sbb
mov
sbb
(bad)
mov
lods
jo
push
xor
out
jmp
sahf
aas
jecxz
gs
in
inc
in
lea
lods
mov
jg
and
add
mul
mov
iret
int
inc
fs
pop
or
adc
sbb
sub
retf
add
test
in
jne
stos
jp
add
add
add
xchg
imul
cli
imul
ret
stos
imul
lods
es
je
fbld
push
mov
sbb
mov
inc
in
retf
aaa
fisub
popf
clc
xchg
adc
push
cmc
jecxz
mov
push
add
(bad)
lods
rol
xchg
imul
loop
icebp
out
out
(bad)
(bad)
add
inc
popf
lea
inc
jae
(bad)
test
lock
add
add
add
add
or
arpl
xchg
fbstp
sti
inc
or
push
fs
or
xlat
inc
cmps
pop
dec
adc
add
test
jecxz
xor
add
sbb
mov
jp
pop
js
push
loop
dec
pop
sub
pop
cmp
outs
retf
cmps
out
addr16
out
data16
sahf
mov
cmp
fbstp
int3
add
add
add
add
add
hlt
std
les
pushf
scas
cmp
loop
jb
dec
push
jne
mov
out
mov
in
in
cmp
dec
dec
xor
jo
popa
sbb
sub
dec
(bad)
pusha
pop
fld
cmp
icebp
or
dec
in
mov
aas
inc
dec
xchg
mov
in
sbb
dec
ja
pushf
mov
mov
inc
or
dec
add
add
add
add
mov
ficomp
xchg
cmc
inc
pop
dec
dec
lods
cmp
push
jle
push
call
pop
int3
cmc
(bad)
fwait
bound
pop
adc
xchg
cli
xchg
int3
sbb
pop
push
jmp
xchg
cmp
aam
add
dec
and
dec
(bad)
pop
mov
xor
push
das
es
pop
cmps
jno
fldenv
mov
(bad)
inc
dec
add
add
add
add
xor
or
xchg
and
inc
push
std
rcr
fcom
mov
aas
or
aad
mov
popa
sbb
loope
push
into
sti
cmp
rep
cmp
ins
inc
into
pop
div
cs
adc
enter
add
and
and
loope
pop
mov
cmp
sub
jae
bnd
cmps
xchg
mov
or
add
add
add
add
sbb
mov
mov
fisttp
mov
faddp
repz
dec
push
mov
(bad)
sub
fild
jb
dec
iret
(bad)
shl
cmp
xchg
imul
mov
inc
call
or
pop
rcl
rdmsr
bound
add
dec
jne
or
jbe
adc
scas
loopne
and
push
ret
aas
sub
add
add
add
add
add
(bad)
out
cwde
mov
(bad)
aas
popf
mov
hlt
jge
jg
or
popw
dec
mov
sub
js
aad
(bad)
xchg
movs
gs
or
mov
mov
cmp
add
inc
dec
mov
mov
inc
ror
repnz
add
call
xchg
xchg
lea
movs
push
pop
add
add
add
add
lock
mov
add
jns
stos
ror
into
shl
inc
add
add
cmp
or
xor
je
pop
int
adc
shl
pop
sub
inc
cmp
dec
out
shl
push
rcl
jmp
fdivr
xchg
mov
sbb
mov
jnp
int3
pop
add
cmps
pop
dec
call
cmp
dec
sbb
and
add
add
add
imul
and
popf
inc
out
mov
int3
inc
jl
xchg
mov
xor
ss
dec
sbb
fucomp
(bad)
or
xor
(bad)
lahf
jl
push
push
imul
jne
popa
pop
and
cmps
mov
ins
mov
lds
retf
or
test
sub
shl
and
ds
cmp
mov
pop
clc
cmp
cld
or
add
add
add
add
inc
stos
add
fcomp
jns
jle
and
bound
push
fdivr
sub
(bad)
sbb
test
fld
push
or
test
adc
sbb
adc
dec
(bad)
pop
or
pop
jo
lods
out
xor
sbb
pusha
xchg
out
ja
pop
or
fnstcw
pop
sbb
jb
out
(bad)
xchg
call
out
fwait
sbb
fimul
mov
sub
xor
add
add
add
add
inc
push
or
mov
aaa
lds
fs
push
rol
mov
sub
jb
or
cmp
sbb
arpl
push
rcr
sti
out
inc
mov
cmp
xor
adc
je
les
(bad)
push
leave
xor
sti
lock
(bad)
or
stos
sahf
call
cmps
ds
fwait
push
add
jne
push
jg
fsub
jne
adc
inc
ins
ss
cli
scas
outs
xchg
test
(bad)
hlt
and
addr16
mov
pop
jl
(bad)
cli
push
repnz
in
repz
out
call
out
or
fbstp
jns
addr16
mov
lods
jecxz
ret
lods
inc
fldcw
jge
aaa
jo
or
sub
jp
mov
mov
ret
ins
addr16
dec
push
stos
xor
push
inc
lods
adc
add
add
add
and
push
xchg
pop
add
(bad)
sbb
fistp
mov
fucomi
ja
mov
cmps
adc
jne
push
test
mov
fmul
pop
xor
mov
mov
repnz
outs
dec
mov
mov
mov
hlt
mov
jle
outs
push
hlt
pusha
std
out
das
inc
adc
xchg
mov
add
movs
and
jae
mov
mov
lds
dec
pop
mov
mov
fiadd
cmc
ficomp
add
iret
add
cmp
inc
int3
rol
and
push
inc
pop
cdq
(bad)
sbb
hlt
push
fsubr
xchg
jmp
das
shr
fldcw
cmp
loope
jno
add
ret
sbb
fst
add
add
jg
mov
mov
jo
push
xchg
pop
inc
shr
jb
fwait
nop
add
repnz
sub
fwait
push
sbb
xor
repz
in
fwait
dec
xchg
mov
xor
xchg
icebp
ja
xor
sbb
or
dec
call
in
test
cmp
repnz
loope
and
into
or
(bad)
mov
int3
sub
cmp
leave
pop
sub
cmp
les
stos
(bad)
retf
adc
cmp
and
push
loopne
iret
and
cli
sar
jecxz
rcl
mov
sub
jo
mov
sbb
xchg
ss
sbb
fmul
lahf
es
repnz
mov
pusha
push
xchg
or
shl
cmp
push
mov
aad
xor
inc
data16
cmp
push
jne
or
add
add
add
jbe
xchg
mov
jmp
in
inc
xchg
push
ror
push
push
lock
dec
jl
inc
neg
jne
mov
inc
stos
adc
mov
jge
addr16
not
(bad)
jg
lock
dec
ins
inc
mov
jae
mov
iret
dec
sub
cmp
cmc
xchg
inc
add
pop
sahf
sbb
in
fnsave
hlt
mov
add
add
add
add
xchg
dec
fdivr
jmp
pop
and
pop
sub
add
bound
mov
mov
cs
fsubr
loopne
mov
out
dec
cmps
add
and
rcl
and
shl
add
and
mov
push
movs
rol
xlat
jns
test
loop
movs
sbb
loopne
into
and
sbb
push
cmc
enter
fcmovu
retf
aad
loope
xlat
adc
jmp
fnsave
push
sbb
jle
or
and
xchg
sub
fcmove
ins
and
mov
mov
mov
fstp
ror
cmp
rcl
xchg
scas
dec
mov
mov
je
sbb
lds
fild
retf
adc
loopne
cwde
(bad)
push
fs
std
cld
fcmovne
hlt
pop
sbb
cmps
das
mov
push
xor
mov
sub
mov
dec
ja
(bad)
jo
dec
sbb
pop
movs
scas
inc
cmp
sub
pop
mov
out
ins
adc
mov
sbb
leave
sti
xlat
and
xchg
mov
jge
dec
xchg
pop
pushf
rol
sahf
sbb
dec
cld
popf
sub
xchg
imul
add
add
add
das
push
xor
push
mov
add
loopne
mov
xchg
inc
mov
dec
jle
or
in
pop
mov
in
jle
add
push
dec
jae
and
lock
jno
cmp
icebp
lods
cwde
outs
jbe
and
repz
xchg
int
mov
pushf
(bad)
hlt
dec
or
mov
push
jo
adc
popf
pushf
jmp
loopne
out
add
(bad)
jns
out
jecxz
fistp
stc
shr
mov
jge
add
push
js
imul
clc
out
jl
nop
(bad)
loopne
push
pop
adc
movs
cwde
push
inc
(bad)
in
pop
enter
call
call
mul
sahf
inc
iret
stos
jne
in
mov
retf
sub
pop
test
lods
loop
pop
push
mov
(bad)
out
aas
sub
leave
push
clc
add
add
add
add
nop
inc
in
xor
mov
sti
and
adc
jmp
sub
mov
adc
loope
cmp
mov
inc
pop
or
push
ror
jbe
jb
jle
jmp
jmp
jle
mov
out
jb
in
repnz
push
aad
aas
aad
retf
rcl
sahf
mov
sbb
mov
addr16
push
push
int
or
sbb
sub
sub
das
mov
out
ss
mov
mov
cvtdq2ps
pop
std
out
mov
das
ds
scas
ror
retf
test
ds
and
scas
sub
repz
jb
(bad)
pushf
das
outs
xchg
movs
sub
(bad)
sbb
cmc
xchg
repnz
xchg
mov
pop
push
aad
push
aaa
add
dec
sbb
mov
lds
pushf
adc
sbb
inc
aam
ret
mov
retf
fmul
xor
and
dec
xor
shl
pop
jecxz
aad
add
ja
jp
xlat
inc
shl
or
and
or
and
in
test
sub
and
add
add
add
mov
dec
retf
ds
loop
sub
inc
mov
dec
mov
pop
into
adc
popa
push
pop
stos
xchg
add
xlat
hlt
mov
and
sub
cmp
and
cmps
and
push
xchg
ret
cs
push
xor
je
clc
jne
inc
pop
stc
mov
repnz
dec
popa
xchg
retf
sub
mov
xor
add
dec
fsubr
cld
pop
and
cwde
out
xor
(bad)
repnz
cmp
out
jne
add
add
add
add
inc
or
dec
or
int
cmp
test
or
retf
bound
shr
jmp
imul
mov
enter
js
add
jle
sub
xchg
pop
(bad)
cs
std
add
sahf
push
mov
cdq
int
mov
popf
ret
cmp
push
mov
xor
cli
mov
in
loop
enter
mov
adc
es
ja
xchg
mov
popf
int3
xor
mov
cmp
adc
lods
in
jp
arpl
mov
test
pushf
push
leave
repnz
xlat
mov
add
rcr
daa
scas
fdivr
cdq
add
(bad)
jp
retf
cli
leave
fisubr
mov
daa
or
inc
push
inc
pop
xchg
cmp
out
or
xchg
and
jno
mov
add
add
push
iret
cmp
les
fidiv
sbb
jns
push
stos
dec
xlat
ja
arpl
lahf
fbld
mov
xchg
dec
in
(bad)
out
fistp
cs
push
jmp
mov
es
scas
popf
push
retf
sub
aad
mov
gs
out
enter
inc
inc
sub
add
add
add
mov
mov
hlt
out
push
mov
xchg
ss
xchg
repnz
fisttp
push
mul
push
inc
cs
add
adc
adc
lahf
jae
imul
test
add
inc
sub
ins
fldlg2
fs
fcom
sbb
in
fnstenv
mov
fmul
pop
push
or
cmps
out
inc
mov
enter
jecxz
push
inc
xor
add
add
add
add
add
je
push
call
mov
cmp
add
retf
mov
clc
xchg
stc
cld
sahf
pop
sbb
jmp
push
sub
mov
sub
inc
into
xchg
ror
mov
int
xchg
mov
in
cli
or
push
sbb
sub
mov
into
stos
jle
imul
adc
loope
or
fs
ficomp
loope
mov
pusha
jmp
add
jbe
add
add
add
mov
retf
mov
cs
adc
mov
dec
mov
sahf
or
pop
out
fisttp
pop
push
jno
ins
stc
ds
inc
add
sub
add
adc
mov
xor
and
push
xchg
fisub
hlt
jecxz
adc
sbb
shl
mov
fscale
sbb
pop
push
vmovlps
add
push
xor
xor
cmc
jae
ins
xlat
in
dec
jle
sbb
bound
ja
jnp
into
jge
imul
dec
mov
adc
aad
sub
dec
mov
push
mov
sub
push
leave
(bad)
call
push
sub
int
js
jg
jno
inc
xor
rcr
out
test
inc
movs
push
and
xlat
data16
xor
ja
jl
sub
inc
inc
inc
enter
add
add
add
add
mov
mov
mul
xlat
