mov
mov
call
mov
ret
pop
or
repz
(bad)
xor
rol
mov
and
in
std
in
mov
push
call
mov
and
(bad)
pop
sbb
(bad)
pop
and
clc
add
ja
(bad)
mov
inc
cld
mov
movsx
cmp
jl
adc
or
(bad)
cmp
mov
imul
adc
(bad)
xchg
out
xor
int3
or
fld
fsubr
or
or
shl
pop
sti
xchg
dec
clc
jmp
dec
cmp
add
cmp
clc
jbe
xor
(bad)
fstp
cmp
je
and
adc
(bad)
ins
in
les
and
push
adc
lock
mov
add
or
ins
jne
fdivr
jmp
pop
call
(bad)
lock
lods
mov
je
repz
test
jg
in
mov
sbb
setnp
rcr
cld
pop
fcmovnb
jmp
adc
adc
adc
jl
das
jne
push
adc
jb
push
jnp
loope
outs
push
cs
mov
pop
ins
pop
lea
jo
fmul
adc
add
aam
neg
or
or
shl
fadd
pusha
push
frstor
ror
nop
dec
push
sbb
not
and
cli
cld
out
ja
arpl
in
arpl
adc
add
or
lock
test
clc
inc
je
jo
push
or
add
fisttp
jne
push
cld
mov
sub
mov
fs
cld
mov
lea
fcmovne
mov
sbb
std
hlt
std
mov
adc
push
push
cmp
ins
xchg
shl
mov
ds
xchg
sub
add
pop
push
sti
aas
(bad)
cmp
fdiv
push
push
mov
aam
adc
outs
add
xchg
adc
fdiv
fs
push
pop
add
sbb
mov
stc
popf
cmp
add
cmp
daa
adc
fst
in
cmp
mov
mov
idiv
lea
jae
mov
test
mov
test
add
es
data16
mov
pop
inc
jae
das
ror
xor
or
shl
test
jbe
loopne
cmp
loopne
dec
sahf
pushf
sbb
std
loopne
std
xor
outs
fldenv
mov
std
loopne
fsincos
push
xor
std
ret
push
(bad)
in
push
lea
push
mov
cld
push
cmp
push
(bad)
loopne
pop
test
cmp
mov
out
shl
fist
ja
push
das
cmp
push
leave
sbb
mov
mov
cmp
call
jl
addr16
jmp
jmp
push
push
ja
push
mov
and
cmp
dec
mov
gs
add
cmp
or
or
dec
outs
xchg
fisub
loopne
add
adc
ret
(bad)
lea
test
lods
dec
dec
dec
das
push
cs
aam
or
fsub
shr
(bad)
nop
(bad)
adc
or
mov
jno
fcom
repnz
mov
adc
fbstp
and
fsubr
ins
or
pop
sub
mov
mov
imul
mov
xchg
loopne
jnp
popa
adc
mov
icebp
mov
pop
imul
aam
sbb
add
dec
frstor
pop
mov
add
add
pop
pop
or
push
hlt
push
mov
mov
sbb
jne
add
pop
mov
or
aam
dec
mov
mov
push
add
int
sub
retf
mov
int
inc
add
cmp
cmp
jbe
retf
fs
or
inc
dec
stc
push
int3
into
clc
sub
dec
or
(bad)
jg
(bad)
cmp
fcmovbe
inc
leave
cld
mov
ret
mov
test
sbb
mov
fst
add
loopne
lock
pop
pop
pop
mov
(bad)
data16
hlt
xor
mov
(bad)
sbb
hlt
cmp
aaa
fdiv
and
add
idiv
outs
and
mov
mov
dec
mov
add
lock
adc
hlt
hlt
or
cdq
idiv
pop
xchg
packssdw
push
pop
mov
adc
mov
and
mov
adc
ret
enter
fisttp
mov
jp
and
aaa
xchg
mov
add
adc
mov
jmp
out
out
xchg
cdq
jnp
div
hlt
lods
mov
or
lock
outs
outs
pop
call
mov
arpl
adc
push
or
adc
fldenv
imul
mov
lea
cmp
mov
or
adc
fld
or
sbb
xor
inc
fdiv
daa
add
sbb
mov
add
retf
xchg
jns
or
(bad)
or
jmp
or
je
iret
or
fmul
out
push
cmc
sbb
add
mov
xchg
les
adc
cmp
xchg
xchg
cmp
jmp
call
xchg
xor
adc
cmp
or
cli
test
lods
sbb
push
std
icebp
pop
pusha
sbb
jge
push
cli
and
cmps
push
test
in
gs
add
cdq
mov
dec
aam
scas
add
bound
adc
jmp
cmp
xor
std
popa
or
sbb
mov
outs
mov
cmps
inc
outs
loop
sbb
adc
push
in
and
push
or
add
out
cmp
daa
pop
or
pop
pop
(bad)
fsubr
loopne
lea
hlt
mov
inc
push
ret
xchg
jb
push
ds
iret
adc
add
fucomi
and
add
cmp
sub
push
(bad)
mov
adc
ss
adc
mov
cmp
jae
fwait
mul
cmp
daa
push
adc
add
rol
ror
(bad)
or
jmp
push
pop
xor
or
jbe
or
cs
fsub
ins
sbb
pop
in
push
inc
out
jbe
mov
add
test
cli
adc
or
or
ret
pop
sub
cld
ror
jg
cmp
or
inc
jnp
push
(bad)
mov
xor
pusha
sub
adc
pop
adc
nop
xchg
push
imul
pop
lock
rol
les
fsubr
inc
es
lea
fild
mov
in
enter
sub
call
(bad)
xor
or
movs
sub
rcr
movs
add
test
add
push
push
in
push
fsub
data16
cmp
ror
psadbw
push
and
and
sbb
mov
fmulp
dec
xor
fs
(bad)
xor
and
in
in
in
nop
dec
call
inc
and
data16
clc
out
xor
jns
out
add
xchg
ins
nop
ins
push
mov
(bad)
pop
pop
mov
jmp
push
retf
loopne
and
hlt
out
ds
push
push
sbb
dec
sbb
cs
lds
movs
fisubr
mov
push
or
cmps
or
out
or
call
or
sub
mov
out
add
adc
xchg
fstp
or
mov
push
lea
jnp
sbb
sbb
sar
mov
jle
mov
push
pop
xor
add
push
rcr
and
mov
out
jecxz
push
xor
add
cdq
sbb
jno
pop
iret
popf
mov
xchg
inc
loop
inc
dec
inc
cmp
jecxz
xor
inc
test
cs
ss
add
mov
jge
bound
mov
popa
call
cs
ins
add
pop
(bad)
out
test
sbb
add
pop
jns
pop
scas
sub
fcom
fimul
pop
arpl
or
std
(bad)
es
add
loope
addr16
adc
and
mov
in
or
test
adc
or
es
enter
leave
lea
mov
arpl
outs
(bad)
out
mov
push
ins
add
xchg
mov
jecxz
movs
pusha
imul
rol
sub
adc
sbb
pop
inc
jne
jnp
not
in
daa
pop
add
cmp
daa
jmp
xlat
sbb
jns
and
fisubr
in
mov
aad
push
aad
cwde
fld
adc
arpl
cmp
jne
out
cli
jl
outs
and
mov
(bad)
mov
ret
out
adc
pusha
stos
cmp
pop
jge
cmp
ja
aaa
jle
push
push
je
mov
mov
or
(bad)
js
ret
jmp
mov
mov
sar
mov
test
je
and
sbb
or
push
or
pop
mov
push
ja
not
xor
jnp
xor
cwde
push
sbb
fild
inc
sub
or
mov
or
sar
xchg
xchg
gs
scas
jp
call
adc
xor
enter
mov
pop
or
sbb
add
imul
out
lds
pop
sbb
xchg
mov
retf
int3
test
push
xlat
and
push
inc
dec
(bad)
mov
cmp
pop
movs
adc
mov
test
ret
mov
push
and
add
popf
idiv
adc
(bad)
outs
mov
and
push
ins
dec
or
jo
movs
je
cmp
or
sub
mov
dec
cmp
ficom
jl
add
adc
inc
mov
addr16
std
adc
call
ret
pop
(bad)
jmp
cmp
pop
cmps
push
adc
cmp
jne
mov
lods
loope
push
mov
jg
outs
or
add
imul
ret
int3
push
inc
xor
pop
mov
xor
es
lahf
pop
enter
test
ds
sahf
mov
lea
and
fsin
pop
jnp
shl
jbe
(bad)
je
push
push
lea
mov
or
inc
or
js
and
push
sbb
test
pop
sar
mov
into
jne
add
push
or
or
sbb
mov
fwait
sbb
adc
mov
les
pop
push
xchg
mov
cmp
shl
mov
loope
fist
add
xor
jge
ror
add
cmp
jbe
clc
jb
mov
jne
shr
and
cmp
jb
rep
jmp
mov
sbb
add
sahf
loopne
mov
jae
outs
pop
test
and
pop
cmp
pop
xlat
cmp
and
ror
bound
mov
inc
add
sbb
pop
mov
int3
lea
xchg
mov
sub
cmp
inc
and
call
mov
test
cmps
imul
in
dec
shl
in
call
dec
shl
lock
hlt
clc
sub
sar
cld
in
mov
ja
jg
add
add
or
lock
mov
jecxz
loopne
sub
aaa
nop
popf
pop
ins
ss
stc
adc
or
das
sbb
cld
jg
or
ins
jecxz
ja
sub
(bad)
(bad)
lock
repnz
dec
daa
int
(bad)
sub
pop
or
mov
test
cmp
dec
pop
dec
push
mov
ret
dec
pop
mov
mov
mov
js
stos
sub
pop
sbb
mov
hlt
jg
xor
scas
cld
add
or
sbb
data16
aaa
sub
call
adc
or
or
popf
mov
add
push
add
test
jl
xchg
mov
pop
or
adc
int3
add
adc
mov
sub
stc
dec
cmp
cdq
and
je
sub
cli
mov
rcl
sbb
rol
retf
cdq
scas
sub
push
and
lods
sub
ds
dec
inc
bound
add
out
loopne
pop
out
jb
sub
pop
mov
adc
in
les
loope
cmp
mov
add
push
xchg
bound
enter
jmp
aam
popf
imul
enter
inc
loope
adc
cmps
retf
push
mov
push
outs
test
dec
and
fld
inc
pop
mov
and
dec
ins
lock
push
lahf
cwde
outs
dec
and
mov
addr16
and
add
sbb
mov
sub
push
sbb
mov
std
outs
mov
rol
cli
movzx
jmp
push
pop
sbb
outs
fstp
adc
mov
rcr
cwde
push
push
fwait
and
es
xor
cwde
or
xor
or
or
or
test
das
and
ror
and
cmp
inc
sbb
les
ja
jne
push
push
lods
pop
push
push
adc
cmp
clc
iret
ins
in
mov
adc
out
jnp
xchg
cmp
add
mov
cmp
jle
retf
adc
adc
mov
icebp
outs
clc
adc
sbb
fld
sbb
sbb
add
sbb
or
rcr
out
arpl
mov
jae
daa
pop
int
sub
or
sub
addr16
jl
mov
xor
pushf
bnd
sbb
and
mov
ficom
fadd
cs
adc
lock
adc
push
dec
fsub
pop
mov
and
dec
in
sbb
ret
movs
test
sti
fdivr
div
fnstenv
je
ds
mov
aad
xor
xor
test
mov
nop
lods
sub
dec
add
mov
adc
(bad)
jge
je
push
fs
je
data16
int
mov
add
push
mov
xchg
sub
aad
mov
mov
jno
jle
cdq
icebp
jno
push
lea
mov
cmp
mov
dec
test
jne
or
sub
ss
sub
mov
add
xchg
add
or
sbb
add
jmp
jne
xor
call
push
pop
ret
mov
jmp
jb
std
inc
cld
or
shl
or
daa
sbb
ficom
sbb
and
or
dec
(bad)
rcl
lahf
pop
or
push
push
cmps
mov
ss
dec
or
adc
loope
jmp
sbb
lahf
mov
mov
jl
fdivr
pop
js
pop
and
cmp
lock
nop
jg
ins
and
mov
sub
cmp
jb
cli
jnp
(bad)
cmp
inc
arpl
push
cmp
adc
jle
jecxz
mov
pop
clc
jp
test
xchg
bound
daa
(bad)
cmp
add
push
test
sbb
jno
pop
mov
and
dec
or
fwait
and
add
pop
jmp
add
add
loopne
push
sub
mov
lds
lea
lods
add
push
cmp
ja
mov
jge
mov
cmp
jae
shr
add
or
test
mov
shr
and
sar
cmp
cmp
push
test
xchg
test
push
in
cmp
(bad)
scas
xchg
out
xchg
cmp
(bad)
pop
or
push
rcl
pop
pop
loop
jo
jmp
cli
push
adc
sub
nop
pop
mov
push
in
mov
adc
fidiv
jmp
ror
call
cmp
jne
xchg
dec
pop
add
out
cmp
adc
cmp
call
sub
and
retw
lea
rcl
add
(bad)
je
inc
jmp
cmp
or
jbe
inc
or
ja
or
add
jmp
push
mov
pop
sbb
jg
cmp
daa
cmp
je
cmp
cmc
test
loopne
add
cs
pop
inc
push
add
call
sub
int
cmp
loope
shr
and
in
(bad)
std
outs
cmp
cmp
cmp
aas
dec
mov
loope
and
cmp
cmp
cs
clc
sub
pop
outs
pop
add
aaa
jne
pop
call
outs
sti
bound
mov
scas
arpl
test
or
mov
pushf
cmp
mov
mov
push
jg
mov
aad
aas
jl
cmp
dec
mov
pop
repz
sbb
inc
das
mov
popa
fcmovnu
mov
test
(bad)
mov
or
daa
and
push
fst
loop
push
xor
shr
mov
aam
mov
adc
and
(bad)
fsub
mov
test
mov
dec
aaa
ja
ret
push
fcomp
inc
cmp
inc
inc
mov
je
shl
and
je
arpl
rol
jo
adc
aad
shl
add
sbb
mov
sbb
inc
push
add
sti
mov
(bad)
sbb
mov
inc
and
jecxz
lods
or
or
jne
dec
mov
jecxz
inc
mov
fdiv
jge
inc
sub
pop
outs
rol
int3
enter
add
pushf
or
pop
mov
inc
inc
jmp
xchg
sub
ret
sub
lods
or
aad
sbb
cmc
and
or
aaa
or
std
inc
and
sbb
sete
mov
dec
shl
inc
mov
inc
mov
push
pop
inc
mov
adc
test
repz
cmp
jne
sbb
push
pop
sbb
inc
cmp
inc
add
adc
and
femms
sbb
es
mov
dec
daa
bound
mov
push
push
mov
xor
mov
sub
cmp
ss
shr
je
pop
lock
push
and
leave
into
int3
ret
clc
cmp
pop
jmp
inc
and
sub
or
daa
ret
push
jge
jbe
jae
inc
inc
or
jne
push
repnz
push
sbb
clc
mov
cs
(bad)
pop
add
call
xor
dec
and
and
push
push
mov
push
test
adc
pop
or
lods
push
sahf
pushf
ret
jmp
out
cmp
lods
dec
daa
jae
mov
cmp
fsub
inc
cmp
add
sub
inc
push
into
rcl
lods
mov
sti
jmp
mov
pusha
clc
push
cmp
adc
xchg
xor
std
in
inc
mov
cmps
ret
(bad)
cmp
push
ret
dec
xchg
sbb
cmp
inc
and
sub
mov
add
mov
mov
sbb
loop
loope
data16
je
or
(bad)
call
cmp
(bad)
fdivr
sbb
jl
mov
cmp
test
sti
fld
add
cmp
lea
sub
pop
call
or
arpl
dec
jl
jmp
pop
mov
jle
mov
mov
mov
lods
icebp
add
rol
add
jne
movs
mov
inc
stos
mov
iret
sar
fwait
push
or
and
xchg
clc
push
fisttp
inc
inc
add
(bad)
jl
shl
push
in
cmp
push
fdiv
in
pop
pop
dec
cmp
add
mov
neg
mov
mov
ret
dec
push
shl
lods
test
sub
pop
push
pop
mov
rol
or
mov
int
or
jne
or
add
add
mov
jl
(bad)
mov
inc
and
mov
push
movs
push
or
push
add
pop
mov
adc
inc
dec
(bad)
push
cmp
mov
stos
sub
and
repnz
and
cmp
sub
or
pop
shr
pop
jmp
int3
xor
mov
xchg
cmp
jae
out
outs
ret
icebp
shl
cmp
ins
xchg
into
sub
jmp
je
xlat
jg
jne
icebp
adc
dec
inc
mov
cmp
ret
adc
adc
sbb
mov
mov
gs
sub
cmp
sbb
mov
test
dec
je
add
clc
push
cmp
nop
int
push
pusha
push
push
adc
xor
fcom
ins
sbb
mov
rcl
adc
cwde
daa
les
nop
pop
sub
jmp
rcl
cwde
mov
add
imul
dec
add
ins
pop
leave
dec
sub
jo
sbb
push
pusha
mov
ds
in
push
dec
push
neg
add
sbb
push
iret
adc
and
pop
out
push
and
and
or
mov
sbb
add
pop
loopne
push
xor
sub
xchg
ins
mov
fstp
lea
inc
neg
sbb
loopne
inc
sub
jmp
jbe
or
push
int3
stos
push
adc
scas
or
xchg
or
pop
sbb
data16
sbb
push
not
mov
mov
cmp
pop
movs
add
adc
pusha
mov
mov
mov
stos
add
push
push
inc
and
xor
and
or
jo
cmp
pop
mov
inc
imul
inc
and
fild
daa
adc
push
or
mov
cmp
je
xor
push
imul
and
sub
(bad)
ja
arpl
pusha
add
mov
inc
movs
mov
add
ror
(bad)
clc
xchg
cmp
mov
icebp
out
mov
test
mov
call
adc
ret
xchg
and
and
js
jno
mov
lea
jnp
je
mov
jnp
mov
test
adc
mov
movs
or
cmc
inc
inc
cmp
aam
pop
outs
aad
repz
or
jb
int
sbb
push
mov
mov
sub
push
shld
test
push
inc
jns
call
pop
sbb
mov
or
sub
lds
sub
mov
or
dec
stos
add
or
out
adc
fwait
xor
and
add
(bad)
push
and
dec
inc
pop
test
adc
cmp
inc
imul
adc
cld
cld
mov
and
sub
mov
dec
inc
mov
test
mov
cdq
ficomp
mov
or
push
jns
jns
push
ins
pop
xor
stos
neg
or
mov
mov
adc
xor
xchg
mov
icebp
xchg
sbb
xor
add
pusha
sub
or
jge
test
out
repnz
lea
push
cmps
outs
pusha
mov
icebp
(bad)
ja
sub
lea
inc
mov
or
mov
sub
fidiv
rep
inc
inc
mov
xor
sar
pop
clc
in
cli
xor
jp
push
push
add
or
std
sbb
mov
and
dec
mov
(bad)
imul
or
ret
cld
std
test
cli
adc
nop
pusha
jmp
sbb
je
and
(bad)
push
cmp
mov
test
adc
(bad)
(bad)
popa
lea
and
dec
pop
ficomp
ja
and
and
loopne
push
mov
dec
fldl2e
xlat
adc
std
or
pop
mov
test
and
(bad)
jne
das
test
push
xor
mov
pop
aam
sub
adc
push
in
cmp
push
movs
and
inc
push
test
inc
mov
cmp
jne
mov
mov
add
xor
xor
add
test
lock
and
adc
jb
in
push
mov
das
outs
movs
ror
jmp
std
jmp
ins
or
or
sbb
inc
cs
aaa
leave
mov
inc
(bad)
out
jmp
mov
fst
(bad)
bound
imul
test
daa
test
sbb
data16
inc
fmul
mov
add
(bad)
mov
js
call
loopne
and
ror
push
jg
shl
int3
pushf
adc
sbb
dec
iret
out
pop
(bad)
jae
adc
push
sbb
fistp
enter
add
outs
in
lock
outs
xor
in
adc
pop
pop
adc
adc
xor
cmp
adc
cdq
fs
in
sub
ret
or
std
cld
push
out
add
push
retf
cmp
and
cmp
mov
std
addr16
sbb
fadd
fwait
adc
sub
loope
jbe
call
sub
dec
ror
push
mov
push
jae
in
jno
mov
repz
push
shr
mov
mov
imul
dec
jns
jg
add
aaa
sub
dec
test
jne
sar
aas
dec
pop
fiadd
fbld
(bad)
iret
jbe
ret
sbb
xor
sub
movsx
and
mov
dec
add
jl
mov
pop
call
and
jmp
cmp
push
into
cmp
mov
push
jb
sahf
push
jns
dec
add
in
int
mov
add
add
or
sub
dec
xlat
aas
jnp
pop
mov
loope
out
mov
xor
jb
mov
mov
xor
mov
sti
mov
ds
jbe
cli
mov
fild
sub
xchg
cmp
jmp
popa
rcr
shl
xchg
into
mov
(bad)
dec
push
mov
add
sbb
repz
sub
in
aad
cmp
outs
mov
lock
sub
mov
push
add
mov
dec
arpl
add
xchg
and
inc
mov
jae
mov
pop
fwait
mov
jbe
sbb
(bad)
mov
sbb
sub
addr16
jae
loopne
and
clc
fsub
popf
test
push
mov
add
pop
adc
mov
fbld
imul
inc
das
cmp
add
push
add
call
mul
int3
pop
pop
xor
push
or
outs
idiv
mov
inc
adc
getsec
pop
loopne
dec
or
jns
adc
shl
je
ins
push
adc
sub
mov
adc
stos
sbb
mov
mov
inc
xchg
retf
enter
scas
lea
adc
push
lea
push
and
les
das
cmp
ficom
adc
mov
lods
mov
jmp
data16
jo
das
push
call
dec
pop
jbe
pop
push
push
jge
or
rol
in
dec
hlt
jmp
es
addr16
call
mov
jg
popf
dec
jecxz
jle
loope
and
and
or
jne
ret
adc
call
out
jne
mov
cmp
es
add
pop
and
mov
movs
mov
adc
jmp
cwde
mov
enter
das
out
shl
mov
loope
in
test
fcomp
jbe
xchg
ss
pop
pop
adc
inc
ins
add
fwait
sbb
movs
adc
push
cli
(bad)
dec
sub
mov
mov
mov
jo
push
fld
pop
pusha
sti
dec
inc
or
mov
jne
xchg
sub
or
and
or
je
pop
mov
and
retf
pop
pop
mov
movs
bound
dec
push
into
jne
ins
idiv
push
fs
test
jl
shl
inc
jmp
mov
push
stc
inc
cmps
jg
xlat
or
jg
jnp
inc
cmp
jle
or
std
or
adc
adc
cmp
mov
dec
jne
hlt
sbb
jmp
pop
mov
xchg
mov
adc
adc
test
or
jp
pusha
aad
fwait
pop
xchg
scas
jp
nop
test
test
xchg
add
dec
sub
sub
cdq
or
adc
mov
mov
cmp
or
ins
xchg
(bad)
jmp
sub
sti
nop
xchg
stos
dec
mov
jnp
mov
lods
and
and
mov
mov
or
mov
jne
push
shl
add
xor
lahf
mov
and
(bad)
jne
cmp
xor
movs
push
jmp
adc
and
pushf
adc
or
frstor
pop
jne
pop
mov
shl
sbb
sub
sbb
cmp
je
pushf
shr
push
cmp
loopne
fld
inc
xor
xor
xor
jg
inc
adc
add
loopne
mov
mov
xor
jbe
push
mov
push
cld
cmps
jl
mov
sti
lods
and
mov
inc
stos
pop
mov
mov
jno
inc
or
or
push
ret
aaa
imul
arpl
add
or
add
mov
sub
test
out
jns
xchg
mov
add
or
pusha
shl
lea
jo
sti
lea
ja
lea
dec
repnz
hlt
lea
cld
lock
mov
push
push
mov
mov
push
sub
xchg
jbe
test
add
jnp
ficomp
lods
lea
or
inc
xor
std
jo
sahf
jecxz
inc
inc
jns
je
mov
dec
inc
ror
js
add
retf
push
add
stos
push
cmp
stc
lds
inc
push
scas
bndstx
sub
pop
push
mov
mov
ds
popa
sub
adc
sbb
sbb
mov
mov
call
cmp
fidiv
adc
sar
out
sbb
dec
or
mov
push
inc
xchg
inc
popf
adc
(bad)
dec
aad
mov
push
jne
jmp
mov
inc
in
pop
inc
fwait
xor
pop
jne
sub
sbb
je
and
mov
sub
cmp
cmp
movs
jnp
dec
adc
out
ins
sbb
int
ins
cs
sub
ds
mov
scas
mov
push
imul
dec
jne
cmp
sbb
sub
push
add
rcl
out
mov
ins
push
or
pop
jne
mov
dec
js
jne
mov
test
sub
add
das
dec
or
fisttp
and
nop
sbb
mov
fadd
add
in
enter
mov
frstor
aas
jg
ins
add
dec
rcr
inc
cmp
and
movs
pusha
sar
mov
fist
dec
ror
idiv
(bad)
nop
cmp
pop
add
dec
fbld
dec
pusha
mov
pop
dec
shl
jg
add
in
hlt
cld
add
fdiv
(bad)
jne
test
xor
add
and
mov
out
ss
pop
adc
clts
sub
mov
sbb
xchg
pop
jle
(bad)
jae
adc
or
sub
add
jbe
push
je
ins
and
jb
jb
or
dec
push
or
jg
push
adc
add
dec
inc
not
dec
inc
adc
push
xor
cmp
mov
and
bound
and
imul
stc
data16
aaa
daa
aaa
outs
outs
je
mov
jne
push
arpl
data16
outs
ja
in
fild
outs
aaa
ss
and
xor
in
mov
sub
jb
jne
xor
(bad)
(bad)
arpl
sub
fisubr
ins
pop
sub
pop
das
pop
push
fdivr
ret
loop
xor
imul
gs
sub
xor
pcmpgtb
arpl
ret
leave
cmp
and
and
aaa
outs
fld
je
mov
arpl
xchg
imul
pop
imul
mov
add
mov
ins
add
addr16
ins
and
sub
test
das
xor
dec
sbb
sub
xor
push
enter
cmp
addr16
mov
pop
xor
shr
mov
mov
sub
cmp
fs
inc
sub
adc
pusha
cld
ret
imul
push
mov
ja
daa
or
imul
add
out
mov
xlat
in
and
fld
ja
ds
mov
jns
mov
pop
add
je
popa
ds
push
jbe
push
ins
cmp
mov
xorps
(bad)
outs
xchg
gs
popa
addr16
outs
js
jge
xor
inc
mov
fs
adc
in
test
or
test
pop
or
jbe
xchg
fld
pop
pop
or
adc
gs
cs
sbb
sbb
in
call
sbb
scas
imul
sbb
pop
retf
jb
ins
pop
push
push
adc
sbb
mov
jbe
(bad)
push
dec
xor
xor
(bad)
push
or
into
ins
mov
and
jl
push
adc
call
lahf
mov
retf
inc
(bad)
rcr
xor
pop
outs
mov
std
test
sub
jns
(bad)
(bad)
call
repz
xor
enter
pop
push
gs
iret
and
xor
out
cs
iret
mov
(bad)
(bad)
(bad)
dec
push
push
sub
mov
push
movs
and
xor
adc
jge
or
lahf
jbe
(bad)
(bad)
(bad)
call
loopne
and
pop
and
jbe
stc
inc
sub
pop
aad
lock
cli
shr
hlt
(bad)
(bad)
(bad)
dec
push
jne
pop
fdiv
lock
cli
push
retf
ds
pusha
mov
and
jne
(bad)
(bad)
call
cmps
pop
xchg
inc
js
in
cmp
mov
push
div
mov
or
js
jae
cs
(bad)
(bad)
(bad)
jp
ds
push
aam
dec
sbb
xchg
loop
xchg
sbb
push
loope
js
js
mov
xchg
sub
(bad)
(bad)
(bad)
jmp
cmp
xor
dec
push
xor
outs
dec
(bad)
daa
mov
imul
inc
not
(bad)
(bad)
(bad)
(bad)
mov
(bad)
std
ins
xor
ror
(bad)
bound
mov
sbb
adc
dec
pop
jmp
cli
int
mov
in
rep
add
icebp
mov
add
(bad)
(bad)
(bad)
std
in
mov
pusha
enter
lock
lds
scas
ja
imul
pop
iret
pusha
mov
mov
jmp
cld
les
jae
stos
or
repz
mov
leave
stos
xchg
aad
mov
int
(bad)
(bad)
(bad)
jge
push
aam
mov
mov
xchg
ret
jne
jg
adc
mov
out
xchg
inc
mov
(bad)
inc
clc
popa
xor
cld
inc
inc
cli
ja
std
sub
jg
fadd
push
add
(bad)
(bad)
(bad)
jmp
ret
mov
and
sahf
mov
loope
sar
call
nop
jne
(bad)
(bad)
(bad)
inc
sub
or
es
cmp
movs
icebp
or
out
pop
repnz
jp
xor
repnz
mov
xor
push
div
mov
and
mov
jmp
in
jle
sti
into
and
push
pop
inc
push
outs
inc
sbb
fmul
arpl
fld
inc
xor
mov
call
push
push
cmc
in
cmp
pop
out
(bad)
(bad)
(bad)
inc
test
jbe
neg
gs
mov
pop
out
lods
jbe
imul
retf
test
(bad)
jmp
or
dec
pop
(bad)
fnstcw
pop
imul
inc
daa
ins
xor
add
(bad)
(bad)
(bad)
(bad)
out
(bad)
stos
push
pusha
dec
movs
inc
popa
ret
push
test
add
jl
sti
mov
(bad)
loope
dec
mov
xor
popa
xor
pusha
xchg
or
mov
nop
pop
call
lock
or
dec
mov
(bad)
(bad)
(bad)
inc
mov
push
jo
sub
mov
inc
adc
xor
neg
fidiv
cmp
push
es
mov
jnp
dec
das
pop
shl
lods
jo
sbb
push
inc
(bad)
rol
push
mov
jmp
add
push
imul
fwait
or
(bad)
(bad)
(bad)
push
clc
out
scas
pop
shl
in
add
mov
inc
mov
cmp
sar
call
out
adc
jecxz
add
fiadd
cmp
jp
mov
mov
cmp
(bad)
jmp
nop
xor
loop
psubq
fnsave
imul
aam
jae
cmp
(bad)
(bad)
push
jmp
adc
sbb
or
xor
mov
inc
xor
push
das
std
(bad)
jmp
adc
je
aad
mov
and
sti
mov
stc
jecxz
and
mul
(bad)
(bad)
dec
mov
mov
push
mov
and
mov
push
dec
adc
mov
aaa
dec
sub
mov
(bad)
call
(bad)
or
daa
pop
repz
(bad)
cmp
loop
sub
cli
not
jg
std
pushw
xor
jb
outs
jne
xor
add
sub
inc
out
mov
cmps
sub
push
nop
mov
dec
add
test
inc
push
fs
add
adc
inc
cmp
add
add
ror
or
sbb
or
or
or
(bad)
nop
or
or
xchg
shl
or
or
pop
add
dec
das
jo
or
cmps
imul
dec
shl
adc
dec
rcr
cmp
adc
cmps
imul
cmps
imul
cmps
imul
add
fild
lds
and
jg
repnz
cmps
fild
mov
cld
inc
jle
cld
popa
ins
sar
shl
ja
inc
into
push
cmp
jmp
and
pop
iret
mov
in
fucom
sub
call
(bad)
push
add
repnz
pop
pop
fisubr
xor
fcomp
loopne
cmp
xor
xor
add
push
and
and
pop
xchg
retf
in
fcmovnb
push
imul
or
jo
ins
jae
aaa
lahf
std
je
arpl
inc
or
inc
ins
outs
jae
dec
popa
outs
add
lods
push
or
gs
pop
cmc
stos
push
in
sbb
frstor
jb
je
dec
or
pop
or
push
rcl
ins
xor
fs
jle
bound
inc
fs
jo
add
dec
in
inc
ins
lds
mov
lds
mov
outs
test
inc
dec
inc
push
or
lods
add
jne
outs
or
mov
gs
psubq
pop
pop
fwait
push
xchg
gs
imul
outs
xchg
ins
gs
push
iret
cli
xchg
movq
je
push
outs
ja
in
bound
ins
sbb
pop
aaa
fadd
popa
inc
jo
adc
ins
ins
pop
dec
xor
push
mov
and
push
inc
js
stc
cmc
push
loopne
ret
or
cmp
leave
or
jns
or
mov
(bad)
into
inc
or
call
sbb
ins
leave
push
push
mov
adc
xchg
or
rcr
add
out
dec
popa
ins
mov
inc
shl
movs
mov
push
sbb
inc
fmul
pop
push
push
or
inc
mov
loopne
das
ss
xor
retf
ins
call
or
retf
mov
adc
or
mov
retf
mov
xchg
add
xor
lods
mov
rol
add
cld
xchg
loopne
sidtd
add
add
movs
mov
das
sub
xor
adc
aaa
in
cmp
add
or
or
cmp
pop
aaa
and
mov
aad
nop
inc
cwde
sbb
cs
retf
xchg
xor
add
es
pushf
push
pusha
or
sub
pusha
rcl
push
sbb
add
add
add
add
add
call
int
jmp
nop
nop
nop
nop
nop
nop
mov
inc
mov
inc
add
jne
mov
sub
adc
jb
mov
add
jne
mov
sub
adc
adc
add
jae
jne
mov
sub
adc
jae
xor
sub
jb
shl
mov
inc
xor
je
mov
add
jne
mov
sub
adc
adc
add
jne
mov
sub
adc
adc
jne
inc
add
jne
mov
sub
adc
adc
add
jae
jne
mov
sub
adc
jae
add
cmp
adc
lea
cmp
jbe
mov
inc
mov
inc
dec
jne
jmp
nop
mov
add
mov
add
sub
ja
add
jmp
pop
mov
mov
mov
inc
sub
cmp
ja
cmp
jne
mov
mov
shr
rol
xchg
sub
sub
add
mov
add
mov
loop
lea
mov
or
je
mov
lea
add
push
add
call
xchg
mov
inc
or
je
mov
jns
movzx
inc
push
inc
mov
push
call
or
je
mov
add
jmp
call
mov
lea
mov
push
push
push
push
push
call
lea
and
and
pop
push
push
push
push
push
call
pop
popa
lea
push
cmp
jne
sub
jmp
