mov
adc
mov
pushw
jne
popa
push
gs
jns
xor
push
xor
loop
adc
shr
jno
or
lea
fsubp
test
mov
dec
lods
mov
mov
jae
into
dec
mov
sahf
dec
stc
sub
pop
sti
mov
sahf
popa
push
jns
jmp
inc
cmp
jmp
xor
aaa
(bad)
repnz
loopne
(bad)
in
fcomp
add
xor
test
in
adc
push
test
repnz
cmp
aam
test
mov
mov
add
sub
iret
xor
mov
mov
aad
xor
sub
mov
or
lea
loop
cmp
inc
xchg
xor
gs
mov
out
xor
adc
fs
add
xor
imul
mov
sbb
jae
loop
xor
mov
jge
xor
sub
jae
call
mov
sub
gs
xor
cmp
movs
dec
mov
idiv
jmp
xchg
push
cmc
mov
cmp
inc
xchg
jb
jle
add
xor
or
shl
int3
loop
mov
inc
pop
dec
fcmove
cmp
pop
stos
add
push
cld
jae
inc
jmp
stos
fxch
xor
bound
(bad)
imul
xor
popf
cmp
imul
xor
test
lea
mov
xchg
stc
sbb
xchg
mov
(bad)
lods
test
(bad)
jns
jae
add
xor
xor
xchg
fxch
xor
imul
pop
mov
ins
imul
sbb
imul
sub
and
xor
or
lea
cmp
add
push
cmp
(bad)
cmp
xchg
dec
push
cmc
mov
add
adc
call
xor
sub
jae
xchg
mov
mov
mov
imul
mov
mov
jmp
xor
fdivr
mov
imul
mov
aas
cdq
ds
inc
loopne
pop
mov
add
xor
sub
xor
stos
or
adc
lea
cmp
dec
(bad)
add
iret
inc
cmp
cmp
push
ds
inc
cmp
fldenv
lea
jmp
imul
ds
jne
inc
xchg
fstp
lods
push
or
sbb
mov
fdivr
inc
xchg
(bad)
std
mov
dec
xor
mov
cmp
xchg
mov
xor
add
out
rcl
ds
add
inc
mov
xor
imul
mov
ins
mov
inc
mov
sbb
pop
mov
sbb
fnstcw
xor
scas
jb
inc
adc
icebp
push
jo
dec
inc
push
lea
mov
sahf
push
call
int
in
dec
xor
sbb
add
xchg
xchg
add
aaa
sub
popa
shl
xor
gs
mov
aad
mov
lahf
stc
xor
inc
sbb
into
iret
jge
inc
cmps
add
inc
inc
or
test
lea
mov
stc
xor
mov
dec
mov
imul
fstp
sbb
idiv
xchg
ficomp
or
je
loopne
shl
popa
(bad)
fistp
enter
stc
test
imul
push
inc
imul
inc
loopne
aad
sub
(bad)
fisttp
enter
stc
test
imul
out
popa
or
push
mov
iret
push
inc
into
cli
jmp
je
jns
popf
into
call
enter
push
je
xor
mov
jmp
mov
sbb
into
call
dec
mov
xchg
int
xchg
inc
inc
push
enter
test
inc
imul
mov
push
clc
xor
sbb
mov
inc
xchg
jae
ds
push
cmp
jno
inc
xchg
loopne
mov
(bad)
xor
sub
mov
cli
jmp
je
jl
test
aas
push
popw
xor
movs
shl
test
mov
cs
mov
into
xor
jno
inc
xchg
add
xchg
cdq
dec
mov
push
add
aaa
(bad)
clc
jns
add
cmp
push
ins
mov
enter
shl
jno
call
call
mov
push
dec
gs
imul
pusha
xor
mov
inc
jbe
sti
xor
dec
push
xor
ja
mov
out
sub
idiv
xchg
add
push
loopne
(bad)
popa
mov
inc
shr
stos
fdivr
jmp
gs
je
dec
enter
enter
movs
repz
add
fstp
lea
xor
and
loopne
(bad)
push
test
ss
xchg
sbb
pop
push
fndisi(8087
cdq
push
cld
push
push
dec
ins
xchg
mov
sub
xor
inc
loopne
leave
xor
(bad)
fist
enter
(bad)
clc
jns
add
cmp
push
inc
stos
loop
and
bnd
mov
mov
xchg
mov
sub
mov
mov
fwait
push
jl
xor
mov
jo
or
ins
mov
inc
loopne
lds
jne
call
dec
outs
in
inc
repnz
loopne
pusha
in
ds
inc
mov
bound
or
mul
xor
test
imul
clc
imul
into
xor
mov
shl
outs
jae
aas
add
jb
xor
jbe
aas
fadd
jb
jle
shr
stos
fdivr
in
loop
cmp
leave
loopne
xor
dec
into
iret
popa
gs
imul
cs
sbb
pop
mov
sbb
mov
cmp
mov
xchg
add
in
(bad)
clc
jns
add
jmp
(bad)
sbb
mov
jne
adc
xchg
movs
leave
xor
iret
xor
retf
jmp
ja
xchg
sti
xor
mov
mov
mov
xchg
into
jmp
mov
inc
loopne
fst
xor
aaa
(bad)
clc
jns
add
cmp
push
inc
mov
or
in
sub
add
cmp
mov
ins
lea
xor
and
(bad)
fldenv
lea
xor
lea
mov
dec
mov
iret
xor
pop
or
out
aaa
sub
popa
push
add
xor
pusha
push
ds
dec
inc
mov
jge
jp
fstp
mov
xor
outs
jb
xor
and
mov
sahf
push
dec
test
mov
dec
mov
iret
ins
mov
addr16
popa
jb
inc
xor
aam
lea
mov
dec
xor
fnstcw
xor
aas
fimul
cmp
or
(bad)
(bad)
xor
lea
into
outs
push
adc
(bad)
xor
imul
jmp
dec
push
sub
xor
add
bound
push
or
retf
mov
retf
jmp
ret
lea
cmp
clc
imul
into
mov
xchg
jae
jmp
xor
mov
xor
in
ins
into
inc
xchg
fstp
popf
xchg
jb
cmp
lea
iret
gs
adc
retf
mov
imul
in
xchg
jb
jns
enter
enter
mov
push
jb
cmps
loopne
int
adc
xor
imul
mov
push
jne
cmp
clc
imul
xor
jb
(bad)
(bad)
xor
sub
or
pop
mov
mov
sub
ficomp
imul
xor
jmp
dec
jne
inc
lea
mov
(bad)
imul
xor
in
dec
add
inc
call
lea
jp
(bad)
pop
es
shr
enter
mov
scas
push
lea
mov
pusha
dec
inc
xchg
push
(bad)
pop
loopne
loope
xchg
jb
jns
or
inc
xchg
jb
sbb
cs
cmp
or
sbb
mov
pusha
dec
inc
scas
scas
mov
sub
mov
xchg
jae
into
pop
add
xchg
mov
repnz
clc
imul
mov
inc
sub
mov
inc
bndmov
jb
lahf
cmc
cs
imul
in
(bad)
clc
jns
add
cmp
xor
mov
mov
jge
jnp
dec
loopne
sbb
dec
mov
xchg
lea
mov
mov
imul
xor
call
(bad)
fcmovb
loopne
sbb
push
leave
stos
sbb
mov
mov
popa
mov
into
ins
push
push
inc
imul
xor
sub
xor
lods
test
mov
sub
into
inc
pusha
dec
inc
mov
call
sbb
dec
mov
xchg
lea
enter
imul
(bad)
call
lea
popa
sub
jge
push
inc
mov
sbb
mov
dec
mov
jmp
lds
ja
sub
mov
pop
lea
aas
pop
jb
inc
jmp
mov
popa
in
and
(bad)
fstp
xor
add
xchg
xchg
add
shr
xor
ins
out
shr
xor
test
xor
imul
shr
f2xm1
sbb
mov
cli
jmp
je
js
lea
sbb
into
iret
xchg
mov
mov
add
xor
jne
les
lea
cmp
jb
inc
sbb
xor
fld
fimul
xor
dec
mov
xchg
jae
mov
imul
aas
popf
jb
inc
in
cmc
inc
xchg
jb
push
in
jbe
inc
xor
mov
mov
repnz
enterw
sub
lea
xor
inc
into
inc
xchg
or
cmps
outs
lea
jmp
popa
push
outs
jno
inc
jmp
clc
imul
mov
inc
cmp
xor
data16
int
test
push
into
inc
xchg
fstp
mov
xor
in
ins
into
inc
xchg
fnstsw
mov
sub
mov
cmp
dec
ds
xor
icebp
inc
xchg
jb
sbb
cs
cmp
or
cmc
mov
mov
jno
mov
xchg
cmp
sub
iret
inc
sub
jbe
aam
into
inc
xchg
push
mov
xchg
jae
sbb
dec
jge
imul
lods
sbb
lea
push
jb
(bad)
loopne
int
test
lea
fsubr
xor
mov
adc
mov
jae
mov
imul
mov
xchg
jae
jmp
cmc
mov
dec
push
xor
aas
into
inc
xchg
add
dec
mov
push
xchg
jae
xor
jb
inc
push
jb
mov
imul
inc
xchg
jb
jmp
popa
sar
sub
inc
mov
data16
ins
mov
sub
into
inc
xchg
lea
mov
push
shl
mov
shl
loopne
pop
mov
imul
fprem1
lahf
jb
cmp
lea
into
dec
out
shl
xor
inc
xchg
jb
push
pop
jnp
inc
jmp
mov
fnsave
inc
push
mov
mov
xor
cmp
mov
jb
mov
push
lea
ds
mov
gs
inc
imul
xor
add
sar
imul
fnstenv
jb
cmp
lea
into
dec
out
rcl
outs
jae
in
int3
inc
xchg
jb
push
(bad)
js
inc
jmp
mov
fnsave
inc
push
jle
(bad)
imul
popa
sbb
(bad)
fnstcw
pushf
jb
cmp
lea
into
dec
out
rcl
outs
jae
in
int3
inc
xchg
jb
push
vmread
inc
jmp
mov
fnsave
inc
push
mov
mov
xor
cmp
les
push
cmc
mov
jb
mov
in
cmp
inc
xchg
mov
mov
jmp
sti
imul
jle
mov
inc
imul
xor
add
sar
imul
(bad)
jb
cmp
lea
into
sub
outs
jae
in
int3
inc
xchg
jb
push
mov
into
inc
jmp
mov
add
sar
imul
into
in
xor
cmc
mov
jb
mov
in
cmp
inc
xchg
mov
mov
pop
lea
cmp
cmp
inc
xchg
lea
mov
sub
into
inc
xchg
fstp
jae
jb
jecxz
pushf
idiv
push
lea
xor
dec
mov
xchg
jae
mov
imul
aaa
in
push
into
inc
xchg
fnstsw
inc
cmp
or
sar
mov
mov
imul
into
jmp
popa
xor
call
mov
jmp
inc
imul
into
inc
xchg
lea
jns
sub
inc
xchg
jb
cmp
xor
ds
lea
mov
imul
xor
cmp
xor
xchg
jae
jmp
popa
xor
push
into
inc
xchg
fnstsw
cmp
add
add
mov
xchg
jae
jmp
xor
pusha
dec
ds
cmp
loope
xchg
jb
xor
pop
into
inc
xchg
fnstsw
mov
xchg
add
mov
jno
mov
cwde
xor
push
xchg
jae
jmp
popa
xor
data16
int
test
mov
mov
xchg
jb
xor
push
into
inc
xchg
fnstsw
xor
mov
jns
lock
data16
mov
sahf
outs
mov
inc
loopne
mov
inc
cmp
mov
xchg
jae
jmp
je
pusha
dec
ds
pop
mov
mov
imul
inc
xchg
add
cmp
jge
inc
xchg
(bad)
into
setno
inc
add
xchg
sti
imul
into
jmp
cmc
mov
sub
inc
xchg
jb
push
jnp
xor
add
xor
mov
jmp
push
xchg
jae
aaa
in
jo
inc
xchg
fstp
mov
xor
in
jo
inc
xchg
fstp
rol
jge
sbb
xor
in
popa
into
inc
xchg
add
and
sub
mov
inc
jmp
mov
in
mov
push
jns
(bad)
add
xor
xor
inc
mov
repnz
cmp
mov
imul
inc
xchg
lea
cmp
mov
sub
iret
inc
cmp
or
mov
mov
xchg
or
mov
lea
mov
xor
sub
inc
xchg
fnstsw
inc
cmp
or
loope
call
(bad)
(bad)
pop
loopne
mov
jns
lock
data16
mov
lds
inc
imul
and
mov
inc
loopne
push
jge
std
into
inc
xchg
(bad)
xor
in
and
inc
xchg
add
ret
into
aaa
in
or
inc
xchg
fnstsw
jmp
mov
in
inc
inc
xchg
jb
push
jns
(bad)
add
xor
shl
ds
push
inc
ds
mov
cmp
mov
xor
add
mov
inc
cmp
inc
pop
sub
iret
inc
cmp
or
mov
mov
xchg
test
mov
xchg
xor
xchg
jae
mov
imul
xor
jns
inc
xchg
push
mov
xchg
jae
jmp
je
rcr
mov
in
aad
inc
xchg
add
cmp
xor
imul
iret
inc
popa
xor
in
inc
xchg
lea
ds
or
xchg
jb
inc
fsub
into
inc
xchg
gs
dec
xchg
jb
jle
add
std
loopne
gs
xchg
jb
dec
test
xor
xchg
jb
mov
add
mov
xchg
jae
mov
ins
jb
push
xchg
jae
aaa
in
jo
inc
xchg
fstp
mov
xor
in
jo
inc
xchg
fstp
call
lods
cdq
mov
jns
add
inc
xchg
jb
jb
int
xchg
inc
inc
loopne
leave
inc
xchg
jb
(bad)
jb
inc
in
push
xor
jne
inc
xchg
add
inc
cmp
shr
mov
gs
aaa
in
jo
inc
xchg
fstp
mov
xor
in
jo
inc
xchg
fstp
dec
add
mov
jns
xor
into
imul
into
jmp
test
pop
loopne
gs
xchg
jb
jns
or
aas
int
iret
inc
push
or
cmp
into
inc
loop
cdq
inc
xchg
jb
xor
addr16
or
xor
addr16
or
inc
xchg
jb
aas
lea
inc
push
or
inc
xchg
jb
cmp
xor
inc
xchg
jb
iret
outs
dec
mov
xchg
jae
mov
loopne
mov
inc
cmp
add
test
inc
imul
into
inc
xchg
fnstsw
add
xor
lds
inc
loopne
mov
mov
stc
cmp
inc
xchg
fnstsw
xor
push
into
inc
xchg
fnstsw
xor
push
into
inc
xchg
fnstsw
add
xor
shl
loopne
mov
inc
cmp
add
test
mov
aaa
(bad)
clc
jns
add
rcl
lea
jns
xor
enter
imul
xor
cmp
xor
sbb
pop
loopne
(bad)
pop
loopne
shl
adc
mov
inc
imul
xor
xor
pop
mov
and
or
(bad)
xor
shl
mov
loopne
in
xor
mov
inc
xchg
jb
inc
sub
mov
stos
push
push
push
scas
enter
and
out
(bad)
ficomp
scas
enter
jb
in
(bad)
mov
sbb
xor
imul
add
or
inc
loopne
pop
cmp
iret
xor
imul
jno
add
push
mov
and
xchg
imul
outs
jae
fdivr
jmp
rcl
dec
mov
add
xchg
mov
stc
test
imul
cli
imul
je
loopne
mov
jno
jo
imul
xor
sub
lods
sti
imul
xor
leave
test
imul
xchg
cli
lock
xor
sub
mov
imul
xor
stc
cmp
jmp
lea
add
inc
push
sub
adc
mov
xor
add
mov
test
cli
lahf
mov
mov
mov
mov
lock
xor
hlt
int3
xor
imul
sti
imul
push
js
xor
sub
xor
stc
test
imul
stos
sbb
retf
xor
imul
cmp
test
stos
leave
int
sti
imul
fcom
xchg
scas
sti
imul
xor
test
or
mov
add
mov
sbb
jg
mov
test
mov
inc
xor
dec
xchg
cli
lock
xor
sub
iret
inc
xchg
jnp
mov
sbb
dec
xor
test
mov
imul
xor
xchg
jnp
mov
sbb
pop
xor
mov
xchg
scas
sti
imul
xor
xchg
jb
into
(bad)
xor
mov
sti
imul
cmp
sti
imul
xor
test
jo
push
lea
jnp
sub
sub
xor
imul
or
imul
cmp
sub
xor
test
jo
push
(bad)
fadd
imul
xor
test
mov
imul
fnsave
test
xor
test
mov
imul
and
or
mov
xor
fst
mov
pusha
dec
dec
out
jmp
aas
stc
xor
xor
cmps
lea
mov
in
dec
xchg
imul
into
mov
and
mov
imul
sti
imul
cmp
sti
imul
fsub
push
movs
stc
xor
iret
xor
scas
sti
imul
xor
imul
mov
call
mov
sub
xor
sub
ds
std
nop
clc
imul
(bad)
mov
enter
lea
mov
imul
cmp
sub
xor
add
push
loopne
ds
jp
cmp
xor
bound
mov
jmp
iret
jl
dec
dec
imul
aaa
iret
das
push
xor
stc
int
mov
lahf
mov
sub
sub
stc
xor
lea
mov
mov
daa
sub
je
jmp
xor
jmp
cmp
cli
imul
mov
xor
or
sub
jno
enter
imul
lds
xor
dec
and
xor
cli
imul
cdq
sbb
(bad)
into
mov
enter
imul
into
(bad)
xor
cdq
movs
jmp
mov
outs
or
dec
dec
lea
in
inc
repnz
loopne
pusha
jmp
jae
hlt
lds
mov
xchg
add
inc
ins
stc
test
imul
fxtract
or
and
sub
xor
imul
push
and
xor
imul
leave
xor
lea
inc
in
xor
imul
push
je
xor
imul
push
fs
xor
imul
mov
jmp
cmp
aaa
xor
jb
into
(bad)
xor
in
aaa
jae
in
cdq
jmp
idiv
adc
repnz
xor
sub
mov
dec
sub
leave
mov
imul
jae
jmp
mov
sub
mov
mov
imul
mov
mov
ins
stc
test
imul
mov
imul
push
add
dec
push
in
loope
ins
lea
mov
sbb
xor
sub
popa
inc
jl
lods
sti
imul
aaa
sub
popa
shr
je
cmp
xor
imul
inc
pop
or
inc
push
in
sub
or
test
imul
pop
mov
add
outs
fsubr
mov
cwde
(bad)
xor
mov
xor
sub
into
iret
fld
je
cmp
dec
hlt
int3
xor
sub
fidivr
lea
xor
loopne
mov
jne
je
sbb
push
cdq
loop
int
stos
movs
repz
mov
dec
loop
and
and
mov
popf
lea
push
sub
pop
mov
in
leave
jmp
leave
shr
je
cmp
into
inc
sbb
into
scas
pop
adc
loop
lds
xor
(bad)
fist
enter
fdivr
in
cmp
mov
sub
into
inc
jl
scas
sti
imul
aam
test
inc
mov
sar
clc
imul
mov
sub
lea
mov
sub
lea
mov
sub
lea
mov
sub
lea
mov
imul
and
jl
jb
mov
enter
mov
aad
xor
stos
xor
(bad)
ds
fwait
or
or
inc
jmp
sub
fstp
push
dec
inc
aam
jne
push
ins
add
imul
ds
ins
mov
sub
xor
add
aaa
jge
jecxz
sub
ins
mov
jmp
out
jp
xor
addr16
inc
jmp
(bad)
jns
jne
ins
mov
cmp
add
mov
sub
jp
or
jae
imul
xor
jb
inc
xchg
mov
sub
inc
out
loopne
jns
push
mov
cmp
mov
jne
push
push
or
xor
cmp
test
xor
mov
xchg
push
fnstcw
sbb
mov
aaa
cmp
mov
scas
push
mov
mov
and
ins
xor
mov
mov
jmp
iret
das
add
cmp
mov
imul
inc
xchg
jmp
out
jp
xor
addr16
cmp
push
je
in
xor
ins
push
fs
loopne
xor
imul
leave
bnd
les
cmp
xor
push
add
cmp
mov
jne
push
ins
add
addr16
mov
push
jb
mov
enter
loop
and
cmp
push
fstp
imul
ds
jo
inc
shr
stos
fdivr
jmp
sbb
clc
cmp
mov
or
std
call
lea
call
lea
das
push
je
inc
xor
mov
fdivr
arpl
into
(bad)
xor
mov
mov
xor
or
inc
xchg
aam
mov
cmp
mov
or
fist
push
xor
xchg
pop
and
inc
sub
nop
mov
sub
inc
push
sub
movs
in
cs
xchg
add
mov
xchg
mov
mov
in
das
mov
jns
sub
stc
int
cmp
inc
into
xor
add
mov
or
jne
push
popf
into
mov
jmp
movs
ins
mov
cmp
dec
ss
loopne
or
imul
sar
aad
xor
jno
inc
jmp
jns
add
add
dec
push
in
xor
pop
mov
into
mov
imul
shl
jb
jl
jle
inc
xchg
lea
mov
mov
into
mov
in
jle
inc
xchg
or
jae
push
outs
out
inc
xchg
lea
cmp
push
mov
sub
outs
mov
sbb
push
xchg
jb
das
rcl
add
aaa
or
sub
xor
xchg
jb
mov
imul
das
aaa
gs
sub
mov
inc
xchg
mov
xor
aam
mov
xchg
jb
mov
imul
mov
xchg
shr
push
mov
imul
ret
jb
mov
sbb
push
xchg
jb
pop
imul
scas
dec
sbb
mov
ins
lea
mov
sbb
push
xchg
jb
pop
imul
scas
cmp
mov
xchg
jb
mov
jmp
jb
mov
sbb
mov
xchg
jb
aas
mov
into
inc
xchg
mov
sub
into
inc
loopne
lock
jg
shr
int
xor
jns
inc
xchg
mov
xor
int3
aam
mov
push
cmp
call
lea
daa
popf
(bad)
into
inc
pop
pop
mov
inc
cmp
jecxz
(bad)
into
mov
jmp
push
in
xor
imul
inc
fcom
inc
xchg
gs
xchg
jb
jle
add
inc
pusha
dec
inc
fsubr
sub
xor
or
jae
xchg
add
jnp
(bad)
lock
imul
cmp
jne
inc
xchg
clc
cmp
call
lea
call
lea
loopne
xor
jns
xor
in
or
jg
stos
lea
mov
cdq
lea
int3
fbstp
inc
adc
into
inc
imul
sbb
xchg
lea
sub
fiadd
xor
ins
stc
test
imul
push
pop
aad
mov
imul
xor
jge
adc
sub
into
inc
jmp
xor
jns
inc
xchg
dec
sar
imul
ror
gs
mov
inc
xchg
push
movs
dec
xchg
jnp
(bad)
mov
jnp
(bad)
xor
xchg
mov
cmp
into
aas
popf
(bad)
into
inc
call
jb
mov
xchg
mov
sub
into
inc
imul
jae
sub
into
xor
lea
mov
xchg
jb
js
mov
xor
adc
mov
mov
into
xor
adc
repz
push
mov
inc
loop
xchg
fs
jb
das
std
push
into
inc
push
mov
inc
loopne
popf
gs
jb
aas
mov
or
gs
jb
cmps
in
mov
jb
inc
fcom
inc
xchg
gs
imul
lea
jb
stc
loop
cmc
gs
jb
aas
fst
inc
push
jb
pop
mov
inc
imul
aaa
call
into
inc
test
cmp
gs
jb
push
fistp
imul
inc
ins
stc
test
imul
xor
in
out
inc
xchg
cmps
mov
xor
add
sub
fiadd
dec
sar
clc
int
xor
jns
inc
xchg
in
stos
imul
and
or
imul
xor
xchg
jb
or
mov
mov
jmp
or
mov
in
jns
inc
xchg
push
and
mov
sub
imul
sbb
and
gs
jb
xor
imul
bnd
add
cmp
clc
das
xor
mov
iret
jge
sar
mov
xor
mov
into
pusha
ret
fidiv
mov
sub
out
inc
xchg
dec
sar
mov
into
cmp
cs
inc
xchg
mov
or
mov
mov
loop
add
imul
mov
inc
or
dec
add
inc
push
call
mov
into
enter
sbb
cmp
mov
jmp
xchg
dec
ss
imul
xor
jmp
lea
mov
push
mov
mov
jmp
lea
mov
mov
push
into
inc
pusha
dec
dec
pop
jmp
xchg
ds
jle
inc
xchg
(bad)
lgs
inc
xchg
cmp
gs
jb
int3
nop
jb
cmp
push
into
inc
imul
fiadd
lea
inc
test
xor
mov
fdivr
and
mov
inc
xchg
add
stos
xchg
or
push
xchg
jb
pop
popf
(bad)
into
inc
imul
jae
and
dec
xchg
mov
xchg
shr
push
mov
imul
push
stos
fdivr
jmp
popa
dec
je
stc
ret
jg
rcr
push
inc
loopne
std
xor
mov
into
aam
xor
js
xor
xchg
add
xchg
stos
add
inc
in
jmp
clc
imul
push
in
loopne
pop
sbb
imul
mov
xchg
stos
add
inc
jmp
enter
fwait
mov
inc
push
leave
and
sbb
mov
xchg
mov
mov
enter
lock
stos
sbb
xlat
xchg
mov
je
imul
cmp
leave
and
data16
call
mov
imul
(bad)
fist
enter
into
xor
jmp
inc
push
add
cmp
stc
cmp
xchg
mov
jne
(bad)
ins
or
xchg
push
clc
cmp
inc
ins
clc
xor
mov
into
xor
push
or
xor
cmp
ds
mov
mov
lahf
into
xor
xchg
mov
(bad)
xchg
cmp
cmp
inc
scas
enter
fwait
mov
inc
push
leave
and
sbb
mov
xchg
mov
mov
enter
lock
sbb
call
enter
inc
mov
inc
cmp
xchg
lea
mov
xchg
mov
or
jb
in
inc
repnz
loopne
pusha
jmp
popa
xor
aaa
lea
dec
mov
inc
loopne
pop
inc
imul
xor
cwde
push
stc
inc
sub
enter
aas
cmp
ins
iret
outs
dec
jne
push
push
into
mov
xor
loopne
mov
pusha
fbstp
mov
add
xor
xchg
push
into
inc
loopne
mov
iret
popa
add
or
(bad)
pop
loopne
leave
gs
jb
jge
or
pop
xchg
jb
push
lea
mov
lahf
add
xchg
xchg
add
in
inc
repnz
loopne
pusha
in
(bad)
sbb
jmp
push
clc
imul
xor
imul
enter
in
dec
xor
add
int
call
lea
add
xor
imul
xor
xchg
clc
cmp
fbstp
mov
xchg
clc
daa
cmp
xor
outs
push
je
jmp
mov
aas
out
in
adc
cmp
gs
call
xchg
xor
(bad)
pop
loopne
lds
scas
out
cmp
xor
popa
push
je
loopne
rcl
je
loopne
rol
bound
jno
push
lock
mov
imul
int
aaa
(bad)
clc
jns
add
jmp
fisub
(bad)
jmp
ficom
lea
shr
mov
imul
xor
add
idiv
xchg
jb
mov
call
lea
add
(bad)
call
gs
cmp
mov
iret
nop
add
shr
fs
cmp
into
iret
gs
and
lea
shr
je
cmp
xor
cdq
outs
jae
aas
gs
push
inc
fdiv
mov
imul
call
lea
mov
stos
fdivr
in
(bad)
add
sbb
(bad)
rcl
xor
imul
pop
mov
add
inc
mov
cmp
div
xchg
mov
xor
mov
jp
mov
pop
mov
imul
and
and
aas
gs
jmp
xor
add
inc
loopne
add
shr
stos
fdivr
jmp
popa
dec
je
mov
clc
int
lea
mov
add
push
lock
iret
gs
pop
sub
xor
sub
mov
out
xchg
in
pop
sub
xor
lods
popf
add
sahf
ds
xchg
popa
rcr
mov
imul
ins
mov
add
xchg
mov
cs
mov
jge
rol
jae
cmp
mov
enter
jne
call
enter
jno
in
inc
repnz
loopne
mov
jns
addr16
loop
cmp
sbb
idiv
xchg
xchg
sub
sbb
je
loopne
leave
xor
(bad)
fist
enter
outs
jae
and
ds
mov
rcr
mov
imul
(bad)
enter
pop
sub
xor
call
lea
in
(bad)
clc
jns
add
cmp
cmp
arpl
je
loopne
push
jge
outs
xor
jmp
mov
pop
push
mov
imul
pop
call
lea
mov
jno
mov
cli
imul
bound
add
mov
enter
leave
xor
jmp
(bad)
xchg
pop
loopne
mov
jmp
pop
mov
mov
(bad)
loopne
mov
cli
imul
or
jae
or
mov
cmp
or
xor
xor
or
dec
inc
imul
xor
mov
cmp
mov
cmp
xchg
mov
lea
mov
fcom
mov
dec
xor
lea
jl
loopne
sbb
test
shl
sub
xor
lea
test
ds
popa
add
(bad)
shl
lea
je
data16
loop
cmp
mov
enter
(bad)
clc
jns
sbb
mov
shl
mov
mul
sbb
in
dec
mov
xchg
stc
sbb
mov
sub
sbb
mov
sub
sbb
mov
(bad)
stc
sbb
mov
mov
rcr
clc
imul
mov
cmps
stc
sbb
mov
jp
sbb
mov
push
stc
sbb
mov
push
loopne
int3
inc
stos
in
mov
fld
aad
sub
sbb
jno
stc
mov
mov
sub
push
jns
stc
sbb
mov
sub
sbb
mov
sub
sbb
mov
mov
sbb
mov
sub
sbb
mov
or
into
mov
out
xor
cmp
mov
mov
xor
sbb
mov
add
outs
sub
sbb
xor
stc
sbb
mov
cli
imul
mov
push
cmp
mov
sub
sbb
mov
sub
sbb
sbb
pop
mov
xor
sbb
mov
mov
jmp
call
rcr
clc
imul
mov
push
cmp
mov
sub
sbb
mov
sub
sbb
add
pop
mov
xor
sbb
mov
sub
sbb
or
cmp
aam
test
ins
mov
enter
enter
jno
fucomp
repnz
xchg
cwde
es
sub
mov
push
sahf
call
mov
call
lea
mov
cmp
dec
xchg
jb
xor
enter
mov
xor
mov
xchg
lea
enter
cmps
(bad)
lea
xor
xor
cmp
je
imul
enter
je
lock
xor
mov
xchg
jmp
xor
cmp
mov
ror
mov
mov
xchg
popf
mov
mov
popf
ds
ja
jo
popf
mov
lea
dec
or
mov
inc
add
xor
sub
popa
push
cmp
xor
cmp
mov
fwait
add
cmp
popa
xor
lods
jle
imul
int
stos
mov
mov
outs
jmp
call
lds
jl
mov
xchg
jb
in
inc
repnz
loopne
mov
push
fisub
xlat
jp
and
ror
je
loopne
fnstenv
lea
jp
add
dec
or
jbe
sti
xor
fcomp
xor
push
mov
pop
sub
icebp
push
and
shr
xchg
clc
cmp
jne
inc
jmp
mov
mov
xchg
xchg
loop
or
aam
xor
sub
dec
push
add
xchg
mov
xor
mov
or
aam
xor
adc
inc
cmps
imul
cmp
mov
imul
mov
jno
stc
pop
sub
xor
cwde
loope
sub
xor
dec
mov
xchg
mov
mov
imul
xor
xor
dec
mov
xor
clc
imul
mov
sub
call
mov
pushf
shl
loop
loope
fidiv
js
cmp
jnp
popf
cmp
mov
pop
sub
xor
sub
fldcw
lea
xor
ds
ficomp
pop
jns
out
push
push
mov
imul
shr
in
pop
sub
icebp
pop
sub
xor
mov
enter
add
dec
pop
jb
dec
mov
xor
clc
imul
mov
sub
out
mov
enter
add
mov
mov
je
loop
in
pop
sub
sar
mov
aam
xor
loopne
xor
cmp
outs
mov
clc
imul
xor
gs
gs
cmc
pop
sub
loopne
loop
movs
pop
aam
xor
fs
mov
imul
xor
clc
xor
mov
enter
push
xor
cmp
inc
xchg
jb
jle
out
shr
xor
imul
xor
xchg
clc
cmp
les
mov
imul
inc
pop
cmp
pop
add
xor
imul
jmp
imul
pop
call
lea
xor
test
fnsave
mov
sub
mov
mov
loopne
fchs
and
rcl
add
dec
or
je
xchg
mov
dec
mov
sub
xor
jb
inc
xchg
dec
je
push
shl
cmp
pop
jl
jns
mov
inc
outs
dec
enter
mov
cmp
jb
inc
xchg
or
je
push
test
scas
or
inc
xchg
jb
push
cwde
(bad)
xor
push
mov
inc
xchg
mov
into
inc
pop
add
dec
pop
push
xchg
jb
xor
jb
jmp
les
lea
cmp
icebp
imul
pop
mov
sub
mov
xchg
jb
jmp
mov
xchg
jb
xor
jb
mov
add
fldcw
lea
shr
mov
xchg
jb
jmp
leave
pop
sub
into
inc
or
dec
xchg
jb
push
xor
xor
sub
jae
in
into
inc
xchg
jb
push
cmp
xor
loopne
mov
inc
cmp
in
pop
sub
into
inc
cmp
xor
imul
repnz
sub
xor
in
jb
inc
xchg
fstp
imul
pop
pop
sub
xor
imul
mov
call
lea
xor
loopne
pusha
jmp
stos
xchg
or
push
faddp
xor
sub
xor
in
leave
jmp
pop
test
xor
imul
inc
mov
clc
cmp
les
mov
loopne
mov
cli
jmp
je
call
out
shr
inc
stos
xchg
clc
int
movs
les
mov
enter
ss
jns
add
jmp
xor
cli
sub
call
cdq
fst
lea
shr
into
iret
jge
inc
stos
xchg
clc
cmp
mov
xor
lods
xchg
outs
jae
fdivr
loopne
lods
mov
or
xor
in
and
inc
sbb
into
iret
popa
gs
mov
jno
ins
jns
add
jmp
fimul
cmp
add
add
out
shr
xor
add
inc
mov
lea
imul
mov
sbb
pop
mov
sbb
fldcw
test
jno
pop
and
and
xchg
mov
xor
pop
jns
imul
push
jns
xor
mov
push
adc
sbb
mov
jge
mov
xor
add
in
mov
xchg
clc
cmp
and
lea
mov
stc
xor
aaa
sub
popa
in
add
and
jno
xor
lea
mov
stc
cmp
fsub
lea
mov
jno
loopne
lea
mov
enter
add
dec
mov
dec
loopne
outs
in
dec
xor
pop
cld
shl
mov
jge
mov
ins
sub
sahf
(bad)
imul
leave
cmp
sub
ins
sub
push
mov
lea
imul
push
pop
sub
xor
xchg
pop
jae
call
lea
jp
mov
jp
fwait
into
(bad)
xchg
pop
jae
cmp
inc
or
mov
rcl
rcl
test
sar
imul
pop
cmp
addr16
loop
cmp
bound
loope
lea
cmp
cmp
pop
push
je
loopne
sbb
add
mov
jns
repnz
mov
mov
test
push
sbb
dec
jbe
push
mov
iret
stos
push
dec
mov
stc
adc
iret
ja
leave
bnd
cwde
mov
mov
loopne
int
stos
push
je
sub
xor
gs
imul
cmp
xchg
mov
jmp
xor
loopne
int
stos
push
je
push
dec
fidiv
loopne
int
stos
shr
mov
push
(bad)
xor
idiv
cdq
rol
ficom
je
jge
xor
imul
div
je
xor
sub
mov
out
cdq
mov
xchg
pusha
dec
inc
mov
cmp
xor
ja
sbb
inc
pop
cmovp
(bad)
(bad)
data16
cmp
mov
sahf
je
ins
jmp
mov
es
cmc
hlt
sahf
outs
lock
push
fs
loopne
mov
or
mov
loopne
iret
xor
sbb
je
data16
enter
push
je
add
mov
shr
stos
fdivr
mov
imul
mov
jns
sub
inc
xchg
jb
cmp
popa
into
inc
xchg
lea
cmp
mov
fadd
inc
xchg
push
cmc
mov
dec
mov
loope
xor
pop
dec
fadd
aam
into
inc
xchg
lea
gs
imul
inc
scas
adc
bound
lea
mov
xchg
jb
aas
mov
xor
inc
xchg
jb
pop
mov
int3
inc
pop
push
movs
outs
xchg
jo
aaa
aad
xor
sub
clc
imul
arpl
in
pop
into
inc
xchg
add
inc
sbb
pop
mov
push
iret
xor
imul
inc
xchg
add
xor
int3
inc
loopne
mov
xchg
int
xchg
inc
inc
loopne
pop
mov
sbb
inc
xchg
jb
inc
cmp
jbe
jb
jle
in
pop
sub
ss
imul
into
setne
inc
sbb
mov
cmp
cmp
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
jmp
mov
popa
gs
mov
lea
and
lock
enter
out
xor
cmp
mov
jae
in
add
fxch
sub
xor
lods
popf
mov
jns
fnsave
xor
mov
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
jmp
mov
popa
in
pop
sub
iret
inc
adc
cmc
mov
xchg
je
imul
dec
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
jmp
mov
popa
gs
lea
and
lock
leave
xor
imul
inc
xchg
jae
in
add
fldenv
xor
lods
popf
into
iret
dec
in
pop
sub
iret
inc
cmp
adc
lea
test
xor
mov
jmp
(bad)
imul
mov
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
add
test
mov
xor
jno
inc
xchg
gs
(bad)
imul
mov
sahf
je
inc
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
cmp
test
mov
xor
jno
inc
xchg
gs
(bad)
imul
xor
leave
xor
imul
(bad)
dec
gs
imul
arpl
aam
into
inc
xchg
ficomp
mov
xor
sbb
jb
imul
dec
nop
fistp
mov
xor
aam
into
inc
xchg
fcmovu
push
sub
into
inc
xchg
(bad)
iret
jns
mov
xchg
jae
jmp
fldcw
lea
cmp
lea
add
xor
xchg
mov
sub
push
mov
nop
fistp
inc
ds
pop
sub
xor
mov
outs
mov
inc
loopne
(bad)
sub
xor
xchg
mov
jge
clc
imul
push
in
xor
and
xor
imul
(bad)
jp
cli
pop
sub
iret
inc
and
cmc
mov
test
cmp
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
imul
xor
(bad)
ins
jae
xchg
clc
and
inc
xchg
fstp
mov
xor
xor
scas
adc
mov
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
lea
clc
imul
mov
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
ins
sub
fldcw
sub
xor
xchg
mov
or
push
mov
nop
fistp
inc
ds
pop
sub
xor
adc
xor
imul
into
mov
imul
mov
imul
inc
xchg
add
cmp
xor
inc
xchg
(bad)
fcmove
loop
icebp
inc
xchg
jb
aas
aad
int3
inc
push
or
inc
xchg
jb
shl
xor
inc
xchg
jb
pop
aad
int3
inc
cmp
mov
sahf
je
js
fistp
mov
lods
ret
(bad)
pop
test
xor
cld
cmp
inc
xchg
add
cmp
lea
inc
xchg
ficomp
mov
xor
aam
xor
fcmovu
sub
into
aas
aad
int3
inc
call
jb
mov
xchg
cmp
inc
xchg
jb
iret
jno
mov
imul
inc
xchg
jb
ror
gs
sti
imul
xor
int3
xor
imul
(bad)
jp
ins
pop
sub
iret
inc
sub
jo
imul
dec
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
sti
imul
mov
sahf
je
inc
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
in
sub
mov
test
lea
mov
xchg
jb
aas
xchg
jb
inc
push
or
inc
xchg
jb
cmp
jae
inc
loopne
fld
jb
dec
xchg
in
mov
imul
leave
inc
xchg
jb
cmc
push
lea
inc
xchg
lea
sub
jecxz
lea
jb
lea
aas
xchg
jb
inc
pushw
jge
imul
fld
jb
iret
jge
push
aas
popf
jb
inc
cmp
cli
imul
into
cmp
mov
iret
nop
add
fsub
xor
inc
xchg
jb
bound
mov
mov
fimul
repz
xchg
jb
ds
jns
inc
xchg
fstp
or
xor
in
jns
inc
xchg
fstp
sbb
mov
inc
xchg
cmp
inc
xchg
jb
iret
jno
test
jo
xor
jno
inc
xchg
fstp
mov
xor
cmp
jno
imul
dec
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
imul
xor
mov
mov
imul
(bad)
jp
cli
pop
sub
iret
inc
add
push
mov
imul
pop
dec
mov
xor
jno
inc
xchg
rol
popa
jb
dec
xchg
jo
push
cmp
lds
jb
bound
jb
inc
loopne
mov
inc
cmp
inc
xchg
jae
in
add
leave
inc
xchg
jb
jp
or
mov
xor
jno
inc
xchg
gs
jle
or
ficom
xor
mov
mov
imul
(bad)
jp
ins
pop
sub
iret
inc
sub
cmc
mov
lods
push
mov
imul
pop
jno
iret
xor
jno
inc
xchg
gs
test
mov
popa
gs
lea
and
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
mov
lods
test
mov
xor
jno
inc
xchg
gs
mov
popa
add
xchg
mov
repnz
aam
xor
imul
(bad)
dec
gs
lea
and
jno
inc
xchg
ficomp
mov
xor
and
bts
mov
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
test
mov
popa
gs
test
mov
sahf
je
inc
ins
lock
mov
cmp
inc
xchg
jb
cmp
xor
lods
test
test
xor
arpl
enter
dec
test
imul
push
xor
xor
adc
imul
mov
ins
lock
mov
mov
imul
inc
xchg
jae
in
add
fld
xor
lods
popf
pop
xchg
mov
xor
jno
inc
xchg
gs
mov
popa
gs
xchg
mov
sahf
je
inc
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
push
push
lea
cmp
lea
dec
mov
jp
jo
xor
(bad)
into
setne
inc
add
mov
or
imul
dec
nop
push
retf
mov
mov
xor
jno
inc
xchg
gs
xchg
mov
popa
in
pop
sub
iret
inc
sbb
push
mov
in
xor
inc
xchg
add
push
push
mov
mov
imul
(bad)
jp
rcr
into
setne
inc
adc
cmc
mov
or
inc
xchg
jb
xor
jno
inc
xchg
fstp
mov
xor
adc
or
mov
nop
push
retf
mov
mov
xor
jno
inc
xchg
sub
popa
in
pop
sub
iret
inc
add
stos
mov
push
lea
add
xor
xchg
mov
jge
clc
imul
push
mov
xor
lock
mov
imul
jge
stos
xor
xchg
jae
in
add
clc
imul
xor
lods
popf
(bad)
push
lea
add
xor
xchg
mov
jge
clc
imul
push
in
xor
arpl
mov
inc
loopne
pop
fs
xor
jno
inc
xchg
gs
xchg
mov
popa
gs
xchg
mov
sahf
je
inc
ins
lock
cdq
outs
jae
xchg
cmp
inc
xchg
jb
cld
push
lea
cmp
lea
add
xor
xchg
mov
jge
mov
imul
iret
inc
ds
pop
sub
xor
mov
cmp
inc
xchg
jb
inc
push
lea
cmp
lea
add
xor
xor
mov
xchg
jo
xor
jb
inc
xchg
jae
push
xchg
mov
mov
popf
jb
inc
ds
setne
inc
xchg
cmp
inc
xchg
jb
ins
push
lea
inc
fsub
inc
xchg
gs
lea
into
setne
inc
adc
sub
aas
test
inc
shr
stos
fdivr
mov
inc
repz
loopne
add
dec
idiv
xchg
(bad)
fiadd
loopne
ds
jb
shl
push
jae
in
into
inc
xchg
jb
push
inc
mov
mov
mov
xor
in
jb
inc
xchg
fstp
imul
sub
xor
or
mov
imul
pop
mov
fdivr
inc
add
clc
imul
pop
push
mov
xor
push
xor
sub
cmc
call
outs
jae
fdivr
mov
xor
sar
inc
sahf
push
aas
jmp
dec
mov
cmc
jo
inc
imul
xor
push
jb
xor
xor
xchg
jb
xor
cmc
int3
inc
xchg
add
mov
dec
mov
ins
fcmovnu
add
lea
xor
jae
cld
sub
fst
pop
lea
xor
stc
int3
inc
xchg
jb
sbb
xor
in
int3
inc
xchg
add
ins
add
push
jo
inc
loopne
add
dec
addr16
sbb
xor
xchg
jb
bswap
jo
inc
sub
mov
xchg
jb
inc
fcom
bound
popa
push
mov
aaa
cmp
loope
inc
xchg
add
push
iret
mov
inc
call
lea
mov
xor
mov
movs
inc
xchg
jb
dec
repnz
mov
in
xchg
inc
xchg
jb
push
sbb
xor
imul
xor
ins
mov
mov
xchg
jb
rol
push
jae
add
out
clc
imul
fstp
jb
cmp
sahf
addr16
jo
xor
imul
mov
xchg
jb
inc
pop
jne
jge
mov
mov
xchg
jb
jmp
popa
push
mov
cmp
psubw
inc
xchg
cmp
psraw
inc
xchg
cmp
bswap
jo
inc
aas
add
and
lods
inc
xchg
jb
jp
and
mov
fmul
lea
ror
push
jae
in
int
xchg
jb
push
js
xor
imul
mov
xchg
jb
jmp
adc
jo
inc
call
lea
add
into
inc
cmp
sub
jle
or
xchg
ins
lea
jge
xor
xor
xchg
jb
mov
scas
or
inc
xchg
jb
mov
xchg
jb
into
jne
idiv
xor
inc
inc
jne
jge
or
push
movs
(bad)
into
inc
xor
mov
xchg
jb
jmp
popa
shr
xor
dec
out
shr
xor
in
jno
inc
xchg
fstp
adc
icebp
mov
outs
xor
xchg
jb
push
jo
xor
imul
inc
xchg
add
inc
fcomp
int3
inc
xchg
in
pop
sub
xor
in
jno
inc
xchg
fstp
mov
lods
popf
idiv
add
inc
imul
xor
jb
jmp
dec
(bad)
jns
dec
inc
mov
imul
aas
add
inc
push
jb
xchg
mov
stc
shr
xor
imul
into
mov
cdq
lea
push
clc
mov
xor
xchg
jb
jmp
pop
mov
imul
into
jmp
cmc
mov
jb
mov
int3
adc
inc
xchg
(bad)
fisubr
jb
cmp
ss
adc
inc
xchg
lea
cmp
mov
mov
add
xor
imul
fst
fsubr
int3
inc
xchg
cmp
cmc
jo
inc
add
aas
add
inc
loopne
outs
in
inc
repz
jmp
out
xor
jmp
inc
push
clc
cmp
mov
push
xor
mov
(bad)
shl
xchg
clc
cmp
mov
cmp
into
iret
jns
mov
mov
dec
cmp
mov
mov
dec
data16
cmp
pop
ds
data16
leave
and
dec
mov
mov
lea
dec
mov
dec
loopne
add
lock
xor
mov
push
mov
movs
pop
lea
cmp
add
cmp
mov
adc
iret
add
ins
int
push
in
mov
and
sub
fmul
aaa
sub
loope
mov
sub
mov
or
data16
leave
and
imul
je
loopne
mov
mov
sub
fld1
pop
lea
xor
lea
mov
cmp
fnstenv
lea
xor
imul
call
dec
xor
fldcw
xor
aas
fidivr
xchg
mov
inc
push
push
aas
shr
inc
loopne
idiv
aad
into
inc
sub
lea
jb
aaa
in
dec
rol
fstp
mov
xor
mov
cmp
or
dec
ins
mov
mov
mov
push
cmp
mov
clc
sub
inc
rol
jb
mov
add
leave
xchg
xchg
add
mov
or
movs
imul
mov
mov
jmp
cmp
mov
mov
jle
jb
push
cld
mov
cmp
fadd
inc
xchg
jb
mov
mov
ficomp
test
daa
add
mov
jge
shr
stos
fdivr
mov
imul
inc
ins
push
or
cmp
shl
ficomp
push
mov
mov
xchg
int
xchg
inc
inc
loopne
pop
mov
push
xor
gs
add
add
mov
cmp
jae
cmp
mov
mov
popa
add
dec
pop
dec
mov
into
xor
jns
inc
xchg
add
shl
ins
jae
in
xor
jb
push
and
xor
inc
mov
xor
jmp
pop
sub
into
inc
cmp
mov
mov
popa
gs
mov
sahf
je
inc
ins
lock
mov
xor
cmp
mov
add
out
clc
imul
into
in
and
stos
add
mov
nop
push
retf
mov
mov
xor
in
(bad)
rol
fstp
push
pop
lea
cmp
mov
mov
imul
into
jmp
cmc
mov
add
mov
imul
pop
dec
mov
xor
in
(bad)
rol
fstp
adc
xor
lods
test
fcomp
xor
arpl
enter
dec
xchg
sbb
push
mov
nop
fistp
ds
sub
into
inc
ds
imul
sar
imul
into
jmp
mov
mov
jmp
cmc
scas
loopne
sbb
dec
fnstcw
arpl
enter
dec
scas
add
clc
imul
into
jmp
cmc
mov
xchg
clc
imul
into
jmp
cmc
mov
inc
add
imul
pop
dec
mov
xor
in
(bad)
rol
fstp
pop
pop
lea
cmp
iret
xor
in
(bad)
rol
fstp
push
lods
test
jl
add
cmp
nop
push
retf
mov
pop
lea
add
lea
mov
in
xor
jb
shl
push
jae
in
xor
jb
push
add
xor
inc
ins
jae
in
xor
jb
push
adc
xor
push
mov
xor
jmp
pop
sub
into
inc
cmp
mov
mov
popa
xor
(bad)
pop
loopne
shl
mov
clc
imul
into
jmp
cmc
mov
jge
mov
imul
pop
dec
mov
xor
in
(bad)
rol
fstp
mov
lea
cmp
iret
xor
in
(bad)
rol
fstp
inc
pop
lea
cmp
in
xor
imul
dec
nop
push
retf
mov
mov
xor
in
(bad)
rol
fstp
je
lea
cmp
add
add
mov
mov
jmp
cmc
stos
and
cmp
nop
push
retf
mov
mov
xor
in
(bad)
rol
fstp
xor
xor
lods
test
mov
xor
in
(bad)
rol
fstp
int3
pop
lea
cmp
lea
add
xor
xchg
mov
jge
clc
imul
into
jmp
cmc
mov
inc
xor
in
popa
out
inc
xchg
add
push
xchg
mov
xor
loopne
mov
jns
xor
mov
in
add
mov
and
stos
add
mov
nop
push
retf
mov
mov
xor
in
(bad)
rol
fstp
push
pop
lea
cmp
iret
xor
in
(bad)
rol
fstp
ins
pop
lea
cmp
imul
loopne
fnstcw
lea
add
xor
xchg
mov
jge
clc
imul
into
jmp
cmc
mov
in
add
imul
fxtract
pop
lea
add
lea
mov
in
xor
jb
shl
push
jae
in
xor
jb
push
sub
xor
mov
or
pop
xchg
jb
push
cmp
xor
imul
xor
imul
bound
mov
int
xchg
jb
jl
div
mov
xchg
jb
push
cmp
xor
xchg
push
into
inc
fnstsw
ds
inc
mov
into
push
inc
mov
int
xchg
jb
jl
lea
mov
jnp
scas
imul
mov
stc
mov
mov
loope
push
xchg
call
lea
inc
imul
mov
ficom
popa
add
push
jb
xor
or
inc
xchg
add
push
lock
xor
imul
xor
jmp
dec
pop
mov
aam
xor
xchg
jb
inc
sahf
push
aas
adc
dec
pop
stos
add
into
inc
cmp
xchg
imul
int3
inc
xchg
fstp
mov
xor
fst
mov
jmp
jb
jle
test
mov
pop
xor
imul
mov
xchg
jb
jmp
leave
mov
sub
mov
inc
cmp
inc
xchg
jb
jle
test
mov
sbb
mov
sub
into
inc
cmp
xchg
imul
mov
xchg
jb
jmp
mov
aas
icebp
jo
inc
call
lea
add
into
inc
cmp
xchg
imul
(bad)
pop
loopne
dec
inc
xchg
jb
jge
or
mov
lea
inc
push
xor
into
dec
jmp
aas
xor
fbld
xor
add
into
xchg
jb
xor
jb
jmp
mov
inc
cmp
mov
xchg
jb
jmp
pop
mov
in
int
xchg
jb
shr
push
xchg
imul
into
xadd
inc
and
mov
fsubr
and
lea
mov
xor
in
jno
inc
xchg
fstp
pusha
inc
lea
cmp
jbe
inc
imul
xor
std
retf
add
aaa
in
jno
inc
xchg
fstp
mov
xor
cmps
xor
sbb
pop
push
push
xor
cmps
xor
xchg
jb
xor
cli
retf
mov
enter
mov
xchg
xor
imul
xor
xchg
jb
in
cmp
imul
xor
push
lea
cmp
or
mov
inc
imul
mov
jmp
xchg
push
cmc
mov
dec
ds
xor
std
jo
inc
in
mov
push
sbb
inc
xchg
jb
inc
fcomp
int3
inc
xchg
gs
ins
xchg
jb
jl
hlt
inc
mov
in
std
retf
add
inc
fcomp
int3
inc
xchg
gs
nop
imul
xor
sub
xor
test
push
jae
adc
into
cmp
mov
jmp
xchg
jb
cmp
jb
cmp
or
push
pop
frstor
fcomp
int3
inc
xchg
gs
ins
xchg
jb
jle
or
sbb
lea
in
sub
into
mov
xchg
mov
mov
xchg
jb
jmp
xor
sub
inc
xchg
gs
imul
into
inc
loopne
into
bswap
jo
inc
and
into
in
(bad)
clc
js
lea
push
(bad)
xor
mov
sbb
and
inc
lea
xor
outs
xchg
imul
pop
cli
sbb
leave
xor
stos
xor
imul
fstp
cmp
leave
xchg
xchg
add
aaa
sub
popa
shr
pop
hlt
ss
shr
xor
movs
xor
aas
gs
imul
je
loopne
mov
push
cmp
xor
imul
(bad)
xor
push
stos
fdivr
mov
imul
leave
mov
jb
mov
mov
mov
lahf
clc
xor
xor
in
mov
lea
cmp
fst
xor
push
or
dec
xchg
jb
push
das
cmp
cmp
mov
add
xchg
imul
xor
rol
push
call
enter
pop
xor
add
mov
xor
sub
popa
push
mov
enter
lea
push
or
add
sub
mov
push
pop
inc
mov
xor
sub
popa
push
shl
aaa
sub
popa
shr
jb
imul
sbb
or
iret
mov
enter
or
inc
repnz
loopne
pusha
jmp
popa
xor
jno
jl
lea
add
pop
mov
add
xor
imul
and
movs
xor
ds
inc
pop
or
xchg
imul
lods
sti
imul
dec
sahf
imul
push
mov
fld
inc
lea
shr
pop
mov
(bad)
fnop
inc
lea
shr
pop
mov
(bad)
fchs
inc
lea
shr
pop
mov
(bad)
f2xm1
inc
lea
cmp
out
in
add
jo
cmp
into
(bad)
stc
cs
sub
into
(bad)
sbb
cdq
sbb
pop
lea
shr
pop
mov
(bad)
fld
xor
push
mov
fst
xor
push
mov
fldenv
xor
push
mov
fnstenv
xor
aaa
inc
repnz
(bad)
cmp
inc
add
mov
jb
push
hlt
int3
xor
stos
xor
imul
pop
inc
xchg
mov
fld1
dec
lea
rcl
iret
xor
stos
xor
imul
pop
inc
xchg
mov
fst
jb
xchg
test
push
jl
xor
imul
pop
inc
xchg
mov
fnstenv
xchg
movs
leave
xor
xchg
movs
cli
imul
mov
or
mov
jne
jno
sub
inc
pop
movs
scas
sti
imul
ret
xor
or
mov
inc
adc
xor
int
pop
lods
scas
sti
imul
xchg
lock
rol
jno
(bad)
mov
imul
nop
clc
imul
cmps
test
rol
jno
(bad)
in
sub
mov
imul
mov
jno
add
imul
dec
pop
dec
mov
xor
test
sbb
jb
xor
lea
lock
inc
jmp
mov
cld
stos
xor
imul
xor
pop
adc
add
sbb
popf
fnstsw
dec
cmp
xor
imul
pop
data16
xor
mov
mov
imul
dec
int3
xor
imul
shr
pop
xchg
enter
jge
push
or
cdq
pop
mov
lods
push
jae
add
clc
imul
xor
imul
shr
add
test
shr
add
leave
int3
xor
stc
mov
mov
sub
mov
or
cdq
pop
mov
or
jae
add
clc
imul
xor
imul
xor
imul
xor
imul
xor
add
pop
mov
push
mov
fnstcw
dec
lea
shr
add
test
shr
add
leave
int3
xor
jns
pop
mov
add
popa
rol
push
in
clc
imul
xor
imul
scas
sti
imul
xchg
sti
imul
xor
add
sub
lea
mov
xor
imul
sbb
iret
xor
xchg
jp
xor
mov
(bad)
pop
adc
add
jo
add
xor
leave
lea
mov
imul
in
clc
imul
xor
imul
scas
sti
imul
xchg
sti
imul
xor
imul
xor
add
in
clc
imul
pop
mov
imul
pop
mov
sub
push
sbb
lea
add
pop
adc
xor
jge
xor
mov
xor
in
push
jae
add
xor
adc
dec
(bad)
pop
shl
jb
imul
in
clc
imul
xor
sub
xor
imul
shr
add
leave
iret
xor
inc
mov
mov
imul
pop
data16
xor
in
push
jae
add
xor
jmp
(bad)
into
(bad)
pop
adc
add
jae
add
or
mov
imul
pop
data16
xor
in
push
jae
add
xor
inc
adc
xor
scas
sti
imul
xchg
sti
imul
xlat
mov
push
lea
jmp
jmp
sub
adc
sub
mov
shr
add
test
shr
add
leave
int3
xor
jns
mov
imul
xor
cmp
bound
lea
mov
xor
imul
into
enter
imul
shr
add
leave
int3
xor
jns
push
shl
xor
imul
pop
clc
mov
xor
mov
jae
add
xor
pop
adc
mov
pop
adc
add
jo
add
xor
pop
mov
mov
imul
in
clc
imul
xor
imul
scas
sti
imul
xchg
sti
imul
jnp
imul
xor
add
jmp
sub
adc
sub
add
mov
sub
xor
imul
in
pop
sub
xor
imul
mov
sub
add
mov
sub
xor
imul
mov
mov
imul
sub
dec
push
cdq
xor
pop
adc
add
jae
add
xor
imul
xor
lea
imul
mov
imul
scas
sti
imul
xchg
clc
imul
les
add
in
pop
sub
xor
imul
adc
xchg
mov
pop
mov
sub
xor
imul
shl
lea
mov
xor
imul
and
iret
xor
jne
inc
loopne
xor
dec
fldcw
nop
jb
in
inc
repnz
loopne
mov
jge
add
cmps
mov
imul
fprem
sahf
jb
xor
lea
pop
jp
inc
jmp
mov
imul
jge
(bad)
into
(bad)
popa
adc
sub
fldenv
sahf
xor
mov
pop
mov
xor
loop
int
sub
popa
xor
pop
mov
imul
in
clc
imul
fstp
xor
sub
(bad)
into
(bad)
pop
adc
add
je
inc
enter
jmp
and
jmp
jmp
sub
adc
sub
add
mov
sub
xor
sub
sbb
cdq
push
(bad)
cmp
pusha
sar
cmp
mov
xor
mov
jae
add
xor
or
pop
mov
add
pop
mov
imul
shl
and
mov
mov
xor
pop
jb
mov
lods
xor
pop
adc
add
jae
add
pop
fiadd
cdq
pop
scas
add
in
pop
sub
xor
imul
push
hlt
int3
xor
xchg
mov
dec
sub
xor
hlt
int3
xor
xchg
xor
imul
xor
sub
xor
push
sbb
inc
lods
add
xor
hlt
int3
xor
xchg
xor
add
xor
lods
sti
imul
mov
sub
push
sbb
lea
push
out
rcl
in
mov
mov
xor
in
push
jae
add
xor
jmp
jne
inc
loopne
pop
mov
sub
push
sbb
lea
push
out
rol
lea
mov
cmp
in
pop
sub
xor
imul
xchg
test
push
adc
inc
add
jo
add
jo
add
xor
pop
in
mov
imul
in
clc
imul
xor
imul
shr
add
test
shr
add
leave
int3
xor
jns
push
shr
lea
mov
imul
pop
clc
mov
xor
mov
jae
add
xor
pop
adc
mov
pop
adc
add
jo
add
xor
leave
lea
mov
imul
in
clc
imul
xor
imul
scas
sti
imul
xchg
sti
imul
mov
imul
in
clc
imul
pop
mov
imul
pop
mov
sub
jne
sub
xor
imul
dec
popa
sub
xor
imul
(bad)
enter
xchg
mov
xor
mov
xor
leave
xchg
sti
imul
xor
imul
xor
add
jmp
lea
or
sbb
lea
xchg
mov
pop
mov
sub
xor
jge
xor
retf
iret
xor
push
lea
mov
imul
add
test
shr
add
leave
iret
xor
jno
sbb
das
out
shr
mov
add
clc
imul
pop
mov
cmp
scas
sti
imul
shr
add
test
shr
add
leave
iret
xor
jno
push
shl
out
shr
mov
add
clc
imul
pop
mov
jl
xor
imul
scas
sti
imul
xchg
sti
imul
xor
imul
mov
add
clc
imul
pop
mov
imul
fnstcw
jb
push
mov
into
inc
call
lea
mov
push
frstor
and
movs
fst
fnstenv
xor
mov
cmp
xor
push
xor
push
xor
popa
gs
mov
jmp
mov
and
repnz
fcmovnu
js
lea
cmp
xor
jns
mov
cdq
fnstsw
xchg
(bad)
iret
jns
or
sub
mov
or
into
inc
jmp
xor
int
and
xor
jno
call
cmp
clc
cmp
les
xchg
mov
mov
adc
xor
je
xor
inc
cmp
stos
add
xor
enter
lods
xchg
outs
in
inc
repnz
loopne
mov
ins
mov
mov
fs
add
cdq
mov
test
in
xor
jb
push
add
sub
imul
dec
nop
add
xor
mov
xchg
mov
xor
mov
or
dec
inc
imul
shl
or
inc
xchg
jb
push
inc
xchg
xor
imul
cmp
xchg
jb
jmp
dec
inc
ins
clc
and
jge
jae
in
xor
jb
push
pushf
call
sbb
pop
mov
iret
xor
in
(bad)
into
inc
xchg
fstp
fs
xor
adc
aaa
iret
js
jp
sub
into
inc
cmp
lods
imul
into
mov
fmul
xor
in
(bad)
into
inc
xchg
fstp
adc
xor
adc
cmp
js
mov
sub
into
inc
cmp
lods
imul
cmp
add
xor
dec
inc
arpl
and
mov
jae
in
xor
jb
push
or
xor
loopne
int
xchg
jb
jl
lock
mov
pushf
pop
mov
in
(bad)
into
inc
xchg
fstp
clc
jle
xor
adc
cmp
or
lea
cmp
lods
imul
cmp
add
sbb
and
cmp
jae
in
xor
jb
push
xchg
fwait
xor
add
jmp
lea
cmp
xor
(bad)
fldcw
lea
rcl
jae
add
cmp
in
and
xchg
jb
shr
lea
mov
loopne
xor
dec
fmul
xor
imul
addr16
loop
cmp
shl
(bad)
xor
mov
push
cld
xchg
xor
ds
mov
lods
test
jp
test
ds
mov
xor
imul
sbb
in
xor
(bad)
jecxz
dec
inc
jge
jl
jge
dec
loopne
pop
enter
aaa
in
pusha
mov
fld
mov
xor
imul
inc
xchg
jb
pop
call
rol
aas
jae
in
fmul
jb
push
fs
xor
imul
inc
xchg
add
cmp
jle
inc
xchg
pop
dec
cmp
add
sub
dec
xchg
jb
mov
fcmovne
xor
in
pusha
mov
fnstenv
lea
cmp
jle
inc
xchg
mov
mov
push
sahf
jb
jmp
mov
jb
mov
fcmove
xor
in
pusha
mov
fldcw
lea
xor
ins
mov
idiv
aam
leave
inc
xchg
mov
mov
mov
sahf
jb
jmp
mov
jb
mov
fcmove
xor
in
pusha
mov
fldlg2
jl
xor
aam
leave
inc
xchg
test
loope
clc
imul
into
jmp
ror
mov
sahf
jb
xor
jb
mov
pushf
pop
xor
iret
xor
in
pusha
mov
fldcw
jle
inc
xchg
xchg
daa
cmp
add
xor
dec
xchg
jb
mov
pushf
pop
jae
iret
xor
in
pusha
mov
fstp
lea
cmp
jle
inc
xchg
add
add
add
ins
adc
leave
inc
xchg
add
test
imul
into
jmp
mov
jb
mov
pushf
pop
call
mov
fnstenv
sub
fmul
jb
push
imul
call
lea
leave
iret
xor
out
jae
and
stos
loopne
(bad)
jb
pop
call
cmp
mov
ds
xor
loopne
mov
jmp
mov
imul
jle
add
push
xchg
jb
mov
xor
(bad)
xor
xchg
jb
mov
xor
xchg
jb
and
mov
xchg
jno
inc
push
xor
jb
inc
xchg
lea
jl
or
inc
xchg
jb
rcr
mov
xchg
jb
push
hlt
xchg
xor
aam
leave
inc
xchg
lea
adc
repnz
test
fstp
mov
inc
jbe
sti
xor
mov
inc
xchg
jb
mov
mov
or
hlt
int3
xor
enter
inc
push
jae
in
int
xchg
jb
push
pop
xchg
xor
imul
jae
in
int
xchg
jb
push
jl
xor
sub
xor
xchg
jne
inc
cmp
scas
imul
int
xchg
jb
sar
jae
in
int
xchg
jb
push
mov
jmp
jb
jmp
cmc
scas
in
int
xchg
jb
push
push
cwde
xor
xchg
jb
jp
fnstsw
cmp
retf
pusha
sub
into
inc
cmp
lods
imul
leave
inc
xchg
fstp
jo
lea
shr
lds
lea
cmp
es
jb
jle
test
mov
fidiv
mov
xchg
jb
cmp
call
xchg
jb
xor
push
mov
jb
mov
or
mov
xchg
jne
inc
add
aam
sub
into
inc
cmp
lods
imul
mov
inc
cmp
test
lea
cmp
scas
imul
mov
inc
jmp
jb
xchg
sbb
mov
inc
scas
or
xchg
jb
mov
mov
into
inc
jmp
int
or
add
fdiv
inc
xchg
add
add
clc
imul
into
jmp
cmc
stos
in
int
xchg
jb
push
pushf
sahf
xor
xchg
jb
pop
xchg
jae
inc
ds
mov
icebp
ss
ds
push
js
xor
xchg
jb
aas
xchg
jne
inc
cmp
dec
xchg
jb
push
les
inc
xchg
jb
push
les
int
xchg
jb
xor
jns
inc
xchg
add
push
lea
cmp
add
add
into
inc
add
inc
cli
imul
mov
push
ins
lahf
xor
xchg
jb
jmp
xchg
jb
cmp
mov
aas
inc
jo
inc
xchg
cmp
inc
xchg
jb
xor
lea
cmp
in
int
(bad)
(bad)
jl
xor
add
xchg
shr
mov
add
add
popa
and
shl
repnz
xor
in
or
lea
add
test
lea
inc
pusha
dec
inc
mov
gs
stos
imul
mov
and
xor
mov
test
xor
int3
xor
imul
and
imul
xor
imul
xor
adc
mov
fsub
inc
cmp
mov
jno
mov
stc
sub
mov
xchg
jb
push
pop
pop
into
inc
jmp
mov
imul
adc
(bad)
xor
stc
test
imul
test
jns
inc
and
test
jp
jnp
mov
inc
jbe
sti
xor
dec
jo
xchg
add
into
jl
fadd
mov
mov
add
rcr
fdivr
mov
inc
outs
dec
enter
mov
cmp
sbb
test
cmp
fadd
mov
inc
push
test
scas
or
push
cmp
(bad)
js
clc
aas
jl
and
inc
xchg
mov
into
inc
pop
add
mov
in
fadd
fstp
enter
movs
push
jae
in
scas
push
xchg
jb
push
pop
cdq
xor
mul
inc
cmp
mov
xchg
jmp
mov
test
jmp
mov
test
jmp
cmc
mov
loopne
pop
mov
xchg
jb
push
inc
pushf
xor
imul
inc
xchg
add
shr
jp
imul
jae
add
clc
imul
fld
lea
cmp
add
pop
mov
clc
imul
fmul
in
pusha
sub
xor
scas
push
jae
add
xchg
clc
imul
pop
inc
arpl
inc
in
ja
sub
xor
sub
jns
es
imul
pop
jl
iret
xor
dec
sbb
and
test
aaa
pop
or
adc
int3
in
pusha
sub
xor
scas
push
jae
add
sbb
sub
mov
jb
aaa
pop
dec
jmp
mov
call
lea
add
pop
mov
sub
xor
(bad)
fst
lea
xor
pop
mov
cmp
mov
lea
mov
lea
aaa
sub
popa
aaa
in
cmp
inc
xchg
fstp
fsub
xor
in
fiadd
push
stc
inc
sub
enter
inc
add
fnstsw
ds
push
and
aaa
sub
popa
shr
rcr
into
iret
frstor
mov
(bad)
idiv
shl
mov
cmp
mov
xchg
jmp
mov
cmp
mov
iret
nop
out
aaa
sbb
addr16
inc
sbb
fldenv
lea
shr
je
cmp
xor
cdq
outs
jae
xchg
clc
test
xor
xchg
clc
test
xor
loopne
add
dec
mov
mov
pop
adc
loopne
std
aaa
ins
push
dec
cli
imul
mov
mov
in
iret
ret
xor
fldenv
inc
loop
adc
mov
imul
xor
sub
xor
and
lea
adc
mov
imul
xor
sub
popa
push
rol
(bad)
pop
adc
add
pop
mov
add
shl
lea
mov
xor
imul
mov
std
cmp
pop
mov
imul
into
inc
jmp
mov
jmp
push
jae
cmp
popa
push
push
xor
loopne
popf
push
xchg
jb
les
lea
dec
mov
adc
fadd
add
push
mov
mov
cld
and
inc
xchg
dec
mov
xchg
mov
sub
imul
into
jmp
popa
rol
hlt
jmp
imul
pop
mov
repz
inc
jmp
cmp
clc
imul
xor
xchg
add
mov
in
and
pop
mov
sbb
xor
imul
xor
imul
xor
imul
pop
mov
lea
jmp
xor
popf
mov
mov
imul
aas
mov
sub
popa
push
test
xor
loopne
mov
add
lea
shr
xor
imul
push
imul
rep
imul
or
in
xor
jo
xor
xchg
popf
ds
mov
imul
push
stos
test
mov
imul
xor
push
sub
mov
imul
cmp
(bad)
xor
imul
test
imul
aas
test
inc
loopne
(bad)
pop
loopne
cmc
inc
xchg
jb
jge
popa
in
clc
imul
push
je
into
inc
jmp
inc
xchg
add
xchg
cmp
inc
xchg
jb
test
lea
mov
xor
in
inc
int3
inc
xchg
(bad)
(bad)
sub
jne
mov
push
push
mov
xchg
jb
xchg
in
push
int3
inc
xchg
push
fnstcw
xchg
jb
das
mov
pop
inc
movs
loop
aad
xchg
jb
aas
mov
into
inc
jmp
inc
xchg
cmps
movs
jbe
jb
cmp
mov
xchg
jb
xchg
in
push
int3
inc
xchg
fnstsw
inc
inc
or
inc
xchg
jb
shr
xor
leave
xchg
sti
imul
inc
inc
jne
jge
mov
push
sub
ss
sub
xor
xchg
mov
xor
iret
xor
sub
add
(bad)
xor
data16
inc
xor
xor
imul
xlat
inc
xchg
aam
shr
xor
xchg
mov
xor
popa
xor
xor
outs
lea
sbb
jo
push
enter
jb
mov
popf
cmp
imul
push
inc
mov
mov
in
jne
inc
xchg
or
les
sub
sub
sub
sub
sub
sub
sub
sub
sub
push
lea
shr
inc
stos
and
inc
xchg
jb
sub
sub
sub
rcr
popf
and
aam
xor
imul
mov
push
xor
int3
ins
int3
inc
xchg
lea
inc
imul
into
jmp
mov
xchg
jb
push
or
xor
dec
fsub
outs
lea
cmp
in
mov
push
jb
push
hlt
int3
xor
xchg
mov
xchg
jb
iret
dec
out
shr
bound
lea
sub
add
hlt
int3
xor
xchg
mov
imul
xor
mov
inc
xchg
add
into
jl
jnp
inc
xchg
lea
mov
imul
xor
jb
inc
pop
or
mov
lea
jmp
mov
ins
jmp
push
lea
cmp
sub
mov
inc
imul
jmp
imul
xor
sub
xor
mov
mov
loopne
mov
inc
cmp
mov
xchg
jb
jmp
mov
xchg
jb
jmp
cmc
stos
add
mov
xchg
jb
jmp
fld
xor
aam
into
inc
xchg
lea
lea
add
xor
xchg
mov
sub
xor
mov
mov
xchg
jb
jb
int
xchg
inc
inc
jmp
shr
(bad)
arpl
lea
cmp
xor
test
mov
imul
mov
in
(bad)
into
inc
xchg
pop
mov
push
mov
dec
call
call
push
pushf
test
mov
sub
xor
mov
mov
xchg
jb
xor
(bad)
into
inc
xchg
mov
enter
mov
in
mov
inc
xchg
fnstsw
cmp
sbb
sub
into
inc
cmp
mov
lea
mov
push
jb
cmp
iret
xor
test
mov
xchg
jb
iret
dec
out
shr
mul
lea
xor
add
enter
inc
test
mov
imul
fld
jb
jge
or
inc
xchg
jb
aaa
in
js
inc
xchg
fstp
mov
xor
in
js
inc
xchg
fstp
mov
xor
lods
popf
pop
inc
imul
into
pop
jo
sub
into
mov
add
xor
imul
pop
jo
xor
mov
inc
cmp
mov
xchg
jb
jmp
mov
xchg
jb
jmp
cmc
stos
add
mov
xchg
jb
jmp
fld
mov
inc
xchg
lea
lea
add
call
push
rol
and
popa
lea
push
push
mov
mov
xchg
jb
jb
int
xchg
inc
inc
jmp
shr
sbb
mov
imul
push
dec
test
mov
imul
mov
in
jb
inc
xchg
pop
mov
push
mov
dec
call
call
push
pop
test
mov
sub
xor
(bad)
xor
xchg
jb
xor
jb
inc
xchg
mov
enter
mov
in
mov
inc
xchg
fnstsw
cmp
sbb
sub
into
inc
cmp
mov
lea
mov
push
jb
call
xor
xchg
jb
iret
dec
out
shr
and
lea
xor
add
test
push
add
xor
xchg
jb
mov
in
jae
inc
xchg
pop
mov
push
mov
dec
call
jmp
push
adc
xor
sub
xor
(bad)
xor
xchg
jb
aaa
in
into
inc
xchg
push
stc
inc
sub
enter
iret
inc
xchg
jb
js
and
mov
inc
loop
fld
jb
jge
or
inc
xchg
jb
aaa
in
js
inc
xchg
fstp
mov
xor
in
js
inc
xchg
fstp
test
lea
cmp
push
aas
lea
inc
loop
aad
xchg
jb
jge
lea
add
pop
mov
sub
jo
adc
mov
xchg
jb
shr
xor
imul
push
ror
push
sub
cmp
lock
cmp
mov
iret
nop
add
shr
movs
dec
xchg
jb
call
sub
into
inc
sub
aaa
in
jge
inc
xchg
fstp
add
clc
imul
push
lods
mov
mov
xchg
jb
jb
int
xchg
inc
inc
add
into
inc
cmp
mov
inc
cmp
dec
xchg
jb
push
lock
mov
cdq
jo
inc
cmp
xor
cdq
outs
jae
xchg
cmp
inc
xchg
jb
les
xor
jb
dec
xchg
jb
push
js
xor
sub
xor
imul
xor
imul
pop
call
xor
xchg
jb
push
sub
xor
add
into
inc
or
sub
iret
xor
mov
mov
iret
nop
add
shr
movs
dec
xchg
jb
call
sub
into
inc
or
int3
inc
xchg
fstp
add
clc
imul
push
mov
lds
fld
push
xor
loope
clc
imul
shr
xor
mov
imul
pop
mov
sti
push
into
inc
jmp
mov
int3
xor
mov
mov
loopne
rol
jb
jge
pushf
into
iret
jge
inc
stos
xchg
clc
cmp
dec
ins
lea
in
(bad)
clc
js
lea
push
fnsave
sbb
mov
jnp
xor
mov
push
call
or
in
inc
xor
pusha
xor
or
inc
pop
lods
sti
imul
sbb
lea
dec
mov
dec
loopne
or
sbb
into
(bad)
mov
imul
add
test
push
sbb
xor
sub
sub
fsubr
xor
xchg
movs
leave
xor
int
iret
bound
xchg
test
push
and
sbb
xchg
mov
(bad)
lods
scas
sti
imul
test
imul
fldenv
xchg
movs
leave
xor
int3
xor
jge
or
(bad)
xor
in
sub
mov
imul
xor
cli
imul
sbb
xor
sti
imul
sub
test
sbb
xor
cli
imul
sub
enter
sahf
mov
mov
test
iret
outs
push
sub
lock
sbb
xor
sti
imul
inc
sbb
addr16
imul
mov
popf
add
in
(bad)
clc
js
lea
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
cmp
fld
lea
xor
scas
pop
cwde
loopne
jno
sbb
cmc
mov
enter
stc
sbb
scas
retf
cs
fisub
pusha
dec
inc
mov
call
mov
stc
xor
xchg
lods
inc
dec
add
xor
push
cmp
jb
jae
aam
push
imul
xor
mov
lods
or
mov
popa
mov
into
inc
out
ja
adc
push
mov
sahf
popa
sbb
push
dec
out
sub
lea
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
call
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
mov
popf
iret
xor
stc
lea
.byte
.byte
