lock
sbb
mov
jge
adc
adc
jl
lea
arpl
dec
mov
xlat
sub
popa
loopne
sbb
leave
jbe
dec
inc
lds
les
and
outs
and
fsubrp
jecxz
or
push
mov
out
adc
jno
in
imul
push
or
adc
loopne
out
out
dec
test
add
call
ins
adc
jne
mov
sub
aas
jb
dec
xor
or
in
push
lds
loopne
ds
daa
mov
retf
pop
sub
iret
iret
ds
add
xchg
scas
neg
addr16
or
mov
fiadd
retf
sahf
into
dec
inc
(bad)
xor
fcomp
cld
push
sub
xor
lock
lock
jl
loope
xor
sbb
jp
mov
cmp
dec
push
or
push
xor
call
test
test
lea
stos
mov
cs
in
rol
and
jns
xchg
jecxz
inc
movs
xor
shl
out
stc
dec
mov
xor
jecxz
or
sbb
add
repz
dec
pop
cmp
cwde
mov
(bad)
mov
(bad)
push
fisttp
inc
cmps
add
popf
add
inc
mov
pop
sbb
ss
call
jb
lock
call
leave
adc
ret
sub
or
xor
imul
jae
mov
scas
and
test
dec
in
test
loopne
adc
jg
mov
in
out
xor
jmp
or
push
and
out
jbe
xchg
adc
mov
jle
lea
and
dec
fst
and
imul
imul
fs
jle
add
out
leave
pop
outs
mov
xchg
in
xor
inc
gs
int
push
lods
jne
icebp
mov
fst
cmp
push
rol
repz
xor
clc
push
test
add
cmp
pop
sub
adc
mov
rol
cmp
mov
mov
push
sub
in
mov
cmc
adc
fstp
mov
dec
je
push
xchg
stos
aas
fild
bound
aas
ja
dec
xchg
lea
pop
mov
jno
add
add
pop
inc
addr16
mov
das
push
mov
arpl
dec
cmps
pop
dec
mov
cdq
sub
scas
xlat
mov
xchg
mov
inc
xor
mov
dec
push
sub
in
and
sbb
icebp
and
neg
bound
mov
mov
data16
adc
je
mov
in
leave
stos
add
test
and
mov
jae
pop
(bad)
(bad)
cmp
adc
retf
mov
xor
push
dec
add
push
fisttp
xchg
xchg
js
jmp
cmp
in
inc
push
test
adc
cmps
adc
mov
outs
retf
mov
and
mov
out
fisubr
(bad)
or
sub
scas
mov
mov
and
mov
in
outs
dec
sbb
test
mov
xchg
jno
lock
retf
sub
aas
les
jmp
sub
xchg
(bad)
inc
sub
les
cmp
pushf
adc
xchg
shr
push
rdtsc
(bad)
xor
aam
stos
sub
ins
inc
hlt
ins
inc
add
repz
arpl
les
inc
loop
jmp
inc
sub
inc
push
js
out
add
js
(bad)
ins
in
out
push
aas
ja
cmp
in
fwait
jb
adc
push
es
mov
push
xchg
add
retf
not
cmp
out
int
xor
or
cwde
gs
pop
jo
je
jg
stos
and
xchg
mov
test
and
jnp
mov
pop
push
retf
add
jbe
repz
sti
sbb
out
mov
or
adc
dec
scas
xor
sbb
and
ins
pop
xchg
(bad)
and
cmps
lock
ret
ins
(bad)
out
cmps
(bad)
fcmovnbe
lahf
inc
cld
sar
pop
enter
out
cmp
dec
push
lods
es
rcr
xor
popa
sahf
bound
cmp
sbb
add
mov
dec
pop
mov
sub
and
fsub
xor
cli
xor
out
fiadd
or
icebp
mov
out
xchg
in
add
push
leave
or
mov
mov
sub
push
and
ret
mov
jmp
xor
push
fadd
ret
ja
jbe
mov
(bad)
dec
adc
in
jmp
pop
mov
mov
jle
rol
pop
xor
jle
inc
jae
scas
fwait
and
scas
out
mov
lea
mov
or
mov
adc
xor
shl
mov
out
mov
cmp
movs
pop
mov
ret
ds
mov
mov
scas
cmovns
pop
dec
jnp
xchg
in
cmp
repz
lea
shl
xchg
int
enter
fisttp
test
cmp
sub
jmp
fisttp
nop
lock
xchg
push
sub
pop
and
scas
cmp
scas
and
(bad)
pushf
gs
cmp
jecxz
inc
ja
inc
mov
inc
cld
sbb
int3
dec
push
das
and
and
xchg
aas
aad
push
xor
mov
sub
pop
jo
icebp
jno
xor
jecxz
xchg
jo
ret
enter
les
xchg
(bad)
je
daa
enter
pop
fisttp
push
or
(bad)
push
fisubr
pop
jns
fadd
je
les
(bad)
std
mov
jae
out
fisubr
xchg
imul
xchg
repnz
push
aad
jle
int3
or
xchg
inc
sbb
lods
or
jae
push
rol
jmp
jecxz
stc
push
popa
retf
xchg
mov
stos
push
sbb
mov
push
dec
loope
cmp
outs
in
pop
adc
mov
das
mov
retf
fwait
outs
loope
mov
bound
and
adc
pop
jmp
div
into
js
call
pop
cdq
aam
jb
or
outs
mov
bound
sub
xor
retf
xchg
sbb
cmp
lahf
and
and
cmps
lock
xchg
jo
fadd
push
div
jp
mov
and
test
sbb
adc
movs
into
shl
inc
xchg
(bad)
pop
pop
xor
cmp
js
pop
jne
add
push
inc
test
cmp
mov
xor
sti
xor
retf
sub
call
idiv
xchg
xchg
fistp
push
mov
dec
retf
inc
add
call
ja
mov
mov
cmp
daa
push
into
mov
dec
gs
imul
in
ret
lds
or
push
aam
adc
test
xor
push
loop
outs
adc
inc
lds
in
jge
movs
cwde
addr16
xlat
mov
inc
sbb
sbb
adc
nop
hlt
add
sbb
cmps
xchg
add
mov
clc
push
jl
in
add
fiadd
out
in
leave
cmc
add
cmc
outs
inc
outs
out
addr16
mov
xchg
push
ror
hlt
mov
sbb
pop
int3
sbb
xor
fs
out
ins
iret
adc
stos
(bad)
bound
sahf
jmp
mov
mov
jge
cwde
gs
inc
or
fld
or
mov
xor
pop
adc
cwde
xor
outs
dec
push
pop
jb
sbb
out
es
xchg
loope
test
bound
int3
ja
lods
mov
pop
sbb
inc
jg
std
(bad)
inc
fsub
adc
and
cmps
sahf
jns
cwde
(bad)
xchg
lahf
push
push
stos
sbb
cmp
push
sar
fcomp
add
cmp
push
(bad)
jbe
sub
adc
loop
scas
loopne
(bad)
stc
cmps
xchg
loopne
pop
rcr
ins
les
jmp
jp
adc
arpl
push
mov
in
and
cmp
stos
shl
push
imul
sar
xchg
mov
popf
inc
mov
add
call
bound
push
add
mov
shl
mov
sbb
pop
imul
mov
inc
push
movs
repnz
pop
dec
scas
retf
add
cli
mov
(bad)
stos
cmp
fstp
mov
ror
hlt
jae
popa
xlat
rcl
into
mov
loop
test
mov
inc
xor
test
add
xor
out
xchg
inc
jb
dec
shl
mov
xor
dec
sbb
int3
xchg
xchg
dec
dec
mov
or
inc
add
in
daa
pop
(bad)
pop
add
mov
push
cmp
pop
xor
bound
jl
inc
fdiv
out
add
(bad)
cdq
sbb
std
retf
dec
xor
push
fadd
dec
and
lea
mov
hlt
popf
push
gs
or
jo
push
mov
leave
inc
ret
mov
pop
jae
pop
push
pop
enter
pop
push
sbb
sbb
mul
test
pop
xchg
fcmovnbe
leave
or
arpl
in
inc
xor
leave
mov
leave
retf
and
xchg
in
pop
pop
nop
aaa
lea
pop
and
ss
xchg
hlt
push
or
dec
inc
sbb
push
add
push
cld
push
clc
jmp
lds
rcl
(bad)
repz
test
jmp
arpl
pop
fist
jp
je
call
pop
or
popf
int3
mov
mov
int3
cmc
inc
add
pop
leave
je
jmp
adc
mov
inc
xchg
stos
sbb
fdiv
cmps
push
stos
add
ja
xor
fcomi
cmp
inc
push
jg
push
xchg
jmp
sub
pop
test
lock
js
hlt
in
(bad)
ficom
cld
mov
scas
mov
or
test
inc
in
fsub
mov
push
call
mov
mov
enter
les
ret
mov
mov
call
and
dec
stc
std
inc
loope
jl
ficomp
rol
or
addr16
add
rcr
xchg
pop
and
cmp
sar
cmp
adc
(bad)
(bad)
mov
fcomp
lods
(bad)
dec
push
cwde
pop
out
pop
pusha
(bad)
pushf
jmp
test
cli
pop
lock
outs
add
(bad)
add
outs
inc
cli
leave
adc
pushf
iret
in
sti
cmp
dec
cld
dec
call
and
movs
and
and
jbe
add
aam
pop
mov
cmps
sub
jge
(bad)
cmps
hlt
mov
adc
or
xor
and
imul
into
popf
(bad)
(bad)
lods
pop
outs
and
or
int3
in
cmp
pop
xchg
(bad)
jne
inc
inc
xor
mov
cmc
scas
pop
jp
mov
cmp
add
aad
(bad)
popa
retf
cmp
sbb
mov
jge
fisub
ins
test
jno
push
cmp
pop
jle
out
mov
or
push
or
inc
sysenter
sbb
pop
jns
ror
jne
retf
mov
jbe
or
ins
sub
cmp
pop
aad
aad
lods
cmp
sbb
aas
sbb
dec
xor
imul
and
add
mov
(bad)
xchg
add
mov
adc
xor
and
in
pop
xor
sti
lods
xor
leave
aas
into
loop
stc
icebp
cmp
das
dec
cmp
sahf
adc
xor
add
ja
ins
mov
out
stos
mov
mov
add
xor
pushf
cld
dec
aad
loopne
scas
inc
and
mov
aam
ror
add
cmp
xchg
sahf
add
lds
das
retf
jno
jb
je
or
repz
iret
jle
repz
enter
pushf
and
sbb
or
lahf
movs
ins
sbb
add
cdq
sub
arpl
sahf
xchg
sbb
or
pop
dec
mov
inc
mov
enter
aam
fdivr
pop
mov
(bad)
cdq
sbb
adc
test
fisttp
inc
imul
ror
aad
ja
inc
test
push
scas
bound
data16
(bad)
js
dec
jp
jne
(bad)
nop
sbb
std
cmps
sti
inc
out
clc
fadd
mov
push
cmps
in
or
cmp
scas
(bad)
mov
cwde
push
out
jl
push
cmc
jo
cld
mov
mov
test
mov
dec
es
jg
fnsave
loope
or
xchg
jb
xchg
repnz
aas
aam
aad
pop
leave
in
fidivr
outs
cmp
popa
jbe
add
aas
mov
dec
add
retf
dec
aam
jg
mov
push
stos
push
daa
push
test
cmp
add
mov
fmul
jg
xchg
push
call
cmps
sub
gs
test
mov
movs
iret
fsub
neg
daa
call
loopne
dec
sub
push
push
cmp
pushf
imul
add
icebp
pop
jge
fistp
dec
popf
shr
dec
jl
sub
fnclex
fs
mov
pop
out
push
sub
adc
mov
rcr
push
pop
push
mov
mov
xchg
xor
pop
jmp
add
sbb
push
jmp
test
test
or
or
lea
sbb
lahf
movs
es
xchg
jae
inc
cmp
inc
fwait
mov
hlt
out
jmp
into
inc
int3
add
call
aam
lods
in
aaa
mov
rcr
sub
and
pop
dec
dec
cwde
inc
aas
aam
repnz
push
inc
pusha
pusha
jno
push
pop
aaa
loop
lods
sub
push
in
pop
cli
push
movs
xor
xchg
stos
mov
mov
outs
inc
call
sti
repnz
pop
(bad)
stos
(bad)
ja
ret
(bad)
sbb
ja
sti
cmp
mov
mov
cmps
(bad)
xchg
pop
sbb
xor
fdiv
or
test
clc
xchg
les
lahf
adc
pop
push
(bad)
jo
stos
data16
jmp
xchg
mov
arpl
or
hlt
xor
jne
xor
imul
mov
(bad)
movs
std
clc
(bad)
shr
stc
in
cmps
scas
xor
rol
sbb
cmp
frstor
hlt
sub
mov
and
dec
fbstp
jge
jl
clc
adc
out
dec
aam
cmp
cs
rcl
add
fs
mov
sub
push
addr16
das
dec
(bad)
xor
pop
add
jo
fs
adc
sbb
loopne
scas
inc
(bad)
clc
cmp
(bad)
xor
pusha
fldl2e
ss
(bad)
fdivr
mov
pop
dec
inc
js
bound
sbb
popf
cs
icebp
call
pusha
(bad)
(bad)
push
dec
scas
cli
jmp
sub
mov
sahf
cld
add
nop
test
push
cmp
lods
xor
jbe
mov
fidiv
call
mov
push
sub
call
adc
sahf
adc
inc
cmp
xor
(bad)
sub
(bad)
xchg
outs
mov
add
jge
sub
in
xlat
pushf
popf
sbb
xlat
inc
pop
pop
sbb
mov
fldcw
fcom
ror
pop
xchg
push
enter
or
ss
sti
call
shl
mov
test
cmp
cmc
or
add
das
cmps
ds
int3
aam
in
pop
adc
retf
pop
test
mov
add
stc
call
rcr
mov
loope
inc
mov
lods
pop
mov
jecxz
fs
xor
push
jg
jl
repnz
arpl
dec
adc
outs
je
cmp
pop
popf
int
aam
mov
test
xchg
stc
adc
jne
jae
dec
cmc
mov
test
mov
push
js
inc
inc
pop
mul
repz
je
imul
arpl
call
cmp
add
and
dec
lahf
(bad)
xchg
fcmovne
fwait
sbb
ds
fist
and
pop
call
ret
mov
sar
and
bound
ror
push
lea
rol
pop
out
call
pop
lods
fidivr
and
mov
mov
mov
jne
das
sbb
and
xchg
rol
mov
pop
xchg
je
test
pop
mov
cvtps2pd
push
cmp
fdiv
cwde
nop
cld
xlat
neg
pop
xchg
fdivrp
and
mov
pop
(bad)
mov
cs
pop
push
pusha
inc
shr
retf
lods
jle
icebp
xchg
sbb
sahf
mov
lods
pusha
cwde
jae
lahf
mov
adc
retf
xchg
cmc
pop
bswap
adc
inc
push
sbb
pop
adc
rcr
push
adc
push
xchg
inc
ret
jb
int3
lahf
div
mov
add
jo
sbb
mov
pop
fwait
popf
enter
mov
inc
or
pushw
push
pop
add
mov
add
pop
sbb
(bad)
leave
mov
les
mov
mov
rol
mov
jne
sti
mov
mov
stc
jnp
cmp
jp
pusha
repnz
test
dec
mov
loop
int3
dec
pop
jmp
jmp
test
pop
xor
push
dec
into
xchg
push
js
sub
xchg
adc
data16
jecxz
ds
cwde
pop
push
std
mov
xchg
mov
add
shr
out
icebp
retf
push
test
sub
pop
(bad)
int
mov
test
mov
push
nop
(bad)
and
lds
je
or
dec
jne
outs
movs
div
jns
jp
fdivr
test
xlat
int3
sub
std
aas
sub
gs
fild
retf
(bad)
repz
xchg
dec
add
sbb
call
sub
jno
or
pop
jae
mov
(bad)
inc
test
push
shl
inc
es
(bad)
and
clc
xchg
cld
xlat
mov
pop
fld
das
jbe
xchg
div
push
lock
lock
shr
jb
retf
push
fucomip
sub
mov
out
inc
test
jmp
mul
adc
inc
adc
or
dec
rcl
iret
or
movs
mov
xchg
fdivr
scas
aas
adc
xor
xor
push
cmp
mov
repz
and
sub
mov
push
sub
inc
jl
adc
lods
mov
adc
xchg
shr
inc
push
sub
inc
ins
cmc
and
jno
not
jnp
cmps
idiv
iret
dec
mov
pop
(bad)
jns
jle
mov
xchg
inc
shl
jmp
cli
jp
iret
dec
inc
les
xchg
hlt
xchg
inc
add
jno
sub
pop
ret
cmp
cmp
daa
push
popa
test
test
mov
rcr
test
shr
aaa
xchg
xor
out
xor
out
jge
imul
mov
neg
popa
ins
js
mov
cdq
(bad)
rcl
cli
pop
pop
enter
push
xor
(bad)
shr
retf
icebp
and
adc
adc
popa
and
mov
outs
aad
dec
in
das
xor
cdq
sub
sub
push
adc
and
cmp
dec
mov
fisub
lds
mov
dec
nop
fmul
pop
push
mov
push
push
add
repz
nop
sbb
add
mov
jne
and
cmps
mov
lahf
loope
or
icebp
fdivrp
mov
mov
test
loopne
and
and
dec
pop
or
xor
pop
pop
cmp
enter
out
addr16
in
div
jno
mov
lods
leave
ret
fimul
mov
push
pushf
call
outs
gs
xchg
jae
jl
and
pop
rol
in
pop
cmp
movs
ins
adc
dec
rcr
mov
xor
jnp
sti
sar
pusha
clc
xor
xor
mov
or
(bad)
ins
cmp
sub
add
jnp
mov
dec
push
ret
xchg
inc
xor
movs
bound
adc
jns
cmp
xor
js
out
scas
inc
xchg
in
mov
fcomp
cwde
jmp
xor
xchg
xchg
lods
sahf
mov
sub
inc
sbb
into
mov
loopne
push
pop
push
sysenter
test
jg
jge
jmp
mov
add
dec
leave
dec
mov
jne
ins
push
ss
rol
lock
fdivr
mov
sub
mov
push
push
push
shr
jno
dec
in
leave
shr
in
or
add
call
jmp
xlat
pop
fstp
nop
je
retf
aaa
lahf
xchg
cli
imul
cmc
ret
(bad)
pop
add
dec
mov
out
aas
mov
sbb
dec
push
cs
mov
pop
daa
and
test
mov
imul
mov
xchg
mov
jle
mov
rol
xchg
jle
lock
xor
dec
lods
dec
pop
mov
cld
xchg
xor
(bad)
push
imul
sbb
pop
cmp
jl
pop
scas
push
cs
ret
test
cmps
icebp
adc
sbb
fiadd
dec
jmp
inc
ja
inc
mov
sbb
outs
setno
cmp
cmp
std
hlt
and
mov
pop
xor
mov
or
pop
pop
and
je
mov
sahf
pop
imul
xchg
adc
test
mov
mov
test
mov
jp
mov
sti
test
fdivr
mov
mov
dec
out
ja
jl
mov
test
scas
into
cmc
ja
test
mov
popa
hlt
(bad)
(bad)
sub
pop
(bad)
xchg
sahf
add
rcr
mov
icebp
inc
es
cld
adc
fldcw
mov
sbb
fs
mov
sub
mov
xchg
test
(bad)
rcl
push
ja
push
pop
mov
mov
push
pop
retf
inc
inc
and
lods
fldenv
lds
dec
push
xlat
imul
sbb
pop
(bad)
dec
xchg
repz
sub
xlat
pop
mov
jmp
push
test
pop
push
jnp
mov
js
jb
gs
imul
inc
gs
xchg
cwde
hlt
(bad)
mov
mov
cdq
mov
pop
stos
mov
(bad)
fst
mov
add
fwait
pop
test
cmp
mov
dec
icebp
jo
xor
hlt
mov
das
jg
sub
mov
stos
push
aad
dec
cmp
mov
aas
mov
add
xchg
add
adc
pop
cmp
jmp
loop
mov
ja
test
outs
pushf
cmp
sbb
fidivr
pushf
fnstcw
push
push
dec
stos
inc
rcr
call
cmp
retf
push
xchg
dec
es
mov
in
pop
in
movs
sub
rcl
mov
emms
mov
jo
or
scas
outs
cmp
jb
inc
mov
push
inc
sbb
call
out
ret
cli
out
in
lds
jg
xchg
adc
add
call
imul
clc
push
mov
push
pusha
sar
dec
iret
push
xlat
shl
in
mov
mov
ss
fld
sahf
push
aam
push
mov
dec
sbb
ins
popf
mov
xlat
sub
sbb
jbe
cmp
xchg
icebp
mov
inc
mov
outs
adc
sbb
xlat
(bad)
rcr
mov
lds
repnz
call
ins
jmp
std
(bad)
out
jb
retf
retf
pop
mov
cdq
call
mov
push
mov
inc
stos
push
enter
out
push
aas
xchg
pop
fbld
or
sbb
ja
and
sub
inc
sub
xor
sub
xor
bound
sub
jb
dec
std
std
ss
cmp
popf
pop
and
add
lods
lods
sub
sbb
test
cmp
sub
or
hlt
sbb
add
es
dec
aam
push
cmp
add
cmp
inc
jmp
retf
add
sbb
aad
mov
mov
lods
mov
ror
dec
dec
(bad)
int
retf
xor
inc
jno
scas
xchg
push
adc
push
mov
jbe
aas
dec
jle
fcmovu
fisttp
jbe
stc
inc
ret
rcl
pop
pop
sub
and
jo
or
xchg
bound
inc
xchg
adc
es
stc
push
loope
into
and
or
bound
movs
xchg
push
or
outs
lods
popf
sbb
add
jae
test
lds
cmp
xor
outs
jb
inc
inc
lahf
scas
xor
fmul
in
or
sbb
in
mov
mov
movs
aam
xchg
fmul
(bad)
pop
inc
div
fwait
push
or
pop
in
push
test
out
and
cmps
shl
loope
fxch
pop
sbb
inc
push
out
out
mov
inc
or
sbb
ins
retf
data16
sbb
fstp
std
push
xor
sbb
out
cmp
jae
cwde
inc
xchg
adc
ds
neg
add
pushf
and
sub
scas
nop
test
lea
xchg
(bad)
fwait
xor
pop
xchg
mov
or
js
xchg
mov
cmc
ret
mov
fldcw
pusha
jp
cmp
jbe
pop
inc
push
fwait
and
cmp
popa
es
aaa
push
loop
gs
aaa
cmp
cli
in
adc
popa
cld
dec
ret
daa
loopne
retf
inc
cmps
sti
call
mov
jbe
les
rcr
out
test
adc
enter
xchg
je
scas
mov
ficom
call
ror
loopne
ficom
mov
mov
(bad)
push
movs
outs
xchg
das
jp
xchg
mov
lock
shl
sbb
pop
stos
test
daa
sub
enter
loope
mov
out
ss
pavgw
in
and
cdq
xchg
add
push
test
aam
std
in
jb
or
(bad)
cli
fs
mov
pop
ss
pop
(bad)
out
adc
xchg
stos
mov
int3
shr
out
adc
lds
dec
dec
pop
in
inc
jmp
or
stos
aam
pusha
adc
jle
add
sbb
jb
(bad)
pop
add
jmp
xor
jecxz
sub
pop
mov
movs
and
and
fisttp
sahf
add
jmp
ret
cmp
call
out
xchg
add
repnz
push
cmps
inc
loope
pop
push
int3
stos
sub
and
mov
mov
xchg
(bad)
xchg
sub
cmp
xchg
sub
call
xchg
pop
mov
fs
and
jle
sbb
test
inc
dec
jnp
xor
xchg
shr
daa
xor
inc
push
add
mov
test
cmps
pushf
pop
xor
inc
test
shr
test
xor
jmp
inc
mov
xor
add
aam
xor
imul
pop
inc
mov
xor
es
cdq
mov
stc
mov
sbb
fstp
xchg
outs
stos
sbb
adc
jne
xchg
mov
xor
into
add
std
add
cmp
mov
pop
bnd
adc
xchg
dec
fs
inc
mov
ror
xchg
bound
out
out
out
or
int3
popa
jne
and
push
pop
ja
xor
fsubr
xor
add
add
popa
adc
jmp
inc
dec
push
lods
xchg
cli
inc
shl
fnstenv
xchg
repnz
in
stc
ins
dec
(bad)
out
icebp
ficomp
xchg
in
lahf
push
and
xor
jns
sub
(bad)
in
ss
call
xor
push
call
inc
sub
popa
xor
pop
adc
fisttp
mov
sti
stos
pop
pop
or
sar
loope
push
mov
call
sub
repnz
loopne
sbb
loop
movs
enter
push
adc
test
sbb
sbb
retf
(bad)
sbb
fstp
pop
fsub
pop
or
jmp
sub
bound
repz
sub
jmp
out
scas
fcom
test
mov
std
adc
ficom
(bad)
imul
jl
jle
(bad)
pushw
mov
out
push
dec
ret
and
xor
loop
mov
loopne
stos
or
sbb
jb
out
xor
loope
pop
push
imul
bound
stc
fs
sub
por
sbb
xor
push
push
or
imul
leave
shr
adc
jp
push
scas
or
push
(bad)
mov
pop
push
not
outs
jnp
popf
je
and
jb
push
and
fucomip
mov
push
aad
dec
adc
sbb
dec
les
or
add
adc
in
js
xchg
ins
outs
or
sub
jecxz
call
push
push
mov
loopne
fidivr
push
inc
sahf
sub
mov
pop
cli
pop
push
push
mov
aam
dec
sbb
rol
pop
sbb
imul
jns
test
pop
pop
mov
push
push
push
fldenv
jecxz
pop
inc
stos
call
(bad)
mov
xlat
xor
lock
in
add
and
lods
pop
iret
(bad)
(bad)
jns
inc
(bad)
lds
sub
clc
daa
jg
test
addr16
bound
cmc
mov
and
mov
in
mov
push
mov
(bad)
cmp
mov
xor
jmp
packsswb
sbb
add
dec
cmp
aad
fcomp
ret
int3
out
mov
inc
push
add
xor
push
cmp
les
sbb
inc
pop
add
cdq
dec
mov
inc
sub
out
mov
add
pusha
repnz
fstp
popa
mov
sub
and
icebp
mov
dec
cmps
and
jnp
xchg
adc
div
das
dec
xchg
je
pop
jle
cmp
pop
adc
clc
jle
inc
fidivr
das
arpl
stos
sbb
cwde
cdq
cmp
lock
in
or
test
jo
jmp
sbb
xor
pop
push
mov
mov
inc
mov
adc
adc
jno
sbb
test
cmp
imul
inc
push
dec
push
jecxz
adc
test
int3
or
rcl
jo
fcom
popa
fmul
push
jecxz
cmps
mov
cmps
icebp
mov
imul
int3
xchg
ja
mov
inc
outs
aaa
aaa
movs
mov
and
jmp
add
push
add
fsub
fcom
push
mov
arpl
aaa
out
jmp
jne
adc
ja
mov
mov
or
xchg
into
test
in
sub
scas
mov
xchg
xor
and
mov
jb
mov
lea
mul
mov
call
dec
cmp
ds
push
rcr
clc
and
faddp
jmp
sub
ret
in
sbb
mov
mov
je
push
inc
mov
jecxz
push
adc
test
ins
or
ss
out
adc
lea
or
mov
pusha
repz
mov
mov
outs
clc
mov
mov
adc
in
pushf
pop
xor
sbb
push
(bad)
mov
mov
frstor
call
add
add
lods
push
cli
push
pop
fisub
inc
inc
es
mov
leave
add
pop
repz
rcr
popa
stos
loopne
ret
jmp
sti
add
xchg
jb
popa
fdivr
push
repz
mov
std
inc
test
std
jl
inc
js
es
sbb
call
das
xchg
je
ret
out
and
and
mov
(bad)
xor
dec
popf
(bad)
out
mov
out
mov
ins
lahf
push
push
stos
pushf
sbb
inc
mov
inc
stos
dec
jno
pop
sub
xor
add
mov
jb
outs
and
daa
dec
and
or
and
imul
pop
dec
fwait
std
je
inc
or
shl
xor
sbb
push
repz
ror
sub
inc
leave
fisttp
pop
jge
add
int
aad
outs
test
or
push
hlt
push
mov
sbb
ja
inc
jl
push
aam
outs
xchg
mov
pop
sub
ja
dec
popa
ins
div
dec
add
fmul
pop
mov
mov
into
data16
sbb
pop
cmp
and
mov
push
(bad)
stos
(bad)
data16
and
jmp
inc
out
ja
mov
cmps
clc
popa
xor
push
and
jae
sbb
jecxz
adc
outs
cmc
aaa
dec
mov
cmp
cmp
(bad)
lea
mov
dec
les
sub
test
std
mov
shl
(bad)
sar
xlat
inc
imul
sahf
sar
shr
out
xor
lea
jae
mov
or
inc
inc
add
inc
push
je
xchg
cmps
or
push
aam
repz
js
cmp
xlat
mov
lods
cmps
dec
jl
pop
xor
dec
movs
mov
nop
xchg
push
enter
loopne
sub
mov
push
and
stos
rcr
imul
mov
(bad)
push
not
gs
neg
dec
mov
fwait
sub
and
mov
jno
fldenv
cmp
xor
ins
enter
je
ret
add
mov
call
nop
fistp
or
cmps
or
and
sub
mov
mov
cmp
mov
jae
push
mov
in
mov
or
xor
(bad)
scas
adc
xchg
mov
jne
sbb
mov
pop
xor
ret
dec
aad
rcr
shr
mov
icebp
sbb
pushf
(bad)
xchg
jl
xchg
fcmovbe
rcr
popa
and
arpl
cmps
inc
movs
mov
xlat
fdivr
jl
mov
push
hlt
out
sbb
js
and
fbld
xor
jbe
mov
loope
(bad)
pusha
ret
xlat
ins
add
xchg
sub
xchg
or
pushf
cli
nop
xchg
icebp
adc
and
cmps
fistp
in
jp
xlat
or
jno
mov
stos
lahf
adc
push
adc
dec
jg
jmp
pop
(bad)
iret
in
cmp
mov
jmp
outs
inc
mov
fisttp
(bad)
fisttp
jle
or
sub
lods
mov
lahf
cli
and
enter
cmp
add
mov
adc
push
out
(bad)
cmps
inc
jb
xchg
or
pop
dec
mov
adc
pop
cld
push
pop
scas
mov
mov
adc
mov
pushf
gs
(bad)
stc
retf
xor
jo
inc
stos
cmc
retf
xor
cdq
pop
inc
outs
mov
shl
enter
int
stos
cld
cmp
movs
inc
mov
sub
mov
dec
add
adc
movs
mov
jno
dec
or
(bad)
scas
add
hlt
fist
test
mov
pop
cdq
or
stc
test
xchg
or
mov
test
(bad)
sub
sub
fcomi
dec
je
imul
mov
movs
mov
mov
call
iret
ret
cmps
pop
dec
cmp
int
add
daa
inc
hlt
lds
mov
jb
rcr
movq
jl
mov
arpl
xlat
mov
cdq
mov
idiv
js
mov
push
xchg
sbb
xor
push
jecxz
je
cmp
or
and
loop
mov
mov
sbb
dec
fwait
adc
aam
in
js
inc
and
iret
adc
icebp
inc
sub
xor
int3
ins
adc
xor
cli
in
jns
pop
mov
bound
aad
outs
jmp
retf
jae
mov
adc
ror
nop
jne
sbb
and
int3
sbb
xchg
xchg
arpl
lock
push
in
adc
adc
mov
push
or
popf
cs
int
retf
div
mov
dec
mov
inc
inc
(bad)
and
fadd
pop
dec
adc
sbb
jno
lods
mov
cmp
call
lods
aad
fwait
sbb
inc
inc
(bad)
in
lods
xor
jns
scas
push
shl
icebp
das
imul
cmp
push
fcom
ss
enter
cmp
xor
mov
jg
out
mul
pop
iret
mov
int
fld
mov
int3
inc
jb
stos
sub
push
sti
jo
pusha
add
dec
lods
ret
cld
js
cmp
wbinvd
scas
ins
fnstcw
mov
dec
and
loopne
inc
add
pop
mov
push
cmc
retf
adc
jae
pusha
cmp
or
mov
shl
mov
and
jns
inc
xchg
sbb
push
mov
jmp
sub
mov
mov
cwde
sub
sti
sub
pop
sub
sbb
fcomp
cwde
sti
movs
in
pop
out
adc
ins
std
iret
xor
sbb
sub
sbb
shr
mov
push
pusha
nop
popf
imul
inc
pop
in
mul
pop
mov
mov
push
mov
ins
xor
outs
push
cld
fwait
loop
lahf
sbb
push
jnp
mov
pop
shl
ret
movs
mul
jmp
jmp
dec
movs
stc
push
gs
and
jno
mov
dec
jl
aad
adc
cmp
pop
pop
ins
movs
mov
inc
fs
lods
mov
fwait
cmp
ins
adc
into
adc
mov
daa
mov
scas
(bad)
xor
pop
retf
shl
retf
push
adc
dec
or
call
fstp
jae
or
push
push
cmp
(bad)
ss
xchg
test
cmps
push
sbb
in
sbb
pop
xchg
leave
outs
jg
mov
jbe
jg
add
cmp
cwde
popf
jns
jl
sub
and
(bad)
int
mov
mov
or
out
mov
inc
mov
ds
xchg
hlt
cmps
lahf
jno
mov
cli
inc
fs
xchg
out
mov
or
cmp
jae
(bad)
cmc
call
(bad)
sahf
dec
mov
push
ja
push
outs
cmp
mov
mov
mov
retf
iret
test
jge
loop
retf
sub
xlat
test
gs
mov
sbb
or
mov
sub
inc
fs
pop
enter
mov
call
ins
xor
div
xchg
jmp
ret
ds
loop
out
inc
lods
jl
test
pushf
xchg
add
lock
adc
arpl
xor
push
outs
fdivr
retf
xor
mov
mov
arpl
outs
pop
call
sbb
dec
ffreep
pop
push
cmc
test
aaa
inc
push
xchg
mov
sub
pop
call
mov
cdq
in
xor
out
mov
inc
ror
inc
fidiv
xor
cmp
jns
aaa
into
mov
mov
mov
pop
es
sub
sbb
imul
add
cmc
outs
cli
xchg
stos
or
ja
and
mov
fcomp
cli
cmps
std
dec
mov
test
jae
push
pop
sub
pop
sbb
and
je
rol
mov
mov
push
jae
es
mov
dec
mov
rcl
in
enter
test
(bad)
out
mov
cmp
mov
xchg
loop
fisttp
and
scas
jbe
and
aad
jne
add
xchg
or
dec
out
scas
sbb
or
mov
adc
mov
xor
inc
arpl
fyl2x
lods
jb
jle
aad
test
push
clc
bound
xchg
xor
cmps
or
test
sub
adc
cli
lahf
fwait
aad
lock
enter
xor
mul
shl
stos
push
sbb
mov
mov
test
repz
mov
mov
test
out
or
cmps
adc
stos
pushf
lock
xor
leave
sbb
enter
push
pop
push
jae
add
fcom
retfw
in
shl
fild
mov
mov
pop
mov
pop
mov
sub
sahf
jb
and
inc
ss
or
popf
xchg
es
push
arpl
dec
mov
sub
pop
dec
hlt
adc
lods
sub
xchg
repnz
cmp
or
and
push
repnz
int3
pop
push
jg
pop
cwde
shl
mov
icebp
leave
loope
xor
ficom
neg
js
xor
mov
popa
sub
retf
call
and
sbb
movs
xchg
jb
call
inc
stc
(bad)
pop
mov
mov
mov
(bad)
mov
cmp
sub
mov
sub
sub
and
mov
sub
sbb
dec
jae
jl
popa
mov
sbb
cs
mov
lea
inc
fwait
pmaxsw
cmp
dec
pop
je
mov
xchg
shl
aad
or
adc
inc
add
xchg
xor
or
pushf
and
es
stos
in
pop
test
dec
enter
outs
out
test
jae
arpl
fld
iret
daa
sub
add
dec
add
push
or
cmps
lods
sbb
xor
clc
dec
movs
mov
loopne
data16
repz
clc
or
mov
shl
dec
jg
out
lock
pop
jecxz
pop
enter
push
dec
ja
xchg
enter
lock
xchg
dec
or
mov
mov
scas
cmp
call
add
aad
xchg
xor
sbb
and
movs
jnp
aas
sbb
jb
cmc
movs
fidiv
bound
sub
gs
push
mov
xchg
mov
shr
retf
in
mov
adc
ror
inc
gs
ret
cdq
lock
adc
call
lods
or
test
fbld
repnz
or
mov
push
inc
sbb
sub
sbb
jmp
mov
jns
xor
pop
ss
jmp
loope
cli
jge
push
loopne
ficomp
jb
test
inc
inc
or
mov
jl
shl
and
cmc
sbb
std
(bad)
ficom
ja
inc
lds
push
jle
gs
fwait
mov
mov
stc
adc
push
add
mov
shr
jnp
iret
or
and
sub
fist
pop
inc
sbb
xchg
dec
(bad)
fwait
xchg
xor
scas
or
mov
and
xor
sbb
inc
cli
xchg
mov
ret
les
pop
sar
cwde
loop
jae
pop
out
dec
(bad)
jnp
int3
outs
mov
cmp
dec
dec
sar
push
mov
test
cdq
test
xor
sbb
mov
cmps
sbb
adc
les
test
xor
add
xor
pop
enter
add
dec
nop
lods
add
les
mov
jbe
repnz
jmp
bound
xchg
gs
aam
push
es
es
jl
nop
jne
add
popf
inc
in
push
or
repnz
imul
jp
mov
push
push
neg
lea
je
ins
sbb
mov
fstp
inc
mov
fimul
cmps
sahf
push
push
pop
jg
mov
mov
push
add
movs
test
ins
jl
inc
pop
pop
bound
cmps
test
jmp
int3
loopne
push
xchg
not
mov
cdq
sbb
cs
test
xchg
clc
adc
push
clc
mov
pop
test
test
cmp
gs
jle
test
mov
(bad)
in
pop
loop
icebp
push
scas
xor
jg
aas
aas
in
leave
popf
stos
aam
xor
add
cs
push
shl
dec
pop
sbb
scas
pusha
stos
pop
shl
lods
je
sub
sub
adc
inc
bound
or
ror
adc
push
push
mov
lock
iret
out
inc
fcmovb
xchg
je
add
push
sbb
cs
inc
cmp
shl
sub
gs
rcl
js
xchg
mov
jge
cld
pop
pop
je
(bad)
cmc
jecxz
sti
mov
shr
test
mov
inc
inc
dec
fadd
pop
lock
add
lahf
fnstenv
inc
shl
ja
xor
fisubr
cwde
jmp
cmp
(bad)
enter
loope
pusha
daa
jmp
fisttp
inc
call
pop
jg
ds
ret
(bad)
jns
add
add
dec
xor
retf
in
in
mov
repnz
jb
ret
sub
and
cmps
popa
add
in
bound
add
loope
sbb
lods
xchg
dec
push
add
(bad)
sbb
sbb
test
bound
jge
scas
and
mov
push
out
xchg
lds
push
pop
stos
call
xor
fmul
pop
sti
xchg
sub
fcmovu
pop
xchg
jg
sbb
int
jmp
cli
jns
sbb
inc
movaps
jge
sub
(bad)
repnz
jne
push
and
dec
in
ds
pop
mov
movs
add
pop
pop
pop
push
data16
popf
mov
arpl
jb
rcl
test
jge
aas
mov
pusha
pop
js
xchg
sbb
and
cli
xchg
push
jmp
lods
aaa
test
cwde
cmp
or
aas
or
mov
bound
cmovb
mov
sahf
xchg
push
repz
add
cmp
stc
mov
adc
sti
test
add
lods
and
mov
ret
pop
(bad)
int3
jns
lock
das
enter
aam
fldcw
sbb
retf
jg
mov
sub
sbb
mov
mov
push
movs
jns
jb
enter
dec
in
aam
sar
aas
fild
rol
call
mov
adc
push
adc
getsec
jbe
cmp
push
mov
fild
outs
pop
aaa
outs
add
xlat
dec
mov
sbb
std
push
dec
xchg
xchg
sbb
aam
jno
sbb
jbe
mov
nop
xor
pusha
(bad)
pop
imul
dec
jae
dec
(bad)
int
pop
xlat
mov
iret
(bad)
call
imul
jge
scas
stos
xchg
or
and
dec
dec
test
jecxz
(bad)
push
scas
data16
out
sbb
push
(bad)
dec
lods
bt
jmp
jge
lock
popf
push
jns
call
mov
icebp
pop
jle
adc
fnstcw
loope
cmp
call
test
not
dec
leave
out
popa
frstor
nop
pop
sbb
in
rol
std
mov
pop
inc
daa
daa
psrlq
xor
ss
std
cmp
shl
loopne
fcom
fsubr
psrlw
ret
add
mov
jp
leave
fimul
mov
inc
jge
retf
aaa
loopne
jo
xor
mov
scas
add
cmps
push
jge
and
add
aas
sbb
call
and
aas
mov
leave
pop
ror
cdq
push
mov
xlat
cmp
xchg
scas
test
xchg
jns
xchg
mov
or
in
add
xchg
sub
jg
cvtps2pd
dec
jns
push
je
(bad)
fcom
cmps
and
add
mov
mov
std
in
leave
test
lods
mov
inc
dec
mov
add
in
(bad)
jo
mov
mov
jmp
test
lds
add
dec
loope
shl
inc
rol
clc
clc
jno
or
jae
ret
lahf
push
imul
inc
in
pop
jle
jne
xor
sub
cmp
and
jg
sub
or
push
cmc
shl
or
cmps
stos
dec
xor
inc
mov
loopne
cmp
cmp
dec
push
dec
xchg
ja
cs
je
mov
push
mov
dec
(bad)
cli
sbb
test
and
pop
pop
mov
add
bound
pop
rcr
repz
sub
dec
int3
jb
jp
jge
aam
gs
cli
push
mov
jle
out
lea
aam
test
and
cmp
adc
retf
mov
jno
aas
sti
shl
cli
inc
xor
test
std
clc
shl
xchg
bound
ss
imul
scas
lock
and
fld
int3
push
and
fstp
jne
repnz
sti
mov
fistp
bnd
jo
sbb
cmps
retf
cmp
xchg
cmp
lahf
mov
dec
imul
popf
cmp
and
pop
sbb
ret
dec
jmp
pop
inc
mov
sub
imul
aaa
(bad)
pop
push
mov
call
(bad)
lahf
imul
in
fst
mov
xchg
out
pop
outs
test
fadd
inc
mov
dec
pop
xchg
daa
and
outs
jl
test
mov
les
push
test
scas
xor
int3
cmp
out
mov
fdivr
js
jae
hlt
pop
ins
add
cmp
ins
rol
test
mov
aaa
je
ret
adc
out
pop
nop
jle
inc
(bad)
retf
push
xchg
inc
dec
out
and
xchg
pop
xlat
xor
mov
mov
pop
push
fwait
inc
enter
xor
pop
bound
out
popf
stos
jns
xchg
mov
sub
out
in
pop
popf
mov
mov
mov
and
inc
sub
mov
xchg
inc
cmps
cmc
test
loop
xor
dec
mov
cmp
in
or
and
pop
jo
std
push
cld
or
retf
stos
inc
add
cmp
mov
fcomp
push
xchg
loopne
popa
cwde
dec
mov
imul
inc
lea
ret
dec
mov
neg
push
enter
and
or
add
mov
xchg
aam
xchg
int3
fadd
or
dec
push
sbb
es
call
jae
push
test
mov
sti
shl
and
mov
retf
pop
pop
pop
fild
push
lods
in
icebp
gs
jo
shl
xchg
add
imul
push
push
pop
xor
adc
repnz
movs
xchg
mov
lock
in
or
call
adc
popa
pop
push
pcmpeqb
test
fld
cmp
or
out
or
push
call
mov
xchg
xchg
mov
mov
or
cmp
enter
bound
cmp
mov
xchg
pop
aam
popf
rcr
fdiv
stos
int3
in
dec
in
lahf
mov
jno
add
rcl
and
retf
pop
(bad)
dec
cmp
sub
movs
adc
push
push
push
add
fcom
out
jmp
neg
jno
mov
in
xor
jp
daa
arpl
(bad)
ss
xchg
inc
push
sub
sub
popa
pop
cdq
pusha
and
inc
in
jo
sar
mov
mov
imul
add
mov
sub
stc
pop
mov
push
nop
push
push
cli
icebp
dec
stc
inc
or
clc
push
pop
clc
data16
stc
mov
out
and
jae
outs
mov
mov
addr16
test
fwait
(bad)
and
aam
jae
and
cmps
sub
imul
popf
xor
xchg
scas
rol
pushf
retf
push
mov
pop
ret
add
add
add
or
hlt
int
inc
and
mov
jp
push
add
mov
outs
dec
pusha
or
retf
jl
sti
push
xor
and
cmp
jp
int
int
jae
pop
mov
cmova
sahf
adc
into
mov
or
sahf
adc
jg
je
cwde
add
and
xor
jl
aaa
mov
xchg
jno
sbb
adc
cmp
mov
pop
xor
mov
push
sub
in
in
imul
call
xor
stos
push
fst
aaa
rol
cmp
jmp
(bad)
mov
popf
dec
fsub
imul
dec
pop
inc
call
ss
xor
repz
mov
imul
nop
addr16
aaa
sbb
sbb
and
cld
fisub
dec
in
push
adc
out
ins
ja
mov
jns
sbb
jge
dec
jmp
push
std
jb
push
xor
sti
xchg
xchg
aaa
int
popf
jns
push
or
lea
mov
sbb
loope
pop
push
mov
sar
mov
jbe
mov
mov
cmp
pop
push
jnp
nop
(bad)
cmp
leave
adc
dec
ja
mov
push
les
xlat
outs
iret
test
sub
adc
repz
mov
aam
push
nop
sbb
mov
mov
mov
call
sar
into
stos
stos
movs
ds
fistp
loop
jnp
add
xchg
mov
or
data16
fsub
adc
mov
inc
ror
sub
pop
iret
adc
and
cmp
adc
lock
xor
(bad)
popa
or
leave
imul
push
jno
(bad)
repz
aam
es
and
cld
sbb
and
dec
mov
std
(bad)
fcomp
lahf
pop
jge
pop
or
inc
daa
ss
jnp
add
cmp
shr
cmp
inc
sub
mov
push
push
arpl
test
push
in
into
jo
cmp
fsub
addr16
pop
(bad)
jne
mov
mov
adc
push
mov
fild
mov
adc
outs
cmp
sub
(bad)
mov
cmps
jmp
pop
sar
mov
xchg
cmp
lock
mov
jns
pop
xchg
xor
(bad)
fidivr
retf
(bad)
mov
fwait
lahf
arpl
pop
movs
and
test
scas
inc
sub
add
xchg
aas
adc
stos
inc
sbb
not
push
push
mov
in
dec
jl
sub
call
pushf
xchg
mov
fistp
jp
data16
and
cmps
daa
gs
mov
ret
test
inc
add
add
jns
and
imul
stc
iret
push
into
ins
add
enter
clc
push
sub
cmp
cmps
pop
cmp
jle
add
ret
hlt
push
mov
mov
leave
pop
test
pop
sub
ss
mov
add
xlat
mov
je
sub
call
inc
aas
shl
push
repz
jns
mov
cmp
push
jb
jae
scas
outs
dec
adc
sbb
cli
loopne
xor
outs
int
cld
xchg
icebp
aam
xchg
imul
hlt
scas
retf
outs
cli
std
mov
push
xor
xor
mov
pop
(bad)
lock
nop
jmp
add
frstor
inc
dec
idiv
fidivr
pop
mov
cmp
stos
in
mov
push
mov
icebp
jb
out
(bad)
fcomi
les
or
cmps
out
fs
mov
sbb
cwde
pop
fs
popa
mov
inc
xchg
je
stos
fwait
dec
cmps
(bad)
lods
inc
mov
sbb
enter
test
ror
rcr
jns
xor
out
ret
xchg
adc
inc
xchg
xchg
scas
in
sbb
fs
or
mov
jge
inc
or
pop
fsub
xchg
add
add
mov
scas
xor
pop
test
cwde
sbb
and
xor
ja
je
scas
rol
cmp
pop
push
cmp
xor
or
and
mov
xor
inc
jno
or
mov
leave
or
push
cld
popa
xchg
daa
cmps
push
sub
call
inc
out
sti
sbb
inc
in
sti
mov
ffreep
or
or
stc
(bad)
scas
retf
aam
and
push
rcr
jge
or
inc
fstp
push
(bad)
pop
sub
dec
inc
or
mov
cmps
and
xor
or
ret
mov
out
xchg
push
jmp
or
mov
dec
inc
sub
xchg
pop
leave
fistp
stc
imul
dec
(bad)
xor
jns
movs
(bad)
std
mov
in
imul
imul
outs
sub
inc
(bad)
shl
mov
imul
jno
imul
cmp
pop
mov
and
jmp
xor
xor
mov
scas
xchg
int3
int3
sbb
add
add
jo
outs
lds
test
repnz
daa
ins
jb
mov
ror
and
and
outs
mov
aam
mov
enter
ror
xchg
pop
pop
cmp
xchg
sbb
loope
and
movs
cdq
fwait
call
inc
std
mov
push
add
cs
lea
pop
push
add
hlt
jne
adc
jnp
pop
shr
sbb
cmp
int3
jg
stos
call
leave
adc
add
js
and
dec
dec
loop
xchg
pop
xchg
jle
dec
xchg
(bad)
pop
jae
push
aam
dec
adc
adc
jl
(bad)
push
pop
or
aad
scas
bnd
test
stos
fistp
push
lea
xlat
and
test
add
add
inc
mov
gs
mov
xchg
iret
xchg
(bad)
out
in
xor
jno
pop
ror
dec
in
popf
hlt
sahf
in
lahf
movs
popf
retf
xchg
jbe
test
cmc
popf
push
dec
cli
sti
mov
xor
dec
adc
iret
jecxz
jg
or
xor
xchg
test
push
push
sar
ds
ins
call
pop
aas
int3
mov
jnp
popa
imul
pop
add
mov
frstor
(bad)
fimul
(bad)
xchg
imul
sub
arpl
jl
test
xor
mov
add
enter
pop
stos
push
adc
jmp
mov
cmps
mov
dec
add
std
dec
dec
hlt
jo
add
(bad)
pop
jae
sbb
cs
mov
xchg
jmp
pop
pop
push
dec
mov
bound
cmps
pusha
(bad)
imul
inc
test
out
cmp
add
mov
xchg
add
jecxz
and
mov
cli
aaa
sbb
ja
mov
lods
push
(bad)
js
je
cmovbe
jge
fs
cdq
or
popf
loop
(bad)
std
and
jmp
jmp
jl
push
mov
and
or
jmp
(bad)
fwait
pop
mov
jmp
icebp
xchg
dec
fidivr
leave
lods
movs
test
mov
icebp
xchg
cmps
call
out
mov
and
out
and
out
sbb
(bad)
in
inc
ss
mov
xlat
cmc
in
arpl
ror
and
shl
inc
cwde
loopne
cmp
sbb
adc
adc
sbb
(bad)
push
(bad)
imul
cmp
out
jo
and
sti
movs
add
fnstenv
leave
cmp
or
jbe
jmp
data16
sub
cmp
xor
mov
shl
jae
(bad)
sub
div
and
sbb
lods
pop
dec
push
popa
and
stos
cmp
dec
jne
fs
xor
retf
movs
and
inc
jne
into
xchg
or
(bad)
rcl
aad
std
fwait
mov
test
(bad)
daa
adc
mov
jb
or
inc
cmc
data16
push
jmp
popf
daa
les
jg
or
sub
push
cs
push
lods
and
mov
xor
jmp
imul
(bad)
(bad)
ds
ror
ins
or
xchg
ret
add
inc
enter
in
mov
xchg
stos
mov
adc
popf
xchg
xor
or
dec
mov
dec
cmp
mov
mov
scas
sti
add
movs
out
imul
dec
push
loopne
push
icebp
adc
lds
es
test
push
in
dec
sub
and
sbb
pushf
ja
bound
call
and
enter
ins
xchg
repnz
daa
imul
hlt
add
fistp
xchg
mov
mov
dec
in
inc
movs
ffreep
shl
mov
mov
dec
pusha
scas
fstp
push
mov
sti
popf
test
sub
mov
and
inc
in
imul
push
imul
shl
push
test
adc
inc
jp
mov
adc
aaa
call
(bad)
adc
pushf
add
cmp
sbb
pop
outs
fcmovne
test
jl
push
call
into
(bad)
adc
pop
int
pushf
sbb
jmp
or
push
repnz
dec
xor
cmp
xor
neg
je
xchg
cmp
dec
and
jge
add
sbb
fcmovb
push
cwde
mov
in
fnstenv
sbb
pop
jge
mov
push
cmp
jns
imul
in
jp
push
and
xor
lods
cmps
shr
fistp
mov
add
push
in
addr16
mov
ret
cld
adc
fstp
pop
push
inc
outs
bound
sar
inc
ja
mov
inc
scas
jg
sbb
or
retf
jge
es
call
add
aad
push
gs
jecxz
fldcw
test
mov
out
mov
add
and
push
addr16
fistp
mov
mov
movs
mov
mov
add
loopne
mov
xor
and
pop
add
shl
mov
mov
and
movs
scas
and
shl
loopne
test
mov
sbb
stc
cmps
sub
jno
xchg
mov
mov
cmp
loopne
sbb
ins
in
aas
adc
inc
push
outs
mov
rcl
push
leave
lahf
xor
sub
cmp
inc
cmp
or
(bad)
or
jle
lock
jmp
cmp
dec
cli
sub
pop
es
ss
pop
cmp
and
leave
adc
or
scas
push
bound
add
fs
mov
dec
add
xchg
sub
hlt
sbb
popa
div
int3
xchg
clc
mov
addr16
fistp
dec
push
mov
lahf
fist
jle
daa
dec
and
mov
jl
pop
cs
rol
ins
xor
push
(bad)
push
adc
(bad)
cmp
test
fcmovb
ins
sbb
cmp
mov
jne
mov
xchg
test
jae
cld
dec
push
jbe
adc
xchg
aaa
inc
imul
jmp
iret
xor
mov
xchg
ret
shr
or
push
outs
cmp
jnp
aas
popf
cmp
jae
cld
jg
mov
cmp
ret
dec
fwait
add
jno
daa
or
cmps
in
ror
mov
popf
cs
movs
or
xchg
ror
adc
xchg
int
outs
xchg
repz
in
mov
jne
scas
inc
data16
adc
fwait
lahf
add
enter
pop
sub
mov
fs
add
scas
sub
rol
or
mov
mov
inc
cmps
xlat
cld
pusha
fst
pusha
sahf
in
clc
daa
dec
jo
jge
or
mov
test
push
sbb
les
cmps
in
inc
mov
xor
ret
sub
jl
rcl
enter
pop
inc
adc
stc
push
out
(bad)
popf
aad
sbb
pusha
push
repnz
not
xchg
enter
mov
in
clc
loopne
mov
(bad)
popa
sub
pop
aaa
scas
lea
lahf
cmp
repz
pop
repz
pop
into
xor
mov
jns
test
xlat
mov
fcom
fs
ins
aam
cmp
lea
jmp
stos
add
int
or
mov
dec
int3
pop
cmps
mov
scas
cs
scas
sahf
jge
mov
ins
jb
(bad)
pop
retf
jne
ror
imul
aas
cmps
or
(bad)
inc
jmp
es
test
dec
mov
inc
fisttp
sahf
and
dec
inc
clc
dec
popa
mov
pop
cmp
ins
cmc
stos
(bad)
sbb
pop
cmps
lods
mov
stos
std
inc
repnz
jne
cmp
push
lods
xor
push
std
sbb
sbb
adc
or
pusha
pop
iret
enter
sbb
pop
stc
jg
jne
out
or
repnz
add
mov
test
fist
add
popf
push
aas
addr16
sub
outs
not
lds
lods
mov
add
js
mov
and
std
loop
mov
mov
aas
fild
addr16
mov
mov
push
push
lods
sbb
ins
lods
adc
dec
cmp
pop
inc
cmc
xor
fstp
ins
rol
ds
shl
rcl
mov
(bad)
mov
or
fidiv
test
sbb
test
adc
xor
jmp
not
push
mov
or
mov
sub
pop
out
mov
xor
sbb
mov
pop
aad
aaa
mov
fsub
cs
push
sbb
xchg
mov
mov
adc
fdivr
dec
jecxz
icebp
add
mov
push
jb
pop
ret
xor
pusha
popf
test
aaa
ror
xchg
mov
cwd
mov
xchg
out
mov
movs
add
cmp
xor
movs
pop
or
cwde
cmp
(bad)
stos
in
call
(bad)
fst
push
pop
jo
pushf
enter
jne
retf
cmp
js
shr
scas
ret
adc
inc
pop
or
test
sub
jmp
push
adc
dec
call
stc
mov
(bad)
test
cwde
cmp
sub
cmp
jmp
xor
pop
add
retf
cmp
inc
pop
cli
in
movs
ror
dec
stos
cmp
in
inc
jno
ffree
pop
push
fwait
adc
xor
in
aam
retf
mov
in
pop
shr
add
dec
pop
gs
daa
fwait
daa
ds
xor
pop
mov
scas
jge
xchg
nop
xor
rcl
or
or
mov
out
mov
jno
mov
push
push
cmp
xor
mov
xor
loop
add
leave
pop
pop
fs
(bad)
pop
movs
into
xchg
jno
pop
fs
loopne
sub
lea
push
inc
fmul
xor
push
mov
rcr
rep
sub
cs
in
popa
inc
ffreep
lods
and
jmp
sub
ret
mov
mov
xchg
xchg
mov
out
mov
or
addr16
outs
rol
inc
daa
loopne
jno
fcom
sub
dec
cmps
retf
cmps
inc
fwait
stos
jg
add
mov
inc
pop
jl
fsub
int3
cmp
loope
or
xor
inc
(bad)
stc
lods
in
sub
jbe
imul
jmp
cli
jle
shl
pushf
add
add
and
push
jae
outs
bound
sub
or
mov
fisubr
sbb
scas
hlt
and
xchg
push
push
cmp
add
mov
xor
cmp
sub
in
call
frstor
xchg
jnp
hlt
out
inc
inc
mov
daa
je
retf
fimul
lahf
push
je
in
nop
dec
outs
aad
jge
cld
sub
jno
out
pop
pop
jbe
stc
js
inc
ds
inc
cmp
loope
scas
sbb
mov
imul
cmp
jle
push
dec
mov
inc
cli
and
jne
pop
ja
mov
addr16
xchg
pop
mov
daa
pop
neg
jmp
ret
mov
add
jbe
mov
clc
movs
cs
push
mov
int3
push
or
je
jo
or
jno
dec
adc
or
sub
scas
mov
(bad)
test
jb
fadd
or
lahf
xor
aad
push
xor
call
dec
aad
sub
outs
cmp
shl
inc
ror
scas
je
pop
call
jnp
cli
les
pop
sbb
loope
call
mov
xor
loope
xchg
inc
sti
std
add
loop
pop
add
dec
jbe
sbb
xchg
retf
mov
add
imul
ins
dec
xor
push
in
out
pop
xor
clc
pusha
add
pusha
jbe
stc
(bad)
sbb
push
mov
mov
dec
dec
sahf
mov
mov
loop
daa
jge
outs
jmp
jo
ja
addr16
adc
out
jns
push
mov
dec
sbb
xor
push
push
push
adc
test
imul
call
pop
std
stos
add
ins
push
cwde
jae
lahf
jg
movs
js
fsub
pop
mov
and
pop
jbe
cwde
int3
movs
js
fs
or
outs
add
inc
ror
je
jb
add
sbb
in
mov
stos
imul
jecxz
jg
sbb
inc
fst
or
scas
ja
sbb
pop
stos
mov
int
repz
and
(bad)
in
call
inc
daa
ins
inc
or
ret
shl
sbb
push
cdq
out
ret
lods
imul
cmp
test
mov
loopne
mov
iret
out
jo
mov
popa
test
xlat
xor
rcr
jle
and
clc
shl
(bad)
cmp
out
not
(bad)
pop
call
jl
add
lock
xchg
ins
aas
ins
push
add
or
push
pop
push
popa
xor
stos
inc
movs
cli
cmc
jo
or
int
push
ss
int3
add
push
lods
and
cmp
xchg
inc
mov
mov
out
jno
push
mov
popa
push
fsubr
fdivr
inc
cmp
scas
xlat
sbb
push
ret
(bad)
icebp
data16
push
sub
push
shl
std
lahf
cld
loope
(bad)
fwait
cmp
mov
jae
and
and
das
xchg
mov
mov
lods
cmc
movs
push
rol
hlt
jnp
jns
scas
out
les
test
or
shl
dec
ror
movs
lds
push
push
inc
xchg
mov
xor
xchg
mov
in
aad
push
cmp
adc
jl
out
cli
inc
cmp
pop
dec
arpl
out
push
sti
icebp
bound
test
dec
arpl
or
out
sbb
mov
imul
std
mov
pop
test
xor
mov
mov
imul
das
jnp
daa
fs
mov
outs
push
test
mov
or
xchg
std
outs
xor
jae
and
push
cmp
mov
jae
cmp
push
or
clc
test
out
nop
push
add
xchg
mov
lods
inc
and
pop
or
cmps
int3
dec
xor
out
dec
sar
xlat
not
shl
pusha
cmp
add
push
sbb
dec
fisttp
adc
ret
stc
mov
call
mov
popa
mul
jp
std
sub
loop
jne
lea
je
mov
in
clc
jg
movs
mov
push
sbb
sub
ds
jmp
and
pop
mov
aad
mov
cmps
xor
fsub
popf
repnz
pushf
(bad)
cld
cdq
cli
add
push
and
xchg
mov
mov
stos
out
aad
or
and
pop
ret
pop
mov
inc
enter
pop
mov
dec
retf
pop
movs
xchg
pusha
pop
(bad)
mov
cmp
mov
stos
pop
dec
inc
rcl
fmul
test
imul
es
pop
dec
aad
(bad)
popf
aam
jle
push
jo
iret
pop
cmc
inc
mul
fimul
fs
je
mov
xor
and
cmp
dec
or
cmp
or
add
sbb
in
aas
in
mov
ja
xor
hlt
cdq
pop
fucomi
in
loopne
cwde
test
add
je
adc
or
adc
jbe
sbb
jg
hlt
mov
std
out
mov
xlat
jl
dec
mov
cmp
retf
or
nop
xor
test
mov
inc
dec
imul
movs
cmp
dec
mov
adc
enter
mov
mov
nop
ins
fwait
adc
jp
sbb
inc
jns
cdq
aam
cmp
or
jg
nop
mov
and
nop
inc
pop
xor
lahf
outs
je
frstor
sar
popf
add
pop
jns
movs
pop
dec
mov
xchg
add
jmp
scas
inc
push
hlt
test
shl
add
add
push
sbb
ffreep
mov
outs
idiv
dec
cmp
sub
js
gs
cmps
scas
sub
push
xor
call
dec
push
shr
es
pop
or
mov
and
inc
enter
aam
sbb
dec
sub
cwde
retf
ja
pop
shl
jge
div
ins
push
jae
mov
cmp
dec
test
lods
fwait
retf
adc
adc
fwait
xchg
hlt
pop
sar
adc
leave
sub
or
fld
cwde
adc
fisub
repz
sub
movs
pop
out
cmp
inc
sbb
aam
test
inc
in
cmps
pop
sub
ins
fnsave
cli
int
and
push
int
lock
push
ffreep
stos
bound
add
test
pop
pop
setbe
sub
cmps
aam
mov
pusha
pop
xor
or
pushf
rcl
mov
neg
test
cmps
in
fimul
cmc
cmc
jp
and
push
xor
or
fiadd
sbb
pop
jns
ins
push
sbb
daa
sbb
lock
push
addr16
daa
test
sub
push
fs
std
inc
popf
xlat
pop
push
das
in
sbb
je
inc
fcom
cmp
or
retf
mov
and
ins
mov
stc
popa
movs
xchg
(bad)
mov
ja
cmps
clc
add
push
push
(bad)
jmp
pop
retf
inc
mov
hlt
popf
and
xor
fbld
pop
mov
dec
and
icebp
lahf
leave
pop
mov
xchg
nop
loope
jecxz
push
mov
mov
inc
pushf
int3
popa
xchg
fcomip
mov
xchg
jne
xchg
cmp
ret
mov
xor
in
fnstcw
retf
and
scas
sti
xlat
xchg
xchg
inc
add
js
and
daa
lahf
imul
movs
leave
loop
mov
aaa
ret
fstp
cld
std
jecxz
mov
jbe
(bad)
fdiv
or
pop
jbe
dec
iret
iret
ror
cli
dec
arpl
push
mov
mov
test
sbb
or
jnp
push
shl
cmp
mov
call
mov
icebp
sub
out
fst
aam
inc
aam
(bad)
leave
(bad)
nop
mov
mov
cmp
inc
movs
pop
mov
sti
mov
mov
not
sub
lea
sub
cs
popf
dec
xchg
add
fwait
mov
js
in
je
pop
add
cld
test
jns
mov
mov
mov
sti
adc
(bad)
push
int3
sbb
mov
xor
outs
(bad)
lds
sub
(bad)
inc
add
mov
xchg
and
cli
add
jns
ins
pop
movs
dec
(bad)
inc
(bad)
fisubr
mov
xor
inc
or
cmp
or
push
push
push
rcl
dec
push
add
push
sub
ficomp
sub
or
xchg
gs
mov
es
dec
add
dec
cmp
je
leave
addr16
adc
aad
push
dec
mov
dec
mov
inc
mov
sub
jbe
mov
cmps
test
cs
movlhps
xor
sbb
cmp
mov
shl
mov
int3
(bad)
jne
mov
imul
push
jns
xchg
or
icebp
je
mov
push
mov
sti
cmp
das
add
xor
pop
cmps
jmp
je
stos
pop
popa
mov
loop
push
or
dec
out
jns
fcomi
xchg
inc
repz
push
fadd
sbb
mov
push
mov
inc
lock
ficomp
in
je
pop
pop
jno
shl
mov
mov
imul
std
jne
shl
mov
aam
or
inc
sbb
adc
or
lods
loope
xor
adc
jle
add
mov
pop
adc
mov
dec
jg
sti
fdivrp
test
mov
cdq
pop
jmp
jmp
jg
add
out
ret
sbb
outs
shl
aaa
pop
cmp
mov
cmp
aas
jns
mov
lds
xor
fwait
pop
je
and
or
addr16
retf
arpl
jmp
out
xor
and
inc
aad
sbb
fstp
repz
push
and
es
xor
inc
stc
jle
xor
ret
rcr
xchg
push
dec
in
push
inc
pop
sbb
ror
dec
jne
test
xchg
mov
inc
mov
icebp
repnz
lods
mov
pop
cmps
out
sub
xor
lock
xchg
into
scas
mov
mov
cmc
sub
jne
mov
xchg
xlat
out
pop
test
jge
ja
test
adc
repz
jb
sub
stos
outs
jp
sti
stos
sub
loope
xlat
jl
out
push
sub
pop
test
add
or
mov
xchg
sub
ins
sbb
dec
je
xchg
test
rol
and
pop
pop
pop
imul
jno
adc
sub
(bad)
add
xchg
pop
push
dec
jne
fadd
repz
push
cmp
pop
and
mov
mov
retf
push
mov
jl
clc
sub
in
add
aaa
fbstp
jnp
aaa
cmc
pop
jno
mov
sub
pop
cs
xor
cmp
and
mov
sbb
popa
mov
in
and
xor
cmp
lock
aad
ds
es
jp
xor
adc
nop
inc
jg
sahf
stos
jp
mov
sub
push
(bad)
cld
mov
loope
iret
add
movs
push
jb
mov
jecxz
dec
aam
push
mov
adc
cmp
or
test
jg
adc
mov
or
push
sar
mov
out
div
xor
mov
stos
push
cmc
(bad)
cmp
xchg
inc
adc
in
mov
add
or
mov
cli
in
jae
jle
add
push
mov
mov
test
lea
pop
and
sub
cmps
fadd
cmps
pop
in
outs
add
mov
mov
nop
test
mov
mov
arpl
test
jmp
xor
sahf
outs
jbe
cmps
xchg
adc
loope
mov
sbb
xchg
push
cmp
js
arpl
aaa
add
inc
jp
adc
stos
or
jns
dec
cmp
cld
mov
cmp
lods
daa
in
call
cmp
inc
jp
fwait
xchg
cld
dec
pop
inc
inc
dec
jge
inc
mov
imul
mov
inc
fild
push
inc
inc
retf
das
das
and
arpl
xchg
enter
cmps
cmc
dec
sbb
fs
aaa
jno
test
xchg
cmps
push
fisubr
call
test
mov
sbb
repz
inc
fsubr
push
adc
push
outs
cmovb
jp
scas
cmc
dec
mov
addr16
sahf
dec
pop
fcmove
cmp
lahf
push
mov
push
mov
pop
pop
mov
push
test
cwde
pushf
cwde
push
push
in
and
pop
dec
cmp
outs
aam
or
out
jmp
repz
retf
and
bnd
mov
jnp
aas
adc
push
push
sbb
hlt
jp
shl
jae
cmp
mov
lds
add
push
cmps
(bad)
sub
sub
fcomp
loope
or
cs
jl
int3
fiadd
mov
jmp
or
in
and
jns
stos
cmp
stos
lea
fistp
dec
imul
sbb
retf
cmps
pop
mov
clc
push
in
(bad)
mov
lea
sub
fdivp
repnz
mov
inc
neg
jmp
ret
(bad)
rcl
daa
or
xor
inc
pop
xchg
inc
in
(bad)
xor
sub
push
cmps
lods
cli
push
fwait
js
mov
mov
xchg
(bad)
jp
sbb
jb
inc
inc
inc
mov
jae
adc
(bad)
push
cs
cmp
shl
test
imul
or
mov
sbb
daa
leave
mov
push
in
rcl
hlt
xchg
fdivrp
inc
pop
ret
sbb
add
push
test
in
xchg
shr
sbb
bound
and
push
inc
pusha
cli
xchg
aam
xchg
pop
shl
in
lahf
push
shr
stc
or
cmp
cmp
cmp
into
and
xchg
push
jle
stos
inc
pusha
pop
(bad)
gs
lods
sbb
fcom
loopne
mov
mov
ss
mov
mov
add
jmp
mov
push
js
push
jp
xchg
stos
daa
fisub
pop
cdq
(bad)
adc
in
js
mov
add
ficom
imul
sub
test
xlat
jb
movs
sub
and
clc
movsx
test
add
xchg
bound
xor
mov
sub
pop
nop
in
(bad)
jae
inc
ja
pop
test
mov
ins
(bad)
push
cmp
xor
ss
stos
into
inc
repz
std
enter
dec
popa
in
xor
movs
scas
push
(bad)
mov
xchg
int
pop
cmp
push
cs
mov
push
inc
ins
int
cmp
cmp
je
clc
icebp
gs
inc
cmp
call
add
lahf
std
enter
int
inc
out
fsubp
into
out
mov
es
in
cwde
(bad)
out
sub
mov
arpl
movs
aas
mov
jbe
mov
imul
imul
movs
not
fdivrp
xchg
fsubr
pusha
dec
pushf
es
pop
push
jp
ror
sahf
arpl
mov
sub
pop
sbb
cmp
outs
fimul
(bad)
in
fdivrp
xor
pop
cmp
fistp
sub
aaa
sar
sbb
mov
cmp
push
div
loope
sti
lds
popa
pop
dec
stos
je
cmp
xor
cld
rcr
sbb
pop
pop
xchg
push
mov
sbb
dec
add
add
fsubr
dec
int3
aas
jb
lods
pop
lock
add
push
mov
popa
mov
gs
mov
push
in
pop
pop
in
mov
jecxz
and
scas
sub
mov
mov
sub
inc
je
xchg
imul
call
imul
xchg
adc
fiadd
outs
(bad)
lea
mov
cs
xor
hlt
jno
addr16
add
mov
jle
mov
fs
mov
je
xor
imul
pop
repz
loop
mov
icebp
xor
fld
dec
jle
or
and
jl
out
fbstp
ins
mov
std
fcomp
and
and
ficomp
xor
pop
jae
icebp
stos
or
xor
je
jnp
cwde
js
retf
push
lods
lods
adc
dec
or
mov
shl
fcomip
cli
cmp
mov
cmps
or
sub
nop
or
or
nop
mov
push
push
shl
int
cs
lods
mov
in
mov
sahf
addr16
das
cmps
mov
aaa
pop
mov
cmps
aaa
pop
or
data16
arpl
enter
ins
inc
out
add
stos
cmp
in
mov
test
push
push
nop
cmc
pop
inc
out
dec
jbe
mov
fimul
mov
fidivr
sub
push
jns
pop
xor
iret
lock
femms
sbb
sub
call
or
pushf
cmp
aaa
jp
enter
mov
add
test
mov
push
cwde
mov
pop
cld
inc
cld
sub
sub
pop
out
dec
xor
(bad)
push
pop
retf
fbld
jbe
bound
imul
sub
fucomi
sbb
mov
xor
dec
add
test
loopne
cmp
icebp
mov
retf
add
out
inc
ins
repnz
xor
loope
dec
fwait
add
in
ins
test
aad
or
hlt
dec
out
push
icebp
dec
pop
xor
and
mov
push
loop
aam
pushf
xor
mov
stos
inc
jp
cdq
mov
add
xchg
fistp
inc
jl
xor
cli
push
test
ss
(bad)
outs
push
sbb
jno
mov
jo
dec
repz
dec
add
jl
push
fmulp
pop
sub
inc
test
div
pop
imul
xchg
and
jo
cmp
sub
adc
(bad)
pop
outs
shr
in
setg
ds
pop
mov
xchg
hlt
ficom
ret
add
cwde
pop
das
jp
pop
and
test
inc
in
sub
mov
mov
jne
scas
xchg
lahf
test
jecxz
mov
les
xor
jae
sub
mov
mov
fmul
and
inc
fild
ds
in
jl
adc
cwde
imul
adc
xchg
cmc
test
lods
mov
inc
cmc
mov
xlat
mov
fmulp
mov
cmp
outs
mov
jmp
xchg
push
pop
mov
xchg
and
adc
cmp
dec
popa
test
xlat
(bad)
call
push
(bad)
jns
mov
(bad)
int3
xchg
mul
mov
or
dec
popf
add
lock
scas
retf
popa
(bad)
push
mov
sbb
mul
or
add
repnz
adc
test
inc
icebp
mov
mov
fs
mov
lds
pop
dec
ja
jp
shl
push
add
or
mov
mov
or
inc
cmps
sbb
stos
xor
sbb
xchg
call
mov
mov
in
inc
add
inc
mov
test
ret
xchg
repz
mov
mov
or
arpl
out
movs
mov
pop
sbb
xor
(bad)
and
fs
mov
jmp
pusha
(bad)
pop
(bad)
sbb
mov
add
stc
enter
pop
enter
inc
jno
mov
clc
xchg
add
into
stos
jae
pop
test
mov
jge
add
shl
mov
pop
or
jp
cmp
shl
xchg
or
mov
xchg
mov
sbb
fisubr
lea
imul
cmp
sar
idiv
mov
mov
cmc
ins
sbb
(bad)
sbb
sbb
retf
add
cmps
shl
mov
lea
call
add
popf
inc
into
ins
xlat
movs
cmc
outs
mov
cmc
xchg
ror
mov
or
and
lods
out
sar
sahf
or
adc
xchg
fild
stos
push
jo
std
or
mov
pop
xor
fs
test
or
push
sbb
jbe
pop
xor
fidiv
out
mov
out
shr
pop
cmp
xor
mov
pop
xchg
lock
push
and
inc
jb
xchg
xor
sub
dec
inc
lds
test
(bad)
test
cwde
and
inc
sbb
sbb
and
dec
jmp
(bad)
dec
das
mov
inc
cs
imul
jg
stos
dec
pusha
aas
mov
loope
fst
fistp
add
int
push
outs
push
dec
xor
push
bound
ja
aaa
adc
fmul
jne
fist
mov
mov
lods
sbb
mov
jo
jmp
pop
mov
fisubr
and
push
pop
mov
push
aaa
shl
pop
popf
sti
or
jbe
enter
cmp
adc
mov
pop
rcr
inc
and
in
loopne
dec
sub
xchg
inc
adc
xor
xchg
ret
aaa
push
outs
hlt
int
sbb
xchg
outs
je
inc
in
pop
mov
push
(bad)
dec
in
xor
dec
mov
cwde
dec
xor
ss
push
fwait
rol
jmp
adc
in
inc
hlt
dec
or
add
ficom
dec
scas
push
lods
mov
lods
add
cwde
ds
fsubr
sbb
jle
inc
cmp
dec
mov
repnz
jg
scas
aad
(bad)
xor
es
out
mov
pop
push
repnz
idiv
into
mov
sbb
pop
xor
sar
cmps
lea
xchg
sub
int3
stos
outs
xchg
ror
push
outs
or
xor
mov
retf
jno
loop
or
mov
clc
sbb
and
test
ret
sbb
xchg
stos
mov
push
sbb
imul
mov
sub
jb
mov
aas
or
and
sub
or
push
pop
push
pop
lds
mov
xchg
cmps
scas
mov
xor
cwde
addr16
out
push
jg
sub
rcl
xchg
ret
test
cmp
cs
dec
sub
ret
mov
sub
ds
leave
not
pop
(bad)
loope
inc
pop
cld
shr
pop
sub
lahf
clc
sub
sti
dec
jl
add
repz
lods
mov
daa
std
sub
push
call
dec
or
xchg
fcmove
rcr
adc
(bad)
outs
repnz
sahf
jp
movs
push
retf
xchg
push
push
jnp
aad
ds
ss
std
adc
xor
(bad)
xchg
js
mov
(bad)
call
test
adc
sbb
sub
or
lods
jnp
xor
hlt
and
sub
stos
push
pop
lock
loop
pop
dec
cmp
js
mov
imul
int
call
retf
fcom
push
shl
push
lods
dec
inc
inc
jne
xchg
cwde
pshufw
mov
(bad)
mov
jecxz
sbb
pop
ret
jecxz
push
adc
jne
dec
cmp
mov
test
add
mov
xchg
xlat
mov
test
mov
ret
push
inc
stos
retf
or
rol
xor
fisttp
mov
outs
cmp
test
xor
ins
inc
cmps
jae
pop
pop
mov
lds
xchg
bound
jp
jnp
shr
adc
ficom
pop
ja
fdivr
ret
call
pusha
stc
cmps
sbb
ret
pop
adc
es
imul
mov
or
xor
and
xor
(bad)
inc
retf
clts
imul
pop
push
cs
add
call
xchg
add
fist
push
aam
mov
push
repz
and
in
inc
aaa
mov
push
and
(bad)
imul
inc
add
movs
dec
or
out
dec
mov
ror
movs
jb
ror
sbb
sbb
push
(bad)
mov
sahf
repz
int
xchg
addr16
sti
aad
sub
stos
jmp
sub
aas
sub
(bad)
loopne
or
mov
lea
loop
ins
adc
test
(bad)
jns
inc
(bad)
daa
shr
xor
movaps
lahf
pop
rcr
jmp
dec
inc
xor
pop
dec
dec
add
iret
ror
mov
fs
xchg
inc
inc
rcr
push
dec
jmp
mov
sbb
xchg
or
test
les
cs
pop
xor
xor
gs
scas
mov
sub
lock
rcr
sbb
jmp
loopne
sub
mov
bound
xchg
pop
cmp
jp
mov
jb
cmp
mov
push
adc
or
inc
into
sub
aam
sahf
inc
das
sbb
xchg
hlt
dec
inc
loope
sub
outs
jb
aam
fs
test
pop
icebp
sub
arpl
push
inc
cmp
loop
ror
pop
mov
inc
fmul
dec
inc
adc
int
sbb
cmp
adc
push
dec
mov
lods
call
xor
sbb
cmp
pop
cmp
xor
sar
icebp
test
test
push
or
shr
int
out
rcr
jge
sbb
pop
test
sbb
repnz
push
das
in
and
xor
cmc
nop
imul
dec
or
mov
movs
dec
into
or
pop
in
inc
push
or
pop
dec
or
add
pop
adc
mov
xchg
mov
pop
or
movs
pop
jmp
pushw
sbb
xchg
mov
mov
lock
ss
add
(bad)
mov
retf
mov
and
mov
inc
scas
stos
mov
mov
or
mov
out
push
movs
jle
cmp
in
mov
in
cmp
cmp
cli
adc
pop
or
shl
sbb
ss
sub
(bad)
jmp
fnstenv
repnz
inc
or
or
push
sub
aam
aaa
push
(bad)
inc
int
mov
in
jecxz
lock
clc
inc
push
fiadd
les
aam
inc
or
popf
mov
out
fdivr
ror
mov
dec
(bad)
fild
lahf
cs
sub
add
not
retf
(bad)
(bad)
lods
mov
inc
les
mov
dec
and
sbb
push
jg
jmp
fdivp
mov
js
push
add
fidivr
aaa
sahf
jmp
ror
fiadd
fisub
push
cs
test
and
aad
mov
pop
lahf
stc
mov
ret
adc
xor
mov
loope
sar
stos
and
ror
test
out
mov
pop
pop
into
lds
int3
hlt
push
sbb
ss
js
add
je
in
xchg
imul
mov
aad
(bad)
push
inc
adc
lahf
add
jp
push
jmp
cmps
popa
lods
pop
cdq
lds
cli
std
out
cli
test
enter
add
cli
push
sbb
adc
mov
in
shr
cmps
pop
int3
js
mov
pop
inc
icebp
imul
movs
or
cdq
lea
xchg
jne
push
push
dec
cmp
pusha
mov
add
mov
fdivp
or
pop
cs
or
enter
outs
hlt
out
and
rcl
ja
cdq
jmp
push
sbb
jmp
push
js
push
adc
or
cmc
sbb
push
jbe
or
pop
test
add
jb
xor
gs
ins
pop
nop
jb
or
push
sbb
pop
jne
iret
sub
mov
call
mov
stos
mov
xchg
pop
lods
jle
lahf
rol
outs
push
mov
scas
dec
pop
cmp
in
daa
sub
out
jnp
(bad)
and
lahf
xchg
(bad)
retf
call
(bad)
add
es
pushf
arpl
cli
sbb
mov
in
out
xor
ds
fsubr
movs
mov
cmp
(bad)
and
mov
(bad)
repz
leave
aam
add
bound
mov
mov
jnp
sbb
pop
call
mul
sub
mov
and
sahf
int3
or
inc
iret
and
repnz
daa
mov
dec
mov
in
in
push
jae
gs
xchg
inc
repnz
cld
in
sahf
test
add
pop
xchg
mov
jbe
mov
mov
push
fxch
dec
or
inc
ins
mul
iret
and
(bad)
mov
data16
xor
fs
aad
mov
push
test
mov
out
mov
daa
push
mov
into
(bad)
cs
jo
or
xchg
lods
leave
pop
pushf
pop
cmp
inc
mov
inc
xor
mov
std
ja
xor
inc
bound
cs
pop
add
dec
in
fisub
sbb
pop
dec
loopne
cmp
inc
push
and
push
push
sbb
test
cli
fxch
and
and
jo
xchg
ins
inc
push
xchg
ret
push
jo
cmp
pop
mov
dec
call
xor
xor
ja
push
ds
add
(bad)
ja
xlat
cmc
pop
test
xchg
pop
fsubr
repnz
sbb
repnz
and
inc
sbb
mov
xchg
cmp
outs
sub
mov
out
mov
adc
daa
mov
dec
nop
addr16
xor
xchg
pop
add
dec
repz
jns
dec
aad
enter
push
(bad)
push
mov
out
sbb
popf
aas
ret
movs
in
mov
fcomp
into
cmp
cdq
shl
jnp
test
push
sbb
xor
or
lahf
xchg
jge
sbb
ja
leave
inc
mov
jg
sbb
loop
and
dec
lock
sbb
dec
mov
xor
or
xchg
jns
movs
jbe
loopne
dec
das
dec
cmps
jmp
lock
les
push
push
int3
push
vaddsd
mov
and
sahf
ins
xor
sbb
mov
sub
popf
pop
pop
add
mov
int3
dec
repnz
loop
ja
aad
pop
sub
jl
add
pusha
jns
popa
fsubrp
pop
fstp
rcl
jne
ja
cmps
mov
cmp
or
inc
xchg
fld
fild
cmc
adc
add
into
jo
adc
out
cwde
imul
mov
repz
xor
jmp
out
xchg
test
pop
or
xor
sub
nop
loope
pop
movs
dec
shl
cli
stos
xchg
add
call
hlt
push
cli
sub
idiv
sbb
daa
inc
es
loop
cmp
cdq
pop
jbe
jne
sub
xchg
je
pop
lods
inc
pushf
jbe
cli
inc
add
add
ret
mov
stos
xchg
jae
sub
and
sub
mov
or
fild
or
dec
je
fwait
mov
mov
cmp
and
or
dec
icebp
mov
jl
out
jecxz
jno
in
leave
cmp
or
ret
push
mov
leave
rcr
push
sti
dec
pop
xor
mov
scas
inc
(bad)
outs
sbb
pop
loopne
jge
mov
inc
aaa
cld
pushf
sar
mov
jl
or
jnp
dec
xchg
aaa
jmp
stos
jmp
lods
xchg
jnp
adc
int
popa
mov
jge
cmp
in
fwait
add
xor
and
xor
and
or
in
enter
ret
cli
mov
sbb
and
(bad)
cmp
imul
cdq
(bad)
test
fwait
xlat
adc
sti
pop
pop
jae
push
push
je
outs
ret
pop
cmp
xor
ja
push
push
mov
jle
(bad)
jae
sub
repz
jp
bound
pop
or
mov
popa
or
or
jae
(bad)
cmc
out
fisubr
mov
(bad)
stos
ret
adc
mov
cmp
test
sbb
mov
scas
mov
sub
mov
jne
test
jecxz
rol
in
les
lea
adc
clc
fldcw
ja
push
test
ret
enter
and
in
outs
div
sub
mov
retf
sar
in
sahf
adc
jmp
stc
loopne
not
cmp
loopne
dec
daa
lock
and
icebp
out
mov
aas
lock
pop
cmp
xor
sub
mov
xlat
ins
test
outs
stc
xor
dec
xor
sbb
or
push
ret
push
imul
pusha
or
sti
int
gs
adc
and
add
(bad)
cld
jo
sub
jg
(bad)
jno
fs
lods
mov
(bad)
icebp
xchg
inc
aas
hlt
dec
lock
fsubrp
mov
je
mov
fld
std
push
mov
or
mov
repnz
adc
pushf
xchg
sahf
mov
scas
sbb
mov
add
or
ss
std
jnp
sub
hlt
adc
dec
je
adc
loopne
dec
nop
clc
clc
(bad)
pop
mov
jnp
mov
xor
cld
icebp
add
jmp
sbb
in
loop
bound
aam
les
xchg
pushf
out
or
hlt
or
das
jbe
xchg
adc
adc
and
cdq
jl
sbb
repz
bound
or
fwait
shl
xlat
lods
pop
aaa
mov
lea
cmps
scas
(bad)
fbstp
xor
addr16
hlt
jo
imul
daa
ror
sbb
retf
add
sar
and
test
mov
repnz
pop
loop
push
(bad)
(bad)
ss
dec
sub
xor
gs
ror
sub
outs
mov
(bad)
mov
xor
pushf
shl
in
test
out
add
addr16
xchg
sbb
and
aas
neg
aaa
cmps
rcl
ja
lock
mov
mov
mov
or
mov
sahf
(bad)
ds
mov
adc
scas
fcmovnbe
pop
jl
cmp
ficomp
imul
push
int
xchg
in
push
mov
nop
ds
jo
mov
mov
mov
xor
rcr
(bad)
cmc
mov
mov
lods
sub
and
xor
push
push
or
mov
dec
add
js
jnp
and
cmp
adc
jo
mov
xor
pop
in
mov
imul
xchg
cmp
sub
push
add
in
js
dec
add
jp
sbb
xor
add
call
xchg
jg
xor
and
xchg
and
fnstsw
retf
add
mov
iret
sbb
add
dec
or
into
loope
push
not
jmp
xchg
or
pop
push
fidiv
call
or
movs
les
mov
cmps
dec
xchg
lea
nop
inc
ins
sub
into
loopne
mov
and
inc
rcr
loopne
leave
mov
sti
or
dec
cmp
outs
daa
shr
das
fwait
mov
pop
xchg
sbb
push
gs
dec
pop
fld
(bad)
dec
inc
add
popf
push
mov
add
ret
xlat
cmp
stc
aas
pop
fincstp
loope
dec
xor
sub
(bad)
pop
out
mov
add
xchg
jne
je
iret
inc
pop
lahf
add
lods
xor
lea
xor
loope
adc
js
js
(bad)
arpl
pop
push
iret
dec
mov
or
sub
popa
inc
sub
cmp
and
neg
mov
pop
inc
fiadd
mov
lahf
inc
daa
push
retf
imul
sbb
cmps
pop
mov
(bad)
std
lahf
popa
mov
and
push
mov
imul
jnp
and
scas
int3
pop
add
mov
(bad)
pop
jp
nop
mov
out
xchg
icebp
pop
lock
aad
adc
add
mov
rol
es
(bad)
aad
out
out
dec
mov
cmp
je
aam
sbb
and
push
imul
sub
rcr
jno
(bad)
sub
xor
nop
int
fsub
push
rol
mov
out
cwde
test
mov
mov
pushf
dec
or
scas
cmp
push
push
sub
lods
mov
xchg
movs
or
shl
pusha
(bad)
lds
lods
dec
or
adc
outs
cli
mov
(bad)
stc
pop
pushf
inc
es
test
arpl
push
push
icebp
jg
imul
popa
pusha
inc
xchg
call
adc
out
mov
aam
dec
adc
jge
(bad)
and
jl
out
and
ficom
dec
mov
push
repnz
out
and
and
cmps
loopne
add
jbe
jp
cmps
fwait
or
sub
out
loopne
aad
(bad)
cld
(bad)
cld
or
retf
sbb
pop
mov
jo
jne
pop
pushf
dec
fdiv
xchg
sub
ret
dec
lods
cmp
je
or
call
(bad)
and
aas
cmp
test
addr16
test
dec
xor
pop
icebp
fdivr
push
mov
out
jp
xchg
in
jae
jae
jne
in
repnz
jmp
fimul
fisubr
repz
adc
inc
pop
js
mov
loopne
test
add
cmp
fs
mov
nop
jg
inc
in
mov
mov
pushf
cmp
es
jge
cmps
mov
out
push
inc
jo
das
sbb
ins
pop
or
rcr
or
gs
(bad)
jbe
clc
push
nop
fidivr
scas
fnstsw
fisttp
outs
shl
cmps
pusha
push
sbb
imul
mov
clc
fmul
daa
outs
das
int
jge
test
retf
sti
stc
pop
icebp
mov
xor
xchg
scas
cli
xor
fs
in
cli
les
push
jae
stos
mov
push
push
and
add
imul
adc
(bad)
loopne
inc
jl
pop
mov
aaa
or
das
loopne
out
outs
push
cld
or
dec
and
push
jl
(bad)
push
loop
adc
dec
test
(bad)
loope
sbb
imul
stos
mov
(bad)
stc
(bad)
cld
pusha
loope
dec
(bad)
mov
xor
sbb
dec
test
push
gs
mov
xchg
rcl
xor
pop
and
ja
fwait
outs
es
sub
repnz
imul
rcl
fcomp
das
adc
mov
cli
test
cs
pop
mov
jno
ror
je
int3
lods
sti
push
rol
outs
sbb
cli
sbb
inc
lods
mov
push
pop
cmp
ds
xor
aas
add
xchg
jl
add
adc
loopne
pop
jbe
inc
xchg
pushf
das
or
jb
retf
fild
cwde
xor
arpl
outs
adc
movs
jne
dec
pop
push
and
inc
dec
sbb
test
gs
test
rcl
xchg
psubq
or
in
sbb
push
cmps
jbe
gs
mov
xor
push
jp
xchg
adc
push
inc
adc
popa
jbe
add
jg
in
leave
pop
inc
cmp
ror
xchg
jmp
push
fild
inc
jl
nop
xor
push
outs
adc
mov
sub
sbb
call
xor
popa
jo
iret
clc
cwde
(bad)
scas
jge
jmp
dec
sbb
fsub
mov
fs
mov
and
mov
push
sub
mov
shr
xchg
lods
xchg
mov
sub
xor
push
inc
cwde
ds
mov
sbb
std
mov
bound
into
adc
inc
scas
inc
pop
lods
mov
or
fild
iret
mov
js
iret
imul
pop
pop
and
pusha
pop
adc
mov
fstp
pop
push
pop
daa
jo
mov
sub
jmp
stc
mov
and
loopne
add
cmp
and
cmp
dec
addr16
int
test
ucomiss
dec
pop
cmps
rcl
xor
lods
in
and
or
iret
xchg
(bad)
jno
inc
fmul
mov
xchg
inc
sub
jb
jmp
iret
ret
and
loopne
out
stos
push
and
rcr
les
inc
mov
jmp
je
cwde
xor
or
pop
add
xlat
xchg
mov
loopne
xor
mov
test
(bad)
and
enter
(bad)
imul
retf
xchg
and
arpl
adc
div
or
shl
push
daa
lock
scas
adc
stos
movs
adc
ins
mov
pop
retf
(bad)
xchg
cli
rcl
jns
xor
xchg
fwait
or
dec
stos
mov
in
lods
dec
std
div
or
(bad)
stos
data16
push
(bad)
mov
pop
and
sar
jmp
cmc
addr16
push
xchg
pop
pop
fsub
test
lds
jecxz
jae
pop
jecxz
in
push
lock
push
cs
not
add
xchg
addps
shl
std
dec
push
nop
mov
inc
jp
add
pop
lods
add
or
mov
sub
dec
das
xor
sbb
test
push
sub
pop
mov
mov
mov
push
pop
add
add
push
mov
rol
and
push
std
les
(bad)
mov
xor
shr
(bad)
xchg
fst
popa
jp
ror
xor
gs
les
(bad)
and
shr
push
das
sub
push
das
shr
std
inc
cwde
int3
mov
cs
mov
mov
inc
xor
leave
inc
and
mov
sbb
adc
cmp
and
iret
hlt
shr
stos
jo
mov
in
push
inc
xchg
add
(bad)
aaa
and
dec
mov
jl
(bad)
ins
retf
cld
scas
js
xchg
pop
loopne
ret
push
pop
sub
jo
and
jno
fsubr
jbe
pop
or
push
lock
mov
inc
scas
test
mov
sbb
jmp
push
sbb
ins
test
xor
mov
lods
bound
xchg
and
jl
(bad)
lock
adc
ss
shl
sub
stos
mov
icebp
inc
repnz
dec
cwde
jle
dec
mov
or
xlat
sbb
pop
add
in
mov
call
mov
test
xor
fisub
pop
add
cmp
xchg
ins
popf
jmp
or
sbb
pop
mov
rcr
pusha
lea
shl
stos
xor
repnz
fistp
mov
cmps
fisubr
pop
mov
xor
fiadd
dec
pop
aaa
xor
pop
or
test
fisub
lahf
xchg
xlat
outs
pop
dec
pop
sub
dec
aam
into
mov
test
fs
inc
pop
in
scas
add
(bad)
retf
ja
sub
inc
sbb
xor
repz
ds
fcomp
mov
in
sti
xor
lock
ja
sub
popf
imul
mov
test
mov
imul
retf
sub
mov
in
rol
(bad)
loopne
mov
push
inc
sub
lea
in
sti
xchg
cli
ja
push
sub
or
rcr
adc
mov
sub
in
mov
jno
ss
fsub
dec
movs
add
call
repz
jne
push
adc
xchg
imul
add
ss
fisttp
sub
repz
push
jg
lds
addr16
outs
xor
cwde
sbb
adc
mov
shl
xchg
shl
cmp
dec
and
adc
sub
clc
fimul
xchg
shl
and
dec
pop
jg
bound
mov
mov
out
xor
movs
xchg
daa
in
fist
ja
repz
retf
loope
pop
mov
outs
and
(bad)
push
das
dec
xlat
stc
rcr
aas
xor
lahf
dec
sbb
pop
popf
js
imul
or
xchg
dec
xor
or
ja
push
or
aaa
jmp
push
sbb
xor
xor
clc
xchg
(bad)
jnp
(bad)
repz
and
pop
sar
add
sbb
movs
daa
ret
imul
cmp
mov
(bad)
out
sti
fnsave
jae
xchg
push
mov
dec
out
xor
or
sub
clc
mov
es
outs
pop
test
cmp
inc
xchg
jecxz
jmp
xchg
inc
and
fsubr
pusha
mov
repz
and
mov
out
in
sub
mov
fist
inc
sti
jp
sti
stos
jne
dec
jbe
sbb
xchg
loopne
pop
or
inc
and
cli
jno
pusha
cmp
iret
adc
adc
lods
mov
cs
mov
jo
std
cmp
sbb
dec
sar
mov
lea
pop
stos
jae
push
add
movs
shl
mov
mov
sub
pop
cmp
cmp
or
xor
and
sbb
lods
xchg
scas
loope
jae
inc
xor
mov
pop
gs
outs
cmp
cmp
mov
retf
adc
cmp
xchg
push
adc
xchg
jbe
xchg
(bad)
add
dec
js
xchg
or
mov
push
iret
std
jne
(bad)
out
ror
or
div
sbb
pop
inc
arpl
in
pop
ret
lods
jp
repz
aas
mov
pusha
call
js
fwait
mov
sahf
sbb
(bad)
int
push
xlat
jp
fnsave
dec
arpl
aad
pop
call
or
scas
dec
cmp
es
add
fnstenv
lahf
jns
dec
test
jno
ror
add
adc
ins
inc
(bad)
add
outs
xor
stos
adc
xchg
or
pop
scas
in
test
push
enter
shr
jno
bound
cli
enter
and
(bad)
int3
addr16
sahf
pop
add
pop
add
fwait
jmp
or
(bad)
cld
sbb
push
bound
and
aam
xchg
int3
pushf
mov
fadd
pop
xchg
mov
cdq
xchg
add
push
mov
rol
sbb
cmpps
mov
jmp
mov
sub
mov
aad
(bad)
repnz
sub
les
mov
jecxz
mov
shl
sub
inc
xchg
js
xor
data16
pop
pop
jp
xor
and
retf
fld
popa
dec
repnz
pop
unpcklps
or
sahf
or
and
in
imul
sbb
and
mov
mov
mov
ret
mov
xor
sub
das
inc
retf
xor
xor
cmc
test
jbe
dec
ins
xor
or
dec
fwait
mov
pop
cmp
pop
jmp
int3
cwde
mov
jbe
dec
jb
push
pushf
jmp
inc
sub
dec
dec
fdivp
push
repz
fisubr
push
xor
push
sbb
cmp
xchg
cmp
mov
cmp
cmp
mov
mov
adc
add
in
bnd
mov
pop
and
imul
jbe
sub
je
dec
sub
sub
xor
rcl
jne
mov
stc
loopne
lea
fwait
mov
call
sahf
movs
out
std
rep
popf
cmp
add
inc
aas
cld
mov
jp
fptan
retf
out
mov
jne
cmps
dec
fcmovne
xor
retf
lds
mov
out
pushfw
retf
lea
mov
ins
jecxz
sub
imul
mov
cdq
dec
and
mov
xchg
xor
and
mov
into
or
xchg
or
xchg
pusha
xor
(bad)
jmp
fxch
xchg
retf
push
jne
outs
xlat
jg
and
lea
test
rcr
jge
xchg
(bad)
dec
mov
outs
dec
or
mov
and
ins
jns
jns
xor
setle
stos
push
cmps
clc
data16
mov
sbb
mov
cmc
out
addr16
(bad)
add
mov
push
cli
sbb
sbb
jo
dec
fs
lea
ds
mov
mov
pop
loope
dec
cwde
cmp
or
push
imul
jp
arpl
add
scas
add
mov
xchg
and
iret
icebp
mov
sbb
adc
mov
neg
push
and
push
lea
or
test
lock
nop
xor
pop
push
pop
ss
jle
stos
mov
xor
jl
sbb
push
mov
fdiv
sbb
loopne
call
lods
ds
(bad)
out
push
movs
lds
jnp
dec
pop
jmp
pusha
or
les
pop
jns
adc
(bad)
fld
(bad)
addr16
cli
adc
jo
repnz
mov
dec
aas
mov
jmp
cwde
add
inc
cmps
jne
adc
fistp
ds
leave
(bad)
out
(bad)
xchg
sub
or
inc
in
jns
add
add
mov
xor
jmp
adc
sub
fmul
inc
cwde
jge
popf
test
enter
mov
shl
jecxz
xlat
shr
mov
push
cmp
(bad)
mov
dec
fcom
jmp
std
mov
repz
cmps
not
or
add
mov
sar
retf
mov
call
sahf
fwait
out
retf
(bad)
mov
mov
cwde
js
or
imul
adc
or
xchg
pop
pop
mov
or
jecxz
mov
mov
and
xlat
cli
dec
in
ds
or
jns
adc
pop
inc
and
imul
fistp
jo
jno
imul
add
int3
push
xchg
test
retf
jbe
mov
mov
inc
aam
inc
jnp
and
pop
push
jns
cs
pop
enter
cmp
xor
out
jb
call
cmps
mov
in
movs
dec
xchg
cwde
push
pop
pop
imul
mov
test
and
rcl
enter
cmc
pop
popf
cli
mov
les
out
mov
mov
bound
mov
mov
cmp
or
fld
iret
js
push
test
lea
dec
ss
jmp
jae
sub
out
lods
sahf
jle
mov
inc
or
arpl
jle
in
sbb
je
aas
adc
inc
add
jecxz
fld
in
jno
neg
repz
cmp
movs
icebp
dec
cmp
loopne
es
xchg
and
shr
es
fst
mov
xor
sub
aam
pop
sub
and
add
mov
mov
and
cdq
fdiv
pop
js
mov
test
stc
cmc
fldenv
mov
push
inc
pop
shl
adc
int3
xchg
push
mov
stos
lahf
or
je
sub
(bad)
sar
push
movs
dec
sub
lock
inc
lods
push
(bad)
jmp
push
xchg
fnstcw
mov
mov
(bad)
jae
iret
dec
scas
adc
jnp
int3
push
xor
pop
retf
test
push
sub
jb
imul
lock
xchg
push
scas
ret
pop
cdq
lock
imul
xor
mov
sahf
movs
arpl
inc
std
xchg
pop
jb
inc
sub
push
xor
cli
pop
xchg
or
xchg
mov
lock
test
push
aad
mov
imul
xor
mov
ds
dec
jne
cmp
xchg
jo
aad
fst
loop
adc
mov
call
loop
iret
clc
out
test
jns
inc
push
cmp
and
cmc
fcomp
dec
pop
(bad)
loopne
loop
(bad)
and
cmp
aad
out
xchg
adc
out
and
adc
retf
fnstcw
sub
xchg
ret
sub
inc
lods
cmp
cmps
fwait
jge
push
into
or
retf
and
pop
push
lahf
mov
push
addr16
mov
ja
hlt
fs
jno
mov
xchg
push
sbb
and
dec
imul
pop
inc
pusha
cmp
xchg
sub
inc
dec
pop
into
push
xchg
push
es
fist
mov
mov
sbb
bound
gs
adc
movs
ss
sbb
xor
test
add
cmp
mov
mov
push
sbb
fst
(bad)
lods
sub
inc
sub
cmp
adc
out
popf
sbb
int
jns
fs
jae
and
sbb
and
adc
fmul
ins
retf
inc
cmp
add
popa
pop
jl
push
ins
or
dec
xchg
repz
das
(bad)
loope
xor
add
rcr
bound
dec
or
adc
ins
mov
stos
jns
nop
imul
sbb
sbb
xchg
mov
sbb
ins
mov
mov
pushf
sbb
cmp
xchg
fucomi
jnp
xchg
fwait
xchg
mov
popf
mov
jmp
xchg
test
jl
jg
shr
loope
and
fild
and
xchg
repnz
test
jno
(bad)
mov
movs
shr
out
dec
fldcw
int
hlt
mov
sar
add
mov
in
scas
mov
mov
pushf
loope
sbb
push
fwait
shl
xor
test
and
mov
pop
pop
xchg
in
sar
(bad)
rcr
pop
bound
scas
sbb
sub
cmps
mov
mov
inc
mov
cld
mov
rcl
mov
mov
les
ror
shl
jo
or
push
mov
mov
por
xchg
lea
cmp
rcr
lahf
mov
add
sar
hlt
mov
in
inc
movs
into
jge
jo
jb
ins
adc
jne
jbe
lods
and
sub
fs
test
jg
js
adc
ins
and
mov
sbb
out
clc
push
mov
jge
(bad)
lea
adc
std
mov
or
call
movs
mov
cmp
dec
push
xor
lock
pop
fsub
ins
fucomip
pop
sub
sub
mov
inc
add
and
aam
jmp
stc
xchg
inc
out
dec
mov
fucom
jp
push
es
push
fs
push
add
test
out
out
ror
pop
cmps
xchg
push
or
mov
sbb
fdiv
test
cli
jo
out
pop
out
stos
pop
mov
ss
fidiv
clc
sbb
cmps
ds
dec
mov
adc
jo
mov
push
or
mov
stos
push
imul
jmp
sub
in
addr16
data16
mov
jnp
push
sbb
into
stc
fld
xchg
adc
cmps
arpl
adc
xchg
sbb
ja
in
int3
test
pop
xchg
fidivr
test
fstp
jecxz
adc
(bad)
adc
aaa
jo
dec
shl
push
cmc
fstp
sub
mov
adc
xor
out
js
xor
in
ret
not
pop
and
xlat
dec
mov
xor
pop
mov
aas
fstp
clc
add
lods
fmulp
xchg
retf
mov
jae
jle
inc
push
cmps
hlt
popa
imul
ins
aad
dec
bound
adc
mov
test
dec
pusha
sbb
iret
add
cwde
out
push
out
(bad)
mov
ret
test
or
in
jle
mov
retf
in
test
sbb
loopne
adc
or
int3
jnp
jbe
daa
je
jno
(bad)
jle
scas
add
clc
push
es
and
adc
xchg
mov
mov
xchg
out
dec
jecxz
xchg
and
add
jno
cmp
push
lds
shl
test
dec
adc
sbb
mov
xchg
or
movs
loopne
xchg
push
es
(bad)
mov
push
jno
inc
mov
sbb
jne
jmp
retf
stos
dec
sub
aad
retf
jg
sub
ja
xlat
jno
packssdw
nop
add
mov
leave
imul
pop
fimul
xor
cwde
pusha
xor
lds
cmps
out
adc
shr
cwde
and
outs
test
lods
cmc
in
mov
lds
xor
dec
xchg
fsubr
xchg
scas
movs
sub
mov
iret
std
jp
dec
pop
push
in
push
lock
adc
jb
icebp
(bad)
ins
xor
sbb
sbb
jb
out
xlat
jecxz
mov
out
mov
push
adc
and
into
push
cwde
int
arpl
aad
adc
rcl
retf
and
jg
stos
xchg
iret
or
dec
fistp
mov
cli
add
or
pop
imul
addr16
out
test
xor
mov
stos
push
add
scas
pop
add
mov
icebp
pop
fwait
add
bound
pop
push
mov
cdq
outs
jecxz
mov
add
test
retf
popa
movs
pop
inc
add
or
clc
aas
(bad)
call
inc
push
(bad)
mov
retf
enter
jb
cmp
mov
pop
push
jnp
jne
dec
fldcw
icebp
in
not
push
cmp
les
jnp
inc
pop
inc
inc
cmp
mov
pop
clc
dec
fcmovb
mov
jge
pop
cmp
mov
add
ss
hlt
test
popa
out
cmp
push
pop
mov
cmp
sahf
jne
std
jle
movs
mov
mov
test
xchg
push
out
imul
pop
pop
out
mov
bound
stc
push
cwde
inc
cld
push
cld
sub
jl
sbb
sahf
int
jmp
and
dec
movs
inc
xchg
jmp
pop
lock
dec
or
aad
adc
adc
push
sbb
movs
test
jnp
pop
dec
or
and
jns
inc
fstp
loopne
out
jne
dec
inc
int3
(bad)
jmp
cmp
fwait
adc
cmc
mov
mov
inc
xor
pop
inc
dec
push
mov
xchg
inc
xor
stos
js
out
pop
sahf
dec
test
cmp
sbb
inc
cli
fisttp
stos
sbb
out
inc
inc
push
xchg
pushf
mov
fadd
and
sbb
pop
daa
test
imul
inc
ret
fdivr
and
je
mov
push
sub
mov
and
push
jp
retf
mov
iret
adc
fcom
or
dec
sub
pusha
test
push
clc
add
and
inc
fsubr
test
icebp
int
adc
xchg
icebp
(bad)
pop
dec
dec
pop
in
stos
push
jne
jmp
jge
ret
pop
pop
lods
(bad)
in
jbe
mov
jne
cmc
lahf
or
xor
repz
mov
mov
xlat
retf
cli
sub
xchg
mov
out
fld
pop
(bad)
sub
ds
(bad)
loop
mov
movs
outs
add
mov
push
cwde
jp
sub
pop
push
stos
or
fscale
int3
and
shl
repz
and
xchg
leave
scas
inc
sar
mov
scas
mov
cmp
mov
lahf
xor
sti
mov
sar
pop
test
or
ret
add
shr
xor
in
sbb
adc
fisubr
in
sub
push
call
push
push
inc
out
test
jmpw
dec
and
mov
inc
mov
mov
cmps
icebp
push
push
dec
xchg
or
push
call
ins
icebp
je
ret
inc
or
cmp
ja
pop
mov
cmp
neg
les
xchg
ins
scas
jae
or
mov
mov
jp
xchg
retf
jmp
repnz
test
out
add
lahf
cmp
jecxz
ret
clc
sahf
(bad)
int
add
in
bound
test
paddusw
jnp
dec
shr
cmp
mov
std
sbb
jb
cld
movs
imul
xlat
das
ja
cmp
and
add
cmc
pushf
mov
pop
xchg
xchg
into
and
xor
jecxz
test
aam
repnz
xchg
movs
jns
(bad)
and
ins
pop
ss
ror
inc
pop
inc
js
ins
push
sub
aas
jg
mov
cmp
loope
test
sbb
icebp
sahf
arpl
std
shr
daa
retf
mov
nop
inc
pop
cdq
ds
push
sub
ins
repz
and
cld
(bad)
gs
cmc
sbb
nop
call
es
je
xor
inc
jg
cdq
xor
ror
movs
jns
pop
mov
mov
xadd
dec
std
dec
scas
pop
dec
cli
and
mov
and
imul
test
sbb
mov
sahf
xchg
mov
xor
int3
(bad)
fisub
aas
jb
mov
adc
mov
call
adc
aad
fs
dec
sbb
mov
jbe
mov
dec
lock
xor
(bad)
jns
in
cwde
loope
and
mov
mov
and
sbb
shl
call
out
into
stc
cmp
call
jnp
and
sbb
lea
in
dec
push
jbe
xor
ins
lods
cs
arpl
jne
pop
loopne
xchg
loop
lock
jge
push
pop
in
ss
fbstp
mov
in
xchg
add
xchg
inc
inc
xchg
test
sahf
jle
rcl
cmp
pop
popf
aad
stc
xchg
sub
xchg
ds
inc
add
cdq
push
sti
push
mov
xchg
aas
lods
(bad)
dec
inc
repz
sbb
mov
mov
test
jno
xchg
hlt
xchg
cs
mov
retf
add
xor
jle
sub
pop
mov
jmp
mov
les
mov
cdq
fs
test
add
xchg
xchg
and
lods
int
lock
std
pop
push
stc
push
ds
inc
cmc
jecxz
or
call
jle
xchg
aas
mov
inc
imul
sbb
sbb
sub
mov
fmul
xchg
hlt
xchg
xchg
mov
push
cmps
pcmpeqd
out
dec
mov
ror
xor
nop
adc
ss
out
or
es
in
adc
push
push
push
xor
(bad)
popa
lods
jge
jne
xchg
test
lahf
pop
mov
retf
cmc
and
jns
in
jl
cmp
pop
add
out
dec
mov
cmp
and
hlt
outs
xor
jmp
out
mov
cmps
jns
or
aad
mov
repz
loopne
mov
jmp
push
or
dec
inc
test
pop
pop
ja
popf
jo
jbe
sub
call
or
adc
push
(bad)
je
add
xor
and
scas
cmp
inc
adc
cmp
pop
cmps
mov
xor
or
push
in
cmps
stc
xor
fild
out
sub
aas
and
mov
call
shl
out
ins
add
or
or
in
inc
jae
movs
loopne
and
lds
xchg
and
(bad)
repz
ret
cmc
pop
and
inc
jne
pop
or
sbb
int
retf
int
movs
or
rol
or
sub
pop
shl
jmp
cmps
jns
add
retf
jno
pop
outs
and
rcr
and
(bad)
xchg
adc
imul
or
loop
loop
lods
test
jmp
retf
dec
outs
pusha
jge
or
jp
xor
repnz
cmp
imul
jl
or
push
fld
xor
pop
imul
pop
adc
mov
mov
mov
mov
pusha
aaa
and
fist
sbb
scas
inc
cmps
jne
push
dec
dec
lods
lods
popa
cmp
jo
jp
inc
mov
xchg
lods
ins
pushf
mov
retf
mov
jmp
out
lods
ss
sbb
outs
sbb
and
fs
mov
jbe
and
daa
enter
cmps
mov
inc
push
test
cmps
es
mov
hlt
ret
imul
scas
adc
scas
inc
ds
iret
in
out
pop
cmp
lea
add
leave
pop
mov
jecxz
scas
mov
dec
fisubr
mov
mov
and
(bad)
cmp
dec
cmp
test
or
inc
cmps
fwait
cdq
stc
mov
test
jne
(bad)
sub
adc
add
xchg
in
or
mov
mov
ss
cmp
retf
gs
dec
popa
and
ja
add
pop
dec
loop
and
in
int3
jge
aaa
int3
ds
sub
std
cmp
clc
outs
lds
add
adc
icebp
push
pop
xchg
push
loopne
nop
xchg
movs
cmp
stc
lahf
xchg
xchg
popa
xor
sti
stos
out
(bad)
push
sar
mov
mov
or
push
leave
cmp
xchg
aas
push
sbb
jns
mov
cs
bound
mov
or
pop
mov
jns
push
jbe
mov
shl
pop
xchg
pushf
xchg
test
dec
mov
ja
ins
outs
mov
enter
mov
inc
retf
mov
pop
pop
fadd
mov
push
sahf
imul
or
adc
mov
xor
jne
dec
inc
aaa
xchg
fwait
cmp
in
cli
hlt
mov
push
xchg
shl
test
push
in
xor
jecxz
cmp
mov
add
call
jbe
xor
enter
pop
add
dec
pop
mov
mov
push
out
mov
dec
shl
and
ds
push
clc
cmp
mov
xlat
test
rcl
push
clc
push
call
xor
add
or
mov
(bad)
gs
jle
ret
mov
mov
xor
jo
lock
imul
add
mov
mov
mov
xor
ins
xchg
mov
inc
daa
repz
int
rol
ins
out
inc
call
mul
cmp
dec
pop
push
cmp
push
mov
retf
fwait
in
push
(bad)
out
sbb
ret
fcom
mov
jp
sbb
pusha
bound
jl
cmp
(bad)
add
dec
cmp
pop
mov
aad
xchg
adc
dec
cmp
stc
into
inc
cwde
or
dec
xchg
popa
jno
std
and
xchg
sar
ficomp
test
in
mov
dec
dec
in
(bad)
mov
out
gs
jae
cmp
xor
fadd
jnp
push
sub
adc
not
arpl
mov
scas
icebp
js
imul
sub
mov
sbb
in
and
xchg
dec
fs
xchg
mov
adc
mov
nop
mov
push
or
aas
jne
gs
out
cmp
(bad)
aam
mov
add
mov
int3
ret
movs
and
lea
addr16
sub
jae
int
(bad)
xor
adc
int
sti
jns
repnz
xchg
sbb
dec
inc
(bad)
es
push
icebp
adc
or
jno
dec
ins
push
popa
int
es
fs
xor
lock
sbb
or
aaa
retfw
push
movs
call
repz
mov
mov
push
mov
xor
pop
repnz
cmp
fsub
pop
jno
push
movs
daa
mov
jb
dec
push
enter
mov
add
and
rcr
scas
pop
fsub
cmps
add
cmp
(bad)
sub
push
jl
sub
adc
ds
shl
sbb
imul
clc
call
dec
shr
enter
xor
add
xchg
cli
and
cmp
call
xchg
arpl
popa
add
call
rol
(bad)
cli
mov
jne
(bad)
les
jbe
push
jae
mov
pop
jle
sub
daa
sbb
add
scas
mov
mov
sbb
xlat
in
sub
mov
or
or
mov
push
stc
add
dec
test
lds
call
(bad)
mov
loope
(bad)
mov
lods
or
mov
fadd
jnp
xlat
cmps
in
mov
inc
push
out
ret
adc
push
lds
mov
and
addr16
test
adc
int3
pop
ins
pushf
sbb
fdivr
dec
loope
mov
fwait
imul
fcmove
lahf
inc
fadd
jle
aas
xchg
or
hlt
data16
(bad)
je
mov
test
mov
mov
push
bound
(bad)
cmp
dec
stc
iret
mov
xor
add
je
icebp
xchg
fincstp
pop
and
mov
cmp
cmp
scas
mov
pop
and
pop
add
fiadd
push
or
clc
inc
(bad)
mov
leave
test
mov
mov
dec
mov
push
shr
push
leave
jae
jg
sub
jmp
ds
jb
sbb
gs
in
into
fnsave
in
(bad)
sub
add
push
cwde
sti
sub
fcomp
cmps
jecxz
adc
inc
sar
adc
and
sbb
fld
mov
adc
(bad)
(bad)
out
out
jno
sbb
outs
ret
ret
or
jno
dec
out
jnp
inc
jl
xor
fisubr
cmp
fild
imul
test
fs
retf
xchg
out
cmps
into
iret
add
xor
mov
pop
js
add
fdiv
sub
push
aaa
jns
movs
jae
call
js
(bad)
mov
mov
pop
mov
bound
and
jg
sbb
push
add
mov
fistp
mov
clc
out
cwde
ds
int3
cs
sbb
sub
call
jp
loope
sub
cmp
mov
inc
dec
call
mov
add
aam
popf
js
rol
cmps
shl
hlt
jmp
nop
popa
push
xchg
lock
pop
push
mov
daa
rcl
fwait
mov
mov
xchg
stos
xor
cmp
lds
push
cmps
or
test
push
sub
stos
sbb
inc
js
pushf
pop
into
jl
loop
inc
stos
shl
(bad)
mov
lock
fisubr
(bad)
enter
ret
ret
sbb
push
fsubr
out
mov
lods
add
jo
inc
pusha
jnp
repz
mov
cmp
outs
mov
mov
test
cli
popf
cmp
fsub
out
sbb
sbb
outs
jbe
jecxz
das
out
in
imul
fisub
and
jmp
mov
(bad)
lods
loope
sbb
rol
test
fidiv
into
(bad)
sub
xor
ds
inc
int
pushf
xchg
xor
lock
dec
mov
and
movs
jmp
call
inc
or
cmp
sbb
aaa
pop
mov
ins
dec
adc
repnz
out
imul
cli
and
js
gs
inc
and
and
dec
pusha
sub
test
push
sub
outs
out
adc
or
cwde
rcr
add
iret
in
mov
imul
out
mov
(bad)
mov
adc
fcmovne
pop
or
ins
aas
inc
push
lods
mov
ret
rcr
sub
sti
ins
jecxz
dec
arpl
mov
test
mov
neg
pop
or
es
mov
in
push
add
mov
xchg
push
mov
push
dec
loop
fcmovb
and
fdivrp
ror
test
cmp
xlat
adc
lods
dec
stos
inc
sbb
ins
or
lock
mov
cli
sbb
push
fmul
mov
pop
pop
or
cmps
int3
lods
dec
jl
mov
push
jne
int
outs
adc
push
shr
les
je
push
inc
cwde
or
adc
sub
cld
pop
pop
aaa
ja
cmp
and
repnz
les
in
ins
test
mov
lds
push
lods
jae
in
xadd
xchg
repz
outs
call
and
and
push
seta
adc
pop
mov
int
popf
jle
call
fnsave
jb
jnp
cmps
fsub
test
rol
xacquire
retf
call
mov
mov
(bad)
cmps
xlat
fimul
in
retf
mov
iret
test
adc
std
add
add
in
inc
mov
adc
jnp
xor
sbb
sub
and
cmps
cmp
add
daa
jno
nop
jp
lods
jp
mov
or
fnstenv
cld
jmp
icebp
pop
call
jmp
fsubrp
mov
scas
mov
add
mov
pop
inc
push
sub
dec
repz
and
add
test
jmp
push
mov
mov
and
jmp
inc
pop
jno
int3
xor
push
(bad)
pop
cld
fstp
adc
jl
sbb
pop
gs
xor
repnz
add
jne
xor
mov
ror
in
sbb
and
cs
outs
fsubr
call
repnz
push
mov
shl
sahf
div
or
push
add
retf
icebp
mov
cli
aad
cwde
rcr
ror
mov
jg
enter
sti
bound
fwait
adc
retf
mov
stc
sbb
jg
es
dec
adc
xchg
hlt
mov
imul
cwde
rcl
enter
xor
dec
inc
sar
dec
push
sar
push
retf
add
mov
sbb
icebp
pop
sub
int
mov
std
dec
rcl
pop
in
adc
es
cs
pop
rol
imul
push
jge
ror
stos
xchg
stos
(bad)
repz
sbb
cmpps
scas
fistp
sbb
ret
cmp
lahf
add
or
add
jmp
into
mov
mov
nop
sbb
and
(bad)
xchg
clc
lea
push
adc
iret
jmp
push
shr
jl
lds
loope
loope
rol
movs
inc
dec
int3
aad
ja
stos
push
daa
jp
int3
stos
xchg
cld
push
mov
xchg
(bad)
sub
es
sub
fwait
jp
jns
cmp
daa
mov
push
data16
jmp
out
mov
pop
push
mov
xor
push
cmp
sub
add
add
movs
pop
adc
push
inc
pop
ds
xchg
sub
aam
jno
int3
retf
ins
movs
mov
add
lods
shl
(bad)
int3
sbb
dec
outs
jecxz
xchg
jge
ret
popa
add
xor
lahf
lods
jns
mov
mov
or
out
shr
pop
inc
not
ins
xchg
inc
clc
mov
xchg
cmps
jns
push
stc
sahf
cmp
pop
stos
aam
push
mov
pop
les
pop
mov
inc
mov
mov
mov
cmp
add
and
pop
mov
scas
mov
lods
and
mov
fisttp
shl
sti
mov
cwde
sbb
pop
(bad)
outs
pop
aam
mov
stc
std
sahf
data16
add
ror
xchg
jb
push
push
adc
(bad)
mov
pushf
into
pop
mov
in
push
fnstsw
jno
cs
in
adc
cwde
pop
call
jmp
add
icebp
mov
jge
pushf
outs
sub
ret
xchg
leave
sub
dec
jo
cmp
out
add
rol
dec
jge
(bad)
xor
ror
adc
cmp
jb
rcr
or
(bad)
repnz
jae
and
jmp
out
test
jmp
daa
push
popf
lea
popa
aad
xor
mov
mov
or
or
in
outs
mov
jnp
xor
xchg
xor
shr
sti
and
movs
fisub
dec
movs
cmp
daa
ret
inc
test
mov
add
xchg
loop
jge
ss
int
ss
mov
mov
int3
jle
inc
mov
cli
leave
jmp
cs
call
pop
pop
mov
mov
mov
shl
jp
ficom
ja
mov
ror
(bad)
rcr
rol
loopne
pop
stos
stc
imul
or
sub
test
aaa
bswap
push
mov
shr
sub
loop
idiv
cwde
add
mov
add
call
xor
lea
stc
enter
mov
sub
xchg
push
add
pop
repz
int3
jbe
int3
add
daa
rcl
sbb
jmp
movzx
and
outs
push
inc
in
dec
rol
push
in
or
sar
pop
in
popf
lods
pop
out
aad
in
ret
stos
jp
mov
dec
or
lds
data16
jae
lock
jo
xor
mov
sub
arpl
dec
cli
xor
xchg
or
cmps
mov
aaa
call
sbb
stos
push
push
lahf
addr16
sub
pop
add
das
inc
or
aaa
ret
les
xor
sub
out
loope
push
pop
jmp
jge
jne
jbe
enter
js
in
fldcw
xlat
or
addr16
xchg
inc
dec
in
into
sbb
sbb
lahf
pop
sbb
test
lea
dec
mov
jns
xor
(bad)
and
popa
(bad)
not
clc
popf
call
cmp
lods
leave
dec
std
sub
sbb
adc
or
xchg
jmp
sbb
xor
enter
(bad)
mov
jb
shl
std
add
dec
test
fstp
mov
das
test
les
aam
push
les
and
dec
ds
sahf
jb
fiadd
jg
mov
ja
mov
mov
mov
(bad)
js
mov
pop
inc
push
pop
sub
xchg
lea
dec
fadd
lahf
jg
cwde
call
push
push
pop
(bad)
dec
data16
push
pop
mov
mov
mov
(bad)
jno
leave
mov
addr16
xor
dec
jne
adc
movs
aas
aad
fs
repz
jmp
(bad)
pop
jge
js
jnp
lahf
enter
and
xor
sub
out
or
pop
xor
ret
jb
fiadd
xchg
je
(bad)
in
movs
leave
in
pop
int
cmp
outs
ror
and
jg
sbb
adc
in
aam
inc
std
xchg
jns
cmp
push
data16
push
mov
or
pop
adc
fistp
xchg
and
aam
call
lahf
jp
mov
test
fcmovnb
pushf
adc
std
cli
sub
scas
sbb
sti
out
mov
stos
into
repnz
rcl
xchg
int
hlt
or
push
inc
cmp
sbb
and
cmp
add
sar
cmp
xlat
xor
es
(bad)
int3
fild
push
imul
lea
cmp
or
in
jle
imul
inc
xchg
xchg
bound
xchg
dec
(bad)
dec
sbb
jns
cwde
add
jp
sub
icebp
cmps
nop
push
cmp
shl
jge
cmps
inc
pop
xor
cld
xchg
nop
cmps
cwde
test
test
fidiv
(bad)
out
pop
add
sub
fwait
and
adc
into
xchg
icebp
cmc
xchg
lahf
leave
adc
icebp
mov
dec
sar
jge
std
mov
test
push
pop
leave
adc
arpl
les
cmp
imul
mov
pusha
cld
lock
retf
icebp
hlt
cwde
push
das
push
mov
inc
and
clc
mov
loope
mov
mov
inc
imul
jmp
cmps
jmp
jb
cmps
and
mov
or
and
dec
mov
pop
add
inc
xor
in
jne
jg
xor
(bad)
dec
popa
nop
pusha
xchg
sbb
add
sub
cld
adc
clc
sub
jl
idiv
jle
ins
and
(bad)
out
inc
push
gs
mov
outs
or
xor
dec
lods
and
push
xlat
shl
gs
pop
cmp
dec
xchg
bound
push
xchg
(bad)
pusha
in
sub
cmps
fstp
pop
push
ret
ins
rcl
fdiv
mov
xor
repnz
jnp
aaa
or
ror
push
int3
out
push
inc
xchg
stc
pop
pusha
mov
xor
push
call
clc
cli
jbe
(bad)
rol
and
ret
mov
dec
pop
jle
out
je
xor
shl
pop
cli
out
jne
movs
loopne
ss
dec
mov
sahf
outs
ins
cmp
loope
retf
call
inc
push
fisttp
(bad)
add
fsub
dec
adc
popf
arpl
inc
popf
icebp
sbb
jbe
rcr
pop
fsubr
and
dec
adc
mov
mov
cmp
push
lahf
push
fs
sar
clc
pop
and
cmp
jns
lds
stos
xchg
out
imul
xchg
(bad)
cmp
lea
cmp
mov
push
rol
ds
xchg
(bad)
pop
pop
jmp
xor
dec
(bad)
cli
mov
clc
inc
or
mov
jmp
call
sar
es
mov
dec
(bad)
and
adc
rol
lea
mov
lods
outs
(bad)
jmp
jnp
cwde
sub
inc
outs
cmp
cmp
aaa
fwait
and
cli
sbb
sub
xchg
int3
ffree
pop
add
xchg
xchg
jne
fldcw
push
retf
mov
loopne
cli
fsub
jmp
in
jbe
mov
cmp
push
xchg
jg
stc
stc
loope
fwait
lods
sub
pusha
mov
push
out
pop
inc
stos
mov
lahf
sbb
or
or
pop
test
xor
gs
mov
pop
fstp
inc
fnstsw
lds
pop
inc
aad
jne
sbb
pop
sub
pusha
xor
cmp
push
aam
pushf
(bad)
push
xor
loop
push
lods
mov
push
call
dec
js
dec
jno
xchg
mov
retf
mov
jg
mov
dec
pop
mov
fld
xchg
mov
gs
jmp
inc
cmc
adc
rcl
sub
jne
push
shl
fs
dec
std
xchg
xchg
pop
pop
in
jg
dec
adc
(bad)
imul
das
jbe
jl
aam
adc
out
int3
scas
sub
mov
jg
add
xor
stos
loopne
in
call
mov
mov
daa
(bad)
outs
sub
cmp
lods
cmp
pop
inc
mov
clc
xchg
es
addr16
xchg
loopne
push
sub
fwait
xchg
fidivr
mov
push
rcr
cmp
or
sbb
add
out
xchg
sbb
icebp
dec
pop
adc
sbb
jmp
xchg
inc
mov
imul
cmp
jecxz
rol
imul
mov
loop
dec
lahf
mov
rol
adc
mov
push
(bad)
shl
xchg
sub
mov
dec
mov
in
test
pop
cmp
push
pop
call
das
fistp
fstp
lods
mov
cmp
mov
xor
jecxz
sub
inc
mov
int
punpcklbw
mov
pop
out
xchg
lods
sar
fs
ja
loope
xchg
and
jecxz
or
dec
jmp
popa
sbb
push
xor
xchg
xchg
fwait
cli
popa
fcom
repz
push
mov
sbb
pop
mov
mov
fs
and
sbb
pop
adc
(bad)
stc
and
enter
jl
jmp
mov
jo
rcl
arpl
and
push
fst
bound
es
imul
les
pop
dec
addr16
xor
(bad)
ss
in
fisub
stos
mov
and
add
sub
xchg
scas
test
loop
lahf
popa
lods
scas
(bad)
pop
xor
sahf
aas
pushf
pop
dec
inc
(bad)
adc
aaa
sbb
cdq
mov
data16
mov
dec
dec
repz
imul
in
jmp
or
sub
les
or
(bad)
and
clc
out
push
jmp
pop
jnp
jp
movs
pop
(bad)
xor
inc
je
inc
pop
mov
das
fcomp
movs
cmp
nop
repz
or
mov
and
enter
and
inc
mov
jl
mov
push
in
icebp
mov
sub
pop
add
ret
ins
or
nop
lods
test
cmp
shr
mov
ins
loope
dec
lods
xchg
mov
movs
out
fidiv
cmp
call
lods
int
loopne
dec
xacquire
addr16
adc
add
movs
mov
adc
cmc
fs
popa
daa
pop
add
rcr
icebp
jecxz
dec
pop
push
jecxz
mov
sti
or
imul
cmp
js
xor
adc
and
jmp
mov
inc
fs
pop
cli
sbb
xor
jmp
mov
pushf
inc
cmp
retf
aas
mov
idiv
mov
and
adc
pop
popa
dec
je
dec
test
jbe
push
pop
in
outs
pop
sub
fld
scas
rcr
imul
scas
sahf
iret
shr
or
dec
call
shl
rol
inc
ficomp
adc
adc
jg
or
(bad)
push
lea
cmps
mov
clc
jae
movs
lock
mov
jmp
jno
jmp
sti
popf
or
and
and
sbb
cld
stc
push
push
call
pop
fucomi
mov
mov
loopne
pop
pusha
repz
sub
retf
sub
and
js
rcl
rol
mov
xor
enter
nop
imul
outs
(bad)
sbb
into
sbb
jo
xor
rcr
xor
div
loope
div
or
pop
fneni(8087
or
enter
jnp
es
repz
div
push
push
cmp
push
push
xchg
xchg
aas
sbb
sar
add
dec
jno
int
ret
sub
mov
adc
shl
pushf
dec
jle
xlat
mov
inc
or
adc
sahf
sbb
xchg
adc
inc
in
ins
sti
xlat
rcl
push
pop
mov
pop
sub
mov
inc
add
mov
xchg
outs
mov
icebp
stos
adc
scas
and
int3
mov
int3
pop
cmps
sub
lock
jp
pop
xchg
dec
fs
test
and
or
xor
loop
adc
inc
jno
ss
mov
jmp
movd
and
or
sub
hlt
(bad)
xor
shl
cli
xchg
sub
mov
movs
jns
mov
test
(bad)
xchg
mov
mov
adc
lods
out
fcomip
lea
mov
dec
cmps
sbb
and
or
mov
in
(bad)
mov
arpl
cmc
mov
and
cdq
and
test
adc
je
fstp
imul
out
xchg
cmps
mov
stos
push
sbb
xchg
outs
test
add
aaa
dec
pop
jge
push
arpl
enter
mov
push
jae
inc
cmps
xchg
push
repz
scas
stos
xlat
clc
inc
pop
nop
das
jmp
mov
cdq
dec
jmp
adc
and
inc
repnz
xchg
inc
cmp
and
xor
jno
and
mov
adc
mov
adc
icebp
mov
in
(bad)
stc
mov
test
and
lods
jb
inc
mov
sub
fiadd
shl
xchg
aaa
outs
stos
int3
sbb
push
fidiv
jg
js
in
add
push
xchg
jo
dec
in
sbb
mov
comiss
cmps
xor
jno
into
cmp
push
and
std
pop
(bad)
push
dec
inc
lods
mov
cmp
iret
push
xchg
pop
mov
add
sbb
data16
imul
pusha
adc
std
icebp
test
add
movs
push
pop
mov
xchg
addr16
sub
jbe
das
add
sahf
and
es
dec
sbb
dec
cmp
retf
jecxz
pop
mov
cmc
in
bound
pop
hlt
push
ins
pop
and
jo
push
shl
lods
xchg
inc
retf
movs
add
cmp
lods
xor
retf
in
pop
loopne
mov
ja
mov
cmp
lods
fadd
fs
stos
xor
lds
xchg
adc
dec
es
bnd
mov
jp
loope
pop
mov
mov
mov
mov
mov
cmp
scas
repnz
mov
outs
adc
leave
adc
pop
dec
or
fs
inc
ss
mov
ss
aas
jp
rcr
inc
(bad)
xchg
leave
lds
add
push
stos
push
fdivp
pushf
inc
mov
pop
and
sar
test
rcl
dec
fmul
dec
push
mov
xchg
jg
ins
mov
mov
or
push
xor
pop
not
test
pop
jnp
xor
jle
mov
es
std
cwde
gs
jg
cli
inc
je
icebp
xor
dec
mov
movs
xlat
adc
lea
out
push
aaa
cmp
(bad)
jp
imul
sar
mov
call
xor
adc
daa
sub
sbb
shl
shl
push
das
and
aas
sbb
ret
lea
xor
hlt
mul
mov
xchg
mov
fnstsw
mov
stc
pop
lock
jp
(bad)
shl
dec
(bad)
(bad)
out
inc
cmps
adc
cmp
or
lods
or
pop
hlt
xchg
or
sub
cmc
mov
hlt
jmp
adc
dec
ficomp
ds
mov
dec
mov
and
js
pusha
je
pop
daa
pop
add
and
mov
fst
jne
(bad)
jge
xchg
shr
iret
iret
jne
xor
or
mov
sbb
addr16
stc
enter
arpl
and
pop
shl
ds
mov
adc
mov
loope
jns
push
sub
clc
and
push
inc
xchg
push
ss
mov
enter
sbb
xor
loope
and
clc
outs
sub
dec
jp
pop
add
aaa
jbe
cmp
inc
inc
xor
popf
daa
xchg
lds
mov
add
or
test
and
dec
xor
imul
dec
pop
icebp
(bad)
retf
aaa
xor
repnz
or
jg
movs
std
pop
cmps
lds
mov
dec
sub
fstp
jecxz
sub
mov
gs
dec
fs
add
stos
push
pop
or
pop
cli
mov
mov
rcr
xor
mov
jmp
add
in
dec
(bad)
push
fsincos
push
cli
sub
shl
xchg
mov
aaa
test
sub
lock
sub
js
test
sub
rcr
push
jbe
test
test
gs
enter
mov
cmp
and
push
push
rol
es
fdiv
inc
add
sub
xchg
jp
dec
jmp
aad
cmc
fnstenv
xchg
and
xor
jnp
jge
out
icebp
jmp
push
sub
std
(bad)
imul
mov
inc
stos
inc
movs
xchg
outs
xchg
repnz
inc
add
test
and
and
jae
cmps
xchg
pushf
inc
xchg
inc
inc
sub
imul
call
sbb
dec
pop
cdq
inc
lods
jbe
pop
test
ret
outs
pop
lds
push
inc
out
jp
jo
stos
cli
inc
push
in
movs
xlat
rcl
cld
xchg
jecxz
outs
push
les
mov
daa
jecxz
movs
jge
fisttp
inc
xchg
gs
pop
in
and
je
dec
mov
xchg
push
pop
mov
fld
inc
push
popa
adc
lods
add
das
in
add
push
cdq
and
pop
loop
mov
pop
jbe
jmp
in
inc
frstor
das
cmps
bound
pop
mov
out
imul
and
xor
stc
xchg
cmp
les
mov
retf
jo
ror
and
xor
or
jmp
push
pop
add
push
jmp
push
jle
fistp
mov
xchg
cmps
pop
popf
(bad)
inc
jmp
pop
and
das
or
std
or
ret
adc
cmps
or
stos
cmp
adc
mov
jo
or
mov
mov
sar
sub
fistp
lahf
dec
cmp
out
rcr
fiadd
(bad)
in
je
mov
push
cmp
and
movs
sub
call
sbb
imul
and
hlt
inc
jno
sub
loopne
cwde
mov
add
push
sbb
mov
add
mov
cdq
fsubr
js
jns
lea
stc
adc
int3
or
out
xrelease
inc
push
mov
jg
paddd
xchg
xchg
xor
or
(bad)
imul
imul
test
sub
gs
pop
mov
pop
or
retf
sbb
add
out
cmp
dec
mov
neg
xor
movs
dec
clc
cmps
mov
js
add
cmps
mov
and
(bad)
pop
jecxz
mov
sbb
rcr
dec
js
jno
dec
aaa
sbb
gs
or
sti
rcr
(bad)
dec
pusha
daa
or
mov
les
add
fmulp
cmps
xchg
fiadd
int3
data16
xor
pop
out
pusha
test
cmps
nop
jge
hlt
imul
jg
mov
leave
lahf
outs
popf
ins
xor
stc
sbb
cmp
fbstp
add
idiv
mov
xor
mul
mov
xor
das
xlat
pop
into
inc
(bad)
xchg
sbb
jecxz
jbe
push
xchg
and
fiadd
and
cmc
jb
stc
mov
mov
iret
fsub
inc
dec
jg
in
popf
sub
sahf
mov
das
(bad)
ja
mov
and
sahf
xchg
pop
xchg
lods
dec
cmp
inc
pop
fidivr
mov
movs
pop
(bad)
arpl
jp
cwde
or
cwde
sub
cwde
cmp
mulps
out
daa
(bad)
dec
xor
or
ss
dec
ret
lahf
mov
outs
push
lds
dec
push
movs
mov
mov
push
add
in
dec
and
add
int3
adc
sub
dec
stos
dec
out
addr16
jbe
pop
cmps
push
cmp
mov
sub
sti
pop
jle
dec
fcmovne
imul
mov
add
xor
aam
inc
and
xor
push
pusha
test
shr
and
cvtpi2ps
push
mov
das
adc
bound
xchg
mov
dec
arpl
pop
popa
push
rcl
or
inc
fstp
adc
fst
imul
mov
dec
adc
in
je
icebp
pop
rcr
xchg
push
inc
xchg
add
jb
or
push
xor
pop
mov
and
imul
jmp
xor
shl
and
dec
inc
jo
cmp
sub
add
test
scas
loop
pop
loopne
mov
xchg
mov
pop
addr16
repz
xchg
mov
in
mov
cld
jb
fwait
cld
out
pop
outs
push
jmp
jb
mov
cmps
cmp
retf
repz
neg
pop
not
mov
shl
lea
loope
aaa
and
ret
mov
or
mov
out
pop
idiv
data16
pop
push
cmp
inc
in
and
and
sub
xor
mov
sbb
adc
pop
ror
mov
pop
stos
xchg
sub
(bad)
neg
int3
mov
fcom
call
sbb
arpl
pop
daa
inc
into
adc
xor
add
xor
icebp
addr16
push
jb
add
inc
loopne
inc
sub
add
adc
jle
and
sub
sti
out
stos
hlt
push
(bad)
adc
push
jne
pop
(bad)
shr
add
popa
add
xchg
pusha
jl
xlat
test
test
fisubr
stc
inc
sub
icebp
push
mov
test
push
or
pop
data16
retf
cmp
data16
stos
xchg
in
sub
bound
push
pop
aas
dec
xchg
popf
mov
and
in
jmp
cld
arpl
push
in
jmp
xor
add
push
ds
pop
xor
or
stos
dec
mov
ret
xchg
and
nop
jbe
imul
cmps
pop
stos
retf
pop
dec
xor
and
fbstp
(bad)
int3
fstp
sub
sbb
imul
fldcw
fidivr
pop
loop
mov
popf
int
jle
cdq
iret
fnstenv
gs
aam
stc
mov
jae
popf
cmp
sub
stc
push
push
adc
bound
cwde
rcr
add
mov
stos
add
es
stc
xor
fwait
mov
inc
jecxz
cmp
pop
push
xor
sub
dec
adc
and
mov
jge
jbe
sbb
test
lods
mov
leave
xchg
bound
dec
(bad)
popf
jge
and
aad
jp
stc
jmp
jg
sbb
imul
rcl
cmp
mov
arpl
inc
push
sbb
dec
cmp
inc
call
mov
int
jl
inc
jle
sub
ins
movs
add
inc
ss
and
sahf
adc
mov
cmp
push
or
jns
jmp
mov
cld
xor
enter
inc
mov
sub
(bad)
fld
push
(bad)
pop
inc
icebp
or
loopne
pop
adc
sub
fisttp
cmp
inc
imul
add
jne
and
sbb
rcl
mov
les
inc
mov
sti
xor
inc
sbb
test
dec
add
jae
inc
dec
push
cmc
enter
adc
leave
dec
popf
or
pop
jb
xor
cmp
out
xor
push
push
pop
retf
dec
mov
sub
idiv
fnsave
pop
popa
sub
push
push
std
movs
mov
add
std
ret
test
gs
sti
dec
push
cld
xchg
jb
mov
mov
(bad)
(bad)
loope
loop
dec
popa
mov
repnz
xor
jp
sub
adc
xchg
mov
inc
mov
inc
sbb
in
xor
shr
push
inc
cmp
cmp
dec
mov
or
das
mov
xor
add
cmp
dec
out
gs
cli
xchg
sub
xor
mov
fsubp
and
test
push
sahf
test
js
ins
or
or
movs
data16
sahf
sbb
xchg
adc
shl
aam
ja
jne
sub
ins
in
jno
mov
or
dec
test
add
cld
xor
enter
test
pop
jmp
shr
in
pop
mov
dec
cmp
and
cmc
xor
outs
cmp
xchg
pop
repz
into
ret
ds
(bad)
push
adc
lods
inc
cwde
inc
stc
sbb
dec
dec
outs
push
es
ds
neg
jecxz
add
fiadd
add
dec
fidiv
pop
push
jbe
in
cli
mov
mov
out
outs
mov
sub
adc
cmp
jp
out
xor
cmps
push
out
fldenv
inc
dec
sbb
cs
mov
pop
or
and
add
or
jecxz
or
addr16
mov
fisttp
push
test
(bad)
xchg
(bad)
out
or
pop
or
scas
loop
rcl
xchg
jmp
jmp
pop
pop
or
iret
ja
out
aas
adc
add
cmp
lds
mov
mov
jb
imul
pop
push
cli
ror
jle
add
xchg
ins
dec
and
xor
cmp
mov
repz
ja
(bad)
and
iret
or
pop
pop
push
fdivr
sub
push
xor
movs
push
jecxz
test
retf
sar
and
fwait
lock
sti
jmp
(bad)
in
mov
sbb
adc
xor
dec
cdq
push
rol
adc
test
mov
and
inc
cmovg
imul
jle
lds
dec
dec
push
scas
fwait
das
cmp
div
dec
repz
pop
adc
mov
mov
out
ror
push
fcom
shl
adc
inc
dec
das
pop
fcmovbe
push
cmp
sti
popa
jo
add
hlt
int
nop
jb
or
mov
(bad)
repnz
retf
mov
jmp
jns
mov
ins
std
mov
imul
into
push
enter
fwait
stc
outs
xor
nop
jmp
push
ficomp
mov
jp
mov
adc
fmul
inc
pop
adc
or
inc
xchg
ins
push
inc
cmps
loope
and
lea
xchg
cmp
sub
push
add
fcmovnb
inc
cdq
sub
xchg
jge
repz
outs
repz
stc
mov
fld
loop
add
xchg
rcr
pusha
pushf
in
jmp
nop
int3
inc
xchg
push
cmp
or
in
dec
stc
xchg
cmps
pop
bound
ss
ds
or
(bad)
sbb
sbb
rcr
mov
mov
(bad)
push
movs
or
ds
bound
inc
mov
xchg
shl
mov
js
sahf
dec
pop
pop
adc
sbb
mov
fistp
test
(bad)
cdq
xor
ret
lahf
hlt
dec
into
sbb
das
inc
das
cmp
int
and
pop
mov
push
movs
mov
ret
add
retf
inc
dec
cmc
call
push
cmps
sub
xor
test
xchg
aaa
jns
int
inc
mov
sub
movs
ror
adc
dec
dec
aam
les
(bad)
rol
mov
xlat
xor
cmp
test
lock
clc
inc
inc
xor
in
mov
lods
cmp
dec
mov
push
ror
or
jno
shld
jg
into
lea
and
add
mov
in
push
test
xchg
int
dec
pusha
fs
xor
lods
mov
aas
es
and
out
(bad)
bound
addr16
jne
loope
jl
dec
sbb
popf
add
cmp
pop
jl
push
mov
xchg
sysexit
jbe
(bad)
into
pop
push
div
add
jae
mov
arpl
and
enter
cmp
xor
or
into
pushf
add
lds
cwde
addr16
shl
sub
push
or
xor
loop
fimul
jmp
push
jle
or
lods
cs
int3
dec
cwde
push
pushf
dec
mov
cli
pop
cmp
dec
dec
repnz
inc
pop
mov
xchg
psubsb
jne
adc
hlt
mov
inc
xlat
leave
mov
test
xchg
retf
mov
movs
bsf
push
jno
fs
inc
or
cs
clc
sbb
std
cwde
xchg
adc
fdivr
(bad)
pop
xor
aam
cmp
jno
inc
ret
inc
push
or
ret
retf
dec
jmp
out
jle
sbb
and
pop
adc
push
vorpd
mov
cli
aas
in
xor
push
and
scas
popa
daa
inc
sub
(bad)
int3
fmul
push
hlt
outs
paddb
out
jnp
ds
(bad)
je
out
pushf
xchg
dec
xor
(bad)
in
das
jecxz
sahf
or
mov
ins
mov
fs
dec
pop
cmc
(bad)
pop
dec
loope
jp
xchg
jne
xchg
sbb
jb
mov
pop
into
push
lahf
and
mov
sbb
in
jbe
dec
or
shl
pop
lock
sbb
fnstsw
je
cmp
scas
xor
fwait
pusha
ret
rcr
aas
(bad)
in
inc
cmps
pop
inc
fmulp
loope
stos
ins
adc
xchg
popa
xor
jg
mul
rol
aam
mov
mov
push
pushf
cwde
jg
lahf
ret
(bad)
dec
nop
and
pop
pop
aas
call
or
xchg
mov
or
fstp
arpl
pop
sub
sub
sbb
fdivr
xchg
xchg
mov
vmovsd
adc
(bad)
(bad)
and
dec
pop
adc
mov
cmps
aam
test
push
add
mov
sbb
cmp
outs
mov
stos
mov
mov
add
test
add
and
arpl
hlt
fsubrp
ins
(bad)
out
es
mov
in
movs
mov
pop
mov
ror
sbb
arpl
stos
or
fild
retf
mov
jge
mov
out
sbb
mov
not
sub
inc
outs
cmp
mov
pusha
mov
addr16
ss
pop
enter
scas
shl
sbb
dec
add
test
push
xchg
psubsw
movs
mov
push
cmp
(bad)
ror
call
scas
aad
cld
mov
or
retf
or
ret
mov
in
jbe
and
sub
imul
in
xor
sub
xor
lea
ins
cmp
inc
aam
std
inc
ss
jg
mov
mov
in
(bad)
rol
jo
push
jne
(bad)
out
scas
sbb
gs
pop
and
jle
dec
imul
and
xor
and
ds
adc
shl
rcr
pop
lahf
daa
mov
add
test
lea
dec
xor
xlat
jg
sar
stc
push
call
rol
out
jbe
mov
mov
jge
adc
popf
stos
jmp
xor
inc
fdiv
adc
lock
sti
lods
aaa
push
xor
cmp
loope
icebp
movs
mov
dec
ins
or
aaa
cmp
loop
xor
dec
jae
add
jecxz
aad
(bad)
dec
mov
test
dec
cmps
mov
and
sbb
ins
mov
and
jo
add
loopne
sbb
sbb
das
test
inc
(bad)
inc
adc
movs
jae
leave
mov
dec
mov
fbstp
test
jl
mov
(bad)
cdq
cmps
xchg
mov
lds
cmps
add
test
fiadd
inc
outs
call
cmp
xor
sub
fwait
jmp
xor
xor
fdivr
mov
xor
(bad)
out
sbb
mov
xchg
and
push
mov
push
pop
rol
retf
mov
sti
mov
xor
mov
scas
jb
push
nop
xor
jbe
jo
lock
(bad)
arpl
cmc
bound
loope
loopne
push
daa
dec
lahf
mov
into
arpl
mov
xchg
mov
push
ud2
leave
jne
or
dec
pusha
gs
scas
aad
jb
dec
(bad)
scas
mov
xor
lds
aam
imul
lds
xchg
sub
movs
xchg
push
pop
das
out
jmp
and
mov
jecxz
push
mov
add
dec
ret
loopne
add
jp
fstp
mov
dec
adc
mov
scas
jns
cmp
push
pop
pop
dec
sub
out
test
rcl
and
and
adc
mov
jns
retf
dec
push
sbb
sbb
xor
mov
fcom
jle
mov
(bad)
jl
xchg
adc
xchg
aas
popa
jnp
mov
(bad)
in
loop
pop
enter
dec
popa
xchg
rcr
and
mov
fdivr
sete
pop
adc
je
jb
imul
inc
fild
mov
pop
(bad)
push
mov
aad
movs
adc
push
fiadd
jp
pushf
push
and
lds
adc
push
and
inc
lock
je
mov
pop
fcmovbe
and
int3
sahf
arpl
aaa
pusha
adc
test
shl
retf
in
and
inc
retf
jecxz
aaa
aam
rcr
cdq
jmp
push
je
mov
ror
or
jo
imul
xchg
inc
add
call
xchg
out
retf
sbb
nop
jnp
inc
sbb
mov
sbb
xor
(bad)
sbb
out
fninit
imul
xchg
mov
call
test
sti
jo
cmp
retf
xchg
dec
jb
repz
add
cmc
sti
jmp
test
inc
mov
jne
pop
repz
(bad)
or
test
cdq
fidiv
pop
sub
pushf
jmp
push
sbb
(bad)
(bad)
fst
(bad)
mov
sub
mov
and
mov
popf
out
add
mov
or
fmul
sbb
clc
dec
std
ds
sbb
push
daa
or
mov
inc
mov
sbb
mov
adc
cmc
xchg
jmp
into
mov
into
mov
jmp
das
xor
mov
rcr
call
je
mov
xchg
jnp
sti
and
repz
cld
imul
mov
pop
lock
sar
mov
data16
in
mov
and
add
retf
or
jle
rcl
ror
stos
sub
mov
mov
imul
inc
and
int
mov
scas
pop
mov
adc
cmp
retf
fadd
mov
sub
mov
xor
bound
(bad)
mov
xor
fpatan
push
enter
cdq
cmp
(bad)
clc
cmc
lods
loope
(bad)
loopne
xchg
add
stc
std
pop
sbb
(bad)
jg
data16
push
jmp
inc
and
adc
fld
lock
jne
(bad)
sub
fs
adc
inc
pop
out
xchg
adc
inc
xchg
nop
and
mov
xchg
adc
sbb
fidivr
push
jno
scas
outs
mov
cdq
in
mov
loopne
or
jb
jg
or
pusha
or
add
push
fbstp
sbb
cmps
mov
fstp
push
mov
xchg
cmps
mov
push
fs
pop
call
sbb
xor
push
inc
jg
cwde
sub
(bad)
and
xchg
cmp
adc
in
xor
xlat
jmp
jmp
inc
ffreep
push
(bad)
dec
push
hlt
adc
test
ds
cmps
mov
fcomp
mov
mov
mov
les
call
jb
mov
test
push
sub
(bad)
xchg
pop
pop
test
aas
popa
rol
xchg
js
mov
sub
test
leave
test
xchg
xor
mov
out
sbb
pop
jnp
add
push
xchg
inc
out
or
cs
clc
std
ds
ror
clc
xor
adc
dec
mov
call
sub
sub
inc
test
pop
ret
(bad)
pop
mov
ins
fucomip
jmp
aaa
push
mov
popf
test
stc
add
lods
push
ja
jnp
cli
sub
mov
fcom
inc
cmp
or
into
out
xchg
ins
add
clc
adc
outs
jmp
ins
push
pop
jmp
sbb
nop
xchg
xchg
push
or
adc
mov
and
xchg
inc
sub
aaa
mov
fld1
arpl
imul
mov
xchg
mov
inc
xor
aaa
ins
movs
in
cdq
push
inc
daa
stc
dec
das
mov
pop
and
pop
pop
scas
sbb
pop
add
mul
jg
fwait
out
mov
dec
or
push
xchg
test
or
add
mov
imul
dec
mov
push
rol
inc
jo
loopne
push
std
push
pop
lea
out
pusha
popf
aaa
jae
(bad)
out
push
pop
sahf
xchg
push
out
rcl
int
mov
sub
pop
xor
ds
xorps
jmp
sahf
into
inc
push
lahf
jb
ja
push
xor
jbe
cld
push
into
add
push
jno
dec
fld
stos
lahf
pop
inc
cli
gs
and
pop
jo
jae
jg
pop
sbb
sub
ins
mov
dec
cwde
outs
lahf
jbe
xor
retf
mov
xor
arpl
ret
lods
xor
retf
aas
or
mov
xor
ret
dec
cmc
mov
enter
sbb
sbb
ret
or
(bad)
xchg
(bad)
xor
fs
xor
push
in
cmp
sub
ret
test
imul
cmp
pop
daa
out
and
jl
cli
push
lea
and
cmp
sub
icebp
inc
fst
bound
lahf
mov
(bad)
xor
sub
fsub
das
test
mov
scas
xchg
push
inc
seta
repnz
sub
test
jge
mov
sub
outs
xchg
mov
sbb
adc
cmp
sahf
cdq
test
jle
xchg
cs
xchg
inc
sbb
jbe
cmps
(bad)
dec
gs
sub
stos
jle
xor
jnp
ins
fisubr
dec
add
in
fisubr
mov
inc
imul
sbb
iret
mov
data16
arpl
sbb
ror
call
bound
sbb
mov
rcl
aas
gs
push
shr
adc
xchg
sub
fs
lea
dec
adc
in
or
(bad)
aaa
adc
jbe
into
sar
add
inc
fbld
test
mov
mov
jne
lea
test
sbb
mov
jl
sbb
mov
xor
ret
or
sbb
rcr
(bad)
or
loop
mov
cmc
cli
imul
pop
rcr
jmp
(bad)
not
les
retf
push
add
outs
stc
cmps
es
jg
not
pop
adc
js
jbe
call
sahf
mov
fwait
ja
addr16
cwde
retf
mov
pop
mov
and
cvtpi2ps
mov
push
out
dec
(bad)
pop
dec
stc
xor
icebp
gs
pop
xor
cmps
mov
aad
ja
out
sahf
(bad)
adc
adc
lods
idiv
xchg
or
(bad)
mov
dec
pop
(bad)
mov
xchg
push
or
inc
add
mov
aas
in
mov
pushf
mov
push
rcl
into
mov
ds
retf
cmp
jl
in
ror
inc
sbb
jnp
xor
mov
xchg
ins
retf
lds
(bad)
jp
add
inc
in
mov
iret
dec
or
cs
cmp
inc
jns
bnd
call
dec
call
jl
and
push
cli
jne
pop
inc
sbb
popa
retf
cdq
into
sub
pushf
lock
mov
push
repnz
aaa
enter
test
pushf
xchg
mov
out
mov
fld
test
jecxz
clc
adc
xor
cmps
je
fs
sbb
loopne
jo
clc
and
mov
inc
and
or
sbb
mov
ja
les
push
sub
mov
xor
dec
scas
aaa
js
emms
dec
pop
push
jnp
pop
pushaw
imul
mov
addr16
pop
nop
adc
ins
push
push
sbb
rcl
sbb
clc
mov
push
jmp
sub
or
loopne
add
fwait
cmp
pop
cmps
push
push
lahf
mov
(bad)
clc
mov
add
cmps
xchg
movs
test
loopne
(bad)
in
mov
dec
shr
cmp
jnp
add
inc
sar
cmps
sbb
jge
mov
adc
aas
or
retf
jo
pop
in
std
fwait
inc
sbb
popa
push
mov
das
sbb
addr16
retf
aaa
sub
push
xchg
mov
(bad)
gs
loope
(bad)
mov
inc
or
dec
push
xchg
shr
jae
sbb
push
push
cmp
dec
movs
mov
ficom
sbb
jl
mov
cmp
ds
in
pop
jns
adc
lods
mov
cmps
jbe
sahf
cmp
clc
pop
mov
dec
hlt
repz
xchg
inc
sbb
aaa
or
pusha
push
dec
xchg
add
mov
jne
out
or
xor
rcr
repnz
pop
mov
dec
mov
mov
call
scas
xor
call
push
or
jmp
enter
jecxz
repz
enter
js
xchg
or
xor
ins
addr16
xor
clc
or
adc
jl
lock
lds
int
call
inc
push
int3
adc
gs
cld
aas
xchg
sbb
inc
xor
mov
jmp
test
sbb
inc
adc
movs
cmp
call
jmp
xor
and
mov
cmp
cmp
dec
movs
addr16
inc
cs
push
sar
pop
enter
adc
sbb
mov
aam
sbb
jp
fild
sahf
ret
(bad)
sub
aaa
outs
xchg
mov
jp
push
inc
fistp
or
cwde
push
jmp
rol
(bad)
push
and
push
fsqrt
push
xchg
jmp
fcmove
adc
and
jp
ret
adc
imul
mov
dec
int
cmp
aam
daa
shr
cmp
rol
push
dec
or
push
dec
or
add
fsub
adc
mov
sti
movs
pushf
je
cmp
in
lods
or
aad
mov
enter
dec
cwde
cmp
ror
pop
and
aam
jb
mov
mov
or
mov
call
xor
pop
out
fstp
push
mov
mov
out
shl
jae
clc
int3
js
cmp
call
outs
ret
jb
jno
pushf
mov
repz
pop
pop
movups
inc
mov
pop
cmp
sub
xchg
mov
add
fs
dec
pop
cmp
or
mov
pushf
sub
xchg
jge
mov
mov
sub
into
stos
(bad)
arpl
inc
ror
mov
out
loope
sbb
in
js
push
icebp
js
arpl
fimul
(bad)
mov
push
mov
dec
dec
data16
inc
arpl
rcr
cmp
mov
nop
fsubr
pushf
sar
sbb
jl
movs
push
mov
xlat
std
shl
pop
xor
call
pop
fst
sub
push
(bad)
pop
add
mov
loop
add
repnz
aas
sbb
jecxz
loope
xchg
dec
je
hlt
dec
mov
in
adc
cs
push
js
or
movs
repnz
or
out
cli
int
sub
hlt
pop
(bad)
sub
sbb
mov
inc
scas
sahf
jne
(bad)
(bad)
pop
clc
ror
ds
andps
mov
or
mov
aam
add
mov
in
dec
sti
cwde
add
mov
shl
es
test
leave
dec
xchg
loop
(bad)
mov
push
cmp
mov
fptan
mov
fdivr
iret
jecxz
arpl
dec
xor
test
das
xchg
lahf
xor
ret
inc
test
aam
lods
ins
mov
test
mov
mov
jno
sti
repz
cdq
shl
out
pop
int3
add
mov
or
(bad)
sti
jne
je
les
rol
xchg
sti
daa
inc
les
cli
sahf
add
jne
dec
jo
pop
sub
movs
mov
and
xor
adc
pop
jbe
es
adc
cmp
lods
imul
repz
popa
fst
lahf
add
cmc
xor
aaa
pushf
mov
fnstcw
daa
mov
pop
out
enter
call
fstp
adc
inc
pop
bound
mov
xchg
sbb
xor
push
fs
pop
iret
fidivr
mov
dec
fiadd
adc
ss
arpl
pop
sbb
push
or
iret
sub
stos
neg
adc
hlt
inc
rol
dec
ja
inc
mov
repz
int3
pop
ja
rcl
cmp
jp
adc
rcl
push
sbb
sub
adc
pop
push
ret
push
pop
ret
mov
push
mov
xchg
arpl
sub
div
adc
pusha
in
js
sbb
dec
stc
dec
addr16
pop
pop
mov
mov
mov
inc
push
out
repnz
push
and
ret
and
inc
and
(bad)
pop
imul
outs
repnz
pop
scas
dec
mov
scas
(bad)
neg
data16
loopne
das
jle
imul
adc
call
cmps
and
xchg
mov
add
adc
or
mov
loopne
push
pop
push
jge
inc
sti
push
and
call
add
cs
push
inc
add
push
mov
in
lods
cld
pop
(bad)
repnz
dec
pushf
xchg
push
jmp
mov
add
jmp
mov
push
stos
push
cmp
add
xlat
sbb
inc
mov
repz
fld
loopne
jne
and
into
cmps
mov
mov
pop
pop
stc
retf
mov
retf
stos
and
or
hlt
pusha
dec
mov
jne
fsub
stos
xor
arpl
cmp
pop
and
(bad)
leave
mov
pop
and
iret
push
stc
mov
adc
xor
adc
xor
push
mov
jle
hlt
fwait
std
movs
test
inc
or
outs
inc
sub
fcmovnu
ins
in
mov
aam
retf
jg
push
pop
stc
and
push
add
imul
and
iret
stos
xchg
mov
std
inc
pop
or
and
push
pushf
test
xor
aad
mov
mov
sbb
cld
psraw
push
into
fs
pushf
test
jle
mov
push
mov
mov
cmp
lock
mov
jmp
(bad)
and
std
pusha
lock
cmp
xchg
ds
pop
int3
test
into
dec
sub
bound
ss
jno
mov
mov
mov
sbb
add
ins
inc
push
fmul
pop
xchg
push
fistp
cmc
into
xchg
mov
or
mov
sahf
es
rcr
xchg
mov
daa
mov
into
int3
cdq
xlat
sbb
inc
fild
and
fstp
nop
aad
das
shr
and
dec
sahf
jmp
pop
fdivr
cwde
xchg
call
jne
push
das
inc
mov
pop
mov
test
sbb
repz
sub
dec
std
adc
mov
sbb
mov
jge
mov
and
push
push
loopne
push
or
push
ds
push
leave
pop
cmp
hlt
test
in
sar
addr16
dec
jmp
inc
pop
jmp
je
inc
pop
jle
call
cmp
cmps
(bad)
fild
jmp
jl
pushf
jns
mov
push
ds
aaa
xor
cmp
movs
xchg
popf
push
push
xchg
(bad)
jmp
fidiv
sbb
push
out
push
icebp
sbb
mov
ja
and
xor
mov
jno
adc
xor
jns
push
(bad)
sbb
push
push
in
call
cmps
push
popf
cmp
xlat
dec
pop
sbb
or
pop
fwait
xchg
adc
mov
rol
dec
jnp
or
fcmovb
outs
cvttps2pi
cmps
rcr
fistp
js
push
lea
dec
xor
jo
cmps
dec
je
fsubr
pop
pusha
out
xchg
mov
mov
sbb
sahf
xchg
or
sbb
setbe
pushf
pop
loope
dec
into
(bad)
fsubr
stc
shl
mov
push
push
loope
xor
cmp
jne
push
xchg
adc
mov
mov
(bad)
push
call
daa
push
ds
pushf
lds
dec
adc
repnz
std
repz
pop
int3
pop
dec
test
or
mov
ret
fstp
sub
push
fldcw
sub
mov
arpl
sub
loope
fsubr
ins
push
adc
sbb
xor
ins
js
pop
inc
mov
iret
jecxz
rcl
push
rcl
sahf
dec
or
mov
push
xchg
inc
outs
outs
jl
in
pop
cmp
jne
push
rcl
std
aad
sbb
sti
push
add
stos
sbb
(bad)
paddsw
fist
or
cmp
ror
pop
dec
sub
jne
jge
jmp
rol
sahf
inc
imul
sbb
loop
fisub
ret
in
xor
pop
add
outs
cmps
jo
leave
mov
and
sbb
sbb
mov
loop
popf
cmps
cmp
or
or
pop
dec
and
xchg
test
jg
or
pop
js
jle
and
sbb
cmp
lds
push
neg
dec
cmp
fisubr
imul
and
movs
clc
pop
js
hlt
sahf
mov
cmp
test
loop
cmp
jno
fsub
bound
cmc
jecxz
adc
push
inc
push
xchg
cwde
mov
div
rcr
retf
div
cdq
cmp
cdq
call
and
push
inc
jmp
fisubr
cmp
pop
int3
mov
xchg
or
pop
dec
jmp
xlat
xchg
mov
push
(bad)
shr
or
adc
out
inc
sti
push
shl
std
inc
fist
popf
mov
frstor
in
arpl
pop
movs
popf
jmp
shl
mov
mov
or
inc
xchg
rol
movs
adc
xchg
ins
loopne
pop
pop
add
inc
sub
outs
stc
in
dec
aaa
adc
mov
add
gs
pop
nop
(bad)
and
jb
call
leave
add
pop
push
sub
in
pop
dec
push
xchg
int
jmp
sub
inc
stos
push
inc
sbb
and
retf
and
xchg
ret
sub
jae
pop
repnz
cli
add
int
out
dec
or
push
push
xor
push
dec
loop
mov
pop
ror
xchg
daa
lahf
mov
mov
stos
cmp
push
or
pop
(bad)
test
jp
and
daa
adc
or
cld
imul
ret
lds
shl
test
and
aad
push
xor
xor
or
loop
sub
cmp
retf
fnstsw
les
push
xor
push
push
das
pusha
in
adc
mov
out
add
mov
xor
fs
je
jo
ret
xchg
mov
nop
shl
in
mov
cwde
push
dec
add
mov
and
ins
jno
mov
jg
clc
xchg
adc
sub
aad
adc
mov
adc
ret
sahf
test
or
shl
pop
gs
ds
jae
push
inc
test
mov
sbb
dec
repz
outs
mov
out
test
std
push
pop
adc
adc
ret
inc
test
in
mov
hlt
inc
(bad)
hlt
cmps
sbb
cs
sar
aam
mov
ja
aad
sub
xor
xchg
jno
add
pop
out
jns
push
or
icebp
lea
jg
mov
mov
mov
cmp
jmp
adc
inc
ret
(bad)
xor
cmc
sub
push
jg
imul
mov
adc
mov
ss
stos
pop
sub
shl
mov
pop
sahf
push
mov
add
retf
dec
aad
lods
out
out
in
js
xchg
sbb
inc
push
neg
dec
ds
mov
jmp
cmps
sbb
cmp
(bad)
and
or
mov
rol
inc
or
mov
dec
pop
dec
imul
mov
mov
push
jne
in
lock
cdq
add
dec
pop
mov
cmp
aaa
into
xlat
mov
xchg
rol
scas
xchg
mov
push
push
outs
les
sahf
mov
call
push
imul
in
mov
mov
retf
pop
(bad)
in
neg
xchg
sbb
mov
cli
jge
mov
sbb
out
loopne
mov
shl
sub
movs
sbb
loope
icebp
iret
dec
jmp
inc
iret
popf
jae
cmp
mov
dec
fwait
(bad)
fcmovnb
dec
pop
fiadd
hlt
test
sub
xchg
pop
xchg
xor
test
rol
adc
popf
mov
js
mov
mov
test
cld
iret
ret
nop
jge
pop
sbb
push
mov
cmp
fld
nop
mov
cmp
jmp
cmp
push
into
test
xchg
inc
adc
jg
inc
xlat
adc
into
test
mov
sub
jle
mov
xor
jns
lea
pop
mov
inc
jge
mov
pop
pop
gs
aam
xchg
test
test
cmp
push
xchg
shld
inc
jae
cmps
push
call
test
icebp
and
int3
cld
fldl2t
push
daa
xchg
gs
fs
into
aaa
loop
jmp
cli
push
rol
leave
dec
jns
arpl
mov
stos
scas
div
pop
lahf
jb
and
add
popf
cwde
(bad)
pop
cdq
mov
mov
imul
stc
jae
test
push
inc
and
iret
call
call
imul
xchg
int3
pop
lea
fwait
ss
xor
and
sbb
pop
bound
push
loopne
dec
xchg
(bad)
mov
lods
add
or
or
popf
cli
and
cli
fcom
mov
push
jle
pop
xchg
mov
fs
ins
sbb
mov
(bad)
fbstp
pop
js
inc
xor
cmp
sub
lds
(bad)
push
push
adc
cli
pop
jnp
jae
sti
repz
lock
bnd
sti
je
push
xor
shr
in
mov
cmp
nop
fiadd
addr16
es
test
mov
mov
cmp
mul
shl
cmps
sbb
sahf
add
push
and
pop
push
push
pop
sub
inc
das
cmps
add
pop
sti
adc
or
mov
ror
retf
xchg
loopne
arpl
(bad)
enter
dec
jno
pop
jno
pop
and
mov
test
jge
inc
add
sbb
inc
mov
push
in
jno
cdq
xchg
leave
dec
repz
outs
and
setbe
nop
ins
cmp
leave
aaa
cdq
and
mov
ret
out
push
hlt
fmul
cmps
addr16
sub
push
bound
icebp
or
seta
push
in
fisttp
mov
dec
stos
push
imul
ret
in
loopne
dec
add
cmps
cld
cmps
ret
cmp
push
int
test
(bad)
fs
outs
cs
fwait
xchg
out
sbb
in
jo
push
or
outs
mov
xchg
sub
cmps
sbb
es
inc
mov
cmp
or
dec
push
lea
pop
mov
mov
push
or
rcl
pop
leave
jmp
js
and
mov
sbb
push
mov
dec
push
xchg
enter
and
out
xchg
lds
leave
mov
fld
and
dec
jmp
adc
add
fs
test
pop
ror
and
add
jl
sub
pop
inc
xchg
in
rcl
aam
mov
cs
test
lock
inc
(bad)
iret
push
push
pop
sbb
sbb
mov
stc
loope
or
shl
stos
out
hlt
adc
je
fs
dec
outs
xchg
in
mov
push
int
call
cmova
cs
aas
lods
mov
jae
xchg
xor
cmc
test
(bad)
sbb
ffreep
es
adc
add
fdivp
ja
dec
xchg
mov
mov
mov
scas
sub
(bad)
popf
aas
inc
nop
cwde
movs
mov
dec
and
push
ror
into
sbb
mov
out
xchg
or
cmp
cmp
push
lock
lahf
mov
sub
outs
outs
mov
std
fstp
jp
sar
scas
mov
ret
sbb
das
in
shr
pusha
call
inc
shr
sbb
clc
gs
xchg
sub
jl
push
iret
loope
movs
and
sub
dec
(bad)
mov
std
cmova
sub
in
mov
jl
xchg
cli
push
sub
mov
push
fiadd
inc
scas
mov
adc
ret
mov
xor
mov
pop
mov
push
jle
mov
imul
adc
aas
adc
mov
ret
mov
call
inc
pop
into
ins
out
arpl
pop
(bad)
aam
out
jne
outs
sbb
or
mov
call
scas
push
cs
out
fadd
shl
pop
retf
loop
leave
push
cmp
dec
cmp
pop
test
or
add
xor
adc
or
stc
push
push
cs
jnp
shl
and
sahf
in
dec
ret
adc
adc
sub
add
mov
mov
bound
cmps
mov
xchg
push
retf
sbb
fstp
lock
cmp
add
mov
xor
gs
loop
jae
sbb
inc
push
mov
lods
fldenv
cmps
cmp
jg
lahf
sub
pop
mov
inc
jno
sub
pop
xchg
mov
loope
ja
or
das
stos
lock
ins
popf
in
and
js
(bad)
jmp
ret
test
sub
push
dec
or
stos
push
stos
mov
cmc
dec
call
cmp
mov
push
(bad)
cli
mov
and
daa
mov
pop
pop
mov
xchg
xchg
fwait
leave
dec
mov
jg
retf
or
je
movs
fistp
lahf
xchg
js
je
aaa
(bad)
jns
retf
sahf
into
leave
cmp
in
scas
sbb
pop
lds
dec
loopne
or
jo
xchg
shl
xchg
inc
mov
mov
sahf
fwait
dec
cmc
fwait
icebp
call
pop
mov
dec
mov
retf
inc
out
in
(bad)
mov
mov
pop
mov
add
inc
adc
jmp
lock
imul
ins
ja
fucomp
hlt
(bad)
jge
push
lds
rol
push
fldenv
popf
and
movs
outs
jb
xor
cmp
dec
cmps
pop
xchg
dec
sar
mov
or
pushf
mov
imul
or
out
and
pop
std
sbb
push
xchg
sahf
or
aad
dec
lods
push
imul
icebp
inc
shl
ins
dec
xor
js
jmp
pop
out
scas
adc
add
pop
arpl
push
xchg
and
inc
loope
and
push
movs
mov
sbb
xlat
ins
adc
dec
fist
movaps
outs
fild
les
out
sbb
push
xchg
pop
dec
(bad)
cdq
pop
sahf
inc
test
cmps
mov
pusha
mov
mov
fsubr
xchg
data16
popw
lahf
pop
movs
test
pusha
add
jbe
enter
xor
sub
push
xchg
xchg
pop
mov
lds
and
mov
inc
js
(bad)
sti
mov
push
push
xchg
mov
push
imul
popf
push
ss
pop
call
or
in
mov
mov
mov
call
mov
xor
lahf
jbe
add
sub
and
pop
xor
dec
out
out
pop
cs
loope
mov
retf
(bad)
idiv
xlat
xchg
fnstsw
pop
aaa
xor
push
dec
fdivr
pop
mov
mov
pop
pop
xor
add
imul
test
dec
js
and
popaw
in
cmc
inc
addr16
aad
out
sbb
mov
push
inc
mov
pushw
jp
jmp
xor
xchg
loop
xchg
test
std
pop
add
push
pop
leave
jno
pop
je
sbb
cmp
stos
call
push
jg
loope
pop
xlat
lahf
xchg
sbb
xchg
lea
jge
xor
movs
fs
adc
aam
add
pop
mov
repz
cwde
sahf
jbe
mov
daa
or
out
enter
ret
sahf
int3
fidiv
mov
xor
push
lock
xor
sahf
mov
adc
add
dec
sub
fwait
shl
movs
or
jb
mov
sti
leave
dec
ins
add
xor
ins
lds
shl
xchg
je
rcr
out
or
loop
mov
inc
and
sub
gs
pop
cmc
shr
or
ret
shl
xor
xchg
inc
js
movs
out
iret
add
addr16
repz
cmp
or
imul
mov
addr16
mov
add
stc
push
pop
nop
mov
repnz
mov
shl
retf
std
ins
and
or
arpl
jle
vaddsubps
mov
mov
pop
stos
ss
xchg
jnp
inc
fs
lea
xchg
xchg
shl
and
and
bnd
cwde
leave
imul
addr16
retf
loope
or
fnstenv
mov
gs
in
push
scas
pop
xchg
movs
pusha
inc
mov
lds
mov
scas
xchg
or
aaa
arpl
sbb
rcl
cmp
sti
sti
or
loopne
out
fnstsw
sub
loopne
xchg
sub
rcr
iret
or
push
fsubr
pop
hlt
imul
xor
adc
mov
clc
loop
fadd
sbb
sub
sbb
stos
cmp
pop
push
push
adc
xchg
or
ror
retf
xchg
ja
and
fstp
outs
cmc
push
sub
push
mov
add
ja
pop
call
pop
lahf
aam
jns
ss
(bad)
adc
push
dec
cmc
call
jae
loop
sub
xchg
ins
pop
dec
dec
ins
sbb
xchg
mov
inc
or
(bad)
stos
jmp
mov
call
cld
and
pop
pop
les
or
sub
sar
or
mov
ja
mov
sub
shr
xor
fld
fs
jp
bound
shl
mov
bound
jnp
data16
retf
cmp
(bad)
adc
xchg
adc
ret
mul
xchg
int
jecxz
sub
pop
aaa
into
or
ror
push
iret
xchg
ins
pop
dec
outs
dec
push
lods
and
das
out
xor
add
popa
mov
push
sub
push
push
jecxz
pop
pop
cmp
in
shl
outs
sahf
aad
lods
jmp
pop
hlt
add
push
in
repnz
stos
sub
mov
hlt
and
ja
mov
inc
pop
icebp
pop
nop
test
mov
mov
push
(bad)
xchg
sti
push
adc
cld
test
add
stos
adc
mov
mov
retf
pushf
add
icebp
xchg
cld
fsubr
fwait
add
xchg
adc
xchg
dec
push
aas
lods
call
call
loop
sbb
retf
and
pop
sbb
inc
jo
and
lock
bound
(bad)
dec
enter
daa
sub
xchg
xor
addr16
inc
mov
mov
int3
out
dec
dec
shl
sub
sar
mov
dec
dec
xchg
rol
das
mov
aaa
sub
imul
push
fisttp
movs
jge
enter
pop
icebp
xchg
jb
test
inc
mov
popf
inc
dec
inc
lahf
inc
out
xchg
ja
cmp
add
mov
mov
imul
pop
push
push
mov
bswap
adc
jne
push
movs
mov
inc
or
push
ins
inc
mov
(bad)
pop
(bad)
jmp
rcr
jns
mov
sub
mov
mov
mov
xchg
lock
ret
dec
dec
push
retf
xchg
(bad)
jmp
fild
stc
mov
add
(bad)
lds
mov
mov
jmp
sbb
xor
idiv
xchg
enter
cs
adc
daa
out
or
call
das
into
mov
in
mov
ja
(bad)
int
movs
loopne
ret
adc
test
push
(bad)
or
xchg
mov
and
aaa
leave
mov
push
mov
cwde
ja
(bad)
fdivr
jbe
pop
jecxz
or
leave
int
jnp
test
mov
add
jbe
sbb
cld
jbe
xchg
dec
dec
stc
or
mov
popa
fst
mov
and
clc
pop
xor
sbb
sbb
mov
ud1
out
(bad)
pop
push
mov
dec
xchg
cld
adc
hlt
test
or
(bad)
xchg
out
mov
shl
dec
aas
rcl
test
pushf
cdq
mov
test
enter
movs
lock
adc
sub
or
stos
ja
cmp
in
xchg
cmps
mov
hlt
fimul
xchg
add
cmp
mov
ds
inc
test
sti
jo
sbb
retf
xor
mul
pushf
and
and
cmp
jb
jge
popa
ins
ins
pop
sub
aas
and
adc
test
dec
or
mul
add
cmp
adc
out
and
(bad)
push
add
jmp
cli
mov
xchg
add
inc
in
sbb
aad
pop
outs
and
mov
loope
shr
add
jbe
sti
fldenv
fnsave
push
std
mov
test
test
mov
jmp
jecxz
cmc
push
pop
out
pop
mov
aam
and
sbb
repz
shl
sub
sub
addr16
fcmovne
aas
jge
cwde
les
jne
ins
or
mov
lods
ret
dec
adc
jno
das
fnstsw
(bad)
push
mov
and
mov
loope
icebp
scas
mov
cmp
add
mov
sbb
push
or
in
jmp
and
pop
ins
cmp
xchg
pop
(bad)
mov
les
bound
ja
push
push
outs
pop
aaa
outs
adc
hlt
idiv
or
or
fisttp
retf
push
mov
out
and
mov
repz
jg
jg
dec
hlt
es
sub
loop
dec
sub
rcl
mov
retf
or
cs
stos
test
repnz
cmc
ja
sub
mov
mov
shl
sbb
mov
gs
call
adc
es
daa
xchg
repnz
or
inc
push
adc
mov
and
jbe
sub
out
aam
out
inc
dec
fucom
int3
inc
cmp
push
dec
aaa
pushf
adc
aaa
xor
xlat
mov
mov
out
adc
dec
fidivr
imul
or
lahf
mov
jmp
mul
ss
xchg
out
shl
fldcw
mov
xor
mov
push
add
push
xchg
dec
and
ins
ret
xor
enter
adc
cmps
dec
cmp
push
inc
inc
push
out
fisubr
cmp
cdq
add
ja
loop
iret
mov
outs
rcl
lea
(bad)
repnz
sti
loop
cmp
add
cmp
add
push
clc
popa
xchg
inc
mov
sub
xchg
sbb
fst
popf
cmp
mov
jmp
rcr
lods
rcl
pop
mov
and
xor
in
movs
inc
mov
cmp
pop
mov
imul
xor
jno
inc
mov
xchg
push
mov
pop
jmp
stos
ror
in
mov
mov
xor
xchg
loop
popa
adc
inc
faddp
jae
mov
or
mov
mov
sub
imul
dec
sub
test
inc
lods
or
and
ret
(bad)
jmp
aas
mul
and
stos
(bad)
ja
mov
aaa
xchg
popa
inc
push
mov
in
add
xlat
repz
cmps
mov
pop
or
mov
jmp
iret
daa
movs
retf
pop
xlat
movs
jge
add
xchg
jle
retf
or
addr16
shl
or
js
ret
jmp
mov
mov
cdq
and
xchg
push
jmp
out
ss
repz
or
pop
mov
das
sbb
ins
jne
or
daa
pop
jle
xchg
xor
xor
hlt
dec
imul
in
cli
sub
xchg
cmp
mov
or
jl
jne
push
cmp
aaa
mov
cld
inc
leave
pop
xchg
dec
fs
stos
stos
lock
inc
imul
call
test
jl
inc
rcl
xchg
mov
pop
push
mov
movs
dec
xchg
or
repz
in
sar
pop
icebp
sbb
inc
mov
scas
pop
popf
pop
jmp
movs
mov
les
std
clc
push
push
pop
cs
add
jmp
mov
pop
jle
push
stos
retf
jmp
mov
arpl
push
(bad)
imul
xchg
inc
push
adc
or
in
cld
xchg
mov
movs
loope
popa
add
sub
dec
sbb
retf
test
out
cmove
repz
std
dec
mov
mov
loop
xchg
sub
sbb
mov
mov
push
add
rol
sub
jae
cwde
test
mov
arpl
loope
aaa
addr16
or
cmp
mov
adc
shr
inc
jp
or
cmc
imul
mov
retf
int3
popf
daa
imul
mov
mov
pop
ret
ror
add
iret
cmp
xchg
pop
out
push
push
lahf
cld
inc
lods
xchg
fdiv
push
mov
out
(bad)
repnz
mov
dec
cmp
stos
adc
imul
cmp
or
adc
or
sub
out
mov
scas
retf
push
pop
js
cs
scas
sbb
jmp
in
popf
out
repnz
adc
sub
ror
xchg
xor
inc
and
stc
es
jle
das
out
ins
leave
adc
and
jne
imul
mov
addr16
test
mov
pop
adc
or
in
out
xor
imul
mov
aas
add
mov
adc
lods
and
xor
and
pop
jne
repz
jle
mov
add
push
push
mov
lahf
inc
push
pop
or
mov
jb
inc
cli
fidivr
mov
sbb
mov
test
pop
cld
adc
mov
lock
jbe
std
aaa
pop
lock
pop
shl
or
sbb
fstp
mov
repz
cmp
xor
mov
shl
js
adc
mov
aaa
push
mov
xlat
or
sbb
jl
(bad)
jmp
dec
add
inc
pop
outs
push
scas
fldenv
scas
fisub
imul
sbb
daa
imul
xor
test
les
cmp
jp
lods
fdivr
ret
imul
aaa
xor
adc
dec
and
inc
in
ja
jne
or
pop
or
mov
add
jnp
cdq
mov
repnz
dec
dec
and
mov
lahf
mov
pusha
(bad)
repz
mov
jl
daa
jns
cmp
inc
ja
mul
pop
jae
xchg
pop
mov
pushf
push
out
scas
xor
push
push
(bad)
mov
xor
enter
adc
mov
jmp
scas
or
jmp
in
cs
jg
cs
adc
outs
lds
iret
mov
lds
repz
jno
jg
or
popf
imul
movs
repnz
add
idiv
jp
jb
push
in
daa
jb
cdq
add
loop
jae
sub
mov
or
stc
push
out
enter
xor
cmp
popa
push
das
dec
rol
dec
jb
sbb
movs
inc
or
mov
sbb
mov
pushf
inc
mov
ja
dec
sbb
not
push
lahf
fisub
dec
jg
std
sahf
jns
or
sbb
fidiv
loop
mov
or
dec
jae
inc
adc
std
aam
movs
iret
icebp
icebp
push
jmp
jo
ss
pop
mov
in
dec
mov
enter
add
dec
push
cdq
call
(bad)
mov
cmp
sar
cmps
xor
fisubr
jecxz
test
sar
int
in
dec
cmp
cmp
push
lock
ret
mov
js
mov
jl
xor
imul
shr
pop
loope
sub
inc
addr16
cmps
dec
repnz
pop
aam
mov
shl
ins
fbld
mov
jp
push
add
repnz
bound
xor
mov
pop
mov
mov
gs
sbb
jmp
cld
sub
jmp
cld
les
stos
mov
ficomp
in
sbb
xor
xchg
pop
pop
sti
xor
test
pop
neg
xor
retf
mov
js
sub
fdiv
sahf
fsubr
adc
jmp
pop
mov
shl
es
lods
xchg
cmp
rcl
stos
aas
js
ja
sbb
dec
mov
icebp
repz
fwait
fwait
inc
out
pop
xor
repnz
pusha
cwde
cmp
es
shr
push
stc
imul
jbe
sub
lods
movs
ins
mov
sub
push
pop
addr16
mov
jbe
das
or
mov
add
add
cmp
sbb
inc
das
outs
sbb
inc
repz
cli
test
in
imul
sbb
pusha
test
fbld
dec
cdq
jmp
call
mov
sub
(bad)
cwde
add
je
jp
pop
inc
outs
lahf
pop
mov
rep
ret
clts
ss
mov
or
outs
xor
add
fstp
loopne
mov
mov
fdivrp
adc
push
sbb
adc
jg
cli
ins
int
xchg
or
pop
xchg
shl
out
cdq
neg
fmul
sbb
out
cdq
(bad)
retf
mov
fwait
rcr
xor
inc
xchg
mov
pop
scas
mov
mov
shl
fmul
sbb
cmp
ret
jno
jle
jle
mov
cli
fisttp
jnp
cli
or
out
mov
clc
mov
xchg
shr
xlat
jno
sbb
mov
outs
mov
lea
loop
cmp
add
add
neg
int
(bad)
es
xor
adc
cmovae
sub
test
(bad)
aaa
stos
cwde
bound
and
jp
retf
std
push
jmp
cmc
movs
in
mov
ds
repnz
outs
xchg
dec
or
adc
sub
sti
out
xor
retf
ficom
in
out
bnd
shr
cmps
std
mov
mov
(bad)
fld
shl
push
loope
ror
adc
push
xchg
push
mov
lea
add
mov
dec
(bad)
test
movlps
add
out
push
dec
add
mov
mov
cld
(bad)
jae
daa
jae
add
gs
enter
push
push
leave
test
mov
or
inc
je
jb
jnp
inc
add
cmp
clc
pop
rcr
inc
bound
std
mov
dec
jns
cmc
jb
adc
cs
ds
cld
aas
push
movs
adc
push
sub
pop
sub
aas
xchg
or
or
and
jle
add
test
dec
arpl
out
cmp
sar
xlat
sti
push
mov
sbb
push
pop
push
dec
popf
jge
cld
iret
inc
outs
push
mov
pop
dec
(bad)
cli
sahf
movs
das
push
shr
mov
jmp
ins
pusha
or
bound
ds
cmc
cmp
and
in
cli
jmp
cdq
arpl
mov
mov
(bad)
pop
ror
js
test
movs
cld
jmp
stc
enter
mov
sbb
imul
cmps
or
mov
jae
and
(bad)
jp
push
stc
push
inc
scas
fsub
add
ret
les
test
jbe
and
shl
mov
sahf
jae
stos
sbb
test
fiadd
inc
stc
sub
push
add
and
jle
mov
dec
mov
xchg
shl
xor
xchg
inc
call
mov
dec
pusha
push
and
add
xor
or
mov
imul
pusha
movs
add
mov
nop
mov
sub
mov
fisubr
(bad)
mov
in
or
fist
mov
shr
jb
test
lea
jge
test
mov
(bad)
sbb
or
fdivr
mov
sahf
in
cmps
pop
mov
ret
xor
and
and
adc
adc
ret
fistp
xchg
jno
dec
lods
adc
movs
add
inc
popf
inc
jecxz
jnp
mov
sbb
xchg
inc
leave
aas
iret
pop
in
cli
shr
xor
xchg
into
iret
pop
sub
dec
aaa
scas
adc
jle
push
aaa
mov
adc
test
xor
into
arpl
and
mov
pop
idiv
fist
jmp
iret
adc
imul
dec
arpl
fisttp
pop
jae
pop
jbe
ss
(bad)
dec
mov
pusha
dec
(bad)
stos
test
out
repz
movs
xchg
push
int3
pop
inc
test
stos
in
push
in
mov
sub
aas
mov
jecxz
call
cli
sbb
or
xchg
push
push
jge
add
push
jecxz
xchg
scas
scas
in
rcr
(bad)
xchg
outs
outs
inc
lahf
xor
push
fwait
test
mov
push
mov
cmps
mov
push
mov
jl
dec
ffreep
rol
cmp
imul
clc
retf
aam
add
pop
cmc
xor
mov
cld
arpl
adc
scas
mov
pop
push
outs
into
lods
movs
loop
sbb
push
jne
in
repz
jno
daa
test
jae
stc
pop
push
mov
mov
(bad)
sub
pop
sub
sbb
or
loope
cmp
xor
cld
push
cmp
jbe
sub
stos
mov
cmps
or
xor
inc
mov
add
mov
xchg
dec
adc
popa
xchg
push
or
into
adc
(bad)
clc
test
and
xchg
add
psadbw
sahf
inc
push
(bad)
icebp
jbe
xor
repnz
addr16
(bad)
mov
cli
ins
sbb
and
jg
xor
mov
mov
and
ror
cmp
xor
mov
enter
fbstp
pop
sub
pop
sub
inc
xchg
or
lahf
daa
push
dec
clc
pop
dec
xor
bound
hlt
sbb
dec
pusha
test
mov
loopne
jns
dec
and
popa
xor
mov
inc
jbe
cli
outs
movs
dec
(bad)
cmp
xchg
add
sub
mov
xor
rcr
xlat
inc
loop
fisubr
adc
push
mov
mov
daa
je
jmp
mov
push
push
jae
mov
sub
call
std
rcr
js
push
(bad)
cld
pop
mov
imul
jmp
mov
push
dec
das
inc
add
add
push
xor
and
sub
pop
leave
push
aas
dec
andnps
cmp
div
gs
iret
push
jnp
aad
push
xchg
adc
leave
mov
or
sbb
mov
xchg
jo
cs
dec
sub
xchg
jge
lea
lock
ins
and
ror
ss
in
movs
cmp
pushf
xor
scas
loopne
push
xor
ja
push
stos
mov
and
dec
retf
(bad)
shr
retf
mov
pop
stos
sub
stos
je
loope
pop
sti
loopne
(bad)
lock
mov
or
js
fs
popa
shr
jg
cmp
xchg
jp
ja
ret
(bad)
xchg
arpl
cmc
mov
inc
dec
hlt
cmp
bound
shl
das
lods
dec
