inc
fmul
cmp
xchg
jbe
fs
loop
inc
cmp
dec
pop
std
ficomp
add
inc
ss
cmp
sti
dec
imul
dec
pop
cmp
pop
or
xchg
sti
mov
test
cli
fdiv
cmp
dec
out
lods
xor
cmp
into
push
pop
psubd
jbe
ficomp
in
dec
pop
inc
ficomp
in
dec
pop
inc
ficomp
out
dec
pop
inc
ficomp
out
dec
pop
inc
ficomp
lock
pop
inc
ficomp
icebp
dec
pop
inc
ficomp
repnz
pop
inc
ficomp
repz
pop
inc
ficomp
hlt
dec
pop
inc
ficomp
cmc
dec
pop
inc
ficomp
test
ficomp
test
xchg
clc
dec
pop
inc
ficomp
stc
dec
pop
inc
ficomp
cli
dec
pop
inc
ficom
shr
cmp
shr
mov
pop
adc
out
cmp
aas
jmp
ds
cmp
mov
fsub
enter
xor
rcr
dec
jmp
push
dec
jb
pop
cmp
test
add
mov
sub
mov
pop
cmp
add
add
(bad)
(bad)
dec
add
add
add
adc
add
outs
add
mov
add
ror
add
add
add
add
add
ret
jmp
pop
xor
lea
dec
mov
repz
and
mov
nop
lds
or
int3
or
jmp
xchg
adc
add
add
xchg
xor
pushf
lods
mov
pop
jne
mov
imul
sbb
mov
stc
ret
dec
cmc
popa
inc
in
add
call
pop
scas
cmps
push
xor
call
(bad)
(bad)
(bad)
(bad)
jmp
xor
test
lahf
sbb
(bad)
jmp
add
or
xor
rcl
jae
xor
fwait
mov
xor
xchg
loop
push
loopne
adc
movs
mov
je
stc
jb
jae
sbb
loopne
xor
lock
push
ds
mov
fimul
xor
add
push
xchg
add
in
cwde
imul
sbb
xchg
stc
ins
data16
jne
jmp
lock
xor
dec
das
and
adc
cmp
arpl
bnd
push
push
and
fcomip
push
pop
pop
clc
jae
repnz
cwde
add
out
call
or
xchg
fsubr
add
add
into
(bad)
(bad)
push
(bad)
nop
(bad)
sbb
jo
jne
(bad)
xor
(bad)
jmp
push
mov
addr16
push
push
mov
lock
jae
daa
inc
xchg
or
dec
xor
push
push
push
push
push
stc
push
jb
pusha
sub
retf
fidiv
int
stos
aad
xor
push
loop
sbb
or
or
jmp
(bad)
jnp
cdq
arpl
add
add
add
call
pushf
les
sub
sti
iret
stos
add
push
or
mov
call
es
jmp
push
mov
leave
stos
adc
adc
or
ret
in
and
daa
dec
repnz
popf
xlat
retf
mov
jmp
(bad)
cmp
add
xchg
inc
test
mov
jne
jb
fmul
call
sub
stc
jb
fcom
jmp
pop
fnstenv
retf
pop
jb
loope
les
add
clc
jae
fstp
pop
jmp
das
pop
div
jmp
inc
outs
xchg
jmp
xchg
jbe
loopne
out
iret
xchg
cmp
pop
out
jbe
pusha
(bad)
(bad)
repz
data16
xlat
fcomp
ins
cmp
cld
pop
pop
pop
(bad)
ds
lods
and
dec
pop
cmp
adc
inc
fmul
(bad)
jl
shl
jbe
fs
jbe
pop
push
pusha
addr16
sbb
pop
push
mov
inc
outs
maxps
lods
dec
dec
cmp
int3
dec
ins
cmp
dec
and
sbb
inc
sbb
inc
fmul
dec
push
pop
push
push
cmps
dec
outs
adc
in
ficom
ror
push
cmp
cmps
fild
rep
movs
mov
jbe
mov
enter
jg
xlat
mov
cmp
shr
pop
scas
popa
jmp
and
dec
pop
cmp
and
jbe
pusha
std
aam
out
out
test
fiadd
ins
js
mov
(bad)
out
xchg
inc
sub
adc
add
jmp
inc
aas
(bad)
dec
mov
cmps
in
movs
xchg
mov
push
fcom
xchg
add
loopne
out
(bad)
mov
idiv
sub
dec
add
dec
mov
jmp
mov
js
enter
lds
dec
pop
mov
ret
(bad)
(bad)
mov
(bad)
dec
cmp
pushf
cmp
mov
cmp
dec
(bad)
aas
ds
leave
jo
pop
cmp
mov
cmp
int3
lods
cmp
ins
int3
jl
xlat
push
shr
ror
xchg
pop
std
ins
lea
push
pop
cmp
cmp
dec
(bad)
ds
xchg
jmp
lds
inc
ins
mov
js
inc
nop
cmp
mov
xchg
je
inc
cmp
gs
jl
rcr
outs
arpl
jmp
fldenv
repz
loope
out
dec
pop
(bad)
xor
fidivr
ins
(bad)
mov
aas
jmp
fbstp
pop
call
ja
inc
ins
leave
leave
dec
pop
cmp
xor
xchg
inc
xor
ror
ds
(bad)
dec
xor
lods
xchg
jmp
out
dec
pop
(bad)
pusha
inc
jmp
push
mov
jmp
cld
cli
shr
ds
out
repz
ds
fnstsw
add
mov
jmp
jmp
cmp
adc
push
push
pop
cmp
dec
jb
pop
lea
ret
xor
mov
in
dec
pop
(bad)
icebp
dec
rol
mov
popa
cmp
in
(bad)
fiadd
xor
call
je
ret
pusha
inc
jmp
fstp
jl
pushf
pop
push
fwait
mov
int3
cmp
dec
lods
leave
jo
pop
cmp
popf
inc
outs
or
mov
add
dec
pop
xchg
cmp
mov
rep
pop
cmp
adc
pop
push
pop
leave
jo
pop
cmp
mov
int3
jl
fabs
test
dec
pop
movs
ja
pushf
cmp
xor
fild
out
test
adc
dec
pop
mov
out
pop
loope
in
dec
pop
ja
pop
jmp
jnp
cmp
xlat
push
xchg
es
ror
xchg
pop
mov
lea
dec
pop
cmp
ret
mov
jmp
xchg
sar
jnp
jmp
and
or
iret
pop
jmp
mov
xor
mov
in
dec
pop
cmp
inc
call
mov
mov
fnstenv
inc
call
lds
imul
dec
mov
push
dec
pop
add
jo
mov
pop
push
pop
and
xchg
pop
cmp
rcr
pop
pop
les
pop
xchg
rol
cld
inc
ret
xor
mov
shl
jmp
mov
sub
loope
jmp
rol
cmp
dec
lods
mov
or
cmp
jmp
cmp
xor
fild
sti
fabs
movs
call
int
cmp
mov
(bad)
ds
cmp
mov
jmp
push
cmp
xchg
fs
fisubr
xchg
cmp
pop
lea
push
pop
push
repz
cwde
mov
pop
fimul
dec
icebp
ror
xchg
pop
pop
ins
lea
dec
pop
cmp
ror
cmp
dec
lods
leave
jo
pop
cmp
popf
inc
mov
xor
lods
leave
jo
pop
cmp
popf
inc
mov
scas
pop
jmp
cmp
dec
jb
pop
lea
ret
xor
mov
push
inc
fnstsw
pop
push
jmp
pushf
cmp
adc
inc
mov
pop
adc
pop
daa
and
inc
inc
jmp
pop
or
fcmovnb
xchg
xor
mov
mov
pop
leave
imul
cmp
pushf
cmp
pop
and
jmp
jb
xor
mov
jecxz
cmp
inc
and
dec
pop
xchg
and
pop
mov
xlat
mov
cmp
int
pusha
ret
cmp
sbb
les
pop
cmp
mov
add
int3
jl
xor
xor
dec
mov
add
das
jno
(bad)
push
sub
ja
movs
rol
fwait
cwde
(bad)
(bad)
(bad)
addr16
mov
outs
inc
bound
jmp
xchg
outs
mov
mul
push
dec
jmp
mov
jbe
test
or
mov
(bad)
xor
pop
(bad)
dec
ins
ror
mov
mov
lds
jge
call
or
pushf
cmps
in
dec
shl
jl
jecxz
and
dec
ror
jmp
cmp
pop
xchg
or
and
xchg
add
ret
jmp
xchg
(bad)
ja
cwde
pcmpgtw
fs
adc
sbb
add
jmp
cmp
pop
xchg
(bad)
and
or
pop
aas
scas
(bad)
mov
push
push
dec
mov
je
xchg
and
dec
pop
cmp
adc
mov
mov
sub
mov
inc
fcomp
dec
jbe
nop
(bad)
xor
pop
je
pop
enter
xor
xchg
push
add
call
(bad)
push
out
pop
js
(bad)
xor
dec
jb
arpl
dec
add
push
push
mov
inc
pop
iret
pop
outs
retf
cli
rcr
jmp
imul
xlat
test
cmp
call
shl
enter
sbb
xlat
and
rcl
cmp
lds
rcr
pop
push
movs
dec
outs
test
cmp
aaa
cld
std
pop
push
pop
gs
pop
in
(bad)
loope
adc
xor
leave
xor
lods
and
addr16
cmp
dec
shl
ret
pusha
sub
xlat
inc
jmp
fild
adc
mov
shr
pop
cmp
mov
push
cmp
dec
inc
mov
dec
pop
inc
pop
out
repz
test
cmp
dec
fistp
mov
aad
inc
aam
pop
cmp
fsubr
scas
or
pop
loopne
lock
pop
dec
mov
dec
pop
mov
and
mov
div
ss
xor
dec
pop
cmp
ss
outs
mov
loope
out
dec
pop
lds
push
(bad)
cld
and
pusha
lds
pop
in
repz
movs
inc
inc
jbe
je
ret
push
in
aam
pop
cmp
rcr
cmp
pop
loopne
out
dec
pop
mov
jo
pop
cmp
xlat
stos
push
or
mov
je
inc
inc
rol
movs
lds
cmp
out
fcmovnbe
fldcw
sar
jecxz
mov
lods
add
pop
(bad)
cmp
cmp
adc
lods
(bad)
mov
std
push
xchg
push
test
sub
xlat
mov
push
mov
call
xor
out
adc
mov
add
(bad)
test
or
mov
pop
dec
outs
jnp
cmp
xlat
mov
rcl
ja
(bad)
mov
mov
fsub
mov
aad
xor
ret
jmp
cmp
xchg
push
shr
mov
inc
ret
jbe
inc
cli
sar
cmp
dec
inc
inc
jmp
xor
push
xor
jmp
adc
mov
cmp
call
rcr
daa
(bad)
fsub
cmp
xlat
and
xor
sbb
cli
sar
inc
jmp
out
ins
das
cmp
mov
cmp
shl
jmp
sbb
pop
push
push
jmp
cmp
pushf
pop
mov
dec
mov
outs
adc
xor
cld
cli
rcr
stos
repz
fild
repz
and
dec
pop
cmp
xchg
pusha
std
rcl
cld
out
test
mov
iret
push
inc
pop
outs
fistp
ss
pop
cmp
add
push
pop
pop
cmp
dec
xor
outs
push
lds
pop
inc
push
jbe
fs
xor
xchg
test
jmp
mov
pop
push
pop
(bad)
out
out
dec
mov
std
aam
(bad)
out
xchg
inc
(bad)
mov
out
not
pusha
shl
fnstsw
xchg
fs
iret
movs
jmp
pusha
js
ins
lea
dec
ror
dec
arpl
dec
inc
movs
std
dec
pop
mov
(bad)
sbb
jo
pop
cmp
ins
mov
cmp
dec
out
out
xlat
stos
inc
jbe
loopne
or
inc
inc
outs
das
jl
outs
dec
pop
cmp
cli
iret
cmp
test
mov
outs
dec
pop
cmp
add
cmp
mov
out
aas
inc
inc
push
lahf
mov
ret
fsub
fndisi(8087
pushf
cmp
fwait
jo
xor
nop
lods
push
jmp
dec
je
dec
dec
mov
inc
rcl
mov
stos
dec
adc
push
push
ins
dec
mov
cmp
rcl
pusha
push
mov
pusha
leave
sub
inc
outs
dec
or
mov
out
aad
sub
call
idiv
pop
dec
outs
inc
pop
cmp
pop
adc
call
cmp
pop
hlt
mov
push
stos
repz
push
cmp
call
mov
inc
pusha
std
jbe
fs
sub
sub
retf
ins
sbb
pop
js
pop
ds
dec
pop
mov
ins
ret
ror
cmp
retf
pusha
pop
fbstp
in
dec
pop
(bad)
xor
xor
aas
push
or
pusha
(bad)
sub
stos
sub
inc
out
repz
mov
cmp
mov
cmp
xchg
dec
inc
jmp
pop
lea
xor
js
dec
mov
pop
mov
iret
cmp
lods
bound
in
dec
pop
jge
xchg
dec
inc
jmp
pop
lea
xor
pop
mov
aad
xor
les
pop
rcr
xor
pop
loope
in
dec
pop
xchg
jmp
mov
dec
shr
sar
cmp
iret
and
or
pop
cmp
xchg
pusha
add
push
pop
cmp
xlat
mov
lds
ins
out
not
mov
(bad)
xor
call
push
mov
or
mov
and
dec
pop
cmp
adc
jecxz
imul
dec
pop
cmp
mov
cmp
dec
rol
(bad)
fs
xlat
mov
and
(bad)
mov
xchg
jbe
nop
lds
pop
out
sbb
test
inc
push
push
movs
daa
icebp
xlat
mov
shr
lds
cmp
pop
cmp
jae
and
jbe
fs
push
pop
cmp
or
je
ins
lea
ins
out
test
and
dec
pop
cmp
xchg
je
ins
lea
push
in
or
mov
(bad)
xor
sub
pop
push
call
xchg
push
(bad)
xor
pop
(bad)
xor
or
mov
(bad)
xor
sub
ins
(bad)
xor
or
mov
mov
scas
dec
ror
in
in
xchg
fs
xor
sbb
mov
inc
hlt
dec
pop
cmp
xchg
je
ins
lea
dec
ror
les
fisttp
xchg
(bad)
cdq
pop
mov
dec
aam
jmp
inc
hlt
dec
pop
cmp
xchg
je
ins
lea
ins
out
div
out
out
mov
inc
inc
(bad)
jnp
in
xchg
fs
xor
sbb
mov
jmp
fild
push
fistp
mov
gs
dec
out
repz
shl
je
jl
xor
add
mov
(bad)
scas
js
lds
dec
mov
(bad)
xor
pop
(bad)
xor
cmp
(bad)
xor
add
mov
(bad)
scas
js
lds
dec
mov
(bad)
xor
pop
add
push
pop
cmp
dec
ror
push
(bad)
xor
jo
jmp
stos
jo
adc
cmp
mov
rol
or
test
(bad)
cmp
mov
xlat
daa
push
cmp
mov
(bad)
stos
jo
cmp
cmp
xlat
mov
or
mov
(bad)
xor
sub
pop
push
xor
and
jo
xor
ins
out
not
mov
(bad)
xor
call
push
in
in
xchg
fs
xor
sbb
mov
ds
pop
cmp
adc
dec
test
add
push
pushf
cmp
imul
movs
ins
pushf
cmp
outs
pushf
cmp
outs
pushf
cmp
ins
pushf
cmp
fcom
pusha
mul
(bad)
cmp
movs
inc
sbb
bound
mov
dec
mov
jmp
xchg
shld
dec
mov
outs
adc
inc
dec
enter
pop
push
dec
pop
lods
adc
outs
adc
stos
shl
push
fistp
movs
dec
jne
push
mov
aad
push
jbe
jo
xor
inc
dec
rcl
scas
xchg
jbe
push
(bad)
icebp
aad
cmp
pusha
mov
mov
lds
pop
out
pop
(bad)
mov
ja
shl
xchg
inc
inc
jbe
mov
(bad)
mov
xor
lock
pop
cmp
fidivr
ds
dec
pop
dec
ins
ficomp
iret
fnstenv
dec
pop
(bad)
xor
lds
ins
out
repz
pop
jbe
push
(bad)
xor
and
pop
in
in
call
add
cld
dec
rcl
pop
adc
lock
pop
lds
pop
out
je
pop
enter
xchg
pop
(bad)
mov
mov
not
mov
(bad)
xor
or
push
xchg
xor
(bad)
(bad)
xor
(bad)
outs
retf
je
push
mov
fsubr
pop
mov
cmp
(bad)
scas
cmp
dec
ins
repnz
in
not
lahf
push
je
fs
dec
pop
cmp
xlat
lahf
dec
and
fs
adc
fnstenv
pop
loopne
out
dec
pop
(bad)
xor
mov
iret
ror
xor
add
retf
push
mov
shl
fs
mov
loope
cmp
cwde
fs
xor
inc
lods
(bad)
mov
cmp
adc
fs
xor
xor
jo
out
rol
jo
sub
inc
icebp
dec
pop
cmp
nop
fs
xor
or
dec
pop
enter
(bad)
sti
shl
pop
in
repz
pushf
inc
je
pusha
add
dec
pop
cmp
aaa
cmp
lods
lea
ror
cmp
push
jge
outs
sub
cmp
adc
jmp
pop
daa
lods
fcomp
scas
adc
fnstenv
pop
loopne
in
dec
pop
(bad)
xor
mov
iret
ror
xor
add
retf
push
mov
shl
fs
mov
loope
cmp
cwde
fs
xor
inc
out
dec
pop
cmp
mov
out
adc
fs
mov
pop
out
add
lahf
inc
jbe
push
outs
retf
cli
shl
out
test
cmp
call
hlt
xchg
push
xor
push
loope
jg
pop
(bad)
ss
jg
neg
pusha
std
je
dec
dec
mov
lea
xor
adc
add
lods
pop
rcl
cs
lds
push
out
out
aad
dec
mov
pusha
cmp
dec
inc
xor
dec
pop
xor
pop
cmp
cwde
push
inc
mov
lahf
inc
aam
pop
cmp
fcomp
scas
adc
fnstenv
pop
loopne
in
dec
pop
(bad)
xor
mov
iret
ror
xor
add
retf
push
mov
shl
fs
mov
loope
cmp
cwde
fs
xor
inc
lock
pop
cmp
mov
out
adc
fs
xor
push
push
adc
and
sti
xlat
mov
addr16
pop
(bad)
je
dec
sub
xlat
es
outs
enter
xchg
push
dec
outs
add
sbb
jo
pop
cmp
xlat
mov
sbb
jge
mov
mov
js
shl
xchg
inc
inc
jbe
dec
push
dec
dec
ror
nop
xchg
inc
xor
out
pop
(bad)
mov
mov
je
inc
mov
ja
test
push
out
pop
js
enter
sbb
cmp
test
xor
out
es
movs
daa
cmc
xlat
mov
inc
jbe
push
ret
loopne
in
dec
pop
(bad)
cmp
loopne
sti
dec
out
jae
sahf
cmp
cmp
sbb
push
out
adc
test
dec
jo
pop
cmp
sar
aam
pop
cmp
rcr
jo
pop
cmp
xlat
mov
sbb
jge
mov
mov
js
shl
xchg
inc
inc
jbe
dec
push
inc
dec
ror
nop
xchg
inc
xor
out
pop
(bad)
mov
mov
je
inc
mov
ja
test
push
out
pop
js
enter
sbb
cmp
test
xor
out
es
movs
daa
cmc
xlat
mov
inc
jbe
push
ret
(bad)
push
fbld
sub
ss
xor
xchg
lds
imul
xchg
mov
gs
dec
and
jmp
mov
or
mov
(bad)
xor
sub
mov
dec
je
pop
mov
aad
jo
pop
pop
cmp
adc
jmp
pop
add
movs
mov
jbe
push
xor
xchg
push
(bad)
xor
and
adc
pop
mov
aad
jo
out
cmp
iret
fld
mov
cmp
inc
pop
mov
dec
ror
nop
xchg
inc
xor
out
pop
shl
dec
and
mov
cmp
stos
pop
jbe
lds
imul
inc
jbe
pop
enter
(bad)
mov
daa
cmp
inc
jmp
pop
(bad)
xor
cmp
xor
add
mov
(bad)
xor
add
pop
in
in
call
jbe
push
pop
jbe
lds
imul
inc
jbe
pop
enter
(bad)
stos
inc
je
nop
xchg
inc
xor
fild
imul
ja
sub
pusha
sub
pusha
sub
popa
sub
popa
sub
bound
dec
cmc
bound
dec
adc
arpl
mov
sub
mov
push
out
mulps
adc
inc
cmps
pop
xchg
jbe
loopne
add
mov
push
pushf
nop
(bad)
dec
ins
out
pop
(bad)
mov
lds
imul
ins
es
movs
daa
lock
mov
sbb
push
loope
jg
pop
lds
cmp
xor
loope
cmp
xchg
inc
shl
iret
push
jbe
push
cmp
dec
call
bswap
pop
xor
xor
(bad)
repz
inc
enter
mov
outs
pop
retf
ins
repnz
dec
jo
ins
repnz
rcl
cmp
cmp
dec
xchg
lods
pop
rcr
push
popf
dec
jo
pop
cmp
xlat
push
cmp
sbb
out
fldenv
cli
add
cmp
add
cli
aad
dec
jbe
jmp
pop
mov
movs
inc
je
push
enter
sub
push
loopne
cli
aad
inc
pop
push
and
pop
loopne
repz
adc
jmp
and
(bad)
xor
pop
dec
mov
or
das
stos
repz
adc
scas
pop
shl
adc
cmp
xlat
push
cmp
call
pop
adc
adc
je
push
ror
xchg
divps
mov
dec
stos
cmp
add
inc
push
rcr
inc
(bad)
xor
dec
mov
fst
fs
xchg
push
data16
test
stos
repz
test
mov
mov
out
push
xchg
push
mov
jl
popfw
jl
mov
xchg
jbe
call
jbe
inc
out
test
call
cmp
imul
adc
test
push
sub
pop
mov
ret
dec
push
in
pop
cmp
(bad)
pop
adc
push
push
call
pop
jmp
sub
dec
pop
cmp
jg
mov
aam
pop
cmp
fsubr
mov
adc
push
xor
pushf
cmp
xor
pop
(bad)
mov
fst
add
pop
pop
cmp
dec
dec
xchg
jbe
pusha
(bad)
lods
js
cmp
pop
(bad)
mov
ror
fwait
xor
pusha
(bad)
lods
js
cmp
pop
(bad)
mov
mov
cmp
ins
out
out
xlat
push
push
add
inc
inc
es
sar
jbe
and
test
xor
lods
jl
les
dec
push
xchg
je
js
inc
dec
pusha
push
je
pusha
(bad)
mov
push
icebp
xlat
mov
lds
and
xchg
mov
call
push
psrlw
xchg
js
mov
xchg
cmp
mov
fmul
dec
cmp
popf
fbld
repnz
(bad)
sub
lods
push
sub
dec
loopne
idiv
fwait
scas
mov
xchg
scas
mov
loope
pop
jge
add
sbb
adc
fisub
sar
popa
loope
pop
push
mov
shr
push
cmp
cmps
mov
popa
imul
outs
mov
cmp
cmps
(bad)
cld
dec
adc
cmp
pop
enter
pop
(bad)
cmp
adc
sar
xchg
inc
addr16
pushf
cmp
shl
cmp
punpckhwd
jmp
shl
xchg
repnz
es
dec
pop
cmp
retf
jl
imul
sub
lea
jne
mov
xor
jae
dec
(bad)
push
push
dec
mov
jmp
add
xchg
(bad)
xor
inc
push
dec
dec
mov
cdq
adc
jo
xor
or
mov
loop
out
test
fbstp
xor
and
(bad)
xor
jl
inc
xor
or
jmp
mov
adc
fwait
js
scas
pop
in
call
mov
mov
mov
pushf
inc
xor
mov
mov
outs
xchg
shl
pop
cmp
cmps
(bad)
cld
(bad)
push
(bad)
cmp
xor
ss
lods
mov
pusha
test
cmp
ins
and
dec
pop
cmp
adc
inc
fmul
inc
fcom
inc
push
or
loopne
in
dec
pop
jne
imul
and
imul
dec
pop
cmp
retf
push
dec
mov
aas
je
push
add
fs
pop
jecxz
in
dec
pop
cmp
fisub
sub
mov
shl
cmp
xchg
pop
xor
stos
inc
jbe
out
neg
inc
je
pusha
(bad)
xor
test
iret
cmp
xor
and
push
ret
iret
pushf
cmp
xchg
js
sub
cmp
dec
inc
out
xchg
pusha
std
aam
(bad)
xrelease
mov
je
ins
lea
adc
cmp
xor
cld
cli
shl
cmp
not
inc
jbe
in
repz
stos
pop
push
ins
imul
lea
jge
or
mov
mov
mov
(bad)
dec
push
mov
pop
mov
je
ins
lea
push
popa
cmp
dec
inc
je
dec
pop
xor
dec
pop
cmp
stos
fs
push
pop
cmp
xor
mov
jmp
cmp
and
push
cmp
out
pop
(bad)
xchg
(bad)
xor
pushf
out
dec
inc
cmp
dec
pop
ret
pop
(bad)
dec
pop
fbstp
in
pop
loope
jmp
pop
(bad)
xor
cdq
neg
movs
inc
cmp
pop
lods
push
daa
jmp
dec
outs
lds
pop
pop
and
aam
pop
cmp
adc
inc
jmp
pop
(bad)
xor
cld
cli
rcl
cmp
xor
mov
(bad)
mov
cdq
neg
cmp
sub
out
pop
dec
arpl
jmp
pop
cmp
xlat
mov
shl
cmp
pop
movs
cmp
push
in
out
pop
adc
xchg
js
dec
pop
sbb
inc
jbe
js
icebp
adc
jmp
pop
(bad)
xor
cld
pop
stos
out
xor
je
pusha
dec
mov
fdivr
cmp
pop
dec
arpl
jmp
pop
cmp
xlat
mov
jo
pop
movs
cmp
push
in
out
pop
adc
xchg
js
dec
pop
pop
test
xlat
mov
test
xchg
jmp
in
mov
je
ins
lea
dec
pop
cmp
adc
jmp
pop
(bad)
xor
cdq
repz
jmp
pop
(bad)
xor
cld
pop
xor
mov
(bad)
mov
cdq
neg
cmp
sub
out
pop
dec
arpl
jmp
pop
cmp
xlat
mov
clc
jbe
movs
cmp
push
in
out
pop
adc
xchg
js
dec
pop
sbb
inc
jbe
js
icebp
adc
jmp
pop
(bad)
xor
cld
pop
(bad)
dec
xor
je
pusha
dec
mov
fdivr
cmp
pop
dec
arpl
jmp
pop
cmp
xlat
mov
ror
cmp
pop
movs
cmp
push
in
out
pop
adc
xchg
js
in
dec
movs
inc
jbe
js
icebp
xlat
movs
inc
je
mov
jmp
pop
cmp
aaa
jb
xor
je
xchg
js
xor
mov
out
dec
(bad)
cmp
mov
add
pop
dec
jmp
pop
cmps
in
aaa
dec
cmps
call
lea
lea
lea
lea
lea
lea
lea
lea
lea
lea
lea
lea
lea
lea
cmp
xchg
jbe
je
out
mov
cmp
pop
xchg
or
and
xchg
je
stos
ret
out
inc
xchg
ds
jmp
mov
dec
ror
ret
jmp
pop
cmps
(bad)
mov
cmp
inc
js
dec
pop
mov
dec
pop
mov
adc
cmp
fbstp
out
fs
xor
je
shl
adc
push
jmp
pushf
cmp
dec
rcl
test
inc
jno
(bad)
scas
cmps
mov
mov
mov
xlat
into
dec
sub
cmp
xchg
inc
fcomp
dec
push
pop
out
ja
mov
je
lock
in
xchg
mov
je
add
inc
cmc
in
xchg
(bad)
mov
je
adc
inc
add
mov
je
and
inc
adc
(bad)
out
dec
mov
shl
sub
retf
cld
xlat
mov
or
lods
mov
mov
js
in
(bad)
and
daa
(bad)
pusha
ins
xchg
dec
pusha
push
popf
mov
cli
ret
(bad)
test
mov
mov
leave
pusha
adc
test
popa
ja
ret
xor
adc
ins
out
or
inc
js
(bad)
xchg
scas
add
ror
ja
jp
jae
pop
cmp
(bad)
fild
out
sbb
dec
enter
aas
jbe
xchg
enter
enter
cdq
mov
dec
pop
aas
out
icebp
mov
dec
pop
(bad)
and
and
cmp
cwde
cdq
int3
outs
adc
test
mov
dec
pop
mov
fdivr
aas
outs
adc
lods
shl
shr
xchg
pop
(bad)
shl
pop
cmp
mov
jge
push
(bad)
push
xor
call
cmp
fdivr
cmp
xchg
push
xchg
(bad)
mov
xor
mov
cmp
dec
out
sti
dec
pop
cmp
mov
imul
dec
pop
cmp
retf
xor
jo
in
mov
xchg
cmp
jmp
and
jo
out
xlat
pop
loopne
in
dec
pop
(bad)
xor
jmp
pop
dec
jns
pop
cmp
xlat
test
inc
lods
push
xor
adc
(bad)
mov
mov
xlat
test
cmps
in
ja
xchg
mov
ret
mov
pusha
sub
mov
out
push
cwde
mov
mov
fs
add
mov
outs
adc
retf
mov
mov
ja
sub
mov
es
pop
cmp
xchg
test
mov
fst
inc
jmp
imul
dec
pop
cmp
mov
call
and
icebp
dec
jmp
fs
out
jecxz
sbb
pop
fcom
xor
inc
(bad)
lahf
shr
or
sbb
add
and
xor
js
(bad)
jmp
(bad)
addr16
popa
daa
repz
mov
(bad)
repz
mov
dec
jp
pop
cmp
sub
xor
mov
jbe
lds
es
les
dec
js
mov
sbb
ja
pop
iret
push
sub
cmp
xlat
push
push
mov
cmp
les
and
ins
(bad)
cmp
sbb
imul
les
and
cwde
inc
outs
xchg
dec
inc
jbe
pop
enter
cmp
rcr
daa
adc
mov
mov
fisubr
jbe
xor
mov
ins
mov
(bad)
pusha
aas
mov
mov
push
jbe
xor
jbe
push
ret
bound
push
inc
sub
and
inc
out
(bad)
loopne
aaa
dec
pop
cmp
dec
out
dec
and
push
ret
sbb
cmp
inc
loopne
out
ja
pop
(bad)
xor
adc
or
pop
cmp
xchg
pop
shl
popa
(bad)
xor
cmp
outs
cmp
dec
xchg
xchg
mov
dec
pop
shr
dec
outs
das
pop
cmp
mov
xchg
aam
pop
cmp
mov
sub
mov
sar
mov
pusha
movs
or
cmp
ret
test
inc
ins
fild
not
mov
inc
push
dec
mov
ror
movs
lods
leave
xor
(bad)
dec
push
pop
mov
or
cmp
dec
pop
push
ror
jl
mov
lods
sub
(bad)
and
dec
pop
cmp
adc
(bad)
xor
je
rcr
pusha
jne
and
dec
shl
push
hlt
cmp
pop
mov
mov
scas
sub
cmp
lea
dec
ror
xor
loopne
adc
sbb
sti
xlat
mov
mov
xchg
mov
sbb
rcl
push
and
jmp
xchg
mov
mov
je
jg
pop
daa
adc
push
cmp
and
jmp
ja
jecxz
rol
xchg
je
jg
pop
daa
cli
iret
push
cmp
and
jmp
pop
xchg
jbe
pop
mov
dec
shl
adc
stos
and
inc
jbe
push
mov
jbe
add
mov
jbe
or
pop
mov
minps
cmp
push
or
scas
pop
rol
(bad)
fwait
mov
dec
and
(bad)
xor
mov
ret
dec
jns
cmp
xor
mov
iret
(bad)
pusha
mov
dec
popa
xchg
je
ins
(bad)
xor
scas
(bad)
jmp
dec
je
cwde
mov
sbb
inc
repnz
dec
pop
cmp
pop
dec
mov
jne
pop
rcr
xor
pop
lds
and
dec
push
es
adc
dec
out
jo
rol
retf
pusha
push
fbld
push
(bad)
xor
and
sbb
(bad)
lahf
lods
cmp
pop
or
xor
mov
mov
xor
pop
cdq
out
and
test
out
not
mov
(bad)
xor
call
loopne
and
mov
dec
je
and
xor
mov
mov
mov
cmp
icebp
mov
xchg
leave
xor
pop
mov
ins
push
cmp
shl
dec
jo
shl
xchg
and
out
pushf
inc
(bad)
jecxz
fistp
in
movs
rcl
xchg
and
shl
push
cmp
rcr
pusha
push
(bad)
aaa
inc
cmp
mov
ins
(bad)
xor
out
js
and
rol
mov
mov
pop
pop
mov
pop
inc
pop
out
dec
pop
xchg
inc
adc
push
inc
mov
dec
pop
xchg
scas
sbb
or
fcomp
pusha
repz
(bad)
leave
(bad)
jno
cmp
dec
out
jbe
add
push
inc
jmp
pop
mov
(bad)
pop
jge
or
pusha
cmp
dec
shr
jmp
ror
pavgb
out
cmc
pop
cmp
jbe
pop
shr
jbe
jmp
pop
cmp
jmp
pop
mov
aaa
sub
fs
dec
dec
js
pop
sub
(bad)
cmp
push
jmp
pusha
test
mov
xlat
ins
jge
pop
shl
lods
push
pop
cmp
ror
aad
mov
jmp
dec
sub
fisttp
jbe
(bad)
out
cmc
pop
cmp
outs
pop
shl
inc
shl
minps
dec
ror
minps
dec
sar
(bad)
adc
push
jbe
add
lds
fsub
ds
pop
mov
andnps
or
mov
inc
rcl
pop
or
cdq
add
pusha
cmp
dec
rcl
dec
popf
shr
pop
cmp
ror
dec
pop
cmp
dec
push
cmp
dec
fstp
mov
pavgb
out
cmc
pop
cmp
jbe
pop
shr
and
dec
pop
cmp
jmp
pop
mov
aaa
sub
sub
call
std
scas
ficomp
inc
push
push
and
sub
call
std
scas
ficomp
inc
push
push
and
repz
inc
jmp
mov
scas
sbb
or
fmul
inc
fcom
dec
jbe
ins
(bad)
push
push
pusha
add
dec
rol
ins
mov
loop
pusha
cmp
dec
rcl
ss
mov
repz
adc
jbe
pop
inc
jmp
pop
mov
outs
sub
add
jmp
int3
jmp
int3
sti
test
dec
xchg
jae
out
in
aam
cmp
aam
in
in
iret
and
adc
mov
fdivp
pop
popa
xor
cmp
push
out
jae
out
in
or
pop
mov
in
iret
push
inc
pop
repz
loop
jno
and
lea
push
out
jae
mov
mov
fdivp
pop
popa
xor
cmp
xchg
scas
xchg
lahf
xchg
pop
pushf
cmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
push
jmp
aas
fist
cmp
loop
jbe
dec
out
jecxz
pushf
cmp
xchg
or
fs
in
jbe
fs
in
jne
pop
les
dec
out
rep
mov
cmp
push
in
jne
pop
les
dec
out
in
aam
ds
fs
lea
js
xchg
cmp
adc
cmp
dec
shl
ss
mov
repz
pop
cmp
loop
ja
dec
out
loop
pop
popa
js
xchg
jl
fldenv
inc
jmp
pop
mov
outs
sub
add
jmp
int3
add
cmp
xchg
mov
push
inc
aas
cmp
push
inc
pop
add
nop
dec
pop
popa
or
jl
fldenv
pop
mov
xchg
pop
std
aam
in
in
iret
dec
aas
outs
cmp
mov
call
jno
mov
jne
pop
pop
mov
xchg
pop
les
dec
out
in
or
pop
mov
out
iret
push
inc
cli
into
mov
jmp
popa
or
jl
fldenv
cmp
mov
aaa
mov
inc
mov
bound
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
push
jmp
aas
fist
cmp
loop
ja
dec
out
jnp
pushf
cmp
mov
cmps
mov
dec
push
and
jne
pop
les
push
out
rep
mov
cmp
xchg
pop
les
push
out
in
aam
ds
fs
pop
les
push
out
in
aam
ds
pop
les
dec
out
rep
mov
(bad)
pop
jno
xchg
cli
sti
shl
iret
pop
sbb
jo
sar
push
dec
mov
and
sbb
sub
inc
shr
dec
ror
xor
out
inc
rcr
push
mov
lods
fld
dec
pop
push
pop
mov
loop
pusha
outs
fistp
out
cmp
shl
mov
cmp
rcr
pop
popa
inc
idiv
mov
xchg
ror
cmp
iret
and
adc
call
mov
pop
jno
shl
adc
movs
loope
inc
shl
cmp
jmp
mov
scas
mov
cmp
popf
sti
jl
dec
jb
pop
lea
mov
lds
popf
pushf
cmp
out
pop
cmp
dec
lods
mov
jmp
fild
inc
mov
inc
cmp
xchg
int3
jl
jg
(bad)
mov
lea
into
cmp
(bad)
idiv
ds
out
push
out
dec
out
cmp
xor
pushf
cmp
inc
mov
mov
rcr
repz
and
dec
pop
cmp
(bad)
sar
shl
jb
pop
lea
in
pushf
cmp
fs
cmp
out
pushf
(bad)
sub
std
clc
dec
pop
and
pop
pop
cmp
ins
data16
aad
or
xchg
add
sub
shl
dec
pop
lds
jmp
rol
add
inc
inc
popf
pop
mov
mov
int3
jl
pushf
inc
dec
ret
dec
pop
(bad)
xor
lods
and
push
pop
cmp
xchg
dec
enter
lds
in
(bad)
rcr
addr16
movs
mov
jbe
inc
cmp
in
cmp
dec
pop
mov
jmp
rol
xchg
jo
jmp
shl
xor
push
jmp
les
jmp
pop
cmp
sbb
mov
outs
mov
lock
push
jmp
pop
mov
push
inc
(bad)
dec
push
dec
pop
cmp
dec
jb
pop
lea
sub
push
inc
inc
jmp
pop
xchg
inc
adc
mov
or
xor
cmp
dec
loope
inc
ret
das
jno
mov
dec
shl
xor
cmp
dec
loope
inc
ret
stos
adc
ja
xor
jl
ret
addr16
sar
sbb
pusha
imul
cmp
outs
xor
push
dec
pop
jb
in
pushf
cmp
bound
push
sbb
or
mov
add
rol
andnps
inc
pop
jp
push
outs
cs
mov
ja
(bad)
movs
mov
fsub
retf
push
pop
std
jbe
push
sbb
mov
ds
lods
ss
mov
aas
or
mov
xchg
cmps
mov
fsub
enter
dec
sbb
cli
dec
shl
dec
sub
inc
push
dec
mov
push
or
pop
jne
jno
movs
jmp
pop
cmp
loopne
(bad)
jmp
cld
mov
jno
add
cmp
or
lods
fld
dec
pop
push
cmp
and
sub
cmp
dec
pop
jb
in
pushf
cmp
bound
cld
mov
pop
jmp
mov
mov
jmp
(bad)
cmp
jmp
bound
pop
dec
jmp
pop
xchg
scas
out
movs
fld
dec
jmp
fld
dec
jmp
mov
xlat
mov
out
ja
dec
ins
inc
pop
cmp
dec
into
inc
outs
or
sbb
inc
fmul
xlat
popa
out
not
test
jge
xlat
dec
push
out
push
cmp
dec
dec
jbe
call
inc
in
dec
pop
xchg
retf
mov
cdq
(bad)
test
xor
(bad)
in
(bad)
jnp
lods
in
test
outs
inc
es
outs
inc
pusha
xchg
out
test
sbb
fcmovu
test
out
inc
xor
addr16
mov
(bad)
cmp
jne
jno
std
retf
or
cmp
int3
das
sub
call
ret
in
scas
dec
pop
cmp
push
rol
call
(bad)
push
out
(bad)
push
in
out
xlat
test
out
xlat
fmul
dec
mov
lds
call
mov
pushf
mov
mov
fwait
jbe
pop
ror
in
xlat
pop
loope
jmp
pop
addr16
dec
call
inc
push
mov
xchg
jecxz
mov
mov
test
xchg
not
es
dec
dec
call
(bad)
jmp
(bad)
in
sub
jbe
pusha
ja
push
rol
ins
iret
pop
movs
dec
pop
cmp
and
aaa
dec
pusha
xor
dec
data16
fsubr
popa
outs
push
cmp
mov
neg
test
out
inc
das
pop
jg
and
pusha
push
out
rep
lods
inc
jbe
push
enter
test
aad
inc
jbe
push
enter
test
aad
inc
jbe
push
shr
mov
test
dec
cli
shl
cmp
dec
out
fcmovnu
push
lds
fisubr
je
lds
out
out
aad
inc
jbe
pusha
ja
push
rcr
outs
dec
jge
cmp
jae
arpl
jb
mov
cmps
dec
pop
cmp
fsubr
adc
fsubr
cmp
mov
std
mov
mov
sti
fldcw
cmp
and
cmp
xchg
out
fldcw
cmp
and
std
and
jbe
push
enter
push
je
outs
cmp
push
imul
dec
pop
cmp
xchg
sti
jl
rcr
outs
sub
cmp
xlat
imul
movs
int3
jl
or
push
cmp
dec
pushf
cmp
lahf
lods
cmp
fsubr
mov
pushf
cmp
dec
pop
cmp
and
cmp
or
sti
jl
xlat
pushf
dec
outs
icebp
in
jmp
pop
cmp
xchg
sti
jl
xlat
pushf
dec
jmp
in
pushf
cmp
xchg
ins
mov
hlt
iret
mov
fld
dec
fbstp
mov
cmp
pop
adc
xchg
sti
jl
dec
int
push
dec
pop
jb
in
pushf
cmp
bound
mov
sti
jl
fldenv
lods
sub
mov
add
cdq
ins
sub
movs
push
cmp
inc
push
cld
dec
pop
(bad)
xor
add
dec
push
mov
sti
jl
ret
shl
dec
aaa
in
pushf
cmp
pop
pushf
fld
dec
inc
inc
jbe
fild
in
pushf
cmp
sbb
inc
push
and
(bad)
in
movs
fld
dec
out
aaa
in
pushf
cmp
mov
jmp
inc
je
pop
retf
fistp
lods
inc
popa
test
jge
stc
iret
sub
cmp
mov
dec
out
fistp
ins
mov
jmp
xor
fisubr
in
pushf
cmp
and
fs
add
cmps
inc
jbe
jg
jecxz
pop
dec
mov
popa
xchg
cdq
out
mov
cdq
out
aad
lds
iret
push
jbe
pusha
(bad)
es
xor
dec
push
(bad)
push
inc
js
ret
dec
dec
ror
enter
push
(bad)
call
mov
cdq
out
add
mov
dec
push
iret
dec
outs
enter
push
(bad)
push
dec
js
ret
and
cmp
and
fs
lahf
inc
pop
in
dec
pop
xchg
jbe
ins
(bad)
lahf
dec
outs
test
bnd
es
dec
pop
cmp
push
fld
dec
out
sti
xlat
ins
mov
out
jo
ja
and
jnp
jg
jecxz
pop
dec
mov
adc
jmp
int3
or
push
pusha
pusha
inc
loopne
out
jmp
enter
push
jbe
loopne
jmp
pop
and
mov
outs
push
popa
(bad)
jmp
rol
dec
call
add
js
pop
sub
pop
lds
inc
call
or
out
jnp
pop
cmp
mov
pop
cmp
shl
xor
call
cmc
ja
sub
ds
jecxz
pop
inc
cmp
pop
jl
push
(bad)
jnp
mov
outs
pop
pop
cmp
xlat
cmps
inc
es
fs
rcr
push
dec
fadd
mov
dec
jmp
stos
dec
pusha
inc
aad
lds
mov
(bad)
dec
push
out
xlat
outs
addr16
sbb
stos
sbb
dec
pop
cmp
and
cmp
mov
jae
pop
cmp
inc
xor
dec
ins
lds
rol
stos
fs
cmp
jle
out
aaa
pusha
(bad)
dec
push
out
repz
(bad)
inc
outs
retf
je
pusha
(bad)
xor
aad
inc
cli
shl
cmp
dec
out
(bad)
fsubr
je
pusha
lds
xlat
cmps
inc
je
fs
xor
rol
aaa
push
pusha
mov
test
cmp
test
out
shl
dec
pop
mov
hlt
xchg
cmp
mov
dec
mov
inc
ins
jmp
dec
in
icebp
push
ror
fwait
cmp
jmp
pop
mov
out
xlat
test
add
dec
pop
leave
cmp
fmul
fst
(bad)
cmp
add
je
ins
cmp
push
out
jecxz
shr
sbb
lds
jg
enter
dec
jo
jmp
mov
mov
test
fld
dec
rol
jb
fld
dec
pop
(bad)
cmp
inc
js
pusha
fwait
dec
test
add
imul
pop
js
ret
das
(bad)
lods
std
retf
dec
lods
cmp
cdq
sti
jl
mov
pushf
cmp
bound
pop
scas
fild
in
pushf
cmp
out
test
sub
test
cwde
sti
jl
mov
jle
dec
mov
cmp
popf
sti
jl
fst
lods
sub
add
mov
mov
movs
jmp
pop
cmp
dec
pop
dec
jmp
pop
push
inc
mov
out
test
mov
and
jb
pop
lea
cmp
push
pop
(bad)
sub
fiadd
push
movs
fld
dec
out
sti
iret
cmp
mov
sub
test
(bad)
pop
pop
out
repz
ret
popa
or
jbe
(bad)
jnp
or
mov
outs
jge
cmp
out
pushf
inc
je
pusha
mov
(bad)
push
cmps
out
or
push
cmp
dec
fdivr
mov
pushf
cmp
or
pop
es
pop
cmp
in
lods
jmp
xchg
bound
movs
xor
shl
sub
dec
pop
cmp
pop
dec
jmp
and
cmp
fs
jae
dec
cmp
(bad)
movs
inc
mov
inc
dec
jmp
dec
dec
jmp
popa
cmp
dec
pop
leave
xor
call
dec
lock
pop
cmp
mov
fwait
je
pusha
lds
movs
inc
je
pusha
mov
je
sti
add
dec
pop
(bad)
xor
loope
jbe
les
nop
sar
hlt
les
jmp
pop
mov
loop
jle
repz
pop
pushf
dec
test
add
sbb
in
dec
sub
cmp
push
fdivr
sub
imul
cmp
or
cmp
iret
and
mov
cmps
jmp
shl
xor
cmp
dec
fild
test
pop
mov
pop
inc
inc
jmp
pop
mov
push
dec
mov
jl
shr
jno
cmp
mov
jl
pushf
pop
push
dec
mov
or
out
punpcklwd
jns
out
cmp
push
(bad)
sub
js
jge
jl
rcr
or
lea
mov
outs
(bad)
icebp
rcr
in
dec
sub
jno
in
pushf
cmp
cmp
cmp
popa
fdivr
xchg
dec
mov
push
ins
fdivr
js
sub
push
jmp
pop
xchg
inc
shl
cwde
pusha
pop
pop
mov
push
in
xchg
pushf
cmp
bound
inc
shl
xchg
pusha
idiv
sbb
in
dec
sub
sub
mov
xlat
mov
xchg
cmp
inc
pop
loopne
in
dec
pop
mov
jno
jmp
fbstp
lock
push
pop
cmps
in
movs
inc
dec
in
dec
pop
mov
loope
pop
cmp
pop
cld
(bad)
sub
mov
xlat
test
(bad)
sub
test
iret
push
inc
cli
shl
dec
jecxz
cmp
(bad)
rcl
dec
pop
or
add
nop
test
push
jmp
iret
cmp
imul
sub
retf
sbb
not
bound
jmp
pop
daa
pop
mov
cmp
or
dec
mov
enter
fnstsw
dec
inc
call
push
jl
rcr
aaa
cmps
jns
dec
pop
cld
pusha
pop
and
jecxz
cmp
dec
pop
cmp
test
mov
adc
or
jmp
jmp
ror
push
enter
loop
jmp
inc
dec
sub
pop
cmp
ret
lock
pop
cmp
dec
xchg
test
lea
dec
xor
sub
call
lods
cmp
out
cld
(bad)
sub
add
cmp
pusha
pop
pop
push
push
mov
pop
enter
xbegin
test
or
jl
shl
xchg
jmp
jl
iret
sbb
es
inc
and
shl
js
movs
call
pop
ja
shl
rcr
adc
jns
in
pushf
cmp
shl
pop
pop
cmp
fcom
(bad)
icebp
mov
adc
mov
mov
rcr
cld
pop
adc
cmp
loope
inc
rol
xor
jp
ret
(bad)
push
cwde
pop
popa
push
mov
ss
loopne
pop
push
cwde
pop
popa
ss
outs
mov
xchg
inc
ret
pop
pop
pop
cmp
sbb
push
xchg
call
cwde
jns
dec
mov
cmp
cmps
jmp
and
jmp
pop
mov
mov
dec
xchg
es
out
addr16
cmp
push
mov
dec
cmp
cmps
out
sub
pushf
cmp
ins
shl
movs
inc
rcr
dec
pop
enter
mov
inc
xor
cwde
inc
mov
mov
and
aas
pop
cmp
movs
pop
jae
mov
fild
out
movs
pop
cmp
ins
rol
test
pop
cmp
(bad)
jns
test
mov
jl
dec
pop
cmp
cmps
pop
xchg
jbe
scas
lea
xor
or
jl
mov
adc
sbb
test
pop
cmp
mov
pushf
cmp
mov
xchg
enter
(bad)
jmp
xlat
push
retf
lods
leave
xor
(bad)
movs
inc
mov
dec
pop
(bad)
xor
mov
fisub
cmp
call
ja
ret
repz
cs
leave
xor
(bad)
xor
inc
jno
mov
shl
jmp
mov
test
(bad)
sub
call
and
enter
cmp
dec
out
sti
mov
pop
cmp
xor
cmp
in
outs
adc
lds
fdiv
mov
mov
outs
pop
shl
add
xor
stc
jl
push
ror
dec
loope
pop
push
out
jae
mov
xor
out
jae
mov
shl
pusha
mov
and
sub
mov
mov
(bad)
ins
les
xchg
out
sub
loope
pop
fldcw
dec
pusha
mov
dec
pop
shl
popa
mov
jp
sub
push
pop
pop
push
loopne
pop
push
fdiv
hlt
shr
mov
push
loope
pop
push
fsub
add
je
pop
loopne
jmp
pop
(bad)
sti
int3
push
pop
pop
push
fdiv
hlt
rcr
fnsave
loopne
jmp
pop
shr
lds
shl
inc
je
push
aas
mov
fs
(bad)
int
cwde
pusha
push
pushf
jg
inc
fnsave
mov
scas
dec
shl
dec
xchg
mov
arpl
leave
cmp
inc
jbe
dec
inc
je
fs
push
mov
out
add
dec
enter
push
pop
pop
lahf
shl
pusha
add
test
cmp
xchg
shr
jne
loopne
pop
xchg
fistp
imul
sub
push
inc
pop
xchg
mov
jo
rcl
add
xor
stc
jl
push
rol
arpl
dec
jae
mov
psraw
pop
fldcw
dec
pusha
mov
mov
jmp
cmp
inc
rol
jae
sub
inc
push
jmp
mov
jmp
mov
in
lea
fmul
xchg
inc
xor
loope
pop
js
ret
rcr
js
shr
hlt
idiv
pop
cmp
aaa
test
add
int3
jl
xlat
push
js
pop
loopne
jmp
pop
add
hlt
idiv
pop
cmp
xor
fbstp
pop
loope
jmp
pop
ja
ret
rcr
js
pop
loopne
jmp
pop
mov
pop
pop
pushf
jl
xchg
lea
push
adc
jns
mov
mov
sub
scas
lds
jno
cmp
fadd
ror
jmp
dec
pop
jo
pop
pop
mov
jno
(bad)
ds
xor
stos
ret
pop
jno
and
cmp
(bad)
mov
pusha
sti
mov
pushf
cmp
adc
outs
inc
pop
mov
mov
test
(bad)
jecxz
push
mov
test
mov
data16
shl
sub
and
xor
pop
cmp
cmp
pusha
outs
loope
push
cmps
aad
pop
shr
int3
jl
xlat
and
in
jg
pushf
dec
stos
mov
inc
adc
sub
mov
pop
cmp
fimul
(bad)
(bad)
push
rcl
cmp
cmps
in
or
pushf
cmp
push
jl
sub
cmp
dec
jmp
cmp
cmp
pusha
cmp
pop
pop
add
push
data16
jmp
cmp
adc
jmp
pop
cmp
das
jmp
(bad)
int3
jl
mov
mov
outs
adc
jmp
mov
dec
outs
push
pop
cmp
xlat
mov
push
push
adc
repz
pop
ja
fidivr
addr16
out
and
jl
sub
mov
mov
cmp
(bad)
stos
cmps
shl
jl
sub
(bad)
in
in
dec
pop
ja
shl
pop
mov
lock
out
outs
or
pop
cmp
aaa
inc
shl
pushf
cmp
or
jbe
jl
sub
cmp
fild
jmp
(bad)
in
ror
cmp
pop
lea
sar
fsubr
(bad)
jecxz
fistp
or
pushf
cmp
push
and
not
fs
cmp
test
xchg
mov
cmp
nop
pop
mov
jl
iret
cwde
adc
ficom
pop
mov
pusha
mov
inc
cmp
scas
xchg
push
adc
loopne
pop
push
jae
pushf
cmp
inc
loopne
jmp
lods
sub
cld
pop
pop
cmp
sub
push
aas
pusha
push
fmul
outs
inc
pusha
mov
int3
stos
inc
repz
popa
mov
outs
dec
pusha
mov
mov
int3
jl
stos
mov
sub
movs
mov
jmp
pop
movs
call
and
pop
pop
cmp
lods
mov
push
add
pusha
inc
jmp
pop
hlt
in
dec
pop
cmp
pop
out
andnps
nop
minps
mov
cmpxchg
sti
pushf
(bad)
cmp
lods
jl
mov
jb
dec
pop
cmp
(bad)
cmp
jno
mov
pop
cmp
jnp
mov
jno
fs
rol
idiv
in
andnps
test
iret
fsubr
out
dec
ror
dec
pop
cmp
xlat
mov
cmp
dec
pop
xchg
sahf
push
inc
add
popa
cmp
dec
pop
mov
inc
adc
cmp
dec
pop
mov
sub
dec
jbe
push
(bad)
repz
dec
pop
cmp
mov
pushf
cmp
push
scas
lea
xlat
test
lds
push
in
mul
sub
inc
nop
mov
mov
dec
rcl
scas
xchg
inc
mov
out
repz
popf
inc
icebp
dec
pop
cmp
rcr
cmp
dec
in
jecxz
mov
retf
out
out
iret
dec
jbe
fs
js
sar
pop
xchg
mov
js
ins
cmp
fsub
dec
fdivr
outs
arpl
inc
out
dec
pop
shr
scas
and
dec
pop
cmp
adc
test
jmp
shr
pusha
retf
je
push
(bad)
push
jmp
retf
(bad)
out
adc
jmp
pop
daa
pop
add
inc
push
inc
fcmovb
dec
push
dec
mov
mov
cmp
adc
mov
test
inc
call
out
jbe
js
jbe
je
rol
pop
cmp
shl
inc
dec
punpcklwd
xchg
idiv
push
ds
pop
loope
pusha
ja
jns
loop
cmp
sar
dec
pop
cmp
gs
cmp
in
or
sub
shr
pop
cmp
jmp
pop
xchg
scas
mov
add
jmp
out
repz
cmc
jae
pushf
cmp
pop
rol
or
repz
enter
ds
and
xchg
les
imul
sub
xor
pop
loopne
jmp
pop
shr
bnd
dec
imul
dec
pop
cmp
inc
pop
cmp
fmul
cmp
sar
inc
in
dec
pop
mov
pop
push
bsr
js
mov
adc
pop
mov
rol
jmp
cmp
movs
lods
leave
test
pop
cmp
xor
popf
xchg
outs
inc
cdq
mov
(bad)
cwde
jmp
test
cmp
fcom
test
inc
js
push
pop
xor
sbb
inc
scas
repz
pop
mov
dec
dec
pop
cmp
add
jl
pushf
inc
push
dec
pop
retf
pop
cmp
movs
lods
and
xor
sar
pusha
lea
ins
inc
cmp
dec
adc
or
inc
dec
iret
dec
pop
movs
sti
ins
pop
cmp
sar
pusha
lea
(bad)
jmp
and
cmp
bnd
pushf
cmp
dec
lods
cmp
xor
mov
jmp
lods
sub
cmp
pop
int3
jl
stos
and
or
fmul
inc
fcom
dec
jbe
ins
(bad)
push
push
pusha
add
dec
rol
ins
mov
loop
pusha
cmp
dec
rcl
ss
mov
repz
adc
jbe
pop
inc
jmp
pop
mov
outs
sub
add
jmp
int3
jmp
int3
mov
mov
pushf
cmp
push
out
jae
out
in
aam
cmp
aam
in
in
iret
and
adc
mov
fdivp
pop
popa
xor
jl
fldenv
inc
jae
out
in
or
pop
mov
in
iret
push
inc
pop
repz
loop
jno
in
lea
push
out
jae
mov
mov
fdivp
pop
popa
xor
jl
fldenv
cmp
mov
pushf
cmp
mov
pushf
cmp
mov
pushf
cmp
mov
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
push
jmp
aas
fist
cmp
loop
xchg
sub
cmp
mov
pushf
cmp
mov
fs
in
jbe
fs
in
jne
pop
les
dec
out
rep
mov
cmp
push
in
jne
pop
les
dec
out
in
aam
ds
fs
lea
js
xchg
cmp
adc
cmp
dec
shl
ss
mov
repz
pop
cmp
loop
xchg
sub
cmp
es
popa
js
mov
jmp
movs
cmp
adc
inc
jmp
pop
mov
outs
sub
add
jmp
int3
inc
mov
pushf
cmp
mov
pop
pop
mov
push
inc
aas
cmp
push
inc
pop
add
nop
dec
pop
popa
or
cmp
xchg
pop
pop
mov
xchg
pop
std
aam
in
in
iret
dec
aas
outs
cmp
mov
call
jno
jl
lea
xchg
pop
pop
mov
xchg
pop
les
dec
out
in
or
pop
mov
out
iret
push
inc
cli
into
mov
jmp
popa
or
cmp
mov
pushf
cmp
mov
pushf
cmp
mov
pushf
cmp
mov
pushf
cmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
xchg
jmp
push
jmp
aas
fist
cmp
loop
xchg
sub
cmp
mov
pushf
cmp
mov
pushf
cmp
xchg
fs
pop
les
push
out
rep
mov
cmp
xchg
pop
les
push
out
in
aam
ds
fs
pop
les
push
out
in
aam
ds
pop
les
dec
out
rep
mov
cmps
jmp
shl
xor
cmp
dec
fild
test
pusha
(bad)
aaa
jno
shl
jl
sar
jno
cmp
pop
imul
xchg
xchg
sub
or
inc
aas
push
or
pop
cmps
in
movs
pop
xchg
jbe
loopne
add
fs
dec
pop
cmp
cmp
clc
jl
aad
inc
cli
rol
cmp
es
ins
rol
cmp
pop
adc
jne
ror
stos
jge
jns
in
cmp
ds
loope
jl
iret
push
ds
rol
jl
or
pushf
cmp
retf
je
inc
fsubr
dec
dec
call
mov
pop
cmp
int3
fldcw
jmp
loopne
jmp
pop
leave
cmp
dec
outs
pop
ins
rcr
sahf
cmp
add
js
pop
jecxz
jmp
pop
mov
jmp
pushf
daa
fnstenv
sbb
xchg
ficom
(bad)
rcl
retf
repz
int3
xchg
cmp
sbb
push
mov
dec
imul
mov
mov
xlat
mov
jne
jl
sub
int3
in
jmp
and
and
rcl
jmp
mov
jbe
fs
dec
clc
jl
dec
pop
cmp
pushf
jmp
lea
dec
pop
cmp
add
sub
nop
cmps
inc
lea
mov
pop
cmp
jmp
cmp
sub
into
sub
jmp
mov
out
jmp
sub
cmp
dec
inc
inc
je
pop
fsubr
dec
(bad)
cld
stos
cmp
pop
call
fwait
call
inc
retf
jmp
pop
and
dec
pop
cmp
or
pop
pushf
dec
test
add
add
or
sub
mov
mov
or
sub
cmp
dec
pop
bound
inc
pop
mov
adc
xchg
pop
cmp
in
jl
iret
push
cmp
std
adc
lea
cld
idiv
pop
cmp
psubsb
out
dec
pop
mov
rol
fbld
shr
push
(bad)
cld
scas
add
pop
cmc
std
push
pop
cmp
add
pop
cmc
cld
push
pop
cmp
movs
(bad)
jl
sbb
jmp
push
jo
or
fsubr
dec
jmp
lea
call
cli
jl
test
(bad)
xlat
into
dec
push
lock
pop
leave
xor
mov
jmp
push
jg
pushf
cmp
inc
pop
dec
jo
pop
cmp
jg
sti
jmp
pop
cmp
shl
jmp
adc
xor
dec
add
pop
cmp
ins
loopne
pop
test
dec
mov
mov
retf
dec
cmp
dec
sahf
hlt
or
pop
jbe
push
es
aas
or
mov
cmp
jle
(bad)
pop
shr
pop
leave
jo
push
cmp
dec
xchg
inc
mov
clc
jl
pushf
jmp
cmp
popf
(bad)
cmp
jmp
pop
leave
jo
pop
cmp
dec
xchg
and
lea
(bad)
sub
dec
pop
xchg
cmp
pushf
cmp
mov
cmp
mov
leave
jo
pop
cmp
dec
xchg
and
lea
(bad)
sub
dec
pop
xchg
cmp
pop
jb
jmp
jmp
and
xlat
inc
pop
cmp
fsubr
lods
dec
rcl
aad
fldcw
dec
ins
(bad)
jg
dec
cmp
dec
in
jmp
pushf
cmp
imul
jae
stc
jl
ins
out
lock
jmp
jl
dec
pushf
jge
mov
scas
stos
cmp
cmp
sub
jne
jecxz
rcl
aad
fldcw
dec
ins
(bad)
mov
sbb
fsubr
dec
inc
pop
outs
inc
mov
mov
pop
fadd
in
jmp
and
aam
inc
sbb
sub
jl
adc
cli
dec
push
and
sub
jl
dec
ror
dec
inc
imul
push
test
sub
cmp
dec
pop
nop
push
sub
cmp
movs
sar
imul
inc
pop
lea
mov
push
fcom
movs
sti
ret
inc
dec
xor
stos
lock
sub
mov
sar
pop
adc
sar
push
xchg
sbb
sub
hlt
xchg
jb
mov
shr
call
rol
dec
sub
pusha
add
add
add
pushf
cmp
stos
mov
push
or
or
and
mov
inc
and
dec
pop
(bad)
addr16
mov
or
inc
pop
jne
mov
mov
rcr
adc
and
dec
pop
mov
fdiv
lea
pusha
mov
(bad)
bound
stos
ror
minps
add
dec
pop
cmp
pop
in
xor
pop
cmp
adc
cmp
dec
shr
jbe
push
es
ror
repnz
cmps
mov
test
(bad)
das
jno
fwait
scas
(bad)
jae
mov
movs
mov
pop
pop
cmp
retf
out
out
sbb
sub
sbb
add
and
dec
pop
cmp
mov
sar
dec
pop
cmp
shr
dec
pop
cmp
ret
add
jne
int
pop
cmp
stc
int
cmp
dec
pop
lds
cmp
mov
push
(bad)
cld
xor
outs
stos
(bad)
arpl
jecxz
aas
inc
pusha
shl
or
mov
dec
adc
movs
sbb
pushf
cmp
inc
lods
jl
mov
cmp
dec
pop
mov
cmp
imul
jns
call
mov
push
dec
mov
push
jns
jl
or
jmp
mov
jmp
cld
pop
push
in
retf
call
mov
ds
mov
dec
mov
jmp
cld
cli
sar
jmp
and
call
pop
cmp
retf
sti
dec
rcl
ret
mov
cmp
cmps
in
(bad)
in
cmp
sub
xor
sar
imul
jmp
mov
dec
jb
pop
lea
dec
pop
cmp
inc
pop
dec
jo
pop
cmp
test
pop
pusha
push
std
adc
lea
ins
mov
jmp
or
sar
or
pop
lea
(bad)
mov
rol
pop
retf
(bad)
out
jo
and
je
inc
enter
sbb
pop
cmp
pusha
(bad)
cmp
rol
loopne
out
call
sbb
scas
cmp
pop
mov
dec
ror
pop
mov
dec
jb
pop
lea
shr
(bad)
dec
ror
ret
add
jl
xlat
dec
(bad)
pusha
and
push
cmp
sar
js
outs
call
xchg
pop
push
pop
mov
dec
rcl
rcr
jmp
push
pop
mov
ins
sar
cmp
or
test
cmp
dec
pop
fwait
dec
test
add
dec
pop
leave
out
sbb
out
jo
and
je
inc
enter
sbb
call
inc
adc
mov
(bad)
shr
adc
sub
lock
mov
rcr
jmp
push
pop
mov
rcr
and
js
inc
ret
inc
cmp
pusha
imul
or
cmp
ret
add
int3
jl
xlat
dec
js
pop
loopne
jmp
cmp
dec
call
or
loope
inc
fisub
je
shl
cmps
shl
dec
mov
lock
pusha
out
psubsb
scas
mov
lds
popf
pushf
cmp
out
pop
cmp
dec
lods
mov
jmp
fild
add
inc
fmulp
call
cwde
jmp
jmp
cmp
popa
lea
bound
lods
sub
cld
pop
push
out
(bad)
push
or
ret
pushf
cmp
mov
pushf
cmp
or
pop
cmp
dec
mov
iret
call
pop
mov
fsub
inc
mov
rcl
ret
pusha
pop
pop
mov
pushf
pop
push
adc
pop
cmp
iret
push
ds
shl
cmp
dec
xchg
cdq
add
fs
call
je
ds
ror
push
adc
repz
mov
cmp
scas
sar
jmp
and
stos
push
cmp
mov
shl
out
(bad)
movs
scas
xchg
ror
cmp
shl
dec
(bad)
pop
(bad)
cmp
rol
test
mov
dec
rcr
dec
ror
push
push
jmp
call
pop
mov
pushf
mov
pusha
push
pop
push
(bad)
mov
(bad)
cld
js
sub
cmp
pop
cmp
stos
mov
or
sbb
or
pop
dec
jmp
jmp
push
ins
ss
dec
jmp
mov
dec
pop
shr
pop
dec
jmp
iret
sub
adc
out
jbe
out
out
pushf
pop
or
jb
lods
sub
or
sbb
or
dec
xchg
inc
mov
fld
sbb
sub
mov
dec
shl
dec
call
push
push
mov
add
mov
addr16
imul
lods
push
popf
ret
popf
js
addr16
std
out
lea
pop
dec
ins
cli
stos
cmp
cmp
sub
cmp
or
arpl
mov
adc
aas
lods
(bad)
shr
cmp
xlat
xor
scas
push
inc
dec
jmp
pop
mov
pop
daa
js
outs
and
and
mov
and
sub
pop
rcr
xchg
fs
xchg
dec
pop
cmp
inc
mov
jp
pop
cmp
iret
sbb
aam
pop
cmp
xlat
mov
cmp
mov
ja
stos
fldenv
or
mov
pop
xchg
inc
cmp
or
pushf
cmp
push
mov
mov
sbb
out
xlat
pop
sub
jno
or
inc
cli
add
mov
cmc
dec
(bad)
ds
les
mov
hlt
int3
rol
mov
cmps
jmp
test
mov
mov
xchg
add
lea
inc
pop
cmp
adc
stos
ror
mov
bound
xchg
pop
sub
pop
adc
out
cmp
call
scas
(bad)
xor
test
int
cmp
not
imul
popf
daa
cmp
cmp
sbb
push
loope
mov
imul
cmp
xor
ds
push
fsub
out
pop
xchg
js
data16
in
mov
cmps
jmp
lods
leave
xor
cmps
in
xor
cmp
dec
loopne
pop
rcr
in
adc
pop
xor
