inc
lock
aas
adc
mov
xor
jnp
xor
clc
fs
imul
jo
jae
enter
lahf
lock
adc
sub
into
mov
pop
mov
lods
repnz
xor
jnp
mov
nop
jae
inc
(bad)
clc
(bad)
iret
mov
pop
pop
sub
add
jl
jae
js
clc
jae
aaa
das
sar
stos
pop
mov
enter
xchg
and
xchg
arpl
adc
pop
imul
aaa
push
jnp
cmps
add
xchg
and
imul
repz
cli
aad
xchg
jnp
sahf
sub
mov
rcr
or
xor
aas
cmp
enter
dec
(bad)
jae
enter
inc
arpl
js
jae
lea
add
add
test
jnp
xor
add
xor
arpl
inc
jnp
add
jae
popf
xchg
clc
xor
ret
jb
lock
inc
ret
jb
sub
jae
enter
js
jae
std
dec
ret
jb
mov
mov
enter
js
jae
xchg
and
outs
inc
es
or
pop
dec
cld
lock
fwait
xchg
pop
iret
aaa
test
hlt
int3
neg
and
test
mov
cmp
pushf
hlt
jnp
mov
(bad)
cmp
lock
mov
aaa
dec
mov
mov
adc
aaa
clc
mov
mov
retf
xor
ret
jnp
xor
jnp
mov
jae
lock
jle
or
sbb
and
wrmsr
enter
sar
xor
nop
push
mov
test
sbb
cmp
add
xor
jnp
std
imul
enter
enter
int3
ret
jb
enter
xchg
and
fcom
retf
xor
enter
leave
jnp
xor
xchg
rcr
cmp
ret
test
xor
nop
movs
push
imul
aad
test
sub
cmp
push
imul
cwde
pop
cli
adc
dec
xchg
arpl
sub
push
and
stos
or
sbb
jo
in
lock
int3
adc
enter
mov
adc
cmp
call
or
enter
js
jae
std
pop
ret
jb
test
js
jae
in
outs
ret
jb
xchg
add
jnp
hlt
ror
mov
add
xor
mov
jae
or
mov
leave
jnp
lahf
mov
sub
mov
mov
aaa
repnz
enter
retf
adc
enter
enter
pop
cmp
fiadd
jae
inc
mov
jae
das
repnz
jnp
mov
mov
adc
xor
xchg
shl
xor
mov
and
pushf
in
icebp
jnp
arpl
jle
xor
dec
test
adc
xchg
mov
mov
add
aaa
sub
mov
ja
iret
aaa
jnp
inc
int
mov
and
neg
ret
popf
push
inc
(bad)
fwait
xor
cli
div
into
xchg
stc
mov
mov
inc
sahf
and
sub
(bad)
jb
mov
sbb
xor
div
enter
int3
cwde
adc
idiv
xor
jnp
inc
les
xor
repnz
rdpmc
push
xor
jb
inc
int3
dec
mov
test
mov
push
arpl
mov
jnp
mov
and
or
enter
int3
dec
mov
fdivrp
push
enter
mov
jnp
xor
jb
test
mov
gs
sahf
lock
sub
fisttp
dec
adc
enter
lea
(bad)
pusha
mov
adc
mov
xchg
daa
dec
enter
ror
push
aaa
push
imul
outs
mov
adc
mov
xchg
xor
jnp
div
push
(bad)
fcom
add
ror
ds
mov
mov
das
repnz
sub
add
lahf
and
ja
jne
lea
lock
repnz
cs
int
(bad)
jb
clc
push
(bad)
enter
enter
adc
ss
repnz
cs
int
(bad)
jb
dec
mov
mov
ss
leave
cmp
shl
je
and
inc
mov
ror
jo
inc
jb
mov
imul
xchg
lock
and
xchg
jnp
(bad)
lods
cmp
cmp
ss
mov
test
mov
jp
inc
xor
inc
test
int3
inc
ds
or
mov
xor
push
mov
lea
mov
jo
mov
enter
add
arpl
leave
jnp
or
clc
inc
(bad)
lock
dec
add
test
repnz
out
(bad)
iret
test
inc
ds
or
mov
xor
push
mov
push
or
jae
aaa
jnp
jp
mov
rol
mov
int
jae
aaa
cmp
out
mov
clc
mov
test
iret
ss
mov
test
iret
ss
mov
test
iret
ss
call
int
jae
aaa
jnp
mov
jnp
iret
xchg
and
cli
aad
xchg
arpl
ins
les
aas
jo
push
xor
mov
int3
inc
mov
and
pop
mov
jae
mov
leave
jecxz
sbb
inc
mov
je
xor
inc
stos
sub
inc
outs
inc
jbe
movs
(bad)
inc
ds
int3
arpl
lea
sar
xchg
xor
sub
mov
sahf
sub
ins
les
jg
ds
mov
popf
xchg
and
(bad)
mov
jae
jecxz
sbb
inc
mov
je
xor
inc
stos
sub
inc
outs
inc
jbe
movs
(bad)
jo
inc
xor
mov
int3
inc
mov
mov
ds
int3
arpl
xchg
and
popa
fwait
sub
clc
ins
fdivr
jae
ds
mov
popf
xchg
inc
mov
aas
jbe
dec
mov
test
mov
push
loopne
jle
lock
(bad)
dec
push
(bad)
in
jnp
add
and
imul
es
sahf
sub
inc
rol
push
pop
sub
enter
div
jle
test
adc
fmul
ds
mov
mov
sub
mov
es
jae
sub
mov
inc
add
and
imul
es
sahf
sub
ins
(bad)
(bad)
sti
cs
cmp
mov
das
repnz
inc
mov
pop
inc
enter
mov
test
sub
xor
jnp
mov
pushf
cli
jne
repnz
int3
dec
jae
cmp
mov
lahf
lock
cmp
inc
call
jae
cmc
out
jb
jnp
cmp
shl
sub
sub
sub
mov
inc
int3
lock
jae
ss
dec
clc
sub
sub
xor
mul
mov
sub
mov
fwait
sub
int3
jne
enter
push
mov
dec
sbb
fwait
xchg
mov
mov
pop
fcomp
add
enter
xor
mov
adc
inc
ds
cmp
push
and
jb
adc
enter
cwde
xchg
daa
inc
enter
stc
mov
mov
lea
cli
ror
pusha
mov
lock
(bad)
lock
fsubr
xor
jnp
repz
xchg
cmp
jnp
lock
aam
mov
xor
(bad)
repnz
xor
mov
and
iret
aaa
and
xchg
and
cli
aad
push
jae
enter
enter
lahf
sar
imul
loope
cli
repz
inc
je
enter
dec
pop
or
iret
xor
icebp
ds
dec
mov
xor
lock
add
jb
cli
mov
xlat
jnp
mov
out
jb
jnp
sub
shl
sub
add
sub
and
enter
imul
xor
div
shl
test
push
or
mov
cmp
dec
call
xor
iret
aaa
jnp
inc
(bad)
clc
push
lods
imul
xor
daa
jb
enter
sar
cmp
xor
div
les
cmp
inc
inc
mov
repnz
dec
push
xchg
(bad)
inc
enter
xor
jl
loope
jae
dec
push
mov
dec
inc
je
enter
inc
mov
stos
iret
ss
repz
jle
test
inc
jbe
jl
jae
iret
clc
push
dec
jl
jae
imul
ss
pop
enter
and
cli
call
scas
mov
clc
jne
repnz
(bad)
jb
div
rcr
arpl
enter
inc
push
jnp
mov
and
test
mov
aaa
repnz
mov
jae
popf
adc
xchg
mov
lock
jae
lea
addr16
inc
ds
cmp
push
inc
mov
or
imul
aaa
test
enter
aaa
in
out
enter
xor
mov
fnstsw
iret
aaa
jnp
mov
adc
(bad)
iret
mov
push
jae
dec
inc
out
xchg
mov
inc
ret
(bad)
xchg
mov
mov
aaa
mov
xor
aaa
test
enter
ret
jnp
(bad)
sub
mul
aaa
test
add
lahf
and
xor
dec
xchg
or
mov
(bad)
jmp
xor
jnp
hlt
dec
ja
dec
jmp
xor
jb
inc
fdivr
xor
cli
enter
jne
repnz
mov
sbb
xor
enter
mov
retf
jp
add
jae
add
xor
clc
jne
div
xor
sub
mov
ror
jae
dec
mov
xchg
mov
push
jle
xchg
mov
fsub
mov
(bad)
xor
(bad)
xor
jae
lods
iret
xor
and
cli
enter
test
cli
enter
jne
repnz
aam
test
int3
inc
add
popa
mov
clc
inc
dec
dec
int3
inc
inc
dec
int3
clc
push
int3
enter
xor
mov
inc
ds
hlt
dec
jae
dec
dec
mov
aaa
clc
push
int3
enter
enter
mov
cmp
sbb
jae
and
repnz
jae
mov
jg
xor
jnp
pop
enter
and
xor
repnz
xor
adc
xor
jnp
or
mov
xor
push
mov
test
jnp
mov
jnp
pop
enter
cwde
adc
cmp
mov
mov
add
mov
div
push
mov
xor
jae
xchg
and
cli
aad
shl
enter
enter
lahf
rcl
fs
cmp
test
mov
ret
test
into
aaa
jnp
aam
cmp
stos
pop
jae
inc
inc
mov
test
retf
aaa
test
cmp
je
out
sar
adc
mov
out
jae
and
sbb
enter
aaa
test
or
mov
aaa
sub
mov
ja
or
enter
xchg
jg
xor
cwde
cli
mov
test
mov
test
xchg
mov
mov
inc
ds
cmp
push
sar
dec
xlat
mov
aaa
repnz
dec
cmps
mov
aaa
sub
push
sub
jae
dec
fwait
mov
aaa
sub
or
outs
dec
xor
jnp
mov
(bad)
inc
jnp
repz
sub
xor
mov
test
xchg
push
fdiv
xor
add
jne
jb
aas
dec
jns
xor
adc
nop
mov
test
test
iret
aaa
clc
mov
inc
mov
mov
aaa
lock
aaa
test
inc
mov
(bad)
mov
test
xchg
mov
mov
inc
ds
cmp
je
mov
jnp
push
dec
(bad)
int
test
dec
hlt
jno
enter
aaa
test
enter
mov
div
int
test
aaa
clc
mov
inc
mov
mov
aaa
cli
mov
bnd
aas
jg
aad
test
aaa
jnp
aas
dec
inc
jno
enter
outs
test
mov
test
nop
mov
retf
cmps
jnp
mov
ja
xchg
mov
aaa
mov
xor
enter
aaa
test
mov
aas
dec
mov
mov
in
jnp
pop
leave
adc
pusha
push
lea
aaa
test
mov
mov
jb
test
aaa
test
aaa
clc
mov
cmc
test
dec
ror
enter
or
shl
xchg
fwait
lds
test
hlt
les
iret
enter
mov
cmp
jne
mov
aaa
sub
sti
cmp
ja
iret
aaa
jnp
inc
ret
cwde
aaa
test
leave
adc
ror
cmp
outs
mov
aaa
test
mov
ret
enter
aaa
test
aaa
clc
mov
cmc
test
dec
ror
enter
imul
jno
xchg
pop
lds
test
hlt
les
iret
enter
mov
cmp
jne
mov
aaa
sub
ja
test
aaa
jnp
inc
ret
cwde
aaa
test
adc
into
aaa
repnz
leave
adc
ror
cmp
fimul
jg
aaa
test
mov
test
xor
cmp
cwde
(bad)
xor
mov
cmp
test
dec
ror
enter
mov
xor
mov
xchg
mov
hlt
les
iret
enter
mov
cmp
jne
mov
aaa
sub
lahf
cmp
mov
aaa
jnp
inc
aad
jb
mov
(bad)
mov
test
pop
(bad)
mov
dec
mov
jae
mov
test
xor
aas
cmp
jnp
lea
(bad)
iret
enter
int
(bad)
jb
jnp
mov
test
retf
sub
fnstcw
jae
imul
pop
test
mov
mov
test
sar
xor
aaa
xor
jnp
mov
test
in
aaa
test
xchg
repnz
sar
xor
retf
iret
test
mov
aaa
sub
or
sub
mov
leave
mov
(bad)
xor
(bad)
mov
enter
sbb
(bad)
iret
enter
cmp
ins
stos
mov
aaa
jnp
lea
(bad)
iret
leave
je
test
jnp
mov
push
or
mov
test
mov
test
xor
sti
iret
test
mov
aaa
sub
mov
test
iret
sahf
addr16
call
dec
test
mov
test
ror
test
iret
fadd
xor
jnp
jne
jb
aas
dec
inc
ja
enter
aaa
test
test
mov
enter
lea
cli
repz
push
(bad)
xor
(bad)
jae
enter
and
loopne
test
lock
sar
xor
lahf
add
jnp
pop
inc
(bad)
fwait
iret
test
mov
aaa
sub
or
sub
mov
stos
jnp
(bad)
sub
neg
or
push
int3
enter
retf
jnp
mov
aaa
sub
mov
test
iret
lahf
pop
cli
jne
repnz
add
repnz
mov
jae
dec
pop
jo
enter
lods
jnp
mov
mov
xor
jno
div
int
test
enter
dec
ficomp
fxch
js
xor
jnp
mov
mov
xor
test
fdiv
test
aaa
sub
push
sub
jae
dec
xchg
movs
jnp
mov
outs
cli
call
scas
mov
mov
enter
aaa
test
aaa
div
lods
aaa
test
ss
(bad)
repnz
mov
jnp
xor
fdivrp
test
(bad)
iret
dec
xchg
arpl
enter
inc
(bad)
fwait
iret
test
test
pop
retf
mov
fisttp
ss
xor
xlat
iret
test
pop
dec
call
test
mov
enter
inc
ds
cmp
je
pop
retf
mov
xor
not
inc
(bad)
xlat
iret
test
mov
inc
ds
cmp
je
iret
leave
jnp
mov
ror
leave
jnp
pop
enter
enter
adc
mov
mov
jnp
mov
test
iret
ss
mov
test
inc
aaa
test
jno
jae
enter
jge
mov
aaa
clc
lahf
and
retf
jnp
ret
ins
lock
xchg
aaa
test
mov
or
enter
dec
daa
mov
aaa
repnz
mov
jae
dec
push
jb
enter
aaa
test
test
pop
mov
(bad)
repz
test
mov
enter
inc
ds
cmp
je
es
jnp
mov
dec
sar
inc
(bad)
adc
test
pop
enter
aaa
test
aaa
sub
or
sub
mov
loope
cli
repz
push
(bad)
xor
(bad)
test
enter
jne
mov
aaa
jae
mov
jnp
xor
sbb
test
dec
mov
imul
xchg
test
mov
jae
test
fnstsw
enter
aaa
xchg
enter
cmp
xor
test
iret
test
pop
xchg
fwait
xor
inc
dec
fsubr
adc
dec
mov
mov
aaa
clc
mov
xor
push
mov
aaa
cli
cwde
sub
jnp
iret
jge
mov
aaa
div
ins
aaa
xchg
ss
mov
xchg
mov
ja
xor
dec
pop
nop
fwait
xor
inc
dec
fadd
adc
dec
mov
ss
clc
into
mov
test
dec
test
iret
sahf
jae
call
nop
test
mov
test
iret
test
pusha
test
into
aaa
test
mov
test
iret
sahf
jae
mov
test
iret
sahf
jae
mov
test
iret
test
and
(bad)
iret
(bad)
stc
popf
int3
aaa
test
lea
test
test
into
aaa
jnp
adc
sub
neg
or
neg
aaa
test
sar
loopne
test
sbb
iret
sahf
jae
lea
(bad)
iret
enter
dec
scas
mov
aaa
sub
add
sub
mov
aaa
sub
add
sub
mov
aaa
sub
add
sub
stos
mov
aaa
test
rcl
outs
xchg
mov
gs
sahf
sbb
mov
adc
and
jnp
xor
jnp
xor
arpl
push
and
sbb
xchg
lahf
test
test
mov
xor
adc
xor
jnp
cmp
jg
inc
test
enter
and
jne
test
lea
clc
jne
mov
ss
rcr
mov
inc
push
scas
mov
mov
ds
iret
aaa
test
lea
jae
pop
mov
xor
cs
aad
sub
scas
pop
es
lea
(bad)
jb
adc
enter
mov
xor
jnp
mov
stos
jnp
outs
add
lahf
and
sub
prefetch
cli
ror
cli
div
jle
test
pop
ja
mov
mov
push
clc
push
sub
jae
dec
pop
dec
scas
mov
mov
jae
jo
jnp
xor
int3
jnp
xor
jle
test
enter
mov
jae
mov
xor
(bad)
int
jo
cmp
or
retf
or
(bad)
hlt
add
enter
dec
jmp
jb
sti
jle
push
cmp
and
jno
enter
jl
jae
or
dec
adc
out
mov
dec
fwait
ja
inc
mov
int
in
jno
xchg
dec
xor
jnp
cmp
mov
pop
xor
jnp
xor
leave
movd
leave
jle
scas
mov
ss
jle
scas
mov
sar
cli
jne
repnz
int
jae
aaa
jle
scas
mov
retf
jae
int
(bad)
jb
lea
push
cmp
mov
push
jo
enter
iret
jnp
mov
arpl
jno
imul
push
cmp
fsubr
xor
and
iret
aaa
lea
push
cmp
mov
js
xor
cli
test
jnp
mov
arpl
jno
jg
aas
aaa
test
enter
stc
mov
jae
push
sbb
xor
sti
jle
push
cmp
push
fnstenv
nop
mov
shl
test
enter
stc
mov
jae
cmp
mov
push
cmp
movd
xor
jnp
xchg
test
enter
stc
mov
jae
es
xor
sti
jle
push
cmp
movd
test
enter
test
enter
push
cmp
cmp
mov
push
cmp
and
xor
ficomp
xor
jo
sbb
enter
lea
imul
jnp
xor
out
jno
clc
mov
leave
jle
scas
mov
dec
jnp
xchg
mov
xor
leave
jle
mov
enter
and
xor
leave
jle
scas
mov
sahf
enter
int
(bad)
jb
clc
jbe
push
cmp
and
jae
enter
cmp
mov
int
in
jno
js
mov
or
repz
call
jnp
mov
push
shl
je
xor
sar
dec
iret
test
pop
ret
xor
cmc
sti
jae
enter
pop
jnp
xor
mov
jle
push
cmp
and
mov
push
rcr
push
cmp
int
in
jno
nop
push
iret
int
in
jno
repnz
repnz
lds
jno
cmp
popa
leave
jnp
mov
sar
xor
test
jl
jae
int
in
jno
cmp
jnp
xor
xor
mov
shl
cli
test
jbe
imul
jae
inc
mov
jle
add
iret
repz
ss
cmc
mov
idiv
mov
xor
test
pop
cmp
es
enter
xor
xor
jnp
cmp
jmp
cmp
cmc
aas
jmp
push
mov
mov
jge
jl
jle
mov
mov
push
retf
push
mov
arpl
jno
sti
cli
ror
cli
test
mov
mov
xchg
lahf
out
jno
clc
xchg
aaa
inc
mov
(bad)
retf
enter
int
jecxz
enter
loope
cli
test
mov
shl
mov
mov
inc
jg
or
jae
int
jecxz
enter
mov
xor
mov
pop
jae
dec
pop
jg
mov
fcmovnbe
repnz
mov
inc
jg
cwde
imul
iret
int
jecxz
enter
mov
xor
mov
iret
xor
inc
mov
call
enter
xchg
and
popa
cwde
sub
mov
jo
aaa
xor
mov
div
jle
test
cmp
mov
mov
jae
and
sub
enter
mov
sbb
jae
and
sub
enter
mov
jae
jnp
(bad)
cs
or
and
sub
enter
mov
jnp
cmp
and
sub
enter
mov
outs
jb
jae
and
xor
fsubr
nop
mov
outs
add
lahf
inc
fwait
sub
jne
inc
mov
mov
mov
div
cwde
cwde
test
push
xchg
imul
jnp
call
dec
push
lahf
xor
fstp
cmp
jae
enter
hlt
jnp
mov
xor
xchg
int
(bad)
jb
clc
push
loopne
repnz
add
repnz
lods
scas
jae
lea
mov
adc
jae
enter
enter
inc
ds
or
jbe
jb
jae
lea
xor
(bad)
ret
xor
jnp
mov
cwde
cli
jne
repnz
(bad)
iret
jb
enter
jo
dec
test
jno
jae
enter
lea
jne
inc
ds
pusha
aaa
outs
xchg
stc
mov
out
pusha
mov
sub
xor
jge
inc
sub
out
push
enter
push
div
sbb
jae
aaa
jle
test
push
rcr
adc
int3
adc
mov
jnp
mov
cmp
aas
cwde
cli
jne
repnz
mov
jnp
iret
int
(bad)
jb
div
fcomp
ds
pusha
aaa
outs
xchg
sub
jne
and
push
xor
and
imul
es
(bad)
(bad)
adc
lea
sar
push
xchg
mov
xor
ss
cmp
clc
push
(bad)
enter
popf
xchg
cli
jne
adc
enter
lea
and
mov
xchg
test
push
cmp
lea
(bad)
and
cs
aad
sub
aaa
test
push
mov
jl
jae
mov
outs
arpl
mov
jae
das
repnz
inc
mov
cli
aad
xchg
jg
sahf
sub
inc
shl
cmp
jle
test
int
push
cmc
test
enter
jle
inc
xor
test
enter
jle
inc
xor
test
enter
jle
inc
xor
test
enter
jle
inc
xor
test
enter
retf
mov
retf
jle
and
repz
xor
int
iret
(bad)
int
xor
(bad)
int
push
icebp
mov
jae
inc
cmp
or
je
mov
xor
cdq
xor
int
es
mov
lock
je
and
inc
mov
cmps
repnz
int3
jge
fmul
jnp
inc
xchg
je
jne
adc
pop
je
jae
and
das
xor
je
gs
adc
loop
cmp
cwde
xchg
das
ins
enter
xor
mov
mov
xor
cdq
xor
stos
jo
xor
fwait
xor
xchg
retf
jle
enter
mov
int
jae
enter
jle
mov
outs
repz
test
pop
aas
dec
mov
and
aaa
test
jl
jae
hlt
inc
ja
pushf
repnz
inc
jne
mov
xchg
jno
hlt
jge
inc
mov
mov
into
jg
add
int3
je
xor
inc
sbb
int
enter
inc
xor
int
dec
ss
push
gs
inc
das
dec
xor
or
fnstsw
xor
sti
dec
push
retf
mov
into
jns
ins
inc
xor
retf
ss
mov
dec
inc
jne
mov
xchg
ja
jle
jne
and
xor
jae
out
mov
mov
xor
cdq
xor
stos
jb
dec
xchg
ja
lea
aaa
xor
jp
mov
jg
gs
addr16
dec
inc
dec
xor
sti
dec
ss
push
cmp
dec
inc
jne
mov
xchg
jo
hlt
jge
inc
sti
repnz
int3
jge
or
enter
iret
inc
mov
enter
and
sub
enter
inc
das
pusha
xor
int3
bnd
leave
jnp
xor
jnp
aas
dec
int3
mov
aaa
and
imul
es
fwait
sub
(bad)
jb
lock
cmp
addr16
iret
and
idiv
cmp
jnp
inc
cmp
mov
retf
jnp
inc
fidivr
fwait
xor
jnp
idiv
jnp
mov
jno
xor
(bad)
int
and
cdq
jno
hlt
outs
push
mov
inc
xor
xchg
test
int
(bad)
jb
je
xor
inc
fwait
xor
jnp
pop
cmc
xchg
jae
enter
lods
xchg
(bad)
repnz
xor
repz
ds
xchg
int3
jmp
xor
pop
nop
push
mov
(bad)
div
das
leave
lock
lea
pop
loopne
xor
cmp
aaa
cs
lock
jo
int3
jmp
xor
jbe
inc
clc
mov
jmp
jb
dec
xchg
ja
lea
(bad)
je
jp
gs
arpl
int
(bad)
jb
clc
mov
fs
jle
loopne
xchg
ja
lea
ja
leave
jnp
xor
imul
nop
(bad)
xor
and
(bad)
iret
aaa
clc
mov
xchg
and
cli
aad
daa
push
xor
xchg
mov
data16
xchg
lods
leave
aaa
test
iret
enter
enter
enter
iret
mov
mov
push
inc
mov
vmptrld
jl
lea
movs
mov
enter
jle
sbb
test
or
sbb
jb
jp
sub
nop
out
aaa
test
(bad)
cmp
push
je
jae
mov
int
ret
daa
test
aaa
adc
or
popa
and
sub
enter
push
test
mov
xchg
pushf
iret
aaa
adc
out
jae
jae
or
lods
iret
aaa
test
cwde
loop
xor
sahf
sub
enter
push
test
mov
mov
xchg
mov
leave
je
mov
xchg
mov
mov
jle
mov
ss
aaa
mov
mov
(bad)
int
ret
daa
test
fstp
jo
jnp
mov
jg
xor
int
ret
daa
test
(bad)
jmp
test
enter
pop
test
enter
xor
iret
aaa
test
jl
jae
pop
scas
lods
iret
aaa
repnz
rcr
repnz
xor
inc
inc
iret
and
xor
jnp
arpl
(bad)
sub
enter
ds
(bad)
retf
lea
xchg
mov
(bad)
cli
mov
fdivr
or
pushf
iret
aaa
or
lods
iret
aaa
sub
iret
int
(bad)
jb
clc
(bad)
fsub
test
enter
enter
and
mov
aaa
into
stos
out
aaa
test
mov
ja
jne
jb
inc
stos
clc
(bad)
mov
test
aaa
test
jmp
jo
xor
inc
mov
ja
jl
mov
aaa
test
cmp
jnp
inc
adc
jnp
inc
(bad)
repnz
xor
inc
(bad)
repz
aaa
test
and
jnp
retf
enter
mov
xchg
js
aaa
test
mov
xchg
pushf
iret
aaa
jnp
xor
lock
test
icebp
(bad)
lahf
fbstp
test
test
mov
test
movs
mov
and
xor
xchg
xor
enter
pop
mov
inc
outs
data16
jae
pop
(bad)
pushf
iret
aaa
clc
(bad)
les
test
aaa
test
icebp
and
ror
js
int3
inc
ja
mov
aaa
test
movs
cmp
mov
or
call
xchg
dec
jno
iret
dec
(bad)
pushf
iret
aaa
cli
into
les
test
jg
jbe
jl
jae
jne
lods
iret
aaa
jnp
imul
(bad)
jnp
mov
movs
mov
inc
mov
jae
enter
push
test
inc
(bad)
jmp
aaa
test
mov
movs
mov
inc
out
jmp
aaa
test
repnz
jno
dec
out
lods
iret
aaa
lock
pop
out
lods
iret
aaa
js
mov
aaa
repnz
scas
lods
iret
aaa
repnz
pop
test
pop
test
aaa
test
mov
aaa
inc
test
div
pop
test
aaa
jp
in
pop
test
aaa
jnp
repz
adc
pop
iret
lods
iret
aaa
mov
out
pop
test
lds
xor
out
fucomip
aaa
test
test
mov
inc
imul
mov
inc
ja
add
jae
jle
sbb
test
and
inc
out
xchg
aaa
test
xor
jnp
bound
inc
and
adc
mov
or
leave
jnp
mov
jae
aas
dec
inc
jb
enter
daa
test
enter
(bad)
sti
push
cmp
je
or
jnp
(bad)
jp
xor
xchg
aaa
test
and
jp
xor
clc
cdq
iret
inc
aas
jno
inc
(bad)
xchg
out
aaa
test
iret
enter
pop
test
aaa
test
rol
cli
ror
mov
jnp
cs
mov
fmul
sti
dec
xor
xchg
ja
lock
cmp
lock
sti
dec
xor
jbe
jl
jae
jle
shr
aaa
test
and
dec
(bad)
shr
aaa
test
jle
dec
fxch
jnp
inc
fdivp
ja
leave
jnp
xor
mov
dec
lahf
lods
iret
aaa
nop
icebp
mov
dec
(bad)
pushf
iret
aaa
jp
sbb
icebp
fs
sub
mov
mov
movs
mov
leave
je
movs
imul
mov
aaa
test
or
enter
hlt
inc
jno
enter
(bad)
sti
dec
or
enter
hlt
inc
ja
enter
ret
or
enter
and
lods
iret
aaa
jb
dec
ins
sti
push
cmp
movq
jle
sbb
test
iret
jge
lods
iret
aaa
test
in
test
dec
mov
lods
iret
aaa
jnp
jb
fiadd
mov
aaa
mov
mov
retf
xor
ss
mov
aaa
test
xor
test
les
test
aaa
jnp
xor
or
jb
xchg
pop
int3
aaa
test
mov
xchg
mov
leave
je
mov
xchg
mov
mov
jle
mov
push
mov
aaa
and
imul
es
fwait
sub
mov
xor
push
enter
xor
mov
inc
push
xchg
mov
enter
enter
inc
mov
add
mov
adc
inc
mov
cmp
(bad)
jnp
xor
(bad)
dec
sbb
inc
movs
jne
jae
iret
jnp
xor
fcomip
pop
xor
xor
sti
dec
push
mov
test
lea
cli
xor
gs
ss
aaa
and
lea
into
leave
sti
push
into
(bad)
xchg
test
jae
inc
js
xchg
mov
jae
dec
mov
lea
or
mov
jl
mov
lock
xor
push
xor
mov
(bad)
int
xor
lock
clc
mov
jno
retf
jp
xor
push
xor
mov
(bad)
int
xor
cmp
mov
clc
mov
aaa
js
jne
repnz
or
es
xor
mov
repz
jnp
xor
mov
int
or
mov
inc
push
xor
mov
mov
dec
push
mov
(bad)
stc
and
jne
jnp
es
js
xchg
stos
push
ss
mov
and
jne
jp
dec
xor
add
dec
push
mov
jle
dec
mov
jnp
inc
int3
sti
ss
leave
je
jne
and
imul
es
inc
push
jnp
js
scas
jle
nop
aaa
and
jnp
iret
enter
mov
jnp
mov
mov
dec
xor
push
mov
hlt
inc
das
inc
iret
mov
cwde
ss
mov
mov
cli
call
xchg
and
cli
aad
jg
xor
xchg
push
popa
enter
ja
sbb
(bad)
das
repnz
test
psadbw
cmp
test
cmp
jae
aaa
test
fcomp
sub
jae
aaa
test
fadd
jnp
xor
arpl
cmovp
gs
sahf
and
pop
arpl
push
dec
xchg
jmp
xor
adc
push
sub
xchg
es
inc
sahf
lock
sub
das
(bad)
test
jae
enter
enter
mov
jnp
xor
push
cmp
and
enter
test
sub
jg
mov
clc
push
xor
test
inc
xchg
call
xor
repnz
or
pop
mov
cli
jne
cli
pushf
xchg
retf
jnp
pop
enter
enter
lea
jne
nop
jne
lea
push
les
xchg
mov
fsub
sub
inc
ds
fcmovne
repnz
xor
mov
xchg
and
popa
fwait
sub
pop
sbb
jb
inc
mov
jae
enter
enter
enter
aaa
push
jnp
mov
jae
inc
mov
jae
dec
test
cdq
adc
enter
and
and
enter
inc
mov
repz
jnp
leave
inc
mov
(bad)
bound
xchg
mov
xor
(bad)
pusha
mov
cmp
and
and
enter
loopne
jae
and
and
enter
enter
xchg
mov
gs
sahf
lock
sub
xlat
and
pop
xor
enter
lea
sbb
int3
adc
enter
enter
rcl
test
xlat
inc
xchg
mov
push
sbb
mov
xchg
xchg
pusha
enter
inc
ds
pusha
aaa
push
arpl
mov
sub
inc
sbb
mov
jae
stc
mov
mov
inc
sahf
and
sub
inc
sar
dec
push
(bad)
mov
adc
lods
fcmovne
je
xor
jp
ja
push
jg
cmp
mov
adc
ror
jnp
mov
xchg
jae
jnp
or
cmp
mov
mov
pusha
aas
jle
ins
pusha
mov
xchg
daa
arpl
jnp
hlt
sar
ins
les
fwait
add
nop
js
hlt
inc
jae
int3
mov
dec
dec
les
and
xchg
jb
xchg
pop
arpl
jnp
hlt
shl
int3
inc
mov
(bad)
outs
xchg
and
popa
fwait
sub
clc
inc
les
dec
dec
ds
hlt
out
jnp
pop
repz
xor
and
inc
iret
and
xchg
inc
and
fwait
xor
and
mov
pop
inc
and
push
ror
jnp
imul
mov
popf
xchg
xchg
mov
gs
sahf
lock
sub
or
repnz
xor
repnz
(bad)
xchg
xor
clc
push
fmul
clc
push
fmul
clc
push
aam
test
inc
dec
call
xor
jnp
ret
ins
ret
out
push
enter
inc
ds
mov
leave
push
jne
(bad)
xchg
sub
lock
int3
xor
inc
ds
out
popf
push
enter
inc
ds
mov
aaa
je
je
mov
lock
jp
fmul
mov
mov
jns
fld
jae
dec
push
mov
dec
push
mov
mov
je
jo
repz
and
fld
jne
xor
int
into
(bad)
int
xor
leave
ds
mov
test
int3
clc
push
fmul
sti
push
into
leave
sti
push
into
enter
adc
repz
ds
jg
clc
shl
stos
sbb
movs
jp
xor
int3
es
aam
xor
mov
fwait
mov
(bad)
int3
sar
call
inc
ds
jg
jne
popf
jae
xchg
int3
es
aam
xor
je
jo
lock
int3
and
loope
jb
sub
ss
jge
call
xchg
and
jecxz
pop
jmp
mov
imul
pop
shl
mov
mov
(bad)
mov
pop
jmp
inc
out
jecxz
pop
dec
jnp
pop
jmp
jo
jmp
mov
pop
jmp
jo
jmp
mov
pop
jmp
or
jmp
mov
pop
jmp
mov
retf
xor
pop
shl
(bad)
jne
jb
(bad)
mov
pop
jmp
inc
aam
jecxz
pop
dec
jnp
pop
jmp
mov
jg
mov
pop
jmp
inc
and
jecxz
pop
sbb
mov
and
(bad)
int
mov
jecxz
scas
xchg
jae
enter
pop
jmp
mov
enter
cmc
cmp
inc
arpl
mov
int3
jmp
mov
pop
jmp
and
jecxz
dec
mov
dec
sti
pop
jmp
mov
pop
jmp
lock
jmp
mov
pop
jmp
clc
pop
jmp
mov
pop
jmp
fnstcw
mov
enter
dec
cmc
xor
mov
fs
enter
sbb
mov
or
jecxz
pop
jmp
mov
imul
pop
adc
pop
jmp
outs
pop
jmp
mov
pop
jmp
inc
call
mov
adc
jecxz
pop
push
mov
pop
jmp
add
jmp
mov
pop
jmp
mov
pop
mov
pop
jmp
mov
pop
jmp
mov
dec
inc
mov
xor
jecxz
pop
cdq
and
pop
clc
mov
pop
jmp
inc
call
ror
jmp
mov
pop
jmp
add
jmp
mov
pop
jmp
mov
pop
mov
pop
jmp
mov
pop
jmp
mov
dec
inc
mov
xor
jecxz
pop
cdq
and
pop
sbb
or
xchg
dec
xchg
imul
clc
ins
shl
cmp
repnz
ds
fisttp
xchg
repnz
mov
test
xor
xchg
test
enter
leave
mov
fcom
mov
xchg
repnz
popf
xor
xor
ss
mov
and
arpl
xchg
retf
iret
mov
jae
iret
jnp
xor
int
retf
inc
sbb
mov
fcom
mov
jo
xor
enter
inc
ds
mov
(bad)
inc
add
inc
or
fdiv
stos
xor
cmp
je
jge
push
mov
xor
inc
xchg
xor
jnp
and
jb
mov
(bad)
int
retf
sti
and
pop
rcl
xor
jnp
jne
sub
aas
jle
mov
mov
ss
es
and
inc
xor
(bad)
jne
sub
call
mov
jae
dec
mov
repnz
xor
dec
xor
sbb
les
xor
(bad)
stc
imul
test
xchg
mov
gs
sahf
lock
sub
jecxz
cli
mov
loop
jae
cmps
xor
jae
or
cli
icebp
aas
xchg
jb
or
pop
cli
inc
stos
sub
dec
inc
mov
mov
inc
iret
dec
mov
mov
xor
xchg
pusha
aaa
push
jnp
jae
mov
dec
mov
mov
dec
push
jno
enter
daa
mov
dec
pushf
jne
jae
fadd
lea
repnz
fcomp
mov
dec
cwde
jne
jae
aas
js
hlt
jne
jae
and
jg
enter
int
into
jb
js
fcomp
jnp
hlt
rcr
mov
jne
nop
fs
adc
xor
repnz
xchg
and
stc
imul
xor
sar
jne
jae
int
into
jb
inc
ss
mov
cmp
lea
and
enter
lea
jo
xor
data16
jne
jae
fdivr
ss
lea
(bad)
xor
icebp
mov
xchg
pop
jge
jnp
jne
xchg
pop
jge
jnp
dec
adc
(bad)
iret
inc
mov
xchg
and
lods
cli
or
dec
nop
ins
pop
enter
test
mov
test
mov
aaa
repnz
jg
mov
fdiv
mov
enter
jo
xor
inc
mov
or
xor
cwde
xchg
xchg
jl
jnp
hlt
(bad)
fidivr
jne
nop
fs
lahf
inc
xor
repnz
(bad)
clc
and
stc
imul
cmp
sar
jne
jae
int
into
jb
inc
les
cmp
lea
jo
cmp
data16
jne
jae
fdivr
ss
cmps
lea
(bad)
xor
icebp
add
test
cmc
mov
lds
stos
xchg
mov
mov
cmp
inc
ja
mov
jne
jae
jle
pushf
loope
lock
sub
xor
inc
jbe
lea
cli
mov
(bad)
jnp
mov
xchg
jb
int3
clc
push
fcom
je
jne
sub
ror
mov
mov
fsub
mov
dec
mov
jae
retf
pop
enter
enter
rcl
jne
cli
or
jae
enter
cwde
test
rcr
push
cmp
enter
and
xor
sub
jae
or
cwde
cmp
jnp
xor
mov
repz
and
cli
aad
xchg
imul
jnp
data16
lds
mov
repnz
xor
cli
jbe
jl
jae
enter
aad
lods
jb
repnz
repnz
jbe
jae
jb
ds
fsubr
cli
icebp
aas
xchg
mov
iret
mov
cli
loopne
repnz
(bad)
retf
mov
aaa
test
push
and
cmp
enter
aaa
shl
or
leave
xlat
push
mov
repnz
mov
mov
aaa
test
jne
jp
jne
inc
jnp
add
mov
and
cmp
enter
or
ds
(bad)
jbe
aaa
test
dec
jge
iret
aaa
dec
repnz
(bad)
and
inc
dec
pop
fidiv
xor
div
retf
xor
dec
cmp
enter
enter
enter
enter
inc
dec
fcomp
cmp
xor
xchg
aaa
test
mov
fmul
xor
mov
xchg
enter
jne
jae
jge
mov
aaa
xchg
inc
js
jnp
ror
cli
div
into
xchg
aaa
test
iret
int
(bad)
jb
sub
in
pop
cmp
dec
test
pop
or
pop
cmp
dec
test
xor
jnp
fcomp
cli
cmp
enter
dec
xchg
mov
aaa
repnz
int
(bad)
jb
adc
std
pop
cmp
dec
test
xor
jnp
fsubr
jnp
xor
jnp
dec
pop
cmp
retf
mov
jne
xor
clc
mov
dec
lea
enter
xchg
mov
gs
sahf
lock
sub
(bad)
clc
add
sbb
sbb
mov
xor
inc
add
clc
push
int3
enter
cwde
div
int3
cwde
adc
idiv
xor
jnp
inc
les
xor
repnz
jp
inc
xor
ss
data16
push
arpl
mov
jnp
mov
inc
dec
xor
test
int3
and
sub
mov
jecxz
and
enter
and
xor
adc
aaa
push
addr16
mov
test
cmp
dec
jae
enter
xchg
es
inc
sahf
and
pushf
dec
add
repnz
das
repnz
inc
mov
(bad)
jne
sub
aaa
push
jnp
into
jnp
xor
imul
es
ja
and
xor
add
repnz
lea
and
adc
retf
xor
push
jg
mov
jnp
cmp
emms
add
nop
inc
iret
mov
test
sub
jnp
inc
fadd
xor
jb
inc
les
xor
dec
mov
fptan
mov
xor
mov
mov
jnp
add
cmp
or
cli
aad
xchg
arpl
lock
and
imul
imul
mov
enter
enter
xor
mov
lea
jno
mov
test
cmp
mov
enter
int3
dec
mov
div
sub
jnp
inc
fadd
xor
jb
inc
les
xor
dec
mov
rol
xor
je
jne
nop
jg
and
jae
aas
pushf
cli
jne
repnz
xchg
mov
gs
sahf
and
sub
xchg
scas
push
imul
clc
dec
int3
sbb
pop
fwait
aaa
mov
pusha
and
xor
enter
enter
int3
sbb
add
stc
mov
jae
(bad)
jae
mov
jnp
push
pop
cmp
xchg
cmp
cmps
jb
cli
test
or
ja
or
cmps
jb
xchg
cmp
jnp
jne
nop
jne
aas
pushf
imul
or
and
imul
icebp
inc
aas
push
xor
outs
adc
mov
pusha
sar
data16
lock
cmp
jg
lea
clc
jne
repnz
or
es
inc
movs
cwde
add
mov
mov
stos
pusha
aaa
push
arpl
xchg
cmp
xor
jg
xor
mov
retf
enter
(bad)
ins
jae
(bad)
sti
dec
push
enter
adc
push
mov
inc
jae
shl
mov
inc
jne
mov
mov
(bad)
mov
jnp
mov
inc
mov
cwde
xchg
xlat
je
jnp
test
jae
aaa
movd
aaa
push
arpl
mov
jae
inc
ds
mov
popf
xchg
call
stc
mov
mov
inc
sahf
lock
sub
test
pop
inc
xor
sub
mov
sbb
jo
cli
xor
enter
stc
lea
add
add
or
jns
jle
inc
mov
or
xor
cmp
xchg
mov
mov
enter
lea
jl
mov
jl
hlt
inc
cli
enter
xor
loop
leave
inc
lods
lock
popa
jae
enter
or
test
or
cli
out
mov
xchg
and
mov
mov
outs
adc
xchg
or
mov
xchg
mov
gs
sahf
retf
js
jns
fdiv
sub
(bad)
ja
ins
(bad)
mov
aaa
jnp
xchg
and
mov
enter
aaa
test
push
mov
or
xor
repnz
adc
je
or
lock
test
arpl
shl
xor
dec
mov
fidiv
xor
push
fadd
xor
stos
iret
xor
jnp
(bad)
ins
or
xchg
aaa
adc
call
inc
out
cmps
iret
xor
jnp
xor
sub
jo
xor
enter
aaa
test
enter
mov
xchg
retf
jno
jnp
shl
cli
test
mov
aaa
repnz
add
inc
xor
mov
shl
loopne
xchg
add
jae
gs
cmp
mov
jnp
mov
jae
jle
cmp
jge
mov
aaa
xchg
sub
jnp
hlt
rcl
cmp
jnp
test
int
pusha
pop
cmp
(bad)
iret
test
mov
jae
sar
cli
mul
jbe
xor
ret
enter
xor
mov
mov
mov
mov
iret
test
mul
je
jnp
hlt
fcom
retf
jnp
test
int
pusha
pop
cmp
(bad)
iret
test
mov
jae
pop
pop
cmp
jge
mov
aaa
xchg
xchg
je
jnp
hlt
rcl
cmp
jnp
test
int
pusha
pop
cmp
(bad)
iret
test
mov
jae
dec
mov
mov
jnp
xor
mov
and
aaa
xor
ret
enter
xor
clc
lea
(bad)
iret
lahf
adc
mov
fsubr
mov
sbb
pop
cmp
dec
xchg
pop
cmp
and
aaa
xor
clc
mov
dec
xchg
mov
enter
mov
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
xor
aaa
into
(bad)
iret
test
mov
jae
fisttp
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
xor
aaa
into
(bad)
iret
test
mov
jae
or
jae
push
mov
adc
fidiv
xor
ret
enter
xor
clc
lea
(bad)
iret
lahf
adc
mov
fcom
jae
dec
mov
jae
aas
popf
cli
mov
test
pop
mov
mov
js
xor
mov
xchg
out
aaa
xchg
enter
aaa
xchg
dec
xchg
push
cmp
and
xor
enter
and
xor
ret
enter
xor
mov
mov
mov
mov
iret
test
mul
jae
jnp
hlt
fdiv
add
repnz
aaa
xchg
enter
enter
aas
xor
int
pusha
pop
cmp
(bad)
iret
test
mov
jae
sti
mov
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
mov
inc
mov
inc
mov
jae
mov
test
out
mov
fdiv
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
xor
enter
and
xor
ret
enter
xor
mov
sub
jae
jge
mov
aaa
xchg
sub
jnp
hlt
rcl
cmp
jnp
test
int
push
fmul
cmp
jno
jae
enter
call
addr16
jb
sub
iret
mov
mov
imul
call
jp
xor
mov
xor
jp
xor
(bad)
jae
aaa
test
es
xor
clc
(bad)
lock
xchg
or
mov
retf
(bad)
mov
xor
test
lea
mov
retf
(bad)
mov
xor
inc
cli
enter
xor
loop
leave
dec
mov
retf
jnp
mov
cdq
mov
retf
repnz
aaa
xchg
lahf
test
enter
mov
test
enter
and
xor
enter
jo
es
mov
int
repnz
dec
mov
into
lock
xchg
dec
or
aaa
test
enter
cwde
lock
test
enter
mov
mov
arpl
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
mov
inc
mov
inc
mov
jae
ret
xor
mov
mov
test
int3
aaa
test
dec
mov
mov
aaa
sti
jae
enter
aaa
test
aaa
inc
div
aaa
xchg
aaa
repnz
aaa
xchg
dec
mov
mov
mov
jae
inc
outs
mov
aaa
xchg
cmp
enter
enter
enter
leave
jnp
mov
push
lock
jnp
xor
inc
test
test
enter
aaa
test
aaa
test
and
and
les
xchg
enter
inc
test
aaa
cmp
or
jnp
leave
inc
mov
mov
aaa
repnz
repnz
dec
jnp
iret
aaa
sub
mov
div
cwde
xchg
push
or
jnp
mov
test
enter
hlt
int3
repnz
xchg
aaa
test
sub
into
or
test
mov
test
out
mov
fsubr
jae
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
dec
xor
clc
mov
inc
mov
inc
mov
jae
ret
xor
mov
mov
test
int3
aaa
test
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
dec
xor
clc
mov
aaa
into
or
test
mov
cmp
enter
aaa
test
aaa
sub
fwait
xchg
pop
(bad)
aaa
test
hlt
(bad)
repnz
test
test
aaa
into
(bad)
iret
test
mov
jae
repz
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
dec
xor
clc
mov
inc
mov
xor
push
dec
xor
ret
enter
xor
mov
sub
jae
jge
mov
aaa
xchg
dec
enter
rcl
out
mov
test
(bad)
iret
and
dec
xor
clc
mov
and
xor
ret
enter
xor
mov
idiv
mov
mov
iret
test
mul
push
enter
fcom
retf
jnp
test
int
pusha
pop
xchg
movs
xor
aaa
into
(bad)
iret
test
mov
jae
(bad)
rcl
xor
scas
dec
xor
ret
enter
xor
mov
push
cmp
jge
mov
aaa
xchg
xchg
rcl
cmp
jnp
test
int
pusha
pop
cmp
(bad)
iret
test
mov
jae
mov
ret
xor
mov
and
dec
xor
ret
enter
xor
clc
lea
(bad)
iret
lahf
adc
mov
fdivr
mov
xor
aaa
into
(bad)
iret
test
mov
jae
shl
cli
mul
inc
dec
xor
ret
enter
xor
mov
sub
jae
jge
mov
aaa
xchg
das
or
rcl
out
mov
test
(bad)
iret
and
dec
xor
clc
mov
and
xor
ret
enter
xor
mov
sub
jae
jge
mov
aaa
xchg
push
or
rcl
out
mov
test
(bad)
iret
and
xor
clc
mov
dec
lea
enter
hlt
jnp
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
mov
aaa
sub
mov
test
out
mov
fsubr
jae
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
dec
xor
clc
mov
mov
test
int3
aaa
test
dec
mov
jae
jno
jae
enter
dec
xor
mov
test
(bad)
iret
and
dec
xor
clc
mov
jo
or
enter
dec
mov
mov
rol
xor
jo
enter
inc
lods
repnz
pop
jae
lahf
lock
int3
aaa
test
enter
hlt
jnp
mov
imul
ret
xor
mov
mov
test
int3
aaa
test
dec
mov
xor
aaa
into
(bad)
iret
test
mov
jae
xchg
jnp
mov
jnp
xor
mov
mov
test
int3
aaa
test
dec
mov
ss
xchg
dec
enter
enter
aas
xor
int
push
fdiv
sbb
enter
call
addr16
jb
sub
inc
repz
mov
imul
adc
xchg
enter
rcl
pop
enter
enter
enter
aaa
push
jnp
retf
xor
fwait
iret
xor
push
jae
aaa
into
(bad)
iret
test
pop
enter
aaa
test
aaa
test
aaa
xchg
adc
enter
and
xor
test
int3
aaa
test
inc
mov
inc
mov
jae
inc
(bad)
lahf
iret
xor
mov
gs
sahf
repnz
jp
xor
jo
enter
mov
test
aaa
jnp
or
int
iret
cwde
adc
in
mov
mov
test
enter
stc
cmp
mov
cmp
dec
test
xor
jnp
fdivr
mov
lea
xor
mov
adc
in
mov
xor
jnp
fcomp
mov
enter
mov
fist
jae
retf
jnp
mov
repnz
clc
mov
dec
xchg
das
js
jnp
stc
or
cli
aad
xchg
out
enter
lahf
(bad)
fdivr
or
enter
test
jae
lea
or
je
lock
fwait
jb
dec
jmp
iret
aaa
lock
jbe
enter
dec
test
add
lock
lock
fwait
jnp
jnp
mov
retf
mov
aaa
sub
jae
dec
pop
mov
aaa
test
nop
xor
dec
jae
inc
cs
inc
pop
mov
aaa
mul
cmp
mul
xor
cmp
movs
push
xchg
inc
mov
jae
inc
dec
int
test
and
test
iret
jge
mov
aaa
xchg
xchg
push
enter
shl
dec
xor
jno
mov
aaa
mul
cmp
mul
xor
cmp
movs
inc
xchg
enter
push
cmp
jbe
jae
inc
(bad)
out
aaa
test
(bad)
and
jae
mov
(bad)
xlat
int
test
fmul
inc
jae
and
inc
xor
sub
pop
int3
jp
xor
(bad)
int
test
pop
cmps
xor
mov
adc
enter
cmp
lock
dec
jae
stc
mov
jae
mov
test
test
aaa
test
fsubr
into
out
aaa
test
aaa
into
dec
aaa
test
aaa
into
jmp
aaa
test
sahf
div
test
xor
mov
inc
(bad)
out
int
test
mov
dec
jae
stc
mov
jae
push
dec
fsub
jae
inc
sbb
mov
mov
cwde
div
int3
test
enter
aaa
test
mov
xchg
inc
dec
into
aaa
test
fcomp
inc
jae
dec
mov
mov
test
dec
lahf
(bad)
iret
aaa
jp
xor
sbb
mov
enter
dec
xchg
paddd
xor
ins
jno
jnp
mov
test
aaa
test
mov
aaa
sub
mov
test
enter
enter
enter
test
cld
jnp
cmp
je
jmp
jge
mov
aaa
xchg
retf
add
jnp
enter
div
into
out
aaa
test
and
cmp
mov
xor
inc
dec
fsub
jae
dec
mov
mov
aaa
jnp
push
dec
mov
enter
xor
mov
cwde
adc
in
mov
adc
jnp
mov
rcl
fwait
xor
jnp
pop
cld
jnp
mov
or
mov
xchg
shl
xor
xchg
aas
add
jnp
lea
mov
enter
enter
and
xor
adc
enter
xor
mov
cwde
sub
pop
leave
adc
in
mov
mov
test
aaa
test
hlt
les
iret
enter
dec
fsubrp
int
test
aam
(bad)
lods
xor
mov
cwde
cmp
aaa
test
pavgw
enter
xor
es
xor
ret
in
enter
inc
inc
int
test
neg
jnp
xor
into
xlat
int
test
iret
jge
mov
aaa
xchg
xlat
add
jnp
mov
xchg
ret
(bad)
das
repnz
mov
add
xchg
mov
imul
lahf
lock
std
jge
mov
mov
xor
mov
mov
jnp
mov
repnz
xor
mov
mov
jnp
mov
xor
push
and
(bad)
inc
xor
repnz
inc
test
fiadd
enter
inc
xchg
jg
lea
jg
(bad)
xor
je
gs
aas
jg
xchg
mov
jnp
mov
xchg
add
clc
push
sub
je
lock
cmp
arpl
mov
jb
jae
dec
mov
cli
ror
pusha
and
xor
test
cmp
int3
ss
inc
aas
jne
mov
fwait
pop
stc
jnp
mov
je
ss
inc
aas
jne
(bad)
int3
es
inc
aas
arpl
cwde
xchg
jnp
enter
jg
lea
jg
(bad)
xor
je
gs
and
sub
mov
enter
fwait
cmp
enter
xor
xor
repnz
pop
jae
mov
dec
jae
inc
mov
xchg
inc
add
jnp
fcom
mov
and
mov
inc
xor
sub
(bad)
sub
outs
push
inc
sbb
mov
jae
das
repnz
mov
mov
jnp
mov
aaa
sub
mov
fwait
mov
cwde
adc
repz
jae
push
jb
aas
dec
jmp
xor
cli
test
jnp
arpl
into
mov
aaa
test
mov
jae
lock
fwait
mov
aaa
push
jg
out
jae
inc
add
test
idiv
mov
test
jae
dec
(bad)
xchg
iret
aaa
sub
mov
fwait
mov
cwde
sub
jae
or
inc
mov
movaps
and
xor
clc
mov
sar
shl
test
enter
mov
cmp
enter
or
mov
enter
out
jae
sahf
sub
ins
rol
ins
cmp
dec
jae
inc
mov
inc
mov
jae
and
inc
xor
repnz
mov
test
mov
jp
inc
xor
mov
shl
xor
sub
mov
jae
gs
cmp
and
inc
xor
clc
mov
dec
(bad)
in
enter
loope
cli
mul
div
xor
test
enter
and
jns
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
mov
jnp
mov
jnp
xor
mov
and
inc
xor
ret
enter
xor
dec
lahf
adc
in
mov
(bad)
enter
lahf
xchg
rol
enter
fcom
retf
jnp
test
int
addr16
cmp
jae
aaa
test
fcom
jae
dec
mov
cmp
jnp
mov
fwait
mov
cwde
xchg
test
rcl
cmp
jnp
test
int
addr16
cmp
jae
aaa
test
fcom
mov
jae
jno
jae
enter
dec
xor
enter
enter
aas
and
jne
xchg
iret
aaa
sub
push
jne
xchg
iret
aaa
sub
iret
cli
jnp
mov
imul
jnp
mov
fwait
mov
cwde
adc
mov
mov
fwait
mov
cwde
xchg
scas
add
jnp
hlt
fdiv
add
repnz
test
enter
enter
aas
xor
int
addr16
cmp
jae
aaa
test
fadd
dec
jae
dec
mov
xor
inc
(bad)
jae
aaa
test
fdiv
jae
dec
mov
jae
jno
jae
enter
dec
xor
mov
mov
fwait
mov
cwde
xchg
out
enter
rcl
out
mov
mov
fwait
mov
cwde
xchg
repz
jnp
hlt
shl
(bad)
cs
test
enter
enter
aas
xor
int
pop
fcom
dec
jae
jno
jae
enter
call
addr16
jb
test
sub
xor
clc
mov
mov
div
xor
test
enter
and
jns
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
jnp
cmp
dec
jnp
iret
aaa
sub
mov
jae
sar
cli
mul
fiadd
enter
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
sub
cmp
dec
jnp
iret
aaa
sub
mov
jae
push
stc
jnp
mov
jnp
xor
mov
mov
div
xor
test
enter
dec
(bad)
loopne
enter
(bad)
div
xor
test
enter
sub
xor
clc
mov
and
xor
ret
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
xor
cmp
dec
jnp
iret
aaa
sub
mov
jae
sar
jnp
mov
jnp
xor
mov
mov
div
xor
test
enter
jo
sbb
enter
dec
xchg
lods
iret
aaa
repnz
dec
jae
jno
jo
enter
inc
lods
repnz
pop
jae
lahf
test
sub
jb
test
sub
xor
clc
mov
and
inc
xor
ret
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
out
adc
jnp
iret
aaa
sub
mov
jae
fidivr
jae
and
xor
ret
enter
xor
mov
sub
jae
dec
jnp
iret
aaa
sub
mov
jae
daa
clc
jnp
mov
jnp
xor
mov
and
xor
ret
enter
xor
dec
lahf
adc
in
mov
(bad)
enter
lahf
xchg
(bad)
pop
enter
fcom
mov
mov
fwait
mov
cwde
xchg
jg
enter
rcl
pop
enter
enter
enter
fwait
xchg
sti
sbb
jnp
mov
movs
mov
dec
mov
(bad)
mov
fwait
mov
cwde
xchg
jg
enter
inc
(bad)
mov
aaa
test
inc
(bad)
jae
aaa
test
jge
lods
iret
aaa
xchg
xchg
sbb
jnp
test
mov
and
pop
xor
dec
mov
and
shl
cli
not
cs
aad
xchg
div
jnp
data16
les
enter
mov
or
xchg
wbinvd
pop
xor
lock
jnp
gs
xor
repnz
xor
mov
aaa
repnz
adc
cwde
xchg
inc
pop
enter
cmp
mov
enter
mov
inc
jecxz
jae
dec
fisttp
pop
enter
xor
mov
ja
enter
jl
mov
cwde
adc
in
mov
test
jae
retf
mov
fwait
xchg
iret
aaa
clc
mov
sar
xor
div
int3
test
aaa
test
fdiv
push
jae
inc
xor
mov
mov
fwait
div
test
push
mov
aaa
clc
mov
sar
xor
div
int3
test
enter
xor
dec
fcomp
jae
and
imul
xor
mov
enter
test
enter
dec
mov
mov
jo
mov
mov
xor
(bad)
xchg
into
aaa
test
enter
push
xchg
paddd
xor
push
pop
enter
jo
mov
cwde
xchg
push
mov
aaa
sub
mov
test
enter
enter
enter
test
loop
jae
or
leave
jnp
iret
jge
mov
aaa
xchg
mov
enter
leave
cmp
aaa
into
ror
aaa
test
and
cmp
mov
xor
inc
dec
fdivr
jae
dec
mov
mov
aaa
jnp
push
dec
mov
(bad)
mov
test
mov
sbb
jnp
mov
rcl
fwait
xor
jnp
inc
loop
jae
dec
add
iret
aaa
jp
mov
or
lea
jp
xor
xchg
and
enter
loope
cli
mul
div
mov
sahf
xchg
mov
xor
div
mov
and
ror
clc
mov
cmc
test
enter
dec
test
iret
dec
mov
neg
enter
xor
test
mov
add
xor
div
lods
xor
into
out
aaa
test
mov
xor
push
jae
mov
xchg
outs
sbb
jnp
pop
ret
cmps
xor
sahf
xchg
mov
jnp
hlt
fdiv
inc
loope
js
mov
iret
loope
jae
push
out
iret
aaa
clc
cwde
or
sub
and
iret
aaa
clc
mov
and
push
xchg
sahf
test
movs
xor
mov
jg
daa
sahf
sbb
enter
loope
jae
dec
out
iret
aaa
jp
xor
div
test
mov
xor
repnz
xor
mov
enter
xor
push
jae
aaa
into
xlat
int
test
mov
aaa
nop
jne
aas
jne
xor
and
imul
ja
popf
repnz
mov
imul
lahf
lock
push
adc
jnp
arpl
cs
xor
repnz
fadd
mov
mov
jnp
mov
out
pop
jae
jo
cmp
mov
fwait
xchg
push
sbb
jnp
inc
(bad)
mul
ss
sub
arpl
and
enter
cwde
adc
mov
adc
enter
enter
mov
push
jae
inc
add
div
int3
cwde
sub
jae
and
push
xor
lock
xchg
and
cli
aad
jnp
xor
xchg
out
enter
ja
aaa
inc
out
cli
mov
(bad)
jnp
pop
int
push
cmp
xchg
enter
xor
mov
int3
dec
mov
mov
mov
enter
leave
mov
loopne
jae
leave
test
cmp
(bad)
jb
aaa
test
fmul
mov
jae
mov
imul
xor
push
jae
inc
mov
mov
mov
ja
(bad)
mov
cs
mov
dec
enter
lea
jl
lea
xor
inc
xchg
stos
pop
xor
cli
test
xchg
jnp
mov
enter
enter
dec
fidiv
xor
push
pop
xor
je
jne
clc
mov
cwde
adc
cmp
fwait
scas
loop
jae
or
(bad)
jne
sub
xor
test
push
cmp
xor
xor
int3
ss
dec
cmp
and
repz
repnz
mov
ja
addr16
dec
sub
jnp
(bad)
inc
ds
mov
retf
pop
enter
leave
adc
enter
pop
jp
xor
jge
and
inc
pop
xor
repnz
movs
jno
xor
popf
cli
jne
repnz
leave
sub
add
dec
not
loopne
jae
leave
sub
add
dec
fwait
lods
mov
dec
loopne
jae
leave
sub
add
dec
repz
mov
pop
loopne
jae
leave
sub
add
dec
pop
scas
mov
outs
loopne
jae
leave
sub
add
dec
outs
movs
mov
jg
jnp
mov
in
xor
adc
mov
in
xor
inc
pop
xor
adc
mov
in
xor
push
pop
xor
adc
mov
fdiv
xor
bound
enter
mov
fidiv
xor
jb
xor
repnz
repnz
leave
sub
add
dec
inc
test
out
jnp
pop
leave
sub
add
dec
sub
jnp
pop
leave
sub
add
dec
out
mov
jecxz
jnp
pop
leave
sub
add
dec
jmp
mov
repz
jnp
mov
xor
popf
cli
jne
repnz
xchg
mov
addr16
ins
lods
mov
test
jnp
pop
xor
inc
fcom
jae
mov
imul
enter
mov
int3
aaa
dec
fwait
lods
mov
or
jnp
pop
xor
inc
mov
cmp
jmp
jno
adc
mov
int3
aaa
dec
repz
mov
daa
out
jnp
mov
cmp
enter
std
push
in
jno
xchg
mov
enter
push
cmp
fdivr
xor
mov
in
xor
xchg
push
xor
adc
jo
xchg
cmps
push
enter
pop
cmp
fdivr
xor
mov
out
xor
and
(bad)
iret
std
push
in
jno
xchg
ret
push
enter
imul
xor
mov
in
xor
ficom
enter
std
pop
in
jno
xchg
call
enter
push
cmp
fdivr
xor
mov
in
xor
cli
push
xor
repnz
xor
mov
xor
inc
mov
cmp
stos
pop
jae
imul
enter
mov
int3
aaa
dec
not
out
jnp
outs
or
cli
aad
xchg
addr16
les
fist
mov
cmp
jmp
iret
aaa
repnz
and
xor
sahf
xchg
lock
aaa
test
hlt
fcomp
jnp
mov
xor
jnp
(bad)
mov
xor
and
pop
adc
aaa
dec
inc
scas
mov
xor
xchg
mov
lea
jae
enter
mov
adc
xor
jnp
fdiv
pop
jae
imul
jno
adc
std
dec
in
jno
adc
mov
push
ror
pusha
mov
jnp
mov
adc
jmp
jnp
enter
push
cmp
xor
mov
std
dec
in
jno
adc
std
aas
shl
adc
xor
jnp
jne
push
ror
pusha
mov
jb
mov
adc
jmp
mov
enter
push
adc
enter
int
jb
enter
enter
enter
mov
outs
fwait
aaa
out
jnp
mov
mov
in
xor
push
push
xor
adc
std
dec
in
jno
adc
std
aas
shl
adc
(bad)
jns
xor
jnp
xor
jnp
jmp
sub
imul
push
xor
adc
std
dec
in
jno
adc
std
aas
shl
adc
jmp
jae
mov
jnp
xor
jnp
jmp
outs
adc
imul
pop
enter
push
cmp
enter
push
adc
nop
enter
loopne
jae
enter
adc
jae
adc
fwait
shr
jnp
xchg
(bad)
in
xor
in
xor
(bad)
xor
jnp
pop
jbe
jae
mov
jnp
pop
inc
mov
test
enter
bound
xor
in
jno
adc
std
dec
in
jno
adc
std
sbb
jb
adc
pop
lods
adc
xor
jnp
and
js
mov
adc
mov
cmp
enter
enter
push
cmp
psllw
enter
mov
xor
sub
pop
mov
jnp
jae
jnp
iret
std
xchg
out
jno
xchg
outs
adc
jnp
xor
dec
inc
scas
mov
xor
dec
adc
leave
jnp
pop
cli
adc
xor
jnp
dec
mov
adc
mov
cmp
enter
enter
imul
xor
enter
std
dec
in
jno
adc
std
sbb
jb
adc
enter
mov
adc
xor
jnp
xor
sti
and
movs
xor
mov
adc
add
xor
in
jno
xchg
pop
retf
sbb
aaa
dec
inc
scas
mov
xor
dec
aaa
nop
mov
and
jnp
pop
mov
jnp
xor
jnp
jmp
call
enter
imul
mov
lea
mov
mov
(bad)
xor
jnp
pop
aaa
jnp
xor
adc
enter
adc
jae
adc
fwait
ja
jnp
xchg
mov
jnp
add
mov
(bad)
xor
arpl
enter
enter
enter
mov
test
enter
(bad)
pop
jae
imul
enter
std
dec
in
jno
adc
std
aas
shl
adc
xor
dec
jb
enter
enter
mov
adc
xor
scas
push
xor
fadd
xor
dec
inc
scas
mov
xor
dec
aaa
nop
mov
and
jnp
pop
push
jnp
xor
jnp
jmp
out
adc
jnp
movs
imul
pop
enter
push
cmp
enter
push
adc
enter
enter
fcom
jae
dec
sub
in
pop
cmp
leave
mov
jno
enter
enter
imul
inc
add
cmp
enter
push
adc
xor
jnp
repz
fcom
jae
dec
sub
mov
leave
mov
jno
enter
enter
pop
cmp
xor
mov
std
dec
in
jno
adc
std
sbb
jb
adc
loopne
scas
xor
jnp
and
jnp
mov
adc
xor
cmp
enter
and
pop
scas
mov
xor
dec
inc
scas
mov
xor
dec
adc
mov
jnp
pop
fcom
jae
dec
sub
in
pop
cmp
leave
mov
jno
enter
enter
push
cmp
enter
push
cmp
enter
push
adc
xor
jnp
cdq
leave
jnp
pop
(bad)
adc
dec
sub
rcl
cmp
xor
fwait
inc
jmp
fdiv
xor
and
sbb
repnz
dec
or
repnz
mov
arpl
xlat
aam
mov
xor
mov
cmp
push
jnp
loope
mov
inc
mov
jae
and
iret
aaa
clc
mov
imul
enter
xor
mov
enter
push
cmp
into
pop
jae
inc
and
jae
enter
aaa
dec
inc
scas
mov
xor
xchg
mov
lea
jae
enter
mov
adc
xor
jnp
fcomp
pop
jae
imul
jno
adc
std
dec
in
jno
adc
mov
push
ror
pusha
mov
jnp
mov
adc
jmp
out
adc
jnp
xor
cmp
daa
push
aaa
xor
adc
std
dec
in
jno
adc
std
aas
shl
adc
enter
xor
ror
pusha
mov
jb
mov
adc
jmp
sub
enter
push
adc
enter
int
jb
enter
enter
enter
mov
outs
fwait
stos
call
adc
mov
in
xor
sub
jae
std
dec
in
jno
adc
std
sbb
jb
adc
pop
lods
adc
fcom
jo
dec
sub
in
pop
cmp
dec
mov
(bad)
jnp
xchg
and
xor
dec
xchg
push
enter
adc
jae
enter
enter
data16
mov
adc
mov
xor
dec
fwait
lods
mov
cmps
xlat
jnp
mov
jmp
jb
dec
push
mov
xor
inc
fcom
jae
mov
jae
and
xor
jnp
iret
std
xchg
out
jno
xchg
pop
das
enter
aaa
dec
inc
scas
mov
xor
dec
adc
leave
jnp
pop
cli
adc
mov
jo
dec
sub
in
pop
cmp
dec
mov
fwait
xlat
jnp
xchg
dec
fidiv
xor
jb
inc
mov
inc
scas
mov
xor
dec
adc
leave
jnp
pop
hlt
adc
data16
xor
adc
mov
cmp
enter
enter
push
cmp
mov
mov
mov
in
xor
(bad)
xor
jnp
pop
cmps
adc
enter
enter
fwait
mov
test
enter
adc
xor
shl
adc
std
dec
in
jno
adc
std
aas
shl
adc
scas
adc
xor
jnp
repz
enter
mov
adc
xor
fisubr
enter
mov
fsqrt
jnp
(bad)
das
repnz
sbb
aaa
dec
inc
scas
mov
xor
dec
aaa
nop
mov
and
adc
xor
jnp
push
mov
adc
mov
jmp
das
cs
push
cmp
enter
push
cmp
enter
push
adc
xor
adc
enter
adc
jae
adc
fwait
adc
jnp
xchg
pop
fdiv
xor
in
xor
(bad)
xor
jnp
pop
cs
xor
jnp
pop
mov
xor
mov
adc
and
xor
shl
adc
std
dec
in
jno
adc
std
aas
shl
adc
xor
test
enter
enter
mov
adc
xor
retf
enter
mov
xor
dec
inc
scas
mov
xor
dec
adc
mov
adc
fcom
jae
dec
sub
mov
leave
mov
jno
enter
enter
pop
cmp
aas
clc
or
enter
std
dec
in
jno
adc
std
sbb
jb
adc
loopne
xor
xor
sbb
pop
cmp
leave
mov
jno
enter
enter
push
cmp
enter
push
cmp
enter
push
adc
pop
xchg
adc
enter
mov
adc
mov
xor
jnp
fmul
data16
imul
enter
std
dec
in
jno
adc
std
aas
shl
adc
jnp
xor
adc
enter
mov
adc
xor
mov
xor
fsubr
xchg
mov
test
test
aas
pushf
cli
jne
repnz
adc
mov
mov
arpl
data16
les
jno
cli
enter
jne
repnz
enter
enter
mov
jnp
xor
push
cmp
out
xor
repnz
test
jnp
xor
bound
inc
mov
jae
dec
push
(bad)
xor
xchg
jnp
mov
lea
and
xchg
ds
pusha
aaa
push
arpl
iret
xor
mov
xchg
cmp
rol
int3
mov
push
(bad)
pop
call
jb
test
cmp
push
jnp
adc
mov
dec
mov
jp
mov
jg
jne
sub
mov
xor
jnp
fdiv
mov
mov
add
lahf
cmp
jnp
arpl
pop
cli
ror
cli
test
jbe
jnp
xchg
js
jae
dec
jnp
iret
aaa
sub
fdiv
addr16
jno
jae
enter
inc
test
ins
aaa
sti
push
iret
leave
push
bound
retf
xor
inc
(bad)
jae
aaa
test
fdivr
arpl
inc
mov
inc
mov
push
and
div
xor
test
enter
retf
push
bound
retf
xor
inc
(bad)
jae
aaa
test
fmul
arpl
dec
push
mov
cmp
dec
jnp
iret
aaa
sub
mov
push
sti
push
iret
int
bound
retf
inc
(bad)
jae
aaa
test
fadd
ins
jae
dec
push
mov
mov
cmp
dec
jnp
iret
aaa
sub
mov
test
adc
or
xchg
shl
enter
aaa
jae
and
div
xor
test
enter
cmp
mov
mov
jp
fst
rol
enter
cwde
xchg
pop
daa
enter
aaa
jno
and
div
xor
test
enter
ret
push
bound
leave
xor
inc
(bad)
jae
aaa
test
fdiv
ins
jae
dec
push
mov
cmp
dec
jnp
iret
aaa
sub
mov
test
fst
dec
or
mov
cwde
xchg
arpl
enter
aas
popf
cli
mov
test
aaa
jne
and
div
xor
test
enter
enter
mov
jnp
cmp
dec
jnp
iret
aaa
sub
xor
jae
and
mov
mov
adc
or
xchg
enter
enter
loopne
add
repnz
test
aaa
test
xor
sub
inc
rol
xor
sub
enter
test
jae
inc
daa
jne
lahf
sub
mov
jae
lock
xchg
daa
sub
jnp
outs
xchg
es
enter
dec
xchg
dec
cmp
jnp
data16
lds
mov
(bad)
mov
xchg
push
or
jnp
inc
jp
jae
dec
xchg
test
aaa
sub
fmul
popa
jae
jno
jae
enter
inc
out
or
test
lea
or
leave
xor
inc
(bad)
sahf
(bad)
aaa
test
fdiv
outs
jae
dec
mov
fst
mov
mov
mov
mov
enter
cmp
bound
leave
xor
inc
(bad)
sahf
(bad)
aaa
test
fadd
outs
jae
jo
bound
enter
dec
lahf
test
aaa
repnz
jne
mov
aaa
jg
and
div
fnstsw
test
enter
xor
sub
jae
dec
xchg
test
aaa
sub
mov
mov
and
div
fnstsw
test
enter
xor
jg
cmp
dec
xchg
test
aaa
sub
mov
push
sti
into
ret
xor
pop
jnp
jae
dec
xchg
test
aaa
sub
mov
mov
and
div
fnstsw
test
enter
xor
call
test
aaa
sub
mov
mov
and
div
fnstsw
test
enter
cs
aas
test
xor
fdivr
jae
dec
xchg
test
aaa
sub
mov
mov
and
div
fnstsw
test
enter
xor
adc
mov
aaa
sub
pop
mov
(bad)
sahf
(bad)
aaa
test
fcomp
xchg
mov
inc
mov
aaa
test
mul
adc
or
mov
and
enter
inc
(bad)
fdivr
test
enter
dec
jo
xor
test
inc
(bad)
stos
(bad)
aaa
test
mul
mov
idiv
mov
shl
xchg
xor
aaa
test
hlt
shl
fdiv
test
retf
fxch
js
xor
(bad)
int3
aaa
test
dec
mov
xor
sti
into
int3
xor
mov
(bad)
dec
enter
aaa
xchg
leave
jnp
test
iret
aaa
jnp
jp
jnp
(bad)
cs
aas
test
xor
jb
div
int3
xor
mov
cli
imul
clc
mov
dec
(bad)
mov
aaa
test
loope
xor
enter
pop
pusha
adc
mov
je
xor
inc
stos
sub
xor
aas
xor
jnp
or
retf
pop
pop
fidiv
xor
div
int3
test
enter
cmp
mov
pop
fidiv
xor
div
int3
xor
xor
clc
mov
and
sbb
int3
jnp
mov
aaa
sub
mov
jae
aas
popf
cli
mov
mov
xor
mov
cwde
adc
mov
mov
test
enter
adc
jae
dec
xchg
(bad)
fistp
mov
outs
(bad)
mov
test
enter
xor
mov
dec
mov
(bad)
and
mov
(bad)
and
mov
jae
dec
mov
test
test
enter
cmp
xor
inc
dec
fdiv
mov
not
jnp
mov
aaa
clc
mov
cwde
xchg
scas
es
dec
or
cs
aas
test
xor
xor
jnp
test
or
adc
mov
or
jnp
hlt
fcom
cld
or
mov
cwde
xchg
inc
and
jnp
mov
test
enter
sbb
mov
and
mov
mov
test
sbb
mov
push
push
test
sbb
mov
dec
(bad)
cmps
(bad)
aaa
test
sbb
add
repnz
aas
test
xor
iret
aaa
sub
out
cmp
dec
xchg
dec
fidivr
mov
imul
xor
mov
cwde
xchg
mov
enter
add
into
aaa
test
jp
jae
inc
(bad)
mov
dec
iret
imul
xchg
xchg
and
jnp
mov
or
jnp
mov
or
test
inc
dec
fdivr
(bad)
(bad)
into
aaa
test
jne
mov
aaa
test
leave
sub
arpl
jnp
mov
aaa
sub
xor
into
xchg
aaa
test
sar
adc
xchg
push
cmps
and
jnp
mov
xchg
and
mov
and
mov
inc
mov
jns
aaa
test
and
popa
xor
cli
popf
pop
xchg
pop
mov
xor
dec
data16
and
outs
xchg
and
mov
enter
fdivr
arpl
xchg
adc
mov
mov
xor
xchg
push
and
jnp
mov
xchg
mov
sar
and
jnp
xor
jb
xor
and
fist
jae
inc
ds
cld
in
xor
jle
lods
mov
xor
jnp
call
jl
mov
inc
mov
jae
stos
push
xor
adc
xchg
mov
adc
jnp
fdivr
push
xor
jnp
fisttp
pop
jae
mov
div
and
push
jnp
push
imul
jp
mov
dec
retf
aaa
sub
mov
imul
jnp
aas
dec
gs
enter
jl
jae
sbb
test
iret
xor
dec
mov
fwait
xchg
fdivr
mov
adc
cdq
repnz
and
ins
sbb
repnz
test
mov
mov
and
inc
fdivr
aas
jle
rcr
test
jecxz
sbb
inc
mov
je
xor
inc
stos
sub
inc
mov
movs
cmc
fcomp
and
rcr
test
mov
(bad)
xor
(bad)
fcomp
aaa
test
out
outs
jae
inc
mov
jge
dec
rcr
mov
xchg
mov
cli
div
xchg
and
jmp
jb
adc
mov
xchg
mov
cwde
xchg
jg
enter
mov
xor
xchg
mov
cwde
div
and
xor
enter
and
mov
cmp
not
and
mov
mov
xchg
mov
cwde
xchg
ja
enter
and
xor
cli
add
jnp
pop
jne
xor
mov
adc
jo
cmp
push
jae
inc
(bad)
adc
aaa
test
add
jno
jae
enter
mov
adc
xchg
mov
not
cmp
mov
push
pusha
xor
repnz
sbb
repnz
jne
popf
iret
aaa
test
cmp
aad
jae
cmp
xor
mov
adc
adc
jae
mov
xor
xchg
fnsave
test
add
jno
jae
enter
mov
adc
xchg
mov
not
cmp
enter
and
xor
clc
mov
inc
(bad)
int
aaa
test
add
jno
jae
enter
adc
mov
enter
enter
enter
mov
xchg
jmp
enter
jl
jno
enter
and
jl
enter
aaa
je
xor
retf
pusha
inc
inc
fbstp
test
fcomp
test
aaa
test
clc
aaa
cmp
or
jnp
leave
mov
sub
pushf
iret
aaa
sub
inc
jl
scas
aas
enter
inc
ds
pusha
mov
cmp
mov
jnp
mov
gs
mov
je
xor
retf
pusha
inc
inc
fbstp
test
fdivr
test
aaa
test
clc
aaa
cmp
or
jnp
leave
mov
sub
pushf
iret
aaa
sub
inc
jl
idiv
enter
inc
ds
pusha
mov
cmp
mov
jnp
iret
mov
jnp
mov
jae
aas
cwde
cli
mov
xchg
mov
inc
inc
fnsave
test
repz
jle
jmp
jnp
jne
fiadd
mov
jne
div
mov
jae
lea
jae
enter
enter
sbb
jo
enter
and
jl
enter
dec
nop
cmps
xor
jnp
jne
jnp
xor
adc
pop
imul
ds
test
mov
mov
enter
lea
(bad)
jne
sub
pop
enter
push
cmp
enter
enter
enter
enter
mov
adc
xor
jle
xor
fdiv
mov
movs
js
jae
enter
mov
xor
test
lds
or
mov
cmp
shl
xor
sub
mov
aaa
cli
cwde
xchg
fistp
fmul
ja
xor
xlat
sahf
iret
aaa
mov
mov
jnp
mov
or
test
(bad)
(bad)
aaa
test
pop
movs
iret
xor
mov
adc
test
jnp
fadd
mov
dec
mov
je
in
pop
(bad)
jb
jnp
xor
leave
jnp
xor
out
fcmovne
aaa
repnz
sbb
repnz
dec
rcr
xor
cmp
enter
(bad)
jne
xor
jnp
mov
xchg
mov
cwde
adc
enter
mov
xor
jnp
pusha
and
jg
enter
cmp
jae
mov
in
xor
and
enter
lea
jae
dec
mov
(bad)
jne
sub
pop
enter
enter
cwde
xchg
daa
ds
mov
mov
and
cs
aad
xchg
dec
xor
jnp
data16
les
call
xor
jg
xor
mov
jp
xor
je
push
leave
jnp
fld
jae
xor
push
xor
je
inc
retf
or
mov
jnp
aas
inc
(bad)
jnp
enter
enter
mov
jae
and
jnp
enter
jl
jae
(bad)
jmp
lds
cmp
std
adc
jb
xchg
dec
aam
test
mov
xchg
inc
mov
jae
jge
mov
aaa
xchg
push
aam
test
hlt
fdiv
neg
xor
mov
mov
and
xor
jb
aas
dec
(bad)
jae
enter
xor
dec
aaa
nop
mov
mov
nop
aaa
push
imul
xor
jg
movs
sbb
mov
loopne
fs
mov
xchg
aaa
test
fmul
lock
xor
mov
iret
aaa
inc
mov
mov
aaa
push
imul
xor
(bad)
xchg
int
test
adc
jae
enter
push
jbe
xor
pop
aas
enter
lods
iret
xor
enter
iret
jnp
xchg
lods
iret
xor
imul
jb
cli
test
repz
mov
pop
(bad)
jb
jnp
or
enter
and
or
leave
je
mov
std
adc
jb
xchg
or
aaa
test
fnstenv
xor
mov
jae
lea
mov
jl
xor
jnp
fst
jnp
jno
inc
cmp
xchg
addr16
in
jae
das
repnz
xor
xchg
inc
aaa
enter
fdiv
test
test
enter
imul
inc
mov
inc
imul
jbe
push
cmp
cld
inc
jbe
push
cmp
in
jbe
imul
inc
in
inc
jbe
imul
jbe
imul
inc
fadd
cmp
cmp
les
and
cmp
dec
mov
jae
mov
jnp
mov
aaa
inc
jbe
imul
jbe
imul
inc
rol
push
cmp
lds
ret
and
jnp
inc
fcom
sbb
aaa
test
mov
jnp
mov
push
jae
aas
pushf
cli
mov
xchg
adc
mov
enter
xor
(bad)
scas
int
test
fadd
jae
inc
(bad)
fwait
int
test
test
xor
repnz
xor
mov
aaa
jnp
xor
jb
aaa
test
iret
std
xchg
out
jno
xchg
lahf
cmp
jnp
(bad)
leave
test
enter
fwait
mov
fwait
addr16
jnp
iret
std
xchg
out
jno
xchg
ja
enter
int
jae
xor
mov
aaa
test
aaa
mov
mov
dec
inc
add
loope
xor
adc
leave
test
imul
jae
inc
div
aaa
test
clc
aaa
cmp
or
jnp
leave
dec
xor
adc
xchg
call
aaa
test
fdiv
jmp
jg
aaa
test
mov
jnp
add
cmp
enter
enter
dec
fidiv
xor
push
jns
enter
enter
cmc
jnp
(bad)
das
repnz
xor
div
xor
test
aaa
test
pop
in
xor
inc
inc
fmul
jae
dec
mov
jae
inc
(bad)
jb
aaa
test
iret
std
addr16
enter
enter
leave
test
enter
(bad)
mov
fwait
addr16
iret
std
addr16
enter
enter
int3
jnp
mov
aaa
clc
mov
xor
push
mov
mov
pushf
movs
jb
adc
jmp
movs
mov
inc
jnp
(bad)
jg
xor
(bad)
jae
aaa
test
cmc
je
mov
test
aaa
test
icebp
add
jae
das
lods
xor
mov
jnp
iret
std
addr16
enter
enter
int3
jnp
mov
jnp
iret
aaa
jp
mov
test
inc
sbb
mov
mov
cwde
div
lds
push
stos
jb
div
lds
out
js
enter
mov
div
xor
test
mov
iret
sar
jne
mov
aaa
jnp
adc
mov
jae
mov
dec
repz
mov
daa
sar
sar
dec
xchg
jnp
enter
leave
test
xor
push
stos
jb
div
lds
push
js
enter
mov
div
xor
test
mov
cmps
sar
jne
mov
aaa
jnp
adc
shl
retf
xor
dec
pop
scas
mov
lahf
sar
imul
enter
mov
test
xor
fldenv
xor
mov
mov
mov
div
xor
test
mov
pop
sar
jne
mov
aaa
jnp
adc
adc
push
jae
xor
dec
pop
scas
mov
ja
jnp
fyl2x
js
xor
jb
aaa
test
clc
aaa
cmp
or
jnp
leave
dec
xor
adc
enter
mov
xor
push
jnp
enter
push
cmp
fidiv
xor
jg
xor
mov
mov
and
xchg
(bad)
iret
aaa
icebp
div
hlt
dec
sysenter
hlt
inc
or
xor
adc
out
jae
xor
dec
pop
scas
mov
jecxz
jnp
(bad)
dec
dec
test
inc
jno
mov
xor
mov
dec
jp
iret
aaa
sub
mov
xchg
mov
mov
xchg
enter
fcom
mov
enter
leave
test
push
cmp
mov
dec
(bad)
jb
aaa
test
call
adc
mov
xor
(bad)
je
enter
push
cmp
xchg
jl
xor
aaa
jno
enter
test
dec
test
xor
hlt
dec
sysenter
hlt
inc
or
xor
adc
cmps
jl
xor
dec
push
scas
mov
sub
jnp
fld
jns
xor
(bad)
into
aaa
test
inc
jp
iret
aaa
clc
mov
xor
push
mov
jle
(bad)
into
aaa
test
mov
cmp
inc
(bad)
jb
aaa
test
mov
aaa
sub
sbb
dec
mov
aas
sar
or
retf
mov
neg
xor
xchg
mov
aaa
repnz
enter
int3
adc
enter
enter
push
cmp
pop
jle
xor
xchg
aaa
test
xor
into
xchg
aaa
test
mov
or
jb
jnp
ja
jbe
test
aaa
cmp
or
jnp
leave
inc
mov
or
test
arpl
test
les
test
mov
xchg
cmp
xchg
aaa
test
mov
aaa
clc
mov
xor
push
mov
mul
shl
out
lds
into
xchg
aaa
test
pop
enter
xor
jns
shr
jae
jge
(bad)
iret
aaa
xchg
or
cmp
mov
and
xor
test
push
jge
xor
jg
xor
jnp
pop
call
ret
enter
test
dec
lahf
mov
aaa
lock
xor
adc
enter
jge
(bad)
iret
aaa
xchg
(bad)
xor
jnp
cmp
dec
mov
jo
inc
jb
mov
jnp
movs
cmp
sbb
jge
(bad)
iret
aaa
xchg
xchg
jnp
xor
or
test
pop
leave
adc
test
ja
enter
test
movd
test
jnp
enter
mul
pop
(bad)
jb
adc
call
jl
jae
leave
jnp
mov
std
dec
aaa
clc
mov
mov
in
xor
scas
jbe
enter
enter
inc
(bad)
xchg
int
test
mul
push
inc
fadd
iret
mov
jnp
outs
xchg
and
mov
fwait
sub
int3
push
ret
xlat
adc
(bad)
ss
jnp
xor
je
loope
jnp
mov
imul
mov
inc
mov
cmp
ret
test
push
cmp
push
jg
xor
test
inc
mov
push
cmp
ret
test
imul
jae
repz
repz
mov
cmp
dec
pop
scas
mov
pop
int3
jnp
or
push
in
jno
push
js
std
addr16
enter
enter
aas
pushf
cli
jne
repnz
std
addr16
enter
std
push
in
jno
xchg
xor
jnp
add
mov
in
xor
push
ja
enter
push
cmp
fdivr
dec
inc
jl
jae
mov
out
xor
push
xor
inc
inc
adc
jae
xlat
sti
dec
inc
jl
jae
mov
fidiv
xor
mov
enter
xor
idiv
mov
xor
mov
out
xor
repz
repz
mov
ss
dec
scas
mov
add
mov
in
xor
mov
add
mov
jmp
xor
dec
pop
scas
mov
ss
or
call
jge
sub
repz
not
inc
outs
scas
mov
jmp
imul
fwait
xchg
pop
xor
jnp
ss
mov
sub
xchg
mov
and
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
mov
jbe
jae
inc
mov
push
pop
jmp
xor
shl
int3
sar
fcmovne
cmp
psubsb
mov
aam
jl
iret
jb
inc
int
mov
mov
je
aaa
sar
inc
cmp
jae
push
jnp
xor
sub
outs
add
arpl
enter
enter
in
inc
jae
enter
loope
div
test
fs
jae
lock
mov
aaa
cld
mov
data16
je
jae
mov
ins
in
hlt
out
aas
push
xor
jae
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
jnp
adc
pop
jmp
xor
.byte
