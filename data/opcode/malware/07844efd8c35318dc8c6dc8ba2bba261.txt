sti
(bad)
gs
xchg
and
mov
and
inc
push
add
inc
adc
es
out
inc
jb
mov
xor
and
xor
push
inc
lods
out
push
and
add
popf
jge
inc
sub
icebp
bound
add
popf
sub
inc
pop
sub
mov
push
into
hlt
scas
cdq
and
push
sbb
xchg
aad
lods
das
inc
jae
lahf
jl
dec
retf
xor
ret
xchg
retf
jp
dec
lods
leave
xchg
aad
jo
repz
leave
ret
jb
popf
js
inc
push
sub
and
mov
shl
adc
cdq
retf
lods
(bad)
out
scas
pusha
ficomp
in
retf
fld
fldcw
ret
fcmovb
xchg
lea
mov
push
push
pop
pushf
inc
test
ficomp
scas
and
retf
leave
inc
adc
adc
push
and
sbb
popf
inc
pushf
xor
push
and
addr16
adc
push
and
sbb
push
and
addr16
jnp
inc
stos
and
pop
in
loop
adc
loopne
fcmovu
dec
shl
test
push
jae
and
fcmovnu
xor
sbb
into
cdq
scas
data16
jmp
pop
sub
(bad)
cdq
int3
inc
xor
std
push
jo
jge
dec
xor
jmp
dec
and
mov
cs
and
nop
and
ret
(bad)
push
add
push
loop
fcmovbe
addr16
mov
push
and
in
adc
into
in
xchg
fstp
mov
push
in
retf
nop
retf
loope
jmp
and
and
retf
push
and
jle
cli
js
dec
sub
in
push
and
and
imul
addr16
fisubr
dec
popf
and
push
and
and
inc
repz
fisub
jle
xor
inc
xor
leave
fiadd
jb
jae
jne
sub
inc
dec
sbb
and
dec
shl
dec
retf
dec
loop
addr16
retf
in
push
int
jle
and
addr16
add
push
and
addr16
xor
push
and
and
add
mov
scas
mov
and
lahf
lahf
shl
popf
push
sub
ja
lods
lahf
std
adc
lahf
out
iret
and
retf
ror
xchg
inc
(bad)
std
inc
cmps
scas
jmp
retf
mov
push
and
scas
(bad)
out
and
inc
inc
sub
sub
sbb
arpl
fimul
(bad)
gs
sub
arpl
pusha
fisubr
pusha
sar
std
push
lods
adc
std
lods
or
aam
(bad)
gs
sub
mov
popf
pusha
sub
xor
push
push
fdiv
push
fst
scas
fcmovu
retf
and
stc
xor
push
jp
xchg
(bad)
jo
repz
xor
jb
and
scas
mov
shl
xchg
xor
xor
lahf
mov
xor
and
retf
sub
xor
push
push
fdiv
rcl
or
and
xor
lahf
ror
fcomp
jo
inc
add
lods
pop
adc
adc
jmp
xor
loop
(bad)
call
fcmovu
xor
call
aad
dec
adc
dec
pop
and
movs
addr16
retf
jle
aad
lods
das
inc
jne
pushf
inc
scas
js
shl
in
jbe
sbb
fist
and
int
movs
and
lahf
sbb
xor
and
fbld
or
cmp
lahf
cmc
jl
aam
out
sahf
xor
mov
sti
pop
sbb
pop
push
ss
pusha
fld
fldcw
rcl
jp
xchg
(bad)
jo
repz
leave
mov
inc
dec
sub
(bad)
xchg
popf
mov
scas
jmp
sti
loopne
add
cmc
xchg
and
jo
push
in
cld
in
int
fdivr
jecxz
lods
cmc
xchg
lahf
out
or
xor
push
sbb
mov
scas
pusha
ss
out
or
mov
mov
scas
pusha
ret
cmp
retf
inc
ss
pusha
rol
fnstcw
dec
in
out
lahf
shl
jb
arpl
pusha
mov
dec
(bad)
adc
shl
or
and
lahf
fisttp
popf
push
xor
(bad)
push
and
(bad)
gs
fist
cli
mov
popf
loop
push
and
pusha
xor
jp
xchg
(bad)
jo
repz
cdq
inc
jb
mov
xor
movs
cmp
jmp
and
xchg
push
and
fidiv
dec
sub
jle
xlat
mov
jae
loop
fcmovu
call
int
jmp
fimul
add
ret
lahf
fst
sub
sar
xchg
(bad)
jo
repz
popf
popf
js
jne
and
lock
and
movs
gs
and
dec
retf
cmp
push
jbe
xor
jl
int
mov
and
inc
shl
and
push
lods
aad
dec
jle
or
rcr
call
add
and
or
mov
push
and
jbe
popf
arpl
xor
jmp
or
inc
shr
cmp
sahf
mov
jle
or
ror
jbe
inc
scas
push
ret
gs
jns
(bad)
out
lods
loop
xor
lods
or
jl
int
mov
aad
mov
(bad)
xlat
(bad)
out
out
adc
inc
rcl
or
push
jns
jle
xlat
mov
dec
and
inc
int
pusha
push
and
sub
sbb
sub
arpl
cmp
rcl
push
scas
and
add
and
or
rol
inc
push
shr
mov
sub
arpl
adc
push
into
xor
inc
and
(bad)
pushf
(bad)
rcr
xor
dec
jnp
add
jo
das
scas
adc
cmp
and
out
fdivr
movs
cmp
bound
mov
sbb
(bad)
sbb
scas
(bad)
sbb
lods
adc
std
lods
or
and
in
push
and
jae
xchg
add
or
inc
into
or
inc
aad
fidiv
neg
(bad)
(bad)
fisttp
mov
fwait
mov
jne
and
loope
imul
fisub
out
(bad)
in
retf
aaa
retf
push
and
lods
or
pusha
sub
inc
fidiv
lahf
pusha
(bad)
shl
retf
pop
ss
sub
dec
jae
and
retf
and
retf
std
jecxz
lods
out
shl
enter
xor
aad
inc
arpl
cmps
es
lods
ret
and
scas
mov
scas
pop
into
inc
scas
sbb
jmp
adc
fcmovnu
inc
aad
pop
ss
push
je
(bad)
in
retf
(bad)
mov
scas
pusha
cmp
sbb
retf
lods
(bad)
mov
cmc
lods
mov
inc
aad
mov
call
scas
bnd
and
in
sbb
mov
push
neg
out
not
in
retf
cs
addr16
adc
(bad)
out
scas
pusha
ds
pusha
ffree
xchg
sbb
add
(bad)
addr16
sub
fisubr
aad
lods
das
inc
jne
pushf
inc
call
inc
jg
retf
shr
ror
mov
push
dec
and
mov
push
sub
retf
dec
enter
retf
cwde
popa
push
and
in
(bad)
gs
sub
mov
inc
jbe
mov
mov
dec
sub
push
dec
and
mov
push
and
and
pusha
push
and
out
lahf
rcr
std
lea
jno
dec
mov
xchg
into
push
or
fcomp
xor
and
and
retf
shl
rcr
(bad)
jmp
sub
inc
into
or
inc
aad
and
retf
mov
push
lods
mov
call
jne
jae
fidiv
std
dec
cs
sbb
(bad)
addr16
cmp
and
mov
inc
aad
mov
call
scas
bnd
fldcw
arpl
dec
cmps
fcmovu
xor
retf
xor
push
and
(bad)
add
and
(bad)
lds
lods
std
cmp
jmp
adc
inc
aad
mov
call
scas
bnd
fldcw
sbb
dec
jp
fs
xor
int
xor
fisub
lea
fisubr
xor
push
movs
into
cmc
imul
test
(bad)
addr16
popf
push
pusha
ss
in
dec
dec
and
je
fcmovnu
retf
adc
push
and
(bad)
adc
xchg
push
and
(bad)
jmp
lods
loop
lahf
cwde
(bad)
xor
pop
std
lods
or
xchg
mov
imul
fisub
retf
sub
(bad)
fidiv
gs
xchg
fcomp
xor
jne
jp
fs
retf
sub
mov
(bad)
into
adc
inc
or
jmp
sub
push
dec
and
mov
fisubr
mov
jne
jp
fs
xor
jmp
cmp
xor
push
and
fimul
sub
adc
lahf
out
jge
(bad)
fidiv
lods
mov
inc
sbb
in
or
add
movs
not
and
xor
stos
(bad)
fidiv
inc
fimul
fcmovu
xor
jmp
and
or
lds
test
aaa
jmp
cmc
xchg
jmp
movs
out
arpl
fidiv
and
and
retf
std
sti
into
lods
out
xchg
std
fidiv
jne
dec
retf
xor
inc
jns
(bad)
lds
movs
(bad)
scas
outs
and
fidiv
jne
dec
into
fcmovu
xor
inc
add
in
xchg
loope
retf
sbb
fcmovnu
retf
add
push
rol
inc
xchg
(bad)
fidiv
lods
out
mov
fidiv
and
(bad)
push
and
aaa
retf
loop
mov
(bad)
mov
(bad)
fwait
mov
jne
xchg
mov
scas
dec
into
fcmovu
xor
inc
cmp
fwait
mov
jne
ret
retf
mov
call
fidiv
not
and
fld
(bad)
sub
inc
xchg
cmc
fidiv
jne
dec
ret
xor
xor
pusha
ss
pop
and
push
rol
inc
xchg
mov
out
imul
lds
test
and
fcmovnu
call
jne
fidiv
lahf
pusha
fld
(bad)
sub
jb
jns
retf
lods
dec
xchg
fcmovu
xor
fwait
mov
jne
xchg
stc
fidiv
jne
bnd
fldcw
xchg
pop
fxch
sbb
movs
and
jle
retf
shl
int
xor
jne
bnd
fldcw
sbb
lods
adc
(bad)
lods
dec
mov
(bad)
out
(bad)
jmp
mov
fdiv
loope
and
dec
mov
fidiv
and
and
arpl
and
lods
dec
push
(bad)
cli
fcmovu
xor
call
xlat
addr16
fdiv
in
and
inc
into
and
inc
aad
loop
xchg
fcmovu
xor
cli
fcmovu
xor
call
fcmovu
xor
jmp
xor
and
inc
mov
cmps
leave
ficomp
and
cwde
and
fcmovnu
popf
popf
sbb
popf
cmp
sub
fisubr
sbb
cmps
outs
mov
(bad)
into
lods
out
xchg
mov
dec
push
in
and
xor
jne
bnd
and
sub
sbb
lods
adc
std
lods
or
fidiv
xchg
mov
scas
bnd
fldcw
sbb
cmps
outs
mov
(bad)
push
and
(bad)
retf
lods
adc
std
lods
or
mov
enter
sti
into
lods
out
xchg
test
xor
lods
mov
inc
xchg
push
fidiv
jne
jg
fcmovu
xor
icebp
pushf
and
push
and
inc
xor
push
lods
ret
and
scas
ja
fcmovu
xor
inc
push
lods
(bad)
lds
cmps
cmp
std
and
lahf
out
dec
(bad)
fcmovu
xor
push
and
(bad)
add
and
(bad)
lds
cmps
cwde
mov
sbb
test
inc
fcmovu
xor
mov
scas
mov
call
pusha
ss
std
shr
lahf
mov
lods
or
mov
inc
dec
stos
jne
xor
sub
and
xor
xchg
mov
mov
call
int
loopne
fimul
sub
cwde
sub
fimul
addr16
retf
cwde
xchg
fcomp
retf
loop
out
(bad)
jmp
fisubr
xor
push
and
(bad)
push
and
out
add
fcomp
xor
cmps
in
xor
push
push
fadd
fstp
xor
ficom
inc
xchg
push
scas
dec
out
fcmovu
xor
jmp
jae
retf
loope
xchg
out
lods
push
and
(bad)
aad
xor
push
scas
mov
call
mov
inc
xchg
mov
mov
lds
mov
call
(bad)
imul
and
xor
jne
cli
jmp
leave
fidiv
scas
mov
repz
leave
fidiv
sub
dec
stos
aad
xor
and
fdiv
into
adc
inc
aad
mov
call
cwde
sbb
fcmovnu
retf
scas
dec
(bad)
fcmovu
xor
inc
sub
and
xor
sbb
ficomp
push
scas
mov
call
mov
call
out
or
and
xor
jne
cli
jmp
fstp
xor
aad
lods
das
jl
dec
adc
addr16
retf
and
scas
lahf
add
es
jbe
popf
lahf
inc
int
push
sar
xchg
je
cmps
repnz
jnp
push
loop
ss
and
rcl
and
and
retf
loope
(bad)
call
xor
lahf
fst
sub
imul
mov
cmps
sbb
(bad)
addr16
std
shl
xor
cmp
pusha
sub
and
lds
popf
inc
int
push
stc
xor
mov
lods
fnstsw
popf
pop
std
inc
imul
push
shl
xor
dec
jle
inc
push
aad
imul
in
out
push
jo
das
inc
jne
popf
test
lods
fnstsw
lahf
loop
mov
push
and
and
push
fs
retf
xor
retf
dec
retf
add
mov
push
and
shr
shl
call
out
lahf
shl
ins
sbb
out
lods
loop
sub
in
push
and
into
cmc
mov
test
bound
adc
std
adc
(bad)
cmps
mov
fimul
arpl
lods
or
jecxz
pushf
jle
mov
(bad)
(bad)
fild
(bad)
lahf
fisttp
lahf
loop
retf
push
and
out
lahf
shl
jb
dec
sub
jb
and
(bad)
xor
push
cmps
fidiv
push
int
push
mov
and
xor
adc
lods
xor
iret
scas
xchg
scas
pusha
ret
sbb
or
jmp
inc
in
outs
hlt
and
ss
std
and
retf
or
lahf
jecxz
and
fs
add
jo
das
scas
loope
retf
push
int
push
push
and
xor
jmp
and
or
cmp
and
ficom
and
and
or
and
jae
retf
icebp
xor
stos
inc
fnstenv
test
das
(bad)
addr16
retf
lods
adc
(bad)
lods
dec
dec
(bad)
xor
push
lods
mov
dec
mov
fidiv
and
and
sahf
jmp
cmp
mov
and
fidiv
sub
lds
dec
sar
push
and
(bad)
push
lods
mov
ret
(bad)
push
cmp
xor
int
push
push
and
lods
or
in
pushf
adc
fidiv
lods
mov
mov
push
test
ds
fidiv
inc
push
fstp
iret
and
retf
push
shr
nop
std
xor
mov
std
inc
aad
in
add
and
adc
scas
and
adc
cld
lods
add
lods
mov
inc
xchg
in
fidiv
jne
retf
fidivr
jmp
or
fidivr
fcmovu
xor
push
scas
mov
and
and
aad
and
addr16
adc
lahf
out
dec
(bad)
(bad)
jmp
dec
mov
(bad)
push
and
(bad)
jmp
and
jg
fcmovu
xor
call
fisub
dec
stos
loope
xor
inc
push
into
pop
in
xchg
popf
mov
scas
retf
fld
or
inc
frstor
lods
dec
fcmovu
(bad)
call
fcmovu
xor
push
shr
dec
aad
push
retf
in
popf
and
(bad)
sub
xor
lods
pusha
xor
lock
push
movs
out
pop
and
scas
retf
(bad)
or
retf
in
popf
and
(bad)
call
test
push
jmp
and
mov
jmp
adc
std
lods
or
fisub
inc
aad
mov
call
jne
pop
ficom
xor
jmp
mov
cmps
ja
fcmovu
xor
(bad)
push
sbb
mov
and
adc
(bad)
lods
dec
inc
(bad)
xor
jmp
dec
fcmovu
(bad)
call
fcmovu
xor
std
fcomp
push
int3
mov
jmp
in
retf
rol
lods
pusha
ss
std
shr
lahf
mov
lods
or
jno
retf
test
dec
scas
fcmovu
xor
xchg
(bad)
fidiv
jne
dec
retf
xor
arpl
ficomp
(bad)
xor
mov
fidiv
and
lods
dec
pop
(bad)
xor
scas
fcmovu
xor
jmp
dec
(bad)
sub
ss
fcmovnu
xor
call
and
jg
fcmovu
xor
call
fisub
dec
stos
in
xor
int
retf
and
(bad)
push
sbb
popf
fidiv
scas
and
adc
cld
lods
add
lods
mov
xor
jmp
fcmovnu
inc
push
(bad)
(bad)
call
xor
lods
dec
pop
(bad)
xor
loop
and
or
and
inc
push
lods
mov
mov
jmp
xor
push
ficom
jmp
fisubr
popf
and
cld
retf
iret
lods
out
dec
(bad)
or
movs
ss
mov
jne
xchg
(bad)
fidiv
jne
dec
retf
xor
arpl
ficomp
(bad)
xor
push
shr
dec
in
add
push
cmps
in
popf
and
(bad)
jb
(bad)
jmp
mov
jne
mov
test
(bad)
jmp
mov
jne
push
ficom
jmp
fisubr
(bad)
addr16
retf
test
mov
(bad)
push
and
and
sub
fiadd
dec
and
retf
mov
and
and
and
xor
jne
pop
mov
fnstenv
cmps
in
popf
and
out
pop
and
fcmove
push
and
(bad)
arpl
int
in
fcmovu
inc
xchg
push
fnstenv
cmps
in
popf
and
and
retf
mov
mov
(bad)
outs
fbstp
jmp
mov
jne
jmp
fcmovnu
and
(bad)
xor
mov
int
push
push
and
cmps
ja
fcmovu
xor
jo
and
sub
addr16
xor
jne
(bad)
cld
fcmovu
dec
shr
sbb
xchg
pusha
daa
retf
and
cmc
aam
retf
mov
and
loope
imul
fisub
enter
ja
fcmovu
xor
sbb
movs
mov
and
and
retf
and
retf
fcmove
push
test
ds
nop
aad
call
fcmovu
xor
jmp
aam
retf
lea
fidiv
mov
loope
imul
fisub
retf
dec
enter
mov
test
(bad)
call
stos
int3
xor
sub
fcmove
push
push
cmp
push
and
(bad)
jmp
jecxz
iret
mov
lods
std
retf
into
lods
out
xchg
icebp
fidiv
loop
mov
fcmovnu
retf
push
and
fnstenv
and
popa
ss
rcr
xor
and
popa
ss
(bad)
xor
sahf
mov
ds
cmps
cwde
mov
fcmovnu
retf
in
xchg
fnstenv
fisub
inc
stos
aad
xor
push
and
call
out
cwde
push
and
(bad)
call
lock
push
ficom
(bad)
out
retf
loope
popf
pusha
sub
xor
lods
in
(bad)
gs
sub
imul
fcmovnu
inc
push
and
imul
xor
jmp
and
clc
cmp
dec
mov
int
and
fisub
xor
jl
dec
pop
out
and
xor
jne
mov
shr
jecxz
adc
cmps
outs
push
(bad)
xor
xchg
popa
fnstenv
movs
cdq
iret
loop
(bad)
xchg
popa
fnstenv
jecxz
iret
loop
(bad)
jmp
xor
push
and
call
mov
jne
xchg
(bad)
(bad)
jne
add
addr16
xor
xor
and
inc
xchg
fnstenv
lods
in
(bad)
gs
sub
mov
fcmovnu
inc
push
and
imul
or
nop
leave
xor
and
mov
int3
imul
pop
std
lods
or
cmps
in
xor
push
push
fadd
(bad)
jg
fcmovu
xor
push
lods
std
cmp
jmp
xor
lods
out
xchg
icebp
fidiv
jp
xchg
(bad)
jo
rep
leave
into
adc
scas
push
ret
or
(bad)
out
lods
loop
adc
shr
and
daa
call
test
jmp
push
push
and
and
enter
ss
ss
aam
retf
(bad)
jmp
mov
mov
push
and
jne
mov
adc
fnstenv
jmp
mov
adc
lahf
loop
jge
and
dec
adc
fnstenv
jmp
xor
fcmovu
call
mov
call
loope
fwait
test
aaa
jmp
movs
not
and
cmps
or
inc
lods
jg
fcomp
xor
push
and
pusha
xor
out
fucomip
in
retf
and
dec
adc
fdiv
jo
pusha
xor
xchg
pusha
xor
xchg
mov
jmp
(bad)
(bad)
pop
hlt
dec
stc
ds
push
sub
xor
push
and
addr16
and
lods
(bad)
out
lods
loop
adc
jnp
aam
and
es
jbe
popf
popf
js
je
ins
mov
xchg
sar
and
retf
das
retf
ret
inc
push
(bad)
push
dec
and
and
es
aam
push
int
pop
push
and
(bad)
jmp
and
retf
pusha
ss
add
or
dec
xor
in
push
and
and
ds
jecxz
retf
push
mov
dec
fcmove
push
and
ficomp
and
imul
addr16
sbb
icebp
sub
in
push
push
leave
xor
push
int
pop
push
and
lods
(bad)
out
jecxz
out
in
retf
jle
aad
lods
das
xchg
leave
adc
pop
inc
lods
pop
sahf
into
lods
adc
popf
jo
and
pusha
cs
out
iret
and
retf
dec
retf
dec
retf
dec
retf
in
arpl
and
adc
std
lods
or
mov
push
and
jo
fwait
mov
and
pop
and
ss
lods
std
sti
into
lods
out
push
test
es
ficom
inc
ficom
(bad)
jecxz
retf
and
addr16
retf
inc
ds
int3
sub
push
and
in
(bad)
gs
sub
lods
lahf
jo
xor
push
lods
std
cmp
popf
pusha
cmc
inc
aad
pusha
adc
and
vmovshdup
pusha
sub
outs
scas
(bad)
mul
and
push
movs
(bad)
inc
cmp
sti
call
aad
jmp
ret
fidiv
(bad)
push
sub
and
inc
aad
pusha
sub
and
(bad)
std
dec
scas
(bad)
mul
and
sbb
std
inc
into
or
inc
aad
pusha
sub
fstp
not
xor
push
lods
std
jecxz
lods
out
mov
push
sub
frstor
(bad)
call
loope
sbb
fld
frstor
(bad)
int3
sbb
pusha
ss
std
or
lahf
out
(bad)
out
es
shl
and
jmp
into
aaa
inc
push
sub
jge
sti
test
add
fiadd
lods
xor
push
push
pop
fisub
adc
std
lods
or
pusha
rol
mov
shr
dec
cld
fcmovnu
xor
push
and
leave
call
and
inc
ficom
(bad)
pop
mov
push
jae
cli
and
retf
push
cmp
jae
retf
jnp
(bad)
jo
repz
popf
test
movs
loop
jnp
and
mov
lods
(bad)
out
lods
loop
push
fnstenv
sub
fidivr
(bad)
pop
mov
push
dec
fcmove
push
and
and
push
ficom
jmp
mov
retf
fldenv
inc
mov
retf
push
retf
ret
(bad)
lahf
shl
sbb
pop
inc
out
rol
inc
push
shr
push
and
lods
or
jle
and
xor
push
int
pop
push
and
push
rcr
and
push
ss
sub
mov
and
aad
rcr
push
ss
mov
push
scas
pusha
xor
sub
cmp
lahf
loop
add
jo
das
xchg
leave
ins
retf
push
and
dec
xchg
into
or
cmp
lahf
loop
outs
and
jecxz
lods
loop
push
test
cmp
int
and
cmp
(bad)
out
int
hlt
fcmovu
dec
shr
sbb
xchg
mov
retf
(bad)
out
lods
loop
push
stc
jne
inc
mov
push
scas
pusha
cs
and
retf
movs
retf
scas
(bad)
dec
pusha
sub
mov
retf
push
mov
and
call
lahf
pusha
std
inc
ror
inc
push
aad
pushf
(bad)
xor
cmp
outs
dec
imul
mov
push
into
sub
and
sbb
sub
push
and
and
and
enter
and
and
retf
push
dec
and
adc
and
pop
push
and
addr16
shl
stc
sbb
and
pusha
and
and
scas
(bad)
repnz
pusha
push
sub
retf
mov
inc
push
int
(bad)
neg
aas
retf
push
and
and
loope
stc
sbb
in
sub
lods
pusha
adc
and
and
lods
jecxz
imul
mov
(bad)
adc
inc
out
adc
inc
shr
and
jecxz
pop
and
jae
add
jecxz
pop
and
pop
sbb
mov
popa
and
pusha
sbb
into
sub
test
pusha
sbb
scas
pusha
sbb
sub
and
and
aad
inc
int
pop
push
and
sub
and
retf
aam
sbb
jae
aad
and
dec
sbb
xor
and
(bad)
gs
retf
stc
call
test
shl
mov
push
and
push
ficom
fst
sub
jmp
pusha
in
fdivr
push
pop
fs
fidivr
cmp
pusha
stc
inc
inc
ror
scas
jo
cmp
pusha
loope
jle
and
jbe
fcmovu
call
and
retf
cdq
jb
ds
dec
scas
fcmovnu
xor
(bad)
xor
or
mov
inc
push
or
das
mov
push
dec
and
retf
jae
cdq
mov
retf
push
fstp
retf
jle
and
jbe
pop
mov
push
lods
(bad)
out
lods
loop
push
dec
and
out
and
pop
push
and
test
push
and
adc
mov
mov
retf
cmp
in
out
push
jb
(bad)
pop
pop
sub
shl
pop
retf
and
addr16
retf
aam
push
dec
jno
push
and
movs
and
(bad)
xor
push
and
and
retf
aam
push
dec
and
push
movs
int
in
fcmovu
xor
push
dec
popa
cmp
ds
and
retf
and
xor
fisub
jle
aam
push
dec
les
push
and
and
dec
(bad)
mov
loope
dec
out
inc
repz
jne
arpl
retf
ret
fldcw
jmp
lods
loop
ror
retf
dec
je
and
nop
mov
int
pop
push
and
lods
das
xchg
leave
sub
add
pop
call
daa
(bad)
push
and
xor
call
loope
xchg
loop
mov
and
addr16
ror
xchg
loop
mov
and
cmps
and
cmp
xchg
loop
(bad)
push
and
sub
xor
xlat
fld
xor
xchg
pusha
fidiv
fisub
xor
push
and
addr16
dec
rcr
sub
and
cmp
push
adc
xchg
dec
jle
or
shl
and
(bad)
xchg
test
push
jbe
popf
popf
pop
sub
xor
dec
dec
std
jbe
retf
out
pop
and
mov
push
and
(bad)
push
and
xor
fisub
add
fcmovu
xor
jmp
fcmovu
xor
jmp
scas
mov
call
(bad)
xor
push
fcmovu
xor
push
and
lods
or
fisub
xor
popf
mov
ss
(bad)
xor
jmp
xor
popf
mov
ss
(bad)
xor
jmp
xor
loope
lods
dec
repnz
xor
out
fcomp
xor
sbb
xor
jmp
fiadd
mov
aaa
jmp
fcomp
xor
sbb
xor
jmp
fiadd
mov
aaa
jmp
in
retf
adc
lahf
out
outs
(bad)
(bad)
xor
jmp
dec
in
pop
retf
mov
call
jne
xchg
fstp
xor
jmp
and
and
xor
fidiv
inc
scas
retf
in
xchg
mov
xor
fcmovu
cwde
inc
int
inc
push
and
mov
retf
fcmove
push
test
and
fcmovnu
call
lods
dec
out
fidiv
add
and
jne
push
adc
and
and
or
ja
(bad)
xor
inc
std
sti
into
lods
out
(bad)
int3
pop
retf
push
and
fidiv
jmp
or
retf
mov
call
cmps
xor
push
cmp
push
popf
leave
jecxz
and
lds
call
in
repz
and
(bad)
or
sub
and
fnsave
jmp
das
scas
retf
in
xchg
test
mov
fwait
mov
jne
(bad)
push
scas
retf
mov
dec
out
ficom
inc
int
inc
push
and
and
sub
fcmovnu
inc
aad
in
ret
retf
aad
jmp
fisub
into
xlat
addr16
retf
out
adc
xchg
retf
fcmove
adc
addr16
aad
jmp
int3
fnstenv
and
lods
or
jg
(bad)
xor
call
aaa
scas
retf
fnsave
cdq
lods
and
cmc
push
and
test
loop
fidiv
lahf
and
add
push
popf
adc
push
and
lds
call
int
inc
push
and
sbb
rol
push
test
ds
inc
push
and
jb
and
adc
into
xor
std
(bad)
xor
lahf
std
shr
lahf
mov
lods
or
jle
aad
lods
das
xchg
leave
xor
sbb
(bad)
push
movs
retf
and
in
push
movs
pop
mov
push
pop
dec
imul
mov
push
dec
std
cmp
mov
push
and
dec
ret
aad
push
ficom
(bad)
sbb
push
and
aad
rcl
into
xlat
addr16
retf
lods
(bad)
out
loop
adc
in
push
jecxz
cmp
movs
shr
and
lods
(bad)
loope
pusha
xor
jecxz
xor
popf
mov
push
and
leave
inc
ror
inc
out
in
inc
test
xor
and
push
and
arpl
push
lods
(bad)
mov
inc
ficom
(bad)
out
retf
retf
and
jnp
aad
lods
das
inc
call
aas
(bad)
push
and
jne
arpl
fimul
sub
fcmove
adc
addr16
adc
lahf
loop
xchg
aad
lods
das
inc
jbe
popf
popf
push
sub
rcl
fcmove
adc
addr16
leavew
arpl
xchg
in
call
pusha
ss
and
fcmove
adc
addr16
or
lahf
loop
retf
inc
int
xor
push
movs
loop
ss
into
test
pusha
fld
sub
mov
adc
mov
jae
lds
sub
lds
arpl
jl
bound
jge
in
ret
sub
in
ficomp
imul
adc
in
push
sub
pushf
pusha
sub
ret
lds
xchg
push
loop
daa
in
xchg
dec
in
out
lahf
shl
scas
mov
je
movs
or
jmp
and
fidiv
pop
dec
daa
and
mov
inc
or
push
daa
and
retf
xchg
mov
int
xchg
and
lods
push
nop
and
pop
inc
nop
lods
and
into
xlat
addr16
retf
xor
retf
jne
mov
int
dec
push
and
fcmove
adc
addr16
shr
ror
pushf
dec
xor
lahf
fisttp
lahf
loop
or
cmp
adc
in
push
movs
loop
cmp
jae
mov
shr
jle
aad
lods
das
xchg
leave
cmp
pushf
inc
scas
push
ret
and
cs
(bad)
loope
lods
dec
cli
fcmovnu
xor
adc
addr16
fnstenv
fisub
retf
cwde
ss
xor
xor
jmp
lods
mov
push
fcmovu
xor
jmp
and
fidiv
call
and
fnstenv
fidiv
pop
int
dec
push
and
addr16
xor
fcmovnu
xor
(bad)
xchg
mov
mov
pop
test
cmp
fcmovu
call
and
std
push
and
and
push
and
lods
or
push
and
and
push
and
(bad)
and
and
dec
(bad)
fcmovnu
xor
dec
in
out
lahf
rcr
shl
inc
dec
sub
cmp
movs
pusha
xor
cmp
into
arpl
iret
adc
addr16
div
fisubr
push
(bad)
out
jbe
je
fcmovu
dec
shr
push
or
data16
jae
and
xor
retf
inc
inc
cmp
push
stc
cmps
mov
and
popf
pusha
fld
or
inc
inc
fisttp
jle
sub
push
test
pop
stc
fcmovu
call
and
and
and
inc
and
in
push
pushf
and
push
and
and
push
and
and
(bad)
xor
data16
fidiv
sub
fidiv
push
jbe
clc
call
lods
jbe
xchg
pusha
fnstsw
and
(bad)
lahf
out
cdq
push
movs
pop
mov
push
ds
lods
movs
and
fdivr
and
fidiv
(bad)
int3
cld
retf
fcmove
adc
addr16
fld
adc
inc
inc
(bad)
mov
or
cdq
(bad)
xor
xor
daa
in
pushw
and
lods
or
out
lahf
out
sub
enter
sub
fnstsw
aam
and
fidiv
inc
popa
movs
mov
es
ret
data16
pusha
ds
pop
shl
push
or
ss
and
jbe
arpl
fidiv
lahf
out
sahf
or
(bad)
ds
pusha
fnstenv
push
and
xor
test
fcmovu
inc
aam
jbe
inc
int
aaa
jmp
lods
out
inc
push
fcmove
adc
addr16
sbb
imul
cmc
gs
and
(bad)
into
and
mov
jle
or
rcr
call
add
and
or
hlt
push
push
and
push
and
lods
or
bound
js
push
and
push
ret
sub
retf
sub
bound
fs
push
and
lods
or
push
and
xchg
dec
push
and
and
or
lods
adc
popf
mov
icebp
lods
pusha
ss
loop
xchg
(bad)
jo
repz
cdq
inc
jb
mov
(bad)
pop
push
lods
cmp
aad
or
int
xor
fidivr
and
mov
lods
aad
out
jecxz
shl
daa
retf
bound
push
and
mov
inc
push
pop
lods
dec
sahf
and
and
lahf
jecxz
iret
adc
addr16
lods
xor
mov
fidivr
push
and
sub
pop
jne
popa
pop
dec
xchg
inc
int
aas
jmp
adc
mov
out
retf
aad
out
jecxz
adc
push
ret
cmps
retf
in
fisub
into
xlat
addr16
inc
shr
xchg
lea
fidivr
(bad)
shl
scas
std
push
retf
ret
inc
push
(bad)
imul
mov
sub
mov
(bad)
xor
loope
shl
ficom
and
jne
out
and
xor
xchg
and
cmps
xor
push
rol
aad
rcr
and
xlat
addr16
retf
jne
sbb
sub
jbe
jge
and
jb
stos
rcr
xor
(bad)
into
sub
out
ret
inc
push
(bad)
aad
lods
das
xchg
leave
sub
pusha
xchg
push
inc
out
or
inc
rcr
shr
shr
sub
jmp
jae
xor
push
movs
loop
adc
fbstp
lahf
out
lahf
jmp
push
adc
retf
pusha
cmp
(bad)
std
fbstp
loope
scas
(bad)
loope
pusha
xor
jl
dec
push
out
and
jp
and
fidiv
xchg
fisub
sub
and
xlat
addr16
inc
shl
push
out
fcmovu
xchg
pop
in
in
jmp
movs
and
imul
fimul
sub
mov
push
and
and
ds
loop
xor
or
xor
arpl
fidivr
int
ds
ficom
(bad)
jecxz
retf
fucom
out
lods
loop
inc
fdiv
std
and
dec
jnp
add
and
or
popf
test
lods
fucom
out
lods
loop
adc
in
push
cmps
add
mov
and
int
xchg
and
addr16
pusha
es
lods
xor
(bad)
xchg
and
sub
mov
mov
jne
dec
xchg
and
lods
lahf
clc
dec
xor
xor
push
int
dec
push
and
and
and
and
or
sub
lods
xor
ret
repnz
loop
(bad)
gs
ss
and
in
push
lods
fnstsw
lahf
loop
iret
push
in
retf
(bad)
out
lods
loop
shl
retf
cmp
mov
push
cmps
sbb
adc
gs
sub
pusha
fcomi
push
and
retf
cmps
mul
nop
addr16
sub
rcl
push
and
fld
loop
and
and
int
sbb
or
adc
(bad)
adc
pop
retf
jecxz
loope
jbe
push
cmps
(bad)
adc
addr16
pusha
xor
in
retf
lods
(bad)
adc
cmc
mov
sub
outs
push
and
adc
push
and
dec
or
xor
cli
(bad)
gs
into
adc
dec
xor
gs
and
out
xor
(bad)
push
and
ficom
adc
leave
mov
(bad)
push
inc
lods
(bad)
push
call
jns
and
xor
in
retf
sbb
inc
push
sub
addr16
sub
mov
push
and
and
retf
sub
push
movs
retf
and
jne
push
dec
and
retf
dec
retf
cmps
retf
jecxz
out
or
inc
shl
out
and
in
push
lods
fucom
out
lods
loop
push
int
dec
push
and
in
push
and
and
push
and
lods
(bad)
loop
loop
mov
and
jo
repz
leave
rol
scas
xchg
push
pushf
mov
push
add
lods
or
and
adc
add
dec
out
push
retf
add
fs
push
push
and
pop
mov
and
fs
and
retf
les
fldcw
push
and
lods
cmp
and
retf
and
nop
fs
dec
adc
and
retf
pop
enter
out
xchg
add
sub
fs
retf
and
addr16
jmp
and
adc
ins
enter
mov
mov
ror
push
mov
sub
scas
fs
adc
and
cmp
and
retf
and
fs
retf
mov
push
and
fs
and
(bad)
int3
arpl
push
and
and
inc
push
and
fs
pop
mov
int3
adc
sub
sti
(bad)
int3
aas
leave
push
and
lods
or
and
fidiv
push
and
in
out
daa
and
add
stos
fs
and
bound
fcmovnu
xor
push
and
in
fisub
and
add
stos
fs
and
push
and
fidiv
push
and
in
mov
and
add
stos
fs
and
nop
fs
dec
out
add
push
int3
lods
xor
fcmovu
iret
and
retf
adc
je
retf
mov
push
and
and
mov
and
outs
mov
(bad)
dec
and
(bad)
out
in
sbb
int3
sub
outs
scas
fs
daa
retf
adc
icebp
retf
test
nop
fs
mov
int3
loope
push
and
and
mov
int3
xchg
retf
fcmove
and
retf
adc
and
test
push
and
fs
mov
push
and
and
push
movs
sub
fs
mov
and
and
retf
and
addr16
dec
out
cs
int
add
not
bound
add
push
fiadd
dec
inc
out
retf
mov
push
and
and
addr16
inc
push
and
fs
fcmove
mov
fs
jae
push
rol
inc
push
int
or
and
in
dec
and
retf
sbb
and
retf
mov
push
and
and
mov
and
inc
xlat
sub
retf
and
cmp
mov
and
(bad)
loopne
xchg
(bad)
loope
in
push
and
and
mov
fcmove
neg
retf
mov
push
and
sbb
and
std
dec
push
and
fs
std
dec
push
and
pop
cmp
imul
mov
imul
movs
mov
and
xchg
sub
inc
fisub
mov
and
inc
push
and
pusha
cmp
pop
ror
arpl
movs
mov
and
lds
out
xor
push
cmps
add
imul
cmp
xor
imul
lods
and
out
mov
int
push
and
and
mov
push
inc
rol
inc
push
shr
push
and
aad
popf
xor
mov
and
xor
scas
addr16
mov
test
iret
(bad)
pop
fs
fcmove
and
retf
or
mov
push
mov
adc
mov
and
dec
jle
or
rcr
bound
ror
pop
(bad)
addr16
retf
pop
retf
jecxz
mov
addr16
pop
mov
and
and
retf
popf
or
and
and
mov
dec
call
and
and
mov
dec
dec
and
and
mov
lods
fnstsw
lahf
loop
and
addr16
retf
popf
push
and
jo
rep
leave
dec
push
and
sahf
ret
and
rol
inc
push
mov
mov
push
and
and
xor
push
loop
and
and
shr
lahf
pusha
mov
aad
inc
es
test
bound
shl
push
and
and
pop
lahf
out
scas
out
and
fcmove
and
retf
cmc
retf
or
lahf
out
scas
ret
(bad)
into
and
retf
pusha
push
pop
and
inc
mov
and
addr16
lds
push
loop
jp
and
shr
lahf
pusha
test
jle
and
popf
retf
shr
lahf
pusha
lods
inc
aad
pop
jbe
push
cmc
jae
and
test
(bad)
jne
retf
and
xor
push
popf
cdq
mov
lahf
pusha
mov
push
inc
dec
and
mov
adc
xor
push
test
arpl
dec
retf
(bad)
mov
and
addr16
push
and
dec
int3
jmp
pop
and
mov
and
lock
and
addr16
int
jmp
shl
movs
test
push
scas
pusha
cs
sub
cmp
lahf
out
xchg
dec
in
out
lahf
shl
test
inc
jmp
dec
(bad)
sub
lods
(bad)
out
push
dec
jae
and
es
pusha
int
adc
mov
inc
test
and
push
xor
(bad)
loop
dec
xor
add
pusha
ds
aaa
scas
(bad)
cs
pusha
lds
retf
ss
jo
repz
loope
aas
jle
out
and
inc
rcr
and
addr16
xor
push
and
and
lahf
lahf
shl
popf
push
sub
iret
and
retf
sub
sbb
and
xchg
mov
and
xor
sub
xor
or
xchg
mov
sbb
push
sub
xor
xchg
das
daa
retf
pusha
ficomp
xor
inc
add
sub
sub
xlat
add
jl
sbb
sbb
lods
xor
fiadd
sbb
lds
lods
fisttp
daa
sub
sbb
arpl
xor
xor
repz
dec
inc
out
cmps
int
sbb
and
lds
sub
mov
jne
mov
and
mov
add
mov
ja
and
and
dec
(bad)
scas
lahf
push
test
fst
and
dec
cld
and
adc
and
fwait
popa
es
pop
frstor
ds
xor
retf
push
and
xchg
(bad)
ficom
addr16
(bad)
std
jmp
mov
mov
movs
sbb
adc
inc
out
ins
movs
not
and
lahf
frstor
int3
adc
inc
out
cmps
int
xchg
sbb
into
arpl
lods
xor
and
idiv
aaa
imul
lods
xor
and
mov
push
xor
cmps
and
cmps
in
lahf
and
retf
push
and
daa
mov
xchg
sbb
enter
xor
and
mov
(bad)
movs
not
daa
push
mov
sub
retf
push
int
int3
and
dec
(bad)
scas
lahf
push
test
fst
and
dec
cld
and
pop
std
cmps
and
lods
pusha
xor
es
out
cmps
int
popf
jo
inc
add
and
push
and
push
cwde
lahf
(bad)
sub
and
pop
lods
fisttp
daa
movs
not
and
hlt
lahf
frstor
int3
pop
push
push
inc
out
cmps
int
sbb
push
les
(bad)
imul
and
int
popa
and
test
add
iret
and
xor
push
and
and
push
sub
xchg
dec
jle
or
ror
jbe
inc
fisub
pop
(bad)
addr16
(bad)
daa
fcmove
int
sbb
retf
bound
int
retf
aam
jmp
push
aaa
mov
es
adc
int3
and
shr
mov
push
and
in
adc
sbb
out
fs
lods
xor
std
jne
dec
rcr
xor
(bad)
addr16
idiv
and
sbb
push
and
inc
ss
into
sub
es
ss
xor
inc
add
fimul
push
and
int
xor
cmp
cmp
push
lods
pusha
xor
cmc
lods
xor
jmp
lahf
pusha
rol
cmp
inc
shr
push
and
scas
dec
(bad)
lods
cmp
dec
lahf
fbld
pop
cmc
cmps
and
lods
pusha
xor
and
and
jo
inc
push
fisub
pop
(bad)
addr16
xor
cmc
cmps
and
lods
pusha
xor
and
inc
adc
and
push
and
jo
xlat
(bad)
daa
xor
push
and
fimul
sub
dec
in
out
lahf
rcr
sub
jae
and
(bad)
xor
jmp
push
and
retf
and
(bad)
cli
xor
in
fidiv
(bad)
addr16
xor
sbb
fimul
and
add
mov
leave
fcmovu
retf
sub
retf
movs
sbb
out
addr16
daa
and
xchg
pop
in
fidiv
jmp
test
(bad)
fsubrp
addr16
mov
pop
mov
and
lds
fimul
or
addr16
(bad)
enter
adc
fcmovu
inc
lds
mov
mov
fidiv
imul
(bad)
retf
and
jl
(bad)
retf
dec
in
xchg
sbb
movs
fisub
retf
push
dec
in
fidiv
in
fidiv
sub
aad
push
and
and
push
sub
xor
add
lds
lods
pop
ret
xor
push
and
fidiv
pop
and
fidiv
jmp
in
retf
icebp
adc
xlat
into
xor
cmc
xor
push
lods
mov
sti
jmp
xor
test
xchg
shl
lock
lods
jle
(bad)
xor
push
xor
shl
fwait
mov
jne
inc
push
and
or
outs
cli
retf
push
int3
test
xor
mov
ficom
and
(bad)
xor
push
fldcw
bound
outs
xchg
sti
fidiv
enter
push
adc
inc
int3
in
enter
leave
inc
fldcw
into
sub
fcmovu
mov
push
and
xor
sub
push
lods
mov
and
out
push
and
aad
push
push
xchg
xor
in
fcmovu
xchg
xchg
mov
and
dec
call
retf
mov
lds
fisub
pop
(bad)
addr16
xor
push
and
and
and
adc
xor
out
fs
shl
loop
fidiv
stc
fcmovu
or
daa
lods
adc
int3
daa
or
daa
es
scas
sub
lahf
test
fiadd
ror
xor
lahf
cld
in
adc
(bad)
enter
retf
fsub
shl
loop
fidiv
fs
fcmove
and
retf
(bad)
adc
dec
dec
retf
add
pop
gs
sti
xor
add
sbb
push
and
fidiv
adc
mov
inc
xchg
test
xor
enter
aam
es
adc
fisubr
xor
jmp
mov
lods
dec
mov
mov
lods
dec
retf
xor
scas
cli
fidiv
leave
fcmovu
and
mov
sbb
stos
cli
fidiv
sar
fidiv
jmp
cli
fidiv
jmp
dec
and
retf
xchg
adc
sbb
pop
scas
cli
fidiv
jle
and
leavew
fcmovu
and
addr16
and
adc
test
leave
fcmovu
loope
icebp
cli
xor
out
fs
mov
stc
fcmovu
or
daa
scas
fiadd
aad
mov
lods
mov
stc
fcmovu
mov
inc
int
mov
cmps
cli
fidiv
jbe
and
retf
pop
retf
push
and
fidiv
jmp
movs
mov
and
dec
sub
retf
mov
inc
add
and
push
and
popa
enter
cs
fcmovu
or
xchg
xor
repnz
fidiv
leave
fcmovu
inc
out
movs
repnz
push
or
enter
mov
(bad)
movs
repnz
push
xor
cmps
int
xchg
sbb
aad
(bad)
and
test
call
addr16
mov
enter
hlt
daa
lods
jle
cmp
imul
xchg
and
jmp
scas
into
and
xor
lahf
mov
into
dec
lahf
ror
lds
fisub
aas
aad
fstp
sar
jmp
xchg
xor
add
enter
outs
int3
fcmovu
or
and
and
loop
sbb
enter
retf
movs
imul
es
ficom
and
movs
imul
and
leave
push
into
in
lds
fisubr
imul
mov
call
fidivr
cli
fidiv
jmp
cwde
(bad)
adc
push
cmps
cmp
fcmovu
retf
shl
adc
cld
or
daa
in
adc
push
and
fcmovu
inc
adc
dec
loop
fidiv
jmp
and
mov
push
and
fimul
(bad)
retf
and
jl
(bad)
retf
dec
in
xchg
sbb
movs
fisub
retf
or
jmp
in
out
lahf
shl
pusha
ret
pusha
ret
sub
add
xor
push
sub
fsubrp
adc
fisub
and
retf
fld
mov
xor
mov
and
addr16
pusha
ret
xor
and
mov
push
sub
ficom
fs
sub
sar
or
rcr
inc
lods
(bad)
push
call
cmp
and
xor
in
retf
pusha
ret
xor
push
and
and
iret
and
retf
pusha
ret
xor
and
mov
push
dec
in
shl
and
pusha
fs
and
sub
ficom
fs
xor
jo
das
xchg
leave
sub
lahf
pusha
sub
in
lahf
fst
sub
rcr
and
addr16
mov
and
and
inc
out
and
inc
rol
(bad)
push
inc
xchg
xchg
fs
mov
and
lods
or
push
dec
and
retf
push
retf
loope
fwait
pusha
fstp
jle
jo
push
dec
and
mov
scas
addr16
retf
lods
(bad)
loop
loop
push
int
mov
sub
test
jmp
and
test
inc
lods
ror
jae
test
jns
push
movs
jecxz
xor
mov
mov
adc
and
xor
inc
push
fldenv
mov
and
and
pusha
fs
iret
and
retf
shr
pusha
fld
popf
xor
push
and
shl
push
and
and
retf
lods
(bad)
out
adc
add
retf
dec
retf
xor
push
and
leave
dec
xor
xor
adc
inc
rcr
shr
xor
xor
lea
push
fidiv
push
and
push
mov
int
mov
sbb
xor
push
int
mov
adc
addr16
rcr
and
adc
scas
addr16
retf
cmp
out
js
and
mov
jp
add
jo
das
xchg
leave
add
jb
ins
inc
out
and
inc
shl
xor
push
dec
and
ror
mov
out
mov
lods
(bad)
out
lods
loop
shl
enter
iret
cli
mov
inc
mov
jo
js
xchg
inc
aad
xchg
loop
repnz
and
leave
call
int
jge
and
retf
and
push
and
and
or
jecxz
(bad)
test
adc
retf
and
stc
inc
ror
inc
xor
fcmove
and
and
test
(bad)
xor
retf
and
in
push
test
and
pusha
es
ficom
into
fsub
and
jecxz
xor
push
ret
lods
shl
retf
add
mov
xor
mov
and
and
pusha
fs
and
jo
pusha
xor
xchg
pusha
xor
fld
(bad)
fisub
pop
(bad)
addr16
scas
arpl
and
and
sub
ror
mov
mov
xor
push
popf
mul
push
and
stc
inc
rol
(bad)
sbb
xor
fs
mov
test
sub
and
mov
adc
dec
adc
and
and
int
cmps
push
and
fimul
in
retf
jnp
(bad)
jo
repz
leave
mov
arpl
js
rcr
and
addr16
(bad)
fwait
pusha
mov
retf
loope
scas
div
retf
ret
mov
or
jmp
and
in
xor
push
push
fcomp
(bad)
das
dec
retf
fucom
out
lods
loop
pop
dec
xchg
push
and
int
lods
fcmovu
dec
shr
lods
or
fcmovu
retf
das
jb
fcmovu
xor
push
cmps
pop
rcl
push
push
mov
push
and
int
lods
fcmovu
dec
shr
sbb
arpl
cmps
xor
sub
xchg
pop
and
ret
mov
or
call
sub
rcl
scas
push
inc
add
inc
xor
push
(bad)
dec
rcl
and
xlat
aad
retf
les
fisub
lods
lahf
jo
and
loop
call
sub
rcl
scas
push
inc
add
inc
xor
push
(bad)
inc
out
or
inc
ror
mov
inc
int
jo
fisub
lods
lahf
jo
lds
and
mov
call
addr16
cmp
and
fidiv
aam
lods
lahf
mov
xchg
(bad)
xor
xchg
frstor
mov
cmps
in
xor
push
movs
retf
and
fisttp
and
imul
fisub
jge
mov
jne
aad
and
pop
lahf
fst
sub
shl
cmp
inc
ficom
(bad)
lahf
dec
retf
loope
sbb
and
lahf
fisttp
lahf
loop
iret
and
retf
cmp
lahf
frstor
lahf
loop
adc
popf
xor
fcmovu
and
lods
loop
adc
data16
popf
and
jle
aad
lods
das
scas
dec
and
push
int
mov
inc
sahf
cmp
xlat
push
lods
adc
(bad)
lods
dec
mov
fbstp
and
retf
adc
lahf
out
or
jmp
rol
inc
xchg
mov
out
stos
xchg
fidiv
jmp
addr16
retf
inc
or
jmp
loope
ss
lods
std
retf
into
lods
out
mov
fidiv
jmp
cmps
ins
fucompp
loop
xor
fcmovnu
retf
push
and
and
dec
mov
fbstp
out
fcmovu
xor
adc
adc
retf
mov
push
and
dec
retf
dec
retf
fcmove
push
test
xor
popf
pusha
sub
lods
push
and
(bad)
push
lods
mov
dec
stos
fstp
xor
and
sub
call
dec
retf
dec
retf
std
jecxz
lods
out
stos
fstp
xor
fisubr
dec
and
(bad)
xor
imul
sub
retf
xor
sub
jne
xchg
fstp
xor
pop
dec
and
or
(bad)
push
cmps
pop
into
pop
sub
dec
outs
xor
test
in
(bad)
dec
(bad)
gs
sub
xor
fcmovnu
jb
pop
and
dec
xchg
fbstp
in
fisubr
call
(bad)
xor
jmp
test
popf
mov
jecxz
adc
fidiv
and
and
xor
xchg
test
cmp
(bad)
dec
(bad)
gs
sub
xor
fcmovnu
inc
into
or
inc
aad
nop
xor
fcmovnu
inc
xchg
(bad)
fidiv
jmp
fcmovu
xor
push
and
mov
or
and
xor
shl
retf
cmp
mov
es
jmp
xor
xor
adc
fidiv
jmp
sub
pop
in
fdiv
xchg
out
in
and
fidiv
jmp
fcmovnu
xor
cmp
fcomp
and
es
or
idiv
and
or
push
sub
xor
lods
std
retf
into
lods
out
call
sub
inc
push
sub
jne
xor
fidiv
in
and
adc
fcmovu
and
inc
and
inc
push
sub
fidiv
sub
lds
inc
loop
call
sub
iret
jmp
mov
push
in
(bad)
lods
jmp
pusha
fcomi
xchg
fstp
xor
pop
sti
dec
in
sub
push
inc
loop
call
sub
iret
loop
fdiv
jmp
pusha
fcmovnb
mov
mov
xor
push
inc
or
std
add
jge
fld
jge
rcr
xor
lods
in
(bad)
scas
mov
xor
jmp
pusha
fcmovnb
mov
fstp
xor
pop
test
mov
es
out
fcmovu
xor
call
(bad)
lods
dec
sbb
xor
xchg
rcr
xor
and
fidiv
jecxz
iret
jmp
dec
and
scas
aad
retf
fidiv
xor
loope
imul
fisub
ja
fcmovu
xor
adc
mov
push
and
(bad)
in
(bad)
push
and
(bad)
jmp
sbb
xor
mov
and
cmp
fcmovnu
call
mov
call
loope
sub
fcmove
push
push
dec
lods
popf
mov
inc
inc
push
fcmovne
jmp
xchg
pusha
xor
xchg
mov
jmp
or
inc
sub
xor
adc
fidiv
jmp
sub
pop
loopne
(bad)
call
out
sub
rcr
xor
mov
lods
lahf
mov
int3
(bad)
jmp
retf
lods
dec
sbb
xor
in
(bad)
jmp
in
retf
(bad)
xor
push
sub
push
rcr
mov
ret
(bad)
pop
and
(bad)
fidiv
and
dec
in
(bad)
in
fisubr
jl
(bad)
fidiv
jne
data16
and
xor
jne
cmp
sub
scas
fadd
retf
mov
fidiv
jmp
pusha
fcomi
jmp
mov
sub
fidiv
gs
mov
mov
jne
mov
loope
inc
rol
ja
fcmovu
xor
push
and
fidiv
sbb
xor
popf
mov
inc
inc
xchg
rcr
xor
sub
xor
jmp
xchg
pusha
xor
test
fimul
fisub
sub
dec
shl
lds
sbb
xor
mov
fisubr
ss
and
lods
adc
std
lods
or
xchg
mov
lds
fisubr
jge
fisttp
fwait
popa
xor
cmp
fcomp
lds
ficomp
dec
out
fcmovu
xor
xchg
rcr
xor
jecxz
iret
jmp
movs
mov
retf
scas
stc
or
push
rol
inc
xchg
mov
xor
lods
out
fcomp
fidiv
in
fisub
jmp
aad
retf
fidiv
mov
loope
inc
rol
ja
fcmovu
xor
push
and
fidiv
sbb
xor
sbb
fimul
and
xor
fcmovu
xor
cmps
in
xor
push
push
fadd
fstp
xor
fisub
pop
(bad)
addr16
xor
gs
xchg
fcmovu
xor
jne
dec
mov
int
mov
jle
aad
push
test
xor
(bad)
sbb
rcr
fistp
cmp
in
(bad)
inc
aad
xchg
(bad)
xor
jo
pusha
xor
into
(bad)
jmp
pusha
xor
mov
iret
push
fcmovu
inc
and
xor
push
fld
jge
fld
xor
int
and
xchg
addr16
fidiv
rcl
inc
rol
mov
lods
std
sti
into
lods
out
mov
fisub
retf
jle
xlat
mov
sub
iret
jmp
int
js
fisub
dec
shl
inc
inc
stos
rcr
xor
lods
std
cmp
in
(bad)
inc
aad
add
mov
mov
xor
pop
hlt
scas
pop
sbb
fidiv
lods
mov
jmp
fisub
sbb
fnsave
(bad)
pop
cmc
mov
push
and
(bad)
jmp
lods
loop
lahf
pop
(bad)
je
retf
lods
dec
sahf
(bad)
xor
push
fistp
xor
jne
fimul
and
addr16
pusha
xor
mov
ficomp
jmp
loop
or
loop
(bad)
push
and
pusha
xor
xchg
mov
jmp
and
inc
sub
xor
adc
fidiv
inc
fimul
call
fcmovnu
mov
cmc
pop
sbb
fisub
not
and
fnsave
and
retf
test
jmp
test
add
(bad)
call
loope
lahf
std
shr
lahf
mov
scas
dec
xchg
(bad)
xor
rcr
xor
mov
addr16
fidiv
dec
xchg
fidiv
jmp
cmp
jle
xlat
mov
test
xor
(bad)
addr16
xor
shl
fcmove
jl
dec
dec
out
and
xor
jne
out
cmps
fcmovu
dec
shr
sbb
sbb
mov
retf
push
and
fidiv
jmp
(bad)
call
jne
xchg
fcmovu
xor
jne
mov
jmp
lods
mov
dec
out
ficom
xchg
fstp
mov
jmp
xor
pop
and
fidiv
jne
mov
push
and
(bad)
lahf
push
and
fidiv
jmp
mov
retf
mov
call
and
inc
push
sub
jne
xchg
aad
xor
pop
inc
and
adc
in
retf
leave
xor
xchg
mov
and
xchg
stc
fidiv
jmp
fcmovu
xor
jmp
lods
mov
inc
into
rol
inc
xchg
movs
fidiv
jmp
stc
fidiv
jmp
movs
sbb
push
push
fadd
fcmovu
xor
es
xor
fcmovnu
dec
sub
das
inc
xchg
clc
fidiv
jmp
fcmovu
xor
push
cmps
loope
fwait
test
xor
fisub
not
and
cmps
or
jmp
and
inc
aad
test
in
(bad)
dec
(bad)
gs
sub
xor
mov
and
pushf
fwait
cwde
in
xor
imul
retf
clc
xor
fidiv
add
xor
push
dec
and
and
pop
sub
adc
std
lods
or
mov
enter
dec
rcr
fnstenv
push
and
cwde
adc
(bad)
inc
xchg
int
ss
(bad)
mov
jmp
pusha
sub
mov
xchg
fstp
xor
cmps
cwde
xor
fcmovnu
retf
dec
pop
pop
and
fidiv
jne
mov
push
and
into
fisttp
and
mov
scas
pusha
ret
mov
and
adc
and
jnp
retf
shr
lahf
mov
scas
dec
xchg
(bad)
xor
cli
fcmovu
xor
adc
std
sti
into
lods
out
fwait
clc
fidiv
jmp
movs
sbb
push
push
fsub
retf
(bad)
xor
jmp
js
retf
movs
xor
fisub
xor
imul
retf
sub
push
and
mov
sbb
retf
sub
retf
dec
retf
inc
retf
int
dec
and
fidiv
jmp
rcr
xor
push
and
lods
or
fisub
not
and
jne
stos
xchg
fidiv
jmp
ficom
and
jns
retf
movs
xor
fisub
xor
jecxz
fisub
loope
and
retf
mov
mov
push
and
or
dec
retf
and
xor
test
xor
popf
pusha
sub
mov
xchg
(bad)
fidiv
jmp
addr16
dec
test
fidiv
push
sbb
in
push
and
fidiv
je
and
xchg
dec
in
out
lahf
rcr
or
jae
jno
inc
add
test
and
addr16
adc
lahf
out
outs
out
fnstenv
jmp
sbb
jmp
retf
loop
jmp
(bad)
retf
pusha
ss
dec
pop
lods
adc
push
into
dec
mov
retf
mov
push
and
inc
retf
dec
retf
fcmove
push
test
xor
fcomp
call
int
dec
and
int
dec
and
mov
ret
(bad)
push
psllq
push
pop
dec
imul
mov
sbb
jnp
jmp
sub
dec
retf
jns
push
fisub
pop
(bad)
addr16
mov
xchg
sbb
pusha
ret
mov
daa
jmp
sub
dec
retf
jns
push
popf
ficomp
lahf
mov
lods
or
ja
xor
add
xor
add
xor
add
xor
push
sub
sub
fcmovu
xchg
xchg
cwde
aad
jmp
ret
aad
jmp
pop
(bad)
addr16
xchg
push
and
and
ss
sub
sti
jmp
sbb
xor
sub
fidiv
jmp
pop
leave
inc
into
rol
inc
xchg
rcr
jmp
into
sub
sbb
xor
sub
fidiv
jmp
(bad)
aaa
jmp
adc
and
xchg
dec
jmp
or
fiadd
xor
xor
imul
sub
xchg
mov
leave
push
fldcw
jmp
cmp
pusha
(bad)
and
xor
adc
cwde
ds
cmp
jle
aad
push
test
xor
fcomp
call
loope
sub
fcmove
push
push
and
and
and
ins
out
and
aaa
jmp
fcmovu
inc
rcr
shr
lahf
mov
lods
or
mov
xchg
fcmovnu
aaa
jmp
fcmovu
dec
sar
fnstenv
push
and
fcmove
push
push
push
xor
sbb
fiadd
or
inc
xchg
xor
xor
sub
fidiv
jmp
(bad)
aaa
jmp
loop
adc
xchg
mov
leave
push
fld
xchg
(bad)
aaa
jmp
fisub
lahf
std
adc
lahf
out
mov
jmp
mov
jne
gs
retf
fld
fcomp
xor
jne
mov
and
mov
dec
and
jge
addr16
fdiv
lea
cmp
retf
lods
adc
(bad)
lods
dec
retf
xor
jmp
fcmovnu
aaa
jmp
ficom
retf
lds
jmp
jge
retf
add
push
push
das
mov
push
and
pusha
ret
mov
and
fidivr
int
nop
push
and
aad
push
test
aaa
jmp
add
(bad)
lahf
loop
or
fcmovu
xor
(bad)
out
and
imul
fcmovu
xor
sub
int3
push
push
pop
ss
lods
xor
aaa
scas
dec
and
fidiv
sbb
mov
into
and
jecxz
(bad)
jmp
(bad)
into
lods
out
xchg
sbb
xor
dec
jnp
retf
shl
jle
aad
push
test
xor
fcomp
call
loop
std
(bad)
adc
push
dec
and
gs
retf
(bad)
cdq
mov
xor
xchg
leave
fidiv
jmp
and
mov
inc
inc
(bad)
pop
cmc
cmps
and
lods
mov
and
mov
inc
inc
(bad)
pop
cli
fcmovu
xor
adc
mov
xor
push
into
xor
rol
inc
xchg
(bad)
jmp
fldenv
out
fcmovu
xor
jmp
call
mov
(bad)
fcmovu
xor
add
rcr
and
and
and
inc
push
fldenv
out
fnstenv
push
scas
jo
lahf
addr16
mov
int3
mov
sbb
and
mov
inc
aad
jnp
(bad)
jo
repz
popf
popf
push
sub
xor
call
mov
retf
and
addr16
pop
pop
push
sub
inc
int
xchg
push
and
(bad)
out
lods
loop
xchg
pop
xor
mov
inc
int
xchg
push
and
aam
(bad)
gs
sub
call
int
inc
and
pop
retf
jnp
dec
out
inc
rep
leave
ficom
fwait
adc
dec
clc
enter
movs
and
addr16
inc
or
retf
mov
lods
aad
lock
mov
inc
ror
int3
xchg
push
and
xor
and
fbld
or
cmp
lahf
cmc
jl
shl
lods
pop
jmp
aad
cmp
and
in
xchg
jns
push
sub
xchg
inc
xlat
ror
or
and
xor
or
inc
(bad)
jl
or
sbb
xor
fisub
(bad)
mov
jmp
pop
jns
push
lods
out
aam
push
(bad)
shl
push
or
and
xor
pop
aad
or
mov
jne
not
retf
mov
test
xor
fcmovu
call
and
mov
push
and
fidiv
jmp
jl
retf
shl
jmp
popf
in
push
and
and
cmp
mov
jne
pop
cmp
mov
ficom
and
nop
shl
jmp
and
in
push
jbe
psubb
inc
xchg
fcmovu
xor
dec
and
outs
retf
mov
call
mov
call
popa
retf
fcmove
and
retf
retf
mov
dec
nop
and
and
fidiv
push
movs
int
push
and
aad
shl
sahf
clc
addr16
retf
and
retf
cmps
push
inc
jp
xchg
(bad)
jo
repz
leave
mov
inc
arpl
call
sbb
retf
and
addr16
inc
shl
pusha
xor
pusha
ss
dec
and
retf
dec
retf
fidivr
(bad)
arpl
push
lods
(bad)
out
lods
loop
out
in
xor
push
push
fadd
fstp
mov
jl
fidivr
(bad)
imul
lods
fnstsw
popf
pusha
rol
ficom
(bad)
xor
push
jp
xchg
(bad)
jo
repz
cdq
inc
jb
mov
inc
or
cmp
lahf
loop
clc
push
and
pusha
xor
and
int
inc
and
in
xor
push
push
fadd
into
sub
sbb
adc
popa
std
pop
and
fcmove
imul
out
lahf
shl
call
addr16
out
lods
loop
push
dec
movs
retf
dec
into
jl
dec
retf
and
ret
jb
push
lods
jecxz
call
in
repnz
frstor
lahf
loop
enter
retf
jo
push
and
fstp
arpl
jae
shl
retf
fcomp
push
into
sub
out
rol
inc
push
(bad)
inc
lods
ror
jbe
inc
call
aas
(bad)
push
and
and
retf
fidivr
push
and
fidivr
push
push
and
sub
mov
lahf
pusha
rol
adc
and
and
retf
out
(bad)
xor
fs
push
and
fnstsw
lahf
loop
retf
sub
bound
pusha
cmp
and
cmp
push
aad
jmp
inc
jae
push
movs
retf
and
jo
push
scas
pusha
ss
and
dec
jnp
add
jo
das
inc
jne
pushf
inc
call
daa
(bad)
push
rol
inc
push
(bad)
push
and
and
retf
fidivr
push
and
fidivr
inc
dec
daa
mov
dec
jae
push
lods
(bad)
out
lods
loop
push
sub
xchg
sbb
arpl
lods
or
lahf
jmp
and
and
dec
enter
mov
jae
mov
inc
retf
and
and
add
jo
das
xchg
leave
adc
lahf
dec
pop
jns
aad
push
retf
loop
hlt
and
dec
jae
and
dec
jae
and
jmp
addr16
and
dec
aad
sbb
push
movs
pop
ficom
push
and
scas
pusha
ret
gs
and
lods
std
retf
into
lods
out
mov
popa
and
xchg
in
retf
push
leave
movs
mov
daa
push
into
xchg
dec
leave
enter
adc
and
mov
and
sub
mov
fcmovne
jecxz
out
cmps
push
and
sub
aam
(bad)
cmp
(bad)
movs
pop
xor
push
and
int
inc
into
adc
inc
aad
dec
xor
movs
pop
xor
push
hlt
inc
push
sub
jge
scas
jo
sbb
in
pop
and
mov
repnz
test
sub
scas
push
(bad)
cli
sub
inc
push
std
and
repnz
pusha
(bad)
sbb
sub
jecxz
sub
or
pusha
rol
sub
sub
xchg
cwde
push
or
retf
push
shr
lods
out
push
ror
lahf
std
shr
lahf
pusha
cmc
inc
aad
jnp
(bad)
jo
repz
leave
mov
jb
dec
sub
pop
or
movs
pusha
xor
pusha
fcmove
fwait
pop
rol
ret
mov
pushf
xor
push
and
fld
or
inc
inc
(bad)
test
addr16
retf
test
fsubr
and
retf
movs
cmps
out
je
retf
push
lods
arpl
dec
push
fisub
push
(bad)
loope
in
inc
push
in
(bad)
out
jecxz
cmp
adc
pop
popa
fcomip
push
and
fisub
and
pop
cmp
arpl
outs
mov
loopne
int3
popa
push
and
xchg
lahf
loopne
popa
ffreep
sub
dec
push
fisub
rol
retf
fld
in
lods
(bad)
out
sub
retf
pop
xchg
sbb
and
mov
movs
(bad)
jl
and
or
and
xchg
fbld
mov
imul
(bad)
cmps
out
aas
add
push
sub
retf
(bad)
push
sub
and
dec
push
fisub
lds
and
and
dec
push
fisub
lds
and
retfw
cs
and
fisub
dec
jnp
cmp
push
and
movs
mov
sub
dec
pop
fcmovu
xor
std
xor
aas
sub
xor
and
rcl
ror
rcr
jae
lods
(bad)
fisubr
not
and
jl
fidivr
dec
in
out
xchg
and
jno
loop
retf
and
jg
mov
(bad)
mov
pop
xchg
pop
xchg
mov
xchg
pop
xchg
mov
xchg
pop
xchg
mov
xchg
mov
xchg
mov
add
addr16
sub
out
mov
(bad)
mov
pop
xchg
pop
xchg
mov
xchg
mov
into
mov
pop
xchg
pop
xchg
mov
xchg
inc
out
fimul
jbe
mov
xchg
and
pop
xchg
and
mov
mov
rol
ins
and
mov
call
mov
xchg
mov
das
out
mov
xchg
mov
xchg
in
pop
xchg
mov
arpl
mov
xchg
mov
jno
xchg
cmp
fisub
or
jg
and
cmp
jmp
or
stos
xchg
and
mov
xchg
pop
xchg
mov
xchg
pop
xchg
gs
cld
pop
xchg
mov
xchg
pop
xchg
mov
xchg
cmp
xchg
xchg
xchg
and
jg
mov
es
pop
xchg
sub
mov
pop
xchg
mov
out
and
ja
xchg
addr16
cld
pop
xchg
mov
xchg
pop
xchg
mov
xchg
cmp
xchg
xchg
xchg
sub
out
mov
es
pop
xchg
sub
mov
pop
xchg
xchg
aam
jmp
shl
popf
pusha
sub
es
rcr
shr
lahf
pusha
aad
aad
shr
int3
(bad)
retf
scas
(bad)
push
and
call
lods
or
rol
inc
push
leave
lods
or
and
(bad)
loopne
pop
jbe
push
lods
pusha
and
call
inc
fisubr
out
lods
in
push
int
cmp
inc
fld
int3
sub
fild
pop
push
fistp
sub
xchg
xchg
or
inc
push
scas
pusha
ret
and
sub
and
inc
push
sub
xchg
ficomp
xchg
push
ficomp
out
ret
and
cmp
int
cwde
push
and
jne
push
sub
pusha
cmp
xchg
jo
pop
cmc
jne
shl
retf
test
loopne
scas
(bad)
push
and
call
loope
lahf
std
shr
lahf
pusha
rol
jecxz
jo
pusha
sbb
jecxz
xchg
xor
xor
(bad)
jo
repz
leave
cli
inc
jae
je
inc
push
into
lahf
aad
cmp
and
or
in
cld
and
or
sub
xor
or
inc
(bad)
jl
or
push
and
push
cmps
sbb
addr16
or
js
retf
retf
popa
sbb
jne
arpl
fimul
sub
sub
daa
and
and
add
dec
sub
and
ret
mov
lods
repnz
push
and
(bad)
popf
sbb
daa
xor
push
and
mov
and
je
retf
dec
retf
es
xchg
ret
addr16
int
(bad)
push
cmps
loope
mov
ret
mov
lods
pusha
ss
xor
lahf
std
es
pop
lock
adc
iret
call
mov
push
and
xor
es
xor
and
jnp
push
and
test
addr16
mov
sbb
xor
inc
inc
and
int
inc
and
sub
lods
out
mov
sub
inc
sub
inc
fwait
push
and
js
push
and
xchg
xor
(bad)
in
ficomp
repnz
test
jecxz
mov
ret
mov
lods
std
leave
adc
int
inc
and
test
addr16
fst
and
rol
mov
mov
adc
dec
push
shl
imul
test
(bad)
loop
cld
imul
aad
or
std
leave
push
aad
fisttp
xor
lods
pop
lods
jecxz
push
aad
imul
mov
(bad)
out
repz
leave
sbb
addr16
sbb
scas
xor
ret
addr16
mov
push
and
pushf
out
push
and
cmc
inc
shr
mov
sub
inc
add
scas
(bad)
mov
addr16
pop
dec
imul
mov
push
sub
adc
and
fidiv
out
aad
ror
mov
push
dec
and
mov
push
sub
retf
ror
jnp
push
dec
and
xor
arpl
int
pop
and
int
pop
and
and
push
jbe
jbe
and
jp
dec
in
out
lahf
shl
das
or
ss
and
mov
and
and
lahf
loop
(bad)
push
xchg
js
and
and
xchg
and
and
inc
shr
and
retf
pop
mov
dec
and
xchg
and
and
lahf
lahf
shl
push
ss
fucom
out
lods
loop
sub
sub
and
cmc
js
and
and
retf
dec
dec
loope
pop
retf
xchg
(bad)
jmp
popf
mov
cmps
sbb
push
push
cmp
mov
push
scas
xor
scas
addr16
inc
pop
and
(bad)
push
scas
xor
scas
addr16
retf
sub
fisttp
and
retf
sub
mov
pop
and
fcmovnb
mov
pop
pop
inc
jmp
and
and
retf
add
scas
addr16
lahf
lahf
shl
jnp
aaa
lods
in
sti
fisubr
mov
and
fisub
sub
(bad)
and
sub
jmp
popf
mov
cmps
sbb
push
push
and
mov
inc
fimul
call
repnz
add
les
(bad)
in
or
rcr
pop
sub
imul
ficom
inc
int
test
and
pop
ficom
push
imul
xor
mov
and
mov
call
inc
fimul
pop
and
fcomi
aad
stc
dec
loopne
jae
push
sub
not
jns
popf
inc
dec
jne
push
and
and
and
loop
call
sub
int
push
sub
or
and
lods
jmp
sub
sub
mov
lods
aad
out
jecxz
mov
sbb
in
sub
jge
fld
adc
and
or
rcr
movs
loop
imul
mov
and
sub
mov
and
and
ret
push
(bad)
xchg
shr
leave
pop
and
and
xor
jo
das
xchg
leave
add
add
stc
cmp
push
loop
es
and
adc
push
and
addr16
and
lahf
loop
mov
and
adc
scas
addr16
retf
dec
retf
jl
int
push
and
addr16
ror
scas
stos
add
push
rol
inc
push
shr
and
in
(bad)
cmps
arpl
push
lods
out
lahf
jo
mov
inc
ficom
sbb
and
(bad)
push
and
cmc
js
and
and
inc
push
aad
and
loope
inc
out
or
inc
shr
pusha
cmp
adc
movs
addr16
retf
movs
and
xchg
fcmovnu
lds
int
aaa
jmp
fstp
mov
pop
and
popf
mov
lods
adc
lahf
frstor
lahf
loop
(bad)
(bad)
jne
retf
add
iret
push
popf
addr16
mov
retf
int
pop
and
ins
retf
imul
and
retf
sub
mov
cmp
dec
imul
dec
push
and
and
and
imul
inc
push
lds
jmp
out
inc
rep
leave
ret
and
imul
popa
retf
pusha
ret
and
jmp
imul
inc
shl
pusha
xor
mov
and
xor
fimul
mov
jmp
fcmovnu
xor
pop
test
xor
dec
retf
xchg
mov
fmul
mov
fwait
mov
jne
shl
inc
inc
mov
dec
and
fwait
mov
jne
mov
jecxz
inc
mov
movs
rcr
mov
(bad)
dec
adc
(bad)
xchg
(bad)
xor
jmp
lods
(bad)
out
lods
loop
xchg
fcmovu
xor
sbb
jo
push
and
fidiv
call
xor
outs
retf
out
mov
(bad)
out
lods
loop
xchg
fcmovu
xor
in
fcmovnu
xor
inc
int
adc
cmps
push
lods
out
mov
(bad)
out
fcmovnu
xor
call
shl
sub
sub
lds
in
out
lahf
shl
jae
jne
or
or
push
and
and
xor
fcmovu
inc
shr
or
xchg
(bad)
xor
sbb
and
(bad)
xor
shl
retf
lods
dec
loop
fidiv
jmp
adc
jecxz
adc
(bad)
jl
test
jmp
ret
cmp
jmp
mov
jne
push
retf
addr16
fnstenv
fidiv
inc
outs
and
inc
out
or
inc
shr
ficomp
push
lods
jecxz
aad
(bad)
retf
xchg
fisub
add
hlt
(bad)
cdq
fwait
mov
jbe
xor
and
and
mov
push
movs
test
jmp
mov
and
and
lahf
loop
xor
push
cpuid
sub
scas
(bad)
retf
and
mov
scas
js
jmp
and
fld
into
push
out
or
inc
ror
pushf
(bad)
ja
retf
dec
clc
clc
addr16
xor
pop
and
lods
xor
(bad)
jmp
bound
inc
stos
(bad)
xor
push
ficom
and
and
int
(bad)
push
and
out
lahf
shl
jb
cmp
addr16
out
or
inc
shl
(bad)
xchg
sbb
and
xchg
(bad)
xor
sbb
and
loope
dec
shl
retf
mov
call
mov
xor
pop
test
ss
pusha
sub
and
fidiv
xchg
(bad)
xor
clc
addr16
xor
pop
and
movs
and
jl
test
jmp
(bad)
push
and
test
jmp
and
and
fidiv
push
and
(bad)
out
lods
loop
xchg
fstp
xor
push
and
test
out
fcomp
xor
jmp
and
push
and
and
and
icebp
clc
addr16
cld
inc
addr16
retf
and
out
lahf
shl
jb
imul
ret
rcr
xor
pop
test
ss
pusha
sub
and
fst
lahf
loop
mov
call
pusha
retf
mov
test
ss
add
push
cmps
loope
fwait
mov
jne
and
xor
fisubr
call
jecxz
and
ret
jae
mov
jae
ds
and
(bad)
fwait
mov
jne
shl
retf
push
xchg
jle
retf
mov
int
(bad)
push
and
aas
and
and
adc
jne
and
xor
mov
jne
jge
and
out
jle
retf
mov
int
(bad)
push
and
aas
and
and
adc
cmp
lahf
frstor
lahf
loop
call
push
int
(bad)
push
and
xor
mov
sbb
ror
popf
push
and
jo
rep
leave
ficom
and
fwait
pop
dec
pusha
sub
inc
shl
inc
xchg
rcr
xor
push
cmps
in
inc
int
xor
fisubr
out
fidiv
sbb
ficomp
push
test
ds
and
push
cmps
loope
fwait
mov
jne
popa
addr16
or
and
fstp
(bad)
ja
adc
xor
push
and
movs
retf
dec
enter
leave
jle
and
ds
scas
retfw
pusha
ss
fstp
mov
push
and
and
(bad)
addr16
clc
(bad)
pop
gs
sahf
retf
popf
add
and
mov
inc
ror
and
and
and
retf
clc
addr16
clc
(bad)
das
gs
and
retf
addr16
out
push
dec
and
inc
push
sub
hlt
cmc
push
and
jp
push
rol
inc
xchg
leave
(bad)
jmp
ficom
std
aaa
dec
retf
fstp
jmp
jne
pusha
sub
repnz
pop
retf
shl
push
and
and
cmp
addr16
std
(bad)
stos
sbb
push
jbe
mov
and
int
push
and
pop
retf
jnp
(bad)
jo
rep
leave
ficom
and
scas
xchg
push
call
aas
(bad)
popf
pusha
sub
or
jl
test
loop
fidiv
push
jne
cmp
fcmovu
dec
shr
movs
or
fwait
mov
jne
or
retf
and
call
sbb
fwait
mov
jne
into
cmps
in
inc
int
cmp
fisubr
cli
fcmovnu
xor
sbb
ficomp
push
test
ds
sbb
push
cmps
loope
jl
dec
dec
push
and
and
retf
test
loop
fidiv
push
and
fnsave
clc
addr16
retf
jne
push
retf
addr16
int
sub
and
dec
cli
fcmovnu
xor
push
and
addr16
addr16
and
mov
ficom
and
and
xor
and
pusha
mov
and
test
jmp
pushf
jmp
fs
sub
jmp
pop
fxch
bound
dec
retf
fstp
sbb
xor
push
and
mov
and
mov
int
mov
and
shl
push
and
sbb
push
lods
fnstsw
call
jae
sub
and
(bad)
push
and
in
or
shl
and
(bad)
fwait
sbb
push
jbe
popf
lods
or
scas
push
popf
ins
rcl
and
push
aaa
call
(bad)
div
push
and
(bad)
push
and
and
fisubr
and
addr16
fs
and
mov
scas
pop
ret
int
sub
mov
call
jne
xor
fidiv
std
dec
push
push
cmps
pop
(bad)
push
push
cmp
pop
fdiv
jne
sub
addr16
xor
jne
outs
push
and
into
aam
push
sub
pop
fdiv
jne
(bad)
clc
addr16
xor
jne
dec
push
and
movs
or
pop
sub
arpl
dec
push
sti
addr16
retf
jne
ret
retf
sub
sub
mov
retf
in
jmp
pop
fdiv
jne
xchg
sub
(bad)
cmps
pop
(bad)
push
sub
dec
out
fisubr
dec
mov
mov
jne
xchg
loope
xor
sub
add
es
xchg
mov
call
ficomp
call
xchg
cwde
js
fcmovu
or
daa
test
sub
xor
jb
jg
fcmovnu
xor
jmp
adc
dec
jmp
lods
mov
jmp
fisub
jmp
jb
pop
sti
addr16
xor
jb
push
and
lods
adc
std
lods
or
fidiv
xor
retf
jne
stos
xchg
(bad)
jb
mov
ficom
(bad)
aas
sbb
push
test
or
fcmovu
call
int
sub
mov
dec
std
cli
es
mov
call
jne
pop
sbb
xor
fidiv
mov
fidiv
mov
fidiv
mov
fidiv
mov
(bad)
sub
outs
fcmovnu
xor
call
in
xor
daa
mul
or
fimul
data16
xor
inc
dec
mov
push
and
(bad)
push
and
out
sbb
and
xor
jne
stos
sub
test
cmps
fcmovnu
xor
jmp
push
and
xor
call
sbb
adc
ficom
(bad)
lahf
pop
retf
shl
push
and
and
cmp
addr16
std
(bad)
xor
retf
jnp
(bad)
jo
rep
leave
ficom
and
scas
mov
test
popf
pop
rcl
and
shl
fisubr
push
rol
inc
xchg
aad
xor
pop
test
xor
fcmovu
call
int
in
fimul
sub
pop
push
and
or
xchg
test
retf
pop
enter
dec
push
and
(bad)
sub
pop
int
in
rcl
and
and
push
lods
aad
(bad)
cmp
popa
sbb
inc
inc
fcmovne
mov
xchg
pusha
xor
pop
adc
inc
out
and
inc
shr
xchg
(bad)
iret
in
fcmovnu
xor
out
in
inc
test
xor
fcmovu
call
loope
push
retf
and
fcmovnb
mov
pop
nop
sti
(bad)
int3
mov
push
and
or
and
mov
inc
dec
in
cmp
dec
in
fcmovnu
xor
push
and
(bad)
fist
and
leave
xor
fisubr
pop
pop
push
xlat
inc
dec
in
cmp
dec
in
fcmovnu
xor
push
and
loop
pop
and
test
in
fcmovnu
xor
push
and
fidiv
push
and
(bad)
out
lods
loop
xchg
(bad)
xor
sub
ficom
jl
lods
cmp
mov
jne
sub
fidiv
out
or
inc
rcl
or
jle
aad
lods
das
xchg
leave
xor
push
call
pop
(bad)
jl
int
das
and
movs
or
jl
dec
retf
aad
inc
retf
loope
jo
pusha
cmp
lods
or
inc
int
repnz
and
js
lahf
aad
or
jne
push
cs
dec
ficomp
push
and
test
fidivr
push
push
sub
push
(bad)
xor
imul
mov
inc
int
xor
fisub
xor
and
daa
mov
inc
int
cmp
push
into
cmp
push
retf
addr16
sbb
push
dec
and
mov
ficom
and
push
and
xor
fst
sub
sar
xchg
(bad)
jo
rep
leave
(bad)
adc
scas
xchg
push
call
pushf
xor
xor
and
mov
inc
ror
daa
push
and
and
mov
addr16
repnz
and
and
push
test
retf
ficomp
cs
fucom
out
lods
loop
loopne
and
ficom
inc
int
cmp
fidivr
adc
inc
xchg
(bad)
xor
aam
mov
in
fcmovu
inc
out
rol
inc
xchg
aad
xor
adc
ficomp
jmp
sbb
mov
addr16
xor
lahf
fcmovu
dec
sar
and
mov
fwait
mov
jne
or
or
and
dec
stc
mov
push
dec
and
pusha
enter
mov
jne
in
lods
fidiv
jmp
cmp
jle
enter
mov
call
loope
shl
fcmove
popf
mov
sbb
xchg
dec
es
jle
push
jb
jmp
pop
jmp
jne
mov
sub
lds
sbb
push
add
and
retf
jno
inc
pusha
sub
and
mov
pusha
lds
int3
inc
into
push
and
pusha
lds
int3
ja
push
and
jno
dec
pop
or
inc
pusha
jno
sbb
pop
fisubr
jbe
test
jo
and
and
cdq
inc
sub
and
and
cdq
inc
sub
mov
sbb
inc
jno
dec
sbb
fisub
retf
jbe
inc
jno
dec
gs
retf
and
fwait
mov
jne
stc
mov
sub
jmp
dec
dec
int3
jle
enter
mov
jmp
xor
sub
fcmove
push
push
push
xchg
(bad)
xor
push
(bad)
xor
jmp
movs
retf
and
fbstp
xchg
in
call
loope
jle
enter
xor
push
and
dec
daa
push
and
adc
push
int3
pop
leave
push
and
and
retf
jne
push
retf
addr16
int
and
fld
int3
jle
push
and
sub
es
ss
movs
cwde
int3
jmp
dec
push
(bad)
xor
push
and
fidiv
push
and
fidiv
std
cmp
xor
adc
fidiv
jmp
xor
in
fcmovu
repz
int
xor
stos
and
xor
jl
dec
retf
(bad)
xor
fisub
inc
xchg
and
in
inc
dec
and
xor
lahf
fst
lahf
loop
jl
and
and
retf
fimul
and
pop
jbe
jl
fcmovu
dec
shr
movs
or
push
pop
(bad)
push
push
xor
and
in
inc
dec
daa
cdq
(bad)
mov
xor
lahf
frstor
lahf
loop
mov
xchg
and
in
inc
jbe
sbb
fcmovu
dec
shr
lods
adc
jle
mov
test
ss
fcmovu
call
loope
xchg
shr
push
and
fidiv
push
and
mov
in
fcmovu
cwde
jmp
and
and
mov
int
repnz
and
push
and
and
adc
push
int3
(bad)
retf
push
and
fidiv
xchg
and
in
inc
jbe
and
fimul
sub
and
and
fcmovu
inc
ror
out
push
and
and
retf
jne
push
retf
addr16
int
and
and
ss
test
retf
fimul
and
(bad)
cmps
retf
cmps
loope
xchg
retf
push
and
and
retf
adc
push
dec
and
mov
ficom
and
push
and
retf
fucom
out
lods
loop
pop
enter
not
retf
and
mov
ficom
and
push
and
ret
int3
cld
pop
and
addr16
adc
push
dec
and
mov
ficom
and
retf
push
and
and
retf
adc
push
dec
and
mov
ficom
and
rcr
push
rol
inc
xchg
int
xor
repz
cmps
or
jne
out
clc
addr16
xor
das
and
popf
ja
and
mov
inc
shr
ficomp
push
dec
and
xor
fidiv
and
and
and
retf
adc
push
dec
and
mov
ficom
and
retf
push
and
and
or
jne
and
retf
xchg
loope
dec
loope
add
push
into
jnp
stos
and
xor
jle
enter
call
retf
add
push
and
pop
retf
cmp
add
addr16
adc
push
dec
and
mov
ficom
and
sar
test
and
enter
mov
push
and
and
push
and
pop
retf
(bad)
out
lods
loop
sub
fidiv
aad
lods
das
inc
jne
pushf
inc
call
jb
and
ss
loop
mov
pop
int
call
and
shr
shr
mov
or
and
(bad)
jecxz
retf
out
(bad)
jae
retf
std
and
lods
(bad)
out
lods
loop
dec
jle
or
ror
daa
retf
jae
test
movs
loop
or
lods
xor
(bad)
call
lods
fnstsw
jmp
fiadd
movs
loop
adc
addr16
adc
push
lods
mov
mov
inc
int
stc
push
and
push
scas
push
and
and
xor
push
and
fidiv
push
ficom
and
push
and
xor
fisubr
arpl
adc
jmp
and
dec
je
and
xor
call
std
(bad)
push
dec
mov
push
and
dec
clc
push
and
lods
or
int
cmp
xchg
std
(bad)
(bad)
fcmovnu
xor
jmp
cmp
cwde
fwait
mov
jne
mov
fidiv
ret
(bad)
push
push
inc
out
or
inc
rcl
lods
jmp
fisubr
xor
call
mov
jne
jle
leave
mov
jae
sahf
and
lods
xor
(bad)
(bad)
fcmovnu
xor
push
lods
(bad)
out
lods
loop
mov
int
clc
push
and
(bad)
(bad)
jo
repz
sub
and
and
mov
fwait
sbb
xor
lods
cmp
aad
or
(bad)
movs
cmp
dec
and
retf
int
and
mov
push
sub
inc
push
fnstenv
popa
and
mul
sub
imul
retf
push
and
int
cmp
and
cmp
pusha
fstp
jl
fidivr
push
and
mov
mov
and
test
jmp
retf
xor
retf
or
lahf
jecxz
mov
and
and
mov
inc
dec
and
dec
jmp
mov
lahf
mov
into
ret
popf
bound
inc
xchg
fstp
jmp
fcmovu
and
aad
sub
mov
lods
or
mov
jne
xchg
fstp
jmp
and
push
ss
mov
jne
and
mov
push
and
lods
or
dec
ficom
ficom
and
movs
and
ds
xor
(bad)
and
inc
lods
ror
jbe
inc
scas
push
ret
xor
ret
lahf
fst
lahf
loop
and
and
iret
daa
in
and
pusha
fiadd
adc
inc
shl
and
push
ficom
inc
int
call
and
div
(bad)
sub
inc
push
fisubr
hlt
push
and
rol
scas
pusha
ss
jnp
add
jo
das
xchg
leave
sub
push
and
push
ret
pop
jae
lods
fucom
out
lods
loop
loope
je
push
jae
push
adc
in
shr
adc
cmps
cmp
and
push
jl
jmp
loope
add
push
test
ss
fcmovu
call
gs
dec
retf
pop
retf
int
es
fld
dec
and
retf
and
xor
push
and
fidiv
adc
and
and
fidiv
mov
addr16
sub
retf
adc
push
rol
inc
xchg
fstp
xor
(bad)
pop
and
push
jl
or
mov
mov
or
and
inc
out
rol
inc
xchg
fstp
xor
xchg
addr16
and
and
loope
ret
(bad)
push
adc
jl
int
es
int
in
fcmovu
xchg
lahf
frstor
lahf
loop
and
adc
retf
jne
jmp
and
and
xor
lods
leave
mov
test
retf
ficomp
jmp
in
dec
hlt
and
and
and
frstor
lds
cmps
xor
fcmovu
retf
adc
lahf
loop
dec
jmp
es
and
fidiv
(bad)
fist
retf
loope
xchg
cwde
fnstenv
jmp
dec
push
es
and
and
mov
and
inc
out
and
and
retf
retf
and
fidiv
jmp
push
sub
jnp
mov
lods
mov
in
fcmovu
and
test
cwde
cli
addr16
xor
in
fcmovu
xor
jmp
and
fidiv
push
and
mov
call
and
ss
int
out
and
and
lahf
loop
dec
push
(bad)
xor
push
and
fnstenv
jmp
mov
ss
sub
and
retf
and
fidivr
dec
in
out
push
jo
das
xchg
leave
sbb
imul
jb
push
and
(bad)
repnz
loop
out
lods
loop
fisub
dec
ficom
pop
and
jb
jae
retf
lods
(bad)
imul
mov
push
and
aad
lahf
fisttp
lahf
loop
jge
sub
and
inc
inc
retf
inc
or
jl
test
cli
jne
and
in
fadd
nop
loope
and
lods
(bad)
sti
(bad)
int3
cwde
retf
dec
iret
inc
int
loope
and
lods
or
push
and
ret
stc
lods
or
fwait
pusha
leave
call
lods
or
inc
fxch
scas
xor
ss
pusha
std
dec
sub
xor
mov
xchg
pop
fld
fs
cmps
mov
das
push
fild
ins
loope
and
shr
rcr
shr
lahf
adc
ficom
rol
inc
push
cmc
lods
or
jl
popf
ficom
and
lods
(bad)
fisubr
fs
xor
and
int
cmp
or
push
lods
fnstsw
lahf
loop
fwait
jmp
jle
or
and
jne
test
movs
retf
and
jne
push
ficom
jle
mov
push
dec
and
in
and
and
retf
ret
(bad)
lahf
shl
popf
push
sub
pushf
xchg
loop
mov
and
lods
or
push
and
and
jb
and
xchg
retf
test
cmps
jne
(bad)
mov
in
call
fucom
out
lods
loop
push
test
jp
lods
aad
(bad)
sub
jne
dec
or
(bad)
cmps
jne
(bad)
mov
lods
cmp
arpl
retf
popa
mov
inc
int
cli
push
and
loop
pop
and
popa
retf
scas
(bad)
mov
pusha
add
ret
xchg
(bad)
loop
pusha
and
and
retf
pusha
es
and
test
stos
jne
retf
dec
jmp
cmps
mul
scas
fs
sub
mov
into
and
sbb
mov
jbe
retf
or
push
sub
mov
lahf
arpl
dec
stc
pop
outs
retf
push
push
(bad)
adc
retf
push
(bad)
dec
or
push
movs
retf
and
int
cmp
int
cmp
and
and
movs
retf
and
jp
dec
in
out
lahf
shl
push
ret
jl
cmp
xor
cmp
sub
push
cmp
xor
and
retf
and
pusha
and
out
and
int
cmp
dec
and
retf
loope
lahf
fst
sub
sar
add
jo
das
inc
call
pop
(bad)
dec
or
xor
push
ficom
jmp
and
cmp
inc
repz
add
out
and
inc
ror
mov
inc
ficom
jmp
sub
and
xchg
aad
lods
das
xchg
leave
sub
push
lods
fucom
out
lods
loop
sar
or
push
test
xor
pusha
ss
dec
and
retf
dec
retf
fidivr
(bad)
jae
retf
in
adc
shr
push
xor
jmp
fxch
mov
(bad)
push
sub
cmp
xor
pop
and
(bad)
loop
loop
arpl
int
cmp
jp
aad
lods
das
xchg
leave
xor
pusha
cmp
jne
sbb
adc
push
and
lods
or
out
rol
inc
push
aad
or
jle
and
xor
push
int
out
and
adc
std
sbb
(bad)
push
jne
mov
arpl
hlt
out
and
fidivr
push
and
fidivr
push
and
lods
(bad)
cli
lods
loop
mov
in
out
lahf
shl
call
pop
pop
retf
sbb
lock
jp
and
or
push
lods
pusha
xor
loop
and
addr16
jmp
in
and
loop
push
and
loop
push
and
dec
retf
leave
mov
int
out
and
and
inc
fldcw
and
ficom
and
addr16
retf
fnstenv
xor
lods
(bad)
out
lods
loop
push
fnstcw
(bad)
pushf
imul
and
push
scas
popa
out
adc
and
lahf
lahf
shl
scas
js
test
push
(bad)
js
aad
out
jecxz
imul
mov
sbb
popf
pusha
sub
or
cwde
lahf
jmp
inc
ficom
(bad)
jae
retf
loope
xchg
retf
mov
xor
xor
movs
or
js
retf
cmps
or
inc
lea
xchg
cmps
mov
and
push
retf
lods
xor
sbb
sbb
aaa
inc
push
xor
shr
xor
and
lods
std
leave
push
sub
lds
and
cmp
inc
and
rcr
jne
mov
push
and
frstor
push
lods
aad
out
jecxz
(bad)
jp
xchg
dec
out
inc
repz
leave
out
inc
jae
inc
dec
sub
cs
dec
popf
xor
push
and
pusha
es
pusha
aad
(bad)
pop
bswap
push
lods
pusha
xor
int
(bad)
repnz
lahf
pusha
lds
aad
mov
hlt
ret
sub
pusha
jecxz
and
shl
add
xchg
into
and
in
rcr
and
xchg
aad
inc
adc
arpl
arpl
push
das
xchg
push
aad
sub
fcmovne
push
into
ins
lds
sbb
inc
out
pushf
aas
retf
mov
dec
rol
out
pushf
aas
retf
lahf
test
loope
cmp
lahf
jo
inc
shl
ds
dec
or
push
and
and
lods
jmp
pusha
fcomi
push
fst
popf
pusha
rcl
inc
lods
shl
daa
retf
add
push
jbe
popf
test
pop
xchg
push
lods
aad
out
jecxz
mov
fidiv
and
fdiv
lock
mov
inc
shr
ficomp
(bad)
hlt
fidiv
aad
(bad)
mov
shl
retf
fnstenv
sbb
scas
ds
in
push
and
js
push
and
fdiv
push
rol
inc
xchg
std
fidiv
jmp
fcomp
mov
jmp
fcmovu
xor
adc
int
ds
fidiv
popf
test
sub
mov
lods
or
push
sub
retf
add
push
movs
jecxz
imul
dec
(bad)
fcmovu
xor
jmp
and
dec
ret
cmc
xor
inc
int
mov
fisub
es
and
push
push
push
ficom
jmp
into
addr16
into
mov
ficom
and
loope
mov
jmp
fstp
xor
jne
pop
std
addr16
retf
loope
xchg
pop
add
retf
push
and
fdiv
inc
and
sub
or
and
cmps
outs
(bad)
fdiv
xchg
jmp
mov
icebp
xchg
(bad)
xor
push
push
dec
clc
imul
jmp
in
fidiv
jmp
lods
fnsave
and
fmul
inc
ja
out
pushf
aas
retf
lahf
test
loope
cmp
lahf
mov
xor
xchg
loop
popf
fwait
cwde
and
mov
fwait
cwde
and
and
and
xor
jmp
fcomp
dec
push
and
fidiv
jmp
cmp
fidiv
jmp
js
mov
jne
fidivr
popf
add
lock
mov
inc
shl
dec
push
and
fidiv
scas
mov
repz
jmp
cmps
(bad)
jmp
leave
fidiv
jmp
and
mov
dec
rcl
push
retf
es
push
and
fidiv
push
and
pop
retf
pusha
(bad)
adc
mov
lds
scas
mov
inc
xchg
leave
fidiv
jmp
sbb
pop
retf
push
push
dec
outs
daa
and
fidivr
into
mov
test
cmp
fcomp
call
loope
xchg
retf
push
cwde
push
and
fdiv
xchg
sbb
arpl
lods
or
jmp
and
sub
iret
fidiv
jmp
fcmovu
xor
push
and
and
xor
sbb
fidiv
xchg
aad
xor
into
ss
xchg
and
int
in
fcmovu
xchg
lahf
mov
fidivr
fcmovu
xor
mov
scas
mov
call
int
ds
lods
cmp
aad
or
nop
aad
call
and
fidiv
test
retf
ficomp
call
(bad)
xor
xchg
(bad)
xor
sub
lds
dec
mul
push
and
(bad)
push
cmps
loope
lahf
aad
cmp
and
dec
retf
and
ret
add
push
lods
mov
xor
jmp
and
shl
jmp
fcmovu
jg
fcmovu
xor
push
lods
aad
out
jecxz
mov
int
jmp
out
fcmovu
xor
push
lods
aad
out
jecxz
dec
mov
and
movs
rcl
dec
jle
or
ror
and
push
jb
push
adc
xor
or
inc
shl
pusha
xor
out
rol
inc
xchg
fstp
xor
mov
stos
iret
mov
test
xor
(bad)
jecxz
retf
and
retf
fidiv
fidiv
pop
and
fnsave
xchg
shr
(bad)
(bad)
mov
sub
push
and
push
movs
int
loope
fisub
jle
int3
mov
dec
retf
and
leave
push
and
fidiv
loope
dec
retf
in
or
ror
daa
retf
jae
test
lods
fucom
out
lods
loop
mov
fdiv
daa
(bad)
cs
pop
(bad)
cmps
(bad)
mov
scas
(bad)
push
scas
and
pop
and
test
adc
mov
inc
rcl
inc
push
sub
and
scas
jo
fwait
jno
iret
push
lods
mov
jmp
fiadd
rol
inc
xchg
pop
fdiv
(bad)
push
add
push
lods
mov
xor
jmp
and
test
jmp
fiadd
das
and
daa
and
lahf
mov
aaa
jmp
add
aaa
jmp
fcomp
xor
push
lods
mov
xor
jmp
and
test
jmp
fiadd
das
and
dec
fdiv
pop
test
enter
pop
sahf
fcomp
xor
push
and
and
retf
mov
jmp
(bad)
fwait
mov
jne
sbb
or
retf
int
xor
and
aaa
jmp
int3
addr16
int3
mov
dec
daa
retf
int
loope
fimul
add
arpl
jae
add
int3
mov
and
fld
int
aaa
jmp
and
(bad)
mov
int
jmp
fidiv
jmp
fcomp
xor
jmp
fcomp
xor
jmp
xchg
fdiv
out
fcmovu
dec
rol
fidiv
inc
int
call
daa
(bad)
adc
and
retf
fnstenv
fidiv
lea
and
xor
fcomp
xor
call
cmps
add
push
int
cmp
fisubr
xchg
rcr
fist
and
test
scas
fcmovnu
xor
push
and
loop
inc
and
(bad)
push
loop
cs
and
int
jmp
sar
push
and
fidiv
shl
and
lahf
fisttp
lahf
loop
dec
scas
fcmovnu
xor
jmp
sbb
dec
scas
fcmovnu
xor
push
dec
add
mov
call
and
and
and
and
fdiv
push
and
and
scas
jmp
fiadd
ficom
mov
jle
int3
mov
test
ss
mov
loope
shl
and
xchg
sub
(bad)
jmp
and
and
or
dec
and
add
retf
dec
aaa
jmp
dec
fdiv
fisubr
mov
push
and
and
retf
cwde
pop
jmp
fcmove
bound
dec
retf
and
retf
and
push
test
ss
int
jmp
and
int3
mov
test
ss
das
dec
xor
sub
fcmove
push
push
push
dec
mov
fdiv
pop
(bad)
mov
fidiv
out
lods
loop
sbb
fcmove
xchg
retf
push
and
fidiv
push
and
and
xor
nop
xor
ss
fdiv
push
and
fidiv
pop
(bad)
aam
and
es
jbe
popf
popf
js
jne
aaa
call
sub
shl
ret
add
lods
lahf
jo
xor
ss
lods
lahf
jmp
retf
out
lahf
jo
inc
out
rol
inc
push
leave
lods
or
push
and
jo
sbb
jo
pop
cmc
sub
shl
sbb
xor
and
jecxz
or
mov
inc
push
int
int3
xchg
shr
out
and
cmp
call
loope
jmp
cmps
in
inc
int
xlat
push
and
lods
or
mov
and
mov
js
push
and
xchg
(bad)
int3
adc
xchg
lahf
jmp
mov
and
pusha
xor
popa
and
sbb
sub
shr
and
cmp
call
gs
dec
retf
add
inc
out
adc
inc
ror
pushf
(bad)
out
retf
pusha
xor
int
or
cmp
push
lods
(bad)
out
lods
loop
push
fnstsw
dec
in
out
lahf
rcr
mov
jae
inc
dec
sub
jbe
out
and
inc
shl
jbe
fcmovu
mov
and
ret
popf
lds
xchg
cdq
lds
(bad)
(bad)
inc
dec
dec
and
xor
sub
lds
lods
fucom
out
lods
loop
jmp
fcmove
cmps
aaa
and
sub
arpl
jg
(bad)
jmp
cmp
and
loop
je
and
xor
push
movs
shl
and
lds
(bad)
(bad)
inc
jae
outs
or
push
or
jmp
and
sub
arpl
jg
(bad)
jmp
cmp
xor
into
sub
mov
movs
retf
and
in
or
shl
and
retf
jae
popf
push
sub
lods
lahf
frstor
lahf
loop
xor
and
retf
cmp
push
popf
adc
push
and
fst
lahf
aam
add
movs
not
and
dec
ret
and
inc
int
cmps
jmp
dec
add
push
and
and
xor
push
dec
loope
push
and
and
xor
ss
lods
xor
(bad)
jl
dec
retf
dec
retf
gs
(bad)
push
cmp
push
lods
out
rcr
dec
retf
mov
call
and
xor
mov
jae
and
int
(bad)
push
and
and
retf
aaa
inc
out
rol
inc
xchg
sar
xor
leave
fcmovu
inc
sar
xchg
(bad)
jo
rep
leave
dec
adc
call
mov
retf
adc
fcmove
lahf
fst
lahf
loop
cmp
js
dec
rcr
inc
retf
int
or
test
adc
lods
pop
sbb
xor
lahf
loop
ss
das
add
cmp
daa
and
mov
inc
ror
sub
and
and
xor
out
lods
loop
push
dec
and
xor
or
and
aaa
jmp
int3
addr16
int3
mov
dec
daa
retf
int
out
fimul
add
sbb
dec
into
pop
and
(bad)
mov
int
rcl
and
lods
or
jmp
xchg
fdiv
call
sub
sbb
dec
ins
jmp
inc
xchg
(bad)
xor
or
inc
retf
mov
call
jne
inc
cmp
xor
jmp
fimul
das
dec
retf
popa
mov
call
(bad)
cmp
push
cmps
loope
lahf
fisttp
lahf
loop
dec
scas
fcmovnu
xor
shl
and
push
and
fidiv
shl
and
scas
sbb
push
rol
inc
xchg
movs
fidiv
xchg
popf
(bad)
out
ficom
jmp
popf
(bad)
jl
dec
jmp
test
jmp
and
ds
dec
sahf
and
retf
lea
jmp
and
fld
ficom
mov
jle
int3
mov
test
ss
dec
cmp
push
cmps
loope
shl
and
gs
and
xor
jmp
and
jecxz
or
dec
and
ds
xor
fisub
xchg
cmps
fidiv
fisubr
lds
dec
and
repnz
and
retf
mov
jmp
jmp
retf
loop
jnp
and
and
dec
xchg
fidiv
jmp
sbb
xor
fisub
test
cdq
(bad)
mov
xor
pop
in
dec
mov
and
fidiv
jmp
cmp
retf
mov
xor
jmp
fisubr
lahf
loop
jg
fcomp
xor
push
dec
mul
push
and
and
mov
jae
jp
and
sub
arpl
and
aas
and
aaa
jmp
jbe
or
(bad)
jbe
mov
int
or
fisub
inc
xchg
mov
int
inc
jae
jg
fcomp
xor
jmp
fisttp
lahf
loop
and
frstor
lahf
loop
dec
mov
fidiv
fwait
mov
jne
aad
and
xor
nop
xor
or
and
inc
rcr
nop
outs
jmp
fisub
mov
and
aaa
jmp
in
out
push
jo
das
xchg
leave
xor
push
call
daa
(bad)
out
lods
loop
(bad)
outs
aas
retf
pusha
ds
aas
and
inc
inc
daa
xor
(bad)
(bad)
and
and
xor
rcl
and
jno
pop
ja
out
add
fld
jbe
mov
push
fnstenv
push
jae
std
mov
and
and
jecxz
xor
push
and
and
cmp
jne
and
int
fst
and
sub
adc
(bad)
cli
lods
loop
dec
jle
or
rcr
div
sub
shl
sub
dec
out
daa
push
xlat
xchg
frstor
cmps
fstp
arpl
mov
push
and
lods
(bad)
and
and
retf
dec
retf
test
add
and
paddd
and
and
mov
jne
dec
add
lods
xor
(bad)
push
dec
and
jmp
mov
mov
mov
push
into
cmp
push
ficom
jmp
aas
and
inc
fs
pusha
xor
in
out
push
jo
das
inc
jbe
popf
popf
push
sub
stc
xchg
rol
push
and
inc
push
and
and
retf
lahf
jo
cdq
inc
int
xor
fisub
mov
inc
and
stc
xor
call
dec
in
out
push
jo
das
xchg
leave
add
xor
shl
jne
and
imul
sub
(bad)
bnd
stos
(bad)
and
retf
lods
(bad)
imul
and
and
retf
test
bnd
(bad)
(bad)
and
mov
and
dec
in
out
push
jo
das
scas
dec
ds
or
push
and
jne
mov
aad
or
shl
or
pusha
and
test
adc
and
push
fcmovu
inc
shl
and
or
iret
and
retf
ins
in
push
and
and
retf
mov
jbe
and
shl
push
and
and
ja
rcr
xor
(bad)
int3
nop
into
push
and
and
retf
aad
jmp
xor
retf
ret
inc
xchg
mov
jecxz
fwait
aad
xor
push
movs
sbb
push
push
fadd
cmps
retf
mov
fisubr
jle
int
push
dec
mov
push
and
fidiv
push
and
fimul
cmp
das
mov
dec
retf
mov
sub
addr16
fnstenv
jmp
cmp
retf
adc
lahf
jecxz
retf
fnstenv
jmp
call
xchg
aad
xor
xchg
daa
and
push
adc
dec
ror
loope
push
and
fidiv
adc
(bad)
xor
scas
and
dec
pop
out
and
xor
jb
fimul
sub
loop
fimul
sub
retf
xchg
dec
mov
fidiv
push
sub
lds
(bad)
dec
adc
fnstenv
xchg
fimul
arpl
lods
or
jl
dec
pop
fwait
fs
xor
jo
fimul
xor
mov
lods
jmp
fisubr
jge
mov
mov
xor
repnz
call
jecxz
push
and
shl
fcomp
xor
push
and
fnstenv
jmp
jle
retf
cwde
xor
sbb
jecxz
jmp
movs
retf
pop
push
and
fnsave
(bad)
addr16
xor
push
and
cmps
ja
fstp
xor
xor
out
shl
or
iret
in
adc
(bad)
aas
out
lods
sbb
loop
sub
fisubr
dec
push
jecxz
lock
and
fs
imul
mov
jne
shl
retf
bswap
push
rol
inc
xchg
mov
jecxz
xchg
(bad)
xor
(bad)
addr16
xor
add
addr16
fnstenv
jmp
xor
and
and
dec
jmp
fst
and
lods
or
mov
jne
fs
retf
fnstenv
fidiv
popf
xor
mov
test
ss
fcmovu
call
loope
fwait
mov
jne
cmp
mov
ret
inc
xchg
mov
jecxz
xchg
(bad)
xor
inc
test
ss
fcmovu
call
mov
call
loope
jl
test
jmp
ficom
and
and
pushf
(bad)
addr16
xor
je
fimul
sub
sbb
test
jmp
call
lods
dec
out
fstp
xor
nop
push
and
addr16
or
iret
and
retf
fnsave
jmp
addr16
retf
fnstenv
jmp
xor
dec
loopne
push
retf
aad
push
and
fidiv
push
and
fidiv
push
and
fidiv
mov
fidiv
call
xor
fidiv
call
sub
inc
mov
fidiv
jmp
ficom
inc
xchg
(bad)
xor
(bad)
addr16
xor
add
lods
cmp
aad
or
mov
jne
aad
and
ds
fcmovnu
xor
push
and
fidiv
inc
dec
and
mov
movs
and
(bad)
retf
fnstenv
jmp
rcr
xor
push
and
fidiv
push
and
fidiv
out
fcmovu
inc
push
and
dec
retf
mov
call
fidiv
push
dec
and
fst
and
and
cmp
(bad)
xor
out
fidiv
jmp
out
or
mov
fidivr
fstp
xor
push
movs
jecxz
cmp
in
or
and
jb
loopne
dec
repz
rol
push
and
addr16
add
addr16
mov
movs
retf
and
jne
push
dec
and
retf
dec
retf
aaa
retf
int
push
and
xor
dec
cli
popa
and
push
jae
jne
jns
lods
scas
sbb
retf
ret
in
(bad)
out
lods
loop
adc
xor
fidiv
and
pop
mov
int
ficom
and
lods
or
push
and
and
inc
xchg
jmp
int
pop
and
pusha
xor
and
mov
and
jne
push
fnsave
lea
and
retf
ret
loope
xor
push
lds
push
aad
and
int
ficom
and
int
push
and
and
dec
(bad)
fcmovnu
xor
fwait
pusha
cmc
call
sahf
xor
lahf
jecxz
push
xor
nop
cmp
mov
inc
ror
push
mov
jle
int
push
dec
aas
cmp
retf
push
and
fidiv
lahf
loop
sbb
int
retf
aam
push
dec
and
push
movs
int
repnz
dec
rol
xor
dec
cli
xor
push
jbe
popf
test
lods
(bad)
out
lods
loop
icebp
lods
mov
inc
ror
retf
dec
mov
ja
retf
jecxz
loope
and
push
dec
xor
push
and
and
retf
fnsave
fidiv
mov
and
or
sbb
mov
mov
fisub
pop
(bad)
addr16
xor
xchg
retf
push
and
jne
push
and
mov
call
loope
xchg
sbb
inc
push
and
int
outs
fcmovu
inc
push
fldcw
jge
fnstenv
push
and
mov
call
loope
lahf
fst
lahf
loop
and
sub
or
sbb
mov
mov
fisub
pop
(bad)
addr16
ss
dec
das
and
(bad)
(bad)
addr16
dec
(bad)
sub
loope
pop
in
into
xchg
inc
fxch
lahf
fst
sub
jmp
and
mov
push
and
and
retf
fnsave
fidiv
inc
retf
xchg
loope
inc
shr
sar
and
retf
and
sub
fisub
cmp
call
cmps
and
addr16
or
iret
and
retf
pop
lods
push
and
out
lahf
rcr
adc
jb
data16
sbb
pop
(bad)
addr16
or
iret
and
retf
push
aad
and
fidiv
lahf
aad
cmp
and
inc
fcom
and
in
xchg
lods
and
push
movs
jecxz
cmp
push
fs
fnstcw
fidiv
test
sbb
xor
push
and
aad
out
jecxz
xchg
leave
shl
sbb
aad
shr
ficomp
push
test
ss
ficomp
push
lods
mov
lds
fidiv
mov
fidiv
mov
fidiv
xchg
sbb
xor
lahf
lods
lods
inc
lahf
hlt
shl
lahf
in
and
xlat
fbld
or
cmp
inc
ficom
jb
addr16
retf
sbb
addr16
(bad)
(bad)
addr16
mov
scas
cwde
out
clc
fcmovu
inc
stos
sbb
cmp
fidiv
stos
int
xor
pop
and
ret
inc
xchg
add
jecxz
not
retf
mov
test
ss
pop
xor
push
test
ss
out
sub
push
dec
sub
and
xor
fidiv
in
js
xor
push
and
fidiv
call
mov
and
and
into
(bad)
addr16
xor
jmp
daa
jmp
lods
mov
dec
shl
sub
ss
scas
sub
push
cmps
cwde
and
fcmovu
retf
fcmove
scas
in
retf
cmp
push
into
sub
popf
in
push
and
lods
or
in
xchg
(bad)
jo
rep
leave
(bad)
adc
and
jb
lods
fnstsw
jmp
fiadd
dec
mov
sub
addr16
fnstenv
fidiv
jno
and
xor
fidiv
out
addr16
(bad)
xor
lahf
frstor
lahf
loop
add
and
popf
test
movs
shr
push
fnstenv
push
dec
and
retf
dec
retf
sub
push
jne
cs
out
retf
rcr
jno
xor
(bad)
push
and
in
push
fisub
pop
(bad)
addr16
retf
push
push
dec
jmp
jmp
nop
addr16
sub
push
movs
loop
dec
and
gs
push
rcl
dec
in
push
and
addr16
sub
push
test
ss
dec
and
push
and
int
sbb
cs
(bad)
out
lods
loop
adc
and
jg
and
and
inc
rep
leave
outs
pop
and
sahf
xchg
jae
pop
inc
into
adc
inc
aad
into
out
cmp
mov
mov
sub
addr16
mov
push
and
and
xor
(bad)
xlat
das
retf
std
retf
into
lods
out
push
test
scas
call
mov
jne
shr
and
dec
out
fisubr
dec
pop
es
mov
push
and
lods
or
push
frstor
sbb
std
and
lahf
out
retf
leave
xor
fidiv
adc
ficomp
lods
cs
xor
fimul
mov
(bad)
mov
retf
std
sti
into
lods
out
mov
(bad)
jo
push
and
fidiv
push
ficom
(bad)
adc
retf
and
loope
fnstenv
arpl
int
sbb
(bad)
(bad)
xor
retf
loop
xchg
aad
xor
pop
and
mov
call
jne
jmp
cs
rcr
fwait
and
pop
in
lds
sub
mov
popf
pusha
(bad)
and
fs
cmps
iret
and
retf
add
addr16
mov
lods
fmul
fisub
sub
dec
aam
ja
jle
push
mov
int
(bad)
push
and
std
cmp
call
inc
(bad)
sbb
sbb
push
push
fadd
and
sbb
sbb
push
push
fadd
cmps
out
inc
jb
dec
popf
fs
retf
sub
cmps
in
xor
push
push
fadd
and
aad
dec
retf
sub
fisub
sub
dec
aam
ja
jle
xchg
mov
int
(bad)
push
and
sub
fisub
sub
int
int
(bad)
push
and
xor
addr16
xor
push
push
fadd
and
std
stos
sub
push
int
(bad)
push
and
xor
addr16
xor
push
push
fadd
and
sbb
sbb
push
push
fadd
cmps
out
inc
jb
pop
fwait
fs
retf
sub
rol
inc
xchg
jns
xor
call
test
dec
(bad)
gs
sub
int
test
dec
(bad)
gs
sub
dec
aam
ja
jle
xchg
mov
int
(bad)
push
and
sub
fisub
sub
int
test
dec
(bad)
gs
sub
dec
aam
ja
jle
test
push
and
out
sub
in
xor
push
push
fadd
and
push
cmps
loope
mov
in
push
lods
std
jecxz
lods
out
sbb
sbb
push
push
fadd
and
push
cmps
loope
mov
in
push
test
dec
(bad)
gs
sub
int
movs
out
xor
fild
retf
loope
mov
in
push
ficom
and
sub
and
mov
push
and
addr16
add
addr16
mov
jp
xchg
(bad)
jo
rep
leave
adc
fwait
push
jp
inc
out
aad
ror
aam
push
and
and
retf
sbb
push
and
and
retf
int
push
and
fdiv
and
in
push
and
lods
dec
sub
fidiv
adc
fdiv
push
and
and
push
lods
aad
lock
mov
inc
ror
retf
push
and
and
retf
adc
lahf
jecxz
mov
and
cs
and
push
and
fidiv
imul
and
sub
fdiv
inc
fcmovu
dec
shl
addr16
push
and
addr16
in
retf
shr
and
retf
add
jmp
addr16
mov
lods
aad
lock
mov
inc
ror
fadd
push
and
xor
or
and
xor
or
inc
shl
push
cmp
fidiv
lahf
mov
lods
or
mov
and
es
rcl
sub
fnstenv
je
lods
or
iret
in
adc
(bad)
aas
out
lods
sbb
sbb
ss
(bad)
xor
jmp
or
adc
xor
sbb
and
retf
arpl
jecxz
and
fidiv
jmp
cmp
(bad)
xor
push
and
and
xor
sbb
and
loope
fcmovu
call
jne
popf
and
xor
fidiv
fs
fidiv
lahf
mov
lods
or
mov
jne
clc
mov
xor
push
test
loope
fcmovu
call
aad
lock
mov
inc
ror
and
and
mov
dec
int3
sub
mov
and
sub
retf
fmul
cmc
ret
lahf
pusha
fldcw
pop
fs
int
adc
mov
lods
pusha
push
lahf
aad
cmp
and
clc
int
and
inc
es
cmps
inc
xor
loop
adc
and
lahf
jecxz
(bad)
into
es
sub
cmps
inc
cs
movs
jecxz
sub
jne
frstor
and
or
leave
push
and
addr16
(bad)
repnz
fs
dec
retf
dec
retf
jle
and
retf
dec
retf
and
retf
ret
dec
and
retf
nop
mov
dec
mov
retf
int
adc
ret
inc
xchg
sbb
xor
xchg
fnstenv
adc
and
retf
ret
dec
and
jle
and
aad
ror
sub
popf
fs
retf
ret
dec
aad
push
and
and
retf
test
push
int
leave
push
and
lods
or
push
and
cmps
adc
ret
jle
test
push
and
fs
and
cmp
fs
retf
scas
mov
xchg
leave
out
fcmovu
and
and
inc
sub
jecxz
dec
and
and
inc
sub
and
dec
into
fcmovnu
xor
push
and
and
dec
(bad)
ins
cld
xor
pop
in
xchg
dec
into
fcmovnu
xor
jmp
imul
jmp
test
retf
ret
mov
dec
mov
push
and
and
retf
ret
mov
dec
fild
and
movs
and
std
fidiv
pop
test
adc
fcmovu
call
test
push
and
in
push
jne
sbb
fcmovu
lds
and
fidiv
push
and
fisub
jle
xchg
mov
dec
and
and
fidiv
push
and
lods
or
mov
jne
pop
and
retf
dec
retf
shl
push
and
and
retf
aad
push
and
and
retf
push
js
and
and
retf
aad
push
and
and
inc
ror
mov
push
int
cmp
fcmovu
jmp
das
xchg
xor
js
and
mov
int
pop
jmp
jp
xchg
(bad)
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
popf
(bad)
aaa
and
push
lods
loop
sub
push
jmp
push
jne
adc
lods
(bad)
mov
std
and
dec
sub
(bad)
lds
and
and
bound
je
sub
mov
(bad)
(bad)
dec
retf
and
push
dec
and
jl
jne
jnp
fidiv
xchg
leave
and
retf
and
retf
and
dec
adc
fisubr
push
and
sub
xor
in
rcl
fwait
ins
fiadd
add
into
in
mov
shr
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
and
mov
mov
retf
.byte
