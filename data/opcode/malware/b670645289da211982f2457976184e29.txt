add
cld
lods
xchg
rcr
jae
inc
xchg
jo
cli
cmp
mov
xor
inc
xor
lea
xchg
inc
or
ja
mov
sbb
inc
test
adc
daa
jecxz
imul
(bad)
xor
pusha
xor
sub
loop
or
jno
fsubp
and
mov
mov
dec
popa
(bad)
or
(bad)
(bad)
loope
(bad)
xor
mov
mov
mov
repnz
(bad)
adc
scas
mov
(bad)
sti
push
xchg
inc
jg
jl
stc
mov
pop
jp
jge
repz
not
ss
cmp
jne
out
out
mov
xor
xor
repz
sub
mov
dec
push
nop
cwde
cs
pop
mov
push
xor
sub
loopne
mov
aad
mov
mov
mov
xor
mov
inc
scas
jb
out
imul
jnp
or
daa
(bad)
std
push
sbb
xchg
cdq
int
pop
pop
and
adc
push
loopne
in
push
sbb
popf
sti
jae
aad
(bad)
aad
jp
sub
retf
mov
pushf
pop
ds
xor
cwde
aam
xor
out
pop
push
push
add
xchg
mov
cli
mov
xchg
mov
sub
xor
sub
iret
stos
clc
and
push
stos
xchg
data16
mov
jbe
xor
xchg
xchg
int3
movs
in
xchg
lea
ins
call
xchg
jmp
mov
dec
mov
inc
fmul
mov
mov
pop
jmp
sub
xchg
jns
and
push
xlat
dec
add
jle
clc
mul
push
lock
push
sahf
inc
xor
and
fidivr
push
cli
mov
movs
fmulp
ret
fimul
cmp
mov
add
xor
sbb
nop
rol
int3
xor
xchg
(bad)
xchg
cmp
(bad)
clc
fsub
jl
push
cs
xor
les
sar
aaa
push
ret
sbb
clc
in
mov
adc
pop
hlt
cld
stc
or
mov
in
test
cmp
loope
addr16
iret
retf
js
into
or
or
in
sar
cmc
cmp
dec
push
call
enter
xchg
pop
scas
xchg
dec
push
cmp
ja
adc
cmp
mov
retf
movs
sub
push
cmps
dec
sub
aas
xor
(bad)
add
lock
ins
lods
dec
std
pop
shl
cvtps2pi
dec
loopne
je
lods
sub
jl
mov
adc
mov
xchg
mov
test
xor
jle
dec
and
iret
movs
and
jmp
dec
push
jne
outs
repnz
popa
xlat
push
push
jo
mov
push
push
jae
lds
lods
sub
and
dec
xor
(bad)
rcl
dec
push
push
inc
add
sbb
dec
call
jl
inc
inc
xor
and
lahf
(bad)
cmp
jle
mov
cmp
dec
loope
out
and
adc
dec
jno
jecxz
hlt
int3
or
movs
mul
ror
push
mov
adc
pop
push
inc
or
outs
jnp
xor
inc
aad
rol
loop
jno
or
or
mov
cmc
out
sub
jns
mov
inc
jne
(bad)
mov
fidivr
pusha
cmps
stc
xor
mov
mov
mov
lods
and
and
pop
sbb
(bad)
call
ds
inc
loopne
pop
xchg
pop
sti
fwait
in
popa
jl
ror
dec
jle
mov
sub
pop
cmp
(bad)
fs
dec
stos
les
mov
ja
rcr
mov
test
lea
sbb
daa
repz
enter
rcr
in
mov
push
xchg
mov
push
dec
inc
mov
pop
mov
and
push
and
and
scas
dec
push
pop
cmps
imul
mov
repz
cmp
dec
jae
dec
cmps
in
outs
out
inc
adc
pop
shr
xchg
mov
enter
xchg
mov
mov
sahf
sbb
sti
ror
(bad)
mov
cmc
add
dec
mov
push
jo
loope
push
add
inc
push
call
clc
xchg
fdivr
bsr
pop
mov
sub
dec
(bad)
fisubr
mov
sbb
push
fs
jle
stos
cmp
inc
xor
push
cmp
mov
inc
pop
jmp
jle
mov
ins
mov
pushf
jns
jmp
pop
pop
loop
jl
adc
pop
pop
div
inc
xlat
push
xor
push
call
das
xchg
scas
aam
ss
dec
sbb
js
xor
repnz
lods
fcom
push
aaa
out
and
mov
mov
push
add
stos
mov
lods
popf
dec
jmp
ins
pop
cli
sub
or
mov
and
pop
movs
pop
sub
cli
rol
cmp
xor
mov
mov
ret
stos
mov
push
adc
sub
mov
sub
adc
jbe
jb
mov
add
ret
test
lea
add
mov
mov
aas
ja
rol
cmc
retf
dec
lea
int
fiadd
jmp
cld
inc
inc
jecxz
imul
jmp
pop
mov
lahf
mov
xchg
jb
dec
iret
pop
inc
lock
sti
bound
mov
push
je
sub
or
and
xchg
test
movs
outs
inc
push
pop
mov
xchg
sub
sbb
mov
or
inc
xor
(bad)
(bad)
rcr
sub
inc
fs
in
aas
in
inc
adc
out
pop
xor
cld
(bad)
icebp
prefetch
sub
ins
sub
lea
and
leave
jmp
(bad)
sbb
jg
jmp
(bad)
icebp
xor
lahf
adc
xor
fstp
sub
mov
push
pop
enter
and
hlt
clc
jb
outs
movs
cmps
aam
in
mov
mov
fistp
clc
stos
dec
outs
mov
aaa
in
jne
sub
daa
cmp
xchg
dec
outs
xchg
data16
fild
or
pop
int
jmp
shr
sub
xchg
retf
add
imul
ja
(bad)
xor
cmp
fdivr
lahf
cmp
mov
jmp
inc
adc
adc
adc
xor
mov
call
(bad)
push
xchg
ds
dec
in
pop
ins
in
sub
mov
pop
mov
fisttp
pushf
pop
adc
push
dec
mov
lods
mov
mov
gs
ficom
xchg
call
and
or
pushf
stos
or
pop
jo
adc
xor
add
retf
(bad)
or
add
scas
lods
nop
mov
(bad)
fisttp
and
or
cli
or
jge
les
sbb
rol
push
lock
mov
(bad)
lods
xchg
xlat
xchg
imul
add
in
retf
inc
adc
xor
dec
retf
add
xor
sub
pop
mov
call
mov
jnp
xchg
pop
arpl
inc
xor
cmp
stos
add
aad
add
and
(bad)
call
call
pop
adc
push
adc
nop
cmp
mov
icebp
repnz
xchg
inc
sar
pop
or
addr16
xchg
call
sti
movs
jae
fisubr
pushf
cmp
or
stos
and
push
int
sahf
inc
retf
add
xchg
outs
add
cmc
int
imul
dec
lods
out
(bad)
cld
mov
jbe
js
jae
adc
neg
xor
sub
lods
mov
push
fwait
add
xchg
mov
outs
sbb
mov
shl
out
xor
in
and
push
jb
sub
or
add
ret
stc
sbb
add
loope
fst
out
xor
inc
bsf
mov
jle
mov
repz
neg
scas
cdq
dec
pop
fst
add
ret
int3
pop
popf
jbe
sub
xchg
repnz
add
push
mov
push
jno
and
sahf
adc
jge
sahf
aad
xchg
push
jmp
xchg
enter
xor
mov
cwde
leave
repz
mov
les
(bad)
jmp
jo
gs
mov
inc
sub
movs
and
cdq
inc
bound
rol
pusha
adc
and
in
xor
inc
or
aaa
and
xchg
popf
enter
mov
das
ds
clc
neg
jne
mov
pop
shl
and
inc
sub
cmp
and
and
xchg
mov
dec
jo
(bad)
cmp
fdivr
sub
jge
fist
push
cmp
daa
mov
ins
ds
loopne
dec
ins
add
mov
(bad)
in
repnz
test
or
push
push
in
pop
pop
jmp
out
cli
mov
ins
jge
pop
movs
in
jb
sub
in
aam
cmps
and
pop
test
outs
dec
fstp
stos
sub
les
push
shl
cli
mov
and
movs
add
addr16
inc
cwde
(bad)
cwde
and
or
ficom
push
retf
cdq
mov
ficom
aaa
js
icebp
test
xor
outs
pushf
jmp
out
les
or
inc
xchg
rcl
scas
cmp
push
xchg
fwait
or
or
test
add
mov
cmp
mov
mov
jns
adc
mov
imul
jmp
lock
mov
or
cmp
stos
loop
push
aam
mov
enter
inc
mov
hlt
jnp
call
retf
and
ret
cwde
push
pop
mov
sub
popa
jbe
loop
loope
loop
mov
sti
add
dec
nop
(bad)
pop
jp
lea
in
mov
sub
popf
or
dec
scas
jbe
inc
lea
pop
inc
cmps
dec
stos
sbb
(bad)
arpl
in
or
stos
repz
int3
xchg
(bad)
lock
lods
xor
fst
test
rcl
lahf
pop
add
sub
cmc
xlat
rcr
pop
call
push
hlt
cmp
(bad)
mov
and
retf
or
inc
or
sbb
sub
lods
movs
movs
inc
movs
fcomi
adc
sub
sbb
add
dec
or
jns
xlat
jbe
out
loop
xchg
inc
mov
xor
xchg
xor
push
lea
xchg
sti
jl
pop
lock
repnz
push
xchg
push
cwde
dec
jmp
sbb
(bad)
xlat
xor
lea
mov
pop
js
dec
fidiv
mov
mov
setg
dec
fnstcw
mov
in
mov
repz
neg
jge
ins
sbb
cmps
das
fild
fadd
cs
out
aas
jl
sti
adc
inc
or
cmp
cmps
(bad)
xchg
shr
mov
inc
jp
es
popaw
inc
fdivp
adc
mov
and
pop
cld
adc
push
and
in
test
loopne
rcl
loop
jb
push
pop
push
xor
sub
test
and
scas
inc
jnp
pop
mov
sbb
repnz
sub
ret
push
pop
cmp
jmp
mov
add
mov
pop
nop
(bad)
push
and
into
cwde
enter
rcr
(bad)
sbb
cmp
cli
push
fist
mov
sub
sub
aaa
nop
ss
xor
push
inc
rol
mov
pusha
cmps
dec
mov
xchg
std
mov
mov
out
push
int
aaa
cmp
jecxz
jo
lea
mov
xor
icebp
mov
lods
hlt
stc
push
add
imul
pushf
cmc
aaa
cmp
pop
repz
dec
cmp
in
test
aaa
jecxz
and
mov
mov
push
mov
sub
or
mov
xchg
sbb
pop
retf
clc
cmps
cmps
xor
jne
adc
ficom
test
cs
dec
shl
cmp
inc
out
ins
call
add
(bad)
push
cmc
mov
mov
sub
mov
hlt
sub
mov
(bad)
in
and
imul
fdiv
xchg
cmp
xchg
data16
jae
mov
daa
ret
repz
sub
daa
fmul
dec
jns
lock
rol
(bad)
iret
push
mov
(bad)
xlat
dec
xor
push
outs
xchg
xor
mov
and
scas
inc
adc
mov
icebp
bound
out
push
mov
mov
push
ins
dec
adc
jbe
hlt
inc
jmp
adc
pop
daa
mov
add
iret
shl
push
gs
lods
or
shl
mov
push
mov
dec
sub
das
inc
test
pop
jmp
cmp
inc
jns
ja
pop
and
xchg
push
xor
pop
pop
add
nop
fsub
bound
imul
shl
and
inc
mov
sub
push
popa
mov
xchg
hlt
retf
(bad)
movs
sti
mov
xchg
xchg
dec
adc
inc
xor
jns
enter
jle
xchg
bound
lods
sub
adc
clc
out
jg
mov
clc
stos
ud2
in
pop
xchg
xlat
push
xor
or
shr
adc
mov
dec
shl
clc
out
(bad)
mov
(bad)
dec
pop
ret
ins
jb
aad
repnz
push
pushf
clc
sub
lock
inc
mov
inc
repz
push
jg
lock
ss
push
imul
sar
mov
data16
cmps
or
add
pop
and
hlt
(bad)
aam
shl
ins
test
enter
aaa
mov
es
push
mov
sub
in
dec
jmp
ins
push
sub
lock
stos
jecxz
mov
aad
daa
add
repz
cmp
retf
fcomp
lods
aad
fadd
rcr
inc
cmp
inc
sbb
pop
mov
inc
pushf
jo
loopne
mov
xchg
ret
mov
dec
dec
cmps
mov
outs
jb
(bad)
pop
in
daa
cmp
push
and
lds
clc
mov
push
jg
sbb
mov
push
test
ss
(bad)
mov
mov
ins
inc
loop
sub
mov
mov
or
scas
dec
neg
sbb
cs
pop
ss
push
call
dec
sbb
aas
repz
aad
cmp
jl
jbe
(bad)
mov
sbb
mov
cmp
push
jmp
gs
sbb
jecxz
jle
jne
cld
and
mov
jl
outs
sbb
jns
enter
push
or
mov
or
popf
out
movs
mov
mov
call
sub
es
pop
add
pop
inc
repz
lods
mov
hlt
inc
mov
xlat
jns
or
shr
sbb
jp
pop
mov
jb
in
cmps
jmp
add
and
sbb
pop
add
lds
pop
xchg
stc
dec
mov
pop
or
scas
pop
mov
cmp
mov
and
pusha
aam
rol
test
fs
mov
push
dec
sub
mov
jnp
xchg
std
cld
pop
mov
mov
inc
xchg
inc
div
or
outs
retf
rcr
add
fiadd
repnz
outs
push
add
out
xchg
jns
jecxz
repz
call
mov
sbb
xor
test
jo
and
xchg
das
dec
je
and
xchg
jnp
xor
and
fldenv
ds
ins
add
out
xchg
icebp
(bad)
adc
data16
addr16
popf
and
movs
pop
imul
lds
and
xlat
mov
int3
push
call
ins
aaa
mov
push
in
loope
cli
ret
lock
imul
loopne
or
push
add
pop
movs
or
test
sahf
stos
mov
jl
mov
jmp
mov
or
xchg
xor
js
popf
mov
cmp
imul
sub
inc
pop
jg
retf
pop
push
retf
idiv
inc
xor
int3
into
add
mov
(bad)
lock
loopne
repz
ret
ds
mov
lahf
adc
add
call
daa
imul
fiadd
dec
push
xchg
push
cmp
imul
sub
cld
pop
adc
jmp
imul
adc
stc
sub
adc
dec
jno
cmp
loop
fcomp
ret
loop
xor
mov
stos
lea
ffreep
push
and
gs
and
test
mov
mov
adc
xchg
int
iret
jge
and
dec
fist
repnz
jae
xlat
sbb
cs
or
movs
jp
inc
mov
into
dec
and
pop
test
addr16
cwde
les
mov
dec
ret
ins
xor
es
xchg
in
jo
push
(bad)
inc
push
