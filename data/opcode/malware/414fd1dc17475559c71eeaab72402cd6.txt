lods
movs
icebp
cmc
rol
mov
pusha
mov
popf
lds
and
outs
adc
or
fs
into
xor
cmc
fld
neg
mov
bound
jle
fs
mov
out
cmc
pop
mov
adc
std
arpl
xchg
pop
jmp
out
mov
jbe
sub
std
loope
mov
call
ins
pop
scas
stc
jmp
jle
fs
pop
push
in
js
out
enter
popf
or
outs
frstor
xchg
mov
add
aas
cmp
adc
xor
enter
push
and
jle
jns
mov
cdq
bound
ret
mov
fcomp
cmp
jno
popf
jmp
dec
cmc
out
push
dec
adc
out
icebp
cdq
lds
retf
xor
push
cmp
push
jno
popf
out
in
push
data16
es
fbld
inc
pop
es
retf
push
fs
mov
out
test
es
cmp
mov
es
mov
cmp
ds
cmp
and
sbb
cmc
out
loop
mov
dec
sbb
je
sub
(bad)
out
jbe
push
cmp
xchg
out
retf
push
pop
sbb
fwait
dec
dec
pop
pop
sub
pop
adc
aaa
pop
jmp
fwait
dec
std
pop
push
mov
jle
(bad)
aas
into
jle
out
jbe
movs
les
fs
lea
jle
ins
pop
aas
loop
mov
pop
ins
mov
jg
fs
mov
dec
loope
test
jno
popf
mov
mov
pop
es
popa
sbb
(bad)
pushf
fs
sar
and
push
pop
popf
mov
call
xchg
cmp
jno
popf
push
mov
jg
fs
dec
add
jle
fs
adc
fild
popf
or
outs
frstor
adc
mov
popf
xor
adc
pop
cs
pop
xchg
sbb
xchg
jle
mov
mov
popf
push
mov
mov
repz
inc
jno
popf
or
mov
jecxz
mov
test
jno
popf
fwait
test
es
test
jno
popf
in
xchg
push
es
aad
mov
push
mov
cld
or
xchg
add
(bad)
mov
popf
fs
enter
lea
mov
jne
enter
out
and
pop
fcom
fs
popf
push
mov
sahf
push
mov
popf
or
jle
in
pop
cmp
push
mov
adc
cmp
push
lahf
dec
or
push
mov
sbb
fnstenv
gs
sbb
xchg
dec
push
mov
sbb
and
popf
fs
jno
mov
lods
xchg
fstp
hlt
add
xlat
dec
or
xor
popf
lds
movs
icebp
xchg
mov
fs
pop
jne
retf
imul
cmp
fs
jp
xor
cs
push
cmps
in
js
pop
outs
retf
xor
mov
xchg
mul
push
neg
nop
cmp
adc
dec
adc
dec
mul
popf
imul
popf
fwait
les
adc
jle
mov
cmp
fwait
les
adc
outs
bound
dec
xchg
cmp
mov
adc
dec
or
mov
jmp
jge
add
les
data16
popf
(bad)
mov
neg
xchg
cmp
ret
lods
jb
adc
loopne
retf
sub
pop
cmp
adc
dec
cs
jge
jl
push
mov
call
mov
mov
lods
movs
pop
dec
bound
test
or
je
or
xchg
add
adc
popf
sbb
jp
movs
pop
jne
movs
icebp
xchg
fwait
in
dec
iret
fs
ret
lods
jb
adc
xor
push
adc
pop
xor
pop
stc
jle
fwait
mov
pop
es
clc
nop
mov
clc
cwde
mov
lock
push
fcomp
sub
mov
pop
es
bound
mov
push
xor
jno
jo
inc
dec
adc
mov
and
inc
pushf
les
bound
inc
cmc
fdiv
imul
pop
xor
popf
xchg
aam
adc
inc
neg
pushf
div
ins
out
sbb
adc
pop
push
sbb
cmp
fwait
icebp
(bad)
mov
pop
hlt
adc
or
xchg
out
hlt
xchg
cmp
js
enter
popf
fs
jne
(bad)
jle
aaa
out
push
adc
js
mov
dec
jnp
mov
mov
adc
cmp
xchg
in
jo
push
fwait
icebp
(bad)
mov
pop
ja
xchg
mov
dec
jle
dec
cmp
mov
cmp
xchg
out
movs
inc
adc
fwait
dec
cmp
in
imul
je
mov
mov
popf
fwait
dec
jle
loope
jle
fwait
pop
js
mov
out
and
lods
jb
adc
loopne
retf
xor
and
imul
pop
dec
jae
enter
jbe
pop
inc
out
mov
loopne
or
adc
inc
xchg
pop
sahf
mov
fs
mov
mov
neg
jae
adc
mov
dec
neg
jae
enter
xchg
mov
out
and
js
loop
retf
jb
and
hlt
and
jbe
pop
mov
loopne
or
adc
inc
xchg
pop
sahf
mov
fs
mov
mov
neg
jae
adc
mov
leave
mov
xchg
mov
les
ret
mov
xor
fwait
int3
aaa
out
push
adc
cmp
lds
in
sub
jle
popa
leave
mov
jbe
cmp
xchg
imul
movs
in
dec
push
outs
out
cld
jb
fisub
jnp
movs
icebp
xchg
mov
mov
popa
in
jae
pop
in
in
lods
movs
out
and
lods
jb
adc
loopne
into
xor
cmc
call
push
call
fwait
mov
pop
es
call
es
jne
dec
and
mov
(bad)
fbld
(bad)
cdq
dec
or
aaa
out
sbb
(bad)
inc
popf
fs
cdq
adc
dec
neg
out
and
js
out
push
cmp
dec
adc
cwde
xchg
dec
or
cmp
cmc
fwait
scas
jle
aaa
out
call
fs
sub
mov
push
icebp
jle
mov
inc
and
aas
in
mov
retf
xor
or
push
cmp
push
pop
sub
or
fs
test
mov
jmp
cmp
aaa
mov
neg
mov
stos
out
test
sub
mov
ret
aas
in
mov
jno
loop
retf
jbe
dec
lock
in
push
int3
fs
mov
pushf
cmp
mul
out
fs
fcom
jle
ret
ret
in
jb
push
ret
push
jno
inc
imul
pop
adc
sub
mov
mov
popf
jmp
ret
or
lods
movs
mov
neg
mov
mov
movs
mov
cmc
lods
inc
cmp
out
mov
stos
out
mov
jle
cmp
popf
cmp
in
hlt
call
icebp
xchg
xchg
in
dec
dec
gs
jbe
jne
dec
and
jmp
push
mov
popf
mov
popf
fs
retf
dec
sbb
cmps
mov
cmp
fbld
popf
lds
inc
int
fbld
loope
repz
and
jle
out
hlt
jb
sbb
popf
in
imul
clc
add
clc
add
xor
cmp
cmp
inc
fwait
dec
adc
mov
cmc
fwait
dec
jle
jmp
dec
bound
mov
jle
fldenv
es
sbb
pop
es
dec
std
pop
push
mov
xchg
out
loop
es
je
mov
popf
in
imul
nop
loope
fsubr
cdq
xor
inc
bound
lods
neg
cwde
xor
imul
push
sbb
xchg
loope
jg
xor
gs
mov
mov
jmp
mov
xor
imul
or
es
cmp
jne
popf
in
hlt
xchg
and
push
mov
mul
jmp
jle
xchg
push
neg
mov
jb
pop
and
popf
out
hlt
xchg
pop
fstp
and
adc
push
std
jno
cmp
popf
xchg
adc
loopne
cmp
cdq
xor
inc
bound
xchg
neg
cwde
xor
xchg
movs
les
popf
or
(bad)
fbld
ins
xor
inc
bound
jle
fs
fcomp
cmp
dec
fwait
dec
adc
les
loope
and
repz
out
mov
popf
in
hlt
sbb
pop
popf
fs
jnp
mov
mov
push
and
and
push
call
loop
es
jmp
es
push
push
dec
sub
mov
popa
and
inc
inc
fcomp
sbb
fs
ret
aas
js
enter
jno
loop
retf
add
xchg
cmp
mov
mov
push
cmp
gs
jbe
fsubr
lods
pusha
mov
jle
mov
dec
jg
fs
outs
fsubr
cdq
adc
inc
neg
retf
dec
imul
(bad)
out
hlt
jbe
and
jbe
push
lds
add
push
and
cs
hlt
add
xor
gs
jbe
cwde
les
cmp
fs
jecxz
fwait
dec
ja
adc
gs
push
neg
nop
cmp
jmp
es
cmc
mov
cmp
push
add
lods
mov
mov
fs
(bad)
call
and
inc
loop
lea
pusha
xor
popa
xor
fucomi
hlt
jbe
pop
cmp
fwait
xor
popa
xor
popa
lds
mov
jle
mov
jle
lea
jle
cmp
jno
jbe
popf
push
mov
cdq
push
mov
popf
or
jle
and
jle
and
mov
adc
inc
adc
push
mov
popf
xor
dec
out
fs
fsubr
push
lods
dec
ds
popf
cmp
xor
dec
or
retf
or
or
jp
hlt
xchg
push
and
pop
push
mov
fcom
(bad)
fbld
imul
push
popf
fs
and
lods
jb
adc
or
popf
data16
adc
lds
jmp
jnp
cmp
pop
loope
and
repz
pop
fidivr
in
xor
bound
dec
and
xor
dec
daa
xchg
movs
mov
jle
vmovd
ror
(bad)
in
jb
jbe
bnd
push
mov
mov
cmp
jle
in
xor
bound
jne
arpl
dec
sbb
clc
add
cmps
push
or
xchg
sti
sub
cmps
cmp
jge
dec
or
fs
movs
fwait
out
adc
dec
ja
adc
jle
jmp
dec
cs
in
inc
cmp
out
xor
bound
dec
push
fs
popf
in
hlt
adc
jle
xchg
repnz
popf
fs
pop
fwait
dec
or
fs
movs
fwait
out
adc
dec
ja
imul
fs
int
lock
shl
arpl
dec
std
pop
ins
cmp
bound
imul
bound
repz
xchg
shl
fs
and
sub
cmc
movs
fwait
out
adc
dec
ja
imul
fs
push
(bad)
and
mov
popf
in
and
jle
loopne
jbe
fstp
loop
cmp
jmp
dec
cs
inc
and
xlat
mul
into
dec
and
fmulp
fs
sub
sbb
bound
sbb
mov
popf
imul
aaa
fwait
dec
sbb
fwait
dec
or
fs
mov
fs
pop
push
dec
and
jnp
aam
jle
out
shl
dec
jle
mov
jle
xchg
push
neg
ror
in
jb
mov
fs
jle
fnstcw
es
int
lock
push
inc
and
dec
jle
adc
mov
fs
pusha
fwait
dec
or
fwait
xor
popf
lds
sbb
jle
cmp
mul
xchg
outs
es
int
lock
mov
out
jb
fwait
dec
jle
adc
mov
fs
pusha
fwait
dec
or
fwait
xor
popf
lds
sbb
jle
fstp
mov
loope
fsub
push
push
mov
mov
xchg
repz
(bad)
fwait
out
adc
mov
jle
outs
jbe
xor
mov
mul
mov
es
int
lock
push
inc
and
dec
jle
adc
mov
fs
pusha
fwait
dec
or
fwait
xor
popf
lds
sbb
jle
xor
mul
shr
push
int
lock
inc
inc
and
dec
jle
adc
and
jle
push
mov
xor
add
popf
mov
fwait
xor
popf
lds
sbb
jle
fstp
mov
fsub
imul
mov
(bad)
mov
jns
repz
(bad)
fwait
out
es
dec
sbb
fwait
mov
call
inc
popf
jmp
dec
sub
inc
and
dec
jle
adc
and
jle
fsubr
popf
adc
adc
push
rcr
pushf
or
mov
fldcw
sub
nop
dec
sbb
fwait
mov
jmp
adc
cmp
or
into
fsub
imul
mov
xchg
mov
dec
jg
fs
pop
mov
jle
out
shl
dec
jle
jb
jnp
mov
xor
bound
dec
and
lds
leave
aam
jle
or
cmp
in
mov
fs
sbb
pop
push
cwde
fs
inc
push
imul
inc
in
jb
sbb
sti
inc
fwait
dec
or
cmp
cmp
jno
sbb
xor
bound
imul
adc
dec
call
mov
popf
ins
jno
sbb
adc
bound
cwde
cmps
adc
xor
dec
fwait
dec
sbb
jmp
call
in
xor
bound
jbe
cmp
fs
xor
fs
adc
and
sbb
dec
and
sti
inc
fwait
dec
or
js
cmps
lods
mov
and
repz
loope
and
movs
inc
popf
fs
adc
dec
ja
imul
fs
sbb
sti
dec
fwait
dec
or
mov
jle
in
hlt
adc
popf
adc
cmp
push
sbb
xchg
loope
jp
fs
jne
dec
or
call
movs
in
hlt
adc
jle
cmps
and
popf
fs
pop
adc
pop
and
dec
and
inc
bound
mov
fcomp
cmp
xchg
loope
jge
xor
adc
push
and
dec
and
inc
bound
xchg
neg
cwde
mov
jge
xor
push
rol
fwait
mov
sub
into
fsub
pusha
fwait
dec
or
xor
bound
mov
popf
push
mov
sbb
mov
adc
cwde
cmps
adc
dec
retf
jno
dec
adc
fwait
loope
clc
xchg
repz
loope
and
mov
push
mov
imul
or
fs
jno
dec
adc
cmp
cmp
jmp
dec
std
jno
cmp
popf
xchg
adc
sub
dec
and
outs
adc
or
fs
cmp
or
bound
dec
sub
mov
xor
popa
fs
jle
rcr
arpl
imul
bound
inc
cmp
out
xor
bound
dec
push
fs
popf
in
hlt
adc
jle
(bad)
mov
sti
cmp
xor
bound
dec
sub
in
hlt
adc
jle
rcr
inc
gs
mul
lock
adc
cwde
cmps
adc
mov
adc
xlat
mov
bound
cmc
sbb
dec
and
(bad)
bound
dec
and
retf
in
dec
sbb
fnsave
fist
ror
and
push
(bad)
cdq
fs
outs
sar
xor
out
mov
popa
in
imul
cwde
mov
sbb
mov
popf
out
repnz
cmp
push
add
loope
and
movs
inc
popf
fs
adc
dec
push
cmps
jle
ins
jno
sbb
jle
out
repnz
mov
sti
cmc
fwait
dec
or
nop
dec
and
repnz
dec
sub
mov
xor
popa
fs
jle
out
push
bound
jl
popf
fs
in
fwait
dec
sbb
or
dec
retf
in
fwait
dec
xor
jne
adc
div
and
dec
and
jg
in
jb
and
mov
jle
loope
and
cmp
mul
retf
xor
dec
and
repz
loope
and
mov
push
mov
dec
and
sbb
adc
sbb
sbb
dec
repz
cmp
gs
dec
adc
call
popf
out
jb
mov
fstp
loope
and
repz
loope
and
mov
push
mov
imul
bound
cmp
adc
out
add
push
loope
and
dec
adc
fwait
dec
or
ins
cmp
adc
cmp
cmp
out
add
push
loope
and
dec
adc
fwait
dec
sbb
xor
push
loope
and
out
push
fldenv
arpl
xor
bound
dec
sub
fs
and
lds
loope
and
out
push
loope
and
out
push
loope
and
out
adc
cwde
cmps
adc
cmp
jge
dec
or
ins
pop
ret
dec
and
aas
js
enter
bound
mov
lea
sbb
mov
popf
xor
idiv
out
data16
xor
idiv
mov
jns
fld
sub
call
push
mov
popf
cmp
jns
dec
jg
in
les
popf
mov
adc
xor
bound
repz
adc
call
push
xchg
push
mov
dec
xor
mov
popf
out
hlt
sahf
pop
out
aam
pop
and
lods
or
xchg
cmp
inc
out
int3
cmps
adc
ins
xchg
add
fsub
pop
and
bound
and
fcom
jle
lods
jae
popf
xor
shr
stc
push
adc
fsqrt
pop
es
popf
push
mov
xor
jle
fstp
xchg
jle
in
ja
jne
xlat
jle
in
dec
dec
gs
jbe
ret
cmps
in
js
pop
pop
into
xor
and
pop
cmp
popa
in
jo
cwde
sbb
cmp
in
outs
std
mov
cmp
gs
jo
pop
(bad)
test
inc
xor
icebp
jle
lods
mov
adc
jbe
jno
lock
fs
pop
popa
cmc
xlat
fsub
popf
cmp
(bad)
lock
shl
pop
imul
bound
xchg
jmp
jl
fs
pop
sbb
jne
popf
in
data16
mov
popf
fwait
mov
pop
es
pop
in
pop
xchg
icebp
jno
push
test
jg
pop
push
aas
popf
(bad)
in
popf
xor
retf
lock
xchg
mov
xchg
loope
jl
fs
jnp
int
jle
adc
pushf
popa
mov
fsub
bound
rcr
or
jl
hlt
xchg
adc
pop
imul
lea
jnp
mov
test
or
addr16
and
xchg
push
neg
mov
mov
fsub
(bad)
lock
je
ds
lea
jnp
retf
lock
adc
jge
xor
sbb
fs
fwait
fwait
dec
sub
mov
xchg
arpl
jle
lea
or
xor
retf
lock
(bad)
icebp
xlat
fsub
sub
call
fsub
call
jle
(bad)
iret
and
retf
lock
mov
mov
popf
fs
push
gs
pop
lea
and
jnp
retf
lock
adc
jl
xor
retf
lock
in
jns
push
in
jo
cwde
and
aas
popf
data16
popf
(bad)
int
bound
repz
popa
mov
fsub
add
imul
jle
mov
popf
gs
xor
mov
push
cmp
jns
jo
nop
jl
aas
popf
and
cdq
popf
fs
jno
lock
movs
mov
cwde
pop
push
aas
popf
lea
popf
adc
xor
mov
cwde
ins
adc
popf
lea
popf
adc
cwde
pop
push
aas
popf
lea
jnp
mov
mov
fsub
aas
fs
sbb
dec
outs
popf
xor
retf
lock
lea
jle
cmp
in
data16
mov
adc
cmp
int
repz
shl
pop
sbb
std
outs
into
jns
inc
xor
push
es
sbb
and
mov
cmps
fwait
xchg
sti
pop
mov
test
xchg
mov
es
test
pop
rcr
fs
movs
retf
lock
dec
dec
jnp
retf
lock
lods
xor
retf
lock
(bad)
mov
jg
or
jl
hlt
mov
in
repz
popa
test
jno
scas
mov
popf
in
inc
cmp
adc
sub
mov
push
gs
pop
imul
in
aad
jle
movs
mov
popf
in
hlt
lea
es
jge
cmp
outs
imul
outs
pop
jno
popf
fs
jle
sbb
call
(bad)
icebp
jle
lea
enter
(bad)
popf
fs
xchg
vpmovmskb
fs
xchg
(bad)
icebp
jle
pop
cmc
xlat
fsub
mov
int3
lea
xchg
mov
iret
out
jbe
and
jl
sub
les
test
(bad)
xor
jle
test
cmp
jo
ins
and
jle
sbb
imul
jns
lock
test
add
les
sbb
call
(bad)
icebp
jle
in
fstp
push
pop
data16
div
mov
ds
out
mov
cdq
jno
xlat
fsub
xchg
(bad)
icebp
jle
ins
adc
popf
pop
mov
cmp
in
jns
jl
hlt
mov
icebp
jle
(bad)
and
imul
cmp
int3
add
and
fbld
popa
mov
movs
bound
mov
mov
adc
and
dec
pop
and
js
lods
mov
adc
out
and
and
enter
dec
push
gs
jbe
cwde
sbb
cmp
or
mov
fs
mov
pop
or
mov
fs
push
add
add
in
jbe
mov
repz
mov
pop
popf
adc
and
repz
mov
pop
popf
adc
shr
daa
pop
popf
adc
and
dec
neg
shl
add
add
in
push
std
jno
loop
retf
sbb
imul
mov
fbld
push
es
fmul
loope
mov
add
fs
sbb
js
popf
xor
jno
cmp
xor
and
popf
fs
clc
pushf
mov
inc
gs
popf
fwait
mov
pop
es
clc
mov
(bad)
js
mov
push
cmp
add
mov
mov
popf
or
jle
hlt
jmp
mov
popf
jmp
mov
fadd
jle
and
jl
fs
jbe
mov
mov
mov
push
add
jle
mov
cmp
and
les
popf
xchg
adc
fmul
jle
and
bound
rcr
or
fs
jle
hlt
out
adc
cmp
add
jle
and
jle
pusha
fstp
adc
inc
pop
mov
adc
adc
bound
adc
adc
mov
popf
fs
jnp
mov
dec
or
push
mov
fwait
fwait
les
popf
in
imul
sbb
fs
cwde
sbb
cmp
jmp
(bad)
into
adc
push
bound
rcr
cmp
jns
mov
neg
call
jmp
mov
aaa
jg
cmp
popa
in
hlt
call
cmp
inc
in
hlt
adc
mov
xor
add
lods
mov
sub
hlt
xchg
mul
jle
gs
gs
cmp
dec
or
mov
fcom
les
jno
rcr
cmp
imul
dec
neg
mov
jb
adc
out
cmps
imul
adc
mov
adc
dec
jnp
mov
mov
outs
xor
mov
popf
cmp
mov
jno
loop
retf
jbe
cmp
cmp
push
dec
jno
pusha
pop
fs
call
push
mov
bound
call
push
mov
bound
call
push
mov
bound
call
push
mov
bound
xchg
loopne
jl
cmp
(bad)
jmp
movs
inc
adc
fwait
mov
sub
dec
jno
pusha
mov
push
es
sub
inc
pop
imul
fs
addr16
mov
popf
cmp
jo
inc
pop
adc
mul
pop
jge
shl
adc
xor
fwait
pop
pop
jle
les
xchg
shl
xor
popa
fdiv
add
mov
xchg
shl
xor
jno
mov
fs
jne
out
jle
in
hlt
xchg
lods
dec
cmc
enter
mov
test
mov
xchg
mov
cmp
gs
std
jne
cmp
imul
mov
jbe
mov
mov
dec
test
jle
adc
xchg
stos
fwait
dec
and
xor
pusha
les
adc
stc
(bad)
mov
in
dec
std
jne
xor
pusha
les
adc
xor
cdq
adc
xchg
shl
ins
mov
adc
jnp
pop
mov
call
and
std
ja
xor
pushf
fs
sbb
add
xchg
in
js
adc
mul
pop
jl
pop
mov
call
mov
or
in
dec
std
jne
mov
xchg
popf
fs
call
push
push
lods
dec
cmc
enter
mov
test
mov
std
jne
cmp
gs
hlt
outs
adc
mov
pushf
pushf
xor
adc
mov
popf
fs
mov
in
dec
ss
sub
mov
mov
in
dec
std
jne
xor
les
pushf
xor
fwait
pop
mov
xchg
pop
dec
jle
lds
fwait
mov
popf
adc
jle
xor
jg
out
jp
pusha
movs
jg
fs
sbb
mov
popf
fs
add
xor
fwait
push
mov
jnp
mov
mov
xchg
call
cmp
pop
jge
fs
(bad)
sbb
pop
jge
fs
out
hlt
jb
mov
or
pop
jle
xor
pop
es
sub
mov
inc
mov
popf
push
push
gs
bound
repz
shl
jle
adc
jle
inc
xor
popa
fs
jo
mov
movs
jns
jo
sbb
and
inc
fcomp
cmp
in
mov
adc
scas
jg
cmp
gs
inc
jg
dec
popa
mul
imul
hlt
mov
and
test
popa
ret
cmc
push
lods
dec
imul
imul
dec
jg
gs
std
jne
cmp
mov
cmc
pusha
pushf
out
in
adc
dec
jnp
mov
dec
push
gs
popa
std
jne
cmp
mov
mov
fs
retf
imul
lea
movs
and
mov
jmp
mov
js
enter
rol
jne
jmp
test
bound
dec
jle
lahf
jmp
in
jns
loope
mov
sbb
xor
mov
or
inc
fwait
dec
jle
jne
enter
and
repz
adc
and
xor
jb
dec
(bad)
mov
fs
lahf
(bad)
out
jno
icebp
inc
xchg
bound
dec
xor
imul
jle
icebp
sbb
or
aas
popf
imul
outs
mov
imul
push
mov
fs
jg
cmp
cmp
movs
cs
mov
mov
mov
push
icebp
adc
jp
inc
adc
popf
in
lea
dec
jg
shl
pop
jp
inc
cwde
xchg
popf
fs
sbb
mov
sub
inc
xchg
bound
lea
vmovd
fs
sub
inc
xchg
bound
movs
imul
lock
icebp
mov
in
repz
fst
bound
mov
popf
mov
sti
inc
mov
leave
mov
dec
mov
jo
mov
mov
popf
and
neg
nop
pop
and
mov
popf
fs
ins
ds
adc
xor
adc
or
jb
dec
cmp
mov
popf
fs
imul
dec
or
fs
jnp
mov
pop
xchg
bound
mov
cmc
fwait
dec
jle
fwait
add
jb
dec
sub
mov
mov
xchg
movs
lds
shl
bound
outs
and
imul
addr16
push
push
or
jnp
mov
and
cmp
mov
popf
fs
mov
popf
fs
jno
mov
mov
sbb
outs
and
mov
jle
fs
sub
dec
and
dec
sbb
fwait
pushf
and
pop
and
dec
sbb
fwait
dec
xchg
loope
mov
je
mov
popf
imul
outs
mov
pop
xchg
(bad)
fs
imul
mov
or
push
jl
mov
push
jl
sub
xchg
jne
repnz
mov
dec
mov
pop
lea
xor
jnp
xchg
dec
sti
imul
mov
popf
fs
leave
bound
mov
jle
dec
sbb
(bad)
in
xor
inc
fwait
dec
neg
movs
jnp
fs
adc
sub
mov
sbb
outs
and
dec
cmc
or
outs
and
cmp
or
adc
or
cmp
or
loope
mov
dec
mov
ins
mov
adc
or
sub
pop
daa
popf
fs
dec
mov
or
cmp
bound
dec
sbb
dec
sbb
fs
sub
mov
mov
xchg
fnstenv
gs
or
outs
and
jne
popf
imul
outs
mov
pop
xchg
and
dec
not
fs
and
movs
pop
cmp
mov
or
mov
popf
fs
sbb
loope
mov
xchg
loope
jg
xor
xchg
fs
jle
loope
xchg
bound
pop
jle
lds
sbb
jg
fs
gs
fs
sbb
movs
jnp
fs
push
mov
fldenv
neg
sub
mov
dec
jle
leave
push
mov
sub
inc
ss
in
inc
std
jne
xor
adc
jge
pop
mov
mov
inc
std
jne
xor
adc
jnp
pop
mov
xchg
sub
bound
mov
or
outs
and
movs
fiadd
dec
(bad)
sbb
outs
and
pop
jle
les
pusha
test
fs
jne
cmp
lods
pusha
cmp
jns
dec
xor
cmp
imul
cmp
pop
or
inc
fwait
dec
or
in
fld
dec
jg
shl
jg
cmp
mov
imul
pop
mov
fs
call
data16
popf
les
pop
mov
fs
call
pusha
mov
popf
les
mov
fs
jmp
imul
ds
into
fistp
js
enter
and
dec
and
pop
or
std
pop
push
dec
sbb
fs
imul
pop
jl
test
cli
mov
outs
vpunpckldq
dec
sbb
mov
dec
and
dec
jg
shl
pop
jp
inc
cwde
xchg
popf
fs
add
xor
fwait
push
mov
and
jle
push
sbb
dec
fimul
lahf
mov
loopne
cmp
in
repz
jne
jle
xchg
adc
mov
popa
jmp
cmp
popf
fs
cmp
int3
scas
adc
mov
or
fs
cmp
hlt
adc
mov
cmps
add
jb
in
test
mov
pop
and
jbe
cmp
shl
test
bound
cmp
pop
je
and
sbb
xor
popa
hlt
nop
jle
mov
add
cmp
shl
xchg
loope
jle
xor
popa
fs
jle
in
test
jno
popf
fs
adc
movs
mov
popf
out
ds
cmp
popa
in
jae
pop
in
in
xchg
shl
jg
cmps
xor
outs
xor
and
jp
and
xchg
shl
jg
daa
mov
call
out
jnp
pusha
xor
data16
popa
in
jae
pop
in
in
xchg
shl
jg
movs
mov
popf
pop
xor
les
and
sbb
dec
popa
sti
fs
sub
mov
xchg
bnd
adc
(bad)
fcomp
mov
and
cmps
hlt
sahf
imul
gs
cmc
imul
fcomp
hlt
xchg
push
cmc
fcomp
hlt
mov
add
fsub
pop
jge
out
jle
adc
jno
and
ret
aas
js
enter
int
out
push
adc
or
inc
popf
adc
dec
neg
dec
jle
fs
popf
mov
(bad)
push
lods
dec
ds
popf
cmp
mov
and
xor
fwait
mov
jo
ret
es
fs
popf
adc
dec
neg
out
and
js
mov
popf
fs
inc
into
fs
retf
and
push
cmp
popa
mov
xor
adc
mov
repz
bound
dec
lds
sbb
bound
imul
cmp
lods
xchg
cmp
ret
mov
and
mov
fs
popf
push
mov
call
xlat
in
popf
cmp
mov
jno
loop
retf
dec
aad
cmp
mul
popf
fs
sahf
push
mov
sahf
or
jle
in
or
cmp
mov
int3
jb
adc
pop
popf
in
sbb
(bad)
rcl
fs
pop
fsub
dec
popf
fs
cdq
adc
inc
neg
imul
fisttp
cmp
dec
jg
in
jbe
popf
out
jb
adc
cmp
mov
fcomp
mov
fwait
les
popf
fs
imul
dec
xchg
xchg
in
dec
mov
hlt
xchg
adc
out
and
lods
jb
adc
loopne
retf
xor
leave
mov
arpl
push
sbb
pusha
fstp
fnstcw
fs
call
fs
pop
in
dec
dec
gs
jbe
arpl
pop
sub
data16
fs
adc
mov
cmp
xchg
in
jo
push
fwait
icebp
(bad)
mov
in
jb
popf
jmp
dec
or
fs
popf
jmp
mov
test
or
lds
mov
sbb
ret
jge
or
fs
ret
aas
js
enter
int
out
push
jno
dec
adc
add
fs
jp
hlt
xchg
fstp
in
jle
push
mov
popf
push
mov
popf
fs
bound
mov
jle
mov
mov
pop
pop
adc
xor
iret
fs
gs
dec
neg
mov
fcomp
dec
or
fs
jne
loopne
popf
in
dec
push
gs
jbe
pop
and
and
idiv
loop
retf
jbe
and
sti
jns
(bad)
fcomp
and
gs
enter
jbe
mov
mov
loope
loop
call
es
in
xor
cmp
mov
sub
push
push
mov
jp
xor
dec
outs
es
int
mov
push
mov
mov
adc
mov
bound
mov
cdq
mov
mov
xchg
sbb
cmc
dec
inc
cmp
mov
mov
push
cmps
in
js
loope
retf
xor
and
and
sti
sbb
(bad)
or
mov
push
dec
neg
pushf
cmp
popa
or
mov
fs
xchg
leave
fs
lods
fwait
pop
ins
xchg
shl
mov
fs
stos
leave
fs
pop
ins
test
pop
push
cwde
sub
pop
outs
es
and
mov
les
out
and
js
pop
dec
into
xor
(bad)
inc
push
and
xchg
push
neg
mov
hlt
pushf
pushf
xor
jno
xor
jne
xor
jns
cmp
outs
jmp
mov
sahf
fs
outs
shl
sbb
mov
sbb
(bad)
xlat
mov
push
and
neg
fwait
pop
push
sbb
jecxz
popf
fs
enter
std
pop
jp
cmp
int3
sbb
push
imul
pushf
in
sbb
cmp
arpl
imul
arpl
cmp
gs
xchg
sbb
pusha
xor
jne
or
jle
hlt
cmps
adc
xor
arpl
add
les
popf
xchg
push
neg
mov
mov
sub
mov
mov
xchg
shl
pushf
xchg
retf
jae
fadd
jns
fmul
inc
lahf
adc
gs
cmp
xchg
imul
fwait
out
in
xchg
shl
js
mov
leave
enter
pop
gs
call
push
neg
mov
mov
sub
cmc
enter
iret
ins
cwde
scas
pushf
and
fadd
and
lods
jb
or
fdiv
vpmaddwd
jle
ffree
push
adc
and
pop
hlt
and
or
hlt
and
hlt
and
or
hlt
and
or
and
out
or
hlt
and
or
hlt
and
inc
hlt
and
or
fs
gs
repz
(bad)
sti
pop
hlt
and
or
hlt
and
hlt
and
or
hlt
and
hlt
and
or
hlt
and
or
add
pushf
cdq
dec
mov
or
fs
(bad)
out
or
and
out
mov
(bad)
ds
hlt
cmp
hlt
and
push
sub
out
or
hlt
and
lods
ja
out
or
hlt
and
movs
scas
and
or
hlt
and
push
movs
mov
inc
popf
hlt
and
call
hlt
shr
or
lea
jg
fwait
mov
frstor
frstor
adc
mov
fbld
fbld
ror
jb
or
fdiv
adc
hlt
and
or
hlt
and
gs
or
hlt
and
shl
jle
in
push
push
pop
hlt
and
or
hlt
and
or
in
jns
or
hlt
and
or
hlt
and
or
fcmovb
push
adc
and
hlt
and
or
hlt
and
fdiv
std
gs
or
hlt
and
gs
repz
in
push
push
pop
hlt
and
or
hlt
and
or
in
jns
or
hlt
and
or
hlt
and
or
fisubr
dec
lods
hlt
and
or
hlt
and
add
and
je
mov
bound
xor
push
and
lds
mov
or
cmps
xlat
mov
je
mov
popf
in
jp
fs
fsubr
int
mov
pop
in
in
sbb
bound
arpl
jne
loopne
popf
in
hlt
mov
(bad)
enter
xchg
jo
fcom
test
cmp
xchg
out
mov
mov
sbb
outs
push
and
enter
xor
jnp
(bad)
out
hlt
jbe
shl
jle
adc
mov
imul
xchg
sar
xor
setge
cmc
hlt
mov
popf
jmp
sub
popf
fs
cmc
fsubr
int
hlt
mov
mov
xchg
jmp
mov
fstp
and
push
and
and
fs
pop
inc
cmp
jno
jb
pop
(bad)
xlat
sbb
push
xor
fwait
dec
and
aas
js
enter
jno
loop
retf
sub
je
nop
inc
ins
mov
jne
loope
popf
fidivr
pop
xchg
pop
jg
movs
dec
jae
popf
scas
push
push
in
popa
daa
adc
cmp
jb
inc
push
ins
in
ja
mov
les
movs
pop
cmp
fs
ins
push
inc
neg
hlt
sahf
int
les
pop
dec
and
mov
jl
fs
cdq
lahf
out
movs
inc
sub
jo
rcl
mov
dec
sub
add
mov
cdq
lahf
fwait
test
test
mov
push
test
daa
xor
cmp
fbld
jne
pop
repz
pop
jl
mov
es
fcomp
addr16
cmp
mov
mov
fist
repz
popa
popa
mov
mov
popa
push
push
jle
and
mov
imul
test
cmp
push
and
cmp
jl
popf
addr16
push
es
fcomp
jle
in
hlt
mov
popf
out
int3
mov
pop
imul
pop
xchg
stos
push
es
jae
mov
popf
mov
cmp
cmps
xor
imul
adc
mov
outs
xchg
mov
inc
jge
repz
and
ret
mov
inc
addr16
push
es
jne
(bad)
jle
out
jb
test
cmp
in
hlt
mov
cmp
dec
in
ja
inc
addr16
mov
jno
mov
sub
inc
jp
test
cmp
addr16
push
es
fcom
jl
popf
in
hlt
mov
cmp
mov
std
fcom
jle
popa
ins
mov
mov
ins
push
outs
test
mov
sub
pop
scas
jg
movs
jmp
test
gs
cmp
in
push
jmp
mov
es
sub
pop
scas
jg
movs
jmp
test
push
mov
cmp
in
xchg
pushf
adc
jno
and
adc
mov
push
test
sub
bound
mov
popf
push
mov
popf
push
mov
popf
fs
bound
mov
jle
and
jae
jecxz
popf
push
mov
fmul
sub
fs
call
fs
jne
sti
jle
in
inc
mov
hlt
stos
adc
cmp
cmps
in
js
pop
data16
fs
retf
xor
rcl
pop
xchg
mov
mov
push
cmp
jno
dec
adc
repz
fs
adc
(bad)
fbld
sbb
(bad)
cld
jle
fisub
push
pop
xchg
pop
mov
or
dec
cmp
lock
and
arpl
inc
neg
hlt
sbb
int3
and
xor
jo
call
scas
(bad)
in
jae
pop
add
dec
and
hlt
and
fwait
mov
mov
mov
adc
inc
mov
sbb
and
dec
sub
fwait
dec
and
mov
push
loope
and
xchg
xchg
sub
jle
data16
fnstcw
fs
repz
pop
xlat
aam
mov
sbb
les
call
pop
mov
pop
sub
repz
jg
fs
popa
test
inc
and
jg
fs
sub
sub
popf
fs
jnp
mov
ins
(bad)
fbld
bound
daa
xor
sbb
and
push
inc
xchg
repz
loope
and
push
popf
fs
jne
mov
popf
fwait
mov
pop
es
pop
xchg
repz
test
xor
arpl
mov
sbb
or
jnp
xor
pusha
fwait
dec
neg
fst
ins
es
loopne
repz
data16
sbb
xor
push
cmps
in
js
pop
outs
into
xor
cmc
call
mov
jmp
in
popf
fwait
mov
pop
es
gs
push
neg
nop
cmp
adc
dec
adc
dec
mul
popf
imul
popf
fwait
les
adc
jle
cdq
mov
neg
xchg
cmp
bound
inc
pushf
les
call
push
mov
call
mov
popf
fs
or
jg
popf
xor
ret
mov
xor
fwait
retf
sub
das
mov
bound
movs
xchg
inc
sub
jle
gs
call
fwait
les
adc
jle
mov
in
js
push
or
int3
mov
pop
sub
jle
push
mov
cdq
jmp
les
adc
jo
fs
pop
jl
js
mov
out
and
cmp
and
retf
push
adc
inc
neg
jbe
mov
fcomp
adc
or
jle
fstp
fstp
adc
imul
mov
pop
adc
sub
fwait
les
fs
or
inc
sti
jle
ins
jno
xchg
fwait
les
popf
push
jno
mov
clc
jle
fadd
popf
fs
cdq
adc
inc
neg
jno
ret
sub
xor
call
add
cmp
jo
xchg
mov
popf
xchg
push
neg
xchg
cmp
fcomp
mov
mul
xchg
fwait
les
xbegin
or
jmp
fstp
fs
or
idiv
jle
ins
jno
xchg
fwait
les
popf
push
jno
(bad)
in
dec
jg
in
jbe
call
fs
sub
test
sub
xor
retf
inc
imul
adc
xor
mov
jle
adc
jle
mov
ss
cmp
fcom
popf
fs
cdq
adc
inc
neg
mov
fbld
adc
inc
mul
popf
fs
popf
push
mov
popf
or
(bad)
fbld
aad
mov
popf
mov
jle
popf
mov
adc
mov
mov
mov
cmp
fbld
fisub
fcomp
in
js
or
(bad)
mov
not
push
neg
cwde
cmp
mov
loope
sbb
(bad)
and
fs
enter
jno
loop
retf
jbe
cmp
push
out
js
cmp
lock
in
outs
xchg
movs
in
inc
nop
adc
cs
mov
int
les
fwait
stc
jle
out
jb
pushf
cwde
cmps
push
xor
push
cwde
daa
sbb
movs
mov
sbb
in
inc
popf
adc
inc
adc
or
pop
mov
call
mov
call
and
fcomp
cld
imul
imul
popf
in
jbe
fcomp
cmp
popa
ins
dec
or
xor
or
cmp
popa
in
jae
pop
in
in
adc
mov
jbe
cmp
in
hlt
xchg
inc
mov
pushf
cmp
ins
in
hlt
add
jmp
mov
and
dec
lahf
dec
push
and
fmul
aam
adc
push
neg
xchg
loop
push
and
neg
push
std
pop
ins
out
fisttp
cmp
fmul
lods
xchg
pop
push
push
xchg
shl
mov
std
ins
adc
mov
gs
push
sbb
dec
jle
(bad)
stc
jno
sbb
sub
mul
stos
jle
sub
pop
add
stos
jle
or
jno
dec
adc
push
test
int3
mov
or
(bad)
fbld
imul
movs
sbb
dec
jno
and
fcomp
neg
mov
aam
adc
gs
xchg
cmp
imul
in
js
stc
jle
fs
fbld
retf
xor
retf
xchg
call
retf
jle
out
mov
dec
jle
rcr
fwait
mov
ins
dec
inc
neg
xor
bound
mov
sbb
ins
push
call
jle
(bad)
arpl
pop
jae
fs
pop
(bad)
in
jne
cmp
bound
movs
xchg
xor
mov
adc
imul
cmp
stos
bound
dec
and
cmps
bound
and
mov
popf
xor
ds
bnd
in
xor
bound
aad
popf
fwait
les
pusha
mov
popf
mov
cmp
cdq
dec
neg
sbb
adc
pop
push
mov
and
sub
lods
jp
(bad)
out
jbe
mov
fldcw
ins
es
call
fs
pop
ins
fnstenv
ins
es
sub
pop
cmp
mov
cmp
fs
push
xor
xchg
repz
ror
arpl
mov
pop
ins
pop
pand
xchg
fs
add
dec
std
addr16
int3
pop
jne
idiv
fst
jle
sub
popa
fwait
dec
or
fs
shl
jle
mov
mov
popf
mov
je
fs
push
xor
xchg
repz
ror
arpl
mov
pop
ins
(bad)
es
sub
repz
mov
popf
or
mov
push
xor
xchg
repz
ror
arpl
mov
pop
ins
xor
jne
hlt
jle
fnstsw
mov
jnp
inc
pop
mov
(bad)
fs
add
dec
sub
(bad)
arpl
repz
mov
cmp
fwait
les
jbe
cmp
out
xor
bound
inc
cmp
xor
(bad)
fs
pop
jo
mov
jne
hlt
jle
fnstsw
mov
jnp
ja
data16
es
sub
sub
popf
xor
fbld
popa
fwait
dec
xor
jne
jne
hlt
jle
fnstsw
mov
jnp
ja
data16
es
sub
sar
popf
xor
aad
mov
sahf
xchg
repz
ror
arpl
mov
pop
ins
pop
jnp
fs
xchg
fs
add
dec
std
addr16
int3
pop
jne
cmc
jle
fst
jle
sub
popa
fwait
dec
or
fs
ins
and
imul
inc
neg
jnp
popf
or
push
jecxz
pusha
xchg
repz
fldcw
pusha
fwait
out
push
and
and
cmp
popa
fwait
dec
or
fs
xor
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
or
push
jecxz
and
fld
es
jne
cmc
jle
out
outs
sbb
adc
fs
das
fldenv
xchg
fs
add
dec
std
addr16
int3
ins
cmc
jl
cmp
fwait
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
mov
fs
retf
popa
fwait
dec
xor
jne
jne
cmc
jle
fnstsw
mov
jnp
ja
data16
es
sub
xchg
cmp
in
push
mov
xchg
repz
adc
and
in
es
jne
bnd
out
push
fcomi
jle
fnstsw
mov
jnp
ja
mov
es
sub
outs
cmp
xchg
in
inc
mov
xor
bound
aas
cmp
popf
fs
push
xor
xchg
repz
ror
arpl
mov
pop
ins
pop
pop
fisub
xchg
fs
add
dec
std
addr16
int3
pop
jne
bnd
fst
jle
sub
popa
fwait
dec
or
fs
leave
daa
mov
push
mov
mov
sbb
mov
popf
out
mov
cdq
dec
jle
cmp
jle
mov
dec
jle
xchg
cwde
mov
xor
pop
fwait
dec
sbb
addr16
bound
dec
and
(bad)
cld
arpl
sti
pop
fwait
dec
adc
dec
sbb
pop
cmp
popf
std
inc
xchg
cmps
shr
pushf
or
mov
ror
jo
sahf
in
and
bound
jbe
retf
jle
fwait
dec
sub
ds
cmp
jmp
dec
sub
repz
out
push
loope
and
dec
sbb
fwait
dec
retf
imul
mov
bound
sti
popa
fwait
dec
or
fs
jmp
mov
mov
push
cmp
pop
fwait
dec
adc
mov
xchg
fs
add
dec
std
addr16
int3
ins
cmc
cmp
popf
fwait
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
mov
fs
retf
popa
fwait
dec
xor
jne
jne
lock
fnstsw
mov
jnp
ja
data16
es
sub
stos
cmp
xor
bound
mov
sbb
xor
bound
dec
and
call
sbb
inc
jg
in
ja
sbb
jle
and
and
jg
fs
popf
fs
sbb
test
jle
out
hlt
bound
pop
xor
bound
mov
popf
out
xor
bound
dec
and
push
cmp
xor
bound
lock
out
jb
jmp
xor
pushf
les
and
inc
mov
xor
bound
dec
and
repz
bound
leave
sbb
xor
or
fs
imul
xor
bound
dec
and
data16
inc
and
dec
or
fs
jno
mov
push
mov
inc
neg
ja
popf
or
mov
push
xor
xchg
repz
ror
arpl
mov
pop
ins
pop
(bad)
fs
xchg
fs
add
dec
std
addr16
int3
ins
cmc
scas
inc
cmp
fwait
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
adc
cwde
mov
dec
retf
ins
fwait
dec
xor
xor
bound
mov
bound
retf
gs
dec
or
fwait
xor
bound
xor
arpl
repz
ror
arpl
mov
pop
ins
pop
ja
fs
xchg
fs
add
dec
std
addr16
int3
ins
cmc
cmp
popf
fwait
add
bound
mov
push
mov
inc
neg
outs
inc
popf
or
mov
push
xor
xchg
repz
ror
arpl
mov
pop
ins
pop
(bad)
mov
fs
add
dec
std
addr16
int3
ins
cmc
jl
cmp
fwait
add
bound
mov
push
mov
repz
ror
arpl
mov
pop
ins
or
jnp
xor
bound
ret
inc
popf
or
mov
push
xor
pop
mov
and
mov
popf
std
inc
xchg
out
or
bound
inc
cmp
xor
mov
je
inc
mov
fs
add
dec
std
addr16
int3
ins
cmc
cmp
popf
fwait
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
mov
fs
retf
popa
fwait
dec
xor
jne
adc
inc
cwde
adc
jne
pusha
fwait
cmp
popf
fnstsw
mov
jnp
ja
data16
es
sub
mov
popf
xor
popf
or
mov
push
xor
pop
mov
and
mov
popf
std
inc
xchg
out
or
bound
inc
cmp
xor
mov
je
push
ins
es
sub
cmovo
in
inc
push
ins
in
ja
jmp
outs
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
cmc
js
cmp
fwait
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
cmc
jle
cmp
fwait
add
bound
mov
push
mov
mov
push
cmp
pop
fwait
dec
adc
mov
xchg
fs
add
dec
std
addr16
int3
ins
cmc
jl
cmp
fwait
add
bound
mov
push
mov
dec
and
sti
popa
fwait
dec
or
fs
dec
pop
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
adc
mov
adc
fnstcw
es
sub
or
xor
popf
or
mov
push
xor
xchg
repz
ror
arpl
mov
pop
ins
pop
das
mov
addr16
add
dec
test
mov
push
(bad)
arpl
repz
mov
inc
popf
xor
ins
in
ja
mov
outs
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
cmc
mov
add
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popa
fwait
dec
xor
jne
sbb
jecxz
popf
fs
ret
mov
fs
add
dec
std
addr16
int3
pop
jne
lea
fst
jle
sub
popa
fwait
dec
or
fs
xor
mov
repz
ror
arpl
mov
pop
ins
fstp
fstp
fstp
fs
fstp
mov
in
xor
bound
inc
neg
add
bound
mov
mul
imul
dec
and
pop
out
movs
fs
sub
inc
popf
fs
retf
popa
fwait
dec
xor
(bad)
jne
fs
cwde
adc
or
mov
popf
fs
jno
dec
xor
cmp
and
mov
jb
adc
xor
retf
and
cmp
gs
bound
adc
cwde
xchg
mov
push
push
mov
jle
loope
and
xchg
push
pop
mov
mul
jb
mov
sbb
fnstcw
xor
push
mov
mov
fcomp
fstp
pop
pop
cmp
or
xchg
fbld
popf
xor
cmc
mov
cmp
or
nop
fbld
jae
mov
sahf
fs
jne
pop
and
add
xor
fwait
sbb
sub
sub
(bad)
cmp
mov
jp
xor
pusha
fwait
dec
neg
adc
pusha
fwait
dec
jle
and
jmp
and
xchg
out
mov
jle
jmp
xor
lods
mov
mov
jne
mov
out
in
adc
mov
fucomip
and
pusha
fwait
dec
mul
dec
neg
pop
cmp
sbb
and
dec
xchg
test
xor
and
in
pushf
es
add
mov
sti
jmp
rcl
and
jnp
fs
sbb
and
dec
xchg
imul
cmc
adc
dec
and
cmp
pusha
fwait
dec
repz
outs
mov
leave
data16
adc
cmp
xchg
fs
jp
xor
pusha
fwait
dec
neg
mov
fbld
stos
fs
sbb
dec
and
jbe
lea
mov
sbb
dec
and
mov
std
push
mov
int
sti
inc
popf
fnstcw
fs
sbb
dec
and
mov
sub
mov
sbb
fwait
xor
mov
pop
iret
stos
fs
pop
(bad)
retf
jl
xor
jne
dec
and
jbe
cdq
gs
adc
dec
and
repz
dec
and
mov
sub
dec
and
dec
sub
fwait
add
pusha
fwait
dec
sub
fwait
add
pusha
fwait
dec
sub
loope
and
xchg
jnp
dec
sbb
clc
dec
and
pop
inc
stos
fs
gs
dec
neg
jno
popf
data16
cmc
les
popf
jmp
dec
cs
mov
in
dec
push
gs
jbe
sbb
dec
and
dec
or
fs
dec
jb
dec
neg
loopne
and
jbe
(bad)
mov
sbb
dec
and
mov
pop
js
xchg
or
popf
fs
jns
dec
sbb
dec
jle
in
dec
mov
xor
pusha
fwait
dec
neg
or
pusha
fwait
dec
jle
js
mov
bound
mul
dec
neg
xor
arpl
pop
and
dec
or
fwait
dec
mul
test
adc
dec
and
adc
mov
popf
fs
jle
fs
retf
xor
sti
test
in
imul
or
(bad)
fbld
jae
mov
sbb
pop
out
movs
fs
pop
je
sti
cli
cdq
dec
sbb
jmp
dec
cs
adc
popf
mov
mov
cmc
mov
dec
popf
fs
cli
cdq
dec
sbb
jns
inc
adc
push
popf
sbb
jle
push
test
in
and
dec
and
inc
jle
mov
jp
fs
sbb
loop
add
fst
es
sbb
pop
ds
dec
std
pop
push
mov
mov
fwait
dec
jle
js
fild
cdq
dec
sbb
out
loop
fwait
dec
jle
mov
cmp
sub
(bad)
dec
popf
cmp
stc
cdq
dec
adc
mov
mul
cmp
test
in
dec
jg
in
jbe
sub
dec
and
cmp
add
jmp
xor
sub
cmp
jne
pushf
inc
cdq
adc
inc
neg
and
popf
fs
cdq
adc
pop
neg
les
retf
test
in
jae
adc
dec
sub
fs
pop
add
sub
dec
mov
hlt
xchg
adc
dec
or
cmp
mov
dec
popf
cmp
mov
leave
fcomp
mov
xchg
shl
mov
cmp
lea
popf
mov
dec
popf
cmp
popf
cmp
lock
fadd
cmp
test
mov
xor
out
stos
fs
pop
push
inc
std
pop
popa
loope
lea
jle
pushf
mov
adc
dec
or
jmp
loope
gs
mov
bound
mov
repz
jno
xor
fnstenv
jne
cmp
mov
cmp
cwde
mov
xchg
shl
mov
and
dec
popf
fs
gs
jle
or
sub
fstp
fs
scas
scas
fs
pop
in
dec
dec
gs
jbe
bound
pop
pop
scas
fs
fcomp
jle
xor
scas
fs
gs
dec
neg
hlt
xchg
cmp
mov
xor
fwait
and
mov
dec
popf
fs
retf
jbe
sbb
imul
retf
adc
fs
cdq
adc
or
pushf
pushf
cmp
bound
cmp
and
mov
cmc
add
popf
mov
dec
popf
cmp
pcmpgtb
xchg
loop
sub
ror
xor
test
dec
sub
fs
gs
neg
jno
jbe
jbe
and
jle
mov
cmp
and
mov
retf
mov
dec
popf
fs
sub
mov
mov
test
dec
sub
fs
gs
dec
neg
jno
jbe
pop
aam
movs
pop
js
mov
fs
and
lods
jb
adc
or
fs
stc
push
mov
into
xor
cmc
shr
std
mov
ins
dec
inc
neg
xor
popf
fs
cwde
adc
inc
mov
into
or
jg
fs
pop
lods
fs
ins
dec
inc
neg
push
(bad)
mov
in
jbe
xchg
in
imul
pop
movs
and
dec
std
pop
ins
fldcw
ins
es
jne
test
out
jbe
xchg
inc
cwde
adc
inc
mov
ins
mov
fnstenv
ins
es
sbb
bound
ret
test
ins
pop
jecxz
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
test
out
jbe
out
mov
popf
xchg
push
neg
mov
(bad)
in
ja
cmc
push
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
out
popf
or
push
jecxz
and
bound
fldenv
jae
mov
and
bound
pop
xor
je
push
test
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
test
out
jbe
push
inc
cmp
jmp
dec
cs
test
out
jbe
xchg
or
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
test
out
jbe
mov
mov
mov
jnp
dec
pop
retf
scas
fs
(bad)
fs
add
dec
sub
fnstenv
push
lds
mov
bound
mov
push
mov
fldcw
mov
sbb
bound
pop
ins
es
sbb
bound
imul
jo
mov
jne
cmp
mov
mov
jnp
jo
data16
es
sbb
bound
jmp
ins
fnstenv
mov
sbb
bound
adc
ins
xor
jne
cmp
mov
mov
jnp
jo
data16
es
sbb
bound
aas
scas
fs
pop
ins
fnstcw
es
sbb
bound
push
scas
fs
pop
ins
pop
xchg
scas
fs
xchg
fs
add
dec
std
addr16
int3
push
jne
cmp
sar
sub
popf
test
retf
nop
fbld
popf
test
retf
dec
popf
xor
fbld
popf
test
int
outs
dec
popf
xor
popf
fs
cwde
adc
pop
mov
jne
cmp
mov
mov
jnp
jo
data16
es
sbb
bound
xlat
scas
fs
pop
ins
fnstenv
sbb
bound
jmp
fs
pop
ins
pop
das
scas
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
cmp
jne
cmc
jle
cmp
jmp
dec
cs
cmp
jne
adc
cwde
mov
pop
outs
scas
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
cmp
jne
bound
mov
and
mov
sbb
bound
xchg
lods
fs
pop
je
mov
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
cmp
jne
cmc
fs
cmp
jmp
dec
cs
cmp
jne
adc
or
fs
xchg
fs
add
dec
std
addr16
int3
push
jl
cmp
jmp
dec
cs
cmp
jne
jne
cmp
pop
jge
sub
pop
je
jle
xor
popf
test
retf
nop
fbld
popf
test
retf
dec
popf
xor
popf
or
mov
push
xor
xchg
repz
loope
sahf
bound
mov
push
mov
push
neg
sub
in
ja
inc
mov
jle
loope
sahf
bound
mov
push
mov
mov
and
mov
popf
std
inc
xchg
sahf
mov
mov
(bad)
fbld
popf
test
int
mov
mov
popf
or
mov
push
xor
push
mov
and
mov
popf
std
inc
xchg
jmp
dec
sub
cmp
cmp
jmp
dec
sub
cmp
mov
cmp
jmp
dec
cs
cmp
fstp
data16
fnstcw
fs
sub
popf
in
xor
inc
fwait
dec
push
jecxz
popf
jmp
dec
cs
pushf
jle
push
mov
and
repz
bound
dec
retf
popa
mov
pushf
jle
fwait
add
inc
fwait
dec
xchg
lods
dec
mov
and
xchg
push
neg
test
(bad)
in
ja
pop
and
js
xchg
mov
adc
out
and
lods
jb
adc
xor
into
xor
shr
cdq
jle
xchg
push
neg
loopne
and
dec
and
cmp
xchg
aaa
pop
aas
mov
mov
enter
lahf
gs
or
mov
popf
cmp
sbb
mov
mov
jne
sahf
jle
mov
lea
cmp
cmc
pusha
pop
cmp
mov
sti
cmp
je
jle
loope
and
xchg
ror
cmc
pusha
mov
popf
jmp
dec
cs
retf
pop
cmp
or
nop
fbld
popf
xor
push
mov
xor
push
cdq
gs
adc
dec
and
repz
dec
and
mov
gs
neg
add
pusha
fwait
dec
sub
bound
dec
sbb
imul
cmp
loope
and
xchg
(bad)
jle
loope
and
repz
pop
dec
mov
mov
inc
or
loope
and
xchg
fstp
loope
and
xchg
sub
mov
dec
neg
xor
arpl
mov
sbb
mov
popf
out
out
fwait
dec
jle
js
mov
bound
push
idiv
jmp
dec
cs
push
and
dec
or
fwait
dec
mul
test
adc
dec
and
adc
mov
push
popf
fs
jg
fs
retf
xor
aas
fwait
jle
in
movs
sti
fs
sub
dec
and
fld
jae
mov
sbb
pop
xor
je
sti
loop
dec
sbb
jmp
dec
cs
adc
popf
mov
popf
cmp
cmc
mov
push
popf
fs
loop
dec
sbb
jns
imul
pushf
fs
popf
xchg
mov
jne
fwait
jle
in
dec
jg
in
jbe
cdq
gs
adc
and
jne
call
mov
jle
loope
and
xchg
xchg
aad
sbb
fwait
mov
xchg
loopne
jle
fs
adc
pop
add
fwait
dec
std
pop
ins
mov
jle
fstp
shl
sti
adc
pop
push
popf
xor
adc
sub
sub
mov
bound
dec
gs
fs
retf
or
fwait
jle
or
nop
fbld
mov
mov
cmc
outs
pop
cmp
xor
mov
mov
pop
jo
mov
jae
mov
or
jle
stc
sub
xchg
cmps
aaa
cmp
sub
dec
and
xor
sbb
dec
and
dec
retf
or
and
stc
dec
popf
fs
add
jle
loope
and
jle
xor
adc
add
xchg
lds
jle
pushf
mov
adc
fstp
rcl
mov
fs
sub
dec
and
cmp
add
cmp
ret
mov
pusha
mov
adc
xor
push
cmp
push
sbb
icebp
or
dec
mov
adc
dec
sub
fs
enter
lahf
je
adc
mov
mov
popf
fs
jne
xchg
jle
aaa
pop
retf
mov
mov
call
gs
add
jle
mov
popf
fs
popa
xor
jle
or
push
frstor
mul
mov
mov
pop
fdiv
jae
fs
cdq
adc
inc
neg
dec
sub
cwde
jle
jmp
pop
stos
mov
fwait
xchg
jle
in
dec
dec
gs
jbe
fcomp
jb
adc
or
fs
mov
xor
cmp
jmp
mov
call
fs
pop
ins
inc
or
in
dec
dec
gs
jbe
bound
jle
loope
mov
loope
jne
cwde
jle
push
mov
call
xchg
dec
or
fwait
xor
popf
lds
xchg
pop
ins
adc
cwde
xchg
fstp
mov
cmp
push
cmps
in
js
pop
push
fcomi
add
cmp
gs
jbe
pop
and
popf
(bad)
fincstp
gs
dec
neg
push
cmp
fnstcw
es
fmul
mov
adc
pop
mul
pushf
fs
test
add
fs
mov
jo
mov
fmul
mov
push
mov
loope
popf
or
jg
fs
dec
mov
lock
out
jle
in
inc
mov
bound
dec
jno
and
gs
sub
loopne
retf
xor
xlat
in
lods
mov
neg
mov
lahf
push
mov
popf
push
mov
pushf
push
mov
popf
push
mov
or
fstp
(bad)
fld
mov
ja
jb
xchg
jle
push
mov
not
sbb
repz
jnp
jle
push
mov
not
jne
lock
imul
gs
jbe
pushf
xor
dec
bound
iret
fbld
mov
mov
pushf
xor
dec
bound
rcr
fs
xchg
mov
mov
pushf
xor
dec
bound
fcmovnu
fs
cmps
mov
mov
gs
neg
mov
not
mov
lock
cmps
cdq
jle
push
mov
not
mov
xlat
cdq
jle
push
mov
not
or
(bad)
cdq
jle
push
mov
not
jmp
neg
xor
xor
dec
bound
xlat
fsub
mov
mov
pushf
xor
dec
bound
rcr
fs
adc
xchg
push
neg
cwde
cmp
lods
fwait
test
cs
leave
dec
mov
mul
adc
fwait
test
cs
(bad)
and
xchg
push
neg
pushf
cmp
enter
retf
adc
ja
xchg
dec
dec
jne
lock
cmps
xchg
jle
(bad)
xchg
fcmovnu
fldcw
popa
fwait
test
and
cwde
dec
dec
sbb
sti
xchg
jle
(bad)
(bad)
rcr
fldcw
popa
fwait
test
sub
mov
or
jle
pushf
inc
cdq
adc
dec
neg
dec
sub
adc
and
icebp
jle
cwde
dec
dec
mov
lock
add
sub
adc
and
push
dec
in
icebp
jle
cwde
dec
dec
add
xchg
jle
push
dec
sub
adc
sub
mov
dec
in
icebp
jle
cwde
dec
dec
mov
lock
jnp
jle
in
loope
fs
popa
fwait
test
and
mov
ds
sbb
popf
or
neg
fild
fsub
mov
fwait
test
sub
mov
inc
inc
mov
ds
aas
popf
or
neg
fild
fbld
mov
push
dec
neg
js
enter
jno
out
and
xchg
repz
dec
push
gs
jbe
push
adc
adc
mov
jne
dec
and
push
aas
popf
in
push
test
popf
xor
fwait
mov
lds
mov
xor
mov
fwait
test
and
cmp
popa
dec
hlt
mov
out
hlt
xchg
fstp
fs
int
ins
(bad)
fbld
jo
mov
popf
data16
jne
xchg
jle
(bad)
cmc
into
fsub
bound
rcr
fstp
push
(bad)
cmc
fcomp
sbb
push
movs
adc
or
jle
xor
mov
es
jg
repz
fs
or
retf
lock
pushf
inc
cdq
adc
pop
neg
mov
test
push
aas
popf
push
mov
test
add
popf
or
jg
cmp
gs
hlt
mov
mov
div
mov
int
ins
(bad)
fbld
jo
mov
popf
mov
push
sub
push
mov
popf
push
mov
cwde
push
mov
popf
push
mov
popf
or
jl
fstp
(bad)
jo
btc
pop
push
mov
not
cdq
retf
lock
stos
xchg
jle
push
mov
test
push
aas
popf
push
mov
test
add
popf
push
mov
jle
add
push
cmc
fs
int
lds
jo
mov
popf
mov
popf
adc
sub
mov
jb
test
push
mov
test
push
aas
popf
push
mov
test
add
popf
push
mov
jle
sbb
push
cmc
fs
int
xchg
xchg
fbld
jo
mov
popf
mov
pop
popf
fs
cs
popf
fwait
test
and
test
sub
or
jg
fs
popf
fs
mov
mov
popf
xor
test
es
jg
repz
fs
xor
retf
lock
fs
dec
test
fs
dec
(bad)
lock
je
push
pushf
fs
and
test
or
pop
cmp
push
mov
mov
jle
jo
aas
popf
push
mov
test
push
aas
popf
push
mov
test
add
or
jle
fld
addr16
int
ins
(bad)
fbld
jno
mov
popf
mov
popf
adc
pop
dec
aam
popf
or
xchg
fbld
cmc
daa
mov
popf
xor
jecxz
fs
loopne
repz
fnstcw
test
sbb
popf
mov
pop
popf
fstp
push
test
fsub
bound
into
fbld
pushf
fs
scas
or
jle
fild
or
(bad)
fbld
jno
mov
popf
mov
pop
popf
fs
sub
mov
popf
fwait
test
and
test
sub
gs
neg
aam
fs
xor
cmc
addr16
int
ins
(bad)
fbld
jno
mov
popf
mov
push
xor
mov
push
cmp
jne
jbe
lahf
sahf
dec
xor
retf
lock
fs
dec
(bad)
lock
je
inc
cmc
xor
popf
fnstcw
fs
out
mov
jle
xchg
push
mov
ins
inc
mov
ds
add
fs
popf
fwait
test
and
test
sub
or
jle
fld
mov
jle
fs
int
jmp
es
popf
mov
pop
popf
adc
sub
mov
popf
fwait
test
and
test
sub
push
(bad)
push
test
jle
cmps
mov
popf
or
jle
xor
xor
es
jg
repz
fs
or
int
jle
fs
dec
test
fs
dec
(bad)
lock
je
sbb
mov
test
loope
xchg
pop
cmp
push
mov
mov
xchg
sbb
popf
in
dec
dec
gs
jbe
popf
fwait
test
and
test
sub
push
out
xlat
gs
cmc
les
jle
xor
jo
es
jg
repz
fs
cmp
repz
fs
dec
test
fs
dec
std
aam
jle
jl
push
pushf
fs
or
mov
div
jle
in
push
inc
xchg
repz
ins
pop
cmp
or
jl
fs
mov
sbb
repz
fs
dec
test
fs
dec
std
aam
jle
jl
cld
popf
fs
pop
fs
div
jle
in
push
or
ins
pop
cmp
or
jl
fs
sti
mov
shl
adc
cwde
xchg
fstp
push
test
fsub
bound
into
fbld
test
mov
jle
xor
mov
xchg
mov
jle
fs
popf
mov
pop
popf
adc
and
test
and
test
sub
push
aad
push
jo
jle
in
push
inc
xchg
repz
ins
pop
cmp
or
jl
fs
jae
fs
mov
fs
dec
test
fs
dec
(bad)
lock
jae
in
fs
xor
mov
idiv
jle
in
push
jbe
repz
pop
cmp
push
mov
dec
inc
mov
ds
add
fwait
or
jp
hlt
call
dec
and
lods
jb
adc
xor
dec
jno
push
sbb
adc
(bad)
call
fwait
dec
neg
pop
xchg
fbld
jbe
dec
sbb
retf
lock
pushf
cwde
xchg
fstp
push
mov
pop
mov
xchg
push
neg
mov
mov
retf
mov
pop
popf
fstp
push
test
fsub
retf
out
hlt
xor
dec
push
fcom
push
popf
xor
cmc
mov
pop
xchg
fbld
lahf
fs
mov
and
aas
popf
push
mov
test
push
aas
popf
push
mov
neg
cmp
hlt
mov
mov
div
push
fs
int
pusha
xchg
fbld
jo
mov
popf
mov
popf
adc
and
dec
neg
mov
test
push
aas
popf
push
mov
test
add
popf
or
jg
cmp
gs
hlt
mov
mov
div
mov
int
ins
(bad)
fbld
jo
mov
popf
mov
pop
popf
adc
sub
push
mov
popf
push
mov
cwde
push
mov
popf
push
mov
popf
or
jl
fstp
(bad)
jo
xchg
mov
push
mov
not
cdq
retf
lock
das
xchg
jle
push
mov
test
push
aas
popf
push
mov
test
add
push
movs
adc
or
jle
xor
mov
adc
pop
aas
mov
leave
lock
pushf
mov
adc
frndint
jno
mov
popf
or
jg
fs
dec
jne
lock
lahf
scas
jle
or
xchg
fbld
cmc
daa
mov
popf
fwait
test
jns
mov
sbb
test
mov
mov
pushf
or
jg
fs
dec
jne
lock
mov
movs
adc
push
mov
shl
jle
push
pop
rcr
fs
iret
and
fwait
test
and
test
sub
gs
not
push
push
fnstcw
in
push
inc
xchg
repz
jmp
mov
cmp
jle
in
cmp
fcomp
fs
cdq
adc
pop
neg
mov
test
push
aas
popf
push
mov
test
add
fild
jo
rcr
xor
cmc
mov
cmp
fbld
jne
scas
jle
(bad)
popf
rcr
fs
dec
push
fwait
test
and
test
sub
or
jle
fist
cmc
jo
jle
or
jle
xor
and
jg
repz
fs
pop
and
aad
jle
xchg
dec
add
push
test
fsub
bound
into
fsub
test
mov
pop
fs
cmc
fs
int
sti
xchg
fbld
jo
mov
popf
mov
popf
adc
and
test
and
test
sub
or
jle
fs
popf
fs
stc
or
jle
xor
gs
mov
jg
repz
fs
xlat
and
leave
lock
mov
fstp
push
test
fsub
bound
into
fsub
div
fld
popf
fs
cmp
fs
int
mov
pushf
jo
mov
popf
mov
pusha
popf
fs
cs
popf
fwait
test
and
test
sub
or
jg
fstp
or
popf
xor
clc
jbe
mov
jg
repz
fs
dec
and
aad
jle
fs
dec
test
fs
dec
(bad)
lock
je
sbb
mov
idiv
jle
fs
ret
jle
xchg
push
mov
gs
jle
les
cmp
push
mov
test
push
aas
popf
push
mov
test
add
fs
test
dec
or
int3
fbld
jno
mov
popf
data16
jne
lods
jle
(bad)
lods
fcmovnu
cmp
mul
test
fs
dec
std
aam
jle
jl
push
mul
fld
fs
int
ins
(bad)
fbld
jno
mov
popf
data16
jne
lods
jle
(bad)
cdq
rcr
fstp
push
test
fsub
bound
into
fbld
test
fnstcw
in
push
inc
xchg
repz
ins
pop
cmp
or
jl
fs
xor
retf
lock
fs
dec
test
fs
dec
(bad)
lock
jae
in
fs
frstor
jle
jp
jle
in
push
jbe
repz
pop
cmp
push
mov
mov
jle
cld
add
fwait
cmp
jne
inc
and
cmp
retf
xor
sub
and
jle
push
mov
sbb
fstp
fnstcw
xor
xchg
pop
out
adc
mov
popf
cmp
popf
fs
popf
jle
jle
add
pop
and
popf
fs
pop
fisubr
mov
jmp
hlt
or
les
pop
jne
popf
or
jle
in
ret
dec
std
pop
jl
and
not
ds
cmp
or
xchg
fbld
xchg
fwait
les
pop
push
and
dec
ja
adc
repz
inc
pop
es
pushf
fs
jne
and
add
lods
jb
adc
xor
into
xor
dec
(bad)
stos
loopne
pop
ss
push
cmp
popa
call
aad
mov
cmc
(bad)
jno
popf
jmp
dec
cs
test
arpl
fs
push
cmp
loopne
mov
mov
mov
popf
fwait
dec
or
xor
bound
outs
cmc
clc
jo
popf
jmp
dec
cs
test
jg
in
ja
loopne
mov
mov
mov
popf
fwait
dec
or
xor
bound
outs
cmc
jns
cmp
jmp
dec
cs
test
sbb
loope
and
mov
sbb
sub
popf
xor
bound
outs
cmc
cmp
cmp
jmp
dec
cs
cmps
jle
in
sbb
loope
and
mov
sbb
jne
test
repz
bound
mov
fs
loopne
mov
mov
popf
fwait
dec
or
xor
sbb
jne
mov
mov
sbb
bound
out
fs
loopne
mov
mov
popf
fwait
dec
or
xor
bound
outs
cmc
push
jo
popf
jmp
dec
cs
cmps
jle
in
jbe
fs
loopne
mov
mov
popf
fwait
dec
or
xor
bound
outs
cmc
add
popf
jmp
dec
cs
cmps
jle
push
mov
popf
or
xchg
fbld
jbe
mov
sbb
bound
jle
and
dec
xor
or
mov
xor
dec
xor
mov
mov
ins
in
ja
scas
call
cdq
fs
js
loope
retf
xor
or
and
mov
jp
hlt
xchg
cmp
popf
fs
push
jl
jle
xor
sub
bound
jno
xchg
push
mov
jne
test
sbb
aas
js
cdq
fs
js
pop
push
xchg
fs
retf
xor
loope
jle
imul
push
neg
add
in
ja
ins
gs
neg
pop
mov
jo
dec
or
fs
xchg
fs
add
dec
test
dec
and
dec
jg
jne
pop
pop
es
sbb
pop
dec
mov
ins
push
inc
neg
or
gs
dec
jl
jne
aas
pop
es
sbb
pop
outs
mov
and
les
push
jb
popf
jmp
dec
cs
movs
jle
in
lea
dec
jp
jne
add
mov
sbb
pop
mov
push
inc
mov
push
cmp
jge
dec
adc
dec
sbb
loope
mov
loope
sub
jle
fld
bound
push
mov
jo
dec
or
fs
outs
pushf
dec
sbb
loope
mov
loope
sbb
xchg
cwde
mov
xor
outs
pushf
dec
adc
loope
mov
loope
std
jno
jle
fld
bound
and
xchg
dec
or
fs
outs
pushf
dec
adc
loope
mov
loope
mov
mov
adc
mov
adc
xor
outs
pushf
dec
adc
loope
mov
loope
xchg
jno
jle
fld
bound
mov
fbld
jo
dec
or
fs
outs
pushf
dec
adc
loope
mov
loope
inc
jo
jle
fld
bound
popa
mov
jo
dec
or
(bad)
sub
mov
bound
(bad)
jno
dec
push
in
popf
or
into
fbld
pop
es
mov
push
mov
inc
and
dec
dec
jmp
xchg
dec
sbb
xchg
into
adc
cmpxchg
mov
cmp
lods
mov
add
fwait
xor
gs
dec
ja
imul
fs
jbe
mov
sbb
fwait
mov
sbb
mov
popf
in
and
inc
xchg
loope
jg
fs
bound
xor
pushf
fs
sbb
cmp
adc
dec
xchg
loope
mov
loope
and
xchg
pop
jl
jle
mov
dec
and
test
jmp
pop
xchg
pop
mov
or
dec
cmp
or
gs
dec
jno
pop
mov
popf
out
push
xor
fldz
sub
mov
scas
(bad)
repz
loope
and
xchg
leave
jl
jle
mov
jg
fs
sub
mov
mov
loope
xchg
loope
movs
jl
jle
mov
mov
popf
fs
popa
pushf
dec
or
xor
adc
dec
xchg
loope
test
dec
and
xchg
cdq
jl
jle
outs
pop
cmp
jmp
dec
cs
test
push
loope
and
xchg
shl
adc
dec
and
mov
popa
pushf
dec
or
fs
popa
pushf
dec
or
xor
sbb
pop
xchg
mov
ins
xchg
push
neg
mov
ja
pushf
or
xchg
fbld
popa
cwde
dec
or
fwait
xor
sbb
mov
popf
jmp
dec
std
pop
popa
loope
test
jle
in
xor
gs
dec
jmp
mov
jne
loop
jg
fs
retf
gs
dec
xor
or
xchg
fbld
popa
pushf
dec
or
xor
fbld
popa
call
popf
fs
popa
call
popf
fs
inc
xchg
dec
xor
dec
sbb
je
sti
inc
xchg
dec
sbb
dec
jle
imul
xchg
dec
sbb
fwait
mov
dec
in
inc
push
ins
in
ja
sub
and
cs
mov
xor
arpl
cmps
jle
out
outs
adc
dec
xchg
loope
lea
jle
loope
mov
cmp
popa
call
popf
fs
inc
xchg
dec
adc
push
icebp
xchg
mov
mov
adc
inc
xchg
cmp
popa
pushf
dec
or
fwait
dec
xchg
push
jne
jle
xchg
cwde
mov
cmp
popa
pushf
dec
or
fs
popa
call
gs
dec
repz
mov
jne
mov
xchg
dec
mul
imul
adc
mov
ins
popf
fs
mov
loope
and
sub
bound
dec
std
pop
push
mov
and
pop
xlat
(bad)
fs
ins
dec
inc
neg
icebp
or
fs
je
dec
and
mov
enter
stc
ja
jle
arpl
sub
mov
imul
inc
loopne
popf
or
mov
cmc
gs
popf
mov
ins
popf
fs
cmp
lds
mov
outs
popf
fstp
sub
or
jle
and
jle
popa
loope
fsub
popf
cmp
cmc
xor
aas
popf
mov
outs
popf
fld
or
or
outs
popf
fs
icebp
jno
jle
mov
fnstcw
fs
sbb
pop
and
stos
outs
popf
fstp
hlt
add
fwait
dec
cs
sub
mov
imul
fs
cwde
sbb
cmp
ins
pusha
pop
in
repz
popa
leave
mov
ret
mov
xor
jno
dec
neg
push
push
or
adc
inc
xchg
pop
sahf
mov
fs
mov
mov
neg
jbe
adc
cmp
cmp
push
xchg
bound
pop
push
fs
and
loopne
pop
xchg
pop
mov
or
dec
cmp
shl
outs
in
and
sbb
rcr
pop
mov
shl
dec
jle
or
mov
les
loope
xchg
bound
pop
and
mov
adc
push
xchg
bound
repz
mov
cmp
jmp
dec
cs
movs
jle
push
mov
sbb
pop
and
dec
or
fs
mov
int
pop
mov
cmp
test
test
jb
fbld
popf
jmp
dec
cs
mov
push
inc
in
jb
pushf
mov
jno
cmp
cmc
mov
and
fbld
ja
mov
(bad)
lock
mov
or
jae
dec
repz
pop
cmp
fst
sbb
in
xor
fs
daa
mov
jle
hlt
add
(bad)
sub
ja
jle
fstp
dec
xlat
mov
jle
jns
jle
xchg
xlat
(bad)
xchg
push
neg
rcr
in
jb
sub
hlt
add
fstp
and
xchg
in
ja
jle
fst
bound
repz
inc
mov
popf
xchg
xlat
fistp
scas
pusha
popf
fs
ja
mov
or
stos
pop
cmp
or
rcr
fs
inc
mov
pop
and
ret
and
jnp
fbld
popf
fs
cmp
dec
fs
popf
adc
add
mul
mul
jle
fnstcw
fs
push
popf
retf
jne
mov
retf
push
popf
fstp
fstp
mov
popf
fs
and
jmp
xor
jb
dec
cs
mov
retf
jb
dec
std
push
fwait
icebp
(bad)
mov
push
mov
call
fld
bound
pop
mov
jmp
mov
test
add
jle
xchg
ret
fs
and
jmp
xor
jb
dec
cs
mov
retf
jb
dec
std
push
fwait
icebp
(bad)
mov
push
mov
call
fld
bound
pop
jecxz
fs
popf
jmp
mov
test
add
jle
adc
jle
cmp
neg
enter
out
xor
jo
dec
neg
mov
jo
mov
fadd
neg
test
jnp
in
jle
and
inc
push
imul
popf
fstp
stos
mov
stos
cmc
addr16
jle
push
mov
push
imul
fdivr
cmp
mul
lea
fdivr
jle
mov
mov
sbb
cmps
sub
push
fs
popf
jmp
pop
jno
fstp
push
test
fsub
mul
mul
mul
popf
scas
mov
je
repz
lea
push
mov
test
ds
aas
popf
or
mov
mul
xchg
fs
popf
mov
iret
bound
aaa
jae
mov
xor
or
xchg
fbld
nop
fs
pop
mov
jle
mov
sti
xor
mov
pop
stos
xchg
fs
pushf
xor
jmp
mov
pop
loope
nop
bound
xor
adc
or
sbb
pop
and
mov
loopne
repz
ss
popf
or
jle
in
mov
fwait
dec
std
pop
jl
mov
in
mov
repnz
cmp
adc
sbb
popf
push
mov
jmp
jle
dec
mov
fist
int3
pop
and
fld
call
push
mov
xchg
push
jle
mov
jb
fstp
nop
mov
popf
push
mov
test
push
aas
popf
mov
jo
fs
data16
push
cs
mov
inc
fisub
fadd
mov
mul
mul
jns
pop
setae
pop
adc
aas
js
lea
js
pop
inc
lahf
fs
retf
xor
inc
loopne
mov
jle
out
hlt
jb
pushf
mov
jle
sbb
cli
repz
je
mov
jg
fs
jle
ja
jle
adc
jle
call
mov
fs
sbb
mov
popf
lea
jbe
xor
mov
xor
push
push
push
fnstsw
jle
dec
neg
mov
in
enter
push
jno
repz
mov
popf
bound
xor
pusha
fwait
dec
mul
dec
neg
xor
pusha
fwait
dec
cs
pop
and
push
nop
fs
pop
imul
sbb
dec
(bad)
lock
ja
jle
ins
jno
call
fwait
dec
push
sbb
jp
icebp
popa
and
jmp
cdq
dec
and
call
mov
and
dec
inc
dec
adc
call
dec
and
dec
xor
push
mov
test
add
popf
mov
popf
cmp
pop
cdq
dec
adc
repz
imul
cmc
mov
jne
popf
in
lock
mov
mov
xor
mov
mov
jne
pop
and
repz
adc
cmp
mov
mul
dec
neg
int
popf
cmp
cmp
push
aas
popf
pop
hlt
jbe
loope
jns
fstp
jg
jle
(bad)
in
jns
or
fs
jp
xor
pusha
fwait
dec
neg
mov
fsub
xchg
imul
fs
call
fs
scas
arpl
cdq
adc
pop
and
mov
sbb
out
cs
fstp
or
mov
mov
and
mov
xor
mov
cs
mov
es
sbb
or
and
mov
xor
mov
popf
push
mov
call
fs
sbb
add
mov
lea
fisubr
es
xchg
pop
mov
xor
mov
nop
or
outs
lea
lea
and
pop
xlat
xchg
fs
pop
inc
fistp
out
cmps
pusha
fwait
dec
jle
shr
fwait
mov
gs
neg
xor
pusha
fwait
dec
cs
mov
call
mov
sbb
mov
sbb
xor
dec
jne
lock
fwait
mov
jg
fwait
dec
jle
inc
fstp
fldcw
ja
mov
popf
mov
jne
fs
dec
jne
lock
jae
jle
lea
popf
xor
pop
loope
and
dec
sbb
mov
mov
gs
jle
fwait
mov
popf
jmp
dec
bound
iret
fbld
xchg
fs
adc
and
lea
adc
gs
ret
arpl
gs
outs
es
add
and
dec
std
pop
push
mov
mov
or
xchg
fbld
jne
mov
cli
sub
mov
adc
push
mov
popf
fadd
popf
fs
cdq
adc
push
and
mov
bound
dec
and
mov
sbb
pop
jmp
fs
pop
je
sbb
xor
dec
add
mov
jg
fwait
dec
jle
inc
fstp
fldcw
mov
popf
mov
je
fs
dec
add
mov
jp
fs
pushf
fwait
dec
sbb
pop
mov
call
adc
push
jbe
repz
fs
dec
xchg
fs
test
adc
popf
mov
popf
fs
mov
sbb
bound
xchg
shl
bound
mov
bound
lea
inc
fstp
fst
popf
mov
popf
fs
dec
add
mov
jp
fs
popf
fwait
dec
sbb
or
gs
neg
xor
bound
inc
and
push
lods
mov
jle
loope
and
xchg
xor
mov
mov
adc
mov
bound
add
fs
pushf
fwait
dec
sbb
(bad)
repz
fs
add
add
fs
jb
fs
gs
push
neg
or
jbe
sbb
and
dec
or
fs
push
mov
mov
popf
fs
pushf
fwait
dec
or
and
mov
sbb
fwait
mov
mov
or
xchg
fbld
jne
mov
push
xor
mov
je
mov
popf
in
dec
push
gs
jbe
sbb
and
dec
or
fs
push
mov
popf
xor
popf
fs
pushf
fwait
dec
or
and
mov
sbb
fwait
mov
mov
or
xchg
fbld
jne
mov
push
xor
mov
je
mov
popf
jmp
dec
std
push
fwait
icebp
(bad)
mov
out
jge
inc
fstp
(bad)
es
popf
mov
jbe
fs
dec
mov
lock
jnp
jle
lea
sti
bound
mov
loope
and
cli
cwde
gs
and
mov
mov
or
xchg
fbld
jne
mov
push
xor
mov
je
mov
popf
in
and
dec
and
jge
fnstsw
xchg
mov
bound
dec
and
mov
sbb
pop
fwait
xchg
fs
pop
je
sbb
xor
dec
mov
sub
jg
fwait
dec
jle
inc
fstp
fldcw
es
popf
mov
jns
fs
dec
mov
add
jl
fs
arpl
mov
loope
and
cli
cwde
gs
and
mov
mov
or
xchg
fbld
jne
mov
popf
fwait
test
and
mov
je
mov
popf
in
and
jg
jmp
xor
pushf
les
arpl
sbb
jb
lahf
jle
jmp
dec
cs
inc
and
push
lods
mov
jle
loope
and
xchg
sub
adc
push
mov
cdq
push
mov
popf
or
jle
and
xor
mov
adc
inc
and
xchg
cmp
jge
dec
adc
fwait
cmp
mul
imul
mov
pop
es
call
int
jle
lods
dec
ds
popf
cmp
ins
cdq
dec
or
and
sub
mov
popf
fstp
loope
and
adc
or
(bad)
fbld
imul
cmp
pusha
fwait
dec
std
push
fwait
icebp
(bad)
mov
push
mov
or
repz
dec
retf
imul
mov
sbb
jl
jl
cmp
fwait
add
arpl
mov
sbb
push
inc
popf
fs
retf
imul
test
sub
bound
jle
pusha
fstp
fnstcw
fs
push
mov
cmps
mov
popf
in
xor
arpl
bnd
push
mov
popf
push
mov
sub
jnp
popf
fs
or
lods
dec
ds
popf
cmp
ins
cdq
dec
or
es
sub
mov
jle
loope
and
adc
or
xchg
fbld
imul
dec
jg
in
jbe
sub
xor
fs
in
mov
mov
sbb
mov
popf
fstp
pusha
(bad)
pop
es
loopne
repz
ss
popf
or
jle
in
leave
adc
dec
std
pop
jl
jnp
push
mov
fwait
cwde
fs
gs
push
neg
mov
jbe
mov
mov
or
fs
and
lods
jae
popf
xor
fwait
push
mov
or
outs
cmp
popa
in
jbe
fsubr
jle
fs
sbb
dec
dec
gs
jbe
loopne
mov
jle
pop
test
sub
mov
xchg
fwait
test
xor
pushf
cwde
xchg
mov
leave
lock
outs
dec
dec
sbb
jmp
jle
pop
test
sub
mov
xchg
fwait
test
and
mov
cmps
push
popf
rcr
les
push
lods
fcmovnu
fs
pop
cdq
fs
gs
dec
neg
test
and
or
and
mov
cmps
push
cdq
rcr
les
push
xchg
rcr
fs
inc
cdq
fs
and
jle
cmp
imul
push
aas
popf
adc
cmp
les
push
pop
rcr
fs
imul
push
aas
popf
adc
cmp
les
push
xor
xchg
in
dec
push
gs
jbe
inc
pop
test
fwait
out
lods
pop
cmp
mul
dec
neg
test
sub
mov
fwait
out
lods
inc
xor
push
aas
popf
adc
aas
popf
in
dec
jg
in
jbe
test
adc
popf
adc
ds
pop
test
and
lods
push
sub
mov
test
push
aas
popf
adc
ds
pop
test
sub
mov
fwait
out
lods
bound
and
mov
or
aaa
pop
or
in
dec
push
gs
jbe
ret
aas
js
lea
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
enter
retf
jle
cmp
mov
and
xchg
int
mov
push
mov
mov
mov
sbb
(bad)
lods
cmp
adc
jbe
div
arpl
xchg
mov
popf
fstp
push
mov
jne
pop
and
pop
jle
fs
popf
je
jle
pusha
xchg
inc
popf
je
jle
(bad)
cwde
mov
jl
mov
push
xor
and
pop
mov
adc
out
int
cdq
xchg
adc
cmp
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jge
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
bound
jp
fs
popf
fs
