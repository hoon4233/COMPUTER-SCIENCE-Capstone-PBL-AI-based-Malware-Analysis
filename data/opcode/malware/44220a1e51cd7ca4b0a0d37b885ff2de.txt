mov
lahf
enter
xlat
xchg
arpl
call
std
mov
aas
js
(bad)
mov
test
xor
jg
jb
push
xchg
aam
div
mov
je
mov
sbb
ret
xchg
les
inc
(bad)
mov
inc
out
jne
out
(bad)
sti
jmp
inc
les
mov
ret
cs
sub
mov
jno
pop
adc
sbb
mov
icebp
movs
imul
pop
mov
mov
cmp
inc
loopne
adc
ror
popa
in
and
cmp
jecxz
mov
add
(bad)
int3
(bad)
cmc
xchg
shl
xchg
out
icebp
in
push
push
adc
aam
ret
shl
push
aam
shl
push
jl
aas
add
mov
dec
ror
pop
dec
mov
cld
xchg
cmp
out
push
out
cmps
xor
loop
ss
lock
int3
mov
jno
push
aaa
mov
xchg
sbb
mov
pop
sbb
push
ret
out
fs
jns
push
icebp
hlt
in
je
mov
and
jb
add
xor
pop
icebp
bound
inc
jmp
scas
lods
ret
sub
or
pop
scas
cli
xchg
lods
dec
inc
rcl
add
clc
xor
jle
mov
dec
ins
mov
sub
jo
add
dec
push
in
adc
in
xor
into
and
mov
lahf
sub
out
addr16
jne
ja
aaa
inc
loop
loope
or
scas
jl
jb
shr
aaa
scas
fild
add
jnp
and
mov
cmps
sbb
push
les
shl
les
addr16
lods
fnstsw
jl
jbe
push
mov
stos
outs
int3
xor
mov
and
mov
xchg
pop
clc
test
les
loopne
inc
xchg
pop
pop
mov
xchg
ret
ds
and
shl
aam
mov
pop
inc
pop
cs
in
mov
aas
xchg
jbe
jbe
les
cld
jbe
ret
push
inc
out
push
sahf
ins
mov
ficom
cmc
mov
add
mov
pusha
fwait
pop
mov
not
cmp
mov
adc
daa
imul
add
outs
cmp
pop
sbb
clc
repz
hlt
rcr
push
dec
repnz
or
mov
les
retf
adc
inc
outs
dec
addr16
xor
and
jns
iret
stos
xor
fdiv
mov
mov
repz
jne
cmp
jg
fadd
cmp
fs
sbb
call
in
jp
xchg
adc
cmp
xor
mov
xchg
aam
stos
ins
xor
sbb
add
(bad)
mov
dec
xor
mov
sub
repz
cdq
test
stc
rol
push
rcl
and
fsubr
dec
mov
adc
fs
mov
aas
add
repz
test
mul
xor
mov
xchg
xor
mov
out
cmps
ja
dec
xchg
jp
mov
add
sub
mov
retf
shl
xor
mov
lahf
and
cli
daa
add
pop
and
pop
test
fdiv
mov
jl
inc
push
dec
in
dec
add
pop
sahf
or
ficomp
stos
call
jp
arpl
in
adc
out
int
xchg
or
movs
test
into
stos
dec
push
ja
call
js
mov
mov
cmp
or
out
test
or
lock
loope
adc
leave
pushf
add
test
mov
mov
xor
ss
retf
mov
addr16
mov
pop
imul
push
addr16
pop
inc
idiv
cs
fs
inc
nop
mov
cdq
jnp
adc
es
push
pop
dec
inc
push
gs
jmp
into
add
dec
stos
mov
pop
sbb
sti
out
arpl
xchg
aam
cmc
shr
stc
call
dec
xor
loopne
and
neg
xchg
in
inc
stos
daa
cmps
cmps
xchg
pop
test
and
test
sub
mov
mov
shl
imul
stos
jmp
(bad)
clc
out
sbb
xchg
fist
retf
mov
(bad)
call
push
cdq
aas
cld
mov
lahf
sahf
jp
xor
fisttp
mov
inc
inc
cmps
sub
std
gs
mov
sahf
inc
xchg
jp
shr
cmp
pop
inc
pusha
xor
push
jno
mov
int3
mov
xchg
out
cmps
mov
iret
push
jle
pushf
fidivr
out
addr16
enter
sti
aam
push
push
push
push
push
stos
mov
cmp
add
xor
sub
push
imul
je
into
movs
push
and
(bad)
jmp
clc
and
inc
and
pop
lods
(bad)
cdq
push
pop
lock
adc
arpl
movs
mov
out
sahf
push
popf
test
movs
mov
xor
outs
sar
push
retf
scas
add
sahf
jns
scas
jl
mov
(bad)
sbb
fcomp
std
xchg
(bad)
aad
sub
mov
test
data16
retf
mov
je
out
add
test
mov
in
loope
and
call
(bad)
sahf
lahf
repnz
test
cld
jl
fld
xor
push
cmp
inc
rcr
std
mov
inc
push
pop
sbb
xchg
mov
into
int
fwait
inc
lods
jo
test
call
mov
ins
pusha
jae
xor
in
jbe
mov
stos
jmp
icebp
sahf
push
pusha
adc
ins
jle
data16
and
sbb
jns
jmp
sbb
in
test
add
fistp
fmul
jmp
push
dec
mov
cmp
mov
(bad)
loop
adc
repnz
push
jns
in
pop
fdivr
cmp
xchg
stc
mov
add
clc
push
ficomp
jae
jno
stos
push
popf
pop
call
nop
lock
addr16
shl
mov
jo
inc
in
jmp
out
mul
popa
popa
mov
adc
jns
not
shr
call
jle
test
fild
xchg
cli
rcl
in
jne
repnz
repz
aad
cli
add
xor
push
or
jecxz
lahf
mov
out
fdiv
loopne
inc
inc
xor
cdq
addr16
fisubr
cmp
test
out
cmp
push
std
adc
call
aaa
leave
mov
inc
imul
jg
je
test
je
fwait
in
ror
jbe
sub
les
jge
jbe
add
(bad)
movs
pop
popf
mov
aad
xchg
sbb
dec
les
mov
xor
icebp
stos
addr16
js
push
jle
pop
pop
test
or
mov
or
ficom
sbb
inc
adc
jle
inc
and
inc
test
cmc
xor
jae
clc
or
leave
mov
mov
arpl
call
push
ds
jmp
shl
xor
fcomp
inc
gs
mov
ret
aaa
test
adc
pop
(bad)
loop
(bad)
(bad)
retf
mov
or
jle
ret
mov
fidiv
lea
or
outs
ror
aas
call
xor
sahf
inc
xor
xor
jp
fmul
sbb
jecxz
shl
inc
std
jp
jo
mov
cmp
adc
aas
pop
scas
and
out
mov
cmp
in
out
sbb
mov
pop
dec
out
mov
dec
aam
jbe
int3
jne
nop
push
push
cwde
inc
cmp
loope
aad
jno
repnz
icebp
in
jl
std
outs
daa
xchg
out
cmp
cmps
mov
jo
xor
sub
retf
pop
cmp
pop
jp
shr
mov
mov
neg
cmc
daa
bound
cld
sub
shl
loopne
call
(bad)
pop
push
mov
je
out
adc
xchg
jg
aam
lds
mov
rcl
or
xchg
mov
scas
pop
cmp
sahf
push
mov
lock
sbb
add
xor
adc
mov
sti
mov
in
add
jo
or
mov
stc
ss
je
pop
pop
mov
imul
mov
and
and
je
imul
cs
jne
pop
xchg
xor
ins
or
push
dec
and
and
cmp
cmp
imul
shl
mov
aad
jae
in
retf
cmp
pusha
bound
sub
sbb
leave
dec
ficomp
addr16
ficomp
sbb
jbe
ins
jmp
std
adc
leave
xor
mov
rcl
mov
(bad)
call
or
xchg
stc
pop
rcr
add
xor
adc
sub
sti
cmps
inc
lds
in
(bad)
les
aaa
dec
aad
mul
adc
je
das
test
sub
(bad)
jg
addr16
inc
scas
cmps
lds
test
xchg
popa
nop
ins
xchg
aaa
xchg
out
jnp
bound
push
mov
pop
sub
hlt
inc
mov
inc
out
xor
pop
dec
mov
and
mov
aam
mov
aaa
mov
imul
in
inc
nop
xor
jb
fcomp
dec
mov
(bad)
es
cmp
test
adc
out
ss
xor
mov
retf
sbb
jne
sub
cld
mov
sbb
and
icebp
push
je
dec
rcr
mov
dec
dec
pop
mov
mov
jne
dec
shl
out
sub
or
mov
xchg
pop
sub
sub
shr
mov
pop
pop
jne
aaa
xor
shl
lahf
and
ja
push
xor
push
das
pop
cmp
iret
inc
push
iret
cmp
jp
adc
fidiv
mov
lahf
mov
data16
aas
in
jnp
mov
retf
mov
das
jecxz
(bad)
sbb
ins
mov
and
jo
and
inc
(bad)
out
lods
popf
or
(bad)
xor
test
aam
pop
mov
ins
cmp
push
push
sbb
test
push
xlat
movaps
jbe
aas
jecxz
xor
loopne
jmp
jp
sar
xor
sub
dec
push
inc
(bad)
out
mov
sub
div
cwde
jae
les
fsubrp
jne
test
dec
sub
dec
xchg
sar
pop
xchg
jp
xchg
les
xchg
jo
mov
lea
stos
clc
cmp
rol
in
popf
pop
dec
pop
imul
mov
jbe
mov
adc
mov
sar
into
lahf
popf
xor
aad
mov
inc
aas
loopne
les
push
sub
mov
lds
dec
scas
mov
out
out
aad
(bad)
repz
hlt
in
jecxz
fimul
dec
dec
mov
outs
cli
(bad)
jecxz
shl
mov
xchg
je
mov
repz
cmp
and
enter
mov
fnstenv
in
jmp
adc
addr16
add
fistp
xor
jbe
aaa
movs
ret
xchg
sub
(bad)
dec
sub
icebp
nop
(bad)
jg
test
add
push
sbb
or
call
mov
(bad)
scas
sbb
jg
xbegin
jmp
pop
sub
mov
loopne
mov
push
and
sbb
pop
sahf
loope
push
mov
in
icebp
in
imul
jle
inc
in
std
pop
push
movs
inc
xchg
push
and
jbe
lahf
add
jmp
js
pop
and
jmp
aam
jl
shufps
jge
ds
icebp
repz
dec
ds
or
adc
shl
dec
hlt
cmp
push
jnp
pop
ss
adc
xor
push
mov
inc
cmp
ss
and
sbb
lds
bnd
fdiv
pop
rcl
jecxz
icebp
call
push
ret
cmps
rol
adc
call
clc
in
sub
imul
jnp
mov
xor
xchg
sub
push
out
test
mov
sti
nop
adc
pop
cmp
xchg
je
out
jb
jb
push
dec
jle
adc
sti
retf
nop
fcmovu
jmp
popf
cli
cmps
xchg
fs
(bad)
cmp
xor
aad
into
dec
neg
push
stos
push
xchg
cmp
aaa
jp
mov
les
stos
mov
(bad)
(bad)
in
not
(bad)
jg
es
enter
jp
das
js
jne
or
sbb
jge
xor
mov
push
out
push
data16
cdq
test
cld
mov
ret
sub
rcl
aad
inc
repz
cmps
ret
in
adc
in
dec
mov
mov
stc
ror
sub
jbe
sbb
arpl
(bad)
rcl
ret
mov
pop
add
ret
jle
inc
xchg
sub
test
jbe
mov
rol
aaa
fimul
pop
push
jno
hlt
icebp
mov
shl
mov
fsub
mov
ss
cmps
mov
leave
das
xor
xor
test
leave
xchg
cli
arpl
inc
mov
xor
fwait
popa
call
fwait
push
icebp
ja
or
fiadd
mov
loope
pop
clc
push
nop
cli
ret
mov
stc
mov
js
xchg
mov
jg
mov
push
cmp
loope
xlat
(bad)
out
cmovo
xor
dec
in
iret
call
int
jmp
jo
jnp
xchg
fcomi
cwde
pushf
jecxz
pop
sub
jmp
cli
adc
call
test
sar
jae
stos
adc
loopne
test
fucomp
ret
out
cli
push
sbb
jns
pop
or
xor
mov
pop
outs
js
test
test
cmps
scas
or
xchg
push
movs
xchg
mov
arpl
ins
jmp
sar
pushf
loop
in
sub
push
sub
test
pop
test
mov
lock
cmp
cmp
fcomp
cmp
mov
sub
mov
cmp
xor
cmps
inc
lock
jmp
iret
popa
adc
repnz
cdq
fnstcw
imul
jnp
fld
fidivr
(bad)
mov
jmp
aam
movs
ins
int3
add
pop
adc
push
jnp
lods
(bad)
fst
push
sbb
jmp
mov
xlat
call
mov
jbe
outs
mov
test
sar
xchg
mov
sub
idiv
aam
xor
(bad)
test
xor
jmp
xchg
or
dec
add
add
call
mov
xor
and
js
dec
add
jle
adc
push
fwait
pop
fistp
xchg
aas
hlt
or
pop
es
repnz
icebp
rol
sub
xchg
sbb
test
jno
mov
(bad)
fdivr
jbe
leave
pop
sti
scas
leave
sub
out
sub
lahf
xor
cdq
inc
jmp
adc
mov
outs
and
sub
push
repz
push
shl
fwait
sbb
or
pop
cwde
inc
add
dec
mov
daa
dec
jmp
mov
dec
out
nop
and
mov
loop
rcl
out
sub
mov
pop
sub
call
int3
std
cmps
les
push
jnp
push
fcmovnbe
sbb
push
or
jbe
es
loop
test
pop
mul
mov
pminsw
hlt
pushf
xor
cmc
mov
mov
sbb
retf
mov
call
add
arpl
mov
dec
scas
in
pop
mov
pop
mov
aas
inc
je
retf
xor
xor
cmc
push
mov
fsub
lea
pop
fst
(bad)
lea
idiv
inc
jmp
xor
add
aaa
jno
dec
xlat
leave
movs
push
and
repnz
fldcw
aaa
ftst
inc
cmp
adc
inc
jb
inc
sahf
je
into
addr16
mov
xlat
dec
mov
in
not
sbb
inc
shl
xchg
aam
mov
cmc
jg
mov
fstp
aaa
xor
ja
ret
jle
fsub
inc
sbb
mov
xchg
jp
jae
mov
lods
push
push
iret
clc
jne
jb
jge
lods
jmp
(bad)
dec
mov
mov
lods
fimul
movs
or
icebp
xchg
mov
ins
pop
imul
push
inc
xchg
psadbw
shl
sbb
mov
add
xchg
aam
mov
es
and
fisttp
xchg
pop
fsubp
sub
pop
les
cmp
repnz
mov
cs
push
add
sub
lods
or
mov
sub
and
dec
outs
mul
and
jne
pop
xchg
mov
out
sub
jo
add
out
or
lods
inc
cmp
pop
inc
or
(bad)
ds
loop
and
sbb
(bad)
adc
or
and
test
xor
call
push
pop
fwait
div
clc
add
shl
pop
and
mov
jl
fs
sub
pop
or
jecxz
mov
adc
jp
push
ins
xor
pop
(bad)
je
push
fnsave
aas
out
(bad)
in
mov
adc
xchg
inc
cmp
mov
jp
popa
jmp
and
adc
fldl2e
je
jge
mov
xchg
ins
sub
sub
rcr
or
sub
out
neg
iret
pop
inc
aad
and
retf
shr
xor
bound
sub
dec
ret
(bad)
idiv
scas
jns
mov
lock
xchg
mov
xlat
sub
mov
lds
bound
std
jae
and
dec
sbb
sbb
(bad)
imul
adc
xor
jns
ins
jnp
jnp
aas
jl
in
xor
dec
das
inc
dec
add
pop
inc
out
xchg
push
and
jno
cwde
jp
sub
arpl
out
enter
or
jnp
fadd
mov
cmp
int3
xor
inc
dec
bound
xor
mov
mov
out
push
fistp
jbe
add
jno
inc
mov
call
lods
jbe
jnp
xor
pop
out
pusha
adc
jmp
fisub
rcl
xchg
cmp
jae
rol
fdiv
and
xor
sub
test
js
sub
mov
cmp
and
xor
cmp
(bad)
cs
loope
jp
outs
clc
push
repnz
cmc
jae
out
fsubr
shl
aas
mov
inc
add
mov
sbb
aaa
ss
push
sbb
lds
jno
adc
pushf
out
fwait
jnp
mul
fisubr
push
cmp
into
pop
mov
outs
pop
mov
cmps
cmp
mov
or
cmps
xor
add
in
cli
xchg
mov
in
ror
scas
jmp
(bad)
xlat
xlat
mov
adc
and
cs
adc
lds
arpl
test
pop
in
ja
or
xchg
fisttp
sti
inc
jbe
cmps
cmc
je
inc
fnstsw
push
or
je
mov
js
fiadd
test
loopne
popaw
stc
cmp
mov
pop
pushf
cmp
mov
je
xor
cdq
sbb
ja
xor
pop
xor
mov
mov
mov
repnz
sbb
jns
and
jmp
cwde
inc
inc
fist
sti
xchg
fs
test
int
jmp
js
xchg
jb
pusha
pop
hlt
rcl
fs
lods
mov
xor
sahf
data16
std
int
inc
pop
out
loopne
adc
mov
add
ins
push
cdq
iret
sbb
in
cli
out
clc
xor
mov
in
push
add
test
int
adc
jne
dec
and
mov
xchg
movlps
sahf
mov
xlat
fist
pop
rcr
es
jg
aaa
(bad)
std
dec
(bad)
stc
(bad)
into
mov
xchg
mov
mov
lods
and
scas
into
out
cmps
out
clc
outs
jb
mov
clc
in
out
adc
outs
xor
push
sti
rol
push
sbb
and
mov
ins
pop
or
cwde
mov
in
aaa
mov
les
jecxz
inc
movs
jp
sbb
adc
rcl
jbe
adc
fld
mov
out
les
aam
mov
addr16
das
inc
sbb
clc
push
or
mov
mov
mov
pop
add
sub
addr16
and
mov
inc
sar
inc
aam
inc
fstp
mov
adc
cmps
(bad)
(bad)
sbb
mov
repnz
loopne
stos
mov
dec
and
out
and
fcomp
mov
not
sub
dec
xor
dec
mov
mov
cmp
repz
pop
sbb
hlt
fdivrp
inc
adc
sbb
dec
pop
xchg
call
push
scas
dec
inc
js
fbstp
and
and
cs
mov
jge
cmps
xor
jne
pop
int3
add
addr16
xchg
repnz
mov
adc
mov
xor
shl
cli
xchg
xchg
inc
mov
xor
push
inc
adc
push
cmp
add
pop
mov
(bad)
mov
xchg
lods
in
cwde
add
mov
mov
pop
fs
in
sbb
push
test
push
xchg
loope
je
pop
push
les
dec
clc
aam
or
add
es
xchg
dec
arpl
sbb
or
xor
jmp
fstp
and
movs
mov
jbe
add
aaa
push
aad
fsub
shl
inc
xchg
pushf
fmul
sub
xchg
sub
mov
popa
mov
push
out
push
movups
popa
sub
jmp
das
sub
cli
xchg
and
ret
dec
dec
rcr
(bad)
mov
or
shl
sbb
dec
adc
cmc
mov
mov
or
mov
inc
jne
popa
repz
inc
fstp
ret
cmps
or
and
mov
jnp
jne
shl
icebp
xor
push
js
adc
or
fstp
cmp
or
fs
push
mov
std
hlt
push
xor
rcl
inc
je
xchg
test
jnp
mov
jns
jbe
sahf
cmp
adc
iret
in
or
sbb
cmp
pop
sbb
sub
mov
pop
cli
mov
mov
fistp
xor
inc
data16
add
adc
inc
aas
mov
xchg
add
outs
xor
add
retf
mov
xchg
or
xchg
mov
mov
mul
sub
adc
js
ja
sub
pop
pop
out
xchg
lock
loopne
add
fs
fsubp
je
icebp
or
push
bound
ins
lds
test
icebp
call
sub
xor
or
adc
mov
mov
mov
nop
adc
push
or
add
inc
retf
leave
sbb
xchg
mov
out
ins
stc
mov
mov
lock
pop
mov
sub
cmc
cmp
(bad)
mov
jle
loope
not
out
mov
jmp
and
in
pop
retf
add
mov
xchg
fcmovnb
nop
(bad)
in
mov
jl
(bad)
xor
aaa
xor
jg
scas
pop
push
push
enter
jb
in
jle
pusha
inc
jne
push
jne
cmp
clc
out
and
bound
xor
not
out
adc
int
imul
outs
dec
daa
xor
or
cdq
stc
aad
lahf
aaa
hlt
js
jmp
cld
pop
inc
sbb
(bad)
sahf
cmp
icebp
cmp
xor
cmc
or
sub
fisub
sub
adc
pop
fnstenv
jp
jns
leave
and
adc
pop
and
(bad)
sti
add
les
push
aam
icebp
(bad)
clc
daa
call
add
repnz
scas
fs
push
push
xor
mov
xchg
iret
dec
sub
mov
in
les
adc
dec
fstp
sub
test
cdq
fistp
or
and
sub
jne
in
cmc
jmp
mov
pop
push
test
out
push
icebp
xor
inc
pop
adc
retf
jmp
aad
or
out
sbb
mov
(bad)
mov
data16
out
mov
fcom
sub
adc
fldenv
sbb
fnsave
fadd
dec
sbb
sub
fcomip
loopne
pusha
dec
and
xor
xlat
nop
xor
sub
test
je
(bad)
stos
lahf
movs
pop
leave
cs
ins
lods
xchg
jecxz
mov
jo
imul
mov
enter
ret
push
jns
and
imul
xchg
arpl
mov
daa
bound
mov
push
loop
les
mov
fs
cmp
std
jge
das
xchg
ror
pop
enter
icebp
(bad)
mov
popa
in
dec
inc
jmp
sbb
in
dec
stc
ret
xchg
mov
mov
cmp
add
add
xchg
(bad)
sub
push
push
inc
call
(bad)
std
or
or
cmp
add
inc
test
and
int
sub
loopne
mov
je
push
idiv
push
xchg
mov
stos
js
jns
(bad)
scas
sbb
jl
inc
adc
lahf
mov
inc
mov
in
mov
add
mov
clc
sbb
gs
dec
xor
scas
xor
lea
jle
push
jae
add
jmp
lods
cs
outs
iret
xor
pop
jno
repz
or
add
cdq
call
sub
jl
add
mov
je
pop
mov
dec
inc
pop
mov
call
js
dec
outs
or
cwde
cwde
add
cmp
add
stc
cld
(bad)
loopne
stc
jne
sbb
xor
mov
xor
xor
mov
pop
mov
adc
aas
dec
idiv
(bad)
outs
test
leave
xor
sbb
enter
and
call
jae
mov
push
cmp
sub
dec
(bad)
shl
jo
pop
push
(bad)
push
push
not
mov
ret
(bad)
fnstcw
into
jnp
push
push
and
pop
push
mov
stos
xchg
and
jae
in
or
inc
cmps
mov
clc
cld
inc
stos
or
sbb
sub
mov
es
push
js
mov
mov
pop
ja
xchg
jl
push
lods
mov
inc
push
jmp
jecxz
xchg
std
fwait
out
pop
cmp
pop
scas
push
or
dec
leave
mov
adc
out
sub
inc
loopne
fdiv
sbb
mov
(bad)
mov
aam
xchg
push
leave
(bad)
loope
add
addr16
xchg
push
cmp
pop
retf
cmp
out
mov
leave
or
mov
aad
std
cld
fs
cmp
enter
jnp
scas
jp
mov
mov
xchg
les
daa
cmp
repz
dec
xlat
push
stos
and
rcl
mov
cld
popa
mov
jecxz
fidivr
cwde
dec
pop
xor
sub
adc
mov
xchg
adc
mov
xchg
test
call
pop
pop
int
add
and
outs
and
add
out
rol
pop
clc
adc
imul
movs
jecxz
adc
sub
sbb
push
cli
jmp
unpckhps
push
lods
cmp
outs
in
call
push
or
data16
std
mov
popa
cmp
jae
sbb
bound
xor
rcr
lahf
push
mov
aam
or
jo
hlt
int
cmc
mov
mov
ds
aaa
dec
or
inc
dec
test
or
jle
popa
jns
xchg
jb
or
pop
std
fldenv
imul
(bad)
mov
shl
arpl
nop
jbe
or
ret
adc
adc
xlat
dec
rcl
leave
push
lods
dec
int3
out
sbb
add
outs
cwde
rcr
sbb
dec
xchg
mov
in
cdq
aam
jle
jnp
sub
mov
push
sbb
sahf
dec
pop
xchg
sbb
addr16
dec
sbb
scas
mov
gs
jge
dec
imul
dec
jmp
arpl
(bad)
dec
out
sub
pusha
repz
je
xor
ror
mov
ret
push
(bad)
outs
dec
je
cmc
dec
test
push
icebp
adc
xor
xlat
das
sar
mov
loop
inc
sub
mov
push
sub
mov
bnd
mov
and
and
jbe
stos
xchg
pushf
jnp
jg
pmullw
or
outs
ss
push
push
inc
call
inc
and
xchg
sbb
cmp
jl
dec
loopne
and
add
popf
in
icebp
jmp
xlat
mov
adc
(bad)
cld
fnstcw
fadd
and
inc
aas
inc
lock
jne
mov
cmp
cs
mov
es
or
(bad)
push
in
pop
test
test
adc
cmp
(bad)
or
mov
jp
jl
gs
xchg
jne
cld
cld
test
shl
ret
sbb
shl
inc
cmp
jnp
adc
mov
dec
pop
sar
add
jb
add
jp
inc
xchg
(bad)
mov
jne
lds
aaa
jl
push
and
out
jg
mov
xchg
inc
mov
mov
repz
fxch
cmp
test
icebp
test
jmp
inc
jae
out
in
mov
pop
sbb
pop
(bad)
pop
add
or
lock
in
ja
aaa
cli
or
jl
fwait
test
in
xor
mov
sti
inc
outs
div
xchg
out
mov
mov
sahf
mov
(bad)
cmps
cmps
in
cmp
loopne
inc
or
test
pusha
test
dec
das
scas
jae
and
push
push
clc
bnd
push
mov
sbb
dec
inc
push
sbb
cmp
mov
(bad)
in
mov
test
fisubr
and
pop
push
inc
(bad)
aam
out
mov
out
and
inc
xchg
loope
inc
addr16
jmp
(bad)
xlat
xor
jns
pop
mov
pop
sub
jecxz
sbb
clc
in
loope
mov
test
fwait
xor
(bad)
cmp
sub
hlt
jl
add
(bad)
cmc
hlt
outs
jmp
mov
mov
ret
cld
push
ins
mov
cmps
leave
les
js
jo
xchg
fwait
into
mov
cld
cmps
mov
mov
and
xor
cmp
mov
imul
hlt
jl
sbb
(bad)
mov
mov
test
sbb
hlt
ror
mov
push
adc
pop
rol
scas
push
test
imul
movs
mov
mov
aam
(bad)
(bad)
pop
(bad)
and
adc
xor
push
in
ins
dec
fbstp
lock
sub
fmul
dec
inc
shr
ds
int3
sbb
push
out
xchg
cmps
xchg
jl
mov
fisttp
fst
sub
cmp
push
ins
mov
call
sahf
lahf
rol
jnp
fdiv
loop
sar
adc
adc
cli
stc
adc
push
stc
mov
dec
xor
adc
dec
xchg
aaa
in
push
and
jnp
inc
or
xor
jmp
mov
mov
shr
aas
ja
loopne
and
mov
jge
imul
push
jge
xchg
cwde
aas
cmps
jp
sbb
cmps
or
jmp
pop
jb
pop
inc
fisubr
xchg
(bad)
mov
jns
inc
xchg
rol
adc
sbb
xor
xchg
(bad)
cld
jmp
scas
jg
jb
add
and
mov
nop
outs
dec
ret
out
sar
cmc
add
mov
and
xor
(bad)
jo
push
arpl
in
mov
mov
shr
xor
dec
cmc
sub
xor
pushf
ficomp
push
cmps
in
dec
addr16
push
sub
lahf
ss
pop
pop
mov
xor
outs
xor
cli
pusha
inc
out
enter
pop
and
rcl
sahf
mov
jnp
inc
repz
addr16
add
test
cmps
cmp
shr
movs
pop
stc
aam
(bad)
ret
push
lock
jb
dec
push
pushf
das
movs
enter
add
sbb
cmps
jmp
ffree
in
mov
data16
cmp
lock
jl
mov
in
and
call
cmps
add
cmc
scas
movs
jl
add
adc
adc
pusha
xchg
daa
das
fsubr
lock
mov
jle
mov
sbb
pop
xchg
inc
inc
(bad)
cmp
lods
and
xor
test
or
mov
loopne
(bad)
mov
test
jno
aad
mov
adc
jo
fstp
xchg
sbb
fsubrp
sub
and
jp
je
jge
cmc
sbb
into
in
stc
xchg
data16
mov
and
jne
test
in
mov
or
jp
jg
jg
(bad)
mov
ret
xchg
xchg
push
jmp
xor
cmp
stc
jge
xchg
data16
and
mov
dec
dec
mov
jl
adc
push
xchg
cwde
fs
sti
cs
jmp
adc
sub
fwait
jl
or
dec
sar
add
leave
mov
ds
jg
xor
div
dec
mov
ror
add
push
mov
push
rcl
add
cmp
or
ja
jno
mov
inc
shl
int3
xchg
mov
sub
mov
cmp
mov
fst
sbb
jmp
popf
cmp
mov
pop
push
shl
mov
dec
loope
sub
cld
inc
fsub
fiadd
cwde
push
push
ret
fs
mov
xor
loopne
js
imul
dec
lods
outs
mov
jl
push
push
iret
in
aas
cmps
retf
imul
lock
mov
adc
enter
sub
pop
inc
mov
adc
das
test
or
cmp
jnp
mov
push
dec
mov
pop
and
adc
pop
popa
pushf
push
push
je
mov
jne
stos
fadd
movs
retf
icebp
ds
fs
fsubr
shr
dec
add
mov
jle
daa
add
pop
add
push
sar
jne
cmp
popf
pop
pop
mov
cli
shl
sbb
fild
out
xor
mov
shl
fdiv
xor
push
jbe
les
div
xchg
std
inc
scas
sbb
out
jnp
cmp
mov
dec
out
outs
ret
lock
(bad)
mov
ins
fcmovne
mov
lock
popa
arpl
addr16
pushf
cwde
sbb
cwde
and
out
out
(bad)
mov
adc
jecxz
or
mov
mov
jle
stc
adc
cmp
cmp
dec
or
imul
aaa
pop
out
xchg
or
cld
or
and
inc
call
xchg
mov
out
inc
neg
dec
mov
xor
mov
mov
and
cmp
and
inc
aam
(bad)
xchg
adc
call
scas
in
or
mov
or
xor
scas
shl
ins
cwde
in
mov
push
dec
mov
push
dec
inc
iret
mov
push
xor
out
in
iret
div
shl
add
cmp
jecxz
push
fwait
stos
and
xchg
test
mov
dec
repnz
retf
cmp
call
sahf
loop
push
mov
xchg
mov
aad
aam
xlat
out
pop
iret
(bad)
mov
inc
rcr
mov
rol
push
sub
in
mov
xchg
repnz
std
lahf
outs
(bad)
in
lods
mov
mov
or
fidiv
fadd
mov
xchg
push
jno
inc
or
push
push
fidiv
pop
call
add
push
sbb
pop
scas
push
mov
aas
enter
test
(bad)
push
aas
push
inc
addr16
iret
daa
push
lock
push
mov
lods
mov
outs
or
repnz
jo
fs
scas
mov
shl
cmps
ror
call
mov
sub
and
fimul
jecxz
ds
mov
push
cmp
stos
retf
sub
les
pop
xor
sbb
inc
int3
mov
(bad)
xchg
ins
xor
cli
xor
scas
(bad)
mov
xchg
push
sbb
out
ds
test
repnz
test
sar
or
data16
mov
xchg
and
mov
fcom
call
mov
data16
adc
stos
out
std
retf
adc
sbb
out
jp
xor
inc
ss
mov
or
cs
(bad)
fcomp
push
cmc
mov
jle
pop
sub
(bad)
jmp
je
mov
dec
jbe
ret
inc
stos
cmps
cmp
cmc
inc
xor
(bad)
mov
or
sub
or
cli
retf
sbb
jbe
repnz
or
ffree
cmp
fisttp
stos
mov
call
mov
xor
aaa
jno
push
pop
lea
stos
mov
mov
mov
cld
sub
push
les
out
mov
xchg
hlt
pushf
ret
or
iret
pop
aas
push
fwait
mov
nop
cdq
test
mov
jne
inc
pop
retf
mov
frstor
fnstenv
cld
sahf
or
jecxz
sub
mov
inc
fld
mov
mov
scas
(bad)
js
mov
fnstcw
jmp
jo
sbb
cmp
inc
out
ror
mov
jne
mov
xchg
pop
mov
sub
sbb
fst
bound
inc
mov
les
cmps
clc
xor
mov
pop
mov
in
inc
xchg
ret
or
mov
sub
jns
mov
push
mov
jmp
ret
add
push
cmp
leave
std
add
add
test
jbe
xchg
test
sub
jge
sub
cmp
inc
into
pop
call
stos
cli
add
cmp
clc
fidivr
push
push
cmp
xor
cmp
hlt
fwait
retf
cmp
lahf
xchg
mov
call
das
jns
jp
or
jae
je
xchg
cmp
fistp
test
stos
jp
nop
or
dec
xchg
cwde
or
mov
ret
in
mov
pop
push
loopne
fs
pop
sub
and
pushf
mov
mov
ficomp
push
aaa
mov
push
pop
inc
aas
or
dec
mov
xchg
cmp
add
xchg
inc
xor
ds
mov
dec
adc
mov
cwde
mov
push
div
xchg
repnz
push
fwait
call
cmp
push
fcomp
call
or
dec
cs
push
inc
mov
out
or
push
push
jae
fdivr
out
loopne
push
shl
xchg
fistp
fwait
pop
adc
pop
js
sbb
xchg
xor
or
sbb
dec
cmp
(bad)
jb
xchg
sbb
xlat
cmp
dec
scas
fadd
xchg
test
stos
sbb
xlat
int3
jb
ss
dec
xlat
nop
xchg
adc
(bad)
pop
movs
dec
jle
inc
jno
stos
(bad)
call
xchg
add
shl
aam
xlat
pop
cmps
jg
or
sbb
add
sub
das
rol
sbb
repnz
dec
pop
es
sbb
or
push
push
xchg
dec
mov
jo
out
xor
pop
inc
in
dec
gs
std
push
jae
sar
or
(bad)
fcomi
idiv
sub
into
xor
jge
loop
cmp
call
jo
or
xor
mov
adc
std
mov
push
fs
shl
pop
rcr
push
jg
rol
(bad)
icebp
inc
inc
retf
retf
sub
push
(bad)
and
ret
ss
push
in
xor
mov
and
addr16
out
lock
and
mov
dec
jo
out
call
add
add
mov
mov
jb
inc
xlat
pop
jae
dec
ja
out
add
jne
inc
jle
cmp
xchg
fdiv
das
call
xlat
pop
sub
cmp
test
shl
ffreep
ins
sbb
jno
xlat
pop
push
mov
jle
call
test
aam
shl
inc
cmp
je
in
sbb
addr16
inc
jnp
test
ret
shl
mov
int
je
xor
nop
stc
js
inc
or
xor
cmp
mov
or
aam
cmp
inc
xchg
movs
imul
or
call
xor
and
call
dec
mov
in
xchg
or
ret
xchg
xchg
push
fld
fist
std
stc
scas
daa
cmc
nop
pop
call
je
loope
pushf
(bad)
cmps
jmp
add
ins
mov
in
inc
sub
inc
call
sbb
cli
pop
retf
jmp
jb
sub
loop
and
jmp
sahf
adc
int
xchg
dec
cmp
cmp
xor
int3
and
jecxz
or
test
std
pop
aad
cmp
outs
dec
out
sub
mov
sbb
sub
pop
cmp
mov
sbb
xchg
cwde
fdiv
jecxz
call
out
push
je
dec
sub
push
fld
std
cmp
xor
fdivr
pop
dec
movs
or
mov
jl
test
pop
push
sbb
mov
inc
aad
pop
jb
lods
xchg
(bad)
movs
pop
xchg
das
mov
sbb
fwait
imul
stc
(bad)
jecxz
or
aad
into
sub
dec
in
sar
(bad)
hlt
inc
out
pop
mov
hlt
mov
xchg
sub
xchg
in
dec
or
fnsave
leave
pop
jle
daa
push
in
popa
adc
or
mov
mov
dec
ja
dec
rol
dec
ins
data16
mov
inc
aas
adc
nop
in
out
je
pop
xchg
and
inc
push
mov
fisttp
mov
idiv
cmp
sbb
or
or
xchg
daa
inc
lock
push
xlat
lock
std
lock
ret
daa
in
or
test
or
inc
mov
pop
daa
inc
fwait
aad
xor
mov
cmp
mov
div
nop
mov
repz
popf
cli
dec
idiv
mov
ins
loope
cmp
add
imul
mov
mov
pop
aaa
call
ret
jbe
xchg
movs
imul
repz
imul
sar
and
imul
xor
sbb
push
hlt
inc
add
push
test
cmp
loope
int
je
xor
call
mov
xchg
adc
or
repz
into
cli
cwde
fisttp
cmps
or
addr16
ds
popf
sub
mov
test
mov
idiv
adc
jmp
retf
loope
mov
push
out
aaa
arpl
xchg
push
sti
ret
jbe
test
mov
push
cdq
inc
into
div
push
ja
lock
sub
stos
pop
dec
in
dec
adc
dec
mov
inc
idiv
push
pop
jecxz
ins
loopne
lds
stos
dec
movs
inc
movs
adc
push
mov
icebp
lock
idiv
stos
pop
sbb
dec
daa
imul
push
enter
dec
mov
xor
loopne
aas
inc
loope
cmp
jns
out
mov
jbe
ds
aaa
add
test
ins
call
lahf
pusha
fimul
cli
enter
iret
cmp
addr16
mov
mov
xchg
daa
lock
lods
jno
xor
(bad)
ja
pop
jl
mov
cwde
mov
mov
je
sbb
outs
in
mov
mov
mov
jnp
xchg
loop
loop
sub
sar
lahf
popf
inc
jmp
push
dec
mov
inc
xchg
xchg
cmp
imul
jbe
imul
into
push
retf
mov
outs
jnp
mov
jmp
jb
cld
dec
jmp
jne
jne
push
jbe
into
pop
inc
in
mov
jmp
es
xchg
dec
adc
jg
pop
mov
jle
add
sbb
cmp
dec
or
test
cwde
test
es
rcr
push
xchg
lea
stos
xor
sub
inc
and
pusha
loope
test
pop
and
cs
jge
adc
test
push
xchg
mov
sbb
jge
push
ret
sub
push
xor
cmp
mov
mov
inc
ins
push
mov
in
inc
icebp
sub
dec
fisttp
push
ret
cmps
ror
fwait
inc
mov
es
aad
push
out
fisub
das
test
adc
xchg
dec
adc
xchg
lahf
fstp
xor
mov
aaa
shr
into
iret
pushf
sbb
push
test
lahf
jns
mov
mov
sahf
push
dec
fwait
(bad)
loopne
and
in
xor
mov
not
sub
mov
mov
mov
aaa
xor
push
retf
mov
xchg
lahf
mov
jecxz
xchg
mov
jnp
mov
xchg
shl
pop
mov
mov
pop
mov
pop
mov
(bad)
aad
and
setno
mov
fisubr
mov
sbb
es
int3
or
jle
push
jnp
sbb
lea
xor
or
or
pop
movs
in
stos
cmc
call
out
add
dec
push
adc
dec
in
sbb
jbe
push
clc
and
sbb
inc
cmp
push
pop
cmp
push
loop
daa
(bad)
mov
adc
aaa
push
cli
adc
cmp
fist
dec
arpl
mov
cdq
adc
push
mov
pushf
xor
inc
mov
xchg
ret
jmp
aad
push
call
cmc
imul
leave
stos
movntq
scas
popf
and
push
shr
call
jbe
xor
jle
imul
fild
sub
fdivr
sbb
hlt
add
das
int3
jbe
xchg
jmp
sahf
out
out
int
xor
pop
cmp
jg
ins
jo
loope
lahf
xchg
pop
jl
push
je
int3
mov
adc
and
add
(bad)
scas
adc
pop
daa
movs
je
in
gs
adc
sahf
push
fsubr
jnp
out
xchg
push
daa
xchg
pop
push
or
ret
out
cs
jb
cmc
jns
pop
adc
xchg
push
iret
cmps
loope
jecxz
in
pop
scas
mov
aam
or
adc
xchg
pop
pop
movs
mov
xor
dec
ret
icebp
adc
jno
bound
shl
push
out
(bad)
xor
xor
jno
mov
xchg
aad
push
or
xchg
xor
out
scas
mov
xor
dec
(bad)
cmc
or
shl
icebp
nop
lods
pop
ss
pop
pop
push
pop
stc
or
mov
adc
sbb
mov
outs
cmp
shl
fwait
mov
cmps
jecxz
in
in
adc
or
nop
rcr
push
test
mov
mov
sub
out
push
xchg
pop
or
xor
adc
mov
jne
mov
inc
jno
dec
pushf
lods
aas
(bad)
xchg
(bad)
jno
je
(bad)
lock
ins
sti
(bad)
(bad)
mov
les
icebp
mov
cmp
cmps
mov
(bad)
icebp
push
mov
push
pop
sbb
push
mov
sbb
adc
jno
xchg
icebp
mov
cmp
das
fild
sti
mov
jbe
inc
push
call
xchg
es
pop
fcomp
inc
jmp
jno
outs
fcmovnb
inc
xor
dec
leave
ins
mov
mov
fidiv
aam
jb
mov
xor
dec
jo
enter
mov
dec
cwde
xchg
jmp
jae
aas
lea
mov
sti
fld
lock
repnz
jns
sti
mov
jecxz
call
xor
xchg
fisub
jb
movs
fstp
inc
cmp
fist
inc
fdivr
fistp
and
pop
fnstsw
push
xlat
jl
pop
sbb
call
nop
aaa
xchg
mov
jmp
mov
xor
sub
mov
rcr
sub
aad
inc
fs
lds
and
pop
jno
xchg
setbe
jbe
cmp
mov
ja
(bad)
xlat
fstp
mov
adc
and
fs
lods
and
aam
jno
aam
push
aam
scas
(bad)
iret
popf
lds
sbb
aaa
ss
inc
rol
popa
mov
jle
jne
dec
xor
sub
pop
gs
mov
mov
test
test
and
mov
rcr
pop
jl
dec
fnstenv
mov
call
das
jno
lods
das
mov
or
iret
jg
mov
add
pop
push
je
stos
ja
dec
xor
lea
cli
cmp
rcr
inc
test
inc
dec
ins
mov
call
adc
and
jmp
jle
rcr
jbe
(bad)
mov
test
mov
outs
pop
sbb
(bad)
push
std
rcr
push
loope
sub
shl
es
pop
ret
sar
out
leave
xor
addr16
rol
add
lahf
push
out
xor
sub
dec
ficomp
test
lds
jmp
jl
ret
popa
inc
xor
repnz
repnz
daa
adc
jno
loopne
int3
lock
repz
mov
jle
aaa
xchg
mov
mov
jae
cmp
loop
jb
xchg
loopne
sub
movs
cmc
jecxz
xchg
loope
idiv
and
cdq
ja
cmps
and
sbb
mov
xchg
jle
add
xor
push
fnstcw
dec
push
xchg
mov
pop
jp
xor
cmp
test
call
movs
ja
mov
mov
data16
repz
aam
jmp
sbb
cmps
fwait
loop
mov
jnp
les
imul
xlat
lods
and
xor
mov
cli
mov
jg
retf
push
mov
mov
hlt
fld
mov
mov
mov
push
(bad)
leave
sahf
ss
gs
jecxz
ret
and
cmp
mov
inc
push
das
pop
mov
imul
sub
cmp
sbb
out
mov
push
push
pop
jns
jg
mov
mov
sub
addr16
mov
mov
out
std
clc
dec
mov
in
push
sbb
and
jmp
dec
or
lods
mov
xchg
je
push
(bad)
push
inc
fsubr
mov
xchg
mov
jp
lods
pop
or
sbb
push
push
loop
push
shr
adc
movs
push
out
(bad)
nop
scas
gs
jne
fwait
push
sub
mov
mov
sbb
jne
pop
test
mov
jp
cld
clc
mov
stc
scas
int3
and
out
mov
popa
dec
(bad)
fidivr
sar
outs
push
mov
add
pop
loop
cdq
pop
jmp
jnp
cwde
cs
push
push
hlt
or
iret
ficomp
lock
add
(bad)
sahf
je
jmp
push
mov
aaa
adc
shl
jp
push
aam
xor
or
jnp
shl
aas
dec
lea
inc
sbb
jnp
jb
cmps
aaa
inc
outs
and
mov
xchg
push
pop
sbb
jle
push
leave
mov
lds
adc
test
dec
inc
test
(bad)
adc
dec
jo
push
push
mov
and
dec
(bad)
push
add
jno
sahf
jmp
js
lock
mov
nop
into
adc
aas
ret
push
jecxz
dec
ss
out
mov
cmp
test
mov
or
inc
jg
add
dec
mov
ds
shr
test
push
out
inc
std
push
add
inc
xor
mov
mov
mov
lods
lahf
test
mov
jmp
add
cmps
mov
push
pop
ror
xor
rcr
push
push
cmp
icebp
xor
out
or
xchg
add
xchg
cmp
ficom
fdiv
js
fsubr
test
mov
mov
ja
fisttp
xchg
aaa
push
cli
imul
adc
adc
or
mov
hlt
xchg
jge
rol
xor
push
mov
sub
mov
xchg
pop
mul
xchg
js
cmps
test
(bad)
dec
xchg
int3
jo
mov
xor
inc
inc
je
sub
call
xor
test
xchg
cld
push
xchg
xchg
or
int3
push
loope
ja
mov
fwait
jb
(bad)
int3
test
clc
js
jle
(bad)
fld
xor
or
push
mov
mov
lock
aam
in
imul
mov
pushf
xchg
inc
and
mov
aam
adc
mov
ror
dec
and
scas
jb
fcomip
fisubr
dec
outs
dec
mov
sbb
sahf
popf
and
adc
out
daa
jo
cmps
outs
pop
daa
dec
sahf
mov
cmp
gs
fwait
aas
ds
jbe
mov
dec
inc
call
repnz
mov
lahf
push
mov
add
div
inc
imul
pop
or
das
fmul
or
(bad)
pop
cdq
aad
cmp
sti
jg
xchg
push
arpl
sbb
cld
sar
test
(bad)
outs
push
pop
and
jbe
xchg
mov
shr
jecxz
mov
jo
xchg
sub
or
jno
or
dec
ja
sub
cmc
daa
mov
rcr
or
jp
xchg
repz
inc
scas
repnz
push
mov
cmps
js
(bad)
cmp
or
add
shl
mov
icebp
popa
lahf
scas
rol
jle
mov
icebp
dec
lock
and
aas
adc
and
add
(bad)
and
adc
push
cmp
(bad)
int3
daa
or
into
je
out
dec
sti
arpl
xor
mov
jmp
push
sbb
mov
leave
out
add
cli
xlat
scas
pop
test
mov
ret
aad
xor
adc
adc
aaa
mov
clc
test
pop
mov
mov
mul
mov
xor
mov
cmp
sti
lahf
stc
dec
fwait
es
cmp
and
dec
xchg
loopne
pop
pop
push
ret
mov
lahf
inc
mov
mov
movs
or
(bad)
jb
sbb
xor
inc
jbe
xchg
std
dec
ret
mov
mul
rcl
jns
pop
inc
xchg
dec
xor
jnp
and
call
xchg
push
outs
sbb
imul
sti
daa
cmovno
aam
movs
pushf
add
push
and
xor
ss
aad
fsubr
aam
jmp
mov
(bad)
int3
mov
sub
hlt
add
ja
mov
test
pop
sbb
and
jns
daa
lds
cmp
sub
cmp
jg
push
stos
dec
jl
ret
bnd
ret
inc
jg
sub
pop
jae
sbb
pop
(bad)
test
jl
call
pop
pop
and
iret
(bad)
jns
mov
cmc
mov
sub
imul
add
fistp
mov
scas
xchg
test
imul
cmps
dec
xor
arpl
(bad)
push
jl
push
cli
add
outs
lock
mov
mov
shl
mov
stc
lock
div
arpl
jle
push
fptan
or
jbe
mov
nop
js
cli
or
(bad)
xchg
popf
dec
jecxz
inc
scas
lea
pop
xchg
fmul
or
and
ds
aas
and
inc
ds
and
call
add
push
sub
es
adc
and
loop
pop
xchg
pop
mov
repz
in
xor
out
nop
pop
push
pop
js
fcmovnbe
enter
mov
inc
dec
lds
sbb
jge
jl
push
repnz
sub
sub
xchg
std
push
sar
out
sbb
movs
das
into
mov
jns
je
push
movs
ficomp
pop
inc
xchg
leave
xor
mov
pop
ss
xchg
test
pop
out
mov
mov
or
pusha
push
inc
inc
cmp
lea
nop
push
ret
pop
out
adc
(bad)
push
int3
js
mov
out
repnz
loopne
enter
and
lods
mov
jmp
cmp
mov
add
mov
xchg
les
(bad)
push
jp
pop
push
adc
pop
out
pop
xor
(bad)
loopne
aaa
mov
cmp
dec
xchg
jne
lods
dec
sbb
(bad)
idiv
cmp
aad
sahf
mov
sahf
idiv
pop
and
fwait
and
(bad)
dec
(bad)
fdiv
psubb
scas
cmp
fisubr
mov
xlat
mov
fsub
add
das
nop
and
jnp
sar
test
stc
xchg
sbb
xor
pop
inc
jge
into
sbb
push
leave
dec
lock
into
add
cli
cmps
movs
jmp
mov
mov
dec
or
stc
fisttp
adc
mov
repnz
pushf
in
push
loop
pop
add
xchg
out
repnz
das
sbb
retf
bound
cmp
mov
les
aad
pop
outs
cmp
push
jmp
ror
int
mov
rol
sbb
lock
xlat
test
movs
sub
mov
or
mov
scas
adc
(bad)
or
out
and
js
scas
retf
daa
lds
dec
mov
bound
ss
and
pusha
aaa
aad
cs
mov
adc
push
imul
adc
js
mov
jle
push
dec
fld
out
inc
sahf
scas
xor
pop
jb
adc
call
rol
and
push
add
scas
shl
(bad)
shl
cdq
clc
sbb
push
dec
cmp
mov
xchg
sbb
stos
cmps
in
jns
pop
push
cdq
mov
mov
mov
push
mov
inc
out
pop
and
aas
ds
les
xchg
test
shr
int
cdq
lahf
out
cmps
mov
xchg
or
loope
xchg
in
clc
shl
scas
or
sub
mov
push
sbb
sbb
ret
sub
sub
ret
xchg
int
test
dec
xchg
ins
adc
jmp
xor
es
push
cdq
ds
ret
or
stc
pop
push
pop
in
aas
push
push
aam
sar
bound
add
or
add
add
mov
lea
out
repz
mov
je
ds
push
jbe
dec
push
pop
add
test
clc
push
mov
sbb
cld
adc
out
inc
xchg
adc
hlt
cmc
push
ins
push
adc
imul
rcr
(bad)
mov
mov
mov
inc
cmps
aas
test
pop
daa
pop
mov
jae
mov
and
fdiv
das
dec
nop
ss
mov
idiv
mov
xor
and
lods
arpl
dec
pop
bound
test
sub
inc
push
mov
repz
hlt
xor
test
mov
ss
sbb
imul
sbb
ds
arpl
dec
in
jg
cwde
mov
pop
add
adc
dec
mov
mov
retf
inc
mov
call
nop
cld
jmp
inc
jle
(bad)
cmp
dec
mov
push
imul
loopne
or
sub
fnstenv
inc
dec
int3
mov
repnz
or
jns
bts
je
in
xchg
dec
xor
cmp
in
mov
pop
(bad)
jmp
(bad)
out
ins
daa
fstp
add
push
pop
pop
int3
lock
stos
mov
retf
sbb
mov
imul
xchg
pop
pop
mov
repz
bound
cld
aaa
pop
inc
cmp
or
aaa
add
pop
cdq
not
(bad)
and
mov
add
xor
jmp
or
unpckhps
call
(bad)
push
fwait
adc
sbb
pop
ja
rcr
dec
dec
sub
pushaw
push
fld
and
inc
mov
inc
cmp
jns
fdiv
mov
retf
and
jbe
enter
xor
std
mov
stos
add
jmp
inc
popa
in
stos
push
jmp
jb
nop
aas
jb
xor
cmp
mov
mov
mov
in
jge
push
xor
fisttp
and
xor
jp
(bad)
in
xchg
xor
nop
push
mov
inc
test
or
lds
xchg
mov
dec
jne
push
jmp
js
mov
dec
xchg
aam
xor
mov
sti
fcmovnbe
stc
fdiv
frstor
je
ins
cmp
xchg
mov
cld
and
or
mov
add
rcr
scas
nop
push
add
jecxz
aam
mov
fdiv
(bad)
repnz
inc
push
jns
jne
pusha
inc
fwait
mov
add
icebp
sub
add
imul
push
hlt
sar
stos
or
sbb
fcmovne
xchg
sub
test
ret
and
sub
shl
dec
mov
add
sub
call
cld
call
ins
jbe
sub
add
mov
les
xor
(bad)
cmp
in
fisttp
xor
xor
js
xchg
cmc
jmp
add
scas
push
ror
push
cmps
push
push
cmp
enter
loopne
mov
pop
push
clc
daa
xchg
push
inc
sbb
lahf
sub
lods
fisub
inc
test
retf
fwait
lods
fnsave
xor
loope
jmp
jbe
dec
sbb
aaa
pop
sub
(bad)
mov
fld
leave
pop
xor
sub
in
ds
xor
add
ss
data16
cmp
aam
xchg
ror
pop
push
test
and
aaa
sbb
les
pop
jge
push
mov
movs
cmp
fisubr
data16
dec
mov
mov
cmp
inc
call
sar
dec
mov
fild
icebp
cmp
mov
xchg
dec
cmps
adc
xchg
pusha
jmp
cmp
mov
movs
pop
mov
inc
or
push
pop
xor
shr
jge
out
pop
mov
xor
int3
inc
int3
jne
sbb
arpl
scas
adc
loopne
std
shl
cmp
cld
sub
movs
cwde
clc
pushf
shr
xchg
mov
aad
lahf
addr16
int3
outs
lods
aas
and
jo
sbb
add
sbb
jmp
cmps
mov
in
rcr
dec
pushf
cmc
xchg
pop
xor
mov
inc
jbe
xchg
shl
xchg
and
pop
ins
push
mov
scas
in
pop
test
push
test
std
daa
bsf
into
cld
inc
fcmovnb
sbb
ret
ffree
mov
jno
adc
idiv
or
fwait
xor
jae
call
jno
push
nop
and
test
cdq
mov
push
movs
push
test
fdivr
mov
cld
jmp
xor
cld
cmp
test
push
stc
pop
push
iret
inc
adc
adc
sbb
jl
ret
and
adc
push
jge
out
dec
sub
dec
arpl
adc
and
xabort
gs
enter
mov
lock
xor
sbb
cmp
xor
leave
sbb
fist
mov
xchg
inc
adc
adc
mov
js
popa
data16
or
lods
jmp
xchg
cwde
aas
inc
inc
clc
movs
fcmovu
sbb
push
dec
adc
xchg
pop
sub
cmps
adc
dec
adc
std
sub
clc
push
cmp
ds
cli
das
xor
push
fdivrp
je
sub
jp
neg
enter
inc
sbb
sahf
sti
out
test
adc
retf
dec
pop
mov
cmps
fcmovnu
movs
xor
sbb
ret
sbb
icebp
test
not
cld
xor
jp
jb
xor
out
mov
pop
loop
adc
pushf
inc
adc
clc
cmc
and
xchg
or
push
pop
popf
adc
out
or
mov
inc
retf
(bad)
out
inc
ret
and
mov
or
jecxz
out
pop
repnz
push
add
mov
das
pop
test
enter
adc
dec
(bad)
in
ss
pusha
lods
push
cmc
call
xor
inc
test
stos
repnz
loop
pop
sbb
test
mov
mov
in
outs
fisub
mov
fbld
mov
repz
sbb
dec
fwait
and
ficomp
pushf
cs
int3
ss
mov
sub
shl
jne
in
pop
jnp
push
enter
sub
adc
add
inc
pop
sub
cmps
cmp
pop
cli
std
dec
cmp
xor
shr
out
xchg
sbb
mov
test
rcl
mov
xor
and
data16
xlat
sbb
xor
jbe
push
jb
dec
pop
into
xor
inc
ds
int
add
out
in
inc
mov
pop
call
(bad)
in
push
scas
mov
push
push
icebp
sbb
pop
loopne
mov
mov
repz
mov
adc
push
mov
test
es
ins
and
cmp
je
cmp
sti
out
push
mov
inc
sbb
push
mov
xchg
sbb
cmp
(bad)
xchg
test
sub
and
aam
ret
lds
repnz
popa
push
xchg
push
pop
shr
jle
shr
icebp
js
fsubr
push
push
outs
mov
clc
shr
adc
mov
dec
push
sbb
adc
std
pop
retf
xchg
push
push
pop
mov
icebp
movs
and
repz
mov
outs
iret
in
out
shl
(bad)
push
aaa
das
inc
push
les
out
xchg
inc
dec
fidiv
xor
pop
add
call
pop
add
dec
jle
sahf
mov
ret
fdivr
in
stos
pop
scas
or
mov
hlt
pop
mov
in
aas
gs
leave
out
xchg
cmp
(bad)
xchg
xchg
jg
xchg
cs
xlat
arpl
fimul
in
xor
adc
(bad)
retf
mov
imul
or
je
movs
add
icebp
sbb
or
xor
enter
pop
xchg
fidiv
ins
cmp
jns
add
mov
arpl
push
add
or
dec
jl
jbe
jmp
mov
sub
lahf
xlat
fistp
test
stos
add
ins
fs
and
and
(bad)
push
mov
jge
sub
push
pop
pop
push
sub
pop
loope
fsub
jbe
test
jb
xor
push
hlt
cmps
sbb
mov
mov
jecxz
add
mov
scas
jge
mov
loop
inc
inc
fcomp
mov
jmp
and
neg
iret
jmp
call
fcomp
xor
xchg
das
aas
fwait
retf
jle
cwde
dec
push
push
mov
dec
ret
enter
dec
mov
xchg
xchg
mov
clc
aaa
mov
lea
mov
movs
aaa
jg
xor
mov
mov
push
test
ins
push
test
pop
mov
dec
xchg
lods
fs
retf
dec
jmp
ja
out
lods
out
imul
fsub
sti
shl
adc
mov
lea
jno
popf
loop
jecxz
rol
int
mov
std
aad
sbb
iret
mov
xchg
aam
sbb
cmp
mov
mov
jno
jo
test
jbe
mov
cli
jne
daa
pusha
add
push
call
ret
bound
mov
push
mov
cmp
dec
jne
inc
sub
xor
xchg
les
fcmovnbe
and
xchg
push
pop
data16
inc
dec
xchg
push
mov
mov
lock
std
int3
push
ss
inc
xchg
rcl
jno
jmp
adc
sbb
loop
and
dec
xchg
not
or
(bad)
lods
inc
sahf
hlt
xor
aad
sub
(bad)
jmp
sbb
pop
(bad)
and
push
pop
push
mov
popa
cmp
xchg
hlt
dec
(bad)
dec
or
or
or
ss
cmps
leave
pop
mov
xor
mov
jle
cmps
sbb
add
cmp
lahf
cs
pop
std
icebp
stc
jbe
test
sar
loopne
ins
push
test
add
dec
push
stos
outs
lock
ret
jg
cmp
fsub
in
outs
sub
xor
mov
enter
retf
and
xor
pusha
rol
in
inc
cmc
arpl
jmp
mov
(bad)
not
ror
xor
push
mov
sbb
and
sbb
sbb
sub
inc
sub
pop
ins
or
mov
mov
sbb
fimul
cdq
dec
pop
loopne
mov
or
add
stc
cmp
cmps
xor
ret
ror
lahf
dec
das
dec
test
enter
dec
xchg
inc
push
aad
dec
out
sub
in
xor
jb
hlt
dec
ret
aas
aam
out
and
leave
es
ss
(bad)
in
lea
sbb
push
movs
sbb
add
dec
call
mov
sbb
sbb
out
dec
imul
int3
in
enter
inc
pop
(bad)
mov
es
pop
aad
xchg
imul
and
xchg
mov
in
cmp
jmp
sbb
retf
or
fwait
sbb
retf
xchg
inc
mov
mov
popa
data16
int
call
lods
xchg
popa
ja
loopne
dec
cli
adc
xor
adc
bnd
repnz
je
scas
push
inc
punpcklbw
scas
(bad)
mov
mov
mov
pop
setp
stc
imul
sub
push
dec
rol
sub
ret
mov
loop
sub
xchg
add
dec
cmp
mov
sub
stc
push
ja
dec
cmps
add
scas
xchg
jnp
aad
(bad)
cmp
mov
in
pop
dec
sbb
push
fild
mov
call
and
push
cmp
dec
mov
and
xor
add
or
pop
inc
inc
xchg
in
cli
inc
sub
cmp
(bad)
cmp
push
sub
scas
loopne
xchg
repnz
xor
add
dec
in
jmp
aam
push
cwde
repnz
loope
std
ins
sub
(bad)
jmp
div
int
das
dec
jle
xor
mov
data16
lods
in
cwde
inc
dec
movs
scas
mov
das
and
mov
sbb
shr
xor
sbb
int3
xchg
aam
mov
loopne
push
jmp
push
cld
loope
call
pop
test
inc
push
ror
mov
xor
and
pop
and
out
pop
push
xor
dec
hlt
fild
dec
push
fwait
adc
js
out
dec
pop
jle
xchg
jmp
sub
and
add
pop
mov
cmp
mov
sub
jp
sbb
adc
pushf
lods
push
push
add
sub
xchg
pop
mov
out
pop
pusha
ror
and
retf
push
addr16
clc
and
xor
jmp
sar
inc
jl
xor
(bad)
mov
pop
in
clc
into
and
dec
push
sub
sti
jno
pop
push
mov
ror
jno
dec
or
cmp
dec
pop
sbb
xor
xchg
sbb
fstp
test
sbb
(bad)
neg
movs
enter
loopne
out
or
xchg
push
inc
jmp
pop
(bad)
lods
xor
add
sbb
sub
mov
test
leave
jp
mov
ins
mov
int3
push
stos
cmp
call
jle
imul
fistp
rol
lock
addr16
sub
jl
mov
dec
(bad)
push
xor
xor
retf
out
xchg
arpl
iret
mov
mov
in
js
(bad)
lea
movs
rcl
daa
mov
add
(bad)
jmp
add
xor
cmp
sahf
inc
and
jae
ret
xchg
jecxz
(bad)
pushf
retf
mov
ja
imul
aam
push
push
aas
adc
mov
sub
add
push
std
les
or
sti
sar
inc
popf
mov
ins
xlat
icebp
mov
jae
loopne
xlat
sbb
je
jg
(bad)
imul
mov
stos
sbb
fmul
ret
sbb
lahf
loop
pop
jno
pop
pop
icebp
add
lock
sbb
out
popa
cs
inc
sbb
test
mov
dec
data16
sbb
mov
cmc
aam
pop
js
xor
sub
(bad)
ds
push
dec
es
repz
lds
jae
gs
stos
imul
cs
jno
or
push
test
jl
sti
pop
stos
xor
rcr
pop
pop
xchg
das
inc
push
cmp
ins
aam
mov
cmp
jp
jns
rol
push
or
cmp
rcr
adc
aaa
sub
imul
jmp
mov
mov
mov
out
adc
dec
sub
inc
call
xor
shl
pop
sbb
loope
inc
fs
cs
inc
idiv
cmp
out
push
xor
adc
and
push
mov
sub
mov
mov
repnz
mov
adc
adc
dec
xor
adc
add
aad
pusha
popa
test
les
fisttp
das
in
out
ret
retf
cdq
addr16
lods
dec
cmc
push
xor
cmc
fisttp
xor
addr16
hlt
call
retf
xchg
push
mov
fcomp
sub
test
xchg
add
leave
dec
sbb
in
inc
stc
jmp
cmp
fnstcw
shl
jecxz
mov
jmp
pop
in
mov
mov
mov
lds
loope
sub
in
and
loopne
fstp
inc
dec
adc
jnp
pop
and
rol
mov
dec
scas
lods
lahf
push
cld
call
movs
sbb
call
je
inc
lock
pop
add
xor
xor
sar
inc
jns
sbb
mov
and
shl
adc
js
fdiv
mov
jno
lods
mov
inc
(bad)
jmp
lods
xchg
rol
mov
dec
data16
mov
cmc
ins
dec
into
pop
mov
mov
and
sub
test
call
mov
enter
loop
add
(bad)
shr
mov
jmp
mov
or
daa
(bad)
mov
popf
(bad)
jb
ret
cli
dec
das
mov
dec
xor
lods
fwait
xchg
inc
cmc
(bad)
(bad)
ret
sub
and
mov
xor
mov
ret
mov
mov
xor
aas
pop
mov
addr16
jl
enter
ins
out
addr16
cmp
sbb
jge
dec
ret
enter
mov
xor
lea
mov
pop
adc
or
sbb
sbb
pop
add
les
test
cwde
sub
mov
lods
jmp
push
lock
dec
sub
js
sbb
mov
sahf
pop
push
enter
pop
cmps
(bad)
mov
shl
pop
or
xchg
jl
mov
or
int
cmp
or
dec
stos
fistp
test
pushf
jbe
and
stos
push
arpl
call
jae
ror
and
je
push
mov
and
mov
mov
sbb
xchg
pop
xchg
out
mov
fild
and
push
std
in
into
inc
jae
sbb
das
aaa
add
int3
xor
adc
jp
lahf
cmp
jg
sbb
pushf
push
jp
cli
inc
aas
push
adc
xchg
(bad)
jae
mov
push
push
mov
or
xchg
movs
dec
stos
arpl
sbb
mov
mov
in
ret
inc
sbb
sub
lahf
cmp
sub
lds
(bad)
pop
push
mov
jg
pop
xlat
pop
aas
mov
xchg
xchg
stos
mov
pop
xor
ret
div
jnp
and
or
std
shr
adc
fs
pop
mov
addr16
pop
popf
test
add
shr
dec
fidivr
popf
xchg
pop
lods
idiv
cld
int3
addr16
cmp
fdivr
leave
loope
sub
push
test
(bad)
rcr
into
data16
daa
je
(bad)
outs
mov
add
in
lea
push
lock
dec
retf
nop
xchg
sub
mov
xchg
ret
int3
fild
add
dec
dec
loop
cmc
(bad)
mov
fs
add
jl
and
cs
or
or
daa
in
loopne
or
ins
mov
sub
pop
mov
inc
push
call
inc
or
adc
jae
in
jmp
mov
(bad)
pop
mov
jae
adc
inc
cli
adc
push
mov
pop
lods
hlt
dec
ss
dec
shl
mov
pusha
pop
repz
fwait
ss
dec
jb
pop
jmp
mov
dec
icebp
mov
int3
push
getsec
cmps
ret
mov
fnsave
pushf
mov
inc
pop
jle
and
test
sbb
jnp
and
arpl
cmp
mov
xchg
jl
lock
xor
jle
inc
out
dec
mov
xchg
and
xor
jp
add
mov
pop
mov
icebp
push
dec
push
dec
and
and
pusha
pop
push
call
dec
sub
ins
dec
mov
fwait
push
daa
ret
cld
stos
xor
out
push
xor
jl
adc
xor
ret
jl
xchg
lods
outs
test
add
fs
(bad)
fst
adc
jbe
jae
(bad)
into
pop
sbb
cld
inc
jne
sti
bswap
add
mov
mov
push
and
add
popa
inc
loope
adc
movs
imul
sar
in
dec
mov
xchg
dec
scas
pop
xlat
fnstenv
push
jbe
and
inc
xor
xor
xchg
into
nop
imul
test
jmp
cld
cmps
sti
jecxz
rol
mov
mov
xchg
cmp
(bad)
sar
movs
je
cli
mov
mov
add
shl
inc
sar
xchg
fucom
bswap
cmp
mov
(bad)
xor
mov
in
imul
push
and
sub
jmp
pop
aas
stc
and
es
jb
or
push
push
and
inc
push
or
pop
inc
jecxz
push
fnstsw
add
int3
push
push
icebp
sbb
jns
arpl
test
imul
xchg
das
lods
dec
cmps
push
cld
(bad)
scas
call
les
xor
in
push
push
xor
popa
add
lds
jge
inc
imul
xchg
std
mov
adc
ins
xchg
loop
repz
pop
bound
cpuid
sbb
pusha
outs
push
test
in
or
mov
aam
stos
loopne
mov
sub
sar
and
mov
imul
call
out
stc
mov
jae
imul
dec
stc
lods
cs
and
dec
mov
idiv
int3
jg
dec
repz
mov
push
test
mov
cmp
sahf
adc
mov
sbb
xchg
test
jnp
adc
or
sbb
sbb
shl
out
inc
xor
mov
cvttps2pi
jns
hlt
call
jl
xchg
(bad)
retf
adc
mov
jge
out
mov
or
cmp
pop
sbb
hlt
sbb
gs
cmp
icebp
std
inc
iret
cmp
xor
js
jmp
push
mov
cld
push
shl
jne
mov
cwde
mov
hlt
pop
pop
mov
pop
cmc
bound
mov
popa
inc
mov
jmp
arpl
xchg
mov
mov
cmp
sub
xchg
out
cpuid
mov
fldcw
ror
dec
pop
lock
sub
(bad)
retf
mov
mov
ror
scas
shl
fist
jmp
mov
icebp
fsub
pop
rcl
mov
mov
les
xchg
sub
jbe
dec
shl
lods
hlt
push
mov
cmp
xor
mov
loopne
mul
push
ss
(bad)
aaa
in
adc
pop
xchg
popf
sbb
adc
aam
fcomp
pop
mov
movs
int3
adc
and
cwde
adc
iret
mov
stos
lea
xlat
or
retf
pop
or
retf
mov
jmp
mov
adc
inc
xchg
or
sti
xchg
mov
sbb
cdq
inc
(bad)
cmps
xchg
enter
lds
vmovaps
mov
cmp
inc
or
push
into
push
fs
mov
jmp
push
mov
sbb
sub
mov
stos
repz
rol
adc
cmp
enter
push
repnz
(bad)
retf
stos
cmp
stos
or
in
dec
mov
(bad)
dec
xor
out
cmp
xor
cmps
es
iret
scas
and
out
pop
and
jnp
sahf
mov
mov
xor
idiv
movs
mov
inc
cmp
outs
xchg
push
xchg
sub
adc
xchg
in
pop
aaa
or
shl
sbb
and
ror
mov
test
jae
fwait
adc
xchg
adc
hlt
jne
mov
xor
aam
arpl
cmp
test
cdq
pop
push
cld
mov
mov
xor
mov
sbb
aam
arpl
outs
jmp
push
lahf
shl
ret
push
ficom
xlat
adc
ss
dec
sar
mov
xchg
cmp
int
call
(bad)
mov
sub
or
xor
in
enter
sub
xchg
xlat
mov
(bad)
cmp
jp
cmp
xor
cmp
repnz
cmp
scas
in
jnp
loope
(bad)
(bad)
(bad)
shl
popa
cli
adc
add
outs
mov
fnstcw
out
push
je
add
jns
mov
cwde
loop
ss
jg
mov
sahf
imul
xlat
mov
xor
icebp
call
shr
jl
call
pushf
in
adc
mov
es
xor
jmp
xchg
out
hlt
jo
jnp
popf
neg
or
out
cwde
cmp
jnp
fadd
jg
pop
ret
xor
adc
out
xor
cmp
adc
sbb
scas
xlat
adc
adc
xor
not
sahf
add
pop
push
fldcw
inc
sbb
in
sub
loop
jl
fld
out
sub
dec
(bad)
ret
sub
out
ja
push
rol
mov
call
mov
mov
dec
xor
stc
push
lds
xchg
inc
aas
aad
jae
mov
push
sar
cdq
cmps
out
shr
xor
lock
into
or
into
cmp
sub
mov
jg
hlt
add
jg
push
pop
popf
jmp
mov
stc
sar
std
and
aas
jnp
mov
ficomp
mov
retf
sub
cmp
arpl
ss
sub
ss
pop
ret
mov
aam
retf
retf
inc
scas
hlt
test
mov
(bad)
inc
shr
pop
cmp
in
stos
cmp
(bad)
mov
sub
test
scas
(bad)
mov
retf
xor
pop
sti
jle
xchg
push
scas
test
lods
cmp
shl
fwait
adc
xchg
retf
jns
jmp
mov
push
xor
mov
mov
pop
nop
sub
and
mov
sub
fcmovnu
aaa
fwait
out
jle
xor
das
shr
pop
cmc
jg
retf
(bad)
push
mov
retf
jb
movs
mov
xchg
xor
dec
ds
push
push
(bad)
cld
mov
ret
(bad)
retf
cmp
mov
pop
xchg
pop
lahf
out
inc
fimul
push
adc
aas
and
leave
mov
lahf
push
push
fiadd
push
sbb
dec
call
mov
movs
mov
imul
mov
cmp
jg
retf
add
imul
inc
mov
iret
jmp
xor
in
stos
dec
add
push
in
push
dec
aam
popa
repz
je
cmp
mov
es
inc
jmp
iret
push
jecxz
imul
rol
leave
ret
mov
cld
jb
xor
outs
xor
xor
adc
adc
repz
div
sbb
leave
jno
cmp
lock
jl
loop
inc
jle
into
push
xor
shl
cdq
and
not
aaa
out
mov
mov
pop
bound
xlat
aas
lock
icebp
jmp
idiv
aas
cmp
aam
(bad)
fucomip
mov
dec
(bad)
push
ss
nop
xor
push
cld
push
mov
jo
mov
dec
stos
out
bound
cld
iret
sub
cmp
mov
idiv
dec
js
sub
inc
(bad)
xlat
xor
pop
inc
pop
jmp
loop
hlt
idiv
mov
mov
iret
ret
xchg
data16
cmp
pop
pop
push
mov
push
out
pop
clc
mov
mov
mov
jmp
sbb
mov
lock
jle
jne
outs
inc
push
pop
clc
repz
gs
jecxz
lods
jb
cmps
and
ret
adc
xchg
aas
push
pop
int
xor
data16
rcl
clc
xchg
push
cmc
jecxz
sub
mov
pop
mov
(bad)
in
clc
inc
outs
cmc
mov
lahf
leave
(bad)
stc
imul
xor
mov
mov
lock
and
pop
xor
dec
mov
das
stos
jecxz
out
leave
pop
hlt
hlt
das
retf
pop
test
xor
repnz
mov
sbb
xchg
xchg
cmp
dec
push
cld
dec
jecxz
mov
mov
or
xchg
ds
icebp
bound
sub
jmp
mov
mov
leave
(bad)
cs
(bad)
lock
aaa
cmp
cli
repnz
mov
icebp
sub
mov
and
adc
(bad)
call
movs
enter
mov
inc
mov
jmp
(bad)
(bad)
(bad)
call
pop
mov
hlt
sub
jge
push
sbb
and
out
xchg
out
mov
xchg
xor
fdivr
xchg
int3
in
jmp
mov
cmp
mov
push
(bad)
in
mov
cmp
push
mov
fmulp
mov
xor
call
ds
call
cld
hlt
cmp
sbb
pop
xchg
mov
repz
push
arpl
cmp
repz
cs
xchg
cld
push
jecxz
inc
popf
jmp
mov
mov
jne
bound
pop
sub
lods
adc
push
xchg
mov
iret
push
bound
sub
cli
xor
popa
pop
test
jae
sub
dec
or
imul
icebp
sub
ss
add
jno
dec
xor
mov
shl
adc
inc
out
out
idiv
mov
mov
xor
icebp
(bad)
push
jge
jae
cmp
jg
mov
cmp
int3
sti
sbb
or
cmp
(bad)
adc
xor
mov
pop
sbb
dec
cli
jecxz
pop
jnp
scas
mov
lock
cmp
loopne
clc
xchg
movs
neg
mov
ror
(bad)
scas
lods
inc
xor
inc
call
xchg
xchg
mul
inc
aaa
icebp
rcr
dec
test
jmp
mov
push
or
push
pop
in
out
inc
pop
mov
xor
fmul
sbb
jl
sub
in
sub
sbb
repnz
outs
out
mov
inc
cmps
xor
xor
xchg
icebp
inc
sbb
sar
shl
scas
ja
stos
cmp
repnz
fwait
test
sbb
pop
out
jnp
adc
ret
je
dec
ficom
dec
jo
mov
fild
in
int3
xchg
xor
ret
cmps
mov
scas
push
(bad)
clc
addr16
xchg
adc
retf
(bad)
jb
loope
xor
or
lock
popa
and
jle
sbb
mov
dec
push
mov
loope
mov
ret
xchg
into
mov
cli
mov
xor
(bad)
sahf
jl
cld
and
mov
rcr
test
(bad)
mov
xchg
rol
and
in
jae
fwait
push
xchg
pusha
mov
push
jmp
(bad)
mov
(bad)
push
inc
lods
icebp
bound
xchg
jmp
pop
dec
mov
xchg
mov
cmc
cmp
retf
adc
or
in
mul
fwait
push
shr
and
mov
test
cmps
jns
dec
sti
jbe
in
aas
icebp
not
cdq
and
aaa
mov
pop
std
cmps
mov
sahf
les
aad
sbb
daa
popf
adc
jl
shr
pop
fild
sub
push
mov
scas
stc
not
jp
mov
lods
xor
ss
iret
mov
popaw
jns
retf
lods
call
idiv
jl
test
add
rol
jecxz
std
mov
mov
or
add
out
rcr
das
push
sbb
and
and
hlt
pop
jge
cwde
add
std
gs
xchg
movs
repnz
push
(bad)
sbb
clc
popf
jno
scas
inc
rcl
(bad)
cmp
mov
call
aam
ins
aas
test
and
clc
xor
push
mov
test
add
pusha
rol
and
mov
adc
pop
xchg
jge
and
pop
sbb
mov
lea
add
adc
sub
adc
xor
mov
adc
out
ficom
mov
call
out
bound
es
lods
hlt
test
ins
sub
mov
mov
or
mov
mov
mov
mov
repnz
sub
(bad)
add
push
iret
imul
or
push
jecxz
ret
jno
jp
mov
and
cld
jmp
xchg
xor
lods
(bad)
jle
fsub
mov
out
(bad)
into
push
push
aaa
ins
in
daa
sub
fdiv
mov
adc
imul
js
loop
push
loopne
mov
or
and
cmc
bound
mov
out
cwde
jno
shl
push
mov
out
mov
pop
dec
xchg
inc
nop
popf
mov
popf
fcomip
rcr
retf
mov
pop
out
repz
jmp
and
movs
xor
addr16
sbb
jbe
shl
and
ret
je
in
ins
xor
push
test
or
imul
fs
fmul
pop
mov
jbe
jmp
daa
pop
jmp
fs
cwde
fidivr
mov
ror
mov
in
jnp
lahf
sub
(bad)
cmc
lds
add
pop
dec
enter
aam
repz
(bad)
fsubr
push
dec
cdq
fisubr
push
push
mov
inc
das
lods
lock
ret
not
cwde
ins
push
cli
stos
js
cmc
push
cmps
aad
in
adc
out
fdiv
in
loop
lahf
jl
dec
test
(bad)
cmp
pop
movs
cld
stos
dec
fbld
mov
stos
mov
xor
clc
mov
mov
int3
stos
cwde
mov
out
nop
(bad)
sub
push
lods
push
adc
cdq
mov
fbstp
int3
in
hlt
and
pop
fsub
aam
sbb
pop
sahf
push
cmc
xchg
test
adc
sbb
cwde
ret
add
test
out
call
xchg
jmp
mov
enter
and
ret
sbb
sbb
loop
(bad)
jle
je
jle
sbb
jmp
mov
fcomp
int
or
into
je
sbb
jne
inc
and
dec
xor
leave
data16
es
ds
cmc
add
or
mov
fwait
scas
jns
push
xchg
mov
cmps
aam
lock
adc
(bad)
call
std
mov
jae
(bad)
mov
xchg
dec
div
push
push
retf
out
fsub
sti
push
call
mov
add
aaa
xor
popa
in
and
xor
lods
dec
xor
inc
xor
rol
push
shl
in
std
fisttp
mov
add
mov
sub
push
(bad)
aaa
fmul
push
int3
je
pop
adc
and
je
or
pop
jecxz
cld
push
jbe
popa
aam
jno
push
je
loope
arpl
dec
pop
loop
icebp
mov
inc
je
out
dec
out
cmp
cli
repz
and
xor
add
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
cmp
aaa
