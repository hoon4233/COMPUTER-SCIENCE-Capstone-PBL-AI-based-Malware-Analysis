push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
lea
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
lea
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
lea
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
lea
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
lea
mov
mov
jmp
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
lea
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
movzx
mov
mov
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
lea
mov
mov
call
mov
mov
cmp
setl
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
setl
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
mov
sub
mov
sub
add
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
lea
mov
mov
call
mov
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
mov
jmp
lea
lea
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
call
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
call
call
xor
mov
mov
call
mov
add
pop
pop
pop
pop
ret
call
mov
jmp
int3
int3
int3
int3
push
mov
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovge
mov
jmp
mov
mov
cmp
cmovle
mov
jmp
mov
mov
sub
sub
add
sub
sub
mov
mov
jmp
mov
mov
mov
jmp
mov
add
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
lea
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
mov
mov
cmp
cmovae
mov
jmp
mov
mov
cmp
cmovae
mov
jmp
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
movsx
mov
xor
and
xor
and
or
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
mov
add
mov
mov
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
movsx
mov
and
xor
or
mov
sub
sub
mov
mov
shl
mov
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
jmp
data16
push
mov
sub
mov
mov
mov
mov
mov
sub
mov
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
call
mov
mov
jmp
mov
add
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
add
add
sub
mov
mov
movzx
mov
mov
movzx
mov
mov
xor
mov
mov
mov
mov
and
xor
and
or
mov
mov
cmp
mov
mov
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
movzx
mov
mov
movzx
mov
xor
mov
mov
and
xor
and
or
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
add
pop
pop
pop
pop
ret
mov
mov
add
add
sub
mov
mov
mov
call
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
movzx
mov
mov
movzx
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
sub
mov
mov
sub
mov
mov
movzx
mov
xor
and
xor
and
mov
xor
and
and
or
or
xor
mov
mov
mov
mov
cmp
mov
cmove
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
sub
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
lea
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
add
add
mov
mov
mov
add
mov
mov
mov
imul
add
sub
mov
mov
mov
mov
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
mov
mov
movzx
mov
mov
mov
mov
add
add
sub
mov
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
mov
add
add
mov
mov
mov
add
mov
mov
mov
mov
shl
add
sub
mov
mov
mov
mov
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
call
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovb
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
add
add
sub
mov
mov
sub
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
mov
movzx
mov
mov
sub
mov
mov
movzx
mov
mov
mov
mov
add
add
mov
mov
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
nop
push
mov
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
add
pop
ret
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
sub
add
add
mov
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
jmp
mov
mov
call
mov
mov
mov
sub
add
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
sub
sub
add
add
sub
sub
mov
mov
shl
add
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
sub
add
sub
add
mov
mov
shl
add
add
mov
mov
mov
mov
mov
mov
call
add
sub
sub
mov
mov
jmp
push
mov
push
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
sub
add
add
mov
mov
jmp
mov
add
pop
pop
ret
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
sub
mov
sub
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
movsx
mov
movsx
cmp
cmovne
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovl
mov
mov
jmp
mov
mov
mov
movsx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
mov
movzx
cmp
cmovl
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
sub
sub
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
movzx
mov
movzx
cmp
cmovl
mov
mov
jmp
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
mov
call
mov
imul
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
sub
add
add
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
mov
mov
jmp
nop
push
mov
push
push
sub
mov
mov
lea
mov
mov
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
movzx
mov
mov
xor
mov
and
xor
and
or
mov
mov
mov
mov
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
add
pop
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
movzx
mov
xor
and
xor
and
or
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
sub
add
add
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
imul
mov
sub
mov
sub
add
sub
mov
shr
xor
mov
xor
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
imul
add
add
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
movzx
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
movzx
mov
mov
mov
add
mov
mov
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
movzx
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
movzx
mov
mov
mov
add
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
shl
add
mov
sub
add
shl
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovae
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
shl
add
mov
add
sub
sub
shl
add
mov
mov
jmp
mov
jmp
mov
mov
jmp
nop
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
movzx
mov
call
mov
movzx
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
movzx
cmp
cmove
mov
jmp
mov
mov
jmp
mov
add
mov
mov
add
mov
mov
jmp
mov
movzx
mov
call
mov
movzx
mov
mov
call
mov
sub
mov
add
mov
mov
jmp
mov
add
pop
pop
ret
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
cdq
idiv
mov
mov
mov
mov
mov
jmp
mov
add
add
sub
mov
mov
mov
mov
mov
cdq
mov
idiv
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
nop
push
mov
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
movsx
mov
xor
and
xor
and
or
mov
mov
mov
mov
jmp
mov
sub
add
add
mov
mov
jmp
lea
mov
mov
mov
call
add
pop
pop
pop
ret
jmp
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
lea
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
sub
add
mov
mov
shl
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmovne
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
add
add
sub
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
movzx
mov
movzx
mov
mov
add
add
sub
movzx
mov
movzx
mov
mov
sub
sub
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
movzx
mov
movzx
mov
mov
sub
sub
movzx
mov
movzx
mov
mov
movzx
mov
add
add
movzx
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
call
mov
jmp
mov
mov
call
mov
jmp
mov
mov
call
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
cmp
setne
mov
xor
and
mov
xor
and
xor
and
and
or
or
xor
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
movzx
mov
mov
mov
add
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
mov
sub
add
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
sub
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
call
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
movzx
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
add
sub
sub
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
call
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
movzx
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
movzx
mov
mov
mov
sub
mov
sub
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
call
lea
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
lea
mov
mov
add
sub
sub
mov
shl
add
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
lea
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
add
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
lea
mov
mov
mov
call
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
add
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
push
aad
dec
jle
scas
(bad)
and
retf
enter
push
mov
or
push
stos
test
das
xor
nop
adc
sar
adc
std
fbstp
inc
cmc
pop
mov
mov
xchg
jnp
mov
test
movs
inc
int3
sub
inc
sar
mov
lods
pop
push
clc
mov
dec
xchg
test
push
mov
cld
dec
push
jmp
inc
popa
aad
jp
pusha
lods
jp
jbe
retf
pop
push
and
inc
cs
dec
and
ror
xchg
and
cmp
aam
add
pusha
popa
fdivr
cld
jg
push
mov
les
in
imul
jp
pop
clc
inc
mov
in
or
enter
clc
enter
pop
push
lods
stos
xor
inc
pop
pop
push
addr16
add
jo
and
or
sbb
(bad)
mov
fdivp
cmp
out
imul
test
mov
inc
sub
fdiv
imul
aas
retf
gs
clc
push
inc
aaa
xlat
es
xlat
(bad)
cmp
and
(bad)
aam
xchg
dec
in
add
out
push
nop
mov
repnz
mov
fmulp
mov
cmp
out
int
test
xor
(bad)
pop
jns
in
in
aaa
stos
sbb
fdiv
cwde
stos
cmp
xor
shl
pushf
fnstsw
add
int3
jmp
add
imul
rol
pop
mov
cmps
or
fimul
popf
mov
pop
retf
push
nop
sahf
xor
bound
jecxz
retf
fld
inc
shl
xor
jb
xchg
pop
or
pop
movs
dec
push
cwde
scas
ins
inc
add
sbb
sbb
ins
fbld
push
pop
jns
mov
outs
pop
sub
xor
sub
ins
iret
cli
push
lods
lods
xchg
in
dec
mov
inc
popa
inc
sbb
int3
sub
jg
sub
or
inc
mov
jmp
fild
adc
pop
sbb
sub
imul
adc
sub
or
out
push
ret
not
sub
retf
xlat
outs
inc
jae
popa
(bad)
in
rol
test
mov
mov
add
add
std
int
sub
mov
cmp
add
jmp
push
inc
cmp
mov
test
mov
lahf
and
es
movs
mov
mov
rcr
mov
out
lods
pusha
cmp
jmp
retf
pop
cmp
inc
ins
mov
cmps
and
push
daa
ret
adc
push
sti
xchg
jmp
push
(bad)
mov
fisub
mov
pop
xlat
jns
mov
dec
div
mov
dec
xchg
jmp
fsubr
imul
pusha
out
pusha
inc
sub
arpl
lods
inc
out
in
fldenv
and
addr16
jecxz
ins
fstp
sbb
cmp
or
inc
aas
fmul
jg
call
cs
sar
mov
adc
loopne
or
adc
les
jae
pop
and
jns
jne
mov
and
and
xchg
jmp
leave
fadd
retf
mov
aas
test
icebp
pushf
and
adc
dec
daa
int3
popf
pop
popa
push
cmc
test
sbb
push
arpl
xchg
and
int3
stos
retf
cs
fdivr
popa
or
clc
in
bound
or
dec
lods
sar
leave
je
(bad)
dec
cmps
mov
dec
push
mov
inc
pusha
clc
enter
xchg
jmp
retf
stos
cmp
jge
int3
dec
adc
xor
or
loopne
jno
aad
and
fwait
mov
sub
std
daa
lods
xor
retf
cmc
loope
jl
call
sbb
cmp
pop
fdiv
cld
add
pop
je
bound
add
fnstsw
inc
outs
ds
mov
fild
aam
push
mov
in
gs
add
sbb
outs
inc
add
retf
inc
mov
pop
mov
fsubr
fdivr
xchg
(bad)
fdiv
xchg
std
sub
push
fisubr
gs
push
in
mov
add
push
mov
add
pop
add
call
adc
into
retf
cdq
(bad)
xor
or
and
xchg
mov
rol
sbb
and
adc
pop
push
(bad)
pop
fbstp
imul
ss
mov
sub
push
das
push
clc
mov
jecxz
mov
loopne
add
adc
and
pop
jmp
loope
ins
mov
mov
sbb
scas
clc
mul
xchg
popf
es
sbb
cmps
and
sub
mov
push
arpl
or
pop
das
repz
js
jae
fbld
mov
jae
int
sub
aam
or
rol
add
mov
or
mov
jnp
mov
jl
adc
fiadd
mov
and
cmp
scas
(bad)
test
mov
pop
das
cmp
jl
inc
outs
ror
imul
inc
shl
cmps
cmp
push
adc
pop
sar
sub
xchg
sub
xlat
shl
or
(bad)
or
scas
dec
aam
pop
stos
inc
dec
adc
in
test
mov
add
repz
fdivr
lods
fs
push
inc
push
cwde
ins
sti
xor
lods
jmp
mov
or
and
or
push
add
pushf
jno
xchg
test
mov
repz
jg
sub
imul
add
add
adc
loopne
nop
js
repz
pushf
inc
scas
stos
xchg
fdiv
xchg
xor
add
jecxz
fbstp
sar
jge
push
xor
mul
mov
pop
aam
xchg
(bad)
lock
mov
xchg
(bad)
into
xor
test
cdq
sub
jmp
call
mov
pop
fiadd
fmul
xchg
xor
(bad)
fwait
arpl
push
xchg
cmp
arpl
or
call
pop
test
sahf
add
sub
enter
push
div
inc
or
out
inc
mov
aam
sti
or
dec
enter
pushf
xchg
add
dec
push
cmp
inc
inc
inc
or
stc
outs
(bad)
in
or
and
sbb
add
and
or
mov
xor
pop
pop
std
adc
(bad)
addr16
jle
cmp
or
jnp
cmps
loopne
lds
test
loop
mov
pop
sar
lods
dec
dec
sbb
int
and
test
mov
jle
cmp
inc
js
cmps
sub
lahf
fst
xchg
in
mov
pop
and
clc
ror
xchg
xchg
retf
push
cs
adc
mov
call
in
jb
not
movaps
mov
xchg
pop
sahf
test
fcom
mov
xchg
xlat
xchg
cmc
push
(bad)
call
bound
sbb
int3
sub
push
mov
xchg
push
std
cmp
ret
rcr
add
mov
xchg
lahf
es
xor
push
sahf
fucomp
lods
nop
popa
or
mov
jb
and
mov
sahf
dec
adc
mov
jb
add
jp
lods
push
adc
cwde
inc
pop
cmps
das
ds
in
dec
fisub
xchg
dec
mov
jno
int3
or
and
push
pop
out
jl
mov
xchg
xor
adc
test
sub
jmp
cmp
std
dec
das
cmp
sbb
mov
loop
push
rcr
push
(bad)
sbb
and
pop
js
inc
xchg
mov
pop
xchg
rcr
sbb
leave
cmp
xor
push
push
(bad)
jb
dec
jns
movs
adc
mov
je
mov
hlt
cmp
dec
js
jl
mov
(bad)
mov
je
aad
dec
cmp
push
adc
sbb
neg
jmp
repz
jge
inc
rol
rcr
push
rcl
push
lock
(bad)
xlat
mov
and
sbb
adc
cmc
jmp
imul
cwde
add
inc
fmul
push
nop
add
cmc
clc
cmp
imul
(bad)
in
xor
xchg
sbb
sub
sar
adc
xchg
scas
repnz
xchg
xor
mov
sub
fcomp
inc
push
sbb
stos
mov
imul
xor
and
test
sbb
push
xor
xor
add
shr
ins
arpl
stc
inc
push
push
dec
popa
dec
ins
push
imul
dec
adc
mov
mov
push
or
jecxz
pop
sub
call
mov
aad
xchg
ss
loope
(bad)
stos
and
add
jmp
add
pop
imul
jle
fld
sahf
or
adc
add
sbb
or
sub
inc
add
sub
xor
and
hlt
stos
ja
jnp
inc
in
pop
mov
stos
ret
inc
in
inc
jmp
cmp
js
jmp
push
xlat
lods
nop
mov
or
inc
xrelease
inc
cmp
repz
fnstsw
add
enter
loop
scas
(bad)
jecxz
nop
and
lock
ins
jne
mov
mov
enter
ror
out
add
aad
call
or
das
dec
jb
fmul
push
dec
dec
inc
mov
scas
add
(bad)
sbb
fimul
icebp
add
(bad)
shl
pusha
stos
pop
jmp
inc
sti
xchg
retf
sub
lahf
std
add
cmp
adc
sbb
and
into
mov
sub
div
sub
scas
lahf
cli
movs
mov
pop
retf
idiv
xchg
xchg
out
add
cmp
loope
cld
sub
(bad)
cmp
push
in
xor
mov
jb
rcr
push
inc
das
mov
loop
or
xchg
pop
retf
mov
ja
int
adc
jg
stos
stc
adc
adc
cmp
in
sub
adc
hlt
push
(bad)
dec
loope
pop
movs
les
pusha
xchg
ins
pop
sub
(bad)
ins
(bad)
fwait
inc
test
nop
jge
popf
test
mov
(bad)
xor
loope
(bad)
daa
mov
das
push
enter
sar
pop
loop
and
add
pop
out
or
sub
add
inc
out
adc
icebp
push
jns
fadd
push
jns
in
mov
ins
pusha
test
cmp
inc
mov
adc
sbb
jb
xor
jp
ror
push
push
or
push
sar
aad
mov
daa
jb
enter
and
push
outs
cdq
data16
rol
mov
inc
stc
mov
xor
(bad)
ret
ins
popf
jg
xchg
arpl
call
sar
xchg
pop
inc
aaa
mov
jecxz
jmp
fdivrp
push
jbe
test
mov
test
js
ds
aam
push
push
(bad)
(bad)
fadd
out
add
ja
repnz
mov
out
cmps
clc
cmc
mov
mov
xchg
adc
cwde
fcom
mov
lahf
push
xchg
ret
mov
adc
js
jns
adc
repnz
icebp
ror
ins
add
xchg
add
xlat
aad
in
ret
or
push
fimul
mul
test
xor
jae
xchg
(bad)
fcmovnbe
cdq
xchg
aam
cmp
jmp
ret
pop
lock
adc
es
xor
retf
les
jl
shr
mov
xchg
ds
addr16
aad
pop
xchg
aad
prefetcht0
in
add
cdq
cdq
scas
nop
inc
inc
add
call
jle
sbb
lods
ret
rol
sub
mov
lods
icebp
adc
xor
mov
fimul
imul
popf
pusha
cmc
cmps
ret
jnp
inc
daa
imul
in
add
cld
scas
jl
arpl
ds
mov
clc
nop
push
inc
xor
scas
sbb
cdq
dec
retf
mov
push
mov
inc
xor
in
std
push
sbb
pusha
test
jno
mov
scas
cwde
pop
mov
loop
jo
adc
push
retf
or
mov
test
daa
es
or
scas
mov
jae
in
jecxz
jge
adc
into
ja
cwde
add
ja
je
test
inc
aam
ins
aas
add
jmp
and
pop
(bad)
or
fs
retf
dec
sbb
and
pusha
sbb
mov
fisttp
and
push
dec
mov
add
xor
nop
cmp
sub
adc
out
xor
hlt
pop
outs
cmc
cmp
test
(bad)
(bad)
out
mov
mov
add
fld
add
fiadd
and
push
mov
arpl
iret
mov
add
sbb
xor
out
adc
imul
jo
push
jge
cmc
push
std
or
mov
sub
pop
fst
xchg
inc
push
(bad)
sub
std
mov
jbe
stos
or
push
movs
fidiv
push
jbe
push
jbe
ins
int3
xchg
imul
out
fs
pushf
popa
sar
sub
and
mov
sahf
ror
or
inc
jmp
push
(bad)
adc
adc
adc
or
ins
add
clc
jae
push
pop
and
add
jge
or
repz
dec
xor
jb
sub
scas
add
out
test
push
add
jns
xchg
sahf
ja
and
movs
ds
std
test
sbb
rcr
mov
loop
and
mov
and
retf
(bad)
icebp
in
fisttp
pop
call
test
es
jge
les
retf
mov
pop
movs
shr
jmp
lds
repnz
dec
retf
ins
sbb
mov
mov
or
lds
rcr
pusha
cdq
cmp
mov
(bad)
hlt
test
outs
aas
imul
dec
cmp
retf
(bad)
jg
or
adc
out
inc
mov
bnd
push
and
push
shl
jns
jnp
mov
ret
mov
test
add
mov
addr16
leave
dec
fwait
pop
lahf
sbb
mov
or
stos
rcr
test
and
jns
dec
leave
mov
mov
aas
cmp
aam
(bad)
xor
(bad)
pop
jge
sti
jmp
cs
sub
mov
aas
mov
jb
push
dec
xchg
mov
dec
addr16
inc
mov
push
sbb
daa
sahf
mov
pop
sub
ror
mov
push
mov
push
(bad)
jnp
push
cdq
(bad)
call
in
mov
stos
outs
mov
xor
xchg
sbb
hlt
dec
cmp
add
jno
mov
mov
adc
cmp
cmps
(bad)
jmp
xor
test
xchg
dec
sub
mov
mov
pop
retf
cmp
inc
gs
cld
and
fs
sbb
aas
and
or
mov
cli
mov
mov
imul
sar
frstor
arpl
fist
and
ins
inc
jecxz
push
pusha
cli
jne
cli
retf
dec
push
mov
adc
mov
aaa
cwde
out
outs
mov
lods
mov
gs
dec
movs
jl
repnz
mov
pop
cmps
push
xchg
int3
xlat
mov
pop
or
ds
movs
out
call
push
xchg
mov
(bad)
stc
mov
jns
mov
movs
jge
xchg
adc
cmp
loopne
jge
and
xlat
pop
pusha
dec
mov
jno
pop
jp
xor
push
adc
mov
push
push
(bad)
rcr
adc
out
aam
and
push
mov
xchg
push
sub
icebp
add
fidiv
std
mov
inc
sub
das
outs
pop
mov
mov
mov
(bad)
out
dec
xchg
sub
or
dec
arpl
push
push
xor
fwait
in
or
add
out
push
cmp
and
pusha
movs
aad
sub
adc
fidivr
jge
imul
popf
imul
lods
pop
imul
cld
jns
loope
cmp
inc
push
push
scas
(bad)
js
pop
imul
dec
push
lea
movs
adc
div
xor
scas
pop
icebp
mov
xor
fistp
in
jo
or
pusha
xchg
dec
test
xor
xor
(bad)
inc
or
popf
inc
jae
push
(bad)
push
push
scas
xchg
dec
sar
dec
xor
or
xchg
aam
mov
or
pop
pop
not
pop
sbb
xchg
fwait
mov
mov
das
mov
mov
out
mov
mov
push
gs
or
rol
aas
ret
xchg
add
push
sti
nop
pop
retf
lods
mov
imul
push
(bad)
push
div
xor
mul
stc
jmp
cs
xor
jo
std
and
fistp
es
xor
push
outs
gs
dec
popf
ret
sbb
dec
pop
jno
cld
and
push
sahf
lea
push
push
and
xor
mov
hlt
fwait
ror
call
adc
sbb
cmps
aam
retf
xor
pop
xchg
daa
test
mov
iret
jbe
hlt
ret
xchg
fldl2t
xor
cs
ins
ficom
inc
imul
clc
jae
test
add
dec
jecxz
out
fwait
mov
es
adc
jo
push
add
lods
imul
(bad)
fldenv
mov
fwait
cli
xchg
and
cmp
ins
or
sub
mov
xchg
add
test
in
enter
cmp
mov
jo
jnp
mov
out
pop
jb
cmps
test
push
iret
pop
les
scas
or
and
popa
lds
add
stc
push
jns
and
xlat
lock
push
stos
mov
add
push
pop
je
adc
mov
inc
in
pop
push
gs
mov
mov
mov
inc
xchg
add
mov
addr16
popf
dec
outs
inc
ss
ret
mov
add
xchg
mov
das
leave
mov
xchg
data16
xor
pop
ins
adc
add
add
enter
jns
stos
es
mov
and
xchg
push
mov
test
push
inc
cwde
in
pop
leave
jns
mov
sbb
mov
jl
popf
and
imul
pop
ret
mov
cli
cmp
cmp
ret
push
fidiv
inc
mov
mov
inc
cmp
sbb
or
fild
push
add
bound
mov
call
inc
jae
ds
mov
shl
push
(bad)
adc
(bad)
(bad)
ss
jge
je
enter
imul
push
mov
in
inc
mov
scas
sub
lahf
scas
and
ss
(bad)
push
in
aas
retf
pusha
xchg
sub
mov
fnstenv
out
mov
dec
out
outs
ins
test
or
xchg
or
add
in
mov
sbb
out
js
inc
dec
into
daa
nop
mov
jecxz
loop
push
dec
int3
(bad)
cdq
or
js
cdq
xchg
fidivr
mov
jmp
dec
dec
movs
cmp
imul
enter
clc
jmp
fidivr
mov
xor
and
dec
adc
adc
sbb
stc
mov
int3
sbb
push
hlt
xor
sub
pusha
test
js
jb
das
push
xor
mov
js
iret
test
test
loope
fbstp
mov
adc
cmps
in
xor
push
fcomp
mov
adc
pop
mov
cmc
jp
pop
fsub
push
jl
pop
pop
xor
loopne
out
sub
pop
add
call
repnz
hlt
xchg
fsub
cmp
imul
ret
lock
push
jg
pop
add
fild
pop
inc
(bad)
repz
cmovns
xor
movs
fisub
retf
shl
outs
(bad)
aam
call
hlt
cwde
sub
adc
aaa
in
cmp
test
out
outs
jmp
(bad)
sti
inc
mov
mov
add
sbb
pusha
adc
sahf
jle
in
mov
gs
and
outs
mov
rcr
ins
jns
mov
mov
rcr
popa
inc
jge
shl
sub
cmp
out
xchg
jge
arpl
jo
push
push
cmp
test
inc
sub
ficom
movs
jmp
aaa
sub
das
mov
xor
sbb
sbb
and
cmp
add
add
mov
data16
dec
cmp
inc
mov
ds
bound
xchg
rol
loop
ss
inc
call
dec
sahf
js
dec
movs
mov
push
jg
into
add
das
test
lds
dec
std
or
push
jnp
and
cmp
xor
dec
sar
add
and
rcr
mov
or
ds
pop
push
scas
mov
stos
pop
xchg
xlat
sub
push
call
and
push
adc
sub
adc
scas
int3
mov
js
push
test
xchg
and
and
sbb
adc
mov
mov
cwde
mov
(bad)
pop
dec
sbb
ss
dec
push
jp
push
mov
fwait
jmp
xchg
and
inc
or
sub
xchg
and
add
imul
ins
pop
fst
sar
dec
mov
das
inc
pop
sub
pop
call
scas
out
out
inc
pusha
sbb
sbb
cmps
push
push
push
push
mov
xchg
push
fcomip
stc
addr16
sbb
inc
cmps
retf
add
pop
or
jmp
inc
jb
sti
sub
mov
pop
inc
aas
lds
retf
and
stos
out
sub
repnz
mov
or
cmc
xor
scas
into
and
mov
adc
xchg
mov
xchg
shl
cmp
add
sbb
fdiv
fld
cmp
cmp
jne
ficom
mov
out
inc
adc
or
xchg
adc
add
sub
loopne
inc
sbb
adc
jge
xchg
les
and
mov
add
rcl
cs
push
mov
xchg
and
hlt
and
and
paddb
fsub
jo
pushf
xor
pop
or
xor
out
aas
aam
test
out
dec
sub
sbb
jg
outs
neg
xor
xor
fist
ret
and
cmp
inc
xchg
mov
jb
inc
scas
and
fmul
rol
mov
pop
jbe
mov
pop
mov
mov
mov
movs
repnz
inc
jae
retf
inc
xchg
fs
push
mov
add
add
shl
icebp
js
xor
inc
mov
jl
cdq
mov
and
cli
(bad)
push
xchg
inc
mov
sbb
sbb
stos
adc
pop
pop
mov
loopne
ss
or
jne
(bad)
push
mov
inc
push
dec
pop
enter
dec
in
xor
fcom
and
mov
add
aaa
mov
xchg
jmp
jae
adc
cmp
retf
push
mov
mov
(bad)
jecxz
inc
push
push
mov
dec
(bad)
xchg
push
jg
pop
xchg
and
test
cmc
and
adc
add
ss
enter
fsubr
into
jne
sub
jb
sbb
mov
(bad)
and
push
mov
adc
rcl
sub
hlt
pop
inc
xor
inc
inc
icebp
(bad)
or
push
pushf
leave
sub
dec
xchg
int
arpl
mov
push
xchg
retf
pop
jl
das
xchg
ins
stos
fist
daa
mov
dec
out
mov
mov
xchg
adc
std
and
stc
and
ror
jno
mov
or
loopne
mov
sbb
dec
stos
bound
sti
mov
add
xchg
loopne
pop
push
ss
sbb
add
add
pop
lock
jl
adc
cmps
push
and
xor
jae
in
push
loop
mov
jecxz
ins
cmp
ins
mov
push
addr16
movs
adc
fcom
fidivr
push
jnp
adc
sbb
sbb
(bad)
cli
je
sub
inc
arpl
sub
es
mov
leave
jb
sub
sub
mov
dec
sub
sahf
adc
cs
cmps
dec
jg
mov
aas
xchg
xchg
iret
sub
and
mov
jle
adc
push
into
pop
in
ds
pop
cwde
jecxz
es
sub
outs
jne
ror
cmp
shl
scas
outs
push
into
sbb
and
add
jo
mov
mov
sub
inc
xchg
out
inc
push
fidivr
mov
adc
add
std
xor
aas
(bad)
sbb
scas
fwait
sub
jae
mov
jmp
inc
outs
adc
inc
mov
rcl
inc
or
in
lea
mov
inc
lock
sub
push
in
aas
mov
lds
or
and
jl
gs
push
and
mov
iret
and
add
or
test
inc
repz
cmp
mov
xchg
loopne
aaa
loopne
stos
shl
jnp
loop
lods
and
dec
jnp
cmp
xchg
or
cld
mov
adc
fstp
popf
push
push
cmc
mov
arpl
xchg
adc
mov
jmp
dec
das
retf
and
inc
jnp
xchg
adc
mov
push
lds
mov
mov
in
adc
add
mov
push
add
pop
sbb
inc
rcr
test
sub
arpl
cmps
sti
mov
dec
sbb
fsub
out
cli
(bad)
jmp
mov
push
pop
lea
mov
repz
mov
sub
inc
pop
or
or
popa
add
fsub
or
xor
inc
jae
pop
not
pop
movs
scas
or
push
xor
push
mov
adc
push
call
js
cmp
ja
add
sbb
cmp
and
adc
jb
adc
inc
or
sahf
push
ja
sbb
shl
sub
sub
and
daa
pop
mov
add
iret
jg
jp
cmp
pop
int3
inc
outs
jb
(bad)
sbb
sub
adc
mov
fsub
iret
mov
sub
enter
cmp
jns
push
or
in
(bad)
retf
mov
adc
repz
sbb
mov
mov
mov
shr
(bad)
mov
jo
add
test
test
push
xor
jae
xchg
or
fs
jecxz
mov
fidivr
enter
mov
js
push
push
rcr
and
ret
sar
dec
(bad)
jb
clc
retf
movs
out
dec
mov
mul
test
or
add
movs
sbb
cmp
and
dec
fwait
pusha
jbe
sbb
inc
test
mov
pusha
cmp
pop
ins
sub
pop
pop
cmps
sbb
hlt
(bad)
test
and
inc
loope
jns
pop
test
add
sti
sub
scas
jno
ins
xor
jle
xor
fcmovnb
push
push
mov
xor
std
dec
sbb
adc
imul
lea
pop
test
and
enter
jl
daa
lock
adc
mov
sti
(bad)
(bad)
(bad)
mov
sbb
push
aas
xbegin
stos
and
arpl
lahf
fnstenv
vpaddq
or
retf
ins
ret
test
hlt
xchg
mov
popa
fild
ins
outs
sub
clc
xlat
fcmovne
test
pusha
push
cmps
mov
bound
sub
leave
sub
and
sbb
add
addr16
bnd
enter
movs
sub
fdiv
je
sbb
ret
fmul
lea
leave
or
movs
not
packuswb
dec
cld
in
mov
cs
mov
mov
sbb
jb
movs
xchg
ja
test
enter
ins
push
pop
mov
data16
arpl
sbb
jns
popa
mov
stc
fiadd
and
cld
hlt
cdq
fwait
xor
inc
idiv
ret
adc
fdivr
jmp
pop
mov
pop
sub
mov
aas
into
jmp
mov
sub
xor
cdq
sahf
cmp
adc
leave
cmp
jp
call
mov
push
aam
fidiv
mov
pushf
fidiv
mov
pop
loop
retf
ins
or
or
ins
lods
rcl
sbb
push
mov
fst
or
pop
(bad)
cmc
sub
stos
mov
push
pop
sbb
lods
and
xor
cmc
or
out
and
aas
mov
mov
gs
ficom
push
jo
pop
es
pop
test
int3
fwait
out
push
pop
inc
sbb
idiv
div
sub
inc
jle
mov
in
test
push
inc
hlt
es
jge
pop
sub
arpl
jb
mov
inc
jb
or
mov
test
nop
nop
mov
jb
push
nop
int
bound
leave
adc
jns
inc
jecxz
dec
fldcw
push
inc
inc
movs
sti
ret
inc
jnp
fwait
mov
sub
xchg
sub
mov
loope
adc
fild
fidiv
aad
mov
push
mov
pop
push
inc
sub
mov
and
xchg
and
lock
push
or
xchg
xchg
aad
xor
paddsb
mov
or
mov
movs
pop
or
rcr
push
push
dec
(bad)
cmc
ss
in
jno
scas
retf
in
jae
xchg
imul
xchg
xchg
pop
(bad)
xchg
in
test
jg
out
dec
stc
xchg
lods
jo
add
or
push
mov
rol
js
jecxz
mov
sbb
push
add
cmp
and
xchg
push
adc
sbb
or
lods
lahf
daa
mov
cmp
jo
add
jmp
dec
cmps
sub
rcl
imul
stos
xor
pusha
pop
test
mov
cmp
pop
xchg
test
call
cmp
(bad)
into
popa
jecxz
inc
les
sub
pop
mov
jbe
out
jecxz
jmp
mov
dec
scas
and
adc
adc
pop
push
leave
inc
js
lods
fs
lahf
out
ss
add
and
loop
call
lods
pop
int3
or
jbe
rcr
and
enter
clc
jne
pushf
int
sbb
sub
nop
fs
add
fsubrp
iret
into
inc
mov
cli
das
push
or
pop
jo
inc
and
adc
data16
imul
mov
sbb
(bad)
dec
push
inc
mov
int3
adc
clc
ins
pop
xchg
out
inc
jp
ror
pop
or
dec
dec
gs
sub
inc
clc
sbb
aam
add
sbb
fnsave
daa
push
out
cmps
ret
sub
adc
stc
cmp
xor
aam
les
or
inc
adc
mov
nop
jg
(bad)
xor
sub
inc
sbb
inc
gs
je
sbb
inc
fadd
cmp
and
and
jmp
repnz
jl
in
cdq
push
adc
dec
adc
lods
mov
lods
test
lods
fsub
test
stos
nop
inc
ins
xchg
test
inc
cmp
loopne
mov
pop
mov
stc
mov
mov
js
(bad)
fistp
push
lods
cmp
jle
push
mov
test
or
loopne
(bad)
mov
xchg
jmp
push
push
add
rcr
ds
mov
cmp
cmp
or
bound
push
retf
call
in
ins
xor
mov
fmulp
jns
inc
(bad)
(bad)
test
sub
mov
ds
mov
call
sub
and
jns
adc
mov
mov
cmc
add
adc
js
mov
cmp
imul
push
cdq
enter
test
xchg
lock
leave
jne
mov
test
push
sub
jbe
push
adc
dec
add
daa
and
inc
dec
or
jo
je
bound
in
mov
je
jne
add
or
xor
xchg
cmp
call
in
in
pop
inc
push
xor
ret
loopne
outs
call
mov
(bad)
xlat
mov
xor
dec
fwait
xchg
and
std
dec
sub
jb
scas
xor
inc
call
pop
ffree
ficom
outs
ins
test
mov
in
sub
mov
mov
pusha
jecxz
add
mov
mov
leave
mov
arpl
mov
xlat
xchg
mov
mov
mov
aam
(bad)
sub
ret
jmp
mov
push
push
dec
adc
lods
jp
mov
std
iret
xchg
push
hlt
jp
(bad)
mov
xchg
ins
mov
or
pop
push
sub
shl
sbb
adc
jg
int3
sub
mov
adc
(bad)
test
mov
sub
ins
cmp
cmp
xor
add
js
mov
xlat
lods
jmp
mov
movs
ret
pop
xor
into
shl
pop
ins
fild
js
jecxz
out
retf
(bad)
cmc
(bad)
outs
and
rcr
(bad)
jle
aad
inc
mov
addr16
push
(bad)
push
inc
lods
(bad)
(bad)
pop
aam
mul
lods
pop
inc
scas
aam
mov
aam
imul
js
mov
jge
dec
fadd
aaa
mov
sbb
es
xchg
aam
xor
int3
xchg
or
lods
dec
clc
pop
into
dec
ins
and
dec
cmovnp
adc
add
in
pop
sub
jecxz
loopne
fild
sti
push
imul
cmp
inc
add
xchg
cli
stos
daa
add
dec
loopne
jmp
ss
test
out
xchg
loopne
cdq
outs
retf
xchg
(bad)
xlat
int3
dec
xor
popa
add
adc
or
repnz
not
ins
test
stc
xor
sub
xchg
xlat
retf
clc
push
xor
addr16
cmps
sbb
pop
cli
call
(bad)
js
in
mov
outs
stc
outs
jno
ds
pop
jae
in
outs
and
shl
xchg
dec
fimul
pop
and
mov
push
pop
cmp
add
dec
xor
ins
cmp
clc
outs
fisub
aaa
pusha
(bad)
sar
jbe
js
ds
not
or
or
clc
jnp
push
push
ret
sub
stos
stc
mov
gs
ret
fwait
push
js
rol
mov
mov
xor
xor
mov
cld
sub
dec
div
pop
mov
push
mov
mov
fwait
movs
outs
je
outs
xlat
aaa
sub
cmp
xchg
jmp
mov
ins
lds
(bad)
leave
jo
fcom
es
aam
dec
stos
imul
in
shl
outs
mov
jg
test
add
ss
add
push
aad
cwde
push
mov
add
es
or
inc
sahf
jp
je
and
(bad)
or
bound
fisubr
ret
out
mov
lahf
(bad)
mov
ret
mov
int3
sti
test
stos
lds
xchg
(bad)
push
repz
das
dec
mov
and
dec
ja
fisub
stc
in
dec
fld
popf
outs
cmp
jbe
sub
les
adc
sbb
push
clc
es
lods
push
dec
or
dec
rcl
xor
xchg
inc
fwait
pusha
cwde
rcl
push
adc
repz
inc
mov
or
fild
fmul
shl
mov
lahf
cmp
rcr
jmp
ja
stc
adc
jl
repnz
cli
sub
sbb
je
push
inc
lock
loope
mov
cmp
cmp
inc
pop
or
shr
or
push
cld
fldcw
dec
je
pushf
cmps
aam
(bad)
mov
xchg
pop
jno
or
and
lods
pushf
mov
loop
(bad)
int
mov
lds
pop
jle
es
mov
cmc
jg
das
mov
ds
das
dec
push
ins
and
dec
iret
ins
clc
cdq
inc
cmps
pop
fs
out
aam
cld
sbb
cmp
sbb
sub
mov
sti
ins
cmp
aas
repnz
loop
lahf
mov
xchg
fistp
fisubr
(bad)
cmp
mov
inc
scas
jne
movs
fst
or
jmp
mov
cmp
and
add
add
or
cmp
cwde
inc
push
sub
stos
out
aaa
pop
sti
sbb
and
jnp
jl
add
mov
push
jns
xchg
add
pop
stos
aam
(bad)
xchg
(bad)
pop
movs
dec
adc
mov
mov
cmp
jp
adc
aaa
ja
adc
mov
inc
sbb
(bad)
fcom
jp
mov
pop
in
and
int3
(bad)
int3
mov
pop
repz
dec
call
int3
or
mov
bnd
out
imul
dec
les
stc
pop
mov
outs
fcmovb
rcr
jns
sbb
push
mov
mov
xchg
mov
mov
dec
push
or
push
mov
aaa
stos
xor
xor
cmp
or
jbe
cli
mov
push
xchg
cmp
stos
pop
jle
loop
and
enter
rol
push
les
loope
cmp
or
sbb
out
outs
pop
mov
in
imul
adc
sub
mov
mov
(bad)
ror
xchg
sbb
sar
and
add
inc
pusha
inc
xchg
pop
imul
dec
push
push
aaa
fwait
dec
xor
sti
pop
out
xor
mov
pop
(bad)
stc
or
mov
cmp
mov
aaa
mov
and
adc
icebp
mov
loopne
push
and
sub
or
mov
loopne
out
lock
sbb
cld
mov
xchg
add
adc
cdq
dec
fmul
jmp
fidivr
pop
scas
or
rcr
inc
add
ds
leave
mov
xor
jo
jnp
nop
fisub
dec
in
add
fwait
add
adc
mov
push
dec
and
add
xlat
mov
xchg
call
dec
lods
sbb
dec
inc
pop
inc
add
jae
xchg
iret
cmp
fs
arpl
in
mov
mov
jl
dec
inc
pusha
push
retf
aam
mov
aad
pop
jp
sbb
cmp
loop
push
sbb
mov
pop
movs
js
sahf
aaa
xor
mov
repnz
loopne
test
(bad)
sbb
iret
mov
icebp
leave
dec
mov
dec
pop
je
into
icebp
shr
push
aas
aad
jge
push
mov
fcomp
dec
outs
cdq
sbb
cmps
(bad)
cmc
cdq
std
xlat
jp
int3
not
cmps
fisubr
arpl
out
mov
cmp
pop
mov
jmp
or
or
inc
adc
call
sbb
inc
sub
mov
pop
dec
fisubr
sar
or
ins
das
mov
mov
xchg
cmp
push
mov
pushf
sbb
mov
out
imul
fs
xor
cwde
xlat
int3
mul
imul
adc
xor
xor
fstp
out
pop
(bad)
or
cmp
sub
data16
movs
test
add
mov
xor
xor
xchg
leave
jnp
arpl
dec
sti
mov
(bad)
retf
mov
jmp
xchg
sub
popa
add
sar
fsub
dec
lods
les
cmps
cwde
outs
imul
sub
dec
or
mov
sbb
add
js
repnz
sub
mov
mov
out
sbb
sub
cmp
xor
or
or
inc
std
movs
or
lods
mov
fwait
mov
stc
push
push
xchg
jne
test
sbb
xor
ins
outs
aas
repnz
adc
lods
mov
(bad)
ret
xchg
mov
sahf
dec
mov
ins
shl
leave
sahf
cmps
cdq
pop
or
jle
mov
daa
into
xchg
idiv
pop
inc
xor
mov
sub
pop
adc
push
lahf
inc
cmp
sbb
popa
add
inc
adc
add
mov
cmp
fistp
push
ret
jg
sbb
(bad)
xor
test
jecxz
mov
(bad)
and
inc
call
mov
outs
pop
cmp
test
sbb
(bad)
xchg
sbb
jns
or
or
mov
fnsave
sar
mov
xor
sbb
fdivr
loope
in
stos
outs
mov
out
fs
jae
shr
mov
sbb
test
mov
adc
push
pop
out
jns
mov
mov
lods
push
pop
icebp
xchg
add
inc
retf
popa
mov
or
data16
mov
mov
push
fistp
test
push
psubsb
xchg
mov
push
inc
pop
mov
or
fld
sbb
movs
cdq
(bad)
jmp
and
xchg
call
inc
cld
int
std
out
cmps
dec
add
movs
rcr
jnp
test
imul
out
push
sbb
mov
mov
sbb
push
ffreep
mov
push
shr
xchg
inc
aad
adc
add
adc
inc
repnz
lea
mov
inc
leave
in
inc
cmc
mov
int3
xlat
xchg
fadd
lea
xchg
cwde
fcom
pop
mov
add
dec
pop
iret
xchg
je
mov
and
push
add
add
loope
sahf
xchg
cmp
cmp
call
xor
fist
out
inc
mov
loop
pusha
push
add
int
inc
stos
leave
jno
out
push
fs
dec
jbe
jbe
bnd
mov
into
out
shl
dec
pop
sbb
or
(bad)
dec
call
rol
jno
lds
pop
lds
call
int
inc
fidivr
adc
fcom
dec
fisub
mov
ins
push
add
call
cmps
fidivr
dec
pop
push
ss
mov
mov
dec
sar
sbb
dec
mov
inc
movs
jbe
cmp
pop
mov
add
jl
ret
pushf
test
sti
pop
jge
or
sbb
inc
ret
jmp
out
fisubr
inc
jno
rcl
cwde
loope
xchg
jnp
movs
movs
imul
loopne
xchg
adc
mov
or
fs
push
mov
stc
mov
mov
and
ret
(bad)
sub
es
data16
pop
call
dec
push
clc
adc
mov
call
fstp
mov
jecxz
in
(bad)
test
or
cdq
test
(bad)
mov
daa
or
pop
loope
icebp
mov
retf
mov
mov
mov
lods
cmps
retf
ret
(bad)
xor
cmp
cmp
fstp
ss
fwait
and
or
jge
loopne
xor
ret
push
dec
cmp
xor
not
daa
sub
in
push
adc
jge
push
out
jnp
cmp
push
movs
fs
pop
sub
retf
xor
sbb
and
xchg
shr
pop
leave
sbb
jecxz
not
jo
push
gs
(bad)
fidivr
out
xor
int
adc
pop
icebp
push
ret
pop
lods
cmp
jbe
mov
int
mov
jb
pop
add
bound
inc
xchg
rcr
mov
sub
leave
mov
fs
cli
mov
pop
outs
and
or
or
pop
sub
add
lods
pop
jns
pop
and
xchg
xor
mov
or
adc
daa
adc
call
outs
sti
(bad)
xor
enter
and
aam
aaa
gs
test
retf
lock
xor
jecxz
leave
lea
mov
sti
and
jnp
mov
add
cld
inc
add
and
and
mov
mov
inc
(bad)
fcom
sub
jp
out
popf
or
bound
and
fisub
mov
lods
enter
xchg
pop
xchg
rcl
add
outs
adc
stc
in
xchg
dec
stos
cld
or
push
ss
or
xor
jle
jge
fs
repz
loop
imul
cmc
jae
iret
fmulp
push
call
pop
cmp
imul
sbb
popa
jmp
ja
out
mov
loop
test
inc
xchg
jg
repnz
sub
mov
pop
add
movs
neg
(bad)
jge
stc
cld
cmps
hlt
xor
repnz
adc
pop
lods
ret
mov
add
mov
lds
adc
and
(bad)
faddp
xchg
mov
pop
jle
(bad)
arpl
mov
or
pop
(bad)
and
lock
xchg
retf
sbb
fst
adc
xchg
je
mov
in
sub
sbb
sub
(bad)
popa
xchg
and
call
dec
mov
fidiv
es
dec
mov
dec
and
enter
push
dec
pop
je
loope
or
sbb
pop
sbb
pop
int3
aas
pop
xlat
sub
fisttp
std
aad
xchg
enter
cdq
mov
mov
xor
sub
xchg
dec
sbb
pop
sti
call
mov
mov
les
(bad)
jb
or
jp
cmps
or
sar
jmp
call
std
and
cmp
push
in
sbb
jne
lods
es
jge
movs
imul
jbe
mov
popa
fadd
fs
retf
lds
clc
aaa
mov
push
adc
sub
dec
inc
call
rcr
add
out
daa
shl
hlt
(bad)
push
sbb
mov
rol
dec
push
out
sub
jnp
jge
into
sub
pusha
sub
jecxz
add
cld
idiv
dec
imul
xor
stos
dec
(bad)
aad
pop
mov
dec
xchg
std
sbb
outs
sub
dec
hlt
(bad)
ficom
es
fwait
in
mov
(bad)
mov
push
out
das
add
ja
pop
pop
std
mov
scas
sub
repnz
test
mov
and
or
dec
js
or
dec
dec
in
push
xchg
sbb
inc
and
into
adc
pop
push
jo
push
out
mov
mov
push
mov
arpl
cmp
cmps
jl
jmp
lods
scas
clc
fstp
jns
sahf
shl
iret
icebp
mov
pop
(bad)
mov
mov
and
inc
fwait
aad
jg
outs
les
mov
xor
dec
arpl
test
cdq
add
pop
xchg
shl
cmp
not
sub
sbb
loope
mov
cmc
not
jmp
or
fild
sbb
popf
lds
(bad)
dec
xor
add
xlat
sbb
int
movs
enter
fisub
repnz
mov
mov
sbb
addr16
dec
push
mov
mov
push
test
out
int
cmps
fxtract
retf
psubd
push
scas
popa
jg
xchg
add
repnz
add
cmp
cmp
and
push
mov
cmp
(bad)
fidivr
add
sub
sbb
adc
jmp
pusha
in
in
pop
jnp
repnz
(bad)
mov
pop
popf
gs
lea
pop
push
shl
ret
mov
sbb
shl
jmp
or
and
fs
push
fs
push
ins
jle
jo
movs
fsubr
jae
mov
adc
(bad)
in
jle
bound
int
sub
jmp
dec
pop
and
pop
pop
dec
ds
pop
or
mul
xchg
sbb
or
in
stc
sub
cmp
imul
ins
lea
stc
mov
xor
pop
jg
out
movs
fwait
push
call
or
mov
cmc
stos
mov
bound
pop
sar
pop
int3
mov
inc
xchg
jne
icebp
pop
push
iret
mov
cmp
cmp
adc
push
inc
sub
or
dec
mov
cmps
xor
fstp
mov
pop
jge
add
add
mov
popa
pop
xchg
cmp
aaa
jl
pop
mov
push
push
(bad)
mov
(bad)
xlat
push
pop
repz
inc
mov
mov
mov
jns
push
sub
cwde
icebp
add
jbe
(bad)
push
hlt
cmp
int3
cli
add
and
lds
pop
popf
out
jmp
data16
mov
xor
jmp
out
out
jo
dec
adc
push
iret
aas
stos
outs
enter
xor
and
call
add
aam
out
aaa
add
retf
daa
push
popa
repnz
dec
xor
bound
mov
jbe
cld
mov
icebp
push
or
push
xor
push
rcr
pop
je
(bad)
jae
inc
clc
std
dec
mov
(bad)
mov
pop
mov
jecxz
xchg
lea
sub
add
addr16
sahf
retf
retf
fadd
mov
ret
jb
push
sub
mov
jle
jecxz
sub
out
jo
xchg
add
dec
xchg
push
jl
mov
inc
ja
bswap
icebp
mov
js
push
cmp
fisttp
inc
not
(bad)
fsubr
cld
dec
pop
inc
popa
in
mov
add
jnp
xchg
out
jmp
test
shr
cwde
jb
shr
(bad)
rol
push
test
pop
in
mov
jge
push
cmps
data16
retf
gs
jnp
push
cmp
adc
cs
sub
mov
call
inc
test
or
sti
mov
inc
sub
inc
sub
push
cmp
nop
or
pusha
and
(bad)
jmp
or
jl
imul
in
xchg
popa
leave
aam
bound
push
repz
mov
cmp
dec
les
jnp
jp
pop
ret
mov
dec
push
pop
or
adc
inc
stos
push
pop
popf
imul
jno
mov
pop
mov
dec
and
inc
scas
mov
jnp
cmps
into
mov
or
mov
mov
mov
movs
jmp
enter
out
pop
hlt
scas
pushf
sub
mov
fild
fldenv
dec
popa
call
ficomp
sbb
retf
adc
lock
pop
iret
movs
jns
xchg
pop
popa
ja
add
jns
stos
(bad)
ins
fcomp
dec
stos
(bad)
xor
data16
(bad)
mov
sub
dec
icebp
and
and
repz
jl
(bad)
push
push
sub
cmp
sbb
adc
mov
iret
or
movs
mov
movs
lock
jl
stc
ins
out
dec
pop
loopne
mov
inc
imul
adc
lods
mov
(bad)
lahf
mov
in
sub
outs
jnp
xchg
aaa
pop
inc
in
je
lds
cmps
mov
adc
lods
or
push
push
or
mov
in
lock
leave
jge
jb
cmp
or
jae
push
sub
cwde
mov
and
sbb
mov
int
mov
scas
cwde
imul
call
dec
xchg
dec
xlat
fs
stc
loopne
xchg
test
pop
push
mov
call
mov
js
loope
sbb
dec
pusha
mov
cli
jl
cwde
xchg
jo
adc
or
xchg
ins
add
sbb
lods
sub
inc
and
lock
aad
jmp
(bad)
shr
xchg
cmps
lock
and
xor
jmp
in
jno
jns
hlt
mov
jge
arpl
adc
push
dec
std
sub
fs
push
cmps
cmp
je
pop
lahf
lahf
jg
retf
test
jns
xchg
xor
stos
jns
adc
jo
in
and
or
(bad)
stc
cmp
and
mov
(bad)
aas
in
pop
scas
inc
shl
mov
xchg
mov
les
add
ret
adc
push
push
loop
mov
sti
adc
pop
mov
js
shl
add
inc
enter
jo
jmp
mov
rol
daa
xchg
test
stos
popa
xchg
pop
xchg
call
adc
call
xor
pop
ficomp
add
jmp
xor
mov
repnz
in
mov
imul
(bad)
fstp
mov
scas
movs
ds
int3
mov
xchg
push
ret
not
add
or
jae
mov
lahf
lods
jmp
and
cmp
mov
mov
mov
pop
fmul
jbe
lods
fwait
shl
rcl
imul
les
sbb
adc
jns
mov
call
push
cwde
sub
les
bound
fs
push
jl
and
fidivr
sbb
fdivp
repz
jecxz
call
ror
push
ins
(bad)
jl
sar
jmp
cmp
cmp
jno
in
call
push
sbb
sub
mov
iret
inc
jae
and
inc
(bad)
cmps
mov
lods
or
dec
test
pop
sub
jl
push
ret
or
xor
inc
push
in
repnz
sbb
dec
ins
sbb
sub
mov
fs
cmp
pop
stos
fidiv
jge
arpl
push
add
pop
mov
retf
lea
ja
test
adc
push
or
or
jne
mov
or
fsub
shl
sbb
xor
xor
and
and
push
movs
pop
popa
or
mov
push
test
pop
mov
or
pop
inc
xor
pusha
jge
lahf
sbb
add
ret
xchg
sub
sub
pop
not
jl
fs
xchg
push
cmc
stc
sub
push
xchg
(bad)
pop
push
dec
ss
jnp
adc
pushf
sbb
test
xchg
xchg
ret
(bad)
int
mov
push
mov
out
(bad)
out
inc
test
daa
or
lods
dec
aas
cli
popa
repz
out
push
repnz
jmp
shr
iret
xor
(bad)
push
popa
sbb
jge
retf
cmps
push
push
jmp
xor
push
lds
push
(bad)
adc
outs
dec
add
pop
lds
adc
sbb
sbb
xchg
inc
repnz
xor
add
iret
scas
bound
push
xchg
sub
or
ins
or
jae
les
pushf
and
xchg
xor
ins
adc
xchg
rcr
les
and
xchg
lods
mov
mov
pop
add
and
ret
xor
movs
jmp
out
pop
es
pop
add
aaa
xchg
out
retf
into
retf
mov
lahf
test
cmp
cmp
push
into
popa
mov
movs
iret
mov
xlat
mov
loop
mov
loope
jl
test
dec
jae
arpl
pop
lods
and
sub
xchg
fidiv
mov
lahf
sti
cmp
lds
inc
and
arpl
test
ret
sbb
loop
adc
pop
pop
out
xchg
test
imul
sub
push
test
jns
and
nop
pop
(bad)
repnz
or
push
in
jle
xor
movs
cmp
js
fisub
jns
and
mov
add
mov
cmps
out
adc
nop
rol
mov
aad
xor
xor
mov
ins
cmp
into
mov
mov
loopne
loopne
fs
dec
inc
arpl
cwde
add
mov
clc
ins
sub
xchg
iret
rol
sub
lahf
adc
test
cmp
jecxz
(bad)
retf
xchg
sub
mov
jnp
cmp
lock
jbe
jmp
out
cmp
inc
push
daa
cdq
and
sbb
dec
mov
lds
movs
sbb
mov
cmps
xor
xor
cmc
mov
pop
aaa
gs
jle
movs
mov
dec
fistp
int
push
jns
xor
data16
sbb
(bad)
jnp
xchg
adc
mov
ror
pop
inc
xchg
std
ins
inc
fs
imul
xchg
and
inc
xor
aad
and
pop
mov
shl
inc
mov
out
out
jle
mov
seto
jnp
aaa
and
mov
fild
ret
lds
call
push
fs
or
pop
imul
ds
xchg
push
xchg
adc
cmp
mov
mov
mov
fdivr
hlt
mov
inc
jb
xlat
and
rcl
cwde
lds
jl
push
or
mov
in
test
mov
sub
imul
pop
pop
movs
jle
xlat
retf
clc
sub
sbb
cmps
dec
push
pushf
aas
sbb
(bad)
sahf
jge
inc
fldcw
add
push
jge
mov
cmp
jmp
or
(bad)
dec
push
int3
sbb
inc
pop
(bad)
les
mov
mov
dec
cmp
xchg
jo
or
cmp
mul
iret
ds
fisubr
push
imul
jns
scas
fild
cmps
mov
and
fiadd
out
js
xchg
pop
mov
imul
mov
std
inc
mov
inc
clc
sub
popf
add
(bad)
add
inc
xor
pop
or
sbb
jns
es
sbb
ins
or
sbb
pop
fnstenv
or
mov
gs
mov
mov
cmp
xchg
mov
sar
mov
mov
movs
cld
push
ins
imul
pushf
jg
cs
gs
(bad)
mov
sub
lods
pusha
mov
and
dec
sub
and
outs
xchg
call
sub
and
jnp
pushf
(bad)
add
push
sub
jnp
sub
lods
inc
or
shr
xchg
or
pop
mov
cmp
lods
repnz
bound
inc
outs
mov
xor
out
inc
cs
imul
ins
out
xor
push
pop
dec
push
mov
cs
mov
push
in
jne
addr16
pop
mov
inc
pop
lea
(bad)
inc
dec
jmp
mov
adc
xor
jp
dec
push
push
aam
jbe
push
rep
xchg
daa
leave
xor
mov
lods
jecxz
and
push
imul
xlat
xchg
jecxz
stos
test
mov
add
adc
aad
shr
ret
aam
push
fisubr
jmp
push
lds
popf
push
mov
mov
ins
mov
scas
in
adc
test
hlt
std
out
cmp
push
lock
sub
ins
mov
and
or
mov
ds
push
and
out
ret
cmp
fldenv
inc
inc
push
mov
add
mov
inc
mov
mov
adc
popf
sub
adc
pop
pop
movs
test
push
mov
or
jbe
xor
cmp
stos
and
xchg
outs
jb
sub
jmp
cmps
xchg
les
xchg
xchg
and
xor
mov
dec
mov
cmps
xchg
sub
outs
fucomi
xchg
xchg
sti
jle
test
jmp
ret
gs
jmp
adc
jg
clc
inc
dec
mov
jo
inc
ds
mov
inc
ficomp
dec
hlt
push
call
xlat
push
cmc
and
gs
js
ret
mov
bndstx
jno
cmps
popa
out
inc
dec
inc
icebp
out
jle
jmp
jg
retf
leave
enter
cmps
loope
pushf
call
in
imul
inc
or
pop
inc
bound
les
je
retf
jmp
push
add
out
je
hlt
dec
and
mov
mov
retf
mov
sbb
sbb
in
mov
cs
or
aad
mov
icebp
jle
adc
shl
mov
or
jnp
jbe
mov
hlt
imul
(bad)
test
cmps
adc
outs
stos
xor
bound
mov
mov
ret
aaa
and
out
dec
pop
cld
inc
mov
shl
jne
outs
and
popf
data16
xchg
sub
push
loope
dec
iret
mov
jle
or
push
in
xchg
sub
adc
jnp
(bad)
data16
xchg
push
into
inc
sbb
pop
jo
cmp
ja
out
lds
jb
cdq
xchg
and
imul
push
mov
sahf
inc
arpl
rol
outs
pop
aam
xchg
inc
mov
push
push
push
jnp
cmp
adc
clc
pop
adc
adc
out
loop
loopne
cdq
rol
lahf
lods
cmp
cmp
jge
sub
in
mov
in
jecxz
add
(bad)
icebp
fnstsw
cli
xchg
and
add
or
ja
repz
cmp
icebp
outs
out
cmp
xchg
and
les
mov
jmp
xor
stos
stos
sbb
fadd
pusha
sahf
(bad)
sub
lods
imul
js
stos
dec
into
(bad)
imul
cmp
icebp
daa
mov
jmp
es
sub
or
sub
jae
stos
ret
pop
pop
mov
or
dec
ins
adc
imul
lods
adc
and
adc
(bad)
pop
xor
(bad)
idiv
dec
int
mov
sub
ss
and
jl
sbb
xchg
lods
jecxz
fidiv
lods
dec
mov
(bad)
sub
sub
or
mov
mov
adc
jge
(bad)
pushf
push
adc
xor
or
pusha
nop
mov
xor
ins
cmps
mov
frstor
jne
adc
shl
mov
push
and
fistp
in
inc
push
stos
mov
(bad)
mov
test
test
or
nop
in
fist
into
or
fmul
jmp
cmp
lahf
(bad)
xchg
adc
xchg
cli
xchg
sub
and
mov
fist
or
jp
cmp
(bad)
fcom
dec
int3
dec
movs
mov
out
aad
sbb
int
enter
pop
shl
jne
js
js
push
mov
cs
fs
imul
stos
fcmove
loope
fsubp
cwde
test
(bad)
fistp
dec
inc
fisttp
mov
xor
repnz
pop
sar
xor
jns
lods
out
aas
cmp
sbb
push
xlat
add
(bad)
xchg
jle
mov
jno
in
sar
push
xchg
fisttp
mov
call
bound
pop
fild
inc
and
out
push
inc
bound
js
cmps
add
test
mov
push
pushf
cs
jmp
stos
cs
xchg
cmps
int
mov
in
pop
dec
adc
sub
dec
adc
cmps
aas
fstp
inc
and
xchg
mov
xlat
add
jo
pusha
pusha
push
push
add
out
dec
jmp
pop
ffree
and
fdivr
xchg
dec
jnp
or
leave
and
jae
les
loopne
imul
mov
push
mov
cmp
popf
push
inc
inc
enter
les
xor
addr16
jae
add
sti
add
movs
fs
(bad)
fsubr
push
sbb
mov
shr
outs
(bad)
sub
ret
xchg
mov
xchg
jge
outs
popf
xor
sti
mov
mov
test
inc
jae
dec
outs
sar
mov
cmps
lea
push
sub
lods
cwde
pop
add
stos
ror
stc
pop
adc
add
mov
xchg
enter
daa
(bad)
sbb
cmp
stos
add
mov
adc
xor
out
hlt
leave
push
adc
mov
bound
xchg
test
jge
scas
pusha
add
push
(bad)
jle
sub
jge
adc
cld
daa
fst
jns
mov
or
ret
sbb
push
add
mov
stos
xlat
cmp
clc
mov
or
icebp
fild
dec
rcl
and
mov
dec
iret
out
and
je
sbb
push
lock
sub
adc
inc
cmc
mov
sub
pop
loop
inc
mov
jb
xchg
imul
movs
dec
adc
cdq
mov
in
inc
les
test
inc
mov
sahf
and
xchg
cmp
fbld
dec
cmp
xor
call
adc
test
inc
div
and
cmps
aas
out
push
ss
shl
jl
addr16
lock
movs
daa
out
int3
jno
push
fcomp
daa
sbb
jg
cmp
push
cmp
mov
add
in
mov
cmps
imul
mov
aad
ret
cld
imul
push
(bad)
es
fwait
aaa
xor
shl
in
mov
jl
sub
int
daa
mov
div
adc
mov
mov
mov
dec
cmp
mov
les
test
mov
ror
in
pop
stos
dec
in
pop
mov
adc
sbb
ficom
xchg
add
dec
jnp
and
rcr
jle
add
inc
test
(bad)
hlt
aam
rol
mov
dec
push
mov
mov
or
rcr
sub
int3
dec
js
iret
ret
in
mov
mov
dec
stos
or
push
ins
clc
mov
jnp
outs
fisub
clc
xchg
jo
lods
inc
xchg
sbb
pop
shl
push
mov
jmp
cmp
push
inc
ror
mov
ror
loop
and
push
jp
scas
ss
push
pop
in
push
mov
add
push
shl
in
pop
mov
mov
cmp
mov
aas
mov
and
in
add
test
icebp
jecxz
jmp
dec
add
xchg
jle
lock
inc
sbb
or
in
jne
ret
jmp
out
ins
inc
and
pcmpeqd
mov
cmp
inc
pop
or
xchg
add
or
aam
lea
pop
imul
mov
push
inc
inc
push
bound
lods
fiadd
or
mov
pop
rcr
xlat
ror
fisub
int3
sbb
cs
cwde
fadd
outs
div
sbb
(bad)
mov
xchg
xlat
xor
jno
xor
mov
sub
fisubr
mov
mov
xlat
das
mov
mov
push
cmps
xchg
in
add
sub
add
sub
addr16
loope
or
sbb
or
in
mov
aam
or
push
into
push
aad
inc
xor
aam
cs
int3
cld
xor
pushf
int3
add
xchg
pop
adc
xchg
adc
push
push
ja
rol
cmc
dec
icebp
sub
add
ds
cmps
imul
into
rol
dec
loope
dec
push
(bad)
stc
sbb
pop
jne
add
and
les
jnp
and
lea
imul
fneni(8087
dec
pop
dec
in
dec
mov
dec
enter
in
daa
shl
mov
out
fs
js
xlat
sub
dec
xor
ret
into
aam
inc
cmps
pushf
mov
cmp
add
push
daa
jmp
loop
into
dec
hlt
cmp
push
push
movs
sub
pusha
int
jo
pusha
scas
xlat
dec
sbb
mov
jge
mov
loopne
imul
mov
in
in
ja
jp
ret
jl
repnz
dec
xor
mov
xchg
push
mov
inc
pop
daa
cmc
nop
jne
xor
in
pushf
xor
jmp
sar
mov
mov
xchg
rcl
pop
rol
lods
jne
pusha
adc
dec
xlat
xchg
jg
fdivr
xchg
or
cdq
lahf
icebp
dec
push
fwait
push
in
sub
push
xchg
sbb
sub
adc
lock
push
je
data16
cld
mov
dec
dec
call
xor
xor
ror
xor
adc
cli
mov
mov
ror
jle
ret
mov
xor
test
and
inc
lods
lods
xchg
call
loop
mov
push
add
add
inc
add
out
mov
pop
mov
jge
mov
xor
mov
loop
loopne
pop
mov
cmp
cwde
push
cmp
push
adc
mov
fs
pop
(bad)
jge
fild
(bad)
popa
(bad)
addr16
pusha
dec
test
jmp
dec
ss
push
add
cmp
rcr
and
inc
jmp
cmp
inc
retf
arpl
ret
push
stos
pop
cld
pop
cmp
jbe
mov
test
adc
sar
jo
jae
pop
dec
mov
lods
xor
pop
loop
mov
jne
add
repnz
je
aam
movs
imul
iret
popf
shl
shl
cmp
(bad)
mov
cmp
sub
bound
xchg
or
push
je
dec
mov
inc
pop
fcmovnbe
ret
scas
mov
push
pop
mov
loope
or
in
sub
sti
add
in
jbe
(bad)
jne
dec
test
test
mov
xor
test
jg
dec
adc
mov
fcomp
xchg
xor
inc
and
cmp
push
(bad)
sub
sbb
mov
push
push
not
adc
adc
into
dec
push
outs
push
sbb
mov
cmp
movs
jb
sti
push
sub
sahf
in
xor
(bad)
in
xchg
loop
dec
dec
xor
inc
adc
sbb
xchg
jnp
or
test
loope
mov
test
push
push
gs
push
inc
jl
xchg
stos
mov
test
and
push
js
inc
ins
js
sbb
int
in
retf
xchg
ins
ins
repnz
inc
xor
or
sub
idiv
or
into
push
mov
cs
imul
add
out
aaa
cmp
push
mov
cmps
pop
dec
jecxz
push
sti
pop
(bad)
adc
nop
jecxz
je
jae
loope
mov
movs
pop
mov
mov
mov
jns
add
add
mov
or
mov
mov
out
push
jmp
dec
sti
adc
ds
jl
cmps
jmp
adc
int
jge
pop
mov
xor
and
lea
scas
adc
fld
push
adc
pusha
push
and
in
sbb
and
adc
inc
scas
inc
int
stc
cld
pop
mov
mov
shl
jp
fsub
xor
xchg
(bad)
nop
popf
lea
add
jbe
pop
adc
or
jl
sub
mov
cli
in
sub
push
add
xchg
pop
xchg
xor
mov
dec
pop
call
out
and
lahf
hlt
add
sbb
icebp
sub
iret
adc
mov
xor
jae
cmps
lods
rcr
xor
ficom
out
xchg
out
fst
sbb
scas
or
xor
lahf
cmp
pop
mov
xchg
ds
std
ss
xor
sbb
loop
sbb
call
cdq
sbb
jne
sahf
ds
cmc
ins
mov
shr
jle
icebp
adc
ins
enter
and
mov
shrd
pop
mov
and
mov
cli
mov
fst
out
mov
sbb
rol
mov
cmp
cmp
push
outs
scas
loop
fsub
or
push
push
sub
mov
aam
int
inc
pcmpgtb
dec
out
mov
stos
jmp
arpl
cmps
sbb
jmp
cmp
xor
int3
arpl
xor
out
mov
pop
shr
lea
out
rol
xor
lods
add
xchg
aam
jns
out
pop
mov
pop
test
or
mov
xchg
adc
stos
sbb
or
pop
add
sub
pusha
sub
sbb
push
(bad)
out
pop
bound
jecxz
mov
pop
adc
in
call
jl
pop
stc
mov
add
(bad)
fimul
xchg
sub
mov
lahf
sbb
sub
sub
and
mov
(bad)
(bad)
adc
icebp
inc
dec
nop
sbb
mov
mov
xchg
fwait
push
jmp
test
nop
test
repz
call
and
movs
lock
fsub
mov
addr16
pop
mov
mov
dec
rcl
jb
call
jae
xchg
shr
add
fistp
scas
in
mov
mov
imul
adc
sub
cmp
mov
add
push
inc
aad
xlat
hlt
xchg
dec
inc
fs
(bad)
sbb
cli
arpl
shl
fdivr
mov
cmps
mov
int3
ret
xchg
test
aas
adc
fisubr
bound
mov
push
mov
sahf
add
dec
in
rcr
mov
add
xchg
and
jg
pop
jae
gs
and
mov
retf
push
pop
ficom
pusha
stc
stc
xor
sub
pop
inc
xor
ja
mov
jae
aas
mul
je
pop
push
jg
inc
mov
add
adc
leave
retf
lods
pop
sub
pop
pop
lds
lods
test
jno
call
or
(bad)
rcl
push
mov
cmp
cmp
or
je
aaa
and
in
adc
cld
setno
jb
data16
ds
icebp
rcl
loope
or
popf
jns
stc
xchg
mov
push
test
out
retf
xor
and
(bad)
xchg
cs
push
and
jns
fist
sbb
pop
ss
pusha
test
mov
xchg
add
jo
jae
push
sub
mov
dec
test
ffree
dec
pop
cmps
scas
cdq
aad
jp
js
inc
movs
or
sub
fld
fcomp
jmp
(bad)
jge
cdq
or
and
js
cmp
sbb
in
cmp
ret
or
push
pop
pop
bound
push
pop
pushf
repz
repz
xchg
test
sar
adc
xor
int
sbb
fstp
js
pop
ffreep
clc
adc
inc
jae
and
or
mov
mov
sub
mov
cdq
jmp
mov
sub
int3
pop
ds
mov
or
pop
pop
xchg
or
sub
ret
cwde
call
movs
cld
cmp
(bad)
cdq
in
lods
and
in
fisub
inc
add
scas
inc
ja
rep
retf
jns
mov
push
loopne
outs
lahf
inc
mov
in
xor
mov
dec
sbb
inc
mov
mov
jmp
pop
leave
int3
rcr
lods
push
pushf
inc
mov
mov
sub
loop
mov
and
add
and
mov
jecxz
inc
stc
ficom
cmp
js
cdq
ja
pop
adc
dec
retf
xlat
jle
push
sbb
inc
or
mov
mov
sbb
bound
mov
pop
scas
dec
mov
std
dec
and
dec
jle
pop
inc
stos
mov
and
mov
and
pusha
addr16
jmp
xchg
pushf
push
cdq
rcr
cmps
jns
ror
test
ret
in
xor
mov
je
data16
cs
mov
data16
lock
mov
call
loopne
add
pop
mov
dec
push
sub
adc
pop
pop
xor
in
std
pop
mov
ficomp
(bad)
jp
add
dec
in
push
push
popa
xchg
push
out
lea
adc
adc
mov
add
je
mov
test
fadd
jle
loopne
or
push
fisttp
cmp
retf
sub
mov
loopne
cmp
retf
in
mov
jno
sub
add
and
xor
ins
lds
mov
test
cmp
ins
cld
and
sub
jle
(bad)
push
std
dec
sub
mov
jns
(bad)
hlt
test
cmp
add
lea
fisub
push
push
jmp
xchg
mov
outs
push
push
pop
(bad)
jp
push
rcl
dec
inc
mov
enter
or
movs
pop
mov
mov
push
enter
push
lods
mov
adc
in
xchg
cdq
test
outs
xchg
and
cli
jnp
sbb
cmps
mov
call
adc
add
in
jle
adc
sbb
sbb
movs
mov
and
pop
aam
mov
pushf
xor
xor
pop
lock
aaa
cmp
movs
loop
inc
lds
jmp
data16
std
mov
xor
mov
xchg
sahf
daa
out
pop
add
or
int3
dec
mov
in
in
mov
movs
fisttp
bound
or
(bad)
xor
add
icebp
push
inc
in
push
fdivrp
popf
adc
movs
jb
sar
in
out
push
in
adc
pop
push
(bad)
jo
call
call
mov
xchg
or
mov
xlat
jmp
dec
xchg
lock
fst
push
mov
sub
imul
iret
push
add
adc
fistp
movs
out
mov
rol
out
cmps
pop
es
cmps
sbb
call
cld
xor
xchg
inc
mov
aad
rcr
pcmpeqw
xchg
jp
scas
add
xor
xchg
pop
xchg
or
mov
push
clc
pop
add
ret
push
mov
js
pop
nop
call
sahf
cmp
xchg
dec
shr
iret
(bad)
push
pop
jg
jecxz
addr16
les
ins
int
and
mov
jnp
imul
or
fild
nop
mov
dec
xchg
outs
sbb
push
test
pop
inc
ret
mov
dec
in
rcl
inc
mov
mov
and
push
leave
jae
nop
mov
ror
mov
and
jns
aam
inc
popa
xchg
sbb
jle
fcom
in
in
push
adc
ret
cwde
ret
aam
das
jbe
adc
(bad)
jle
inc
retf
loopne
dec
add
sub
sbb
out
jbe
ins
out
xor
add
iret
push
aas
mov
cwde
mov
adc
je
rcl
imul
jbe
nop
push
dec
daa
test
mov
xchg
dec
rcl
xor
xchg
(bad)
ins
xchg
sbb
push
inc
cmp
dec
sub
fist
enter
popa
(bad)
hlt
pop
mov
add
and
std
dec
test
cmp
or
les
arpl
mov
adc
push
ins
cld
inc
add
gs
in
(bad)
test
jo
repz
mov
mov
pop
(bad)
iret
mov
sahf
(bad)
push
mov
pop
dec
nop
shl
pushf
rcl
cmp
in
sbb
test
and
or
cmp
jecxz
ret
xchg
xor
inc
inc
inc
inc
jbe
sbb
movs
sbb
xchg
fwait
push
into
ins
shl
imul
push
ret
inc
cmp
sbb
loop
(bad)
add
fucomp
jp
rol
cld
repz
movs
ror
or
das
adc
ss
xchg
xor
clc
out
inc
fst
adc
pop
jne
arpl
movntq
out
inc
jne
retf
xor
stos
aas
aad
pop
shr
dec
inc
mov
pop
mov
jns
shl
adc
sbb
inc
mov
rcl
or
lds
push
adc
js
pushf
mov
int
lods
mov
addr16
movs
cmp
popf
or
push
ds
xchg
loop
sub
adc
jo
add
mov
mov
mov
sahf
jne
rol
and
das
xlat
les
out
clc
push
mov
clc
stc
jae
outs
mov
ret
mov
jmp
call
movs
add
jb
and
xchg
cdq
(bad)
cmp
lahf
loopne
push
out
add
adc
push
loop
int3
add
mov
ficom
leave
scas
push
mov
outs
ins
lea
mov
mov
add
xchg
hlt
pop
sub
adc
call
loope
sub
sub
xchg
and
stos
add
loop
je
jmp
mov
test
(bad)
mov
push
jne
outs
test
mov
push
pop
mov
jo
aad
popa
and
mov
mov
addr16
into
cmps
jne
mov
push
and
mov
mov
stc
fstp
bound
movs
arpl
int3
jecxz
mov
bound
(bad)
popa
inc
xchg
pop
add
inc
sti
push
not
loope
xchg
inc
loopne
movs
dec
cmp
pop
inc
pop
inc
aam
gs
out
xchg
in
mov
push
loopne
in
call
xor
cmp
into
(bad)
xchg
mov
ins
and
jle
dec
fistp
pusha
pushf
and
and
mov
imul
mov
into
xor
addr16
mov
pop
fsubr
sub
push
jbe
ins
sbb
cmp
enter
fs
mov
mov
not
mov
sub
sbb
xor
call
xchg
add
cs
ja
out
inc
pop
adc
inc
call
rcr
(bad)
loop
push
cmp
loope
lock
or
push
inc
push
int
mov
cmp
mov
loope
push
and
xchg
pop
repz
aam
(bad)
xchg
fs
adc
pop
mov
loopne
out
dec
dec
cmp
hlt
pusha
out
add
dec
movs
retf
push
dec
push
sbb
jge
fwait
arpl
sub
mov
push
iret
or
fadd
mov
mov
icebp
sub
mov
adc
mov
in
jp
and
aad
add
lods
adc
and
adc
mov
movs
cli
jno
pop
mov
(bad)
cmps
ins
iret
and
mov
shr
jbe
cmp
xchg
aas
inc
loope
mov
popf
ja
jecxz
inc
unpcklps
dec
add
leave
inc
mov
push
inc
and
lahf
adc
test
shl
rol
(bad)
shl
inc
dec
lds
inc
mov
int
sub
pop
fdiv
imul
ret
mov
mov
sub
lods
ret
in
(bad)
fdivr
push
clc
popa
push
jp
mov
popa
jmp
mov
mov
inc
mov
test
aam
pop
pusha
in
test
jbe
(bad)
fstp
sub
mov
mov
(bad)
frstor
add
inc
stos
out
stos
sbb
inc
mov
sti
out
lock
adc
jle
mov
push
das
dec
pop
dec
sub
push
or
add
in
push
or
imul
cmp
movs
xor
jno
sbb
push
and
jo
sbb
sub
fist
dec
inc
jne
das
mov
cld
sbb
or
dec
fsub
mov
xor
ret
add
push
loop
out
repnz
dec
retf
and
sbb
lahf
sbb
icebp
stos
xor
xchg
cmp
add
shr
mov
adc
dec
lahf
stos
dec
enter
lods
arpl
mov
imul
std
xchg
mov
test
jnp
adc
into
imul
push
cmps
cmp
jge
fwait
xlat
cdq
sub
in
cdq
add
xchg
and
push
xchg
push
dec
mov
xlat
or
imul
mov
fs
sahf
mov
mov
cmp
push
and
xor
les
adc
in
push
or
out
inc
sbb
dec
repz
push
xor
enter
fidivr
cmp
sub
in
(bad)
bound
xor
pop
imul
shr
repnz
sub
stc
lock
sbb
mov
in
scas
add
dec
int
popa
pop
ror
js
lods
add
push
ret
loope
popa
cld
imul
xor
(bad)
push
xchg
ret
les
push
sub
iret
mov
aaa
out
cmp
inc
sar
movs
mov
test
mov
mov
(bad)
cmc
lock
fs
out
dec
mov
push
out
outs
xchg
cmp
addr16
jmp
daa
iret
jnp
mov
mov
xchg
lahf
mov
ret
sbb
jle
mov
dec
mov
adc
jo
call
mov
mov
gs
or
cmp
(bad)
imul
out
fcmove
dec
int3
mov
out
push
xchg
stc
sub
pop
dec
in
daa
xor
pop
imul
sbb
stos
mov
cwde
sbb
mov
ror
xchg
cmp
sbb
sbb
mov
pop
and
push
jo
adc
(bad)
retf
cmp
retf
dec
xor
(bad)
jnp
jmp
or
std
push
mov
xchg
rcr
in
sbb
jmp
rol
lock
xchg
loope
(bad)
push
leave
mov
jge
mov
sbb
add
add
xor
cld
pop
xor
xchg
dec
(bad)
das
loope
push
jae
arpl
inc
(bad)
popa
ss
dec
gs
ret
mov
add
mov
pop
sbb
xor
jmp
int
mov
adc
(bad)
vpmuludq
leave
test
sbb
cli
or
fcmovb
js
(bad)
loopne
jge
cmc
scas
in
out
aas
and
(bad)
cmp
cmps
(bad)
cmp
in
push
sti
or
dec
test
in
(bad)
in
jmp
or
cmc
mov
add
inc
push
jmp
adc
sub
dec
xchg
fnstenv
rol
je
xor
xlat
ror
pop
rol
xchg
jecxz
std
enter
sbb
jecxz
sbb
cmps
push
pop
add
sub
test
in
ins
sub
out
sub
sbb
jnp
ds
fsub
fiadd
mov
or
jne
mov
mov
lahf
add
ficom
retf
mov
xor
cmp
xchg
lods
cmp
ret
mov
daa
(bad)
(bad)
mov
push
xor
add
or
sbb
scas
popa
push
cld
add
rol
icebp
push
jmp
enter
call
imul
dec
ret
stos
loopne
cwde
dec
daa
fsub
or
sub
push
rcr
xchg
add
mov
loope
(bad)
clc
push
ja
aaa
mov
inc
aaa
aaa
sbb
aad
ins
call
stos
xor
jnp
daa
mov
cs
jb
mov
fcomp
nop
xchg
push
xchg
and
mov
mov
cmp
jecxz
mov
cmps
xor
movs
mov
sub
out
ins
adc
pop
scas
xchg
sub
cmovl
std
pop
in
in
xchg
retf
call
popa
fdiv
mov
iret
inc
pusha
(bad)
sub
sbb
int3
sbb
jne
in
test
inc
imul
dec
ins
cmp
call
mov
data16
adc
adc
fiadd
cmc
push
stos
out
stos
cdq
or
pop
popa
and
imul
enter
popf
xchg
and
test
dec
mov
fmul
jmp
mov
sbb
mov
inc
adc
mov
les
jmp
mov
sbb
mov
xor
daa
(bad)
jno
clc
retf
fnstsw
out
fnsave
rol
data16
ret
lods
hlt
mov
inc
and
xchg
sbb
or
sub
mov
xchg
sub
adc
aam
xchg
mov
push
pop
lods
jae
in
loope
addr16
xchg
data16
xchg
jle
mov
jmp
push
popa
xor
ja
rcr
cwde
loopne
das
inc
mov
sbb
cmp
leave
mov
clc
or
(bad)
std
pop
fcmovne
jns
sub
push
cmps
sti
ins
push
into
cmp
mov
mov
jle
mov
and
js
xchg
movs
mov
xchg
push
or
sbb
mov
inc
mov
push
or
cwde
sbb
es
int3
call
xchg
fdiv
ret
hlt
sub
pop
ds
xchg
push
into
mov
jmp
xor
mov
push
cli
mov
loope
stc
dec
call
rol
leave
cli
mov
lock
mov
add
push
cli
push
out
out
in
push
xchg
mov
sbb
cdq
jp
push
pop
mov
out
ret
es
sbb
jge
cmps
jecxz
push
dec
rcl
jle
inc
jge
jl
ret
leave
cdq
clc
or
dec
jp
lods
arpl
ds
mov
pusha
lahf
or
pop
adc
das
and
pop
add
pop
mov
and
push
push
outs
sub
xchg
adc
inc
in
jbe
jae
out
mov
lods
ss
jbe
xor
loop
fld
push
in
cdq
(bad)
mov
xor
iret
sbb
aam
outs
popf
sub
mov
lahf
cmps
lods
adc
push
shl
gs
imul
mov
add
int
xor
fsubr
sub
sbb
repnz
in
out
pop
sub
push
ds
mov
(bad)
jno
gs
pop
inc
jb
(bad)
mov
pop
mov
sbb
dec
dec
arpl
push
cs
or
lods
mov
xchg
loopne
aam
jno
inc
push
dec
aas
leave
cli
cmc
loopne
inc
test
scas
je
cmp
int
mov
inc
mov
dec
dec
push
data16
call
mov
mov
leave
arpl
mov
test
and
or
popf
rcl
rcl
sbb
pop
outs
cwde
mov
sub
gs
nop
push
mov
sub
jmp
xor
cdq
cmp
xchg
xor
ficomp
and
ror
repz
into
fisttp
hlt
inc
xor
push
pop
addr16
clts
call
fimul
xor
mov
fmul
cdq
bswap
out
cmp
cmp
mov
sbb
call
fsub
repz
push
xabort
sbb
aam
popf
sub
ins
mov
sbb
bts
push
add
sbb
int3
mov
or
mov
xchg
mov
pop
and
(bad)
adc
cmp
mov
out
sbb
jb
cmp
imul
loop
sub
rcl
es
movs
(bad)
jp
sahf
call
jp
std
add
cmp
std
xor
cmp
jg
out
call
sbb
pop
mov
lahf
cs
add
push
xor
jne
mov
sub
test
or
mov
js
cmp
inc
int
jno
rcl
idiv
mov
pushf
cdq
or
add
fld
cmps
fsub
pop
and
and
(bad)
jmp
out
neg
cmp
(bad)
out
adc
fimul
jo
and
das
stos
lea
push
inc
shl
not
mov
push
xor
sub
test
call
xor
(bad)
or
inc
add
inc
jno
push
and
mov
fcom
xchg
dec
call
cli
or
test
ss
imul
inc
in
and
cmp
(bad)
fnsavew
out
and
shr
bound
pop
xchg
jecxz
cmp
data16
cmps
shl
cmc
fcom
cmp
xchg
stos
dec
adc
loopne
enter
mov
pop
xchg
ficomp
cwde
sub
mov
sar
sbb
adc
or
ret
push
sub
and
clc
mov
cmp
xor
fwait
dec
pop
dec
cmps
sub
dec
adc
ss
push
lea
xchg
jno
int3
and
retf
test
frstor
xchg
xchg
clc
cld
xchg
into
jns
iret
sbb
scas
mov
and
dec
adc
pop
pop
inc
adc
sbb
rcl
sbb
outs
jp
jae
leave
xchg
mov
xor
lods
stc
sbb
push
jne
mov
add
(bad)
arpl
lock
and
sub
(bad)
mov
sahf
(bad)
cs
neg
std
dec
(bad)
pop
loope
sbb
mov
xlat
unpcklps
arpl
mov
cs
cmp
aaa
mov
adc
xchg
jg
adc
loopne
js
mov
sbb
push
sbb
jle
mov
call
xchg
or
ss
pop
arpl
lods
loopne
mov
fdivr
sub
cmps
inc
xchg
dec
mov
or
aam
pop
dec
inc
and
jge
call
push
dec
es
out
pop
mov
add
xchg
out
out
test
xor
jno
idiv
mov
add
push
inc
mov
mov
sub
int
adc
adc
ds
(bad)
lods
sub
cmovb
clc
cmp
stos
jg
in
and
lock
push
fisub
lods
push
jle
lods
and
(bad)
in
lahf
inc
jmp
push
adc
ret
xor
or
out
jge
mov
mov
mov
rcr
jno
or
addr16
test
mov
xchg
sbb
lock
add
retf
xor
sbb
outs
(bad)
jns
aad
(bad)
mov
and
mov
pop
xor
xchg
mov
xchg
and
out
ret
cwde
mov
test
jns
fiadd
and
push
rcl
push
and
fistp
fcomp
jne
sar
pop
jns
iret
add
adc
sbb
test
push
xor
xchg
cmp
add
or
add
stos
stos
dec
pop
arpl
cmp
test
xchg
sbb
jmp
jo
cmps
out
aam
iret
daa
xlat
mov
xor
jbe
mov
les
add
test
test
adc
js
call
adc
shl
out
xchg
sbb
inc
movs
push
dec
stos
mov
ins
push
je
stos
repnz
aaa
xchg
xchg
in
call
mul
xor
sub
xchg
mov
lock
arpl
popa
sub
ret
xchg
dec
test
sti
jge
ins
out
adc
pop
inc
es
rcr
adc
xor
rcl
cld
cwde
xor
sub
fs
sub
or
fiadd
loopne
lea
sub
stc
jge
out
mov
(bad)
loope
nop
or
push
loopne
(bad)
stc
ret
mov
fiadd
jno
shl
xchg
pop
stc
test
ficom
mov
sahf
xor
cmp
dec
jle
test
jg
btr
push
loop
icebp
mov
or
mov
movs
mov
cmp
sub
add
nop
scas
mov
adc
adc
mov
cmp
push
mov
xor
das
dec
xchg
mov
mov
shl
arpl
cmc
xchg
iret
fsubr
inc
jbe
shr
inc
mov
jo
outs
cmp
popf
and
or
aaa
pop
cmp
pop
stc
pop
pop
clc
sub
shl
push
cmps
jae
ja
pushf
push
mov
fistp
clc
mov
jno
mov
rcl
fbld
push
mov
es
pop
fbstp
(bad)
shl
(bad)
jmp
in
loop
cmp
fistp
pxor
fsubr
out
fidivr
and
pushf
add
mov
popf
xor
mov
cld
jne
dec
adc
iret
or
push
mov
xor
cli
repnz
(bad)
mov
into
mov
loope
test
dec
mov
cmp
out
pop
js
cmp
scas
push
ins
call
mov
lds
mov
adc
jge
cdq
aam
cdq
adc
aam
xchg
(bad)
sbb
jmp
rcl
xlat
scas
pop
cs
retf
aaa
loope
mov
mov
add
ds
mov
div
leave
das
inc
sub
aad
loope
push
mov
inc
scas
mov
pop
push
add
xchg
lods
mov
and
into
fstp
into
cmps
adc
sub
stos
lahf
lea
cmp
adc
inc
inc
cmp
xchg
mov
mov
sbb
rcr
test
pop
int3
sbb
cwde
mov
cmp
adc
lds
cmp
xor
std
test
(bad)
cmp
mov
in
sub
cmp
call
out
pop
xchg
les
adc
fs
dec
xor
xchg
mov
out
and
inc
shr
mov
fld
mov
call
xchg
adc
push
ins
jne
sbb
mov
pop
lods
(bad)
lds
sahf
pop
cmps
and
neg
in
outs
and
mov
fbstp
fnstsw
ror
in
mov
dec
mov
into
ret
pop
push
imul
mov
cmps
adc
mov
scas
sar
arpl
pop
es
cmc
in
mov
jo
lea
das
xor
cmp
mov
jmp
cmp
out
jmp
lea
imul
cmp
sub
in
mov
sbb
mov
movs
xchg
and
fidiv
imul
das
test
ja
mov
adc
dec
fmul
(bad)
movs
fsubr
ret
add
dec
sbb
cmps
mov
cwde
sub
fdiv
xor
sbb
mov
inc
fbld
mov
mov
xor
shl
push
xor
pop
xchg
sub
and
gs
push
imul
fsubr
test
lock
cmps
jno
push
sub
and
shl
mov
rol
dec
jbe
mov
pop
inc
stos
stc
ds
fwait
ret
add
and
aad
(bad)
(bad)
sahf
jae
dec
inc
std
scas
add
cmp
movs
ret
push
das
xlat
js
dec
mov
mov
stc
nop
in
clc
jmp
ret
mov
cmp
mov
repz
or
js
jg
adc
(bad)
imul
xor
sub
jne
mov
test
and
fwait
cs
jmp
push
in
and
ret
pop
lds
loope
cli
js
rcr
mov
add
(bad)
mov
xchg
addr16
ret
sub
add
(bad)
push
aaa
int
jmp
mov
add
pop
cmp
loope
jmp
popf
cli
mov
sub
(bad)
sbb
and
gs
(bad)
push
cmps
push
test
scas
test
cmp
mov
pop
int3
mov
pop
xchg
pop
sub
or
push
outs
fadd
sbb
jg
inc
mov
int3
mov
outs
aam
sbb
jns
test
ret
mov
fadd
ror
mov
mov
pushf
hlt
lahf
sub
loope
push
or
pushf
push
xchg
jp
(bad)
mov
mov
(bad)
push
pop
pop
and
sub
pop
ds
jne
or
mov
into
sahf
cld
xor
test
ja
pushf
inc
cmps
pop
add
repnz
les
and
push
dec
xor
jp
mov
or
mov
xchg
and
add
lahf
jne
cmps
in
in
add
dec
mov
mov
mov
clc
test
push
xor
mov
addr16
lock
jbe
leave
sbb
(bad)
or
add
xchg
aaa
mov
ror
pop
movs
push
adc
pusha
dec
push
push
imul
in
sbb
pusha
mov
add
jl
jge
dec
lock
xchg
addr16
pop
pop
addr16
lahf
sbb
pop
xor
test
add
retf
pop
adc
scas
inc
sti
stc
mov
mov
arpl
jbe
mov
out
mov
hlt
sub
dec
adc
mov
pop
ret
test
ret
adc
ja
xor
leave
mov
(bad)
daa
adc
into
imul
sahf
repnz
dec
(bad)
jb
dec
loope
ss
retf
mov
sub
lea
ds
out
out
sbb
mov
imul
gs
enter
and
jns
les
cmp
imul
pop
mov
sbb
add
mov
xchg
jge
sub
adc
pop
dec
(bad)
xor
and
(bad)
outs
test
inc
adc
and
mov
sahf
jnp
pop
xlat
sub
retf
scas
and
aam
push
mov
retf
lea
pop
jmp
sub
lahf
cwde
fdiv
dec
imul
jge
cmp
imul
dec
ss
add
sar
dec
sbb
fnstcw
xor
lods
outs
pop
push
pop
stos
popf
jge
sub
in
adc
adc
movs
jle
les
out
sbb
mov
and
mov
ficomp
aam
xor
pop
ret
xchg
sub
into
dec
xor
jmp
pop
push
push
cmp
je
retf
imul
inc
test
lds
jmp
sub
out
inc
in
ret
push
mov
cmps
out
into
loopne
out
lea
jecxz
push
test
loope
imul
pop
jle
lahf
pop
cli
adc
jecxz
mov
aas
pusha
xor
jecxz
into
movs
out
dec
push
jmp
xchg
cmp
out
cli
cmps
or
fdiv
xor
dec
jns
mov
repnz
pop
add
and
push
sbb
xchg
and
loop
push
ret
mov
inc
add
shr
sahf
xor
mov
aas
push
mov
hlt
mov
out
dec
shl
xchg
jmp
pop
pop
loop
dec
jg
in
and
mov
push
pusha
fcom
mov
in
xchg
adc
clc
cmp
mov
dec
imul
and
(bad)
int
aas
push
sahf
inc
pop
leave
pop
sar
cli
dec
push
bts
push
add
push
hlt
call
fdiv
outs
push
push
mov
test
dec
mov
fst
adc
mov
test
movs
push
mov
mov
inc
adc
cld
aas
loop
push
lods
sub
fs
icebp
mov
das
mov
fwait
jl
addr16
dec
pop
test
fwait
les
outs
fadd
repnz
out
aam
sub
mov
shl
int
push
out
jno
push
jno
enter
or
(bad)
inc
lea
fild
(bad)
xchg
daa
mov
fidivr
sub
pop
mov
xchg
lods
aas
gs
bound
xor
mov
aaa
xstore-rng
cmps
add
outs
mov
add
xchg
pushf
repz
enter
out
repnz
mov
iret
jle
leave
sbb
pop
cmc
das
mov
sbb
(bad)
dec
cli
ja
test
popa
push
push
setle
mov
es
and
ret
mov
add
out
das
in
mov
inc
lock
mov
xor
xchg
xor
or
xchg
pop
fldenv
xor
lahf
mov
jbe
jp
ss
addr16
jmp
jmp
cmp
xchg
call
mov
daa
popf
addr16
sar
pusha
cmps
(bad)
xchg
loope
adc
mov
enter
or
mov
adc
and
arpl
jnp
shr
xor
mov
sti
test
neg
loopne
jmp
test
cmp
dec
sub
and
and
xor
jmp
adc
jb
xchg
lea
imul
pop
sti
repnz
sbb
nop
call
int3
sub
packuswb
push
xchg
xchg
clc
cmovs
(bad)
stos
jnp
and
dec
dec
push
push
aas
jg
inc
or
vmovhpd
xor
jnp
popf
xor
add
add
call
cmp
push
jg
cmps
movs
jl
pop
xor
fucomp
sub
jmp
jge
add
das
inc
pop
push
dec
xor
jo
push
pop
mov
out
jg
pop
jmp
cmp
test
xchg
and
pop
adc
dec
fiadd
out
jno
test
in
stos
and
jl
sbb
jmp
jecxz
repz
sbb
in
addr16
adc
mov
xor
push
cmp
jae
fwait
movs
adc
jle
in
imul
push
add
jmp
cmp
movs
ror
mov
xchg
ret
pop
das
setb
adc
fimul
xor
cmp
push
push
enter
push
ss
stos
enter
repnz
or
mov
xchg
stc
and
adc
inc
or
imul
mov
cmps
mov
add
sub
pusha
adc
mov
add
xor
mov
jne
mov
dec
in
ja
jmp
jp
push
xchg
into
mov
mov
cmp
add
pop
jge
retf
loope
pop
pop
sub
mov
cmps
dec
fidivr
fwait
imul
xchg
sub
xchg
mov
inc
add
dec
cdq
nop
ret
scas
inc
jmp
push
fsubr
xor
jo
inc
mov
cdq
push
jmp
fild
pop
xlat
hlt
lock
je
and
mov
push
adc
pop
aas
gs
pop
loop
cwde
pop
dec
or
rol
test
mov
push
sar
les
cmp
cld
int3
stos
push
inc
dec
(bad)
cmc
mov
bnd
jbe
sahf
pusha
gs
aas
dec
out
push
std
mov
inc
in
mov
inc
inc
mov
mul
cmp
aas
mov
mov
xchg
scas
aam
mov
and
mov
inc
cs
lock
xor
xchg
mov
test
jle
mov
fidiv
cmp
mov
div
daa
sbb
or
or
jge
mov
dec
inc
and
jmp
int
loope
pop
mov
mov
and
add
cmp
jg
xchg
xchg
cmps
data16
and
cmc
sub
std
mov
xchg
xor
mov
sbb
push
jp
xcrypt-cbc
cmps
pop
das
xchg
sub
cmp
inc
mov
xchg
ror
rcl
or
push
out
fucom
push
mov
add
push
mov
cmp
dec
out
pop
aad
stc
cmp
sbb
std
mov
hlt
rcr
imul
iret
sbb
mov
add
jp
or
das
cwde
jl
push
pop
nop
mov
clc
pop
(bad)
jecxz
test
jne
or
in
and
or
inc
mov
jo
add
jg
pop
jne
int3
jo
fs
movs
ret
adc
retf
in
pop
movs
or
loope
jg
lods
or
dec
sub
xor
nop
stc
addr16
push
xor
lds
push
shl
and
adc
es
inc
mov
jmp
jg
fcomp
add
das
cs
inc
in
cmp
lods
enter
cmc
cmp
ret
retf
es
ret
xor
into
pop
mov
ss
fstp
pushf
stc
push
push
mov
xor
push
pop
icebp
(bad)
aas
aaa
addr16
cmc
adc
inc
fdiv
daa
jns
inc
pop
bound
stc
jecxz
sub
mov
rol
ret
fsub
popf
fwait
cmp
cmp
ret
fisubr
not
lds
lods
xchg
sbb
popa
xor
add
add
or
push
stc
fwait
pusha
(bad)
xchg
mov
sbb
inc
dec
pop
loope
sub
cmp
je
dec
mov
out
sub
xlat
cdq
add
in
or
or
xchg
cmps
cmps
mov
ret
pop
test
sbb
push
leave
fwait
inc
jmp
jmp
movs
mov
ins
imul
jmp
adc
(bad)
stc
xor
push
push
sub
and
stc
jle
inc
or
js
dec
fadd
dec
dec
ror
fisttp
inc
aas
ror
pusha
pop
mov
ja
out
or
sbb
mov
cmp
cmp
push
jp
push
fild
adc
in
test
add
js
nop
pushf
pop
neg
sub
pusha
addr16
sar
cli
pop
bound
ror
imul
outs
push
cwde
jg
int
popf
(bad)
ss
and
xchg
cwde
mov
pop
sub
pop
push
mov
in
xchg
movs
mov
jnp
dec
xor
jecxz
dec
daa
arpl
and
or
adc
mov
add
lahf
or
iret
in
cmp
xor
adc
and
call
dec
movs
pusha
ret
lods
xchg
sub
js
fstp
leave
jg
(bad)
cld
das
popf
and
push
pop
fmul
inc
add
and
imul
aam
mov
mov
and
or
sub
int
jge
test
and
cld
sbb
or
jmp
cld
rcl
popa
or
cmp
movs
scas
outs
into
and
lds
dec
cmp
stos
add
movs
(bad)
pop
and
dec
leavew
jmp
sub
call
pop
in
lahf
je
xchg
jp
jno
mov
mov
(bad)
dec
fwait
xchg
dec
lds
dec
pop
repz
lock
mov
jecxz
cmp
xlat
movs
and
mov
mov
test
add
adc
or
mov
push
dec
test
(bad)
rcr
sub
sbb
push
out
imul
scas
ja
addr16
fistp
sub
xchg
cmp
ja
push
and
enter
retf
cmc
jle
jne
jmp
cmp
mov
lods
add
xor
dec
ins
movs
test
cld
sbb
xor
mov
add
cmp
mov
mov
jmp
xchg
mov
fnsave
jno
icebp
mov
ja
movs
sub
idiv
sahf
in
sub
pop
imul
or
pop
sub
fucomip
mov
xchg
jb
xor
mov
gs
sbb
inc
cwde
repz
popf
push
ret
add
and
popa
push
mov
inc
shl
jecxz
data16
mov
sbb
dec
jo
aam
lds
mov
adc
div
cmp
loope
or
mov
pop
(bad)
aaa
ins
or
cmc
cwde
xchg
pop
jb
push
(bad)
in
iret
je
iret
ret
inc
mov
pop
ins
mov
jmp
arpl
push
test
inc
imul
jge
cmc
out
mov
sar
pop
sbb
mov
(bad)
outs
adc
in
pop
fadd
and
pop
or
ins
sbb
mov
mov
bound
add
adc
mov
add
pop
bnd
shl
aam
mov
mov
loopne
call
jo
add
jp
sahf
shr
add
mov
push
ja
pop
adc
pop
fucom
sbb
pop
or
mov
outs
nop
int3
test
shr
test
fmul
ss
or
pop
aam
and
ins
inc
lods
fadd
pop
pop
inc
and
and
ins
sbb
mov
ror
inc
push
push
jl
mov
pop
sbb
xchg
test
shl
mov
inc
ficom
and
xchg
adc
cmps
or
mov
outs
repnz
and
mov
outs
push
scas
adc
repz
or
pop
cmp
std
add
repz
shl
or
(bad)
popf
movs
scas
aad
xlat
ins
fadd
popf
sub
mov
mov
into
addr16
lahf
out
repz
adc
ret
and
ja
xchg
xchg
movs
ret
ins
sub
(bad)
jnp
pop
fs
loope
sub
rol
jle
sbb
popa
add
int3
xchg
stos
sbb
mov
repz
mov
sub
ins
mov
dec
mov
mov
out
sub
mov
imul
out
xor
test
cmp
mov
xor
pop
inc
bound
dec
cdq
push
mov
and
arpl
jns
(bad)
std
pusha
or
ins
inc
out
pop
fcmovbe
daa
shr
sub
xchg
sahf
fistp
mov
sahf
cmp
retf
add
xchg
jb
inc
mov
pop
push
cmp
sbb
xchg
cmp
cmp
fld
mov
ret
pop
sbb
xchg
mov
jmp
sbb
rol
jbe
xchg
call
jg
jp
sub
fisttp
out
push
push
push
iret
cwde
inc
jg
loop
sbb
icebp
div
clc
mov
jge
add
mov
xor
ficomp
aad
call
xor
sub
xchg
test
popf
inc
jge
fs
in
push
shl
cmc
popa
xor
sahf
add
inc
sub
test
aaa
ins
cmps
jle
popf
ins
mov
and
jbe
push
out
sub
lock
mov
(bad)
in
pop
push
popa
sbb
pop
repz
lods
cmps
jmp
dec
es
jecxz
jge
out
and
dec
pop
sbb
mov
mov
mov
or
das
inc
icebp
(bad)
cmp
sahf
pop
dec
add
rcl
jno
adc
inc
rcl
mov
pop
mov
inc
adc
sahf
xlat
icebp
movs
rol
add
pop
test
sbb
sar
jmp
push
(bad)
sbb
test
jecxz
cmp
hlt
div
loopne
inc
gs
scas
test
sbb
mov
xor
cmp
(bad)
push
add
gs
sub
cdq
mov
loop
loop
and
pusha
gs
iret
lea
sbb
pop
inc
adc
mov
scas
imul
(bad)
cwde
dec
jmp
jg
xchg
sbb
cld
sbb
sbb
mov
xchg
xchg
push
jne
jecxz
jecxz
cmp
jne
inc
and
pop
inc
in
and
popf
lahf
ss
jp
pop
cmp
test
jno
imul
xchg
and
mov
ds
add
and
outs
pop
dec
xor
mov
fdivr
pop
hlt
into
cli
pop
sbb
stos
stos
ja
push
xor
mul
sbb
push
push
je
pop
mov
sub
mov
fs
lods
into
in
mov
and
les
repnz
xchg
mov
stos
out
(bad)
repz
dec
ret
mov
js
and
jmp
adc
dec
pop
push
adc
xchg
mov
add
cmp
cli
int3
arpl
retf
jo
inc
sbb
shl
mov
test
jecxz
xor
sti
hlt
dec
dec
pop
fmul
repz
mov
mov
mov
fwait
xchg
jb
or
retf
jo
sti
inc
dec
push
daa
add
shl
jns
aas
leave
(bad)
xor
sti
lahf
addr16
jg
mov
sbb
fisttp
pop
popf
pusha
mov
leave
sub
inc
aas
adc
int3
push
xchg
sub
adc
mov
inc
adc
adc
jg
and
xor
in
xchg
outs
or
inc
dec
ins
mov
and
and
rol
xor
out
je
leave
pop
or
inc
aam
adc
fnstenv
pop
inc
adc
xchg
repz
adc
xchg
sub
shr
or
push
mov
xor
mov
sub
jl
mov
mov
or
das
jmp
mov
push
jmp
xor
addr16
push
pop
jb
xchg
retf
jp
out
data16
in
add
and
outs
dec
fs
jns
repz
push
repnz
mov
cmp
retf
sbb
cs
das
adc
jmp
fprem
jmp
rcr
out
retf
mov
jmp
clc
clc
mov
push
inc
ror
push
lods
lds
(bad)
into
lods
stos
rol
lahf
sahf
or
inc
mov
sti
mov
jl
inc
out
push
or
mov
cwde
mov
and
ret
adc
in
rcr
mov
sub
mov
mov
aad
sbb
adc
mov
fwait
mov
dec
xchg
inc
cmp
in
out
hlt
pop
fnstenv
loope
push
in
mov
and
repz
cmp
test
sbb
in
inc
cmp
jmp
mov
retf
jmp
mov
mov
sbb
into
in
pop
lock
cdq
shl
cdq
dec
fiadd
hlt
sbb
mov
popa
adc
mov
dec
xchg
lock
xchg
movs
cld
dec
and
repnz
ret
pop
push
dec
pusha
and
not
repz
xor
int3
sub
mov
retf
jle
sub
idiv
ret
clc
loope
add
ja
cmp
ret
jae
push
or
ret
xchg
rcl
in
test
imul
std
inc
ins
add
pusha
scas
xchg
and
mov
cmp
div
mov
inc
aad
or
cmp
push
add
ffree
nop
adc
mov
cmps
add
dec
dec
in
jl
push
lock
aaa
lods
lea
pusha
mov
popf
cmps
sub
mul
xchg
adc
dec
jo
adc
test
jmp
pop
retf
in
test
cmp
mov
mov
jnp
mov
pop
mov
mov
hlt
mov
cli
retf
fwait
adc
pusha
imul
xchg
xchg
or
mov
cli
jae
xor
repz
in
fsubr
aaa
push
push
sub
xchg
(bad)
rol
mov
mov
popa
shl
mov
pusha
imul
fst
sbb
mov
fmul
sub
cmp
ins
shr
scas
pop
lods
jle
div
jne
jno
fldcw
adc
(bad)
dec
call
fcomi
and
dec
es
aad
jb
call
jp
lods
mov
adc
out
cmp
arpl
call
cmp
neg
aam
jmp
in
sbb
cwde
sti
aam
in
add
shl
and
push
data16
push
jnp
cs
cmps
nop
enter
jmp
adc
mov
call
xor
pushf
inc
adc
mov
jo
aad
jmp
pop
mov
mov
push
jg
ss
inc
xchg
out
jl
xchg
iret
push
cmpxchg
jl
mov
out
push
enter
jge
ss
add
xchg
dec
cli
int
inc
adc
push
mov
xchg
pop
shr
push
push
jae
mov
daa
cmps
sbb
adc
aaa
mov
add
into
clc
mov
mov
dec
(bad)
cmp
test
add
nop
cmp
js
xor
pop
ja
mov
je
(bad)
cmp
scas
in
stos
xchg
pop
fs
rcl
or
xchg
vpsraw
cdq
repz
push
cs
mov
aad
scas
cmps
(bad)
mov
or
ins
test
test
dec
adc
sbb
adc
sub
cmc
xchg
shl
imul
push
stos
dec
mov
hlt
or
in
sbb
mov
xor
push
pop
cmp
mov
sub
push
jb
(bad)
mov
mov
and
mov
or
outs
and
test
pop
mov
sar
stc
movs
cmp
sub
jae
lods
ret
xchg
out
add
int3
popf
dec
cmp
ret
mov
or
xor
mov
add
mov
in
aad
repnz
add
rcl
retf
sbb
mov
jbe
push
pop
inc
ficom
inc
pop
mov
mov
inc
or
into
push
fsub
sub
xchg
outs
add
add
js
(bad)
sahf
mov
cld
fst
xor
and
stc
shl
sbb
mov
rcl
pop
and
pop
cmp
fist
mov
mov
adc
inc
je
xor
cld
push
mov
ror
retf
sbb
pop
js
mov
adc
jmp
jg
dec
adc
add
mov
pushf
mov
sbb
or
or
add
adc
and
sub
pop
xchg
xchg
icebp
lock
sbb
mov
mov
test
cmps
test
sub
in
vpsubq
xchg
add
mov
(bad)
xchg
push
dec
or
sub
pop
call
xor
fild
rcl
mov
cmp
sub
lods
cmps
rol
sahf
call
mov
sar
mov
arpl
mov
mov
mov
push
mov
push
mov
push
xchg
add
ret
sbb
push
jo
mov
xchg
popa
aaa
jb
inc
inc
popa
or
xor
(bad)
xchg
in
xlat
pushf
jbe
mov
call
inc
sub
scas
aaa
fcom
add
shr
jmp
sar
mov
jb
addr16
mov
add
out
les
cli
hlt
test
jmp
dec
lahf
sbb
mov
popf
xchg
dec
mov
in
test
or
outs
scas
pop
lock
je
aaa
call
xor
mov
test
dec
idiv
inc
push
and
rcl
xor
push
cmp
pop
push
sahf
fcom
push
(bad)
lock
cmp
shl
dec
ja
add
xor
and
retf
or
push
dec
rol
movs
cmp
push
mov
cmp
mov
repz
bound
xchg
dec
pop
xchg
adc
xlat
pand
sub
adc
adc
xchg
movs
xor
mov
adc
mov
add
mov
add
push
xor
sbb
out
pop
pop
(bad)
retf
out
outs
rcl
cmp
or
push
adc
jle
inc
out
out
adc
ins
xor
fild
scas
aas
mov
push
shl
lock
push
lods
sbb
push
loop
aam
jnp
push
(bad)
jmp
nop
gs
das
mov
lahf
test
in
and
pusha
adc
xchg
xor
mov
call
icebp
ins
out
add
cwde
cmps
jae
inc
ds
inc
mov
hlt
jb
adc
lods
clc
lods
int3
ins
jns
adc
or
shl
jae
stos
pop
aaa
repnz
push
in
arpl
mov
jbe
dec
jge
dec
sub
in
sbb
sbb
pop
push
aas
scas
retf
jge
pop
jae
nop
mov
movs
cdq
shl
in
mov
outs
inc
add
push
inc
mov
(bad)
jo
add
int
ret
sahf
mov
dec
hlt
mov
lock
add
jg
jp
fisub
out
push
mov
jae
rol
dec
xchg
test
aam
push
mov
adc
les
pop
or
icebp
bound
fdivrp
jo
add
idiv
jbe
mov
les
daa
jno
stc
stos
cli
cmp
xor
cmp
xor
test
inc
add
sti
fist
lods
aaa
xchg
sbb
outs
xor
jo
sbb
jbe
ins
mov
cmps
mov
pop
(bad)
mov
mov
or
ins
fidivr
mov
ja
ds
test
mov
or
ds
and
les
and
in
push
push
repnz
xchg
add
xchg
mov
mov
leave
xchg
fwait
shl
cli
and
mov
jp
sbb
(bad)
aaa
cdq
repnz
dec
out
addr16
(bad)
cli
fs
aam
mov
shr
xchg
dec
inc
and
inc
int3
jecxz
cli
or
mov
jmp
dec
(bad)
or
sbb
jecxz
mov
mov
stos
sub
jecxz
scas
imul
mov
cmp
lods
(bad)
push
ja
jo
mov
(bad)
iret
push
int
sbb
push
mov
(bad)
(bad)
das
add
vsubss
in
pop
mov
mov
cmps
sub
clc
in
popa
lods
push
fcom
dec
shl
inc
adc
(bad)
fcmovb
clc
mov
imul
ret
mov
icebp
sbb
lods
scas
(bad)
dec
cmp
xor
dec
dec
fsub
imul
pop
mov
fldenv
mov
add
lods
rcl
pop
movs
in
jne
dec
jns
and
loopne
pop
inc
repnz
fwait
(bad)
pop
dec
mov
movs
test
fdiv
ror
push
adc
mov
outs
pop
out
out
mov
mov
out
ins
imul
pop
jno
mov
mov
sbb
dec
in
and
xchg
cmp
add
jbe
stos
(bad)
aad
jmp
mov
scas
sahf
or
clc
cld
(bad)
lods
not
outs
call
add
retf
cs
xor
nop
(bad)
pop
push
dec
pop
rcl
imul
mov
xchg
shl
data16
adc
popa
dec
in
imul
add
xchg
(bad)
fisttp
jg
inc
cmp
push
inc
and
cmp
xchg
cdq
sbb
mov
xchg
rcl
sbb
mov
mov
test
sub
cli
add
push
lods
gs
in
lods
jmp
sbb
inc
push
dec
cmp
dec
lods
cmp
push
ficom
jo
mov
call
test
mov
pop
out
outs
lea
fwait
mov
adc
cli
add
arpl
xor
sahf
sbb
retf
dec
sub
lock
mov
lahf
xchg
(bad)
enter
mov
es
push
pop
mov
or
or
mov
lods
scas
(bad)
loopne
ret
pop
jmp
add
inc
jle
imul
mov
ds
add
jge
lods
pop
mov
fsubr
mov
xor
iret
das
movs
sbb
outs
mov
movs
retf
add
call
adc
mov
xchg
adc
push
mov
les
in
call
(bad)
(bad)
fwait
cli
dec
fs
in
mov
aas
std
fldenv
or
sbb
scas
inc
xchg
retf
adc
retf
sahf
icebp
pushf
add
push
int3
lahf
icebp
imul
cdq
mov
dec
push
xchg
pop
les
cld
inc
inc
leave
hlt
stc
cmp
into
leave
gs
mov
sbb
test
ins
out
in
jb
rol
cmps
push
mov
ret
call
stos
loope
ins
retf
or
jecxz
inc
or
mov
repnz
adc
mov
sahf
inc
nop
outs
int
pop
ins
int3
sub
ror
das
pop
mov
mov
ja
(bad)
jmp
cli
mov
mov
cmp
adc
xlat
mov
shl
fnstenv
xor
icebp
add
into
dec
sbb
pusha
inc
pop
test
jle
jno
push
inc
push
push
cmps
scas
mov
sbb
cli
shl
and
aaa
adc
and
jns
mov
imul
push
mov
inc
les
add
das
mov
cmp
dec
push
jecxz
pop
and
ret
mov
out
sub
pop
sbb
jge
icebp
pusha
sti
push
mov
frstor
mov
inc
imul
pop
jg
fnstenv
call
dec
ret
cmps
xchg
icebp
pop
and
sub
stos
jecxz
mov
mov
loope
push
das
rcl
add
ret
fild
mov
jnp
repz
jmp
clc
fiadd
push
icebp
ins
mov
or
mul
addr16
out
ja
jns
inc
add
push
cmp
dec
pop
into
pop
xchg
mov
sbb
div
scas
popf
cmp
sub
xchg
out
sbb
cmp
cli
je
dec
es
mov
cmp
lods
dec
adc
cmp
(bad)
sbb
push
sub
fdivrp
and
mov
ja
stos
cmp
jo
xor
in
mov
shl
stc
test
dec
mov
dec
icebp
repz
adc
inc
xor
xchg
ja
addr16
pop
or
enter
and
inc
mov
mov
leave
sub
push
test
dec
xchg
and
and
xlat
push
gs
stc
(bad)
push
icebp
std
mov
repnz
mov
dec
cmc
(bad)
cmp
xchg
jno
nop
setno
cdq
enter
retf
sub
fwait
mov
fisttp
adc
or
or
sbb
(bad)
daa
sahf
loop
jge
sub
inc
fwait
inc
mov
pop
or
jo
loopne
push
dec
aaa
push
inc
mov
mov
into
or
mov
sbb
adc
mov
pop
mov
adc
xor
ret
dec
(bad)
ror
mov
inc
push
push
outs
mov
mov
dec
dec
inc
in
mov
rcr
psrad
pmuludq
jmp
scas
adc
adc
jp
cs
or
mov
aad
ja
inc
fstp
xchg
jl
cld
jae
fwait
nop
add
add
sbb
xor
push
inc
push
test
sti
jo
push
mov
inc
aas
mov
ror
icebp
pop
pop
in
out
jne
or
adc
jmp
call
sbb
fld
cli
test
iret
mov
and
cmp
mov
inc
dec
sub
in
arpl
and
dec
and
sbb
sub
jle
pushw
ds
stos
sahf
popf
loope
jne
mov
test
retf
aam
mov
mov
mov
or
mov
cmp
sub
(bad)
pushf
jecxz
mov
mov
adc
aam
xchg
gs
stc
add
sub
fs
push
fsubp
jp
add
test
dec
aad
loop
jnp
sub
sbb
cdq
inc
mov
mov
pusha
aaa
dec
movs
jae
pop
mov
jmp
(bad)
out
mov
cwde
out
fadd
push
shr
(bad)
aad
xchg
mov
xor
stos
cld
pop
xchg
push
(bad)
mov
leave
hlt
sub
cmp
pop
add
jns
xlat
jg
loop
jp
(bad)
std
inc
aas
adc
sub
push
aas
sub
movs
pop
loop
into
ret
push
push
test
pop
push
push
pusha
cmp
push
jno
mov
and
push
mov
or
adc
sbb
hlt
xlat
ss
fnstenv
jno
adc
add
add
out
and
mov
jge
add
(bad)
popa
call
sbb
outs
mov
cld
lods
bnd
xchg
pop
loop
test
fdivr
cld
mov
shl
aam
xor
(bad)
out
jbe
xor
ret
xor
sbb
pop
add
loope
cmps
cmps
and
add
add
jnp
imul
js
adc
jb
aad
les
sub
sbb
push
call
call
ja
retf
fisubr
ds
and
and
sbb
lahf
sub
mov
push
xchg
call
sub
mov
ror
nop
push
mov
jmp
sbb
add
inc
sub
mov
repnz
and
lods
cmps
sbb
xchg
cmp
xor
clc
or
dec
jae
fstp
sub
ins
xlat
dec
hlt
cld
jl
cmp
sub
(bad)
cmc
stc
mov
std
das
nop
ins
call
xchg
inc
mov
push
test
(bad)
ret
pop
arpl
(bad)
jb
jns
sar
ins
mov
cdq
mov
mov
pop
std
pop
popf
loop
mov
dec
fs
dec
dec
sub
inc
outs
shr
push
or
mov
aaa
mov
mov
(bad)
mov
aaa
std
sub
cmps
pushf
cmovae
int3
mov
push
imul
test
lds
movs
jp
in
nop
sahf
mov
fistp
ins
ins
int
add
repnz
add
mov
mov
push
inc
jmp
sub
xor
xchg
arpl
inc
jnp
cmp
xchg
or
inc
mov
pop
pop
add
push
mov
and
(bad)
(bad)
jmp
shr
sub
lahf
and
adc
sub
jl
lds
or
inc
pop
xchg
nop
arpl
sub
test
loope
repnz
(bad)
jnp
dec
mov
cmc
lods
mov
pop
inc
push
neg
sbb
mov
neg
and
mov
daa
pop
and
jns
pop
jmp
aaa
jmp
sahf
jnp
lea
ret
or
mov
sub
int
sar
ja
cmp
mov
or
fimul
cmc
out
jns
or
scas
push
add
lods
mov
adc
cwde
mov
lods
or
cs
cmps
or
lahf
mov
(bad)
aam
aaa
sahf
ds
fisub
fidivr
mov
and
cs
repnz
mov
sbb
jle
push
retf
retf
xchg
les
clc
mov
fisubr
lds
lock
jnp
enter
pop
mov
lea
aam
cdq
adc
ja
shl
sbb
mov
call
inc
jns
push
test
cmps
xchg
sub
call
out
or
jo
mov
hlt
or
cmps
mov
fdivr
(bad)
dec
mov
sbb
push
rol
jno
xchg
neg
sbb
xchg
fldcw
aas
push
ret
loope
xchg
loope
call
xchg
sbb
mov
out
inc
(bad)
mov
pushf
mov
(bad)
mov
sti
mov
pop
test
aas
xchg
mov
stc
jmp
in
stos
fs
pushf
push
xor
xchg
pushf
mov
lods
fisub
adc
lahf
mov
fcomp
mov
imul
sub
cli
mov
icebp
cmp
xchg
mov
add
ror
and
sbb
mov
mov
or
pop
hlt
jnp
xchg
daa
cmp
out
xchg
mov
pop
lods
enter
add
xchg
cmps
and
test
vpermq
in
ret
xchg
cmp
cmp
stc
pop
shl
xor
inc
add
idiv
push
fsub
pusha
inc
xchg
sub
pop
cmp
imul
or
xchg
(bad)
mov
dec
sub
scas
loop
pop
sbb
fwait
pusha
sbb
jne
mov
clc
xor
jl
rol
mov
daa
jg
imul
aas
daa
arpl
inc
sbb
dec
or
shr
(bad)
leave
rol
fcom
lds
repz
mov
pushf
jle
das
pop
cs
movs
add
adc
cmc
sub
xchg
sbb
jg
cmp
mov
popf
cld
and
or
ret
js
inc
or
int3
in
sbb
icebp
jp
jge
xor
pushf
and
out
imul
enter
inc
sbb
aad
sbb
mov
xchg
adc
sub
cmp
adc
mov
repz
jle
add
ins
add
(bad)
sbb
lods
push
scas
cmps
jmp
(bad)
mov
mov
jno
xor
sahf
test
jg
jmp
push
push
cmc
fdiv
xchg
int
int3
outs
sbb
imul
loope
neg
aaa
int
pop
cmp
dec
jnp
cld
cmp
cld
cwde
push
lahf
mov
nop
sub
adc
jg
lds
sub
in
popa
pop
pop
int3
movs
fs
dec
pop
(bad)
repnz
dec
and
adc
daa
push
dec
imul
cmps
dec
push
ds
into
mov
(bad)
jmp
push
mov
mov
mov
hlt
push
cmp
into
(bad)
or
sub
inc
dec
add
retf
sbb
gs
shl
(bad)
mov
pop
jmp
and
inc
in
mov
ins
cmp
je
or
adc
pushf
aad
sbb
loope
add
cmc
jbe
sahf
push
stc
fidivr
addr16
adc
lock
cmc
movs
iret
mov
mov
mov
in
or
mov
loop
test
add
dec
mov
mov
inc
loopne
or
loope
sub
cmp
xchg
push
pushf
std
jmp
and
cmp
fs
mov
(bad)
xchg
fnstcw
dec
test
mov
jb
aaa
push
or
js
adc
jp
push
in
lea
push
cld
lds
sub
ret
fwait
cmps
pusha
xor
mov
ins
adc
cmp
sbb
(bad)
jnp
push
pop
xor
ja
idiv
pop
jne
and
or
jb
(bad)
mov
mov
or
rcl
jbe
dec
mov
adc
div
test
das
out
fwait
imul
mov
fld
and
fld
add
adc
fistp
jge
into
test
or
imul
ins
jl
add
jp
xchg
mov
fst
sahf
iret
mov
mov
mov
jo
mov
aad
xchg
dec
cmp
les
inc
mov
dec
sub
imul
mov
mov
adc
mov
mov
hlt
movs
jl
xchg
jmp
lahf
push
fs
clc
fisub
lods
mov
jecxz
xor
imul
cmp
cs
adc
fist
adc
mov
pop
add
fidiv
scas
das
add
inc
dec
dec
xchg
sbb
(bad)
cmc
xchg
es
stos
ficom
fadd
fist
fild
addr16
repz
mov
retf
(bad)
repnz
outs
inc
cmp
cld
sub
pop
repnz
mov
(bad)
mov
mov
pop
cmc
inc
out
push
push
aaa
mov
jecxz
sub
xchg
jmp
int3
xor
ret
xchg
mov
jo
arpl
mov
ds
mov
stos
cmp
stc
cmp
sub
and
sub
pop
and
dec
sahf
lock
sub
lods
jo
retf
jno
loop
mov
adc
sbb
sub
(bad)
iret
push
mov
cmps
jnp
mov
inc
into
and
or
add
jmp
dec
popf
out
cmps
aam
in
jo
out
pop
iret
jo
sbb
push
jmp
ds
ret
scas
mov
ins
jle
call
retf
adc
mov
out
cwde
or
push
jns
cmp
xor
div
imul
mov
jo
test
push
sub
fst
jno
(bad)
aad
shl
sub
push
xchg
dec
inc
arpl
movs
popf
dec
ja
lea
sub
push
inc
add
(bad)
mov
add
into
pushf
cmovge
mov
adc
out
into
adc
addr16
jl
in
sbb
pushf
cld
cmp
mov
cmc
mov
dec
fwait
mov
mov
sub
jns
jp
pop
pop
mov
xlat
sub
retf
or
jbe
push
sub
xchg
pop
dec
icebp
out
into
fcom
or
loope
or
mov
jbe
fisubr
xchg
addr16
shl
add
les
cmps
hlt
sub
pop
lods
fisub
test
pushf
and
adc
pop
cmps
lock
dec
movs
inc
(bad)
cld
mov
lahf
lea
test
push
cdq
pop
and
sbb
adc
pop
daa
add
test
or
adc
push
mov
jbe
mov
xchg
xchg
lahf
mov
jecxz
int3
push
shl
xchg
rol
xor
es
or
and
sbb
inc
or
pop
cmc
or
push
pop
repnz
out
xchg
xor
or
dec
mov
mov
lea
dec
pusha
adc
stos
mov
pop
adc
popf
sar
adc
push
push
cmp
test
or
sub
out
aad
fcomp
or
pop
cmps
jmp
mov
inc
dec
pushf
pusha
sub
push
out
fwait
and
adc
stos
call
dec
dec
adc
out
lods
pusha
int
cmp
sub
je
sub
test
pop
push
jmp
mov
jbe
test
ror
dec
add
add
mov
cmp
xor
pop
iret
retf
sbb
loope
(bad)
jmp
jne
ret
mov
int
jle
(bad)
and
pxor
stos
dec
enter
aad
fs
popa
inc
lock
push
pop
retf
xor
mov
sbb
loop
fnstcw
jge
xor
sbb
add
sbb
out
adc
cs
add
dec
jg
aas
nop
pop
and
or
fstp
cmp
cmc
jbe
into
add
cmp
rcr
pop
cmp
push
cmp
test
push
dec
sub
popa
in
or
sahf
(bad)
daa
cli
(bad)
daa
add
xor
jecxz
(bad)
fcomp
nop
inc
(bad)
lea
dec
xchg
xchg
xor
(bad)
jnp
jmp
sbb
or
push
mov
and
cld
add
jmp
(bad)
inc
jmp
jle
mov
enter
cmc
mov
mov
test
push
shr
cmp
and
int
cmp
sbb
(bad)
movs
cmp
bound
into
and
jmp
mov
aad
call
aas
push
ins
mov
add
add
mov
pop
movs
scas
inc
enter
sub
cmp
cmps
adc
or
ins
in
push
cmps
xor
inc
sub
adc
jp
jne
mov
ins
sub
add
add
cli
leave
mov
cmp
nop
in
dec
mov
sub
xlat
pop
inc
or
(bad)
cld
loopne
loopne
sub
add
ret
mov
mov
mov
dec
bound
jle
lods
mov
mov
mov
mov
mov
adc
gs
cmp
jns
push
in
jno
mov
(bad)
iret
aaa
adc
fwait
inc
and
clc
lods
rcl
test
jg
sub
cmp
push
nop
jb
jp
mov
ja
jb
es
adc
dec
lahf
sub
shl
mov
ret
loopne
int
push
and
outs
mov
cmp
add
in
(bad)
sbb
jmp
cmp
pop
xchg
sub
mov
fld
fcom
jbe
std
xchg
adc
inc
pop
adc
dec
stos
dec
repz
out
inc
imul
pop
call
jmp
mov
or
sbb
mov
or
ja
popf
adc
pop
xor
xchg
pop
daa
sbb
stos
ficomp
stc
push
aad
mov
sti
inc
(bad)
jmp
dec
jp
inc
imul
(bad)
dec
adc
add
add
out
adc
mov
ss
gs
icebp
cli
retf
sub
aad
xchg
jmp
int
fs
push
fst
adc
push
adc
lea
jp
popa
xchg
call
rol
cli
xor
xchg
mov
data16
ss
dec
sbb
adc
xor
inc
sbb
das
test
and
xchg
jb
sar
pop
xor
dec
ss
rcl
or
jbe
call
test
mov
cmp
jbe
xor
push
mov
sbb
mov
add
movs
inc
sbb
jb
jg
cmps
cmp
daa
leave
jmp
popa
leave
into
adc
mov
shl
xor
nop
pop
or
sbb
repz
into
pop
xchg
jne
sbb
in
ret
or
xchg
cld
(bad)
push
cli
sub
fstp
mov
movs
ins
or
sub
pop
imul
mov
aas
or
loopne
call
imul
push
jb
lock
xor
popa
mov
mov
sub
add
pop
pop
daa
mov
push
jbe
loopne
pop
sub
jbe
lods
adc
xchg
pop
inc
jl
inc
fwait
xchg
lods
aas
ins
add
jmp
es
loop
dec
push
mov
jne
dec
pop
enter
les
pop
push
pop
mov
mov
fstp
and
stc
mov
push
xchg
aad
or
inc
xor
xchg
retf
out
xchg
in
jno
retf
mov
(bad)
nop
push
std
loope
je
rcl
cli
enter
push
xchg
jg
in
add
call
cdq
pop
jp
ins
shr
in
add
mov
mov
cs
push
mov
gs
retf
int
push
sbb
aam
icebp
mov
bnd
sete
xor
(bad)
enter
pop
jb
out
adc
out
hlt
mov
add
rcr
push
es
call
nop
ret
cwde
sub
gs
dec
or
jne
and
fbld
(bad)
(bad)
sbb
cmovne
cdq
pop
xchg
xchg
xchg
sti
mov
xor
rol
mov
push
fcom
sbb
fdiv
or
cs
fsubr
scas
ins
retf
mov
js
sub
pop
push
inc
xlat
xchg
inc
div
mov
adc
jne
lahf
inc
adc
sub
xchg
clc
mov
shl
fwait
(bad)
cs
inc
jbe
jmp
dec
mov
mov
aam
push
sub
jl
adc
in
pop
mov
push
repz
loope
or
lea
xchg
push
xchg
xchg
aaa
xor
clc
push
retf
xchg
inc
mov
pop
mov
sbb
test
mov
mov
sub
dec
push
fbld
lock
fcomp
push
mov
rcr
sbb
sahf
in
jae
cld
lock
loopne
fwait
sbb
jb
sbb
cmp
iret
inc
mov
loope
mov
jae
cdq
mov
or
xor
icebp
dec
mov
mov
call
xchg
mov
dec
xor
xchg
and
pop
sbb
sbb
out
sub
in
mov
ins
mov
icebp
jbe
(bad)
cli
imul
add
xor
dec
nop
mov
pop
movs
or
adc
pop
cmp
test
ds
ret
mov
fs
pop
fwait
cmc
sbb
pop
es
cmp
mov
cmp
rcl
cmps
outs
arpl
sbb
mov
jecxz
movs
fwait
mov
push
push
inc
mov
fild
xchg
jmp
out
pop
aad
add
fs
cdq
dec
jmp
add
fmul
jmp
inc
popa
mov
inc
add
push
retf
sar
sub
nop
mov
mov
stos
jbe
sbb
outs
mov
leave
sar
or
int3
imul
inc
or
push
jne
data16
sub
jno
cs
push
inc
outs
popf
loopne
mov
out
xchg
adc
call
push
cmp
bound
pop
mov
test
xor
(bad)
and
stc
xor
jle
scas
retf
mov
js
inc
loopne
in
fsubr
es
sub
int3
scas
sbb
and
sub
inc
jmp
jbe
push
fwait
adc
and
loopne
push
sub
jmp
mov
mov
ss
rol
cli
and
sub
out
cmp
pop
push
cld
dec
dec
mov
mov
dec
fs
mov
es
fdiv
dec
gs
(bad)
mov
mov
lods
pop
mov
fs
push
mov
cmp
shl
pusha
js
xor
push
push
dec
jno
leave
mov
inc
outs
popf
mov
push
inc
mov
add
push
push
cdq
xchg
out
xor
sar
lods
push
jg
ja
mov
pop
sbb
pop
sub
nop
cmps
idiv
(bad)
jge
jle
mov
adc
jl
jns
data16
mov
add
sar
xlat
pop
cmp
loope
jp
into
fcomp
push
pop
fmul
inc
popa
pop
xchg
pop
pop
mov
in
dec
jmp
mov
sar
sub
mov
cmp
xchg
out
mov
xor
mov
mov
adc
pop
dec
add
mov
push
pop
aas
cmp
in
jns
sbb
xor
clc
loop
stc
cld
or
mov
arpl
mov
cmp
inc
jae
xchg
cli
xlat
adc
add
push
cmp
mov
jecxz
sub
jnp
mov
jns
shl
push
push
adc
addr16
xchg
out
or
jmp
mov
jmp
loope
dec
popa
or
dec
adc
shl
fisubr
sub
aam
inc
(bad)
ins
lea
sbb
fwait
mov
repnz
jecxz
sahf
lods
out
(bad)
jmp
cdq
mov
sub
ins
mov
int
pop
jne
mov
jno
fcomp
push
push
out
in
shl
push
fwait
cmp
xchg
ins
outs
push
loop
das
inc
jnp
cmp
dec
lock
lods
xchg
add
add
inc
and
retf
sub
std
push
jp
sbb
int3
mov
inc
(bad)
mov
jae
scas
stos
mov
push
stc
or
cld
xor
out
cmps
out
xor
mov
pop
mov
repz
xlat
fstp
adc
inc
mov
or
adc
cmps
xchg
std
xor
push
test
cmp
not
sbb
jbe
sbb
ja
inc
pop
daa
xchg
in
fsub
push
pop
ins
and
mov
xchg
lds
mov
pcmpgtd
sub
pusha
inc
pop
push
retf
fs
test
loopne
ds
push
jae
jb
data16
inc
cmp
jle
mov
enter
cld
pop
dec
hlt
ja
add
xchg
enterw
xchg
movs
mov
inc
in
addr16
mov
mov
add
scas
mov
mov
pop
(bad)
jle
adc
cmp
adc
xchg
retf
jnp
and
ins
iret
repz
jbe
sbb
mov
mov
pop
outs
xor
popf
shl
inc
scas
cmp
imul
(bad)
add
jle
xor
mov
das
and
cmp
call
cld
mov
or
push
mov
pop
pop
mov
jle
inc
adc
pop
cli
hlt
sub
adc
cmp
dec
shl
pop
jmp
add
xchg
and
mov
cmp
jmp
call
sbb
jp
fst
fdivr
or
rcr
iret
adc
ins
and
lods
adc
adc
and
push
sbb
shl
gs
sbb
pop
dec
ja
pop
and
adc
sahf
mov
mov
xor
daa
pop
adc
xchg
sti
movs
inc
loopne
sbb
lea
cmp
leave
mov
aas
int3
push
lahf
ret
inc
lock
jne
es
pusha
add
aad
fisttp
jne
in
and
cmp
daa
sbb
adc
mov
and
pop
add
mov
cmp
das
les
in
xor
mov
cld
cmc
and
mov
lods
mov
jecxz
js
mov
pushf
(bad)
lods
xchg
ror
or
ret
dec
(bad)
int
and
cmps
push
jne
jnp
sub
daa
and
(bad)
mov
xor
retf
inc
jne
jnp
in
cmp
out
xor
(bad)
test
sbb
fwait
adc
add
repz
cli
ins
rcr
add
mov
fs
sub
inc
fbld
lock
fwait
(bad)
je
inc
out
mov
int
(bad)
arpl
and
jle
scas
sub
add
push
retf
lods
cmp
xlat
jl
cs
dec
dec
or
mov
aaa
adc
rcr
jo
push
call
xor
sbb
int
jns
(bad)
scas
xchg
fnstcw
push
pop
jbe
jp
dec
cmp
xchg
jle
dec
movs
loope
add
test
pushf
out
loope
fidivr
retf
das
lods
and
or
(bad)
inc
loopne
push
cwde
(bad)
(bad)
mov
cli
popf
pusha
imul
loopne
push
add
pop
sub
push
mov
jge
retf
sub
cmp
popa
outs
xor
cs
imul
arpl
jecxz
mov
data16
test
ret
adc
pop
adc
xchg
fldenv
sbb
push
push
shr
inc
sub
jbe
xchg
push
es
bound
iret
mov
and
adc
ja
push
aaa
jge
xchg
mov
cwde
push
sbb
enter
and
mov
or
nop
and
jne
or
sbb
into
lock
mov
leave
rol
jmp
mov
pop
mov
pusha
jne
bnd
lods
mov
sub
add
sbb
dec
xlat
test
das
pop
jg
arpl
or
jnp
ss
xchg
jne
fist
add
ror
pop
xchg
cmp
or
dec
lds
inc
loope
rol
das
adc
add
sar
pop
jb
xchg
int3
cmp
or
add
and
sbb
loop
push
std
inc
das
jp
adc
add
lea
jbe
stos
into
inc
ud1
icebp
out
xor
movs
push
out
lods
mov
aam
ret
jns
stc
jle
mov
popa
movs
inc
mov
in
xor
push
das
ror
xchg
ss
fcomip
mov
dec
js
test
push
in
iret
fistp
cld
rol
lahf
jmp
movlps
mov
or
adc
xor
pop
add
leave
or
add
jnp
inc
sahf
inc
pop
add
pushf
fwait
daa
mov
or
cli
jg
xchg
popa
fisttp
not
stos
xchg
mov
adc
js
ret
test
shl
fadd
pop
pop
pop
push
add
stc
inc
pop
and
dec
cmp
sub
jns
imul
mov
pop
adc
jl
test
or
mov
xchg
xor
out
in
sti
pop
inc
ss
lods
jns
mov
xchg
dec
mov
sbb
cmps
xor
movs
xor
adc
cmc
sbb
dec
mov
aas
push
jp
fwait
rcl
sbb
out
mov
pop
jle
adc
cld
push
das
aam
and
and
cld
adc
std
push
push
es
(bad)
mov
in
cmp
out
adc
lock
lock
or
cmc
push
sar
mov
aaa
outs
daa
push
fidiv
xchg
bnd
test
ficom
sbb
push
call
ror
lahf
sub
sub
push
clc
xor
inc
jno
(bad)
out
jns
(bad)
cmp
cwde
bound
fidiv
jl
jne
dec
test
and
cmps
xor
pushf
xchg
add
cdq
xchg
mov
pop
and
sbb
or
std
xchg
test
clc
cmp
sar
pop
mov
retf
push
adc
fnstenv
xchg
out
clc
xchg
and
add
mov
shr
sub
je
xchg
jb
aaa
into
xor
push
(bad)
in
sub
mov
mov
jp
push
lds
repnz
pushf
jge
cld
pop
dec
outs
or
mov
fstp
clc
adc
push
push
fstp
loop
retf
jae
dec
sbb
cdq
call
cld
mov
lods
push
and
scas
daa
push
sti
shl
xlat
loope
sbb
and
fmul
jmp
dec
int
ins
jg
inc
movs
mov
jmp
sbb
repnz
mov
xor
aam
adc
hlt
or
pop
mov
jmp
clc
cdq
fidiv
div
add
cmc
xor
je
xchg
test
es
fstp
xchg
mov
mov
add
lahf
movs
jbe
pop
mov
inc
fidiv
xor
dec
dec
xor
not
in
mov
add
cmps
or
sub
xchg
xor
test
push
inc
lock
test
cmp
mov
sbb
mov
icebp
pop
fidiv
fistp
and
inc
dec
in
or
mov
add
mov
adc
imul
mov
push
or
in
imul
xor
sub
adc
add
ss
adc
add
mov
int
push
cli
jno
lods
lods
mov
call
xchg
scas
loope
out
in
dec
cmp
push
adc
scas
mov
jns
mov
cmp
fld
iret
add
add
pop
add
inc
mov
mov
imul
push
aam
mov
push
rcr
je
cld
ret
jge
sub
(bad)
and
(bad)
jnp
ficom
repnz
or
loop
add
xchg
mov
mov
or
sbb
jmp
cmp
sub
jecxz
out
mov
add
mov
dec
inc
mov
sbb
ret
in
add
clc
and
lock
inc
jl
mov
iret
mov
pop
mov
sbb
(bad)
sub
ds
and
dec
jbe
shr
mov
sbb
inc
popf
dec
test
mov
ins
dec
out
fild
ficomp
into
pop
and
push
scas
(bad)
push
xchg
sub
push
sub
fwait
shl
rol
xchg
dec
sbb
in
repz
fs
add
push
in
jp
sbb
ds
or
mov
mov
sub
xor
xchg
pop
nop
popa
data16
imul
mov
push
pop
shr
mov
daa
sub
(bad)
mov
ret
pop
gs
cmps
ret
out
rcr
xor
sbb
(bad)
push
and
mov
js
xchg
mov
and
ret
push
pusha
in
ret
or
mov
aaa
sbb
popf
cli
daa
xchg
mov
div
inc
or
out
stos
pushf
ins
mov
and
ret
xchg
test
in
(bad)
lock
or
add
sbb
in
in
or
pop
jne
idiv
and
out
mov
mov
mov
mov
inc
or
cmp
mov
jge
push
pushaw
sbb
test
push
add
(bad)
imul
and
mov
mul
sahf
jns
mov
jae
shr
push
nop
pop
in
loop
fcomi
imul
in
or
push
jmp
mov
dec
xchg
out
xor
push
adc
cli
mov
bound
std
cmp
sub
je
push
loope
retf
pop
call
fisub
xchg
inc
inc
jns
dec
lahf
and
ja
pop
adc
sub
gs
and
popa
jae
nop
(bad)
adc
(bad)
sti
cmp
xor
loopne
daa
mov
mov
inc
pop
dec
scas
out
pusha
out
mov
mov
cmp
mov
sbb
and
imul
cmps
ss
dec
sub
and
ret
sbb
data16
jle
dec
repz
leave
mov
mov
out
adc
add
lds
mov
imul
into
cmp
push
xchg
leave
jo
mov
fisttp
repz
xchg
pop
ja
loop
pop
pop
(bad)
sbb
push
mov
jl
arpl
mov
and
adc
test
mov
in
jae
and
fs
add
mov
and
sub
loop
pop
test
mov
loopne
stos
adc
adc
jge
shr
or
stc
sti
pop
test
test
rcr
int
or
lahf
jb
fwait
jg
cmp
adc
and
ss
add
aaa
outs
les
retw
mov
loopne
add
lds
adc
xchg
sar
cmp
hlt
stc
lods
iret
movs
pushf
cmp
adc
adc
cmc
(bad)
in
xor
fcom
xchg
sbb
out
push
jge
jne
outs
rol
push
sbb
(bad)
std
imul
sbb
jmp
neg
retf
daa
icebp
or
or
sar
test
adc
mov
das
dec
push
pop
mov
add
and
push
xchg
add
mov
not
xchg
lahf
fld
retf
mov
repz
jns
add
inc
mov
inc
fcmovnb
fist
push
jp
enter
lds
fisttp
fs
mov
jg
lea
add
repz
rcl
push
loope
inc
pop
data16
cwde
mov
addr16
adc
ja
mov
jo
repz
fwait
sub
je
jg
call
cwde
or
jmp
rol
movs
arpl
jmp
lahf
and
cmps
push
jnp
adc
test
nop
neg
inc
dec
sti
dec
xor
test
push
and
inc
xchg
dec
jg
lods
jo
fs
loop
or
sbb
push
dec
cmp
push
xor
xchg
test
retf
sub
(bad)
mov
jb
inc
pusha
ja
xchg
or
out
aas
inc
push
or
cmps
mov
imul
xchg
fwait
mov
je
push
(bad)
fistp
lods
sub
and
das
mov
mov
xor
int3
or
cmp
mov
cmp
push
in
mov
mov
int3
jg
sahf
xor
aad
int
sbb
xor
and
inc
pop
pop
add
call
pop
leave
and
in
test
(bad)
adc
rol
dec
test
push
pop
arpl
inc
add
aas
scas
add
outs
rcl
popa
mov
repz
inc
jne
ret
out
gs
(bad)
dec
ins
jno
ds
rol
xchg
enter
mov
bound
adc
lods
movs
add
popa
mov
mov
add
push
jle
fstp
push
ror
jbe
les
pop
mov
lock
jmp
sbb
jne
dec
fdivr
cli
xor
sub
mov
repnz
neg
out
mov
std
fwait
add
push
jmp
fsubr
in
test
mov
add
stos
sub
mov
push
ins
sbb
jae
scas
fistp
(bad)
pop
jmp
push
je
mov
scas
ss
stos
xor
push
(bad)
jnp
test
cld
push
mov
(bad)
and
sub
movhps
fisub
mov
push
mov
ds
xchg
add
cmp
lea
retf
dec
fldcw
mov
jbe
adc
iret
xor
sub
cmp
outs
or
sub
imul
and
or
test
jmp
movs
mov
retf
std
loop
aas
jecxz
adc
mul
scas
mov
fimul
js
gs
cmp
pusha
mov
mov
inc
sbb
xchg
js
mov
leave
and
push
js
mov
(bad)
sbb
pop
inc
and
cmc
push
pop
cmp
lods
fsub
fst
sbb
clc
pusha
ja
xor
jmp
jge
cli
mov
xor
or
inc
mov
pop
test
add
call
sar
ins
in
sbb
fld
test
sti
sub
sub
sbb
cdq
cli
ds
sbb
pop
movs
mov
lahf
adc
pop
dec
or
lods
loope
xor
mov
ja
sub
pop
push
adc
adc
rcl
sub
in
inc
icebp
fldcw
sub
mov
xchg
ins
repnz
fbstp
ret
mov
pop
data16
in
lods
xchg
push
inc
enter
adc
jo
sti
inc
pop
mov
dec
scas
cmps
std
pushf
fadd
push
movs
inc
nop
icebp
mov
add
xchg
dec
mov
adc
jne
aas
nop
scas
sbb
mov
mov
iret
and
or
cdq
add
inc
or
cmp
mov
mov
movs
mov
and
mov
jp
(bad)
sbb
adc
xchg
mov
push
aas
push
and
sbb
retf
in
aam
sbb
jno
mov
test
je
stos
fs
fdiv
(bad)
or
jmp
mov
iret
or
mov
ins
outs
dec
test
shl
imul
jle
pop
pop
mov
pop
push
retf
push
ror
aas
mov
add
dec
dec
push
out
shl
cmp
push
inc
adc
adc
clc
push
xchg
movs
push
test
pop
in
ds
(bad)
retf
adc
jo
leave
sbb
mov
inc
gs
cmp
(bad)
fisub
adc
in
test
mov
xor
adc
xchg
jmp
ds
call
or
dec
stc
in
jmp
inc
fistp
mov
sbb
pop
dec
fs
jmp
aas
ds
sti
and
xchg
pop
aad
(bad)
loop
(bad)
in
inc
xchg
pop
sub
movs
(bad)
clc
mov
nop
mov
mov
inc
cwde
jo
push
movs
retf
mov
sub
ds
or
sbb
mov
fdiv
aaa
cmp
cld
cdq
add
les
fistp
xchg
sbb
lods
mov
push
dec
(bad)
(bad)
mov
les
and
imul
sub
test
stos
sub
xor
mov
xchg
retf
nop
ret
and
add
and
cmc
pop
mov
lock
bound
xchg
inc
xor
add
ret
or
clc
fisubr
loope
test
cmp
sti
int
mov
mov
mov
cmp
das
cmp
js
jbe
xchg
mov
in
sub
ret
test
and
or
(bad)
fcom
inc
dec
test
pop
jne
adc
adc
mov
dec
and
or
jb
test
or
fisttp
aaa
mul
test
mov
sahf
mov
retf
pop
enter
pusha
xlat
scas
cs
sar
jne
xor
cmps
stc
cdq
mov
mov
cld
(bad)
jg
and
push
mov
adc
minps
jg
fiadd
retf
adc
jno
(bad)
sbb
inc
imul
test
loopne
dec
cmp
and
xchg
(bad)
sub
aam
jge
mov
in
add
dec
cwde
or
jae
jecxz
fistp
fistp
and
pop
(bad)
and
out
out
jmp
cwde
adc
or
bound
mov
pop
push
enter
xchg
mov
pop
push
add
adc
pop
adc
sub
aad
ror
dec
and
inc
call
dec
in
sub
ds
add
fwait
ret
je
jecxz
sub
xchg
xchg
dec
daa
and
into
pop
mov
stos
or
cmps
ins
sub
xor
xchg
fnstenv
and
nop
push
outs
add
jecxz
sbb
jl
lea
js
jbe
popa
mov
imul
stc
loopne
xchg
pandn
and
fsubrp
out
mov
xor
out
shr
add
mov
lock
xchg
mov
(bad)
in
aas
fidiv
jmp
jecxz
loopne
and
or
inc
fs
ss
cmc
cmps
push
and
xchg
pop
xchg
mov
mov
cmps
push
jle
add
lock
xchg
call
test
(bad)
and
scas
cmp
lahf
bound
or
adc
xchg
maskmovq
mul
xchg
lds
sub
add
ffreep
movs
mov
jnp
leave
in
in
adc
and
call
pushf
hlt
push
mov
imul
jns
mov
aas
cwde
add
dec
test
shl
mov
mov
mov
jg
sub
and
or
mov
mov
or
mov
mov
lods
adc
popa
and
imul
mov
xor
stos
les
(bad)
lock
sub
or
xchg
aam
mov
aaa
mov
fs
or
add
adc
pop
aas
adc
test
nop
ficom
mov
lock
cmps
outs
mov
mov
or
mov
mov
jmp
mov
xor
jb
fistp
repnz
inc
fnstsw
test
xor
inc
sub
push
sbb
fdiv
sbb
icebp
imul
jecxz
sahf
xchg
gs
mov
aad
mov
pusha
ins
jb
push
in
and
les
cmp
test
jnp
xchg
stos
popf
jle
fs
fist
jbe
les
push
add
or
cmp
add
pop
xchg
sub
jo
xor
pop
aaa
dec
lahf
mov
in
cmp
and
scas
popf
mov
retf
cwde
(bad)
into
add
inc
inc
xchg
push
out
jb
cdq
scas
push
(bad)
xor
xchg
je
cmp
and
movs
shl
fistp
mov
or
pop
fist
adc
clc
add
je
inc
movs
jb
js
cld
add
push
inc
lock
push
jo
jb
dec
ret
test
pop
inc
cmps
fcom
lock
imul
loope
add
push
das
aaa
or
retf
outs
and
(bad)
mov
(bad)
mov
and
lods
jl
mov
dec
shr
ins
pop
mov
movs
(bad)
mov
loopne
jns
lods
retf
cld
pop
nop
jae
repz
mov
imul
ss
xchg
jg
mov
and
adc
jmp
rcl
or
mov
movs
cdq
(bad)
in
shl
(bad)
and
bound
push
jmp
jnp
pop
cli
push
mov
xchg
fld
cld
and
sbb
fwait
cld
ins
movs
hlt
push
and
fmul
sahf
lea
scas
cmp
(bad)
cs
or
push
push
and
hlt
push
pop
aad
lods
push
push
add
cmp
inc
mov
mov
loop
xchg
jge
stos
retf
or
ja
in
pop
js
mov
mov
push
aad
push
mov
inc
and
lds
enter
test
rcr
pop
stos
(bad)
arpl
pop
cli
repz
lds
fbld
mov
push
inc
icebp
aaa
add
pop
xchg
jmp
dec
ret
or
inc
jns
or
adc
xchg
mov
adc
adc
gs
retf
push
jno
xor
cmp
push
daa
pop
mov
dec
mov
jae
and
cmp
sbb
and
lock
test
xor
dec
aam
jl
add
rol
jns
clc
adc
pop
fld
popf
inc
mov
rcr
mov
movs
loop
shl
(bad)
sub
jge
cmp
shl
cmps
aad
imul
xor
xor
and
hlt
inc
icebp
into
jle
xor
shl
movs
mov
test
lahf
jmp
int3
mov
xchg
push
xchg
out
pop
std
rcr
loope
inc
add
xchg
ins
sbb
std
jg
outs
int
sbb
dec
fcom
pop
push
mov
in
sbb
mov
mov
push
xchg
addr16
js
sbb
or
sub
stos
bound
xchg
adc
movs
inc
out
(bad)
push
xchg
lods
sub
mov
stos
outs
and
or
outs
mov
cdq
mov
xor
jg
mov
cld
cmp
inc
mov
jo
cdq
cmp
add
sub
jnp
mov
lods
mov
sbb
xchg
sub
mov
(bad)
aaa
jo
sub
ja
pop
lahf
xor
test
xchg
out
add
mov
mov
adc
mov
and
fimul
movs
and
jle
dec
retf
adc
out
inc
or
icebp
cld
or
hlt
call
lds
add
ret
add
mov
(bad)
inc
leave
clc
pop
mov
sub
dec
cmp
jmp
and
imul
dec
arpl
jno
jne
shl
mov
or
and
pop
mov
and
inc
add
fidivr
lock
ficom
test
(bad)
mov
loope
imul
aad
in
ins
jge
popa
mov
cmp
call
cmp
icebp
scas
cmp
(bad)
ja
outs
add
add
mov
cmp
or
jl
or
mov
pop
sbb
cmc
cmp
jecxz
or
jnp
fnstcw
or
add
xor
or
cmp
add
or
(bad)
cmc
xor
std
xchg
mov
jl
xor
xlat
sbb
add
repz
mov
je
xchg
out
pop
xlat
jns
(bad)
les
adc
and
repnz
jo
mov
adc
clc
enter
push
nop
or
ret
xchg
ins
mov
inc
stos
adc
jl
movs
mov
rcl
xor
dec
cmova
pop
cmp
fld
sahf
ror
sub
fcomip
push
ja
adc
xchg
outs
fstp
out
aas
adc
jmp
cmp
(bad)
xchg
push
push
das
fistp
test
cmp
dec
fistp
xchg
popa
les
push
sub
in
push
sahf
push
mov
add
mov
stos
adc
and
cmp
or
and
fnstenv
popf
sub
es
push
sbb
mov
mul
jge
(bad)
xor
aas
les
cdq
cdq
scas
aaa
fbstp
ja
rol
adc
add
and
scas
jl
repnz
add
movs
ret
add
jns
push
cmc
std
cwde
dec
fwait
mov
call
mov
jecxz
loopne
pop
jns
in
and
not
xor
sbb
call
sbb
adc
shr
jb
adc
dec
inc
cli
lds
pop
fs
and
push
add
cmp
mov
rcl
pop
data16
lods
push
cmp
adc
cdq
sbb
retf
push
mov
(bad)
jmp
inc
inc
js
mov
sbb
(bad)
fucomi
retf
sbb
pop
out
jmp
xchg
daa
mov
add
pop
push
call
in
js
cmp
lods
or
xchg
or
mov
sub
add
into
xchg
jne
out
call
sbb
sahf
add
push
cmps
push
cmp
mov
bnd
mov
lods
pop
(bad)
sub
push
dec
jo
idiv
mov
mov
addr16
cld
or
jmp
mov
and
shr
out
ret
bound
call
out
or
fisub
icebp
sbb
inc
push
lds
pop
xchg
jns
icebp
call
jl
in
rcr
cs
js
inc
ja
stc
xchg
push
push
mov
add
aas
into
cmp
dec
lods
into
push
and
push
dec
add
gs
xchg
movs
jg
and
mov
cmp
cmp
addr16
mov
push
adc
cli
js
mov
fimul
sar
or
cld
xor
xchg
lock
sub
sbb
adc
fsubp
test
sahf
dec
pop
mov
cli
mov
out
push
in
lods
repnz
ins
cmp
inc
and
cmps
xchg
fs
sahf
stos
in
fldcw
mov
mov
loop
xchg
(bad)
xor
out
pop
ret
sbb
push
push
mov
xchg
jmp
sbb
fs
push
in
dec
or
inc
gs
mov
(bad)
xlat
sbb
and
mov
movs
inc
fbstp
iret
and
int
inc
push
fbld
adc
cmp
push
push
mov
jl
pop
add
fucomp
mov
mov
das
gs
cmp
ss
scas
imul
adc
ror
xchg
pop
test
test
(bad)
mov
shr
inc
fucomi
je
fcompp
push
sbb
dec
or
xor
fcmovnb
add
inc
stos
mov
xchg
frstor
mov
jle
in
dec
cmp
add
imul
out
(bad)
fdivr
and
adc
(bad)
cmp
pusha
mov
addr16
cmp
or
mov
pop
dec
xchg
leave
mov
pop
jmp
inc
add
xor
int3
stos
mov
loope
sbb
fadd
hlt
fcom
mov
inc
inc
cmp
in
mov
or
jbe
sbb
rcr
mov
call
aas
pop
inc
popf
es
and
jno
jbe
inc
push
pop
jbe
jp
inc
cli
mov
out
sbb
push
and
mov
dec
jl
clc
es
ret
mov
jle
loop
fbld
jmp
push
movs
mov
addr16
jp
leave
int
mov
(bad)
mov
mov
sbb
je
and
xor
(bad)
and
adc
mov
mov
popf
daa
test
pop
ja
pop
mov
add
jge
push
imul
add
push
fwait
sub
aam
sub
inc
cmp
xchg
in
sub
arpl
mov
retf
fst
gs
mov
mov
fwait
(bad)
push
fisubr
pop
push
or
dec
loopne
stc
ror
fimul
add
jp
dec
leave
xchg
aam
int3
mov
(bad)
fcmovbe
xor
or
mul
adc
das
or
or
shl
mov
adc
ret
push
sbb
sbb
mov
dec
sub
popa
inc
and
sub
pop
ds
icebp
cmp
daa
lahf
ins
loop
add
sbb
pop
or
mov
adc
call
push
push
lds
xchg
jno
ss
sub
mov
sahf
mov
(bad)
cmps
(bad)
retf
sub
adc
adc
in
mov
addr16
sbb
adc
outs
sub
repnz
mov
pop
xchg
(bad)
cmps
call
fistp
jae
retf
movs
ret
fild
sub
pop
cmps
shl
mul
or
(bad)
or
cmp
mov
mov
or
inc
sub
sbb
fs
adc
xor
ja
xchg
adc
or
(bad)
in
fld
sub
mov
dec
ffree
dec
pminsw
push
div
call
inc
xlat
mov
retf
int3
lea
xchg
mov
sti
jp
loopne
les
sbb
scas
or
mov
push
cld
and
push
stos
mov
dec
cmp
jmp
outs
push
sahf
xchg
cmp
or
lods
sbb
push
fisttp
rcl
int3
and
xchg
cs
fisttp
sahf
cmp
out
pop
mov
push
mov
popf
int3
and
jge
or
push
es
aas
add
dec
mov
jecxz
inc
js
push
(bad)
in
dec
sti
or
dec
fs
popa
mov
test
mov
adc
adc
mov
dec
xchg
aam
jl
movs
sahf
aas
ret
mov
push
jbe
shr
jmp
test
(bad)
xchg
mov
cld
jns
push
xchg
nop
or
jp
sbb
(bad)
and
fwait
in
inc
dec
nop
lahf
dec
pop
add
add
outs
xor
jbe
dec
mov
inc
xchg
leave
mov
ja
ja
ins
sbb
xor
mov
sub
retf
inc
and
dec
mov
push
jge
daa
mov
out
sbb
popa
xor
adc
cs
sbb
jmp
push
push
pop
js
adc
dec
cmps
enter
(bad)
pop
add
and
fist
sub
rol
xchg
adc
ficomp
stos
pop
fwait
xor
mov
add
mov
pop
cmp
jno
stc
and
(bad)
sub
sahf
out
js
(bad)
sub
test
mov
adc
cmp
lahf
adc
cmp
pop
sbb
arpl
xor
inc
pushf
cmp
mov
(bad)
and
mov
jg
out
dec
popf
outs
xchg
sbb
jo
outs
es
dec
pop
nop
mov
ss
(bad)
push
inc
and
data16
ss
ret
test
imul
inc
scas
mov
mov
repz
add
pop
int3
pop
fsub
shl
push
sbb
mov
jae
std
mov
test
xchg
add
mov
arpl
mov
ret
sub
or
push
lahf
jge
test
sub
scas
fwait
ins
ret
repnz
jg
xor
ror
lods
cmp
sbb
scas
bound
aam
dec
adc
gs
out
and
sub
inc
das
mov
inc
and
inc
cmps
cs
out
mov
mov
jo
cdq
dec
push
cs
sahf
jne
cwde
retf
jecxz
xchg
pop
sbb
mov
minps
adc
inc
loope
and
push
mov
push
jecxz
int
stos
jne
call
inc
out
add
fs
pop
scas
call
mov
sbb
aaa
adc
mov
rcr
scas
iret
cmc
idiv
and
shl
test
fdivr
lods
out
sub
lds
movs
pop
dec
stos
hlt
push
lods
dec
outs
imul
lock
mov
fucom
cmp
or
mov
inc
popa
in
fst
xor
sbb
das
mov
lahf
rol
jle
call
std
loope
mov
into
ja
cmc
out
ss
sbb
nop
in
sub
xlat
pop
js
sbb
add
jmp
and
out
xchg
pop
mov
cmp
inc
pop
daa
test
imul
pop
in
mov
push
pop
jmp
mov
sbb
lods
inc
mov
cld
dec
fldcw
(bad)
and
jp
into
dec
sbb
mov
xor
xor
sahf
movs
inc
push
mov
mov
aam
sbb
jge
or
or
pop
add
mov
hlt
clc
test
out
ins
adc
or
xchg
cmp
test
(bad)
push
retf
hlt
add
pop
or
movs
pop
inc
or
movs
je
mov
push
jmp
pop
scas
repnz
or
cdq
sbb
lahf
jle
mov
imul
stos
and
mov
cs
push
add
push
mov
fisttp
mov
test
cmc
push
lahf
inc
mov
mov
(bad)
lea
test
or
es
popf
inc
enter
les
xlat
cmp
scas
ret
mov
cld
dec
int3
rcl
and
push
jb
mov
adc
aaa
pop
push
out
not
lds
or
mov
jmp
mov
nop
jne
dec
push
jb
push
sti
inc
shl
adc
or
add
mov
out
(bad)
adc
mov
xchg
jmp
mov
das
loopne
cs
(bad)
mov
fistp
and
test
call
sub
(bad)
xchg
scas
movs
xor
xchg
(bad)
sar
pop
out
push
xchg
inc
xchg
xor
call
adc
mov
mov
sub
fistp
pushf
and
cmps
shl
cmp
jns
popa
aas
gs
cmp
mov
ds
cdq
xor
(bad)
(bad)
fbld
fsub
aaa
mov
(bad)
inc
pushf
cmp
jmp
xchg
xchg
xchg
sub
dec
jns
jg
push
push
int
mov
adc
stos
or
or
or
test
aaa
js
dec
push
loopne
loop
in
jmp
cld
adc
push
in
jnp
in
jnp
std
and
mov
push
and
cs
hlt
sub
jbe
js
dec
movzx
xor
mov
add
mov
pop
jmp
retf
shl
jns
out
in
movs
adc
or
mov
sub
xchg
out
lods
xchg
dec
jmp
(bad)
push
or
sbb
in
xchg
xor
pop
ficom
pusha
cmps
sar
jo
and
(bad)
fcom
push
retf
xchg
(bad)
pushf
inc
cmp
push
sub
fcmovu
cwde
inc
mov
sub
movs
or
cld
mov
push
mov
xor
(bad)
mov
pop
or
out
sbb
mov
cmps
xchg
cld
fisttp
sbb
push
add
rol
stos
aas
xlat
mov
mov
(bad)
jmp
xchg
inc
sbb
mov
and
popa
add
ret
and
inc
sbb
rcr
jmp
cmp
aas
push
in
cld
cmps
jne
js
fild
jno
mov
mov
sbb
ins
jge
pop
xor
add
daa
in
popa
xlat
arpl
into
stos
das
cld
sbb
sub
fdivr
inc
jae
jns
sbb
mov
iret
cmp
outs
pop
mov
add
xor
add
add
scas
cmc
push
add
sbb
movs
imul
xchg
or
inc
push
or
xor
imul
inc
mov
(bad)
sub
ds
or
mov
cld
pop
or
jmp
mov
div
loopne
retf
lods
push
mov
test
xchg
out
adc
mov
mov
mov
push
data16
dec
scas
mov
ins
into
push
pop
mov
sub
push
inc
cmp
jo
fs
mov
sbb
push
jg
cdq
or
push
xor
hlt
fs
mov
jo
std
pop
push
aaa
mov
ret
aas
jmp
dec
and
sub
push
pop
lea
mov
call
mov
fistp
loope
pop
test
jg
dec
arpl
mov
iret
mov
and
mov
mov
movs
int3
dec
pop
pushf
push
push
mul
scas
daa
sub
inc
xor
fild
or
add
mov
lods
rcr
or
mov
fwait
adc
pusha
int
enter
aaa
cmp
and
adc
rcr
fnstsw
shr
pop
jns
mov
jmp
inc
mov
jne
jno
push
mov
inc
fcomi
pushf
sar
hlt
icebp
in
leave
imul
sbb
mov
rcr
jmp
push
addr16
and
test
retf
sar
jae
sub
jecxz
xor
mov
mov
pop
mov
rol
aam
mov
mov
pop
les
mov
push
or
jmp
add
adc
call
inc
lds
cdq
sbb
lods
lock
nop
add
fbld
push
shr
scas
cmp
and
lods
sub
pusha
jge
jle
jmp
or
jmp
fdivr
dec
and
add
jb
mov
into
jo
mov
mov
mov
pop
inc
push
cdq
jle
inc
leave
stos
push
lock
push
fcomi
push
test
fist
jb
inc
mov
adc
stc
inc
inc
add
inc
mov
scas
gs
retf
std
cmps
lods
and
leave
push
stos
pop
mov
pop
(bad)
sub
mov
inc
mov
in
sbb
or
sbb
xor
ja
inc
cmps
retf
aas
add
mov
std
cmp
lahf
cs
not
adc
mov
ret
lock
or
dec
or
cmp
lods
vmovss
aam
sbb
xor
push
lea
mov
rdmsr
jmp
xor
dec
loopne
dec
stos
fs
jle
xchg
pop
sub
cs
sub
call
sub
loopne
lock
mov
push
add
dec
add
jae
sub
stc
mov
retf
cmc
arpl
popa
xor
push
mov
xor
cmp
fidivr
out
fld
jno
loope
int
add
stos
sub
pop
push
mov
nop
cmp
pop
mov
in
push
js
mov
mov
sub
mov
das
(bad)
lea
mov
jmp
pop
imul
outs
sbb
popa
inc
mov
(bad)
push
dec
out
inc
or
(bad)
and
sbb
pop
pop
bound
pop
icebp
pop
pop
cmp
arpl
in
push
mov
jmp
add
adc
mov
sti
sub
test
pop
mov
arpl
es
cmp
(bad)
rcr
in
fld
xchg
popf
shl
pop
xor
dec
add
or
mov
aam
scas
lods
movs
cdq
cmps
popa
aaa
mov
and
push
pop
or
or
sub
outs
fcomp
fwait
jge
outs
cmp
xchg
add
ins
and
inc
xor
xlat
in
mov
outs
hlt
pop
mov
in
popa
xchg
jno
inc
adc
inc
push
lea
xor
cdq
mov
ins
out
push
jno
xlat
sub
adc
daa
out
or
mov
mov
pop
or
sub
xor
inc
(bad)
sahf
dec
cmps
into
inc
loopne
jge
pop
inc
xchg
jnp
xor
call
ret
rcl
jne
data16
movs
jle
in
pop
mov
mov
mov
cs
pop
push
xor
sbb
xor
(bad)
cmps
sbb
sub
ins
push
lock
xchg
cdq
stc
(bad)
loope
(bad)
retf
and
inc
aaa
and
xor
add
leave
mov
push
push
add
dec
dec
sbb
jno
repz
jmp
xchg
and
clc
test
adc
add
out
dec
movs
psubusw
cmp
mov
sti
mov
sar
or
mov
jl
fstp
or
stos
sub
retf
jo
out
dec
std
pop
ret
xlat
sahf
imul
jmp
loop
sbb
mov
in
jle
add
pop
into
out
fistp
jbe
mov
mov
inc
(bad)
xchg
sub
mov
int
sbb
jnp
imul
js
je
fisub
add
(bad)
push
dec
repz
mov
mov
in
and
mov
loope
inc
mov
mov
in
sbb
and
dec
das
int
out
jns
mov
gs
adc
mov
and
add
test
pusha
inc
sub
add
add
pop
mov
xchg
mov
leave
xchg
sar
mov
xlat
lds
sub
adc
pop
stos
mov
out
fiadd
push
scas
dec
dec
adc
movs
aas
mov
or
jp
mov
and
ds
scas
push
stc
jmp
sbb
add
mov
add
xor
adc
imul
jae
sub
or
mov
rol
pop
rol
dec
pusha
push
cwde
retf
mov
test
cmp
lock
inc
xchg
xlat
push
mov
mov
mov
icebp
aas
push
jb
adc
mov
mov
mov
dec
mov
jge
dec
div
sahf
mov
(bad)
into
mov
pop
aam
arpl
push
inc
inc
push
xchg
jne
jo
cmp
sub
jge
push
sbb
jnp
iret
adc
cmp
ins
(bad)
mov
iret
xor
(bad)
push
sub
enter
cmp
jnp
xor
jne
mov
push
pop
pop
jp
and
(bad)
loop
movs
mov
test
enter
aas
xor
fwait
sbb
mov
div
(bad)
call
aaa
push
or
cmps
loope
cli
sub
cmps
in
push
mov
les
mov
sub
xor
xchg
leave
lock
mov
mov
popf
sub
daa
lock
or
inc
mov
xor
cmp
lahf
popa
mov
push
leave
cmp
sub
mul
retf
dec
lds
cmp
jecxz
sub
out
push
jno
stos
xor
jecxz
cmp
sbb
sub
js
shl
mov
fstp
in
lds
jl
sbb
test
into
ja
push
cmp
into
dec
repnz
ins
or
mov
das
(bad)
cmps
daa
je
dec
inc
inc
ret
fcomp
pop
out
inc
adc
cmps
pop
test
jns
mov
cmps
push
aam
xor
pop
mov
outs
mov
repz
dec
xlat
add
data16
lahf
and
ss
and
aad
push
nop
xchg
add
dec
dec
lds
or
popa
cwde
sbb
dec
xor
pusha
jo
out
lock
pop
outs
lahf
push
cmp
ficom
dec
sbb
cmp
outs
sar
jne
and
jge
sbb
jb
sbb
fisubr
mov
je
sbb
or
mov
stc
in
loopne
cmp
adc
retf
inc
test
mov
repz
dec
and
jb
int3
jne
gs
sub
jp
sti
loopne
imul
int
sub
jmp
jbe
xor
fistp
mov
lock
lock
cmps
pop
cmp
push
mov
jne
rol
es
or
das
dec
movs
xchg
sbb
cli
fld
rcl
inc
jge
fidivr
aam
into
xchg
test
pop
pop
sub
mov
push
icebp
inc
test
push
sbb
xchg
pop
int
scas
and
xchg
mov
inc
mov
neg
push
shr
dec
pop
out
pop
es
sahf
data16
retf
push
push
xchg
retf
dec
adc
adc
ror
jmp
das
mov
stc
ja
xchg
cmp
loope
fucom
retf
mov
add
jno
dec
add
add
dec
xchg
ret
stc
and
shl
push
sbb
push
adc
or
xchg
jge
hlt
sub
sbb
shl
imul
mov
push
sbb
nop
ret
or
not
push
jo
ret
inc
inc
push
test
add
inc
cdq
and
jo
out
pop
(bad)
adc
xchg
jbe
push
and
fmulp
mov
cmp
mov
push
cmp
call
add
mov
xchg
in
shl
jle
pop
jecxz
shl
pop
push
fisubr
inc
pop
aad
iret
cli
xor
out
(bad)
xchg
push
jns
lahf
leave
fdivrp
jl
or
mov
mov
cmps
mov
imul
jg
pop
jge
hlt
je
shl
or
hlt
xlat
arpl
xchg
jmp
cdq
cdq
int
xor
(bad)
(bad)
jl
sbb
outs
jle
inc
jecxz
push
mov
out
pop
or
push
pop
pop
cmps
jno
pop
rcl
rcl
add
cs
mov
popa
jmp
push
pop
xchg
adc
lock
stc
fld
xor
ret
adc
jp
push
xchg
ret
cmp
fucom
sti
push
ror
jae
sub
pop
aad
fisub
out
(bad)
ins
fimul
or
mov
ins
add
loope
dec
sbb
mov
int3
mov
sub
dec
add
fs
popa
jge
xchg
aam
sar
icebp
test
ret
fstp
push
mov
fld
ret
in
sbb
daa
pop
add
sti
lods
push
inc
(bad)
in
pop
scas
pop
in
fisttp
xchg
inc
pop
jmp
and
jno
adc
into
daa
fstp
or
cmps
push
jb
push
cmp
add
push
lahf
or
and
jb
fidivr
jae
cmp
dec
ret
push
mov
jmp
test
cs
xor
out
imul
inc
lahf
dec
in
or
push
cs
sub
or
int3
addr16
push
div
and
cmp
in
mov
cs
test
jle
pusha
fs
jne
movs
pusha
sbb
cmps
daa
movs
mov
mov
out
add
test
mov
fsub
and
jns
gs
jns
push
mov
jo
stos
adc
xor
stc
xor
and
popf
add
inc
or
ins
jl
cmps
sub
sbb
popa
dec
sbb
or
push
pop
mov
xchg
jne
ss
ficom
leave
or
fcom
shr
cbw
scas
ror
aas
in
les
xchg
push
idiv
xor
ins
gs
(bad)
push
pushf
mov
sub
jbe
mov
sub
test
ret
les
xor
std
pop
into
cmp
lock
cwde
or
mov
mov
ja
arpl
cs
mov
bound
fdivrp
dec
shl
mov
push
and
dec
out
jl
scas
cmp
in
stos
or
lds
(bad)
out
test
adc
jmp
adc
mov
mov
pop
hlt
push
out
lea
xlat
repnz
dec
sub
jb
in
ror
mov
into
jae
sbb
sbb
call
sub
shl
daa
dec
dec
push
out
aad
and
sbb
pop
adc
pop
mov
loop
dec
push
jae
mov
imul
sub
jne
xor
xchg
sub
add
and
mov
and
cmp
push
aaa
adc
or
cmp
imul
sbb
or
inc
rcl
push
stos
adc
mov
adc
dec
addr16
xor
stos
and
repz
jp
in
cwde
inc
pusha
ins
neg
xchg
ret
out
jns
pop
std
(bad)
jns
lea
std
jmp
push
js
sti
pop
loope
pop
cmp
mov
mov
nop
jge
movs
iret
fadd
inc
and
xchg
clc
shl
mov
enter
mov
xchg
mov
call
stc
(bad)
mov
data16
mov
xchg
fimul
sbb
neg
or
aas
sti
push
imul
xor
push
(bad)
mov
lods
push
cdq
and
cmps
jmp
xchg
fbld
ror
retf
push
dec
(bad)
test
mov
les
fadd
iret
pop
sbb
inc
clc
repz
push
cmps
jge
test
jg
dec
and
stc
leave
(bad)
ret
add
imul
sbb
out
mov
mul
lea
mov
stos
xor
add
sbb
adc
xchg
rcr
dec
xor
fcmovbe
out
les
pop
popa
cmp
std
dec
imul
mov
mov
xchg
add
add
push
(bad)
jg
adc
adc
adc
sub
in
xor
fs
aad
mov
cmc
pop
add
or
xchg
cld
inc
sbb
fdivr
and
sbb
inc
scas
xchg
push
in
add
mov
std
ficomp
aam
push
aad
or
cmp
mov
sbb
xor
pushf
pop
mov
jb
dec
or
aas
cmps
stos
out
shl
cdq
jecxz
icebp
repnz
adc
sub
ret
cmps
push
sar
addr16
sub
sbb
aas
mov
popa
pop
aam
push
test
push
adc
nop
test
xchg
sub
imul
add
sub
cmp
stc
jae
cwde
pop
loop
scas
dec
shl
rcl
pop
jg
inc
add
push
adc
rol
sti
xchg
dec
jmp
lahf
mov
movs
jbe
(bad)
ds
add
mov
bound
sub
jecxz
or
es
mov
ins
cmp
fs
dec
adc
adc
arpl
dec
sbb
movs
imul
lahf
fucom
xchg
or
cmp
daa
dec
jns
jo
les
jo
or
inc
mov
cld
jg
ins
adc
ins
mov
mov
dec
jo
addr16
repz
sbb
cmp
jae
fst
movs
pop
loope
cmp
stc
ins
lea
add
out
das
xor
fwait
mov
stc
or
stos
(bad)
jmp
loope
rol
pop
stos
test
add
repz
jmp
dec
adc
lods
retf
sub
mov
loop
fist
adc
mov
xchg
mov
lahf
rcl
inc
mov
sar
and
adc
or
jno
iret
xchg
push
mov
sub
sub
mov
mov
mul
addr16
movs
hlt
pop
cld
repnz
mov
cmp
int
cmp
sar
push
and
push
mov
push
pop
(bad)
mov
jmp
retf
repnz
sbb
mul
imul
pushf
pop
add
ss
push
adc
(bad)
push
push
mov
cmp
cwde
mov
pop
mov
cmp
sbb
sti
or
adc
add
pop
mov
arpl
mov
mov
jmp
int
arpl
mov
rcl
jg
jb
scas
mov
nop
mov
in
xchg
hlt
and
xchg
xor
push
xchg
ret
cmp
cs
out
xchg
cwde
fbstp
jecxz
xchg
pusha
(bad)
mov
pop
in
push
inc
adc
retf
imul
fst
cmp
mov
jb
bound
lods
aad
xchg
stos
inc
mov
in
call
or
adc
inc
(bad)
dec
lahf
das
sub
adc
daa
or
not
enter
or
mov
fdivrp
sbb
popa
scas
and
jg
fild
push
mov
fst
(bad)
mov
pop
paddusw
mov
xchg
mov
addr16
push
in
popa
jle
(bad)
mov
dec
sub
(bad)
push
dec
mov
test
and
sub
sub
ret
pop
push
jmp
cmp
xor
push
jno
pop
mov
fs
sub
xchg
fsubrp
lds
out
pop
mov
dec
push
jl
push
dec
js
movs
pop
fld
out
xchg
fstp
push
jns
or
es
jne
inc
inc
sbb
test
lods
movs
retf
rcl
jmp
fcom
rol
mov
jle
dec
fisubr
adc
gs
(bad)
rcl
mov
or
sbb
in
sub
add
or
inc
int
test
mov
xchg
ror
xor
adc
pop
dec
arpl
popf
imul
cmc
push
and
clc
pop
xchg
pop
mov
jnp
jmp
mov
inc
dec
ficom
test
jmp
xchg
rol
pop
jb
movs
inc
push
pusha
(bad)
cmp
mov
fmul
shl
out
xlat
mov
push
enter
fsqrt
cmps
push
sbb
pop
aad
sahf
jp
jns
lds
pop
inc
cmp
in
or
xor
(bad)
cmp
popa
and
(bad)
xchg
mov
ror
dec
in
leave
xchg
cmc
rol
lds
pop
imul
mov
iret
xor
retf
outs
push
pop
push
iret
mov
sbb
out
mov
pop
fdivr
xor
jle
inc
xor
sbb
xor
push
jb
jb
scas
dec
popf
pop
inc
hlt
ins
add
cmp
mov
loop
xchg
mov
jle
ret
call
int3
sahf
idiv
dec
mov
sub
xlat
fimul
xor
add
clc
aam
arpl
jb
xchg
nop
les
mov
push
sbb
jno
inc
adc
pop
lds
cld
movs
popf
aas
int3
call
lahf
outs
cs
xchg
int
xchg
push
push
inc
rcl
and
mov
lock
ins
pop
call
inc
pop
sbb
div
(bad)
stc
add
xor
test
int
stc
sahf
inc
xchg
test
imul
mov
lods
aam
jne
inc
mov
test
ss
jg
das
and
leave
pop
sub
xchg
dec
ret
arpl
add
test
fdivp
jge
ja
pop
ins
cmc
icebp
mov
stos
aad
call
daa
out
mov
mov
mov
xor
xor
retf
cmps
fisubr
sub
jmp
mov
xlat
sbb
retf
push
mov
inc
les
push
shl
data16
imul
jg
sub
mov
add
sub
pop
adc
mov
fimul
adc
dec
cmp
leave
loop
je
xor
mov
cmp
jge
pop
lock
stos
jle
mov
pushf
in
dec
pop
pop
xor
sahf
add
(bad)
jae
arpl
xchg
fcomp
push
push
out
mov
call
out
shl
bound
iret
mov
loopne
xchg
mov
faddp
xor
iret
das
mov
in
es
mov
stc
pop
and
xchg
pop
ret
lahf
jmp
push
jnp
xchg
daa
fs
pop
cmps
or
push
xchg
ds
(bad)
jmp
mov
inc
loope
(bad)
outs
out
push
push
mov
mov
movs
popa
mov
lods
cmps
dec
retf
sahf
cs
adc
ror
pop
ins
lods
push
mov
push
and
loope
xor
mov
aas
jmp
icebp
jno
pop
or
nop
test
push
lea
clc
pop
fwait
jp
cmps
sub
jmp
mov
cmp
pop
mov
xchg
ret
loop
mov
adc
add
or
leave
scas
pop
mov
ror
mov
mov
int
rcl
inc
stc
out
(bad)
dec
out
ret
rol
ret
rcr
pop
jo
push
xor
and
push
or
sbb
jge
cmp
jae
test
jge
or
repnz
cmps
pop
fisttp
cmps
add
cmp
push
rcl
push
add
stos
mov
jns
(bad)
or
cmps
xor
mov
shl
jbe
push
outs
pusha
hlt
lods
cmp
lods
or
inc
push
push
push
inc
mov
inc
sub
xor
inc
ficom
pop
in
mov
cmp
sub
outs
push
fwait
dec
cmc
adc
push
fstp
bound
xor
fidivr
pop
popa
jnp
push
add
jecxz
popa
test
fisttp
push
jg
dec
popa
or
push
clc
mov
add
fnstsw
or
bound
sti
hlt
mov
sub
mov
cs
mov
popa
imul
push
aad
fcomp
and
jne
addr16
in
push
and
dec
sahf
imul
sub
(bad)
sbb
inc
mov
inc
mov
and
mov
jb
pop
push
mov
das
push
push
stos
push
daa
cld
pusha
dec
ins
rol
cmp
ins
out
call
jmp
int3
jl
xor
cmps
das
stos
lods
and
push
loope
fdiv
or
jb
add
ds
out
icebp
mov
inc
cmp
out
add
mov
sar
(bad)
repz
and
xchg
inc
and
push
lods
or
fsubp
scas
mov
scas
imul
repz
out
jb
mov
lahf
iret
movs
inc
dec
pop
dec
pop
xchg
xchg
addr16
pop
sahf
shl
fsubr
dec
mov
add
pop
hlt
fcomp
aas
fisub
mov
jns
test
sbb
dec
popf
pop
push
jl
pop
gs
xor
and
ror
sbb
loope
iret
adc
pop
adc
movs
cmp
push
push
scas
dec
sbb
rcl
and
rol
repnz
cli
xlat
repnz
pop
cmp
ins
std
inc
sbb
jge
aam
sbb
add
mov
add
stc
xor
stos
mov
es
loopne
inc
mov
push
je
sub
inc
mov
iret
pusha
sbb
or
mov
xor
inc
ins
mov
xchg
jbe
stos
mov
push
loopne
push
aaa
hlt
test
mov
and
fisubr
xor
push
xor
ss
sub
pop
pop
inc
mov
jno
fdivp
xchg
ins
test
inc
jns
repnz
loop
cwde
cmps
adc
pop
cmps
mov
sub
outs
nop
mov
cmp
push
movs
shl
int3
xchg
push
in
dec
cmp
test
ficomp
cmps
in
stos
loope
pop
push
mov
pop
imul
xchg
push
sahf
les
mov
cmps
test
outs
sbb
and
xlat
icebp
sbb
fcomp
xchg
dec
inc
popf
adc
mov
pop
into
cmps
int3
jmp
stc
rcr
leave
jbe
cmps
sub
jmp
mov
aam
ret
test
mov
in
jnp
pop
adc
push
cmp
jns
out
test
out
aam
pop
retf
fistp
dec
push
loope
jne
shl
pop
cmp
cmp
xor
sub
rcr
push
jno
imul
push
pop
mov
leave
repnz
adc
test
(bad)
shl
or
sub
and
pop
sti
push
dec
daa
push
das
jge
dec
inc
and
(bad)
mov
bound
push
dec
call
xchg
adc
popa
jae
sbb
xchg
lock
jmp
inc
stc
xchg
call
jecxz
dec
out
jg
psubusw
inc
movs
and
retf
hlt
jl
xor
shr
and
dec
cs
fidivr
fs
xor
movnti
adc
jmp
and
out
popf
mov
cmp
adc
imul
push
popf
(bad)
sti
jge
sbb
sub
int3
cmp
push
aad
xor
push
and
test
mov
sub
ds
imul
xchg
xchg
and
jne
mov
int3
mov
ret
cmp
imul
jmp
std
mov
mov
(bad)
aad
and
jnp
mov
xchg
mov
loopne
mov
sbb
cmp
stc
jo
sar
mov
xchg
mov
mov
mov
mov
fnstsw
leave
cmp
and
aas
jae
push
push
xchg
xchg
adc
leavew
call
adc
sti
ds
sub
ins
stc
ret
sbb
into
test
push
mov
es
ja
add
popa
rcr
or
pusha
mov
mov
push
fdiv
mov
call
rcr
retf
adc
shl
loop
or
neg
lea
es
xchg
ret
into
sub
pushf
cs
jg
leave
dec
inc
iret
or
gs
in
loope
jmp
jecxz
pop
in
mov
out
mov
mov
outs
cmps
adc
sub
jl
inc
xchg
mov
ss
sbb
pop
in
idiv
jo
ja
fisttp
sbb
adc
cmp
ret
ins
dec
push
call
jecxz
rcr
push
sub
jp
jae
add
pop
sbb
add
loopne
shl
mov
cmp
ins
xor
rcl
push
inc
xor
(bad)
push
add
pop
pop
xor
iret
pushf
push
push
push
je
scas
ret
cmp
pop
(bad)
pop
and
pop
lds
popa
cmp
sub
jb
in
out
push
ja
cmp
pop
push
call
sub
mul
xchg
jbe
pop
mov
pop
adc
outs
cwde
xor
out
push
in
jge
retf
xor
out
adc
imul
push
jmp
dec
mov
daa
jp
mov
loope
xchg
stos
retf
aad
repnz
popa
jb
or
xor
pop
test
sar
sub
les
dec
ins
or
mov
in
xor
mov
ds
add
test
int
mov
rol
add
adc
push
push
gs
add
xchg
jle
sub
ret
inc
or
aas
shl
mov
lods
xchg
pop
addr16
jno
xor
add
hlt
rcr
sub
sbb
in
cmp
es
adc
mov
imul
mov
adc
xchg
es
lea
int
bound
rcl
cmp
fnstcw
gs
adc
test
pop
sbb
shl
bound
out
ret
jmp
pcmpgtb
ret
sbb
add
in
or
shr
lods
cmp
loope
divps
mov
inc
sub
jmp
or
popa
sub
cdq
shl
inc
mov
jb
nop
cmp
sbb
adc
ret
inc
mov
or
sbb
repnz
mov
aaa
and
push
stos
les
inc
sub
inc
mov
inc
stos
in
or
mov
xor
pop
dec
push
cmp
mov
mov
test
cli
outs
jbe
pop
push
test
mov
ja
mov
in
cli
cmc
mov
sub
outs
popa
fadd
or
mov
fs
push
or
call
sbb
fadd
adc
ror
mov
mov
xchg
push
mov
movhps
adc
or
adc
jns
addr16
mov
pop
jno
sub
pop
xchg
and
mov
xor
retf
ss
(bad)
js
push
inc
push
stos
outs
dec
call
adc
daa
(bad)
sub
aaa
test
sbb
gs
movs
cmps
movs
xchg
sbb
test
cmp
mov
paddw
and
inc
dec
jo
dec
mov
push
mov
mov
adc
lods
bnd
sub
xor
and
sub
mov
push
add
sbb
hlt
jle
in
sub
sbb
sub
mov
sbb
add
dec
dec
fiadd
int
push
adc
push
cs
mov
fwait
arpl
add
mov
rol
ret
and
jmp
cdq
pop
xor
addr16
sub
cmc
int3
push
out
jne
into
jns
fs
mov
xchg
retf
xor
sub
ins
fbld
sahf
or
movs
call
ja
je
mov
jg
aad
mov
sbb
pmuludq
idiv
inc
sub
test
lods
ret
scas
jg
std
push
js
push
sub
mov
addr16
and
std
mov
mov
mov
cmp
ffreep
in
test
sbb
inc
dec
es
pop
xor
daa
daa
push
jge
in
push
adc
mov
test
inc
cmps
push
dec
adc
jg
jle
xchg
(bad)
sbb
cmps
out
out
pop
cmp
cmp
and
xchg
out
pop
repnz
sub
shr
dec
push
mov
inc
pop
fstp
stos
pop
push
scas
adc
add
call
pusha
push
push
out
jno
and
jmp
mov
ret
dec
icebp
test
mov
ja
push
add
jmp
mov
daa
cmp
pop
dec
pop
stos
cmp
jne
dec
shl
push
inc
mov
jle
xchg
dec
or
xchg
mov
mov
push
or
xor
sar
lods
inc
call
add
sbb
dec
push
inc
or
push
jno
pop
jmp
loopne
movs
xor
pop
lods
pop
and
aam
inc
shr
div
in
inc
xor
leave
push
sahf
pop
inc
push
xchg
enter
aam
sub
push
mov
ss
pop
je
sar
into
gs
sbb
pop
xor
or
cmps
mov
xchg
neg
cwde
mov
sti
mov
mov
into
lds
push
or
mov
adc
rcl
pop
clc
jae
adc
mov
pop
push
xchg
popa
cmp
jge
out
dec
enter
sahf
test
imul
jl
cmc
in
pcmpgtb
fdivr
(bad)
(bad)
call
stos
cmp
sti
and
aad
mov
pushf
and
int3
or
cmp
addr16
je
std
cmp
add
pop
out
xlat
stos
mov
retf
(bad)
xor
and
mov
xchg
cli
mov
int3
(bad)
or
out
mov
inc
retf
mov
(bad)
cli
nop
lods
or
cmp
aam
in
mov
cmp
mov
aam
stos
dec
inc
push
retf
aad
rcr
mov
add
int
and
push
cmp
mov
call
or
add
lds
sahf
mov
sbb
push
inc
in
test
or
push
inc
out
sub
mov
clc
xor
add
jmp
mov
xchg
sub
fbld
cmps
cmp
je
and
cmp
clc
and
pop
in
cmp
fwait
jns
(bad)
std
add
pop
push
fsub
movs
lea
push
sbb
push
xchg
xor
out
mov
and
cmc
(bad)
call
mov
jno
add
and
push
mov
cmps
out
outs
or
daa
xchg
mov
jbe
adc
fadd
test
inc
mov
int
mov
cmp
jmp
lods
(bad)
sbb
test
inc
repz
add
fwait
stos
sbb
std
and
sbb
sub
stc
fld
ret
daa
add
pmaxub
sub
outs
push
adc
mov
jb
xor
pop
push
and
out
mov
add
push
rcl
stc
in
inc
add
ret
or
xlat
sub
nop
popa
adc
cmp
dec
xlat
std
cmp
fcmovbe
xchg
cmps
out
mov
rcl
sub
dec
mov
mov
jne
fwait
mov
fcmovnu
ds
push
pop
or
dec
xor
outs
fmul
sbb
shl
imul
dec
mov
or
pop
cmp
mov
lahf
ins
faddp
lods
mov
xchg
int
imul
jecxz
cmp
cmp
dec
push
pop
pop
adc
outs
inc
push
xor
push
int3
les
mov
in
or
jmp
enter
(bad)
jns
jle
nop
dec
mov
addr16
mov
loopne
and
mov
repz
popa
(bad)
mov
jno
jl
bswap
xlat
jno
mov
push
adc
popa
and
test
and
sahf
sub
std
popf
mov
push
push
add
sub
in
or
add
movs
push
loope
lds
aas
test
imul
xor
lods
dec
add
in
adc
push
loop
add
inc
std
in
sub
lds
retf
cmp
jle
mov
push
pushf
jmp
ror
cmps
call
mov
inc
jmp
or
xor
mov
mov
cwde
jl
push
pop
fs
daa
rcl
stos
repnz
into
sbb
(bad)
outs
jmp
mov
xchg
jecxz
(bad)
cli
xor
addr16
int3
dec
(bad)
dec
pop
or
sar
pop
add
cmp
push
int3
adc
aam
lods
push
clc
fisttp
xlat
fstp
xor
xchg
lds
xlat
movs
sub
enter
sub
dec
xchg
(bad)
inc
pop
and
addr16
fnstcw
add
not
push
inc
xchg
not
idiv
mov
sahf
es
or
inc
sub
ss
inc
xchg
xor
pop
jae
cli
mov
test
pusha
jns
dec
idiv
xor
adc
repz
iret
xor
inc
xchg
adc
jno
pop
sub
test
push
mov
push
push
or
jecxz
dec
aam
ror
and
pop
add
or
lahf
add
das
lods
mov
call
in
repnz
das
rcl
cmc
iret
mov
add
cmp
inc
fimul
mov
add
jl
sti
push
or
shl
pusha
push
mov
mov
dec
icebp
jle
pusha
iret
sahf
not
add
jge
xchg
xchg
dec
or
into
pusha
pusha
adc
pop
cmp
shl
jns
fmulp
mov
shr
cmp
add
dec
outs
jo
jp
mov
ss
enter
shl
retf
int
or
sub
mov
push
adc
(bad)
jl
or
js
add
xlat
and
stos
rcl
pop
cs
pop
sbb
push
retf
dec
lahf
icebp
repz
aad
shr
mov
push
fcmovbe
add
push
sub
adc
mov
dec
lds
inc
lods
mov
and
xchg
movs
aas
jecxz
sbb
cli
arpl
mov
outs
pop
jo
fistp
repnz
xor
mov
push
mov
xlat
stc
int3
rcr
push
(bad)
(bad)
imul
add
icebp
sub
adc
inc
mov
inc
xchg
in
ja
dec
xchg
sbb
sbb
mov
imul
cmp
call
sub
cmp
pop
inc
pop
jmp
or
dec
lahf
sti
imul
or
add
(bad)
and
sub
jle
les
push
cwde
xchg
mov
mov
mov
xor
or
out
test
sbb
cmp
fst
mov
stos
push
arpl
std
inc
neg
jne
jmp
pop
cld
add
lea
mov
int
ds
ret
(bad)
sub
sub
fst
mov
mul
ins
pop
fwait
inc
out
jae
adc
fisub
in
adc
dec
shl
xchg
add
sbb
fcmovbe
and
pop
and
rcr
std
jo
mov
sbb
out
push
pop
mov
mov
mov
mov
mov
ss
sbb
mov
ficomp
sbb
push
clc
imul
inc
bound
xor
jp
fdivr
jmp
rcl
retf
mov
stos
adc
cmp
movs
(bad)
(bad)
or
test
retf
loopne
xor
cmp
or
outs
ja
les
movs
test
stc
pusha
xor
adc
fs
mov
pop
out
arpl
jb
retf
fnstenv
(bad)
cmc
or
jo
xor
mov
shr
xor
scas
loop
out
rcr
push
xlat
jg
loopne
js
add
ficom
push
fsubr
mov
cmp
jle
and
in
xchg
sbb
inc
mov
dec
sub
fcomp
mov
cmp
xchg
sbb
mov
out
outs
xchg
xchg
inc
xor
mov
sbb
(bad)
cmp
retf
or
push
inc
ja
cli
mov
adc
sbb
mov
(bad)
cmp
rol
cwde
loopne
xor
scas
lea
mov
push
pop
fisubr
neg
sub
adc
add
and
jl
in
cmp
dec
xchg
in
(bad)
push
inc
cmp
sti
mov
lahf
in
sbb
test
dec
leave
jnp
jo
jno
inc
mov
xchg
loope
mov
mov
addr16
cmp
cwde
fs
sub
sbb
jmp
adc
rcl
dec
and
jns
loope
sub
xor
fidiv
xor
jb
call
out
retf
push
int3
add
ins
fstp
pop
fisttp
bound
sbb
mov
loopne
nop
sbb
loope
in
aas
mov
pop
lock
test
cwde
adc
jb
movs
dec
mov
lods
iret
inc
out
lea
loop
adc
test
lahf
cld
inc
cmp
rcl
test
inc
loop
in
stos
scas
mov
push
int
out
into
or
xor
mov
cmp
adc
mov
inc
cmc
gs
jp
call
jno
or
mov
ret
repnz
jp
mov
pop
test
call
movs
cld
xor
(bad)
leave
call
fcmovb
sub
push
push
sub
inc
cmp
bound
sbb
mov
jb
push
int
neg
shl
sub
pop
(bad)
mov
cmp
fstp
pop
addr16
movs
xor
(bad)
push
and
cli
xor
add
or
or
and
les
js
mov
cwde
(bad)
xor
xchg
test
lods
inc
cmp
adc
aad
fild
sub
cld
xlat
xor
adc
push
xchg
test
xor
adc
dec
shr
xchg
xchg
jecxz
rcr
cmp
shl
mov
rep
cmps
jmp
add
sbb
(bad)
rol
lods
movs
clc
sub
(bad)
dec
xchg
mov
mov
std
(bad)
cwde
add
sahf
and
ins
repz
jecxz
mov
add
cmps
rol
fisttp
and
ja
in
(bad)
mov
xchg
aad
in
xlat
es
cmc
out
add
fisttp
pusha
bound
cmp
push
cld
test
jae
and
jecxz
pop
test
shl
inc
mov
cmp
es
sbb
lods
cwde
sbb
test
xor
jne
push
jb
int3
dec
fiadd
dec
pop
and
sub
push
leave
fcomi
sbb
pusha
stos
das
jo
cmp
ja
pop
inc
cmp
test
mov
adc
js
cmps
push
jnp
mov
das
inc
shr
fldenv
rcl
add
loope
pushf
ds
sbb
ret
es
push
mov
cs
into
and
cmc
cmp
call
lods
pop
call
pushf
es
jge
(bad)
push
iret
hlt
add
jne
adc
(bad)
push
push
adc
mov
xchg
dec
jbe
addr16
lods
iret
lock
imul
out
sub
mov
call
xchg
int
imul
xchg
add
jp
add
sub
add
or
lds
sbb
lods
stos
mov
mov
das
sahf
rol
sub
(bad)
movs
inc
dec
pop
inc
jmp
inc
pop
sar
jno
sbb
int3
xchg
repnz
std
scas
mov
xlat
xchg
mov
mov
add
xchg
dec
add
or
dec
aaa
sub
loope
in
add
xor
out
ins
jnp
aas
add
push
push
add
aaa
inc
retf
imul
(bad)
scas
xor
jmp
fistp
es
sub
xlat
imul
or
enter
jne
sti
mov
mov
jg
xchg
jecxz
enter
aas
mov
shr
mov
push
and
mov
xchg
jo
inc
xor
xchg
bound
(bad)
push
jmp
gs
mov
inc
xchg
push
push
xchg
pushf
fs
jno
push
and
imul
jae
mov
xchg
clc
xor
js
imul
movs
stc
loop
cmp
jmp
int
inc
(bad)
data16
shl
call
xchg
sub
cli
out
cmp
add
pop
aam
xchg
stos
scas
lea
jmp
add
and
ret
jno
nop
push
mov
stos
mov
sub
rol
retf
rol
sbb
enter
outs
xchg
adc
and
daa
ins
jns
rol
ret
xchg
push
fcmove
ins
outs
mov
shr
cmps
pop
push
out
xchg
sbb
sub
xchg
mov
mov
xchg
xrelease
xor
popa
mov
dec
pusha
push
stc
call
stos
or
or
mov
lock
ins
div
xchg
ins
mov
mov
cmp
cli
rcl
adc
fisubr
mov
sbb
mov
out
xor
xor
fisttp
inc
jne
xor
mov
xchg
jbe
(bad)
pushf
imul
cvtps2pd
enter
cmp
popa
ins
ss
sbb
mov
xchg
cmp
adc
fsubr
sub
daa
jp
into
push
mov
test
(bad)
aad
cmp
add
imul
pop
in
ficomp
push
int3
jno
repnz
jnp
dec
int3
in
add
neg
pop
iret
cmp
mov
fstp
jmp
mov
mov
sahf
dec
cmp
imul
push
jnp
jmp
and
mov
mov
ror
ror
add
inc
or
sub
push
cld
aam
std
sar
cmp
aam
mov
jne
ss
sub
sub
(bad)
pop
or
cli
mov
inc
(bad)
cmps
xchg
inc
sbb
xchg
mov
jbe
mov
cmp
xlat
mov
outs
jmp
jno
movs
dec
loopne
sub
je
push
leave
outs
lods
xchg
jg
pusha
pop
xor
xlat
xchg
adc
mov
sbb
sub
repz
sahf
pop
sub
add
(bad)
adc
rcl
data16
sub
inc
push
push
aas
adc
push
ds
mov
mov
stc
(bad)
test
xchg
aaa
fdivr
or
pop
dec
jb
in
lds
sahf
inc
retw
out
mov
xor
js
ror
xor
or
sbb
xor
shl
push
xor
jg
dec
xlat
and
pushf
xchg
jmp
xchg
cmp
sbb
push
leave
out
fiadd
test
pop
mov
cmps
fisub
xor
and
dec
inc
sbb
cmp
push
pop
pushf
adc
es
jb
xor
addr16
ja
jmp
cmp
cmp
stos
ds
jne
ret
lea
dec
imul
inc
dec
iret
pop
cmp
sbb
in
fsubr
aaa
or
fcmovnbe
lods
sar
and
pop
add
and
and
xchg
mov
xlat
sub
mov
cmc
xchg
push
mov
iret
sub
loope
or
es
shl
inc
push
and
test
imul
out
shl
pop
dec
dec
inc
cwde
jl
call
dec
add
lock
test
dec
xrelease
out
jno
mov
sub
mov
pushf
pop
xor
es
xor
mov
(bad)
lods
push
cwde
ja
int
cs
aad
jbe
inc
add
(bad)
loope
sbb
nop
sub
pop
in
or
fild
jns
jbe
jge
add
jne
mov
mov
mov
sbb
cld
dec
xor
xchg
repnz
pop
popa
xchg
mov
fmul
dec
mov
pop
(bad)
jle
adc
push
xchg
mov
mov
inc
ficomp
mov
inc
mov
cmp
jbe
add
popf
loop
mov
push
mov
and
dec
xchg
push
test
in
rol
out
lods
mov
or
hlt
mov
sub
scas
scas
call
push
cmp
rcl
inc
in
shl
in
sub
lds
ins
pop
xchg
aaa
(bad)
aaa
mov
imul
mov
xor
es
or
std
addr16
aaa
addr16
push
add
jbe
push
retf
mov
retf
les
mov
in
inc
jmp
es
lahf
dec
inc
lock
lock
ret
pop
mov
and
lds
pop
(bad)
sbb
cmp
jmp
mov
and
mov
cmp
(bad)
std
xor
push
adc
(bad)
fadd
xchg
cdq
outs
test
retf
or
test
mov
add
movs
mov
into
adc
and
jns
fidiv
or
push
jmp
fwait
push
fcomp
jae
mov
xlat
std
dec
movs
scas
pusha
(bad)
mov
out
cmp
iret
mov
xor
mov
and
fld
inc
imul
fs
jl
shr
push
xchg
icebp
arpl
add
jp
test
mov
js
das
sbb
xlat
sbb
dec
cdq
xor
dec
cmp
sbb
rol
add
outs
pop
mov
test
pop
mov
(bad)
cmp
into
jno
arpl
aam
cmp
sbb
data16
dec
push
loopne
dec
out
push
jecxz
jno
outs
imul
and
aas
cmp
nop
js
cmp
xchg
sub
mov
push
das
inc
push
push
add
adc
mov
mov
and
fstp
and
rcr
cld
inc
inc
cli
and
xor
push
jmp
push
xchg
xchg
idiv
inc
out
call
push
xor
retf
jmp
lods
ret
and
adc
add
or
xor
and
add
pop
mov
xchg
ret
and
fwait
lea
jb
mul
mov
into
(bad)
sar
sub
mov
into
(bad)
in
fld
jecxz
inc
xchg
int3
xchg
mov
xor
inc
or
(bad)
pop
js
lahf
mov
imul
cs
(bad)
(bad)
scas
rol
gs
scas
mov
fmul
or
iret
mov
out
add
or
sub
out
imul
jge
dec
or
add
xor
(bad)
xlat
or
adc
jmp
lahf
bound
and
add
cmp
test
(bad)
leave
rcr
push
sar
pop
addr16
retf
lods
neg
cmp
ins
cmp
add
in
sub
adc
(bad)
jb
add
add
inc
scas
in
pop
mov
bound
(bad)
js
jl
mov
(bad)
jl
std
neg
sbb
loopne
test
lock
imul
inc
rcr
scas
pop
jl
dec
loop
ror
cdq
nop
(bad)
stc
std
inc
jmp
jmp
arpl
xor
clc
(bad)
retf
cdq
mov
add
xchg
push
rol
scas
mov
(bad)
cdq
test
cwde
mov
jnp
test
dec
jmp
cmp
aam
dec
jmp
jecxz
fild
add
bound
push
or
lods
retf
repnz
xor
mov
xchg
push
int
int3
stos
jmp
ins
(bad)
scas
cs
push
xchg
cmc
mov
ret
ret
dec
repz
dec
mov
pop
mov
cld
arpl
ficom
repnz
jecxz
leave
fidiv
dec
adc
add
adc
and
(bad)
adc
adc
and
push
(bad)
dec
and
shr
cmp
in
(bad)
pop
(bad)
(bad)
add
sbb
addr16
mov
aas
pop
mov
repz
retf
jg
mov
push
out
xor
and
pop
mov
aad
ret
fbstp
and
cld
fild
scas
sbb
fistp
mov
mov
inc
out
in
ror
mov
adc
out
call
les
mov
iret
dec
add
ret
fs
pop
std
xchg
adc
or
inc
sbb
dec
mov
retf
add
sbb
out
mov
cmps
or
jg
repnz
mov
sub
xchg
pop
xor
cmp
je
mov
(bad)
jo
xor
mul
push
dec
or
sub
loopne
or
jno
(bad)
fimul
fsubr
aad
into
jp
test
repz
int3
retf
and
std
and
sti
push
push
dec
mov
jp
jns
stc
push
scas
loope
sub
mov
dec
ja
mov
jno
popa
nop
jnp
test
xchg
cmp
adc
mov
push
cmp
aaa
ds
div
loope
sbb
sub
xchg
imul
aaa
jge
cmp
jl
jle
(bad)
mov
lods
out
imul
rcl
dec
adc
inc
clc
mov
std
mov
mov
mov
push
adc
sbb
xor
imul
hlt
dec
xor
cmp
scas
sahf
sub
xchg
arpl
das
test
ins
shl
ja
out
dec
daa
mov
ss
cmp
lds
and
or
(bad)
fidiv
dec
outs
mov
cld
inc
pop
retf
cmps
out
mov
pop
dec
jg
xlat
xor
jbe
test
sbb
mov
pusha
adc
int
(bad)
imul
dec
push
mov
out
and
and
jbe
mov
pop
ja
mov
loop
cs
inc
jae
or
out
and
loope
(bad)
lahf
rcl
movs
dec
(bad)
(bad)
arpl
aaa
cwde
ja
hlt
sub
imul
dec
and
and
xchg
adc
out
rcr
das
adc
and
fild
or
(bad)
mov
push
icebp
ret
mov
mov
and
in
aaa
jns
mov
push
out
jmp
sti
jne
(bad)
aas
adc
cmp
ss
mov
push
mov
jmp
xchg
xchg
out
xchg
call
into
sbb
lock
div
xor
cmc
stc
jmp
das
mov
out
mov
test
ret
(bad)
xchg
mov
or
adc
mov
xchg
inc
fld
mov
push
pop
inc
sub
or
pusha
clc
cmp
and
cdq
mov
mov
fnstsw
or
ins
stc
pop
jns
scas
mov
int3
jns
rcl
xor
shr
or
gs
shl
mov
push
fld
in
mov
stos
or
retf
das
xor
repnz
pop
cdq
jge
dec
xchg
imul
gs
cmp
icebp
pop
ja
das
xchg
mov
movs
adc
ffreep
sbb
cmp
(bad)
or
out
repnz
mov
jb
dec
xchg
sub
lods
outs
dec
sti
pop
push
jno
mov
lods
jmp
test
dec
retf
pop
mov
adc
ins
jo
lahf
and
bound
inc
pop
out
xchg
adc
mov
mov
pop
jns
sub
stos
out
cmc
imul
xor
aas
std
scas
jecxz
or
or
sbb
sti
sbb
test
enter
ret
push
ja
fdiv
sub
sub
popf
xchg
sbb
mov
in
das
adc
fcom
aam
nop
jae
pushf
ss
in
mov
mov
xchg
pop
xor
test
mov
inc
jo
or
or
ss
and
loop
dec
cwde
es
popf
rol
inc
ss
pop
outs
add
inc
add
pop
icebp
cdq
pop
ins
ret
in
sbb
shl
dec
pop
rcr
cmp
cmp
or
inc
cdq
mov
movs
push
mov
push
xor
xor
repnz
leave
mov
stc
sti
jecxz
add
mov
and
ins
and
and
and
and
call
iret
int
sub
jl
sahf
out
or
cs
cmp
hlt
inc
ins
ret
gs
repz
sub
jmp
into
cmp
adc
loope
pop
or
mov
cld
es
cmps
(bad)
jle
inc
jns
scas
cmp
mov
sar
in
int3
cwde
pop
pusha
ret
stc
test
add
lods
or
push
icebp
mov
sub
test
xlat
popf
push
mov
jmp
mov
stos
loop
mov
jmp
push
cdq
(bad)
ja
lock
mov
xor
add
into
pusha
adc
pop
inc
aaa
and
xchg
pusha
out
ja
mov
mov
jg
cwde
dec
call
je
in
mov
dec
sub
dec
cwde
mov
test
scas
scas
leave
cmp
icebp
and
jnp
pop
push
pusha
sbb
push
neg
movs
mov
sub
pop
fwait
jecxz
jmp
retf
lods
inc
dec
stos
pop
sbb
pop
fwait
in
sub
jmp
sahf
(bad)
and
pop
mov
push
sbb
enter
aaa
ret
mov
xlat
cwde
push
mov
(bad)
mov
inc
mov
sbb
xor
mov
enter
dec
test
sbb
pushf
daa
sub
ror
mov
ds
pop
cli
rol
sub
call
jne
outs
mov
push
leave
push
or
das
out
ret
mov
(bad)
push
cld
adc
call
out
rcr
add
ja
xor
enter
retf
rcr
mov
add
rcl
jmp
jle
adc
out
sahf
xor
std
out
mov
mov
xlat
sbb
inc
nop
sub
arpl
pop
out
lods
push
jne
int3
add
dec
and
xor
cmp
dec
pop
repnz
leave
push
jns
mov
push
fdiv
call
lahf
sbb
mov
rcr
sub
pop
or
imul
jl
popf
mov
xor
(bad)
sahf
pop
out
and
push
ins
or
sahf
test
adc
and
out
(bad)
sub
adc
mov
sahf
clc
pop
cld
pop
ja
neg
int
lods
inc
cmp
dec
clc
push
push
and
push
jmp
rcr
mov
imul
push
sbb
jecxz
mov
inc
sbb
mov
outs
rol
mov
adc
cmps
mov
mov
jb
retf
pop
mov
retf
fisttp
push
lahf
add
test
das
call
ror
xchg
ins
nop
mov
mov
in
fcomp
mov
xor
mov
push
push
jno
cdq
mov
aaa
inc
mov
retf
shl
out
xor
jae
(bad)
ss
push
retf
icebp
mov
mov
push
es
mov
sub
paddusw
fstp
fmul
js
lods
add
idiv
sbb
in
sbb
shl
cmps
call
jmp
add
and
sub
push
nop
test
fstp
sbb
movs
pop
xchg
adc
bound
icebp
jbe
push
(bad)
out
fwait
inc
lods
aas
and
jp
pop
loop
and
lods
xlat
cmp
or
aam
test
or
jmp
dec
cs
fsubrp
ds
cmp
xor
cmc
scas
fwait
jnp
push
cmp
test
jns
inc
gs
inc
dec
dec
fsubr
sub
cmp
sbb
xchg
mov
cmp
out
xchg
(bad)
xor
lds
mov
push
push
sub
dec
mov
addr16
mov
inc
dec
mov
fdiv
not
stos
mov
and
jb
cmp
fwait
inc
inc
inc
cdq
mov
xor
nop
cmps
pushf
mov
pop
cmp
mov
popf
sbb
out
xchg
add
ja
jle
push
sbb
popf
push
pop
ret
jmp
mov
mov
call
mov
mov
pop
mov
test
jecxz
fnstsw
xchg
cmp
sub
leave
mov
enter
mov
and
xor
fnstcw
push
fnstsw
cmps
mov
push
pop
je
jo
xchg
and
add
data16
jge
sbb
fs
std
mov
push
inc
pop
cli
and
push
out
mov
push
push
adc
add
sub
out
and
outs
hlt
push
fnstsw
in
in
cld
jnp
aas
and
inc
ds
or
push
stc
cs
mov
pop
je
test
jl
repnz
outs
mov
cmps
in
aas
ins
ss
in
inc
pushf
dec
in
jg
shl
jae
sbb
stos
inc
test
shl
aad
push
jg
fsub
(bad)
jne
pop
ja
sub
jg
fisttp
mov
and
pop
add
lahf
xor
add
dec
into
sbb
shl
push
and
sub
pop
cmc
pop
in
js
lods
push
nop
lock
pop
mov
aad
inc
mov
cmp
add
mov
jns
push
and
sbb
adc
sbb
and
xchg
(bad)
outs
not
sbb
movs
and
mov
daa
add
xchg
ficomp
mov
add
jne
fst
int
mov
xor
jmp
and
call
ins
mov
sbb
push
js
repz
sub
and
xor
dec
call
jae
leave
sti
push
xor
(bad)
ins
mov
inc
(bad)
push
out
push
loop
out
sbb
and
lods
fcomi
retf
pop
pop
mov
sbb
jo
mov
inc
mov
sbb
(bad)
je
xchg
cs
popf
repnz
fild
adc
jmp
test
jl
and
sti
daa
scas
or
cmp
inc
enter
in
dec
cmp
in
hlt
xchg
inc
stos
sub
add
rol
xchg
lods
sbb
bound
push
loop
test
das
mov
adc
es
in
jmp
ja
fisttp
cdq
out
nop
iret
and
xchg
jbe
add
mov
pop
sbb
jecxz
in
dec
or
and
test
aas
(bad)
ins
inc
add
adc
pop
jnp
inc
jbe
(bad)
or
shr
or
aam
cmc
rcr
cwde
sbb
fisub
imul
not
ret
mov
popf
push
movs
cs
mov
sbb
sub
das
(bad)
adc
outs
mov
push
mov
inc
stos
test
jle
mov
push
mov
mov
pop
xchg
mov
cmps
mov
jl
ds
xor
lods
xchg
mov
leave
loope
add
fcomp
jmp
sub
mov
cs
rcl
ins
jge
cli
inc
pop
push
fidiv
aam
xor
sub
loopne
pop
xor
aad
cli
push
test
adc
shr
inc
iret
inc
fst
adc
and
ss
xor
cmp
cmps
mov
inc
stos
push
iret
xchg
push
movs
dec
cmc
stos
js
stos
out
fwait
test
out
into
sub
mov
ins
push
xchg
es
std
mov
(bad)
dec
xor
mov
ds
cmp
jb
les
hlt
scas
adc
popf
jb
sub
test
sbb
imul
inc
sbb
sub
fdiv
pusha
pushf
fimul
push
icebp
push
dec
cwde
loopne
fcomp
jb
idiv
pop
xor
pop
lods
aad
lds
cld
or
cmc
mov
lods
or
scas
pop
in
popa
clc
fstp
js
(bad)
jmp
fwait
out
xor
out
stos
push
xchg
xchg
push
aam
or
mov
jne
xchg
cmp
shr
xchg
xchg
adc
pop
ret
push
dec
stos
daa
pop
sub
jbe
in
(bad)
mov
adc
sub
ss
dec
lea
int
call
fmul
xor
(bad)
mov
fdivr
jge
fs
call
mov
add
out
out
or
jge
xchg
test
loope
fisttp
add
and
dec
inc
mov
pop
(bad)
iret
jae
mov
mov
cmp
dec
add
sub
mov
push
dec
pop
adc
add
jle
adc
push
scas
jns
loopne
or
mov
ror
mov
dec
int
mov
push
adc
inc
xor
sbb
retf
adc
xor
js
fs
(bad)
lahf
leave
jecxz
push
inc
cli
sub
mov
push
movs
ficom
xchg
cmp
gs
sbb
add
mov
test
sbb
mov
mov
(bad)
(bad)
xor
pusha
xchg
dec
imul
pop
cld
test
ins
repz
mov
ror
fdiv
push
sbb
push
in
sbb
je
arpl
add
pop
ret
dec
and
nop
pop
mov
sub
and
js
adc
mov
mov
jge
gs
push
hlt
stos
fld
xchg
push
cwde
fsubr
ss
in
addr16
pop
or
out
mov
cmps
push
pop
pushf
stos
xor
dec
shl
and
or
ins
cmps
in
jno
inc
and
xlat
enter
(bad)
cmp
mov
stos
mov
push
mov
push
add
dec
cmp
pusha
nop
cmps
fucom
mov
lods
loop
je
mov
adc
push
xchg
adc
std
sbb
push
pop
pusha
xchg
mov
pop
gs
aaa
or
out
ret
mov
aam
sar
xchg
push
sub
ret
leave
pushf
jg
ins
in
(bad)
rcl
push
mov
pop
addr16
fbstp
adc
pop
rcr
jnp
scas
push
cmp
nop
add
loop
ror
fist
jl
dec
(bad)
call
mov
inc
jns
inc
hlt
fdiv
push
dec
hlt
fucom
mov
pop
or
jo
inc
in
mov
ds
outs
mov
jbe
sub
jnp
xor
mov
push
xchg
push
push
stos
cld
push
dec
outs
xor
sub
jg
dec
or
sub
adc
popa
xor
nop
cwde
shl
loop
xor
pop
test
lahf
retf
or
xchg
jns
cs
test
arpl
sub
cmc
cmp
nop
mov
pop
or
sub
in
cmp
test
fstp
and
add
adc
fcom
sbb
fnstcw
add
jmp
enter
xor
hlt
ins
inc
pop
add
jnp
mov
rcl
scas
(bad)
xor
int3
jo
dec
into
imul
scas
fisubr
shr
inc
pop
sub
pop
fcmove
rcl
inc
retf
dec
jno
mov
push
push
dec
call
xchg
std
mov
adc
jp
std
jge
xor
push
in
push
or
or
pop
mov
add
faddp
cld
mov
rol
jmp
sbb
ss
xchg
jnp
mov
sub
xchg
sub
xchg
or
pop
loop
ins
iret
ds
mov
adc
inc
test
mov
repnz
xor
mov
xor
dec
dec
mov
sub
imul
int
push
jb
sub
jmp
and
jne
inc
mov
or
cs
stc
push
sub
lods
mov
call
and
cmp
jmp
xchg
je
mov
rcl
test
addr16
stc
int
(bad)
arpl
jle
and
stos
and
leave
jb
pushf
or
sahf
add
pop
sub
xor
xchg
stc
leave
xchg
add
lock
xchg
inc
and
jge
aas
cmp
cmp
jb
aaa
cli
in
je
pushf
movs
pop
das
call
imul
movs
pop
imul
sub
jae
sbb
xor
mov
in
das
mov
sub
mov
scas
xor
inc
mov
(bad)
(bad)
cs
test
jae
rol
into
data16
ja
aas
push
cdq
fiadd
rcr
push
aam
out
sub
pop
mov
pop
sub
retf
jmp
sbb
mov
push
adc
movs
xchg
mov
call
xor
dec
shl
out
mov
xchg
jge
call
dec
sub
pop
imul
nop
mov
jo
fiadd
xchg
rcr
cmc
inc
scas
sub
sub
icebp
xchg
stc
inc
bound
shl
pop
adc
(bad)
or
mov
test
hlt
dec
repnz
jp
push
popf
mov
dec
call
adc
pop
xchg
movs
sar
xchg
scas
mov
mov
xor
jb
inc
add
mov
ins
jnp
loope
adc
cmp
mov
sub
inc
not
push
push
or
mov
cmps
or
jmp
push
out
and
pusha
xchg
movs
les
shl
mov
sub
gs
aaa
cwde
sub
aaa
or
sub
aam
xchg
lds
add
dec
inc
jbe
gs
popa
push
cld
push
add
jns
dec
out
pop
push
add
mov
sbb
inc
push
sub
xchg
or
xor
cmp
sti
inc
add
repnz
jle
or
bound
(bad)
xchg
pop
mov
cmp
adc
cdq
scas
aaa
xlat
cmp
mov
jbe
popa
xchg
jbe
fdivp
jmp
xchg
mov
push
or
push
and
sbb
push
jmp
repz
enter
xchg
outs
cmp
adc
xor
sub
mov
mov
xchg
xlat
mov
mov
cdq
jns
mov
xchg
pop
stos
cmp
cmp
inc
pop
pop
adc
pop
mov
je
pmaxub
push
enter
lods
and
jo
push
cmp
ins
push
out
push
jmp
mov
in
mov
and
dec
std
dec
mov
pusha
sbb
or
and
pusha
(bad)
cmp
sub
mov
mov
loop
xchg
stc
clc
jno
inc
or
jmp
pop
adc
movs
jmp
xor
mov
mov
jecxz
scas
(bad)
adc
mov
jmp
inc
push
pop
xchg
inc
imul
arpl
(bad)
or
inc
dec
cmps
or
movs
test
(bad)
repz
mov
jns
mov
aam
das
dec
in
adc
mov
inc
dec
mov
ss
(bad)
aas
ja
push
or
xor
les
pop
pop
push
xor
cmp
jmp
inc
repz
push
sbb
ret
shl
pop
cmp
rcl
(bad)
and
std
jmp
adc
les
call
fwait
cmp
mov
pop
pcmpgtw
mov
mul
mov
cmps
or
add
aad
dec
pop
inc
sbb
xchg
sbb
push
inc
or
cmp
test
cmp
inc
sub
dec
ja
push
inc
push
test
and
push
test
cmp
jae
sbb
inc
out
mov
and
xchg
jp
out
adc
test
cmp
ret
mov
sub
call
cmp
lea
mov
jmp
xchg
mov
adc
add
mov
mov
inc
pop
sub
push
movs
cmps
push
pop
cmp
adc
call
add
icebp
lahf
and
inc
sar
iret
xor
repnz
add
push
jno
stos
(bad)
push
mov
inc
pusha
mov
cld
mov
adc
pop
add
sbb
or
push
or
jg
add
cmps
inc
mov
xor
push
je
and
aas
(bad)
lock
dec
in
adc
mov
add
pop
or
jae
mov
arpl
xor
int
(bad)
xor
mov
mov
jo
imul
test
test
scas
pop
sar
icebp
and
jmp
mov
mov
sbb
dec
sub
call
inc
sub
(bad)
mov
cld
cmp
out
imul
pop
(bad)
shr
push
rcl
jle
dec
lea
into
aad
push
ss
scas
push
stc
xor
sbb
xchg
inc
sub
repnz
cmp
out
pop
fisubr
(bad)
xchg
mov
adc
(bad)
mov
lods
(bad)
dec
push
push
cmp
popa
or
mov
stos
shl
mov
(bad)
mov
arpl
jl
pop
pusha
js
mov
mov
test
push
pushf
xchg
lea
cli
ds
push
jmp
loope
sub
mov
pop
nop
cmps
xchg
adc
inc
mov
std
ds
outs
sbb
out
out
iret
mov
mov
xor
sbb
pop
adc
pop
cwde
mov
lods
and
sub
jle
scas
push
sub
mov
outs
jg
fs
mov
push
xchg
adc
xchg
xchg
mov
xchg
sub
movs
outs
cli
lock
(bad)
mov
xchg
pusha
addr16
les
inc
aad
and
movs
push
sti
cmp
adc
test
and
ffreep
ins
popa
sub
scas
leave
pop
scas
adc
rcl
add
js
out
iret
pop
pop
test
popf
jg
movs
sub
pop
fwait
mov
loop
inc
and
mov
ja
lds
add
aad
or
jmp
adc
jecxz
or
mov
icebp
sar
pop
inc
and
dec
pop
out
stc
jecxz
aam
or
(bad)
test
clc
cmp
jne
or
mov
pop
pop
adc
lds
or
(bad)
lock
push
fistp
inc
xor
test
mov
mov
xor
ret
in
in
xor
dec
push
out
(bad)
fidivr
mov
xchg
xchg
sub
loopne
cmp
call
cwde
aam
add
adc
cmp
push
xchg
sbb
dec
dec
out
cmp
add
hlt
pop
and
call
adc
popa
inc
sbb
ss
mov
ss
adc
(bad)
adc
pop
add
inc
test
xchg
sbb
ret
imul
dec
pop
sar
test
out
mov
xor
cld
sbb
adc
xchg
test
push
(bad)
mov
adc
call
loope
das
and
adc
leave
mov
in
rol
push
test
js
mov
das
add
pop
push
inc
or
xor
xchg
push
or
lods
mov
add
push
in
fisub
test
fdiv
call
dec
mov
shl
pop
pop
fs
enter
leave
cmp
mov
sub
or
(bad)
mov
dec
adc
push
jg
outs
mov
and
inc
imul
data16
mov
popa
xadd
sbb
xor
cmp
jbe
arpl
adc
mov
mov
jne
or
mov
rcr
mov
rol
and
(bad)
push
pop
mov
sahf
sbb
fwait
jmp
and
sahf
mov
xchg
mov
sbb
fisttp
(bad)
iret
rcl
hlt
jl
jp
(bad)
retf
cmp
test
bswap
dec
jns
mov
add
mov
mov
xchg
adc
add
lods
pop
dec
xchg
or
mov
nop
add
and
or
xchg
rcr
fcomip
test
push
mov
stc
xor
or
dec
outs
popa
lods
or
mov
mov
jb
dec
or
mov
xchg
icebp
test
mov
push
sub
jg
dec
in
adc
out
inc
xchg
cs
mov
out
fwait
inc
pop
ss
jg
mov
mov
xchg
enter
cld
xchg
aam
clc
dec
mov
jecxz
bound
mov
pushf
push
or
test
and
mov
inc
out
mov
dec
test
add
mov
arpl
std
out
jmp
out
mov
pop
mov
push
add
test
lea
nop
ja
cmc
pop
int3
sahf
pop
jmp
psllw
jne
adc
ret
std
scas
and
enter
pop
lock
jmp
push
test
jno
push
aas
int
pop
pop
sub
dec
push
adc
repz
mov
aam
xlat
jle
data16
popa
push
cwde
adc
inc
xchg
dec
shl
jno
rol
dec
dec
fs
std
std
mov
lds
xor
enter
cld
shl
cdq
xchg
mov
scas
mov
rol
and
int3
xchg
mov
jae
cmps
or
outs
dec
out
sbb
mov
push
mov
scas
pop
mov
or
xor
adc
into
aad
push
xor
add
iret
lds
push
inc
movs
fst
jno
and
jo
adc
sti
les
xchg
lods
jne
in
test
jbe
outs
pusha
xchg
iret
and
pop
push
cmp
in
pop
xor
in
sbb
pop
fistp
mov
not
push
leave
xchg
mov
and
hlt
cmps
outs
jecxz
cs
jmp
lea
jb
or
adc
sub
mov
pop
aam
sti
push
nop
xchg
lods
fisubr
sar
jge
pop
sti
or
dec
inc
push
aad
arpl
std
lea
push
lock
aam
les
sbb
push
test
lock
pop
jmp
push
lock
inc
xchg
push
xchg
jns
adc
jbe
add
out
mov
and
in
xchg
mov
inc
mov
push
xlat
gs
jb
sub
jmp
or
outs
adc
shl
jg
or
icebp
ins
push
dec
cmp
test
mov
and
cld
mov
popf
ret
sahf
dec
mov
xchg
js
dec
iret
call
mov
push
lods
sbb
stc
xchg
pop
stos
nop
ror
or
pop
mov
rol
and
loop
sbb
cmc
mov
aad
imul
push
xchg
pop
outs
xchg
push
sub
inc
in
jp
inc
and
mov
mov
jecxz
rcl
repnz
push
fnstenv
jle
ja
or
ret
mov
pushf
aaa
out
sahf
sbb
jmp
mov
(bad)
clc
mov
mov
std
lea
pop
xor
test
aas
jmp
out
sub
int
and
add
popa
pusha
daa
or
lods
nop
stos
prefetcht2
pop
or
mov
sbb
add
add
xchg
aam
js
fcomp
or
xchg
jno
mov
neg
movs
and
sbb
mov
pop
inc
(bad)
sbb
fistp
lods
(bad)
aad
pop
rcr
leave
or
loop
sti
cmps
lea
dec
cdq
repnz
shl
loope
shl
test
stc
ficomp
mov
push
call
cmp
pushf
out
in
pusha
sbb
and
jbe
xor
mov
popf
xchg
inc
push
int
dec
push
xchg
call
js
dec
jmp
pop
jnp
cmp
mov
jle
inc
pop
(bad)
retf
pop
ins
test
jmp
clc
stos
inc
idiv
xor
push
loope
bound
ret
push
test
push
(bad)
adc
hlt
call
ins
dec
(bad)
mov
pop
fisubr
cmp
in
imul
mov
sub
icebp
jns
push
call
les
xor
jl
addr16
inc
fild
stos
push
in
pop
mov
jg
mov
cmp
enter
pop
test
pop
fwait
xchg
xchg
inc
jmp
outs
shl
imul
sbb
out
pop
aad
xchg
add
cmps
sbb
shr
sub
in
cld
aaa
xchg
imul
xor
fs
sahf
cli
mov
imul
test
(bad)
out
fs
sbb
add
add
cld
int3
aaa
or
rol
adc
inc
dec
push
pusha
(bad)
xchg
rcl
pop
mov
cld
addr16
idiv
out
xlat
jmp
retf
sahf
mov
jmp
or
dec
adc
mov
mov
imul
clc
push
push
mov
std
inc
add
ret
mov
ret
and
in
mul
mov
and
add
hlt
pop
in
in
push
push
push
(bad)
ins
ins
cmp
mov
lock
repnz
jp
sub
retf
imul
mov
jmp
aas
sub
push
in
sub
push
pop
pop
or
or
inc
ret
popa
shl
sahf
in
pop
or
retf
mov
mov
test
popa
and
stos
mov
inc
int3
ret
cmc
sub
sub
ss
imul
movs
push
mov
mov
cmp
outs
inc
movs
dec
sub
cli
in
(bad)
addr16
lea
jecxz
les
movs
inc
sbb
lea
div
lods
stos
popf
addr16
inc
jb
leave
iret
jae
push
stos
fdiv
aam
mov
aas
mov
xor
movs
sub
imul
cmp
out
adc
sub
lods
adc
pop
inc
sub
xor
and
xchg
les
add
fwait
pop
add
fld
je
mov
arpl
or
retf
fstp
inc
sar
in
ror
xor
inc
outs
arpl
rcr
pop
fisub
mov
sbb
fistp
out
dec
dec
cmp
cmp
fidivr
in
adc
push
jns
arpl
sti
pop
xchg
cs
pop
aam
mov
test
mov
jnp
nop
adc
hlt
sub
xor
cld
pop
pop
mov
and
nop
aaa
mov
cld
sub
int3
mov
leave
or
gs
mov
xchg
std
inc
loopne
lock
push
mov
call
and
mov
adc
outs
mov
into
jmp
mov
sti
fs
push
cmps
imul
or
or
pop
pop
das
(bad)
fnstsw
leave
movs
mov
push
sar
int
mov
push
add
sub
test
mov
add
(bad)
retf
mov
rcr
add
mov
inc
or
ins
(bad)
mov
frstor
push
sbb
sbb
mov
(bad)
retf
pushf
mov
cmps
xchg
mov
add
push
pop
jae
or
adc
inc
std
adc
jb
cmps
test
dec
jns
(bad)
out
jecxz
bound
pop
mov
sub
pop
lods
jl
arpl
loop
in
pop
xlat
cs
push
pop
mov
mov
out
mov
push
xor
xor
test
jbe
mov
cmp
inc
icebp
cmc
push
and
inc
shr
add
daa
push
dec
and
pop
in
stos
out
pop
cmp
pop
in
cli
dec
mov
xchg
ret
adc
call
or
iret
stos
vfrczsd
or
test
sub
adc
test
jg
pop
mov
mov
clc
pop
pop
scas
repnz
jge
in
int
sbb
call
jp
pusha
sti
inc
push
jae
es
mov
fdiv
jl
std
ror
xchg
mov
int
adc
mov
jbe
pop
nop
and
nop
mov
les
sbb
iret
lahf
mov
push
sbb
ins
xor
xor
ja
imul
add
mov
or
adc
fldcw
int3
repnz
mov
dec
jne
in
popf
int3
(bad)
cmp
mov
push
mov
outs
jmp
loop
dec
enter
stc
or
or
div
stc
fisttp
cmp
inc
jge
fmul
mov
(bad)
pop
mov
pusha
into
idiv
cmp
call
mov
pop
iret
lock
aas
pop
adc
jne
xor
ret
int3
stc
movsx
mov
jno
xor
pusha
jo
jl
xor
cmp
aas
in
push
push
addr16
mov
jae
or
xor
mov
pop
xor
call
xchg
std
retf
int
pop
les
pushf
rcr
test
mov
xchg
movups
pushw
mov
outs
imul
adc
out
movhps
pushw
mov
stos
ror
cmps
call
jno
int3
cmp
and
fisttp
fisubr
pusha
fisttp
mov
xchg
out
daa
pop
clc
jecxz
pushf
repnz
or
lock
mov
in
enter
aaa
inc
jge
push
jne
outs
int3
fsub
je
inc
xor
pop
inc
ins
adc
imul
inc
das
dec
pop
jge
and
and
add
jg
push
xchg
add
and
and
mov
pop
test
pop
or
fdivr
push
mov
fmul
inc
pusha
pop
shl
jo
xchg
xlat
aas
fsubr
sbb
or
mov
and
jp
sub
fisub
sar
repz
or
bswap
xor
and
test
imul
jbe
mov
dec
inc
adc
xchg
add
clc
rcr
call
xchg
ja
rol
dec
stos
xlat
repnz
pop
div
push
std
dec
test
or
jecxz
push
inc
int3
ficom
clc
sbb
jecxz
pop
jnp
fst
xchg
(bad)
(bad)
jmp
mov
(bad)
cmp
fadd
adc
jne
repz
mov
(bad)
push
cwde
adc
outs
xchg
ins
mov
mov
ins
inc
adc
dec
pop
lock
addr16
lds
in
std
outs
cmp
mov
or
ins
ror
jb
lahf
fdiv
fidivr
cmp
rcr
cmp
loope
xor
icebp
loope
bnd
mov
mov
lea
jmp
jo
push
(bad)
cdq
out
cli
push
outs
cmp
loope
ficomp
popf
cmp
or
cmp
dec
dec
xor
call
add
call
int3
aad
cld
pop
mov
sbb
mov
mov
ins
js
es
(bad)
cmp
lock
inc
leave
jnp
hlt
push
mov
mov
sbb
mov
add
test
nop
push
dec
add
hlt
(bad)
adc
daa
add
add
sub
outs
mov
(bad)
out
sbb
icebp
mov
add
test
cmp
(bad)
pop
popf
pop
out
mov
xchg
sub
imul
dec
mov
mov
shr
retf
imul
push
jle
pop
not
ds
mov
ret
xor
xchg
dec
xchg
dec
pop
call
call
push
mov
les
pop
pop
sub
mov
cmp
mov
and
js
sub
arpl
dec
outs
fs
mov
adc
jge
pop
test
ror
in
rol
in
ror
dec
and
xchg
lods
fistp
or
cmps
test
sub
stos
adc
leave
enter
push
sbb
mov
scas
addr16
cmp
sbb
int3
xor
ds
push
inc
xor
mov
loop
xor
movs
mov
sbb
pushf
ss
jecxz
xlat
popf
lahf
cmp
push
or
mov
xchg
out
inc
cdq
cwde
push
jle
pusha
jne
(bad)
jnp
daa
mov
call
das
imul
cmps
iret
in
mov
or
xor
mov
dec
shl
mov
outs
adc
movs
loope
add
push
jo
mov
enter
mov
or
aas
fstp
stos
retf
ret
pushf
pop
xchg
sub
add
mul
xor
add
xchg
and
imul
xchg
push
xchg
daa
dec
jne
mov
push
push
add
pusha
mov
add
mov
adc
dec
push
fsubrp
cmp
inc
xchg
jle
scas
adc
add
cmp
(bad)
and
mov
lds
daa
stos
push
scas
mov
stos
ret
rsqrtps
int3
rcr
imul
std
inc
push
addr16
mov
int
mov
out
mov
sbb
out
scas
movs
out
iret
pushf
pop
or
inc
ss
mov
cmp
mov
sbb
fadd
mov
stos
mul
xchg
and
popf
ja
popa
and
ins
cmps
ss
mov
loop
stc
mov
sub
iret
stos
iret
retf
test
daa
outs
fsub
outs
fs
icebp
rcr
iret
or
dec
mov
cmp
sbb
bnd
push
inc
jae
sar
psrlw
fiadd
push
push
inc
in
fild
mov
push
fdivr
cmp
movaps
rcl
shl
sbb
dec
sub
pop
enter
cmps
push
cdq
mov
jo
stos
pop
pop
inc
xchg
dec
mov
mov
xor
stos
out
jae
retf
and
inc
not
push
popf
cdq
stos
lock
or
pop
pusha
or
and
adc
sar
aas
stos
adc
test
sub
sbb
push
pusha
jmp
jnp
push
mov
sar
jl
pop
mov
mov
in
jbe
mov
cmp
push
std
sub
fsub
xor
or
pop
mov
jae
ret
shl
retf
out
add
dec
repz
sbb
mov
repz
push
enter
and
or
push
and
adc
mov
and
push
mov
pop
sbb
push
sahf
das
jne
xchg
test
repz
add
sbb
icebp
push
cmp
mov
stc
mov
call
mov
mov
xchg
cmp
push
push
jns
sub
mov
call
jo
jge
dec
aam
outs
movs
jl
sbb
jmp
push
jne
xor
scas
aas
mov
cmp
dec
fisttp
mov
ja
xchg
loope
leave
push
push
sbb
neg
push
sti
add
adc
push
inc
clc
inc
test
adc
dec
sbb
push
adc
sbb
pop
sub
repnz
loope
sub
xchg
ins
adc
sahf
inc
sub
xchg
sbb
(bad)
pop
sbb
ficom
jmp
fld
pop
scas
mov
fld
xor
(bad)
je
pop
arpl
dec
in
xchg
ret
lods
xchg
sar
pop
ins
pop
dec
add
inc
sub
jl
(bad)
or
stos
call
lods
iret
sub
icebp
ss
mov
stos
jae
(bad)
out
mov
shl
mov
and
cdq
cmps
push
les
rol
rcr
mov
stc
sbb
jb
test
outs
sbb
imul
mov
out
jmp
inc
push
pop
xchg
dec
mov
add
mov
movs
cmp
jmp
fidiv
adc
ins
jo
movs
inc
adc
je
push
iret
pop
add
or
pop
sub
and
mov
movs
add
dec
sbb
push
xchg
test
ds
scas
cwde
mov
jns
test
dec
lahf
in
in
jg
adc
out
mov
sub
lock
bndldx
mov
(bad)
add
lds
inc
and
inc
mov
or
pop
mov
loopne
in
inc
rcl
xchg
retf
pop
loopne
mov
cdq
or
icebp
and
stos
std
movs
jo
cmp
inc
jp
repnz
ret
retf
push
fyl2x
mov
vcvtsi2ss
pushf
add
sbb
mov
ss
test
push
add
aam
inc
xor
retf
pop
shl
cmp
mov
bound
and
stos
(bad)
dec
dec
or
movs
(bad)
push
xor
cwde
cdq
ds
scas
(bad)
jmp
call
sbb
paddsw
adc
mov
push
add
jnp
(bad)
cmp
adc
xchg
sub
xor
imul
pop
mov
push
fs
cmp
pop
cdq
cmp
test
xlat
pop
movs
push
dec
push
mov
nop
out
add
pop
in
mov
les
in
adc
push
call
xor
out
add
lods
pop
jge
pop
push
mov
adc
call
lds
push
xchg
cmps
pop
leave
repnz
push
inc
addr16
in
aam
push
or
push
pop
cmp
pop
ins
jnp
push
mov
dec
push
shl
hlt
hlt
(bad)
dec
jo
lds
jae
sbb
cmps
and
mov
ret
or
or
mul
or
in
cmps
test
inc
push
loop
into
sbb
mov
das
sub
sub
xor
sbb
sub
pop
retf
sti
loop
dec
shl
adc
in
dec
xchg
ficom
icebp
gs
repz
sti
inc
or
fsubr
and
push
adc
aas
inc
mov
in
pop
inc
mov
dec
in
push
call
out
push
pop
mov
and
out
xchg
sub
fs
cmc
fcom
data16
(bad)
pop
dec
push
dec
clc
movs
stc
jl
test
das
aad
ror
mov
fwait
mov
add
push
enter
mov
cmp
fs
pusha
(bad)
outs
xchg
sbb
in
retf
push
(bad)
lods
or
xor
jmp
cmp
cmps
sahf
xor
sub
sbb
jmp
xor
or
int
sub
or
inc
in
xchg
dec
xchg
div
cld
mov
mov
fiadd
mov
mov
out
dec
sub
pop
sar
jbe
hlt
xor
sub
std
sub
jle
clc
daa
pop
inc
pusha
pop
leave
aad
mov
jg
add
mov
mov
shr
jmp
out
loope
nop
sbb
or
push
es
mov
jnp
leave
pop
inc
int3
sbb
shl
out
mov
xor
sbb
clc
or
fisubr
mov
cld
popa
call
adc
and
pop
mov
mov
lods
sti
lods
lahf
lea
ja
imul
mov
pop
ror
push
push
push
inc
xor
xchg
xchg
dec
fidivr
jp
mov
sti
inc
out
loope
in
xchg
mov
movs
adc
call
(bad)
into
ins
in
add
add
xlat
mov
jo
pop
mov
mov
inc
pop
(bad)
or
sahf
or
jnp
test
cdq
fsub
hlt
jno
inc
or
jmp
sbb
and
push
or
or
(bad)
xchg
xchg
xor
retf
pop
pop
mov
std
xor
(bad)
fcmove
(bad)
shr
dec
lods
fld
sub
mov
sub
(bad)
xor
sub
push
jae
jno
dec
dec
repz
sub
into
loop
pop
ins
jle
std
(bad)
stos
add
ds
(bad)
push
int
sahf
jl
pop
test
ds
movs
sub
xchg
(bad)
push
mov
or
imul
je
xor
jbe
into
lds
dec
std
js
ins
and
mov
shr
xchg
cmp
sbb
std
aaa
mov
mov
mov
scas
pop
sub
idiv
repz
sub
dec
js
and
push
xor
int
sbb
sub
nop
cmp
adc
jb
mov
imul
ins
sahf
jg
cmp
lock
xor
add
adc
dec
into
loope
leave
test
js
inc
adc
xchg
inc
pop
ins
jmp
cmc
iret
pusha
jmp
mov
jmp
sahf
mov
jge
add
lods
jnp
sti
pop
fiadd
cmp
xor
inc
aad
xor
mov
inc
xor
fisttp
and
dec
sar
cli
iret
hlt
rcl
test
push
and
add
inc
ja
rcl
aas
inc
es
inc
je
cmp
addr16
lods
dec
mov
call
cmp
push
test
clc
div
pop
sub
outs
xor
in
jae
dec
push
outs
inc
jle
dec
xchg
retf
add
scas
in
(bad)
nop
out
clc
sub
cdq
and
addr16
xor
fcom
jns
adc
fnstsw
jp
cmp
les
ds
iret
and
aas
mov
mov
xchg
jb
iret
sub
inc
inc
mov
xchg
mov
out
mov
or
icebp
add
push
push
dec
imul
mov
mov
shl
or
sub
adc
cwde
in
sbb
mov
inc
dec
or
mov
cmp
outs
shl
stos
cmc
push
mov
cmp
or
lea
dec
iret
push
mov
sub
mov
xchg
cmp
jl
fs
sub
or
pushf
addr16
push
pop
push
jns
inc
out
pusha
cmp
shl
aad
inc
xor
or
imul
sar
push
cmp
cmp
xchg
xor
adc
xor
cmc
dec
out
sub
aas
pop
xchg
std
in
stos
jp
ss
xchg
jge
stos
adc
ds
jbe
xchg
addr16
in
mov
lods
xor
pop
loopne
lods
push
jns
data16
pop
loop
xchg
pop
loope
push
and
xchg
mov
pop
sbb
push
push
call
inc
(bad)
into
xchg
mov
iret
jns
xor
xchg
aaa
mov
loope
cbw
mov
inc
test
inc
fmul
and
or
call
mov
cld
popa
and
adc
scas
mov
not
shl
fsub
mov
pop
sbb
push
(bad)
jae
inc
push
push
dec
pop
cmp
leave
mov
sti
das
popf
jmp
pop
and
ror
rcl
jge
call
test
shl
push
and
xor
and
jmp
imul
jbe
ins
cmp
in
dec
add
in
dec
ret
mov
lods
fldenv
fs
sahf
test
adc
or
cdq
cmp
mul
dec
outs
out
jge
(bad)
cli
stos
aaa
aad
std
icebp
shr
adc
add
or
std
adc
movs
pusha
test
xchg
repz
mov
std
nop
mov
sti
popf
dec
adc
movs
xchg
dec
jo
es
pop
sbb
out
into
mov
aas
jmp
movs
fdiv
dec
push
push
(bad)
xchg
mov
and
push
mov
in
popf
movs
pop
retf
jno
loopne
sub
aas
jle
rol
aaa
fldcw
inc
lock
popa
xchg
out
dec
cmc
xor
fwait
gs
push
xchg
sti
or
loop
jnp
mov
hlt
pusha
mov
jecxz
loopne
jmp
mov
outs
jg
pusha
fdivr
stc
sbb
pop
ret
adc
mov
jns
pop
add
mov
or
mov
jo
int
cld
push
pusha
pop
dec
push
jnp
int
fistp
add
add
prefetchwt1
pop
pop
pop
shl
popa
aad
dec
icebp
adc
jmp
adc
mov
addr16
xor
scas
je
sub
and
aaa
inc
push
mov
js
mov
cmp
push
xchg
push
stc
cmp
cmp
retf
lea
sub
cmp
inc
sub
add
push
mov
(bad)
int
xor
ins
pop
xchg
mov
mov
leave
and
aaa
mov
gs
icebp
xchg
imul
jl
or
jb
imul
and
(bad)
xchg
push
xchg
cmp
sub
inc
push
push
adc
aam
or
cmp
imul
ret
dec
and
inc
xor
jb
inc
cmp
xor
aas
cmp
jecxz
inc
stos
sahf
gs
mov
push
push
iret
push
cmp
mov
pop
ja
sbb
lods
jno
adc
mov
pushf
stos
test
cmps
add
push
push
xor
call
jmp
inc
outs
fcmovnu
arpl
mov
or
pop
into
adc
lahf
sub
jmp
xchg
enter
pop
mov
adc
sbb
daa
call
in
dec
mov
pop
rol
in
fwait
fwait
scas
and
mov
shl
and
mov
adc
xchg
xchg
xor
cli
push
add
add
mov
xchg
mov
push
jmp
or
movs
mov
pop
mov
in
pop
std
pop
ins
test
cmp
jmp
xlat
ins
inc
ret
popf
(bad)
in
cwde
loopne
xchg
test
push
or
xor
mov
mov
inc
out
inc
div
shl
dec
push
les
in
sbb
retf
in
pop
sub
test
mov
xchg
inc
inc
(bad)
fcomp
inc
push
hlt
iret
inc
popf
lds
call
mov
push
pop
jns
repnz
mov
mov
pop
adc
push
adc
out
imul
in
or
pop
(bad)
in
pop
push
fcomip
mov
adc
push
or
jg
test
sub
imul
popf
push
inc
stos
sub
jp
ins
sbb
enter
pop
ret
cmp
call
cmc
or
packuswb
mov
or
sub
jo
sub
in
push
xchg
cwde
retf
jo
push
outs
lods
sub
push
or
dec
mov
xor
call
push
adc
or
xchg
xchg
xor
cwde
jle
xchg
fcomp
cmp
aam
pop
sbb
gs
xchg
xchg
js
dec
adc
and
xchg
test
mov
cmp
adc
jno
jnp
jb
sub
mov
cmp
and
fwait
cmps
cmp
in
xchg
outs
xor
dec
jae
pop
popa
inc
mov
es
jne
into
jnp
xor
mov
jmp
scas
mov
ret
jb
pop
in
in
ins
test
mov
and
add
jecxz
adc
jne
jmp
and
dec
pushw
xchg
cmp
xor
dec
cmc
xchg
xor
ins
mov
(bad)
lahf
outs
shr
movs
mov
pop
lea
xchg
ja
mov
add
sbb
jmp
movs
xor
sbb
pop
inc
ins
adc
ins
retf
or
popa
aaa
imul
imul
lods
into
bound
cs
push
cdq
in
xchg
fnsave
outs
push
sub
mov
ror
xor
ja
push
adc
jge
cmp
enter
out
jae
out
dec
push
cmp
push
imul
loop
mov
xor
add
mov
push
cmps
cmps
sahf
ret
(bad)
ss
lea
and
pop
ins
test
jnp
and
inc
mov
sub
(bad)
mov
push
mov
stos
cmp
mov
daa
mov
pop
nop
dec
lods
or
xor
fcmovnu
cmp
cmc
lods
push
xlat
hlt
xor
out
fdivrp
jmp
call
inc
sub
mov
sbb
xchg
sbb
jl
out
inc
push
xchg
cmc
sar
cmp
xor
jg
and
data16
clc
add
lea
xlat
(bad)
jmp
pop
fadd
mov
mov
pop
xchg
popa
cmp
mov
movs
dec
(bad)
sbb
push
sbb
jg
je
add
aam
repz
jae
inc
or
inc
dec
outs
and
sub
push
sbb
and
add
dec
cmps
cmps
sub
div
dec
inc
pop
sub
adc
push
inc
inc
rcr
cmp
xchg
out
add
(bad)
cmps
and
jno
mov
ins
sbb
inc
sbb
or
mov
cmp
dec
and
aaa
pop
mul
imul
xchg
cmp
adc
rcl
xchg
ret
inc
mov
mov
push
jmp
or
mov
mov
(bad)
enter
inc
jle
repnz
mov
ret
(bad)
jge
addr16
fwait
int
xchg
clc
ss
push
sbb
js
cmps
mov
xchg
adc
loop
mov
adc
aam
in
xchg
stos
fld
ror
scas
pop
jg
or
rcr
ficom
shl
sar
fwait
xchg
aam
dec
pop
push
dec
repnz
test
xor
rol
popf
ret
call
mov
cmps
push
mov
adc
out
inc
and
ss
inc
loopne
lock
inc
not
push
xor
fisttp
in
push
add
push
pop
jge
(bad)
aaa
js
cmp
inc
pop
or
or
mov
xchg
jne
mov
fistp
pop
push
mov
push
cmp
add
cmc
es
dec
fmul
cmp
(bad)
cmp
xor
mov
in
outs
jno
push
jne
mov
cwde
std
or
adc
not
mov
and
xchg
popf
mov
xchg
xchg
and
in
std
mov
cmp
rcl
jnp
xchg
shl
test
je
xchg
mov
jg
mov
jbe
adc
push
int3
mov
add
sub
and
lea
adc
sub
jne
cmps
mov
add
(bad)
fcmovb
loope
nop
pop
cmp
sub
cdq
(bad)
(bad)
mov
sbb
js
lds
pop
mov
popf
sub
jmp
stos
in
push
sub
xor
or
add
jp
pop
ja
or
aam
mov
push
and
sahf
adc
mov
fisttp
ret
fcom
cmp
push
add
imul
cmp
jmp
xchg
cmp
pop
cmp
pop
dec
jnp
imul
loopne
sahf
cld
mov
imul
clc
push
pushf
mov
mov
rcr
cmc
jns
jnp
out
mov
inc
xchg
lahf
popf
jmp
clc
sub
sub
fnstcw
sbb
cs
cmps
pop
mov
out
jge
mov
stc
add
pop
pop
(bad)
mov
inc
xchg
ins
or
inc
sbb
retf
test
fstp
mov
inc
mov
or
popa
inc
(bad)
lods
or
retf
sub
add
fidiv
pop
in
inc
adc
jb
xor
es
in
jg
fcmovnbe
xchg
inc
inc
push
push
fisttp
or
nop
mov
sub
mov
jp
ins
leave
test
or
pop
lock
add
addr16
jg
pop
and
dec
enter
cmp
sub
mov
popf
or
(bad)
aad
mov
sbb
xchg
sub
lods
call
imul
out
ds
xor
cmp
push
adc
mov
jle
enter
sbb
shl
cwde
xchg
fstp
mov
(bad)
jmp
stc
mov
mul
mov
cmps
push
aad
imul
pop
sar
xchg
xchg
cmc
aad
das
push
rcl
adc
loopne
dec
mov
outs
mov
jo
push
shl
fcomp
push
jo
arpl
(bad)
in
imul
cmps
jbe
and
and
jp
stos
jb
sbb
mov
stos
hlt
sbb
cdq
mov
push
jae
out
or
aam
jmp
out
sbb
mov
in
mov
xor
mov
dec
jns
not
lods
jno
xchg
mov
idiv
(bad)
enter
fstp
jl
test
or
js
adc
jo
push
and
fild
movs
cmp
sbb
push
repz
inc
sub
pusha
call
(bad)
cwde
js
shr
shl
lods
jmp
pushf
cmp
push
ret
add
div
out
or
mov
jmp
xchg
inc
inc
adc
sti
cmps
pop
jle
(bad)
gs
fsub
outs
push
inc
mov
jnp
outs
fld
mov
jmp
xchg
shl
pop
cmps
xchg
dec
daa
aaa
mov
sahf
hlt
add
push
jne
ret
dec
push
dec
mov
add
jle
shr
or
ffree
and
and
loope
inc
in
cmp
jne
dec
jae
xchg
(bad)
stc
jmp
pop
clc
jge
loopne
inc
cdq
addr16
leave
jo
jae
jge
iret
iret
push
(bad)
rcl
es
shl
adc
in
ins
mov
add
push
push
mov
outs
pop
cmps
inc
sbb
push
int
push
dec
iret
and
lock
xchg
add
jle
cmp
sub
xor
xor
mov
mov
xchg
sub
mov
packssdw
aas
push
cmp
pop
sub
rcr
sbb
mov
pop
mov
push
mov
xchg
aad
out
out
scas
lahf
nop
aam
(bad)
jne
lahf
mov
jmp
jae
ror
cmp
mov
jno
retf
popa
test
loope
pop
sub
fsubr
mov
sub
push
fcom
sti
(bad)
sbb
mov
shr
push
cmps
ror
pop
aaa
or
pop
push
or
or
scas
mov
fst
pushf
xor
sbb
pop
or
pushf
add
mov
repnz
aad
sbb
xlat
cmp
sahf
adc
xchg
cmp
sahf
jecxz
movs
inc
push
push
sti
or
xchg
push
iret
loop
lods
mov
js
sbb
push
xchg
add
cli
ret
aas
sahf
cdq
xor
dec
mov
aaa
shr
jl
dec
ins
call
sub
and
fsubr
push
les
iret
mov
xchg
pop
push
sub
das
iret
sbb
sub
jo
je
cmp
js
dec
ds
scas
mov
cmp
mov
and
repz
jno
test
aaa
(bad)
pop
xchg
outs
scas
cmp
in
inc
add
inc
das
jb
push
ins
pop
lods
sub
or
leave
inc
jne
fstp
add
mov
sbb
lahf
shr
add
movs
int
das
out
mov
cmp
(bad)
cmps
mov
mov
popf
jl
stos
mov
cmp
xchg
pop
push
mov
add
xlat
sar
inc
int3
fisttp
mov
push
xor
ds
aaa
push
or
lock
lahf
sub
bound
add
fld
sub
fs
push
sbb
mov
xor
or
in
in
dec
imul
das
shl
xlat
div
out
ja
(bad)
leave
retf
dec
sub
cmp
xchg
push
and
sbb
xchg
cs
rcr
xor
in
cmp
xor
scas
jmp
xlat
sbb
mov
push
popf
cwde
popf
lods
scas
movs
add
popf
mov
lock
push
fidivr
dec
cmp
add
xchg
mov
sbb
fisubr
pop
jg
xor
jle
sbb
or
sti
add
sbb
idiv
in
frstor
popa
je
jbe
test
xchg
jns
gs
mov
xchg
jmp
mov
sbb
nop
push
ja
out
mov
inc
jecxz
stos
xor
into
mov
je
cld
jns
fstp
add
aam
inc
jmp
xor
mov
add
es
call
xchg
inc
int
imul
dec
(bad)
and
xor
loope
sub
pop
fdivr
(bad)
std
sbb
popf
adc
dec
dec
jb
mov
mov
and
iret
add
sahf
inc
jae
or
sahf
sbb
add
retf
iret
pop
cmp
jle
fisttp
adc
out
pop
xor
pop
mov
xor
xchg
std
or
movs
cmp
push
leave
mov
into
shl
mov
jp
inc
fimul
mov
or
dec
loopne
sahf
or
cmp
inc
and
call
call
dec
jp
sub
jnp
add
jecxz
mov
rcpps
sub
lahf
pusha
or
push
or
push
imul
ret
mov
call
and
pop
xor
xor
and
sahf
rcr
xor
int3
jne
add
adc
jle
mov
and
push
mov
or
sub
inc
into
addr16
mov
inc
movs
aas
mov
mov
out
push
mov
jns
push
mov
inc
mov
and
retf
add
jnp
jge
lods
daa
push
test
and
or
or
mov
outs
sub
mov
cld
or
mov
cwde
jae
mov
mov
or
jns
mov
pushf
dec
xchg
nop
add
inc
mov
mov
or
mov
or
mov
stos
ds
and
and
cmp
ret
fdiv
gs
pushf
ret
add
sbb
xchg
ror
cs
mov
ss
iret
es
sub
lea
in
inc
dec
xchg
and
(bad)
xchg
and
adc
add
outs
xor
shl
mov
xor
add
dec
cmp
cmps
(bad)
cmp
push
outs
mov
repz
(bad)
(bad)
cmp
mov
mov
ins
add
ret
ret
push
inc
test
mov
lea
leave
jae
retf
or
loop
gs
test
out
outs
(bad)
mov
pop
adc
adc
xchg
push
adc
bound
dec
jl
xchg
add
sub
rcr
jle
or
gs
data16
push
cmp
jmp
aaa
jns
retf
sbb
in
cmps
js
push
fmul
imul
cld
ins
and
(bad)
out
pop
dec
ss
enter
iret
xor
mul
cli
jno
das
and
mov
pop
pop
scas
inc
arpl
aas
stos
jno
mov
sbb
mov
iret
call
call
mov
ret
inc
pushf
and
inc
imul
loop
cwde
or
cmp
push
aam
push
out
nop
jmp
fcmovnu
adc
jge
add
fidivr
mov
pop
cmp
mov
in
fs
(bad)
(bad)
cmc
push
fsub
bound
(bad)
push
hlt
leave
sub
jecxz
popa
jp
jno
test
or
mov
lds
outs
sbb
lds
fcomp
jg
mov
shl
pop
inc
xor
adc
test
pop
jbe
cwde
jo
popa
enter
les
fidivr
fild
mov
mov
jo
ds
xor
loopne
mov
in
jp
rol
adc
pushf
mov
stc
mov
inc
inc
or
xor
cli
pop
mov
or
mov
outs
adc
fadd
and
jae
pmulhuw
cmp
mov
xchg
rol
inc
leave
mov
enter
cmp
and
jg
jns
aas
cwde
test
jnp
adc
test
or
int3
mov
clc
test
pop
lds
retf
add
add
pop
ja
cmp
jb
sbb
pusha
fisubr
inc
cdq
std
jno
call
dec
ins
dec
aam
nop
cmp
sub
cmps
sbb
add
xor
pop
add
jecxz
movs
or
aas
js
fcomp
inc
movs
and
xchg
in
pop
call
and
fist
dec
aaa
push
push
jno
std
rcr
cld
fcomp
push
bound
mov
outs
and
adc
or
mov
jns
fistp
out
fst
outs
js
inc
pop
shl
aam
cmc
mov
into
test
jl
mov
inc
dec
sub
jle
ret
jmp
or
pop
mov
rcr
call
aaa
test
(bad)
out
dec
rol
dec
pop
sbb
cmp
or
jns
adc
inc
pop
lahf
cmp
repnz
jle
mov
(bad)
in
xor
arpl
push
mov
push
add
sub
or
jmp
pop
or
sbb
inc
xchg
sub
mov
mov
popa
or
pop
fcom
xchg
shl
jmp
hlt
cmp
fsub
test
gs
int3
or
(bad)
inc
rol
xor
jge
push
mov
sbb
jbe
mov
sbb
(bad)
pop
aaa
test
ret
jecxz
lea
fisttp
test
adc
sbb
jecxz
push
imul
pushf
shl
fld
ja
dec
inc
bound
pop
dec
test
sbb
pop
stc
js
xchg
stos
sub
mov
fldcw
cmp
push
call
std
xchg
mov
inc
push
jo
out
xor
data16
enter
or
lods
sbb
mov
mov
ficom
rcr
mov
test
aam
xchg
test
stc
push
loope
(bad)
mov
sbb
frstor
or
jmp
add
adc
and
int3
mov
int
jmp
fldcw
pop
push
stos
aas
les
xor
arpl
ror
push
jno
call
gs
jnp
cmp
xchg
jne
ror
jp
idiv
jmp
adc
scas
test
add
ror
push
mov
pop
(bad)
data16
fidivr
fstp
out
lods
xor
jmp
push
ja
dec
or
addr16
mov
sub
bound
addr16
dec
out
push
in
shl
pop
in
int
fcom
push
mov
inc
int3
jae
stc
cs
test
into
add
jo
add
dec
add
xor
pop
xor
adc
xchg
outs
repz
adc
xchg
lods
inc
xor
stos
inc
add
in
dec
and
xor
fxch
out
jmp
push
jbe
aas
retf
aaa
les
shl
xor
adc
rol
pop
xchg
lds
rcl
in
inc
add
pop
fimul
mov
xchg
(bad)
scas
cmps
inc
jo
inc
and
clc
enter
test
loope
lods
add
dec
btc
je
cmc
inc
cmps
fsubr
sbb
retf
jmp
sbb
push
mov
and
mov
and
sub
in
out
and
scas
addr16
idiv
jo
mov
mov
cmp
pushf
into
add
or
lds
jmp
cli
ja
jnp
dec
sahf
fcmove
mov
packsswb
cdq
mov
push
mov
jbe
mov
ds
jmp
and
popf
cmp
jbe
out
mov
xlat
mov
in
ret
xchg
add
sub
in
mov
add
std
dec
adc
cmp
out
test
xor
sub
cmps
in
inc
test
sar
rcl
das
and
inc
jl
xor
push
xchg
stc
(bad)
adc
adc
hlt
or
lock
xor
xchg
mov
pop
into
imul
xor
push
dec
inc
movs
jb
xor
leave
scas
dec
ins
call
scas
sahf
popf
ins
enter
lea
inc
int
sahf
jae
jno
imul
retf
ror
scas
aas
mov
in
cmps
fisttp
(bad)
mov
popa
cmp
dec
dec
outs
imul
cld
(bad)
or
loop
mov
add
dec
inc
imul
adc
rcl
jno
pop
cmc
or
in
mov
fsub
jmp
lock
jo
jne
lock
mov
std
repz
mov
mov
shl
iret
pop
loope
cmp
mov
test
loope
push
xchg
add
jnp
iret
retf
into
jnp
xor
mov
pop
aam
xchg
mov
xor
fcomp
jp
jne
mov
xlat
xchg
add
enter
(bad)
jno
cmp
int3
imul
xor
out
nop
out
adc
mov
sub
xchg
(bad)
outs
sbb
sub
ins
out
mov
mov
and
mov
(bad)
ss
xor
jmp
and
xchg
loopne
(bad)
mov
adc
leave
xor
test
mov
inc
loope
mov
mov
mov
outs
pushf
cld
sub
pop
ret
lods
daa
sbb
mov
xor
and
sbb
pop
mov
call
sbb
jle
movs
add
jbe
mov
sub
vpcmpgtw
pop
popa
sbb
fwait
add
pop
or
(bad)
pop
push
xchg
rol
xor
fld
pushf
push
ror
dec
push
or
pop
fwait
sbb
adc
mov
cmc
push
or
jge
mov
mov
imul
hlt
pop
dec
xor
mov
imul
lods
mov
dec
in
or
mov
(bad)
pop
adc
xor
popw
mov
lods
jl
int
mov
in
cmp
loope
sub
das
mov
mov
or
push
pusha
and
xchg
add
(bad)
fisttp
cmp
fst
mov
mov
or
add
xor
inc
lods
xchg
cmc
and
jnp
(bad)
xor
aas
dec
push
xchg
fdiv
cmp
outs
sbb
mov
(bad)
sbb
fsub
jge
and
jnp
not
sahf
in
xchg
pop
das
mov
test
jno
mov
cmp
pop
sub
or
sbb
or
mov
popa
xchg
data16
(bad)
dec
fcom
push
out
test
jmp
inc
stos
xor
or
aaa
je
or
cdq
es
and
imul
mov
sbb
inc
adc
cmc
dec
outs
cmps
stos
push
loope
mov
retf
or
or
shl
sub
adc
pop
bnd
sbb
pop
add
and
mul
cs
xor
mov
mov
(bad)
push
mov
mov
adc
mov
cmps
pusha
mov
sbb
or
shr
shl
pop
sub
pop
scas
scas
mov
fbld
xor
jp
add
scas
(bad)
int3
rcl
push
or
mov
fsubr
xchg
jl
inc
leave
push
or
xchg
and
or
test
mov
pop
add
sub
push
(bad)
(bad)
loope
outs
push
sub
bound
(bad)
imul
iret
sub
sbb
push
mov
sbb
or
lods
(bad)
pop
int
cmc
adc
js
enter
ja
dec
sub
push
adc
loope
and
adc
pop
icebp
loope
enter
adc
jns
jle
jmp
jl
nop
out
dec
inc
test
mov
jbe
or
pop
sub
ss
scas
or
lahf
dec
aad
mov
and
pop
cmp
inc
inc
cdq
xor
jmp
pop
and
stos
pop
ds
adc
sahf
mov
cmp
lea
shr
add
and
sub
in
lods
fcomp
outs
pop
mov
int
je
mov
sbb
push
test
pop
cmc
ficomp
dec
(bad)
jae
fsubr
push
fistp
jnp
cwde
mov
nop
pop
rcr
out
aad
imul
push
cmc
mov
sbb
xor
pop
jnp
das
jne
hlt
mov
shr
xlat
mov
std
leave
mov
daa
xor
mov
jo
out
and
adc
xchg
push
cmp
fild
ss
fdivr
gs
cmp
aad
pop
sub
aaa
sub
add
das
mov
nop
inc
(bad)
out
inc
mov
aaa
and
sub
xor
idiv
mov
(bad)
push
sbb
std
jge
pop
or
out
xchg
sub
inc
sar
cli
scas
mov
repnz
dec
in
sbb
pop
or
iret
pop
jg
je
add
(bad)
cwde
xchg
jo
shl
call
clc
pop
stos
mov
xchg
loopne
cli
add
in
fs
inc
arpl
pop
dec
or
or
sbb
je
xchg
dec
(bad)
pop
outs
aad
mov
popa
shr
sbb
int
retf
pusha
or
test
dec
cmp
push
push
icebp
mov
mov
shl
fwait
jb
mov
and
cmp
jne
ja
mov
push
or
pop
jl
mov
std
popa
or
test
inc
sub
jmp
mov
cmp
mov
mov
rcl
ret
sub
inc
push
ja
imul
scas
pop
sub
sahf
fist
inc
inc
cmp
jecxz
xchg
ss
loopne
or
mov
lea
dec
lods
xchg
lds
jmp
ins
cmp
(bad)
std
xchg
push
jnp
pop
cmp
(bad)
mov
dec
push
pushf
movs
mov
int3
repnz
xchg
test
es
mov
fldcw
and
out
lds
mov
gs
sahf
push
aam
stos
xor
sub
fwait
sbb
sub
in
pop
adc
sbb
imul
or
pop
pop
sub
(bad)
inc
adc
pushf
(bad)
daa
and
mov
push
or
inc
jecxz
pop
(bad)
cli
or
gs
adc
stc
adc
popa
int3
pop
fs
popf
sub
sub
or
xchg
into
int
fs
fld
std
ffreep
(bad)
cmp
pop
jbe
sub
shr
out
jo
rcr
push
jo
add
fnstsw
jne
xchg
(bad)
leave
xor
loopne
adc
int3
xor
std
leave
mov
nop
mov
xor
mov
mov
jo
xchg
sbb
push
jge
(bad)
cmc
std
xor
add
or
sbb
loop
imul
inc
bound
adc
outs
lahf
arpl
jb
daa
dec
stos
rcr
or
xor
ds
pop
cdq
ret
mov
xchg
repz
pop
loope
ror
mov
pop
(bad)
mov
mov
push
mov
retf
(bad)
icebp
out
xchg
cmc
pop
loopne
push
ds
(bad)
sub
jae
js
or
pop
fdivr
pop
inc
and
cmp
mov
daa
push
jbe
out
jns
ret
ins
adc
jmp
test
outs
inc
stos
cmp
scas
out
shl
xchg
push
inc
mov
cmp
ret
mov
stos
cmps
lock
mov
push
rcl
fimul
sbb
add
jg
xor
inc
rcl
jecxz
mov
scas
push
sub
cs
popf
and
pushf
jmp
push
and
test
aaa
xchg
sahf
inc
xlat
dec
std
in
ds
cmp
fcom
and
nop
out
push
xor
int3
movs
add
sbb
(bad)
imul
lock
dec
bound
test
arpl
cmps
je
pop
jle
push
into
ins
mov
dec
stc
add
lahf
out
xchg
xor
dec
je
(bad)
std
or
sub
and
rcr
(bad)
cmps
push
xchg
jo
add
ror
sub
push
cli
scas
mov
test
mov
pop
mov
push
jg
sub
(bad)
mov
sub
pop
fidiv
inc
dec
and
retf
mov
pop
sti
inc
add
mov
jmp
xor
and
sbb
mov
arpl
xor
cmp
std
(bad)
cmp
push
ds
mov
mov
pop
dec
pusha
retf
adc
in
cmp
daa
add
and
mov
fidivr
xchg
cwde
sbb
cmp
aam
or
fmul
add
fs
fst
mov
js
pop
jle
and
mov
or
loop
movaps
pop
sub
test
add
pop
dec
bound
mov
jne
sbb
popf
sti
mov
sahf
jno
cld
and
dec
scas
rcl
and
aam
call
shl
cmp
mov
mov
cmp
mov
push
js
cld
add
pop
pop
fld
jmp
mov
push
sub
mov
jmp
(bad)
aas
sub
xchg
into
(bad)
(bad)
loope
cld
mov
clc
cmp
or
mov
iret
cmps
test
stc
popf
jns
mov
ja
push
stos
call
inc
retf
add
dec
add
adc
or
or
je
dec
stc
push
lds
push
mov
or
add
shr
imul
add
gs
inc
add
mov
sbb
xchg
js
mov
cmp
jle
retf
push
in
out
xlat
xor
fld
sti
dec
popf
dec
add
shr
cmc
dec
and
adc
mov
jbe
scas
sub
push
bound
cmp
out
mov
push
hlt
adc
iret
loope
movs
sbb
xchg
leave
xor
pop
loopne
cmps
push
repz
clc
fsubr
stos
int
xchg
and
scas
popa
cdq
jg
js
push
test
xor
data16
jne
in
mov
inc
ffree
mov
(bad)
cmp
mov
clc
xchg
push
aas
shl
mov
std
in
(bad)
push
jmp
push
dec
scas
cmp
pusha
xchg
pop
push
movs
pop
loopne
sub
jne
ret
fwait
jb
inc
mov
fs
imul
xor
les
daa
mov
mov
jne
xchg
sbb
imul
dec
mov
ja
sub
fcomip
mov
enter
shl
scas
mov
ret
and
repz
jmp
shr
scas
icebp
push
stos
aaa
sbb
or
arpl
int
and
mov
mov
call
cmp
fwait
dec
adc
pushf
movs
jno
mov
das
out
jl
enter
push
pop
pop
adc
jl
loopne
data16
and
inc
aad
shr
jne
inc
adc
mov
sub
sub
js
cmp
ja
dec
lods
push
jnp
test
sti
or
cld
mov
lea
and
cmp
mov
cmp
pushf
mov
lods
inc
cdq
xchg
pop
xor
cdq
sbb
call
not
adc
mov
into
cdq
mov
mov
cmps
fmulp
add
mov
test
ret
cli
cmps
lock
sar
push
stos
xor
rcr
call
push
mov
aaa
inc
out
or
push
hlt
adc
jns
cmp
int
lods
in
cmp
popa
and
into
xor
dec
sbb
jle
je
shl
hlt
push
and
mov
and
in
das
sub
push
(bad)
rcl
inc
mov
data16
inc
orps
scas
or
retf
hlt
jmp
je
jge
pop
mov
mov
fdiv
outs
sbb
sbb
in
(bad)
cwde
sub
mov
pop
or
adc
cwde
test
pop
xor
xlat
sahf
mov
jge
sahf
add
xor
in
sbb
mov
rcl
pushf
aaa
arpl
push
mov
push
imul
clc
repz
out
std
pop
ins
and
ficomp
add
repnz
inc
add
dec
mov
ins
(bad)
stos
mov
or
addr16
leave
cwde
pop
ror
or
jno
icebp
sub
inc
punpckhwd
shr
enter
fist
ret
mov
call
ja
jecxz
jno
jecxz
jb
push
dec
out
push
xor
inc
std
pop
out
xchg
enter
daa
scas
shr
or
xor
imul
mov
sbb
aad
push
adc
loope
retf
aad
stc
sub
addr16
aas
mov
push
xchg
fcmovu
ins
mov
cmps
lock
jae
xor
rcl
mov
movs
push
std
cmp
inc
dec
dec
sub
inc
sbb
cmps
cmp
xchg
ret
nop
pusha
sbb
and
cmp
sbb
mov
and
stos
and
xchg
jmp
add
push
stc
inc
int3
mov
push
pop
test
dec
call
in
xor
mov
(bad)
pushf
cs
jecxz
cmp
cmps
ja
push
fistp
in
mov
adc
jo
fstp
fwait
sbb
fst
inc
jp
popa
sbb
cmps
jbe
scas
or
inc
pop
jne
mov
mov
fnstsw
retf
xchg
pop
hlt
shl
pop
sub
popf
ins
push
jae
clc
rcr
mov
sbb
ds
jp
adc
or
(bad)
out
mov
(bad)
jae
lods
jo
popa
mov
add
scas
mov
in
fcom
(bad)
shl
jl
cmp
in
push
call
in
pop
dec
das
inc
push
dec
fnstcw
inc
sahf
mov
out
out
ret
cli
inc
sbb
cmp
push
movs
loope
add
fisub
(bad)
cmp
ins
adc
pushf
neg
push
das
jmp
and
test
cmps
push
movs
imul
gs
pop
mov
mov
test
inc
jb
push
enter
(bad)
jp
(bad)
aam
aad
call
in
or
scas
hlt
and
call
iret
cmp
xor
arpl
jle
jle
mov
jmp
das
sub
sub
ret
aad
push
sbb
mov
push
sar
sbb
mov
ret
rep
fcmovbe
sub
push
cmc
stc
repnz
sahf
in
inc
into
dec
xor
stos
cs
add
xor
mov
clc
cld
inc
lods
sbb
dec
or
adc
and
ret
add
int3
xor
pop
push
arpl
mov
cmp
pushf
in
shl
push
pop
dec
jmp
out
mov
jp
mov
push
push
imul
addr16
jns
sahf
or
js
jg
into
xchg
repz
cmp
aam
push
dec
test
cmp
and
mov
push
aad
cdq
jle
push
or
out
pusha
outs
out
clc
adc
movs
stc
rcl
lahf
(bad)
fidiv
or
add
sbb
in
test
mov
inc
addr16
and
(bad)
and
pop
idiv
push
pop
ds
ins
cmp
xchg
jp
pop
jmp
adc
repz
adc
rol
(bad)
ins
add
fwait
mov
mov
jl
xchg
sbb
retf
dec
out
test
lds
dec
dec
push
mov
sti
jo
xor
ret
(bad)
xchg
fwait
cld
jmp
xor
jle
lahf
repnz
sbb
call
pusha
imul
and
shl
cmps
xor
out
sub
rol
xchg
and
mov
jo
dec
fbld
mov
addr16
push
dec
aaa
repz
pop
out
mov
fsub
ins
cli
std
push
leave
xor
sbb
sub
aas
push
(bad)
scas
js
pop
pop
fwait
loopne
fwait
daa
or
out
xchg
jne
ja
add
sbb
mov
pushf
ror
lea
pop
mov
mov
pop
in
leave
jbe
xor
or
mov
lea
out
inc
stc
in
mov
icebp
sub
mov
cmc
call
mov
lds
push
sti
adc
sbb
int3
cmovl
sub
ss
clc
xchg
nop
retf
xor
push
mov
jae
pop
dec
jmp
xor
scas
scas
or
sbb
cwde
rol
sbb
int3
push
cmp
and
mov
pop
mov
je
mov
pop
push
fstp
jle
cld
lds
cmp
hlt
cmp
cmp
cmps
cmps
push
push
icebp
dec
out
xchg
std
or
std
mov
stos
aaa
inc
cmp
(bad)
hlt
cmp
clc
mov
pop
(bad)
and
movzx
dec
jcxz
or
imul
jecxz
inc
int3
jnp
fisub
cld
push
inc
in
add
jno
pop
loope
sub
ret
mov
shr
scas
jno
and
pop
mov
icebp
pop
pop
pusha
push
dec
stos
pop
xchg
xlat
call
inc
xlat
retf
mov
test
sahf
mov
int
loope
out
cmps
add
xor
cdq
lds
pusha
inc
call
xchg
adc
loopne
lahf
in
test
sbb
jo
shl
and
jb
sbb
mov
cmp
push
push
adc
fmul
and
or
mov
je
out
icebp
fpatan
fsubr
out
ins
inc
inc
ret
xor
mov
xlat
sub
imul
or
aas
adc
shr
mov
loop
icebp
mov
repz
adc
xor
mov
and
xor
call
loop
test
cmp
dec
push
popf
lea
jmp
inc
push
(bad)
or
mov
lds
add
cmp
jno
xchg
mov
sub
aas
mov
idiv
mov
mov
adc
push
sub
mov
mov
ins
pop
sar
cmps
mov
aas
add
sti
(bad)
(bad)
mov
cmp
stos
xlat
sub
clc
pop
ud2
out
cmp
retf
inc
aad
div
push
cdq
inc
popa
adc
push
jae
jmp
xchg
mov
xchg
sub
dec
mov
(bad)
and
aad
mov
jb
mov
lea
xor
pop
dec
mov
fiadd
xchg
xchg
cmp
out
lea
lds
cmc
add
fwait
int
fstp
jno
cmps
fisttp
rol
xchg
dec
stos
popf
add
jl
jnp
mov
rcr
xchg
movs
jnp
cdq
cmp
in
mov
(bad)
cmp
mov
jmp
(bad)
mov
outs
dec
jo
mov
mov
xchg
ins
mov
add
mov
cld
sbb
movs
pop
ret
ins
jl
mov
fcomp
loop
rcr
and
shl
ret
adc
shr
(bad)
shl
lock
add
pop
ins
out
arpl
mov
(bad)
and
pop
std
mov
push
adc
xchg
jge
pushf
xchg
call
and
or
jle
adc
xchg
sub
sub
pop
scas
imul
push
js
mov
ja
cmc
push
mov
fmul
(bad)
test
cmp
fs
(bad)
cmps
int3
ficom
ds
mov
sub
xchg
bound
add
(bad)
frstor
call
loop
sahf
stos
test
loope
ret
inc
sub
pop
dec
jne
gs
enter
sub
js
aad
xchg
(bad)
retf
pop
xor
cmc
pop
call
lods
(bad)
sar
ficom
mov
or
mov
add
cvttps2pi
mov
mov
nop
adc
and
mov
pop
mov
test
movs
ficom
outs
loop
push
cdq
(bad)
fbstp
mov
pop
cmp
mov
jg
sbb
in
jbe
mov
test
(bad)
ror
sbb
sub
in
sahf
test
fidiv
je
mov
xor
add
(bad)
jo
addr16
pop
loopne
mov
adc
mov
cwde
repnz
xor
push
in
fisttp
shl
jo
ins
sbb
adc
dec
sbb
imul
pop
pushf
aad
xor
ss
mov
push
sub
add
pop
fmul
lea
xchg
mov
xchg
fmulp
movntq
jnp
sbb
(bad)
in
rcl
dec
into
ret
jmp
push
in
aaa
pop
cmp
and
dec
call
ins
aad
int3
xchg
inc
xor
jmp
mov
jmp
enter
adc
das
icebp
dec
jge
mov
xlat
pop
test
xor
stos
pop
jae
aam
ds
sub
pop
xchg
cdq
pop
pop
push
out
pusha
fist
mov
js
dec
dec
jae
push
movs
data16
repnz
lock
cli
cmp
shr
push
mov
sbb
add
test
pop
xor
movs
mov
shl
xchg
repnz
aaa
popa
mov
jle
jno
push
mov
pop
ja
ret
nop
sbb
fcomp
in
jnp
stc
inc
pop
enter
adc
ins
xor
pop
sub
inc
lds
movs
sub
lods
mov
int3
rcl
mov
push
mov
movs
jge
inc
leave
shl
sub
mov
fbstp
pop
jmp
iret
popa
jle
jmp
mov
sub
mov
pop
or
adc
dec
mov
mov
daa
retf
pop
mov
popf
sub
dec
stos
push
cmp
add
dec
popa
movs
mov
scas
sbb
or
jns
call
jecxz
adc
cmp
mov
xchg
hlt
ret
inc
push
mov
adc
mov
cld
out
push
xlat
or
push
rep
mov
and
cmp
dec
mov
and
sub
les
test
mov
dec
lahf
repnz
jmp
cmp
mov
aam
mov
test
xchg
fsubr
ss
and
sub
mov
int
xor
push
ja
dec
mov
into
or
clc
cmp
xor
push
xchg
pop
mov
mov
sbb
or
test
loopne
add
arpl
sub
dec
stos
das
je
(bad)
mov
scas
call
iret
xchg
cmp
std
rcl
test
push
xchg
xlat
add
push
mov
sbb
arpl
dec
push
pop
fstp
(bad)
call
push
xchg
xchg
loope
inc
pop
fimul
ins
das
mov
fxch
mul
mov
and
rcr
ret
lods
or
imul
pop
add
xchg
je
enter
mov
repz
shl
aad
lods
add
push
dec
and
xor
iret
xorps
adc
in
sbb
into
gs
ret
fcomp
stos
xchg
mov
push
js
clc
ret
sbb
jge
sub
xor
xchg
scas
sub
inc
xor
and
int
in
rcl
inc
jno
cmc
je
(bad)
cmp
test
xchg
cmp
in
push
pop
cli
jecxz
ret
enter
std
(bad)
iret
(bad)
shl
sbb
nop
fwait
jns
and
cmp
adc
mov
imul
or
pop
adc
adc
push
xchg
and
add
add
dec
mov
xchg
add
xor
jne
mov
ja
cmp
ror
aas
pop
test
in
inc
dec
imul
add
mov
movs
jb
inc
pop
dec
or
fcomp
sbb
push
lea
add
dec
xchg
test
sahf
inc
push
sub
dec
pusha
mov
sbb
jae
add
repnz
fisttp
mov
bound
or
in
mul
adc
neg
es
out
js
lds
(bad)
pop
pop
icebp
enter
test
es
or
mov
fild
les
push
or
dec
xchg
adc
push
stc
jns
pop
jae
mov
imul
jle
push
dec
inc
pusha
(bad)
data16
std
jp
mov
cmp
cmp
jmp
mov
daa
aam
jne
adc
gs
add
xor
adc
pop
mov
jne
fnstsw
loopne
cmp
pop
cdq
(bad)
ins
pop
retf
xchg
inc
pusha
std
mov
push
retf
cdq
aam
mov
mov
out
cmp
push
sub
loop
out
cwde
add
dec
mov
movs
outs
in
popa
call
sbb
pusha
popa
mov
jo
dec
mov
jbe
lea
push
adc
out
and
int3
mov
repnz
mov
imul
cmp
pop
pop
xor
push
mov
cli
fild
push
test
loopne
fwait
jge
inc
pop
mov
movs
add
push
(bad)
test
loop
mov
cdq
push
das
cmps
das
pusha
xor
sbb
xor
sahf
jno
xchg
push
jne
pop
add
sub
or
mov
inc
dec
sbb
or
sbb
(bad)
sub
pop
xchg
sbb
or
rol
test
inc
inc
adc
data16
mov
lahf
lahf
cmps
int3
jmp
mov
mov
xchg
push
pop
lea
pop
pop
in
lods
sbb
push
ss
cmp
stc
sub
jb
lods
mov
mov
adc
pop
scas
(bad)
xchg
mov
cmp
or
in
cmp
pop
or
aad
hlt
inc
stc
loope
sub
xchg
jg
mov
pop
int3
and
adc
daa
in
or
js
sub
in
sbb
xor
xor
mov
inc
and
adc
mov
neg
mov
adc
mov
xchg
sbb
je
pop
ss
cdq
jmp
fbstp
(bad)
push
lea
neg
push
push
cmp
enter
in
add
leave
mov
pop
push
sub
jge
pop
imul
test
inc
inc
ret
(bad)
mov
scas
pop
lahf
hlt
mov
xchg
sbb
fidiv
sbb
mov
jno
dec
pop
pop
mov
or
add
out
push
jns
xor
mov
xchg
jecxz
push
mov
add
call
cmp
adc
mov
cdq
mov
sub
mov
xchg
ds
add
mov
xor
je
movs
and
push
call
add
test
add
mov
aas
push
or
mov
loop
jge
lds
jl
adc
aad
sbb
fnstenv
sub
fistp
movq
cmp
push
fimul
mov
pop
dec
push
aam
ins
out
jno
stos
cmp
popf
push
(bad)
fimul
shl
into
js
mov
xor
add
(bad)
jge
sub
dec
data16
test
mov
jnp
adc
test
cmp
stc
jae
fwait
pop
popa
cli
adc
dec
lods
add
add
jae
pusha
into
add
and
or
mov
mov
loope
ins
mov
sub
arpl
nop
xchg
cs
pop
mov
dec
or
rep
xchg
mov
jmp
fbstp
dec
leave
cmps
mov
xor
pop
push
stc
outs
pushf
aaa
test
mov
ds
ins
lods
mov
ds
adc
pop
adc
mov
and
mov
icebp
mov
ins
jb
push
call
daa
add
shl
cmp
ss
out
das
mov
fdiv
fucomi
mov
cmp
outs
je
rcl
push
outs
xchg
outs
mov
leave
add
pop
mov
push
cmps
adc
jne
gs
imul
and
push
popa
into
mov
sbb
push
aaa
cdq
push
shr
mov
and
aad
pushf
cmp
add
add
ja
mov
lock
stos
or
xchg
out
cmp
call
or
cmc
std
mov
jle
push
arpl
es
xor
cmc
and
lds
push
les
mov
xlat
add
and
daa
jecxz
sahf
test
mov
xchg
jg
ja
mov
mov
aaa
inc
loopne
ja
mov
outs
jmp
aaa
stc
adc
rol
jmp
sahf
jo
ret
jle
retf
and
in
int3
sub
adc
add
sub
in
fcomip
jp
in
jno
xchg
pop
scas
pop
add
jmp
and
jecxz
(bad)
or
stos
jbe
retf
sub
sub
push
retf
sahf
cs
and
and
push
ficomp
cli
or
pop
mov
adc
push
stos
xor
icebp
pop
into
test
(bad)
cmps
dec
jle
mov
das
xchg
sbb
xor
mov
cmp
test
scas
pop
xchg
lea
cmp
jo
call
mov
xor
pop
and
sub
push
jbe
addr16
out
call
and
inc
xchg
jmp
jbe
das
adc
ss
xor
aad
mov
aad
dec
leave
packssdw
shl
mov
lds
mov
rcl
jno
lods
mov
xchg
and
ins
jnp
mov
mov
lds
seta
inc
sbb
je
mov
inc
pop
test
xchg
fsubr
xor
push
mov
loope
rcl
mov
shl
adc
(bad)
jmp
test
imul
(bad)
mov
ja
add
gs
mov
popf
pop
inc
or
xchg
inc
(bad)
cmps
push
jge
gs
cmp
xchg
clc
enter
iret
arpl
(bad)
mov
xchg
ret
lds
or
aad
sub
aaa
jle
sub
lds
jb
jecxz
inc
mov
xchg
xor
outs
pushf
push
hlt
push
sub
retf
push
jle
cdq
mov
aaa
aam
add
js
xchg
(bad)
jno
xor
xor
shl
pop
or
mov
xchg
sbb
cwde
ds
in
out
cmp
sub
jmp
xchg
adc
inc
mov
cmp
es
cmp
cmp
push
jmp
retf
mov
xlat
or
nop
dec
mov
dec
out
test
or
xlat
fsub
jno
cmovl
pop
dec
lds
(bad)
xchg
dec
jle
sti
mov
bound
ds
lods
jbe
xor
leave
mov
addr16
pop
(bad)
cwde
pop
cs
fsubr
retf
fs
cmp
push
and
addr16
xchg
loope
call
sbb
shl
in
cld
jae
in
mov
xchg
cmp
(bad)
popa
loop
sub
(bad)
and
jne
jns
sbb
test
repnz
out
and
sahf
cs
pushf
cli
mov
stc
sahf
push
popa
addr16
dec
jle
add
jo
and
popf
xchg
out
xchg
neg
sbb
mov
fidivr
in
jo
add
dec
not
xor
or
pushf
lock
push
retf
(bad)
shl
inc
cmp
in
je
jb
retf
inc
out
stc
jns
int
ret
xor
adc
sti
ins
sub
(bad)
retf
scas
pop
mov
lock
sti
imul
shr
fstp
mov
(bad)
in
adc
jmp
ror
pop
clc
aaa
fdivr
aaa
sub
jp
sub
xchg
and
pusha
scas
mov
je
pop
outs
cmp
call
cdq
mov
std
cld
test
loope
imul
inc
sbb
call
push
push
adc
and
sbb
xor
jmp
in
dec
xor
stos
stc
pop
lods
cld
mov
test
jo
cmps
or
dec
retf
sbb
lock
and
stos
jp
arpl
sub
shr
inc
mov
icebp
or
jmp
adc
fistp
xchg
das
cmp
pop
icebp
push
xchg
repz
cmp
mov
dec
enter
pop
dec
les
mov
clc
shl
fstp
sbb
jbe
das
lods
imul
cmps
(bad)
fisubr
shl
gs
pop
pop
test
mov
sbb
mov
scas
xor
sub
in
aam
imul
out
ficomp
jb
fdiv
test
js
inc
bound
mov
xchg
fiadd
movs
(bad)
daa
xor
push
(bad)
scas
mov
adc
jne
xchg
retf
xor
xchg
retf
aam
lods
hlt
sbb
ret
repnz
jge
call
stos
imul
xchg
add
sbb
add
xor
push
in
cli
fdivr
inc
sub
xchg
jno
sar
outs
xor
jle
mov
scas
(bad)
jnp
push
mov
inc
sbb
add
sar
push
sub
les
sahf
dec
mov
and
les
jae
cdq
ret
popa
dec
mov
jmp
lock
add
out
cdq
dec
xchg
ret
and
adc
push
inc
retf
jb
and
ja
sub
cli
(bad)
fsubr
mov
cdq
adc
(bad)
xor
mov
pop
adc
mov
mov
inc
jae
hlt
sbb
leave
scas
icebp
into
js
xchg
sub
dec
aas
outs
jnp
jmp
sub
push
in
in
test
rcl
dec
jmp
mov
xchg
mov
mov
lock
lods
pop
add
mov
loopne
jne
mov
push
jno
or
(bad)
and
aam
(bad)
mul
data16
mov
adc
inc
cmp
fsub
popa
push
icebp
(bad)
mov
jo
fwait
shl
mov
sbb
dec
xor
fwait
movs
xchg
sub
xchg
adc
mul
test
mov
test
cmp
ds
imul
pop
adc
(bad)
cld
xor
inc
std
(bad)
push
sbb
(bad)
popf
and
jne
sbb
scas
inc
stos
aas
enter
and
or
call
adc
add
push
mov
ja
pop
rol
ret
cmp
mov
cli
cmp
aad
sbb
inc
and
or
push
cld
iret
cmps
fnsave
push
mov
mov
js
adc
cmp
dec
ret
xchg
repz
call
fnstsw
xor
or
jmp
dec
pop
xchg
fld
ficomp
into
in
int
and
stos
xor
fdivr
dec
call
adc
add
ffreep
push
jb
xchg
(bad)
cmp
adc
js
mov
lods
inc
cdq
cdq
aam
xchg
cwde
add
dec
mov
pop
and
int
add
xchg
loope
jge
nop
imul
fsub
mov
pop
imul
lods
cmps
and
les
loope
or
mov
xor
cmp
sub
pop
xchg
dec
mov
jecxz
push
aas
scas
cli
rol
inc
sbb
sbb
test
mov
cmp
jnp
dec
(bad)
je
lahf
mov
mov
retf
retf
adc
and
jmp
fcom
add
int
push
dec
pop
pop
popf
pop
add
push
push
int3
mov
bound
loope
js
ja
ret
and
iret
push
push
popf
imul
int3
lods
popf
dec
outs
cmp
outs
hlt
and
cmp
ret
aas
add
enter
xchg
ficomp
in
mov
cld
push
iret
out
je
sbb
call
xor
sub
inc
xchg
outs
or
in
sti
clc
pop
cmp
bound
mov
popf
ret
pop
out
jnp
xor
mov
rol
jmp
sbb
xor
mov
and
or
push
addr16
pop
xor
repz
stc
mov
or
dec
sbb
mov
xchg
daa
gs
cmp
ret
js
cdq
add
movs
adc
mov
inc
push
xchg
test
mov
xchg
stos
sbb
arpl
pop
in
movs
add
jmp
(bad)
aas
pop
xchg
pop
bound
mov
or
cmps
mov
shl
push
lahf
mov
or
add
ins
inc
scas
fistp
mov
cs
inc
pop
ins
mov
fcmovb
aaa
js
dec
data16
pushf
mov
(bad)
out
cdq
push
dec
iret
loope
and
dec
xor
pusha
int3
inc
fmulp
out
lods
mov
mov
dec
(bad)
jns
jmp
loopne
clc
mov
pop
cmps
(bad)
fadd
fistp
push
mov
(bad)
push
mov
push
cwde
mov
xor
lock
add
xor
popa
inc
sub
rcl
mov
or
xchg
ficomp
js
out
mov
sub
push
pushf
inc
dec
push
dec
in
mov
mov
test
cli
or
in
ret
leave
icebp
inc
cs
jns
push
push
data16
xor
push
pop
dec
bound
pop
test
cmp
pop
and
mov
xlat
sar
pop
and
pop
bound
mov
sub
sti
jge
sub
(bad)
xlat
cs
pop
in
sub
(bad)
pop
cmp
and
and
dec
adc
fwait
clc
xchg
fcmovu
adc
inc
retf
sbb
arpl
push
add
push
or
lods
popa
sub
lds
adc
xor
jle
sbb
loop
mov
iret
xor
sub
mov
data16
sub
pop
dec
xchg
std
sub
inc
xchg
mov
cmps
cmp
aad
or
cli
add
push
mov
jmp
jp
stos
lea
sub
(bad)
jl
or
pop
jecxz
sbb
mov
scas
mov
popf
imul
push
push
mov
adc
shl
movs
xchg
cli
ret
dec
stos
stc
cmp
jnp
rcr
dec
dec
xchg
ret
mov
retf
sahf
pop
xchg
in
outs
xchg
inc
mov
mov
cmp
sbb
mov
out
and
dec
(bad)
push
cmp
mov
inc
ficom
xlat
push
add
cmp
ffree
fist
sub
leave
xchg
xchg
jo
fs
outs
cmp
dec
mov
test
jl
rcr
pop
inc
test
sti
push
jge
pop
pmulhuw
xlat
pop
pop
std
aas
push
je
(bad)
and
cmps
mov
push
clc
sub
fsubr
pop
xor
mov
push
xor
jne
scas
mov
(bad)
sub
cs
loope
push
rol
mov
(bad)
lock
cmc
sub
daa
mov
cmp
adc
inc
xor
add
lock
aas
mov
sti
xor
scas
clc
push
sbb
icebp
xchg
ficomp
dec
je
sub
mov
call
push
add
xor
pop
or
retf
mov
fs
adc
cmps
imul
mov
push
icebp
or
jno
xchg
xor
mov
clc
pushf
jno
(bad)
sbb
fs
mov
(bad)
cmps
lea
retf
mov
or
pusha
mov
retf
cmc
daa
mov
js
(bad)
push
xchg
mov
mov
jnp
xchg
icebp
out
and
ficom
sbb
jl
call
pop
mov
in
adc
sbb
in
aas
add
xchg
hlt
dec
sub
call
jns
fwait
inc
sar
sub
cmps
je
cmp
dec
or
retf
push
arpl
icebp
in
pushf
inc
sub
out
stos
imul
(bad)
mov
xor
lahf
fimul
push
lds
popf
jp
mov
jp
mov
cmc
mov
xor
jb
or
xor
jp
xor
pop
test
lahf
add
push
mov
dec
jae
add
pusha
in
inc
jle
adc
mov
and
mov
adc
mov
mov
sbb
dec
xchg
addr16
adc
mov
xor
dec
pop
adc
mov
inc
ss
dec
jbe
fstp
push
pop
stos
mov
mov
sbb
retf
pop
mov
shl
aam
adc
jns
mov
sbb
pop
in
iret
pop
pop
ds
pop
xlat
push
and
push
js
adc
push
mov
inc
inc
lods
ja
popf
pop
in
outs
pop
mov
xchg
mov
xor
fcmovnbe
mov
mov
pop
je
or
pusha
adc
sbb
ret
nop
mov
mov
cmps
xchg
xchg
mov
div
in
xor
push
jle
retf
xchg
cli
fs
xchg
les
aad
jecxz
xchg
cmp
inc
es
add
fsubr
clc
les
js
sti
loop
test
add
scas
inc
mov
dec
fild
stc
fimul
or
xchg
jl
(bad)
int3
cmp
(bad)
(bad)
dec
cmp
aaa
jmp
idiv
fiadd
hlt
mov
out
or
mov
sar
outs
jmp
and
mov
jns
xchg
dec
mov
inc
cmps
leave
xchg
cmp
cmp
aas
popa
cmp
les
(bad)
fnstsw
(bad)
iret
out
pop
addr16
les
jo
popf
pushf
mov
push
and
jns
jmp
(bad)
iret
outs
mov
ror
sub
sahf
hlt
jnp
test
lds
jmp
les
out
sahf
(bad)
mov
and
mov
test
stos
jo
fs
arpl
or
shr
or
adc
jne
or
rcr
xchg
popa
int3
out
jmp
loopne
or
xor
(bad)
push
cli
stos
pushf
aas
arpl
out
jo
fldcw
jno
dec
test
stos
inc
mov
mov
inc
fmul
es
add
arpl
rcr
and
in
pop
cmp
fild
call
xor
cli
sub
test
adc
leave
sbb
retf
xor
sbb
lods
cmp
add
or
outs
mov
aaa
xlat
(bad)
dec
cld
xchg
cmps
fwait
mov
add
movs
jg
shl
add
sbb
sahf
add
xor
in
leave
call
pop
and
popa
js
jmp
in
rol
aad
xchg
rcl
mov
arpl
data16
hlt
pop
fdiv
movs
jne
mov
push
sbb
fwait
lods
mov
xor
ret
push
pop
movs
push
in
test
mov
sbb
push
pop
in
pushf
ds
daa
pop
mov
add
test
imul
in
fisubr
cmp
jp
out
cmp
sbb
xchg
and
mov
mul
pop
cmps
xor
xchg
shl
mov
mov
jmp
adc
imul
stc
retf
mov
adc
cmp
adc
xlat
jno
xor
push
inc
fist
sbb
ret
mov
icebp
loop
adc
push
fcomp
imul
pop
or
dec
or
movs
ja
cmps
mov
mov
pop
pop
push
ins
imul
arpl
mov
cmp
adc
mov
ror
cmp
rcl
(bad)
cmp
retf
mov
(bad)
popf
jl
imul
in
(bad)
cmp
cmps
in
push
jecxz
(bad)
xor
mov
sub
aas
xor
int3
mov
add
hlt
inc
mov
fld
inc
pop
mov
ror
jo
mov
push
fstp
std
xor
(bad)
lahf
adc
(bad)
movs
xchg
ins
hlt
cmp
rcr
sti
adc
and
es
inc
pop
ja
pop
inc
adc
xchg
add
cmps
sbb
push
inc
in
sbb
cli
stos
and
sbb
sbb
in
pop
cmps
mov
cli
push
(bad)
push
data16
xor
mov
loope
jmp
xor
int
xor
lods
rcl
cmp
lea
pop
or
jae
jae
clc
add
daa
ret
or
inc
cdq
mov
and
push
mov
dec
and
shl
imul
ss
mov
dec
test
jno
and
xor
push
and
shl
(bad)
rcr
mov
inc
inc
mov
jmp
inc
aaa
inc
(bad)
push
adc
mov
(bad)
jle
pop
adc
sub
cld
data16
mov
pop
gs
(bad)
call
xchg
mov
test
addr16
dec
aad
outs
mov
mov
call
sbb
ds
stc
jne
mov
xlat
lds
faddp
mov
cmp
cmp
add
jne
je
data16
adc
ds
sbb
pop
mov
inc
jae
je
les
dec
jl
inc
fbld
push
xchg
dec
jl
rol
wrmsr
mov
imul
adc
scas
fist
arpl
sbb
outs
test
mov
sbb
and
dec
jg
sbb
jge
lods
adc
push
inc
(bad)
inc
sbb
inc
xor
call
cdq
xor
mov
push
pop
sti
movs
inc
or
mov
push
push
shl
xchg
jecxz
push
int3
jecxz
inc
(bad)
jo
or
inc
push
pop
xor
stos
out
popa
(bad)
pop
popf
jl
adc
arpl
out
and
sub
test
push
adc
jp
push
push
stos
mov
enter
mov
ret
scas
mov
mov
adc
sahf
rol
and
cli
jg
loope
cmp
add
mov
ret
mov
inc
sti
adc
jns
cli
in
jnp
push
push
xor
test
sub
cld
sub
pop
(bad)
fsubp
jb
jne
push
jp
addr16
xbegin
pushf
pop
mov
call
scas
cmp
adc
test
xchg
mov
or
mov
cmp
and
mov
add
test
jo
sbb
mov
jecxz
cwde
jl
rol
sub
adc
ret
pop
pop
idiv
in
(bad)
mov
push
fiadd
sub
dec
fucomip
sbb
jb
jg
push
inc
loopne
sub
imul
daa
adc
and
push
lds
lahf
popa
and
enter
ffree
mov
cmp
xchg
popf
jecxz
inc
xor
xchg
xor
aam
icebp
and
in
xchg
xchg
mov
imul
movs
push
inc
pop
pop
xlat
or
mov
mov
jp
int3
pop
pop
dec
sub
dec
ins
or
xor
mov
sti
or
mov
pop
and
pop
cmp
xchg
xchg
and
shl
imul
(bad)
loop
jne
imul
jp
adc
mov
in
push
xlat
loopne
or
xchg
push
cmp
push
add
mov
xchg
mov
pushf
outs
movs
pop
xlat
and
pusha
add
(bad)
pop
xor
pop
ins
jmp
ja
jnp
imul
xlat
push
ins
inc
mov
mov
sti
out
cmp
adc
inc
sbb
in
(bad)
push
icebp
cmp
shl
dec
cmp
fisubr
mov
out
lahf
jbe
push
(bad)
shr
pop
pop
jp
out
outs
(bad)
push
dec
cmovns
push
rep
pusha
push
pop
(bad)
jns
ret
popf
das
fcomp
imul
cmp
and
ins
lods
cmp
push
inc
or
push
xchg
mov
jb
dec
xor
mov
scas
rep
rol
jmp
imul
or
mov
xchg
mov
jl
sbb
movs
inc
scas
stos
repnz
inc
mov
and
call
rcr
push
outs
fst
or
cmp
xchg
lea
pop
fisttp
jge
cld
enter
mov
jecxz
mov
xor
jg
stc
rol
jge
jl
mov
jp
cmp
fs
dec
pop
add
leave
ret
icebp
or
xor
outs
cmp
std
push
push
clc
cmp
jge
loop
pop
test
xchg
sbb
sbb
add
movs
cdq
cmp
sbb
mov
ja
or
jne
pop
std
lahf
mov
cmps
sub
(bad)
dec
int3
repnz
loop
sub
scas
xchg
mov
or
popa
icebp
xlat
xor
sbb
jmp
mov
xor
retf
sbb
int3
pop
push
sub
xor
sti
sbb
pop
fsubr
mov
dec
sbb
or
mov
(bad)
daa
push
inc
dec
inc
sub
dec
and
jmp
mov
loopne
dec
js
movq
and
adc
mov
add
fiadd
sar
xor
in
leave
cld
shr
aam
mov
xchg
loopne
clc
cmp
or
mov
in
sbb
clc
ss
popa
cs
pop
push
mov
in
dec
cmp
pusha
and
invd
cmp
or
jl
fst
push
sub
mov
xchg
inc
and
xchg
mov
sub
fst
mov
fidiv
push
pusha
pop
xchg
and
rcl
mov
mov
mov
pop
pop
ror
add
push
bound
imul
and
jl
loopne
adc
xchg
stos
mov
loope
mov
mov
je
retf
inc
test
lods
dec
mov
cmps
mov
fist
jp
xchg
pop
aam
cld
fistp
and
mov
pop
inc
xlat
test
cmps
mov
(bad)
jno
aaa
jl
jecxz
int
adc
call
jl
dec
sub
sbb
test
inc
sub
shl
mov
sub
sbb
fbstp
jae
pop
aam
lods
sbb
retf
dec
test
xlat
mov
and
push
adc
lea
push
xchg
inc
jb
stc
adc
or
pop
int3
movs
push
punpckhbw
(bad)
mov
add
imul
(bad)
movs
add
sub
adc
adc
mov
out
fstp
xor
push
(bad)
cdq
leave
movs
lahf
push
mov
sahf
rcr
cpuid
cmp
ror
fld
js
out
sahf
addr16
scas
sbb
and
test
cs
mov
call
push
add
sub
jbe
loopne
mov
leave
xchg
pop
arpl
cwde
inc
cmp
dec
sub
mov
inc
mov
or
sub
push
mov
add
fnsave
shl
and
cmp
mov
lods
or
jb
movs
cmp
and
fmul
lahf
out
addr16
adc
cmp
ins
repnz
nop
movs
add
mov
fidiv
cmc
mov
fmul
sti
jnp
or
into
lahf
aaa
inc
test
mov
in
mov
lock
jmp
shl
jbe
out
(bad)
in
stos
xor
and
dec
mov
jg
scas
add
pusha
idiv
xchg
and
xchg
adc
jge
mov
les
sahf
sub
cmp
jmp
imul
push
dec
popf
pop
daa
aam
es
mov
inc
pop
cmp
mov
(bad)
mul
lods
xlat
mov
leave
pop
xchg
neg
adc
cmc
or
cmc
push
bound
pop
arpl
movs
je
mov
or
lods
inc
and
push
mov
(bad)
in
addr16
js
jl
inc
jecxz
mov
enter
xlat
lods
inc
retf
adc
add
cmp
(bad)
cld
iret
xchg
bound
int3
mov
mov
mov
rcr
dec
mov
test
sub
(bad)
jne
int
dec
movs
fsub
mov
xor
das
mov
retf
inc
ds
fcom
or
lea
mov
pop
outs
cmp
movs
dec
popf
or
push
jle
and
mov
cmp
or
ja
inc
dec
loop
mov
cwde
and
ror
add
inc
pop
or
or
movs
(bad)
jbe
inc
push
out
loop
xor
fidivr
sahf
mov
fisubr
mov
pop
jmp
jb
add
dec
jb
push
mov
or
jmp
je
mov
repz
(bad)
jmp
push
or
sahf
pop
push
or
push
jle
retf
ja
fistp
pop
imul
(bad)
outs
mov
in
cmp
push
or
cmp
fiadd
cli
mov
jecxz
fsub
arpl
xchg
push
mov
mov
jmp
loopne
fisttp
outs
or
xchg
sub
scas
(bad)
mov
xlat
xchg
ds
push
sti
loope
orps
pop
out
mov
lahf
popf
pushf
xchg
ror
rol
pop
shr
or
ins
fwait
mov
adc
mov
cmp
xchg
jns
loop
xchg
push
pop
pop
loopne
xor
gs
mov
(bad)
mov
mov
xor
aam
pushf
cmp
xchg
mov
mov
or
call
movs
pushf
les
mov
in
sub
scas
pop
push
aaa
adc
(bad)
dec
or
in
loope
idiv
dec
stos
rcl
xor
sbb
cmc
pop
adc
enter
arpl
dec
stc
shl
push
retf
addr16
nop
xchg
xchg
mov
les
gs
sub
(bad)
scas
aad
fidiv
loop
add
cmc
sub
cld
je
pushf
mov
js
leave
in
sub
call
rcr
adc
push
int3
xchg
cmp
out
jnp
popf
mov
fwait
leave
adc
movs
adc
jle
or
shr
retf
enter
in
push
(bad)
and
shl
push
cmp
popa
in
lds
sbb
jno
add
cli
cmp
jb
xor
and
xor
sahf
repz
xlat
dec
rcl
mov
fwait
push
not
test
cli
fisubr
pop
mov
ror
cmp
adc
push
lahf
imul
inc
pop
jae
mov
jnp
push
add
mov
sub
cmp
adc
or
out
jmp
or
pop
jmp
sahf
and
jns
lods
sub
mov
or
xchg
push
pop
aad
mov
pop
out
in
jno
mul
mov
mov
rcl
xor
jnp
mov
sub
mov
nop
add
sub
js
and
fcmovne
not
jg
imul
mov
shr
push
push
(bad)
inc
and
mov
mov
pop
push
jae
fidiv
int3
dec
imul
int3
jp
(bad)
push
sahf
dec
and
sub
jl
and
pop
xrelease
inc
adc
repz
fsub
lods
mov
stos
pop
sbb
mov
add
xor
fst
icebp
out
rcl
jg
push
push
mov
jae
cmp
ja
fwait
adc
inc
sub
arpl
mov
cmps
push
pop
xor
adc
outs
mov
xchg
test
or
jge
push
sbb
or
sub
xor
pop
imul
or
sbb
mov
or
cdq
movs
xchg
fidivr
pop
popa
cli
push
ja
shl
movs
ins
sub
add
call
jb
scas
shr
push
push
ss
mov
or
fldenv
adc
mov
pop
lock
sbb
push
jecxz
jecxz
mov
push
mov
mov
dec
pop
xchg
leave
jae
pop
std
jns
retf
popf
ficomp
xlat
int
dec
mov
pop
lods
leave
push
cmp
stos
icebp
sbb
lock
outs
cmps
enter
fwait
dec
(bad)
adc
xchg
jge
mov
jae
pusha
(bad)
fstp
jbe
das
jmp
sub
popa
lods
repnz
xor
push
push
cmp
outs
mov
(bad)
pushf
aaa
inc
neg
fmul
fiadd
push
xchg
jne
enter
pusha
mov
adc
js
mov
sub
lahf
inc
shr
ins
pop
dec
scas
pusha
loope
aad
test
mov
xor
test
push
outs
cmp
push
mov
in
adc
je
retf
xchg
jae
shl
xchg
jp
mov
fistp
fucomi
fadd
push
push
sub
pop
sbb
(bad)
pop
mov
inc
xor
mov
cmp
scas
loopne
mov
add
push
mov
pop
cmp
cmps
es
sahf
aas
inc
test
out
mov
hlt
in
dec
sub
rcl
or
mov
and
mov
iret
ds
int3
jnp
pop
call
out
mov
mov
add
xor
xchg
inc
call
mov
(bad)
jnp
pop
cmp
pop
mov
inc
or
lds
xlat
mov
out
cwde
fild
loope
push
jae
push
setne
inc
xor
sub
push
pop
cli
sahf
push
icebp
jg
xor
mov
and
leave
mov
adc
lahf
loope
xor
add
xor
mov
div
xor
cmps
mov
in
pop
adc
mov
test
cmps
nop
inc
(bad)
aam
mov
scas
and
mov
cmps
xchg
out
mov
shl
into
inc
ins
imul
call
shr
sub
or
and
call
sub
fldcw
xchg
adc
or
xor
imul
pop
mov
jbe
popf
mov
adc
mov
jno
test
adc
jle
xchg
cmovle
lea
clc
mov
(bad)
(bad)
sub
pop
mov
add
popa
das
or
retf
sahf
adc
arpl
and
push
test
cwde
sbb
les
test
fwait
out
xor
push
add
in
mov
sbb
icebp
lods
mul
fwait
xor
dec
xor
(bad)
pop
test
add
add
mov
lea
outs
cs
pop
sub
int3
dec
inc
mov
mov
mov
or
mov
shl
test
stc
pusha
fisubr
pop
(bad)
out
js
in
shl
push
mov
xchg
xchg
ins
(bad)
test
rcl
cmp
stos
imul
enter
lds
rol
movs
movs
add
jb
or
push
lea
inc
leave
or
cwde
je
cmps
jl
jecxz
addr16
push
push
rcr
dec
scas
pop
daa
jnp
mov
fstp
push
cmc
mov
push
(bad)
mov
pushf
test
stc
ret
adc
adc
test
out
or
sti
sbb
loop
sbb
loope
sbb
retf
and
pusha
fdivr
or
rol
cmps
mov
in
loop
inc
mov
mov
test
fchs
out
(bad)
pop
sub
jns
mov
mov
cmp
jbe
mov
push
adc
pop
icebp
shr
adc
mov
inc
fwait
fs
outs
mov
sub
add
or
pop
scas
(bad)
je
dec
and
fbld
adc
cmps
dec
les
push
aad
mov
jecxz
fld
mov
adc
lock
inc
imul
xchg
(bad)
cmps
rol
xchg
sub
scas
mov
mov
mov
stos
mov
stos
stos
les
lahf
scas
push
lea
jo
xchg
in
jmp
or
or
dec
cmp
add
cmps
mov
(bad)
popa
cmp
pushf
pop
(bad)
gs
shl
imul
(bad)
jmp
inc
sahf
jle
sbb
push
cdq
ss
dec
sahf
mov
mov
dec
int3
shr
or
sub
inc
pusha
cmp
sub
test
inc
pop
sti
arpl
rcl
test
sub
cmp
cmc
adc
jb
jg
mov
nop
push
out
fadd
aad
cmc
push
loop
inc
xchg
arpl
mov
mov
aaa
jmp
pop
cmp
fs
fwait
idiv
arpl
pushf
sub
lods
cmps
xchg
inc
xor
sbb
mov
aad
call
pop
cmp
or
ret
ins
in
mov
push
mov
mov
xchg
and
jl
shl
movs
cdq
xchg
int
in
xor
nop
xchg
test
aam
test
dec
sti
xchg
cmp
jl
imul
in
ss
sbb
cmp
movs
cmps
mov
mov
or
out
xor
icebp
mov
das
mov
retf
shl
pop
stc
ret
aad
cmp
test
(bad)
int3
push
xchg
sbb
fcomi
call
cmp
push
retf
xor
outs
lock
push
sub
loop
jae
dec
(bad)
fcomp
add
scas
repnz
or
test
dec
bound
dec
in
pop
inc
push
push
xor
hlt
push
pop
mov
or
(bad)
in
stos
outs
movs
sbb
inc
inc
mov
pop
sahf
and
scas
(bad)
out
lea
add
xor
inc
jns
into
stos
iret
std
repnz
clc
sbb
dec
popf
pop
iret
xor
mov
mov
mov
mov
aad
fisub
jmp
fs
push
adc
lea
lock
mov
mov
data16
and
or
ins
sub
jae
jbe
mov
dec
scas
(bad)
bound
cmps
addr16
pop
inc
mov
(bad)
mov
repnz
jns
ret
mov
jns
push
mov
cmp
push
inc
pop
xchg
jecxz
imul
cs
xor
in
inc
jge
mov
jle
sar
or
loop
push
imul
sar
mov
imul
(bad)
mov
or
mov
push
dec
mov
outs
std
sub
call
adc
neg
scas
sub
cs
xor
(bad)
in
call
ret
les
adc
xchg
sub
stos
fldenv
fmul
mov
fst
test
sub
shl
aad
gs
push
movs
adc
mov
stos
dec
cmc
mov
pop
out
mov
mov
mov
ins
es
pop
xor
xor
or
loop
lea
arpl
neg
scas
cmps
inc
jge
aad
mov
mov
inc
or
mov
aaa
and
jae
test
xchg
xchg
xor
sub
daa
cwde
ror
(bad)
push
imul
cwde
push
cmp
dec
or
xchg
xor
icebp
call
mov
mov
pop
mov
jns
icebp
mov
push
fcom
xor
pop
xor
das
popa
mov
popf
ror
es
leave
icebp
sub
arpl
push
fsubr
jno
lahf
add
mov
neg
dec
ror
(bad)
imul
lods
test
out
add
dec
inc
movs
adc
push
ss
mov
pop
jmp
nop
xor
cmp
jmp
popa
jg
out
cmp
sub
pop
mov
add
xchg
inc
jbe
loop
rcr
inc
jae
aas
xlat
dec
call
xchg
(bad)
jmp
cwde
cmp
pop
imul
sub
adc
xor
ret
xlat
mov
mov
inc
ins
inc
xchg
mov
xchg
push
mov
fidiv
push
clc
or
cmp
add
les
rcl
mov
scas
nop
pop
push
outs
jb
sbb
icebp
push
aad
not
mov
and
add
adc
aam
fisttp
and
mov
mov
stos
cmps
test
mov
inc
xor
call
sub
cmp
loopne
out
sub
jno
stos
imul
mov
and
lea
adc
push
mov
mov
mov
cmp
jns
lahf
inc
(bad)
(bad)
xchg
in
xor
mov
mov
lock
test
pop
test
push
dec
loop
dec
lods
push
jo
icebp
data16
xor
aam
jp
(bad)
sbb
and
int
xor
push
xchg
aaa
push
mov
aas
stos
push
push
and
push
jne
mov
fs
test
dec
fdiv
cmp
loop
xchg
pop
mov
scas
adc
adc
es
sub
out
mov
pop
nop
adc
pop
movs
push
imul
push
imul
data16
fs
sub
pop
sub
jb
jne
call
popa
imul
and
fst
mov
shl
jmp
lea
mov
pop
pop
sub
or
mov
imul
xor
scas
mov
mov
sbb
mov
(bad)
test
int
pop
or
mov
adc
test
and
ror
sub
pop
inc
pop
int
add
shr
cs
mov
inc
pop
aad
mov
or
fwait
mov
or
mov
ins
push
jae
in
jns
jmp
inc
sub
add
cld
jbe
mov
sbb
out
sbb
pop
ja
hlt
mov
pop
stc
mul
mov
iret
and
int
int3
sbb
push
mov
xor
pop
sar
icebp
scas
cld
xlat
aad
retf
enter
dec
cmc
sub
mov
mov
or
jmp
xor
push
sbb
call
fwait
lods
lods
rep
fst
inc
aaa
jge
jns
mov
xchg
fisub
jo
xchg
cmp
in
mov
mov
or
fs
sar
dec
shl
pop
retf
jno
inc
shr
pop
test
add
outs
pop
pusha
stc
fld
movs
ror
loopne
cdq
dec
mov
jmp
mov
jle
push
xor
sar
out
cs
mov
push
inc
and
lock
adc
xchg
jno
xchg
xchg
fidiv
xor
xor
test
pop
mov
punpcklwd
mov
inc
outs
cmp
lahf
nop
pop
dec
jae
fcomp
mov
mov
(bad)
enter
rcl
(bad)
adc
and
lahf
pop
xor
mov
sbb
mov
and
pusha
sti
fwait
mov
fidivr
mov
dec
addr16
int3
push
cli
pop
test
cmp
pop
iret
ficomp
lods
adc
cmp
dec
push
inc
mov
mov
repnz
jbe
jecxz
dec
pop
jge
lahf
out
stos
jmp
ret
push
out
aam
ja
(bad)
(bad)
xlat
daa
inc
(bad)
test
sbb
jmp
in
xchg
es
test
mov
stc
xor
adc
call
cmc
xchg
add
xor
xchg
ja
lea
shr
ins
pop
add
mov
pop
mov
jbe
pop
inc
paddd
inc
aam
xor
fbstp
daa
jmp
xchg
movs
push
fcom
mov
sub
mov
lods
mov
or
sbb
ja
icebp
pop
add
dec
dec
lock
gs
inc
out
mov
lock
and
inc
xchg
fldenv
clc
pop
out
shr
add
xchg
push
xlat
inc
loopne
mov
mov
std
sub
mov
jecxz
sar
shl
mov
ja
or
lods
bound
lea
stos
mov
call
out
sub
jmp
push
jb
nop
pop
sahf
jbe
sbb
inc
xchg
jge
pop
cmps
xchg
push
cmps
(bad)
pop
lahf
cmp
ror
inc
scas
jle
push
shr
scas
or
scas
and
sub
push
fsub
(bad)
push
push
rcl
adc
push
hlt
ss
lea
jge
rcl
or
dec
or
jne
movs
sbb
mov
jl
lock
mov
mov
add
cwde
mov
mov
jnp
mov
push
pop
mov
loop
mov
neg
cmc
sbb
fisttp
cs
loopne
xchg
or
adc
es
out
fimul
lahf
stc
inc
movs
imul
lea
(bad)
out
dec
mov
int3
out
inc
push
adc
jno
jns
xchg
cmp
mov
jmp
push
pop
int
or
sub
sbb
adc
pop
(bad)
push
adc
dec
nop
xchg
mov
in
out
sti
and
imul
and
dec
mov
sbb
dec
and
pop
add
adc
cmp
(bad)
retf
jge
push
loop
in
(bad)
jp
daa
pop
jmp
cmp
cmps
xchg
add
and
retf
inc
jg
ror
mov
std
pop
fdivr
not
mov
loop
add
adc
lea
mov
inc
dec
jle
mov
adc
icebp
jbe
jecxz
push
lahf
xchg
inc
rcr
lock
cdq
ret
or
xor
sub
rol
cwde
adc
aas
pop
cdq
sbb
inc
neg
arpl
js
jmp
cmp
std
cmp
push
pop
push
daa
jl
in
inc
jmp
jns
jmp
outs
dec
dec
icebp
out
aad
je
lea
jmpw
pop
data16
push
hlt
pop
sbb
jge
iret
bound
xor
mov
fidivr
pop
or
dec
inc
pmaddwd
add
add
aam
pop
stos
into
jnp
icebp
fadd
jb
lods
inc
pusha
test
cli
pop
or
cdq
loope
add
inc
xor
pop
scas
std
inc
sahf
(bad)
loopne
cmp
(bad)
(bad)
into
cli
push
add
in
into
scas
aaa
loop
popf
cmp
adc
xchg
mov
jae
adc
sub
nop
jg
pop
(bad)
stos
pop
cmp
pop
mov
fisubr
jbe
(bad)
dec
pop
cli
pop
loop
or
nop
mov
mov
inc
je
ins
inc
nop
pushf
push
sti
aaa
jnp
cmp
aaa
jno
ins
(bad)
clc
jo
test
jmp
xor
cld
inc
push
rol
inc
std
arpl
cmp
enter
add
inc
mov
pusha
ins
imul
hlt
int
bound
mov
clc
push
dec
test
dec
es
pop
sbb
test
mov
jg
cmp
pop
stos
push
(bad)
fbld
or
inc
dec
add
fs
adc
xchg
or
leave
daa
pop
inc
xor
sbb
jae
sbb
loope
fistp
dec
cmp
cmp
or
inc
cs
pop
xchg
loopne
arpl
fadd
dec
or
ficomp
push
sub
popf
pop
sbb
fdiv
and
out
ror
jl
rol
out
aad
and
frstor
movs
ja
dec
int
or
pop
repz
xchg
loope
add
mov
xor
add
cmp
mov
out
out
leave
dec
rol
pop
and
inc
and
inc
sub
(bad)
lods
mov
cmp
lock
in
out
or
adc
and
stos
jg
out
rcr
cld
and
fsub
cld
fwait
test
outs
xchg
cmp
sbb
xchg
mov
pop
pusha
cmc
ja
xchg
add
ins
sub
push
movs
lock
aas
js
int
loopne
sbb
pop
sub
retf
and
inc
or
jbe
call
and
cli
push
jbe
aad
add
addps
cdq
sub
fs
pushf
retf
shr
imul
stc
rcl
daa
pop
mov
inc
cli
sbb
iret
movs
or
mov
mov
ds
jnp
cld
cmps
cmp
xor
inc
stos
xor
jns
or
jl
aam
call
add
push
push
es
clc
jecxz
dec
js
in
mov
push
scas
xor
pop
xchg
retf
(bad)
xor
aas
pop
fcomp
daa
sti
mov
and
ret
sub
mov
xor
scas
es
push
cli
xor
sbb
lahf
retf
rol
mov
jae
fstp
mov
adc
jae
(bad)
pop
fadd
in
jb
adc
adc
ficom
add
ficom
ja
xor
ins
dec
ret
xor
mov
add
loope
or
sti
sahf
sub
adc
xor
lahf
pop
xchg
xor
out
and
pop
lods
out
data16
ins
pushf
nop
xor
in
sbb
repnz
or
jg
mov
inc
(bad)
and
movs
data16
and
fs
stos
or
idiv
movs
mov
data16
stos
jge
sbb
push
pop
test
out
mov
and
test
xchg
push
push
ret
pop
stos
(bad)
mov
push
sbb
cwde
and
push
test
add
mov
xor
retf
mov
sbb
retf
cli
into
mov
mov
jb
scas
in
sbb
es
shl
cdq
(bad)
pop
dec
push
js
sbb
loop
fwait
scas
dec
mov
push
xchg
fcom
pop
sub
add
and
dec
pop
ss
cmp
test
cmp
push
pusha
leave
js
push
cmp
mov
mov
retf
sub
adc
popa
js
mov
stos
loop
sbb
inc
xor
nop
jno
pushf
xchg
dec
dec
jb
pavgb
cld
push
lea
push
enter
add
sbb
push
jmp
jo
jp
imul
xor
shr
xchg
nop
push
pop
cmp
mov
mov
fimul
js
int
and
or
pop
daa
scas
mov
in
call
jg
mov
and
call
std
jno
mov
gs
test
int
push
shl
iret
mov
or
mov
dec
arpl
addr16
and
jmp
fstp
jo
outs
(bad)
cmp
loopne
sub
mov
jo
lea
fild
mov
xchg
push
das
add
jecxz
or
icebp
mov
xor
in
adc
pop
jno
outs
scas
(bad)
into
jne
scas
jp
pop
stos
adc
adc
xchg
xrelease
mov
push
push
jb
out
xchg
ins
push
pop
xchg
pop
jbe
xchg
push
cmp
jb
adc
in
xlat
pop
xor
adc
mov
int
adc
sub
adc
ja
nop
mov
jmp
cmp
lock
in
mov
les
sub
pop
cwde
jmp
inc
nop
and
sbb
aaa
mov
pop
imul
pusha
xlat
ins
nop
iret
pop
xchg
movs
mov
fmul
sahf
sub
loop
mov
movs
mov
mov
and
mov
fdecstp
dec
xor
xchg
mov
add
jno
iret
daa
adc
aad
(bad)
or
or
cmp
sbb
mov
or
js
cmp
adc
fimul
hlt
dec
mov
jae
out
rcl
xchg
mov
inc
cmp
pop
dec
push
jbe
dec
mov
add
xchg
in
sti
adc
mov
inc
js
mov
out
fwait
arpl
ret
movs
mov
ja
push
xchg
push
pop
adc
xchg
mov
pushf
and
aas
bound
std
mov
inc
inc
push
cs
inc
dec
cmp
pusha
dec
cmp
sub
ja
cmp
push
inc
js
mov
sar
cmps
xchg
repnz
mov
mov
(bad)
stos
dec
pusha
sub
int3
enter
xchg
push
sub
mov
fidiv
arpl
and
jo
inc
cmp
out
in
jnp
mov
push
and
mov
sub
sbb
mov
das
sub
cmp
pop
in
add
in
xor
ret
adc
sub
mov
xor
popf
icebp
sbb
repz
(bad)
mov
ja
lahf
icebp
sub
push
push
dec
xchg
stos
xor
jp
xchg
push
loopne
jl
mov
cld
cmp
sti
imul
es
xchg
sbb
push
lahf
int3
sbb
or
inc
outs
jae
cmp
in
out
adc
sbb
pusha
fbstp
cmps
pop
mov
iret
adc
jp
sbb
xor
and
cmp
jmp
inc
cmps
(bad)
gs
inc
pushf
jnp
cmp
mov
jmp
inc
add
je
jbe
pop
jb
ins
ds
adc
or
xchg
test
shl
pop
push
or
fwait
aaa
pop
and
stc
mov
jmp
and
movs
mov
cmp
or
xchg
add
daa
cmp
or
jl
mov
pop
inc
and
enter
movsx
adc
int3
sbb
xor
sar
sub
or
movs
sub
and
sbb
aad
ins
cmp
bnd
jge
(bad)
jmp
dec
inc
shl
movs
std
lods
cwde
jae
cli
pop
sbb
aam
fs
(bad)
int3
test
and
ja
xlat
jno
(bad)
cmp
inc
pop
data16
fs
mov
int
out
cmps
push
lds
pop
and
xchg
jns
retf
fs
mov
scas
cmp
cmps
fwait
inc
pop
rol
ins
push
push
loope
outs
push
into
xchg
pop
and
scas
jl
push
stos
out
(bad)
ja
fdivrp
int3
popf
ds
adc
daa
mov
(bad)
mov
nop
jmp
scas
bound
cwde
mov
mov
mov
das
mov
dec
cmp
pop
jb
daa
rcl
imul
mov
(bad)
push
mov
call
int3
cmp
sbb
loop
bound
xchg
jae
ror
inc
mov
sbb
xor
sub
inc
add
out
sub
sbb
pop
cmp
iret
div
sbb
pop
pop
std
in
xchg
add
nop
ror
add
dec
pop
push
ret
and
xchg
push
aas
cmp
je
test
les
call
pop
mov
psrlq
into
call
ss
cmps
add
cmovo
outs
mov
sub
(bad)
fistp
out
test
xchg
mov
in
jmp
ins
dec
cmp
loopne
cmp
adc
ret
add
push
pop
(bad)
cmp
xor
xchg
sub
rcr
aas
fldcw
sbb
jns
mov
xor
push
rol
push
xchg
fmul
sbb
xchg
xor
aam
cdq
dec
sar
in
jns
std
es
loope
mov
or
xchg
pop
scas
and
push
pop
inc
xor
fstp
adc
imul
sbb
pop
xchg
jg
xor
xchg
and
repnz
repnz
cmp
mov
jp
add
mov
movs
lock
je
jns
mov
test
adc
xchg
cdq
or
enter
jnp
aas
xchg
jae
xchg
jno
stc
push
daa
fstp
add
push
pop
imul
andps
dec
mov
adc
cmp
add
mov
xchg
out
mov
pop
movs
mov
jno
repz
sbb
add
es
mov
fld
mov
mov
test
pop
fmul
or
rcr
xchg
jp
or
and
sahf
adc
jp
xor
inc
fld
call
xor
and
sar
mov
dec
adc
xlat
sti
add
es
les
int3
repz
or
aaa
add
pop
stc
xchg
cmps
and
sti
xor
push
xor
mov
sti
rcr
inc
mov
push
add
add
jl
dec
ret
fnstsw
cmp
xchg
adc
aas
ret
jno
jle
ret
retf
pop
gs
popa
les
das
lds
inc
and
push
pusha
shr
dec
cmps
cli
xor
and
fcmovu
push
jne
cli
nop
(bad)
jecxz
mov
xchg
(bad)
and
cdq
cmps
ds
mov
hlt
idiv
inc
add
jnp
sbb
retf
jg
test
pop
aaa
mov
adc
(bad)
out
push
lock
xor
ins
push
imul
or
lods
mov
loopne
das
xchg
fmul
out
pop
dec
retf
nop
sbb
pop
mov
stc
jne
sbb
dec
jns
sub
daa
xor
shl
ins
addr16
xchg
test
imul
sub
mov
adc
(bad)
nop
adc
or
xor
mov
add
test
shl
inc
scas
in
pop
mov
shl
xor
frstor
icebp
in
dec
mov
xor
neg
out
or
jno
inc
push
pop
xchg
pop
dec
data16
aas
mul
nop
and
jge
scas
call
jmp
push
clc
retf
aas
or
push
cmps
push
jo
imul
or
inc
stos
mov
js
mov
mov
push
mov
fwait
cmp
pop
mov
sub
xchg
out
xlat
fsub
shr
adc
lods
inc
ins
jp
loope
retf
mov
pop
clc
dec
ja
in
xchg
movs
(bad)
(bad)
scas
add
pop
repz
fadd
dec
sahf
fdiv
ds
or
or
shr
rcl
call
xchg
add
mov
cmp
mov
jmp
mov
cmp
cmps
pop
lea
(bad)
scas
fisttp
jne
mov
sbb
pop
imul
loopne
dec
push
adc
add
scas
addr16
or
adc
fs
es
mov
or
and
dec
loopne
iret
movs
add
inc
jecxz
fisubr
mov
cli
mov
iret
rcr
mov
mov
test
es
test
mov
push
mov
xor
xchg
jge
leave
(bad)
jmp
cs
ror
mov
outs
clc
jb
xchg
clc
and
xchg
push
sbb
movs
jl
and
stos
in
cwde
inc
aad
pop
or
mov
jnp
mov
pop
shr
add
fidivr
(bad)
into
pop
lds
mov
xchg
mov
pop
loop
adc
xchg
push
pop
leave
or
cmps
rcl
pop
or
div
out
rol
mov
js
mov
sti
jle
dec
dec
pop
data16
cmps
jns
into
gs
mov
adc
push
bound
arpl
cmp
in
into
jecxz
inc
sbb
cmp
and
shl
add
sahf
and
div
pop
xchg
dec
xor
or
int
adc
call
add
das
retf
push
mov
ret
scas
jg
out
int
dec
cld
xchg
pop
sub
(bad)
sbb
sub
int
xlat
dec
js
push
rcr
in
rcr
inc
das
(bad)
dec
(bad)
aas
mov
mov
sar
mov
sub
sub
out
ret
xchg
mov
or
aas
cdq
xor
hlt
inc
jmp
loop
and
and
inc
dec
(bad)
fcmovu
dec
fmul
ss
ret
sar
xor
or
sub
lea
daa
cli
dec
inc
and
dec
call
ins
inc
or
mov
loope
or
fld
xchg
sbb
dec
xchg
cmp
pop
jle
out
es
jle
aam
push
mov
mov
inc
pop
lock
adc
clc
or
xchg
xor
push
repz
int
shr
call
scas
or
shl
mov
dec
pushf
mov
ss
pop
lea
int
sbb
dec
inc
clc
cs
test
sub
jge
fmul
dec
or
or
mov
push
xor
xchg
mov
xchg
pop
jo
in
aaa
pop
ficom
imul
xchg
int3
or
ret
xchg
aas
mov
mov
sbb
cli
retf
xchg
adc
jo
fadd
imul
cmp
bound
push
imul
jge
(bad)
jmp
fs
push
push
jp
in
jmp
jl
jmp
xchg
add
mov
xor
sti
rol
mov
and
cmp
sbb
repnz
pusha
mov
fild
sub
ins
mov
jmp
stc
ja
lock
rep
pop
daa
dec
sub
arpl
cmp
mov
and
call
push
fld
xor
shr
push
sahf
add
out
sub
mov
xor
aad
cwde
lock
mov
ds
popf
mov
mov
js
bswap
adc
lea
ja
mov
iret
jns
dec
cli
jg
stos
ror
add
cdq
call
mov
push
jno
xchg
cmp
jno
pop
out
cmp
inc
dec
jnp
mov
das
std
jnp
popf
shl
fisttp
in
loope
daa
into
mov
shl
scas
pop
pop
or
je
ds
pop
idiv
jno
push
popf
push
inc
das
pop
push
mov
jns
xchg
mov
push
jae
pop
push
pop
ror
lahf
stos
jno
imul
xchg
jbe
dec
xchg
dec
or
jmp
jb
sub
stos
mov
mov
pop
mov
push
dec
mov
mov
mov
mov
in
ds
xchg
jg
fs
jo
xchg
push
sub
or
in
sub
test
test
ja
(bad)
scas
jnp
mov
jg
lods
mov
mov
enter
out
mov
jo
pop
cmp
pop
pop
push
and
jp
xchg
sbb
adc
daa
pop
or
cld
push
inc
call
ds
das
or
ss
jnp
cli
call
cmps
mov
sti
mov
cwde
call
in
jmp
enter
not
xchg
aas
push
ins
ds
pop
and
or
call
lea
push
dec
sbb
cmp
in
shr
hlt
shl
enter
jge
jp
inc
jl
cmps
jb
sub
ds
pop
sub
jge
mov
lds
sub
dec
jne
cmps
sbb
mov
arpl
fs
into
(bad)
and
mov
sub
mov
gs
jg
pushf
xor
lods
gs
enter
jno
mov
sub
push
adc
in
test
mov
ss
sub
inc
ficom
sub
sar
mov
test
mov
lods
ds
inc
sub
pop
outs
ret
or
bnd
sbb
mov
mov
in
sbb
sub
dec
outs
xor
pop
cmp
push
and
sbb
popa
sub
mov
ja
push
jmp
daa
repz
nop
sub
sub
movs
lds
pop
sub
rcr
mov
xor
in
add
out
mov
hlt
inc
movs
ins
add
lods
inc
push
mov
aad
stos
push
(bad)
xchg
(bad)
rol
inc
dec
jnp
xchg
and
repnz
loopne
(bad)
scas
xchg
mov
pushw
aaa
sar
addr16
sub
mov
iret
push
aam
sub
xchg
mov
or
mov
imul
(bad)
leave
jecxz
fsubp
test
jb
inc
ins
sub
mov
cld
test
es
test
aas
and
(bad)
and
scas
je
and
iret
cmps
shl
das
xchg
dec
ins
push
pop
add
sub
movs
mov
stos
and
fstp
adc
mov
cmp
push
fcompp
fsubr
mov
mov
ss
out
and
push
fwait
stc
call
push
(bad)
cmp
outs
imul
push
cmps
nop
adc
mov
loope
jp
mov
adc
xchg
or
sahf
fidivr
jae
cmp
ret
cwde
lods
scas
inc
fist
adc
mov
dec
jl
mov
fst
push
mov
or
loope
sub
ja
dec
pop
jno
in
dec
pusha
pushf
cmc
cmp
jg
sbb
push
jmp
cmp
mov
mov
in
stos
push
pop
and
inc
jbe
(bad)
div
adc
sub
sar
sub
cmc
cdq
imul
mov
movs
mov
sbb
dec
or
arpl
or
or
dec
mov
jl
inc
ja
add
cli
lods
inc
and
(bad)
xchg
dec
and
sti
dec
sahf
xor
push
ficom
xor
add
xor
fsubr
in
sub
xchg
add
fcomi
jle
sub
ret
xchg
rcl
mov
xor
outs
or
std
push
adc
jnp
xor
outs
ja
(bad)
stos
fbstp
stc
retf
cmps
and
rcr
pop
mov
pop
and
in
ins
add
cs
lods
xchg
popa
scas
addr16
icebp
or
mov
test
das
int3
jne
push
stos
in
ror
scas
mov
cli
pushf
inc
lods
add
retf
xchg
rol
mov
rcr
mov
jecxz
je
out
sbb
mov
call
xchg
mov
out
dec
and
ror
fcmovnu
jne
not
dec
pop
pop
stos
rol
and
dec
and
(bad)
mov
mov
vpsubusb
pop
sar
and
cmc
push
pop
fnstenv
scas
mov
push
jecxz
aad
mov
xchg
lods
sbb
mov
pop
imul
(bad)
xchg
jp
jl
push
mov
and
xchg
mov
xchg
rol
inc
xor
cmps
dec
dec
jno
xor
sbb
popf
cwde
jp
sahf
adc
into
ret
jns
int3
hlt
xor
adc
int
mov
dec
arpl
stos
jecxz
pop
push
enter
mov
lods
test
inc
and
in
outs
mov
pop
pop
call
or
sub
cmp
leave
mov
add
(bad)
ds
pop
arpl
ds
xor
mov
data16
mov
dec
loop
add
sbb
nop
jne
retf
mov
mov
in
xchg
cmc
jl
add
xchg
pushf
mov
cmps
and
arpl
push
xor
fbld
enter
(bad)
call
stc
scas
and
pusha
test
stos
fbld
aam
pop
mov
aaa
add
sub
add
test
add
(bad)
rol
and
sub
push
jns
lock
sbb
xor
add
push
jbe
mov
hlt
std
bound
jmp
jo
rcl
repz
inc
call
jno
je
cmp
test
movs
push
pushw
fucom
mov
jo
setl
cmc
mov
(bad)
aad
pusha
lods
add
or
dec
call
addr16
or
mov
scas
jle
sbb
xchg
enter
test
test
in
jnp
push
repnz
or
mov
pop
(bad)
(bad)
sub
popf
sbb
and
imul
cmp
retf
leave
outs
sbb
inc
addr16
test
leave
inc
xchg
sub
add
retf
retf
sub
push
adc
outs
int3
push
and
ss
sub
not
in
push
inc
ret
jg
out
(bad)
stc
jl
shl
fcom
pop
sbb
scas
sahf
clc
ja
push
and
mov
sbb
push
jecxz
mov
mov
les
lds
out
push
jbe
jns
push
xchg
lods
pusha
inc
das
les
push
xor
pop
pop
mov
push
sar
ins
inc
div
call
sub
xchg
push
icebp
jo
movs
pusha
clc
push
jb
sbb
idiv
add
add
int3
sbb
sbb
add
jb
xchg
cmp
scas
in
push
frstor
jo
xchg
lahf
mov
mov
out
mov
pop
ds
aas
call
mov
or
jb
gs
ror
in
adc
inc
leave
into
(bad)
mov
or
lahf
pop
xchg
push
pop
imul
inc
mov
fisub
push
push
mov
std
sub
icebp
cmp
test
dec
mov
loop
and
outs
fcomp
(bad)
fbstp
push
fisubr
fbstp
push
mov
fs
and
xor
add
imul
mov
pop
sub
out
push
shl
add
fdiv
aas
add
mov
xchg
call
cmp
test
bound
xor
jno
fs
gs
or
xchg
aas
(bad)
jae
jg
test
inc
xchg
(bad)
adc
dec
call
mov
rep
cld
push
mov
jmp
idiv
(bad)
(bad)
mov
fnstenv
call
add
pop
push
shr
and
cmp
fistp
jg
in
cmp
icebp
jne
jl
cmps
pusha
mov
sub
or
fdiv
cmp
aaa
add
rol
outs
fcom
cmp
lock
jecxz
fcmovnu
ror
sub
jae
inc
fistp
out
push
xchg
jmp
dec
mov
inc
mov
stos
in
in
xchg
cmp
cmps
adc
adc
stos
outs
mov
push
cmp
les
and
dec
es
out
jp
xchg
loope
sbb
mov
repnz
fadd
rol
mov
pushf
gs
cli
mov
xchg
mov
pop
sbb
inc
fcomp
dec
neg
loop
scas
cmps
(bad)
sub
int
test
sub
mov
jmp
xchg
out
mov
pushf
dec
push
jbe
call
in
and
xor
pop
jmp
push
out
xchg
add
inc
push
sbb
mov
mov
and
mov
test
(bad)
and
adc
fwait
adc
or
test
cmp
shr
lods
and
nop
arpl
cmps
jnp
push
es
pop
sub
pop
mov
lods
dec
pusha
xchg
dec
daa
mov
pop
sub
jae
xlat
sbb
or
out
ret
aam
shl
out
add
sbb
es
or
fcmovnu
add
cmp
cs
pop
loop
(bad)
cld
(bad)
mov
inc
xor
jnp
xchg
fld
addr16
repnz
sub
mov
das
push
mov
popf
rol
and
mov
mov
ret
sbb
es
mov
sub
call
xor
inc
xor
dec
(bad)
push
adc
imul
mov
inc
sub
es
retf
fwait
shl
xchg
push
lods
inc
clc
jmp
push
pop
xor
shr
mov
movs
bound
mov
lahf
cld
mov
pop
xchg
mov
sbb
xchg
sbb
fidivr
shl
iret
fldenv
add
pop
mov
or
loope
add
adc
(bad)
in
mov
aas
inc
cmp
add
jnp
clc
mov
mov
push
inc
mov
sub
xor
mov
push
fistp
dec
inc
adc
test
in
jecxz
retf
out
out
movs
and
push
sbb
push
inc
fisubr
sbb
mov
dec
enter
cmp
fimul
arpl
sbb
mov
fmul
test
adc
mov
mov
mov
xlat
retf
jle
or
das
ficom
mov
add
ins
(bad)
int
clc
out
sar
jb
movs
inc
shl
sbb
lods
jmp
movups
push
stos
cdq
ficomp
or
imul
paddsw
mov
pop
add
xchg
sbb
sahf
leave
xor
ret
(bad)
call
ins
pop
adc
rcr
fldenv
test
je
xchg
cmps
(bad)
pusha
out
adc
adc
sbb
push
mov
adc
mov
adc
sub
jp
pushf
sbb
add
pusha
mov
cmps
jb
mov
xor
mov
sub
add
ds
sbb
xor
scas
ins
sbb
dec
mov
dec
or
push
cs
pop
in
cld
inc
pop
shr
mov
repz
retf
cmp
js
in
mov
mov
dec
(bad)
rol
and
ret
retf
jl
jae
call
and
mov
mov
retf
sbb
mov
inc
pop
pop
push
test
dec
es
ins
sbb
cmc
leave
pop
sbb
movs
dec
loope
add
aam
xor
dec
xchg
and
jg
leave
xchg
sbb
ins
arpl
sbb
jne
aaa
sbb
dec
xlat
sub
and
jge
test
sub
fdivr
std
jl
cwde
outs
fdivrp
mov
out
int3
ds
mov
int
jl
ret
ins
xor
cmp
pop
push
bound
popa
fst
pop
mov
dec
aad
je
sar
adc
dec
pop
outs
pop
fbstp
icebp
jne
and
jl
(bad)
pushf
shr
(bad)
adc
cld
pop
ret
mov
sbb
sbb
jp
aam
dec
test
ds
mul
push
dec
movs
std
sub
cs
push
push
jl
hlt
add
xchg
out
cli
(bad)
ficom
lods
inc
xchg
(bad)
mov
fisttp
cmp
(bad)
mov
push
lds
out
addr16
out
int
cmps
mov
mov
push
or
pop
icebp
iret
ds
jmp
cwde
pop
cmp
fwait
sbb
mov
int3
into
clc
repz
cdq
test
jle
cmp
mov
sub
xchg
dec
(bad)
out
xor
jns
inc
fistp
mov
xor
adc
add
push
mov
test
les
arpl
add
mov
push
in
mov
mov
pop
push
ins
cmp
iret
xchg
int3
mov
jmp
mov
loop
into
in
test
mov
push
test
ficomp
outs
repz
(bad)
inc
mov
(bad)
sub
push
pop
push
push
das
ret
cli
mov
je
je
mov
test
fdiv
call
les
mov
(bad)
test
in
pop
adc
into
dec
(bad)
fcomi
mov
pop
hlt
xchg
in
ins
mov
js
push
sti
push
dec
xchg
iret
fadd
hlt
push
or
lods
lods
movs
cmp
ret
and
iret
and
into
or
dec
sbb
cmp
sbb
cmp
or
mov
or
aas
jmp
adc
mov
xchg
scas
xor
data16
dec
cmc
xchg
inc
loope
lock
das
fucomi
fstp
mov
mov
cli
aad
xor
xor
add
lds
mov
mov
jns
pop
mov
mov
mov
sub
data16
push
mov
adc
add
icebp
(bad)
mov
jmp
dec
pop
fdivrp
xchg
dec
dec
mov
out
mov
js
scas
pop
sub
jp
mov
add
mov
aas
inc
or
lods
lahf
call
dec
cwde
jb
jmp
mov
mov
mov
jp
push
sbb
test
pusha
inc
int
dec
push
xor
dec
sbb
add
dec
cmp
das
push
(bad)
arpl
dec
cdq
dec
inc
dec
adc
mov
stc
retf
xchg
mov
sbb
inc
shr
and
cmp
pop
or
in
lea
push
dec
inc
or
push
(bad)
inc
pop
fiadd
aas
mov
xchg
push
mov
inc
xchg
(bad)
jl
mov
fmulp
hlt
in
mov
mov
iret
add
cmp
nop
pop
xchg
jge
jmp
inc
ret
xchg
aaa
push
shr
jnp
lock
sbb
cmp
dec
and
popa
mov
sub
inc
sbb
push
sbb
test
push
iret
movs
sbb
dec
push
(bad)
dec
pop
push
test
jae
in
push
imul
add
adc
(bad)
popa
xchg
and
xchg
sbb
push
sbb
scas
mov
les
pop
ins
sbb
(bad)
sub
pop
sub
xor
ins
ror
adc
movlps
movs
add
mov
pop
nop
mov
lahf
pop
inc
add
int
mov
iret
add
(bad)
mov
cmp
inc
inc
clc
aaa
or
das
push
leave
fbstp
fst
sbb
sub
jp
inc
xor
(bad)
imul
xchg
mov
ins
movs
push
jecxz
mov
add
mov
jle
in
(bad)
or
mov
push
sub
dec
jmp
dec
cmps
into
repz
daa
int
enter
xchg
add
sbb
or
push
xchg
mov
adc
jne
test
jns
push
out
iret
je
adc
in
xor
xchg
mov
sbb
or
sbb
dec
xchg
jmp
push
fwait
xor
ss
jmp
fs
out
adc
(bad)
repnz
mov
outs
jmp
sbb
jb
xchg
add
loopne
(bad)
pop
call
add
lock
push
int3
lahf
xor
sbb
xor
push
inc
pop
xor
sbb
jno
lahf
lods
loope
jmp
add
fyl2xp1
mov
movs
xchg
xchg
push
in
lods
gs
call
ror
pop
jge
out
dec
jmp
rol
sbb
cmp
adc
dec
pop
in
xchg
ret
sub
mov
mov
inc
and
pop
inc
psubw
inc
call
js
and
or
imul
or
and
push
push
xchg
inc
inc
int3
xor
mov
aas
(bad)
xor
addr16
int3
jecxz
ja
stos
push
mov
push
out
fst
test
push
in
dec
and
in
or
and
sub
int3
call
and
call
(bad)
int3
push
pop
jecxz
inc
jl
dec
lock
dec
fisub
xchg
adc
js
(bad)
jg
jecxz
aam
call
xor
shl
cwde
xchg
aam
popf
dec
ss
cwde
mov
sbb
aas
add
(bad)
shr
add
aad
or
jns
xor
cmps
jns
dec
cmp
(bad)
xchg
and
cmp
add
mov
les
or
and
mov
mov
loop
test
sbb
xchg
and
inc
inc
(bad)
call
call
mov
loope
sbb
lea
xchg
pop
sub
bnd
and
mov
inc
out
push
in
cmp
popf
sbb
ficomp
mov
test
outs
mov
adc
repnz
or
or
jmp
rol
sub
cmps
mov
push
rol
and
jmp
(bad)
jmp
popf
mov
push
mov
add
scas
push
xchg
(bad)
loop
popf
in
cmp
xor
or
(bad)
retf
inc
cwde
sbb
mov
clc
inc
jl
popa
ret
fcom
xor
pop
outs
les
cwde
sub
lock
inc
lds
fadd
aad
data16
pusha
or
ret
or
pop
xchg
jno
mov
pop
cdq
cli
mov
dec
lods
ins
test
iret
push
loopne
inc
adc
jl
pxor
ss
pop
jg
mov
xor
or
push
xchg
lods
je
mov
jns
mov
pushf
leave
sbb
xor
push
ror
jg
xchg
inc
pop
push
xchg
cmps
add
push
mov
fnstsw
dec
leave
out
retf
imul
fsub
adc
sbb
stos
scas
cli
and
in
std
paddusb
scas
mov
fidivr
stc
push
aad
fwait
jmp
addr16
jge
pop
push
int3
sub
lods
inc
jo
imul
xor
sahf
into
out
outs
stos
fmul
inc
dec
stc
pop
jne
lods
cli
sub
leave
repnz
shl
xor
sti
fldcw
cmps
mov
std
mov
scas
movs
adc
mov
icebp
or
mov
inc
jae
dec
mov
jnp
or
out
ret
mov
gs
push
ror
xchg
cmp
lock
shl
sti
mov
stos
lahf
and
ror
pop
add
jnp
jmp
imul
add
sahf
ins
mov
lock
push
cmp
mov
inc
aas
xchg
aaa
ftst
(bad)
xlat
xor
cmp
pop
mov
ret
fsubr
out
leave
mov
dec
push
adc
xchg
pop
das
enter
pop
jne
or
mov
xchg
(bad)
lods
jp
das
popf
int3
aam
pop
mov
lea
xchg
jns
sti
mov
mov
prefetch
cli
or
nop
mov
mov
sti
jnp
cdq
mov
imul
pop
pop
adc
inc
dec
in
mov
push
sub
push
mov
adc
dec
sar
xlat
lahf
nop
cmc
fwait
out
test
pop
push
loopne
jg
(bad)
sbb
jnp
mov
gs
pusha
jg
cdq
xor
and
int3
cmp
test
sub
inc
dec
push
mov
retf
jmp
popa
mov
pop
out
lock
repz
sbb
(bad)
xchg
outs
aam
(bad)
mov
and
mov
cmp
inc
or
dec
movs
(bad)
sbb
ret
mov
xor
sub
(bad)
test
pop
jecxz
mov
pushf
out
pushf
bnd
daa
ret
lods
out
pusha
xchg
push
es
push
or
loopne
sub
icebp
or
leave
ret
and
popa
pop
cmc
movs
std
jl
and
stos
gs
in
mov
es
xchg
pop
(bad)
retf
push
call
jmp
pop
nop
aad
adc
lods
mov
adc
hlt
jl
ins
push
out
std
jge
lahf
jg
cmp
cmc
jecxz
and
test
(bad)
dec
xor
sub
lahf
mov
or
jne
pop
test
mov
sbb
fdivr
mov
or
jle
jb
imul
rcl
push
call
mov
xchg
aaa
cwde
xlat
call
sub
fistp
pop
mov
shufps
push
(bad)
out
sbb
sub
and
ds
aas
inc
mov
loopne
out
aas
jo
xchg
das
aas
and
mov
inc
mov
cmp
add
out
sti
push
mov
jmp
shr
dec
and
mov
hlt
lea
jp
test
cmp
pop
jae
out
mov
int
dec
fstp
mov
icebp
iret
stos
mov
inc
sub
cmp
inc
mov
inc
or
mov
movs
ror
add
xor
mov
jmp
and
out
fidivr
lds
mov
call
ret
gs
neg
(bad)
iret
in
or
mov
outs
pop
lea
xor
push
into
mov
pop
cmps
dec
nop
and
mov
aas
inc
lock
jbe
dec
shl
mov
test
loop
jne
mov
mov
dec
add
js
fldcw
popa
pop
je
ds
cmp
sub
int
adc
and
push
pop
adc
fimul
push
aad
jmp
dec
dec
repnz
mov
sbb
mov
aam
call
mov
lea
int3
ja
sbb
fild
(bad)
pushf
pop
aaa
inc
xchg
jge
push
pop
les
lds
cmps
inc
sti
imul
push
mov
sbb
test
and
mov
add
jbe
ins
xchg
in
adc
rcl
sub
test
fdiv
pop
ds
sbb
mov
(bad)
sbb
nop
sbb
inc
js
out
sub
out
loop
test
lods
fsubr
mov
xor
sbb
ds
rcl
fidivr
jno
lahf
mov
mov
pusha
dec
push
jg
dec
mov
aad
push
into
fsubr
push
les
nop
mov
fbstp
sti
mov
and
bound
out
out
cmp
push
scas
pop
std
pop
pop
inc
out
inc
mov
(bad)
loopne
(bad)
sti
in
jmp
or
mov
dec
push
mov
mov
shl
sub
add
sub
lahf
ret
repnz
loopne
xchg
xor
pop
dec
xchg
xor
jo
mov
push
mov
push
cmp
into
jl
sti
mov
xchg
xor
int3
popf
sub
xchg
mov
mov
popa
mov
jmp
fistp
fdivr
mov
sub
jmp
dec
sbb
outs
data16
adc
cmp
(bad)
enter
and
shl
test
and
jae
jge
dec
push
int
loop
fcomp
imul
xchg
and
repnz
adc
scas
shl
out
mov
sbb
call
mov
add
or
(bad)
repz
xchg
movs
xchg
das
cld
jl
mov
xor
push
mov
pop
fistp
scas
mov
loope
jnp
aam
xchg
jmp
or
add
mov
stos
in
sahf
sub
mov
cld
dec
mov
nop
dec
test
mov
fs
sti
pop
neg
mov
push
sub
mov
test
fbstp
pop
pop
xchg
xor
pop
sub
out
pop
hlt
cli
jo
push
mov
cwde
mov
xchg
push
xchg
lods
movs
into
jle
call
movs
mov
or
in
fsubr
fisttp
and
and
cmp
xchg
aad
(bad)
mov
fwait
xchg
or
sbb
push
fs
pop
ins
jmp
in
(bad)
call
inc
std
xor
stc
fbld
push
sbb
or
push
xor
mov
xchg
adc
xchg
inc
es
ror
call
mov
fwait
mov
jg
xor
xchg
rcl
(bad)
repz
(bad)
jne
stos
cdq
lahf
movs
dec
jmp
push
ror
ficomp
pop
cmp
jge
mov
mov
jl
xor
loop
je
adc
fbstp
fisub
pop
and
push
push
lock
add
lea
ret
add
sub
hlt
dec
je
push
pop
iret
mov
cmp
cs
int3
dec
adc
in
cmc
scas
mov
jge
jge
add
in
fs
sub
jge
and
test
xchg
iret
in
push
bound
icebp
addr16
jp
into
cs
(bad)
addr16
mov
pop
cmc
ins
xor
sti
popf
mov
mov
arpl
add
jl
sbb
cdq
dec
xchg
pop
outs
mov
inc
mov
push
mov
mov
ret
push
sub
or
ja
das
pop
xchg
inc
pop
(bad)
sahf
push
repnz
not
icebp
jbe
sbb
in
jp
lods
fxam
and
lahf
push
lds
fmulp
not
sub
das
xor
mov
stos
(bad)
pop
add
gs
out
in
jnp
dec
ret
xchg
cmps
lea
test
enter
neg
jo
rol
cdq
in
cmc
mov
pop
repz
fist
outs
xor
arpl
ins
lea
adc
inc
adc
es
int
in
(bad)
jno
push
push
jae
loop
jecxz
jmp
add
add
(bad)
popf
and
xor
cmp
ins
mov
push
rol
out
or
stos
nop
mov
push
push
bswap
lods
sub
inc
adc
ja
mov
push
sti
adc
xchg
mov
popa
int
xchg
sbb
sti
xchg
inc
shr
enter
dec
adc
or
(bad)
push
jecxz
xor
dec
(bad)
xor
lods
fidiv
push
scas
mov
pop
jmp
xor
out
xor
ret
inc
stos
inc
in
mov
mov
hlt
and
sub
mov
ins
nop
sar
out
mov
icebp
repz
popa
cmps
jns
call
xor
mov
ins
or
icebp
and
mov
jmp
pop
push
jo
(bad)
jmp
jecxz
or
cmp
sub
(bad)
xchg
lock
pop
retf
mov
pop
or
and
xchg
cli
jge
jb
inc
mov
jmp
ins
or
clc
out
and
sti
cwde
sbb
fist
cwde
outs
pop
mov
pop
xchg
js
out
pop
stc
sbb
lea
out
pushf
arpl
or
xchg
movs
les
push
pushf
cdq
mov
dec
xchg
push
ja
fucomi
xlat
retf
scas
adc
sbb
push
mov
pop
xor
inc
aaa
xchg
jnp
dec
outs
pusha
xchg
sbb
js
xor
pop
imul
mov
mov
adc
gs
(bad)
push
inc
dec
push
stos
xchg
jno
add
push
or
mov
dec
jns
shr
push
xchg
mov
adc
push
xchg
hlt
clc
pop
sbb
mov
cld
enter
enter
cli
cmp
dec
xor
jmp
mov
xchg
xchg
or
lahf
cdq
pop
jnp
inc
jp
inc
mov
loope
cmp
mov
mov
mov
cmps
(bad)
jmp
sub
call
retf
jecxz
stos
out
pop
dec
cs
(bad)
rol
push
test
movs
jmp
xchg
out
call
ret
xor
rep
mov
or
popf
icebp
stos
xchg
sbb
xor
sub
fisubr
(bad)
clc
popf
scas
or
fldcw
mov
add
cmp
xor
push
or
mov
rol
jmp
push
pop
into
fdivr
xor
mov
cmp
push
aas
mov
push
cmp
jo
or
mov
push
sbb
dec
and
mov
jbe
sar
xor
cmp
xchg
cmp
call
(bad)
pop
int
adc
or
test
or
test
mov
fstp
loop
dec
mov
inc
test
das
mov
sub
cmps
dec
mov
ins
sbb
add
cmp
lds
and
scas
shld
stos
pop
icebp
add
sahf
xchg
aas
fisubr
sub
cmps
mov
in
fsubr
add
jle
aas
xor
retf
jne
pop
pop
mov
aas
jecxz
xor
sbb
adc
test
popf
inc
fstp
or
xor
inc
stc
shr
shl
cmp
or
mov
inc
inc
push
addr16
nop
out
lods
outs
and
push
jg
out
mov
std
fst
test
clc
mov
push
cwde
fwait
or
push
data16
or
xchg
mov
mov
jg
jecxz
int
or
jp
mov
push
cmc
cmc
sbb
push
loope
ss
in
int3
cdq
(bad)
jmp
les
fmul
fsubr
ret
mov
ror
cli
pusha
lahf
cmp
sbb
jno
call
sub
(bad)
lods
dec
xor
cmp
std
int
fisttp
nop
sti
push
in
(bad)
and
imul
jmp
ins
ins
fwait
addr16
jmp
imul
popf
dec
cmc
shl
mov
sub
rcr
mov
cwde
(bad)
fistp
xchg
inc
jl
ins
add
cmps
dec
mov
add
movs
ror
push
lds
mov
outs
mov
inc
mov
sbb
jg
and
shl
outs
out
inc
sbb
xchg
aad
(bad)
sub
daa
fist
xchg
ja
movs
xor
retf
jl
and
cmp
cs
movs
pop
inc
mov
arpl
std
mov
adc
mov
mul
or
lods
push
xor
or
aaa
push
je
imul
aaa
add
repz
pusha
mov
aas
stc
int
sbb
mov
push
dec
inc
retf
or
cmps
repz
mov
ret
jecxz
sub
sub
and
cmp
aas
sbb
add
pusha
adc
scas
out
pusha
add
xchg
imul
mov
loope
xchg
fs
mov
pop
imul
sar
shr
mov
add
stc
mov
(bad)
les
xchg
pusha
and
mov
scas
cwde
cld
jae
push
sahf
jp
adc
or
mov
add
pop
push
pop
cmc
out
dec
hlt
fstp
js
(bad)
pop
lods
mov
rcr
pcmpgtb
lods
mov
in
repnz
scas
aaa
adc
sbb
lds
test
and
mov
ret
jbe
dec
daa
mov
push
xchg
aam
push
inc
and
cwde
cmps
xchg
push
ficom
mov
outs
leave
jne
cmps
call
xchg
dec
push
jne
sbb
dec
ret
cmp
dec
jl
inc
sub
push
pop
fwait
loop
pop
int
and
sub
dec
fisttp
in
adc
mov
and
lods
cmp
mov
add
adc
inc
mov
mov
lods
cmp
xchg
push
cmp
sub
adc
mov
mov
and
pop
mov
pop
ror
jnp
lahf
out
rcl
pop
lods
jl
mov
mov
and
cmps
xchg
inc
add
enter
scas
mov
cmp
stc
adc
xor
sbb
add
lock
cdq
dec
add
ror
add
xor
in
loope
xchg
or
ret
(bad)
popf
int
mov
arpl
sub
sahf
fisub
sbb
push
jbe
stos
pop
cli
inc
stos
jmp
and
loop
push
(bad)
fdiv
sub
mov
dec
imul
clc
push
dec
cmp
daa
in
mov
stc
mov
test
not
dec
repz
out
leave
div
cwde
(bad)
xchg
jmp
add
ins
sbb
fucomi
leave
or
mov
aaa
pop
sar
dec
mov
fstp
lock
jmp
loopne
xchg
sbb
pop
or
jg
and
inc
jl
and
xchg
in
xchg
in
mov
jge
test
xchg
retf
in
sub
in
sub
adc
xor
mov
cmps
in
test
pop
cmp
adc
push
push
jmp
in
(bad)
push
add
xchg
arpl
mov
inc
jecxz
lahf
inc
dec
adc
outs
fnstsw
test
retf
cmp
test
pusha
xor
lea
xor
jo
jmp
popa
add
cli
(bad)
leave
add
and
adc
or
xor
fidivr
push
inc
sbb
adc
inc
in
(bad)
jg
cmp
outs
cmp
jmp
pop
fcomip
adc
dec
ds
call
and
push
jg
xchg
add
into
sbb
xor
and
test
lea
xlat
nop
outs
in
add
mov
inc
pop
adc
inc
imul
fnsave
mov
jmp
mov
xor
cmp
pop
inc
outs
rol
cmp
jg
or
mov
cmps
mov
pop
xor
dec
pusha
inc
call
pop
mov
popa
in
frstor
xchg
popf
cmps
lahf
xor
mov
test
cmp
cwde
mov
xor
inc
mov
test
push
adc
scas
jmp
js
fbld
sbb
mov
sbb
jo
and
movs
mov
outs
das
jae
cld
in
hlt
jno
add
xchg
add
jmp
xchg
shr
test
fs
idiv
ret
nop
hlt
(bad)
loope
es
add
and
or
shl
inc
rcr
in
nop
fcom
cwde
dec
(bad)
dec
dec
xchg
adc
add
lea
call
popf
repz
push
push
div
lods
paddb
cmp
imul
out
std
enter
add
push
ror
add
and
imul
cmp
cmps
retf
shl
popa
dec
adc
call
and
or
add
mov
xor
arpl
pushf
pop
push
pop
or
adc
xchg
inc
sbb
call
popf
mov
fwait
shl
fcmovnb
mov
aas
sbb
ret
jb
mov
ss
push
xchg
jg
fistp
mov
call
push
mov
mov
(bad)
jge
jbe
or
inc
neg
inc
mov
sub
mov
pop
rol
jne
push
fstp
inc
jge
xor
stos
bnd
ror
xchg
lods
pop
shr
add
ror
push
mov
jmp
mov
out
mov
stc
icebp
push
xchg
and
(bad)
push
pop
and
cs
mov
sbb
das
int3
mov
mov
imul
or
in
jno
sbb
call
sahf
inc
mov
(bad)
dec
mov
ds
adc
sbb
inc
bound
bound
mov
mov
(bad)
and
mov
xor
lds
sub
scas
retf
cld
test
mov
sti
jmp
dec
cdq
lods
scas
out
pushf
mov
(bad)
bound
cmp
pop
pop
inc
int
add
jge
(bad)
jae
mov
inc
daa
xor
mov
add
cmp
sub
mov
inc
hlt
xchg
jae
sbb
cmp
ss
mov
pushf
out
fucomip
xchg
outs
retf
mov
inc
pop
aas
mov
mov
gs
shl
test
icebp
push
push
and
bound
xchg
fwait
adc
cmps
shr
xor
inc
or
dec
rcl
add
dec
add
and
in
cmp
xchg
jmp
pop
mov
dec
dec
popf
push
cli
lea
xchg
retf
loop
dec
and
iret
data16
dec
or
scas
test
scas
jno
sub
pop
std
mov
jno
or
test
push
loopne
adc
in
mov
dec
and
mov
xchg
stos
shl
in
jle
das
xor
xor
pop
inc
xor
outs
mov
jo
sti
xchg
sub
idiv
cmps
lahf
dec
sbb
ret
mov
nop
mov
adc
das
iret
stos
mov
in
mov
pop
out
sbb
mov
hlt
mov
jne
jge
test
pop
pop
dec
xchg
adc
imul
fs
test
(bad)
loop
outs
sbb
mov
cmp
out
cwde
cs
outs
jecxz
retf
iret
cmp
nop
and
aaa
adc
pop
cmp
repnz
pushf
and
(bad)
adc
lds
add
inc
xchg
std
mov
hlt
xchg
(bad)
test
cmp
ret
shl
in
jl
imul
inc
cmps
adc
dec
lods
mov
inc
out
aad
shld
push
and
mov
xchg
inc
add
dec
cwde
ins
pop
stos
jne
retf
call
fwait
pop
nop
(bad)
lahf
rol
inc
jne
cmp
dec
cmps
jnp
mov
mov
lods
push
and
stos
int
xor
fs
in
fcom
adc
pop
push
test
jno
shl
xor
dec
aaa
xchg
pop
jge
lock
cli
fstp
sbb
mov
jmp
push
pop
dec
fdiv
and
lods
sahf
fs
jg
lahf
in
enter
pop
cwde
js
xchg
in
ret
and
loopne
xchg
push
jl
stos
adc
fdivr
das
div
inc
adc
clc
jmp
jmp
pop
or
add
enter
cld
icebp
adc
shl
mov
xchg
mov
cmp
mov
ss
and
jmp
push
push
and
mov
adc
pop
push
or
test
jmp
dec
repnz
jbe
arpl
xor
in
das
pusha
dec
jecxz
out
aas
sbb
daa
xor
sbb
out
div
adc
fstp
es
arpl
inc
cdq
jbe
test
and
(bad)
stos
cmps
jno
(bad)
jg
push
xor
pop
mov
mov
add
retf
(bad)
cmp
add
inc
iret
ds
cmps
cmp
in
loope
xchg
adc
jo
jmp
int3
xor
aas
hlt
and
jbe
stos
je
sbb
sbb
push
adc
scas
push
push
or
jecxz
inc
mov
es
cmp
cdq
mov
arpl
push
mov
scas
lods
in
push
les
or
xor
mov
in
in
inc
test
in
neg
das
ja
icebp
pop
xor
fcom
pop
aas
(bad)
push
inc
in
jns
mov
inc
lahf
iret
lods
int3
fbstp
cwde
mov
gs
(bad)
fistp
clc
xor
loop
cmp
outs
xor
mov
ins
aam
and
fcmovnbe
jnp
pop
mov
(bad)
jmp
adc
icebp
or
cmp
push
and
or
arpl
push
xor
dec
daa
ins
imul
push
hlt
mov
push
sbb
ja
lds
popf
les
(bad)
push
mov
cmps
call
sub
push
rcr
leave
stos
push
mov
movs
jmp
jge
adc
mov
call
ficom
int
mov
test
dec
(bad)
xchg
pop
bound
xor
les
xor
inc
fsubr
ret
jne
jecxz
fcmovbe
sahf
jl
test
adc
les
push
das
jbe
sbb
es
sub
sub
fld
test
test
mov
fidivr
and
fisub
push
pop
mul
dec
adc
scas
and
xor
add
mov
not
and
mov
pop
mov
scas
dec
je
lods
jl
or
mov
pop
pop
popf
cli
out
stc
ret
clc
sub
outs
fnstenv
and
fcmovnu
mov
loopne
xchg
mov
pop
(bad)
out
xor
inc
jmp
sbb
inc
aas
cld
bound
jge
mov
add
mov
xchg
lock
add
je
mov
xchg
jbe
in
imul
dec
ret
xchg
fs
loopne
std
imul
push
rcr
sbb
test
fs
out
jo
cmp
mov
loop
cmps
mov
xchg
mov
or
arpl
add
jb
mov
jo
cwde
imul
cmp
mov
popf
mov
adc
retf
mov
or
aas
adc
addr16
sti
push
mov
ins
outs
sbb
sub
push
pop
mov
fs
jbe
pop
in
shr
daa
pop
and
adc
das
mov
and
mov
mov
mov
icebp
jg
stc
mov
mov
fwait
rol
xchg
or
push
nop
push
inc
jne
popa
fstp
push
push
ins
test
jno
ret
inc
hlt
mov
push
push
cmc
sub
shl
dec
fs
(bad)
arpl
scas
sti
xchg
xchg
xor
and
inc
mov
and
add
push
xor
push
pop
mov
fdivr
or
sub
enter
push
rol
adc
mov
pop
aad
inc
cmp
mov
xlat
loop
cmp
test
cmps
adc
xchg
and
jp
out
mov
and
sbb
and
and
(bad)
(bad)
mov
ss
shl
(bad)
push
push
mov
mov
or
adc
in
sub
inc
mov
gs
inc
fidivr
sbb
outs
loopne
add
and
movs
leave
inc
push
dec
mov
sub
std
mov
push
mov
(bad)
fistp
out
or
out
dec
loopne
sub
jge
mov
std
cmps
test
(bad)
mov
dec
ja
inc
sbb
push
xlat
loope
stc
xor
inc
push
outs
push
mov
cld
mov
aaa
call
test
cmps
in
and
test
jg
scas
inc
adc
jl
push
inc
cmp
out
sahf
out
mov
stos
adc
dec
(bad)
shl
sbb
js
push
jo
cwde
or
mov
in
call
or
(bad)
cld
or
jmp
pop
stc
gs
fwait
outs
xchg
cmp
add
ss
jl
das
cdq
mov
pop
(bad)
fwait
push
sbb
xor
inc
jns
icebp
mov
dec
popa
call
xor
pop
push
iret
fistp
pop
lock
pop
in
aaa
push
pop
inc
test
in
inc
pop
or
jbe
inc
add
out
dec
rcr
jp
jno
aad
jmp
mov
mov
leave
enter
outs
sub
loopne
xchg
neg
mov
imul
pop
shr
(bad)
jmp
dec
bound
test
pop
outs
pop
pop
fwait
inc
sbb
xor
test
adc
pop
inc
shr
fstp
lods
int3
cwde
add
or
push
outs
add
adc
movs
add
mov
aam
mov
add
and
dec
dec
popa
scas
out
pusha
xor
pop
fstp
dec
rol
pushf
mov
retf
mov
xchg
stos
mov
loopne
jle
imul
es
jbe
ins
lods
cs
or
dec
rcr
mov
pop
xchg
mov
sub
repz
shl
and
mov
iret
jge
or
jp
jmp
sub
not
int
leave
push
jne
jmp
xlat
sbb
gs
cmp
jmp
push
adc
pop
mov
repnz
dec
jb
adc
mov
inc
or
sbb
cwde
iret
fucom
jbe
inc
xor
test
jl
out
add
shr
cmp
mov
popf
js
sbb
add
loop
add
lea
not
pop
cld
push
in
or
jae
pop
test
and
adc
outs
fsubr
lods
loop
mov
in
(bad)
inc
fistp
jns
je
xchg
mov
adc
and
sbb
jns
iret
push
push
ss
lahf
movs
mov
push
mov
jmp
je
cmps
xlat
fmul
sbb
cmp
dec
inc
pop
cmps
cmp
inc
pop
sbb
cwde
and
mov
jg
test
arpl
inc
not
cmp
push
(bad)
in
popa
mov
xor
xchg
cld
shl
jl
(bad)
in
not
push
or
mov
shl
loop
xchg
mov
inc
or
and
gs
ret
jbe
mov
and
inc
and
aam
pop
loopne
dec
cmc
push
out
es
mov
push
mov
addr16
pop
jno
cmp
sub
xor
or
xor
(bad)
pusha
call
cli
cdq
enter
mov
inc
fnstenv
and
lahf
(bad)
stos
cmp
test
retf
retf
mov
jns
jnp
xchg
imul
outs
or
xchg
xor
push
mov
mov
dec
jecxz
not
sbb
retf
call
sbb
dec
nop
dec
mov
(bad)
lods
jmp
push
in
retf
scas
inc
and
dec
lahf
push
out
cli
data16
and
or
loopne
mov
lods
mov
test
pavgw
mov
outs
arpl
test
jb
push
cwde
mov
fwait
(bad)
jnp
sti
pop
or
fdivp
mov
jns
jmp
and
mov
sub
mov
jecxz
sahf
mov
pop
sbb
mov
repz
pop
mov
mov
call
push
icebp
xchg
in
ds
dec
les
cmp
(bad)
mov
popf
rcr
or
and
arpl
push
mov
ja
arpl
push
call
adc
and
retf
lods
int
dec
inc
dec
xchg
retf
mov
loopne
push
(bad)
je
ins
and
lahf
fisub
adc
enter
inc
and
dec
lds
lock
sub
ins
jae
xchg
int
mov
(bad)
call
int3
add
inc
or
jo
sub
mov
sbb
push
fcom
hlt
repnz
xchg
or
aaa
jae
add
push
ror
ret
(bad)
sub
xchg
push
test
jb
les
mov
xor
jnp
or
mov
sub
and
pop
sub
sbb
sub
(bad)
retf
mov
xchg
les
mov
xchg
loopne
hlt
jns
les
fsubr
outs
sbb
push
(bad)
into
mov
mov
inc
daa
and
leave
aaa
add
xchg
movs
stos
ins
jmp
adc
and
mov
movs
sbb
xchg
call
js
pop
push
(bad)
push
sbb
mov
sti
adc
fadd
arpl
add
scas
icebp
nop
xor
nop
popa
loope
sub
sbb
ret
and
vandps
loope
pop
xor
push
sub
mov
sbb
xchg
sahf
ficomp
sub
in
mov
xchg
ins
sti
sbb
sub
in
popa
movs
xchg
cmps
xchg
or
jl
and
popf
test
call
out
mov
movs
mov
movs
lds
dec
dec
or
dec
or
rol
scas
loopne
xlat
cli
mov
push
sbb
ins
mov
fisubr
je
mov
mov
shl
call
adc
push
data16
loope
push
add
cmp
dec
cs
mov
push
imul
push
or
das
push
into
fcomip
pop
jnp
fisttp
and
mov
dec
push
mov
sti
inc
lock
pusha
shl
icebp
sub
(bad)
dec
sbb
pop
pushf
fs
mov
xor
jle
push
out
mov
out
adc
in
sbb
jne
add
push
ss
sub
ret
jl
jecxz
adc
and
nop
xchg
xor
and
sbb
sub
fwait
mov
icebp
push
iret
fistp
inc
sub
mov
(bad)
cmps
cmps
call
or
rol
inc
xchg
pop
mov
mov
sbb
call
cmp
jl
test
xchg
cdq
push
push
test
(bad)
jl
cmp
xor
pop
mov
xor
iret
fs
jno
in
mov
adc
xor
shl
out
fsub
mov
push
push
jbe
stos
cli
pusha
retf
out
in
jge
pop
mov
fisttp
push
iret
jmp
imul
pop
nop
jae
cmp
mov
mov
and
out
pop
cmp
inc
es
jb
movs
test
mov
in
mov
mov
in
adc
adc
rol
sub
adc
xchg
mov
adc
mov
enter
in
ja
push
aas
ret
outs
fcomp
lods
push
or
and
push
cmp
hlt
shl
jbe
inc
ins
jno
in
fcomp
and
adc
fst
mov
scas
inc
xchg
int3
add
outs
lea
add
jmp
les
les
mov
inc
push
push
mov
mov
xchg
cdq
inc
jmp
rcl
outs
outs
push
outs
ja
pop
sub
pop
pop
fxch
mov
in
mov
xchg
(bad)
xchg
xlat
mov
fxtract
and
mov
out
cld
repz
dec
lock
sub
push
mov
mov
add
nop
ds
pop
(bad)
cmps
pusha
xchg
(bad)
cli
repz
sub
js
xlat
inc
cmp
test
ror
js
stos
jge
dec
std
test
mov
dec
pushf
sub
aas
es
dec
xchg
out
push
inc
ror
(bad)
fucom
ret
and
inc
sub
popaw
pushf
jbe
hlt
ds
dec
dec
stc
pop
push
sbb
in
xor
test
mov
pop
retf
dec
or
cmps
inc
test
fsub
and
cs
jne
loope
retf
stc
xor
push
std
push
jns
mov
push
adc
inc
pop
popf
jle
fst
int
xchg
jle
scas
ja
sar
xor
xlat
pop
sub
out
rcl
sti
mov
ror
shl
or
rcl
aaa
fstp
rcr
lds
(bad)
push
jbe
or
adc
mov
movs
mov
cli
pop
cmp
sti
pop
pop
cmps
enter
aam
(bad)
cmps
(bad)
jg
push
stos
or
sub
push
push
imul
ds
jb
push
mov
or
cld
or
jnp
pop
das
movs
xor
pop
movs
shl
mov
fwait
sub
sbb
ins
data16
inc
cmps
cs
stos
iret
rcr
out
and
scas
sub
movs
enter
xor
mov
cmp
mov
mov
adc
mov
shr
bound
lea
call
add
mov
std
div
ds
mov
ins
and
push
sub
jno
out
outs
push
add
aad
fs
mov
das
outs
les
jbe
js
mov
dec
(bad)
out
sub
retf
mov
into
test
inc
add
nop
jne
add
movs
push
xchg
popf
dec
sbb
cs
cld
outs
sbb
dec
jg
or
jp
or
lods
bound
mov
mov
inc
xchg
cwde
pop
lds
xor
movs
sbb
push
push
call
cli
ins
mov
sbb
dec
inc
sub
test
push
outs
pop
in
and
(bad)
shl
aas
cld
and
xchg
int
mov
mov
mov
sbb
(bad)
lock
mov
enter
leave
loopne
xchg
push
loope
xchg
stc
pop
sub
das
ret
dec
mov
jns
gs
(bad)
mov
sub
mov
leave
dec
inc
jmp
inc
cs
iret
jno
lds
adc
jb
cmp
xchg
imul
xchg
sub
xchg
mov
fbstp
jmp
xor
lea
jp
and
sub
xor
in
test
dec
mov
popf
mov
aaa
mov
movs
popa
mov
sub
loopne
movs
les
pop
enter
xchg
pop
mov
pop
inc
push
cmps
pop
mov
jnp
push
cmp
push
fisub
imul
mov
test
mov
ins
cmp
or
jnp
movs
repnz
adc
loopne
adc
xchg
sub
movs
pop
sub
jp
xor
icebp
dec
or
sub
cli
jmp
push
out
pop
ret
cmp
dec
push
les
pop
jb
push
ds
cmp
lahf
lds
dec
push
gs
jl
ins
pop
popf
in
or
or
dec
inc
call
pop
cli
(bad)
outs
xor
pop
(bad)
pop
push
(bad)
cmp
lods
adc
mov
aad
xchg
add
lods
call
mov
xchg
cmc
jnp
sub
mov
jmp
or
mov
push
movs
pop
xor
ror
mov
outs
stc
repz
aaa
inc
cmp
and
jl
mov
or
nop
imul
and
add
adc
sub
das
(bad)
mov
data16
push
adc
test
shl
aas
(bad)
xchg
pop
and
fisttp
mov
pop
mov
cmp
out
stc
loop
xchg
adc
mov
fisttp
fsubr
push
jnp
inc
cmc
add
movs
cdq
popa
(bad)
fldcw
cmps
push
enter
dec
mov
popf
cld
sub
lea
ret
leave
and
cmps
xchg
push
cwde
adc
and
push
fisttp
mov
jmp
mov
fld
mov
xchg
call
test
cmp
les
ds
mov
out
popf
xchg
out
stos
fcom
enter
aas
fidivr
pop
leave
cmps
dec
sub
(bad)
(bad)
(bad)
ss
sub
jecxz
test
dec
cs
ins
lock
cmp
push
sahf
rcr
cld
mov
and
loope
jns
or
pop
jmp
les
xor
test
cmp
fs
rcl
mov
or
add
xor
push
aas
xchg
call
sahf
xchg
(bad)
aas
in
xor
sbb
movs
ret
pop
cdq
loop
fs
pop
idiv
pushf
clc
adc
and
aaa
and
and
inc
jns
sbb
stos
dec
xchg
jge
adc
adc
retf
(bad)
cld
add
call
and
stos
and
add
test
cmp
ds
pop
add
test
or
push
nop
inc
pop
rol
arpl
sbb
or
ds
cmp
cmp
addr16
sub
mov
cmc
pop
pop
mov
inc
(bad)
std
dec
xchg
retf
ins
sbb
push
mov
call
test
pop
(bad)
adc
sub
xchg
xor
shl
mov
mov
xor
pop
push
shl
mov
or
(bad)
cdq
mov
test
mov
adc
pop
inc
pop
add
pop
lock
dec
mov
dec
imul
stos
xchg
stc
pusha
add
cmps
mov
and
inc
pop
mov
iret
out
cs
mov
ins
ja
and
test
cli
retf
mov
icebp
inc
cmp
imul
add
sub
les
(bad)
shl
adc
lahf
ja
dec
add
cs
xchg
call
dec
and
push
push
mov
and
adc
push
fiadd
pop
shl
fwait
ret
loopne
cmp
add
cwde
mov
stos
sub
jne
inc
sbb
shl
xor
jmp
xor
retf
loop
xchg
xor
loop
(bad)
jl
inc
xchg
xchg
and
stos
movs
aaa
xchg
push
loopne
or
sbb
inc
in
jle
test
or
push
out
dec
mov
lods
dec
ja
xor
xchg
adc
(bad)
jl
repz
pushf
cmp
mov
jl
bound
or
test
popf
xchg
or
xor
test
(bad)
daa
push
mov
sahf
int
mov
js
repnz
jl
jmp
mov
cmp
dec
fimul
push
sbb
cmp
cmp
sub
push
mov
xor
popf
pop
ins
mov
cmp
popa
xchg
dec
cmps
repz
dec
aad
push
sub
lds
and
pop
shr
xchg
jb
xchg
clc
xchg
inc
ja
fbstp
ret
das
rcr
pop
adc
adc
rcl
rcl
(bad)
push
push
sbb
mov
lds
mov
lock
mov
rcr
xchg
sub
je
enter
mov
adc
fimul
inc
lods
xor
sahf
or
in
sub
enter
push
out
inc
sti
mov
push
inc
cld
je
scas
lahf
or
ins
pop
jae
sbb
ins
dec
mov
ds
mov
jnp
xchg
shl
mov
dec
sbb
mov
push
cmp
jmp
pop
out
adc
test
ins
sahf
pushf
jle
jae
or
cmp
jmp
push
and
dec
in
cmc
aas
jnp
loop
or
outs
and
mov
movs
in
push
xor
ins
iret
push
mov
cwde
and
add
movs
mov
scas
and
push
push
pop
or
sti
xor
dec
mov
retf
mov
push
cmp
mov
push
or
ret
pop
push
test
js
loopne
cmp
sub
movs
pop
fsubr
pop
sub
popf
cmp
add
(bad)
retf
adc
inc
inc
aam
xor
iret
mov
movs
retf
frstor
xchg
ins
(bad)
and
cs
std
mov
(bad)
add
in
dec
mov
ss
pop
lods
and
xchg
aaa
dec
push
in
sbb
sub
movs
out
jbe
loop
jle
push
xchg
mov
js
(bad)
mov
push
jecxz
push
mov
movs
mov
test
cmovne
ss
or
mov
call
fsub
jmp
data16
sub
fwait
lods
xchg
(bad)
inc
fsub
out
stc
pop
js
adc
fnstcw
or
cmps
frstor
sti
and
call
js
int3
pop
out
jnp
push
loope
test
sub
xor
push
jge
dec
xchg
dec
shr
pop
jne
inc
es
dec
add
fnstenv
dec
or
or
outs
shl
and
ss
addr16
mov
iret
lods
test
in
test
popa
aaa
mov
jl
xchg
mov
inc
nop
inc
xchg
xchg
push
mov
pop
mov
scas
and
or
pcmpgtd
retf
test
sub
xchg
pop
push
pushf
leave
mov
std
ins
inc
inc
jl
lds
xchg
mov
retf
or
dec
sar
xor
cmps
jle
retf
fwait
arpl
ja
inc
add
xchg
imul
cmp
cmp
bound
movs
xor
sahf
cmps
(bad)
xchg
(bad)
(bad)
icebp
dec
fwait
enter
ja
out
or
retw
mov
fwait
or
enter
jo
cmp
ret
sub
int3
test
xchg
inc
pop
xchg
pop
jecxz
leave
jae
call
add
cmp
jo
xor
mov
and
jge
retf
jle
repz
jmp
nop
jmp
(bad)
pop
sub
scas
push
(bad)
popa
adc
fdivr
and
mov
sub
mov
pop
je
(bad)
sti
xor
out
sub
jp
setp
inc
test
mov
lods
pop
sbb
popa
push
pop
loope
movs
ret
lock
adc
bound
leave
loope
sbb
(bad)
mov
xor
mov
push
cmp
je
xor
jmp
xor
mov
pop
cmps
into
paddd
xchg
scas
xchg
pop
js
mov
mov
test
xchg
mov
(bad)
jg
rcl
in
or
jle
jnp
cs
or
in
xchg
sti
out
mov
mov
fsub
jns
sbb
bound
inc
push
jbe
mov
mov
shl
cs
push
data16
xchg
iret
or
pop
dec
adc
mov
push
out
shr
xchg
sub
xchg
idiv
dec
adc
jecxz
iret
and
push
lds
xchg
leave
aas
(bad)
push
add
mov
mov
or
out
mov
add
add
sar
aas
mov
(bad)
xor
cmp
sub
inc
iret
inc
inc
iret
loop
nop
mov
inc
push
(bad)
adc
xchg
dec
mov
xor
mov
icebp
mov
xchg
xchg
and
ins
enter
jle
retf
and
xchg
movs
add
fwait
sbb
and
movs
add
cmps
inc
(bad)
cmps
fcmove
test
shr
or
out
mov
es
jge
mov
mov
jns
cwde
fs
or
fs
mov
clc
jp
mov
jo
cmp
pop
(bad)
push
mov
lds
inc
mov
sar
jmp
retf
ret
out
inc
jne
popf
sub
mov
lea
mov
inc
ja
mov
dec
jno
push
cmc
or
add
inc
push
mov
sub
mov
lds
mov
in
jle
push
cdq
pop
jg
hlt
loop
lock
mov
(bad)
cmc
ins
xchg
test
adc
pop
ret
outs
(bad)
xor
add
push
loopne
jb
add
lock
push
push
iret
stos
mov
add
jp
cmps
int
xlat
(bad)
fidiv
std
(bad)
push
in
cli
pop
mov
push
xchg
lea
pop
repz
add
pushf
icebp
or
retf
add
mov
push
push
add
ror
add
jne
mov
test
stos
push
xchg
dec
(bad)
xchg
adc
stos
xor
cmp
add
mov
jnp
(bad)
shl
fwait
je
and
pop
mov
push
pop
inc
aam
lock
xor
pop
inc
xchg
mov
jns
(bad)
ds
popf
push
cdq
jo
sti
js
rcl
push
fucomi
dec
outs
mov
mov
dec
cmp
int
jns
inc
jnp
and
(bad)
push
xlat
loopne
pop
pop
push
inc
push
fs
sbb
sub
repz
vprotd
jmp
out
and
dec
ins
mov
dec
mov
popf
data16
call
push
pop
cmp
or
add
jg
(bad)
dec
lock
dec
imul
push
jae
mov
sbb
sbb
int3
mov
push
adc
jo
sub
int
xchg
movs
(bad)
(bad)
or
packuswb
mov
(bad)
test
pop
addr16
mov
jg
in
pop
mov
sbb
ja
jle
sub
sbb
or
push
pushf
stos
mov
xchg
scas
cmc
js
dec
cmovno
ret
out
mov
shr
inc
push
or
cli
jg
ret
sbb
cmp
int
jb
pop
imul
mov
outs
pop
xchg
in
push
fbld
pop
sub
imul
xchg
jne
adc
inc
mov
pop
(bad)
aam
movs
outs
sbb
test
and
cmp
mov
sub
inc
cmp
scas
pushf
xchg
call
leave
dec
pop
sub
scas
mov
or
push
fnstsw
gs
cmp
call
dec
ret
imul
call
aam
fmul
shr
push
mov
pop
out
sbb
scas
fwait
mov
mov
pop
enter
pop
xor
add
mov
pusha
adc
inc
das
stc
or
test
cdq
ret
xor
cmp
movs
push
jno
(bad)
scas
xchg
sbb
test
mov
mov
pop
xchg
cmp
sbb
out
rcl
test
sub
xor
jg
xchg
ins
cmp
test
jl
add
push
aas
fwait
jmp
pop
retf
clc
imul
stos
(bad)
int3
cmps
adc
mov
jno
fisubr
xchg
xchg
mov
arpl
jne
add
dec
xor
mov
outs
aam
dec
imul
out
pop
sbb
mov
cmps
and
or
addr16
hlt
add
xchg
inc
inc
lods
xor
and
fs
sahf
sbb
lods
shl
dec
bound
jae
or
inc
in
mov
sbb
mov
data16
adc
inc
fcomp
lock
sbb
fdiv
mov
cmp
jecxz
sub
scas
test
or
jg
inc
mov
mov
ja
adc
sbb
add
scas
stc
inc
cs
int
and
mul
cdq
sahf
fdiv
sbb
int
into
movs
push
mov
arpl
or
sbb
je
adc
push
jb
mov
lods
add
sbb
test
int3
sub
add
ds
adc
pusha
pop
mov
inc
and
dec
sti
sub
mov
or
cli
mov
inc
call
int3
dec
mov
sub
(bad)
adc
outs
push
shl
test
sub
mov
mov
mov
push
cmps
in
pop
es
xor
int3
fwait
jle
test
pop
dec
and
repz
cmps
ret
jge
jb
add
push
cmc
sbb
fs
clc
or
add
(bad)
cmp
dec
(bad)
test
iret
sbb
leave
cmps
lahf
sbb
jmp
loop
pop
sti
repz
jl
cmp
cmps
pop
sbb
dec
pop
in
(bad)
mov
scas
cmp
cdq
xchg
into
data16
test
fwait
dec
add
inc
ins
jg
xor
repz
fnstcw
push
push
pop
in
push
sti
stos
jae
cmp
(bad)
je
pop
sbb
les
inc
xchg
mov
push
sub
mov
fisttp
xchg
or
push
adc
jb
(bad)
aas
inc
xchg
and
sbb
not
add
iret
fld
aam
push
sahf
daa
ins
fdiv
ss
loop
cmps
ss
cmc
(bad)
test
lds
lds
jne
xchg
repz
shl
lock
dec
test
mov
es
and
push
fimul
xor
push
mov
add
scas
inc
cs
icebp
popf
sub
jns
jbe
adc
jl
pushf
xchg
sub
sbb
pop
xchg
pop
xchg
push
xor
aam
or
icebp
enter
adc
cdq
jg
and
inc
call
rcr
jne
fnstenv
push
not
int3
loopne
mov
stc
js
jae
les
sti
sbb
lods
xor
add
daa
lock
mov
add
sub
test
in
movs
jb
add
dec
inc
shr
add
dec
add
das
pop
mov
xlat
stos
sub
xor
hlt
or
lods
or
cmp
inc
adc
mov
repnz
imul
xor
setle
inc
push
int3
rcr
xchg
not
test
xchg
inc
and
cmps
cmp
addr16
sbb
iret
push
fdiv
mov
cmps
and
cmc
call
popf
fild
or
or
sbb
push
mov
mov
fbld
movs
fwait
imul
pop
popa
xor
dec
add
cwde
mov
movs
mov
jb
jg
sbb
shl
retf
cmp
lods
popf
out
push
shr
popa
les
xchg
in
data16
xchg
inc
push
mov
sbb
and
or
cs
(bad)
mov
xchg
inc
dec
jle
in
sbb
out
(bad)
xor
dec
je
js
loope
cdq
adc
cmps
shl
and
ins
mov
fld
mov
mov
jmp
inc
or
scas
mov
test
imul
push
(bad)
int3
pop
mov
or
cmps
jmp
sub
cmp
push
movs
js
ret
jns
gs
sbb
scas
xor
xchg
leavew
mov
sti
out
jmp
sub
cmp
or
inc
(bad)
mov
sbb
sbb
aas
xchg
call
and
cwde
jecxz
inc
xchg
mov
lods
(bad)
sub
add
xlat
scas
mov
jg
inc
jbe
jne
sbb
or
mov
xor
idiv
fild
sub
cmp
ror
dec
sub
ret
test
lds
pusha
arpl
push
jmp
cld
lods
sub
sbb
lahf
lds
jge
cld
dec
pop
aaa
jmp
mov
jge
movs
shr
pop
inc
pusha
popa
mov
mov
int
repz
(bad)
std
or
fisttp
out
pop
inc
hlt
lea
aas
cmps
fcomp
int3
aaa
xchg
dec
call
sub
mov
inc
or
iret
in
cmps
mov
popf
xchg
add
and
adc
hlt
push
push
repnz
call
mov
pop
cmp
mov
push
sub
jmp
mov
jmp
pop
pushf
ret
sub
mov
pop
enter
in
mov
mov
jmp
cmp
retf
cmps
mov
sar
movs
aad
push
and
jmp
sub
cld
call
xchg
test
clc
cmp
out
in
test
jbe
pop
mov
out
les
int
push
adc
jmp
nop
cli
scas
push
pop
mov
lods
je
sahf
xor
mov
xchg
aas
cmps
aas
fbstp
fdiv
in
in
cld
stos
xchg
data16
pop
cmps
push
mov
int
stc
mov
stc
iret
out
dec
cmp
mov
aaa
adc
push
or
sub
xor
xor
retf
popa
adc
aad
or
sbb
rcr
dec
cwde
pop
xchg
arpl
ret
pushf
out
mov
stos
pop
out
(bad)
ins
into
retf
cmp
nop
dec
arpl
dec
popa
or
sub
inc
xchg
ss
sbb
movs
sub
push
int3
das
or
inc
xor
pop
cwde
fmul
lea
xchg
dec
ror
cmp
fcomi
jl
push
ins
or
call
stos
dec
mov
adc
pop
clc
mov
lock
mov
xchg
call
xor
jo
adc
xor
shl
stos
dec
push
je
mov
outs
pop
sub
sbb
mov
add
push
pop
and
jae
dec
imul
xchg
jg
(bad)
in
int
xor
pop
sbb
add
dec
ins
adc
add
and
add
(bad)
or
sub
jne
pop
jns
adc
inc
imul
push
cmp
fld
cmp
jmp
add
clc
out
add
add
mov
adc
push
adc
cmp
adc
inc
scas
and
mov
sbb
fsub
sbb
lods
addr16
push
jp
xchg
dec
call
mov
jb
in
sub
test
leave
push
jne
push
add
add
fcomp
test
aam
inc
sbb
daa
add
and
sbb
inc
gs
or
fwait
cmc
in
int3
call
in
data16
mov
sbb
retf
adc
sahf
aad
setbe
pusha
repnz
fdiv
inc
pop
xchg
aam
jmp
out
imul
adc
fs
adc
mov
push
xchg
cmp
pop
fisub
into
neg
mov
push
(bad)
mov
or
repnz
daa
xchg
sub
ins
push
jle
ret
iret
mov
enter
ret
jmp
sbb
pusha
popw
xchg
hlt
or
(bad)
mov
cli
xchg
dec
clc
jne
mov
jbe
cld
movs
int
std
mov
outs
popf
out
sub
aaa
sub
xor
mov
add
sbb
mov
mov
sub
aad
and
shl
mov
push
inc
or
push
std
and
jmp
fild
in
int3
test
idiv
fwait
jle
inc
dec
jae
sub
cmc
bound
ret
sub
dec
pop
call
(bad)
imul
movs
mov
dec
mov
test
fstp
arpl
push
sbb
lods
test
pop
out
mov
push
xchg
push
ror
das
movs
fdivr
retf
pop
dec
cwde
mov
int
or
loopne
daa
jp
add
mov
mov
or
mov
cmps
cmp
adc
inc
aas
mov
push
mov
xchg
lock
pop
mov
ins
xor
sar
xor
sbb
ret
pusha
dec
ja
xchg
xor
pop
loopne
dec
cmp
cmp
pop
and
add
jmp
aam
fst
or
jecxz
push
push
mov
sbb
inc
push
or
mov
ins
pushf
cwde
js
or
dec
add
xchg
add
xor
sub
xlat
repnz
push
into
mov
cmp
sbb
sub
push
pop
push
aad
dec
mov
fwait
enter
outs
int3
aad
push
dec
add
outs
jno
or
shl
xchg
cmp
data16
sub
xchg
les
iret
and
hlt
mov
lahf
push
out
into
jl
jb
test
ss
test
rcr
jle
lock
dec
pop
imul
and
or
sahf
sbb
pop
mov
ror
ret
retf
xchg
rol
push
cmc
jecxz
sbb
fimul
pop
pushf
clc
inc
mov
and
clc
dec
mov
xor
mov
cli
mov
xchg
mov
clc
push
jl
sbb
cli
in
xchg
popf
and
shl
sub
repnz
xchg
xchg
aad
or
loope
dec
ins
xchg
jecxz
push
(bad)
pop
lea
sub
mov
mov
mov
dec
sbb
or
sub
mov
ror
ret
dec
jle
mov
or
xchg
popf
jle
adc
mov
leave
dec
jmp
jb
or
cmp
mov
xchg
outs
xor
leave
pop
mov
xchg
push
mov
cmp
push
rcr
adc
xor
pop
and
mov
(bad)
and
xchg
cs
bound
(bad)
sbb
cmp
rol
jne
dec
and
mov
pop
popf
das
cwde
xchg
push
jle
push
scas
lock
jae
and
push
pop
lea
test
pop
and
or
lods
fld
(bad)
adc
data16
xlat
es
add
movs
mov
push
dec
pop
inc
mov
repz
pop
retf
mov
mov
rol
loopne
jb
hlt
add
(bad)
mov
adc
sbb
cmp
push
ss
arpl
or
xor
retf
(bad)
sub
(bad)
fdiv
mov
sar
xlat
popf
and
ja
xchg
dec
(bad)
adc
(bad)
xor
xchg
sub
xchg
sbb
dec
jae
jge
cdq
mov
add
sbb
(bad)
stos
mov
mov
in
ret
nop
(bad)
int
adc
add
and
dec
mov
cdq
add
mov
fistp
pusha
add
ja
gs
add
cmp
les
fmul
rcr
mov
stos
scas
repnz
into
pusha
popa
sbb
movs
inc
mov
mov
popa
dec
leave
rcr
cmps
push
repz
push
ins
fisttp
aas
out
add
sbb
pop
(bad)
cld
in
retf
sbb
out
das
xor
mov
dec
push
dec
mov
jmp
icebp
cmps
inc
mov
lods
add
add
addr16
pop
fsubr
scas
push
retf
mov
cli
push
lods
pop
outs
jge
lock
hlt
mov
in
shl
jmp
out
mov
movs
js
stos
daa
mov
test
mov
addr16
mov
xlat
mov
sbb
arpl
ror
hlt
sbb
lods
loope
out
push
cmps
add
cs
cdq
push
xchg
xor
dec
div
jmp
imul
loopne
addr16
loopne
add
cmp
or
call
adc
test
jmp
mov
leave
push
mov
movs
mov
add
and
retf
cmp
inc
std
call
jb
addr16
mov
xchg
push
cmps
push
popa
push
mov
adc
sti
xchg
cmp
mov
(bad)
mov
aaa
pop
xlat
push
(bad)
mov
or
cli
shl
and
add
(bad)
loopne
mov
rcr
xor
iret
fisubr
(bad)
enter
pcmpgtd
jmp
xor
cmps
push
fimul
mov
inc
sub
dec
cmp
nop
inc
xlat
scas
loopne
mov
cmp
inc
xor
or
jmp
sbb
scas
push
cmps
fwait
add
xchg
cmp
sub
mov
xor
fsub
stos
push
aam
cmps
xchg
sub
pop
ins
std
in
scas
xlat
push
push
pop
mov
aaa
jecxz
ins
xchg
imul
pop
test
test
repnz
mov
bound
cli
jnp
lea
sbb
int3
cmc
fld
jge
mov
js
dec
js
mov
call
or
adc
dec
(bad)
jp
test
jnp
push
jnp
inc
mov
add
ins
sub
and
dec
jl
sub
test
inc
repz
in
dec
push
cmp
sbb
jp
not
data16
xchg
ins
xchg
sbb
or
push
jle
sti
addr16
jle
mov
leave
jo
in
rcr
sbb
stos
and
sbb
mov
iret
ins
shl
pop
sar
test
js
mov
xor
sub
repz
outs
xchg
into
cs
and
ror
push
xchg
and
ins
add
and
popf
hlt
adc
push
into
bound
loopne
cs
aas
jmp
xchg
in
jbe
stos
adc
pop
push
sbb
icebp
sub
xlat
bound
test
xor
in
mov
clc
inc
mov
mov
pushf
loop
mov
arpl
ret
ja
jb
test
sub
inc
fadd
push
xor
lods
mov
ja
retf
lds
cmp
cwde
popa
stc
and
and
mov
lods
jle
dec
pop
or
or
in
mov
push
test
push
loopne
adc
push
sar
sbb
cmc
ror
js
cmp
jno
mov
pop
xchg
cmp
cld
jbe
sbb
cmp
add
loopne
int3
movs
or
std
loope
xor
push
frstor
push
and
hlt
in
test
inc
push
(bad)
or
push
data16
jg
fwait
adc
test
cmp
xchg
dec
in
jno
mov
mov
test
xchg
mov
push
xor
mov
xchg
jno
(bad)
push
xchg
(bad)
iret
loopne
add
mov
push
retf
or
jg
loop
jne
mov
int
mov
ror
mov
lea
sub
pop
repz
fs
mov
pusha
test
cmp
call
aas
sbb
push
fnstcw
cmc
or
jmp
lds
in
sub
cli
test
pop
inc
add
or
and
mov
xchg
inc
call
mov
sbb
adc
lea
jmp
push
adc
jge
jnp
pop
and
test
test
pop
push
(bad)
xor
jns
cdq
mov
xchg
int
sub
add
push
mov
xor
add
aad
or
data16
jecxz
sbb
call
mov
mov
into
movs
neg
imul
pusha
dec
retf
enter
lods
out
(bad)
inc
cli
push
jge
cld
xor
dec
shl
mov
std
or
adc
test
jbe
mov
jecxz
adc
movs
pop
mov
mov
enter
sub
xchg
dec
cld
pop
push
scas
cmp
scas
stos
(bad)
jmp
daa
ja
es
xchg
cdq
mov
ret
pop
call
mov
inc
mov
or
dec
jge
pop
cmps
sbb
jmp
xor
adc
jecxz
pushf
mov
adc
shl
inc
xlat
pushf
cld
dec
mov
scas
clc
mov
inc
sbb
pop
stc
mov
cmc
movs
outs
cmps
or
(bad)
cmps
loop
jne
pop
mov
lea
test
or
push
outs
hlt
mov
sbb
cmp
(bad)
aaa
lahf
in
pop
cli
stc
mov
add
pop
jl
div
xchg
mov
mov
mov
jne
bnd
movs
dec
nop
int3
jnp
scas
adc
in
push
and
sbb
enter
cmp
std
xor
aad
leave
xor
jbe
fs
push
mov
out
and
cwde
out
mov
inc
movs
mov
lods
mov
(bad)
test
sub
dec
loop
test
lock
push
push
fst
xchg
adc
mov
ret
fidivr
ror
pop
add
xlat
outs
ja
stc
jg
and
or
jl
lods
adc
sti
sar
inc
stos
mov
ins
bound
push
daa
dec
mov
xchg
mov
inc
(bad)
div
inc
push
dec
shl
dec
mov
jge
mov
dec
mov
imul
cdq
std
test
test
jns
mov
sub
jmp
mov
daa
aas
ins
adc
push
fadd
xor
cmp
aam
aad
fmulp
and
in
jo
add
dec
jle
inc
dec
mov
xor
and
xor
jle
pop
in
aaa
inc
shl
iret
or
cli
push
xchg
imul
pop
popf
mov
mov
jb
fidivr
cmp
scas
push
pusha
jmp
pushf
mov
add
and
pusha
imul
mov
push
adc
outs
and
jo
mov
mov
xor
xor
std
cmp
jp
out
mov
inc
(bad)
sub
shl
shl
sub
sti
and
cmp
add
and
pusha
xor
pop
inc
repnz
mov
xchg
add
push
ffree
(bad)
loopne
scas
in
call
neg
or
je
lahf
movs
(bad)
pop
popa
test
pusha
add
cmc
pop
inc
xchg
aaa
test
xchg
es
cs
mov
add
fild
mov
sbb
mov
xor
sub
out
sbb
add
nop
mov
xchg
sub
and
sbb
mov
sub
xchg
cwde
pop
enter
and
cmps
ins
xor
stos
sbb
or
mov
movs
mov
xchg
push
fsubp
xor
mov
lds
or
push
pop
jle
jnp
movs
imul
lea
daa
adc
add
cmp
adc
nop
cmps
mov
scas
add
and
sbb
mov
push
inc
dec
loopne
shr
and
jno
adc
add
dec
fimul
fisttp
mov
sbb
push
pop
dec
sbb
inc
jno
push
fs
xor
pop
bound
mov
cmp
and
xchg
dec
ins
sub
arpl
(bad)
or
add
mul
into
ins
scas
shl
test
sar
jne
dec
ins
xchg
mov
das
pushf
xchg
adc
push
mov
pop
sub
jae
adc
push
mov
and
(bad)
fst
xchg
imul
jg
lods
xor
data16
ret
mov
mov
nop
cli
sbb
in
(bad)
cmp
push
outs
(bad)
sti
rol
in
and
pop
aas
mov
pop
test
add
pop
mov
mov
js
add
lods
dec
push
mov
cdq
in
pop
inc
arpl
dec
or
add
outs
ins
jl
(bad)
ret
fcom
hlt
push
inc
nop
push
test
and
or
in
int
fadd
sbb
dec
xor
ds
jmp
int
imul
add
(bad)
ins
sub
sub
in
mov
stos
xor
bound
xor
or
push
inc
and
hlt
xlat
pop
and
mov
and
pop
pop
loop
xchg
sub
sub
jle
sbb
sub
aad
dec
int
cld
sub
je
retf
sbb
jg
mov
push
mov
(bad)
(bad)
adc
cs
loopne
xchg
push
sub
imul
test
pop
into
idiv
mov
ret
xor
sar
les
test
xchg
dec
popf
pop
sbb
or
std
inc
std
mov
clc
jg
add
in
mov
std
int
pop
inc
mov
in
pop
retf
neg
arpl
or
arpl
inc
sar
stc
sub
gs
push
cmp
cld
xlat
(bad)
jge
call
jns
push
mov
imul
inc
cmp
jne
mov
adc
cmp
sbb
cmps
add
or
fs
xor
dec
xor
pushf
pop
cmp
cmp
jmp
cmp
jns
inc
cmp
xchg
leave
fsub
jmp
dec
xchg
inc
arpl
stos
mov
jecxz
das
xlat
add
fdivr
and
fcom
pop
xor
mov
mov
sub
and
ret
xchg
xor
ds
cld
mov
xchg
jne
or
retf
fs
inc
pop
loop
retf
dec
test
push
(bad)
mov
outs
shl
out
sbb
aam
shl
clc
fs
fldenv
scas
jecxz
pop
sti
add
clc
push
(bad)
add
cmp
cld
lahf
mov
add
jp
inc
aas
(bad)
mov
aad
outs
add
not
and
or
shl
dec
push
mov
icebp
loope
pop
adc
je
xchg
test
jmp
dec
std
or
dec
lahf
mov
mov
lods
pop
pop
fstp
nop
(bad)
xchg
jl
sbb
call
xchg
pop
call
dec
fidiv
cs
ret
xor
pop
fisubr
jge
cmps
jbe
inc
stos
pusha
jnp
sub
lea
fcmovbe
pop
rcr
push
push
dec
das
imul
std
(bad)
icebp
repnz
jg
inc
stos
and
(bad)
les
mov
scas
movs
or
fucom
ja
repnz
add
mov
shr
pop
mov
rol
jecxz
loop
out
jmp
jnp
imul
inc
ret
cmp
push
add
ds
push
aad
outs
inc
mov
sbb
inc
lea
jmp
rcl
push
lock
loope
fld
not
cmova
es
fsub
dec
rcl
test
bound
outs
jnp
fild
outs
pushf
mov
mov
or
pop
xchg
stos
push
push
xchg
or
gs
or
scas
js
xlat
xor
xchg
mov
cmp
mov
jnp
adc
imul
(bad)
loop
cmps
mov
add
in
retf
sbb
cmps
xchg
adc
xor
retf
in
ja
sahf
sbb
pop
leave
out
mov
dec
cmp
adc
and
neg
scas
adc
aam
mov
adc
aaa
imul
mov
push
pop
pop
mov
mov
push
xlat
iret
lock
scas
fisub
aam
fidiv
call
fimul
inc
dec
mov
dec
sbb
and
push
sub
fnstenv
add
push
mov
inc
push
xor
cs
xor
jns
jmp
inc
dec
fs
cmp
arpl
dec
xchg
icebp
pop
cmp
add
cmps
mov
cmps
adc
popf
fnstenv
sbb
lods
jae
sbb
daa
xchg
sub
rol
mov
int3
int
in
das
iret
dec
popf
lds
dec
inc
xor
mov
sbb
out
movs
jmp
loopne
pop
jno
clc
xchg
leave
aam
pop
mov
sub
jne
pop
push
xchg
mov
out
dec
test
repnz
je
pushf
sti
dec
fdivr
mov
mov
sub
mov
mul
out
pop
lods
cwde
lods
push
dec
out
stc
cli
or
push
mov
jo
adc
xor
inc
xchg
std
or
scas
jmp
stos
mov
add
es
aas
sti
mov
cmp
sbb
and
or
stc
dec
fsubr
inc
mov
ins
enter
sub
ret
cmp
mov
pop
mov
(bad)
lock
mov
repz
retf
ret
sbb
mov
and
jne
mov
xchg
out
int3
cld
add
lahf
sub
cmp
lahf
enter
and
mov
adc
mov
jmp
out
push
xor
mov
ret
test
and
lahf
xchg
adc
out
add
cmp
test
or
hlt
lahf
xchg
in
xchg
pushf
adc
mov
test
pop
scas
cmp
int3
and
mov
inc
or
(bad)
int3
pop
jle
jmp
mov
cs
jbe
add
out
cmps
inc
fldenv
jge
mov
xlat
sbb
add
clc
or
js
fwait
pop
test
repz
outs
adc
fisub
push
mov
in
neg
xchg
in
pop
cmps
fs
int3
and
ror
jne
jae
(bad)
rol
pop
inc
fsub
inc
je
mov
fsubr
inc
mov
ficomp
retf
ficom
ja
adc
dec
shl
inc
pop
cmp
push
sub
icebp
mov
ja
rcl
arpl
movs
cmps
pop
shl
ffreep
push
adc
inc
dec
cli
retf
sbb
cs
dec
add
je
shr
retf
or
outs
aam
mov
aam
adc
call
les
fs
or
mov
cli
jecxz
outs
inc
dec
pop
cld
xor
cmps
mul
sub
jns
fst
jge
pusha
test
fmul
xor
pop
loop
jmp
sbb
adc
hlt
mov
push
aad
lods
ins
mov
addr16
jno
pop
movs
in
clc
outs
lock
imul
xchg
dec
sbb
outs
xor
xor
push
popa
and
sbb
pop
mov
jge
pusha
scas
sbb
dec
ret
seta
xchg
(bad)
lods
and
mov
mov
(bad)
pop
rol
maxps
imul
dec
push
pop
push
stc
push
sbb
mov
cwde
(bad)
mov
jb
movs
inc
scas
pop
pop
sbb
add
sar
ins
push
loop
ins
dec
push
lods
stos
jb
add
add
sahf
mov
xor
outs
push
int3
inc
or
adc
pop
test
pop
cwde
cdq
mov
mov
popf
in
fisttp
cmp
sbb
add
xchg
or
mov
(bad)
cmps
inc
push
jo
sbb
gs
xchg
outs
mov
test
leave
idiv
js
push
imul
sbb
sahf
sbb
test
cwde
retf
int
call
call
and
into
pushf
push
push
jnp
mov
call
adc
int
leave
daa
lahf
push
mov
cmps
lods
test
std
daa
loope
das
sar
sub
mov
jmp
arpl
jl
add
in
and
iret
addr16
lods
js
dec
mov
call
retf
xchg
or
sbb
stos
mov
xchg
push
cmp
mov
ds
popf
push
pushf
push
or
mov
inc
xchg
mov
aam
stos
adc
or
popa
sbb
mov
and
cmp
pop
fwait
je
pushf
out
mov
jle
outs
or
aam
stc
and
movs
mov
into
fidiv
add
mov
test
enter
jl
mov
adc
jae
add
fsub
adc
stos
bound
js
jmp
adc
push
inc
(bad)
sbb
lahf
in
mov
mov
jb
mov
in
(bad)
sbb
movs
mov
popa
out
rcr
adc
loop
or
xor
xchg
sbb
pop
inc
xor
cwde
fild
push
xchg
popf
sti
fisttp
in
ins
xor
sub
pop
mov
jnp
push
mov
in
rol
mov
sub
stos
aaa
sub
(bad)
neg
cmc
mov
mov
in
aad
xchg
ds
jecxz
pop
pop
(bad)
out
mov
mov
cmp
cli
mov
sub
dec
push
aam
push
cmp
xchg
pop
ss
mov
sbb
mov
mov
sbb
inc
mov
mov
adc
dec
leave
inc
pop
leave
jb
scas
pop
xchg
and
mov
mov
sti
add
mov
inc
jb
push
in
repz
sub
popa
mov
xor
xchg
jae
add
stos
push
fidivr
adc
out
test
cmp
dec
and
loop
sub
idiv
inc
sbb
jmp
and
mov
cmc
sbb
rcl
and
call
mov
or
pop
push
and
push
lea
enter
stos
test
xor
(bad)
pop
dec
add
(bad)
loopne
push
sub
fisubr
xor
jnp
cmp
mov
mov
retf
test
xor
(bad)
fnstenv
mov
pop
mov
daa
movs
push
mov
dec
xchg
retf
js
pop
in
cmp
adc
inc
or
sbb
or
push
loope
or
iret
or
or
retf
movs
sbb
inc
bound
push
cmp
inc
cmp
movs
bound
shr
or
or
add
jmp
gs
pop
mov
lds
pop
sbb
mov
sbb
popf
fcmovu
icebp
cmps
jg
jbe
mov
inc
fcmovbe
mov
sbb
and
sbb
ss
inc
xor
pop
js
arpl
mov
adc
xor
jg
jp
and
loope
xchg
ficom
repz
mov
and
icebp
(bad)
data16
and
mov
hlt
in
ficom
(bad)
mov
cmp
scas
in
mov
fld
std
loopne
jno
and
mov
iret
ret
hlt
push
pop
xchg
xchg
mov
cmp
out
int3
xchg
or
dec
dec
mov
out
dec
lods
add
cmps
cmp
jae
dec
arpl
into
(bad)
dec
push
or
jne
cld
retf
test
or
dec
or
or
into
retf
bound
ins
shr
(bad)
out
adc
adc
or
pop
inc
pushf
mov
popa
cmp
outs
out
pushf
pop
aaa
je
int
inc
aam
aaa
push
mov
ins
push
inc
add
jno
imul
out
fild
scas
sbb
mov
mov
fimul
rcr
jnp
sti
out
dec
mov
retfw
cmp
(bad)
and
adc
int
mov
xor
arpl
push
ss
addr16
mov
jo
loope
lock
retf
test
fidivr
add
xor
mov
xor
and
add
dec
mov
push
outs
sti
shl
and
and
fld
adc
dec
jmp
shr
adc
std
int
ins
push
ss
lea
mov
in
xchg
add
movs
jmp
inc
fcom
out
clc
inc
ss
xor
ret
xor
aad
lock
xchg
movs
sbb
fimul
dec
xchg
loop
dec
int3
cld
and
jge
in
and
pushf
and
scas
pop
adc
clc
sbb
out
mov
shr
mov
loop
add
in
cmps
sub
leave
lods
push
sbb
xchg
or
and
push
sub
pop
inc
sbb
or
push
fldcw
(bad)
enter
lods
sti
sbb
and
cmp
and
and
jle
lea
(bad)
sti
inc
hlt
sti
mov
sub
iret
(bad)
inc
fst
(bad)
sbb
sti
xchg
xchg
in
inc
(bad)
cli
cmp
jl
xchg
in
loope
ficom
inc
ret
sbb
cmps
xor
jmp
loop
in
mov
jl
mov
hlt
mov
test
repnz
popf
add
iret
mov
add
mov
call
jns
cmp
sbb
inc
sbb
in
inc
pushf
jmp
daa
xchg
jl
js
lds
out
arpl
shl
cmp
test
mov
retf
cmp
sbb
aaa
pop
mov
add
and
fld
cmp
push
and
sub
push
xor
jmp
jmp
(bad)
shl
pop
or
(bad)
addr16
xor
or
movs
pop
xchg
push
push
xchg
mov
(bad)
pop
idiv
sub
adc
arpl
and
mov
jbe
xor
ficom
jnp
sbb
cld
xchg
clc
xchg
sub
or
jbe
jbe
xchg
test
imul
adc
std
jge
pop
retf
out
sub
push
lock
xchg
mov
cmps
bound
push
pop
ins
sbb
xor
mov
sub
scas
sti
mov
mov
stos
push
xchg
(bad)
in
lods
jbe
aas
cmp
push
inc
push
add
iret
aad
sahf
ins
ds
jae
push
push
sbb
xchg
mov
cmps
inc
add
jp
fstp
repz
sub
xchg
jo
cdq
sar
pop
and
mov
or
repz
retf
aaa
shl
cmp
adc
dec
loope
aaa
popa
popa
jnp
fwait
jns
into
mov
and
xor
push
mov
or
inc
xchg
sbb
icebp
adc
sub
push
xchg
enter
xchg
out
cmps
cdq
mov
jp
aad
jne
(bad)
outs
fstp
(bad)
adc
jmp
mov
or
arpl
das
test
cmps
(bad)
pusha
xor
push
cmps
(bad)
lods
and
mul
out
mov
shl
ret
add
das
cmp
dec
jp
pop
mov
(bad)
mov
into
rcr
popa
in
lods
call
je
pop
(bad)
cld
mov
aaa
and
arpl
push
lock
pop
fistp
sub
loopne
aas
adc
jae
or
fild
mov
adc
in
sbb
dec
mov
dec
pop
inc
nop
and
and
into
xchg
stc
and
mov
jl
mov
mov
cmp
or
and
fs
add
jg
fcom
cs
dec
cdq
dec
lea
aad
scas
shl
inc
cwde
xchg
cli
mov
push
or
in
repnz
xchg
inc
dec
and
retf
ins
ret
xor
mov
sub
data16
cs
ret
xchg
lods
fst
js
pop
rcr
sti
cld
pop
mov
cmp
ins
loopne
dec
jns
and
inc
jbe
sbb
stc
jp
je
dec
movs
adc
push
dec
dec
(bad)
in
outs
adc
and
add
ret
call
jo
nop
mov
das
jg
push
dec
sbb
sub
scas
out
sbb
scas
out
stc
xchg
ins
aaa
stc
push
sbb
retf
imul
xor
jmp
inc
inc
dec
pop
outs
adc
sbb
and
or
out
jle
repnz
mov
push
adc
cmp
mov
loop
xchg
dec
shl
sbb
cmc
dec
sub
loopne
sub
outs
mov
(bad)
pop
test
gs
cmp
inc
inc
inc
mov
jbe
lock
push
sbb
jne
add
push
int3
pushf
ror
(bad)
mov
adc
cmps
mov
leave
pop
mov
in
push
sub
ror
push
push
js
aaa
ins
cwde
mov
xchg
mov
out
pop
sub
inc
and
cmp
dec
lods
mov
inc
mov
jbe
push
xchg
jns
xor
mov
(bad)
rcl
in
mov
out
loopne
js
mov
test
or
mov
movs
es
int3
das
push
sti
je
add
ja
and
jb
in
addr16
pushf
dec
and
mov
inc
or
lds
push
and
(bad)
mov
xchg
xor
js
fsubr
mov
add
shl
sub
mov
xchg
and
xchg
fsubr
scas
stos
xchg
(bad)
scas
inc
xchg
jmp
pusha
dec
push
xchg
mov
cwde
push
or
mov
pusha
xlat
mov
mov
fwait
jnp
(bad)
dec
fstp
sbb
push
add
gs
lds
jmp
push
xchg
in
push
ds
sbb
addr16
push
fisubr
inc
mov
mov
pop
inc
mov
adc
cmp
test
les
add
dec
cmps
inc
dec
arpl
(bad)
in
int3
jmp
loope
mov
out
cmp
fsubr
out
pop
ror
hlt
aam
mov
dec
sahf
add
lahf
mov
retf
fistp
int
jge
call
arpl
ret
mov
imul
icebp
mov
movs
popf
daa
stc
mov
scas
movs
or
dec
mov
iret
push
stc
adc
in
and
icebp
test
inc
pop
dec
std
pop
in
cmc
xchg
mov
popa
popf
or
lds
mov
dec
add
mov
jge
or
pop
mov
mov
xchg
sub
pushf
and
sbb
lods
or
sbb
iret
retf
dec
je
(bad)
mov
dec
xchg
xchg
cmp
sub
mov
ins
lea
pop
push
cmps
inc
push
pop
loopne
cmps
aam
ins
sti
shl
retf
mov
inc
push
dec
test
dec
adc
sbb
les
ja
retf
aam
and
mov
sub
stc
pop
push
and
mov
cdq
jecxz
sub
fistp
and
pop
mov
cmc
adc
adc
test
cdq
jl
retf
mov
and
std
lahf
xor
movs
xor
jmp
inc
cld
jl
mov
int3
cld
shl
xchg
(bad)
stos
push
lods
mov
(bad)
mov
push
push
push
mov
aam
pop
scas
bound
push
add
jge
cmp
(bad)
mov
mov
std
add
fs
test
inc
pop
mov
gs
xchg
pop
hlt
call
add
cs
and
sub
js
mov
jno
sub
iret
xchg
or
and
mov
mov
jle
dec
lods
into
adc
int3
loope
jp
adc
sub
xor
cmp
aad
lods
xor
xchg
xor
imul
jbe
ins
jmp
add
call
or
call
jne
mov
xchg
repnz
pop
pop
xor
cmps
jg
fwait
jge
pop
jle
adc
(bad)
jmp
xchg
mov
jb
push
mov
fcmovb
aaa
mov
push
jecxz
sub
sub
ins
fcomp
stos
ret
iret
xchg
xchg
xchg
xchg
jecxz
mov
inc
dec
add
shl
(bad)
mov
and
jnp
sar
repnz
push
stos
cmp
add
adc
push
sbb
data16
mov
or
(bad)
dec
addr16
mov
inc
mov
mov
stos
jbe
je
jl
stc
sti
sub
clc
movs
ja
dec
pop
mov
sub
mov
xchg
adc
mov
test
arpl
mov
jo
ins
cmc
inc
not
and
dec
sbb
push
adc
jecxz
(bad)
scas
xchg
pop
dec
mov
fadd
dec
test
mov
add
dec
clc
sub
mov
xchg
pop
neg
movs
loopne
sub
nop
adc
xchg
or
xchg
(bad)
jmp
mov
sub
inc
sub
jae
dec
mov
sub
xchg
xchg
xor
mov
icebp
or
popf
and
jle
js
add
sbb
neg
clc
leave
xor
jge
sub
jecxz
sub
stos
call
repnz
add
bound
inc
loopne
add
inc
aam
loopne
jle
fldcw
mov
sbb
jecxz
jmp
pop
mov
popa
lahf
mov
loop
and
mov
movs
retf
xor
int3
shr
jmp
pop
daa
shl
sti
enter
and
adc
lahf
mov
js
stos
push
shl
pop
in
sub
fnsave
sbb
mov
jnp
outs
xor
and
repz
ret
mov
pop
inc
sar
xor
mov
add
cmp
jo
shr
out
and
sub
out
inc
aaa
pop
test
in
fdivr
sub
lahf
xchg
in
jmp
(bad)
push
pop
cmp
sbb
test
adc
test
add
mov
dec
mov
repz
dec
ins
inc
aad
adc
jmp
mov
lock
push
add
pop
push
push
adc
cs
jmp
sub
jg
and
bound
adc
cmp
mov
es
add
sub
mov
add
pop
inc
je
jg
inc
adc
mov
adc
lods
pop
push
lods
pop
in
shr
loope
movs
in
mov
push
sbb
jns
jbe
jb
inc
iret
xchg
rcr
mov
inc
jnp
xchg
pop
daa
js
(bad)
pop
mov
and
inc
cmp
pop
cmp
inc
or
push
dec
pop
inc
das
push
xor
nop
mov
loope
add
cmps
xchg
or
out
fsubr
xlat
movs
xchg
movs
sbb
in
inc
push
scas
icebp
addr16
(bad)
fldenv
ds
fisubr
js
je
xchg
sbb
sti
ins
or
dec
add
aaa
(bad)
jbe
mul
xor
pop
xchg
cmp
int
ins
stos
call
hlt
lods
add
lods
sub
dec
cmc
mov
dec
sub
aad
sub
and
dec
dec
call
retf
jecxz
cmps
dec
xchg
inc
mov
(bad)
mov
mul
mov
adc
or
jbe
adc
jg
mov
mov
dec
data16
sbb
shr
mov
and
call
lds
sahf
sbb
loopne
fldcw
xchg
xlat
sbb
imul
out
xlat
mov
mov
outs
das
mov
lods
mov
leave
cmp
iret
test
push
add
hlt
div
sahf
call
into
fiadd
pushf
rcl
jge
enter
xchg
xor
outs
jecxz
push
or
daa
and
mov
das
pop
outs
jo
test
(bad)
xchg
xor
(bad)
sbb
sub
cmp
shl
sub
scas
int3
lods
xor
lods
sti
pop
dec
in
daa
dec
push
shl
test
pop
inc
jle
lods
jbe
ins
pop
cwde
and
mov
xlat
add
sbb
dec
call
inc
out
jbe
pop
scas
fcomi
jnp
jbe
inc
(bad)
out
cmp
cs
lods
mov
retf
push
popa
xor
and
leave
mov
bound
(bad)
jp
jno
in
cmp
xchg
push
repz
fcom
add
jle
push
jge
leave
or
pop
imul
or
cdq
sbb
adc
and
pop
pop
(bad)
and
clc
inc
fist
cli
adc
movs
ins
outs
sub
inc
xchg
movs
shr
cmps
mov
pop
mov
ficomp
adc
and
aaa
jns
add
imul
loope
push
xchg
dec
sub
inc
inc
xchg
inc
call
outs
js
inc
jnp
mov
aam
loopne
xor
sub
cmp
stos
ret
outs
shr
inc
jo
adc
mov
xchg
ins
call
icebp
add
jl
movs
aad
xor
pop
std
and
adc
std
xchg
in
les
(bad)
div
lods
adc
xlat
push
call
jp
test
and
mov
in
loope
addr16
outs
adc
cmps
mov
out
fcmovu
icebp
pop
les
scas
lds
dec
or
cmp
test
pop
or
sub
sbb
mov
mov
cmc
in
jmp
and
jmp
sbb
sti
in
in
or
rcl
sbb
cmp
sub
sub
cmp
jle
or
inc
call
jno
int3
aam
dec
jno
add
or
add
push
push
into
sbb
xchg
inc
inc
mov
fadd
pop
fadd
jno
cmps
js
or
idiv
xchg
fcomp
in
loope
ja
jmp
iret
fs
imul
test
call
das
add
ja
lods
inc
fistp
or
adc
les
pop
fdiv
push
push
push
push
dec
jo
call
(bad)
xchg
push
or
xor
jle
and
jmp
stos
icebp
or
cli
pop
retf
xchg
daa
xchg
push
mov
inc
ins
and
in
mov
dec
mov
loopne
mov
adc
xchg
movs
cmps
inc
retf
hlt
movs
adc
sbb
mov
into
add
jae
mov
fucom
das
xor
push
xchg
fmul
into
js
adc
aad
popf
push
js
mov
loopne
push
push
lock
lahf
(bad)
std
pop
das
pop
lods
cmps
in
fidiv
hlt
push
sub
ficom
mov
outs
bound
(bad)
mov
cmp
cmp
sbb
sbb
adc
sub
cmp
pop
out
rcl
ins
pop
std
push
ds
add
cmp
xor
test
fisub
push
mov
jbe
mov
adc
test
sub
test
mov
ins
pop
xor
sub
fbstp
sub
inc
fst
imul
ror
xchg
push
pop
jp
cmp
es
and
loop
add
and
movs
int
adc
xchg
fisttp
or
cwde
jg
dec
(bad)
push
sub
das
xchg
je
addr16
iret
icebp
push
shr
pop
mov
inc
dec
stc
jae
push
inc
add
jmp
sub
inc
mov
cmp
retf
les
and
or
test
and
fwait
lea
fiadd
sbb
call
cmovge
xor
int3
dec
inc
push
jnp
push
icebp
std
pusha
mov
sbb
ficomp
sbb
add
mov
mov
rol
(bad)
and
cmp
inc
neg
rcr
xchg
jnp
and
test
aas
pop
mov
or
lahf
fnstsw
cmp
cmp
mov
mov
xchg
aaa
fbstp
cmp
xor
test
push
cmps
or
pop
je
dec
mov
inc
sub
in
daa
adc
cmps
or
rcl
fidiv
push
or
fwait
add
lahf
icebp
into
out
mov
ss
dec
movs
cmp
sbb
(bad)
fxch
pop
das
jecxz
inc
adc
retf
ficomp
mov
bound
aam
aam
imul
lods
in
aas
dec
gs
inc
mov
imul
add
and
or
out
fld
adc
inc
bsf
jmp
xor
movs
fiadd
mov
sbb
xchg
xchg
shl
dec
jle
xor
or
movs
mov
or
int
mov
dec
add
mov
adc
push
pop
and
inc
mov
icebp
movs
fwait
rcl
mov
arpl
push
add
cmp
push
mov
xchg
inc
dec
pushf
sub
cwde
inc
adc
fisttp
push
or
jl
dec
stc
sub
xor
cmp
jnp
push
retf
xchg
mov
lahf
jl
lea
cmp
leave
ss
pop
pop
repnz
out
dec
xor
call
fs
test
in
std
inc
jge
mov
jbe
scas
xor
lea
mov
cmc
cs
jo
std
js
mul
fs
and
mov
das
mov
xor
shl
push
cmp
pop
popa
xor
(bad)
pushf
cdq
loope
popa
cmp
sub
ret
js
repz
dec
repz
hlt
loopne
fld
push
pop
cmp
movs
(bad)
stos
loopne
jge
call
adc
cmps
out
sbb
mov
cwde
jne
cmc
or
fcom
xchg
cmp
xchg
(bad)
bound
in
lahf
(bad)
push
lods
into
adc
fild
lock
ins
xchg
jecxz
mov
sti
mov
aad
dec
es
out
leave
pop
mov
sbb
xchg
das
retf
xor
jg
xor
sbb
add
or
mov
jl
cmp
int
shl
bswap
mov
outs
push
dec
mov
mov
int
fs
push
jnp
dec
sbb
cmp
vcvttsd2si
dec
imul
mov
xchg
xchg
push
dec
shl
popf
pop
fdiv
in
icebp
not
dec
es
xor
add
cmp
enter
and
addr16
sub
sbb
sub
mov
jae
jmp
inc
cld
mov
in
add
inc
into
(bad)
mov
mov
loopne
les
or
push
lods
fisub
adc
push
cli
pop
les
sbb
pop
(bad)
(bad)
in
mov
popa
cld
scas
shl
and
retf
iret
push
xchg
pop
ss
dec
in
ins
inc
adc
test
clc
push
imul
shl
jge
jo
daa
fisub
lahf
test
ss
jmp
push
push
cs
xlat
bound
pop
movs
(bad)
test
dec
xor
mov
call
jns
cmc
lds
sbb
add
ja
popa
cmp
arpl
rol
pop
out
hlt
dec
xchg
or
sub
loop
ins
xchg
iret
sub
mov
mov
mov
sbb
push
(bad)
mov
cmc
out
sub
mov
dec
sub
and
scas
jmp
xor
(bad)
jbe
aad
out
pop
xchg
hlt
xchg
dec
add
inc
and
test
push
dec
rcl
sbb
sub
cli
cmps
(bad)
pause
or
mov
and
pop
sti
jae
sbb
pop
pop
dec
mov
push
lds
xchg
movs
mov
add
cmps
xor
pop
jbe
or
mov
neg
inc
mov
mov
push
scas
(bad)
mov
retf
clc
mov
std
loop
lods
movs
jg
cmp
(bad)
push
sbb
sub
pop
js
fstp
xchg
repnz
jnp
and
ds
mov
aas
jge
jno
jo
movs
mov
jno
loopne
(bad)
cmp
dec
mov
pop
add
jmp
test
sub
outs
jmp
cmp
inc
cmp
popa
fwait
inc
div
and
leave
jno
dec
fwait
adc
mov
sbb
mov
loopne
mov
xor
add
call
jb
mov
xchg
mov
add
pop
cmp
cld
out
inc
or
pop
mov
not
adc
xchg
inc
imul
pop
out
mov
xchg
cmp
or
cmps
pop
dec
cmp
(bad)
xor
mov
pushf
jb
das
data16
test
fisubr
jno
cmc
jbe
sub
mov
outs
loope
lods
or
pop
add
pop
or
ret
jp
push
jns
dec
test
jl
test
dec
movs
xchg
jnp
(bad)
push
cmp
les
es
dec
add
adc
fcom
shr
sbb
mov
xlat
pop
inc
jb
js
shr
mov
sub
cmp
ja
mov
push
lds
push
sub
mov
xchg
cmp
mov
popf
aad
ficom
push
fistp
mov
dec
enter
dec
dec
mov
stos
inc
(bad)
pop
clc
and
pop
push
sbb
or
scas
add
xchg
dec
or
(bad)
mov
stos
out
inc
sar
jnp
jecxz
nop
mov
mov
pop
je
ror
imul
lea
daa
push
dec
vandpd
mov
dec
push
sub
in
and
jmp
and
adc
mov
cs
dec
cmc
or
stos
xor
fld
clc
fcom
test
dec
mov
fld
cs
ret
and
adc
lahf
enter
ror
sub
add
pop
ret
cmc
jmp
adc
stos
scas
push
daa
daa
mov
jmp
cmp
rcr
cmp
loope
fbld
mov
shr
(bad)
fisubr
xlat
cmps
fs
cmc
shr
mov
in
and
mov
jne
test
mov
push
xchg
cmp
arpl
and
hlt
inc
aaa
add
rol
idiv
test
es
jmp
mov
dec
adc
jg
ror
shl
jl
xor
mov
xchg
jne
cld
jno
cs
add
adc
xchg
inc
fisubr
sti
dec
xchg
test
or
push
lahf
inc
cli
cwde
int3
outs
sbb
dec
mov
sbb
sahf
add
imul
rcr
mov
cli
(bad)
mov
jno
pop
lahf
or
sti
shl
mov
mov
pop
imul
and
loop
or
sub
iret
xchg
mov
and
test
movs
mov
pop
mov
adc
test
imul
adc
and
retf
add
mov
loope
add
xchg
ret
fst
cmps
mov
inc
jmp
in
xchg
mov
dec
dec
push
fdiv
repnz
add
pushf
bound
add
(bad)
or
mov
idiv
dec
add
ja
xor
jo
xor
pop
mov
dec
jae
pop
int
push
mov
and
addr16
arpl
xchg
push
fld
test
sub
stos
xchg
mov
fisttp
in
or
xchg
add
sub
dec
xlat
add
fs
(bad)
(bad)
dec
and
and
(bad)
xlat
lods
pop
(bad)
jl
cmp
dec
dec
and
data16
and
ficomp
imul
test
pushf
mov
xor
pop
dec
mov
enter
movs
xorps
inc
cdq
aas
push
iret
pop
sbb
popa
stos
mov
in
pop
retf
or
adc
and
icebp
mov
sahf
xchg
cwde
out
sbb
add
jl
ins
cmps
rcr
pop
mov
(bad)
jnp
fcomp
mov
aas
out
mov
push
adc
xchg
hlt
sti
out
jmp
or
cmp
or
mov
and
fild
add
adc
sub
sysenter
and
or
imul
stos
pop
mov
cwde
inc
pop
jmp
pop
repz
mov
push
jo
shl
fadd
sub
loop
mov
enter
adc
jnp
frstor
push
push
and
dec
lahf
mov
and
fstp
addr16
sbb
fidiv
xchg
inc
and
mov
ins
sti
mov
imul
cmps
dec
ins
pop
loop
cmc
xchg
lahf
mov
cdq
dec
pop
sub
or
pop
rcr
mov
icebp
in
sbb
pop
pop
popa
xchg
aam
out
pop
stos
mov
cmp
dec
sbb
jbe
sub
push
sti
add
in
(bad)
mov
mov
js
push
mov
jmp
adc
repz
rcr
fstp
or
or
jmp
jge
aam
add
pop
stos
stos
jg
test
fidiv
js
mov
cmp
mov
test
stos
mov
sbb
mov
mov
lods
call
inc
mov
mov
loope
pop
shl
enter
sti
inc
cmp
rcl
icebp
xor
pop
jl
rol
(bad)
out
cmp
xor
mov
or
cdq
iret
aaa
push
xor
push
cld
fld
mov
div
push
mov
sbb
or
jge
lahf
pushf
lahf
fcom
cmps
pop
xchg
sbb
lea
imul
adc
pop
jmp
test
fbld
int3
sti
mov
or
inc
mov
or
hlt
sbb
or
mov
sbb
mov
ror
pop
jo
adc
inc
cmps
pop
sub
pop
popa
pop
dec
cmp
mov
ins
and
jo
je
ror
push
jg
xor
pushw
out
mov
movs
push
mov
jle
aaa
xchg
int3
and
test
cmp
cmps
pop
adc
add
out
scas
inc
push
mov
push
dec
in
xchg
jmp
push
movs
or
lock
xor
sti
(bad)
dec
lods
xchg
inc
xchg
push
mov
xor
or
dec
sub
mov
add
lods
inc
int3
cmp
mov
in
out
and
mov
out
mov
sbb
push
pushf
mov
repnz
mov
push
push
es
sub
push
je
inc
cmp
pandn
xor
mov
jl
stos
push
add
or
inc
aaa
rol
mov
jmp
cmp
popa
clc
inc
mov
cmps
mov
mov
sub
(bad)
outs
and
repz
push
data16
enter
addr16
sahf
aaa
pushf
movs
sub
fcom
inc
mov
mov
dec
(bad)
xchg
sbb
fmul
sbb
dec
pop
arpl
les
je
jno
dec
mov
xchg
in
(bad)
clc
cwde
test
(bad)
addr16
mov
xor
inc
test
aaa
sub
(bad)
out
xchg
out
or
loop
pop
sbb
xchg
pop
cmp
mov
fwait
out
inc
push
xchg
sahf
pushf
pop
jmp
(bad)
jg
adc
and
jle
xor
push
fs
dec
pop
xchg
add
das
jg
data16
sub
fnstcw
adc
cmp
and
fbld
push
add
movs
pop
fucom
ins
out
sbb
je
outs
jno
mov
setns
lods
lds
imul
inc
mov
mov
ret
mov
arpl
push
mov
xor
stos
cwde
loope
adc
popf
jmp
xchg
add
loop
cld
mov
pop
add
cmp
test
inc
(bad)
std
out
xor
outs
test
jae
mov
ss
daa
neg
fnstenv
aad
mov
loope
pop
adc
mov
push
test
(bad)
mov
or
xchg
xchg
dec
xchg
adc
push
rcl
pop
fs
mov
xchg
js
dec
xchg
les
and
push
xor
and
call
pop
inc
out
mov
scas
leave
inc
or
mov
fisub
cs
adc
add
sti
stos
jle
pusha
pop
mov
push
stos
ret
scas
cld
repnz
mov
or
mov
dec
lods
scas
dec
add
sbb
popa
loop
popa
sbb
leave
in
adc
test
js
jno
push
sar
loop
xchg
sub
jecxz
mov
and
imul
jmp
scas
jbe
adc
les
push
sub
mov
aaa
adc
mov
sbb
lds
pop
jl
xchg
leave
dec
movs
retf
aas
in
pop
push
loopne
adc
in
xchg
in
or
dec
movs
push
jne
ss
sbb
mov
stc
jmp
int
sar
fisttp
loope
out
cmp
(bad)
out
jne
lods
mov
or
retf
jb
lea
sahf
mov
xchg
fld
pop
and
fld
icebp
and
test
int
xchg
mov
mov
and
mov
cli
dec
pusha
jge
call
dec
cmp
xlat
cdq
out
test
inc
btr
(bad)
sahf
movs
sahf
pop
mov
cld
pop
(bad)
mov
cmp
and
xchg
push
lea
add
cmp
retf
in
out
xor
loopne
aad
jecxz
test
fcomp
or
and
and
mov
mov
sub
lds
cld
pop
or
and
pop
pop
xchg
xchg
sub
push
in
jno
adc
cmc
or
mov
clc
mov
sbb
jle
shr
mov
mov
jle
xor
pop
jge
movs
jb
cmp
cwde
stos
lds
sub
xor
xchg
inc
xlat
cwde
mov
mov
call
and
js
and
das
xor
ds
sub
add
cld
add
iret
icebp
pop
jb
or
lods
mov
cwde
xor
xchg
inc
jb
sbb
pop
test
add
imul
mov
fidiv
out
adc
jbe
pop
ja
pop
in
popf
bound
pop
mov
into
sbb
and
cdq
or
xor
loopne
mov
(bad)
pop
imul
jle
lea
jp
mov
das
imul
pop
jbe
jnp
xchg
jmp
push
ret
adc
cmp
dec
inc
jns
imul
mov
repnz
cmp
cld
(bad)
push
pushf
dec
jp
pop
bound
pop
push
shl
add
sub
jmp
dec
push
shl
sub
(bad)
xor
enter
movs
cdq
retf
mov
cmp
loope
stos
ret
stc
es
add
xchg
lahf
popa
in
adc
and
and
in
adc
mov
adc
push
xchg
shl
jmp
add
jecxz
call
aam
je
fwait
enter
cmp
mov
pop
cli
mov
push
popa
outs
test
pop
jns
leave
mov
std
sete
sahf
cmp
or
fwait
xchg
cld
(bad)
or
mov
(bad)
out
push
xor
data16
imul
cmp
gs
and
inc
or
mov
sub
addr16
cdq
dec
addr16
jnp
lea
adc
pushf
(bad)
ins
lahf
jg
xchg
push
fst
ins
icebp
cld
fisubr
in
bound
mov
inc
in
out
jp
cmp
sbb
shr
fiadd
test
and
xchg
sar
xchg
loop
and
xchg
xchg
nop
(bad)
test
mov
pop
int3
dec
sahf
lods
sub
mov
imul
mov
les
daa
or
pop
xchg
into
xlat
mov
rol
and
cmp
movs
lock
pushf
test
pushf
push
jbe
jns
fistp
adc
sub
es
ret
cdq
rcl
add
xchg
mov
push
pop
xchg
jp
lahf
out
xlat
push
mov
stos
inc
loopne
ds
outs
pop
jne
div
lock
cs
repz
and
lahf
es
fsubr
adc
imul
bound
js
cwde
inc
pop
movs
repz
int
inc
aad
je
bound
adc
dec
xor
xchg
cmc
dec
sbb
(bad)
(bad)
dec
mov
clc
pushf
in
inc
ins
lahf
inc
fstp
inc
aas
shr
aaa
inc
jg
into
and
ss
adc
and
rcr
out
xchg
mov
cs
xchg
mov
mov
(bad)
fnstsw
scas
xchg
sub
inc
add
xchg
mov
add
mov
call
push
add
pop
cmc
or
aam
fcom
add
pop
aas
int3
jb
dec
in
shl
sbb
outs
cwde
(bad)
jmp
fidivr
popa
mov
xor
addr16
fabs
sti
mov
(bad)
mov
fs
inc
mov
gs
(bad)
xchg
icebp
adc
adc
ds
fldcw
push
int3
neg
int3
into
ds
out
xor
aam
mov
dec
loope
jl
push
or
cdq
out
xor
mov
rcl
cmp
adc
adc
pushf
xchg
icebp
dec
jmp
out
in
add
or
mov
aaa
or
rcr
or
ror
(bad)
push
and
jg
cmp
xor
sub
mov
inc
xchg
in
pop
loope
sbb
jnp
mov
jl
fdiv
add
movs
mov
sub
aad
xchg
dec
sub
mov
mov
movs
pop
push
cld
ficom
cmp
test
leave
js
icebp
sub
mov
xchg
or
pop
mov
rcl
sub
retf
xor
xchg
sbb
sub
jmp
cdq
iret
sub
adc
popa
xchg
sub
sub
ins
outs
loope
data16
jmp
clc
adc
jl
jb
stos
test
stos
in
push
xchg
ja
ret
mov
dec
mov
mov
mov
loopne
push
lds
fwait
cwde
and
jno
adc
mov
pop
sbb
scas
push
jns
sub
mov
daa
add
xchg
cmp
push
ja
bt
shl
fidivr
test
xchg
mov
mov
push
sub
mov
and
pop
sbb
arpl
cs
inc
pop
shr
adc
frndint
mov
add
(bad)
aas
mov
adc
xchg
sahf
jns
mov
pusha
adc
xlat
mov
shl
inc
ds
fld
mov
pop
out
fdivr
call
xor
sahf
sub
xor
jecxz
out
push
bound
(bad)
jnp
out
fs
movs
mov
mov
scas
cld
clc
out
aas
sar
shl
ins
pop
int
test
jne
fs
pop
icebp
fwait
pop
xchg
das
jmp
jmp
push
sbb
int
aam
rcl
test
fadd
dec
lds
fisub
mov
ret
jp
ret
push
xlat
push
cdq
and
iret
loop
pushf
mov
xchg
adc
sahf
sbb
(bad)
mov
clc
jmp
mov
mov
stos
add
or
call
mov
mov
pusha
adc
lahf
mov
retf
leave
push
lods
xchg
frstor
xchg
icebp
outs
fisub
bsf
shl
out
fwait
ds
outs
sub
fild
mov
lods
jle
sbb
(bad)
aam
(bad)
aam
pop
loop
jns
and
pop
jmp
cwde
nop
dec
pop
pusha
dec
(bad)
in
pop
shl
mov
sbb
out
ss
shl
lods
outs
sar
add
mov
cmp
push
jne
cmps
scas
mov
or
push
pop
pslld
fldcw
int
sub
call
pop
mov
mov
xor
inc
and
xor
ret
sub
cmps
jb
and
stos
cld
xor
imul
rep
call
jbe
inc
call
sub
jb
clc
ss
dec
add
loope
pop
fimul
adc
jae
adc
lahf
jbe
xchg
jge
and
lahf
arpl
test
out
jmp
out
ja
sbb
xchg
pop
stc
sti
mov
xchg
movs
mov
adc
int3
int
pop
dec
add
outs
dec
sahf
mov
inc
outs
sbb
mov
in
jb
and
push
dec
ret
in
shr
push
and
outs
cmc
fwait
aad
sbb
mov
loopne
mov
fwait
dec
dec
and
add
mov
retf
jbe
jecxz
inc
je
ror
sub
push
retf
retf
sbb
push
mov
sbb
inc
and
mov
pop
push
ret
inc
out
mov
bound
pop
mov
sbb
pop
fiadd
pop
mov
in
(bad)
data16
push
das
popa
sahf
jle
adc
mov
mov
je
shl
add
or
push
hlt
outs
mov
fild
popa
lods
xor
shl
pop
or
push
out
mov
mov
adc
adc
inc
clc
mov
(bad)
lods
mov
clc
jnp
sbb
mov
stos
jnp
test
fsub
inc
xor
and
fimul
jge
pop
inc
fnstsw
push
mov
or
pop
dec
xor
mov
ss
adc
rcl
adc
cwde
ss
mov
push
jecxz
and
sub
adc
std
mov
fnstcw
cmp
out
scas
inc
sub
pusha
js
(bad)
jnp
pop
jmp
xor
dec
inc
jne
lods
imul
adc
mov
fwait
mov
jb
mov
popf
dec
push
push
call
arpl
sbb
loope
mov
mov
xchg
aad
sbb
and
neg
in
out
pop
cmps
in
in
(bad)
mov
sbb
call
or
add
mov
shl
adc
mov
inc
sbb
xchg
jp
in
out
cmps
sahf
sbb
xchg
sbb
sub
loop
and
mov
lock
jo
aad
mov
fsub
gs
retf
dec
aaa
adc
mov
xchg
add
inc
or
fldcw
xchg
gs
inc
enter
rcr
inc
cwde
ins
sub
add
inc
mov
call
xchg
je
pop
(bad)
xor
add
push
rol
xchg
sub
repnz
imul
inc
adc
enter
mov
mov
pop
shl
in
add
pop
inc
clc
(bad)
(bad)
pop
ret
pop
ret
xchg
sub
cwde
scas
push
jmp
hlt
out
ret
daa
mov
cmps
or
adc
jg
or
adc
sub
xchg
xchg
xchg
mov
mov
jnp
inc
push
sbb
jne
dec
jbe
rcl
aas
mov
jle
idiv
mov
xchg
outs
mov
mov
cmp
xor
bound
or
loopne
stc
jl
push
xchg
clc
xor
pop
cs
ret
jbe
(bad)
enter
mov
xor
and
cld
ins
mov
call
xchg
push
xchg
sbb
pop
adc
(bad)
push
sub
(bad)
cmp
inc
mov
mov
adc
mov
in
mov
add
fst
es
dec
pop
nop
std
push
pop
pop
cbw
mov
sbb
test
and
cmp
pop
jbe
in
gs
adc
das
xchg
dec
mov
ds
inc
lds
jbe
outs
xrelease
mov
fldenv
mov
sub
ror
inc
fadd
cmp
xchg
add
mov
sub
jb
or
inc
clc
mov
add
iret
xchg
push
in
out
sub
sbb
mov
pop
inc
push
jo
xchg
xlat
pop
or
fwait
rcl
mov
mov
(bad)
push
mov
sub
pop
sbb
jmp
icebp
mov
fisubr
mov
xor
mov
out
jmp
mov
repnz
dec
lds
xchg
push
bound
and
xor
pop
jns
sbb
jbe
dec
pop
es
pushf
pop
jns
stos
mov
out
adc
adc
mov
(bad)
pop
xchg
jmp
cmps
retf
mov
stos
xlat
and
jl
movs
inc
inc
mov
popf
shl
arpl
sti
push
iret
mov
xlat
cmp
pop
add
rol
sub
fdiv
xlat
cmps
call
(bad)
out
jbe
clc
lods
push
and
adc
adc
arpl
ja
pop
pop
cmp
and
pop
sahf
mov
fcom
push
mov
loop
inc
xchg
pop
neg
sbb
jle
ins
fild
dec
push
shr
ret
movs
mov
pusha
cmp
or
mov
jl
ja
cmp
inc
xchg
sbb
pop
dec
aaa
xor
fld
mov
pop
mov
aad
adc
mov
adc
inc
push
stos
je
cmp
cdq
pop
xchg
movs
ins
mov
jmp
add
cmc
js
shr
ret
or
xchg
fwait
clc
fisubr
inc
rcr
inc
cdq
iret
loop
(bad)
fld
and
cmp
cmp
adc
repnz
enter
stc
daa
imul
adc
pop
sahf
jp
cmps
movhps
div
and
cmp
enter
jae
inc
stos
int3
add
fld
mov
jg
dec
push
cmc
cmps
adc
xor
test
les
(bad)
sbb
pushf
sub
test
mov
(bad)
cmp
fidiv
cli
mov
dec
dec
cmc
sub
pop
mov
test
iret
jp
lock
pop
gs
in
jae
cmps
les
xchg
and
adc
sbb
popf
jmp
jmp
mov
jno
in
or
outs
bound
mov
outs
das
(bad)
inc
inc
cmp
xor
hlt
into
xor
test
pop
add
xchg
jns
out
push
pop
push
stos
ins
jle
jl
mov
pop
aaa
add
cld
nop
xchg
pop
add
xchg
mov
(bad)
dec
xchg
or
mov
popa
mov
jmp
mov
dec
dec
fisub
in
(bad)
in
xchg
adc
js
inc
dec
in
cmp
inc
push
mov
adc
mov
pop
jp
jo
dec
loopne
jge
push
cmps
fwait
cmp
out
pusha
retf
push
xchg
add
cs
lods
cmps
fwait
pop
xchg
retf
mov
mov
mov
jl
cmc
push
lahf
push
arpl
arpl
sub
fsub
inc
iret
adc
daa
fdivr
or
push
push
rcr
inc
push
push
cmp
sbb
sub
pop
and
fisttp
push
rcr
lds
test
icebp
push
mov
icebp
in
cmp
call
xchg
push
gs
and
(bad)
cmp
mov
bound
lahf
not
push
aad
xor
pop
sbb
mov
(bad)
shr
pop
pop
cwde
mov
xor
pop
stos
aad
jge
jmp
push
movs
(bad)
imul
push
out
pop
jle
gs
add
aad
mov
sub
dec
fcom
and
pop
call
shl
test
push
dec
sahf
xchg
push
fwait
dec
(bad)
ins
inc
xchg
ret
ficomp
imul
inc
ret
out
dec
fiadd
inc
sub
xchg
adc
xor
inc
mov
add
out
mov
sub
int
out
add
jmp
dec
xchg
xor
fxch
mov
sbb
movs
xchg
sub
jo
dec
lea
jmp
or
add
cmps
outs
pop
inc
mov
and
out
leave
dec
imul
loope
sbb
retf
out
fs
out
add
int3
add
or
or
cld
inc
jecxz
lods
inc
fisubr
jo
mov
inc
push
call
jae
cmp
sahf
(bad)
test
adc
sti
(bad)
bound
push
dec
enter
pop
mov
sub
push
imul
mov
les
pop
sub
in
jg
jne
xlat
xor
xor
(bad)
sahf
xlat
adc
add
pop
push
pushf
scas
sti
pop
repnz
and
jecxz
sbb
adc
aam
loopne
pop
fstp
arpl
ffreep
jmp
add
int
and
pusha
push
in
mov
add
adc
xor
dec
pop
and
mov
push
lods
ins
xor
popa
cdq
cmps
dec
sti
(bad)
mov
push
cmc
(bad)
cmp
inc
popf
push
popf
fist
ins
(bad)
cmps
aaa
dec
nop
(bad)
push
pushf
jg
sub
icebp
xor
mov
cs
mov
and
inc
mov
fst
xchg
scas
sbb
adc
cli
or
fwait
push
jmp
xor
or
or
fld
mov
xchg
push
arpl
frstor
xchg
mov
sbb
loope
jb
xor
mov
scas
(bad)
and
jmp
aas
inc
imul
sbb
loope
adc
or
inc
mov
popa
retf
adc
fisttp
retf
call
jnp
cmc
inc
lar
jbe
sbb
stos
pop
and
scas
or
rcr
call
sub
inc
xor
cmc
or
push
mov
iret
retf
shl
inc
stos
xor
daa
jle
jg
adc
aas
inc
xor
aam
push
jmp
outs
mov
fisub
pop
fwait
push
aaa
sbb
dec
xchg
add
call
push
jp
sub
bound
hlt
clc
dec
fcom
inc
std
pushf
addr16
in
lock
bound
jb
lahf
fwait
cs
lea
repnz
and
cmp
cli
adc
mov
outs
mov
jae
pop
lds
outs
inc
jo
add
jno
stc
bound
call
or
lods
inc
adc
mov
push
pop
retf
adc
dec
push
mov
daa
inc
daa
jl
out
mov
push
sbb
jo
cmps
je
pop
add
and
pop
(bad)
pop
leave
push
rcr
pop
mov
and
push
sub
punpckldq
adc
dec
(bad)
push
cmp
dec
pop
jae
jp
test
data16
pop
out
xor
clc
push
(bad)
mov
pop
mov
into
out
in
mov
fild
xor
adc
push
adc
mov
inc
dec
cmps
lahf
out
jo
jns
sbb
sahf
cmp
repnz
push
xor
lods
arpl
out
jmp
out
mov
pop
and
repnz
sti
jbe
(bad)
ins
dec
sbb
mov
sbb
scas
xor
adc
cmp
test
mov
lods
dec
loopne
dec
test
or
xlat
mov
mov
ror
aaa
mul
push
aam
outs
arpl
push
mov
fwait
sbb
dec
cmps
adc
out
retf
mov
std
shr
pop
imul
(bad)
js
mov
push
jmp
or
ins
add
pop
adc
push
inc
aaa
cld
sti
aaa
call
pop
inc
(bad)
cmc
aad
daa
ja
ins
aas
adc
mov
pop
pop
inc
cmp
int3
cmp
(bad)
loopne
retf
movs
pop
pop
push
mov
ja
repnz
jns
scas
push
inc
aam
nop
dec
std
dec
xor
push
sbb
pop
sbb
mov
mov
mov
call
stc
test
dec
push
cs
fadd
call
xchg
outs
mov
and
xchg
xor
test
popf
ficomp
call
cli
popa
inc
and
cmps
inc
and
out
pop
inc
mov
das
fmul
stos
lds
inc
ret
into
js
mov
and
and
xor
mov
jnp
inc
jg
fs
jns
and
xor
shl
sbb
in
in
push
xchg
scas
mov
fdiv
aaa
arpl
mov
dec
xor
jge
inc
add
ss
daa
out
call
mov
jb
jne
pop
mov
mov
jg
jmp
cmp
or
cli
cmp
test
pop
jbe
jp
stc
repnz
sbb
and
enter
jo
xor
mov
inc
adc
fcmovnbe
or
(bad)
iret
or
or
add
and
push
aam
xchg
jns
loope
or
xor
pop
adc
sbb
xor
dec
mov
cwde
(bad)
out
sub
jmp
(bad)
mov
xor
adc
cld
mov
mov
mov
mov
pusha
test
jl
and
mov
sbb
pop
div
fsubp
(bad)
mov
xor
push
pusha
pop
add
into
fst
xchg
sbb
in
add
mov
(bad)
(bad)
popa
ins
nop
aad
or
arpl
mov
aas
mov
ds
or
jo
mov
and
sub
push
xor
aad
push
(bad)
fmul
push
push
fnsave
in
and
sar
cwde
das
add
push
add
mov
fs
int
mov
(bad)
cdq
sbb
sbb
adc
jbe
sbb
test
push
in
ret
push
cmp
retf
repz
imul
push
lods
pop
loope
aaa
shl
pusha
jb
sbb
lahf
push
xchg
cmp
mov
int3
gs
xor
sar
xchg
call
jno
(bad)
mov
cmp
js
xlat
int3
and
jnp
adc
add
imul
fistp
mov
ja
jb
add
ss
sti
sbb
inc
adc
ds
inc
mov
mov
jno
ret
and
fdivr
inc
lds
jmp
aam
nop
adc
ins
jbe
cmp
aad
inc
sahf
xchg
and
push
outs
retf
mov
lea
es
inc
scas
pop
(bad)
out
outs
push
jge
cwde
sub
push
lea
jo
xor
push
callw
xor
lea
xlat
(bad)
pop
mov
imul
cmp
xor
sahf
or
(bad)
test
iret
dec
mov
lahf
out
aam
ins
clc
pop
jmp
lahf
inc
idiv
dec
lds
in
mov
pop
mov
rcl
cs
test
fstp
pop
daa
sub
fs
stos
fincstp
cmp
std
sub
and
mov
in
out
movs
pushf
je
inc
dec
cs
out
mov
or
and
dec
add
pop
test
sbb
dec
xlat
jmp
xchg
mov
(bad)
out
sub
js
fwait
jecxz
cwde
inc
cmp
adc
xchg
push
inc
sub
jbe
fmul
cli
lods
push
aaa
adc
loope
in
mov
cwde
fbstp
icebp
or
add
clc
inc
sub
outs
sar
or
pop
(bad)
retf
add
test
call
retf
adc
push
mov
loope
dec
mov
xchg
and
mov
jbe
mov
adc
mov
lds
inc
xor
cmp
std
leave
mov
je
gs
and
mov
push
inc
jne
jb
lods
xlat
cmp
jae
rcl
ret
in
cwde
and
out
push
mov
mov
adc
enter
imul
sti
lock
(bad)
inc
cmp
xchg
test
cdq
and
mov
iret
lods
pop
(bad)
mov
rol
pop
sbb
push
fcomip
bound
out
mov
mov
jmp
jge
mov
ds
adc
xor
jmp
push
ins
icebp
inc
xor
jne
jo
mov
xchg
push
es
xor
adc
add
cmc
cmps
mov
mov
(bad)
mov
or
cdq
jbe
jbe
dec
lahf
sub
repz
hlt
sbb
mov
jg
pop
add
shl
scas
dec
adc
mov
and
hlt
pop
dec
or
outs
(bad)
sub
push
xchg
popa
imul
mov
and
scas
retf
in
lds
xchg
cld
sbb
sbb
js
stc
pusha
in
retf
sub
popa
and
sar
test
mov
in
mov
add
mov
adc
sti
xor
xchg
pop
ret
dec
fnstenv
(bad)
(bad)
pop
aam
ja
inc
sysenter
es
push
rcr
inc
aam
sbb
aaa
je
cmps
sbb
ins
lahf
jnp
xchg
btr
pop
repnz
mov
jmp
movs
out
xchg
(bad)
arpl
cmp
cli
ss
or
or
(bad)
pop
outs
fimul
(bad)
fisub
pop
mov
mov
xchg
test
dec
adc
xchg
fsubp
mov
or
(bad)
fiadd
mov
mov
xchg
mov
out
sbb
jno
mov
repz
add
mov
scas
mov
mov
push
jne
cld
inc
cwd
mov
jne
and
cmp
fdivr
add
lea
inc
lahf
enter
pop
lods
(bad)
neg
aam
xchg
pop
aas
mov
rcr
arpl
pop
dec
mov
xor
cld
push
push
(bad)
rol
cld
scas
push
fsubr
or
dec
cli
jno
pop
sti
push
outs
std
pop
test
rep
inc
pushf
sbb
in
mov
pop
sbb
add
out
add
mov
icebp
(bad)
fst
xor
(bad)
(bad)
(bad)
rcr
sub
push
retf
adc
adc
ret
jbe
pop
dec
dec
push
mov
jnp
test
pop
ds
sbb
push
pop
or
pop
out
push
add
xlat
dec
inc
stc
push
div
xor
xchg
xchg
shl
cmp
and
sub
movs
add
sbb
vcvtsd2si
xor
cmc
jl
sbb
jno
xchg
mov
adc
mov
cmp
pop
movs
mov
jno
ret
aad
(bad)
cld
shl
push
jbe
imul
xchg
mov
stos
repnz
mov
and
cmp
mov
addr16
ror
(bad)
cwde
adc
lds
hlt
cmp
pop
xchg
loope
rol
mov
push
adc
and
sti
lock
cmp
inc
jp
ins
push
movs
enter
addr16
inc
stos
shl
adc
test
jb
mov
sub
xchg
pop
and
mov
mov
push
retf
mov
pop
xchg
out
arpl
mov
sbb
dec
pushf
repz
mov
test
or
rcl
add
loop
fs
jb
adc
lods
shr
sub
mov
ja
mov
jno
jne
lock
and
pop
loop
pop
popf
mov
sub
jge
mov
adc
(bad)
int
bound
imul
jl
aad
mov
gs
imul
rcr
sub
mov
cdq
inc
clc
mov
add
test
test
mov
rol
and
inc
xor
clc
pop
sub
jecxz
scas
enter
ds
cmp
jl
aam
les
xor
or
rcl
mov
enter
mov
bound
sub
stos
add
loopne
repz
test
mov
adc
sub
pop
xchg
adc
mov
dec
aaa
shl
loope
leave
or
cmps
dec
and
jae
adc
popf
int
cmps
push
lods
sbb
mov
cmps
cmp
loopne
scas
sbb
sub
outs
push
xchg
in
mov
in
cmp
mov
mov
add
inc
xchg
mov
push
sti
dec
jl
sbb
mov
mov
in
adc
in
lods
loopne
es
pminub
adc
mov
pop
repz
retf
jmp
push
inc
mov
or
cli
clc
call
jnp
fnstcw
push
lds
and
imul
push
xor
cwde
mov
add
xchg
fist
ret
gs
(bad)
push
mov
mov
push
cmp
adc
mov
pop
or
pushf
gs
out
fs
loope
dec
sub
and
pop
jns
cmps
pop
ins
sub
mov
addr16
les
pushf
lods
fadd
les
push
and
mov
or
xchg
inc
pop
xchg
pmovmskb
xchg
mov
daa
es
push
mov
int
lea
outs
iret
aaa
dec
or
xchg
mov
xor
jno
add
stc
cmp
jns
or
loop
and
int3
cmps
mov
push
neg
push
stos
push
fwait
call
dec
in
jmp
jb
lds
sbb
rol
popa
adc
js
popa
pop
xchg
setle
pop
push
dec
test
add
(bad)
int
sub
push
mov
xchg
iret
sub
test
cmp
jmp
ins
cmps
outs
cdq
repnz
jb
jge
stc
cmc
xchg
pop
mov
clc
(bad)
loop
(bad)
lock
dec
fild
dec
mov
inc
jbe
mov
dec
mov
data16
fmulp
and
out
fdiv
pushf
mov
outs
cmp
(bad)
mov
mov
pop
sub
pop
out
ja
xchg
iret
int3
and
ror
dec
push
(bad)
cli
mov
(bad)
xchg
(bad)
pop
inc
fs
xor
push
in
daa
sahf
xchg
ins
les
cmc
cmp
push
and
sub
in
dec
test
data16
addr16
int3
mov
mov
push
push
mov
or
xchg
test
cmp
lea
mov
scas
mov
mov
(bad)
add
cld
aaa
add
fs
imul
addr16
clc
cli
xchg
or
daa
imul
rcl
mov
or
inc
popa
sbb
mov
mov
cmp
aaa
sbb
cmp
jl
push
sub
ror
pop
fidiv
sub
ror
pop
push
push
sub
sub
inc
sbb
xchg
imul
sub
popa
inc
push
int
mul
jns
in
jle
loope
bound
out
push
adc
les
stos
cmp
loopne
aam
ja
into
cmp
adc
(bad)
sbb
out
mov
jg
adc
adc
and
int3
bound
lods
or
icebp
aam
mov
leave
into
mov
inc
dec
xor
stc
mov
popa
push
out
jmp
(bad)
shr
(bad)
pop
ins
pop
and
cli
fs
aas
sub
xor
adc
mov
push
int
jmp
sbb
loop
add
mul
or
pop
cmp
test
ins
add
mov
in
dec
scas
lods
or
(bad)
shr
xchg
sbb
inc
outs
or
repz
mov
leave
imul
and
sub
or
adc
pop
add
fist
loope
sahf
rol
(bad)
shl
mov
sbb
mov
pop
pop
cmp
fmul
mov
rol
fisttp
ret
xlat
dec
sbb
ret
xchg
mov
inc
loope
ret
fld
call
push
sub
adc
call
push
pusha
mov
or
jl
dec
mov
scas
rcr
cmp
(bad)
test
inc
xor
mov
xchg
mov
cld
mov
xor
gs
cli
sub
jns
pop
push
xchg
test
ins
fmul
adc
jae
ja
test
add
jmp
and
das
pop
icebp
fld
pushf
stos
loope
dec
(bad)
mov
mov
dec
jge
test
jno
sti
jp
pop
push
test
push
arpl
add
stos
out
in
frstor
mov
arpl
(bad)
xlat
dec
out
xor
fcom
pop
pop
inc
mov
or
mov
sub
or
(bad)
imul
data16
sub
jmp
pop
mov
fwait
bound
mov
xchg
mov
mov
retf
push
or
scas
and
dec
push
int
call
mov
xchg
pusha
ss
pop
mov
and
push
test
xchg
das
aad
sbb
jle
daa
dec
nop
lea
in
xor
sbb
and
adc
fdiv
not
arpl
stos
cmps
out
xor
cmps
outs
or
push
rol
sbb
add
push
dec
hlt
das
sub
adc
sub
test
sbb
xchg
stc
jmp
cmps
sub
dec
dec
mov
int3
mov
popa
icebp
cmp
sbb
mov
jmp
xchg
test
xor
sbb
imul
push
mov
stos
popf
mov
shr
cmps
call
and
pop
dec
adc
scas
(bad)
bound
into
icebp
inc
adc
jmp
push
repnz
mov
pop
jb
xchg
or
nop
xor
stc
jnp
add
retf
stc
jne
loop
add
or
fwait
cmp
rol
repnz
xor
sub
push
xchg
jb
test
mov
mov
dec
inc
inc
test
cmp
ss
jmp
(bad)
cmps
mov
js
cs
std
arpl
mov
pusha
in
imul
cdq
stos
push
push
inc
or
xor
pusha
mov
adc
xchg
das
nop
adc
clc
inc
popf
dec
add
pop
arpl
test
movs
retf
bound
xchg
pop
mov
repz
mov
add
cmps
dec
clc
xchg
lods
sbb
push
sahf
pop
jge
add
loop
nop
gs
mov
outs
dec
cwde
xor
or
mov
ret
xchg
pop
dec
(bad)
fdivr
dec
fdiv
xchg
cmp
push
jp
jecxz
xchg
inc
and
fidivr
pop
mov
jns
or
dec
xlat
xor
(bad)
sub
dec
push
sbb
mov
push
mov
inc
mov
push
movs
sub
aas
mov
or
push
jb
mov
mov
push
mov
je
cmc
das
lods
mov
lods
xchg
test
sub
push
push
sub
shr
push
(bad)
jg
jmp
loop
jb
sbb
lods
and
mov
and
xchg
mov
pop
(bad)
out
ds
scas
cmp
jg
ins
aad
pop
retf
add
mov
(bad)
push
xchg
xchg
repnz
cmp
push
outs
push
dec
inc
ret
and
mov
pop
xor
jp
jbe
fcom
mov
fwait
push
and
sub
mov
inc
sbb
test
jge
gs
test
jmp
sub
add
cmps
(bad)
cmp
out
test
(bad)
mov
int3
in
out
jmp
mov
mov
jne
lea
pusha
or
sub
jp
push
lock
pop
es
and
js
int3
je
xchg
cmp
les
inc
jbe
add
mov
sbb
cmp
add
sbb
push
pop
cmp
fisub
push
rol
cdq
(bad)
clc
fwait
ja
ret
inc
in
inc
add
mov
mov
adc
sti
aam
jmp
xor
mov
sahf
push
push
out
push
sub
fimul
mov
xlat
jg
dec
je
pop
dec
and
cmp
scas
shl
jmp
int3
sbb
mov
fcom
je
mov
cmp
pop
jecxz
call
mov
addr16
sub
add
add
icebp
xchg
fwait
aad
je
int3
add
pop
cdq
and
pop
sub
mov
(bad)
push
mov
unpckhps
mov
xor
repz
dec
outs
ret
(bad)
not
popf
dec
mov
jnp
out
jge
pop
sbb
cmp
dec
sub
and
xor
int
xor
cwde
mov
(bad)
mov
(bad)
stos
mov
rol
mov
mov
sub
sub
xor
les
mov
idiv
in
sub
cmp
pop
cli
mov
push
pop
jae
sub
bound
add
mov
in
inc
mov
addr16
mov
mov
push
int
(bad)
fbstp
mov
jmp
ret
sub
cld
and
push
push
(bad)
nop
mov
jmp
mov
in
sub
data16
out
push
cmc
out
sbb
popa
add
push
ins
inc
mov
push
dec
mov
sbb
and
inc
pusha
popf
call
std
dec
sbb
repnz
out
xor
(bad)
mov
ret
xchg
xchg
mov
movs
(bad)
jbe
setb
loope
sbb
out
xlat
imul
sub
(bad)
mov
add
popf
mov
xlat
dec
adc
loop
add
ss
in
adc
cdq
fcomp
popa
jns
stc
or
movs
int
sar
call
or
call
dec
mov
adc
pop
adc
pop
mov
imul
test
mov
sbb
ficomp
push
retf
adc
xor
push
in
test
fimul
shl
pop
and
jmp
mov
lahf
mov
iret
inc
and
sub
push
cmc
mov
xchg
mov
adc
cmp
xchg
ret
fimul
xchg
xchg
repnz
xchg
in
mov
fist
fs
mov
xor
vpsubw
in
push
data16
fisttp
ret
jnp
sbb
mov
in
mov
sar
cmp
aad
pop
rcr
xchg
sub
xor
fwait
lds
xlat
sbb
jnp
jmp
retf
scas
cmps
leave
(bad)
fld
mov
pop
xor
or
repnz
sub
add
mov
repnz
sar
add
or
sub
xor
pop
mov
sub
fimul
pushf
inc
jns
call
mov
fsubr
jle
lods
push
jle
sub
pop
push
pop
ret
int
sub
sub
gs
sbb
inc
nop
adc
outs
mov
sbb
test
scas
addr16
cmps
retf
xor
imul
je
pop
out
aas
xor
aaa
clc
mov
push
jl
imul
call
lock
mov
xor
xchg
pop
push
and
fimul
aas
cmps
out
ror
pop
fcomp
outs
ins
mov
fimul
das
sbb
lea
scas
mov
or
imul
jge
loopne
in
or
inc
mov
ins
inc
push
sar
mov
outs
out
sbb
clc
scas
fild
cmps
lds
pop
pop
dec
adc
push
push
sub
dec
pop
xlat
mov
adc
jmp
mov
sti
add
nop
test
and
xchg
scas
cmp
retf
mov
stos
aam
cmp
and
mov
enter
push
inc
jae
inc
out
cmp
test
stc
sub
aaa
stc
cs
xchg
xchg
adc
dec
cdq
dec
jp
iret
rcl
ins
push
cmp
xchg
inc
xchg
sub
mov
mov
mov
add
fiadd
in
add
lahf
das
push
ja
sub
(bad)
addr16
sub
pop
and
in
les
add
test
(bad)
xor
xor
fiadd
mov
fsubr
ins
sub
adc
test
add
inc
fwait
pop
je
dec
in
add
jmp
and
cs
cmp
pop
lods
push
test
jl
ror
pushf
(bad)
and
sub
mov
aas
push
movs
aad
sbb
mov
clc
out
hlt
call
mov
retf
int
push
les
fmul
sub
bound
in
dec
cli
sbb
jno
(bad)
ret
xchg
fs
push
or
ins
fstp
ret
outs
xchg
add
je
iret
popa
mov
xor
or
enter
(bad)
add
push
cmp
(bad)
lahf
and
and
iret
adc
lock
ss
inc
sub
daa
sub
jmp
mov
sbb
jno
fwait
call
or
jne
xor
(bad)
jg
xor
dec
xor
adc
pop
mov
mov
pop
test
mov
dec
sub
add
mov
inc
push
or
in
rol
xlat
jo
lahf
shl
ds
pop
sbb
(bad)
fistp
add
xor
(bad)
sbb
stos
xchg
call
icebp
arpl
push
out
jne
call
inc
aam
fstp
push
push
(bad)
jae
(bad)
sub
icebp
inc
mov
mov
or
pusha
call
xchg
loop
fisttp
push
ins
or
push
cmp
arpl
les
sar
shl
dec
mov
mov
pop
dec
fisttp
out
pop
pusha
add
push
xor
rol
in
addr16
xor
inc
addr16
mov
mov
push
jo
in
xchg
scas
xor
retf
inc
adc
(bad)
mov
call
push
jp
addr16
push
sbb
cmp
call
push
mov
arpl
xor
mov
out
adc
push
add
inc
mov
jnp
ins
push
lock
mov
xchg
mov
xor
outs
dec
mov
push
jp
stc
mov
sub
scas
jmp
cld
je
test
mov
inc
fadd
or
ss
mov
and
aaa
jle
outs
inc
mov
sbb
inc
imul
xor
or
loop
xor
inc
pushf
loop
ror
aad
jmp
xchg
cmp
push
pop
cmp
je
push
pop
pop
gs
pop
icebp
jecxz
movs
repz
jmp
mov
mov
in
xor
mov
mov
cdq
pop
or
dec
mov
mov
inc
and
retf
xlat
fucom
lods
stc
jo
adc
adc
push
bound
das
pushf
andps
scas
(bad)
test
arpl
bound
jl
sbb
jp
(bad)
xlat
push
pushf
xor
xor
mov
ficom
(bad)
shr
adc
ss
mov
int3
mov
in
mov
inc
push
dec
fisub
sub
adc
sub
push
mov
mov
clc
mov
cdq
jo
add
add
push
dec
div
xor
retf
jmp
fisub
mov
adc
jle
shr
dec
js
int
mov
lea
and
fsin
and
jno
loope
mov
out
addr16
test
inc
fdiv
pusha
jge
cmp
xor
repnz
outs
sbb
dec
lahf
leave
mov
(bad)
mov
test
in
mov
jg
test
push
pop
test
addr16
and
jno
pop
loope
inc
lea
xor
xchg
mov
jae
in
(bad)
repnz
int3
sub
sub
ins
popf
pushf
inc
push
stos
fwait
int
mov
in
cmp
ja
xchg
xchg
and
and
ss
shl
jno
stos
xchg
jae
ficom
sti
stc
jno
cmp
test
and
sub
push
in
fucom
jae
cmp
repz
pushw
pop
test
push
xchg
push
pop
mov
mov
std
jb
or
sub
pop
pushf
hlt
fisub
(bad)
mov
and
xchg
aad
dec
nop
xchg
test
je
dec
loope
jns
push
mov
jecxz
mov
cmps
xor
jg
mov
jle
int
out
rol
sti
xchg
and
cmp
dec
or
imul
cmp
add
or
leave
sub
clc
mov
out
xchg
sub
(bad)
cmp
or
sbb
or
retf
nop
pop
lea
in
(bad)
ins
xchg
or
imul
retf
outs
out
push
nop
inc
push
dec
in
leave
sbb
xor
lods
lea
or
sbb
call
call
fwait
lock
aaa
jl
adc
sbb
fiadd
cmp
jnp
int3
jo
ss
mov
aaa
js
push
inc
jmp
fsub
xor
mov
cli
xor
movzx
xchg
fwait
xchg
sub
cld
int
fwait
mov
ds
movs
pop
je
and
inc
popa
pop
shr
inc
dec
mov
cmp
inc
add
jmp
retf
sbb
(bad)
mov
sub
sbb
xchg
and
xor
arpl
out
inc
(bad)
inc
mov
mov
add
push
mov
adc
lods
iret
leave
push
int3
je
lods
mov
std
(bad)
icebp
inc
scas
or
sahf
jp
fwait
sti
in
test
push
jg
push
adc
ja
cmc
sbb
into
dec
xchg
inc
push
ja
retf
or
or
int
cmp
test
push
add
imul
pop
popf
mov
bound
dec
push
or
xor
mov
mov
mov
fcmovnu
or
movs
scas
add
mov
adc
mov
xchg
ficom
and
pop
fwait
shr
jo
call
jno
mov
daa
int
mov
dec
js
js
pop
ret
mov
push
pop
iret
mov
jmp
pop
loopne
nop
loopne
pop
xchg
arpl
mov
lds
test
sub
repz
push
aaa
push
sbb
mov
fwait
ins
xchg
jno
push
inc
lods
xchg
and
or
test
xchg
add
jmp
push
sti
retf
adc
adc
loop
ja
inc
ds
es
mov
xor
xor
clc
(bad)
fnstcw
mov
jo
sbb
dec
(bad)
jno
cli
stos
pop
dec
mov
scas
bound
sti
pxor
leave
neg
sahf
sbb
sbb
je
xchg
dec
ins
and
loopne
or
push
das
test
shr
or
xchg
cld
idiv
push
stc
mov
fdivr
xor
sbb
mov
ret
hlt
in
(bad)
dec
test
mov
push
sbb
adc
loopne
mov
sbb
hlt
out
push
int
hlt
xor
(bad)
sbb
leave
xchg
nop
bnd
je
das
pop
ret
pop
mov
jp
and
xor
and
pop
pop
pushf
sahf
and
add
dec
cs
fisttp
movs
aaa
les
gs
loop
(bad)
fiadd
pop
loopne
(bad)
fcmovnbe
pop
out
xchg
jmp
sub
and
xchg
call
fistp
out
adc
add
fisttp
ss
mov
push
sbb
enter
in
pop
and
jl
dec
cmps
cmpxchg
lahf
push
pop
mov
sti
jnp
inc
mov
ficom
and
and
icebp
das
imul
data16
dec
fnstsw
cmp
lock
test
sbb
jmp
mov
fadd
outs
ins
ds
pop
stos
dec
or
cmps
mov
mov
data16
gs
stos
ins
xor
and
jno
loop
sti
pop
loop
pop
lock
daa
xor
xchg
cmps
(bad)
adc
mov
cmps
fnstcw
inc
call
jns
out
mov
add
aas
pop
lahf
jecxz
stos
or
clc
std
adc
jecxz
ror
mov
xor
(bad)
shr
sbb
push
mov
call
adc
cmps
mov
push
lock
adc
jmp
loope
inc
push
or
fprem
jle
pop
cmp
pop
push
push
mov
xchg
stc
mov
inc
push
in
repz
xchg
popf
pushf
sbb
jecxz
scas
imul
test
mov
xlat
jmp
adc
adc
jo
shl
fld
or
mov
or
mov
inc
inc
iret
pop
mov
daa
bnd
or
fucomi
addr16
mov
xchg
cmp
add
int
xchg
test
jmp
push
mov
fdivr
push
mov
add
fild
dec
stc
cmp
pushf
sub
imul
cmp
jp
mov
ins
jno
jbe
ror
enter
mov
fs
out
lock
adc
or
daa
ds
je
shr
outs
sbb
jmp
lods
mov
ret
loope
mov
mov
mov
into
aad
test
cmp
gs
push
out
push
dec
dec
(bad)
mov
fbld
mov
dec
cmps
mov
jb
jmp
lea
ret
out
xchg
mov
push
mov
mov
ins
ins
mov
test
mov
lahf
sub
arpl
dec
out
and
stc
lea
xor
repnz
inc
shr
sbb
pop
mov
sub
mov
dec
inc
mov
sar
gs
pop
xchg
sub
add
(bad)
fidiv
cmps
out
mov
popa
jae
enter
jecxz
jb
inc
sub
jnp
xchg
imul
add
in
(bad)
push
sub
cmps
(bad)
outs
push
icebp
inc
pusha
jmp
mov
retf
call
cli
dec
les
inc
stc
sub
xchg
xor
cmp
stos
inc
mov
arpl
aaa
push
push
jle
mov
mov
inc
out
mov
xchg
mov
mov
dec
jg
adc
add
or
cmc
lods
cdq
scas
xchg
add
jne
mov
retf
xchg
mov
(bad)
mov
psrlw
mov
push
std
sbb
mov
leave
fscale
sbb
retf
nop
inc
adc
adc
pushf
scas
scas
fs
pop
aad
xor
push
shl
xor
jbe
ins
add
fst
popf
(bad)
and
iret
push
retf
(bad)
cmp
mov
in
hlt
push
(bad)
loope
test
jne
sbb
xchg
fiadd
(bad)
dec
add
pop
stos
hlt
mov
push
leave
pop
in
adc
pushf
out
push
movs
pop
sub
xchg
jmp
es
popa
add
cli
cmp
stos
pop
dec
fwait
pop
test
mov
dec
push
(bad)
push
lods
dec
mov
dec
adc
or
mov
mov
sahf
shr
xchg
adc
inc
xchg
test
aaa
iret
stos
jmp
push
call
inc
cli
ficom
sub
inc
stos
aaa
mov
dec
xchg
aam
lea
mov
or
das
aas
push
ins
cmps
mov
(bad)
test
and
imul
sbb
add
mov
mov
sub
push
(bad)
mov
nop
sahf
add
call
sbb
add
adc
pop
pop
ja
outs
jb
dec
mov
mov
fdiv
add
mov
pop
movs
sbb
not
push
mov
pop
out
pop
outs
and
(bad)
popa
jne
mov
repz
inc
fild
mov
xchg
mov
mov
xchg
xor
(bad)
pusha
(bad)
push
xor
jo
(bad)
movs
ror
stos
cmp
mov
inc
gs
mul
jo
mov
(bad)
fwait
mov
push
jge
mov
in
jecxz
sub
sti
mov
sbb
lds
xor
mov
out
cmp
jge
syscall
rcr
ror
popf
jae
clc
mov
sbb
jbe
or
xlat
sub
xchg
pop
daa
sbb
mov
jns
pusha
adc
test
test
clc
loope
cmps
push
(bad)
mov
add
ss
fisttp
call
inc
sbb
out
mov
jmp
add
cmp
daa
sbb
call
(bad)
ret
sti
jne
adc
add
sub
sub
cs
adc
(bad)
lock
xchg
xchg
pop
sar
dec
dec
xlat
xchg
es
jne
retf
mov
inc
cmc
sub
dec
or
idiv
inc
xchg
inc
sbb
xchg
cmps
inc
pop
ror
jl
adc
sbb
push
pop
mov
or
mov
xchg
add
(bad)
(bad)
mov
jnp
sub
dec
cli
ret
ins
stc
sub
dec
in
jl
or
call
mov
xchg
xlat
aaa
movs
jge
hlt
xor
jmp
in
jno
and
call
(bad)
fld
xor
sub
lods
daa
jg
in
fs
ja
and
ret
(bad)
mov
mov
jle
and
ret
enter
sbb
arpl
inc
movs
push
xor
out
ins
repnz
(bad)
mov
fs
imul
adc
sbb
adc
pop
mov
shl
leave
cmp
repz
ins
clc
push
loope
cmp
push
cmps
sbb
jle
mov
inc
inc
iret
aad
inc
les
or
dec
ins
pusha
push
mov
sub
dec
sub
fsubr
mov
ds
push
push
fisttp
and
ins
(bad)
je
inc
push
inc
(bad)
xor
pop
dec
adc
jb
dec
cmp
dec
xor
mov
cmp
jno
aad
jns
mov
not
add
push
mov
jnp
sub
and
add
aas
les
repnz
cwde
sbb
jno
dec
(bad)
mov
add
pandn
jbe
pop
js
shr
loope
push
jecxz
add
(bad)
dec
arpl
js
(bad)
cld
inc
je
push
and
call
jb
mov
bound
test
jecxz
cdq
and
(bad)
cmp
jae
add
push
cwde
cld
mov
ret
aam
test
and
test
xchg
test
ss
leave
call
imul
pushf
push
inc
stos
nop
and
push
xchg
das
inc
jecxz
or
lds
mov
mov
add
xchg
inc
and
stos
lods
add
adc
aad
cmp
out
sub
pop
leave
xchg
aad
repz
sub
jge
adc
sbb
pop
(bad)
fcmovbe
adc
sbb
call
mov
std
pop
push
cmp
pop
push
rol
fcom
cwde
push
push
mov
ret
int
jbe
ret
shr
hlt
pop
aaa
push
adc
dec
adc
push
out
mov
mov
mov
loope
repnz
les
add
push
into
cs
add
idiv
gs
sbb
push
xor
popa
lock
pusha
xchg
int
push
stos
xor
jo
xchg
adc
mov
xchg
or
sub
add
shl
mov
and
or
test
mov
pop
in
inc
push
pop
dec
out
xor
in
lock
adc
sbb
inc
or
and
dec
std
dec
cmp
sub
cmc
and
mov
or
loop
or
or
xchg
fld
rcl
add
mov
inc
test
pop
ret
mov
repnz
sbb
test
xchg
dec
xor
mov
inc
xor
adc
ss
aas
cli
push
inc
xchg
xchg
pop
inc
aaa
and
sahf
mov
pop
push
fidivr
add
gs
es
dec
inc
pop
dec
xor
in
fisub
outs
cwde
and
out
and
dec
sahf
mov
and
mov
jmp
imul
out
cmps
add
inc
or
(bad)
cmp
mov
inc
inc
fnsave
jl
popf
daa
fmulp
mov
or
call
outs
mov
xchg
inc
out
enter
lea
leave
stos
loop
cmp
mov
mov
dec
mov
es
pop
cdq
pop
imul
mov
popf
inc
jbe
js
or
or
out
and
call
loop
cli
std
sbb
jbe
jmp
adc
dec
or
dec
xor
das
scas
bextr
xchg
xor
pop
pop
xchg
test
sahf
daa
add
or
clc
(bad)
lods
xchg
nop
out
(bad)
outs
cmp
adc
movs
push
sti
push
test
sbb
call
mov
push
into
cmp
call
push
mov
test
jmp
ret
aaa
test
loopne
sahf
aam
mov
fldcw
xchg
out
jmp
mov
jmp
mov
sbb
sti
sbb
cmps
jmp
retf
out
adc
xlat
test
xchg
add
xchg
shl
pop
je
ins
pop
pop
bound
add
pop
add
xchg
mov
es
or
add
cmc
outs
add
cmp
sbb
sar
add
loope
push
xchg
rcr
popa
xor
test
jp
pop
sbb
push
dec
call
(bad)
in
fs
fisubr
fwait
add
jl
jecxz
bound
loop
or
jns
mov
movs
movs
adc
sub
adc
jno
mov
mov
test
loopne
call
add
ins
sahf
cmp
pop
pop
cmc
les
cmps
mul
stc
aaa
jnp
inc
jne
sub
pop
mov
mov
shl
fimul
and
in
xor
sbb
or
in
push
in
sbb
pop
push
icebp
jp
cmp
push
add
push
inc
into
mov
inc
pop
fld
xlat
int3
mov
movs
ins
in
fisttp
add
mov
mov
jge
inc
sar
cmp
xor
cmp
cmp
(bad)
lea
push
pop
and
loop
mov
fwait
adc
and
and
inc
cdq
push
pop
inc
xchg
add
adc
sbb
cs
add
mov
sub
mov
inc
ficomp
ret
ret
mov
loopne
hlt
mov
lahf
cld
inc
mov
mov
loopne
jno
icebp
sub
sub
and
push
shl
test
stos
mov
(bad)
xor
nop
sub
test
dec
aas
sbb
xchg
fstp
xor
push
mov
shl
adc
jae
inc
mov
es
jns
sub
fs
and
ja
mov
push
jnp
sahf
inc
jg
or
xchg
jno
and
out
xchg
cdq
shl
xor
lea
or
(bad)
xor
out
ins
aas
les
mov
sub
xchg
jl
int
ins
loope
shr
push
je
pop
(bad)
xor
adc
sbb
mov
ss
cdq
pop
add
movs
inc
fs
or
push
inc
lods
(bad)
jge
lahf
inc
adc
mov
data16
add
bound
fdiv
fnsave
jo
mov
ins
ss
mov
and
mov
jae
in
retf
or
inc
mov
or
retf
mov
xor
adc
test
pop
test
ds
or
mov
inc
mov
sbb
daa
fsubp
pop
aam
cmp
xor
fsub
stos
fst
ror
push
mov
sub
inc
dec
inc
test
pop
mov
ret
repz
xchg
outs
mov
inc
cmps
stos
in
and
pop
sahf
fcom
dec
dec
stos
xor
test
xchg
sub
mov
into
mov
fsub
add
imul
mov
inc
pop
sbb
pushf
shl
cwde
push
xlat
add
in
lock
(bad)
dec
dec
mov
push
jecxz
hlt
dec
scas
dec
mov
xchg
pushf
sub
adc
je
jmp
push
cmps
push
shr
out
and
mov
push
sbb
sahf
pop
(bad)
rcr
pusha
push
xor
int
xchg
cmp
stc
sbb
test
sbb
inc
and
out
inc
xor
xor
outs
int3
sub
jg
dec
adc
mov
in
adc
inc
pop
mov
dec
jns
cmp
dec
xchg
(bad)
xor
cmp
mov
leave
pop
shr
(bad)
mov
sub
mov
ret
out
int3
rol
lea
std
and
hlt
inc
xchg
inc
xchg
add
out
(bad)
mov
(bad)
out
jmp
jnp
int3
jecxz
ins
ins
jns
sub
mov
pop
ret
adc
mov
outs
imul
outs
lock
inc
imul
mov
push
adc
and
push
cmps
pop
call
lahf
rcr
push
lods
mov
mov
test
(bad)
jg
scas
dec
mov
bound
jbe
fist
call
xchg
and
jg
dec
dec
mov
cwde
jl
jns
jbe
add
jle
dec
(bad)
cdq
in
jg
int
sub
out
mov
gs
jmp
mov
jle
and
xor
cmp
add
pop
add
gs
fsub
mov
pushf
xchg
popa
cmp
fucom
lods
neg
jns
pushf
fdiv
jmp
je
in
ja
retf
and
mov
pop
cmovle
mov
mov
inc
cmp
aad
enter
test
sbb
pop
fst
inc
jae
xchg
pushf
icebp
or
mov
push
std
or
xor
(bad)
pop
cmp
adc
in
enter
push
in
out
(bad)
data16
repnz
pop
sbb
add
adc
daa
adc
popf
dec
or
das
xchg
dec
repnz
test
jnp
dec
nop
jmp
popf
dec
push
fwait
in
mov
push
test
jp
jmp
cmc
xchg
sub
dec
add
adc
pop
pop
sti
push
out
mov
stos
ss
fnstenv
sub
in
pop
jno
sub
loope
mov
jne
out
fdivr
xchg
aas
xor
or
ins
add
jge
jecxz
rol
pop
das
add
jmp
ret
or
les
mov
out
and
lds
(bad)
adc
repnz
sub
pop
fldlg2
mov
xor
inc
jns
mov
les
mov
pop
fucompp
add
add
xchg
mov
ret
not
fisubr
adc
adc
out
std
out
dec
xor
jl
sbb
xchg
inc
out
ficomp
mov
add
push
cmps
daa
(bad)
not
test
rol
sub
icebp
jg
xchg
mov
sub
mov
outs
jle
das
(bad)
jmp
pusha
lock
adc
popa
movs
inc
jb
dec
dec
into
loopne
in
pop
int3
fsubr
out
mov
mov
cdq
jb
lahf
movs
pushf
cmp
jecxz
inc
inc
jge
sub
mov
int
xchg
adc
shl
es
cdq
and
out
dec
xlat
and
cmc
adc
outs
mov
movs
xchg
mov
mov
test
retf
imul
dec
sub
sub
fidivr
nop
adc
scas
push
push
(bad)
ss
pop
xchg
and
adc
jmp
add
fwait
nop
add
push
ffreep
daa
and
into
mov
fcmovnbe
pop
mov
adc
xchg
mov
xor
xchg
sbb
retf
pop
sbb
add
add
cmc
add
adc
fs
dec
mov
inc
icebp
mov
mov
jle
in
sub
cli
lods
mov
jae
jle
sub
shr
movs
cld
push
xchg
mov
mov
jae
push
sbb
cmc
mov
loopne
xchg
loop
test
sbb
loope
dec
icebp
mov
scas
pop
adc
mov
aad
or
mov
and
aam
mov
jp
cmps
lods
stos
lea
xchg
mov
aaa
stos
push
and
addr16
int
stc
sub
or
sub
dec
fcom
add
enter
xor
inc
(bad)
aad
push
jnp
ds
inc
cmps
add
fldenv
mov
pop
mov
or
cmp
(bad)
aas
mov
ret
jl
cmp
inc
imul
adc
mov
or
sti
mov
mov
sub
bound
loop
imul
cmps
pop
jnp
or
jp
popf
adc
iret
cwde
repnz
pop
push
(bad)
mov
jb
jmp
fsub
loopne
stos
mov
ins
mov
popa
arpl
xor
pusha
cmp
jmp
call
pusha
inc
and
mov
mov
rol
push
xchg
xor
popa
iret
mov
mov
(bad)
xchg
mov
and
shl
scas
ror
iret
mov
into
mov
mov
xor
xchg
dec
jecxz
inc
pop
xchg
mov
adc
sbb
stos
pop
out
sti
mov
and
mov
sub
mov
or
xor
aas
mov
jnp
push
jae
adc
pop
and
push
out
push
fsubrp
loope
daa
xor
and
cmp
and
test
xchg
shr
leave
das
dec
add
or
out
aam
mov
and
push
lahf
sti
dec
cmps
mov
aam
rol
mov
inc
ret
push
pop
jae
je
aaa
sub
test
inc
cli
out
mov
test
add
mov
dec
inc
xchg
mov
stc
mov
mov
int
cmp
stos
leave
and
mov
pop
adc
xor
fdiv
mov
sub
inc
inc
inc
lahf
jo
adc
fs
arpl
push
popa
fdiv
js
push
or
fild
ja
fcomp
mov
arpl
jo
les
mov
xchg
cmp
jne
lods
dec
mov
ja
out
xchg
mov
sbb
or
out
adc
xor
pusha
xchg
xchg
jl
out
pop
fcomp
sbb
rol
jbe
xor
arpl
inc
pusha
push
or
pop
adc
dec
cmc
lahf
loopne
xor
dec
ret
aas
mov
sahf
pusha
xchg
mov
cmp
cwde
cmp
inc
pop
call
dec
ret
add
jnp
mov
inc
xor
inc
mov
pop
mov
cwde
sar
push
leave
addr16
in
mov
sti
or
rcr
adc
cdq
xchg
jno
sbb
std
sbb
sbb
inc
cmps
stos
mov
pop
xor
in
mov
xchg
aam
popa
inc
pop
sahf
pop
mov
cmp
adc
jbe
repnz
add
mov
add
outs
push
retf
js
mov
add
rol
cmps
lds
add
shl
out
pusha
pop
jl
sub
push
outs
loopne
mov
cmp
mov
rcl
int3
mov
mov
cmp
shl
fistp
adc
and
push
xchg
movs
enter
add
or
or
inc
jg
in
call
loop
ins
das
addr16
scas
push
jl
fld
shl
inc
std
cmp
or
arpl
mov
test
and
cmp
adc
mov
aad
ds
mov
or
and
iret
push
xchg
pcmpgtw
pop
adc
outs
fwait
(bad)
mov
mov
cmc
jb
cwde
jle
in
adc
ins
dec
(bad)
fstp
loopne
mov
scas
lods
xchg
loope
(bad)
inc
sbb
and
add
sub
xor
div
xchg
sbb
jne
xlat
ret
ins
test
(bad)
xlat
jmp
mov
mov
sub
add
add
dec
push
jge
or
lahf
jb
out
pop
in
mov
push
add
jns
jecxz
mov
add
retf
mov
xor
fst
mov
pop
jo
jmp
ret
jns
stos
call
movs
icebp
mov
addr16
jns
(bad)
pushf
lds
or
push
add
mov
fdivp
retf
xchg
mov
outs
je
cli
ret
jne
or
push
cmps
js
jnp
sbb
and
retf
jmp
xchg
cmp
add
fmul
in
mov
lahf
in
stos
sub
mov
mov
and
call
mov
in
dec
or
stos
inc
cli
int
jnp
movs
jae
jno
rol
push
adc
mov
mov
arpl
loopne
mov
outs
in
mov
imul
mov
cs
mov
cmps
add
movs
mov
inc
xchg
jp
and
jle
(bad)
push
mov
aas
aaa
ss
inc
popf
push
adc
sar
push
cmc
js
enter
sbb
pop
(bad)
xchg
cmp
or
fidiv
(bad)
jmp
mov
test
xor
retf
test
retf
add
clc
in
mov
imul
out
lahf
and
dec
push
or
popa
test
pop
test
mov
add
and
or
pop
xchg
or
cmp
pop
pop
(bad)
aaa
loope
movs
mov
cmc
add
hlt
daa
das
dec
xchg
xor
sub
mov
pop
jmp
lea
mov
pop
or
cmp
push
pop
fstp
retf
cmp
iret
out
xchg
lock
adc
xor
(bad)
jnp
fist
std
nop
out
icebp
mov
or
int
mov
or
es
jg
aam
hlt
in
imul
into
mov
repz
dec
aam
stos
js
cmp
into
push
mov
aad
shl
es
gs
push
pop
out
jp
dec
mov
dec
jl
add
add
ror
pop
cs
pop
or
hlt
pusha
mov
xor
clc
sbb
sbb
adc
fwait
ret
sub
shld
add
movs
mov
push
cwde
fwait
add
fnstsw
inc
scas
xchg
pop
cmps
and
ins
shl
mov
fcmovne
inc
mov
pusha
shl
call
push
hlt
jle
mov
(bad)
inc
xor
mov
hlt
adc
jae
mov
mov
outs
lahf
imul
bound
pop
cmps
repz
(bad)
push
fisub
mov
mov
inc
mov
mov
mov
cmp
inc
mov
mov
mov
nop
cs
ds
xchg
ss
or
call
pop
dec
sti
rcl
mov
mov
(bad)
xlat
pop
add
pop
mov
push
push
and
clc
ficom
pop
sbb
js
or
addr16
xchg
sub
stos
mov
add
cmps
pushf
adc
jb
jae
mov
popw
enter
jnp
cpuid
mov
mov
inc
call
jecxz
dec
adc
push
gs
mov
out
mov
test
ret
add
std
pop
test
mov
sti
pop
scas
adc
(bad)
(bad)
mov
xchg
mov
std
mov
cmc
cmp
adc
mov
bound
sbb
mov
pop
add
in
std
dec
jge
inc
adc
mov
scas
add
fisub
pusha
iret
cmp
adc
cmp
push
movs
cmp
sar
mov
fwait
jmp
pop
cmps
xor
inc
mov
mov
inc
mov
cmp
test
inc
pushf
push
lock
sub
jns
sbb
rcl
mov
mov
jne
sbb
aaa
mov
call
lea
push
inc
ins
sahf
cmp
shl
cmc
js
(bad)
xlat
inc
sbb
push
movs
mov
inc
in
sar
clc
sbb
add
les
(bad)
(bad)
mov
pop
fistp
(bad)
aam
out
test
ret
fldcw
neg
dec
xor
cli
xor
ins
repz
sbb
cld
mov
push
stc
mov
nop
cdq
movs
inc
xor
loope
pop
mov
and
in
add
cmp
cmps
pop
popa
mov
mov
mov
add
or
inc
sbb
pushf
rol
mov
adc
addr16
add
int3
xchg
adc
ins
and
std
test
scas
aad
inc
xchg
pop
fnsave
dec
add
ss
cmp
jg
jge
xchg
(bad)
mov
jns
out
inc
adc
mov
or
xchg
cmp
mov
add
test
das
mov
xchg
sub
sbb
push
add
sbb
cmps
jo
cmp
xor
mov
cmps
push
cmp
add
cmps
ret
jp
stos
fwait
outs
add
push
jno
imul
(bad)
das
into
sbb
mov
sbb
test
fwait
not
ret
fnstenv
or
loop
repz
cmp
jecxz
imul
sbb
push
loope
fst
jl
push
stc
gs
jg
enter
cmps
mov
cs
cmp
shl
xchg
fwait
retf
push
sub
xor
add
sahf
sub
dec
or
loope
jnp
adc
push
add
(bad)
pop
xchg
gs
xor
sbb
out
xchg
fxch
arpl
cmp
mov
mov
push
ss
add
mov
lock
shr
mov
test
cmp
jno
sbb
lahf
and
clc
adc
ins
stos
push
retf
call
scas
scas
movs
sahf
xchg
mov
or
fwait
hlt
mov
test
push
ficom
int3
and
mov
or
inc
movs
push
push
pop
into
lds
sbb
cmp
ja
mov
mov
mov
xor
sub
xor
and
mov
xchg
sar
cmp
dec
ins
sub
outs
or
ins
fld
cli
or
and
cwde
xchg
xchg
retf
ror
in
mov
or
test
xchg
rol
mov
and
cld
mov
sar
jns
repz
out
daa
test
inc
aad
sahf
test
dec
pop
inc
inc
(bad)
out
pop
in
pop
and
(bad)
jns
scas
mov
adc
jle
(bad)
jmp
dec
xchg
and
retf
adc
sbb
mov
sub
adc
leave
sbb
mov
jbe
aam
rol
outs
jecxz
pop
mov
sbb
jbe
retf
pop
add
outs
sbb
sti
pop
outs
fwait
cwde
xor
aad
and
stos
and
jno
pop
xchg
add
jno
adc
add
std
pop
mov
data16
or
adc
sub
lods
push
lahf
lods
lahf
cwde
pushf
sbb
adc
cld
mov
or
hlt
mov
lea
cmp
movs
int
rol
cs
adc
fnstsw
dec
(bad)
das
cld
cmp
aas
les
pop
adc
loopne
xor
push
xchg
cmp
mov
add
repz
mov
mov
pop
fcomp
and
sbb
aad
adc
fmul
test
inc
dec
jecxz
cmp
daa
int
into
jmp
fwait
lods
(bad)
into
add
sti
push
shl
sar
out
jl
jge
mov
rcl
mov
dec
aas
lea
cwde
lds
aad
xor
loopne
mov
push
stc
rcr
or
lods
pop
jp
stos
cmps
jmp
into
add
or
sub
ja
in
nop
inc
jmp
mov
es
push
or
jg
leave
outs
ja
imul
jbe
cmp
adc
loop
xor
cmp
cmp
dec
fnstenv
inc
nop
je
retf
icebp
or
fdivr
add
mov
out
daa
push
cwde
fwait
(bad)
psubsw
cmp
mov
mov
xchg
leave
sub
jae
xchg
and
iret
adc
sti
mov
retf
ins
add
retf
add
pop
lods
push
mov
fmul
call
jnp
retf
test
std
fisttp
sbb
fidiv
mov
cli
and
retf
outs
dec
fiadd
popa
dec
dec
jbe
cmp
test
xor
xor
das
fdivr
les
add
xchg
es
popa
adc
jb
ins
scas
mov
pop
int
imul
das
(bad)
(bad)
adc
push
mov
xor
dec
inc
dec
shr
retf
fcomp
popf
ins
xchg
pop
sbb
hlt
inc
inc
sub
rol
fs
daa
push
fcmovb
pop
scas
mov
aam
or
imul
test
sbb
jmp
movs
add
sbb
arpl
xchg
mov
jb
addr16
jbe
imul
dec
sub
adc
dec
and
leave
shl
xchg
pop
js
mov
bound
push
ret
pop
shl
pop
es
add
xor
addr16
popf
sub
mov
mov
xor
jne
sar
push
gs
in
int3
pushf
or
out
dec
add
(bad)
nop
jb
adc
pusha
xor
jmp
ffree
(bad)
add
test
das
aam
pushf
mov
sbb
or
inc
cli
loopne
sub
ss
aad
test
fadd
aas
mov
iret
fwait
dec
shl
mov
(bad)
mov
in
adc
jo
(bad)
scas
iret
mov
xchg
mov
sub
sbb
mov
cmp
mov
test
sub
movs
(bad)
fcmovbe
push
popa
xchg
mov
(bad)
adc
outs
xor
push
xchg
ror
xor
idiv
mov
add
popf
mov
mov
ret
mov
mov
out
add
stos
push
push
movs
xor
jle
or
mov
mov
call
mov
in
jmp
neg
mov
adc
add
inc
jle
aas
scas
stc
loopne
mov
mov
call
add
(bad)
pop
fs
or
(bad)
clc
xchg
fld1
lock
xchg
dec
jmp
add
sub
div
jp
stos
jae
les
and
call
inc
lock
mov
sub
(bad)
pop
pop
outs
ror
push
or
and
scas
ss
mov
repz
jne
mov
ins
and
xchg
adc
lea
es
test
adc
jg
dec
int
inc
jae
adc
ins
xlat
xchg
dec
into
mov
(bad)
call
les
fwait
xchg
mov
fmulp
cwde
imul
jne
adc
dec
push
mov
aaa
imul
add
leave
(bad)
mov
loopne
js
xor
lds
add
arpl
rcr
push
lock
cmp
pop
mov
in
jae
dec
dec
mov
jmp
add
inc
lds
(bad)
mov
push
ss
and
push
jecxz
sub
stos
adc
cmp
ja
push
sbb
imul
pop
adc
(bad)
js
test
mov
ds
push
scas
cmp
js
mov
inc
ja
loop
clc
arpl
imul
or
push
loope
or
mov
mov
push
bound
fwait
mov
cmp
(bad)
jo
or
jle
add
aas
and
imul
xchg
xchg
mov
jb
ss
mov
inc
and
popf
mov
out
jae
and
cmps
sbb
cs
in
and
inc
push
loope
xchg
out
lods
cdq
inc
test
jne
adc
sahf
cmps
movs
mov
lock
outs
repz
pusha
mov
jne
sub
jecxz
push
je
jno
retf
(bad)
and
cmc
mov
aad
push
(bad)
xlat
out
and
out
test
or
cld
push
inc
retf
mov
fwait
mov
iret
lods
xchg
leave
push
fld
repnz
outs
pusha
and
pop
aad
or
pop
ins
and
mov
sbb
and
xchg
pushf
popf
inc
sub
mov
std
cmp
ja
adc
xchg
imul
jno
mov
pop
mov
mov
les
push
fst
imul
icebp
sbb
shl
or
cmc
bound
mov
and
(bad)
imul
cmc
sti
xchg
shl
stc
mov
sbb
outs
test
aad
popa
pop
sbb
xchg
cmp
mov
fst
mov
movs
(bad)
ss
sub
jmp
mov
adc
pop
and
jmp
(bad)
or
icebp
sbb
mov
mov
xchg
xor
pop
(bad)
int
xchg
sub
(bad)
cli
pusha
inc
sub
outs
loop
cld
inc
and
fldenv
test
xchg
pop
cmps
cld
and
jb
pop
xchg
scas
imul
add
push
adc
or
mov
(bad)
xor
push
in
xchg
or
pop
pop
bound
mov
data16
push
xchg
lods
pushf
or
es
xchg
xchg
jmp
data16
cmp
cmp
xchg
sub
xor
xor
es
repnz
sbb
aam
and
loopne
mov
push
scas
pop
scas
lods
inc
dec
or
lods
mov
popf
mov
sbb
lock
pop
stos
fstp
and
fdiv
mov
clc
pop
mov
or
and
rol
mov
sbb
cmps
adc
imul
jg
lods
mov
and
pop
xchg
mov
adc
das
cli
out
sbb
test
pusha
mov
inc
mov
lock
es
cld
retf
mov
leave
mov
xchg
fcomp
loop
stos
xchg
xor
shl
imul
dec
mov
retf
ret
sbb
xor
or
adc
sub
pushf
jae
add
jg
xchg
and
fadd
into
jb
cli
mov
push
mov
pop
js
and
xor
or
inc
into
out
push
mov
add
iret
xor
dec
jmp
sbb
sbb
or
bound
pusha
inc
pop
sub
push
and
cmp
imul
push
sar
mov
ret
les
or
xchg
fnstenv
movs
xor
stos
(bad)
jnp
push
mov
adc
mov
jae
add
icebp
adc
(bad)
mov
ror
sub
lea
xlat
xchg
fistp
dec
or
mov
pop
fwait
jl
pop
and
icebp
xlat
jmp
jnp
xchg
jno
das
xor
shl
(bad)
jle
push
lock
dec
aas
dec
imul
push
jge
cdq
dec
pushf
hlt
sub
mov
xchg
pushf
bound
xchg
push
mov
ficom
aam
xor
xor
popa
push
cmp
xchg
cld
mov
push
enter
bound
repnz
scas
test
cmp
push
adc
rcr
adc
jle
xchg
pop
add
jmp
(bad)
dec
xlat
ins
xor
add
and
mov
add
popa
xchg
pop
sar
ffreep
test
mov
bndstx
les
call
pop
add
dec
lods
add
ins
add
jl
add
loope
jmp
jg
pushf
aaa
and
cmps
mov
pop
adc
push
test
icebp
cmp
push
adc
mov
es
call
xor
leave
neg
imul
and
fidivr
mov
xchg
lahf
inc
fmul
and
mov
test
icebp
repz
jp
dec
inc
shl
ja
sbb
or
test
pushf
test
sub
(bad)
or
ss
cwde
pop
jg
push
push
mov
hlt
and
test
adc
dec
jbe
cmp
mov
pop
push
cmps
dec
stos
adc
aaa
xchg
into
sbb
push
jae
test
add
scas
push
pop
add
int
cdq
test
push
sbb
mov
scas
ja
push
mov
push
fwait
jp
retf
das
jns
jle
(bad)
xchg
(bad)
stos
sub
mov
es
push
bound
(bad)
iret
test
push
das
sbb
call
and
and
push
pop
scas
push
es
pop
lds
dec
jg
es
out
xchg
ficomp
dec
daa
imul
imul
jb
std
loop
jno
test
adc
movs
sbb
mov
aam
dec
inc
vpmullq
jno
xchg
nop
and
pop
sbb
cpuid
das
pop
mov
retf
push
clc
sub
mov
aad
push
ret
inc
pushf
cdq
and
xchg
not
out
out
mov
int
mov
outs
push
or
inc
fist
cmps
or
(bad)
in
adc
adc
mov
adc
sub
stc
sbb
fld
mov
cmp
sbb
jne
(bad)
fisttp
jg
cld
iret
push
mov
fidiv
mov
or
daa
fisubr
xor
ror
cmp
das
xchg
fcmovu
nop
fstp
add
and
in
ds
jo
bswap
pop
xchg
push
cld
fs
repz
aam
jnp
dec
jno
sbb
jecxz
in
js
pop
mov
aaa
adc
mov
xchg
mov
push
in
and
jb
jnp
mov
mov
inc
mov
outs
loope
push
sbb
mov
xchg
push
stc
enter
cmp
sub
call
stos
inc
add
add
popa
or
rol
clc
and
jbe
jecxz
inc
and
pop
popf
je
rcr
or
test
fs
movs
ins
and
sub
pop
aas
mov
mov
in
add
pop
fisttp
xchg
cmc
xor
add
add
mov
xor
cdq
xchg
movs
pop
inc
sbb
fwait
mov
adc
bound
pop
xchg
pop
mov
add
push
sbb
dec
int3
stos
(bad)
xchg
pop
movs
lods
jnp
sbb
inc
repz
outs
das
pushf
dec
push
fwait
or
and
call
nop
stc
jl
mov
mov
test
sub
sbb
aaa
lahf
or
cld
xor
and
lock
ja
shr
nop
repnz
add
xchg
loop
clc
inc
jnp
add
into
jo
ds
imul
(bad)
sbb
cld
xchg
mov
cli
loopne
pushf
inc
dec
xor
jmp
outs
cs
jbe
lock
adc
icebp
add
rcl
or
(bad)
adc
rcr
and
xor
or
push
xchg
dec
cmp
mov
fidivr
mov
add
pop
and
gs
lahf
cmp
push
jae
adc
cmp
pop
cdq
jne
pushf
fdivr
cmp
push
inc
retf
aad
mov
sbb
mov
sub
push
retf
jg
adc
mov
xchg
fisubr
stos
fs
adc
sbb
push
adc
rcl
jns
sbb
push
repnz
push
pop
xchg
or
sub
or
in
je
and
jo
sub
loopne
stos
js
jp
mov
lahf
mov
leave
outs
ss
call
sar
and
mov
xor
ret
call
hlt
push
jnp
pop
mov
push
sbb
fstp
test
icebp
call
data16
inc
(bad)
dec
vphaddbd
xor
fiadd
pop
ret
or
daa
fdiv
mov
xlat
cmp
pop
add
add
lds
jnp
xor
and
fiadd
mov
rcr
add
mov
into
fnstsw
or
sub
mov
sbb
pop
xchg
dec
test
jne
and
xchg
xchg
sahf
call
rol
or
ret
popf
inc
int
outs
popf
movs
push
and
pop
lods
jp
inc
inc
mov
xor
mov
pop
mov
push
dec
push
push
jecxz
jecxz
gs
inc
ficom
in
xchg
into
push
push
push
in
hlt
sub
push
lds
(bad)
loopne
pop
add
inc
pop
pop
outs
pop
js
sbb
ins
pop
mov
sahf
in
adc
mov
fs
xchg
jge
scas
ds
xchg
fsub
add
mov
push
test
adc
(bad)
jge
jb
add
fnstenv
inc
aaa
mov
sub
inc
push
cdq
(bad)
repz
div
mov
pop
jp
in
in
pop
retf
(bad)
popa
icebp
jle
xor
aas
mov
ret
ror
mov
inc
mov
(bad)
pop
inc
inc
xor
jecxz
test
inc
or
or
pop
outs
imul
adc
mov
jne
stc
inc
outs
fnstcw
sub
mov
cmp
jbe
jmp
jg
(bad)
jmp
mov
in
dec
and
sti
push
jmp
repnz
jns
sub
leave
shl
mov
lock
and
rcl
rcr
push
test
in
adc
inc
inc
sbb
jne
add
aam
pop
int3
in
loope
mov
lock
sbb
test
scas
jge
fs
mov
mov
push
xor
adc
and
adc
fs
mov
adc
data16
pop
add
lahf
in
sbb
or
mov
aam
or
adc
out
or
pop
pusha
cmp
and
or
fild
scas
mov
add
cdq
hlt
push
mov
imul
in
inc
mov
sub
jmp
btr
lahf
pushf
push
and
imul
retf
rcr
mov
adc
sub
fistp
retf
enter
jb
fisubr
fadd
mov
in
mov
push
ins
mov
out
std
and
pop
jb
jmp
pop
cdq
xor
jnp
retf
fild
add
pop
aaa
out
or
mov
cld
dec
call
loop
bound
dec
test
(bad)
cld
addr16
dec
xor
repnz
sbb
ficom
sub
xor
and
xchg
push
add
div
adc
inc
xchg
inc
int
inc
sti
mov
xchg
jnp
test
retf
into
sbb
adc
adc
push
mov
pop
scas
or
lods
mov
jno
pop
retf
xor
xor
push
repz
xchg
rcl
sub
xor
cdq
push
fidiv
and
add
iret
fmul
fisubr
jae
xor
and
sub
or
imul
mov
jno
mov
lods
pop
lods
div
adc
mov
add
push
mov
mov
dec
movs
sub
outs
lods
dec
fucomp
imul
and
xchg
in
cmps
and
dec
dec
cs
lods
scas
fsubp
jae
clc
fidivr
xchg
and
and
dec
adc
test
cmp
lahf
lea
cmp
pushf
and
push
cmp
jbe
mov
mov
sti
div
aam
dec
bound
ficom
lods
stos
sub
aaa
and
inc
pop
cmps
sub
arpl
lahf
inc
sbb
sbb
mov
ds
xchg
ret
lea
adc
sub
outs
aad
lahf
js
push
xchg
daa
repz
popa
movs
cmc
cmp
call
push
sub
movs
inc
pushf
xchg
out
repnz
scas
jbe
and
xchg
fs
lock
add
jmp
mov
inc
or
ins
mov
ret
cdq
push
mov
fwait
adc
mov
ret
inc
sub
mov
jl
retf
xor
les
mov
mov
xchg
std
(bad)
mov
push
sub
cmps
mov
enter
jae
push
cli
mov
lods
sbb
xchg
and
ret
and
outs
call
aam
lahf
or
jns
clc
stos
push
js
dec
and
jne
(bad)
adc
call
aad
inc
bound
cmp
push
dec
xor
adc
pop
sub
arpl
aad
fbld
mov
push
sbb
cmp
adc
or
xchg
adc
dec
ret
sar
mov
mov
xor
gs
js
mov
cmps
daa
xchg
and
cmp
xor
idiv
fld
pop
cli
test
adc
cmp
jmp
jg
fiadd
repnz
js
loop
fxch
adc
imul
adc
lahf
pop
lahf
mov
fild
mov
lds
ja
inc
or
sahf
xor
mov
pop
scas
inc
pop
xor
pushf
pop
leave
jecxz
outs
sbb
xor
not
jle
jl
push
and
push
outs
hlt
stc
xchg
std
daa
xchg
ins
sbb
ins
rol
adc
sbb
hlt
js
jb
xor
stos
cld
xchg
outs
cmp
jb
xchg
inc
and
and
jmp
and
std
sub
mov
or
push
ds
ret
adc
das
aam
jmp
addr16
cdq
pop
cmp
mov
xor
lods
cmc
shl
(bad)
pop
jge
nop
clc
or
aam
add
outs
cmp
lahf
mov
pop
xchg
aam
fld
jns
mov
cdq
mov
jg
inc
mov
test
mov
in
or
es
mov
(bad)
jg
(bad)
cmp
xchg
jbe
popf
sbb
adc
fiadd
pop
sti
daa
loope
retf
lods
hlt
outs
pop
mov
inc
sub
inc
push
ja
lahf
pop
outs
ins
ror
inc
fbld
inc
rcl
loop
outs
bound
stc
mov
pop
aas
mov
enter
cs
cmp
xor
dec
dec
mov
out
xchg
add
xor
aam
jecxz
mov
cmp
imul
pushf
lods
pop
ret
(bad)
mov
adc
imul
test
sbb
popa
mov
fcomp
jno
outs
idiv
mul
pushf
mov
cmp
xchg
xchg
call
das
and
pop
pusha
das
dec
or
dec
dec
or
sub
daa
jmp
shl
xor
fisubr
(bad)
and
jecxz
loop
or
fdiv
jg
mov
add
xchg
or
jg
stos
ror
stos
ret
dec
or
mov
bound
xor
dec
mov
dec
out
jae
ret
jecxz
pop
xor
push
push
mov
jl
gs
xor
or
mov
mov
pushf
aaa
aam
and
shr
leave
jecxz
lea
ins
in
sti
movs
shr
mov
ret
loop
mov
fs
les
push
add
dec
(bad)
or
push
mov
stos
iret
cmps
cmp
cli
inc
nop
xchg
fldenv
mov
push
pusha
jne
jmp
mov
mov
mov
retf
fcmovbe
loope
outs
xor
out
fild
cli
fsubr
jmp
(bad)
jmp
(bad)
imul
dec
xchg
push
pop
sar
mov
add
cmps
cs
inc
sub
outs
repz
cld
pop
retf
jle
test
xor
jmp
into
fs
mov
inc
sbb
sub
jp
(bad)
dec
add
pop
jp
and
fcmovbe
cmps
jb
inc
and
jecxz
outs
push
and
sbb
sub
(bad)
and
push
pop
add
push
xor
movs
fisub
cmp
cmps
fisubr
push
bound
int
cs
sbb
stc
cld
and
mov
out
and
fistp
pop
adc
adc
xchg
push
scas
(bad)
xor
cmp
pop
ds
into
push
aam
adc
ds
inc
xchg
setge
dec
sub
lods
dec
xchg
cli
jns
shr
sahf
cmp
fucomip
xchg
ret
repz
pop
xchg
xor
sub
xor
push
sbb
div
push
jae
or
sub
aam
fidiv
cmp
pand
and
push
iret
push
jmp
pop
out
cmps
clc
stos
cmc
ja
pop
jne
xor
ror
jp
dec
or
sbb
ja
(bad)
push
jge
mov
mov
sub
mov
ins
cmp
jp
cmp
dec
cmp
leave
ins
jl
pop
shl
stc
mov
xlat
outs
rcl
lea
cmp
push
hlt
and
push
aam
add
pop
xchg
int3
ror
inc
bound
fmul
cdq
outs
pop
pusha
adc
adc
lock
(bad)
and
adc
or
jl
ret
jmp
lods
pop
sahf
hlt
mov
cmp
inc
ret
fisub
(bad)
(bad)
adc
enter
mov
push
dec
aas
iret
pop
cld
jle
push
inc
mov
int
cld
aas
shl
test
fadd
out
push
inc
push
and
cs
cmp
ss
pop
dec
aas
xchg
pushf
leave
xor
mov
adc
sar
mov
push
ror
cmp
mov
rcr
movs
fidiv
jp
lds
jecxz
enter
mov
xchg
adc
add
mov
int3
sub
jp
dec
scas
ret
mov
add
jmp
mov
jle
xchg
shl
mov
fcmovb
push
call
push
mov
jmp
enter
(bad)
loop
mov
mov
add
not
cmps
leave
addr16
int
std
psubb
cmps
mov
push
pop
inc
idiv
cs
jp
sahf
push
or
fs
xchg
dec
and
cmps
or
(bad)
add
clc
rol
and
sbb
add
adc
scas
mov
lods
cmp
cmp
jo
xchg
push
fnstsw
(bad)
jo
xchg
push
or
aaa
sbb
sbb
pop
xchg
jp
xchg
cmp
adc
cmp
or
sub
cwde
ror
mov
sbb
call
dec
push
not
imul
sub
add
cwde
mov
push
inc
into
pop
push
and
cli
push
or
iret
xor
clc
jo
(bad)
mov
pop
xchg
pushf
popf
mov
jmp
inc
cmp
out
adc
jge
mov
mov
test
loop
arpl
xchg
aam
std
(bad)
xchg
popf
push
pop
mov
mov
clc
sub
retf
push
aam
ret
push
cwde
xchg
cmp
jmp
cs
push
sti
and
mov
loope
lock
adc
sahf
sbb
outs
xchg
sbb
data16
ss
icebp
imul
sbb
mov
or
es
call
cdq
push
mov
ins
sub
clc
and
xor
add
dec
cli
cmp
mov
xchg
mov
push
or
adc
xor
es
xor
and
push
xor
out
or
into
xor
movs
xchg
add
bound
jge
out
nop
popf
fsubrp
call
pop
shl
aam
shl
xor
pop
jmp
xor
out
adc
xchg
cmps
jnp
cmp
leave
mov
mov
xchg
push
stc
jne
and
lods
inc
jnp
mov
ins
jp
into
enter
xchg
and
int
push
sbb
sbb
scas
jne
push
push
mov
mov
push
rol
mov
push
or
jg
dec
in
retf
int
rcl
push
in
cwde
inc
adc
or
imul
xor
lahf
repz
cmp
test
xor
mov
inc
xchg
lea
dec
movs
xor
dec
retf
and
mov
mov
inc
pop
or
sbb
sahf
movs
call
sti
jne
popa
adc
enter
jg
js
loopne
push
inc
test
mov
xor
imul
dec
inc
daa
je
cwde
xor
pusha
scas
cmps
int3
push
jmp
jnp
int
push
or
jmp
push
pop
(bad)
(bad)
push
out
mov
dec
mov
retf
cmc
add
dec
xor
enter
xchg
mov
inc
cld
fwait
int3
push
and
inc
push
aam
cmp
xchg
arpl
push
stc
pop
out
jb
jb
sbb
stos
fisttp
stos
inc
xchg
sti
cmps
in
adc
xor
jne
(bad)
hlt
(bad)
stc
sbb
arpl
inc
lock
hlt
loope
in
push
cli
popf
xchg
sti
cmps
add
mov
push
retf
sub
jecxz
int
rol
imul
es
xchg
call
xor
ins
das
cmp
mov
mov
lock
sub
add
and
enter
xchg
out
cdq
clc
xchg
xchg
mov
mov
sbb
pop
add
adc
icebp
sbb
outs
push
shl
sbb
pop
adc
and
retf
jle
out
inc
cmp
shr
sbb
aaa
dec
(bad)
mov
mov
loop
outs
ins
mov
sahf
xchg
push
loope
(bad)
xor
dec
pop
inc
retf
mov
xchg
ins
cwde
call
popf
cmp
test
loopne
cmp
push
dec
and
movs
push
rcl
inc
retf
xor
lahf
sub
mov
dec
sub
cwde
nop
adc
stos
mov
xlat
aam
inc
xchg
cmp
mov
pop
or
aam
push
cmp
pushf
(bad)
call
pop
mov
pusha
mov
out
rcr
js
mov
cmp
inc
movs
dec
out
dec
call
add
sbb
mov
inc
lds
jmp
inc
cmc
scas
inc
sbb
inc
call
and
inc
sbb
repz
or
and
mov
shl
ret
or
cmps
repnz
xchg
add
fmul
dec
rcr
ret
cmovnp
and
add
push
(bad)
mov
mov
jne
pop
sub
pop
sub
dec
xchg
xor
jl
popf
dec
xchg
adc
pop
aam
mov
jae
int
mov
push
jno
adc
cmp
xor
jg
popf
cmps
add
std
ret
mov
sbb
aas
push
test
and
add
pushf
mov
iret
fwait
imul
cld
rcr
inc
stos
scas
jns
sub
sub
movs
out
push
add
icebp
xor
pushf
mov
mov
xor
or
and
sub
addr16
call
popf
ins
mov
pop
outs
fnstenv
cmp
dec
push
ds
dec
and
jnp
mov
mov
mov
dec
stc
addr16
outs
sbb
dec
and
or
pop
xor
inc
dec
or
sysret
inc
pusha
mov
cmps
fwait
outs
cmp
and
sub
les
jmp
movs
push
jl
sti
into
pop
mov
push
test
idiv
xlat
jmp
repz
pop
bswap
mov
cmp
jecxz
das
or
icebp
jp
adc
mov
mov
outs
xchg
in
jmp
lahf
jecxz
xlat
fmul
cs
fild
mov
ret
add
xchg
cmps
mov
push
mov
xchg
mov
iret
sbb
(bad)
mov
push
adc
mov
xchg
cmp
mov
sbb
std
jecxz
mov
sub
jo
fadd
cmp
jo
movs
pop
mov
mov
dec
shr
inc
pushf
adc
dec
push
lds
xchg
clc
push
inc
pop
inc
inc
lods
stc
jecxz
push
dec
dec
mov
sub
mov
out
std
mov
sbb
ja
daa
jno
(bad)
in
ficomp
rcr
cmp
loop
pop
adc
shl
cmc
mov
pop
adc
addr16
(bad)
popa
jecxz
xor
sub
adc
mov
mov
sahf
popa
pop
or
mov
xchg
enter
sbb
and
pop
das
shl
inc
outs
jmp
fstp
pop
cmp
pop
ds
cli
jecxz
add
pop
add
mov
mov
cdq
jmp
out
neg
sub
jmp
pop
ja
out
jecxz
mov
test
ret
inc
adc
mov
pop
xchg
clc
dec
stc
mov
jmp
mov
dec
pop
sbb
and
push
push
jb
ss
mov
inc
jle
ja
mov
cwde
enter
fld
aas
sar
jmp
fwait
imul
repz
mov
mov
pushf
sar
or
loopne
data16
sbb
icebp
cmp
cmp
loopne
ftst
mov
scas
loopne
cmp
pop
je
test
mov
cmps
int
clc
(bad)
(bad)
movs
push
jge
mov
fs
push
xlat
sahf
sbb
fild
add
push
inc
push
call
jg
outs
das
xor
sar
(bad)
cld
leave
fcmovnb
cmp
cmp
jno
push
sub
dec
les
scas
je
xor
dec
sub
lds
dec
mov
dec
popa
sti
mov
cmp
lahf
inc
push
loope
pop
lods
push
movs
daa
ret
scas
rcr
xchg
std
add
loope
dec
bound
cld
adc
ins
mov
call
xchg
icebp
pop
mov
shl
or
push
loopne
xor
inc
sahf
fmul
loopne
into
inc
mov
push
or
rol
lods
imul
fimul
jmp
lods
(bad)
push
add
jnp
sbb
lds
je
(bad)
fdiv
lds
xor
mov
stos
cmp
sub
cmp
jo
imul
neg
add
fwait
repz
jecxz
push
pusha
mov
ins
addr16
addr16
shl
pop
mov
xchg
sbb
cwde
in
mov
xchg
and
mov
cmp
out
adc
sbb
ret
push
scas
lods
sbb
cmp
inc
sbb
push
cli
pop
mov
inc
xchg
rol
cli
cmps
inc
ret
push
call
inc
jl
aad
xor
iret
jae
xlat
push
fwait
push
and
mov
aaa
lock
neg
dec
adc
or
mov
pop
adc
pop
mov
mov
pop
fwait
mov
inc
add
dec
mov
sub
mov
cmp
mov
sub
retf
mov
xlat
or
inc
ret
cmc
sub
in
cmp
sub
ss
rcl
sub
clc
ret
in
mov
jl
adc
hlt
sub
and
xor
or
cmc
adc
shr
je
lahf
or
leave
push
in
enter
add
xchg
xor
mov
and
repnz
adc
aam
jp
jnp
pop
push
fsubr
push
jae
pop
fs
loope
std
(bad)
or
xlat
enter
js
push
inc
not
shr
jmp
mov
jecxz
into
(bad)
rcr
push
push
dec
scas
cli
rol
rcl
aad
add
and
jmp
inc
scas
retf
(bad)
ss
xor
ds
adc
sbb
or
shl
js
adc
das
mov
jecxz
cmp
movs
shr
inc
test
xchg
ds
hlt
dec
sbb
pop
(bad)
sub
repz
mov
in
mov
cmps
scas
cdq
nop
xchg
(bad)
mov
(bad)
out
dec
popf
mov
int
pop
pop
les
or
jg
mov
push
ja
push
xor
dec
imul
mov
imul
sbb
fmul
mov
sbb
mov
das
mov
mov
inc
sti
push
xlat
jnp
cwde
sbb
test
retf
sub
imul
mov
les
pop
push
or
leave
add
xor
mov
mov
mov
fisub
cmp
mov
jg
bound
xchg
mov
mov
sar
xchg
ret
jbe
mov
retf
inc
int3
jl
lods
and
sbb
lods
pop
and
leave
retf
add
xchg
xchg
add
sub
add
or
pop
fwait
xor
(bad)
aam
mov
mov
or
arpl
xor
adc
sbb
push
mov
jg
cwde
xlat
call
scas
hlt
inc
or
push
pop
dec
fsub
push
ret
fild
mov
popa
adc
pop
xlat
sub
xor
jle
cmp
sub
or
inc
mov
or
mov
stos
lahf
popa
aas
sahf
add
test
pop
arpl
aam
xchg
xchg
out
in
call
mov
stc
lock
mov
in
loope
sbb
fcom
dec
iret
push
adc
mov
xchg
int
cld
xchg
fild
mov
push
movs
movs
dec
dec
rol
and
bound
ss
mov
cmp
xchg
push
mov
pop
or
push
dec
dec
sbb
add
adc
aam
or
cs
sbb
adc
dec
push
mov
sbb
xchg
and
pop
dec
mov
(bad)
jmp
imul
mov
std
add
test
cmp
adc
adc
shl
aaa
jmp
fptan
fnstenv
sub
fidiv
and
in
popf
mov
popa
loopne
shr
xchg
dec
push
push
int3
das
sbb
test
popf
retf
push
jnp
test
out
jno
sub
cmp
retf
xchg
dec
ds
add
pop
inc
test
jnp
jecxz
dec
adc
sub
and
icebp
fs
into
leave
ss
cmp
mov
jge
aas
mov
loope
dec
sti
rcl
inc
movs
in
xor
(bad)
push
or
add
jmp
lahf
pop
inc
xlat
jae
pop
push
and
push
in
dec
inc
cmps
xchg
cli
call
pushf
in
or
add
jmp
lock
or
xchg
or
sub
push
retf
pop
rcl
dec
mov
adc
stos
inc
or
sahf
sbb
mov
or
das
pop
or
fld
sub
nop
mov
mov
stos
dec
pop
aad
dec
mov
dec
idiv
xchg
sub
xchg
and
jecxz
dec
xchg
adc
aaa
pop
jecxz
mov
mov
ins
popf
mov
jae
xchg
mov
mov
sub
cli
or
mov
in
xchg
loope
pop
retf
push
fstp
int3
dec
mov
mov
sub
cdq
cld
retf
imul
ds
ja
fidivr
mov
mov
xchg
imul
push
iret
adc
mov
fs
dec
push
cmp
loopne
cmp
jbe
(bad)
stc
dec
sbb
pusha
out
out
or
rol
mov
jge
xchg
inc
dec
loop
outs
sub
aas
(bad)
adc
add
(bad)
adc
jmp
repnz
std
(bad)
idiv
cmp
xchg
cmps
rcl
mov
or
outs
(bad)
fst
cld
jb
dec
mov
cmps
and
add
mov
mov
lods
push
mov
jle
mov
scas
ja
sub
xor
mov
inc
int3
std
int
icebp
mov
add
movs
inc
imul
mov
cmp
xor
xchg
adc
out
hlt
fnstsw
movs
xchg
loopne
retf
jmp
fisttp
xchg
jmp
dec
int
xchg
mov
ja
sbb
mov
scas
out
test
add
ins
lods
test
adc
sbb
test
push
add
push
xor
mov
retf
repnz
movs
push
fidiv
xor
adc
hlt
jge
push
stc
inc
mov
or
popa
add
sub
out
sub
pop
add
jno
add
cld
ins
sbb
cmp
jmp
loop
sub
jnp
call
jbe
mov
pop
jl
inc
ins
aad
sbb
(bad)
ja
sahf
sub
(bad)
jno
out
push
mov
or
retf
leave
lahf
ret
ins
in
xor
jbe
das
icebp
mov
or
cs
jp
lods
sub
jne
dec
push
sbb
scas
cwde
mov
inc
sbb
repnz
mov
add
push
cmps
mov
ja
stc
pop
mov
stos
cmp
loop
mov
cmp
sbb
mov
sub
cmp
inc
int
lahf
cmp
rcl
xchg
pop
into
and
iret
std
out
xchg
cmp
dec
jne
xor
movs
xchg
mov
dec
js
pop
out
pop
mov
mov
cmp
jmp
mov
gs
es
aaa
lock
shr
mov
lahf
aaa
out
fiadd
cmp
or
mov
movs
comiss
xchg
stos
aam
movs
or
hlt
ficomp
push
test
jae
jb
imul
cmp
fiadd
loopne
dec
mov
sbb
xor
(bad)
out
call
lds
sub
mov
sub
xlat
adc
fdiv
loop
xchg
xor
int
inc
dec
jne
icebp
inc
retf
pushf
(bad)
sub
xor
outs
xchg
xlat
sub
dec
aad
arpl
push
cmc
das
lahf
ins
xor
mov
pop
cld
add
sbb
xor
jge
push
fwait
pop
ret
in
dec
pop
sti
dec
inc
pop
sar
out
data16
jmp
mov
idiv
add
cmc
xor
push
into
and
stos
dec
jno
data16
sbb
xor
in
mov
in
mov
int3
gs
sbb
jne
add
es
not
mov
jmp
mov
icebp
mov
mov
iret
inc
daa
cli
or
enter
xor
cmps
es
dec
or
sbb
and
sub
mov
idiv
fwait
pop
aas
xchg
stc
mov
fst
stos
fldcw
push
cmp
out
cli
mov
test
in
push
jle
or
sub
push
xchg
fadd
push
mov
xor
push
sti
sub
push
dec
sub
es
and
xchg
and
gs
sbb
out
and
into
jns
shl
sub
lea
js
jmp
enter
mov
inc
(bad)
mov
sbb
or
fimul
xor
imul
adc
mov
xchg
push
lods
sbb
add
pop
(bad)
sbb
cmp
ds
mov
jle
xchg
push
fiadd
sahf
(bad)
sti
out
iret
mov
test
push
push
jns
lock
mov
mov
cmps
xchg
xor
ror
xchg
add
repz
jns
outs
stos
sub
jmp
jge
idiv
dec
int
leave
bound
popf
mov
lahf
outs
push
cmps
cmps
jbe
out
arpl
add
ja
les
pop
xor
pop
and
inc
mov
lods
xchg
mov
pop
mov
add
push
push
mov
push
xchg
xchg
xlat
cli
jne
cmp
mov
pop
in
pusha
(bad)
jg
push
call
jp
cmp
lods
xchg
inc
dec
xor
push
popa
cmc
mov
out
loope
aam
scas
sti
(bad)
lahf
push
ret
fsubr
repnz
psubd
clc
xchg
sub
mov
pop
or
xor
push
rol
push
in
std
pop
outs
jge
into
sub
push
inc
or
lods
outs
pop
mov
bnd
adc
dec
ins
pusha
pop
dec
in
pop
sub
(bad)
js
sub
xchg
test
int3
jnp
ss
dec
jno
or
js
mov
repnz
jge
dec
or
jecxz
mov
test
add
jne
call
xor
dec
push
mov
mov
inc
push
adc
sti
test
push
xchg
jmp
arpl
mov
call
jge
mov
xchg
shl
or
scas
push
mov
int
jno
cmp
jo
dec
lock
jg
adc
mov
(bad)
push
fidivr
and
pusha
cmp
pop
test
les
or
leave
test
xor
pop
test
sub
xor
pop
pop
and
dec
sti
(bad)
stos
lahf
push
in
test
gs
xor
lea
rol
push
ret
inc
js
ds
jae
adc
mov
or
pop
sub
add
pop
inc
jge
mov
out
pop
push
shl
repz
scas
sbb
jmp
mov
pop
sub
or
xchg
cmp
sbb
or
es
cmp
dec
es
pop
lds
repnz
sbb
jle
cwde
xchg
ret
adc
mov
clc
jmp
mov
or
not
imul
test
int3
and
hlt
ror
ret
test
in
cmp
fs
jle
mov
inc
(bad)
sub
test
jmp
or
stos
les
sub
adc
inc
mov
outs
inc
sub
scas
shl
cwde
jmp
sbb
mov
sbb
mov
sub
out
jg
fs
push
fcom
and
movs
pop
stos
mov
adc
ds
cmp
mov
cld
pop
les
fmul
dec
mov
les
(bad)
(bad)
cs
and
sub
retf
into
pop
dec
cmp
add
sar
and
xlat
xchg
dec
test
sbb
in
cmp
cmp
nop
mov
in
pop
dec
pop
sub
sbb
les
daa
ins
mov
test
repz
cmps
inc
dec
push
mul
jns
test
rcr
cmp
mov
in
sbb
cs
mov
arpl
jge
je
dec
call
sbb
pop
aaa
imul
dec
and
xchg
inc
push
cli
fisttp
pop
(bad)
das
jb
push
imul
test
mov
cmps
paddsb
mov
push
mov
scas
rcr
sub
or
out
repz
cmp
aas
push
in
fs
push
nop
int
dec
mov
test
add
dec
test
jmp
jge
adc
push
cmp
hlt
loopne
mov
push
test
pop
gs
sub
cmp
outs
sub
mov
mov
push
xlat
cmc
adc
dec
push
mov
pop
adc
mov
shr
jmp
sbb
mov
adc
sbb
scas
add
mov
div
inc
jmp
xchg
scas
push
sbb
mov
xchg
sbb
div
add
mul
dec
dec
js
xchg
inc
and
jmp
fsub
xor
loope
ret
aad
dec
cwde
rep
movs
and
push
add
movs
mov
shl
cmp
cmp
sub
(bad)
adc
aaa
mov
daa
xor
enter
mov
inc
sbb
arpl
call
xor
mov
inc
rol
sub
adc
jne
stc
xor
xor
cmp
cmc
dec
fiadd
ror
iret
ror
jg
mov
retf
shr
mov
iret
out
pop
ficomp
sub
xor
scas
or
dec
popf
data16
nop
(bad)
(bad)
adc
repnz
pop
dec
push
add
(bad)
aas
push
pushf
xchg
lods
xor
push
lods
arpl
jl
mov
call
and
jb
test
add
mov
pushf
xlat
push
imul
out
adc
sbb
cmc
mov
mov
aaa
sub
sub
mov
(bad)
mov
push
dec
cmp
pop
int3
lock
xorps
add
cmp
cwde
loop
mov
bound
mov
pop
mul
add
stc
jle
outs
imul
lods
ror
cld
lahf
inc
sub
or
(bad)
std
mov
mul
mov
or
dec
xchg
sub
pop
inc
mov
xlat
scas
push
loope
pushf
mov
frstor
pop
or
outs
jbe
popf
mov
or
jno
mov
loop
test
stos
push
adc
stos
paddusw
inc
pop
jbe
xchg
pop
jle
push
es
test
push
shl
fcom
lea
rcl
or
jnp
scas
push
inc
lock
shl
test
pop
cld
jle
popa
jmp
dec
and
in
xor
lods
ja
mov
fwait
fs
ret
js
ins
fsubr
or
pop
and
mov
jl
ds
loop
movs
adc
mov
test
pop
call
mov
nop
je
in
cmp
mov
mov
cli
add
or
ffreep
out
pop
jecxz
fsub
xchg
imul
aas
cli
mov
lea
push
lahf
clc
or
add
cdq
adc
rcl
aad
xchg
sbb
pop
popa
gs
add
retf
cmp
loopne
(bad)
xlat
xchg
imul
and
rcr
cmp
jl
lods
mov
and
jecxz
sub
rcl
cld
ja
mov
cmps
gs
push
test
ins
xor
loopne
mov
fimul
xchg
cmp
out
pop
loope
fnstenv
data16
aad
pusha
mov
xor
mov
imul
pop
mov
(bad)
fwait
imul
push
sar
retf
popf
cmp
stos
mov
cmps
ja
inc
push
jl
fisub
psraw
jns
cld
add
lods
xchg
into
(bad)
std
in
retf
mov
dec
xchg
cmp
inc
xchg
js
popf
adc
cdq
mov
into
(bad)
dec
aad
test
jge
stos
int3
mov
mov
fst
mov
outs
mov
xchg
retf
and
and
sub
js
mov
sbb
scas
and
dec
xchg
add
cmps
xchg
enter
retf
push
push
xchg
jp
clc
and
scas
jp
inc
cmp
sbb
inc
sbb
mov
sub
mov
rol
cmp
jge
jmp
add
mov
xchg
or
repz
in
std
dec
dec
movs
mov
mov
xchg
movs
nop
sub
sti
es
retf
mov
or
push
aad
rol
push
popf
ret
test
icebp
or
lahf
mov
push
fwait
jle
ror
popf
adc
cmp
or
mov
cmp
add
shr
adc
lea
in
shl
rol
mov
bound
nop
daa
ja
fdivr
jbe
es
pop
cs
or
mov
lock
push
movs
outs
and
imul
adc
add
adc
es
mov
fwait
je
or
xchg
out
retf
mov
cdq
mov
cld
popa
cld
test
loope
mov
out
pop
mov
cmp
js
or
(bad)
fnstcw
das
out
jg
fnsave
in
dec
jae
pop
stc
inc
mov
xor
mov
lods
dec
jl
add
push
cmp
jbe
adc
jge
push
test
push
xchg
inc
hlt
pop
push
inc
movs
fild
xor
enter
xchg
mov
std
sub
in
push
xchg
pop
sahf
adc
or
lods
fisttp
(bad)
repnz
fcomp
or
sub
in
inc
retf
dec
fnsave
das
xchg
hlt
xchg
xlat
jecxz
pop
pop
or
fwait
pop
xor
push
mov
js
fistp
movs
xchg
xchg
std
ffreep
ret
hlt
ds
pop
(bad)
xor
lock
pushf
test
sbb
sub
ds
and
mov
pop
adc
cmc
daa
xor
push
inc
jo
fwait
gs
xchg
lea
outs
fs
xor
data16
sub
push
in
add
cmp
fs
fcomp
or
js
jle
xlat
vminsd
cmp
movs
xlat
pop
push
dec
(bad)
mov
fwait
xchg
and
loope
mov
ret
ins
add
in
out
outs
mov
push
sbb
popf
aaa
jne
inc
or
push
push
push
imul
in
mov
daa
fild
pop
xchg
and
mov
cmp
nop
(bad)
mov
(bad)
(bad)
(bad)
outs
push
cmps
pop
cmc
call
rcl
adc
jae
push
and
cmp
stos
dec
in
out
jmp
(bad)
dec
test
shl
cmp
mov
in
stos
cwde
mov
retf
fadd
mov
pop
nop
pop
repnz
push
add
fs
cmps
add
pop
bound
jae
dec
adc
fnstsw
clc
fs
adc
inc
or
enter
sbb
xchg
jle
mov
cmp
xor
daa
mov
sbb
xchg
pop
sub
add
popa
loope
xchg
xchg
stos
xlat
or
cs
push
jnp
dec
inc
dec
mov
push
nop
cmps
popf
das
test
mov
xchg
repnz
in
push
jecxz
mov
xchg
nop
fcmovne
and
ds
inc
jl
sbb
ins
sub
xchg
aaa
dec
mov
cmp
xor
inc
in
aam
adc
wrmsr
pusha
mov
xchg
jne
lods
mov
fwait
inc
cmp
add
xchg
cmps
or
or
and
(bad)
jo
rcr
ficom
pusha
lahf
fcom
mov
jecxz
cmps
fldenv
mov
inc
jmp
popa
cli
mov
pop
das
not
pop
jmp
pop
je
xor
add
dec
ds
and
pop
push
xchg
repz
sbb
aaa
dec
mov
rcr
jbe
xor
mov
not
or
scas
aam
cmps
mov
in
push
imul
xchg
cmps
cmp
xchg
in
es
(bad)
push
rcr
sti
mov
cmp
shl
jl
mov
mov
mov
repnz
or
out
xchg
ss
push
cmp
dec
(bad)
push
inc
sti
mov
pop
test
pop
push
add
jno
adc
add
cld
sub
dec
ret
sbb
inc
pop
inc
sbb
push
(bad)
mov
cmp
adc
dec
push
mov
int
jo
jle
dec
mov
popf
cmp
add
dec
fcomp
jns
xchg
out
mov
inc
sub
es
fcom
sar
pop
ror
mov
or
in
mov
inc
out
add
push
cdq
mov
sbb
pop
test
mov
push
out
add
or
cmp
cld
jecxz
cmp
add
inc
in
mov
mov
mov
mov
sub
das
xchg
cmp
mov
add
lds
xchg
repnz
in
or
rcl
xchg
mov
out
sbb
mov
sahf
dec
neg
daa
xchg
sbb
pop
(bad)
mov
sbb
push
adc
test
push
adc
or
cdq
xchg
cmp
lods
inc
inc
or
or
sti
daa
xchg
inc
push
add
push
test
mov
and
mov
jp
cmp
xor
cmp
stc
aas
mov
in
mov
jo
xchg
adc
dec
in
xchg
mov
icebp
test
clc
push
adc
movs
cli
movs
aaa
dec
loopne
movs
xchg
leave
sub
cmp
mov
clc
movs
push
sub
mov
fstp
push
push
xor
ins
(bad)
jae
adc
fild
mov
fwait
sub
mov
loope
cdq
push
cld
js
pop
repz
jb
fadd
inc
jecxz
imul
iret
sbb
adc
test
adc
repz
pusha
cmp
or
repnz
mov
push
dec
hlt
fsubp
add
jmp
(bad)
adc
aad
mov
cmps
imul
loopne
mov
cs
imul
inc
sub
push
or
xchg
std
ret
dec
repnz
out
mov
cdq
sub
add
ds
cmc
inc
pushw
push
mov
aas
push
mov
and
out
inc
ja
in
jnp
ret
fcom
fisubr
aaa
jl
rcr
stos
cmps
pop
popa
(bad)
repnz
add
push
cmp
lods
loopne
ficomp
outs
push
mov
adc
xchg
icebp
adc
lds
jb
push
test
idiv
imul
js
push
cdq
and
push
inc
iret
inc
pop
mov
xchg
push
icebp
aam
test
(bad)
fbld
sahf
pop
mov
or
icebp
or
test
or
scas
dec
sbb
sub
test
adc
es
mov
mov
(bad)
xchg
loope
sbb
addr16
xchg
jns
push
dec
mov
mov
inc
or
sbb
stc
cld
and
xchg
loope
retf
es
jecxz
scas
fs
imul
cli
xchg
jg
cmps
adc
or
loop
arpl
xchg
stc
pop
sub
jle
in
aaa
inc
xchg
inc
retf
mov
push
out
pop
add
dec
das
movs
ror
push
inc
mov
adc
aaa
push
int3
jmp
mov
cmp
dec
or
inc
sbb
jmp
sbb
pop
sbb
loope
nop
mov
push
imul
xor
add
inc
mov
jno
mov
clc
rol
cmp
dec
mov
pusha
imul
ss
cmc
lods
call
(bad)
lods
mov
test
mov
cmp
dec
or
test
jnp
jno
push
in
ror
inc
mov
push
lods
and
nop
call
or
inc
js
cmp
lahf
les
dec
and
push
lock
or
repz
das
push
fwait
xor
or
mov
jne
sub
popf
xchg
dec
xchg
or
iret
inc
sti
sbb
outs
test
add
cmp
ds
push
adc
aad
popf
pop
mov
add
(bad)
sar
dec
add
jp
call
frstor
sbb
adc
xor
mov
inc
ss
sbb
je
test
stos
xchg
xchg
or
scas
outs
js
push
call
test
mov
les
popa
fistp
or
jl
sbb
stos
out
dec
ins
mov
imul
or
add
mov
nop
mov
repnz
call
fwait
dec
dec
popa
fadd
call
int
shl
lock
mov
out
mov
dec
push
repnz
mov
enter
cmc
xor
dec
scas
call
shl
xchg
aas
dec
push
jo
dec
cmps
inc
lods
ja
sub
dec
xor
pop
xor
sub
inc
add
push
out
fwait
sub
jge
and
cmc
repz
nop
push
adc
sbb
push
mov
sub
hlt
movs
xchg
push
sbb
nop
cli
movs
stos
data16
dec
pop
ds
push
pusha
test
cli
loopne
(bad)
sub
or
lea
lods
sbb
popf
mov
pop
data16
(bad)
ins
ins
test
mov
cmp
movs
(bad)
mov
aam
ret
mov
dec
mov
(bad)
cmps
mov
sbb
cs
adc
fmul
nop
add
sbb
xchg
ja
dec
lock
(bad)
into
jnp
call
push
sub
das
or
imul
mov
das
int3
pop
add
out
mov
sbb
pop
into
xor
mov
xlat
pop
jo
inc
ret
arpl
cmp
mov
ins
push
das
xchg
lock
inc
push
sti
fstp
and
aam
or
xchg
aaa
into
cmp
mov
mov
xor
aad
shl
loopne
sahf
and
and
icebp
mov
pop
sub
ror
mov
addr16
neg
(bad)
rol
xor
jb
cmp
lods
mov
addr16
fsub
jne
ror
imul
push
jmp
mov
rcr
inc
sbb
int
(bad)
pop
iret
inc
adc
out
xchg
aas
nop
outs
inc
mov
cmps
and
lock
nop
sbb
paddusb
xchg
sbb
pushf
jp
rol
int3
inc
xor
retf
cmp
jb
test
sbb
and
jae
mov
movs
or
mov
ret
lock
jne
mov
pop
mov
ret
imul
adc
ret
sub
xchg
in
ss
jbe
lods
push
ror
cmps
add
add
xor
adc
ja
pop
dec
xchg
or
out
aas
stos
pop
dec
jno
stos
out
ret
add
or
sahf
mov
sub
and
aam
(bad)
inc
mov
cwde
xchg
ds
pop
xchg
(bad)
out
cld
push
add
mov
ror
rcl
pop
pusha
ins
ror
mov
mov
jbe
pop
jg
push
mov
idiv
fs
push
xor
retf
sub
mov
ins
data16
ds
dec
out
or
pusha
cmovl
test
pop
sbb
push
mov
in
in
rol
mov
mov
jns
out
and
sahf
mov
ret
mov
mov
cmc
fcom
in
pop
mov
mov
mov
retf
cmp
sub
jg
out
cmp
mov
jmp
push
ds
movs
(bad)
jnp
mov
inc
gs
ss
iret
fadd
scas
int
fwait
iret
or
xchg
xor
aaa
or
loope
adc
cmps
arpl
(bad)
in
sbb
pop
push
inc
lods
mov
mov
stos
pop
fcom
push
dec
xor
and
dec
add
cmps
mov
mov
ss
(bad)
mov
dec
add
hlt
(bad)
mov
add
jno
test
fcom
retf
mov
xor
xor
popa
cmp
and
inc
adc
bound
loop
cwde
fwait
mov
jge
call
xchg
or
pop
adc
cmp
cmp
mov
in
dec
pop
push
mov
jg
fwait
xchg
push
pushf
gs
jno
push
arpl
add
pop
xor
push
inc
sub
jmp
ds
mov
scas
hlt
je
cmps
not
aam
lods
iret
add
ror
icebp
lods
fwait
xor
xor
xor
add
adc
out
test
pop
cli
sbb
pushf
cmc
movs
mov
pop
mov
ficomp
xchg
mov
sub
aam
push
(bad)
push
sbb
sbb
ret
jmp
inc
fidiv
ror
fidivr
rcr
(bad)
sbb
inc
add
cmps
sbb
lea
je
aas
push
jmp
sub
imul
sub
(bad)
mov
loopne
dec
(bad)
mov
pop
lock
(bad)
push
push
xlat
int3
icebp
mov
mov
aad
icebp
mov
(bad)
pop
stos
mov
dec
gs
cmp
jns
fmul
dec
xchg
mov
(bad)
movs
nop
jg
in
aam
add
loope
imul
stos
push
pop
mov
(bad)
sbb
(bad)
call
mov
inc
push
lds
loopne
ins
push
test
in
loopne
xchg
push
add
popf
outs
xchg
push
imul
lsl
mov
jo
les
fdiv
inc
fild
sbb
dec
call
push
push
imul
(bad)
add
call
push
dec
push
jmp
and
scas
pop
mov
mov
pop
scas
lahf
popa
cld
dec
xchg
arpl
fwait
jne
(bad)
jle
add
add
sbb
xor
or
push
jmp
xor
mov
push
dec
jb
mov
sub
jge
mov
iret
sar
scas
iret
push
repnz
shr
cli
iret
xchg
fsubr
(bad)
cmp
je
pusha
jae
shl
ins
pop
(bad)
add
outs
ja
xchg
pop
(bad)
push
mov
jmp
push
mov
push
and
fmul
mov
adc
(bad)
out
xlat
pusha
test
inc
push
mov
sbb
arpl
push
lods
shr
(bad)
jnp
es
pop
or
das
ds
(bad)
sub
pop
mov
loop
fmul
repnz
hlt
xchg
icebp
retf
add
daa
sahf
xchg
push
xchg
(bad)
and
sbb
test
das
sub
retw
mov
fsubrp
(bad)
into
dec
xchg
adc
popf
mov
in
jl
xor
gs
sti
dec
pop
movs
nop
pop
xor
fdivr
addr16
aad
ins
pop
lock
cmp
mov
daa
cmp
mov
cs
mov
inc
call
in
les
mov
inc
sti
inc
fcmovbe
and
mov
movs
sub
xchg
call
and
call
xchg
mov
aad
in
sti
add
scas
xor
cmp
js
repz
cmc
jae
and
jnp
mov
test
fnstenv
pop
pop
add
sub
dec
cli
mov
or
sbb
int
popf
cmp
popa
inc
xor
out
push
jmp
xlat
mov
or
aas
stos
mov
pop
fwait
mov
pop
arpl
pop
int
xchg
scas
jecxz
cwde
cmc
push
shl
out
call
(bad)
pop
mov
jno
rol
xor
push
or
add
imul
call
adc
inc
push
add
mov
sub
sbb
fisub
cmc
xor
mov
push
mov
push
bound
mov
pop
pop
mov
dec
adc
lds
pop
add
cmps
sti
pop
pop
mov
adc
adc
pop
fisubr
scas
ret
test
enter
test
icebp
jmp
scas
mov
jb
ja
sbb
push
mov
and
push
pop
sti
mov
or
outs
div
pop
mov
xchg
int3
(bad)
addr16
repz
xchg
adc
cmps
jg
(bad)
outs
xchg
(bad)
sbb
and
xchg
std
and
mov
aaa
ins
xchg
ins
pushf
cmp
push
pop
fnstsw
(bad)
out
pop
sbb
mov
cmp
xlat
xor
(bad)
out
jb
rcl
enter
nop
jns
cwde
cs
retf
aaa
ins
and
in
retf
inc
je
es
pop
ret
dec
in
jmp
test
inc
push
in
inc
pop
mov
call
inc
fnsave
jmp
(bad)
loop
add
mov
lock
fninit
pusha
mov
jle
push
pop
push
jb
xchg
sub
push
loope
pop
scas
test
jmp
cdq
in
int
mov
sub
dec
test
lods
or
sar
cmp
xchg
push
cmc
test
pop
psllw
inc
mov
mov
and
cmps
pop
dec
jmp
ins
jmp
dec
cmp
loopne
sub
dec
sar
xlat
cwde
xor
in
adc
mov
lds
imul
adc
call
mov
jl
dec
std
fs
jno
je
cmc
shl
add
loope
test
pop
in
scas
xor
fwait
imul
adc
enter
mov
ja
sbb
imul
add
cli
push
call
test
daa
ficom
or
add
(bad)
test
jno
jl
push
adc
pop
test
pop
ins
pop
jns
xor
dec
out
jae
aad
fild
fist
loopne
cmp
jge
lods
cld
inc
in
jo
leave
in
sub
jmp
ficom
ja
mov
aad
mov
xlat
xor
jecxz
and
mov
inc
cmp
and
int
push
ret
xchg
aas
in
xor
jle
iret
arpl
xchg
lahf
xor
lahf
add
imul
dec
mov
test
jl
mov
(bad)
in
mov
inc
xchg
ins
outs
push
mov
xor
int3
add
pushf
sbb
or
enter
inc
or
push
jg
push
fsub
ret
add
and
cwde
and
cld
xor
jb
rcl
call
stos
shl
pop
clc
and
and
loop
(bad)
ja
mov
cmps
(bad)
jg
test
ja
push
cmp
xchg
arpl
ins
sbb
iret
sahf
mov
sub
jno
inc
pop
das
adc
and
es
mov
inc
stos
int
call
in
xchg
and
mov
dec
mov
or
jmp
ror
mov
leave
jns
mov
and
pop
xchg
outs
je
pop
sahf
ret
int
or
push
jl
leave
sub
mov
shr
sti
retf
in
mov
sbb
cmp
sub
sahf
pop
and
das
xchg
stc
sahf
stos
ds
out
dec
setns
(bad)
fiadd
xchg
(bad)
mov
pop
push
jmp
bnd
ja
mov
push
xchg
pop
sbb
std
lds
mov
aaa
shl
mov
shl
js
jae
sbb
aam
mov
data16
or
cmp
jg
jg
pop
icebp
sub
and
nop
mov
mul
mov
jno
cmc
out
lods
push
arpl
jb
retf
ins
cwde
mov
push
adc
push
sahf
xlat
test
sub
push
dec
test
xchg
xor
out
adc
aas
cmp
(bad)
dec
push
les
data16
mov
sub
retf
cmp
les
dec
dec
xchg
imul
ja
jne
sbb
add
rcr
(bad)
mov
stos
sub
jg
pop
cmp
add
int
popf
xchg
cmp
xchg
or
stc
push
add
push
js
rcl
inc
mov
test
xor
in
push
shl
mov
mov
(bad)
movs
int3
fisubr
mov
mov
fdiv
mov
mul
mov
inc
out
aam
fild
mov
sub
push
fsub
or
inc
dec
sbb
xchg
retf
adc
cmps
mov
(bad)
sub
push
push
ja
call
pop
stc
js
cdq
imul
fcomip
and
add
ins
in
cdq
xchg
and
fnstsw
add
inc
ret
retf
pop
push
jmp
cdq
gs
fcom
mov
nop
inc
push
cmps
lds
(bad)
push
in
ficomp
cmc
mov
imul
fucompp
mov
xor
cmp
sar
sbb
xchg
mov
test
sub
(bad)
xor
rol
sbb
xor
imul
lock
mov
sub
aas
mov
or
inc
ins
(bad)
and
sbb
xchg
movs
je
in
cmp
and
pop
inc
call
int
mov
mov
push
lea
mov
sbb
jno
or
loope
cld
sbb
jg
xor
xchg
pop
popf
aad
mov
dec
push
mov
or
push
cmp
fidiv
mov
cdq
and
cdq
cmp
and
jp
pushf
dec
push
aad
push
mov
sti
adc
cli
mov
ja
pop
xor
jg
popa
pop
or
adc
xchg
xchg
ret
dec
pop
and
sar
jge
outs
cdq
jnp
out
cs
nop
dec
jbe
adc
sbb
inc
mov
push
pop
stos
mov
fwait
sub
out
test
inc
scas
sbb
bound
mov
test
sub
cmp
push
fistp
adc
fistp
(bad)
sub
gs
sub
ret
int
push
ret
lods
jle
dec
mov
scas
int3
mov
jmp
cwde
sti
dec
js
fld
push
sbb
call
lods
adc
rcl
jecxz
dec
aam
movs
aaa
leave
stos
repnz
loop
popf
push
cmp
aaa
daa
fdivr
loopne
rcr
(bad)
cdq
test
or
sbb
jns
mov
mov
jmp
or
stos
push
mov
xchg
cmp
ror
jmp
fsub
push
adc
call
ins
(bad)
in
push
lahf
pop
shr
dec
shl
fidivr
std
xor
adc
cmc
xchg
lods
or
pusha
ins
lods
out
js
ret
add
fisttp
dec
jmp
mov
push
inc
add
neg
dec
test
sbb
aam
repz
mov
loop
sbb
mov
push
xchg
jno
int3
call
cmp
or
pop
nop
mov
ror
push
jge
fucomp
inc
lods
retf
jb
in
and
shl
mov
jo
push
push
dec
add
jns
xchg
(bad)
neg
inc
mov
and
movs
std
lods
inc
jecxz
fs
and
push
sbb
ins
fisttp
pop
mov
pop
and
in
jmp
mov
pop
rol
dec
and
aam
mov
dec
adc
test
(bad)
pop
icebp
call
cmp
push
cmp
std
arpl
jne
fistp
lea
cmp
mov
add
clc
dec
fbstp
cmp
jb
pop
lock
ins
int3
out
push
lock
push
mov
push
not
popa
ss
into
xor
adc
push
popa
xchg
mov
in
icebp
push
mov
ins
or
pop
dec
pusha
sahf
jmp
or
mov
inc
out
jp
jbe
pop
icebp
sbb
xchg
xchg
jmp
push
sub
dec
popa
mov
xor
xchg
dec
sbb
call
test
sbb
adc
xchg
xor
mov
loopne
push
dec
stc
cmp
jnp
lock
dec
cmps
pop
(bad)
data16
cld
or
push
mov
jae
ret
jne
mov
cmps
fldenv
add
clc
movs
call
popa
ror
ds
mov
mov
das
outs
test
mov
iret
mov
mov
movs
add
push
(bad)
in
popa
repnz
xor
pop
dec
dec
or
mov
fsubr
js
xor
cld
push
fmul
fcomi
cmc
push
ja
cli
add
xchg
je
mov
sbb
ror
js
dec
leave
cmps
clc
xchg
jae
sbb
push
je
push
lea
push
out
cmp
mov
sub
jecxz
or
cmps
and
scas
sbb
fcomp
in
fsubr
in
cmp
xor
xchg
mov
pushf
push
xor
iret
clc
sbb
push
ret
mov
iret
jns
bound
ror
jp
lock
je
fwait
mov
add
or
sbb
out
outs
adc
dec
ins
into
inc
in
mov
ret
pop
pop
and
loope
cmp
addr16
rol
dec
rol
mov
push
popf
vcvtss2si
dec
jl
add
cmc
jge
clc
push
sbb
cmp
add
dec
xor
xchg
adc
out
xor
(bad)
idiv
xor
jno
mov
in
rcr
adc
jp
lock
(bad)
xor
add
cmps
jae
xchg
push
cdq
inc
(bad)
retf
mov
jb
movs
xor
sub
dec
xchg
sbb
xor
test
scas
adc
mov
into
fild
clc
nop
mov
mov
retf
fimul
arpl
xor
out
sar
push
inc
out
outs
test
(bad)
mov
mov
gs
mov
cdq
sub
or
in
(bad)
out
xor
lods
pop
repnz
mov
iretw
adc
mul
mov
div
ret
jae
movs
add
in
aaa
lea
ficom
call
loopne
ret
imul
push
cmps
icebp
(bad)
add
call
xchg
addr16
repz
push
movs
cmp
mov
retf
cmps
arpl
dec
mov
xor
xor
xchg
ins
sub
jle
cdq
dec
jns
and
pop
fs
fidivr
xor
lods
mov
popa
xchg
cmp
lds
cli
out
loope
popa
push
mov
mov
nop
enter
pop
aam
outs
gs
in
popa
push
mov
stos
dec
lea
pushf
outs
aam
int
sbb
mov
sbb
or
jmp
mov
repz
dec
add
icebp
hlt
mov
adc
int
xchg
push
shl
ss
push
out
mov
xchg
push
fwait
mov
(bad)
call
mov
adc
pop
mov
rcr
dec
leave
push
mov
daa
stos
adc
ja
dec
scas
inc
pop
mov
adc
mov
sub
push
fwait
and
int
(bad)
addr16
push
or
inc
je
adc
popf
(bad)
mov
ja
pushf
sub
(bad)
adc
dec
jl
adc
inc
fdiv
add
pop
jge
test
push
jbe
jae
test
jl
pop
dec
fisttp
idiv
push
jae
mov
cld
xor
(bad)
pop
sti
dec
pop
outs
ficom
fs
cmp
ja
jbe
or
clc
jle
push
push
sar
shr
cmp
dec
add
popf
cmp
fcomp
stos
out
and
arpl
and
sbb
shr
fcom
fwait
cmc
jge
pop
ror
ret
int3
inc
xchg
je
std
ins
dec
xor
mov
popf
mov
sub
inc
div
sub
cmc
arpl
and
enter
mov
sub
ins
sub
movs
(bad)
leave
stc
cdq
dec
sub
mov
loope
push
fidiv
sbb
outs
lahf
scas
arpl
test
sti
or
dec
mov
xchg
pushf
dec
test
sub
ins
jmp
retf
or
sbb
xchg
xlat
loopne
or
or
jl
push
mov
loope
arpl
cmc
dec
adc
mov
xor
lahf
inc
mov
ret
dec
(bad)
cmp
neg
jl
aad
sub
and
aaa
mov
adc
ins
add
fxam
mov
in
test
int3
hlt
add
xchg
mov
cmps
xor
sar
outs
daa
jo
in
test
shl
ins
fld
fild
jno
adc
sar
pop
or
(bad)
ins
(bad)
dec
sbb
and
xor
xchg
pop
sbb
adc
enter
movs
jmp
dec
cmp
adc
cld
(bad)
push
popf
mov
repnz
(bad)
mov
or
call
je
lock
inc
dec
std
dec
iret
in
dec
jno
mov
data16
or
(bad)
data16
jo
dec
push
push
xchg
mov
das
xchg
fadd
inc
add
js
sub
mov
ins
cwde
cdq
ss
push
sub
inc
loop
in
push
cmp
mov
cdq
dec
jecxz
fisttp
fwait
test
xor
sub
adc
pop
movs
enter
repnz
(bad)
scas
adc
pop
aaa
pop
dec
pop
out
lock
mov
cmp
push
pop
(bad)
fild
xor
call
popf
cmp
shr
lds
fadd
dec
inc
stos
mov
inc
fcom
imul
inc
sub
mov
test
adc
in
mov
mov
xor
add
and
sahf
cmp
arpl
ret
cmp
sar
(bad)
mov
dec
push
popf
xchg
inc
mov
pop
mov
or
pushf
or
fsub
or
lea
in
sbb
retf
jge
jnp
fcmovnb
cwde
imul
xchg
dec
jle
mov
out
icebp
sbb
and
(bad)
ret
outs
cwde
loopne
addr16
mov
and
cmp
dec
mov
mov
xor
loop
cs
data16
sahf
je
cmp
mov
sahf
jmp
fist
inc
jns
fst
jb
mov
imul
push
xor
arpl
mov
popa
popf
scas
inc
mov
into
fistp
cli
sbb
mov
mov
lahf
pushf
xor
iret
data16
or
ss
sti
sbb
sbb
mov
push
cmps
pop
shl
push
rcl
enter
inc
ds
mov
inc
aaa
lahf
xor
xor
cmp
mov
or
sub
adc
jge
pop
and
and
sub
test
lahf
ss
mov
data16
in
ret
ret
sbb
and
add
mov
xor
icebp
ret
movs
mov
jmp
retf
fmul
cmp
idiv
sub
jne
mov
mov
inc
sbb
out
dec
lods
mov
jb
shr
jno
inc
test
mov
popf
mov
(bad)
adc
mov
dec
outs
(bad)
call
sub
sub
pop
or
leave
sub
add
out
xchg
push
gs
jecxz
sub
nop
addr16
sub
dec
xchg
xor
cmp
mov
and
inc
adc
rcr
shl
push
outs
mov
add
sub
cmp
mov
push
xchg
je
fistp
xchg
ret
lock
lahf
mov
scas
or
lods
pop
push
sbb
dec
fnstcw
adc
dec
loopne
dec
fisttp
ins
push
(bad)
push
jl
mov
cld
sahf
and
and
xor
(bad)
mov
lea
call
sti
aam
fwait
push
not
pop
addr16
in
push
int
adc
adc
fst
adc
jns
adc
xor
loop
es
ins
sub
mov
jg
jge
ja
mov
xor
push
pop
std
mov
(bad)
call
pop
fld
(bad)
cmp
xlat
enter
xchg
ins
mov
loopne
sbb
mov
cmps
mov
pop
pop
mov
pop
adc
push
pusha
mov
or
in
icebp
in
and
aas
stos
(bad)
mov
jmp
call
addr16
or
jb
cwde
mov
sbb
add
or
inc
mov
xor
sbb
imul
jmp
jnp
repnz
mov
xchg
add
jg
es
cli
or
inc
push
dec
inc
neg
retf
adc
push
pop
xor
test
jmp
bound
adc
push
cmp
pusha
vpor
mov
dec
sbb
sahf
xlat
mov
adc
mov
sbb
lahf
ds
or
pop
dec
in
xor
or
daa
bound
or
push
idiv
retf
in
jecxz
mov
adc
adc
repnz
sub
test
and
cmp
xor
or
ds
aad
scas
mov
mov
outs
js
pusha
aaa
jl
test
adc
(bad)
std
or
fidivr
out
fstp
aaa
pushf
xchg
cmp
inc
mov
imul
sub
pop
jnp
xchg
ins
loopne
push
(bad)
gs
jns
retf
mov
cwde
arpl
inc
cmps
mov
sub
and
pop
dec
jl
and
add
enter
enter
jns
popf
jmp
int3
fdivr
ds
out
mov
push
mov
mov
fst
sbb
jnp
loopne
popf
retf
adc
push
dec
push
ja
out
aaa
pop
jle
ret
or
into
jmp
ficomp
xchg
scas
dec
pusha
aad
adc
mov
call
jle
xor
dec
jl
sub
xor
adc
jbe
mov
aam
mov
mov
cmp
inc
adc
sbb
jle
dec
scas
leave
adc
dec
jbe
jle
dec
jg
jge
and
xchg
icebp
das
fdiv
fild
dec
mov
push
xchg
imul
hlt
pop
push
mul
cmps
jne
les
and
bound
stos
(bad)
pop
movs
nop
jmp
push
push
mov
out
pop
ss
popa
arpl
mov
clc
sub
in
xchg
enter
xchg
or
mov
dec
int
movs
rcl
push
or
sahf
jle
ror
mov
shr
and
movs
pop
imul
int
sar
popf
loope
in
es
inc
and
pop
clc
mov
push
jmp
sub
mov
xchg
scas
pop
push
imul
movs
ficom
adc
imul
jecxz
cmp
adc
jno
fisubr
xor
add
(bad)
mov
mov
in
pop
push
ficomp
int
push
pop
das
sub
mov
fst
sub
add
sti
int3
ret
(bad)
ror
mov
xchg
mov
xchg
scas
mov
dec
pop
fsub
out
push
mov
cwde
outs
je
xchg
or
stos
sub
dec
aas
test
sbb
dec
repnz
mov
mov
dec
inc
adc
adc
icebp
pop
push
xor
les
push
inc
cmp
pop
push
lods
bnd
cli
pop
int
or
jb
xor
in
call
xchg
jb
imul
adc
aas
xor
or
gs
or
push
daa
hlt
xor
push
mov
lods
out
cld
sbb
jns
ds
(bad)
lahf
jnp
js
push
pop
shr
dec
(bad)
mov
jp
xor
pop
ret
push
push
loope
push
imul
jmp
in
sub
loop
idiv
jno
push
ret
aas
scas
call
jno
out
test
sar
out
cmp
loopne
shr
lahf
inc
mov
(bad)
fcompp
push
adc
loopne
cmp
add
add
mov
loop
test
xchg
mov
mov
mov
in
sub
mov
and
aaa
mov
scas
addr16
inc
movs
mov
cmp
add
fimul
outs
dec
mov
sbb
or
out
push
push
cdq
mov
dec
in
mov
hlt
add
call
mov
into
push
(bad)
lea
mov
mov
mov
mov
mov
fist
std
or
ins
xchg
cli
jae
inc
nop
mov
mov
imul
std
aad
popf
inc
into
mov
xchg
cmp
jbe
cmp
cs
ror
outs
movs
scas
int3
adc
push
push
add
dec
sahf
sar
sahf
add
retf
movs
push
ins
out
repz
(bad)
loopne
aad
xchg
retf
cld
jecxz
add
inc
test
add
data16
lahf
fidiv
inc
sbb
mov
xor
mov
push
das
mov
dec
jns
mov
push
push
pushf
not
loop
out
jae
ins
jle
inc
mov
into
jne
adc
iret
pop
test
xor
jmp
jbe
scas
xchg
aas
dec
in
lea
repz
sub
scas
mov
or
retf
int3
sbb
retf
jbe
lock
inc
inc
ds
mov
stc
arpl
out
pop
retf
idiv
jecxz
mov
mov
cmp
enter
mov
scas
hlt
out
mov
icebp
inc
pop
out
fmul
imul
hlt
lea
ins
push
cmp
xchg
rcr
ins
xchg
repz
mov
in
jg
popf
push
sbb
xchg
mov
cli
mov
mov
pop
sbb
ja
ja
mov
scas
push
push
repnz
dec
and
call
mov
ja
inc
or
ss
daa
out
push
jno
sub
retf
mov
adc
jge
or
aad
jb
std
aaa
cld
outs
icebp
scas
dec
clc
inc
mov
repnz
(bad)
(bad)
aam
dec
pushf
sahf
cmp
dec
repz
or
dec
and
dec
mov
ret
out
sbb
or
push
cmps
(bad)
mov
dec
sub
(bad)
ror
inc
push
arpl
scas
ror
retf
mov
xor
push
sbb
pop
or
push
xor
mov
(bad)
js
ja
mov
pop
std
mov
inc
test
xchg
sbb
mov
es
mov
jp
sbb
call
jp
inc
sub
add
jmp
mov
scas
divps
and
push
dec
jns
push
mov
sub
repnz
add
rol
jb
xor
mov
lahf
xor
out
sub
jp
bound
imul
fbstp
mov
in
das
mov
and
mov
mov
(bad)
rcl
xor
lods
mov
sub
scas
sbb
jl
xchg
lock
cli
sti
aas
push
(bad)
push
xchg
pushf
mov
enter
dec
ficom
push
repz
and
xor
cmp
or
scas
cld
xchg
xchg
or
loope
add
ins
in
mov
cmp
repz
mov
and
or
(bad)
jno
test
jmp
loopne
sbb
dec
(bad)
rol
and
out
jg
arpl
bound
ss
adc
sahf
sub
pop
and
push
sub
pop
jmp
mov
add
inc
inc
xor
lea
into
mov
pop
shl
xchg
cdq
xlat
push
adc
push
js
pop
cdq
imul
stc
sbb
popf
out
adc
mov
inc
out
pop
pop
xlat
loope
lods
js
inc
cld
xor
xchg
and
shl
dec
and
sbb
ret
rcl
rcr
icebp
mov
adc
ins
fwait
inc
xor
call
xchg
fwait
dec
fcom
mov
xchg
lods
jmp
sub
loope
das
jno
push
out
mov
mov
or
pop
aam
adc
int
jle
push
repz
int3
clc
popf
sbb
pop
sbb
mov
aaa
xchg
imul
inc
stc
mov
xchg
xor
jo
test
ins
lods
pop
jb
pop
iret
out
dec
shl
dec
addr16
adc
int3
movs
into
mov
jne
retf
add
fcmovu
and
xchg
pushf
xor
lock
and
fnstenv
cvtps2pi
(bad)
and
adc
cmp
push
loopne
(bad)
test
ins
pop
mov
pop
mov
xor
mov
and
fcom
outs
mov
call
push
movs
jb
or
sar
sar
(bad)
adc
sbb
outs
into
inc
scas
retf
or
sbb
push
sbb
repnz
cmp
mov
clc
push
mov
lea
mov
fwait
sub
je
cmp
pop
movhps
(bad)
jmp
frstor
movs
jp
push
aam
fwait
sbb
xchg
call
mov
in
sti
outs
jecxz
dec
in
cmps
sub
movs
fs
mov
sub
loope
jnp
cmps
loope
xchg
xchg
movs
inc
pop
dec
dec
das
jno
loope
cmp
les
into
jge
bsr
out
test
dec
xchg
mov
(bad)
sub
inc
or
cmp
rcl
test
and
pop
xor
push
mov
in
dec
inc
jecxz
adc
pop
add
adc
test
ror
add
aas
inc
push
cdq
sahf
imul
pop
xchg
jmp
push
and
jle
xor
sbb
lds
mov
cli
xor
add
sti
out
sahf
aad
push
cdq
dec
or
bound
(bad)
dec
stos
leave
sbb
adc
frstor
psubusb
inc
out
(bad)
ja
or
test
or
pop
out
stos
or
dec
adc
ret
mov
and
push
(bad)
mov
inc
fisttp
lods
inc
dec
ins
mov
pop
mov
(bad)
cmc
jle
mov
nop
movs
add
aaa
retf
xor
inc
jle
mov
inc
or
add
mov
and
xchg
es
dec
icebp
stos
cdq
(bad)
cli
in
and
add
push
mov
mov
fcomp
mov
stos
mov
jmp
repz
cs
jo
loope
mov
je
repnz
push
inc
cmps
or
je
push
xchg
pop
mov
lock
sbb
xor
lds
dec
shl
repz
hlt
xor
dec
jb
ficomp
mov
mov
je
xchg
xchg
retf
or
and
sbb
stos
xor
leave
imul
imul
ffreep
pushf
cmps
mov
sub
mov
jo
mov
pop
inc
loope
dec
pop
ds
mov
movs
je
mov
and
fwait
cmp
lds
fwait
sub
es
aad
add
push
push
bnd
dec
xchg
movs
aas
jl
inc
mov
iret
test
mov
sub
lds
cmp
call
neg
ret
mov
xor
pusha
push
sub
nop
mov
push
popa
iret
sub
pop
add
(bad)
cmp
fs
adc
dec
jg
pop
in
mov
sub
sub
push
mov
in
ins
cmp
jb
push
aam
jg
mov
das
mov
into
inc
mov
xor
dec
cdq
in
shl
xchg
test
jg
dec
mov
imul
add
int3
das
sub
and
test
add
xchg
add
test
or
sahf
sub
jg
and
push
dec
fiadd
sub
push
mov
and
cmp
popa
popf
(bad)
mov
lock
or
pop
or
mov
fcom
xor
shl
loope
in
adc
sbb
lds
(bad)
in
aam
div
ss
mov
adc
add
les
les
ja
stos
pushf
jge
lods
adc
inc
and
and
(bad)
inc
xlat
fisubr
jbe
cwde
fdivp
jmp
cmp
xor
sub
sub
adc
jne
jnp
pop
sbb
movs
xor
sbb
std
cdq
or
hlt
push
push
cmp
sub
cmp
dec
popf
push
dec
aam
mov
sbb
or
call
inc
out
pop
mov
cwde
fs
or
and
xchg
mov
jg
sub
sbb
xor
add
imul
add
lea
mov
shl
(bad)
jmp
stos
nop
xor
test
jne
ret
pop
xchg
enter
fwait
cmps
jo
outs
cmp
dec
cmps
mov
xor
xor
push
sbb
and
stc
stos
xor
mov
data16
add
dec
loope
cmp
stos
fistp
cdq
jmp
fcom
xor
jbe
out
push
push
outs
rcl
fstp
sbb
xchg
cmps
dec
std
xchg
mov
dec
cdq
mov
pop
xor
mov
pop
ret
sbb
cmps
(bad)
jecxz
mov
push
fst
sbb
ja
sub
adc
scas
push
xor
int3
loop
add
ja
es
xor
xor
add
mov
dec
aas
or
(bad)
add
jb
shl
imul
popa
icebp
ficomp
xchg
pop
jmp
or
mov
dec
mov
shl
xchg
jns
shr
pop
pop
push
jae
cmp
push
faddp
inc
add
sbb
and
inc
cmp
test
dec
sbb
mov
call
push
dec
xor
fldenv
ds
pop
adc
enter
mov
ret
cmp
add
pop
xor
ror
in
mov
push
jp
mov
and
cmp
inc
sahf
pop
mov
mov
cs
sub
fwait
mov
(bad)
rol
xor
cdq
xor
fwait
sti
mov
loope
test
sub
cli
mov
sub
inc
sbb
jecxz
iret
mov
xor
jl
push
retf
jne
test
jge
je
clc
sub
push
push
dec
adc
jbe
(bad)
pop
inc
sbb
xchg
add
sbb
mov
jp
loopne
div
in
xor
iret
xchg
xchg
scas
sub
lds
mov
jg
jge
push
stos
jecxz
push
out
test
retf
or
ins
or
scas
mov
addr16
xchg
inc
jp
push
aaa
jmp
ja
dec
xchg
xlat
pop
out
popa
out
(bad)
mov
je
push
xchg
xchg
out
(bad)
(bad)
add
(bad)
int
nop
jmp
cdq
mov
xor
mov
push
cmps
xor
mov
iret
sbb
sbb
ror
or
xchg
popa
stc
mov
mov
test
pushf
imul
mov
and
sub
stos
push
mov
(bad)
dec
push
mov
pop
push
xchg
inc
das
ret
mov
shl
(bad)
jnp
and
cmps
js
ror
adc
pop
jge
pusha
or
scas
int
daa
std
pop
lea
ins
xor
out
fisub
mov
into
(bad)
sahf
rcr
mov
mov
mov
pop
xchg
push
xchg
jns
mov
data16
movs
shr
sbb
inc
dec
ret
jb
push
popf
test
xchg
test
(bad)
jecxz
int3
mov
retf
aas
aad
out
mov
neg
cmp
dec
cdq
(bad)
xchg
aaa
inc
mov
cli
xchg
sbb
(bad)
push
in
mov
int
and
aas
jmp
or
dec
popa
or
jp
mov
lahf
cmps
stos
xor
fisttp
stos
mov
mov
xchg
aad
push
sub
aam
pop
inc
test
test
jge
inc
mov
or
push
dec
pop
hlt
push
not
mov
pop
jle
or
cld
sbb
(bad)
in
xor
hlt
leave
test
xchg
ins
jne
inc
pop
push
inc
inc
adc
js
adc
mov
mov
cld
outs
fsubr
(bad)
xchg
sbb
mov
test
jle
sbb
(bad)
xchg
arpl
(bad)
imul
xchg
xor
push
dec
sti
cld
sub
bound
je
icebp
sub
scas
mov
shl
cmc
popf
test
pop
nop
inc
xor
xchg
rcl
jl
mov
test
sub
in
jnp
push
fwait
pop
mov
test
or
inc
xchg
fld
ss
rcl
jmp
bndldx
adc
sub
aas
nop
hlt
arpl
and
stos
(bad)
hlt
aas
mov
xor
add
into
addr16
fist
xchg
push
(bad)
fmul
retf
adc
fisttp
fdivr
inc
pop
jge
(bad)
(bad)
push
xchg
(bad)
push
xchg
shl
outs
fbstp
(bad)
adc
rcl
xchg
and
inc
jne
into
std
mov
enter
pop
push
sub
adc
xor
fld
push
xchg
test
pop
(bad)
fdiv
icebp
pop
mov
adc
jmp
jl
pop
nop
sbb
sbb
jle
mov
pop
sub
pop
test
dec
mov
adc
fild
repz
pop
pop
mov
adc
(bad)
adc
lods
nop
adc
ret
cmp
ret
pop
jo
test
dec
push
cmp
leave
push
in
pusha
dec
hlt
scas
retf
mov
sbb
fistp
ds
xchg
imul
stos
sbb
adc
adc
mov
pop
shl
and
mov
mov
sti
xchg
adc
lds
lods
mov
adc
add
jmp
(bad)
imul
xlat
(bad)
pop
cmp
daa
or
ret
jne
adc
jmp
dec
cld
lds
mov
fsubr
(bad)
mov
leave
jne
movs
ins
inc
mov
cmps
cmp
out
in
out
data16
lahf
xor
into
inc
popa
fsub
nop
daa
and
cmp
adc
call
mov
jns
sbb
and
mov
xor
xchg
xchg
dec
cmc
jae
clc
push
sub
jecxz
sbb
cwde
xor
jp
mov
adc
(bad)
into
stos
dec
mov
sbb
ja
push
stos
sub
xchg
fld1
mov
fsub
xchg
jo
mov
add
scas
mov
les
fnstenv
mov
out
push
out
jnp
jo
aaa
arpl
test
cmp
xor
pop
or
cmps
xor
repz
stos
cmps
pop
cmp
mov
jmp
adc
and
pop
into
sub
rol
jo
cwde
xchg
pushf
sub
or
test
cmp
mov
shr
fmul
jle
lods
push
push
push
out
dec
sub
int3
dec
sbb
sub
push
imul
mov
movs
ret
shr
or
std
stos
inc
xor
out
dec
daa
mov
mov
ins
push
(bad)
loop
add
inc
dec
mov
repnz
push
push
rcl
jp
stos
fwait
repz
xor
pop
push
(bad)
mov
outs
scas
jmp
mov
nop
inc
and
jle
(bad)
push
outs
jnp
pop
out
inc
scas
jnp
cmp
or
jnp
sub
cmp
test
sbb
sbb
cmp
dec
jl
cmc
in
popa
add
icebp
lods
pop
les
sub
jl
pop
xchg
aad
cmps
xchg
jb
cwde
ficomp
int
sahf
stos
cwde
popf
xor
xor
pushf
jo
cmps
test
popa
rol
add
iret
sub
loope
(bad)
es
xchg
mov
add
inc
push
and
fmulp
mov
ficom
jecxz
jle
je
mul
sti
push
adc
out
data16
in
mov
jno
pushf
leave
mov
mov
or
mov
push
jbe
aad
test
cmp
adc
xchg
pop
dec
imul
or
cli
jae
adc
retf
mov
dec
and
addr16
sbb
xor
xlat
int
xchg
mov
rol
cdq
retf
push
dec
mov
xchg
and
xor
add
dec
popa
hlt
mov
and
push
enterw
xchg
(bad)
mov
mov
jo
shl
sub
das
cmp
iret
jns
mov
pop
je
or
test
js
or
es
fwait
popa
jnp
cmps
add
dec
lods
test
lods
cmps
mov
sub
(bad)
push
(bad)
xor
sub
xlat
push
es
push
xchg
inc
jnp
std
(bad)
and
jnp
jae
add
in
jecxz
push
xor
sub
ret
jo
aas
push
mov
leave
push
xor
sbb
std
ret
push
outs
jl
or
(bad)
repnz
aam
std
and
add
or
aam
inc
int3
sbb
sub
rcl
fsub
rcl
or
dec
out
push
in
daa
inc
mov
and
sbb
sbb
test
xchg
jl
and
js
add
(bad)
cmp
cld
jbe
jae
mov
mov
ficom
cld
lock
xchg
push
mov
adc
push
push
pop
push
mov
jmp
icebp
imul
mov
mov
sahf
hlt
pushf
sbb
pusha
and
loopne
mov
pop
push
jae
(bad)
inc
mov
movs
and
mov
cmp
add
sbb
push
push
or
mov
sti
dec
test
mov
cmp
mov
push
jne
ror
ficomp
inc
add
inc
pusha
or
das
inc
(bad)
imul
mov
ficom
or
jbe
xchg
sub
stc
inc
call
in
jae
add
pop
xchg
xor
dec
xchg
jbe
test
lods
dec
(bad)
xor
jmp
push
push
inc
mov
jmp
mov
retf
aas
loopne
js
push
push
addr16
and
stos
aad
inc
retf
loop
lds
cmp
cmp
sub
adc
cwde
nop
add
ficom
aam
cmp
addr16
or
pop
cmp
push
iret
mov
add
inc
sub
pop
jo
bound
mov
adc
lds
cmp
xchg
adc
cmp
test
rcr
pop
lods
push
mov
ret
ss
xor
xchg
inc
cmp
mov
int3
mov
movs
dec
test
test
pop
xchg
std
jge
sub
sub
xchg
add
jno
jmp
mov
jae
dec
in
fldenv
ret
adc
adc
adc
pop
or
in
mov
dec
in
dec
idiv
xchg
inc
call
lods
aas
(bad)
or
retf
imul
sahf
mov
leave
scas
push
inc
mov
shr
popf
int3
pop
pop
mov
int
sub
addr16
lods
lods
ja
js
retf
stos
adc
ret
das
outs
not
inc
xchg
or
test
loopne
mov
sbb
aam
jg
cli
sbb
shr
adc
test
jg
jmp
cld
dec
xor
jg
pop
and
jmp
fild
out
push
pop
retf
xchg
pop
call
nop
arpl
sbb
push
adc
stc
xchg
push
(bad)
aas
mov
pop
jmp
push
mov
cmp
adc
jmp
mov
mov
in
lock
mov
ins
stos
dec
int3
jecxz
popa
mov
xchg
mov
xchg
jmp
cmc
mov
xlat
sbb
fcomp
jmp
mov
xor
rcl
(bad)
ficomp
ja
sub
jno
int
mov
xor
mov
cmps
jmp
mov
cmp
jmp
and
add
mov
mov
(bad)
jbe
lods
jp
mov
adc
xlat
out
dec
xchg
(bad)
leave
mov
imul
mov
inc
sub
(bad)
shl
es
mov
arpl
mov
sub
add
test
adc
cmps
xchg
jns
xchg
out
cmp
sub
sbb
jbe
pop
ffree
fist
loopne
movs
sbb
and
dec
fstp
inc
jo
push
inc
movntq
jbe
mov
out
xor
mov
pop
xor
mov
rcl
lahf
mov
mov
push
call
dec
inc
mov
sub
xchg
pusha
cmps
mov
jmp
jns
scas
push
add
ret
jge
aad
cmps
sahf
fnstenv
xchg
in
frstor
dec
jnp
pop
mov
cmp
jg
or
xchg
scas
inc
inc
inc
pop
test
jge
add
lods
mov
dec
lods
pop
mov
ss
mov
call
and
inc
cs
inc
sbb
mov
sbb
cwde
cs
rcr
outs
cmp
in
sub
clc
in
imul
jns
stos
out
cmps
imul
dec
mov
das
aaa
lock
aad
adc
aam
push
inc
jp
ins
sbb
dec
test
imul
(bad)
xchg
sub
in
adc
mov
in
ds
dec
push
imul
movs
mov
test
jne
and
inc
inc
jb
push
loopne
adc
popf
mov
iret
clc
add
fs
popf
mov
mov
pop
jg
mov
loope
fwait
imul
xchg
and
mov
test
out
jne
push
repnz
stos
jg
xchg
cwde
movs
stos
loopne
push
jmp
lea
and
or
dec
jg
enter
jae
sub
into
repnz
sahf
push
fs
and
jle
icebp
xor
(bad)
jmp
aas
(bad)
pop
jle
adc
fmul
xchg
add
ss
outs
cdq
push
je
inc
stos
cmp
push
movs
push
aam
out
imul
sbb
ins
je
sbb
ret
xor
mul
mov
adc
mov
sub
call
add
pop
mov
std
fdivrp
mov
pusha
mov
in
movs
jmp
cmps
mov
adc
jecxz
xchg
adc
xchg
mov
outs
pop
or
retf
popa
int3
iret
loopne
gs
sbb
xsaveopt
fld
mov
or
pop
add
out
pop
out
test
jno
dec
add
or
enter
clc
cmc
dec
jns
sbb
mov
and
jecxz
icebp
ins
and
cwde
mov
push
cmp
or
adc
push
(bad)
cld
adc
call
jo
(bad)
cmps
cld
js
cmp
in
shr
sub
out
ror
mov
lahf
and
sub
clc
shl
fwait
pop
pusha
imul
jl
add
jmp
fldenv
in
cmp
sbb
jno
inc
pop
cs
imul
adc
lahf
inc
mov
adc
ret
and
test
push
bound
inc
imul
jo
mov
lahf
popf
mov
loopne
sahf
push
(bad)
dec
mov
(bad)
adc
xchg
cmps
sahf
test
add
ins
aad
inc
adc
dec
aaa
in
push
aam
cmp
fisttp
gs
jb
jne
cld
out
enter
cmp
cmp
jne
mov
shr
jno
test
lock
mov
xchg
jmp
(bad)
pop
push
repz
call
jge
xor
pop
sbb
add
loop
outs
shr
inc
sar
adc
sti
adc
xlat
or
xor
inc
stos
cdq
movs
test
loope
scas
mov
das
cmc
pop
sub
add
xchg
sbb
cdq
addr16
dec
jno
pop
mov
out
dec
cmp
xlat
mov
clc
es
or
popa
xchg
(bad)
ret
or
lock
dec
jo
stos
dec
xchg
aad
test
pushf
xor
(bad)
mov
add
cmp
inc
xchg
retf
dec
mov
sub
jmp
jecxz
or
retf
sbb
and
in
out
pop
dec
es
jecxz
stc
aaa
mov
sbb
in
pop
mov
loop
div
push
mov
jg
cli
mov
adc
jae
mov
or
ror
jno
ins
movs
fs
lods
xchg
pusha
pop
sbb
and
cli
addr16
pushf
push
dec
lds
js
cmps
movs
pop
shr
add
add
retf
std
or
jns
sub
ficom
out
jnp
inc
daa
pop
out
pop
or
inc
(bad)
fs
in
les
dec
mov
jno
inc
movs
adc
jp
jle
sbb
inc
dec
test
jle
mov
mov
or
clc
outs
imul
pop
shl
mov
out
push
push
fwait
sub
in
stos
fidivr
sti
inc
sub
(bad)
or
(bad)
sub
aas
inc
repz
add
daa
out
rcr
push
(bad)
pop
test
ins
(bad)
mov
xor
push
sahf
cmp
lds
inc
enter
pop
pop
stc
jno
and
mov
fs
mov
add
push
and
xchg
pusha
pop
pop
mov
jg
les
dec
xor
jmp
sbb
xchg
sub
dec
push
popf
imul
push
enter
mov
mov
sbb
int
push
out
fistp
pop
add
movs
pop
add
scas
adc
and
xor
jle
xor
push
ja
mov
(bad)
inc
adc
repnz
inc
hlt
sbb
call
push
sub
jb
nop
or
imul
mov
retf
ror
xchg
(bad)
or
push
ror
ds
jg
adc
jge
aaa
push
test
pop
jmp
rcr
loop
fist
mov
pop
mov
sbb
mov
shl
pusha
jnp
mov
push
adc
or
pusha
test
rcr
dec
ss
add
hlt
(bad)
cld
aaa
push
(bad)
call
add
sub
pusha
pop
adc
mov
retf
sti
mov
retf
enter
dec
retf
or
dec
or
cmp
pop
or
jle
enter
add
mov
mov
and
jb
sti
rol
adc
aas
sub
xchg
imul
inc
sbb
pop
(bad)
es
int
nop
in
sub
enter
or
lahf
dec
fwait
adc
adc
or
mov
push
addr16
push
push
test
shr
inc
jbe
xor
jno
and
mov
or
inc
ja
fist
dec
mov
mov
sub
mov
cmp
xor
mov
outs
fisttp
loope
inc
fld
mov
xor
mov
cmp
(bad)
imul
mov
ds
sbb
out
shr
xor
inc
pusha
push
mov
pop
arpl
aam
sub
fistp
jnp
pop
xor
aam
fiadd
test
(bad)
or
fistp
xchg
xor
xchg
mov
cmps
jmp
and
fnsave
movs
loope
repnz
mov
into
inc
adc
pop
sar
cmc
not
(bad)
stos
fs
sub
enter
push
dec
inc
call
mov
jae
mov
fild
push
jns
shr
(bad)
shr
or
aam
ins
inc
and
sbb
(bad)
jmp
mov
imul
sbb
mov
aaa
addr16
cwde
call
loopne
pusha
cmp
jmp
mov
sti
cmp
jmp
cmps
pop
ret
xchg
ret
push
js
inc
gs
push
push
xor
or
lea
sub
fcomp
pop
into
inc
cmp
sub
sbb
and
into
inc
sub
inc
sub
sub
jle
jno
mov
adc
push
inc
leave
lock
lods
push
scas
cmc
and
cli
mov
ret
mov
and
pop
mov
cmp
outs
hlt
jp
clc
jne
sahf
mov
imul
int3
outs
jmp
mov
daa
aas
mov
loop
or
js
inc
sbb
xor
mov
sbb
jno
in
pop
mov
jl
ss
repz
mov
ins
and
mov
xchg
call
in
mov
cld
pop
out
leave
xchg
ds
out
jl
jmp
xlat
test
jmp
retf
push
call
pop
add
inc
popa
xchg
sub
mov
sahf
xor
mov
push
push
add
nop
(bad)
push
jle
inc
dec
dec
push
add
xchg
popf
out
mov
cmps
scas
or
jge
inc
jecxz
cmps
xor
addr16
lods
shl
retf
mov
pop
rol
dec
repnz
sbb
or
data16
jno
lds
mov
fs
and
xchg
stos
pop
ja
xchg
sub
jbe
sti
mov
in
push
gs
jae
pop
xor
shl
sub
jo
pop
dec
pop
sub
mov
addr16
bound
out
pop
jg
repz
and
aad
lea
cmc
lock
rcr
jns
imul
jno
das
cmp
ret
push
mov
icebp
cmps
adc
lahf
dec
mov
xor
xor
mov
mov
jne
into
fcomp
jb
fs
mov
xor
mov
or
mul
outs
cmp
xchg
pushf
mov
ret
pop
jne
fisubr
add
or
sub
loope
pop
adc
mov
icebp
add
test
shl
sub
push
mov
xor
or
sbb
lahf
mov
xor
pop
mov
cmp
adc
ds
arpl
pop
int
jo
jg
ds
es
push
dec
loop
fs
js
cdq
mov
stos
ja
loope
push
xchg
fcom
inc
mov
or
shr
ds
jne
pop
mov
jb
leave
loope
js
iret
pushf
(bad)
mov
scas
leave
mov
push
adc
xlat
call
dec
js
(bad)
pop
cdq
inc
or
sbb
fisub
cmps
adc
inc
jge
in
xchg
push
shl
loop
inc
jns
test
(bad)
mov
and
cmp
mov
inc
add
mov
imul
mov
add
xor
retf
jmp
inc
add
or
mov
dec
loopne
mov
jbe
push
mov
lock
pop
fcomp
push
dec
mov
sub
sub
dec
mov
jnp
push
inc
lods
scas
xor
mov
outs
test
xchg
push
ror
nop
js
fs
cmp
popa
sbb
and
mov
data16
push
in
add
jno
jae
dec
in
adc
mov
and
mov
push
pusha
pop
sbb
out
push
(bad)
jns
scas
cmp
mul
(bad)
mov
xchg
sub
out
mov
push
inc
xor
int3
and
stos
fstp
or
movs
push
ins
test
mov
xor
imul
stos
out
adc
jmp
sub
adc
and
xchg
cmp
mov
fs
inc
cmps
xchg
push
into
jle
sub
jmp
out
call
retf
pop
xlat
out
out
daa
xor
lock
push
dec
push
or
ror
bound
(bad)
cmp
xor
addr16
rcr
sub
out
dec
lds
scas
mov
cmc
mov
das
mul
jge
cs
mov
add
cmp
shl
popa
adc
inc
daa
in
mov
loop
loopne
les
cmp
aad
stc
push
ss
es
cld
std
cmp
push
sub
xchg
mov
add
mov
sbb
mov
sbb
pusha
push
out
jmp
stos
enter
fmul
pusha
aaa
jns
sti
cld
mov
imul
inc
pop
(bad)
(bad)
and
inc
jle
inc
cs
iret
jp
mov
shl
rol
add
or
dec
mov
push
lds
and
mov
pop
(bad)
pop
xchg
push
outs
dec
aas
dec
xchg
mov
add
icebp
pop
mov
stos
hlt
dec
lds
sub
popf
dec
push
pop
mov
add
push
pop
and
and
fistp
cmp
(bad)
test
scas
lea
jns
mov
xor
cli
cmova
dec
xchg
mov
out
xchg
pop
lds
loope
(bad)
mov
test
fs
mov
or
pop
loope
dec
in
movs
out
and
fisubr
cdq
leave
aaa
adc
dec
mov
ds
xchg
(bad)
popf
pop
pop
jmp
push
jge
das
in
mov
jo
lea
inc
loope
dec
add
xor
mov
or
sbb
push
sbb
daa
jmp
mov
adc
or
or
into
(bad)
mov
mov
ret
pushf
fstp
dec
inc
and
je
jle
arpl
test
push
test
adc
sar
push
add
sar
fsub
popf
aaa
sbb
pop
xchg
call
jle
fwait
push
repnz
push
icebp
push
jle
shr
mov
shr
push
in
div
push
mov
jmp
(bad)
cmp
dec
movs
mov
std
shl
sbb
cld
mov
add
sub
xchg
push
repz
push
xchg
pusha
dec
sub
mov
mov
popf
enter
add
inc
dec
out
mov
mov
(bad)
cmc
mov
push
(bad)
lods
jmp
jbe
xchg
addr16
inc
mov
xchg
mov
(bad)
and
rcl
shl
out
cmc
cmp
mov
mov
shl
(bad)
xor
adc
push
push
jb
jle
(bad)
cmp
jne
jb
pop
pop
hlt
call
pop
pop
inc
fwait
mov
xlat
fcomp
outs
gs
fld
xor
stc
popf
inc
xchg
add
pop
cmp
sub
pop
pop
cmp
loope
mov
leave
sub
pop
stos
inc
adc
xchg
mov
fstp
inc
ja
sub
lods
das
iret
jno
or
and
fsubr
mov
ror
add
rcl
fidiv
pop
add
and
dec
jge
mov
add
jmp
lods
das
adc
test
push
pop
sub
rcr
cli
mov
or
dec
int
fdiv
mov
mov
and
js
inc
sbb
dec
dec
mov
cmps
adc
adc
aad
mov
push
loopne
add
mov
add
jge
inc
push
pop
inc
dec
cs
aam
cs
inc
in
mov
popf
mov
sub
aam
and
ins
sub
jo
shr
or
in
add
mov
mov
test
in
mov
gs
mov
push
adc
cli
shr
fbstp
xor
mov
push
(bad)
xchg
arpl
addr16
add
clc
pop
and
loop
addr16
iret
jp
mov
mov
aas
rol
ficomp
jg
push
enter
inc
icebp
push
xchg
and
test
mov
and
mov
outs
xlat
push
movhps
imul
push
jmp
je
or
mov
cmps
adc
sub
push
mov
loopne
mov
test
cmps
mov
fsubr
lock
mov
sahf
jnp
ret
cmps
cmp
mov
push
sub
aas
pushf
sbb
jg
rcr
push
sahf
ss
jge
aad
ins
jg
not
(bad)
dec
popa
sbb
xor
jmp
lods
sti
add
push
jmp
dec
sbb
mov
adc
mov
mov
(bad)
aam
or
out
retf
sbb
jmp
push
and
jns
hlt
xor
sbb
inc
inc
ror
mov
sub
mov
fwait
movs
test
mov
gs
push
mov
add
push
jmp
sbb
mov
cmps
add
cli
std
xor
xchg
mov
outs
loop
cmp
stos
in
imul
fld
adc
jmp
outs
icebp
mov
movs
es
sub
jnp
cmps
int
ins
ds
cmps
test
movs
in
call
mov
retf
push
call
mov
cmps
rol
sbb
repz
loop
and
inc
daa
test
lock
mov
iret
pop
into
rcl
mov
and
xor
mov
ins
and
shrd
and
adc
dec
out
int3
lds
aas
inc
sbb
in
mov
sbb
(bad)
arpl
scas
or
inc
xchg
sbb
jno
adc
push
dec
dec
mov
jmp
stc
shl
dec
cmp
mov
das
inc
outs
pop
dec
sar
sub
icebp
imul
xchg
sub
xchg
inc
mov
dec
mov
bswap
in
stos
pop
mov
adc
sub
cmp
push
lahf
inc
push
cs
sub
mov
cdq
hlt
fstp
ins
js
bound
and
(bad)
repz
gs
or
push
mov
mov
stos
loopne
xor
in
adc
or
mov
or
pushf
dec
(bad)
inc
dec
pop
sbb
adc
jecxz
dec
repz
stc
fdiv
inc
sbb
pop
inc
loopne
sbb
jb
std
xor
jnp
bnd
xor
jg
stc
sub
adc
sub
mov
jne
cmp
outs
or
retf
shl
sub
aas
push
(bad)
aad
iret
inc
dec
ror
cmp
pop
stc
lds
mov
into
cmp
mov
add
jle
add
not
mov
push
mov
xchg
xchg
fdiv
and
(bad)
dec
pop
or
test
std
adc
and
shl
(bad)
nop
ins
mov
adc
fidiv
imul
out
xor
dec
loop
mov
pop
imul
stc
(bad)
loopne
xchg
pop
jmp
cmps
inc
mov
call
jb
into
adc
push
jnp
cld
bound
cmc
and
shr
inc
jge
adc
imul
out
sub
mov
call
push
je
pop
or
inc
out
pop
push
sti
mov
movs
xor
outs
dec
mov
cmps
push
pop
xchg
int3
(bad)
loopne
push
lock
fiadd
pop
xchg
aas
pop
das
jo
fst
xchg
(bad)
fild
ret
retf
and
arpl
nop
loop
retf
xlat
retf
push
inc
jo
sbb
into
in
dec
add
in
sub
cdq
mov
lods
jb
pop
adc
fs
shr
mov
scas
push
push
imul
add
lea
inc
and
or
(bad)
lock
lock
nop
mov
inc
jmp
daa
mov
push
add
jmp
jge
mov
jnp
add
stc
ss
inc
xchg
jg
push
les
aam
mov
push
adc
cwde
jb
aad
dec
(bad)
jnp
mov
sub
scas
out
push
das
rol
stos
imul
cwde
mov
(bad)
shl
popf
cmps
push
(bad)
popa
hlt
(bad)
jo
nop
mul
retf
and
test
imul
pusha
int
add
push
mov
in
bound
pop
dec
lods
movs
shl
sti
push
in
xor
iret
jo
jp
loopne
cs
sub
sbb
mov
add
xor
dec
jg
icebp
lods
rol
dec
ret
repnz
pop
mov
inc
add
and
in
pop
adc
pop
jb
pop
sub
test
aaa
or
xchg
mov
cmp
jns
jns
mov
push
int
call
push
rol
sub
jle
aad
ret
in
mov
cwde
mov
or
mov
xchg
mov
(bad)
loope
cmp
ins
cmp
(bad)
mov
add
(bad)
sub
push
fistp
adc
das
pop
mov
push
cmp
int3
mov
dec
test
cmp
clc
int3
inc
add
(bad)
mov
mov
xchg
mov
sub
mov
mov
adc
popf
push
jecxz
pop
scas
dec
or
aad
mov
imul
cmp
mov
add
pop
mov
jo
inc
je
sub
addr16
shl
dec
or
arpl
pushf
clc
or
call
repz
test
mov
in
mov
(bad)
cmp
fstp
jg
cmp
mov
cmps
push
mov
mov
sub
push
in
popf
arpl
ror
iret
jbe
sbb
test
lods
retf
jmp
push
dec
movs
xchg
vsubss
inc
xchg
push
pusha
and
test
test
and
repz
fstp
test
and
movd
jge
repnz
data16
dec
mov
dec
enter
adc
push
shl
fs
cmps
sbb
sub
pop
push
je
inc
jge
je
push
dec
bnd
cwde
or
imul
stos
pushf
and
loop
jo
jg
adc
pop
outs
dec
cmp
xchg
or
call
nop
in
sahf
shr
aas
or
out
scas
add
btc
and
daa
test
sbb
fnstcw
mov
inc
pop
out
jmp
cmp
adc
adc
push
mov
movs
push
cmps
xchg
mov
xchg
(bad)
maskmovq
idiv
js
cdq
push
add
push
mov
jg
movs
xor
jmp
push
mov
lods
aaa
pusha
ins
dec
jle
mov
mov
rol
sbb
aam
icebp
xchg
fcomi
fs
retf
sti
xor
sub
popf
cmp
push
ss
clc
cmps
outs
std
xchg
aas
dec
jecxz
movs
mov
push
add
retf
jo
jmp
sar
or
pop
push
aad
inc
leave
mov
sub
mov
sbb
repnz
pop
call
and
jne
cmp
mov
xlat
pop
stos
xor
inc
cmp
or
xor
sti
xchg
jbe
dec
sub
add
jb
pop
int
in
pop
add
ja
add
add
inc
mov
das
je
add
in
jecxz
pop
cmp
fbstp
je
nop
sbb
or
lods
sbb
aad
out
(bad)
cli
jle
xor
jne
lock
add
or
sbb
retf
cdq
repz
mov
aad
mov
adc
push
mov
aaa
rcr
rol
inc
icebp
mov
jbe
add
jbe
call
stc
into
mov
(bad)
cmp
add
retf
jg
sub
popf
hlt
mov
pop
jnp
xchg
bound
cmp
retf
or
imul
sub
adc
outs
call
sbb
adc
(bad)
cmps
or
and
mov
pop
xor
das
mov
lea
cmps
xchg
popf
ss
xchg
mul
xor
xchg
aam
add
adc
sbb
lds
mov
cmc
sub
adc
pop
out
(bad)
xor
mov
jno
add
imul
or
fst
dec
sbb
fwait
dec
imul
and
ins
rol
add
call
shl
int3
jmp
inc
push
int
inc
jle
arpl
mov
leave
fs
mov
adc
mov
push
cli
jo
jnp
inc
mov
mov
sub
mov
mov
add
and
adc
push
jne
in
in
cmc
pop
push
lods
and
rol
sbb
add
icebp
rcr
jp
popf
xchg
test
mov
cwde
call
retf
mov
adc
retf
cmp
test
xchg
das
test
xchg
pop
jne
sbb
dec
mov
retf
test
mov
outs
lock
cld
not
repnz
jmp
or
int3
fucom
ret
push
xchg
mov
push
inc
sbb
test
mov
mov
les
push
dec
pop
sub
fmulp
mov
ja
push
leave
and
adc
mov
arpl
sar
test
movs
adc
das
addr16
mov
adc
fmul
inc
dec
mov
xor
mov
mov
je
jmp
pop
repz
push
jb
inc
push
test
ins
mov
sub
adc
inc
xchg
sbb
xor
sbb
jl
push
pushf
scas
and
mov
jo
mov
and
outs
(bad)
aaa
jnp
adc
fsub
pop
xlat
in
outs
popa
adc
aam
shl
arpl
xor
es
xor
jle
fsub
xchg
and
cs
cmp
jae
push
push
gs
mov
fwait
popa
bnd
xchg
cmps
sbb
cmp
mov
adc
sbb
mov
pop
mov
mov
cmp
cs
add
(bad)
mov
inc
stc
push
out
repnz
or
mov
in
sub
das
bound
test
bound
and
or
xor
push
movs
test
pop
aam
jbe
call
repz
outs
dec
repz
sbb
mov
jmp
popf
cmp
popa
xor
xor
sbb
xchg
push
jae
xchg
and
stos
xchg
add
pushf
cmp
pop
test
xchg
cmp
or
mov
les
imul
push
xchg
xchg
xor
dec
xchg
shr
jl
jne
xchg
mov
fadd
pextrw
sbb
cmp
cmp
sbb
mov
mov
adc
iret
(bad)
fmul
or
lahf
dec
add
jp
call
scas
add
stos
cmp
jecxz
mov
dec
test
stos
inc
inc
push
cmp
pop
mov
test
clc
mov
pop
jns
shr
pop
lods
push
mov
lock
add
and
mov
xor
add
int3
sbb
inc
xor
test
aas
out
and
xor
pop
adc
jb
mov
cld
push
stos
mov
pop
stc
cmp
jnp
gs
out
xor
test
mov
test
gs
stos
pop
lea
loop
inc
(bad)
std
sbb
neg
and
cmp
push
fsub
mov
pop
outs
ret
xchg
jge
les
lock
xchg
or
std
ins
fistp
cli
out
js
push
lods
mov
push
leave
mov
sbb
ja
pop
adc
ret
inc
sub
ins
std
xchg
mov
repnz
and
mov
push
lods
push
xchg
xchg
enter
xor
outs
sbb
aad
adc
not
sub
out
push
pop
mov
jae
pop
fiadd
xchg
hlt
mov
call
jb
push
lds
popa
cmc
mov
(bad)
push
dec
inc
pop
(bad)
psllq
dec
pop
out
pop
or
sbb
lods
clc
mov
inc
mov
inc
pop
and
shl
xchg
inc
test
into
(bad)
hlt
movs
cmp
clc
dec
lods
xchg
leave
test
xor
aas
ja
leave
fnstsw
les
and
lods
add
daa
cmc
jno
cld
aaa
cwde
xlat
push
jle
mov
xor
cmove
lock
xchg
inc
push
mov
push
jb
push
test
push
enter
mov
fld
inc
push
inc
retf
mov
mov
stos
xor
mov
fimul
mov
add
mov
mov
mov
loopne
std
popf
fcom
cmps
enter
ret
sub
mov
mov
push
mov
ret
dec
ds
(bad)
gs
inc
stc
sub
adc
call
pop
sbb
lock
xchg
or
stos
mov
aaa
jbe
sar
xor
dec
rol
sub
cdq
cmps
retf
jne
movntq
fistp
nop
push
or
ins
mov
cmps
mov
das
int3
push
lahf
sub
mov
sub
int
cmp
mov
aas
and
lock
mov
mov
dec
fstp
add
mov
cmp
pop
sub
cmp
int3
addr16
jne
or
iret
or
sub
sbb
mov
stc
xor
retf
pop
inc
or
cmp
fstp
in
xor
scas
cdq
imul
jmp
jle
cmp
mov
xchg
sub
stos
adc
inc
pop
pushf
mov
and
sahf
bnd
and
es
cwde
sahf
mov
ins
jae
inc
add
mov
push
adc
nop
stos
push
adc
or
mov
pushf
and
frstor
fst
hlt
mov
mov
add
push
add
ficom
jp
ret
jmp
test
cmp
dec
dec
xchg
push
mov
add
xchg
in
ds
add
movs
dec
mov
push
jnp
pop
xor
movs
inc
cmc
call
fadd
jb
lea
push
or
call
adc
adc
int3
fwait
push
movs
sub
repnz
pop
test
lods
pop
fist
lea
jle
repz
add
pop
xor
aaa
fnstcw
pushf
and
jmp
js
out
in
(bad)
pop
ret
xchg
jmp
not
mov
pop
mov
sbb
aam
(bad)
loop
cmp
jne
mov
into
arpl
mov
mov
inc
repnz
in
push
mov
stos
xchg
mov
bound
imul
scas
inc
xchg
or
mul
push
fwait
xlat
jae
mov
shl
ror
cmp
pop
jmp
ret
fcmovu
xchg
rcr
jo
int3
mov
cmp
outs
rcl
add
dec
push
cmp
push
inc
outs
leave
xchg
das
out
jb
jmp
call
mov
xor
in
aam
sahf
inc
inc
cmp
add
retf
or
push
cli
stc
push
cmps
(bad)
mov
call
outs
jne
inc
inc
and
clc
dec
jns
push
sub
jne
ja
loopne
movs
fiadd
or
xor
movs
ret
dec
sub
xlat
fbld
out
pop
test
jo
icebp
dec
ror
out
mov
push
adc
xor
lods
dec
xchg
daa
mov
cmps
pop
mov
imul
in
and
jbe
xor
test
jmp
clc
pop
sbb
xor
xchg
jnp
(bad)
mov
mov
pop
je
lea
sub
jg
or
imul
jge
sti
fs
pop
out
add
icebp
nop
add
mov
mov
add
or
jb
int3
xor
clc
push
adc
add
prefetch
int
dec
enter
ins
push
dec
adc
inc
imul
xor
or
xchg
mov
(bad)
cli
mov
dec
jge
xchg
xchg
mov
cmp
adc
outs
(bad)
xor
mov
ins
ins
cdq
mov
push
mov
imul
rcr
sbb
fwait
cmps
adc
(bad)
push
and
xchg
mov
cmp
icebp
pop
push
fcomp
fidiv
add
or
mov
dec
add
mov
inc
xchg
or
sbb
jb
hlt
jp
enter
aas
jne
ret
outs
mov
mov
nop
adc
iret
loopne
lahf
jmp
loop
call
pop
push
mov
cwde
mov
or
ds
sbb
jg
jo
sbb
std
fisub
shl
mov
xchg
fwait
out
popf
xor
inc
mov
jno
pusha
sub
pop
sub
mov
xor
movs
sub
mov
mov
aam
push
lods
sub
mov
(bad)
cld
jne
push
lahf
sub
int3
sub
mov
(bad)
std
cmp
or
(bad)
bound
xchg
pop
pop
or
outs
mov
iret
inc
sub
fmul
inc
imul
out
repz
pop
outs
(bad)
cmp
cmp
outs
ds
shl
xor
push
imul
jo
xchg
dec
stos
and
mov
loop
into
push
out
lock
ror
test
js
arpl
push
pusha
xor
test
push
loop
stc
mov
xor
xchg
push
gs
lahf
(bad)
and
mov
mov
adc
dec
pop
lds
shr
das
fisttp
ins
loope
pop
ja
loop
xchg
stos
loope
xor
xor
jmp
jp
out
mov
hlt
push
rcl
adc
sbb
xor
sub
dec
push
jl
cmp
push
lods
pushf
mov
test
mov
out
retf
cmp
sbb
or
dec
sub
push
aam
dec
mov
ss
and
fsub
rol
rcl
jns
jo
lock
lods
adc
mov
push
xor
mov
stos
fadd
push
dec
fisub
gs
xchg
stos
cmp
retf
in
test
cs
(bad)
fs
loopne
scas
or
jns
mov
or
jp
adc
out
adc
fmul
repnz
and
movs
(bad)
lahf
cld
pop
sbb
sub
sub
add
jl
fmul
rcr
mov
and
in
arpl
jb
enter
mov
mov
dec
xchg
adc
cmc
jge
pop
loope
lds
(bad)
je
or
stc
sbb
ins
lahf
dec
in
repnz
daa
inc
ins
mov
mov
pop
fcom
ss
daa
mov
adc
mov
daa
cmps
leave
sub
popa
add
lea
pop
cmp
ins
out
dec
mov
cmp
mov
cs
sub
(bad)
in
add
cmps
xchg
dec
scas
sub
mov
sbb
ficomp
pusha
aaa
jg
mov
pop
int3
dec
sub
push
shr
fadd
dec
xor
imul
or
fadd
cmp
mov
xchg
push
sub
inc
jne
ins
retf
push
lock
test
cmovne
ret
dec
in
in
shr
dec
dec
pusha
outs
sub
rcl
push
sbb
fwait
sbb
push
sub
jecxz
or
or
sbb
int
ror
add
cmp
xor
shl
arpl
movs
jns
xchg
adc
xor
popf
pop
inc
sbb
inc
shr
adc
ret
in
jle
dec
ja
or
test
mov
push
jo
inc
add
fistp
enter
cli
and
push
leave
fcomp
inc
mov
mov
cs
xchg
cmp
and
in
jns
movs
neg
aad
popa
push
cmp
daa
jb
sbb
imul
sbb
loopne
dec
xor
into
mov
out
ret
xchg
dec
mov
push
pop
int3
add
(bad)
adc
dec
mov
test
out
mov
xchg
loop
test
sub
js
fisub
dec
fidivr
fcom
push
pop
add
mov
mov
or
adc
sub
cmc
sub
repz
push
push
aad
mov
add
call
and
jo
push
je
push
jae
rol
lock
or
cmps
and
in
scas
out
dec
call
sbb
icebp
pusha
ret
sbb
jns
mov
adc
test
fidivr
fstp
call
or
inc
test
sbb
dec
mov
pusha
dec
push
mov
mov
call
dec
inc
fisubr
sub
mov
sub
pop
sub
dec
ins
dec
pusha
int
cmc
inc
cmp
icebp
push
aas
lods
push
or
cs
loop
jae
add
jo
adc
fist
sub
push
xor
mov
movs
jmp
push
fnstcw
xlat
nop
push
movs
rcr
das
cmps
jbe
dec
adc
addr16
imul
icebp
sbb
daa
add
mov
push
lods
mov
idiv
outs
test
jl
fist
xchg
xchg
loop
dec
jbe
(bad)
ins
and
cmps
lds
es
xchg
mov
mov
push
dec
fwait
or
bound
push
ret
aas
jg
cwde
in
or
mov
aaa
sub
es
inc
cmps
mov
lahf
dec
jo
(bad)
cmp
pop
js
xlat
aaa
mov
pop
xor
sbb
cmps
ins
pop
pop
in
arpl
je
sub
cmps
fisub
and
retf
cmp
shl
popa
push
xor
call
nop
(bad)
inc
fidiv
jbe
pop
lahf
mov
pop
stos
ins
(bad)
(bad)
pop
add
mov
mov
dec
xchg
xchg
add
inc
cmp
in
out
in
ret
sub
lods
lods
test
test
ja
hlt
jae
sbb
push
jmp
emms
jne
call
mov
mov
test
scas
adc
leave
arpl
mov
fsubr
pop
dec
repnz
and
jnp
loope
jns
xchg
mov
leave
mov
ret
mov
outs
push
add
loope
movs
cmp
jo
mov
jge
(bad)
mov
cmp
mov
xchg
and
lock
sub
sar
jae
fmul
loop
jmp
jp
movs
hlt
sub
into
sbb
iret
imul
dec
pop
mov
les
push
mov
push
adc
shl
popa
push
mov
cmp
imul
and
push
adc
mov
dec
inc
ds
scas
mov
mov
ss
push
aam
jecxz
cmp
jl
loop
out
xlat
enter
xchg
xchg
sti
pop
cli
rcr
push
xor
mov
aaa
call
jno
scas
les
cli
aaa
cli
dec
pop
ins
add
cdq
fwait
outs
dec
add
cmp
popa
push
in
lods
mov
in
dec
std
sbb
add
jne
rcl
pop
mov
mov
push
mov
xchg
fsubp
imul
jne
(bad)
jp
xor
mov
addr16
(bad)
shl
mov
pop
xor
adc
inc
dec
outs
stos
dec
mov
in
add
jmp
ss
fwait
mov
nop
stos
mov
fstp
mov
fcom
cdq
(bad)
arpl
(bad)
in
cmp
or
retf
jo
enter
pop
test
jnp
and
cmp
pusha
xchg
cmp
jne
dec
fadd
push
adc
mov
enter
adc
nop
sbb
or
sub
cmp
inc
mov
pop
jmp
iret
pop
cld
outs
pusha
popf
cwde
mov
mov
adc
push
mov
dec
push
mov
fidiv
sti
ret
enter
cmc
fwait
sub
fadd
dec
mov
jge
and
cs
ja
pop
sbb
jmp
(bad)
seto
pusha
pop
retf
ror
popf
pop
sbb
sti
(bad)
(bad)
in
cmp
ja
pop
loopne
aam
daa
sub
movs
pop
neg
push
push
mov
in
je
js
push
loopne
sub
jmp
addr16
fistp
(bad)
mov
xor
jg
push
cmc
(bad)
fwait
aas
adc
cmps
cmps
mov
jmp
xchg
xor
dec
xor
push
popa
imul
pop
std
adc
cli
xchg
scas
mov
push
(bad)
pop
out
hlt
cmps
icebp
and
or
sub
bound
and
and
pop
jge
inc
xlat
cmps
nop
dec
xor
loop
xchg
push
fisubr
in
push
mov
jae
in
dec
push
rcr
mov
in
xchg
mov
stos
or
stos
fsub
adc
shr
cmp
cdq
(bad)
lods
xchg
sub
mov
mov
xchg
mov
ret
xchg
cmps
lock
inc
sar
and
repnz
push
sub
push
stc
enter
cmc
and
or
rcl
mov
jns
xchg
fs
xor
loope
push
popf
(bad)
out
push
mov
pop
mov
mov
push
push
and
sub
mov
or
push
mov
jns
xchg
aas
call
push
gs
arpl
ins
cli
ret
cmp
out
es
dec
cwde
push
dec
dec
pop
cdq
out
inc
sub
pushf
cld
jae
out
repz
addr16
fwait
xchg
cmp
(bad)
outs
push
sub
add
(bad)
dec
adc
test
lods
call
shr
adc
cmp
pop
lods
retf
repnz
push
stos
cmc
into
push
loop
dec
mov
mov
add
test
dec
and
cli
cmps
lock
inc
(bad)
and
pop
dec
into
repnz
jl
xchg
and
push
sbb
push
es
mov
mov
fistp
pop
mov
ds
adc
inc
sbb
cmp
out
xor
cmp
sbb
(bad)
retf
mov
dec
mov
ret
mov
pop
sbb
sar
and
mov
and
ret
jno
xchg
ret
push
popa
icebp
pop
test
cmp
icebp
out
sbb
ins
dec
sbb
leave
mov
imul
push
test
sbb
push
dec
fidiv
lods
push
sub
pop
shl
dec
adc
inc
bound
jne
push
push
das
ja
mov
dec
sbb
lock
cmps
bound
jns
dec
mov
sbb
mov
das
adc
sbb
scas
adc
mov
xchg
iret
mov
ss
in
call
iret
mov
lods
scas
dec
xlat
rcr
in
jno
les
(bad)
push
mov
cmp
jge
sub
js
div
ins
pop
add
movs
dec
inc
mov
aaa
test
xchg
cdq
aaa
int3
bound
cli
retf
sbb
push
mov
jns
lods
push
lds
push
or
neg
mov
je
cmp
add
mov
xor
ret
jnp
mov
or
xor
out
jo
cmp
add
adc
imul
mov
shl
push
add
fimul
in
(bad)
cld
cmp
push
aam
(bad)
sahf
dec
call
jmp
call
loopne
pop
or
sub
fstp
sbb
sub
sub
dec
sub
cmp
test
mov
mov
call
pushf
mov
jnp
movs
pop
cli
std
cwde
cmps
fbld
jg
sar
push
mov
out
repnz
dec
dec
mov
jle
pop
xor
cmps
bnd
ret
inc
dec
leave
call
ins
retf
adc
cmps
mov
cmp
mov
ret
jae
jle
or
pusha
mov
test
aam
xor
cs
mov
stc
xchg
imul
dec
fisubr
pop
sbb
cmp
rol
push
outs
cmc
repz
repnz
cli
aas
(bad)
scas
idiv
cmp
jl
sub
shl
cmp
int3
call
push
mov
ss
xor
adc
mov
adc
adc
shl
retf
mov
mov
adc
ror
(bad)
mov
lods
std
mov
inc
sbb
ins
sbb
mov
ss
adc
mov
movs
push
add
mov
dec
push
dec
movs
stc
data16
jg
daa
mov
fsub
sub
inc
mov
jmp
movs
mov
loopne
loopne
fisttp
int3
mov
sbb
mov
mov
mov
fisub
push
out
mov
aam
out
pop
adc
jns
and
and
dec
inc
call
dec
cdq
fldcw
mov
jnp
xchg
repnz
jb
adc
out
push
and
cmps
(bad)
shl
rcl
lahf
jmp
dec
in
out
and
mov
fcmove
mov
retf
xor
pop
mov
push
xchg
adc
mov
ins
scas
adc
inc
sbb
push
dec
jmp
les
jne
call
adc
sub
xchg
mov
push
add
pop
jbe
xor
sub
cdq
mov
call
adc
xchg
push
out
call
dec
mov
ficomp
cwde
sbb
cmp
mov
and
das
mov
sub
fwait
scas
adc
lahf
fidiv
int
mov
pop
jns
aad
sbb
pop
mov
mov
pop
add
out
mov
fwait
dec
repz
adc
repz
sbb
test
ins
aam
rol
in
mov
adc
cld
adc
jge
ss
out
int
inc
test
pop
ret
ss
out
push
sbb
xchg
stc
xor
(bad)
ja
jne
addr16
cmps
dec
pop
or
push
jg
outs
pop
outs
fimul
(bad)
inc
and
dec
(bad)
dec
push
xchg
shl
push
popa
cs
xor
xor
xlat
add
push
in
push
cmp
fcomi
sub
mov
mov
inc
sbb
pop
dec
(bad)
jg
repnz
pop
xchg
inc
int3
xchg
movs
mov
mul
and
push
sti
mov
ss
xchg
xor
out
mov
push
sub
scas
retf
out
das
test
cmp
adc
pop
retf
test
sub
(bad)
mov
ret
mov
xchg
mov
sbb
pop
popf
xor
lock
jbe
popa
push
cs
cmc
pop
rcr
jl
das
dec
push
data16
jl
mov
or
les
push
leave
add
xchg
or
push
pop
xor
test
dec
int3
ret
mov
pop
lods
xchg
aam
jmp
cld
pop
xchg
mov
call
aas
sub
into
(bad)
mov
and
dec
mov
pop
(bad)
shl
rol
idiv
fist
push
movs
daa
push
repz
mov
loop
fcmovbe
mov
ja
push
pop
ins
jp
adc
or
mov
test
inc
out
hlt
loope
fimul
iret
in
cmps
ret
xor
sahf
add
lds
mov
leave
add
fisubr
pop
(bad)
mov
enter
dec
popa
fwait
xchg
mov
ret
or
js
call
iret
add
jne
call
enter
pop
and
or
sbb
xor
out
pusha
loopne
pop
jle
iret
stos
mov
xchg
clc
ficom
pop
pop
(bad)
test
inc
pop
jno
sub
add
cld
mov
loopne
idiv
dec
sub
jne
sbb
es
pushf
movs
sbb
inc
cmp
fimul
test
xchg
inc
fadd
mov
dec
mov
inc
push
dec
std
retf
jl
push
in
or
mov
jge
inc
test
add
dec
sub
add
adc
daa
ficomp
add
shr
or
ds
mov
and
sub
sub
push
lock
cwde
xchg
imul
div
pop
mov
outs
sbb
out
and
mov
mov
jl
les
popf
mov
jp
(bad)
xor
pop
pusha
push
outs
leave
jle
adc
scas
pop
lock
retf
cmp
jns
cmp
arpl
fisttp
sbb
xor
mov
push
ins
cmp
jg
int3
xor
push
xchg
cld
dec
jnp
fist
sbb
and
mov
icebp
mov
test
or
daa
aaa
dec
outs
repnz
daa
repz
mov
mov
jp
aas
aaa
cmp
add
in
lds
mov
in
in
scas
test
xor
out
mov
in
and
dec
(bad)
cld
jno
repz
adc
pop
sbb
xchg
fs
jle
hlt
cmps
int3
cmp
sbb
inc
ins
pop
jecxz
and
ror
daa
cmp
cmp
dec
jg
mov
cwde
(bad)
sbb
(bad)
mul
std
push
cs
aam
pushf
es
in
cmp
ret
pushf
fild
add
or
imul
xlat
add
gs
cmc
addr16
sahf
ins
mov
xor
xor
xor
pop
xchg
ins
pop
inc
leave
xchg
fsubr
sub
xchg
retf
(bad)
aas
or
ror
loop
push
inc
xchg
or
out
test
mov
imul
xchg
add
mov
fcom
mov
dec
mov
xchg
jnp
pop
and
into
mov
add
xor
and
cmp
mov
xchg
push
stos
jmp
(bad)
cld
pop
xchg
in
pop
repz
mul
repz
js
outs
adc
sbb
ins
fistp
push
retf
imul
jnp
or
pop
jbe
int
test
xor
retf
aas
cmpps
mov
clc
call
inc
fidivr
outs
jns
retf
icebp
jge
cld
retf
retf
pop
inc
adc
js
repnz
pop
test
ficom
int3
dec
in
lea
retf
(bad)
xchg
ficom
mov
stos
push
mov
test
daa
int3
mov
(bad)
fwait
inc
fwait
jo
mov
in
imul
dec
mov
call
jns
(bad)
retf
ja
int3
push
into
mov
xor
mov
lock
mov
add
or
adc
adc
push
xlat
xchg
push
lea
aaa
(bad)
cmc
jp
call
test
popf
mov
into
pop
sub
jne
dec
es
sti
add
inc
xchg
mov
aam
inc
xchg
sub
mov
je
mov
mov
mov
lods
in
loopne
(bad)
ret
push
cmp
icebp
js
dec
push
add
leave
adc
xchg
xor
pop
sahf
mov
je
loope
cwde
cmp
add
jp
icebp
mov
mov
fs
arpl
clc
fldcw
fidiv
repnz
int3
cmp
(bad)
pop
mov
jo
arpl
popf
add
aad
push
dec
fs
xchg
pop
(bad)
mov
popa
out
pop
jb
out
xchg
lea
and
loope
sub
stos
cs
popa
movs
test
call
add
ret
imul
retf
jns
idiv
pop
add
cdq
hlt
mov
scas
faddp
je
cmp
stos
aad
stos
mov
test
mov
fisubr
mov
rcr
sbb
nop
mov
std
push
fs
xchg
ror
xor
stc
iret
cmp
outs
outs
sbb
adc
inc
cmc
sbb
or
gs
push
aaa
in
arpl
fild
pop
js
xchg
cmps
lahf
mov
cld
jecxz
into
retf
iret
fidiv
test
jne
movs
movs
xchg
data16
sub
mov
inc
sub
push
cmp
scas
mov
push
(bad)
retf
sahf
inc
push
mov
cmp
les
cdq
fdivr
add
xchg
push
js
into
out
pop
nop
dec
test
lahf
mov
mov
xchg
test
loope
int3
ja
out
push
jbe
xor
je
sub
nop
bound
mov
test
sub
sub
lock
cs
loope
sub
jp
stos
xor
mov
add
(bad)
jmp
stos
scas
into
out
mov
test
rcr
add
sbb
pop
or
ror
mov
jbe
sbb
mov
ja
add
sub
mov
test
sub
jle
(bad)
mov
cmp
data16
mov
or
pop
push
leave
imul
or
sbb
out
test
ret
xor
lods
dec
xor
sub
icebp
ds
dec
out
mov
jo
bound
inc
aam
mov
test
into
test
or
dec
imul
sbb
dec
cmp
mov
(bad)
ja
cmps
lea
(bad)
adc
sti
arpl
bound
cmps
xchg
mov
popf
retf
push
addr16
sbb
jns
shl
int
cmp
xchg
push
fcmovbe
jp
sub
add
imul
lds
xor
test
ror
and
in
loope
and
call
mov
pop
movs
mov
(bad)
xchg
pushf
sbb
das
xchg
sbb
imul
gs
ins
out
adc
addr16
xchg
lea
cmp
mov
sbb
jle
mov
and
movs
ror
jle
popf
daa
gs
inc
std
push
ficomp
fstp
sbb
and
push
adc
dec
pop
cmps
(bad)
adc
mov
mov
daa
and
or
std
int
loopne
cmps
cdq
jo
enter
scas
pusha
sub
ins
mul
mov
push
out
fwait
mov
rol
dec
mov
mov
stc
iret
push
jo
mov
mov
mul
retf
in
sbb
mov
icebp
shl
xchg
jb
inc
imul
ret
sbb
or
aad
sub
pop
fst
gs
sti
push
push
jg
cmp
dec
clc
inc
adc
dec
rcl
mov
dec
pop
fstp
dec
mov
loopne
fcom
jmp
and
cdq
or
and
in
(bad)
fcomp
cs
or
or
cmp
ret
repz
inc
add
movs
popa
test
bound
add
mov
aas
mov
fwait
mov
xor
mov
fsubrp
and
xor
ss
mov
mov
lock
mov
fstp
int3
out
sar
cli
call
inc
push
cmp
jmp
push
in
mov
aas
ret
(bad)
shr
(bad)
repnz
mov
fmul
sub
sub
mov
jmp
repnz
mov
pop
rcr
pop
dec
call
mov
lea
in
ins
leave
scas
call
and
test
jmp
aad
push
xor
jo
push
mov
loop
pusha
jp
loopne
movs
repnz
shr
xchg
xor
out
sub
pop
jae
test
ds
movs
out
outs
jns
or
mov
fisubr
dec
adc
int
(bad)
push
adc
frstor
retf
pop
push
cmp
sub
cmc
call
cmp
fwait
loop
test
lds
iret
inc
inc
push
or
loop
jge
add
fld
push
js
loope
lock
mov
xlat
das
mov
imul
dec
push
sbb
ins
(bad)
(bad)
clc
sub
rcl
mov
sbb
ins
movs
mov
fwait
jmp
or
imul
xchg
or
rep
and
mov
frstor
dec
push
and
das
xchg
jbe
push
pop
mov
ins
pop
jmp
(bad)
push
jae
pop
mov
call
pop
pop
xchg
fst
push
mov
sbb
fisubr
in
fldcw
mov
xor
and
enter
test
jno
sar
mov
inc
xor
outs
xlat
movs
pop
sbb
stc
cdq
jecxz
loopne
outs
and
sub
outs
(bad)
imul
pop
loop
jns
xor
cli
addr16
sbb
pop
repz
mov
js
sub
loope
clc
cmp
and
push
inc
cwde
mov
jecxz
or
repnz
jg
outs
(bad)
sti
in
dec
fldenv
jp
dec
mov
jp
lds
ins
aam
xor
mov
lea
jno
xor
dec
xlat
lock
fsubr
and
aam
mov
push
cmps
fbld
call
(bad)
int3
into
push
int
out
out
daa
(bad)
jecxz
ret
xchg
sub
jnp
arpl
and
loopne
out
test
pop
adc
shr
(bad)
shl
stos
lahf
leave
rcr
sub
ret
nop
int
cmp
arpl
cwde
mov
out
adc
xor
pop
call
inc
dec
and
mov
mov
or
outs
jmp
pop
mov
es
loopne
cmp
jae
pop
push
shl
outs
int
fbld
pop
into
sbb
movs
(bad)
jnp
aam
ret
pop
cmp
xchg
dec
ret
jl
sahf
mov
inc
jo
dec
or
sub
or
cmp
push
jp
lahf
pop
std
lods
call
sub
mov
pop
cmp
cmc
sub
jmp
fcom
lock
neg
lods
daa
add
loope
cs
mov
adc
mov
xor
call
loope
xchg
ror
shl
adc
pop
cs
pop
mov
cwde
mov
dec
xor
rcl
ins
clc
push
jle
sti
out
cdq
sub
leave
cwde
mov
mov
or
push
pop
and
sub
sti
loope
inc
inc
xchg
mov
adc
or
in
imul
(bad)
out
ins
popa
mov
movs
repnz
mov
fstp
je
dec
inc
test
sub
pop
jp
cwde
ror
sbb
retf
nop
ror
mul
mov
fs
adc
pop
xchg
cmp
iret
xchg
outs
jmp
out
xor
sbb
aam
les
ds
pushf
inc
mov
cdq
cmp
sbb
data16
sub
scas
aad
adc
scas
sbb
sbb
aam
add
repnz
rcl
xor
push
add
ja
loopne
mov
in
stc
jl
push
outs
jmp
ja
stos
lea
push
jne
and
xchg
cmp
push
out
cmp
pop
sbb
in
and
xchg
lds
in
and
mov
pop
jb
(bad)
pop
and
lods
mov
jo
fistp
xchg
cwde
repz
lea
pop
mov
in
add
loope
cmc
push
dec
push
jmp
jmp
iret
pop
cmps
loop
pop
stos
sar
jmp
dec
pop
add
jae
dec
rcr
stc
and
shl
and
test
rol
out
test
fidivr
fs
pop
in
mov
sbb
mov
aam
sub
repz
(bad)
jne
movs
xlat
jmp
mov
xor
mov
dec
jp
and
pop
out
stos
rcr
adc
(bad)
jne
ror
push
sub
cdq
dec
mov
cs
xlat
pop
mov
mov
mov
fxtract
pop
imul
pop
cs
out
sub
or
sub
imul
sbb
je
xor
mov
xor
mov
lock
movs
push
jo
cmp
push
ins
fcomp
jge
pop
push
add
cmps
or
in
mov
adc
repz
jle
mov
(bad)
clc
or
mov
sbb
mov
push
mov
mov
mov
test
rol
push
mov
fcomp
dec
imul
gs
push
stos
xchg
mov
dec
popa
sbb
pop
xchg
xor
fs
scas
fwait
daa
ds
clc
shl
in
mov
xchg
out
aas
sub
imul
les
inc
jp
js
push
xor
add
xor
jne
in
jae
mov
push
sbb
xlat
push
adc
addr16
and
lds
out
and
(bad)
(bad)
neg
lahf
mov
sbb
int3
daa
stos
push
in
in
push
and
sbb
out
add
das
outs
inc
pop
pop
sbb
aaa
xchg
test
clc
(bad)
xor
mov
push
sbb
cmp
ficomp
mov
loopne
cld
mov
pop
pop
jb
or
add
test
imul
fxam
js
in
cmps
lods
shl
rcl
cmp
fnstsw
mov
add
call
add
in
clc
xor
stc
aaa
dec
mov
leave
cmp
and
inc
inc
pushf
and
movs
sub
fcom
push
scas
jo
lds
pop
loopne
xchg
daa
push
nop
push
mov
call
pop
repnz
test
add
jb
jnp
add
imul
mov
inc
sti
xchg
jno
ret
jg
shl
addr16
jno
cmp
jmp
push
xor
add
adc
leave
push
jnp
xchg
cmc
xor
imul
pusha
neg
cli
and
repz
add
loop
std
fidiv
inc
test
mov
mov
adc
out
sar
cdq
jb
push
sbb
into
es
(bad)
iret
arpl
fdivr
dec
jb
mov
test
pop
xchg
out
or
push
xchg
mov
aam
stos
pushf
jecxz
jl
push
rcr
xor
xor
mov
or
aam
xchg
sahf
cdq
or
arpl
adc
mov
cmp
bound
jmp
xlat
or
xor
inc
dec
sar
push
dec
jmp
sub
jg
pop
mov
sub
and
jbe
popa
jmp
adc
sbb
mov
in
add
xchg
cmp
lods
adc
sahf
out
sar
enter
inc
xor
xor
and
adc
cmp
aaa
bound
push
cld
or
dec
mov
push
adc
out
adc
pop
fwait
bound
adc
cdq
cli
adc
or
sbb
cli
retf
push
dec
lock
pusha
ja
aad
inc
rcr
popf
jo
fld
mov
movs
jo
xchg
pusha
xor
int
push
adc
or
add
mov
fdiv
mov
int3
pushf
sti
or
out
(bad)
xor
cld
les
pushf
jmp
sub
call
adc
mov
xor
gs
ins
mov
lahf
dec
mov
mov
pop
cmp
loope
mov
jmp
jmp
and
movs
xchg
lds
adc
and
cmps
enter
mov
add
pop
cmp
inc
add
mov
xor
test
out
or
dec
dec
inc
(bad)
cmp
scas
sub
add
pop
push
es
xchg
mov
inc
bound
or
dec
std
cli
xacquire
dec
dec
rcl
nop
push
cmps
push
mov
(bad)
arpl
jns
mov
mov
data16
adc
lods
pop
jmp
test
outs
sub
xchg
je
or
pop
lods
adc
inc
push
mov
push
push
jno
jmp
pop
dec
inc
outs
int3
sub
xchg
adc
or
xchg
popf
jo
jmp
xlat
push
xchg
fdivr
xchg
dec
jne
xchg
adc
xor
out
retf
loop
fsincos
cs
adc
cmp
mov
xchg
iret
test
mov
sbb
shr
mov
or
dec
enter
adc
pusha
mov
shl
dec
pop
test
lods
outs
into
outs
pop
fs
out
xchg
lahf
lds
movs
sbb
dec
adc
xor
mov
sub
and
sahf
or
sbb
iret
or
or
test
int
mov
xchg
call
or
or
sbb
fadd
pushf
or
pop
fsubr
mov
mov
dec
inc
mov
or
punpcklbw
mov
lods
jle
(bad)
cmp
cmp
mov
fwait
das
push
ficom
mov
dec
cmp
lods
mov
mov
push
in
mov
push
fsub
and
ss
or
fs
dec
lods
jge
inc
jecxz
push
in
cmp
xchg
into
out
push
fsub
mov
bound
push
dec
mov
idiv
push
push
(bad)
xchg
popa
mov
and
popf
inc
adc
pop
mov
ins
push
mov
mov
psubq
and
cli
pop
jmp
sbb
cwde
adc
cmp
mov
mov
cmps
sub
retf
imul
imul
mov
outs
daa
cmps
loope
pop
add
aas
xchg
jo
cs
cmps
cdq
lea
ret
mov
push
movs
lods
les
ds
push
mov
in
cmp
mov
pop
(bad)
xor
call
mov
fsub
jl
and
mov
and
add
mov
aam
adc
inc
(bad)
adc
cmps
dec
xchg
shl
dec
shl
push
rcr
scas
and
aad
pop
adc
bnd
shr
push
retf
pop
xchg
or
jne
or
sbb
inc
jecxz
dec
or
and
jmp
pop
sbb
sub
dec
ins
movs
mov
arpl
cs
iret
call
into
popa
push
cmps
std
clc
sub
aad
fstp
add
sub
test
mov
dec
pusha
push
cmp
(bad)
dec
mov
das
fsub
fld1
ins
mov
adc
ins
add
daa
and
sub
js
mov
js
jp
inc
pop
adc
xor
inc
clc
loope
jns
addr16
mov
adc
or
shl
sub
hlt
sbb
cwde
sbb
xor
add
test
call
fwait
inc
aas
lea
mov
jmp
mov
addr16
(bad)
test
xor
dec
xlat
hlt
push
lock
push
jle
mov
gs
mov
cmp
test
add
enterw
lods
loopne
inc
adc
mov
xchg
adc
mov
and
lea
mov
sbb
cmps
enter
push
mov
sar
rcr
cld
add
dec
test
xchg
mov
xor
pop
or
pop
rcl
sbb
into
out
pop
add
retf
movs
test
leave
out
outs
retf
mov
jne
int
test
add
push
mov
je
faddp
mov
pop
pop
shr
and
ins
pop
sbb
jnp
mov
pop
inc
cli
mov
xchg
sbb
add
mov
jmp
push
mov
fisub
int
mov
mov
inc
and
(bad)
add
xchg
lods
hlt
pop
gs
clc
mov
jl
sub
retf
jmp
sub
fnsave
and
aad
imul
add
jbe
xor
xchg
xchg
gs
mov
aas
inc
xchg
xor
or
mov
add
sbb
test
xchg
xor
mov
adc
jne
(bad)
adc
mov
mov
sbb
sahf
retf
(bad)
sar
fcmovb
xor
fcomi
bound
inc
xchg
mov
cdq
fidivr
retf
je
call
jmp
rcl
(bad)
leave
inc
xor
mov
xchg
addr16
xchg
pop
icebp
push
dec
push
js
jmp
iret
sbb
xor
iret
or
imul
dec
cli
push
pop
sbb
mov
ss
xchg
and
mov
mov
xor
push
xor
jg
sbb
push
cmps
push
dec
jmp
xchg
xlat
fdivr
mov
in
and
call
jno
add
pop
out
cmc
push
addr16
movs
in
adc
pop
sar
fwait
and
(bad)
push
fiadd
mov
leave
int
or
ja
test
adc
jge
push
adc
adc
xor
ins
in
mov
xchg
push
lods
lods
test
and
mov
sub
pop
cmp
adc
daa
mov
adc
push
add
dec
xor
add
test
inc
push
sub
mov
(bad)
lods
(bad)
dec
add
xor
test
retf
lds
or
mov
mov
and
and
sbb
mov
add
mov
test
add
cs
loop
adc
cmps
clc
xchg
push
jb
retf
(bad)
std
bound
and
mov
test
xchg
lock
aaa
fwait
int
nop
(bad)
lahf
ja
aaa
xor
pop
mov
pop
sbb
xor
jle
das
leave
imul
out
mov
sub
stos
cmp
adc
jle
sub
out
fisttp
rcl
xchg
dec
push
test
aaa
push
test
sbb
(bad)
test
inc
sahf
out
push
xor
js
ins
xor
lea
(bad)
es
pop
and
jmp
pop
ret
and
push
xchg
loop
jno
push
inc
mov
xor
or
mov
pop
mov
jnp
bound
or
inc
fiadd
and
cmp
mov
sbb
nop
dec
(bad)
xchg
addr16
and
pop
mov
push
and
out
fwait
pop
clc
add
dec
fcmovbe
outs
jle
adc
add
ins
mov
cmps
mov
sub
rcr
or
mov
ret
sub
dec
mov
pop
mov
out
in
out
sub
mov
jmp
jge
push
in
out
cs
outs
xlat
(bad)
leave
or
and
cmp
and
(bad)
fs
mov
lahf
ins
mov
cmp
aam
stos
jp
(bad)
mov
mov
and
xor
addr16
xchg
arpl
jns
xor
lahf
cwde
mov
inc
fld
hlt
push
test
jae
xchg
popf
scas
rol
outs
lahf
cmp
xchg
fs
xchg
xchg
sub
scas
jle
test
movs
popa
and
div
or
sbb
repz
mov
jo
jl
loop
push
fwait
mov
pop
cmp
mov
neg
pushf
es
cmps
push
repz
dec
int
iret
imul
(bad)
retf
mov
sub
lods
push
dec
ins
cs
xchg
xchg
xor
jle
(bad)
outs
lods
rcl
mov
lea
mov
sub
cmp
daa
dec
ret
dec
rcl
xor
mov
fdivr
int3
ret
arpl
pop
xor
cmp
scas
cmps
nop
hlt
or
stc
cmps
pop
(bad)
test
xchg
cmp
jnp
out
pop
xchg
push
jne
cmp
mov
cmp
rol
dec
dec
add
das
repz
cmps
mov
fimul
add
out
cmps
gs
es
sbb
mov
mov
cld
cmp
in
adc
push
lods
or
pop
inc
add
jle
adc
pop
ins
jle
sub
nop
dec
jo
mov
add
jns
xchg
mov
jo
dec
popf
mov
mov
jno
shr
xchg
push
shl
inc
in
dec
push
sub
or
add
repnz
lds
xor
aas
mov
jnp
jnp
push
mov
add
shl
stc
aaa
sub
fwait
push
sbb
outs
xor
ja
adc
mov
jns
je
xor
mov
cmp
and
pop
mov
ja
sbb
fisub
or
jne
mov
xchg
cmp
out
ret
inc
ficom
in
das
push
pushf
sub
mov
das
xor
jmp
pop
and
mov
addr16
dec
aas
adc
add
xchg
in
cmp
xchg
ins
jo
loopne
lock
bound
xor
and
cmp
nop
xchg
xchg
ss
cs
push
shl
adc
sub
pop
push
inc
stos
aaa
stos
pop
xor
int3
(bad)
jo
jno
and
pop
in
pop
cmp
cmc
das
xchg
(bad)
ret
inc
mov
mov
inc
mov
add
push
aas
daa
push
js
pop
fnstcw
dec
and
pop
sbb
je
push
cmp
cmp
popf
cdq
ss
mov
mov
arpl
jge
pop
mov
adc
jno
sub
int
sub
test
loope
pop
sbb
fwait
add
add
and
jnp
dec
sbb
mov
test
fdiv
xor
inc
and
shr
loope
inc
or
mov
ret
push
or
add
dec
mov
popf
adc
scas
push
xor
ret
(bad)
mov
int
ss
add
cmp
sub
mov
loop
(bad)
cmps
ret
mov
arpl
bswap
call
jns
out
sub
cmps
dec
xor
(bad)
in
mov
mov
ror
ret
and
or
inc
cmc
cdq
inc
es
mov
mov
jp
xchg
push
stc
(bad)
fs
cmp
push
sub
adc
and
daa
(bad)
jb
add
cli
mov
test
push
ins
jecxz
repz
mov
dec
mov
jo
push
xchg
jnp
mov
vorps
or
mov
pop
cli
xor
aas
adc
dec
dec
mov
xchg
shl
(bad)
popa
ja
mov
ins
sbb
sar
sub
lahf
add
jo
cmp
mov
mov
push
mov
gs
xchg
add
push
jg
dec
inc
pop
adc
shr
cmp
mov
lds
inc
dec
sub
mov
(bad)
jns
jmp
cmps
loop
push
aam
mov
mov
mov
fnop
lods
mov
leave
sub
cmp
(bad)
adc
inc
in
push
mov
in
mov
xchg
(bad)
adc
mov
inc
daa
cdq
push
push
sahf
dec
aaa
dec
mov
xchg
push
and
push
repnz
xor
inc
dec
jp
sbb
scas
scas
sbb
xchg
mov
out
pusha
or
sahf
jmp
add
adc
sar
lahf
fwait
loope
stos
int
out
popa
dec
or
push
ins
push
sub
mov
cmps
push
xor
dec
loopne
or
push
push
pop
arpl
pop
lock
test
xchg
add
inc
repnz
jnp
retf
lea
fst
or
adc
xchg
jne
(bad)
shl
ret
dec
inc
jo
pop
jge
shr
push
shr
out
fwait
adc
mov
pusha
push
pop
out
pop
sbb
ins
idiv
ins
aad
or
or
push
jne
mov
pop
retf
pop
pusha
shr
ins
int3
stos
ficom
and
imul
(bad)
sar
test
shl
xchg
add
shr
rcl
sbb
shl
xor
add
call
in
push
inc
lock
xchg
jno
sbb
push
out
mov
push
fild
repnz
pop
jl
jbe
int3
jmp
dec
or
and
xchg
xor
xor
nop
sbb
dec
xor
push
(bad)
cli
jne
mov
pop
xchg
out
or
sub
push
mov
hlt
xchg
hlt
(bad)
ret
cdq
ficom
mov
cmp
sbb
les
popa
sub
imul
xor
bound
jae
pushf
mov
or
stc
sub
jnp
gs
mov
adc
inc
mov
(bad)
mov
mov
or
ror
pushf
push
call
lock
mov
sub
call
push
inc
in
sti
add
mov
pop
pop
cmp
(bad)
xlat
sub
cmp
shl
add
jb
and
sahf
das
outs
fisttp
ss
leave
test
scas
mov
(bad)
cmp
pop
jg
or
xchg
jno
mov
inc
mov
adc
dec
push
int
shl
jo
push
xchg
(bad)
enter
es
inc
sub
or
and
bound
jns
dec
dec
mov
mov
fs
mov
cwde
mov
sub
(bad)
jp
mov
sete
test
cmp
les
addr16
stos
mov
xor
cmp
ds
mov
xchg
or
sub
ret
pop
fcom
test
mov
out
jmp
push
retf
sbb
adc
std
inc
retf
clc
push
imul
dec
mov
add
aad
mov
mov
stos
(bad)
mov
mov
cwde
(bad)
add
jecxz
dec
je
adc
sub
in
jl
push
pop
ds
gs
sub
lods
jae
mov
push
(bad)
out
shl
ficomp
cdq
inc
cdq
enter
pop
into
lea
arpl
mov
or
lods
clc
repz
mov
in
or
dec
mov
pop
mov
in
out
mov
test
mov
push
mov
xchg
addr16
stos
scas
dec
adc
les
popa
or
or
sub
in
shr
xchg
push
retf
lods
jno
outs
or
rcr
inc
cmps
inc
push
out
in
add
pop
popf
jne
and
pushf
inc
aam
dec
dec
gs
(bad)
out
mov
push
aam
test
enter
xchg
or
sub
xchg
(bad)
imul
imul
fstp
mov
ret
ja
ret
cmp
(bad)
or
fcomi
cmp
pop
(bad)
mov
call
jmp
sub
icebp
lea
sbb
cmc
mov
adc
dec
arpl
fild
pop
jne
mov
xchg
js
test
scas
pop
call
test
pop
popw
retf
in
push
les
push
(bad)
faddp
nop
neg
test
xor
mov
jbe
push
jg
jns
ret
shl
or
out
fcom
das
cmp
shr
cwde
inc
jle
out
outs
jmp
pop
mov
lock
stc
jl
cmp
iret
outs
test
repnz
pop
jge
mov
loope
sbb
pusha
je
jno
pop
ss
sti
adc
(bad)
jmp
es
pop
ds
call
jl
pushw
pop
cmp
and
cmp
dec
xor
xchg
nop
fld
fidiv
jp
imul
mov
in
int3
(bad)
mov
cs
std
outs
jnp
cmp
xor
cwde
ss
sub
push
cmps
jecxz
xchg
push
mov
stc
cwde
pop
(bad)
push
sbb
sbb
jo
frndint
in
retf
sbb
jbe
and
or
cmc
mov
shr
inc
aaa
dec
aad
(bad)
xchg
xchg
stos
adc
in
bound
pop
sbb
aad
stc
ss
outs
mov
not
add
movs
jmp
inc
xor
inc
xor
jmp
aam
sub
jmp
and
cmp
mov
(bad)
and
xchg
test
cmp
push
and
lds
ret
xchg
xor
loopne
dec
stos
call
jno
leave
clc
push
xchg
jne
jno
imul
adc
dec
sbb
div
dec
cwde
frstor
into
arpl
rol
je
loop
in
xlat
mov
stc
test
lahf
push
icebp
pushf
and
push
cmp
jg
jb
(bad)
sbb
dec
cmp
push
leave
retf
nop
push
push
adc
push
hlt
xchg
xor
test
sub
sub
imul
retf
push
mov
pop
leave
mov
retf
in
inc
test
adc
or
mov
div
popa
mov
inc
sbb
lea
or
dec
dec
cmp
pop
mov
push
cmp
ret
add
sbb
cmps
mov
cmp
push
sub
or
(bad)
(bad)
mov
shl
pushf
cwde
pop
pop
inc
or
mov
pop
loop
add
or
mov
push
rcr
(bad)
pop
mov
fimul
or
cmp
rcr
inc
sub
rep
pop
mov
inc
push
loope
cld
out
xor
inc
jmp
imul
es
mov
xchg
pushf
(bad)
inc
and
je
adc
xchg
fwait
sub
loope
or
repz
dec
push
cmps
retf
or
arpl
lea
or
sbb
cmp
inc
clc
mov
cmp
stos
dec
(bad)
rol
mov
out
xor
pop
fninit
das
push
popa
cdq
sub
loopne
cmp
repnz
fldenv
movs
mov
loop
add
or
lds
daa
ds
stc
fmul
push
xchg
cmp
pop
cmp
out
pop
mov
mov
jbe
sub
mul
adc
rcl
or
and
(bad)
xor
imul
movs
dec
cmps
in
pop
push
push
xor
or
pop
lods
scas
pop
cmps
mov
adc
pop
mov
ss
dec
pop
sar
sbb
loope
xchg
jge
push
cmp
mov
mov
in
cmp
sub
(bad)
dec
xchg
xor
dec
js
cs
xor
jmp
jp
jl
sti
jg
mov
mov
addr16
dec
popa
add
sub
inc
mov
adc
mov
xor
push
push
(bad)
cmp
xchg
lea
icebp
aad
imul
pop
data16
cmp
rcl
fadd
in
popa
mov
div
les
out
xor
retf
out
movs
mov
xchg
cli
mov
inc
loop
call
ja
nop
sub
(bad)
jno
mov
addr16
sub
mov
imul
ror
xor
or
shl
mov
mov
push
adc
fmul
pop
adc
jmp
and
jbe
(bad)
push
and
int3
ja
ret
inc
jbe
ins
jg
sub
pushf
pop
fwait
fwait
sub
xchg
xchg
add
dec
lds
cld
jo
les
out
sub
mov
aaa
in
into
std
daa
out
xchg
inc
rcl
inc
pusha
xchg
xor
pusha
wbinvd
test
inc
inc
inc
add
xor
(bad)
js
pop
inc
inc
xor
test
fs
fisttp
aad
xchg
jb
xchg
mov
mov
idiv
mov
shl
test
adc
push
mov
add
or
in
sti
mov
inc
or
xchg
sbb
sar
add
out
and
inc
js
pop
ja
scas
inc
into
(bad)
mov
sahf
es
or
mov
movs
outs
mov
dec
leave
inc
adc
push
ja
addr16
scas
call
or
fdiv
das
sbb
xchg
xor
ja
mov
and
push
cmc
hlt
into
sbb
mov
mov
retf
ss
mov
cmps
test
cld
jns
push
cmps
cdq
clc
push
imul
inc
mov
push
adc
stc
push
pushf
add
push
sub
loop
or
mov
or
popa
jo
jmp
push
and
dec
push
pop
push
nop
jg
push
lahf
cmp
mov
in
(bad)
dec
stc
or
push
push
outs
mov
pop
(bad)
pop
xchg
ja
test
cmp
shl
test
dec
inc
movs
test
popa
mov
dec
hlt
fs
jmp
jns
stos
mov
ins
pop
fisttp
cdq
lahf
fmul
cmp
loop
lock
mov
adc
jl
dec
je
test
pop
xchg
and
cmp
cwde
clc
gs
fimul
sbb
stos
fst
mov
adc
adc
call
sub
fistp
aas
popf
test
dec
std
xchg
popf
mov
jmp
jecxz
in
add
mov
inc
xor
movs
sub
xchg
test
inc
aas
mov
xchg
cmp
sbb
cmp
pop
push
add
fcmovne
das
iret
pusha
ja
adc
or
shr
daa
test
cmps
xchg
inc
and
xchg
xlat
out
lahf
cli
jo
adc
and
sbb
fcom
jg
jbe
mov
mov
(bad)
jmp
push
movs
push
push
nop
sub
xchg
in
aad
test
push
sbb
lods
adc
xchg
cmc
mov
popa
xchg
and
push
out
xchg
scas
xchg
(bad)
test
gs
dec
mov
ins
wbinvd
push
cs
test
xchg
dec
imul
pop
outs
mov
adc
lods
and
lahf
xchg
sbb
(bad)
push
cmc
(bad)
sub
and
cmp
inc
jg
jge
xchg
mul
mov
mov
pop
inc
mov
dec
in
fcmovu
jbe
lock
cdq
test
jnp
xor
push
sub
add
sbb
cmp
jmp
push
inc
sub
xor
mov
fs
ror
pusha
push
or
cdq
mov
das
popa
stos
cmp
out
ins
cmps
jge
pop
dec
dec
add
jbe
mov
jp
inc
jmp
retf
(bad)
stos
repz
mov
int
dec
jp
jno
or
int
add
sbb
inc
xor
outs
(bad)
jmp
mov
stc
bound
cmp
add
mov
in
addr16
sub
mov
cmps
and
and
mov
push
cmp
cmp
jns
stc
mov
jle
jbe
test
repz
inc
sbb
jecxz
test
push
mov
test
iret
and
xchg
dec
call
in
aaa
in
mov
push
and
cmc
mov
cli
push
repnz
xchg
loope
add
cmc
idiv
add
popa
fdiv
xor
fst
aas
out
xchg
add
xchg
jae
push
jne
aam
mov
out
or
arpl
loop
and
pop
jmp
scas
test
test
push
hlt
xor
aaa
xchg
jae
nop
mov
pop
sbb
outs
xor
xchg
push
fld
adc
shr
inc
dec
xor
xchg
(bad)
cdq
inc
cs
fisubr
and
test
mov
jbe
pop
xchg
push
in
cmp
bound
push
ret
dec
popf
mov
mov
lea
repnz
push
sbb
das
adc
push
cwde
test
mov
int3
fsubr
mov
mulps
inc
xor
mov
imul
call
jnp
sub
(bad)
(bad)
(bad)
xor
fs
call
jmp
mov
imul
push
jae
push
inc
and
dec
out
and
enter
adc
sub
inc
cmp
js
mov
mov
mov
pop
jns
mov
push
jmp
jns
addr16
out
or
xchg
xchg
inc
push
mov
lar
inc
stc
jg
test
pop
popa
ds
cmp
jno
xchg
pop
popf
xor
add
test
es
xor
test
mov
mov
mov
daa
test
mov
mov
test
inc
push
(bad)
inc
push
push
add
dec
dec
pop
leave
out
xchg
and
jnp
jbe
test
jae
push
cs
xchg
test
movs
xor
jmp
fs
sub
inc
xchg
add
int3
add
lods
test
push
and
sub
mov
repz
das
or
push
and
inc
push
(bad)
sbb
outs
int3
fld
mov
mul
cmp
mov
push
aam
repnz
cmps
jmp
sub
dec
outs
daa
dec
sub
std
test
inc
mov
and
fist
sbb
sar
rcr
nop
cmp
pop
fsub
call
in
fwait
push
in
lds
push
aaa
leave
push
adc
gs
lock
js
sbb
mov
xchg
lock
out
add
dec
inc
movs
mov
(bad)
in
icebp
mov
popf
cmps
dec
jne
sbb
rcr
aad
cld
pusha
inc
inc
sbb
push
loope
push
jo
dec
xor
loopne
ror
fimul
and
jle
mov
and
sbb
push
dec
inc
stos
mov
mov
sub
add
mov
loop
in
mov
arpl
or
sub
sub
ret
jne
fsubr
inc
pop
inc
rcl
das
sbb
jl
pmulhw
js
push
xchg
push
imul
xchg
scas
mov
mov
inc
sbb
adc
inc
neg
jmp
xchg
mov
or
(bad)
fnstcw
jnp
mov
lds
xor
sub
test
mov
sub
ret
lock
inc
out
ret
popa
shl
jno
in
mov
imul
ins
push
ja
repnz
and
cmp
aas
cwde
push
mov
leave
sar
cmps
xchg
pop
push
or
popa
jle
inc
sbb
ins
pop
mov
push
pop
std
fmul
xchg
cmps
addr16
call
sub
cmp
or
aad
xchg
daa
mov
cmp
or
popa
aam
gs
rcl
(bad)
dec
adc
in
test
xor
jbe
out
ss
xor
test
fs
push
jmp
outs
icebp
loop
push
push
cli
sub
lea
xor
mov
cmp
dec
les
cmps
(bad)
clc
test
and
dec
test
scas
adc
jb
scas
dec
inc
or
in
imul
lock
movs
and
pop
lahf
lock
sub
pop
test
aam
ror
xchg
mov
and
and
xor
lods
xor
jp
retf
and
loop
repnz
dec
leave
sbb
mov
rol
mov
leave
push
(bad)
dec
mov
idiv
adc
and
aam
mov
push
inc
push
stos
xlat
pop
scas
loopne
sbb
outs
enter
jecxz
mov
dec
mov
jns
mov
mov
xor
aas
and
fwait
and
mov
sub
mov
stos
dec
popf
lock
ret
scas
adc
imul
test
arpl
inc
or
jl
jne
fsub
xor
cmc
outs
and
in
xor
aaa
adc
mov
cs
xchg
das
enter
ss
in
lea
cwde
(bad)
mov
es
imul
in
out
dec
mov
push
or
push
xchg
(bad)
(bad)
push
int3
inc
nop
pop
scas
cmp
aam
pop
ins
inc
pushf
test
inc
(bad)
push
adc
sub
call
test
xchg
mov
popf
xchg
push
into
jnp
add
push
aam
arpl
lahf
cmp
jmp
dec
jl
(bad)
mov
xchg
fsub
gs
les
loopne
mov
pop
fild
dec
cli
xchg
neg
xor
mov
pop
dec
dec
int
iret
in
cdq
outs
push
(bad)
pop
and
and
mov
leave
leave
or
fsub
jp
outs
lods
inc
sub
cmp
retf
jb
mov
xchg
outs
in
pop
fucom
mov
sti
ret
xchg
jne
not
push
xchg
gs
outs
aam
mov
shl
je
xchg
js
mov
mov
jg
call
sbb
sbb
sbb
outs
dec
ins
ds
js
fdiv
mov
sub
pop
ss
add
push
jmp
out
push
and
daa
js
jae
cmp
push
fld
in
inc
std
pop
in
xchg
dec
xchg
lods
loope
lods
lock
xchg
outs
xchg
jecxz
dec
test
cmp
jmp
cmps
dec
push
out
push
dec
jns
pop
push
push
addr16
fdivr
daa
jnp
imul
mov
outs
mov
xchg
and
stc
cs
or
push
adc
inc
not
pop
pop
ret
jg
loop
repz
cli
lahf
int
and
mov
call
mov
xchg
mov
test
rcr
movs
imul
cmp
out
xchg
(bad)
fdiv
adc
fs
fisubr
mov
daa
sub
shr
dec
xchg
and
sbb
popa
bound
xchg
jns
add
repnz
mov
mov
pop
icebp
icebp
dec
cmp
sbb
inc
xchg
idiv
dec
pusha
or
fidiv
xor
adc
mov
imul
cmp
inc
adc
mov
nop
adc
call
nop
push
(bad)
pop
add
push
adc
jmp
int
lea
fnstenv
and
xor
inc
stos
jl
neg
pop
or
cmps
bound
ins
dec
repz
push
mov
inc
outs
mov
(bad)
or
sbb
rcr
add
scas
jl
pop
mov
adc
lahf
sub
xchg
retf
sbb
inc
pop
pop
sar
sar
out
xlat
out
inc
sti
je
or
xor
in
movs
cmps
(bad)
adc
and
call
push
adc
mov
jbe
sub
push
jb
test
xchg
iret
xchg
cld
int
cmp
arpl
adc
cmp
cmp
shl
daa
addr16
arpl
ret
jmp
mov
nop
jne
adc
jns
mov
nop
jmp
jmp
inc
dec
jb
dec
mov
xor
push
xchg
mov
push
fstp
cmp
retf
mov
bound
cmp
loopne
jmp
je
sbb
inc
loopne
test
add
lahf
std
cmc
in
fiadd
sub
or
mov
fistp
push
jmp
jns
lods
loope
and
cmp
adc
inc
and
popf
jnp
call
inc
sbb
jmp
xor
mov
daa
mov
xor
push
shl
outs
or
repnz
inc
dec
xchg
ret
es
pop
adc
and
cpuid
lock
pop
in
add
push
pop
std
or
inc
pop
xchg
ret
popf
inc
sahf
add
fwait
aam
dec
mov
inc
push
iret
mov
jae
adc
or
pop
out
and
in
rcl
sbb
add
xchg
jmp
inc
mov
mov
test
pop
lea
jns
xchg
mov
cmp
cmp
mov
rcl
mov
inc
aam
mov
jae
and
push
jmp
inc
ror
out
out
xor
in
pop
loope
sub
in
outs
ds
mov
mul
pop
daa
cmp
in
sahf
push
bound
adc
out
push
cmp
jg
adc
dec
test
dec
sub
xchg
dec
(bad)
jmp
jmp
pop
sti
cmp
sbb
shl
scas
and
push
xchg
jle
iret
push
pop
cmp
push
mov
adc
jecxz
inc
add
sub
xor
scas
sub
xchg
(bad)
adc
dec
and
(bad)
mov
dec
sub
daa
xor
xchg
pop
push
stos
shl
cld
lea
scas
int
imul
mov
jecxz
out
mov
mov
cmp
out
push
inc
mov
pop
xor
pop
cmps
cmps
mov
pop
mov
cdq
add
sbb
imul
(bad)
dec
inc
inc
add
adc
sbb
call
dec
mov
popf
mov
xchg
fild
das
lahf
cmp
data16
lea
jmp
inc
fistp
push
(bad)
(bad)
mov
adc
stc
xor
pusha
jmp
test
dec
or
and
loop
sbb
and
pusha
inc
sub
cmp
lds
sbb
sub
xchg
pushf
sub
clc
in
(bad)
jge
adc
movs
mov
adc
push
call
lods
imul
xor
pop
inc
or
in
movs
cmc
xchg
or
xchg
sti
arpl
inc
loop
sub
jne
or
mov
push
jno
icebp
test
and
fs
cmp
repnz
es
leave
(bad)
enter
xor
scas
sahf
mov
pushf
push
mov
dec
ds
jns
mov
into
in
pop
push
fistp
outs
cmp
test
xor
test
retf
pop
jb
cdq
nop
rol
push
movs
mov
mov
cmps
cmp
mov
stos
xchg
cmc
pop
imul
popa
jp
sub
cmp
lods
aam
test
mov
fbld
xor
mov
adc
mov
data16
repz
or
idiv
sar
sbb
push
call
jae
xchg
jo
inc
movs
lea
pop
push
push
iret
inc
inc
pop
lods
fimul
in
mov
retf
(bad)
int3
cwde
and
in
pop
adc
push
xchg
xchg
and
lods
popf
movs
mov
jo
(bad)
adc
lods
jecxz
sub
sbb
push
out
xchg
movs
jno
idiv
lahf
dec
fisubr
xor
or
and
adc
in
xchg
sar
mov
inc
int
adc
les
pop
sbb
stos
pop
adc
mov
push
sub
lea
hlt
sub
lods
jb
jmp
adc
icebp
dec
fstp
je
rcl
xabort
xor
call
into
pop
mov
prefetch
xchg
add
xchg
jbe
adc
or
shl
cld
inc
repz
rcr
xchg
sahf
mov
aad
mul
sub
jle
cmp
mov
adc
gs
addr16
xlat
call
cmp
or
mov
scas
mov
push
or
out
js
stos
jmp
pop
xchg
dec
loop
je
clc
sbb
mov
and
jnp
and
mov
push
inc
pop
mov
aad
jns
lahf
rcl
sub
inc
mov
and
mov
sbb
mov
mov
les
movs
adc
dec
lds
mov
dec
and
enter
pop
dec
sub
xchg
ins
pusha
adc
adc
pop
pop
clc
pop
inc
enter
aaa
mov
adc
stos
jbe
and
mov
mov
push
cmp
mov
bts
jle
jg
jae
add
mul
mov
sbb
lods
(bad)
mov
and
lock
cmp
mov
cmps
inc
xor
repz
cli
add
jnp
xchg
mov
inc
xor
mov
push
cdq
mov
or
sub
bound
in
or
shl
call
sub
mov
daa
(bad)
lea
ins
shl
fldenv
sbb
lahf
es
jb
and
jmp
sub
shl
jle
push
jg
movs
repz
movzx
ss
sti
mov
push
(bad)
ds
mov
test
in
(bad)
je
jnp
scas
lds
push
pop
dec
push
clc
add
(bad)
js
out
clc
outs
int3
xchg
jno
mov
sbb
adc
mov
out
rol
xchg
movs
fstp
nop
dec
rol
pop
and
adc
mov
inc
(bad)
mov
jns
mov
adc
fild
inc
mov
add
add
out
enter
aaa
imul
out
xchg
cmps
mov
je
retf
pop
lahf
hlt
ret
out
(bad)
fcom
push
adc
xor
ja
or
jge
or
in
into
cmp
mov
mov
and
jb
popf
add
jb
inc
dec
mov
dec
mov
pop
dec
stos
xor
inc
jbe
pop
scas
call
test
xor
test
mov
mul
stc
repnz
add
in
imul
fisttp
pop
test
pop
ja
ins
add
ret
add
in
movs
and
je
lds
sub
into
jle
pusha
imul
retf
nop
and
jmp
clc
add
adc
outs
dec
mov
in
mov
inc
add
jmp
adc
mov
xor
test
pop
sub
int3
shl
pop
sti
ins
mov
pop
fcom
dec
fist
mov
dec
retf
cmp
mov
or
mov
pop
scas
enter
and
pop
mov
pusha
push
frstor
mov
clc
int3
loope
jmp
and
mov
mov
pop
dec
jmp
shl
enter
mov
inc
(bad)
mov
jl
inc
dec
fmul
mov
rol
lods
clc
jge
and
jbe
pop
test
mov
add
retf
fmul
pop
lods
pop
jmp
sub
cmp
cs
test
or
push
scas
or
dec
and
ret
mov
es
enter
lock
cmp
cmc
xchg
jo
xchg
(bad)
loopne
dec
outs
jnp
sub
dec
and
repz
pusha
mov
in
xor
pop
adc
pop
ror
pop
shl
mov
mov
mov
repz
add
pop
call
and
xor
mov
shr
cmp
sub
or
in
test
ja
pushf
jmp
jnp
mov
mov
dec
addr16
xlat
inc
retf
aaa
sbb
push
xchg
iret
sbb
sbb
cld
push
adc
out
adc
les
sbb
fstp
in
ins
fmulp
adc
ud1
outs
mov
xor
fdiv
hlt
dec
retf
jmp
popa
xchg
add
hlt
sbb
pop
jo
mov
xor
rol
add
xor
sub
and
outs
adc
mov
fs
imul
gs
push
imul
push
xlat
adc
test
jb
mov
mov
fdivrp
fcmovbe
jecxz
repz
pop
pop
(bad)
mov
or
repz
and
push
mov
pop
xchg
mov
sbb
sub
repnz
mov
or
cdq
mov
adc
shl
jl
(bad)
cld
pop
cdq
movs
repnz
jmp
xor
lahf
fadd
sbb
enter
div
leave
cmps
mov
cmps
mov
mov
or
das
les
dec
lea
(bad)
cld
jmp
fidiv
push
jne
sbb
aaa
lahf
push
mov
mov
add
sbb
xchg
add
or
leave
mov
pop
jns
inc
enter
cmps
dec
xor
test
xchg
xor
or
shl
jge
out
mov
repnz
sub
jae
mov
mov
ins
lea
fidivr
shl
xchg
mov
xchg
sub
or
xchg
(bad)
push
or
add
popf
rcr
inc
call
and
popa
cwde
or
lods
lods
dec
sbb
add
xchg
mov
jg
jno
jo
repnz
mov
addr16
add
xor
test
push
xchg
ds
adc
stos
and
mov
jg
pop
sub
pushf
jnp
xor
lods
push
inc
add
outs
xchg
xchg
xor
jmp
retf
cs
sahf
jge
xor
daa
lock
xchg
sbb
sbb
mov
lock
and
mov
stos
or
or
or
sub
mov
adc
push
retf
loopne
push
rol
mov
xor
ins
xor
mov
lods
add
(bad)
in
sub
pushf
popf
sbb
pop
test
loop
loopne
iret
aad
in
add
push
pop
mov
sub
scas
scas
and
lods
loope
xchg
jbe
adc
inc
jmp
mov
scas
mov
jle
stc
inc
jo
add
sbb
ss
into
jle
stc
pop
pop
cmp
cmp
in
ficomp
xor
cmps
test
mov
and
ret
push
and
movs
pop
leave
idiv
sub
cmp
fild
iret
into
jmp
push
lahf
fcom
cld
cmp
and
mov
lock
cli
mov
mov
aas
push
cli
sbb
add
(bad)
loopne
and
and
iret
adc
loop
lods
adc
push
ja
bound
cmp
adc
mov
ja
or
cli
push
repnz
jp
(bad)
cli
adc
test
inc
ss
add
dec
ds
icebp
inc
jns
mov
cs
xchg
les
dec
stos
lock
in
bound
push
out
xchg
jns
inc
pop
jmp
push
pop
dec
cmp
inc
pop
jl
fld
test
inc
clc
in
mov
aas
cmp
and
sub
test
xor
xchg
clc
loop
xor
mov
xor
dec
jae
fadd
stc
pop
(bad)
pop
lock
leave
jno
mov
mov
sub
or
sbb
je
out
pop
xor
jl
xchg
imul
and
xchg
inc
or
dec
outs
fsubr
and
cwde
sub
fidivr
jp
stc
xor
(bad)
pop
xchg
add
cwde
push
jnp
ret
shl
or
outs
(bad)
dec
push
cmc
loope
and
mov
push
faddp
in
push
fs
xchg
jne
fwait
les
repnz
push
scas
and
cmp
movs
dec
imul
fstp
xor
ret
or
fist
or
int3
cmc
xor
push
test
sub
out
and
push
mov
or
xor
and
push
(bad)
mov
mov
mov
mov
xchg
(bad)
into
mov
arpl
xchg
aas
(bad)
mov
pop
mov
push
push
sub
dec
push
jnp
outs
neg
or
cmp
or
adc
fcom
add
add
sub
sub
in
scas
adc
mov
sub
inc
push
mov
sbb
pop
int
test
mov
call
ror
popf
dec
loop
xchg
cmp
repnz
push
jno
pop
sub
sbb
xchg
or
mov
xchg
push
push
mov
gs
daa
fsincos
mov
sub
ss
push
jmp
cmps
out
push
mov
add
fimul
mov
test
lods
jno
rcr
data16
lods
cmp
xchg
jae
test
jp
dec
mov
div
or
and
adc
xor
add
in
pop
es
loopne
cdq
xor
pop
mov
push
adc
sbb
lahf
inc
pusha
and
sub
out
mov
fstp
xchg
pop
ds
int
clc
cli
(bad)
mov
cmps
fsub
imul
mov
mov
fwait
push
mov
popf
leave
cmp
adc
push
push
pop
ja
in
push
or
pop
push
test
popf
pop
imul
mov
mov
shl
xchg
(bad)
repnz
cmp
push
xor
call
icebp
lds
xor
or
jb
mov
mov
pop
dec
xor
ds
aaa
popa
dec
aam
je
xor
pop
rcr
fmul
mov
in
scas
pop
dec
addr16
pusha
mov
xor
or
mov
into
(bad)
repnz
cmp
xchg
mov
jmp
in
cmps
scas
mov
adc
int
lods
test
idiv
(bad)
mov
test
or
hlt
push
push
pop
scas
pop
sub
xchg
sbb
stc
jge
jg
addr16
les
(bad)
mov
pop
in
xor
repz
cmp
adc
les
or
cmp
mov
pushf
cmp
and
cmps
push
adc
sbb
sahf
sbb
jecxz
mov
out
mov
or
mov
ret
mov
lahf
mov
nop
dec
jne
ror
cli
push
mov
iret
and
xchg
and
xchg
jae
sbb
mov
movs
pop
sar
mov
dec
outs
aas
inc
sbb
idiv
ins
xchg
adc
inc
(bad)
repnz
jle
lahf
jmp
cmp
adc
inc
adc
dec
cmp
int3
ror
dec
dec
ins
test
and
std
loop
inc
push
mov
pop
xor
push
adc
xor
xchg
in
xchg
add
inc
jbe
jnp
retf
popf
retf
sbb
daa
ret
imul
cmp
or
gs
jb
jbe
test
test
push
push
pop
das
cwde
ret
jp
sbb
jo
jp
adc
iret
outs
(bad)
xor
pop
xchg
mov
cmp
in
add
mov
mov
xor
push
dec
lods
adc
sbb
repz
adc
xchg
sti
aas
sub
xor
(bad)
icebp
jae
aaa
outs
or
js
mov
mov
sti
add
add
ficomp
call
stos
ret
outs
dec
sub
and
enter
add
test
test
sbb
(bad)
adc
dec
add
std
mov
les
cmps
inc
mov
mov
or
sub
push
add
sbb
(bad)
cli
pop
les
aaa
and
adc
adc
aaa
dec
int3
adc
in
fld
inc
ins
mov
mov
xchg
inc
cmp
inc
lock
dec
jbe
std
inc
out
ins
xchg
es
push
jmp
push
mov
xchg
push
mov
pop
adc
inc
dec
aam
xchg
adc
mov
out
ret
aaa
inc
nop
mov
cmp
shl
jge
icebp
cld
mov
ficom
sbb
mov
nop
mov
sub
pop
jge
push
(bad)
sub
jno
push
push
int
cdq
jo
cld
in
add
sbb
ins
mov
mov
pop
push
mov
and
mov
loope
shl
(bad)
add
std
or
sub
lahf
hlt
cli
test
and
jmp
sub
popa
jbe
xor
cld
mov
add
pop
inc
add
mov
sub
cmps
rcr
push
dec
mov
pop
outs
sbb
cmp
cmp
call
icebp
dec
xlat
mov
bound
jns
call
fwait
sub
mov
dec
pop
mov
ret
sbb
hlt
mov
sbb
cwde
inc
outs
jge
(bad)
cmp
out
retf
jno
ss
mov
or
test
aad
sbb
inc
aam
js
dec
push
inc
mov
mov
inc
vpmulhw
xchg
iret
shr
data16
lods
push
pop
sbb
dec
cmp
mov
adc
outs
dec
lahf
js
add
(bad)
fwait
div
scas
hlt
push
pop
xchg
add
nop
das
in
jbe
jg
daa
sbb
into
inc
push
fidivr
das
jp
pop
xchg
add
mov
shr
aam
test
cmp
(bad)
jae
loopne
xlat
test
loope
fs
mov
in
or
push
imul
jmp
inc
inc
jno
push
in
cmp
bound
retf
loope
or
cmp
jne
pop
or
repz
call
sub
icebp
sbb
pop
imul
sbb
int3
gs
mov
test
into
fs
iret
call
idiv
add
and
mov
xchg
rol
fs
and
dec
push
sub
js
sahf
jae
add
xchg
aas
dec
xchg
push
mov
ret
in
xchg
push
fnstsw
out
enter
dec
push
dec
or
ja
push
cmp
imul
sub
xchg
jnp
ror
push
(bad)
ds
mov
cmp
clc
ret
mov
inc
jmp
jmp
in
cmc
sar
xchg
pop
pop
sbb
sub
xor
cmp
cs
push
retf
inc
sbb
jo
jmp
call
mov
pusha
sbb
(bad)
push
or
in
(bad)
mov
push
xchg
jmp
mov
sbb
xchg
mov
push
fstp
ret
mov
pop
mov
ret
das
fimul
mov
mov
adc
xchg
outs
(bad)
in
cmp
xchg
push
nop
mov
push
test
out
jmp
and
push
mov
and
into
retf
jle
popf
imul
gs
and
xor
add
jmp
outs
sub
lds
xchg
ins
mov
push
inc
pop
int3
mov
imul
pusha
cwde
jle
xchg
retf
pop
mov
jg
cmps
or
retf
movs
lea
cmp
test
sbb
(bad)
je
cmp
jge
xchg
push
imul
dec
xchg
and
popa
add
xor
std
or
pop
int
cmp
pushf
mov
(bad)
lock
inc
pushf
mov
leave
cdq
sbb
jmp
xchg
gs
aas
xlat
add
sub
into
fidivr
cmp
das
pop
push
dec
mov
inc
pop
push
inc
cmp
imul
mov
je
and
lahf
adc
jg
lea
aam
int3
jp
lods
push
jns
push
push
jg
and
adc
test
fcmovnb
ret
jbe
adc
retf
sbb
fdivr
inc
and
cmc
pop
mov
mov
scas
cmps
mov
leave
push
adc
outs
ret
fdivr
ds
mov
lods
lods
inc
lds
call
lock
sbb
(bad)
mov
into
adc
fwait
inc
loope
imul
aaa
dec
arpl
mov
mov
jo
fld
cmp
aad
sub
nop
sub
mov
jecxz
xchg
dec
push
mov
inc
push
xor
pop
stos
push
popa
cdq
aad
xchg
rcl
es
push
dec
out
jno
std
ins
repnz
jg
jno
in
bound
test
pop
dec
sbb
pop
mov
(bad)
(bad)
dec
mov
aas
push
pop
push
ins
cmp
imul
fcom
movs
inc
jbe
dec
mov
js
sbb
add
or
mov
out
(bad)
test
out
push
adc
out
fs
sbb
mov
gs
ret
loop
xor
xchg
cli
dec
stc
imul
ss
test
dec
jbe
cmp
out
ret
ins
(bad)
in
cdq
addr16
pop
xchg
cs
dec
pop
out
pop
movs
jns
(bad)
imul
mov
add
movs
mov
mov
dec
popf
(bad)
xchg
mov
int
ss
cli
xchg
mov
xor
shr
fidivr
and
pop
cwde
jp
rcr
xor
add
imul
pop
dec
stc
nop
clc
mov
fdivr
mov
or
ret
and
imul
(bad)
stc
xor
cwde
cmp
cmp
(bad)
mov
push
and
mov
aad
ins
(bad)
push
ins
mov
cmp
dec
xor
mov
vpcomfalseub
addr16
test
mov
cmp
mov
shl
pop
nop
sbb
pushf
sub
ret
loop
push
(bad)
cli
or
ins
cmp
pop
mov
jl
xchg
test
mov
fsubr
call
inc
mov
loop
lock
push
cmp
pop
(bad)
imul
shl
clc
mov
fiadd
stos
mov
cwde
out
cmp
pusha
call
jmp
out
jle
hlt
jp
xor
lods
ss
inc
imul
fwait
xchg
(bad)
nop
or
data16
mov
mov
out
push
mov
xor
mul
scas
or
mov
data16
xchg
mov
imul
mov
rol
or
pop
clc
or
adc
mov
push
add
ret
in
mov
popw
mov
fisub
add
jge
sbb
mov
cmp
push
push
or
shl
or
sub
lahf
xchg
push
daa
sub
and
aas
xchg
mov
push
dec
adc
xor
sbb
dec
sub
inc
inc
repz
mov
iret
ss
mov
arpl
add
dec
std
dec
lods
push
dec
xchg
pop
js
jb
repz
xor
pop
loop
push
neg
out
mov
jne
stos
inc
scas
xchg
pop
test
or
loop
xchg
cmps
add
push
fnstsw
push
xchg
popaw
adc
jle
mov
pushf
mov
xor
fs
ss
(bad)
dec
jmp
push
aas
cmp
aam
das
inc
pushf
mov
lea
cmps
xor
or
ins
mov
jl
rcl
cmps
cld
pop
ret
dec
mov
jne
mov
shl
std
and
out
shl
mov
call
push
or
cmp
push
ins
ss
ds
adc
jbe
push
push
test
in
fnstenv
cmp
test
jbe
and
aas
fisttp
cmp
push
sub
and
mov
push
xchg
test
or
lods
popw
pop
mov
mov
in
cdq
sub
cmp
push
inc
mov
jp
or
add
repz
push
jb
fsub
test
or
adc
jnp
dec
mov
ins
or
mov
adc
push
and
es
adc
cld
enter
or
loopne
es
or
xor
movs
(bad)
and
fild
call
retf
push
mov
dec
ins
push
inc
push
movs
out
mov
(bad)
cmp
int
jnp
or
imul
jecxz
lods
push
ror
int3
push
jp
stc
jb
scas
push
or
movs
mov
xchg
mov
sub
cmp
daa
mov
dec
sbb
mov
ds
adc
push
jne
(bad)
mov
adc
aaa
mov
ins
push
(bad)
xor
sub
add
aad
out
and
xchg
xchg
and
mov
scas
dec
push
pop
out
sbb
push
daa
test
fdivr
imul
idiv
or
sub
jp
mov
fild
call
mov
inc
fild
imul
pop
dec
aas
vmovss
loop
mov
mov
pop
cli
movs
lods
jae
dec
lock
icebp
push
sub
sub
jae
mov
xchg
pop
shl
arpl
js
cmp
ins
xchg
lods
cs
lods
cmp
test
sbb
aas
pop
int3
push
mov
push
pop
adc
inc
leave
push
mov
adc
sub
popf
and
out
ins
daa
push
or
scas
mov
add
in
pop
jnp
add
repz
adc
or
out
mov
jb
inc
loop
mov
xchg
dec
cmp
or
int
div
pop
scas
pop
or
ror
mov
pop
inc
sbb
add
sub
add
dec
movs
test
xor
and
repnz
sub
xchg
cld
cmp
xchg
or
cmp
imul
adc
xchg
out
mov
sbb
xchg
cmps
scas
push
(bad)
shr
cwde
pop
or
fsub
cld
ins
dec
lock
retf
retf
jb
ret
lahf
mov
or
shl
add
aam
mov
sti
mov
dec
stc
jecxz
push
(bad)
ds
fwait
mov
jne
aad
leave
or
cmp
mov
sub
in
adc
aaa
lds
and
fwait
sub
popf
hlt
mov
and
mov
jl
and
movs
mov
fstp
adc
stos
jns
icebp
sbb
fwait
mov
pop
jmp
ds
pushf
mov
movs
mov
add
jbe
das
jbe
add
call
cmp
rcl
test
inc
push
sbb
(bad)
mov
ins
enter
xchg
inc
rcl
cmp
xchg
cmp
fstp
test
jmp
mov
fisub
or
test
xor
call
mov
in
mov
ins
test
imul
or
test
shl
jo
mov
dec
fist
inc
xchg
lock
push
cmp
scas
bound
stos
lahf
or
loopne
sbb
inc
mov
call
mov
xor
arpl
mov
sub
dec
mov
dec
ret
mov
mov
xor
push
adc
pusha
loope
iret
stos
or
rcr
xor
dec
mov
leave
mov
sub
das
call
jmp
xchg
dec
jb
scas
adc
xchg
adc
sar
sub
mov
mov
and
inc
das
test
call
iret
inc
daa
leave
dec
xchg
fld
mov
add
dec
push
mov
adc
loop
push
stos
xchg
push
or
ds
out
adc
popa
outs
movs
xor
inc
xchg
inc
call
sub
div
out
neg
push
movs
js
ror
cmp
jae
outs
xchg
add
pushf
icebp
es
aad
and
out
add
mov
test
pop
test
addr16
push
mov
movs
cmp
mov
add
inc
jmp
pop
push
jl
mov
jecxz
ins
xchg
or
cmc
mov
ror
fwait
inc
push
pop
test
push
hlt
xchg
adc
push
out
adc
ins
sub
and
push
mov
pop
test
add
repz
daa
cmp
xor
in
cmps
cs
adc
std
leave
call
out
hlt
xchg
cmp
pop
jmp
sbb
pop
pop
or
and
fnsave
lds
dec
shl
das
xchg
mov
mov
ror
jne
ds
sbb
fwait
sbb
jp
lea
jae
fild
mov
xchg
outs
mov
out
sar
scas
outs
sbb
push
rol
lds
jo
and
mov
mov
add
lea
push
jl
imul
fdivr
xor
not
jmp
aas
cmp
mov
scas
sub
(bad)
pop
sahf
paddw
int
ret
outs
test
icebp
adc
jmp
outs
fld
adc
jl
jmp
nop
out
mov
bswap
repnz
sbb
pop
mov
fwait
mov
push
dec
sti
imul
xchg
les
test
add
int
pop
wrmsr
stos
sbb
or
jae
retf
clc
pusha
add
and
sahf
std
xor
pop
inc
int3
ffree
int
lods
dec
push
imul
mov
(bad)
int3
pushf
mov
mov
and
adc
idiv
scas
das
pushf
int
(bad)
ins
dec
mov
hlt
mov
scas
fs
xor
add
mov
pop
repnz
fs
js
ret
loop
sbb
or
push
cs
ret
fs
jle
sbb
mov
mov
out
rcr
in
lahf
sbb
jno
fild
sahf
in
hlt
jne
sub
pop
(bad)
dec
or
jecxz
stos
mov
loopne
cmp
inc
in
fmul
push
or
cmp
in
push
pop
cmp
ss
das
and
dec
jo
ret
mov
cmp
stos
adc
xor
cli
test
aam
xor
inc
(bad)
cli
dec
pop
cmp
pop
inc
fstp
imul
xor
ins
cs
imul
rcr
(bad)
jb
iret
shl
outs
in
punpckhwd
cli
sbb
retf
sbb
cmp
movs
div
pop
arpl
daa
xor
jp
jns
dec
pop
add
iret
(bad)
ins
pop
mov
pop
and
cs
ss
outs
pop
cld
shl
inc
inc
fld
cmp
ds
jb
xor
cwde
repz
idiv
sub
mov
mov
pop
rcr
mov
scas
add
ret
test
push
daa
popf
sbb
push
movs
dec
push
pop
les
pushf
out
add
mov
and
hlt
sbb
sti
push
xchg
fild
in
push
jnp
dec
mov
movs
xchg
loope
pop
adc
mov
jbe
gs
sbb
addr16
adc
(bad)
jmp
into
fs
jo
inc
shl
sar
mov
xchg
cmp
test
es
mov
mov
cld
(bad)
pop
popf
shl
(bad)
(bad)
vrsqrtps
pusha
imul
add
mov
pop
jns
ss
xor
imul
adc
pop
pop
dec
inc
pop
mov
cmp
adc
push
inc
popf
and
ss
(bad)
pusha
iret
pop
add
mov
xchg
(bad)
mov
fsub
xchg
inc
sbb
pop
push
jl
popf
cmp
or
(bad)
pop
mov
daa
jo
bound
dec
push
fild
pop
pop
adc
push
test
jo
and
retf
dec
inc
jb
stc
adc
call
sbb
stc
adc
icebp
mov
xor
xor
jge
punpckldq
dec
test
out
inc
mov
xchg
push
jb
movs
out
inc
or
sub
xchg
cmp
out
(bad)
movs
xchg
pop
icebp
add
repz
pop
mov
jl
and
in
dec
mov
mov
(bad)
cmp
data16
call
fiadd
imul
mov
lods
push
mov
daa
in
mov
and
(bad)
jae
cmp
mov
cli
cli
jmp
dec
mov
mov
test
stos
adc
cmp
pusha
loopne
movs
fmulp
push
or
rcl
repnz
mov
cli
call
pop
fiadd
push
popf
inc
pushf
cld
sub
addr16
ss
sbb
pop
jp
pop
clc
movs
test
fcomi
inc
jle
popa
xchg
scas
std
push
inc
jo
jmp
xor
dec
and
fmul
sbb
ins
inc
in
mov
ror
mov
in
stc
retf
popa
mov
pushf
sub
not
loopne
add
mov
cmps
inc
add
std
ins
jmp
retf
scas
pop
push
fs
push
movs
int3
or
out
sbb
mov
cs
scas
xor
cld
arpl
sti
fdivr
inc
lea
mov
js
idiv
mov
sub
jp
sti
jae
call
mov
mov
and
push
int3
xchg
lea
inc
lar
add
add
mov
mov
clc
nop
add
mov
fsubr
push
push
hlt
lock
dec
push
out
pop
iret
sub
cld
dec
inc
push
mov
data16
scas
jae
mov
jmp
jnp
out
in
mov
adc
int
pusha
sbb
cmps
out
adc
adc
jmp
jp
mov
jle
imul
or
dec
test
data16
test
(bad)
add
hlt
gs
jnp
mov
imul
cld
lock
jge
test
repz
imul
push
jg
outs
test
data16
cmp
cmp
adc
cld
sbb
adc
data16
mov
imul
sbb
add
(bad)
sub
add
je
inc
mov
mov
jno
adc
stc
(bad)
or
pop
push
xor
xchg
aas
repnz
aam
xlat
jae
movs
hlt
push
push
jne
mov
inc
fst
lods
call
xchg
adc
push
sub
pusha
call
adc
cwde
cmc
pop
cmp
adc
outs
scas
out
sahf
ja
inc
inc
scas
enter
pop
jo
adc
in
mov
add
mov
jl
jo
aad
mov
hlt
movs
test
mov
stos
and
inc
xchg
lock
(bad)
aas
push
push
cmps
je
clc
das
sbb
add
pextrw
jno
pop
clc
popa
shl
and
and
test
ja
mov
push
sbb
dec
mov
movs
mov
jnp
mov
fsub
stos
mov
repz
enter
mov
ds
jo
shl
cdq
xbegin
sbb
leave
sbb
mov
cmps
or
leave
pop
loop
pop
leave
in
ss
sub
popf
adc
lock
push
dec
mov
mov
push
fldcw
(bad)
sub
adc
sub
mov
and
addr16
and
popf
cwde
dec
bound
cmp
mov
sahf
pop
xor
pushf
mov
out
loop
push
dec
mov
cmps
or
shl
or
out
push
(bad)
(bad)
sub
jb
hlt
xlat
and
mov
or
cld
inc
inc
es
pop
lds
add
fld
mov
push
xchg
mov
mov
mov
xchg
shl
sub
push
fs
cmp
push
xlat
xor
fs
cmp
fistp
mov
arpl
sub
sbb
pop
(bad)
in
and
jle
push
int
sbb
(bad)
out
jb
fidiv
jne
inc
jl
mov
and
dec
sbb
(bad)
inc
push
retf
and
imul
sbb
(bad)
addr16
inc
push
bound
les
and
push
cmp
push
or
and
aad
stos
or
arpl
aam
(bad)
inc
push
das
or
loopne
(bad)
cmp
(bad)
sub
cld
mov
enter
pop
(bad)
fwait
aam
xor
xchg
push
inc
pop
loopne
clc
add
add
out
cmp
loop
sbb
jmp
and
mov
cmp
cmp
cli
add
test
lods
ficom
es
repnz
cmp
inc
add
push
mov
shr
jae
dec
(bad)
sahf
or
jns
sbb
outs
in
ficom
fmul
ins
mov
out
xchg
test
adc
sub
adc
mov
fcomi
push
add
xor
sub
bound
cmps
pop
int3
loop
out
pusha
mov
jecxz
dec
sub
inc
push
pop
mov
es
mov
adc
push
or
push
push
cld
cli
test
sbb
into
or
sar
je
push
data16
push
lahf
imul
rol
cmp
push
sahf
sbb
imul
add
repnz
dec
pop
stc
or
je
add
lods
add
mov
jge
jno
mov
jb
or
scas
mov
xchg
mov
sahf
hlt
aad
rol
inc
jo
pop
out
(bad)
or
pusha
mov
cld
adc
jmp
(bad)
outs
sbb
xor
mov
or
mov
lods
push
in
xchg
mov
sub
jo
mov
jl
sbb
cmp
xor
push
ds
cmp
push
mov
sbb
push
cmp
sbb
and
loop
mov
ret
dec
mov
adc
sub
mov
jmp
jp
cmp
adc
popa
xor
sub
fucomp
out
or
inc
sbb
shl
(bad)
jp
ins
pushf
mov
fsub
std
add
or
adc
in
cmp
add
push
mov
inc
(bad)
xor
mov
dec
cmp
xor
int
popf
pop
mov
mov
rol
test
ds
xor
xchg
xor
fisubr
js
cmp
mov
adc
dec
dec
inc
jp
fnstcw
mov
cmps
sub
cmps
imul
dec
stos
lods
addr16
mov
xor
(bad)
stos
or
clc
cmp
or
jo
jg
add
inc
sub
pop
mov
pop
movs
sbb
xchg
xor
mov
and
adc
(bad)
xchg
xor
rol
jb
add
xchg
pop
push
sub
inc
push
pop
inc
fstp
push
add
jae
sub
mov
ret
cmp
inc
cwde
or
iret
hlt
das
push
sbb
test
mov
push
jne
mov
clc
movs
jbe
mov
fimul
or
xor
sahf
sbb
jo
test
(bad)
fstp
push
loop
aas
adc
or
add
inc
out
mov
sub
push
mov
sahf
and
fs
(bad)
call
frstor
(bad)
mov
scas
ret
and
rcl
icebp
mov
xchg
iret
mov
les
test
fisttp
loope
fdiv
cwde
jl
daa
fcomp
cmps
sti
(bad)
xor
mov
mov
mov
in
jae
add
shl
bound
iret
pop
mov
shl
test
clc
imul
sub
ins
movs
lods
aam
pop
sbb
cdq
int3
shr
inc
push
out
ret
les
mov
push
mov
pop
inc
sbb
sub
add
stos
scas
scas
add
inc
xchg
pop
push
push
pop
jne
enter
xor
push
(bad)
imul
enter
mov
mov
xchg
sbb
or
sahf
jne
stos
iret
out
enter
or
enter
sti
iret
pop
pop
inc
add
jae
bnd
dec
(bad)
aaa
clc
mov
push
jle
dec
adc
outs
or
jno
jno
pop
fidiv
jb
mov
stos
lock
scas
jmp
shr
sub
into
lods
jle
es
dec
ret
sub
arpl
sub
add
jo
jns
jno
xor
or
xchg
imul
mov
call
pop
push
or
pop
sti
ret
push
outs
mov
call
cs
repz
dec
pop
loop
push
push
addr16
ins
stos
and
or
dec
push
fs
pop
pop
int
call
mov
rcl
test
(bad)
jb
xor
mov
mov
sub
push
xchg
je
(bad)
rcl
retf
out
jmp
data16
mov
mov
loop
xchg
cmp
bound
fist
adc
mov
or
ins
mov
loopne
and
pop
jns
fistp
scas
mov
retf
(bad)
(bad)
jmp
cmc
ins
inc
movs
sahf
mov
dec
sub
aam
dec
sti
ret
loopne
pop
jbe
daa
mov
pop
sub
adc
push
lods
dec
inc
jle
sti
add
addr16
mov
xor
(bad)
std
ror
add
or
out
in
fcmovu
(bad)
mov
jbe
fs
pop
jecxz
push
(bad)
sahf
ret
shl
sbb
and
xchg
retf
test
fldcw
sub
jle
cdq
inc
jmp
imul
int
sbb
mov
std
push
(bad)
or
adc
jbe
or
(bad)
xchg
mov
pusha
in
xchg
sub
add
ret
jl
xchg
loopne
clc
int3
adc
xor
loopne
cmp
sub
and
push
xchg
and
jnp
hlt
push
xchg
add
cmp
cdq
test
and
lahf
repnz
(bad)
repnz
dec
mov
sti
pop
push
in
push
int3
sub
push
pop
(bad)
gs
cwde
mov
mov
add
sbb
scas
int3
shl
push
mov
pop
and
fst
and
arpl
lea
dec
xchg
and
repz
retf
push
clc
retf
cmp
jno
stc
loopne
shr
sbb
iret
call
retf
sbb
xchg
jg
inc
hlt
or
dec
fcom
or
ds
sbb
lods
add
test
nop
sbb
sbb
jo
push
mov
fcmove
inc
xchg
lahf
add
cmc
loopne
dec
jle
push
and
mov
xor
test
sbb
lods
pop
xor
jmp
jmp
mov
mov
or
movs
out
mov
mov
sahf
imul
mov
aas
mov
pushf
retf
dec
xchg
ds
or
add
mov
cmp
popf
in
adc
stos
lock
cld
aaa
jae
mov
pop
xor
call
(bad)
clc
or
sahf
mov
or
push
push
pop
sbb
jae
aad
mov
xlat
test
ja
stc
ds
dec
mov
int
push
mov
sub
cmp
js
repnz
stos
jp
mov
mov
jne
mov
mov
adc
mov
and
or
xchg
mov
pop
icebp
out
aas
inc
popf
fimul
dec
pop
int3
inc
xor
adc
sbb
inc
push
gs
jns
(bad)
mov
in
sahf
std
clc
(bad)
(bad)
stc
int
cmps
mov
xor
shl
xor
cmp
pop
mov
(bad)
addr16
out
jecxz
nop
into
cmp
js
sbb
nop
or
pusha
mov
out
xchg
mov
hlt
std
je
mov
jae
mov
add
add
loop
out
dec
mov
adc
sahf
out
push
push
push
or
fdivr
aam
loop
cmp
ficomp
adc
adc
fs
push
loopne
dec
aas
xchg
cmps
or
inc
dec
adc
test
mov
mov
dec
xlat
(bad)
cli
pop
mov
xchg
les
cmp
xor
ins
fild
data16
inc
scas
jbe
lods
icebp
xchg
nop
and
fs
in
(bad)
retf
xchg
and
jmp
adc
jg
xor
sbb
adc
push
fadd
jns
jmp
pushf
ins
xor
enter
xchg
nop
xchg
jle
xchg
ror
dec
push
ds
mov
out
adc
fidiv
xlat
inc
and
repnz
mov
xor
hlt
and
fcomp
lock
jecxz
or
mov
lahf
js
mov
xor
dec
stos
mul
push
mov
test
(bad)
int
dec
jo
mov
mov
sub
adc
test
aas
int3
retf
fisubr
aad
ins
jmp
aam
push
sub
scas
mov
add
push
leave
mov
stos
jbe
bound
aad
mov
jae
lods
aas
(bad)
inc
retf
out
mov
cmp
adc
jl
retf
mov
sub
repz
dec
(bad)
mov
cmps
xchg
add
(bad)
pop
dec
mov
std
ins
sub
jl
xlat
mov
es
pop
inc
dec
je
push
repnz
jnp
and
movs
push
xor
pop
jp
cmps
call
push
or
repz
imul
rcr
aaa
mov
neg
in
enter
push
jae
push
jns
mov
dec
rol
out
repz
mov
inc
pop
neg
mov
mov
retf
xchg
jmp
mov
addr16
and
add
xlat
out
loop
fld
mov
outs
pop
test
inc
push
ror
push
ins
xor
dec
cmp
pop
and
sahf
and
xchg
fs
stc
fbld
aas
cmps
js
cli
out
push
fst
pop
lea
clc
fsub
iret
mov
int3
adc
ror
std
nop
mov
ret
in
sub
and
adc
ins
inc
xchg
repz
(bad)
nop
ja
int
dec
add
pop
std
dec
addr16
jg
xchg
cli
inc
pop
out
cwde
aad
neg
pop
lock
and
cli
push
sbb
aad
and
call
xchg
in
adc
mov
ret
ins
pusha
cdq
rol
out
jae
xor
lahf
(bad)
call
dec
add
xor
pushf
fld
loope
sbb
popf
mov
(bad)
test
xchg
push
aad
pop
add
fcom
push
cli
xchg
lods
popf
sub
(bad)
outs
jno
clc
in
sub
adc
or
sub
jle
je
lods
mov
push
ror
cdq
inc
jnp
lods
(bad)
xchg
shr
test
movs
cdq
cmp
mov
jle
push
dec
inc
xchg
lock
push
and
repz
stos
cmps
mov
mov
push
arpl
inc
clc
clc
ja
pop
sbb
and
stos
push
cdq
lahf
mov
repnz
mov
outs
call
(bad)
mov
hlt
xor
push
dec
cmps
jns
pop
ins
fistp
repz
and
pop
fnstsw
daa
ins
loopne
(bad)
cmp
je
dec
ins
call
retf
sub
xlat
aad
out
cmp
adc
push
icebp
add
movs
hlt
sti
int
cmp
lock
(bad)
and
xchg
xor
push
(bad)
sub
inc
movs
(bad)
mov
xor
rcr
jl
or
sub
sub
js
add
out
push
int3
pop
xchg
inc
mov
test
test
cmp
clc
mov
icebp
mov
inc
pop
or
cmp
add
or
xchg
cwde
ins
pop
and
jecxz
adc
push
sbb
mov
popf
bound
push
inc
jne
cdq
cld
mov
mov
je
pop
imul
lds
int3
push
push
outs
pop
test
pusha
mov
jmp
aad
and
call
outs
rcr
pop
out
fistp
ss
(bad)
fnstsw
xor
mov
inc
xchg
jnp
test
cmp
inc
rol
lock
into
jecxz
push
mov
jl
xchg
lea
arpl
and
jmp
cmp
das
(bad)
and
add
and
in
mov
xor
fisubr
xlat
adc
inc
mov
daa
sub
jecxz
in
xor
push
mov
ret
jecxz
ja
(bad)
aaa
and
lds
jle
cmp
loop
test
test
cmp
ret
sbb
test
dec
sbb
rol
jnp
cwde
inc
inc
or
push
push
sub
repnz
sbb
fwait
xchg
jno
inc
test
push
scas
push
shl
inc
jecxz
dec
add
das
dec
out
dec
xchg
dec
and
pushf
ret
mov
push
xchg
jo
(bad)
aam
sub
mov
push
xchg
test
in
inc
or
pop
stos
cs
aad
adc
xor
scas
clc
int
xchg
jl
cli
dec
and
loop
clc
rcr
inc
loop
adc
ficomp
sbb
pop
dec
mov
(bad)
dec
add
imul
fisub
int3
scas
mov
imul
mov
add
ss
dec
aaa
mov
ret
ds
mov
xchg
(bad)
mov
mov
cs
loop
lods
js
out
clc
movs
in
repz
in
mov
push
dec
adc
int
jmp
daa
push
and
es
jle
ds
pusha
paddsw
bound
jmp
dec
shl
dec
(bad)
call
jp
xchg
and
jb
pushf
test
jae
imul
inc
shl
mov
inc
movs
aaa
mov
xor
in
pop
push
sub
xor
loope
scas
inc
cmp
seta
out
mov
stc
or
pop
idiv
pop
inc
mov
push
clc
in
das
and
scas
xchg
mov
lods
fwait
(bad)
leave
fidiv
hlt
and
cmc
add
outs
or
mov
xchg
(bad)
mov
pop
cmps
mov
rcr
leave
loopne
stc
adc
mov
out
sub
pop
bound
fwait
xlat
xchg
inc
call
pop
cmc
cmp
xchg
jl
stos
dec
inc
nop
rcl
cmps
cwde
jp
popf
addr16
xor
or
or
pop
mov
lods
shl
push
jmp
shr
add
xchg
jl
or
cdq
push
pop
push
xor
retf
cmovne
retw
or
call
jg
jo
mov
or
(bad)
mov
sbb
jmp
pop
adc
popa
mov
jmp
jmp
sahf
dec
inc
xchg
pop
test
iret
ins
adc
xor
jmp
mov
pop
in
mov
mov
or
pop
xor
fucomi
addr16
xlat
mov
xchg
les
pop
cs
out
pop
rcr
xor
stos
fbld
inc
loope
xor
cld
pop
sub
sti
mov
(bad)
jmp
cmps
sbb
js
jb
cmp
xchg
mov
sub
adc
fcmovb
ficomp
push
stc
call
mov
pop
enter
xchg
mov
or
aaa
stos
jecxz
mov
movs
jns
jo
adc
and
add
xor
mov
pop
mov
and
xor
pop
call
fist
(bad)
outs
adc
cmps
jmp
jno
xchg
mov
ret
bound
sti
xor
or
or
adc
push
mov
in
dec
es
sbb
push
imul
ret
mov
push
(bad)
scas
pushf
mov
jecxz
out
mov
and
mov
loop
ins
stc
adc
mov
aaa
jecxz
in
or
mov
jp
jmp
jle
fucom
sub
mov
jecxz
jecxz
jge
dec
jns
les
stos
popa
sub
fwait
test
cmp
lea
mov
ja
cmp
mov
push
fisttp
pop
mov
jmp
sbb
pop
leave
int
inc
fidiv
(bad)
sbb
add
rol
pop
iret
or
cwde
pop
aam
out
shl
xchg
shl
movs
into
outs
pop
cmp
test
add
or
push
popf
loope
mov
xchg
mov
aad
add
neg
mov
mov
mov
inc
sbb
movs
xor
(bad)
outs
mov
sbb
daa
lods
rol
push
add
sub
jle
add
xchg
sub
push
sbb
sub
dec
cmp
dec
mov
inc
pop
jge
loope
sbb
cdq
gs
jns
dec
jle
mov
out
aad
adc
mov
sub
cmps
mov
xchg
pusha
repz
sub
test
sbb
lock
(bad)
xchg
mov
jge
jbe
stos
mov
outs
rcr
jae
loopne
inc
pushf
mov
and
addr16
sbb
cdq
les
dec
dec
pusha
xchg
sub
adc
lods
sub
dec
out
imul
pop
jne
out
ins
cmps
aaa
dec
in
lahf
hlt
xor
(bad)
fstp
movs
sbb
push
sahf
aam
fsub
mov
gs
mov
mov
fild
and
jno
popa
mov
push
sub
dec
arpl
loop
jae
aas
sahf
mov
or
ins
popf
in
mov
jge
(bad)
and
push
sbb
iret
push
clc
xchg
pop
gs
repz
mov
addr16
mov
aam
xchg
and
movs
mov
fadd
push
mov
cmp
inc
pop
cs
pushf
jle
xor
inc
mov
test
icebp
sub
rol
addr16
jecxz
sub
pop
lea
adc
cmp
pop
in
cld
lods
ficomp
repz
aam
mov
inc
dec
sub
sub
sub
xor
scas
mov
push
stos
and
inc
inc
sbb
pop
inc
ret
loopne
test
dec
loop
loope
mov
dec
sub
pop
pop
imul
jns
sbb
mov
xor
popa
inc
clc
add
aam
aas
fs
add
in
dec
sahf
jbe
and
cmp
fxch
into
sub
lods
xchg
dec
in
retf
push
nop
retf
cmp
mov
mov
mov
mov
sbb
inc
jp
hlt
and
test
sub
js
ror
mov
repnz
addr16
mov
imul
jne
cmp
and
shl
sbb
and
adc
stc
stos
mov
sbb
pop
adc
aam
pop
xor
(bad)
js
xor
sub
mov
adc
xchg
xlat
xor
pusha
push
dec
sub
lds
in
mov
out
(bad)
mov
fs
sbb
dec
movs
lea
pop
mov
cld
imul
shl
repnz
icebp
cmp
pusha
add
push
jae
mov
repnz
in
popa
test
popa
pop
arpl
rcl
pop
pop
fnstsw
inc
fcom
faddp
push
mov
ja
lods
cmp
xchg
push
and
pop
jbe
pop
mov
pop
les
nop
jns
lahf
mov
or
and
sub
fadd
outs
bound
les
mov
jo
sti
movs
sbb
mov
in
xor
fmul
mul
jecxz
mov
ret
or
xchg
outs
dec
push
out
adc
pop
mov
jge
fsubr
xor
cwde
push
pushf
add
js
push
dec
ins
test
or
mov
jnp
lock
push
jmp
daa
mov
mov
gs
cmp
or
dec
jae
rcl
ds
xchg
es
aam
xchg
sbb
pop
(bad)
pusha
adc
repnz
lock
iret
xor
pop
fsubr
inc
test
fild
jle
push
retf
xor
lods
repnz
mov
mov
clc
jecxz
inc
pop
xchg
int
neg
mov
mov
jmp
(bad)
pop
cmp
(bad)
retf
test
xchg
sahf
inc
xchg
push
xor
xchg
xor
repz
fstp
add
jecxz
or
mov
mov
cli
(bad)
mov
inc
inc
or
repnz
and
outs
mov
inc
cmp
loopne
adc
jmp
mov
adc
adc
movs
or
test
mov
jb
jmp
dec
mov
xor
mov
popf
hlt
ins
(bad)
xchg
aam
(bad)
sub
xchg
push
dec
shl
sahf
popf
pop
xchg
inc
jb
mov
je
inc
push
push
ins
ret
inc
(bad)
cli
fnstsw
jne
out
out
mov
sar
(bad)
and
das
sub
sub
fcom
mov
imul
call
into
scas
sub
push
out
out
mov
in
cmp
cdq
lock
dec
xchg
lods
stc
adc
repnz
imul
ror
add
mov
xchg
xchg
sub
retf
into
dec
adc
(bad)
fnstcw
daa
add
jne
mov
hlt
jecxz
push
push
dec
xor
dec
mov
xor
shl
xchg
dec
adc
stc
inc
mov
das
test
cmp
stos
mov
or
mov
daa
sbb
xchg
addr16
jmp
popa
sub
(bad)
cmp
mov
inc
xor
or
inc
cmp
xor
mov
add
pop
pushf
cmp
jns
push
int
cld
ret
mov
imul
out
int3
imul
mov
icebp
adc
cdq
cmp
dec
push
add
mov
sbb
or
(bad)
cwde
dec
cdq
mov
xchg
add
scas
into
mov
mov
mov
aam
and
pop
aas
arpl
fcomp
dec
push
cwde
dec
inc
popa
jnp
mov
pop
aam
sbb
mov
push
jge
or
aam
xchg
mov
scas
fistp
cmp
adc
jbe
(bad)
and
pop
(bad)
hlt
cmc
pop
add
sub
sbb
pushf
fnsave
sub
mov
out
imul
mov
dec
(bad)
clc
aad
out
jmp
out
pop
daa
cmp
retf
cmp
ds
xor
jmp
lahf
xor
or
push
sbb
xchg
call
mov
add
pop
cs
pop
in
mov
jp
mov
fwait
xchg
jne
or
ins
outs
js
mov
retf
popa
hlt
cmp
es
loop
test
jnp
or
fidivr
xchg
mov
arpl
inc
inc
lahf
inc
aas
cmc
call
xchg
adc
int
adc
jns
xchg
scas
fwait
xlat
and
outs
jno
mov
dec
mov
test
inc
mov
inc
int3
mov
js
repz
pop
and
test
mov
inc
hlt
out
push
inc
jo
xchg
jmp
fnstenv
outs
pop
xchg
outs
nop
(bad)
bts
(bad)
add
push
add
fdiv
in
into
popa
push
sbb
idiv
xor
adc
jecxz
sar
xchg
jecxz
cmps
xor
push
hlt
pusha
mov
out
inc
xor
addr16
loop
cmp
mov
retf
test
int3
jmp
adc
fldenv
xchg
not
pop
dec
out
leave
mov
jnp
xchg
lock
stos
test
loop
clc
or
mov
cwde
pushf
cld
cmps
dec
inc
hlt
rol
mov
retf
mov
cmps
jae
lods
movs
(bad)
jno
ds
jp
dec
cmp
inc
mov
aaa
dec
xchg
je
cmps
mov
fild
repz
sahf
out
and
imul
push
mov
mov
jmp
in
leave
inc
out
lods
loop
test
push
mov
jecxz
in
mov
inc
inc
add
retf
pop
jge
ja
mov
rcr
mov
and
add
xchg
pop
lahf
pop
mov
sbb
mov
data16
sub
jmp
adc
icebp
sti
or
mov
in
mov
cwde
or
mov
jns
mov
lahf
push
mov
(bad)
in
push
xchg
gs
adc
mov
and
je
xchg
sbb
inc
and
sub
mov
inc
cmps
mov
adc
xchg
sbb
or
and
cmp
mov
mov
jo
(bad)
iret
out
mov
jo
inc
xor
xor
mov
mov
or
mov
add
add
cmps
jbe
mov
call
mov
jae
dec
cld
xchg
addr16
outs
xchg
xchg
dec
dec
aad
inc
fcom
xchg
in
aaa
dec
into
das
pop
push
and
add
mov
and
cmps
cmp
xchg
out
inc
(bad)
push
mov
sub
movs
lock
xchg
cmp
sti
enter
push
add
les
mov
aas
lock
std
hlt
retf
adc
repnz
dec
jnp
imul
xor
mov
mov
xchg
sub
fbld
adc
inc
or
sti
mov
add
cmp
scas
add
mov
adc
mov
push
popa
pop
sbb
enter
sub
push
(bad)
das
fcmovu
sub
aaa
mov
jmp
sbb
lods
aaa
pop
test
inc
inc
sahf
pop
in
fld
cmp
pop
cs
or
fdivr
sbb
cmp
inc
dec
add
stc
out
fstp
iret
pop
icebp
inc
sbb
iret
adc
ror
sbb
dec
jb
fisttp
add
pushf
stos
xlat
mov
movs
sbb
push
adc
mov
clc
cwde
mov
popf
repz
test
or
call
xchg
cmp
das
lods
push
pop
repnz
or
mov
mov
test
inc
hlt
clc
loopne
imul
sbb
jne
nop
inc
add
or
rol
sahf
inc
or
in
or
pcmpeqb
mov
sahf
gs
adc
mov
add
jbe
xchg
popa
and
push
mov
or
sbb
mov
popa
rcr
out
(bad)
mov
mov
int
jle
mov
xchg
xor
(bad)
push
xchg
daa
movs
(bad)
shl
icebp
and
jl
dec
xlat
cwde
retf
loope
pop
xor
push
leave
das
mov
icebp
and
sar
pop
popf
(bad)
push
add
(bad)
adc
dec
add
ins
loopne
sbb
add
xchg
ins
jge
adc
mov
ficomp
sbb
xchg
mov
inc
and
mov
nop
fwait
addr16
hlt
cs
outs
daa
mov
jb
cwde
add
or
in
dec
sub
sbb
lock
in
cs
sub
xlat
movs
jo
and
push
(bad)
xor
cmps
pcmpgtb
dec
(bad)
jmp
mov
ffree
(bad)
inc
push
cwde
adc
retf
pop
sahf
mov
loopne
(bad)
mov
mov
ins
add
stos
xchg
call
out
and
(bad)
push
dec
leave
out
mov
inc
xchg
jle
out
mov
mov
ss
add
mov
data16
ror
ins
xchg
fcmovnbe
out
push
ds
adc
shl
or
outs
adc
addr16
test
out
xchg
rcr
xor
xchg
jmp
addr16
jmp
push
neg
cmp
arpl
adc
enter
or
mov
out
ficom
add
outs
lock
pop
push
jge
push
xor
mov
jb
loopne
dec
imul
addr16
js
ss
push
add
cmps
jge
jb
loope
push
jae
mov
sub
and
lahf
mov
ja
pop
in
sbb
cmps
cmps
adc
or
imul
adc
inc
push
push
(bad)
cli
mov
sub
aam
js
inc
sbb
mov
dec
mov
jmp
into
inc
sbb
jo
push
call
jle
inc
add
dec
nop
test
imul
xchg
or
cmp
scas
pop
add
or
mov
sbb
or
xchg
mov
mov
xor
outs
loop
dec
mul
nop
pop
es
ins
aas
in
test
rcl
and
sbb
stos
xchg
mov
xlat
jmp
out
test
ret
and
mov
inc
jae
jno
xchg
pop
inc
sbb
fidivr
mov
lea
dec
popf
aam
mov
xchg
push
push
cmp
repz
jbe
pop
sbb
(bad)
rcr
or
push
std
out
sbb
jae
adc
out
aaa
int
pop
sub
dec
xor
mov
scas
into
mov
mov
push
inc
pop
push
jae
(bad)
cmp
push
jle
push
cmp
stos
xchg
es
inc
scas
enter
call
adc
xchg
jle
icebp
mov
push
clc
mov
jbe
sub
push
jns
xor
xor
add
pop
dec
inc
push
cdq
in
dec
jae
out
pop
add
xlat
and
stc
(bad)
fmul
adc
cmp
sti
int3
sbb
icebp
clc
add
cwde
pushf
pop
icebp
inc
pop
push
jo
xchg
ins
and
cwde
call
ficom
pop
xchg
ror
lock
out
mov
jnp
and
stos
test
clc
(bad)
je
(bad)
or
push
and
xlat
(bad)
popa
push
or
pop
imul
ds
jne
fwait
cmp
cmp
arpl
inc
retf
out
jle
push
push
pop
fdivr
jbe
add
mov
pop
adc
xchg
lea
aas
ja
cmp
aas
sub
mov
pop
call
mov
rcl
add
jle
loop
iret
fisttp
sahf
ds
fisttp
dec
jbe
sbb
mov
or
je
cld
aas
xor
jecxz
mov
dec
xlat
pop
xor
gs
into
jl
hlt
cs
and
dec
or
les
dec
pop
mov
sub
push
or
int
pmulhuw
push
xor
sbb
add
xchg
and
xchg
or
mov
cmp
cmp
inc
dec
pop
and
pop
mov
pop
cmp
inc
or
jno
and
push
mov
mov
ja
cmc
push
cwde
adc
mov
fs
cmc
imul
(bad)
aam
ret
push
sti
jbe
imul
fiadd
sbb
sbb
cdq
inc
push
das
(bad)
dec
in
fsubr
cmp
pop
xor
push
dec
mov
and
add
fwait
(bad)
dec
iret
loop
inc
mov
scas
mov
loope
(bad)
fs
mov
add
xchg
in
pop
sbb
(bad)
mov
and
hlt
and
not
nop
fbstp
cld
call
jb
dec
jmp
(bad)
leave
sbb
test
leave
test
xchg
mov
xor
push
sbb
add
mov
push
mov
repz
pop
add
push
stos
mov
pop
inc
rcl
inc
cmp
ins
cmps
push
push
cmp
jno
inc
stos
mov
fmul
popf
jno
setne
call
jnp
inc
out
add
sub
retf
mov
icebp
mov
xchg
or
ror
and
loop
fisubr
popa
push
push
sbb
adc
or
and
mov
xchg
jmp
shl
or
adc
pop
lods
mov
dec
jl
xchg
repz
mov
or
movs
mov
inc
dec
inc
mov
push
or
fadd
outs
retf
dec
ds
or
dec
and
pop
clc
jg
movs
out
cmps
popf
push
fcmovnb
mov
std
inc
neg
push
retf
lds
out
(bad)
out
lahf
popa
add
add
xor
or
jmp
jl
stos
int3
push
xchg
arpl
es
xor
cmp
icebp
push
jle
jl
test
jg
mov
sub
outs
push
dec
pop
lods
and
and
into
fstp
pop
push
js
retf
push
loope
or
arpl
and
lea
add
addr16
jno
out
in
pop
add
out
fiadd
fbstp
mov
push
aas
mov
(bad)
popf
or
sbb
daa
ins
inc
xchg
(bad)
mul
idiv
and
imul
stos
and
bound
cli
pop
push
jge
pop
adc
fs
pop
xchg
cld
push
dec
add
adc
sbb
xchg
cmp
retf
fwait
mov
xor
xchg
mov
call
or
mov
add
cmp
arpl
std
inc
aas
mov
dec
sub
pop
pusha
cmp
sbb
cdq
ret
imul
jo
popa
xor
mov
in
sbb
jnp
push
lods
mov
pop
xor
xchg
(bad)
movs
(bad)
leave
ret
ror
test
and
mov
mov
adc
cmp
in
adc
fwait
sub
xchg
(bad)
sub
lods
out
sbb
(bad)
jp
cmp
adc
ss
or
lods
test
cli
inc
pop
loop
leave
push
xchg
pop
dec
das
sbb
test
inc
in
sub
push
sub
mov
das
idiv
cmps
test
and
cld
or
mov
jge
test
out
inc
out
pop
rcl
fstp
xlat
lock
daa
pop
mov
and
call
cmc
dec
aam
(bad)
push
add
or
jb
outs
cwde
xchg
or
cmp
mov
xor
sub
shr
mov
mov
(bad)
gs
sbb
arpl
enter
xchg
imul
pop
dec
sar
adc
mov
xchg
xlat
push
outs
adc
xchg
jns
fadd
cmp
xor
xchg
jmp
adc
mov
out
mov
pop
sbb
add
out
push
jnp
sub
inc
in
pusha
(bad)
sub
shr
add
mov
mov
cld
daa
cmp
mov
fcomp
pop
aas
cld
xlat
not
cmp
sar
inc
or
cld
pop
in
and
sub
test
das
data16
xor
mov
test
daa
push
xlat
mov
xchg
jno
sbb
mov
xchg
and
mov
mov
or
inc
xor
mov
push
out
in
xchg
pop
xor
adc
dec
fsubr
pop
fcomp
std
stos
pop
rol
or
push
xchg
loop
jns
jnp
addr16
add
repnz
xchg
js
imul
(bad)
mul
or
cld
or
pop
sbb
iret
retf
push
pop
cmp
shl
push
ret
sub
pop
cli
mov
call
stc
icebp
stos
test
(bad)
cmp
add
pushf
cmp
repz
cmps
movs
mov
retf
pop
xor
lods
push
inc
push
call
mov
or
add
loop
aaa
add
add
jmp
outs
pushf
nop
aad
imul
test
movs
int3
fadd
inc
add
aam
inc
in
fs
test
(bad)
mov
idiv
rol
jmp
and
xor
(bad)
popa
and
call
lock
mov
xor
test
into
xor
ins
push
xchg
stos
fwait
pop
mov
pop
ins
or
ret
mov
xor
push
arpl
retf
xor
sahf
adc
jmp
jbe
fsubp
retf
push
es
aas
call
xchg
inc
jnp
mov
pusha
jne
jo
jmp
fbld
sahf
fwait
mov
(bad)
xchg
cmp
ret
and
pop
ja
pop
push
mov
add
out
test
(bad)
pop
push
sbb
add
test
sbb
or
shr
in
push
jae
xor
fdivr
inc
push
add
sub
f2xm1
mov
das
adc
pop
mov
cdq
fist
mov
fist
in
cdq
mov
add
dec
adc
fcmovnbe
loopne
dec
mov
fdiv
push
in
sub
jp
push
aad
jge
xchg
dec
loopne
jmp
call
mov
into
movs
mov
mov
ret
stc
cmp
test
pop
or
les
aaa
ds
mov
loope
or
ret
sbb
ins
aaa
in
mov
mov
xchg
dec
fsubr
add
rol
cmps
inc
in
push
ins
mov
sub
in
push
fwait
sbb
fist
test
dec
inc
arpl
and
cmp
and
jle
adc
jge
test
ja
adc
push
addr16
ret
inc
xor
add
mov
fwait
idiv
sbb
pop
ja
mov
jae
nop
dec
cmps
ret
mov
rcl
lahf
imul
aaa
shl
dec
retf
js
div
push
jg
mov
out
enter
mov
jp
pop
cwde
fsub
jmp
shl
sbb
lods
jg
cmp
add
xchg
cmp
push
retf
push
in
data16
into
clc
jge
or
or
cmc
je
sbb
data16
repnz
sub
xchg
aaa
movs
push
push
shl
imul
inc
shl
daa
adc
aad
sub
ins
sbb
jp
cmp
mov
iret
shr
sbb
push
push
sbb
sar
fidiv
nop
dec
sub
rcr
or
or
pusha
fcomp
push
out
popf
xor
and
push
push
and
les
nop
push
sar
call
xor
fwait
iret
ss
fs
loop
mov
mov
xchg
pushf
scas
shl
xchg
out
jno
enter
sbb
sbb
outs
adc
mov
in
jecxz
or
and
cmp
cmc
je
ret
xchg
sub
aam
add
xor
loope
outs
inc
les
ret
hlt
data16
pop
sbb
stos
or
cs
jmp
and
mov
jae
xchg
lds
mov
call
outs
icebp
repz
inc
ret
dec
push
imul
jge
in
lea
dec
xor
test
pop
stc
or
(bad)
ins
jnp
shr
xchg
mov
enter
sti
bound
retf
icebp
fisub
(bad)
or
xor
xchg
cmp
mov
hlt
or
test
add
sub
adc
rcr
rcl
add
inc
cmps
or
ret
das
out
mov
bound
arpl
mov
sub
dec
cmp
cmp
sbb
jmp
or
xchg
mov
cmc
push
adc
sub
sahf
inc
leave
mov
xor
pusha
inc
mov
xor
clc
je
cmps
cmps
cs
xchg
push
test
jmp
xor
cmps
add
sbb
bound
add
into
mov
jae
pusha
cmps
mov
dec
rol
cmp
lds
mov
xor
div
pop
mov
dec
or
int
ins
pop
push
fwait
enter
jmp
aaa
inc
jg
arpl
fs
loope
and
fstp
mov
sti
sub
push
data16
push
and
hlt
ret
xchg
cmp
pop
xor
into
sub
call
push
mov
cmp
sub
cmp
cmp
pop
mov
xor
cmp
cli
sub
outs
mov
mov
scas
fst
mov
mov
(bad)
rol
(bad)
jae
pop
and
int
cmp
mov
in
pop
push
dec
and
xor
push
sti
fild
bound
cmp
mov
cmp
jmp
push
aad
xchg
push
rcr
pop
out
stc
mov
pushf
push
push
es
mov
stc
pop
aam
loop
cld
test
jle
and
cs
shr
add
and
mov
fild
sbb
rol
clc
loopne
fild
or
push
xchg
pop
add
adc
je
xchg
pop
sbb
das
jae
iret
mov
rcl
dec
push
add
pop
dec
and
jbe
adc
jne
xchg
cmp
add
sub
jge
inc
jmp
mov
add
cmp
xor
xor
push
add
adc
or
mov
(bad)
fsub
(bad)
pop
int
ins
sub
loopne
cmp
sub
sub
cmp
in
stos
out
pop
sbb
mov
xchg
xor
repz
aad
mov
cmp
cvtps2pd
mov
pop
push
adc
scas
into
jne
mov
mov
popf
jmp
cmps
(bad)
(bad)
movs
jno
ins
push
aas
mov
rcl
dec
push
dec
shl
arpl
(bad)
retf
mov
(bad)
(bad)
fld
in
cs
jns
mov
popa
jg
sti
loopne
in
or
inc
std
retf
(bad)
in
or
rol
xchg
mov
mov
retf
cmp
xlat
(bad)
repz
push
cmp
mov
dec
lods
xchg
push
add
xor
test
add
push
fsub
rcl
(bad)
aaa
mov
and
fistp
dec
test
xchg
div
xchg
and
mov
xchg
push
or
cmp
into
or
jno
cmp
stos
jg
data16
aas
(bad)
sahf
sub
mov
xlat
mov
push
cmp
les
fild
jecxz
push
loopne
sbb
daa
dec
jno
mov
xchg
xor
inc
adc
add
or
xor
and
inc
or
fistp
pop
test
push
outs
imul
enter
xchg
and
mov
std
jle
les
inc
dec
add
mov
and
stos
(bad)
or
dec
out
mov
sar
aam
push
jnp
pop
and
ror
xlat
sahf
mov
in
ficomp
mov
sub
outs
pop
scas
sbb
in
adc
push
rcr
sub
add
ins
pop
loope
cwde
retf
icebp
xor
lahf
fwait
mov
loopne
cmps
out
sbb
(bad)
fdivr
pop
hlt
sub
hlt
push
mov
(bad)
aas
sbb
shl
lds
or
push
ficomp
cmc
xchg
jp
or
pusha
adc
sub
popf
stos
sbb
or
jl
sub
dec
fld
test
cmp
pop
ret
inc
scas
test
xchg
mov
rol
cmp
sbb
mov
cld
inc
jne
mov
inc
int3
push
fs
inc
sub
loopne
scas
iret
xchg
stos
pop
or
push
inc
mov
mov
call
xor
retf
test
cmp
rcr
and
lea
loop
pusha
pop
sub
mov
inc
rol
xor
jge
dec
loop
push
imul
adc
pop
ds
mov
sub
push
out
gs
pop
pop
jb
das
push
stc
scas
bound
and
fadd
popf
imul
aam
(bad)
adc
sub
dec
push
mov
ss
ficomp
mov
xor
jno
lahf
aaa
(bad)
retf
stos
xchg
div
cmp
mov
(bad)
and
inc
imul
pop
call
xor
add
(bad)
push
xchg
test
(bad)
into
cmp
scas
cmp
fwait
lahf
sbb
aam
scas
sub
std
jae
outs
iret
mov
mov
jne
loopne
lea
dec
mov
stos
addr16
or
sbb
and
add
test
dec
movs
mov
dec
icebp
movs
lods
lods
loopne
es
ror
or
push
sub
jnp
hlt
daa
push
loope
repz
lods
into
in
dec
mov
stc
popa
pusha
push
js
scas
sub
inc
dec
fadd
test
jl
mov
mov
mov
cs
aam
daa
dec
add
cmp
pop
xchg
adc
out
mov
mov
push
pop
dec
jmp
cli
mov
scas
fwait
mov
(bad)
xor
out
mov
mov
mov
pop
mov
ret
mov
js
xchg
out
sbb
sub
lea
or
enter
fwait
pop
popf
pop
push
pop
fcmovu
test
mov
cmps
repz
sahf
push
cmp
movs
xchg
sbb
lods
push
adc
in
jns
aam
push
leave
pop
ins
and
dec
push
mov
jmp
jne
dec
hlt
sahf
loope
ds
enter
popa
push
stc
fptan
iret
cmps
inc
pop
push
pop
out
xchg
pop
cmp
dec
xor
sub
inc
inc
stos
sbb
popa
mov
add
cli
xchg
outs
jmp
jg
inc
pop
into
xor
iret
(bad)
in
inc
lock
mov
les
lahf
pop
es
cmp
jns
inc
(bad)
loopne
cmp
push
adc
sub
dec
xchg
cmps
loopne
(bad)
xor
pop
mov
movs
push
stc
push
cmp
push
in
push
xchg
pop
cld
out
mov
push
test
mov
mov
ret
loop
jp
js
jne
push
mov
fs
rcr
ror
test
or
adc
outs
das
fs
adc
xor
adc
outs
adc
fsqrt
jns
push
pop
ss
sub
dec
dec
test
jno
outs
or
push
cwde
out
cmps
fs
xor
ds
or
mov
les
adc
inc
sub
es
jns
push
cwde
scas
lds
cmp
jle
sbb
mov
fwait
adc
lahf
jge
or
(bad)
clc
inc
adc
xlat
(bad)
aaa
ficom
lods
push
std
pop
pop
jns
cld
mov
(bad)
fnsave
inc
jae
fild
adc
cmp
movs
sti
jg
sbb
sbb
enter
or
add
mov
cs
das
sbb
outs
mov
imul
fcomp
xchg
and
rcl
mov
inc
stos
cmp
fisubr
jge
jne
in
rcr
mov
push
ret
shl
in
hlt
call
or
test
cmp
jns
dec
outs
mov
sbb
out
cmp
hlt
stos
popf
ja
cmp
test
jns
or
(bad)
scas
add
xchg
xor
retf
icebp
sub
jecxz
rcl
cwde
mov
cmp
xor
mov
mov
inc
ja
test
xchg
cdq
out
sbb
je
stc
and
(bad)
jg
mov
std
fwait
dec
mov
xchg
push
inc
mov
xchg
cmc
arpl
or
push
mov
bound
out
pushf
in
(bad)
pushf
mov
out
jle
imul
cmp
sub
mov
jmp
fdiv
or
xchg
cmc
faddp
mov
xor
jmp
stos
ja
loope
lock
in
retf
cmp
cmp
sub
mov
pop
jmp
lock
sar
addr16
xchg
test
arpl
jo
fsubr
scas
mov
mov
aam
and
inc
(bad)
scas
loope
shr
sbb
js
dec
mov
dec
movs
add
and
xchg
scas
pop
mov
push
push
pop
cmp
adc
xchg
retf
gs
in
push
es
adc
aas
call
xor
js
sahf
cdq
enter
inc
add
mov
xchg
imul
mov
mov
sbb
imul
mov
das
push
imul
mov
int
movs
sbb
dec
neg
mov
hlt
mov
dec
rcl
fsub
inc
push
out
cmp
(bad)
in
out
popa
mov
push
clc
mov
jmp
hlt
mov
dec
and
xor
push
fidiv
and
pop
pushf
enter
aas
clc
and
push
outs
pop
outs
inc
daa
sar
jge
cli
out
xchg
pusha
sub
dec
sub
jge
in
test
gs
sti
xchg
fucomip
inc
or
or
mov
sbb
sub
aad
gs
rcr
lock
iret
cmps
aas
and
pop
inc
or
(bad)
jecxz
frstor
jae
mov
sub
mov
inc
adc
sti
pop
sub
(bad)
into
outs
cmp
jno
and
mov
xchg
aas
xchg
sub
push
cmc
and
or
push
mov
mov
js
clc
push
adc
sub
rcl
adc
mov
mov
dec
push
adc
enter
nop
dec
imul
aad
ror
jmp
pop
sbb
fwait
and
cmc
jmp
retf
dec
inc
stos
and
mov
loopne
nop
je
adc
retf
adc
pop
add
mov
popf
sub
clc
retf
popf
loopne
into
mov
adc
imul
inc
ret
stos
rcr
shr
mov
jecxz
jl
pop
je
into
and
out
mov
jmp
sahf
inc
repz
test
adc
mov
xchg
jge
push
sub
leave
pop
es
(bad)
pusha
pop
int3
(bad)
jecxz
sbb
jns
push
xlat
pop
inc
mov
sbb
sahf
out
ds
cmp
rcr
push
gs
imul
sbb
pop
in
adc
mov
stos
cwde
xor
hlt
adc
iret
sti
xchg
sub
dec
aaa
xchg
cs
popa
shr
mov
fnstsw
sbb
push
inc
xchg
jae
pop
pop
mov
or
sbb
pushf
(bad)
call
test
mov
inc
jo
retf
pop
dec
or
nop
sub
sbb
and
cmc
pop
push
aad
mov
lods
pminub
retf
mov
sub
gs
mov
mov
mov
mov
dec
sub
imul
fistp
mov
jne
mov
test
stc
mov
push
data16
and
dec
pop
shr
jae
dec
out
mov
push
popa
int
scas
les
push
(bad)
pop
mov
xchg
dec
iret
jb
test
sub
js
adc
jecxz
xchg
cmps
add
dec
mov
mov
fild
call
dec
xchg
ret
xor
sub
mov
mov
mov
das
js
sub
jmp
popa
(bad)
mov
test
adc
(bad)
int
inc
dec
push
sti
cld
movs
aam
inc
lock
loope
(bad)
repnz
xor
cmp
push
(bad)
aaa
fdivr
push
sub
xchg
arpl
mov
imul
outs
(bad)
out
cmp
push
adc
outs
mov
in
mov
mov
inc
aaa
dec
out
adc
inc
xchg
jnp
retf
out
ins
jecxz
mov
in
add
cli
and
mov
lahf
jne
mov
data16
(bad)
xchg
div
mov
adc
hlt
inc
bound
push
daa
pop
aad
xor
je
pusha
sub
and
mov
jb
pop
hlt
xchg
mov
add
outs
pop
cmp
push
ja
aam
cdq
lods
mov
retf
aad
aad
jmp
push
inc
mov
retf
mov
sbb
enter
(bad)
das
push
and
mov
push
jno
jb
stos
adc
lock
push
sub
pop
rcl
sub
into
ins
pop
into
(bad)
push
sub
test
and
leave
lods
call
sub
(bad)
out
test
sub
sahf
(bad)
push
xor
cmp
mul
mov
and
or
push
xor
jmp
and
pop
hlt
inc
cdq
mov
(bad)
sahf
fucomip
aam
jl
jae
hlt
imul
ds
mov
test
jmp
xor
rcr
or
add
jmp
lods
ss
dec
cs
inc
fwait
sahf
or
aam
lea
gs
sbb
out
repz
inc
jl
ja
sub
pop
pop
push
sbb
jle
fstp
or
push
dec
and
scas
mov
jecxz
adc
jne
and
sbb
(bad)
adc
outs
and
pop
pop
add
fs
sub
push
xchg
scas
pop
mov
repz
cmc
iret
mov
jno
inc
sbb
push
les
scas
xor
xchg
jle
pop
popf
pop
scas
lahf
dec
imul
sbb
(bad)
loop
cmp
or
dec
ror
fs
lahf
mov
mov
add
cmp
ror
cmc
jne
lock
inc
sub
stos
pop
shr
adc
sub
cmp
mov
push
cs
fwait
out
sub
dec
enter
cmp
lahf
inc
mov
cdq
lea
pop
fsub
int
sbb
daa
in
rol
scas
fs
xor
shr
inc
test
cdq
fstp
dec
mov
iret
cmp
xchg
sub
push
xor
aas
sub
xchg
fstp
and
lods
add
daa
stos
ror
pop
mov
inc
adc
and
rcr
inc
imul
std
sti
rol
je
add
pop
loop
in
or
adc
cld
popf
mov
clc
add
cs
jl
inc
mov
cmp
scas
mov
(bad)
mov
jb
sub
push
mov
loopne
mov
adc
adc
sub
fiadd
test
inc
mov
xchg
jbe
retf
retf
cli
bound
xchg
call
hlt
push
push
xchg
jno
xchg
gs
adc
fst
sbb
and
leave
mov
sahf
pop
mov
dec
mov
mov
adc
cmp
(bad)
into
cmp
mov
and
jl
movs
xchg
dec
cmp
out
add
adc
mov
adc
dec
push
das
cmp
sahf
retf
aam
and
inc
lods
dec
mov
adc
fst
popf
movq
push
shr
push
mov
cwde
clc
movs
outs
add
call
jp
inc
push
jbe
div
int
or
inc
inc
fist
mov
test
outs
cli
mov
sbb
push
imul
xor
jns
int
inc
and
in
repnz
scas
jl
add
sar
sbb
dec
arpl
jbe
jmp
push
and
and
inc
in
jb
pop
xor
push
mov
pop
out
test
(bad)
int3
gs
dec
pop
fdivr
push
ss
or
(bad)
out
int3
or
shl
sbb
int
mov
outs
ins
push
dec
mov
imul
xor
mov
(bad)
cmc
pop
dec
sub
movs
les
stc
adc
sbb
mov
sbb
rol
push
dec
pop
lahf
and
scas
fnstcw
jl
mov
lods
cld
dec
cmp
sub
shr
scas
or
inc
cmp
mov
inc
out
pop
std
pop
xor
in
dec
icebp
or
pop
mov
xchg
inc
cld
nop
mov
daa
sub
mov
push
stc
fmul
sub
out
fld
mov
add
dec
mov
sbb
xor
pop
push
scas
pop
cdq
and
sbb
ret
and
or
adc
call
inc
dec
out
push
xchg
pop
daa
pop
out
jl
xchg
pop
jle
cld
cli
adc
xor
or
push
enter
inc
sub
and
mov
inc
xchg
xor
icebp
mov
or
out
js
adc
fldenv
aaa
or
int3
add
add
xchg
or
xchg
pop
leave
fiadd
and
iret
cmp
add
jmp
sub
das
imul
xchg
sbb
fs
out
sbb
je
pop
ja
loopne
or
movs
and
sbb
mov
or
sub
cmp
fs
out
mov
cli
mov
add
cld
imul
push
pop
dec
inc
movs
dec
jae
jmp
outs
sub
cdq
and
mov
pushf
sub
in
out
xchg
or
les
mov
sub
push
js
cs
inc
cmps
jmp
or
mov
sti
cld
and
les
mov
movs
sbb
outs
sti
fcomi
adc
push
test
data16
aaa
mov
mov
xlat
xchg
adc
sub
mov
xchg
or
out
in
xchg
xchg
aad
loopne
and
cmc
mov
cmp
mov
xchg
mov
out
xchg
push
clc
stc
scas
xlat
mov
push
sub
push
aas
or
fs
mov
test
pop
pushf
pop
and
addr16
push
push
nop
cmp
push
mov
sub
jp
mov
mov
fnstenv
stos
add
and
or
jle
add
cmps
sahf
mov
jnp
hlt
les
shl
push
fisttp
adc
loopne
aam
mov
in
sub
cmps
add
shl
inc
push
adc
mov
out
lods
lahf
fs
mov
arpl
mov
jbe
jmp
fbld
loopne
and
loop
jg
jmp
nop
mov
cmp
inc
jg
jae
fidivr
sbb
and
mov
retf
cli
mov
adc
push
cmp
jae
loopne
retf
mov
repz
std
sahf
in
(bad)
jo
mov
jl
push
out
pop
mov
adc
push
mov
ja
and
clc
pop
mov
fiadd
jmp
out
fsub
or
jne
push
sub
(bad)
cmp
stc
sar
dec
sub
adc
adc
sbb
call
jle
shl
js
adc
cmp
cmps
mov
iret
repz
mov
dec
push
stc
jmp
mov
data16
dec
mov
mov
mov
sub
out
lahf
jp
mov
retf
inc
clc
push
pop
shr
ss
retf
adc
clc
push
stc
fmul
inc
not
test
xchg
and
and
sub
je
jle
xchg
add
fisttp
or
adc
and
rol
popf
inc
pop
mov
jmp
scas
sub
mov
rcl
inc
cmp
cli
popa
xor
xor
pop
xlat
sbb
push
sub
xchg
aam
mov
(bad)
shl
lods
adc
hlt
xchg
stos
test
test
cmp
add
fisub
xchg
or
jne
popf
xor
sbb
int
adc
mov
dec
xchg
stos
shl
imul
xchg
ss
or
sub
lods
fnstsw
push
ror
or
ret
dec
in
mov
test
lahf
dec
mov
cmp
test
gs
popf
pusha
cld
jmp
push
cmc
cmp
addr16
test
icebp
push
mov
xchg
xchg
ss
mov
push
test
or
push
mov
ror
pop
add
arpl
rcr
cdq
movs
addr16
dec
test
stos
sbb
aas
or
xchg
jg
push
out
mov
imul
aas
mov
gs
or
push
push
pop
movs
std
and
xchg
cmp
lea
in
and
fisubr
xchg
xor
fcomi
imul
mov
cmc
add
rcl
ds
xlat
jns
pop
mov
add
nop
test
daa
and
aad
into
pop
test
mov
imul
pop
std
cmp
adc
sub
mov
out
enter
add
or
dec
or
sub
add
inc
cmp
sbb
pop
adc
xor
bound
mov
ja
mov
in
js
mov
sub
inc
adc
mov
and
and
bnd
mov
das
push
(bad)
hlt
mov
sar
and
movs
xor
pop
mov
movs
mov
push
addr16
mov
aam
(bad)
jbe
(bad)
sub
mov
std
lock
jae
ror
or
cwde
push
sub
mov
dec
retf
loope
es
ins
sbb
js
scas
out
cmp
sub
iret
mov
adc
lods
and
out
or
(bad)
hlt
fimul
cli
scas
add
fnstcw
(bad)
jecxz
or
push
fisubr
out
mov
and
movs
icebp
mov
mov
aaa
ja
dec
ss
xchg
movs
mov
mov
pop
or
scas
push
(bad)
stos
mov
xor
cmp
xor
or
jmp
push
lea
push
pop
ret
pop
data16
xor
mov
jbe
jp
cld
jp
add
sub
(bad)
xchg
xchg
out
pop
pop
push
xor
(bad)
push
ja
in
jp
pop
cmp
in
inc
(bad)
(bad)
fstp
mov
ds
in
and
outs
sub
in
xchg
(bad)
mov
dec
pop
adc
inc
test
push
sti
test
xor
inc
arpl
loope
mov
addr16
fmul
je
or
leave
pop
fbstp
cs
pop
cmp
cmp
dec
mov
cmp
in
pushf
(bad)
jae
mov
ss
dec
and
aas
das
in
fs
in
ret
call
push
xchg
dec
xor
xchg
clc
(bad)
movhps
ret
stos
test
adc
mov
mov
mov
scas
add
retf
aad
inc
rcl
jns
cmp
push
data16
xor
stos
fistp
lea
fstp
outs
pop
mov
int
push
push
push
or
cmp
pop
push
jne
or
xchg
inc
dec
out
scas
jnp
lods
xor
cmp
sub
pop
jns
daa
pop
call
fimul
loopne
in
mov
and
aaa
je
ret
loope
dec
mov
adc
mov
xor
push
lahf
adc
jmp
sar
xor
call
pop
je
scas
jb
test
outs
sbb
inc
jo
lods
mov
push
xchg
inc
stos
lods
dec
outs
sub
rcl
fwait
inc
(bad)
jne
mov
loopne
xchg
jmp
jmp
scas
push
leave
aas
dec
outs
and
lock
and
and
out
jno
or
push
aaa
adc
sbb
ss
mov
aas
fcmovb
pop
movs
cwde
test
ins
scas
in
daa
(bad)
frstor
or
imul
in
fdiv
pop
xor
sbb
mov
cmps
mov
lea
lods
into
inc
hlt
ins
mov
or
out
aam
push
pushf
enter
push
fnstcw
vpaddsw
aas
xor
mov
aas
jp
ror
pusha
js
das
iret
int
mov
rcr
pop
in
and
jae
mov
cmp
pushf
sub
lods
fiadd
mov
add
mov
jo
push
sub
gs
and
adc
data16
movs
xor
mov
adc
out
aad
sub
push
push
cmp
cmps
xor
xchg
fadd
or
mov
or
jp
shl
mov
lea
push
stos
cmp
xchg
and
inc
add
jo
ja
xor
adc
xor
pop
push
std
add
test
pop
movs
clc
mov
add
(bad)
mov
test
xchg
test
inc
ret
dec
push
cs
out
into
(bad)
repz
and
in
ret
in
mov
enter
sub
cmp
std
sbb
in
inc
or
push
repnz
jp
ins
int3
jl
mov
cmp
ja
ret
push
test
(bad)
sbb
jle
test
dec
ret
push
dec
mov
rcl
sub
sbb
push
adc
mov
cmp
adc
fld
cmp
pop
mov
add
jmp
or
jnp
or
mov
adc
push
jge
in
jge
js
push
cmp
xor
out
div
jns
iret
cmp
(bad)
adc
ret
mov
adc
stos
mov
mov
int3
cmps
loope
dec
jp
in
in
pop
sti
cmp
pushf
fdivr
pop
aas
das
ds
loopne
or
cmp
mov
xor
cmps
mov
retf
push
and
mov
fucomp
out
push
cld
out
(bad)
stc
stc
xor
inc
adc
shr
cmp
mov
test
and
jne
mov
inc
shl
add
sub
and
sti
xchg
out
adc
sbb
and
jmp
add
mov
jnp
out
push
pop
push
sbb
stos
adc
xchg
inc
mov
sub
push
movs
test
call
fistp
popa
xor
jp
sub
fimul
sub
adc
lock
and
mov
push
imul
dec
fsubr
retf
repz
add
inc
jae
xchg
jmp
movs
(bad)
mov
add
or
jmp
inc
fst
adc
push
and
test
xor
pushf
inc
das
push
or
loope
addr16
xlat
cmp
cmp
out
ss
xchg
fnstenv
adc
fiadd
inc
jmp
xor
and
sub
cs
out
sub
push
out
retf
mov
xor
inc
push
lds
xchg
mov
push
or
xchg
or
jo
or
push
or
inc
das
imul
cmp
sbb
inc
push
cmp
jb
fild
sub
cmp
aad
(bad)
xor
test
lock
jns
mov
mov
call
mov
push
jmp
push
(bad)
xchg
lods
sub
add
add
adc
aam
out
add
xchg
pop
sub
fcom
mov
into
movs
mov
cmp
pop
mov
jmp
jne
hlt
sbb
data16
scas
add
or
inc
cmp
mov
and
inc
xchg
rcl
in
add
xor
cmps
stos
and
add
adc
cmp
iret
jg
jno
push
xchg
jle
mov
add
test
push
lds
xchg
and
jbe
jecxz
or
fisubr
add
sbb
pop
sti
adc
push
lahf
sub
(bad)
and
xor
jmp
pop
pop
lds
jge
je
xchg
lock
retf
cmp
push
lds
pop
nop
jo
mov
pop
lahf
adc
cli
push
mov
out
sub
mov
push
xchg
mov
pop
xor
sbb
dec
add
pop
dec
ss
test
mov
jmp
je
arpl
ror
bound
mov
lods
popf
cmp
imul
or
icebp
inc
xlat
adc
sbb
mov
mov
test
jb
in
out
daa
in
push
jge
xchg
ret
test
aas
mov
lds
adc
je
lock
aam
(bad)
pop
std
loop
push
mov
xor
sub
inc
add
inc
add
pop
rcr
cmp
pop
pop
xchg
push
js
(bad)
dec
out
push
jl
leave
mov
inc
enter
xchg
outs
adc
lea
mov
out
jo
(bad)
dec
sahf
xor
(bad)
fs
mov
mov
mov
adc
mov
jne
mov
arpl
xchg
fsubr
or
popf
mov
int
or
lods
sar
and
dec
xchg
mov
xchg
jmp
push
std
and
dec
stc
push
clc
push
sub
(bad)
jbe
add
hlt
push
or
sub
push
fmul
inc
cmp
mov
inc
inc
enter
push
mov
fdiv
pop
xchg
hlt
pop
sbb
cmp
push
lds
adc
xor
jns
push
jl
sar
cmps
int
enter
mov
sbb
cld
jno
retf
mov
pusha
das
aaa
inc
xlat
les
outs
mov
gs
sti
pop
gs
push
mov
(bad)
mov
fisub
loope
push
cli
fs
or
imul
test
adc
test
push
aad
jae
stos
or
mov
out
xchg
lea
pop
push
lods
popa
ret
mov
xchg
pop
std
adc
mov
shl
lea
jp
and
add
push
jne
lock
fwait
inc
out
cli
clc
cmp
push
jge
push
or
pop
jge
xchg
mov
sub
dec
and
push
adc
jbe
cmp
mov
test
mov
add
jmp
cmps
retf
lea
fdivr
arpl
jne
(bad)
cmp
push
sbb
mov
dec
add
jb
(bad)
movs
fisub
in
xchg
popa
std
loopne
inc
hlt
aam
std
out
jp
and
stos
mov
mov
imul
cmp
xor
scas
retf
dec
add
(bad)
mov
movs
rol
cli
iret
fwait
xor
(bad)
cmp
shl
test
mov
xchg
or
pop
or
sti
add
mov
xchg
cwde
aaa
lods
loope
and
mov
fisub
add
adc
sti
test
(bad)
cmp
fmul
xor
out
pop
out
icebp
les
adc
ror
out
pop
add
mov
hlt
in
sti
(bad)
jae
add
cmp
mov
movs
or
test
ror
fcomp
pop
pop
cmp
retf
ja
cmp
inc
push
lock
lods
cld
sub
pop
test
xor
push
(bad)
or
dec
mov
mov
(bad)
test
pop
jbe
push
push
pop
mov
outs
jae
inc
clc
mov
add
and
in
or
mov
cs
mov
call
enter
lgs
lods
leave
out
iret
or
xchg
dec
stos
stc
loope
sete
dec
add
push
and
xor
rol
and
xor
or
xchg
mov
mov
fdivr
shl
addr16
int
and
pop
mov
(bad)
cmps
add
push
mov
out
enter
adc
cwde
daa
fisttp
cld
fst
mov
sbb
pop
jmp
jno
jae
xor
shr
repnz
pop
and
dec
xchg
xlat
test
aam
adc
mov
in
mov
cmp
data16
(bad)
out
add
push
xlat
loope
loope
inc
imul
stc
bound
stc
in
jb
xchg
cli
pop
out
fnsave
aas
mov
popa
(bad)
or
jae
daa
cli
cmps
mov
cmp
outs
sbb
cmp
std
jnp
icebp
jle
packsswb
add
stos
mov
ror
or
cwde
loope
(bad)
mov
mov
mov
or
out
iret
xchg
fld
cmp
jb
lss
jmp
loopne
jge
or
mov
rcr
mov
cs
ss
call
mov
test
push
popa
mov
push
jecxz
xchg
arpl
ret
and
sbb
cmps
test
dec
scas
sahf
mov
es
xchg
and
jp
sahf
dec
or
jns
push
adc
mov
in
call
push
cmps
dec
mov
mov
xor
dec
inc
push
(bad)
adc
data16
push
js
pop
(bad)
push
xlat
scas
je
vsubpd
mov
sbb
stos
test
jns
inc
scas
bound
sub
jp
cmps
xor
add
pushf
in
mov
rol
or
shl
jnp
push
push
xor
push
nop
(bad)
call
pop
(bad)
and
mov
xchg
je
sbb
xchg
mov
clc
imul
sub
mov
test
rol
das
adc
popa
sub
ins
int
call
loopne
mov
call
cmps
repnz
sahf
sbb
or
push
mov
addr16
mov
dec
(bad)
ds
cmc
adc
arpl
dec
test
sbb
loope
dec
les
pop
fsub
cs
xchg
leave
std
or
push
sbb
jp
fisubr
cmp
mov
inc
adc
or
loope
ins
inc
sub
xchg
data16
dec
sub
enter
inc
call
ins
mov
sbb
out
push
jbe
xchg
iret
fstp
(bad)
mov
or
(bad)
jae
inc
ds
sub
test
out
lock
sbb
iret
in
push
pop
mov
lahf
fadd
call
jne
sub
mov
fs
sub
or
mul
sar
fisub
xchg
mov
add
leave
mov
lahf
bound
and
es
xor
cmp
pushf
test
xor
ret
sub
out
or
sub
xor
push
retf
and
xor
imul
xchg
retf
sbb
stc
sub
fistp
inc
je
xor
into
lods
aam
sub
xchg
ja
mov
fist
clc
aam
es
xor
mov
jne
mov
sar
cmp
dec
stc
sub
icebp
xchg
push
out
inc
mov
and
push
jecxz
ins
mov
pop
out
sub
outs
xor
retf
in
daa
add
clc
fnsave
rcr
mov
fdivr
sbb
xorps
retf
push
dec
adc
inc
cmp
sbb
push
in
jns
cdq
fdivp
mov
push
cli
xchg
mov
xchg
and
pop
fild
fnstcw
cwde
inc
push
jb
cmps
pushf
data16
or
je
xlat
pop
push
xchg
test
mov
enter
cmp
je
loope
fadd
mov
pop
xchg
mov
outs
sbb
and
sub
fadd
repz
sbb
shl
aaa
push
out
loop
inc
push
xchg
ins
pop
aas
jecxz
push
scas
push
sbb
push
pop
fsubp
stc
lods
jmp
dec
fst
xor
rol
imul
in
push
lds
mov
xadd
ret
out
pop
add
adc
out
xchg
sub
xchg
dec
fimul
imul
(bad)
(bad)
hlt
aas
arpl
inc
inc
inc
retf
ret
repnz
sub
pop
jo
jl
xchg
aad
sub
ret
in
cmp
inc
repnz
sbb
fsub
ss
sub
in
stos
nop
scas
jg
inc
pop
sub
xor
addr16
lock
mov
std
and
loope
xchg
cmp
jo
push
(bad)
clc
int3
inc
rcr
clc
jno
movs
adc
xchg
dec
push
repz
jb
scas
out
sub
push
or
or
inc
pop
aaa
ds
sbb
mov
push
leave
and
jb
inc
mov
xchg
icebp
arpl
sub
ficom
or
fild
imul
cld
sbb
inc
in
jmp
call
pop
aad
add
loopne
jbe
nop
push
aas
cli
imul
dec
mov
and
in
mov
repz
not
adc
aad
mov
xor
adc
cmp
nop
mov
lds
iret
nop
fs
xor
dec
arpl
pop
cdq
bound
mov
xchg
xor
sub
inc
mov
xchg
xchg
imul
sub
push
mov
test
jmp
int3
xchg
mov
sub
push
mov
ins
lea
stos
push
xchg
xchg
push
js
dec
and
sbb
adc
loope
jmp
mov
dec
inc
push
out
and
sbb
inc
lods
aaa
sub
or
imul
imul
aad
fcom
xor
popf
fisttp
cmp
sbb
fmulp
call
fisubr
retf
mov
pop
iret
stc
ror
and
sub
outs
xchg
cdq
outs
fnstenv
inc
cdq
xchg
sub
adc
push
std
test
lods
pop
arpl
sub
ss
cmps
fist
mov
retf
es
lahf
cmp
sub
rcl
out
ror
mov
mov
and
iret
add
push
retf
jmp
mov
loope
sub
add
push
sub
cwde
jnp
xor
aas
mov
movs
push
inc
scas
add
hlt
mov
inc
xchg
jmp
mov
ja
jbe
push
sbb
in
dec
fbstp
ret
xchg
xchg
fwait
aam
jb
sub
movs
mov
ss
push
mov
lods
(bad)
stc
xor
jmp
les
cmp
jmp
sub
push
hlt
out
add
adc
aas
xor
xchg
sbb
mov
pop
mov
or
and
ficomp
out
dec
add
and
sbb
les
sub
les
add
mov
jnp
mov
mov
xor
movs
stc
loope
and
mov
ins
scas
sbb
rcr
(bad)
int
inc
jo
fs
push
pop
sti
je
dec
stos
mov
mov
sub
inc
imul
int
ins
std
mov
jge
call
test
push
iret
loopne
mov
mov
sub
imul
push
(bad)
daa
add
mov
fild
lahf
pusha
sti
jmp
push
movs
pop
cmp
out
cmp
pop
and
mov
rcr
stos
std
packuswb
mov
lock
xchg
enter
cmps
(bad)
scas
add
arpl
pop
mul
jg
push
rcr
cmp
xchg
(bad)
loope
xor
cs
cmp
nop
jbe
mov
sbb
xchg
jns
xchg
icebp
js
in
mov
sti
add
xchg
sub
imul
movs
xor
jp
mov
jb
repz
shl
js
xchg
enter
enter
xchg
rol
sbb
ror
inc
push
cmp
pop
jge
xchg
dec
enter
inc
mov
fs
mov
add
ror
inc
sub
into
push
leave
xor
leave
cld
push
adc
test
bound
ins
enter
outs
mov
stc
xchg
in
push
jae
mov
sub
hlt
sbb
dec
aad
inc
jl
ds
dec
mov
call
xchg
jecxz
lods
imul
mov
fsub
push
clc
cmc
mov
test
inc
lock
shl
lds
xor
adc
into
sbb
sbb
icebp
sbb
cmp
in
adc
mov
inc
push
push
adc
mov
cs
jno
adc
jne
idiv
adc
or
rcr
inc
push
push
push
cli
in
stos
push
pop
aad
test
shl
stos
inc
mov
adc
jnp
mov
enter
mov
cmps
cli
inc
loop
add
mov
gs
in
add
cmp
ret
inc
xchg
mov
xchg
das
ret
inc
mov
sub
ins
pop
add
inc
movs
jbe
push
mov
jmp
aad
xchg
mov
xor
movs
popf
mov
adc
mov
lahf
xchg
out
pop
sbb
mov
bound
mov
cwde
sbb
sub
out
arpl
mov
xchg
int3
xlat
push
mov
push
aas
add
pop
test
aam
sbb
sub
or
mov
sbb
fisubr
cdq
xor
or
addr16
and
popa
mov
mov
fwait
adc
push
adc
mov
mov
adc
xlat
sub
push
frstor
pop
sub
inc
shr
adc
adc
pop
data16
call
lods
sbb
dec
ror
ja
push
nop
sbb
stc
sub
or
aaa
clc
repz
pop
sar
sub
sbb
jecxz
sub
or
or
mov
aaa
sbb
lods
mov
adc
in
bound
sbb
repz
mov
test
push
cdq
and
std
into
cmp
mov
sub
test
mov
or
inc
hlt
inc
xchg
xchg
loop
mov
sub
jg
(bad)
pop
fwait
cdq
pop
jmp
ins
pop
jnp
adc
into
loopne
pop
out
jge
fst
js
and
js
cmp
jle
pusha
adc
push
shr
ja
ror
jb
push
pop
je
pop
lock
add
pop
int3
jo
aaa
pop
in
mov
inc
mov
cmps
iret
mov
(bad)
jp
ja
outs
das
xchg
add
xchg
leave
sbb
inc
popf
pop
(bad)
call
dec
xor
sahf
lea
addr16
in
into
mov
lock
and
pop
nop
xchg
mov
mov
fstp
addr16
shl
mov
int
sar
popf
cdq
movs
jmp
(bad)
(bad)
push
in
adc
dec
lods
lods
xchg
mov
mov
xlat
adc
sti
lea
xchg
test
add
in
jge
adc
pop
mov
inc
push
adc
pop
xchg
(bad)
lock
dec
add
xor
xchg
not
cdq
mov
cwde
mov
lds
inc
mov
int3
sti
outs
xchg
aas
sbb
add
imul
xchg
aam
xor
sbb
jo
shr
in
sub
cmp
fwait
repz
sub
sti
and
cdq
sub
dec
cwde
addr16
jg
test
repnz
push
je
ins
jb
pop
pop
mov
cmp
adc
loopne
gs
fiadd
push
int3
mov
push
pusha
sti
adc
jl
loopne
sbb
out
adc
mov
std
loop
xor
xor
or
mov
fmulp
mov
stos
daa
outs
or
sub
out
ret
mov
pop
mov
rol
xor
mov
pop
xor
mov
scas
mov
lods
dec
loop
xlat
mov
fmulp
pushf
fdiv
jae
xchg
sbb
adc
loop
push
mov
add
sub
add
js
test
bound
xor
mov
mov
inc
(bad)
sti
daa
dec
mov
scas
xchg
xor
inc
leave
(bad)
hlt
std
jmp
xchg
je
sub
leave
jmp
out
sbb
push
cdq
mov
adc
jno
imul
xchg
test
cli
repnz
icebp
mov
pop
and
retf
out
rcl
test
xchg
sub
loope
mov
mov
inc
sub
mul
scas
sub
and
jbe
sub
cmp
sbb
push
pop
inc
adc
jns
out
cs
dec
push
aad
pop
mov
jne
push
repz
ss
dec
jmp
mov
and
cdq
mov
xchg
std
int3
push
rol
ins
loopne
cmp
adc
nop
adc
xchg
pop
aam
inc
and
and
test
fdivr
pop
inc
fisub
mov
(bad)
ffree
(bad)
jmp
mov
cmc
mov
out
xchg
add
mov
das
repz
push
inc
mov
sahf
cmps
clc
out
jmp
xchg
inc
out
iret
jg
xchg
test
int
xchg
int3
aad
xchg
push
pop
int3
sub
out
cmps
mov
aad
push
push
test
leave
dec
push
pop
mov
jmp
add
mov
xlat
inc
out
xor
xor
cli
xchg
adc
or
jg
push
add
pop
pop
popf
cmp
and
xchg
neg
test
sbb
test
(bad)
pop
lods
retf
or
dec
fild
rcr
dec
lods
jb
xchg
inc
add
jg
dec
cmp
test
ins
test
movs
dec
fucomip
ror
(bad)
fisub
inc
test
out
push
pop
xchg
push
call
inc
push
leave
movs
push
test
sub
push
rcr
(bad)
pushf
jp
bound
hlt
pop
pop
lods
xor
(bad)
lds
test
mov
jne
xor
jb
test
push
enter
jne
cli
clc
push
add
out
mov
push
pop
outs
or
mov
imul
(bad)
call
push
popf
xor
cmp
cwde
lock
popa
or
dec
les
sbb
inc
inc
ins
xchg
std
add
ja
in
jecxz
and
mov
daa
fisub
stc
mov
mov
movs
xor
fwait
xor
adc
sub
stc
inc
stos
cli
cld
fwait
mov
rol
adc
popf
leave
loope
xor
retf
(bad)
dec
gs
enter
xlat
or
out
inc
ficom
mov
mov
retf
add
adc
inc
add
sub
mov
mov
fwait
and
xchg
aad
mov
lds
mov
cmp
adc
loop
push
jl
pop
push
aad
addr16
and
sbb
fdiv
shl
lds
sub
push
cmp
cmps
cmp
(bad)
icebp
mov
mov
aad
ja
inc
and
inc
(bad)
out
aaa
jp
pop
int
mov
xchg
loope
clc
mov
xchg
jno
and
sub
nop
inc
lds
adc
movs
cmp
jge
inc
push
jo
stc
scas
loop
pop
pushf
cs
ret
in
lds
movs
mov
scas
sti
sub
daa
int
mov
outs
or
dec
adc
inc
push
into
mov
push
and
jnp
jae
jo
xor
shl
not
loope
into
clc
rcl
mov
repnz
outs
sub
adc
stos
xchg
or
sub
retf
(bad)
jmp
dec
cwde
adc
mov
pop
mov
mov
mov
adc
aaa
push
fmulp
push
mov
shl
push
mov
js
xchg
call
out
fcmovnbe
(bad)
xchg
shr
fnstenv
push
(bad)
push
mov
dec
pop
xor
cmp
inc
shl
mov
shl
jle
fldenv
jnp
mov
cmp
and
aad
add
mov
fisubr
pop
mov
jo
jmp
fadd
fsubp
and
or
repnz
std
adc
mov
data16
ret
xor
les
mov
rcl
sub
dec
inc
loope
js
pop
jns
inc
xchg
mov
ret
cmps
cmp
xchg
lds
addr16
pusha
mov
mov
imul
or
neg
shr
out
xor
ins
fnstcw
loopne
cmc
rcl
mov
sub
leave
sbb
cmp
enter
xchg
mov
scas
xchg
fstp
sub
fdivrp
sbb
repnz
mov
sar
jno
pop
jg
mov
mov
and
arpl
inc
imul
mov
mov
dec
jo
fild
mov
sbb
fimul
xchg
loopne
push
lock
sbb
mov
mov
sar
mov
(bad)
pusha
das
jl
mov
fimul
mov
xchg
ins
or
and
cmp
ds
sub
in
aad
pop
test
push
inc
es
cmp
retf
cmc
call
in
fnstcw
lock
inc
mov
out
cmp
push
cmps
xchg
inc
out
js
sbb
mov
push
test
fldenv
shl
xchg
push
mov
add
or
mov
xor
pushf
fwait
cmp
test
gs
div
add
cld
or
push
ins
and
cdq
in
jmp
mov
lds
in
mov
and
or
push
pop
or
mov
ins
sub
scas
(bad)
jbe
sahf
test
mov
lods
or
mov
movs
jno
div
sub
mov
pop
or
sti
movs
xlat
mov
mov
add
arpl
inc
inc
fcom
sub
subps
rcl
test
out
std
mov
push
dec
lods
mov
outs
mov
loop
push
ret
call
push
lahf
in
sub
jmp
pusha
add
add
out
jb
test
sub
push
jae
xor
dec
and
jne
in
push
cmps
pop
into
(bad)
outs
and
div
gs
das
stos
dec
prefetch
push
pushf
or
or
cmp
cmp
les
push
outs
inc
pop
repz
push
push
mov
jmp
ror
sbb
mov
scas
int3
mov
int3
sar
sub
leave
retf
ja
push
test
add
mov
xchg
mov
fimul
mov
pop
xchg
sbb
loopne
mov
jo
adc
mov
sbb
mov
cmp
test
movs
je
or
cmp
push
mov
popf
ins
jb
mov
mov
mov
cmc
pop
mov
sbb
dec
mov
(bad)
outs
sub
inc
xchg
sub
leave
and
cmp
fiadd
mov
sbb
mov
and
lods
add
repz
xlat
pop
test
jmp
ds
xor
and
(bad)
mov
cmc
and
movs
ret
lea
repz
mov
jmp
push
xor
dec
sbb
fnstsw
add
ins
jne
and
inc
ror
in
imul
and
xchg
in
xchg
bnd
ins
dec
aaa
push
clc
jg
(bad)
ficom
xlat
and
mov
mov
(bad)
mov
das
daa
sub
out
and
repz
or
mov
repnz
xchg
pop
(bad)
mov
dec
dec
pop
push
dec
fwait
out
push
retf
inc
nop
pop
fiadd
bound
stos
(bad)
mov
and
test
jns
mov
in
push
push
pushf
fdivr
or
push
push
xchg
in
pop
outs
xchg
ds
sub
mov
call
mov
pushf
inc
stos
jae
bound
shl
mov
xchg
add
shl
dec
inc
call
xchg
xchg
jb
dec
mov
mov
adc
loope
cmp
lahf
push
mov
pop
inc
not
mov
and
ja
sub
push
inc
push
sub
sahf
sbb
lahf
xchg
mov
xor
shr
mov
loop
loopne
xchg
mov
push
sahf
test
or
inc
(bad)
lods
cwde
dec
push
mov
outs
jl
or
lods
cli
jmp
not
cmp
xchg
shl
mov
cmps
xchg
push
inc
repnz
xchg
mov
fstp
ss
and
mov
(bad)
nop
mov
mov
jmp
loopne
iret
push
xchg
push
hlt
xor
ins
adc
call
out
adc
test
cmp
scas
clc
xor
int3
sub
test
out
cmp
xor
adc
in
mov
and
daa
push
je
lods
fs
or
xchg
lock
out
clc
adc
sbb
(bad)
ret
dec
pop
sbb
add
mov
adc
mul
or
mov
pop
jle
sub
stos
daa
xor
arpl
imul
and
mov
mov
into
dec
dec
pop
jae
in
adc
aaa
inc
mov
xlat
push
push
aad
popf
int
(bad)
fmul
dec
shl
hlt
jle
imul
xchg
sar
sti
(bad)
or
ffreep
outs
ret
call
push
adc
fiadd
adc
adc
sbb
int
cmp
sti
(bad)
and
mov
jmp
cmp
mul
xor
loope
ret
jle
xchg
push
fcmovbe
leave
xor
sar
push
adc
sbb
out
cdq
(bad)
rol
cmp
xchg
mov
pop
std
not
push
mov
rcl
inc
sbb
ret
mov
and
lds
inc
xor
cmp
add
sbb
sbb
mov
pop
adc
add
xor
clc
sub
mov
imul
mov
pop
mov
mov
xor
cmps
or
mov
shl
add
jecxz
adc
mov
icebp
sub
dec
or
rcr
hlt
sbb
sub
stos
ffree
cmp
jecxz
arpl
pushf
retf
or
not
cmps
xor
push
mov
movs
pop
clc
aaa
xlat
mov
sub
lods
or
xor
mov
jne
jp
mov
js
xchg
popf
and
icebp
xchg
loop
lahf
mov
cmp
data16
xor
inc
jnp
mov
int
mov
call
(bad)
(bad)
std
xchg
and
or
popa
adc
out
xor
je
inc
repnz
cs
sub
sbb
pop
rcl
xor
inc
jae
out
mov
shr
aas
push
imul
adc
push
mov
loopne
icebp
sbb
rcr
aad
in
rcl
gs
lods
mov
ins
outs
loop
or
cmc
out
loope
test
mov
dec
(bad)
sti
or
bound
call
cdq
and
idiv
adc
sbb
(bad)
fdivr
inc
adc
fiadd
pusha
push
mov
nop
stc
sti
jno
pusha
sti
adc
push
mov
jnp
add
pop
pop
pusha
imul
pop
and
jmp
movs
gs
xchg
mov
and
pop
xchg
mov
(bad)
sbb
arpl
jbe
ins
xor
shr
push
leave
lea
add
and
xchg
iret
(bad)
rcr
cmp
fs
les
add
adc
sub
popf
(bad)
cld
mov
out
mov
icebp
aad
push
out
es
xlat
add
sub
pop
pop
ja
into
add
jmp
push
mov
icebp
inc
fwait
mov
xchg
(bad)
xchg
add
or
call
mov
je
push
dec
pop
cdq
into
cmp
and
xlat
arpl
push
mul
(bad)
je
int
jae
add
mov
(bad)
in
xchg
cmc
idiv
scas
(bad)
sbb
imul
call
mov
adc
aad
lods
sbb
mov
xor
inc
cmc
add
add
movs
ret
test
imul
lds
test
out
sub
add
inc
arpl
sbb
xchg
mov
mov
jmp
sub
sbb
or
lea
jbe
adc
inc
rcr
mov
jne
pop
fstp
and
jg
mov
cmp
or
xor
xchg
pop
xor
or
and
and
lds
dec
xor
and
nop
jmp
xor
and
push
imul
test
pop
in
shl
add
jb
repz
rcl
jo
mov
mov
aas
mov
jae
stos
dec
stos
or
(bad)
imul
pop
aam
xor
movs
sbb
leave
pop
popf
pop
mov
fs
sbb
push
mov
test
js
addr16
nop
or
mov
int
pop
and
mul
xchg
mov
mov
sbb
and
fstp
mov
std
shl
shl
push
cmp
fwait
xchg
dec
fcmovu
cmp
dec
shr
mov
int3
jo
sbb
mov
xchg
xchg
arpl
adc
mov
or
sti
pop
mov
cmp
xlat
retf
mov
outs
fnstenv
inc
inc
sahf
(bad)
retf
sbb
or
cmp
mov
stos
mov
mov
and
and
in
jo
xchg
lahf
je
xchg
push
push
cmp
cmps
es
in
jb
sub
pusha
aam
pop
add
dec
test
xchg
and
xlat
cmp
jmp
mov
psubusb
(bad)
and
jae
std
into
jne
adc
sbb
jg
(bad)
lods
push
gs
jbe
mov
xchg
cli
loop
xchg
lods
mov
or
sbb
dec
lock
mov
and
retf
mov
jmp
dec
cmp
xchg
jecxz
mov
in
nop
mov
sub
sbb
xchg
mov
jp
ds
push
paddusb
jmp
pop
cmc
mov
pop
mov
jmp
xlat
cli
mov
imul
cmps
(bad)
pop
clc
mov
aas
leave
stc
leave
and
dec
sub
xor
bound
xchg
(bad)
in
jmp
loop
lods
pop
jmp
repnz
xor
pop
ss
mov
loopne
inc
jmp
or
pop
loop
mov
jae
xor
(bad)
adc
push
mov
enter
call
and
pushf
loop
das
jmp
outs
push
and
sub
xchg
mov
xchg
js
push
(bad)
dec
jne
jg
or
pop
jb
dec
inc
dec
sbb
mov
dec
pop
and
enter
bound
sub
mov
data16
lock
ins
adc
pop
and
sbb
and
pop
fstp
jno
and
test
and
or
adc
out
cmp
pop
cmp
pop
movs
pop
cld
jl
and
test
bound
neg
cmp
(bad)
cmp
aam
(bad)
xor
rcr
neg
lods
push
cmp
pop
and
jo
or
cwde
mov
(bad)
mov
retf
add
mov
leave
jae
pusha
or
leave
shl
pop
push
in
bound
jne
imul
bound
adc
enter
mov
cli
xor
fdiv
inc
fnop
push
sub
pop
fistp
int3
xor
(bad)
rcl
ins
adc
ins
call
cmp
jecxz
es
jb
aam
inc
pop
push
movlps
sub
hlt
and
(bad)
hlt
(bad)
xlat
mov
jns
push
cmp
fwait
lahf
xor
adc
stc
lds
pusha
xor
std
jle
adc
(bad)
test
js
repz
jbe
call
les
push
out
repnz
in
inc
mov
push
cwde
mov
pop
loope
icebp
mov
and
mov
repz
gs
out
mov
mov
mov
loope
xor
xchg
sbb
loopne
clc
sub
dec
pop
inc
xchg
sub
cmps
jle
jae
push
outs
pop
fs
shr
sub
mov
inc
jge
dec
lahf
adc
inc
pop
pop
cmp
adc
and
push
loopne
cmp
pushf
mov
add
fdivr
test
pop
bound
xor
jb
sti
mov
ss
pop
pop
loopne
xor
sbb
test
cmp
fs
adc
mov
add
icebp
fmul
sub
in
adc
cwde
mov
mov
mov
adc
dec
dec
(bad)
aam
sub
adc
pop
push
xchg
hlt
xor
out
in
div
mov
into
add
sub
cwde
jmp
jns
add
inc
sub
mov
shr
dec
jp
addr16
stos
mov
loop
shr
sbb
dec
(bad)
pop
adc
adc
es
inc
fdivr
push
sbb
sub
fwait
mov
(bad)
(bad)
repnz
jg
in
aaa
data16
pop
leave
fisttp
jne
lods
add
aas
shl
adc
inc
push
scas
popa
aam
mov
fisubr
int3
and
and
sub
push
xchg
push
imul
jge
inc
pop
sub
sub
outs
rol
sahf
jb
or
add
(bad)
std
icebp
sahf
xor
mov
pop
inc
sbb
inc
std
jno
cdq
and
mov
xchg
std
sahf
fdiv
imul
xchg
fwait
xor
pop
mov
jg
push
mov
and
mul
add
cmp
add
pop
cld
aas
jnp
aaa
fst
cwde
xor
xor
outs
add
imul
sahf
jno
js
ins
dec
dec
push
fprem1
inc
xchg
add
fdivr
dec
mov
imul
cmp
test
stc
inc
dec
dec
xor
pop
xor
sbb
scas
cvtps2pd
pushf
push
sbb
sub
pop
sub
lods
shr
ret
test
jecxz
push
mov
mov
adc
dec
sub
sar
retf
je
sbb
popf
jnp
popa
push
lea
and
or
xor
xlat
xchg
aas
(bad)
pop
jl
push
mov
pop
push
sar
sub
call
and
dec
test
cld
sti
mov
inc
retf
jl
std
es
ds
push
or
jl
add
mov
stc
test
arpl
sbb
push
sub
cmovg
clc
fnstenv
or
(bad)
into
add
loopne
iret
sbb
jmp
push
dec
or
sub
cmp
xchg
sub
or
or
nop
push
xor
mov
mov
mov
bound
(bad)
repz
shl
hlt
call
inc
push
test
int
div
jbe
cmp
call
dec
jnp
inc
imul
mov
xchg
mov
js
mov
dec
pop
daa
add
(bad)
mov
into
imul
mov
mov
mov
mov
add
int
inc
jmp
(bad)
call
push
xor
ds
cs
dec
or
jno
mov
adc
int
out
xlat
js
stc
mov
xchg
fadd
push
gs
lahf
mov
sti
pushf
mov
or
push
dec
cmp
xchg
in
gs
das
push
add
loop
dec
ds
call
scas
mov
dec
cmp
arpl
mov
sahf
repz
cmp
cmp
outs
idiv
daa
inc
hlt
sbb
clc
or
mov
mov
sahf
jne
pop
mov
pushf
jl
xor
(bad)
xchg
xor
shl
jecxz
jne
cwde
sub
inc
inc
cdq
in
clc
jo
rol
fidivr
cmps
sub
jecxz
in
pop
call
inc
(bad)
jecxz
hlt
sbb
out
sbb
inc
add
cmps
sbb
leave
repnz
and
mov
sbb
fdiv
jb
shr
push
mov
in
fnstsw
arpl
cld
rcl
sqrtps
jnp
(bad)
stos
mov
xchg
jmp
dec
popa
jae
push
adc
mov
mov
push
loopne
mov
pop
call
sub
or
pushf
mov
inc
jle
cld
shl
iret
jno
mov
sti
inc
add
jg
push
mov
jg
rcl
sti
xchg
jp
fdiv
dec
pop
ins
mov
push
mov
in
ficom
xchg
xchg
fucomi
inc
lahf
sti
xor
ficomp
cmp
mov
cmp
or
out
pop
or
imul
push
ss
div
stos
rcr
mov
jmp
cmp
mov
sti
add
(bad)
mov
loope
out
popf
stos
jmp
push
mov
enter
mov
jmp
adc
pusha
and
xchg
xor
push
(bad)
mov
mov
pusha
adc
mov
sub
out
cld
enter
and
enter
sub
or
jno
pop
or
push
xchg
repnz
push
loope
add
mov
cmp
aaa
or
mov
adc
mov
lea
fnsave
movs
fdiv
and
inc
and
mov
inc
fwait
xchg
cwde
xchg
in
jmp
pusha
ret
fnsave
xchg
enter
adc
(bad)
sub
cs
dec
aad
in
sbb
mov
inc
dec
sbb
or
pop
lods
or
cmp
mov
loop
inc
xchg
inc
loopne
or
gs
enter
lea
sbb
rcr
xchg
loopne
cli
sbb
or
adc
test
outs
mov
(bad)
bswap
(bad)
cmc
dec
xlat
ss
mov
and
mov
rcr
add
mov
daa
dec
daa
jae
cmp
sbb
repnz
or
(bad)
ror
push
push
ficom
(bad)
or
mov
ins
mov
cli
push
cmp
or
push
fcom
fdiv
in
je
std
jb
in
dec
xchg
pop
xlat
std
mov
mov
pop
push
ins
push
bound
(bad)
pop
xor
out
out
and
lahf
movs
(bad)
rol
cmp
into
in
jo
push
in
retf
jl
sbb
stc
jl
adc
scas
loopne
cwde
mov
adc
mov
test
inc
xchg
adc
imul
retf
pop
jmp
xchg
int3
jb
in
add
add
stc
fld
(bad)
push
and
mov
fs
jecxz
sbb
int
sbb
je
scas
adc
ficom
mov
fs
out
into
lods
mov
mov
push
sbb
mov
aam
add
xchg
cmp
dec
cmp
mov
and
idiv
(bad)
push
sbb
jbe
aaa
repnz
adc
adc
inc
fstp
hlt
fadd
data16
dec
outs
pcmpgtb
lea
sbb
xlat
popa
(bad)
pop
xchg
jae
push
xor
cmp
aas
mov
add
mov
outs
sar
mov
rcr
sar
push
push
jno
in
jp
fnsave
cmps
jp
jo
scas
cdq
lock
sub
cmp
xchg
push
mov
push
push
pop
and
and
(bad)
and
jnp
jae
imul
jne
xchg
out
push
dec
rol
fsub
inc
call
pop
xchg
inc
lsl
push
adc
pop
outs
cld
outs
addr16
jno
popa
jmp
aaa
and
cmp
(bad)
ret
stc
pusha
shl
inc
inc
sub
pop
rcr
aas
add
mov
int3
int
sub
ja
push
mov
xchg
and
enter
mov
add
daa
(bad)
pusha
aam
mov
push
and
dec
(bad)
xor
int
aam
cmp
cmp
scas
mov
dec
icebp
adc
pop
cmp
sub
and
mov
xor
jmp
(bad)
sub
mov
xchg
and
jle
fucomp
dec
in
sub
das
push
xchg
loop
xor
ins
inc
mov
sub
es
xor
xchg
add
movs
or
or
in
adc
inc
stc
das
xlat
fldcw
xchg
icebp
iret
push
jg
push
arpl
and
ret
or
fcmovnu
xchg
mov
push
xor
mov
mov
add
retf
lds
add
sub
xor
cmc
scas
popa
(bad)
call
xchg
fsub
jnp
push
mov
repz
mov
out
inc
cmps
sbb
pop
mov
pop
sbb
inc
call
call
imul
stc
add
out
shl
xchg
or
sub
and
pop
aad
and
mov
fmul
jb
dec
jl
jno
push
dec
popa
cli
xchg
aas
mov
les
mov
sbb
inc
sub
in
sbb
(bad)
push
cmp
cmp
test
scas
pop
inc
shl
inc
pop
out
sbb
jno
test
stos
sub
push
aad
cwde
inc
mov
sti
inc
mov
xchg
int
jne
mov
xlat
mov
cld
stos
sbb
mov
repz
sub
(bad)
mov
xchg
jo
sbb
call
sahf
sub
test
test
shl
inc
call
add
call
and
xor
js
or
mov
loop
je
xchg
outs
cmp
adc
movs
fistp
cli
and
mov
push
dec
test
fisttp
into
or
test
and
mov
jp
pusha
mov
addr16
fidiv
add
xchg
in
clc
bound
ins
enter
fucom
je
mov
pop
fnsave
mov
cmp
push
std
xchg
ss
movs
or
sbb
inc
stc
inc
mov
adc
test
pushf
hlt
jae
cmp
in
xchg
nop
add
in
fldenv
push
push
aad
scas
cli
(bad)
aas
outs
mov
jmp
add
loop
clc
xor
inc
and
or
push
or
push
pop
add
or
aam
jl
inc
ss
or
push
cmps
scas
stos
lock
push
movs
call
sbb
xor
pop
popf
sar
jb
sub
aad
outs
mov
fdivp
fs
icebp
(bad)
aam
inc
cmps
fisttp
pop
push
jnp
jl
and
dec
jmp
inc
and
imul
cmc
(bad)
lods
mov
ds
test
scas
rol
push
or
xlat
sbb
fnsave
fs
pop
mov
xchg
imul
push
aam
dec
xchg
sub
adc
pop
enter
shl
mov
dec
pop
cmp
push
int
fbld
enter
and
es
jmp
test
outs
and
xor
push
clc
ins
aad
in
int
repz
sti
in
aaa
shr
xor
cmc
dec
das
retf
push
mov
stos
sub
inc
pop
fsub
adc
mov
inc
imul
and
pushf
fidivr
hlt
xor
xor
mov
test
addr16
adc
lods
mov
ins
push
sbb
push
adc
in
je
mov
add
(bad)
pop
sub
ss
je
inc
(bad)
cmp
stos
mov
xor
dec
ret
pop
imul
xchg
add
rcr
movs
in
jmp
ja
in
jbe
movs
in
xchg
mov
(bad)
not
(bad)
xor
daa
call
cmpps
(bad)
into
movs
mov
xor
jae
inc
push
adc
popf
mov
mov
nop
adc
cdq
xchg
fimul
mov
and
in
test
popf
jge
push
mov
or
ja
sbb
jp
xor
pop
jbe
sub
rol
add
adc
adc
in
aad
cs
out
push
jge
ret
loopne
or
jmp
lea
enter
repz
dec
imul
addr16
les
add
mov
ss
(bad)
(bad)
mul
in
cmp
stos
sbb
sbb
aas
int3
mov
xor
add
adc
xor
(bad)
cmp
pop
sub
sbb
push
add
push
pusha
inc
and
sub
ret
push
dec
fnstsw
pop
adc
inc
aad
xor
mov
mov
mov
sti
jle
jmp
ss
pop
fsubr
xor
jg
jbe
xor
scas
ret
or
inc
or
inc
mov
aaa
xchg
sub
cmp
aad
push
pushf
cmp
push
outs
lds
(bad)
aad
mov
mov
push
mov
popa
cmp
stos
nop
imul
ss
bound
ret
aaa
sub
push
data16
sbb
mov
les
mov
xchg
fistp
pop
ret
inc
movs
and
(bad)
aaa
sbb
jl
sbb
fnsave
and
fstp
jl
jp
inc
cmc
jle
push
lods
in
scas
ficomp
pop
aaa
fwait
dec
sub
jmp
sbb
aaa
inc
lea
lods
shr
repz
mov
xor
push
inc
cmp
shr
push
jo
sub
sar
push
scas
add
mov
popf
out
mov
in
retf
pop
jecxz
sub
ror
and
test
mov
push
mov
jnp
sar
ror
jae
shl
xchg
shl
stos
retf
in
sar
mov
dec
idiv
mov
xchg
jne
or
xchg
add
cmc
mov
repz
mul
inc
mov
jnp
mov
mov
fldcw
ja
stos
lods
bound
mov
dec
in
inc
(bad)
pop
stos
adc
sti
mov
aad
jmp
(bad)
pop
mov
outs
mov
fucomp
bound
xchg
pop
(bad)
xor
or
test
jmp
out
and
xchg
not
pop
stc
pop
cmp
(bad)
icebp
call
mov
dec
fisttp
ds
and
adc
xchg
add
mov
lds
xor
add
stos
dec
fisttp
mov
cmc
out
in
repnz
scas
dec
inc
lea
mov
sbb
fst
rol
xor
pushf
nop
xchg
pop
push
imul
and
add
mov
mov
and
adc
sbb
or
stc
(bad)
cmps
xlat
push
pop
inc
aas
aam
cmp
fisubr
pop
push
retf
xor
adc
out
fxch
and
pop
xlat
xchg
xchg
cmps
rol
mov
(bad)
push
adc
jmp
xor
inc
pop
in
mov
and
jmp
sbb
repz
imul
jecxz
xlat
or
sub
add
(bad)
pop
add
ds
add
jb
leave
imul
out
sbb
push
inc
jns
add
mov
call
sbb
ret
outs
push
movs
jecxz
push
cmps
cli
mov
mov
int
in
neg
mov
(bad)
lock
jne
sub
inc
scas
nop
sbb
and
sub
icebp
lock
es
xlat
add
pop
sbb
jb
int3
out
add
scas
sub
mov
lods
add
lahf
rol
test
shl
cmp
mov
or
mov
push
popf
and
es
pop
jb
mov
add
add
aam
data16
lods
sub
dec
stos
addr16
(bad)
ins
mov
std
inc
jae
inc
xchg
hlt
fistp
sub
jg
movs
out
hlt
mov
stc
adc
fsub
xor
js
scas
loop
out
in
cld
add
fadd
(bad)
mov
jno
popa
pop
jae
out
std
jmp
jnp
nop
daa
sub
mov
retf
push
test
call
(bad)
mov
cmp
xchg
sub
sub
push
jecxz
aas
push
adc
imul
mov
enter
dec
or
mov
loop
adc
inc
(bad)
out
inc
(bad)
bound
dec
daa
(bad)
jmp
jl
or
movs
cmp
ret
xor
into
popf
js
(bad)
sbb
dec
pushf
mov
push
mov
scas
or
pop
xchg
mov
xchg
retf
leave
inc
jmp
(bad)
inc
dec
ins
and
sub
xchg
mov
dec
(bad)
les
stos
into
sahf
mov
add
xor
movs
clc
rcl
mov
xchg
int
arpl
neg
faddp
push
lea
add
rcr
or
adc
scas
mov
aam
and
nop
mov
adc
mov
(bad)
icebp
sub
jne
movs
xchg
xchg
push
hlt
mov
jns
mov
imul
arpl
or
mov
das
adc
push
pop
sub
pop
fdivr
inc
jae
test
inc
call
add
push
dec
or
and
sbb
dec
xlat
(bad)
xchg
jns
adc
fnsave
ficom
inc
xchg
aam
cmp
jo
xchg
les
push
mov
mov
nop
je
fbstp
aas
data16
popa
cmps
mov
and
nop
aaa
pop
pop
sar
outs
jb
mov
call
or
cwde
push
lahf
mov
dec
add
popa
enter
inc
aad
inc
inc
jge
push
add
ret
ins
int3
ja
shl
xor
mov
push
inc
mov
push
adc
jp
push
mov
cmp
cmps
xor
sub
mov
and
mov
sub
and
in
test
and
cmp
xchg
cmps
aad
(bad)
(bad)
(bad)
fsubr
mov
(bad)
into
outs
cld
test
call
std
pop
dec
jne
mov
ins
call
pop
xor
mov
and
cmp
(bad)
mov
(bad)
not
inc
jno
dec
mov
push
push
sar
int3
sub
(bad)
ror
lock
in
fistp
push
sub
add
sbb
arpl
dec
iret
fnsave
inc
call
aaa
jle
gs
add
or
shl
mov
or
ret
outs
fwait
out
aad
sbb
mov
cli
imul
into
mov
loop
jbe
rcl
les
or
icebp
lods
push
outs
fiadd
(bad)
out
test
test
xchg
add
or
loop
sti
adc
add
fcmovu
arpl
idiv
test
jmp
mov
mov
adc
add
inc
cmps
inc
xchg
cmp
push
jne
aas
push
sub
test
cmp
test
sub
add
push
iret
(bad)
mov
xchg
lods
or
ins
ret
inc
int
test
jnp
jmp
js
mov
xchg
cdq
dec
xchg
retf
xor
ja
add
int3
xor
xchg
mov
fld
sar
add
gs
hlt
out
shr
mov
adc
cmp
jle
pop
inc
mov
inc
cli
push
xor
addr16
rol
mov
jg
bound
out
mov
leave
push
xchg
outs
shl
jmp
cli
push
leave
add
pop
out
inc
jecxz
out
sbb
ins
push
add
cli
out
lock
xchg
mov
out
sti
jne
je
or
pop
mov
scas
cs
mov
cpuid
jl
cli
call
aas
mov
dec
cld
pop
shl
(bad)
neg
(bad)
jge
push
push
mov
inc
inc
push
test
xchg
push
pop
inc
div
loope
adc
inc
cli
push
mov
push
xchg
jmp
imul
cwde
cmps
jg
fcom
push
loope
loopne
lahf
sti
pop
sbb
lods
push
int
clc
add
inc
cmps
xor
push
pop
push
imul
leave
out
es
lods
arpl
mov
adc
sar
cwde
cmp
mov
push
pop
pop
or
data16
xchg
lahf
stos
pop
in
loope
inc
enter
imul
repnz
cmps
xchg
jns
dec
fwait
daa
mov
out
fldln2
xchg
inc
(bad)
imul
fwait
loope
adc
sub
xor
mov
in
or
cmps
sahf
stos
sbb
ret
cmp
(bad)
les
shr
and
or
dec
mov
jmp
pop
test
sub
daa
push
xlat
jg
inc
cmp
daa
push
cmp
xchg
mov
mov
repnz
mov
sub
rcl
mov
pop
cmps
add
pop
pusha
mov
out
addr16
in
sbb
dec
lods
sbb
fdivr
xor
xor
repz
jb
cmp
add
inc
jmp
push
jo
div
xlat
or
pop
sub
pop
cmp
xchg
jbe
inc
sti
pop
test
retf
shr
stos
cmp
mov
in
(bad)
pop
adc
or
ja
adc
push
retf
push
out
dec
lods
dec
jns
dec
xor
dec
dec
fld
mov
inc
pop
push
sub
lods
icebp
(bad)
adc
jecxz
cmps
imul
aad
(bad)
mov
sub
imul
popa
outs
xor
sub
sbb
jns
into
in
shl
arpl
push
xchg
adc
add
xor
xchg
or
nop
(bad)
out
test
sahf
imul
shl
xchg
jnp
out
retf
(bad)
push
bound
inc
dec
cs
mov
das
sbb
jb
jno
mov
jecxz
ret
pop
pop
mov
mov
and
std
or
mov
neg
jne
push
push
pop
mov
or
xchg
inc
out
aad
xchg
inc
and
je
fidivr
jne
dec
clc
movs
scas
adc
xchg
adc
repnz
pop
dec
mov
xor
mov
mov
push
or
scas
sub
call
sbb
fnstenv
loop
clc
inc
dec
hlt
inc
and
int3
jl
in
in
xor
lods
rcl
push
add
sub
arpl
mov
dec
sub
mov
adc
xchg
sbb
sti
lea
(bad)
push
and
enter
jbe
shr
popf
mov
shl
rcr
dec
jnp
and
enter
rol
movs
lahf
rol
mov
jp
and
xor
mov
push
out
out
mov
(bad)
xchg
test
ret
std
and
xor
mov
dec
mov
sub
arpl
hlt
xchg
pusha
xor
stc
das
adc
inc
push
(bad)
repnz
cmp
out
mov
cwde
sbb
std
int3
xor
in
xchg
dec
mov
mov
dec
inc
scas
lods
into
add
mov
div
push
mov
out
in
xlat
xor
add
mov
shl
data16
push
(bad)
and
push
mov
sub
in
mov
pop
jne
and
fsubr
out
or
pop
enter
pushf
xlat
test
loop
xchg
dec
in
in
je
or
sbb
ins
mov
test
lea
cld
loop
and
and
pop
call
push
jmp
fcmovu
test
lahf
pop
jmp
pop
aaa
jns
adc
test
mov
loop
es
add
mov
outs
add
in
call
mov
ss
icebp
ins
nop
or
fwait
pop
repz
mov
scas
push
lea
bound
push
int3
push
mov
sar
cld
bound
add
inc
fs
pop
mov
dec
jecxz
or
xchg
ins
mov
das
mov
push
mov
mov
mov
test
scas
fidivr
loop
outs
ss
shr
mov
dec
mov
mov
sbb
mov
dec
arpl
cmp
fldl2e
mov
frstpm(287
stc
or
sbb
cmp
jmp
xchg
dec
pop
inc
jo
outs
popf
sub
adc
in
call
sub
cmps
cmps
inc
rcr
out
mov
enter
mov
sbb
dec
popf
rcl
push
mov
int
push
lea
cmp
push
fwait
nop
pop
jg
pop
cmp
icebp
mov
inc
xchg
(bad)
adc
adc
lods
push
fisubr
sbb
push
fnstsw
mov
retf
ins
jo
fwait
mov
or
pushf
inc
sub
test
pop
xor
in
push
pop
loopne
mov
inc
shr
outs
cmp
shl
xlat
jg
pop
nop
ds
fst
test
mov
mov
mov
sahf
in
xchg
bound
call
js
adc
(bad)
in
inc
rol
mov
repz
dec
pop
aaa
daa
(bad)
cmps
clc
cmp
inc
jmp
lds
push
jge
out
leave
jmp
and
jmp
and
fimul
push
cli
mov
xchg
ins
adc
in
sub
fsubr
jmp
sbb
cmp
fadd
add
xchg
into
add
mov
mov
xchg
ret
repnz
aad
cmp
jl
rcl
jle
xor
xchg
xchg
pop
cmp
in
jmp
push
push
ja
sti
cli
scas
push
xlat
add
dec
sub
out
fimul
inc
sub
cmp
retf
push
shl
cmp
movs
mov
push
or
sti
and
test
mov
lock
pusha
mov
dec
call
stos
pop
repnz
sbb
inc
or
pop
test
mov
jp
cmps
xchg
adc
adc
fnclex
stc
lahf
jnp
inc
pop
xor
call
adc
sbb
and
push
call
jmp
shl
mov
cmps
or
adc
jle
and
dec
or
ds
sbb
add
sar
aad
gs
mov
jo
sbb
or
movs
iret
call
mov
test
sub
add
mov
mov
popa
cmp
mov
jns
mov
movs
aas
dec
shr
and
pop
call
cmp
fisub
lods
jnp
popa
jbe
inc
pop
mov
mov
daa
or
pop
add
cmp
mov
out
hlt
push
mov
cmp
pop
sahf
push
pop
in
pop
pop
fcmovb
in
sub
mov
jge
cmc
push
loopne
and
xchg
mov
repz
jmp
test
xor
jo
pop
jno
lods
push
das
int
iret
xlat
shl
inc
pop
nop
inc
fist
outs
push
dec
stc
xor
imul
push
push
jle
mov
push
mov
clc
int
popa
pop
jmp
fistp
das
je
aas
out
out
test
stos
mov
repz
cmp
jo
xor
push
ins
stos
or
(bad)
cli
fsubr
(bad)
loopne
and
sub
jae
retf
cdq
sbb
in
das
xor
mov
test
xchg
shl
jo
push
adc
fwait
je
add
aam
xchg
push
push
sbb
outs
dec
mov
nop
mov
push
repz
int3
ror
add
jg
(bad)
ficom
sub
in
scas
arpl
pop
mov
add
mov
mov
and
fwait
dec
fdivr
cmp
push
cwde
outs
pop
test
cli
inc
mov
(bad)
push
ficom
pop
pop
fadd
jb
clc
test
ret
adc
push
fcomp
pop
imul
mov
popa
lods
push
call
jnp
mov
jle
xor
icebp
inc
dec
test
and
or
in
mov
jnp
pusha
aaa
and
mov
sar
inc
outs
adc
push
cs
(bad)
mov
dec
loopne
iret
mov
dec
and
xor
add
outs
adc
adc
aad
jnp
and
imul
(bad)
sub
or
cmovs
addr16
imul
jp
out
ss
jmp
and
(bad)
adc
mov
aad
ffree
jmp
mov
dec
stc
pop
add
es
scas
sbb
mov
mov
xor
cmp
dec
ja
push
lea
ret
stc
dec
pop
jbe
addr16
fld
jmp
sbb
sub
jle
and
lods
xchg
lods
mov
fdivr
adc
mov
cld
mov
pop
push
jecxz
lds
adc
push
sti
scas
inc
dec
push
test
fucomip
ja
scas
popf
xlat
int3
adc
mov
xchg
dec
aaa
xchg
inc
clc
mov
dec
(bad)
(bad)
mov
xor
jns
pop
mov
mov
pushf
ror
sub
sub
sbb
cmp
data16
lea
test
pusha
dec
retf
xlat
inc
or
lahf
(bad)
or
pop
or
jmp
cmc
xor
test
pop
ret
sbb
inc
in
fild
pushf
push
push
data16
ficom
call
dec
out
test
(bad)
test
xchg
xchg
imul
cmp
iret
fld
out
jae
retf
pop
cwde
adc
push
nop
push
or
std
test
cmp
mov
dec
xor
jecxz
mov
jl
pop
mov
enter
movs
mov
adc
xlat
mov
jne
retf
add
xchg
mov
pop
cwde
(bad)
repnz
stos
dec
repnz
cs
popa
(bad)
ins
mov
popa
les
adc
dec
mov
and
mov
xchg
repnz
xlat
mov
cdq
daa
dec
mov
push
pop
jmp
or
inc
xor
int3
xlat
mov
js
mov
jle
adc
fwait
out
sub
dec
pop
adc
loope
ss
loopne
test
dec
xlat
inc
fmul
sub
adc
mov
push
fidivr
add
push
es
xlat
bound
pop
idiv
ja
pop
dec
cld
add
jbe
out
iret
out
mov
push
push
mov
cld
sbb
jnp
(bad)
stc
cmp
pop
outs
xchg
inc
jno
dec
je
lods
daa
aas
pop
retf
adc
adc
bound
or
jge
xor
out
push
cwde
pop
pop
and
sbb
add
sbb
and
jecxz
xchg
fldenv
in
int
fwait
push
loop
push
icebp
jmp
addr16
sti
ins
push
arpl
ret
mov
add
outs
in
sub
test
pop
xchg
dec
adc
add
mov
cmp
enter
(bad)
pop
and
loopne
jecxz
lods
adc
ret
pushf
jno
push
int
scas
gs
mov
mov
les
lods
test
pop
pop
push
adc
xchg
ins
adc
shl
clc
adc
pop
arpl
xor
(bad)
sub
push
jmp
push
aas
xchg
add
and
in
xor
sbb
daa
push
sub
imul
xlat
arpl
fisub
mov
adc
int3
push
pushw
adc
xchg
popa
cwde
sub
xchg
outs
ins
jecxz
push
xor
sub
mov
outs
xchg
mov
aam
mov
mov
xchg
mov
mov
jl
je
(bad)
pop
cmp
not
cmp
cmps
pushf
sti
fdiv
movs
cdq
mov
sub
and
xor
addr16
out
dec
sbb
mov
inc
xor
push
add
mov
inc
jg
cmp
aad
and
shl
gs
div
arpl
or
mov
mov
sub
jne
retf
mov
nop
in
push
in
push
addr16
loope
xchg
je
push
movs
add
mov
cmp
mov
out
(bad)
xchg
pop
pop
cdq
or
sbb
sti
sbb
mov
cdq
pop
enter
xchg
jle
fist
lds
imul
sub
ret
and
inc
adc
jbe
shl
retf
add
xor
fwait
sub
sub
dec
mov
sbb
xchg
xchg
add
fistp
sar
mov
jl
xchg
ins
aam
mov
call
jno
sbb
retf
repz
fisubr
cmc
lods
pushf
and
jne
adc
das
jb
inc
lahf
jbe
cmp
scas
out
pop
jge
scas
sbb
add
xlat
or
push
inc
mov
loope
push
js
inc
mov
(bad)
mov
jecxz
pop
sub
scas
cs
push
int3
test
jmp
mov
xchg
scas
xchg
push
dec
xchg
push
test
mov
inc
lods
mov
sar
jp
lods
pop
mov
loope
les
fcom
mov
inc
mov
in
call
or
xchg
ds
dec
mov
lods
scas
push
add
popa
rol
lods
repnz
ja
mov
jb
es
rcl
sahf
pop
jno
pushf
adc
int
mov
push
sbb
add
popf
mov
lahf
add
inc
fstp
dec
es
aas
xor
sar
mov
fsub
ins
(bad)
push
jne
jne
pop
ins
mov
lock
cmp
cld
aaa
ja
mov
in
fdiv
js
xchg
ins
inc
jl
dec
aaa
jo
mov
ret
xchg
xor
inc
ficom
movs
push
inc
adc
(bad)
sti
add
dec
fdivr
xor
add
jae
addr16
lock
(bad)
jmp
sahf
push
xor
adc
jb
ss
jmp
xchg
in
push
mov
lock
sbb
jno
mov
imul
jle
cmp
xchg
mov
mov
push
dec
inc
jl
sahf
out
mov
inc
sbb
loop
bound
push
popa
cmp
pusha
hlt
xchg
inc
(bad)
rcl
repnz
jmp
xor
ds
pop
shl
jae
pop
xlat
push
lods
in
cwde
sbb
enter
mov
mov
int
add
test
push
(bad)
sbb
popa
xor
(bad)
sar
jle
cmp
std
xchg
call
push
or
test
fcmovnu
icebp
pop
mov
mov
test
xor
or
mov
xchg
addr16
push
xchg
int3
retf
inc
lods
out
int
je
ja
dec
fwait
cmp
cmp
adc
cs
cmps
jno
lods
cmps
mov
xchg
mov
adc
ret
mov
dec
cmps
push
xchg
xor
xchg
push
imul
push
leave
mov
adc
adc
pop
sbb
cmp
dec
ss
mov
mov
call
in
leave
lds
pop
mov
shr
push
stos
mov
int3
faddp
fiadd
mov
sub
popf
in
push
sahf
cmp
iret
or
xchg
leave
jno
mov
adc
mov
cwde
cmp
or
inc
shl
shl
adc
xchg
outs
cmps
pusha
shr
in
fidiv
(bad)
xor
js
test
cmp
jbe
hlt
dec
cmps
or
loop
jl
std
mov
mov
mov
mov
cdq
into
sti
int
mov
xor
cli
mov
sub
imul
pop
adc
mov
mov
mov
push
shl
enter
sbb
jae
movs
dec
mov
lds
mov
jbe
ins
mul
jns
or
fisub
inc
(bad)
cdq
xchg
mov
outs
pop
sub
or
enter
fwait
xchg
dec
pushf
or
fprem
dec
imul
inc
je
out
test
dec
in
add
mov
pop
push
loopne
pusha
adc
out
and
cdq
aad
leave
cmp
pop
popf
popf
mov
lds
lods
outs
pop
push
mov
cmp
cmc
xor
outs
xchg
in
mov
mov
pop
ffreep
fsubr
add
mov
xchg
push
xor
mov
test
es
aaa
and
ret
sub
pop
dec
xor
dec
(bad)
fstp
outs
mov
mov
movs
push
mov
mov
cmp
test
int
les
sub
fwait
aam
test
imul
sar
popf
cwde
push
pop
pop
or
mov
ins
mov
jle
(bad)
mov
in
add
mov
xor
dec
jno
mov
adc
lods
vpcomuw
pop
shl
jecxz
jecxz
cmp
add
popf
xchg
push
(bad)
or
push
pop
lods
jae
dec
popf
lock
std
aaa
jno
loop
hlt
adc
je
jmp
aaa
xchg
jbe
push
push
pusha
outs
jns
pop
dec
sbb
sub
sbb
adc
frstor
std
(bad)
ja
mov
addr16
mov
test
adc
out
mov
sub
mov
outs
cmc
out
jbe
out
sbb
dec
jmp
daa
cmp
ins
pop
movs
hlt
adc
int3
js
cmc
add
outs
add
jl
push
push
cs
test
mov
mov
out
xchg
lods
out
in
sub
call
icebp
pop
jl
rcl
mov
(bad)
inc
add
frstor
sti
call
iret
out
inc
popf
jmp
xchg
retf
pop
xor
rcl
not
stos
add
xchg
shl
and
mov
pop
sbb
mov
stos
push
mov
pusha
or
add
loop
xchg
mov
neg
clc
adc
cmc
xor
out
cmp
lock
push
adc
adc
popa
cmp
icebp
pop
and
fcomp
mov
xchg
pop
daa
inc
ret
imul
and
cmc
cmp
add
mov
or
loopne
shl
mov
mov
xchg
pop
in
mov
scas
jmp
cs
push
fiadd
and
mov
retf
sbb
inc
in
jmp
and
aaa
jnp
ins
push
rcl
mov
stos
push
xchg
add
test
in
mov
rcl
mov
push
push
sub
push
std
dec
loopne
test
dec
sub
shr
cdq
mov
test
out
lods
gs
pop
jle
mov
sti
pop
xor
mov
aam
aaa
repz
inc
and
sti
mov
xor
mov
and
or
ror
outs
je
dec
pop
xchg
mov
out
ins
push
in
int
aaa
jo
push
xchg
add
ins
rcr
fstp
mov
retf
or
pop
in
nop
inc
das
cwde
aas
pop
popa
int3
cmp
push
stc
add
movs
adc
loope
sbb
push
add
pop
adc
(bad)
sub
mov
jnp
dec
loop
jne
out
or
aam
icebp
and
nop
and
pusha
lock
jno
mov
sahf
push
and
jg
or
out
inc
sbb
cmps
add
jp
sbb
je
(bad)
jnp
jg
arpl
outs
fadd
sbb
adc
mov
or
ja
ins
aaa
loop
inc
rcr
into
sbb
lock
scas
cmp
push
(bad)
sub
jno
iret
shr
lods
shl
cmc
sub
or
into
inc
daa
aaa
nop
add
inc
mov
adc
and
jbe
fs
rcr
mov
movs
mov
mov
inc
call
or
mov
ins
xor
jb
popf
cmps
push
cli
shl
(bad)
aam
mov
int3
enter
loope
mov
cmp
lds
sar
(bad)
(bad)
jl
btc
cmc
aas
lds
mov
imul
into
xor
xchg
rol
add
daa
ret
jns
iret
dec
xchg
xchg
inc
mov
movs
sub
jecxz
cli
daa
add
inc
repz
cmp
test
(bad)
loop
gs
push
ret
xchg
inc
adc
out
and
nop
and
mov
inc
sbb
mov
fld
sbb
pushf
pop
imul
mov
push
xchg
mov
ror
sbb
icebp
mov
fcmovbe
jg
pop
add
or
adc
call
sbb
pushf
push
ins
jne
sub
push
mov
mov
pop
sbb
aaa
xchg
xor
imul
sub
and
pop
stos
sub
jae
jp
sbb
cmp
xchg
pop
pop
in
and
sub
bound
sub
push
jne
add
jmp
inc
imul
sbb
test
stos
jne
push
loop
jnp
xor
mov
ja
mov
loopne
and
rcl
out
cli
and
mov
add
loope
adc
jmp
movs
jnp
out
dec
sub
sub
ins
xor
add
fstp
stc
and
inc
imul
and
jecxz
call
fcmove
xor
sub
sub
jnp
jno
add
clc
sub
pop
dec
int3
ret
inc
scas
(bad)
pop
(bad)
jne
and
jge
sub
push
or
std
push
and
cdq
out
or
rcl
hlt
in
jne
mov
daa
mov
pushf
fisub
cmp
adc
nop
fadd
fs
fwait
sub
int
je
ins
adc
push
mov
test
dec
push
lahf
stc
add
mov
cmp
ja
outs
push
pushf
call
jae
sbb
mov
or
sbb
mov
(bad)
fdiv
dec
out
mov
add
sub
jmp
pusha
jnp
jno
inc
xchg
or
ds
adc
loop
cmp
(bad)
pusha
mov
(bad)
test
fdivr
loopne
and
dec
int
outs
xchg
pop
xlat
mov
push
popf
cmp
jmp
xchg
sbb
jne
dec
inc
xchg
dec
out
mov
rcl
mov
(bad)
test
add
stos
adc
jg
test
gs
push
push
mov
mov
gs
mov
push
lods
and
cmc
adc
nop
loop
push
and
pop
hlt
ins
ficom
mov
dec
int3
outs
dec
xchg
inc
popa
mov
dec
add
cdq
call
mov
bound
inc
fdivr
push
jmp
fs
adc
mov
es
xchg
jo
lea
jo
push
shl
sub
mov
sub
scas
sbb
sub
loop
ins
pop
popa
stc
mov
and
cli
xchg
jmp
int
pop
xchg
les
shl
fs
fwait
int
scas
shr
pop
fld
mov
inc
mov
and
dec
mov
jp
add
or
and
jno
xor
cli
pop
lock
xchg
mov
mov
ret
jnp
dec
jmp
imul
shl
enter
ins
adc
(bad)
cmc
cld
aas
scas
ror
hlt
cmps
jge
adc
(bad)
cli
imul
or
mov
out
rol
fucomip
and
jmp
jne
jle
add
pop
mov
push
push
jae
pusha
mov
add
(bad)
popf
adc
xchg
mov
mov
mov
jo
xchg
mov
mov
popf
test
cmp
out
mov
cmp
ins
inc
dec
cmps
jp
loope
call
cmc
popa
jnp
xchg
je
adc
cdq
mov
scas
push
xchg
ror
xchg
lea
jmp
sub
jecxz
and
mov
in
outs
sahf
xchg
fcomi
jae
mov
loope
inc
cmps
mov
repnz
std
fcmovbe
sbb
rol
dec
inc
shl
inc
arpl
push
ret
or
aas
push
in
mov
xor
push
xchg
inc
ja
jno
out
movs
jle
loop
mov
add
mov
jmp
dec
jns
push
sbb
mov
cmp
(bad)
dec
bound
sbb
fsub
sub
sbb
jmp
mov
pop
shl
add
popf
cmps
fwait
sub
add
aaa
je
add
test
jecxz
inc
enter
adc
fwait
icebp
leave
out
retf
scas
rol
add
dec
push
shr
cmp
mov
test
outs
xchg
je
scas
sbb
pop
outs
mov
xchg
mov
jmp
push
add
inc
mov
pop
adc
repz
sti
adc
jae
add
bswap
xor
repnz
jb
jge
outs
dec
mov
sbb
xor
and
(bad)
cmp
or
cmp
sub
ins
sti
aaa
push
push
mov
sbb
(bad)
push
gs
or
cli
into
dec
in
ins
and
test
iret
add
mov
jo
test
xchg
and
mov
xchg
(bad)
loopne
dec
cmps
dec
adc
sub
aas
je
mov
(bad)
push
dec
aaa
jmp
mov
inc
dec
jmp
ret
mov
mov
or
dec
in
pop
jne
dec
scas
xadd
mov
icebp
xor
or
sub
pop
aad
inc
xchg
push
jb
stc
jecxz
push
outs
aam
or
int3
pop
jmp
xchg
repz
mov
cmp
add
xor
jg
mov
pop
dec
fstp
fdivr
mov
inc
aad
test
and
stos
js
iret
hlt
retf
call
pusha
mov
cs
xchg
movs
jg
pop
(bad)
fldenv
push
out
push
adc
pop
ins
pop
call
or
cmp
es
xlat
xor
jmp
sti
sbb
in
xchg
mov
or
jl
xor
pop
scas
out
jne
ins
sbb
fst
cmp
pushf
cmp
pop
out
pop
pusha
mov
xchg
in
fimul
ds
fadd
cli
push
jno
gs
xchg
daa
mov
call
push
add
or
xor
out
cs
and
inc
push
call
lods
jb
loope
lds
std
out
icebp
ret
arpl
rcl
xor
ret
sti
xchg
add
adc
xor
jb
pusha
into
lds
and
retf
ss
push
add
pop
sbb
icebp
mov
push
jb
shr
dec
jne
jle
lds
xor
movs
aad
daa
jmp
sti
add
push
loope
mov
out
or
repz
in
mov
xor
push
lods
push
adc
xor
es
mov
cmps
int3
les
inc
pop
dec
das
pop
and
xor
push
imul
pop
arpl
inc
rol
stos
mov
jl
int
test
sbb
mov
mov
dec
scas
movs
jnp
scas
lods
and
std
pusha
dec
or
inc
push
lds
leave
xor
dec
cld
call
xor
ja
(bad)
xchg
mov
sub
out
fwait
scas
fstp
inc
lds
not
sbb
(bad)
scas
stc
(bad)
jl
mov
pop
jg
bswap
fcomp
loop
dec
push
repnz
pop
add
pop
enter
dec
jo
xchg
jmp
adc
mov
mov
(bad)
add
(bad)
dec
es
sbb
int3
movs
aam
inc
(bad)
rol
shl
jecxz
mov
jne
xchg
neg
(bad)
dec
mov
jno
pop
in
xor
xchg
int
popf
fsub
fs
test
bound
shr
test
fwait
push
out
pusha
aad
(bad)
fcom
sub
sbb
jb
rcl
sub
pushf
mov
xchg
push
fst
iret
xchg
not
xchg
push
std
jns
jle
mov
lods
stos
lds
sar
sbb
xlat
cmp
lock
call
jne
movs
mov
dec
cmp
inc
pop
xchg
push
or
add
rep
jmp
push
inc
test
adc
mov
jns
test
and
adc
imul
xor
sbb
or
jmp
push
fcomip
fs
fs
test
(bad)
xchg
mov
adc
or
push
repz
enter
(bad)
ds
adc
sbb
rcl
xchg
cmps
sbb
shl
(bad)
fnstenv
inc
sub
imul
cld
jbe
pop
dec
add
movs
push
loope
movs
cdq
jmp
js
or
retf
mov
jmp
or
cmp
xor
lahf
clc
icebp
pushf
repnz
dec
jmp
xor
aad
and
push
jge
fistp
das
stc
out
mov
and
inc
shl
(bad)
pop
(bad)
add
fimul
mov
into
mov
mov
sbb
add
mov
jno
ds
and
outs
inc
add
xor
or
cmp
out
pusha
int
into
imul
xchg
inc
(bad)
repz
inc
and
out
mov
fnstenv
mov
mov
xor
and
mov
add
sub
rcl
arpl
jbe
mov
ficom
xor
xchg
sbb
cdq
or
mov
fnstsw
mov
mov
(bad)
scas
mov
call
call
iret
scas
pop
jb
push
ja
push
adc
sbb
popf
jmp
popa
or
jnp
xchg
out
add
movs
data16
(bad)
pop
in
shr
dec
sti
add
lock
pop
or
push
xchg
lds
imul
out
daa
pop
cmp
in
into
or
loope
jle
inc
in
sub
or
pop
cld
icebp
inc
jne
pop
xor
inc
outs
adc
cmp
mov
lahf
frstor
cld
cmp
push
mov
outs
inc
inc
adc
jo
mov
xor
push
into
fimul
pop
icebp
sbb
xor
fadd
mov
push
jg
cmc
or
(bad)
sub
in
dec
jge
fisttp
aaa
or
sbb
hlt
imul
xchg
mov
mov
sbb
pop
mov
stos
sub
fiadd
cmc
arpl
inc
pop
push
dec
fcomp
jg
pushf
push
stos
push
loop
mov
mov
cmps
add
push
mov
aad
jle
mov
rol
sbb
(bad)
in
out
ret
adc
push
xor
jl
test
xlat
pushf
retf
jp
ds
popa
sub
leave
push
clc
mov
lock
dec
(bad)
pop
pop
cmp
lds
inc
scas
xchg
mov
xchg
cmp
push
rcr
jmp
mov
mov
vmread
xchg
push
xor
mov
push
repz
dec
lea
cmp
retf
sahf
pop
sub
cmp
or
dec
cmps
adc
mov
jae
ret
imul
test
aaa
adc
push
cs
addr16
mov
mov
mov
pop
fs
mov
sbb
and
and
adc
cmp
retf
bound
stc
stos
mul
mov
inc
adc
daa
dec
jle
sbb
or
xchg
jne
pop
xchg
dec
and
std
xor
enter
xchg
test
xor
out
nop
mov
call
js
je
xchg
leave
sub
mov
and
jbe
xor
sub
ins
push
mov
(bad)
mov
mov
cmp
lock
push
loop
jae
fild
sbb
inc
ror
adc
inc
daa
dec
pop
rcl
adc
xchg
mov
rcl
scas
ja
fwait
mov
and
fsub
js
iret
outs
mov
leave
jmp
icebp
loope
jnp
fwait
xchg
cwde
stos
pusha
jns
call
or
xchg
mov
mov
and
mov
ret
int3
lock
outs
adc
jo
adc
fisubr
mov
data16
std
in
movs
xchg
ret
call
retf
sub
daa
lods
sbb
adc
cdq
sub
aad
jp
cmp
std
inc
jbe
imul
xlat
xchg
fcmovu
mov
adc
ds
xchg
dec
cli
call
inc
cld
cmp
daa
adc
daa
cmp
mov
mov
cmps
pop
popf
pushf
test
ffree
sbb
sbb
dec
(bad)
cmp
adc
adc
retf
and
push
cld
fdiv
inc
test
lea
pop
adc
repz
call
ins
and
jo
or
pop
jle
xchg
imul
xchg
jbe
(bad)
adc
cmp
das
out
jmp
dec
lds
sub
sbb
or
movs
and
mov
mov
ds
push
in
lods
sbb
mov
sti
push
pop
pop
mov
xor
out
test
shl
sub
inc
jmp
call
pop
inc
std
push
fild
adc
fstp
xor
mov
pop
mov
movs
sub
out
xchg
addr16
in
retf
(bad)
out
rcl
jmp
out
lods
out
push
and
dec
(bad)
fdivr
lds
les
mov
dec
sbb
or
aad
pop
test
push
mov
es
lahf
retf
push
sbb
push
mov
jmp
out
cmp
cwde
pop
cli
sar
ins
in
stos
cdq
out
inc
ins
ins
sub
and
adc
inc
inc
xchg
repz
xchg
mov
(bad)
mov
mov
arpl
(bad)
out
xchg
dec
mov
mov
out
xchg
cmp
pop
in
enter
mov
mov
ins
cmp
ficom
enter
sbb
int
test
xchg
cli
addr16
shl
ret
mov
in
pop
fldpi
xlat
mov
shl
in
into
mov
mov
xchg
imul
ins
out
xor
out
pop
retf
xor
cdq
inc
(bad)
(bad)
sbb
hlt
aad
jp
scas
mov
movs
jle
pusha
shr
and
pop
mov
or
stc
retf
jge
and
in
mov
mov
ins
test
pop
fst
dec
pop
es
jnp
scas
xchg
mov
sbb
push
pop
mov
mov
jae
pop
shl
setl
rcr
mov
shl
ret
cmp
int
mov
jae
scas
rcl
push
push
xchg
rol
cwde
mov
fisttp
mov
jns
call
cwde
pop
and
mov
movs
aaa
xor
push
scas
ja
in
mov
push
or
inc
test
stc
add
into
pop
shl
sar
mov
inc
sbb
hlt
add
test
lock
mov
stos
inc
sar
lods
sub
inc
lods
mov
or
mov
hlt
add
imul
add
loop
pop
sbb
nop
cmc
div
cld
movs
pop
mov
and
call
cld
sbb
jbe
ins
rcr
imul
jo
inc
xchg
jle
fs
and
into
dec
cmps
mov
cwde
das
push
adc
test
shl
stos
test
sub
(bad)
mov
pop
push
iret
cdq
sbb
adc
sbb
adc
jmp
cdq
out
cdq
mov
les
jae
jp
sub
mov
aam
dec
adc
mov
jecxz
rcl
cli
or
das
shl
sbb
scas
sub
(bad)
ins
cwde
data16
xchg
jne
mov
push
clc
xor
push
fdiv
dec
or
pandn
cwde
jg
dec
std
jno
ret
fdiv
pop
xchg
repnz
rcr
in
fiadd
cwde
(bad)
aad
punpckhwd
jmp
adc
pop
pop
mov
inc
cmp
push
push
mov
add
add
outs
jns
les
mov
xchg
(bad)
nop
clc
and
mov
aaa
int
jmp
push
dec
and
addr16
je
mov
int
add
dec
sbb
xabort
sbb
ins
clc
or
cmc
add
mov
xchg
mov
and
xor
bound
jl
push
inc
mov
test
jb
jp
or
xor
into
or
nop
lock
mul
push
lods
jg
test
jne
inc
sahf
xor
add
fadd
fsub
mov
ss
mov
mov
xchg
je
pop
inc
ins
mov
loopne
ret
lods
pop
fisub
out
test
imul
sbb
push
arpl
sbb
fnstsw
jns
popf
sbb
cmps
les
mov
(bad)
je
sti
scas
jle
xor
cwde
adc
sbb
imul
mov
fbld
ss
aam
cld
clc
and
pop
mov
mov
lds
mov
retf
dec
mov
inc
int
and
(bad)
lock
daa
xchg
mov
fnsave
mov
aaa
push
imul
daa
icebp
stos
popa
clc
repnz
cmp
mov
sti
sub
lock
test
call
xor
fdivr
dec
cmps
std
jmp
mov
xor
xchg
in
pop
mov
pop
jno
adc
xchg
pop
aas
mov
lock
push
retf
pop
pop
jno
imul
mov
cmp
addr16
das
ret
sub
ret
out
retf
jno
inc
iret
sub
cli
xchg
cmps
(bad)
and
xchg
sahf
or
sbb
je
rcl
mov
int
es
and
aam
sbb
mov
adc
popa
and
push
ja
ret
in
int3
jbe
jnp
in
sbb
and
retf
ror
daa
jl
in
push
xor
mov
in
ins
jmp
dec
fldenv
std
gs
dec
in
jge
jge
sub
adc
add
imul
xchg
jmp
xchg
jmp
sbb
adc
ds
fldcw
jle
(bad)
cmp
xchg
inc
lock
out
lock
mov
jl
add
out
aad
ins
hlt
pusha
test
xor
adc
xor
jg
xlat
imul
xor
loopne
or
sti
rol
loop
je
out
mov
fwait
mov
sub
mov
push
adc
sub
pop
cs
cmp
leave
icebp
adc
mov
push
dec
je
and
xchg
adc
sti
lock
(bad)
push
mov
dec
repz
cmps
loopne
inc
inc
and
loop
adc
pop
shl
cld
jns
repnz
mov
sbb
pop
scas
enter
cmp
mov
xor
ret
lods
and
mov
add
add
(bad)
test
lods
lea
dec
xchg
add
push
nop
fwait
scas
mov
push
sub
je
mov
test
pop
lods
mov
pop
mov
sahf
in
pop
mov
fyl2x
bound
test
inc
ror
aad
mov
es
or
pop
mov
xchg
rcr
test
and
or
jmp
mov
xor
shl
fcmovnbe
adc
movs
dec
dec
fsub
pushf
xor
adc
leave
je
add
add
xor
cwde
jbe
push
xchg
mov
xor
xchg
push
(bad)
(bad)
sub
imul
jmp
xchg
mov
loop
add
inc
xchg
(bad)
int3
out
and
adc
das
and
adc
xlat
adc
dec
adc
mov
iret
or
sar
mov
cmp
dec
xchg
call
pop
pop
icebp
xchg
cmp
jnp
mov
mov
pop
xchg
pop
ret
sbb
or
sti
push
push
leave
lahf
xchg
xchg
xchg
ins
(bad)
pop
mov
push
ja
retf
xor
xor
ficomp
adc
or
movs
dec
(bad)
xor
adc
ja
push
dec
repnz
gs
nop
cmc
bound
retf
mov
pop
mov
enter
jnp
pop
sub
das
xor
ins
ss
jae
dec
push
retf
pop
cmp
sbb
adc
sub
retf
imul
sub
pop
rcl
repnz
xor
dec
popf
mov
mov
dec
ds
inc
mov
mov
add
add
xchg
push
lods
xor
mov
gs
lds
jl
mov
pop
or
pop
addr16
iret
ds
inc
adc
aaa
in
xchg
jge
mov
bound
jbe
je
mov
and
jmp
retf
cmps
sar
gs
xchg
xlat
push
dec
sbb
cmp
cmp
into
xor
shl
test
call
sub
scas
hlt
inc
int
sbb
loop
sti
pop
inc
inc
sahf
stos
test
pop
aas
pusha
ret
mov
sub
mov
pusha
popa
(bad)
mov
fwait
xor
lahf
fs
leave
loope
pushf
xchg
and
inc
jae
inc
sub
sub
mov
outs
hlt
sub
js
sar
ret
lods
jbe
or
adc
sbb
and
loopne
cdq
cli
fbstp
hlt
jmp
(bad)
out
ret
add
xchg
cmp
sbb
sbb
add
sub
movs
outs
push
and
dec
aam
test
cmp
add
pusha
(bad)
mov
add
imul
pop
rcr
(bad)
dec
test
iret
enter
xchg
mov
push
pop
dec
clc
mov
push
jmp
jle
inc
push
pop
(bad)
xchg
dec
xchg
icebp
ds
cmps
push
clc
cwde
adc
mov
pop
mov
pop
xor
adc
jnp
aam
inc
add
jecxz
push
popa
sbb
pop
call
jge
cmc
inc
mov
mov
sar
or
mov
rcl
stos
loope
sbb
sub
jae
mov
cmp
movs
mov
lea
ret
inc
sbb
movs
inc
in
sti
mov
retf
daa
gs
test
xchg
and
icebp
std
ret
aad
jo
(bad)
dec
outs
adc
xchg
or
arpl
or
cmp
xor
or
cmps
lahf
jmp
inc
mov
dec
in
out
or
repz
mov
mov
xchg
ss
stos
or
pop
js
jne
into
cld
ins
aas
(bad)
cmc
dec
pop
lahf
push
fs
iret
rcl
push
ss
fdivr
sar
xor
lahf
and
addr16
int
retf
jecxz
sub
and
mov
xchg
loop
retfw
mov
fwait
mov
pop
rcr
add
mov
aam
(bad)
les
pop
(bad)
sbb
imul
jbe
mov
clc
daa
mov
test
clc
sbb
pop
jmp
cmp
adc
mov
mov
push
mov
fwait
jmp
les
cmp
mov
mov
mov
lds
lods
jge
clc
mov
or
mov
and
push
push
inc
out
push
add
clc
stos
ret
add
scas
fwait
adc
aaa
gs
nop
add
sub
(bad)
and
push
imul
jg
in
xor
mov
shr
add
mov
pop
outs
adc
imul
fld
test
ret
add
fstp
jae
push
in
and
arpl
icebp
jp
dec
inc
movs
adc
in
inc
push
or
je
(bad)
xchg
test
xchg
jnp
in
mov
out
outs
test
rcl
add
test
(bad)
ins
jl
in
or
jge
or
in
out
cmp
add
push
icebp
outs
js
xor
fst
rcl
or
rcr
add
xor
loopne
dec
retf
mov
bound
push
div
aad
(bad)
lea
pop
sub
test
pop
xchg
and
lahf
xor
jl
sub
stos
push
xor
test
push
sar
test
xchg
cmps
sbb
xor
dec
fisttp
aam
push
sub
sar
add
sub
jmp
ins
or
dec
pushf
and
xchg
sbb
jae
icebp
lods
out
add
hlt
add
push
inc
xchg
leave
int
or
mov
shl
(bad)
fdiv
hlt
jle
cmp
shr
daa
test
out
dec
aas
imul
aam
add
xchg
jge
aad
inc
dec
popf
jmp
enter
and
lds
jle
cli
adc
jne
mov
xchg
je
dec
mov
sahf
bound
cmp
call
(bad)
and
nop
mov
mov
sbb
repnz
mov
ret
xchg
dec
fcomp
mov
clc
in
xor
retf
jecxz
stc
(bad)
in
inc
mov
nop
lds
mov
mov
mov
or
add
popa
xlat
add
sbb
push
stos
fisttp
pop
mov
inc
mov
scas
inc
jne
mov
mov
mov
adc
mov
sbb
ins
loopne
push
adc
leave
lods
pop
fdivp
xor
mov
dec
(bad)
add
jmp
xchg
pop
test
jnp
test
lods
scas
ins
inc
pop
push
or
push
xchg
arpl
or
cli
bound
popf
repz
mov
scas
add
push
lods
(bad)
cdq
pop
scas
cmps
leave
dec
out
mov
push
mov
test
push
ins
xchg
movs
(bad)
mov
cmps
xor
fwait
xchg
dec
cmp
pop
push
inc
jp
rol
mov
mov
clc
jno
or
gs
mov
xor
push
inc
scas
hlt
push
sub
lods
and
lahf
addr16
and
pop
xchg
jecxz
cmp
mov
jge
and
mov
sti
or
fisubr
js
mov
mul
ss
fcom
and
dec
mov
es
adc
cmp
rcl
dec
pop
pop
leave
jle
nop
loopne
call
sbb
mov
jae
icebp
push
imul
add
dec
sbb
xchg
ins
rcr
mov
dec
(bad)
fmul
test
push
scas
mov
aas
aas
pop
enter
sub
cmc
cmp
(bad)
mov
out
pop
cmp
sahf
mov
mov
hlt
sub
pop
dec
out
ss
add
pop
call
and
mov
sahf
(bad)
test
sbb
retf
int
movups
stos
xor
in
imul
add
mov
pop
pop
lods
xor
sub
fdivrp
icebp
lock
jbe
(bad)
jnp
inc
lock
jp
cmp
mov
loop
div
mov
adc
arpl
push
popa
or
into
inc
imul
aam
pop
push
add
mov
inc
cmp
sbb
pop
add
jo
sub
dec
add
outs
mov
xor
pop
pop
mov
mov
ror
jp
inc
loopne
or
push
in
adc
or
add
repz
lods
mov
ins
xor
test
cmp
pop
repz
out
or
sti
xor
mov
fmul
in
jmp
shl
scas
test
movs
push
cwde
pushw
daa
in
push
in
sbb
fwait
jnp
pop
aaa
pop
sysexit
and
jg
cmp
mov
fadd
enter
inc
mov
cmps
mov
mov
das
ins
or
jns
adc
or
out
adc
and
cmp
pop
inc
mov
cmp
push
pop
xor
cdq
add
and
fmul
xlat
push
gs
jl
je
inc
fwait
jmp
jmp
in
mov
pop
inc
add
aam
pop
push
cmp
add
and
push
or
jecxz
adc
xchg
cli
clc
imul
adc
sub
jnp
rcr
xlat
cmp
mov
cld
fwait
inc
(bad)
std
out
and
addr16
sbb
lods
sti
dec
int
mov
cmp
aaa
or
and
rcl
sub
dec
push
jg
pop
sub
lds
dec
cmp
sahf
push
std
retf
sub
or
pop
mov
daa
int3
daa
leave
inc
cmp
ror
mov
dec
out
add
jle
mov
loopne
xchg
mov
jb
mov
push
out
stos
ret
cmps
outs
fidiv
mov
cmps
push
jb
into
push
inc
stos
neg
mov
xor
jo
fild
jbe
add
fldenv
push
loope
dec
cdq
rcr
ret
fnstcw
jp
xchg
cmp
out
jg
movs
jecxz
adc
stc
rol
sub
inc
mov
fistp
mov
cmp
and
nop
dec
jg
clc
jbe
ins
loope
in
scas
mov
leave
inc
leave
test
fistp
fcmovnb
gs
sub
neg
ins
(bad)
xchg
xor
inc
mov
inc
std
mov
push
sbb
stos
mov
int
test
iret
shl
lahf
xor
xor
test
xchg
pop
jbe
sub
dec
dec
and
push
mov
mov
das
jmp
cmp
test
stos
pop
dec
cld
mov
je
cmp
adc
sbb
push
imul
popf
lahf
leave
loopne
push
sub
pop
mov
std
retf
pushf
sahf
pop
(bad)
mov
sub
add
mov
or
call
(bad)
cmps
dec
pop
inc
and
icebp
stos
push
test
mov
adc
je
or
add
pop
pop
stc
pop
or
sbb
into
jb
sbb
or
out
pop
es
les
jno
and
xor
lock
dec
loopne
inc
cmp
(bad)
push
mov
adc
jne
test
fbld
sub
xor
es
lahf
bound
fs
dec
dec
mov
mov
movs
mov
es
shr
inc
push
iret
sbb
fadd
test
sbb
bound
shr
loopne
pop
push
add
lods
sbb
add
cmps
push
push
add
mov
aaa
scas
popf
mov
and
(bad)
jecxz
inc
out
sub
xchg
dec
push
push
pop
mov
test
adc
sbb
in
mov
mov
(bad)
jb
cmp
jmp
bound
pushf
push
xchg
push
adc
dec
test
lea
sbb
mov
iret
pop
push
push
push
mov
fldenv
jmp
not
push
imul
aad
out
test
push
repz
xchg
scas
mov
cmp
cmp
out
mov
fstp
or
repnz
add
scas
enter
jmp
jl
jb
mov
in
popf
sbb
mov
outs
std
fisttp
repnz
add
in
mov
call
jns
inc
mov
retf
xchg
in
mov
push
dec
sar
sbb
pop
pop
mov
iret
push
xor
enter
in
xchg
hlt
int3
cmps
shl
pop
das
mov
nop
iret
pandn
xchg
stc
cmp
scas
mov
jne
add
dec
fdivr
xchg
adc
cwde
movs
test
pop
mov
mov
rdtsc
xchg
push
lods
dec
in
xchg
(bad)
arpl
mov
loopne
mov
pop
hlt
mov
pop
xchg
push
pop
je
rcr
xor
(bad)
mov
jl
mov
xor
call
loop
imul
andps
mov
xchg
jno
fadd
ja
mov
xchg
fsub
mov
jmp
stos
inc
jl
inc
mov
stos
jmp
pop
ins
test
rol
push
add
cmps
sub
dec
int
add
fisubr
sbb
jbe
jg
jl
pushf
retf
ret
mov
dec
nop
and
in
in
inc
test
or
fidiv
test
mov
push
dec
lea
inc
add
push
xchg
mov
jmp
sar
loop
shl
ficomp
lods
data16
xchg
mov
push
xchg
xor
ss
xor
pop
test
popf
stc
call
cmp
pop
push
mov
jp
jecxz
jp
pop
adc
shl
test
loope
push
int
jmp
inc
shl
mov
out
loopne
push
jmp
clc
leave
inc
pop
pop
sub
adc
leave
aad
rol
fsubr
push
push
xchg
es
(bad)
icebp
pop
ret
das
cmp
imul
iret
adc
mov
and
xor
lea
call
mov
in
sub
pop
ss
xchg
jae
mov
daa
and
pop
jno
inc
push
fs
sub
sub
pop
pop
push
xchg
loope
rol
int3
cmc
mov
sbb
scas
lods
cmc
jbe
icebp
sub
out
push
adc
inc
xor
xor
stc
and
in
xor
mov
cld
mov
bound
or
sbb
mov
clc
hlt
mov
pavgb
cwde
nop
(bad)
ret
in
test
cmp
jb
out
add
jl
and
loope
or
jge
fsub
and
xchg
cmc
cmp
icebp
mov
imul
popa
jbe
dec
jbe
loope
push
(bad)
push
mov
and
push
ret
sar
sahf
js
mov
into
cmp
retf
push
inc
push
jo
mov
mov
mov
cwde
les
dec
mov
mov
lock
xor
cmp
push
daa
mov
inc
mov
cld
or
pop
adc
cmp
out
pop
fisub
jmp
ret
inc
mov
jns
movs
int
pop
or
shl
and
ds
(bad)
ss
inc
shl
mov
vunpckhps
jne
pop
and
test
and
sbb
test
jne
ins
inc
lea
mov
fwait
xor
sbb
in
daa
ss
lea
adc
jmp
outs
and
push
jp
jmp
sub
mov
pop
call
cmc
xor
jmp
pop
mov
dec
mov
push
int3
xchg
mov
or
dec
mov
and
adc
mov
scas
pusha
sub
call
xchg
and
and
cli
adc
push
jno
xchg
out
jae
jmp
popf
cli
movs
xor
mov
cmps
add
add
test
xor
(bad)
add
movs
mov
repz
in
ret
mov
adc
fidiv
fimul
out
sti
(bad)
hlt
js
and
dec
xor
mov
fchs
dec
mov
pop
mov
add
in
lods
sub
neg
in
test
mov
shl
pop
popf
pop
js
jp
fmul
push
jmp
int
cmp
jecxz
mov
int
call
and
in
xchg
inc
leave
inc
fist
dec
les
and
sub
push
mov
mov
imul
and
jge
sub
or
lods
fcomp
jl
mov
dec
sbb
fcom
sbb
inc
or
dec
push
outs
pushf
mul
jmp
dec
mov
pop
dec
sub
mov
dec
jne
add
bound
dec
fnstenv
test
xchg
jne
lds
nop
push
pop
dec
mov
out
cmp
and
ud2
and
adc
cmp
jne
mov
aas
push
pop
cli
xor
xor
or
in
mov
loopne
xor
inc
(bad)
ins
ror
adc
cdq
xchg
repnz
in
shl
dec
call
jb
ds
mov
ror
add
xlat
cdq
pop
xchg
cld
in
jmp
rcl
lock
jne
cmp
mov
jae
ja
div
dec
xchg
sar
jmp
xchg
push
cld
jg
loop
mov
outs
aaa
aas
and
pop
sahf
dec
dec
mov
(bad)
dec
pop
call
fwait
dec
iret
call
mov
mov
ret
les
hlt
movs
imul
in
push
ins
(bad)
or
or
xchg
jns
movs
pop
lods
add
adc
pop
inc
sbb
or
out
mov
dec
mov
cmp
pop
mul
mov
xchg
dec
imul
cdq
cld
push
aaa
mov
mov
xchg
jge
sub
int3
xchg
inc
jmp
mov
dec
stc
into
pop
add
lods
hlt
push
push
mov
stos
loopne
out
pusha
out
(bad)
xor
and
adc
adc
gs
aad
das
(bad)
add
jae
push
out
or
in
push
sbb
mov
mov
(bad)
addr16
xor
clc
jae
add
push
adc
mov
or
adc
and
jecxz
aad
outs
xor
inc
push
popa
enter
das
cmp
cmp
xlat
inc
ins
pop
mov
mov
or
movs
inc
daa
test
dec
(bad)
push
push
in
mov
test
jg
xor
mov
mov
jmp
cmp
jle
xchg
mov
add
out
jbe
fnsave
adc
mov
movaps
lods
push
inc
ror
repnz
icebp
pop
and
out
std
dec
sbb
ins
dec
xchg
or
inc
mov
sbb
adc
pusha
call
jae
iret
jo
sub
popa
fidivr
cmp
or
gs
leave
push
xchg
mov
push
in
add
jbe
jno
dec
pop
mov
lea
out
xchg
test
mov
stos
je
xchg
push
cdq
pop
push
(bad)
cmp
sbb
and
loopne
push
jno
fbstp
sbb
into
cmp
jp
scas
jmp
or
stos
dec
xchg
mov
nop
ins
aam
or
aas
stos
jne
dec
mov
xchg
pop
xchg
pop
(bad)
lahf
popa
repz
or
pop
add
and
retf
push
mov
mov
imul
cwde
cmp
jbe
cmp
dec
std
call
jp
ja
adc
pop
inc
cld
aaa
out
mov
dec
ret
dec
or
mov
xchg
add
jg
mov
pop
les
adc
adc
inc
mov
pop
dec
cli
mov
ret
mov
(bad)
adc
jg
dec
mov
mov
adc
sahf
mov
fwait
mov
fistp
and
test
mov
das
or
mov
push
addr16
shl
adc
xchg
push
lds
mov
js
pop
and
jp
into
sar
mov
rcl
mov
cmp
mov
cmp
jle
stos
(bad)
jae
sub
clc
retf
push
out
sbb
dec
imul
mov
repz
lahf
mov
jbe
add
jmp
and
pop
outs
dec
test
xor
cwde
out
add
lods
inc
cmp
mov
leave
jg
xor
adc
dec
jmp
add
test
sub
xor
push
jae
push
ror
dec
sti
ds
cmp
jnp
scas
inc
test
add
sti
int3
xchg
push
imul
(bad)
ja
or
adc
(bad)
imul
outs
mov
dec
in
xchg
fidivr
xchg
arpl
adc
ins
fs
sub
imul
mov
and
(bad)
fistp
and
and
xor
shl
jmp
loopne
inc
test
stos
mov
or
add
xor
repz
and
jmp
outs
mov
xor
adc
mov
dec
mov
pop
nop
(bad)
lock
sub
loopne
xor
and
cmp
or
rcl
fcmovne
push
std
inc
cmp
dec
xchg
(bad)
cmp
call
das
jge
xor
psadbw
lods
push
retf
and
hlt
das
push
std
xchg
sub
ss
push
fs
jae
in
loopne
cmp
mov
jp
and
sbb
cmp
rol
and
adc
test
pop
add
stos
retf
aaa
push
cmps
int3
test
sub
cmc
call
cmp
pop
add
data16
sbb
xor
pop
inc
xchg
popa
pop
push
or
fild
mov
xchg
sub
out
stos
cmps
push
push
scas
jns
xor
xlat
adc
mov
push
retf
dec
push
xor
dec
inc
(bad)
fist
dec
inc
dec
test
ret
mov
mov
push
jge
xchg
push
pop
inc
ror
sbb
neg
ret
pop
mov
mov
jle
ret
jmp
int
cmp
mov
dec
xor
cmp
out
jg
test
fxch
and
call
dec
scas
cwde
pop
jecxz
call
sub
das
fadd
push
push
test
es
adc
mov
pushf
xchg
jbe
verw
sbb
lock
bound
les
lea
rol
int
es
dec
rol
pop
or
or
(bad)
mov
gs
xchg
mov
fstp
cmp
loop
jmp
sub
sbb
sub
push
aaa
lods
in
push
mov
sbb
push
outs
imul
test
mov
xor
xor
mov
sbb
call
xchg
mov
xor
xor
pop
cmp
sub
add
jnp
inc
cwde
dec
mov
push
inc
inc
ds
lods
bound
xchg
xchg
adc
das
pop
adc
mov
or
cmp
jl
add
mov
test
lea
dec
fimul
leave
pop
add
fsub
and
dec
cld
xor
jnp
sbb
arpl
ficom
outs
out
or
jae
fsubr
sub
cli
jp
adc
pop
mov
inc
sub
xchg
leave
mov
mov
sbb
movs
dec
xor
push
mov
int
push
mov
loopne
dec
add
sbb
nop
cmp
imul
xlat
dec
aam
xchg
mov
dec
int3
sub
aaa
int
out
lds
dec
add
cmps
xchg
out
or
nop
mov
mov
jb
jne
sbb
retf
(bad)
jnp
pop
fild
jns
(bad)
jno
movs
xor
jmp
mov
gs
fmul
daa
mov
push
fbstp
pop
xchg
hlt
test
jno
out
sub
xchg
pop
enter
pusha
push
imul
add
je
mov
bound
jmp
mov
ins
pop
call
fimul
push
std
into
clc
mov
(bad)
data16
in
mov
cld
pop
outs
dec
add
ins
push
mov
stc
adc
imul
dec
ret
jmp
add
mov
xor
and
fwait
retf
adc
xchg
retf
imul
ins
mov
loope
cmp
add
sub
mov
out
adc
movd
mov
sub
jle
mul
retf
mov
enter
sub
aaa
push
cdq
xchg
cli
jbe
xor
mov
jbe
and
data16
mov
mov
dec
dec
mov
dec
cli
fsub
outs
mov
repnz
pop
pop
retf
push
mov
je
in
push
adc
int3
stc
ins
sti
add
add
pop
xchg
cmp
push
inc
jecxz
mov
xor
iret
cli
dec
sbb
push
add
inc
nop
jle
add
loope
call
aaa
rcl
push
dec
and
je
lea
xchg
xchg
jbe
jg
aaa
int
mov
into
mov
sub
jecxz
std
(bad)
ja
mov
dec
push
out
jmp
pusha
fsincos
add
rol
repz
sub
push
inc
fs
adc
dec
repnz
inc
jne
ror
outs
push
sti
test
mov
enter
and
stos
sbb
fcomp
cmp
pop
cmp
pop
add
mov
push
mov
cs
mov
test
out
sbb
dec
in
movs
adc
xor
retf
cmp
(bad)
ror
ins
daa
call
lahf
xlat
fs
sub
ins
retf
push
mov
xor
aaa
pusha
xchg
es
sti
mov
ja
push
mov
icebp
push
mov
push
add
ja
push
dec
(bad)
(bad)
dec
pop
sub
jne
mov
jnp
stos
outs
sbb
pop
or
call
pop
xor
(bad)
lods
setb
call
inc
mov
sbb
(bad)
sub
mov
dec
enter
repz
nop
ret
iret
out
es
cmp
sub
push
jp
retf
int3
das
mov
adc
xor
xor
jmp
ins
(bad)
rcr
jp
sar
jecxz
mov
sub
sti
push
retf
inc
pop
push
and
clc
and
retf
retf
pop
sti
lock
jns
jmp
jmp
mov
movs
aad
push
cmp
fcom
test
fst
dec
mov
pop
call
xchg
repz
je
aaa
sub
xor
sar
outs
addr16
push
addr16
fldcw
mov
shr
push
and
and
fist
dec
out
push
mov
int3
scas
fist
push
mov
std
mul
inc
dec
stos
(bad)
mov
popa
popf
push
inc
sub
sbb
adc
adc
adc
xchg
mov
loope
mov
jno
dec
fcmove
mov
adc
add
or
mov
es
cmps
xchg
leave
ss
xor
scas
fld
sar
popf
pop
shl
push
pop
scas
fisttp
add
xlat
pop
out
jle
adc
jmp
pop
aam
pop
add
add
arpl
(bad)
mov
scas
push
(bad)
cli
arpl
test
inc
enter
mov
xor
rol
call
popf
mov
pop
and
movs
mov
enter
push
fdivp
cld
div
inc
jns
enter
fwait
xor
xor
mov
out
add
jno
aaa
dec
sub
mov
(bad)
test
dec
(bad)
xlat
push
fist
push
fs
sbb
dec
or
fdiv
jle
mov
adc
movs
retf
xor
sahf
mov
push
push
xor
sbb
push
lods
popa
adc
xchg
enter
(bad)
push
lods
imul
pop
adc
push
sbb
fs
dec
pop
nop
jp
(bad)
stc
ins
repz
fistp
adc
xor
js
sub
jmp
mov
bound
(bad)
jg
sub
loope
sub
scas
adc
sti
inc
push
outs
xor
mov
jl
(bad)
rol
popf
inc
shl
and
ret
pop
mov
fwait
mov
jae
pop
addr16
leave
icebp
(bad)
push
push
ds
push
fisttp
mov
or
add
mov
jmp
mov
test
push
js
jne
push
and
outs
cmp
add
das
ja
and
les
shl
(bad)
mov
test
dec
imul
lds
mov
and
push
fucomp
xchg
sti
and
lock
rcr
fwait
retf
mov
fdivr
pop
retf
sub
hlt
leave
pop
push
js
ret
add
icebp
jns
jl
pusha
xchg
test
repz
pushf
dec
cmp
push
push
dec
push
mov
shr
push
add
cld
out
test
sbb
fidivr
(bad)
ins
sub
outs
cdq
xor
out
fiadd
xor
out
pop
(bad)
mov
out
fld
adc
fistp
cld
clc
pop
jg
(bad)
push
mov
or
jae
jmp
lods
lds
push
rcr
mov
rol
cs
ins
mov
test
jge
fbstp
mov
inc
mov
mov
dec
repz
cmps
lods
xor
adc
call
std
pop
movs
xchg
ins
push
cmp
mov
pop
jle
xchg
fild
ss
lahf
jp
iret
and
push
and
jo
mov
(bad)
cmp
xlat
xchg
stos
icebp
ret
sub
and
hlt
cld
mov
test
xor
push
pop
inc
bound
sbb
arpl
add
push
fsub
loop
dec
jne
jns
gs
pop
test
ja
stos
cmp
cmp
ja
mov
lahf
xor
cmp
xchg
addr16
xlat
push
xor
or
std
mov
ficom
fnstenv
jns
imul
jp
or
inc
sbb
jnp
dec
xchg
push
cmp
cld
into
into
lahf
cmp
cmps
mov
sub
mov
fst
loope
sub
jl
mov
sbb
mov
jbe
mov
xor
cmps
fnstenv
add
scas
xchg
mov
or
jne
pop
mov
sahf
or
push
sbb
test
into
and
xor
adc
sub
aaa
loop
outs
adc
das
push
pop
sbb
and
in
(bad)
call
push
lods
mov
fnstenv
pop
push
sub
cld
fsub
sub
(bad)
mov
lods
scas
cmp
(bad)
arpl
push
jno
or
rcl
in
ss
pop
or
ss
prefetch
cmps
sbb
xor
push
in
pop
repz
xchg
or
rcr
je
sahf
mov
mov
out
dec
xchg
push
test
ds
and
inc
mov
mov
or
call
xor
pop
xchg
das
dec
idiv
je
cmp
adc
inc
inc
sub
outs
cdq
lods
xor
gs
push
add
retf
das
loope
addr16
repnz
sbb
cmp
retf
movs
loope
push
adc
mov
lea
inc
ins
jns
out
iret
es
add
sar
cmp
mov
imul
stos
add
(bad)
repz
jge
add
mov
ss
xor
aas
xor
jno
mov
imul
adc
inc
repz
cwde
or
xchg
pop
adc
leave
mov
sub
mov
je
clc
jecxz
(bad)
loope
inc
sar
call
scas
adc
push
xlat
dec
dec
test
repz
pop
cbw
cmp
cwde
cmp
push
lds
pop
iret
jae
inc
dec
pushf
leave
popa
rcr
push
(bad)
sti
je
stos
retf
data16
out
mov
mov
(bad)
(bad)
cmp
mov
adc
mov
sbb
xlat
or
jge
xor
cmp
call
adc
(bad)
jmp
jnp
stos
sahf
jmp
or
dec
adc
inc
mov
scas
or
add
adc
test
mov
jnp
pop
or
ret
sub
retf
ss
shl
mov
js
sbb
mov
mov
ror
jno
add
cmp
mov
adc
mov
iret
test
sub
mov
je
pop
inc
adc
and
push
sub
inc
clc
ret
jne
sub
mov
sub
ins
or
int3
sub
jbe
icebp
ror
pop
push
lock
std
dec
stc
and
dec
mov
retf
sahf
aaa
jmp
aaa
shl
jb
ss
mov
jmp
cmps
movs
jno
ror
sub
jnp
lea
push
xchg
(bad)
mov
xor
retf
pop
mov
leave
add
xchg
pop
and
sbb
mov
sar
or
ins
add
xchg
sub
cmps
retf
mov
pop
mov
sbb
inc
sbb
ret
and
cmp
xor
and
add
mov
pop
fprem1
mov
jnp
fwait
sbb
cmp
push
and
pop
sbb
cmp
sbb
and
(bad)
test
data16
aaa
je
je
sbb
aad
repnz
cdq
and
in
adc
test
jmp
daa
jmp
mov
mov
jle
xor
test
dec
inc
mov
lock
xor
loope
push
sbb
mov
push
add
ror
out
div
and
inc
mov
mov
sbb
mov
loop
rcl
inc
jmp
dec
iret
rol
push
jmp
jae
pop
jl
xchg
mov
std
push
fistp
mov
icebp
data16
adc
mov
pusha
fwait
rol
stos
mov
imul
mov
sub
lock
mov
inc
(bad)
adc
mov
bound
ins
sbb
inc
rcr
mov
jl
(bad)
sbb
cmp
nop
mov
es
data16
out
mov
(bad)
or
xor
jge
mov
jecxz
push
sub
jmp
ja
xor
stos
ins
loopne
cmp
dec
test
cmp
push
cmc
dec
(bad)
mov
(bad)
in
sub
iret
fwait
xchg
jns
push
pop
push
jns
and
rol
cmps
call
arpl
push
sbb
jmp
xchg
mov
add
aas
loop
clc
cmp
(bad)
gs
les
push
mov
pusha
pop
lods
sbb
push
pop
push
stos
popf
mov
pop
dec
lods
jne
cdq
push
adc
pop
in
jg
stc
daa
ss
popf
mov
lock
cmps
mov
jmp
cdq
xlat
fisttp
pop
(bad)
xor
lods
pusha
pop
les
add
or
xchg
pusha
xor
sbb
dec
or
xchg
cmps
retf
mov
push
inc
push
xchg
jmp
mov
sub
ds
mov
jge
pop
dec
or
and
retf
cld
xor
jnp
stc
cs
test
cmp
sub
loop
(bad)
popa
and
mov
mov
xor
sti
out
jnp
mov
repz
and
jo
repz
(bad)
fdiv
push
gs
xchg
mov
leave
sbb
mov
or
jmp
jo
cmp
outs
jmp
inc
stos
cld
or
ds
retf
dec
scas
mov
shl
loop
xor
mov
fstp
hlt
pop
cmp
daa
mov
jnp
stos
ds
mov
push
inc
mov
pushf
out
movs
shr
icebp
out
popa
cs
or
dec
ins
mov
das
ret
cmp
mov
imul
iret
mov
pop
dec
push
addr16
cmp
cmps
xchg
add
enter
pop
sbb
inc
test
pop
xchg
mov
add
cmps
mov
or
mov
call
mov
(bad)
ss
push
jns
lahf
xchg
xchg
xchg
in
add
xor
pop
mov
and
int3
inc
push
inc
nop
lahf
lock
mov
test
adc
aas
jb
ins
dec
pop
xchg
sub
leave
jnp
sub
cmp
js
addr16
xor
pop
jp
pop
out
cmp
cmp
inc
cmp
mov
sbb
add
stos
sub
bound
mov
in
scas
je
and
addr16
clc
ret
movs
pop
in
icebp
mov
inc
adc
retf
lahf
cwde
fld
and
pusha
mov
movs
scas
pop
popa
or
fidiv
mov
shl
aas
sahf
mov
push
(bad)
(bad)
sbb
xor
(bad)
dec
je
(bad)
sbb
imul
lods
jo
fxch
ins
jle
cmp
sub
jnp
mov
jo
rep
cmp
fimul
rol
push
add
lea
rcr
in
xor
cmp
sub
jg
fidiv
in
scas
int
lods
cdq
mov
(bad)
mov
ds
lahf
ror
aas
fsub
pop
aaa
pop
aad
push
and
aaa
pushf
mov
jmp
pop
xchg
sahf
lahf
ja
test
(bad)
in
xor
and
retf
or
pop
sbb
ss
sub
push
enter
push
add
dec
jle
mov
and
mov
mov
ds
imul
or
xchg
test
mov
int
repnz
push
sbb
push
jle
iret
xchg
es
jns
mov
retf
arpl
inc
mov
fchs
aam
sahf
adc
sub
or
div
add
pop
(bad)
and
cmp
out
arpl
fiadd
push
adc
xchg
test
in
fcomip
shr
cmp
jns
inc
xor
pop
xchg
addr16
ss
ss
adc
ss
sub
mov
loop
or
mov
pop
cmp
in
add
sub
gs
or
cmps
ss
and
inc
add
outs
ss
add
and
mov
retf
pop
pop
jnp
cwde
dec
pop
mov
neg
sbb
xchg
jp
push
bound
mov
ror
out
(bad)
adc
dec
sub
xchg
fild
neg
jbe
popf
push
fcmovne
pop
mov
jecxz
loop
scas
mov
daa
out
sub
data16
sbb
mov
out
or
sbb
xor
sbb
out
add
xchg
inc
mov
call
mov
clc
add
push
loop
sti
shl
xor
lock
sub
push
es
in
retf
xchg
lods
out
rcr
push
stos
gs
cmp
(bad)
pushf
lea
mov
push
icebp
and
rsqrtps
pop
inc
(bad)
cmp
xor
and
mov
outs
out
cld
pop
add
add
aad
lahf
adc
or
adc
shl
aas
popf
fnstenv
movs
or
and
mov
sub
mov
xor
fsub
mov
daa
bnd
and
clc
jmp
inc
div
ror
test
sub
and
lods
cmp
in
jg
xor
call
push
shl
mov
push
mov
dec
jl
in
mov
stc
movs
push
or
daa
adc
movs
adc
je
inc
add
lods
arpl
jp
push
pusha
sbb
outs
ins
ss
xor
jbe
pop
mov
cmc
je
or
pop
push
push
xor
(bad)
in
das
dec
jae
popf
popa
in
inc
pop
adc
push
inc
mov
rcl
cmp
mov
cdq
mov
lds
or
dec
jecxz
ins
repz
lods
xchg
addr16
add
add
pop
xchg
(bad)
imul
adc
xchg
stos
mov
in
test
sti
test
stos
mov
cdq
imul
xchg
(bad)
and
test
test
pop
into
pop
pop
aaa
push
mov
xor
sub
jmp
add
xor
cmp
jg
imul
xchg
xor
mov
or
mov
stos
ins
imul
fnsave
sub
push
jae
imul
cs
mov
add
ss
sub
scas
and
add
push
ins
lods
mov
xor
jno
cs
jae
int3
jns
fistp
popa
mov
movs
jae
nop
or
mov
fdiv
mov
(bad)
scas
xchg
xor
dec
mov
mov
(bad)
mov
lods
shl
mov
inc
inc
pop
sub
test
adc
test
sbb
je
sub
sub
sbb
and
lods
dec
sub
cdq
or
movs
push
sti
rcr
mov
das
xchg
dec
bound
int
add
add
(bad)
ror
mov
rol
arpl
in
adc
ret
das
mov
cs
push
jb
sub
add
shl
neg
(bad)
std
out
push
sub
ja
push
push
dec
shl
sbb
xor
and
adc
adc
jecxz
mov
add
sub
fdivr
xchg
loope
push
dec
cmps
rcl
es
inc
dec
dec
jp
(bad)
out
mov
and
fistp
and
ss
out
cmp
pop
repnz
xchg
std
mov
loopne
or
dec
in
push
mov
cmp
pushw
lods
rcr
enter
test
mov
push
in
jg
pop
fdiv
arpl
outs
fbld
adc
pop
scas
pop
test
stos
and
imul
nop
dec
aad
xor
mov
retf
and
dec
out
xchg
pop
mov
pop
sbb
stos
cs
cwde
adc
out
test
shl
loop
int3
rcl
rol
mov
and
pusha
test
cmp
sub
inc
jnp
mov
jne
add
mov
cdq
cmps
inc
mov
jmp
das
xchg
add
mov
cdq
test
xchg
add
push
push
loop
retf
adc
ss
aam
pop
sub
addr16
dec
in
push
enter
cwde
mov
push
push
cmc
jl
inc
push
jp
(bad)
sti
mov
cmp
sbb
xlat
rcr
iret
fiadd
or
mov
call
sub
mov
stos
sub
mov
sub
xor
add
pushf
sub
sub
out
pop
mov
shl
pop
fs
and
cmps
push
les
xchg
lahf
or
in
iret
adc
add
mov
ror
push
and
ret
iret
nop
adc
cdq
inc
ins
or
icebp
stc
lods
pop
inc
push
ror
push
aad
call
jle
retf
ret
movs
mov
cmp
cmps
sub
xor
rcl
cs
pusha
add
out
pop
mov
das
stc
in
push
dec
clc
mov
dec
mov
pop
cmp
xor
sbb
(bad)
ds
pushf
repnz
jne
push
dec
cmp
stos
jecxz
inc
fdivr
push
lods
in
mov
mul
aad
cmp
test
das
iret
or
dec
rol
inc
pop
or
jge
mov
mov
jmp
sbb
aam
dec
sub
ret
std
aaa
sbb
xor
leave
xor
push
icebp
das
lahf
or
loop
cmp
inc
add
xor
dec
mov
inc
mov
int
jnp
aas
scas
sti
jo
daa
sub
jmp
stos
or
dec
or
out
lods
sbb
in
mov
jge
inc
pop
pop
ror
inc
ins
lock
fsubr
mov
shr
hlt
xchg
ror
xchg
and
outs
push
mov
cmps
inc
out
xor
adc
jbe
adc
mov
inc
mov
inc
aad
xchg
test
jnp
les
xchg
jno
hlt
adc
xchg
std
(bad)
in
out
sbb
cmp
push
push
les
fidivr
dec
repnz
popa
aam
and
das
out
(bad)
movs
pop
outs
lock
repz
inc
push
call
jge
outs
jmp
and
pop
sub
push
jb
retf
scas
stc
xor
adc
loopne
jge
loop
popa
push
adc
jmp
ins
gs
xor
xor
(bad)
je
inc
xor
dec
in
cmps
aas
push
popa
xchg
and
or
inc
jnp
in
cmps
jnp
jmp
shl
and
mov
and
call
stc
mov
bound
push
mov
out
adc
(bad)
jp
mov
retf
sub
or
dec
out
fld
(bad)
cmp
movs
pop
xchg
cmps
add
cmc
bndldx
stos
adc
(bad)
(bad)
lock
scas
js
fld
cmp
sar
cmp
or
int3
and
cwde
popf
pusha
and
mov
outs
cmp
in
mov
int
sub
mov
aaa
mov
std
jecxz
aam
cmp
inc
mov
jmp
jnp
push
pop
aam
mov
clc
je
jmp
(bad)
leave
loope
es
shl
das
ins
push
mov
hlt
or
faddp
out
in
dec
xchg
loope
ds
push
mov
inc
aas
mov
int3
push
push
fsub
lds
sbb
rol
cmp
das
je
mov
adc
xor
jg
js
add
xchg
movs
in
aas
adc
loopne
or
loope
imul
clc
push
out
adc
mov
and
cmp
xchg
and
mov
mov
cmp
mov
outs
std
repnz
and
dec
nop
inc
daa
sub
mov
mov
(bad)
push
test
dec
dec
jbe
aam
or
push
int
ud2
adc
aad
pop
cmc
mov
mov
adc
out
leave
jle
pop
(bad)
icebp
push
aam
inc
mov
sub
rcl
inc
outs
add
ror
jns
fs
dec
and
add
xlat
and
xchg
outs
cmps
ins
pop
push
bound
add
cdq
and
adc
and
loopne
and
cmc
jge
inc
retf
pop
outs
leave
jbe
sbb
fwait
out
inc
fiadd
push
cmp
pop
sub
pop
sahf
ins
and
test
inc
inc
mov
mov
sahf
addr16
sub
es
cmc
fs
popa
dec
adc
int
test
bound
gs
and
xor
shr
pop
cmps
mov
bound
enter
sti
or
lods
rol
rcr
and
pause
imul
sti
mov
mov
es
lods
das
inc
inc
lds
scas
das
jle
adc
xchg
aam
mov
into
(bad)
(bad)
loopne
rcl
je
pop
adc
call
ret
aam
add
pop
cdq
std
dec
fwait
scas
dec
and
fcomp
stc
ret
rcr
adc
repnz
jmp
fadd
adc
stos
int
pop
pop
cmp
mov
in
sbb
fwait
push
stc
test
mov
inc
dec
enter
sbb
xor
mov
mov
out
xor
pop
adc
shr
or
fs
xor
cmps
sbb
jnp
sti
inc
jb
adc
loop
mov
push
pop
dec
fild
enterw
or
ret
dec
add
fcmovne
dec
out
shr
popa
adc
push
ins
adc
cli
loop
or
dec
stc
stos
cwde
sbb
daa
push
mov
fmulp
jge
repnz
cmp
xchg
cmps
mov
nop
int
xchg
dec
lods
inc
sub
mov
ret
inc
mov
cmp
addr16
pop
in
and
nop
mov
mov
xor
nop
stos
std
addr16
sub
fwait
sbb
jp
push
lds
xchg
stc
and
push
jae
stos
xor
sub
mov
movs
mov
fs
or
sub
sahf
mov
xor
(bad)
xchg
popa
dec
pop
mov
add
push
pop
test
push
(bad)
xchg
movs
test
sub
cmp
xor
jmp
jmp
mov
test
outs
out
jae
pusha
mov
call
mov
sar
mov
mov
add
pop
inc
adc
jne
mov
sti
in
xchg
loopne
iret
push
adc
push
fs
cmp
scas
fs
(bad)
xlat
out
mov
mov
mov
push
pop
and
rcr
mov
data16
in
mov
push
push
and
add
and
test
in
fwait
sub
sub
push
neg
shl
cmp
jbe
jge
adc
or
mov
popa
jle
jnp
dec
fcomp
cmp
jle
push
adc
int3
jmp
shl
mov
cmc
fwait
out
scas
out
or
sub
dec
jecxz
mov
std
cs
leave
mov
cs
sbb
sbb
imul
push
call
dec
(bad)
popf
or
scas
(bad)
cmp
adc
scas
mov
mov
loopne
or
xchg
push
(bad)
call
add
mov
(bad)
in
ret
push
or
test
fisubr
jb
push
mov
test
es
mov
jle
push
push
stos
ja
xor
mov
mov
ins
add
mov
inc
mov
jbe
dec
jmp
pop
lods
fstp
repz
test
push
std
loope
bound
imul
mov
cs
es
pusha
outs
push
pop
mov
lods
dec
lock
out
stos
dec
and
(bad)
push
inc
clc
rcr
outs
lahf
and
mov
les
jnp
iret
sbb
hlt
int3
retf
daa
addr16
xor
mov
popa
ja
jmp
(bad)
cmps
mov
sar
jmp
pop
add
cmps
je
pop
arpl
push
xchg
lahf
nop
pop
mov
repz
dec
gs
add
pop
sub
xchg
ret
mov
mov
sbb
add
jnp
xor
mov
fmulp
sbb
shr
icebp
daa
xchg
xor
or
and
lods
(bad)
mov
arpl
push
mov
jbe
or
imul
fs
dec
mov
imul
or
inc
adc
mov
xchg
jae
scas
test
jne
stc
or
mov
xor
xchg
mov
cli
add
(bad)
mov
mov
hlt
loope
ror
mov
jbe
fs
pop
dec
out
pop
call
or
test
xor
jb
push
adc
ror
jge
test
inc
mov
les
(bad)
in
stc
in
call
sbb
cld
cmc
lds
sar
cmp
dec
cmova
pop
pop
cmps
push
and
dec
fucom
aad
test
mov
xchg
cdq
(bad)
fsubrp
loope
arpl
ror
inc
add
mov
xor
mov
(bad)
jb
mov
bound
jns
imul
fmul
and
sub
add
fs
add
jle
or
or
cmp
or
xor
cwde
aaa
retf
ret
ds
loopne
jle
shl
stc
ret
cmp
sub
inc
jb
out
jo
js
or
dec
xor
sti
cmp
pop
aam
es
call
or
aad
inc
je
sub
in
xchg
(bad)
(bad)
in
mov
arpl
repnz
adc
sbb
cmp
pop
fist
lea
cmps
shr
popf
mov
inc
(bad)
in
inc
fadd
pop
not
or
dec
rcl
inc
jb
xchg
mov
push
sbb
cli
stos
push
add
test
add
xchg
push
leave
stc
cmp
retf
pop
bnd
fucompp
movs
xchg
cmp
jmp
gs
js
inc
cmp
jecxz
push
repz
mov
adc
call
(bad)
jg
pop
mov
jecxz
sub
push
aam
xchg
jg
loopne
out
std
and
push
inc
in
xlat
out
stos
dec
out
xchg
inc
jmp
sub
pop
gs
cmp
and
stos
inc
push
cmps
fsub
(bad)
addr16
add
in
push
cmp
xchg
retf
mov
xchg
and
sbb
call
int
lods
cmp
sahf
popa
lds
call
(bad)
mov
mov
xor
jmp
push
js
xor
rol
cmc
sub
mov
adc
sbb
stos
mov
gs
ss
cmps
imul
xchg
push
mov
and
dec
lods
aas
jg
adc
rcl
fld
push
mov
and
adc
mov
vmovshdup
mov
test
rcr
js
loop
lods
cmp
xchg
sub
mov
shl
jns
int3
mov
(bad)
out
mov
test
mov
psubsw
outs
mov
out
add
stc
in
(bad)
scas
or
xchg
out
adc
arpl
jno
xor
(bad)
inc
mov
and
push
movs
mov
push
pop
adc
or
shr
push
cmps
jge
mov
pop
imul
xchg
shl
rcr
inc
pop
push
mov
cmp
je
rcl
jecxz
mov
imul
pop
ror
pop
push
call
inc
aad
mov
mov
sbb
outs
ins
xor
out
adc
push
loopne
and
mov
leave
fwait
(bad)
fadd
jecxz
neg
push
jo
and
call
push
pop
mul
fimul
mov
ror
pop
xchg
sbb
test
sbb
fld
pop
mov
arpl
push
mov
mul
pop
fisttp
mov
cmp
ins
xor
mov
push
icebp
addr16
inc
push
clc
pop
and
mov
pop
push
data16
aaa
sbb
mov
and
scas
dec
dec
es
pushf
dec
mov
(bad)
repnz
sar
cli
xor
in
les
aas
movs
inc
mov
jno
sub
aad
mov
mov
xchg
push
add
mov
dec
bound
nop
fnsave
inc
inc
xchg
std
mov
sbb
inc
inc
in
mov
xor
cmc
pop
inc
push
mov
and
clc
js
inc
mov
mov
xlat
inc
scas
stos
mov
sbb
mov
push
(bad)
(bad)
dec
in
mov
cmps
dec
mov
jnp
mov
lahf
dec
or
test
out
in
sub
bound
shl
xchg
ja
retf
and
test
mov
repnz
add
repnz
or
cmp
adc
mov
fwait
xchg
push
into
fcom
pop
fst
adc
cmp
xchg
fmul
xchg
fdivr
jle
jle
cmps
in
mov
sar
jmp
pop
pop
jnp
call
xchg
out
sbb
or
iret
sar
clc
and
dec
mov
jnp
pop
fnstcw
sub
neg
ins
pop
cmp
mov
ficomp
inc
cmp
aaa
jb
dec
dec
in
pop
cli
inc
inc
inc
mov
jno
js
nop
push
or
pop
icebp
jno
cmps
xlat
icebp
xor
inc
pop
cld
xchg
jmp
mov
cmp
ror
and
mov
(bad)
jns
and
stc
mov
and
in
movs
les
es
imul
adc
inc
mov
repz
out
cmp
repz
imul
fstp
pop
pop
icebp
ss
mov
push
cld
cli
sub
mov
pop
adc
xchg
movs
ins
cmp
mov
sti
mov
scas
scas
mov
cmp
mov
add
addr16
test
fldcw
add
(bad)
lock
fld
hlt
mov
out
aad
push
push
sub
cdq
xchg
fldenv
inc
sub
mov
les
sti
push
cmp
cwde
test
out
mov
inc
sbb
nop
cs
dec
cmp
daa
scas
iret
xor
and
in
mov
and
test
lock
repnz
fstp
sub
fs
pop
loope
adc
pop
cwde
pop
js
pop
retf
jmp
ds
lods
or
imul
inc
mov
out
lds
cmp
xchg
dec
xor
cmp
in
lods
or
in
xchg
cdq
les
test
and
scas
mov
push
mov
dec
xor
jmp
inc
pop
cwde
and
subps
call
sub
mov
mov
add
(bad)
hlt
lods
ret
(bad)
sbb
adc
add
sti
lea
test
mov
ret
in
ret
add
das
sub
mov
loop
sub
and
push
cmp
fisttp
hlt
jns
or
jb
(bad)
daa
mov
sub
mov
xchg
mov
push
add
add
push
jne
jp
or
mov
mov
out
aad
jmp
jns
jle
addr16
push
sar
fwait
stos
and
push
mov
mov
dec
jl
mov
bound
xchg
fs
(bad)
cli
cmp
rcr
in
xor
jg
shr
or
test
push
sub
adc
aaa
sub
mov
and
int
xlat
daa
mov
adc
jmp
sub
arpl
js
jecxz
push
cmp
push
dec
cli
push
dec
scas
xchg
int
mov
cmp
jae
mov
rcl
pop
fnsave
test
out
push
lods
inc
jmp
pop
and
add
jnp
jo
push
adc
cmp
mov
in
call
mov
xchg
add
add
sub
mov
aaa
dec
leave
pop
push
jae
aad
and
push
mov
les
cmc
mov
aaa
push
pop
test
cli
fwait
aaa
adc
rol
push
sub
mov
leave
lahf
jecxz
in
push
sbb
bound
mov
xor
hlt
(bad)
sbb
xor
aad
or
push
out
sbb
pop
test
and
loope
ins
jl
std
rol
fmul
adc
dec
fisttp
in
cmps
clc
xor
cdq
cmp
dec
mov
shl
xlat
cmp
push
inc
loop
clc
int
or
int3
fbld
push
ror
inc
xchg
dec
lods
popf
ret
dec
sub
fwait
cwde
ret
pop
cmc
inc
dec
in
outs
push
pop
out
mov
fld
sar
mov
mov
leavew
loop
push
xor
ins
push
lock
leave
movs
xchg
addr16
push
pop
and
jb
cmp
push
jno
mov
push
jb
mov
popa
push
inc
popa
push
loopne
and
jns
pop
inc
xchg
xor
push
cmp
jns
mov
movs
cmp
sbb
mov
loop
(bad)
dec
or
ror
or
mov
sub
dec
scas
jne
hlt
inc
xor
jge
push
jg
fiadd
(bad)
push
mov
(bad)
cmp
retf
jns
mov
or
jg
pusha
cmp
dec
fcomp
jns
call
jg
jecxz
xor
inc
daa
mov
inc
pop
add
inc
sbb
push
dec
xchg
ds
xchg
scas
movs
jmp
ins
es
xor
(bad)
mov
add
xor
mov
sar
pop
pop
xchg
jns
xor
mov
(bad)
stos
sar
test
das
(bad)
push
mov
cmp
daa
std
(bad)
adc
pop
daa
xchg
gs
pop
lds
and
nop
out
xor
pop
sub
dec
ins
daa
jb
sub
cmps
mov
test
cmps
inc
or
scas
arpl
and
iret
jl
and
sub
shl
xchg
inc
cmp
mov
in
adc
push
das
mov
pop
jecxz
mov
mov
popa
pushf
cld
xor
nop
sbb
cmp
lds
out
mov
ins
adc
test
add
mov
cdq
push
mov
icebp
or
rol
mov
sub
pusha
jmp
cli
dec
ja
cli
sbb
shl
movs
xchg
jecxz
daa
cmp
inc
dec
pop
int3
icebp
pop
fbld
dec
xor
or
mov
cld
fmul
and
mov
mov
add
ret
or
cmp
jmp
lds
adc
es
lds
sbb
hlt
mov
mov
jmp
sub
adc
clc
in
and
stc
fs
cs
lock
popa
(bad)
call
in
xchg
sub
jno
(bad)
adc
fld
(bad)
ret
fistp
jmp
mov
jmp
mov
and
jecxz
xchg
arpl
or
add
int
das
mov
cmc
xor
mov
sbb
push
push
nop
das
ins
xchg
arpl
dec
mov
jno
jae
test
jns
pop
in
rep
sub
nop
outs
out
sahf
mov
fild
xlat
inc
hlt
inc
je
pop
pop
cli
jg
ds
shl
mov
ret
jns
(bad)
mov
leave
inc
push
scas
cld
out
lahf
xchg
mov
push
dec
loope
or
(bad)
fidiv
cmp
clc
jo
pop
cmp
push
mov
and
test
test
push
(bad)
ins
ret
test
adc
sbb
scas
movs
xor
pusha
sahf
inc
(bad)
adc
retf
mov
jb
xchg
shr
fisttp
push
and
clc
inc
int
jne
popf
mov
jno
in
cmps
sbb
test
popa
mov
call
lock
aas
push
test
rcr
jb
xor
pushf
inc
inc
jmp
ja
or
outs
or
mov
mov
aam
loop
mov
iret
mov
jl
inc
mov
icebp
xlat
xor
fisttp
or
imul
popa
add
inc
sar
stos
dec
in
cs
ja
xor
cs
lahf
movs
js
daa
call
or
test
test
sub
xor
push
cmp
sbb
mov
jb
pop
in
fcmovu
mov
cmp
movs
or
adc
inc
mov
pusha
adc
(bad)
iret
sbb
jo
dec
fld
jno
imul
push
outs
and
cwde
cmp
(bad)
xchg
and
(bad)
mov
pop
scas
out
aam
xchg
sbb
addr16
popa
in
jg
scas
fld
test
ss
test
jg
int3
mov
inc
add
cs
and
cmp
pop
repz
std
(bad)
pop
jno
fsub
xor
es
mov
shr
outs
xor
test
xor
sub
sahf
xor
cmp
mov
not
sahf
bound
movs
or
mov
js
sbb
or
ja
inc
scas
pop
xor
jg
jnp
jmp
fst
std
cmp
lahf
repz
test
or
imul
inc
pop
fdiv
dec
sahf
sbb
and
stos
pop
inc
sbb
and
sbb
pop
iret
out
gs
in
push
push
out
fidiv
mov
fcom
pop
ror
outs
out
dec
cmp
(bad)
xchg
enter
mov
(bad)
call
sbb
cmps
xlat
xchg
push
arpl
aas
jo
jle
lds
bound
daa
push
outs
les
jg
in
out
push
mov
mov
popf
and
pop
nop
xchg
aaa
adc
fwait
mul
scas
clc
push
mov
xchg
rcr
inc
leave
adc
popf
outs
sub
adc
(bad)
mov
aam
sti
test
mov
lods
pushf
or
adc
retf
stos
cmp
xchg
jne
fstp
push
jmp
dec
cmp
fnstsw
mov
hlt
stc
and
mov
inc
pushf
aad
retf
loop
xchg
jp
inc
es
(bad)
xchg
jns
je
mov
dec
dec
push
or
out
inc
mov
bswap
adc
pop
fld
push
ret
or
xor
(bad)
int3
lock
call
test
rcl
repnz
fiadd
mov
pop
jb
adc
fld
cmp
pop
lahf
add
mov
cs
movs
test
sbb
push
lods
les
outs
sub
lahf
std
mov
dec
aad
outs
adc
mov
mov
fdiv
clc
and
mov
mov
cmc
mov
mov
shl
inc
not
ror
fistp
or
push
inc
sahf
adc
jo
sbb
jp
push
stc
pop
adc
mov
sbb
dec
and
push
sbb
aad
xlat
call
es
repz
dec
dec
loopne
loope
and
(bad)
movs
sbb
paddusb
test
inc
stos
mov
push
cmps
xchg
sub
out
xor
cld
icebp
xchg
mov
outs
out
cdq
xor
sub
mov
add
bound
not
add
jp
lods
and
push
dec
loop
(bad)
jge
test
clc
dec
adc
jo
mov
outs
rcr
out
push
ss
out
test
jmp
mov
dec
mov
mov
jle
xor
je
test
adc
scas
ret
(bad)
adc
lds
lahf
inc
movs
jbe
mov
xchg
retf
jp
lds
stos
pop
popa
xor
inc
pop
jne
mov
push
das
jb
adc
adc
cmps
imul
das
or
pop
daa
pushf
jmp
xor
ret
fadd
push
mov
loop
int3
push
daa
mov
js
xchg
stos
pusha
push
stos
xor
sub
mov
mov
fcom
rcl
cmps
(bad)
shr
jb
les
cs
scas
int3
bound
mov
pop
aas
ins
cwde
and
sub
loop
dec
aam
add
ins
or
in
daa
push
inc
stc
pop
dec
les
mov
daa
cmp
cld
clc
push
xlat
popf
popa
enter
pop
movs
cmp
xor
jle
mov
es
fstp
push
lock
jno
cdq
enter
imul
(bad)
imul
sbb
fs
cli
(bad)
pop
xchg
pop
xor
(bad)
jmp
or
add
push
daa
sub
push
add
dec
nop
dec
sbb
and
rcr
lgs
sub
cld
int
sbb
popa
and
push
push
xchg
mov
add
pop
inc
call
push
xchg
adc
sar
fist
add
fidiv
push
ss
sub
div
mov
call
outs
aad
cli
dec
adc
call
add
repnz
scas
xor
sbb
push
lods
jb
sub
repz
retf
xchg
mov
nop
cmps
dec
adc
pop
fst
push
push
or
inc
cs
shr
dec
dec
cmp
stos
pop
push
sbb
cdq
adc
dec
stc
ja
call
out
cmp
xchg
stc
stc
or
call
int3
adc
add
or
cs
push
int3
inc
std
test
nop
adc
mov
nop
pop
add
jbe
pop
pop
cmp
xor
adc
inc
jge
loop
sbb
mov
push
sbb
adc
mov
movs
out
dec
imul
stos
arpl
mov
test
daa
sbb
inc
mov
push
icebp
js
push
cmp
or
xchg
out
int3
je
cmps
mov
rcl
jmp
sbb
call
inc
scas
add
gs
clc
xchg
add
sub
int3
push
jns
clc
push
pop
js
ins
xchg
in
push
adc
loopne
and
mov
mov
pop
xchg
stc
bound
outs
sbb
out
cmp
rcl
pop
push
add
(bad)
dec
and
rol
jno
fistp
pop
push
scas
jae
pop
stos
out
mov
and
mov
xor
mov
or
or
call
pop
in
mov
mov
retf
push
mov
sub
jnp
call
adc
jo
lds
adc
out
mov
mov
xchg
xor
int3
icebp
dec
push
pop
scas
dec
cli
xlat
leave
push
test
popa
xlat
xchg
mov
inc
sar
test
out
xchg
and
cmp
(bad)
fistp
xchg
push
xchg
or
ror
retf
cdq
mov
jg
sbb
push
sbb
push
add
pop
or
sbb
xor
in
mov
shl
sahf
gs
lea
loop
push
scas
mov
fwait
sub
ficom
mov
aaa
loope
and
shl
sbb
cwde
fidivr
scas
jbe
scas
jnp
push
inc
or
sbb
outs
pushf
xor
ss
aad
jbe
mov
fwait
xchg
jne
fist
in
add
and
rcr
leave
jp
psubq
dec
fwait
mul
in
mov
fmul
adc
push
mov
cs
hlt
sub
push
jbe
jno
sbb
aas
push
fwait
cmp
fisttp
dec
sbb
sub
stos
add
ret
paddq
scas
shr
cmp
(bad)
mov
mov
into
outs
jne
sbb
xchg
fsubr
cs
mov
int
ror
adc
xchg
mov
int3
push
cmps
fs
imul
jne
sub
cmp
push
ds
cmps
imul
retf
jns
in
mov
sub
lods
(bad)
sub
mov
and
xor
jge
mov
mov
push
jle
fisttp
loop
out
cmps
and
inc
int3
jge
mov
push
pop
loopne
mov
mov
adc
pop
out
inc
outs
mov
shl
cmp
popa
add
sti
mov
pop
bound
or
or
pushf
mov
stc
xor
in
aam
mov
xchg
jnp
nop
sahf
mov
push
sar
or
sar
cwde
cli
nop
shl
jb
out
mov
mov
adc
push
ins
ret
xchg
cmps
ss
enter
mov
pop
push
add
stc
sar
mov
inc
adc
or
push
out
ror
test
div
popf
aad
adc
push
lahf
call
jg
xchg
xor
retf
push
mov
xchg
mov
mov
jg
es
dec
ret
push
sti
cmc
out
mov
adc
int3
inc
aaa
sub
xor
popf
and
imul
in
shr
in
cmp
or
adc
add
mov
mov
out
mov
inc
push
cs
adc
sbb
mov
jae
push
mov
dec
xor
call
ror
pop
daa
xchg
shl
test
dec
adc
test
iret
test
loopne
mov
test
sbb
xor
push
xchg
popf
out
and
push
mov
mov
sbb
mov
test
mov
jl
icebp
test
ins
adc
fidivr
jnp
movs
xchg
scas
dec
mov
loope
(bad)
(bad)
mov
add
stos
inc
cmp
and
sub
push
jae
sub
int3
cmps
pop
jl
in
and
loop
and
cwde
mov
neg
push
mov
mov
and
push
dec
push
sbb
inc
sbb
xlat
repz
sbb
pop
mov
pop
(bad)
(bad)
imul
jge
push
jb
sbb
(bad)
ins
mov
vpsubsw
cmps
cmp
cmp
in
pop
icebp
mov
or
and
mov
jno
sub
add
outs
vhsubpd
push
rcr
repnz
stos
add
test
call
(bad)
fbld
int
mov
mov
mov
mov
pop
ins
or
sub
jmp
dec
push
mov
int
mov
or
xor
int
loop
stos
sbb
lods
stos
add
sub
cmp
mov
and
sbb
dec
or
add
sbb
jg
sti
cmp
mov
dec
aad
in
jmp
lock
or
push
imul
add
push
hlt
outs
imul
mov
push
add
push
pop
mov
data16
dec
add
or
mov
(bad)
jmp
pop
sbb
fsub
sub
pop
cs
pop
lea
test
pop
jmp
xchg
cmp
jecxz
outs
aam
sub
xor
or
cmp
ret
mov
jge
and
mov
cmps
xor
jns
mov
mov
je
lods
lods
push
icebp
sub
pop
popf
ins
inc
pusha
mov
dec
repnz
dec
data16
jge
mov
sub
inc
cld
jmp
adc
repnz
daa
xor
xchg
call
outs
mov
sub
xchg
loope
sbb
aaa
in
cwde
sub
xchg
add
push
repz
push
sahf
mov
imul
ficomp
or
inc
fnsave
fstp
dec
gs
call
mov
jmp
mov
ds
add
(bad)
fiadd
mov
sahf
sbb
test
jne
icebp
out
inc
inc
stos
cmp
push
push
xchg
pushf
in
dec
jb
adc
xchg
sub
add
mov
adc
fwait
dec
and
popf
add
xor
add
mov
in
imul
xchg
xor
ret
jmp
push
out
repnz
(bad)
mov
int3
cld
or
shl
ret
xlat
adc
jl
(bad)
cmc
cld
sub
out
icebp
adc
xchg
xchg
lds
jp
jbe
jae
out
cmp
pop
fstp
leave
pop
aad
inc
cmp
mul
sub
icebp
inc
mov
pop
add
(bad)
daa
sub
sub
pop
xchg
jle
jae
xor
adc
test
xor
ret
aas
xor
dec
repnz
dec
push
sub
js
dec
fnstsw
pop
outs
xor
jns
aaa
or
jns
ret
mov
into
fwait
xchg
les
add
int3
jmp
inc
or
mov
bnd
sub
inc
sub
xchg
xchg
xchg
add
mov
inc
add
jns
out
out
add
mov
mov
push
push
push
jg
xchg
ret
out
les
sub
pushf
mov
and
or
in
inc
addr16
cmps
ss
(bad)
jle
repnz
pop
xor
sub
lock
xor
out
mov
pop
lea
mov
cmp
pop
les
add
dec
mov
mov
add
cmp
mov
daa
popf
sub
pop
sbb
dec
push
stos
push
sub
punpcklwd
gs
pushf
inc
ficom
add
pop
pop
mov
out
(bad)
daa
lods
aas
mov
xchg
push
xchg
les
cmp
std
sub
xor
xchg
dec
popf
pop
ret
adc
sbb
fs
adc
cwde
jmp
(bad)
outs
push
or
or
pop
cmps
mov
idiv
das
pop
cmps
xor
movs
pop
je
iret
cli
xor
(bad)
dec
push
push
lds
adc
inc
xchg
mov
ins
push
jmp
fistp
xchg
mov
or
xchg
mov
ret
loop
scas
xor
jno
ret
scas
nop
mov
mov
mov
jmp
jmp
not
mov
add
cs
jns
inc
cdq
jb
sub
mov
loop
sub
add
dec
mov
dec
or
test
or
xor
or
mov
add
or
jae
mov
add
ffree
mov
addr16
hlt
jnp
mov
in
stc
popa
ja
scas
clc
pop
xor
pop
ud0
pop
adc
dec
sub
push
mov
jb
aas
push
pop
lock
push
mov
xchg
jnp
pop
fadd
or
jge
pusha
and
mov
mov
leave
sbb
push
pop
pop
cli
scas
(bad)
xor
inc
mov
(bad)
adc
fwait
jp
(bad)
pop
or
jnp
dec
inc
or
movs
adc
mov
pop
cwde
dec
jmp
push
(bad)
lods
lods
daa
jne
loop
rdpmc
cmp
js
pop
cmp
add
ins
mov
pushf
xchg
call
cmps
outs
sahf
ret
dec
or
dec
add
(bad)
xchg
inc
in
inc
in
push
fwait
loope
mov
push
push
arpl
rol
dec
mov
ds
pop
out
clc
(bad)
aas
clc
mov
ds
inc
dec
mov
and
mov
cmp
ins
(bad)
and
mov
xchg
loope
pushf
test
outs
out
mov
inc
fsubr
fwait
and
(bad)
outs
out
xlat
nop
out
shr
cmps
in
and
sbb
and
mov
pop
loope
xchg
xchg
popa
sub
in
or
jecxz
adc
adc
mov
clc
aam
mov
les
and
xchg
sti
icebp
arpl
and
clc
inc
adc
fst
popf
mov
jmp
pop
pusha
push
and
iret
pop
out
aas
rcr
or
mov
xor
into
push
test
sbb
bswap
lahf
adc
call
mov
inc
jge
int3
inc
sbb
xchg
and
jne
mov
mov
mov
lods
pop
sub
dec
repz
(bad)
test
add
mov
call
rol
push
inc
lods
cmp
or
sub
stos
cmp
loop
push
fst
dec
rol
sbb
test
enter
xchg
popf
leave
inc
sbb
movs
sub
cmp
cmp
jle
retf
sbb
dec
mov
movs
mov
add
push
ja
push
mov
shr
ss
push
cmp
jae
jae
sbb
lods
dec
push
xor
mov
stos
fs
leave
(bad)
popa
push
(bad)
out
dec
into
cmp
dec
inc
cli
mov
enter
inc
sbb
movs
daa
pop
push
and
or
lahf
enter
jge
add
mov
jae
aaa
je
repnz
fcomp
stos
movs
push
push
aad
jge
retf
push
jns
rol
mov
inc
sub
fwait
(bad)
mov
lea
inc
jmp
jno
inc
leave
popa
das
pop
inc
mov
sbb
icebp
sbb
jle
fidiv
imul
mov
push
adc
mov
mov
jmp
dec
jecxz
push
adc
loopne
test
into
dec
dec
in
mov
cmp
push
pop
jmp
popa
inc
(bad)
ss
add
push
cmp
jne
ins
gs
into
stos
pushf
stc
jo
pop
and
xor
(bad)
mov
cmp
sbb
sar
ret
mov
retf
pop
addr16
dec
stos
sbb
fadd
out
xchg
icebp
ror
xchg
push
push
ds
cmps
and
outs
pusha
cli
pop
int
cmp
xor
mov
dec
loope
sti
lods
mov
rcl
or
xchg
xor
mov
pop
sbb
cmp
cmp
outs
jns
dec
dec
les
(bad)
add
sbb
pop
pushf
adc
jl
outs
mov
pop
test
repz
scas
mov
lods
xchg
ja
lock
cmp
jns
ret
in
mov
es
add
aad
aas
outs
stos
sub
xchg
jne
jnp
out
cli
xchg
mov
inc
pop
scas
fistp
pop
pop
push
out
xchg
or
(bad)
clc
and
mov
sub
or
cmp
mov
mov
xchg
fldenv
and
inc
int
in
push
fldcw
and
jo
dec
mov
into
cmp
mov
sub
xchg
inc
and
dec
push
sub
ror
std
xor
ins
add
(bad)
lock
and
mov
cld
(bad)
repnz
adc
es
pop
push
nop
rol
mov
push
jmp
cmps
jae
pop
scas
fwait
nop
push
call
mov
push
out
inc
adc
imul
fnstenv
popf
ja
mov
loope
mov
add
and
pop
xchg
jmp
jecxz
push
fwait
pop
leave
cvtps2pi
lea
xor
ja
add
xchg
fucom
dec
ja
jns
adc
adc
xchg
pusha
and
sbb
ja
dec
cmp
rcl
in
mov
call
and
cli
add
sbb
lahf
loopne
test
dec
dec
pop
cmp
xor
mov
jmp
das
and
stos
je
stc
leave
clc
(bad)
pop
pop
xchg
xor
dec
out
addr16
leave
je
dec
inc
mov
push
mov
daa
mov
jecxz
vmovapd
inc
fdivr
sbb
ss
mov
or
je
popa
pop
mov
push
ftst
loop
(bad)
aam
sub
xchg
cmp
jecxz
jle
arpl
or
mov
mov
xchg
sub
jp
test
shl
inc
call
jae
es
jb
scas
dec
sub
(bad)
jb
stos
out
jle
inc
inc
mov
jns
push
jg
xor
mov
add
ins
cmp
neg
mov
out
call
jp
clc
out
mov
lods
test
add
icebp
stos
mov
xchg
shl
shl
ror
loopne
xor
and
cld
or
sbb
fsubr
ins
mov
mov
fdivr
ds
ja
in
mov
scas
call
push
imul
sbb
test
push
or
inc
(bad)
fwait
test
scas
adc
ret
dec
and
(bad)
sub
xchg
mov
adc
repz
mov
lock
rol
in
mov
jecxz
push
pop
or
dec
or
cmp
jmp
js
ja
add
add
in
xlat
in
rcl
mov
xchg
pushf
cmp
mov
cld
jae
dec
inc
and
enterw
jne
dec
lods
shl
pop
mov
cmps
out
jecxz
shr
xor
test
js
dec
test
cmp
inc
pop
push
aam
movs
fimul
arpl
loope
data16
pop
call
jecxz
pop
xor
jmp
xor
jne
or
in
imul
add
ret
lods
cmp
jae
xchg
and
daa
lahf
rcl
sbb
gs
cmp
inc
lods
add
jl
dec
in
mov
or
add
mov
cld
cmc
scas
jl
aam
cld
jmp
in
lods
lds
push
rcl
cmps
fwait
add
jns
adc
pop
ret
movs
outs
enter
xchg
mov
mulps
xchg
(bad)
stc
aam
xor
aas
data16
mov
jb
idiv
and
ss
push
stos
iret
adc
dec
loopne
cmp
jne
in
jno
cmp
call
fld
(bad)
push
lea
mov
cmp
leave
lock
mov
cmc
aaa
xchg
pop
mov
pop
and
inc
sbb
hlt
aad
xor
cs
lahf
inc
repnz
push
aad
cmp
add
add
sbb
sbb
sbb
xchg
in
adc
jbe
mov
leave
inc
scas
xchg
js
sub
outs
xchg
into
call
jnp
arpl
gs
mov
out
movs
and
cwde
mov
aaa
sub
xchg
pushf
xor
pop
pop
lock
inc
mov
xchg
out
imul
push
(bad)
ret
test
js
js
or
xchg
in
xor
movs
jg
pop
ret
mov
ds
sbb
or
and
ss
mov
xchg
rcr
shr
es
xchg
cmc
and
pusha
and
push
clc
ds
mov
movs
hlt
ror
jo
dec
jecxz
add
or
sbb
popa
sti
pop
int
test
xchg
push
clc
sbb
int3
mov
mov
or
imul
aad
and
call
add
mov
sahf
sub
es
ret
outs
cmps
xor
fild
mov
mov
sti
clc
jp
or
xchg
push
lea
inc
hlt
push
inc
dec
mov
sbb
push
inc
bound
mov
aaa
icebp
test
jmp
mov
push
mov
pop
fadd
fwait
imul
dec
leave
fidiv
(bad)
xor
popa
int3
mov
pop
pushf
dec
pop
and
pop
jecxz
stos
cli
shr
scas
(bad)
jp
sub
aaa
sub
add
mov
(bad)
mov
sub
addr16
scas
iret
sti
sbb
push
or
cwde
jge
retf
enter
jg
push
outs
cwde
sub
fwait
and
and
dec
push
retf
push
add
inc
mov
cld
mov
adc
test
xlat
iret
imul
ror
hlt
mov
mov
mov
loopne
cmps
loope
push
mov
pushf
add
stos
sbb
inc
sub
(bad)
or
xor
pop
test
push
retf
adc
or
jl
call
jmp
das
pusha
xor
nop
stos
xor
not
loop
mov
(bad)
pushf
cmp
pusha
cwde
dec
movs
ret
jo
lock
stos
mov
shl
mov
mov
pop
mov
hlt
jmp
imul
and
cld
adc
pushf
mov
leave
out
fsubr
inc
ret
rcl
ja
in
movs
lahf
movs
pop
jmp
cmp
nop
fwait
mov
push
test
fnsave
and
outs
sbb
inc
sub
push
lods
and
test
inc
or
xchg
adc
add
cmp
push
(bad)
cmp
jmp
dec
pop
lods
add
sti
repz
mov
cmps
mov
cmps
xchg
or
xor
je
loope
xor
in
shl
jmp
fild
fdivr
frstor
retf
and
cmps
add
sti
gs
outs
cmc
std
inc
loopne
xchg
int3
jb
dec
movs
xchg
std
push
ins
push
xchg
lock
jae
cwde
(bad)
out
xor
sub
iret
jge
(bad)
outs
mov
pop
lahf
pop
xchg
(bad)
test
ret
loope
jo
jnp
sub
movs
sar
jbe
arpl
adc
dec
sub
push
push
pop
mov
dec
cmp
clc
xchg
in
dec
scas
push
jo
xchg
repnz
sar
popf
xchg
mov
inc
push
hlt
hlt
push
mov
push
fist
sbb
pop
pushf
pop
data16
sub
jns
rcr
test
sub
bswap
jmp
cmp
cmp
stos
mov
bound
sbb
mov
jbe
jo
push
or
push
sahf
pop
sub
popf
into
out
aam
inc
leave
cwde
das
test
xchg
rcl
and
(bad)
(bad)
or
jae
mov
outs
mov
(bad)
sub
pop
fs
(bad)
mov
(bad)
sbb
push
mov
push
outs
fmul
xor
xor
push
mov
sbb
sub
inc
mul
cmp
retf
stc
dec
mov
inc
sbb
inc
dec
out
adc
pop
movs
icebp
in
jl
xor
icebp
mov
xchg
rcl
pop
add
int
xchg
pop
retf
or
mov
mov
sar
sub
mov
out
ret
retf
out
clc
out
mov
in
and
or
in
mov
lods
jo
mov
das
cwde
push
mov
pop
pop
jmp
movs
bswap
mov
clc
and
dec
inc
adc
jb
movs
sub
scas
imul
cs
pop
cmp
adc
mov
mov
cwde
mov
cmc
sub
mov
std
pop
test
cmc
mov
dec
mov
pop
sub
or
adc
into
movs
inc
mov
lea
mov
(bad)
ja
jle
push
xchg
mov
int
fcomp
push
adc
cld
ins
mov
mov
dec
adc
test
jl
mov
pop
nop
jmp
fdivrp
jne
mov
cmp
dec
fsubrp
dec
inc
jns
mov
mov
dec
loop
cdq
adc
sahf
adc
mov
movs
gs
adc
aas
fs
add
ror
lds
pop
jne
pushf
inc
or
mov
das
cld
shl
(bad)
adc
sub
sbb
jl
push
stos
dec
or
test
xchg
adc
add
in
rol
daa
adc
sub
and
push
lea
cmp
push
sar
loop
cmc
outs
rcl
aas
adc
mov
popf
or
mov
je
dec
(bad)
int3
adc
stos
mov
xchg
jg
jb
cmp
in
call
mov
clc
pop
adc
jl
js
push
or
push
out
xor
inc
mov
imul
(bad)
test
sar
mov
adc
or
out
dec
loop
pop
sbb
rcl
aas
(bad)
rcl
sbb
rol
or
ins
sub
and
or
jge
add
in
cmps
(bad)
aas
jge
cmc
inc
mov
lods
jp
in
jge
or
imul
jmp
into
loope
sub
push
and
xchg
mov
popf
in
lods
arpl
sub
cmp
jno
jp
fisub
in
cmc
jmp
popa
aam
jnp
imul
jp
(bad)
and
and
xor
jecxz
dec
shl
push
mov
jl
xchg
cmp
mov
or
frstor
jl
repnz
push
fisubr
loope
aam
push
cmp
xchg
cdq
in
sti
push
push
xor
ins
ficomp
in
ret
(bad)
sbb
jmp
cld
cli
jnp
test
int
imul
test
pop
clc
(bad)
out
in
mov
or
xchg
fidivr
sub
enter
and
xor
ret
(bad)
in
add
fdivr
adc
cmp
inc
pop
loopne
rcl
inc
or
pop
dec
xchg
dec
pop
movs
sbb
jg
add
int
mov
in
push
mov
or
xor
out
repnz
jb
loope
cmp
movs
retf
mov
loop
sbb
shr
push
mov
cmp
mov
sub
fisttp
cs
in
test
pop
out
or
adc
sub
pop
mov
hlt
cdq
into
sbb
mov
pop
inc
test
mov
push
aas
rcr
pop
mov
mov
mov
cmps
jmp
imul
dec
mov
sahf
stc
das
cmps
call
cs
adc
in
dec
int
cmp
xor
cmp
imul
cli
xchg
push
push
jns
sub
jae
adc
call
std
inc
push
icebp
xchg
push
out
push
in
and
xlat
and
and
int
dec
jmp
inc
ins
es
dec
repz
push
int3
mov
mov
push
inc
adc
jg
sbb
test
cwde
mov
mov
pop
xchg
ja
aad
sbb
movs
lea
or
out
adc
mov
inc
inc
cmp
fisubr
add
outs
mov
mov
mov
xor
sbb
retf
and
in
js
mov
aam
cmp
loop
popf
xchg
lea
pop
in
sub
add
mov
retf
fnstsw
inc
inc
xor
shl
scas
mov
faddp
sub
cmp
in
ja
loopne
shl
mov
sub
xor
inc
mov
jl
in
xchg
dec
push
stc
add
fcmovnbe
jg
movs
inc
(bad)
leave
push
xchg
or
mov
jbe
and
cdq
push
data16
xor
lods
pop
jl
jne
cli
inc
jb
or
test
mov
fild
in
(bad)
iret
add
mov
rol
cmp
aas
xor
inc
sbb
jecxz
cli
or
call
jo
(bad)
cmp
stos
aam
movs
mov
push
push
mov
jp
add
stos
call
mov
stc
adc
xchg
out
lods
lock
xchg
add
int
or
xchg
sub
xor
mov
inc
shl
dec
jmp
push
push
inc
xor
cdq
shl
push
inc
loope
cmp
pushf
sbb
sti
inc
outs
mov
frstor
add
adc
int
(bad)
stos
mov
loopne
fstp
fs
mov
sahf
fsub
retf
push
add
add
and
mov
xor
stc
push
push
sti
adc
mov
fdiv
cli
dec
shl
lods
ror
ss
dec
xor
and
dec
scas
fld
xchg
cli
cs
or
mov
outs
rol
loop
mov
ins
add
in
stos
je
push
push
fnstsw
push
lods
inc
xor
ins
adc
jns
cmp
jns
pop
inc
fdivp
jno
inc
fs
xchg
mov
aaa
pop
sti
mov
(bad)
cmp
mov
jmp
inc
cld
call
push
xor
call
bound
sbb
jmp
push
mov
call
xchg
inc
mov
and
std
or
jge
sub
inc
mov
jbe
add
in
int
ja
dec
cmp
adc
addr16
and
inc
pushf
sub
xchg
icebp
int
ret
ss
jae
ins
retf
cmp
mov
xchg
movs
pop
or
enter
pop
ret
add
dec
sub
out
rcr
inc
xor
ret
pop
dec
dec
mov
sub
fimul
enter
xor
jp
sbb
test
inc
push
shl
in
int
out
inc
jo
mov
mov
xlat
gs
dec
mov
mov
iret
push
and
(bad)
xchg
adc
je
repz
fmul
jbe
inc
inc
hlt
shl
cmc
test
xchg
mov
adc
movs
cdq
lds
adc
fld
rcl
(bad)
push
jl
repz
aaa
test
ins
popf
mov
retf
sbb
ret
dec
mov
sbb
in
(bad)
cmp
mov
les
push
ja
xchg
test
aam
aaa
pop
shl
xchg
test
je
sub
cwde
sahf
out
jb
aaa
or
(bad)
cmp
shl
cmc
jns
sbb
jmp
pop
mov
add
jb
sti
(bad)
mov
into
or
cmps
inc
out
pusha
inc
outs
test
mul
fsqrt
push
xor
mov
outs
push
push
pop
push
test
aam
(bad)
out
cs
stos
add
push
mov
jmp
inc
sbb
fist
add
xchg
iret
test
cmp
add
mov
and
mov
mov
xchg
jle
stos
jle
dec
push
movs
sbb
shl
mov
fisub
cmp
mov
(bad)
pop
sub
dec
mov
fild
or
stos
add
dec
test
pop
xor
cmp
imul
fs
in
sub
jae
xchg
(bad)
mov
sti
out
pop
mov
jbe
imul
mov
mov
pop
clc
pop
outs
sahf
dec
push
fstp
xor
dec
mov
ret
inc
ja
mov
add
bound
adc
xchg
jo
pop
or
addr16
inc
fs
cdq
mov
xchg
(bad)
and
sbb
inc
ret
test
add
(bad)
push
sar
jecxz
enter
jle
rol
ss
jno
cmp
lea
stos
stos
sub
sahf
push
xchg
fidiv
and
hlt
sub
xchg
pop
inc
enter
std
jg
lock
sbb
dec
out
(bad)
push
sub
pop
sbb
pop
in
pop
scas
or
mov
sahf
add
loope
pop
and
dec
paddq
test
jmp
jge
mov
mov
stos
jecxz
dec
gs
cmp
imul
sbb
sub
cmp
or
adc
aam
dec
sbb
pop
adc
mov
retf
sbb
adc
mov
cmp
(bad)
je
xchg
pop
mov
xchg
pop
add
lock
mov
xor
ss
(bad)
into
push
fucomip
nop
lods
dec
hlt
mov
call
and
dec
out
cdq
xchg
nop
outs
lods
mov
xor
cmps
inc
add
enter
(bad)
int
mov
adc
ret
dec
or
mov
ins
shl
sub
sbb
shr
mov
les
ds
push
jmp
sbb
push
lods
sub
scas
mov
imul
adc
sbb
enter
es
ins
(bad)
ss
leave
call
lods
fld
xchg
loopne
xchg
push
and
out
mov
retf
imul
jbe
loope
xlat
into
stos
sub
mov
es
add
xchg
jge
lods
xchg
dec
sbb
pop
stos
push
call
jg
lock
adc
mov
push
mov
cmps
ja
xchg
mov
mov
test
hlt
jne
or
popa
das
lods
push
shl
mov
ret
(bad)
adc
dec
and
xor
push
clc
dec
jle
clc
and
add
fdivr
sahf
xchg
jbe
movs
scas
outs
lds
pop
push
cld
and
push
mov
mov
jnp
adc
inc
dec
out
test
int3
dec
movs
fst
pop
jb
sub
ds
cli
int
ins
iret
lds
xchg
cmp
xchg
in
jbe
call
dec
inc
mov
std
(bad)
mov
xchg
or
mov
in
pop
inc
mov
iret
call
sub
lds
(bad)
mov
and
nop
pop
cli
mov
xlat
neg
addr16
pop
pushf
hlt
cmp
(bad)
xchg
call
lock
out
xor
adc
sbb
mov
shl
cmps
or
ja
and
mov
jg
xchg
mov
xchg
bt
push
xor
push
arpl
jmp
dec
mov
inc
in
out
ss
shr
cmps
inc
jmp
ficom
cdq
ss
sub
push
jno
pushf
jbe
sub
add
mov
inc
in
adc
fwait
inc
xchg
cmp
add
cmp
sahf
push
stos
jnp
sub
popa
ror
fdivp
push
xchg
push
dec
jnp
pop
loope
and
cmp
inc
jae
cmp
scas
push
ds
repz
cli
fisttp
cmp
icebp
loope
jecxz
add
jge
aas
or
push
fadd
dec
jns
cmp
retf
jg
into
push
cmc
loope
ins
call
inc
ror
xchg
imul
int3
inc
loopne
std
mov
mov
shl
or
lock
pushf
fisub
dec
jle
xchg
add
jnp
push
stos
mov
in
mov
fs
adc
add
movs
pop
xchg
mov
loop
jle
dec
out
xchg
add
in
in
sbb
cmp
push
scas
test
mov
ins
jge
sub
cmps
jns
enter
pop
int3
cli
push
test
in
jbe
sub
xor
mov
mov
pop
xchg
mov
inc
icebp
leave
imul
pop
adc
dec
loope
aaa
pop
gs
sbb
mov
mov
add
test
test
mov
and
outs
paddsw
add
mov
aaa
xchg
jmp
and
pusha
sar
mov
into
push
jae
inc
dec
xchg
jmp
push
out
sbb
xchg
imul
jmp
(bad)
out
(bad)
ins
std
add
(bad)
cmp
sbb
pop
dec
icebp
mov
xchg
jno
and
ret
stc
cli
xor
std
aad
bound
sub
and
leave
push
add
mov
sub
add
test
fnstcw
mov
imul
lods
jne
cmps
fistp
retf
jae
xchg
fild
push
les
pop
cli
sbb
mov
cwde
dec
xchg
adc
retf
mov
inc
lods
dec
aad
stos
mov
jmp
daa
inc
mov
pop
mov
movs
cmps
jae
pop
mov
or
int
sub
iret
mov
pop
iret
scas
mov
sbb
mov
sub
ins
pop
xor
or
or
push
sub
mov
stos
dec
arpl
and
sti
mov
sahf
lds
das
retf
xlat
mov
pop
add
(bad)
push
mov
push
sti
dec
loop
aas
inc
ins
cmps
sbb
and
add
shl
pop
pop
bound
stos
call
pop
pushf
pop
shl
xor
movs
dec
jae
mov
inc
mov
in
adc
cmp
loope
call
loopne
or
fmul
scas
aaa
rcr
dec
pop
or
push
lods
xchg
ror
cli
add
jae
mov
pusha
adc
xor
test
xchg
icebp
cwde
shl
or
sahf
lock
ror
cmp
fist
aaa
jb
imul
loop
add
sub
mov
jnp
addr16
sub
mov
xor
imul
push
add
inc
jge
jmp
xchg
pop
adc
fcomp
and
push
jne
jne
cmps
inc
iret
xor
int
shl
stos
mov
dec
mov
pop
jecxz
lea
pop
pop
ror
xor
and
sbb
jne
test
daa
push
or
xchg
mov
mov
aad
push
inc
scas
adc
sub
inc
dec
jecxz
xchg
in
jno
mov
or
inc
jl
aam
pop
iret
cmp
mov
jmp
sbb
inc
fist
lea
pushf
ins
sub
sti
sbb
inc
cmps
pop
inc
adc
and
and
mov
sbb
xchg
test
mov
mov
push
jmp
push
into
lock
stos
jl
mov
and
fistp
test
js
xchg
jp
popf
mov
pop
(bad)
jle
jmp
loop
mov
adc
mov
popa
iret
in
mov
mov
jne
xor
mov
push
mov
hlt
ret
sub
jmp
sbb
in
fbld
pop
xor
mov
(bad)
pop
mov
(bad)
mov
sub
adc
les
add
out
rcr
push
push
hlt
add
stc
or
pop
dec
fwait
add
int3
mov
fcmovbe
pop
inc
xor
sbb
push
js
cmp
or
lods
xchg
mov
mov
xor
push
xor
adc
test
adc
jp
jmp
sar
jl
inc
sti
int
pop
inc
jmp
out
mov
aas
dec
pushf
and
aam
cmps
ficom
(bad)
xchg
mov
add
(bad)
mov
dec
jle
enter
pop
sub
adc
jo
int
movs
push
out
pop
test
cmp
int3
cmp
cmp
sbb
cmp
jp
loopne
xor
lgs
dec
mov
pop
icebp
cmp
(bad)
movs
lock
jne
retf
int3
cmp
cmp
jne
push
dec
aad
pop
nop
push
mov
mov
es
jg
int3
pop
pop
outs
push
out
add
ss
xchg
push
cld
cmp
test
sbb
push
jae
adc
lds
adc
push
xor
adc
test
mov
adc
add
pop
cmp
sub
int
rol
in
sbb
jmp
dec
or
push
cmp
or
sbb
(bad)
mov
movs
cmp
pusha
and
mov
mov
jg
add
dec
inc
cdq
data16
sbb
stc
das
and
push
ins
cld
lods
xchg
out
lds
sub
sbb
pop
mov
mov
adc
push
add
inc
fmul
mov
add
inc
adc
in
ja
sub
nop
xor
jge
push
adc
jp
pop
ret
fwait
push
sbb
(bad)
mov
mov
cmp
inc
inc
es
jmp
mov
pop
outs
cmp
retf
cld
pusha
jae
cmp
push
jns
inc
adc
std
or
pop
adc
push
push
sar
dec
aaa
jmp
fstp
(bad)
pop
aam
push
es
adc
jle
mov
pop
(bad)
mov
in
sbb
mov
or
pop
bound
addr16
pop
fisub
cmps
adc
leave
xchg
xchg
jp
lock
mov
psubd
into
repnz
cmp
enter
(bad)
xor
add
out
xchg
shl
xchg
in
sbb
xor
mov
adc
ins
cmps
or
mov
push
or
push
cmps
cmp
cmovs
pop
bound
mov
les
jecxz
je
or
xor
jmp
xchg
fisub
push
das
add
add
mov
sub
cmps
sti
in
pop
and
xchg
neg
mov
rep
pusha
dec
pop
jns
lods
jle
loope
cmp
ja
scas
test
xor
test
js
movs
iret
and
ror
ja
je
sbb
sti
push
adc
shl
dec
jp
xor
sbb
xchg
aam
xlat
jae
into
fld
iret
jns
add
shl
push
and
sub
lds
xor
cmp
and
enter
js
fst
retf
dec
dec
call
std
shr
xchg
inc
cmp
ds
mov
jbe
pop
jmp
jno
loope
sti
push
push
dec
sub
sub
mov
xor
or
call
jp
and
mov
cli
or
push
stc
sbb
hlt
fisttp
inc
stos
sbb
or
and
and
sub
popa
xchg
cmc
movs
or
ins
in
retf
xchg
jge
out
cmp
out
shl
mov
shl
loope
bound
scas
jmp
jne
out
call
enter
inc
movs
call
outs
add
sub
enter
push
imul
mov
adc
test
inc
jl
imul
mov
cdq
pop
shl
mov
xchg
bnd
mov
in
push
cmc
xchg
xor
and
shl
push
mov
fwait
add
mov
inc
and
adc
test
and
shl
mov
aam
into
ins
hlt
or
jnp
shl
jge
out
xchg
and
mov
fisubr
mov
add
clc
iret
mov
ss
jns
push
push
sub
scas
in
cwde
cdq
mov
pop
jmp
or
mov
inc
xor
iret
sbb
jmp
in
jae
arpl
out
(bad)
sub
retf
add
mov
adc
ins
xchg
addr16
jle
mov
xchg
xchg
jb
mov
mov
and
fdiv
xor
stc
mov
jmp
xchg
add
cmps
push
push
retf
imul
pop
xchg
dec
mov
iret
test
sbb
or
ss
(bad)
or
add
push
outs
jl
cmps
cmps
push
pop
push
and
mov
or
jle
imul
iret
sahf
add
xchg
pop
lods
repnz
pop
adc
movs
jb
mov
out
pop
sub
arpl
(bad)
cmps
xchg
aad
fisttp
add
jae
jbe
dec
lods
fstp
adc
mov
cmp
jb
cmp
clc
repnz
inc
cld
imul
xchg
cmp
and
add
mov
xor
lock
ret
mov
and
data16
ins
or
or
arpl
ja
or
daa
into
fimul
dec
mov
xchg
mov
(bad)
mov
adc
retf
(bad)
mov
mov
cmps
fst
mov
inc
jae
dec
xchg
or
test
mov
fisub
mov
ins
pop
xchg
test
xor
lahf
mov
dec
jae
jmp
icebp
push
sub
fwait
adc
enter
(bad)
(bad)
inc
pop
sar
sub
jp
mov
jmp
cmp
jnp
add
popa
das
lods
xchg
dec
cli
jns
pushf
mov
int3
push
rcr
mov
pop
add
cld
or
bound
(bad)
and
std
adc
xchg
cld
fcom
mov
push
xchg
ins
sbb
adc
(bad)
jns
imul
in
mov
xchg
inc
in
cmp
xchg
mov
je
inc
mov
pop
(bad)
mov
xor
aaa
and
pop
add
jmp
mov
mov
or
aad
imul
fimul
sbb
cdq
adc
or
jmp
(bad)
adc
jmp
es
daa
xor
or
idiv
hlt
xchg
pop
outs
aas
je
mov
or
scas
xchg
xchg
shl
scas
inc
and
pop
sbb
jmp
das
or
into
mov
comiss
xchg
mov
jecxz
and
pop
jbe
mov
fisttp
inc
test
xor
mov
add
fldenv
out
pop
ja
sub
inc
adc
mov
xor
in
mov
adc
(bad)
sbb
mov
cmps
(bad)
rol
inc
cld
mov
or
add
sbb
push
daa
sub
xor
das
push
test
inc
loopne
loopne
xor
outs
cmp
dec
test
in
sub
sub
or
pop
add
(bad)
dec
or
enter
xlat
ret
clc
iret
mov
mov
test
stos
cmps
ret
add
add
mov
xor
jp
das
mov
out
mov
mov
leave
stos
loop
add
sti
lock
lods
(bad)
movs
or
enter
nop
fwait
push
adc
rcl
loopne
and
enter
(bad)
ss
ret
mov
cmp
jp
std
inc
sahf
clc
dec
mov
push
sbb
add
pushf
movhlps
mov
mov
retf
jl
mov
cli
mov
lahf
jmp
dec
enter
add
xchg
lahf
lock
jmp
sub
jne
or
imul
dec
cmp
add
(bad)
jb
jb
pop
cmps
jae
mov
sub
push
or
stc
xor
repnz
mov
mov
mov
in
mov
mov
fiadd
adc
mov
call
aaa
pop
pusha
scas
cmp
push
xchg
sar
mov
and
xchg
adc
mov
adc
pop
cmp
sti
xor
sbb
jmp
cmp
cmps
pusha
add
xor
jmp
pop
fnstenv
add
outs
aam
cld
arpl
dec
push
mov
xor
popa
pmuludq
jmp
pushf
aaa
mov
fild
es
and
xchg
sbb
jb
outs
daa
adc
cmps
mov
jmp
in
push
test
movs
ins
and
shl
ret
push
jp
pop
outs
repz
xrelease
mov
das
jns
lods
outs
cmp
mov
jp
jl
sbb
adc
scas
in
(bad)
out
cmp
push
cld
inc
xchg
mov
stos
stc
mov
ficomp
dec
sbb
push
fstp
or
inc
scas
test
fucomi
icebp
cdq
ret
jecxz
repnz
push
shr
ja
sub
add
pop
inc
or
pusha
jbe
push
test
jo
xor
dec
stc
loopne
retf
les
fisub
xchg
enter
retf
add
jne
or
ins
sbb
ror
loopne
mov
add
(bad)
jnp
call
test
mov
lods
pop
jecxz
pushf
dec
out
nop
cmp
cmp
pop
(bad)
call
shr
or
dec
push
add
jge
pop
sbb
sbb
xor
icebp
and
add
mov
and
ins
out
test
sub
cmps
mov
out
pop
sbb
dec
fsub
jg
nop
or
es
js
xchg
adc
pop
push
jmp
add
enter
sub
test
cwde
cmp
fldenv
mov
mov
mov
mov
xchg
dec
lods
je
sub
repnz
out
sti
push
and
fldcw
push
aad
outs
and
jp
fwait
mov
cmp
sub
cmp
dec
xlat
add
aas
inc
das
call
pop
cmp
outs
daa
push
das
push
addr16
loop
jbe
std
inc
outs
sbb
jbe
rcr
shl
push
push
lods
pop
jle
loope
imul
loopne
and
arpl
mov
data16
and
icebp
mov
dec
xchg
gs
mov
cmc
popa
movs
repnz
jle
idiv
mov
add
jg
cwde
adc
stos
add
outs
xchg
add
add
pushw
jle
sub
and
and
cmp
lods
cmps
adc
inc
xor
jns
push
out
hlt
jg
sub
out
xor
sub
fild
shl
or
scas
jg
leave
add
clc
shr
mov
and
mov
test
outs
add
inc
push
jmp
dec
nop
inc
js
out
gs
dec
(bad)
mov
pop
in
fcmovb
push
imul
daa
(bad)
mov
outs
add
push
adc
push
and
xor
xor
xchg
out
popf
in
push
pop
out
jb
push
xor
add
(bad)
fiadd
inc
je
or
mov
mov
pop
sub
add
pop
outs
xor
dec
aaa
jp
in
fild
xchg
loop
fcomp
mov
sti
test
ins
push
retf
cld
call
in
mov
mov
imul
sub
cmps
sbb
sbb
rol
dec
outs
pop
inc
outs
test
jne
or
push
xchg
cdq
in
mov
and
jbe
adc
fisttp
sahf
sub
jge
push
xor
stc
sbb
xchg
jg
push
jle
mov
stos
das
adc
mov
xor
push
test
xchg
cdq
pusha
stc
jae
in
ds
cmp
push
pop
int3
outs
cmp
xchg
xor
mov
daa
mov
lds
and
mov
xchg
loopne
add
dec
cmp
dec
pop
jmp
mov
jae
shr
dec
xor
(bad)
dec
in
sbb
sbb
xchg
xor
test
fdivr
std
push
call
mov
leave
aaa
cdq
pop
jge
loopne
cmp
adc
cld
mov
or
daa
push
popf
adc
inc
fld
mov
add
xchg
sub
test
je
addr16
sbb
cmps
jbe
lds
imul
and
inc
fst
xor
sub
(bad)
or
cmps
repnz
xor
add
sub
mov
(bad)
and
loopne
imul
dec
je
dec
(bad)
pop
outs
push
ss
cmp
pop
rcr
fwait
(bad)
mov
push
push
push
movs
add
test
arpl
push
addr16
int
cs
adc
jo
add
mov
push
aaa
or
jge
or
ret
popf
mov
push
shr
cdq
mov
mov
lfs
jbe
mov
test
inc
fimul
sti
cmp
adc
rcr
push
add
mov
inc
cs
repnz
(bad)
icebp
test
mov
inc
stos
ret
imul
adc
pop
mov
outs
push
mov
retf
mov
fcmovb
fld
add
addr16
cmp
mov
sub
lods
lods
bound
fbld
neg
cmp
add
out
int
mov
movs
mov
cmp
(bad)
cmp
mov
xchg
cmc
and
xchg
cmp
aam
adc
out
stos
repnz
sar
or
inc
cmc
jbe
sbb
hlt
std
test
xchg
sub
lahf
inc
add
pop
mov
adc
stos
sbb
cdq
cli
pop
jmp
jp
lods
test
je
je
jg
mov
mov
push
mov
loop
and
call
lock
or
in
mov
popa
sbb
sub
lock
mov
repnz
xor
xchg
shr
int
fstp
or
cld
pop
mov
cld
int
icebp
push
xor
fisubr
jbe
fsub
es
jo
adc
jp
aas
and
out
jecxz
outs
adc
adc
ins
stos
push
and
fs
jge
out
pop
xchg
push
rcl
push
xchg
pop
ror
mov
arpl
loope
pop
(bad)
loop
out
mov
mov
mov
and
jmp
arpl
adc
(bad)
inc
jbe
rcl
and
xlat
add
sub
das
in
adc
or
popf
dec
movs
outs
leave
inc
or
out
push
dec
inc
cmp
neg
cmp
pop
fcom
pop
loop
xor
xchg
pop
imul
xchg
cmp
rol
cmps
in
push
add
pop
aad
fimul
gs
fadd
add
jmp
and
inc
dec
mov
xor
std
jmp
inc
sbb
in
dec
mov
xchg
push
mov
pop
mov
xchg
ins
retf
(bad)
enter
mov
and
(bad)
call
adc
pop
int3
or
mov
ret
nop
out
jecxz
cli
mov
xlat
jno
ror
sbb
and
sbb
push
scas
test
je
ins
outs
bound
or
gs
jo
sbb
inc
out
mov
xor
mov
mov
loop
loop
jo
jnp
daa
popf
in
jmp
pop
leave
jne
sar
jecxz
out
shl
les
arpl
pop
mov
int3
retf
xlat
and
cmp
push
fisttp
sbb
add
les
hlt
(bad)
in
push
xor
ins
sahf
jo
dec
jno
in
or
mov
xchg
adc
mov
arpl
enter
push
leave
in
and
add
inc
mov
pushf
sbb
mov
out
inc
jp
hlt
jg
dec
pushf
push
mov
fild
mov
xchg
test
scas
aam
lods
cmp
dec
push
cwde
adc
and
push
mov
addr16
sub
rcr
cwde
fbld
rol
push
jmp
hlt
inc
mov
mov
repnz
nop
dec
push
mov
xor
or
ds
pop
push
lods
push
out
into
outs
test
test
push
cmc
sub
cdq
xchg
or
(bad)
in
pop
stc
lahf
iret
in
xor
out
test
mov
xchg
xor
push
mov
ret
aad
popa
xor
mov
mov
shl
push
dec
aad
add
lea
or
jle
inc
stos
mov
(bad)
jae
fld
aaa
inc
add
mov
mov
sti
add
xor
sbb
ret
and
push
push
rcr
mov
push
pop
int3
jmp
pop
leave
mov
dec
mov
mov
mov
sub
ret
xor
aas
fisubr
mov
mov
lahf
and
int3
push
push
lods
mov
mov
dec
bnd
fs
lods
popa
xor
sub
mov
out
jecxz
dec
cs
dec
gs
(bad)
pop
das
cdq
out
fdivr
add
mov
je
clc
pop
or
mov
pop
cdq
rcl
mov
ffree
and
sub
inc
pop
mov
xor
cmp
adc
out
push
mov
clc
push
pushf
pop
or
mov
xchg
inc
lds
mov
push
ins
dec
adc
mov
aaa
imul
jmp
sbb
pop
test
pop
daa
data16
and
stc
jo
or
imul
pushf
loope
xchg
mov
fstp
bound
pop
inc
leave
jmp
enter
scas
fwait
jle
and
ja
iret
into
push
pushf
iret
xor
jne
call
cmp
cwde
ins
scas
cli
mov
mov
xchg
mov
fcmovnbe
mov
in
fist
imul
aad
mov
jle
in
dec
xchg
cld
inc
xor
das
push
jnp
jno
mov
xchg
fdivr
or
mov
icebp
push
out
test
xchg
mov
in
cmps
add
xchg
or
out
and
sbb
mov
xchg
mov
xor
stos
add
xchg
loope
(bad)
or
js
xor
repnz
mov
out
rol
add
push
pushf
or
xor
inc
inc
mov
std
es
clc
(bad)
lods
cli
fcom
mov
sub
jmp
xchg
sub
jmp
pop
pop
mov
cwde
inc
(bad)
mov
shr
movs
jb
idiv
sbb
xor
(bad)
jmp
adc
movs
xchg
bound
ror
mov
in
dec
sub
repnz
gs
jo
fadd
imul
jle
cmp
inc
aaa
and
pop
dec
shl
pop
test
dec
jle
pusha
dec
and
das
xor
mov
xchg
imul
jnp
adc
cmps
pushf
add
jmp
mov
(bad)
rcr
jb
sbb
mov
xchg
rol
push
retf
cmps
hlt
or
dec
jbe
pusha
into
pop
fnstcw
xchg
imul
movs
xchg
xchg
mov
adc
sbb
(bad)
pusha
retf
retf
rol
stos
sub
jle
push
lahf
cmp
in
popf
mov
fcomp
orps
fist
fcomp
scas
daa
inc
call
(bad)
push
imul
popf
loop
arpl
dec
add
jne
imul
(bad)
popf
mov
ficom
ins
sti
jb
pop
iret
cmc
push
pop
push
jg
sbb
inc
inc
xchg
sub
pop
and
aam
(bad)
fsub
bound
pop
push
and
adc
mov
cmp
fisttp
jo
jo
mov
mov
(bad)
mov
add
js
xchg
xchg
stos
(bad)
stos
stc
gs
loope
sbb
fist
sahf
dec
aaa
aad
lods
adc
mov
(bad)
adc
test
repz
cli
bound
or
mov
xchg
cmp
out
add
lahf
pushf
and
bound
(bad)
xor
out
sub
sub
xor
or
mov
sub
mov
push
stos
icebp
adc
(bad)
mov
retf
scas
mov
and
in
push
jecxz
loope
or
fwait
out
inc
inc
enter
xor
cmp
cmp
out
jmp
js
das
enter
repnz
jle
retf
nop
mov
sar
mov
push
inc
int3
and
ret
call
jecxz
mov
mov
xchg
adc
add
aam
rcl
cli
cmp
adc
mov
mov
clc
sti
adc
out
leave
dec
xchg
ds
out
mov
adc
lahf
icebp
push
not
movs
cmp
cmp
call
dec
mov
retf
adc
mov
xchg
jmp
dec
xor
jno
and
test
ds
mov
cdq
fadd
loopne
xor
or
dec
dec
(bad)
jp
mov
sbb
pop
sub
fidivr
dec
add
add
cmp
or
or
xchg
push
jp
and
inc
mov
sbb
std
jge
jbe
(bad)
sbb
ret
cwde
cmp
push
aam
mov
push
lahf
mov
cmp
addr16
and
jmp
xor
push
lea
xor
push
push
js
movs
and
scas
ins
mov
mov
dec
in
faddp
pop
mov
sub
into
fnstenv
jno
cdq
bound
in
pop
mov
test
imul
jns
cmps
in
je
fisttp
sbb
movs
cmp
jmp
leave
or
cld
ds
ror
and
mov
daa
inc
shl
inc
sti
pop
inc
mov
xor
mov
std
inc
repz
sar
ins
pop
test
js
fiadd
popa
dec
pushf
or
and
out
(bad)
(bad)
mov
or
outs
xchg
in
rcr
popf
out
popf
into
loope
add
pop
mov
imul
out
mov
jl
(bad)
inc
lods
adc
inc
sti
out
fcomp
data16
arpl
stc
sub
and
pusha
and
push
xchg
sbb
adc
das
xchg
or
hlt
fdiv
push
xor
mov
enter
mov
fcom
rol
mov
std
fild
push
jns
mov
es
(bad)
(bad)
sub
out
jne
inc
cwde
imul
or
popa
test
add
retf
rcr
bound
dec
xchg
movs
push
loope
jecxz
inc
popf
and
retf
sub
daa
inc
cld
pushf
stc
out
mov
iret
imul
inc
xor
jg
(bad)
stos
jl
and
cs
or
push
dec
aam
sbb
loope
fdivr
ins
push
sahf
xchg
xor
ja
sub
aas
cmp
xor
shl
jo
gs
cmps
or
adc
popf
(bad)
or
mov
jge
xchg
(bad)
mov
js
xchg
rcl
sub
cld
pop
jne
mov
stos
into
push
in
push
xchg
cmp
or
daa
adc
movs
pop
xchg
gs
test
pop
pop
dec
mov
mov
and
pop
cmc
test
call
xor
fwait
mov
icebp
cwde
pop
sub
jg
dec
add
mov
call
(bad)
xchg
sub
push
fimul
add
and
inc
xchg
sar
ss
shl
xchg
test
psubd
sub
es
dec
int3
sbb
cmps
jno
fwait
ret
pop
sub
adc
mov
xlat
dec
sub
js
inc
int3
inc
cmp
aam
(bad)
xor
(bad)
out
inc
xor
jmp
pop
rol
inc
pushf
xor
jne
sar
xchg
fnstcw
out
pop
mov
enter
icebp
jnp
mov
sub
loop
sbb
(bad)
inc
push
xor
(bad)
inc
test
push
out
in
xor
inc
call
iret
xchg
idiv
fs
mov
mov
xchg
adc
cmp
sub
pop
sbb
add
jmp
test
or
jp
test
inc
les
mov
and
in
pop
mov
stos
ror
pop
(bad)
xor
jns
inc
enter
mov
add
or
cmp
sbb
imul
xchg
sub
sbb
push
cmp
sub
hlt
sbb
hlt
sbb
test
(bad)
fild
out
fstp
cmps
in
outs
inc
je
mov
(bad)
pop
xlat
cmp
cs
dec
std
add
xor
inc
mov
mov
pop
mov
imul
sub
test
retf
leave
sbb
test
push
cmps
in
pushf
pop
call
test
out
arpl
fs
dec
jne
mov
sub
aaa
push
ins
mov
pusha
and
pop
sbb
jecxz
aaa
in
fdivr
cli
add
div
push
test
ja
jmp
mov
lods
in
add
das
mov
jnp
add
jno
cmc
jae
in
rol
adc
imul
inc
lock
xor
(bad)
adc
cmp
mov
out
add
vpcmpeqb
fiadd
add
scas
add
mov
sar
fist
addr16
scas
or
pop
push
popf
addr16
inc
xor
outs
int3
stc
mov
ret
out
icebp
daa
mov
rcl
ja
addr16
retf
shl
jae
mov
loopne
loope
popa
call
dec
mov
sub
push
std
ins
aam
pop
xlat
into
jns
(bad)
daa
and
push
jmp
add
xor
push
popf
addr16
test
leave
out
xchg
not
and
mov
ret
enter
pop
out
jg
arpl
inc
dec
or
jns
clc
push
es
call
les
mov
push
mov
jecxz
aad
sbb
push
or
lea
arpl
call
cs
push
and
xor
add
aaa
add
pop
ins
xlat
ret
pop
xchg
sbb
lods
das
jno
clc
ret
cld
outs
sbb
cld
test
pop
stc
fldcw
sub
out
test
inc
mov
jo
add
into
(bad)
ficom
fnsave
fwait
mov
je
jge
mov
adc
add
int
mov
popa
jo
adc
jle
out
nop
mov
xor
out
clc
into
mov
nop
into
aam
loop
pop
mov
aad
daa
or
push
xchg
or
out
xchg
ins
cmp
cli
int
hlt
(bad)
adc
mov
inc
jne
pusha
call
push
cdq
fisub
repnz
ja
jno
cmp
and
sbb
or
inc
(bad)
movs
cmp
or
dec
or
jle
es
lea
cli
aas
test
mov
dec
pusha
outs
inc
data16
inc
(bad)
jno
pusha
outs
mov
xchg
mov
push
lock
mov
push
imul
call
ret
jb
cmp
push
cwde
lods
shl
push
push
jbe
cmp
cli
mov
clc
sbb
cmp
repnz
test
xor
int3
sub
pop
adc
mov
jle
scas
pop
push
rol
in
loopne
jb
push
xchg
adc
adc
clc
fcos
push
and
scas
int
adc
outs
rcr
inc
mov
fst
ror
hlt
pop
(bad)
cmp
call
scas
xor
cmps
lods
mov
and
leave
lods
xlat
lea
in
sbb
sub
cmc
mov
neg
test
outs
retf
cmp
push
(bad)
inc
inc
into
jp
mov
cmps
or
je
jbe
js
idiv
lods
leave
push
popa
adc
and
mov
jbe
imul
adc
imul
cmps
or
push
sbb
xlat
cli
sub
inc
scas
nop
out
dec
jmp
lahf
lods
push
jno
loop
inc
sbb
scas
ins
sti
mov
scas
pop
inc
mov
jo
and
or
mov
or
inc
leave
popa
ins
ins
cmps
jns
repz
push
push
in
test
sub
jb
cs
fistp
dec
popf
icebp
xlat
popf
js
out
cmps
(bad)
mov
jne
ins
inc
(bad)
ss
xor
inc
jg
retf
inc
and
outs
dec
js
xor
cmps
daa
retf
jb
repnz
jp
xor
movs
xlat
sbb
adc
out
add
aas
inc
xchg
xchg
push
popa
movs
or
or
inc
cmps
(bad)
fist
mov
frstor
pop
loop
fiadd
jle
mov
cmc
push
mov
xor
leave
cmc
(bad)
stc
dec
xor
(bad)
push
xchg
cs
aam
and
cmp
fcmovu
enter
std
fadd
jg
sbb
adc
sbb
pop
cmps
jbe
push
hlt
retf
(bad)
cmp
sub
and
fbstp
cmp
das
cmps
(bad)
cmps
adc
retf
es
mov
dec
adc
cmp
lock
xor
jge
pop
mov
retf
mov
or
xor
stc
and
xchg
xchg
sub
(bad)
inc
jl
scas
cmp
mov
sub
aam
leave
pusha
add
ins
cmps
xchg
shl
(bad)
pop
fadd
nop
mov
imul
test
inc
pop
push
adc
bound
and
sar
sbb
ret
setle
xchg
in
jle
and
js
sbb
mov
adc
pop
cmp
arpl
mov
lods
adc
and
xchg
mov
push
dec
test
fmul
pop
in
bound
(bad)
shl
movs
jl
sbb
int3
cmc
cmp
dec
xchg
or
sbb
leave
sar
stc
add
loopne
pop
xchg
and
(bad)
sbb
shr
ror
pusha
(bad)
jae
shl
inc
mov
pop
rcr
cdq
bound
aad
loopne
shr
inc
mov
fcomp
xchg
dec
hlt
sbb
gs
(bad)
and
fst
les
xor
cs
xchg
shr
push
lods
mov
push
and
xor
mov
dec
out
mov
es
mov
pushf
mov
jmp
push
sub
push
mov
js
neg
mov
pop
(bad)
out
mov
jnp
movs
mov
scas
cmps
mov
sbb
xchg
jmp
mov
std
mov
mov
test
out
test
dec
pop
add
pop
arpl
lds
mov
int
adc
adc
js
loop
lods
xchg
in
in
dec
popf
lods
ret
adc
mov
(bad)
sub
das
pop
push
clc
aam
movs
xor
mov
jl
push
pop
cmc
and
retf
repz
js
sbb
aam
ficomp
pop
dec
inc
lods
popf
movs
adc
in
pushf
jne
jne
cmp
lock
test
ret
add
pop
aad
shr
shl
inc
inc
rcl
aam
adc
and
jmp
lea
call
gs
mov
call
push
inc
loopne
scas
add
jnp
mov
xor
and
jle
and
cwde
test
xor
retf
push
and
popa
sahf
in
cs
nop
(bad)
in
add
xor
movs
inc
cmp
mov
leave
les
bound
scas
sub
inc
push
pavgb
rcr
push
sbb
fmul
cmp
mov
fwait
cmp
pop
adc
sub
lea
mov
jno
ret
imul
mov
sbb
xlat
arpl
pusha
inc
loop
cmps
inc
and
sub
mov
mov
xchg
jecxz
mov
(bad)
xchg
pop
or
movs
imul
clc
push
xor
mov
push
mov
jp
and
add
xchg
mov
mov
mov
adc
sbb
pop
outs
rcl
aas
sbb
adc
adc
mov
jno
xchg
imul
mov
mov
into
test
stc
out
pop
outs
push
loop
es
repnz
jp
fdiv
xlat
cmp
xchg
lock
cmps
mov
xchg
ror
(bad)
retf
sub
mov
dec
test
mov
aaa
fisttp
sub
int3
or
add
sbb
out
push
and
ss
popa
jge
(bad)
cwde
fldcw
hlt
push
xchg
test
push
mov
mov
ins
mov
loope
dec
add
adc
jmp
mov
out
push
leave
nop
repnz
sahf
dec
mov
sbb
fdivr
cmp
aas
xlat
mov
rcl
jmp
dec
xchg
arpl
es
into
sub
inc
sbb
cmc
jecxz
mov
jno
pop
sub
push
inc
cli
jl
int
or
loope
mov
xchg
cmps
pop
aam
aas
stc
push
jl
adc
movs
cmp
xchg
fs
xchg
mov
push
mov
loop
ja
xchg
out
cmp
popa
nop
xchg
pop
and
sahf
mov
jbe
jnp
mov
adc
outs
mov
sbb
out
rcr
mov
popf
xlat
jne
add
out
ja
inc
int
mov
inc
stos
(bad)
mov
cld
repnz
mov
std
loop
dec
mov
or
push
ret
sbb
mov
enter
arpl
loope
popa
push
loope
in
test
sub
push
scas
mov
xchg
mov
jno
inc
test
cdq
pushf
dec
and
or
sbb
ret
loop
lock
mov
xor
lods
mov
sub
sbb
hlt
retf
stos
leave
xor
push
sub
cli
out
scas
ins
mov
test
je
mov
xchg
mov
mov
fiadd
pusha
les
jmp
jb
test
fisttp
xchg
shr
inc
in
adc
or
cmp
int
push
cmc
push
mov
xor
bound
sbb
sti
je
test
inc
(bad)
sub
pop
cmps
ret
cmps
shl
add
mov
jmp
pop
jl
xchg
div
popa
cli
lds
clc
push
adc
popf
ror
inc
int3
dec
adc
cmp
add
call
sub
sub
xchg
mov
push
xor
mov
and
mov
jg
sub
xor
pop
call
popa
lea
mov
mov
dec
add
inc
fdiv
sbb
fiadd
jae
in
out
pop
daa
call
(bad)
inc
sub
add
movs
in
popf
dec
jb
add
adc
into
in
loope
sar
rol
outs
sbb
addr16
and
mov
add
inc
or
lds
jmp
jnp
aam
mov
pop
mov
clc
(bad)
out
bound
pop
rcl
ins
cmc
ja
jl
jae
add
pop
lods
out
inc
call
pop
mov
xor
pop
mov
or
cdq
jns
ror
aas
jmp
dec
es
fisttp
mov
push
inc
shl
pop
pushf
adc
cld
lods
mov
push
mov
xlat
shl
lea
and
rcr
mov
das
pop
(bad)
cmp
(bad)
imul
mov
mov
mov
retf
test
out
mov
sub
add
pop
mov
nop
mov
adc
int3
repnz
daa
dec
adc
fs
xor
mov
dec
dec
ror
in
in
mov
out
lds
mov
or
dec
xor
rcr
sub
dec
clc
stos
push
lods
mov
pop
ror
mov
sub
shl
inc
pushf
out
sbb
rcr
sbb
in
daa
test
dec
cmp
test
retf
scas
inc
(bad)
aam
cmp
dec
or
and
mov
clc
sub
lods
rol
ret
repnz
repnz
cmp
mov
dec
xor
cmps
mov
xor
mov
pop
imul
dec
aaa
fidivr
dec
std
inc
popf
jle
and
icebp
push
dec
sti
jecxz
(bad)
fcomp
mov
add
cli
mov
push
adc
add
ret
xor
push
in
cmp
test
das
sbb
loop
loopne
bts
ffree
xor
(bad)
out
mov
ror
sbb
xchg
xchg
xchg
mov
xchg
jne
pushw
clc
stc
push
inc
cmc
dec
xor
stos
loopne
sub
neg
shr
xor
sbb
(bad)
cli
rol
stos
xor
stos
jmp
mov
sti
test
push
jae
leave
test
fstp
jnp
sar
pop
fcom
les
xchg
sbb
call
sbb
daa
(bad)
fimul
cmp
or
inc
ret
lds
ret
mov
cld
call
rol
popa
xchg
stos
mov
mov
sbb
adc
ja
jl
mov
inc
movs
xor
daa
out
test
ins
int3
iret
pop
js
aam
cmp
mov
call
sub
repz
sbb
fmul
or
jp
aam
xor
inc
xchg
pop
icebp
enter
in
push
dec
inc
mov
and
jmp
addr16
mov
inc
mov
sub
or
aaa
jecxz
shl
iret
pop
fst
not
cld
jecxz
scas
jmp
dec
mov
cmp
bound
movs
push
mov
mov
in
test
sbb
push
pushf
shl
jle
into
pop
xchg
ss
out
jmp
test
nop
cwde
and
cdq
inc
aad
jno
pop
nop
pop
add
xchg
inc
(bad)
mov
xor
int
stc
leave
fdiv
sbb
outs
mov
mov
imul
cmps
test
and
and
popa
inc
mov
dec
adc
sub
mov
pushf
loop
pop
adc
add
fdivp
push
xchg
mov
mov
int
std
xchg
pop
push
mov
pop
add
popa
cmp
dec
adc
xchg
mov
cmc
popf
fnstcw
jg
or
pusha
cmp
sbb
cmp
or
jbe
mov
repnz
dec
ja
enter
fcom
div
stc
xor
jl
pushf
push
scas
xlat
iret
js
ins
aam
loop
ret
(bad)
stos
sbb
dec
mov
jecxz
cmps
add
pop
xchg
mov
hlt
cli
scas
adc
or
int
push
scas
je
aas
add
call
aas
sbb
and
push
add
fld
int3
(bad)
mov
push
fs
push
xor
push
mov
out
test
stos
repnz
mov
daa
fs
mul
sahf
pop
sar
ins
or
dec
xchg
push
jg
mov
dec
pusha
jg
adc
mov
icebp
xlat
or
mov
cs
xchg
fwait
stos
cmp
ins
inc
data16
xor
cld
inc
(bad)
mov
mov
(bad)
xchg
inc
cmp
mov
add
inc
fdivr
add
fbstp
ins
out
inc
mov
ror
adc
sbb
push
lahf
push
sub
cs
dec
xchg
push
into
sub
dec
adc
dec
mov
or
sti
mov
adc
cmp
sub
adc
pushf
dec
test
jle
inc
mov
clc
inc
in
test
mov
dec
jns
push
fld
jb
or
push
mov
repz
into
dec
out
jmp
mov
jae
jge
std
fdivr
mov
adc
aam
xor
mov
icebp
mov
lods
fisub
push
cmp
and
test
inc
mov
pop
and
jl
(bad)
iret
movs
not
push
stos
setns
cdq
or
sub
xor
or
dec
push
jbe
aad
dec
xor
dec
or
add
xor
std
fcomp
dec
jmp
add
xor
stos
iret
mov
sahf
lds
xchg
lods
sbb
and
std
pop
dec
fdivrp
and
sub
pop
lds
adc
cmc
push
jae
mov
out
cmp
cli
repz
mov
and
cs
jns
iret
lea
nop
dec
lods
iret
shr
dec
xchg
fdivrp
popf
shl
fstp
mov
out
adc
cmps
sub
or
and
pop
loop
adc
mov
mov
shr
ret
xor
and
jl
or
arpl
shl
addr16
add
jl
idiv
or
sbb
push
mov
add
add
mov
imul
adc
mov
jp
mov
add
mov
xor
jl
mov
adc
push
push
test
(bad)
mov
scas
sbb
and
in
inc
in
inc
call
cmc
pop
(bad)
mov
or
xchg
mov
inc
stos
dec
std
pushf
ror
dec
scas
mov
mov
loopne
popf
jbe
(bad)
sti
mov
push
call
icebp
or
mov
mov
jno
mov
mov
xchg
and
retf
jbe
dec
or
rcr
hlt
bnd
xor
aam
sbb
pop
add
add
xor
mov
xchg
mov
(bad)
ffreep
loope
pop
add
gs
push
ins
mov
add
inc
or
retf
cmps
dec
add
xor
rcr
adc
jo
stos
scas
dec
fist
mov
pop
shl
jle
and
rol
mov
push
and
rcl
push
push
jbe
in
xchg
cmp
loop
cld
xlat
inc
(bad)
in
pop
and
mov
dec
pop
jle
test
ret
sbb
hlt
cmps
jg
shr
nop
cmp
or
fist
mov
sbb
rcl
jle
popa
mov
sahf
icebp
inc
scas
popa
inc
xchg
retf
jbe
add
mov
jb
bound
xor
addr16
xor
and
xor
jecxz
nop
dec
mov
sub
jnp
js
add
cmp
and
mov
mov
test
push
data16
add
or
mov
ret
sub
cdq
xchg
mov
(bad)
adc
mov
mov
ds
pop
or
call
jno
cmp
repnz
cmp
repz
sbb
cmp
sub
or
(bad)
pop
inc
das
lds
ds
mov
mov
cs
push
push
push
mov
jecxz
sahf
sub
stc
ret
xchg
movs
(bad)
adc
jg
cmc
xor
(bad)
movs
call
pop
ins
je
int
pop
pop
xor
call
out
out
xchg
nop
aam
xchg
cmp
or
jge
jns
mov
adc
cmc
test
int
jne
mov
(bad)
adc
inc
popf
jmp
arpl
ins
call
lea
adc
es
jge
push
adc
and
scas
inc
in
into
pop
fsub
clc
cmp
dec
ds
mov
sbb
in
dec
lods
or
enter
sbb
popa
imul
jne
cmp
mov
dec
fdiv
inc
bound
mov
sub
icebp
(bad)
cs
mov
loope
lds
mov
nop
fnstenv
cli
shl
or
scas
fimul
push
adc
cdq
div
call
out
sub
pop
and
xchg
hlt
(bad)
mov
sub
out
xor
movs
pop
inc
mov
xor
dec
bound
dec
sub
icebp
mov
cmps
xor
fimul
cmp
sar
mov
addr16
mov
mov
ret
push
cwde
loopne
xor
sar
add
ss
scas
mov
jmp
mov
in
pop
sbb
add
pop
xlat
ucomiss
in
sub
retf
xchg
adc
retf
xchg
jbe
pop
mov
sbb
(bad)
inc
scas
ja
es
stc
sbb
arpl
icebp
fist
pop
pop
test
lea
test
inc
jmp
clc
(bad)
int3
ja
and
clc
mov
cli
movs
ror
dec
data16
xlat
or
add
jmp
bound
shr
fidiv
das
cmps
(bad)
bound
iret
ins
scas
test
hlt
pop
mov
jns
loop
cs
or
cmp
in
jmp
and
test
fisub
inc
shl
mov
push
pop
fild
in
mov
pop
je
das
mul
jmp
lahf
mov
push
popa
cdq
sub
jge
jge
lods
cdq
sar
mov
push
mov
clc
sub
pop
jmp
pop
push
adc
or
sahf
jle
xchg
pusha
ret
xor
or
sub
fmul
lods
ja
jae
pop
jnp
cmps
lahf
out
push
or
rcr
std
jmp
mov
leave
push
mov
xchg
sbb
xchg
mov
xor
in
lea
cmc
out
cdq
(bad)
pop
cmp
sbb
push
mov
jo
pop
xchg
rcl
mov
ficom
mov
movs
xor
repnz
mov
sahf
aad
or
sbb
or
ret
mov
lods
add
je
and
aas
mov
loope
add
and
rcr
movs
mov
sar
shl
(bad)
jmp
lahf
push
dec
ja
add
fstp
add
(bad)
jmp
ins
and
rcl
(bad)
neg
jl
pop
ror
pop
jmp
sub
retf
mov
test
cmps
push
cmp
adc
mov
addr16
ja
push
aam
jb
push
mov
(bad)
push
fmul
jae
aad
stos
sub
repz
add
push
jo
mov
xor
mov
iret
daa
fstp
jbe
fimul
cmp
mov
fs
ds
sub
es
mov
adc
(bad)
ja
call
loop
addr16
jae
das
xchg
fs
fisub
mov
leave
dec
lea
mov
fnsave
mov
sub
push
sub
jno
add
inc
mov
dec
iret
jae
pop
scas
fist
mov
cld
push
ins
cmps
mov
js
inc
rcr
xchg
xchg
je
ficom
jmp
scas
or
je
ror
inc
and
sbb
cdq
adc
mov
pushf
js
ins
sub
or
mov
ja
xor
xor
mov
dec
push
movs
in
popf
and
jo
fsubr
xor
out
jns
loopne
inc
jmp
mov
cmps
mov
and
pop
mov
int
ret
push
test
push
pop
stos
aas
test
xor
int3
cmp
mov
out
adc
fldenv
push
jmp
idiv
je
pusha
ror
lahf
or
sbb
test
add
sub
or
(bad)
mov
inc
sar
aaa
jbe
ret
or
xor
bound
cli
sbb
push
test
xchg
and
test
mov
mov
lea
push
ins
stc
jb
dec
out
and
pop
and
loopne
dec
adc
cdq
loope
and
sub
int
sbb
jne
jb
inc
ins
daa
cwde
fadd
xor
repnz
add
neg
outs
ret
sbb
add
xchg
leave
pop
outs
jmp
cmp
dec
retf
js
sub
push
rcr
sub
sbb
add
mov
ret
retf
hlt
mov
aam
jae
mov
jg
sub
ins
push
fwait
and
mov
xor
jg
stos
dec
aas
ja
mov
(bad)
dec
gs
leave
loop
nop
cmp
jns
cmp
cmp
and
xor
and
fwait
loop
mov
xchg
test
xor
retf
and
fld
test
jmp
sbb
jne
mov
dec
xchg
mov
popa
test
push
jmp
dec
xchg
retf
es
out
inc
shl
cwde
xor
fs
mov
ins
ja
es
aaa
int3
add
test
push
cmp
imul
mov
xchg
or
xchg
lods
call
adc
ret
push
nop
ds
cmp
sar
sbb
adc
mov
outs
jb
mov
xchg
or
jnp
ds
adc
xchg
jmp
sub
ror
cmp
xor
mov
pop
(bad)
mov
hlt
adc
imul
and
push
iret
xchg
inc
(bad)
ficomp
jb
inc
nop
xchg
mov
or
mov
(bad)
mov
mov
xchg
add
push
push
inc
push
leave
imul
or
std
mov
cs
rcl
push
sub
jno
mov
cmp
jo
and
jmp
mov
js
mov
dec
sub
aam
or
xchg
enter
jmp
cli
pop
enter
scas
stos
imul
iret
call
je
or
mov
data16
retf
pop
lds
sti
dec
rep
dec
int
out
jmp
dec
mov
mov
rcl
hlt
fld
and
inc
fiadd
sbb
cmp
loope
ror
xchg
int
mov
repz
(bad)
push
(bad)
push
pop
leave
and
(bad)
cmps
mov
push
in
adc
pushf
pop
mov
rcr
mov
xchg
(bad)
cwde
stos
cdq
scas
xchg
(bad)
mov
xchg
sbb
aad
add
xchg
rcr
sub
int
daa
in
mov
mov
xchg
cmps
rol
jmp
les
(bad)
push
pop
std
adc
fldenv
push
fisub
pop
dec
and
retf
sub
jg
dec
sti
push
cmp
push
mov
fwait
mov
in
adc
push
mov
push
lds
push
das
xor
dec
inc
ror
mov
retf
cs
fcomip
adc
mov
dec
pop
fxch
xchg
fild
push
pop
lahf
xchg
cmp
mov
lea
push
and
hlt
inc
lea
mov
jmp
sub
cmp
xor
in
add
push
out
cmp
enter
mov
repnz
retf
adc
push
mov
xchg
dec
pop
pop
movs
inc
cmps
mov
out
dec
(bad)
dec
call
pop
hlt
dec
xchg
mov
pop
mov
in
or
ret
mov
inc
pop
pop
xchg
mov
outs
aaa
mov
ss
outs
cli
stos
lahf
pop
adc
pop
(bad)
popa
add
popa
inc
xchg
test
push
iret
xchg
ds
call
or
ja
outs
ss
xchg
out
inc
xchg
push
nop
push
pop
popf
cdq
sahf
cs
retf
adc
jg
je
lds
mov
jnp
add
call
(bad)
cmp
es
cmp
xchg
lods
lock
inc
(bad)
stc
movs
push
fwait
jecxz
pop
(bad)
cmp
imul
xor
cmp
daa
mov
ins
sbb
and
pop
xor
pop
dec
out
cld
imul
dec
push
psubsw
mov
out
push
(bad)
mov
dec
rol
pop
dec
mov
xchg
push
outs
jg
ins
cmp
in
jae
ret
jmp
adc
cmp
sbb
xor
shr
test
sar
mov
add
fs
daa
hlt
xchg
adc
jp
jg
and
pop
push
call
loop
(bad)
neg
js
sub
cmc
xor
sbb
xchg
ret
cmp
jbe
xlat
sub
out
cli
mov
push
jmp
imul
and
sub
repnz
(bad)
fwait
stos
push
mov
imul
and
les
sbb
dec
ja
sbb
jmp
lahf
dec
pushf
inc
cmp
inc
test
cmovae
jle
mov
mov
pop
and
fdivr
push
cdq
fstp
test
and
mov
mov
les
rol
out
mov
ja
or
pop
cmps
dec
loop
jmp
push
adc
sub
or
inc
pop
adc
xor
cmp
call
sub
inc
cmp
pop
scas
cmp
lods
nop
sbb
mov
mov
sub
mov
stos
mov
mov
mov
das
mov
jl
push
mov
lods
add
push
or
jp
out
outs
xor
xor
stc
fldlg2
pop
xchg
push
movs
imul
jbe
shr
ds
push
loope
call
jp
add
pop
aad
das
leave
pop
jl
jbe
pop
dec
data16
adc
pop
adc
pop
jnp
mov
push
test
mov
add
sbb
sahf
in
add
jg
pop
pushf
adc
movs
dec
rcr
ret
adc
imul
cmp
and
adc
arpl
sahf
push
movs
add
mov
and
jne
pushf
adc
pusha
dec
mov
mov
(bad)
xor
aaa
mov
(bad)
push
mov
neg
das
ins
cmps
xchg
push
push
je
adc
sub
outs
or
inc
rcr
xor
and
cmp
movs
loopne
or
sbb
sub
jb
xlat
mov
add
les
(bad)
mov
xchg
iret
sub
and
retf
out
mov
jnp
in
sbb
push
shr
pop
add
ret
push
pop
(bad)
sar
mov
test
and
pop
jge
fnsave
jg
sbb
scas
out
add
cs
mov
imul
popf
mov
sub
xor
mov
add
push
mov
xlat
xchg
and
pop
(bad)
fistp
imul
xlat
cdq
adc
scas
pushf
mov
cmp
cdq
pop
pop
mov
ds
mov
inc
cmps
jbe
pop
mov
ret
imul
push
(bad)
cmc
loop
jge
inc
movs
(bad)
shr
jmp
mov
jecxz
cmps
(bad)
lock
mov
cmps
mov
mov
out
scas
mov
jno
sub
jmp
sbb
aaa
lods
call
pop
mov
mov
aad
inc
je
adc
xchg
sbb
inc
mov
pop
ret
pushf
lahf
add
cmps
mov
jae
cmps
push
push
inc
ins
or
or
loopne
xor
imul
ins
mov
fstp
push
cmps
test
jp
mov
add
mov
aaa
push
ja
mov
pop
jg
out
pop
jge
cmp
adc
scas
das
push
das
xchg
push
fsubr
pop
push
call
adc
sub
sbb
jecxz
es
out
out
push
or
jmp
cmp
ret
pop
test
lock
mov
or
pop
enter
mov
jle
xchg
xchg
leave
popa
in
and
pop
mov
fmul
adc
fmul
or
clc
jae
lods
xlat
sbb
and
fnstsw
add
jp
mov
sbb
loopne
dec
xchg
sbb
push
or
(bad)
cmp
xor
xchg
jl
mov
ds
ror
sbb
cmps
inc
cld
aam
xchg
cmp
sbb
repz
int3
mov
dec
std
push
or
cwde
stc
inc
dec
and
repz
test
add
mov
mov
xchg
inc
(bad)
pminub
pop
jne
into
sub
ins
ja
sub
movs
movs
mov
int
js
jmp
push
lods
cmp
fldenv
test
iret
jg
das
push
mov
aad
shl
mov
add
les
push
cmps
cmp
stos
ins
mov
shr
fnstsw
imul
jmp
jp
fwait
jge
sbb
xchg
outs
hlt
push
sar
adc
inc
mov
stos
(bad)
hlt
mov
es
jns
in
daa
xor
cmps
xchg
pusha
push
pushf
imul
loop
jg
add
xlat
and
mov
mov
mov
shl
jecxz
in
pusha
clc
dec
jg
push
std
ja
sub
into
(bad)
out
ins
imul
out
(bad)
call
stos
(bad)
mov
push
adc
into
lods
pop
inc
xsaveopt
push
rcl
mov
mov
cmp
dec
pop
xchg
pusha
mov
dec
(bad)
test
das
pop
jecxz
mov
out
call
inc
fistp
jbe
sub
and
push
jae
repnz
js
pop
lahf
and
inc
and
popf
pop
out
cmp
(bad)
cmp
ficomp
jb
test
add
push
pop
outs
bound
jmp
mov
sti
adc
mov
sti
or
rcl
and
jl
jbe
stos
loop
in
mov
rol
xchg
ficomp
inc
xchg
into
ret
int3
inc
arpl
call
idiv
jo
sub
adc
jno
jg
mov
mov
test
mov
add
(bad)
int3
mov
imul
xchg
sbb
outs
in
je
jbe
ja
push
inc
push
icebp
cmp
jmp
je
sbb
push
xor
(bad)
fisttp
pop
js
xchg
mov
xchg
fiadd
loop
inc
dec
cs
mov
pop
call
ins
xor
pop
in
inc
inc
stos
jmp
mov
daa
call
push
pusha
mov
mov
mov
(bad)
addr16
mov
cmp
pop
(bad)
ret
xchg
cmps
mov
loope
retf
outs
dec
adc
mov
idiv
lods
pushf
sub
jbe
jmp
(bad)
cld
mov
or
in
inc
cmps
sbb
or
imul
jnp
out
(bad)
cmps
push
sbb
pop
lock
scas
stos
jl
sub
mov
sbb
add
into
mul
sbb
mov
push
aaa
scas
pop
xchg
mov
lods
adc
push
es
cld
mov
and
and
pop
lods
bsf
cmp
add
adc
(bad)
test
adc
arpl
int
jle
(bad)
cmp
cli
sbb
or
cmc
xchg
mov
or
call
push
daa
push
inc
jp
pop
movs
dec
stos
and
cmps
push
stc
rcl
xor
shl
mov
inc
sbb
pop
jb
lock
mov
mov
outs
fld
sbb
mov
fisttp
test
sub
rol
mov
into
mov
or
js
mov
fidiv
icebp
push
in
xchg
int
scas
shl
movs
inc
xchg
lods
std
inc
jbe
aas
xlat
jnp
lock
retf
cmps
sbb
dec
pop
jp
pop
imul
pinsrw
in
mov
xlat
mov
neg
rcl
popa
cmp
add
popf
lds
pop
or
imul
addr16
xchg
and
sbb
test
mov
pop
daa
and
stc
jns
retf
cmps
xlat
outs
fnstenv
xchg
dec
push
jb
(bad)
pop
(bad)
mov
mov
ins
scas
sub
sbb
sub
mov
and
into
icebp
fwait
push
lods
xor
pop
lods
cmps
push
stc
popa
aas
mov
ds
add
xor
mov
add
stos
mov
(bad)
cli
popf
icebp
gs
popf
fs
mov
(bad)
popf
inc
jbe
jne
movs
iret
in
les
pop
cmp
adc
and
cwde
jl
jmp
call
sub
adc
ss
(bad)
adc
xlat
aad
xlat
adc
push
cmc
inc
mov
fcmovnu
int3
(bad)
mov
xchg
ja
out
cld
pop
mov
dec
ins
inc
aas
and
xor
aam
push
fcomp
ins
xchg
movs
rol
jbe
or
mov
imul
iret
jae
mov
sub
aam
sub
jle
leave
inc
xor
push
mov
mov
dec
mov
lea
push
pop
dec
xchg
shl
call
in
repnz
in
mov
pop
and
pop
sbb
sbb
fwait
inc
test
stos
dec
jmp
retf
inc
cmp
pop
leave
sub
xor
sti
adc
dec
shr
and
ror
out
sti
lahf
test
retf
pushf
or
xchg
imul
mov
ja
adc
sbb
sub
xor
test
fst
xchg
mov
or
dec
pop
(bad)
mov
jp
dec
push
sbb
xor
dec
mov
or
add
test
popa
nop
inc
aas
outs
jmp
scas
(bad)
jmp
sub
(bad)
jb
ss
or
push
imul
push
dec
ss
mov
les
rol
leave
mov
fldcw
cmc
outs
jae
xor
mov
inc
push
call
dec
ins
adc
out
jmp
push
rcr
sahf
jae
sbb
sbb
pop
pop
ss
mov
sti
imul
imul
dec
push
mov
pop
test
ds
leave
dec
repz
mov
jmp
inc
xor
shl
ss
rol
pop
sar
jo
mov
fcmovnbe
stos
mov
test
jb
aas
int3
enter
xchg
push
leave
pop
push
sbb
fadd
addr16
sti
and
dec
adc
iret
xchg
les
add
clc
cmp
push
aad
outs
xchg
xlat
js
cmp
imul
fmul
sti
mov
lods
xlat
inc
enter
push
icebp
adc
cmp
mov
lahf
popf
mov
out
cld
sbb
mov
out
push
movs
and
dec
sub
push
repnz
add
pminub
sbb
add
add
push
fs
dec
jmp
jg
ror
inc
dec
mov
push
add
or
js
(bad)
push
inc
pusha
xchg
mov
pop
inc
sbb
imul
mov
ret
cmc
pop
jae
aaa
add
cmp
add
loope
jg
mov
mov
cmp
aas
sbb
mov
push
out
test
fcomp
dec
mov
pop
or
call
leave
ja
mov
mov
lahf
ret
adc
jb
sbb
pop
gs
hlt
test
pop
mov
jno
inc
addr16
push
ss
inc
mov
and
dec
adc
in
adc
sub
inc
add
stos
dec
scas
mov
cmp
xor
xlat
cmp
adc
jb
xor
mov
sub
cmp
icebp
out
(bad)
sbb
mov
pop
jmp
repz
dec
or
call
xchg
hlt
xor
(bad)
cli
adc
xor
and
xchg
lahf
mov
leave
ins
jno
jnp
or
shl
and
aam
cmp
aas
mov
fsub
popa
add
mov
mov
and
icebp
mov
jae
sbb
cmc
loopne
sub
and
jnp
or
lock
mov
cmp
and
movs
mov
daa
xchg
mov
cmc
cmps
lods
mov
test
dec
sbb
out
int3
and
push
ror
mov
push
jge
add
stc
xor
fs
xor
mov
pop
jg
xor
jo
das
xchg
xchg
fistp
or
arpl
mov
in
push
lahf
outs
fisubr
in
cld
aad
daa
mov
int3
pop
cmp
adc
sbb
mov
ficomp
popf
lea
cld
movaps
call
stos
shr
in
fs
mov
aaa
hlt
pusha
jmp
sub
pop
test
add
movs
inc
mov
iret
jmp
cdq
adc
aas
adc
repz
in
out
pop
outs
(bad)
jns
sahf
mov
fimul
adc
push
stos
xor
test
(bad)
push
out
not
shr
aad
mov
imul
popa
and
loope
adc
in
push
pushf
ja
xor
xchg
jb
lds
jbe
add
xor
repz
push
xchg
push
fld
fnsave
mov
dec
aam
push
or
adc
cli
dec
mov
popf
xchg
clc
add
sbb
imul
mov
mov
js
lds
mov
scas
mov
sub
pop
xchg
xchg
adc
mov
cmp
addr16
cdq
mov
cmp
lea
daa
shl
sbb
iret
or
cld
dec
sbb
push
out
call
rcl
mov
add
pushf
lock
popf
out
adc
(bad)
mov
mov
xor
ds
inc
or
hlt
icebp
stos
shl
aas
cmps
in
repz
push
cmp
add
jns
xor
jne
mov
xor
and
or
dec
shl
xchg
adc
call
bound
fsub
fiadd
icebp
ficomp
sbb
cmps
ja
cmp
ins
rol
push
cmps
and
sbb
loope
sbb
popf
pop
jg
cmp
jnp
dec
mov
movs
jno
mov
in
xchg
cwde
add
xchg
fs
cmp
push
or
je
loope
sar
ss
fwait
retf
and
inc
jp
xor
inc
iret
dec
mov
addr16
sahf
data16
pop
dec
rcl
dec
test
sahf
movs
xor
inc
mov
and
and
ret
outs
(bad)
pop
push
das
aad
jecxz
frstor
loopne
jl
pop
test
cmps
push
inc
push
ds
or
dec
pop
or
xchg
shl
je
js
mov
enter
aaa
inc
out
mov
call
cmps
loop
ds
popf
inc
push
mov
lock
push
sub
pop
arpl
call
inc
push
lea
rcr
dec
into
adc
cmp
bound
mov
frstor
test
neg
sub
shl
ret
in
xor
or
int
jnp
ja
sbb
cmp
or
stc
push
div
sahf
sbb
add
sub
out
adc
sub
data16
movs
jecxz
xor
dec
mov
lods
mov
or
cli
ss
out
push
call
dec
stos
cdq
(bad)
sbb
stos
popa
adc
cld
sbb
mov
push
or
jl
pop
outs
add
jbe
xchg
push
ret
mov
jg
mov
pop
mov
js
(bad)
call
push
hlt
sbb
xor
in
push
jae
mov
push
sub
push
cld
mov
sahf
xchg
adc
jnp
add
mov
mov
cmp
mov
xchg
mov
push
mov
adc
fcomp
jne
call
pop
test
inc
ins
pop
push
push
mov
xor
aaa
test
sub
mov
cmps
outs
xchg
cmp
jb
xor
lds
adc
je
cmp
fcmovnbe
dec
push
jecxz
cmp
jbe
cmp
sub
add
std
test
out
adc
clc
pop
add
icebp
xsha256
cmps
adc
sub
mov
test
hlt
xchg
xlat
add
mov
fldenv
xchg
(bad)
pop
jne
and
pop
mov
lock
ins
lds
movs
sar
and
pop
sub
cmps
pop
out
test
adc
dec
push
mov
lods
sub
adc
bound
pop
sub
or
and
bound
pusha
sub
xor
sub
hlt
add
imul
dec
add
push
jo
xchg
enter
(bad)
xor
sbb
xchg
cmp
adc
xchg
and
dec
or
dec
add
add
push
add
out
sbb
jmp
push
outs
cli
mov
adc
jmp
mov
jb
jmp
lods
lods
out
mov
mov
enter
inc
gs
sbb
cdq
xchg
mov
icebp
dec
mov
pop
adc
or
bound
cdq
fiadd
repnz
fwait
sub
pop
mov
mov
fst
xchg
push
pop
xchg
cmps
push
mov
test
mov
pop
mov
xlat
shl
sbb
enter
aad
add
lahf
cmc
xchg
cmps
mov
add
rcl
popa
aaa
ret
push
out
rcl
test
jnp
enter
adc
adc
mov
inc
and
scas
add
imul
(bad)
pop
inc
shl
ins
sahf
(bad)
cmp
call
add
inc
out
or
in
jmp
cld
movs
std
outs
(bad)
test
ins
jno
pop
jo
dec
pop
or
add
pop
add
dec
pop
out
mov
fidiv
mov
rol
mov
mov
jmp
lock
popa
std
cmp
xor
ins
cmp
test
aam
pop
scas
inc
inc
(bad)
data16
xchg
inc
or
call
in
aam
movs
mov
test
push
and
test
nop
addr16
cld
mov
ins
mov
scas
pop
jns
fsubr
in
lods
mov
mov
ficomp
outs
cmp
(bad)
sbb
adc
loop
jmp
mov
js
pop
test
push
movs
pop
mov
sbb
push
sahf
cmp
aad
icebp
adc
leave
lods
mov
mov
test
sub
and
sbb
loopne
test
arpl
mov
stos
and
iret
sbb
jge
and
dec
or
inc
les
sbb
arpl
mov
int
sbb
or
js
je
test
sbb
cld
mov
add
enter
dec
cs
popf
and
push
neg
and
retf
lods
js
sti
sub
scas
sar
mov
imul
ret
sbb
arpl
cmp
jo
out
ins
mov
movs
and
xchg
imul
jnp
test
test
gs
in
sbb
xor
mov
cld
mov
pop
les
icebp
inc
cmps
in
pop
(bad)
mov
dec
fld
(bad)
adc
sbb
adc
out
mov
xor
mov
imul
inc
push
xchg
inc
sub
aam
sti
xchg
jmp
repnz
in
jecxz
jnp
aaa
sahf
pop
dec
cmp
mov
sub
cmp
push
adc
push
inc
jl
lea
add
jecxz
fisubr
sub
jo
xor
push
loopne
dec
test
hlt
dec
out
stos
push
cli
sti
cmc
sbb
sbb
inc
loopne
int
sar
mov
dec
(bad)
iret
push
mov
cmp
or
cs
xchg
iret
xchg
(bad)
add
ret
test
pop
jl
in
pop
pop
loope
shr
dec
cmp
fwait
dec
imul
mov
mov
clc
pusha
mov
hlt
sbb
ss
mov
popa
pop
xlat
iret
arpl
mov
or
ss
dec
sub
xor
pop
push
push
sbb
jnp
inc
dec
ror
nop
aad
rol
loope
nop
not
mov
push
sbb
adc
and
aaa
xchg
int3
dec
push
or
jo
and
add
loope
mov
bswap
das
nop
sbb
sahf
in
cmp
arpl
inc
inc
xor
popf
inc
mul
push
mov
inc
in
retf
sub
out
rcl
or
fwait
pop
cmps
retf
outs
sub
dec
or
pop
xchg
iret
es
test
add
hlt
xchg
in
repnz
dec
int
lods
pop
add
pop
sbb
int
cmp
and
sti
add
stc
iret
mov
add
sub
jbe
jge
push
mov
and
nop
into
inc
ror
pop
cmps
sti
inc
cs
mov
add
xchg
jmp
aam
out
je
mov
lock
or
fcomp
call
outs
xchg
sar
lock
jle
lods
mov
inc
stc
cmp
inc
aas
loop
jp
out
jmp
and
or
or
(bad)
xor
xchg
fsubrp
cmp
push
fsubr
mov
daa
push
push
mov
dec
scas
out
je
out
add
mov
xchg
rcl
jns
in
xlat
in
movs
push
arpl
push
bound
xchg
(bad)
out
pop
mov
repz
int
xor
xor
(bad)
dec
popa
fldcw
iret
nop
fdivr
push
loop
inc
daa
sbb
mov
add
ds
jp
push
jecxz
sub
sbb
xchg
sbb
dec
cs
inc
jmp
loop
std
sbb
int
add
cmp
or
(bad)
mov
ins
mov
xchg
outs
ds
dec
xor
jge
mov
sti
pop
sub
dec
inc
sub
test
out
xor
push
jne
cwde
aad
(bad)
fcmovbe
sub
arpl
pop
test
fidiv
ins
sbb
sbb
fld
int
jmp
(bad)
(bad)
cmp
cli
add
iret
lods
int3
div
(bad)
pop
cmp
nop
mov
rol
shl
jnp
sar
lea
ins
ret
cmp
inc
push
sub
and
lods
in
xchg
loope
xchg
mov
inc
jb
out
in
fsub
rep
push
dec
leave
add
jl
lds
rcl
mov
adc
jecxz
cld
jg
fnsave
pop
mov
(bad)
(bad)
jl
pop
sbb
cmps
pop
push
adc
gs
cmp
test
sub
push
dec
imul
test
inc
jno
sbb
fistp
shl
lahf
cmp
jae
call
mov
imul
arpl
stos
mov
nop
imul
scas
jl
jns
adc
cmp
or
xchg
cmp
inc
mov
push
test
(bad)
aad
inc
push
aad
adc
adc
test
inc
in
(bad)
push
sbb
pop
leave
out
push
pop
mov
mov
cmps
add
cmp
pop
xor
clc
scas
add
ficom
push
push
cmp
inc
bound
jnp
jle
inc
and
mov
not
inc
cmp
adc
or
bound
cmp
or
adc
push
(bad)
jbe
inc
(bad)
fidivr
pop
mov
sbb
loop
adc
icebp
out
(bad)
jno
push
sub
adc
mov
add
stos
or
test
test
not
jecxz
dec
iret
or
xor
add
les
test
mov
(bad)
pusha
outs
mov
es
in
mov
xchg
sar
shl
imul
fsubr
jge
test
rcr
nop
in
or
(bad)
push
imul
xchg
sub
movs
xchg
add
imul
mov
push
mov
jns
lahf
inc
push
push
xlat
mov
push
out
pop
lods
cdq
fsubr
cli
xchg
int3
inc
fstp
pop
mov
out
sahf
jbe
or
into
push
and
cmps
mov
div
popa
inc
cs
cmp
adc
aas
cmp
sbb
adc
xchg
pusha
cmps
and
ror
inc
hlt
sbb
mov
xchg
and
sti
hlt
loope
sub
clc
movs
cmps
xchg
(bad)
xor
cmp
je
retf
xlat
dec
mov
xchg
clc
arpl
(bad)
loop
ret
subps
clc
rcl
in
addr16
add
cld
imul
enter
mov
add
leave
(bad)
jge
xchg
jns
sbb
xor
das
sub
or
add
daa
ret
adc
ins
or
cdq
sub
icebp
pop
mov
or
cmc
sub
daa
add
pop
(bad)
mov
int
xor
jno
xor
sub
dec
pop
stos
sbb
dec
retf
clc
sub
in
pusha
vsqrtss
into
mov
mov
sbb
sar
mov
xor
(bad)
adc
jp
retf
push
int
loope
mov
add
xor
imul
pop
lea
sbb
ins
push
and
and
jne
pop
fisub
push
dec
sbb
(bad)
pop
jb
jg
ficom
fcomp
enter
pop
test
push
and
sbb
movs
(bad)
or
dec
mov
and
popf
imul
jb
les
add
jl
xlat
fsubr
les
adc
mov
and
mov
sbb
mov
inc
jb
loope
ja
jp
cmp
lods
mov
xchg
pop
inc
mov
xor
push
mov
xchg
stos
mov
imul
jo
pop
xor
jecxz
sbb
inc
div
popa
jmp
push
ret
inc
mov
pop
js
fwait
cld
fwait
sbb
and
loopne
jmp
rcr
and
test
and
pop
enter
sub
mov
scas
std
dec
mov
pop
sahf
sub
int3
cmc
mov
mov
test
shr
arpl
ja
loopne
adc
jo
cmp
dec
jge
jmp
jg
clc
xchg
popa
es
mov
sbb
xchg
movs
adc
mov
xor
inc
sub
rcr
and
push
jg
mov
xor
cmps
push
fbstp
stc
rcr
jns
jnp
test
pop
cdq
cdq
pop
les
and
stos
jmp
add
stos
ins
push
sub
push
in
int3
cmc
out
les
mov
retf
pushf
mov
stos
(bad)
adc
scas
sub
jno
sbb
add
jp
and
push
mov
jb
and
mov
fs
imul
push
and
repnz
mov
repz
jno
and
(bad)
arpl
adc
pop
mov
out
(bad)
jmp
inc
dec
lods
cmp
sub
push
add
scas
push
mov
or
mov
shl
mov
xor
add
or
std
cmp
lods
jmp
ins
or
jl
(bad)
mov
out
rcr
repz
data16
lahf
das
outs
das
stc
mov
rcl
lock
or
or
sti
cmps
push
fnstenv
loop
fist
clc
cli
mov
jmp
mov
xor
inc
cmps
adc
mov
xchg
aam
dec
xchg
aad
add
int3
inc
pusha
jbe
into
mov
imul
and
(bad)
fstp
(bad)
out
cdq
push
pop
xchg
sub
jae
mov
fwait
pop
cmp
or
pop
mov
push
jmp
adc
sub
repnz
inc
mov
jb
pop
in
sub
daa
icebp
xchg
fcomi
jge
mov
mov
retf
ins
add
mov
pop
sbb
mov
push
inc
stc
dec
adc
std
sub
adc
ins
shr
je
add
or
loopne
loop
arpl
xchg
push
push
cmp
or
ins
sub
in
imul
icebp
mov
aad
jecxz
sbb
xor
ins
xor
stc
ror
je
push
ud0
or
push
mov
inc
icebp
stc
push
test
mov
cmps
add
imul
pop
js
dec
push
aad
xchg
lods
shl
inc
aaa
out
out
lahf
ja
xor
nop
mov
mov
pusha
push
idiv
lods
xor
fnstsw
pushf
sub
(bad)
push
loopne
data16
add
sub
hlt
iret
hlt
ficom
jp
test
sbb
addr16
cmp
in
mov
mov
bnd
leave
pop
aas
mov
daa
(bad)
sbb
sbb
leave
in
add
fild
std
cmp
loopne
imul
fisttp
rcr
or
mov
fwait
mov
sbb
(bad)
xchg
ds
push
pop
xor
ds
mov
rcl
cwde
mov
lahf
cdq
scas
int
jb
test
sub
in
inc
rcl
and
call
adc
xchg
and
test
mov
and
test
aas
jbe
sub
jmp
jae
pop
cmp
hlt
mov
les
loop
or
push
mov
cmps
inc
push
jg
mov
add
dec
imul
inc
xlat
je
push
nop
mov
xchg
and
into
int3
push
sti
xchg
movs
add
xor
sbb
adc
js
bound
cmp
repnz
push
hlt
fst
cmp
pop
add
push
mov
and
fwait
add
sar
pushf
cmp
jecxz
retf
mov
pop
es
stc
stos
iret
sbb
mov
std
(bad)
cs
cmc
ret
pusha
dec
cli
pusha
inc
int3
imul
je
psadbw
pushf
enter
sub
adc
dec
mov
int
out
sub
dec
lds
xchg
stos
jge
dec
cmc
(bad)
push
fist
in
xchg
jp
add
lea
retf
loope
les
xchg
inc
and
sbb
push
jns
pop
jmp
cwde
cmp
dec
(bad)
ins
cmps
jae
rcl
inc
mov
sbb
dec
test
iret
mov
pusha
aam
or
mov
mov
pusha
stos
xor
xchg
cmp
sub
adc
es
fs
jo
ds
aas
mov
push
and
xlat
mul
mov
lock
repz
sub
jnp
(bad)
(bad)
fld
fidivr
xchg
or
test
push
fistp
js
jo
jmp
xchg
xchg
jl
xor
ret
mov
in
iret
iret
fisttp
inc
es
xor
pop
clc
cmc
push
frstor
xor
into
mov
daa
in
mov
in
cmc
dec
test
mov
into
xor
xchg
xchg
inc
mov
xchg
loop
es
and
xchg
fwait
and
jbe
(bad)
adc
cmpps
xchg
dec
xor
ss
adc
shl
outs
push
lock
push
add
icebp
mov
bound
imul
xor
push
daa
sub
mov
mov
and
repnz
cmp
pop
aam
in
or
dec
jae
loop
xor
imul
xor
mov
inc
pop
lock
xchg
popf
inc
push
push
jne
xor
jae
push
or
mov
mov
sbb
sub
fdivr
xor
mov
js
jl
pusha
dec
popa
jge
adc
add
rcl
mov
sbb
loopne
out
(bad)
outs
pop
xchg
sbb
push
mov
mov
dec
jmp
retf
xchg
test
mov
xchg
out
xlat
pop
push
xlat
std
mov
xchg
cmp
add
stos
cli
ror
push
jle
mov
loop
test
int3
cmp
mov
aad
mov
push
jnp
imul
adc
mov
aad
mov
cmc
push
push
xor
not
(bad)
aas
aam
pop
arpl
push
cmp
xchg
pop
mov
add
setbe
test
mov
jge
mov
(bad)
add
push
es
adc
cmp
jno
mov
mov
loope
cmp
mul
adc
push
nop
test
pop
or
cld
bound
dec
stos
(bad)
fwait
inc
(bad)
xchg
repz
push
out
mov
enter
femms
jmp
lods
push
cmp
cmp
dec
jnp
push
mov
ins
scas
jo
pop
mov
sbb
inc
mov
or
js
or
mov
mov
mov
aad
sbb
loopne
cmp
xlat
into
inc
xor
xor
out
retf
(bad)
jl
enter
lods
jle
sbb
cmps
jb
dec
ja
iret
push
xchg
ins
add
add
dec
outs
jecxz
or
jae
js
adc
xchg
into
xchg
sbb
scas
loopne
xor
ins
test
jmp
push
fst
into
mov
add
mov
loope
retf
cmc
push
scas
sbb
push
lods
stos
push
jb
sbb
repz
adc
or
ja
ficom
dec
jns
and
add
cwde
retf
xchg
mov
cwde
gs
jp
cmp
clc
int3
fcom
xor
jmp
enter
push
mov
clc
inc
and
and
outs
and
jmp
mov
je
movs
push
mov
and
out
inc
pop
fdivr
xor
inc
(bad)
xchg
xchg
mov
mov
ror
push
and
sub
adc
(bad)
add
push
mov
cmp
cld
sub
pop
adc
xchg
pop
sub
pop
rcr
and
jmp
mov
sub
mov
cmp
xchg
pop
sbb
popf
loopne
movs
sbb
sti
aam
mov
mov
xchg
xor
add
xchg
stc
pop
sub
mov
test
pop
dec
push
and
in
sub
jle
cmp
pusha
inc
ret
push
push
imul
xor
and
fnstenv
push
hlt
jle
leave
call
test
inc
dec
xor
xchg
sub
lods
pop
std
aam
lods
or
mov
mov
addr16
inc
adc
(bad)
cmp
pop
mov
sbb
retf
lock
cli
ds
mov
push
cmp
gs
es
lods
jo
adc
sahf
adc
cmp
dec
retf
push
sub
inc
cmp
cmps
and
out
inc
repnz
inc
test
call
leave
fld
enter
cmp
push
(bad)
pop
cmp
mov
dec
sbb
ret
fidivr
mov
call
mov
test
jle
clc
rcl
dec
and
mov
cli
out
or
scas
retf
movs
pop
xchg
dec
inc
jbe
sbb
mov
out
and
sub
fidiv
int3
int
add
add
es
gs
cmp
pop
rcr
inc
sub
aam
movs
into
jno
mov
cmp
in
ftst
fild
xchg
inc
rcl
adc
sar
aam
push
out
sub
and
aam
jmp
stos
xchg
sti
sub
dec
das
inc
call
stc
(bad)
pop
dec
pop
xchg
mov
xor
xor
sub
or
or
imul
mov
ret
push
inc
lds
imul
fist
js
or
sub
adc
or
daa
scas
cmc
push
sbb
jmp
mov
sub
push
or
add
xor
je
pop
test
outs
cli
inc
mov
shl
jmp
es
leave
inc
nop
or
imul
jnp
jg
sbb
mov
cld
out
mov
push
push
je
dec
mov
and
and
add
shl
(bad)
sti
or
sbb
mov
add
(bad)
xchg
mov
inc
inc
mov
in
and
xchg
stos
add
icebp
out
pop
add
outs
aas
and
lea
loop
xchg
jnp
fwait
sub
or
mulps
inc
call
sub
test
jne
fidiv
xchg
xor
adc
and
lods
sbb
mov
pop
ror
push
sar
sbb
test
push
inc
dec
loope
aam
xor
ins
sub
sbb
shr
lock
ja
adc
ret
ret
add
test
test
mov
inc
sbb
mov
sar
jg
div
nop
pop
lods
retf
aam
dec
mov
or
pop
mov
into
mov
(bad)
fimul
jns
leave
xchg
xor
stos
mov
sahf
(bad)
jecxz
test
int3
ds
xor
loope
pop
add
lods
adc
fst
push
aas
arpl
int3
mov
jge
out
push
ss
inc
adc
jmp
sbb
push
mov
push
xor
mov
and
ja
sbb
(bad)
xor
mov
pop
fnstsw
(bad)
xor
inc
cmp
test
out
mov
outs
push
lods
add
stc
push
ja
cwde
adc
mov
pushf
inc
sub
sub
loopne
lods
dec
mov
retf
jmp
mov
push
rol
cdq
ror
pop
fld
and
add
jne
ins
scas
mov
sub
mov
loopne
jb
leave
movs
add
(bad)
jg
mov
fdiv
xor
and
mov
pop
pusha
test
test
xchg
jae
mov
inc
mov
mov
add
mov
nop
dec
sbb
cmp
push
call
lea
lea
mov
test
mov
mov
xor
mov
cld
(bad)
cli
mov
or
mov
adc
dec
xor
and
loop
jmp
xor
pop
pop
dec
cdq
and
inc
lods
xor
and
mov
push
ins
jp
dec
cmps
addr16
jmp
and
ficom
les
rcl
mov
lods
int
inc
fcmovnb
adc
das
not
inc
sbb
push
sub
pop
sbb
mov
mov
mov
shl
lods
inc
dec
retf
shl
imul
cmp
fs
xchg
cmps
js
push
imul
in
push
in
loope
cmp
inc
sahf
and
mov
jg
jae
test
push
mov
mov
das
sbb
cmp
dec
les
or
pusha
scas
mov
jno
in
call
hlt
data16
inc
mov
xchg
test
jbe
pop
dec
sbb
loopne
inc
jo
fisubr
push
and
push
inc
xchg
mov
jp
push
jbe
das
mov
mov
outs
pop
fs
fdivp
pop
add
mov
movs
pop
repnz
adc
ror
sub
dec
xor
mov
das
hlt
sbb
cmp
ja
cmp
movs
scas
jmp
jmp
int3
std
inc
(bad)
(bad)
mov
(bad)
pop
push
jno
outs
push
sbb
pop
jmp
repnz
inc
inc
bound
cwde
inc
xchg
mov
jp
xchg
sbb
adc
loopne
or
psadbw
xlat
adc
ins
pop
out
ret
fistp
or
sar
inc
je
cmc
and
into
pop
icebp
cmp
lods
scas
sub
aaa
loopne
and
mov
sti
in
adc
jb
(bad)
in
fadd
or
hlt
inc
xchg
ins
mov
and
mov
and
push
dec
sub
add
pop
xchg
adc
lods
les
or
mov
jp
out
adc
lahf
push
xor
(bad)
ss
adc
retf
or
pushf
xchg
mov
(bad)
pop
cmp
cs
int3
xchg
xchg
cs
dec
xor
cli
jl
sbb
inc
add
mov
aaa
mov
add
xchg
mov
test
aaa
push
movs
dec
cmp
push
cmp
(bad)
sub
inc
imul
lods
loopne
pop
mov
leave
cmp
mov
pushf
push
ret
xor
ret
push
hlt
data16
mov
or
(bad)
popa
xor
aas
xor
inc
loop
pop
das
(bad)
push
pop
jmp
adc
imul
adc
or
out
jge
inc
mov
(bad)
loop
pop
and
mov
pushf
iret
fst
mov
push
loopne
mov
xor
mov
push
pop
outs
jmp
adc
sub
mov
dec
adc
mov
pop
fistp
or
push
inc
cmps
(bad)
aad
sbb
out
dec
jb
enter
loope
inc
ret
nop
ss
jl
or
sub
sbb
push
retf
push
fsubp
xchg
jb
mov
jmp
and
and
xor
in
aam
adc
mov
mov
pop
icebp
scas
pop
sti
push
mov
mov
or
(bad)
or
ret
push
cmps
jmp
cmp
aad
push
arpl
xchg
scas
cmp
or
lahf
fwait
adc
call
cmp
loop
aaa
retf
call
(bad)
sbb
mov
test
ss
ja
push
mov
stos
push
jmp
inc
mov
imul
in
nop
imul
rcr
push
stos
cmp
in
xor
sbb
or
hlt
call
imul
mov
xchg
mov
cdq
dec
jne
imul
sar
dec
leave
out
popa
xor
inc
sub
push
movs
jp
dec
sbb
jmp
mov
dec
dec
or
sub
push
push
iret
jecxz
jmp
push
mov
in
cmp
or
stc
fisub
jmp
gs
lock
push
gs
out
movs
and
push
xor
shr
retf
inc
scas
pop
add
aas
ins
enter
sub
test
loop
scas
add
adc
adc
mov
(bad)
hlt
sahf
out
stos
and
loope
int
es
in
and
lds
(bad)
mov
fld
xchg
push
mov
push
mov
jbe
mov
sahf
fidiv
dec
loop
(bad)
xchg
adc
rol
xchg
mov
outs
jno
test
push
shl
sbb
or
daa
popa
mov
outs
imul
mov
cwde
xchg
xor
inc
inc
cmp
cmp
jnp
sbb
jo
loope
jbe
mov
out
jbe
movs
and
idiv
arpl
add
cmp
sub
jno
pop
and
push
loop
push
add
sub
push
scas
es
repz
dec
dec
push
sbb
aam
and
mov
adc
cmps
mov
sbb
(bad)
cdq
mov
mov
out
pop
popa
xor
jmp
push
stos
dec
dec
(bad)
leave
or
fsubp
sti
mov
jecxz
fild
dec
test
pop
movs
pushf
xchg
xlat
pop
jmp
(bad)
pusha
xchg
cpuid
rol
pop
mov
lds
inc
xchg
test
lods
int
lods
fnstenv
pop
jge
xor
pop
popa
xchg
push
xor
and
and
ja
in
xchg
iret
mov
jnp
loopne
aam
sar
fimul
jo
repz
cmc
pushf
inc
nop
in
add
push
mov
retf
mov
mov
in
dec
shl
out
gs
mov
push
add
inc
ror
push
stc
add
lods
inc
mov
dec
aas
add
mov
dec
xchg
adc
sub
mov
vpminub
loop
aad
jmp
(bad)
push
jl
std
ret
xchg
push
mov
ss
fwait
je
sti
mov
push
push
out
mov
adc
ficom
ret
lods
popa
inc
ds
rol
aam
pop
mov
aaa
sub
xlat
mov
int3
push
in
sub
pop
int
(bad)
push
(bad)
xlat
cmovo
mov
jg
inc
popf
push
arpl
iret
pusha
adc
jmp
adc
add
adc
nop
push
inc
xor
xchg
sbb
ins
jmp
jno
inc
add
cwde
mov
into
add
cmps
pusha
ja
retf
mov
dec
shl
or
push
inc
and
fwait
cld
pop
ss
mov
popf
mov
fisttp
sbb
out
sub
xchg
bound
sub
(bad)
push
daa
mov
loopne
xor
popf
inc
sar
jno
xchg
xchg
add
add
dec
iret
into
inc
fucomp
mov
push
loopne
cmp
sti
out
(bad)
cdq
xchg
mov
mov
(bad)
sti
mov
jb
sub
jno
int
mov
mov
jecxz
es
sbb
xor
gs
mov
add
cmp
cmp
(bad)
bound
add
mov
and
loope
sbb
std
xchg
pop
scas
adc
cmp
loope
mulps
sub
into
test
std
je
popf
pop
mov
mov
pop
dec
int3
mov
xor
sub
lods
ins
pop
adc
mov
mov
test
(bad)
pusha
into
ins
push
dec
test
xchg
aad
add
fisttp
retf
fldenv
shl
sub
lods
arpl
js
inc
xor
push
pop
pop
dec
cmp
push
inc
dec
jae
jecxz
or
mov
ficom
inc
pop
jae
push
jae
data16
and
inc
adc
dec
dec
sbb
and
xor
imul
xchg
test
loop
ss
mov
and
outs
shl
or
pop
daa
popa
in
dec
into
sub
jl
mov
enter
cli
mov
inc
dec
push
ss
or
pusha
sbb
xor
inc
fucompp
loopne
sub
mov
and
pop
xor
aad
adc
das
sti
daa
adc
(bad)
hlt
test
movs
stos
xor
(bad)
jmp
jge
retf
out
ins
mov
push
and
loop
pop
jg
ins
mov
fs
jp
pop
test
sbb
fsubr
cld
and
stos
cmp
test
adc
xor
lock
inc
in
sar
into
jo
dec
into
int3
aaa
imul
xor
jecxz
in
ret
aam
sahf
outs
icebp
inc
idiv
outs
xor
xchg
cmp
add
xchg
sbb
sahf
jmp
(bad)
ds
and
mov
popf
sbb
fprem1
add
sbb
mov
bound
inc
out
shl
sub
popf
int3
call
ret
xchg
rol
mov
data16
mov
jge
dec
adc
out
js
push
loopne
jg
xor
fcomi
cmps
cdq
jmp
mov
pop
test
es
scas
ss
or
cmp
mul
(bad)
push
xor
pop
jnp
jl
sbb
inc
mov
shld
mov
jg
mov
out
pop
jp
fisubr
add
lods
into
addr16
and
ins
sbb
sbb
lds
dec
hlt
fidivr
push
and
or
jns
std
hlt
cdq
jnp
gs
out
repz
adc
std
push
rcr
hlt
and
sbb
out
push
cwde
mov
pop
adc
sbb
push
pop
pop
or
rol
repz
leave
lods
pop
add
rcr
adc
pop
fwait
repnz
jmp
lds
dec
in
inc
sub
jns
(bad)
dec
fisttp
sahf
(bad)
mov
pusha
xor
les
ins
push
pop
xor
outs
fiadd
jne
leave
sbb
fdivr
ja
arpl
sbb
add
(bad)
imul
sub
fs
stos
pop
in
or
shr
fs
pop
cmp
jmp
fs
adc
inc
cmp
das
mov
int
aaa
mov
retf
mov
adc
push
stos
fdiv
and
jl
xor
push
pop
shr
push
xor
lahf
div
mov
push
jae
pop
cmp
xchg
mov
jmp
mov
sub
scas
cwde
test
sar
fdivp
inc
sbb
jo
popf
pop
add
pushf
ret
hlt
stos
rol
outs
bnd
cmp
int
dec
xor
adc
pop
pop
jae
aam
pop
cwde
mov
pop
leave
sub
fdiv
(bad)
jnp
mov
jl
inc
add
mov
mov
loop
lea
xchg
out
mov
dec
xchg
or
cld
mov
outs
dec
mov
add
cdq
mov
or
xor
fild
sub
fisub
add
xor
in
push
xchg
lods
das
inc
pop
cmp
cmp
cs
push
aas
pop
add
addr16
and
mov
repz
xchg
icebp
fadd
and
es
cmp
sahf
das
jg
and
adc
test
xlat
and
push
inc
test
sahf
mov
push
loop
shr
push
inc
popf
data16
dec
xor
jl
(bad)
pop
gs
bound
xchg
jge
cmp
xor
inc
mov
xor
sub
fwait
xor
mov
mov
retf
fmul
retf
mov
fiadd
add
retf
cmps
loop
iret
mov
pop
rcl
jge
jl
jmp
xchg
xchg
sub
dec
shr
pusha
cdq
jbe
ja
jo
ret
test
fcomp
imul
inc
es
das
pop
ret
sbb
mov
test
call
sbb
cmc
cdq
mov
jnp
adc
in
neg
push
(bad)
push
neg
xor
xor
push
std
push
movs
int3
cdq
les
push
ins
jge
cmc
and
mov
jns
or
fidivr
or
in
in
outs
sbb
aad
sbb
and
and
inc
xor
lock
pop
push
pop
test
inc
js
add
jge
out
jb
fcomp
mov
mov
jnp
retf
xlat
idiv
xor
inc
into
cmp
rol
aaa
xor
xchg
arpl
pushf
inc
fistp
push
ins
lods
xchg
xchg
div
int
and
xchg
mov
pop
push
mov
jnp
ficomp
test
add
test
out
ins
xor
mov
lods
pop
or
cmp
mov
sbb
cmps
in
call
aaa
(bad)
fiadd
mov
in
loopne
iret
bound
(bad)
sti
fs
xchg
in
mov
test
jo
popf
jl
mov
mov
sbb
pop
(bad)
repz
cdq
gs
movs
push
mov
xchg
and
inc
dec
repz
pop
xor
jnp
int3
js
xor
out
gs
mov
hlt
addr16
int
ret
popf
or
pop
xchg
jl
push
mov
ins
addr16
stos
aaa
mov
xchg
jne
xchg
pop
repnz
dec
inc
enter
sbb
outs
inc
xor
and
push
aaa
cmp
std
test
lods
or
das
in
mov
sti
jnp
or
shr
movs
jge
mov
lods
cli
or
(bad)
(bad)
mov
adc
jmp
pop
cmc
xlat
(bad)
push
jns
(bad)
retf
inc
xor
ror
les
mov
or
push
dec
test
inc
pop
mov
push
outs
mov
stos
add
mov
lods
xor
mov
mov
sbb
imul
and
add
cdq
rcl
inc
add
jp
pop
sar
dec
cmp
xlat
push
inc
or
sub
mov
iret
jp
(bad)
les
jle
and
into
test
mov
pusha
nop
aas
bound
sub
in
xchg
or
aam
pop
push
mov
cmps
cmps
retf
cdq
lods
adc
shr
outs
mov
push
aas
ins
inc
call
stos
dec
repnz
adc
and
sbb
mov
push
pop
xchg
jbe
and
dec
cld
push
ror
adc
mov
lods
shrd
push
jae
dec
push
sbb
cdq
out
sub
push
cld
pop
push
test
cmp
jbe
sbb
retf
test
push
jae
test
lods
in
inc
ret
in
xor
push
movs
push
dec
rcr
xor
cli
fst
and
dec
(bad)
fmul
sub
jo
mov
outs
mov
ret
(bad)
jle
adc
div
pop
(bad)
call
clc
mov
das
aas
jo
bound
sar
mov
adc
add
jae
lock
jo
mov
gs
and
jg
push
mov
out
jp
in
ja
shl
dec
shl
repnz
pop
es
imul
fmul
out
xlat
mov
pop
(bad)
retf
add
outs
fnstcw
cwde
pop
cli
out
(bad)
mov
fisub
retf
icebp
lods
fsubr
fs
call
sub
jns
mov
fidivr
inc
sti
sub
test
mov
adc
or
scas
mov
mov
into
aas
cmp
dec
xor
and
movs
fs
xchg
sub
inc
retf
rol
div
xor
fmul
not
in
nop
cmp
jnp
into
mov
out
ins
rep
adc
ins
stos
imul
or
aaa
ret
lds
cmps
movs
popa
dec
rep
mov
jno
das
add
xor
mov
cmps
inc
inc
mov
shl
cld
mov
ja
push
(bad)
retf
mov
adc
mov
cwde
jle
fwait
sahf
dec
mov
int
cmp
test
cdq
add
cmps
retf
sar
fisttp
in
cmp
mov
mov
pop
ins
adc
push
ds
outs
cdq
mov
dec
test
mov
mul
jae
xchg
in
dec
mov
xchg
and
mov
push
sti
retf
cmp
jae
into
fisttp
dec
fcom
mov
push
dec
inc
adc
mov
repz
xor
push
mov
in
inc
jge
jno
jb
mov
retf
inc
outs
xchg
or
xchg
outs
push
das
js
mov
je
call
sahf
in
lds
xchg
pop
ficomp
dec
popf
fisttp
stos
jecxz
xchg
addr16
imul
mov
ror
mov
mov
jmp
xchg
jns
bound
jge
xchg
fistp
ins
cld
sub
pop
xor
fild
nop
std
cmc
mov
ss
adc
std
daa
push
je
mov
stos
sub
jmp
xor
xchg
movs
scas
sub
mov
xchg
dec
ret
popf
outs
mov
jns
jae
les
xor
cmps
adc
retf
xlat
xchg
mov
popf
mov
mov
or
add
pop
dec
cvtdq2ps
xor
xrelease
shr
inc
cmp
sbb
in
sub
sbb
(bad)
loop
mov
sbb
vmovaps
lods
mov
push
stos
push
aaa
adc
jle
movs
jg
xor
and
iret
mov
ja
xor
scas
inc
daa
adc
cmp
ret
ins
dec
enter
outs
(bad)
cmc
(bad)
shl
mov
jae
and
mov
jmp
in
lds
mov
imul
mov
mov
(bad)
mov
data16
xor
stc
ins
mov
arpl
out
imul
jno
arpl
gs
jl
rol
pop
lea
outs
mov
addr16
lock
pop
push
push
fisubr
xor
call
add
jl
push
jge
sub
pop
ret
frstpm(287
push
out
enter
push
sbb
cld
cli
js
repz
or
push
pop
mov
or
jnp
cmp
stos
pop
iret
xchg
pop
stos
std
sbb
xchg
in
mov
shr
test
xor
mov
or
pmaxub
mov
int
test
out
(bad)
rol
movs
shr
icebp
jbe
lahf
jmp
mov
mov
mov
or
rcl
test
push
leave
xor
inc
or
push
icebp
push
test
sbb
out
into
xchg
aad
call
movs
pushf
sub
dec
mov
mov
and
add
fmul
(bad)
fs
mov
mov
enter
cmp
inc
dec
mov
adc
leave
ror
inc
and
xchg
push
test
mov
in
push
jl
stos
pop
gs
(bad)
repnz
or
mov
sti
cdq
shl
add
fwait
popa
jle
and
sahf
mov
outs
ror
icebp
xlat
sbb
popa
push
xchg
dec
cwde
clc
ss
aaa
cmp
fucomi
xchg
ret
mov
pop
or
xchg
clc
cmps
in
nop
jmp
out
movs
cdq
idiv
dec
cmp
scas
pop
cld
retf
push
dec
jecxz
shr
mov
fdivr
ret
int
arpl
mov
cwde
sub
mov
mov
adc
mov
movs
cmp
lods
adc
mov
mov
mov
mov
je
pop
inc
jmp
pop
cwde
cld
(bad)
or
cmc
xchg
addr16
cmps
jecxz
inc
add
push
add
(bad)
in
cmps
cmp
sbb
mov
pop
ja
cmc
data16
cmp
lock
daa
xchg
or
push
xor
repnz
(bad)
pop
mov
inc
jae
fistp
iret
scas
dec
adc
xor
fdiv
jmp
push
jl
test
sub
pop
inc
and
(bad)
std
js
inc
fs
test
xchg
inc
dec
xor
int3
loopne
inc
pushf
(bad)
mov
sbb
add
cmp
mov
lahf
retf
dec
call
mov
ret
mov
push
repz
or
sbb
retf
dec
jl
sbb
pop
sahf
cld
cmp
hlt
dec
imul
retf
inc
sti
fistp
mov
xor
int
rcr
hlt
std
push
cli
inc
mov
mov
test
loope
mov
cmp
stos
xchg
(bad)
jo
cli
scas
or
push
call
xchg
ds
xchg
push
dec
hlt
cdq
and
icebp
cdq
ss
bound
fisttp
call
lods
pop
pop
xor
clc
inc
mov
cmps
mov
add
jae
es
js
outs
adc
test
cmpps
les
repz
and
rcl
(bad)
cmp
pop
mov
cmp
lods
stos
fwait
add
stos
jmp
and
frstor
test
xor
in
jl
call
and
jne
dec
pop
es
fs
movs
push
adc
cmp
sub
pop
mov
loop
xor
xlat
out
out
das
stc
jge
fst
pushf
enter
cmp
in
sbb
add
and
daa
ins
je
jmp
xor
test
cmps
adc
pop
and
adc
cdq
imul
dec
rcr
rcr
and
cmp
movs
ret
pop
gs
retf
sub
shl
cmp
arpl
cwde
icebp
sub
jecxz
jle
or
aad
mov
stos
inc
and
lock
cmps
lock
cmp
imul
sub
aas
lods
mov
add
mov
test
hlt
arpl
arpl
fs
mov
scas
add
xlat
pusha
iret
pop
out
pop
int3
shl
clc
and
pop
leave
lahf
cld
mov
cli
inc
jo
jmp
lea
mov
sub
repz
push
adc
in
rol
dec
(bad)
test
out
adc
neg
mov
and
stc
inc
sub
xchg
or
aaa
repz
jb
mov
xor
mov
sbb
jb
clc
mov
cmp
mov
dec
retf
cmp
add
sub
and
es
daa
jecxz
(bad)
cwde
mov
fdiv
inc
daa
and
ret
sub
pop
and
mov
int
adc
sbb
cmp
add
es
pusha
adc
cmps
fisubr
(bad)
fnstsw
mov
dec
push
mov
or
mov
mov
retf
inc
test
adc
imul
fmul
out
hlt
jb
mov
imul
push
call
cmp
or
mov
imul
scas
cmps
ins
inc
push
sub
jne
lods
xchg
push
xlat
ror
jnp
lock
dec
ins
push
pop
mov
push
in
into
std
aaa
sub
mov
fisttp
mov
sbb
dec
mov
lods
jno
cmps
jb
daa
adc
(bad)
push
pop
repz
retf
sub
mov
ror
mov
aaa
retf
test
adc
xchg
mov
mov
fs
(bad)
loop
ins
rcl
outs
adc
ror
sbb
add
shr
push
xchg
xor
mov
ins
or
shl
adc
int
cmps
jno
cs
or
add
and
jo
jo
push
je
jmp
test
enter
mov
(bad)
mov
out
mov
lahf
ret
jnp
cmps
push
outs
add
cmps
stos
icebp
mov
stos
pop
je
jmp
ret
retf
mov
push
push
retf
aaa
int
jo
lods
pusha
out
ins
pop
cmp
mov
mov
mov
pop
pop
jns
xchg
xor
movs
push
xor
mov
cdq
loope
jle
mov
bnd
jmp
fwait
movs
(bad)
les
adc
cmp
pop
lea
xor
dec
inc
hlt
cdq
loopne
mov
add
fbstp
pop
rol
mov
ins
in
push
sub
movs
in
xchg
sub
fmulp
aaa
jnp
and
or
test
arpl
xor
aad
loope
jmp
push
shl
gs
in
add
inc
sub
(bad)
push
movs
dec
call
hlt
adc
mov
daa
jecxz
pusha
xchg
mov
enter
imul
retf
ja
inc
xlat
add
jle
inc
mov
sub
lds
lea
pop
jo
push
test
jmp
jmp
or
jnp
int3
aaa
(bad)
in
mov
or
sbb
aam
fidivr
dec
call
scas
loop
pop
dec
sbb
cli
jmp
lea
xchg
clc
movs
clc
adc
sub
inc
xchg
cmps
jge
imul
sub
loop
jge
sbb
stc
int3
mov
ins
clc
repnz
or
icebp
dec
jo
sub
jmp
pop
and
jb
push
dec
push
popf
or
mov
cmps
and
bound
jge
sbb
dec
repnz
loope
sar
sbb
jge
aaa
and
ret
in
pop
pop
cmp
xor
out
dec
sub
cmc
jmp
dec
inc
mov
push
sbb
jno
daa
mov
into
sub
xor
sub
pop
mov
sahf
or
(bad)
push
movs
sub
fdivr
xchg
sbb
icebp
clc
int3
pop
push
mov
(bad)
les
(bad)
call
clc
mov
out
(bad)
push
sub
(bad)
or
adc
cmp
sub
addr16
mov
(bad)
fidivr
sub
push
xor
cwde
leave
dec
dec
xchg
pop
adc
dec
fs
lods
and
ret
sbb
popa
cld
jmp
or
scas
add
pop
out
sti
ss
int3
inc
mov
inc
sbb
jg
pop
leave
out
xor
mov
(bad)
outs
mov
imul
add
xchg
add
jmp
es
je
ficom
js
mov
out
mov
loopne
sbb
add
xchg
test
xor
popf
lods
add
inc
cmp
sbb
cmc
std
sar
(bad)
(bad)
jb
(bad)
js
cld
sbb
stos
jle
dec
push
push
inc
ins
(bad)
leave
and
fld
(bad)
out
dec
(bad)
push
(bad)
fild
jne
retf
cli
and
jp
call
jae
mov
ds
data16
add
in
sar
nop
jl
xchg
clzero
inc
push
pop
jmp
sbb
add
aad
ret
rol
pop
cs
mov
jg
(bad)
push
inc
pop
add
dec
daa
mov
movs
cwde
mov
add
mov
adc
xchg
push
sbb
xchg
xor
sub
pop
sub
ins
xchg
lock
cmp
data16
cmp
cmp
jle
xor
xchg
sub
into
xchg
cmp
xchg
aad
std
pop
bound
push
ja
push
mov
pop
(bad)
sub
mov
cld
popf
fistp
pop
outs
retf
rol
pusha
jge
daa
jle
imul
out
sub
retf
push
cdq
aam
mov
sbb
cld
mov
lock
(bad)
loope
push
popf
or
inc
mov
mov
das
sbb
sbb
cdq
shr
lods
mov
mov
or
lods
cmp
xor
sbb
and
(bad)
retf
cmp
fwait
in
pop
or
push
bound
in
push
xor
or
mov
fidiv
in
fild
pop
out
sbb
aad
xor
cmovb
(bad)
and
jns
xchg
jge
jl
pop
mov
jp
gs
ins
shl
jecxz
mul
(bad)
scas
push
inc
clc
cmp
cwde
inc
pop
ret
jmp
(bad)
mov
cmp
loop
loope
(bad)
push
adc
and
imul
sub
jno
cmp
sub
xor
sar
cmp
xor
mov
mov
jbe
(bad)
test
jne
scas
mov
sbb
mov
or
das
sbb
cwde
inc
dec
jnp
xchg
std
aaa
jnp
in
jne
jnp
dec
push
dec
adc
loop
adc
push
fnstenv
mov
cmp
inc
in
xchg
inc
push
push
adc
cmp
loop
xor
inc
leave
xlat
xchg
inc
sbb
sti
mov
and
add
mov
(bad)
repnz
aaa
jg
stos
gs
sti
mov
add
push
aaa
(bad)
clc
jnp
pop
push
in
sub
loop
aaa
stos
shl
pop
sbb
daa
imul
cmp
and
sub
js
inc
pop
leave
mov
add
pusha
cld
inc
mov
cmp
in
in
cmp
push
and
pop
lock
xchg
fstp
mov
rol
xchg
add
sbb
jno
or
ja
mov
adc
popf
mov
ror
test
mov
xchg
pavgb
popf
stc
xchg
aas
dec
or
test
imul
cld
pop
mov
cwde
push
mov
dec
fistp
push
lods
push
cdq
in
int3
arpl
mov
mov
stos
int3
add
push
or
outs
out
in
or
xchg
popa
adc
rol
dec
ret
in
shl
cld
or
mov
xchg
fldcw
mov
xor
mov
push
cld
sub
xor
rol
xchg
pop
(bad)
pop
adc
popf
(bad)
sub
sbb
fidiv
scas
test
add
mov
fnsave
pop
jmp
add
(bad)
cmp
in
or
jnp
loope
inc
arpl
int
mov
aaa
xchg
or
ret
rcr
cmp
dec
aam
je
stc
push
(bad)
out
xchg
mov
scas
aam
outs
jecxz
xor
add
out
mov
mov
imul
pop
add
dec
cli
(bad)
(bad)
jne
push
(bad)
jns
(bad)
in
arpl
sbb
in
and
add
ss
xchg
lock
test
and
enter
and
mov
dec
aad
add
pop
or
(bad)
call
xlat
popf
(bad)
jnp
jmp
add
imul
push
dec
pop
mov
(bad)
mov
add
pop
mov
les
push
lea
scas
jp
and
and
rcr
jnp
inc
(bad)
aad
cmc
out
out
xchg
push
inc
adc
call
pop
sti
push
jecxz
cmp
daa
inc
xor
add
test
ins
mov
mov
adc
mov
xchg
mov
mov
mov
push
push
cmps
mov
es
out
retf
xor
lods
and
cmp
adc
dec
pop
or
jge
inc
mov
outs
fstp
push
xchg
pop
add
loope
xchg
or
fwait
cli
loope
rcl
inc
pop
mov
sbb
inc
jecxz
or
add
cwde
sar
jecxz
add
rol
adc
(bad)
sub
in
(bad)
jbe
lock
neg
inc
ss
and
and
pop
pop
jbe
adc
test
and
cwde
add
fs
fist
(bad)
aam
dec
cmp
mov
jae
jmp
mov
mov
lods
shl
stos
pushf
cmps
xchg
xor
lds
sub
jp
mov
pop
mov
xor
jl
and
mov
xor
pop
xor
pop
push
call
mov
adc
ret
cli
sbb
mov
shl
ror
push
mul
int3
repnz
jnp
outs
int
popa
scas
(bad)
mov
addr16
into
xor
or
rep
enter
sub
mov
xor
cmp
shl
leave
or
cmp
and
das
add
daa
pop
xlat
es
mov
out
or
sar
mov
jb
cmc
popf
mov
std
in
adc
adc
retf
sub
inc
mov
mov
int
xchg
outs
stos
jae
push
jbe
sahf
das
mov
push
(bad)
dec
dec
add
cdq
jecxz
xchg
ror
push
retf
out
(bad)
push
push
jne
in
mov
adc
push
xchg
dec
int
scas
jl
mov
jg
fdivr
out
inc
add
(bad)
and
test
(bad)
xchg
fsub
data16
(bad)
fcomp
push
mov
cs
xor
inc
mov
dec
in
call
push
mov
sub
daa
in
aad
call
ret
add
jns
(bad)
in
loope
push
lds
in
mov
lahf
outs
std
push
mov
pop
pop
ja
scas
pop
es
cmp
cdq
enter
div
cmp
jae
shl
aaa
movs
jns
mov
or
mov
shl
push
lods
jmp
sub
mov
scas
aas
push
pop
add
out
mov
js
push
in
inc
mov
cmp
call
mov
inc
stos
push
mov
xor
push
ins
mov
outs
jle
jp
inc
es
js
shr
dec
xor
outs
jecxz
(bad)
lods
mov
adc
sub
inc
jbe
(bad)
fldcw
inc
scas
adc
sbb
dec
lds
lds
(bad)
aad
add
idiv
jne
shr
int
jne
fwait
push
mov
lea
vshufps
es
xor
stos
dec
call
shr
std
cwde
push
cmp
sti
xor
jbe
ins
shl
add
or
(bad)
fcomp
ror
cdq
and
inc
loop
pop
hlt
ins
sbb
pop
xchg
(bad)
sbb
ret
mov
jmp
aaa
or
xchg
leave
mov
lahf
in
(bad)
test
adc
mov
in
ret
stc
ja
cmp
pop
fst
nop
jno
aam
das
pushf
shl
add
(bad)
into
push
sub
sti
test
or
push
shl
nop
and
mov
cwde
ins
(bad)
sahf
cmc
pop
pop
jo
iret
stos
and
mov
ret
fwait
ins
cmps
jmp
or
cli
test
xor
ss
sub
mov
and
xchg
dec
in
and
(bad)
xor
or
xor
sbb
les
push
in
out
test
xchg
pusha
xchg
and
or
jge
sub
add
xlat
mov
fs
mov
hlt
out
lock
xchg
(bad)
mov
pop
cmp
or
fwait
sbb
mov
xor
or
pop
push
(bad)
icebp
jno
adc
loopne
jge
add
sub
in
sti
xor
ret
ret
pop
in
inc
(bad)
xor
dec
repnz
fldenv
cli
pop
xor
push
dec
lods
adc
imul
and
das
mov
loop
int
hlt
fld
cs
pop
bnd
clc
add
cli
clc
push
mov
aad
mov
xchg
mov
daa
js
sahf
push
icebp
inc
lahf
push
push
mov
aam
ins
retf
fistp
jns
in
outs
and
mov
jmp
cwde
fimul
push
cdq
add
sub
mov
or
sbb
lods
cmp
adc
mov
sti
in
dec
shl
movs
mov
dec
jg
xor
je
adc
test
movsx
mul
mov
xor
dec
imul
xchg
popa
mov
sub
imul
repnz
fsub
inc
add
call
mov
dec
fisttp
ins
ds
enter
inc
fwait
sbb
(bad)
mov
retw
and
int3
outs
(bad)
mov
push
jl
push
je
sbb
jb
iret
ins
pop
js
std
popf
(bad)
clc
es
repz
jle
sbb
dec
inc
mov
mov
cmp
and
cs
xchg
in
(bad)
sub
xchg
mov
sbb
and
aam
push
dec
jmp
dec
ja
stc
mov
aad
push
std
std
pop
cmps
xchg
ror
movs
ret
imul
outs
mov
mov
jle
lods
pop
lods
shl
xlat
mov
xor
repz
fwait
in
xor
out
pushf
pop
add
jb
push
cmp
mov
cmps
sti
fucomip
fstp
pop
mov
dec
add
hlt
test
sbb
cmp
cmps
in
xchg
into
loope
scas
jecxz
cmp
loop
daa
mov
rcr
fidivr
call
repnz
repz
btc
jns
mov
fld
mov
mov
inc
ds
stos
fild
cmp
mov
cmc
out
pop
fucomi
int3
mov
es
les
jecxz
clc
mov
push
mov
imul
sahf
sahf
fbld
imul
dec
pop
popf
mov
iret
cmp
xchg
(bad)
loop
ror
ds
aad
scas
sbb
push
fst
xchg
or
mov
pop
in
mov
jne
mov
test
in
pusha
sub
push
pop
pusha
je
cmp
mov
popf
les
mov
adc
xchg
mov
aas
stc
cmps
or
int3
mov
push
(bad)
pop
popa
sti
mov
xlat
lods
jmp
inc
icebp
push
ins
rol
cmp
imul
scas
xchg
jns
arpl
out
int
loopne
or
outs
jle
push
push
pop
cmp
lea
sub
retf
out
lods
dec
int
jae
leave
rol
ret
mov
int
xchg
mov
les
mov
mov
(bad)
adc
cmp
or
push
lea
shl
call
pop
and
emms
js
(bad)
cmc
mov
cmps
cmp
cmps
ins
and
outs
retf
mov
mov
or
(bad)
test
dec
movs
(bad)
cmp
mov
pop
push
jge
mov
sbb
mov
mov
jmp
pop
ror
shr
dec
scas
ret
loopne
hlt
test
movs
bound
in
push
jb
or
aam
div
nop
imul
sbb
fidiv
cli
or
leave
(bad)
clc
clc
ret
bound
adc
mov
retf
mov
sub
inc
pop
cmp
in
movs
inc
pop
dec
adc
pop
jnp
aam
pop
cmp
push
out
jo
shr
or
clc
xor
xchg
sub
mov
xchg
jae
(bad)
out
int
je
push
sub
xor
sub
pop
leave
retf
mov
in
out
sub
or
add
push
sub
jge
add
in
jns
mov
cmp
push
in
xchg
and
rcr
test
sar
rcl
xchg
repnz
ret
mov
fcomp
mov
and
scas
addr16
dec
mov
cdq
fxch
dec
xor
xor
jp
(bad)
pcmpgtw
sar
sbb
and
xchg
sub
or
push
push
xchg
repz
pop
bound
or
jno
or
pop
data16
addr16
cmp
sbb
jb
adc
sbb
push
loopne
data16
cmp
fld
xchg
test
sar
push
mov
aad
jae
adc
imul
fist
fdivr
inc
ins
lahf
push
xchg
addr16
cmps
mov
xor
fwait
xchg
dec
rcl
je
test
mov
in
clc
jl
outs
data16
lahf
dec
mov
stos
xchg
into
(bad)
sub
fist
int3
dec
jge
cdq
es
in
jge
xchg
(bad)
into
sub
loopne
daa
lock
xor
pushf
or
je
cwde
aas
jecxz
hlt
cld
test
sbb
xchg
pop
aad
fbld
cmp
sub
ss
popf
add
cmp
mov
lock
jmp
xor
xchg
cmp
ds
adc
out
call
repz
xchg
enter
loope
add
pop
add
mov
lea
pushf
fld
xchg
cmps
mov
pop
sbb
mov
xchg
sbb
(bad)
cmp
jno
add
fild
sub
inc
xor
movs
mov
(bad)
push
or
xor
bnd
inc
jmp
data16
and
cmc
or
pop
and
add
push
(bad)
fmul
mov
jmp
push
(bad)
mov
(bad)
mov
gs
arpl
dec
test
movs
xor
neg
test
scas
dec
sti
push
and
arpl
mov
les
sbb
and
movs
fsubp
adc
les
or
or
(bad)
ret
xor
sbb
pop
xchg
not
mov
cli
daa
loopne
inc
iret
cdq
inc
mov
popf
les
sahf
fst
outs
sbb
nop
xchg
js
mov
jno
sub
pop
aaa
frstor
and
and
mov
in
imul
cli
enter
xor
xchg
dec
mov
das
mov
jbe
sub
les
mov
sbb
pop
cdq
cmp
sysenter
outs
xor
mov
ror
enter
(bad)
in
sub
mov
mov
fisubr
bound
(bad)
adc
mov
daa
push
test
cmp
xor
pop
or
jo
mov
mov
out
push
pop
lds
ret
xor
mov
mov
pusha
mov
sub
push
or
push
adc
inc
cmp
sahf
aaa
out
fsubr
sub
push
mov
cmc
jb
adc
dec
xor
jp
out
sahf
add
pop
adc
dec
inc
mov
jmp
(bad)
test
xchg
mov
dec
and
cmp
test
adc
inc
scas
add
adc
mov
test
(bad)
int
sbb
fwait
inc
pop
pop
out
mov
adc
(bad)
pop
out
inc
sar
imul
cmc
mov
inc
mov
push
scas
cdq
sub
in
test
adc
lds
hlt
std
fld
(bad)
xchg
pop
push
sti
push
dec
(bad)
cs
jb
dec
repz
or
xchg
out
push
xor
jo
pop
jmp
mov
int3
arpl
ins
(bad)
not
std
dec
imul
pop
mov
ds
mov
scas
loope
ss
test
es
mov
xchg
adc
pusha
(bad)
std
mov
(bad)
pop
mov
pop
nop
or
jmp
dec
sub
stos
cvtdq2ps
mov
dec
aaa
mov
mov
add
out
dec
mov
cs
hlt
xor
xor
fcmovnbe
push
dec
and
add
xor
inc
mul
jno
sub
or
out
dec
mov
in
loop
mov
add
xchg
xchg
mov
(bad)
xchg
mov
add
js
ficom
and
lahf
outs
xlat
pop
or
test
lods
pushf
lods
lahf
jns
(bad)
mov
push
add
xor
call
cmp
ss
fadd
dec
or
stos
mov
mov
and
test
jl
fimul
adc
or
dec
in
xchg
out
pop
xor
ss
xchg
pop
test
add
xor
in
sub
add
cs
(bad)
fs
pop
add
add
sahf
(bad)
ds
ins
imul
cwde
sbb
call
scas
adc
sub
movs
rcr
faddp
idiv
and
cmp
lds
jb
pop
dec
xor
inc
imul
jne
xor
cmc
adc
(bad)
xchg
retf
and
gs
inc
popf
sub
addr16
popa
aad
fs
ds
or
(bad)
sti
jnp
fnstsw
retf
fisttp
ja
outs
clc
dec
(bad)
cld
fxch
addr16
jmp
fidivr
pop
sbb
fist
mov
ins
ss
push
enter
test
jmp
imul
mov
fmul
xchg
pop
fdivr
imul
pop
addr16
sbb
rol
popf
int3
das
mov
cmps
mov
out
pop
sub
jae
xlat
shl
cmp
pop
push
pop
mov
mov
stos
std
jns
js
jl
or
push
scas
out
mov
mov
inc
inc
mov
lods
mov
cdq
xchg
stos
ins
clc
xchg
sub
fs
and
mov
popa
les
mov
leave
mov
shr
jo
btc
push
js
bound
(bad)
popf
inc
pop
shr
xchg
and
sbb
cmps
and
adc
cld
in
xor
movs
fimul
js
mov
ret
fld
movs
test
ret
daa
and
rol
pop
xchg
ret
outs
test
add
leave
aas
mov
in
popf
loopne
jne
mov
daa
mov
adc
cmp
xor
fld
jno
dec
add
xor
inc
mov
outs
mov
mov
jae
mov
enter
std
inc
lock
aas
mul
push
sbb
js
xchg
in
movs
sahf
(bad)
int
ins
out
push
call
es
push
sbb
test
test
pusha
in
(bad)
dec
inc
outs
(bad)
loopne
clc
js
(bad)
hlt
lods
scas
pop
enter
or
mov
fcomip
sub
adc
mov
ins
or
int
(bad)
cmp
jl
enter
sub
fwait
sub
(bad)
push
sub
mov
out
mov
push
mov
sub
daa
mov
adc
dec
cmp
(bad)
cmp
add
sbb
adc
repz
js
jp
mov
in
call
xchg
lock
fsub
movs
cmp
mov
ret
pop
add
and
outs
ss
push
push
jecxz
jl
lea
outs
fucomi
outs
fcmovnb
test
mov
ins
and
stos
dec
fidiv
pop
cmc
mov
jle
and
xor
mov
sbb
sbb
pop
jno
mov
mov
dec
pop
(bad)
(bad)
mov
inc
addr16
aam
repz
mov
xor
repnz
repz
or
hlt
jno
daa
jns
dec
(bad)
das
imul
pop
mov
sub
pop
dec
ins
xor
fadd
ret
push
sbb
pop
leave
inc
and
leave
mov
mov
mov
loop
cmps
push
out
stos
push
xchg
popa
jmp
dec
push
fsubr
imul
lock
dec
xchg
or
push
xor
dec
fist
push
shl
inc
add
call
aam
gs
dec
lock
pop
ret
out
xor
mov
push
shl
jnp
sahf
xor
mov
or
jmp
movs
stc
mov
xchg
bound
fs
je
loop
xlat
sbb
adc
(bad)
pop
movs
aam
stc
cmp
push
inc
jne
(bad)
lods
stos
and
pop
push
ror
inc
sbb
(bad)
ret
mov
aas
jo
ret
sbb
stos
ins
pop
test
repnz
mov
sub
mov
adc
xchg
mov
pop
stos
pop
ja
add
movs
dec
es
jge
jmp
or
mov
fldenv
(bad)
push
jp
cmp
pop
das
mov
xor
jp
outs
jo
inc
nop
xchg
arpl
sbb
mov
frstor
adc
mov
dec
mov
sub
add
adc
xchg
dec
sub
imul
ret
cmp
and
fcmovnb
xchg
mov
sub
sub
rcr
shr
jecxz
cs
push
inc
bound
mov
mov
shl
icebp
add
leave
aas
pop
push
mov
pop
and
jo
adc
xchg
aas
push
call
pop
rcl
popf
(bad)
imul
xor
mov
aas
adc
iret
int
ins
rcr
pop
popa
repz
cmp
inc
mov
pop
lds
iret
push
add
push
sbb
pushw
in
sti
dec
loopne
pop
xchg
and
pop
pushw
data16
(bad)
cmp
xor
pop
lock
mov
ds
rcl
pushf
out
push
push
pop
scas
adc
gs
popa
sbb
stos
les
std
stc
add
pop
xchg
popf
fst
cmps
mov
mov
cmp
mov
xchg
pop
xchg
adc
das
mov
xor
fwait
pop
dec
in
rcr
and
mov
xchg
adc
and
shl
jb
push
xor
pop
cmp
sahf
mov
(bad)
adc
int
ror
xchg
pop
mov
push
loope
scas
mov
fcomp
(bad)
jne
sub
push
lods
mov
and
xchg
sahf
fdivr
mov
push
inc
jecxz
dec
ins
repz
sbb
hlt
sbb
sub
mov
dec
and
sbb
(bad)
push
mov
inc
dec
out
loopne
fisubr
jmp
mov
je
jmp
and
xchg
sub
cli
gs
into
pop
jl
sbb
jns
addr16
stos
out
mov
mov
nop
add
and
push
shr
popf
pushf
call
or
inc
ds
add
(bad)
mov
inc
cmps
rcl
ror
adc
mov
pop
mov
and
sbb
dec
and
sbb
lahf
jnp
jbe
push
stos
sti
mov
jmp
int3
mov
xchg
shl
fnstcw
jmp
es
lods
test
outs
or
sub
pop
test
std
cmps
out
or
test
outs
in
mov
repz
cmp
int3
and
dec
jp
add
into
mov
push
test
mov
cmp
cwde
mov
sub
push
or
push
das
inc
jae
pop
out
pop
inc
out
pop
sub
pop
push
pop
pop
out
cdq
mov
jl
push
sahf
xchg
jno
and
loop
xor
pop
mov
loop
mov
mov
push
xor
add
cmps
and
ret
fsubr
das
gs
add
xor
sub
push
sub
call
add
mov
in
int3
inc
pop
mov
sub
xchg
les
add
fwait
xor
aad
mul
cmp
mov
popw
retf
xchg
shl
mov
gs
rcl
std
xchg
push
jle
and
xchg
add
pop
adc
dec
lea
enter
sbb
and
cmp
xchg
nop
les
sbb
test
mov
cmp
(bad)
out
mov
test
add
mov
movs
xor
mov
add
xchg
out
addr16
in
xchg
out
sub
gs
mov
mov
js
lea
or
add
push
sub
sbb
in
std
jmp
(bad)
stc
push
call
data16
loop
fldenv
sbb
add
inc
movs
mov
rcl
pushf
push
push
je
aam
pop
cmp
xlat
cdq
jmp
push
lahf
and
inc
cmp
mul
gs
(bad)
push
(bad)
mov
mov
outs
adc
pop
aas
(bad)
cld
sbb
scas
cmc
je
outs
mov
popa
push
mov
dec
push
mov
stc
push
push
mov
or
adc
jne
pop
repnz
sub
xlat
pop
ror
pushf
xchg
mov
xchg
mov
pushf
sbb
enter
adc
test
jns
pop
push
mov
sahf
pop
jg
jmp
mov
sub
dec
and
mov
sbb
add
and
repnz
stos
clc
sbb
std
das
lods
add
fwait
cmp
push
jb
imul
(bad)
xlat
sbb
or
stc
sub
fidivr
cmps
fldl2e
lds
ror
fsub
out
cmp
jp
cwde
addr16
inc
clc
jmp
in
lds
pushw
inc
mov
mov
jae
xor
xchg
inc
mov
fcomp
dec
ins
mov
out
pop
retf
in
or
mov
cmp
xchg
sbb
xchg
arpl
mov
iret
int3
mov
shl
xor
enter
push
pop
push
sbb
jmp
push
pop
out
push
jnp
sbb
icebp
jnp
dec
mov
push
test
stc
dec
(bad)
mov
retf
cwde
sub
in
sbb
jg
pop
ficomp
je
mov
mov
mov
sub
jns
dec
sub
add
add
and
xchg
int3
lock
sub
xchg
(bad)
(bad)
mov
mov
in
pop
and
sbb
mov
mov
inc
cwde
arpl
xor
sti
jge
fnstsw
icebp
jbe
fwait
shl
sub
adc
push
xor
mov
stc
pusha
or
clc
jecxz
lods
fstp
mov
xor
data16
mov
push
jmp
xor
fnstsw
iret
mov
clc
push
mov
aas
jle
(bad)
daa
jl
movs
std
scas
xchg
cs
sbb
int
addr16
sbb
or
cwde
fcomp
pop
xchg
pushf
cmp
dec
push
cdq
sbb
push
mov
sbb
sbb
add
dec
xor
push
fwait
enter
mov
jmp
icebp
mov
push
fidiv
mov
ja
ret
mov
in
out
in
and
cmp
pop
fidiv
jmp
(bad)
rcr
push
mul
mov
retf
sub
lahf
pop
bound
ss
xchg
xor
lods
or
pop
loop
inc
loope
adc
test
push
retf
enter
call
aad
add
dec
popa
(bad)
sub
iret
retf
and
fisttp
mov
fcmovne
dec
test
add
mov
cmp
test
and
mov
xchg
push
mov
or
jne
int
push
mov
call
xor
ror
mov
xchg
push
pop
ja
loope
push
xchg
push
test
pop
out
xor
lock
out
xchg
sti
push
push
arpl
jo
xchg
dec
test
push
les
mov
shl
inc
fwait
pop
mov
sbb
jp
mov
aad
xchg
lods
or
out
jg
scas
idiv
mov
cwde
xor
pop
mov
in
cwde
out
lock
mov
jle
repz
js
cmp
stc
(bad)
mov
pop
mov
dec
test
or
daa
fwait
loope
mov
retf
(bad)
popa
pop
in
iret
jg
cmps
aad
icebp
mov
das
pop
jae
xchg
ret
pop
or
pop
(bad)
stos
jle
cli
(bad)
mov
mov
pop
pop
xlat
jae
add
add
dec
or
inc
mov
es
add
sub
and
mov
dec
and
jnp
push
mov
push
out
sub
es
stos
repnz
cmp
mov
mov
fcomp
inc
push
out
fisub
pop
popf
mov
es
mov
lods
loopne
nop
xchg
adc
movlps
or
push
(bad)
jp
sbb
lods
and
enter
icebp
sub
lea
mov
or
pop
xchg
lahf
sbb
jbe
sbb
pop
lock
xchg
stos
out
push
xor
fmul
push
fstp
and
loopne
xchg
adc
ds
xor
ds
cmc
retf
inc
(bad)
xchg
in
dec
dec
daa
add
bound
out
nop
xor
out
push
xor
test
(bad)
jae
mov
xchg
loop
xchg
xor
idiv
pop
repnz
xlat
xchg
in
or
mov
xchg
daa
fwait
sub
stos
aam
lds
(bad)
fcmovb
stos
dec
cwde
dec
mov
fdiv
xor
jne
xchg
pushw
gs
daa
movs
ret
repnz
lahf
popa
push
adc
dec
dec
xor
xor
jmp
sub
sub
inc
adc
enter
retf
sub
addr16
inc
loop
xchg
js
push
mov
pop
fidivr
adc
mov
leave
(bad)
out
scas
sbb
mov
ror
and
xchg
test
cwde
lea
fadd
inc
mov
enter
lahf
push
and
(bad)
gs
push
lock
inc
out
sahf
(bad)
je
or
mov
fsub
cmp
inc
and
xchg
mov
aaa
pop
lods
pop
push
popa
fcomi
pop
mov
xchg
(bad)
jcxz
and
xchg
mov
mov
aas
daa
cmp
jae
inc
and
add
jo
call
or
sub
or
push
inc
mov
dec
adc
loop
pop
fidiv
hlt
sub
lock
xchg
loop
shr
call
fidiv
scas
ds
push
jecxz
inc
out
popf
loop
test
addr16
shl
aaa
leave
ffree
adc
xchg
sbb
fstp
jl
in
pop
pop
shr
mov
lock
push
lahf
pop
rcl
add
fsub
xchg
sbb
ja
pop
outs
gs
ins
sbb
jns
mov
scas
xchg
mov
jge
pop
adc
test
dec
cmp
sbb
arpl
ja
fild
mov
mov
in
hlt
retf
pop
inc
mov
fs
aad
addr16
js
xchg
inc
dec
cs
jmp
je
out
jle
jmp
sub
add
cdq
cmp
(bad)
cmovno
fldcw
pop
mov
xlat
jp
xor
inc
cmc
add
imul
rcl
imul
retf
cdq
inc
adc
cli
xchg
ds
fwait
pushf
rcl
dec
cmp
push
sub
arpl
pop
mov
xchg
mov
push
push
sub
dec
sar
ret
in
jnp
leave
pop
movsx
xchg
pop
mov
xchg
fidivr
adc
cmovge
pusha
or
jmp
jnp
(bad)
ins
pop
pusha
pop
int3
out
not
(bad)
mov
xor
mov
enter
aas
sbb
sbb
xchg
ret
jp
push
shl
or
mov
cmp
xor
fisubr
xchg
aam
outs
into
test
into
repnz
xchg
dec
call
adc
fstp
xchg
cmps
outs
call
shl
jg
cld
or
pop
jl
jno
push
in
push
jne
cmp
dec
add
call
gs
test
jge
out
(bad)
mov
sti
test
adc
mov
adc
neg
test
fist
inc
jge
and
int
xchg
test
fs
jnp
mov
popa
aam
inc
cwde
xchg
push
dec
js
imul
cld
inc
iret
es
in
cmp
out
dec
push
scas
call
jl
push
in
and
mov
or
inc
mov
(bad)
repz
mov
rcl
and
mov
test
cmc
stos
in
inc
lahf
sub
xchg
ds
jp
xor
retf
push
sahf
pop
mov
fsubr
xchg
jg
adc
fcomp
das
call
xchg
data16
push
mov
retf
mov
iret
sub
es
xor
cmps
lods
push
sub
add
lods
movs
or
(bad)
lahf
mov
in
rcr
push
sbb
test
xchg
fucomp
fwait
test
mov
ja
or
(bad)
outs
pop
push
pusha
cld
dec
push
imul
jl
bound
push
stos
arpl
pop
pop
and
shl
add
adc
in
xchg
mov
dec
fistp
fwait
loop
or
and
(bad)
mov
inc
aas
cs
out
or
jle
mov
pop
std
dec
and
xor
sbb
(bad)
adc
jge
xchg
add
pop
cdq
mov
stos
fldcw
mov
(bad)
sub
adc
adc
test
add
dec
rol
pop
out
out
and
lods
(bad)
lods
jg
es
(bad)
std
jne
mov
jnp
mov
xchg
cmp
xor
das
daa
mov
ror
mov
ret
das
ins
pop
mov
out
jg
(bad)
ja
xchg
add
fcom
cmp
xchg
pop
aam
dec
mov
jmp
and
xor
adc
and
jecxz
(bad)
xor
test
cmp
nop
or
jns
rcr
mov
stos
je
adc
cld
xchg
fmulp
ss
xor
and
or
add
pop
push
jge
out
push
call
shr
jnp
pop
ret
fnstcw
call
jle
lock
add
idiv
ret
xchg
adc
pop
das
mov
icebp
stc
sub
es
loopne
jae
sub
data16
out
mov
jmp
mov
sahf
mov
std
cld
(bad)
shl
out
repnz
add
mov
aas
rol
mov
jbe
ret
adc
iret
fwait
(bad)
xor
sub
dec
mov
adc
xchg
push
test
movs
cmp
mov
cdq
iret
xor
or
cwde
pop
rol
fsub
xchg
movs
(bad)
fcom
mov
not
lock
adc
fidivr
mov
jne
imul
adc
jg
sbb
rcr
mov
ror
aam
(bad)
jmp
leave
cmp
adc
mov
jo
cpuid
scas
add
lea
ja
arpl
enter
stos
test
sub
jle
mov
daa
dec
ficom
cmps
jne
inc
ret
int
ffree
inc
jae
dec
fmul
xor
cmps
mov
adc
popf
fild
cmp
shl
out
sar
stos
push
lea
and
pop
ds
push
arpl
fild
rcr
ficom
imul
push
pop
xchg
xchg
sub
jmp
push
lock
sub
movs
lods
push
pop
sbb
mov
loopne
cld
push
push
push
mov
(bad)
inc
inc
mov
fsubr
sbb
cld
and
jbe
add
sub
jmp
mov
cdq
lock
mov
push
mov
lahf
ss
clc
daa
and
and
pop
retf
imul
jle
lods
test
inc
push
(bad)
jmp
adc
or
(bad)
xchg
sub
add
mov
je
add
xchg
pop
push
cmp
outs
inc
and
test
addr16
mov
jmp
ffree
push
cwde
loope
pop
pop
xor
jl
sbb
add
adc
or
dec
inc
sub
ins
bound
adc
fcmovbe
jge
inc
lahf
(bad)
mov
mov
loopne
push
sbb
and
adc
jnp
idiv
lds
jge
in
leave
xor
pop
jg
loopne
mov
sub
jmp
sbb
push
add
push
sub
push
add
cs
ja
shl
retf
cmp
cmp
jp
pop
xchg
jnp
mov
mov
inc
or
xchg
fisub
fs
addr16
sub
ret
clc
dec
sbb
inc
ss
stos
push
xchg
sahf
loopne
int3
jmp
mov
push
mov
jae
js
call
dec
sar
loope
int
ror
(bad)
xchg
dec
les
sbb
jmp
out
jnp
jno
das
fcom
ret
cmp
ins
loop
dec
and
aad
arpl
dec
inc
adc
inc
jae
mov
shl
add
(bad)
repz
sbb
or
repz
sbb
in
std
jmp
pop
xchg
int3
cmps
push
jecxz
movs
pop
push
imul
adc
xor
fwait
pop
(bad)
jo
xor
test
mov
xor
inc
retf
xchg
and
shl
sbb
rcl
call
push
aam
adc
out
mov
add
xchg
jnp
in
mov
mov
out
push
adc
or
cmc
cmp
or
aaa
or
repz
xchg
fild
sbb
inc
inc
sub
push
(bad)
std
mov
repnz
mov
sti
cdq
push
(bad)
je
cmpps
adc
out
ss
and
out
xor
mov
fucomip
xchg
sub
jp
and
mov
retf
inc
pop
mov
push
fcomp
sub
nop
jbe
inc
outs
xchg
sub
dec
mov
das
mov
mov
out
dec
sub
sub
jmp
out
test
pop
ins
cmp
(bad)
retf
cmp
jae
mov
mov
loope
xchg
xor
(bad)
popa
sti
test
int
inc
adc
out
stos
sbb
out
mov
adc
mov
xor
movs
adc
and
jo
int3
cs
(bad)
sti
jnp
gs
out
pop
test
sbb
inc
push
xlat
and
adc
mov
add
inc
mov
ret
out
rcl
out
ror
push
sbb
mov
jo
lds
cmp
push
push
enter
sbb
sahf
sbb
cmps
cmp
mov
das
mov
cmp
ds
mov
jmp
push
jne
hlt
and
add
adc
sar
ds
dec
ret
or
inc
xor
cmp
aad
lods
mov
es
jns
repz
mov
into
jo
mov
ds
push
mov
stos
clc
aas
sti
lock
add
sahf
fs
mov
inc
cwde
inc
push
test
jae
adc
jge
ret
push
cmc
(bad)
jmp
jle
popa
cmp
inc
push
sbb
adc
xor
aaa
jmp
dec
and
idiv
add
xor
dec
or
stos
xor
out
fild
out
xor
mov
rcl
ds
and
jl
jecxz
pushf
imul
and
pop
or
ret
aam
clc
mov
aam
push
pop
or
scas
sub
in
rcr
sub
addr16
add
adc
jbe
les
retf
std
pop
aad
mov
sbb
sub
div
ins
fmul
push
xor
sub
stos
push
sahf
int
or
or
adc
clc
pop
cbw
sbb
push
(bad)
cld
retf
imul
sub
(bad)
shr
xor
in
mov
ret
dec
mov
sbb
or
sbb
jmp
ds
or
inc
cli
into
stc
imul
inc
mov
push
data16
push
jmp
loop
xor
out
test
out
les
adc
mov
ja
loopne
xlat
mov
and
cmp
xlat
retf
sbb
jecxz
test
cdq
stos
adc
test
lea
daa
inc
and
dec
enter
les
push
retf
(bad)
dec
sub
and
cld
add
adc
(bad)
and
and
out
cmp
dec
mov
mov
loope
aaa
cmp
das
mov
cwde
jmp
data16
jl
add
or
push
mov
in
cmp
xor
data16
add
(bad)
or
or
jp
test
adc
jbe
sbb
(bad)
and
add
dec
mov
mov
enter
jmp
sbb
je
hlt
adc
inc
btr
cdq
inc
mov
xchg
int3
mov
cli
cmp
mov
mov
push
mov
xchg
add
jns
(bad)
sti
ror
sub
fmul
add
jl
jnp
cwde
xchg
js
jns
outs
dec
mov
pop
xchg
fcomp
imul
aaa
ja
cmp
aaa
mov
(bad)
push
retf
call
inc
or
jg
push
out
mov
xchg
mov
pop
sub
sti
xchg
div
xchg
and
mov
(bad)
fsubr
lahf
mov
cwde
cwde
clc
pop
lock
xlat
push
cmp
shl
rol
outs
inc
cwde
cmp
pop
jne
jb
jae
mov
retf
in
push
and
sub
pop
cdq
dec
shl
xchg
fisttp
imul
daa
(bad)
or
icebp
loopne
ficom
mov
pop
dec
out
mov
mov
and
movs
jp
xchg
inc
ror
jmp
mov
add
cmp
pop
js
out
inc
jg
mov
mov
mov
or
adc
adc
inc
sbb
out
mov
push
addr16
push
(bad)
adc
sub
dec
nop
mov
sub
adc
push
dec
clc
lods
(bad)
in
sti
fisubr
daa
cmps
popf
xchg
jo
not
jmp
or
xchg
mov
ins
or
pop
dec
fisttp
movs
call
jne
popf
das
mov
add
fcmovbe
retf
mov
loop
fs
cs
mul
inc
movs
or
cmp
(bad)
sub
test
mov
mov
cs
les
push
mov
sbb
pop
jp
jmp
sub
in
fnstcw
aad
sti
pop
ja
cmps
xchg
scas
or
mul
div
adc
scas
cmc
das
in
pop
arpl
stc
cmp
dec
call
ja
mov
stc
psubsb
mov
dec
loop
dec
add
out
add
out
push
cmp
vpcmpgtb
sbb
cmc
sub
xchg
(bad)
push
mov
sbb
mov
adc
adc
cmps
sahf
xchg
mov
rcl
mul
call
cmp
inc
inc
cwde
fwait
push
addr16
dec
shr
sahf
inc
xchg
xor
fdiv
mov
jne
cmp
mov
jnp
neg
xlat
outs
neg
test
sub
(bad)
arpl
mov
cmp
in
jmp
stc
add
push
mov
mov
sub
mov
sahf
ins
mov
lahf
pop
addr16
pusha
xlat
mov
cli
adc
dec
(bad)
push
inc
dec
retf
movs
mov
loop
jp
and
xor
aad
jmp
ins
inc
sbb
sbb
cdq
in
xchg
cmp
push
imul
cmc
pop
in
movs
jge
sbb
fsubr
aam
mov
(bad)
call
enter
jp
out
adc
hlt
push
sbb
fwait
loopne
mov
sub
mov
pop
scas
and
ficom
push
in
sub
inc
jecxz
xchg
mov
shr
or
lock
or
mov
mov
ret
(bad)
cmp
loope
and
neg
dec
push
stos
cmps
retf
dec
out
bound
dec
(bad)
ficomp
in
cdq
int3
mov
mov
dec
arpl
sbb
push
test
in
xchg
xor
je
pop
xchg
mov
imul
movs
mov
and
arpl
xchg
dec
or
pushf
mov
dec
sub
in
retf
fnsave
inc
pop
xchg
sbb
cmp
jb
mov
sbb
cli
test
fbld
test
inc
(bad)
xor
int3
rol
push
add
les
pushf
sti
add
fdiv
sbb
push
jno
les
movs
or
xor
cmp
jnp
jg
and
fsub
jno
or
fsubr
mov
out
sar
xchg
imul
mov
xor
pop
data16
fimul
fldenv
jne
fiadd
jne
cmp
sbb
xor
leave
jne
retf
loopne
out
out
mov
and
inc
(bad)
call
mov
das
mov
fnstenv
xor
ja
cmp
das
stos
push
nop
jmp
in
sbb
cwde
aas
dec
nop
ins
jl
rol
push
dec
add
stos
clc
mov
mov
cs
daa
sbb
jge
xchg
jae
mov
hlt
arpl
loope
cs
xor
jle
xchg
or
ret
cld
and
test
push
dec
inc
pop
inc
(bad)
mov
xchg
data16
cmp
mov
jno
inc
adc
sahf
stos
pusha
cmp
xor
mov
rcr
jge
add
fld
mov
ins
inc
pop
jecxz
pop
ret
je
lock
sub
repz
and
std
or
or
das
scas
and
(bad)
mov
fisub
push
cmp
lock
sub
sub
and
in
fwait
in
add
and
xchg
inc
call
(bad)
dec
ins
add
and
mov
sbb
je
stos
cmp
mov
push
xchg
add
jns
test
jp
mov
repz
in
ss
jae
jo
push
mov
xchg
fcmovnbe
mov
loop
loop
sub
and
jg
cli
ret
push
add
inc
cwde
stc
adc
push
cdq
jns
jbe
xchg
inc
and
add
lahf
bnd
and
push
movs
stos
push
loop
pop
pop
jno
in
jne
dec
lock
repz
cmp
adc
jle
jnp
addr16
enter
jns
(bad)
sub
mov
jno
mov
inc
dec
cmp
imul
inc
jbe
dec
sti
xor
outs
ftst
fisubr
jo
mov
pop
fist
icebp
in
xchg
sub
gs
cld
xchg
sub
repz
fcmovbe
add
sahf
or
mov
cmp
mov
push
push
ins
in
es
jl
popa
inc
inc
cmp
jp
je
in
add
sub
inc
test
jg
xlat
ret
int
or
add
(bad)
push
jl
or
cli
push
pop
mov
inc
adc
pop
xor
sti
xchg
(bad)
cs
sti
in
(bad)
or
das
fstp
add
cmp
(bad)
fnstsw
popa
in
sbb
adc
mov
int3
popa
inc
mov
jns
popa
mov
clc
mov
pop
xor
(bad)
(bad)
cmp
xchg
test
shr
pop
out
mov
out
movs
push
ins
rol
pop
sbb
fucom
mov
test
imul
sbb
daa
fcmovnb
cmp
(bad)
cmps
mov
add
xchg
adc
ss
xchg
sahf
and
in
mov
xchg
pop
sub
cmp
mov
mov
test
dec
shl
in
mov
rcr
sub
sbb
(bad)
and
fsub
scas
lods
sbb
enter
call
retf
pop
dec
dec
into
lea
stos
hlt
iret
dec
cmp
lahf
cwde
aam
aad
movs
mov
call
mov
ret
mov
push
sub
push
mov
mov
xor
dec
xor
add
pop
xlat
cmp
in
jl
out
xor
aad
icebp
cmp
fidivr
(bad)
call
mov
jb
cmp
sbb
adc
pop
or
jns
push
add
xor
xchg
xchg
lods
jge
mov
xlat
adc
fwait
cwde
rol
ins
cmp
pushf
movs
lds
and
out
(bad)
leave
test
cmp
xor
in
inc
je
loope
xor
test
ins
jns
leave
sbb
sbb
jbe
sub
sahf
shl
xchg
in
shr
cld
and
repnz
xor
push
ret
in
xor
sub
mov
std
inc
pop
sbb
sub
add
jnp
add
jg
jnp
cwde
mov
mov
jmp
ins
push
push
pop
dec
inc
add
fild
out
aas
call
cmp
push
sub
stc
mov
mov
mov
pushf
jl
sub
inc
sub
cmp
push
and
and
mov
repnz
iret
and
das
ds
lods
hlt
and
stos
popa
mov
fistp
loopne
and
jnp
xor
dec
stc
jmp
jnp
out
pop
jl
dec
xchg
inc
push
and
scas
int3
test
xchg
scas
jle
jb
out
push
stc
inc
in
loope
xchg
pushf
cmp
add
sub
outs
mov
scas
xchg
mov
dec
cmp
add
sub
push
call
cli
cdq
call
mov
jmp
loope
adc
out
dec
adc
(bad)
int3
outs
jmp
jle
jle
and
dec
xor
ret
lods
pop
push
ret
sahf
cld
adc
cmp
stos
sahf
call
shr
cmp
inc
hlt
or
ror
loope
(bad)
hlt
addr16
or
ret
or
xlat
fistp
cmp
scas
bound
popf
retf
into
leave
loope
xchg
fdivr
pop
push
fild
mov
rcr
cmp
cli
xchg
push
jge
cdq
adc
test
cli
movs
xor
fild
shl
mov
outs
lahf
jg
(bad)
je
rol
in
mov
add
lahf
xchg
mov
adc
lods
jl
adc
repnz
popa
push
adc
and
test
pop
mov
dec
add
adc
inc
fsubrp
minps
ror
sbb
xchg
mov
xor
pop
dec
out
fwait
arpl
pop
pop
clc
shr
push
xor
nop
leave
inc
push
xchg
dec
cmp
mov
mov
add
fadd
rcl
mov
or
mov
pop
(bad)
dec
jmp
dec
(bad)
ds
ret
sbb
pop
out
mov
push
cmps
in
mov
add
sbb
repz
pop
lock
(bad)
push
shl
rcr
test
push
push
push
pop
mov
pop
add
pop
jmp
(bad)
inc
leave
add
or
adc
lea
int3
mov
imul
cs
mov
dec
call
and
cmp
daa
add
test
push
pop
jmp
loop
sti
gs
loop
sub
call
call
dec
enter
adc
inc
push
cli
jne
mov
stos
mov
outs
rcr
xchg
mov
jecxz
jno
dec
or
icebp
outs
mov
push
xor
sbb
pop
xor
lds
inc
sub
stos
xchg
mov
xor
test
cmc
sbb
lds
stos
dec
mov
cmp
push
sub
ret
test
xor
mov
push
cdq
jecxz
mov
jg
pop
cs
ins
jecxz
enter
mov
xchg
or
jmp
mov
into
in
jno
ds
inc
shl
push
mov
and
scas
dec
and
popa
mov
sti
add
mov
mov
loop
pop
out
pop
jle
push
lahf
call
daa
rol
pop
repnz
and
mov
(bad)
outs
mov
dec
ins
add
ds
pop
sub
and
pop
(bad)
sub
pop
sbb
leave
xchg
xlat
into
jmp
movs
xchg
sbb
adc
nop
and
mov
jno
daa
sub
loopne
sub
jo
inc
in
gs
xchg
cs
xchg
xor
cmp
sti
sbb
push
mov
xchg
lods
jnp
xor
stc
fild
and
(bad)
aas
jno
stos
adc
sar
cmc
pop
adc
stc
rcr
into
loopne
cmp
shr
or
lods
in
push
js
xor
sbb
outs
cmp
cmp
add
adc
into
jo
add
rcr
adc
push
lods
es
xor
rol
adc
inc
mov
dec
sub
das
aad
test
loopne
repz
jmp
call
lods
xlat
xor
out
sub
ffreep
dec
popf
jle
shr
adc
fst
call
and
and
ins
dec
sub
sub
inc
jb
imul
jno
not
cdq
cmps
xor
cmp
inc
jp
sar
fstp
loopne
push
sbb
jp
shl
add
pop
pushf
sub
sahf
out
sti
aaa
mov
dec
add
cmc
fisttp
popa
es
push
or
xor
push
cmp
fsub
out
aad
xor
outs
adc
sub
inc
call
mov
pop
test
mov
(bad)
push
leave
mov
fisttp
ins
mov
push
shr
call
fistp
sub
sahf
add
test
xchg
and
add
or
jnp
in
daa
call
mov
sub
fiadd
mov
or
cdq
inc
fwait
mov
cs
sti
mov
mov
fdivr
arpl
adc
jp
ffreep
test
xor
pop
mov
aas
xor
dec
sysenter
fisub
xor
jno
xor
inc
lods
and
cmps
jecxz
inc
add
cmp
les
ins
pop
xor
sbb
and
jno
sub
pop
test
and
push
fidivr
ss
pushf
imul
push
cdq
xchg
pushf
hlt
pop
inc
mov
pop
outs
xchg
out
gs
inc
jmp
xor
cmc
cmps
dec
in
test
pop
ja
mov
fs
mov
pop
fadd
push
popa
repnz
dec
loopne
fwait
mov
outs
add
stos
icebp
jb
cmps
add
out
loopne
icebp
rol
xchg
repnz
xor
sbb
jl
add
inc
jae
mov
and
mov
into
mov
add
dec
mov
inc
movs
stc
in
push
std
xlat
inc
xor
xchg
fwait
in
out
xor
jge
push
pop
cmps
(bad)
cmps
add
add
jmp
push
mov
cdq
push
ins
je
repnz
cmp
mov
fisub
and
aad
adc
xor
xor
xchg
push
jae
test
test
and
daa
(bad)
test
fsubr
test
aad
and
shr
fstp
ins
inc
ins
and
aam
idiv
mov
mov
or
adc
movs
sar
daa
inc
mov
cmps
push
cmp
xor
gs
jnp
adc
mov
push
and
adc
repnz
sub
into
adc
lock
push
inc
push
pop
push
xor
or
in
repz
push
push
je
in
cmps
fsub
int3
and
in
icebp
sub
cdq
fwait
call
cdq
push
add
lock
mov
mov
mov
icebp
xchg
leave
pop
sub
or
imul
daa
mov
ss
fisttp
aas
adc
outs
mov
lea
dec
into
add
push
arpl
inc
mov
push
test
or
ficomp
xchg
ja
pop
inc
cmp
mov
jge
mov
aas
in
data16
xor
hlt
push
test
cdq
mov
inc
ins
ss
fild
shl
movs
rcl
xchg
out
mov
dec
dec
pusha
(bad)
gs
jl
gs
mov
pop
mov
rcr
call
jecxz
or
push
adc
nop
jae
or
add
pop
xor
fcom
add
dec
imul
rcr
push
fadd
push
mov
in
(bad)
dec
dec
jmp
lds
out
cmps
jb
or
in
(bad)
xchg
cs
seta
cmp
jmp
and
out
mov
sub
add
cs
sbb
sub
jmp
push
cmp
pop
cld
mov
popf
cwde
js
rcr
or
cmp
add
shr
push
lahf
jl
push
jg
pop
inc
popa
lea
mov
push
xchg
pop
(bad)
pop
and
sub
jo
pop
cmp
or
std
test
or
sub
or
bound
mov
outs
push
sbb
cmp
jmp
sub
enter
call
inc
adc
push
out
idiv
stc
lods
add
jp
or
mov
fcmovnb
jecxz
cmp
aad
fadd
loopne
repz
int
inc
mov
or
mov
cs
test
fsub
jmp
xchg
or
into
loop
stc
rcl
sub
nop
(bad)
adc
pop
add
add
add
inc
fwait
gs
fidiv
scas
mov
jo
in
inc
cmp
add
sub
jnp
(bad)
sti
jge
cld
lods
std
cmp
jp
test
lods
xor
xchg
(bad)
mov
div
or
mov
int
rol
mov
mov
call
aas
test
arpl
aam
fwait
and
cwde
shl
xchg
rcr
and
retf
pop
div
dec
xchg
data16
sub
(bad)
hlt
cwde
push
test
aad
pop
mov
retf
cmp
mul
sbb
push
push
push
dec
mov
push
test
popf
shl
retf
mov
push
(bad)
push
mov
lods
out
inc
jg
cld
jns
popa
aaa
lea
fadd
stc
sub
(bad)
or
ins
jecxz
pusha
jle
mov
in
adc
inc
pusha
add
fcom
push
dec
mov
inc
ret
(bad)
add
in
repnz
pop
xchg
pusha
and
loopne
lds
adc
add
lea
adc
mov
mov
xchg
add
bound
pop
xchg
or
adc
cli
in
xchg
add
xor
jmp
inc
data16
les
nop
sub
adc
mov
icebp
mov
pop
pop
(bad)
(bad)
stos
mov
push
xor
cmps
jg
mov
or
xor
push
jmp
hlt
sub
xor
(bad)
jg
mov
pushf
jl
pop
pop
inc
mov
xor
sbb
xor
jle
(bad)
pushf
or
(bad)
mov
ror
out
lahf
mov
into
jge
push
loopne
cs
in
inc
pop
es
mov
inc
sbb
pop
std
add
shl
cmp
dec
adc
add
jg
and
lods
pop
mov
(bad)
add
es
ss
mov
push
push
mov
test
pusha
jl
fisub
pop
cdq
inc
pop
push
sub
in
mov
xlat
dec
nop
bound
out
cmc
mov
popf
xchg
jae
mov
std
dec
sub
test
aam
ja
mov
loopne
cmc
loop
jl
int
pop
movs
loopne
xor
out
jo
inc
out
mov
sbb
mov
inc
mov
dec
mov
mov
es
xchg
shl
sub
cmps
(bad)
xor
sub
mov
mov
arpl
mov
sbb
cmp
cmp
in
fistp
aad
push
dec
repz
pop
rcr
daa
inc
jo
sar
call
jmp
or
je
and
push
shr
loope
(bad)
inc
stc
sbb
rcr
push
inc
mov
jge
stc
add
xor
jne
cmp
add
lods
xchg
dec
jae
sar
stos
adc
mov
adc
push
push
xchg
mov
mov
cwde
std
repz
int
add
shr
jnp
cmp
pop
cmp
xchg
ins
or
cs
pop
pop
push
ins
(bad)
iret
add
je
mov
ret
adc
mov
lds
adc
mov
ja
cmc
lea
or
fst
js
mov
inc
cmp
into
dec
repnz
into
das
mov
or
jg
cs
retf
mov
adc
mov
loopne
xchg
fwait
mov
sub
addr16
enter
sbb
popa
shr
in
das
retf
cmp
dec
daa
or
add
icebp
nop
pushf
mul
arpl
xchg
mov
inc
and
out
ds
fld
adc
ror
xor
jae
adc
cli
sub
jp
(bad)
sbb
mov
popf
mov
call
dec
sbb
into
test
mov
sbb
cmp
cmps
arpl
adc
enter
daa
push
pop
adc
jp
scas
cmc
sbb
push
cwde
minps
mov
jl
std
cmps
sub
or
mov
test
mov
int
dec
inc
in
mov
ficomp
jp
xchg
xor
lods
xchg
xor
repz
or
dec
repnz
cmp
fist
inc
js
push
sbb
cwde
pushf
mov
push
mov
shr
mov
loope
dec
sub
cld
and
adc
out
sbb
scas
inc
sti
jns
(bad)
mov
sahf
sbb
addr16
inc
outs
ins
or
lods
test
lods
sbb
and
or
push
ror
inc
mov
push
pop
jp
icebp
mov
sbb
in
(bad)
push
xchg
mov
and
and
mov
add
xchg
popf
add
rcr
je
mov
push
cmp
(bad)
cmc
sub
cmp
sub
scas
cld
addr16
addr16
and
pop
adc
jnp
test
(bad)
xor
mov
les
sbb
xchg
inc
popf
xchg
(bad)
dec
adc
cmc
pop
movs
push
dec
cli
addr16
mov
push
repnz
mov
push
xchg
int3
mov
cdq
popf
pop
call
pop
rcr
cmp
lea
fldl2t
xor
int
pusha
(bad)
out
ins
pusha
ds
lahf
test
mov
mov
and
mov
movs
in
pusha
add
and
sahf
and
inc
dec
test
movs
cmps
(bad)
aaa
inc
push
mov
or
retf
add
add
push
push
xchg
repnz
xchg
mov
(bad)
sbb
rol
sub
(bad)
jbe
and
mov
or
in
pop
mov
or
mov
in
pop
cmp
sbb
dec
add
push
add
aas
xchg
xchg
fsubr
mov
leave
or
jno
and
test
add
dec
gs
iret
and
xor
inc
aaa
jmp
mov
in
xor
mov
mov
inc
lock
(bad)
je
xchg
stos
jns
inc
xchg
xor
push
push
int
lods
sbb
call
push
nop
je
scas
ret
repnz
xor
xor
popa
add
sti
aas
daa
pushf
mov
addr16
xor
sbb
mov
push
int
lods
mov
mov
fwait
add
add
xchg
inc
shl
adc
movs
xor
ss
call
std
int
imul
inc
mov
call
xchg
and
pop
xchg
in
jge
pop
(bad)
lds
cmovae
sbb
cmp
ins
add
in
jne
mov
or
fcomp
pop
push
xchg
add
int3
adc
push
test
lea
repz
outs
mov
call
not
aad
mov
push
push
in
pop
arpl
hlt
shl
popa
inc
mov
pop
adc
adc
adc
ss
sar
mov
jb
and
xchg
(bad)
(bad)
and
jns
adc
xchg
repnz
mov
mov
and
or
fadd
stc
aam
sub
xchg
push
pop
dec
mov
push
in
bound
mov
push
rcl
dec
nop
pop
retf
adc
movs
dec
and
cs
fs
das
out
mov
int
fcmovnbe
test
fwait
mov
arpl
test
movs
mov
jecxz
icebp
adc
xchg
loop
icebp
sub
cli
push
mov
inc
and
push
mov
bound
icebp
mov
cli
adc
cs
cbw
mov
cmp
ds
into
xor
mov
imul
in
in
mov
mov
(bad)
into
xor
loop
(bad)
xchg
or
jno
and
or
jge
mov
dec
movs
iret
xchg
movs
daa
xchg
xor
and
pop
push
pushf
mov
inc
lods
ins
rol
or
jo
ds
mov
jno
sub
outs
popa
ficomp
or
sub
push
daa
pop
push
cmp
mov
(bad)
xchg
rcl
inc
dec
lds
cmc
mov
daa
mov
scas
inc
mov
aam
add
or
bound
push
adc
sub
sbb
in
push
jb
ror
js
pop
xchg
test
loop
or
xchg
retf
mov
pop
inc
jl
xchg
icebp
scas
push
or
outs
push
dec
hlt
mov
and
not
cmp
mov
shr
jmp
adc
add
adc
(bad)
jb
inc
cmps
adc
ja
sbb
xchg
mov
out
std
adc
mov
movs
mov
test
xor
cmp
push
pop
push
push
daa
mov
(bad)
pusha
dec
sub
inc
call
cmp
and
xor
mov
xor
(bad)
hlt
enter
inc
push
or
(bad)
test
shl
std
xor
cmp
loopne
movs
test
xchg
xchg
mov
pop
ficomp
mov
cmovns
retf
fcomi
mov
stos
xchg
xor
stos
lods
int
dec
mov
test
mov
dec
push
xor
cwde
movs
sar
test
jo
dec
pop
pop
test
dec
arpl
or
inc
clc
cmp
dec
add
cmc
(bad)
lahf
inc
or
outs
mov
sti
cmp
inc
xor
mov
dec
ins
mov
stc
and
mov
and
into
psrad
shl
cs
and
jecxz
outs
adc
jecxz
xlat
cmc
dec
mov
iret
pop
mov
rol
xchg
push
sbb
popa
in
sbb
popf
loop
mov
jmp
cs
imul
mov
sub
leave
aaa
jbe
pop
adc
dec
jnp
imul
aas
cs
je
loop
or
int3
imul
push
shl
jo
sti
mov
data16
mov
dec
lds
lock
jne
gs
mov
fst
aad
retf
cwde
test
sbb
cmp
arpl
push
fs
xchg
inc
cli
les
mov
(bad)
mov
add
xor
sub
das
dec
xchg
movs
rol
mov
dec
mov
call
shl
in
mov
push
lods
out
cmp
fsub
pop
mov
repnz
jnp
es
mov
pop
or
pop
mov
push
push
in
das
sbb
pushf
fldcw
or
aam
inc
push
xlat
xlat
retf
push
stc
lea
stc
adc
into
push
add
sbb
das
cmp
shl
adc
popa
dec
sbb
push
mov
jne
bound
inc
(bad)
jge
mov
int
sbb
arpl
test
xchg
popa
(bad)
jno
fist
pop
fucomi
or
add
and
jge
ficom
jmp
sti
mov
mov
inc
call
inc
inc
push
iret
stos
mov
xchg
in
and
xor
movs
mov
dec
xchg
jb
sub
in
fwait
add
movs
stc
int
call
and
mov
ins
xor
jl
push
ret
inc
std
(bad)
sti
mov
inc
or
and
mov
add
aam
leave
repz
pop
inc
shl
ja
stos
push
sbb
mov
mov
std
(bad)
outs
call
mov
loopne
or
fstp
push
jnp
out
fld
lods
ds
cmp
pop
xor
dec
dec
push
hlt
lods
cmp
add
jle
push
inc
pop
sub
mov
test
enter
ja
ror
inc
xor
mov
jle
jbe
push
xchg
sahf
or
fild
mov
mul
sbb
cwde
mov
xchg
(bad)
pop
fcomip
jb
imul
cdq
out
popa
sahf
out
inc
pop
adc
imul
pusha
or
mov
inc
sub
das
add
std
mov
pusha
ss
in
test
inc
adc
cmps
xor
cdq
repnz
addr16
sub
(bad)
aam
sub
mov
jo
cmp
icebp
mov
mov
jne
add
ins
in
das
sbb
inc
mov
jnp
sahf
dec
jnp
mov
mov
cmp
inc
in
es
retf
int
test
inc
repz
push
(bad)
sbb
outs
(bad)
or
jns
xchg
mov
sub
dec
pop
xor
dec
mov
pop
lock
std
jp
addr16
cmc
test
jb
push
cli
lock
aaa
push
push
add
ror
lock
add
inc
and
imul
das
retf
aad
xlat
movs
pop
xor
imul
call
ins
adc
xor
mov
bndldx
in
dec
mul
xlat
mov
dec
mov
scas
sbb
sbb
hlt
cmp
sub
loopne
fld
jns
mov
data16
movs
mov
or
test
scas
cmp
push
mov
sahf
adc
cmp
lods
xor
mov
sahf
inc
mov
xor
mov
movs
rol
and
push
out
outs
stos
lds
add
rol
outs
push
mov
aaa
add
leave
jno
add
sub
retf
sbb
daa
scas
test
and
lods
cwde
out
sbb
push
and
shr
(bad)
lods
std
adc
jmp
es
adc
pop
dec
ins
and
or
xor
xchg
call
pop
imul
aas
push
xor
add
mul
cmc
xchg
mov
rol
xor
sub
dec
and
test
mov
out
neg
icebp
enter
push
add
xchg
jg
aad
xor
in
pop
addr16
adc
cmp
jmp
cdq
out
mov
fld
sti
sub
icebp
mov
cdq
jge
inc
lds
std
mov
in
(bad)
mov
mov
sub
(bad)
icebp
out
push
rcr
fstp
icebp
rcl
pop
dec
jmp
fdiv
aaa
ss
sub
es
jecxz
mov
mov
in
mov
push
and
mov
mov
mov
jmp
lock
sbb
mov
jge
xchg
lahf
test
popf
dec
ds
mov
mov
retf
das
jmp
push
ret
aam
pop
popa
imul
sub
xchg
sub
dec
dec
jmp
not
and
jle
fdivr
jb
sahf
xchg
xchg
loop
addr16
push
and
lock
scas
and
retf
cld
sbb
cli
jle
test
lock
jno
sbb
jle
xor
xor
addr16
cmps
pop
fs
lahf
mov
in
mov
or
inc
and
or
cdq
imul
or
push
cs
scas
enter
mov
stc
xchg
lahf
mov
mov
mov
pusha
aad
pop
xchg
icebp
retf
push
in
dec
jnp
mov
(bad)
push
mov
mov
xlat
(bad)
add
dec
icebp
int
nop
jnp
inc
aas
xchg
pop
pop
scas
cmp
mov
addr16
inc
sbb
mov
mov
pop
pcmpeqd
push
cli
mov
mov
sub
sub
xor
mov
add
jp
cmps
movs
adc
add
test
cmp
je
(bad)
jnp
sbb
pop
fadd
das
cmp
jbe
adc
dec
push
dec
bound
and
cmp
xlat
test
mov
mov
test
ja
in
and
into
hlt
test
ret
je
xor
icebp
popf
cmp
xchg
ins
mov
inc
gs
pop
push
imul
xchg
es
mov
fisttp
mov
adc
xchg
out
jecxz
pusha
lods
or
ja
push
mov
mov
add
inc
push
cli
or
(bad)
stos
inc
xor
sti
add
aad
mov
(bad)
xchg
imul
mov
popa
int
jbe
iret
mov
and
mov
cmp
jp
ins
inc
push
xor
pop
sbb
mov
(bad)
in
(bad)
push
sahf
pop
push
adc
ret
test
mov
pusha
shl
fisttp
mov
push
ror
dec
and
xchg
sub
adc
pop
pop
cwde
cmp
and
clc
sub
stc
inc
inc
push
push
push
add
mov
(bad)
out
and
fwait
push
adc
jno
lods
xchg
cmp
pop
inc
adc
pop
cwde
sub
mov
fisubr
xor
jnp
and
jno
ror
mov
std
mov
call
sub
sbb
inc
and
(bad)
mov
pusha
aam
xlat
loop
pop
push
mov
aad
xchg
stos
fs
mov
jbe
or
repnz
jo
or
adc
push
addr16
(bad)
out
pop
jbe
jo
jb
xchg
fcmove
cmp
xchg
dec
jecxz
popf
jb
jae
out
push
adc
dec
and
add
pusha
sub
psubb
mov
push
mov
pushf
dec
out
xor
arpl
movaps
xchg
mov
loopne
scas
or
push
cwde
push
adc
xlat
cwde
mov
fdivr
inc
leave
add
xchg
out
ret
mov
dec
(bad)
push
xchg
jmp
sbb
and
repz
sub
ss
xchg
mov
(bad)
leave
cmp
and
je
cmp
sbb
cs
sub
addr16
xchg
arpl
(bad)
jmp
fs
ins
out
sbb
jo
sub
out
cs
scas
add
and
push
and
or
add
outs
in
pusha
pusha
xor
fcmovnu
data16
clc
push
loop
xor
lahf
xor
sub
jp
enter
xor
(bad)
fcom
cmp
sbb
push
push
in
cmp
sub
lods
mov
and
mov
rcr
gs
js
es
cmp
jo
sub
and
sub
cld
mov
inc
inc
ss
daa
mov
or
gs
rcl
add
mov
out
loop
xchg
fsubr
aad
ins
movs
pop
mov
lahf
push
stos
(bad)
retf
(bad)
fild
dec
xchg
and
sbb
mov
sub
and
mov
stos
dec
pop
hlt
ror
jmp
sub
mov
icebp
and
pop
mov
sub
mov
sbb
cli
test
(bad)
mov
add
dec
fstp
icebp
sahf
xor
mov
mov
stos
push
out
in
or
scas
addr16
lahf
cdq
lock
xor
xchg
inc
pop
dec
iret
(bad)
push
fiadd
xchg
in
outs
pop
mov
lds
out
pushf
and
aam
xor
fcom
call
or
add
ins
inc
mov
mov
mov
sbb
cs
mov
jbe
loope
cmps
and
adc
hlt
jmp
stos
jl
push
ss
jae
jo
retf
and
das
push
stos
cmp
lahf
or
test
call
aaa
dec
or
stc
xchg
lea
test
lahf
mov
jmp
push
test
xchg
sub
mov
cmp
sub
lods
dec
aam
data16
push
stos
lods
outs
fcomp
fidiv
jns
cmp
ret
mov
shl
int
or
mov
inc
cld
xor
inc
mov
add
stos
mov
push
test
inc
stos
lds
mov
jg
ins
mov
sub
sbb
jo
mov
rcl
(bad)
jmp
(bad)
fistp
cmc
sub
push
jecxz
add
loope
out
jle
outs
sbb
fbstp
pop
movs
cmp
xchg
punpckhbw
mov
inc
jl
dec
fldcw
arpl
ins
mov
cmp
mov
mov
mov
cmp
sub
ds
lock
jnp
and
cwde
ss
jb
adc
pop
(bad)
jmp
xchg
into
das
ret
jge
add
jmp
pop
clc
push
data16
and
lds
pop
stos
xchg
sub
xchg
pop
jns
push
out
dec
push
dec
jae
or
enter
imul
or
adc
loop
imul
dec
sbb
iret
sub
jo
loopne
jmp
push
mov
ja
(bad)
div
scas
push
add
mov
inc
ret
ins
jb
xlat
daa
scas
clc
scas
pop
or
inc
xor
bound
aas
movs
retf
lods
pop
and
mov
pop
pop
sbb
int
addr16
pop
adc
dec
inc
pop
scas
push
jge
sahf
cmp
lods
mov
or
sub
movs
jl
sahf
out
std
or
out
push
sbb
jl
scas
cmp
sbb
cld
test
out
jg
in
push
sub
and
test
pop
fist
into
jbe
mov
dec
dec
loope
xchg
inc
push
(bad)
jb
(bad)
push
mov
push
outs
or
test
ret
cdq
sub
test
dec
push
loop
jbe
call
mov
or
scas
xor
inc
fldcw
into
div
lds
iret
shl
mov
mov
iret
je
test
aaa
icebp
sub
sbb
jecxz
aaa
adc
or
pop
and
push
sub
repz
and
inc
sti
push
xchg
cwde
or
(bad)
std
call
shl
stos
imul
repnz
mov
push
and
sbb
and
inc
movs
aam
xchg
add
cmp
rol
daa
cmps
out
push
iret
add
sub
sar
(bad)
and
mov
(bad)
lock
sub
inc
pusha
popa
sbb
fldcw
cmc
dec
inc
mov
sbb
pop
cs
xchg
cmp
jp
jmp
cmc
sbb
pop
enter
push
sahf
pop
cmp
sub
mov
add
pop
inc
push
cld
fimul
cmp
adc
bound
pop
dec
test
xor
dec
jne
fist
push
jmp
push
out
jnp
sub
test
cli
ja
or
out
xor
add
cmp
fnstenv
xor
xor
jbe
(bad)
ds
push
mov
adc
pushf
dec
out
sahf
sub
cli
xor
mov
mov
sbb
ret
in
xor
push
fmul
pop
add
jb
pop
xchg
jb
or
mov
int
adc
sbb
stos
xor
pop
xlat
imul
jb
inc
mov
xor
int3
scas
in
retf
push
call
and
(bad)
mov
pop
out
hlt
mov
sub
arpl
add
sbb
(bad)
mov
jns
cmp
pop
xchg
loop
(bad)
push
rol
lds
pop
sti
fst
test
ins
leave
dec
cmp
ins
into
lods
sub
xchg
test
jmp
push
mov
xchg
xchg
mov
inc
loop
sbb
mov
pop
add
scas
add
push
(bad)
in
and
lods
lahf
sbb
imul
bound
pusha
push
lock
sbb
pop
add
inc
ins
retf
movs
out
push
int
stc
test
xlat
pop
xlat
cs
or
mov
(bad)
es
xchg
rcl
fist
(bad)
in
sub
xor
es
out
scas
outs
push
fidivr
pop
(bad)
jle
push
xchg
adc
loopne
inc
dec
cmp
outs
scas
push
jno
xor
aaa
sbb
xchg
pop
call
cmps
push
cmp
jmp
cld
sub
lock
mov
icebp
lods
out
xchg
in
push
(bad)
push
jnp
mov
sbb
hlt
out
pop
hlt
inc
inc
pusha
fwait
in
scas
push
clc
data16
or
xchg
test
bound
(bad)
push
inc
mov
nop
ds
cmp
nop
xor
fcom
adc
xor
and
les
jmp
jno
(bad)
sub
outs
jle
(bad)
sbb
hlt
outs
ss
loopne
call
jg
imul
mov
dec
(bad)
fadd
and
movs
and
fidiv
xchg
push
jae
loope
jns
push
push
fdiv
mov
data16
sbb
sub
adc
xchg
outs
icebp
and
jnp
pop
lea
mov
jle
lods
dec
mov
repnz
dec
daa
retf
stos
mov
jbe
xchg
retf
stos
xchg
xor
push
nop
xor
mov
adc
movs
push
cmp
fs
sub
jb
cmp
or
shr
test
arpl
retf
mov
fucomip
xchg
frstor
cmp
mov
out
add
or
mov
sahf
(bad)
enter
push
loopne
mov
mov
mov
outs
iret
dec
std
clc
sub
xor
dec
sbb
jae
aam
ror
xor
out
dec
xchg
sbb
mov
sahf
push
mov
lock
addr16
or
test
fist
push
test
jb
(bad)
sti
rcl
jmp
stos
sbb
jnp
mov
jo
dec
cmp
les
add
xchg
leave
clc
hlt
nop
and
xor
mov
dec
mov
xor
jno
jne
mov
cmp
cmp
scas
out
or
sbb
ret
and
mov
dec
push
mov
loop
pop
cmp
xchg
add
xor
mov
ret
xor
or
or
mov
out
adc
into
shr
fild
jmp
cmps
sub
and
sbb
jmp
mov
mov
push
lahf
mov
inc
stos
adc
xchg
mov
jg
call
pop
push
add
mov
ret
and
jg
adc
cdq
fptan
push
jo
in
mov
mov
fcmovnbe
and
lock
mov
clc
and
mov
imul
jns
jl
iret
mov
or
out
adc
sbb
popf
fcmovne
clc
das
push
aad
sub
or
mov
(bad)
push
(bad)
xchg
inc
pop
cmp
xchg
scas
mov
inc
in
mov
into
cmp
jns
retf
or
jge
shr
popa
retf
sbb
xchg
call
nop
and
loop
inc
xor
mov
xchg
loop
fcomp
jle
xchg
sub
in
push
dec
loope
or
(bad)
jo
inc
mov
imul
dec
mov
jg
sub
jnp
add
mov
in
cmps
push
fsub
xor
movs
call
retf
mov
ja
xchg
ficomp
adc
jl
jbe
mov
pop
imul
shl
movs
push
pop
cs
xor
cmp
cmps
jne
xor
pop
(bad)
pop
scas
lods
adc
call
adc
mov
ins
mov
xlat
mov
mov
leave
or
lahf
scas
inc
mov
cmp
sub
jmp
in
ss
and
adc
(bad)
in
les
sbb
pop
les
pop
in
adc
popf
das
push
in
and
cs
sti
inc
dec
push
pop
cwde
mov
(bad)
bound
das
loop
ins
fist
xchg
cmp
ss
mov
aaa
(bad)
div
mov
out
(bad)
lods
jp
inc
or
loopne
dec
or
push
test
rcr
fsubr
xor
inc
mov
xchg
mov
rol
inc
clc
cmp
int
ja
rcr
mov
out
mov
or
push
adc
std
adc
imul
clc
jbe
dec
in
das
cmp
aad
in
cmp
pusha
or
mov
mov
ins
push
popa
ins
sub
call
bound
out
xor
mov
lahf
call
jmp
jge
mov
outs
mov
cmp
retf
shr
push
mov
out
lock
test
es
jmp
sbb
adc
push
mov
lock
data16
add
push
aad
inc
jb
mov
or
mov
push
jp
jl
add
fsub
lock
ffree
push
cmp
lds
inc
pop
cmps
sub
lock
jns
in
fs
cmp
lahf
std
add
ss
inc
xchg
dec
or
cmp
fdiv
mov
in
ins
es
and
sub
test
inc
stc
dec
jae
cmp
rol
ins
pop
lahf
cmp
sbb
repnz
and
ds
pop
and
sbb
hlt
pusha
jecxz
fidivr
adc
iret
faddp
mov
xor
push
aad
div
pop
popf
in
push
rcr
outs
xchg
xchg
pop
outs
fsubrp
ss
cmp
dec
and
and
jns
aaa
jmp
cld
push
fdiv
lods
call
jmp
mov
push
leave
pop
push
sbb
fcom
movs
cdq
adc
sbb
jo
aas
and
add
add
xor
pop
inc
pop
fisubr
dec
aaa
cmp
inc
fidiv
xor
lock
xor
xor
out
jae
je
xor
jae
xchg
xchg
out
nop
daa
push
(bad)
repz
addr16
inc
loopne
jmp
shl
and
adc
push
rcl
fmul
(bad)
push
cmp
jg
jmp
or
xor
jmp
xchg
mov
jecxz
dec
xor
mov
test
addr16
add
xchg
gs
fwait
retf
movs
leave
add
cmp
adc
push
mov
neg
cwde
daa
loop
xchg
pop
adc
out
fxam
xchg
adc
sub
out
xor
cmp
and
out
jl
hlt
icebp
jns
or
jmp
adc
retf
sbb
jmp
mov
pop
push
xchg
arpl
out
and
ror
rol
(bad)
xchg
clc
and
enter
lea
xchg
mov
push
(bad)
ins
and
xchg
xchg
cwde
push
dec
adc
adc
or
lods
and
push
sub
sbb
xchg
or
xor
icebp
or
xor
mov
repnz
dec
stos
stos
test
nop
sbb
sahf
or
or
push
je
pop
push
sub
sub
jae
aad
loope
inc
sti
test
inc
sub
repz
loop
xchg
pusha
stc
enter
xchg
push
loope
int3
and
dec
jns
(bad)
dec
icebp
nop
repz
fbld
popa
push
lahf
pushf
aad
adc
(bad)
outs
iret
loope
fs
(bad)
xchg
in
add
mov
rcl
sti
mov
data16
ss
scas
sbb
jecxz
les
dec
push
mov
outs
adc
fisubr
push
scas
and
dec
shl
mov
cwde
add
mov
lahf
jnp
pop
push
fdiv
inc
xchg
pop
mov
je
ja
es
and
cmps
and
icebp
jp
ret
mov
in
test
(bad)
xchg
add
stos
dec
in
or
cmp
ins
scas
mov
sub
(bad)
adc
jno
pop
xchg
xchg
sub
jae
jno
out
inc
mov
sbb
rol
jns
sbb
lock
xchg
mov
cli
sbb
mov
xchg
ins
and
dec
(bad)
movs
scas
xchg
jle
pop
sbb
mov
cmp
dec
lods
jle
and
add
pushf
mov
sbb
fs
jl
adc
dec
fs
inc
jg
push
mov
mov
(bad)
div
jle
popa
inc
push
cmc
imul
popf
leave
neg
mov
add
retf
pop
mov
inc
push
scas
in
iret
loopne
imul
stos
in
out
cld
loopne
or
or
(bad)
sub
cmp
xchg
ds
mov
cmp
cwde
sub
xchg
out
mov
push
jle
dec
pop
and
ins
cmp
push
mov
or
push
inc
dec
test
sar
or
cmp
xchg
movs
inc
imul
mov
popa
pop
cs
leave
pop
(bad)
fdiv
fsub
cmp
xchg
call
fdivr
or
xor
stos
mov
lods
add
or
out
jl
daa
iret
fstp
xchg
cmc
inc
xor
ss
fld
jo
pop
jmp
xchg
iret
push
in
stos
jo
jnp
pusha
jno
mov
out
lock
cmp
jg
(bad)
cmps
mov
lahf
jbe
sti
pop
sbb
mov
(bad)
cmp
shl
push
ror
pushf
popa
lea
jmp
mov
pop
add
add
and
xchg
inc
lods
xor
dec
stc
inc
ins
int3
xlat
add
dec
cli
jmp
cmp
adc
and
xlat
(bad)
imul
mov
sub
push
lods
sub
rcr
pop
out
bound
cmc
into
das
mov
lods
mov
pop
jbe
xor
xchg
push
cmp
fdivr
or
in
push
xchg
repnz
test
ds
fs
mov
loop
xor
push
cmps
pop
add
xor
mov
xor
daa
mov
ficom
mov
sbb
push
dec
out
pop
or
mov
mov
xlat
jle
ret
jb
xor
pop
repz
pusha
mov
pop
mov
stc
mov
out
(bad)
dec
xchg
lods
loop
pop
adc
pop
es
loop
movs
pop
and
popf
lods
adc
lock
(bad)
cmc
bnd
cmp
cmc
in
retf
mov
pop
inc
xor
scas
ss
inc
mov
shl
repz
ret
xlat
fwait
jnp
mov
jmp
test
hlt
xor
scas
jle
sub
dec
test
jecxz
ds
sar
dec
push
pop
icebp
shl
jp
loopne
or
pop
aaa
mov
adc
shl
ret
pop
arpl
dec
mov
cmps
and
sbb
lahf
rcr
mov
ret
pop
xlat
loopne
push
inc
cmps
sbb
or
or
aaa
dec
sti
lock
or
shl
mov
and
pop
pop
cmps
and
bound
arpl
sub
hlt
xchg
clc
adc
xchg
mov
aas
in
das
adc
mov
or
sbb
jo
dec
cmc
sub
lds
add
or
fcmovne
jno
ja
lock
mov
mov
fst
inc
jns
mov
dec
adc
scas
jle
nop
adc
dec
leave
(bad)
cmp
fcom
sar
mov
dec
js
ins
shl
sahf
sahf
jmp
cmc
stos
xchg
adc
cmc
push
add
add
push
outs
jmp
sar
xchg
cdq
mov
and
loopne
lea
call
push
stc
fsub
or
rol
pop
loope
test
ds
push
shl
pop
imul
xor
cs
test
xchg
dec
out
aad
xchg
jns
push
or
mov
idiv
or
int3
dec
fild
aaa
jge
scas
std
aam
in
in
mov
mov
call
mov
push
fwait
out
xor
sbb
jmp
add
jnp
std
icebp
inc
sub
add
sub
jmp
mul
retf
adc
pop
std
inc
rcr
mov
out
inc
push
and
clc
push
cmp
push
int3
and
sti
inc
shl
jmp
push
sbb
xchg
(bad)
paddq
nop
push
lods
xor
jg
std
mov
push
fnsave
ds
int
dec
leave
sti
fwait
push
nop
and
jb
jmp
cmp
aaa
test
xor
and
(bad)
cmp
and
mov
retf
rcr
mov
dec
movs
add
int3
xchg
dec
jmp
xor
pop
jb
sub
cld
pop
push
fwait
jmp
push
jg
ror
ss
and
sbb
cmps
ficom
ffreep
mov
test
in
cmp
frstor
call
retf
in
jmp
push
fist
imul
cmp
in
jp
movs
or
and
sar
adc
test
jno
jne
mov
cmc
xchg
xor
test
bound
std
push
stos
xlat
mov
pop
in
mov
out
xchg
push
cmps
or
push
sbb
xchg
push
stc
(bad)
call
and
jg
ins
loop
lods
sbb
jmp
es
cmp
add
mov
test
loope
mov
adc
adc
jle
mov
xor
push
xchg
inc
pop
call
jae
adc
push
and
xchg
aad
jle
pop
mov
ret
sub
sub
aaa
mov
in
pop
jmp
das
push
mov
out
fldenv
sub
pop
les
xchg
test
push
mov
mov
fistp
in
inc
jmp
dec
arpl
push
ret
jbe
scas
repnz
jns
aam
fwait
mov
lahf
adc
push
jne
mov
js
or
fimul
mov
(bad)
retf
iret
pop
fistp
inc
xchg
and
jg
in
(bad)
xchg
add
jno
or
mov
add
inc
adc
and
jecxz
and
(bad)
pop
push
scas
lahf
shr
cmp
mov
lds
jmp
dec
fnsetpm(287
pop
cmps
js
add
jmp
(bad)
mov
dec
enter
data16
out
pop
cwde
and
cmp
rol
sub
test
stos
xor
shr
(bad)
sbb
fwait
push
ins
retf
jne
xchg
xchg
mov
xlat
xor
sub
inc
sub
cmp
hlt
fs
mov
push
ds
or
and
push
dec
mov
test
test
sbb
ja
or
jecxz
dec
add
in
and
clc
jecxz
or
adc
frndint
push
ins
xor
push
fistp
push
pop
test
(bad)
or
xchg
sbb
addr16
out
outs
mov
pop
xchg
ficom
jno
xchg
push
cmp
mov
jno
cmp
out
cs
sar
jl
je
les
xchg
je
cmp
std
sbb
imul
and
add
mov
les
jns
jge
fs
movs
add
sub
and
je
bswap
mov
scas
ret
lds
xchg
(bad)
out
je
icebp
out
inc
and
fld
sbb
(bad)
cmp
stos
sbb
mov
xchg
adc
retf
dec
in
mov
inc
aad
(bad)
ret
aad
rcl
out
and
(bad)
mov
pushf
adc
add
mov
out
mov
int
push
(bad)
aas
repnz
mov
jge
jge
fstp
aaa
mov
mov
arpl
dec
and
shl
outs
xor
cmp
dec
popa
lods
dec
sub
pcmpgtb
outs
lods
xchg
lock
or
retf
popf
push
aaa
iret
cmp
rsqrtps
push
mov
push
pop
test
(bad)
mov
inc
fimul
ror
sub
inc
stos
ror
adc
mov
fwait
and
cmps
adc
mov
fwait
xor
jg
jp
ins
adc
scas
in
(bad)
shl
cmp
test
xor
call
aad
cmp
push
and
lods
out
xchg
dec
ins
xchg
xor
rcl
out
dec
pop
movs
sti
or
mov
cs
ror
lock
xor
retf
into
xor
mov
mov
ins
inc
sbb
inc
repnz
ss
out
sub
mov
(bad)
ret
mov
(bad)
jnp
and
mov
(bad)
aam
(bad)
fistp
jge
cmp
cmc
ja
dec
mov
(bad)
fld
and
mov
push
push
js
neg
mov
and
fcomp
pop
rcl
xchg
mov
inc
clc
or
int
xor
push
cmps
dec
jg
mov
adc
push
mov
sahf
hlt
inc
stos
and
mov
or
js
xchg
jl
out
(bad)
int3
push
loopne
sub
xchg
xchg
stc
xchg
sbb
imul
or
pusha
fistp
out
xchg
pushf
add
jge
push
mov
movs
aaa
sub
cmp
and
loop
xor
sbb
push
int
push
xchg
xor
repnz
lds
in
ins
loop
mov
inc
shl
nop
clc
mov
xchg
mov
mov
or
add
pop
pushf
lods
cmp
sbb
aas
jb
mov
(bad)
rcl
inc
jb
repz
jmp
pop
push
leave
frstor
dec
pcmpeqd
in
adc
or
mov
lods
cld
jle
mov
jp
jae
jl
sbb
dec
movs
inc
inc
mov
aas
fucomip
jecxz
lods
and
add
sbb
fadd
ins
pop
nop
arpl
ins
(bad)
lods
xchg
sbb
in
outs
rcl
xor
je
pop
(bad)
fisttp
mov
mov
mul
mov
sub
ffreep
push
mov
lods
sub
push
push
loope
pop
sbb
mov
and
fistp
in
cmps
push
xor
mov
bound
repnz
jmp
fwait
cld
mov
mov
fbstp
lock
push
iret
ja
aam
imul
fcomi
pop
sub
std
and
cmp
push
xchg
jo
fist
cmp
xchg
xor
out
xor
and
hlt
data16
fwait
cmp
adc
jg
jge
dec
rol
pusha
push
outs
(bad)
sbb
cdq
pop
mov
and
mov
pop
sbb
jns
mov
jo
pop
into
xor
jns
out
and
add
mov
jle
retf
into
inc
xchg
sbb
inc
mov
mov
and
dec
and
push
jge
sub
xchg
mov
xchg
jne
xchg
and
mov
adc
mov
jp
lods
les
fsubr
mov
popa
fimul
xchg
pop
es
jmp
mov
(bad)
fild
sub
pop
ds
lods
push
cmove
outs
cmp
xchg
aam
out
fist
leave
fcomp
dec
in
fs
into
add
out
xor
xchg
call
inc
and
ds
js
in
imul
and
aaa
jle
jo
test
jae
movs
out
repnz
sub
mov
mov
lahf
push
inc
test
hlt
and
push
push
pop
ja
cmp
adc
sub
inc
adc
ins
pop
cmp
push
push
sub
push
mov
aas
push
arpl
addr16
stos
cmp
push
mov
lods
lods
lods
std
add
test
cld
ins
fsub
jbe
mov
ins
(bad)
aas
mov
jae
fild
add
add
xchg
push
mov
clc
pop
test
(bad)
sbb
lahf
jle
pop
push
movs
popa
ins
mov
sub
aas
mov
xchg
cli
jmp
xchg
outs
push
popa
sub
sti
clc
cmp
(bad)
in
and
add
std
rcr
ficomp
xchg
xchg
xchg
(bad)
xchg
imul
in
cmps
enter
shl
sub
lods
ret
(bad)
ror
push
push
or
adc
shl
jbe
mov
cli
cmps
mov
(bad)
stc
(bad)
stos
adc
jno
stos
sahf
fcmove
dec
loope
cmp
push
mov
inc
dec
jne
pushf
call
pop
(bad)
push
inc
rcr
xor
xor
lods
mov
mov
ret
pop
xor
mov
jle
or
icebp
into
sbb
dec
nop
push
loopne
xor
inc
jge
or
dec
cmc
popf
jb
adc
(bad)
clc
mov
mov
dec
jp
push
test
imul
sti
mov
jle
les
pop
add
inc
add
fiadd
repnz
or
push
or
jno
loop
arpl
push
sti
mov
xor
push
jmp
outs
cmp
lods
xchg
mov
(bad)
xor
mov
pop
mov
imul
rol
adc
sub
call
jno
mov
lods
mov
popf
dec
ins
shr
xchg
mov
jbe
repnz
addr16
fcmovbe
hlt
mov
ret
or
in
ret
push
mov
jl
cmp
(bad)
das
pop
jo
outs
sbb
jg
ret
mov
fld
dec
add
nop
int
dec
scas
adc
sbb
dec
mov
sub
jl
stos
imul
dec
sbb
ds
aad
fs
push
enter
call
stc
out
mov
popf
in
pop
outs
mov
scas
or
xchg
ins
mov
xor
xchg
cs
cmp
dec
cs
out
call
in
das
mov
rol
push
movs
mov
test
jnp
fisub
sti
add
gs
(bad)
iret
rol
push
jae
mov
cmc
and
push
int3
addr16
sub
cli
jmp
or
fmul
jge
mov
or
sub
imul
adc
fucom
out
pop
into
movs
ja
mov
or
in
push
sub
adc
jnp
cdq
pop
(bad)
xor
sub
sbb
cmp
shr
mov
loope
or
add
add
nop
or
push
ret
inc
(bad)
in
ins
add
enter
fs
pusha
mov
pop
cmp
sub
cmp
mov
loope
aad
ja
into
mov
jp
pop
push
add
sub
cmp
in
or
and
addr16
out
sbb
mov
adc
gs
sahf
cmps
leave
imul
push
adc
pop
cmps
add
loop
test
pop
and
mov
inc
adc
adc
or
push
retf
mov
pushf
dec
sub
repz
sub
dec
mov
retf
pop
(bad)
call
mov
leave
and
jp
out
ror
cmp
cmp
mov
jl
push
mov
daa
adc
iret
call
lds
mov
repnz
cmp
or
sbb
ror
out
mov
lock
sub
(bad)
mov
xor
in
or
sbb
popw
in
add
mov
pop
fcmovu
aaa
pop
nop
aas
jo
xor
add
int
adc
mov
les
mov
xchg
mov
repnz
inc
sub
mov
sub
mov
outs
stc
movs
test
and
inc
adc
iret
out
mov
ins
shl
dec
xor
sub
icebp
push
icebp
jle
outs
adc
mov
sti
fisubr
addr16
xor
pusha
sbb
push
leave
jl
pop
add
in
and
lods
in
rcr
push
inc
int3
or
adc
repz
retf
adc
dec
into
mov
movs
aaa
push
and
lahf
push
jmp
add
cdq
cmp
call
popf
addr16
jb
(bad)
in
cmp
rol
xor
mov
fdivr
pop
stc
fld
xchg
sahf
dec
sbb
int
inc
push
enter
add
and
mov
cmp
push
pop
pop
sahf
arpl
xchg
in
xor
imul
adc
cwde
outs
cmp
ds
movs
imul
inc
dec
dec
or
mov
test
jne
xchg
jp
inc
sbb
xor
mov
pop
in
add
pushf
push
ret
push
push
outs
call
arpl
add
jae
inc
fst
punpckhdq
into
sub
leave
mov
push
jl
shl
cwde
stc
mov
dec
push
xor
mov
sbb
cmp
gs
mov
test
mov
icebp
cld
mov
ja
jbe
pop
jge
push
je
in
movs
add
adc
cmc
into
out
sbb
sub
(bad)
pop
fninit
xchg
sub
push
adc
mov
jae
lods
pop
mov
(bad)
cmc
(bad)
mov
mov
push
push
sub
add
and
into
mov
test
imul
mov
inc
or
push
lods
in
sub
addr16
in
lock
in
aad
mov
sar
scas
sti
push
jmp
das
cld
pusha
mov
sbb
push
sbb
mov
aaa
ins
shl
out
popa
cmp
scas
pop
inc
cwde
mov
fisub
out
cld
ror
mov
sti
cmp
mov
pop
jg
mov
cmps
(bad)
imul
pop
in
bound
xchg
mov
leave
dec
mov
add
std
pop
mov
inc
pop
shl
adc
adc
in
pop
add
xchg
ins
loopne
jmp
retf
sub
and
adc
pop
ja
sub
int3
hlt
xor
mov
mov
jns
leave
arpl
pop
hlt
divps
jo
jl
aad
out
inc
std
stos
sbb
ins
pop
je
outs
cmps
cld
popa
xchg
xlat
jb
push
in
repz
lods
xchg
mov
pop
fidiv
xchg
sahf
repnz
sbb
iret
jmp
pop
addr16
repz
repz
popf
or
popa
pop
or
mov
lods
sbb
mov
cs
mov
cmps
dec
in
xchg
iret
ja
pushf
gs
das
mov
loop
mov
repnz
stos
ss
jns
jne
xor
or
mov
mov
jg
adc
push
out
xchg
cmc
push
dec
loop
outs
retf
arpl
repz
loop
pop
mov
pop
add
(bad)
jno
(bad)
or
cwde
xchg
xor
sub
fiadd
movs
push
mov
cli
and
and
mov
push
add
mov
and
sbb
repz
mov
stc
daa
jecxz
push
push
int
fcom
dec
pop
movs
dec
arpl
jno
pop
movs
int
sahf
(bad)
fldcw
add
xchg
dec
popa
adc
push
mov
mov
ss
lds
xor
xor
(bad)
iret
sub
je
out
pop
aaa
mov
sbb
stos
movs
push
fnstcw
sub
adc
xchg
dec
jnp
inc
push
fnstcw
gs
jnp
jmp
sbb
(bad)
mov
sahf
lock
and
pop
sbb
or
and
test
fwait
popa
and
fsub
and
mov
mov
js
inc
lods
adc
and
sbb
mov
xchg
movs
sahf
xchg
and
mov
and
aam
aad
jno
and
mov
sbb
in
adc
xchg
inc
jne
jg
test
adc
push
pop
pop
aam
loope
cmp
xor
mov
sbb
aas
mov
jg
pusha
shl
movs
iret
cmp
test
aas
inc
outs
fcomp
dec
call
outs
dec
push
mov
idiv
xor
movs
pop
fdivr
mov
push
and
cmp
push
outs
sar
pop
pop
pushf
mov
xchg
stos
adc
(bad)
xlat
(bad)
out
mov
dec
popf
pop
push
push
inc
push
sub
or
test
push
or
xor
xchg
rcl
scas
fcomp
fmul
pop
inc
pop
dec
test
mov
mov
cli
inc
mov
inc
jmp
mov
in
int3
out
lods
xchg
scas
int3
inc
pop
jo
ret
mov
mov
out
inc
cmc
or
mov
sbb
jbe
jnp
add
mov
std
xchg
int3
mul
cmp
ins
int
adc
les
sub
cmp
cs
scas
push
sbb
push
jp
sub
or
jns
jns
xchg
and
jae
adc
sub
and
or
sar
(bad)
psrlq
std
ficom
int
cld
push
fcom
pop
push
(bad)
js
jp
jg
mov
inc
fisttp
and
int
stc
sbb
adc
adc
je
(bad)
or
mov
cwde
jge
ds
push
shl
push
(bad)
retf
dec
and
cmp
mov
add
stos
cmc
jle
sub
adc
mov
xchg
mov
sub
add
stos
pop
jne
cmc
enter
pop
or
pop
sbb
call
mov
or
xchg
push
shl
imul
inc
jle
repnz
jno
jl
push
sub
xor
imul
adc
adc
mov
or
stc
add
ins
xchg
movs
cli
dec
xor
test
cwde
xor
push
sar
adc
loop
test
sub
mov
enter
imul
cwde
jle
loope
sub
ficom
mov
dec
outs
mov
ds
pushf
mov
xlat
xchg
out
xchg
push
sahf
push
xchg
daa
mov
daa
paddq
mov
mov
fadd
hlt
sbb
adc
fdecstp
cld
int
inc
cmp
movs
add
push
push
mov
sahf
push
lea
(bad)
push
shl
pop
sbb
inc
pop
pusha
push
mov
pop
pop
cmps
mov
mov
xor
mov
inc
fs
adc
sti
and
add
aaa
and
or
xor
std
(bad)
stos
xchg
adc
xor
and
dec
shl
popa
inc
jns
fmul
and
cmps
or
pop
cmps
repnz
test
test
fisub
cmp
cdq
(bad)
jno
or
test
xor
les
imul
jmp
ja
lods
mov
mov
add
cli
pop
fsub
inc
daa
inc
or
jbe
dec
jmp
fsub
mov
push
push
(bad)
sbb
lahf
xchg
inc
(bad)
fild
inc
adc
inc
pop
adc
mov
push
div
mov
enter
sub
xor
mov
bound
dec
mov
and
mov
adc
(bad)
or
mov
xchg
sub
adc
out
add
pop
es
mov
scas
lods
mov
xor
mov
loopne
hlt
imul
cli
mov
repnz
(bad)
fist
inc
adc
cld
neg
(bad)
(bad)
cmp
(bad)
sub
jmp
ja
rol
lahf
inc
into
lea
cmp
jg
adc
mov
clc
je
pusha
jmp
(bad)
into
cmps
lock
adc
mov
sub
loopne
cli
hlt
mov
mov
inc
test
or
adc
xchg
ja
mov
sub
in
imul
test
not
jge
jle
xlat
test
cs
cmp
push
dec
clc
jmp
xchg
nop
mov
jne
in
mov
sahf
xchg
or
cmp
(bad)
sbb
cld
stc
mov
pusha
mov
jecxz
out
in
in
mov
mov
mov
(bad)
pop
adc
push
cli
cmp
in
xchg
pop
and
pop
ss
aas
inc
mov
lock
cmp
push
inc
je
test
sbb
idiv
out
dec
js
and
inc
or
fwait
shl
call
stos
xor
mov
int3
aad
xchg
test
mov
sub
call
and
xor
xchg
in
pop
repz
push
and
inc
mov
sbb
jae
call
sbb
sub
mov
test
jnp
jb
scas
gs
icebp
gs
cmc
mov
xor
mov
test
jmp
jp
or
out
lock
data16
dec
inc
fcomi
pop
mov
mov
jno
lods
loop
bound
pushf
cwde
jle
add
sub
fwait
xor
nop
scas
pushf
pop
es
lods
xor
test
inc
inc
add
dec
inc
sub
fldcw
popa
(bad)
mov
sti
sub
gs
test
adc
fs
and
or
daa
imul
jmp
in
xor
pop
inc
(bad)
repnz
jno
jmp
sbb
(bad)
sbb
imul
into
int3
cmp
adc
in
adc
fidivr
imul
and
push
and
popa
ret
push
pop
nop
jmp
outs
jmp
push
out
push
in
loop
cmp
and
mov
ret
add
mov
pop
rcr
add
(bad)
mov
cmps
stos
daa
mov
loop
repz
cdq
xor
push
ret
mov
shl
lock
inc
dec
xchg
dec
jo
xchg
mov
jb
(bad)
push
das
stc
cmc
loopne
in
mov
test
jnp
inc
repnz
mov
push
jge
xchg
jno
nop
mov
cmp
ins
call
imul
pop
jge
popa
dec
sbb
ds
cwd
sti
test
mov
sbb
(bad)
sbb
bound
jecxz
jo
add
xchg
add
jle
xor
(bad)
sbb
ins
fwait
(bad)
daa
in
dec
or
push
jmp
ins
sbb
adc
lea
xor
cmp
jns
lock
sbb
mov
stos
test
dec
dec
or
std
jns
data16
ins
ja
in
adc
and
jmp
mov
add
mov
cmp
or
push
(bad)
sbb
(bad)
es
or
and
(bad)
mov
xchg
std
cld
xchg
xchg
mov
mov
lahf
pop
leave
arpl
dec
(bad)
xor
mov
das
and
mov
xor
stc
div
mov
data16
pop
pop
dec
mov
pop
sub
or
cmps
or
inc
(bad)
in
stc
addr16
mov
shl
retf
or
je
sbb
pop
out
sbb
xor
jge
call
mov
mov
xor
mov
mov
mov
fistp
mov
xchg
push
add
pop
and
(bad)
xchg
ret
not
mov
mov
cmp
mov
jnp
cmp
jae
cmp
into
adc
icebp
add
shl
inc
out
(bad)
(bad)
mov
scas
dec
dec
fisubr
jmp
jmp
aas
mov
outs
cdq
pop
xlat
ret
xchg
jmp
pop
ror
pop
fidivr
aaa
cli
fisubr
inc
push
add
jb
xor
std
popf
push
dec
jp
out
data16
mov
xchg
icebp
sub
in
outs
sbb
cmp
jmp
xchg
jne
cs
nop
gs
add
mov
gs
mov
and
xchg
in
in
xor
adc
ja
loopne
retf
fisttp
sbb
jbe
xchg
xchg
cmp
xor
sub
cmp
je
popf
jb
push
cld
outs
jbe
pusha
outs
mov
les
pusha
das
push
cmp
mov
push
xor
mov
test
fwait
cmp
push
addr16
mov
jae
sti
xlat
adc
mov
imul
sub
pop
in
inc
addr16
dec
pop
leave
pushf
cmp
cmp
dec
inc
movs
clc
jle
dec
call
pusha
shl
inc
je
or
mov
leave
push
add
(bad)
push
cmpps
lahf
stc
test
xor
int3
enter
xlat
ja
pop
xor
das
scas
push
rcr
push
in
int3
inc
ins
rcl
in
loope
sbb
or
cmp
in
sub
or
aam
cmp
cmps
add
iret
aas
stc
jo
in
sbb
outs
jge
pushf
mov
pop
sub
mov
imul
jge
hlt
rcl
jecxz
loope
js
movs
push
xor
pop
xchg
(bad)
cdq
mov
mov
mov
push
or
shl
loop
enterw
push
jge
push
gs
adc
add
mov
xchg
nop
cmp
popf
fmul
pop
cmps
fcom
xchg
pop
out
sub
mov
repz
test
sub
sub
fwait
push
cmp
xchg
push
push
and
adc
dec
cdq
stc
(bad)
mov
les
cdq
outs
cld
inc
jecxz
sbb
shl
dec
call
scas
and
push
clc
mov
pop
xor
and
or
mov
aaa
inc
cmp
push
or
outs
and
adc
push
add
mov
ret
in
movs
sti
arpl
xor
and
ret
or
(bad)
mov
adc
pop
mov
and
inc
dec
call
push
xor
and
jle
dec
mov
push
or
test
clc
push
enter
test
dec
xchg
adc
jle
movs
pop
stos
fidivr
mov
sbb
adc
in
adc
push
adc
in
cmps
push
jp
ss
pop
fwait
daa
mov
pop
dec
xchg
movs
repz
ins
imul
popa
mov
std
sub
sti
mov
adc
cmp
out
aam
or
dec
inc
fiadd
jne
mov
adc
movs
and
sahf
js
jge
cs
mov
jecxz
inc
fsubr
pop
push
gs
popa
push
dec
mov
xchg
adc
jge
sbb
outs
xor
cmp
imul
leave
push
inc
mov
mov
aaa
sti
push
mov
test
sbb
out
fwait
pop
pop
xchg
nop
xor
add
mov
and
pop
fs
scas
sub
xchg
pusha
jmp
mov
xchg
popf
out
(bad)
fs
and
out
rcl
and
ret
adc
pop
push
sbb
push
daa
xor
add
adc
leave
je
xchg
ficom
add
sbb
cmp
inc
rep
mov
mov
shl
in
mov
add
sub
add
cmps
iret
push
pusha
adc
adc
dec
leave
mov
pusha
shl
cmp
push
repnz
mov
xor
leave
cmp
call
pushf
sub
and
dec
fld
(bad)
xchg
pop
push
push
ja
mul
mov
mov
jno
lods
dec
(bad)
xor
ret
movs
stc
loope
pop
push
fwait
pop
nop
inc
daa
cmp
int
and
loope
adc
jecxz
lea
in
adc
dec
jne
mov
xor
jno
adc
int3
leave
es
mov
mov
mov
call
push
pop
inc
and
mov
dec
inc
xor
dec
iret
stc
push
ja
nop
mov
std
cmp
stc
fimul
test
mov
popa
inc
mov
jne
mov
jb
inc
pop
xor
lods
lahf
mov
mov
(bad)
sbb
push
jmp
lock
hlt
cdq
das
jo
mov
arpl
jg
cdq
enter
stos
sub
repnz
in
jmp
fs
inc
fwait
mov
pop
xor
mov
cmp
and
stos
fld
pop
cwde
(bad)
test
add
bndstx
cmp
dec
mov
and
dec
iret
nop
mov
push
ds
les
sti
mov
adc
test
std
mov
pushf
or
out
mov
mov
and
adc
xchg
(bad)
jo
cmps
add
push
jno
and
mov
out
js
push
outs
inc
xchg
jbe
int3
xchg
jg
mov
addr16
xor
sub
sbb
push
fsub
xchg
sbb
adc
pop
cmps
add
mov
and
mov
inc
mov
cdq
mov
and
or
and
jl
(bad)
in
mov
out
or
sub
les
dec
dec
sti
xchg
pop
outs
ret
nop
jg
jmp
or
adc
fisub
mov
push
xchg
or
mov
xlat
sub
test
sahf
pop
jp
jg
shr
les
fstp
mov
mov
pop
xchg
adc
adc
add
sti
xchg
outs
dec
mov
or
xor
push
nop
xchg
xlat
dec
sub
add
(bad)
pop
cmps
pop
leave
xor
pop
cmp
(bad)
ss
push
xchg
call
pop
dec
ss
mov
pop
arpl
aad
dec
in
ja
sahf
enter
adc
(bad)
adc
push
sbb
ja
jg
repz
and
loope
je
cmps
dec
mov
pop
mov
and
jmp
xor
or
imul
xchg
mov
ror
adc
mov
aaa
adc
ins
pop
or
or
mov
test
mov
add
into
loopne
push
jl
jmp
stos
repz
movs
and
imul
psubq
fimul
pop
mov
sub
jae
mov
cs
mov
pop
shl
loope
push
pop
in
ror
xchg
loop
repz
repz
lods
cld
pop
sbb
jg
sub
cmp
pushf
adc
add
(bad)
jp
sub
jo
mov
sbb
(bad)
in
fdivr
sbb
pop
arpl
daa
call
push
pop
push
and
scas
sub
(bad)
call
add
dec
mov
xor
clc
xchg
sbb
ins
(bad)
xor
mov
inc
mov
sbb
inc
push
cmp
push
jmp
or
and
pop
xor
cmp
add
test
jecxz
sub
out
dec
lock
xor
ds
sub
repz
fild
es
hlt
push
mov
popa
sbb
rcr
stos
(bad)
and
popf
dec
int
sbb
dec
mov
push
js
cmps
mov
out
inc
rcl
adc
pop
not
call
jb
inc
or
cmps
adc
scas
out
push
adc
sub
add
bound
add
std
mov
mov
out
and
aaa
shl
fwait
lahf
popf
inc
add
cdq
pop
jbe
push
in
cwde
mov
ins
cld
inc
adc
push
bound
jge
(bad)
jne
cwde
(bad)
jnp
jl
jp
loopne
mov
dec
cwde
sub
inc
inc
xchg
out
out
jae
jl
test
in
push
sbb
mov
lods
xchg
push
xchg
mov
ins
mov
repnz
mov
sbb
push
sbb
push
xor
push
mov
xor
hlt
jmp
sbb
sub
add
jge
bound
xchg
das
mov
in
xor
fcmovb
sub
iret
sahf
mov
cmp
call
xchg
aaa
mov
popf
push
enter
or
icebp
stos
pop
and
bt
or
push
movs
stos
popf
loope
add
or
mov
xchg
xchg
data16
imul
pop
and
cld
addr16
mov
ror
mov
int
push
mov
into
mov
lahf
lods
mov
sti
adc
js
out
sbb
xor
outs
int
outs
mov
or
out
enter
enter
(bad)
or
push
or
loop
loop
in
das
inc
arpl
movs
mov
cmp
sbb
mov
scas
pop
test
daa
dec
stos
ins
int3
rcl
xor
stos
lods
mov
and
mov
jae
cmps
(bad)
in
pop
push
ins
jne
or
int3
pop
(bad)
ss
mov
not
scas
(bad)
dec
push
js
pop
fisttp
scas
mov
sub
sub
mov
jae
jge
mov
fisubr
dec
inc
jle
cmp
xlat
movs
or
jmp
pop
adc
pushf
es
xor
add
xchg
ja
ret
push
jmp
adc
sysexit
push
sti
test
dec
inc
ret
movs
int3
movs
mov
dec
add
xor
sub
bound
adc
stc
cmp
loope
adc
rol
div
ss
ds
pop
jnp
add
push
stos
jl
arpl
ins
fbld
xsavec
loop
lods
jnp
clc
les
jae
jg
inc
jge
bound
lds
sub
arpl
sub
paddsb
sbb
jle
push
cs
comiss
push
das
ficomp
xor
jp
push
fmul
(bad)
inc
push
aas
sub
mov
jmp
pop
cmps
mov
inc
stos
sbb
jmp
das
xchg
add
popf
sub
sbb
lock
lods
mov
mov
mov
mov
mov
adc
push
jmp
cli
adc
jno
and
test
xchg
push
dec
or
nop
jg
es
pop
push
and
add
ror
or
imul
les
fistp
nop
and
in
adc
sbb
inc
adc
leave
xor
inc
out
pop
jmp
or
ret
mov
aad
and
imul
xchg
vpmuludq
lock
out
push
test
inc
pop
scas
daa
jno
jecxz
call
iret
fcom
xchg
in
or
or
sub
aaa
mov
sbb
push
shr
bound
mov
jb
outs
clc
inc
movs
sbb
(bad)
shl
jmp
ja
and
out
jg
inc
cwde
jmp
sub
or
popf
mov
jmp
sbb
out
push
pop
push
or
rcr
cmp
ret
scas
int
mov
out
aam
jg
into
push
cmp
adc
inc
std
idiv
push
fmul
stc
mov
out
or
mov
mov
mov
mov
stc
fprem
je
(bad)
out
lahf
push
cmovns
add
arpl
mov
xor
pop
or
jnp
pop
xchg
jmp
bound
jmp
xor
dec
mov
sub
mov
jns
mov
cmps
out
pusha
cwde
mov
inc
out
push
inc
repz
sbb
or
inc
out
cmc
add
pop
mov
clc
jnp
repz
push
pop
fidivr
fwait
and
cmps
mov
(bad)
clc
call
xchg
sub
leave
xlat
push
nop
cld
jo
neg
inc
mov
sbb
ins
pop
xor
cmp
in
aam
mov
sbb
test
std
pop
jmp
loop
stc
popf
fistp
loopne
jl
hlt
in
pop
(bad)
jmp
xchg
mov
cmp
loope
stos
sub
out
fmulp
or
add
cmp
(bad)
mov
pop
in
mov
ret
pop
push
cmp
inc
in
mov
mov
sub
ror
cmp
hlt
mov
lahf
popa
pusha
sub
mov
stos
jl
movs
jmp
mov
xor
mov
or
and
ss
mov
enter
call
pop
enter
jne
cmp
push
(bad)
fldenv
xor
and
ins
or
mov
adc
dec
xor
test
mov
sbb
mov
sub
rol
pop
ja
mov
push
jno
out
push
fild
ds
fcomp
push
neg
nop
jmp
bound
or
cdq
fs
lds
lahf
imul
inc
je
fdivr
dec
xchg
cmp
sbb
addr16
aad
fcomp
(bad)
jnp
jecxz
das
bswap
es
fwait
shr
inc
mov
push
jne
(bad)
xor
fs
lods
jecxz
inc
push
cmps
(bad)
aaa
xchg
pop
(bad)
sbb
mov
or
mov
mov
mov
jmp
into
mov
adc
jle
das
mov
retf
and
add
sub
shl
retf
mov
cld
mov
xchg
cwde
push
out
cmp
and
push
test
mov
(bad)
movs
movs
jns
or
ret
shl
inc
sub
cmps
dec
out
mov
push
repnz
fst
dec
pop
stos
cmc
(bad)
rol
mov
pop
xchg
call
mov
and
jne
mov
jbe
mov
ds
test
xor
aam
and
sbb
push
fsubr
sub
sqrtps
fisttp
inc
mov
and
outs
(bad)
in
outs
test
jns
cs
fistp
jns
shl
dec
inc
call
stc
adc
and
mov
add
dec
mov
jl
xchg
sahf
and
enter
mov
and
pop
push
movs
and
mov
jp
leave
mov
push
sub
enter
add
test
mov
aam
jmp
sub
inc
(bad)
sar
sub
xchg
jp
cmc
or
gs
mov
ins
(bad)
imul
dec
dec
mov
sbb
out
cwde
pop
test
adc
test
mov
js
outs
push
cmp
or
lods
and
xor
cmp
ds
icebp
jno
adc
sti
xchg
nop
sbb
pushf
pop
xor
ja
icebp
cli
and
jo
cmps
lock
pcmpeqd
lea
dec
mov
lods
mov
pop
push
or
stc
ds
cs
sbb
push
retf
mov
xchg
sbb
sbb
dec
push
jp
cmp
sbb
cmps
fldenv
adc
jmp
fisubr
and
mov
gs
ja
mov
jne
movs
add
sub
mov
cld
xchg
pop
pushf
cmp
push
push
mov
or
pop
lods
xor
mov
sub
into
xlat
or
inc
adc
scas
int3
fmul
adc
shl
add
aam
cmps
rol
in
cwde
and
xchg
rol
mov
jns
fdivp
sub
inc
out
dec
fisttp
popa
pop
test
cmps
stc
sar
clc
add
aad
mov
add
pop
sahf
dec
xor
test
mov
push
fild
mov
mov
adc
int3
mov
xchg
inc
les
or
jb
dec
mov
les
jne
lds
push
outs
jae
xor
jnp
nop
mov
cs
pop
icebp
jb
push
addr16
sti
pop
dec
and
ja
out
lahf
xchg
(bad)
in
loopne
push
mov
iret
call
out
pusha
fisubr
mov
mov
shl
and
movs
xor
fbld
inc
loop
ins
mov
mov
push
and
pop
jle
sbb
shl
fcomp
inc
jae
(bad)
push
test
in
mov
(bad)
mov
ins
popf
or
call
xor
jl
icebp
ss
sub
xchg
scas
xchg
xor
hlt
xor
mov
sub
in
int
xchg
xor
sbb
sbb
loop
aas
repz
into
cmp
and
je
adc
dec
push
xor
(bad)
(bad)
icebp
leave
mov
xor
dec
jnp
pop
test
jbe
les
in
adc
xchg
sbb
test
and
pop
xchg
mov
jmp
xor
push
imul
fldenv
rcr
(bad)
mov
fdivr
jns
push
xchg
idiv
test
jmp
mov
pop
data16
int3
(bad)
(bad)
call
jmp
cld
cmps
shl
fstp
push
jb
es
(bad)
in
ins
xchg
adc
je
mov
dec
inc
dec
adc
jmp
mov
push
mov
pinsrw
int3
push
jbe
mov
ds
jge
stos
or
mov
shl
hlt
test
xchg
les
cmp
out
jns
push
call
out
push
and
mov
test
rcl
test
inc
shl
dec
inc
mov
and
cmps
inc
outs
cmc
rcl
(bad)
jp
int3
popf
test
mov
es
les
imul
cmp
push
push
pop
mov
movs
test
lahf
out
jb
adc
out
pop
dec
mov
adc
cmc
in
mov
mov
jecxz
sub
loop
adc
mov
shl
jl
jne
cmp
xchg
inc
out
movs
sbb
push
inc
(bad)
mov
(bad)
dec
mov
mov
lods
enter
inc
movs
lods
test
dec
mov
ficomp
out
mov
int3
out
dec
fdivrp
cdq
add
in
push
rol
popf
ss
add
jnp
cdq
gs
ja
fstp
in
and
jno
imul
popf
cld
and
ja
fsubr
inc
jmp
enter
mov
xlat
aam
cmp
xchg
addr16
in
cmp
vpaddusw
pop
ret
sti
mov
fstp
push
out
jne
mov
push
test
lahf
and
into
sub
add
add
(bad)
out
je
or
add
repnz
xchg
mov
jmp
scas
(bad)
push
ret
ins
jno
cmc
js
xchg
or
adc
addr16
sbb
pushf
and
ss
cmp
mul
(bad)
pop
cs
out
mov
xchg
xchg
mov
inc
inc
pop
jo
add
retf
and
aas
add
pop
jle
inc
add
(bad)
gs
mov
cmp
cs
or
xchg
cwde
iret
xchg
inc
pop
std
imul
push
out
fmul
aas
pusha
xchg
mov
or
xor
mov
mov
xor
or
stos
cmp
xor
js
call
mov
and
fcomi
push
add
imul
jmp
xchg
or
popf
or
xor
push
or
xlat
add
mov
cmp
push
aam
fst
ret
dec
mov
cs
push
(bad)
cs
lods
mov
(bad)
sbb
pop
ret
hlt
add
pusha
jno
in
fcom
mov
lods
pushw
jmp
aad
mov
aad
xchg
pusha
dec
mov
ss
rol
jecxz
xor
lock
scas
popa
add
out
sub
fwait
jl
push
xor
inc
push
add
js
mov
push
dec
mov
mov
sbb
sub
jbe
mov
jge
(bad)
(bad)
jae
cmp
fisub
xchg
or
dec
and
outs
fistp
iret
icebp
stos
leave
pop
mov
retf
add
pop
retf
push
sbb
push
jb
mov
xor
dec
mov
addr16
dec
add
mov
or
jmp
inc
add
inc
pop
mov
mov
cdq
xor
push
jo
push
xor
sbb
or
mov
push
jg
xchg
pop
fs
mov
fwait
xchg
inc
mov
jns
fistp
xchg
repz
test
jae
lahf
hlt
clc
jno
and
lock
mov
movs
adc
and
arpl
out
add
repnz
enter
mov
pusha
mov
ins
xchg
outs
ret
das
jb
pop
or
mov
sets
out
int3
fcomp
jae
daa
bswap
and
repnz
add
mov
xchg
add
stos
stos
outs
or
dec
mov
pop
pop
loop
and
or
repz
call
mov
retf
movs
jb
inc
jmp
jne
pop
in
repz
in
test
mov
xchg
sbb
nop
ret
ins
jb
push
adc
outs
mov
push
fidivr
xor
pop
popf
push
push
inc
or
xchg
popa
adc
or
cmp
dec
mov
jmp
push
pop
pop
or
popa
mov
pop
loopne
cld
ins
xchg
dec
test
shl
lods
jg
cmps
into
pusha
clc
xchg
adc
add
mov
inc
push
mov
dec
mov
cld
mov
or
pusha
(bad)
mov
nop
push
ret
es
jo
xlat
fsub
out
dec
add
inc
mov
cmc
push
in
out
add
test
xor
jle
pop
sbb
dec
push
jnp
jbe
sub
dec
add
sub
daa
movs
retf
cmps
mov
adc
enter
ja
adc
inc
mov
add
mov
out
jae
(bad)
ficom
jnp
lahf
mov
ds
or
add
jmp
retf
sahf
cmp
jmp
(bad)
icebp
push
ret
aas
(bad)
and
jo
sub
mov
xor
pop
shl
aam
xchg
sub
into
fcom
inc
mov
add
ret
std
sub
repz
xor
fcomp
xlat
hlt
dec
pop
add
jne
loopne
imul
dec
push
lahf
xor
pop
icebp
adc
mov
mov
test
aas
lods
imul
sbb
in
cmps
cmps
push
jae
mov
or
jmp
mov
addr16
sbb
xlat
dec
imul
sub
pop
xor
sub
outs
jnp
into
cdq
popa
lahf
cli
das
into
adc
aam
push
data16
jmp
pop
or
out
adc
idiv
cmp
pop
sub
(bad)
ins
ds
retf
repz
ja
shl
push
cmp
add
test
or
mov
xchg
(bad)
leave
jmp
jl
and
inc
pop
movups
push
and
mov
and
ins
int3
add
sti
jno
mov
sbb
sar
mov
repnz
jl
xor
cmp
sahf
or
xchg
mov
mov
cmp
adc
xor
sbb
xor
jne
dec
popa
xor
bound
cmp
lods
or
cmps
inc
pop
(bad)
lods
(bad)
jecxz
(bad)
fucomi
jmp
sbb
pop
xchg
lds
xor
jl
jbe
stos
xchg
mov
or
adc
pop
push
rol
and
in
inc
lods
xor
jo
mov
(bad)
push
das
mov
sub
(bad)
lds
inc
and
ss
mov
pop
aaa
pop
mov
hlt
push
dec
adc
sub
or
mov
jle
(bad)
jmp
inc
retf
jmp
xchg
push
lods
mov
xchg
pop
adc
dec
add
pop
or
or
mov
out
test
mov
xor
push
call
out
stos
jmp
lds
pop
mov
xor
sbb
sub
or
pop
push
add
sahf
dec
daa
fs
dec
or
(bad)
retf
cmp
pop
push
inc
xchg
push
push
adc
jb
push
stos
sahf
and
test
cli
sti
push
fwait
pop
js
mov
adc
data16
add
icebp
pop
out
in
xor
repz
jo
pop
js
scas
lods
dec
(bad)
into
jmp
xor
rcr
frstor
in
ja
cli
rcl
(bad)
bound
jbe
ds
mov
xlat
adc
jl
jecxz
or
cdq
or
add
sbb
inc
vpmacswd
mov
cmp
and
sub
shl
and
or
fidivr
push
(bad)
popa
pop
mov
push
push
ret
xor
mov
mov
sub
sbb
rcl
(bad)
div
into
enter
pop
push
jae
ret
les
scas
xchg
add
leave
sub
xchg
mov
sbb
aas
dec
cmps
dec
push
push
fst
mov
dec
jl
mov
mov
test
jp
ins
inc
or
mov
pop
les
out
and
cmps
in
jmp
into
popa
sub
jle
sub
iret
push
pop
mov
cmp
test
mov
cmp
mov
mov
or
jns
jg
jmp
dec
pop
dec
(bad)
popf
xchg
(bad)
adc
(bad)
ret
js
mov
sbb
lds
cmp
scas
call
xchg
adc
xor
inc
pop
clc
push
dec
mov
jle
cli
bound
retf
cs
fisttp
(bad)
js
bound
pop
sbb
pusha
cmp
cmps
shl
rol
pop
and
mov
ins
push
jl
pop
mov
or
or
in
add
nop
xchg
shl
test
dec
mov
ja
fs
xor
mov
cmp
xchg
pop
mov
push
aas
jbe
int
test
fxch
sub
(bad)
fild
xor
lahf
cmp
mov
in
pop
sub
loope
(bad)
outs
push
xor
test
aas
sahf
repnz
bound
je
test
dec
fnstenv
jle
stc
cmps
lods
mov
mov
add
mov
mov
pop
lock
call
daa
mov
icebp
xor
inc
xor
cld
ffree
mov
(bad)
ins
fcom
and
sub
in
test
stos
call
sub
jmp
out
and
push
test
and
pop
rcl
push
sbb
lock
ds
or
retf
xor
dec
out
mov
cmc
inc
xor
ds
dec
sbb
data16
add
xchg
inc
push
lods
xor
sbb
mov
xor
push
push
mov
aaa
add
xchg
sar
sub
fidiv
adc
fmul
neg
fs
or
cmp
jl
push
cmp
scas
addr16
pop
das
push
popf
mov
int3
mov
or
mov
frndint
scas
mov
(bad)
push
mov
dec
adc
arpl
dec
(bad)
xchg
push
sub
push
(bad)
fwait
out
sub
cdq
ret
or
xor
les
aam
mov
test
mov
std
pop
in
dec
dec
sbb
sbb
dec
(bad)
and
xchg
push
pusha
xor
daa
sbb
jns
repnz
(bad)
movs
mov
in
retf
pop
jb
fsub
push
bound
sub
stos
pushf
or
stc
cmp
fld
push
jle
jmp
shl
mov
mov
popa
pop
jp
mov
xchg
inc
add
aad
hlt
push
mov
mov
jbe
mov
jmp
inc
or
and
xchg
mov
fldcw
dec
mov
js
stos
cmp
xchg
pusha
mov
sahf
cs
popf
fidiv
push
mov
and
pop
dec
jo
mov
add
fnsave
retf
addr16
jb
stos
sbb
lock
sub
xchg
or
cmp
sbb
xor
pop
mov
cdq
xchg
cmps
sbb
and
rcr
in
popa
or
leave
jb
jg
daa
stc
rol
loopne
(bad)
dec
xlat
fnstenv
inc
jbe
stos
mov
sub
cmps
sti
mov
jmp
mov
mov
bound
lfence
leave
out
in
cld
arpl
mov
pop
out
sbb
test
cmps
sub
out
das
jmp
dec
cmp
push
jp
stos
inc
pop
jbe
lar
aad
sbb
cmp
stc
loopne
(bad)
popa
data16
sub
out
jle
jmp
pop
ret
fist
cmp
adc
xor
sahf
mov
fsubr
test
cmp
mov
xchg
dec
in
pop
add
imul
xchg
add
adc
sub
sbb
(bad)
pop
movs
inc
int3
repz
mov
sbb
sti
lea
adc
or
xchg
bnd
loop
test
sahf
jmp
cmps
mov
or
aam
dec
sbb
sub
addr16
jecxz
movs
int
mov
mov
je
call
push
mov
add
jae
test
mov
add
and
fidiv
and
pop
leave
into
out
nop
dec
mov
cmp
idiv
retf
cmp
into
movs
out
hlt
(bad)
sahf
inc
push
addr16
mov
push
aas
cdq
mov
and
rol
dec
dec
add
lods
std
dec
icebp
into
ret
dec
pusha
data16
dec
adc
int
sbb
pop
and
aas
je
pop
ficom
mov
mov
std
push
mov
cmp
ror
inc
jecxz
push
pop
jno
add
jnp
aaa
pop
imul
out
out
scas
xor
xor
add
or
ja
add
shl
dec
push
sbb
sub
xor
inc
cmp
cwde
je
inc
aas
xor
dec
jg
rcr
jnp
repnz
sub
add
adc
int3
adc
mov
scas
sbb
pop
out
call
fcomp
pop
lods
sub
das
mov
fild
cld
adc
sub
cmp
div
(bad)
fsubr
pop
leave
out
repnz
cmps
xor
ret
mov
lods
mov
and
push
in
mov
stc
pop
pop
sbb
xchg
inc
mov
jno
mov
add
and
shl
adc
in
inc
xchg
fs
lds
push
sbb
inc
or
arpl
das
and
pop
imul
adc
sub
nop
xor
xchg
and
mov
outs
not
and
into
xchg
pop
or
xchg
ins
or
inc
pop
or
adc
idiv
or
movs
shr
mov
fisubr
mov
fldenv
push
inc
xchg
test
test
pop
nop
adc
daa
sahf
retf
push
sbb
push
fsubr
jne
aam
lahf
out
retw
jp
mov
sbb
retf
ja
leave
add
scas
mov
inc
pusha
and
shl
jae
bswap
sub
les
push
(bad)
mov
(bad)
push
xor
shl
adc
jmp
xchg
ins
xchg
pop
mov
stc
add
jmp
mov
rcl
js
ins
adc
mov
add
pop
xor
outs
adc
add
ins
push
and
mov
in
mov
dec
popf
and
fisttp
sub
pop
inc
lahf
mov
xchg
jbe
ins
jle
dec
out
adc
sbb
push
adc
or
xor
test
scas
stc
add
fs
pop
sbb
outs
jmp
dec
xchg
imul
cdq
adc
sbb
clc
clc
ins
retf
mov
js
int
cmc
sub
ins
mov
std
fwait
cmps
js
stos
retf
inc
mov
jl
bound
sub
retf
sahf
lods
xchg
cmp
inc
cdq
inc
js
push
xor
addr16
ja
jmp
pop
stos
es
xchg
sub
dec
mov
or
cmp
xor
mov
inc
cmps
add
repz
jns
fcomp
out
out
push
retf
dec
pop
fstp
mov
cwde
fadd
test
out
std
js
aaa
add
xor
dec
push
adc
rcl
call
sub
pusha
adc
push
push
mov
xchg
add
cld
dec
daa
data16
mov
or
fbstp
cmp
or
cs
inc
pop
pop
arpl
aad
push
or
pop
das
xor
mov
psrld
cdq
fbstp
imul
xchg
mov
xchg
fstp
add
out
retf
adc
lods
dec
fsubr
mov
xchg
adc
rcr
jne
xlat
lods
pop
jmp
jne
aas
mov
cmp
ds
mov
stos
int3
xchg
sbb
jns
ds
jnp
mov
jns
jp
mov
aas
mov
aam
jmp
inc
pop
ins
jae
outs
dec
mov
inc
jnp
push
pushf
rcr
jp
addr16
xor
or
inc
mov
stos
push
and
or
out
ins
jne
and
mov
sahf
adc
adc
cmc
xchg
and
aaa
das
jmp
mov
pop
adc
test
dec
lea
daa
retf
fisubr
pop
stc
test
fwait
mov
leave
mov
in
outs
imul
scas
pop
push
stos
push
jmp
call
mov
dec
lods
push
sub
inc
shr
scas
and
xchg
jecxz
cmp
mov
mov
sub
ss
add
adc
mov
and
inc
jns
pusha
mov
lock
ss
and
mov
and
fwait
mov
jo
stc
in
push
or
gs
aad
(bad)
pop
xchg
push
push
sbb
idiv
cmp
push
mov
nop
cmp
(bad)
ins
push
lods
cmp
icebp
icebp
cs
pusha
scas
mov
retf
stc
sub
not
sub
mov
cmp
cmp
push
push
add
add
push
std
or
inc
push
sbb
pop
arpl
adc
pusha
sub
repnz
or
adc
hlt
sar
dec
rcr
mov
stos
mov
enter
lods
out
js
js
xchg
or
mov
and
xchg
mov
int
add
(bad)
fldz
cli
loope
cwde
das
jmp
mov
sub
push
sbb
and
inc
(bad)
jb
pop
and
mul
mov
mov
and
test
xchg
push
sbb
test
push
out
fisub
push
cmp
pushf
cld
enter
xor
adc
aad
jae
mov
push
je
mul
or
loop
(bad)
in
mov
ret
mov
out
leave
ret
or
sti
cmp
jno
dec
popf
lods
xchg
sti
and
in
cvttps2pi
lods
push
dec
sub
into
mov
ss
add
mov
sahf
jl
add
ret
outs
jb
cmps
(bad)
dec
inc
mov
inc
adc
(bad)
cwde
dec
clc
jle
lds
xor
clc
adc
jns
adc
fadd
or
in
aam
out
cmp
lock
in
sub
add
cmp
adc
cdq
enter
add
imul
dec
mov
jmp
daa
mov
rcl
mov
movs
jg
push
lds
(bad)
retf
push
cmp
fidiv
xchg
or
(bad)
in
sbb
and
int3
sub
(bad)
xlat
test
pop
and
pop
or
sub
std
lds
fwait
mov
jnp
outs
imul
repz
clc
sbb
pop
clc
mov
xchg
ror
jb
stc
mov
push
pop
inc
xchg
sbb
inc
std
sar
mov
mov
jmp
(bad)
sbb
into
dec
mov
mov
and
(bad)
jmp
das
or
xor
call
dec
pop
out
mov
(bad)
fcmovu
jbe
adc
add
ss
mov
dec
std
ins
xchg
(bad)
push
sub
jne
std
and
jnp
das
lahf
and
retf
je
push
push
outs
lods
popa
inc
jbe
mov
mov
iret
hlt
mov
jnp
xor
jl
inc
pop
cmp
fstp
dec
mov
or
mov
enter
cmp
fcom
pusha
in
and
into
sbb
mov
mov
out
adc
xlat
sub
push
xor
push
int3
mov
lods
fwait
dec
mov
dec
push
fist
adc
in
adc
rcl
(bad)
cwde
inc
jo
test
std
and
ds
inc
mov
popf
js
pop
aas
call
and
jb
imul
in
and
add
mov
stc
sar
xor
mov
sbb
mov
outs
in
not
scas
cmps
adc
and
inc
and
nop
xchg
sbb
aam
jbe
mov
and
sub
inc
loop
ss
fsubp
push
(bad)
mov
ret
and
add
cmp
stc
shr
fld
adc
retf
ss
loope
pop
test
inc
retf
jne
inc
jb
mov
out
sub
and
fist
rol
lds
sub
sar
lea
jp
push
or
mov
xchg
mov
pushf
inc
retf
out
mov
mov
nop
xchg
into
xlat
in
rol
push
or
ja
icebp
mov
cmp
adc
test
daa
cmp
ret
and
jl
clc
jge
sub
dec
and
jbe
daa
arpl
mov
cmp
xchg
test
sbb
mov
mov
sti
add
iret
cmp
cmp
std
sub
not
xchg
mov
cmp
arpl
pop
scas
mov
inc
mov
cmp
xor
(bad)
adc
loop
popa
cmps
cmps
in
outs
pop
nop
pop
es
push
or
mov
inc
add
cs
sub
pop
test
out
pop
stos
mov
imul
cdq
xchg
cmp
lock
ins
imul
jne
jb
jmp
mov
bound
sub
jns
and
cmps
mov
add
mov
neg
cmps
in
fwait
scas
adc
add
xor
int3
outs
daa
mov
jecxz
test
and
dec
inc
mov
loop
ror
mov
mov
hlt
(bad)
test
ror
add
inc
cli
sub
test
outs
ret
jb
push
mov
cdq
ret
je
mov
adc
nop
inc
push
mov
push
jno
pop
or
mul
dec
jecxz
mov
outs
cmc
fisubr
clc
(bad)
out
xchg
imul
add
cdq
or
outs
sbb
or
call
stos
xchg
outs
jns
sbb
repnz
cs
jmp
in
pop
inc
sbb
add
dec
loope
xor
mov
int
imul
add
popa
jbe
xchg
test
pop
call
xchg
mov
cmp
lods
bound
cmp
and
out
add
rcr
adc
shr
dec
popa
and
push
and
(bad)
stc
cwde
or
sbb
sbb
adc
jmp
fsub
jecxz
shr
jns
lahf
test
mov
pop
jae
arpl
enter
outs
ja
jmp
xchg
and
sbb
push
pusha
or
iret
xchg
mov
mov
push
xchg
sbb
dec
enter
pop
push
or
aas
clc
cli
cmp
mov
or
fidivr
pop
mov
xchg
pop
jecxz
pushf
fmul
mov
pop
cli
mov
mov
pop
mov
mov
dec
push
enter
sub
test
sub
cmp
add
mov
xor
mov
shr
into
sahf
test
adc
outs
jecxz
xchg
inc
push
call
add
xlat
cmp
ret
jb
das
xor
mov
push
es
inc
sub
xchg
lods
test
push
push
dec
push
scas
addr16
sbb
cmp
rol
mov
jg
mov
xor
enter
xchg
xor
sub
inc
mov
loope
fucomp
fucomi
ss
dec
xchg
adc
div
jb
lods
mov
adc
and
dec
push
or
mov
jb
lds
sahf
in
aaa
or
dec
sbb
or
jmp
push
sub
jns
mov
bound
cli
push
sbb
jo
mov
jmp
sub
inc
mov
ficom
add
fidiv
mov
sbb
sbb
push
aam
popf
pushf
retf
xchg
ret
mov
push
call
push
shr
sbb
add
dec
int
cmps
mov
push
ret
xchg
xchg
push
mov
adc
push
pop
loopne
ss
jbe
push
out
xor
dec
xchg
xor
sahf
jbe
xor
jmp
mov
lock
retf
ficomp
stc
shl
out
adc
mov
and
rcr
mov
sahf
daa
jns
fstp
pop
mov
push
jno
push
test
pop
ror
std
sbb
push
xchg
xchg
std
pop
cmc
clc
outs
out
or
adc
mov
adc
sub
(bad)
(bad)
adc
aam
outs
ins
into
stc
add
fidiv
push
sbb
je
popa
sbb
retf
shl
jns
inc
addr16
(bad)
rol
and
js
fild
sub
out
inc
call
loop
push
cwde
rcl
sub
xchg
dec
or
jae
or
fst
sbb
bound
and
cld
iret
ja
pop
shl
mov
xchg
jle
les
mov
mov
cmps
xor
xor
outs
xor
std
add
mov
push
ja
ficom
push
add
(bad)
repz
(bad)
cmp
add
mov
fwait
jnp
mov
jge
leave
in
aas
daa
mov
xor
xor
push
movs
adc
daa
jle
sar
fidivr
inc
sub
dec
jmp
pop
out
fstp
pop
xchg
ins
inc
mov
test
add
sbb
inc
das
in
adc
fisub
adc
rcr
jnp
ret
pop
push
adc
and
outs
push
inc
add
cli
inc
aas
fprem
inc
popf
jp
mov
mov
jb
push
clc
(bad)
mov
cmc
gs
push
dec
mov
iret
sbb
pop
inc
xor
scas
jmp
rcl
stos
xchg
imul
sbb
(bad)
or
adc
adc
jle
dec
stos
sub
or
inc
lahf
inc
mov
test
jl
adc
xor
cli
outs
inc
daa
add
or
push
mov
aaa
retf
dec
dec
outs
mov
adc
lahf
sti
xchg
xchg
adc
jecxz
ds
inc
outs
in
sbb
cmp
add
dec
inc
sbb
sbb
data16
inc
out
cmp
icebp
bound
mov
xchg
xor
cmp
inc
pop
movs
mov
jno
pop
cmp
push
adc
lods
mov
leave
adc
push
vmovdqu
or
test
xor
dec
gs
(bad)
dec
addr16
jl
mov
sti
popf
mov
jbe
pushf
or
pop
fwait
ins
jb
out
pop
or
mov
repz
pop
push
out
in
mov
pop
int3
lods
shr
icebp
inc
popf
inc
jle
test
mov
data16
scas
outs
popa
sti
lds
rol
shr
mov
popa
dec
push
add
mov
jno
mov
push
shl
into
hlt
adc
out
mov
ja
inc
iret
xlat
test
call
cmc
pop
push
adc
(bad)
aas
xor
or
push
jg
fnstsw
pop
aam
cmp
pop
xchg
in
mov
mov
mov
mov
mov
fstp
iret
mov
daa
cmc
dec
pushf
push
les
mov
pop
lock
sub
push
inc
cmp
in
gs
jno
push
pop
scas
fbld
push
not
pop
loop
popa
hlt
xchg
ficom
and
jmp
repnz
iret
adc
aaa
mov
mov
adc
(bad)
and
test
loop
or
mov
ret
and
jmp
sti
jb
mov
adc
(bad)
cli
enter
lahf
out
pop
jmp
adc
ins
sbb
ret
cld
fist
mov
fst
ins
mov
pop
scas
iret
sbb
jge
sbb
mov
(bad)
or
push
jne
pop
sbb
pop
and
sub
mov
mov
in
jg
and
ret
jmp
xchg
out
or
mov
mov
repz
pusha
les
out
out
inc
int
test
test
hlt
add
jb
fs
ret
aas
test
mov
jle
inc
xchg
rol
add
fmul
xor
and
mov
xchg
cmp
jae
mov
cmc
ds
mov
push
or
rcl
jmp
and
jp
out
cmc
dec
dec
xor
div
or
mov
pop
mov
(bad)
cmps
pop
push
or
ins
dec
scas
in
add
out
and
sub
in
mov
xchg
(bad)
pushw
imul
das
push
imul
ret
cwde
sbb
daa
jge
pusha
cli
jge
fwait
mov
fldl2e
mov
cdq
xor
xor
add
rcr
jle
pop
outs
cld
mov
jl
adc
pop
fnstsw
cmp
imul
or
kxorb
into
aas
leave
ror
mov
jns
xor
mov
add
jmp
xchg
aam
lods
push
push
or
fbld
ds
test
mov
leave
pop
(bad)
push
ja
aad
pop
jp
mov
xchg
into
pop
push
iret
mov
stos
xchg
inc
cwde
lock
lock
stos
test
nop
mov
scas
lea
push
sub
mov
div
xchg
push
inc
sti
xor
out
inc
(bad)
out
fstp
stos
push
test
in
mov
jecxz
cld
and
ss
mov
test
loopne
sbb
and
jnp
jo
aam
ss
ret
mov
sub
int3
mov
ror
jmp
sub
mov
push
sub
push
xchg
ds
sub
cwde
push
dec
cmp
xchg
pop
movs
xor
jns
fild
out
out
push
xchg
rol
mov
(bad)
enter
(bad)
imul
inc
fmul
jmp
pop
jge
mov
fnstenv
ror
push
popa
jno
push
neg
mul
stos
inc
mov
fnstsw
enter
shl
push
lods
dec
test
fnstcw
ja
mov
lods
jp
dec
stos
and
shr
jg
xchg
cmp
xor
pop
sub
add
fmul
or
jecxz
sbb
scas
int3
cmp
fisttp
adc
sub
xor
in
xor
popa
outs
lods
or
sbb
das
ret
cmc
(bad)
out
adc
dec
and
pop
push
daa
or
mov
arpl
mov
adc
mov
inc
cmp
out
push
cmp
cmps
push
cmp
fisub
or
outs
imul
adc
mov
es
lahf
rcr
sub
lock
jo
mov
les
shl
mov
sar
xlat
loop
mov
lea
xor
jg
pusha
ror
jl
pusha
cmps
jecxz
cwde
push
push
pusha
xlat
stos
xor
test
add
jae
test
das
out
dec
cmps
sti
or
fcom
lods
fcomp
adc
inc
cmp
add
(bad)
je
jb
add
cs
(bad)
mov
xchg
push
adc
mov
xchg
xor
or
inc
jg
test
pop
in
sti
sbb
scas
fimul
into
mov
dec
outs
ror
inc
dec
push
or
cmp
dec
dec
mov
fbstp
push
or
fcom
inc
push
call
jmp
imul
in
pusha
mov
in
pop
pop
or
in
lock
out
mov
repnz
push
xor
retf
cmp
xchg
jns
lahf
cmps
inc
fstp
dec
mov
dec
loop
ds
inc
int
push
push
dec
xchg
cmc
ins
mov
pop
leave
jbe
dec
xor
jl
lahf
dec
fistp
cmp
psrld
stos
inc
xchg
test
test
dec
inc
xchg
add
sub
clc
jle
xor
sbb
mov
fld
jns
enter
mov
push
ja
or
popf
or
std
imul
stos
fist
dec
pusha
mov
sti
mov
in
das
jbe
movs
sar
or
cli
add
or
cmp
fs
adc
aad
jmp
adc
mov
movs
int3
add
jecxz
pop
retf
mov
mov
pop
sahf
les
dec
adc
das
inc
repz
sar
pusha
in
into
xor
nop
ss
aaa
lods
cwde
lods
mov
jmp
ins
aad
pop
adc
movs
mov
jae
sub
(bad)
push
out
jmp
je
add
in
jmp
mov
add
adc
(bad)
rcr
das
xor
jo
sbb
mov
mov
in
sbb
into
fwait
jp
dec
inc
mov
sub
es
js
mov
out
imul
xchg
clc
xchg
or
fmul
loop
stos
addr16
sahf
into
sar
cwde
not
fiadd
movs
inc
jecxz
fdivr
jb
pop
stc
jns
jl
imul
push
mov
push
jecxz
mov
rol
xlat
popa
scas
(bad)
sub
push
daa
sbb
enter
das
cmc
push
jg
lahf
pusha
mov
mov
mov
inc
leave
add
retf
jmp
test
cmp
jno
jo
in
js
iret
mov
int
movs
mov
fnstsw
stos
adc
jmp
add
pusha
xor
movs
arpl
or
mov
mov
enter
push
out
mov
mov
clc
or
cmps
or
aaa
pop
fdiv
mov
sbb
ds
jnp
nop
es
ficomp
shr
or
pop
outs
inc
dec
mov
mov
pop
and
cwde
dec
icebp
fsqrt
sbb
cld
lock
popa
and
xchg
repnz
sub
arpl
pop
js
sbb
les
xor
dec
mul
ds
mov
vlddqu
jmp
and
imul
imul
xlat
cmc
inc
push
pop
push
jle
mov
or
vmovsd
jle
cmps
pop
xor
loopne
imul
rol
repnz
inc
sbb
arpl
ror
(bad)
mov
pusha
ret
inc
fwait
cmp
xlat
cs
popa
sub
adc
dec
pop
outs
mov
lea
(bad)
call
jecxz
fldenv
xchg
sbb
mov
cmp
xchg
jae
cmp
cmps
or
pushf
sar
(bad)
out
jb
sbb
xchg
js
mov
loop
jnp
mov
add
and
jbe
(bad)
(bad)
cld
pop
add
xlat
mul
nop
out
sti
aam
pop
or
lods
repnz
or
fisub
and
enter
shr
jmp
cmp
fiadd
rcr
lods
aas
jo
stc
nop
fs
xchg
xlat
xchg
ins
(bad)
or
pop
adc
les
inc
rol
cmps
cli
rcl
inc
push
ins
ss
das
or
push
or
retf
and
das
inc
lods
mov
(bad)
das
push
push
lahf
mov
(bad)
and
ret
call
sbb
inc
shr
dec
fsub
clc
cmp
xlat
or
inc
clc
fimul
add
push
and
data16
sub
aas
mov
push
dec
add
pusha
cmp
bound
andnps
xchg
in
dec
xchg
inc
adc
cmp
inc
cmp
(bad)
cld
inc
push
gs
repz
jle
pop
jo
movs
mov
ins
idiv
rep
ss
mov
mov
mov
retf
xor
out
fcomp
std
movs
lahf
mov
jne
push
sbb
ror
cmp
cmps
sub
imul
sbb
mov
jo
cmc
mov
scas
outs
add
stos
sbb
and
sbb
add
clc
scas
sbb
xchg
aas
push
icebp
jmp
sbb
ins
add
mov
jo
lods
sti
adc
push
inc
mov
addr16
push
fdiv
xor
cmp
mov
movs
sbb
jns
adc
mov
loop
push
movs
getsec
sar
daa
xor
call
cmp
pop
add
mov
popa
std
mov
and
and
arpl
fcomp
xor
(bad)
retf
jne
jecxz
imul
in
inc
sbb
inc
or
aad
inc
repnz
sahf
loop
mov
fdiv
mov
and
jns
daa
test
mov
pop
add
movs
xchg
mov
lods
call
add
push
pop
jmp
adc
imul
dec
arpl
cmp
sar
sbb
mov
(bad)
into
scas
mov
dec
pop
mov
xchg
in
js
or
mov
cdq
mov
inc
test
adc
adc
pop
nop
add
xor
sub
dec
mov
sbb
mov
scas
mov
pop
and
and
jmp
pop
pop
lods
mov
in
data16
and
adc
push
jmp
in
cmp
jmp
adc
inc
inc
and
mov
jnp
fcmovbe
dec
cld
lock
movs
fst
push
div
pop
(bad)
cmc
jb
hlt
mov
pop
ret
in
movs
adc
je
int3
xchg
push
push
popa
or
ss
push
lds
bound
cli
mov
mov
mov
cld
in
mov
cmc
and
imul
nop
inc
or
out
cmp
loopne
mov
into
mov
loope
sbb
push
dec
cmp
lds
adc
or
jae
ret
or
popa
xor
jo
jae
mov
mov
cmp
dec
sbb
cmp
lods
jmp
outs
or
pop
fist
jo
aam
jno
xor
pop
cdq
jl
sub
jb
mov
cli
push
outs
pand
inc
pushf
sbb
fild
ret
pop
ins
sub
hlt
add
call
xor
xchg
out
lahf
mov
xor
sbb
add
out
mov
xchg
sbb
out
xchg
in
dec
pop
data16
stc
dec
out
cmps
dec
data16
sub
xor
and
daa
retf
mov
mov
imul
inc
xor
movs
aaa
arpl
inc
cmp
push
aas
scas
repz
(bad)
adc
retf
mov
aaa
leave
ror
and
cmp
dec
or
mov
xchg
sub
in
fdivr
clc
in
ins
jne
push
nop
enter
mov
sar
in
mov
fucomi
sub
mov
ret
aaa
cmps
jo
adc
xchg
adc
dec
js
lock
hlt
stos
addr16
dec
into
pop
imul
inc
mov
addr16
and
dec
(bad)
test
into
mov
repnz
gs
ja
xor
push
sbb
jbe
adc
adc
(bad)
in
jno
jle
pusha
mul
inc
mov
adc
inc
push
fstp
call
jecxz
jbe
mov
test
mov
jmp
mov
cmp
prefetchwt1
or
stc
sub
add
vmwrite
aam
jno
add
inc
add
mov
jno
sbb
jl
inc
and
sbb
scas
adc
rcl
inc
sbb
std
adc
das
jle
jmp
push
sbb
inc
repz
jg
mov
(bad)
cmp
mov
int3
sub
xor
xor
mov
out
push
into
cmp
arpl
xor
sbb
aam
mov
imul
xchg
xor
inc
lods
sub
stos
pusha
add
adc
inc
mov
dec
or
sub
pop
and
push
sub
int3
out
cmp
jg
repz
std
ins
fdivrp
push
jne
out
(bad)
cmps
or
adc
sub
jns
xchg
and
jge
fs
and
call
test
inc
inc
stos
and
hlt
mov
jmp
jmp
xchg
sub
pop
ins
fisttp
jl
(bad)
jle
shl
or
xor
(bad)
adc
or
add
pop
mov
add
sub
dec
adc
and
inc
pop
es
mov
in
mov
or
ds
or
mov
or
add
pop
mov
cld
(bad)
jecxz
in
adc
sbb
or
mov
and
into
pop
and
mov
int3
jmp
inc
mov
dec
call
dec
lds
aas
xchg
jmp
dec
jb
mov
pushf
mov
mov
sub
stc
mov
xor
mov
and
ret
mov
jl
out
daa
jb
scas
mov
js
jbe
pop
xchg
cwde
inc
add
mov
push
cmp
sahf
loopne
out
sbb
sbb
push
jmp
mov
xchg
ror
mov
mov
mov
or
inc
int
ret
pushf
jne
aaa
jne
loopne
cwde
xchg
pop
mov
pop
dec
push
dec
mov
aad
stos
cmp
fnsave
les
adc
cdq
xor
sbb
ficom
xchg
lods
in
imul
mov
scas
jp
stos
(bad)
mov
push
dec
imul
add
ins
mov
(bad)
nop
(bad)
fmul
push
lea
mov
sbb
push
inc
jge
outs
icebp
aam
mov
aad
jmp
mov
xor
sbb
sub
pop
cmp
sub
mov
mov
xchg
mov
retf
scas
in
pop
xor
adc
outs
gs
test
mov
shl
xchg
mov
xchg
inc
(bad)
mov
ret
mov
jl
out
leave
cwde
mov
test
add
fild
aas
out
dec
pop
cmp
or
jmp
push
jnp
cmp
cmc
lds
fild
mov
ins
mov
data16
popf
cmp
faddp
mov
cdq
adc
sbb
mov
or
mov
popa
pop
popa
jns
mov
aam
mov
mov
mov
xor
cmps
rol
jge
push
jae
mov
xchg
push
dec
adc
xchg
pop
sbb
iret
mov
jno
mov
add
xchg
sbb
mov
xchg
aaa
sub
xchg
xchg
pop
push
sbb
scas
jecxz
lods
fild
and
dec
outs
les
leave
sbb
mov
not
jns
popf
mov
fs
cmc
xor
jmp
xchg
sub
mov
shl
cmp
and
and
dec
fisub
push
add
daa
sbb
add
jp
leave
neg
idiv
div
push
push
dec
lock
lahf
ja
sahf
aaa
imul
push
mov
cmp
(bad)
push
pop
(bad)
mov
aas
loopne
test
push
stos
wrmsr
fnclex
push
sbb
dec
jae
call
pop
push
or
push
aaa
jmp
setne
and
mov
fistp
push
loope
mov
push
jp
popa
inc
(bad)
push
imul
repnz
inc
xchg
pop
mov
jp
adc
aad
jbe
push
xor
add
fcom
fldenv
xchg
mov
stos
in
ins
ror
adc
or
std
inc
pop
cdq
sub
xchg
mov
or
mov
aam
xchg
push
pop
movs
je
mov
daa
dec
jne
retf
cli
pop
int3
hlt
mov
rcl
pop
popf
enter
mov
loop
retf
repnz
mov
ds
enter
(bad)
movs
xchg
fstp
cdq
lea
xor
cmps
or
ins
fcomp
aas
mov
in
repz
push
ins
and
lods
mov
fs
mov
dec
arpl
mov
test
adc
fisttp
lds
jle
mov
movs
ret
dec
ins
ja
popf
jb
and
dec
outs
push
fisttp
pop
xchg
shl
inc
ds
or
out
xchg
xchg
mov
scas
sbb
or
jne
mov
xchg
int
test
in
jae
lock
push
(bad)
sub
stos
jmp
ins
scas
scas
test
sbb
xor
cmp
xchg
push
mov
mov
and
mov
ins
or
sbb
in
repz
test
rcr
and
push
into
dec
cwde
add
(bad)
pop
dec
sub
rol
fs
cmp
call
ret
add
cld
xchg
pop
out
(bad)
mov
mov
xor
gs
push
(bad)
and
cmps
push
sti
cmp
mov
jp
lock
jne
test
sbb
jmp
(bad)
stc
neg
movs
push
(bad)
push
(bad)
sahf
jno
mov
faddp
mov
mov
mov
hlt
pop
and
sbb
in
jbe
or
bound
xor
jecxz
cmp
adc
mov
jbe
stos
xlat
inc
mov
xchg
lds
and
imul
out
sbb
cmp
add
hlt
leave
dec
or
cmp
mov
sub
pop
cmps
(bad)
in
fnstcw
sub
mov
imul
push
retf
push
fwait
xor
jl
std
and
gs
addr16
or
mov
cdq
fisttp
faddp
cmp
ret
mov
and
pop
stos
adc
mov
xchg
int
or
je
sbb
loope
xor
pop
es
pop
xor
xchg
pop
nop
or
fcom
retf
sub
sti
xor
imul
loopne
or
pop
mov
and
sub
cmps
fs
and
add
mov
jno
pop
fucomip
cmp
repnz
or
arpl
sub
fwait
jno
iret
mov
lods
mov
pop
out
adc
mov
aam
jecxz
fdiv
jnp
out
xchg
pop
shld
mov
push
cwde
xlat
mov
fsubr
fsubp
dec
pusha
into
das
xchg
das
sub
dec
fdivp
in
pop
pop
mov
test
fld
js
stos
shl
pop
jmp
sbb
cmp
retf
mov
add
sub
outs
sub
dec
add
int3
mov
ret
mov
adc
pop
call
push
push
lock
ror
sbb
stc
xor
or
mov
push
in
je
stos
xor
mov
mov
mov
jmp
int
movs
push
pop
arpl
mov
pop
out
ins
xor
test
repz
jg
jbe
outs
push
xor
add
xchg
or
xchg
aad
or
add
adc
inc
int3
dec
add
jnp
in
xchg
mov
add
inc
push
adc
pop
cli
sbb
(bad)
enter
dec
mov
into
loop
scas
mov
fisubr
lods
das
dec
pop
adc
dec
(bad)
jg
mov
bound
sub
(bad)
icebp
jns
jb
sbb
mov
or
icebp
dec
out
arpl
outs
repnz
pop
imul
push
(bad)
jno
sub
pop
cmp
arpl
pop
pop
std
mov
adc
pop
push
out
popf
test
popa
ins
xor
ret
les
cmp
in
fdiv
inc
push
iret
mov
pop
in
add
nop
adc
xor
or
mov
mov
sub
add
retf
mov
je
fwait
sub
fcomi
ja
leave
test
sub
adc
and
mov
loope
mov
lahf
cmp
jo
pop
ins
into
mov
test
and
das
cmc
imul
mov
xchg
stos
jp
imul
dec
add
cmp
inc
inc
pushf
adc
inc
rol
shr
adc
movs
pop
jge
dec
outs
sbb
nop
xor
sbb
aaa
imul
inc
repnz
mov
fmul
hlt
inc
and
mov
fld
mov
dec
xchg
adc
jne
jp
or
pop
int3
icebp
scas
mov
cmc
enter
(bad)
or
gs
fsubr
adc
sub
bound
sbb
retf
scas
ror
ret
cs
lods
test
add
xor
adc
call
in
fsubr
mov
jo
cmp
push
rcl
mov
mov
mov
sbb
(bad)
xor
out
dec
std
xor
test
and
shr
call
pop
cmp
pop
jg
sub
xor
fnsave
repnz
rcr
mov
ror
popa
or
sti
push
xchg
cmp
repz
leave
and
ins
mov
add
pop
shr
adc
xchg
xchg
jae
or
add
jo
jne
in
(bad)
leave
mov
(bad)
mov
repz
out
sbb
test
arpl
aad
mov
mov
jge
pop
xchg
in
inc
and
outs
pop
cmp
dec
push
xchg
xor
xor
nop
popf
jno
lds
sbb
push
movs
mov
rcr
shl
add
dec
pop
in
or
arpl
mov
jg
push
xchg
jae
xchg
dec
arpl
cmp
xchg
movs
repnz
mov
push
(bad)
cmp
cdq
jne
jbe
sbb
sbb
xchg
lahf
enter
cli
mov
test
mov
or
jmp
mov
ss
in
into
mov
cmp
fst
in
xchg
fisubr
sbb
daa
xchg
mov
and
clc
add
mov
pushf
push
xchg
push
(bad)
xchg
sbb
jae
cld
outs
jecxz
std
mov
fs
xchg
je
cmp
push
inc
enter
sbb
xor
les
xor
push
xor
mov
pop
xor
pop
loop
loop
sbb
sub
inc
ja
jecxz
sbb
stos
pop
mov
imul
inc
mov
retf
enter
sub
cwde
imul
mov
or
jbe
xor
and
int3
add
out
xor
pop
jl
xor
pop
shl
fild
sub
cmp
pop
dec
retf
pop
ja
xor
les
aaa
popf
push
ja
mov
adc
mov
test
fistp
sti
test
aas
and
sub
pop
hlt
adc
pop
sbb
push
cmps
test
aas
xor
mov
scas
pop
loope
cmps
sbb
aad
mov
cs
in
call
cmp
out
mov
test
push
push
repz
cmp
popf
outs
or
and
sti
into
popa
stos
(bad)
sub
(bad)
xchg
(bad)
loopne
nop
repz
retf
ret
dec
mov
repnz
adc
cld
lock
adc
retf
push
push
es
ja
adc
loop
jne
lea
xor
fisttp
movs
fwait
scas
jle
shl
fsubrp
jecxz
mov
mov
retf
pop
dec
inc
jb
out
push
fmul
jns
ret
jne
loop
fsub
mov
jbe
dec
inc
scas
div
sub
pop
ds
(bad)
mov
(bad)
repnz
mov
nop
push
(bad)
pop
dec
mov
lea
sbb
sub
mov
popa
and
jnp
and
mov
out
fisub
(bad)
shr
cmp
and
adc
jecxz
mov
dec
sar
mov
pop
xchg
ins
mov
mov
sar
sti
jmp
mov
inc
mov
stos
stos
out
(bad)
push
mov
sub
test
test
test
cmc
imul
mov
sti
sub
push
jle
xchg
fild
imul
cmp
ror
idiv
(bad)
inc
fs
or
retf
loopne
xor
inc
xlat
loopne
pop
cs
mov
fwait
shl
(bad)
xlat
push
push
inc
add
dec
stos
mov
inc
and
outs
add
jmp
addr16
sbb
in
sbb
enter
jmp
xchg
gs
or
dec
lds
arpl
les
inc
mov
mul
cmp
fs
pop
aas
daa
test
mul
add
cld
lahf
mov
je
xchg
and
mov
adc
or
add
(bad)
cli
ret
hlt
ss
xchg
sahf
jg
outs
cld
pop
sbb
sub
movaps
ficomp
add
pop
cld
test
movs
stos
mov
inc
ins
pop
fs
mov
jecxz
mov
pop
xor
sbb
scas
call
imul
ror
ffreep
jb
fisub
sti
int3
pop
push
out
aaa
bound
in
retf
out
test
mov
test
dec
fadd
and
push
pushf
(bad)
jbe
cmp
stc
rcl
jno
pop
mov
cld
add
ficom
(bad)
jg
aas
vandpd
push
push
leave
mov
lahf
test
call
mov
in
push
imul
pop
rcr
adc
fs
pop
sbb
mov
arpl
sbb
pop
repnz
scas
lods
inc
dec
xor
inc
add
pushf
rcl
or
stc
jo
push
mov
sub
ins
or
push
mov
xchg
or
ret
inc
mov
or
push
sbb
aam
and
inc
sub
mov
jmp
ds
pusha
sub
test
add
ins
and
adc
lods
ja
fcomip
push
ror
dec
(bad)
cli
jmp
outs
mov
adc
jno
sar
add
push
out
add
movs
or
out
inc
ficomp
xor
or
xchg
xchg
out
sub
sub
fs
xchg
dec
inc
jmp
out
adc
push
sbb
stos
mov
imul
jnp
mul
mov
fidivr
mov
jb
sub
imul
jge
mov
mov
xchg
pop
xor
int3
xchg
add
sbb
or
mov
xchg
mov
(bad)
sub
inc
out
sbb
dec
test
ins
xchg
push
jbe
cwde
ja
fmul
cmp
int3
sahf
mov
outs
lahf
lea
aam
ins
addr16
mov
les
lods
dec
push
adc
jg
sub
daa
xor
popf
mov
inc
or
pusha
add
into
movs
xchg
inc
dec
jl
stos
jne
data16
sbb
jg
add
shl
mov
jb
imul
inc
pusha
inc
repz
dec
scas
cmp
mov
fidiv
ror
(bad)
ja
jmp
or
dec
cmp
ret
outs
addr16
sbb
and
sbb
add
xchg
lds
adc
mov
jp
ja
imul
adc
ds
fiadd
push
xor
clc
and
push
sar
or
enter
push
ds
loope
cmp
(bad)
fs
mov
test
sti
push
scas
push
jge
push
jb
mov
sbb
int3
mov
add
inc
shr
mov
retf
fcomp
(bad)
cs
std
cmp
pop
mov
mov
loope
sbb
mov
lock
mov
cmp
pop
fild
adc
xchg
out
push
sub
aaa
jo
cmps
dec
repz
and
mov
xor
mov
cld
ja
dec
pop
sub
xchg
into
sub
mov
sbb
cmps
mov
sbb
jae
or
cld
pop
sub
aaa
sub
jecxz
icebp
enter
movs
out
popf
pop
sbb
mov
jmp
imul
push
mov
mov
shl
dec
mov
loop
test
movs
outs
mov
adc
add
test
mov
mov
call
in
mov
mov
gs
into
cmc
retf
push
cld
mov
into
xor
popf
or
pop
int
jb
dec
loop
test
popa
arpl
mov
das
fisttp
lahf
adc
or
fxtract
or
clc
mov
aam
stc
repnz
movs
add
in
xchg
mov
pop
pop
jmp
std
xor
sub
sbb
mul
sbb
inc
aas
push
arpl
adc
iret
cmp
pushw
scas
cmp
xchg
out
jp
adc
fs
or
outs
rol
shl
jl
and
push
jmp
repnz
xchg
aam
les
sbb
and
cmp
addr16
fwait
mov
cmp
mov
(bad)
loop
mov
in
jge
cmp
out
imul
and
mov
in
ret
sbb
and
ss
push
(bad)
ds
push
ins
fld
jo
stos
out
push
or
or
mov
xchg
ret
lods
jl
cmp
dec
cs
dec
jo
add
xor
loop
stc
ror
aaa
imul
adc
sbb
pop
(bad)
xchg
enter
pop
aaa
jmp
mov
imul
out
push
or
xor
mov
fdivp
mov
jo
rcl
gs
in
hlt
nop
mov
mov
loop
pop
popf
in
jp
mov
loope
cmp
xchg
jecxz
and
cwde
adc
cmp
cmp
mov
fistp
xor
push
jg
push
int
push
mov
aaa
mov
pusha
xchg
movs
mov
in
fmul
pop
mov
rcr
fldenv
fdivr
mov
fdivr
mov
or
ss
ss
push
and
loopne
ret
mov
gs
loopne
ret
repz
mov
jns
mov
stos
pop
jl
mov
fs
imul
lods
mov
xor
arpl
cmp
inc
ret
dec
xchg
mov
pop
cld
arpl
call
xor
addr16
and
and
pop
mov
pushf
xchg
dec
sub
in
cdq
lds
fs
pop
test
lea
adc
cmc
lods
dec
pop
dec
sar
push
out
xchg
(bad)
lods
imul
jno
jb
rcl
enter
call
pusha
loopne
mov
addr16
pop
shl
mov
stos
mov
dec
mov
add
mov
ins
mov
lods
(bad)
adc
idiv
mov
icebp
jns
xor
sbb
cmps
in
icebp
push
or
mov
xor
xchg
and
addr16
(bad)
mov
dec
loopne
into
les
sti
shr
enter
lahf
sbb
scas
xor
pop
adc
sbb
cmp
sahf
xor
pop
mov
jecxz
jns
sbb
sar
call
pop
mov
sti
imul
xchg
icebp
test
in
push
mov
rcr
ficom
sub
cmp
mov
inc
mov
add
out
sbb
mov
imul
mov
fwait
test
adc
fstp
movs
cdq
out
or
outs
stc
pop
jno
das
test
adc
(bad)
sti
mov
sti
mov
or
inc
dec
das
or
lods
call
mov
xchg
movs
ret
cli
dec
lahf
je
cmp
out
sbb
out
jecxz
push
scas
aam
hlt
lods
loope
movntq
out
(bad)
inc
or
cmps
inc
rcr
mov
xor
mov
dec
or
dec
sub
aas
inc
iret
push
sbb
rcl
cdq
inc
lock
sbb
xor
stos
(bad)
les
bound
inc
mov
cmp
lahf
(bad)
mov
cld
dec
lods
fs
jle
and
xchg
fcmovnbe
push
inc
push
add
sahf
inc
add
cmp
push
mov
hlt
sub
or
xchg
fcom
cmp
mov
(bad)
outs
mov
int
clc
adc
jecxz
and
iret
xor
xor
ret
gs
jecxz
xchg
or
hlt
test
fsubrp
xor
sbb
sbb
xor
cmp
add
add
push
cmc
jmp
pop
jp
sbb
jno
in
pop
jb
dec
in
jnp
dec
push
mov
call
mov
lds
jp
pop
add
jne
xchg
push
repz
sbb
or
enter
jb
jmp
ja
pop
or
es
add
ds
xchg
arpl
mov
imul
pop
test
xchg
jbe
ja
xchg
push
xchg
scas
push
inc
inc
mov
and
jg
xor
clc
jo
repnz
mov
popa
push
iret
test
nop
inc
jbe
test
or
les
dec
add
jnp
dec
call
aam
into
int
and
push
push
into
mov
out
xor
dec
ins
test
jb
int3
in
add
fs
adc
fwait
in
mov
sbb
fsincos
cmp
imul
fmul
icebp
in
mov
fs
or
into
mov
aaa
jae
popf
xchg
mov
lds
jge
mov
push
lds
cmp
sub
dec
cmp
test
mov
imul
das
iret
xchg
lock
sahf
arpl
outs
add
gs
lds
js
cmc
dec
scas
cmp
in
cli
shr
inc
xor
movs
(bad)
loope
repnz
jno
mov
or
and
sbb
and
xchg
fst
cli
arpl
pop
sub
(bad)
jo
sbb
pop
fbstp
das
es
push
add
das
loop
mov
int3
add
loop
pop
stos
bnd
push
arpl
mov
sbb
test
inc
mov
les
xor
cdq
js
popf
xchg
mov
xor
scas
imul
jmp
ja
sahf
inc
scas
daa
jb
jo
imul
cs
push
or
jns
fdiv
aas
push
adc
inc
adc
add
out
mov
add
and
pop
inc
xor
daa
stc
lods
repz
mov
popf
ror
dec
hlt
adc
xchg
ret
adc
(bad)
pop
adc
inc
mov
jne
neg
adc
mov
inc
adc
mov
add
leave
adc
jae
ins
loop
or
push
inc
sahf
sub
push
into
add
sbb
adc
int
xor
dec
mov
sub
pop
lahf
aaa
movs
cli
rcr
mov
xor
cmp
sbb
inc
les
jle
push
bsf
rcr
xchg
psrld
push
pop
jb
or
sbb
xor
es
cs
and
cmp
jnp
cmps
push
or
adc
mov
cmp
push
push
jmp
test
sub
adc
in
and
push
iret
cmps
or
jmp
(bad)
repnz
xor
dec
pop
ins
mov
stos
push
add
mov
push
push
jp
mov
fidivr
in
adc
pushf
imul
fucomi
or
lahf
pop
mov
mov
pushf
ins
sahf
cmp
(bad)
jae
and
mov
pop
mov
sti
out
sar
stos
lods
arpl
test
cmp
ja
and
inc
test
sub
xor
cmp
popa
call
scas
daa
je
sub
ror
aaa
in
dec
icebp
mov
mov
pop
fidiv
cmp
jmp
xchg
xor
xchg
inc
inc
imul
mov
sub
jae
push
and
(bad)
ss
xor
inc
dec
enter
ss
add
aaa
lock
xchg
xchg
adc
not
inc
or
in
add
xor
mov
jns
push
repz
add
inc
fisttp
mov
gs
sbb
sub
rcl
sub
push
idiv
rol
jge
les
and
pop
cmps
mov
sub
push
push
movs
movs
jmp
mov
les
ins
mov
into
xor
std
jmp
lods
scas
sub
push
lock
jns
mov
ja
cdq
mov
enter
mov
sar
out
ins
das
mov
inc
(bad)
movs
ja
xchg
dec
mov
xor
adc
sub
inc
lods
clc
mov
pop
dec
xchg
mov
mov
(bad)
mov
push
xchg
sbb
add
push
pop
push
sti
sub
(bad)
pop
push
(bad)
lahf
scas
test
out
icebp
out
adc
sub
sbb
xchg
xchg
fsub
gs
sbb
inc
push
pop
repnz
std
enter
mov
lock
retf
fwait
cdq
in
mov
repnz
pop
jno
or
js
or
push
xor
mov
push
(bad)
push
das
dec
int
jecxz
(bad)
mov
mov
mov
es
ror
je
cwde
sbb
pop
and
xor
mov
ret
pop
out
in
nop
push
mov
and
and
stos
fld
clc
mov
lds
loop
or
(bad)
xchg
inc
lds
fsubr
mov
or
xor
int
pop
push
loop
test
xchg
sbb
inc
ins
xor
jg
cli
xor
mul
and
fcmove
scas
add
jnp
push
sbb
in
sub
sbb
xchg
jmp
repz
data16
fdivr
xchg
sub
add
out
pop
adc
(bad)
sbb
add
fldenv
out
jno
cmp
lods
sar
and
(bad)
lods
(bad)
cmps
xchg
int
mov
daa
in
inc
iret
dec
push
xchg
push
repnz
cmp
(bad)
es
retf
fbstp
(bad)
and
int3
adc
rcl
xor
inc
shl
push
jl
ret
and
add
cdq
ror
cmp
push
adc
inc
je
lahf
pop
xchg
(bad)
ja
add
mov
or
cld
mov
ror
mov
cs
not
sub
inc
lods
in
(bad)
mov
adc
mov
dec
in
adc
es
mov
cld
retf
lahf
rcl
fild
cmp
ss
mov
adc
inc
retf
std
mov
or
or
sub
or
mov
adc
xor
nop
aad
xor
and
xchg
stc
mov
xor
test
scas
(bad)
jmp
jg
retf
cs
jns
adc
pop
std
push
adc
icebp
inc
adc
imul
xchg
sub
jo
xor
xchg
jo
or
idiv
adc
cmp
push
jecxz
ret
mov
xor
(bad)
cmp
jp
inc
lahf
jg
loope
or
push
dec
jge
bound
scas
lea
jne
dec
cmp
mov
hlt
fmul
push
mov
(bad)
push
hlt
(bad)
or
les
cmp
cmp
push
shl
xlat
and
jmp
sbb
imul
leave
pop
mov
pop
(bad)
cwde
xchg
mov
cmp
jo
repz
call
mov
jmp
mov
dec
jmp
dec
sti
sub
xchg
fwait
inc
sbb
hlt
retf
push
bnd
pop
sbb
mov
aas
jbe
cmp
aam
ds
push
pop
adc
ins
int3
test
fisub
enter
imul
inc
xor
retf
fs
dec
push
add
repz
sub
xchg
xlat
pop
cld
into
cs
addr16
pop
sbb
fnstsw
aam
mov
cmp
and
push
xor
lock
xor
or
cmp
fwait
mov
mov
cdq
lock
imul
pop
ins
sahf
xchg
lfs
cwde
jmp
in
adc
cmp
jno
sub
call
js
ds
daa
dec
cmp
sbb
sbb
cld
dec
inc
jb
pop
mov
xchg
imul
dec
jmp
test
sbb
push
mov
fwait
sti
pop
adc
pop
cmps
and
cdq
(bad)
mov
xchg
outs
(bad)
and
mov
repz
mov
pop
sar
in
movs
cwde
addr16
test
test
pop
xor
(bad)
xchg
inc
fwait
push
into
aam
sbb
xchg
aaa
mov
jb
sbb
adc
fnsave
mov
and
inc
or
lock
cdq
jo
test
pop
inc
sbb
push
jl
shl
cmp
mov
pop
inc
mov
fwait
popf
xor
adc
add
mov
xchg
nop
dec
or
adc
and
xor
fcomip
mov
cmp
jmp
inc
push
mov
mov
aam
lds
add
mov
sbb
xchg
enter
mov
xor
popa
cld
repnz
hlt
xor
push
nop
imul
mov
stc
push
cmp
mov
push
cwde
jbe
clc
sbb
fnsave
fstp
icebp
lods
fcmovb
shr
and
xor
ret
lods
jne
mov
pop
addr16
jle
dec
lds
or
(bad)
shl
mov
xchg
pop
fldenv
mov
out
fmul
inc
push
mov
sahf
out
movs
fnstenv
lods
lock
sub
sub
aad
jae
clc
push
out
cmp
outs
sbb
fadd
push
lock
mul
xchg
mov
pop
and
nop
pop
and
cmps
lock
(bad)
jle
outs
push
inc
or
pop
dec
dec
mov
jge
in
and
call
fs
sub
fwait
and
push
fwait
mov
dec
push
dec
iret
cmc
dec
mov
cmp
inc
stos
enter
xchg
xchg
mov
push
ret
or
fcmovnu
mov
pushf
xchg
push
(bad)
ins
or
cs
aaa
jp
les
icebp
das
push
or
pop
loop
push
push
ss
ror
pusha
jmp
xchg
call
ret
push
out
std
cmp
inc
xchg
dec
loop
mov
retf
or
push
mov
xchg
sub
ins
test
push
xor
jecxz
inc
(bad)
mov
dec
xchg
movs
dec
ficom
lahf
wbinvd
jl
and
in
dec
lahf
scas
mov
shl
not
outs
and
jp
loope
mov
mul
push
xor
aam
stos
xor
push
cli
je
push
data16
jg
inc
xor
in
hlt
lods
repz
pop
out
jg
push
in
mov
cmp
cmc
out
ds
icebp
shr
push
fadd
jbe
mov
and
movs
loope
jp
cld
pop
sbb
jecxz
scas
jno
or
pop
jno
inc
push
pushf
xor
or
gs
push
xchg
shl
test
rcr
pop
sub
inc
push
jns
jae
push
arpl
fidivr
jno
xor
dec
cmp
and
arpl
jge
add
lods
push
rol
nop
jo
ret
cs
jge
jae
scas
mov
push
mov
mov
mov
and
mov
or
int
mov
adc
sbb
sar
or
and
jno
and
cmp
jbe
mov
xor
(bad)
jbe
jno
xchg
retf
mov
xor
sub
jmp
push
mov
xchg
sbb
mov
mov
cmp
cmps
fsub
mov
(bad)
lock
test
retf
push
jb
lods
ficom
pusha
push
mov
mov
in
pop
sub
add
clc
loopne
jne
or
movs
pop
adc
pop
leave
add
mov
inc
cmp
sbb
test
ins
or
lock
push
mov
cmps
and
sub
ins
xor
rol
mov
or
mov
es
fwait
aaa
mov
and
test
mov
jo
jl
in
adc
pop
fisttp
and
shl
pop
mov
dec
or
shl
loop
iret
pop
retf
sti
xchg
stos
imul
mov
dec
inc
inc
sub
xchg
arpl
mov
ror
xchg
int
xor
mov
cmp
pop
xor
mov
addr16
test
inc
aad
es
sub
or
push
push
mov
mov
std
or
add
adc
shl
imul
add
dec
js
rol
dec
setb
dec
dec
dec
xchg
or
sub
pop
adc
sbb
push
mov
xchg
or
popa
hlt
(bad)
fwait
mov
aas
movs
cmps
sbb
popa
mov
clc
pop
push
mov
fsubr
stc
movs
mov
sysexit
jl
push
lods
dec
stos
mov
pusha
or
sbb
mov
ret
movs
test
xor
sbb
pusha
pop
les
adc
loop
js
(bad)
(bad)
imul
xchg
outs
imul
scas
dec
xor
rcl
xchg
mov
rcl
(bad)
in
mov
cli
cwde
outs
cli
or
push
lahf
inc
inc
sbb
and
sbb
cli
inc
jg
imul
cmp
loope
sub
pop
sbb
inc
pop
fs
mov
mov
jge
xchg
fst
dec
mov
cmps
mov
ss
mov
jnp
scas
sbb
je
je
push
jecxz
div
ret
pop
sub
jp
test
sahf
cmp
mov
mov
leave
jne
sub
fs
jle
mov
ins
call
iret
(bad)
or
aad
push
dec
adc
jmp
rcl
and
jmp
mov
cmps
mov
sub
lock
scas
mov
pop
push
retf
sub
in
push
sub
stos
imul
data16
sbb
pusha
iret
loope
dec
push
xchg
and
lock
sbb
in
add
movs
add
scas
push
mul
cmp
sub
clc
jmp
not
push
cmp
in
je
jl
sahf
mov
push
test
gs
mov
or
fwait
popa
loop
pusha
mov
mov
mov
div
(bad)
jmp
mov
push
nop
inc
iret
cs
sub
dec
fs
pop
loopne
lock
outs
fucomi
cmps
and
sub
call
lahf
pop
into
jle
jae
js
iret
or
mov
jmp
and
mov
or
fistp
mov
push
sbb
dec
test
or
div
jp
mov
mov
int
xor
hlt
pusha
sbb
shl
push
dec
mov
movs
push
(bad)
aam
and
daa
sbb
frstor
xor
gs
or
test
mov
xlat
sbb
xchg
fldcw
push
hlt
sti
cmp
mov
xchg
sbb
fild
shr
push
fnstcw
shl
ins
scas
(bad)
push
pop
outs
in
arpl
pop
and
jg
push
stc
pusha
into
arpl
xor
sub
sbb
mov
and
in
outs
mov
push
sti
push
mov
ret
pop
loopne
call
xchg
push
sub
pop
add
scas
jns
movs
push
and
paddsw
adc
jge
jge
lock
push
scas
addr16
or
xchg
test
pop
push
jns
retf
sahf
jno
jge
aas
div
(bad)
sahf
and
enter
shl
push
pop
lahf
aaa
xchg
adc
mov
add
in
mov
fsub
dec
or
cmp
xchg
sub
out
mov
and
into
popf
pop
dec
dec
(bad)
aas
sbb
sbb
test
xchg
clc
dec
in
addr16
cmps
dec
hlt
mov
pop
ins
daa
in
std
out
fidivr
es
pop
pop
dec
jne
inc
in
outs
hlt
mov
js
aad
scas
popf
cmp
inc
fldcw
into
mov
ins
push
mov
call
add
jg
jnp
loop
mov
pop
push
cdq
xor
adc
push
pop
cmp
and
arpl
test
xor
mov
fbld
xor
pop
mov
ss
imul
mov
push
sub
jb
add
push
sub
mov
int
mov
loopne
pop
dec
sbb
pop
fs
pop
inc
inc
inc
adc
(bad)
in
(bad)
adc
popf
cld
sbb
fsub
lods
in
push
(bad)
in
push
push
aad
jmp
pop
push
dec
(bad)
jmp
push
mov
jns
clc
leave
gs
xor
stos
mov
pop
fisttp
out
out
push
fmul
mov
das
xchg
(bad)
and
xor
xchg
mov
out
test
cmp
or
out
imul
add
call
mov
mov
sahf
into
gs
ins
ret
data16
dec
je
lahf
push
scas
xchg
jl
retf
je
mov
shr
sahf
enter
add
and
out
inc
xlat
iret
cmp
scas
xchg
clc
xchg
mov
popa
sbb
xchg
in
pop
aas
dec
sub
rcr
mov
adc
(bad)
in
and
adc
push
pop
rcr
and
in
into
cmp
push
ins
pop
rcl
lahf
mov
and
or
lock
leave
into
adc
enter
mov
inc
clc
ins
ror
mov
(bad)
dec
fidiv
fnstenv
movs
(bad)
aas
call
loopne
cmp
inc
aaa
and
jg
jns
(bad)
inc
xchg
nop
std
fld
iret
je
xchg
nop
sub
fwait
or
mov
xchg
aam
scas
call
pop
sbb
enter
mov
xor
test
ret
xor
out
mov
xchg
mov
inc
mov
jecxz
leave
cwde
or
add
push
neg
pop
pop
fs
mov
push
shl
xor
xor
jnp
lds
xchg
adc
push
pop
xchg
nop
cmc
movs
xchg
jge
stos
xchg
add
rcr
mov
sub
cmp
shl
push
sbb
xchg
adc
aas
mov
les
pop
xchg
scas
(bad)
pop
inc
and
push
sahf
mov
mov
and
mov
int
mov
ret
xchg
pop
dec
push
arpl
loop
pusha
fsubr
cdq
aas
std
pop
repnz
test
xchg
into
jmp
aas
aaa
int3
jo
inc
xchg
pop
mov
test
push
ins
xchg
fst
cmps
jg
xor
and
int3
adc
out
leave
movs
pusha
jge
popf
stc
lock
mov
leave
pop
mov
or
or
pushf
sti
jg
and
mov
mov
cld
pop
aam
cmp
cmp
jns
mov
push
sub
cdq
fstp
sbb
inc
imul
adc
sbb
(bad)
jo
leave
stos
adc
mov
int
enter
es
stc
pop
cmc
jge
je
adc
mov
dec
dec
in
fxtract
loope
xchg
mov
xchg
(bad)
sub
lahf
add
jmp
sub
mov
push
pop
nop
in
mov
stc
lahf
retf
xchg
push
jbe
rcl
xchg
out
mov
cwde
mov
xchg
aas
mov
mov
popa
mov
test
mov
sbb
fst
add
xor
adc
or
fsub
mov
fadd
xor
dec
aad
rol
mov
mov
dec
push
pop
adc
adc
or
push
jle
push
mov
imul
pop
ins
inc
mov
xchg
test
and
out
fcom
retf
inc
mov
sbb
or
ret
mov
mov
in
sub
cmp
rcl
js
lock
mul
xor
test
std
or
fld
push
shr
hlt
out
push
push
sbb
jmp
push
(bad)
cmps
sti
movs
xchg
sbb
push
jmp
movs
loopne
cmps
test
xchg
push
dec
lods
ror
sub
loopne
mov
and
jmp
pop
test
mov
xor
sub
pusha
xor
mov
lahf
outs
add
in
mov
mov
push
rol
int3
dec
mov
push
int3
ja
jp
push
mov
pop
test
mov
sahf
lods
add
cmc
arpl
push
enter
arpl
dec
aad
jno
pop
fistp
inc
jno
cmp
push
es
add
cmps
outs
add
push
xchg
inc
imul
jg
mov
pop
stos
cli
or
jle
add
pop
das
lds
cmps
ret
dec
in
xlat
popf
adc
pop
adc
cmc
mov
sbb
leave
stc
cmp
js
jg
out
sahf
ret
ins
push
and
into
ret
mov
sub
push
retf
mov
sub
or
pop
dec
push
jae
cmp
(bad)
aam
jmp
call
add
ins
fsub
lock
(bad)
mov
arpl
or
mov
aaa
mov
xor
lods
mov
icebp
dec
jnp
mov
xchg
lock
cmps
push
cld
inc
(bad)
xor
hlt
push
int3
jmp
std
jmp
(bad)
adc
push
and
push
popf
cld
pusha
popa
stos
inc
hlt
mov
pop
movs
out
jae
dec
bound
and
stc
cmp
fwait
icebp
sti
dec
ror
(bad)
sbb
shl
sub
jge
test
dec
cmc
sbb
sub
sbb
jl
and
sub
idiv
popfw
cmps
jle
or
scas
inc
xlat
or
and
ss
xchg
fbld
fucom
loopne
mov
jnp
pop
scas
lods
push
imul
ins
xchg
loope
xlat
push
test
xor
pop
pushf
rcr
(bad)
daa
adc
cmps
sbb
in
push
xchg
adc
add
iret
mov
jle
and
clc
mov
fadd
outs
fnsave
push
mov
pop
cmp
mov
sub
sbb
movs
enter
rcr
out
jmp
mov
out
xchg
out
adc
es
jmp
and
arpl
lea
fisubr
cdq
pop
sbb
jmp
inc
repnz
or
pop
lds
cmp
in
push
jno
outs
(bad)
punpckhbw
mov
mov
repnz
out
cmps
js
les
mov
jnp
adc
je
cmp
ss
or
lea
and
sbb
cdq
or
or
je
ins
repz
pushf
fcmovb
xlat
cmp
inc
cmc
std
xchg
jmp
scas
pop
jne
call
or
and
movs
mov
lds
and
mov
in
cmp
(bad)
in
loop
stos
sub
and
pop
mov
inc
push
out
sbb
call
mov
es
ds
popa
jp
cmp
jmp
repnz
loope
dec
cmp
push
out
jne
div
push
and
test
adc
cmp
xor
aam
mov
and
fsub
mov
stc
inc
ins
mov
mov
(bad)
dec
pop
dec
je
shr
rcr
repnz
mov
push
jns
hlt
inc
xor
sbb
aas
inc
fmulp
mov
add
imul
cmps
test
and
adc
cbw
fs
rcl
mov
mov
mov
pop
cmp
mov
xchg
cli
imul
xchg
repz
test
loope
into
adc
lods
sbb
xchg
xchg
add
push
shr
aas
movs
mov
push
push
les
stc
and
jl
and
retf
adc
push
call
xchg
and
outs
or
cmp
mov
xchg
xchg
hlt
pop
hlt
scas
mov
inc
movs
cdq
sbb
sahf
inc
adc
lea
std
hlt
js
(bad)
in
dec
pop
push
adc
sbb
cwde
inc
cmp
sub
in
mov
in
scas
jle
or
xor
popf
bound
xchg
jmp
fcmovnb
inc
jmp
sub
fdiv
pop
xchg
scas
mov
movs
xor
push
xchg
pusha
ret
(bad)
adc
xor
clc
xchg
dec
push
clc
sub
or
push
add
pop
xor
bound
icebp
das
aas
dec
push
stos
push
xchg
aas
jbe
xchg
push
xlat
mov
je
test
xlat
add
cld
mov
jge
sbb
dec
pop
mov
daa
push
cmps
sub
jmp
mov
out
xlat
xchg
cdq
mov
inc
jp
in
pop
mov
mov
(bad)
fnstsw
push
or
scas
cwde
sub
and
adc
aad
and
rcr
xlat
sbb
shl
das
mov
inc
ja
arpl
jg
dec
scas
ja
sub
loope
or
call
sbb
sub
mov
mov
les
cmp
dec
call
hlt
jns
shl
in
aaa
(bad)
loopne
pop
scas
inc
retf
in
jnp
pop
(bad)
mov
and
jg
std
ror
dec
push
xchg
jns
cmps
dec
xchg
out
pushf
jbe
popf
addr16
sub
(bad)
mov
fst
mov
and
add
sbb
xor
dec
test
popa
(bad)
fisub
jge
xchg
movs
xchg
ret
mov
cmp
dec
popf
(bad)
pop
arpl
mov
mov
fs
xor
xor
add
jmp
pop
pop
shl
mov
push
cmp
push
cwde
int
sahf
(bad)
jle
push
mov
cmp
nop
jno
and
lock
aas
jbe
shr
adc
(bad)
loope
inc
push
adc
sbb
xlat
enter
repz
pop
cdq
cmps
icebp
movs
push
cmps
inc
ret
inc
test
sub
xor
out
jmp
aas
inc
shr
sub
or
push
stc
or
cmps
mov
sahf
adc
cmp
cmp
mov
int
jmp
jne
outs
xchg
jge
inc
push
xchg
jp
out
stc
inc
mov
xchg
pop
dec
add
fwait
inc
or
inc
mov
pcmpeqw
fnstenv
adc
jg
cmc
push
jecxz
fcmovbe
or
jnp
xor
add
ins
call
sub
hlt
dec
push
cld
sbb
and
ja
push
sar
pop
pushf
call
cmp
nop
ins
test
fidiv
inc
pop
adc
push
aam
sar
ja
mov
popf
mov
js
pop
(bad)
shl
std
popf
mov
dec
dec
mov
mov
push
cli
aas
das
aam
mov
dec
das
into
mov
push
cmp
fist
cmp
je
loop
bound
mov
ret
jne
shl
push
sti
fst
xchg
frstor
push
or
ja
dec
and
dec
dec
mov
xchg
nop
and
(bad)
cmp
and
and
aad
call
sbb
pushf
fisub
lahf
inc
mov
movs
add
sar
mov
xlat
inc
mov
jns
jecxz
pop
mov
xchg
jg
xor
mov
mov
pop
cmp
shr
ins
push
or
jle
adc
leave
inc
jae
mov
cmc
mov
adc
push
push
fcmovnb
hlt
mov
aad
lds
xchg
dec
jmp
dec
mov
mov
mov
aaa
ds
lahf
scas
push
mov
mov
icebp
nop
xor
in
ja
fldz
test
sahf
adc
add
jp
jp
jecxz
sub
es
cmp
pop
mov
jns
jmp
xor
pushw
fwait
test
xor
stc
pop
cld
test
sub
fstp
adc
adc
cmp
cmps
mov
cmp
push
fist
cmp
fiadd
sub
aaa
mov
pop
sti
jae
mov
nop
icebp
in
xchg
xor
sahf
mov
dec
sar
or
outs
iret
push
iret
in
mov
mov
xchg
sub
out
mov
cmp
(bad)
or
push
or
jecxz
push
loopne
loop
ror
adc
sti
(bad)
sbb
push
jbe
cli
pop
sti
jno
pop
inc
jp
ret
sub
(bad)
neg
cs
stc
div
scas
out
shr
sbb
sub
mov
in
adc
out
mov
cmps
or
js
cmp
or
xchg
and
inc
xchg
call
inc
and
add
sub
ins
adc
rcl
repnz
inc
addr16
inc
jg
clc
jge
icebp
icebp
in
push
mov
movs
mov
jp
pop
pusha
mov
pop
dec
ja
and
mov
mov
dec
popf
jl
test
jae
add
push
or
jg
pop
cld
dec
pop
test
int3
xor
add
jecxz
push
add
outs
popf
ret
sub
xchg
and
xchg
les
mov
out
push
sbb
fadd
sub
pusha
xchg
mov
jno
adc
addr16
mov
out
push
lods
addr16
out
or
loop
sub
scas
loop
lods
aad
mov
jmp
in
dec
or
fcmovu
cmp
lods
pop
aas
outs
xchg
jp
cmp
arpl
lea
test
push
es
psadbw
jnp
fxch
(bad)
adc
ss
ret
repz
or
aaa
or
test
int
push
cmps
inc
(bad)
fadd
aaa
sbb
cli
sub
dec
cli
mov
add
sbb
mov
pop
cmp
inc
fdivr
ins
xor
push
aam
mov
outs
push
popf
fidiv
lahf
hlt
dec
push
fadd
pop
inc
jnp
shl
jbe
jmp
inc
cmps
(bad)
push
scas
push
clc
add
out
xor
bound
pop
mov
mov
mov
or
fwait
dec
shl
or
dec
jg
xor
std
adc
cmp
fisttp
je
sub
dec
cwde
neg
xchg
adc
test
int3
mov
popf
sbb
and
out
fadd
pop
aaa
frstor
push
fistp
mov
adc
call
xchg
push
push
dec
sar
gs
dec
int
mov
mov
pusha
dec
xchg
jne
jmp
nop
and
sti
int3
dec
(bad)
dec
imul
adc
inc
jecxz
std
loopne
or
sub
mov
arpl
or
inc
add
and
ror
dec
pop
aaa
fidiv
mov
jae
jp
mov
jle
js
cld
inc
call
jne
push
pop
sbb
add
push
enter
aaa
imul
into
cwde
mov
jmp
mov
jge
dec
and
es
and
inc
icebp
ror
in
outs
jl
into
pusha
xchg
iret
int
mov
aaa
and
cmc
xchg
popa
ficomp
jns
adc
and
push
cmp
pop
mov
stos
pop
adc
mul
enter
scas
dec
or
mov
sbb
sbb
push
push
movs
mov
push
int
repnz
and
add
jecxz
out
rcl
fwait
adc
jg
push
dec
int3
and
out
test
ss
ret
popf
pop
adc
enter
popa
cmp
jne
or
add
aam
xchg
sbb
mov
shr
or
leave
inc
pop
add
mov
pop
mov
(bad)
cli
test
mov
mov
xor
(bad)
mov
and
or
stos
mov
movs
mov
mov
cmp
or
push
inc
gs
mov
into
in
pop
dec
cmc
cmp
lods
stos
ins
dec
and
mov
xchg
inc
add
ja
add
enter
rol
inc
fucom
dec
push
xor
std
xor
fs
mov
jg
sub
pushf
or
dec
sbb
xchg
out
xchg
test
mov
adc
mov
pop
ret
scas
imul
(bad)
sub
sbb
inc
push
(bad)
xchg
mov
jbe
out
adc
cld
fdiv
stc
daa
inc
loop
add
xchg
in
jge
sub
inc
xchg
jmp
(bad)
push
(bad)
xor
stos
sub
popf
pop
mov
add
cmp
not
imul
add
cwde
repnz
aad
xor
in
(bad)
inc
aam
push
pop
out
js
or
cmp
scas
ins
(bad)
call
(bad)
mov
popa
(bad)
popf
sbb
mov
sub
leave
push
jae
aam
mov
pop
fstp
and
lods
push
sub
xchg
cmp
inc
adc
or
mov
pop
sub
mov
dec
ds
xor
adc
pusha
call
aaa
(bad)
sbb
dec
popf
cs
sbb
imul
jmp
(bad)
mov
push
fsubrp
fadd
loopne
and
outs
lock
push
pop
mov
xor
push
cmp
sbb
imul
outs
jne
ss
mov
out
and
lea
movs
dec
cmps
mov
add
mov
outs
pop
int3
jne
and
or
dec
stc
fucomp
add
jmp
mov
je
jo
xchg
jno
adc
or
sbb
mov
retf
ret
add
mov
mov
mov
mov
(bad)
jmp
or
push
jle
sub
cmp
pop
in
aam
xor
mov
push
pop
repz
cmp
pop
lahf
dec
jo
mov
loop
jmp
mov
sbb
imul
xlat
push
loop
dec
push
hlt
cmp
mov
jmp
std
xchg
push
jb
jns
sbb
cmp
out
es
xlat
sub
add
fimul
outs
psrad
aaa
sub
xor
mov
pop
adc
popf
push
es
aaa
jle
jecxz
mov
mov
cwde
outs
jle
add
(bad)
sbb
inc
push
pop
not
enter
movs
loopne
ja
stc
fsubr
arpl
dec
adc
fild
push
outs
cmp
mov
mov
mov
adc
retf
pop
cmp
popa
and
cmp
mov
cmp
out
fidiv
push
add
adc
sbb
sub
clc
xor
pop
stos
inc
xor
adc
inc
cmp
dec
mov
sub
pop
jmp
dec
dec
test
cmp
jle
out
popa
hlt
cmp
mov
(bad)
cmc
jae
dec
push
adc
xchg
adc
adc
pusha
pop
test
out
xor
and
sti
xchg
jg
adc
jecxz
sbb
add
dec
div
clc
push
js
hlt
scas
fs
sti
and
push
dec
out
retf
push
jne
ss
xor
cmp
or
sar
push
jno
std
ror
jge
pop
stos
bound
mov
jbe
jmp
loop
sbb
push
ja
pop
in
adc
cmp
mov
enter
or
in
(bad)
push
arpl
popa
loope
push
push
repz
or
(bad)
sub
lods
xlat
push
addr16
jno
pop
div
arpl
stc
mov
cmp
adc
sahf
jge
dec
and
mov
arpl
mov
enter
addr16
ficom
adc
pop
jle
arpl
cmp
lods
in
ds
enter
adc
and
sub
or
jae
mov
inc
dec
enter
pusha
add
xlat
push
addr16
push
je
test
daa
(bad)
(bad)
arpl
clc
int3
sbb
inc
sbb
loopne
dec
jbe
jnp
jae
jl
sub
xor
in
pusha
inc
mov
adc
cdq
push
and
(bad)
js
pop
pop
jae
mov
inc
dec
enter
pusha
add
fld
and
push
scas
xor
xor
or
es
enter
inc
pop
mov
sub
cli
jno
ins
sub
mov
sti
jle
gs
int
js
cmp
popa
add
jge
es
repz
stc
sar
sub
or
jl
add
jg
hlt
ss
sti
aad
sub
inc
mov
dec
jbe
jae
dec
in
and
xor
jle
(bad)
cmp
inc
mov
fstp
pushf
ja
leave
loope
in
mov
mov
in
lahf
ins
pop
stos
mov
jno
retf
mov
xchg
pop
or
sbb
mov
jae
xchg
jmp
std
aad
fdiv
test
aaa
out
movs
sti
jle
mov
(bad)
icebp
(bad)
mov
and
mov
sub
adc
fcmovne
mov
neg
and
mov
(bad)
or
cdq
ror
jnp
test
and
pop
adc
fimul
or
push
mov
sub
call
jge
shl
fs
and
outs
cwde
adc
add
inc
dec
xor
lock
fs
inc
and
mov
sub
mov
xchg
arpl
or
mov
xor
ins
sbb
pop
xchg
dec
add
xchg
adc
outs
sahf
lods
pop
dec
xor
imul
inc
mov
inc
enter
js
mov
data16
sbb
(bad)
into
inc
lock
mov
inc
int
imul
dec
sub
cmc
div
cmp
push
adc
cs
div
shl
mov
in
ret
mov
or
stos
xchg
sub
retf
adc
and
cs
mov
idiv
dec
dec
sub
push
js
aas
in
stc
ins
mov
xchg
mov
addr16
mov
xor
xchg
pop
jnp
ins
sbb
and
cmp
xchg
(bad)
lahf
(bad)
test
xor
sbb
dec
pop
push
test
lea
jmp
ror
cmp
fadd
rcr
(bad)
dec
add
ret
pushf
mov
xchg
push
arpl
hlt
stc
mov
push
movs
adc
jmp
addr16
(bad)
dec
pop
xor
js
js
push
fbld
fs
sub
or
lods
out
outs
or
jle
mov
fbld
add
mov
cmps
repnz
push
sbb
jne
retf
fldln2
mov
jecxz
out
call
mov
mov
loop
cmp
enter
mov
(bad)
and
cdq
sar
xchg
lahf
imul
repz
imul
(bad)
sub
cmps
aaa
sbb
fcomp
pop
lds
sti
cmp
sbb
loopne
pop
cdq
push
sub
jb
push
enter
mov
aaa
and
dec
jo
cli
cdq
cmp
dec
lahf
mov
sub
cmp
cmps
cmc
or
pop
and
test
pop
jmp
push
pop
add
xchg
or
(bad)
call
mov
in
test
int
and
jg
pandn
xchg
adc
sub
pop
xchg
nop
fld
mov
rcl
add
add
mov
jne
scas
mov
mov
dec
test
xchg
fdivr
and
add
add
imul
push
push
loop
xchg
fwait
xlat
and
dec
fadd
sbb
xlat
add
xor
neg
(bad)
sub
mov
jp
vpmulhuw
cwde
jmp
mov
pushf
popa
xchg
cmp
mov
push
pop
addr16
push
add
das
gs
iret
or
nop
lock
stos
mov
lock
push
arpl
pop
jmp
push
sbb
push
ds
mov
push
lds
das
xlat
(bad)
stc
jle
loop
cwde
mov
push
jl
mov
dec
ins
dec
stos
enter
mov
or
shl
jg
retf
neg
inc
into
out
xor
push
and
enter
aad
sbb
push
ret
scas
mov
pushf
(bad)
scas
and
xchg
daa
mov
jecxz
pop
aaa
or
and
lds
xlat
xor
div
fdivr
cmp
adc
out
mov
sub
(bad)
sbb
cmp
pusha
jne
sbb
mov
mov
or
push
sub
rol
outs
or
push
retf
test
add
ins
push
xchg
loop
mov
jmp
enter
(bad)
addr16
inc
in
or
xor
lods
cmps
push
(bad)
sbb
into
ret
mov
aam
mov
rcr
sub
ror
xor
or
xchg
push
scas
cmp
mov
test
xchg
(bad)
fisub
pop
mov
paddw
fsubr
mov
imul
movs
loopne
fbstp
cmps
jae
loop
leave
mov
js
mov
data16
dec
cmp
inc
mov
add
inc
sub
or
sub
dec
test
jg
arpl
mov
pop
popf
fsqrt
lahf
lock
mov
and
call
xchg
out
outs
call
fld
mov
jae
out
or
stos
loopne
push
les
jecxz
and
add
das
jge
xor
out
lods
outs
add
mov
pop
adc
gs
cwde
fidiv
adc
stc
or
add
and
popf
xor
push
xchg
and
xchg
iret
ds
sti
je
jmp
pop
bound
mov
outs
enter
test
mov
jo
sbb
xchg
repz
xchg
out
pop
loopne
mov
xor
ror
add
popa
sub
int3
leave
xchg
inc
mov
adc
xor
xor
cmps
lock
int
and
mov
mov
dec
fbstp
dec
mov
fcmovnb
aaa
pop
outs
jno
iret
pop
or
push
inc
mov
mov
or
jns
sub
and
data16
mov
mov
and
and
mov
pop
shr
mov
inc
addr16
iret
push
cmc
cmp
mov
into
mov
pop
mov
add
mov
sbb
adc
adc
lock
sar
jns
sub
cmps
call
jns
jb
push
mov
xor
in
bound
scas
add
sar
addr16
push
test
sub
xchg
lds
ror
inc
(bad)
xchg
call
add
mov
and
cs
fcom
mov
iret
(bad)
aaa
mov
push
mov
add
mov
(bad)
push
cs
adc
xor
test
push
sub
(bad)
jns
mov
jnp
dec
popf
imul
inc
sbb
scas
pop
xlat
mov
sub
les
mov
mov
loop
inc
int
xchg
mov
dec
mov
stc
shl
xchg
pop
repz
xchg
ins
xchg
cmp
mov
out
mov
out
push
jmp
cmp
sbb
and
shl
in
fdivrp
mov
movs
or
call
push
xchg
cmp
inc
dec
add
stc
pop
test
test
adc
dec
mov
xchg
adc
jmp
daa
mov
aad
fld
jne
inc
int3
mov
js
mov
test
inc
call
add
and
xchg
push
sbb
mov
fwait
call
push
sub
or
xlat
pop
fcom
fisubr
or
dec
cmp
push
push
cmps
pop
scas
stos
sti
xor
aaa
mov
cmc
rol
inc
mov
rcr
jl
fs
or
mov
pop
sub
mov
cmp
mov
shl
es
mov
xchg
not
adc
inc
aad
(bad)
push
mov
mov
xor
out
cmc
jge
mov
cmps
dec
add
dec
inc
cmc
rol
xchg
bound
neg
cmps
jae
stos
mov
scas
ds
jp
dec
cmp
inc
mov
aaa
int3
nop
push
cmps
mov
scas
mov
jmp
scas
sahf
into
cmp
jmp
mov
sbb
lds
push
movs
mov
imul
pop
mov
shr
xchg
int
loop
fiadd
loopne
sub
and
cwde
or
test
lock
cwde
inc
iret
push
jp
pop
push
adc
add
inc
cmp
cmp
adc
fsubrp
dec
inc
cld
add
xchg
cmp
add
adc
xchg
repnz
popf
dec
adc
pop
(bad)
ror
push
and
shl
aam
pop
push
stos
lea
and
(bad)
xor
in
jp
dec
push
cmp
outs
ja
or
jne
(bad)
dec
cmp
pusha
in
push
push
dec
mov
push
cwde
sbb
pop
and
shl
pushf
sbb
jo
pusha
shl
fsub
push
rol
dec
adc
pop
stc
adc
pop
jno
mov
xchg
or
dec
icebp
(bad)
int3
into
add
ror
fwait
shl
dec
into
sbb
inc
cwde
rcr
inc
pmulhuw
and
lods
xor
fcomp
je
stos
repnz
pushf
lods
mov
movs
or
pop
jbe
jl
adc
popa
fld
or
mov
fsubr
loope
mov
dec
dec
or
mov
dec
mov
js
mov
fnstenv
jnp
sti
sti
mov
enter
ja
mov
hlt
mov
cmp
xchg
inc
cs
pop
out
adc
inc
push
xchg
mov
out
arpl
aaa
sahf
add
jo
pop
mov
(bad)
sahf
mov
mov
mov
(bad)
dec
cwde
aas
cld
xor
test
sbb
pop
jmp
or
sbb
daa
mov
sahf
xor
cli
bound
enter
mov
sbb
out
pusha
mov
xor
push
aas
add
mov
jo
test
ret
xor
xor
sbb
sbb
neg
ret
fld
xchg
imul
push
xchg
xchg
loop
rcl
adc
pop
dec
gs
adc
push
or
sub
jb
test
mov
dec
pop
mov
adc
imul
loop
pop
test
imul
mov
jae
xor
jo
ins
mov
adc
push
retf
cmp
es
stos
mov
pop
sub
or
outs
out
fadd
dec
push
das
push
hlt
popf
mov
cmps
mov
mov
mov
bound
or
dec
or
xchg
xchg
daa
into
mov
repz
pop
aas
cli
mov
jle
ss
xchg
out
jb
jmp
ror
adc
sub
ins
sub
enter
pop
std
mov
dec
fild
rep
cwde
mov
dec
cmp
inc
mov
ds
mov
std
adc
aaa
xchg
imul
dec
push
cmps
xor
sbb
or
cmp
cmp
out
fld
rcr
jo
jne
(bad)
pop
add
es
pop
jmp
out
int3
imul
loop
scas
outs
cmp
jns
aaa
ins
iret
mov
push
ret
and
mul
hlt
sub
stos
jmp
mov
mov
lds
push
in
inc
fwait
inc
sahf
aas
pusha
das
sub
mov
fcom
daa
out
mov
mov
and
imul
jnp
mov
jmp
cwde
das
inc
push
add
add
dec
aad
outs
cmp
push
into
sub
pop
(bad)
retf
xchg
mov
jns
or
repz
clc
stos
call
dec
lea
les
scas
sub
retf
cli
iret
pop
adc
addr16
mov
sbb
jmp
in
out
psubsb
push
in
fdiv
push
dec
fistp
pop
cmp
aaa
or
pop
dec
pop
stc
inc
add
ror
and
les
xchg
jbe
call
mov
sahf
ss
xor
data16
inc
stos
mov
mov
mov
(bad)
ret
sub
test
pusha
pop
fist
pop
push
out
into
xchg
cmp
xor
push
mov
jns
fstp
mov
ret
pop
adc
xchg
mov
push
jno
cs
ds
push
adc
int
adc
push
out
push
je
push
adc
test
test
add
add
push
in
ret
aaa
add
stos
fisttp
test
or
dec
pop
out
into
or
lea
or
sbb
out
jg
xchg
pushf
cmp
sub
pop
mul
cmps
adc
mov
mov
call
pop
pop
xchg
lea
inc
xlat
inc
mov
add
jmp
sahf
into
dec
add
std
out
jns
jmp
cs
mov
fild
inc
retf
jae
add
and
out
pop
movs
arpl
or
jle
out
in
xlat
stos
jno
push
mov
dec
cmp
dec
mov
pop
movs
jbe
into
mov
neg
xor
fisttp
xchg
call
xchg
pop
test
addr16
cdq
fsub
xor
xchg
xchg
pop
lods
cld
jecxz
sahf
and
test
pusha
call
sti
jmp
or
div
push
les
sub
call
cld
jno
ins
inc
jbe
mov
dec
aaa
jecxz
ins
movs
adc
(bad)
mov
cmova
inc
add
arpl
push
mov
add
stos
sub
cld
dec
xchg
repnz
leave
mov
push
xchg
pop
pop
xor
cmp
mov
sbb
pop
mov
dec
and
mov
mov
aam
jnp
jo
lods
adc
xchg
xchg
jl
leave
call
or
or
ds
je
bound
test
add
lock
sbb
fwait
bnd
push
nop
inc
loope
lods
pusha
xor
jo
(bad)
push
xor
pop
dec
into
ror
pop
adc
mov
sbb
out
call
xchg
cmps
cdq
sbb
xor
imul
inc
push
jmp
and
clc
mov
xchg
push
sub
sbb
cmc
addr16
cdq
je
fild
xchg
jl
imul
cmps
dec
dec
mov
or
push
add
mov
push
imul
mov
dec
mov
bound
in
int3
icebp
out
in
iret
out
jecxz
add
sub
aas
les
sbb
pop
jns
mov
push
dec
aaa
(bad)
pop
shl
icebp
jmp
ret
outs
sbb
arpl
jb
xor
faddp
(bad)
push
retf
cdq
pop
inc
ins
test
test
inc
out
out
test
inc
fmul
retf
ret
mov
jmp
dec
movs
pop
push
es
pushf
xor
mov
mov
sbb
(bad)
sar
jbe
push
test
mov
mov
pop
pop
call
and
dec
xlat
mov
sub
lods
ins
arpl
adc
aaa
xor
ds
jmp
test
out
jecxz
xor
popf
jp
ins
cdq
sbb
xor
mov
jne
mov
in
add
sub
xor
inc
(bad)
call
and
push
retf
(bad)
inc
ss
mov
sub
jecxz
cmp
in
cmps
sbb
js
mov
dec
in
ja
in
(bad)
push
je
add
sbb
pop
and
jp
mov
test
shr
cdq
push
jne
enter
mov
jmp
iret
pop
xchg
mov
dec
and
mov
shl
dec
ja
sti
div
arpl
xor
push
lods
icebp
xor
adc
movs
xor
add
test
xor
das
sub
ja
lea
mov
aam
push
mov
mov
push
jmp
rcr
data16
pop
mov
ror
mov
jns
arpl
leave
dec
ror
test
xchg
dec
lahf
retf
jbe
jnp
pushf
sub
popf
in
mov
loop
pop
cmp
aam
jne
iret
xor
out
and
test
xchg
(bad)
jge
popa
xchg
sub
add
xchg
add
mov
xchg
pop
push
push
mov
vmulsd
(bad)
pop
add
inc
mov
lds
jmp
add
(bad)
dec
mov
das
punpckhwd
jmp
adc
mov
mov
xchg
jo
mov
inc
cmps
popf
in
shr
adc
cmp
jmp
stc
and
push
pop
loop
xchg
mov
pop
imul
mov
gs
mov
jmp
pop
xor
out
xchg
cmp
(bad)
mul
dec
add
lods
iret
sbb
mov
pushf
push
in
test
push
and
and
les
out
jb
xor
pusha
sub
add
ds
retf
dec
retf
add
mov
and
je
xor
xchg
idiv
mov
inc
jg
mov
cmp
push
pop
enter
or
lods
adc
dec
stc
xchg
in
pushf
ins
movs
std
ret
mov
push
or
fsub
retf
mov
lea
cmps
call
add
pop
stc
mov
cmp
dec
cld
adc
fstp
jno
fisub
pop
vorps
add
out
xor
and
sti
dec
pop
stc
in
and
repz
jp
cmp
push
cmp
push
or
push
mov
add
or
adc
fsub
call
jp
loopne
push
loope
mov
aad
add
enter
ss
mov
sbb
daa
mov
test
mov
jae
sar
(bad)
cs
xor
dec
add
fild
add
sub
add
rsqrtps
sbb
xchg
xchg
pop
inc
pop
out
cmp
ret
and
xchg
xlat
rcr
enter
add
xchg
fidiv
jbe
out
mov
add
and
pop
xchg
xor
mov
ret
jg
mov
call
cmps
jmp
pop
or
stos
push
fs
mov
mov
adc
and
icebp
(bad)
ins
(bad)
repnz
mov
push
jp
retf
aaa
push
mov
dec
mov
xchg
loope
pop
mov
ret
dec
jl
xchg
repnz
jmp
retf
push
xor
push
in
push
lods
nop
mov
xchg
scas
popa
popa
imul
call
sub
fwait
dec
adc
daa
xchg
cmp
or
xor
pop
movs
xchg
and
mov
sub
cs
jbe
push
mov
push
dec
jbe
jne
sub
inc
mov
lock
sbb
imul
sbb
retf
xchg
retf
jne
and
pop
cmp
outs
nop
inc
not
shl
mov
int
xchg
fcom
or
jg
and
mov
fld
out
pop
adc
inc
fcomp
minps
fld
push
jno
xchg
arpl
mov
or
pop
mov
xlat
(bad)
test
lods
cmp
ret
mov
mov
push
inc
mov
movs
pop
das
sti
jp
mul
adc
adc
push
jmp
cmp
mov
or
pop
and
rcl
gs
inc
gs
xor
or
mov
ja
mov
xchg
jle
std
retf
pop
pusha
adc
jmp
mov
jmp
xchg
mov
aam
inc
inc
loop
iret
retf
xor
and
test
or
mov
pop
mov
rol
fld
out
sub
popa
ret
inc
pop
mov
cli
gs
cbw
cdq
mov
sub
cmp
(bad)
pop
fnstsw
cmp
sub
push
adc
(bad)
sub
dec
mov
sub
hlt
xchg
test
mov
fwait
jae
(bad)
fiadd
dec
stos
xor
add
je
or
sub
retf
jmp
jno
aaa
push
inc
pusha
dec
(bad)
jge
adc
xchg
jecxz
pop
fs
div
jmp
shl
or
mov
jle
mov
jmp
jle
stos
lods
pop
loopne
add
aad
mov
adc
retf
adc
cdq
cs
lods
fstp
mov
das
jl
jge
push
add
mov
imul
aas
cld
iret
(bad)
inc
xchg
retf
test
stos
neg
ds
or
popa
bound
inc
jne
or
lock
xchg
pushf
das
shl
cmps
pop
and
cmps
ret
daa
sub
cs
cmp
cmps
in
in
or
aad
lds
xchg
xchg
cmps
sub
in
sub
dec
mov
in
in
xlat
dec
pop
mov
xchg
sub
xchg
cmc
mov
inc
dec
cmp
std
pop
mov
jno
sbb
cmp
leave
sbb
lock
(bad)
xor
jae
push
mov
loope
loop
add
dec
jmp
sub
sub
cmp
cdq
jno
stc
ja
cdq
inc
jno
add
test
cdq
fwait
(bad)
fs
push
add
add
lods
add
jne
call
sub
xor
push
ins
pop
pop
xchg
dec
outs
jmp
mov
fdivrp
mov
sbb
ins
xor
arpl
shl
add
xor
mov
cdq
add
nop
inc
mov
add
stc
sub
ins
pop
jecxz
jecxz
fs
(bad)
arpl
fcomp
sbb
dec
pop
dec
lods
pusha
icebp
mov
imul
retf
inc
fiadd
xchg
add
jmp
sbb
ins
loope
es
fnsave
inc
xchg
sbb
lahf
aas
add
mov
cmps
pushf
ret
push
adc
pop
pop
into
cdq
imul
out
outs
inc
mov
pop
stc
repnz
into
adc
sub
scas
fwait
or
sahf
mov
jbe
js
inc
jge
mov
mov
dec
pop
daa
mov
mov
sub
xor
push
je
fwait
imul
mov
mov
adc
jge
mov
aas
mov
adc
je
sti
sub
cmp
cs
adc
loop
jge
push
aas
cmps
mov
popf
xchg
icebp
jae
sahf
movs
dec
and
inc
stos
js
(bad)
sahf
mov
ret
out
and
xor
pop
imul
aad
mov
test
cmp
inc
lds
mov
jge
or
fistp
sti
int3
call
popa
dec
dec
pop
cli
hlt
repnz
jnp
test
mov
ins
push
sbb
add
push
jne
out
shl
or
pop
cmc
adc
jb
and
pop
mov
imul
pushf
and
rcl
lea
arpl
pop
pop
push
mov
adc
adc
dec
pop
pop
push
(bad)
int
sar
ss
jmp
xchg
jno
adc
jmp
xchg
pop
cs
dec
inc
aaa
inc
call
(bad)
das
aam
out
pop
lds
dec
xor
aas
out
cmp
call
lds
pop
retf
or
call
adc
or
test
ret
or
js
jb
retf
mov
icebp
and
rol
inc
dec
sub
out
(bad)
test
jmp
pop
pop
push
lock
jmp
shl
fadd
ret
lock
sar
test
daa
xor
jl
imul
adc
(bad)
mov
mov
pushf
aas
das
mov
xor
inc
stos
in
cmps
ror
jge
bound
movs
cmp
inc
clc
sub
movs
mov
lds
sbb
jo
push
add
cmp
sbb
or
sub
cmps
push
push
outs
mov
pop
mov
xchg
scas
out
cmps
pop
outs
or
out
arpl
test
mov
ret
into
sub
clc
mov
lods
repz
adc
jmp
add
(bad)
int
daa
sahf
lea
cmps
add
and
jp
iret
jmp
mov
clc
mov
in
repnz
xor
push
cmp
jo
jp
xchg
test
dec
into
icebp
movs
ins
fild
jae
add
mov
cmps
out
call
loope
sub
popf
sbb
or
sbb
push
push
push
hlt
adc
loopne
mov
push
push
ja
and
jmp
stc
and
jge
ret
jmp
or
jno
inc
inc
gs
dec
add
inc
xchg
ja
jo
sbb
test
(bad)
out
call
pop
in
(bad)
bsr
test
cmp
inc
push
std
repz
mov
mov
or
xlat
das
cmps
sbb
lods
xchg
stc
jp
test
xor
push
mov
in
nop
rcl
ror
repnz
sbb
adc
push
sahf
xlat
fs
dec
loop
test
push
push
xlat
xor
xor
dec
stos
pop
xor
int3
pop
ds
add
pop
ins
push
pop
jo
test
cmp
dec
jl
fnsave
jb
ret
js
pop
sub
or
jo
sbb
cmp
movs
fsub
push
fmul
mov
push
inc
repnz
hlt
jle
sub
nop
dec
js
inc
pop
imul
pop
mov
add
add
pop
adc
cmp
popa
jns
fwait
ja
push
xchg
xor
xor
dec
mul
enter
mov
jae
jbe
mov
sbb
pop
dec
sub
pop
xchg
pop
fmul
(bad)
sbb
mov
fs
jnp
shl
xor
cmp
pop
xlat
add
ds
push
or
leave
jecxz
push
lds
xchg
push
scas
mov
jecxz
cmp
test
stos
test
or
pop
push
adc
cmc
dec
(bad)
xchg
cmp
pop
push
mov
adc
mov
psllq
iret
mov
mov
xchg
inc
out
xchg
in
push
push
inc
clc
icebp
imul
and
push
ja
daa
inc
gs
add
push
aaa
loopne
push
repnz
and
pop
pop
hlt
cmc
shr
inc
mov
cs
aas
dec
in
imul
popa
sub
xor
jmp
cld
add
adc
dec
sar
mov
sub
lock
stc
sub
cmps
cmp
mov
mov
or
cmp
adc
jns
loopne
or
dec
(bad)
inc
dec
stos
lods
adc
shl
or
sahf
xchg
sbb
push
fst
dec
sub
pop
iret
xor
(bad)
fwait
sub
pop
aaa
fs
sahf
test
adc
rcl
jno
xchg
mov
nop
mov
mov
(bad)
fadd
push
jg
xchg
loopne
(bad)
jl
ficom
add
sub
mov
imul
or
inc
dec
jmp
add
mov
int3
cmps
xchg
and
fs
sbb
sbb
jb
repnz
mov
or
movs
inc
addr16
mov
lds
cmp
sbb
or
outs
addr16
cld
(bad)
cli
add
lods
adc
sbb
repz
jo
add
xor
and
mov
into
jo
inc
sbb
pop
inc
sbb
adc
adc
loopne
jne
pop
add
push
imul
jmp
jmp
sub
pop
es
adc
icebp
enter
jno
mov
cli
stos
push
dec
lods
outs
repz
dec
mov
or
jp
pop
test
mov
test
sar
out
test
gs
sbb
scas
cdq
and
inc
mov
sub
jae
or
cmp
scas
pop
xor
es
or
jmp
cmp
mov
jg
div
bound
mov
push
cs
ins
pop
mov
mov
pop
lods
xchg
in
adc
in
out
pop
shl
xor
nop
test
mov
mov
lods
adc
pop
sub
inc
cs
mov
sub
mov
xor
pushf
movs
xchg
xchg
fisubr
aad
jp
mov
mov
or
ret
add
in
push
mov
push
adc
aam
mov
pushf
dec
pop
ret
add
mov
jno
fld
lods
or
add
dec
mov
push
xchg
sti
push
test
jmp
aam
sub
lahf
aaa
cmp
cdq
loopne
out
inc
pushf
test
shl
in
inc
es
nop
sbb
fs
or
and
xchg
mov
test
(bad)
jecxz
inc
sub
rcpps
dec
pop
sub
mov
mov
dec
mov
adc
mov
(bad)
xor
mov
mov
cmp
test
xor
int3
fisttp
loopne
sub
shr
hlt
jecxz
sahf
stc
stc
fcomp
add
cmc
rcl
addr16
aam
sti
(bad)
sub
pusha
mov
dec
out
js
test
pop
mov
xchg
sbb
sub
fmul
stos
and
(bad)
cmp
rcl
in
cmps
(bad)
sti
aaa
sbb
cmps
mov
lea
xor
stc
jge
mov
lods
stos
mov
cmc
fild
mov
sub
add
mov
aaa
ret
in
bound
es
stos
and
es
mov
dec
pop
daa
sahf
cmc
push
leave
jle
and
fwait
and
add
add
mov
test
mov
xchg
add
xor
mov
push
inc
inc
add
mov
cdq
add
jl
in
shl
dec
jne
out
add
mov
ret
ins
movs
pop
cmp
cmc
outs
and
dec
arpl
jmp
mov
repz
xlat
out
mov
or
cli
cmc
js
adc
pop
sub
das
cs
nop
cld
mov
mov
mov
mov
pop
iret
adc
in
hlt
jmp
outs
add
loope
movs
movd
ss
xchg
ins
mov
mov
push
push
fchs
fimul
jnp
out
arpl
add
loopne
mov
sub
bound
shr
cmp
jno
cmp
shl
fs
cdq
sub
fwait
xlat
jb
mov
mov
push
add
scas
jb
outs
jo
shl
dec
push
fisttp
inc
jmp
and
scas
mov
in
pusha
js
push
fstp
inc
xor
jecxz
outs
cmp
fcom
cmovle
shl
(bad)
test
daa
test
sub
mov
ins
sub
test
sbb
scas
sub
dec
sub
pop
imul
(bad)
fbld
mov
sbb
mov
loop
iret
sub
pop
adc
xor
in
inc
mov
or
test
das
test
jg
loopne
call
ret
add
fdivr
mov
ds
dec
inc
popa
cmp
(bad)
jns
push
cmp
add
inc
call
ret
add
inc
mov
xchg
popf
cmp
rcl
push
xchg
mov
in
stos
cdq
jmp
aam
stc
jl
jg
gs
rol
fidiv
fninit
cwde
adc
popf
dec
xchg
inc
retw
sti
aam
push
pop
ja
push
cld
in
test
mov
push
stc
pop
and
and
sar
mov
jl
pop
nop
inc
ret
pop
push
mov
push
std
push
cwde
fcomp
dec
leave
inc
inc
and
fstp
int
add
pop
jecxz
inc
lahf
sub
inc
test
push
pop
jmp
mov
adc
cmc
jmp
(bad)
and
pop
ds
or
into
mul
push
sbb
pop
xor
inc
pop
push
std
mov
push
mov
mul
cmp
cmp
not
xchg
sub
jns
lds
sbb
dec
inc
icebp
adc
sub
cmps
mov
dec
ins
icebp
jge
jbe
mov
lods
xchg
mov
cmp
mov
into
lea
or
inc
cmp
cmp
aaa
jae
push
push
out
mov
cmp
in
jl
xor
ficomp
enter
add
fcomp
pop
cmc
movs
inc
mov
or
xchg
ret
sub
push
dec
jnp
ss
aad
adc
pop
icebp
data16
lods
and
add
sti
mov
cwde
test
ds
sub
bnd
sub
mov
jp
data16
mov
aaa
int3
mov
stos
inc
mov
push
test
fcom
jecxz
mov
add
mov
push
push
vmaxsd
gs
and
hlt
sbb
and
adc
pop
fnsave
mov
cmp
icebp
das
(bad)
xor
mov
mov
(bad)
jmp
push
dec
xchg
leave
and
push
test
(bad)
jns
add
ss
call
mov
jmp
inc
clc
cmps
ret
leave
add
div
sbb
push
mov
in
jg
jle
cmp
jb
(bad)
(bad)
(bad)
data16
cld
aam
ror
loope
mov
mov
loopne
sub
xor
inc
nop
div
out
lods
cmp
call
pmaxsw
cs
add
test
lods
lds
mov
dec
(bad)
mov
cmc
(bad)
cmp
sub
das
imul
jp
repnz
xor
addr16
fsubp
jg
cwde
lahf
and
loope
popa
mov
mov
imul
test
and
cmp
and
xchg
xchg
cdq
fsubr
push
mov
mov
int
jae
jns
adc
lds
iret
cli
inc
outs
mov
mov
movs
loop
jnp
xor
cmp
pop
fistp
sbb
leave
cmp
cmp
les
fist
inc
fs
test
adc
icebp
jb
les
mov
jp
cs
pop
cmp
or
mov
or
(bad)
adc
leave
in
fisub
mov
push
(bad)
jge
jge
in
hlt
movs
adc
jno
das
scas
sti
scas
adc
dec
ret
ret
out
stos
sti
cmps
cmp
pop
jbe
rcl
jp
adc
retf
cli
mov
jmp
fadd
xchg
adc
call
jge
sbb
mov
pop
and
test
imul
lods
add
cmp
clc
pop
mov
aaa
adc
sub
jne
mov
xchg
data16
inc
sbb
mov
in
out
fadd
scas
test
push
sub
mov
idiv
mov
shl
xchg
mov
iret
or
enter
ss
out
inc
xor
xchg
inc
xchg
dec
fld
repnz
mov
clc
scas
mov
sbb
imul
xor
cld
or
(bad)
jmp
jge
in
dec
scas
fwait
or
xor
jo
cmps
push
mov
adc
cld
ffreep
add
push
cli
sbb
inc
mov
and
mov
mov
test
sub
pop
sub
xchg
cmp
jns
or
popf
push
stos
mov
adc
repnz
xlat
repz
loope
ror
sbb
sbb
retf
xchg
push
(bad)
call
stos
fdiv
gs
je
cld
mov
out
fcmovu
mov
loope
lds
mov
xor
fisubr
test
jecxz
lock
jmp
add
ss
rcl
aas
adc
dec
imul
out
inc
sbb
mov
pop
mov
mov
pop
popf
jne
pop
scas
mov
ins
ds
out
lods
mov
cmp
xor
and
int3
je
loope
sbb
(bad)
arpl
xchg
retf
aad
add
xchg
adc
and
mov
mov
inc
push
scas
or
ja
pushf
sub
(bad)
rcr
call
cmp
xor
call
or
push
xor
pop
bound
mov
push
and
(bad)
add
std
arpl
outs
mov
xlat
mov
mov
iret
cmp
test
lds
jl
sub
shl
jl
test
ins
or
pop
jmp
cmps
iret
repnz
push
popa
shl
rcr
mov
fnstcw
jno
sub
push
xchg
xchg
sbb
xchg
cmp
mov
movs
xchg
jo
adc
scas
xor
movs
int
or
out
jl
pop
jl
mov
call
pop
xor
pop
sbb
cs
inc
cli
ficom
je
xchg
mov
fwait
mov
dec
je
jg
icebp
gs
mov
fistp
mov
and
pop
frstor
fldz
inc
fstp
imul
jmp
cmp
add
rcr
loope
not
iret
into
xor
int3
dec
repz
xchg
int
jge
push
jge
(bad)
fsub
lahf
leave
stc
lock
dec
pusha
push
(bad)
mov
or
(bad)
in
push
sub
push
push
adc
inc
add
test
out
sbb
in
sbb
xor
jle
sbb
push
or
cli
xor
js
stos
das
and
add
mov
sub
pop
jno
(bad)
loope
dec
stos
fistp
mov
push
xor
dec
and
or
js
and
push
mov
out
stos
js
sub
mov
mov
sbb
cmps
sbb
icebp
dec
out
mov
loop
jmp
inc
repz
push
cmps
jb
jno
fist
push
outs
mov
mov
sub
(bad)
scas
adc
bound
(bad)
mov
sub
push
dec
inc
add
push
sub
sbb
push
ins
(bad)
xor
adc
shr
fdivp
push
mov
cmp
scas
jp
hlt
data16
ds
push
add
mov
push
cmp
out
cwde
mov
fsub
(bad)
mov
jnp
outs
leave
leave
dec
sub
mov
jle
xor
or
mov
call
fisubr
scas
push
mov
push
rcl
sbb
ins
cmp
add
test
imul
mov
pop
pop
je
mov
das
imul
cmp
fdivr
pop
jg
adc
add
fidivr
popa
xor
les
mov
mov
xor
loopne
retf
outs
add
sub
and
sub
jns
neg
xchg
loopne
mov
in
cs
adc
and
lods
jbe
push
jl
push
mov
(bad)
xchg
out
and
adc
jmp
xlat
fst
cmp
sahf
cli
inc
ret
ins
loope
repz
sub
xor
movs
aas
mov
call
ret
mov
push
add
stos
mov
(bad)
xor
sbb
test
xchg
pop
scas
aam
sahf
mov
int
dec
rol
sub
into
hlt
pop
xchg
jl
adc
cmp
adc
ins
adc
xchg
jge
xchg
jmp
jl
loope
cmp
sub
sbb
mov
ret
sbb
xchg
ja
dec
push
mov
popa
jge
test
lods
adc
adc
jno
stos
fadd
mov
and
lds
xor
jbe
frstor
push
mov
or
push
jmp
shr
dec
mov
outs
xchg
test
std
xor
sbb
mov
pop
cmp
cmp
inc
pop
cmp
xchg
mov
add
popa
int3
push
clc
adc
ret
aam
cmp
inc
pop
mov
rcr
arpl
mov
sbb
jb
ins
jbe
int
out
cmp
iret
scas
mov
mov
xchg
add
jecxz
mov
dec
stc
outs
inc
mov
fld
sub
pop
jno
pop
jbe
ret
adc
mov
mov
(bad)
sbb
loope
out
in
push
pop
pop
in
loopne
push
int3
mov
sub
pop
xor
popf
jns
outs
mov
push
inc
lods
out
jae
hlt
in
(bad)
cmp
fdivr
or
mov
push
xor
lock
add
ret
in
fsubr
shl
neg
stos
mov
mov
fild
and
sub
mov
mov
or
mov
mov
ror
in
xchg
inc
dec
mov
aad
mov
popa
mov
imul
hlt
scas
cmp
sbb
sub
dec
or
add
call
adc
repz
pop
mov
fcom
aad
movs
(bad)
stc
dec
ins
scas
jnp
loop
neg
cmps
pop
mov
in
inc
(bad)
xchg
js
in
imul
test
test
(bad)
mul
xor
imul
rcl
out
sar
push
int3
push
pushf
jmp
push
dec
dec
xor
push
push
test
lods
sahf
in
data16
push
or
push
sbb
mov
push
out
mov
xchg
(bad)
and
cmps
std
outs
out
icebp
movs
add
shr
das
imul
fwait
in
shr
push
jnp
or
fst
inc
pop
adc
adc
addr16
sbb
retf
xchg
sub
aas
shl
leave
jecxz
loope
ds
mov
cld
xor
dec
repz
test
scas
or
xor
ror
cmps
imul
mov
popa
mov
xlat
jge
jmp
mov
(bad)
jmp
xchg
cli
mov
mov
ret
inc
rcr
push
fwait
jecxz
(bad)
pop
add
adc
sahf
mov
jle
in
cmp
enter
mov
adc
div
jle
loope
in
sub
sbb
or
call
jmp
hlt
mov
mov
jle
cmp
jmp
repz
fidivr
popa
jo
mov
xor
xchg
shl
outs
js
add
jno
fisub
ins
push
adc
xchg
call
shr
sbb
(bad)
jmp
adc
add
and
lock
mov
sub
imul
push
and
(bad)
and
rol
cmp
retf
xchg
mov
xchg
push
xchg
rcr
pop
pushf
in
cmc
fnstcw
scas
ins
movs
pop
pop
dec
sar
xor
push
je
pop
pusha
das
or
lds
call
into
(bad)
sub
push
xlat
or
jne
idiv
scas
call
ret
sbb
jmp
mov
add
inc
into
std
xchg
push
leave
jge
dec
call
scas
in
fs
and
daa
call
stc
aaa
ins
aaa
push
adc
(bad)
jbe
push
adc
jl
sbb
dec
enter
int3
scas
cmp
ja
inc
stos
jp
cmp
lock
paddd
fadd
sbb
mov
and
outs
pop
(bad)
push
mov
xchg
loopne
out
sub
pop
mov
ins
jae
sbb
(bad)
push
aad
mov
(bad)
enter
sbb
mov
leave
int
jb
sbb
cmps
imul
scas
dec
ja
sub
dec
mov
mov
mov
or
sbb
fwait
inc
call
jb
inc
fs
push
enter
mov
xor
in
loopne
jae
ret
popa
call
mov
pop
cmp
xor
pop
pmaxsw
inc
enter
leave
mov
pop
push
sbb
rcr
jnp
xlat
adc
fs
jnp
push
scas
mov
xchg
mov
popf
lea
fld
pop
cli
ja
ins
lock
jp
xchg
shl
cmp
das
pushf
inc
and
and
call
popf
push
cdq
mov
shr
popf
push
inc
xchg
push
cmp
aaa
int3
inc
cmps
(bad)
and
lods
repnz
lods
and
pop
push
icebp
nop
mov
retf
push
fcom
jmp
scas
fisubr
in
mov
arpl
leave
aaa
aas
movs
inc
push
retf
popf
int3
push
adc
push
shl
add
ds
dec
jl
fsub
jl
sub
mov
xchg
fistp
pop
pop
add
mov
movs
shl
fxch
mov
sbb
ins
mov
jmp
dec
popf
jp
adc
sahf
cmp
retf
add
cmp
jmp
adc
pop
fbld
push
pushf
fiadd
xor
(bad)
sub
cs
retf
mov
mov
test
sbb
lods
mov
lahf
and
jl
test
add
add
mov
enter
jnp
scas
out
add
in
mov
stos
inc
jl
sbb
or
out
loop
jbe
mov
test
dec
xor
push
xor
jmp
mov
movs
cmp
sub
(bad)
add
jo
mov
jae
xchg
ins
inc
push
ins
dec
xchg
cwde
loop
pop
mov
loopne
retf
mov
rol
xchg
mov
inc
and
icebp
pop
lahf
ds
xor
pop
push
xor
aam
xchg
mov
sbb
outs
shl
xchg
sub
jb
rcr
mov
es
add
out
lock
lods
mov
jl
fcom
aad
jno
lahf
inc
dec
inc
ror
or
pop
sti
or
cmp
enter
das
inc
fiadd
mov
fs
loope
clc
inc
sub
xchg
cmps
lods
cwde
int3
pop
inc
adc
not
sub
mov
add
cmp
(bad)
cdq
cmc
enter
mov
shr
mov
mov
adc
in
in
lea
loop
pop
ror
push
jecxz
js
nop
and
imul
adc
imul
rol
aas
in
outs
std
repz
add
cdq
or
scas
xor
inc
pop
push
std
pushf
sbb
mov
jns
pusha
and
mov
jne
xor
jmp
xchg
das
cmp
mov
sub
jnp
sbb
inc
cmc
lahf
sti
cmp
repz
stc
clc
mov
inc
adc
call
inc
xor
lds
mov
dec
cmps
dec
inc
xor
jl
push
cdq
adc
push
and
xor
mov
inc
mov
xchg
cmp
mov
pop
and
push
imul
cdq
xlat
xor
mov
xor
or
or
cdq
js
or
daa
mov
mov
sub
mov
shr
into
jmp
cmp
and
out
push
mov
int3
or
add
xchg
push
pop
fstp
jnp
jns
cmps
mov
stos
lea
add
pop
mov
jl
pop
in
xor
jnp
push
sahf
jbe
fld
loop
push
int
inc
dec
scas
mov
mov
adc
jbe
mov
dec
jne
scas
or
xor
fwait
inc
adc
or
xor
fild
sbb
movs
jb
pop
lods
cmc
mov
retf
in
add
lahf
cmp
or
mov
test
outs
cmc
dec
add
xchg
pop
xchg
out
pop
sbb
je
xchg
push
imul
(bad)
aam
cmps
inc
sub
in
or
(bad)
arpl
or
outs
in
dec
ret
mov
outs
cwde
clc
sahf
push
popf
cmp
bound
push
lods
inc
stos
mov
sub
push
fbld
push
adc
sub
jg
ficomp
jmp
sbb
push
js
adc
adc
pop
pusha
ins
push
retf
icebp
inc
clc
mov
jecxz
in
ret
retf
movs
ja
sar
jne
les
cmps
jmp
cmp
movs
and
jne
leave
jns
cmp
mov
in
fs
mov
lea
adc
movs
push
and
sbb
pop
call
mov
outs
cmc
sbb
xor
popa
scas
fnsave
dec
pop
js
mov
call
sbb
test
pop
daa
lahf
cmp
jo
xor
pop
jmp
mov
outs
add
cmps
(bad)
fcom
ins
sub
aas
and
add
push
daa
aaa
inc
outs
adc
sub
pop
jno
popa
mov
sub
fild
push
push
or
fdivr
mov
fadd
mul
jbe
xchg
fimul
(bad)
or
mov
fnsetpm(287
or
clc
leave
pop
popa
jbe
sub
mov
(bad)
int3
sar
lock
xor
push
jge
or
leave
pop
pop
mov
pushf
call
fdiv
pop
lds
pop
mov
and
sub
xor
push
test
dec
lea
mov
lock
ror
pop
dec
jne
pop
cld
push
pusha
fnsave
rcl
fld
repnz
mov
lea
call
add
push
aad
pop
iret
loopne
(bad)
sbb
add
lods
sahf
pop
push
mov
cmp
mov
push
ret
sub
mul
jbe
js
push
push
jge
xor
mov
inc
(bad)
xlat
jmp
aas
mov
cld
addr16
test
mov
add
adc
pop
lock
mov
xchg
fld
jmp
xchg
xchg
lock
pop
push
mov
pushf
adc
in
fcmovnbe
je
test
add
xor
aaa
sahf
xchg
add
loop
cmp
xor
adc
xor
push
push
mov
xchg
push
add
jo
pusha
call
sbb
inc
jo
lds
aas
sbb
stos
call
mov
adc
cmp
jb
and
jmp
xchg
sub
sbb
pushf
jmp
cmp
sub
jle
int
idiv
int3
jbe
pop
adc
mov
in
mov
sub
addr16
sub
jo
loope
arpl
xchg
(bad)
xor
rcl
mov
dec
push
stos
stos
cdq
inc
mov
push
repz
dec
or
fnstenv
mov
out
jmp
nop
jnp
retf
out
dec
loope
jg
sahf
push
repz
adc
mov
idiv
pop
xor
call
dec
pop
pop
or
push
test
xchg
xchg
push
das
or
jmp
mov
jae
dec
sub
add
loopne
cmp
jecxz
push
add
and
sbb
or
add
xor
fsub
xchg
into
add
fwait
lods
shr
loopne
test
idiv
loopne
sbb
xchg
(bad)
std
inc
adc
inc
mov
pop
daa
add
push
sbb
jmp
clc
sar
fsub
add
pop
arpl
add
fmul
inc
jae
xchg
pop
dec
xor
test
imul
pop
jg
lods
pusha
dec
jns
and
sub
call
icebp
xor
imul
push
sbb
test
test
cmp
cmp
push
(bad)
pop
call
or
adc
mov
nop
sub
adc
jnp
sbb
(bad)
dec
aad
mov
add
fsubp
push
xchg
jb
ins
jp
sub
std
das
gs
mov
out
outs
and
push
push
test
cli
(bad)
fmul
nop
mov
add
clc
sub
pop
shr
pop
inc
mov
jl
arpl
std
jp
mov
sbb
mov
jmp
dec
(bad)
pop
int3
inc
push
es
scas
mov
out
sbb
mov
lods
or
jb
neg
push
dec
into
sahf
mov
sub
xor
(bad)
sbb
pop
ins
pop
adc
sbb
(bad)
std
dec
push
jno
mov
hlt
xor
in
push
das
and
cs
sahf
and
or
dec
mov
adc
adc
inc
int
cmc
call
fwait
jae
add
pop
lock
pop
clc
jnp
arpl
int3
(bad)
aad
stos
sbb
dec
(bad)
inc
or
dec
jmp
adc
enter
xor
cmps
and
push
push
or
mov
ds
add
call
and
pop
xor
test
shr
iret
lea
int3
mov
js
aam
iret
xor
dec
add
push
mov
xchg
dec
sbb
and
stos
cmps
in
xor
mov
xchg
hlt
cwde
pop
pop
cmp
popa
loop
test
jl
jmp
and
popa
sbb
stos
fcmovnb
mov
jl
cmp
ss
in
pop
into
loop
dec
imul
pop
and
xchg
bound
bound
lods
or
sub
cmps
or
mov
test
scas
daa
repz
and
mov
shl
jae
into
stos
pop
mov
jmp
adc
sub
push
sbb
test
sub
imul
gs
push
retf
cmps
mov
out
stos
cmp
pop
lods
sub
sbb
movs
(bad)
jg
mov
ins
ja
mov
icebp
jb
fcmovne
cmps
or
int3
dec
add
push
push
popa
push
stos
dec
cmps
imul
lds
xlat
push
clc
inc
push
jle
xlat
push
xlat
stos
test
rol
arpl
sti
rol
add
and
mov
dec
(bad)
fimul
sbb
gs
bound
and
cmp
lahf
mov
sbb
push
cmp
xchg
cmp
or
popf
cmp
pop
mov
mov
repz
inc
loope
mov
inc
ins
add
jp
pop
js
outs
pop
enter
jnp
xchg
add
cld
jno
push
rcl
push
adc
sub
adc
sbb
adc
sub
mov
jecxz
fwait
hlt
les
push
cmps
jno
repnz
fdivrp
pop
add
sub
lods
icebp
adc
sbb
xchg
mov
cwde
sbb
rcr
inc
daa
add
call
jo
adc
and
(bad)
cli
sbb
jp
push
xor
dec
aas
sar
aam
push
(bad)
mov
out
adc
jmp
push
rcr
sbb
stos
adc
xchg
movs
sbb
aad
ins
test
xor
cmp
mov
or
dec
sub
fdivr
scas
cdq
iret
clc
jle
mov
dec
pop
mov
out
cmp
sar
push
sub
retf
loop
add
imul
mov
sbb
pop
ins
pushf
mov
movs
mov
jne
mov
sub
aaa
dec
fs
pop
int3
(bad)
je
or
xlat
xor
jbe
dec
pop
imul
call
xor
mov
dec
(bad)
(bad)
shl
retf
js
push
mov
movs
lods
movs
xchg
or
(bad)
test
inc
popf
lds
pop
adc
cs
mov
in
jecxz
shr
mov
or
fst
stc
pop
cld
mov
and
add
dec
push
cli
push
lea
push
loop
fistp
movs
ss
pop
(bad)
adc
sub
mov
std
(bad)
push
jbe
out
movs
(bad)
pop
rol
xchg
inc
jmp
jae
sub
xchg
pop
ret
shl
mov
xchg
jno
adc
(bad)
jne
mov
jno
call
adc
pop
int
lahf
and
into
pop
loopne
xchg
test
in
mov
sbb
fild
push
xor
aaa
xor
scas
scas
adc
jno
jb
push
push
mov
out
movs
aas
sbb
clc
fnop
imul
arpl
jne
xor
(bad)
cmps
mov
sahf
ss
in
jae
lds
ins
pop
dec
sbb
cmp
push
mov
mov
xor
rcl
cs
aad
sub
jb
jmp
aaa
add
xchg
mov
rcr
mov
fwait
or
aaa
loop
mov
pop
or
inc
repz
test
sahf
or
outs
icebp
mov
pusha
mov
scas
outs
add
xchg
neg
call
add
dec
int
cmp
push
ret
mov
pusha
aam
jnp
mov
xchg
(bad)
mov
push
clc
cs
repnz
pop
inc
mov
aaa
push
cmp
adc
ds
sbb
push
int3
cs
cld
and
jnp
xchg
and
push
and
pop
xchg
xchg
mov
xor
test
inc
mov
mov
or
sbb
cli
imul
mov
pop
mov
jmp
(bad)
xchg
cmp
sub
xor
xor
sub
ins
mov
(bad)
dec
stc
lods
jg
pop
sub
xchg
lock
add
iret
loopne
hlt
ja
inc
jmp
in
ds
adc
pop
or
out
cmp
or
out
cld
fdiv
mov
lods
dec
and
aad
pushf
push
add
and
mov
loop
push
out
or
fcom
je
stos
xor
push
adc
pop
cmps
cmp
sub
inc
cmps
mov
push
push
inc
jae
(bad)
mov
pop
sbb
rcr
and
pop
outs
adc
cmp
les
retf
mov
jmp
and
mov
jmp
es
jmp
inc
rcr
lds
sti
xor
stc
sbb
retf
imul
dec
idiv
push
fiadd
lods
sbb
xchg
push
mov
mov
pushf
xlat
adc
ret
leave
mov
out
mov
icebp
ret
cwde
not
mov
or
call
(bad)
ror
push
add
retf
jg
aam
push
cs
mov
cmp
loopne
aam
push
js
retf
dec
leave
imul
sti
adc
sub
xchg
or
dec
mov
jg
mov
pop
arpl
inc
jmp
loop
or
jbe
mov
inc
dec
loop
push
arpl
ins
ret
jns
rol
das
cmp
add
sbb
lds
mov
mov
pop
jb
mov
inc
push
retf
and
or
mov
sub
jae
pop
mov
hlt
data16
jmp
lods
jo
outs
call
xor
imul
dec
cmc
mov
sub
jbe
std
cwde
dec
inc
movs
sbb
inc
xor
sub
cmp
sti
or
mov
pushf
dec
retf
fs
push
clc
outs
sbb
sub
push
mov
vrsqrtps
xchg
adc
in
cld
sbb
ins
sbb
xchg
fdiv
xor
pop
sub
mov
xlat
xchg
aaa
pop
cmp
call
rcl
push
addr16
mov
sbb
cmp
xchg
leave
push
and
or
sbb
adc
adc
inc
imul
xchg
iret
xor
jbe
call
pop
sar
xor
int
push
jae
ret
cmc
cmps
mov
fidiv
dec
cs
mov
jp
push
test
(bad)
(bad)
imul
test
ja
xchg
mov
ror
xlat
jmp
pop
iret
lea
xchg
mov
(bad)
xchg
out
and
sub
outs
fsub
xchg
push
xchg
jp
sub
push
es
hlt
iret
mov
addr16
inc
xchg
jmp
(bad)
stos
stos
push
xor
mov
addr16
mov
enter
mov
call
(bad)
xor
mov
inc
push
push
(bad)
enter
lods
xchg
cmps
cwde
or
xchg
repnz
and
cld
loopne
mov
mov
call
xchg
and
(bad)
mov
pop
scas
sbb
sbb
in
in
jbe
lock
push
adc
hlt
out
pop
pop
js
out
or
xor
out
mov
mov
sub
push
xor
add
mov
push
lods
jbe
xchg
fmul
or
(bad)
je
pop
add
inc
cmp
shr
jne
out
cmp
adc
les
push
lea
cmp
mov
xchg
das
leave
or
adc
mov
fmul
xor
ret
jg
lock
test
ds
mov
ret
fadd
popf
xchg
add
mov
xchg
inc
or
shr
or
mov
fbld
js
daa
out
mov
imul
inc
lods
leave
xchg
mov
jns
pop
or
mov
imul
jp
movs
push
mov
loop
loope
fnstcw
push
cmps
lods
imul
mov
push
push
sub
ds
sub
cmc
adc
xor
std
adc
xchg
imul
pop
aad
adc
jo
ss
je
into
sbb
xchg
sbb
inc
cld
ins
popf
inc
int
mov
jmp
(bad)
and
inc
mov
ficomp
pop
shr
fstp
mov
cs
fisub
pop
push
psubsb
dec
pop
in
and
sub
sahf
jno
cmp
pop
mov
pop
mov
inc
arpl
fcomp
jbe
xchg
adc
add
xchg
icebp
sub
sbb
lds
dec
inc
mov
inc
lea
hlt
inc
movs
js
pop
(bad)
sub
pop
dec
dec
mov
mov
mov
loopne
bound
or
stc
jge
imul
shl
cs
xor
outs
cwde
daa
inc
(bad)
jecxz
push
jae
sahf
test
fbstp
push
jmp
mov
or
ret
mov
xor
call
ficomp
xchg
push
jl
jecxz
outs
test
adc
or
mov
hlt
sub
push
dec
(bad)
loopne
pop
xchg
stos
ss
(bad)
iret
rol
into
xor
mov
mov
and
add
ja
and
or
pop
clc
cwde
and
xchg
mov
jo
rcl
add
lahf
bound
inc
push
add
and
aas
rol
pop
gs
mov
mov
(bad)
fistp
in
jo
fwait
cmp
pop
xchg
or
or
data16
ds
lds
sbb
(bad)
ror
and
cmps
out
jo
lahf
pusha
out
mov
arpl
push
cmps
call
add
enter
xchg
fwait
mov
in
sub
ins
imul
in
cwde
sbb
pop
mov
(bad)
jb
shl
pushf
ja
test
mov
shr
add
repz
pushf
push
or
or
add
retf
lds
push
jl
mov
and
fst
ss
mov
add
scas
pop
adc
pop
jecxz
js
(bad)
mov
adc
out
and
rcr
repnz
pushf
mov
ret
(bad)
mov
ss
dec
mov
fistp
fnstcw
xchg
sub
or
pop
adc
sbb
dec
lock
sub
dec
icebp
data16
jmp
sub
adc
retf
lock
loop
lahf
jp
adc
mov
test
test
cli
aaa
pop
arpl
sub
pop
lods
aas
(bad)
mov
mov
aas
jnp
cld
outs
xchg
dec
lds
out
dec
lods
mov
pop
icebp
push
mov
adc
dec
scas
sar
retf
(bad)
cdq
bound
ret
add
fs
mov
mov
add
and
dec
inc
push
pop
js
scas
cmp
or
mov
sub
aas
lea
aad
or
ss
out
int
mov
or
push
mov
mov
jecxz
leave
cs
push
jmp
xor
push
xchg
test
call
outs
mov
pop
push
mov
and
push
mov
movs
rcr
cs
mov
inc
mov
test
cmp
mov
aaa
xchg
out
cmc
jecxz
jns
or
push
mov
dec
or
or
push
adc
retf
(bad)
clc
and
out
mov
clc
mov
repnz
lock
mov
stos
fmul
jecxz
es
and
push
push
pop
cwde
stos
pushf
movs
or
(bad)
and
fbstp
xor
dec
adc
inc
add
ret
lahf
call
sub
fwait
pop
xor
cmps
(bad)
(bad)
cmp
data16
dec
loop
push
pop
cmp
adc
test
mov
cli
fadd
inc
addr16
xchg
adc
lahf
cmc
imul
cmp
or
dec
add
mov
jecxz
sbb
xchg
movs
xor
fst
cmc
sub
cli
pusha
(bad)
in
fdivr
mov
test
adc
add
lahf
pop
iret
je
xor
aad
ins
scas
arpl
sbb
inc
aam
(bad)
fisttp
xchg
mov
enter
xor
inc
sbb
popf
mov
mov
scas
or
xacquire
into
outs
(bad)
jne
jmp
add
mov
enter
(bad)
sub
test
mov
mov
sub
in
(bad)
imul
mov
jmp
sub
std
call
daa
scas
sbb
adc
das
sub
jnp
in
and
cmp
out
test
jo
push
fild
lods
or
int3
jb
xchg
idiv
cmp
mov
dec
repz
push
dec
movs
or
das
and
xor
push
xchg
mov
jmp
xchg
xchg
retf
mov
or
fmul
pop
je
xor
ins
xor
(bad)
out
push
pop
lods
push
push
nop
adc
pop
dec
xchg
adc
push
pop
hlt
inc
mov
dec
cmc
ret
or
dec
dec
popa
add
mov
repnz
mov
add
inc
mov
push
aad
or
pop
fwait
add
cmp
sub
int
cmps
xor
sar
push
je
imul
scas
das
daa
dec
ins
mov
std
jl
jge
ficomp
(bad)
mov
jge
or
push
rcl
mov
(bad)
scas
sbb
jns
pop
inc
dec
in
in
jp
add
stc
repnz
mov
push
inc
xchg
lods
sbb
mov
xor
xor
or
xchg
fistp
push
out
add
and
sahf
ficom
pop
cmps
mov
pop
pop
cmps
jmp
jmp
cmp
out
cmps
fsubp
xlat
pcmpeqw
fadd
mov
cld
xchg
sub
jo
je
adc
mov
sbb
xchg
or
dec
sbb
cmp
xor
add
test
mov
cmp
int
mov
xor
es
or
enter
inc
sub
push
mov
fwait
xchg
popf
loop
mov
out
mov
sub
adc
stos
rcl
jmp
pop
inc
mov
fwait
std
ins
(bad)
lods
ja
jns
rol
ror
int
inc
xchg
xor
jmp
popa
cdq
jmp
test
xor
jmp
dec
call
cli
call
loop
push
lahf
outs
and
sbb
sti
cmps
dec
mov
data16
push
lds
xchg
jge
sbb
push
and
mov
adc
test
cmps
cs
add
jbe
mov
ss
jno
push
mov
mov
ins
dec
aaa
sti
lods
inc
sahf
fwait
mov
imul
adc
and
and
outs
std
mov
daa
pop
icebp
hlt
add
pop
daa
mov
dec
les
fistp
inc
sar
dec
inc
or
mov
scas
rol
es
push
jo
loopne
mov
push
scas
loopne
dec
pop
sbb
icebp
or
out
inc
repnz
neg
sub
add
mov
scas
dec
or
neg
loop
add
fs
mov
mov
repz
sti
fld
mov
dec
(bad)
push
lahf
cdq
call
pop
loope
or
or
jp
clc
jnp
sti
aaa
loope
jle
rol
ficom
cmp
(bad)
out
push
mov
cdq
mov
mov
sub
xchg
push
jmp
sub
mov
jo
std
sbb
push
xor
and
pop
sbb
cmp
mov
in
jle
lods
ds
jecxz
cmp
lahf
or
fisttp
pop
jle
adc
push
mov
loope
inc
mov
sub
call
pop
and
inc
int
mov
dec
mov
repnz
xlat
stos
dec
outs
mov
jno
fild
sub
fwait
jle
dec
push
out
aad
xchg
mov
add
ins
xchg
adc
jp
xchg
cs
inc
(bad)
cmp
sbb
sub
ss
pop
rcr
ret
push
mov
pop
push
lahf
dec
inc
push
mov
mov
adc
(bad)
retf
xchg
int
mov
lods
inc
fcom
aas
or
inc
mov
in
rcr
loope
inc
mov
test
sub
xor
xchg
lods
(bad)
stos
inc
dec
adc
ins
pop
sbb
sbb
(bad)
lods
mov
loope
inc
pop
cmps
cmc
rcl
icebp
mov
sub
repz
dec
rcl
push
cwde
(bad)
cwde
dec
mov
push
fisttp
sbb
pop
aas
inc
sbb
test
in
aad
gs
das
std
sub
shl
inc
dec
add
jge
enter
test
and
jns
inc
pop
push
or
shl
mov
adc
jae
ss
cmp
js
jb
sbb
movs
push
bound
add
lods
push
inc
mov
sti
mov
sbb
inc
ins
push
adc
adc
cmp
mov
inc
jns
enter
dec
dec
stc
dec
nop
movs
stos
cmp
mov
mov
push
outs
mov
popa
push
test
mov
dec
and
rcl
fistp
xor
lahf
fstp
int3
adc
sbb
xchg
rcr
icebp
clc
sti
xchg
in
hlt
cwde
sar
cmp
dec
adc
nop
ds
fmul
call
xchg
dec
mov
push
jbe
jo
shl
push
mov
je
(bad)
fmul
or
ret
shr
mov
cld
mov
das
pop
adc
dec
adc
cmp
daa
jecxz
jp
mov
(bad)
(bad)
popf
adc
call
jge
xchg
popa
ror
cmp
rcl
mov
popa
xchg
call
outs
add
mov
out
cli
xchg
stc
fcomp
imul
push
cmp
push
lods
lods
push
xor
jle
pop
ret
out
(bad)
sbb
test
pop
bound
ret
cmp
test
nop
xor
gs
fwait
xchg
xchg
sahf
test
out
jae
push
in
adc
mov
sbb
sbb
movd
lods
outs
shl
jns
or
cmp
xchg
fcmovnb
sbb
fdivr
pop
mov
das
loop
inc
dec
mov
or
clc
stc
and
inc
enter
sbb
test
sbb
and
aas
pop
and
jmp
in
xor
fnsave
and
call
daa
add
clc
aas
mov
jnp
sub
call
repz
popf
push
adc
mov
bnd
mov
push
shr
fsubp
dec
into
inc
add
mov
outs
inc
loope
sti
dec
lds
mov
xor
movs
jp
rcl
cmp
xor
mov
xchg
rcl
sub
cmp
rol
adc
pop
mov
jnp
mov
mov
data16
ja
pusha
fstp
ror
xor
xor
outs
add
repnz
retf
movs
fwait
inc
and
ror
jmp
jno
mov
cli
pop
out
test
shr
jmp
and
test
in
mov
lahf
pop
sub
sti
rcr
jle
ret
mov
lods
iret
xor
xor
mov
push
test
sbb
adc
cmps
xchg
idiv
jne
jle
pop
scas
and
fucom
dec
jnp
inc
je
jae
inc
pop
mov
sar
mov
add
cli
lock
sub
stos
adc
push
xchg
les
imul
scas
xchg
inc
sbb
pop
ret
mov
iret
test
mov
loope
(bad)
jae
cmps
stos
dec
push
mov
cmc
sbb
sbb
jmp
repz
dec
xchg
inc
js
adc
fcomi
jne
out
mov
gs
(bad)
xor
push
mov
push
mov
cmp
mov
jle
ret
clc
(bad)
jecxz
cmp
imul
stos
jbe
not
xchg
popa
bound
lods
dec
es
sub
mov
fistp
les
jmp
shl
enter
mov
mov
push
std
hlt
pop
sub
(bad)
call
cli
and
inc
fnstenv
xlat
js
cwde
sbb
dec
jne
out
arpl
pop
cld
pop
cmp
sbb
xchg
xchg
cli
hlt
dec
xor
mov
sahf
fidivr
inc
pop
pop
sti
dec
(bad)
mov
sbb
int
mov
push
fimul
pop
retf
push
mul
mov
mov
scas
mov
mul
add
pusha
div
mov
mov
mov
leave
test
xchg
clc
lock
aam
or
mov
adc
mov
ins
aad
js
pop
cmps
push
mov
cmp
push
fs
mov
fnstsw
aaa
cmp
jno
push
xrelease
mov
retf
sti
ret
leave
mov
arpl
in
pop
call
sub
mov
push
jg
daa
ins
scas
and
and
retf
cmp
stc
repnz
jae
jmp
jge
jo
jnp
sub
cmp
sbb
mov
or
mov
and
ins
aad
fcomp
je
in
sbb
xor
inc
or
mov
and
icebp
mov
cmps
not
jae
cmp
mov
(bad)
not
daa
sub
inc
in
test
mov
fidiv
sahf
cmp
or
jp
mov
aas
lods
dec
scas
addr16
push
add
sar
daa
pushf
nop
mov
arpl
mov
mov
fmulp
ds
mov
je
loop
and
inc
xor
add
mov
xlat
sbb
xor
jl
scas
fist
mov
adc
sbb
(bad)
cmps
in
mov
std
push
mov
mov
lahf
and
or
lds
add
mov
mov
stos
cmp
ins
push
adc
cmp
(bad)
push
lock
push
popf
(bad)
pop
ins
fcomi
fld
mul
and
pop
ror
out
xchg
ret
aam
pop
loopne
jl
mov
sahf
ficom
push
xchg
mov
jae
cs
add
repz
cmp
retf
test
mov
in
fcomp
repz
sub
sahf
mov
cld
ret
xlat
cli
push
dec
repz
cmp
in
imul
cmps
add
fdiv
mov
jmp
shr
iret
data16
add
jge
sar
fidiv
ds
pop
lods
mov
(bad)
fst
mov
imul
inc
jo
xor
cdq
clc
xchg
or
mov
ins
inc
ss
lea
icebp
call
ds
mov
or
push
jg
lods
xchg
push
jl
dec
repz
repz
imul
mov
pop
cdq
stc
addr16
xor
pusha
xchg
push
fs
mov
dec
cdq
ss
pop
mov
pop
call
loop
test
or
inc
xchg
dec
xchg
or
lock
popf
push
clc
xchg
mov
pop
fyl2x
pop
mov
xor
push
stc
mov
pusha
mov
sub
mov
and
das
xor
(bad)
out
pop
mov
stos
fiadd
cdq
xchg
nop
cmps
(bad)
sbb
lock
add
push
xchg
cmp
fcmovnbe
jnp
mov
in
aam
gs
(bad)
xlat
mov
shl
mov
inc
sub
cdq
aaa
push
call
ret
fstp
aam
adc
mov
pop
(bad)
sbb
sub
loop
xchg
stos
loopne
xchg
lods
sbb
imul
and
mov
ds
ja
data16
stc
fyl2xp1
ss
(bad)
add
xlat
addr16
xchg
xor
sbb
jp
mov
sub
loopne
and
mov
sbb
fst
pop
scas
imul
ret
inc
std
mov
mov
ds
xchg
in
shl
push
shl
and
std
int3
aad
aam
pop
adc
or
inc
iret
fsubr
add
ins
bound
push
mov
data16
hlt
outs
pop
aaa
jnp
mov
in
jl
xor
lods
int3
mov
inc
sahf
pop
sub
xor
ret
jmp
mov
pop
push
repz
(bad)
sbb
nop
arpl
and
pop
mov
outs
mov
push
sub
mov
cs
clc
es
sub
pushf
mov
push
add
sub
push
dec
shl
add
loope
test
mov
sbb
sahf
push
push
(bad)
(bad)
xchg
in
push
into
add
popa
aaa
mov
jp
cmp
sub
inc
out
rcr
adc
call
sub
jle
fld
xchg
ss
jo
std
inc
mov
repnz
mov
inc
(bad)
cdq
aad
jno
mov
outs
aas
out
out
mov
retf
cwde
(bad)
xchg
aam
ja
mov
jno
imul
in
mov
mov
arpl
in
xchg
ins
test
jle
das
loope
jmp
jbe
jecxz
retf
add
or
scas
push
adc
mov
cmp
inc
jno
fs
adc
scas
jae
jno
sub
nop
out
jb
adc
mov
mov
loope
iret
or
mov
mov
or
lock
adc
push
ss
in
jl
push
sub
scas
stos
mov
push
inc
push
jae
pushf
movs
mov
jo
sub
data16
push
mov
jmp
xchg
jmp
jns
aas
adc
ss
cli
fcmovne
mov
xor
out
adc
push
push
idiv
and
push
scas
push
push
mov
stc
nop
xlat
std
sub
mov
dec
push
in
mov
adc
mov
push
mov
dec
ret
xchg
stc
xchg
mov
xor
call
out
mov
inc
rcr
call
mov
pushf
lods
repnz
int3
dec
not
pop
xor
outs
movs
mov
mov
sar
and
fmul
inc
fs
lds
call
push
jbe
jb
push
xor
or
outs
push
in
retf
(bad)
scas
mov
movs
or
out
lods
xchg
nop
cmp
jne
dec
mov
retf
addr16
arpl
xchg
jns
mov
mov
sbb
sub
sub
in
add
daa
not
lock
mov
les
cld
retf
scas
test
fld
push
dec
sbb
call
jmp
or
fst
fs
jmp
xchg
inc
addr16
xlat
dec
jb
jb
js
xor
or
cwde
jnp
or
mov
pop
or
icebp
xchg
push
inc
fnsave
inc
lock
mov
sub
mov
les
or
pop
loope
sub
ja
stos
das
cwde
int
ss
in
or
fld
in
test
data16
mov
adc
or
call
adc
sub
xor
mov
(bad)
mov
and
stos
ret
jecxz
cwde
(bad)
mov
xchg
mov
aaa
je
jmp
rcr
test
or
test
push
rol
out
jne
xor
inc
mov
fdiv
(bad)
mov
aam
fsubr
repnz
ror
inc
mov
add
mov
(bad)
test
push
xchg
adc
inc
mov
sti
data16
and
out
pop
js
movs
stos
mov
jp
mov
mov
sub
mov
clc
dec
jmp
addr16
xlat
adc
dec
jne
push
sti
mov
pop
dec
dec
cmc
movs
seta
adc
wrmsr
out
cwde
mov
sub
and
jne
jecxz
not
call
add
(bad)
cmps
inc
out
lds
sbb
sub
fld
and
dec
jo
mul
xor
rcl
stos
and
jg
aas
jecxz
xor
xchg
pop
(bad)
idiv
sub
jmp
rol
leave
inc
imul
cwde
xor
cmp
adc
test
mov
das
sbb
push
dec
lock
mov
add
test
xchg
mov
mov
mov
fnsave
push
dec
pushf
das
pop
mov
repz
push
cmp
cmp
fwait
das
xchg
push
adc
das
popa
push
daa
movs
pop
ret
cdq
or
or
push
push
sbb
inc
cmps
ficomp
mov
or
fnstenv
cmp
js
cmc
std
pushf
sbb
xchg
leave
pop
or
or
pop
add
or
in
imul
out
mov
push
mov
jne
adc
in
adc
sub
sub
xor
loope
jmp
icebp
adc
push
iret
mov
(bad)
push
addr16
out
cld
jecxz
gs
iret
shr
jbe
or
pop
sub
retf
adc
test
not
movs
scas
and
fiadd
pop
fnstcw
cmps
lahf
inc
rcr
inc
mov
xchg
retf
ja
(bad)
or
mov
test
stos
ret
push
xor
ins
or
jmp
les
fsub
sub
jb
adc
int
popf
push
ds
or
mov
test
inc
cmp
shl
stc
mov
sub
xchg
xchg
in
jmp
cmps
sub
mov
(bad)
outs
or
xchg
jno
retf
ins
add
jle
or
aaa
stos
and
mov
inc
mov
inc
inc
imul
ja
mov
cdq
inc
sub
and
outs
xchg
sbb
pop
out
jg
cld
mov
test
sbb
fstp
cmp
add
push
imul
clc
lods
and
mov
rcl
adc
je
mov
out
lea
retf
or
outs
sub
outs
test
or
xchg
pop
movs
clc
add
mov
gs
fbld
inc
or
sub
ins
retf
aaa
lock
and
mov
mov
sar
cmp
in
(bad)
or
dec
scas
outs
jno
jg
cmps
test
and
xchg
sub
dec
popa
cmp
push
dec
jno
adc
sbb
xchg
cmp
cld
xchg
repz
adc
sbb
pop
mov
jecxz
out
dec
xchg
mov
dec
xchg
cwde
div
jecxz
cmp
add
cmp
mov
fwait
jle
jp
adc
or
cmp
or
(bad)
out
mov
sub
cmps
repnz
xor
jmp
gs
aas
xchg
and
xor
jae
outs
in
mov
call
mov
add
inc
fucomp
push
lds
fcom
sub
out
adc
adc
sub
push
pushf
mov
out
out
cli
fs
sub
jle
push
lods
jno
adc
xor
mov
add
(bad)
mov
gs
int3
test
cmp
mov
jle
pop
add
pop
mov
daa
xchg
add
out
mov
lods
jecxz
xchg
mov
add
nop
pop
imul
jae
adc
shr
mov
pop
loopne
call
cwde
sbb
push
ds
mov
jmp
loop
mov
and
dec
xor
adc
mov
daa
ds
je
inc
fldz
cwde
lock
ss
push
dec
fnstsw
ja
popf
nop
dec
cmp
sbb
repnz
mov
lods
les
or
and
mov
sub
mov
push
xor
inc
sbb
mov
xchg
pop
lds
adc
push
jg
repnz
cmp
mov
and
mov
pop
outs
mov
aas
adc
adc
popf
in
mov
lods
mov
retf
pop
dec
xchg
sub
(bad)
mov
xchg
push
push
data16
mov
mov
xchg
jmp
lods
mov
dec
push
push
mov
mov
push
int
sbb
inc
jmp
adc
pop
jno
mov
std
js
lea
sub
fld
in
add
inc
dec
push
aas
or
mov
mov
jecxz
jle
icebp
mov
xor
test
shl
mov
inc
hlt
adc
cmps
cld
std
in
icebp
addr16
cmp
jb
dec
push
or
dec
xor
shr
daa
add
aaa
arpl
inc
popa
or
sahf
push
daa
dec
cmps
mov
stos
jmp
push
adc
fild
pop
dec
push
add
cs
pop
fst
and
xor
sbb
sub
(bad)
lods
inc
dec
rol
imul
or
mov
ss
cli
lods
sub
and
sahf
pop
jne
das
repnz
dec
pop
dec
mov
sahf
sub
nop
adc
aam
aad
xor
jo
pop
lahf
sub
xchg
dec
ins
add
repz
sbb
jmp
ss
rcr
mov
scas
hlt
push
fist
pop
dec
jmp
cmp
push
in
push
retf
(bad)
or
loopne
loopne
inc
js
enter
pusha
rcl
mov
mov
fcom
mov
movs
bound
outs
xchg
ins
push
div
sahf
push
jae
loopne
(bad)
jge
outs
dec
fsub
cdq
pusha
or
mov
xchg
adc
adc
adc
lahf
jle
aaa
lds
push
scas
fild
mov
(bad)
mov
add
mov
sbb
xchg
mov
ret
stos
loopne
push
xlat
jnp
movups
stos
fisub
mov
ret
lock
xor
imul
in
pop
mov
mov
cli
mov
les
mov
daa
mov
fcmovb
dec
jne
popa
nop
mov
jmp
mov
jge
or
rcl
test
sbb
xchg
ret
add
xor
retf
or
add
pop
mov
mov
shr
xchg
pusha
std
and
in
mov
fst
mov
mov
int3
pop
test
cdq
in
sysret
cdq
push
fisub
shl
xor
adc
repnz
push
cli
xor
and
cli
mov
les
xor
pop
je
clc
lock
jecxz
mov
adc
cs
jmp
fwait
pop
pop
mov
mov
inc
dec
lahf
out
mov
(bad)
jp
mov
sti
repz
jns
lock
aas
xchg
inc
stc
add
xor
sti
mov
pop
or
(bad)
in
fsubr
(bad)
fadd
push
ss
call
dec
jns
repz
cmp
hlt
inc
inc
movs
pushf
mov
push
xor
dec
and
mov
(bad)
xchg
mov
clc
push
fadd
sub
(bad)
cwde
sahf
js
iret
scas
xchg
ja
inc
inc
xchg
and
sbb
lods
loopne
xchg
lock
test
cli
iretw
loopne
(bad)
xchg
push
cmp
mov
imul
adc
scas
pop
mov
lds
xchg
xchg
jne
int3
in
push
js
xchg
pusha
jbe
into
adc
mov
jp
cmp
push
cmp
push
mov
mov
ins
xchg
dec
sub
bound
ret
add
sahf
aam
test
fcomp
hlt
push
scas
aad
push
call
test
(bad)
mov
cmp
je
loope
in
out
je
mov
xor
and
scas
into
sub
imul
sub
ret
inc
addr16
inc
out
cmp
(bad)
out
xchg
adc
test
push
sub
in
dec
dec
jecxz
sub
mov
mov
nop
test
fcomp
xchg
jl
jne
lea
xchg
mov
jae
pop
inc
xor
push
cmp
cmp
ret
das
and
add
push
movzx
sbb
jecxz
fistp
push
aam
mov
mov
jnp
int
pop
push
push
call
arpl
aad
cwde
mov
int
xchg
push
call
pop
mov
and
out
enter
iret
mov
pop
bound
ror
mov
enter
jmp
jae
xlat
add
add
pop
add
pop
loop
cmp
cdq
adc
mov
mov
jmp
retf
ds
out
or
pop
sbb
mov
push
push
push
cmc
not
popf
push
or
leave
xor
cmp
cs
push
fcom
clc
daa
xlat
sub
repz
into
aam
les
sub
mov
inc
mov
inc
pop
push
sub
push
adc
js
dec
(bad)
sti
sub
sub
add
sbb
fcomp
lahf
loop
in
add
xchg
jmp
add
and
mov
and
adc
mov
sbb
stos
loopne
fwait
push
int3
mov
jmp
fwait
cmp
cmp
adc
(bad)
sbb
(bad)
icebp
push
in
sbb
and
push
and
cmp
into
mov
push
stc
lahf
adc
int
out
inc
mov
sbb
daa
mov
adc
add
ds
xchg
rcl
sti
add
dec
xchg
fldenv
cld
test
stos
adc
push
stos
stc
test
cmp
test
pop
pop
je
cdq
push
mov
push
jmp
adc
lock
xchg
ins
enter
push
or
and
in
sub
idiv
iret
mov
pop
xor
mov
mov
ja
out
dec
ins
cmps
add
neg
or
jle
jb
shl
push
or
movs
fcomp
adc
or
inc
push
ret
fnstsw
fdivr
movs
or
add
push
fsubr
sbb
cmp
mov
or
mov
arpl
or
mov
ins
pop
sub
mov
and
xchg
in
ret
or
clc
rcr
push
xchg
mov
movs
out
and
mov
das
mov
sub
sub
add
add
cmp
jmp
and
gs
or
push
hlt
jp
cmps
loope
loop
cmp
dec
and
adc
push
mov
repz
inc
sbb
movs
xor
sub
daa
out
rcl
lods
cwde
icebp
iret
ins
pop
and
div
add
aas
add
jmp
ror
cmp
int3
jge
scas
push
xlat
ja
scas
jmp
xchg
push
ror
sbb
sub
inc
cdq
push
xlat
push
inc
icebp
xchg
mov
sbb
mov
adc
jne
cmps
mov
mov
push
mov
stc
outs
fdiv
cli
stc
sub
and
jmp
mov
sub
adc
dec
(bad)
push
and
push
cli
loopne
inc
mov
jbe
or
pop
inc
clc
(bad)
aas
test
cmp
sub
adc
push
pop
scas
and
xor
dec
stos
jae
aad
and
sub
xor
and
outs
jo
pop
popf
imul
lea
xchg
outs
sub
sar
mov
cmp
xchg
cmp
cmp
fwait
dec
ret
dec
cmp
loop
jb
and
repnz
imul
inc
xchg
mov
imul
pop
mov
push
cmp
adc
js
push
psubd
xchg
retf
movs
mov
in
vmread
ret
fst
dec
into
stc
jle
mov
call
outs
xor
jecxz
retf
and
sbb
in
mov
mov
cld
xchg
pop
dec
mov
sbb
and
mov
adc
xchg
cwde
daa
fist
add
je
mov
mov
stc
ja
jae
push
pcmpeqb
neg
jl
(bad)
pop
dec
ja
inc
out
clc
adc
je
push
test
rcl
adc
xchg
xchg
pop
adc
(bad)
push
push
xchg
jno
in
addr16
pop
call
fistp
jg
iret
lahf
sbb
getsec
mov
int3
test
scas
push
adc
mov
inc
test
stos
xlat
icebp
sbb
sti
bndstx
or
sbb
movs
adc
jbe
jno
cdq
rcr
sbb
jnp
push
xor
pop
pop
cld
fwait
int
or
dec
rcl
(bad)
fisttp
push
mov
leave
lds
nop
xchg
mov
xor
sti
(bad)
out
bound
clc
mov
shl
test
and
adc
sub
in
sbb
cmp
ins
popa
or
push
cmp
pop
push
sub
and
lea
jge
adc
xor
mov
adc
mov
push
outs
fisub
mov
(bad)
mov
jmp
das
jge
push
or
gs
(bad)
stos
retf
mov
adc
cmp
loope
xchg
mov
imul
cs
neg
push
out
dec
jmp
adc
call
xor
and
push
push
push
jl
in
ins
dec
mov
jno
(bad)
adc
daa
pop
pusha
ret
inc
aam
sub
or
iret
call
inc
stc
push
xchg
xor
jb
test
inc
adc
mov
push
lods
and
mov
or
sti
repnz
mov
xchg
cmp
nop
enter
pop
cmps
sub
outs
push
call
in
cmp
data16
or
cli
adc
add
or
xchg
fld
adc
or
out
(bad)
mov
sub
cs
and
sub
jp
xchg
test
dec
dec
cmp
pop
int
adc
lds
pop
aam
and
sahf
movs
and
cmps
repnz
sbb
js
arpl
enter
push
cmp
in
lods
scas
push
cmp
cmp
cdq
inc
pop
mov
dec
mov
in
jg
gs
adc
fistp
pop
inc
pop
dec
fwait
cmps
pop
inc
inc
or
aad
out
push
sar
sub
mov
push
inc
stc
dec
inc
or
shl
or
jne
fiadd
mov
stos
(bad)
inc
push
dec
addr16
jl
pop
pop
out
mov
add
sbb
or
adc
repnz
sub
or
sbb
xor
leave
call
xchg
jno
movs
or
fst
test
aaa
sbb
int3
mov
cdq
mov
scas
jne
repz
call
arpl
jg
fiadd
or
push
jns
call
cmp
xchg
pop
cs
jns
je
or
leave
or
shl
inc
xor
dec
in
pop
push
test
add
mov
rcl
clc
push
and
adc
inc
daa
inc
adc
and
sbb
loope
xlat
inc
iret
lock
jo
mov
mov
bnd
mov
mov
xchg
jecxz
push
lea
push
cmc
jae
sbb
pushf
mov
sub
enter
mov
(bad)
outs
sub
aam
and
aad
dec
sub
jae
rcl
mov
out
in
jo
sub
adc
mov
mov
lea
and
push
dec
push
call
(bad)
rcl
pop
sub
mov
push
(bad)
sbb
jbe
cmp
(bad)
mov
jns
stos
lea
or
rol
and
neg
hlt
mov
dec
out
dec
xor
cmp
movs
aaa
(bad)
inc
xchg
mov
pop
cli
outs
aam
sti
das
or
loop
fnsave
inc
imul
xor
push
mov
sub
jns
sub
leave
(bad)
ss
out
bound
bnd
xchg
test
mov
adc
sbb
cmps
xchg
ret
sub
add
push
and
xlat
lahf
enter
daa
pop
xor
fadd
call
imul
push
push
icebp
add
mov
rcr
lods
xchg
dec
stc
test
mov
mov
mov
jmp
fiadd
scas
add
sar
xchg
jge
jnp
sti
fmul
in
mov
bound
mov
inc
dec
mov
cli
sti
cmp
stc
out
pusha
aas
jmp
xor
call
cmp
xchg
mov
xchg
mov
mov
or
mov
xor
movs
and
mov
test
fbstp
iret
pop
iret
pop
or
jmp
aam
sub
mov
adc
mov
cmc
cmp
pop
retf
add
jle
add
inc
pop
add
gs
repnz
aad
push
not
daa
bound
jecxz
clc
rcr
icebp
xchg
ds
pop
sub
enter
pop
shr
leave
mov
sbb
aas
inc
jae
mov
lds
push
iret
push
sbb
hlt
in
daa
xor
loope
cmp
cmp
cmp
inc
add
add
sub
fsubr
dec
je
(bad)
push
sbb
mov
mov
push
inc
(bad)
fstp
mov
retf
fsubr
pop
push
call
sub
ins
imul
mov
cmc
in
in
data16
pop
sub
jecxz
pop
adc
fisubr
xchg
imul
ja
xchg
cmp
in
das
push
and
repnz
mov
icebp
inc
sbb
push
adc
jo
mov
cmp
stos
mul
call
pop
add
mov
popf
mov
adc
mov
or
fdivr
jnp
cmps
out
xor
add
sbb
in
jbe
mov
add
vpsrld
lea
pop
sbb
mov
fdiv
ss
call
movs
mov
or
push
adc
sahf
inc
imul
call
in
mov
fsub
repnz
mov
jmp
sti
dec
and
sbb
add
cmp
retf
into
rcr
mov
dec
push
push
imul
jmp
adc
repz
in
add
dec
push
xchg
sbb
jp
jmp
int
movs
jb
jecxz
jmp
(bad)
idiv
pop
add
mov
jl
fidivr
mov
inc
fadd
jne
mov
in
push
fmul
fcom
inc
xchg
leave
mov
jecxz
jl
loope
das
shl
pop
nop
popf
fiadd
add
ins
je
mov
jns
sahf
add
pop
xor
aaa
cld
sub
outs
dec
cli
(bad)
jecxz
or
and
add
and
cmps
pop
adc
out
or
adc
scas
pop
test
repnz
adc
adc
xor
loopne
or
pop
jle
clc
lock
outs
fwait
sub
or
adc
jmp
or
mov
ins
loopne
add
loopne
js
(bad)
fcom
lock
add
imul
fdivr
(bad)
pop
leave
push
or
lds
jmp
fldcw
jl
cmp
add
or
xchg
loope
jge
xchg
(bad)
mov
jg
push
ins
dec
daa
aaa
call
mov
cmp
fwait
nop
dec
xchg
in
fs
mov
aaa
sub
iret
fmul
mov
aaa
cdq
mov
sbb
dec
je
stos
mov
lds
pop
xor
pop
mov
inc
retf
and
fstp
dec
mov
push
test
or
add
dec
dec
test
dec
stos
loop
test
mov
call
mov
sbb
(bad)
pop
push
push
pop
push
dec
repnz
scas
jno
dec
pop
xchg
ror
test
add
adc
(bad)
push
add
jne
inc
mov
mov
loopne
in
fadd
(bad)
sbb
in
xchg
test
jns
inc
or
imul
jp
and
shr
inc
jmp
dec
push
(bad)
jno
mov
pop
xor
imul
xor
lods
inc
call
jg
aas
fucomp
icebp
mov
cmp
jge
(bad)
sbb
push
in
in
test
test
sti
pcmpeqd
cwde
pop
mov
retf
ret
shl
xor
cwde
dec
or
sub
in
daa
out
mov
push
cmp
xchg
adc
sbb
jp
and
jne
mov
mov
cli
mov
stos
jg
sahf
fwait
push
adc
xchg
mov
lahf
adc
xor
and
dec
daa
adc
xor
shl
add
aam
cmp
les
mov
inc
fwait
or
sti
xor
cmp
xor
shl
(bad)
imul
test
jae
in
aas
sbb
dec
dec
imul
push
dec
mov
loopne
pop
cmc
dec
(bad)
out
pop
sub
in
xchg
pusha
in
test
cmp
(bad)
push
or
rcr
push
push
cld
sub
rcl
or
dec
jge
imul
shl
pusha
mov
inc
shl
(bad)
fidivr
ins
hlt
repz
aam
enter
and
pop
pusha
cli
or
hlt
mov
rol
cmps
(bad)
inc
ins
leave
ret
cmp
and
inc
or
movs
and
retf
popa
sub
dec
pushf
cmp
cwde
mov
loope
(bad)
shl
or
dec
out
cmp
in
stc
nop
push
out
adc
in
lods
xlat
add
xchg
dec
and
mov
das
jle
ins
inc
ret
and
sub
retf
idiv
pop
and
push
pop
sub
add
imul
cmps
mov
sti
shl
push
adc
mov
or
out
cmp
stos
in
mov
popf
out
sbb
jo
inc
mov
sbb
(bad)
imul
retf
test
and
loopne
and
test
xor
mov
jae
xchg
js
xor
dec
out
add
gs
cdq
sbb
ins
aam
pusha
cmp
inc
push
rol
fs
aam
or
sub
out
add
cwde
fcomp
inc
sub
ins
sar
or
jo
nop
add
or
(bad)
sub
and
and
idiv
mov
daa
jmp
jecxz
push
mov
imul
and
and
sbb
(bad)
(bad)
jns
mov
out
gs
dec
aas
ror
scas
or
scas
add
fwait
jb
jmp
jge
xchg
repz
(bad)
stc
loop
pushf
push
push
push
(bad)
jnp
pop
cs
nop
adc
jl
test
retf
mov
gs
push
aam
dec
fwait
rcl
sbb
leave
dec
mov
jnp
fcom
xor
jmp
cwd
loop
jmp
push
pop
shr
sar
ja
lock
ja
ficom
pop
xchg
lods
mov
aaa
dec
fwait
sub
(bad)
add
jecxz
pop
adc
cs
jl
xchg
adc
sub
adc
outs
in
xor
xor
push
lods
adc
mov
inc
dec
movs
mov
cmps
mov
jl
(bad)
rol
inc
aam
sub
sub
f2xm1
dec
out
sub
aaa
mov
sbb
jmp
ss
push
out
enter
hlt
(bad)
inc
dec
xor
fmul
sar
fcomp
add
shl
retf
add
in
out
ficomp
push
or
inc
add
adc
xchg
in
jge
pop
cmp
movs
jno
jmp
leave
sti
(bad)
int3
rcr
adc
inc
hlt
adc
cld
add
sti
das
mov
(bad)
lods
cmps
cmp
jg
gs
loope
out
dec
out
sbb
idiv
(bad)
rcr
into
scas
push
aas
icebp
xchg
adc
mov
push
jbe
in
jecxz
or
jbe
js
hlt
out
call
imul
cmp
and
jmp
sub
cmp
sbb
cwde
aas
mov
xor
add
(bad)
mov
pop
jle
pop
cdq
pop
call
add
push
sbb
fst
mov
add
pop
dec
lock
aam
jle
inc
adc
dec
dec
push
and
daa
pushf
lahf
hlt
sbb
sub
cmp
or
cmps
dec
nop
addr16
push
push
cs
xchg
adc
imul
mov
sahf
push
sub
(bad)
shr
jmp
pusha
add
xchg
sub
jnp
mov
and
sbb
iret
fcomp
jno
pop
inc
icebp
bound
xor
cmp
adc
mov
add
addr16
arpl
xchg
out
mov
(bad)
pop
mov
xchg
jecxz
xchg
xchg
mov
pop
inc
xor
push
jge
sbb
loopne
sub
cmp
movs
lods
mov
retf
and
inc
(bad)
repz
rol
dec
xchg
pop
dec
jl
lods
cld
ins
test
pushf
mov
aas
in
and
adc
es
adc
fnsave
pusha
fisttp
jmp
adc
mov
outs
adc
push
cmp
mov
dec
enter
out
push
retf
add
push
loopne
mov
jge
xchg
or
(bad)
fisub
(bad)
cmp
arpl
and
cmps
and
cmps
mov
mov
sub
shr
mov
jg
mov
mov
push
rol
imul
lods
js
or
and
repz
ja
das
aad
xor
inc
pop
mov
lock
xchg
les
adc
in
inc
mov
call
push
xchg
dec
and
(bad)
cld
add
mov
wrmsr
loopne
das
lock
mov
fdiv
in
test
cli
push
add
mov
in
push
jbe
inc
pop
dec
xchg
inc
sub
pop
adc
mov
mov
hlt
sti
daa
fstp
pop
adc
xchg
push
mov
mov
iret
fst
dec
push
sub
dec
mov
xor
dec
inc
adc
sbb
lahf
xor
rcl
mov
fs
sub
gs
push
push
div
ja
dec
and
jmp
fwait
inc
mov
pop
sbb
out
rcr
into
jb
cli
and
sub
loopne
jmp
inc
pushf
push
fadd
sbb
(bad)
out
rcr
mov
and
sbb
mov
push
mov
repnz
mov
jecxz
(bad)
leave
fwait
cmc
cmps
jne
js
rcl
enter
sub
add
pusha
ror
sub
mov
dec
stos
xor
xor
pop
loopne
sub
mov
pop
popa
mov
(bad)
sub
clc
mov
ss
in
aas
pop
add
add
jge
je
loope
jne
movs
adc
into
sub
es
call
fld
fiadd
in
cmp
enter
xchg
sbb
das
add
and
xchg
loope
jg
fidiv
(bad)
iret
addr16
xor
inc
dec
jl
es
adc
add
in
fincstp
add
scas
inc
mov
xchg
imul
les
sbb
inc
xor
pop
and
lods
loop
loopne
jno
cmp
aaa
loopne
inc
xor
jbe
addr16
mov
adc
pop
mov
sbb
cmp
and
gs
stos
outs
xchg
push
xchg
iret
xor
lahf
jne
ret
mov
out
lds
mov
lea
and
cmp
in
jnp
push
in
les
sbb
stos
lock
mov
loop
pop
outs
icebp
into
aad
mov
shr
push
sahf
jmp
xor
jp
call
mov
add
out
repnz
push
(bad)
ss
xchg
mov
lods
pop
jecxz
icebp
ins
mov
out
nop
cdq
pusha
inc
pop
retf
mov
imul
push
jb
repnz
sub
(bad)
mov
test
cmp
rcr
inc
mov
mov
or
out
sbb
in
xlat
xor
xor
or
jp
popf
xchg
lahf
jg
push
cli
outs
stos
out
pop
fidivr
es
stos
movs
stos
inc
daa
js
into
push
test
stos
nop
in
cdq
inc
lods
adc
xchg
push
sar
sbb
pusha
retf
jae
mov
mov
xchg
aad
jns
xlat
std
mov
push
les
mov
fnstsw
lock
inc
int
push
shl
add
push
mov
pop
push
cmp
(bad)
cli
sub
inc
loopne
into
xchg
mov
fcom
mov
rcl
or
sbb
sahf
imul
loope
or
cli
adc
adc
bound
jno
mov
ja
movs
mov
inc
add
jbe
repz
loopne
mov
dec
inc
xchg
cmp
push
lock
xchg
inc
scas
fs
xor
xchg
inc
add
aaa
xchg
out
push
loop
fs
out
jmp
loop
sbb
shr
in
inc
outs
int
imul
xchg
arpl
dec
fdecstp
stos
mov
inc
cwde
clc
cli
jmp
aas
lds
stos
mov
adc
xor
mov
(bad)
mov
mov
add
jmp
ss
bound
jp
fwait
hlt
scas
or
jnp
xor
add
ss
imul
jne
jecxz
pop
add
push
pop
sbb
(bad)
push
mov
or
cmp
(bad)
sbb
test
xor
mov
loop
or
push
dec
ret
je
push
push
add
jno
lea
jbe
pop
aas
retf
fs
mov
mov
jmp
mov
adc
(bad)
mov
mov
lea
add
dec
scas
adc
movs
push
cwde
and
fucomi
and
std
pop
ins
mov
fcom
add
les
jnp
xor
scas
sbb
xchg
sub
mov
mov
or
mov
mov
mov
dec
bound
cmp
cmc
aam
stos
cli
cwde
retf
dec
sub
lds
popf
cld
mov
jmp
push
retf
cmp
cmp
(bad)
pop
pop
cdq
inc
test
pop
mov
or
(bad)
mov
dec
imul
inc
cli
in
or
jo
mov
(bad)
aad
mov
std
cmp
sbb
adc
call
sbb
dec
les
and
mov
das
fmul
repnz
jecxz
dec
adc
sub
enter
jmp
inc
mov
or
push
std
sub
ror
jge
jmp
gs
jmp
iret
dec
pushf
xchg
push
pop
in
pop
fst
adc
icebp
mov
and
cmps
sti
mov
or
cdq
pop
shl
jmp
mov
mov
adc
xor
repz
push
(bad)
mov
test
fwait
dec
imul
jl
or
push
or
nop
fs
outs
ror
mov
mov
inc
dec
pop
push
jo
nop
adc
or
mov
jmp
int
xchg
inc
jmp
repz
cmp
pop
call
bnd
lds
and
bound
lock
iret
jb
cmp
arpl
sbb
mov
aas
aam
sbb
mov
push
nop
sub
in
stos
cs
pop
shl
jne
addr16
mov
jecxz
aam
lahf
popf
bound
das
and
xchg
mov
pusha
mov
mov
push
clc
inc
push
bound
icebp
add
cmp
sbb
lods
popa
arpl
in
int
imul
sahf
pop
shl
sbb
or
cmps
jmp
in
cmp
aam
or
movs
outs
jbe
mov
fsubr
xor
pop
sbb
addr16
sbb
pop
xchg
out
pop
not
pop
aaa
ret
or
pop
fld
sub
xor
je
jne
je
and
nop
movs
inc
cmc
ds
pop
aaa
in
dec
pop
adc
nop
jae
jne
mov
ins
ret
or
pop
fld
push
jb
je
imul
and
mov
mov
xchg
adc
mov
push
cld
xor
jp
leave
adc
fsub
pusha
shl
out
adc
jae
sbb
or
pop
sub
int
mov
fnstenv
gs
and
or
pop
fld
sub
das
mov
add
mov
add
add
add
push
aam
daa
mov
push
fldcw
mov
xchg
jb
cmc
push
xor
sahf
dec
lds
inc
pop
xchg
movs
hlt
cmps
jmp
pop
push
xor
push
xor
add
mov
and
(bad)
test
outs
aaa
push
call
scas
test
out
in
loope
movs
sub
xor
sub
mov
dec
scas
enter
xchg
fwait
jmp
or
push
inc
cmp
pop
mov
ins
mov
push
rcr
jmp
stos
xchg
cmps
rcr
xor
and
ss
jmp
sbb
and
iret
adc
iret
out
mov
and
pop
pop
xchg
jle
aad
and
xchg
inc
push
push
sbb
mov
lods
call
aas
cdq
cmps
fwait
inc
arpl
mov
jne
cli
retf
mov
retf
(bad)
nop
les
(bad)
sbb
xlat
mov
ins
dec
xchg
jb
xchg
push
push
sbb
dec
or
shr
xor
xchg
and
imul
cs
outs
enter
icebp
jg
shl
push
js
and
jmp
xor
mov
popf
fwait
out
mov
addr16
test
mov
pop
movs
idiv
je
add
test
dec
sub
pop
bound
mov
mov
neg
ja
cmc
hlt
rcr
(bad)
mov
scas
(bad)
adc
(bad)
xchg
sub
and
jmp
dec
mov
xor
cmc
lds
pusha
das
outs
or
push
popa
pop
sbb
ds
sbb
add
inc
xchg
jmp
adc
enter
push
js
mov
inc
(bad)
and
(bad)
scas
retf
mov
lds
cmps
out
dec
jne
dec
lds
pushf
push
popa
sbb
pop
out
jmp
jb
nop
inc
int
push
xor
xor
in
mov
call
adc
call
ror
push
rol
test
push
aad
adc
outs
mov
cmps
imul
test
xor
add
scas
xchg
dec
mov
pop
pusha
push
and
inc
inc
or
hlt
mov
cli
popf
and
mov
jmp
add
dec
cmp
js
fcom
sbb
and
jge
push
mov
aam
sub
mov
mov
xchg
cmp
push
aam
xchg
int3
cld
mov
jmp
mov
or
dec
das
retf
inc
ja
push
pop
ds
(bad)
xchg
ror
int3
stos
adc
push
xor
(bad)
dec
das
retf
inc
ja
push
pop
ds
(bad)
xchg
ror
int3
stos
adc
push
xor
(bad)
dec
das
retf
inc
ja
push
pop
ds
(bad)
xchg
ror
int3
stos
adc
push
xor
(bad)
dec
das
retf
inc
ja
push
pop
ds
(bad)
xchg
repnz
in
pop
cmps
dec
jb
cmp
scas
mov
add
cmp
fmulp
shl
int3
stos
adc
push
and
(bad)
dec
mov
repz
adc
push
sti
(bad)
xchg
cli
leave
dec
repz
add
enter
sub
or
dec
(bad)
nop
int3
dec
call
adc
in
pop
adc
jmp
adc
popf
sbb
imul
and
add
icebp
inc
pop
sbb
sbb
daa
add
(bad)
xchg
push
mov
xchg
jmp
adc
lods
les
bound
(bad)
mov
repnz
sub
xchg
inc
jns
fs
inc
and
idiv
outs
jbe
popa
dec
sub
push
cmc
das
retf
dec
das
in
lods
cmps
inc
ja
push
adc
push
(bad)
lahf
dec
int3
and
out
stos
stos
aas
fisub
aad
jae
mov
mov
dec
xchg
pop
add
sti
sub
test
mov
daa
push
gs
aaa
ror
mov
push
ins
lds
add
out
pop
xchg
leave
push
or
push
xor
leave
cmps
imul
xchg
adc
and
mov
mov
jb
js
std
daa
mov
jne
adc
enter
retf
addr16
fcomip
mov
loop
adc
mov
pop
fist
push
push
cmc
sbb
rol
cs
dec
ja
pop
xchg
jb
fiadd
in
jbe
fstp
fadd
sbb
push
inc
cmp
leave
test
pop
mov
lea
pop
retf
mov
xchg
ret
mov
cmp
jecxz
sbb
int3
aam
fild
or
pop
jecxz
movs
cli
mov
int
or
fistp
std
leave
lods
ins
shl
cli
xchg
adc
cmp
cmps
push
scas
mov
popa
mov
fmul
add
jecxz
adc
add
out
test
test
(bad)
lahf
shl
int
adc
push
cmp
retf
xrelease
adc
jmp
pop
fisub
pop
das
push
sbb
dec
ret
out
inc
xor
aas
or
int3
pusha
mov
push
add
out
jp
mov
stc
fidivr
pop
test
sub
add
or
xchg
aam
push
adc
ror
push
push
sbb
imul
out
add
mov
xor
test
(bad)
int3
pushf
dec
add
dec
in
xchg
loopne
add
jno
pop
cld
int3
call
ins
(bad)
imul
jb
jl
ds
fnop
xchg
(bad)
int3
mov
aaa
pop
sub
sbb
addr16
mov
add
in
(bad)
push
out
jmp
jmp
add
(bad)
loope
jle
xchg
(bad)
mov
inc
xchg
and
mov
retf
xor
and
mov
inc
ins
pop
cmp
retf
push
push
jl
push
jl
dec
mov
pop
mov
dec
ss
pop
in
cmp
rcr
push
pop
push
cmovg
fcomp
mov
inc
lahf
jae
push
mov
in
enter
call
push
sbb
fisubr
int3
mov
push
lock
xor
(bad)
fs
dec
ja
push
pop
ss
lahf
(bad)
mov
in
rol
push
cmp
out
sub
mov
push
pop
mov
dec
nop
rcl
rcl
mov
iret
dec
mov
xor
dec
mov
cdq
inc
jae
jg
or
enter
fcom
or
aad
xchg
rol
ror
mov
sbb
cmps
adc
add
(bad)
push
pop
rcr
mov
add
imul
sahf
in
pop
cmp
inc
popa
stos
or
aaa
add
sub
mov
pushf
jmp
pop
clc
daa
xchg
(bad)
int3
int3
scas
adc
push
xor
enter
lods
sbb
or
sahf
xchg
pop
imul
mov
shl
das
dec
(bad)
push
icebp
mov
sub
fistp
add
mov
mov
enter
push
adc
xchg
push
clc
inc
rcr
sar
fbstp
in
pcmpeqw
inc
aas
es
push
push
mov
xchg
fcom
lahf
xchg
jne
sar
jp
outs
inc
dec
pop
xchg
pop
popa
or
jp
clc
in
cmc
adc
mov
pop
mov
mov
outs
mov
xor
pop
adc
inc
in
dec
lods
stos
mov
cmp
ror
ret
push
cmc
push
stos
in
rol
dec
inc
shl
out
sub
dec
pushf
sbb
dec
xchg
jno
xor
pop
cmp
add
fcmovu
mov
push
outs
cmc
in
leave
retf
(bad)
clc
add
xchg
mov
out
aad
mov
loopne
or
mov
dec
jl
aad
mov
mov
ror
scas
and
jns
add
or
(bad)
cmp
jecxz
xchg
jmp
mov
cmp
push
mov
aas
scas
mov
xchg
or
add
adc
push
xor
(bad)
dec
das
retf
inc
ja
push
pop
ds
(bad)
sbb
(bad)
mov
adc
and
mov
mov
int3
mov
pop
and
cwde
push
jp
sub
push
sbb
sub
dec
push
hlt
jns
jno
xchg
in
jecxz
cmp
push
pop
or
cli
fwait
arpl
and
pop
out
adc
dec
and
(bad)
push
punpcklbw
pop
out
imul
test
or
stc
repz
mov
rcr
outs
leave
xchg
mov
pop
hlt
popf
cmc
popa
sbb
mov
test
cs
iret
mov
idiv
xchg
daa
jmp
mov
cmps
lock
ds
neg
clc
call
int3
inc
mov
leave
mov
js
mov
data16
dec
cmp
pusha
jne
sbb
mov
or
daa
fsubrp
or
dec
sbb
int3
inc
lods
stos
push
sbb
fst
adc
pop
neg
pop
je
jge
sbb
jle
arpl
sub
je
ret
lahf
jae
cmp
push
test
(bad)
xor
xchg
outs
jle
call
sbb
outs
pop
add
mov
sar
hlt
aas
pop
aaa
stos
popf
and
pushf
xchg
sub
mov
jne
jg
repz
sbb
cmp
mov
sub
xchg
xchg
adc
mov
jl
mov
stc
lods
outs
xor
push
call
in
sub
mov
jb
cmp
inc
gs
int3
xor
push
jmp
add
xchg
movs
(bad)
mov
cmp
fwait
sahf
pop
(bad)
cs
ins
aas
repnz
test
pusha
mov
jp
mov
cwde
jae
or
pop
lock
and
mov
aam
fsub
jnp
data16
push
pop
adc
jge
sub
(bad)
push
add
add
sub
jbe
lea
mov
jbe
daa
jp
xchg
das
call
jno
lods
fisub
mov
loop
out
out
cmp
xchg
mov
scas
adc
fist
mov
dec
and
sar
pop
sub
ret
cmp
jno
inc
pop
add
add
je
xlat
std
pop
gs
das
xchg
or
ss
and
int
cdq
xor
add
add
xchg
lahf
add
and
cli
push
adc
fmulp
in
dec
out
sbb
sbb
movs
test
jnp
pop
dec
xchg
sar
shr
and
and
in
cmp
call
inc
pop
mov
ret
inc
cmp
cld
sub
push
sar
jmp
sbb
mov
sub
lahf
sti
push
jle
ja
and
mov
repz
mov
out
jmp
nop
test
mov
shr
dec
movs
iret
sbb
fldcw
pusha
mov
lea
adc
jp
(bad)
mov
sbb
addr16
dec
ret
xchg
xchg
mov
mov
in
out
mov
push
in
pop
pop
ins
addr16
scas
xchg
push
in
mov
adc
push
adc
inc
js
cmp
pop
jnp
(bad)
mov
jge
xchg
je
hlt
inc
(bad)
mov
fwait
mov
inc
sub
push
cmp
and
adc
popf
aad
(bad)
sub
push
or
cmps
js
lods
pop
push
sbb
pop
or
add
add
mov
add
retf
and
and
pop
sub
loope
bound
sub
xchg
inc
xchg
bound
test
mov
retf
and
cwde
je
test
push
je
sub
mov
loope
jmp
mov
stc
call
push
lds
ins
jg
out
mov
fwait
sbb
out
push
xchg
or
pop
push
jecxz
cmp
push
ss
push
out
inc
lahf
popf
(bad)
int3
mov
push
or
sub
into
inc
js
out
jo
mov
dec
inc
adc
das
repz
push
ins
add
xor
jno
lahf
mov
lds
xchg
push
pop
cmps
and
int3
inc
and
lock
std
idiv
push
push
mov
mov
test
pop
lock
push
jp
outs
rcl
xor
fdivr
pop
push
fisttp
cmp
aam
cmp
xor
cmc
sbb
dec
xchg
sub
cdq
pop
out
push
cmp
pop
adc
into
in
push
jecxz
add
mov
xchg
xchg
(bad)
fldenv
ret
div
jb
in
xor
sahf
adc
fnstenv
pop
xor
(bad)
sbb
xor
ja
fidiv
stos
mov
mov
cmp
cwde
cmp
dec
pop
dec
lds
lods
leave
mov
int
dec
clc
mov
lods
loop
adc
inc
jp
push
inc
pop
xchg
fistp
imul
inc
stos
cli
mov
inc
add
adc
lods
lods
xchg
inc
(bad)
cld
lock
jmp
sub
(bad)
jg
xor
popa
mov
daa
xchg
add
dec
xlat
fst
sub
fld
inc
ret
adc
push
call
xchg
mov
adc
mov
dec
(bad)
cwde
sub
cmp
cli
scas
pop
add
push
xchg
repnz
xor
sti
xor
and
ja
mov
fnstenv
in
sbb
loop
jmp
test
mov
jmp
mov
mov
gs
cdq
pop
or
mov
in
or
popf
fcomp
lds
adc
mov
xlat
mov
lahf
in
and
adc
xchg
gs
and
lods
pusha
cmp
lock
xor
pop
out
sub
mov
or
push
mov
std
dec
sbb
shl
mov
sub
daa
mov
data16
dec
add
xchg
and
jecxz
fs
pop
mov
call
pop
jl
aam
sbb
inc
mov
mov
not
pop
lea
aad
gs
mov
scas
mov
pop
dec
lea
jmp
sub
fiadd
ror
pop
popa
inc
out
fidivr
pop
xchg
mov
mov
in
jbe
push
inc
sbb
fcmovne
cmps
pop
xor
adc
or
popa
cli
sbb
adc
push
sub
mov
sbb
add
sti
inc
idiv
or
std
xchg
in
and
inc
fs
jg
mov
cs
js
mov
scas
jmp
jmp
in
ins
xor
cmc
pop
inc
aas
adc
xchg
mov
pop
loope
mov
repz
psrlw
xor
mul
push
das
mov
inc
test
adc
push
xchg
jnp
jns
stc
inc
loope
ret
daa
test
loopne
out
icebp
dec
mov
jb
sbb
xor
and
call
mov
sub
jne
aad
scas
loope
or
xchg
mov
sbb
in
push
sbb
inc
mov
loop
mov
aam
shl
cwde
fnstsw
jne
pop
ja
loope
ja
jmp
imul
scas
dec
jbe
mov
in
sbb
mov
fst
pop
xor
jne
push
in
xchg
cmp
xor
inc
or
stos
cmp
push
repz
mov
mov
stos
in
das
aad
sub
xchg
push
or
mov
repz
shr
adc
enter
xor
or
xchg
add
rcr
out
es
or
sbb
push
mov
or
rcl
fdiv
or
mov
jb
mov
shl
pop
jno
mov
push
xor
cmp
in
xchg
inc
xlat
pop
and
gs
jno
xchg
xchg
mov
jns
push
jbe
xor
sbb
and
jno
imul
xchg
push
push
xor
fnsave
mov
int3
rcr
pop
mov
mov
in
sbb
in
imul
pop
xor
gs
into
add
or
mov
jo
xchg
xor
shr
ret
inc
loope
cmp
xchg
sub
sbb
push
mov
adc
cmps
jne
ds
nop
push
int3
fnsetpm(287
jae
lea
push
imul
mov
mov
sbb
xchg
push
xchg
and
jno
nop
sub
dec
das
pop
mov
fdiv
push
and
pop
iret
pop
cli
pcmpgtd
dec
ret
mov
or
or
test
mov
sti
xor
cmps
lds
out
out
loope
dec
iret
call
icebp
ret
call
mov
popa
fucomip
aam
pop
stc
je
adc
mov
ins
mov
mov
movs
push
test
xchg
fisttp
call
stos
xchg
test
jp
call
ficom
inc
int3
jmp
cmc
int3
add
out
jmp
jo
imul
pop
lods
pushf
dec
and
cmp
fiadd
daa
cmp
cmp
inc
or
xchg
cmp
push
inc
loopne
adc
dec
pop
jb
es
add
or
sub
sysenter
mov
mov
(bad)
retf
repz
pop
jns
push
mov
jmp
sub
jl
in
jg
cmp
aas
adc
dec
mov
jne
js
adc
jle
test
cmp
mov
ror
jae
fstp
push
add
xor
cmp
leave
pop
into
xchg
mov
xor
es
pushf
xchg
cmp
mov
cmc
or
xchg
cmps
cmp
arpl
and
aam
je
mov
push
adc
push
aas
cmp
shr
stos
adc
int
pop
and
pop
sbb
aam
sbb
mov
jno
int3
(bad)
jp
push
ss
xchg
cmps
push
das
adc
scas
or
out
jge
(bad)
fidivr
imul
outs
out
and
xchg
mov
outs
not
(bad)
std
mov
jg
xor
bound
outs
out
jno
push
mov
jbe
dec
loope
jmp
stos
mov
sti
inc
mov
xchg
out
xlat
call
jae
mov
mov
(bad)
mov
pop
mov
add
pushf
xchg
jp
xor
pop
ficom
movs
adc
stc
dec
pop
fs
mov
push
jge
mov
iret
call
popf
jmp
mov
push
add
mov
sahf
int
mov
pop
repnz
push
mov
and
ror
clc
retf
std
aad
mov
lahf
xchg
shr
int3
dec
enter
pop
int3
shl
inc
int3
ss
push
jecxz
repz
dec
mov
popa
ror
and
or
inc
in
push
dec
cmp
stc
scas
push
sub
jae
cmp
stc
and
cmp
xor
xchg
push
pop
dec
inc
div
adc
or
pushf
adc
data16
out
jg
add
adc
mov
int
adc
or
jo
repnz
les
clc
aaa
inc
int3
test
adc
leave
jmp
ror
cmp
mov
pop
inc
jp
xchg
and
outs
sub
dec
mov
and
les
in
cwde
cmps
mov
push
(bad)
ins
push
mov
sbb
aad
or
jge
fisubr
or
stc
(bad)
movs
arpl
scas
cdq
sbb
mov
pop
sbb
addr16
push
mov
dec
jmp
das
pop
mov
scas
retf
cmp
in
adc
sub
push
test
sbb
add
ret
and
xor
jo
fwait
cs
mov
outs
push
out
cmp
or
repnz
mov
xchg
mov
or
stc
rol
mov
dec
push
cmps
mov
stos
aad
movs
lods
xor
lock
(bad)
gs
addr16
mov
out
jl
push
cmp
jge
sub
ins
scas
push
inc
scas
mov
into
data16
pop
cmovs
push
hlt
leave
fdiv
add
inc
fcom
pop
xor
icebp
adc
dec
mov
pop
mov
and
xlat
lahf
fmul
aam
call
mov
call
loopne
pop
and
daa
xchg
pop
add
mov
cmc
je
aam
retf
cmp
loopne
sbb
inc
xchg
stos
mov
mov
mov
push
mov
xor
and
jmp
pusha
or
jnp
xor
sbb
push
dec
sub
pop
cmp
jnp
mov
ss
mov
and
pushf
cmp
sub
(bad)
xor
pop
pop
push
call
push
ret
int
aam
or
mov
sub
mov
xchg
enter
or
ins
dec
push
and
das
cmp
pop
mov
jno
and
sahf
std
sar
scas
clc
jnp
inc
lods
imul
(bad)
sbb
jne
inc
ja
out
mov
jae
movs
add
(bad)
(bad)
inc
lahf
out
mov
out
mov
stc
xchg
lds
add
les
in
pop
cs
addr16
jmp
loop
pop
scas
sub
mov
xchg
in
movs
outs
inc
jnp
push
adc
inc
rcr
pop
xchg
mov
cdq
das
mov
dec
xor
ja
xor
int
test
(bad)
jmp
xchg
xor
push
fs
mov
icebp
jns
int
shr
sbb
mov
sbb
cmc
inc
lock
inc
push
out
scas
jmp
add
psubd
and
push
mov
out
xor
push
and
pop
in
pop
dec
ret
or
mov
std
shl
ins
cli
rol
movs
xor
je
pop
jg
fnstenv
mov
(bad)
adc
sbb
push
cmp
and
enter
cli
mov
xlat
popf
popf
ds
retf
mov
dec
mov
xchg
les
dec
dec
push
scas
cmp
xlat
inc
enter
cmp
mov
rol
in
add
mov
enter
je
inc
out
jne
add
int3
(bad)
call
add
(bad)
xchg
push
retf
mov
inc
int
pop
and
mov
loope
push
enter
jne
jmp
aaa
xchg
out
xor
mov
xor
adc
jno
sub
mov
hlt
pop
rcl
mov
mov
pop
jp
bound
out
int
retf
fstp
mov
call
mov
push
or
ja
cmp
ins
inc
in
or
mov
mov
es
popf
pop
scas
mov
jno
les
in
cs
nop
scas
sub
push
scas
jbe
fidiv
cld
imul
adc
aam
jl
ret
dec
ret
stos
cld
inc
jno
adc
test
leave
arpl
inc
aaa
out
loopne
add
push
adc
mov
(bad)
xor
scas
push
mov
loope
test
pop
test
int
push
mov
movs
int3
mov
cmp
jl
inc
mov
add
in
test
das
repnz
fisttp
pop
adc
mov
ret
jbe
adc
xor
xor
aad
xchg
pop
add
jbe
adc
scas
das
inc
imul
push
xchg
addr16
imul
ficom
idiv
imul
pusha
imul
fmul
push
mov
jmp
cmps
jmp
add
push
es
or
mov
icebp
sti
shr
dec
xor
rcr
aad
cmp
mov
es
mov
movs
mov
retf
(bad)
leave
inc
scas
jecxz
sbb
(bad)
je
dec
in
dec
sub
adc
sub
pop
mov
in
push
sub
out
sub
adc
lahf
shl
popa
add
adc
lods
jecxz
loop
dec
cs
and
mov
mov
enter
inc
dec
cmp
test
jecxz
pop
loope
mov
pop
rcr
ja
or
(bad)
sbb
movs
fwait
je
jmp
das
imul
add
jp
cmp
adc
call
adc
aaa
out
loope
sbb
in
pusha
js
add
xchg
scas
enter
jmp
inc
and
gs
aam
push
and
mov
sbb
push
mov
ss
mov
add
or
inc
mov
jp
xor
pop
test
in
cld
add
inc
clc
push
aaa
retf
push
test
sub
(bad)
out
sub
out
ficomp
inc
out
popa
lock
leave
cs
add
loope
push
adc
add
ss
xchg
retf
ror
(bad)
fist
je
mov
repz
jp
addr16
call
sbb
xor
icebp
dec
imul
scas
jge
adc
aam
call
inc
mov
daa
ins
leave
popa
adc
outs
ja
popf
inc
outs
add
daa
aaa
out
sahf
nop
add
adc
outs
cmps
aaa
add
sar
jle
shl
out
push
cld
cmp
or
ja
xchg
jbe
xor
enter
stos
shr
aam
add
fldenv
inc
and
pop
pusha
loope
adc
add
int3
daa
je
xchg
jle
daa
sbb
call
add
repz
mov
sub
mov
pop
xor
adc
xchg
inc
or
aaa
mov
sbb
shl
xchg
adc
and
mov
and
data16
cmp
leave
mov
icebp
lods
xchg
adc
js
push
sbb
push
jnp
test
mov
jle
out
and
(bad)
fnstsw
inc
js
and
push
lods
pop
xchg
mov
pusha
test
or
or
jmp
sub
push
push
jo
outs
push
push
xchg
lock
sub
add
xchg
jle
gs
fsub
mov
out
adc
jne
cmp
iret
cmc
adc
aas
adc
out
xchg
gs
bound
hlt
sbb
loopne
scas
xchg
or
push
mov
in
leave
and
xor
push
and
cmp
hlt
daa
add
mov
lods
mov
aam
xchg
test
cmp
mov
push
ret
dec
push
mov
outs
lock
inc
pushf
ret
loope
dec
xchg
fdivr
ret
loop
jb
(bad)
sub
xor
nop
inc
dec
and
cmps
pop
(bad)
movs
inc
repz
cmp
xchg
repnz
cmp
mov
clc
cmps
push
pop
pop
add
(bad)
sbb
and
mov
or
stc
rcl
sahf
sub
out
sbb
jnp
sub
cld
cdq
call
(bad)
dec
outs
pop
fsubr
shl
in
gs
xor
in
(bad)
sub
inc
aad
fist
or
into
mov
lods
adc
in
sub
fisttp
mov
loop
or
sub
push
push
cmp
mov
movs
mov
cld
clc
aaa
push
pop
push
test
mov
push
neg
inc
push
sbb
or
mov
cs
cld
out
leave
mov
ins
adc
ds
xchg
cwde
outs
data16
arpl
lahf
xchg
mov
inc
das
int
movs
mov
je
addr16
inc
adc
clc
jmp
repz
sbb
jnp
cmp
ret
ret
or
sbb
ds
psllw
call
rol
xor
sub
lds
mov
mov
aas
sbb
call
jg
gs
jg
and
das
rcr
fsubr
inc
fwait
mov
test
xor
pusha
xchg
retf
dec
call
mov
and
retf
ret
icebp
jle
xchg
popa
jno
sub
mov
stos
and
jl
and
mov
xchg
pop
and
adc
or
popa
test
jg
cmp
adc
outs
les
push
sahf
mov
and
mov
jp
xor
dec
inc
gs
push
mov
call
xchg
ret
jb
ret
xor
push
xchg
movs
xlat
stc
sub
push
push
sub
push
(bad)
shl
sbb
jmp
ins
sub
iret
mov
adc
int3
js
cmps
and
outs
mov
rol
pop
aam
add
movs
mov
ds
xor
sti
jp
or
inc
jp
jo
jne
fisttp
loopne
dec
push
xlat
out
jmp
cmp
jle
out
cs
je
(bad)
scas
fs
push
adc
jno
dec
movs
or
push
fmul
fwait
js
add
(bad)
push
add
jle
pop
or
aas
jmpw
add
(bad)
push
push
or
inc
fs
gs
push
loopne
xor
xchg
inc
popa
call
mov
rep
sahf
fs
xchg
mov
in
adc
sbb
mov
and
sub
mov
faddp
cwde
in
and
mov
jle
sub
push
ds
shr
lds
neg
cmp
aaa
imul
enter
fidiv
xchg
(bad)
mov
pop
aam
ficomp
mov
or
lahf
stos
ret
mov
adc
xchg
dec
in
jecxz
jne
outs
ins
and
dec
clc
imul
xchg
mov
(bad)
adc
push
lock
push
in
popa
sar
cli
pushf
neg
pop
cmp
ja
cmp
out
and
aad
push
std
mov
mov
mov
aas
call
loopne
sbb
sub
rol
stos
dec
test
mov
test
inc
jge
icebp
or
push
sbb
add
inc
mov
jbe
sub
xchg
std
fadd
and
mov
cmc
dec
inc
test
sbb
pusha
xor
push
xchg
and
xchg
and
pminsw
int3
pop
rcr
or
loope
and
pop
xlat
inc
out
dec
movs
adc
es
mov
ret
jne
ins
je
lods
out
iret
dec
dec
push
lea
das
enter
scas
sub
(bad)
aaa
cwde
fadd
hlt
outs
sub
jle
sbb
mov
sbb
ror
out
icebp
outs
sbb
test
sub
test
xor
lods
or
mov
push
mov
call
out
fistp
push
jle
mov
mov
cmps
mov
cdq
lds
add
fwait
xchg
push
scas
cwde
data16
jae
ins
ret
sub
inc
dec
sar
pusha
xor
cdq
outs
pushf
add
sub
fidivr
fdivrp
dec
loope
(bad)
jmp
xor
aam
dec
sub
sbb
int3
and
mov
mov
div
cmp
loop
pop
(bad)
lods
cmp
lods
je
mov
aas
cmc
stc
xor
jnp
adc
xchg
mov
dec
jns
pop
int
and
sbb
add
xor
adc
in
repz
mov
test
or
jmp
fs
aaa
pop
mov
xor
lods
es
aam
inc
out
out
rcr
not
leave
not
or
(bad)
loop
test
push
hlt
shr
loop
loopne
shr
fnsave
adc
pop
sub
push
addr16
jnp
imul
dec
sbb
dec
outs
adc
push
mov
sub
les
mov
adc
and
and
test
cmc
mov
or
cmp
or
movs
sti
hlt
and
xchg
out
imul
ror
sub
outs
xchg
pop
mov
retf
mov
push
fldcw
out
arpl
fdiv
adc
icebp
cmc
sub
sbb
lock
and
jge
add
add
and
shr
sti
out
nop
jecxz
inc
mov
xchg
out
jns
int3
adc
mov
je
mov
repnz
ins
jae
add
lods
jl
and
(bad)
sub
enter
xchg
sti
mov
sbb
mov
nop
inc
add
test
push
xchg
or
cli
cmp
xor
mov
inc
xor
sahf
scas
push
cmps
sub
dec
loop
mov
sti
lods
and
rcr
add
push
in
rcr
(bad)
mov
imul
pop
dec
(bad)
(bad)
xchg
pop
ds
fidiv
push
mov
xor
pop
add
adc
xor
outs
pop
add
push
out
je
sub
clc
push
loop
pop
inc
je
lods
shr
aad
add
loopne
mov
adc
or
dec
and
cmp
subps
sub
pop
out
xchg
mov
add
(bad)
xor
in
shr
add
fldl2e
mov
xchg
mov
lahf
xor
enter
mov
rcl
ficom
jo
je
cmp
mov
jb
gs
(bad)
(bad)
movs
adc
test
sbb
xchg
es
mov
jl
sub
outs
mov
dec
jns
lds
out
cmp
push
lock
jne
cmc
pop
cld
ss
rol
xlat
aas
shl
xchg
jb
xchg
loopne
or
icebp
(bad)
les
xchg
pusha
outs
xlat
xor
sub
push
or
or
sub
shl
adc
cmp
push
sbb
sub
push
idiv
xor
movs
bound
xchg
loope
ret
std
inc
and
add
(bad)
sbb
outs
mov
and
std
adc
popf
mov
sahf
clc
jb
leave
jbe
std
not
dec
pop
jbe
sar
cmp
pushf
xor
call
add
(bad)
ins
out
(bad)
mov
add
out
fist
add
xchg
jne
mov
loopne
jno
jl
dec
add
out
(bad)
fst
adc
jge
jge
pop
(bad)
jle
sti
retfw
pop
push
(bad)
jmp
data16
mov
push
test
mov
sub
rcr
das
loopne
xchg
fwait
ja
pop
jmp
adc
(bad)
(bad)
gs
adc
adc
dec
aam
das
in
add
lea
imul
stc
in
aaa
pop
or
fnstenv
mov
mov
xlat
push
enter
xchg
dec
and
sub
ret
jl
nop
int
push
ja
push
xchg
adc
inc
mov
ja
shl
std
add
or
push
mov
add
out
mov
addr16
mov
jnp
test
stc
lea
ins
fwait
and
push
cmp
iret
scas
ins
push
mov
dec
jnp
pop
sbb
(bad)
jbe
cmp
mov
xor
lods
test
ds
test
in
and
mov
repz
test
adc
cdq
pop
inc
rol
getsec
inc
inc
popa
cmps
loope
ret
sbb
repz
mov
call
cli
loopne
dec
mov
(bad)
sbb
fcom
mov
xor
dec
inc
or
(bad)
aad
adc
and
push
aaa
fs
xor
sbb
into
daa
mov
sub
js
sub
in
adc
pop
and
and
call
fisubr
jge
cmp
leave
mov
xchg
out
or
xchg
mov
cmp
mov
push
pop
xor
fnsave
mov
mov
cmp
mov
or
xchg
sub
cmps
jmp
repz
push
push
push
and
xor
xchg
rcl
sbb
lahf
int
and
gs
(bad)
mov
movs
jb
movs
stos
cs
outs
and
pop
mov
xor
ficom
mov
je
mov
xor
repnz
cs
movs
mov
inc
inc
out
sub
xor
mov
popf
sahf
xchg
add
xlat
add
jnp
inc
pop
inc
mov
or
rcl
or
mov
jbe
lea
push
je
sub
xchg
mov
sub
pop
test
bswap
jle
push
test
jmp
std
add
inc
int3
pushf
test
push
rol
loopne
in
sti
das
test
mov
in
sbb
pop
aaa
xchg
paddw
xor
push
mov
or
cmc
retf
movs
cmp
daa
xchg
je
pop
imul
pusha
pop
sahf
mov
dec
mov
fstp
mov
mov
mov
or
fnsave
ret
jbe
cld
stc
sub
out
sub
mov
ds
pop
and
popa
jmp
ss
stc
fst
sbb
cdq
out
cmps
in
mov
jo
fnstcw
imul
xor
sub
mov
inc
fistp
test
loope
cmc
add
cmc
push
pop
xchg
and
xchg
pop
nop
jb
(bad)
jl
call
jno
sbb
xor
cmp
mov
and
dec
aad
and
not
xchg
jno
jle
inc
push
pop
xor
or
ins
pop
xchg
push
iret
fcom
rcl
aam
inc
xchg
and
fst
xchg
cmps
out
movs
mov
ins
shr
ror
stc
lods
push
fsub
test
mov
cmp
mov
pop
jbe
push
xchg
cmp
or
cmp
sub
repz
jo
arpl
jmp
or
pop
stos
fdiv
xchg
test
mov
repz
aaa
in
mov
lods
pop
repnz
mov
dec
xchg
fucomip
push
in
retf
in
jnp
inc
enter
cmc
(bad)
mov
addr16
icebp
jns
pop
add
les
pop
jmp
push
call
xchg
inc
mov
loope
in
or
dec
sub
in
cwde
and
jo
adc
pop
add
mov
(bad)
lds
inc
pop
xchg
jle
adc
lahf
pop
pushf
adc
scas
xchg
ins
mov
jbe
and
inc
cmp
in
out
mov
fsubr
xchg
cmp
test
fs
xchg
arpl
cmp
xlat
ds
adc
mov
mov
cmp
lahf
bound
in
mov
dec
fisttp
sub
lahf
mov
xor
xchg
fwait
jbe
jns
daa
mov
adc
scas
rcl
and
mov
pop
xor
fs
int
in
dec
xchg
sub
ret
push
and
fs
fdivr
scas
mov
shl
ret
xchg
xor
adc
jnp
adc
xor
sbb
mov
aas
or
inc
or
xor
retf
push
mov
pop
sbb
pop
xor
mov
adc
movs
dec
pusha
adc
jl
(bad)
fs
add
dec
ret
jae
mov
movs
mov
shl
ins
xchg
jbe
pop
clc
int3
xor
ret
add
sti
jg
push
mov
mul
hlt
cmp
loopne
stos
daa
rcl
mov
mov
jge
adc
add
jns
cmp
sbb
(bad)
(bad)
sar
pop
jmp
mov
es
fldcw
jne
xchg
cmp
fwait
push
sti
outs
in
out
std
sub
pop
inc
sub
mov
add
jecxz
mov
in
loope
pop
pop
or
popf
sbb
cmc
mov
pop
enter
xchg
fist
mov
inc
and
or
test
push
lds
je
adc
cmp
jnp
repz
sub
shl
push
fistp
adc
call
addr16
pushf
xchg
jno
pop
cmc
dec
jnp
fcomp
mov
scas
push
ins
aas
add
inc
js
adc
xchg
in
inc
xor
retf
leave
mov
mov
dec
js
xchg
inc
sbb
in
cmps
or
test
scas
cmp
fnsetpm(287
xor
jns
mov
sbb
or
lods
call
in
ds
xor
dec
jnp
pop
call
adc
add
daa
cmc
xchg
fs
call
pop
lods
ret
sub
xor
popa
xchg
scas
js
push
sysret
jecxz
sub
shl
jae
iret
xchg
cmp
sti
or
test
rol
add
aam
clc
adc
mov
sub
push
pop
dec
jno
jbe
xor
sub
mov
xchg
call
inc
and
mov
call
mov
dec
lock
jecxz
cld
out
add
push
mov
cmps
jecxz
dec
fs
fwait
dec
mov
cld
sbb
cmc
push
sbb
or
int
xchg
aad
pushf
pusha
xor
and
dec
or
cli
fistp
cmp
loopne
stos
sbb
rol
pop
push
out
lods
ds
mov
lds
mov
outs
mov
push
sub
mov
and
cmp
xchg
in
or
in
fwait
mov
inc
pop
sbb
aad
fwait
ret
mov
mov
jle
into
test
pusha
push
ret
clc
fs
push
or
xchg
fldl2t
jl
jle
mov
stos
mov
sub
sbb
fwait
jecxz
push
ds
dec
push
in
sbb
xchg
jmp
mov
sahf
fwait
mov
ds
std
iret
(bad)
fsubr
clc
das
jle
icebp
shl
ret
ss
jo
xor
sub
or
adc
push
add
mov
popa
xchg
(bad)
ds
cld
leave
add
(bad)
mov
mov
sbb
mov
mov
dec
pop
mov
add
sar
pop
jne
cmps
add
sar
xchg
and
pop
(bad)
adc
mov
jmp
jne
in
adc
pop
add
jnp
sbb
aam
mov
ficomp
adc
cmp
pop
push
js
or
or
iret
push
xlat
rol
fiadd
pop
call
stos
addr16
inc
es
das
mov
jno
jge
xchg
dec
iret
cmp
adc
ss
cld
dec
xchg
ins
mov
movs
pusha
xor
into
add
or
and
(bad)
jae
and
sbb
and
(bad)
sub
sar
outs
fbld
(bad)
xor
scas
mov
pop
push
xor
pop
stos
mov
gs
in
push
imul
(bad)
and
inc
stc
mov
add
push
jl
inc
push
mov
sub
push
dec
jmp
pop
dec
add
cmp
hlt
out
jo
enter
cmp
in
(bad)
shr
outs
cwde
inc
dec
or
ins
pop
enter
cdq
and
mov
mov
lods
push
into
inc
jmp
jecxz
(bad)
or
push
mov
mov
xor
fimul
in
sti
rol
and
mov
cwde
(bad)
neg
mov
cdq
jae
xor
pusha
mov
fs
enter
xchg
hlt
je
mov
inc
adc
ss
fist
pop
(bad)
sbb
adc
or
mov
xlat
pop
and
push
repz
push
fstp
fwait
cwde
mov
aaa
std
xchg
mov
sbb
daa
jg
dec
cli
rol
dec
adc
lahf
xor
leave
xor
fisub
jo
inc
mov
data16
xlat
mov
mov
inc
push
push
mov
mov
xchg
enter
xor
push
repnz
sti
sub
pop
mov
mov
loopne
bound
clc
stos
retf
retf
push
push
mov
inc
fs
mov
test
adc
(bad)
push
inc
in
ins
xchg
or
xchg
mov
rcr
test
movs
lock
int3
(bad)
lea
(bad)
out
jmp
gs
and
(bad)
push
mov
mov
daa
xor
dec
or
xor
lods
adc
mov
sub
inc
add
outs
mov
dec
(bad)
cli
fs
call
xor
in
cmp
mov
push
mov
xor
and
test
stos
(bad)
(bad)
and
mov
repz
pop
pop
adc
mov
movs
cmps
pop
shr
loop
inc
addr16
sbb
cdq
mov
jmp
push
fsubrp
or
xchg
pop
mov
jl
pop
scas
adc
xchg
sbb
jp
cmp
sbb
leave
popa
mov
gs
mov
xchg
jne
arpl
fwait
out
ret
inc
jmp
lds
mov
push
mov
xchg
push
std
mov
shr
pcmpeqd
imul
fs
adc
xchg
(bad)
xlat
aas
stos
das
jle
ja
(bad)
xor
add
inc
jnp
popf
lea
mov
test
popa
jae
iret
or
call
pop
mov
push
int
(bad)
cmp
out
fild
cs
ja
push
add
adc
icebp
pusha
inc
std
shl
cdq
cdq
and
pusha
push
or
(bad)
jmp
xor
outs
aaa
mov
adc
dec
fmul
or
mov
mov
pusha
mov
lods
mov
int
or
fiadd
push
adc
shl
cmp
(bad)
outs
and
enter
les
in
ja
mov
in
cwde
pop
push
inc
lock
xor
push
mov
xor
mov
add
mov
mov
std
int
cmp
jle
xchg
ins
je
cmp
sub
jnp
jmp
mov
push
jge
adc
xor
daa
idiv
test
mov
(bad)
mov
sub
inc
mov
xor
jne
inc
lods
add
dec
stos
ins
dec
cwde
(bad)
lahf
mov
stos
int
xor
pop
mov
btr
iret
mov
fstp
(bad)
mov
rcr
cld
fbstp
cmc
push
outs
addr16
push
push
push
sbb
push
scas
pop
xchg
mov
lock
mov
arpl
pop
and
mov
mov
mov
clc
dec
mov
jb
mov
iret
inc
shl
imul
pop
pop
jmp
xchg
dec
cmps
jo
into
push
retf
gs
ror
and
test
and
test
call
sbb
pop
dec
out
ins
or
into
fmul
inc
jl
mov
jecxz
mov
mov
stos
and
pop
mov
dec
popf
push
dec
into
inc
xchg
rol
jno
js
call
int3
adc
lea
jp
mov
lods
xor
xor
es
test
ficom
dec
pushf
xchg
in
loop
out
nop
test
fsub
xor
or
and
xchg
xor
or
push
fwait
xchg
push
addr16
clc
test
fcmove
pavgw
cmp
push
lahf
imul
aas
out
dec
sub
scas
fisttp
sub
jg
push
into
dec
cmp
pop
outs
imul
call
adc
or
add
or
pop
fcom
push
inc
mov
push
ja
adc
jo
inc
ja
shl
jnp
imul
cdq
sahf
mov
in
aad
dec
loopne
xchg
imul
int3
mov
pop
inc
and
sbb
rol
sub
jg
(bad)
sub
or
push
fsubr
mov
cmp
xchg
test
imul
jno
aad
fdivr
add
pop
(bad)
imul
pop
sub
xchg
push
std
jmp
xchg
je
xor
out
add
call
lds
addr16
mov
cmp
dec
xchg
jmp
shl
stos
mov
stc
call
sbb
fisttp
clc
aam
ret
int3
dec
scas
daa
out
fistp
imul
pop
dec
out
inc
(bad)
adc
pop
jecxz
dec
retf
rol
mov
mov
mov
and
jb
mov
sbb
and
(bad)
(bad)
xor
sbb
cmp
mov
cmc
or
push
ret
sub
jge
aaa
ss
xchg
popf
xchg
cs
lock
xor
mov
sbb
loopne
push
shl
lods
jmp
out
adc
add
xchg
adc
test
mov
shl
add
je
in
lea
mov
or
add
jo
retf
out
inc
(bad)
jbe
dec
or
add
mov
aas
out
out
popf
push
dec
aad
stos
xor
cmp
(bad)
adc
pusha
in
std
dec
lds
jmp
xchg
stos
or
sbb
jmp
adc
or
mov
cmp
mov
lods
rcr
call
sbb
or
sbb
out
dec
aad
xor
test
sbb
cmp
das
push
cmps
cmp
and
adc
popa
data16
ins
iret
sub
mov
adc
mov
ja
in
jmp
dec
lock
(bad)
push
mov
ss
sub
add
rcr
push
pop
out
push
jmp
pop
add
sub
cmp
add
push
pushf
fdiv
fdiv
(bad)
icebp
xor
push
jg
pop
pop
aaa
cmp
mov
adc
sbb
scas
aam
add
loop
inc
icebp
(bad)
mov
jge
inc
sub
jo
enterw
clc
arpl
mov
cmp
lahf
rcl
cmp
inc
in
push
jb
mov
hlt
(bad)
jne
xor
dec
pop
repz
sahf
std
or
fbld
out
mov
inc
push
cmp
lea
shufps
imul
loope
add
adc
mov
and
packssdw
ins
cmp
call
pop
mov
sbb
inc
inc
pop
jle
add
xor
ins
mov
rcr
inc
push
cs
test
mov
or
xor
rcl
es
xchg
add
(bad)
push
mov
lods
aaa
and
xor
lahf
les
jno
fsubr
scas
out
dec
dec
fbstp
ja
sar
xor
pop
xchg
mov
dec
cmps
sahf
pop
xchg
xchg
and
push
in
call
out
or
jnp
pop
hlt
sbb
xchg
out
ja
and
das
and
dec
mov
mov
xchg
(bad)
ja
jmp
das
int
rcr
(bad)
dec
dec
int3
stos
add
outs
lods
dec
push
jne
shl
or
cmp
call
pop
js
jl
inc
sub
test
dec
xchg
loope
adc
in
clc
pop
pop
or
mov
dec
or
mov
aad
mov
and
les
sbb
jnp
rcr
(bad)
dec
mov
or
sub
cmps
sahf
dec
mov
(bad)
mov
loop
je
jae
std
mov
(bad)
int3
fistp
inc
inc
push
sbb
xchg
test
xchg
sub
lods
aaa
push
cmp
jg
movs
jge
dec
(bad)
jmp
dec
pop
inc
jp
sbb
arpl
lea
leave
xor
out
adc
inc
cmc
nop
aam
sar
and
adc
in
cmps
mov
cmp
loope
(bad)
out
movs
add
add
movs
and
in
or
cs
jns
aas
jg
mov
mov
push
popa
inc
and
dec
(bad)
or
fld
or
icebp
inc
xor
daa
shl
mov
inc
sbb
add
pop
push
(bad)
push
push
push
les
in
cmp
in
inc
popf
imul
add
pushf
mov
(bad)
scas
adc
sbb
arpl
lods
cmp
inc
add
(bad)
pop
or
mov
pop
(bad)
cdq
cdq
fild
scas
mov
sbb
jno
loopne
sub
outs
psrld
pop
addr16
cmps
push
cmp
sub
pushf
mov
push
jp
cmp
lea
es
jne
add
rol
mov
ret
test
js
aaa
lods
cmps
push
sbb
shr
jl
lods
je
(bad)
ret
push
in
mov
adc
xchg
js
xor
in
push
or
in
out
jl
sbb
jnp
mov
out
into
or
lahf
je
adc
mov
adc
movs
and
ss
(bad)
fistp
adc
ins
imul
outs
dec
ins
cmps
jb
xor
sbb
cmp
add
xchg
pop
repnz
lock
xchg
push
retf
xchg
loopne
pop
bound
and
xchg
cs
or
(bad)
push
stos
fcomi
fiadd
imul
repz
dec
mov
je
lods
push
sbb
mov
sbb
pop
rcr
cmp
mov
xor
imul
ins
push
sbb
sub
test
fstp
bound
xor
ret
mov
or
in
jmp
or
cmps
adc
int
in
stos
shr
inc
cs
dec
sub
mov
mov
pop
les
jne
sti
rcr
add
jecxz
shr
scas
sti
leave
sbb
sub
or
shr
js
aaa
sub
movs
ret
mov
dec
sub
sub
sbb
push
es
shl
xor
cmp
push
stos
popa
in
mov
dec
mov
icebp
fidivr
into
adc
ja
push
mov
dec
imul
inc
sub
inc
mov
push
outs
int
push
pop
out
mov
(bad)
aam
xchg
scas
test
mov
outs
in
addr16
in
gs
add
bound
xchg
and
or
push
or
je
xor
cmps
sbb
mov
ds
ja
xchg
mov
bnd
dec
push
sbb
and
test
lahf
add
(bad)
cmc
adc
xchg
xor
or
add
lods
jmp
jp
add
jmp
addr16
retf
adc
cmp
fisttp
fmul
cli
push
mov
int3
out
cmc
mov
fcmove
dec
and
push
mov
(bad)
cld
rol
pop
cmp
nop
push
mov
sub
test
sti
cmp
cli
dec
cdq
imul
cmp
leave
push
pop
and
call
mov
ins
adc
sbb
mov
sbb
mov
push
call
ret
inc
and
mov
jo
push
pop
mov
sbb
inc
inc
movs
pop
jmp
cmp
mov
xor
adc
jb
aaa
(bad)
in
fwait
mov
jae
mov
mov
retf
cmp
jg
sahf
jmp
bound
mov
dec
stc
cmps
enter
cmp
mov
jnp
in
mov
sub
movs
mov
adc
mov
pop
ja
push
std
sbb
cmc
and
mov
out
dec
out
jno
ficomp
jns
xchg
call
push
pusha
mov
jp
xor
sub
sahf
push
ret
bound
cwde
mov
adc
mov
loope
add
sbb
xchg
fs
cmp
ret
ds
jbe
jle
pushf
in
push
fcomi
push
clc
dec
mov
int3
(bad)
jl
lods
(bad)
outs
in
vpshufd
sbb
add
pop
dec
jmp
sub
ret
inc
mov
(bad)
loope
jl
(bad)
xor
leave
push
bound
pop
sub
aad
popa
test
fwait
pop
jmp
sahf
sub
sbb
test
ror
lods
pop
mov
leave
fild
sub
xchg
cs
fsub
cmp
mov
dec
cwde
fsubr
mov
pop
ficom
cmc
shr
(bad)
sbb
or
adc
cmps
lds
xchg
adc
jmp
aas
shl
mov
shl
(bad)
xchg
mov
inc
cmp
push
and
scas
dec
inc
ror
jns
test
xchg
int3
sbb
jae
inc
jbe
sub
jge
jmp
rcl
(bad)
rol
ja
jnp
sti
(bad)
adc
retf
push
rol
fwait
pop
mov
adc
jl
loopne
arpl
xchg
xchg
repnz
adc
out
(bad)
das
jp
or
adc
arpl
pop
cmp
fs
inc
cmp
test
retf
in
mov
das
pop
dec
arpl
adc
imul
aas
and
out
sub
pusha
and
inc
repnz
and
cmp
ds
mov
pop
mov
sub
mov
arpl
dec
loopne
xor
or
test
movs
fld
dec
in
adc
sub
inc
or
jmp
mov
sbb
das
mov
jae
inc
ficom
jl
mov
ret
mov
out
(bad)
mov
adc
lahf
push
inc
mov
jne
sub
mov
pop
inc
pop
add
mov
fcmovnbe
adc
mov
sub
mov
or
jmp
sar
repnz
movs
mov
fistp
repnz
mov
inc
sub
not
lods
adc
adc
adc
mov
mov
cmp
push
adc
jnp
add
shr
push
jbe
gs
inc
add
retf
add
add
xchg
jecxz
in
pop
loope
fadd
fcom
outs
inc
cvttps2pi
xor
sub
xchg
or
adc
fistp
cwde
dec
mov
xchg
in
cmp
or
(bad)
in
cmp
pushf
dec
stos
push
inc
jnp
out
mov
fnstenv
sti
mul
dec
out
sub
bound
mov
mov
push
dec
fistp
daa
pop
rol
lods
mov
loopne
dec
add
idiv
dec
lahf
or
xchg
(bad)
add
mov
dec
jg
clc
cld
mov
sahf
lds
push
(bad)
sbb
stos
or
fistp
mov
stos
mov
adc
sbb
sahf
mov
retf
daa
movs
and
dec
aam
jl
push
dec
or
and
loope
xchg
mov
xor
shl
in
mov
loopne
ds
ds
jb
sbb
xchg
push
push
inc
push
aaa
out
lods
mov
outs
loope
out
mov
push
hlt
push
ins
fist
inc
adc
in
mov
call
push
jp
fwait
jg
ret
leave
js
sar
hlt
sub
ret
call
push
es
mov
in
push
call
stc
in
sar
dec
push
call
mov
or
add
outs
popf
sub
out
mov
fwait
out
test
test
and
cld
push
mov
sub
fcmovbe
cmp
je
and
movs
test
ins
shl
sub
adc
mov
fcomp
cdq
mov
popa
dec
sub
and
sub
mov
sbb
in
jne
or
mov
(bad)
cmps
scas
xchg
or
ins
int
sar
pop
xor
sub
sbb
add
jne
sub
clc
dec
in
xchg
mov
or
test
enter
mov
shr
pop
pusha
pop
jle
mov
xchg
push
or
add
adc
mov
cs
jp
enter
lods
and
mov
xchg
in
cmp
call
repz
popa
fist
mov
(bad)
pop
cmp
mov
scas
ret
fidivr
repnz
xchg
pop
cmp
stc
sbb
test
pop
mov
scas
ret
aaa
jno
mov
jg
mov
aaa
sbb
sub
pop
outs
in
in
dec
ret
adc
jbe
ss
sub
pusha
shl
cli
sub
dec
pop
loope
fbld
xlat
mov
mov
dec
inc
test
sub
lea
(bad)
(bad)
sub
loopne
sar
mov
adc
lds
dec
mov
xchg
addr16
bound
cld
pop
inc
scas
ins
popa
add
icebp
lods
sbb
es
ret
mov
push
xchg
or
retf
push
xchg
aas
add
jmp
mov
movs
dec
out
jp
jp
scas
sbb
ss
stc
jae
xchg
repnz
push
ins
mov
mov
mov
inc
and
outs
rol
(bad)
mov
cmp
clc
leave
mov
mov
or
call
sbb
fdiv
xor
pop
fs
out
dec
sahf
outs
imul
(bad)
int3
shl
push
mov
xor
cmp
lahf
in
hlt
dec
or
sub
outs
add
sub
xchg
cdq
test
xlat
dec
fmulp
int
ins
lods
jp
push
sbb
aaa
sbb
iret
fiadd
push
or
(bad)
adc
push
mov
pop
das
sub
or
test
pop
mov
test
imul
out
lahf
retf
jl
inc
es
mov
out
test
out
fisub
ins
dec
adc
add
loop
mov
add
rcr
xor
mov
push
jns
or
shl
retf
pop
cld
sbb
(bad)
movs
pop
sbb
cmp
adc
lods
add
daa
xchg
movs
pop
mov
int3
xchg
inc
(bad)
out
mov
or
mov
mov
mov
inc
mov
les
out
add
pop
div
loopne
add
jmp
shr
mov
loopne
test
stos
or
and
in
lods
mov
test
(bad)
sbb
fsubr
mov
push
jp
(bad)
enter
stos
(bad)
mov
lea
shl
out
lahf
aad
pop
xchg
stos
sti
cmc
test
(bad)
cmp
and
push
push
cli
xchg
rcr
jp
cmp
push
adc
test
cmp
fs
dec
push
add
daa
inc
sbb
test
xchg
stc
xchg
jnp
and
xor
mov
or
retf
mov
inc
in
scas
mov
ins
movs
in
test
pmulhuw
xor
sbb
std
sub
add
cmp
stc
(bad)
loop
or
lahf
xchg
add
nop
movlhps
popf
jecxz
mov
jle
sub
in
xchg
inc
in
hlt
xor
stos
or
shl
cmps
ins
xor
stc
jmp
lods
dec
jnp
dec
mov
add
mov
mov
push
(bad)
dec
push
retf
jmp
ins
gs
cwde
(bad)
jl
retf
pop
xor
sub
frstor
inc
ds
fnstcw
aam
dec
and
ret
mov
or
repz
pop
outs
mov
inc
out
outs
jmp
xchg
rol
std
fistp
jmp
lea
retf
xchg
jg
jb
into
sub
xor
test
mov
cmp
cmp
and
pushf
aam
jmp
outs
jbe
dec
stos
das
cmp
jge
sbb
cli
adc
sub
xchg
sub
rcr
retf
dec
sub
sbb
or
mov
adc
mov
fidiv
(bad)
stc
lds
es
jo
and
push
and
xor
sar
movs
xchg
xchg
hlt
sub
sub
fisub
add
inc
push
jge
xchg
mov
inc
int
mov
mov
out
adc
ds
pushf
(bad)
shl
test
les
scas
mov
int3
in
pop
mov
pop
mov
dec
les
and
xchg
xor
mov
xchg
cmc
mov
cmc
adc
cwde
rcr
sbb
in
neg
adc
mov
sbb
inc
add
or
test
push
test
xchg
mov
jo
mov
imul
jbe
adc
add
push
iret
int3
xor
dec
mov
stos
xchg
mov
jo
mov
dec
add
push
jnp
in
ja
jl
test
jns
in
inc
nop
pop
nop
aas
ss
xor
push
jmp
rcl
sub
clc
jae
in
add
loope
pop
and
dec
repnz
pop
mov
inc
cmps
call
aas
cmps
je
push
hlt
aas
xor
pop
pop
stos
push
jae
bound
dec
mov
mov
ret
imul
cmp
xchg
cmps
xor
mov
xlat
enter
or
idiv
popa
cmp
adc
mov
cld
sub
test
outs
nop
add
mov
sti
daa
ret
test
mov
add
pop
inc
aaa
clc
mov
mov
and
bound
fild
sub
dec
jmp
mov
pop
sbb
bound
xchg
push
push
outs
sar
shl
mov
into
cmp
lock
stc
and
dec
lock
ret
mov
popf
pusha
arpl
add
mov
fisubr
stc
pusha
gs
push
xchg
inc
mov
or
fcom
xor
stos
jo
or
popf
mov
test
and
outs
mov
hlt
jmp
rcr
ror
jb
(bad)
imul
clc
mov
out
add
fild
js
inc
or
popa
sub
cmc
fs
jne
xor
inc
(bad)
xor
xor
aaa
stos
mov
sbb
mov
mov
cli
mov
ss
ja
xlat
jno
push
sub
pop
arpl
daa
and
data16
cmp
xchg
mov
jno
push
xor
loope
out
imul
cmp
sbb
jnp
mov
sbb
sub
pop
push
mov
dec
jecxz
in
rcr
das
inc
out
add
cmp
mov
fld
mov
ja
out
push
inc
mov
push
dec
scas
rcr
mov
or
shl
dec
push
push
lock
dec
(bad)
loopne
lahf
cs
jo
push
cli
mov
faddp
dec
in
fist
cmp
pop
xchg
jmp
dec
test
jb
cmp
and
popf
xor
mov
mov
xchg
or
mov
sbb
(bad)
mov
in
mov
into
adc
cmp
test
or
je
push
or
call
or
out
or
pop
movs
enter
mov
pop
stos
pop
and
bnd
sub
push
mov
cmps
mov
pop
sub
mov
push
in
sysenter
push
lods
xchg
ins
aaa
mov
lahf
lahf
push
sub
imul
daa
(bad)
imul
sub
xor
or
mov
or
fdivr
xlat
in
retf
stos
xor
xchg
mov
or
mov
mov
ret
pusha
mov
iret
jnp
xchg
bound
pop
push
push
dec
mov
sbb
mov
add
fst
push
cmps
pushf
dec
jno
enter
and
add
(bad)
(bad)
jo
arpl
not
test
and
and
(bad)
mov
jmp
out
(bad)
test
out
or
mov
ror
or
jecxz
fild
push
mov
imul
mov
jbe
pop
mov
add
or
stos
jl
in
leave
(bad)
mov
mov
stos
test
sbb
mov
in
xor
push
mov
mov
mov
push
test
lea
sbb
shl
adc
mov
inc
test
pop
test
dec
js
int3
pop
add
pop
sbb
mov
pop
cmps
sub
stos
ja
in
push
retf
push
(bad)
fdiv
add
(bad)
adc
cdq
pop
aaa
sub
cld
pop
push
sbb
loop
sub
(bad)
add
ds
push
mov
iret
push
jecxz
dec
xor
data16
or
cmps
data16
rol
and
cvtps2pd
inc
pusha
or
xchg
cmps
mul
push
sbb
sub
or
data16
jle
pop
jge
mov
add
xchg
sti
push
xchg
getsec
jl
(bad)
ss
fiadd
pop
mov
movs
fistp
jnp
or
addr16
leave
push
xchg
pop
xor
in
iret
loop
xchg
loopne
iret
iret
addr16
aam
pop
ret
jg
jb
jp
rcl
lods
xor
and
repz
rcl
popa
dec
repnz
lahf
cs
cld
mov
xchg
push
add
retf
pushf
xor
sub
(bad)
js
pop
pushf
es
icebp
sub
movs
icebp
adc
cli
or
out
or
mov
aas
cmp
out
or
add
mov
xor
xor
pop
inc
in
and
test
or
adc
div
rcl
test
adc
es
shr
jge
shr
test
pushf
call
arpl
xchg
jl
fldenv
xchg
sub
ret
out
popf
ins
mov
mov
mov
(bad)
cmp
sub
jae
sbb
mov
and
and
mov
imul
lods
xor
adc
mov
ss
repz
test
add
jl
(bad)
dec
loop
fld
test
stos
aad
mov
ins
in
add
js
lea
and
mov
add
loop
in
push
sub
test
fcmovb
test
jmp
lahf
loope
or
movs
lahf
into
clc
sub
mov
(bad)
retf
cmp
out
popa
cmp
dec
jmp
pop
fdiv
int
lahf
repz
jb
jne
ins
rdpmc
enter
out
cmp
mov
scas
push
pop
xchg
out
push
pop
push
cmp
(bad)
fs
fstp
or
inc
fucomp
fild
jle
(bad)
ins
out
out
push
xchg
mov
ja
adc
mov
shr
push
sub
or
mov
rol
sub
test
xor
push
or
cdq
cmp
sbb
test
out
push
in
repz
sbb
pop
lock
nop
xchg
fsub
cmp
ret
test
je
stc
mov
into
mov
dec
inc
adc
shl
pop
aam
cld
push
push
div
cmp
mov
dec
ret
mov
xlat
out
jp
(bad)
xchg
lods
icebp
sbb
mov
out
xchg
es
rol
pop
push
cmc
jecxz
adc
dec
sbb
sbb
dec
mov
pop
cdq
mov
lods
fldcw
pop
push
mov
fsub
dec
push
sub
mov
jle
jmp
lea
pop
mov
sub
loop
cmp
dec
jo
add
inc
test
shr
sbb
push
xor
es
or
mov
jge
fwait
cmps
and
out
adc
inc
aad
inc
xchg
add
ret
add
sub
cmp
jb
test
(bad)
fsubrp
cmc
int3
inc
stos
xchg
and
leave
aad
fwait
sbb
pop
mov
mov
mov
dec
and
sub
lods
push
add
adc
dec
clc
cmp
int
bound
call
xor
repz
loope
clc
push
stc
mov
mov
pusha
inc
push
in
cmp
sub
shr
jle
sub
and
mov
mov
nop
data16
scas
and
out
movs
mov
lock
jmp
ret
and
(bad)
or
mov
fisttp
vzeroupper
pop
xchg
fisub
rcr
pop
pop
mov
cmp
sub
std
call
dec
pop
sbb
pusha
mov
adc
shr
in
sub
nop
xor
push
inc
sbb
enter
jge
je
adc
(bad)
call
jmp
xchg
in
fmul
aad
push
test
cmps
sub
add
xlat
fmul
push
adc
js
push
retf
and
mov
jne
mov
mov
sub
dec
sub
(bad)
call
lock
dec
inc
dec
xchg
inc
dec
xchg
or
outs
and
inc
or
pop
in
dec
es
popf
cmp
das
fcmovu
cmp
gs
call
push
test
mov
(bad)
xchg
arpl
cld
add
cmp
push
mov
lock
sbb
push
mov
hlt
cmp
(bad)
fdivr
in
xchg
cmp
mov
dec
in
fisub
sbb
cmp
(bad)
popf
sub
call
adc
aam
leave
sbb
pop
fdivr
stc
add
scas
fild
and
jl
test
adc
mov
fwait
and
push
add
aaa
int
xlat
cmp
test
(bad)
stos
mov
cmps
ds
pusha
mov
xchg
sub
nop
adc
jns
inc
or
imul
jb
ds
fist
jno
sub
mov
add
or
mov
xor
xchg
inc
inc
(bad)
ror
mov
test
xor
mov
adc
push
xor
dec
push
retf
sti
mov
(bad)
mov
in
mov
or
sub
mov
lods
jb
sbb
adc
test
add
leave
sub
lahf
enter
sti
aad
pop
sbb
and
xchg
inc
mov
(bad)
dec
scas
fsubp
pop
ds
mov
movs
cdq
cmc
inc
je
cwde
and
pushf
jg
mov
loopne
fsub
xor
add
adc
mov
pusha
sahf
jbe
inc
mov
repnz
sbb
push
loopne
ret
outs
scas
push
xchg
mov
mov
or
ret
jp
fidiv
pop
ds
loop
mov
mov
pop
inc
sbb
shl
jmp
and
and
daa
ins
pop
in
lods
dec
fisub
gs
dec
mov
dec
and
test
pop
add
sahf
jmp
out
push
div
adc
xlat
fiadd
push
cli
loopne
mov
jl
dec
pop
mul
add
mov
mov
or
(bad)
push
dec
fld
cmp
je
sub
ins
jno
jl
jo
shl
adc
jmp
jg
cwde
jnp
mov
sbb
and
push
xor
icebp
lock
(bad)
push
cmps
and
sti
jp
mov
pop
mov
inc
pop
adc
mov
mov
jnp
test
fiadd
fbstp
mov
ret
out
cs
js
es
jge
xchg
bound
cli
jmp
into
mov
mov
xchg
mov
(bad)
adc
xor
enter
sbb
mov
repnz
mov
ret
mov
lods
(bad)
pop
sti
jle
xor
scas
jno
sub
xor
test
xchg
jbe
and
sti
pop
cs
push
inc
mov
stos
or
inc
mov
push
dec
pushw
mov
mov
inc
shl
inc
lock
mov
lock
add
repnz
push
or
in
clc
(bad)
and
adc
adc
test
call
jns
mov
add
push
hlt
repnz
and
or
sti
repz
sbb
mov
and
sbb
xchg
inc
sti
cmps
cmc
add
cmps
(bad)
jmp
loop
loopne
push
xor
sub
push
movs
push
sti
ret
shl
xor
inc
es
or
xlat
dec
inc
xchg
popa
xchg
popf
xor
inc
mov
iret
inc
mov
xchg
mov
push
push
lods
cmps
inc
es
loop
adc
add
or
enter
cmp
sub
fisttp
out
in
mov
ja
sti
ret
sub
add
fdivr
out
rcr
jae
fimul
dec
mov
cmp
dec
jne
(bad)
jecxz
sti
cmc
dec
cli
xor
jg
popf
loopne
addr16
mov
fistp
lock
sbb
fsubr
or
fadd
push
ror
out
iret
mov
adc
cmps
pop
(bad)
cmc
jbe
mov
test
cmp
mov
xor
call
loopne
sbb
repz
shl
stc
pop
pop
pushf
or
test
sub
js
repz
data16
cmp
test
push
adc
pop
repz
fidivr
cmp
cmp
inc
fwait
adc
sub
push
mov
mov
jmp
popa
inc
ds
dec
neg
jmp
xor
adc
ins
sahf
mov
mov
or
or
fstp
cmps
push
std
mov
sbb
sbb
stos
xor
jno
in
adc
stc
and
add
mov
mov
dec
popa
hlt
fist
dec
ds
lds
sbb
(bad)
out
pop
pop
in
mov
cmps
inc
xor
test
cmp
sbb
movaps
cmp
in
icebp
push
sbb
ret
cdq
mov
icebp
adc
mov
hlt
lea
daa
cli
sbb
xchg
push
dec
push
dec
push
ret
aaa
sti
or
mov
sar
mov
xchg
sub
pop
imul
ins
test
mov
add
in
jmp
iret
inc
cmp
iret
pusha
out
cmp
jne
mov
push
stos
pop
cmp
jne
mov
out
fidivr
push
out
mov
hlt
pop
mov
adc
pushf
and
jnp
add
inc
sub
xor
loopne
sbb
mov
dec
and
repz
cmp
repnz
mov
lock
xor
jge
xor
xchg
stos
enter
add
addr16
fdiv
int3
es
xlat
ret
movs
mov
stos
in
pop
cs
jmp
dec
lds
add
push
pop
or
pop
inc
into
ds
ins
popa
xchg
xor
push
pop
inc
pop
xchg
sub
dec
adc
pop
and
mov
jge
xchg
int
jbe
dec
pop
mov
mov
es
inc
sub
(bad)
into
pop
jo
fbld
dec
mov
xchg
or
mov
loopne
and
mov
scas
mov
or
shufps
repnz
push
call
aam
add
and
fs
aam
push
and
aad
(bad)
jl
test
addr16
call
fimul
push
mov
mov
dec
adc
rcr
arpl
mov
mov
jae
scas
sub
push
jmp
xchg
and
mov
mov
pushf
outs
cmp
adc
cmp
cmp
mov
pop
pushf
sahf
dec
ret
add
xchg
dec
sti
mov
scas
cs
jb
stos
cmp
stos
mov
dec
sar
or
cmp
jnp
mov
dec
mov
out
mov
cmps
dec
inc
sub
xor
cmp
adc
fdivp
pop
pop
fdivp
add
aad
movs
mov
(bad)
ss
(bad)
(bad)
icebp
repz
movs
jg
arpl
pop
cmp
cmp
adc
adc
sahf
xchg
dec
mov
inc
mov
add
sub
neg
mov
inc
jbe
js
out
adc
mov
(bad)
in
dec
push
sub
enter
xchg
js
inc
sbb
and
test
inc
adc
fwait
adc
xchg
jae
jne
shl
and
test
ret
pop
scas
or
pop
pop
push
inc
test
adc
gs
mov
lea
repnz
mov
clc
cmp
add
push
sub
or
lds
add
pop
pop
adc
fisubr
or
test
cmp
retf
pusha
mov
xchg
int3
sub
rcr
cmp
mov
fcomi
pop
dec
mov
mov
fsubr
neg
xor
dec
(bad)
xchg
(bad)
sti
and
leave
mov
or
inc
mov
add
stos
hlt
pushf
into
push
xor
in
outs
mov
std
retf
push
pop
mov
cmps
popf
xor
or
mov
push
call
std
cs
ja
mov
inc
push
ror
cli
cmp
lods
mov
loopne
daa
xor
and
mov
popf
ss
(bad)
pusha
mov
popa
pop
mov
lea
shl
mov
push
psrld
pop
sahf
mov
xor
leave
(bad)
neg
out
or
xchg
(bad)
js
stc
iret
jle
xor
adc
pusha
dec
rcl
(bad)
imul
mov
lock
dec
movs
sti
add
xor
ret
mov
mov
push
xor
pop
xchg
test
cld
repnz
out
(bad)
enter
or
inc
in
mov
lock
xchg
push
mov
sub
sti
arpl
in
pop
mov
adc
xchg
mov
imul
add
jbe
dec
arpl
xor
xlat
xchg
ret
push
dec
sub
gs
scas
push
mov
pop
cmps
je
leave
jae
pop
jmp
sahf
fisub
sub
fs
movs
in
pop
mov
and
mov
test
inc
test
jg
jns
cmp
int
jne
adc
dec
clc
or
mov
into
aad
sub
fnstsw
cmc
jge
xor
fbld
cmc
scas
push
loop
sahf
jo
mov
xor
test
repz
push
dec
js
lods
outs
enter
dec
sub
push
inc
jecxz
ret
pop
retf
cdq
push
inc
push
or
jb
loope
hlt
std
inc
push
cmps
movs
adc
cli
dec
(bad)
push
out
sub
cmp
and
mov
inc
movs
inc
mov
mov
add
lods
pop
imul
nop
call
loop
mov
cmp
retf
xor
cmps
test
enterw
test
mov
dec
stos
pop
stos
add
push
push
fst
js
jl
or
xor
mov
cmp
and
test
mov
sub
jno
push
std
leave
daa
jne
(bad)
mov
int
test
xor
dec
cmp
xchg
jecxz
adc
bound
add
mov
fbld
ins
mov
test
or
lea
jg
inc
sub
push
lock
xor
and
popf
push
int
xchg
xor
stos
(bad)
loope
ins
test
xlat
inc
shl
sub
rep
push
pop
div
ins
xchg
adc
mov
push
fwait
daa
retf
out
(bad)
cmp
int3
xchg
or
sub
pusha
add
push
cld
test
daa
mov
retf
mov
jg
stc
call
push
loope
fidivr
and
scas
push
fsub
push
dec
sahf
jecxz
fbld
daa
(bad)
es
js
mov
adc
pop
js
jmp
jno
push
mov
cmps
adc
shl
and
sbb
inc
outs
nop
sbb
stos
dec
inc
inc
daa
mov
lods
dec
mov
(bad)
das
sbb
bound
mov
pop
and
mov
pop
or
loop
adc
dec
fmul
inc
movs
jne
addr16
ficomp
icebp
sbb
data16
xchg
sub
push
fs
loopne
ins
(bad)
jge
int
test
add
push
mov
push
test
imul
jb
pop
adc
xor
push
sub
pop
fnstcw
dec
dec
pop
call
cwde
aas
imul
fist
xchg
sbb
xchg
sub
mov
jo
add
jg
push
pop
out
fwait
pop
in
add
mov
sub
les
add
inc
pop
cmps
outs
(bad)
jge
or
lods
fmulp
xor
pop
test
xchg
push
push
pop
arpl
mov
inc
les
cmp
inc
mov
mov
push
nop
dec
xchg
movntq
out
adc
jmp
pop
sub
test
fidivr
repnz
ja
sub
mov
sub
pusha
icebp
pusha
mov
cwde
dec
jno
leave
ins
mov
inc
mov
pop
int
cmps
or
jns
cmp
lds
xchg
lods
inc
retf
dec
pop
pop
outs
outs
lods
jbe
cmps
xor
aam
inc
xchg
add
sub
mov
(bad)
xchg
rcl
adc
lea
sahf
dec
(bad)
sub
pop
mov
push
stc
push
xchg
in
enter
gs
sub
xor
out
or
mov
(bad)
dec
jb
cmp
push
js
jbe
xor
jecxz
xor
fmul
test
iret
test
mov
test
add
pop
sti
out
xchg
jecxz
cli
stc
xchg
mov
(bad)
xor
adc
and
push
leave
hlt
sbb
es
outs
push
arpl
mov
adc
pop
out
scas
xchg
aad
rol
jmp
pusha
jmp
mov
call
mov
mov
test
hlt
push
call
sub
ins
es
std
sbb
test
in
mul
push
(bad)
lock
sbb
mov
and
xchg
jg
xor
cmp
test
icebp
sub
push
das
mov
xchg
xchg
inc
cli
dec
(bad)
jns
les
push
cmp
push
mov
daa
mov
adc
sbb
cmp
repz
cmp
or
mov
cmp
mov
sbb
adc
(bad)
jo
xchg
pop
adc
push
retf
test
cmps
push
imul
sbb
jmp
pop
xor
jno
(bad)
je
cmp
fs
push
cmp
popf
rcr
sbb
int
jp
pusha
push
aas
sub
jae
jecxz
fimul
jmp
mov
mov
sbb
scas
not
push
cmps
cmp
pop
sar
cmps
(bad)
in
xchg
and
add
inc
in
mov
mul
pop
dec
push
cs
adc
sub
fisub
xchg
mov
add
test
inc
add
add
mov
lds
call
jno
out
popf
mov
cmp
cmp
neg
push
pop
shr
cmps
pop
sbb
(bad)
out
ds
cmp
adc
xor
dec
rol
xchg
cmp
mov
outs
pushf
cmp
cmp
inc
test
inc
out
push
fsubrp
xchg
and
jl
jmp
or
gs
cmp
jp
pop
dec
stos
jg
test
add
jl
in
stos
xchg
inc
in
jns
mov
mov
lds
sbb
loop
xor
sbb
jbe
or
mov
call
sbb
std
sar
or
ror
cmp
jb
mov
fiadd
imul
pop
adc
mov
call
cs
sub
jnp
sub
into
xor
xchg
push
or
pop
lods
inc
push
cmp
mov
jb
and
(bad)
inc
jb
das
mov
test
and
xchg
int
xor
fmul
addr16
ret
or
inc
sub
retf
xchg
lea
pop
mov
call
cmp
stos
leave
fstp
dec
cwd
movs
adc
imul
push
(bad)
jbe
sbb
shr
std
mov
pop
test
in
into
aas
jl
daa
std
in
jecxz
sub
fst
cmp
add
ds
or
in
xchg
sub
movs
in
mov
ret
ins
inc
das
adc
pop
cmps
and
shl
cmps
movs
adc
inc
mov
ins
xor
adc
inc
cwde
and
ins
leave
lods
ds
pop
iret
xor
(bad)
inc
sahf
leave
add
cli
(bad)
fs
cmp
or
fiadd
ficom
retf
test
rcr
pop
lods
mov
loope
popa
and
push
test
popf
jge
iret
rol
daa
fucom
cmp
in
adc
retf
retf
gs
in
rcl
aaa
pop
mov
fld
hlt
pop
retf
xchg
movs
jnp
pop
adc
cmps
aam
sbb
or
dec
jae
jg
pusha
aas
imul
(bad)
iret
outs
nop
loope
cs
mov
mov
aad
sbb
pop
cmp
xor
xor
int3
cmp
sbb
inc
cmps
push
ret
fidivr
aam
inc
add
enter
mov
or
test
xchg
cld
mov
jl
repnz
loop
ins
sub
jl
movs
scas
outs
mov
fcmovb
jo
cmp
movs
lods
and
loopne
ffreep
cli
(bad)
dec
jae
xor
test
cmp
outs
and
inc
sbb
cli
jl
into
jb
sbb
or
ror
fnstenv
mov
xchg
popa
xor
and
js
pop
pop
cmc
or
cmps
shl
cmp
in
or
(bad)
mov
cmp
inc
push
movs
push
fstp
xlat
mov
in
mov
(bad)
pusha
push
jge
add
cmps
ret
test
add
nop
daa
popf
sahf
cmp
jbe
push
pop
cmp
mov
pop
mov
ins
mov
pop
(bad)
xor
ror
push
fmul
ret
aas
gs
jecxz
int3
add
add
inc
mov
aas
add
push
jb
jb
cld
xor
pop
jmp
jmp
or
(bad)
jmp
(bad)
enter
enter
xlat
pop
pop
and
pop
and
dec
test
mov
push
or
add
(bad)
push
fs
pop
fiadd
sub
lock
fild
mov
and
mov
test
mov
xor
xchg
inc
fcom
xlat
adc
aas
pop
jge
inc
pop
mov
in
pushf
mov
int
dec
mov
les
push
mov
dec
test
stos
out
stos
push
test
mov
(bad)
shl
ins
int3
(bad)
jnp
jbe
cwde
repz
mov
mov
mov
mov
sub
cli
mov
mov
ins
mov
jbe
inc
inc
(bad)
(bad)
cmp
sbb
jp
or
inc
dec
icebp
fisubr
mov
ds
ins
in
js
int3
jno
rep
lahf
shl
into
mov
hlt
push
add
mov
xor
jl
adc
and
push
sub
adc
pop
or
push
popa
mov
stos
ins
loopne
inc
into
push
imul
dec
push
loopne
out
js
mov
jns
xchg
or
mov
push
mov
(bad)
dec
ret
lds
xchg
(bad)
in
mov
in
pop
shl
sub
dec
inc
repnz
ret
push
xlat
nop
jne
int3
lahf
mov
fcmovu
xchg
inc
mov
call
cmp
ss
out
outs
jo
leave
js
aam
lahf
fwait
int3
inc
inc
(bad)
js
cmp
pop
jge
push
xchg
test
or
aaa
push
fistp
dec
loopne
test
repz
dec
(bad)
in
sub
sub
xor
icebp
lds
in
mov
sbb
mov
enter
mov
sbb
sti
ins
sub
fnstcw
shl
(bad)
push
repnz
push
outs
jns
call
imul
rcl
retf
call
aam
scas
fprem1
mov
fbld
jns
pop
into
je
cmps
das
int
sbb
mov
mov
repnz
lods
add
cmp
shl
add
jp
stos
mov
into
pop
(bad)
xor
inc
inc
repz
fisttp
xchg
pop
push
aas
pop
arpl
dec
test
inc
aas
mov
mov
lahf
push
(bad)
sar
loop
out
ret
bound
mov
mov
mov
jp
test
adc
into
mov
into
idiv
stos
pushf
lods
and
test
push
xor
mov
leave
ins
dec
pushf
pop
cmp
pop
jns
not
(bad)
mov
mov
xchg
retf
push
dec
push
(bad)
loop
sti
push
cmp
jecxz
sti
rcl
test
(bad)
lods
xor
sbb
pop
lods
inc
ja
ins
inc
push
fs
into
jecxz
inc
scas
xlat
aad
mov
gs
into
rcl
push
add
push
loopne
mov
mov
cld
jb
leave
xchg
lods
popf
rcr
pushf
or
dec
mov
sbb
adc
das
into
pop
inc
xlat
in
push
sar
jecxz
xor
retf
(bad)
cmp
mov
jecxz
sub
test
lods
mov
call
xchg
inc
and
mov
xor
sub
mov
cmp
popa
dec
jo
loope
jnp
jle
lds
jae
push
(bad)
dec
jle
fstp
mov
shl
pop
sub
mov
jg
pop
rcr
rcr
mov
fidiv
cmps
scas
inc
pop
ret
jno
mov
fisub
pop
scas
sub
mov
clc
xchg
xchg
pop
push
jle
jge
clc
sahf
sub
cmp
rol
cwde
inc
dec
sahf
ins
cmc
mov
dec
adc
int3
mov
push
mov
aas
scas
pushf
xchg
or
bound
movs
xchg
fnsave
sbb
ins
stc
pop
shr
imul
lahf
call
gs
popa
dec
add
es
lahf
lods
sub
test
dec
mov
jle
scas
inc
cmp
push
jmp
bound
adc
mov
sub
mov
dec
xchg
fadd
inc
sub
retf
in
add
xchg
repnz
pop
ja
mov
push
add
in
aaa
lods
jmp
pop
(bad)
sub
inc
lahf
frstor
cmp
pop
xchg
stos
adc
mov
or
lahf
and
jo
and
and
push
int3
adc
inc
lds
xlat
pop
(bad)
adc
sub
pop
or
cmp
push
or
fimul
mov
push
movs
ret
popf
ds
mov
fs
mov
aam
loope
lock
out
mov
dec
mov
push
mov
push
shl
and
dec
or
sub
dec
sbb
stc
push
enter
xor
push
ret
fistp
lock
cmps
lods
lahf
add
mov
call
stc
dec
xchg
dec
shl
leave
adc
add
or
les
fs
sub
jge
sbb
xchg
lahf
inc
mov
add
cmp
repnz
cmp
stos
xchg
jg
push
fdiv
jge
push
fiadd
cmp
or
out
imul
push
xor
imul
xor
push
fs
ds
call
lods
adc
out
mov
jp
arpl
sub
dec
sub
mov
adc
jmp
out
(bad)
mov
cdq
dec
cli
mov
popf
popa
and
dec
push
nop
retf
cwde
sbb
sti
out
push
jne
imul
repnz
mov
aas
neg
xchg
and
stos
jle
push
nop
mov
outs
inc
out
mov
pop
call
sub
inc
xchg
xor
mov
inc
pop
dec
lea
neg
imul
cdq
xlat
pop
dec
adc
lods
(bad)
add
scas
xchg
push
std
sti
(bad)
adc
mov
(bad)
jp
call
outs
clc
mov
fld
dec
icebp
pop
cli
dec
es
adc
sbb
add
loope
cmp
aas
retf
jmp
mov
repz
cmps
mov
neg
xchg
scas
mov
(bad)
in
lahf
push
push
idiv
sub
xchg
mov
sub
and
or
pop
push
push
sbb
test
rol
mov
push
xchg
jne
mov
mov
outs
jnp
adc
test
(bad)
cmp
cmc
sbb
mov
cli
cld
icebp
dec
sub
add
pop
xor
jge
cli
add
jo
inc
test
mov
pop
jge
mov
shl
add
aaa
mov
push
outs
icebp
adc
mov
and
add
mov
int3
adc
dec
mov
out
mov
call
ror
cli
shl
pop
jmp
jne
adc
sub
and
cmps
(bad)
fisttp
cmp
push
push
mov
mov
jo
mov
add
dec
into
xor
sbb
fadd
popf
pop
xlat
test
cld
add
inc
ret
(bad)
scas
add
dec
mov
push
add
out
push
nop
pop
mov
inc
sbb
scas
mov
push
add
test
add
sbb
lds
pop
mov
pop
jle
rcr
mov
jno
fsubr
(bad)
repnz
pop
mov
lock
adc
div
mov
xor
out
(bad)
fwait
jge
xor
pop
add
pop
mov
mov
cmps
pop
into
cmp
std
cs
mov
movs
addr16
mov
sub
mov
loopne
sahf
lea
stc
push
rcr
mov
cmp
adc
out
repnz
push
imul
loope
sti
in
out
xor
pop
(bad)
aas
sub
pcmpeqb
iret
ror
popf
add
inc
js
sbb
cmp
fdivr
sar
outs
fcmovnu
inc
outs
xor
das
inc
pushf
pop
gs
ins
jmp
pop
imul
lods
(bad)
mov
mov
sbb
shl
cmp
push
fs
pushf
xchg
sti
test
xchg
pop
or
jbe
ret
shr
leave
sub
pop
cmp
adc
and
push
dec
adc
adc
(bad)
fld
movs
xlat
out
sub
cmps
nop
sub
ja
fwait
inc
loop
sub
jl
jg
cmp
adc
inc
sbb
dec
inc
push
pop
mov
sti
xor
jmp
icebp
inc
(bad)
jno
and
test
stos
ret
(bad)
jbe
call
jbe
retf
mov
lods
(bad)
test
(bad)
ss
imul
dec
jnp
call
sub
xor
cmp
aas
jae
adc
int
sub
jae
ds
mov
out
in
xchg
das
loop
inc
xchg
sbb
add
test
mov
ret
push
mov
jae
sub
jno
xchg
sub
jecxz
pop
jp
pop
mov
gs
arpl
pop
add
and
jge
pop
call
xchg
mov
lds
inc
lds
add
(bad)
(bad)
jp
jl
xor
movs
cmps
iret
fdiv
out
dec
xchg
or
jmp
(bad)
push
adc
and
mov
mov
test
in
adc
add
or
jnp
or
rcl
inc
xor
stos
xchg
mov
pop
out
adc
je
mov
inc
jmp
ret
xor
movs
pop
push
sub
add
outs
mov
retf
lods
inc
addr16
sar
rol
xor
dec
pop
gs
loop
xor
jns
xor
cmp
and
sub
ret
retf
and
mov
cmp
mov
das
and
mov
mov
imul
sub
xchg
loopne
push
xor
push
mov
dec
sub
pop
lods
pop
test
mov
xchg
jb
add
dec
mov
xchg
mov
xor
jl
xor
icebp
inc
mov
bound
dec
repnz
jecxz
mov
mov
ins
pop
int
mov
fcomp
sbb
js
inc
pusha
jae
jle
pusha
fisub
sbb
enter
jns
cmps
cdq
(bad)
movs
mov
cdq
push
fisttp
mov
cmps
sbb
xor
inc
popf
lahf
add
fnsave
adc
aad
sub
push
bnd
icebp
das
mov
push
adc
pop
sub
inc
fst
add
push
pop
test
push
or
movs
imul
adc
xor
leave
inc
push
out
jns
mov
xchg
cmp
int3
in
test
fadd
xchg
inc
xchg
lods
inc
add
(bad)
sub
jmp
xchg
adc
pop
pop
mov
sbb
cli
in
ss
and
pop
idiv
aaa
adc
pop
push
adc
icebp
mov
mov
mov
dec
or
inc
mov
and
mov
adc
les
mov
dec
in
sbb
out
pop
jecxz
mov
clc
into
stc
or
lea
ins
push
dec
mov
mov
ja
dec
popf
and
mov
call
xchg
imul
jecxz
ret
pop
dec
mov
jo
jb
lahf
mov
nop
mov
(bad)
(bad)
cmp
add
int
and
inc
and
enter
inc
xor
dec
pusha
inc
xchg
pop
and
push
dec
push
xor
(bad)
xor
test
stos
bound
das
sub
add
call
gs
cwde
add
or
jnp
ss
nop
inc
add
fsub
les
mov
stc
pop
lock
dec
repnz
in
or
icebp
or
mov
out
mov
test
push
in
pop
mov
push
and
mov
neg
xor
inc
mov
jnp
test
sub
enter
push
or
jno
and
inc
int
aam
sahf
mov
or
aad
push
mov
push
fcomp
or
loopne
mov
mov
and
cs
pop
fcmovbe
cli
adc
dec
push
movs
lods
mov
lods
jmp
inc
jbe
xchg
mov
(bad)
ss
and
(bad)
fdiv
ja
cs
mov
mov
cdq
repz
pop
cdq
xlat
jns
and
xchg
mov
imul
pop
shl
(bad)
cmp
inc
mov
adc
push
inc
imul
imul
movs
popf
inc
mov
cli
out
dec
mov
sub
xlat
mov
fdivr
call
xchg
lahf
(bad)
sar
jno
pop
or
mov
jbe
in
aad
int
add
sub
mov
pop
rcr
(bad)
adc
add
inc
cdq
fnsave
popa
push
jp
dec
xor
movs
adc
xchg
mov
adc
mov
call
mov
je
mov
sbb
and
sbb
retf
test
popf
sub
dec
ret
sahf
pop
xor
enter
cmps
pop
fucomp
sbb
sbb
gs
repnz
cmp
ss
lds
out
jl
out
pop
retf
popa
std
adc
xlat
retf
pop
mov
jg
fidivr
jmp
fs
xor
or
pop
sub
mov
aad
jmp
cmp
nop
sub
push
push
jne
ja
retf
loopne
call
sti
sbb
out
stos
xchg
stc
xor
addr16
pop
retf
stc
loope
push
jecxz
rol
outs
push
jmp
nop
retf
aad
loope
add
call
cmp
stos
fsubr
dec
popa
lock
shr
mov
or
in
dec
push
push
lahf
inc
inc
xchg
test
daa
clc
push
cmp
mov
xor
sbb
push
xchg
or
lea
loopne
fidivr
das
enter
sub
xchg
jg
test
fidiv
cld
les
das
out
retf
jge
pop
(bad)
cld
mov
mov
dec
pushf
cmp
adc
pop
daa
pop
jo
mov
xchg
inc
ret
cld
mov
inc
pop
outs
inc
sbb
mov
cmps
in
jg
or
or
mov
fs
shl
inc
call
stos
pop
cvtdq2ps
int
popa
sub
js
xchg
in
cmp
adc
mov
not
sub
and
adc
std
jge
dec
inc
pop
mov
inc
aam
or
jns
xchg
jbe
adc
or
je
mov
in
aam
or
ret
xlat
jo
sbb
xor
adc
shl
mov
add
or
push
and
add
xor
gs
mov
cmp
sub
js
shr
addr16
pop
out
push
and
sub
and
cmp
fs
shl
std
mov
ret
dec
cmp
add
ins
xchg
inc
scas
clc
loop
je
in
pop
pop
jmp
gs
hlt
mov
cmc
mov
inc
(bad)
mov
aaa
ret
ins
test
repnz
cmp
xchg
and
xor
inc
(bad)
aam
inc
xor
xchg
cmp
std
inc
adc
pop
sbb
mov
in
inc
aam
ds
dec
mov
add
mov
cmp
pushf
adc
stos
leave
pop
fwait
imul
scas
inc
leave
int3
cmp
es
cmp
mov
mov
mov
loope
data16
bound
mov
fnstcw
test
and
inc
jle
push
pusha
mov
out
pop
pusha
lds
or
jnp
adc
mov
adc
(bad)
je
or
push
or
push
ficom
add
in
lock
mov
sub
rol
js
sbb
stc
mov
inc
(bad)
or
aam
adc
cmp
push
mov
xchg
call
neg
sbb
xchg
retf
xchg
sub
pop
in
push
in
mov
dec
mov
lds
inc
popf
pop
aam
sbb
shl
mov
popa
mov
in
mov
movs
push
stos
jo
lea
or
out
push
add
add
mov
std
imul
inc
add
loope
wrmsr
into
and
mov
adc
or
sahf
gs
mov
mov
bound
stc
mov
xor
lds
jns
sub
(bad)
inc
cld
xor
jae
xchg
stc
xchg
jmp
sub
jne
cmp
mov
push
fwait
loop
and
std
retf
add
test
popa
test
pop
push
add
xchg
mov
jmp
retf
rol
dec
push
(bad)
std
mov
scas
mov
pushf
sbb
pusha
inc
popa
xchg
and
das
mov
inc
mov
aaa
xor
push
fwait
inc
ss
or
sub
addr16
shl
out
mov
xor
outs
shr
lds
fisubr
adc
data16
adc
(bad)
(bad)
in
dec
ja
pop
test
adc
or
je
lods
mov
stos
in
adc
add
xor
dec
cmc
fimul
daa
and
pop
or
cmp
call
push
xchg
dec
or
ins
jl
sbb
pop
pop
inc
dec
sub
aaa
loope
dec
addr16
arpl
pusha
(bad)
xor
jno
scas
aad
sub
add
stos
or
inc
xlat
not
in
xchg
push
in
ldmxcsr
inc
pop
mov
retf
fild
and
in
cmp
shr
loopne
mov
push
sub
mov
popa
adc
sbb
add
cs
sub
cmp
loop
sub
out
mov
imul
cmps
jno
push
dec
add
xor
and
inc
cmp
mov
and
cmps
mov
ja
mov
arpl
aaa
and
pop
int
xor
xor
adc
ss
(bad)
mov
hlt
arpl
mov
(bad)
test
dec
cmps
or
jbe
leave
movs
xchg
(bad)
iret
mov
rcl
(bad)
pop
in
cmp
lahf
pop
or
sub
test
jge
scas
clc
lea
aam
add
je
xchg
fwait
ret
push
dec
popa
inc
lea
(bad)
lahf
mov
mov
pop
dec
shl
adc
sbb
jo
mov
mov
out
jmp
movs
fisubr
loop
ret
push
jo
cmp
sbb
inc
(bad)
scas
or
pop
shl
into
not
mov
pop
ins
(bad)
jo
loop
cmp
(bad)
in
cmp
cmp
or
outs
pusha
(bad)
xor
adc
mov
add
aaa
jl
mov
fisttp
mov
and
dec
dec
ret
xchg
mov
sbb
into
jge
repz
mov
jae
xlat
dec
pushf
xchg
lock
inc
das
ficomp
retf
mov
sub
or
pop
mov
dec
cmp
xor
push
call
loop
pushf
and
mov
(bad)
cli
mov
data16
mov
jmp
cmps
inc
jl
aam
fbld
add
mov
mov
cmp
ja
dec
mov
pop
sub
aas
mov
pop
inc
cmp
or
inc
shl
mov
lds
xor
cmp
pop
sub
sub
repnz
mov
bnd
sub
ss
retf
(bad)
fcom
mov
jge
test
ds
cs
inc
sbb
push
gs
ror
dec
dec
jp
jp
sahf
call
mov
shl
jo
outs
mov
rep
scas
cmp
or
xchg
jmp
add
pusha
repz
sbb
jg
clc
push
inc
pop
sub
out
arpl
dec
out
cld
xchg
fimul
aas
xlat
es
and
int3
in
mov
(bad)
adc
fldenv
fsubr
pop
adc
xchg
les
cmp
pop
and
test
not
sub
in
xor
(bad)
retf
cmc
or
ds
(bad)
jl
fldenv
dec
xor
inc
jmp
inc
or
mov
popa
mov
cmps
sub
inc
movs
rol
adc
fist
sub
div
sbb
je
sub
ror
push
xchg
inc
out
out
push
mov
inc
(bad)
push
enter
dec
iret
pop
xor
aas
xor
or
or
dec
test
rcl
pop
in
hlt
mov
xchg
adc
mov
or
add
das
jmp
imul
(bad)
repnz
sbb
ins
inc
sbb
fldln2
and
sub
sbb
(bad)
fwait
jg
jp
(bad)
jo
imul
das
nop
push
int3
xor
and
xor
outs
dec
push
pop
(bad)
mov
into
pop
mov
xchg
add
mov
mov
push
clc
jae
pmullw
je
cmps
jge
push
dec
mov
xchg
cmp
xchg
add
mov
jg
sbb
aam
dec
adc
adc
fisttp
loopne
gs
cmp
mov
cs
in
shl
jle
jg
push
mov
clc
jae
cld
sub
mov
das
cs
xlat
xor
ret
and
dec
ds
mov
or
stc
aaa
mov
mov
mov
mov
dec
push
mov
and
repnz
sub
mov
ror
add
stos
movs
jns
outs
lods
into
and
popa
adc
push
mov
adc
sub
mov
icebp
add
ret
sbb
dec
or
or
lea
loopne
dec
jecxz
adc
mov
cmc
and
push
outs
int
push
cmp
and
mov
dec
cmps
pushf
js
les
dec
inc
aam
fsubrp
ins
gs
cli
lock
cli
jns
rol
ds
cld
and
loope
(bad)
push
test
mov
gs
cwde
push
shl
push
cmp
sahf
nop
cmps
ss
clc
push
jg
adc
or
lahf
(bad)
imul
lahf
cmp
adc
int
mov
jbe
cld
and
inc
dec
les
pop
mov
push
pop
rol
xor
jne
jnp
outs
xor
ror
mov
sbb
jns
in
add
or
adc
enter
push
adc
cmp
sub
cmp
data16
sti
mov
mov
mov
mov
dec
nop
sub
ss
test
push
test
mov
sub
repnz
icebp
or
add
dec
iret
mov
jno
loopne
imul
sti
sub
rcr
loop
mov
lahf
(bad)
imul
mov
lods
and
hlt
sbb
sub
dec
loope
fsub
mov
test
test
inc
mov
inc
outs
sub
into
mov
imul
cmp
jle
pushf
and
stos
and
cld
rcr
xor
ja
loope
xor
pop
shl
inc
adc
jge
mov
lea
jl
pop
lahf
lods
mov
jbe
jnp
jnp
add
xor
adc
pop
pop
stc
mov
test
xchg
pusha
push
jbe
jb
sbb
sub
test
fsin
xchg
loopne
mov
pop
mov
xor
std
xchg
jecxz
adc
dec
scas
call
cmp
xchg
sbb
mov
mov
xlat
xchg
stos
mov
mov
pop
sbb
inc
push
mov
enter
stos
test
jnp
popf
and
leave
cmc
inc
sahf
or
jmp
xor
mov
scas
in
sub
and
imul
cs
xchg
adc
adc
jmp
and
pop
lods
pop
xor
mov
iret
in
add
jb
push
push
push
das
test
pop
adc
or
ins
das
push
dec
(bad)
mov
out
iret
mov
or
jecxz
cmps
int
lods
sub
xor
lods
pusha
dec
cs
xchg
in
xor
mov
push
mov
pop
(bad)
call
dec
cwde
ins
inc
ins
movs
xchg
in
pop
push
(bad)
mov
mov
push
or
inc
adc
dec
xor
repnz
cmp
inc
xlat
sbb
pop
cmp
out
inc
mov
push
jnp
(bad)
dec
shr
fwait
add
movs
xchg
scas
inc
push
test
js
js
std
loop
ret
xor
xor
hlt
cwde
les
enter
(bad)
cmps
mov
outs
add
dec
jge
push
mov
int3
pop
and
adc
jne
dec
push
out
gs
push
div
pop
dec
cwde
and
inc
les
ret
mov
std
in
(bad)
and
scas
dec
ja
jle
sub
add
jno
ss
push
push
rcr
xor
dec
cmc
xchg
pop
arpl
sbb
xchg
je
and
pop
lock
push
jl
add
or
sub
mov
addr16
aad
jno
jbe
jg
or
ja
mov
adc
enter
dec
jno
dec
and
sar
dec
in
pop
clc
adc
fnsave
jp
fwait
scas
aad
hlt
jnp
push
xchg
adc
gs
sti
or
fnstcw
lahf
and
fstp
lods
ins
sahf
cmps
xor
mov
push
mov
rcl
cld
xlat
pop
out
retf
push
push
adc
xchg
into
sbb
xor
call
stos
ins
sub
cld
mov
push
xchg
fwait
sbb
imul
sbb
retf
mov
pop
into
push
dec
sub
xor
add
xor
jae
xchg
sbb
fwait
mov
imul
inc
fsub
add
out
xchg
mov
mov
ret
es
stos
jp
dec
pusha
mov
les
xchg
add
stos
pop
js
push
mov
leave
addr16
cmp
xchg
or
jo
rcr
mov
sbb
push
test
or
(bad)
pop
test
repz
add
push
jmp
xor
leave
ror
call
dec
aam
in
jne
adc
in
mov
loope
lahf
imul
pop
and
outs
rol
mov
adc
ds
add
imul
dec
pop
ror
les
jg
call
inc
cmp
pop
rep
ja
scas
sar
and
or
jns
jl
gs
iret
sub
mov
mov
int3
and
mov
jnp
mov
mov
pop
pop
lahf
dec
jge
mov
out
xor
xchg
aaa
stc
pusha
mov
ja
xor
addr16
les
pushf
int
enter
xor
aaa
xor
repz
(bad)
mov
movs
cmova
or
cmp
jno
pop
adc
add
add
es
jno
xor
push
and
ja
jnp
mov
retf
ins
dec
jge
inc
daa
jns
stos
mov
ret
sbb
outs
or
mov
bound
adc
sub
(bad)
jno
and
pop
mov
mov
jp
pop
dec
sub
jno
mov
call
add
jecxz
les
sub
mov
fcmovne
enter
pop
mov
push
mov
(bad)
mov
jp
aad
je
xor
adc
mov
arpl
sbb
push
xor
call
(bad)
jno
pop
pusha
arpl
adc
xchg
mov
sbb
addr16
sub
dec
mov
je
loopne
imul
and
fucomip
lods
lock
xor
inc
clc
adc
jge
cmc
shr
fwait
test
jecxz
lahf
push
test
cmps
add
sub
retf
add
ins
inc
xor
in
adc
push
cs
mov
xor
outs
adc
jae
in
cld
push
aam
cmc
push
mov
jns
and
nop
sub
pop
mov
sahf
das
bound
jae
inc
xchg
fisub
fdivr
out
popf
mov
rol
adc
stos
sbb
ds
sbb
pop
loope
mov
xor
clc
fisttp
sub
jge
mov
fistp
dec
fwait
cmps
jg
sub
sahf
mov
cmp
sub
cwde
dec
sub
mov
mov
push
add
xchg
add
aaa
loopne
jnp
and
mov
add
mov
(bad)
dec
and
ret
aad
add
cmp
xor
adc
sar
ds
aas
into
pop
mov
out
sbb
jecxz
fsubr
jge
xlat
cld
and
cmps
push
movs
mov
mov
stc
sar
mov
fiadd
push
mov
iret
fld
cmp
rol
or
sub
movs
cmc
jnp
retf
repz
es
jno
jbe
(bad)
push
inc
data16
jecxz
jg
(bad)
je
inc
pop
push
cmps
imul
sbb
xlat
dec
add
inc
fwait
in
pushf
xor
dec
inc
ret
fdiv
cmp
sbb
shl
xchg
lods
outs
mov
mov
repnz
dec
ficom
jb
lods
adc
call
rcr
js
mov
pop
push
imul
cdq
adc
out
lea
repnz
outs
jecxz
sti
adc
fisubr
loopne
out
(bad)
adc
retf
inc
enter
pushf
push
fmul
adc
movs
or
inc
xchg
mov
lods
add
ret
movs
adc
loopne
xor
cmp
movq
retf
pop
cmp
test
repz
hlt
cmp
jmp
test
in
or
stc
mov
inc
das
out
icebp
push
icebp
add
push
aad
push
fmulp
fwait
inc
xor
inc
mov
jo
data16
inc
pusha
fdivr
les
dec
push
test
push
pusha
jbe
push
outs
push
pop
mov
lahf
mov
jmp
int3
xchg
cld
inc
in
xchg
mov
xchg
jno
mov
pop
rcr
fidiv
das
mov
push
or
test
xchg
or
jge
popa
mov
push
pop
out
mov
loopne
std
cld
xchg
test
ds
cmovs
or
push
inc
mov
pop
imul
repnz
and
and
mov
aad
pusha
aam
jbe
pop
call
inc
mov
adc
push
add
ins
mov
sbb
mov
fsub
out
pop
ins
cmp
test
je
pop
mov
mov
jb
cdq
stos
pop
lods
aaa
sub
mov
push
clc
dec
push
and
mul
cmp
sbb
test
jb
stc
xchg
std
dec
and
mov
popa
fild
inc
les
add
push
rol
pushf
inc
daa
jo
jge
ins
jmp
adc
shl
pop
push
repz
xor
aaa
push
pop
call
mov
dec
int3
pop
jmp
sbb
xor
xchg
leave
push
fwait
mov
cmc
inc
mov
dec
push
les
xchg
ds
fstp
test
movs
fisubr
daa
mov
cmps
push
test
xchg
lods
inc
aas
popf
cmp
mov
int
movs
add
adc
pop
(bad)
jae
sti
(bad)
mov
gs
jns
bound
sbb
xchg
xchg
sub
jp
push
xor
into
push
mov
enter
jno
mov
lods
adc
sahf
sbb
mov
inc
leave
(bad)
pop
jne
movs
test
je
popf
adc
cwde
pop
push
push
or
frstor
(bad)
mov
loope
or
dec
mov
sub
sbb
retf
xchg
push
pushf
add
xchg
cli
int
mov
mov
adc
sbb
push
lods
sub
or
mov
add
(bad)
ds
inc
ins
xchg
stos
mov
sub
test
sbb
inc
lahf
adc
rol
mov
and
mov
sbb
sub
xchg
inc
pushf
dec
stc
inc
lea
retf
push
xchg
cmp
adc
stos
and
mov
xor
fs
stos
jmp
pop
xchg
imul
ret
rol
in
sub
test
xchg
jo
mov
retf
and
ja
xchg
bnd
and
cdq
dec
jno
sti
cmp
sub
and
add
gs
rcr
pop
pushf
in
das
mov
xlat
imul
cmp
aad
or
pop
sbb
add
ror
push
and
pop
jl
mov
push
lea
mov
dec
inc
loop
sahf
leave
push
jecxz
add
lds
push
sbb
dec
pop
and
or
inc
mov
loope
call
or
cld
test
js
imul
enter
xchg
jmp
lds
aaa
inc
movs
mov
arpl
fmul
gs
cmp
jnp
mov
in
jle
mov
outs
je
nop
fwait
leave
loop
pop
call
push
mov
fld
sbb
xor
je
int
pop
aad
jne
xchg
movs
lahf
push
push
inc
(bad)
(bad)
dec
ja
lods
xchg
pusha
outs
xchg
pop
mov
dec
xor
add
out
jle
iret
mov
cld
pop
fistp
mov
mov
mov
jb
xchg
push
push
stc
scas
les
jmp
mov
test
fst
shl
sbb
add
xchg
adc
sub
mov
xchg
das
cmc
push
or
mov
lahf
lea
and
or
scas
xor
shr
cmp
cmp
test
aad
fsubrp
xchg
std
dec
outs
in
in
dec
sub
cmp
sbb
push
add
xor
ins
out
mov
push
xchg
in
neg
test
mov
xchg
xor
push
pop
mov
pusha
xchg
(bad)
mov
shr
adc
xchg
lahf
iret
stos
dec
out
stos
jecxz
mov
and
enter
or
xor
aas
mov
clc
les
or
mov
std
push
add
pop
fisub
hlt
cli
sar
ror
ret
mov
and
es
sub
inc
std
add
retf
mov
stc
mov
test
and
mov
out
dec
jne
cld
mov
mov
and
mov
mov
sti
and
jb
shr
push
fs
ficom
mov
ds
pop
pop
xchg
js
les
mov
xchg
pushf
jmp
or
adc
fisubr
and
add
jle
add
fnstsw
adc
jmp
sbb
pop
jno
mov
ds
sbb
push
xchg
push
stos
mov
mov
or
aas
mov
inc
mov
jne
jle
xor
cmps
punpckldq
retf
mov
sub
cwde
pusha
sub
mov
push
push
xchg
xchg
es
xchg
inc
mov
inc
mov
(bad)
jl
jle
cmp
(bad)
ja
push
aas
or
add
ffreep
sbb
rcr
lahf
push
in
mov
adc
xchg
dec
mov
mov
loope
ror
xor
xchg
push
les
popa
and
iret
mov
xchg
outs
and
in
push
in
les
arpl
mov
jns
sub
mov
jmp
fimul
sbb
outs
adc
add
jle
inc
add
shr
push
push
int
int3
xchg
ja
jo
pop
pushf
push
(bad)
sbb
hlt
or
call
jns
cmps
mov
xchg
in
inc
pop
mov
pop
inc
ret
sub
add
sti
stc
int
mov
fs
cmp
pop
mov
scas
sub
fs
test
sbb
stos
inc
and
ins
pop
mov
adc
lods
xchg
fs
cwde
mov
popf
pop
es
enter
pop
add
xchg
in
mov
push
ror
xor
mov
ror
bound
call
mov
dec
jg
daa
arpl
sbb
int3
std
mov
(bad)
int
pop
or
test
std
ins
and
js
sbb
sub
imul
outs
cmp
dec
push
push
cld
js
data16
inc
stc
sbb
sbb
cdq
inc
pop
and
dec
in
(bad)
ja
pxor
inc
fldcw
adc
add
xchg
push
addr16
repz
stc
cmp
pusha
mov
out
inc
xor
xchg
lea
ficom
mov
mov
sub
call
mov
test
mov
jmp
and
in
(bad)
lahf
aad
adc
mov
jmp
mov
dec
jne
(bad)
stc
fstp
xchg
nop
ret
jae
sbb
add
mov
cwde
dec
xor
push
add
repnz
fcomp
and
jge
push
retf
pop
inc
fcmovne
cmp
cmps
add
pop
xchg
cmp
ja
jae
shl
loope
pop
xchg
mov
mov
inc
inc
(bad)
sub
add
mov
jae
repz
aaa
sbb
repz
cmps
push
fisubr
cmp
dec
or
xor
xchg
or
dec
sub
cld
jno
mul
and
scas
jl
cwde
out
scas
inc
push
xor
nop
adc
adc
enter
clc
rcl
adc
in
movs
jmp
xchg
xchg
fild
cmp
jmp
mov
pop
and
fwait
mov
push
mov
pop
adc
inc
pushf
gs
or
ins
adc
rol
pop
dec
xchg
cmp
pop
add
mov
sub
mov
mov
push
inc
xchg
test
repnz
or
and
cmp
push
add
sbb
dec
je
xchg
pop
sbb
dec
mov
sbb
mov
in
mov
pop
xchg
push
xchg
into
outs
cmp
ret
adc
fs
jbe
xor
test
sbb
pop
in
in
inc
cwde
das
and
inc
test
mov
mov
mov
out
ins
add
xor
mov
jmp
rdtsc
jae
add
or
mov
sbb
rol
inc
shl
mov
dec
cwde
inc
sub
jns
lea
ss
add
cmp
and
daa
and
fcom
pusha
pop
out
das
mov
mov
push
adc
ss
pop
cmp
ja
lea
shl
jecxz
cmp
cmp
(bad)
pop
sar
(bad)
ss
jne
dec
test
int3
clc
in
js
rcl
lahf
and
outs
dec
mov
retf
pop
call
push
dec
xlat
sub
cs
out
mov
pop
scas
ds
or
jmp
fild
test
jb
movs
push
push
dec
cmc
lods
int
cmp
push
test
and
in
push
(bad)
adc
or
pushf
fld
fisttp
adc
test
pushf
xchg
pop
pushf
cmps
mov
jae
or
jl
xor
mov
fld
(bad)
jns
fisttp
int
iret
out
jge
add
into
aaa
movs
and
sbb
push
out
jmp
test
xchg
gs
pop
xchg
push
mov
cmp
dec
stos
test
mov
add
mov
add
test
sbb
dec
push
xor
bound
sbb
int3
ins
cwde
push
sbb
add
mov
push
out
add
cdq
sub
add
xchg
mov
push
dec
cmp
pcmpgtb
ds
push
xchg
inc
pminub
lea
inc
into
pop
xchg
jmp
outs
es
mov
and
cli
fs
ja
sub
scas
sbb
push
into
repz
mov
rcr
dec
pop
cdq
xchg
movs
pop
cmps
(bad)
mov
ret
push
jns
mov
mov
loopne
int3
data16
xchg
out
jnp
out
xchg
xchg
xor
jmp
fdivrp
cmp
jecxz
dec
inc
mov
js
out
mov
mov
ss
add
mov
data16
ror
ins
xchg
fcmovnbe
out
xor
adc
test
push
fcom
rol
jp
mov
cmp
push
nop
pop
mov
clc
inc
test
and
adc
or
mov
xor
shr
or
dec
and
js
sar
add
cmp
sbb
dec
and
test
mov
outs
cmp
xor
cdq
xor
xlat
ret
outs
adc
mov
xor
(bad)
iret
loope
xchg
pusha
pop
fld
std
(bad)
mov
cdq
cld
stos
adc
mov
bound
jnp
iret
adc
adc
shl
stos
cmp
mov
lods
das
cli
xchg
retf
fldcw
fist
push
retf
mov
or
cmp
lods
daa
inc
xchg
inc
retf
mov
test
xadd
bound
out
cmp
mov
pcmpgtd
popf
into
test
xchg
push
test
fidiv
or
push
out
xchg
aaa
adc
mov
sub
out
cmp
loop
loope
push
sbb
cmp
and
fisub
sub
pop
(bad)
jnp
jne
shr
or
xlat
test
fadd
xchg
stc
push
int
push
push
mov
sub
int
xor
rcr
enter
mov
js
mov
pop
scas
push
call
xchg
xchg
mov
or
cdq
and
movs
ja
arpl
(bad)
popa
mov
fs
repz
mov
mov
adc
dec
data16
shl
rol
in
dec
add
ins
dec
sahf
xchg
ss
(bad)
mov
cwde
sbb
mov
jns
fsubr
add
ss
adc
pop
push
ds
(bad)
and
push
mov
shr
pop
ds
jns
or
out
dec
dec
sub
sbb
inc
clc
mov
mov
icebp
inc
repnz
sub
cmp
mov
add
push
in
jnp
push
dec
sub
or
ror
fadd
iret
xchg
ret
sahf
mov
pop
xor
sub
and
xchg
jnp
xchg
jge
test
or
dec
repz
mov
retf
mov
data16
sbb
push
cmp
cmp
inc
and
inc
cmp
cdq
mov
xor
mov
mov
sbb
xchg
pop
fiadd
sub
pop
repnz
jp
mov
loopne
pop
jbe
and
fistp
je
js
sub
jecxz
mov
inc
dec
pop
and
pop
mov
push
cmp
inc
or
ret
inc
das
pop
test
pushf
je
cmc
push
cdq
arpl
cmp
popa
inc
jp
lea
push
icebp
jns
jno
xchg
jmp
es
call
adc
ja
ds
pop
xor
arpl
or
movs
pop
test
idiv
out
cmp
push
retf
push
repnz
enter
push
enter
sbb
mov
xchg
sar
and
es
lock
call
test
arpl
mov
movs
inc
xchg
loope
add
fst
xchg
pop
outs
mov
out
fbstp
xchg
mov
xor
push
sbb
add
mov
push
mov
repz
aaa
and
jne
adc
mov
pushf
cmp
adc
mov
xor
inc
mov
sub
lods
mov
fidivr
mov
xchg
iret
inc
add
adc
sbb
aam
inc
dec
sub
mov
cdq
imul
scas
shl
adc
add
inc
aaa
popa
push
fst
(bad)
mov
push
add
stos
retf
out
xchg
pop
jle
cdq
adc
ficom
jge
xchg
fst
cmp
hlt
dec
sub
adc
movs
repz
js
retf
and
addr16
dec
push
stos
and
leave
inc
xchg
mov
dec
dec
mov
shr
ret
mov
iret
mov
sub
fiadd
mov
push
fdivr
ficomp
mov
outs
mov
push
test
outs
pop
cli
inc
pushf
mov
pop
dec
and
dec
cmps
mov
sub
rcr
lahf
adc
sar
mov
cmps
(bad)
daa
cmp
inc
cmps
xor
lods
and
scas
sub
nop
pop
scas
push
mov
jmp
sbb
icebp
imul
popf
cld
dec
pop
sbb
nop
aad
pop
dec
mov
fild
repnz
mov
mov
dec
test
test
xor
int3
(bad)
aas
rcl
lahf
in
fstp
into
push
cmp
out
pushf
and
cmp
scas
adc
pop
push
and
inc
push
cld
out
mov
cmp
movs
hlt
iret
daa
pop
pop
outs
aad
mov
mov
pop
jp
into
xchg
outs
fld
inc
ficomp
mov
scas
xchg
lods
jp
fwait
dec
jae
mov
(bad)
loop
adc
repz
popa
sbb
push
stos
push
cmp
sbb
xchg
fcmovne
aas
xlat
cmc
jb
jmp
xchg
dec
das
sub
mov
sar
jae
cli
inc
retf
xlat
push
imul
sub
or
xchg
(bad)
out
xor
pop
fmul
in
loop
(bad)
fnsave
clc
lahf
push
je
pop
cs
test
jno
mov
pop
push
sbb
retf
pop
xor
and
aam
mov
mov
mul
sub
pushf
inc
das
pop
mov
cmp
fdivr
shl
lods
sbb
sar
pop
push
les
stc
sub
dec
and
xor
sbb
push
dec
xor
push
xchg
sbb
jl
mov
ja
add
mov
ja
mov
sub
sub
lods
retf
inc
das
cli
push
ror
lahf
movs
add
int
cwde
mov
push
pop
arpl
ins
cmp
ret
xchg
sbb
fcom
and
mov
xor
mov
aaa
mov
pop
test
xchg
(bad)
sbb
xchg
out
rcr
add
dec
mov
jno
out
xchg
not
fidivr
or
mov
cmovne
sub
sbb
push
pop
xchg
fwait
jl
cdq
inc
dec
arpl
sub
cmp
outs
mov
pop
mov
mov
add
out
or
inc
push
in
xchg
and
fnstsw
jno
aad
mov
adc
sahf
stc
jecxz
jbe
xchg
xor
(bad)
std
fild
test
sub
iret
test
push
mov
call
mov
out
aad
jge
lods
cmp
shl
push
or
mov
sub
xor
neg
jae
jmp
call
dec
test
xlat
push
dec
or
cs
or
test
jle
out
pushf
xchg
push
out
nop
and
test
ror
sar
(bad)
ror
xor
sub
jo
push
xchg
and
push
sub
dec
jmp
cmps
sbb
push
jo
sub
pop
(bad)
mov
dec
(bad)
push
xlat
ss
mov
or
xor
cmp
jae
mov
loop
popa
pop
sti
fimul
sar
test
pop
xor
cmp
dec
or
add
mov
sahf
xchg
test
(bad)
call
inc
xchg
stos
sbb
mov
sbb
xlat
retf
scas
cmps
popa
lods
mov
pop
xor
stc
dec
(bad)
shl
aad
xor
mov
jp
iret
mov
adc
mov
pop
clc
scas
mov
sbb
pop
xor
loop
sbb
mov
sar
lods
call
sbb
cld
inc
ja
push
push
mov
lock
js
imul
je
sahf
pop
adc
inc
pop
xor
fwait
das
sub
sbb
add
in
and
cmp
push
test
ds
jg
jmp
rcl
mov
xchg
add
or
jo
xchg
push
pop
or
arpl
xor
cmp
imul
inc
nop
xchg
lahf
push
in
es
lods
jl
pop
ret
sbb
cmp
pop
icebp
mov
fimul
xchg
mov
pop
mov
ins
(bad)
cld
xchg
(bad)
adc
cli
inc
sbb
inc
inc
jmp
lods
jp
aad
cmc
sbb
fisttp
cs
movs
and
mov
loop
mov
cdq
ja
sti
popf
lahf
xor
jle
data16
lods
adc
xlat
inc
cmp
push
test
pop
or
sbb
sub
shr
pop
daa
outs
pop
aaa
nop
addr16
loop
fs
mov
fs
sar
or
stos
lds
ja
fdivr
ror
sub
push
nop
jecxz
sahf
in
mov
daa
pop
push
xor
lds
xor
inc
out
inc
das
fcomp
xchg
stos
fmul
push
push
jmp
jno
adc
mov
mov
enter
xor
inc
xor
adc
nop
(bad)
mov
jmp
xor
cs
jo
test
fadd
xchg
call
dec
push
mov
dec
or
inc
cmp
xor
dec
jnp
and
ss
push
in
lahf
lods
jmp
gs
dec
sbb
cmps
enter
sub
int
shr
test
mov
not
or
nop
and
mov
leave
cmp
in
jecxz
pop
jns
repz
pop
push
inc
dec
loope
push
out
add
xor
push
inc
jae
mov
xchg
xor
rcr
push
xchg
adc
pop
in
xchg
ss
dec
int3
jb
dec
sub
enter
xor
setb
sbb
nop
pop
dec
mov
movs
cmp
std
add
cmc
js
sbb
fild
mov
pop
sub
xchg
adc
push
sub
mov
mov
sbb
push
or
mov
xchg
or
pop
mov
nop
mov
(bad)
(bad)
or
sbb
jle
cmp
push
arpl
adc
pop
dec
sub
js
imul
adc
jo
stos
ret
and
aaa
pop
rcl
jmp
jge
movlps
cmps
repnz
movs
inc
loopne
mov
xchg
sub
ret
add
fdivr
pop
pop
pop
mov
ror
xchg
hlt
mov
outs
dec
shr
pusha
(bad)
mov
aaa
jmp
jp
mov
sbb
or
ret
push
pusha
movs
out
rol
lahf
pop
mov
stos
xor
xchg
cmp
popf
in
and
repz
pop
jnp
add
jmp
idiv
das
cmp
data16
sahf
xor
pop
xor
loop
ds
jg
sub
arpl
xor
sahf
cwde
jmp
dec
adc
mov
inc
(bad)
fild
fild
push
leave
or
shl
dec
sbb
sbb
xor
repnz
jnp
xchg
out
sub
stos
mov
lods
popa
sbb
lods
add
sbb
jbe
mov
mov
fcomp
out
dec
push
rcl
adc
cmp
fld
neg
inc
mov
sub
jg
sahf
cdq
sbb
out
test
sub
jge
mov
adc
push
mov
mov
xlat
add
in
retf
mov
test
test
xchg
jns
and
stc
xlat
xchg
sub
fbstp
cdq
hlt
ror
mov
and
fnstenv
xchg
push
lock
jp
inc
leave
shl
mov
pushf
cs
mov
pop
pop
jle
(bad)
out
mov
sti
add
dec
push
mov
jmp
(bad)
in
fcom
test
inc
lods
inc
mov
push
xor
adc
(bad)
nop
dec
push
imul
dec
js
ret
xor
push
sbb
cmp
movs
data16
cmc
jmp
xor
and
xlat
pop
cmp
xor
popa
lea
movs
xchg
push
sbb
loope
call
call
sub
push
xor
(bad)
div
loop
or
mov
mov
pop
xchg
(bad)
scas
(bad)
fsubr
mov
(bad)
test
push
into
jmp
jle
movntq
gs
mov
int
lods
loope
cmp
in
mov
push
das
or
and
lock
mov
mov
sub
(bad)
adc
ja
test
sub
or
aaa
push
push
fisubr
les
mov
arpl
sub
movs
cmp
ret
adc
xor
sbb
inc
aas
xchg
push
sahf
or
inc
(bad)
daa
sbb
lods
inc
or
call
fisubr
pop
add
adc
or
jge
add
js
and
mov
aad
adc
loope
int3
sbb
adc
adc
sbb
pop
mov
or
push
push
fdivr
dec
sbb
or
aad
cld
in
stos
xor
int
sub
scas
(bad)
(bad)
in
daa
cmps
fwait
(bad)
leave
out
out
into
in
sub
sub
xchg
inc
pop
aad
sub
mov
inc
icebp
add
add
stos
jmp
jns
mov
popf
je
mov
in
inc
or
retf
adc
mov
mov
dec
mov
rol
mov
fsubp
push
xor
and
test
sub
push
daa
mov
out
dec
outs
addr16
leave
jmp
xor
sbb
dec
aam
push
rol
dec
mov
out
stc
mov
fcmovnb
mov
sbb
fs
inc
stos
push
out
inc
pop
div
and
add
adc
and
int
pop
rcr
repz
(bad)
jno
cmp
push
sti
xor
sub
movs
xlat
pop
iret
(bad)
pop
dec
push
and
mov
pop
or
lds
dec
inc
pop
inc
clc
cmp
mov
jge
inc
jbe
cmps
or
aas
daa
cmp
pop
iret
ret
out
repz
fadd
mov
call
push
loope
mov
mov
inc
rol
jmp
jns
cdq
and
shl
adc
pop
ja
adc
je
lds
adc
sar
cmp
popf
fldcw
js
test
mov
jl
aam
xchg
adc
mov
add
mov
mov
sub
clc
sbb
cmp
mov
cmp
xor
ret
and
sub
nop
fadd
pusha
or
pusha
out
popf
mov
shl
push
mov
mov
mov
in
repz
cmp
mov
popa
test
push
jmp
cld
aaa
(bad)
mov
es
not
ins
xchg
cmp
xchg
mov
retf
push
jnp
lods
pushf
pop
push
xor
(bad)
fistp
dec
add
inc
rcl
jbe
mov
repnz
jg
mov
jmp
push
cmp
add
jnp
sbb
pop
std
shl
mov
adc
push
call
jge
hlt
adc
add
and
test
js
mov
adc
(bad)
cmp
ins
adc
xor
cld
push
call
fsub
dec
jl
mov
push
dec
mov
in
rcr
loop
sub
xor
mov
ror
jns
pop
or
pusha
dec
jecxz
pop
inc
jmp
frstor
je
and
(bad)
ja
adc
jae
or
or
and
mov
leave
data16
or
lock
push
sahf
sub
dec
adc
(bad)
adc
clc
adc
pop
jmp
dec
ds
hlt
shl
sbb
stos
shl
retf
lock
scas
stos
mov
add
lock
add
push
out
mov
fdivr
repz
js
mov
mov
pop
rcl
and
lds
jmp
and
fucomi
jno
cmp
or
clc
pop
(bad)
push
arpl
ret
add
retf
pop
push
push
jp
cmp
ffree
ds
jnp
cmp
push
lds
(bad)
push
test
enter
mov
les
movs
ja
add
xchg
(bad)
mov
xor
cwde
ins
xor
ss
jg
les
sbb
fld
jle
push
mov
xchg
dec
adc
mov
lods
jae
lock
dec
xchg
jns
aam
mov
loop
enter
fldcw
xlat
dec
pop
(bad)
sbb
retf
cmp
aam
xchg
jmp
fnsave
xchg
push
es
adc
push
mov
or
pop
dec
(bad)
dec
sub
aas
js
xlat
jnp
sub
into
cmp
or
or
into
cmp
xlat
pop
mov
xor
pop
sub
sub
mov
xor
add
ret
dec
pop
test
sbb
xor
lods
aaa
movs
out
dec
xchg
or
sahf
push
int3
dec
or
popf
or
aam
shl
shl
push
hlt
pop
push
mov
movs
mov
jmp
mov
pop
mov
test
js
pop
int3
jp
(bad)
and
fadd
and
xchg
hlt
std
movs
cmp
js
sbb
not
call
rcl
push
cmp
sub
imul
cmc
pushf
into
and
(bad)
aaa
mov
push
bound
mov
and
mov
or
dec
adc
clc
leave
stc
add
outs
xor
dec
or
pop
gs
sub
push
pop
les
aaa
outs
psubusw
pop
lds
mov
mov
xor
xchg
jge
sub
inc
inc
mov
cdq
imul
arpl
dec
mov
sar
adc
stos
js
adc
out
into
sbb
sbb
and
or
fwait
xchg
hlt
inc
xchg
in
mov
mov
mov
pop
lds
xchg
enter
push
lahf
mov
xchg
(bad)
leave
xchg
shl
pop
mov
shl
daa
ret
jnp
or
into
mov
out
js
mov
jb
sbb
aad
adc
inc
inc
out
test
cli
or
pop
pop
adc
cmp
cli
adc
mov
ret
jmp
imul
gs
mov
mov
cmp
out
fild
mov
push
shr
cmp
xchg
push
fs
(bad)
push
stos
mov
or
mov
jle
mov
fwait
in
xor
test
mov
icebp
ret
arpl
and
pop
popf
xchg
pop
xchg
pop
fnstenv
inc
pop
mov
das
xchg
fcomip
fs
mov
jl
mov
xor
mov
adc
dec
stos
pop
and
iret
daa
mov
xor
xchg
push
dec
test
test
add
mov
cli
(bad)
arpl
inc
adc
loope
xor
adc
mov
push
or
out
gs
cli
je
dec
outs
sub
pop
inc
and
movs
je
es
rcl
push
das
int3
push
stos
xchg
or
fisttp
loop
or
xlat
cmps
adc
mov
mov
fs
xchg
inc
test
ja
or
mov
(bad)
pop
push
std
test
fild
dec
push
mov
mov
fist
cmp
sbb
or
ret
pusha
push
pop
ror
fs
retw
fidiv
mov
dec
mov
dec
xchg
out
aam
xor
pop
xchg
out
adc
push
(bad)
and
jmp
mov
push
ds
jl
lods
(bad)
xchg
(bad)
xchg
hlt
fidiv
xchg
mov
out
loopne
mov
xor
(bad)
sub
adc
call
mov
and
push
mov
cli
mov
punpckhdq
mov
popf
xor
xor
xor
(bad)
sahf
xor
into
ficomp
sub
inc
(bad)
or
in
fs
mov
push
jae
xor
jnp
ds
xchg
fwait
test
mov
mov
jecxz
ins
and
sar
sub
mov
cmp
shl
ss
inc
add
cmp
(bad)
jns
sahf
ins
jp
js
cmps
out
out
rcl
cmp
xchg
xchg
dec
loopne
mov
jb
scas
outs
xlat
shl
loopne
jle
(bad)
cmp
fsubrp
adc
push
in
lods
dec
fdivp
push
cmp
fist
rol
dec
rol
or
daa
xchg
aaa
jno
sub
mov
pop
mov
adc
idiv
cwde
xchg
sub
xlat
jle
mov
jo
mov
dec
xchg
push
aam
xor
cmp
pop
xchg
cmps
lods
out
mov
inc
aam
push
or
xchg
loope
ins
outs
jo
ins
dec
push
cmc
retf
loop
ret
mov
adc
ret
inc
jae
les
call
xchg
cmp
jl
cwde
jmp
jne
cmps
xlat
dec
push
ins
jne
jb
xchg
jae
xchg
cmp
neg
inc
gs
xchg
in
mov
and
adc
es
jns
jg
or
cs
cmp
(bad)
mov
mov
rol
retf
aad
fsub
loope
mov
fadd
inc
mov
mov
mov
(bad)
jbe
ins
pop
stos
mov
inc
ror
pop
(bad)
(bad)
in
mov
leave
fisubr
rcr
add
daa
cli
call
mul
cmc
idiv
pop
sbb
cmp
and
mov
shrd
jle
pop
cmp
mov
push
mov
lea
test
pop
pop
pop
fcomp
arpl
ins
cwde
dec
add
(bad)
iret
in
add
mov
sub
cmc
and
leave
not
(bad)
je
mov
mov
es
call
jg
pushf
xchg
gs
push
push
stc
mov
cs
ret
jnp
sbb
jmp
jmp
adc
outs
test
jb
mov
jecxz
cmp
aas
add
xchg
(bad)
das
lock
mov
scas
sbb
jmp
into
mov
sbb
inc
daa
jae
mov
out
mov
scas
push
stos
jns
fbstp
adc
repz
mov
jnp
movs
inc
jge
and
fcom
icebp
mov
mov
xchg
repz
adc
loopne
daa
adc
inc
es
ins
inc
int3
int
adc
cmp
jns
in
movs
rcl
xchg
sub
adc
xor
shl
pop
leave
jle
cs
xchg
and
jp
mov
fcom
mov
movs
mov
inc
(bad)
xchg
int
xlat
lods
gs
aad
mov
(bad)
xor
mov
mov
je
dec
getsec
push
xchg
outs
dec
sub
inc
mov
jne
(bad)
jns
xor
or
add
mov
jle
mov
lods
cmp
cmp
hlt
cmps
movs
ins
imul
call
mov
add
sub
mov
aaa
icebp
add
repz
mov
jl
push
cmp
xor
sti
xor
aam
jbe
adc
sbb
ret
mov
mov
add
jge
sub
push
jp
sahf
fwait
stos
arpl
jno
inc
ret
cmc
or
setno
jno
in
jne
xor
pop
jae
add
jmp
scas
jle
outs
jl
sbb
mov
hlt
(bad)
adc
pusha
daa
xchg
loope
xchg
mov
mov
sub
out
pop
shr
add
out
and
ud1
fs
pop
dec
and
inc
mov
sbb
call
mov
mov
add
jle
and
das
in
xchg
dec
cdq
mov
pop
nop
cld
nop
cmp
and
cwde
add
outs
mov
repz
dec
dec
mov
out
test
sbb
loope
mov
stos
ror
push
dec
or
into
dec
test
(bad)
adc
ss
xchg
mov
jae
xchg
addr16
loope
mov
data16
cmp
xor
das
mov
sub
movs
jg
xlat
loopne
jae
dec
jb
dec
cmp
push
stos
repz
mov
jg
sbb
ficom
push
jg
mov
call
repz
call
cdq
in
cmp
ds
or
mov
(bad)
pop
adc
sbb
mov
nop
mov
clc
arpl
sub
retf
xlat
lods
fdivr
mov
sar
and
adc
aaa
call
pop
mov
lea
aam
fist
jnp
jnp
imul
jmp
bound
dec
lock
sub
fimul
std
and
mov
mov
aam
js
leave
jp
push
or
imul
push
xchg
int
jg
lods
sbb
push
aad
sub
push
or
outs
sti
mov
dec
xor
fcomp
mov
sbb
movs
xor
mov
out
in
cmp
es
sbb
mov
jne
or
into
in
out
aad
push
adc
adc
cmp
mov
test
push
std
xchg
xchg
mov
push
or
xor
aam
and
adc
daa
and
jo
lods
cmp
div
cmp
out
mov
sub
sar
mov
ret
sub
xor
pop
sti
xchg
pop
inc
cld
jecxz
outs
xor
jnp
test
mov
or
xor
ret
adc
into
dec
icebp
ja
loopne
dec
ins
mov
scas
test
cmp
sbb
jno
stos
cmp
add
jno
dec
cli
or
add
cmc
adc
dec
cdq
xchg
jl
push
cld
mov
jmp
push
and
sbb
pop
sub
and
jne
xor
jle
ror
mov
stc
add
pop
rcr
daa
in
mov
out
stos
sub
(bad)
stos
cmp
pop
cmp
mov
dec
mov
pop
mov
fist
aas
mov
mov
ret
mov
imul
sbb
cmp
xor
(bad)
fdiv
(bad)
mov
lods
sub
sub
add
loopne
fst
sbb
lds
dec
xchg
jmp
pop
fldcw
and
mov
bound
mov
sbb
jnp
pop
daa
add
cmp
xchg
int3
jl
or
push
rol
pop
cmps
and
xor
xchg
int
sub
mov
mov
out
or
mov
and
retf
mov
adc
test
push
xchg
jo
aas
clc
stc
ret
dec
adc
sbb
or
pop
outs
or
push
adc
adc
xchg
mov
enter
push
lds
xor
mov
jl
adc
push
or
aas
mov
test
jae
mov
in
mov
pop
les
fadd
lock
lock
add
dec
adc
push
jg
dec
cmp
mov
mov
or
xor
shr
jo
loopne
inc
repz
xchg
sbb
sub
out
add
pop
lods
pushf
pop
dec
adc
adc
adc
scas
pusha
rol
shl
ins
dec
ds
or
xchg
cmp
fadd
into
movaps
fld
inc
xchg
xor
dec
imul
add
dec
jp
fcmovnb
call
inc
fdivr
movs
sub
inc
xor
es
aas
stos
and
sub
fsubr
jle
je
repz
clc
fst
sub
adc
inc
popf
lea
adc
(bad)
mov
xor
data16
out
adc
ret
(bad)
mov
adc
jno
test
cmp
jmp
mov
es
int3
jo
mov
retf
(bad)
hlt
into
and
cmp
popf
scas
pop
mov
iret
adc
loop
pop
xor
jnp
inc
loope
hlt
pushf
outs
inc
mov
scas
ficomp
and
jno
arpl
pop
sar
fild
push
mov
ret
push
cwde
stos
xchg
into
sbb
ins
add
mov
popa
addr16
sahf
sub
push
outs
dec
xlat
and
or
test
mov
ins
add
add
mov
and
push
ret
pop
adc
inc
pop
ss
fs
stos
xor
pop
mov
cdq
loope
rcr
mov
popf
sbb
iret
mov
dec
jo
mov
je
outs
test
repnz
into
mov
pop
mov
xor
mov
inc
lahf
out
or
xor
popf
xchg
xor
fs
je
(bad)
inc
sbb
adc
mov
cmp
imul
shl
outs
retf
hlt
push
pop
push
out
ror
mov
or
and
adc
cmp
out
mov
lds
outs
pop
pop
nop
mov
mov
leave
mov
mov
jb
push
adc
imul
movs
outs
leave
dec
fisubr
ret
data16
inc
push
push
pop
jns
push
ret
imul
ja
es
outs
mov
movs
pop
push
lock
ds
mov
lds
iret
dec
popa
fisttp
shl
or
mov
xor
stc
add
push
data16
xchg
mov
dec
mov
fistp
mov
push
push
out
jmp
(bad)
test
and
pop
pushf
inc
cmc
fiadd
adc
sub
loopne
dec
rol
mul
xchg
std
cmps
fdivr
xchg
mov
xor
call
adc
push
inc
loope
add
adc
(bad)
sbb
neg
xor
mov
inc
inc
push
retf
dec
and
mov
test
inc
int
es
sub
pop
sub
pop
test
pop
mov
sbb
adc
xchg
jae
dec
pusha
xchg
xchg
pop
push
cs
sbb
xor
lock
lea
sti
pusha
cmp
pop
push
cmp
xchg
fiadd
sbb
clc
adc
inc
neg
dec
push
mov
(bad)
mov
pop
jae
jg
sub
push
push
sub
inc
inc
popa
push
add
repnz
enter
adc
fild
sbb
cli
add
adc
push
mov
mov
xor
test
sbb
fstp
out
retf
push
sub
outs
stos
xchg
inc
pop
push
nop
pop
dec
or
jnp
dec
in
stos
pop
int3
pop
cmc
sahf
loop
xchg
mov
mov
sbb
sbb
daa
shr
gs
xchg
add
lds
pop
movs
cs
or
fst
dec
in
push
jmp
test
mov
sub
cmp
mov
in
scas
out
push
ins
test
movups
in
nop
(bad)
gs
xchg
jge
cmp
nop
dec
repnz
or
fild
sub
shr
or
cmp
adc
or
cmp
test
sbb
ret
sub
fcom
mov
in
mov
or
cmp
push
lock
das
or
out
sbb
rol
adc
jg
or
push
jne
mov
mov
jb
pop
push
sbb
dec
lea
push
inc
sub
mov
js
xor
xor
push
popa
push
xor
or
aas
pop
daa
aam
mov
or
das
push
loop
gs
leave
jecxz
scas
out
jae
test
call
cmp
aad
rol
pop
lahf
xor
and
pop
jmp
cmps
imul
icebp
sub
ss
xor
test
test
stos
in
mov
xchg
pop
nop
(bad)
push
jecxz
pop
inc
ins
(bad)
xor
add
es
shl
fnstsw
cwde
and
dec
add
popf
sub
lock
(bad)
jmp
mov
nop
cmp
xor
mov
mov
adc
ja
cwde
imul
add
sub
mov
mov
es
pop
add
and
push
rcl
popf
push
xchg
stos
popf
or
dec
addr16
jmp
push
mov
js
mov
jnp
mov
dec
xchg
xlat
inc
add
dec
pop
(bad)
call
addr16
popf
and
dec
mov
das
and
inc
loopne
ins
add
or
mov
int
pop
test
xchg
sub
fild
ror
add
xor
dec
test
and
jge
or
xor
pop
in
js
jg
jg
jle
scas
sub
push
mov
adc
mov
push
mov
inc
push
pop
mov
sub
mov
xor
add
inc
mov
and
fs
mov
cmps
inc
push
pop
cmp
cmp
(bad)
loop
sub
add
out
xchg
pushf
sbb
xchg
jae
add
(bad)
loopne
dec
adc
and
lahf
jl
rcl
hlt
cmp
jg
pop
imul
(bad)
mov
pop
jns
cmp
jbe
xchg
les
mov
out
inc
jg
xor
je
sti
cmp
jne
aam
inc
push
xor
sbb
adc
sub
fimul
mov
sbb
jb
mov
ins
ficomp
adc
mov
aas
and
inc
loopne
nop
adc
sbb
jne
mov
xchg
xchg
in
jle
dec
outs
sar
inc
(bad)
arpl
push
clc
jo
cld
ror
outs
movs
push
or
xor
mov
sbb
pushf
push
add
dec
clc
out
hlt
xchg
cmp
cmp
rcr
or
add
int
loop
mov
shr
push
push
(bad)
sbb
fsubr
fnsave
gs
arpl
inc
inc
mov
mov
push
das
push
in
xchg
(bad)
sbb
add
ret
sub
and
pop
fcmovne
int
xchg
xchg
dec
std
mov
pop
push
cmp
scas
push
xchg
xchg
es
xor
rol
mov
and
imul
sahf
(bad)
cmp
out
push
pop
lods
adc
jae
adc
ret
dec
mov
pop
jbe
fmul
pop
sbb
sub
pop
outs
adc
push
pusha
jb
std
repz
ds
mov
ret
gs
push
ror
xor
inc
scas
sub
call
xchg
mov
sub
pop
mov
pop
jl
add
(bad)
out
dec
(bad)
dec
and
cmp
push
cld
jmp
cmps
pop
cmp
pop
jb
inc
js
add
rol
int
data16
jnp
ds
cmc
or
sbb
dec
mov
imul
lahf
xchg
or
xor
xchg
cmp
clc
cmp
mov
pop
mov
pusha
jmp
pushf
cmps
jb
mov
aad
hlt
or
push
xlat
bound
adc
cmp
fdivr
cli
mov
gs
sub
mov
inc
(bad)
sbb
and
js
xor
movs
jmp
dec
adc
div
das
ins
shl
in
pop
dec
cmps
mov
pop
out
(bad)
imul
adc
into
cld
iret
out
outs
xor
adc
retf
movs
ds
add
mov
jl
xchg
mov
dec
jecxz
leave
add
and
shl
fwait
les
fs
cmps
and
jno
dec
iret
aaa
pusha
aad
jbe
cmp
stos
ja
mov
and
repz
mov
mov
mov
in
dec
lds
push
sti
mov
sub
in
xchg
push
adc
jecxz
xchg
imul
int
xchg
mov
mov
pop
add
dec
rcr
jl
cld
mov
push
inc
stos
sbb
fisub
pushf
jne
scas
ins
cli
pop
push
je
gs
jns
pop
lods
icebp
int
fild
xor
add
xchg
imul
fsubr
push
push
(bad)
jecxz
push
xchg
int
repnz
(bad)
test
xor
xor
jns
shr
mov
dec
in
pusha
sub
paddw
in
mov
fidiv
js
(bad)
fstp
push
sub
push
leave
lods
mov
outs
loop
fld
in
pop
cmp
lods
add
(bad)
push
retf
cmp
push
xchg
imul
add
(bad)
jg
cmc
ret
pusha
cmovp
mov
sahf
mov
mov
and
mov
rcr
dec
pop
and
movs
add
stos
loop
xor
shl
je
pop
push
into
mov
jl
inc
pop
pushf
div
cmp
pop
jno
push
stos
rcr
les
bound
push
pop
jg
sub
xor
or
leave
(bad)
cwde
ficom
mov
imul
or
sub
or
cmp
fldcw
mov
jno
push
out
fild
and
lea
push
lods
in
jmp
mov
dec
std
xor
add
out
outs
out
cmc
std
cmp
mov
mov
loopne
mov
add
or
dec
mov
mov
sub
dec
push
cli
loop
or
inc
and
mov
jl
dec
mov
call
sar
or
pop
inc
scas
or
daa
dec
fst
in
jae
push
jnp
out
cld
enter
mov
ds
popa
xchg
mov
xchg
xor
sahf
ror
fpatan
(bad)
(bad)
sbb
in
mov
repz
daa
push
mov
inc
fdivr
cmps
int
sti
pop
or
adc
daa
jnp
mov
rcr
jle
or
mov
pusha
fldenv
inc
push
cwde
jle
out
inc
test
push
mov
mov
addr16
das
inc
add
mov
inc
push
or
cs
pop
adc
xlat
xchg
outs
add
psubsw
jecxz
mov
rcr
or
add
xor
gs
xor
dec
retf
mov
jle
or
xor
cmc
mov
out
pop
mov
scas
add
rcr
scas
dec
jmp
rcr
adc
dec
mov
xlat
xchg
xchg
adc
sub
imul
fdivr
dec
je
xor
add
push
and
pop
int
cmc
in
mov
sub
mov
enter
mov
jle
mov
pop
or
fs
fisttp
nop
imul
mov
and
stos
daa
or
pusha
lock
daa
sbb
pop
std
adc
sub
shl
lock
pop
add
sbb
dec
ins
mov
or
dec
sub
jbe
xor
dec
push
not
xor
dec
cmp
mov
in
ins
mov
and
das
out
inc
loope
xchg
add
jbe
sbb
jge
inc
bound
add
pop
lahf
cli
cmp
sahf
or
cmp
nop
test
push
push
cwde
add
and
or
xor
push
push
push
jecxz
dec
into
scas
dec
fnstenv
xor
repz
and
adc
iret
mov
xchg
sub
xchg
retf
sbb
push
lods
cmp
fs
cmp
jae
cld
or
pop
jb
sbb
mov
mov
lds
sbb
pop
mov
cmp
adc
out
inc
ss
js
pop
outs
mov
data16
jne
pop
inc
jge
sub
lahf
xor
pop
stc
sub
dec
or
xor
fild
in
cmps
xchg
addr16
inc
inc
adc
ret
mov
mov
int
jle
dec
stos
or
xchg
push
fdiv
pop
xor
pushf
out
iret
add
std
sub
ficom
mov
push
jmp
adc
shr
pop
int
push
shr
xor
loope
in
loope
in
xor
pop
movs
loope
mov
cdq
js
add
jmp
jmp
and
mov
xor
lds
sbb
mov
adc
cli
pop
mov
ds
mov
stos
jp
add
cmps
cld
pop
shr
jbe
leave
jge
push
push
outs
sbb
jp
popa
test
mov
fcmovu
xchg
pcmpgtb
cdq
call
imul
sbb
dec
out
sti
jge
mov
in
ja
mov
nop
sar
push
inc
repz
dec
loopne
sahf
pop
iret
jb
and
rcl
popf
pushf
test
enter
adc
lods
in
mov
test
mov
lods
repz
adc
dec
and
fst
jno
sti
pop
scas
xlat
pop
fidivr
shl
sub
sar
adc
sar
sub
cs
scas
push
inc
or
int3
iret
or
pop
adc
leave
test
loopne
in
cdq
adc
into
jle
sub
into
add
outs
hlt
fcom
jmp
scas
stos
xchg
push
jmp
sti
(bad)
mov
scas
push
add
ficomp
xchg
mov
cmp
dec
adc
fimul
push
push
xchg
pushf
popa
push
stc
mov
aam
loop
or
push
stos
push
cmps
mov
xchg
lea
or
mov
dec
add
repz
sbb
inc
rcl
push
fsubr
or
sbb
dec
addr16
arpl
lahf
test
(bad)
sub
jge
int3
pop
popf
not
sub
jg
mov
pop
jge
cmc
outs
lock
loop
cwde
mov
leave
pop
jmp
fdiv
arpl
cli
push
sbb
dec
(bad)
pop
push
icebp
rcr
scas
mov
dec
cli
or
adc
sbb
cmp
gs
daa
imul
std
ret
add
hlt
cmp
(bad)
stos
ror
sar
fwait
test
pop
add
out
and
push
stos
ret
jns
pop
sbb
sbb
xchg
hlt
and
pop
jmp
mov
in
pop
inc
xor
repnz
(bad)
pop
mov
jbe
xchg
add
mov
mov
leave
popf
add
add
shl
xor
fist
push
enter
test
xchg
xor
sti
bound
xchg
mov
and
cs
pushf
lods
pusha
mov
dec
fldcw
je
push
in
int3
xchg
test
cmp
jae
arpl
xchg
rol
inc
ss
fs
pop
sbb
repz
cvtpi2ps
jne
cmp
add
or
ret
xor
lods
sar
test
dec
outs
mov
call
or
call
cmps
mov
lock
jp
cmps
mov
ins
sbb
ins
fwait
sbb
mov
jno
mov
push
mov
mov
outs
jmp
jb
add
(bad)
inc
mul
test
cmp
addr16
add
pusha
adc
sahf
test
xor
pop
adc
fisubr
pop
emms
les
mov
fstp
sar
es
test
scas
mov
js
popf
ja
jge
xchg
sbb
or
stos
jnp
or
sti
(bad)
cs
mov
xchg
fcomp
test
or
popf
or
cmp
mov
arpl
cmp
xor
sub
push
jns
add
imul
(bad)
(bad)
test
out
dec
mov
fld
dec
loop
popf
sub
cs
cmps
add
retf
xchg
jns
push
add
add
sbb
mov
xchg
pop
fs
pop
outs
loopne
jg
js
sub
mov
(bad)
jle
add
ins
mov
cmp
mov
fldenv
mov
gs
jne
dec
jle
sub
pop
test
cmps
push
xor
aaa
pop
pop
call
loop
jmp
mov
adc
loop
push
imul
bound
test
inc
into
nop
push
bound
(bad)
in
les
arpl
ds
stos
cld
fdivr
sahf
daa
(bad)
adc
xor
mov
mov
xchg
pop
mov
repnz
out
nop
mov
cmp
sub
sbb
pop
xlat
test
std
mov
cld
mov
jmp
sar
pop
xor
xchg
or
xor
fstp
sub
hlt
adc
xor
jmp
sysenter
mov
lods
xor
pop
jecxz
xor
push
popa
mov
ss
mov
jp
cs
xchg
adc
inc
xor
iret
jno
jge
ds
sub
xchg
xor
dec
stos
shl
(bad)
jmp
sbb
(bad)
test
test
movs
sbb
sbb
or
int3
cmp
addr16
js
add
and
dec
inc
jbe
sub
inc
adc
and
sub
test
or
jno
add
mov
jge
jmp
clc
lds
sub
sbb
push
or
jne
xor
loope
jle
xor
test
xor
or
mov
or
push
enter
out
movs
lds
mov
(bad)
pop
das
lock
cmp
jb
hlt
mov
add
push
cli
cmps
fs
mov
cmp
test
mov
ret
lock
sub
sbb
mov
fild
bound
stos
sbb
push
cwde
xor
icebp
cmp
inc
int
dec
xor
pusha
mov
dec
adc
fnstcw
cmp
sar
scas
cmp
jmp
inc
hlt
imul
jnp
lea
mov
sahf
outs
pushf
jne
jge
push
shl
dec
outs
jo
xor
jbe
es
sbb
adc
mov
xchg
std
ror
jmp
mov
jb
or
mov
fwait
push
mov
and
mov
cmp
les
mov
into
xor
jns
js
popa
and
test
sbb
cmp
sbb
imul
nop
out
pop
pop
ins
dec
sub
inc
mov
lahf
adc
loop
mov
cld
dec
push
mov
je
adc
xor
stc
jp
pop
aaa
imul
rol
scas
jbe
mov
int
movs
call
add
adc
and
shl
pop
and
sbb
ins
dec
shr
sar
mov
(bad)
pop
inc
fld
mul
adc
xor
out
sbb
popa
jae
sbb
out
clc
stos
mov
cmp
xor
subps
scas
cmps
rcl
sub
and
mov
scas
jo
fidiv
add
mov
test
sub
aad
ret
jns
mov
mov
in
mov
push
out
repz
jle
test
into
stos
ret
xchg
inc
cmp
call
das
jbe
jecxz
les
movs
(bad)
jno
mov
popa
xor
scas
(bad)
aas
(bad)
pop
mov
inc
push
out
icebp
jle
imul
jns
nop
xrelease
enter
adc
pushf
mov
xor
mov
jmp
js
lea
das
(bad)
jge
xor
add
fist
add
aad
jp
cmps
fadd
das
dec
stc
test
mov
jb
inc
aaa
mov
inc
sub
and
sub
or
adc
ds
jo
aas
movs
and
daa
adc
pop
pop
mov
mov
xchg
jg
out
sti
icebp
dec
and
pop
jge
fild
(bad)
inc
daa
or
aaa
ret
sbb
(bad)
movs
pop
cli
dec
cli
les
xchg
call
js
dec
jb
fdiv
xchg
pop
or
dec
cmp
cmp
aam
xchg
and
sahf
inc
and
mov
fbld
movs
xor
pushf
jns
xchg
lock
pop
das
and
ret
jno
or
outs
cli
jb
sub
add
xchg
in
pushf
cs
dec
test
ja
fstp
(bad)
and
adc
aaa
jo
mov
mov
gs
in
sbb
cmp
cmp
in
mov
inc
arpl
xchg
or
nop
das
aaa
repz
shl
or
pop
je
fidiv
enter
mov
inc
xchg
pop
xor
std
mov
jns
shl
fld
jl
repz
xor
dec
outs
jge
push
mov
das
sbb
xor
jo
addr16
sub
fsubrp
fbstp
lods
dec
(bad)
(bad)
or
iret
ss
movs
dec
lahf
test
repnz
or
ror
cmp
pop
ror
xlat
ret
pop
das
push
enter
data16
add
aad
sar
daa
jae
movs
fist
call
scas
in
in
adc
dec
lds
fucom
jb
loopne
and
sahf
xchg
out
mov
retf
test
mov
sub
fsubrp
fdiv
dec
jne
or
fcomp
not
shr
out
xor
movs
jg
aaa
mov
fimul
add
xchg
scas
inc
cli
aam
les
loopne
fwait
xchg
mov
stc
and
scas
int3
push
lea
es
sbb
mov
ret
retf
or
pop
mov
fs
xor
scas
cmp
sbb
int3
out
mov
repz
pop
fwait
cwde
cmp
test
xor
mov
cs
add
mov
xchg
sbb
adc
jge
xchg
mov
or
or
sahf
sub
mov
ja
push
cs
adc
inc
scas
bound
outs
add
mov
scas
pop
or
mov
imul
call
push
pop
stos
je
shl
cld
xor
lahf
pop
in
push
adc
bound
lea
push
int3
out
xor
rol
repnz
push
scas
mov
int3
pop
pop
push
int
icebp
in
pusha
push
ficom
jb
aas
iret
imul
dec
mov
aas
mov
jg
push
xchg
test
lahf
sbb
pop
jmp
inc
pop
mov
pop
aad
(bad)
(bad)
dec
fld
xrelease
scas
fld
pop
sub
ret
cmp
xchg
mov
data16
jg
jl
(bad)
jmp
std
sbb
addr16
iret
comiss
push
mov
int
mov
jp
adc
cdq
loop
add
sub
lods
push
inc
gs
xchg
in
adc
lods
movs
(bad)
pusha
jmp
sti
and
fiadd
sbb
test
inc
cwde
stos
mov
iret
loop
adc
into
xor
mov
movs
xor
ins
sub
inc
(bad)
fnsave
inc
cmc
std
xchg
call
push
add
cld
push
jp
arpl
and
jns
cmp
mov
sbb
test
mov
ja
out
xor
sbb
mov
out
push
pop
loopne
ret
pop
push
xchg
fldl2e
in
movs
pop
inc
dec
and
ds
adc
xor
jno
adc
xchg
or
pop
cmps
addr16
mov
lods
pop
rol
pop
xchg
stc
cmp
test
fst
iret
dec
mov
xchg
inc
int
outs
ret
cmp
in
call
imul
add
lods
add
and
jle
neg
scas
test
push
aam
clc
and
data16
neg
sub
iret
push
imul
sahf
enter
add
outs
mov
loopne
cli
pmulhuw
dec
add
xchg
and
out
jae
cmps
test
mov
outs
ret
add
mov
push
sbb
sub
jb
popa
push
push
retf
cmps
mov
adc
jns
fld
in
mov
pop
arpl
dec
fadd
dec
scas
jo
and
add
xlat
xchg
inc
dec
adc
inc
scas
inc
xor
or
icebp
std
loop
push
pusha
out
leave
sbb
shr
pop
jmp
cmps
push
fistp
pushf
xchg
mov
bnd
mov
int3
mov
jp
xchg
iret
ret
lds
mov
movs
or
ficom
fisttp
jmp
icebp
push
jns
(bad)
jl
mov
ds
int
sub
dec
nop
mov
dec
das
bound
mov
inc
ficomp
ds
rcl
sub
cmp
jbe
je
pop
xchg
jns
mov
add
mov
out
or
adc
pop
xlat
inc
cmc
mov
lock
popf
ja
pop
or
scas
inc
retf
popa
or
ja
mov
pop
mov
rol
cmp
cmps
sbb
and
pop
sbb
stos
ret
cs
sub
add
sahf
inc
sbb
leave
je
sub
push
pop
shl
cmp
adc
xor
or
jne
jnp
gs
jle
add
add
in
xchg
(bad)
sahf
cmp
int3
push
cmps
adc
repz
mov
sbb
xchg
sbb
push
test
and
push
in
jecxz
mov
mov
gs
sbb
cmp
pushf
les
fcom
pop
ror
mov
jns
icebp
ret
push
daa
enter
mov
fxch
fs
inc
push
out
xchg
push
cmp
in
lar
inc
pop
popa
dec
xchg
fs
in
sbb
or
cmp
xchg
aas
mov
jno
pop
test
pop
(bad)
stc
cmp
add
push
sbb
mov
push
and
jle
test
iret
inc
movs
xor
aad
popa
loop
mov
mov
mov
adc
adc
mov
movs
fcomi
mov
xor
ins
jno
inc
pop
stos
push
test
pop
jg
and
outs
and
lods
fistp
sbb
ret
inc
xor
add
mov
ins
loop
rol
out
movs
jmp
ins
clc
jnp
retf
push
daa
ret
sbb
xchg
cli
sahf
jge
adc
lahf
bound
xchg
not
jb
icebp
add
mov
pop
xlat
mov
in
dec
(bad)
js
out
fstp
dec
jne
or
sbb
adc
mov
daa
mov
aam
test
sti
popfw
jno
out
lds
sub
stc
in
cmp
ret
pop
push
ins
das
out
stos
stos
es
imul
push
lods
sbb
scas
cmc
adc
mov
inc
sar
mov
mov
jno
sbb
imul
push
lahf
dec
xor
jg
popa
inc
mov
mov
dec
imul
cmp
mov
mov
xor
call
(bad)
jnp
pop
cmp
retf
xchg
fild
aam
jg
sub
rcl
mov
dec
pop
dec
rol
repnz
cwde
imul
sbb
mov
scas
ds
xor
adc
push
sbb
and
inc
pop
popf
push
out
jns
mov
ins
dec
push
loopne
addr16
das
or
xchg
fsubrp
add
fsubr
mov
pop
pusha
cmps
xchg
cmp
mov
inc
jno
xchg
mov
add
cdq
test
sub
mov
xor
out
mov
and
rcl
sar
leave
pop
pop
pusha
leave
push
in
dec
xor
(bad)
icebp
add
stc
jns
add
push
jae
fnsave
cmp
fnstcw
push
lea
and
add
inc
sbb
retf
adc
js
cmp
and
rcr
push
neg
mov
sbb
push
or
jmp
mov
or
lock
sti
out
push
jbe
or
js
jbe
jmp
lock
fistp
lea
std
test
leave
fwait
sub
loopne
xchg
ror
adc
ins
movs
mov
dec
ins
ret
cmps
mov
jne
adc
sbb
ins
int
popf
xchg
jns
adc
fimul
push
in
jmp
scas
xchg
movs
movs
jo
sbb
cmp
cmc
or
mov
test
shl
mov
rcr
cwde
(bad)
adc
dec
loopne
arpl
cmps
shl
lea
jns
scas
jb
out
scas
inc
pop
dec
sub
xor
xor
mov
fmul
sub
test
cli
xchg
(bad)
fild
pop
movs
or
xchg
aad
push
jp
add
mov
mov
sub
push
movs
pop
jmp
jbe
repz
xor
ret
js
dec
fimul
sub
stos
inc
sbb
fisubr
adc
jmp
or
xor
inc
dec
adc
inc
int
push
adc
xchg
push
mov
sub
adc
mov
sbb
imul
nop
adc
dec
ror
cmc
clc
pop
int3
xchg
jb
iret
into
stos
inc
in
pop
popf
pop
lods
xor
pop
in
adc
push
xchg
hlt
mov
mov
scas
mov
or
inc
xchg
jae
bound
cmps
sub
jmp
std
mov
mov
cmps
adc
mov
cmps
jns
jns
arpl
out
iret
aad
hlt
test
sub
add
cmp
fcom
adc
ds
push
fcomi
sbb
inc
imul
pop
shl
push
cmps
push
adc
pop
push
loopne
cmp
or
xor
movs
ja
xlat
sbb
gs
xchg
movs
dec
jecxz
cmp
(bad)
mov
push
std
ins
dec
test
and
mov
out
pop
(bad)
dec
and
pop
(bad)
jmp
test
pop
xsha1
cmps
mov
jno
ret
nop
hlt
pop
ret
rep
(bad)
cmc
out
mov
push
and
add
call
(bad)
xlat
popa
fwait
lods
movs
adc
outs
sub
test
pop
and
enter
(bad)
fst
jbe
sahf
rcr
jge
leave
sub
adc
adc
fs
adc
aam
ror
adc
jno
ins
lds
je
imul
push
scas
mulps
jmp
push
jbe
dec
enter
adc
sbb
mov
out
xchg
in
pushf
imul
in
pop
ja
fdiv
mov
add
enter
fcomp
sbb
and
arpl
imul
cli
xchg
dec
lock
sar
rcl
(bad)
push
xor
std
push
mov
sbb
sbb
or
(bad)
je
stos
jno
mov
adc
add
lea
mov
push
pop
hlt
dec
jmp
das
inc
push
sub
pusha
outs
and
pusha
lods
(bad)
stos
pop
mov
add
gs
xchg
popf
mov
in
pop
pop
or
and
pmaxsw
call
xor
jbe
push
jne
mov
aam
mov
jp
dec
js
cmp
cld
lds
add
retf
imul
rep
es
add
mov
jne
dec
sbb
jo
dec
xchg
test
pop
xor
and
sahf
hlt
dec
fisub
loope
jae
push
pop
imul
pop
or
pop
(bad)
fidiv
push
adc
push
pop
mov
and
inc
or
cli
mov
das
mov
adc
and
fcomp
pop
or
adc
inc
xchg
xchg
sar
dec
leave
push
fimul
inc
(bad)
mov
popa
xor
test
and
jmp
movs
adc
dec
or
add
lods
sbb
xor
int
mov
push
into
pop
fcom
sub
add
fdivr
inc
mov
mov
imul
(bad)
mov
bswap
aaa
pop
and
fbstp
scas
nop
sbb
jge
pushf
popaw
sbb
mov
mov
aam
movs
into
xchg
sbb
dec
cmp
out
or
sub
inc
not
shr
jbe
out
pop
rcl
das
mov
clc
mov
pop
push
not
stos
xchg
stos
pop
fadd
pop
add
pop
mov
sbb
mov
neg
inc
push
dec
rol
sub
cli
ficom
icebp
mov
je
mov
dec
adc
popa
sub
cwde
jle
rcl
pop
int3
mov
lock
xchg
inc
mul
mov
out
xchg
xor
aaa
cli
retf
jbe
or
gs
xor
inc
bound
icebp
aad
stos
mov
in
pop
xchg
hlt
ins
mov
push
pop
clc
push
sbb
push
xlat
ja
lea
stos
pop
lea
(bad)
sub
icebp
jecxz
cmc
mov
lahf
repz
push
div
mov
bound
out
fst
sar
pop
pop
xchg
xor
and
dec
pop
inc
cdq
or
inc
sbb
push
push
out
pop
repz
mov
mov
sbb
inc
inc
into
mov
bound
rcl
inc
rol
push
iret
inc
lahf
ins
mov
cli
add
mov
out
call
loop
mov
mov
xchg
xor
jnp
inc
pop
movs
adc
dec
retf
push
dec
mov
loope
shr
gs
pop
pop
push
in
xchg
jb
sti
lods
pop
mov
retf
daa
test
pop
call
pop
daa
movs
sub
inc
sbb
shl
adc
mov
or
inc
mov
fld
in
jae
cmc
pop
mov
sbb
in
lods
jnp
movs
sub
mov
lds
fs
inc
fnstenv
pop
outs
in
mov
push
icebp
bound
out
fadd
ins
adc
leave
test
and
test
dec
adc
xor
repnz
pop
imul
cli
sti
fsub
push
sbb
imul
sub
jmp
jmp
ror
ins
push
mov
jae
ffree
jmp
and
pop
outs
or
dec
jne
mov
ins
mov
dec
mov
(bad)
xchg
icebp
es
sub
mov
call
mov
addr16
push
adc
int
xor
dec
xchg
popa
ret
ja
xchg
ror
adc
jl
lods
mov
jmp
and
in
jbe
xor
pop
mov
inc
push
sbb
jmp
aas
jbe
add
loop
fwait
int3
cmp
add
sub
dec
jmp
add
xchg
aaa
cmp
dec
mov
xlat
dec
sub
pop
fwait
and
mov
push
jp
out
popa
movs
xchg
into
jno
std
out
inc
mov
and
mov
jne
fidiv
retf
add
sbb
jge
xor
xor
lods
mov
outs
sub
ror
jmp
xchg
add
push
jnp
inc
jecxz
jnp
push
inc
lods
in
aaa
das
(bad)
je
mov
std
jg
(bad)
adc
cmp
push
sbb
xchg
cmp
inc
xlat
inc
inc
xor
push
rcr
cmp
adc
data16
cmp
das
fmul
pop
(bad)
lock
outs
push
push
ja
cmp
das
movs
pop
test
cdq
inc
rol
std
popf
add
mov
push
sahf
fcom
sub
imul
in
mov
outs
ficomp
ins
lea
sub
jne
sar
cmp
cwde
push
mov
push
lds
fisub
mov
enter
out
fld
cmp
adc
xchg
fwait
out
jae
mov
je
out
pop
into
cmp
inc
(bad)
and
sub
vandps
xchg
push
mov
add
mov
dec
adc
mov
mov
mov
pop
cmp
and
push
push
fsubr
mov
daa
jno
ficomp
std
add
mov
or
push
jg
loope
mov
add
and
std
jno
pushf
mov
loope
bound
jge
int
mov
icebp
cli
das
mov
add
test
fistp
adc
leave
dec
(bad)
mov
retf
mov
idiv
in
lods
leave
add
cmc
dec
sub
or
inc
or
(bad)
fwait
mov
arpl
adc
sub
in
push
nop
xlat
jg
ret
cmp
inc
or
sti
cld
push
stos
icebp
popf
inc
jmp
push
bound
daa
idiv
mov
out
cmp
shl
dec
xchg
test
repz
repz
push
arpl
jnp
ficom
dec
out
iret
loop
push
lods
sar
ret
cmp
push
jmp
xor
into
or
jnp
inc
sub
call
inc
pop
test
(bad)
adc
ss
lahf
loopne
das
call
sbb
aad
sahf
fstp
xor
push
add
call
js
pop
test
fs
nop
scas
pusha
mov
add
pop
mov
sub
ja
ja
in
mov
push
sbb
pop
adc
jo
adc
xchg
test
les
outs
(bad)
jbe
pop
imul
mov
add
mov
mov
clc
push
lock
pop
stc
jo
cmp
inc
xchg
or
or
pop
pop
test
in
xor
mov
pop
xchg
fistp
movs
mov
adc
jo
daa
pop
mov
rol
shl
cmp
cmp
and
xor
ins
test
sub
mov
inc
mov
(bad)
je
fdiv
push
push
repnz
lods
int3
pop
push
je
arpl
jne
ins
lock
aam
pop
shr
(bad)
loopne
sbb
or
dec
mov
cwde
mov
and
pushf
jae
cdq
pushf
imul
aas
sbb
jg
cdq
sbb
aam
lods
sub
pop
ds
xchg
xor
call
jmp
xor
pusha
xor
dec
retf
(bad)
xchg
repz
repz
jno
cmp
mov
outs
int3
pop
rol
int
mov
and
pop
sti
std
lds
shr
mov
mov
fnsave
push
ss
jecxz
xchg
pop
xor
bound
sub
sub
push
mov
dec
rep
ja
jo
fld
jle
mov
xor
cmp
and
fstp
lods
cmp
loope
dec
arpl
daa
dec
mov
mov
push
add
inc
aaa
mov
and
out
mov
nop
dec
xor
cmp
fsubp
dec
inc
sbb
fucom
mov
repnz
sbb
aad
sbb
in
(bad)
loopne
enter
cld
sbb
shl
xchg
lods
mov
in
push
sbb
not
sahf
xor
je
test
xchg
inc
ins
lahf
dec
jbe
cs
test
pop
les
mov
sbb
pop
mov
mov
jbe
jbe
add
fistp
adc
adc
jmp
dec
call
js
sar
add
mov
retf
jl
or
mov
xchg
push
inc
(bad)
sub
push
mov
cli
mov
les
mov
shl
call
test
inc
shl
out
cmps
scas
fs
adc
mov
stc
loopne
mov
push
nop
push
sub
shr
cmps
scas
aas
imul
cmc
add
cmp
dec
mov
es
neg
and
imul
imul
push
daa
and
mov
ins
aam
aad
addr16
jae
out
push
xchg
ret
popa
xchg
stc
jo
out
jnp
pushf
jg
ds
adc
in
jns
dec
loope
xlat
sub
push
(bad)
and
adc
dec
and
je
jae
je
fcomp
jae
mov
sbb
imul
(bad)
jmp
hlt
inc
xor
arpl
stos
push
sahf
and
push
iret
xchg
mov
xchg
or
mov
imul
fisttp
sub
test
ror
add
les
dec
call
iret
mov
ins
and
push
jmp
bound
cmps
xchg
lods
cwde
dec
iret
inc
adc
xor
lds
test
outs
jge
jne
inc
pop
addr16
loop
push
and
add
iret
pop
sub
adc
xchg
fild
pop
inc
arpl
or
mov
jo
sbb
push
cmps
xor
sbb
cdq
xor
adc
fstp
invd
arpl
mov
push
cmp
iret
out
mov
push
cmps
dec
pop
cs
mov
hlt
push
dec
outs
lahf
dec
push
mov
mov
xorps
dec
xchg
call
and
(bad)
dec
ret
movs
icebp
cmc
sub
in
sbb
das
jp
fst
fcmovnbe
mov
sbb
stos
cmp
idiv
std
nop
adc
scas
adc
xor
adc
inc
fs
std
out
inc
and
test
lods
xchg
sbb
inc
mov
and
ret
or
pop
inc
stos
test
outs
in
mov
mov
dec
iret
jns
adc
pop
scas
scas
loop
mov
mov
nop
mov
add
sbb
neg
retf
stos
enter
loop
jnp
aad
push
and
movs
mov
mov
xor
push
adc
fld
mov
test
int3
mov
sti
inc
mov
add
nop
out
fwait
adc
stos
mov
mov
jg
mov
mov
push
push
jb
outs
(bad)
xchg
pushf
cmps
addr16
ror
outs
jmp
jb
mov
aas
cdq
ret
fs
pop
push
repz
test
mov
add
out
push
add
movs
inc
in
pop
cmp
push
push
add
push
mov
imul
inc
mov
cmp
lea
fcmovbe
loope
push
jmp
ja
cdq
sbb
or
call
dec
(bad)
xchg
push
mov
jbe
sub
xchg
jl
(bad)
call
je
cmp
jl
mov
vcvtps2dq
movd
push
das
call
ret
inc
in
(bad)
cmp
ins
add
cmc
jecxz
inc
jb
jle
int
cld
xor
sbb
sub
xor
or
cli
mov
sbb
popf
stos
lods
stos
imul
test
cmp
aas
jmp
pop
jge
ficomp
mov
mov
cdq
pop
fwait
cmc
les
jns
popa
mov
dec
test
sbb
pushf
outs
fidiv
jbe
cmp
jge
mov
xor
push
mov
mov
in
sbb
jecxz
add
pushf
and
sbb
es
call
adc
add
push
mov
out
inc
or
push
fstp
pop
clc
push
fsubr
jno
fisubr
fucomip
not
retf
inc
xlat
into
aas
and
bound
adc
mov
clc
stos
(bad)
push
cs
pop
sbb
dec
jne
inc
mov
rcl
les
push
fwait
je
fs
cmp
aam
pop
cdq
xchg
cli
mov
xchg
pop
ffreep
or
cmp
adc
jmp
cmp
xlat
jge
sub
adc
jnp
xchg
in
dec
lea
stos
xor
push
pop
jmp
and
inc
(bad)
mov
scas
inc
xor
pop
cli
sti
fstp
pop
fild
xchg
scas
nop
sbb
(bad)
pop
cmps
jo
sub
sbb
fimul
xor
bound
add
aad
fdivr
mov
push
jp
inc
pop
xchg
push
sbb
sahf
stos
dec
jno
fist
hlt
pushf
in
xchg
stc
sub
fsub
repz
lahf
push
xchg
scas
in
or
sbb
xchg
cmp
pushf
mov
ja
stos
inc
xchg
cmp
ja
xchg
mov
jns
sti
pushw
xchg
pop
inc
xchg
mov
adc
jae
fdiv
in
sub
and
jge
xor
(bad)
sub
cld
inc
fnstcw
xchg
in
cwde
ja
jp
movs
sub
xor
hlt
mov
aam
pop
jge
add
dec
dec
or
rcl
cmps
jo
js
hlt
sbb
pushf
leave
bound
out
push
leave
jo
sbb
sub
aad
imul
cmp
in
add
loopne
jmp
xchg
jnp
mov
cmp
scas
out
inc
cmps
int3
scas
sti
fisubr
aas
push
mov
ror
mov
lock
xor
cmp
and
cs
xor
jecxz
fiadd
pop
retf
fnstenv
mov
mov
aas
addr16
sub
sbb
jmp
and
out
sub
fdiv
in
jg
sbb
push
jb
xchg
popf
sub
adc
jmp
fdiv
push
test
push
into
sbb
stos
and
adc
inc
stos
mov
sahf
cmp
test
sbb
icebp
cmp
std
cmp
push
xchg
nop
push
scas
(bad)
std
xchg
(bad)
popf
shl
inc
mov
idiv
aad
lock
out
and
popa
xchg
add
outs
inc
pop
jne
pop
out
out
ins
mov
mov
mov
mov
pushf
adc
fdivr
cmp
jg
pop
jmp
int
pop
adc
in
pop
js
dec
xor
sar
jns
sbb
scas
cmp
test
outs
pop
loope
nop
das
fdiv
or
pop
pop
pop
outs
arpl
out
pop
in
neg
cs
mov
imul
xor
pushf
outs
cmp
add
cmc
jns
mov
and
jno
dec
inc
loope
xor
(bad)
retf
stos
je
sbb
inc
dec
lock
add
fistp
fidivr
or
sbb
push
retf
imul
cs
xor
enter
js
std
ficomp
pop
outs
lods
add
fwait
xchg
movs
fwait
push
jmp
dec
mov
push
(bad)
(bad)
or
ja
sbb
inc
inc
in
mov
xchg
mov
add
mov
sub
bound
xchg
nop
test
jb
cmp
shl
xchg
retf
test
pop
dec
pop
xor
js
pop
jl
mov
ret
in
inc
mov
js
mov
repnz
sub
dec
out
out
aam
loope
scas
pop
jne
mov
in
rol
cmp
mov
mov
aad
mov
inc
pop
scas
mov
jmp
xor
or
adc
cbw
sbb
sbb
jp
ret
mov
ret
ds
in
iret
or
push
imul
mov
pop
ins
inc
jb
xor
(bad)
into
and
dec
adc
fwait
int3
fild
or
xchg
and
xor
mov
xchg
xor
enter
cmp
aaa
xchg
loop
mov
cmp
push
repnz
cmc
xchg
mov
mov
inc
xchg
jge
or
cmc
fs
mov
addr16
pop
hlt
sbb
aad
jbe
popa
mov
clc
pop
mov
stos
sbb
not
cmp
bound
out
loopne
retf
add
dec
xchg
xchg
and
inc
fild
and
adc
(bad)
jb
cdq
test
fwait
adc
fmul
inc
jmp
xor
js
fdivr
test
fs
fimul
and
jmp
cmp
pop
mov
push
popa
aad
test
mov
fwait
mov
not
icebp
ror
jns
cmp
jp
ins
shl
sbb
dec
adc
jmp
sbb
jmp
pop
cmp
push
mov
mov
xor
das
adc
push
test
xchg
dec
mov
mov
data16
pop
or
test
test
jno
(bad)
mov
nop
out
test
or
(bad)
and
lahf
test
fucomp
cmp
imul
out
mov
movs
add
or
push
jb
dec
call
mov
in
sbb
adc
rol
inc
jl
lock
jl
add
or
cmovle
mov
lds
cmp
pop
shl
imul
int
fidiv
push
(bad)
jns
ror
ins
mov
fld
mov
cwde
pop
xchg
jl
lock
sub
popf
addr16
pop
or
xchg
and
cli
cld
inc
adc
mov
xor
sub
sub
or
nop
stos
(bad)
and
fwait
or
cmp
pop
outs
repnz
repz
and
jmp
stos
test
push
out
cdq
sar
lea
int
outs
das
cmpxchg8b
sub
sahf
xor
loop
(bad)
push
sub
daa
retf
push
pop
jmp
jmp
inc
mov
sub
(bad)
jbe
inc
inc
xor
mov
push
movs
or
and
and
clc
mov
cmps
inc
add
jmp
into
mov
mov
jle
and
fst
xchg
fs
rol
mov
mov
xlat
fisttp
ja
cmp
stos
ret
and
test
push
ret
dec
fwait
sub
xor
or
push
mov
fstp
out
dec
mov
(bad)
fmul
sar
fld
mov
jge
(bad)
icebp
in
mov
jp
push
mov
pop
shl
adc
lock
inc
pop
pushf
push
push
repnz
cmc
mov
cmps
icebp
xor
add
cmc
lea
(bad)
adc
jno
mov
loopne
mov
or
jae
dec
fld
cmp
repnz
icebp
outs
aaa
or
shl
mov
cmp
pop
sbb
mov
push
push
mov
xor
sub
dec
cmp
push
rol
pop
and
mov
inc
inc
cmp
inc
aad
movs
lahf
cdq
sub
gs
adc
ss
leave
(bad)
push
mov
jmp
leave
xor
daa
sbb
xor
push
enter
sbb
inc
dec
pop
ret
inc
push
and
js
rcl
cmps
inc
pop
mov
jmp
pop
cmc
mov
stc
mov
lahf
idiv
sbb
dec
out
inc
cmps
cmps
aam
jmp
jo
(bad)
mov
jb
pop
push
cmp
fwait
push
cmp
jg
shl
xor
inc
cmp
(bad)
mov
add
loope
(bad)
out
sbb
dec
sub
push
push
pop
fisttp
mov
jne
and
push
jl
in
(bad)
xchg
dec
sbb
enter
clc
fldz
push
jmp
test
dec
mov
push
pop
push
lods
mov
out
lods
dec
pop
sub
stos
xchg
arpl
sub
and
push
jns
mov
test
popa
push
ret
pop
push
xchg
mov
loop
sub
sub
ret
mov
aas
mov
xchg
in
cmps
lea
out
xchg
pop
outs
push
lahf
scas
not
mov
mov
(bad)
jmp
mov
xor
cmp
mov
inc
jl
or
arpl
mov
xor
add
xor
xchg
add
xchg
sbb
mov
push
repnz
cmps
pop
lahf
ficom
test
fwait
push
(bad)
mov
in
loopne
stos
retf
ins
mov
jne
inc
push
mov
xor
inc
scas
xchg
aaa
(bad)
popf
or
dec
inc
xchg
sub
int
sub
inc
add
dec
sbb
daa
int
inc
(bad)
sbb
or
add
push
mov
xchg
sub
pop
in
popf
retf
lds
mov
push
movs
dec
cmps
jne
pop
dec
gs
add
xor
lds
adc
mov
xor
bound
idiv
mov
or
mov
sub
(bad)
mov
dec
mov
outs
loopne
or
fidiv
(bad)
aam
mov
mov
sub
loop
jmp
and
sbb
mov
mov
iret
arpl
test
outs
ins
jae
fcom
mov
or
std
mov
adc
mov
arpl
cwde
pop
and
cdq
fmul
mov
pushf
cwde
xchg
ins
inc
pop
mov
int
into
mov
jo
mov
movs
imul
retf
push
lahf
cmps
popa
or
or
(bad)
fbld
adc
into
sbb
frstor
popa
ficom
imul
(bad)
scas
cwde
inc
jnp
popf
dec
adc
sub
push
pop
jl
aam
imul
popa
ret
enter
xor
ror
push
pop
adc
clc
mov
test
and
dec
push
cwde
mov
jmp
and
mov
cld
cmp
lea
xchg
mov
test
out
pop
and
hlt
in
mov
loope
pop
(bad)
aad
arpl
mov
dec
jmp
imul
jle
jl
and
icebp
into
xchg
mov
(bad)
jge
test
mov
loope
lea
iret
dec
addr16
or
adc
cmp
test
stos
dec
add
mov
mov
inc
(bad)
retf
call
mov
in
mov
repnz
mov
clc
jno
sbb
jge
int3
push
lahf
popa
inc
adc
dec
aam
xchg
int3
imul
add
fistp
inc
jnp
inc
test
sti
ret
rcr
jo
jmp
popf
in
sub
aam
xor
xor
mov
push
mov
out
loopne
cld
jmp
push
and
push
xchg
inc
out
stos
push
push
stos
scas
push
sub
stos
in
lods
pushf
inc
nop
jns
retf
mov
xor
dec
test
sbb
mov
int3
rcr
fsubp
into
xchg
cwde
leave
div
dec
popa
xor
mov
mov
add
lods
lock
inc
out
mov
lea
rcl
push
or
mov
cmp
xor
jmp
test
xchg
pop
adc
push
jp
adc
inc
cmp
push
pop
fwait
jge
pop
xchg
push
dec
test
ret
mov
(bad)
mov
sbb
mov
les
mov
(bad)
les
ins
arpl
dec
fld
push
ins
f2xm1
adc
mov
sbb
lea
frstor
pop
call
fsubr
push
cmp
lea
push
cld
stos
jmp
ror
dec
sti
push
nop
mov
sbb
add
cmp
pushf
mov
jnp
inc
cdq
out
fstp
retf
jmp
imul
int3
xchg
mov
sahf
arpl
jae
ja
xchg
out
hlt
sub
mov
out
dec
shr
add
(bad)
mov
ds
sub
sbb
cmp
cmp
loop
shl
mov
imul
ja
out
jge
movs
stos
cmp
lds
mov
daa
jl
aad
pop
dec
scas
lock
addr16
and
jle
cmc
push
cmp
mov
and
add
push
lock
jbe
cmp
sti
arpl
test
in
add
stos
(bad)
xchg
pusha
fidiv
stc
sub
in
test
mov
repz
jge
mov
outs
mov
push
aas
pop
pop
adc
test
int
cmps
fbstp
je
adc
jl
inc
mov
sub
scas
mov
mov
sbb
push
adc
les
into
xchg
push
push
in
neg
mov
adc
add
setg
sub
and
jp
jb
sub
shl
adc
lock
in
sbb
sbb
call
je
pop
sahf
stos
test
pop
rdmsr
test
ins
sub
cwde
pop
inc
inc
pop
fs
rol
dec
ss
and
(bad)
hlt
add
repnz
iret
push
pop
mov
outs
jne
jno
(bad)
ins
sbb
outs
pop
hlt
cmps
les
(bad)
aaa
jle
push
push
cmp
mov
rcl
mov
pop
pop
mov
enter
pop
icebp
push
movs
addr16
div
movs
xchg
mov
sbb
test
ins
add
cmps
mov
pusha
(bad)
push
(bad)
sub
sub
out
adc
or
jno
je
aaa
cmp
mov
les
xchg
adc
jae
imul
xor
xor
popf
mov
lods
push
and
pop
(bad)
nop
daa
jo
xor
das
pop
sub
xor
nop
imul
es
aaa
jmp
out
gs
daa
mov
pop
push
stc
xlat
rcl
jmp
mov
(bad)
or
outs
add
pop
inc
add
ss
sbb
ror
outs
les
push
mov
idiv
leave
int
or
or
stc
cdq
mov
inc
mov
pop
add
lahf
adc
push
unpcklps
and
xchg
std
popf
and
mov
or
mov
cmp
arpl
ror
bound
sti
test
jg
mov
das
idiv
pushf
mov
loope
cmp
push
adc
push
mov
jle
daa
sbb
pop
ret
das
test
in
push
xor
fnstcw
popf
pop
mov
and
in
outs
mov
or
add
xor
call
pushf
jecxz
std
push
rol
fincstp
ss
jno
cmp
cmp
jge
pop
dec
and
mov
inc
rcl
arpl
sub
pop
push
into
je
mov
pop
mov
mov
int3
daa
out
cwde
mov
fs
in
and
cmc
mov
mov
cmc
in
fs
mov
and
xor
mov
sbb
jne
push
xor
add
cld
lds
iret
popf
xchg
add
mov
mov
cli
arpl
stc
loop
ins
cmp
addr16
sbb
jp
(bad)
push
cmp
mov
inc
adc
mov
(bad)
dec
sub
pop
lea
xor
ret
add
dec
or
(bad)
mov
xor
or
jle
scas
fcmovnb
push
loop
div
shl
pusha
and
fcomp
out
sahf
mov
movs
(bad)
push
sub
popa
enter
and
inc
out
pop
inc
ins
pop
leave
push
call
inc
ret
jmp
aaa
or
adc
(bad)
jne
movaps
sti
test
sbb
(bad)
es
mov
pop
das
into
scas
add
sub
call
jle
sbb
jnp
xor
hlt
repz
mov
adc
add
ds
xor
xor
loop
in
dec
cmp
adc
adc
stc
sub
ret
xchg
jns
jns
mov
lods
add
mov
fs
push
in
xchg
sahf
inc
pushf
into
in
daa
test
ins
sbb
dec
enter
popf
std
sbb
bound
fsubr
ins
test
sar
dec
dec
xchg
out
scas
loopne
cmp
clc
(bad)
sbb
jmp
seta
add
addr16
dec
jno
lea
outs
ins
pop
cmc
fcomp
xchg
cli
xor
push
shl
scas
add
(bad)
ror
or
lea
dec
ja
in
std
ret
jge
rol
fwait
jge
fild
std
lock
xor
cmc
sub
fldenv
jmp
aam
dec
xchg
inc
ss
sub
jmp
mov
shl
sbb
mov
bound
xchg
push
cmp
and
(bad)
(bad)
fucomip
fdiv
mov
mov
jns
mov
shl
jmp
jbe
jmp
cdq
retf
push
std
mov
xor
or
jl
and
mov
stc
dec
aam
or
mov
xor
sub
dec
add
fild
dec
mov
pop
lods
addr16
jl
rol
iret
pop
int
mov
jecxz
lar
scas
mov
ins
dec
(bad)
sub
lods
icebp
dec
pushf
push
(bad)
test
gs
add
sub
dec
test
add
mov
inc
jne
cmc
inc
addr16
push
aaa
inc
movs
jmp
and
adc
cld
call
test
lods
and
outs
scas
push
daa
sub
xor
les
jle
pop
fidiv
push
sbb
jne
adc
xchg
cli
dec
out
push
scas
ds
inc
ds
addr16
inc
xchg
mov
cdq
pop
dec
loop
iret
mov
ins
or
int3
(bad)
xor
inc
sbb
pop
push
push
adc
mov
push
cdq
std
fcomp
jns
popf
test
(bad)
xchg
sbb
ret
sbb
outs
cld
xor
inc
leave
sbb
std
cmp
jae
push
sbb
adc
jmp
cmp
sbb
in
out
mov
mov
sbb
cwde
jl
xchg
out
sub
mov
add
jecxz
add
cmp
adc
dec
icebp
cld
ins
(bad)
hlt
dec
xchg
enter
lea
and
xor
sub
pop
(bad)
fcomp
ss
scas
adc
cwde
cwde
cmp
icebp
xor
and
pop
pop
push
pop
data16
pop
ror
int
pop
mov
push
pop
xor
test
jecxz
mov
add
cmp
push
jnp
jbe
repnz
inc
xor
jmp
(bad)
aas
sbb
jbe
mov
fs
out
pop
add
sbb
std
pop
aas
cmp
gs
(bad)
in
jg
into
and
aad
mov
ds
lods
cmps
je
sbb
push
dec
and
pop
mov
adc
sbb
sbb
enter
sahf
adc
sub
in
dec
and
cmps
sahf
mov
or
sub
or
mov
sbb
jle
push
jp
jmp
xor
rcr
sub
(bad)
mov
push
mov
xor
inc
dec
pop
mov
pushf
mov
stos
sub
aad
fimul
fdivr
pushf
sti
ror
daa
stc
arpl
jbe
pop
cmp
xlat
sub
jns
dec
or
gs
push
arpl
dec
pop
mov
lock
cmp
adc
nop
sub
add
mov
mov
pushf
dec
and
sub
sbb
and
add
fdiv
je
stos
aas
pop
pop
loope
aas
int3
inc
mov
xor
leave
mov
js
mov
jle
cwde
xor
push
aaa
add
lock
js
add
inc
inc
and
sbb
aaa
mov
push
mov
or
pop
mov
and
sbb
dec
inc
mov
sub
daa
sub
fnstsw
outs
cmc
or
dec
xor
out
mov
into
div
mov
scas
add
pop
call
lods
into
repz
xor
loop
scas
pusha
sbb
mov
mov
add
mov
aas
call
and
mov
mov
(bad)
stos
bound
stc
lods
shl
in
sub
je
dec
pop
and
data16
dec
les
cld
sbb
pop
inc
inc
test
xchg
push
add
mov
pop
and
mov
adc
mov
or
jne
in
rcr
fild
rcl
sbb
mov
or
or
cmp
mov
repnz
inc
mov
ins
pop
mov
mov
xchg
loope
ds
idiv
mov
jbe
mov
or
inc
sub
loopne
movs
cdq
ror
daa
xchg
loopne
push
or
mov
stc
lods
fldcw
xchg
pop
outs
ss
in
mov
mov
sbb
dec
addr16
cmp
out
mov
call
test
arpl
push
scas
add
mov
inc
mov
imul
mov
out
sub
mov
ret
sub
pop
cli
(bad)
and
repz
sub
pop
push
jno
in
adc
rcl
in
leave
jl
call
sbb
or
mov
or
mov
mov
into
mov
inc
cmp
fist
push
mov
inc
stc
cmp
ins
popf
je
inc
adc
je
and
push
inc
lds
mov
loope
dec
lock
mov
fild
cmps
int
repz
enter
fnsave
pop
mov
rol
out
or
xor
adc
add
cmp
test
xchg
pop
pop
mov
push
mov
test
aas
mov
test
daa
test
les
jmp
lea
mov
cld
add
cmc
call
in
daa
sbb
int3
repz
addr16
rcr
cmp
fnstenv
jl
jae
retf
pushf
in
inc
jo
fst
sar
dec
sbb
add
push
pop
and
mov
pop
(bad)
xchg
fsubr
fwait
pop
jp
sbb
cs
add
xchg
adc
loope
mov
adc
scas
adc
fild
je
xchg
sbb
(bad)
dec
call
(bad)
arpl
imul
sub
cmp
mov
fstp
movs
xor
add
jae
dec
jge
sbb
inc
and
and
xchg
mov
push
ins
and
call
out
dec
mov
movs
mov
inc
mov
dec
pop
dec
loop
stos
cmp
pop
mov
add
idiv
push
jecxz
adc
test
movs
xchg
dec
sub
out
imul
nop
mov
sahf
in
jmp
sbb
(bad)
or
outs
test
jne
inc
int3
mov
js
pop
dec
pop
and
cmp
adc
aaa
and
dec
push
lock
jae
xchg
jmp
sub
pop
cli
pop
rcl
in
jge
ds
pop
xor
repnz
lods
sti
das
lods
int3
mov
add
cwde
aam
in
cmc
loope
mov
xchg
xchg
retf
retf
inc
iret
fwait
xchg
pop
push
rcr
test
mov
sub
jmp
fcmovnb
loopne
push
repnz
fwait
out
ficom
dec
in
ror
lock
stos
test
loope
jmp
test
cmps
dec
add
dec
dec
hlt
rol
xchg
bound
cmc
fbld
(bad)
fcomp
jp
dec
cmp
inc
mov
aaa
dec
xchg
je
cmps
mov
scas
loop
mov
stc
xchg
xor
clc
imul
ficomp
pusha
push
pushf
retf
dec
arpl
loope
xchg
mov
sar
frstor
mov
or
js
and
cli
mul
or
mov
cmp
mov
daa
clc
mov
loope
mov
jmp
adc
dec
and
mov
jne
in
pushf
out
cmp
enter
mov
and
jp
(bad)
scas
pop
push
jb
pop
sub
out
imul
popa
xchg
adc
or
std
xor
dec
jne
jnp
xor
nop
cmp
jne
xchg
inc
out
mov
mov
or
lods
xchg
push
add
cli
dec
inc
test
adc
int
out
mov
and
movs
sub
ror
aas
or
dec
mov
add
fmul
ss
inc
pop
mov
rcl
dec
jns
jl
fsub
outs
loope
lods
jae
dec
mov
inc
enter
inc
cmc
cmps
lds
into
retf
mov
mov
jnp
es
or
iret
push
adc
shl
push
xchg
rol
(bad)
mov
xor
test
xor
mov
into
fwait
aas
repz
bound
xor
sar
inc
call
loopne
mov
sub
mov
adc
mov
sar
pop
fdivr
ret
test
bound
nop
or
pop
cdq
cwde
mov
mov
hlt
mov
ret
cli
out
inc
test
or
cld
mov
into
loopne
sar
call
mov
mov
inc
faddp
cdq
inc
ins
dec
sub
int3
pop
pop
outs
dec
or
(bad)
mov
mov
dec
scas
or
cmp
mov
lea
and
fist
sub
add
dec
(bad)
shr
add
inc
ret
pop
daa
stc
sar
lods
js
and
not
lahf
mov
dec
and
sbb
inc
xor
outs
pop
mov
aaa
loope
push
cmps
imul
mov
(bad)
jg
pop
movs
idiv
or
mov
je
hlt
mov
cmp
int
or
inc
mov
mov
and
outs
add
and
inc
stos
jbe
out
imul
and
adc
sbb
sar
scas
adc
or
popa
dec
inc
lods
jb
cmc
mov
push
sub
scas
shr
jae
arpl
sub
or
int3
retf
dec
sbb
cld
mov
mov
out
add
fcmovne
mov
ret
xchg
xchg
fs
aas
out
sti
inc
lods
sahf
xchg
and
mov
sub
nop
mov
jo
jnp
mov
jp
repz
mov
popf
xchg
dec
push
fnstsw
pop
mov
ret
sti
test
inc
stos
sbb
cdq
jno
ds
jp
dec
cmp
inc
mov
iret
jb
cdq
or
xchg
push
shr
xchg
pop
mov
mov
push
popa
jp
mov
shl
sub
sbb
and
inc
clc
pop
bnd
jmp
je
or
adc
dec
or
dec
scas
outs
iret
les
ins
pop
leave
and
(bad)
ja
mov
mov
mov
mov
add
cmp
jbe
xchg
and
xchg
push
xor
mov
or
xor
cmp
iret
mov
jbe
xchg
pop
jmp
xor
loopne
push
rcl
jg
pop
dec
pop
retf
mov
out
test
mov
js
mov
xchg
add
cli
fcomp
sbb
xchg
bound
jns
dec
sub
ret
popa
jge
mov
ja
xor
jle
jp
cmps
dec
jmp
(bad)
sbb
dec
push
mov
mov
sub
inc
xchg
push
cld
(bad)
clc
cld
jmp
cmps
or
push
iret
cmp
inc
pop
dec
lock
int
sbb
add
mov
in
xchg
mov
push
jns
js
in
int
aam
inc
rcr
int
sub
pop
shr
mov
pop
in
xchg
mov
or
add
pusha
loop
in
lahf
mov
pusha
idiv
dec
aas
push
jb
add
and
or
mov
jns
addr16
mov
gs
jp
push
or
and
cwde
(bad)
pop
fcomi
pop
push
or
dec
cwde
(bad)
sub
loope
pop
sbb
jl
idiv
mov
xor
jb
jl
test
sbb
or
add
in
add
cmc
inc
dec
test
cld
out
pop
push
js
jo
mov
movs
xor
lds
sbb
or
rol
int
sub
jmp
cdq
nop
add
push
leave
cdq
out
mov
xor
test
fidiv
jmp
cs
ins
jb
adc
out
xchg
mov
jo
jecxz
cmp
daa
cli
add
fmul
push
cld
rcl
pop
push
ret
cmp
int
jbe
mov
stc
lahf
add
and
mov
jnp
mov
sub
cmp
and
and
fmul
sub
outs
out
push
test
jns
jle
mov
shr
jmp
lods
cmp
rcl
sub
enter
xor
add
clc
(bad)
jle
dec
cmp
pop
sbb
ror
stc
inc
out
sti
cmp
mov
jle
add
mov
nop
fs
in
dec
ficom
movs
stos
adc
xchg
push
stos
ss
cs
mov
and
not
jb
xchg
call
pop
push
pushf
xor
inc
mov
inc
jl
mov
movs
xchg
jo
sar
sub
aad
add
dec
loop
out
outs
movs
popf
and
jle
mov
retf
mov
xchg
mov
gs
sub
push
pop
outs
cmp
mov
mov
dec
push
pop
xchg
fisubr
test
jnp
lds
neg
and
xchg
shr
cmps
or
(bad)
jmp
mov
sbb
cmp
call
xchg
sbb
test
and
cwde
pop
pop
lahf
lahf
outs
retf
int
in
or
add
lods
scas
leave
scas
in
out
imul
in
int3
mov
sub
mov
mov
push
jmp
enter
(bad)
mov
stos
dec
inc
ficom
jge
sar
sub
lods
stos
pop
sti
mov
push
outs
xchg
mov
cmp
fild
jmp
add
push
ret
pop
or
sub
call
and
push
push
out
push
test
mov
inc
ins
imul
mov
in
movs
cmp
loopne
xchg
lea
mov
pushf
and
aaa
pop
xchg
bound
jge
fst
pusha
dec
lea
mov
call
cmps
jae
adc
jnp
outs
(bad)
cld
mov
mov
inc
add
jae
in
cs
xor
xlat
in
ds
sahf
cmp
mov
jo
or
movs
adc
(bad)
fucomip
leave
jge
push
cmp
ret
xchg
aam
ret
in
sub
push
iret
jmp
(bad)
sahf
pusha
loopne
mov
inc
popf
arpl
push
dec
push
sbb
(bad)
(bad)
and
mov
movs
and
shr
xchg
addr16
jne
enter
jl
mul
mov
pop
loope
mov
jae
adc
jmp
jne
add
mov
in
xrelease
inc
imul
std
adc
dec
stc
xchg
addr16
dec
dec
sub
inc
dec
mov
call
mov
mov
cmps
bound
sbb
and
(bad)
jns
cmp
nop
loope
mov
push
mov
sub
(bad)
aaa
in
call
mov
xchg
xchg
cmp
lds
icebp
jg
xchg
lea
xchg
add
adc
sbb
mov
cmp
adc
adc
fcmovu
xchg
int3
clc
shl
sbb
mov
mov
mov
xchg
mov
call
lock
dec
shl
mov
ss
mov
call
dec
xlat
cmp
cld
lock
gs
les
push
std
jnp
xchg
cmp
push
push
cmp
call
mov
in
inc
jl
sbb
(bad)
xchg
pop
mov
push
lea
xor
cmp
ins
movs
fnstcw
lods
push
inc
shr
es
inc
cmp
mov
test
int3
lahf
out
mov
mov
sub
xor
leave
jl
jle
pop
pop
dec
lods
mov
mov
adc
inc
sub
ret
pop
pop
xor
das
pop
fs
mov
inc
call
and
cli
ret
enter
daa
lds
adc
cmc
retf
mov
jecxz
out
xor
dec
scas
xor
movs
int3
das
icebp
popf
ficom
mov
pop
std
scas
mov
pop
rcr
lods
sbb
fld
mov
push
jns
mov
out
movs
clc
lds
mov
add
jns
xchg
mov
mov
add
fdivrp
jmp
fs
xchg
mov
lahf
test
gs
fnsave
(bad)
std
rcr
leave
pop
xor
and
and
out
mov
hlt
jnp
in
xchg
je
rcl
add
ret
popa
pop
in
out
xor
push
inc
xor
or
jp
repz
idiv
sbb
(bad)
mov
cmp
jns
pop
into
or
cmp
sbb
pop
dec
xchg
push
ja
rol
fld
and
sbb
mov
lods
imul
jne
push
retf
pop
out
js
lock
pop
scas
and
jbe
or
xchg
movs
pop
pop
mov
mov
cmp
add
pusha
push
enter
stos
push
cld
call
cli
xchg
adc
outs
push
out
adc
inc
push
test
inc
jnp
pop
dec
movs
xchg
mov
pusha
dec
test
jp
lahf
ret
jne
mov
inc
jmp
pushf
xchg
jle
dec
cmp
lods
or
add
bnd
imul
cmc
mov
scas
out
gs
scas
mov
lds
sbb
or
push
dec
cld
(bad)
xchg
mov
sbb
(bad)
cwde
cs
enter
push
mov
xchg
cmp
and
inc
int3
icebp
cmp
dec
sub
sub
cmp
jp
out
dec
xor
and
add
jo
jmp
les
out
outs
or
jmp
xchg
outs
jo
shr
int3
rcl
inc
jge
daa
push
mov
and
adc
fisttp
popa
adc
jb
stos
jbe
pop
stos
pusha
xchg
mov
data16
inc
lock
sbb
and
or
fild
add
mov
pop
add
mov
xor
jne
dec
call
pop
clc
xor
push
stc
fist
pop
das
inc
neg
mov
ror
rcl
mov
add
popa
in
pop
(bad)
(bad)
jmp
jb
jp
cld
fidiv
sub
cmp
jmp
test
sub
daa
pop
cmp
adc
jg
xchg
fisttp
jnp
stos
andnps
xchg
xor
fistp
lds
les
xor
pop
inc
cmpps
inc
push
call
push
scas
mov
inc
mov
jae
push
aad
jbe
test
inc
pop
push
ins
add
cmp
daa
pop
std
mov
cmp
int3
inc
iret
add
ins
and
movs
xor
shl
push
and
sbb
inc
push
inc
nop
loope
outs
loopne
mov
jmp
cs
lds
dec
movs
push
xchg
imul
xor
mov
push
clc
xchg
jne
mov
and
inc
xor
push
sbb
scas
pop
fidiv
fisubr
nop
out
dec
jecxz
mov
lds
sbb
cmp
pop
movs
push
retf
fstp
popf
retf
xor
das
test
sub
dec
test
mov
stos
pop
repnz
pop
icebp
(bad)
inc
mov
(bad)
ds
dec
mov
and
aad
xor
inc
(bad)
fiadd
aaa
mov
test
pop
inc
aas
imul
push
test
jno
cli
movs
pop
repz
fwait
cld
enter
add
div
aam
stc
adc
call
adc
fisubr
call
add
les
inc
(bad)
clc
imul
in
cmp
lea
popf
out
imul
inc
xor
out
sahf
push
test
(bad)
gs
or
call
or
stos
mov
pusha
pushf
arpl
cmp
hlt
mov
push
mov
dec
popa
pop
(bad)
out
add
adc
jl
outs
lds
test
pushf
push
sub
das
dec
pop
add
mov
and
jae
mov
adc
dec
jbe
push
arpl
rcl
xor
jo
mov
loope
inc
xchg
ds
add
inc
pop
fstp
mov
xor
movs
popa
jge
in
push
dec
lods
cmps
nop
inc
jb
outs
gs
lahf
cmp
push
inc
xlat
ins
div
lods
enter
test
xchg
clc
xchg
dec
adc
cmps
adc
mov
pop
sbb
not
sub
mov
adc
jl
sbb
in
and
cli
push
jl
scas
repz
inc
(bad)
jnp
mov
mov
(bad)
add
or
sub
mov
pop
xor
push
cmp
add
fs
sbb
mov
pop
std
mov
mov
add
sbb
imul
cmp
cmp
jns
sbb
or
push
in
mov
cld
daa
rep
hlt
xor
or
add
mov
pop
pop
and
lds
pushf
fucomip
dec
adc
cmp
lock
fsub
call
call
sbb
jg
mov
test
xor
jle
out
cmp
adc
mov
clc
mov
out
outs
sub
and
dec
ud2
mov
mov
mov
mov
dec
mov
push
lahf
loop
out
dec
inc
stos
push
aam
enter
add
mov
cmc
sub
push
inc
push
in
in
inc
add
in
pop
lds
jbe
mov
dec
imul
jne
jnp
jae
bound
repnz
mov
and
pop
fsub
dec
test
enter
shl
in
jecxz
xchg
repnz
xor
outs
ret
call
xchg
mov
xchg
and
jmp
add
clc
in
and
pop
loope
jecxz
popa
add
in
jge
fsub
pop
or
ror
int
xlat
and
cmp
and
out
dec
lahf
pop
inc
fnstenv
jbe
sbb
fsubr
icebp
(bad)
fld
mov
mov
mov
pushf
sbb
inc
xchg
cmps
loopne
xchg
out
jp
out
icebp
push
adc
repnz
sahf
sbb
cmp
dec
xchg
pop
sub
jmp
sub
cmps
inc
mov
cmc
mov
lods
test
mov
mov
fisttp
sbb
test
pop
adc
in
cmc
repz
stos
pop
mov
(bad)
mov
mov
inc
popf
dec
dec
aad
dec
jo
or
ins
pop
js
fld
rcl
or
scas
mov
lds
scas
mov
mov
mov
nop
adc
icebp
loop
stos
ss
popa
sub
fwait
scas
cmp
test
mov
loop
dec
inc
mov
xor
int3
jno
xor
(bad)
mov
pop
adc
in
push
pop
jecxz
test
int3
pushf
das
pop
cld
pop
sbb
rep
inc
cmp
lods
jp
or
xchg
cmps
mov
test
sbb
add
jecxz
dec
sub
xchg
inc
sub
push
cli
(bad)
stc
ficom
pop
pusha
xor
fsubr
or
sti
icebp
js
jp
fistp
adc
push
mov
sub
js
sbb
dec
cmp
inc
outs
outs
or
push
and
dec
shr
pushf
fnsave
fmul
out
pusha
dec
mov
dec
fisubr
fxam
pop
adc
xor
pop
in
mov
cs
popa
cmps
mov
(bad)
into
in
mov
mov
mov
sbb
or
pop
pop
push
loopne
mov
test
mov
out
test
inc
inc
mov
cli
pushf
mov
outs
inc
dec
xlat
pop
jge
lahf
jmp
or
(bad)
xor
dec
push
xor
cmps
jno
or
dec
in
ins
add
ret
cmps
cmps
mov
enter
enter
dec
jbe
cmp
sbb
mov
aas
xlat
mov
movs
cmps
adc
mov
and
mov
retf
scas
mov
aas
lods
jae
std
fsub
test
shl
mov
enter
call
push
(bad)
(bad)
scas
and
mov
fnstenv
cwde
outs
fstp
push
sbb
movs
mov
pop
add
stos
out
push
or
xchg
loopne
add
push
sbb
loop
jnp
lds
and
and
mov
or
mov
mov
cli
inc
in
arpl
dec
ret
mov
sub
rcl
sbb
ja
(bad)
(bad)
popf
retf
add
or
int
aas
sbb
es
ins
mov
out
jmp
mov
fcom
ja
pop
xor
rcr
or
pop
cdq
nop
arpl
(bad)
jle
jmp
push
sbb
into
add
xchg
push
adc
in
and
push
movs
sbb
ss
popa
jmp
xchg
xchg
push
lock
sbb
push
dec
fdiv
xor
add
les
in
push
jnp
dec
daa
(bad)
in
push
jno
jmp
sbb
xchg
(bad)
and
add
rol
fcmovbe
stc
jns
out
pop
inc
stos
icebp
stos
add
jecxz
jb
dec
jl
pusha
imul
cmps
fmul
jnp
lods
lock
cmp
leave
cmp
stos
in
jno
retf
cs
mov
adc
sub
arpl
push
adc
pusha
xchg
es
add
js
xor
ficomp
call
ja
and
jbe
inc
dec
dec
repnz
mul
stc
fistp
xchg
imul
gs
ret
adc
mov
repnz
jns
cmp
sub
fwait
xor
jb
ins
push
inc
sar
sub
ret
and
(bad)
jmp
pop
nop
push
or
into
mov
add
fisub
or
add
daa
dec
stos
and
pop
lahf
jb
jb
dec
jmp
mov
mov
adc
jcxz
out
xor
pop
fwait
shl
js
stc
xchg
in
imul
or
and
mov
cmp
out
xor
pop
sbb
and
pop
test
xor
add
addr16
in
rol
pop
push
cmc
leave
test
mov
inc
adc
jns
add
jb
(bad)
jmp
popa
in
int
movq
push
xor
pop
dec
mov
push
xchg
into
adc
(bad)
fst
(bad)
push
inc
sbb
sbb
pop
sahf
xor
ss
ins
xlat
xchg
push
sub
clc
aas
jmp
movs
in
inc
aaa
jecxz
mov
test
jnp
cmp
or
repnz
pop
in
mov
inc
enter
pop
adc
add
test
or
mov
cld
bound
jae
cmp
outs
scas
jbe
je
call
jmp
aaa
mov
int3
mov
push
sub
lods
jmp
ror
dec
pop
pop
mov
fs
sbb
fldenv
movs
mov
add
sub
movs
test
test
jno
loopne
adc
mov
es
out
xor
cmc
repnz
outs
call
fidivr
cwde
ja
push
inc
mov
push
iret
inc
cmps
cmps
in
movs
rcl
mov
shr
test
int
popf
push
xor
mov
cmp
mov
add
and
enter
jo
mov
fldenv
call
push
adc
popf
xor
imul
inc
das
push
ins
call
es
fs
ins
xchg
sbb
cmp
mov
sbb
adc
inc
push
call
sti
pop
cwde
inc
xchg
mov
xchg
call
(bad)
stos
inc
inc
out
or
cs
xchg
rcl
pushf
inc
sub
or
add
inc
and
or
clc
imul
sub
xchg
dec
xchg
sbb
sub
add
mov
adc
in
pop
inc
sub
jmp
fcomi
neg
xor
test
jb
jb
cdq
sbb
call
dec
call
push
aas
push
mov
popf
(bad)
js
scas
gs
sbb
inc
cwde
pop
adc
add
fisttp
jge
inc
jb
jae
outs
out
ds
inc
pop
leave
std
push
clc
jnp
mov
(bad)
ss
aas
dec
push
fisubr
xor
(bad)
ins
or
test
dec
pop
adc
(bad)
mov
mov
mov
sbb
sbb
jp
sub
or
mov
fisttp
and
cmps
and
mov
out
ins
mov
inc
xor
cmp
push
call
jmp
cmp
icebp
add
stos
jle
rcl
and
mov
std
and
out
rol
push
call
sti
inc
fisubr
stos
fcmovb
pop
pop
jle
xor
xchg
daa
mov
test
in
(bad)
dec
loope
nop
lds
mov
add
aaa
fst
pusha
inc
xchg
jl
stc
and
push
push
add
outs
inc
jge
mov
jns
rcl
(bad)
sub
mov
stc
cmps
mov
xchg
adc
ins
jl
cmc
cmp
mov
in
movs
loop
shr
or
test
pop
push
addr16
clc
enter
mov
lahf
mov
jge
ss
(bad)
jo
jnp
cmp
call
(bad)
fisubr
mov
mov
outs
(bad)
dec
icebp
sbb
in
iret
or
arpl
add
and
rcr
push
inc
fwait
cmps
or
xchg
shr
pop
repz
cmps
leavew
popf
arpl
lahf
test
add
repnz
push
out
mov
sbb
js
lock
add
sub
das
pop
cmp
aad
dec
jg
mov
sub
imul
push
lds
ror
ins
test
or
and
dec
leave
aad
neg
xor
or
or
xor
xor
mov
push
adc
test
push
mov
lods
pop
cmp
or
adc
cdq
pop
dec
pop
mov
pop
pop
inc
cmp
fs
call
and
jbe
xchg
pop
sbb
int
pop
sub
pop
or
mov
into
sub
add
test
nop
lock
sub
dec
aas
mul
inc
jae
jb
fs
jae
stos
adc
adc
mov
xchg
adc
sbb
test
mov
cmp
scas
sbb
mov
adc
push
mov
xor
imul
scas
mov
jno
je
sub
add
out
out
inc
mov
hlt
add
fnstsw
repz
and
mov
cdq
push
test
loope
pop
aas
test
lea
push
sub
xlat
out
pop
mov
in
pop
mov
cmps
fst
jmp
mov
mov
rol
loope
test
stc
sbb
not
ss
hlt
cmc
mov
js
mov
imul
les
out
or
jg
nop
adc
xchg
or
cld
cdq
in
cmp
dec
fadd
or
mov
(bad)
(bad)
hlt
mov
test
dec
sar
xor
xchg
shl
xchg
cmps
movs
iret
repnz
xchg
iret
add
or
jbe
adc
and
fild
xlat
mov
inc
loop
mov
imul
pushf
jge
push
cdq
loop
jnp
pop
mov
pop
xor
enter
scas
inc
rcr
shl
and
cmp
jnp
xor
pop
pop
scas
dec
shr
mov
or
push
jg
sbb
js
imul
and
adc
adc
shl
or
cmp
ficom
xchg
fst
push
mov
xchg
xor
out
ins
(bad)
mov
rol
ins
mov
xchg
mov
ja
jmp
out
jnp
ror
not
xchg
pop
sub
call
in
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
lea
lea
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
lea
mov
call
lea
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
lea
mov
mov
mov
mov
call
lea
mov
mov
call
lea
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
movzx
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
add
add
mov
add
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
sub
mov
call
add
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
lea
add
movzx
mov
mov
mov
mov
add
add
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
movzx
mov
mov
mov
sub
mov
movzx
mov
mov
mov
mov
add
add
mov
add
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
sub
sub
mov
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
jmp
data16
push
mov
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
add
pop
pop
ret
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
add
movzx
mov
mov
add
add
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
movzx
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
jmp
nop
push
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
call
mov
mov
sub
add
add
mov
mov
mov
mov
mov
call
sub
mov
add
pop
ret
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
mov
mov
call
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
add
add
sub
mov
mov
jmp
data16
push
mov
push
push
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
lea
pop
pop
pop
ret
mov
call
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
sub
mov
mov
call
add
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
sub
mov
mov
mov
call
add
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
sub
mov
mov
call
add
mov
mov
sub
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
sub
mov
mov
call
add
mov
mov
sub
mov
mov
mov
call
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
call
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
add
mov
mov
mov
call
mov
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
add
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
call
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
jmp
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
sub
sub
sub
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
sub
sub
add
mov
mov
sub
sub
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
jmp
mov
jmp
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
and
sub
mov
mov
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmovae
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
call
sub
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
lea
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
call
mov
jmp
mov
mov
mov
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
mov
lea
mov
mov
call
sub
mov
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
mov
xor
and
mov
xor
and
mov
mov
xor
and
and
or
or
xor
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
lea
mov
mov
mov
add
add
movzx
add
sub
sub
add
mov
mov
add
movzx
sub
add
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
setl
and
mov
mov
mov
sub
mov
add
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
jmp
lea
lea
mov
mov
add
add
movzx
mov
sub
sub
add
add
mov
mov
add
movzx
sub
add
mov
mov
movzx
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
call
call
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
sub
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
jmp
mov
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
call
call
call
mov
mov
jmp
call
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
add
add
sub
sub
mov
mov
mov
call
add
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
sub
sub
add
mov
mov
sub
sub
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
sub
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
jmp
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
sub
add
add
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
add
add
sub
add
mov
mov
add
add
sub
mov
sub
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
push
mov
push
push
push
sub
mov
mov
lea
lea
lea
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
lea
mov
mov
mov
call
mov
mov
call
lea
mov
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
lea
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
lea
lea
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
sub
sub
add
shl
mov
add
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
call
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
lea
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
call
lea
mov
call
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
lea
mov
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
call
mov
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
call
sub
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
lea
mov
lea
mov
mov
mov
lea
mov
mov
mov
lea
mov
lea
mov
mov
mov
lea
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
lea
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
mov
call
mov
call
mov
imul
mov
call
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
add
sub
sub
mov
mov
shl
add
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
add
sub
sub
mov
sub
add
mov
mov
shl
add
mov
shl
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
mov
add
sub
sub
mov
mov
shl
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
call
sub
mov
call
mov
xor
and
mov
lea
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
inc
mov
mov
mov
mov
mov
call
mov
xor
and
mov
lea
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
inc
mov
mov
mov
mov
call
mov
xor
mov
lea
and
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
neg
mov
sub
mov
mov
mov
lea
mov
call
mov
xor
and
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
movzx
mov
not
mov
neg
movzx
mov
mov
mov
lea
inc
mov
mov
mov
mov
lea
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
xor
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
call
lea
mov
mov
xor
mov
mov
div
mov
mov
mov
movzx
mov
mov
movzx
mov
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
add
sub
sub
mov
mov
shl
add
mov
mov
mov
mov
mov
mov
call
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
lea
mov
mov
sub
sub
add
mov
shl
add
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
call
add
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
add
sub
sub
mov
mov
shl
add
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
sub
add
mov
sub
add
mov
mov
shl
add
mov
shl
add
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
mov
sub
add
mov
mov
shl
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
nop
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
mov
call
sub
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
mov
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
shl
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
sub
mov
call
add
mov
mov
mov
shl
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
add
sub
add
add
sub
mov
mov
mov
sub
mov
sub
add
sub
add
add
sub
mov
mov
mov
mov
sub
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
sub
mov
add
mov
sub
mov
sub
mov
sub
add
mov
sub
add
sub
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
shl
mov
mov
jmp
mov
sub
mov
call
add
shl
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
sub
mov
sub
mov
sub
mov
mov
sub
sub
add
add
sub
mov
mov
mov
mov
sub
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
sub
add
sub
mov
mov
jmp
mov
mov
mov
jmp
nop
push
mov
push
push
push
mov
call
lea
mov
lea
lea
lea
lea
mov
lea
mov
mov
mov
mov
mov
lea
mov
lea
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
lea
add
mov
mov
mov
mov
mov
call
lea
mov
mov
movzx
mov
mov
sub
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
cmp
cmove
mov
jmp
mov
jmp
lea
lea
lea
lea
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
cmp
setl
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
call
mov
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
call
lea
mov
mov
call
mov
lea
lea
add
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
jmp
lea
mov
mov
mov
call
sub
lea
mov
movzx
mov
mov
add
add
sub
mov
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
mov
mov
mov
call
sub
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
call
sub
add
pop
pop
pop
pop
ret
mov
jmp
mov
jmp
mov
jmp
lea
mov
movzx
mov
mov
sub
add
add
mov
shl
add
movzx
mov
mov
mov
mov
shl
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
lea
lea
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
call
sub
mov
mov
jmp
lahf
lahf
cmps
(bad)
and
lds
mov
xchg
jg
in
pop
dec
fstp
aad
sbb
leave
popa
test
xchg
mov
or
clc
or
adc
in
xor
push
call
sub
test
jns
xchg
popf
inc
aaa
dec
mov
pop
adc
out
pop
not
push
ja
retf
mov
retf
inc
mov
sahf
and
(bad)
lods
add
pushf
pop
adc
or
mov
xor
sub
xlat
popf
cwde
mov
jb
dec
mov
adc
sbb
xchg
jnp
je
xchg
sbb
addr16
test
push
imul
into
(bad)
scas
pop
add
addr16
add
retf
js
inc
cmps
enter
retf
imul
sbb
movs
xchg
xchg
add
dec
add
mov
das
int
pop
jge
iret
retf
lods
push
jnp
cmp
sbb
loope
daa
loope
xchg
jnp
sub
ins
outs
les
dec
jecxz
mov
push
cs
push
clc
mov
push
push
(bad)
bound
mov
and
xchg
adc
pop
pop
in
sbb
sbb
mov
jb
call
jo
(bad)
mov
out
cmp
in
dec
mov
or
lds
cli
add
push
adc
add
shr
fstp
jmp
(bad)
std
lods
inc
mov
mov
out
popa
push
sahf
jbe
jo
sub
lock
dec
mov
xor
popf
sub
push
jns
cmp
lods
or
or
or
stc
and
mov
mov
test
mov
ins
mov
sar
sar
pushf
xchg
dec
aaa
adc
jg
jnp
mov
fidivr
rcl
repz
leave
neg
adc
sub
loop
pop
(bad)
stc
(bad)
aad
xchg
in
popf
mov
lods
mov
fbld
jno
xor
in
adc
or
mul
sbb
dec
lods
neg
pop
adc
pop
xor
and
pushf
mov
(bad)
test
dec
xchg
cmp
xchg
int3
sub
xor
xor
loop
repnz
adc
sbb
scas
or
cmc
das
shr
xlat
adc
jmp
movs
jp
and
test
add
pop
xor
pusha
sbb
jns
outs
(bad)
bswap
pop
les
or
shr
jns
mov
push
cmps
xchg
ret
les
in
fidiv
out
xchg
inc
inc
sbb
das
sbb
iret
and
jnp
jmp
icebp
fimul
dec
sub
nop
add
xchg
jb
out
jg
add
mov
call
in
lods
pop
into
enter
xchg
jle
pop
mov
xchg
inc
pop
lock
in
(bad)
jg
ins
rol
xchg
and
clc
jg
icebp
retf
pushf
rcr
mov
popa
xor
xor
sbb
retf
dec
mov
sbb
test
rcl
gs
and
dec
movs
(bad)
cmc
jo
mul
xor
xlat
scas
retf
inc
fs
out
or
icebp
pop
aaa
add
or
jmp
jnp
sub
jns
shl
jns
adc
shr
mov
mov
adc
push
pushf
cdq
fild
iret
mov
cmp
jp
fbstp
cmp
pop
mov
and
(bad)
repz
jno
sbb
jle
jp
cmp
and
mov
mov
add
xchg
add
jp
repz
inc
pop
je
inc
push
mov
inc
jmp
cs
dec
jns
and
movs
cli
inc
out
jo
mov
and
mov
rcl
jbe
xchg
xor
ja
bound
sub
pop
stos
cmp
cmp
mov
push
movs
jl
xlat
dec
adc
xchg
aas
mov
shl
pop
in
test
pop
or
test
adc
sub
inc
lea
ret
test
test
gs
adc
addr16
add
aad
les
mov
sti
push
xchg
adc
mov
test
cmp
or
inc
push
cmps
dec
adc
push
pop
xlat
sbb
sbb
es
add
mov
arpl
popa
mov
repz
mov
sbb
aas
jnp
scas
and
aaa
ret
mov
cmp
and
loop
je
dec
sbb
jle
and
inc
test
cmp
jge
bound
scas
pop
jg
push
mov
pop
mov
shl
fisub
scas
jmp
add
pop
pushf
xchg
sub
pop
mov
jb
dec
dec
push
not
pop
imul
push
dec
dec
mov
(bad)
or
push
inc
int3
jp
ret
mov
sub
stc
adc
sub
cld
fcomip
xor
mov
(bad)
daa
je
aam
or
fs
pop
inc
movs
test
dec
jmp
mov
mov
hlt
sbb
inc
fs
scas
or
mov
ret
hlt
cwde
or
rcl
xor
xchg
aad
sbb
sbb
dec
gs
xlat
inc
or
pop
mov
mov
add
add
and
jl
sbb
aad
and
imul
push
inc
fldenv
(bad)
cmp
pop
pop
aas
mov
in
out
sbb
(bad)
push
pop
popf
ret
sbb
clc
xchg
fcom
jmp
out
loop
lahf
fs
bound
mov
fnsave
or
movs
not
lds
or
mov
mov
sbb
mov
cmp
sub
scas
xor
jp
xchg
pop
and
ins
fs
cld
pop
jmp
out
adc
ficom
jmp
shr
(bad)
in
pusha
jl
hlt
mov
cmp
ss
mov
scas
sahf
loope
xor
xchg
or
xor
push
xchg
popa
div
ins
jns
enter
jns
adc
inc
adc
leave
jl
bound
aad
xor
xchg
pop
and
mov
(bad)
pop
adc
mov
imul
or
pop
dec
in
inc
pop
outs
test
fwait
in
sub
aaa
fnop
pop
aam
fisub
sbb
add
(bad)
movs
out
es
ss
mov
dec
sub
pop
mov
mov
xchg
or
inc
jne
sbb
or
jns
add
cmps
imul
jnp
mov
std
stos
fs
icebp
sub
inc
out
je
(bad)
lods
cvtdq2ps
test
cld
loop
sbb
jl
jnp
call
cmps
sbb
dec
add
icebp
cmp
lods
sbb
xor
mov
adc
mov
inc
and
outs
and
cmp
sahf
add
add
jp
mov
je
push
js
repz
add
in
movzx
and
add
imul
mov
xchg
lods
inc
cmp
jo
and
in
adc
push
imul
sbb
hlt
aaa
out
enter
jae
jle
add
jbe
je
enter
lea
inc
xchg
sahf
lods
xchg
aaa
xchg
mov
lods
int3
or
push
pop
stos
mov
mov
in
mov
add
jmp
dec
mov
xchg
adc
sti
in
out
jge
shr
mov
sbb
iret
test
mov
or
gs
jecxz
or
cdq
mov
ja
xchg
ret
lds
(bad)
iret
shl
rcl
vmread
or
cmc
xor
pop
and
fstp
daa
dec
jae
adc
add
iret
jecxz
push
mov
loope
pop
add
cmp
and
test
lds
xor
xor
xor
imul
out
mov
(bad)
pop
sahf
jmp
push
idiv
imul
clc
test
adc
pop
repnz
xor
adc
out
cmps
jge
lds
add
hlt
mov
dec
movs
push
add
xchg
test
add
sub
std
mov
xchg
rcr
outs
cmp
mov
xlat
mov
out
xchg
cmp
mov
xor
dec
mov
mov
sub
stc
add
mov
and
test
mov
jo
push
test
xor
inc
jmp
stc
mov
jge
scas
in
je
or
ins
mov
and
ds
fsubr
cmp
aam
int
popa
push
or
jmp
nop
mov
fiadd
push
div
sub
adc
addr16
out
adc
sbb
movs
jne
jl
test
jge
xchg
jmp
cdq
xchg
jnp
cmpxchg
inc
test
mov
xchg
and
icebp
gs
gs
jge
out
scas
fld
fisubr
adc
sub
iret
pop
dec
add
add
sub
adc
pusha
push
mov
xchg
mov
ficom
push
sar
jns
pop
jo
call
pop
icebp
ins
pushf
jb
leave
call
mov
sbb
mov
sub
test
or
outs
jle
push
mov
mov
and
(bad)
(bad)
popf
repnz
jmp
push
stos
inc
xchg
int
mov
dec
push
mov
ret
dec
cdq
add
imul
daa
test
xor
pop
cmp
jbe
and
and
adc
test
push
test
(bad)
cmp
cli
lods
ins
mov
in
inc
enter
in
fcomi
out
rcr
pop
(bad)
xchg
xchg
xor
pop
mov
mov
sbb
cmc
into
cmp
imul
add
sub
in
push
xchg
outs
and
xchg
jg
into
ror
movs
xchg
cmp
imul
cli
xlat
add
ins
pop
push
xor
cmp
sub
or
inc
mov
aas
retf
and
call
and
rcr
jb
mov
bound
popa
sub
inc
pop
adc
into
xor
push
clc
add
jno
cmp
dec
cmp
adc
push
xchg
loopne
and
test
pop
outs
jns
jge
mov
test
iret
into
inc
ss
dec
ret
ds
rcr
cwde
fdivr
jecxz
lahf
movlps
sbb
xchg
adc
fcomp
sbb
popf
fistp
loopne
dec
inc
test
adc
iret
xchg
int3
in
or
mov
jb
leave
(bad)
xor
jecxz
pushf
in
push
add
cmps
sub
cmp
mov
iret
out
add
push
dec
ficom
adc
push
rol
ror
and
in
jge
enter
dec
cdq
adc
ror
or
xchg
pop
jl
retf
pop
push
sbb
sub
rcl
aad
inc
test
fld
mov
xlat
push
cdq
aaa
loopne
retf
pop
pop
and
sub
mov
or
inc
jbe
ins
in
nop
xchg
cmp
inc
aaa
dec
pop
ds
pop
retf
stos
jae
xor
xor
mov
and
mov
inc
loope
call
jbe
repz
inc
inc
dec
dec
jg
push
ja
loope
clc
xor
(bad)
aam
adc
(bad)
retf
pop
or
lods
ret
js
xor
sahf
add
jecxz
cmps
fild
leave
lahf
mov
cs
repz
jmp
and
cmps
js
sub
mov
cmp
data16
int3
loope
fidiv
hlt
je
inc
test
add
pusha
rcl
inc
cdq
jecxz
xchg
jmp
ja
mov
sbb
shl
imul
adc
cmp
daa
sub
mov
popf
dec
je
xchg
inc
pop
aaa
cs
gs
loop
clc
mov
mov
add
mov
dec
inc
push
retf
bound
and
vmovaps
call
imul
dec
and
cmp
push
add
int
ja
jl
or
rcl
inc
dec
sub
pop
pop
and
inc
push
push
add
sbb
cmps
test
or
(bad)
cmp
pop
push
fcomp
jg
mov
in
or
xor
call
push
js
pushf
pop
repnz
stc
push
cmc
push
cmp
in
xchg
out
pop
(bad)
inc
mov
aad
aaa
mov
mov
jle
imul
push
aad
icebp
jnp
and
pop
push
aam
xor
mov
sub
pop
je
pop
outs
fwait
jne
push
and
cmp
add
add
cmps
add
mov
pop
mov
jge
test
push
mov
push
add
mov
xor
repnz
inc
(bad)
out
jmp
inc
ret
out
int
xor
jle
mov
add
mov
fild
inc
and
fsubr
xchg
repnz
pop
es
mov
(bad)
cmps
or
dec
(bad)
outs
fdivr
test
in
dec
or
hlt
mov
ret
shr
cmp
inc
loopne
pop
inc
add
inc
add
push
or
lahf
add
pop
leave
ret
frstor
lea
mov
enter
adc
jmp
jp
out
inc
retf
sbb
push
retf
cmp
and
in
and
and
push
add
ds
xor
xchg
fstp
not
mov
inc
lea
stc
scas
rcr
pop
inc
and
pushf
pop
(bad)
shl
mov
ja
add
push
add
(bad)
jmp
cmp
ja
aaa
popf
aas
enter
in
fs
jo
jae
xor
test
sub
lds
fld
mov
test
stc
daa
sub
mov
cmp
out
popa
int
xor
pop
xchg
and
jmp
pop
jmp
and
lods
push
and
clc
scas
cdq
mov
push
fadd
mov
test
adc
repz
es
imul
test
(bad)
stc
(bad)
xchg
(bad)
in
fs
cmps
pop
js
lea
xor
mov
cmc
add
jmp
ret
dec
enter
mov
adc
push
sub
nop
mov
jbe
hlt
jl
sub
inc
sahf
arpl
stc
out
js
sub
ja
inc
icebp
xchg
mov
xchg
adc
adc
sub
jne
das
and
adc
mov
sub
rcl
jno
call
ss
xchg
sbb
pop
bound
and
jge
cwde
fldcw
jmp
shl
mov
mov
xor
dec
dec
inc
ret
fisttp
or
add
cwde
cmp
cmp
stos
mov
pop
adc
loope
in
ins
mov
retf
add
pop
daa
xchg
int3
pop
movs
rcl
dec
inc
in
into
sbb
lds
push
mov
add
arpl
loopne
jbe
mov
xchg
or
pop
jnp
xlat
pop
jmp
loope
sub
ja
(bad)
mov
push
(bad)
adc
or
fwait
test
in
test
mov
jns
jmp
xchg
das
pop
sub
test
out
int3
ss
leave
mov
out
out
inc
inc
sbb
add
mov
imul
dec
jb
test
jle
sbb
into
push
call
dec
(bad)
jbe
adc
mov
sbb
xchg
(bad)
not
xchg
xchg
xchg
loopne
or
inc
cmp
shr
or
or
jbe
add
(bad)
pop
add
or
into
cmp
(bad)
sbb
ds
jae
and
push
movs
scas
nop
into
les
std
adc
test
rol
push
out
cld
fsub
dec
in
movs
pushf
shl
inc
xchg
add
inc
fisttp
sti
mov
and
iret
ins
pop
push
ror
push
add
outs
xchg
inc
out
mov
xor
mov
lock
sub
jmp
inc
jge
dec
enter
inc
sbb
push
inc
icebp
dec
mov
push
in
inc
dec
repz
fcom
adc
pop
or
in
sub
aaa
(bad)
popf
adc
mov
sub
les
xor
popa
es
xor
fisub
adc
xor
leave
add
push
push
mov
loopne
lahf
sub
jnp
add
jbe
pop
fcom
mov
pusha
loope
push
test
inc
sbb
pusha
cdq
cs
mov
popa
lds
cmp
loope
loop
call
xor
sbb
data16
dec
push
sub
sahf
pop
jbe
mov
in
scas
mov
test
inc
ds
mov
int3
ins
cli
and
cmp
mov
sbb
fldenv
pop
mov
and
xor
mov
sub
and
and
xor
xchg
test
mov
jl
jge
pop
jge
sub
(bad)
sbb
jb
sti
push
mov
lods
cmp
push
sub
push
mov
out
push
or
idiv
mov
inc
xchg
adc
xchg
and
aam
or
mov
enter
test
movs
adc
push
sbb
pop
bound
jp
pop
rol
cmp
rol
std
adc
and
cmps
jb
mov
aam
gs
imul
pop
lds
ins
retf
xchg
mov
and
repnz
iret
stos
push
jmp
cdq
or
xchg
xor
ret
jbe
cs
inc
test
movs
jns
in
jl
loopne
or
jne
test
scas
sub
cmp
mov
push
add
imul
cmp
call
cdq
cmc
add
jmp
adc
icebp
fidivr
rol
out
jb
cmp
sub
adc
fnstsw
mov
les
popa
push
ret
pusha
mov
push
lds
stos
mov
lea
or
add
xchg
mov
aam
dec
inc
adc
mov
mov
(bad)
sar
inc
aaa
xor
outs
rol
repnz
jne
adc
fild
or
lahf
pop
push
inc
pop
xlat
repz
adc
or
ins
jle
pop
cdq
(bad)
ins
aad
mov
sub
xchg
enter
fwait
lahf
ins
jmp
jl
(bad)
mov
pop
ins
pop
aaa
popa
lods
cmc
push
sub
sbb
iret
sbb
repnz
ret
mov
push
dec
add
cli
cmp
inc
out
out
fistp
push
ds
mov
fidiv
out
fist
rcl
cmp
movs
push
sub
sar
mov
adc
cmps
aad
sbb
or
(bad)
fld
pop
ins
sub
and
or
stos
or
add
adc
popa
repnz
xchg
inc
(bad)
sbb
xor
sti
cmc
adc
mov
mov
xchg
add
xchg
sbb
stos
stos
cmc
push
out
(bad)
out
ficomp
addr16
dec
out
jmp
loope
pop
cwde
scas
inc
test
in
inc
add
sub
pop
mov
or
push
sbb
jae
sbb
je
aad
cmp
in
fst
loopne
push
pop
cld
push
sbb
loop
shl
ss
aaa
imul
add
adc
shl
mov
(bad)
adc
add
(bad)
lds
lds
clc
mov
inc
push
into
(bad)
ja
mov
sbb
shl
jge
or
ins
jo
add
(bad)
in
(bad)
mov
(bad)
inc
push
mov
jl
push
dec
vfmadd213pd
mov
inc
sbb
adc
fwait
retf
xor
inc
add
cmova
adc
stos
out
cmp
ss
sub
add
ds
in
pop
inc
mov
xchg
xchg
ficomp
sbb
sub
push
jno
fild
sub
ins
pop
push
in
out
inc
jmp
sbb
mov
ja
mov
imul
stos
sbb
pop
ins
inc
or
stos
aaa
cmc
jnp
inc
cwde
sub
and
push
xor
(bad)
add
(bad)
in
inc
xchg
or
cmc
fisttp
nop
jne
ss
sub
data16
or
sbb
repz
xchg
scas
je
or
call
xchg
fisttp
test
movs
les
(bad)
jl
push
pop
cdq
ins
std
imul
dec
jno
mov
shl
add
sbb
lods
adc
push
sbb
xor
mov
push
lahf
fadd
in
add
cmp
inc
ret
dec
imul
lahf
inc
and
dec
ja
sub
mov
fimul
cld
mov
mov
aas
outs
add
mov
std
cmp
sbb
bound
(bad)
shr
sub
mov
jno
adc
inc
aaa
lahf
xchg
fstp
lahf
and
punpcklbw
(bad)
stos
mov
jecxz
jl
cmc
or
mov
mov
(bad)
cmp
inc
pop
mov
mov
mov
mov
push
ror
add
inc
call
retf
out
add
stc
xor
sbb
bound
popa
dec
out
movs
pusha
push
or
sbb
in
xchg
xor
dec
dec
cs
dec
lock
xor
jl
arpl
inc
mov
pop
cmp
cmps
ins
mov
inc
xchg
aad
xlat
mov
push
add
rcr
mov
inc
lods
pop
cwde
add
xchg
mov
jle
cmps
scas
cmp
inc
repnz
and
mov
fcomp
mov
ret
int
push
jns
scas
sub
mov
das
xchg
shr
rcr
mov
aas
popa
jnp
adc
fwait
and
imul
jge
mov
loope
(bad)
imul
xor
into
mov
mov
ret
xor
sti
inc
int
cmp
jae
leave
jmp
mov
xchg
xchg
ret
and
(bad)
ins
call
loope
lea
jge
add
mov
jecxz
fcomp
add
lock
enter
int3
cmp
or
mov
test
sub
inc
cmp
(bad)
or
mov
pop
bound
jl
stos
jl
and
lahf
pop
pop
rcl
ret
xchg
shl
xor
xlat
sub
lods
xor
into
lods
scas
mov
push
addr16
sub
jae
jmp
xor
jmp
jne
(bad)
lods
or
ins
cmp
sbb
cld
jnp
sbb
push
sub
mov
rcr
xchg
adc
call
or
ds
daa
jmp
cwde
test
int3
idiv
ret
inc
mov
fs
mov
jp
push
push
out
add
sub
sub
jg
jmp
jns
jmp
and
add
dec
into
imul
test
(bad)
jbe
call
push
or
mov
jae
es
outs
push
or
into
xchg
lods
adc
xor
test
inc
add
inc
ins
sub
clc
(bad)
adc
je
mov
loope
loopne
jl
(bad)
mov
ss
out
mov
(bad)
retf
xchg
sbb
jmp
leave
mov
sbb
je
push
sahf
sbb
jg
mov
lds
cs
push
pushf
pop
imul
fadd
outs
jne
(bad)
rcl
(bad)
out
mov
cmp
nop
loop
outs
into
dec
or
arpl
in
aam
(bad)
jl
pop
test
pop
(bad)
adc
cs
mov
(bad)
inc
ret
xor
dec
sub
outs
push
cmp
and
jmp
add
push
sub
and
aad
and
xchg
xchg
std
loop
leave
(bad)
neg
pushf
or
add
cmp
fbstp
jo
in
cs
push
push
(bad)
fidiv
or
pop
jbe
sbb
js
jle
jae
leave
out
mov
or
rcl
(bad)
aas
shl
stc
ins
xor
mov
push
adc
dec
push
jmp
jo
mov
aas
icebp
xchg
jns
inc
jp
scas
test
inc
retf
sbb
dec
push
fiadd
pop
mov
(bad)
nop
xchg
fcmovb
mov
jbe
xchg
mov
test
xchg
xlat
(bad)
je
cmp
fdivrp
stc
popf
and
or
add
jmp
jecxz
int
xor
dec
xchg
test
sub
mov
inc
sahf
std
mov
iret
cmc
test
shr
call
mov
mov
and
mov
std
das
iret
cmp
cmp
mov
xchg
fdivr
fild
inc
es
add
call
dec
out
and
repz
retf
or
add
cmp
xchg
aam
sbb
cmp
mov
adc
retf
mov
pop
lds
stc
jno
pop
cmp
fwait
leave
(bad)
pop
mov
outs
mov
mov
mov
lea
and
ins
ins
ror
imul
call
pop
and
in
sub
push
mov
xor
push
pop
hlt
push
and
(bad)
push
adc
je
xor
sbb
jnp
jbe
inc
cmp
push
lods
cmc
rol
(bad)
sub
mov
iret
dec
mov
jmp
and
xchg
jmp
idiv
jo
inc
and
xor
mov
push
ret
inc
std
popa
mov
jbe
daa
pop
test
aaa
cli
push
call
retf
adc
out
and
or
mov
stc
add
shr
push
xchg
sub
cs
mov
test
ins
pop
mov
retf
pop
dec
pop
cdq
jp
cmp
jmp
sub
out
movs
jb
lods
pop
nop
(bad)
cmp
xchg
fwait
sbb
and
repz
jg
retf
jg
dec
std
jp
test
pop
leave
cmps
xor
xchg
mov
xor
inc
out
ret
jnp
push
lods
xchg
pop
div
mov
pop
push
fmul
(bad)
push
cli
cwde
lds
sbb
aam
test
stos
lea
std
das
aam
jnp
sub
inc
inc
and
mov
and
jbe
xchg
sti
xor
ins
push
shl
lock
pop
test
xor
add
jmp
mov
ins
mov
inc
jo
scas
or
jmp
aas
js
icebp
jle
mov
or
(bad)
das
mov
repnz
out
jns
mov
mov
pop
dec
cld
(bad)
sub
ds
(bad)
lea
pusha
push
sub
lea
inc
jne
pop
pop
xor
aam
int3
scas
(bad)
fstp
movs
fcom
dec
add
xor
xor
adc
mov
ja
ds
jle
jmp
jne
(bad)
xor
push
mov
stos
or
jp
pop
lds
cmc
push
jl
inc
adc
pusha
mov
ins
ss
pop
retf
aaa
lods
pop
cld
(bad)
ret
xchg
xchg
or
(bad)
out
std
inc
out
sbb
add
test
sub
mov
push
mov
aad
jb
jge
mov
popf
ins
pop
push
(bad)
pop
bnd
add
stc
sub
inc
or
xchg
jg
sbb
xor
test
cld
cmps
push
push
fistp
leave
xor
fidiv
xchg
sti
clc
fsub
stos
movntq
pop
cmps
cmp
ds
push
adc
dec
out
jp
fcmovu
or
(bad)
js
dec
and
aas
hlt
stos
mov
out
std
data16
in
mov
stos
cmp
jno
jmp
inc
popf
xor
aam
xchg
repnz
inc
aaa
sub
es
leave
push
cmp
xor
push
(bad)
mov
xchg
frstor
sbb
mov
pop
(bad)
sub
fsubr
inc
popf
jno
mov
inc
pop
sar
xor
movs
inc
ins
popa
enter
mov
or
les
icebp
cmp
js
push
out
bound
push
jge
out
mov
sub
lock
mov
mov
xchg
sbb
frstor
loopne
cmp
mov
mov
jmp
sub
cs
lahf
lahf
out
in
jge
push
das
sub
cld
inc
dec
lahf
mov
out
inc
add
stos
cwde
into
sub
dec
push
test
shl
(bad)
cmp
enter
xor
jnp
daa
in
call
sub
push
push
outs
add
dec
dec
push
loope
sbb
scas
cmp
jg
push
jmp
dec
adc
outs
inc
adc
jmp
popf
aam
cs
pop
imul
repz
jecxz
(bad)
and
jno
add
push
in
cmps
jmp
xor
inc
pop
jmp
cmp
push
xor
mov
out
push
(bad)
mov
mov
adc
sub
and
mov
pop
neg
gs
dec
in
mov
in
inc
scas
jecxz
test
xchg
cmp
test
mov
or
dec
call
xor
pop
xor
(bad)
call
xor
dec
sub
das
fbld
mov
pop
hlt
fistp
xchg
xlat
ins
mov
sahf
dec
add
push
ss
or
cli
dec
aaa
or
and
int
push
xchg
add
and
xor
in
jae
xchg
sbb
bnd
pop
out
pop
cwde
(bad)
nop
cmp
mov
sbb
sub
xchg
std
and
jo
mov
push
mov
retf
dec
mov
mov
cmps
es
lahf
jl
xchg
stos
pop
adc
add
stos
sbb
mul
in
jnp
scas
addr16
dec
pusha
mov
(bad)
call
pop
shl
out
xchg
int
jno
jno
pop
(bad)
hlt
mov
sbb
lds
shl
mov
jmp
sub
fisttp
popf
ds
xor
and
xor
rol
jp
and
repnz
call
mov
mov
or
mov
mov
ror
sbb
inc
int
ret
lds
dec
cmp
scas
addr16
enter
outs
mov
cmp
mov
dec
pushf
xor
add
lds
or
sub
xlat
paddw
cld
jo
mov
or
jne
lahf
sbb
(bad)
int3
pop
ror
mov
(bad)
xor
mov
clc
cmc
call
sub
push
sbb
test
or
fld
bound
sti
and
aam
and
lods
call
push
scas
add
jmp
idiv
cmp
sti
sbb
rcr
dec
dec
adc
cmp
mov
or
sub
mov
cmp
pop
stos
xchg
cmp
into
dec
dec
sbb
sub
(bad)
in
cmp
dec
cmp
push
sbb
xchg
das
push
dec
hlt
push
ins
push
cmc
xor
pushf
push
adc
add
mov
xor
mov
iret
xchg
cmp
cmp
mov
mov
arpl
(bad)
xor
outs
loope
jecxz
popf
sbb
xlat
retf
fadd
ins
cmp
inc
sbb
push
fstp
scas
cli
jne
jb
or
mov
jle
sub
lea
pop
mov
aad
pushf
cmp
push
push
mov
mov
and
int
in
push
lds
cmp
out
mov
xlat
out
adc
xchg
clc
dec
pop
lahf
ret
lds
cmc
mov
popf
mov
ds
lods
test
add
loope
out
or
test
cmp
fst
mov
test
push
sub
jmp
jne
imul
xchg
xor
fucomip
retf
cmps
fcomp
ffreep
mov
dec
pop
jo
retf
(bad)
mov
mov
in
nop
cmps
daa
ins
inc
out
test
lahf
mov
or
mov
inc
push
jae
iret
ret
inc
mov
ins
mov
nop
xchg
add
mov
sbb
xor
mov
cmp
jne
jge
mov
push
mov
stc
adc
pop
scas
cmp
cld
in
mov
mov
arpl
sub
cmps
sbb
outs
sub
xor
xor
out
das
(bad)
or
ins
dec
pop
dec
jle
xor
push
mov
lods
cli
or
mov
(bad)
scas
cwde
xchg
xchg
fwait
stc
mov
jbe
(bad)
mov
xchg
ret
add
push
cli
data16
mov
ins
dec
imul
out
out
out
mov
adc
call
enter
jmp
mov
inc
xchg
sti
fldl2t
mov
mov
mov
aaa
mul
sub
fistp
cmps
push
cld
or
addr16
imul
loope
cmp
inc
add
iret
(bad)
mov
(bad)
or
adc
xchg
in
test
add
test
dec
jne
lods
mov
sbb
jecxz
jbe
out
push
fs
push
jae
adc
fsub
mov
adc
repz
push
push
test
xor
loop
sub
push
hlt
cld
sbb
xor
cmp
pop
daa
ret
pop
push
mov
(bad)
dec
cld
test
fistp
stos
ds
mul
sub
and
jge
shr
addr16
js
daa
jnp
mov
sbb
or
mov
mov
int
jo
scas
jbe
jg
xlat
jp
and
sub
ds
cmp
shl
neg
loop
mov
pop
pop
jg
test
xor
mov
sbb
mov
pop
ins
pushf
adc
sbb
lods
or
and
push
mov
hlt
or
mov
pop
dec
and
int3
push
push
lods
lahf
pop
fwait
mov
int
xor
push
and
jmp
and
mov
xchg
push
enter
sub
or
(bad)
mov
jl
popa
push
jmp
xchg
sar
lods
hlt
and
jle
jl
inc
aaa
sbb
add
mov
cmp
stc
cmc
jl
js
mov
arpl
icebp
add
push
pop
iret
jae
jge
xor
aad
stc
popf
sub
lods
push
cmp
jns
jne
or
xor
mov
mov
sar
cmc
pop
popf
ja
sub
dec
das
popf
jmp
inc
mov
dec
shr
movs
and
mov
xor
mov
dec
mov
sbb
add
das
jae
or
mov
pop
ror
out
ret
sub
shl
std
dec
jne
dec
jmp
movs
nop
mov
addr16
fisubr
inc
xchg
imul
jmp
sub
xchg
mov
push
or
and
lods
sub
fnstenv
sahf
dec
add
add
pop
cmps
pop
add
dec
lea
das
mov
out
jge
ficomp
adc
into
sub
pop
and
add
xchg
xchg
pop
test
or
lds
mov
sbb
mov
inc
fdiv
icebp
enter
rol
xchg
sub
ins
out
and
fs
test
addr16
stos
repz
retf
das
test
ret
push
repz
sbb
xor
(bad)
fild
add
dec
out
jne
pusha
cmp
clc
ss
and
cmp
adc
adc
pop
(bad)
das
pop
pop
loop
out
add
(bad)
lahf
mov
fdiv
jo
mov
cwde
lea
cwde
jne
mov
cmp
xor
(bad)
retf
test
push
dec
loop
push
das
repz
mov
div
or
mov
inc
shl
mov
push
inc
cmp
xchg
xor
push
shl
popf
jle
mov
xor
js
arpl
jmp
lea
stos
xor
fmul
or
dec
inc
out
dec
in
fnstcw
fmulp
push
push
mov
scas
out
repnz
jbe
lea
cmps
mov
scas
xor
dec
mov
mov
push
stc
adc
xlat
sbb
sar
mov
outs
jns
pop
mov
mov
das
and
sub
xorps
sub
cld
stos
je
std
test
adc
mov
test
ret
jnp
sbb
xchg
daa
test
retf
inc
jmp
daa
test
leave
pop
imul
jns
jge
xchg
inc
push
mov
mov
push
hlt
inc
add
jg
cmp
mov
mov
dec
inc
cmp
out
inc
cmp
call
iret
push
xchg
add
aad
push
lea
into
bound
push
and
jg
sub
dec
cmps
call
fild
xchg
out
add
xor
outs
fs
add
js
add
add
cmp
(bad)
imul
pop
rdpmc
or
ret
mov
dec
pop
jb
retf
and
pop
aad
mov
add
stos
mov
sub
movs
scas
xor
mov
ficom
(bad)
hlt
in
xchg
loopne
sub
sbb
xor
ins
call
retf
retf
cwde
out
jge
jno
aad
xchg
scas
ins
mov
ret
xchg
inc
sub
dec
(bad)
or
dec
xor
(bad)
or
mov
icebp
cs
loop
xchg
test
pop
inc
inc
adc
scas
sub
xchg
aad
out
lahf
call
push
xor
sbb
jno
add
inc
cdq
xchg
mov
mov
push
outs
dec
outs
lock
ins
hlt
mov
call
js
inc
das
aad
xchg
in
xor
popa
adc
popf
mov
inc
xchg
inc
xchg
stos
jp
scas
mov
adc
mov
call
mov
or
ror
ds
stc
pop
retf
or
sar
call
xchg
mov
jns
xor
jmp
cmc
xchg
ret
push
imul
idiv
ror
adc
mov
dec
xlat
inc
add
mov
add
(bad)
ja
pop
out
stos
pop
cmps
adc
setg
repnz
xor
(bad)
fstp
jp
jae
inc
and
jecxz
cmp
adc
cmp
ins
aas
pop
in
ins
neg
nop
or
and
cdq
xor
leave
rcl
cld
jmp
stos
lds
inc
inc
arpl
inc
std
sbb
mov
dec
stos
sbb
dec
dec
aad
push
sub
cmc
dec
in
sub
dec
pop
movs
loop
and
mov
jnp
xor
pop
mov
mov
out
mov
repnz
push
scas
add
and
adc
or
jne
outs
scas
mov
or
int3
(bad)
in
loop
ss
stos
ins
fwait
fwait
mov
retf
pop
dec
push
jnp
fwait
push
neg
rcl
std
mov
pop
xchg
pop
jbe
aam
push
xor
sub
sar
(bad)
jb
fs
xchg
xor
cmps
leave
jg
sub
loopne
and
pop
test
push
iret
fcomp
xchg
push
sbb
ss
push
add
fadd
retf
adc
aam
out
aaa
repz
cmp
test
push
push
jge
nop
cld
jp
add
xchg
icebp
xchg
cld
jmp
ret
cdq
mov
scas
cmc
add
jg
mov
pop
pop
es
xor
xchg
mov
push
jge
cmp
(bad)
cmp
push
iret
jb
xchg
jmp
test
jecxz
leave
(bad)
icebp
sbb
nop
push
or
inc
stos
out
jle
sub
xchg
out
lods
cmp
mov
push
les
(bad)
or
sbb
jmp
cmp
mov
fld
xor
cmp
pop
xchg
icebp
xor
stc
sub
add
clc
test
push
xchg
sub
pop
fidivr
int
cdq
mov
mov
nop
jne
daa
pop
js
add
sahf
(bad)
test
cmp
or
clc
mov
xchg
mov
icebp
(bad)
dec
imul
ror
pop
in
ja
popf
idiv
outs
stos
fist
leave
int3
dec
pushf
imul
push
fmul
pusha
and
enter
movs
dec
mov
cmp
push
push
jns
xchg
xchg
push
js
(bad)
dec
stos
ss
in
jae
pop
test
ins
cdq
jne
mov
add
xchg
sahf
sub
pusha
repz
xor
and
out
and
sub
pop
loop
mov
sbb
(bad)
out
mov
ja
xor
xor
loop
std
cmp
dec
(bad)
outs
xor
xor
hlt
mov
xchg
jle
pop
and
aaa
jns
jb
xchg
mov
xor
enter
jmp
dec
fsub
cdq
ret
dec
(bad)
jno
shr
push
loop
add
mov
push
sbb
inc
xchg
retf
ds
inc
mov
int
cs
jo
fcmovnb
push
addr16
bound
sub
jae
sahf
loop
inc
scas
imul
(bad)
fldenv
or
in
mov
lds
nop
push
movs
xchg
cmp
and
jmp
jmp
das
fbld
dec
das
aad
cdq
adc
sbb
sbb
loop
in
fs
cmps
sti
add
xchg
pop
pop
mov
mov
mov
(bad)
xor
pusha
and
lahf
mov
in
xchg
xor
mov
inc
jb
mul
pop
test
or
(bad)
loop
pop
jbe
enter
lahf
maskmovq
test
(bad)
push
fsubr
cmp
scas
pop
rol
fbstp
jmp
retf
pop
leave
or
add
inc
dec
push
cmp
movs
loope
mov
lds
jmp
test
icebp
push
mov
outs
inc
std
dec
fwait
cmp
fisttp
(bad)
fst
mov
dec
jnp
add
in
nop
and
xchg
stc
xor
fimul
scas
pop
fsub
in
loop
cmps
xor
adc
jecxz
cmps
jg
and
loop
pop
jp
(bad)
addr16
pop
xor
mov
(bad)
or
loop
mov
cmp
js
mov
aas
inc
push
data16
or
test
clc
mov
adc
retf
xchg
xor
xchg
inc
leave
mov
call
cmps
adc
(bad)
push
lods
add
in
in
std
pop
sub
jb
and
push
outs
or
jmp
jno
push
fwait
xor
fdiv
push
mov
jno
and
sbb
sahf
outs
cs
stc
inc
test
push
test
xchg
push
add
pushf
sub
mov
and
enter
pusha
sub
fdivr
dec
loop
pushf
(bad)
aam
push
pop
es
or
ret
test
or
iret
sub
xor
ret
and
xor
test
sub
sub
mov
or
jns
repz
rcr
cmc
push
rcl
sbb
int
mov
inc
push
pop
call
push
lahf
mov
imul
push
test
xchg
shr
cmp
bound
pop
fidivr
and
cmp
push
xor
pop
shl
xor
jecxz
shl
jns
popf
(bad)
cs
out
in
cwde
clc
popf
mov
repnz
dec
iret
mov
loopne
ins
mov
test
rcl
in
sbb
xchg
out
fmul
xchg
mov
aas
mul
push
xchg
hlt
jb
lods
(bad)
jle
fxch
xor
iret
outs
xchg
scas
loope
mov
xchg
mov
push
cs
xchg
inc
data16
sbb
jne
pop
mov
mov
dec
movs
loope
mov
mov
(bad)
popf
mov
dec
fistp
stos
neg
jmp
and
gs
fild
jmp
in
push
push
xchg
mov
shl
cmc
and
lahf
ret
sub
and
jmp
sbb
fdivp
out
(bad)
or
popf
push
and
sbb
and
icebp
sbb
dec
push
cpuid
gs
xor
dec
cmps
ds
xchg
ins
or
jg
lods
sahf
(bad)
out
sub
push
test
(bad)
mov
ins
sub
push
dec
rol
push
dec
fwait
jge
mov
adc
js
mov
xor
dec
fcmovu
dec
mov
pusha
rcr
mov
loope
add
scas
cdq
(bad)
mov
cmp
(bad)
imul
mov
inc
das
ins
pop
pushf
add
pop
out
sub
lods
or
mov
and
jg
jnp
xchg
rcl
idiv
fnstenv
jb
inc
inc
test
or
jg
pusha
lea
pop
fsqrt
add
xchg
fdivrp
test
ret
jbe
cmp
ss
test
std
imul
cld
mov
sbb
lea
jae
cwde
cmc
(bad)
dec
in
lods
mov
js
in
push
dec
ret
out
jnp
(bad)
mov
pop
pop
fisttp
cdq
repnz
mov
push
rcr
dec
or
cmp
cmps
(bad)
add
das
dec
adc
mov
add
pop
je
ins
sub
clc
xchg
sbb
pop
push
jmp
(bad)
push
jo
retf
in
mov
adc
inc
jbe
mov
sub
cs
add
inc
jae
fwait
dec
in
sub
call
inc
adc
mov
inc
push
jno
das
leave
xor
and
sub
out
add
call
(bad)
or
xchg
dec
std
xchg
aam
sbb
pop
pop
loopne
and
ret
in
mov
(bad)
sahf
(bad)
push
sbb
fdivr
pop
add
jecxz
mov
jae
fsubrp
fist
in
lahf
dec
popf
repz
in
or
push
xchg
dec
adc
or
add
sbb
cmp
push
scas
aas
in
mov
sub
mov
out
pop
(bad)
jle
push
ins
adc
ins
push
mov
and
cdq
xor
adc
xchg
fidivr
lods
dec
nop
inc
xchg
xor
cmps
push
cmp
push
sahf
scas
mov
(bad)
mov
mov
and
std
or
into
fild
cmps
cmp
push
and
xor
mov
add
enterw
mov
dec
xor
ss
xchg
ficom
push
out
fcom
jge
(bad)
sar
fwait
jl
push
movs
mov
or
cld
cmps
mov
sub
ror
mov
jb
or
test
push
pop
jmp
jge
mov
dec
mov
and
dec
push
mov
pop
pop
or
fstp
add
push
inc
fist
fwait
je
mov
add
xor
sbb
shl
imul
dec
mov
xchg
es
frstor
aas
jo
xchg
mov
cmp
add
xchg
xchg
and
div
push
jne
xchg
xor
movs
fisub
jae
mov
jge
and
jp
into
imul
pop
shl
gs
dec
dec
fbld
or
adc
pop
cmps
fsubr
jmp
jmp
or
jbe
movs
pushf
ss
push
mov
sbb
cmp
into
aam
popf
ret
mov
mov
cmp
leave
nop
mov
int
inc
pop
jbe
in
inc
jae
outs
jb
xchg
mov
add
and
mov
jge
call
fs
mov
cwde
mov
xor
xor
jnp
adc
cwde
ss
cwde
idiv
jne
add
or
bound
pop
xlat
jecxz
cs
cmp
jae
mov
or
jmp
cmp
test
loope
mov
fmul
sbb
dec
int3
aaa
(bad)
inc
pop
jp
inc
call
in
clc
mov
cwde
mov
out
aad
mov
inc
mov
shl
dec
loope
aas
loope
dec
adc
not
jne
mov
imul
cmps
movs
sub
mov
icebp
(bad)
ror
out
call
and
adc
mov
mov
sub
cmp
leave
in
cli
add
push
dec
and
or
jns
adc
cs
je
xchg
scas
arpl
push
test
cli
mov
jecxz
pop
push
mov
cmp
dec
(bad)
push
retf
pop
push
push
xchg
mov
pop
daa
test
mov
pop
(bad)
mov
pop
repz
mov
push
mov
jecxz
imul
pop
std
inc
test
aad
sub
pop
test
aaa
inc
icebp
mov
sti
scas
jne
cs
dec
push
push
and
out
sub
mov
lea
jecxz
xor
sbb
retf
aas
in
call
ss
std
jbe
ins
fisub
or
mov
cmp
das
or
dec
jno
mov
out
xor
sub
mov
ficomp
cmc
fdiv
inc
adc
mov
rol
inc
push
push
sbb
call
fild
and
mov
dec
cdq
mov
adc
pop
out
das
xor
jne
adc
cmp
xchg
rcr
aam
iret
push
and
call
and
add
cmp
mov
lods
out
xor
push
or
xchg
mov
leave
lea
call
nop
(bad)
clc
test
addr16
jb
dec
rcl
test
jecxz
repz
xchg
push
js
and
and
cmp
pusha
mov
push
leave
add
fcmovnu
aaa
adc
mov
aaa
(bad)
fnstcw
inc
mov
jl
popa
jae
or
push
push
stc
add
ins
or
stos
popa
int3
mov
push
pop
xchg
sbb
dec
retf
add
std
sub
aaa
mov
sbb
pop
pop
xchg
scas
(bad)
xor
iret
adc
mov
sbb
dec
das
add
xchg
movs
std
inc
or
inc
add
push
mov
ja
hlt
(bad)
and
push
add
xchg
out
icebp
loope
push
jb
xor
ss
icebp
ins
repnz
xor
icebp
out
push
xchg
mov
in
mov
xchg
hlt
stc
sbb
in
and
mov
cmp
add
daa
mov
fisttp
mov
adc
jb
and
pop
cs
sbb
or
inc
outs
adc
mov
mov
or
(bad)
xchg
cmp
or
or
mov
out
(bad)
leave
mov
aaa
mov
mov
and
jbe
cmp
in
bound
not
mov
mov
xor
nop
pop
adc
lahf
xor
les
ret
retf
push
xchg
mov
sbb
(bad)
jo
(bad)
xor
jmp
cmp
aaa
rcl
aas
hlt
popf
add
test
mov
inc
pop
jno
popf
fistp
(bad)
jecxz
aad
jmp
push
and
xchg
dec
jnp
cmp
cmp
mov
mov
adc
movs
inc
sub
mov
pop
adc
les
jnp
dec
pop
inc
xchg
pop
push
pop
mov
iret
loop
jo
cmp
jnp
loop
mov
push
fnop
out
call
pop
and
xor
test
inc
aas
push
movs
das
(bad)
int3
ror
aaa
ins
xchg
jle
mov
pop
lahf
dec
aas
xor
mov
call
cwde
and
push
(bad)
fwait
jge
fmul
add
hlt
rcl
inc
pop
(bad)
into
xor
ror
js
jmp
inc
test
push
push
adc
ret
sub
stos
mov
aas
je
gs
dec
pusha
mov
cs
add
dec
jl
xchg
cwde
jns
inc
jnp
or
imul
in
fadd
(bad)
mul
imul
retf
xor
(bad)
rol
loope
inc
and
adc
jae
sbb
ja
xchg
mov
jb
imul
jb
scas
sub
jnp
cmp
pop
mov
pop
inc
imul
loopne
out
push
mov
adc
dec
lods
and
or
cwde
mov
enter
popf
popa
sub
xor
inc
popa
fstp
pop
daa
jecxz
push
aas
arpl
adc
and
jmp
inc
movs
ja
pusha
call
hlt
sbb
(bad)
(bad)
push
jmp
ds
and
cwde
(bad)
jle
fistp
mov
xor
sub
push
gs
outs
add
imul
hlt
sub
sub
xchg
mov
jmp
mov
push
sub
pop
xchg
mov
cmp
stc
jmp
cmp
pop
inc
or
ds
shl
and
add
loopne
add
cwde
jo
jl
push
jae
dec
icebp
retf
nop
pusha
jg
js
ins
mov
fmul
loopne
jp
icebp
lea
arpl
jecxz
pop
sahf
call
fwait
cmovno
cmp
mov
pop
fisub
es
lea
jne
lahf
loop
dec
not
aam
ins
mov
std
pop
cvtps2pd
(bad)
mov
les
xor
xchg
xor
xchg
rcr
in
add
jmp
les
pop
inc
ss
mov
(bad)
sub
inc
dec
ss
push
and
clc
xchg
jns
daa
cmp
or
outs
shl
je
into
xor
pop
test
cmp
cs
sti
dec
inc
push
retf
lods
retf
mov
and
adc
push
mov
dec
pop
add
(bad)
cli
sub
adc
push
lds
add
pop
and
dec
adc
inc
in
scas
mov
sub
leave
jo
xchg
push
mov
and
sub
mov
mov
sti
cmp
or
adc
loope
pushf
shl
adc
out
aaa
dec
sbb
add
loop
adc
(bad)
sbb
push
es
lock
(bad)
sbb
dec
shl
push
or
into
std
mov
hlt
mov
fldenv
cmp
std
xor
mov
pop
adc
aaa
cmp
outs
adc
aas
cmp
je
lock
push
in
cmp
and
cdq
test
mov
adc
neg
jne
lock
or
retf
lock
aaa
push
bound
in
add
jl
and
xchg
imul
dec
pop
xchg
inc
pop
mov
jb
jle
pop
fisubr
mov
mov
jge
ja
sahf
dec
sub
push
adc
and
jo
and
fcomp
cs
hlt
sbb
xor
ret
std
outs
xchg
es
dec
sub
pop
or
jo
popf
inc
rcl
mov
mov
xchg
push
xchg
jns
jl
repnz
fsubp
dec
addr16
jmp
jmp
sub
push
pop
xor
xchg
scas
and
cmps
push
sub
out
inc
bound
adc
test
adc
fimul
or
sar
adc
and
int
dec
pop
fs
dec
inc
xchg
jae
aaa
inc
cmp
jbe
jo
and
adc
sbb
mov
lds
jb
scas
xchg
(bad)
das
mov
into
test
sbb
sub
out
nop
test
prefetcht0
test
mov
mov
jmp
rcr
not
cmp
out
cli
in
clc
ss
mov
sti
dec
xchg
mov
inc
test
xchg
imul
inc
sub
sub
sar
jnp
icebp
pop
mov
pusha
mov
fadd
cwde
jns
movs
xor
inc
pusha
mov
imul
jecxz
in
js
pushf
fs
fcmovnb
sbb
xor
div
call
pusha
icebp
jns
into
ins
xor
aaa
dec
fmul
pcmpgtw
cs
shr
mov
sub
icebp
sbb
mov
outs
fisttp
xor
and
cwde
push
fld
inc
pop
int
cmps
mov
mov
jg
jmp
fidivr
and
dec
pop
jae
(bad)
xor
loopne
in
enter
xchg
mov
fstp
push
icebp
stc
sub
mov
pop
in
ret
sub
cmp
shl
neg
xchg
inc
sbb
mov
rol
push
sbb
jne
in
aaa
loopne
jl
cmp
repz
adc
bound
sti
sub
cs
outs
(bad)
mov
dec
cmp
inc
lea
push
and
jmp
pop
and
xor
jo
in
sbb
sbb
gs
mov
xchg
int
push
mov
out
sub
loope
nop
jg
lea
dec
pop
inc
jmp
xchg
sub
or
cwde
jo
shl
sbb
push
sar
out
scas
xchg
xlat
ja
repnz
dec
adc
jne
test
hlt
jb
sub
repz
jns
xchg
push
imul
in
push
sbb
pop
(bad)
jae
lock
test
ds
xlat
mov
cmp
out
inc
iret
in
pop
cmp
fild
pusha
(bad)
xchg
mov
idiv
add
aam
cli
(bad)
dec
daa
mov
cmp
div
sub
and
popf
ss
and
frstor
cld
xor
adc
lea
test
frstor
pop
xchg
fs
mov
mov
push
inc
or
cdq
inc
psubb
dec
stos
imul
in
ss
xor
imul
shr
add
push
fcomp
sbb
cmp
sahf
fndisi(8087
shr
sar
dec
enter
aad
repnz
sub
xchg
adc
loopne
or
dec
(bad)
shl
clc
sbb
sub
fistp
jae
das
sub
jp
push
sub
repnz
das
jg
in
mov
dec
loop
rcr
cs
popa
sbb
dec
push
in
je
push
scas
aad
pop
inc
lds
mov
stos
jo
stos
sti
loop
or
add
dec
mov
cmps
sbb
std
xchg
mov
clc
inc
push
stc
rcl
(bad)
mov
not
inc
jmp
xor
rcl
jg
shl
int
frndint
movs
dec
enter
imul
jmp
cmps
into
pop
add
sahf
jmp
cs
push
pop
xchg
lods
stc
or
imul
push
push
push
leave
mov
push
call
or
out
mov
pop
js
addr16
and
mov
in
arpl
adc
inc
aam
cmp
sub
dec
shl
je
std
adc
jns
das
cmps
pushf
jnp
cmp
push
push
mov
ds
es
and
in
ret
cmp
aaa
fiadd
add
mov
mov
and
outs
scas
sub
ss
outs
sbb
ficom
gs
pop
popa
shl
mov
pop
scas
inc
ficomp
scas
imul
les
pop
jge
or
mov
pop
jno
pop
test
icebp
test
sbb
jmp
push
movs
dec
mov
mov
stos
sbb
mov
mov
pushf
test
mov
or
mov
call
sub
loop
scas
mov
mov
xchg
cmp
jb
push
aas
adc
jnp
push
imul
in
icebp
sub
ss
pusha
cmp
loope
push
jo
stos
sub
das
or
cdq
pop
push
dec
psrlq
jmp
inc
or
mov
adc
xor
out
add
xchg
mov
pusha
dec
fld
lods
and
pop
lahf
lods
dec
and
dec
adc
jmp
add
mov
lods
jle
ss
adc
ror
or
mov
into
imul
inc
ss
in
js
movs
test
xchg
and
hlt
cmp
sub
ret
fist
je
dec
adc
fmulp
sbb
or
xor
sti
xor
add
repnz
or
xchg
int
movs
mov
inc
vmovshdup
sbb
nop
cmp
std
dec
xchg
outs
jle
sbb
push
lahf
add
hlt
inc
jge
add
mov
adc
mov
ret
in
pushf
test
ins
fdiv
and
adc
push
ret
test
(bad)
into
xor
not
xchg
dec
stos
stc
adc
movs
aad
mov
aad
lea
and
fcomp
sub
pop
adc
outs
scas
fadd
cs
pop
sub
addr16
mov
in
cli
and
out
cmp
xor
ret
imul
or
out
(bad)
mov
(bad)
mov
std
ins
dec
pop
(bad)
adc
out
icebp
mov
add
in
sub
fisub
adc
xchg
sub
inc
dec
dec
retf
int
lods
xor
push
cmp
dec
mov
cmp
aaa
cmp
out
stos
xchg
mov
and
pop
mov
xchg
xchg
inc
retf
fcmovnu
mov
iret
xchg
push
mov
xchg
mov
(bad)
sub
push
xchg
cmp
mov
nop
popf
fld
dec
repnz
pop
adc
xchg
xchg
pushf
adc
(bad)
pop
std
push
push
lods
sahf
add
cmps
bound
mov
test
shl
xor
xor
adc
xor
mov
cmc
ss
rcr
mov
movs
out
aas
call
sahf
out
aad
sbb
add
shr
push
sub
xchg
nop
mov
mov
nop
xchg
push
xor
dec
xor
xlat
push
outs
mov
test
cmps
sbb
inc
ror
lods
pop
jmp
add
or
pop
into
into
ficom
jb
and
loopne
add
push
mov
push
or
popa
mov
xor
fwait
or
pop
mov
push
cmp
inc
jns
push
add
adc
pop
es
cs
pushf
cmp
adc
sbb
cmp
rcr
stc
sub
retf
gs
in
dec
inc
loop
neg
push
mov
setnp
jb
lods
aam
call
sar
test
js
rcl
fcmovu
or
push
adc
aad
mov
and
xchg
loop
xchg
mov
xchg
adc
sub
inc
retf
test
adc
jl
pop
sub
mov
cmp
sahf
dec
jae
sahf
sbb
lahf
and
push
mov
xor
mov
mov
jmp
(bad)
clc
cmp
aaa
lahf
and
(bad)
ins
and
mov
jmp
out
shr
lods
push
pop
fld
sbb
ror
mov
mov
add
add
lea
aaa
mov
push
push
jl
push
ror
ja
cmp
mov
inc
cmps
inc
lea
push
arpl
push
push
cwde
sar
add
pop
ja
jg
mov
aad
ficom
pop
mov
push
mov
or
fadd
xchg
pop
and
pop
enter
mov
mov
jmp
xchg
hlt
xchg
jmp
cdq
mov
push
daa
cmp
sub
ja
mov
int
lahf
xor
jle
dec
int3
jne
adc
sub
loope
retf
aas
push
cmps
popa
push
pop
jne
test
mov
sub
retf
sub
dec
addr16
ror
mov
mov
adc
mov
popa
rol
or
push
xor
int
jnp
inc
mov
test
dec
retf
ror
mov
outs
aaa
rcr
sahf
bound
lds
xchg
mov
mov
(bad)
mov
mov
cmp
pop
xchg
xchg
(bad)
scas
mov
push
mov
jmp
push
ret
add
es
retf
dec
xor
xor
pop
mov
mov
mov
or
cmp
sbb
sub
retf
pop
dec
jae
xchg
data16
cmp
fyl2x
fadd
lods
inc
jmp
or
mov
in
sub
pop
nop
mov
stos
lods
pusha
call
imul
adc
mov
es
jbe
fcomp
push
jecxz
xchg
out
inc
xlat
cmc
pop
xlat
call
jb
scas
mov
cmp
sub
jno
cmps
lock
pop
or
shr
inc
inc
mov
movs
pop
sbb
mov
dec
daa
mov
xchg
cli
jne
sub
lahf
mul
fnstcw
add
js
(bad)
daa
stos
add
mov
repz
push
push
jns
xor
ins
sub
retf
cwde
fcom
cli
outs
mov
les
cmc
pop
rcl
test
mov
outs
data16
push
fist
sbb
fwait
xchg
cli
adc
lods
cmp
out
inc
jo
call
adc
leave
mov
inc
movs
fild
nop/reserved
push
sbb
test
mov
mov
lds
popa
shl
loope
sub
push
icebp
fs
inc
in
mov
ins
mov
adc
mov
out
scas
dec
jl
sub
pop
jge
mov
sub
sub
(bad)
mov
in
jmp
or
and
pop
cmps
or
call
jp
(bad)
dec
cli
jo
into
popa
shr
jne
in
or
or
jae
cmp
ds
in
out
mov
scas
ins
cwde
loopne
fmul
cmp
mov
call
push
dec
inc
enter
mov
fiadd
shr
push
test
add
enter
adc
adc
inc
push
sbb
test
ret
fidivr
ror
ds
sub
imul
imul
dec
mov
push
mov
and
pop
push
cmps
inc
pushf
jno
mov
and
(bad)
(bad)
test
push
add
add
rcl
jo
fisubr
fnstsw
dec
pop
std
fisub
(bad)
imul
retf
jl
loopne
loopne
and
jmp
scas
pop
cli
jnp
xor
adc
mov
pop
idiv
repnz
(bad)
and
fisttp
addr16
inc
push
rol
xor
clc
iret
imul
pop
popa
popf
hlt
sbb
dec
inc
clc
xor
push
adc
test
xchg
pop
dec
dec
fisub
rcr
xor
inc
jns
idiv
aad
cmps
outs
inc
mov
sub
pop
mov
xor
mov
pop
sbb
call
pop
dec
test
adc
cmc
xchg
cmps
pop
jns
adc
add
add
push
shl
push
jmp
daa
rcl
not
or
mov
cmps
fisttp
aaa
push
mov
pop
test
dec
sub
test
test
xor
dec
int3
into
cmp
(bad)
retf
xchg
movs
neg
mov
repz
daa
xchg
ins
fwait
ins
arpl
inc
mov
loop
fcomp
mov
push
sbb
shl
dec
ja
mov
xchg
pop
iret
rcr
pop
and
stos
or
es
dec
add
cs
cld
push
sub
mov
out
stos
jl
call
ins
sub
outs
and
arpl
fld
and
nop
and
ins
jne
test
loop
std
cld
jo
add
scas
sub
add
push
or
add
mov
(bad)
das
sahf
stc
pop
into
mov
pop
push
mov
ret
ins
sti
sbb
sbb
push
xchg
lock
xchg
test
es
aas
inc
mov
sbb
mov
ja
ss
sbb
jg
stc
dec
sbb
adc
dec
scas
xchg
cmp
retf
xor
call
ficomp
or
cmp
mov
mov
jecxz
ins
cmp
jmp
push
rcl
pop
loop
sub
mov
push
imul
leave
mov
mov
int3
inc
cwde
adc
pxor
or
js
xchg
mov
inc
mov
int
push
fsub
shr
cmp
and
push
mov
inc
xchg
or
mov
dec
xchg
mov
ins
and
mov
mov
mov
fimul
xor
mov
pop
cld
out
leave
jge
sbb
jns
dec
nop
lock
fsubr
jp
mov
mov
inc
or
into
xchg
inc
scas
cdq
xchg
adc
add
es
sbb
fnstcw
pop
sbb
push
fldcw
pusha
icebp
and
test
sub
adc
mov
(bad)
pop
out
and
int
call
cdq
mov
xlat
adc
stos
cwde
mov
inc
mov
lea
push
dec
jns
mov
mov
fiadd
fmul
push
jle
test
mov
fnsave
xor
add
dec
int3
test
nop
jge
add
(bad)
sahf
or
jae
xchg
jmp
push
lea
popf
(bad)
arpl
dec
add
fs
add
mov
je
ror
sub
inc
lea
mov
jo
pusha
cld
jl
fld
imul
lods
lods
xchg
mov
cmps
dec
adc
xchg
in
or
pop
stos
iret
loopne
aaa
mov
addr16
dec
sub
retf
or
add
push
xor
adc
pcmpgtw
pop
lea
inc
in
push
push
xchg
ffreep
sar
jge
arpl
and
jmp
jb
cdq
in
hlt
cmc
imul
sti
adc
fdiv
pop
outs
add
jbe
ins
in
mov
xor
fst
xor
lods
mov
add
and
out
(bad)
sub
add
jno
jle
push
sub
push
jmp
int3
mov
int3
xor
loope
je
mov
push
mov
in
cld
push
(bad)
push
xchg
push
jg
mov
jno
mov
push
jmp
sbb
imul
shl
out
and
jle
xchg
fwait
cld
icebp
jp
ins
and
push
pushf
mov
pop
mov
xchg
mov
cdq
pop
(bad)
cwde
je
inc
fsubp
push
js
fimul
adc
popa
in
sbb
xchg
mov
ret
inc
sbb
sahf
les
push
(bad)
sti
xchg
push
or
sub
sbb
scas
jmp
pop
mov
add
xchg
rcl
hlt
out
addr16
(bad)
sub
repz
(bad)
repnz
pushf
aaa
call
xchg
xchg
(bad)
dec
add
ficomp
mov
nop
ds
mov
rol
popf
inc
cdq
enter
jg
in
mov
xchg
loope
cmp
dec
dec
xlat
sub
push
sbb
sbb
call
and
inc
cmp
push
and
bound
push
cmc
jno
adc
mov
mov
jae
mov
cmp
push
in
add
fld
push
into
push
call
dec
inc
xor
push
mov
jns
jp
mov
sub
mov
push
movzx
push
or
xchg
into
pop
dec
inc
(bad)
outs
call
cdq
mov
jne
cmps
loop
ds
repnz
push
lea
loopne
or
ins
xor
xor
pushf
cdq
dec
(bad)
test
cld
mov
and
xchg
dec
mov
in
clc
xchg
adc
or
fs
in
jl
loope
add
cld
les
adc
stc
and
jns
je
inc
cmp
inc
dec
ret
or
test
xor
sub
aad
movs
(bad)
rol
dec
loop
mov
fsubr
inc
jae
popa
dec
mov
or
fist
push
cmp
and
mul
jae
sar
test
outs
inc
in
das
and
fisub
and
jl
push
inc
dec
out
and
fldcw
(bad)
xchg
inc
xchg
adc
(bad)
jg
mov
dec
or
adc
test
and
jge
inc
aaa
sub
cmp
mov
hlt
pop
sti
popf
push
test
fist
push
sbb
mov
mov
xchg
jo
adc
imul
inc
sbb
add
ins
retf
imul
(bad)
rcl
inc
lds
(bad)
dec
mov
mov
mov
add
and
nop
cmp
test
lods
adc
dec
sbb
loop
adc
nop
dec
mov
aaa
sub
out
stos
fistp
jge
mov
jnp
adc
pushf
push
aam
sub
adc
not
jmp
dec
mov
or
inc
(bad)
xor
(bad)
mov
or
xchg
loope
add
int3
repnz
(bad)
sar
jge
call
mov
mov
ret
cmp
cwde
ins
cwde
lods
fisttp
or
lock
inc
pop
push
(bad)
lahf
add
push
in
sbb
cmp
sbb
add
xlat
push
dec
ret
pop
(bad)
scas
rol
in
mov
adc
call
pop
ror
add
lods
in
add
adc
push
mov
es
add
(bad)
jae
outs
xchg
iret
xchg
das
lahf
xor
pop
pushf
cdq
adc
imul
mov
popa
fwait
mov
push
int3
push
inc
in
mov
sub
mov
retf
addr16
cmp
sub
(bad)
jne
cmps
sbb
sub
call
sti
lods
mov
stos
pusha
test
and
hlt
jmp
mov
fidivr
aas
push
mov
jecxz
jmp
lods
pusha
loop
dec
inc
clc
xor
call
mov
stos
adc
dec
imul
data16
cmc
adc
pop
push
pop
jo
lds
sbb
add
lods
inc
adc
cmp
int3
xor
scas
push
mov
jo
pop
mov
push
jge
jmp
mov
xchg
ja
mov
outs
ins
adc
xor
je
cwde
cs
adc
(bad)
pop
mov
sub
repnz
ret
jle
popa
or
into
sbb
mov
in
sub
int3
mov
dec
cmp
leave
jae
pop
hlt
mov
pop
xchg
push
jp
pop
shl
fmul
sbb
mov
add
and
pushf
test
inc
in
or
not
ins
inc
imul
mov
lods
mov
sbb
xchg
xlat
and
pop
add
dec
in
and
cwde
mov
call
addr16
test
push
push
aam
dec
sbb
push
int
sub
jl
pop
jmp
test
sbb
aam
sub
xchg
adc
cmp
push
fidiv
push
fs
inc
push
jbe
xchg
or
addr16
dec
jp
cdq
test
cwde
mov
fwait
mov
rcr
push
cmps
push
test
mov
stos
movs
neg
cs
mov
xchg
dec
iret
cmp
add
mov
jmp
in
xchg
div
cmp
cmps
dec
xor
push
or
cmp
pop
mov
es
mov
test
loop
mov
adc
daa
loop
or
out
cmp
stos
xor
stos
stos
or
lds
add
sbb
icebp
jno
out
xlat
adc
dec
fadd
inc
push
lods
mov
mov
jp
mov
add
adc
(bad)
sbb
jbe
sar
xlat
jno
(bad)
popa
ret
cmp
cmp
popa
jge
outs
mov
fs
dec
and
or
pop
dec
sbb
arpl
ja
aaa
and
push
cmp
(bad)
sbb
cmp
jmp
addr16
rcl
aam
xor
pop
shl
shl
mov
push
cmp
and
or
lea
inc
cwde
inc
inc
or
ins
(bad)
mov
cmp
loop
dec
cmp
movs
in
mov
push
sbb
and
cmp
cmp
mov
mov
push
sub
idiv
test
fdivrp
fld
push
sar
js
pop
in
pop
daa
mov
pop
ss
int3
lods
movs
or
sahf
gs
fild
add
outs
fcomp
lods
push
and
jle
inc
sti
push
mov
push
adc
jo
scas
in
cmp
aad
rcr
fs
hlt
sub
pop
adc
ret
fdiv
aas
push
jge
cmps
mov
cdq
jno
scas
ja
mov
mov
xor
jg
call
add
jg
retf
pop
cs
xchg
dec
scas
rol
aam
mov
xchg
out
sbb
mov
cmp
je
add
jg
icebp
fimul
or
loop
adc
loope
mov
pop
push
sbb
pusha
adc
sti
nop
cmp
jns
or
ds
jge
inc
sub
push
or
mov
mov
inc
mov
adc
fimul
es
lea
adc
test
cmp
and
outs
mov
inc
pop
lods
aaa
ins
fnstenv
out
xor
fndisi(8087
jmp
push
scas
dec
xchg
enter
mov
sub
sub
pop
in
push
push
jbe
fbld
retf
repnz
push
mov
push
xchg
mov
mov
cmp
aad
mov
cs
mov
dec
xchg
inc
enterw
loop
retf
xor
ja
(bad)
pop
mov
out
mov
jmp
sbb
inc
cmp
pop
loop
cld
dec
add
stc
mov
outs
clc
jno
jmp
jg
into
not
or
mov
add
cmc
out
retf
mov
adc
int3
mov
call
inc
add
push
xchg
test
(bad)
xor
ss
jmp
jl
pop
jns
rol
pusha
imul
pop
ror
bound
xor
mov
mov
out
xchg
jge
adc
leave
jg
push
dec
pop
out
xchg
and
jle
fs
dec
xchg
fwait
pusha
fstp
dec
rol
pop
addr16
lods
xor
outs
inc
cmp
int3
mov
sar
loop
test
jnp
out
inc
push
movs
popa
hlt
jmp
sbb
pop
jg
and
movs
iret
dec
xchg
dec
(bad)
cld
stc
push
iret
lea
movs
sub
dec
dec
adc
retf
xchg
mov
xchg
sub
bound
cwde
add
mov
mov
cmp
ror
xor
inc
pushf
sbb
sub
aas
repz
mov
inc
fdivr
dec
ins
adc
retf
aas
lea
retf
pop
mov
jb
push
push
add
popa
dec
xchg
(bad)
or
mov
mov
in
call
clc
in
aam
in
scas
aad
push
stos
jnp
dec
cmp
(bad)
push
(bad)
xchg
mov
mov
xor
pop
cmp
leave
mov
sti
(bad)
sbb
inc
dec
data16
bound
mov
mov
push
pop
jne
outs
push
dec
cwde
in
xchg
and
pop
xchg
xchg
inc
clc
mov
push
out
xchg
cs
(bad)
mov
mov
mov
add
call
ds
xor
inc
in
dec
push
scas
jo
sbb
je
arpl
jb
jecxz
dec
scas
je
xchg
dec
(bad)
adc
adc
add
xchg
xchg
aas
mov
mov
push
fdiv
add
stc
push
mov
in
shr
push
fsubr
mov
or
shr
sbb
and
jo
jle
pop
dec
lods
aaa
ret
in
push
movs
adc
imul
ss
adc
outs
fs
mov
mov
out
outs
sbb
rcl
xchg
stc
xor
pop
mov
enter
cwde
adc
mov
jg
or
rcl
test
repz
fwait
leave
mov
dec
dec
imul
in
mov
dec
aas
test
adc
mov
jl
rol
sub
and
sub
adc
pushf
xchg
pop
aam
and
out
cmp
js
mov
jnp
scas
ror
shr
test
mov
add
or
xchg
arpl
sar
retf
jb
mov
or
out
and
dec
std
mov
xchg
sar
xlat
push
jl
imul
xchg
cwde
shr
les
or
scas
add
pusha
adc
push
cmp
push
cmc
enter
(bad)
cmp
popf
dec
jnp
lahf
retf
push
and
je
mov
jnp
scas
jmp
mov
add
aas
mov
fstp
push
into
add
sub
mov
enter
sbb
les
out
dec
lea
sbb
dec
cmp
imul
and
repz
inc
push
xchg
ficom
adc
add
xchg
out
xor
or
out
imul
adc
mov
repz
sub
mov
push
xchg
adc
xor
add
cmp
enter
clc
push
imul
dec
retf
ficom
ror
inc
rol
mov
out
mov
and
retf
mov
imul
mov
mov
dec
test
mov
adc
fcom
daa
dec
lock
adc
and
xor
jmp
in
sub
jo
rcl
xor
cmp
shr
mov
xor
push
or
add
pop
adc
out
vrcpss
pop
mov
(bad)
loop
lods
add
cld
cld
jnp
xchg
fdivp
xchg
popf
fild
repnz
and
or
fisub
icebp
dec
test
mov
stos
fld
sub
imul
sub
nop
cmp
(bad)
cmps
mov
loop
ret
inc
mov
push
xchg
xchg
sbb
pop
retf
mov
(bad)
push
lock
xchg
mov
das
in
pop
int
push
xchg
pop
pop
push
push
ror
and
mov
adc
in
mov
sub
das
fs
test
xchg
out
outs
sbb
inc
jecxz
(bad)
imul
ins
adc
push
mov
inc
cmps
dec
and
mov
lea
cdq
sbb
push
dec
call
jp
aad
sub
xchg
mov
dec
(bad)
pushf
test
sbb
mov
xor
sbb
xchg
cmp
add
or
push
mov
dec
test
inc
(bad)
enter
cli
in
cdq
cmp
shl
jg
inc
ja
mov
or
mov
push
cmp
retf
mov
mov
das
sbb
push
push
ins
jg
sbb
jae
int3
mov
adc
inc
dec
dec
xor
cdq
pusha
test
sub
inc
pop
dec
mov
movs
sbb
mov
pop
jl
mov
addr16
les
or
fucomi
imul
adc
xor
cli
push
sub
mov
xor
jecxz
inc
fucom
addr16
adc
out
xchg
sbb
ds
add
out
ret
and
scas
mov
pop
jb
(bad)
movs
push
out
imul
push
sbb
cs
js
jns
mov
ror
lahf
push
fsub
in
cmps
aas
mov
mov
and
(bad)
retf
sbb
test
pushf
xchg
jecxz
mov
movs
lock
xor
lods
sub
jb
inc
enter
gs
out
push
shl
push
xchg
outs
(bad)
sbb
sub
or
cs
fadd
jle
out
add
(bad)
call
jbe
xor
add
dec
mov
jle
xor
arpl
sub
cmp
mov
cvtps2pd
push
icebp
(bad)
cmc
pop
pop
sbb
in
pcmpgtd
leave
ret
popf
cdq
int
sbb
and
int
push
ret
cld
ds
adc
cli
bound
jnp
add
fstp
sub
ret
nop
scas
mov
out
mov
add
xor
daa
cmp
adc
mov
xlat
jp
leave
jb
mov
jl
push
test
or
sub
add
test
jb
mov
xchg
nop
xchg
mov
xlat
inc
popa
clc
cmp
inc
push
rcr
cmp
inc
(bad)
aas
jne
cmps
mov
adc
ins
pushw
call
mov
mov
mov
pop
mov
pop
xchg
enter
out
sti
inc
add
jp
dec
in
mov
cli
mov
in
push
cld
sti
mov
(bad)
xchg
add
ret
sbb
ficom
loop
cwde
inc
pop
and
mov
leave
outs
dec
cdq
aaa
neg
inc
jae
scas
dec
and
mov
ret
add
inc
test
cmp
in
sub
sar
popf
mov
dec
scas
mov
and
imul
jl
sub
imul
daa
into
stos
or
(bad)
call
fidivr
les
cmp
es
(bad)
stc
cld
fsub
in
add
test
icebp
add
xchg
add
sub
repz
sbb
mov
pusha
sbb
retf
(bad)
sbb
cmc
bound
pop
or
sub
inc
movs
test
mov
rep
push
aad
(bad)
mov
xor
adc
jnp
dec
aad
xchg
sub
dec
mov
mov
les
repnz
ret
fdivr
mov
fadd
stos
and
and
rol
sahf
add
cmps
in
dec
lods
cmps
pushf
or
(bad)
jl
or
jae
inc
std
jbe
test
jle
cmp
stos
fldenv
mov
out
int
mov
or
dec
mov
inc
and
nop
enter
or
push
aad
popf
mov
loop
shl
fild
ret
popa
popa
fchs
inc
clc
mov
aam
add
fldcw
call
outs
mov
sbb
sti
add
push
aad
leave
call
push
ins
cwde
inc
sub
and
and
sub
sti
sub
adc
xchg
cld
mov
jno
cwde
xchg
mov
add
outs
sub
(bad)
jl
jmp
jmp
repnz
out
sti
mov
xchg
imul
sub
jle
mov
push
add
mov
aaa
ja
adc
mov
iret
dec
mov
jle
add
cmp
jae
in
ficomp
in
pop
aad
in
js
nop
push
jns
cli
jg
jae
mov
and
sbb
test
in
xchg
or
xchg
daa
imul
xchg
std
mov
cli
dec
aad
in
inc
adc
rol
jb
jno
jmp
xchg
push
inc
xchg
cmps
call
sahf
and
lods
je
(bad)
xchg
test
sbb
xchg
int
add
aas
imul
mov
push
pop
jbe
aad
mov
ror
repz
fild
mov
fsubr
pop
std
and
sbb
push
or
movs
mov
jns
inc
loopne
je
adc
lods
cmp
in
xchg
mov
int
or
scas
xchg
clc
cmp
lods
fbstp
outs
sub
lds
ror
add
jo
mov
or
xchg
xor
mov
mov
fisubr
jbe
push
aad
and
push
jle
ffreep
(bad)
loope
ficomp
add
mov
ret
adc
test
jle
push
jmp
popf
mov
test
mov
adc
jns
ss
cwde
outs
adc
maxps
jmp
pop
xchg
sbb
stc
xor
les
dec
adc
jo
mov
jnp
sbb
xor
mov
push
mov
loop
imul
jl
cs
push
loop
and
push
sub
call
sub
jne
lods
iret
cmp
aaa
out
out
out
btr
pop
cmp
fldcw
jmp
sub
cli
iret
push
lock
shl
ins
mov
cmp
int3
jg
xor
sbb
cmps
and
add
mov
dec
cmp
int3
add
ds
add
xchg
outs
mov
es
bound
shr
and
xor
and
aaa
dec
aas
xchg
push
adc
xchg
div
or
cmc
nop
xor
out
jmp
je
fst
cmp
(bad)
loopne
jl
sub
pop
test
push
(bad)
sbb
pop
gs
aaa
mov
cli
fnstcw
jp
(bad)
jae
ss
mov
xchg
push
sub
test
and
repnz
pop
inc
cmp
add
pop
fild
repnz
popf
mov
and
shl
jl
fs
std
in
mov
mov
pop
mov
and
nop
sahf
mov
and
in
retf
cmp
sub
adc
imul
imul
xchg
popf
jbe
nop
and
jmp
mov
sahf
icebp
retf
sbb
push
xor
(bad)
sub
shl
push
bound
mov
sti
jg
mov
iret
cmp
repz
dec
dec
sub
xchg
sub
movs
pop
into
mov
add
mov
sar
pop
push
inc
aas
and
scas
test
movs
lods
outs
dec
push
out
ret
sbb
dec
mov
loop
mov
sub
mov
into
or
add
sahf
(bad)
hlt
sbb
sub
or
cmc
cmp
or
push
pop
dec
shr
ficomp
push
fnstcw
test
ins
js
fs
cmc
imul
dec
call
outs
outs
test
js
mov
push
mov
sub
mov
adc
ds
rol
aam
das
clc
pop
pushf
add
std
ret
scas
mov
rcl
push
mov
add
jmp
fs
and
lods
call
pop
test
xor
push
retf
outs
mov
pop
xor
out
adc
sub
es
pop
shl
push
fadd
test
push
xor
mov
mov
je
hlt
dec
mov
dec
push
add
push
and
(bad)
loopne
push
jne
daa
loop
into
in
ret
rol
push
jo
imul
cmp
test
jg
xchg
push
sub
hlt
mov
mov
outs
inc
loope
xchg
fs
fstp
xor
dec
das
add
adc
(bad)
xchg
jns
pop
pusha
push
outs
cld
inc
fwait
sub
xor
pop
fisub
cmc
out
push
inc
adc
sbb
iret
lock
cli
int
jbe
ror
push
inc
jb
test
fs
shr
jns
mov
int
and
loop
fbstp
sti
pop
cld
push
icebp
xor
lock
sub
cmp
in
sbb
nop
add
mov
outs
cld
mov
lock
xchg
ins
fidivr
dec
push
jmp
xor
sbb
daa
lea
jle
test
pop
pop
jb
pop
inc
mov
imul
dec
outs
loop
inc
mov
or
(bad)
loop
aaa
das
add
pop
adc
inc
add
ret
sbb
cmc
nop
push
jbe
push
adc
mov
test
out
std
inc
loop
push
xchg
mov
jmp
add
inc
jmp
and
lock
aaa
cmp
jae
push
jmp
mov
pop
adc
mov
mov
loop
fcom
xchg
add
(bad)
in
dec
inc
mov
push
fnstsw
xor
loop
cli
cmp
jmp
sbb
add
repnz
inc
loope
int3
dec
imul
jge
push
and
push
push
add
jmp
cmps
movs
add
and
mov
imul
leave
das
mov
mov
cmc
xor
fsubr
int
xor
iret
mov
cmps
addr16
loope
ror
add
mov
jl
add
scas
shl
fisttp
clc
push
adc
ror
pop
out
mov
ss
movs
cld
xchg
jae
xor
aam
jbe
and
push
dec
shr
jo
cs
stos
dec
jmp
into
sbb
pushf
call
not
cmp
sbb
mov
ins
mov
cld
int
and
scas
pusha
adc
and
push
cmp
sahf
sub
fucomip
mov
mov
fild
sub
mov
test
ja
dec
inc
mov
sbb
std
les
scas
xchg
mov
cmc
dec
and
dec
retf
xchg
cdq
xor
scas
dec
stos
pop
imul
fcomp
aaa
or
sbb
xchg
outs
std
push
jmp
and
xchg
pop
push
stos
test
(bad)
scas
xchg
mov
mov
and
outs
add
and
imul
push
cmp
ffree
xchg
mov
fndisi(8087
sub
std
sahf
pop
push
pop
aaa
rcl
gs
stos
std
cmp
retf
je
neg
mov
mov
movs
stc
repnz
add
jge
(bad)
sbb
lahf
into
fadd
pop
hlt
sub
movs
add
or
je
xor
or
gs
add
retf
pop
js
or
arpl
jno
mov
sub
cmp
xchg
lds
sbb
dec
dec
shl
test
rol
out
ret
scas
xor
sub
inc
fnstsw
cmp
jp
sub
rcr
rcr
lock
pop
or
or
or
cmps
call
popf
loop
mov
xchg
cmp
ret
cwde
leave
xchg
stc
test
scas
jmp
je
pushf
jne
add
and
sub
fstp
push
sar
jns
sbb
mov
xchg
je
repnz
xor
dec
pop
xor
test
popa
test
mov
cli
test
cmp
inc
mov
sub
(bad)
push
or
push
sti
or
fcmovnb
adc
mov
add
(bad)
(bad)
and
dec
pusha
adc
inc
neg
fcmovnu
arpl
jle
jecxz
(bad)
cmp
cmp
out
cmp
jmp
cld
cmp
(bad)
in
sub
xor
test
dec
jg
jp
sub
inc
mov
add
fist
push
mul
cli
push
cmp
dec
and
into
inc
pop
pop
jnp
pop
adc
and
mov
jo
stc
add
mov
cdq
std
ret
movs
popa
push
in
jmp
add
lods
pop
(bad)
ja
push
lahf
mov
popf
test
clc
pop
ins
test
mov
dec
stos
(bad)
xchg
adc
sub
in
inc
mov
add
add
ja
daa
in
add
add
fdivr
cmps
stos
rcl
je
mov
ins
cwde
lea
inc
or
mov
or
mov
daa
mov
in
neg
dec
sbb
pop
and
dec
jecxz
scas
in
shl
fisubr
mov
mov
push
jo
icebp
pop
(bad)
movs
pop
adc
sub
mov
cmp
adc
sub
in
das
or
push
shr
retf
push
mov
imul
je
movs
in
jecxz
test
fcomp
mov
test
fucomp
push
mov
fucomp
mov
nop
lea
aas
lahf
push
sahf
push
mov
mov
inc
sbb
dec
or
push
loop
push
jbe
ret
retf
dec
adc
shr
clc
mov
jl
out
add
xchg
enterw
iret
aam
adc
loop
inc
outs
stos
inc
xor
out
jle
cld
cs
div
cmp
enter
add
sbb
pusha
in
retf
js
inc
pop
(bad)
mov
xchg
xor
cmp
xor
and
xchg
movs
lahf
js
dec
mov
daa
loop
push
outs
xor
mov
addr16
adc
call
cmps
adc
test
ror
dec
xchg
mov
xor
shl
push
inc
test
ds
mov
mov
aad
mov
cwde
stos
aas
dec
and
and
retf
inc
sar
cdq
ss
push
pop
mov
or
sbb
out
std
dec
cmp
mov
mov
fidiv
icebp
xchg
cmc
popf
ss
and
mov
aaa
push
das
sub
and
pop
(bad)
imul
test
bound
test
push
mov
cmp
pop
inc
xchg
sahf
jmp
and
mov
les
cld
mov
push
sbb
enter
js
lock
cli
sbb
gs
sbb
sahf
sub
fist
shl
cmps
stos
jg
enter
lods
xchg
pop
lock
popf
sub
dec
daa
test
test
int3
loopne
jg
call
xchg
adc
repz
xor
jmp
das
ficom
mov
sub
out
lock
push
xlat
xlat
push
push
cmc
imul
dec
xor
stos
lds
ret
gs
mov
mov
inc
xor
push
pop
adc
pop
pop
jl
pusha
sbb
dec
cld
xchg
shr
mov
div
dec
jb
mov
cdq
add
scas
jmp
cmc
lock
ret
jnp
mov
daa
fcomp
test
adc
sub
and
push
int3
test
cmp
or
cmps
inc
push
jge
js
imul
add
mov
mov
sbb
inc
jnp
daa
out
fsub
dec
stos
jae
dec
(bad)
cwde
mov
je
dec
or
inc
cli
push
push
push
fistp
(bad)
push
jne
retf
cli
aas
and
test
sbb
or
(bad)
jmp
mov
and
xchg
sbb
mov
and
xor
mov
cmp
les
shl
add
sub
and
cmp
enter
je
jbe
sbb
fldcw
int
ret
adc
repnz
adc
push
sbb
outs
inc
sub
lods
sahf
(bad)
sub
imul
lock
fld
sub
lea
pushf
imul
dec
call
(bad)
cmc
cli
fisubr
pavgw
fimul
gs
adc
in
xchg
or
mov
sti
jp
adc
retf
retf
lea
pop
les
test
(bad)
sti
dec
ret
sub
pop
pop
lods
jne
mov
mov
(bad)
jne
ror
mov
adc
gs
jmp
dec
xchg
lock
sub
jne
push
mov
or
into
push
fcom
neg
inc
xor
popa
icebp
jl
(bad)
popa
jmp
fwait
stos
add
fisubr
nop
add
imul
test
add
xchg
js
arpl
mov
push
ffree
push
in
sbb
rcl
pusha
xor
xchg
and
test
call
jnp
into
(bad)
and
ficom
xchg
pop
icebp
fs
imul
fsubrp
xchg
in
(bad)
lods
shl
jge
and
into
imul
mov
and
add
cld
jecxz
sar
mov
jle
fimul
fnstcw
dec
pop
cmp
not
mov
cwde
lock
out
out
sbb
push
out
mov
ret
adc
jmp
cmps
stos
and
or
in
push
xor
sbb
std
xchg
lahf
loope
xchg
xchg
pop
sbb
xor
(bad)
jecxz
daa
aas
nop
jle
and
fcom
pop
mov
test
nop
dec
jg
int
mov
test
jbe
and
repnz
ror
jo
iret
cmp
push
daa
and
adc
xchg
jne
fsub
(bad)
fmul
data16
in
cmp
das
into
ja
nop
hlt
fcomp
out
mov
fsin
fdiv
repnz
adc
sbb
xchg
add
or
(bad)
out
jle
call
jmp
push
jecxz
pushf
hlt
push
call
adc
bound
into
add
pop
xchg
movs
jmp
imul
out
int
mov
pcmpgtd
ror
inc
sub
or
aad
sub
fimul
jbe
(bad)
adc
adc
imul
sti
cmc
or
clc
xor
jmp
adc
mov
ins
rcl
in
sbb
mov
xchg
push
adc
mov
push
imul
ins
xchg
mov
mov
xchg
inc
cwde
push
xchg
shr
sub
jo
imul
cmp
out
dec
jle
inc
add
add
data16
xor
popf
jg
pop
jge
sbb
sti
stc
push
addr16
dec
ja
dec
push
aad
add
pop
push
cli
dec
cmp
pusha
xlat
in
aas
pop
mov
std
cmp
icebp
add
xor
mov
rcl
stos
cdq
or
cdq
push
mov
pop
pushf
cmc
repnz
popa
sub
inc
cmc
xor
push
sbb
mov
fnstenv
mov
pop
stc
imul
push
enter
sub
push
outs
in
mov
aad
dec
jecxz
sub
pop
loopne
test
out
mov
cmps
(bad)
mov
mov
lods
dec
mov
push
lods
das
adc
push
xlat
pop
jge
sar
sar
into
push
popf
or
outs
push
add
nop
push
adc
sbb
xchg
(bad)
shl
loopne
dec
and
xor
pop
fcmovnu
dec
inc
xchg
add
fisubr
sbb
jns
xor
adc
inc
call
inc
xor
cmps
and
cmp
lods
mov
fidivr
sub
int3
adc
repnz
inc
cmps
scas
addr16
lds
pop
arpl
or
xor
sub
sar
mov
and
xor
in
mov
sbb
push
add
je
pop
pop
mov
mov
push
les
cmp
popf
pusha
and
adc
je
xlat
pop
inc
loope
nop
jno
xchg
mov
fist
mov
pop
icebp
stc
fistp
cwde
mov
dec
scas
call
inc
cwde
xchg
fmul
sbb
(bad)
lahf
sbb
mov
inc
in
out
fisttp
dec
inc
xlat
(bad)
jne
inc
mov
push
jo
mov
jmp
shl
or
xor
nop
call
ja
inc
fidiv
cmp
pop
cwde
sub
mov
call
test
fmul
and
pop
mov
loop
fidiv
add
daa
cli
adc
cs
dec
or
add
sub
hlt
xor
shl
pop
jno
in
loopne
push
(bad)
jmp
fs
mov
jne
mov
adc
inc
retf
imul
pavgw
enter
aam
adc
add
fldz
outs
and
dec
and
call
pop
xchg
pop
inc
sahf
mov
cmp
add
test
pop
push
and
test
push
adc
cmp
fisubr
xchg
in
add
jl
sbb
das
call
mov
cmp
scas
lds
mov
and
mov
arpl
aas
jo
xor
adc
mov
repnz
pop
mov
gs
sub
fsubr
adc
nop
fdivr
dec
mov
mov
jle
call
cwde
dec
mov
sub
in
int
mov
push
movs
xchg
pop
mov
adc
mov
jge
neg
or
leave
mov
das
in
test
dec
jnp
push
fisttp
fcmovbe
ds
or
sbb
inc
jne
mov
xor
fst
test
ds
inc
ror
push
stos
xor
jno
fwait
orps
fistp
addr16
ret
movs
aas
cmc
ficom
inc
pop
and
arpl
push
add
mov
and
mov
push
loope
add
adc
leave
add
ret
xchg
nop
(bad)
pop
loopne
xor
fwait
sbb
shl
scas
loop
lock
stos
add
cwde
fst
xchg
and
dec
push
imul
jb
push
jl
aam
mov
fwait
add
jle
adc
fidivr
call
xchg
mov
fs
outs
lea
pop
pop
sbb
push
sbb
popa
jnp
mov
adc
jecxz
adc
shl
mov
jne
data16
xchg
je
pop
in
push
shr
cdq
adc
mov
into
adc
sub
cmp
jmp
ja
cmp
cmp
(bad)
cs
out
jecxz
sbb
and
or
fst
push
scas
mov
and
mov
sahf
nop
pop
mov
outs
push
cmp
das
int
ins
movs
add
sub
movs
mov
cmp
mov
aam
mov
cdq
int3
pop
sub
call
or
sub
das
sub
mov
jg
outs
jb
sbb
jae
mov
imul
pop
mov
sbb
push
js
jbe
int
mov
pop
inc
aad
sub
add
inc
(bad)
jecxz
adc
mov
xor
psrld
neg
ja
rcl
movs
dec
and
sub
xor
sub
push
xchg
add
jmp
mov
test
xchg
out
ins
inc
mov
fucomp
movs
(bad)
lock
jbe
aam
scas
test
push
in
mov
add
pushf
fs
popf
pop
and
and
sbb
mov
xor
sahf
out
pop
cdq
aas
jle
in
inc
mul
or
fisub
lods
adc
int
jge
inc
mov
movs
push
jmp
add
cmp
inc
cmc
leave
or
sbb
(bad)
fst
(bad)
mov
cmc
jo
(bad)
add
sub
repnz
adc
xchg
addr16
sbb
push
in
je
push
(bad)
ins
daa
icebp
adc
inc
in
cmps
cmp
repnz
mov
and
push
push
stc
iret
outs
jns
ins
imul
xor
inc
pop
ja
sub
scas
dec
test
emms
inc
jp
mov
push
out
pop
xchg
jge
pushf
sbb
add
inc
sbb
dec
sti
and
mov
sbb
bound
(bad)
mov
ret
xchg
xchg
inc
aaa
or
int
test
retf
ss
inc
jae
add
(bad)
mov
sbb
inc
test
jl
inc
ror
je
jp
and
stos
jnp
repnz
and
inc
xor
data16
adc
call
gs
or
or
or
ret
push
mov
mov
jmp
jmp
shr
jle
sbb
xor
sahf
push
pop
jge
pop
sub
add
and
popf
daa
sahf
and
push
cmp
adc
inc
test
dec
in
cdq
les
push
adc
loope
std
xlat
hlt
sub
sbb
pusha
mov
(bad)
mov
push
cdq
ficomp
mov
mov
adc
in
or
fldenv
push
pop
add
ja
sbb
jl
ret
xchg
adc
outs
sub
mov
dec
ret
jmp
(bad)
movs
outs
sub
scas
xchg
xor
mov
or
jp
cmp
rcr
jmp
jne
sbb
dec
and
mov
mov
js
sub
adc
inc
add
jmp
sub
pop
cmps
(bad)
inc
mov
lods
call
fdiv
orps
mov
sbb
and
jg
sbb
into
sbb
imul
xchg
jo
mov
xor
xchg
aam
ficomp
inc
loopne
rcl
mov
sbb
or
cmp
jne
jns
push
ror
add
idiv
jae
lock
jnp
sahf
or
jnp
out
add
nop
jmp
test
ror
pop
sub
das
lods
fnop
sbb
adc
leave
mov
sbb
add
scas
shl
mov
shl
cmp
sti
sub
and
dec
inc
inc
popa
fstp
cmp
xlat
jne
cmp
jmp
pusha
dec
sbb
jo
mov
cld
dec
out
ret
dec
sahf
mov
sub
es
jbe
neg
rol
push
add
fstp
repz
frstor
int3
movs
arpl
mov
and
icebp
movs
movs
jge
or
xor
mov
cmovbe
dec
popa
push
ja
xchg
mov
out
imul
scas
cld
ret
sbb
cmp
iret
std
lods
loop
movs
adc
jne
mov
sbb
adc
sub
sbb
xchg
inc
scas
ror
pop
pop
adc
cmp
sbb
inc
retf
cs
outs
bt
stos
mov
out
adc
inc
adc
xchg
push
and
sbb
cmps
mov
jb
(bad)
mov
xchg
jnp
fldenv
adc
and
cdq
pop
push
push
test
ret
xchg
pop
jmp
mov
cmp
fucomp
je
or
pop
xor
js
or
and
out
mov
dec
repz
xchg
sbb
in
ins
addr16
shr
xlat
js
lea
aam
xlat
sti
popf
mov
imul
test
adc
and
iret
adc
in
pop
jb
pop
push
cmc
mov
adc
push
jno
out
dec
je
jne
call
add
into
popf
push
icebp
mov
jne
and
jnp
sahf
mov
test
and
push
sar
push
push
or
mov
push
ja
mov
outs
add
aad
ss
loopne
mov
push
jg
in
or
jg
mov
jg
mov
or
pop
jl
rol
retf
adc
retf
mov
sbb
pushf
cmps
and
stc
(bad)
pusha
in
pop
popf
out
test
mov
push
sbb
mov
in
icebp
mov
enter
inc
sub
xchg
bswap
(bad)
(bad)
push
dec
cmp
arpl
jp
lds
sar
in
dec
in
sub
pop
pop
js
mov
jl
mov
and
out
mov
clc
mov
cli
mov
pop
push
je
adc
mov
lds
mov
dec
adc
leave
inc
add
pop
enter
ins
xchg
dec
ss
test
leave
fcomp
les
sahf
or
cld
div
add
les
cmc
pop
enter
nop
xor
loopne
dec
sub
(bad)
arpl
fdivr
stc
push
mov
push
arpl
cmps
pop
add
pop
loop
das
dec
(bad)
into
cmp
mov
inc
sub
add
clc
pushf
xchg
add
adc
xchg
xchg
loope
and
push
out
mov
or
inc
sub
xor
je
repnz
jnp
ss
aaa
sbb
mov
out
mov
and
mov
arpl
jae
ss
cmp
dec
or
aad
cmp
pop
or
stos
mov
xchg
fisttp
das
adc
mov
cmps
fsub
popf
imul
xor
cld
inc
(bad)
cmp
outs
xchg
jo
mov
outs
sahf
aaa
xor
xchg
mov
(bad)
jle
ins
leave
and
mov
test
push
adc
aaa
pop
fbstp
sar
(bad)
mov
and
mov
xchg
into
lahf
push
inc
dec
pop
ror
outs
push
lock
js
or
lahf
push
xchg
out
inc
ret
push
jbe
aas
loop
hlt
add
xor
jmp
push
sti
mov
xchg
adc
add
ret
xor
push
sar
sbb
ror
jb
adc
addr16
sbb
stos
pusha
dec
out
mov
mov
je
mov
xor
loop
es
dec
sti
inc
nop
data16
repz
sahf
or
hlt
ds
jns
jnp
xlat
xchg
in
sub
loop
pop
cmp
in
les
fst
aad
cld
pop
sbb
inc
pusha
sbb
test
jmp
pushf
or
pusha
retf
sbb
sti
inc
xor
ja
jmp
dec
stc
jne
fidiv
in
inc
mov
xor
jns
in
and
shl
(bad)
xor
in
sub
add
imul
mov
icebp
dec
stc
enter
mov
inc
adc
out
or
sbb
pop
xchg
nop
icebp
adc
stc
ins
test
pop
dec
ret
add
mov
(bad)
dec
mov
in
pop
jb
cwde
pop
push
arpl
idiv
adc
popa
retf
hlt
mov
loopne
xor
mov
daa
int3
repnz
lods
cmc
xchg
sub
(bad)
or
pop
add
push
(bad)
and
push
sub
mov
push
inc
int
add
imul
pop
mov
pop
sahf
aaa
inc
sar
or
or
and
iret
adc
enter
add
js
arpl
adc
ins
ror
lea
mov
dec
ja
inc
pusha
xor
call
stos
pop
loop
xchg
jne
(bad)
sub
jo
sbb
pop
mov
xchg
mov
enter
pushf
mov
gs
mov
sti
enter
test
dec
inc
arpl
enter
xchg
mov
mov
fstp
lods
push
xchg
scas
div
scas
cld
and
sub
cmps
pop
sub
or
mov
dec
jbe
sub
xchg
push
push
push
push
pop
mov
pop
int3
dec
sub
xchg
fisttp
scas
xchg
mov
loope
mov
xchg
sbb
mov
xchg
jge
sub
iret
inc
shr
and
adc
jo
(bad)
mov
ins
ret
push
stos
pusha
xor
xor
clc
mov
(bad)
retf
cmp
and
in
and
dec
pop
les
push
push
cmp
iret
retf
aaa
mov
loop
sahf
outs
jo
mov
cmp
jl
inc
adc
jmp
add
fcomp
test
sub
or
sbb
loope
adc
adc
xor
(bad)
mov
jno
movs
jmp
aaa
sub
(bad)
nop
dec
dec
ja
mov
mov
sbb
sbb
add
mov
pop
(bad)
dec
adc
ss
in
sub
mov
cmc
cmp
(bad)
sahf
dec
xchg
inc
mov
add
fisubr
dec
enter
sbb
test
or
add
mov
aaa
sbb
push
jp
add
in
scas
iret
push
fisubr
mov
imul
mov
add
test
mov
imul
or
jp
(bad)
aaa
and
scas
pusha
mov
daa
cli
daa
inc
xor
push
rcr
sub
or
sti
daa
or
pop
xor
xchg
(bad)
and
enter
inc
ins
mov
dec
aam
in
retf
add
mov
sahf
addr16
leave
jecxz
mov
je
inc
xchg
fnstsw
cwde
add
jle
daa
sbb
(bad)
test
popf
cmps
push
xchg
test
cmp
jp
inc
outs
cmp
add
cmp
mov
mov
or
in
pop
mov
aam
stc
xchg
sbb
les
xor
scas
repnz
or
sub
sbb
nop
add
jmp
inc
into
(bad)
sar
push
movs
jp
inc
das
mov
mov
je
fiadd
pop
push
add
and
mov
clc
adc
fbstp
leave
(bad)
jl
and
adc
bound
data16
cmps
fadd
pushf
fs
dec
or
cmp
inc
or
mov
popa
das
inc
cmp
ror
mov
ins
lock
aas
pop
mov
mov
aaa
push
mov
ins
test
scas
push
into
loop
repz
xchg
(bad)
clc
ret
shl
jbe
das
pop
mov
add
pop
stos
stos
xchg
xchg
sbb
pop
mov
add
sbb
outs
cdq
xchg
enter
ficomp
or
inc
dec
or
xchg
push
pushf
in
jbe
outs
sbb
(bad)
and
ins
add
pop
cmp
in
(bad)
xchg
dec
and
adc
out
loope
push
call
arpl
dec
xchg
dec
movs
mov
xchg
cmps
fild
test
add
xchg
pop
(bad)
(bad)
lods
mov
mov
adc
arpl
jge
int3
psubsb
push
dec
lgs
out
dec
in
or
sub
test
push
in
cs
xchg
jg
mov
or
cwde
outs
push
adc
dec
repz
sub
call
cmp
(bad)
push
(bad)
or
cwde
jp
call
add
lods
mov
nop
xchg
mov
dec
adc
clc
add
pop
ins
leave
stos
xchg
pop
aaa
sbb
aam
adc
jb
xor
call
enter
pop
out
and
jmp
mov
ja
icebp
stc
rcr
movs
add
sar
pop
pop
repnz
adc
das
mov
xlat
jns
mov
fstp
sub
push
push
fisub
mov
jae
(bad)
cmp
fst
ret
push
mov
ds
sbb
outs
inc
iretw
test
pop
loop
dec
inc
int3
mov
dec
cmp
mov
cmp
sar
mov
(bad)
cs
stos
test
inc
out
das
aam
or
sub
mov
inc
es
sub
in
push
inc
cmp
jge
jno
(bad)
cmps
retf
pop
and
mov
repnz
cmp
inc
mov
mov
mov
pusha
(bad)
(bad)
cmp
aam
jnp
xchg
es
arpl
push
scas
out
fs
xchg
mov
jb
lea
and
add
xor
bound
mov
mov
iret
mov
xor
cwde
pop
std
fsubr
cwde
and
leave
and
inc
inc
in
push
test
gs
push
lock
xchg
inc
(bad)
(bad)
lock
imul
shr
sbb
(bad)
int
dec
data16
int
jmp
popf
mov
(bad)
(bad)
pop
sub
pushf
mov
popa
sub
jl
mov
push
(bad)
das
scas
es
jne
stos
ss
(bad)
inc
int3
idiv
cli
nop
inc
mov
jmp
jecxz
push
mov
in
push
mov
dec
or
mov
out
pop
pushf
xor
add
mov
adc
push
ror
xchg
pop
mov
retf
fcmovnu
inc
inc
rol
in
stos
cmps
push
xchg
cmp
mov
mov
cdq
pop
xchg
outs
dec
enter
cmp
sti
(bad)
in
(bad)
aad
dec
sbb
dec
cmc
push
in
push
pop
aad
sahf
movs
xor
mov
retf
dec
dec
pop
adc
xor
loopne
cli
add
sbb
lock
push
jb
das
xchg
cmp
jnp
in
cmps
cmp
call
fwait
shr
sbb
jle
rol
js
or
imul
mov
daa
rol
test
push
xchg
sbb
ss
xchg
(bad)
dec
mov
jnp
in
(bad)
xchg
aam
test
mov
sbb
pop
inc
cmps
sub
je
or
sbb
cmc
je
xchg
inc
and
loope
jmp
loop
ret
loope
int
or
pop
push
enter
mov
loopne
rcr
xchg
int3
addr16
or
sbb
cld
mov
in
movs
xlat
mov
adc
(bad)
jo
loopne
inc
push
and
mov
mov
scas
or
inc
fmul
movs
jns
push
in
std
mov
rol
push
lds
call
add
(bad)
rcl
mov
(bad)
xchg
out
out
cdq
movs
or
ja
xchg
scas
sub
cmp
jp
inc
stc
ja
jae
mov
push
out
adc
and
push
fucom
call
dec
ins
push
retf
lods
in
dec
in
add
mov
outs
je
test
retf
sbb
cli
mov
dec
nop
sbb
fwait
into
fs
ficomp
stos
aas
js
stc
jbe
mov
imul
ja
test
jge
aas
test
xor
add
or
pop
add
stos
pop
fst
shr
mov
imul
call
scas
push
cmp
lock
pop
movs
push
push
scas
in
mov
xlat
in
adc
or
lahf
ins
mov
cli
repz
repz
mov
mov
pop
or
mov
fisubr
fwait
(bad)
(bad)
mov
std
int3
stos
and
cmc
jb
push
sub
punpckhdq
jae
pop
scas
jp
push
xchg
and
xor
cmp
lods
mov
xchg
adc
mov
cli
mov
imul
jno
jae
daa
cwde
mov
mov
retf
fldenv
call
inc
xor
sbb
xor
sti
mov
inc
dec
mov
mov
xor
fisub
ss
mov
cwde
fild
cmp
jmp
ss
push
and
inc
loopne
(bad)
ss
or
inc
dec
ror
jle
jnp
ss
pop
pop
bound
xchg
xor
std
popa
or
inc
sub
mov
cmps
pop
push
jo
cmps
push
push
mov
or
mov
sub
loop
hlt
pop
imul
cld
jbe
repz
stos
ds
xor
mov
fadd
jmp
aaa
sbb
push
movs
dec
sub
cmc
or
cmps
out
scas
mov
sbb
xor
dec
add
ror
adc
scas
or
enter
mov
push
stos
sub
xchg
out
cmc
dec
and
lods
add
in
xor
xchg
cli
scas
jmp
fcmovnb
pop
jp
xlat
std
mov
jae
ja
jmp
sbb
clc
in
lea
adc
sbb
out
fmul
or
push
sub
and
in
arpl
movs
out
push
pop
iret
adc
pop
mov
sbb
jl
pop
rcr
adc
sbb
mov
stos
bound
iret
mov
push
add
das
cmp
aam
sub
shr
add
xchg
and
ss
loop
jae
in
jb
aad
adc
xor
lahf
ja
jbe
fwait
aad
shl
jmp
cmc
xor
jge
dec
or
cmp
or
cmp
aad
cli
xlat
xchg
icebp
cmps
lock
out
jmp
add
jecxz
sbb
pop
or
sbb
out
and
pusha
adc
push
xchg
hlt
sti
ret
mov
push
lock
xor
or
test
push
dec
lods
ins
hlt
inc
push
and
cmp
push
repz
leave
cmp
and
inc
pop
push
cmp
call
scas
out
stc
jg
xchg
push
xchg
sub
sbb
adc
pop
and
jbe
mov
pop
ds
lds
pop
pop
das
(bad)
xchg
lea
sub
cld
pop
or
jb
stc
mov
push
sbb
jns
jns
jge
xchg
adc
push
fstp
or
stos
inc
js
test
ss
push
push
mov
push
push
jbe
push
xchg
pop
shl
in
mov
popa
leave
mov
mov
xchg
gs
test
mul
sti
rcl
push
jmp
or
push
cmps
(bad)
and
sub
cmp
inc
outs
cs
push
jmp
sbb
mov
fs
mov
imul
jae
add
js
jle
push
loope
mov
jle
lods
add
add
out
lahf
in
iret
pop
mov
or
cmp
in
mov
and
push
stos
cmp
mov
adc
jle
out
pop
cmps
and
mov
jb
aas
(bad)
and
xor
data16
xchg
cmp
retf
or
inc
adc
xlat
fstp
mov
jl
pop
cld
jge
xchg
sbb
popa
inc
dec
mov
scas
sub
pop
push
fdiv
mov
data16
in
xor
mov
mov
adc
aaa
xchg
jg
mov
jmp
ret
add
inc
and
fcom
adc
sub
lods
fstp
push
fxch
scas
dec
repz
sub
push
add
call
push
jge
je
push
dec
(bad)
push
mov
loopne
xchg
and
pop
inc
lods
push
jno
jbe
leave
rol
pop
sbb
push
call
loope
fld
inc
aam
mov
push
mov
stc
add
sbb
out
fstp
jg
ss
fs
sbb
pushf
div
mov
rol
inc
mov
add
jnp
push
add
out
add
pop
int3
xor
in
adc
inc
mov
imul
push
xor
add
mov
inc
fidiv
sub
sub
jnp
addr16
pop
xlat
ror
out
mov
dec
scas
xchg
xchg
jmp
popa
(bad)
out
(bad)
test
dec
fdiv
rol
adc
(bad)
sub
inc
jg
pop
(bad)
fidivr
ret
push
mov
data16
out
imul
xchg
inc
inc
pop
and
les
push
cmc
adc
test
jne
out
imul
or
xlat
push
test
xor
popa
mov
scas
add
fucomip
cmp
mov
in
enter
mov
pop
mov
inc
inc
push
or
loope
div
push
sbb
aas
or
pop
dec
sub
in
xor
in
mov
sub
out
test
add
cwde
(bad)
xchg
push
mov
gs
xor
push
shr
add
mov
sub
pushf
out
sub
push
pushf
gs
shl
sub
clc
mov
push
shr
jge
pop
jb
mov
push
aaa
shl
sub
arpl
(bad)
cmp
test
pop
ret
shl
mov
sbb
jl
sub
jns
sahf
retf
mov
xchg
loop
adc
(bad)
cmps
call
xchg
test
fstp
push
lea
test
sbb
out
fisub
into
add
xchg
or
pop
push
scas
retf
or
push
jge
mov
outs
stos
retf
pop
xchg
imul
pop
(bad)
adc
dec
icebp
std
xchg
(bad)
test
out
jns
jl
and
test
sub
jmp
ret
cmp
push
adc
enter
inc
mov
iret
aaa
or
mov
aas
inc
shr
ret
push
pop
sub
adc
fild
or
adc
pop
pop
or
repz
iret
out
icebp
loopne
stos
inc
mov
mov
pusha
sti
push
ss
arpl
mov
mov
mov
jae
loopne
fs
and
mov
xchg
jo
cvtps2pi
inc
cmp
lea
test
and
pop
pop
nop
adc
js
(bad)
scas
push
aam
aam
adc
mov
adc
cs
jnp
cmp
add
enter
in
(bad)
xlat
mov
cwde
inc
je
adc
gs
into
jmp
mov
daa
adc
pop
inc
mov
dec
arpl
jle
dec
les
jl
or
xor
push
pop
sub
pop
mov
rcr
nop
not
add
dec
mov
pop
pop
enter
cld
out
into
xchg
test
xchg
cld
sub
xor
(bad)
jle
adc
call
cli
addr16
jmp
sbb
fcomp
test
neg
enter
ins
mov
jge
movs
(bad)
pusha
(bad)
mov
js
or
pop
nop
lds
push
cmp
pop
jp
and
add
aas
pusha
(bad)
repnz
mov
adc
sbb
sub
xor
lods
retf
pop
out
dec
daa
loop
jne
and
adc
in
xlat
bound
jo
xor
mov
dec
fcom
add
sbb
out
xchg
fadd
mov
push
push
inc
xor
mov
out
scas
sub
cli
outs
clc
shl
xor
out
dec
mov
pop
(bad)
out
cmps
sub
fstp
cmc
xchg
push
xor
adc
mov
lds
dec
repz
fs
mov
pop
xchg
sub
inc
repz
test
inc
lds
fsubr
xor
inc
stc
pop
(bad)
adc
sti
idiv
dec
in
sbb
clc
cmp
push
daa
xor
ja
les
imul
add
(bad)
es
stos
jnp
and
clc
lds
rol
mov
movs
shr
aam
nop
cwde
push
inc
xchg
inc
imul
inc
cmp
outs
inc
pop
enter
adc
inc
cmp
inc
shr
aaa
rcr
(bad)
sub
mov
test
cmp
sti
cmps
and
int3
stc
sub
or
cmps
repz
add
sbb
popa
push
push
jecxz
push
(bad)
test
ret
xchg
sbb
and
sti
adc
xchg
inc
jae
imul
or
or
adc
mov
ja
and
pop
sub
mov
call
sahf
or
and
scas
ja
(bad)
cdq
ret
fiadd
push
aas
cmp
and
cli
movs
pop
cmc
adc
outs
shr
sub
xor
fisubr
cli
jb
retf
gs
(bad)
mov
in
mov
xor
cmp
push
jge
sbb
mov
lods
ror
sub
mov
nop
lea
add
icebp
pop
mov
hlt
dec
pop
int
rol
int3
repz
(bad)
jecxz
mov
and
sub
cmp
les
add
pop
hlt
adc
adc
inc
inc
cs
mov
rcl
movs
add
scas
sbb
test
adc
push
dec
push
arpl
add
shr
adc
push
sbb
mov
cmp
xor
imul
sbb
cmps
or
fimul
fwait
mov
sub
mov
mov
jg
fwait
(bad)
shr
xor
xchg
clc
daa
pop
mov
out
mov
test
mov
(bad)
push
or
xchg
adc
jbe
pop
outs
inc
shl
xor
xor
std
in
xchg
leave
cld
inc
aas
push
xlat
test
pop
sti
push
xchg
and
xchg
xor
cli
div
mov
jp
ret
sub
loop
xchg
xor
adc
neg
mov
and
scas
xor
ss
rcl
push
pop
adc
cmps
xchg
(bad)
xchg
lea
enter
mov
jmp
xor
sti
dec
mov
scas
jge
mov
add
shl
(bad)
mov
mov
and
pop
jns
mov
mov
mov
cdq
out
push
popf
mov
xchg
faddp
xor
sbb
mov
jnp
xor
in
jmp
les
scas
add
scas
mov
xchg
xchg
les
jne
cmp
movs
jae
nop
xor
and
out
or
popa
lds
retf
sub
cmp
mov
jnp
push
repz
int
iret
mov
xor
inc
call
clc
fnstsw
jae
or
mov
adc
das
mov
sbb
jne
lahf
jb
inc
in
mov
add
push
ror
mov
cmp
jbe
aad
bound
in
inc
inc
mov
clc
push
in
adc
pop
cmp
imul
das
sub
cmp
xlat
mov
xor
out
cli
mov
bound
aaa
pop
in
xlat
daa
ja
xchg
cmp
inc
pop
push
and
mov
sahf
pusha
sub
dec
daa
test
add
je
fcmovnb
das
aas
fs
pop
rcr
dec
or
retf
dec
enter
add
rcl
pop
lahf
or
stos
retf
int
xchg
bound
mov
xchg
mov
adc
inc
or
push
imul
mov
or
or
shr
jecxz
ins
ret
pop
jns
jo
dec
xchg
stc
xor
loope
int3
lahf
adc
push
cmp
fisub
sbb
fld
inc
icebp
shr
pop
pop
mov
push
mov
out
xchg
fcom
dec
scas
and
cli
push
stc
js
imul
jne
pop
fldenv
sahf
test
in
mov
mov
jno
push
mov
sbb
shl
jmp
loop
sbb
pusha
push
push
or
cdq
sub
or
shl
cmp
outs
jecxz
xchg
dec
mov
aaa
sub
adc
inc
pop
adc
cs
shl
push
push
jmp
push
call
sbb
jmp
xchg
sub
imul
xchg
cwde
mov
in
shr
adc
add
punpckhbw
inc
mov
les
cmc
or
repnz
adc
push
cwde
(bad)
ret
fsubr
pop
mov
pop
mov
push
fdivr
imul
inc
adc
and
imul
xchg
xor
jo
jg
jmp
and
cs
into
jle
hlt
xchg
xchg
mov
xchg
movnti
push
clc
pop
xchg
pusha
sub
inc
fistp
and
xchg
pop
arpl
cmp
aad
sbb
push
retf
dec
(bad)
cmp
retf
cs
sbb
maskmovq
neg
je
out
sbb
and
test
into
add
xchg
mov
jne
(bad)
(bad)
pushf
pop
ror
push
fcom
test
push
test
in
sar
ss
xchg
cli
movs
adc
std
or
sbb
add
dec
repz
push
xchg
dec
add
and
push
loop
push
cs
push
mov
pop
ins
call
sbb
not
dec
cdq
mov
outs
jae
out
(bad)
xchg
sub
jno
xchg
cdq
jnp
mov
icebp
lods
adc
test
repnz
sti
imul
cli
sbb
arpl
push
sbb
jbe
push
cmp
mov
xor
imul
mov
push
test
xor
(bad)
(bad)
mov
cli
mov
popf
out
adc
add
adc
(bad)
in
call
jecxz
test
sub
sub
pop
cmp
mov
int
mov
lahf
inc
dec
mov
bound
shr
popa
sbb
in
movs
xor
xchg
pop
aas
iret
ret
out
popa
xchg
idiv
xor
outs
test
imul
retf
leave
mov
and
int
call
pop
adc
(bad)
setns
mov
mov
adc
xor
pop
rol
mov
call
adc
mov
add
jge
cmp
push
cmp
fninit
xor
shr
xchg
jns
ds
and
dec
test
ins
fisubr
cld
xchg
add
rdtsc
lds
mov
outs
sub
push
jbe
jnp
(bad)
ins
push
and
call
adc
iret
test
cmp
stos
dec
test
push
mov
and
int
test
movs
sbb
add
pop
cmp
lahf
sbb
out
jl
push
push
mov
imul
mov
sbb
fmul
(bad)
test
and
jg
test
dec
push
mov
dec
and
pushf
vpsrld
mov
sub
(bad)
sub
hlt
mov
ds
pop
xor
mov
sub
and
mov
or
int3
outs
mov
fiadd
sbb
addr16
push
sub
jmp
mov
mov
repnz
add
into
adc
mov
jo
adc
adc
adc
imul
pop
aaa
mov
or
fadd
das
lods
jb
adc
fld
adc
mov
gs
outs
pop
aaa
adc
mov
test
or
leave
sub
jbe
jns
dec
aaa
stos
xor
cmp
js
mov
add
mov
inc
pop
mov
dec
sub
loopne
fsubr
mov
test
dec
push
fnstsw
jmp
and
(bad)
loope
and
out
test
mov
les
(bad)
xor
fucomp
and
imul
dec
(bad)
inc
dec
mov
pop
les
int
ins
fcom
arpl
outs
mov
mov
inc
imul
inc
js
push
ins
inc
fistp
lds
dec
outs
xor
sbb
cmp
je
inc
push
cmp
mov
mov
push
dec
cmps
sbb
mov
mov
enter
rcl
add
mov
xchg
fild
ds
jmp
jle
jmp
mov
outs
push
jl
add
jo
(bad)
enter
(bad)
sub
xor
sub
xchg
pop
push
movs
and
inc
cmp
dec
or
pushf
(bad)
rcl
es
add
inc
cmps
xor
mov
sub
fcmove
mov
ret
mov
mov
das
adc
cmc
fisub
leave
lahf
dec
fisttp
inc
jg
nop
pop
pop
sbb
mov
call
inc
xor
jb
sub
mov
jecxz
and
lea
shl
or
jle
add
(bad)
pop
sbb
popa
dec
xor
inc
nop
fimul
xchg
jmp
jp
call
xor
dec
or
aad
xor
pop
mov
test
lds
push
sub
lahf
ja
dec
jns
loop
pop
push
push
mov
int3
lods
jae
loope
sbb
pop
sub
or
retf
cmp
sub
mov
retf
lds
in
cmp
dec
jnp
fwait
repz
pop
add
jns
imul
mov
enter
pop
scas
bound
or
adc
je
sbb
(bad)
retf
xchg
inc
jmp
push
into
or
inc
push
jp
jg
aam
push
arpl
cwde
(bad)
outs
xor
ds
daa
imul
or
xchg
outs
adc
(bad)
rcl
sub
daa
cmps
push
mov
cli
mov
addr16
in
test
cld
iret
sbb
mov
and
xor
cmp
adc
adc
mov
and
pusha
xor
lods
loope
push
cmps
idiv
cmp
stos
dec
sbb
xchg
mov
popa
dec
out
pop
iret
dec
rol
fisttp
imul
sbb
mov
movs
cwde
outs
mov
and
add
adc
xchg
push
(bad)
sbb
cmp
mov
mov
fcom
xchg
imul
test
(bad)
(bad)
or
mov
mov
and
or
mov
hlt
dec
sbb
sub
inc
rcl
imul
inc
xor
call
jp
push
dec
xchg
in
ds
xor
mov
std
ds
jbe
dec
pusha
cmps
jns
rcl
lds
fcmovnu
add
(bad)
ret
mov
sub
leave
icebp
repz
push
test
mov
add
das
add
push
(bad)
cld
xchg
fst
das
add
pop
pop
fdiv
(bad)
call
or
ror
repz
fistp
retf
sbb
dec
(bad)
std
ja
or
mov
cmc
mov
arpl
jle
jae
in
sub
jge
es
je
mov
and
lahf
dec
ins
in
xchg
push
adc
jecxz
inc
outs
mov
cmp
and
xchg
cmps
mov
mov
cmovl
xor
adc
sbb
sub
inc
xchg
jl
repnz
xchg
shr
sub
jae
mov
push
mov
mov
jecxz
aam
mov
shl
add
icebp
jmp
push
sbb
sahf
cmp
push
cmp
call
hlt
jl
test
jae
inc
mov
ret
xchg
inc
sbb
xchg
outs
add
pop
mov
nop
add
add
test
xchg
jb
jno
mov
mov
out
outs
dec
inc
jle
cmp
pop
xchg
std
and
mov
cmps
add
inc
les
rcr
inc
fucomi
pop
cmp
ja
repz
mov
(bad)
in
cs
std
jns
repz
adc
fsubr
push
in
ret
outs
shr
sbb
pop
icebp
stc
gs
je
scas
scas
dec
sub
dec
push
idiv
cmp
adc
pushf
add
gs
pop
mov
lahf
out
mov
pop
xchg
or
jle
jno
daa
and
gs
stos
cmps
push
lea
inc
sbb
sub
daa
call
or
loope
cmp
ret
(bad)
scas
push
cmp
jbe
or
popf
adc
les
into
push
push
dec
sbb
rol
cmc
popa
iret
leave
xor
sbb
and
bound
repnz
mov
mov
stos
es
cmc
popa
mov
sbb
xchg
sbb
push
lahf
mov
xchg
push
sbb
(bad)
rcl
push
cs
fbstp
and
or
jmp
sbb
add
cmc
sub
mov
fdiv
hlt
push
outs
and
and
ss
xor
adc
lds
popf
add
repz
(bad)
hlt
sar
jns
or
bound
adc
scas
(bad)
gs
and
push
add
mov
gs
push
ffree
repz
add
jne
movs
in
loope
inc
jne
dec
retf
shl
dec
mov
push
pop
push
out
sbb
out
pop
aad
rcr
mov
gs
mov
mov
icebp
mov
cmp
pop
aad
out
mov
dec
(bad)
jle
sub
xor
xor
fwait
gs
jmp
xlat
sub
sub
cli
and
push
pop
loope
xor
mov
in
in
(bad)
retf
inc
sbb
cmp
(bad)
out
jle
jl
add
xchg
cmps
mov
fldenv
push
in
sbb
and
adc
mov
iret
shl
stos
adc
je
cld
imul
xchg
div
das
adc
fs
stos
push
movs
test
push
es
(bad)
and
div
jg
dec
mov
(bad)
mov
and
adc
nop
sbb
pushw
sbb
cwde
cmp
cld
mov
rcl
push
lds
mov
jg
sub
or
xor
push
sbb
mov
std
sub
xor
outs
in
jno
xchg
cmp
push
aas
adc
jecxz
xchg
or
lahf
ins
stos
fimul
dec
or
fwait
cmps
loope
xchg
data16
nop
push
mov
sbb
xchg
in
mov
push
clc
ins
jp
movs
pop
imul
mov
loopne
mov
push
push
push
sahf
cmp
jmp
lock
jno
stos
jl
cmp
fwait
movs
icebp
test
mov
mov
cmp
push
or
retf
test
loop
jecxz
rol
(bad)
sar
xchg
test
jo
and
aam
test
clc
cmp
rol
mov
and
nop
push
mov
cmp
lahf
dec
mov
cmps
adc
test
dec
and
xchg
cmp
pop
aam
xor
hlt
popa
mov
inc
inc
aas
mov
and
jmp
xor
je
nop
ja
(bad)
mov
xchg
jge
scas
test
clc
in
fs
lock
push
mov
paddw
sub
aad
test
fnstcw
fld
mov
ins
jle
jmp
ins
mov
mov
popf
nop
jne
ffreep
lock
mov
retf
push
int
(bad)
out
pop
neg
(bad)
adc
pop
int
shl
mov
fs
sbb
rcr
pop
mov
pop
mov
call
les
jbe
sbb
xchg
mov
xchg
imul
adc
(bad)
stc
fld
pop
enter
(bad)
aas
and
aaa
xor
ja
pop
jo
cmp
cld
add
retf
or
jle
gs
cdq
or
and
stos
or
outs
push
outs
jp
(bad)
and
jmp
sahf
shr
cmp
outs
jb
loopne
add
pop
ins
test
cs
add
loopne
inc
jecxz
mov
xor
inc
imul
push
mov
and
dec
pushf
scas
ret
cmc
xor
cmp
inc
rol
mov
lea
xchg
rcr
adc
xlat
out
imul
fisub
or
stos
pop
mov
add
dec
dec
and
ror
push
cmp
movs
pop
aad
cmp
mov
push
mov
in
jb
cmps
fisub
(bad)
loopne
mov
and
add
mov
push
call
cli
mov
div
pop
aad
or
xchg
out
dec
fst
sar
loopne
fistp
xchg
adc
std
stc
dec
adc
popa
shl
ret
and
sub
jns
push
dec
shr
jmp
mov
jecxz
sbb
push
stos
inc
jg
sub
ins
jo
fldcw
aam
sub
sbb
mov
mov
imul
push
stos
or
mov
push
or
jp
adc
sbb
and
xor
cmp
and
mov
(bad)
cdq
mov
sub
bound
lock
pop
aas
inc
cdq
add
lods
mov
imul
lods
xchg
lods
aas
lahf
xchg
adc
inc
mov
ret
mov
in
sbb
sub
call
mov
es
mov
dec
aad
ss
jb
retf
iret
pop
call
outs
cmp
fisub
aaa
push
gs
inc
popf
ja
cmp
in
cmps
sbb
lods
or
fidiv
(bad)
mov
adc
ret
mov
(bad)
mov
call
or
repnz
sub
mov
mov
sbb
mov
jns
push
mov
clc
mov
sbb
xchg
dec
dec
arpl
add
sar
sub
mov
push
bnd
dec
imul
lds
or
mov
pop
fdiv
xchg
fidiv
xchg
ds
push
and
sbb
lock
int
sub
jmp
sbb
out
ins
push
mov
or
stos
push
cmp
outs
mov
(bad)
aas
scas
mov
cmc
aam
push
out
fxch
imul
rcl
in
(bad)
cs
clc
fstp
addr16
(bad)
jecxz
gs
dec
loopne
shr
sbb
aam
retf
enter
sub
mov
in
adc
pop
sub
pop
leave
mov
fdivr
push
js
pushf
sbb
dec
fndisi(8087
pusha
or
in
mov
sub
cmps
imul
dec
cmp
pop
shl
jne
and
xor
inc
ss
add
and
inc
lods
cld
mov
dec
neg
mov
or
fucomip
iret
xor
jmp
fisttp
xchg
add
stos
sub
movs
int3
lea
sbb
adc
sub
jno
movs
not
je
je
jge
fs
loope
cmps
dec
loop
sub
call
inc
xor
popf
ret
sbb
xor
sub
(bad)
xchg
pop
adc
dec
pop
pop
pandn
fwait
mov
dec
out
mov
xor
add
cmp
ja
xor
mov
fldcw
addr16
push
sti
fimul
dec
test
ds
in
and
pop
inc
jp
push
mov
hlt
mov
or
popa
leave
or
xchg
test
mov
je
js
jg
or
inc
and
mov
xor
push
mov
push
mov
dec
push
sbb
sbb
xor
enter
jne
or
imul
hlt
pop
or
mov
daa
stos
pop
jp
push
mov
or
iret
rcl
sub
fs
test
sbb
dec
jo
pop
push
lahf
xchg
test
mov
xchg
or
adc
ds
sbb
xchg
mov
ret
das
dec
out
icebp
(bad)
ret
cmp
dec
inc
xor
pop
xchg
mov
icebp
mov
repnz
call
icebp
mov
lods
daa
aam
fadd
adc
pop
jae
cli
cli
sbb
arpl
or
sub
mov
frstor
jns
pop
scas
out
(bad)
or
test
xchg
xor
test
sbb
lock
adc
lds
jo
repnz
loopne
retf
pop
inc
or
cmps
or
dec
mov
loopne
mov
push
xchg
test
pop
fmul
pushf
or
jge
jp
adc
in
jo
xchg
inc
pop
(bad)
jl
retf
adc
lds
pop
mov
imul
add
mov
lods
jle
cld
dec
adc
pop
outs
xor
loopne
or
mov
sar
or
sub
lods
in
and
jnp
mov
js
pushf
push
xchg
gs
ds
mov
pop
stos
data16
push
cmp
jbe
cdq
retf
pop
inc
into
int3
sbb
mov
mov
cs
mov
lods
xchg
push
int3
jmp
sbb
dec
mov
(bad)
mul
fist
inc
js
or
std
xor
mov
adc
mov
push
xor
and
sti
cmp
pop
and
sbb
out
call
ret
test
(bad)
enter
test
dec
mov
das
cmps
in
push
aas
push
add
imul
mov
pop
fstp
jne
xlat
out
or
dec
aaa
sar
(bad)
mov
or
push
cmps
mov
inc
out
push
sbb
movs
and
xor
mov
in
mov
outs
bound
lea
mov
sub
enter
dec
or
add
pusha
mov
adc
cmps
lods
in
inc
xlat
cmc
push
into
mov
inc
mov
std
mov
jge
stos
mov
and
cwde
push
ins
lods
cli
fbld
cmp
or
adc
xor
imul
gs
push
inc
into
add
leave
inc
xchg
sbb
sti
out
mov
or
arpl
mov
outs
pushf
movs
call
add
(bad)
fsubr
dec
and
jno
lds
test
mov
movs
mov
ds
sbb
mov
lds
cmp
dec
out
and
adc
adc
pop
cmc
mov
cmps
cmps
rol
movs
mul
int3
sub
xor
ret
cs
or
in
mul
mov
lods
xor
jmp
out
xor
add
lods
xchg
scas
inc
(bad)
add
dec
cmps
lods
mov
add
fadd
sbb
das
jmp
out
mov
pop
push
sub
rol
sahf
clc
rcr
or
xchg
movs
dec
dec
icebp
jb
push
ins
loop
and
dec
je
or
fcomi
cwde
cmp
popa
in
xchg
les
(bad)
jnp
sbb
imul
int
loop
and
rcr
sub
jge
rol
fdiv
mov
cmp
cmps
add
cmp
adc
lea
mov
retf
jnp
je
test
push
dec
sbb
push
inc
add
test
mov
jne
imul
xchg
push
arpl
imul
fwait
inc
xchg
xchg
inc
pop
mov
cdq
int
cmps
repnz
out
lds
and
inc
ret
adc
or
mov
movs
sbb
adc
pop
jmp
jnp
xchg
xchg
mov
popf
imul
jb
pushf
xchg
and
dec
dec
sahf
aad
loope
dec
inc
adc
idiv
movs
mov
mov
(bad)
mov
adc
jmp
and
sbb
mov
jg
push
clc
xor
jbe
dec
xchg
ror
push
sbb
pop
and
arpl
into
out
lods
mov
sahf
lods
mov
dec
call
retf
jl
sub
push
leave
jno
test
into
shl
jge
push
xlat
inc
xor
pop
xor
je
loope
mov
nop
jmp
test
dec
loopne
cmp
cmp
sbb
pop
stos
cld
outs
xor
adc
stc
inc
bound
sub
jge
pop
push
sbb
xchg
popf
or
mov
add
mov
push
add
pop
jg
cdq
mov
mov
call
repnz
mov
inc
movs
and
neg
adc
out
mov
mov
dec
mov
jg
pop
lods
pusha
dec
popf
fcmovnu
out
aas
adc
add
xchg
pop
add
out
dec
aam
mov
mov
outs
mov
sbb
retf
in
les
mov
xor
mov
pop
cmps
stos
call
rcr
mov
pop
mov
test
stc
imul
mov
loope
jge
mov
xor
pop
lea
xor
fld
xchg
xchg
sbb
pusha
cmp
movs
push
in
pop
fnstsw
and
iret
fsub
int
loop
retf
cmp
jg
retf
out
push
xchg
sub
dec
leave
in
bound
sub
cmp
adc
sti
aaa
pop
cmp
(bad)
dec
push
mov
mov
cmp
movs
cmp
fs
ins
pop
push
shr
test
ret
loop
jb
rcr
aam
test
bound
fwait
cli
mov
adc
pop
dec
xor
sub
hlt
mov
hlt
and
jle
in
pop
fld
mov
xchg
adc
cmp
ss
mov
fidiv
gs
retf
ja
sar
dec
imul
fstp
jmp
or
clc
and
test
(bad)
mov
xor
cmp
test
sti
movs
xchg
push
ja
movs
ficomp
adc
push
popf
sub
sub
nop
fs
pop
pop
mov
or
outs
cmp
mov
inc
jo
aam
(bad)
or
(bad)
nop
xchg
sbb
sbb
cwde
dec
ror
cmp
adc
fsub
pop
icebp
inc
and
sub
lods
fstp
out
jae
rcr
or
sub
iret
mov
ins
or
cmp
ret
inc
add
dec
cmps
mov
mov
ror
jns
repnz
jmp
and
ja
aas
in
stc
mov
lods
lods
aam
mov
(bad)
inc
rcr
lods
stos
or
fwait
inc
stos
in
(bad)
scas
xor
push
sub
std
xchg
repnz
push
das
pushf
push
cs
push
xor
(bad)
mov
fld
mov
jbe
push
pop
jo
int3
popf
lahf
xchg
iret
push
xchg
jae
sub
mov
push
shr
push
xor
or
mov
xlat
and
xchg
and
mov
loop
std
and
xor
loopne
ja
xor
adc
push
mov
cwde
loop
aaa
pusha
xchg
pop
or
sub
add
inc
(bad)
bound
push
and
or
mov
xor
adc
outs
cli
imul
xchg
repnz
out
cli
jne
jle
pop
and
push
bound
jbe
inc
push
xor
sub
cmp
lahf
mov
xchg
or
inc
in
and
adc
adc
cmp
cmps
jne
jmp
or
mov
push
xchg
imul
dec
out
arpl
jns
popa
or
sbb
mov
hlt
and
mov
mov
push
jmp
mov
popf
ss
call
xor
dec
outs
lea
jmp
mov
call
in
xor
out
mov
xchg
add
loop
fsubr
sbb
cmps
loopne
nop
pusha
mov
cmp
mov
sub
mov
jne
fimul
push
inc
dec
lahf
and
aad
pop
lods
xchg
ret
cmps
sub
lds
add
cmp
sbb
icebp
inc
mov
xchg
je
scas
mov
(bad)
cmps
cwde
lock
cmp
das
pushf
cmp
or
daa
mov
mov
pop
push
dec
sbb
dec
mov
jno
fbld
outs
push
and
cmp
mov
arpl
or
mov
test
sub
or
xchg
int
movs
adc
fcmovne
xor
mov
rol
inc
cmp
adc
cs
cwde
push
mov
(bad)
out
ss
jne
pushf
cdq
cmps
xchg
loope
add
cmp
xchg
jb
push
psrlw
pop
test
aas
(bad)
and
mov
cli
xchg
div
cmp
idiv
pop
in
cmp
mov
push
jp
inc
fwait
inc
cmp
test
sub
mov
rcr
fsubr
jb
adc
sub
mov
jnp
lock
rcr
push
adc
pop
mov
xor
mov
mov
aaa
cmp
rcr
in
dec
dec
sbb
(bad)
mov
xlat
push
dec
mov
lahf
hlt
jae
jo
pop
test
inc
or
dec
xchg
int
pop
sbb
cmp
mov
fwait
shl
jbe
arpl
adc
xchg
fnstsw
or
adc
cmovs
ins
xchg
sahf
pop
xchg
int3
icebp
mov
jae
les
mov
inc
push
in
mov
or
sbb
adc
xchg
mov
adc
daa
jle
mov
gs
nop
fstp
jecxz
mov
int
popf
std
xchg
(bad)
mov
mov
or
cmp
xchg
xor
or
mov
xchg
jmp
push
sahf
mov
inc
mov
push
cmps
inc
movs
fstp
das
popf
cld
stos
jo
sbb
dec
rcl
xchg
inc
data16
cmc
push
stos
aad
inc
hlt
loopne
cli
lock
jl
xchg
sbb
add
pop
out
adc
mov
pop
test
scas
jmp
jno
and
pop
mov
xchg
cdq
add
inc
enter
xor
in
call
out
cdq
xor
add
call
addr16
pop
mov
nop
push
ror
xor
pushf
pop
add
pop
adc
(bad)
jno
cmp
mov
data16
mov
loop
add
inc
or
or
push
xchg
jb
or
sub
jmp
add
push
sahf
xchg
mov
add
sub
lahf
push
jb
mov
jp
xor
xchg
pop
je
aam
mov
push
sub
jns
jns
daa
jl
sbb
xchg
imul
pushf
cmc
shr
jns
addr16
in
stc
call
xor
jbe
das
test
cmps
fs
inc
imul
sub
dec
test
jmp
sbb
adc
adc
in
out
jno
jecxz
retf
mov
jle
cwde
out
test
xor
push
ins
les
mov
adc
ret
xor
adc
sub
sbb
xchg
lock
(bad)
adc
cmp
je
test
fistp
pop
pop
lods
dec
xchg
inc
jb
jo
pop
or
jne
out
fistp
jo
jge
cmp
xor
into
je
leave
jmp
out
sub
push
ja
sti
in
sbb
adc
test
fdivr
cmp
push
les
pop
lock
cmp
jno
movs
nop
ss
lds
stos
or
xchg
push
inc
pop
jb
loop
xchg
xlat
and
outs
push
cmp
or
mov
jecxz
js
jnp
icebp
and
xchg
add
in
mov
sub
imul
push
pusha
fs
iret
and
pop
xor
gs
cmp
add
sbb
shl
scas
jno
rol
leave
push
or
les
loop
into
jbe
inc
mov
mov
inc
shl
or
xchg
aad
dec
cmp
stc
lds
dec
mov
out
jl
sub
xor
inc
ret
fstp
and
imul
inc
shl
jnp
pop
cmp
imul
mov
fsubr
sbb
dec
xchg
pop
(bad)
std
cld
clc
sbb
pop
push
pop
cmp
js
sti
jbe
int
sub
cwde
xor
(bad)
mov
jle
daa
je
daa
push
(bad)
test
(bad)
or
nop
xor
clc
das
std
ds
xor
sub
aad
lea
cmp
(bad)
pop
div
pop
(bad)
mul
jg
pushf
jp
arpl
cmp
push
retf
cmp
sbb
sbb
mov
cmp
xor
(bad)
push
xchg
sbb
sub
or
les
and
or
ret
push
call
js
(bad)
push
mov
addr16
inc
xchg
pop
sbb
dec
dec
std
xchg
sub
adc
push
dec
push
stc
cwde
cmp
mov
aam
ss
outs
(bad)
jno
cs
jle
push
sub
adc
enter
sub
xor
push
push
mov
in
or
ds
mov
adc
pop
adc
xchg
sbb
jmp
inc
mov
test
scas
movs
sub
es
pushf
sar
pop
bound
mov
fistp
push
sbb
jge
lahf
jle
cmc
pop
pop
inc
retf
jb
and
test
push
and
ins
arpl
mov
stos
push
fwait
gs
std
push
mov
aad
and
out
mov
push
xchg
inc
rcl
or
(bad)
xchg
lahf
js
add
sbb
mov
daa
add
out
aaa
mov
jecxz
mov
into
pop
test
mov
jmp
pop
es
pop
cmp
and
xchg
aaa
icebp
inc
sahf
adc
test
push
int3
jp
ins
jno
inc
(bad)
pop
es
mov
ss
push
inc
and
mov
push
sti
pop
aaa
jge
adc
out
push
call
stc
jp
mov
ret
std
add
inc
(bad)
dec
add
lds
test
inc
cmp
pusha
stc
mov
adc
pushf
arpl
or
mov
nop
jmp
and
inc
es
test
xchg
pop
hlt
mul
xor
mov
push
aad
out
test
fidiv
dec
out
ffreep
ret
jb
pop
jecxz
sbb
or
push
ret
mov
push
inc
mov
jbe
fnstcw
or
mov
adc
pop
lods
into
push
popa
adc
or
mov
inc
jno
fld
add
test
or
dec
xchg
push
jno
(bad)
mov
mov
popa
hlt
inc
loopne
test
pop
jmp
cmps
aad
sbb
rol
outs
sub
aam
popa
xchg
dec
je
aaa
mov
fbld
dec
cmps
in
jp
xor
and
jnp
mov
xor
ss
repnz
and
jecxz
xchg
jbe
and
popf
inc
mov
inc
cdq
jp
add
data16
imul
mov
mov
mov
pop
push
aad
or
not
test
out
pop
loopne
pusha
in
xlat
jbe
and
pop
push
test
cld
sub
push
in
icebp
dec
mov
ret
or
pop
std
mov
lea
xor
(bad)
mov
jno
mov
adc
(bad)
xchg
inc
mov
aad
arpl
inc
addr16
scas
xchg
fsubr
xor
dec
shl
sub
dec
das
sbb
inc
call
out
pop
out
cmps
or
int
push
popf
mov
push
mov
clc
retf
dec
mov
outs
mov
lahf
call
(bad)
stos
test
scas
cld
xor
pop
fstp
xor
add
pop
dec
jmp
push
outs
and
hlt
lods
inc
mov
cmp
adc
sti
cli
and
dec
(bad)
sahf
sbb
mov
mov
and
movs
xchg
gs
fcmove
ins
mov
pop
pmaxsw
stc
(bad)
lods
sti
pop
dec
test
fsubp
jne
mov
jb
xchg
add
mov
sbb
sbb
and
cmps
and
imul
adc
jmp
xchg
sbb
push
stos
cmp
cmp
(bad)
nop
popf
or
les
cmps
fst
(bad)
cmp
imul
imul
or
adc
test
popf
mov
jae
xchg
cld
out
sahf
outs
dec
fdivr
outs
or
popa
mov
gs
jmp
pop
push
sub
xchg
xlat
mov
ret
jecxz
stc
inc
jle
xchg
rol
daa
adc
call
xchg
bound
adc
ins
add
js
scas
test
outs
push
in
lods
jge
fucomp
cmc
shr
ins
cmp
inc
push
xchg
dec
mov
pop
or
dec
and
cmp
rcr
dec
fwait
mov
jg
inc
jp
and
jns
test
jg
shr
fiadd
dec
mov
int
xchg
icebp
mov
fld
daa
aad
sub
or
push
cmp
push
xchg
push
pop
sub
js
imul
inc
sbb
mov
mov
mov
ins
xchg
icebp
hlt
ds
dec
jae
div
add
outs
xchg
mov
shl
add
and
fcmovnu
mov
mov
packssdw
gs
imul
add
les
inc
cmp
int3
inc
push
mov
fwait
mov
xor
inc
nop
mov
mov
cmp
iret
rcr
out
icebp
pushf
pop
xchg
cmp
mov
imul
outs
scas
mov
pop
mov
outs
cmp
pop
loopne
aam
(bad)
scas
inc
and
xlat
inc
mov
nop
mov
icebp
ins
push
jle
sub
cmc
lods
repnz
mov
cmp
fst
sbb
mov
adc
mov
hlt
clc
movs
sbb
pop
mov
fs
retf
out
loope
dec
xchg
sbb
sbb
mov
adc
lahf
add
jl
cld
mov
ja
mov
jecxz
mov
mov
hlt
pop
inc
mov
popa
aaa
inc
call
jl
mov
enter
xor
lds
mov
(bad)
dec
and
mov
mov
dec
lds
xchg
ds
mov
mov
movs
inc
and
xchg
sub
adc
adc
jno
call
in
outs
stos
xor
retf
xchg
inc
jmp
dec
in
(bad)
fsub
das
pop
ret
push
or
jne
adc
mov
fwait
and
push
push
icebp
push
inc
inc
dec
and
cmp
and
xor
push
xor
cdq
xor
cmc
sub
in
js
sbb
add
cli
ss
xchg
cdq
call
adc
mov
out
call
test
dec
add
xchg
(bad)
fdivrp
sub
fisttp
cmp
pop
xchg
ficom
(bad)
fmul
cwde
and
push
jl
inc
outs
leave
movs
and
push
pop
and
lods
dec
ins
xor
adc
cbw
dec
inc
(bad)
not
rol
int
ret
jmp
test
xchg
mov
jmp
or
xor
push
cli
inc
push
cmp
push
cmp
fldenv
pop
(bad)
jo
fidiv
add
push
adc
fsubp
dec
popa
in
fcmovbe
mov
addr16
sub
xchg
(bad)
xchg
imul
mov
icebp
pop
lock
inc
inc
mov
jg
xchg
loope
cmp
mov
mov
shl
or
pop
cdq
lea
and
push
icebp
jge
lock
jnp
shr
and
sbb
sub
in
sub
mov
sbb
movs
or
aas
scas
sub
shl
push
dec
xchg
push
popa
cmp
sub
adc
and
(bad)
push
addr16
sti
ret
or
xor
push
sbb
(bad)
pop
pop
loope
clc
pop
sbb
sbb
add
cwde
ins
cmp
cmps
xchg
adc
mov
stos
push
shl
or
popa
fs
xor
sub
or
hlt
push
sar
mov
sbb
ret
out
cld
leave
cmps
or
mov
push
and
cmc
adc
jne
or
mov
jecxz
push
mov
jg
in
mov
popa
repnz
sbb
add
and
test
out
jmp
outs
xchg
dec
inc
test
cli
into
movs
stos
aad
jl
dec
dec
sti
inc
cld
inc
adc
mov
jb
or
test
int
inc
mov
push
sub
cmp
fistp
outs
dec
imul
pop
(bad)
mov
or
or
inc
hlt
clc
sub
sub
(bad)
fucomp
imul
xchg
jmp
lock
and
int
aas
xchg
adc
pop
mov
cmp
cmp
cmps
test
ins
jl
mov
lea
ja
sub
dec
jne
jle
aad
mov
sti
mov
popf
mov
ret
bound
mov
data16
xchg
(bad)
ja
sar
cmp
cwde
pop
in
sbb
movs
sbb
pop
pop
pop
cli
mov
loope
dec
push
and
iret
fs
xchg
rol
xchg
in
leave
cs
sub
popa
mov
enter
jecxz
scas
mov
mov
out
and
cmp
scas
push
idiv
stc
and
repz
dec
add
mov
and
xchg
fwait
and
push
rcl
repz
add
lods
mov
stos
push
xlat
fstp
sbb
adc
movs
ficom
jo
dec
sbb
jns
pop
jecxz
outs
adc
jno
or
inc
mov
cmp
iret
dec
jno
inc
sahf
xlat
aaa
xchg
or
jnp
and
sbb
adc
retf
iret
lods
jae
cmp
rcl
enter
mov
fistp
imul
scas
aad
sar
pop
or
pop
lahf
xchg
lahf
fucomi
sub
pmuludq
lock
dec
jae
inc
cmp
sub
mov
push
aaa
dec
sbb
jb
sbb
cld
out
mov
in
mov
cmp
xchg
ins
xchg
pop
aas
aam
mov
imul
xor
fdivr
dec
mov
xor
cmp
mul
cdq
push
adc
pop
ror
cmp
sbb
(bad)
in
out
xchg
out
ret
ss
int
out
fsub
and
sub
mov
mov
inc
dec
not
mov
push
mov
test
fadd
add
xchg
(bad)
cld
push
sub
and
jb
aad
jp
jge
mov
mov
cmp
outs
outs
mov
xchg
cmc
hlt
jno
mov
push
jnp
add
dec
add
fidivr
jns
pop
out
push
fwait
cmp
ja
imul
add
ds
in
xchg
push
fdivr
or
popa
add
xlat
setbe
sbb
in
loope
das
jle
mov
imul
stos
mov
push
mov
cli
aas
push
inc
retf
mov
nop
push
mov
mov
push
add
les
cmps
or
fs
lods
xor
xchg
ins
inc
dec
xor
or
outs
sbb
sbb
mov
movs
dec
and
add
adc
movs
int3
adc
mov
out
popa
(bad)
cmp
jbe
mov
push
ins
jne
sbb
dec
rcl
(bad)
fsub
xor
adc
rol
cdq
fwait
enter
popf
stos
(bad)
mov
inc
mov
cmp
or
or
push
cmp
test
pop
jb
xchg
pop
jge
add
xchg
mov
test
xor
xor
push
cmp
in
jge
cdq
adc
add
add
add
add
push
pop
inc
call
push
jnp
dec
enter
inc
cmp
xchg
jecxz
inc
rol
movups
add
in
mov
dec
or
adc
stos
mov
push
mov
mov
ret
add
ss
aam
pop
cmp
aaa
gs
es
popf
test
xchg
mov
fs
inc
aad
int
jnp
xchg
cmc
imul
inc
sbb
lods
jne
adc
sub
dec
mov
ins
dec
sbb
mov
mov
fcomi
mov
push
fisttp
mov
test
push
add
jmp
xor
inc
fild
and
mov
sub
mov
push
mov
jmp
push
scas
lods
(bad)
xor
jmp
and
fs
hlt
arpl
sbb
aas
sub
xor
ret
adc
lds
inc
div
mov
xchg
call
xor
inc
add
mov
adc
xor
adc
rcr
inc
push
rcl
ins
inc
aam
pop
mov
ret
sti
fldcw
xchg
repz
xchg
fcomp
push
jp
ins
adc
add
bound
js
or
push
sub
pop
sbb
sbb
imul
aad
mov
cmp
sbb
sub
cmp
pop
cmp
mov
mov
jno
dec
imul
aas
pop
or
mov
fdivr
dec
enter
mov
sub
xor
add
lods
dec
leave
jae
jb
or
and
in
sub
imul
je
mov
sbb
mov
mov
jecxz
jecxz
imul
push
sbb
fcmovbe
(bad)
pop
repz
mov
enter
pop
or
repz
int
push
sbb
xchg
hlt
in
fstp
mov
(bad)
cmps
ror
mov
test
js
pop
mov
jmp
push
inc
pop
scas
mov
jge
test
cdq
into
push
push
sub
out
adc
mov
mov
js
fcomp
in
pop
fnsave
iret
lea
out
inc
aam
add
adc
sub
lea
daa
add
jmp
pop
daa
sahf
test
and
movs
add
dec
sbb
xor
jg
shl
push
fidiv
loopne
sbb
pop
cmps
test
dec
bound
ror
push
addr16
dec
sub
pusha
lods
xor
pop
dec
xlat
xchg
jne
adc
ins
call
stos
and
hlt
sbb
dec
push
xchg
fdivr
dec
call
int3
retf
cmp
add
cwde
cwde
xchg
popf
mul
test
xor
xor
mov
pop
pop
jg
popf
xchg
dec
fimul
sub
cli
(bad)
popa
fsin
sub
cmp
add
mov
call
lock
mov
add
add
dec
add
fmul
ror
push
mov
in
das
pop
push
out
addr16
icebp
and
call
pop
aam
test
sbb
nop
int
cmp
mov
test
fild
mov
mov
enter
mov
leave
scas
sub
mov
popf
mov
loop
dec
jp
pop
pop
add
stos
jle
add
xchg
lds
fcom
sahf
int
mov
pop
or
out
sbb
jb
push
fisttp
pop
pop
scas
or
lods
rcl
fild
mov
mov
mov
jmp
movs
push
mov
cwde
test
call
loop
dec
mov
stc
pop
jle
inc
xlat
sub
cmp
popa
pop
sub
aas
lods
hlt
nop
or
fwait
sahf
jmp
dec
xor
sub
inc
(bad)
nop
add
(bad)
pop
sub
loope
retf
ins
mov
(bad)
(bad)
and
sbb
xchg
sar
jbe
cmps
sbb
fisub
push
mov
or
mov
push
push
sbb
or
inc
ds
dec
jb
cmp
fld
mov
inc
dec
pop
outs
sbb
adc
xor
and
cmp
enter
sti
fldcw
clc
jno
(bad)
or
xor
adc
inc
add
jmp
xchg
sbb
dec
push
dec
pop
sahf
push
jmp
stc
dec
and
into
jae
js
loop
aaa
adc
or
aaa
icebp
lods
push
loop
fistp
mov
sub
dec
mov
mov
lock
js
adc
sub
xchg
imul
pushf
sub
xor
pop
and
(bad)
in
fwait
clc
xchg
shr
cwde
sub
cmp
mov
push
jecxz
push
pop
out
ds
sub
js
loopne
pop
cwde
dec
cmp
fs
inc
jnp
jne
jo
xchg
arpl
rol
movs
in
cmp
sbb
push
nop
pop
jmp
add
jmp
imul
pop
push
fild
jns
or
movs
xchg
and
or
jl
(bad)
pop
das
pop
mov
fild
mov
add
lock
outs
aad
cld
jg
xchg
xor
mov
fwait
mov
stos
xchg
sbb
xchg
sbb
inc
jg
and
sub
xor
dec
jmp
bound
ds
add
xchg
hlt
jmp
rcl
les
or
mov
lods
arpl
outs
push
adc
call
mov
rsm
sbb
mov
arpl
push
(bad)
neg
push
in
movs
hlt
mov
into
icebp
sahf
call
sbb
jnp
les
in
vpacksswb
lods
dec
add
(bad)
in
mov
in
cmp
repz
fild
(bad)
aaa
scas
and
add
js
mov
aas
and
in
adc
imul
outs
gs
and
push
xor
fs
div
pop
mov
les
jno
cmc
push
or
cli
inc
outs
data16
mov
fiadd
pop
sar
add
jmp
nop
sub
scas
inc
sub
mov
or
std
xchg
mov
mov
sbb
outs
push
jle
pop
cmc
mov
inc
mov
popa
rcr
jecxz
inc
xchg
repz
mov
dec
imul
mov
xchg
mov
jle
mov
nop
inc
sar
adc
ins
add
shl
gs
dec
cli
test
cmp
nop
xchg
or
and
pop
pop
dec
pushf
div
aas
outs
add
(bad)
pop
sahf
data16
sbb
jl
cdq
mov
dec
mov
scas
lds
cwde
or
inc
jmp
test
sbb
pop
mov
out
loope
fnstsw
push
mov
test
mov
popf
ret
inc
(bad)
fild
fld
push
addr16
mov
mov
dec
mov
in
cmp
sub
iret
pusha
lahf
pop
mov
mov
mov
mov
mov
rcr
jle
xor
adc
mov
mov
test
inc
inc
ret
or
(bad)
cmp
(bad)
mov
or
mov
lods
sti
retf
(bad)
dec
pop
retf
inc
out
scas
jle
in
fsubr
cwde
sub
cmp
out
ficomp
(bad)
lahf
sbb
bnd
jne
push
popa
sbb
sahf
or
sbb
mov
clc
dec
jns
into
mov
stos
pushf
jno
jnp
sub
ror
xor
iret
cmp
std
jp
jns
out
sub
daa
or
in
ficom
in
cmp
xchg
jecxz
mov
cmps
mov
push
in
(bad)
mov
push
add
jo
dec
cwde
adc
mov
idiv
lea
jmp
xor
dec
fdivr
(bad)
pushf
into
ret
mov
sar
std
jl
jp
bound
not
ins
and
mov
or
cmp
and
push
xor
mov
sbb
inc
and
stc
mov
mov
sub
mov
stos
xor
sub
sbb
add
lock
jno
sbb
loopne
call
mov
sbb
pop
pusha
cs
fstp
or
add
dec
dec
outs
jb
jae
ss
adc
pop
mov
fsubr
fiadd
or
(bad)
imul
lock
mov
mov
pop
ret
out
xchg
pop
popa
jnp
inc
(bad)
pop
call
push
xor
adc
or
jmp
mov
push
pop
mov
push
iret
push
mov
outs
sub
aas
fisttp
scas
add
ret
mov
dec
cmp
mov
push
leave
jbe
adc
dec
pop
pusha
push
push
inc
push
jnp
cld
ret
into
mov
sbb
es
or
jmp
push
xlat
loope
fwait
sub
call
(bad)
or
adc
cmps
pop
je
lock
mov
cmp
cmp
xchg
cmp
add
ss
imul
leave
loope
cmp
pop
add
enter
inc
repz
dec
xor
pop
push
std
aas
cli
(bad)
adc
jo
sub
pusha
sub
mov
mov
outs
sub
lea
push
jb
lods
xchg
repnz
mov
imul
dec
movs
lods
repz
loopne
ror
dec
pop
xchg
adc
stos
and
push
movs
dec
fbstp
ins
xor
scas
retf
mov
addr16
stos
repz
aam
mov
adc
xor
pop
out
fcmovnu
pusha
xchg
mov
bndldx
into
push
test
fdivr
fldln2
mov
mov
cmp
jle
jae
std
or
pop
out
lds
sub
pop
aad
mov
stos
mov
sbb
push
jns
pop
add
xlat
sbb
fs
mov
sbb
adc
and
mov
sub
movs
in
lahf
and
jg
inc
movs
sbb
dec
or
sub
je
sahf
mov
adc
dec
sbb
xchg
(bad)
nop
test
iret
and
adc
ins
and
xchg
mov
scas
ins
adc
es
popa
xlat
add
mov
inc
mov
stos
mov
xchg
xlat
adc
mov
movs
xor
mov
mov
mov
popf
cwde
popa
adc
jo
icebp
push
add
sbb
(bad)
das
dec
sub
lea
ins
dec
push
adc
add
mov
xor
lods
aam
loop
mov
ss
jno
add
inc
(bad)
in
mov
push
ficomp
out
shr
mov
aad
mov
shr
ins
mov
pop
stos
pushf
mov
pop
jno
xchg
es
adc
mov
mov
xchg
add
rcl
xchg
dec
adc
scas
sbb
call
xchg
cdq
enter
mov
iret
dec
push
push
jecxz
cdq
jne
or
inc
(bad)
out
nop
fwait
push
fwait
or
not
sbb
push
std
jp
cmc
(bad)
sbb
pop
adc
bound
outs
xor
pop
addr16
in
lods
out
jne
mov
jnp
inc
or
or
xchg
aaa
lods
stos
dec
sub
pop
imul
inc
(bad)
(bad)
into
enter
adc
sbb
push
dec
sar
jecxz
sbb
add
popf
daa
mov
dec
scas
sub
repnz
in
stos
cmc
pusha
pop
int
ins
pop
or
aam
xor
fidivr
outs
sbb
or
std
hlt
cmp
pop
retf
cmp
ret
mov
push
sbb
xchg
call
mov
sbb
sbb
idiv
adc
sub
mov
outs
pop
outs
(bad)
mov
cmp
cmc
ins
adc
inc
rcl
retf
xchg
and
leave
adc
sbb
leave
ja
mov
and
mov
(bad)
je
inc
mov
pop
dec
inc
jp
dec
pushf
add
jae
or
dec
jo
and
add
jg
(bad)
jns
xor
xor
mov
aas
xor
sbb
jae
or
pop
mov
pop
lods
sti
outs
aas
add
cdq
mov
pop
mov
and
out
mov
scas
jmp
mov
dec
push
(bad)
bound
mov
jns
stc
sbb
jmp
cdq
scas
adc
pop
xchg
jl
or
sub
inc
push
mov
clc
sub
mov
xchg
es
pop
xor
jp
test
mov
pop
inc
cmps
mov
lods
leave
adc
mov
pop
cwde
retf
lahf
cmp
dec
stc
retf
push
and
add
fnsave
mov
call
adc
mov
sub
(bad)
xchg
add
pop
jo
jecxz
xchg
outs
mov
sbb
pop
(bad)
jecxz
int3
lds
rol
or
mov
out
xchg
idiv
push
push
sahf
mov
sub
sub
inc
xchg
push
cmps
xchg
in
mov
dec
jnp
movs
or
and
outs
lods
jmp
add
cmp
push
xchg
mov
icebp
sbb
test
adc
and
test
aam
daa
cmp
cmp
mov
cmp
mov
xlat
sbb
pop
mul
cmc
xor
popf
nop
push
dec
(bad)
dec
lods
enter
jmp
aas
push
test
mov
jo
add
sub
test
pop
ret
sbb
repz
xchg
mov
jb
fmulp
scas
aas
mov
push
cmp
push
(bad)
sbb
mov
rcl
bound
pop
pop
jmp
and
pop
jmp
js
adc
mov
adc
jp
arpl
ret
aas
xor
add
dec
movs
outs
mov
adc
xchg
cmp
fcomp
test
test
popa
test
mov
or
movs
and
and
jg
jge
clc
cmp
ficom
push
xchg
sbb
push
not
mov
in
sbb
jns
leave
inc
adc
cmc
mov
mov
inc
adc
fst
xor
adc
scas
fdiv
push
shl
xchg
mov
mov
and
adc
pop
ja
cs
inc
aam
shl
dec
mov
jne
ins
xchg
ret
mov
dec
int3
lock
xchg
ret
pop
sbb
inc
pop
daa
fwait
sbb
addr16
dec
inc
shl
and
(bad)
popf
cli
mov
rcl
push
or
sub
fwait
pop
push
xlat
mov
mov
jge
cmp
mov
fwait
cmp
ss
or
retf
gs
xchg
push
xor
mov
or
repnz
xchg
adc
jo
pop
mov
mov
inc
xchg
fdivp
pushf
jne
mov
stos
jbe
into
stos
loopne
mov
popa
jl
mov
cwde
stc
xor
test
add
ror
inc
xchg
ins
js
js
jmp
dec
sub
mov
rcl
add
jg
push
sti
sti
mov
xchg
call
fst
mov
jp
fcmove
lock
xor
sbb
outs
add
sbb
in
jns
mov
push
mov
mov
xchg
mov
daa
jp
dec
xchg
ret
and
mov
movs
repz
sub
das
out
pop
mov
inc
or
sbb
mov
and
lds
adc
jne
adc
xlat
jp
fwait
dec
jle
repnz
pop
xor
repnz
ins
call
rcr
push
inc
mov
push
mov
pusha
xchg
mov
dec
pop
and
and
xor
xor
push
out
xor
fiadd
mov
repz
add
push
jns
dec
dec
xchg
cmp
retf
sete
sti
xchg
adc
fidivr
mov
ins
mov
outs
jb
and
and
jl
sbb
fwait
push
mov
push
cmc
push
and
jae
pop
pop
std
cmp
dec
iret
mov
dec
out
fucomi
aad
aad
mov
mov
inc
cs
(bad)
shl
mov
cmc
mov
nop
sbb
adc
ret
cmp
and
in
push
adc
jmp
imul
adc
add
push
or
dec
or
inc
xor
js
mov
dec
lahf
cli
outs
pop
mov
cs
lods
pop
cli
mov
adc
push
mov
inc
cmovae
test
mov
imul
adc
(bad)
mov
ins
dec
sahf
add
fstp
lods
inc
mov
sub
imul
test
jge
sbb
retf
pop
mov
cmps
daa
mov
pop
retf
inc
rep
iret
idiv
xor
sub
ror
out
(bad)
in
mov
repz
jne
dec
mov
ins
outs
outs
push
inc
fisubr
pop
mov
xchg
outs
push
jmp
adc
mov
mov
(bad)
mov
lods
push
int
sub
and
fmul
retf
icebp
ret
and
xchg
dec
mov
inc
or
mov
dec
pop
xor
mov
pop
sti
ins
lahf
add
es
scas
or
mov
(bad)
loopne
pop
pop
hlt
jne
jg
mov
ret
(bad)
aaa
out
xchg
adc
rcr
into
lock
idiv
and
fmul
sub
inc
jle
dec
mov
adc
sbb
mov
cld
jne
mov
push
mov
aad
jnp
loope
add
mov
xor
fld
mov
in
push
mov
das
mov
out
jne
push
push
imul
pop
jg
rcl
dec
js
gs
stos
stc
repnz
and
xchg
outs
and
xchg
pop
mov
std
add
test
push
pop
mov
in
repnz
pop
mov
lds
std
clc
and
pop
dec
push
sbb
sub
cmps
push
cmp
loope
into
sub
(bad)
dec
mov
nop
xor
sahf
mov
imul
std
jae
pop
mov
push
mov
mov
int3
rcr
ret
pusha
test
lods
jmp
sbb
into
mov
mov
test
fistp
leave
jl
or
push
jg
iret
fdiv
mov
enter
mov
ds
push
add
add
push
fistp
xor
mov
or
jmp
(bad)
sbb
xchg
retf
xchg
jne
ins
cmps
or
sub
fstp
xor
xchg
lahf
addr16
aaa
mov
ja
test
xchg
shr
outs
xor
xchg
adc
je
(bad)
fisubr
xchg
in
lahf
mov
sti
ret
pop
and
mov
sbb
mov
push
pop
mov
sbb
out
dec
push
rcr
adc
or
mov
sub
jmp
xchg
jo
mov
call
sbb
js
mov
(bad)
jle
jne
pop
shl
or
out
iret
test
ss
push
mov
adc
push
xchg
jnp
cmp
cmp
icebp
aam
repnz
fidiv
(bad)
jb
test
pop
mov
push
call
xchg
stos
retf
cmp
sbb
sbb
pop
fistp
loope
add
pop
adc
sbb
mov
or
mov
or
lods
or
jg
cmc
sbb
sub
sub
adc
ret
cdq
jp
daa
sub
inc
jp
fild
or
xchg
push
cdq
jno
jp
ins
sbb
xor
push
test
and
and
in
push
test
(bad)
xchg
jp
adc
aas
sub
jmp
sar
jno
js
xor
cmp
popa
xchg
jne
not
aas
cmp
inc
sub
mov
rol
xor
les
pop
leave
imul
punpckhdq
sahf
fisub
test
idiv
test
push
popa
pop
pusha
mov
out
pop
(bad)
ror
call
adc
loopne
aaa
cmc
fdiv
cmp
in
pusha
xchg
push
inc
(bad)
mov
or
inc
adc
mov
sti
fcmovnbe
pop
lds
inc
iret
jnp
inc
repnz
pop
in
jmp
bnd
and
jae
push
bound
push
adc
add
fldcw
int3
ror
imul
fwait
das
cmc
mov
push
ins
iret
fstp
xchg
or
add
sahf
fild
or
fisttp
add
and
dec
cmp
cmp
aam
inc
mov
or
cwde
clc
inc
test
lods
fisubr
pusha
push
sub
sbb
sbb
mov
shl
test
push
stos
in
pop
scas
pop
js
test
mov
ret
enter
inc
mov
popa
test
lods
cmps
loope
(bad)
and
shl
push
or
inc
pop
xor
adc
hlt
xchg
xchg
(bad)
adc
inc
adc
mov
clc
in
loopne
or
xchg
lds
adc
stos
inc
outs
fadd
inc
rol
test
push
jnp
push
ja
call
xchg
dec
ins
xchg
or
clc
cwde
mov
test
stc
dec
les
xchg
(bad)
jo
xlat
inc
mov
data16
add
cmp
sub
jl
ja
in
pop
das
popf
stc
in
fild
sub
inc
les
mov
push
scas
mov
retf
sub
addr16
scas
cmc
adc
enter
jmp
ret
loopne
xchg
xchg
mov
xchg
inc
scas
out
lock
fst
cmp
cmp
iret
lods
jg
mov
sbb
lea
dec
add
addr16
ds
mov
push
ret
mov
(bad)
(bad)
hlt
rcl
outs
stos
add
cli
mov
aas
mov
inc
add
and
in
stos
mov
aad
addr16
jno
mov
data16
xor
cs
or
clc
add
int
push
shl
add
iret
fstp
cmp
int
inc
sbb
mov
in
fsubr
mov
sub
sbb
cmc
cdq
inc
sahf
(bad)
in
pop
mov
repnz
ins
pop
jno
sar
pop
repnz
outs
jno
and
shr
cmps
retf
out
dec
ss
or
add
push
mov
clc
retf
mov
fistp
jo
jmp
xchg
jne
je
or
add
int
pop
xor
sahf
lods
aam
jo
sub
mov
inc
lock
test
push
iret
je
mov
mov
sub
push
sbb
xchg
(bad)
icebp
out
jns
out
and
into
dec
jle
adc
inc
cwde
call
push
in
out
jb
pushf
push
sar
lods
jae
lea
into
arpl
add
dec
jmp
(bad)
sti
and
sar
push
call
sbb
dec
adc
or
lods
outs
pushf
xor
je
ss
or
sub
ins
mov
and
sub
xchg
out
movs
cld
scas
or
mov
inc
in
adc
or
stos
sub
push
into
mov
jnp
inc
(bad)
jge
xchg
in
cmps
xchg
out
mov
and
pushf
aas
sbb
adc
inc
mov
leave
stos
out
test
out
xor
pusha
inc
xchg
imul
jne
gs
xor
pop
aam
bound
add
mov
popa
xchg
jge
fcom
dec
ss
cs
mov
pop
retf
jno
pushf
jmp
inc
test
pop
jno
stos
cdq
sbb
xchg
inc
jae
sbb
push
inc
mov
fldenv
pop
mov
mov
pop
test
xchg
js
div
inc
mov
clc
mov
and
or
pop
mov
mov
push
ficomp
test
and
sbb
xchg
bound
arpl
pop
add
add
mov
sbb
mov
fldcw
test
cmps
and
jmp
test
add
dec
(bad)
cli
jg
and
ret
cld
ret
ss
ror
pop
retf
rol
xchg
ret
movntps
lods
stos
out
(bad)
pop
out
jbe
(bad)
push
scas
jae
shr
xor
int3
push
into
cmp
cmp
mov
mov
shl
push
ins
jb
movs
stos
pop
pop
not
stos
cs
push
cmps
shl
addr16
jnp
jno
sub
adc
cmps
inc
push
inc
ds
inc
imul
daa
cmps
jge
dec
push
mov
es
jnp
into
ja
sbb
push
cmp
push
imul
xor
aam
in
sub
add
shr
cmc
inc
mov
inc
popf
les
adc
pop
or
inc
jb
pop
push
popf
call
out
mov
nop
mov
cmp
inc
(bad)
leave
sbb
aas
xor
lods
sbb
mov
scas
mov
div
inc
hlt
jecxz
in
sbb
repnz
xchg
jmp
mov
jne
xlat
mov
mov
xchg
ret
call
pop
jnp
lds
inc
data16
adc
gs
mov
test
mov
scas
cmp
mov
cmp
shl
popf
nop
mov
and
pop
add
and
rcr
loop
sub
daa
adc
pop
dec
fwait
push
jo
pop
push
pop
js
popa
outs
and
inc
cmp
mov
dec
sbb
fistp
mov
(bad)
xor
sahf
not
mov
fst
xchg
mov
aaa
(bad)
bnd
cmp
xor
leave
cmps
add
xor
xlat
jns
dec
imul
cmp
pop
and
sar
or
xchg
sbb
movs
scas
cmps
fild
adc
in
ss
loopne
push
dec
ret
mov
in
push
pop
bound
inc
fstp
pop
cmc
push
mov
sub
in
jl
pop
sbb
gs
add
or
stos
or
stc
cld
jbe
sub
cld
sti
aas
and
sbb
in
pop
pop
(bad)
or
popf
out
aaa
inc
jo
pop
xchg
ss
(bad)
int3
push
and
mov
imul
out
xchg
xchg
rol
cmp
outs
jmp
xchg
lock
push
out
fdiv
(bad)
cli
ret
mov
or
cmp
pop
fwait
dec
(bad)
or
jge
mov
lahf
jbe
cmp
lods
pop
mov
inc
dec
icebp
std
(bad)
(bad)
xor
push
mov
jle
ficom
in
cmc
mov
call
sbb
and
aas
imul
retf
rol
sub
dec
pop
(bad)
rcr
or
mov
fisttp
xchg
out
daa
sbb
jmp
into
and
pop
pop
jg
nop
pop
jg
xchg
add
pop
mov
arpl
out
les
repnz
retf
test
dec
into
ret
jns
jp
xor
push
mov
xchg
ror
pop
cli
mov
test
push
sbb
je
shr
in
xchg
fucomi
dec
fcmovnbe
retf
mov
in
nop
sub
push
call
lahf
mov
lahf
and
int3
fisub
sub
icebp
loop
mov
rcl
adc
(bad)
jg
fsub
sbb
enter
int
aam
addr16
out
sub
hlt
imul
retf
fst
es
xchg
das
adc
shrd
test
pusha
dec
dec
mov
lods
stos
shl
or
sbb
jmp
mov
mov
repz
(bad)
mov
cmp
dec
xchg
gs
add
inc
pop
out
cmp
sbb
push
movs
adc
ror
imul
mov
out
(bad)
xor
loop
jnp
mov
jle
jle
dec
dec
mov
xor
aad
sub
iret
(bad)
inc
arpl
inc
(bad)
push
leave
xchg
jmp
and
xor
nop
call
jmp
push
mov
mov
fld
(bad)
ds
das
es
mov
out
pop
adc
das
shl
iret
idiv
push
pop
dec
in
lods
fsub
push
cmc
outs
das
pop
pop
mov
mov
mov
dec
shl
lds
inc
and
mov
(bad)
lods
push
mov
add
push
sbb
cmps
lods
jmp
mov
push
das
jmp
out
pop
neg
stos
jno
es
mov
xchg
xor
outs
xlat
fst
push
ds
imul
jecxz
jnp
sub
(bad)
cs
adc
into
(bad)
imul
cdq
imul
mov
xor
mov
xchg
xor
cmps
xchg
inc
pusha
test
add
out
xor
int3
pop
lock
and
jno
cmp
outs
mov
in
jo
sbb
data16
in
xor
sub
out
outs
and
jns
test
cmp
jle
sub
nop
xor
sub
add
out
pop
dec
and
rol
sbb
mov
dec
mov
repnz
dec
or
adc
mov
hlt
int3
xor
daa
pusha
pop
cmp
sub
inc
test
inc
daa
mov
dec
pop
cwde
or
std
cmp
cdq
neg
mov
daa
loopne
addr16
pop
xor
call
jo
mov
retf
rcr
xor
retf
les
out
mov
adc
test
je
ror
jmp
aad
pop
cmc
cmp
out
ins
mov
mov
fnstcw
je
hlt
mov
adc
jge
jbe
fcomp
sti
ds
aad
sbb
out
xchg
sar
cmp
stos
sbb
pop
nop
mov
cmc
sahf
cdq
jb
scas
ja
sbb
xor
imul
pop
iret
mov
push
dec
xchg
add
dec
cmc
cmp
push
jle
sahf
and
inc
out
repz
fwait
scas
adc
and
or
sbb
push
es
push
pop
cli
retf
dec
adc
pop
(bad)
movs
rol
pushf
lock
sar
(bad)
fdivr
xor
pop
and
jmp
js
imul
jns
xor
fnstsw
js
add
cli
scas
dec
fsub
push
lock
jbe
out
push
push
sub
ja
dec
mov
cli
push
push
and
test
stos
pushf
inc
pop
rcl
cmp
jns
xor
adc
xchg
call
dec
es
test
cmp
dec
fmul
push
jmp
mov
mov
ss
xchg
mov
push
sbb
cdq
or
inc
jg
or
or
mov
aad
int3
fidivr
inc
and
imul
stos
pop
aam
jae
pop
pop
(bad)
ins
call
xor
sub
mov
jne
dec
imul
int3
push
mov
fadd
fidiv
and
or
test
das
cwde
and
mov
cld
jp
mov
pop
shl
retf
call
cmc
add
sub
mov
dec
repz
in
cmp
ins
mov
xchg
bound
loope
into
mov
in
adc
inc
rcl
mov
cmp
jl
jmp
mov
lods
int
sub
fsubr
dec
mov
mov
aaa
inc
daa
inc
mov
mov
ficomp
lahf
shl
or
jnp
xor
sar
into
cmp
jo
jp
or
cli
add
pminub
addr16
push
call
push
rol
and
mov
ret
mov
in
cmp
shl
(bad)
and
not
push
test
mov
dec
pop
xchg
jb
mov
xchg
scas
adc
(bad)
add
push
fs
dec
ror
test
fadd
mov
repnz
stc
(bad)
jmp
cmp
in
pushf
int3
fwait
pop
inc
aad
in
pop
jnp
cmp
add
js
dec
xchg
int
in
iret
jne
lods
hlt
test
jecxz
int
into
inc
stos
cmc
add
or
and
push
(bad)
pop
dec
sbb
and
aad
push
aad
dec
sbb
movs
cwde
cmp
sub
pop
lock
pop
repnz
lods
arpl
and
push
aad
icebp
sub
(bad)
stos
sbb
pop
loope
adc
hlt
hlt
pop
(bad)
fadd
add
add
mov
pop
(bad)
sti
xlat
mov
cmp
mov
xchg
push
retf
mov
enter
inc
les
jnp
cli
js
call
push
inc
mov
ret
mov
fadd
push
add
push
cmp
or
xchg
mov
xchg
lea
adc
xchg
and
dec
hlt
and
push
pop
lods
clc
enter
call
cld
cdq
clc
ds
sahf
movs
pop
and
dec
test
arpl
mov
inc
mov
icebp
add
or
mov
push
fbstp
test
in
sahf
pusha
or
jno
mov
sbb
stos
arpl
xor
xor
xchg
movs
call
arpl
mov
call
ret
dec
mov
fisub
mov
dec
jne
add
and
ret
cmp
int
loopne
push
push
inc
ss
mov
dec
jne
mov
push
pop
xor
jnp
ja
inc
push
(bad)
sbb
jae
dec
and
push
fbstp
(bad)
adc
adc
mov
sahf
aaa
outs
adc
adc
fcomp
mov
fsub
outs
jmp
in
test
pushf
sub
icebp
pop
mov
imul
push
in
pop
outs
jecxz
(bad)
(bad)
retf
repnz
push
je
cmp
out
add
shr
shr
div
sub
jmp
daa
shl
addr16
jo
pushf
mov
clc
int3
mov
outs
add
xor
cmp
loope
dec
add
jle
addr16
jmp
xchg
xor
in
out
pop
lods
lahf
or
adc
int
loopne
cmp
mov
xchg
or
(bad)
dec
and
pop
adc
add
(bad)
in
pop
xor
int
shr
pop
pop
ins
aaa
push
lea
scas
mov
movs
mov
lods
and
mov
mov
push
mov
xlat
mov
xor
cmp
or
inc
xchg
repnz
mov
sar
sahf
mov
(bad)
sbb
push
jg
aas
repz
xchg
mov
pop
test
das
push
rcl
fisttp
nop
jle
pusha
dec
(bad)
cwde
add
lahf
ins
lea
pop
ud0
mov
jbe
xor
push
adc
sbb
jmp
xchg
mov
rol
test
sub
fs
jle
std
mul
dec
inc
loop
push
fsubr
jbe
stos
mov
(bad)
xor
cmps
push
(bad)
aam
push
sub
mov
cmp
fistp
push
mul
sar
mov
sbb
lods
sub
xor
jle
out
and
out
lods
retf
fisub
in
inc
jge
retf
movs
popf
clc
js
sub
out
jmp
sahf
out
push
or
(bad)
or
shr
sar
aaa
mov
inc
pop
or
mov
icebp
ja
xchg
pop
lahf
jl
ss
lea
adc
call
mov
sbb
mov
sbb
mov
movs
adc
mov
ins
and
sahf
nop
and
cmp
icebp
push
je
pop
pop
dec
fchs
xor
jmp
out
fs
fsubr
xchg
cmp
(bad)
jbe
and
pop
cmp
jae
dec
mov
popf
mov
idiv
in
push
sar
jecxz
stos
lea
pop
xchg
mov
push
sbb
sbb
and
dec
mov
jle
in
fwait
retf
xor
xchg
lods
add
mov
inc
dec
sub
or
push
dec
loope
pop
test
in
fwait
aam
push
(bad)
sahf
js
adc
scas
inc
push
jge
mov
outs
stos
rep
test
pop
test
stos
pop
push
sbb
arpl
push
mov
fnstsw
das
int3
fisubr
adc
aaa
jecxz
or
in
retf
in
push
adc
repz
sbb
test
adc
push
mov
adc
cmc
je
pop
mov
mov
je
mov
(bad)
xor
add
push
mov
push
inc
push
or
jmp
or
jecxz
test
cwde
retf
xor
aaa
ss
cmps
jle
fwait
cwde
inc
hlt
fdiv
sbb
jo
mov
cmp
xor
push
or
push
rol
ds
pop
shl
clc
mov
jmp
adc
dec
sbb
sub
sub
out
xchg
or
adc
sbb
fcmovnu
mov
and
or
mov
arpl
out
push
mov
lea
mov
shl
(bad)
out
(bad)
jmp
inc
mov
sub
sbb
inc
and
mov
stos
push
or
idiv
xor
mov
retf
addr16
push
inc
outs
jmp
lods
sbb
xchg
mov
inc
pop
cmp
jno
stos
sahf
repz
mov
in
push
mov
add
jmp
ja
daa
or
lods
sub
leave
and
adc
(bad)
(bad)
rcl
jle
in
mov
in
ficomp
push
dec
xor
loopne
sub
cmp
stos
out
cmp
addr16
lea
movs
sbb
push
ret
add
outs
mov
cwde
rcr
dec
push
push
cmp
int
xor
sub
push
mov
movs
(bad)
xlat
test
mov
shr
pusha
push
push
mov
dec
adc
adc
push
cmc
test
xor
jge
add
in
push
fxch
in
mov
xchg
inc
imul
jl
in
lock
call
mov
and
loop
lock
js
cmp
out
push
jae
out
lock
mov
lock
gs
mov
in
sub
push
je
sti
(bad)
sbb
cli
add
stc
mov
xchg
inc
cmc
mov
pop
sub
dec
js
or
cmp
dec
mov
(bad)
scas
enter
push
loopne
(bad)
repnz
jbe
je
pushf
das
jb
sbb
adc
mov
xor
imul
imul
retf
mov
(bad)
ja
ja
push
jecxz
pop
cmp
xor
iret
xchg
mov
xor
or
lods
stos
aas
cmps
adc
fsubr
cmp
sub
push
or
push
pop
mov
xchg
jle
cmp
xchg
ret
popf
lds
mov
iret
out
cli
scas
mov
add
add
mov
test
push
call
push
arpl
out
xor
clc
push
jg
dec
cmps
outs
push
dec
cwde
dec
inc
xor
ret
jmp
sahf
mov
adc
dec
mov
mov
aam
out
pushf
adc
cmp
aaa
xlat
es
adc
or
movs
sahf
leave
jmp
enter
movs
dec
adc
rcr
mov
cmp
cmp
imul
hlt
adc
nop
pop
push
push
into
mov
xchg
cwde
ret
loope
(bad)
push
(bad)
fiadd
sub
and
pop
dec
pop
clc
mov
movs
test
sub
and
or
push
test
jge
jl
and
loope
cdq
sub
pop
lahf
mov
jl
jno
mov
nop
push
and
out
xor
sbb
(bad)
sub
sbb
jl
add
pop
outs
in
and
pop
js
or
(bad)
(bad)
stc
stos
push
and
mov
xchg
mov
ds
adc
push
add
icebp
cmp
retf
dec
pop
movs
sub
add
mov
icebp
lahf
pop
or
xor
aaa
jp
cld
mov
pcmpeqd
ret
test
mov
daa
je
mov
fiadd
mov
into
fimul
retf
out
out
cmp
mov
dec
mov
scas
out
fstp
cmp
pop
sub
mov
idiv
aam
loopne
pop
test
outs
fwait
dec
add
jns
clc
jp
gs
xchg
push
mov
mov
rcl
mov
clc
fild
or
sub
sub
and
lods
sbb
in
add
push
mov
jo
scas
jns
idiv
test
mov
out
push
loopne
loope
sub
data16
or
pop
jg
mov
sub
add
leave
mov
xchg
cmp
(bad)
repz
rol
std
xlat
and
les
scas
imul
push
aam
xor
inc
nop
add
bnd
dec
jne
or
enter
and
pop
lods
lahf
das
cmp
in
mov
call
pop
jb
cmp
and
push
jne
lahf
sbb
cmps
add
cwde
mov
ficom
sub
mov
js
int
(bad)
jnp
cmc
in
(bad)
jmp
(bad)
aad
ja
push
xchg
sbb
push
cmp
push
or
pop
ss
fist
ret
pop
xor
shr
stos
add
push
mov
sar
jmp
icebp
int3
mov
mov
rol
int3
std
jae
leave
cmp
mov
(bad)
xchg
leave
std
lods
or
cmps
in
pop
int
test
sahf
inc
jo
mov
scas
pop
adc
mov
aaa
and
sbb
dec
pavgw
pusha
movs
mov
push
inc
nop
cmps
shr
leave
sub
call
xchg
xor
and
jbe
aam
or
fs
aam
ss
inc
or
fld
push
mov
enter
xor
xor
ins
inc
jno
xchg
loopne
push
(bad)
imul
and
(bad)
adc
ja
(bad)
push
lahf
pop
arpl
mov
pop
jae
pop
xor
and
xor
aam
sbb
or
cmp
and
mov
push
imul
adc
pop
das
sub
test
(bad)
sub
scas
push
js
xchg
and
loop
push
mov
mov
sti
sub
test
sbb
mov
aas
inc
cmp
fcmovu
or
sub
popf
je
mov
xor
push
or
xor
cld
sub
jbe
pop
push
and
push
test
cmp
sbb
and
mov
shl
jb
test
call
lods
push
das
stos
lds
jo
(bad)
mov
adc
aad
xchg
shr
aad
cli
es
movs
push
push
xor
bound
pop
inc
sar
test
cmp
xor
(bad)
xchg
cmp
mov
cmc
xchg
fwait
sbb
xchg
xchg
xchg
ss
dec
mov
test
pop
xrelease
in
pushf
mov
lds
(bad)
xchg
cmp
lock
jae
outs
xchg
nop
je
inc
cld
fs
shl
jmp
pop
mov
mov
out
aaa
stos
(bad)
loop
adc
add
out
pop
js
popf
js
adc
or
int3
sub
mov
or
movs
test
scas
mov
in
mov
jle
out
and
fwait
mov
dec
fwait
dec
push
mov
(bad)
mov
jp
mov
call
icebp
rcl
les
mov
adc
jecxz
jl
stos
stos
icebp
bound
dec
ja
test
cli
test
or
fwait
adc
mov
add
inc
xor
cmp
xchg
test
int3
fisttp
ds
in
mov
xor
scas
and
stos
mov
pop
sub
lock
int
dec
xor
in
mov
mov
xor
loope
jle
jns
mov
dec
mov
jge
or
sar
xchg
mov
cmc
frstor
inc
sub
fstp
aaa
jo
xor
ds
xchg
dec
xchg
fcomip
and
int3
push
sar
push
inc
jecxz
mov
xor
xlat
xor
dec
cmp
mov
rcl
mov
mov
xor
scas
loope
xchg
mov
out
out
push
mov
pop
gs
dec
push
or
and
not
pop
inc
xchg
pop
call
imul
test
or
cmp
popa
scas
jmp
adc
adc
popa
popa
cli
outs
xor
shl
dec
repnz
add
pop
mov
movs
mov
call
clc
sub
mov
add
or
jmp
cwde
mov
ja
in
sbb
adc
inc
cmc
fdivrp
jno
sub
adc
gs
pop
les
mov
mov
sub
jmp
sar
xlat
popa
or
in
cmp
call
xor
sahf
out
xchg
bswap
dec
stos
in
jl
fild
int3
retf
imul
mul
movhps
fiadd
dec
sub
mov
imul
ins
jp
inc
pushf
movs
push
pusha
aad
xlat
push
test
in
or
fcmove
fisubr
out
push
cmc
pop
sub
jp
cmc
mov
fwait
xlat
pop
xchg
bswap
push
mov
mov
pop
mov
cmp
mov
cdq
sub
fwait
je
and
mov
cmps
adc
pop
jp
(bad)
aam
aaa
(bad)
in
push
sub
sti
and
xor
push
ins
xchg
add
dec
in
loopne
add
push
pop
mov
and
xchg
jns
pop
pop
out
jb
je
mov
cdq
dec
stos
aaa
ss
call
ja
mov
mov
dec
mov
mov
or
cmp
sbb
int3
mov
mov
cmp
mov
(bad)
lea
dec
push
loop
jno
push
push
jl
(bad)
mov
jmp
stc
mov
mov
nop
ins
outs
sub
dec
cld
rcl
cmp
mov
sahf
aad
scas
test
out
jp
jnp
jo
mov
ja
fild
push
mov
inc
out
(bad)
(bad)
pop
rdmsr
adc
mov
repnz
stos
xchg
cmps
xchg
dec
test
and
push
ja
lods
shl
cmp
pop
inc
aad
adc
mov
in
add
cmc
test
adc
inc
les
adc
inc
sti
retf
fwait
xadd
ror
call
pop
in
cmps
add
lods
xor
dec
pop
cmp
jl
push
mov
imul
int3
sub
mov
sub
mov
xchg
frstor
aam
out
les
cmp
and
push
in
push
hlt
loop
inc
shl
mov
icebp
jge
imul
mov
rcr
ins
jo
stos
hlt
dec
cwde
sub
out
mov
pop
jge
rcr
movs
leave
movhps
push
mov
mov
loope
inc
mov
test
icebp
pusha
dec
sbb
out
push
jae
(bad)
add
mov
in
jecxz
fwait
dec
ins
adc
ins
push
push
aas
out
in
in
and
stc
dec
pusha
jp
lods
sbb
inc
and
or
xchg
sub
mov
xor
fstp
xor
push
data16
scas
imul
ror
xor
(bad)
xchg
xchg
sbb
dec
xor
(bad)
jmp
inc
ins
push
jge
ret
xor
movs
jge
cmc
jnp
push
daa
push
inc
pushf
xor
mov
push
aas
jmp
push
pushf
sub
mov
inc
mov
jp
inc
jmp
movs
loopne
push
dec
out
(bad)
push
mov
cmp
bound
inc
or
xchg
mov
cmp
repz
call
jmp
sub
adc
cmps
mov
mov
adc
and
inc
adc
dec
sbb
cmp
bound
push
fs
or
inc
fild
mov
fwait
mov
es
ds
ins
rol
xchg
imul
fmul
cmp
pop
lods
jl
(bad)
es
clc
and
mov
mov
scas
iret
test
dec
aaa
cmc
mov
pop
sub
in
imul
dec
jo
fisub
popa
add
mov
add
cmp
mov
add
and
gs
push
lahf
(bad)
scas
sbb
popf
sbb
dec
retf
jge
into
mov
cld
gs
ss
or
loopne
xchg
add
movs
stos
in
test
call
mov
inc
sti
mov
(bad)
and
iret
xor
out
fld
xlat
xor
ins
sbb
jmp
pusha
fwait
inc
dec
ret
mov
jns
test
mov
fisttp
iret
mov
mov
push
mul
mov
imul
cmp
test
mov
jg
add
clc
iret
into
jno
jo
out
scas
icebp
cmp
fcomip
pusha
test
aas
sub
pop
push
pushf
stos
sub
sbb
pop
ins
cmp
test
jno
loope
xor
sub
pop
in
(bad)
jbe
iret
cs
lods
stos
and
mov
and
mov
mov
mov
lea
jge
pop
xchg
inc
xor
out
(bad)
xlat
push
inc
push
mov
cmps
inc
cmc
add
ficomp
lock
sti
aas
pop
ficomp
(bad)
lds
xchg
pop
lahf
iret
jle
cmps
add
adc
fld
js
add
and
stos
sar
cmp
jge
pop
scas
push
int
popf
stos
gs
fadd
retf
cli
xchg
and
aaa
cld
test
xchg
es
dec
shr
cld
push
arpl
adc
mov
cdq
bound
sbb
lods
mov
push
ss
int
stos
std
lahf
jno
repnz
clc
cmp
mov
cmps
inc
add
out
cs
or
imul
test
inc
ficom
mov
cmp
jno
in
jne
push
fucomi
inc
pop
add
add
or
addr16
fs
sbb
in
add
pop
or
leave
add
les
push
push
sub
push
ret
dec
in
jno
leave
pop
lods
ja
and
ficomp
(bad)
ja
outs
sbb
ins
mov
adc
pop
loop
lods
sbb
mov
sub
cmps
gs
les
cmps
pop
xchg
mov
pop
mov
dec
fild
dec
add
jns
(bad)
les
shl
fadd
jg
nop
mov
jne
xor
inc
fisubr
push
or
outs
dec
out
add
into
dec
mov
mov
imul
arpl
xchg
ss
nop
aam
pop
call
jne
lds
jp
sub
je
or
pop
inc
mov
retf
retf
jge
pop
add
sbb
int
cwde
sbb
adc
cmp
jge
pop
pop
ret
push
arpl
xchg
icebp
jp
mov
data16
rol
adc
dec
xchg
push
jge
adc
add
(bad)
cmp
stos
punpckhbw
outs
leave
xchg
adc
int
hlt
repnz
test
es
push
repnz
and
and
(bad)
test
(bad)
out
cmp
ins
fdiv
in
js
and
(bad)
pop
add
rcl
ret
pushf
aad
pop
adc
retf
std
dec
out
call
cmp
(bad)
add
out
in
popa
sahf
or
idiv
sbb
or
fisttp
dec
ret
dec
add
clc
pop
xchg
push
push
imul
pop
retf
and
popf
inc
les
fdivr
into
cs
cmp
ret
mov
mov
mov
push
jmp
movs
mov
jne
jmp
inc
popf
scas
jne
pop
xlat
rcr
sbb
mov
test
sub
xor
data16
and
stos
jb
lds
pop
push
or
xor
pop
loopne
mov
sub
fcmove
loopne
cdq
nop
mov
int
add
xchg
xor
mov
(bad)
out
xor
dec
jbe
imul
movs
lods
rol
xchg
xchg
mov
sbb
test
retf
pop
mov
mov
xchg
mov
push
out
outs
xchg
adc
idiv
push
push
in
jp
mov
mov
push
push
(bad)
jecxz
pop
imul
xchg
popa
xor
jmp
sbb
pmaddwd
repz
jl
xor
(bad)
fstp
xchg
xchg
leave
cdq
xor
push
push
popf
imul
inc
stos
call
stc
and
jmp
sbb
sahf
inc
in
int3
int
or
popf
iret
arpl
bound
mov
pop
fld
or
cli
enter
add
jge
sub
adc
stos
repz
add
adc
mov
fucomi
xor
out
(bad)
fistp
or
dec
dec
fwait
add
add
in
sub
cld
and
sbb
fs
ss
mov
cmp
jne
mov
fcmovu
cmp
adc
fldcw
loope
mov
sub
sti
cli
lahf
and
mov
and
int3
dec
inc
sti
repz
push
sub
push
int
fstp
jno
pop
lahf
cs
(bad)
adc
(bad)
std
inc
and
ins
jp
mov
lock
les
out
jno
inc
inc
cdq
or
cld
movs
cld
repnz
dec
jl
jecxz
jns
xchg
ds
dec
stos
into
jno
push
mov
aad
aad
sbb
hlt
in
in
mov
popf
mov
add
stos
je
sub
xlat
push
pop
ss
fwait
or
dec
xor
mov
retf
dec
out
test
push
into
dec
addr16
mov
adc
fs
ss
sbb
frstor
mov
push
outs
cmc
popf
(bad)
cmp
movs
jp
std
add
add
xchg
add
inc
xor
aad
mov
fbstp
rcr
adc
icebp
imul
adc
loopne
mov
xchg
mov
(bad)
stos
jp
xchg
or
nop
xor
cdq
data16
jmp
inc
dec
int3
xchg
int3
sti
jne
iret
xor
rcl
and
push
aas
xor
test
aas
mov
push
pop
lahf
aaa
enter
jb
add
xchg
cmc
loop
mov
mov
(bad)
mov
adc
addr16
cli
adc
outs
jb
sar
add
pop
push
sbb
lahf
cmp
retf
add
cmp
cmc
icebp
stc
cmp
outs
ins
cmp
(bad)
(bad)
(bad)
fmul
in
pop
and
jae
pop
inc
icebp
push
sahf
pop
cmp
pop
inc
jne
rcr
pop
mov
ret
or
mov
repz
add
xor
sub
add
dec
test
pop
aaa
stc
call
cmp
mov
push
sar
adc
mov
jle
into
cmc
or
xor
xchg
adc
mov
jge
stos
imul
ins
rcr
jno
pusha
dec
mov
xchg
bndstx
push
test
outs
stc
inc
cdq
dec
xchg
(bad)
loope
jmp
and
sbb
or
call
push
repz
movs
idiv
daa
or
fcomp
mov
pop
xchg
push
popf
xchg
daa
sub
lods
cmps
cmps
in
xor
sub
jbe
adc
and
mov
xchg
sbb
pop
lahf
cmp
jl
icebp
mov
jl
std
push
mov
fadd
lock
(bad)
pusha
sub
std
(bad)
adc
pop
or
mov
dec
jle
and
fisub
cmps
into
(bad)
ja
mov
int
in
cld
mov
dec
mov
lds
fimul
and
neg
repnz
mov
sti
push
sbb
xor
sub
inc
mov
sub
mov
pop
retf
test
sbb
adc
pop
cmps
ja
add
mov
shl
imul
add
out
ss
(bad)
scas
into
(bad)
lock
add
sar
mov
and
retf
xor
fs
dec
inc
repnz
sbb
xchg
les
dec
inc
loopne
dec
mov
jle
int3
mov
fcomp
nop
jmp
lea
sub
in
sbb
xchg
xchg
adc
movs
mov
mov
(bad)
test
inc
xchg
sub
and
xor
retf
mov
adc
aas
int
adc
in
mov
cmp
jbe
fstp
cmp
fstp
jns
dec
pop
or
sub
idiv
call
pop
or
out
lods
inc
call
inc
cs
xor
in
push
xor
mov
ins
jnp
xchg
and
popf
ja
mov
and
jle
sbb
push
or
mov
in
sub
aas
scas
xchg
inc
sub
scas
lds
cmps
mov
xor
pop
dec
mov
cmp
sar
retf
add
xchg
jo
call
sti
lahf
xor
cs
nop
add
mov
idiv
clc
add
push
bnd
lds
or
adc
cmps
inc
jbe
retf
mov
gs
adc
xchg
clc
arpl
cmp
mov
outs
jo
imul
add
bound
retf
ret
add
jbe
push
and
mov
stos
(bad)
cmp
push
sub
lods
pop
in
mov
movs
cwde
jno
or
jge
jle
cdq
jb
push
cdq
loop
sub
pusha
dec
push
dec
jbe
pop
mov
dec
inc
mov
cmp
enter
jmp
test
sbb
mov
int
in
jmp
cmc
and
mov
mov
add
sahf
jl
inc
aam
push
cmps
mov
(bad)
dec
fdiv
mov
pushf
mov
popa
push
mov
add
cmp
sub
jmp
test
fs
xor
xchg
out
dec
adc
pop
pop
mov
mov
sbb
sub
les
repz
in
std
leave
push
aas
aaa
int3
rcl
jno
dec
mov
and
sbb
cld
stos
add
add
adc
mov
add
hlt
xchg
mov
push
pop
push
jecxz
dec
(bad)
movs
es
push
jb
pop
push
aas
sub
and
dec
lea
jmp
add
(bad)
fcomp
mov
jnp
xor
nop
aaa
bound
fld
push
or
mov
jecxz
add
push
test
es
cmp
test
xor
loope
jp
sub
aaa
mov
retf
mov
scas
inc
and
sbb
fld
imul
test
push
cld
popa
mov
(bad)
iret
push
fwait
mov
push
xor
cs
and
adc
outs
in
sub
xchg
ja
push
iret
pop
out
movs
cmp
xor
(bad)
fcmove
and
mov
mov
shr
dec
aad
fwait
xchg
ds
jnp
mov
cmp
mov
(bad)
cmps
mov
push
scas
and
(bad)
xchg
in
pop
xchg
rcl
xchg
xchg
stos
add
push
or
mov
call
inc
sbb
shl
mov
ds
idiv
inc
arpl
movs
jbe
es
data16
in
mov
xor
mov
rcl
or
xor
and
pop
sub
movs
sahf
bound
aad
fiadd
mov
hlt
fisttp
imul
cld
fs
ret
xor
or
sbb
es
sub
aaa
sub
xchg
clc
into
pop
or
mov
cwde
addr16
cli
popf
repnz
jg
push
inc
cmp
mov
push
loope
sahf
push
popa
fisub
jge
cmps
ret
mov
jle
popf
and
pusha
add
hlt
scas
dec
jo
das
mov
mov
retf
test
out
movs
xor
aas
sbb
pop
dec
fwait
cmp
test
das
cmp
fs
cmp
cmc
cmp
sub
pushf
(bad)
or
(bad)
xor
cs
jl
loopne
sbb
test
es
or
mov
xchg
xchg
daa
xor
cmps
add
pop
fdivr
mov
iret
mov
ret
imul
xor
fnstenv
dec
dec
dec
int
(bad)
sub
cmc
adc
add
mul
jne
mov
jle
inc
mov
es
je
mov
test
dec
sub
pop
icebp
fcomp
mov
sub
add
add
mov
cmp
stc
nop
js
jns
push
xchg
push
nop
lods
adc
xchg
push
ret
add
cmps
bound
mov
jge
inc
in
mov
mov
jbe
movs
in
imul
mov
cli
xor
js
pop
loopne
pop
stos
ja
add
rcr
retf
jge
imul
std
cmp
(bad)
adc
shl
xlat
sub
ins
shl
xchg
sbb
add
dec
fisub
jl
mov
jae
mov
sub
inc
jg
jecxz
rcr
jl
sti
ror
ret
mov
xchg
cld
fisubr
lods
std
dec
dec
push
fucomp
mov
mov
inc
inc
scas
outs
shl
stc
push
and
jg
xchg
push
xchg
xor
ins
in
pop
mov
ret
sahf
push
(bad)
sub
xor
mov
mov
les
push
sub
pop
loope
sub
dec
(bad)
xchg
jmp
not
and
pop
and
xchg
mov
jne
ror
push
jae
inc
xor
sub
je
sub
inc
rol
push
push
push
mov
adc
(bad)
mov
dec
out
cwde
sub
fld
repnz
sbb
fadd
call
test
imul
rcr
jge
test
rol
xchg
dec
inc
test
lds
jbe
sub
adc
call
sub
mov
sub
or
xor
adc
ja
dec
dec
jge
mov
popf
mov
inc
push
inc
sbb
mov
inc
stc
adc
jno
mov
int
sub
cwde
jp
push
cld
sahf
popa
pop
push
push
xor
in
xor
jae
test
stos
adc
sub
or
jecxz
dec
cmps
cwde
push
and
sub
push
lods
out
pop
dec
or
mov
mov
xchg
stos
test
cmp
mov
dec
iret
iret
mov
adc
push
jns
adc
aam
ins
rcl
pop
xor
lods
movs
push
pop
es
call
inc
syscall
mov
outs
cmps
dec
inc
mov
xor
repnz
sub
mov
xchg
enter
sti
fwait
popf
sbb
adc
jl
out
lahf
adc
fs
mov
inc
retf
push
stos
cmp
jle
nop
ins
aam
inc
pop
mov
fisub
int3
push
mov
sub
mov
rcl
icebp
(bad)
aad
out
mov
jmp
pop
movs
add
fidiv
mov
add
adc
in
sub
daa
dec
inc
push
jecxz
or
xchg
mov
mov
aad
and
xchg
repnz
retf
or
ins
mov
xor
fprem1
scas
jmp
imul
pop
cmp
or
mov
pop
pop
jle
(bad)
mov
mov
jge
xor
add
sbb
push
jb
hlt
mov
leave
out
sar
clc
cmp
pop
outs
sbb
push
add
push
fs
stos
call
mov
dec
sbb
imul
push
dec
cmp
int3
push
(bad)
in
ins
out
push
movs
jecxz
imul
dec
popf
dec
cmps
sub
cld
inc
jae
fsub
shr
jmp
mov
jno
mov
jmp
fs
sbb
mov
jle
cmps
pop
cmp
call
iret
push
xchg
jg
sub
add
cmc
cwde
cmp
stos
mov
dec
popa
aad
call
das
pop
push
inc
ret
dec
pop
xor
push
inc
mov
das
or
mov
je
into
dec
add
sar
dec
pusha
outs
fmul
call
dec
inc
out
push
adc
jbe
out
mov
cmp
push
(bad)
in
dec
addr16
push
inc
fsub
jnp
push
test
rcr
xor
pop
push
daa
rep
int3
sahf
add
xchg
ficomp
lds
loop
rcl
and
xchg
jno
es
ins
jno
cld
scas
sub
leave
lea
jecxz
jae
sbb
sbb
mov
xchg
xchg
dec
lods
xor
loop
pop
adc
xor
aam
and
mov
mov
mov
dec
cmc
cmps
jmp
retf
shr
xor
clc
dec
mov
cmp
jecxz
ins
pusha
lock
sahf
xor
jl
adc
cmc
dec
lds
mov
outs
pop
sbb
jmp
sbb
fs
cmp
jnp
push
push
mov
add
jns
jno
call
ret
js
push
pop
xchg
xor
xchg
ds
addr16
and
sub
arpl
icebp
stos
mov
jno
cli
or
mov
push
out
ss
jle
fwait
sub
(bad)
push
imul
clc
sbb
cld
mov
shr
xchg
inc
xchg
mov
push
cmps
(bad)
jmp
ret
jb
adc
xchg
ins
sub
addr16
(bad)
push
jecxz
das
sbb
daa
iret
sbb
cmp
inc
leave
ror
fiadd
psrld
cs
and
test
pop
aam
mov
inc
dec
push
pop
jo
daa
push
inc
jl
pop
mov
(bad)
cmc
dec
or
push
push
hlt
fbstp
push
aam
bswap
popa
clc
mov
(bad)
sub
mov
jb
jmp
inc
aas
arpl
(bad)
mov
rol
pop
scas
mov
jb
fxch
pop
out
aad
aam
cmc
mov
les
xchg
xor
adc
add
scas
mov
adc
and
xor
xchg
into
outs
rcr
add
jno
aad
cdq
mov
std
mov
mov
jmp
inc
in
cwde
mov
jecxz
and
idiv
and
sahf
dec
pop
ror
les
pop
push
sub
inc
bswap
fisttp
dec
sub
lahf
iret
movs
call
pop
repnz
xor
shl
(bad)
sub
mov
push
sub
add
mov
out
nop
and
test
cmp
mov
scas
inc
icebp
sub
xchg
into
movs
iret
arpl
push
scas
mov
repz
(bad)
push
adc
cld
inc
sbb
cli
and
mov
mov
add
dec
movs
sub
and
xchg
daa
aaa
call
add
in
mov
inc
jo
int
jae
sub
not
sub
xchg
sar
jge
xor
add
xchg
add
xor
iret
(bad)
mov
mov
sbb
movs
nop
scas
cld
ss
fimul
std
and
push
jnp
mov
(bad)
sub
loopne
loope
xchg
xchg
jne
push
xchg
xchg
(bad)
out
and
xor
test
icebp
or
add
fiadd
clc
adc
and
cmps
in
sbb
mov
push
dec
push
cmp
or
add
or
xchg
mov
lods
outs
pushf
xchg
test
jae
add
sub
or
fmul
sub
mov
enter
imul
inc
jno
sub
sbb
(bad)
imul
pop
test
mov
inc
cmp
rol
jmp
(bad)
sub
jmp
outs
addr16
dec
pop
and
mov
cmc
xor
or
add
lock
jmp
out
inc
nop
mov
test
dec
push
inc
add
outs
mov
fidiv
adc
popf
dec
test
sub
loope
jp
add
mov
ss
(bad)
data16
add
mov
test
sub
loopne
out
jns
rcl
fs
cli
(bad)
retf
dec
mov
mov
jp
cmp
cmp
xchg
xor
dec
enter
ret
mov
add
dec
fstp
xchg
(bad)
int3
xor
cmp
cmp
sbb
inc
xchg
or
pop
lds
jmp
test
jb
hlt
xchg
xor
loop
aas
add
daa
jp
jae
movs
loopne
and
sbb
in
gs
mov
pusha
sub
es
fdivr
mov
mov
pop
call
call
push
js
repnz
rcl
adc
ja
or
jmp
jmp
popa
js
fdiv
sbb
pop
mov
cmp
jns
inc
pop
cld
cs
movs
inc
aam
inc
fdiv
adc
ja
in
pop
js
sbb
dec
cli
loope
xbegin
jb
mov
(bad)
repz
stos
dec
div
aas
test
je
push
jnp
es
cmps
pop
out
(bad)
mov
(bad)
aas
add
mov
add
adc
xchg
xchg
xor
fimul
inc
inc
xchg
mov
cs
mov
in
loopne
mov
loopne
call
rcl
mov
sub
push
xor
nop
(bad)
dec
xchg
pop
xlat
and
jno
outs
nop
and
fsub
push
pop
lods
(bad)
mov
cmp
into
push
arpl
cmp
shl
sub
lock
lahf
daa
mov
push
push
test
jp
adc
dec
add
lods
pop
aaa
(bad)
data16
fwait
retf
imul
mov
fisttp
xchg
mov
mov
or
push
imul
cmp
fwait
imul
add
xchg
pop
xchg
jbe
scas
xor
in
inc
daa
pop
das
xchg
push
xchg
shr
(bad)
lahf
ret
movs
into
mov
pop
xlat
dec
fcos
push
jmp
cs
jnp
jl
and
jmp
into
adc
mov
xor
mov
dec
jae
mov
adc
cmps
cmps
mov
mov
clc
push
xchg
test
test
out
sub
jmp
je
dec
movs
aas
ins
xlat
mov
test
sbb
and
lea
xlat
xor
lea
cmp
mov
stos
adc
or
mov
mov
retf
mov
jb
hlt
xor
popf
aam
cmp
aas
aam
adc
or
xlat
bound
or
enter
dec
loopne
inc
add
add
and
call
cdq
jb
out
mov
dec
iret
xor
sub
pushf
call
cs
test
stos
out
add
bound
(bad)
adc
pop
jnp
inc
in
adc
cmp
push
adc
imul
pusha
jo
pop
fcomp
lods
pop
mov
and
mov
or
or
iret
jbe
shl
imul
add
ss
iret
mov
push
cmp
out
jmp
mov
and
addr16
xor
retf
popf
dec
adc
mov
mov
aad
push
dec
jne
add
inc
cmps
rcl
mov
pop
int
scas
jmp
(bad)
dec
adc
push
pop
lods
in
les
iret
cmp
jp
add
adc
push
test
xor
jle
xchg
loopne
inc
pop
nop
pop
sub
mov
fadd
mov
(bad)
xor
dec
jno
sbb
dec
shl
jl
getsec
push
xchg
mov
cwde
jno
sub
mov
imul
leave
jl
loope
inc
xor
mov
mov
sub
test
push
inc
repnz
aas
cli
xchg
inc
cmp
je
out
stos
or
sub
adc
pop
xor
ins
adc
cwde
mov
mov
dec
(bad)
movs
push
les
sti
and
(bad)
and
arpl
sub
mov
test
sbb
sub
dec
iret
icebp
movs
jl
mov
ret
dec
int3
or
push
sub
(bad)
hlt
addr16
inc
jb
lods
dec
loopne
sbb
jnp
pop
scas
jle
es
mov
sub
inc
ins
jmp
push
ror
call
xor
ficom
or
cs
test
xlat
push
cmp
lods
repz
xor
scas
or
xchg
in
mov
push
jo
dec
(bad)
fistp
pop
mov
sbb
inc
dec
push
fwait
cmp
cmp
cmp
neg
and
mov
jge
daa
cmps
lds
data16
cld
mov
mov
in
enter
mov
mov
add
in
jge
sub
jae
cmp
(bad)
jns
mov
push
sub
cdq
es
cmp
hlt
fidivr
xchg
(bad)
leave
cmps
dec
xor
mov
popf
icebp
and
pusha
xor
or
test
in
cmp
inc
cmp
ins
jne
adc
clc
data16
push
(bad)
(bad)
fistp
lea
fisubr
repnz
and
or
cld
or
repz
sub
iret
fsubr
xchg
jmp
mov
loope
inc
cmp
cs
jae
adc
nop
call
sbb
test
aaa
xlat
push
in
fisubr
cmps
inc
push
mov
ins
loopne
pop
xor
cmp
ins
jmp
dec
mov
sub
scas
jb
gs
(bad)
xlat
dec
pop
iret
inc
sbb
fs
mov
xlat
mov
gs
pop
dec
aam
jno
cmps
jmp
pop
push
sahf
mov
es
xor
in
into
cs
sbb
xchg
mov
lock
mov
test
movs
pop
jmp
ret
(bad)
sbb
pop
iret
out
add
cmps
std
xor
jg
cdq
mov
mov
cmp
push
call
hlt
pop
neg
retf
fwait
ja
cli
push
adc
jno
xor
or
cmps
jmp
mov
retf
inc
and
fndisi(8087
repz
fbstp
int3
cmp
fwait
sbb
dec
jge
jae
outs
push
sub
test
push
jnp
add
lods
sti
sbb
js
iret
inc
cmp
cmp
xor
or
stos
sbb
mov
jmp
add
xchg
mov
test
in
out
ja
rcl
jae
cmp
jp
mov
retf
inc
add
and
pop
call
dec
cmps
sar
(bad)
dec
aam
shl
mov
(bad)
sti
sbb
xchg
pop
lock
(bad)
or
pop
or
cmp
gs
call
loop
or
into
div
inc
rol
adc
fisub
cmp
inc
mov
jbe
dec
jmp
clc
int3
inc
jno
fild
(bad)
lock
das
retf
in
out
mov
(bad)
aam
xor
pop
cdq
or
in
xor
jmp
fidivr
outs
ja
and
dec
(bad)
stc
fdiv
pop
fild
sbb
fs
add
imul
mov
popf
mov
jp
push
sbb
or
(bad)
mov
sbb
(bad)
mov
fild
retf
mov
jmp
and
sbb
xchg
add
pop
mov
and
inc
mov
scas
jge
push
sbb
mov
push
pop
dec
or
movs
mov
not
cmp
or
ret
bound
or
mov
push
mov
call
dec
sub
outs
cmp
loopne
bound
ins
jp
movs
cmp
adc
push
popa
lea
aaa
adc
jl
sbb
pop
or
jge
mov
jno
sub
adc
aam
sub
and
cmp
inc
cmp
mov
sahf
and
test
lock
mov
inc
loopne
jp
test
loope
lock
add
out
movntq
pop
or
inc
sub
push
push
sbb
dec
iret
(bad)
pop
xchg
adc
in
adc
mov
push
loop
neg
inc
inc
cdq
lds
cmp
sbb
addr16
sbb
ss
rcl
das
bound
je
cmp
and
loope
jnp
std
int3
cmp
les
push
mov
mov
push
pop
dec
mov
in
cmc
pop
inc
xchg
pop
pop
cmc
push
out
scas
loope
lahf
fadd
add
or
ror
(bad)
outs
in
icebp
dec
lods
pop
fisttp
inc
in
pusha
inc
mov
mov
mov
pop
movs
jmp
pushf
repz
test
outs
pop
mov
fdivr
dec
lahf
lahf
sbb
dec
push
data16
push
mov
es
imul
mov
xchg
int3
push
call
nop
test
pop
mov
js
mov
fld
mov
mov
fnsave
mov
xor
(bad)
shl
cmp
jmp
add
jo
xchg
mov
aaa
adc
int3
jno
pop
xchg
test
jp
add
rcl
xchg
push
icebp
loopne
test
aad
dec
(bad)
xchg
jg
sub
mov
push
iret
and
lock
arpl
dec
mov
(bad)
sub
mov
sub
mov
dec
loope
push
dec
adc
push
popf
mov
pop
inc
lea
mov
sbb
gs
sub
lods
jnp
cdq
mov
xchg
or
aaa
mov
lods
fisttp
int3
sbb
xchg
or
(bad)
mov
clc
pop
(bad)
pop
cmp
inc
pusha
loope
loope
sbb
sub
hlt
ror
call
or
inc
lock
sub
dec
push
mov
jmp
lock
iret
jbe
pop
addr16
adc
jl
jle
int
push
sub
pusha
iret
pop
dec
adc
cmps
enter
imul
out
cmps
test
ret
or
clc
xor
outs
cwde
stos
dec
lahf
cdq
cmp
(bad)
push
push
jp
jo
pop
push
repz
or
not
aaa
mov
addr16
cwde
daa
push
push
je
or
retf
je
xor
xor
dec
xlat
rcr
sub
cmp
icebp
jne
or
mov
cwde
(bad)
jmp
(bad)
daa
inc
pop
fiadd
jge
les
retf
mov
sub
aam
push
int3
jg
push
enter
je
adc
and
aas
popa
pop
arpl
pop
jle
in
xor
les
int
and
dec
imul
jne
adc
push
xrelease
shrd
fldcw
scas
cmc
mov
jns
ins
inc
mov
cmp
icebp
or
stos
pop
add
mul
test
mov
cmp
dec
js
and
mov
jns
push
lods
lea
neg
cld
push
xor
lods
dec
ins
mov
pop
(bad)
push
int3
mov
aaa
stos
or
sahf
outs
mov
adc
fld
and
xchg
dec
je
arpl
mov
xchg
pop
push
sub
sub
pop
jne
jl
ror
pushf
jmp
sub
mov
dec
mov
imul
imul
cld
mov
outs
(bad)
xchg
pop
inc
xchg
and
(bad)
xor
push
aad
mov
xor
sbb
mov
les
mov
inc
dec
xor
pop
lods
cdq
out
(bad)
jbe
adc
inc
leave
icebp
adc
ss
jmp
ret
addr16
jno
mov
int3
mov
xchg
jmp
enter
sti
imul
fmul
push
add
adc
loopne
and
mov
retf
ins
les
add
stos
mov
test
in
xchg
int3
pop
data16
sub
and
popf
sub
xchg
out
jle
sub
out
test
out
cmp
(bad)
jge
push
pop
mov
push
rol
mov
push
sbb
mov
ror
xor
ins
(bad)
iret
mov
bound
dec
scas
mov
into
push
dec
push
test
aas
cmps
repnz
js
xchg
mov
mov
js
push
or
mov
and
sub
sub
push
aad
xor
mov
jp
lahf
and
mov
cmp
add
mov
cmp
or
xchg
sbb
jb
fdiv
fisttp
xor
sbb
adc
adc
xchg
scas
ja
ins
cmp
push
iret
mov
bound
mov
pop
jb
test
add
inc
cmp
jge
xchg
mov
push
dec
or
mov
and
mov
mov
dec
xchg
hlt
sub
mov
scas
cdq
jo
dec
ds
sti
fwait
sub
movs
xchg
cmc
adc
sbb
ret
int3
js
jmp
pop
outs
xor
dec
mov
sti
repnz
in
push
neg
out
bound
std
and
mov
fimul
shl
addr16
das
leave
mov
movs
imul
sbb
cmp
push
gs
mov
stc
add
imul
iret
ror
mov
call
bound
pop
inc
jmp
cdq
out
and
mov
cmp
push
mov
scas
push
stc
sub
test
lea
loopne
scas
jmp
push
div
jbe
inc
lods
xchg
fwait
aad
cmps
movs
lods
(bad)
mov
lods
arpl
test
lods
int
scas
and
push
fmul
outs
jl
jae
adc
out
movs
jp
lods
popf
data16
test
mov
mov
add
ins
div
fst
movs
xchg
mov
xor
inc
rol
push
les
xchg
cwde
clc
inc
mov
xor
mov
(bad)
add
lods
dec
or
push
or
test
std
arpl
add
fbstp
pusha
cmc
jl
mov
push
jmp
hlt
or
xor
push
push
xor
popa
loope
jge
sub
jge
ret
outs
sbb
outs
dec
fbld
(bad)
in
cmp
icebp
(bad)
cmps
cmp
add
cld
f2xm1
ror
ret
out
pop
add
inc
mov
jecxz
jp
push
rcl
call
mov
jmp
sbb
jbe
cli
sub
aad
fs
and
fsubr
scas
cmp
test
mov
adc
stc
div
adc
out
push
out
mov
xor
mov
xchg
gs
push
xlat
repz
ret
sub
shl
fsub
out
mov
jno
popf
lds
mov
scas
inc
aas
in
and
dec
add
or
ret
adc
loopne
stos
(bad)
jae
ror
or
iret
jmp
pusha
popa
jo
push
popa
sub
out
test
fst
ins
mov
sbb
aam
aad
int
cld
push
push
pop
add
sbb
sbb
mov
hlt
cmp
imul
xor
(bad)
popa
icebp
sqrtps
dec
xlat
aas
lea
jmp
xchg
stos
not
dec
inc
loop
xchg
fisubr
iret
mov
imul
stos
ffree
hlt
inc
shl
cs
push
xchg
jo
jp
cmp
adc
sti
addr16
mov
out
dec
xchg
push
inc
mov
movs
mov
sbb
outs
out
cld
sub
push
pop
popa
cmps
push
mov
add
xchg
aad
aaa
call
repz
mov
repnz
pop
push
daa
dec
gs
cmp
mov
mov
arpl
std
jmp
nop
movs
jg
cmp
pop
call
clc
or
add
mov
data16
xor
push
add
stos
jl
ret
jne
push
xor
sbb
je
dec
sub
ins
imul
adc
js
neg
pop
cmc
or
mov
je
jo
ins
retf
pop
mov
rcl
xchg
gs
shl
pop
xchg
inc
and
sbb
(bad)
lods
and
fcmovu
mov
cmp
sar
push
and
fisub
sbb
fst
pop
dec
ror
cdq
cmp
cmps
test
in
jae
(bad)
cmp
jns
jb
outs
sbb
pop
mov
sbb
icebp
adc
sbb
push
jp
xor
mov
and
inc
cmp
mov
bound
dec
ins
add
jmp
outs
pop
ins
xlat
pop
add
adc
in
test
jg
push
fistp
test
icebp
push
or
xor
jp
inc
jo
push
sbb
add
fbld
sub
out
cdq
mov
mov
inc
jno
mov
shl
clc
jo
and
or
movs
jno
sbb
mov
imul
cmp
addr16
retf
inc
(bad)
inc
xchg
add
retf
xor
data16
ret
mov
jno
mov
out
pop
pop
aaa
arpl
ds
jge
mov
push
push
cmp
cwde
out
mov
icebp
es
sub
push
aas
adc
retf
mov
xor
je
popf
jno
out
das
and
popf
sub
jbe
sub
inc
loope
jmp
mov
adc
pop
aad
add
dec
add
adc
out
call
inc
jb
sar
xchg
fld
inc
inc
imul
xor
jecxz
in
in
pop
ins
adc
imul
icebp
sti
mov
dec
push
ds
fcmove
sti
sahf
pop
out
les
pop
mov
xchg
mov
ret
cmp
adc
cmp
inc
call
(bad)
stos
cmp
fdiv
mov
das
jo
mov
pop
push
xchg
pop
mov
test
repz
sub
push
fadd
je
popf
retf
sahf
inc
clc
jb
outs
scas
les
sbb
adc
push
out
in
cmps
cmps
cdq
pusha
imul
mov
xchg
in
popf
int
sub
and
xchg
loope
bound
mov
cmp
dec
mov
dec
push
inc
xchg
pop
aad
cs
xor
cwde
call
sbb
pop
(bad)
fidivr
adc
xchg
nop
scas
aad
(bad)
xchg
sub
ret
cs
xchg
hlt
pop
imul
dec
dec
call
inc
adc
sbb
cmc
in
popa
pop
adc
pop
sbb
(bad)
mov
(bad)
push
jo
adc
cld
jne
ficomp
sub
jae
inc
jne
sbb
push
fadd
je
pop
daa
sub
les
ss
adc
ins
jnp
fs
adc
cmps
mov
idiv
ins
push
or
jmp
add
fbld
dec
xor
sub
ins
sar
sub
ja
in
sbb
xor
or
ror
test
push
addr16
enter
inc
loop
mov
mov
jae
lds
out
add
stc
push
fild
rcr
fbstp
dec
jnp
leave
in
cmp
mov
push
mov
nop
fwait
add
ds
sbb
sar
call
cmc
mov
xor
xor
lea
shr
mov
jo
pop
mov
jae
xlat
and
in
popf
mov
sti
movs
lds
dec
cs
mov
test
stc
aad
ret
push
fist
into
pop
aas
jnp
mov
add
pop
and
pushf
add
aaa
sahf
mov
mov
int
or
mov
add
popf
lods
mov
(bad)
sub
movs
ds
dec
and
outs
or
or
test
lock
out
sahf
cmps
jmp
cmp
cld
push
retf
mov
enter
test
xchg
(bad)
cmp
(bad)
dec
cwde
xchg
mov
in
inc
jnp
rcl
retf
mov
mov
fidivr
lds
aaa
sahf
int3
ficom
in
xor
rcl
jnp
mov
jo
lds
jne
xchg
fwait
hlt
pusha
sbb
out
into
ins
sub
loop
sub
out
jne
add
mov
sbb
clc
shl
jb
sar
dec
cmps
push
sbb
shl
inc
adc
out
add
fs
imul
add
retf
and
dec
nop
jns
adc
aam
(bad)
js
add
jg
adc
cs
xchg
xchg
xor
xor
addr16
adc
or
gs
push
movs
clc
and
sub
out
inc
(bad)
push
hlt
push
mov
push
das
mov
cmp
daa
push
mov
div
adc
fchs
mov
call
dec
xchg
add
aaa
inc
loop
inc
mov
rcl
jecxz
mov
ins
dec
inc
std
lods
or
cld
(bad)
jb
xchg
adc
mov
jnp
xor
clc
sbb
xchg
imul
cmp
cmp
retf
dec
jo
pushf
aaa
outs
rcr
pop
sbb
jns
ror
test
push
ror
fistp
sub
in
jl
repnz
mov
pop
push
sahf
add
lock
js
pop
pushf
retf
mov
mov
aad
xchg
in
sar
lds
add
sbb
dec
ret
cmp
movs
mov
movs
add
and
sub
scas
loope
std
(bad)
sahf
adc
xor
push
sahf
jo
cmp
mov
jae
outs
jbe
sahf
loopne
test
or
jmp
test
icebp
pop
imul
mul
adc
ins
pop
cli
js
adc
sbb
xchg
push
cmp
ret
mov
sub
shr
mov
push
pop
(bad)
iret
dec
in
stos
mov
mov
cmp
stc
punpcklbw
xlat
movs
lahf
out
jecxz
xchg
test
mov
pop
punpckhdq
xchg
push
xor
(bad)
mov
add
or
dec
xchg
ss
adc
pop
dec
lahf
adc
dec
popf
fidivr
push
mov
adc
es
inc
shl
into
xor
and
call
enter
dec
jo
mov
fadd
push
fwait
sub
cs
push
pop
dec
sbb
retf
mov
fcmovnbe
mov
int
fwait
call
rcl
popf
mov
adc
mov
out
daa
adc
jnp
jg
xor
mov
fs
push
loope
icebp
sub
scas
xchg
movs
jge
mov
shl
fs
cmc
pop
adc
lods
enter
mov
push
pop
mov
mov
cmc
sbb
cs
push
loop
stos
sbb
sahf
call
in
rcl
cwde
vmovsd
mov
rcl
jmp
mov
push
fimul
sub
xchg
push
fdiv
imul
inc
jl
call
add
dec
push
cld
sub
(bad)
inc
loope
jnp
nop
sub
xchg
jle
jnp
push
push
or
push
or
dec
mov
in
call
(bad)
retf
test
mov
and
jl
jmp
aas
(bad)
rol
sbb
or
bound
je
stc
pop
cmp
xor
mov
imul
xchg
adc
js
push
sub
movs
push
dec
aad
mov
sti
mov
fcom
cmp
repz
xchg
push
dec
call
cmps
in
cmp
push
hlt
mov
retf
xchg
adc
add
push
mov
enter
add
push
arpl
fsubr
add
int
lds
arpl
in
jmp
pop
lods
test
push
lods
add
(bad)
stc
test
sub
fwait
repnz
dec
push
(bad)
sti
mov
jnp
repz
in
adc
adc
pushf
xchg
imul
pop
ror
sbb
mov
dec
or
mov
addr16
dec
lahf
ret
xor
aad
leave
add
and
shr
ss
ret
stc
lods
pop
xchg
(bad)
xor
mov
gs
inc
jne
icebp
ins
cmp
cmp
cwde
loope
mov
sti
dec
retf
mov
call
adc
outs
xchg
outs
xchg
pushf
inc
cmps
dec
test
ret
rcl
ds
mov
sbb
scas
repz
rcr
fimul
sahf
in
and
sahf
mov
or
mov
mov
or
inc
jnp
push
out
les
or
pop
lds
mov
bound
movs
push
ror
(bad)
dec
out
fdiv
sbb
jmp
mov
test
dec
xor
lods
ins
jmp
cmps
arpl
xchg
test
add
gs
fisub
mov
add
mov
sbb
or
ror
and
mov
pop
push
sbb
aaa
outs
daa
das
dec
ret
jno
lds
ret
outs
add
nop
sbb
add
aas
adc
xor
and
xchg
out
mov
fstp
aaa
repnz
and
push
gs
dec
mov
add
nop
cmp
xchg
clc
mov
cmps
retf
xchg
add
sar
sub
out
stc
or
push
cmp
cmp
xor
jbe
adc
sbb
mov
ret
sti
adc
fiadd
mov
jo
in
pop
dec
sahf
sub
inc
dec
jns
dec
pop
mov
push
pop
xchg
(bad)
shl
(bad)
fst
loopne
jmp
and
mov
dec
cmp
stos
ret
popf
add
addr16
dec
jne
add
fisubr
jge
push
test
test
call
mov
push
add
inc
push
jno
xlat
jno
mov
and
cmp
movs
xor
sub
aaa
cmp
stos
imul
jae
xchg
jnp
fdivr
bound
ss
data16
stos
mov
cwde
es
gs
mov
jp
test
cmp
(bad)
cmp
and
jl
cmps
add
test
ret
int
jecxz
xchg
mov
pop
dec
inc
mov
jle
mov
lds
test
pop
push
mov
pop
shl
sub
push
sub
cmps
(bad)
mov
fwait
shl
(bad)
dec
jmp
add
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
lea
add
mov
lea
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
lea
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
xchg
push
mov
push
push
push
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
lea
mov
imul
add
mov
mov
cmp
cmove
mov
jmp
lea
mov
imul
add
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
sub
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
shl
add
mov
mov
jmp
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
shl
add
mov
mov
jmp
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmove
mov
jmp
lea
add
mov
lea
mov
sub
mov
mov
mov
mov
call
add
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
lea
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
cmp
cmovl
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
lea
mov
imul
add
mov
mov
cmp
cmove
mov
jmp
lea
mov
imul
add
mov
mov
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
call
mov
mov
mov
mov
add
mov
mov
mov
shl
mov
add
shl
add
mov
mov
mov
shl
mov
mov
shl
add
add
sub
mov
add
shl
add
mov
cmp
cmove
mov
jmp
mov
lea
sub
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
shl
add
mov
mov
jmp
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
add
add
sub
sub
sub
add
mov
mov
mov
mov
add
add
sub
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setb
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
shl
add
mov
mov
jmp
mov
jmp
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
sub
add
add
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
sub
add
add
mov
mov
jmp
mov
mov
jmp
mov
mov
shl
add
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
movzx
mov
mov
mov
sub
add
add
mov
mov
movzx
mov
xor
and
xor
and
mov
xor
and
mov
mov
and
or
mov
or
xor
mov
mov
mov
mov
mov
mov
movzx
cmp
sete
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
jmp
mov
jmp
mov
mov
sub
add
add
mov
mov
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
lea
pop
pop
pop
pop
ret
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
lea
mov
imul
add
mov
mov
cmp
cmove
mov
jmp
lea
mov
imul
add
mov
mov
mov
jmp
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
mov
jmp
mov
mov
mov
movzx
mov
mov
add
add
sub
mov
mov
movzx
mov
xor
and
xor
and
mov
xor
and
and
or
or
xor
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
add
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
movzx
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
jmp
mov
mov
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
add
mov
mov
mov
call
mov
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
movzx
mov
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
movzx
mov
add
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
mov
jmp
data16
push
mov
push
push
push
sub
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
movzx
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
movzx
cmp
cmovbe
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
movzx
mov
movzx
mov
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
add
mov
mov
jmp
mov
mov
add
mov
mov
mov
add
mov
mov
movzx
mov
movzx
mov
add
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
movzx
mov
mov
sub
mov
movzx
mov
mov
mov
add
add
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
call
sub
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
call
sub
mov
mov
add
add
sub
mov
mov
mov
mov
jmp
mov
mov
add
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
xor
mov
xor
xor
or
or
xor
and
cmp
cmovne
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
mov
mov
mov
call
sub
mov
mov
add
mov
call
mov
mov
mov
mov
cmp
cmove
mov
jmp
lea
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
xor
mov
xor
and
mov
movzx
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
lea
mov
mov
mov
mov
mov
call
mov
add
mov
mov
add
mov
mov
mov
jmp
mov
mov
sub
sub
mov
mov
jmp
add
pop
pop
pop
pop
ret
mov
jmp
mov
mov
mov
xor
mov
xor
and
mov
movzx
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
shr
mov
mov
add
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
shr
movzx
mov
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
lea
mov
mov
mov
add
mov
mov
mov
xor
mov
mov
mov
mov
xor
and
movzx
mov
mov
mov
sub
sub
mov
mov
mov
add
mov
mov
mov
xor
mov
xor
and
movzx
add
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
mov
mov
and
mov
mov
or
mov
mov
mov
or
mov
xor
mov
or
xor
or
and
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
add
mov
mov
xor
mov
mov
xor
mov
mov
xor
mov
mov
mov
mov
or
mov
or
xor
and
movzx
movzx
mov
shr
xor
mov
xor
xor
or
or
xor
and
mov
movzx
sub
sub
mov
mov
mov
add
mov
mov
mov
xor
mov
xor
and
movzx
add
mov
mov
mov
call
mov
mov
jmp
mov
mov
lea
mov
mov
mov
mov
mov
add
mov
mov
xor
mov
mov
xor
mov
mov
xor
mov
mov
mov
mov
or
mov
or
xor
and
movzx
movzx
mov
xor
mov
xor
xor
or
or
xor
and
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
add
mov
mov
xor
mov
xor
mov
xor
or
or
xor
and
movzx
add
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
mov
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
sub
add
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
add
pop
pop
pop
pop
ret
mov
mov
mov
sub
add
shr
mov
mov
add
mov
mov
jmp
mov
jmp
mov
mov
lea
mov
mov
mov
add
mov
mov
xor
mov
xor
mov
mov
xor
mov
mov
or
mov
or
xor
and
movzx
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
add
mov
mov
xor
mov
xor
mov
xor
or
or
xor
and
movzx
add
mov
mov
mov
mov
call
mov
mov
jmp
mov
jmp
mov
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
mov
xor
mov
xor
and
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
mov
or
and
or
mov
mov
jmp
mov
mov
mov
shr
mov
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmovl
mov
jmp
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
add
mov
mov
add
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
add
add
sub
mov
mov
mov
jmp
data16
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
cmp
cmovb
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
add
mov
mov
add
mov
mov
mov
call
mov
mov
mov
add
mov
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
add
add
sub
mov
mov
jmp
mov
mov
add
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
movzx
xor
mov
xor
xor
or
or
xor
and
cmp
cmovne
mov
mov
jmp
mov
mov
add
mov
mov
mov
call
mov
jmp
mov
mov
mov
mov
movzx
xor
mov
xor
and
cmp
cmovne
mov
jmp
mov
mov
mov
mov
sub
sub
add
add
mov
mov
mov
add
mov
mov
mov
mov
mov
call
mov
jmp
mov
mov
add
mov
mov
mov
mov
mov
mov
call
mov
mov
cmp
cmovl
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
mov
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
call
sub
mov
mov
jmp
mov
mov
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
jmp
mov
mov
mov
add
mov
mov
add
mov
mov
mov
call
mov
add
mov
add
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
and
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
and
mov
mov
cmp
setl
and
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
jg
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
mov
sub
mov
je
jmp
jmp
mov
mov
mov
mov
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
and
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
mov
sub
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
shl
mov
sub
sub
shl
sub
mov
call
add
mov
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
mov
shl
sub
mov
call
add
mov
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
sete
and
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
add
mov
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
cmp
sete
and
movzx
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
cmp
cmove
mov
jmp
mov
mov
mov
mov
mov
mov
mov
cmp
cmova
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
cmp
seta
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
mov
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
cmp
setne
and
mov
mov
mov
sub
mov
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovne
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
cmovne
mov
jmp
mov
mov
mov
cmp
setne
and
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
cmovne
mov
jmp
mov
mov
mov
test
cmovne
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
and
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
mov
mov
call
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
mov
mov
call
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
call
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
shl
sub
add
add
shl
sub
mov
call
add
mov
mov
mov
mov
mov
jmp
mov
mov
shl
sub
mov
call
add
mov
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
mov
mov
mov
mov
mov
add
sub
mov
mov
mov
call
add
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
jmp
mov
jmp
mov
mov
sub
mov
call
add
mov
jmp
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
cmp
jge
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
movzx
cmp
setge
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
movzx
cmp
setge
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
add
add
sub
mov
movzx
sub
add
mov
mov
jmp
mov
mov
movzx
cmp
jl
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
movzx
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
cmp
setl
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
sub
add
mov
movzx
mov
shl
shl
mov
mov
sub
add
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
sub
sub
mov
jmp
mov
cmp
jne
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
add
pop
pop
pop
pop
ret
mov
mov
mov
jmp
jmp
jmp
jmp
mov
mov
mov
add
add
sub
mov
movzx
sub
add
mov
mov
jmp
jmp
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
movzx
mov
shl
mov
mov
mov
shl
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
jmp
nop
push
mov
push
push
push
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
mov
mov
xor
mov
mov
and
mov
mov
mov
mov
and
mov
and
mov
mov
and
mov
mov
mov
or
mov
or
xor
mov
or
xor
mov
or
and
or
test
mov
mov
mov
mov
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
mov
sub
add
mov
mov
mov
mov
mov
mov
shl
mov
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
sete
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
mov
cmp
setl
mov
xor
mov
xor
mov
mov
xor
mov
mov
and
mov
mov
mov
mov
and
mov
and
mov
mov
and
mov
mov
mov
or
mov
or
xor
mov
or
xor
mov
or
and
or
test
mov
mov
mov
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
cmp
sete
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jne
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
cmp
mov
jbe
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
cmp
setl
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
mov
jmp
mov
test
jne
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
add
add
sub
mov
jmp
mov
cmp
jge
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovne
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
shl
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jge
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
add
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
cmp
mov
je
mov
mov
mov
cmp
setb
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
cmp
jb
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
cmp
jne
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
jmp
mov
cmp
jne
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
jmp
mov
mov
mov
mov
add
sub
sub
add
mov
mov
mov
mov
mov
sub
sub
add
cmp
jge
mov
mov
mov
mov
mov
sub
add
mov
cmp
jge
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
jge
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
add
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
cmp
mov
jbe
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
cmp
setl
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
mov
jmp
mov
test
jne
jmp
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
sub
add
add
mov
jmp
mov
cmp
jge
mov
cmp
jne
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
cmp
jb
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
xor
xor
xor
or
or
xor
and
mov
mov
mov
mov
mov
mov
shl
shl
add
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
setb
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
mov
movzx
sub
sub
mov
mov
mov
mov
add
mov
mov
mov
mov
add
add
sub
mov
mov
xor
xor
xor
or
or
xor
and
mov
mov
shl
mov
movzx
mov
mov
sub
sub
add
mov
mov
mov
sar
sub
add
add
imul
shl
add
mov
mov
mov
cmp
jl
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
cmp
jb
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
movzx
mov
mov
mov
mov
mov
shl
mov
mov
xor
mov
xor
and
mov
mov
mov
mov
add
mov
shl
add
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
sub
mov
mov
mov
mov
shl
mov
mov
cmp
je
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
mov
sub
add
mov
mov
mov
mov
mov
add
add
sub
add
add
sub
mov
mov
cmp
sete
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
jmp
jmp
jmp
mov
cmp
jl
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
cmp
setl
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
sub
add
add
mov
mov
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
cmp
jne
mov
mov
mov
cmp
jge
mov
mov
jmp
mov
cmp
jge
mov
mov
sub
sub
add
mov
jmp
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
setb
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
add
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
shl
add
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
setb
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
cmp
jne
mov
mov
jmp
mov
mov
mov
cmp
jae
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
cmp
jb
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
cmp
jne
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
add
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
and
mov
mov
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
mov
sub
mov
sub
add
mov
sub
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
cmp
jae
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
sub
sub
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
mov
cmp
setb
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
sub
add
add
mov
mov
mov
mov
add
mov
mov
shl
shl
add
mov
mov
mov
mov
mov
jmp
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
setb
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
sub
sub
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
sub
add
add
mov
mov
jmp
mov
mov
mov
sub
sub
mov
cmp
jne
mov
mov
mov
mov
mov
mov
mov
shl
mov
mov
sub
sub
add
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
cmp
jge
mov
mov
mov
sub
sub
mov
mov
mov
add
mov
cmp
mov
jge
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
mov
jmp
mov
mov
jmp
mov
shl
shl
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
setb
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
sub
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
add
add
sub
mov
mov
jmp
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
cmp
jne
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
sub
add
mov
cmp
setge
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sar
sub
add
mov
mov
mov
xor
mov
xor
and
mov
and
xor
or
mov
mov
cmp
jge
mov
mov
mov
mov
mov
shl
mov
mov
mov
add
mov
shl
add
mov
mov
add
sub
sub
shl
add
add
mov
mov
jmp
mov
mov
mov
sub
add
mov
mov
cmp
jae
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
shr
mov
mov
mov
shl
mov
mov
mov
cmp
jb
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
xor
mov
xor
xor
mov
and
and
mov
and
mov
and
or
or
xor
or
xor
mov
or
and
or
mov
mov
jmp
mov
mov
add
add
sub
mov
cmp
jne
mov
mov
add
mov
mov
mov
mov
shl
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
shl
add
mov
mov
mov
cmp
jae
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
shr
mov
mov
movzx
imul
mov
mov
mov
mov
cmp
jae
mov
mov
mov
mov
mov
mov
mov
movzx
sub
sub
add
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
shl
mov
jmp
mov
mov
mov
mov
mov
mov
sub
add
mov
mov
mov
mov
sub
add
mov
mov
mov
movzx
sar
mov
movzx
add
sub
sub
mov
mov
mov
mov
mov
add
add
sub
add
add
sub
mov
mov
mov
mov
mov
mov
and
xor
or
mov
mov
mov
mov
shl
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
sub
sub
mov
cmp
setne
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
cmp
jne
mov
mov
jmp
jmp
mov
mov
add
add
sub
mov
mov
mov
mov
cmp
jbe
mov
mov
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
add
sub
sub
mov
cmp
seta
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
cmp
setae
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
add
add
mov
mov
cmp
jne
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
sub
mov
sub
mov
mov
mov
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
cmp
mov
je
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
cmp
setb
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
mov
jmp
mov
test
jne
jmp
jmp
mov
cmp
jae
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
mov
and
and
mov
mov
and
and
mov
mov
or
mov
or
xor
or
xor
or
and
or
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
mov
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
add
sub
sub
add
mov
mov
sub
add
mov
cmp
setl
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
mov
jne
jmp
mov
test
jne
jmp
mov
mov
jmp
mov
mov
mov
mov
mov
cmp
jge
mov
mov
mov
mov
sub
sub
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
jmp
mov
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
mov
mov
mov
sub
add
add
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
mov
sub
mov
add
imul
and
cmp
sete
cmp
setl
mov
and
xor
or
test
jne
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
sub
sub
imul
and
cmp
sete
cmp
setl
mov
xor
mov
xor
xor
mov
and
and
mov
and
and
or
or
xor
or
xor
or
and
or
test
jne
jmp
jmp
mov
mov
lea
pop
pop
pop
pop
ret
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
call
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
shl
mov
sub
add
mov
mov
mov
mov
mov
shl
sub
sub
add
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
jmp
jmp
jmp
jmp
mov
mov
add
add
sub
mov
jmp
jmp
jmp
mov
mov
sub
sub
mov
mov
mov
mov
mov
jmp
mov
mov
add
mov
mov
jmp
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
mov
mov
xor
mov
xor
and
mov
mov
mov
mov
mov
mov
shl
shl
add
mov
shl
add
mov
mov
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
jmp
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
movzx
sar
mov
movzx
mov
sub
add
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
add
add
sub
mov
mov
jmp
jmp
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
mov
sub
add
sub
mov
mov
mov
mov
jmp
mov
mov
sub
sub
add
mov
jmp
mov
mov
mov
mov
mov
add
sub
sub
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
add
mov
mov
shl
add
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
movzx
mov
sub
add
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
jmp
mov
mov
mov
mov
mov
sub
add
add
mov
mov
mov
mov
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
jmp
mov
mov
mov
mov
mov
mov
mov
movzx
add
sub
sub
sar
mov
movzx
add
add
sub
mov
mov
mov
mov
mov
mov
jmp
mov
mov
mov
cmp
cmovl
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
mov
sub
sub
add
mov
mov
mov
movzx
sar
mov
movzx
sub
add
mov
mov
mov
mov
add
mov
mov
jmp
mov
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
xor
mov
xor
xor
mov
and
and
mov
mov
and
mov
mov
and
or
mov
or
xor
or
xor
or
and
or
mov
mov
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
jmp
jmp
mov
mov
shr
mov
mov
movzx
imul
mov
mov
jmp
mov
mov
sub
sub
add
mov
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
jmp
mov
mov
mov
mov
jmp
mov
mov
mov
sub
sub
mov
jmp
jmp
mov
mov
mov
mov
add
add
sub
mov
jmp
mov
mov
mov
mov
jmp
jmp
mov
mov
mov
mov
add
sub
sub
mov
mov
jmp
mov
mov
mov
mov
mov
sub
sub
mov
jmp
mov
mov
mov
sub
add
add
mov
mov
mov
mov
mov
sub
mov
sub
mov
mov
mov
mov
jmp
jmp
mov
mov
shl
mov
mov
mov
shl
mov
mov
mov
add
mov
movzx
mov
and
xor
or
mov
jmp
mov
mov
mov
mov
add
add
sub
sub
mov
mov
sub
sub
add
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
mov
sub
add
add
mov
jmp
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
sub
sub
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
lea
sub
sbb
not
and
mov
and
cmp
jb
mov
pop
xchg
mov
mov
ret
sub
test
jmp
push
mov
cmp
je
push
push
push
call
test
jne
push
call
mov
call
push
call
pop
mov
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
push
mov
mov
mov
mov
mov
add
cmp
jbe
cmp
jb
bt
jae
rep
jmp
cmp
jb
mov
xor
test
jne
bt
jb
bt
jae
test
jne
test
jne
bt
jae
mov
sub
lea
mov
lea
bt
jae
movq
sub
lea
movq
lea
test
je
bt
jae
movdqa
lea
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
jmp
movdqa
lea
lea
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
jmp
movdqa
lea
mov
movdqa
sub
movdqa
movdqa
lea
cmp
movdqa
palignr
movdqa
movdqa
palignr
movdqa
movdqa
palignr
movdqa
lea
jge
lea
cmp
jl
movdqu
sub
lea
movdqa
lea
jmp
bt
jae
mov
sub
lea
mov
lea
bt
jae
movq
sub
lea
movq
lea
mov
jmp
test
jne
shr
and
cmp
jb
rep
jmp
nop
mov
mov
sub
jb
and
add
jmp
jmp
nop
jmp
nop
in
jnp
add
jl
add
dec
add
ror
inc
add
add
jmp
add
add
cmp
jb
rep
jmp
lea
and
mov
mov
mov
shr
mov
add
add
cmp
jb
rep
jmp
nop
and
mov
mov
add
shr
add
cmp
jb
rep
jmp
lea
mov
jl
add
dec
add
dec
add
dec
add
inc
(bad)
in
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
fdivr
loopne
dec
add
jl
add
jge
add
pop
ret
nop
mov
mov
mov
pop
pop
ret
nop
mov
mov
mov
mov
mov
pop
pop
ret
lea
mov
mov
mov
mov
mov
mov
mov
pop
pop
ret
nop
lea
lea
test
jne
shr
and
cmp
jb
std
rep
cld
jmp
mov
neg
jmp
lea
mov
mov
cmp
jb
and
sub
jmp
jmp
nop
js
dec
add
dec
add
mov
sub
shr
sub
cmp
jb
std
rep
cld
jmp
lea
mov
and
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
nop
mov
and
mov
mov
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
lea
sbb
add
jle
add
jle
add
jle
add
jle
add
dec
add
dec
add
dec
add
inc
(bad)
sbb
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
je
dec
add
add
dec
add
pop
ret
nop
mov
mov
mov
pop
pop
ret
lea
mov
mov
mov
mov
mov
pop
pop
ret
nop
mov
mov
mov
mov
mov
mov
mov
pop
pop
ret
lea
push
mov
and
test
jne
mov
and
shr
je
lea
nop
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
lea
lea
dec
jne
test
je
mov
shr
test
je
lea
movdqa
movdqa
lea
lea
dec
jne
and
je
mov
shr
je
mov
mov
lea
lea
dec
jne
mov
and
je
mov
mov
inc
inc
dec
jne
lea
pop
pop
pop
ret
lea
jmp
int3
int3
int3
mov
sub
sub
push
mov
mov
and
je
mov
mov
inc
inc
dec
jne
shr
je
mov
mov
lea
lea
dec
jne
pop
jmp
push
mov
push
and
push
lea
push
push
push
call
mov
add
test
jne
cmp
je
call
test
je
call
mov
mov
mov
pop
leave
ret
call
jmp
push
push
call
call
movzx
push
call
pop
mov
cmp
je
xor
jmp
mov
cmp
jne
mov
cmp
jne
xor
cmp
jbe
cmp
setne
mov
call
test
jne
push
call
pop
call
test
jne
push
call
pop
call
and
call
test
jns
push
call
pop
call
mov
call
mov
call
test
jns
push
call
pop
call
test
jns
push
call
pop
push
call
pop
test
je
push
call
pop
call
push
push
push
push
call
mov
mov
test
jne
push
call
call
jmp
mov
mov
mov
mov
push
push
call
pop
pop
ret
mov
mov
mov
cmp
jne
push
call
call
mov
mov
call
ret
push
mov
cmp
jne
call
push
call
push
call
pop
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
mov
test
je
movzx
bt
jae
mov
push
mov
rep
jmp
mov
cmp
jl
bt
jb
push
mov
cmp
jb
neg
and
je
sub
mov
add
sub
jne
mov
shl
add
mov
shl
add
mov
and
shr
je
rep
test
je
mov
add
sub
jne
mov
pop
ret
mov
ret
call
mov
imul
add
mov
shr
and
mov
ret
push
mov
push
mov
cmp
ja
push
push
mov
test
jne
call
push
call
push
call
mov
pop
pop
test
je
mov
jmp
xor
inc
push
push
push
call
mov
test
jne
push
pop
cmp
je
push
call
pop
test
jne
jmp
call
mov
call
mov
mov
pop
pop
jmp
push
call
pop
call
mov
xor
pop
pop
ret
call
test
jne
mov
ret
add
ret
push
mov
push
call
mov
push
mov
call
pop
mov
call
mov
pop
pop
ret
call
test
jne
mov
ret
add
ret
push
mov
mov
xor
cmp
je
inc
cmp
jb
lea
cmp
ja
push
pop
pop
ret
lea
push
pop
cmp
sbb
and
add
pop
ret
mov
pop
ret
call
xor
test
setne
mov
mov
ret
push
mov
and
sub
push
xor
inc
or
push
call
test
je
xor
mov
mov
cpuid
push
mov
push
lea
or
mov
mov
mov
mov
test
mov
je
or
mov
mov
test
je
or
mov
mov
push
xor
pop
cpuid
lea
mov
mov
mov
mov
test
mov
je
or
mov
xor
xor
cpuid
lea
mov
mov
mov
mov
cmp
jne
cmp
jne
cmp
jne
xor
inc
xor
cpuid
mov
mov
mov
mov
mov
and
cmp
je
cmp
je
cmp
je
cmp
je
cmp
je
cmp
jne
or
mov
pop
pop
xor
pop
leave
ret
push
mov
push
mov
test
je
push
xor
pop
div
cmp
jae
call
mov
xor
jmp
imul
test
jne
inc
xor
cmp
ja
push
push
push
call
mov
test
jne
cmp
je
push
call
pop
test
jne
mov
test
je
jmp
mov
test
je
mov
mov
pop
pop
ret
push
mov
mov
mov
cmp
jne
cmp
jne
mov
cmp
je
cmp
je
cmp
je
cmp
je
xor
pop
ret
call
int3
push
call
pop
xor
ret
push
mov
push
call
mov
test
je
mov
push
mov
mov
cmp
je
add
lea
cmp
jb
lea
cmp
jae
cmp
je
xor
test
je
mov
test
je
cmp
jne
and
xor
inc
jmp
cmp
jne
or
jmp
mov
push
mov
mov
cmp
jne
push
pop
mov
add
and
cmp
jl
cmp
mov
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
push
push
call
pop
mov
jmp
push
and
call
pop
mov
or
pop
jmp
xor
pop
pop
pop
ret
push
push
call
mov
test
je
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
cmp
je
push
call
pop
push
call
pop
and
mov
test
je
push
call
test
jne
cmp
je
push
call
pop
mov
call
push
call
pop
mov
mov
test
je
push
call
pop
cmp
je
cmp
je
cmp
jne
push
call
pop
mov
call
push
call
pop
call
ret
mov
push
call
pop
ret
mov
push
call
pop
ret
push
call
mov
test
jne
push
call
pop
mov
pop
ret
push
push
call
push
mov
call
mov
pop
test
jne
push
push
call
mov
pop
pop
test
je
push
push
call
pop
pop
test
je
push
push
call
pop
pop
call
or
mov
jmp
push
call
pop
xor
push
call
pop
mov
pop
ret
push
push
call
mov
mov
and
xor
inc
mov
mov
push
pop
mov
mov
mov
and
push
call
pop
and
push
call
mov
call
push
call
pop
mov
mov
mov
test
jne
mov
mov
push
call
pop
mov
call
call
ret
xor
inc
mov
push
call
pop
ret
push
call
pop
ret
call
call
test
jne
call
xor
ret
push
call
pop
mov
cmp
je
push
push
push
call
mov
pop
pop
test
je
push
push
call
pop
pop
test
je
push
push
call
pop
pop
call
or
mov
xor
inc
pop
ret
call
xor
pop
ret
mov
cmp
je
push
call
or
pop
jmp
push
mov
push
lea
push
push
push
call
test
je
push
push
call
test
je
push
call
leave
ret
push
mov
push
call
pop
push
call
int3
push
mov
call
push
call
pop
push
call
int3
push
push
push
call
add
ret
push
push
push
call
add
ret
push
mov
cmp
je
push
call
pop
test
je
push
call
pop
call
push
push
call
pop
pop
test
jne
push
push
push
call
pop
mov
mov
jmp
mov
test
je
call
add
cmp
jb
cmp
pop
pop
je
push
call
pop
test
je
push
push
push
call
xor
pop
ret
push
mov
push
push
push
call
add
pop
ret
push
push
call
mov
push
call
push
call
push
call
push
call
push
call
push
call
add
pop
jmp
push
mov
push
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
mov
push
mov
xor
jmp
test
jne
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
call
pop
ret
push
call
pop
ret
push
push
call
push
call
pop
and
cmp
je
mov
mov
mov
cmp
jne
push
mov
call
mov
mov
test
je
push
call
mov
mov
mov
mov
sub
mov
cmp
jb
push
call
cmp
je
cmp
jb
push
call
mov
push
call
mov
call
push
mov
call
mov
push
call
mov
cmp
jne
cmp
je
mov
mov
mov
mov
mov
jmp
push
push
call
pop
pop
push
push
call
pop
pop
mov
call
cmp
jne
mov
push
call
pop
push
call
cmp
je
push
call
pop
ret
call
ret
push
mov
push
push
push
call
add
pop
ret
push
call
pop
cmp
je
push
call
pop
test
jne
cmp
jne
push
call
push
call
pop
pop
ret
push
mov
mov
xor
cmp
je
inc
cmp
jb
xor
pop
ret
mov
pop
ret
push
mov
sub
mov
xor
mov
push
mov
push
push
call
mov
pop
test
je
push
push
call
pop
cmp
je
push
call
pop
test
jne
cmp
je
cmp
je
push
push
push
call
add
xor
test
jne
push
push
push
mov
call
mov
test
jne
push
push
push
call
add
test
jne
push
call
inc
pop
cmp
jbe
push
call
lea
mov
sub
push
sar
push
sub
push
push
call
add
test
jne
push
push
mov
push
call
add
test
jne
push
push
push
call
add
test
jne
push
push
push
call
add
jmp
push
call
mov
test
je
cmp
je
xor
mov
mov
mov
cmp
je
inc
cmp
jb
push
lea
push
lea
push
mov
call
pop
push
lea
push
push
call
pop
mov
pop
xor
pop
call
leave
ret
push
push
push
push
push
call
int3
push
push
call
push
call
pop
xor
mov
push
push
pop
push
call
pop
pop
mov
mov
test
jne
push
lea
push
push
call
add
or
jmp
mov
mov
add
cmp
jae
mov
or
mov
and
mov
and
mov
mov
mov
mov
add
mov
mov
jmp
lea
push
call
cmp
je
mov
test
je
mov
mov
add
mov
add
mov
mov
cmp
jl
mov
mov
xor
inc
mov
cmp
jge
push
push
call
pop
pop
mov
mov
test
jne
mov
mov
mov
mov
mov
mov
cmp
jge
mov
cmp
je
cmp
je
mov
test
je
test
jne
push
call
mov
test
je
mov
sar
mov
and
shl
add
mov
mov
mov
mov
mov
mov
push
lea
push
call
inc
mov
mov
inc
mov
mov
inc
mov
add
mov
jmp
mov
add
mov
add
cmp
jae
mov
or
mov
and
mov
mov
mov
add
mov
jmp
inc
mov
mov
jmp
mov
cmp
jge
mov
shl
add
mov
cmp
je
cmp
je
movsx
or
mov
jmp
mov
test
jne
push
pop
jmp
lea
neg
sbb
add
push
call
mov
cmp
je
test
je
push
call
test
je
mov
and
cmp
jne
movsx
or
jmp
cmp
jne
movsx
or
mov
push
lea
push
call
inc
jmp
movsx
or
mov
mov
mov
test
je
mov
mov
inc
jmp
mov
call
xor
call
ret
push
call
pop
ret
push
mov
push
push
cmp
jne
call
push
push
push
push
mov
xor
push
push
mov
call
mov
mov
test
je
cmp
jne
mov
lea
push
lea
push
push
push
push
call
mov
add
cmp
jae
mov
cmp
jae
lea
cmp
jb
push
call
mov
pop
test
je
lea
push
lea
push
lea
push
push
push
call
mov
add
dec
mov
mov
xor
jmp
or
pop
pop
pop
leave
ret
push
mov
mov
push
mov
push
and
mov
mov
mov
push
mov
test
je
mov
add
mov
xor
mov
cmp
jne
xor
test
sete
inc
mov
mov
mov
jmp
inc
test
je
mov
mov
inc
mov
mov
movzx
push
inc
call
pop
test
je
inc
test
je
mov
mov
inc
inc
mov
test
je
mov
test
jne
cmp
je
cmp
jne
test
je
mov
jmp
dec
and
cmp
je
mov
cmp
je
cmp
jne
inc
jmp
cmp
je
mov
test
je
mov
add
mov
mov
inc
xor
inc
xor
jmp
inc
inc
cmp
je
cmp
jne
test
jne
cmp
je
lea
cmp
jne
mov
jmp
xor
xor
cmp
sete
mov
shr
jmp
dec
test
je
mov
inc
inc
test
jne
mov
test
je
cmp
jne
cmp
je
cmp
je
test
je
movsx
push
call
pop
test
je
test
je
mov
mov
inc
inc
inc
mov
mov
inc
jmp
test
je
inc
inc
inc
inc
jmp
test
je
mov
inc
inc
jmp
mov
pop
pop
pop
test
je
and
mov
inc
pop
ret
cmp
jne
call
push
mov
push
xor
test
jne
or
jmp
cmp
je
inc
push
call
inc
pop
add
mov
test
jne
lea
push
push
call
mov
pop
pop
mov
test
je
mov
push
cmp
je
push
call
cmp
pop
lea
je
push
push
call
pop
pop
mov
test
je
push
push
push
call
add
test
jne
add
add
cmp
jne
mov
push
call
and
and
mov
xor
pop
pop
pop
pop
ret
push
call
and
or
jmp
xor
push
push
push
push
push
call
int3
push
mov
mov
mov
pop
ret
push
mov
mov
test
js
cmp
jle
cmp
jne
mov
jmp
mov
mov
mov
pop
ret
call
mov
call
or
pop
ret
push
mov
sub
mov
and
and
push
push
mov
mov
cmp
je
test
je
not
mov
jmp
lea
push
call
mov
xor
mov
call
xor
call
xor
lea
push
call
mov
xor
lea
xor
xor
cmp
jne
mov
jmp
test
jne
mov
or
shl
or
mov
not
mov
pop
pop
leave
ret
push
push
mov
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
push
mov
mov
jmp
mov
test
je
call
add
cmp
jb
pop
pop
ret
push
mov
push
push
call
mov
xor
test
je
push
mov
cmp
je
add
cmp
jne
add
cmp
jne
push
push
push
push
sub
push
sar
inc
push
push
push
push
call
mov
test
je
push
call
mov
pop
test
je
xor
push
push
push
push
push
push
push
push
call
test
jne
push
call
pop
xor
push
call
mov
jmp
push
call
xor
pop
pop
pop
leave
ret
push
mov
mov
xor
je
push
call
pop
ret
pop
jmp
push
mov
mov
xor
push
je
call
pop
ret
call
pop
ret
push
mov
mov
xor
push
je
call
pop
ret
call
pop
ret
push
mov
mov
xor
push
push
je
call
pop
ret
call
pop
ret
push
mov
sub
lea
push
call
test
je
movzx
leave
ret
push
pop
leave
ret
push
mov
push
push
mov
test
jns
mov
xor
xor
mov
je
push
lea
push
call
cmp
jne
inc
mov
xor
test
setg
pop
leave
ret
push
push
push
call
mov
mov
push
push
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
mov
push
push
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
push
push
mov
call
xor
pop
mov
pop
ret
push
mov
push
call
pop
ret
push
mov
push
call
push
call
pop
ret
push
mov
push
call
push
call
pop
ret
push
push
xor
cmp
jne
call
mov
test
jne
mov
mov
cmp
ja
test
je
test
je
cmp
jne
xor
test
sete
mov
movzx
push
call
pop
test
je
inc
inc
jmp
cmp
ja
inc
mov
test
jne
pop
mov
pop
ret
int3
push
push
mov
mov
lea
sub
push
push
push
mov
xor
xor
push
mov
push
mov
mov
mov
lea
mov
ret
mov
mov
pop
pop
pop
pop
pop
mov
pop
push
ret
int3
int3
int3
int3
int3
int3
int3
push
mov
sub
push
mov
push
push
mov
xor
mov
mov
mov
lea
cmp
je
mov
add
xor
call
mov
mov
add
xor
call
mov
test
jne
mov
mov
mov
lea
mov
mov
mov
cmp
je
lea
lea
mov
mov
lea
mov
test
je
mov
call
mov
mov
test
js
jle
mov
cmp
jne
cmp
je
push
call
add
test
je
push
push
call
add
mov
mov
call
mov
mov
cmp
je
push
push
mov
call
mov
mov
mov
cmp
je
jmp
mov
mov
mov
cmp
jne
test
je
jmp
mov
jmp
cmp
je
push
push
mov
mov
call
mov
cmp
je
mov
add
xor
call
mov
mov
add
xor
call
mov
pop
pop
pop
mov
pop
ret
mov
add
xor
call
mov
mov
add
xor
call
mov
mov
mov
call
int3
test
jne
pxor
jmp
movd
punpcklbw
punpcklwd
pshufd
push
push
mov
and
test
jne
mov
and
shr
je
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
movdqa
lea
dec
jne
test
je
mov
shr
je
jmp
lea
movdqa
lea
dec
jne
and
je
mov
shr
je
movd
lea
dec
jne
and
je
mov
inc
dec
jne
pop
pop
ret
neg
add
sub
push
mov
and
je
mov
inc
dec
jne
shr
je
movd
lea
dec
jne
pop
jmp
push
mov
push
call
test
je
push
call
pop
test
je
xor
inc
pop
ret
xor
pop
ret
push
mov
mov
mov
pop
ret
push
mov
sub
mov
xor
mov
cmp
push
je
push
call
pop
and
push
lea
push
push
call
lea
mov
lea
add
mov
mov
mov
mov
mov
mov
mov
data16
data16
data16
data16
data16
data16
pushf
pop
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
call
mov
lea
push
call
pop
test
jne
test
jne
cmp
je
push
call
pop
mov
xor
pop
call
leave
ret
push
mov
mov
mov
pop
ret
push
mov
push
call
test
je
pop
jmp
push
push
push
push
push
call
int3
xor
push
push
push
push
push
call
add
ret
push
call
test
je
push
pop
int
push
push
mov
push
push
call
push
call
add
pop
ret
push
push
call
call
mov
test
je
and
call
jmp
xor
inc
ret
mov
mov
call
int3
push
call
mov
ret
push
mov
push
mov
cmp
jne
push
call
pop
test
jne
push
call
pop
push
call
pop
pop
ret
push
push
mov
mov
push
mov
test
je
cmp
je
push
call
push
call
and
pop
add
cmp
jl
pop
cmp
je
cmp
jne
push
call
add
cmp
jl
pop
pop
ret
push
push
call
cmp
jne
call
push
call
push
call
pop
pop
mov
cmp
jne
push
call
pop
mov
test
jne
call
mov
xor
jmp
push
call
pop
and
cmp
jne
push
push
call
mov
jmp
push
call
pop
mov
call
xor
inc
call
ret
push
call
pop
ret
push
push
mov
mov
cmp
jne
mov
push
push
add
call
add
cmp
jl
xor
pop
inc
pop
ret
push
mov
mov
push
call
pop
ret
push
mov
push
push
xor
push
push
push
call
mov
add
test
jne
cmp
jbe
push
call
lea
mov
cmp
jbe
or
cmp
jne
mov
pop
pop
pop
ret
push
mov
push
push
push
mov
xor
push
call
mov
pop
test
jne
test
je
push
call
mov
lea
mov
cmp
jbe
or
cmp
jne
pop
pop
mov
pop
pop
ret
push
mov
push
push
xor
push
push
call
mov
pop
pop
test
jne
cmp
je
cmp
jbe
push
call
lea
mov
cmp
jbe
or
cmp
jne
mov
pop
pop
pop
ret
push
mov
push
push
mov
push
mov
push
call
cmp
je
push
call
mov
test
je
push
call
cmp
je
push
call
mov
test
je
push
call
push
pop
lea
mov
cmp
je
cmp
je
push
call
mov
cmp
je
cmp
je
push
call
mov
add
dec
mov
jne
mov
add
push
call
pop
pop
pop
pop
ret
push
mov
push
push
mov
xor
mov
push
test
je
cmp
je
mov
test
je
cmp
jne
mov
test
je
cmp
jne
push
call
push
call
pop
pop
mov
test
je
cmp
jne
push
call
push
call
pop
pop
push
call
push
call
pop
pop
mov
test
je
cmp
jne
mov
sub
push
call
mov
mov
sub
push
call
mov
sub
push
call
push
call
add
mov
cmp
je
cmp
jne
push
call
push
call
pop
pop
push
pop
lea
lea
mov
cmp
je
mov
test
je
cmp
jne
push
call
push
call
pop
pop
mov
cmp
je
mov
test
je
cmp
jne
push
call
pop
mov
add
add
dec
mov
jne
push
call
pop
pop
pop
pop
pop
ret
push
mov
push
mov
test
je
push
push
mov
push
call
cmp
je
push
call
mov
test
je
push
call
cmp
je
push
call
mov
test
je
push
call
push
pop
lea
mov
cmp
je
cmp
je
push
call
mov
cmp
je
cmp
je
push
call
mov
add
dec
mov
jne
mov
add
push
call
pop
pop
mov
pop
pop
ret
push
push
call
call
mov
mov
test
je
cmp
je
call
mov
test
jne
push
call
pop
mov
call
ret
push
call
pop
and
push
lea
push
call
pop
pop
mov
mov
mov
call
jmp
mov
push
call
pop
ret
push
mov
push
mov
test
je
mov
test
je
push
mov
cmp
je
push
mov
call
pop
test
je
push
call
cmp
pop
jne
cmp
je
push
call
pop
mov
pop
jmp
xor
pop
pop
ret
cmp
jne
push
call
pop
mov
xor
ret
push
mov
push
mov
mov
mov
test
jne
call
mov
mov
mov
mov
mov
mov
mov
cmp
je
mov
test
jne
call
mov
mov
cmp
je
mov
mov
test
jne
call
mov
mov
mov
test
jne
or
mov
mov
jmp
mov
mov
mov
mov
mov
pop
pop
ret
push
mov
mov
sub
je
sub
je
sub
je
dec
je
xor
pop
ret
mov
pop
ret
mov
pop
ret
mov
pop
ret
mov
pop
ret
push
mov
sub
lea
push
call
mov
and
cmp
jne
mov
call
jmp
cmp
jne
mov
call
jmp
cmp
jne
mov
mov
mov
cmp
je
mov
and
leave
ret
push
mov
push
mov
push
push
push
xor
lea
push
push
call
xor
movzx
mov
mov
mov
mov
shl
or
lea
stos
stos
stos
mov
add
sub
mov
mov
mov
inc
dec
jne
lea
mov
mov
mov
inc
dec
jne
pop
pop
pop
pop
ret
push
mov
sub
mov
xor
mov
push
push
mov
push
lea
push
push
call
xor
mov
test
je
mov
mov
inc
cmp
jb
mov
mov
lea
jmp
movzx
movzx
jmp
cmp
jae
mov
inc
cmp
jbe
add
mov
test
jne
push
push
lea
push
push
lea
push
push
push
call
push
push
lea
push
push
push
lea
push
push
push
push
call
add
lea
push
push
push
push
push
lea
push
push
push
push
call
add
mov
movzx
test
je
or
mov
jmp
test
je
or
mov
mov
jmp
mov
inc
cmp
jb
jmp
push
lea
pop
sub
mov
mov
add
add
mov
add
cmp
ja
or
lea
jmp
cmp
ja
or
lea
mov
jmp
mov
mov
inc
lea
cmp
jb
mov
pop
pop
xor
pop
call
leave
ret
push
push
call
call
mov
mov
test
je
cmp
je
mov
test
jne
push
call
pop
mov
call
ret
push
call
pop
and
mov
mov
cmp
je
test
je
push
call
test
jne
cmp
je
push
call
pop
mov
mov
mov
mov
push
call
mov
call
jmp
mov
push
call
pop
ret
push
push
call
or
call
mov
mov
call
mov
push
call
pop
mov
cmp
je
push
call
pop
mov
test
je
mov
mov
mov
mov
rep
xor
mov
push
push
call
pop
pop
mov
mov
test
jne
mov
push
call
test
mov
jne
mov
cmp
je
push
call
pop
mov
mov
push
call
mov
test
jne
test
jne
push
call
pop
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
jge
mov
mov
inc
jmp
mov
mov
cmp
jge
mov
mov
inc
jmp
mov
cmp
jge
mov
mov
inc
jmp
push
call
test
jne
mov
cmp
je
push
call
pop
mov
push
call
mov
call
jmp
mov
push
call
pop
ret
jmp
cmp
jne
cmp
je
push
call
pop
call
mov
jmp
xor
mov
call
ret
push
mov
sub
mov
xor
mov
push
push
push
mov
call
mov
pop
mov
test
jne
push
call
pop
xor
jmp
push
xor
mov
mov
mov
cmp
je
inc
add
mov
cmp
jb
cmp
je
cmp
je
movzx
push
call
test
je
lea
push
push
call
test
je
push
lea
push
push
call
mov
xor
inc
add
mov
cmp
jbe
cmp
lea
je
mov
test
je
movzx
movzx
jmp
or
inc
cmp
jbe
add
cmp
jne
lea
mov
or
inc
dec
jne
push
call
add
mov
mov
jmp
mov
xor
movzx
mov
shl
or
lea
stos
stos
stos
jmp
cmp
je
push
call
jmp
or
jmp
push
lea
push
push
call
mov
add
imul
lea
mov
cmp
mov
je
mov
test
je
movzx
movzx
jmp
cmp
jae
mov
or
movzx
inc
cmp
jbe
add
cmp
jne
mov
inc
add
mov
cmp
jb
mov
push
mov
mov
call
add
mov
push
lea
lea
pop
mov
mov
lea
lea
dec
jne
push
call
pop
xor
pop
mov
pop
xor
pop
call
leave
ret
int3
int3
int3
int3
int3
int3
push
mov
mov
push
mov
add
push
movzx
movzx
add
xor
add
push
test
je
mov
mov
cmp
jb
mov
add
cmp
jb
inc
add
cmp
jb
xor
pop
pop
pop
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
mov
push
sub
push
push
push
mov
xor
xor
push
lea
mov
mov
mov
push
call
add
test
je
mov
sub
push
push
call
add
test
je
mov
shr
not
and
mov
mov
mov
pop
pop
pop
pop
mov
pop
ret
mov
mov
xor
cmp
sete
mov
ret
mov
mov
xor
mov
mov
pop
pop
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
push
mov
mov
mov
cmp
je
xor
pop
ret
mov
add
xor
cmp
jne
mov
cmp
sete
pop
ret
push
push
push
call
pop
pop
mov
push
call
mov
mov
test
jne
push
pop
pop
ret
and
xor
pop
ret
push
push
call
call
and
push
call
pop
mov
mov
mov
call
mov
call
ret
mov
call
ret
push
mov
push
push
push
mov
push
push
call
push
mov
call
mov
mov
cmp
jb
mov
sub
lea
cmp
jb
push
call
mov
lea
pop
cmp
jae
mov
cmp
jae
mov
mov
add
cmp
jb
push
push
call
pop
pop
test
jne
lea
cmp
jb
push
push
call
pop
pop
test
je
sar
push
lea
call
mov
push
call
lea
push
mov
call
mov
mov
jmp
xor
pop
pop
pop
leave
ret
push
mov
push
call
neg
sbb
neg
pop
dec
pop
ret
push
xor
push
call
mov
add
cmp
jb
pop
ret
push
mov
mov
mov
pop
ret
push
mov
mov
mov
pop
ret
push
call
ret
push
mov
mov
mov
mov
mov
mov
pop
ret
push
push
call
xor
mov
xor
mov
mov
cmp
jg
je
mov
push
pop
sub
je
sub
je
sub
je
sub
jne
call
mov
mov
test
jne
or
jmp
mov
mov
jmp
push
push
call
pop
pop
add
mov
mov
jmp
mov
sub
je
sub
je
dec
je
call
mov
call
jmp
mov
mov
jmp
mov
mov
jmp
mov
mov
xor
inc
mov
push
call
mov
cmp
je
test
jne
push
call
test
je
push
call
pop
and
cmp
je
cmp
je
cmp
jne
mov
mov
and
cmp
jne
mov
mov
mov
cmp
jne
mov
mov
mov
mov
add
cmp
jge
mov
imul
mov
and
inc
mov
mov
jmp
push
call
mov
mov
mov
call
cmp
jne
push
push
call
pop
jmp
mov
mov
mov
test
je
push
call
pop
ret
push
call
pop
cmp
je
cmp
je
cmp
jne
mov
mov
cmp
jne
mov
mov
xor
call
ret
push
mov
mov
mov
push
mov
cmp
je
mov
imul
add
add
cmp
jb
imul
add
cmp
jae
cmp
jne
mov
jmp
xor
pop
pop
ret
int3
int3
mov
test
je
mov
add
test
je
test
jne
add
lea
lea
mov
mov
add
xor
xor
add
test
je
mov
test
je
test
je
test
je
test
je
jmp
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
push
mov
push
push
mov
test
je
mov
test
je
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
pop
ret
mov
cmp
je
add
dec
jne
test
je
sub
movzx
mov
lea
test
je
dec
jne
xor
test
jne
mov
call
push
jmp
push
mov
push
mov
test
je
mov
test
je
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
mov
sub
movzx
mov
lea
test
je
dec
jne
xor
pop
test
jne
mov
call
push
jmp
push
mov
mov
mov
add
test
jne
sub
sar
dec
pop
ret
push
mov
mov
mov
push
test
jne
test
jne
cmp
jne
xor
jmp
test
je
mov
test
je
test
jne
xor
mov
jmp
mov
test
jne
xor
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
push
mov
mov
cmp
jne
sub
movzx
mov
lea
test
je
dec
jne
jmp
sub
movzx
mov
lea
test
je
dec
je
dec
jne
test
jne
xor
mov
test
pop
pop
jne
cmp
jne
mov
xor
push
mov
pop
jmp
xor
mov
call
push
jmp
push
mov
sub
mov
xor
mov
mov
push
mov
push
push
mov
mov
xor
push
mov
call
mov
mov
call
mov
cmp
jne
push
push
push
call
mov
test
jne
call
cmp
jne
push
call
mov
test
je
push
push
call
test
je
push
call
push
push
mov
call
push
call
push
push
mov
call
push
call
push
push
mov
call
push
call
mov
test
je
push
push
call
push
call
mov
mov
call
test
je
mov
test
je
push
call
cmp
je
push
pop
jmp
cmp
je
push
call
push
jmp
mov
mov
cmp
je
cmp
je
push
call
push
mov
call
mov
mov
test
je
test
je
call
test
je
lea
push
push
lea
push
push
push
call
test
je
test
jne
mov
or
jmp
mov
cmp
je
push
call
test
je
call
mov
test
je
mov
cmp
je
push
call
test
je
push
call
mov
mov
push
call
test
je
push
push
push
push
call
jmp
xor
mov
pop
pop
xor
pop
call
leave
ret
cmp
jne
repz
jmp
int3
int3
int3
int3
int3
push
push
push
mov
mov
mov
push
push
push
push
push
push
push
mov
xor
mov
mov
mov
mov
mov
xor
mov
cmp
je
mov
cmp
je
cmp
jbe
lea
lea
mov
mov
cmp
jne
push
mov
call
mov
mov
call
jmp
pop
add
pop
pop
pop
ret
mov
test
mov
je
mov
mov
xor
call
push
mov
push
push
push
call
add
pop
mov
mov
mov
mov
ret
push
mov
mov
push
push
push
call
add
pop
ret
push
push
push
push
mov
xor
xor
xor
xor
xor
call
pop
pop
pop
pop
ret
mov
mov
mov
push
call
xor
xor
xor
xor
xor
jmp
push
mov
push
push
push
push
push
push
push
call
pop
pop
pop
pop
ret
push
mov
push
push
push
call
add
pop
ret
mov
push
push
pop
test
jne
mov
jmp
cmp
jge
mov
mov
push
push
call
pop
pop
mov
test
jne
push
push
mov
call
pop
pop
mov
test
jne
push
pop
pop
ret
xor
mov
mov
add
lea
cmp
jge
mov
jmp
xor
pop
ret
call
cmp
je
call
push
call
and
pop
ret
push
mov
push
mov
mov
cmp
jb
cmp
ja
mov
sub
sar
add
push
call
or
pop
jmp
lea
push
call
pop
pop
ret
push
mov
mov
cmp
jge
add
push
call
mov
pop
or
pop
ret
mov
add
push
call
pop
ret
push
mov
mov
mov
cmp
jb
cmp
ja
and
sub
sar
add
push
call
pop
pop
ret
add
push
call
pop
ret
push
mov
mov
mov
cmp
jge
and
lea
push
call
pop
pop
ret
add
push
call
pop
ret
push
mov
sub
push
push
lea
call
movzx
mov
mov
test
jne
xor
cmp
je
mov
mov
movzx
and
jmp
mov
test
je
xor
inc
cmp
pop
je
mov
and
mov
leave
ret
push
mov
push
push
push
push
call
add
pop
ret
push
mov
push
mov
test
je
mov
test
je
mov
test
jne
mov
call
push
pop
mov
call
mov
pop
pop
ret
push
mov
sub
mov
mov
inc
test
je
dec
jne
pop
test
jne
mov
call
push
jmp
xor
jmp
and
ret
call
test
je
push
call
pop
test
je
push
call
test
je
push
pop
int
push
push
push
call
add
push
call
int3
push
mov
cmp
jne
push
call
pop
pop
ret
push
mov
test
jne
push
call
pop
xor
jmp
push
jmp
test
jne
inc
push
push
push
push
call
mov
test
jne
cmp
je
push
call
pop
test
je
cmp
jbe
push
call
pop
call
mov
xor
pop
pop
pop
ret
call
mov
call
push
call
pop
mov
jmp
call
mov
call
push
call
pop
mov
mov
jmp
push
mov
push
mov
test
je
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
pop
pop
ret
push
mov
push
mov
test
je
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
mov
cmp
je
push
call
pop
pop
pop
ret
push
mov
push
mov
test
je
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
push
call
push
call
push
call
push
call
push
call
push
call
push
call
add
pop
pop
ret
push
mov
push
push
mov
xor
mov
push
push
mov
push
test
jle
mov
mov
dec
cmp
je
inc
test
jne
or
mov
sub
dec
cmp
lea
jl
mov
mov
xor
test
jne
mov
mov
mov
mov
mov
xor
cmp
push
setne
push
push
push
lea
push
push
call
mov
mov
test
jne
xor
jmp
jle
push
xor
pop
div
cmp
jb
lea
cmp
ja
mov
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
mov
jmp
xor
test
je
push
push
push
push
push
push
call
test
je
mov
push
push
push
push
push
push
call
mov
add
test
je
mov
test
je
mov
test
je
cmp
jg
push
push
push
push
push
push
call
add
jmp
test
jle
push
xor
pop
div
cmp
jb
lea
cmp
ja
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
jmp
xor
test
je
push
push
push
push
push
push
call
add
test
je
xor
push
push
cmp
jne
push
push
jmp
push
push
push
push
push
push
call
mov
push
call
pop
push
call
pop
mov
lea
pop
pop
pop
mov
xor
call
leave
ret
push
mov
sub
push
lea
call
push
lea
push
push
push
push
push
push
push
push
call
add
cmp
je
mov
and
leave
ret
push
mov
mov
test
je
sub
cmp
jne
push
call
pop
pop
ret
push
mov
push
mov
xor
mov
mov
push
push
push
xor
test
jne
mov
mov
mov
mov
mov
xor
cmp
push
push
push
setne
push
lea
push
push
call
mov
test
jne
xor
jmp
jle
cmp
ja
lea
cmp
ja
call
mov
test
je
mov
jmp
push
call
mov
pop
test
je
mov
add
jmp
mov
test
je
lea
push
push
push
call
add
push
push
push
push
push
push
call
test
je
push
push
push
push
call
mov
push
call
pop
mov
lea
pop
pop
pop
mov
xor
call
leave
ret
push
mov
sub
push
lea
call
push
lea
push
push
push
push
push
push
call
add
cmp
je
mov
and
leave
ret
push
mov
cmp
jne
call
mov
call
or
pop
ret
push
push
push
call
pop
ret
push
call
pop
ret
push
mov
push
push
push
xor
mov
lea
cdq
sub
mov
sar
push
push
push
call
add
test
je
jns
lea
jmp
lea
cmp
jle
or
jmp
mov
pop
pop
pop
pop
ret
push
mov
cmp
je
push
call
pop
test
js
cmp
jae
mov
pop
ret
xor
pop
ret
push
mov
mov
xor
je
xor
push
push
push
push
push
push
push
push
push
call
pop
ret
push
push
push
push
push
push
call
pop
push
call
pop
ret
push
mov
push
mov
xor
test
je
mov
push
push
mov
push
pop
push
pop
sub
mov
jmp
push
pop
movzx
cmp
jb
cmp
ja
add
movzx
jmp
mov
movzx
cmp
jb
cmp
ja
add
movzx
add
dec
je
test
je
cmp
je
movzx
movzx
pop
sub
pop
pop
pop
ret
push
mov
mov
test
jne
call
mov
call
or
pop
ret
mov
pop
ret
push
mov
mov
cmp
jne
call
mov
jmp
test
js
cmp
jae
mov
sar
and
mov
shl
movsx
and
pop
ret
call
mov
call
xor
pop
ret
push
mov
push
mov
test
jne
push
call
pop
jmp
push
call
pop
test
je
or
jmp
test
je
push
call
push
call
pop
neg
pop
sbb
jmp
xor
pop
pop
ret
push
mov
push
push
mov
xor
mov
and
cmp
jne
test
je
push
mov
sub
test
jle
push
push
push
call
pop
push
call
add
cmp
jne
mov
test
jns
and
mov
jmp
or
or
pop
mov
and
mov
pop
mov
pop
pop
ret
push
call
pop
ret
push
push
call
xor
mov
and
push
call
pop
and
xor
mov
mov
cmp
jge
mov
mov
test
je
test
je
push
push
call
pop
pop
mov
mov
mov
test
je
cmp
jne
push
call
pop
cmp
je
inc
mov
jmp
test
jne
test
je
push
call
pop
cmp
jne
or
and
call
inc
jmp
mov
mov
mov
mov
push
push
call
pop
pop
ret
mov
call
cmp
mov
je
mov
call
ret
mov
mov
push
call
pop
ret
push
mov
call
push
mov
call
push
call
cmp
pop
pop
jne
push
call
pop
push
call
pop
pop
ret
push
mov
sub
push
call
test
je
push
pop
int
mov
mov
mov
mov
mov
mov
data16
data16
data16
data16
data16
data16
pushf
pop
mov
mov
mov
mov
lea
mov
mov
mov
mov
mov
mov
mov
mov
push
pop
imul
mov
push
pop
imul
mov
mov
push
pop
shl
mov
mov
push
call
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
push
push
push
push
push
call
pop
pop
pop
pop
mov
pop
ret
mov
test
mov
je
mov
mov
xor
call
push
mov
mov
push
mov
push
call
add
pop
mov
mov
mov
mov
ret
push
push
push
mov
push
push
push
push
push
mov
xor
push
lea
mov
mov
mov
mov
cmp
je
cmp
je
cmp
jbe
lea
mov
mov
mov
cmp
jne
push
mov
call
mov
call
jmp
mov
mov
add
pop
pop
pop
ret
xor
mov
cmp
jne
mov
mov
cmp
jne
mov
ret
push
push
mov
jmp
push
push
mov
mov
mov
mov
mov
push
push
push
pop
pop
pop
pop
pop
ret
call
ret
push
push
call
xor
mov
push
call
pop
and
push
pop
mov
cmp
jge
mov
mov
test
je
test
je
push
call
pop
cmp
je
inc
mov
cmp
jl
mov
mov
add
push
call
mov
push
call
pop
mov
and
inc
jmp
mov
call
mov
call
ret
mov
push
call
pop
ret
push
push
call
mov
cmp
je
push
call
pop
and
push
push
call
pop
pop
mov
mov
call
call
ret
push
call
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
lea
sub
and
add
sbb
or
pop
jmp
push
lea
sub
and
add
sbb
or
pop
jmp
push
push
call
mov
cmp
jne
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
mov
and
shl
mov
movsx
and
je
push
call
pop
xor
mov
mov
mov
test
je
push
call
pop
push
call
test
jne
call
mov
mov
test
je
call
mov
call
mov
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
mov
call
or
call
ret
push
push
call
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
and
shl
mov
movsx
and
je
push
call
pop
and
mov
test
je
push
push
push
call
add
mov
jmp
call
mov
call
and
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
and
call
mov
call
or
call
ret
push
mov
mov
call
mov
xor
mov
mov
mov
xor
push
mov
mov
mov
mov
mov
cmp
jne
xor
jmp
test
jne
call
and
call
mov
call
or
jmp
push
push
mov
sar
mov
and
shl
mov
mov
mov
mov
add
sar
cmp
je
cmp
jne
mov
not
test
jne
call
and
call
mov
call
jmp
mov
test
je
push
push
push
push
call
add
push
call
pop
test
je
mov
mov
test
je
call
mov
xor
cmp
lea
push
mov
sete
mov
push
mov
call
test
je
cmp
je
test
je
call
mov
and
mov
mov
mov
cmp
jbe
xor
mov
mov
test
jne
mov
xor
cmp
sete
mov
mov
mov
cmp
je
mov
mov
push
lea
mov
and
push
jmp
movsx
push
call
pop
test
je
mov
mov
sub
add
cmp
jbe
push
push
lea
push
call
add
cmp
je
mov
inc
inc
jmp
push
push
lea
push
call
add
cmp
je
mov
xor
push
push
inc
inc
push
mov
lea
push
push
lea
push
push
push
call
mov
test
je
push
lea
push
push
lea
push
mov
mov
push
call
test
je
mov
mov
add
cmp
jl
cmp
je
push
lea
push
push
lea
push
mov
mov
mov
push
call
test
je
cmp
jl
inc
inc
jmp
cmp
je
cmp
jne
movzx
xor
cmp
mov
mov
sete
add
add
mov
mov
mov
cmp
je
cmp
jne
push
call
pop
cmp
jne
add
cmp
je
push
pop
push
mov
call
pop
cmp
jne
inc
inc
mov
mov
cmp
jb
jmp
mov
mov
mov
inc
mov
mov
mov
mov
jmp
mov
jmp
mov
mov
test
je
mov
xor
mov
test
jne
mov
mov
cmp
jbe
xor
sub
mov
lea
mov
cmp
jae
mov
inc
inc
mov
cmp
mov
mov
jne
inc
mov
inc
inc
mov
mov
mov
inc
inc
mov
cmp
jb
mov
lea
sub
push
lea
push
push
lea
push
mov
mov
push
call
test
je
add
mov
cmp
jl
mov
sub
cmp
mov
jb
jmp
mov
cmp
jne
mov
cmp
jbe
mov
and
mov
mov
sub
mov
lea
cmp
jae
movzx
add
add
mov
cmp
jne
push
pop
mov
mov
add
add
add
mov
add
add
cmp
jb
mov
lea
sub
push
lea
push
push
lea
push
mov
mov
mov
push
call
mov
mov
test
je
add
mov
mov
cmp
jl
mov
mov
sub
cmp
jb
jmp
mov
mov
test
je
mov
and
mov
sub
mov
lea
cmp
jae
movzx
add
add
mov
cmp
jne
push
pop
mov
mov
add
add
mov
add
add
cmp
jb
xor
push
push
push
lea
push
lea
sub
cdq
sub
sar
push
mov
push
push
push
call
mov
mov
mov
test
je
xor
mov
push
sub
lea
push
push
lea
add
mov
push
mov
mov
push
call
test
je
mov
add
mov
mov
cmp
jg
jmp
call
mov
mov
mov
mov
cmp
jg
mov
mov
mov
sub
mov
cmp
jb
jmp
push
lea
push
push
push
push
call
test
je
mov
xor
jmp
call
mov
mov
test
jne
test
je
push
pop
cmp
jne
call
mov
call
mov
jmp
push
call
pop
jmp
mov
mov
mov
test
je
cmp
jne
xor
jmp
call
mov
call
and
or
jmp
sub
mov
pop
pop
mov
xor
pop
call
leave
ret
push
mov
push
mov
push
or
test
jne
call
mov
call
or
jmp
test
je
push
call
push
mov
call
push
call
push
call
add
test
jns
or
jmp
cmp
je
push
call
and
pop
and
mov
pop
pop
pop
ret
push
push
call
or
mov
xor
mov
test
setne
test
jne
call
mov
call
mov
call
ret
test
je
and
jmp
push
call
pop
and
push
call
pop
mov
mov
mov
call
jmp
mov
mov
push
call
pop
ret
push
push
call
mov
mov
sar
mov
and
shl
add
cmp
jne
push
call
pop
and
cmp
jne
push
lea
push
call
inc
mov
call
mov
sar
and
shl
mov
add
add
push
call
xor
inc
call
ret
mov
push
call
pop
ret
push
mov
mov
push
push
test
js
cmp
jae
mov
sar
mov
mov
and
shl
test
je
cmp
je
cmp
jne
xor
sub
je
dec
je
dec
jne
push
push
jmp
push
push
jmp
push
push
call
mov
or
xor
jmp
call
mov
call
and
or
pop
pop
pop
ret
push
mov
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
and
mov
shl
test
je
mov
pop
ret
call
and
call
mov
call
or
pop
ret
push
mov
mov
mov
and
sar
shl
mov
add
add
push
call
pop
ret
push
mov
sub
push
lea
call
mov
movzx
mov
movzx
and
cmp
je
mov
and
leave
ret
push
mov
push
push
call
pop
pop
pop
ret
push
mov
push
push
push
mov
push
push
call
or
pop
cmp
jne
call
mov
mov
mov
jmp
push
lea
push
push
push
push
call
test
jne
call
push
call
pop
jmp
mov
sar
and
mov
shl
and
mov
mov
pop
pop
leave
ret
push
mov
sub
push
push
mov
test
je
mov
test
je
cmp
jne
mov
test
je
xor
mov
xor
pop
pop
leave
ret
push
push
lea
call
mov
cmp
jne
mov
test
je
movzx
mov
xor
inc
jmp
lea
push
movzx
push
call
pop
pop
test
je
mov
cmp
jle
cmp
jl
xor
cmp
setne
push
push
push
push
push
push
call
mov
test
jne
cmp
jb
cmp
je
mov
jmp
xor
cmp
setne
xor
inc
push
push
mov
push
push
push
push
call
test
jne
call
or
mov
cmp
je
mov
and
mov
pop
jmp
push
mov
push
push
push
push
call
add
pop
ret
push
mov
push
mov
cmp
jne
call
mov
cmp
jne
mov
leave
ret
push
lea
push
push
lea
push
push
call
test
je
mov
leave
ret
push
push
call
mov
cmp
jne
call
and
call
mov
jmp
test
js
cmp
jae
mov
sar
mov
and
shl
mov
movsx
and
je
push
call
pop
and
mov
test
je
push
call
pop
mov
jmp
call
mov
or
mov
mov
call
mov
jmp
mov
mov
push
call
pop
ret
call
and
call
mov
call
or
call
ret
push
mov
push
push
mov
push
call
pop
cmp
je
mov
cmp
jne
test
jne
cmp
jne
test
je
push
call
push
mov
call
pop
pop
cmp
je
push
call
pop
push
call
test
jne
call
mov
jmp
xor
push
call
pop
mov
sar
and
mov
shl
mov
test
je
push
call
pop
or
jmp
xor
pop
pop
pop
ret
push
mov
push
mov
test
je
test
je
push
call
and
xor
pop
mov
mov
mov
pop
pop
ret
mov
cmp
je
cmp
je
push
call
ret
xor
push
push
push
push
push
push
push
call
mov
ret
int3
int3
push
mov
or
jne
mov
mov
xor
div
mov
mov
div
mov
mov
mul
mov
mov
mul
add
jmp
mov
mov
mov
mov
shr
rcr
shr
rcr
or
jne
div
mov
mul
mov
mov
mul
add
jb
cmp
ja
jb
cmp
jbe
dec
sub
sbb
xor
sub
sbb
neg
neg
sbb
mov
mov
mov
mov
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
mov
or
mov
jne
mov
mul
ret
push
mul
mov
mov
mul
add
mov
mul
add
pop
ret
jmp
jmp
