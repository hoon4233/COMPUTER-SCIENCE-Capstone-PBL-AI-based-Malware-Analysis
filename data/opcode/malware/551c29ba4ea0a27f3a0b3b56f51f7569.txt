mov
mov
xor
sub
mov
push
mov
mov
call
mov
push
mov
call
mov
mov
not
cmp
mov
je
test
je
not
mov
pop
add
ret
mov
test
je
mov
mov
mov
mov
mov
push
mov
xor
xor
call
test
jne
push
call
mov
push
push
call
mov
push
push
push
push
push
push
push
call
lea
mov
push
call
push
push
push
call
mov
add
mov
mov
mov
mov
cmp
jne
test
je
mov
mov
mov
cmp
jne
add
add
test
jne
xor
jmp
sbb
sbb
test
pop
je
mov
call
mov
call
cmp
je
test
jne
mov
mov
mov
mov
pop
mov
xor
pop
add
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sub
push
push
push
call
test
mov
je
push
push
push
push
push
push
push
push
push
call
test
je
push
call
call
mov
push
push
mov
mov
mov
call
mov
push
push
push
push
call
push
call
add
movsx
add
cmp
jne
mov
mov
call
mov
mov
add
test
je
call
call
mov
mov
add
mov
jne
jmp
mov
mov
push
mov
add
cmp
jne
mov
call
push
push
push
call
mov
mov
mov
call
mov
mov
push
push
push
push
call
push
push
push
push
push
push
push
push
push
push
push
push
call
mov
mov
push
call
mov
mov
pop
cmp
jne
push
push
call
mov
mov
mov
call
call
push
mov
call
mov
mov
mov
call
mov
push
push
push
push
call
mov
push
push
call
mov
mov
test
mov
mov
mov
mov
mov
mov
mov
jne
lea
mov
mov
xor
mov
mov
xor
mov
mov
cmp
mov
mov
jle
cmp
jne
xor
mov
mov
mov
mov
xor
inc
mov
inc
cmp
jl
mov
lea
push
mov
mov
call
lea
push
call
add
xor
pop
pop
add
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
rol
ss
mov
cmps
aaa
mov
push
jmp
jp
add
jle
ds
sahf
or
stos
xor
xchg
into
push
(bad)
data16
push
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
pop
neg
es
sbb
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
div
jno
mov
shl
dec
fs
lock
or
push
pop
test
jmp
fisubr
inc
mov
shl
aas
inc
mov
mov
sbb
int
push
and
imul
inc
adc
iret
pop
fstp
sbb
mov
jle
cmp
bound
jmp
cs
out
mov
push
std
jge
or
xchg
outs
mov
push
mov
mov
xchg
inc
(bad)
mov
addr16
bound
xchg
cmc
ins
outs
mov
test
push
(bad)
out
xor
adc
imul
mov
mov
mov
adc
jbe
leave
shr
es
fsubrp
xchg
push
rcl
mov
retf
sub
lahf
cli
jmpw
clc
ror
(bad)
stos
test
push
push
rol
cs
dec
ds
jno
scas
or
das
call
fnstsw
stos
mov
ret
push
xchg
sub
push
lahf
jae
out
imul
add
mov
xchg
arpl
inc
outs
mov
pusha
cs
imul
adc
cli
mov
stc
jb
mov
add
fild
jmp
and
dec
sbb
jbe
in
add
neg
fs
add
(bad)
xchg
adc
pop
arpl
les
cmps
mov
inc
mov
push
xchg
test
outs
enter
in
mov
jbe
outs
neg
pop
(bad)
mov
stos
inc
stos
mov
out
xchg
lock
and
or
push
(bad)
push
scas
es
nop
mov
jbe
test
ds
pop
mov
(bad)
mov
out
push
(bad)
push
xor
in
mov
add
repnz
and
mov
lock
adc
xchg
jnp
or
mov
int
adc
cmps
mov
bound
ds
dec
dec
pop
pop
mov
jne
call
mov
push
pop
in
add
rol
adc
push
das
adc
push
mov
add
push
push
outs
jl
mov
cmp
(bad)
xchg
mov
div
fst
scas
data16
inc
pop
add
sti
cmp
test
and
pop
rol
stc
or
fidivr
or
pop
fmul
shr
cmp
das
aad
jl
inc
fld
xor
xor
nop
jp
xchg
mov
cs
aad
and
bound
push
mov
add
push
jae
mov
jle
jecxz
jo
dec
dec
sbb
out
jl
add
lahf
mov
or
sar
or
xor
xchg
imul
sbb
pushf
jb
lds
scas
retf
and
data16
div
imul
ds
outs
stc
jge
cld
inc
ins
push
stos
retf
into
cwde
mov
out
and
les
jl
cs
adc
or
repz
addr16
repz
fmul
enter
into
ja
xchg
push
fld
adc
shl
push
push
xlat
(bad)
neg
inc
into
cmp
adc
inc
leave
push
ss
mov
mov
push
pop
push
xor
jmp
push
mov
dec
xchg
shl
rol
dec
ret
repz
adc
jmp
jmp
sbb
jmp
std
loop
bswap
mov
data16
fild
sub
xchg
repnz
push
pop
push
retf
fnstcw
fiadd
outs
test
sub
push
mov
cmp
sahf
inc
fcomp
and
push
je
jns
shl
lahf
dec
das
xor
pusha
adc
push
inc
in
rcr
mov
push
into
hlt
sahf
dec
dec
pop
sti
out
test
fcmovnb
mov
fiadd
lds
sub
arpl
shr
jnp
clc
add
ss
and
xor
adc
inc
call
sub
jmp
fcmove
(bad)
cmp
loop
push
adc
ret
pop
xchg
shl
int
(bad)
fisub
out
je
(bad)
pop
xchg
ror
out
mov
outs
push
jnp
adc
dec
xor
inc
les
jmp
xor
or
pminub
ret
xchg
out
(bad)
inc
mov
inc
add
xchg
mov
or
and
sbb
adc
cmp
xchg
movs
push
out
jl
lods
test
jmp
je
or
pop
jbe
mov
pop
xchg
or
cmps
call
leave
fwait
mov
or
(bad)
daa
shl
mov
mov
xor
or
sahf
pop
jno
jle
push
fisub
xor
cmps
mov
cmp
xchg
inc
int
out
mov
xor
and
mov
xchg
xchg
out
jnp
out
mov
outs
push
adc
add
out
xor
adc
cdq
arpl
push
(bad)
push
imul
mov
cmp
xchg
jnp
dec
fdivrp
mov
push
cmc
test
loope
add
push
ror
pop
mov
in
mov
xor
push
std
push
(bad)
jbe
push
loope
adc
movs
loop
dec
push
nop
mov
(bad)
fst
es
jbe
push
in
jbe
jns
xchg
ds
out
mov
push
jecxz
xchg
popa
jbe
push
into
fldcw
fiadd
push
mov
jns
push
mov
out
xchg
and
mov
adc
into
push
je
das
mov
retf
push
in
ret
ror
mov
popa
or
stos
sub
mov
mov
xchg
out
add
mov
adc
sub
stos
add
mov
arpl
(bad)
repnz
ret
push
call
dec
push
sti
call
aas
jmp
sti
push
or
adc
stos
mov
repz
jp
stos
out
scas
leave
and
fidivr
int
and
repnz
push
cmp
mov
outs
mov
lahf
mov
stos
sahf
xchg
ret
push
sbb
pop
inc
mov
mov
jle
in
pop
cli
(bad)
push
sti
out
jmp
out
es
daa
jae
bound
mov
jl
in
push
arpl
jno
mov
scas
adc
mov
xchg
push
xor
jmp
inc
or
(bad)
int3
jmp
pop
mov
in
or
shl
aam
(bad)
cs
pop
div
movs
aas
stc
fwait
push
stc
and
pop
data16
mov
xchg
cmp
into
sub
data16
sahf
adc
retf
mov
add
les
push
cs
push
(bad)
cmps
xchg
cmp
in
pushf
sahf
push
cwde
cli
aaa
bound
mov
add
jbe
or
ins
mov
add
mov
inc
cmps
jmp
in
int
cmp
jbe
mov
xchg
dec
xor
cmp
mov
mov
ss
into
iret
inc
mov
cmp
ds
xchg
pop
(bad)
mov
xor
cmps
sbb
push
call
imul
lods
(bad)
adc
outs
mov
ret
jmp
and
test
sub
mov
mov
scas
mov
aaa
imul
and
rcr
shr
(bad)
icebp
ror
js
pop
add
mov
push
fwait
push
retf
stos
push
fisttp
adc
fwait
les
jns
cmp
mov
les
aam
pusha
jnp
inc
inc
(bad)
in
xor
out
enter
inc
mov
xchg
sub
push
inc
idiv
push
aas
adc
fadd
repnz
sbb
(bad)
xchg
jle
sub
popa
jmp
push
mov
lods
scas
cmps
mov
dec
jns
imul
mov
and
ins
add
add
out
xchg
cwde
add
xchg
inc
repnz
stc
cmps
out
jle
test
sub
push
xchg
jno
push
das
fdivp
stos
mov
in
mov
jns
xchg
or
std
cmps
(bad)
cmc
jmp
mov
cmps
lahf
pop
sbb
std
imul
xor
pop
inc
mov
(bad)
add
es
mov
out
(bad)
dec
adc
nop
dec
adc
mov
or
stc
jg
sbb
nop
(bad)
add
jnp
mov
cwde
add
lea
pusha
pop
iret
cmps
iret
xor
mov
push
sahf
shl
shl
or
cli
sbb
imul
cmp
sahf
or
mov
stos
cmp
jl
push
inc
jns
mov
sub
push
xchg
jmp
call
pop
cs
dec
add
pop
(bad)
mov
sub
ds
adc
jbe
repnz
ss
jge
xchg
out
shl
ins
out
mov
cmps
dec
mov
cmps
ficomp
bound
data16
mov
imul
push
ror
add
jge
iret
inc
push
imul
jle
jle
sahf
mov
dec
mov
loop
outs
call
ficomp
ss
addr16
xchg
or
imul
out
mov
lea
cmc
stos
ret
jne
das
sub
dec
retf
jnp
and
sahf
mov
aas
ja
test
jmp
mov
mov
cmps
ds
dec
xor
mov
add
shr
pop
fidivr
cli
mov
push
scas
xor
and
xchg
pusha
scas
das
cmp
test
in
mov
ins
mov
adc
out
xor
das
sub
sti
loop
adc
fistp
xor
inc
(bad)
fbstp
in
repz
out
xchg
and
jl
xor
jmp
add
jecxz
in
es
cmp
cmc
loope
inc
xchg
cmp
sub
test
frstpm(287
xlat
popf
inc
test
pop
in
sahf
jle
dec
dec
mov
mov
mov
(bad)
dec
adc
out
mov
in
in
push
or
pushf
ret
or
(bad)
retf
push
mov
inc
dec
xchg
(bad)
cmp
call
xchg
inc
(bad)
pop
sub
mov
and
sub
mov
into
scas
cs
dec
mov
mov
bound
add
push
mov
push
add
xchg
dec
test
sub
mov
inc
out
test
les
bound
sub
push
mov
jmp
test
push
(bad)
xchg
xchg
and
cs
in
dec
dec
ds
outs
add
push
(bad)
push
stos
stos
scas
push
adc
mov
pop
fidivr
test
ja
(bad)
adc
xor
push
add
jg
jmp
push
movs
scas
out
and
adc
sti
ins
clc
push
xor
jbe
es
push
xor
xchg
xchg
test
xchg
lds
mov
in
xor
jno
adc
mov
sbb
loopne
out
cwde
(bad)
mov
jecxz
iret
bound
inc
out
xor
jp
imul
cmp
cmp
push
mov
ror
into
aad
sub
sub
xacquire
sbb
mov
and
inc
dec
jmp
mov
out
jle
mov
xchg
mov
es
in
dec
pop
or
dec
and
xchg
movntq
addr16
jns
pop
popa
sub
(bad)
int
jge
push
xchg
cmps
cmp
stos
std
cmps
mov
movs
pop
dec
into
push
cmp
(bad)
mov
jmp
data16
xor
mov
int3
push
sar
sahf
(bad)
and
int3
sar
push
or
lahf
pop
outs
push
imul
outs
mov
mov
cld
fprem
ss
test
out
aas
data16
mov
outs
add
lahf
(bad)
mov
pop
popa
iret
inc
scas
jg
inc
mov
add
loop
pushf
lods
sbb
out
jne
lea
jne
adc
push
mov
(bad)
repnz
cmp
popf
dec
sbb
fwait
push
cld
cs
rcr
fcomp
cmp
jp
xchg
mov
shl
cs
cmps
mov
data16
inc
movs
dec
jnp
aas
dec
and
(bad)
retf
sub
aas
out
inc
les
(bad)
into
pop
add
jno
push
mov
iret
xor
imul
sbb
lahf
shl
sbb
jns
mov
jnp
sahf
jae
cli
inc
jae
imul
mov
ja
lock
mov
add
repz
fwait
cmps
xchg
in
sbb
inc
cmps
push
push
mov
jmp
or
mov
ds
mov
push
ss
xchg
adc
call
outs
mov
dec
pop
cmp
lods
push
sahf
push
fwait
pop
inc
ret
test
aas
cmp
(bad)
jmp
xchg
adc
xor
adc
es
ins
push
or
(bad)
mov
inc
sbb
(bad)
shl
or
xchg
dec
xor
xor
jae
scas
mov
js
or
repz
sub
ss
cs
push
data16
scas
inc
test
outs
xchg
mov
cs
cwde
mov
cmp
xchg
sahf
inc
xlat
jmp
xor
jmp
cmp
xchg
jle
addr16
pushf
lds
(bad)
imul
fiadd
push
push
jmp
mov
push
push
sbb
sbb
outs
jnp
jp
sar
add
dec
pop
jb
xchg
(bad)
and
pop
inc
sbb
test
outs
jns
mov
mov
dec
ds
out
div
push
retf
adc
xchg
cdq
sub
xchg
ss
sub
int3
pop
cs
(bad)
mov
push
mov
aam
push
jae
scas
mov
add
cmps
(bad)
(bad)
cmps
sub
sbb
pop
xor
dec
movzx
and
xor
inc
icebp
jmp
mov
cmp
mov
xchg
push
mov
mov
scas
fidivr
mov
test
fimul
mov
(bad)
jle
iret
mov
inc
add
into
push
push
dec
mov
jp
ds
out
(bad)
push
(bad)
cmc
stos
add
or
inc
arpl
retf
mov
jmp
jbe
or
inc
mov
or
aad
adc
cs
cmps
jmp
das
ficomp
icebp
pushf
retf
pop
(bad)
pusha
outs
jbe
or
pop
mov
push
dec
sub
into
pop
add
xor
xor
ss
push
xchg
outs
lea
not
push
(bad)
jbe
mov
out
fst
push
out
inc
lods
cdq
inc
fcmovu
jp
xchg
pusha
cmps
(bad)
xor
mov
dec
retf
jmp
call
retf
add
nop
mov
inc
outs
xlat
cld
fisub
mov
or
push
seta
dec
stos
pop
fisttp
pop
dec
in
ds
pop
inc
xchg
scas
xor
add
adc
aaa
mov
icebp
push
movs
arpl
mov
mul
mov
xor
xchg
test
adc
cmp
xor
mov
push
out
ins
push
or
fisub
ja
dec
xchg
jmp
jns
mov
ficomp
cmp
retf
mov
jle
jecxz
fist
fwait
mov
data16
stos
jae
stos
and
or
clc
ret
ss
mov
jg
into
loop
mov
mov
loop
iret
cmps
pop
jb
dec
adc
mov
ret
jecxz
pop
or
inc
jle
iret
push
clc
inc
sti
add
push
and
ret
dec
inc
imul
or
adc
cli
jecxz
out
cmp
cmp
xchg
sahf
push
ficom
arpl
push
fnstsw
xchg
es
or
xchg
clc
ror
mov
sbb
push
popa
cli
jmp
mov
add
adc
push
or
push
(bad)
push
sar
cmp
neg
push
mov
push
dec
(bad)
test
push
fadd
shl
out
neg
mov
lods
pop
or
jae
adc
jns
aam
cmps
jae
pop
popf
xchg
lea
push
pushf
sti
out
leave
sub
xlat
int
adc
(bad)
sub
and
push
(bad)
dec
xchg
lea
outs
pop
or
dec
mov
inc
or
iret
push
icebp
shl
mov
push
call
repnz
fisubr
test
pop
ror
sbb
mul
ror
dec
mov
mov
dec
ret
inc
xor
xor
fadd
cmp
push
push
jp
in
popa
(bad)
jno
inc
jae
ss
inc
out
scas
pop
daa
xchg
jp
push
rcl
loop
(bad)
mov
repz
ds
out
inc
and
arpl
dec
dec
call
mov
test
mov
and
add
jbe
mov
push
outs
outs
mov
aad
mov
adc
(bad)
(bad)
cmp
inc
stos
add
icebp
xchg
shl
jle
push
retf
sbb
inc
inc
es
loop
add
or
data16
xchg
xchg
jae
imul
cmps
pop
dec
out
mov
inc
add
xor
retf
fimul
stos
jne
xlat
mov
imul
cmp
sub
push
or
retf
shl
es
add
fimul
push
lock
out
cmp
sub
fsub
not
stc
dec
inc
fldenv
and
nop
mov
xchg
dec
pop
add
ret
dec
sbb
pop
push
mov
outs
scas
ss
or
fild
jmp
sti
push
xor
(bad)
pushf
pop
jmp
push
mov
adc
retf
or
mov
mov
out
cld
xchg
inc
repnz
jae
lods
out
ror
jle
push
mov
jmp
add
(bad)
or
xchg
ror
cs
stos
(bad)
or
dec
sbb
es
shr
fild
call
cmps
imul
jecxz
mov
push
stos
fwait
xor
sub
xchg
shr
xlat
sub
push
(bad)
sbb
inc
mov
scas
inc
arpl
sub
sub
punpckhwd
cmps
sub
sbb
(bad)
das
ins
xchg
cmps
lahf
stc
cmp
mov
mov
bound
mov
dec
sahf
mov
mov
push
add
mov
jae
mov
xchg
ret
repz
xchg
mul
mov
push
mov
jbe
mov
push
jecxz
fadd
call
(bad)
call
enter
mov
scas
and
push
loop
enter
jge
ror
ret
ret
and
mov
ins
stos
mov
adc
das
push
cmps
pop
cmc
ins
dec
pop
cmp
cmp
jecxz
sub
and
lea
arpl
cmp
dec
shl
shl
sbb
pop
and
jno
js
push
fwait
adc
xor
or
arpl
nop
and
cmp
sub
std
movs
scas
cs
mov
mov
dec
imul
dec
xor
retf
push
js
push
neg
cmps
stos
jbe
outs
mov
mov
mov
dec
dec
mov
cs
mov
push
ret
push
inc
out
ss
xor
jae
cmp
and
pop
or
jecxz
stc
jp
push
cs
pop
fisubr
add
xchg
call
dec
cmp
mov
cld
and
fidivr
pop
sbb
cmps
mov
lds
aad
cmp
pop
out
push
inc
scas
pop
mov
sbb
mov
ja
aaa
int
jbe
add
popa
add
ror
xchg
jne
sub
cmp
pop
into
lds
(bad)
sbb
stos
and
sahf
rcr
pop
retf
test
or
stos
add
(bad)
pusha
out
std
out
cmc
push
mov
(bad)
in
sub
retf
arpl
xchg
mov
mov
imul
add
jecxz
sti
push
inc
js
jbe
dec
(bad)
cmp
mov
cmp
jnp
aaa
out
fidiv
jmp
(bad)
mov
jge
jns
into
addr16
dec
jle
scas
xlat
jmp
xlat
pop
jo
push
leave
stos
jge
test
xchg
ret
add
rol
pop
imul
cli
lds
outs
mov
mov
jns
iret
ss
or
popf
add
arpl
sub
mov
imul
movs
arpl
cmp
movs
(bad)
xchg
jb
leave
mov
ja
dec
push
adc
jns
pop
inc
test
mov
(bad)
mov
(bad)
daa
xchg
mov
add
fadd
fdiv
sub
jb
push
jle
push
push
into
jecxz
push
test
cs
lds
xor
retf
popf
mov
inc
pop
fild
aad
je
push
imul
mov
and
sub
imul
jbe
push
push
ficom
pushw
std
push
dec
repnz
mul
cmp
out
mov
(bad)
stc
ror
add
adc
cs
div
neg
into
outs
xor
mov
cdq
adc
fcomp
push
es
ret
or
push
(bad)
jb
mov
and
ss
(bad)
and
mov
retf
mov
cmp
jle
jecxz
ret
jmp
add
jae
jecxz
pop
xchg
dec
pop
pusha
sub
ss
or
xor
jle
in
scas
push
cmc
je
mov
push
add
into
jmp
jecxz
mov
push
xor
xor
inc
(bad)
ret
arpl
xor
push
mov
mov
sub
sbb
(bad)
(bad)
xor
retf
xlat
mov
(bad)
cmp
outs
in
iret
sbb
sbb
jmp
les
test
int3
cli
mov
inc
inc
fild
cmp
std
push
xadd
rol
mov
mul
xchg
daa
mov
aad
push
push
fimul
adc
jb
add
mov
mov
es
out
sub
fcmove
jle
scas
pop
xor
inc
stos
test
test
sbb
cdq
rep
fwait
and
push
cld
retf
or
ds
adc
in
inc
pop
mov
jle
jecxz
lahf
mov
sti
dec
jmp
xchg
lds
xchg
jae
es
jns
int
cmps
push
test
imul
in
scas
or
ins
mov
push
call
mov
jle
popa
push
leave
xor
jmp
mov
pop
cmp
fisttp
div
dec
mov
jnp
push
(bad)
push
push
js
je
mov
adc
xor
sub
arpl
fbld
neg
out
inc
xchg
int
(bad)
(bad)
cdq
or
cmp
inc
stos
repnz
push
ficomp
mov
jmp
adc
cmp
jbe
sti
pop
xchg
ds
mov
dec
mov
jnp
cli
push
xor
push
mov
call
loop
pop
cs
dec
int
std
mov
fwait
out
fimul
into
inc
dec
fistp
cli
push
xchg
push
pop
jo
or
lds
mov
adc
inc
iret
adc
ins
or
cmps
repnz
cmps
pop
xchg
sar
add
cmc
ins
xchg
xchg
pop
ins
arpl
adc
push
or
mov
ins
xor
jle
out
test
jno
aaa
movs
(bad)
dec
pusha
int
fld
or
push
jl
jge
sar
dec
sub
push
add
lods
push
data16
inc
xchg
test
xchg
jp
sar
cs
dec
aas
xchg
and
dec
push
xor
iret
retf
and
xor
or
cmp
enter
mov
xchg
push
jg
gs
mov
movs
lock
mov
jns
scas
push
adc
add
or
pop
(bad)
test
adc
mov
sti
add
add
sbb
outs
mov
pop
call
(bad)
mov
dec
(bad)
stos
sbb
jb
sar
jecxz
repz
imul
stos
pop
shl
sti
pop
arpl
lock
dec
xchg
push
jecxz
test
push
aad
xchg
dec
sub
cmp
inc
jle
adc
lods
mov
sub
fwait
sar
or
ret
jbe
(bad)
rcl
lea
lds
mov
adc
addr16
ret
or
sub
ret
(bad)
cmc
das
xor
(bad)
int
mov
jecxz
jle
cmps
arpl
xchg
xchg
outs
ds
jnp
mov
dec
pop
push
in
jge
xor
(bad)
cli
pop
ficomp
cmps
dec
mov
mov
fbstp
(bad)
in
aaa
pop
lea
div
sbb
call
clc
cs
jmp
pop
jmp
fmulp
inc
pop
imul
jle
psrad
mov
or
bound
mov
mov
iret
fwait
pop
jmp
test
scas
retf
add
xor
xor
fidiv
jge
repz
sti
xchg
ret
iret
cld
pop
in
mov
or
mov
inc
out
ins
xchg
dec
(bad)
push
push
ins
out
cmc
push
jns
das
dec
hlt
push
dec
lea
adc
shl
mov
push
rol
rcl
mov
sub
jle
push
xor
int
shl
mov
xchg
push
imul
mov
jle
xchg
mov
dec
mov
mov
xor
dec
shr
pop
mov
outs
aas
pop
or
loope
in
in
cmovbe
ja
ret
add
rcr
push
(bad)
adc
sub
mov
cwde
and
loope
push
sbb
or
das
out
add
ss
imul
adc
cs
sbb
out
jge
add
jo
ror
push
xchg
jne
sbb
(bad)
lock
cmp
sub
pop
fdivp
cmp
test
in
div
push
sahf
imul
push
shl
xchg
mov
jl
aam
enter
mov
or
into
sti
push
cmp
cs
outs
sbb
inc
(bad)
imul
jbe
jbe
or
dec
mov
mov
mov
(bad)
int3
fnstcw
pop
(bad)
scas
mov
xchg
(bad)
(bad)
lods
mov
mov
call
xchg
imul
in
inc
fcom
and
pop
xor
out
fisubr
mov
inc
or
fs
ss
ss
movs
mov
stos
out
xchg
sbb
fdivr
sar
dec
push
cmp
arpl
pusha
stc
jno
mov
inc
inc
es
xchg
mov
xchg
loop
jmp
imul
outs
out
cmp
xor
lahf
out
jmp
adc
pop
inc
and
mov
sbb
push
cs
fiadd
push
(bad)
cmps
jmp
push
sub
dec
pop
data16
mov
dec
mov
lea
push
fnstsw
mov
imul
sub
cmp
xchg
dec
jmp
faddp
fnsave
jns
xchg
outs
sub
dec
pop
jp
outs
mov
inc
(bad)
push
mov
ds
jbe
ret
enter
sar
mov
dec
xchg
das
xchg
sub
sbb
fst
fcmove
call
(bad)
test
ror
or
pop
mov
cmp
jae
test
retf
inc
fcom
dec
movs
mov
add
lods
mov
or
mov
retf
inc
push
stos
bound
mov
(bad)
or
sub
pop
aaa
pop
(bad)
sti
scas
cmps
xchg
fcom
fiadd
pop
dec
lods
jnp
pop
sub
ins
sub
lea
fmulp
inc
sahf
(bad)
cmp
dec
jmp
mov
mov
imul
std
aad
mov
aaa
push
imul
(bad)
and
push
xchg
mov
movs
cmp
dec
into
sub
adc
inc
test
push
xor
scas
push
scas
push
jecxz
fsubr
(bad)
aad
xor
or
outs
scas
adc
ss
mov
mov
adc
push
pop
mov
dec
mov
adc
repz
and
out
dec
call
les
(bad)
das
and
pop
dec
(bad)
(bad)
enter
retf
aam
gs
jae
mov
pop
jns
imul
fwait
adc
lea
or
inc
(bad)
ffree
in
and
ret
push
ror
sbb
mov
add
xor
out
sbb
push
cmp
jle
in
fisttp
popf
loope
and
push
std
bound
sahf
add
dec
ins
pop
or
mov
pushf
ss
push
mov
mov
adc
pextrw
push
dec
jecxz
aas
push
ret
push
cmp
lock
leave
xor
into
popf
add
jbe
mov
push
cmps
xor
inc
(bad)
cmp
outs
jge
(bad)
shl
mov
stc
mov
sbb
push
inc
cmps
push
call
xor
push
inc
add
xor
jecxz
dec
dec
fucomip
pop
imul
xchg
or
jns
push
test
cmp
inc
inc
and
add
xchg
(bad)
into
sbb
push
cmp
jne
retf
stc
loopne
mov
int
out
loop
dec
pop
leave
pop
cs
into
inc
xchg
dec
out
pop
(bad)
or
leave
fisub
cmps
clc
push
popf
fadd
sub
dec
dec
pop
pop
dec
repz
dec
inc
in
ss
mov
das
jae
jo
or
jnp
dec
jne
lds
jge
push
dec
call
or
ds
fsub
mov
pop
cmp
pop
jle
mov
add
sbb
ror
(bad)
outs
stos
imul
lods
test
popa
lea
jmp
retf
inc
lea
push
xchg
rcr
sbb
sbb
xchg
xchg
mov
mov
clc
jnp
leave
mov
out
mov
mov
pop
lods
push
sbb
push
pusha
es
xchg
push
mov
xchg
adc
dec
or
test
in
mov
inc
mov
or
jbe
(bad)
repnz
cmp
aad
dec
mov
jmp
push
push
ficom
xor
adc
and
inc
pop
neg
dec
jecxz
jecxz
neg
pop
ds
outs
mov
ins
(bad)
push
xor
mov
xchg
mov
(bad)
(bad)
sbb
cmps
out
cmp
sbb
cmps
sahf
inc
mov
test
fisttp
(bad)
sub
jge
in
inc
mov
out
jecxz
push
fwait
push
in
imul
lahf
ins
jp
inc
xchg
aas
icebp
cmp
cmc
out
mul
pop
sub
aad
push
repnz
sahf
pop
inc
pop
imul
add
push
dec
imul
mov
nop
in
xchg
les
xchg
jmp
mov
pop
int
cmps
stos
jb
mov
adc
movs
inc
jnp
inc
into
fucomp
xchg
lods
add
aad
shl
and
jle
outs
movs
fcomp
(bad)
in
stos
es
and
cdq
mov
imul
ror
jle
mov
out
fldenv
ffree
xor
pop
lds
(bad)
mov
and
jecxz
xchg
inc
ficom
stos
loopne
jae
inc
xor
data16
push
dec
dec
out
mov
imul
scas
mov
ss
adc
add
sbb
jl
inc
dec
pop
dec
cmps
pop
jge
jnp
ss
outs
mov
mov
push
in
pop
xor
outs
jecxz
mov
mov
(bad)
mov
lock
mov
loope
dec
inc
push
xchg
call
dec
dec
xlat
sub
in
(bad)
aam
sub
and
iret
(bad)
out
out
push
in
(bad)
out
arpl
mov
out
push
adc
not
call
push
dec
xchg
mov
int
push
cmps
jo
aam
or
sbb
sahf
lea
test
adc
push
movs
das
dec
dec
dec
mov
cmp
repnz
es
mov
xchg
xchg
or
cli
stos
sub
pop
(bad)
ds
mov
scas
or
jbe
je
sub
ret
scas
xchg
cmp
ins
xor
cli
sbb
mul
test
jmp
sbb
int
sbb
daa
dec
jae
lds
jbe
inc
push
stos
jle
ds
stc
jmp
retf
fnclex
aas
and
xor
dec
imul
push
scas
jnp
or
jmp
(bad)
fucomi
fs
mov
(bad)
sub
cli
pop
repz
mov
cli
mov
inc
dec
clc
es
sahf
jbe
jnp
mov
stos
sti
xlat
ror
jg
mov
jmp
retf
push
fsub
arpl
mov
setbe
ins
mov
add
es
not
out
retf
shl
out
(bad)
(bad)
fs
neg
mov
sbb
mov
icebp
xlat
(bad)
mov
mov
mov
or
xor
xchg
xchg
cmp
add
inc
and
adc
and
jbe
xchg
aad
pushf
(bad)
jg
sub
cld
xchg
jmp
sub
stos
arpl
xchg
(bad)
in
ja
in
mov
xor
add
push
sbb
out
and
or
cmp
ins
add
jecxz
out
push
jle
clc
mov
repz
adc
loop
sbb
ins
cmp
jle
lods
mov
push
out
mov
retf
es
mov
(bad)
push
cmps
ds
lds
and
test
add
push
pop
cmp
adc
loope
iret
call
lds
jg
scas
mov
stc
add
inc
pop
push
fcmovnu
jbe
fimul
adc
push
sbb
mov
imul
adc
inc
ins
(bad)
retf
cs
fisub
xlat
loope
scas
imul
push
jbe
imul
cmp
(bad)
or
mov
mov
fiadd
cmp
loop
das
daa
ds
retf
dec
push
mov
xchg
cmps
sub
pop
xchg
cmps
jecxz
or
push
(bad)
movs
sub
push
pop
das
and
push
xchg
mov
cs
ds
or
loop
xchg
pop
sbb
inc
into
es
ss
mov
jle
ret
fsub
lea
jnp
popf
sti
push
jmp
push
sbb
popf
out
push
loopne
mov
mov
sub
sbb
jecxz
add
mov
jne
jmp
xchg
jle
ins
ret
lea
test
repz
stc
mov
sbb
movups
in
jbe
or
pop
xrelease
cdq
add
xor
sti
(bad)
loope
inc
mov
loop
adc
stos
popf
sahf
pop
dec
pop
sub
test
mov
mov
test
fiadd
jg
popa
out
cmp
sbb
jne
cmp
shr
fisub
sub
or
lods
loope
loope
shl
push
or
xchg
or
dec
inc
es
push
fsubrp
addr16
inc
int3
pop
xchg
dec
scas
cmps
aas
aad
(bad)
pop
neg
xchg
or
lods
scas
fsubp
xor
push
inc
fwait
std
or
adc
mov
sti
jae
push
push
cs
push
dec
pop
ja
gs
inc
in
jle
rcl
dec
mov
out
mov
aaa
and
fst
test
push
or
mov
(bad)
aas
and
mov
mov
mov
push
jb
adc
ror
imul
or
das
push
mov
push
mov
fldcw
aas
mov
(bad)
out
mov
ins
dec
or
unpckhps
stc
in
stos
in
jle
scas
lahf
fcmovb
and
and
(bad)
int
cmp
or
mov
push
add
jg
jmp
retf
add
fdivr
mov
cwde
ds
arpl
xchg
push
xlat
and
xor
pop
sbb
test
xchg
or
shr
push
inc
gs
mov
push
sbb
loop
into
and
(bad)
lock
push
sti
loop
sbb
jl
movs
in
xchg
push
(bad)
ret
(bad)
imul
or
dec
lea
into
inc
ja
lods
mov
lahf
xchg
ins
call
cmp
outs
aaa
adc
mov
mov
mov
push
add
pop
or
mov
stc
xlat
jg
push
push
and
and
push
jns
adc
test
mov
out
ficom
mov
outs
retf
movs
push
jnp
mov
mov
push
xchg
inc
mov
hlt
stc
outs
ds
outs
sub
jmp
mov
xchg
cld
dec
(bad)
lahf
or
(bad)
jle
out
int
mov
mov
inc
or
(bad)
push
out
mov
xchg
clc
(bad)
cs
dec
ds
push
out
xchg
and
aas
data16
jbe
aad
xchg
rol
mov
mov
sbb
jnp
int
add
mov
mov
jns
jb
lock
push
xchg
dec
fwait
mov
jmp
mov
mov
ud2
jle
sbb
push
or
sar
movs
jmp
cmp
sub
bound
push
push
lods
push
stos
aas
and
mov
in
mov
and
imul
cmp
mov
adc
xlat
call
push
pop
push
cmc
sbb
(bad)
mov
jbe
cmp
cmps
adc
add
pop
into
cmp
mov
int3
jmp
leave
retf
fld
add
das
sti
push
fmul
(bad)
call
(bad)
cmp
bound
jnp
stc
jb
shl
movs
data16
cmps
xor
stos
sub
shr
push
inc
sbb
xchg
std
fst
ss
cdq
sub
inc
jns
aam
dec
jns
mov
loope
pushf
sahf
pop
inc
push
cli
es
mov
test
retf
ret
jbe
repz
push
push
mov
mov
arpl
dec
les
inc
pop
movs
repz
pop
mov
adc
jno
sti
fldpi
mov
mov
adc
imul
push
ror
shl
mov
es
sub
(bad)
(bad)
(bad)
mov
inc
sti
or
dec
imul
(bad)
mov
rep
sub
inc
mov
push
push
inc
pop
retf
inc
push
mov
test
aam
lock
cmp
sbb
adc
add
ss
xchg
adc
or
mov
pop
sub
popa
ror
inc
jbe
push
sub
adc
data16
jns
sbb
mov
sbb
push
mov
inc
into
nop
(bad)
jmp
sti
loop
or
aaa
cs
and
jge
lea
ficomp
xchg
loop
enter
sar
mov
sbb
popa
pop
add
push
fidiv
out
push
(bad)
mov
dec
xlat
xor
fist
push
push
xor
je
inc
fcmovu
lods
and
sti
push
ret
push
(bad)
pop
retf
div
and
xchg
sub
mov
into
adc
cmps
adc
mov
mov
sub
loopne
pop
leave
inc
mov
add
aaa
and
sti
cmps
fadd
sahf
ss
imul
es
push
mov
pop
int
push
mov
rcl
sub
xchg
repz
repnz
out
mov
mov
xchg
mov
sub
push
aam
push
out
scas
mov
es
push
xor
mov
retf
or
test
xchg
mov
add
loop
sahf
jecxz
stc
(bad)
jb
mov
push
inc
jbe
jge
lods
sti
inc
femms
imul
out
adc
xor
ja
push
test
push
sbb
mov
lds
push
mov
mov
add
mov
push
xchg
jmp
mov
push
sub
sahf
push
rcl
inc
fs
(bad)
mov
xor
push
adc
inc
iret
imul
lods
dec
and
mov
jg
cdq
or
jae
xor
mov
xchg
mov
rol
daa
cmp
fs
pop
fscale
inc
cmps
retf
xor
(bad)
outs
fwait
jle
test
popf
pop
dec
cmp
pop
xchg
push
stc
jmp
jb
test
xchg
(bad)
dec
retf
mov
(bad)
cli
mov
cmps
pop
mov
or
dec
and
lods
aaa
nop
ret
inc
ins
int
test
push
retf
out
es
and
jge
add
dec
call
stos
inc
push
cli
dec
imul
rcl
stos
mov
sub
or
data16
into
dec
xlat
mov
int
cmp
inc
mov
push
push
ja
loopne
out
dec
mov
pop
out
xor
popf
sti
(bad)
ins
(bad)
(bad)
inc
retf
mov
aam
addr16
aad
cmp
jp
push
sbb
(bad)
push
xor
ret
hlt
and
bound
dec
imul
xchg
jl
rol
pop
sbb
repz
mov
mov
scas
mov
or
or
repnz
sti
(bad)
mov
fdivp
sbb
(bad)
xchg
adc
jno
inc
jbe
(bad)
inc
sbb
mov
adc
push
lds
mov
in
push
push
rcl
rep
retf
mov
adc
ds
sti
lahf
cmp
xchg
nop
ss
les
leave
pop
retf
(bad)
xchg
mov
push
dec
and
cmp
adc
int
and
in
call
ds
pop
push
xchg
ins
sub
xchg
test
scas
pusha
in
in
mul
add
jbe
cmp
cmc
loope
inc
pop
aad
into
dec
popf
mov
fimul
out
adc
fst
mov
(bad)
xor
aas
out
popf
xchg
in
sbb
mov
mov
sub
into
push
mov
xor
add
inc
sbb
jg
dec
mov
pop
jle
mov
mov
cmps
movzx
mov
pop
aam
or
sub
fild
lahf
outs
ss
(bad)
mov
retf
inc
sbb
aad
mov
or
fcmovne
mov
xchg
cmp
test
sbb
dec
add
xor
scas
out
repz
inc
iret
aad
jae
mul
in
outs
adc
cmps
mov
fwait
add
mov
cmp
inc
es
jae
lods
inc
sub
and
mov
fbld
jge
out
xor
jle
and
popa
pop
ficom
and
mov
iret
test
and
stos
movs
cmp
sbb
sub
mov
mov
ds
cmps
fwait
cmc
loope
fwait
xchg
sub
imul
mov
push
pop
std
stos
scas
ss
int
cmp
stos
sub
push
xor
and
not
jle
cmp
push
sbb
push
into
adc
and
(bad)
fistp
cmc
dec
shl
push
pushf
inc
out
sbb
dec
adc
or
jns
cmp
pop
or
cmp
cmp
jmp
sub
xchg
xchg
data16
push
into
shr
ins
sahf
sbb
push
stc
into
cli
jno
call
fcomi
data16
fisttp
jne
push
inc
gs
ins
and
xor
mov
das
jmp
or
aam
aad
(bad)
in
adc
xlat
aaa
adc
adc
push
pop
push
jno
sti
fnstenv
into
sbb
retf
or
add
fsubr
jb
inc
and
ins
cmp
jo
pop
mov
inc
fdivr
pop
fst
pop
mov
arpl
in
jecxz
lods
mov
lods
xor
sbb
into
iretw
outs
in
stos
mov
push
jle
lods
in
and
icebp
jmp
int
or
in
adc
(bad)
repz
fidiv
inc
iret
gs
cwde
fst
and
mov
daa
in
inc
add
push
aam
sub
cdq
int
cmp
dec
pushf
call
fldcw
xor
mov
in
adc
and
sbb
push
lock
and
dec
xchg
aam
shr
xor
mov
retf
(bad)
das
and
mov
and
hlt
out
xor
lahf
retf
jno
dec
push
cs
aad
jmp
test
loop
aad
dec
jb
outs
sub
fmulp
aad
mov
push
pop
push
repnz
or
ins
ds
fcomp
ins
cld
jge
lea
into
xchg
into
pop
(bad)
outs
out
bound
xchg
push
mov
in
xchg
(bad)
push
lds
in
adc
sar
mov
mov
xchg
ret
mov
(bad)
xchg
retf
xchg
jle
ins
div
dec
mov
stos
push
into
xchg
or
sar
ins
mov
mov
xor
xchg
cmps
mov
int3
jmp
jmp
xor
jmp
push
jnp
jns
push
cmps
push
pop
mov
retf
cs
idiv
mov
xor
mov
ret
push
imul
mov
cld
mov
add
into
fidivr
loop
stc
pslld
mov
cmp
mov
push
pop
inc
add
mov
(bad)
and
mov
leave
jo
mov
stos
retf
add
dec
or
in
inc
into
mov
movs
stos
pusha
mov
out
ret
scas
or
jne
xchg
mov
or
push
das
jl
fisubr
adc
jnp
or
fimul
cmps
jae
sbb
(bad)
sub
ficomp
and
adc
ds
out
mov
sub
push
cmp
(bad)
jno
jge
movs
jmp
out
pop
ror
imul
stos
jecxz
(bad)
retf
cld
retf
adc
xchg
push
ss
jbe
(bad)
dec
push
fisub
ret
pop
repz
jge
jae
fnstcw
mov
(bad)
repz
bound
ret
(bad)
xor
sub
inc
xor
not
retf
sahf
cmp
(bad)
shr
sar
add
std
imul
mov
inc
cdq
xchg
mov
retf
fs
xor
fdivrp
xor
xchg
pop
test
add
out
mov
push
bound
loope
add
push
aaa
jne
adc
rcl
inc
ret
xor
push
movs
xchg
sub
mov
repz
inc
outs
push
xor
pop
aad
mov
pop
jbe
out
pop
mov
sub
mov
stos
jno
mov
mov
ins
mov
hlt
or
inc
pop
jecxz
stc
jp
xor
mov
adc
ins
arpl
push
test
lahf
movs
xchg
cmps
jmp
imul
jecxz
fld
pop
dec
mov
daa
in
jmp
je
push
mov
cs
inc
data16
dec
pop
jo
sahf
cmp
sub
sub
mov
clc
test
fwait
jbe
xchg
push
dec
ja
pop
fwait
pop
xchg
xchg
imul
mov
adc
stos
(bad)
cmc
mov
jb
inc
paddq
(bad)
adc
add
scas
outs
icebp
adc
test
mov
and
js
mov
aaa
pushf
out
xor
out
and
dec
adc
cmps
mov
iret
rcr
xchg
add
sbb
push
out
jno
inc
loop
jmp
stos
sti
xchg
adc
xchg
cmp
int3
lea
mov
adc
scas
imul
mov
js
dec
stos
int
add
je
paddq
(bad)
loopne
(bad)
mov
cli
ins
outs
mov
push
(bad)
sti
movs
jecxz
jmp
(bad)
mov
mov
xchg
dec
dec
sbb
push
cmp
xchg
pop
mov
bound
lds
popf
sbb
mov
cmps
cmps
cmp
mov
dec
mov
stos
jae
xor
test
jnp
mov
jecxz
cmps
mov
(bad)
add
inc
rol
outs
scas
jmp
dec
mov
jmp
mov
idiv
or
popf
dec
sti
shl
lahf
das
pop
mov
jge
pop
sub
aam
sbb
mov
es
(bad)
movs
arpl
xchg
mov
sbb
pop
mov
jle
sub
or
rcl
mov
es
or
movs
ja
test
jne
or
push
sbb
std
pop
xor
mov
jp
pop
out
cmps
jae
fnstsw
inc
pop
jae
outs
mov
mov
inc
cld
fwait
jmp
xchg
mov
jns
mov
add
xor
mov
xor
fmulp
xchg
xor
pop
repz
adc
or
nop
neg
fimul
inc
fstp
inc
fiadd
adc
faddp
adc
jecxz
mov
dec
dec
pop
mov
sub
sbb
arpl
push
scas
ss
pop
mov
movs
mov
jle
xchg
mov
mov
stos
popa
xchg
int
add
cmp
xchg
outs
ret
mov
mov
iret
and
xlat
into
es
xchg
cld
into
test
dec
retf
test
out
mov
cmp
mov
jbe
je
stc
xchg
inc
aas
into
out
mov
sar
pop
xchg
add
ja
jnp
pop
addr16
jmp
adc
mov
iret
sub
mov
cmp
ins
jle
jecxz
sahf
(bad)
mov
ss
inc
and
int3
xlat
iret
jp
jmp
mov
nop
scas
stos
sahf
xchg
arpl
mov
and
fwait
int
stos
mov
(bad)
jle
and
cmp
jb
retf
jl
lods
jmp
and
sahf
cmps
lahf
jmp
adc
xchg
dec
aad
sbb
jle
daa
cmps
sahf
repz
mov
popa
retf
add
adc
mov
dec
jne
cs
or
push
jno
sti
movs
jg
pop
mov
mov
inc
sar
mov
(bad)
dec
xlat
jg
xchg
std
fild
jno
rep
and
push
push
popf
adc
mov
cmp
sar
(bad)
(bad)
mov
mov
sti
es
(bad)
fwait
mov
xor
xchg
adc
fsub
outs
or
xchg
xchg
push
adc
jae
sahf
pop
jns
inc
jnp
ins
jle
mov
push
jne
outs
add
lds
inc
sti
retf
std
inc
xchg
lods
scas
in
lods
inc
pop
repnz
adc
dec
test
(bad)
xchg
jmp
pop
rdtsc
or
or
mov
jns
add
push
push
mov
clc
daa
cmp
sahf
or
scas
push
loop
pop
inc
and
int
inc
push
jl
sar
xchg
movs
mov
lahf
out
int
out
bound
fild
push
hlt
loope
push
aad
sub
jge
pop
cli
sbb
xchg
jge
push
std
arpl
mov
(bad)
and
pop
imul
adc
mov
cmp
into
mov
mov
sti
xor
shl
sub
sbb
es
fiadd
xlat
xchg
xchg
adc
jge
out
dec
cmp
ret
out
imul
iret
in
imul
not
loope
icebp
loop
div
and
lds
xlat
jge
scas
bound
out
and
push
push
jge
jp
push
into
sahf
push
jmp
fcom
retf
cs
push
add
add
rol
dec
pop
cmp
(bad)
cli
jns
sbb
mov
daa
leave
fild
mov
mov
rol
gs
push
inc
mov
lock
xor
xor
jbe
xchg
test
fs
mov
sub
sub
sahf
lea
push
mov
outs
mov
(bad)
cdq
sbb
pop
test
pop
shl
arpl
outs
mov
jmp
fiadd
mov
sbb
or
clc
cmps
out
xchg
(bad)
xchg
jle
jecxz
out
ret
xlat
xor
out
pushf
inc
wbinvd
(bad)
data16
and
stos
ror
movs
xchg
fist
idiv
jg
push
jecxz
(bad)
stos
mov
jbe
inc
mov
cmp
xchg
dec
jmp
retf
ret
adc
jecxz
xchg
mov
shl
mov
push
jmp
xchg
mov
add
push
jae
mov
iret
mov
(bad)
mov
scas
mov
ret
fidivr
jns
pushf
add
jbe
jnp
mov
mov
xchg
add
fwait
jg
outs
mov
test
pop
ret
push
push
out
cmps
and
dec
test
or
or
jecxz
and
iret
rcl
iret
imul
pop
push
cmp
outs
sbb
es
add
cmp
xchg
dec
dec
mov
cmp
and
aaa
or
jno
mov
mov
gs
loope
(bad)
sbb
in
cmp
mov
inc
mov
lods
adc
cdq
and
adc
mov
enter
jns
sub
mov
fadd
add
jmp
jmp
das
mov
retf
test
sbb
mov
xor
jnp
popa
loop
fwait
inc
push
and
xchg
mov
dec
aaa
imul
mov
mov
retf
cld
out
scas
mov
test
nop
xor
xchg
pop
jo
imul
and
jle
sbb
inc
dec
xlat
aam
and
push
jne
stos
jbe
in
push
aam
lock
push
adc
pop
mov
ret
jbe
(bad)
adc
loope
push
xor
sar
add
cs
ins
lods
repnz
mov
lods
mov
arpl
ds
in
repz
xchg
mov
mov
add
inc
lods
push
leave
push
loop
push
je
adc
inc
push
xchg
addr16
in
or
jmp
test
mov
daa
scas
repnz
sub
add
stos
std
fwait
ror
addr16
xchg
pop
mov
push
push
jg
(bad)
or
pand
add
push
imul
repz
outs
or
pusha
dec
and
xor
push
xchg
adc
add
jle
neg
stc
adc
stos
ss
cmps
sub
(bad)
jge
ins
xchg
sbb
cmp
and
cdq
lds
dec
(bad)
and
push
pop
out
push
ds
jae
pop
jno
push
loop
push
push
add
repnz
lods
cmp
or
cmp
(bad)
imul
pop
push
inc
pop
in
inc
and
add
int
mov
rcr
or
sub
popf
call
cdq
popf
and
arpl
mov
lock
xlat
push
pop
jmp
imul
xor
push
mov
sahf
ret
or
ins
mov
jg
push
inc
ins
jbe
lds
cmp
arpl
aad
unpckhps
inc
xor
rep
(bad)
leave
mov
inc
ds
jmp
adc
xchg
inc
push
push
cmp
cmp
(bad)
int3
inc
pop
and
push
sub
aad
jae
and
mov
xchg
mov
(bad)
dec
add
jecxz
pop
loop
push
stos
sub
inc
sbb
adc
outs
cmp
jns
imul
(bad)
add
int3
popa
sti
dec
xor
(bad)
iret
test
loope
dec
sub
pop
cmp
jecxz
sbb
push
mov
rep
and
mov
jmp
dec
ds
ins
ret
aad
ret
ret
and
shl
call
mov
fimul
icebp
push
stos
movs
cmp
cmc
jmp
mov
add
push
mov
or
jae
rol
stos
(bad)
xchg
mov
retf
fwait
pop
fs
pusha
pushf
inc
es
pop
push
pop
(bad)
jmp
mov
sub
mov
push
dec
push
aaa
imul
sbb
popf
cmp
in
or
test
dec
rcl
xchg
std
stos
sub
jbe
bound
jge
ss
mov
es
icebp
push
xchg
push
(bad)
mov
cs
or
jae
ds
mov
fwait
stos
mov
inc
push
xchg
icebp
adc
jmp
mov
cmp
sub
stc
in
js
and
pop
inc
adc
inc
dec
push
sti
(bad)
cmp
mov
inc
in
js
(bad)
ss
add
ja
mov
cld
jmp
sbb
(bad)
jecxz
pop
push
sub
fisub
push
add
add
jmp
imul
hlt
push
mov
imul
push
inc
and
(bad)
in
lahf
mov
push
or
push
into
cmps
xchg
mov
pop
enter
(bad)
fidivr
pop
mov
in
xor
cmp
add
gs
adc
icebp
cmps
les
out
xor
and
add
dec
add
jg
out
adc
push
out
inc
lods
cmc
xor
pop
pop
ins
das
repnz
dec
outs
ret
inc
retf
pop
mov
repnz
int
dec
mov
mov
push
jns
xchg
addr16
in
sub
and
retf
jg
fidiv
mov
mov
lods
loope
dec
sub
lods
(bad)
std
sbb
test
call
add
scas
push
xor
push
lods
jl
es
push
scas
push
es
ins
cmp
push
sti
es
fidiv
sahf
ds
adc
jbe
ret
push
dec
mov
shl
dec
les
push
dec
movs
sbb
scas
inc
fldenv
xor
outs
push
scas
xchg
arpl
cdq
out
not
pop
jbe
jmp
cmp
dec
add
data16
bound
in
xor
imul
jle
cmps
cs
or
mov
retf
jmp
pop
xor
mov
outs
sub
imul
xchg
pop
adc
push
test
es
sub
xchg
mov
out
xlat
xchg
ret
icebp
(bad)
pop
imul
out
jbe
fdivr
fld
xor
pop
gs
jb
jo
jns
xchg
shl
or
xor
xchg
or
int3
xchg
inc
fs
shr
out
mov
outs
dec
data16
shl
shl
(bad)
fsubr
(bad)
cld
retf
ficomp
push
(bad)
call
ds
cs
es
sbb
neg
or
ficom
test
inc
xchg
push
pop
add
out
mov
inc
dec
ret
cmp
dec
ret
popf
mov
sub
push
mov
shr
pop
jge
cli
inc
mov
rcr
inc
call
and
and
cmps
out
mov
rol
cmps
popa
ins
dec
push
retf
jne
jae
test
jbe
aad
sbb
dec
or
mov
xchg
stc
call
sahf
mov
and
arpl
rcr
repz
sbb
jecxz
jge
lea
fcmovu
add
scas
ss
sti
movs
popf
sub
sbb
jl
pop
pusha
lods
fldcw
cwde
jae
jecxz
push
dec
cmovo
mov
dec
lods
(bad)
cmps
sub
outs
mov
push
int3
push
out
imul
adc
cli
and
fdiv
icebp
xchg
rcl
mov
popf
fnstcw
scas
pushf
jmp
fs
pusha
sub
(bad)
mov
(bad)
xchg
outs
dec
mov
pop
dec
lds
stc
scas
scas
retf
(bad)
fmulp
push
pop
ja
addr16
or
cs
jle
mov
push
cmp
mov
inc
jbe
mov
sub
jae
mov
arpl
xchg
ins
cmps
mov
push
leave
sub
mov
inc
push
xor
stos
ret
imul
xchg
jl
push
pop
in
add
sbb
add
fwait
jle
mov
lods
cmp
movs
ret
inc
pop
or
xchg
int
in
mov
ss
mov
xor
shl
ss
mov
cmp
mov
push
mov
dec
inc
pop
neg
gs
repnz
addr16
mov
std
int
jl
sbb
ja
bswap
sub
arpl
retf
sahf
jmp
stos
leave
aas
popf
cmp
neg
outs
mov
cmp
and
mov
ds
retf
xor
out
or
jb
pop
sti
push
inc
js
mov
xchg
mov
das
add
push
sbb
cmp
cmp
jecxz
sahf
pop
pop
fwait
mov
inc
movs
inc
(bad)
fsubrp
and
iretw
jbe
outs
shl
cmp
out
jmp
xchg
lahf
sbb
jbe
add
cmp
jle
lods
or
add
(bad)
test
add
jo
sub
mov
mov
jbe
mov
mov
xor
xor
(bad)
icebp
xchg
ror
pop
pop
inc
cmp
adc
mov
cmps
add
inc
fisttp
jle
gs
sbb
inc
scas
jl
pop
push
ret
sbb
loope
push
jecxz
pop
sar
mul
sbb
movs
or
mov
retf
outs
mov
lds
inc
jmp
and
mov
push
es
scas
cli
lahf
push
es
ret
test
aad
pop
mov
or
adc
jbe
pop
adc
jge
and
movs
or
ss
in
fst
add
jbe
jnp
call
je
retf
add
mov
jbe
inc
xchg
ds
cmp
sahf
daa
mov
mov
scas
jne
inc
fcomp
and
and
iret
sub
out
out
dec
jp
out
mov
adc
ss
test
fst
pop
pusha
or
cs
js
push
push
(bad)
cli
repz
push
mov
mov
retf
push
ror
pop
jle
rol
ret
xchg
xchg
cmp
cdq
stc
dec
or
scas
jb
rol
add
cdq
out
ja
repnz
add
out
mov
es
adc
dec
test
out
retf
inc
mov
jnp
stos
and
fsubp
jae
movs
xchg
sub
dec
mov
cmp
sahf
lea
xor
ja
jae
jbe
mov
ins
dec
or
cmps
popa
mov
add
das
retf
fild
xchg
outs
icebp
push
shl
xchg
cmc
out
dec
sahf
ds
cmp
and
xchg
outs
bound
sbb
adc
jno
xchg
push
sahf
data16
out
and
sbb
imul
or
mov
scas
scas
test
jbe
cdq
out
mov
ret
lea
pop
pop
sub
mov
dec
mov
jp
(bad)
xor
or
(bad)
ss
xchg
sub
fcomp
dec
test
daa
outs
test
dec
push
stos
imul
or
mov
jb
pop
shl
and
adc
out
jle
add
test
scas
cvtdq2ps
rcl
mov
in
(bad)
adc
imul
(bad)
sti
jl
es
(bad)
push
iret
cmps
mov
or
sub
mov
into
and
ror
in
xchg
cdq
test
and
shl
jle
and
mov
out
mov
lods
sbb
loope
dec
lods
mov
jle
mov
movs
aad
fcom
or
(bad)
fldcw
push
add
es
inc
dec
loop
and
cmps
pop
sahf
movs
xchg
mov
stos
js
xchg
addr16
sti
jge
sti
xor
jae
movs
mov
add
popf
mov
bnd
xchg
(bad)
fld
not
into
fdivr
add
bound
pop
(bad)
jmp
(bad)
dec
mov
sub
sahf
jbe
xchg
mov
scas
(bad)
pop
ret
adc
push
loope
push
jge
mov
dec
daa
jg
in
mov
es
aas
movs
out
in
out
es
pop
xor
hlt
pop
or
push
pop
outs
stc
mov
retf
stc
and
adc
out
cmp
jecxz
xor
dec
sbb
ins
enter
ins
popa
stos
inc
adc
lea
mov
sbb
jle
(bad)
mov
out
and
inc
sahf
dec
push
mov
add
jbe
bound
fwait
mov
push
dec
mov
xor
popa
stc
dec
inc
aam
scas
scas
and
xchg
add
jbe
in
inc
movs
inc
mov
cmp
push
sbb
in
ins
aam
aam
js
test
repnz
xchg
shl
pop
cmp
adc
es
xchg
fisubr
cmp
push
xchg
outs
jmp
pop
pop
repnz
repz
into
aaa
xlat
fcmovu
in
mov
jae
out
das
into
or
push
jmp
mov
ror
jle
mov
pop
out
outs
inc
daa
in
cmp
adc
div
es
add
(bad)
or
xchg
or
pop
add
clc
sbb
iret
(bad)
mov
inc
xchg
(bad)
sbb
cmps
lds
xchg
mov
ins
mov
inc
jbe
sub
mov
add
outs
mul
int
jg
cmps
repnz
shr
xor
jb
cs
xor
jmp
hlt
mov
mov
aaa
xlat
mov
add
mov
push
shl
and
gs
or
mov
push
ficom
xchg
test
das
xor
jns
bound
dec
das
jp
dec
icebp
sbb
push
int
mov
in
fidivr
cdq
daa
adc
scas
lods
adc
add
fidivr
bound
arpl
jecxz
push
movs
cmp
fsubrp
sahf
adc
loop
mov
add
sbb
retf
push
mov
iret
popf
adc
dec
fisttp
xchg
es
jl
cs
mov
daa
push
dec
popa
push
inc
push
sti
push
inc
not
fs
jbe
jns
mov
or
sbb
cli
aam
push
je
inc
xor
sub
xlat
shl
adc
nop
push
xchg
and
in
inc
out
inc
orps
dec
dec
mov
(bad)
dec
retf
cmps
xchg
mov
lahf
(bad)
std
jbe
outs
jle
loop
jmp
mov
in
je
dec
lea
cmps
mov
cmp
or
iret
int
mov
xchg
inc
aas
cmp
retf
jge
mov
mov
mov
fiadd
or
lods
jbe
mov
mov
addr16
xchg
out
outs
outs
repnz
adc
ficom
test
test
inc
jns
sahf
(bad)
sub
shl
sbb
cmp
push
stos
sbb
mov
dec
push
dec
pminsw
pop
shl
xchg
jb
retf
push
mov
sub
pop
(bad)
xchg
out
adc
test
aad
(bad)
out
sub
lea
fst
lds
dec
jno
pop
imul
sub
cmps
jb
mov
(bad)
addr16
cmc
test
lods
movs
mov
dec
adc
xor
xor
adc
push
pop
or
cs
ffree
mov
std
out
jne
and
ss
inc
sub
xchg
fild
dec
dec
es
xchg
repnz
push
add
jnp
inc
test
das
mov
or
inc
ja
jmp
adc
div
inc
ret
fiadd
mov
loope
out
sahf
jmp
mov
mov
sub
outs
rcr
add
sbb
mov
xchg
jle
or
pop
outs
rcr
imul
xchg
push
(bad)
mov
les
cmp
(bad)
mov
ja
add
not
paddusw
loopne
push
mov
out
cmp
mov
rol
ret
adc
ss
imul
outs
sbb
jno
cld
lods
scas
lds
out
push
pop
or
cs
jnp
ret
push
sub
push
mov
frstpm(287
out
push
pop
or
or
shl
repz
and
jge
retf
cmc
push
mov
cs
cmp
adc
push
jmp
sbb
or
push
shr
dec
jb
or
sub
mov
cmp
arpl
(bad)
add
adc
pop
jecxz
(bad)
pop
movs
in
jo
int3
fwait
mov
mov
retf
mov
or
imul
imul
jno
rep
scas
(bad)
or
adc
icebp
ins
sbb
mov
(bad)
xchg
shl
mov
inc
es
mov
inc
movsx
add
or
xchg
sti
rol
or
cmc
out
shl
ret
fwait
mov
loopne
pshufw
add
push
jecxz
loopne
out
jo
pop
ror
nop
add
stos
push
xor
arpl
push
mov
or
xchg
ret
sub
sahf
and
ss
arpl
(bad)
sbb
rol
or
push
ret
xchg
adc
push
int3
rcr
push
jae
mov
icebp
jno
sub
dec
sbb
(bad)
dec
pop
fmul
cmps
ss
mov
mov
mov
cmps
mov
pop
retf
jb
fwait
repz
adc
and
mov
cdq
arpl
cmps
cmps
ss
pop
jno
jecxz
ja
add
push
retf
inc
(bad)
arpl
pushw
push
rcl
ss
mov
dec
dec
jne
outs
addr16
xor
into
xchg
mov
adc
mov
cs
mov
pmulhw
data16
cmps
(bad)
mov
add
mov
cld
je
cmps
or
cmp
mov
inc
fldlg2
enter
fild
js
shr
iret
daa
cmp
pop
sbb
jge
and
mov
mov
arpl
push
cmps
imul
mov
mov
ss
jg
mov
sti
mov
adc
mov
shl
mov
sbb
or
mov
cmps
fldenv
enter
mov
jmp
mov
sub
sar
cmps
sub
or
mov
jmp
push
inc
jmp
inc
jbe
add
movs
mov
inc
dec
or
sbb
jnp
mov
and
inc
(bad)
adc
jae
mov
xchg
jo
jecxz
fadd
jno
xor
in
leave
pop
or
fistp
adc
shl
repz
shl
add
inc
imul
and
cmps
jae
and
sbb
mov
or
ja
mov
fwait
iret
inc
fistp
pop
mov
sub
(bad)
cmps
seta
addr16
stos
scas
leave
pop
arpl
sahf
ss
retf
cmc
push
out
dec
sbb
in
xchg
mov
ret
xchg
neg
(bad)
out
xor
mov
(bad)
jmp
mov
push
mov
pop
ja
dec
into
imul
es
stc
cli
inc
mov
cld
cs
je
inc
mov
inc
push
jg
ss
rol
sub
mov
fwait
xor
inc
out
add
push
sbb
or
nop
rcr
stc
push
out
stos
scas
je
int
xchg
add
push
mov
adc
cmp
and
(bad)
or
fstp
mov
(bad)
mov
xor
xchg
sub
retf
pop
jle
dec
jne
push
fwait
mov
inc
mov
push
or
aam
pop
arpl
pop
test
neg
(bad)
(bad)
push
cld
iret
and
pushf
ret
inc
push
jo
adc
dec
or
mov
(bad)
cmp
outs
neg
out
add
cld
out
adc
mov
mov
add
cs
add
outs
call
mov
ss
icebp
test
pop
or
dec
dec
ret
(bad)
and
ss
(bad)
aas
mov
sub
mov
mov
jnp
mov
xor
lods
scas
clc
sti
(bad)
mov
jmp
pop
jecxz
(bad)
pop
sbb
sbb
and
push
xor
xchg
push
or
dec
adc
xchg
mov
mov
xor
push
mov
(bad)
test
jmp
(bad)
pop
out
movs
nop
rcr
mov
jae
scas
jle
cmp
retf
mov
sar
lahf
cmp
pop
sub
ss
xor
icebp
xchg
sbb
hlt
lahf
cmp
pop
sub
fwait
jg
leavew
sti
add
or
pop
xchg
pushf
cmp
pop
push
ret
nop
idiv
es
fisub
push
ss
lods
sti
push
(bad)
iret
imul
ret
(bad)
pop
sbb
popa
stos
add
inc
stos
outs
leave
push
xchg
fstp
cdq
arpl
pop
mov
rol
mov
sbb
imul
and
cmps
test
xchg
xchg
push
ret
movs
movs
mov
dec
(bad)
sub
outs
push
or
jae
jg
lods
mov
add
jbe
mov
imul
or
shl
xchg
mov
out
sahf
fwait
xor
dec
cs
add
dec
adc
dec
dec
push
xor
mov
stos
scas
je
xor
jbe
mov
or
shl
dec
or
jno
cmp
inc
push
sbb
out
dec
sbb
pop
ins
dec
call
mov
out
add
cld
mov
xor
xchg
or
aam
into
or
iret
imul
out
mov
xor
outs
jnp
xchg
aad
or
push
inc
or
pop
sbb
sahf
mov
scas
je
arpl
inc
jae
lods
add
outs
lea
sbb
repz
(bad)
adc
movs
push
push
popf
xchg
mov
movs
mov
jle
dec
mov
mov
mov
inc
cdq
retf
mov
jns
mov
mov
xchg
push
xchg
and
fiadd
mov
cli
sbb
cmp
imul
stos
jecxz
mov
lods
scas
sbb
rdmsr
mov
pop
sti
push
(bad)
icebp
idiv
mov
das
ret
(bad)
cmp
add
popa
mov
fwait
mov
inc
je
mov
lds
dec
repnz
(bad)
cmp
xchg
jnp
out
add
fist
jbe
(bad)
(bad)
imul
cmp
push
movs
xchg
mov
out
leave
xchg
int
pop
mov
retf
xor
shl
aad
mul
jle
stos
mov
stos
scas
je
sub
test
pop
or
and
in
mov
dec
dec
pop
jle
xor
sahf
sti
addr16
xor
lods
bound
xor
cmps
loopne
xor
jge
add
imul
xchg
mov
xor
stos
scas
cmp
inc
push
dec
xor
sti
xchg
mov
rol
repz
pop
push
jmp
push
mov
mov
loopne
sub
retf
jnp
mov
push
inc
jg
adc
loop
test
adc
mov
pop
jle
xor
sahf
sti
addr16
mov
inc
jl
mov
jns
(bad)
dec
inc
fidivr
or
fisttp
push
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
not
cld
push
add
mov
sar
fidiv
js
cmps
inc
(bad)
mov
xchg
outs
sub
xchg
mov
outs
or
in
cmp
jle
pop
jo
(bad)
sahf
cmp
fisub
sahf
sahf
ss
push
mov
jo
ficom
cwde
push
xchg
or
inc
test
pop
jo
inc
or
add
xchg
sub
scas
or
or
mov
loopne
out
(bad)
dec
(bad)
jle
outs
cmps
sahf
push
mov
mov
xchg
into
test
addr16
push
xchg
cmps
scas
clc
xor
(bad)
(bad)
pop
cmp
fiadd
push
(bad)
fs
mov
test
pushf
jo
js
inc
movs
sub
inc
enter
mov
jg
lahf
sbb
mov
sar
sub
js
and
nop
adc
or
add
sbb
add
fadd
xchg
xchg
dec
cmps
dec
stos
in
callw
xor
mov
push
adc
cmps
push
pop
mov
xchg
outs
(bad)
lods
out
dec
neg
mov
sub
fiadd
mov
xchg
push
cmps
sub
pop
outs
es
jle
outs
neg
es
fiadd
mov
xchg
cmps
mov
pop
(bad)
dec
outs
(bad)
out
push
sahf
push
mov
mov
jbe
push
cld
data16
cs
push
cmps
sub
pop
outs
data16
jle
outs
neg
scas
push
fiadd
push
(bad)
cs
jbe
into
push
xchg
mov
cs
(bad)
(bad)
(bad)
jle
outs
idiv
mov
mov
scas
xor
inc
(bad)
mov
push
test
xchg
mov
(bad)
dec
aam
out
jbe
push
jbe
mov
jbe
push
mov
out
jbe
out
cs
shl
and
mov
mov
mov
out
mov
xchg
es
shl
jnp
imul
mov
mov
inc
xor
data16
mov
xchg
push
iret
dec
fnsave
data16
and
out
es
adc
xchg
imul
les
in
hlt
pushf
add
adc
aaa
mov
push
add
je
or
cmp
inc
test
mov
(bad)
dec
les
imul
push
xchg
mov
cmps
cs
jle
jbe
and
mov
mov
push
(bad)
mov
loope
sete
into
outs
es
xchg
neg
and
push
add
push
xchg
push
pop
(bad)
mov
jg
data16
and
push
xchg
test
ds
xchg
rol
es
xchg
neg
es
ss
es
push
add
out
xchg
mov
cmps
cs
jle
dec
(bad)
and
mov
mov
inc
xor
fs
out
xchg
xchg
aas
movs
push
data16
(bad)
mov
jg
outs
repnz
add
cmp
xchg
mov
xchg
es
shl
jnp
imul
mov
inc
enter
in
adc
movs
dec
aad
shl
out
xchg
popf
or
push
xchg
pop
inc
inc
data16
jns
xchg
cmp
sub
jle
xchg
neg
es
fild
(bad)
adc
xchg
imul
(bad)
dec
aam
loop
neg
push
scas
leave
fiadd
push
cli
out
jae
mov
mov
cmps
cs
pop
out
(bad)
jle
outs
(bad)
xchg
jmp
fiadd
push
xchg
outs
sub
cmps
cmps
inc
ds
cs
pop
lds
xchg
out
mov
sahf
cmps
dec
mov
inc
retf
push
out
push
xchg
fisub
dec
sar
xchg
(bad)
jp
mov
xchg
leave
fiadd
push
cli
data16
push
bound
xchg
cmps
cs
pop
(bad)
dec
xchg
jl
outs
idiv
es
xor
inc
int3
push
stc
outs
in
jae
mov
mov
cmps
cs
jle
dec
(bad)
add
scas
es
inc
int
sti
gs
out
xchg
xchg
aas
cmps
sub
es
xchg
(bad)
xchg
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
mov
cmps
cs
jle
dec
(bad)
add
scas
es
inc
into
test
xchg
cs
(bad)
dec
test
mov
inc
es
xor
es
push
add
jbe
jns
xchg
cmp
out
pop
cmp
jle
xchg
neg
(bad)
jbe
data16
mov
es
xchg
rol
xlat
jl
xchg
(bad)
xchg
mov
mov
mov
out
mov
cmps
cmps
xchg
ds
cs
out
(bad)
jle
outs
(bad)
xchg
mov
mov
inc
into
push
mul
out
xchg
mov
cmps
cs
pop
(bad)
dec
xlat
jg
outs
neg
daa
scas
cmp
dec
fcomp
imul
cdq
and
ins
enter
out
push
jno
mov
inc
enter
into
out
xchg
xchg
aas
cmps
das
mov
ror
in
gs
xchg
or
fiadd
push
jmp
jno
cmps
cmps
xchg
ds
cs
(bad)
dec
sar
data16
and
int3
pop
hlt
inc
data16
jns
xchg
push
data16
(bad)
dec
aam
loop
lock
add
sbb
sub
inc
in
fs
pusha
sbb
pop
xchg
and
les
pop
ret
mov
or
fs
out
jbe
xchg
xchg
push
data16
(bad)
dec
aam
loop
lock
add
adc
sub
pop
cmc
jb
pusha
or
cmp
imul
cdq
cmp
xor
fs
fild
mov
adc
cmp
dec
(bad)
xchg
scas
leave
(bad)
es
push
add
je
or
xchg
dec
(bad)
and
mov
mov
inc
enter
out
jbe
xchg
xchg
cmp
out
(bad)
jle
outs
neg
mov
inc
xor
fs
jb
or
aaa
mov
outs
es
xchg
neg
and
pop
repz
push
mov
cmps
cs
pop
(bad)
dec
aad
jecxz
icebp
xchg
jle
cmp
push
lds
ins
clc
pusha
push
nop
cs
shl
and
mov
sahf
data16
and
out
jbe
jns
es
shl
xchg
outs
or
cmps
push
mov
mov
out
mov
xchg
mov
cmps
cs
pop
out
(bad)
jle
xchg
or
mov
inc
xor
loope
cs
rcl
jle
ins
cmc
lahf
add
fiadd
inc
jbe
jns
es
rcl
pop
out
mul
cmps
push
mov
inc
into
test
loope
icebp
xchg
shl
(bad)
sbb
mov
inc
(bad)
jbe
data16
mov
xchg
xchg
push
data16
out
(bad)
jle
dec
out
push
jno
mov
inc
into
test
loope
movzx
es
(bad)
add
mov
xchg
scas
leave
fiadd
push
cli
inc
data16
jns
es
ror
cmp
neg
es
leave
fiadd
push
fs
jbe
cmps
cmps
inc
ds
cs
(bad)
dec
rcl
push
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
xchg
aas
movs
das
xchg
xchg
dec
sub
dec
out
push
jno
sahf
data16
and
push
(bad)
gs
cmps
ror
les
jnp
imul
mov
mov
push
(bad)
cdq
out
ja
cmps
cmps
inc
ds
cs
(bad)
dec
rcl
push
mov
mov
inc
int3
push
mul
sbb
add
pop
(bad)
dec
aad
jecxz
icebp
mov
mov
inc
xor
inc
data16
jns
xchg
push
data16
(bad)
dec
xlat
jge
outs
(bad)
xchg
mov
mov
mov
out
jbe
xchg
xchg
cmp
lds
xchg
outs
or
data16
and
push
std
inc
data16
jns
es
rcl
pop
out
mul
cmps
push
mov
inc
xor
data16
mov
xchg
xchg
arpl
pop
(bad)
outs
es
xchg
neg
and
pop
repz
icebp
mov
cmps
cs
pop
out
(bad)
jle
outs
neg
mov
inc
xor
fs
je
or
aaa
lods
and
(bad)
outs
hlt
jge
mov
push
out
fidivr
jmp
cmps
cs
jle
dec
(bad)
and
mov
mov
dec
ret
pop
icebp
jbe
fs
cmps
shl
jle
outs
neg
cmps
xor
dec
ret
imul
cmp
out
pop
cmp
jle
xchg
neg
and
pop
repz
sbb
pop
(bad)
mov
xchg
outs
or
and
pop
repnz
push
xchg
sbb
sub
dec
sub
mul
(bad)
adc
and
inc
mov
jns
xchg
cmp
sub
je
(bad)
cmc
xchg
push
xchg
sahf
data16
and
push
(bad)
cdq
out
ja
test
xchg
cmp
mov
jg
ins
repnz
add
data16
push
fsubp
out
jbe
xchg
es
shl
and
jno
mov
inc
into
test
loope
cs
shl
jle
xchg
(bad)
xchg
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
mov
cmps
cs
jle
dec
(bad)
add
mov
sahf
data16
and
test
push
jns
mov
cmps
cs
pop
out
(bad)
jle
outs
(bad)
xchg
mov
inc
daa
lods
aaa
fidivr
adc
cmps
cmps
xchg
ds
cs
es
(bad)
and
mov
mov
inc
enter
out
jbe
xchg
es
rcl
jle
data16
es
leave
fisub
push
(bad)
cdq
out
push
xchg
out
pop
cmp
xchg
outs
or
mov
inc
xor
out
jbe
jns
es
ror
es
(bad)
and
mov
mov
data16
push
(bad)
cdq
out
jbe
test
es
shl
and
jno
mov
mov
out
mov
xchg
pop
out
(bad)
jle
outs
or
push
out
fidivr
adc
test
pop
(bad)
mov
jg
outs
neg
daa
scas
cmp
data16
push
(bad)
cdq
into
out
xchg
xchg
aas
movs
sub
test
mov
xchg
scas
leave
fiadd
push
inc
jbe
jns
xchg
aas
movs
das
mov
shr
out
(bad)
xchg
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
mov
cmps
cs
mov
sbb
popa
add
test
push
(bad)
cdq
into
out
xchg
mov
cmps
cs
pop
out
(bad)
jle
dec
out
push
jno
sahf
data16
and
push
(bad)
cdq
out
ja
test
xchg
aas
mov
inc
fidivr
data16
es
and
out
jbe
cmps
cmps
xchg
ds
push
pop
(bad)
mov
jg
ins
hlt
pushf
add
push
mov
inc
xor
data16
mov
es
xchg
rol
es
xchg
(bad)
xchg
mov
sahf
data16
and
es
adc
xchg
mov
cmps
cs
jle
dec
(bad)
add
scas
es
inc
into
test
loope
cmps
xchg
ds
push
pop
(bad)
mov
pop
out
mul
cmps
push
mov
inc
xor
data16
mov
es
xchg
rol
test
cmps
push
mov
inc
xor
fs
jb
es
xchg
rol
es
xchg
neg
es
leave
and
push
cli
gs
out
xchg
xchg
aas
xchg
mov
cmp
jle
xchg
(bad)
xchg
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
xchg
aas
xchg
mov
cmp
jle
xchg
idiv
push
out
fidivr
adc
xchg
imul
(bad)
outs
es
xchg
(bad)
xchg
mov
sahf
data16
and
push
(bad)
cdq
into
out
xchg
mov
cmps
cs
mov
jecxz
repz
mov
inc
xor
out
jbe
xchg
xchg
mov
mov
pop
add
push
(bad)
test
mov
inc
cmp
pop
clc
jbe
shl
(bad)
rcr
ins
nop
fmul
sbb
and
xchg
repnz
mov
push
(bad)
into
sbb
test
ss
dec
adc
loop
sbb
cmp
sbb
or
mov
xchg
mov
sub
test
fs
lods
adc
push
(bad)
pop
inc
or
ins
push
inc
into
mov
adc
bound
mov
push
pusha
ficom
pop
aam
jmp
sar
sar
mov
adc
outs
ficom
pusha
and
xor
cld
mov
call
add
rcr
inc
fistp
xchg
sbb
(bad)
inc
int
stos
or
sbb
jge
pop
cli
fidiv
movs
or
jmp
pop
xchg
sub
add
data16
cmc
dec
icebp
cmp
or
ja
or
jp
adc
xor
inc
lds
inc
lds
mov
or
call
fs
dec
fiadd
mov
add
pop
pusha
fist
fild
mov
and
popa
mov
inc
fsub
adc
push
mov
pushf
xor
popa
loop
retf
sub
mov
gs
push
retf
pop
in
add
adc
jns
inc
shr
nop
push
and
out
jns
inc
sti
pop
mov
adc
and
dec
mov
jno
add
jo
mov
inc
fdiv
jns
and
jno
dec
rol
sbb
mov
movs
or
std
push
fst
fistp
or
clc
push
shr
push
xchg
test
push
push
fisub
pop
mov
es
icebp
pop
aad
aad
test
sbb
dec
xchg
jmp
or
or
icebp
pop
aad
aad
xchg
jmp
fisub
daa
mov
xor
aaa
mov
lods
dec
inc
(bad)
push
shl
adc
push
xchg
or
or
sbb
push
shl
outs
cli
xor
and
pop
pushf
ss
out
xlat
push
xchg
xchg
inc
mov
jmp
and
scas
es
cld
addr16
pop
aad
aad
xchg
mov
in
push
sub
sub
jbe
push
jmp
(bad)
dec
fiadd
iret
dec
xlat
sub
out
test
outs
cli
push
shl
add
jns
aaa
xchg
add
dec
(bad)
pop
sbb
mov
movs
or
stos
ja
dec
out
push
pushf
push
stos
xor
jg
dec
(bad)
and
dec
imul
sbb
cli
gs
fs
jo
jbe
psllw
pop
pushf
add
and
dec
imul
sbb
icebp
push
mov
or
add
push
in
ret
push
mov
es
retf
data16
mov
xor
dec
aad
les
lock
fisub
dec
div
out
adc
and
pop
jo
jl
push
mov
xchg
or
cmp
fcom
stos
sub
sub
dec
test
cmp
add
int
fidiv
sub
add
push
aad
imul
or
fld
pop
retf
inc
sahf
adc
add
out
ins
call
imul
sbb
iret
jbe
adc
mov
sbb
ds
aam
ret
cmp
cs
or
jmp
pop
pop
data16
xchg
out
jle
jno
cs
das
mov
pop
je
gs
iret
xlat
pop
mov
cmp
push
repnz
in
shr
jmp
jle
add
(bad)
data16
pop
xchg
test
mov
out
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
loop
pushf
mov
adc
xchg
sbb
gs
mov
mov
scas
ss
mov
bound
xchg
fidivr
cmps
or
jmp
mov
mov
dec
call
shl
ret
mov
stos
adc
scas
arpl
jae
outs
stc
pop
mov
mov
adc
out
not
pop
mov
mov
mov
xchg
add
jge
push
ficom
and
push
ja
jnp
dec
iret
pop
aad
mov
mov
jmp
jae
inc
icebp
push
mov
adc
ins
in
leave
pop
(bad)
cmps
cmp
call
enter
mov
sbb
mov
repnz
cmp
(bad)
seta
into
mov
adc
inc
push
js
add
xchg
dec
ret
sub
sub
in
(bad)
ficom
arpl
cmp
hlt
outs
repz
mov
sub
dec
mov
lock
push
retf
out
adc
push
js
and
pop
adc
jnp
or
push
rcl
xchg
or
(bad)
jp
call
mov
idiv
cli
xchg
test
add
mov
mov
inc
cmp
sbb
js
sub
mov
into
ficom
ds
xor
cmc
jp
push
lds
xlat
fs
neg
out
mov
xlat
inc
les
mov
push
inc
hlt
outs
mov
aam
sar
scas
sub
icebp
es
ror
inc
mov
or
out
ror
jle
cmp
out
scas
arpl
push
rcl
mov
dec
out
mov
mov
adc
sbb
rol
fstp
das
mov
adc
push
xchg
jle
sub
sbb
dec
loop
repnz
cmp
mov
pop
bnd
sub
pop
mov
fcmovbe
imul
sbb
mov
jecxz
lds
jnp
or
sets
addr16
mov
mov
or
push
jg
imul
enter
xchg
and
icebp
es
xor
retf
pop
fwait
das
mov
push
jnp
jnp
push
cmps
pop
shl
retf
and
out
cld
fld
push
in
into
ret
lods
jbe
xchg
xchg
ds
push
xor
mov
jmp
(bad)
sbb
retfw
call
jp
out
(bad)
ficomp
cmps
dec
cli
or
bound
adc
add
push
xchg
shr
push
rcl
mov
or
(bad)
adc
mov
ficomp
push
stos
sbb
call
sbb
push
push
mov
(bad)
jb
sub
jb
out
ret
inc
xlat
sub
cmp
out
push
cli
ja
inc
fadd
xor
call
aam
cmc
cmp
outs
aam
and
arpl
push
int
mov
add
pop
ret
sub
outs
neg
cmp
pusha
int3
fidiv
mov
or
neg
ror
ret
sub
xchg
jmp
pusha
fisttp
push
test
and
(bad)
(bad)
inc
in
lods
and
or
add
sti
jo
cmp
je
push
sub
sbb
push
mov
jle
sbb
xchg
call
push
test
inc
(bad)
and
jl
push
jmp
fidiv
xchg
jbe
jb
mov
pop
mov
mov
pop
jmp
mov
sahf
loop
sahf
cmp
push
fidiv
and
xchg
out
jmp
fidiv
jbe
scas
not
repz
mov
mov
cmps
and
in
outs
scas
jae
or
and
ins
in
pop
ror
jle
adc
jb
jae
push
fld
mov
sbb
push
stc
dec
aad
lds
outs
xchg
repnz
mov
imul
xchg
sub
sbb
jl
dec
in
shl
(bad)
and
clc
arpl
push
fisttp
push
mov
adc
pop
jno
jbe
inc
ret
dec
lds
movs
and
jmp
jae
inc
out
lea
call
into
push
les
dec
les
mov
mov
mov
jg
dec
repnz
mov
xchg
test
fwait
daa
cmp
add
sub
sbb
rcl
inc
mov
lods
cmp
jmp
jl
xor
pop
fidiv
inc
retf
inc
stos
sub
and
cmc
ficomp
shr
fsubr
mov
mov
inc
cld
fimul
push
mov
and
push
push
shr
ret
outs
mov
mov
push
ficom
(bad)
sub
xor
loop
stc
dec
ror
sub
and
icebp
pop
cld
rcr
pop
fisubr
mov
sbb
pop
repz
cmps
inc
lds
jge
sub
je
jnp
dec
int3
inc
(bad)
xor
aaa
mov
adc
cmp
test
push
push
retf
pop
call
add
dec
loop
ret
dec
fstp
outs
mov
jmp
gs
add
and
dec
aad
fsubr
mov
mov
push
mov
popf
xor
xor
sbb
xchg
push
lds
sub
(bad)
or
lock
inc
sar
pop
lea
inc
xchg
cs
add
pop
imul
push
loope
xchg
sub
sub
add
call
data16
adc
rcl
lds
jl
adc
jmp
xor
or
push
out
retf
inc
out
scas
dec
cwde
sub
push
loope
fistp
out
ja
or
sbb
pop
xlat
jp
jge
pop
cdq
and
mov
call
pop
fisub
into
das
xchg
cmp
leave
inc
enter
mov
mov
div
loope
rcr
mov
sbb
ja
popa
rol
mov
add
fisttp
imul
out
imul
cmps
outs
sti
mov
cmps
cdq
out
push
sbb
out
adc
loopne
call
mov
sub
bound
icebp
inc
scas
shl
inc
fidiv
stos
cs
mov
xchg
dec
in
fnstenv
mov
mov
jmp
data16
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
sub
fiadd
fdiv
arpl
or
jo
(bad)
dec
xlat
jle
cld
neg
es
das
fiadd
push
cli
jg
jb
xchg
(bad)
ds
mov
(bad)
dec
shl
push
push
push
repnz
ret
sahf
mov
mov
jmp
jmp
sub
mov
inc
scas
gs
into
pop
add
ins
not
popa
neg
cs
cmp
(bad)
jle
and
in
sbb
inc
jge
lods
data16
xor
fwait
rol
pop
(bad)
das
sub
(bad)
outs
mul
es
(bad)
push
mov
neg
cs
pop
xchg
cmp
xchg
imul
bound
inc
loope
mov
jecxz
repnz
or
cmp
jmp
mov
mov
shl
push
xor
inc
out
push
fcomi
cmps
or
sbb
jg
addr16
icebp
push
jmp
add
jbe
mov
clc
cmps
ins
dec
cmp
call
inc
mov
and
sbb
outs
stc
cmps
cdq
dec
jo
dec
jle
mov
mov
leave
inc
mov
dec
int3
xchg
pop
(bad)
sbb
retf
data16
cmps
sub
jle
imul
into
push
iret
sbb
dec
retf
push
outs
mov
movs
shl
(bad)
jle
xchg
lahf
in
addr16
xchg
push
ficom
mov
mov
(bad)
ror
mov
cmps
outs
mov
shl
jns
push
rol
push
mov
jmp
jge
pop
test
sub
test
addr16
es
sbb
adc
push
(bad)
jge
lds
add
fld
push
retf
inc
lods
adc
es
jmp
or
ud0
inc
lea
mov
lods
xor
imul
in
fnstenv
int
mov
frstor
jns
inc
(bad)
pop
cmps
inc
stos
addr16
(bad)
jae
iret
(bad)
hlt
push
mov
mov
mov
push
into
sti
addr16
jmp
adc
mov
jbe
retf
push
shr
mov
test
imul
ror
bound
sub
pop
push
pusha
repz
aad
mov
or
mov
adc
cmp
rcr
jl
pop
cwde
sub
dec
nop
sub
jmp
cli
sub
mov
pop
jnp
jle
pop
les
cs
ins
mov
mov
lahf
mov
cld
arpl
pop
cwde
add
and
das
xchg
mov
jge
bound
mov
mov
mov
mov
fst
inc
lods
xor
push
ins
mov
dec
xchg
imul
mov
xchg
sbb
cmp
jb
bound
aad
scas
pop
xchg
dec
lds
mov
out
retf
or
jmp
loop
retf
jp
fs
out
xor
dec
into
push
cs
out
ja
clc
jle
sub
push
aam
test
adc
mul
ret
xchg
push
fistp
jnp
mov
dec
test
add
stos
and
xlat
imul
jl
sahf
fcom
(bad)
in
je
or
jns
mov
loopne
mov
jg
iret
push
sub
sbb
jmp
out
gs
ss
(bad)
dec
push
jecxz
ror
push
cld
int
(bad)
dec
jmp
mov
out
lods
or
jle
and
scas
in
pop
cdq
mov
inc
rcl
push
jp
mov
lock
fiadd
test
fidivr
jmp
cmp
pop
sub
push
push
data16
popf
inc
mov
cmps
mov
out
lods
les
test
pop
fmul
scas
sbb
dec
ficom
jns
out
inc
jmp
sbb
movs
mov
(bad)
mov
cmp
sti
(bad)
fisttp
out
clc
push
xchg
cmps
iret
push
mov
data16
sti
xchg
pop
(bad)
xchg
and
(bad)
out
mov
into
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
neg
es
fiadd
push
(bad)
data16
jbe
xchg
xchg
cmps
cs
(bad)
dec
(bad)
jle
outs
test
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
sub
push
push
push
cli
in
jns
mov
mov
adc
mov
add
inc
dec
es
add
fld
test
pusha
in
jns
jle
push
loop
xchg
leave
test
addr16
fs
mov
push
inc
push
rol
int
stc
call
ror
icebp
fild
leave
out
sbb
retf
out
nop
jbe
je
ror
in
sbb
jmp
add
add
bound
mov
xor
mov
and
in
mov
pushf
aam
icebp
cdq
or
mov
popf
sahf
cmps
add
push
daa
or
in
ds
jbe
or
call
mov
and
popaw
loopne
mov
inc
mov
pop
inc
repz
popa
dec
lea
pop
inc
repz
inc
out
outs
jmp
mov
sti
cld
icebp
mov
cmp
lea
inc
adc
lea
xor
ret
js
sbb
lahf
bound
call
or
push
sti
adc
jb
dec
xor
add
leave
mov
popf
lds
mov
jb
retf
loop
mov
adc
ret
and
bound
jmp
push
lock
inc
loopne
adc
jbe
inc
push
dec
sar
and
bound
inc
scas
arpl
or
leave
and
mov
mov
jp
jp
stos
out
pop
aaa
cmp
jne
or
loop
inc
(bad)
or
rcl
and
arpl
pop
inc
out
push
int3
(bad)
out
inc
mov
xor
xor
push
mov
pcmpeqd
leave
test
push
push
xor
popa
rcl
mov
retf
pop
mov
retf
mov
stos
xchg
inc
mov
loopne
inc
inc
adc
inc
adc
add
stos
jno
out
mov
call
outs
jae
test
pop
push
adc
cmp
jne
or
jmp
or
fdivr
sahf
retf
sub
ret
stos
sub
and
pushf
dec
clc
enter
cmp
das
jae
enter
out
sbb
cmp
shl
inc
stc
push
adc
les
or
leave
test
mov
jmp
cdq
pop
adc
mov
inc
xor
jp
cmp
xor
in
jno
ja
and
repz
outs
bound
inc
stos
inc
pop
mov
enter
sub
push
mov
xor
repz
jae
in
xchg
(bad)
jmp
fild
movs
and
retf
js
ret
mov
outs
aaa
push
sbb
and
lea
(bad)
(bad)
mov
out
aaa
dec
or
and
ss
ktestb
js
cmc
and
lahf
push
jmp
shl
enter
adc
sbb
inc
pop
rol
lds
stc
xchg
ja
cmp
mov
jne
or
out
pop
scas
out
sbb
retf
xchg
nop
ja
arpl
in
sbb
add
xor
mov
lds
popa
dec
xor
lock
inc
in
jne
jmp
cld
dec
idiv
sub
data16
outs
cmp
jp
call
call
mov
pop
enter
inc
(bad)
push
pop
and
jmp
push
jecxz
mov
stc
fdivr
sub
xor
mov
pop
sub
jmp
add
pop
out
test
(bad)
call
jp
xor
mov
cmp
shl
mov
das
popf
(bad)
mov
mov
mov
mov
cld
js
fldl2e
dec
dec
sbb
push
xchg
lea
xor
add
test
adc
sbb
dec
mov
jle
cmp
retf
mov
repz
and
in
jno
test
aam
ss
xor
xor
(bad)
retf
mov
dec
(bad)
push
mov
popa
cmp
ins
push
inc
dec
or
stos
xor
lock
add
ja
add
mov
test
and
int3
loop
mov
jle
xor
adc
gs
inc
dec
mov
jbe
mov
pop
inc
(bad)
jle
gs
popa
lds
push
loop
cwde
jb
or
jmp
fwait
sbb
leave
jbe
inc
scas
add
in
gs
jmp
push
test
mov
stos
cmp
xor
jo
loope
adc
das
fs
mov
mov
fdivr
jmp
cmp
mov
outs
ss
xchg
(bad)
jmp
ror
inc
mov
fs
mov
inc
adc
int3
add
adc
push
dec
mov
adc
mov
mov
push
xor
mov
popf
mov
xor
sbb
retf
xchg
and
cmp
sub
and
addr16
test
xor
dec
add
jb
outs
out
ret
mov
emms
push
leave
test
jne
jmp
adc
mov
in
and
jle
dec
test
imul
scas
xor
mov
(bad)
fnsave
movs
jmp
sbb
inc
fisub
mov
cmp
jp
test
push
cdq
dec
popf
sahf
dec
mov
or
shr
int
mov
test
mov
xor
xor
adc
or
jb
out
cdq
retf
jle
xchg
js
dec
mov
xchg
outs
retf
adc
inc
push
shl
out
pop
popa
cmp
mov
mov
arpl
repz
push
lea
fnsave
cmps
jmp
mov
adc
mov
call
and
retf
je
pop
cmp
inc
push
in
xor
jecxz
cdq
push
and
adc
sahf
pop
popf
mov
adc
int3
add
xbegin
pop
(bad)
adc
xor
or
les
add
mov
jp
and
adc
xor
in
into
out
xchg
call
gs
mov
jbe
mov
and
int3
mov
jb
cmps
stc
fild
cmp
add
repz
fwait
mov
outs
shl
mov
ja
mov
loope
outs
xor
adc
xchg
pop
clc
ret
in
retf
pop
cmp
addr16
test
mov
sbb
and
cmps
(bad)
mov
push
xchg
in
jb
adc
fwait
jae
test
(bad)
and
(bad)
sti
push
mov
pop
inc
repz
in
retf
sbb
mov
xor
xchg
mov
aad
add
pop
mov
ins
in
inc
inc
out
in
mov
adc
aaa
repz
test
sub
sahf
pop
out
out
push
push
xchg
pop
test
sub
mov
nop
nop
nop
nop
nop
nop
pop
jge
ins
aaa
pop
daa
dec
call
or
sbb
or
jl
ins
push
neg
pop
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
sbb
addr16
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
cmp
mov
mov
pop
std
inc
mov
xlat
mov
sub
pop
(bad)
pop
push
dec
fsub
test
mov
pop
add
xchg
lea
inc
sbb
cmp
sub
push
inc
test
cwde
mov
idiv
lock
cmp
push
sahf
imul
jbe
in
xchg
(bad)
and
ss
loop
mov
ins
and
fadd
daa
sti
add
jge
std
xchg
mov
xlat
push
lods
neg
add
pop
mov
in
or
jns
cmps
or
inc
cmp
popf
sbb
sbb
pop
imul
ss
ja
adc
pop
std
inc
adc
mov
push
jb
sti
ins
aaa
mov
movs
or
shl
cmps
test
call
data16
ret
rcr
pop
jge
aad
or
mov
ins
push
mov
jmp
bound
push
jmp
inc
xchg
mov
sti
add
inc
out
or
push
fstp
sub
es
aaa
shl
dec
xchg
ret
and
retf
aad
pop
mov
pop
adc
out
add
(bad)
and
pop
daa
sbb
movs
imul
push
push
mov
aam
shr
popa
push
pushf
jo
sub
sbb
jae
push
sbb
test
lods
pop
ds
dec
push
mov
outs
add
jne
adc
mov
sbb
shr
das
std
adc
(bad)
es
dec
pop
push
xor
adc
cmp
mov
in
xchg
out
shr
mov
mov
push
cmp
jb
stos
shr
addr16
sbb
pop
popf
push
fsub
add
mov
daa
or
mov
arpl
(bad)
shl
loopne
int
xlat
xlat
(bad)
jmp
mov
push
pop
lds
mov
mov
jae
pop
data16
out
jne
jo
pop
and
aas
fucom
inc
call
mov
(bad)
icebp
xor
mov
ret
(bad)
test
out
(bad)
pop
popa
pop
and
lahf
cmp
in
loop
sbb
ds
test
lahf
sub
or
sbb
lock
stos
aaa
add
int
repnz
cwde
pop
xchg
cmp
sar
jmp
(bad)
pop
clc
sahf
xor
cmp
shl
cmp
in
frstor
pop
neg
inc
xchg
mov
mov
ret
arpl
xchg
push
xchg
dec
fbstp
adc
stos
(bad)
jmp
xchg
cmps
retf
aad
jnp
mov
es
xchg
push
xchg
xchg
out
xchg
jecxz
bound
mov
shl
addr16
lea
cmps
xor
test
ins
jle
in
adc
pop
lods
imul
lods
push
je
sub
fldenv
sar
imul
adc
call
cmp
jp
mov
arpl
push
out
xchg
fnsave
mov
jno
add
test
mov
xor
sub
sbb
ds
lea
(bad)
inc
(bad)
push
mov
movs
cwde
push
push
stos
ins
push
sti
inc
sub
xor
lds
jnp
pop
inc
sub
cmp
call
data16
mov
mov
in
mov
xchg
paddsw
enter
mov
push
jp
mov
scas
addr16
dec
test
mov
jo
mov
mov
jl
push
add
push
ins
aaa
mov
mov
or
mov
mov
es
xor
cmp
mov
aaa
sbb
add
cmp
data16
jge
add
mov
mov
sbb
ret
push
mov
sub
mov
loop
out
mov
(bad)
fstp
pop
cmp
mov
push
cld
(bad)
jmp
inc
test
push
jge
ss
fwait
gs
ret
call
dec
mov
mov
or
popf
sbb
xchg
mov
push
dec
xchg
cmp
pop
xchg
fstp
pop
loop
call
call
gs
mov
cwde
cmps
ds
add
xchg
inc
(bad)
imul
add
aaa
fwait
rcl
cmps
bnd
js
mov
fidiv
xchg
leave
(bad)
ins
or
push
dec
xor
xchg
rol
addr16
push
sar
adc
js
cmp
dec
neg
call
shr
ja
test
iret
ror
cmp
(bad)
pop
daa
lods
sbb
jbe
out
xchg
or
push
or
add
push
lea
aad
cmp
popa
ins
jb
adc
jb
fdiv
imul
sub
xlat
lock
das
mov
jge
ds
cmp
sbb
sbb
xchg
cmps
adc
shl
fcomp
fcmovnb
stos
or
icebp
xchg
je
test
sub
xor
jl
out
pop
cmp
ins
mul
out
push
xor
sub
int
in
neg
loopne
cmp
cmp
dec
lea
jne
ja
stos
jg
jge
loope
inc
(bad)
mov
loopne
xchg
lea
fst
inc
and
daa
movs
push
cmp
ss
xchg
mov
jmp
ds
outs
dec
add
ja
neg
fdivr
add
xor
jmp
neg
push
sar
sbb
das
mov
movs
push
or
adc
lahf
mov
push
mov
xor
push
fisttp
mov
cmp
and
out
ror
addr16
cmps
clc
repnz
(bad)
fisttp
ret
and
aaa
or
mov
loope
xlat
call
call
xchg
imul
mov
mov
scas
cmp
popa
xor
mov
mov
imul
(bad)
cld
(bad)
(bad)
pop
push
std
xchg
push
fimul
mov
out
jb
lea
cmps
jae
sub
jnp
xchg
in
mov
(bad)
xchg
movs
jne
xor
add
jb
fld
test
inc
sub
(bad)
cmp
ja
and
mov
jmp
stc
loopne
pop
jle
adc
(bad)
les
loopne
cdq
in
fwait
popf
xchg
popf
mov
ja
(bad)
loopne
shr
sub
aad
xchg
adc
sbb
call
or
add
loope
inc
jnp
pop
popf
pop
mov
in
push
and
nop
bound
adc
dec
mov
not
out
pop
mov
inc
das
loopne
cdq
out
pop
or
and
(bad)
mov
in
mov
std
retf
cdq
cmps
int3
pop
test
fld
popf
stos
jge
aas
(bad)
loopne
or
mov
or
mov
and
data16
ret
inc
dec
cmp
xchg
cmp
jae
xchg
and
push
push
test
test
mov
jno
ins
xor
fs
pop
sub
jne
inc
test
push
dec
sub
js
dec
push
icebp
fcom
jne
xchg
pop
xchg
mov
or
push
shr
movs
cmps
loop
or
repnz
sub
stos
fsubr
pop
add
aaa
add
mov
ret
bound
xchg
mov
sbb
shl
retf
adc
jge
ins
inc
(bad)
lods
dec
adc
sbb
fsubr
ret
mov
test
push
rol
mov
fwait
add
mov
cli
or
in
add
mov
xor
adc
cmp
cmp
sbb
(bad)
call
jmp
clc
and
fs
loope
or
xchg
data16
mov
pop
ss
lods
stc
jle
rcr
jp
push
cmp
jge
adc
iret
dec
jbe
jmp
fbstp
ins
stc
addr16
pop
sub
sub
in
sub
repnz
in
(bad)
in
int
(bad)
push
test
(bad)
or
scas
add
jge
adc
cs
ret
mov
ins
mov
js
in
dec
daa
into
fisub
push
lahf
mul
int3
jbe
jmp
pop
xor
cs
push
xchg
inc
cs
mov
out
add
cld
pop
sub
mov
mov
fbstp
daa
(bad)
pushf
mov
jb
daa
inc
fdivr
cmp
sub
xchg
lods
ret
in
inc
pop
ds
xor
in
jno
(bad)
mov
and
xchg
lods
(bad)
adc
pusha
and
ss
inc
neg
mov
push
xor
xchg
test
(bad)
repnz
xchg
mov
inc
sbb
les
push
sub
jmp
xchg
ret
hlt
movs
mov
jo
imul
pop
sub
ds
jmp
jbe
retf
sbb
push
inc
ins
jo
push
cli
sbb
test
ret
push
push
inc
cmps
ss
cli
mul
dec
inc
add
xchg
aam
(bad)
pop
cmp
inc
fucomip
test
mov
dec
pop
jl
fnstenv
pop
es
push
popf
mov
jp
jp
sbb
push
es
outs
add
ja
sub
jno
and
xchg
ins
dec
fdivr
pop
cmp
pop
push
(bad)
fidiv
outs
xchg
shl
clc
(bad)
pop
je
xchg
push
pushf
jne
and
(bad)
or
and
lahf
icebp
aam
mov
loopne
mov
jno
lea
test
movs
lods
les
jb
js
push
(bad)
sbb
mov
inc
rcl
push
mov
ds
(bad)
pop
inc
fisubr
cwde
cld
xchg
jbe
cwde
mov
in
and
bound
mov
clc
movs
mov
imul
lahf
jbe
loope
push
inc
lds
xchg
mov
imul
lods
add
jle
pop
(bad)
mov
jecxz
push
cmp
mov
push
adc
mov
push
xchg
push
jmp
mov
push
mov
mov
bound
cmp
push
mov
push
(bad)
mov
jo
ret
frstor
loopne
jne
or
hlt
mov
dec
adc
aam
test
mov
mov
pop
inc
xlat
loope
(bad)
push
(bad)
dec
cmp
test
sub
push
jo
dec
dec
enter
repz
icebp
(bad)
std
out
xchg
ins
mov
jle
test
inc
sub
xchg
pusha
sbb
add
inc
mov
movs
neg
inc
xchg
daa
aad
mov
mov
mov
add
sahf
xchg
jecxz
sti
add
lea
add
xlat
aaa
(bad)
add
ds
pop
mov
ds
sahf
pop
clc
push
and
adc
aaa
in
inc
fdivrp
int3
dec
sub
or
sub
dec
ins
jl
test
dec
enter
addr16
mov
cwde
int3
sbb
stos
aas
sub
inc
xlat
add
sbb
xchg
imul
daa
push
xchg
sbb
jnp
rcr
dec
mov
neg
ins
push
pop
aas
push
xchg
and
mov
hlt
loop
or
mov
cmps
mov
fdivr
push
xchg
and
xchg
clc
mov
neg
push
loope
outs
in
ss
mov
or
test
enter
push
jae
aad
sbb
(bad)
mov
fdivr
cdq
out
mov
pushw
and
ins
cs
loop
lods
into
inc
stos
icebp
lds
movs
inc
sbb
and
push
imul
jg
or
mov
sbb
cli
stos
lods
repnz
push
mov
daa
mov
bound
xchg
std
ret
arpl
mov
popa
not
movs
dec
pop
popf
pop
lods
popa
or
inc
loope
xchg
jg
out
jne
jmp
ss
arpl
xchg
push
sbb
daa
cmp
data16
jbe
and
fst
mov
(bad)
imul
(bad)
mov
push
shr
hlt
push
jb
push
mov
cmps
int
inc
push
movs
shl
int
cmp
inc
or
jnp
pop
cmp
jmp
movs
scas
popa
xor
sbb
lods
inc
sbb
nop
repnz
in
mov
ret
push
xor
jl
ja
aam
and
sti
sbb
mov
(bad)
cdq
xor
add
jmp
or
bound
(bad)
call
sub
push
ret
lahf
fiadd
sub
mov
lldt
jge
test
loope
push
ins
mov
sbb
inc
test
push
cmps
fcomp
mov
jns
enter
xchg
retf
mov
xchg
sbb
xchg
in
jo
mov
pop
mov
out
call
mov
xor
fwait
sbb
jnp
inc
and
add
mov
sub
sub
dec
inc
sub
xchg
jo
sub
adc
sub
dec
pop
ins
adc
mov
xchg
mov
imul
out
push
mov
ins
retf
mov
push
pop
add
jmp
sahf
outs
sub
xor
imul
loopne
pop
iret
mov
icebp
jge
cmc
jmp
fst
imul
call
out
stos
aaa
mov
inc
leave
xchg
add
xchg
xor
lods
or
sbb
pushf
pop
dec
xchg
cmp
addr16
ins
retf
shl
xchg
pop
xor
push
xor
inc
mov
xchg
fmul
inc
mov
jno
jge
sbb
jnp
dec
nop
enter
adc
push
sbb
add
push
test
imul
mov
jmp
fidivr
std
lods
push
stos
lea
popa
pop
sbb
sub
xchg
adc
and
jne
lods
or
push
pop
push
sar
xchg
adc
cmps
inc
out
or
cmp
pop
int
ss
shl
mov
xchg
inc
pop
add
shr
mov
frstor
pop
pop
mov
sar
cs
std
daa
movs
fcmovb
xor
fwait
repnz
call
jp
stos
enter
sub
mov
sub
jg
ret
enter
ss
mov
fnstcw
js
sbb
mov
dec
mov
icebp
arpl
xchg
in
in
int
xchg
inc
das
adc
daa
jge
add
pop
pusha
add
and
lock
cli
adc
ins
test
enter
push
ret
jo
sub
cwde
loope
mov
jmp
xlat
xor
call
call
inc
sbb
inc
sub
sbb
sub
and
add
(bad)
xor
jb
xchg
rcr
test
ja
cdq
cmp
out
pusha
mov
jae
(bad)
pop
and
adc
cs
imul
sub
dec
push
popa
xor
int
mov
lea
enter
or
jmp
push
cmps
int
mov
xadd
mov
xor
pop
xchg
xchg
xchg
cdq
cli
loope
inc
push
inc
retf
cwde
cmps
pushf
pop
mov
out
mov
cmovnp
jge
cs
sbb
sbb
sub
jae
xchg
call
mov
enter
adc
push
clc
cli
lods
loop
cmps
push
dec
cwde
in
das
shr
push
movs
fimul
push
pusha
mov
(bad)
ret
xor
psllw
mov
test
popa
mov
push
imul
jno
mov
imul
pop
test
pop
mov
test
sub
xchg
mov
sub
pop
cwde
mov
mov
and
xchg
fistp
push
push
and
cli
inc
(bad)
push
ss
out
pop
jge
cs
xchg
adc
sar
es
inc
xor
loope
(bad)
popf
pop
movs
dec
pop
xchg
stc
jno
mov
add
push
push
and
and
test
stos
inc
adc
add
inc
jp
loop
repnz
xchg
jmp
neg
pop
nop
iret
inc
or
shl
movs
fimul
inc
pusha
mov
(bad)
ret
and
cmp
hlt
or
inc
leave
jb
daa
sbb
sar
xchg
std
xlat
fsub
clc
cmp
or
clc
loopne
push
bound
ret
cli
sbb
hlt
adc
and
popf
loop
dec
and
popf
mov
xchg
mov
jb
cld
nop
jnp
rol
out
mov
inc
inc
std
ret
add
jge
xchg
push
mov
adc
repnz
push
sub
jo
in
repnz
xor
inc
cmps
push
movs
bound
and
loopne
pop
bound
cmps
loop
repnz
(bad)
int
inc
cmps
push
loop
cmps
jb
add
pop
lods
sar
pop
loope
lock
adc
lea
lods
mov
xchg
and
data16
push
shl
push
cmps
adc
dec
adc
jne
push
popf
popf
and
sar
cmp
mov
mov
cld
loope
int3
push
(bad)
mov
call
pop
pop
imul
jmp
push
cwde
dec
pop
mov
cmps
sahf
xchg
mov
stos
jb
jge
test
(bad)
sub
test
mov
or
mov
loop
xlat
xor
and
ss
xchg
retf
or
mov
retf
loope
icebp
fidiv
jmp
adc
pop
out
xor
push
scas
dec
lods
mov
ss
mov
aaa
mov
add
enter
xchg
dec
shl
arpl
xchg
std
or
adc
xchg
pop
icebp
fcomp
(bad)
ror
or
sub
xchg
cld
push
sbb
mov
in
or
ins
or
cwde
sar
mov
mov
dec
sar
or
in
cmp
jbe
pop
(bad)
jmp
call
mov
adc
cli
xchg
push
les
sub
jnp
stos
neg
mov
adc
inc
xchg
icebp
add
or
es
addr16
sbb
loop
pop
cmp
lea
jge
out
sbb
movs
xchg
cmp
and
mov
test
xor
push
push
or
lea
neg
aaa
cmp
adc
bswap
cmp
lea
dec
data16
jnp
loopne
push
dec
imul
je
mov
cmc
mov
adc
retf
(bad)
push
xchg
gs
jne
das
jp
sub
inc
cld
xor
cmp
mov
mov
ret
int
push
test
test
add
pop
mov
jle
sbb
xchg
xor
cmps
or
pushf
es
neg
jle
dec
cmp
cmps
adc
inc
xchg
out
mov
adc
ja
jne
xor
pop
push
sbb
lahf
pop
mov
cwde
in
jo
mov
sub
movs
sbb
enter
xchg
mul
xchg
pop
(bad)
add
test
(bad)
hlt
add
lea
(bad)
xchg
inc
fwait
mov
js
jle
push
pop
pop
aad
or
data16
int
mov
sbb
xor
out
lahf
das
dec
fmul
jo
push
iret
mov
sub
adc
inc
add
xor
and
pop
dec
add
popa
cmc
aaa
inc
push
mov
out
stc
ret
dec
jecxz
cdq
lea
mov
pop
cmp
js
je
loop
push
jecxz
push
cmp
pushf
into
aas
in
sahf
jmp
push
stos
and
mov
or
push
gs
cmc
enter
pop
xor
or
mov
(bad)
fidiv
lahf
icebp
imul
dec
test
int
xchg
clc
pushf
imul
cmp
ins
ss
ret
rcl
mov
das
in
mov
(bad)
pop
imul
dec
jne
in
jnp
not
out
std
dec
mov
sahf
add
add
xor
mov
cmp
stos
(bad)
push
mov
dec
jle
xchg
gs
xchg
inc
sbb
add
mov
sub
xchg
out
in
add
mov
mov
repz
xchg
jb
jno
out
push
fcom
ret
jg
fwait
int3
push
mov
dec
out
mov
gs
mov
stos
jns
and
movs
jg
ds
outs
add
jbe
scas
xor
ss
leave
stos
jle
mov
mov
mov
lds
repnz
xchg
aas
popf
mov
loope
call
(bad)
outs
ficom
into
mov
jle
test
or
in
cmc
xor
movs
(bad)
mov
pop
dec
pop
test
sti
aaa
mov
call
into
and
jmp
inc
mov
xchg
ins
mov
ja
xchg
or
fstp
cmps
int
fmul
in
out
pop
lock
jns
pop
xor
nop
adc
ja
addr16
mov
mov
fs
cmp
jp
lods
dec
push
xchg
push
std
fldenv
in
add
and
mov
cdq
jno
loope
pop
ins
mov
cmp
in
outs
mov
mov
dec
and
ds
out
cld
xchg
push
gs
loopne
aas
ds
cmc
ja
jecxz
lahf
std
repz
mov
xchg
mov
pushf
jge
dec
sub
sub
sbb
push
sub
push
or
jns
xor
out
pop
push
in
push
mov
jle
xchg
imul
jbe
ret
cmps
mov
ja
fmul
mov
outs
adc
test
in
jns
xlat
cmp
inc
int
ds
add
gs
test
push
ret
lea
inc
xchg
add
ss
xlat
adc
pop
push
sbb
ja
neg
mov
xchg
out
push
push
and
mov
pushf
movs
rcl
cli
test
aaa
and
mov
ret
sbb
ins
lea
aaa
ss
ins
mov
adc
sub
daa
add
adc
repz
xor
inc
popf
bound
sub
adc
dec
stos
mov
shl
xchg
stos
cmps
popf
aas
jne
inc
jp
ins
shl
loopne
(bad)
inc
mov
push
add
jmp
out
loop
(bad)
pop
stos
aaa
fwait
rcl
jl
pop
lds
fldln2
cmc
xor
pop
inc
(bad)
and
fsubr
pop
(bad)
xor
pop
retf
adc
mov
add
cmp
lds
das
(bad)
lods
pop
aad
test
jge
sub
pop
stos
inc
add
daa
cld
xchg
in
test
cwde
cmps
int3
fdiv
push
cmps
pop
pop
lea
pop
(bad)
lods
push
dec
xchg
fsubr
or
pop
push
cmps
cdq
call
shl
out
imul
arpl
rcl
and
ins
std
js
cmps
lahf
dec
push
(bad)
shr
mov
call
(bad)
gs
jg
in
jg
and
in
mov
cmps
add
cmps
pop
out
pop
xor
and
or
dec
jbe
xchg
out
or
retf
or
mov
sub
mov
push
mov
xchg
xlat
jle
popf
dec
xchg
mov
pop
pushf
push
loop
lods
jp
movs
popa
into
cmp
repnz
xchg
ja
in
pop
loop
ret
aad
int
xor
add
in
and
out
add
std
mov
mov
dec
xchg
out
call
push
cmp
push
ret
or
data16
cmps
call
das
int
sar
jl
out
push
jge
jno
mov
mov
pop
sar
inc
scas
dec
lahf
cmps
dec
xlat
cmp
stos
adc
cmp
jmp
xchg
and
adc
mov
pop
mov
cdq
push
bound
pop
push
fdiv
dec
pop
xchg
js
in
cmp
sub
pop
loopne
cmps
aaa
sbb
fmul
lea
sub
push
ror
dec
or
pusha
sub
mov
addr16
jp
xchg
lea
pop
enter
call
cld
or
(bad)
pop
cmp
dec
jb
pop
outs
jl
cmp
mov
pop
test
shr
pop
sahf
sbb
repnz
pop
fcom
pop
lock
popf
jb
xchg
sub
rcl
addr16
mov
mov
xor
mov
push
jno
(bad)
loope
jmp
and
les
cli
loop
js
add
cs
mov
inc
popa
aas
xor
loopne
aam
pop
scas
cmp
in
or
fsub
mov
inc
es
pop
test
mov
daa
add
dec
or
hlt
cmp
or
mov
cmps
mov
push
jno
(bad)
pop
inc
sysenter
inc
rcr
inc
int3
cmp
fwait
adc
shl
mov
lods
sbb
and
rcl
fadd
(bad)
in
ds
int
ss
mov
pop
pop
je
out
mov
xchg
in
sbb
pop
int
cmp
(bad)
out
ret
mov
sbb
sub
dec
push
cmp
nop
add
jmp
xor
clc
inc
hlt
pop
pop
and
cmp
js
cmps
xor
outs
or
cmp
loop
pop
mov
mov
mov
pop
mov
and
xchg
clc
xchg
mov
data16
mov
and
call
sub
dec
mov
loop
js
jle
pop
hlt
frstor
mov
cmp
pop
(bad)
cmp
test
inc
popa
xchg
pop
scas
cli
push
and
xlat
call
sbb
adc
mov
mov
sbb
jae
ja
sbb
xchg
in
jle
dec
(bad)
pop
ss
or
xchg
xlat
test
ss
adc
test
les
sbb
pop
push
cld
add
je
test
pushf
dec
push
pop
fadd
push
push
cmps
repnz
shr
push
cs
pop
pop
es
xchg
in
out
pop
test
adc
jbe
cmp
loopne
fucomp
inc
pop
jb
pop
cli
popf
mov
jge
mov
sbb
inc
or
or
in
cmps
nop
ret
inc
mov
push
pushf
gs
mov
xor
(bad)
or
repnz
mov
xor
jb
mov
sub
out
js
ret
nop
and
sub
into
cld
jl
out
(bad)
(bad)
test
(bad)
inc
sub
sar
pusha
xchg
sbb
sahf
movs
(bad)
lea
or
test
aaa
sub
daa
mov
movs
pop
push
dec
push
jl
mov
dec
mov
std
sar
retf
sub
aam
repnz
mov
dec
xor
lock
cs
pop
add
sub
mov
jle
mov
cmc
push
sub
sub
rdtsc
test
mov
or
cmp
addr16
aad
or
push
jne
and
inc
cmps
sahf
movs
fbstp
pop
enter
adc
sbb
into
xchg
std
xchg
xlat
aad
iret
(bad)
bound
push
pop
or
dec
push
jl
ins
jg
gs
push
xchg
xchg
dec
sbb
cmc
call
dec
xchg
retf
not
jbe
pop
fisttp
iret
jns
call
adc
lahf
dec
cmps
aad
cmps
ja
ss
sar
sbb
adc
xchg
inc
test
sti
xchg
ror
test
sbb
and
adc
xchg
add
ins
retf
mov
mov
cld
push
sahf
jmp
adc
push
adc
out
mov
mov
mov
fwait
sbb
test
aad
int
mov
ins
fsub
shl
pop
daa
(bad)
pop
ret
aaa
fcomp
in
mov
sub
xlat
jl
outs
jl
int3
mov
mov
bound
sbb
mov
adc
cli
rcr
call
clc
gs
or
adc
pop
cmps
sub
push
retw
push
out
xlat
xchg
test
aad
push
sahf
inc
mov
fiadd
vrsqrtps
xchg
es
mov
inc
inc
xchg
(bad)
push
out
pop
jne
in
addr16
push
aam
ds
lahf
xchg
dec
je
std
scas
xchg
pop
push
cs
xor
es
pushf
mov
out
xchg
and
cli
out
push
sbb
and
and
lods
jle
mov
jae
mov
cmp
sub
push
add
fnsave
mov
outs
(bad)
(bad)
jns
fcomp
dec
ins
mov
pop
jg
xor
stos
js
dec
push
dec
mov
mov
pop
and
aas
or
adc
mov
pop
daa
inc
(bad)
jns
es
ins
add
jns
call
les
sbb
scas
data16
mov
lods
iret
enter
stc
jecxz
mov
dec
or
cmp
jbe
jmp
pop
xchg
scas
jecxz
jmp
test
(bad)
pop
sbb
mov
pusha
add
ja
dec
jbe
adc
outs
es
pop
in
clc
adc
add
cmp
cmp
cmp
add
jg
mov
call
add
sti
sub
aaa
push
fmul
push
sbb
out
in
mov
cmps
mov
(bad)
push
fcmovb
sbb
(bad)
or
(bad)
cs
data16
loop
or
pop
mov
inc
xor
inc
rcl
fcom
jnp
and
push
into
aam
paddusb
movs
aaa
cmp
ins
jp
out
pop
pop
mov
dec
or
jl
pop
dec
les
cmps
dec
aas
leave
cmps
pop
neg
out
xchg
jge
ins
aaa
pop
pop
(bad)
ror
aas
cwde
cmps
push
std
int
sbb
fwait
push
or
bnd
xchg
inc
js
cmp
(bad)
fidivr
out
lods
cmps
call
outs
mov
pop
mov
adc
sub
and
sahf
xchg
ret
loop
js
dec
(bad)
lods
(bad)
call
dec
cmps
jb
movs
dec
adc
sbb
js
jae
xchg
fsubr
ss
push
mul
jno
sub
push
push
pop
(bad)
cld
bound
jo
cmp
scas
lods
in
test
or
pop
cmp
lea
jne
xchg
ins
scas
and
jmp
sub
pop
es
mov
ins
aaa
(bad)
cwde
sbb
and
xchg
stos
rol
push
inc
push
push
dec
pop
movs
dec
inc
jns
das
cmp
dec
cmp
nop
addr16
or
push
jo
inc
cmp
push
sub
mov
int
pop
mov
or
jno
stc
or
cdq
loop
pop
add
test
mov
cmps
cli
sbb
(bad)
mov
mov
inc
and
mov
test
fwait
daa
mov
ret
cld
cs
cmp
pop
or
inc
add
sbb
mov
dec
push
xchg
jbe
sub
loope
stos
inc
shl
lods
lods
mov
jecxz
inc
xchg
mov
lahf
js
sub
(bad)
outs
fdiv
push
hlt
sahf
mov
call
fist
inc
lods
mov
mov
pop
daa
xchg
stos
lds
xchg
cmps
mov
push
fwait
cmp
(bad)
aaa
cmp
shl
fcom
shl
repnz
xor
(bad)
dec
dec
jge
jns
lods
add
js
xchg
dec
dec
mov
mov
sub
cmps
mov
xchg
mov
repz
in
xchg
xor
je
movs
or
repnz
int
mov
mov
shr
ins
xchg
aas
pop
stos
dec
fdiv
mov
cwde
cs
mov
mov
adc
xor
and
imul
pushf
sub
les
push
sub
xchg
out
mov
and
enter
mov
inc
mov
loop
xchg
cmp
add
or
mov
pop
aas
inc
jmp
bound
mov
repz
and
jp
out
inc
mov
jns
sar
aas
push
inc
outs
adc
addr16
(bad)
push
mov
not
paddusw
adc
daa
mov
icebp
in
cmp
xlat
in
cmc
and
(bad)
pop
out
dec
or
sub
jmp
adc
mov
into
cmp
dec
mov
and
ss
jns
imul
test
push
mov
jp
pusha
cmps
push
sar
test
mov
jecxz
pop
and
or
push
push
pop
std
je
loope
test
jbe
das
imul
out
pop
push
inc
dec
(bad)
aad
rol
adc
call
imul
cmp
popf
and
in
rol
loopne
(bad)
fisttp
ret
mov
jmp
push
dec
inc
sub
mov
dec
inc
cmp
cdq
loope
adc
loop
pop
xchg
xlat
xlat
mov
sub
mov
mov
pop
push
pop
or
(bad)
stos
fdivr
jmp
cdq
sub
fidiv
adc
rcr
add
idiv
addr16
scas
(bad)
test
add
fdivr
or
cli
sbb
xor
cmp
iret
out
inc
lock
out
pop
je
sbb
sub
std
or
cli
enter
or
pop
cmp
sti
shl
dec
xchg
mov
movs
cli
sbb
js
jns
pop
xchg
xchg
jno
enter
and
shl
cmc
dec
in
dec
nop
pop
lds
mov
pop
out
fstp
lods
(bad)
(bad)
in
ins
cmp
cwde
int3
sar
ret
(bad)
fucomi
retf
shl
ins
fstp
in
pop
jl
push
test
and
jecxz
jg
xchg
jbe
call
pop
sbb
pop
rol
or
add
dec
shr
(bad)
xlat
jl
lods
jl
or
bound
into
enter
fcmovbe
xchg
dec
(bad)
repnz
lahf
test
xchg
movs
enter
cmp
xlat
js
pusha
mov
jb
fimul
jmp
in
and
jg
pop
ins
fistp
scas
cmp
ja
out
test
cld
(bad)
fs
(bad)
nop
sbb
cmp
pop
xchg
lea
shr
daa
cdq
test
sbb
mov
(bad)
adc
dec
push
sti
fadd
cmp
stos
cmp
add
mov
call
int
test
in
adc
add
xor
stos
jb
cld
lea
jo
imul
fisubr
int3
loop
fsubrp
inc
nop
sub
(bad)
inc
retf
push
nop
cli
aam
add
loope
retf
or
add
sti
add
in
je
mov
xchg
aaa
xchg
or
mov
js
mov
push
mov
sbb
mov
lods
movs
pop
cs
xlat
sub
pop
inc
or
scas
sub
push
cld
or
hlt
test
inc
xlat
mov
mov
xchg
mov
das
push
test
inc
jnp
in
push
lods
mov
mov
stos
mov
xlat
rol
inc
pop
rol
adc
into
and
out
clc
xchg
adc
push
out
clc
lea
hlt
clc
out
or
sbb
push
push
scas
loope
(bad)
add
jbe
mov
mov
dec
or
pop
xor
movs
ds
stc
(bad)
in
and
movs
ss
xchg
sbb
jbe
dec
nop
mov
ret
in
sbb
mov
inc
push
pushf
inc
adc
hlt
test
jne
sar
pop
mov
adc
xchg
lds
loope
sbb
push
jp
lea
or
xor
fldlg2
ins
test
mov
jns
(bad)
or
jl
cmps
shl
push
lods
cli
inc
out
call
pop
iret
sub
jb
xchg
lds
pop
mov
cdq
jb
jge
or
mov
(bad)
test
adc
sbb
addr16
cmps
dec
in
pop
cmc
add
loop
popf
jge
outs
mov
push
jne
sbb
xchg
and
outs
jl
inc
lahf
aas
fild
push
xor
mov
mov
cmp
add
sbb
popf
xchg
in
sahf
lods
pop
popf
sbb
pop
sub
sahf
mov
jg
mov
aaa
dec
lds
int
jl
add
lea
add
fs
call
jmp
push
inc
push
cmc
loop
loope
imul
popa
ins
add
mov
ret
mov
jmp
xor
(bad)
push
mov
(bad)
fstp
popa
fistp
test
add
cmp
dec
les
retf
(bad)
int
mov
jmp
call
dec
inc
jg
cmp
sbb
sbb
int
in
outs
or
xchg
(bad)
call
pop
dec
mov
cld
retf
push
cmps
dec
ror
icebp
(bad)
pop
xor
dec
ss
iret
fucomp
and
xchg
outs
jne
mov
sti
add
add
test
push
inc
add
jb
fst
aas
sbb
push
std
add
dec
ret
jo
sbb
mov
sbb
jne
xchg
cmp
fcmovne
test
adc
aas
sbb
mov
mov
movs
retf
add
inc
das
fs
or
pop
xor
aad
lds
mov
test
mov
repnz
push
aas
mov
not
stos
mov
cmp
and
and
jmp
pushf
jge
ins
xor
lea
das
in
sub
addr16
mov
ja
pop
inc
dec
mov
push
sub
mov
icebp
iret
sub
xchg
add
fsubr
test
call
call
mov
pop
add
sbb
mov
jbe
xchg
xor
mov
out
push
sub
daa
rol
mov
xchg
jbe
stos
cmps
std
cmps
int
inc
imul
dec
mov
sub
test
dec
movs
pop
pop
jmp
cwde
div
aas
pop
push
and
out
(bad)
mov
jp
add
retf
ins
xor
enter
cmp
test
mov
call
mov
sbb
sar
dec
out
sub
jbe
cmp
dec
xchg
mov
mov
and
mov
cwde
sbb
inc
dec
mov
jl
mov
dec
mov
dec
jge
xor
in
movs
scas
repnz
(bad)
in
mov
mov
push
push
aas
test
addr16
les
cmp
jb
push
cmc
xchg
out
das
int
ins
rcl
adc
loopne
shr
mov
push
and
adc
test
pop
out
pop
sub
ja
push
cmp
jmp
(bad)
xchg
jae
push
neg
pushf
jge
ins
xchg
(bad)
scas
adc
jmp
sbb
popf
adc
repnz
add
daa
sti
add
repnz
ja
mov
pop
xor
call
inc
mov
mov
mov
push
and
push
or
out
jmp
shr
jo
push
jle
fdivrp
loope
dec
xchg
cmp
scas
inc
push
cmps
lock
in
out
jecxz
pop
cdq
cmp
pop
mov
sbb
jne
sbb
lods
cmc
(bad)
rol
xchg
push
fistp
cmps
addr16
jbe
in
xor
lods
lock
lock
fistp
inc
push
jo
icebp
mov
xor
std
or
cmc
nop
(bad)
mov
popf
sbb
fistp
xchg
dec
xchg
cmp
imul
lea
mov
int
(bad)
cmp
aad
add
mov
sar
in
mov
cli
fwait
ror
iret
xor
jne
enter
in
(bad)
lods
dec
pop
cmp
mov
mov
sub
inc
add
adc
add
gs
imul
mov
shl
sbb
sbb
sti
mov
retf
jecxz
mov
cld
inc
sar
nop
repnz
test
and
dec
idiv
sbb
pop
adc
xchg
cmp
mov
and
addr16
mov
scas
int
ds
mov
(bad)
std
jg
aaa
ds
sbb
dec
xchg
in
std
sar
cmp
in
and
cwde
push
cmp
add
sub
mov
addr16
mov
test
adc
ins
pop
fadd
ins
test
pop
(bad)
add
repnz
adc
(bad)
int
call
gs
push
lods
jg
js
fdivr
jmp
lahf
mov
ins
imul
arpl
pushf
test
imul
push
sub
fst
jmp
hlt
jle
dec
test
enter
movs
call
clc
fistp
add
mov
lahf
cmp
in
adc
call
out
jno
jge
sbb
pop
and
sub
jns
(bad)
(bad)
mov
xchg
pop
cdq
out
mov
hlt
add
fisubr
pop
jg
outs
or
mov
ret
int
mov
bound
sub
lds
jno
mov
and
bound
mov
imul
push
fwait
pushf
add
add
and
mov
mov
jb
out
jno
(bad)
or
popaw
rcl
pop
xor
mov
fcomp
or
dec
in
pop
xlat
add
ret
lahf
xchg
xor
sbb
shr
sub
push
add
ins
clc
ins
outs
mov
ja
xor
sub
fadd
pop
inc
jmp
sbb
loopne
push
out
into
push
jno
sub
dec
adc
sub
sub
(bad)
iret
fild
das
xchg
push
cmp
cwde
sbb
ret
and
dec
sub
loope
pop
add
out
sub
fisub
(bad)
mov
test
inc
loope
push
cmps
add
cmp
ins
ss
outs
ficom
mov
loopne
fisubr
cwde
cld
xchg
jbe
sub
adc
neg
xchg
push
in
ins
test
or
daa
mov
push
dec
sbb
mov
stc
push
xchg
mov
neg
push
add
fisttp
lods
mov
push
mov
int3
xor
jae
fnsave
out
mov
mov
aam
jmp
loop
int3
push
xchg
xchg
mov
xchg
std
fmul
jb
mov
test
xchg
daa
clc
push
push
mov
adc
cmps
cwde
xlat
cmp
and
bound
ins
inc
mov
adc
push
xchg
mov
and
loop
sub
out
(bad)
mov
daa
movs
push
rol
loop
xor
fbstp
loopne
popf
mov
aam
cmp
mov
inc
jo
adc
dec
push
aad
sub
pop
cmps
jge
cmp
lods
jnp
sub
add
sub
inc
push
sub
and
mov
push
neg
mov
lods
hlt
shl
pusha
iret
fdiv
loop
add
repnz
mov
cmps
jno
jl
es
mov
add
dec
adc
addr16
mov
imul
push
mov
in
dec
sub
std
iret
push
sti
dec
and
mov
dec
into
(bad)
push
daa
dec
jge
mov
jge
lea
sbb
push
outs
scas
pop
out
arpl
or
loope
jnp
xchg
xor
ins
div
mov
and
fistp
out
push
bnd
dec
lahf
xchg
dec
push
xlat
or
je
mov
xor
mov
xor
xchg
xchg
xlat
mov
outs
neg
outs
fucomp
sub
ds
mov
cmps
and
outs
ds
(bad)
ins
xchg
imul
sbb
shr
adc
adc
pop
pop
scas
or
je
popa
cmp
inc
out
test
aaa
or
add
cmps
push
xor
(bad)
out
lahf
mov
push
pushf
pusha
xchg
mov
jbe
imul
(bad)
in
adc
cmp
sbb
mov
push
push
ds
inc
loope
push
mov
inc
out
test
mov
sahf
sbb
in
scas
mov
dec
mov
fcomp
retf
fstp
jno
push
movs
mov
out
push
sar
mov
out
(bad)
push
lods
repnz
or
push
cmp
mov
lods
dec
and
in
hlt
dec
fwait
lods
xor
test
inc
pop
jge
xchg
xlat
popa
sbb
lods
(bad)
dec
jl
sahf
xor
in
sbb
sub
xchg
mov
bound
and
mov
or
mov
hlt
sahf
(bad)
movs
mov
loope
mov
movs
cld
dec
jnp
pop
add
mov
xchg
and
pop
add
push
lods
ds
mov
sar
mov
push
bound
adc
jmp
jnp
fcomp
mul
add
sbb
leave
xlat
aaa
push
daa
and
not
lods
aaa
adc
popf
pop
lea
mov
mov
dec
jge
ins
imul
sub
cld
mov
stc
lds
pop
and
xor
movs
clc
and
push
cmp
jmp
je
je
sbb
out
cmp
fsub
scas
jb
mov
cmp
push
outs
inc
shl
cld
ret
push
cmps
(bad)
pop
mov
push
push
not
and
push
jmp
sbb
fisubr
xchg
xor
mov
pop
sub
aaa
push
sbb
xchg
js
jae
push
cmps
mov
push
in
es
mov
push
inc
sar
mov
mov
xor
cs
sub
cld
es
jbe
fsubr
ins
test
(bad)
(bad)
aam
ins
mov
sar
fimul
adc
clc
mov
pop
dec
push
js
out
or
jb
sbb
es
push
leave
inc
sub
(bad)
jno
fdiv
pop
pop
fistp
fwait
jno
pop
not
and
cli
(bad)
int
pop
ds
ret
mov
out
jecxz
adc
cmp
push
xchg
mov
pop
or
push
call
mov
jno
adc
inc
and
mov
jbe
xchg
cmc
mov
setbe
jge
das
clc
mov
adc
push
mov
xchg
and
xchg
or
adc
add
adc
nop
cmp
mov
sub
ja
sub
jg
ins
shr
mov
int
std
jnp
imul
lods
jg
mov
test
(bad)
mov
in
xchg
or
in
lahf
xor
ficomp
(bad)
(bad)
lock
mov
pop
stc
inc
cmp
xchg
addr16
sbb
cmp
jle
jb
cmp
and
daa
mov
hlt
cs
enter
retf
mov
mov
sbb
pushf
aas
leave
xchg
(bad)
mov
adc
repnz
lahf
xchg
(bad)
daa
clc
call
xor
mov
jnp
out
xor
cmc
outs
data16
or
cs
es
gs
mov
inc
jnp
cmc
cmps
(bad)
push
sbb
mov
xlat
call
fs
inc
pop
cmp
fsub
dec
push
ret
mov
sbb
cmps
or
xchg
fsubr
push
mov
cmps
and
and
add
inc
data16
in
add
bound
and
fst
sbb
out
xor
pop
call
pop
movs
jae
xchg
or
inc
cmps
mov
cmps
xchg
nop
ss
mov
mov
imul
pop
cmp
push
test
out
sbb
add
aas
jae
dec
adc
cmc
les
adc
and
pop
mov
push
bound
addr16
inc
popa
movs
adc
xchg
addr16
jg
xchg
mov
cmps
and
clc
loope
aam
mov
(bad)
lea
pop
je
inc
cwde
or
mov
hlt
call
ins
add
enter
or
fnclex
add
mov
and
sub
pop
fsubr
pop
mov
das
sti
dec
loope
push
lar
fimul
inc
jbe
cmp
imul
sbb
dec
xchg
in
jbe
mov
xchg
xchg
mov
out
mov
mov
add
fdiv
loop
xchg
pop
sar
aaa
retf
push
jb
jmp
push
ret
repz
or
add
imul
mov
ins
aaa
pop
and
outs
jmp
dec
sbb
xchg
adc
int3
call
inc
jge
loopne
lods
push
xor
hlt
adc
rcl
sti
in
mul
test
test
aaa
pop
das
mov
mov
call
int
pop
clc
pop
and
popf
ins
ficom
(bad)
lods
mov
cmp
cmovle
ds
ja
pop
xor
xlat
add
pop
aas
sti
cmp
shl
rol
shl
jmp
sbb
int
(bad)
cmp
or
mov
daa
mov
jae
js
push
push
jmp
cmps
sahf
or
or
jl
mov
push
mov
lods
mov
push
das
mov
std
ins
mov
xchg
test
adc
dec
out
pop
daa
rcl
icebp
jp
and
aad
cmp
ss
out
rol
inc
pop
adc
imul
hlt
mov
hlt
xlat
enter
fiadd
fnsave
jae
outs
dec
out
push
jmp
popa
int
cwde
rcr
push
shl
xor
lods
push
fidiv
neg
pop
pop
pop
add
int3
jg
push
adc
cmps
xor
mov
lods
mov
out
dec
adc
inc
loope
ds
lods
in
loop
mov
js
cmp
in
xlat
clc
inc
call
jmp
inc
ins
aaa
dec
jo
push
cmp
mov
jmp
fbld
ins
fnsave
push
inc
hlt
jmp
outs
popaw
jbe
fstp
lds
cmp
xchg
lods
js
cmc
(bad)
mov
out
je
mov
scas
jge
pop
and
adc
sbb
mov
mov
xlat
mov
gs
pushf
xor
aaa
stos
daa
cmp
ret
lea
xchg
xor
xor
inc
sub
or
mov
loopne
or
iret
sub
xor
xchg
std
xchg
int3
xacquire
jno
cmp
stos
jne
bound
loop
xor
push
push
icebp
cmp
jl
mov
inc
and
(bad)
fnsave
outs
mov
aaa
addr16
mov
dec
sbb
(bad)
pop
mov
daa
push
pushf
sbb
loopne
mov
int3
fs
cwde
add
scas
xor
lods
mov
xchg
enter
ins
mov
repz
(bad)
shl
ja
(bad)
mov
adc
push
sbb
mov
or
ret
retf
(bad)
fisttp
fild
xlat
cmp
lods
mov
out
pop
add
push
inc
cld
sub
xchg
mov
ficom
mov
icebp
pop
shl
dec
and
and
push
and
mov
jno
jp
mov
cmp
pop
pop
xchg
mov
int
out
inc
dec
inc
es
cmp
sub
sbb
or
jl
jp
jecxz
repnz
xchg
pop
mov
psubw
clc
inc
xor
fistp
push
daa
cmp
out
pop
movs
inc
push
or
fbld
pop
mov
pop
and
movs
mov
xor
jg
jo
pop
jb
sbb
cmc
enter
inc
xchg
mov
call
popf
ja
faddp
les
xchg
stos
fst
push
clc
ret
call
daa
and
xchg
aaa
and
mov
and
push
cmc
sub
neg
enter
lea
gs
test
mov
scas
les
mul
stos
in
add
jle
jmp
pop
fs
jge
adc
pop
fisubr
out
or
stos
retf
add
retf
lods
mov
outs
lea
arpl
mov
mov
push
add
push
leave
xchg
pop
xor
into
sbb
adc
pushf
bound
icebp
xor
cmp
dec
ret
popf
fild
repnz
dec
dec
(bad)
jecxz
repz
mov
js
in
jmp
fwait
and
cli
ds
daa
mov
jo
shr
sbb
js
lods
cmp
ret
pop
mov
and
mov
xchg
ret
xor
std
inc
pusha
in
jmp
int
jno
lock
(bad)
inc
pusha
xor
add
push
push
clc
sahf
imul
out
lahf
fdiv
cmp
sar
adc
std
xchg
push
sub
push
mov
inc
cmp
push
ror
ja
xor
sbb
js
dec
sbb
int3
adc
ins
add
xchg
fdivr
in
loope
jbe
jmp
mov
loopne
xor
and
mov
(bad)
lock
jbe
adc
test
push
inc
push
fs
fcomip
mov
pusha
in
loop
jl
mov
fwait
adc
pushf
xor
xchg
out
push
xchg
push
movs
and
fcmovne
(bad)
sbb
cli
shl
sbb
mov
or
lds
mov
push
(bad)
push
mov
pop
fdiv
mov
push
js
mov
in
push
clc
(bad)
sbb
clc
lods
jb
out
wbinvd
cmp
in
jo
stos
xchg
pusha
aas
push
movs
or
bound
push
pushf
mov
pop
or
push
jno
sub
xchg
std
inc
lods
mov
ret
call
xor
fwait
xor
inc
shl
xchg
and
pop
cmps
fimul
mul
int3
shl
sbb
or
mov
sub
xlat
in
dec
xchg
or
add
add
adc
sub
sar
mov
lahf
imul
(bad)
cmp
jle
out
repz
mov
push
jo
push
(bad)
cmp
or
and
sti
adc
xlat
mov
enter
pop
in
inc
stc
xor
mov
sub
mov
mov
ins
aaa
adc
movs
adc
sbb
(bad)
sbb
popf
arpl
repnz
movs
lea
sub
gs
rcl
xchg
mov
push
imul
xchg
mov
pop
in
ja
adc
and
jae
sar
loopne
sbb
pop
test
hlt
aaa
jne
mov
add
movs
(bad)
shr
mov
cli
adc
fiadd
mov
stos
dec
xchg
jle
and
fsub
or
cmp
inc
and
js
int
jmp
test
(bad)
mov
sbb
clc
call
mov
mov
js
mov
pop
and
fistp
movs
loop
and
aam
pop
xchg
outs
movs
gs
ja
xor
aad
out
test
mov
rcl
fild
inc
test
mov
mov
sti
mov
sub
xlat
inc
sahf
lods
pop
popf
loop
lahf
jge
loopne
or
test
pop
mov
jo
in
out
or
mov
sub
sbb
dec
inc
mov
xchg
fnstsw
aad
ins
sbb
xor
adc
push
cmps
stc
inc
mov
cmps
xor
lea
loopne
sbb
mov
lods
and
cmp
xor
mov
inc
push
iret
inc
pop
ret
xor
std
retf
sbb
popf
cmps
jmp
pop
sub
inc
sbb
sub
adc
retf
mov
cmps
push
mov
or
pop
xchg
pop
scas
aas
(bad)
rol
xchg
xor
and
push
ret
xchg
(bad)
outs
(bad)
loopne
inc
or
add
push
sub
or
stos
or
sub
xchg
mov
cmp
popa
xchg
xlat
push
dec
ins
sub
ins
test
dec
test
adc
cmps
pop
xor
sar
les
and
ret
push
jp
punpcklwd
or
ins
imul
push
push
lahf
test
popf
mov
pop
adc
fsub
(bad)
push
jb
pushf
lods
arpl
sub
pop
sbb
inc
xchg
neg
dec
lea
loop
xchg
ret
(bad)
cmp
mul
iret
shl
inc
xchg
test
sub
xchg
jbe
and
lahf
stos
jns
inc
cmp
sti
popf
out
inc
idiv
cmp
nop
sub
es
call
pop
pop
mov
lea
daa
mov
sub
sub
xchg
mov
mov
mov
hlt
mov
cmp
xchg
dec
ficomp
cmp
xchg
daa
aam
jno
in
or
jae
in
xchg
sbb
in
adc
cmp
dec
mov
shl
test
xchg
sub
div
mov
mov
(bad)
mov
bound
mov
rcr
push
es
aam
push
or
xor
mov
xor
hlt
and
dec
outs
cmc
xlat
sbb
ret
ror
lods
dec
xor
xchg
aaa
mov
dec
enter
mov
out
jle
in
test
(bad)
pop
jmp
fadd
inc
push
xchg
dec
xor
sbb
repnz
std
sub
loop
sub
jb
test
ins
adc
test
sar
in
jnp
div
cmp
mov
aam
clc
ins
enter
pop
cmp
shl
push
fisubr
enter
(bad)
cmp
call
jp
pusha
dec
ret
ins
add
bnd
mov
fstp
sub
pop
out
pop
push
push
pusha
xor
or
cs
std
fwait
in
sar
je
jmp
lea
std
aaa
sbb
loope
pop
bound
repnz
(bad)
mov
movs
xchg
jge
pop
and
clc
gs
into
sub
std
lds
sub
push
pop
bound
jno
mov
adc
fadd
xchg
sbb
cli
loope
mov
ins
(bad)
xchg
dec
add
xor
push
sub
cmp
or
mov
push
mov
mov
lahf
bound
loopne
cmp
pop
sbb
adc
pop
(bad)
repnz
adc
shl
pop
ins
sub
daa
sbb
xor
cmp
xchg
stos
hlt
cwde
test
ror
jmp
cld
lea
fwait
out
dec
jge
mov
cmp
aam
or
mov
movs
sbb
cmp
test
fucomp
imul
sahf
mov
and
in
inc
div
fcomp
adc
or
mov
xor
mov
fnsave
push
mov
(bad)
jne
data16
jge
mov
xchg
ret
xchg
pop
adc
jo
add
pop
mov
out
pop
xchg
clc
test
movs
stos
cmps
push
scas
int3
ror
xchg
js
shl
rcl
cmp
jge
fild
sti
ins
mov
sub
adc
frstor
movs
and
mov
jge
clc
xchg
pushf
fdivrp
les
cmc
jmp
xor
add
lea
cmp
enter
test
add
cmp
cwde
ds
clc
xor
inc
adc
neg
xchg
lea
pop
xchg
outs
sbb
adc
pusha
cld
fsub
xchg
mov
sbb
test
push
sbb
hlt
add
aam
inc
push
imul
hlt
cmc
out
add
xchg
out
or
mov
rcr
fucomi
test
outs
pop
imul
sub
and
shr
jl
in
loopne
mov
pop
call
fsubrp
into
push
ja
in
ss
cmc
fidiv
mov
mov
aam
test
sbb
inc
adc
add
(bad)
arpl
dec
mov
ror
fild
call
and
sbb
lds
dec
push
mov
(bad)
lock
out
fs
pop
inc
sbb
add
jle
cmp
dec
xchg
pop
jns
jle
test
daa
imul
je
add
add
ficomp
add
cmp
cmps
xor
popf
repnz
pop
push
lods
dec
adc
sub
fbld
int
pop
aad
and
cli
out
pop
mov
iret
mov
leave
inc
lds
addr16
cmc
and
push
xor
lods
fcmovb
out
pop
lea
xchg
jp
daa
or
sbb
xchg
scas
jg
int
xchg
test
cs
sbb
outs
mov
dec
test
sbb
mov
mov
mov
iret
jmp
lahf
bound
push
sbb
xchg
mov
int
int3
mov
mov
sar
pop
ins
aaa
mov
into
cmps
ret
jg
loop
loop
js
cmps
aad
nop
cmp
movs
inc
popa
or
mov
bound
cmps
or
pusha
mov
jno
xlat
out
and
push
pop
jge
xor
imul
lods
test
xor
movs
cld
pop
xchg
test
clc
jb
mov
xchg
push
inc
stos
ds
dec
into
cld
leave
ret
outs
mov
ins
mov
(bad)
pop
mov
push
sub
fidiv
scas
je
mov
adc
shl
pop
(bad)
in
pop
test
pusha
mov
aaa
int3
rcl
dec
int3
sbb
mov
call
pop
daa
jp
cmp
gs
jmp
leave
dec
fnstcw
jnp
lds
ds
jns
mov
loop
in
dec
test
add
cli
mov
sub
push
push
nop
adc
pop
or
push
test
inc
es
in
lea
mov
jb
fdiv
std
xchg
addr16
inc
mov
loope
sbb
(bad)
dec
xor
push
dec
xor
lahf
push
add
shr
repnz
popf
push
dec
das
lods
mov
in
inc
sub
bound
ret
mov
sub
mov
outs
int3
xchg
lods
not
and
cdq
push
and
or
loop
add
sub
jnp
sbb
inc
cmp
jmp
mov
pop
out
sbb
xor
cli
push
xchg
ds
aad
mov
sub
ins
jl
out
xchg
mov
daa
cmp
ret
aaa
sbb
xchg
dec
and
call
xchg
mul
lea
addr16
test
cmps
imul
sub
adc
(bad)
xor
hlt
sub
out
pushf
inc
pop
xchg
mov
cld
retf
fiadd
nop
ja
retfw
add
mov
sbb
jl
xchg
outs
ja
cwde
repnz
ja
int
cli
mov
call
out
pop
call
push
out
push
dec
in
pop
aaa
jno
inc
arpl
jne
pop
adc
pop
mov
(bad)
jl
outs
sub
xchg
add
xchg
or
xlat
lods
lods
div
sbb
jge
das
xchg
aaa
pop
dec
and
add
addr16
xchg
mov
int
fild
inc
jg
xchg
dec
arpl
pop
pop
pop
in
test
idiv
popf
imul
and
mov
shl
ss
mov
push
xchg
clc
xchg
ret
pop
iret
dec
fwait
cmp
or
add
outs
cmp
cmps
mov
fsubr
add
pop
cmp
xchg
and
outs
sahf
pop
mov
cmp
pop
sub
loop
mov
aaa
pop
loop
arpl
cmps
mov
aaa
and
dec
fbld
test
aas
test
sub
fnstsw
adc
cwde
or
inc
test
pop
ss
std
loop
scas
retf
pop
pop
pop
out
push
fdivr
bound
or
cmp
ror
ss
pop
adc
pop
ins
imul
jns
lods
(bad)
in
fstp
sbb
out
push
jge
cmp
addr16
jp
dec
addr16
mov
pop
int
mov
nop
jb
rcl
daa
dec
xchg
ins
(bad)
sub
xchg
xchg
js
inc
or
jnp
pop
mov
push
pop
pop
ins
aaa
mov
scas
cmps
sub
adc
xor
adc
ins
adc
lock
aaa
pop
lahf
dec
add
ret
in
xchg
js
repnz
mov
fs
aaa
daa
out
or
movs
ins
imul
(bad)
lock
mov
les
xchg
mov
in
sub
pop
jns
(bad)
outs
xchg
pop
pushf
scas
and
ja
in
xchg
test
xchg
cmp
iret
mov
pop
ins
mov
push
inc
cmps
lahf
imul
aas
lahf
pop
adc
mov
ins
pop
pop
jge
(bad)
enter
inc
mov
sub
cmp
fdiv
imul
or
sysret
dec
hlt
idiv
cmps
ret
cli
loop
inc
push
stc
loopne
mov
jl
inc
or
(bad)
(bad)
jl
ins
add
mov
jg
sar
sahf
jmp
fucom
mov
shl
test
les
pop
into
btc
jmp
mov
int
jmp
pop
repz
and
daa
mov
mov
fnstcw
jae
xchg
and
mov
sub
idiv
xchg
aaa
mov
sbb
adc
mov
mov
data16
xor
add
mov
sub
retf
ins
xchg
imul
mov
sub
lahf
add
int
(bad)
push
test
idiv
(bad)
xor
xchg
or
test
pop
lods
loopne
int
(bad)
push
jge
pusha
aaa
mov
inc
outs
leave
jmp
dec
in
cmp
push
inc
neg
and
push
jge
rol
xchg
jns
push
icebp
inc
cmps
enter
into
cmp
in
hlt
push
mov
fdiv
popf
add
pop
sub
daa
test
hlt
ja
inc
or
data16
dec
fwait
mov
mov
hlt
rcr
rcl
repnz
enter
imul
mov
pop
dec
push
sahf
pop
adc
mov
pop
cmp
gs
jb
into
cmp
xchg
and
in
mov
sub
loop
add
bound
retf
dec
pop
push
mov
enter
(bad)
outs
or
inc
pop
hlt
and
shl
sub
ja
repnz
pop
frstor
lods
lahf
fbstp
sbb
pop
daa
dec
xchg
sub
sub
adc
retf
push
cmps
int
jge
popa
out
out
add
mov
add
imul
cmp
aas
dec
and
gs
rcl
or
(bad)
jbe
dec
or
cmc
mov
repnz
xchg
mov
push
and
outs
add
lea
mov
jmp
xchg
mov
sub
pop
mov
pop
cmp
mov
pop
iret
call
pop
daa
dec
push
mov
pusha
sahf
pushf
xchg
fst
std
or
dec
and
sub
sbb
adc
out
adc
mov
push
clc
mov
push
bound
inc
push
xchg
clc
mov
daa
setbe
or
sub
in
pop
jle
push
sbb
sbb
sub
enter
push
cmp
out
inc
mov
push
vpmacssww
sbb
jge
ins
mov
rcl
repnz
xor
mov
push
aad
push
jg
mov
out
aaa
js
dec
jb
inc
or
jne
int3
jle
add
xchg
pop
cmps
call
neg
inc
xchg
(bad)
pop
nop
movs
aam
das
sub
das
add
or
jno
push
pop
fisttp
push
scas
cmp
sti
pop
nop
movs
mov
pop
cwde
ficomp
js
jnp
nop
xor
jno
push
jp
ret
pop
stc
ins
adc
add
aad
mov
jg
aam
cmp
pop
mov
out
xchg
fmul
xchg
aam
fnsave
or
cmps
jne
push
cs
or
sbb
call
mov
mov
out
adc
adc
sub
jp
sbb
clc
popf
jne
xlat
push
int
rol
add
dec
push
imul
push
movs
(bad)
call
xor
mov
jg
inc
push
loop
lods
push
sbb
popa
mov
cmp
or
pop
nop
mov
cmp
mov
das
add
arpl
adc
dec
bound
add
jne
es
adc
bound
adc
sub
xchg
jl
lods
mov
sbb
lock
das
neg
mov
inc
mov
into
adc
mov
and
and
in
push
scas
je
aam
and
jne
xlat
push
(bad)
dec
push
and
sub
mov
call
xchg
gs
int
rcl
sbb
lock
xchg
jl
mov
or
push
mov
fmul
xchg
aam
cdq
cmp
dec
adc
pop
or
aad
push
shl
push
and
fidiv
les
adc
or
nop
jmp
bound
jb
cmp
enter
test
int3
and
clc
in
adc
add
xor
and
xor
ins
mov
cmp
enter
test
mov
sub
dec
and
push
cs
push
bound
test
aad
mov
test
ret
jecxz
in
jo
adc
pop
xor
(bad)
mov
repnz
(bad)
retf
mov
jg
shl
push
mov
or
lock
jp
push
call
pushf
pop
xor
dec
mov
repnz
mov
es
xor
or
inc
xchg
fst
retf
loop
dec
jle
js
cmp
xor
shr
inc
fnstenv
cli
push
cdq
aad
jp
fbld
sub
sub
hlt
or
nop
jb
aas
out
test
rcl
xchg
jg
sar
jne
and
js
dec
push
pop
inc
mov
je
(bad)
call
mov
stos
outs
mov
and
adc
in
cmp
rol
out
call
mov
mov
cmp
cdq
int3
jle
js
mov
pop
(bad)
inc
or
mov
pushf
fadd
fidivr
cmps
repnz
enter
or
cwde
cmp
pop
lock
xchg
mov
sbb
inc
sbb
mov
dec
pop
mov
(bad)
(bad)
fstp
rcl
fwait
jg
les
std
pop
add
sub
push
aad
hlt
cmps
popf
sub
(bad)
adc
(bad)
test
or
mov
dec
scas
jbe
pop
sbb
shl
ins
adc
das
outs
mov
adc
adc
and
mov
push
daa
add
popf
pop
lods
xlat
pop
out
push
cld
cmps
sub
fidiv
cmp
jmp
bound
jbe
cmp
enter
adc
hlt
mov
jle
dec
adc
cmps
push
lock
test
je
jno
add
enter
push
jg
sar
sbb
lds
clc
pop
adc
popf
xor
rcl
test
mov
loop
rcl
out
enter
(bad)
push
mov
pop
test
or
div
daa
adc
mov
cmps
(bad)
push
aad
push
not
dec
jnp
pop
lods
aaa
xchg
mov
add
adc
outs
sbb
ins
lahf
jge
dec
pop
mov
lods
pop
js
cmc
sbb
mov
jnp
mov
inc
xlat
jl
push
pop
xchg
ret
cmp
mov
(bad)
lea
mov
pop
inc
xlat
inc
test
icebp
ret
jmp
xchg
xor
scas
scas
iret
loop
std
aad
ja
(bad)
(bad)
mov
add
push
mov
nop
mov
jg
sub
add
in
cmc
and
push
(bad)
fbld
xchg
xor
add
adc
pop
inc
xlat
inc
lds
adc
loopne
mov
mov
sub
and
repnz
ins
ss
test
aas
mov
mov
retf
loop
inc
sbb
sub
jp
out
call
mov
(bad)
(bad)
hlt
sbb
lds
jmp
movs
sub
scas
push
jp
sbb
jg
mov
pop
icebp
add
or
dec
nop
sub
sub
scas
mov
pop
movs
jb
aas
clc
jge
mov
add
dec
push
xchg
js
mov
sbb
push
fistp
ins
pop
lock
xchg
mov
ret
mov
rcl
imul
lods
lock
push
pop
(bad)
mov
sbb
rcl
push
call
dec
add
xchg
repz
in
inc
inc
fmul
aam
mov
jle
or
push
pop
(bad)
push
push
bound
sbb
lahf
mov
mov
cwde
dec
imul
fcomp
inc
mul
ins
out
and
out
test
scas
shl
and
scas
lock
adc
scas
cmp
ds
adc
out
dec
scas
dec
sbb
sbb
out
cmp
es
mov
lods
ss
movs
test
add
push
and
mov
aas
push
mov
ins
(bad)
lock
jne
lods
dec
lock
push
or
mov
xchg
jl
push
das
xor
retf
ins
enter
test
daa
shl
adc
sub
cwde
cmp
push
mov
lods
pop
js
push
fwait
jg
cmps
ja
cwde
std
sahf
fcomp
sub
lods
lahf
(bad)
inc
aas
(bad)
xchg
jp
daa
mov
mov
scas
lds
xchg
cmc
loop
add
or
clc
das
neg
cmp
mov
dec
push
xchg
mov
(bad)
lock
sbb
jp
ret
lock
ins
aaa
pop
into
into
fcom
cmps
sbb
or
cmp
test
sbb
lock
das
lock
mov
repnz
lds
and
sbb
ins
fwait
bound
pop
mov
ins
sti
inc
daa
sub
inc
js
test
pop
(bad)
and
bound
(bad)
or
push
std
or
push
clc
in
xchg
mov
aaa
enter
loopne
pop
out
jb
out
iret
loop
sub
mov
in
dec
out
lock
lea
js
add
ret
sahf
loop
rcl
js
jnp
nop
dec
outs
inc
cs
cmp
shr
nop
mov
icebp
add
repnz
mov
adc
jg
sub
or
es
ds
xchg
fidiv
mov
inc
sbb
lds
xor
xor
jno
mov
lock
enter
sbb
cwde
int
inc
js
lahf
adc
loop
xchg
or
lock
lea
mov
mov
repnz
cmps
add
jge
adc
fild
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
jbe
cmps
int
mov
out
pop
jge
or
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
inc
or
fldenv
test
adc
imul
cmp
ja
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
icebp
fucom
int
mov
out
pop
add
enter
push
cmp
cwde
or
mov
cmps
int
mov
out
pop
jge
ins
enter
push
cmp
addr16
dec
frstor
lods
mul
lea
jge
ins
aaa
pop
daa
mov
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
mov
inc
sub
xchg
std
js
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
pop
int
mov
out
call
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
inc
(bad)
lods
neg
pop
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
fmul
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
inc
adc
cmp
push
aaa
pop
adc
xchg
mov
popf
xchg
lea
pop
add
dec
ds
sub
je
imul
iret
mov
in
jl
cs
das
dec
and
inc
inc
jbe
and
out
mov
xor
call
or
outs
dec
cmp
sub
repnz
mov
imul
cmp
jge
add
cs
inc
dec
add
psadbw
mov
enter
mov
repz
adc
cmp
and
pop
or
xchg
xchg
mov
jmp
imul
or
adc
jb
inc
stc
cdq
loop
sar
add
jmp
loop
sbb
push
cmp
push
jnp
dec
ja
or
leave
in
fldcw
mov
enter
ins
sbb
inc
and
cs
push
outs
daa
outs
movs
lods
(bad)
in
into
mov
cmps
in
mov
xor
xor
jl
jge
imul
mov
repnz
scas
popf
xchg
jecxz
or
ja
daa
das
and
pop
add
pushf
out
mov
mov
xchg
fs
sbb
aas
push
imul
pop
addr16
mov
test
popf
enter
cmps
mov
(bad)
sub
pop
adc
bound
adc
pop
and
test
popf
enter
xchg
cdq
cmc
xchg
int
cmp
push
sbb
jge
inc
inc
dec
fs
sahf
(bad)
lahf
test
cmps
test
jae
addr16
push
push
or
les
mov
jbe
imul
pop
xor
jns
or
ret
popf
enter
scas
int3
mov
mov
push
jge
sub
xor
xor
add
bound
mov
mov
lods
in
xchg
je
arpl
jae
push
or
push
jl
popa
xlat
lods
(bad)
lahf
mov
test
mov
loop
arpl
push
push
das
push
sbb
push
outs
daa
outs
movs
lods
(bad)
in
shl
lahf
cmps
fucom
jecxz
sbb
ja
adc
pop
and
sub
mov
in
int
shr
mov
push
dec
push
add
sbb
and
jl
pop
push
jl
popa
xlat
mov
enter
mov
enter
gs
and
and
inc
adc
dec
test
rcr
call
frstor
sub
adc
sbb
cli
pushf
hlt
lods
aam
test
aam
int3
test
test
inc
bound
ss
xor
js
dec
in
ror
iret
jecxz
xor
jmp
jo
pusha
jb
jge
outs
jae
cmp
mov
loopne
mov
mov
mov
sysret
pop
pop
cmp
pop
pop
jne
aaa
push
add
(bad)
cdq
fistp
mov
lahf
jmp
pop
pop
ja
daa
sub
jns
dec
int
test
icebp
mov
(bad)
in
imul
xchg
lea
inc
adc
push
pop
pop
sub
hlt
cwde
loop
cmc
frstor
fistp
or
sub
add
jbe
adc
std
loop
(bad)
cwde
enter
loope
jge
sbb
push
or
ja
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
or
js
or
addr16
cwde
repz
aam
ret
scas
mov
(bad)
aad
(bad)
out
jl
fs
inc
cmp
dec
cmp
cmp
std
xchg
mov
stc
cmp
jge
or
daa
aaa
and
inc
dec
ja
vmwrite
frstor
lods
cdq
out
out
dec
sbb
add
daa
and
ja
add
fidiv
(bad)
lods
neg
ja
inc
pop
pop
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
push
and
cmp
addr16
rcr
ror
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
ror
(bad)
lods
neg
pop
ins
inc
pop
daa
cmp
and
sbb
cmps
lahf
sar
mov
lods
js
push
pop
aas
dec
sub
inc
sub
xchg
xchg
not
mov
xchg
out
and
or
add
xor
cmp
add
out
les
out
xlat
repz
call
inc
pop
daa
dec
push
dec
sub
xlat
std
xchg
popf
(bad)
lea
pop
outs
add
jge
aas
push
sbb
inc
fs
cmps
mov
ffree
mov
xchg
clc
(bad)
in
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
fld
sbb
outs
ins
push
sub
cmp
dec
push
sbb
xchg
shr
lea
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
leave
mov
xor
pop
ins
aaa
sub
cmp
ja
add
mov
test
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
fsubr
lea
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
aaa
sub
push
cmp
push
cmp
adc
push
cmp
repnz
popf
mov
aaa
xor
ja
gs
xchg
std
xchg
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
ret
fdiv
lea
jge
ins
aaa
pop
daa
dec
push
cmp
or
rol
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
std
xchg
mov
in
xlat
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
ror
lods
neg
pop
ins
pop
cmp
and
inc
add
mov
cmps
int
fadd
lods
imul
out
pop
sbb
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
pop
aaa
pop
daa
dec
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
mov
neg
pop
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
cmp
ins
aaa
pop
daa
sub
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
retf
call
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
inc
cmp
xor
sbb
xchg
mov
cmps
int
mov
sub
jge
ins
aaa
pop
daa
dec
push
cmp
daa
or
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
sub
inc
sub
xchg
std
xchg
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
in
mov
cmps
int
cmp
out
xchg
jge
in
aaa
mov
sub
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
loop
cmps
cwde
xlat
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
sbb
aaa
pop
daa
dec
push
cmp
aaa
or
mov
cmps
int
mov
out
pop
sub
daa
dec
push
ins
inc
sub
xchg
std
xchg
mov
cmps
int
in
(bad)
lods
neg
pop
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
test
ja
out
pop
jge
ins
ss
daa
dec
push
ins
inc
sub
xchg
std
xchg
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
pop
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
lods
inc
sub
xchg
std
xchg
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
mov
addr16
mov
test
mul
lea
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
or
cmp
mov
xchg
out
mov
sbb
daa
and
dec
mov
add
sar
clc
stos
out
neg
push
cmp
cdq
addr16
test
xor
mov
xlat
iret
arpl
add
pop
push
push
or
jl
inc
add
(bad)
retf
movs
mov
xchg
sahf
jmp
push
xor
sub
dec
sub
sahf
xchg
out
mov
cmps
iret
mov
cli
fdivrp
adc
sub
inc
ds
inc
imul
addr16
xchg
test
leave
in
xchg
iret
sub
push
sbb
aas
add
jne
xor
clc
xchg
hlt
lods
in
mov
jmp
icebp
mov
jb
sbb
dec
xor
cmp
les
mov
clc
xchg
in
push
jae
cmp
and
sub
jl
pop
mov
dec
in
test
cwde
repnz
mov
push
jg
sub
add
pop
adc
arpl
nop
jmp
mov
aam
leave
cwde
icebp
xchg
scas
sbb
push
cmp
and
pop
push
push
icebp
or
mov
arpl
das
push
sub
jae
push
and
js
int3
stos
fimul
out
mov
(bad)
jae
imul
in
xchg
xchg
push
outs
add
xor
int
mov
(bad)
pop
and
pushf
xchg
dec
cmps
int
fsub
dec
mov
ss
pop
mov
int3
xchg
stc
js
(bad)
lods
(bad)
mov
cmp
cmps
int3
inc
mov
or
sbb
jmp
cmp
out
neg
add
mov
and
fisttp
mov
pop
jge
xchg
fimul
xor
sub
xchg
fimul
mov
shl
sub
scas
mov
enter
clc
xchg
mov
inc
jge
bound
lahf
out
fwait
cmp
jecxz
lods
mov
(bad)
gs
sbb
push
int
or
in
pop
mov
jge
sti
leave
pop
xchg
test
pop
jge
cmp
cmps
cwde
in
das
sub
test
mov
jb
pop
jg
cmc
xchg
in
sub
adc
ins
in
xlat
mov
and
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
pop
jge
ins
aaa
pop
daa
dec
push
cmp
addr16
mov
cmps
int
mov
out
int3
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
mov
call
call
inc
ret
nop
nop
nop
nop
xor
in
cmc
xor
jo
pop
aam
fild
push
in
xchg
or
fidiv
les
(bad)
cmc
pop
cmc
out
xor
xchg
shld
push
iret
fbstp
lds
test
or
xchg
adc
aas
xchg
jge
das
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
mov
sbb
xlat
out
ja
stos
push
call
out
xor
out
data16
pop
sub
mov
mov
aam
or
sub
addr16
call
inc
add
cmp
movs
retf
aas
xchg
lock
or
inc
cdq
add
jo
jne
add
adc
nop
cmp
or
cmc
inc
xchg
por
into
mov
jns
(bad)
in
xor
dec
and
test
mov
jae
gs
jo
adc
and
aad
daa
or
sbb
sub
(bad)
out
in
cli
sbb
loop
hlt
pop
dec
ins
pop
or
jnp
push
cmovne
adc
test
outs
add
lea
in
mov
inc
xlat
fs
mov
sub
fcomp
dec
jle
sbb
(bad)
pop
xchg
and
dec
cmps
and
jmp
jecxz
lods
mov
mov
cwde
jo
out
fnsave
cmp
mov
aam
rol
ret
sbb
arpl
aad
pop
dec
stos
dec
and
in
mov
(bad)
or
nop
push
mov
xlat
sbb
sub
cmp
iret
das
adc
xor
inc
dec
dec
mov
rep
add
aad
in
cmc
cs
lds
pop
inc
mov
jo
mov
add
ja
cwde
int
dec
dec
outs
xlat
jg
(bad)
push
lock
sbb
pop
scas
lahf
retf
pop
aad
push
cdq
test
xchg
fwait
xadd
mov
test
iret
and
call
lods
ds
sbb
sbb
(bad)
mov
into
sub
test
inc
and
mov
(bad)
cli
aam
jbe
jo
dec
sub
iret
loop
jne
in
(bad)
sbb
loopne
gs
push
outs
lds
push
add
xchg
mov
sub
pop
jo
je
gs
jbe
cmp
in
into
out
push
add
lds
sbb
mov
dec
out
push
inc
pop
mov
call
ficomp
aad
cmps
pmuludq
shr
inc
jae
or
out
and
ja
cli
dec
fwait
and
fsub
xor
mov
push
mov
sbb
shr
lods
mov
cwde
mov
jae
jo
xchg
sti
cmp
not
and
sub
out
enter
cdq
aaa
cmp
ficomp
movs
add
sbb
ins
shr
sbb
inc
call
and
inc
mov
pusha
mov
mov
das
xor
ins
push
fs
mov
push
ss
cdq
fbstp
scas
dec
cmp
jnp
ja
out
mov
shl
clc
pop
movs
pop
mov
lds
mov
fs
add
and
cs
jmp
and
inc
or
cmp
outs
jle
(bad)
and
cld
aad
ins
out
(bad)
mov
out
inc
add
aad
jne
add
pop
cmp
out
adc
das
je
gs
dec
sbb
add
cdq
mov
lods
lea
and
ins
pop
mov
push
aas
xlat
jecxz
loopne
pop
inc
call
and
outs
xor
adc
scas
ficomp
xchg
std
cs
push
rcl
mov
enter
daa
push
mov
or
daa
rol
sub
mov
jb
mov
push
jno
add
and
cmp
cmp
dec
lock
jle
jne
push
lock
lods
push
inc
movs
dec
inc
arpl
rep
(bad)
dec
in
js
test
dec
cmp
mov
and
out
test
jo
lahf
xor
sbb
cdq
cmc
out
or
push
xor
fisubr
inc
jg
pop
out
push
jne
dec
xor
out
fcmovu
mov
jp
push
not
pop
inc
jo
mov
leave
jns
(bad)
out
js
cmp
aad
out
into
mov
inc
xchg
dec
or
(bad)
outs
cdq
fist
ins
pusha
inc
jmp
xchg
lds
cmps
ror
dec
push
dec
pop
jp
adc
jbe
int
push
jmp
mov
nop
xor
adc
or
iret
sub
mov
enter
or
cld
mov
(bad)
push
xchg
add
jp
push
test
loopne
sbb
call
jae
pop
aaa
loop
cld
sub
push
stc
xlat
repz
mov
int
cdq
xor
mov
pusha
adc
xchg
or
sbb
nop
aas
jne
adc
mov
dec
fimul
jnp
nop
cmp
and
ins
stc
jp
popf
xchg
add
adc
and
xor
test
adc
xchg
adc
push
sub
push
loopne
je
xor
retf
in
jecxz
fdiv
rol
stc
adc
lock
dec
ret
lods
je
sbb
(bad)
dec
fist
jns
jb
lahf
cmp
cmp
or
xchg
xor
fs
call
inc
push
jae
pusha
mov
mov
push
or
ins
dec
push
gs
pop
(bad)
(bad)
into
call
call
jo
jae
aaa
xchg
aad
dec
pmaddwd
mov
pop
xor
adc
jp
add
inc
mov
push
sub
(bad)
retf
movs
clc
add
lods
ds
div
pop
cmc
xor
pop
aas
adc
push
mov
aaa
sahf
push
popf
popf
lds
in
jbe
jno
jge
rcr
adc
retf
mov
pop
fdiv
(bad)
retf
inc
xchg
mov
sub
cmp
inc
dec
iret
mov
clc
dec
loop
pminub
xor
or
sti
push
out
out
out
inc
cld
fcomp
gs
jb
jno
aam
xor
mov
ror
repz
dec
call
je
fisub
call
data16
icebp
nop
mov
pop
add
xchg
cvtps2pd
push
pushf
in
fidiv
inc
out
std
jo
fsub
lds
test
cmp
dec
push
fs
stos
mov
fimul
aam
fiadd
lds
ss
pusha
push
and
stos
push
call
mov
mov
les
sbb
inc
push
xlat
imul
enter
xor
stos
pop
jmp
jg
xchg
cmps
mov
cs
movs
loopne
adc
sub
movs
push
es
cli
stos
push
enter
xor
pop
aad
in
jne
test
lds
loopne
sub
imul
jmp
add
jb
or
loopne
fwait
mov
sbb
and
fist
in
jge
add
sbb
pmullw
mov
mov
pop
psubsb
and
jo
mov
vsqrtps
pop
or
imul
ret
xor
jle
int
les
fwait
mov
aas
pop
mov
lods
mov
iret
and
repz
ret
dec
xchg
mov
or
jb
xchg
fist
(bad)
cs
or
std
push
(bad)
fldenv
(bad)
jge
shl
aas
movs
dec
mov
pop
pop
iret
and
outs
out
mov
arpl
mov
cmp
movs
dec
mov
lods
mov
ins
push
mov
inc
mov
xor
pop
test
inc
sub
dec
push
and
mov
xor
outs
cmp
dec
cmps
mov
loopne
data16
push
xchg
daa
add
push
ins
xchg
dec
cmp
lods
sub
dec
stos
fistp
fisub
jne
dec
std
jmp
jp
and
in
(bad)
bound
cmps
pop
out
pop
bound
inc
mov
cli
inc
mov
jnp
cmp
xor
movs
jns
sbb
das
loopne
stos
pop
call
add
popf
cmc
imul
ds
lahf
icebp
daa
nop
aam
arpl
neg
shld
and
ror
lahf
cmp
(bad)
outs
or
pop
lea
popf
or
clc
out
mov
mov
jecxz
sbb
into
addr16
shl
fmul
movs
or
xchg
pop
dec
xchg
clc
lods
dec
clc
pushf
mov
cmp
xchg
mov
dec
ins
mov
fs
loopne
out
test
push
or
arpl
dec
out
lock
cmp
or
imul
les
and
mov
call
ins
add
xchg
xchg
mov
cmovle
jno
stc
mov
jae
lahf
cmp
dec
loopne
or
sbb
mov
xor
dec
cwde
dec
mov
cld
scas
pop
push
adc
fdivr
mov
pop
mov
call
inc
cmp
pushf
aam
cwde
push
scas
idiv
je
pop
jle
and
push
jle
stos
cld
ins
mov
pusha
movs
mov
cmp
cmp
cmps
cmps
icebp
pusha
enter
cs
fistp
ins
fistp
or
or
jbe
aam
das
jns
push
xchg
and
mov
into
adc
lock
pop
mov
cli
push
(bad)
cmp
mov
push
mov
pop
dec
out
out
neg
out
fistp
or
xchg
xor
jl
cmp
dec
shl
pop
and
(bad)
lods
sti
pop
retf
jno
add
loope
test
test
mov
cmp
dec
retf
pop
scas
(bad)
fcom
out
dec
shr
jle
aas
xchg
pop
test
test
aas
push
fild
js
xor
lea
mov
movs
jecxz
xchg
jl
test
stos
fnsave
(bad)
mov
leave
cwde
pop
sbb
in
jbe
push
mov
sti
xchg
cld
add
inc
pushf
jnp
xchg
cmp
cmp
fadd
mul
mov
shl
loop
cmp
pop
mov
xchg
movs
sub
popa
(bad)
loope
arpl
cwde
(bad)
and
rcr
popf
sbb
retf
mov
mov
xor
dec
lods
lahf
mov
pop
outs
pop
int3
jb
aaa
adc
fidiv
dec
call
jmp
push
mov
das
ins
aaa
adc
cmps
mov
dec
call
out
and
int3
std
push
loop
fisubr
pop
cmps
mov
ret
jg
iret
inc
iret
stos
push
call
inc
add
(bad)
fnstsw
les
or
ret
cmc
dec
int3
mov
pop
cmp
into
scas
or
or
xor
dec
mov
xor
inc
pop
push
sub
test
test
(bad)
fimul
sahf
xor
dec
mov
inc
aas
push
imul
gs
fbld
and
scas
mov
adc
sub
sub
inc
mov
(bad)
fcmovu
mov
sub
das
inc
repz
aas
movs
fnstcw
add
cdq
(bad)
lock
arpl
or
nop
mov
jmp
call
(bad)
aas
lea
jne
pop
std
push
(bad)
imul
lds
cmc
das
std
outs
lock
outs
shr
mov
iret
stos
xchg
jne
mov
mov
dec
in
pop
jl
ins
pop
loopne
call
cld
push
and
stc
push
xchg
into
sbb
mov
ja
push
sbb
mov
cmp
xchg
mov
popf
icebp
push
inc
adc
mov
adc
outs
(bad)
lahf
push
leave
push
or
adc
inc
pop
stos
jne
inc
cli
jmp
or
cmp
and
in
(bad)
ds
lods
cmp
mov
call
in
and
jne
ja
out
inc
inc
iret
call
int
into
pop
sub
cmp
dec
lock
das
out
sub
dec
dec
div
pop
mov
in
in
out
push
(bad)
addr16
ret
cwde
popf
or
(bad)
mul
data16
lea
daa
push
cmp
fstp
outs
xchg
aad
push
outs
push
shld
stos
inc
add
inc
inc
js
or
shl
or
jecxz
jmp
ficom
inc
jb
xchg
daa
and
addr16
test
cwde
pop
test
add
(bad)
rcr
jecxz
jecxz
into
sub
add
pusha
xor
mov
mov
cs
imul
xchg
fstp
stos
inc
push
push
mov
imul
jg
pop
outs
mov
pop
fdiv
xchg
lock
loop
mov
call
aad
retf
inc
mov
ins
pop
hlt
push
outs
jge
loopne
dec
jae
scas
push
(bad)
movs
cmp
outs
bnd
(bad)
pusha
cmp
sbb
jbe
(bad)
jp
gs
push
mov
mov
pop
cdq
sub
mov
outs
dec
or
das
ins
mov
leave
out
push
out
lods
jb
dec
gs
clc
scas
ret
cld
(bad)
ja
nop
inc
jg
ret
mov
popa
aas
fadd
enter
lea
sub
push
pop
pop
jge
arpl
and
adc
cmovp
dec
xchg
dec
outs
inc
pop
push
gs
jne
push
adc
jl
jo
sub
pop
sbb
shld
add
inc
cli
sbb
mov
jae
cmp
jno
ret
stos
repnz
xchg
or
xchg
xchg
outs
adc
daa
push
jne
inc
ja
(bad)
and
mov
cmc
js
jp
in
sbb
ins
enter
out
and
loope
jmp
pop
lds
sbb
pop
or
jp
out
pop
out
inc
pop
xchg
iret
pop
iret
cmp
(bad)
cmp
loope
pop
pop
mov
cmp
dec
popa
pop
jno
mov
sbb
lea
dec
dec
and
jo
ret
mov
test
jnp
jb
gs
jne
push
cwde
retf
mov
dec
in
push
sub
push
imul
xchg
in
or
mov
jns
retf
aad
mov
xor
(bad)
or
jg
jne
sub
mov
ficomp
loopne
(bad)
loop
adc
or
or
loop
movs
aas
mov
push
je
movs
sbb
cmp
cmp
cmps
mov
or
sub
pop
(bad)
call
add
lahf
fucom
cmp
aad
add
and
pop
mov
into
xchg
add
rol
dec
rol
pusha
retf
and
and
jge
cmovge
mov
cmp
and
mov
data16
int
xor
dec
or
xlat
sbb
arpl
inc
pop
push
xor
fistp
dec
addr16
shr
dec
jg
fnstenv
jae
lods
call
lods
xchg
adc
mov
add
out
xor
std
and
inc
movs
pop
in
movs
cmc
and
test
inc
and
push
cwde
int
out
xor
dec
loop
cmc
push
jbe
xchg
jle
out
add
add
daa
inc
neg
jne
(bad)
and
retf
popa
shr
adc
iret
lea
mov
inc
xor
jp
jg
add
mov
lock
dec
out
or
push
mov
das
jne
mov
adc
lds
lods
mul
or
rol
div
pop
shl
fdivr
addr16
cli
inc
in
rcl
repnz
mov
pop
cmc
push
push
xchg
inc
(bad)
sub
xchg
push
lds
jne
ret
std
sbb
and
mov
xor
fist
jmp
popf
jp
add
pop
inc
sub
idiv
jge
mov
mov
shl
jns
int
pop
repz
push
add
sbb
sub
scas
out
lods
sbb
mov
test
jo
(bad)
and
ins
dec
jge
and
fs
fwait
push
mov
ficomp
gs
in
jg
or
push
sbb
pop
not
out
or
adc
or
out
adc
and
repnz
mov
rol
arpl
sub
icebp
xor
std
cwde
jo
arpl
dec
mov
push
xchg
or
stos
adc
and
fxch
frstor
mov
mov
or
movs
test
lock
xchg
fbstp
fbstp
push
mov
xor
or
adc
leave
mov
mov
mov
inc
fucomi
(bad)
iret
ret
cmc
nop
xchg
xchg
pop
jp
aam
out
sar
stos
push
jecxz
enter
xor
mov
lods
jmp
ja
sbb
sar
bound
pop
mov
enter
mov
call
das
nop
xchg
cmc
(bad)
jnp
iret
pop
dec
jecxz
loop
add
xor
jmp
jg
fst
cmps
mov
xchg
out
call
inc
and
push
les
dec
and
sub
rol
rcl
mov
mov
and
mov
in
xor
add
or
lock
je
inc
cmp
fwait
pop
das
clc
in
inc
sahf
or
ja
add
aad
in
or
popa
fs
leave
movs
div
adc
mov
das
scas
ret
and
jne
leave
loop
repnz
in
or
ins
js
(bad)
stc
loopne
out
cmp
scas
cli
jle
jmp
arpl
mov
jbe
inc
sbb
and
rol
adc
inc
xor
sti
int
xor
adc
mov
push
test
loopne
dec
(bad)
enter
out
push
xor
xor
sub
pop
js
test
loope
push
loopne
pop
cmp
rcr
ror
inc
mov
or
ret
xchg
push
movs
div
call
and
cli
dec
popf
add
ss
mov
jge
xchg
xchg
cmps
and
pusha
and
mov
xor
cmp
mov
(bad)
aas
enter
lock
push
iret
xor
and
(bad)
(bad)
sub
ins
(bad)
movs
outs
popa
fimul
or
cmp
loop
cmp
xor
es
add
push
jb
pop
adc
je
mov
aaa
xchg
dec
cli
inc
cwde
add
xchg
retf
mov
hlt
mov
data16
pop
mov
push
ja
shl
leave
loop
jb
sbb
pop
mov
dec
arpl
mov
add
imul
outs
sub
pop
mov
or
dec
ds
inc
add
movs
call
and
pop
jg
sbb
(bad)
in
loope
mov
pusha
retf
cli
repnz
test
mov
rol
das
test
push
mov
push
call
inc
rcr
push
sbb
sbb
sar
mov
lods
pop
xor
sub
into
clc
push
mov
adc
and
movd
aad
sbb
xchg
mov
or
ror
cmp
push
mov
jbe
xchg
push
dec
and
mov
sbb
sbb
and
jcxz
sub
or
cdq
mov
(bad)
jp
leave
out
cmp
fwait
push
cmp
test
leave
stos
add
js
mov
mul
daa
xor
push
test
fidiv
adc
shl
aad
or
xlat
xchg
push
movs
loopne
out
xor
push
retf
popf
(bad)
sbb
ret
pop
jge
fs
lahf
sbb
test
mov
fs
jbe
bound
stos
dec
fs
mov
push
out
jle
je
pop
mov
aad
sar
lods
(bad)
add
push
cld
jmp
gs
fiadd
mov
mov
jne
mov
stos
dec
loopne
sub
mov
or
pusha
ret
cmp
aam
daa
ins
xor
lea
scas
repz
not
sbb
aam
push
ss
nop
cmp
pop
fidiv
popf
jbe
sub
cmp
popf
out
mov
mov
sbb
outs
xor
gs
enter
sub
rcr
lods
out
or
(bad)
arpl
sub
dec
movs
adc
out
outs
mov
cmp
es
push
retf
hlt
mov
sub
xor
cld
sbb
inc
loopne
in
and
mov
(bad)
mov
das
push
xor
test
mov
cli
pop
retf
inc
cmps
sub
dec
pusha
sahf
xor
add
xchg
sti
mov
ss
cmps
and
add
pop
mov
jo
sahf
ins
lods
idiv
or
jge
push
push
lods
faddp
mov
not
adc
pop
(bad)
ja
in
push
jl
lock
sbb
adc
or
cmps
fisttp
shl
mov
cmps
push
ret
xlat
xcrypt-ctr
cmps
pop
pop
fs
pop
lods
inc
movs
stos
mov
mov
add
pushf
jo
jg
lods
mov
and
mov
into
inc
ins
inc
xor
cli
sbb
and
xchg
push
dec
test
mov
push
movs
pushf
xchg
inc
inc
fiadd
dec
mov
add
rcl
sbb
push
aas
xchg
out
cmp
fmul
mov
add
lahf
xor
xchg
sbb
punpckhdq
imul
pop
lds
jne
or
xor
arpl
sub
call
movs
fadd
fs
je
mov
jge
pop
sub
xor
pusha
in
cmc
in
test
out
out
mov
dec
jo
xchg
add
sub
or
test
xlat
inc
cs
jecxz
inc
xchg
pop
cmp
out
fwait
pusha
pop
mov
dec
cmp
jae
jp
out
pop
cmp
adc
and
add
jmp
push
push
icebp
xchg
out
pop
sbb
(bad)
xor
cli
scas
add
jmp
test
in
jge
jp
and
lock
mov
and
push
cli
jg
and
jg
ret
stos
mov
sti
pop
jnp
add
stc
daa
inc
jg
sub
push
retf
jl
and
mov
cmps
div
mov
jmp
or
inc
mov
jg
mov
xor
xor
pop
fwait
rol
call
jmp
fst
mov
int3
xor
out
aas
addr16
or
sub
les
in
push
mov
mov
jle
movs
dec
pop
stc
enter
lea
push
loope
aad
pusha
sahf
fucom
jbe
aad
daa
mov
js
xor
jno
pop
cmp
test
add
sbb
adc
fwait
dec
ins
enter
pop
pop
mov
push
xchg
mov
loop
stos
push
dec
test
jo
inc
repnz
mov
mov
hlt
sub
push
stos
adc
or
jno
xor
int3
mov
fcmovnb
lahf
cmp
lds
ror
xchg
loope
sar
mov
pop
push
mov
push
aam
js
aam
scas
pop
inc
and
push
jbe
mov
sbb
sti
pop
pop
mov
out
(bad)
push
add
lahf
jo
cmp
cmc
and
adc
sbb
(bad)
scas
inc
push
pusha
ja
mov
dec
jg
cmps
sbb
shl
lahf
retf
movs
pushf
iret
jo
mov
add
pop
fucom
scas
sbb
sbb
jle
test
jmp
cwde
gs
out
(bad)
aad
aam
retf
(bad)
adc
aad
jl
outs
outs
pop
inc
push
dec
mov
fbstp
add
sahf
mov
adc
push
xor
enter
movs
jecxz
out
or
adc
addr16
mov
pop
mov
retf
repnz
mov
or
ins
jl
jae
loopne
bound
test
jmp
inc
cmc
call
aad
ins
pop
jl
int
call
fs
mov
push
stos
ror
push
repnz
mov
sar
ja
into
cs
mov
adc
mov
lds
or
mov
test
mov
sub
adc
or
xor
dec
xor
inc
cli
or
push
out
loopne
push
push
jp
lahf
aad
pop
sub
sub
and
ds
or
fidiv
jge
movs
and
int3
xor
jmp
loopne
add
fdiv
and
sahf
sub
xor
sbb
push
das
add
bound
pop
jno
movs
mov
and
sbb
mov
mov
cmp
mov
push
jns
js
adc
in
mov
aad
loope
xor
mov
je
iret
and
and
add
push
add
jbe
xor
mov
sbb
movs
mov
and
cmp
dec
icebp
jmp
sub
into
mov
jne
movs
inc
lock
mov
mov
and
js
hlt
cmps
push
xor
push
ins
aam
das
lock
test
cmp
or
daa
in
fistp
push
leave
push
mov
mov
(bad)
iret
les
retf
push
inc
cmps
and
pop
mov
add
mov
xchg
add
jae
sub
repnz
clc
scas
mov
call
rcl
xchg
leave
div
pop
test
jns
xchg
int3
movs
loopne
mov
jmp
scas
inc
xlat
adc
scas
lahf
xor
cmp
mov
jmp
xchg
dec
cs
loopne
into
add
cmp
cmp
shr
jg
dec
mov
fstp
ins
push
dec
loopne
cmps
xor
cmps
or
add
lods
cmp
cmp
aam
pop
adc
enter
out
dec
out
add
xchg
(bad)
xchg
pop
jmp
inc
in
push
jnp
dec
pop
pop
jle
test
xchg
mov
and
icebp
mov
cmp
fisub
jl
(bad)
in
cmc
movs
inc
rcr
fs
xor
jle
add
sbb
mov
xlat
cmps
movs
enter
movs
adc
cmp
mov
and
ja
les
(bad)
mov
inc
movs
push
xchg
out
aaa
jne
mov
(bad)
jae
mov
loope
or
jnp
push
pop
in
shr
test
push
(bad)
mov
pushf
aad
cmp
dec
sbb
push
mov
pop
mov
xchg
out
mov
adc
addr16
or
lds
std
rol
push
rcl
loopne
(bad)
mov
lea
vunpckhps
pop
inc
outs
or
or
ror
sub
jb
mov
call
and
jnp
shld
sub
mov
sub
fwait
mov
push
(bad)
aaa
adc
nop
popa
dec
jne
in
cmc
bound
fnstsw
jecxz
push
inc
adc
push
out
xchg
jmp
jne
test
pop
into
in
fdiv
movs
test
mov
(bad)
mov
pop
popf
je
mov
adc
call
pop
pop
bound
rcl
inc
(bad)
push
xor
add
dec
pusha
push
pop
xchg
cmp
jle
inc
jmp
jmp
fdivp
push
push
xor
inc
(bad)
stc
dec
pop
cmp
jg
(bad)
loope
sub
and
jecxz
ret
dec
adc
cmps
cmp
dec
push
push
lea
cmp
and
jle
retf
pop
sti
movs
idiv
push
xor
fsub
and
stc
(bad)
loop
stc
pop
vcvtsi2ss
test
jnp
lock
cmp
adc
or
aam
das
(bad)
test
div
mov
inc
push
pushf
add
xchg
xor
mov
push
out
jns
pop
push
dec
pop
mov
stos
into
and
aad
cmps
cmc
xor
dec
call
jb
test
pop
dec
add
push
jne
mov
hlt
pusha
dec
jnp
inc
mov
push
xlat
jp
sbb
test
and
jmp
jge
cmp
dec
or
aam
test
xchg
inc
(bad)
mov
dec
inc
retf
sbb
jo
mov
pop
ins
mov
sub
xchg
mov
mov
sub
add
inc
sub
mov
mov
adc
dec
pusha
push
pop
scas
add
push
lds
clc
movs
test
add
shl
movs
adc
loope
xor
jmp
fcomp
mov
loope
cmps
fcomp
imul
inc
add
cmp
call
in
test
mov
test
(bad)
fs
stos
xchg
mov
jb
xor
adc
jns
push
idiv
pop
into
mov
ss
in
inc
sahf
(bad)
xor
cmp
aaa
outs
fidivr
test
fs
and
xor
(bad)
jnp
mov
adc
jne
int3
mov
xchg
dec
cmp
into
sti
adc
addr16
and
mov
dec
scas
je
pop
mov
mov
rcr
aaa
push
jnp
pushf
mov
cdq
push
xor
mov
cmp
and
lods
movs
lea
push
sahf
pop
mov
mov
jle
scas
ds
(bad)
push
sbb
cmps
mov
ror
aas
xchg
xchg
je
out
inc
add
inc
pop
xor
fiadd
jae
cmc
inc
nop
xchg
cmp
les
add
lock
pop
xchg
dec
and
mov
add
pop
jge
jmp
pop
(bad)
out
test
int3
ror
repnz
ds
or
dec
adc
std
cli
jmp
repnz
jge
iret
je
imul
enter
jo
jne
jno
adc
outs
out
push
dec
and
ror
and
cld
stc
mov
mov
push
add
cmc
sub
popa
(bad)
pop
inc
pop
pop
dec
add
push
das
mov
jmp
fst
jecxz
cmc
das
inc
popa
pop
repz
cli
into
or
and
loope
or
pusha
aaa
cs
cmp
mov
or
push
repz
cld
push
enter
add
out
and
outs
add
mov
pusha
adc
mov
dec
or
aas
push
gs
out
(bad)
push
pop
mov
test
test
idiv
in
ds
mov
leave
adc
(bad)
push
popf
xchg
(bad)
jmp
push
lods
fldenv
push
or
jle
mov
dec
jmp
pusha
in
add
lahf
retf
jg
(bad)
lock
xor
push
aas
sbb
movs
jecxz
iret
inc
adc
iret
add
jne
scas
out
sahf
dec
adc
hlt
pop
or
aad
cmp
jge
xchg
xchg
mov
mov
mov
xor
les
add
jl
les
mov
test
mov
jg
lahf
mov
or
mov
retf
push
dec
dec
pop
lods
mov
and
int
sub
dec
pmullw
test
xor
dec
adc
repnz
out
iret
adc
scas
lahf
lea
push
gs
rcr
neg
mov
or
fidiv
cli
ss
retf
(bad)
and
test
stos
lods
sub
rol
inc
add
xor
jbe
jo
pop
lods
aaa
mov
pop
sub
imul
cmp
(bad)
je
pop
mov
mov
sbb
ds
mov
imul
call
in
pop
imul
out
lock
jl
mov
lock
xor
mov
fucom
cmp
std
das
jp
fdivr
loopne
lea
pop
daa
inc
and
push
dec
aam
ins
popf
sbb
mov
pop
mov
sub
daa
je
inc
mov
dec
xchg
sub
nop
ds
pop
adc
into
jmp
push
lahf
jmp
xchg
mov
sub
push
add
push
idiv
jo
jne
dec
xor
jo
xchg
ins
aas
inc
cmp
dec
sbb
or
test
cmp
push
jmp
in
push
inc
ja
dec
inc
add
int3
sbb
and
mov
xor
push
ss
xor
sbb
fidiv
ret
out
jae
into
add
add
push
and
sub
dec
mov
repnz
jno
movs
(bad)
call
je
lahf
sub
pusha
imul
adc
test
leave
mov
aad
(bad)
pop
fdivr
mov
xor
sti
out
(bad)
jmp
pop
sub
mov
cmc
out
adc
movs
mov
inc
cmp
dec
gs
aaa
outs
add
loop
cmp
xchg
add
ror
dec
push
dec
pop
xchg
mov
mov
jg
repz
inc
pop
jmp
fnstsw
aas
iret
rol
or
rcr
not
in
cmp
sub
loop
jns
ret
push
pop
xchg
cmp
sbb
xchg
rcl
in
and
aad
pop
sbb
fcomp
test
out
es
call
in
fild
inc
push
dec
jo
adc
add
mov
imul
mov
scas
inc
jmp
int
lahf
outs
xchg
in
cmps
xchg
and
shr
fstp
rcl
and
jns
xchg
jb
sbb
dec
jmp
dec
ret
movs
dec
cmp
into
stc
pop
xor
xchg
aam
nop
mov
ret
push
or
(bad)
jns
adc
stos
gs
aaa
xchg
ret
stos
aam
jne
xor
mov
nop
scas
push
pop
fcomp
pop
scas
push
je
mov
jne
jo
inc
add
jg
outs
xchg
not
sub
(bad)
push
call
mov
das
test
mov
xor
ret
jmp
repnz
lock
loopne
adc
push
xor
(bad)
iret
xor
or
dec
movs
jmp
mov
movs
js
fcom
mov
mov
ss
shl
(bad)
out
cmp
mov
les
sbb
dec
fisttp
loopne
mov
aam
movs
aas
and
and
jecxz
out
jnp
ja
xchg
mov
ss
or
xlat
lock
dec
jmp
scas
sub
mov
push
jle
mov
lahf
cmp
pop
xchg
pop
mov
xor
sbb
sub
xor
fsub
frstor
xor
cmps
fs
stos
scas
xor
movntq
out
lods
cwde
push
xor
dec
jae
repnz
pop
aad
sbb
test
mov
jbe
adc
pop
cwde
adc
dec
imul
adc
xlat
les
mov
mov
das
pop
fidivr
cs
adc
in
jo
jno
scas
pop
xor
mov
push
sbb
test
sbb
(bad)
cld
lock
xlat
add
fwait
push
ins
jmp
in
lea
push
(bad)
cs
sub
int3
push
mov
xchg
inc
and
adc
and
mov
(bad)
push
fistp
sub
jno
dec
xchg
xchg
js
mov
les
ds
mov
in
push
jo
mov
adc
mov
xor
lock
jl
mov
aas
jns
add
int3
mul
or
movs
loopne
mov
mov
xchg
cmp
out
sar
les
dec
push
mov
(bad)
fnstenv
icebp
rcl
jecxz
xchg
out
or
dec
mov
cli
add
push
ret
ins
and
adc
mov
les
es
dec
ins
mov
pop
mov
add
sbb
xchg
leave
mov
ins
xchg
cmc
and
je
inc
ds
out
(bad)
scas
or
ret
lds
mov
add
jbe
imul
pushf
stc
scas
adc
(bad)
dec
mov
lock
xchg
cmc
jbe
arpl
mov
nop
adc
and
push
sub
pcmpeqw
arpl
fisttp
mov
(bad)
in
cmp
lahf
lea
das
mov
or
mov
xchg
inc
iret
xor
(bad)
adc
or
test
shl
out
mov
outs
in
adc
ins
jle
pop
and
mov
out
push
mov
dec
cld
pop
sub
loopne
(bad)
push
das
cmc
retf
das
mov
(bad)
(bad)
imul
or
(bad)
test
jmp
leave
xor
(bad)
pop
pop
std
cmps
inc
mov
push
outs
pop
dec
adc
push
xchg
pandn
add
(bad)
cmps
adc
mov
cmps
mov
(bad)
dec
mov
sub
sub
and
pop
add
and
sti
xchg
pop
mov
ret
(bad)
sbb
add
and
pusha
gs
(bad)
repnz
in
jmp
aas
push
iret
pop
idiv
jecxz
(bad)
push
mov
stos
mov
outs
push
push
jo
popa
(bad)
jp
cmps
lea
movs
and
push
pop
fdiv
call
ss
je
cli
dec
adc
out
repnz
mov
jp
xor
lock
movs
push
imul
hlt
loop
cmc
push
dec
in
jne
test
pop
dec
cmp
ja
jmp
xlat
jae
out
xor
mov
inc
mov
psubsb
repnz
xor
aaa
and
xchg
gs
pushf
or
push
in
pop
or
mov
mov
jg
and
xchg
sub
sbb
dec
adc
mov
jne
stc
sub
mov
cli
(bad)
mov
jbe
nop
imul
jecxz
lods
push
test
lahf
fbstp
mov
rol
bound
dec
jnp
dec
mov
or
shr
repz
or
enter
jo
xor
cli
adc
jmp
cmps
ror
dec
push
sbb
fs
ss
xchg
outs
jae
push
push
jle
dec
imul
sbb
dec
fs
mov
repnz
push
les
or
xor
dec
and
xchg
jge
arpl
cs
push
jb
inc
inc
add
in
mov
mov
jp
sahf
xchg
pop
dec
movs
add
mov
dec
aas
cmp
aad
xor
movs
not
push
je
inc
mov
(bad)
(bad)
out
aam
out
cmp
xchg
lods
das
shl
mov
enter
lea
jmp
dec
arpl
xchg
sub
mov
cmp
mov
mov
cdq
adc
test
daa
movs
(bad)
adc
scas
call
ins
enter
pop
das
jns
dec
mov
xor
stc
xor
add
hlt
sub
dec
mov
shl
jmp
movs
loopne
and
jmp
sub
adc
nop
inc
jg
pop
or
mov
out
cmc
call
adc
mov
jo
loope
fcmovu
pop
fist
vmread
push
outs
ror
and
stos
(bad)
mov
scas
(bad)
lsl
dec
mov
jge
fidiv
jmp
lahf
ficom
stc
mov
jo
cwde
cmp
lds
pop
add
stos
fisub
jne
mov
rol
push
shl
jno
mov
xchg
cmps
cdq
mov
and
test
fist
loop
xchg
xchg
mov
cdq
cmc
mov
out
dec
mov
call
or
xor
dec
sbb
xchg
jp
out
pop
dec
les
fiadd
mov
jbe
outs
cmp
inc
mov
inc
or
ss
dec
movs
pop
cdq
jmp
ins
push
inc
xor
add
aaa
(bad)
sbb
cdq
or
or
xor
out
cmp
pushf
out
and
(bad)
and
jg
ja
pop
mov
or
lahf
inc
dec
push
xor
pop
jne
add
lahf
pop
outs
xchg
and
push
xor
or
je
mov
add
pusha
leave
and
sub
in
sbb
in
aas
jg
cs
rcr
(bad)
mov
push
cli
dec
adc
scas
dec
sub
mov
sbb
leave
aas
lds
test
jmp
pusha
scas
add
dec
push
outs
xchg
mov
mov
jecxz
push
mov
gs
gs
aaa
loope
cmp
shr
sub
jae
rcl
xchg
lods
adc
push
and
ins
xor
(bad)
scas
enter
jnp
dec
ins
sub
(bad)
sbb
inc
pop
in
mov
inc
cmps
out
or
inc
mov
int
sub
mov
dec
sub
mov
pop
sub
sbb
lods
int
cmp
cmc
daa
push
js
iret
sbb
inc
or
push
test
jae
xchg
jnp
mov
jg
je
(bad)
xchg
cmp
int
aaa
mov
push
pop
jmp
inc
arpl
sub
rol
jp
mov
mov
mov
push
lods
push
mov
inc
in
sbb
add
sti
lock
ja
or
fild
pop
mov
imul
cli
aad
lock
push
pop
inc
sbb
xchg
aad
(bad)
ror
gs
push
xor
ret
cmp
dec
js
nop
sar
icebp
int3
inc
or
adc
sar
jge
adc
lahf
and
sub
ror
or
out
fstp
lea
push
or
push
xor
lahf
and
jle
nop
jge
push
dec
pop
je
inc
push
mov
in
push
out
cwde
(bad)
jne
ins
aas
xchg
loopne
add
xlat
add
call
pop
adc
shr
jmp
fidiv
retf
add
idiv
mov
daa
jne
ds
and
cmp
adc
xchg
push
push
push
mov
sti
fadd
pusha
fidiv
jge
add
in
xchg
cmc
(bad)
jmp
mov
stos
imul
dec
mov
mov
dec
cmp
cmps
jecxz
sub
mov
out
int3
sti
xor
jno
mov
push
jle
fisub
outs
sub
pop
lahf
shr
jge
repz
iret
(bad)
fbstp
jmp
int
or
push
cwde
and
mov
paddb
cmp
mov
mov
inc
cli
retf
and
mov
and
pop
out
pusha
mov
jne
inc
pop
adc
loop
inc
aad
ins
mov
push
push
imul
inc
xor
inc
std
shl
cmp
js
sar
pop
movs
sub
adc
out
into
xchg
mov
xchg
repnz
in
pop
cs
xor
push
lea
lock
vcvttpd2dq
adc
outs
shl
psubusb
jno
jbe
mov
in
mov
mov
dec
test
jle
dec
outs
xchg
pcmpgtb
push
adc
movs
lea
push
scas
leave
jo
(bad)
jp
xchg
mov
sar
addr16
pop
xchg
add
aad
cmps
mov
push
test
call
and
inc
push
test
xor
(bad)
push
inc
xor
xchg
dec
sbb
daa
inc
sbb
(bad)
mov
es
(bad)
add
xchg
repz
int
gs
lods
mov
mov
(bad)
add
sahf
xor
jg
pop
push
mov
test
sbb
test
enter
xchg
inc
lahf
fdivr
jo
ret
scas
lods
mov
cmp
mov
xchg
dec
dec
inc
ds
not
cdq
fwait
call
dec
cmp
ins
push
mov
sub
cld
push
out
jae
jbe
out
cmc
add
mov
jg
out
fcmove
mov
push
add
xor
inc
inc
ds
pushf
cmc
xor
lods
mov
mov
dec
push
mov
popf
jb
adc
stos
enter
jns
mov
js
xchg
xor
(bad)
mul
movs
pop
je
push
shl
push
aaa
out
aam
and
inc
sbb
in
dec
xor
mov
or
push
sbb
push
(bad)
pushf
cmp
push
mov
ret
je
shl
(bad)
dec
sbb
fs
hlt
leave
push
out
in
aam
push
mov
mov
(bad)
(bad)
into
add
push
mul
pop
jne
inc
mov
add
jge
les
mov
mov
inc
inc
(bad)
je
sbb
fs
scas
stos
and
sbb
and
xchg
mov
sbb
sbb
sub
cmp
int3
int
fucomp
mov
scas
les
adc
add
ja
xor
cmps
mov
xchg
ja
or
movs
cli
adc
dec
and
ins
outs
adc
xor
add
cwde
sbb
adc
pusha
dec
repnz
or
pushw
movs
cvtps2pd
inc
test
jl
pop
xor
ret
(bad)
imul
daa
sub
stc
adc
push
into
call
jo
pop
icebp
sub
mov
mov
or
push
repz
push
lock
mov
(bad)
clc
scas
xchg
push
push
dec
mov
outs
pushf
xchg
inc
jge
clc
not
inc
xchg
add
pop
int
push
ja
slwpcb
in
xor
movs
dec
rcl
xor
sub
rol
inc
dec
xchg
push
in
mov
dec
jmp
aam
pop
sub
ret
rol
and
mov
lea
aad
in
ss
push
aaa
fld
cmc
loopne
out
inc
add
lds
jecxz
dec
xchg
fmul
pop
or
nop
jge
lock
or
mov
popf
clc
scas
test
(bad)
scas
xchg
and
in
mov
and
and
mov
movs
add
jo
fidiv
add
aad
shr
test
ds
enter
ss
(bad)
cli
push
ret
repnz
and
pop
out
aad
nop
cmp
aas
jns
rcr
pop
adc
xchg
jp
and
lds
dec
pop
fidiv
(bad)
aad
adc
test
(bad)
repz
bound
retf
inc
mov
retf
push
iret
int3
sbb
mov
ins
xlat
vmwrite
ss
cdq
(bad)
stos
push
cmps
mov
cld
les
cmp
xchg
xor
movs
fisttp
push
jb
cdq
xor
inc
adc
outs
inc
outs
cwde
pop
mov
div
dec
sub
shr
cmps
xchg
inc
and
mov
(bad)
push
lahf
ins
pop
lds
add
cmc
lods
test
push
cmpxchg
out
add
adc
push
mov
and
inc
xchg
cli
jl
cmp
fsubp
pop
push
ror
out
dec
call
jne
inc
test
or
and
mov
push
mov
gs
adc
outs
ss
cld
mov
mov
and
pop
aas
loopne
jle
mov
inc
or
xor
daa
add
pop
push
inc
mov
gs
cmc
les
loopne
sti
xchg
jne
xor
xlat
adc
add
lahf
mov
gs
adc
mov
xor
mov
stos
add
(bad)
unpckhps
cmp
cmp
jb
pop
dec
pushf
jae
pop
jb
stos
cmps
jne
outs
inc
outs
add
lahf
pop
sub
or
jp
xlat
dec
(bad)
je
shl
sbb
retf
test
add
xchg
mov
dec
clc
in
mov
xor
pop
outs
pop
mov
test
adc
mov
ins
mov
ret
sub
lock
dec
mov
pop
push
mov
cmc
push
or
dec
or
or
cmp
imul
out
pop
jb
stos
cmps
jns
call
mov
sub
imul
jl
gs
imul
icebp
push
pop
mov
mov
lds
(bad)
call
xchg
mov
mul
(bad)
jmp
retf
pop
leave
das
aad
or
add
(bad)
loop
dec
inc
mov
not
nop
dec
mov
repnz
in
(bad)
jg
jmp
lock
lods
cmps
sbb
jne
jge
imul
cmp
push
sbb
cmc
das
add
shr
(bad)
pop
outs
xor
dec
mov
fcmovb
jne
mov
adc
pop
enter
rcl
stos
test
dec
shl
xchg
mov
ds
sbb
or
nop
mov
jno
mov
(bad)
xchg
aaa
and
iret
js
cld
mov
or
aad
loopne
mov
test
mov
and
pop
repnz
dec
test
outs
int3
mov
push
hlt
stos
xor
cld
push
inc
inc
jmp
sub
mov
test
loopne
lds
movs
fistp
stc
jmp
xor
(bad)
sbb
sbb
imul
lods
inc
mov
neg
lahf
js
dec
xchg
pop
dec
push
add
test
or
sbb
jb
sbb
std
sub
jl
hlt
lahf
lds
or
mov
loop
into
lock
repz
test
xor
xchg
sbb
out
fnstsw
inc
lock
repnz
int
xchg
(bad)
(bad)
jbe
cmp
sahf
cmc
ins
xor
dec
shl
push
sbb
arpl
test
js
mov
aad
in
sbb
sar
(bad)
dec
je
push
sub
not
jle
(bad)
jne
rep
xchg
adc
cmps
add
test
imul
cmp
popf
and
sub
cmp
js
clc
lock
loopne
push
lods
sbb
inc
push
popf
ret
jno
jb
adc
dec
dec
fwait
aam
mov
xlat
sbb
call
add
iret
out
call
ficom
mov
daa
and
int
leave
movs
or
sbb
push
sub
int
xchg
push
lds
movs
ins
xchg
not
push
movs
fidiv
add
mov
mul
mov
(bad)
in
mov
adc
aaa
sub
xor
nop
dec
jge
mov
add
mov
pop
mov
pcmpgtb
je
lds
jo
adc
shl
sub
xor
test
push
jne
add
je
pop
adc
js
ftst
sbb
nop
dec
jb
mov
pop
cmc
movs
jp
cmps
pop
imul
add
pop
fild
paddusw
inc
cld
mov
ror
sub
dec
lods
pop
dec
adc
push
cmps
movs
popf
clc
and
test
addr16
mov
pop
test
jne
lock
jo
movs
fnstsw
gs
scas
add
loope
outs
es
sbb
and
es
jmp
adc
jp
enter
adc
out
push
xchg
and
add
pop
(bad)
movs
ds
out
cmps
movs
sbb
xor
inc
int
stos
mov
push
pusha
and
sbb
cmp
jp
popf
and
mov
clc
jl
sbb
mov
mov
fdiv
mov
cmp
add
jns
push
loopne
repz
(bad)
test
psubd
inc
daa
lds
cmp
das
mov
xchg
lea
jmp
test
jo
lahf
and
fidiv
pop
movs
call
loopne
and
dec
(bad)
retf
hlt
pop
dec
into
pop
or
aaa
popf
out
fnstsw
hlt
out
sbb
pushf
add
std
(bad)
js
adc
(bad)
out
sub
(bad)
sahf
idiv
cmovns
mov
and
mov
outs
pushf
ja
test
mov
int3
pop
ror
fs
jne
imul
cmp
(bad)
aad
nop
sbb
push
test
mov
pop
sub
jne
or
fild
cmp
cmp
xchg
lock
push
mov
clc
inc
std
jmp
nop
shl
lahf
das
(bad)
jge
cmovge
aas
mov
and
cld
add
pusha
hlt
xchg
ret
or
mov
push
cld
push
cmp
sbb
or
dec
call
jne
leave
imul
sub
and
(bad)
shl
xchg
fst
enter
test
inc
adc
fdiv
retf
sbb
push
rcr
sub
in
out
inc
mov
inc
call
fincstp
jns
sar
js
inc
aas
rcr
ss
repz
gs
push
add
adc
in
mov
cmc
jl
mov
into
pop
stos
dec
jne
and
arpl
xchg
retf
lahf
pop
pop
pusha
mov
and
movs
mov
and
(bad)
jnp
or
dec
xchg
xchg
ficomp
sbb
pop
sbb
cld
and
xor
add
sub
mov
fdiv
nop
rcl
movs
pop
je
mov
retf
add
sbb
outs
lds
enter
popf
pop
test
je
xchg
lods
push
jge
pop
fcomip
add
sub
add
nop
lods
cdq
mov
daa
sbb
scas
popf
inc
add
iret
retf
jg
pop
and
movs
js
outs
push
repz
xchg
mov
xchg
and
scas
mov
mov
dec
mov
test
loope
out
lods
sbb
mov
mov
es
sar
cmps
mov
daa
nop
jge
enter
sub
add
xor
sbb
addr16
neg
sbb
das
shr
std
dec
movs
dec
in
sbb
push
cld
call
fsub
xor
dec
jg
ret
sbb
lock
mov
add
test
fimul
sahf
imul
sub
mov
aas
push
dec
imul
inc
movs
push
and
add
cmp
push
ficom
lahf
das
shr
fisttp
xor
push
mov
inc
cli
adc
sub
sbb
fmul
and
(bad)
or
cli
jg
fprem1
xor
add
(bad)
or
(bad)
out
aad
push
jno
mov
inc
call
add
pusha
mov
or
mul
out
mov
inc
sbb
iret
cmps
fistp
scas
push
mov
cli
jl
lds
test
lea
ins
test
iret
mov
push
out
xchg
jmp
iret
mov
repnz
cmp
add
ret
scas
pop
or
push
test
sbb
xor
inc
(bad)
mov
sbb
cmp
sbb
jge
fldenv
push
dec
fs
mov
add
cli
mov
ja
cmp
cmp
imul
sbb
jle
fmulp
dec
fidiv
adc
xor
imul
test
pop
pop
bound
loop
popa
push
add
pop
xor
leave
mov
daa
xlat
out
repz
inc
cmps
test
and
call
adc
xor
(bad)
xor
(bad)
fdiv
xor
popf
xchg
ins
pop
stos
dec
inc
(bad)
es
outs
xchg
arpl
push
repz
dec
jecxz
jbe
or
jne
popa
mov
hlt
sub
pusha
pop
fnstenv
popf
scas
das
xchg
mov
xor
xor
adc
sub
jg
ret
xor
cmc
jle
mov
inc
imul
jmp
and
add
dec
adc
mov
mov
psubsw
repnz
mov
and
jo
cli
repnz
addr16
cmp
les
cmps
inc
sbb
cli
pop
idiv
xor
lods
ret
cwde
cmp
test
sub
mov
adc
jp
jno
lahf
fnstsw
lahf
cwde
(bad)
in
js
aad
push
lock
sbb
or
cmp
fsub
xor
pop
or
cmp
xchg
inc
jecxz
clc
cwde
lods
(bad)
outs
iret
call
ss
ret
data16
sbb
xchg
ds
iret
std
push
xor
fisub
push
ins
pop
lods
test
jp
lock
je
add
push
sbb
das
dec
(bad)
and
scas
hlt
jg
or
adc
ins
inc
mov
lock
pop
add
pop
inc
cdq
push
xor
int
adc
in
jg
or
mov
inc
push
jne
cmp
ss
(bad)
out
push
jne
jmp
sar
cmp
in
in
inc
push
jns
sbb
pop
loopne
mov
movs
call
jnp
ja
div
je
in
cmp
jp
retf
pop
mov
inc
int3
xchg
cld
xor
dec
inc
and
xchg
mov
dec
jae
cmps
in
or
xchg
mov
and
push
jno
or
pop
add
inc
cmp
into
fisubr
and
push
fsubrp
jle
xor
add
std
mov
xchg
test
mov
je
sub
in
mov
push
test
cmc
ds
xchg
outs
xor
jbe
or
pop
hlt
outs
dec
sub
mov
dec
jbe
inc
aaa
sbb
lods
pop
ds
mov
pop
mov
in
xor
dec
test
xor
pop
data16
sar
jb
mov
fistp
and
push
inc
jmp
pop
jae
lahf
test
test
cmc
sub
iret
and
dec
leave
leave
cmc
les
ficomp
pushf
add
int3
cli
fxam
adc
xchg
mov
push
sbb
jo
xchg
ins
nop
lds
jle
push
test
xchg
adc
iret
movs
push
cmp
pusha
adc
xor
dec
push
xor
or
aas
add
cmp
test
or
add
iret
mov
mov
rdpmc
ins
sbb
movaps
lock
fidiv
std
scas
mov
add
fisub
push
vaddpd
stc
cdq
cmc
out
mov
push
dec
pop
xchg
mov
outs
jg
lods
cli
cld
push
retf
leave
outs
(bad)
repnz
in
lahf
ror
mov
pop
movs
pop
jmp
mov
fwait
addr16
retf
jg
mov
shrd
dec
rcl
add
(bad)
movs
stos
aaa
and
stos
cmp
addr16
retf
mov
dec
icebp
adc
aad
shl
pop
loopne
out
lods
(bad)
cdq
iret
hlt
fistp
push
imul
mov
dec
or
aas
add
fwait
xchg
mov
xor
(bad)
jl
mov
dec
in
loopne
in
aaa
std
int
pop
mov
into
ret
ss
mov
inc
xor
(bad)
cmp
aas
popf
pop
mov
jle
jp
dec
lods
sbb
das
stc
aas
jno
gs
jne
inc
retf
test
fs
cmp
sbb
rcr
call
pop
mov
daa
add
jmp
mov
mov
add
xchg
cmovns
adc
or
(bad)
lods
push
jb
add
pop
movs
rol
sub
adc
call
push
lods
retf
mov
dec
lock
inc
repz
pop
pop
ins
xchg
add
push
add
adc
sbb
xor
sbb
pop
pop
mov
mov
hlt
lea
aad
(bad)
inc
scas
jg
adc
inc
jl
test
and
imul
call
dec
adc
ins
adc
inc
inc
outs
add
pop
(bad)
ret
jb
(bad)
lock
mov
ret
push
retf
cmp
xor
stos
inc
fwait
adc
mov
and
cmp
pop
loope
cmc
cs
scas
lock
mov
dec
cld
fiadd
jno
mov
sbb
and
cmp
xor
adc
sahf
mov
in
xor
xor
pushf
scas
shl
lods
xchg
hlt
adc
aam
sub
xor
push
cs
mov
and
in
dec
not
jmp
or
jno
test
cmp
inc
jl
inc
pushf
int3
(bad)
loop
jge
add
cwde
mov
adc
add
push
add
int3
xlat
sub
xchg
lods
cmps
or
jne
or
push
lahf
and
mov
adc
jge
mov
stos
xchg
cmp
mov
retf
jne
mov
xor
push
in
sub
in
push
into
movs
pop
push
mov
scas
(bad)
cwde
out
popf
mov
(bad)
xor
hlt
cmp
mov
pop
cvttps2pi
fist
sub
clc
scas
add
lahf
sub
rol
push
jbe
pop
push
cmp
jb
iret
cmp
clc
scas
stc
pop
pop
(bad)
and
xor
ins
outs
cmc
call
cs
ds
repz
inc
es
imul
cmp
adc
or
sbb
mov
fisub
and
xchg
xor
cs
mov
pop
movs
ins
lods
cmp
xchg
or
push
xor
sbb
push
outs
ss
sub
mov
cmc
sbb
loopne
call
mov
leave
sbb
dec
jle
adc
jns
iret
jecxz
data16
stos
push
xor
fs
arpl
aad
sahf
mov
dec
mov
jle
push
(bad)
out
cmps
bound
dec
not
sub
cld
mov
ins
sbb
mov
loope
xor
push
sbb
sahf
mov
out
xlat
lock
ds
or
adc
out
ror
cmp
cmp
inc
pop
fs
pop
adc
adc
add
pusha
leave
loope
repnz
rol
cmc
mov
mov
add
sbb
inc
inc
push
push
arpl
repnz
add
sub
push
fdiv
out
aaa
test
xchg
nop
vorps
outs
jge
cmps
xchg
lock
sbb
loop
cli
in
jne
mov
xchg
nop
mov
das
cmp
xchg
or
dec
jmp
ins
inc
jp
dec
and
std
inc
and
xor
jp
mov
mov
ss
idiv
and
cli
cmp
movs
icebp
mov
mov
inc
lods
fdivp
in
fbld
add
adc
ins
test
repz
dec
pop
(bad)
add
pop
lahf
gs
pushf
iret
ins
cld
adc
outs
(bad)
dec
aad
sbb
cmp
pop
ss
cmps
sti
jne
mov
add
pop
retf
xor
shl
jp
xchg
add
pop
jecxz
mov
push
add
sub
jmp
jg
dec
jl
(bad)
jns
sbb
pop
pop
les
test
adc
shr
ficom
sub
pop
test
mov
adc
loopne
jns
aaa
je
and
adc
nop
adc
xor
aas
imul
fsubr
(bad)
fiadd
push
add
pop
ins
jecxz
mov
inc
jg
mov
je
out
push
outs
jecxz
sar
out
dec
je
fimul
enter
sub
xchg
cmps
in
mov
jmp
loopne
fs
fistp
jo
push
xor
mov
or
xlat
push
std
inc
icebp
jb
mov
inc
xchg
stos
movs
(bad)
add
neg
scas
add
in
lahf
das
xchg
addr16
jne
adc
in
shl
mov
jmp
mov
cmc
das
push
aas
xchg
fsub
test
add
mov
add
xlat
jecxz
shl
xor
stos
adc
add
sbb
and
aas
(bad)
int3
movs
idiv
sysret
add
lea
jbe
ss
mov
cmp
sub
cmp
(bad)
add
cs
cld
outs
ror
rol
pop
dec
das
shl
xchg
inc
mov
cmp
call
push
out
mov
retf
jg
sbb
sar
ins
jp
sahf
inc
fs
push
stos
add
mov
cli
xor
retf
js
lds
add
daa
jp
popf
daa
(bad)
xchg
mov
test
jno
ins
test
fwait
xchg
pop
les
dec
mov
jp
xor
sub
adc
je
cli
or
mov
retf
sbb
mov
xlat
jl
adc
aas
movs
fistp
push
jbe
cdq
jle
lahf
jecxz
lahf
das
sub
aaa
or
cld
xchg
jb
inc
and
test
dec
push
mov
pop
lods
test
(bad)
cmpxchg
mul
cmps
and
adc
push
xor
shl
(bad)
lea
das
loop
add
pop
stos
xor
mov
pop
sub
push
aas
rol
fsubr
mov
out
aaa
stos
repnz
xor
xchg
scas
enter
jns
movs
sbb
sbb
pop
stos
xchg
jne
inc
scas
or
dec
mov
aas
lds
pop
cmp
pop
cmps
bound
loopne
je
dec
adc
je
or
stc
ret
movs
pop
cmp
mov
mov
jns
pop
fs
pop
push
xchg
and
mov
jl
push
lods
into
mov
cmps
cmps
mov
jecxz
inc
and
aas
fisub
jne
in
aam
inc
inc
retf
jb
dec
cmps
pushf
cmc
(bad)
pandn
lock
push
in
sbb
or
push
data16
jmp
iret
ja
pushf
jg
dec
lea
jmp
rol
mov
mov
cmps
out
jns
add
(bad)
and
adc
or
aad
xchg
lock
pop
mov
push
push
jne
adc
adc
stos
add
cmc
cmp
mov
pop
pop
jmp
fmul
cdq
mov
leave
lahf
adc
sbb
cmp
mov
xchg
repnz
pop
mov
push
xchg
stos
movs
call
push
scas
jbe
xchg
fwait
jg
dec
in
cmc
sub
pop
mov
es
dec
in
cli
jmp
xor
jg
(bad)
cmps
dec
sub
aaa
not
adc
pop
or
and
mov
ror
lahf
jo
cmp
xor
lock
pop
test
push
mov
std
outs
fcom
mov
les
mov
dec
popw
mul
xchg
iret
daa
push
adc
(bad)
call
add
and
das
test
int
pop
adc
popf
sbb
(bad)
div
jno
pop
jbe
icebp
mov
push
mov
in
das
mov
sbb
adc
rcr
xchg
jg
mov
mov
pop
mov
add
fiadd
xchg
(bad)
scas
add
sti
mov
les
adc
test
int3
ins
jnp
mov
add
sub
jbe
xlat
fsub
push
icebp
imul
cmps
jnp
in
or
imul
and
gs
add
mov
icebp
mov
test
popf
sets
mov
mov
jge
stos
es
add
cwde
add
loop
sar
xlat
sub
fucomp
or
sub
mov
div
in
mov
cmc
bound
mov
dec
fisttp
into
(bad)
mov
loop
push
xchg
and
pusha
xor
mov
ins
shr
or
aam
movs
push
imul
(bad)
xor
push
mov
push
bound
xchg
(bad)
mov
in
pop
scas
dec
pop
adc
lea
jns
and
jne
inc
je
sbb
ins
jle
out
adc
scas
dec
jg
mov
jp
les
xchg
test
mov
xor
std
aam
ficom
enter
adc
test
mov
inc
pop
fmul
and
adc
movs
out
cmp
repnz
push
xor
and
or
xchg
rcl
sub
dec
adc
and
outs
in
repnz
out
adc
das
adc
or
call
je
iret
sub
mov
mov
js
ins
jb
arpl
out
or
out
mov
and
jle
stos
ficomp
adc
in
mov
into
cs
fs
push
jne
leave
dec
out
stc
adc
cmp
mov
jp
das
jp
push
pop
loop
adc
add
xor
push
push
mov
pop
outs
mov
mov
movs
in
(bad)
push
addr16
mov
or
jle
out
ror
ret
xor
jp
xchg
dec
fs
lods
or
push
or
xlat
adc
loop
xchg
sub
test
or
push
jb
lock
adc
and
jo
push
pop
cmp
mov
bound
add
loopne
out
or
cmps
inc
and
loop
mov
pop
dec
cmp
cwde
ret
mov
in
fcomp
xchg
inc
cmc
jl
jg
jne
lods
das
adc
add
xor
in
aas
fdiv
sub
mov
and
jle
jo
lahf
js
lods
mov
dec
shr
(bad)
push
movs
push
or
ja
mov
loop
mov
ja
dec
jg
daa
rcr
sub
cmp
sub
clc
scas
cli
std
jmp
in
(bad)
outs
mov
sub
call
jno
popa
retf
xchg
cmp
pushf
inc
cli
pop
mov
and
addr16
ins
shl
cmp
or
cli
pop
push
or
adc
or
mov
inc
call
call
xor
ret
imul
add
aad
test
mov
pop
sub
sbb
add
sar
cmp
mov
and
xchg
mov
mov
fsub
push
cld
jo
pop
loope
mov
pop
ret
or
cmp
sbb
pop
dec
dec
pop
mov
popf
mov
imul
add
js
lods
mov
js
jp
xor
cmp
imul
sti
inc
push
int
jbe
loop
adc
or
js
jp
imul
loopne
adc
mov
and
cwde
jno
or
pop
cmp
mov
fdivr
jecxz
push
pop
dec
retf
mov
and
add
sub
bound
push
push
test
fidivr
xchg
inc
les
jmp
repnz
ret
adc
jb
inc
sub
stos
imul
cmp
mov
adc
outs
xchg
rcl
push
punpckhdq
loopne
retf
pop
push
or
jle
ret
pop
dec
cmp
mov
shl
or
std
sub
nop
adc
xchg
(bad)
mov
adc
(bad)
sub
jmp
aad
fcom
mov
add
bound
lds
dec
shr
sbb
imul
inc
gs
sbb
jo
pusha
mov
ret
js
test
xlat
out
ja
pop
xchg
cmp
jns
mov
loopne
fidiv
dec
pusha
shl
stos
or
adc
mov
cli
mov
xlat
xor
push
pop
outs
mov
cwde
add
jb
lock
sub
sbb
call
cli
out
lods
outs
mov
cmp
test
cmc
out
enter
sbb
dec
popa
lods
mov
iret
daa
push
sbb
sbb
ja
cld
in
sub
shl
mov
pop
mov
enter
jge
cmp
add
repz
add
cwde
ret
inc
bound
aas
xlat
into
mov
jb
lea
std
aam
and
cli
pop
dec
and
js
inc
jb
(bad)
cmp
or
lea
cwde
(bad)
sbb
xor
cmps
sahf
cdq
or
ror
movs
call
mov
hlt
dec
xchg
sub
test
fucomp
or
frstor
mov
dec
repnz
add
adc
adc
inc
mov
dec
mov
xchg
xchg
sbb
call
and
mov
inc
inc
mov
psubsb
leave
sub
mov
ins
inc
cwde
out
adc
push
in
jle
test
lock
cmp
enter
cmps
popf
mov
dec
xor
nop
fnstsw
test
aaa
pop
pop
movs
push
clc
cs
(bad)
loop
aas
push
(bad)
and
repnz
and
adc
dec
fs
adc
and
in
cli
push
push
jo
ffree
and
xor
sar
jge
sahf
movs
pop
dec
cs
push
jne
cli
dec
push
jo
(bad)
mov
push
cmp
jb
movntq
out
dec
bound
and
cli
out
dec
dec
pusha
mov
mov
aaa
or
int
clc
bound
stos
inc
sub
cwde
xchg
ficom
pop
dec
cmp
mov
sbb
xchg
dec
pop
cmp
or
stos
cmps
inc
and
loop
mov
aaa
(bad)
jle
lds
xor
or
push
sub
mov
gs
pushf
cs
jmp
adc
sbb
mov
lock
push
pop
outs
loope
stos
lea
sahf
dec
loopne
lds
cmp
or
in
(bad)
xchg
lock
(bad)
enter
frstor
sbb
popf
pusha
pop
and
shl
in
jne
push
arpl
call
ja
mov
and
jle
popf
jmp
mov
scas
in
cmc
bound
xor
out
test
sbb
fist
jns
aam
push
xor
and
sbb
bswap
pop
clc
mov
movs
mov
sub
xlat
push
ret
cmp
add
std
xchg
jp
jne
fs
clc
fs
imul
xor
cli
ss
mov
js
cmp
lock
shl
nop
jmp
pop
or
or
jle
stos
ficomp
pop
dec
cmps
sahf
popf
das
enter
sbb
ds
sub
icebp
inc
sbb
repz
push
xlat
mov
push
pop
jae
lods
xor
push
sbb
sbb
dec
mov
cwde
ret
mov
sub
clc
bound
xchg
mov
cli
shl
jo
adc
add
adc
test
dec
daa
jne
push
out
clc
bound
stos
iret
daa
pop
(bad)
scas
and
cwde
(bad)
addr16
pop
dec
cmp
cmc
bound
cmps
dec
add
iret
fbstp
cwde
(bad)
addr16
dec
sub
test
inc
(bad)
enter
movs
push
lock
and
adc
nop
lds
dec
cmps
mov
jl
imul
xor
push
pushf
loop
inc
in
popf
repz
lds
sub
test
cmc
ins
inc
push
mov
test
(bad)
or
mov
jns
pop
aaa
fisub
xor
cmp
inc
shl
jae
mov
sub
stos
es
pushw
xchg
mov
dec
test
or
jb
lock
idiv
stos
rcl
add
cli
ss
or
push
xchg
mov
mov
sub
pop
adc
test
ret
add
lahf
js
cmp
aad
es
cdq
or
pop
arpl
fcomp
push
imul
cwde
neg
xor
bound
outs
dec
and
sbb
cld
movs
jmp
cmp
iret
pop
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
jp
imul
aas
xchg
das
test
je
fs
push
in
inc
popf
xor
fidiv
inc
jmp
add
cld
cmps
or
cwde
xor
xor
jl
mov
lahf
add
iret
jbe
inc
out
push
(bad)
movs
push
mov
test
fild
aaa
lea
mov
icebp
dec
loope
shr
sbb
sub
(bad)
jp
push
call
adc
outs
lds
dec
in
cmp
add
push
(bad)
jge
sbb
call
gs
ja
add
lahf
dec
in
dec
mov
aas
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
jne
fist
popa
fbstp
add
xor
jnp
dec
loope
icebp
sub
add
stos
push
in
adc
xor
jl
cmc
xor
jnp
pop
int
xchg
inc
ror
fisttp
jo
pusha
push
lds
dec
in
cmc
das
test
xchg
(bad)
(bad)
pop
mov
inc
call
int3
loopne
(bad)
in
lahf
xor
dec
in
cmc
das
test
xchg
lds
xor
jne
add
lahf
jmp
jg
dec
cs
das
dec
aas
xchg
shld
jle
inc
call
scas
into
out
(bad)
out
lahf
xor
push
in
cmp
test
xchg
punpckhwd
push
add
jne
add
lahf
xor
and
cmc
das
test
sbb
out
inc
call
in
fbstp
add
push
mov
dec
in
cmc
loope
aas
xchg
shl
fwait
iret
and
retf
mov
xor
loopne
cmc
das
jp
nop
shl
call
mov
xor
dec
in
and
fbld
call
fbstp
add
dec
xor
dec
in
cmc
das
test
inc
shld
mov
inc
jmp
scas
add
lahf
xor
dec
in
cmc
sub
xchg
lock
pop
mov
inc
call
fbstp
add
lahf
retf
jg
dec
in
cmc
das
test
xchg
shld
out
inc
add
fisttp
jo
lahf
xor
dec
in
cmc
das
push
aas
push
jno
mov
inc
call
fbstp
add
pusha
xor
dec
in
cmc
sub
xchg
lock
pop
mov
inc
jmp
scas
add
dec
xor
dec
in
lock
test
push
movs
pop
mov
xchg
call
pusha
or
cli
mov
xor
dec
in
cmc
sub
xchg
lock
sbb
inc
add
fisttp
jo
lahf
xor
dec
in
sub
shld
ins
out
inc
add
fisubr
(bad)
and
jg
dec
in
cmc
test
dec
out
inc
cli
mov
and
add
lahf
xor
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
lock
call
fbstp
add
pusha
xor
dec
in
cmc
das
test
dec
shld
mov
inc
jmp
push
add
lahf
xor
xchg
cmp
das
test
xchg
shld
mov
inc
add
fisttp
(bad)
ficomp
sub
mov
xchg
shl
and
scas
add
pusha
xor
dec
sbb
rol
pop
dec
out
inc
cli
mov
and
cli
mov
xor
scas
add
rcl
mov
fist
scas
add
lahf
xor
mov
pop
cmc
das
test
xchg
shld
mov
inc
call
fisttp
jo
jge
outs
cmp
dec
in
cmc
das
test
xchg
shld
push
out
inc
add
fbstp
add
pusha
xor
pop
cmc
rol
sbb
inc
add
fisttp
jo
jnp
outs
cmp
dec
in
lock
test
push
movs
pop
mov
inc
jmp
push
add
lahf
retf
jg
mov
pop
cmc
sub
xchg
lock
call
pusha
cmp
cli
mov
xor
dec
sbb
das
test
nop
jmp
mov
cmp
cli
mov
xor
loopne
cmc
das
jp
nop
call
inc
sbb
call
(bad)
ficomp
sub
pop
cmc
das
test
xchg
shld
pop
out
inc
add
fisttp
(bad)
and
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
call
in
cmc
das
test
xchg
shld
pop
out
inc
add
fbstp
add
lahf
xor
movs
in
or
test
xchg
shld
mov
inc
adc
iret
call
(bad)
and
outs
cmp
dec
in
cmc
das
test
xchg
push
repz
mov
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
or
mov
inc
call
mov
jne
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
mov
je
xchg
lock
pop
mov
inc
call
fisttp
jo
lahf
xor
in
cmc
das
test
xchg
or
mov
inc
call
fbstp
add
(bad)
ficomp
aad
in
push
das
test
xchg
shld
mov
inc
call
fbstp
add
pusha
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fisttp
(bad)
and
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
cli
mov
stos
lock
xor
adc
sar
push
push
pop
mov
mov
and
add
lahf
retf
mov
dec
sbb
sar
nop
clc
movs
pop
dec
out
inc
add
fisttp
(bad)
fisub
push
jg
mov
pop
or
or
mov
mov
and
add
lahf
xor
dec
in
cmc
dec
test
xchg
push
out
out
mov
and
add
lahf
xor
dec
sbb
push
pop
pop
mov
inc
add
and
(bad)
mov
xor
pop
push
das
test
nop
hlt
movs
pop
dec
adc
push
retf
jne
add
ficomp
sub
pop
lock
pop
mov
inc
call
fisttp
jo
bound
mov
pop
or
test
xchg
push
loop
out
mov
and
(bad)
and
outs
cmp
mov
pop
or
test
xchg
sub
add
scas
add
lahf
xor
sbb
rol
sbb
inc
add
fbstp
add
call
in
cmc
rol
pop
mov
inc
cli
push
iret
and
(bad)
and
adc
sbb
das
cmp
cvtps2pd
mov
inc
(bad)
push
iret
call
mov
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fisttp
(bad)
and
jg
mov
pop
imul
test
xchg
push
sbb
out
mov
fbstp
add
lahf
xor
jg
dec
loopne
cmc
das
jp
xchg
or
call
fbstp
add
lahf
retf
jg
dec
loopne
cmc
rol
sbb
iret
and
add
lahf
xor
dec
sbb
das
test
nop
or
call
xor
xchg
scas
add
pusha
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
add
fisttp
(bad)
ficomp
xor
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
mov
push
cmc
das
jp
xchg
shld
mov
inc
call
fisttp
jo
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
cli
pop
iret
and
add
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
pusha
aam
scas
cli
mov
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fidivr
add
lahf
retf
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
xchg
xor
dec
in
cmc
das
test
xchg
push
adc
iret
fbstp
add
lahf
xor
dec
jmp
cvtps2pd
mov
inc
call
fidivr
add
lahf
xor
dec
in
in
test
xchg
or
cli
inc
iret
and
adc
call
in
lock
push
mov
mov
inc
cli
inc
iret
and
add
xor
jg
dec
neg
rol
sbb
frstor
mov
and
dec
neg
rol
or
out
mov
fisttp
(bad)
ficomp
sub
jp
or
inc
jmp
iret
call
jo
lahf
xor
jg
dec
in
cmc
das
test
xchg
or
cli
inc
iret
and
add
mov
pop
in
or
sub
cvtps2pd
mov
inc
jmp
scas
cli
mov
retf
jg
mov
pop
loop
test
xchg
or
cli
inc
iret
and
jo
lahf
xor
dec
in
cmc
das
and
cvtps2pd
mov
inc
cli
dec
iret
and
sbb
call
loopne
cmc
das
jp
nop
push
movs
pop
dec
out
inc
call
fbstp
add
retf
jg
mov
inc
cmc
das
jp
(bad)
shld
mov
inc
call
fisubr
add
lahf
xor
dec
in
cmc
das
and
inc
add
fbstp
add
lahf
retf
jg
push
in
or
test
xchg
push
add
iret
fbstp
add
pusha
xor
jg
dec
clc
pop
cmc
rol
sbb
shl
mov
mov
xor
dec
in
cmc
das
and
cvtps2pd
stos
out
inc
add
fisttp
(bad)
ficomp
aad
cli
pop
cmc
rol
pop
mov
inc
call
fbstp
add
mov
cmc
dec
in
cmc
sar
push
test
mov
inc
fist
call
(bad)
and
jg
dec
in
aam
test
nop
movs
pop
dec
jmp
jne
cli
mov
xor
jg
dec
(bad)
pop
cmc
rol
loopne
out
inc
call
fisttp
jo
mov
test
lock
aas
push
xchg
mov
inc
fcom
call
mov
lahf
xor
dec
sbb
das
test
nop
sub
call
pusha
sti
jne
cli
mov
retf
pop
aad
sbb
das
test
xchg
shld
mov
pusha
call
pusha
cli
jne
cli
mov
xor
imul
aas
xchg
shld
xchg
out
inc
add
pusha
stc
jne
cli
mov
xor
jg
dec
ret
rol
sbb
iret
pusha
clc
jne
cli
mov
xor
mov
ja
das
jp
mov
mov
jne
add
pusha
xor
jg
dec
int3
pop
cmc
rol
sbb
fisttp
jo
lahf
xor
mov
pop
fild
test
xchg
or
rcl
gs
pop
scas
(bad)
mov
xor
dec
shl
out
test
movs
sub
stc
gs
inc
lahf
xor
scas
add
hlt
dec
out
xlat
outs
fiadd
mov
xlat
dec
in
mov
jnp
push
xchg
cmp
sub
sub
cmp
imul
push
cld
movs
lgs
test
xchg
aas
in
hlt
pop
les
jle
mov
jns
imul
mov
mov
(bad)
popa
sti
push
in
inc
pushf
mov
mov
jmp
inc
jmp
pop
sar
call
push
jo
cmps
sbb
sub
pop
nop
dec
loopne
xchg
dec
xlat
jp
mov
lea
xchg
add
pusha
retf
popa
jmp
sub
jmp
mov
push
and
addr16
dec
jmp
or
sbb
inc
out
std
(bad)
pop
loope
or
adc
push
(bad)
jo
and
jge
cmp
test
inc
movs
ins
rcl
or
enter
lock
sub
pop
lock
jp
call
sbb
dec
cli
xor
and
push
xchg
ins
ror
daa
mov
pushf
or
popa
sti
inc
cli
inc
sbb
or
cmp
push
call
add
adc
or
adc
cmp
fwait
add
lods
and
inc
fwait
jp
jge
jne
mov
mov
mov
movs
outs
in
loope
xlat
ins
aam
xor
push
into
jno
push
jmp
mov
sub
push
cmc
pop
jmp
loope
retf
out
and
push
popf
push
call
not
mov
sub
inc
icebp
jg
dec
in
mov
aaa
pushf
adc
out
inc
sti
data16
dec
cld
pop
or
pop
rcr
dec
out
xlat
imul
and
int3
push
in
gs
jne
movs
aas
in
movs
cmp
stc
dec
in
jmp
sti
sbb
inc
mov
inc
add
pusha
mov
neg
hlt
jnp
pop
in
add
loopne
out
inc
std
dec
cld
imul
pop
mov
mov
inc
in
dec
aad
in
hlt
in
and
out
inc
mov
jne
test
push
in
movs
sub
les
scas
add
mov
lahf
pop
out
push
ficom
and
or
sub
push
mov
mov
imul
add
lods
push
into
jno
push
jmp
fist
lods
sbb
sub
jg
dec
cli
pop
mov
and
and
fnsave
das
call
push
pusha
idiv
jle
add
xor
inc
and
lahf
pop
sbb
xchg
pop
retf
jg
popa
int
cmc
add
push
out
add
rol
aas
icebp
and
push
hlt
jl
jl
mov
adc
push
shl
je
mov
xchg
in
xchg
pop
mov
and
mov
mov
xor
bound
mov
mov
dec
jmp
and
mov
push
sahf
xor
sti
gs
mov
icebp
cmp
sub
aam
les
rcl
mov
jbe
popa
iret
add
inc
das
test
sbb
dec
in
aam
sub
xor
iret
push
fbld
test
sar
mov
hlt
outs
les
outs
(bad)
pop
(bad)
fld
ss
add
sbb
ficom
into
daa
lahf
pop
push
lods
aas
aad
xchg
pop
test
dec
aam
movs
jns
in
inc
push
(bad)
daa
mov
jno
inc
in
push
outs
lds
mov
inc
test
stc
ja
pop
aam
xor
push
scas
arpl
jbe
stos
jle
aas
movs
pop
pushf
outs
out
(bad)
popa
movs
pop
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
aaa
pushf
and
mov
dec
in
int3
jne
xor
(bad)
outs
test
mov
leave
(bad)
iret
cmp
pop
cmc
jns
imul
mov
xor
inc
(bad)
arpl
xchg
sub
jnp
ins
rcr
loope
push
stos
add
push
in
inc
fdiv
pop
mov
aad
mov
pop
in
sar
sub
cmp
jo
jge
and
jg
dec
mov
pop
out
xlat
je
and
fdiv
je
and
push
aad
mov
pushf
das
fimul
jge
pop
mov
cmp
and
retf
popa
mov
push
outs
mov
xor
cli
pop
mov
inc
call
add
pop
fild
lahf
xor
cmp
test
stos
pusha
xlat
jo
out
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
loope
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
sub
imul
out
inc
call
call
jae
arpl
nop
sub
jp
imul
mov
xor
inc
fidiv
arpl
xchg
sub
jns
imul
mov
pop
out
adc
add
lahf
std
push
mov
sbb
inc
mov
out
movs
aas
out
xor
or
mov
scas
sbb
nop
das
jmp
mov
int3
jbe
enter
scas
dec
mov
fisubr
xor
sbb
xor
push
jno
iret
and
xor
shl
dec
movs
pop
pop
lds
sub
aad
ins
and
popf
inc
aaa
push
or
ins
loopne
lock
cmp
dec
repnz
jbe
sub
cmp
addr16
scas
and
pop
not
xchg
sub
jp
pop
jge
sub
mov
(bad)
push
repz
mov
pop
icebp
dec
sti
jnp
pop
ror
pop
mov
(bad)
aas
lahf
xor
outs
lds
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
imul
dec
mov
sub
pop
icebp
pop
loope
xlat
jno
popf
and
adc
add
lahf
xor
dec
in
cmc
das
test
lock
pop
mov
inc
call
fbstp
add
lahf
xor
sbb
push
pop
lock
loopne
adc
and
push
jmp
(bad)
popa
cmp
or
pop
repz
jecxz
push
lods
push
pushf
mov
stc
push
jmp
pusha
cmp
or
pop
icebp
dec
jecxz
adc
and
push
in
inc
(bad)
popa
cmp
sub
jnp
ins
(bad)
pop
test
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
sbb
lds
sub
aas
loope
les
aad
lea
stos
add
jne
ja
push
scas
inc
cli
inc
or
xchg
push
xchg
shld
out
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
sub
adc
and
jg
dec
in
cmc
das
test
pop
push
xchg
jo
push
iret
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
fadd
adc
inc
fnstenv
pusha
cmp
or
pop
icebp
dec
jecxz
adc
es
push
jmp
fidiv
data16
sub
sbb
ins
(bad)
pop
test
mov
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
jl
adc
sbb
sub
inc
loopne
out
test
xchg
aaa
jmp
mov
pusha
mov
xor
dec
mov
dec
test
cli
shld
out
sub
push
iret
dec
fbstp
add
lahf
push
sbb
jg
dec
in
cmc
das
test
hlt
shld
out
inc
call
fbstp
add
out
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
fsub
jle
out
inc
call
fbstp
push
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
lock
pop
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cdq
inc
not
push
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
gs
adc
and
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
loope
jne
add
sbb
dec
sub
add
pusha
and
mov
fbstp
add
mov
aad
in
cmc
das
test
xchg
(bad)
call
iret
fbstp
add
lahf
xor
dec
in
retf
aas
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
hlt
das
test
xchg
shld
mov
inc
call
gs
lods
add
lahf
xor
dec
in
icebp
das
test
xchg
pop
pop
mov
inc
call
or
jne
add
lahf
xor
shr
fsub
(bad)
and
push
popaw
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
or
pop
mov
inc
call
fbstp
cli
mov
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
and
add
lahf
xor
dec
in
or
test
push
movs
pop
dec
out
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fisttp
(bad)
and
jg
dec
sbb
das
test
out
inc
add
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
add
fisttp
(bad)
and
jg
mov
pop
cmc
das
test
xchg
shld
mov
inc
call
fisttp
jo
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
retf
jg
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
pusha
xor
dec
in
cmc
das
test
xchg
shld
push
xor
jne
add
lahf
xor
dec
in
cmc
das
test
xchg
cmpps
xchg
rcl
scas
or
jbe
ins
cld
and
cmp
or
in
pop
clc
dec
ror
fnstcw
jg
mov
fnstsw
sbb
mov
imul
jb
out
and
sbb
pop
mov
into
data16
std
dec
mul
stos
pop
aad
loopne
cdq
dec
icebp
push
lock
adc
lods
sub
xor
sub
fdivr
add
or
pop
mov
pop
sar
div
(bad)
data16
cmps
imul
out
data16
dec
mov
mov
inc
in
dec
aam
scas
imul
adc
fmul
cld
jae
stos
jp
sub
pop
xchg
or
mov
and
sbb
ins
retf
push
loope
lahf
jae
mov
mov
dec
in
push
(bad)
jg
xor
loopne
cmc
cmp
sub
dec
and
adc
das
call
jb
popf
imul
retf
popa
cld
or
pop
pop
cmps
sbb
cmp
pop
fdiv
shl
or
mov
pusha
fisub
jmp
cmps
cmp
dec
test
and
ja
push
mov
es
jmp
retf
jl
or
gs
gs
call
jae
inc
sti
push
pop
xchg
push
jmp
inc
push
out
mov
shr
pop
(bad)
das
aam
jmp
test
lods
sbb
call
jmp
iret
gs
lds
repnz
jg
mov
out
mov
add
dec
movs
dec
out
jne
ss
cmc
jo
out
jmp
getsec
std
add
adc
call
stc
popa
lahf
into
xchg
outs
clc
repnz
cmp
shl
pop
xchg
into
pop
shl
xor
fild
test
(bad)
xchg
xchg
add
pop
dec
inc
(bad)
ins
inc
mov
or
adc
gs
xchg
inc
loopne
and
xor
sbb
scas
pusha
lahf
out
jg
xchg
push
out
lahf
jnp
ins
mov
das
test
in
jg
lahf
sub
repz
jne
fsub
pushf
xor
fidiv
add
repnz
test
inc
push
jg
aam
lds
not
mov
mov
mov
dec
call
cmp
cs
rol
jg
xor
add
sub
xor
aas
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
dec
in
cmc
das
test
xchg
shld
mov
inc
call
fbstp
add
lahf
xor
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
sahf
outs
bound
mov
add
mov
test
add
add
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
lock
inc
sub
call
jp
mov
lods
not
xchg
pusha
or
sbb
push
cmp
dec
and
push
jns
mov
call
mov
or
sbb
push
pop
and
pop
jae
adc
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
pop
daa
xchg
push
imul
dec
cmp
jp
mov
xor
mov
push
cmp
mov
cmc
mov
cmp
xor
add
jp
aas
cdq
pop
scas
call
scas
ret
xor
jne
rcl
ds
xlat
adc
mov
xor
or
sbb
add
jne
mov
retf
sub
imul
xor
mov
out
lds
inc
test
cli
and
push
xor
aas
loopne
or
xchg
stos
pop
add
push
nop
adc
inc
xchg
int
sbb
pop
inc
cmp
pushf
shr
and
xchg
push
xor
jecxz
out
sub
mov
mov
mov
add
call
push
mov
es
js
mov
sub
rol
sub
fisttp
rol
pop
repnz
inc
rcl
inc
sub
sti
adc
mov
test
mov
jmp
push
push
loopne
cmp
xchg
push
jp
xor
dec
xor
pop
das
out
mov
std
push
xchg
mov
mov
push
dec
(bad)
scas
js
(bad)
mov
mul
iret
jns
inc
daa
out
mul
dec
pop
shr
sar
adc
mov
js
mov
pushw
clc
pop
retf
jl
lock
adc
push
jg
dec
imul
dec
imul
fucom
pop
dec
and
fiadd
push
jl
cmp
xor
mov
inc
sub
enter
mov
mov
int3
test
adc
js
sbb
inc
and
cmp
xchg
mov
lea
mov
and
and
and
mov
shr
es
jmp
xor
fld
push
ret
jns
dec
retf
mov
arpl
retf
ret
scas
mov
call
cmovnp
movs
pop
jg
nop
xor
cmc
mov
mov
les
aas
pusha
push
jne
aad
das
inc
mov
addr16
popa
popa
in
xchg
out
not
pop
int3
rcl
mov
nop
cmps
xchg
mov
rol
sbb
bound
sub
or
adc
rol
stc
data16
dec
mov
arpl
or
xor
and
cmp
add
aas
pop
push
retf
mov
or
test
push
dec
xchg
jg
dec
mov
stc
aam
xor
and
std
iret
fisub
call
(bad)
adc
shl
push
out
adc
out
leave
push
xor
cmp
adc
sbb
outs
aam
dec
mov
sbb
mov
test
loop
popa
retf
repnz
or
shr
retf
daa
popa
cmp
mov
bswap
popa
push
sbb
cdq
cmp
cmp
retf
clc
sbb
and
outs
imul
retf
mov
or
dec
adc
jbe
fnstsw
out
pop
xor
cmp
dec
shl
cwde
mov
jl
dec
mov
push
iret
xor
test
test
pop
cmc
fwait
test
std
sbb
retf
(bad)
(bad)
aam
push
adc
iret
push
into
push
xchg
ss
lahf
jge
(bad)
out
xchg
aaa
pop
retf
inc
adc
mov
jg
leave
xor
call
js
popf
call
cmp
pusha
loop
pop
mov
and
pop
add
sti
mov
sbb
popa
test
or
(bad)
adc
sbb
mov
jae
out
xchg
xor
sub
(bad)
jg
ins
lds
div
in
scas
pop
inc
out
test
add
mov
pushw
clc
pop
or
fiadd
cmc
test
or
push
mov
(bad)
cmp
jnp
or
rcl
pop
movs
and
push
sub
xor
xchg
in
or
cld
movs
(bad)
std
inc
pop
sub
jae
cmc
jno
jnp
leave
retf
mov
jp
(bad)
lock
ins
push
(bad)
aam
out
ds
mov
jmp
sub
push
aas
xor
lock
out
icebp
dec
div
rcr
pop
mov
mov
mov
sbb
pop
or
into
lock
aas
data16
std
(bad)
jo
or
push
mov
ins
(bad)
xor
pop
movs
nop
int3
mov
icebp
outs
sbb
(bad)
test
inc
arpl
jne
cld
aaa
xchg
inc
and
add
or
aaa
mov
cmp
jmp
xchg
xor
mov
dec
lods
fwait
push
div
jmp
test
cmp
mov
gs
jne
call
out
outs
pop
shl
pop
dec
mov
cmc
pushf
jg
sbb
or
push
cmp
mov
mov
cmp
lods
call
shl
xchg
or
shl
pop
add
popf
pop
lods
(bad)
lock
movs
fild
mov
or
xchg
mov
mov
cld
fstp
mov
sbb
pop
dec
mov
rcr
popf
not
into
in
test
inc
jbe
pop
outs
dec
ins
push
and
es
mov
hlt
mov
jmp
retf
jno
jo
push
push
(bad)
jne
fs
aas
imul
sar
mov
lea
nop
nop
arpl
sbb
stc
clc
xrelease
div
add
call
into
fcmovbe
jmp
mov
mov
pop
je
push
sub
iret
adc
add
dec
dec
mov
call
jb
sub
push
mov
xlat
or
xchg
inc
out
mov
or
bound
xor
stos
gs
or
data16
push
inc
dec
xor
cld
jmp
cmp
xor
pop
xchg
iret
sar
jg
nop
add
imul
adc
push
(bad)
jb
rcl
loopne
mov
dec
clc
arpl
pusha
xchg
inc
sub
and
sbb
add
pop
retf
and
lahf
or
pop
retf
ret
lods
xchg
(bad)
loopne
jp
(bad)
jge
shl
mov
inc
sub
cmp
sub
and
mov
cmp
add
test
cld
cli
rcr
shr
add
adc
mov
jp
clc
lock
sub
(bad)
mov
jmp
add
aaa
(bad)
and
hlt
pop
jmp
add
dec
adc
push
lea
lods
cmps
lea
test
les
stos
mov
dec
jp
add
xor
pop
aaa
mov
cmps
pop
mov
sub
or
mov
and
mov
or
push
or
in
mov
dec
pop
fwait
(bad)
sub
popf
(bad)
in
xlat
aas
inc
popf
inc
popa
xor
push
adc
outs
jae
test
xchg
cmp
retf
or
inc
mov
jmp
jmp
pop
test
mov
jp
add
pop
shr
retf
nop
sub
xor
sub
inc
cmp
jp
sar
cwde
xchg
push
pop
mov
sub
cli
jmp
mov
mov
pop
icebp
imul
test
xor
fdivr
or
js
pusha
or
int
inc
fs
cbw
fcmovnbe
enter
inc
pop
in
in
cmp
arpl
stos
mov
sbb
pop
add
daa
sbb
(bad)
mov
xchg
jecxz
push
mov
std
bound
retf
gs
inc
xchg
push
imul
push
lds
pop
popf
aaa
sub
repnz
mov
add
dec
iret
pop
int3
das
add
fcomp
or
mov
popf
sub
cmp
push
jp
fbld
mov
mov
je
push
(bad)
fstp
and
mov
cmp
xor
dec
stos
fmul
test
mov
dec
sti
outs
or
pop
arpl
sub
repnz
enter
in
cmc
xor
and
cld
adc
outs
and
or
imul
aam
movs
inc
les
mov
jg
xor
push
mov
inc
sub
push
arpl
push
enter
jae
in
and
push
sbb
test
inc
test
test
adc
cmps
nop
(bad)
fs
std
push
inc
or
mov
popa
cmp
sbb
clc
xchg
enter
pop
ret
test
inc
push
sub
fisttp
fdiv
pop
xchg
pop
mov
inc
loop
cmp
ret
or
dec
cmp
mov
lock
add
xchg
dec
retf
mov
js
xor
inc
int3
push
inc
daa
pop
jp
popa
ret
pop
and
mov
into
mov
add
ins
add
and
addr16
stos
sbb
cmp
shr
push
mov
in
test
jmp
add
adc
out
sti
out
iret
movs
loope
fcmovne
outs
sbb
push
enter
adc
clc
into
cmp
xchg
ret
push
ret
inc
scas
xchg
jecxz
retf
fisub
jle
or
(bad)
xchg
mov
shl
jle
jp
fadd
stos
shr
movs
or
xor
cmp
jo
mov
push
loope
push
push
add
call
cmp
cmc
sub
lods
fs
pop
sbb
ret
push
fmul
and
shl
or
cmps
mov
addr16
fstp
test
push
fistp
in
jge
add
mov
cmp
push
test
xor
movs
iret
jns
enter
pop
xor
push
cli
adc
mov
ss
dec
mov
push
jecxz
hlt
sahf
shl
push
pop
into
mov
or
add
retf
inc
xor
imul
mov
mov
sbb
jge
ja
mov
push
sub
movs
fistp
leave
or
or
jo
retf
(bad)
pop
into
jmp
addr16
jp
jne
call
mov
xchg
test
mov
and
pusha
cmp
dec
movs
shl
div
in
xchg
hlt
lock
cmp
or
fs
aaa
rcl
inc
xor
imul
retf
xchg
cli
jmp
xor
cmp
arpl
sub
mov
dec
ins
mov
fisubr
nop
cli
xchg
ja
push
aas
fldcw
xor
outs
call
and
mov
cmp
call
pop
push
sub
imul
xor
scas
call
adc
nop
jae
xchg
nop
add
psllw
push
loopne
mov
xchg
xchg
dec
repnz
cmp
mov
jmp
jle
call
xor
mov
cli
fucomp
ds
call
or
adc
mov
aam
push
and
dec
cmp
sbb
or
mov
mov
ret
bound
call
mov
jg
aad
jmp
mov
stc
sbb
cmp
pop
or
xchg
fwait
cld
mov
pop
sub
repnz
xor
cmp
or
movs
mov
pop
jle
out
pushf
xchg
imul
and
jmp
lahf
sbb
les
cmp
sub
hlt
int3
in
push
into
sub
cmp
jne
and
rcr
push
jp
mov
mov
and
xchg
(bad)
ficomp
rol
push
call
ret
mov
jmp
inc
push
fidivr
stos
dec
iret
mov
icebp
loopne
jp
dec
stos
das
imul
mov
and
call
mov
jo
fcomp
(bad)
push
cmp
in
add
shr
stos
retf
inc
es
xor
cld
inc
cmp
dec
mov
test
jne
sbb
mov
push
fcmovnbe
outs
lds
(bad)
inc
mov
dec
adc
xor
inc
push
bound
inc
dec
popf
mov
std
jmp
add
(bad)
and
icebp
imul
fdivr
ret
mov
inc
(bad)
dec
outs
sub
iret
add
imul
cmp
test
xor
push
cli
xor
mov
cmp
pcmpgtd
jns
adc
pop
ss
xchg
adc
jne
jo
int
pop
(bad)
sub
popf
add
lock
jns
sub
jo
imul
xlat
inc
push
repnz
dec
mov
imul
addr16
mov
or
or
ret
inc
xchg
clc
addr16
and
add
js
pusha
xchg
shl
xor
loopne
push
call
jecxz
(bad)
mov
push
jno
add
int
push
mov
xchg
outs
add
(bad)
mov
and
icebp
leave
pop
dec
loopne
xchg
add
push
(bad)
pop
and
int
cmp
pop
inc
pop
add
mov
aaa
in
pop
sbb
push
aam
in
cmc
or
mov
ror
outs
jmp
lea
sub
dec
(bad)
sbb
out
(bad)
scas
lds
test
sbb
neg
adc
inc
adc
outs
dec
pop
dec
lahf
ror
push
lock
cmps
dec
shr
add
mov
aas
call
aad
fucomip
jl
cmp
repz
dec
iret
mov
jp
sub
jp
mov
jl
xor
xchg
int
mov
pop
or
(bad)
cmp
sbb
retf
lock
lock
frstor
lahf
out
xor
test
sbb
pop
shl
rep
mov
pop
retf
push
or
sbb
add
jp
leave
cmp
cli
xor
mov
dec
push
or
nop
test
icebp
inc
lods
dec
and
imul
add
adc
inc
cmc
fisubr
nop
stos
sub
cmps
push
rol
iret
mov
icebp
ins
mov
pop
shr
mov
dec
adc
mov
add
push
out
xor
lea
call
test
and
int
sbb
pop
lea
adc
cmc
stos
rol
lock
push
(bad)
ja
xchg
jg
mov
dec
sbb
aas
loopne
jge
movs
imul
stos
int
nop
cli
push
loop
in
sub
xchg
shr
or
adc
in
add
xchg
sub
jno
xor
enter
xor
rcl
mov
add
and
gs
xor
(bad)
enter
dec
mov
sbb
and
mov
retf
fcom
std
add
jmp
cmp
adc
pop
adc
pop
jnp
cmp
jge
test
jmp
pop
aas
scas
sub
fisttp
pop
push
xchg
or
js
in
inc
mov
inc
xor
mov
sbb
movs
les
aaa
movs
ds
call
mov
inc
jmp
inc
adc
mov
push
fs
jmp
retfw
ret
inc
aad
pusha
inc
xor
ret
and
jae
inc
or
sub
stos
shr
jecxz
cmc
test
loop
sbb
adc
xor
adc
and
pop
cmc
mov
jb
xor
int
in
xchg
cmp
into
iret
in
cs
movaps
xchg
inc
shl
les
pop
jo
mov
mov
dec
call
pcmpgtd
inc
dec
push
jl
ins
ja
inc
xor
(bad)
add
add
adc
cmc
fwait
sar
xchg
addr16
fidiv
int
adc
movs
fcomp
and
shl
inc
mov
mov
(bad)
xchg
dec
out
xor
pop
das
fs
stos
sar
inc
jmp
inc
ret
and
jae
inc
xor
xor
push
stos
cmp
or
push
mov
cwde
mov
mov
pop
push
xchg
mov
in
(bad)
mov
add
push
sub
cmp
loop
dec
mov
mov
or
xchg
in
neg
lock
pop
fs
int3
add
xchg
adc
sbb
inc
out
mov
jne
call
mul
lahf
ret
sub
xchg
js
dec
jne
mov
aam
or
mov
lds
fs
dec
neg
(bad)
push
sub
jne
fldcw
inc
das
jb
xor
push
cli
and
aad
fild
(bad)
cmp
mov
stc
dec
add
adc
adc
mov
add
(bad)
xor
jmp
or
nop
lahf
in
mov
adc
xor
hlt
sub
movs
call
iret
lock
push
push
inc
mov
push
cwde
ja
cmc
(bad)
out
cmps
lods
pop
js
iret
xlat
ds
popf
cmps
mov
jge
shr
xor
outs
ja
cmc
mov
in
ins
js
sbb
test
(bad)
in
sub
dec
sbb
outs
mov
xchg
lahf
sbb
(bad)
pusha
xchg
add
pop
shr
inc
xor
or
xchg
(bad)
iret
pop
pop
mov
jge
dec
stos
shl
pop
fistp
lods
jne
clc
nop
add
dec
xor
out
jb
dec
inc
int3
dec
and
lahf
or
jo
xor
push
cmp
(bad)
mov
fisub
mov
call
dec
fimul
fist
and
xchg
sbb
dec
shl
outs
jb
shr
mov
das
outs
push
retf
pop
jmp
pop
sub
cmp
pmulhuw
call
lahf
mov
push
sub
mov
out
sub
sub
sub
mov
sub
lock
shr
push
push
ret
adc
scas
(bad)
and
pop
mov
adc
imul
aas
push
sar
jl
nop
mov
mov
pop
pop
(bad)
stos
xchg
clc
cmp
pminsw
call
mov
lds
mov
dec
and
sbb
aam
adc
adc
or
or
xchg
push
popf
jbe
fist
jmp
sbb
push
ja
or
aas
mov
out
inc
in
mov
shl
movs
sti
and
aas
lds
iret
dec
fs
mov
loopne
std
pop
sub
das
aaa
mov
cmp
cmp
or
aaa
xor
jge
(bad)
sub
pop
jle
fsubr
pop
retf
cmp
cli
xchg
xchg
adc
or
pop
test
mov
mov
das
mov
scas
js
lahf
xchg
mov
(bad)
int3
or
sbb
mov
retf
rol
mov
lds
es
add
push
iret
dec
les
in
shr
test
aad
pushf
jp
sbb
aas
retf
aaa
gs
mov
sbb
stos
fcomp
int
mov
shr
sti
icebp
sub
push
add
out
xchg
mov
pop
push
test
jnp
or
xchg
xchg
ss
leave
or
push
inc
mov
shl
jmp
add
jae
xor
ss
stc
mov
loopne
mov
cmp
mov
jno
cmc
sbb
loope
mov
shl
sub
cmp
xor
lock
cmp
adc
or
loop
repz
push
and
jecxz
xchg
dec
and
push
test
mov
mov
fwait
sub
bound
pop
out
mov
lds
add
pop
xor
movntq
loopne
cld
test
stos
push
xor
(bad)
lahf
xor
movs
mov
sub
pop
mov
adc
js
dec
movs
lea
or
mov
mov
inc
cmp
push
loope
dec
fwait
int3
and
(bad)
in
ins
dec
ror
jl
inc
jecxz
mov
mov
out
mov
pop
mov
cmp
in
mov
test
mov
pop
jne
jmp
inc
aaa
(bad)
mov
retf
mov
mov
and
sar
adc
imul
lahf
loopne
lods
fimul
jmp
call
pop
add
popf
hlt
lods
mov
outs
retf
pop
jmp
out
sub
push
out
xchg
imul
inc
sub
imul
retf
pop
bound
xchg
ret
repnz
into
and
mov
mov
test
xchg
call
xor
lds
jo
mov
in
test
sub
xchg
movs
cmp
retf
xchg
cli
scas
or
sub
mov
adc
mov
pop
shl
mov
sub
fcmovnb
pop
sbb
or
push
push
jl
mov
in
inc
xchg
push
call
inc
xor
dec
dec
or
(bad)
test
mov
rcr
movs
fcmovb
jmp
sub
pop
das
(bad)
pop
pop
aam
adc
xchg
mov
sbb
pop
mov
mov
push
jmp
pusha
outs
inc
sbb
shr
das
fwait
aaa
loopne
je
inc
and
je
mov
jp
push
stos
pusha
or
cmp
out
fs
arpl
sbb
aas
cmps
shl
sub
push
stos
and
mov
jns
add
imul
inc
dec
fcmovnu
imul
dec
or
test
push
fldcw
sub
ins
in
daa
sub
call
or
xor
fisubr
jmp
lds
cli
xor
xchg
inc
add
pop
xor
push
adc
aas
(bad)
popf
neg
xor
mov
pop
retf
xchg
ficom
xchg
aas
movs
fnsave
out
(bad)
cli
adc
pop
inc
mov
mov
inc
cmps
push
pop
fbstp
xlat
stc
rol
adc
clc
xchg
aaa
mov
mov
addr16
cs
xchg
aaa
loope
adc
mov
retf
push
add
pop
push
and
dec
xor
jg
adc
xlat
ret
enter
inc
js
rcr
cmps
outs
xor
inc
cmp
shr
daa
sub
add
cmp
jge
mov
fild
adc
pop
(bad)
dec
xchg
out
lahf
and
out
or
xor
sbb
mov
fprem
mov
test
add
mov
jb
outs
push
mov
inc
cmp
push
test
fist
sub
nop
(bad)
test
cli
xchg
inc
(bad)
dec
mov
pop
push
mov
xchg
pop
dec
fcmovbe
dec
in
mov
jnp
and
sbb
lods
dec
jge
fs
test
push
jle
mov
outs
add
retf
jnp
(bad)
jbe
inc
push
inc
xchg
add
xchg
stos
mov
popa
adc
mov
mov
mov
mov
adc
xchg
push
pop
inc
lods
mov
sbb
sub
fisttp
add
add
jge
dec
push
popf
push
push
dec
mov
jmp
retf
and
test
jmp
in
mov
dec
iret
fucomip
jl
pop
dec
add
ss
xor
add
dec
sub
not
call
ret
sub
jecxz
ja
in
cwde
xor
inc
jb
sub
jp
dec
gs
inc
dec
inc
mov
and
ja
outs
in
cmc
cli
lods
out
cmp
ins
or
iret
sub
push
or
adc
xchg
push
pop
cmc
lahf
push
out
xchg
iret
jne
bswap
jle
xlat
test
jne
aad
adc
cli
jmp
jo
int
lods
lahf
ror
pop
mov
mov
pop
in
repz
add
pop
or
mov
popf
xchg
xchg
stos
cld
iret
mov
loop
ja
cs
outs
leave
cmps
ror
loope
cmp
ret
aaa
loopne
sbb
lea
inc
push
and
div
xor
mov
or
sahf
dec
push
push
dec
cmc
inc
mov
ficom
pusha
repnz
cmc
dec
test
pop
mov
icebp
loopne
lock
shl
xchg
aam
pushf
and
push
ins
scas
cmp
xor
fwait
xchg
dec
cmp
(bad)
xchg
repz
nop
scas
pushf
or
adc
inc
and
popa
jp
fisub
pop
xor
cmp
int
push
stos
jo
jp
xor
mov
and
pusha
cmp
les
fcmovu
rcl
sbb
into
aam
inc
add
call
and
iret
dec
std
fisubr
push
lods
or
dec
clc
sbb
icebp
shr
push
cmp
xchg
lock
lds
fiadd
cld
mov
inc
push
pop
mov
dec
repz
add
cmps
xchg
adc
dec
add
int
inc
sbb
or
mov
or
mov
cwde
stos
rol
retf
or
outs
jno
push
jo
push
xlat
cwde
mov
mov
jb
add
out
loop
cmp
nop
mov
sti
add
cwde
push
ja
dec
mov
icebp
imul
popf
mov
ret
or
nop
repnz
push
pop
push
xor
fld
sbb
loopne
stos
adc
adc
popf
dec
fcmovb
adc
out
sub
mov
mov
pop
adc
fwait
cmp
ror
sar
xor
jmp
(bad)
and
sub
shr
or
icebp
pop
inc
setp
xchg
fcmovbe
mov
inc
xchg
leave
mov
cmp
imul
rol
or
cli
xchg
jnp
scas
retf
jb
not
clc
pop
cmp
lds
mov
aad
and
sub
or
fs
sub
aas
das
and
inc
jno
cs
cmp
adc
inc
sub
pop
mov
stos
icebp
test
out
sub
loop
mov
inc
imul
sbb
push
jg
and
pop
push
push
(bad)
and
call
cmc
pusha
or
adc
popf
cmc
lock
or
lods
(bad)
mov
cmps
jp
arpl
inc
inc
or
nop
cli
pusha
or
lods
jge
lds
dec
lock
popf
out
xchg
dec
push
mov
push
mov
cmp
push
mov
jmp
xchg
ror
movs
ins
push
jp
retf
mov
dec
sub
ret
pop
fisubr
test
add
ja
dec
xor
jb
dec
cmp
arpl
mov
js
xchg
xor
sti
jmp
movs
mov
clc
jp
bound
cmp
aam
pusha
inc
(bad)
fisubr
push
cli
sub
jne
js
mov
mov
mov
pandn
mov
mov
and
sub
jmp
add
fimul
push
push
cmp
scas
jb
or
sbb
xchg
cmp
jb
inc
outs
dec
das
call
push
rcl
retf
lds
(bad)
xchg
or
cmp
push
jge
shl
mov
movs
adc
out
ficomp
stos
ret
in
stos
out
test
pop
xchg
iret
and
jnp
jecxz
daa
fs
(bad)
pop
mov
out
push
repz
stos
cmp
and
mul
lahf
push
sti
xchg
retf
gs
ins
jae
mov
test
sub
mov
fdivr
rcl
add
xchg
inc
jp
outs
sbb
sbb
enter
and
lahf
sbb
and
retf
sub
sbb
dec
pusha
push
push
mov
stos
sahf
xor
and
iret
or
or
fs
push
mov
call
fdiv
data16
mov
cdq
rep
(bad)
popa
nop
jno
pop
sti
fisttp
push
ins
jae
sbb
lods
mov
sbb
into
mov
or
fwait
push
leave
cmp
ins
stos
sar
cmps
xchg
rcr
cmp
shl
shl
xor
mov
sbb
push
leave
scas
jbe
and
mov
cmc
mov
je
inc
ins
lock
loope
jnp
mov
aaa
or
sar
xor
xchg
sbb
dec
jno
inc
test
dec
mov
and
pop
inc
sub
test
mov
aas
mov
daa
call
and
mov
or
push
ja
pop
xor
mov
pusha
mov
mov
dec
or
mov
pop
sahf
xor
pop
xor
push
cmp
mov
fild
mov
loope
or
nop
cmp
jo
pop
stos
sub
cmps
cld
pop
and
or
out
fwait
mov
pop
pop
loope
adc
rol
ffreep
and
packssdw
pop
gs
call
mov
add
inc
(bad)
xchg
xchg
(bad)
xor
and
adc
loop
xor
ficom
loop
jae
lds
(bad)
pop
icebp
test
ss
(bad)
popa
bnd
int
push
mov
add
mov
movs
push
stos
hlt
outs
mov
and
xor
call
sub
mov
dec
push
cdq
add
and
xchg
stos
pop
clc
outs
stos
jmp
ins
sbb
pusha
cmc
mov
cmp
(bad)
push
loope
xchg
cmps
sar
or
fidivr
popa
loop
inc
add
(bad)
mov
call
cli
das
push
and
dec
mov
xor
(bad)
dec
movs
inc
loope
test
mov
mov
je
xor
outs
jae
dec
xor
adc
jns
dec
and
outs
loopne
jnp
rcl
aas
sub
pop
(bad)
jp
and
xlat
icebp
pop
psllq
shr
mov
lds
mov
cmp
xor
jne
push
imul
jnp
iret
stos
shl
sub
in
xchg
cli
cmps
xchg
pusha
scas
aaa
stos
pop
jne
cmp
stos
lock
or
or
or
mov
and
ds
push
inc
jns
iret
icebp
adc
xchg
cmp
sha1rnds4
inc
cmp
outs
pop
mov
pop
xchg
pop
adc
mov
nop
push
pusha
add
push
call
jne
push
(bad)
fisttp
jno
int3
fcomip
xor
adc
fwait
shl
mov
out
jp
loopne
data16
mov
sub
dec
or
hlt
mov
inc
add
mov
dec
mov
sar
das
aaa
mov
cmp
jmp
mov
retf
retf
adc
sti
inc
sahf
popf
jp
std
cmovle
fistp
repz
mov
clc
xor
fwait
jae
xor
add
leave
sub
outs
stc
test
mov
shl
push
adc
retf
add
jge
aas
adc
aam
mov
cs
mov
daa
pop
clc
and
test
loopne
xor
nop
stos
mov
enter
xchg
pop
push
add
xor
data16
jne
(bad)
mov
mov
mov
sub
sub
(bad)
clc
push
addr16
in
cmps
pop
xor
mov
es
jp
mov
ficom
push
mov
ja
jb
sub
aas
scas
lds
push
aas
mov
lock
test
dec
cdq
sbb
sti
enter
and
mov
xlat
adc
mov
outs
imul
adc
xor
rcl
sbb
push
mov
aas
or
popf
jbe
push
jl
rol
sti
in
mov
fcom
xor
ds
jmp
sar
mov
sub
enter
or
push
lock
pop
cld
cld
jmp
movs
mov
jp
scas
xchg
cli
pusha
or
sahf
retf
mov
xor
fidiv
mov
lds
jo
xchg
xchg
or
push
mov
rol
jp
scas
nop
xor
cmc
adc
add
(bad)
and
xchg
push
iret
cwde
cmp
imul
scas
add
cmc
fimul
push
mov
sub
add
enter
adc
mov
pop
cmp
lds
mov
fxam
cmp
or
pop
scas
dec
jbe
mov
push
and
adc
add
enter
sbb
xor
jg
jp
scas
in
push
daa
xchg
ins
sub
cmps
sbb
fild
jmp
dec
adc
pop
retf
rcr
xor
aad
imul
out
jp
mov
ret
shl
pop
sbb
mov
jnp
retf
mov
cwde
or
or
sub
pop
das
arpl
or
pop
inc
mov
xor
mov
or
or
aaa
and
push
icebp
push
aas
push
shl
push
add
push
mov
(bad)
cmp
pop
sub
stos
shl
data16
pop
lahf
and
xchg
imul
std
xchg
mov
mov
aad
cmp
xor
call
mov
test
inc
sub
sbb
or
pop
fcmovnb
add
cmp
cmp
pop
lock
ins
xchg
jmp
scas
nop
sti
add
sub
ins
and
icebp
jp
cdq
outs
icebp
loopne
mov
mov
inc
retf
lahf
cmc
inc
sbb
adc
jmp
mov
add
pop
jmp
push
nop
jle
std
jno
or
aas
xlat
push
outs
popf
sub
enter
in
shr
repz
dec
xor
ss
push
jp
xchg
mov
inc
jnp
aaa
ficomp
jno
cwde
lahf
sbb
(bad)
sbb
aas
sar
dec
xor
call
cmps
call
cmp
retf
or
outs
add
xchg
sub
jg
cmp
shl
retf
std
push
test
ins
adc
jo
sub
pop
pop
in
xchg
xchg
icebp
gs
mov
xchg
stos
push
std
(bad)
es
cmp
js
test
(bad)
and
xor
retf
mov
cdq
ret
mov
xchg
in
and
add
retf
mov
xor
icebp
sbb
jns
cmp
xor
fidiv
rcl
dec
repnz
pop
fld
aaa
jne
call
aam
call
out
(bad)
cmc
scas
jnp
mov
cmp
mov
jbe
adc
call
rcl
stos
pop
retf
or
js
jmp
pusha
cdq
mov
mov
inc
lock
cmp
sub
lahf
xor
push
inc
pop
pop
bound
test
imul
test
dec
(bad)
js
adc
retf
and
push
mov
add
test
sar
movs
in
retf
or
nop
mov
loop
fst
and
and
popa
stos
lock
cmp
mov
mov
inc
lds
mov
xchg
push
xor
add
pop
jle
call
jg
push
dec
js
sbb
xchg
ins
jo
pusha
add
imul
imul
jg
mov
(bad)
inc
xchg
lds
repnz
out
mov
test
pop
pop
stos
ins
jp
dec
lock
jmp
pop
fisttp
inc
scas
(bad)
jo
sbb
jne
inc
aam
mov
(bad)
outs
jne
retf
ins
jmp
inc
aas
fnsave
add
mov
mov
call
repnz
lds
mov
mov
mov
sub
xor
sub
call
mov
rol
mov
mov
sahf
loop
adc
or
xor
inc
push
and
movs
iret
cmp
(bad)
sub
stos
add
outs
push
mov
or
fwait
cld
loop
dec
cmc
or
add
in
scas
or
pop
cli
lahf
retf
mov
sub
jmp
or
push
adc
call
sar
sbb
mov
xlat
jo
push
and
dec
fcmovbe
dec
in
inc
dec
push
jg
outs
cmp
int
push
mov
scas
pusha
pop
jne
jbe
mov
call
xchg
fiadd
outs
or
jno
mov
scas
shr
xchg
xchg
jp
(bad)
call
out
adc
dec
ds
pop
(bad)
adc
int3
sbb
push
xchg
call
repnz
shr
neg
enter
loope
imul
add
std
loopne
test
loop
jecxz
sub
jno
int
sbb
stos
fmul
ror
sbb
xchg
ffreep
mov
fs
add
lahf
push
sbb
xor
wrmsr
movs
cld
cmps
push
jp
mov
lock
and
call
jg
nop
repnz
adc
cli
lods
sti
lods
and
fild
cmp
and
rcl
push
das
jmp
rcl
scas
inc
(bad)
fist
dec
(bad)
cmp
mov
fdivr
dec
and
popa
lea
inc
call
inc
jge
das
bound
icebp
add
(bad)
cmp
cdq
jp
push
lock
xchg
outs
push
sbb
sub
mov
icebp
movs
int3
loop
mov
out
xor
xchg
cwde
repnz
adc
cwde
in
cmps
(bad)
cmovo
sub
fistp
bound
cmp
xor
stos
and
outs
push
(bad)
iret
int3
lock
adc
push
lods
jmp
nop
call
test
inc
jl
sub
pop
stos
in
shld
mov
xchg
call
jl
mov
cmc
hlt
sbb
jae
shl
mov
cmp
repz
stc
loop
inc
test
add
adc
xchg
lds
(bad)
jne
(bad)
jg
mov
popa
cli
cmp
imul
sbb
dec
sub
out
cmp
mov
les
mov
popa
cmps
xchg
jecxz
nop
bound
retf
jo
lods
imul
sub
or
and
out
jbe
leave
std
push
int
push
mov
int
adc
xlat
cld
cmp
scas
nop
fidivr
cmp
push
mov
int
adc
sti
call
lock
inc
xor
sub
cmc
or
mov
dec
pop
scas
lock
or
and
jo
ret
jge
jg
(bad)
jne
call
or
dec
stos
sub
int
pop
ss
sub
sub
inc
stc
xchg
xlat
mov
jmp
or
add
or
xor
inc
loope
cmps
xchg
(bad)
mul
mov
push
out
inc
stos
in
xchg
sbb
inc
hlt
pushf
fsubr
outs
fs
pminsw
mov
cmc
mov
or
inc
rol
xchg
cli
loopne
add
test
jo
add
cmp
icebp
leave
ja
cmp
inc
dec
mov
das
gs
or
lods
call
ds
add
in
aad
mov
or
lea
aad
jb
iret
rol
stos
dec
mov
add
cmove
sub
mov
cmps
mov
mov
pop
aas
div
fiadd
loop
pop
mov
dec
lods
fcomi
jb
cmp
jbe
retf
pop
fisub
xor
outs
add
push
jecxz
jle
mov
movs
cld
daa
cli
xchg
aad
int3
sub
jnp
call
mov
jo
push
push
sub
fwait
lea
lock
jo
and
nop
cmp
xor
bound
add
xchg
sbb
mov
adc
daa
mov
fild
clc
je
or
jp
sub
loope
and
adc
bound
nop
std
push
xor
or
fild
sbb
fs
xchg
jnp
dec
mov
add
dec
xchg
jnp
into
dec
mov
mov
sub
jmp
jecxz
stc
rol
arpl
push
jno
pusha
xor
cmp
aas
cmp
jmp
cdq
inc
xchg
mov
test
cmp
xchg
mov
repnz
outs
mov
rcr
stos
gs
mov
call
pop
and
outs
fdivrp
dec
addr16
adc
inc
int3
movs
iret
test
pop
call
mov
or
je
inc
sub
push
adc
xchg
iret
mov
test
mul
(bad)
jmp
mov
int
and
ds
sbb
adc
cli
pop
sub
fs
push
cmp
add
mov
inc
push
icebp
sar
dec
cmps
inc
pop
mov
inc
and
adc
or
xchg
out
pop
jb
add
fdivr
push
add
fs
cmps
fiadd
sbb
dec
clc
call
xor
jle
lock
stos
pop
xor
outs
(bad)
lahf
or
repnz
(bad)
xor
xchg
movs
mov
cdq
imul
pop
or
mov
(bad)
arpl
xor
lods
jo
mov
mov
mov
jl
xchg
shr
xlat
aad
aas
test
push
fistp
jbe
fmul
sar
jg
test
push
ds
(bad)
movs
aaa
ins
das
inc
xchg
dec
lods
ror
js
ret
or
jo
clc
sub
loope
pusha
pop
push
adc
sub
xor
pop
pushf
repnz
mov
movs
test
mov
cmp
sub
imul
bound
push
cs
clc
add
inc
cmps
push
pop
and
fwait
push
cmp
aas
or
outs
rol
neg
mov
bound
pop
scas
xor
mov
pop
inc
push
jg
stos
lock
inc
xchg
shl
mov
out
and
aam
cli
clc
(bad)
arpl
stos
sar
pop
(bad)
bound
(bad)
clc
sub
jmp
movs
jmp
dec
out
push
(bad)
(bad)
sahf
pop
rcl
sti
and
cli
lahf
xchg
jmp
pop
jge
(bad)
cmp
test
stos
push
push
mov
ds
jmp
std
pop
mov
arpl
mov
rcl
dec
cmp
test
das
dec
mov
push
sbb
pop
retf
and
dec
mov
add
push
rcl
enter
call
xchg
push
sub
rol
adc
lahf
hlt
out
shr
xor
aad
movs
xchg
stos
(bad)
xchg
push
sub
xor
cmp
jp
aad
call
mov
cli
mov
sub
jl
shl
les
push
jmp
sbb
fiadd
ret
add
mov
jne
inc
or
pop
out
pop
xchg
mov
jae
xchg
mov
adc
mov
mov
mov
inc
je
or
mov
(bad)
rcl
in
mov
dec
test
mov
arpl
inc
inc
sbb
jns
popa
fisttp
add
imul
push
iret
pusha
push
push
cmp
mov
sbb
fldcw
cwde
ret
nop
cmp
pop
xor
icebp
mov
inc
cli
js
mov
mov
sbb
mov
sbb
xor
sti
dec
stc
imul
jle
and
mov
int
rcr
mov
adc
xor
pop
daa
mov
mov
test
cwde
ja
fldcw
rcr
data16
in
xor
es
xor
and
(bad)
xchg
sub
fldenv
loopne
mov
pop
outs
jo
div
pop
sub
popa
xor
sub
mov
fld
sbb
cmp
jbe
xchg
jnp
mov
sbb
mov
jo
scas
pop
push
ins
pusha
popa
fstp
jg
icebp
mov
and
js
inc
cmp
sbb
sbb
dec
retf
jp
je
or
(bad)
aas
shr
fbld
iret
or
pop
je
sbb
inc
sub
movs
retf
mov
retf
shl
mov
inc
stos
mov
movs
push
and
xor
jno
inc
das
push
aas
mov
stos
fsubr
shl
push
dec
sub
add
clc
mov
mov
or
stos
jbe
mov
jp
ret
lea
jnp
retf
mov
mov
idiv
ds
nop
call
mov
dec
mov
dec
mov
pop
sti
shl
scas
mov
add
mov
jb
cmps
cmp
mov
mov
nop
pusha
out
pop
xchg
sti
dec
xor
jb
bound
jmp
gs
xchg
leave
mov
enter
inc
outs
push
(bad)
jnp
sub
nop
scas
or
sbb
push
sub
xor
test
push
shl
pop
push
jns
cwde
ret
mov
sub
and
aas
fwait
mov
in
xchg
lahf
pop
add
shr
test
mov
xchg
xor
fchs
xor
shr
not
es
rcr
(bad)
pop
jp
push
mov
dec
mov
sub
(bad)
jg
sub
dec
cli
xor
sbb
pop
pusha
pop
add
adc
(bad)
jnp
nop
daa
sbb
mov
push
fisub
push
or
or
xchg
(bad)
in
lea
or
jp
data16
sub
and
and
mov
call
lahf
pop
jo
int
adc
pop
add
in
std
xchg
aas
out
jl
ss
mov
inc
add
sbb
mov
push
mov
jne
(bad)
cdq
call
ins
adc
jo
ret
test
scas
test
sub
cli
mov
dec
cld
movs
inc
inc
fiadd
(bad)
out
dec
xchg
cmp
repz
daa
out
jbe
mov
or
xor
test
mov
mov
push
call
and
xchg
fwait
lds
mov
cmp
and
or
out
xchg
cld
inc
daa
cmp
retf
jg
aad
pushf
jp
sbb
and
xor
stos
lock
add
repz
mov
jae
push
xor
or
shr
pop
adc
jns
(bad)
aad
das
inc
pop
xchg
cmp
jmp
push
aas
inc
mov
jne
jg
cmc
(bad)
lahf
fdivr
cmps
adc
mov
popa
(bad)
cmp
js
inc
sub
mov
mov
dec
(bad)
mov
call
lahf
ficom
dec
and
in
lock
call
adc
shr
sub
cmp
lds
scas
pop
leave
push
iret
repz
inc
sub
mov
jge
(bad)
mov
ror
jmp
xchg
lods
dec
test
inc
xor
push
xchg
xchg
adc
dec
rcl
loop
jns
mov
ss
sbb
clc
jne
shl
mov
nop
ins
xchg
xor
fwait
pop
pop
or
nop
jno
or
lds
cmp
ins
mov
(bad)
loopne
les
(bad)
out
push
nop
lahf
pop
std
sbb
(bad)
fcmovbe
push
mov
inc
xor
or
inc
gs
push
mov
iret
fidiv
idiv
inc
cmps
add
inc
or
cmp
dec
icebp
(bad)
jbe
popf
cld
ror
jo
loope
add
cmp
xchg
xchg
gs
aam
imul
aad
fsub
xor
ror
ret
cmps
dec
imul
out
mov
shl
lea
mov
js
adc
aaa
fdiv
dec
pop
aam
(bad)
inc
add
adc
mov
shl
sub
dec
fidivr
fs
and
test
and
outs
call
(bad)
rcl
in
xor
xchg
imul
aad
das
fild
jp
pop
sub
jp
stos
fdivr
inc
popa
outs
push
lods
push
das
sbb
pop
mov
mov
pop
loopne
push
icebp
mov
mov
nop
cmps
das
inc
pop
push
enter
jl
rcr
xor
(bad)
movs
mov
das
push
cmp
cmc
fidivr
aas
push
inc
jmp
scas
js
pushf
pop
std
pavgb
scas
dec
out
iret
sub
or
add
xchg
ret
cmp
cli
lahf
pop
in
add
dec
iret
scas
mov
inc
or
add
test
cmc
es
sub
ss
aad
ja
sbb
pop
test
jns
and
mov
mov
sub
xor
lds
sub
test
jne
xchg
call
jno
xlat
cmps
sbb
adc
dec
add
aas
pop
adc
jne
and
push
or
stos
enter
sahf
pop
cli
in
or
add
add
arpl
test
test
mov
jmp
or
(bad)
xor
sub
(bad)
xchg
add
scas
repnz
jecxz
cmp
cmp
js
data16
cmp
or
add
clc
in
movs
(bad)
jmp
cmp
dec
inc
mov
repnz
cmp
mov
push
into
xlat
mov
adc
dec
stc
xchg
test
(bad)
rol
mov
ja
fdivr
rcr
retf
xchg
fdivr
dec
pushf
pop
inc
push
sahf
movs
pop
out
sub
out
fstp
mov
scas
nop
stos
mov
aad
mov
sbb
jp
ss
cmp
sar
add
push
xchg
sub
cwde
mov
jmp
out
jno
enter
add
mov
jmp
inc
(bad)
shl
pop
jge
jle
cld
repz
dec
mov
sub
ficom
mov
xor
in
cmps
lods
inc
int
xchg
imul
xor
pop
or
pop
push
push
mov
pop
jae
jmp
popf
mov
stos
xchg
mov
fistp
adc
js
cmove
pop
mov
call
mov
xor
xor
dec
mov
inc
push
add
dec
push
adc
xor
pusha
or
call
out
jp
shl
jno
out
xchg
iret
pop
mov
fiadd
or
jns
adc
sbb
and
es
mov
lods
ins
jl
lods
out
out
inc
es
shl
mov
dec
lods
sar
dec
dec
and
pusha
ja
sbb
cmps
ret
mov
not
dec
test
mov
mov
xor
pop
xchg
adc
jo
dec
sub
mov
aaa
adc
test
movs
mov
mov
jg
leave
es
js
retf
jl
js
sbb
mov
cmp
mov
xchg
push
cmp
mov
mov
inc
sbb
sub
jp
data16
loopne
cmps
fadd
in
mov
or
and
loop
jmp
xor
push
rcl
(bad)
clc
adc
sub
sub
es
(bad)
jg
sbb
mov
fwait
pop
movs
pop
sbb
aam
mov
or
xor
push
aam
mov
push
lds
mov
jp
mov
pushf
aas
imul
int3
jmp
cmc
jecxz
(bad)
sbb
adc
mov
fwait
(bad)
cmp
loopne
jge
cmp
shl
popa
(bad)
mov
or
xabort
inc
jmp
cmp
clc
adc
rol
aas
retf
sbb
sar
jmp
push
arpl
jmp
adc
add
inc
ds
mov
mov
pushf
call
setp
and
jecxz
mov
cmp
cmc
xor
adc
mov
loopne
gs
cld
push
cmp
dec
jmp
cmp
mov
mov
sbb
cmp
psubusw
push
fcomip
pop
inc
pop
xlat
mov
xor
inc
mov
jge
inc
cmp
outs
fidivr
nop
daa
lds
xor
outs
add
mov
scas
fisubr
aas
mov
sub
add
gs
out
inc
stc
retf
jno
or
(bad)
sbb
rol
jg
mov
add
adc
mov
push
mov
push
aam
into
fsubr
iret
pop
or
adc
mov
xor
mov
add
adc
call
(bad)
(bad)
test
imul
(bad)
cmp
push
iret
pop
add
adc
sbb
xchg
jmp
ret
add
sub
lods
dec
fcom
xchg
pop
mov
enter
push
xor
popf
dec
(bad)
mov
dec
and
retf
jp
(bad)
ins
ret
mov
jecxz
mul
iret
or
xchg
mov
mov
dec
mov
jo
mov
xchg
movs
pop
xchg
jp
loopne
ror
cmp
xchg
outs
movs
pusha
pop
cmp
sbb
and
add
test
aam
call
pop
fdivp
cli
adc
jmp
sbb
mov
fwait
xor
jo
ins
jbe
fwait
test
jecxz
(bad)
cmp
sub
adc
or
in
fimul
addr16
xchg
add
cmc
jbe
out
call
cmp
push
mov
jmp
pusha
pop
jmp
mov
(bad)
jge
aas
stos
popf
clc
in
dec
fnstenv
nop
cs
frstor
inc
aas
fstp
push
das
ror
jecxz
lock
mov
dec
(bad)
out
xchg
add
inc
std
cmp
push
shr
sbb
call
repz
pop
mov
sub
in
push
xor
lea
mov
fnsave
xchg
call
dec
mov
xor
inc
jb
lds
sbb
cmp
inc
dec
rol
mov
jno
dec
js
lods
push
pop
lods
imul
cmp
pushf
in
shl
iret
jmp
pop
lds
scas
mov
or
pop
jmp
movups
dec
xor
jo
jmp
dec
jne
aad
xlat
pushf
jne
push
js
loopne
or
ror
mov
test
adc
cmc
sbb
or
xlat
mov
mov
sub
inc
aad
mov
out
aad
xchg
inc
repz
inc
xchg
mov
dec
mov
aaa
and
mov
inc
push
retf
dec
jmp
mov
dec
xor
call
jmp
test
in
daa
in
push
psrld
ret
icebp
cmps
add
mov
lahf
stos
ja
and
mov
or
je
pusha
pop
jo
inc
jmp
cmp
push
test
xor
pop
scas
jb
(bad)
loop
repnz
jg
in
lods
and
xchg
mov
jnp
xchg
call
dec
and
and
sub
(bad)
(bad)
icebp
movs
push
out
push
or
or
dec
push
pop
sbb
sbb
push
enter
cs
or
jp
mov
dec
stos
jno
aad
jle
mov
js
adc
leave
imul
mov
test
movs
or
pop
clc
ss
inc
(bad)
add
(bad)
aam
adc
add
adc
or
in
jmp
fwait
dec
lods
ret
and
mov
cmps
jmp
mov
out
dec
push
sbb
mov
push
clc
and
mov
in
jp
dec
mov
sar
inc
sub
iret
inc
fild
mov
ja
mov
rol
jmp
cmp
fidiv
call
jno
shr
cli
cmp
xchg
xchg
mov
cvtps2pd
sub
gs
push
sub
lahf
add
stos
ins
push
and
xor
sbb
shl
stos
lds
in
mul
jns
push
dec
jb
push
xchg
out
jp
mov
xor
or
pop
cli
shl
adc
jb
add
xor
stos
pop
dec
test
loop
cmp
(bad)
jg
dec
gs
dec
mov
stc
mov
xchg
cmp
(bad)
out
xchg
inc
jmp
leave
cli
scas
leave
mov
mov
icebp
(bad)
mov
cmp
jmp
pop
nop
mov
xchg
cwde
push
bound
xchg
mov
dec
shl
fisttp
sbb
jmp
(bad)
cdq
pusha
pop
add
stos
mov
pop
call
or
adc
xor
pusha
out
cli
cwde
in
mov
in
mov
pop
or
adc
call
daa
movs
inc
sub
xor
outs
xor
and
addr16
sub
mov
imul
jmp
ret
sahf
jns
adc
sbb
fld
gs
shl
fbld
push
xchg
mov
pop
scas
cmc
mov
mov
jmp
dec
add
(bad)
fwait
ret
mov
popa
push
xchg
push
retf
inc
push
aad
and
jo
push
jmp
cmp
fsubr
and
cdq
pusha
std
lea
(bad)
out
outs
mov
jg
fiadd
cmps
xchg
jg
jmp
pop
jmp
rol
aas
or
pop
xchg
(bad)
ss
mov
icebp
pop
add
mov
sar
mov
jl
(bad)
aaa
cmc
cmp
inc
fcomip
mov
(bad)
push
or
mov
pop
in
inc
mov
mov
pusha
sti
in
jecxz
or
jno
add
je
out
(bad)
call
nop
fmul
jmp
test
mov
fistp
mov
sub
dec
pop
rol
mov
sub
fnstcw
jle
test
daa
rcr
mov
mov
(bad)
out
inc
ret
jbe
fcomp
loopne
sti
mov
stc
fdivr
sub
sub
add
dec
ret
jmp
mov
mov
push
xchg
mov
ins
xchg
rol
mov
shl
stos
sar
pop
cld
xor
pop
pop
xchg
loop
mov
or
xor
push
mov
jb
xor
jp
jne
retf
pop
jmp
outs
fidivr
sub
adc
jne
imul
retf
inc
xchg
dec
btc
jl
cdq
loope
fild
jl
in
es
cmp
(bad)
iret
or
lock
jl
xchg
pop
xor
fld
(bad)
pop
test
push
ja
cmps
add
cmp
loopne
fnsave
mov
push
clc
stos
lahf
push
jo
sbb
fisub
(bad)
mov
sub
pop
hlt
adc
out
in
dec
lds
fs
enter
push
js
jae
rcl
out
in
xchg
out
mov
pop
adc
mov
pop
sbb
xchg
call
jp
gs
lahf
dec
xchg
bound
leave
rcr
fist
addr16
adc
mov
adc
inc
jmp
scas
sub
leave
mov
mov
adc
sub
pusha
(bad)
neg
or
cwde
mov
and
jmp
mov
push
arpl
xor
das
adc
add
and
add
adc
sar
add
fild
mov
sbb
cs
jmp
call
not
push
jns
and
lea
xor
sbb
cmp
sub
pop
sub
inc
aas
lods
(bad)
loopne
mov
mov
jg
nop
cli
jmp
cwde
or
dec
cmp
xchg
adc
mov
lods
rol
scas
jae
push
pop
xor
and
fs
rcl
shr
imul
retf
jg
nop
iret
xchg
dec
into
out
or
mov
sbb
xchg
cli
adc
dec
xor
xchg
and
fs
dec
xor
sub
rsm
push
jnp
retf
repnz
popa
outs
mov
sub
aaa
push
mov
daa
inc
clc
ffreep
push
sbb
in
popf
scas
xchg
adc
fwait
xor
inc
add
fild
xchg
sbb
aas
in
xchg
inc
aad
into
lea
or
push
test
cs
gs
and
mov
mov
clc
adc
mov
stc
fld
push
sub
push
and
es
or
outs
jb
outs
mov
inc
mov
sbb
imul
sbb
pop
loop
sub
mov
and
inc
mov
(bad)
hlt
xlat
adc
cmp
or
sar
stc
cdq
sub
stos
stos
jb
push
sub
jae
lahf
scas
push
cli
adc
mov
ret
jmp
inc
push
sbb
arpl
(bad)
add
mov
ficom
xor
cmp
dec
cld
or
xchg
push
repz
xchg
shr
fadd
or
not
ja
out
mov
xchg
push
mov
ficomp
pop
ret
daa
xchg
push
jl
inc
xor
aam
pusha
dec
and
(bad)
dec
jg
cld
xor
loopne
lock
dec
fisubr
dec
jo
ret
jns
cs
pop
movs
mov
out
outs
ins
mov
add
fidivr
mov
mov
sbb
aas
add
adc
mov
dec
in
inc
dec
and
or
push
fadd
pop
lds
icebp
pop
add
outs
push
arpl
shl
fst
inc
mov
mov
or
mov
inc
push
pop
add
pop
pop
popa
lock
adc
jmp
lds
(bad)
out
jmp
js
mov
rol
(bad)
xchg
icebp
imul
lea
mov
mov
pshufw
cmp
mov
fbstp
(bad)
dec
push
das
inc
mov
pushf
push
add
int
adc
xchg
dec
fcmovnb
aas
push
push
add
mov
test
or
(bad)
jo
sub
jg
mov
movs
dec
push
stc
pop
arpl
test
scas
nop
xchg
outs
adc
jb
xchg
in
call
imul
retf
jmp
jb
sub
dec
push
addr16
loop
pop
mov
shr
inc
popf
outs
cli
stos
push
and
fstp
jo
loope
add
jp
loopne
sbb
test
mov
add
jp
and
dec
xor
mov
rol
sub
stos
and
in
sub
add
or
or
pop
mov
lods
loopne
cmps
int
mov
stos
sub
push
fs
bound
cmp
daa
shr
dec
mov
aas
push
and
dec
retf
jl
sub
(bad)
out
test
imul
mov
pop
sar
jecxz
scas
jae
mov
or
cmp
xchg
out
jns
cld
sbb
lods
retf
int3
test
(bad)
pusha
adc
ret
and
fwait
icebp
mov
test
push
sub
mov
xlat
test
loope
pusha
jo
retf
sub
ftst
sub
test
test
jecxz
(bad)
cwde
jl
outs
push
lods
xor
xor
aaa
loope
fadd
lock
and
push
test
in
inc
leave
fs
sub
data16
loop
xchg
pop
mov
mov
add
sub
and
clc
or
sbb
lock
test
loopne
call
or
add
imul
dec
mov
das
cdq
and
es
jmp
dec
cli
push
call
cld
pop
pop
mov
mov
mov
pusha
sub
call
pop
push
jns
dec
fcom
loopne
out
sub
push
ret
aad
sbb
add
test
or
mov
shr
push
daa
imul
pop
rol
(bad)
inc
scas
jmp
xchg
fwait
pop
sub
push
push
icebp
imul
pop
xchg
stos
fadd
add
stc
lahf
sub
ins
fmul
mov
sub
mov
sbb
rcr
cdq
dec
and
xor
sbb
jne
(bad)
cmp
stos
movs
mov
call
xor
or
(bad)
sbb
sub
sbb
fwait
inc
sub
adc
sbb
retf
cwde
jg
push
jns
or
sbb
mov
pop
adc
sar
add
ds
adc
(bad)
pop
inc
adc
les
jp
mov
adc
mov
fst
or
or
mov
mov
xor
pop
lock
adc
jg
js
xor
ja
push
into
xchg
mov
dec
jge
lea
in
stos
scas
xchg
retf
scas
mov
and
jge
mov
jmp
sub
sar
push
cmc
cmps
pop
es
push
mov
or
pop
rcl
sub
stos
mov
xchg
xor
add
lsl
adc
xor
sub
call
dec
jae
lahf
sbb
sub
jo
movs
scas
add
data16
sbb
loope
or
fwait
arpl
or
adc
cmc
sbb
dec
jge
add
xchg
jp
dec
lock
inc
stos
popf
jnp
xor
rol
inc
mov
mov
ja
add
ror
or
inc
jge
bound
lods
dec
ins
mov
mov
inc
xchg
inc
mov
mov
movs
xor
xor
scas
cmp
pop
jb
in
add
jp
jbe
push
mov
sub
mov
test
fbstp
jg
push
or
leave
and
push
sub
iret
fiadd
in
cmps
xchg
inc
cs
push
fist
jle
bound
(bad)
lock
xchg
push
(bad)
in
xor
je
test
cmps
ds
jne
xchg
sub
test
test
push
out
mov
add
mov
stos
retf
mov
sti
xchg
or
pop
sub
jnp
xchg
dec
sbb
retf
and
pop
sbb
xor
xchg
adc
loopne
sbb
adc
cmp
jge
sbb
sub
inc
jne
shr
adc
loopne
sub
cmps
xchg
mov
push
es
adc
xchg
fisubr
xor
ins
dec
pop
repnz
xor
and
popa
push
inc
cli
fnstsw
push
inc
mov
or
cmps
adc
jp
mov
stos
in
or
cmp
inc
(bad)
cmp
fisttp
pop
dec
adc
arpl
add
inc
das
in
inc
mov
inc
adc
pushf
pop
mov
or
mov
push
jp
jne
gs
das
dec
loop
inc
cwde
jg
mov
or
adc
adc
frstor
loopne
(bad)
jae
daa
pop
mov
inc
retf
mov
fld
mov
xor
xchg
or
pop
sub
inc
popa
and
and
lahf
bound
in
push
fcom
ror
or
pop
loopne
adc
xor
sbb
pop
add
iret
fwait
adc
ror
dec
mov
push
loop
dec
daa
imul
std
jbe
cmps
cmp
lods
mov
call
cmp
cmp
addr16
jp
mov
shr
xchg
or
xor
in
or
stos
lahf
retf
cdq
cli
or
mov
xlat
add
rcl
loopne
movs
sub
dec
xchg
jo
push
adc
cmc
enter
test
leave
mov
sar
xchg
rcl
(bad)
addr16
cmc
clc
ins
aaa
jno
movs
test
cmp
cmc
std
fstp
(bad)
xor
or
gs
cmc
inc
or
cmp
mov
cmp
(bad)
mov
mov
fsub
inc
(bad)
js
cmp
pop
and
and
fdiv
mov
mov
xchg
sbb
fldcw
lods
dec
sbb
push
adc
jg
jns
sub
ret
mov
pop
rol
push
push
adc
xchg
cli
mov
enter
push
fisubr
iret
fwait
ins
dec
out
popf
sub
pushf
call
mov
jg
push
pop
mov
cwde
(bad)
mov
mov
movs
(bad)
xchg
out
test
je
pop
mov
out
pop
and
test
scas
cmp
add
ret
push
fs
cs
pop
and
mov
call
(bad)
movs
into
rcr
cmp
mov
mov
call
dec
and
adc
sti
pusha
dec
in
pause
jmp
jmp
cwde
test
arpl
jle
outs
popf
imul
inc
cmp
or
ret
scas
fsubp
sahf
jge
dec
out
mul
jne
fdivr
push
adc
fisub
jns
test
movs
push
or
mov
out
neg
push
rol
out
pop
and
adc
add
fnstenv
ins
je
jae
inc
das
jle
xor
(bad)
add
inc
and
mov
mov
movs
and
pop
push
jae
stos
push
inc
sub
iret
outs
ja
cmc
std
in
ret
scas
mov
mov
movs
jmp
pop
jge
aas
ds
lahf
pop
inc
(bad)
and
aam
(bad)
aas
add
xchg
ror
pop
icebp
jp
stos
push
aaa
and
mov
add
mul
jo
jle
outs
push
movs
mov
scas
(bad)
leave
mov
sahf
mov
pop
aaa
pop
jne
jae
dec
adc
in
xchg
bound
and
in
or
movs
fst
mov
xchg
rol
test
retf
inc
cmp
or
(bad)
sbb
and
fistp
fwait
push
jne
fadd
inc
xor
and
and
mov
pop
and
scas
jge
jmp
push
push
imul
in
inc
mov
jg
dec
and
into
sbb
jg
cmps
sar
enter
adc
jnp
retf
dec
sub
in
or
in
push
mov
mov
xor
pop
sub
dec
push
jle
pusha
neg
jmp
lea
punpcklbw
mov
mov
test
cmp
out
stos
neg
out
fsub
push
je
jbe
push
xor
repnz
jo
outs
cmp
out
mov
inc
mov
mov
out
cmp
dec
stos
xchg
jnp
xor
ins
ss
cmc
mov
add
stos
and
jge
sub
in
inc
mov
sti
pusha
dec
cdq
fimul
pop
mov
pop
pop
and
and
inc
mov
inc
add
or
ja
inc
cmp
jmp
mov
rol
jmp
int
adc
dec
outs
iret
stos
or
mov
mov
fsubr
dec
xchg
ds
xchg
and
or
sbb
add
xchg
push
ror
add
mov
push
pop
jp
xchg
int
nop
mov
add
jge
jmp
(bad)
xor
pop
retf
and
cli
nop
jmp
loope
jge
jmp
enter
daa
adc
or
inc
adc
mov
ja
mov
js
pop
mov
rcr
or
cli
inc
cmc
jo
mov
outs
jae
ret
mov
pop
xchg
inc
push
mov
cmp
push
adc
adc
je
mov
mov
adc
(bad)
aas
add
xchg
push
add
out
fwait
mov
add
aaa
mov
adc
fistp
(bad)
mul
mov
push
test
ret
mov
sub
mov
cmps
xchg
lds
stos
stc
mov
pop
lock
cmc
xor
sbb
sbb
push
pop
fimul
movs
add
jp
jp
gs
cmc
inc
sbb
xor
pusha
adc
xor
aad
js
push
jb
test
rcl
dec
stos
and
aaa
mov
sbb
cmp
mov
int
mov
adc
ja
adc
call
jo
cmp
jo
mov
or
rol
scas
int3
(bad)
lods
(bad)
jnp
enter
dec
adc
pop
jg
outs
cmp
into
sbb
movs
rol
jp
push
adc
xor
push
xchg
inc
dec
mov
sar
lfs
loopne
sbb
(bad)
out
(bad)
test
fnsave
retf
lods
push
retf
and
pop
mov
and
pop
shr
rol
jno
pop
scas
adc
add
mov
mov
mov
pop
add
stc
cmps
movs
push
jb
pusha
xchg
and
mov
(bad)
sbb
pop
loopne
test
and
icebp
call
repnz
adc
lods
push
int
adc
leave
stos
jne
(bad)
cli
out
mov
and
mov
mov
jmp
sub
scas
mov
lfs
loopne
setp
sub
int3
xor
cld
sbb
jo
or
dec
jb
ins
dec
out
mov
add
rcr
xor
call
xchg
dec
and
(bad)
xor
push
cmps
lods
pop
pushf
gs
stos
adc
arpl
xchg
or
das
(bad)
scas
sub
xchg
rol
mov
fwait
jmp
arpl
js
adc
test
mov
pusha
mov
in
fisubr
xchg
rol
push
add
and
inc
jno
jg
lock
lahf
xchg
fild
rcl
dec
stos
xchg
mov
dec
xor
adc
mov
mov
or
ss
push
add
adc
lods
cmp
ins
jg
leave
(bad)
(bad)
cmp
adc
add
xchg
rcl
sub
inc
dec
mov
or
sub
fld
mov
ins
cmps
or
dec
(bad)
mov
sbb
fnsave
dec
lods
jmp
jb
jmp
jne
xlat
js
das
inc
popa
and
jg
jns
cwde
cmc
mov
dec
xchg
scas
sti
dec
outs
jae
rol
push
add
xchg
pop
or
clc
adc
ret
aad
rol
push
fwait
jmp
out
gs
adc
jl
mov
cmp
imul
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
fwait
pusha
or
inc
sub
popa
or
movs
inc
sub
mov
dec
xchg
clc
lds
sar
inc
sbb
and
pop
add
jno
cdq
out
fisttp
xchg
mov
pop
daa
inc
pop
dec
aaa
push
dec
cmp
jg
xor
xchg
in
lahf
mov
pop
popa
xlat
stc
xchg
jg
push
xor
add
or
dec
sub
mov
call
repnz
ret
mov
add
js
or
inc
sub
mov
stos
rol
mov
jg
outs
mov
inc
sub
cmp
dec
xor
sub
jp
mov
fadd
stos
sar
sub
pop
inc
sub
cmp
dec
xor
push
jp
mov
mov
ret
jmp
inc
push
xor
push
cmp
stos
sar
sub
pop
add
push
js
dec
xor
sub
loopne
lock
repnz
dec
jo
add
push
cmp
dec
jb
add
jp
mov
call
mov
sub
mov
inc
sub
bound
xor
push
jp
enter
stos
das
mov
jg
nop
imul
mov
xor
inc
push
test
mov
shr
fiadd
or
inc
sub
js
dec
iret
leave
inc
push
test
mov
call
mov
cmp
pusha
cmc
jo
inc
sub
and
sbb
push
jmp
shr
fiadd
or
inc
sub
mov
xor
push
jp
mov
call
mov
ret
add
inc
sub
and
pop
add
cmp
mov
or
mov
fidivr
nop
cli
pusha
or
inc
sub
and
xor
pop
mov
call
and
pusha
or
inc
sub
mov
xor
push
jmp
shr
fiadd
cmc
jo
inc
sub
bound
movs
add
jp
enter
cmp
cwde
sub
cli
pusha
or
pop
inc
sub
pop
jmp
cmp
mov
or
mov
cli
pusha
or
inc
sub
js
dec
iret
pop
add
cmp
mov
call
dec
fiadd
or
inc
sub
bound
leave
inc
push
test
mov
shr
fiadd
dec
jo
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
(bad)
stc
push
jp
jne
call
and
pusha
or
pop
inc
sub
sbb
push
jmp
push
call
mov
sub
cli
pusha
or
add
lds
dec
xor
push
jp
mov
or
pop
repnz
dec
jo
inc
sub
pop
inc
push
jp
sbb
inc
mov
jmp
inc
aad
cmp
dec
xor
sub
test
mov
sub
fiadd
or
add
lds
dec
iret
pop
add
cmp
jne
call
mov
sub
sbb
dec
xor
push
jp
mov
or
mov
cli
pusha
cmc
jecxz
inc
sub
pop
add
cmp
mov
call
and
and
jo
shr
cmp
fnstenv
add
wbinvd
sub
fidivr
sar
pusha
cmc
jecxz
inc
sub
movs
add
jmp
push
call
mov
ret
add
mov
or
pop
(bad)
stc
push
jp
jne
call
and
pusha
cdq
xor
inc
aad
js
dec
iret
leave
inc
push
test
lock
mov
sub
imul
mov
xor
inc
push
test
sbb
mov
adc
in
sub
and
pop
add
cmp
mov
or
retf
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
mov
inc
sub
and
pop
add
cmp
mov
call
mov
sub
cli
pusha
or
add
push
lds
dec
xor
push
jp
sbb
mov
cmp
pusha
cmc
jo
inc
sub
and
pop
add
push
jp
jne
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
xchg
sub
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
add
push
lds
push
jp
mov
or
mov
imul
sub
and
pop
xchg
sub
jp
mov
call
repnz
or
inc
sub
js
dec
iret
pop
add
jp
mov
call
and
pusha
or
inc
sub
and
pop
add
jp
mov
or
retf
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
shr
fidivr
nop
imul
push
iret
movs
xchg
sub
jp
jne
fadd
stos
das
mov
ret
add
inc
aad
cmp
mov
leave
inc
push
test
mov
or
pop
repnz
dec
jo
mov
dec
iret
movs
xchg
sub
jp
jne
fadd
stos
das
sub
retf
sub
cli
pusha
or
inc
sub
bound
pop
add
push
jp
jne
fadd
stos
das
sub
retf
adc
xor
inc
aad
test
xchg
sub
jp
mov
call
mov
jg
outs
imul
aad
js
dec
iret
leave
inc
push
test
mov
call
repnz
or
test
xchg
sub
jp
mov
or
mov
cli
pusha
cmc
jo
add
push
lds
dec
xor
stc
push
jp
jne
fadd
stos
das
inc
pop
xor
sar
pusha
cmc
jo
add
push
lds
dec
xor
push
jp
sbb
mov
ret
imul
push
jb
add
setp
stos
shr
loop
mov
sub
mov
shr
cmp
dec
xor
push
cmp
mov
shr
and
pusha
or
cmp
fnstenv
add
mov
rcl
mov
jmp
inc
sub
and
pop
add
jp
mov
or
retf
sub
cli
repz
jo
mov
dec
iret
pop
add
push
jp
jne
call
mov
sub
imul
mov
xor
sub
jp
mov
call
mov
ret
jmp
shr
cmp
dec
xor
stc
push
jp
jne
fld
stos
das
sub
retf
adc
xor
inc
aad
jns
dec
iret
leave
inc
push
test
mov
call
and
pusha
or
inc
sub
and
pop
add
cmp
mov
or
pop
repz
dec
jo
inc
sub
jns
dec
iret
pop
add
jp
mov
call
mov
sub
cli
repz
jo
mov
mov
pop
add
jp
mov
or
mov
cli
pusha
or
inc
sub
and
pop
add
jp
mov
shr
fiadd
or
inc
sub
and
pop
add
jp
mov
call
and
pusha
or
inc
sub
and
pop
add
jp
mov
call
dec
dec
ret
jmp
inc
sub
and
pop
add
jp
mov
call
mov
adc
jo
inc
sub
and
pop
add
push
cmp
jne
call
mov
sub
cli
pusha
dec
jo
shr
cmp
fnstenv
add
lock
dec
fiadd
or
inc
sub
jns
dec
iret
pop
xchg
sub
jp
mov
shr
fidivr
add
inc
sub
arpl
movs
xchg
sub
jp
mov
shr
fiadd
or
shr
cmp
fnstenv
add
wbinvd
sub
fidivr
sar
pusha
cmc
jo
shr
cmp
dec
xor
loopne
lock
pop
repz
or
mov
mov
sbb
push
jp
sbb
mov
jg
nop
imul
sub
and
pop
xchg
sub
jp
mov
shr
and
pusha
cmc
jo
add
push
lds
fnstenv
add
lock
mov
ret
jmp
mov
dec
iret
pop
xchg
sub
jp
jne
fld
stos
das
inc
xor
nop
cli
pusha
or
inc
sub
and
jae
add
arpl
shr
fidivr
add
inc
mov
xor
inc
push
test
mov
call
repz
dec
jo
mov
mov
sbb
push
jp
mov
call
dec
fiadd
or
inc
sub
and
jae
add
setp
stos
sar
ret
jmp
add
push
lds
dec
xor
stc
push
jp
jne
call
and
and
jo
shr
cmp
fnstenv
add
wbinvd
sub
fiadd
or
inc
sub
and
jae
add
wbinvd
sub
fiadd
or
cmp
fnstenv
add
lock
mov
cmp
pusha
cmc
jecxz
inc
sub
movs
xchg
sub
jp
sbb
stc
mov
jmp
inc
sub
jns
dec
iret
leave
inc
push
test
lock
and
and
jo
shr
cmp
dec
mov
jp
mov
or
mov
cli
pusha
cmc
jecxz
inc
sub
movs
xchg
sub
jp
sbb
stc
mov
test
xor
inc
aad
jns
dec
iret
leave
inc
push
test
lock
mov
ret
jmp
inc
aad
jns
dec
iret
pop
add
jp
leave
lock
and
pusha
cmc
jo
add
push
(bad)
xor
push
cmp
mov
call
and
and
jo
shr
cmp
fnstenv
add
setp
cmp
cdq
sub
cli
repz
jo
mov
mov
sbb
push
jmp
push
jmp
and
and
jo
shr
cmp
fnstenv
add
wbinvd
sub
fidivr
nop
cli
repz
jo
mov
dec
iret
pop
xchg
sub
jp
mov
call
mov
sub
cli
arpl
jo
inc
sub
and
pop
add
jns
mov
cdq
ret
stos
sar
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jae
inc
sub
and
pop
add
jns
mov
cdq
ret
test
mov
sub
stc
arpl
jo
inc
jnp
dec
dec
das
inc
or
loopne
mov
xchg
stos
test
idiv
xlat
mov
popa
sbb
pop
dec
sbb
inc
or
add
loope
dec
xor
push
inc
sub
arpl
fist
mov
aad
mov
mov
stc
mov
and
dec
inc
sub
adc
loopne
xchg
enter
into
mov
scas
(bad)
adc
jg
ins
aaa
pop
push
out
cs
scas
(bad)
mov
mov
dec
push
jge
sub
je
fs
int3
lahf
jmp
sub
jecxz
pusha
fs
pop
inc
xor
sub
jg
mov
lock
test
les
sub
inc
and
xor
cmp
sub
push
xchg
jecxz
push
rcr
add
adc
add
jne
sub
push
pop
(bad)
stc
mov
dec
shr
add
jae
inc
pop
js
cmp
and
fs
mov
retf
mov
sahf
shr
and
dec
sub
and
cld
in
fidiv
mov
call
pop
pop
add
jo
xor
and
retf
lahf
out
out
into
loopne
repnz
test
mov
xor
arpl
push
outs
push
cs
sub
fsubr
into
loopne
les
jle
pop
jg
xor
and
sub
xchg
scas
test
aam
stc
mov
or
xor
push
xor
cmp
mov
iret
mov
hlt
aad
mov
(bad)
stos
stc
popf
add
jns
sub
push
inc
sub
arpl
ds
scas
ficomp
(bad)
(bad)
mov
scas
scas
xchg
and
outs
add
push
xor
je
movs
enter
cmc
xchg
in
cmc
les
and
dec
and
jnp
add
xor
arpl
cmp
fxch
scas
fcomp
adc
add
jp
jne
sub
push
pop
(bad)
stc
mov
call
xchg
mov
stos
aam
pop
jns
outs
add
aas
dec
popa
or
imul
mov
call
xchg
mov
mov
xchg
and
sub
pop
or
jg
jno
or
cmp
shl
push
dec
xor
dec
dec
and
sub
jno
mov
into
mov
(bad)
hlt
stos
in
pusha
jge
ja
adc
push
cs
sub
and
in
mov
(bad)
hlt
stos
mov
adc
cmp
and
xor
(bad)
cmp
ficom
mov
xor
js
push
xor
or
sbb
(bad)
jmp
test
(bad)
loop
and
and
pusha
outs
pop
sub
dec
or
leave
loop
out
lock
mov
lds
xor
add
jb
inc
sbb
(bad)
mov
in
cdq
pop
mov
xor
pop
outs
dec
gs
pop
ja
adc
(bad)
aam
call
mov
(bad)
jmp
xor
cmp
imul
cmp
fidivr
stos
dec
sahf
loop
xor
jg
push
js
xor
pushw
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
dec
xor
push
jp
or
inc
sub
mov
jmp
clc
loop
repnz
ret
mov
add
push
cmp
jae
inc
sub
mov
jmp
repz
ret
test
xor
imul
sbb
push
cmp
jmp
repz
ret
test
jo
inc
sub
dec
and
push
pop
add
fs
loopne
lock
mov
mov
aas
or
inc
pop
and
aas
pop
add
adc
test
pushf
test
retf
sub
cli
or
sbb
xor
and
inc
xor
adc
cli
test
les
std
xchg
pusha
or
and
adc
adc
mov
leave
mov
cld
cdq
add
inc
jg
gs
jb
outs
das
jle
shr
call
mov
pcmpgtw
je
inc
push
dec
dec
adc
outs
sbb
adc
stos
movs
enter
mov
mov
mov
jo
inc
push
jb
or
cwde
out
lock
not
fcmovb
test
xor
imul
sbb
push
cmp
jmp
repz
ret
test
xor
imul
sbb
push
cmp
stos
ror
retf
retf
cmps
xlat
nop
mov
add
dec
dec
jle
pop
cmp
stos
xchg
call
(bad)
test
mov
inc
outs
adc
dec
and
arpl
repz
repz
mov
aad
mov
in
not
pusha
or
arpl
jns
nop
out
xchg
mov
fmul
fnstcw
add
inc
xor
sub
push
push
mov
(bad)
call
sahf
mov
pusha
jns
jg
pop
aaa
pop
inc
ds
xor
packsswb
retf
mov
shr
xchg
add
sub
sub
pop
ins
sub
cmp
rcl
clc
loope
lock
inc
sub
jnp
inc
and
push
push
jp
push
or
fdiv
scas
add
jne
inc
and
sub
outs
add
lock
ret
les
outs
add
pop
push
and
jp
sbb
into
in
(bad)
mov
mov
mul
call
das
sub
pop
add
adc
mov
call
aad
in
xor
and
pop
add
jns
or
inc
sub
mov
jmp
repz
ret
test
xor
imul
sbb
push
cmp
jmp
repz
ret
test
xor
imul
sbb
push
cmp
jmp
repz
ret
test
xor
imul
sbb
push
cmp
fidivr
in
test
aad
jle
push
inc
jg
dec
and
ins
inc
pop
sbb
mov
mov
test
imul
xor
jno
je
sar
out
out
fisub
mov
adc
jg
pop
xor
pop
jae
jle
loopne
shl
mov
mov
int
shl
ins
sbb
or
sub
jl
ffreep
mov
out
stos
mov
(bad)
fdivr
xchg
add
je
inc
and
sub
push
or
cdq
mov
cmps
mov
clc
and
pusha
add
or
jp
jl
sbb
push
lods
out
sahf
test
(bad)
mov
cdq
ret
test
xor
imul
sbb
push
cmp
jmp
repz
ret
test
xor
imul
sbb
push
cmp
stos
mov
mov
test
and
popa
push
arpl
jle
push
and
mov
sahf
iret
cmps
shl
(bad)
xchg
cli
or
jbe
push
push
cmp
and
sub
jp
mov
hlt
mov
xchg
lds
nop
xchg
adc
jo
and
sub
outs
push
arpl
scas
out
(bad)
mov
mov
lahf
pusha
imul
push
and
cmp
add
loopne
cmp
shl
test
test
mov
adc
cs
sbb
sbb
add
mov
xchg
mul
rol
add
pop
add
or
shr
cmc
mov
lock
cmc
xchg
push
add
or
adc
cmp
sbb
sar
loopne
loop
shr
aam
sbb
fiadd
or
sbb
dec
and
inc
arpl
jb
jle
test
rcr
or
mov
pcmpgtb
jg
inc
xor
and
je
jne
(bad)
(bad)
xchg
loop
ret
rcr
leave
mov
mov
mov
and
cmp
push
ds
jno
xchg
jecxz
call
(bad)
cli
neg
mov
imul
adc
jb
jns
xchg
in
xchg
call
(bad)
clc
nop
cli
in
retf
adc
sbb
dec
and
xor
add
mov
test
ror
aad
lds
pop
sbb
dec
cmp
inc
xor
jns
xchg
mov
mov
mov
(bad)
jecxz
or
adc
dec
inc
cs
cs
add
xchg
mov
rcr
cmp
add
push
sub
daa
sbb
push
sub
pop
jns
into
mov
aad
nop
test
add
inc
jae
jp
dec
inc
cmp
xor
inc
pop
mov
test
movs
fsub
rcl
scas
ret
and
adc
sbb
sub
push
js
pop
fs
jns
test
shl
stos
mov
(bad)
clc
nop
(bad)
retf
inc
or
jne
inc
cmp
push
divps
push
push
push
cmp
mov
shl
mov
pop
pop
xor
outs
outs
or
push
sub
or
test
xchg
enter
mov
sbb
push
push
push
and
xor
imul
cdq
fstp
movs
les
push
outs
xor
pop
cmp
or
adc
jns
(bad)
pop
(bad)
fld1
mov
stc
mov
xor
jb
and
fs
pop
or
jmp
mov
ret
jmp
inc
push
jno
ja
push
cmp
test
xlat
aad
nop
mov
test
mov
arpl
jl
dec
and
es
aas
inc
sub
mov
lds
test
xchg
cmc
cli
add
add
inc
sub
jnp
dec
xor
push
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
addr16
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
arpl
jae
inc
sub
and
pop
add
jp
mov
call
neg
pop
cmp
sub
jbe
push
arpl
inc
mov
xor
pusha
or
sub
push
and
pop
popa
push
jecxz
jmp
call
xchg
mov
nop
cli
or
sbb
pop
mov
add
clc
mov
xor
stos
rol
mov
jmp
dec
jns
jle
dec
sub
add
shr
mov
stos
fidivr
aam
shr
adc
jo
dec
stos
xor
and
pop
add
adc
sbb
loop
mov
jmp
pusha
inc
cmp
mov
sbb
jp
test
shr
fiadd
or
ret
push
push
sub
pop
add
push
shl
mov
mov
scas
cld
cli
pusha
or
cs
ss
dec
xor
push
fs
call
stos
retf
mov
sub
add
sub
cmp
dec
xor
cli
xor
mov
rcr
and
mov
jp
jne
inc
xor
sub
aas
push
outs
bound
sar
shl
jnp
sub
ja
jne
pop
add
jg
xchg
stc
and
stos
mov
stos
shl
mov
inc
pop
or
cmp
pop
pop
cmp
xchg
jmp
xchg
cmps
xchg
retf
in
mov
add
pop
inc
pop
pop
dec
dec
cmp
add
pusha
sub
stc
lahf
test
movs
stc
(bad)
cwde
(bad)
mov
das
and
and
inc
add
(bad)
xchg
mov
scas
int
(bad)
icebp
add
dec
cmp
push
push
jns
cmps
leave
lock
mov
loope
les
and
sbb
dec
ds
sub
cs
mov
leave
mov
cld
xchg
or
je
sub
pop
push
sub
and
pop
(bad)
jmp
popf
xchg
(bad)
mov
test
in
call
jge
xor
push
xor
adc
and
mov
test
jmp
jns
es
cmp
and
inc
cmp
adc
shl
hlt
scas
test
sbb
inc
imul
(bad)
or
in
stc
test
scas
xlat
scas
in
cmc
mov
sub
inc
xor
cmp
sub
in
movs
mov
test
loopne
push
aas
adc
jns
xor
add
ja
pop
gs
stc
call
mov
movs
xchg
xor
xor
dec
fnsave
pop
xor
dec
adc
xchg
(bad)
(bad)
retf
fbstp
adc
pushf
inc
pop
sub
aam
rcl
into
loopne
lock
jb
test
inc
mov
jb
dec
bound
and
lods
stos
xor
add
sbb
in
sub
pop
pop
je
xchg
ror
ins
dec
xchg
stos
xor
in
std
jp
cwde
int3
mov
in
mov
adc
or
dec
sbb
inc
shr
in
fild
loopne
aam
fisub
dec
add
test
push
add
mov
and
(bad)
retf
inc
aaa
leave
cmp
or
js
punpckldq
xor
lock
jo
cli
cmp
cmc
fsub
ficomp
xor
push
fild
stos
dec
daa
retf
cwde
or
xor
gs
push
add
loopne
mov
pop
js
adc
push
dec
xchg
cli
mov
mov
daa
cdq
xor
bound
xor
push
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
pusha
or
inc
sub
and
pop
add
jp
mov
call
mov
sub
cli
int3
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
ret
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
(bad)
clc
jb
inc
fcom
sub
inc
retf
addr16
pop
ret
imul
sbb
sbb
call
and
adc
ret
dec
mov
pusha
xchg
or
adc
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
daa
mov
or
ins
mov
inc
pusha
popa
fidivr
imul
pop
lds
jae
sub
or
std
gs
adc
ins
js
stos
dec
xchg
call
in
loopne
xchg
xchg
out
repnz
scas
js
loop
cdq
cs
out
jae
dec
or
sub
scas
xor
psubusb
sahf
scas
mov
out
inc
xchg
mov
jnp
sbb
test
fcom
jb
push
je
ins
repnz
mov
inc
pop
or
test
sar
push
or
cmp
loopne
movs
pop
jbe
push
cmp
(bad)
lock
mov
cli
loopne
pop
push
push
inc
inc
int
add
inc
jo
jns
or
mov
sbb
or
adc
fisttp
js
clc
lahf
ror
or
hlt
in
xor
adc
mov
(bad)
in
(bad)
nop
mov
cmp
(bad)
mov
jne
movs
xor
push
aaa
jno
int
mov
push
cmc
repnz
ret
adc
sub
cmp
mov
(bad)
cmp
pop
mov
ret
aad
mov
sub
call
out
clc
arpl
cmps
cli
int
inc
jl
retf
imul
pop
mov
sub
cmps
jb
adc
lods
cmp
addr16
loop
and
sbb
cmp
jge
push
js
jo
call
in
xor
mov
cmp
cli
pop
jg
out
pop
and
clc
push
enter
stos
add
mov
xchg
pop
rol
pop
pop
mov
loop
loop
bound
push
enter
in
ret
adc
repz
pop
nop
mov
sbb
add
inc
int
adc
adc
xrelease
or
rol
cmps
mov
cmp
jb
mov
cmp
inc
into
fld
cdq
stos
add
mov
ret
cli
call
out
xor
adc
xchg
in
(bad)
ret
jo
je
xchg
leave
ds
fnsave
adc
popf
retf
scas
push
mov
mov
pusha
aaa
ret
push
int
call
cs
arpl
lock
pop
pop
into
bound
lods
(bad)
in
jne
pop
adc
add
push
mov
ins
in
test
mov
test
repz
mov
jns
aas
xlat
aad
mov
cmp
or
loop
ja
lea
jno
jl
mov
dec
push
pop
mov
pop
out
test
popa
mov
push
push
push
jle
test
(bad)
adc
pushf
xchg
fwait
dec
pop
cmp
neg
and
into
and
ja
std
adc
test
loopne
mov
iret
sbb
jmp
inc
inc
into
fsub
sub
loop
ret
push
jmp
sbb
arpl
push
mov
inc
int
adc
clc
and
sbb
sub
xchg
inc
sub
fisttp
add
adc
mov
push
mov
adc
bound
gs
shl
cli
call
ds
fimul
pop
hlt
push
add
xchg
or
mov
popa
add
daa
sub
adc
sub
jge
pop
ror
out
push
addr16
stc
arpl
sbb
and
std
xor
adc
mov
hlt
sub
in
cmp
aam
sbb
push
stos
or
das
push
xchg
sahf
call
mov
dec
xchg
dec
pop
sub
sub
retf
dec
xor
push
scas
inc
and
add
mov
ret
push
xor
jge
xchg
mov
jmp
lahf
addr16
stos
dec
outs
mov
jge
cdq
xchg
dec
fs
jnp
sbb
neg
pop
push
push
inc
adc
or
inc
mov
jle
mov
les
inc
mov
push
push
lea
dec
imul
ss
adc
call
lahf
movs
mov
mov
add
les
imul
rcr
xchg
xchg
pusha
daa
mov
add
test
mov
jbe
xchg
sub
pop
jge
in
xchg
outs
pusha
mov
adc
xor
xor
push
or
cmp
call
pop
or
fdivr
and
mov
push
ret
dec
xchg
stc
dec
xlat
ins
fcom
mov
gs
cmp
inc
scas
push
frstor
loope
fst
mov
sbb
pop
jne
call
shl
in
mov
cmps
adc
jge
loop
pop
jge
call
fdivrp
out
test
pop
in
clc
sbb
aad
pushf
retf
stos
jge
xlat
push
popf
cmc
mov
and
imul
pop
dec
clc
addr16
repnz
cmps
push
mov
jge
jp
movs
jge
call
fnstsw
pop
mov
repnz
push
mov
not
les
or
adc
add
cmp
mov
out
cmp
call
sbb
or
inc
repz
outs
mov
adc
pop
stc
aas
jmp
mov
sbb
and
into
in
pushf
fwait
jnp
mov
pop
or
sub
(bad)
clc
mov
push
fdiv
mov
(bad)
xchg
mov
adc
cmp
test
and
mov
call
repz
or
clc
stos
xor
xlat
push
mov
sub
add
add
add
rcr
iret
fstp
or
adc
jle
push
and
jae
sbb
stc
icebp
pop
sub
out
scas
pop
jb
add
inc
jnp
mov
xchg
sub
jmp
(bad)
cmp
sub
pop
sbb
inc
test
test
pusha
jo
(bad)
cwde
inc
mov
dec
lahf
cmp
add
sub
add
and
test
aad
(bad)
sub
ret
dec
nop
(bad)
mov
jge
hlt
jmp
lea
repz
push
add
sub
outs
mov
rcr
lods
pop
data16
test
aad
mov
pop
repnz
mov
movs
sar
xor
pusha
ss
inc
adc
repnz
cmp
mov
jbe
(bad)
mov
mov
inc
mov
scas
call
imul
adc
mov
icebp
mov
outs
inc
xchg
imul
cmp
xchg
or
dec
lods
push
into
and
pushf
rcr
mov
in
push
ret
mov
loop
jnp
cmps
sbb
mov
xor
icebp
cmp
add
inc
cwde
out
xor
jp
xchg
xlat
mov
mov
or
sub
or
mov
add
mov
mov
jne
sub
out
jl
mov
sub
cmc
test
and
fstp
xor
shl
xchg
or
fcomp
and
push
(bad)
adc
xor
dec
dec
stos
mov
ds
aam
leave
data16
jb
daa
push
push
add
cwde
in
cdq
sbb
push
mov
sub
inc
jo
or
dec
lods
loope
fs
push
adc
mov
(bad)
or
jns
inc
outs
pop
popf
repz
sbb
in
pop
jnp
cmc
out
add
adc
outs
loope
mov
fiadd
inc
call
dec
repnz
aam
mov
outs
or
xchg
pushf
push
sti
das
xor
stos
mov
inc
daa
xor
inc
fimul
cdq
xchg
ror
ins
inc
call
aaa
push
mov
mov
js
lods
std
cwde
js
and
jns
retf
shl
les
jnp
popa
dec
mov
out
fisub
imul
push
(bad)
pop
cmps
dec
mov
mov
pop
xchg
test
retf
pop
shr
int
pop
addr16
popa
xchg
repnz
jmp
xor
and
cmc
sbb
pop
ror
lock
push
shl
push
ret
cdq
ins
stos
and
lock
add
adc
pop
sbb
repnz
repz
sub
ret
(bad)
cmp
pop
data16
imul
cmp
scas
int
or
sbb
repz
(bad)
mov
adc
in
test
popa
leave
lea
(bad)
leave
jns
inc
ret
adc
push
int
xchg
mov
add
push
push
test
popa
mov
jmp
popa
inc
pop
inc
mov
jno
retf
jae
mov
sahf
ss
shl
mov
(bad)
imul
dec
cmp
outs
fisttp
test
pop
lods
inc
repz
(bad)
sbb
fisubr
imul
sbb
push
mov
call
rcr
push
loope
mov
imul
xor
push
jns
mov
adc
xchg
sub
cli
xor
add
movs
xchg
enter
retf
mov
movs
pop
inc
stos
aad
mov
data16
test
add
(bad)
rcr
and
jmp
jp
leave
pop
jb
es
push
pop
fsubp
mov
xchg
pusha
xchg
cmps
(bad)
sbb
mov
xlat
add
icebp
jmp
lea
push
mov
test
sub
cmp
mov
jmp
lods
sub
fwait
mov
sub
mov
andnps
add
mov
or
outs
int
mov
or
mul
mov
adc
mov
mov
dec
xor
out
test
jae
(bad)
pop
jmp
pop
sub
fiadd
scas
adc
pop
inc
mov
adc
and
pop
rol
mov
ror
inc
in
xor
dec
sub
adc
or
sti
and
shl
fmul
js
jecxz
push
sbb
jae
call
loope
jg
std
cwde
fld
push
push
dec
sub
sbb
sbb
sbb
and
push
(bad)
mov
ret
sbb
sbb
aas
jmp
bound
mov
cs
test
leave
jecxz
loop
mov
dec
sbb
sub
fsubp
pop
xchg
or
add
hlt
fadd
mov
ret
sbb
mov
mov
lock
sub
mov
int
sets
cmc
mov
bnd
pop
mov
jbe
je
js
sbb
push
sahf
stc
mov
call
scas
int
mov
dec
sbb
mov
scas
mov
inc
jo
push
fucomip
retf
mov
xchg
pop
pop
adc
icebp
mov
adc
dec
outs
fnsave
inc
call
pop
(bad)
fisttp
imul
dec
pop
nop
push
das
cmp
sub
out
js
cmp
and
push
test
jno
(bad)
dec
mov
or
inc
xor
shl
mov
push
add
imul
sub
cmp
neg
outs
dec
daa
pop
mov
aaa
push
mov
cdq
int
cmp
xchg
mov
imul
jp
add
pop
and
cmp
and
jns
rcr
fwait
mov
xlat
jge
jnp
das
mov
popa
and
sbb
mov
jecxz
pop
cmps
inc
mov
mov
inc
xchg
clc
or
cmps
push
xchg
pusha
sub
rol
js
xlat
or
out
mov
inc
sbb
pop
mov
daa
retf
add
cwde
push
fbld
out
ror
popa
cmp
jg
mov
jb
sbb
mov
retf
and
aas
and
mov
inc
sbb
daa
test
gs
sbb
inc
retf
test
sbb
mov
cmc
cmp
adc
dec
sub
add
call
push
loope
sti
pop
fist
popf
outs
or
ror
(bad)
sti
push
ins
pop
cmp
test
pusha
and
or
push
popa
inc
fldcw
mov
dec
loopne
push
jno
repz
lock
mov
push
ret
test
out
repnz
ret
dec
pop
jge
aam
sbb
ins
mov
daa
jae
retf
icebp
push
cwde
push
outs
xchg
xor
pushf
xchg
int
cmp
pop
jge
push
or
cld
call
jl
sub
popf
lahf
clc
ins
xor
mov
neg
mov
cmp
enter
shl
or
repnz
pop
dec
mov
test
xor
movs
aaa
or
enter
in
(bad)
jo
aad
or
pushf
ret
lods
out
pop
xchg
fistp
fsubr
call
jbe
mov
out
jb
push
call
shl
sbb
inc
movs
mov
add
push
dec
test
mov
(bad)
js
cmc
xchg
or
sub
dec
jp
popf
xchg
push
push
int3
(bad)
mov
popa
int
fnstcw
dec
cmps
lods
dec
lods
enter
xchg
pop
jb
(bad)
fmul
in
push
enter
test
pop
adc
mov
push
pop
shl
add
push
das
int
call
outs
push
add
adc
pushf
jmp
ror
pop
pop
cmp
enter
cwde
jb
mov
add
xchg
dec
cld
(bad)
push
imul
xchg
fwait
popf
outs
mov
fwait
int
mov
cs
fcomp
(bad)
dec
and
mov
(bad)
das
fld
cmp
add
adc
mov
push
out
cmp
call
das
xchg
andnps
pop
mov
push
mov
mov
jmp
ror
test
jb
leave
adc
leave
pop
mov
aad
mov
shl
fwait
sbb
popa
xchg
add
mov
dec
jl
test
push
pop
add
ret
mov
cmp
test
fcom
and
pusha
mov
inc
ins
loop
or
dec
pop
jge
shl
ins
pusha
xchg
jb
push
xchg
fbstp
jmp
sub
das
cmp
loop
ins
push
and
in
xor
push
inc
aaa
addr16
mov
(bad)
repnz
add
pshufw
adc
mov
mov
push
push
mov
pop
pop
das
sub
mov
jmp
aam
sub
cli
shr
loop
push
je
lock
dec
jb
hlt
dec
push
dec
xchg
test
aas
fld
push
test
adc
out
ret
sub
movs
mov
iret
int
dec
xlat
jle
jmp
stos
sub
mov
mov
ins
bound
adc
and
stos
hlt
cmc
sar
mov
sar
(bad)
cmp
inc
sub
mov
test
int3
test
cmp
ja
nop
mov
or
or
out
cmp
jb
cmp
inc
into
icebp
(bad)
and
repnz
jbe
cmp
prefetchwt1
sbb
pop
mov
inc
mov
ins
push
sub
dec
mov
dec
xchg
test
mov
test
ja
add
xor
ret
xor
xor
mov
iret
aad
sahf
and
aam
loop
jg
xchg
rol
mov
pop
xchg
hlt
out
aad
mov
fidivr
rol
scas
and
push
mov
jge
xchg
or
mov
fisttp
mov
adc
in
shl
xor
lea
pop
stc
gs
ss
daa
push
xlat
adc
mov
mov
movs
scas
xchg
mov
pop
mov
cli
mov
xor
dec
or
lds
je
loop
ins
in
mov
jb
iret
sti
pop
enter
mov
outs
and
cmp
xor
sbb
scas
addr16
or
fisubr
ja
cmp
jne
mov
sbb
sbb
pop
sahf
and
aam
mov
push
mov
out
mov
prefetcht1
ins
sbb
mov
mov
mov
mov
dec
stc
sub
pop
xchg
dec
movs
aad
icebp
mov
mov
test
lods
push
add
enter
pop
cmp
dec
jge
push
cmp
aaa
call
jo
int3
test
cli
in
pusha
and
cmp
mov
xlat
jg
int
popf
adc
enter
and
sub
imul
movs
jle
ret
neg
xor
test
adc
punpckhbw
sub
jnp
sbb
test
in
dec
xchg
fst
cdq
add
push
mov
cmps
das
dec
sub
sub
gs
cmc
xor
sbb
mov
out
out
push
div
mov
mov
loop
outs
or
lahf
fsubr
jg
xchg
mov
shl
test
inc
ror
push
outs
shl
fcmovu
jmp
sub
sbb
dec
jne
push
ins
lea
int
call
scas
inc
mov
pusha
inc
fmul
push
scas
jg
push
fldcw
pop
mov
mov
jae
into
push
ret
bound
test
ret
push
and
mov
div
push
mov
and
mov
fisubr
mov
or
jno
xchg
into
adc
add
test
push
pop
add
repz
sbb
fcomi
fld
lods
add
inc
(bad)
jo
fsub
aad
or
call
mov
inc
mov
xchg
addr16
inc
fst
pusha
and
icebp
int3
add
lock
rcr
iret
jge
mov
push
enter
jmp
fstp
sbb
adc
loop
push
mov
movs
add
pop
jg
cmovb
mov
ret
xchg
push
retf
adc
push
and
dec
std
fs
add
jo
in
sahf
shl
push
xchg
ins
mov
jae
cwde
jns
or
outs
mov
mov
fcmovb
mov
dec
and
push
call
pusha
push
mov
retf
mov
dec
push
mov
je
iret
inc
lahf
loope
scas
aas
pop
or
hlt
xor
in
ins
mov
in
cmps
sbb
fisubr
sahf
nop
(bad)
inc
push
lods
fnsave
lea
loop
sbb
pop
sub
js
or
call
(bad)
mov
mul
repnz
das
sub
xchg
mov
mov
lods
stos
push
scas
aaa
fmulp
ja
push
enter
test
scas
cmp
jge
pushf
and
test
lea
push
scas
fsave
in
sub
js
scas
ret
mov
(bad)
cmps
adc
into
loopne
add
gs
jns
cwde
(bad)
(bad)
or
mov
enter
mov
bound
sub
mov
jae
sbb
sbb
sub
test
jecxz
push
push
ins
addr16
lahf
icebp
push
addr16
shr
mov
pop
shl
dec
jne
xchg
cdq
push
cmp
xor
imul
sub
jno
inc
fs
inc
repnz
loop
mov
adc
and
inc
aam
inc
jecxz
inc
lods
retf
inc
fwait
push
loop
or
ins
jnp
arpl
mov
fnclex
xchg
addr16
sahf
and
ficom
mov
push
push
icebp
test
daa
enter
and
xchg
push
dec
imul
dec
xlat
fist
sbb
dec
scas
pop
push
adc
mov
mov
inc
pop
(bad)
pop
jne
lds
cdq
add
test
rol
sub
fild
jnp
mov
mov
movs
xlat
pop
outs
hlt
popf
mov
fst
mov
push
inc
jge
fwait
sbb
rcr
mov
xor
adc
sbb
mov
jge
jg
inc
cwde
adc
xchg
scas
mov
or
stc
sub
push
add
xor
and
xchg
test
sub
jecxz
arpl
daa
add
sbb
adc
sub
int
push
in
pop
(bad)
je
sbb
cmc
(bad)
jmp
mov
jb
sbb
fcom
xor
dec
mov
js
xor
xor
mov
sub
and
cdq
xchg
ja
js
pop
cmp
cmp
sub
sbb
mov
in
mov
xchg
fdiv
xor
fwait
add
xchg
inc
xchg
cmp
ins
inc
pop
sub
(bad)
mov
inc
pop
sahf
push
imul
jb
jno
repnz
and
retf
in
repnz
push
mov
lds
rcr
adc
or
jno
popa
pop
dec
fxch
jl
and
adc
loop
shl
xchg
cmps
sub
xchg
(bad)
xchg
sti
das
pushf
stos
rcr
enter
test
jl
dec
call
mov
jbe
jne
test
xor
aaa
jmp
pop
loope
inc
pop
push
adc
jb
test
or
sub
jns
xor
int
cmp
in
sub
ins
adc
inc
retf
push
sbb
cld
inc
xor
adc
loope
sbb
and
loop
repz
xchg
scas
int3
mov
dec
rol
dec
pusha
push
inc
in
push
ja
int3
pop
push
cmc
lahf
jne
mov
retf
dec
jne
dec
rol
cli
popf
pop
pusha
ds
arpl
fnstsw
loop
js
xlat
sbb
lds
push
ins
sti
jmp
fwait
mov
repnz
mov
mov
ror
or
loop
rcr
mov
pop
and
call
sub
pop
std
mov
mov
push
fwait
xchg
add
in
mov
add
test
pop
imul
sub
xchg
dec
pushf
push
mov
sbb
sub
stc
sti
in
fwait
push
fst
fisub
mov
cmp
mov
sub
fcom
(bad)
ret
ds
stos
xchg
lods
xor
inc
inc
jne
adc
loop
jns
ret
add
push
cwde
sub
fcomp
inc
outs
lock
inc
mov
repnz
(bad)
(bad)
and
push
xchg
add
jl
call
mov
push
xor
ret
mov
jne
stos
sub
out
xor
sub
pop
or
shl
mov
popf
or
or
sub
jmp
add
mov
jbe
mov
loop
imul
sti
cmps
mov
cmp
sub
sbb
xlat
cmps
cld
push
fidivr
inc
ret
cld
ror
mov
ffree
fbstp
stos
sub
movs
and
mov
popf
add
ja
cmp
add
jg
or
pushf
popa
sar
jg
push
push
mov
sbb
arpl
push
inc
and
dec
js
adc
jnp
(bad)
cdq
push
out
cmp
ins
jne
xchg
rcl
addr16
in
xchg
inc
int
pop
jg
mov
leave
loope
ins
out
mov
(bad)
call
mov
cwde
cmp
push
das
push
xchg
cmp
icebp
sti
xlat
fst
mov
stos
push
push
dec
popa
xor
inc
nop
cmps
adc
imul
pop
repnz
ins
sbb
popf
in
out
stos
(bad)
push
mov
in
add
lahf
sbb
push
mov
inc
xchg
xchg
sub
jmp
fsubr
inc
test
std
inc
cwde
inc
js
sbb
ror
fadd
and
push
jb
jg
inc
movs
adc
cdq
add
pop
out
movs
(bad)
in
or
or
fistp
sbb
int
not
lahf
add
sub
cmps
cmp
daa
dec
xchg
clc
jp
xlat
cmp
daa
mov
and
mov
ja
pop
mov
sub
idiv
mov
loopne
push
imul
xor
sub
(bad)
cwde
ds
ja
jb
pop
das
and
icebp
imul
fbld
scas
mov
and
imul
xor
loope
test
out
dec
ins
test
xchg
cmp
mov
sbb
jae
jae
sbb
lods
xchg
and
call
mov
loop
push
stos
retf
mov
sbb
or
jb
inc
popf
xchg
rcl
xor
mov
push
into
rcl
ret
push
jne
mov
mov
dec
pop
retf
and
cmp
xor
pop
dec
cwde
mov
xchg
or
into
mov
rol
xlat
stos
dec
aam
jmp
or
popa
shr
sub
fnstcw
fwait
push
ds
shl
jle
jmp
fwait
ror
push
fcmovne
outs
push
or
icebp
fabs
cmp
test
mov
jmp
fst
and
mov
std
adc
ret
stos
inc
pop
jmp
mov
inc
jae
imul
adc
(bad)
push
test
pusha
imul
cmps
fs
sar
and
sub
fcmovne
sub
xor
pop
cwde
xor
stos
pop
ror
rol
sbb
int3
jmp
push
sub
jmp
inc
repnz
mov
in
and
mov
or
and
je
fwait
inc
retf
clc
push
cmp
test
cld
icebp
jae
outs
fwait
ins
shr
daa
arpl
daa
fxch
adc
inc
lods
jbe
and
addr16
loop
cwde
loope
cmps
cli
and
jb
sub
push
add
and
js
mov
test
dec
idiv
sbb
loopne
loopne
fdivr
into
add
scas
test
stos
mov
sub
xchg
mov
lea
pop
sub
ret
adc
lahf
mov
push
fcomp
fs
stos
fst
test
cdq
data16
cmps
das
or
or
test
jnp
and
and
mov
mov
pop
lahf
ret
test
dec
xchg
jnp
jmp
xor
lea
std
push
or
mov
ret
pop
outs
dec
mov
mov
push
mov
in
je
xchg
out
cmp
jge
loope
out
iret
pop
jmp
mov
and
retf
mov
aad
mov
shl
das
clc
sar
in
mov
lock
mov
pop
xchg
dec
lods
retf
jb
js
push
dec
repnz
ss
stos
mov
adc
ret
pop
das
jge
xlat
push
xchg
mov
retf
in
cmps
xor
mov
test
loope
out
or
mov
fwait
aas
fstp
mov
loop
repnz
mov
xchg
loop
nop
mov
gs
fmul
jmp
jecxz
rcr
adc
and
out
jle
aaa
pop
sbb
ins
inc
push
in
mov
retw
pop
cmps
sbb
jge
movs
dec
(bad)
sub
fwait
enter
push
pop
dec
or
jns
retf
add
sbb
mov
cld
mov
(bad)
(bad)
adc
icebp
fs
je
sub
pop
out
test
push
xor
enter
push
cmp
add
nop
imul
cmps
pop
mov
mov
push
jmp
add
mov
lods
test
inc
arpl
xchg
mov
in
cmps
mov
xor
inc
jge
retf
xchg
sti
pushf
sub
ins
test
in
addr16
jo
add
rol
les
sbb
or
test
in
add
xor
retf
inc
mov
(bad)
imul
mov
pop
popf
stos
xor
xor
mov
add
lods
xor
mov
cmp
imul
push
cmp
mov
cld
imul
cmp
test
add
jmp
daa
fyl2x
pop
xor
add
jl
and
pop
(bad)
push
imul
and
dec
daa
push
inc
es
mov
xlat
and
repnz
sub
mov
xchg
xor
push
lahf
and
xor
sbb
pop
inc
fiadd
cmp
jmp
loope
inc
push
sti
je
jmp
cmc
mov
dec
xor
sub
loopne
bound
pop
adc
mov
cld
mov
dec
js
cmp
pop
shl
mov
js
lea
repz
xor
and
push
push
mov
xchg
push
xchg
pop
ror
sar
sub
inc
ror
xchg
stc
fiadd
out
fisttp
pushf
inc
add
jl
xor
mov
jp
mov
mov
mov
mov
sub
xor
stos
mov
mov
pop
pop
mov
xchg
fadd
or
outs
ret
in
outs
lahf
popa
or
pop
pop
xor
or
ins
call
retf
inc
inc
lock
jnp
test
dec
loop
(bad)
xchg
sbb
jae
arpl
int
test
xchg
sbb
div
pop
and
jbe
div
call
fcompp
mov
std
inc
repz
sub
jge
pop
outs
inc
mov
pop
sub
adc
dec
push
pusha
cmc
mov
mov
pushf
into
xchg
xchg
cwde
fiadd
jo
jb
jns
or
jge
stos
xlat
cmp
sbb
push
mov
jl
sub
pop
ret
(bad)
lock
pop
xlat
or
clc
push
xor
rep
int3
fwait
push
fidivr
loop
repnz
adc
(bad)
js
sub
daa
mov
scas
leave
outs
lock
shl
mov
dec
rcr
sub
dec
adc
fdiv
jmp
fld
jmp
sub
mov
sbb
arpl
(bad)
ja
dec
cwde
xchg
dec
inc
xchg
xor
iret
dec
sub
jns
push
sahf
cmp
(bad)
push
push
ja
ret
xchg
sbb
mov
jp
sbb
inc
fcom
enter
addr16
jo
inc
loop
mov
ret
mov
push
xchg
les
sti
mov
xchg
cli
mov
push
int
mov
and
jge
and
or
lea
sub
xchg
jecxz
(bad)
repnz
idiv
rcr
cmp
sub
ficomp
pop
fs
lea
jp
std
adc
les
shl
loopne
fwait
jle
dec
xlat
hlt
jb
scas
mov
push
mov
and
sar
mov
repnz
arpl
lds
jae
daa
and
or
je
dec
cmc
add
adc
imul
nop
dec
mov
inc
xchg
test
jne
xor
push
leave
sub
inc
test
retf
adc
ret
or
test
cmps
jge
pop
call
int
call
retf
loop
jns
xchg
push
sbb
cmp
pop
xchg
into
and
add
test
adc
imul
add
jge
jle
das
jno
jmp
jno
xor
add
add
pop
ret
test
sub
xlat
ficom
jns
pop
sbb
hlt
jb
xor
out
fptan
xchg
ret
sbb
or
sub
pop
and
fcmovnu
inc
bsf
cli
inc
mov
retf
mov
sbb
pop
loope
out
dec
call
(bad)
and
push
(bad)
repnz
mov
js
sbb
xchg
dec
push
(bad)
mov
sahf
(bad)
dec
and
sbb
inc
fistp
idiv
and
and
xor
nop
xlat
dec
out
inc
xlat
iret
inc
jmp
inc
(bad)
inc
sar
adc
scas
repz
or
(bad)
(bad)
xchg
fisttp
and
push
lods
cwde
jle
jg
neg
sbb
fist
sub
pop
jb
mov
cli
add
jbe
inc
fisubr
jg
cmp
in
jnp
fist
mov
daa
daa
dec
or
iret
shl
or
mov
sbb
cmp
adc
xor
and
in
std
adc
mov
xor
imul
mov
cmp
cmp
and
mov
dec
push
jo
push
aad
int
ins
mov
add
adc
cdq
cmp
jmp
add
or
jb
add
xor
inc
jmp
repnz
cwde
(bad)
dec
daa
call
jmp
inc
jle
push
push
addr16
xchg
hlt
cmp
xchg
pop
xchg
dec
loopne
shr
shl
loope
pop
xor
loop
push
aaa
(bad)
inc
outs
inc
aad
adc
cdq
jecxz
fs
out
jge
ror
nop
mov
fs
mov
add
ja
cmc
push
xor
cmp
outs
out
bound
movs
aaa
in
xor
test
push
xor
loopne
clc
pop
push
or
add
push
pusha
inc
popa
push
dec
push
lahf
push
outs
adc
sub
rcl
out
mov
ins
aad
xlat
dec
cmp
stos
stos
mov
hlt
mov
fs
xchg
mov
aam
bound
xor
sbb
jecxz
or
inc
push
in
fs
sbb
or
cmp
and
xchg
add
fild
sbb
retf
add
(bad)
mov
sub
pop
outs
jge
pop
inc
mov
fwait
jns
mov
adc
retf
cmps
das
push
test
jle
cmp
and
or
add
inc
enter
sub
dec
sbb
mov
fdivr
mov
pop
clc
xor
inc
lods
or
je
xor
lds
repnz
leave
cmps
cmp
and
xlat
and
mov
adc
cmps
mov
outs
push
in
mov
xor
shl
in
neg
fcomp
inc
test
jo
pop
adc
dec
loop
movs
mov
add
ret
lock
jb
test
leave
fsubr
leave
jno
xor
std
addr16
retf
mov
or
mov
jge
out
rcr
sbb
imul
push
or
mov
iret
xchg
ins
jne
clc
mov
mov
jns
in
pop
adc
fsub
adc
rol
lea
fsubrp
int
jmp
loop
sbb
mov
lock
adc
(bad)
call
repnz
ret
mov
mov
mov
dec
or
push
adc
into
and
mul
cmp
(bad)
pop
sub
stc
stc
sbb
mov
sbb
stos
icebp
inc
xchg
cmp
popa
mov
adc
icebp
rol
xor
sub
mov
stos
(bad)
mov
fistp
jae
adc
mov
xor
fdiv
sbb
imul
mov
push
jne
test
jle
retf
daa
push
lea
stc
mov
fs
imul
cmp
mov
gs
sbb
stc
sub
movs
bsr
ins
jg
cwde
sbb
into
push
adc
shl
inc
fst
pop
push
pop
mov
mov
adc
in
add
jae
jge
xlat
jge
add
pop
jecxz
enter
mov
mov
pop
mov
pop
cmp
pop
iret
sbb
out
sti
push
inc
sub
and
popa
fwait
mov
and
add
rcr
repz
inc
sub
pop
and
adc
inc
jmp
cld
imul
repz
mov
loope
mov
(bad)
(bad)
into
mov
aaa
je
jae
std
and
mov
pusha
push
test
sti
cmp
jge
xchg
mov
sti
sbb
mov
fiadd
loop
repnz
test
retf
icebp
mov
inc
sar
mov
retf
ret
shl
sub
ret
jmp
xchg
mov
lock
sub
mov
mov
push
dec
mov
test
gs
mov
std
leave
push
xchg
enter
outs
push
pop
lahf
pusha
and
loop
ret
call
rcl
into
arpl
movs
call
in
jno
push
enter
mov
pop
inc
mov
inc
rcr
in
(bad)
call
sar
dec
add
or
shl
sbb
xor
fwait
scas
push
dec
dec
push
cmp
nop
mov
mov
sub
mov
gs
xchg
add
addr16
in
adc
or
out
mov
ins
rcr
ins
lea
loop
pop
pop
fisttp
pop
adc
jmp
stc
and
sbb
xor
lods
jge
std
xor
lock
dec
loop
xchg
jp
and
and
(bad)
jmp
gs
sahf
clc
bound
(bad)
fst
fisttp
push
mov
cmp
mov
imul
adc
bnd
pusha
xor
in
sub
repz
and
(bad)
sub
add
ds
mov
pop
dec
mov
jno
jl
lahf
lds
mov
dec
jmp
daa
(bad)
fadd
add
mov
xchg
push
mov
out
int
jne
mov
outs
mov
cdq
test
sub
icebp
xlat
and
dec
popf
pop
mov
sub
int
std
pop
push
mov
das
xchg
loopne
lock
(bad)
fstp
sbb
loop
fild
shl
adc
xor
xchg
cdq
sbb
cmp
setge
test
jle
push
ret
lds
in
pop
(bad)
or
mov
and
div
cmp
xlat
test
cwde
push
fcomp
cmps
sar
daa
cmp
aad
dec
xchg
test
and
push
and
int
(bad)
fs
int
mov
fcmovb
arpl
xchg
not
(bad)
pop
aaa
jecxz
bound
jmp
pop
pop
lds
jae
inc
nop
stos
mul
jae
pop
cmp
scas
lods
dec
push
dec
push
call
fadd
sub
sbb
popf
test
ror
pop
aaa
mov
clc
in
std
push
shl
sub
out
dec
xlat
(bad)
jp
popf
jge
aaa
retf
clc
push
shl
xchg
ret
in
nop
bound
mov
lea
call
movs
aam
mov
push
jmp
xor
mov
pop
sbb
and
mov
rcr
pop
jmp
xlat
or
aaa
gs
popf
scas
aaa
out
shl
xor
jno
arpl
cmp
fs
dec
xlat
shl
popf
arpl
daa
out
int3
jb
mov
(bad)
addr16
ja
xchg
xchg
movs
fs
xchg
nop
xor
and
fild
cmc
out
in
lea
stos
js
sbb
xchg
imul
push
fld
pop
mov
sbb
adc
dec
jmp
push
push
leave
jmp
or
push
mul
clc
pop
sub
daa
out
test
in
repnz
cmp
(bad)
dec
stos
inc
mov
popf
mov
callw
push
repnz
clc
and
or
pop
mov
sar
pop
xchg
movs
jle
push
mov
mov
enter
push
xchg
cmc
jbe
mov
xchg
jle
add
or
es
xor
nop
sbb
xor
dec
sub
mov
mov
pop
push
scas
cmc
scas
mov
and
sbb
movs
test
rcr
xchg
or
stos
stc
cwde
inc
outs
push
push
pusha
mov
pop
dec
mov
movs
mov
push
sbb
inc
sti
call
jge
jo
add
aam
sbb
cmps
lahf
shl
clc
sbb
sbb
push
std
nop
in
mov
pop
sub
je
js
sub
lea
iret
sbb
fwait
add
inc
ficomp
arpl
mov
sbb
adc
mov
mov
lahf
mov
push
shr
pop
mov
mov
pusha
mov
adc
pop
mov
mov
movs
mov
dec
imul
and
lods
xor
adc
dec
out
fstp
sub
(bad)
sub
xlat
neg
jnp
mov
daa
daa
enter
inc
mov
addr16
icebp
cmp
stc
ror
mov
xor
adc
sbb
daa
clc
jp
test
mov
inc
dec
jmp
mov
cmp
pusha
aad
loopne
sar
out
arpl
mov
loop
fisub
cmc
rcl
sub
xor
add
cdq
loope
stos
add
or
loopne
clc
jb
add
test
inc
mov
dec
sub
arpl
lock
lea
jmp
sbb
in
aaa
mov
lahf
enter
sbb
das
(bad)
jle
inc
pop
ins
dec
movs
popf
jbe
inc
fcomp
enter
movs
jmp
inc
add
cmp
push
hlt
jp
pop
inc
pop
sahf
neg
and
cli
je
sti
push
js
add
dec
in
mov
clc
das
lea
push
shl
mov
mov
xor
int3
out
sbb
leave
shr
sub
sbb
sbb
xlat
or
inc
mov
mov
xor
push
xchg
sub
and
mov
repnz
shr
ret
popa
dec
sub
inc
xchg
fxch
outs
int
mov
or
adc
adc
jmp
neg
add
mov
dec
pop
cdq
call
cli
rcr
mov
jns
or
inc
fwait
mov
sub
call
fnstcw
add
popf
imul
dec
mov
mov
jnp
pop
ins
mov
call
(bad)
cwde
out
push
xlat
pop
push
hlt
fcomp
bound
mul
jg
inc
fwait
xchg
enter
jmp
out
or
mov
in
shr
gs
pop
std
mov
lods
cmp
pop
mov
ror
(bad)
hlt
xchg
mov
std
fisub
dec
ficom
mov
or
dec
and
mov
bound
and
aaa
scas
out
in
jmp
mov
sub
mov
or
test
xchg
lods
and
enter
imul
repnz
repnz
movs
inc
xchg
sahf
iret
and
aaa
call
addr16
cmc
adc
xor
cmc
fdivr
ins
shr
jb
mov
mov
and
cmp
fwait
mov
jmp
or
div
jae
enter
and
fucomi
or
mov
ret
push
mov
or
lods
movs
sub
cld
test
addr16
fsub
sub
mov
and
adc
fnstenv
int
cmp
sub
mov
imul
mov
test
clc
test
mov
cmc
sub
std
data16
inc
dec
out
cmp
dec
xor
fcmovnbe
dec
lea
daa
loopne
lods
popa
inc
hlt
outs
lds
adc
add
add
jns
mov
cmp
push
fstp
jecxz
sub
or
xchg
fwait
mov
mov
or
xlat
xchg
les
mov
jno
dec
cli
ucomiss
inc
cmp
lahf
shl
mov
lods
sub
xchg
mov
sbb
pop
lods
jmp
inc
sub
xchg
call
pop
inc
cmp
fisttp
jns
push
(bad)
pusha
jmp
mov
inc
push
ins
jmp
xor
fisttp
mov
adc
jle
shl
lahf
fst
xor
mov
cdq
sub
xor
icebp
inc
dec
mov
xchg
cdq
add
cmp
fstp
leave
movs
retf
cmps
pop
xor
sbb
repz
inc
dec
iret
jbe
mov
push
leave
jmp
fcmovnbe
pmulhw
data16
(bad)
xchg
xchg
cs
mov
xchg
sub
jb
inc
fist
aam
cdq
inc
jmp
mov
mov
inc
mov
imul
daa
arpl
stos
test
mov
cwde
inc
push
pop
lahf
ret
xor
shl
and
xor
retf
sbb
jmp
fcom
leave
add
repnz
test
sub
push
pop
js
mov
pop
inc
jp
xor
pop
fisttp
xchg
mul
mov
ror
mov
mov
mov
or
dec
ret
fnstsw
loop
out
dec
sbb
mov
and
movaps
mov
adc
outs
mov
adc
and
push
das
daa
or
xor
lahf
mov
xchg
xchg
push
shr
aam
les
or
stc
in
fcom
adc
in
xlat
shr
xchg
mov
add
ins
dec
adc
cld
popa
cld
pop
mov
addr16
fimul
sbb
xchg
ret
pop
add
mov
jbe
and
fisttp
sbb
mov
rol
jb
sub
aaa
cld
xor
sub
add
retf
cmc
ds
dec
je
pop
inc
xchg
pop
pop
mov
int
add
jns
ret
sar
jns
ss
xchg
mov
adc
mov
add
cmc
add
data16
mov
pop
or
hlt
dec
sbb
sub
mov
inc
and
ret
in
les
adc
in
jge
rcl
out
in
clc
pop
sbb
push
pop
into
shl
mov
xchg
das
shl
mov
popf
jne
call
adc
clc
push
mov
push
retf
xlat
call
aas
cmp
popf
sub
enter
clc
inc
adc
cwde
and
cmp
aam
sbb
mov
stc
stos
mov
inc
xchg
dec
mov
add
inc
cmps
es
imul
push
sahf
dec
xor
addr16
adc
fnsave
mov
movs
js
mov
hlt
push
sbb
retf
add
int
popa
fstp
jecxz
mov
jge
inc
fbld
pop
mov
add
adc
inc
adc
rol
jns
cmp
mov
dec
bound
mov
adc
push
sti
retf
mov
cdq
retf
mov
add
int
push
(bad)
gs
mul
stc
mov
popa
mov
adc
xor
sar
rol
mov
retf
xchg
nop
push
nop
not
mov
add
call
push
mov
cmps
xchg
clc
ds
bound
push
mov
ficomp
cld
sbb
pop
mov
or
dec
rcr
ja
and
retf
fsub
cmp
mov
mov
push
out
(bad)
jmp
or
sub
fadd
or
mov
lahf
pusha
addr16
add
sub
ret
retf
test
sbb
or
(bad)
jp
inc
cmps
adc
(bad)
xor
ja
pop
or
sbb
mov
adc
pop
and
and
push
pop
mov
inc
inc
pop
dec
mov
shr
outs
imul
(bad)
sbb
shl
retf
fldenv
mov
shl
shr
pop
rol
shr
xlat
pop
xchg
out
ja
aas
imul
enter
in
retf
mov
cmps
xchg
adc
add
or
jnp
pop
dec
push
push
cwde
retf
clc
sar
int
sub
xor
ror
in
inc
push
cdq
mul
jae
stos
fxch
dec
jecxz
mov
clc
outs
push
mov
out
sub
xchg
dec
or
(bad)
pop
daa
popf
cmp
fst
pop
enter
mov
dec
dec
jp
imul
push
popf
mov
xchg
lahf
hlt
mov
in
fbstp
cli
sub
sub
(bad)
test
popf
out
bound
imul
jmp
inc
mov
je
cmp
fisttp
movs
dec
jge
or
adc
gs
jns
popa
fwait
into
adc
xor
cmp
jg
call
mov
jns
pop
and
adc
and
repnz
stc
mov
pop
jmp
adc
inc
dec
mov
pop
fmul
xchg
in
and
gs
test
bound
enter
cmp
pop
pop
rol
call
pop
sbb
mov
out
daa
and
adc
mov
mov
jo
(bad)
mov
test
inc
int
fisubr
dec
div
je
dec
adc
cmp
test
mov
lods
in
xchg
aaa
jns
sti
ret
cwde
adc
xor
push
repnz
lock
lahf
lea
scas
xor
inc
lods
add
and
jle
data16
mov
mov
hlt
(bad)
adc
mov
push
push
leave
retf
sti
gs
mov
xchg
cmp
cmp
popa
cmps
jmp
cs
jb
sahf
aad
leave
jne
mov
mov
xchg
mov
and
icebp
stc
mov
(bad)
pop
cli
hlt
cmps
ds
mov
add
xor
push
retf
and
adc
lods
mov
inc
jle
retf
loopne
mov
popa
cli
fadd
sub
xor
aad
sbb
push
loope
pop
rcl
fxch
or
or
lods
rcr
mov
js
jo
mov
cmc
ja
cmp
xchg
cmp
jp
push
cmp
fsub
inc
pusha
jno
mov
loop
adc
cmp
cmp
or
ret
scas
aaa
in
jmp
test
ss
add
xadd
add
sbb
push
push
sub
push
lods
aaa
in
call
js
sub
stc
jp
mov
inc
adc
addr16
and
cmps
sbb
and
push
sub
pop
nop
cmp
xor
bound
cmp
mov
vxorps
inc
ja
mov
sbb
mov
push
or
imul
push
mov
and
jns
sbb
loopne
inc
cmp
outs
mov
push
enter
imul
mov
push
jp
aaa
(bad)
and
mov
leave
add
jle
jae
retf
imul
sub
mov
sbb
call
cdq
mov
in
mov
xchg
inc
fnstcw
test
cmp
or
stos
pushf
mov
test
sbb
test
arpl
inc
push
and
sti
xchg
add
aaa
and
push
ja
xchg
call
pop
cld
(bad)
js
sbb
and
adc
ret
dec
loop
sbb
xlat
or
loopne
(bad)
jge
ins
inc
js
jb
cld
fsub
ret
inc
and
inc
stc
out
jp
rcr
pop
aad
jle
dec
ret
or
fmul
fld
inc
mov
mov
sub
jno
or
cmp
sbb
enter
icebp
inc
adc
mov
sti
jns
int
adc
dec
sti
sub
push
es
mov
nop
xchg
jl
jl
test
pop
or
push
call
pop
and
ftst
mov
stc
sbb
sub
mov
retf
mov
dec
inc
ja
xor
and
std
test
pop
dec
mov
movs
aas
xlat
sbb
inc
pop
call
popf
add
sub
inc
mov
mov
les
xlat
iret
aam
dec
popf
cmp
arpl
call
shl
fild
jg
dec
ror
push
dec
pop
or
clc
mov
mov
call
in
pop
loop
repnz
mov
test
sub
sbb
hlt
pop
mov
pusha
inc
loop
hlt
shl
mov
sbb
sub
ins
push
xchg
jno
sbb
clc
or
cmp
sbb
outs
adc
test
mov
movs
or
out
cmp
call
scas
call
fimul
cmp
jge
fs
push
leave
mov
jb
adc
(bad)
xor
imul
nop
jmp
adc
aas
sub
inc
ins
pop
pusha
in
lea
inc
push
retf
push
jmp
jge
mov
lock
jl
pop
and
pop
arpl
sti
mov
movs
into
pop
mov
js
sub
ffreep
(bad)
jmp
sbb
sti
popf
pop
jae
jmp
popa
add
xchg
mov
mov
adc
movs
mov
out
mov
push
pop
mov
cmp
idiv
test
or
jno
(bad)
jb
add
fsub
inc
and
int
mov
lods
mov
shr
sbb
inc
loope
adc
mov
fcomp
mov
aam
std
lea
or
sub
stos
repnz
leave
daa
clc
stc
stos
mov
mov
(bad)
mov
test
in
mov
sbb
xchg
sbb
mov
dec
in
or
imul
fadd
jns
mov
loop
neg
mov
idiv
test
leave
fsub
enter
and
adc
fwait
cmps
and
outs
xor
or
inc
xchg
or
inc
(bad)
sub
popf
xlat
cmp
xor
(bad)
pop
in
popf
outs
jp
xchg
and
adc
fdiv
jmp
pop
sbb
daa
clc
aaa
pop
stos
sbb
mov
xor
pusha
xchg
pop
sub
jmp
xor
xlat
pop
cwde
das
mov
pop
dec
mov
mov
fwait
sahf
ss
pop
push
mov
rcr
pop
pop
fsub
push
in
cs
xchg
push
std
jo
fcom
fld
or
and
sbb
and
push
mov
mov
sbb
lods
jbe
xchg
sbb
aas
mov
push
ins
in
cmp
and
mov
dec
mov
mov
cmp
mov
xlat
aad
xchg
mul
pop
test
inc
xchg
in
retf
push
or
pop
dec
dec
mov
or
(bad)
clc
lea
mov
inc
ja
addr16
mov
fst
add
sbb
or
jge
sub
push
sbb
fwait
ret
push
out
outs
in
mov
inc
std
sar
dec
add
mov
std
fs
dec
mov
sbb
mov
jno
mov
and
xor
sbb
pop
sar
or
mov
fst
lds
imul
cwde
push
and
mov
mov
xor
push
fcom
test
xor
shl
xchg
push
and
jae
jmp
add
or
jno
jo
mov
fstp
scas
icebp
fisubr
popa
mov
and
xchg
sbb
cmp
call
fld
ret
xchg
(bad)
std
mov
dec
loop
jne
mov
aad
mov
cmp
mov
pop
loop
mov
sub
xor
push
ror
jo
aas
push
push
lods
aaa
and
jo
std
aad
ja
jne
xchg
dec
pop
xchg
je
mov
xchg
pop
push
adc
adc
mov
shl
adc
es
pop
sahf
js
neg
or
call
and
add
mov
xchg
mov
sbb
cmp
shl
add
std
int
into
out
push
into
jecxz
mov
ret
scas
mov
mov
das
push
fwait
add
ins
pop
enter
out
mov
jmp
cmp
jge
xlat
jge
in
call
out
ja
ficomp
repnz
fs
call
ja
popa
add
test
mov
and
and
xor
repnz
xchg
leave
bound
gs
xchg
lods
sahf
test
cwde
pop
ja
jae
jge
dec
sub
aam
fdivrp
imul
pop
lea
popf
mov
sub
mov
add
inc
cmps
es
dec
imul
xor
xor
jno
xor
js
sub
mov
jl
loopne
jb
sub
shl
repz
in
int3
fnsave
pop
movs
cmp
popa
mov
sub
cld
sub
inc
push
mov
sti
pop
mov
sahf
sub
mov
repz
lea
ins
loopne
bound
cmp
inc
aad
ret
enter
xchg
xor
jmp
xchg
mov
in
mov
add
test
fwait
pushf
pop
test
pop
cmp
or
test
pop
stc
mov
imul
cdq
push
xchg
outs
or
stc
ret
stos
clc
fld
xor
pop
and
inc
sbb
out
mov
xor
retf
xor
daa
push
inc
and
int
add
mov
(bad)
push
mov
hlt
clc
jne
clc
jb
xor
jae
add
pop
or
movs
aad
dec
loopne
pop
es
and
push
cmp
call
inc
pop
push
xor
or
ror
rcr
les
sbb
stos
or
ins
ret
aad
fbld
cmps
ds
sub
not
into
out
cwde
mov
xchg
adc
test
ja
push
mov
xor
dec
fs
call
and
nop
leave
xchg
mov
scas
dec
and
jo
push
addr16
retf
or
retf
out
mov
sub
in
mov
sbb
push
ficom
cwde
scas
(bad)
outs
sub
mov
mov
loope
(bad)
sbb
mov
and
js
imul
ret
push
mov
mov
popf
clc
call
xor
fsubrp
and
stos
sub
sbb
lds
jmp
nop/reserved
das
clc
jb
push
fsubr
enter
imul
cmp
into
ret
dec
dec
mov
push
dec
shr
loop
addr16
imul
jmp
repnz
inc
xor
mov
cmp
push
scas
test
test
and
adc
pusha
loopne
xor
dec
das
cs
jp
sbb
mov
add
test
push
mov
xchg
or
cmp
add
and
pop
jb
leave
and
push
int3
xor
xor
jecxz
aad
ret
mov
sub
sbb
mov
xchg
test
or
retf
in
fsubr
(bad)
jge
mov
popf
ror
and
imul
repnz
(bad)
or
mov
dec
dec
xlat
xchg
mov
sbb
cmp
jmp
xchg
iret
loop
pop
stos
xchg
sbb
fdivr
jb
div
or
and
std
inc
test
call
rol
xor
pusha
bound
(bad)
call
pop
lds
in
mov
cli
mov
sub
jmp
and
mov
imul
xchg
mov
pop
mov
clc
push
xor
inc
push
jp
fmul
jne
into
and
cmp
cdq
add
call
mov
loope
or
pushf
ror
js
push
dec
movs
pop
dec
cmps
xor
add
xchg
out
mov
stc
sub
pop
(bad)
retf
xor
push
dec
xor
cwde
adc
jmp
jae
stc
sub
push
int3
loop
mov
je
js
fs
rcl
pop
xlat
or
stos
or
neg
dec
test
adc
dec
rol
sbb
add
mov
popa
mov
xor
xchg
mov
sbb
jno
retf
adc
xor
or
and
dec
and
xchg
int
js
xchg
mov
mov
sub
jne
mov
loope
stos
jmp
stos
mov
out
cmp
or
sahf
sub
cli
aas
into
add
ror
cmp
popa
cmps
jbe
jmp
call
mov
fstp
cmp
mov
ret
jne
popa
inc
lea
ss
mov
loop
or
mov
or
mov
and
mov
add
shl
stos
ins
rcr
push
xchg
xlat
fstp
stos
push
addr16
pop
ja
xchg
inc
cmps
adc
mov
in
sbb
inc
xchg
jns
fnstsw
add
js
pop
xchg
and
jno
add
les
pop
and
cmp
cmp
or
mov
push
or
pop
sbb
jb
pusha
mov
aas
ds
cmp
data16
dec
xor
xor
mov
mov
adc
add
bound
movs
inc
fdivr
frstor
add
(bad)
loop
shr
nop
or
dec
loope
mov
or
shl
xor
xchg
sbb
or
mov
adc
sbb
pop
clc
cmp
call
clc
jb
retf
cmp
and
loop
sbb
sbb
aas
sub
pop
jle
bound
je
stos
push
js
and
push
push
xor
loop
jg
icebp
cdq
sub
inc
mov
jmp
inc
pusha
dec
xor
jl
xchg
mov
dec
pop
or
sbb
mov
inc
fldenv
test
dec
stc
jns
ret
mov
loop
jle
jb
pop
ds
inc
call
push
addr16
inc
sbb
adc
loop
inc
push
xchg
dec
xor
jb
inc
clc
popa
and
mov
dec
je
jp
cmp
add
pop
sub
outs
mov
mov
xor
(bad)
in
(bad)
jns
js
outs
loop
mov
mov
pop
pop
mov
xchg
and
ss
lahf
ja
nop
call
mov
call
out
pop
jno
pop
jno
imul
cmp
add
iret
xchg
mov
push
cmp
rol
push
xor
mov
push
fisttp
or
cdq
push
shr
dec
cli
mov
push
cmp
lea
xor
jmp
add
ins
jae
je
dec
mov
adc
mov
les
dec
cmp
nop
and
jmp
inc
clc
call
lods
retf
cwde
sbb
add
dec
fdivr
stos
rcl
call
and
jp
mov
imul
and
in
push
call
loope
je
inc
adc
add
xchg
jns
mov
xor
pop
loopne
jmp
popa
jnp
inc
mov
ja
cmp
sbb
jae
sub
xchg
sbb
add
icebp
push
pop
cwde
or
mov
inc
xor
sub
ins
or
push
cld
sahf
(bad)
mov
mov
rcr
mov
sbb
sub
test
xchg
adc
outs
xchg
sbb
inc
rcr
or
fwait
in
mov
xchg
mov
jns
mov
sub
sub
repnz
fadd
add
nop
xor
pop
js
imul
add
ins
dec
jmp
lock
popf
inc
jb
leave
fcom
imul
xchg
push
pop
inc
xlat
cmp
pop
inc
pop
sub
xchg
int
std
cdq
in
sti
mov
add
(bad)
mov
sbb
cli
mov
movs
shr
mov
xor
cmps
lods
cs
shl
ins
jb
ret
pop
das
movs
retf
fdiv
(bad)
push
pop
push
pusha
sbb
pop
push
dec
sbb
fcom
out
pop
ins
hlt
in
jnp
call
retf
in
mov
ret
cmp
pop
retf
push
xchg
pop
or
sub
call
and
daa
inc
imul
push
dec
cmps
outs
(bad)
push
cmp
retf
aas
adc
es
rcr
je
ficom
lods
das
mov
xchg
rcl
sahf
cmc
mov
push
leave
ja
sub
stos
add
inc
fnstsw
adc
xchg
daa
mov
dec
test
mov
sbb
push
and
mov
push
pop
pop
(bad)
mov
lahf
test
js
rol
push
xor
arpl
xlat
loopne
sbb
add
inc
xor
sub
fs
mov
retf
mov
sbb
inc
das
jae
stos
and
ja
not
xchg
loopne
adc
loope
pop
pop
dec
call
push
bound
cmp
popf
sti
(bad)
test
pop
ins
mov
mov
dec
mov
push
lea
sbb
lods
sti
pusha
cli
ins
test
(bad)
mov
jg
and
stc
jmp
dec
mov
adc
inc
adc
std
loope
jmp
jp
or
or
push
lods
cld
and
stc
loopne
mov
nop
movs
hlt
xor
adc
jmp
xor
and
lea
cwde
dec
dec
ins
js
stos
ret
or
jge
push
pop
or
inc
mov
mov
sti
icebp
test
cwde
push
ss
mov
add
nop
movs
dec
loopne
enter
mul
sbb
and
push
or
inc
sub
push
push
xchg
outs
cld
outs
jae
pop
dec
call
cmp
shl
cmp
jecxz
cmps
fimul
cdq
sbb
xchg
sub
inc
push
lods
lods
and
in
fdivr
repnz
sbb
loop
(bad)
sbb
mov
add
sub
push
outs
jmp
addr16
cmp
sar
xchg
mov
push
mov
lods
add
jp
lea
adc
retf
mov
or
xchg
or
aaa
clc
dec
cmp
cmp
int
mov
fnstcw
pop
adc
or
sbb
sti
jecxz
push
popa
adc
popa
(bad)
mov
jmp
icebp
and
push
cmps
out
gs
test
scas
and
and
add
and
(bad)
xor
sub
shl
test
addr16
mov
and
pop
idiv
jge
shl
xchg
mov
mov
imul
xchg
nop
jnp
mov
fcomip
xchg
(bad)
test
adc
js
addr16
or
or
cmp
rol
sar
popf
nop
lea
(bad)
cmc
mov
ja
cmp
test
stos
test
in
out
dec
popf
adc
pop
scas
call
ret
sub
mov
xchg
nop
mov
jp
fadd
out
dec
popf
or
sub
xchg
js
mov
adc
or
mov
jne
sub
icebp
ins
mov
adc
call
mov
cwde
cdq
mov
pop
test
cmps
cdq
cli
leave
mov
daa
xchg
jno
add
adc
dec
fadd
out
div
mov
add
inc
jo
jmp
dec
mov
add
movs
out
cmp
jb
mov
dec
int
inc
addr16
mov
nop
jnp
mov
push
out
test
(bad)
call
(bad)
loopne
jmp
or
mov
repnz
out
dec
mov
push
xchg
aaa
outs
xor
lahf
inc
mov
pop
mov
aas
aad
out
dec
mov
sub
cli
int
inc
cwde
stos
ja
xchg
mov
cs
mov
jp
fadd
sbb
scas
mov
(bad)
pusha
inc
and
cwde
push
dec
or
adc
jge
sar
lahf
jne
and
add
popf
int
into
addr16
dec
mov
xchg
sbb
jmp
pushf
pop
sbb
(bad)
mov
jns
retf
adc
movs
imul
nop
push
pop
ficomp
or
mov
or
cmp
sub
sub
ins
cwde
mov
xor
mov
cli
test
ja
cmp
mov
jp
int
pop
imul
add
lods
sub
inc
sbb
outs
cmp
jnp
mov
movs
sbb
popf
sbb
pop
add
mov
jmp
xor
out
jne
movs
(bad)
shl
mov
xor
inc
int
std
addr16
ja
xchg
fcom
or
mov
fwait
pop
inc
aad
inc
scas
mov
in
adc
cmps
sub
stos
xor
popf
adc
and
push
fild
jno
add
mov
mov
(bad)
dec
xlat
jge
ror
stos
xor
mov
sbb
cmps
mov
jne
gs
jnp
jmp
test
and
inc
(bad)
ins
(bad)
aad
lds
jg
cmp
stc
enter
xlat
sub
xchg
test
lock
add
push
cmps
pop
lds
push
xlat
xlat
psubusw
mov
mov
jne
jno
ja
xchg
mov
punpcklbw
mul
mov
iret
and
sbb
aad
mov
jp
aad
jo
test
lods
inc
fadd
push
xlat
addr16
loopne
xor
pop
and
dec
xlat
es
sub
inc
adc
jnp
push
jo
out
(bad)
mov
sbb
in
test
loope
pop
xchg
pop
xchg
lods
aaa
jp
fild
jl
dec
add
mov
mov
jge
ins
pushf
das
jne
int
or
or
jo
inc
pop
in
add
ret
int3
out
mov
or
mov
std
lods
enter
jmp
or
mov
jge
push
mov
pop
xchg
lods
mov
enter
dec
mov
movs
cmp
jne
movs
push
ins
test
daa
xchg
out
cli
repz
push
or
push
push
pop
push
pop
ins
movs
das
jne
int
fdiv
and
imul
push
inc
jmp
mov
out
lock
rcl
popf
jae
or
xlat
(bad)
inc
sub
ficom
mov
sbb
and
sbb
mov
fwait
add
outs
fucomi
into
addr16
ja
xchg
adc
push
ins
dec
mov
sub
cmps
inc
jg
mov
lods
or
or
dec
in
cmp
xor
sbb
enter
push
std
push
push
sti
sbb
sbb
mov
jge
xlat
cmp
ror
xchg
xchg
jmp
fcmovbe
loopne
xchg
and
jp
aas
sub
sbb
das
jae
loopne
daa
lods
or
cmp
and
fcmovbe
in
xchg
and
retf
pushf
iret
xchg
popf
add
pop
lea
andnps
jecxz
pop
sub
hlt
push
inc
mov
cmps
and
call
sbb
mov
daa
adc
and
dec
mov
push
hlt
xchg
dec
mov
mov
sbb
push
mov
fmulp
sbb
loopne
mov
ror
imul
loope
std
mov
add
inc
ret
addr16
dec
cmp
jp
sub
out
dec
out
je
add
lods
cmp
int
into
fcmovbe
in
xchg
retf
push
xchg
push
pshufw
pop
inc
scas
mov
sti
or
pop
jno
out
shr
cmp
dec
mov
mov
sub
inc
pop
push
(bad)
cwde
push
dec
mov
mov
movs
jmp
add
or
mov
add
and
movs
jmp
pop
iret
rcl
sbb
pusha
dec
adc
std
pusha
dec
cdq
mov
movs
sbb
and
ret
cmp
aaa
push
int
into
fisubr
pop
xor
push
dec
xor
into
dec
mov
daa
fbld
(bad)
lock
xor
cdq
mov
or
out
jb
sub
lods
enter
(bad)
std
fcom
sbb
mov
ret
mov
imul
pop
inc
xchg
mov
test
jno
sub
xchg
and
pop
mov
and
add
fcmovne
out
inc
repnz
addr16
ja
les
or
or
pushf
jge
call
(bad)
retf
sbb
call
nop
jnp
mov
and
clc
mov
jnp
push
cmp
imul
mov
(bad)
aas
sub
pop
inc
fiadd
lea
pop
lods
inc
(bad)
repz
or
nop
mov
hlt
fwait
sub
mov
je
sub
push
jno
jle
sbb
mov
rcr
div
sub
cli
repz
std
dec
xor
ja
add
adc
inc
out
test
lea
push
push
mov
sbb
repz
mov
dec
adc
jle
iret
fcmovnbe
sti
mov
retf
mov
and
push
cmp
inc
push
push
dec
or
push
or
jmp
bound
(bad)
aaa
outs
xor
aaa
ja
xor
cmp
out
cmp
lea
or
and
ja
cmc
xor
sbb
dec
cld
iret
xchg
xchg
dec
mov
adc
jnp
movs
(bad)
jmp
or
mov
sbb
(bad)
neg
pop
icebp
push
mov
push
jno
inc
sbb
or
sbb
movs
sbb
mov
jo
jmp
popf
jne
pop
andnps
movs
pop
cmp
retf
push
sti
or
shl
pop
sbb
or
ror
arpl
xor
mov
fmulp
mov
sub
xlat
mov
inc
lea
mov
mov
push
sti
sbb
cmps
icebp
test
jle
xor
adc
aad
mov
add
sbb
mov
cmps
popa
popa
js
push
dec
xor
imul
inc
out
clc
mov
daa
lods
and
xor
lahf
lock
mov
loopne
dec
push
dec
pop
imul
stos
nop
lods
mov
aam
fs
sbb
or
int3
repnz
sbb
pusha
outs
jp
xlat
stos
aam
enter
pop
push
adc
xchg
(bad)
jmp
sahf
dec
cmp
mov
ins
dec
mov
icebp
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
sub
sbb
call
and
adc
ret
dec
mov
sbb
mov
push
enter
test
cwde
adc
ret
dec
mov
sbb
call
and
xor
(bad)
pop
ror
cmp
sub
cld
jbe
inc
fcom
es
adc
ret
dec
mov
sbb
call
and
adc
ret
mov
cmp
jge
ins
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
pop
inc
rcl
inc
xor
loop
jmp
ret
dec
mov
sbb
call
and
adc
js
push
mov
add
call
and
in
xchg
loop
repnz
ret
dec
mov
sbb
call
cmp
adc
ret
dec
mov
sbb
call
and
or
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
(bad)
clc
jb
inc
fcom
cmp
adc
ret
dec
mov
add
pop
inc
fcom
and
adc
cmp
(bad)
stos
sub
clc
imul
fsubr
test
cwde
or
ret
mov
cmp
or
jb
inc
fmul
and
or
ret
dec
mov
sbb
call
and
adc
js
push
mov
sbb
pop
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
(bad)
clc
imul
fsubr
test
cwde
in
xchg
loop
repnz
fistp
dec
pop
cmp
or
jb
inc
fcom
and
adc
ret
mov
and
adc
jb
inc
fsubr
test
cwde
in
mov
popa
repnz
mov
sbb
(bad)
jb
inc
daa
push
enter
test
cwde
adc
js
push
mov
sbb
icebp
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
mov
cmp
or
imul
fsubr
test
cwde
or
ret
dec
mov
sbb
(bad)
clc
jb
pop
fcom
frstor
or
ret
mov
cmp
or
imul
fsubr
push
add
repnz
fistp
dec
pop
cmp
idiv
jb
mov
mov
adc
ret
dec
mov
sbb
(bad)
jb
inc
daa
dec
enter
mov
cwde
adc
js
push
mov
sbb
(bad)
clc
jb
inc
rcl
inc
xor
loop
repnz
mov
out
adc
jb
inc
fcom
and
or
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
or
ret
dec
mov
sbb
icebp
inc
fcom
and
adc
ret
dec
mov
add
call
and
adc
fistp
dec
pop
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
fistp
dec
pop
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
icebp
inc
fcom
cmp
adc
ret
mov
cmp
adc
jb
inc
fcom
and
adc
ret
dec
mov
out
or
jb
inc
fmul
and
adc
ret
dec
mov
sbb
(bad)
clc
jb
inc
fcom
and
adc
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
pop
pop
fcom
fld
push
sbb
jmp
ret
dec
mov
sbb
call
fld
mov
cwde
adc
js
jno
pop
shl
and
idiv
jb
mov
mov
adc
ret
push
mov
sbb
call
and
adc
ret
push
mov
sbb
call
and
adc
cmp
cmp
adc
jb
mov
mov
adc
js
push
pop
and
or
lea
inc
fcom
and
adc
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
mov
(bad)
dec
xlat
add
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
pop
pop
fcom
frstor
or
ret
push
mov
sbb
call
fnstsw
adc
ret
mov
cmp
mul
(bad)
call
and
adc
ret
dec
mov
sbb
pop
inc
fcom
and
adc
ret
mov
cmp
or
jb
mov
mov
adc
fistp
dec
pop
cmp
adc
jb
inc
rcl
inc
xor
sbb
pop
ror
cmp
mul
jb
pop
fcom
fnstsw
adc
ret
push
mov
sbb
call
and
adc
js
push
mov
sbb
(bad)
clc
jb
inc
fcom
and
or
ret
mov
and
or
jb
inc
fmul
and
adc
ret
dec
mov
sbb
call
and
test
cwde
adc
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
out
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
(bad)
clc
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
push
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
frstor
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
out
adc
jb
pop
fcom
frstor
or
ret
mov
cmp
or
jb
pop
fcom
fnstsw
adc
ret
mov
and
adc
jb
mov
inc
sub
loop
repnz
mov
sbb
pop
inc
fcom
and
adc
ret
push
mov
add
icebp
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
mov
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
mov
cwde
adc
js
push
mov
out
idiv
jb
mov
inc
sub
loop
repnz
mov
sbb
call
and
or
ret
dec
mov
sbb
icebp
inc
fcom
and
adc
ret
dec
mov
sbb
(bad)
clc
jb
pop
fcom
frstor
or
ret
mov
and
or
fcom
and
or
ret
mov
and
or
(bad)
call
frstor
adc
ret
dec
mov
add
call
fld
push
sbb
repnz
mov
sbb
call
and
adc
js
push
mov
sbb
(bad)
clc
jb
pop
fcom
fnstsw
in
mov
js
jno
pop
shl
jge
xchg
or
imul
fsubr
push
sbb
repnz
mov
sbb
call
and
adc
js
push
mov
sbb
call
and
adc
cmp
(bad)
stos
sub
pop
jb
inc
fcom
fnstsw
or
ret
dec
mov
sbb
(bad)
clc
jb
pop
fcom
frstor
or
ret
dec
mov
sbb
jnp
jb
mov
inc
sub
loop
repnz
fistp
dec
pop
cmp
adc
jb
pop
fcom
frstor
or
ret
mov
cmp
or
jb
mov
mov
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
push
mov
jl
loop
fwait
sbb
pop
cld
and
push
fsubr
shl
jp
popf
pop
xchg
mov
jp
outs
stc
adc
xchg
sbb
and
int
rol
jns
ins
add
push
scas
inc
fcom
addr16
adc
loop
repz
cmp
ror
shr
popf
push
call
inc
mov
adc
loop
lahf
es
cmp
or
push
in
cli
jno
or
cdq
add
inc
mov
push
int3
xchg
sbb
shr
in
jge
or
jae
sub
mov
push
mov
xor
daa
mov
ins
loope
bound
add
test
loop
repnz
dec
out
mov
out
or
sbb
sub
sub
dec
jmp
(bad)
jmp
cmps
sub
dec
(bad)
ins
out
out
pop
clc
ds
push
fdivr
cmp
or
and
dec
fisubr
push
lods
dec
adc
adc
popa
icebp
jbe
cmps
cmp
xor
js
push
aaa
mov
int3
sub
clc
inc
call
out
lods
sub
sbb
cmp
jge
jb
jno
imul
out
mov
fs
inc
fst
lods
inc
cmp
jmp
repz
fwait
inc
mov
dec
fistp
outs
fist
mov
sbb
daa
xchg
cmp
pop
icebp
dec
out
inc
xchg
inc
fdivr
and
inc
into
dec
enter
dec
mov
pusha
mov
in
jo
dec
or
cwde
and
inc
not
sbb
sub
sub
pop
icebp
dec
adc
aaa
stos
(bad)
retf
arpl
push
mov
mov
mul
shl
inc
icebp
pop
lods
adc
pop
out
lea
in
push
out
cs
sub
sbb
sbb
push
cmps
xlat
ss
pop
mov
jae
inc
jmp
mov
js
push
or
pusha
cdq
imul
fdivr
or
and
dec
rcr
pop
mov
call
inc
fld
enter
es
cmps
ja
dec
rcr
push
lods
ins
adc
or
inc
jmp
lods
outs
in
cmp
cmp
push
inc
cdq
push
test
mov
jbe
inc
cmps
enterw
add
pop
(bad)
pop
lock
bound
adc
push
ret
xchg
inc
sbb
sub
pop
lock
push
mov
xor
dec
std
jo
(bad)
sbb
dec
(bad)
pop
repnz
ret
dec
and
cmp
call
xchg
add
sbb
dec
ror
div
and
ins
mov
inc
into
adc
cmp
xchg
or
ins
shr
mov
mul
ins
out
pop
fild
add
cmp
(bad)
pop
retf
push
xor
sub
xchg
popa
call
sbb
cmp
cmp
imul
jb
xor
push
jbe
dec
out
or
and
add
bound
push
test
ins
cwde
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
ins
test
cwde
jp
loop
repnz
ret
dec
fidivr
retf
sbb
ins
add
jb
inc
mov
push
test
sbb
cmps
sub
cmp
sub
xchg
pop
call
and
pop
int
jmp
ret
sub
sbb
outs
(bad)
clc
sub
mov
jbe
adc
ret
cmp
sbb
or
and
cmp
xor
jbe
push
mov
js
push
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
push
xlat
xor
push
std
adc
xchg
aaa
mov
sub
clc
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
cmp
sbb
call
and
jae
mov
or
shr
sbb
jnp
fwait
add
bound
adc
test
pop
xchg
lods
pop
shr
(bad)
dec
mov
repz
popw
xchg
pop
enter
test
jbe
jno
sbb
loop
mov
sar
ror
imul
add
pop
enter
enter
fadd
cwde
inc
in
js
ds
aaa
mov
dec
mov
fadd
inc
lods
cmp
inc
fst
int
cwde
xor
ret
add
sbb
pop
in
sbb
call
cs
adc
ret
dec
hlt
push
repnz
xchg
or
add
push
retf
ja
adc
mov
fcomp
mov
mov
sar
fst
sbb
call
and
adc
ret
dec
mov
cmp
call
dec
fldenv
and
jno
ret
dec
mov
cmps
sub
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
pushf
ins
lods
and
add
xor
ja
xor
rcl
dec
loop
mov
retf
dec
fisttp
std
popw
xchg
push
mov
jb
add
push
test
cwde
jmpw
repnz
mov
sbb
call
and
adc
ret
cmp
sbb
or
jb
inc
fcom
and
js
cwde
dec
repnz
mov
sbb
call
and
adc
xchg
js
push
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
sbb
sub
mov
call
add
adc
loop
mov
mov
jae
or
jb
inc
mov
enter
rol
jae
loop
repnz
mov
sbb
call
and
jne
loop
repnz
mov
sbb
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
xor
loop
repnz
rcr
sbb
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
pop
rol
push
loop
repnz
mov
sbb
call
and
adc
ret
sbb
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
xchg
push
mov
sbb
jnp
clc
jb
inc
fcom
and
jbe
loop
xchg
push
mov
sbb
call
inc
mov
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
inc
pop
mov
and
mov
sbb
or
jb
inc
fcom
and
adc
ret
dec
(bad)
cmp
or
jb
inc
fcom
and
adc
ret
dec
mov
sbb
call
and
adc
ret
sbb
sbb
call
and
adc
xchg
pop
ror
cmp
or
jb
inc
mov
and
xor
loop
repnz
mov
sbb
call
and
adc
ret
dec
mov
sbb
mov
and
adc
ret
dec
repnz
or
jb
inc
fcom
jb
xor
mov
repnz
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
fnstsw
adc
ret
dec
mov
sbb
call
fnstsw
adc
ret
dec
mov
sbb
call
and
inc
mov
js
push
mov
sbb
call
and
jg
xchg
or
sbb
cmp
popa
loope
loope
or
mov
cmps
xor
inc
in
test
nop
adc
add
and
imul
lea
popf
sbb
out
push
jg
hlt
inc
in
xchg
or
and
ins
shr
sub
and
jno
sub
ss
dec
xlat
inc
in
outs
(bad)
jle
mov
inc
aad
mov
jge
or
icebp
sbb
retf
jo
jb
jne
nop
pop
repnz
mov
cmps
and
aas
xlat
inc
imul
or
out
sar
movs
push
mov
jge
or
mov
mov
jl
ja
pushw
(bad)
add
fld
stos
imul
or
and
cmp
inc
lods
jle
adc
push
in
inc
mov
mov
dec
shr
push
jmp
mov
dec
rcr
ret
(bad)
jne
and
shl
out
mov
or
adc
shl
push
mov
aad
mov
stos
inc
call
ficomp
iret
add
push
(bad)
and
sub
and
outs
mul
xchg
adc
cmp
jl
sub
pop
fdiv
sbb
retf
(bad)
fist
ds
cmp
mov
mov
mov
loop
mov
xor
jg
in
sub
lock
retf
xor
repnz
leave
and
pop
ret
or
jb
hlt
pop
in
jge
mov
sub
movs
dec
ficomp
dec
ret
push
and
shl
sub
mov
bound
sub
push
ret
(bad)
rol
loop
push
inc
int
(bad)
stc
push
cmp
call
xor
ror
cmp
test
mov
xor
es
inc
lds
mov
mov
mov
pop
dec
aad
das
repnz
jb
fisttp
mov
mov
jmp
jge
push
test
mov
jae
fisttp
push
pop
loope
mov
pop
retf
aaa
movs
inc
test
jns
dec
nop
pop
xor
add
sub
clc
mov
mov
(bad)
(bad)
cli
in
repz
stos
pop
push
sti
and
dec
fcom
jb
mov
xchg
and
push
jns
cli
outs
enter
test
cwde
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
call
and
adc
ret
dec
mov
sbb
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
sub
push
push
push
mov
mov
cmp
jbe
mov
push
push
call
push
mov
push
call
cmp
je
mov
and
test
je
call
push
call
mov
push
push
mov
push
call
mov
push
call
mov
call
mov
push
mov
push
push
push
mov
push
call
push
push
push
push
push
push
push
push
push
push
push
call
call
mov
lea
push
call
jmp
mov
push
call
mov
push
push
push
push
push
push
call
push
call
mov
mov
not
mov
mov
not
mov
jmp
call
mov
mov
push
call
push
call
and
test
je
jmp
push
push
push
push
push
push
call
mov
not
mov
push
call
mov
push
call
mov
pop
pop
pop
mov
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
mov
test
jne
test
je
push
mov
push
mov
call
push
call
add
inc
push
call
pop
xor
pop
ret
nop
nop
nop
nop
nop
nop
nop
nop
dec
jns
xchg
push
jp
or
push
idiv
outs
scas
pop
xchg
inc
ins
aaa
hlt
or
stos
data16
xchg
push
jp
or
sbb
cmp
out
retf
push
jmp
push
stos
adc
xchg
push
cmp
or
sbb
mov
ficom
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
push
xor
lock
sbb
jns
push
mov
add
call
jl
aam
(bad)
jp
or
jo
sahf
sbb
mov
pop
fiadd
scas
idiv
push
cmps
and
inc
dec
mov
adc
jg
(bad)
mov
out
(bad)
ds
xor
fs
leave
jns
fdiv
imul
pop
imul
repz
inc
mov
cmp
dec
add
fist
inc
clc
inc
or
xchg
cmc
aas
mov
dec
jbe
xchg
jbe
push
and
cli
push
(bad)
gs
fiadd
jns
dec
jbe
push
dec
idiv
push
(bad)
dec
ret
cmps
mov
ficom
scas
and
inc
push
push
ins
pop
mov
(bad)
fcomp
ret
out
add
(bad)
jecxz
mov
retf
xchg
fnstenv
loopne
fcom
data16
push
movs
jecxz
outs
ret
sbb
fs
retf
inc
or
ja
dec
sbb
je
out
cmps
cmp
jp
xchg
(bad)
pop
xchg
daa
or
out
fsqrt
xor
pop
fild
dec
or
stos
xchg
mov
xchg
out
(bad)
inc
adc
into
test
test
mov
pop
jle
pop
sub
neg
sub
sbb
fisttp
cli
mov
out
aas
xor
popf
xchg
cs
retf
mov
sbb
push
ficom
fs
mov
push
mov
inc
fst
cmp
and
jge
mov
inc
inc
sbb
aad
mov
add
mov
push
jecxz
jbe
dec
dec
sbb
fsubp
(bad)
jge
cmps
and
push
int3
inc
mov
lods
jae
mov
sti
imul
xchg
pop
mov
das
jnp
cmps
and
jno
retf
adc
push
jae
(bad)
jmp
dec
xchg
push
mov
sub
mov
xlat
jmp
mov
sbb
mov
or
sub
sub
adc
retf
cli
sbb
dec
std
jmp
inc
mov
jecxz
jnp
or
repnz
xchg
mov
retf
inc
test
jg
jne
pop
and
out
xchg
out
cmps
cmp
cmps
out
dec
ret
fcmovnbe
push
adc
leave
mov
jb
stos
scas
scas
jbe
pop
movs
adc
pop
add
xlat
push
and
repnz
das
jl
xor
test
ss
mov
and
gs
jmp
cli
push
cld
mov
xchg
lods
(bad)
xor
dec
cmp
aas
imul
call
cmps
or
jbe
xchg
stos
jecxz
mov
shr
pop
ja
lds
retf
push
addr16
leave
jbe
gs
and
mov
call
retf
cdq
sbb
fcmovnbe
lds
push
fiadd
mov
shl
inc
inc
pop
cli
cmp
mov
movs
pshufw
aaa
icebp
retf
push
jmp
or
test
aas
les
sahf
cmps
cmp
not
in
mov
mov
sub
dec
imul
mov
xchg
mov
dec
fld
sub
mov
retf
je
or
adc
or
push
pop
cwde
shl
imul
inc
or
(bad)
pop
bound
push
mov
retf
rcl
xchg
das
xchg
cmp
adc
out
jnp
clc
iret
fwait
out
arpl
push
stos
cdq
jecxz
rol
mov
or
push
ins
sbb
mov
(bad)
and
xor
pop
out
stos
cdq
clc
push
jmp
sbb
cmp
into
repz
xor
mov
push
stos
out
in
adc
xchg
mov
sbb
cmp
scas
dec
mov
fist
or
sti
stos
cmp
sub
imul
adc
push
pop
push
push
sahf
jmp
pop
xchg
cmc
test
sub
cld
mov
(bad)
and
gs
inc
sahf
cmp
fiadd
mov
add
sub
mov
cs
test
mov
iret
fwait
jmp
sbb
xor
or
cmp
outs
out
sbb
cmps
xchg
imul
stos
call
or
xor
mov
mov
clc
fstp
pop
mov
mov
add
test
xchg
pop
outs
sbb
jne
stc
and
ss
sbb
mov
xor
cmps
pop
outs
mov
aas
call
sub
leave
(bad)
xchg
std
mov
or
sub
pop
pop
dec
aad
pushf
push
push
test
add
test
sbb
call
cmp
jmp
fcmovbe
adc
or
mov
pop
cmp
jbe
imul
inc
call
mov
mov
in
movs
lds
xor
arpl
inc
jmp
ja
ficomp
imul
movs
cld
aaa
xchg
pop
sbb
mov
adc
ja
fstp
stos
movs
xchg
lods
in
ja
(bad)
lahf
ds
sbb
mul
pop
(bad)
jmp
jmp
shl
mov
test
repz
mov
pop
fidiv
mov
fldenv
add
dec
fwait
xchg
cmp
xchg
push
inc
mov
test
mov
adc
jae
xor
aad
aam
in
repz
and
out
mov
movs
daa
mov
(bad)
in
pop
xchg
xchg
pop
outs
dec
retf
dec
mov
out
pop
adc
daa
mov
mov
dec
jns
xchg
cmp
add
pop
mov
push
iret
push
jmp
inc
stos
cmps
push
or
pop
into
and
stos
not
jp
das
mov
test
add
nop
dec
and
sti
dec
fidiv
sti
retf
sbb
dec
repz
jecxz
inc
imul
push
cdq
mov
mov
(bad)
push
pop
xor
fisubr
push
daa
lds
or
cwde
cli
sbb
push
push
ins
data16
ds
add
push
push
jnp
or
imul
fild
cmps
jmp
adc
setbe
lds
addr16
aad
sti
xchg
or
push
xlat
addr16
cli
push
fld
int
test
aam
bound
jle
sub
repnz
into
call
fcom
stos
sbb
pop
jns
popf
mov
mov
(bad)
out
sti
xor
mov
add
sbb
cmp
out
addr16
or
mov
push
pop
jae
fisubr
mov
pop
cld
ret
(bad)
sub
add
fwait
out
sti
xor
adc
retf
call
les
mov
(bad)
fcom
or
call
shr
clc
xor
mov
daa
pop
xchg
cli
cmc
pop
in
push
test
lock
mov
dec
xchg
xchg
fistp
jecxz
cmp
xchg
(bad)
(bad)
mov
inc
leave
icebp
inc
jmp
mov
pop
aad
mov
nop
loop
xchg
sub
mov
out
inc
ds
sbb
mov
mov
xchg
xchg
icebp
loope
(bad)
or
(bad)
jmp
xor
and
ret
bound
out
mov
dec
sbb
sub
(bad)
retf
lahf
xchg
cmps
jmp
out
in
pop
xchg
cmp
jp
or
addr16
xor
movs
cli
and
adc
mov
adc
mov
dec
ret
test
(bad)
ficomp
jmp
add
ss
sti
pop
ror
stos
sub
or
sbb
test
stos
mov
and
fwait
leave
push
stc
test
cdq
js
out
test
add
mov
inc
pop
xchg
imul
dec
adc
sti
jge
pop
xchg
popf
mov
cli
cmc
jne
out
adc
cdq
rol
repz
xchg
int3
dec
cmp
aad
cmp
into
jmp
rcl
call
inc
in
xor
pop
outs
ficomp
data16
stos
test
jp
call
sbb
mov
ret
xor
outs
xchg
(bad)
sbb
test
scas
mov
cmps
(bad)
iret
jno
inc
imul
es
push
and
fcos
sub
mov
xor
or
push
ret
push
mov
mov
inc
lahf
jmp
fwait
inc
out
push
fild
sahf
rol
rol
(bad)
ins
push
mov
inc
sub
mov
and
std
mov
push
mov
jne
ja
mov
repnz
jne
(bad)
sub
out
mov
rcr
jecxz
aas
ret
nop
sbb
and
lahf
std
arpl
int
xor
and
mov
xchg
jle
stc
aas
push
nop
fs
lods
xchg
or
arpl
or
hlt
xor
fwait
sahf
pop
addr16
ret
mov
vphsubbw
daa
(bad)
jno
(bad)
fldcw
dec
ret
pop
jecxz
popf
repz
mov
push
lahf
gs
out
xor
iret
sahf
pop
neg
push
adc
repz
sub
clc
mov
lahf
popf
arpl
jl
sahf
push
adc
shr
dec
cmp
push
pop
mov
scas
push
xchg
into
jno
inc
jno
arpl
inc
jbe
inc
rol
adc
xchg
mov
popf
jmp
mov
jo
lahf
popa
push
cmp
jo
and
cmp
std
inc
and
(bad)
pop
ins
cmp
xchg
push
ficom
out
cs
pop
and
sub
dec
ror
data16
gs
(bad)
xchg
adc
out
xor
push
(bad)
aad
lods
cmp
push
dec
ret
fild
fist
push
jb
add
sbb
test
lahf
loope
(bad)
cmc
mov
xchg
xchg
cdq
mov
add
lahf
jmp
rcl
call
jbe
jle
outs
xchg
div
repz
mov
ret
lahf
popa
imul
jmp
repz
lock
fnsave
(bad)
sub
dec
adc
mov
pop
inc
or
push
(bad)
jmp
push
ficomp
into
sahf
cmc
jge
out
push
stos
adc
adc
retf
pop
jle
and
mov
jmp
or
fbstp
int
lea
jmp
shr
popa
sub
mov
idiv
(bad)
xor
jne
leave
lahf
add
adc
ss
retf
loope
mov
repnz
or
fimul
es
push
inc
cmp
and
push
mov
pop
cmps
mov
mov
mov
stc
lahf
int
add
or
xchg
sub
inc
push
jbe
fnstcw
mov
daa
cmps
mov
push
fs
loope
cmp
sub
sbb
bound
adc
dec
xchg
movs
mov
cmps
pop
dec
cmp
sbb
aad
cmp
mov
mov
jno
mov
shl
xchg
push
xchg
or
stc
sbb
es
mov
push
jae
mov
ds
data16
test
cs
jmp
cmp
mov
mov
cmc
xor
push
sub
push
pop
scas
or
mov
xor
movs
and
pop
add
mov
jns
push
sub
std
sub
fs
push
xor
xlat
repnz
mov
xchg
push
mov
psrlw
xor
pop
and
popf
mul
mov
xlat
or
add
inc
mov
mov
xor
cmp
mov
jmpw
adc
cmps
call
jns
cmps
or
jp
or
pop
ds
jp
fiadd
ss
dec
out
enterw
inc
data16
cmp
outs
jne
es
(bad)
ret
pushf
retf
inc
test
mov
cmp
ret
or
add
or
xchg
arpl
and
and
addr16
inc
data16
out
outs
pop
rol
cs
lods
and
xchg
and
movs
xor
sbb
mov
lahf
push
daa
and
push
dec
or
imul
lahf
out
out
arpl
(bad)
jmp
ja
add
fwait
mov
mov
retf
sub
mov
stos
adc
push
push
xor
mov
int3
rsm
sbb
sti
dec
mov
xchg
imul
fcmovnbe
push
jg
arpl
mov
mov
imul
xchg
adc
xchg
inc
add
xlat
xchg
(bad)
(bad)
sti
jb
(bad)
add
out
dec
sbb
sub
ja
push
call
add
pop
jnp
mov
or
not
dec
addr16
addr16
arpl
mov
adc
iret
test
sbb
shl
mul
cmp
sub
mov
imul
outs
inc
and
mov
xchg
cmp
and
cmps
sbb
pop
fbld
cli
dec
mov
iret
xchg
rsqrtps
(bad)
sub
push
inc
dec
ficomp
outs
inc
call
xchg
fisub
mov
(bad)
fcom
dec
add
bound
sbb
pop
pop
out
out
jp
inc
pop
pop
sub
sbb
in
stos
rcl
cmp
push
out
mov
jp
mov
sub
push
in
add
inc
xchg
gs
or
jle
pop
jbe
xchg
push
jecxz
out
into
xor
es
fucomi
or
dec
sbb
into
dec
xchg
xchg
in
or
inc
and
retf
call
or
mov
dec
sub
mov
out
push
inc
jmp
fist
mov
xchg
(bad)
xchg
or
(bad)
push
fld
int3
scas
movs
test
daa
xchg
mov
movs
sub
xchg
outs
sbb
sbb
push
ret
sbb
test
cli
dec
pop
int
xchg
jg
div
rcl
push
mov
pop
addr16
fidiv
addr16
jb
sahf
pop
aaa
cmp
mov
xchg
cmp
out
xor
cmp
test
mov
sbb
rcr
add
aaa
(bad)
cmp
sbb
and
adc
int
pop
jae
mov
sahf
neg
add
or
cmp
xor
pop
adc
stos
jno
mov
rcr
jmp
push
cmps
sub
or
fcmovbe
mov
mov
mov
popf
mov
adc
movzx
lea
(bad)
jo
in
movs
cmp
xchg
or
out
cli
bound
push
cli
cmp
mov
push
sbb
dec
cmp
in
ja
jg
dec
cli
(bad)
pop
popa
add
xor
fild
pop
shl
(bad)
daa
shr
sbb
shr
or
push
push
mov
es
mov
call
mov
push
sub
inc
ds
in
jnp
rcr
dec
scas
pop
(bad)
call
(bad)
mov
sti
push
and
dec
stos
cs
add
fmul
gs
popf
cs
cs
sub
mov
mov
(bad)
outs
sbb
test
lea
mov
inc
gs
out
(bad)
sti
jle
xlat
mov
cmc
rcl
outs
imul
ret
mov
pop
and
gs
xlat
ss
jmp
xor
adc
cmps
mov
lahf
inc
xor
imul
test
test
stc
xchg
xchg
jg
mov
stos
ja
dec
inc
adc
shr
fsub
mov
(bad)
pop
(bad)
jmp
js
cs
and
mov
bound
jbe
(bad)
in
cmps
sbb
push
fdivrp
adc
jne
lock
cld
dec
inc
bound
repz
push
cmp
push
jno
cmp
scas
mov
jmp
adc
mov
xlat
mov
push
(bad)
xchg
ret
cmps
leave
ja
mov
mov
jno
mov
cdq
scas
mov
xlat
(bad)
push
dec
test
inc
inc
and
jnp
inc
sbb
pop
pusha
dec
imul
hlt
push
(bad)
(bad)
mov
pop
mov
xor
jle
push
jmp
jnp
or
daa
inc
(bad)
sub
add
mov
or
stos
out
mov
(bad)
sub
repz
(bad)
xchg
sub
jg
jle
push
jmp
and
push
daa
call
xchg
addr16
loop
(bad)
(bad)
addr16
push
and
cli
mov
ins
in
sti
sbb
cmps
sbb
dec
in
je
cld
add
mov
jae
retf
call
in
sbb
sub
pop
sub
xor
stos
stos
mov
mov
inc
pop
xchg
lods
in
cmp
out
(bad)
imul
mov
cmp
enter
push
jmp
sti
pop
or
out
es
in
pop
jp
(bad)
jnp
mov
fwait
jmp
(bad)
call
or
jo
adc
mul
inc
xor
outs
jl
mov
push
push
inc
arpl
sub
jnp
mov
inc
ds
and
into
add
pop
mov
cmp
retf
add
adc
lahf
sbb
inc
popa
fiadd
sbb
inc
adc
bound
xchg
out
jp
outs
shr
jle
add
and
add
push
ins
and
jbe
xor
imul
push
sub
sti
or
cmp
ss
call
jns
adc
test
xchg
push
fwait
mov
inc
retf
out
mov
inc
xor
mov
movs
outs
cmps
mov
pop
mov
mov
nop
je
test
add
in
push
add
pop
push
clc
mov
or
push
push
and
xchg
(bad)
push
imul
cmps
test
pop
shr
loopne
(bad)
fadd
sub
mov
(bad)
pop
push
shr
inc
call
or
push
push
jp
pop
(bad)
xchg
(bad)
jg
cmp
(bad)
sbb
jmp
sbb
aaa
mov
les
dec
aaa
(bad)
cmc
cmp
and
bound
jmp
call
in
xchg
jg
or
xchg
repnz
pop
loopne
ds
stc
iret
pop
call
pop
sbb
xchg
shl
pop
pop
xchg
xchg
xchg
sub
xchg
cmps
call
jnp
mov
mov
lea
adc
or
mov
mov
and
je
xchg
push
outs
cmp
sub
jnp
add
xchg
jmp
inc
push
neg
pop
mov
inc
and
pushf
xchg
fisub
(bad)
int3
test
pop
aad
mov
inc
inc
inc
ret
mov
lahf
jg
fcomi
mov
mov
or
ja
neg
xchg
(bad)
lds
mov
lods
je
es
fistp
bound
and
pop
sahf
xchg
aad
mov
jne
xchg
jno
aaa
pop
mov
pop
cmp
jns
xchg
xchg
sub
pop
xchg
in
imul
xor
xor
leave
dec
mov
stc
mov
movs
sbb
outs
out
test
xchg
(bad)
sbb
jbe
fiadd
loope
push
fisub
jbe
les
add
sbb
and
push
idiv
enter
in
ss
mov
frstor
aas
jge
and
cli
mov
shl
push
scas
xchg
arpl
imul
cmp
(bad)
psrlw
adc
daa
ret
cmc
retf
shr
or
lea
push
adc
lds
and
psrlw
cmps
sub
repnz
adc
pop
daa
jg
xchg
or
push
(bad)
cmps
push
inc
test
jecxz
rol
outs
das
jb
shufps
das
test
jmp
cmp
cdq
cmp
mov
push
dec
psadbw
or
shr
leave
or
out
pandn
imul
ret
pop
sahf
bound
mov
add
pop
cs
xor
or
popa
imul
pop
stos
ror
mov
repnz
loope
xchg
pop
jg
or
mov
xchg
push
cli
sar
dec
mov
or
xor
inc
adc
popa
jno
dec
scas
push
xchg
out
xor
inc
mov
dec
add
adc
(bad)
cmp
shr
repnz
fidivr
jmp
dec
rol
push
inc
ret
retf
sbb
es
jg
fsubr
cli
pop
or
jmp
adc
jb
mov
push
add
mov
(bad)
aad
imul
fst
xchg
(bad)
mov
mov
sar
push
and
jmp
inc
mul
fcomp
xchg
mov
imul
xchg
inc
sbb
fwait
lahf
lods
iret
mov
std
adc
adc
xchg
inc
cmp
jmp
cmps
out
mov
xlat
push
mov
call
stos
mov
cdq
(bad)
popa
lods
cli
mov
mov
push
rcr
push
sub
sub
out
mov
push
push
(bad)
jmp
mov
ss
add
rcr
loope
sbb
and
addr16
push
jmp
push
xor
mov
xchg
shr
mov
sub
cmp
xchg
pop
jecxz
adc
cmp
add
gs
mov
nop
movs
xchg
loope
cmp
pop
sbb
mov
mov
jmp
sub
add
sub
aam
(bad)
aaa
jbe
cmp
aas
mov
cmc
push
sub
xor
pusha
dec
iret
out
add
pop
sbb
stc
xchg
setnp
out
jle
std
fcom
jmp
cs
inc
adc
into
or
repz
jmp
push
sub
mov
arpl
mov
fist
cmc
dec
xchg
cmps
sbb
stos
dec
mov
or
fidiv
push
call
sub
sbb
outs
ds
add
fucompp
jmp
push
mov
dec
daa
adc
pop
dec
frstor
icebp
xchg
mov
xchg
jno
and
mov
xchg
imul
rol
sbb
shl
mov
xlat
(bad)
and
xchg
loopne
or
dec
rcl
outs
sbb
pushf
xor
xor
test
inc
out
aaa
es
ret
pop
xchg
cmps
push
outs
mov
lods
fist
retf
push
push
daa
test
fcmovne
test
jbe
retf
movs
bound
jnp
cli
mov
and
jg
push
ficomp
sahf
fsubrp
mov
mov
mov
cld
pop
cli
mov
inc
shl
cmp
mov
fcmovb
mov
pop
cdq
mov
mov
stos
jp
add
(bad)
jo
and
fld
jp
stos
lods
inc
jbe
outs
dec
aam
ins
jb
cs
outs
adc
lahf
xor
inc
xor
fisttp
(bad)
xor
pop
(bad)
rcl
push
(bad)
call
push
xor
(bad)
cmp
xchg
mov
xor
in
and
es
retf
jl
jbe
leave
popa
jbe
(bad)
cmp
mov
int3
jp
or
dec
retf
(bad)
xlat
push
ds
jne
adc
push
add
retf
fwait
inc
por
fimul
mov
xor
(bad)
(bad)
push
iret
add
xchg
stos
outs
stos
sub
or
xchg
mov
std
add
das
ins
int
dec
test
clc
dec
mov
push
cmc
sbb
jmp
and
inc
in
sub
jge
push
mov
cmps
push
add
stos
sub
mov
not
xchg
jecxz
xor
(bad)
xchg
sub
jbe
add
xor
mov
call
or
xor
sub
ss
in
cmps
adc
push
mov
into
scas
xor
ds
sub
sub
lahf
(bad)
and
adc
in
jp
jbe
pop
jecxz
cmps
mov
(bad)
scas
xchg
jns
retf
mov
pop
sub
add
sahf
aas
and
retf
jmp
push
sub
jg
popa
fst
mov
push
fwait
inc
mov
ss
xchg
sub
dec
(bad)
test
push
(bad)
popa
lods
add
push
bndstx
push
(bad)
mov
fimul
test
arpl
test
mov
fwait
push
imul
fiadd
mov
mov
sbb
jg
push
mov
outs
inc
test
mov
fnstsw
lds
pop
loope
jp
or
xchg
pop
cmp
lahf
jg
bnd
popa
jbe
xor
jecxz
pop
rdpmc
in
sahf
dec
iret
pop
aad
pop
jp
xchg
or
push
pop
cli
gs
mov
xor
test
sbb
pop
sub
adc
mov
adc
mov
jle
mov
loope
jnp
shufps
jp
sub
add
jns
mov
cmp
and
aaa
cli
pop
fistp
ins
mov
retf
push
adc
jecxz
sbb
ret
xor
adc
pop
inc
push
jmp
arpl
push
das
inc
retf
in
in
sbb
sub
xchg
pop
ds
dec
cmp
inc
mov
stos
imul
out
mov
cmp
retf
sub
push
mov
rcl
inc
es
xchg
fbld
xor
mov
push
icebp
mov
lahf
data16
mov
lea
mov
stos
or
das
rol
loope
pop
inc
jmp
ss
push
mov
add
push
cld
cdq
inc
std
cmovo
outs
push
pop
push
retf
(bad)
cmp
mov
cmp
pop
fsubr
inc
pop
push
mov
cld
mov
inc
push
(bad)
outs
in
cmp
pop
mov
push
std
out
jno
add
repnz
push
push
xchg
sub
mov
add
fisub
(bad)
sbb
fadd
test
jb
xchg
add
loopne
xchg
pop
loope
repnz
mov
fiadd
push
xchg
es
cmp
dec
gs
scas
jmp
dec
out
pop
sbb
retf
sub
out
or
jb
repnz
push
inc
ds
ret
sahf
jns
loope
jb
or
clc
fnsave
mov
ret
jmp
fld
jmp
xchg
xor
and
arpl
jmp
add
fist
mov
les
cmps
jp
retf
dec
jp
fiadd
dec
xor
xchg
xor
fwait
shr
sti
mov
lds
stos
add
cwde
stos
cdq
imul
xchg
loopne
cdq
pop
push
sub
ficom
es
mov
cdq
xor
mov
jg
xchg
mov
jnp
dec
jl
lahf
pop
stos
cmp
ds
push
push
lods
mov
pop
mov
mov
jle
inc
jne
retf
ins
mov
outs
mov
push
add
call
xchg
addr16
dec
pop
inc
aad
ja
mov
add
popa
iret
inc
push
(bad)
sub
in
aas
(bad)
idiv
leave
(bad)
sbb
sub
push
iret
push
cwde
sbb
sti
outs
enter
cwde
pop
rcr
cmps
imul
pop
jbe
(bad)
enter
ss
jmp
sbb
inc
xor
mov
mov
dec
aam
jmp
test
mov
pop
rcr
dec
pop
es
stos
push
xor
imul
sub
test
out
dec
shl
shr
(bad)
sbb
outs
and
mov
sbb
pop
cmc
xchg
mov
int
add
fldenv
push
stos
adc
jns
pop
lea
push
aas
push
sbb
jecxz
xor
mov
mov
sti
jecxz
std
dec
test
cmps
or
cli
mov
pushf
inc
adc
dec
adc
scas
pusha
xor
jp
push
stos
into
pop
shl
xor
(bad)
loope
mov
mov
or
jp
push
dec
sub
mov
push
xlat
push
stc
push
getsec
mov
fucomp
out
cmp
shl
cmp
and
ds
jmp
xchg
mov
inc
rcl
mov
adc
(bad)
neg
add
and
ds
sbb
mov
ret
or
das
cmp
imul
mov
(bad)
neg
das
dec
push
(bad)
or
enter
icebp
inc
es
xchg
add
mov
rcl
fadd
retf
pop
xchg
(bad)
ins
and
xor
mov
ja
xchg
xchg
nop
pop
mov
test
add
gs
out
movs
mov
jge
lock
push
std
icebp
shl
(bad)
mov
out
scas
(bad)
add
arpl
stos
or
or
leave
dec
fucomi
outs
push
sub
cmps
sar
xor
mov
jns
sbb
or
xor
dec
loop
mov
dec
push
jae
xor
(bad)
(bad)
jmp
cwde
rcr
sub
sbb
bound
fadd
push
and
dec
pushf
jp
cmps
lea
neg
push
mov
mov
arpl
pop
mov
push
and
mov
sbb
pop
jns
cmp
cli
popa
fadd
push
out
stos
xchg
cmp
repz
pop
sub
mov
cmp
xor
push
inc
and
ficomp
cmc
xchg
fisttp
into
rcr
mov
inc
sti
mov
pop
cld
sub
cmp
inc
push
pop
pop
call
adc
cmps
clc
xchg
pop
jbe
in
dec
inc
pop
pop
jl
mov
mov
in
pop
jb
mov
in
inc
mov
jl
xchg
xchg
pop
mov
sub
mov
sar
or
gs
mul
jbe
arpl
cmp
ret
fisubr
mov
xchg
out
and
repnz
(bad)
push
inc
and
popa
xchg
jno
stos
dec
dec
pop
in
in
mov
or
dec
xchg
add
adc
push
div
rcl
fmul
mov
xor
jmp
jne
call
rcl
aaa
pop
in
in
into
cmp
(bad)
xor
jg
add
stos
repnz
push
sub
dec
into
mov
ret
(bad)
ss
and
icebp
aad
jbe
inc
cmp
and
pop
icebp
mov
ret
(bad)
fwait
lds
retf
jae
and
(bad)
outs
sahf
jae
push
jle
jecxz
bound
sbb
mov
(bad)
(bad)
adc
push
call
dec
pop
imul
pop
push
aaa
add
ficom
popa
scas
cli
mov
add
lods
cmp
(bad)
push
jp
pop
fist
mov
mov
cmp
leave
test
pop
fild
cmps
pop
xchg
sbb
or
push
jl
(bad)
div
mov
aaa
xor
pop
xchg
mov
sub
mov
xchg
mov
test
stos
cli
dec
dec
adc
call
xchg
data16
sbb
jge
(bad)
retf
lea
cmps
fstp
inc
inc
inc
gs
and
xor
xacquire
repz
daa
ja
dec
sbb
inc
cmp
ficomp
pop
aaa
mov
imul
js
dec
ficomp
cmps
mov
dec
test
push
inc
leave
fs
jnp
mov
push
daa
cmps
ret
dec
sbb
aad
jge
retf
jmp
jmp
and
imul
test
or
(bad)
cwde
inc
jmp
inc
push
cmps
inc
mov
xchg
shr
cmps
push
repz
jns
xchg
cmp
push
or
mov
push
pop
mov
add
mov
jns
xchg
mov
test
xchg
out
jne
mul
loopne
push
jae
into
pop
push
inc
and
or
into
jb
or
fisubr
and
lahf
jle
lods
fnstenv
fmul
push
add
js
movs
gs
mov
dec
or
and
cmp
jmp
push
out
je
int
cwde
push
xor
dec
movs
push
xor
mov
push
cmp
shl
lahf
sbb
es
jbe
dec
call
xchg
fld
mov
cmps
jl
(bad)
jbe
push
test
jae
dec
adc
adc
in
xchg
repz
xchg
push
mov
or
cmp
fsqrt
ret
pop
sar
inc
add
ret
pushf
xchg
xchg
and
sbb
cmps
repz
mov
mov
es
mov
or
stos
ins
call
lods
cmps
mov
xchg
sub
cmp
inc
or
test
cdq
mov
push
sub
mov
xchg
xchg
adc
mov
ds
pop
push
fidiv
xor
jp
lods
outs
dec
repz
sub
mov
xor
(bad)
mov
push
dec
jmp
jmp
repz
xchg
ret
scas
daa
ja
(bad)
mov
xchg
push
add
repnz
xor
cmc
pop
pop
pop
(bad)
sub
jb
stc
cdq
push
fld
jle
mov
xchg
call
sbb
sbb
mov
fisub
jb
aam
jb
cs
push
xor
push
push
ja
cli
pop
ret
jbe
hlt
div
imul
mov
inc
jle
retf
xchg
push
mov
test
pop
cmps
mov
add
cli
adc
jp
inc
imul
je
mov
mov
cmp
dec
mov
lds
xchg
or
in
arpl
pop
imul
imul
inc
(bad)
push
add
jne
cmp
data16
add
dec
push
fld
aad
dec
jge
fisub
xor
inc
pusha
aaa
arpl
pop
xchg
sti
test
test
adc
ss
out
push
lods
cmps
pop
mov
cmp
mov
cli
data16
jmp
adc
mov
jbe
or
aam
jmp
jmp
xchg
lods
ja
in
xor
clc
push
jmp
cmps
test
or
sbb
jae
lds
sbb
cmp
add
cmps
mov
movs
xchg
retf
mov
dec
(bad)
cmp
fcom
es
hlt
iret
fisubr
std
jae
jbe
aad
push
retf
xchg
jp
retf
dec
dec
pop
outs
daa
mov
inc
inc
push
push
addr16
je
push
adc
xor
popf
mov
pop
loopne
mov
in
jl
dec
(bad)
mov
push
push
lahf
arpl
mov
std
sub
mov
jb
pop
cmp
push
int
jae
rcr
sub
push
and
adc
cmp
pop
retf
bound
fsub
jmp
xor
icebp
cli
(bad)
out
rep
mov
frstor
lods
cs
lods
sub
xchg
(bad)
mov
(bad)
loope
sub
imul
xor
dec
retf
rcl
in
push
repnz
ret
cli
mov
sbb
sub
sub
inc
(bad)
pop
adc
xchg
mov
stos
or
adc
add
fistp
mov
inc
push
(bad)
and
jp
cmp
ja
xor
jae
xor
fild
ficomp
int3
dec
xor
inc
nop
fwait
or
data16
mov
ret
push
sub
xchg
push
fwait
lahf
es
enter
pop
scas
mov
add
cmp
sub
imul
cli
je
jne
neg
jns
leave
push
sub
(bad)
in
cmps
ins
js
stos
rcr
jmp
xchg
mov
out
sbb
sub
sbb
mov
push
adc
mov
inc
pop
or
xchg
out
pop
pop
sub
xor
jmp
cs
les
dec
shufps
js
or
loop
add
mov
jmp
inc
sub
das
aam
addr16
or
dec
cwde
sub
cwde
cli
test
add
xchg
sti
xchg
aas
in
xchg
in
ret
inc
(bad)
out
push
rcl
push
jb
stos
ins
jmp
cmps
cli
je
(bad)
sbb
sub
cmp
cmp
jmp
add
int3
mov
dec
not
sbb
and
je
sti
mov
es
jmp
test
and
jp
inc
cmp
cmp
mov
(bad)
and
and
add
add
mov
scas
xchg
cmp
dec
movhps
mov
add
pop
fs
jne
gs
and
adc
aaa
push
push
test
mov
and
sub
fist
jl
(bad)
jp
push
imul
mov
cmp
lds
(bad)
es
mov
and
fisttp
dec
xchg
ja
repz
imul
fwait
bound
cmp
mov
pop
xchg
xchg
addr16
or
xchg
movs
popa
das
test
iret
push
lahf
lods
sahf
hlt
bound
out
fsubr
mov
pop
push
jp
dec
addr16
and
mov
cmp
inc
push
out
jae
push
call
inc
pop
imul
les
div
or
mov
jge
dec
ret
xlat
sbb
repnz
xchg
pop
mov
retf
sub
stos
mov
ins
call
xchg
cmp
aad
cmp
mov
sub
cli
push
cmp
mov
or
jno
mov
emms
xchg
fwait
xchg
mov
cwde
jmp
iret
adc
cmp
or
jp
retf
sbb
push
or
push
mov
mov
js
pop
stos
daa
cdq
loop
(bad)
les
mov
int
fwait
sub
aaa
xor
fnstcw
dec
mov
mov
xchg
out
mov
repz
(bad)
cmps
repz
inc
add
inc
enter
stos
cmps
xor
xchg
xchg
retf
mov
mov
out
loop
stos
mov
test
shl
push
daa
addr16
repnz
push
addr16
inc
mov
cs
sbb
out
xchg
es
cmps
daa
(bad)
push
(bad)
jmp
gs
das
and
movs
pop
push
jp
lods
xor
mov
stc
pop
push
jmp
inc
aam
jnp
shl
jle
cmc
idiv
test
ja
(bad)
mov
push
and
mov
cli
and
(bad)
enter
shr
push
dec
rsm
aad
sti
jnp
pop
fidivr
arpl
test
inc
jns
adc
cmps
jo
sbb
in
cmps
xchg
cmp
push
mov
adc
daa
or
mov
movs
jle
pop
mov
scas
push
xchg
sbb
or
into
lods
mov
daa
popa
out
dec
fst
dec
xchg
in
jge
cmp
cmp
sbb
mov
pop
mov
aaa
mov
mov
push
cmp
cmp
xchg
dec
xchg
jne
(bad)
(bad)
xor
mov
adc
cdq
(bad)
std
mov
imul
(bad)
dec
or
inc
out
scas
jmp
gs
out
xor
stos
mov
pop
sbb
cs
sub
cld
aaa
pop
sbb
adc
push
pop
inc
push
mov
and
stos
cmps
icebp
mov
(bad)
adc
int
push
inc
add
call
add
push
xlat
xchg
jb
js
sbb
cmp
sub
and
rcl
inc
or
jbe
es
ss
scas
cdq
pop
stos
mov
mov
jb
dec
xchg
int
sub
jnp
bound
clc
sbb
add
adc
xchg
push
push
repz
sar
sub
dec
mov
inc
push
jmp
rcr
cs
sbb
push
bndldx
sbb
or
(bad)
cmp
(bad)
mov
fninit
mov
push
mov
inc
bound
out
es
xor
cmp
daa
cmps
aaa
and
sub
idiv
pop
out
jbe
push
jmp
push
call
and
mov
(bad)
unpcklps
mov
jmp
push
stos
jmp
jne
fmul
bound
fistp
out
cmps
lea
dec
movs
xor
div
das
sahf
sbb
cdq
pop
(bad)
and
xchg
adc
dec
repnz
test
mov
and
sbb
je
xor
and
inc
adc
adc
mov
popf
mov
outs
jp
bound
fcom
daa
(bad)
jg
test
popf
arpl
add
adc
mov
add
shl
jecxz
xor
(bad)
push
xchg
shr
adc
mov
loope
aaa
repz
mov
aad
imul
out
add
mov
bound
icebp
dec
pop
add
mul
popa
cmp
enter
imul
mov
call
mov
adc
mov
adc
inc
stos
(bad)
pop
leave
push
mov
retf
(bad)
sbb
mov
or
push
out
leave
add
cmps
call
fbld
mov
pop
xchg
xchg
ds
retf
push
js
stos
fiadd
scas
int3
rcl
or
cmp
test
xchg
ja
retf
jle
daa
icebp
ror
mov
test
inc
or
das
test
dec
push
cmps
sub
div
es
test
in
xor
cmp
sbb
jg
ins
(bad)
mov
inc
inc
push
test
xor
fild
outs
push
and
add
sbb
mov
push
fbld
scas
jae
jb
adc
push
call
loope
xchg
lea
or
lahf
rol
mov
push
stos
mov
jbe
or
inc
or
pop
pop
mov
push
fist
xor
mov
ds
or
jmp
xchg
xchg
or
nop
dec
pop
outs
push
lds
ds
xor
es
ss
not
xchg
xor
xchg
(bad)
aas
imul
xor
jb
icebp
sub
and
jns
dec
shl
(bad)
pop
pop
push
mov
dec
push
jp
(bad)
inc
xchg
call
fdivr
sbb
xchg
mov
dec
mov
out
movs
cdq
ins
pop
jmp
ja
pop
test
scas
push
add
or
mov
fisub
add
cmp
dec
xchg
call
movs
jbe
enter
pop
fcom
ins
pop
(bad)
cmps
es
rcl
inc
sahf
popa
pop
dec
sub
jmp
push
imul
mov
dec
retf
fxch
mov
dec
dec
xchg
ins
mov
retf
push
mov
pop
call
dec
pop
data16
int3
js
retf
add
cmp
xchg
imul
push
and
addr16
imul
ja
repz
retf
jbe
cs
mov
xor
outs
push
call
pop
xchg
mov
jmp
stc
leave
jne
out
add
xor
rcl
push
aaa
nop
xchg
aas
call
jmp
out
scas
push
fnstsw
(bad)
rcr
retf
dec
sbb
cmps
adc
or
popa
scas
jno
pushf
push
(bad)
or
lods
mov
xchg
fs
push
xor
pop
hlt
cmp
adc
sbb
fist
xor
ins
pop
sbb
add
jmp
pop
and
sub
mov
inc
mov
sub
pop
das
jg
pop
test
xor
aaa
sbb
sbb
stos
or
test
imul
ret
push
dec
out
movs
inc
xor
jmp
aad
(bad)
push
inc
adc
pushf
test
xchg
movs
inc
dec
jl
(bad)
mov
pop
push
sti
jge
cs
aam
or
and
pop
jo
jle
pop
aam
(bad)
cli
imul
sbb
in
add
xchg
test
movs
jns
pop
ins
test
addr16
pop
jmp
fld
push
sub
cmps
js
xchg
pop
xchg
imul
xchg
ja
lds
aad
pop
fs
inc
pop
sbb
adc
inc
movs
xchg
out
scas
add
aas
xor
pop
sbb
jne
adc
jb
xor
adc
stos
mov
shl
jecxz
fsubr
dec
mov
ins
test
pop
lea
add
pop
stos
outs
mov
mov
repnz
adc
je
fs
xchg
push
cld
pusha
stc
sub
pop
inc
xchg
push
mov
xchg
packsswb
and
movs
clc
xchg
cmp
jnp
loop
inc
fnstcw
scas
mov
rcr
(bad)
into
retf
cs
sub
or
push
bound
jae
mov
adc
adc
dec
jns
aam
cmps
idiv
sub
cmp
xchg
ds
push
add
pop
sbb
xor
inc
lods
pop
test
mov
retf
inc
push
pop
sbb
popa
add
mov
out
mov
push
mov
cmovae
(bad)
fdivp
les
jae
arpl
out
iret
sbb
das
mov
inc
dec
push
and
out
sti
adc
cmp
or
cmpxchg
xchg
push
repnz
ficom
sahf
dec
cmp
inc
ret
add
rol
xchg
push
scas
daa
push
mov
daa
(bad)
jge
sti
test
sbb
jle
xchg
pop
call
inc
pop
aam
xchg
(bad)
ja
test
jmp
js
xor
jbe
leave
popa
inc
gs
sbb
rcr
dec
mov
sub
jmp
jnp
inc
push
xlat
mov
xor
jne
jno
imul
sub
or
call
and
aaa
inc
stc
xchg
jmp
dec
int
or
add
sub
jp
dec
cwde
sbb
jmp
mov
sub
jb
push
cmps
inc
call
jns
or
mov
daa
loop
mov
es
cdq
jmp
mov
sbb
pop
and
loop
imul
and
(bad)
aam
jae
dec
add
stos
ss
push
jge
sbb
xchg
xchg
xchg
ja
jg
xor
xlat
mov
jae
inc
mov
jle
jno
dec
dec
adc
rol
pop
jg
pop
(bad)
jl
dec
mov
(bad)
(bad)
xlat
or
cmp
inc
out
xchg
daa
iretw
mov
aaa
sub
sbb
(bad)
jnp
push
pushf
iret
or
dec
xor
mov
xchg
sbb
cs
ret
jbe
pop
neg
(bad)
in
jmp
cmp
data16
les
loope
jp
or
hlt
not
out
test
adc
push
outs
adc
mov
mov
cmp
xchg
push
lea
jmp
test
xor
inc
mov
out
test
jb
cmp
or
fucompp
(bad)
push
jno
dec
add
adc
xor
ret
push
mov
mov
das
jmp
stc
(bad)
aad
es
call
std
mov
ret
movs
adc
pop
add
mov
ss
and
add
stos
outs
mov
push
xchg
push
call
(bad)
jae
ja
or
push
jmp
push
xchg
data16
test
xchg
fwait
scas
jp
pop
xlat
xchg
cmp
repz
mul
stos
cli
jnp
iret
sbb
addr16
dec
les
push
imul
inc
mov
dec
pop
sub
mov
test
fmulp
scas
jp
dec
adc
pop
jmp
rcl
psrad
fist
inc
dec
jbe
dec
and
test
push
mov
repz
inc
(bad)
jge
(bad)
out
out
dec
out
cli
inc
bound
xor
push
cmp
idiv
fadd
sbb
jae
dec
mov
xchg
in
ret
add
movs
in
mov
movs
data16
jp
dec
add
sub
sahf
xor
ins
add
xchg
jl
pop
xchg
xor
pop
dec
sbb
mov
stc
add
inc
adc
addr16
jns
add
pop
xlat
and
(bad)
sbb
xchg
push
scas
adc
add
mov
(bad)
(bad)
movs
pmaxsw
and
mov
(bad)
out
jmp
sbb
(bad)
sti
(bad)
retf
call
test
mov
mov
scas
(bad)
sbb
jnp
jnp
dec
pop
xchg
stos
jbe
and
mov
pop
mov
jp
pop
push
fist
sub
push
jmp
jno
fld
or
inc
add
pop
pop
test
cmp
xchg
sbb
push
call
sub
cmps
mov
sub
and
or
mov
fnstenv
xchg
out
push
and
adc
and
dec
push
sub
push
div
out
mov
imul
mov
movs
pusha
loop
es
movups
int3
jle
or
jne
xchg
shr
xor
dec
dec
repz
in
out
test
sub
fld
lods
cmc
inc
fld
test
pop
xchg
and
hlt
xor
outs
test
out
into
call
not
fdivr
xchg
cmp
(bad)
xchg
(bad)
sub
jns
mov
fisub
out
jne
push
(bad)
adc
(bad)
arpl
jmp
sub
ficomp
fld
push
jbe
cs
ret
or
imul
cmp
cmp
pop
retf
inc
or
pop
push
cli
lea
inc
adc
fwait
jmp
sbb
or
push
stc
xchg
and
loop
push
mov
imul
out
into
in
stos
fs
dec
inc
and
jmp
fild
xchg
inc
arpl
frndint
push
jb
or
retf
mov
mov
lods
cli
je
inc
fistp
inc
or
sbb
outs
dec
call
(bad)
jecxz
loop
dec
inc
sbb
cmc
cmp
adc
sti
pop
jnp
imul
out
dec
jnp
mov
jnp
add
(bad)
jmp
fimul
and
mov
push
push
mov
outs
stos
cli
(bad)
lds
test
mov
or
pop
lock
mov
cs
cmps
out
or
sbb
jne
leave
or
fdiv
aas
mov
pop
jp
test
mov
lea
fwait
jmp
and
call
inc
test
adc
clc
xchg
pop
sub
arpl
push
sbb
jbe
addr16
lds
mov
jno
jmp
xlat
shl
test
add
outs
stos
fs
xor
xchg
cmps
xchg
cmc
pop
(bad)
sbb
and
adc
loopne
cmps
adc
inc
push
sub
push
pushf
push
jp
cld
test
cmp
mov
push
push
mov
fist
dec
repz
sub
mov
and
cmp
push
stc
and
mov
mov
inc
cmp
inc
pop
xchg
push
jp
or
sbb
jae
xchg
jae
(bad)
pop
push
mov
mov
mov
push
push
jmp
mov
jp
or
(bad)
ret
xchg
dec
jne
jae
xchg
retf
imul
div
inc
or
cmp
push
adc
mov
jae
stc
and
ss
iret
push
das
cmps
shl
sbb
(bad)
and
outs
or
mov
pop
push
pop
jb
cmc
iret
repz
loope
addr16
dec
fwait
adc
aad
cmp
loop
ror
mov
jnp
adc
mov
pop
add
rol
mov
cli
mov
int
or
fistp
mov
es
(bad)
xchg
ja
movs
test
add
xor
loop
ins
dec
(bad)
mov
gs
sub
(bad)
adc
xor
ds
inc
xor
cmps
jecxz
cmps
test
push
push
pop
xchg
out
movs
(bad)
mov
jle
(bad)
push
push
jmp
sti
mov
pop
xchg
pop
shr
mov
cmp
scas
xchg
das
cmps
retf
dec
adc
mov
test
and
lds
mov
or
fld
das
and
mov
sti
mov
(bad)
retf
bts
jns
fistp
push
idiv
cmc
jb
sub
and
push
xchg
ds
pop
sbb
jmp
jbe
les
dec
inc
cmp
aas
es
or
push
adc
call
fwait
ss
sbb
(bad)
out
mov
xchg
cmps
xor
aaa
ss
xchg
jmp
mov
xlat
mov
dec
or
sub
repz
lahf
cli
sub
lds
pop
fstp
ds
call
repnz
dec
and
inc
leave
out
in
push
daa
(bad)
idiv
fsqrt
xor
data16
popw
fnstsw
pop
xchg
test
sub
stc
fsubr
fnstcw
or
jae
repz
xchg
movs
call
xchg
pop
sub
cmp
push
test
popf
out
jno
lahf
pop
cli
or
ror
das
sub
inc
aam
pop
fisub
mov
adc
adc
fidivr
(bad)
sub
mov
mov
pop
sbb
push
mov
or
mov
or
sub
xchg
push
sub
scas
out
ss
adc
mov
rcl
bound
add
into
mov
inc
(bad)
xor
pop
rcr
cmp
aad
push
mov
fldcw
jmp
stos
in
mov
aam
sbb
dec
xchg
cdq
(bad)
movs
lds
call
mov
fbld
adc
stos
fisubr
(bad)
xchg
push
sub
mov
popa
xchg
popw
push
inc
adc
push
cld
sbb
scas
dec
inc
cmp
fwait
out
div
arpl
sar
and
es
fwait
jecxz
fs
xchg
push
out
arpl
or
jbe
(bad)
gs
xor
jae
mov
jmp
dec
pop
(bad)
ins
punpckhwd
mov
iret
sar
mov
scas
std
ret
les
inc
test
sbb
mov
inc
jnp
push
cmp
repnz
jb
repnz
cmp
pop
in
mov
and
or
outs
jle
popa
dec
push
pop
xor
xor
sbb
dec
retf
cmp
jb
mov
xchg
in
or
or
ins
cli
into
loop
jp
cli
and
jbe
jns
push
xor
outs
(bad)
aad
push
or
lods
and
mov
mov
mov
cwde
lds
es
jae
mov
pop
imul
call
stc
das
imul
dec
mov
sbb
mov
sbb
inc
sbb
jns
sbb
sub
neg
jg
retf
push
mov
test
push
call
dec
pop
iret
mov
mov
(bad)
inc
repz
push
cmp
sub
lahf
push
jne
fcomp
data16
mov
or
mov
pop
in
lds
ds
push
or
mov
(bad)
inc
pop
mov
pop
cmp
shr
(bad)
adc
mov
xchg
aaa
add
xor
sbb
dec
or
sub
outs
out
cli
sar
push
cmps
stos
ja
dec
add
xchg
ins
mov
loope
mov
sbb
sub
pop
sti
or
dec
and
mul
test
push
push
sub
(bad)
pop
jecxz
mov
sub
jbe
pop
cwde
adc
cmp
jmp
mov
fiadd
rol
ins
mov
mov
sub
bound
add
or
cmp
or
pop
jmp
(bad)
dec
daa
stc
jnp
out
sbb
inc
and
mov
mov
xchg
repnz
daa
or
retf
adc
scas
cli
je
mov
push
jle
in
or
mov
dec
cli
xchg
mov
push
loope
xor
add
jnp
xchg
pop
shr
std
pop
cmc
mov
xchg
jp
(bad)
jge
inc
cwde
push
add
pop
push
call
dec
xchg
addr16
out
enter
imul
jb
xchg
ficom
mov
inc
arpl
ds
push
retf
fwait
xchg
int
in
idiv
xor
stos
loop
adc
inc
pop
and
jmp
pusha
xchg
cdq
sub
mov
push
push
push
jmp
pop
fld
or
retf
(bad)
xchg
mov
out
cmp
add
adc
scas
(bad)
and
sbb
dec
clzero
push
icebp
pop
and
sbb
mov
fld
(bad)
xchg
shr
xchg
repz
push
mov
cli
fld
fimul
sub
add
stos
or
jle
outs
push
mov
jb
mov
jae
pop
scas
scas
popf
inc
es
mov
in
dec
push
ret
xchg
sub
mov
fsubrp
sub
xor
xchg
adc
jae
sub
xor
xchg
jg
xchg
sar
jmp
xchg
and
les
push
inc
add
call
test
mov
inc
xchg
bound
mov
mov
rcr
mov
int
push
xor
push
push
cmps
in
dec
(bad)
loop
sub
xchg
jmp
pop
jae
fld
(bad)
pop
inc
stos
sti
icebp
jbe
dec
paddsw
js
retf
push
scas
xor
retf
inc
jbe
imul
or
jp
dec
pop
adc
cmps
call
leave
call
xor
pop
pop
(bad)
stos
cmps
jb
int3
push
sbb
cmps
repz
inc
retf
scas
arpl
push
sti
xor
xor
jbe
pusha
cmp
sub
sbb
jne
outs
iret
call
data16
shr
jns
imul
bound
jecxz
stc
jmp
inc
add
fcom
push
xor
pop
xchg
and
or
mov
jg
push
push
push
lea
out
jnp
adc
xchg
out
mov
mov
cmps
fbstp
aad
mov
inc
push
fimul
adc
mov
adc
jmp
es
loopne
hlt
sti
(bad)
or
jg
cmp
xchg
sub
sub
pushf
push
mov
xchg
push
mov
repnz
(bad)
push
(bad)
popf
adc
mov
inc
pop
xchg
add
adc
pushf
jbe
and
icebp
sahf
push
inc
dec
push
sbb
xor
stc
ficom
lods
repnz
mov
xchg
inc
or
xor
add
stos
and
xchg
cmp
(bad)
lea
and
loopne
adc
data16
sbb
pop
xchg
dec
cmp
jp
add
mov
shl
mov
mov
jns
(bad)
cmp
icebp
scas
or
inc
push
lds
and
loopne
outs
sbb
cld
or
cld
mov
xchg
xchg
(bad)
xor
(bad)
retf
popf
push
xor
dec
mov
mov
into
test
ss
cmps
loop
mov
fcmovu
push
jmp
push
ret
xchg
pop
xchg
and
sbb
mov
into
out
retf
ja
or
(bad)
std
mov
jecxz
cmp
jns
add
xchg
loopne
sar
test
xchg
adc
stos
xchg
push
mov
xchg
jmp
ret
jmp
or
lahf
stc
xchg
out
inc
mov
add
mov
push
mov
ret
jae
ror
into
push
sbb
or
adc
mov
and
or
retf
les
scas
sbb
fidivr
xor
test
outs
cmps
and
loope
push
(bad)
call
(bad)
pop
arpl
repnz
jp
imul
ror
pop
ja
cdq
push
jmp
aas
jae
push
cs
movs
jg
shl
adc
mov
jmp
inc
mov
sub
(bad)
jmp
sti
jnp
push
lahf
arpl
jmp
mov
pop
push
loope
ss
pop
mov
stc
cli
or
scas
push
out
mov
mov
push
pushf
xchg
dec
mov
int3
mov
(bad)
dec
out
mov
scas
into
add
push
data16
jbe
jns
aam
pop
div
jae
shl
mov
push
push
jmp
push
xor
add
ja
sahf
and
dec
ret
int
aam
sub
push
mov
xor
pop
jmp
es
pop
fwait
push
xor
cmc
retf
cmp
or
test
jmp
push
mov
(bad)
xchg
sahf
enter
jp
js
and
bound
jbe
jle
push
gs
hlt
mov
dec
xchg
ds
cmps
cmp
dec
xchg
xchg
(bad)
movs
stc
cmp
mov
test
and
sbb
dec
fdivr
inc
push
inc
(bad)
inc
or
hlt
(bad)
int3
(bad)
fbld
mov
push
pop
popf
mov
adc
arpl
test
push
popa
pop
jae
add
xchg
and
rcr
aad
xor
out
mov
ror
sti
push
add
sub
cmp
aas
xchg
rcr
stc
and
(bad)
push
jle
stos
cli
push
mov
xchg
cld
ss
mov
dec
jnp
or
js
mov
jmp
jbe
out
mov
fnsave
push
jne
ds
daa
aad
mov
retf
bound
inc
fwait
push
stos
mov
xchg
aas
or
mov
inc
inc
ss
push
leave
dec
sub
push
out
xchg
inc
mov
sti
test
or
mov
add
jg
add
inc
xor
ror
push
xchg
pop
stc
sti
or
push
push
fisubr
aaa
sbb
lods
cs
stos
inc
xor
ins
jbe
xchg
push
int3
and
daa
mov
(bad)
sub
sub
jne
adc
adc
ret
pop
push
cmps
jp
pusha
cmp
aad
repz
xor
sar
ss
add
mov
pop
out
dec
mov
sub
mov
jmp
mov
cli
and
scas
sub
in
sub
push
mov
imul
push
add
inc
sar
inc
ja
dec
leave
dec
out
aad
jg
ss
xor
add
stos
mov
ret
mov
stos
test
jnp
shl
push
iret
fwait
jmp
xchg
jp
mov
imul
out
jne
cmp
jp
jno
push
retf
gs
cmp
lock
inc
test
or
add
cmp
push
ss
add
adc
jmp
mov
push
test
aad
lds
adc
inc
cdq
push
mov
loop
cmp
add
push
lds
mov
nop
sbb
ds
mov
out
pop
cld
xor
push
loop
cmp
(bad)
sub
pop
cmp
test
cmp
pop
test
ret
jb
xchg
cmp
cmp
xchg
lea
push
push
or
mov
cmps
cmp
jbe
outs
cmp
inc
push
mov
jmp
call
fisttp
sti
or
jo
sub
mov
(bad)
push
add
push
jmp
inc
mov
cmp
cmp
sub
outs
popf
jmp
push
jmp
les
jmp
mov
(bad)
(bad)
fild
in
aaa
jne
out
push
stos
(bad)
bnd
or
repnz
xchg
fld
outs
pop
arpl
(bad)
out
call
test
add
jbe
or
sub
icebp
je
cmp
jp
xor
out
es
add
xchg
repz
jecxz
sbb
pop
add
xchg
push
adc
(bad)
pop
inc
mov
push
mov
add
dec
add
ficom
and
mov
stos
or
jne
xchg
imul
cmp
cmp
mov
addr16
call
(bad)
bound
jp
and
sub
icebp
xchg
adc
and
call
retf
pop
sbb
shufps
outs
pop
into
mov
sub
std
push
mov
inc
pop
jle
pop
mov
inc
push
repnz
and
ficom
icebp
lods
add
push
inc
mov
jle
dec
jp
cmp
inc
(bad)
loop
ficomp
jne
pop
adc
gs
outs
xchg
adc
icebp
repz
jbe
inc
mov
mov
sbb
leave
mov
out
test
xchg
lss
pop
jecxz
dec
pop
cs
shl
push
fidiv
jmp
fsubr
jmp
jbe
fistp
push
aas
ds
xchg
(bad)
jp
arpl
scas
vpmaxsw
mov
mov
mov
push
or
pop
push
xor
es
adc
mov
in
mov
(bad)
fild
retf
inc
jmp
add
jo
dec
dec
xor
or
inc
mov
retf
sbb
arpl
fld
mov
jecxz
bound
in
mov
push
sbb
addr16
je
inc
mov
and
xor
push
(bad)
jmp
jmp
aam
in
add
inc
sub
divps
sbb
add
push
xchg
pop
(bad)
jmp
lahf
push
fistp
cmps
mov
push
cmp
cmp
push
(bad)
repnz
aad
cmp
or
adc
out
push
outs
jne
test
or
pop
imul
sbb
repnz
in
push
popf
arpl
les
dec
push
mov
jg
jo
sub
dec
ret
mov
adc
push
out
and
jb
shl
push
adc
pop
inc
repnz
das
jns
push
push
dec
test
inc
gs
stc
mov
jns
pop
das
mov
xchg
xchg
and
sahf
push
pop
jmp
aad
cmps
inc
mov
imul
in
aad
cmp
or
inc
adc
cmps
out
mov
sbb
cmps
xchg
rcl
ds
mov
test
std
jmp
call
push
push
cs
cmp
and
jle
mov
push
ficom
bound
cmp
ins
stos
pop
mov
or
push
cmp
mov
and
scas
mov
sub
mov
jns
mov
inc
pop
jle
aad
mov
push
adc
jns
scas
add
push
(bad)
in
push
leave
xchg
push
sti
fmulp
pop
mov
push
out
xchg
jmp
push
and
push
retf
jmp
retf
cmp
xchg
mov
(bad)
daa
adc
es
(bad)
mov
mov
xchg
sub
xchg
cmc
and
cmps
out
pop
xor
and
mov
out
call
add
pop
aaa
bound
(bad)
out
mul
and
add
mov
jbe
pop
xor
push
cmp
stos
dec
sar
lock
xchg
adc
xlat
fld
scas
fwait
sbb
retf
dec
jb
mov
lea
sub
pop
ffree
cmps
jnp
or
push
cmp
aad
sti
mov
adc
mov
cmp
mov
cmp
xchg
xchg
mov
and
sbb
mov
fld
inc
sti
es
cli
xchg
sub
dec
mov
aas
push
sub
mov
push
iret
movs
cli
les
pop
push
call
jmp
cmc
pop
xchg
(bad)
pcmpgtw
ror
call
arpl
pop
fistp
inc
jbe
jns
aam
or
dec
retf
and
stos
mov
or
push
fwait
sub
div
(bad)
test
movs
mov
jp
mov
aas
push
sub
push
or
test
xor
adc
aad
mov
mov
jbe
cmp
jecxz
push
imul
mov
es
mov
mov
cmps
push
push
cmp
mov
imul
or
push
fwait
jmp
adc
(bad)
aaa
jbe
mov
xchg
mov
shld
jmp
pop
pop
mov
dec
jae
call
adc
or
in
in
(bad)
aad
mov
test
test
and
lock
push
xor
test
cli
adc
inc
mov
push
leave
xchg
push
pop
hlt
add
pop
mov
push
xor
test
cli
fild
data16
test
mov
xchg
cmc
and
test
inc
jle
adc
dec
repnz
sbb
jmp
mov
sub
cmp
imul
adc
xchg
ds
sub
dec
jle
jle
out
test
xchg
fcmovnbe
sub
fwait
stos
ja
pop
inc
repnz
cmps
inc
xchg
stos
jle
(bad)
sub
or
sub
mov
je
ja
pop
retf
pop
(bad)
jmp
mov
inc
movs
jb
stos
jle
inc
jecxz
(bad)
inc
vmread
pop
mov
jle
adc
jne
pop
loop
cdq
scas
mov
inc
mov
out
adc
jecxz
aas
aad
(bad)
and
stos
cli
leave
jne
fs
sbb
push
jle
jg
sbb
jle
(bad)
sub
and
jnp
xchg
test
leave
xchg
push
jle
xchg
bound
xor
pop
xchg
dec
jne
pop
test
mov
and
pop
xchg
dec
or
in
jmp
dec
out
stc
push
popa
adc
inc
(bad)
test
mov
movs
sbb
push
test
pop
sbb
jmp
jne
gs
fwait
aaa
push
jle
xlat
push
sub
repz
and
mov
arpl
(bad)
je
dec
jle
mov
xchg
push
idiv
sbb
ror
cmp
jle
arpl
lahf
mov
or
hlt
retf
stos
sbb
movs
lds
addr16
pop
or
ds
and
jbe
inc
movs
sbb
cmp
mov
outs
and
mov
cs
and
mov
mov
test
jecxz
and
outs
ficomp
jne
xlat
sbb
outs
inc
push
mov
pop
into
xchg
adc
ret
imul
xchg
add
adc
fs
push
daa
data16
mov
retf
xlat
(bad)
xchg
sub
dec
or
cmp
sub
push
push
xor
add
sar
pop
jbe
ret
fisubr
and
push
aad
mov
push
addr16
adc
(bad)
aaa
jbe
stos
pop
stos
mov
mov
pop
(bad)
cmps
imul
jmp
test
lahf
repz
add
jmp
cmp
stc
(bad)
jmp
jne
fcomp
and
mov
sbb
mov
repz
stc
adc
es
xchg
jae
jmp
mov
inc
mov
das
cmp
aaa
mov
out
adc
xlat
fld
ret
fisubr
pop
pop
dec
out
iret
aas
xlat
cmps
out
aaa
mov
stos
cli
je
cs
mov
jmp
mov
pop
jbe
sub
cmp
(bad)
xchg
aad
add
out
cdq
fld
movs
(bad)
sub
(bad)
dec
fst
and
iret
gs
loop
mov
std
inc
mov
sbb
pop
xor
cli
cmpxchg
out
test
pop
sub
add
push
adc
test
rcl
or
cdq
(bad)
in
lds
xchg
cli
adc
test
inc
lods
sbb
or
aas
xchg
cmps
out
aaa
cmps
stc
lahf
xchg
add
gs
cmps
inc
sti
mov
push
xchg
sub
pop
sub
cli
aaa
inc
outs
sbb
dec
int
sbb
xor
mov
jmp
or
fld
imul
or
push
xlat
adc
xchg
imul
push
sub
hlt
retf
cmp
mov
push
(bad)
jmp
pop
xchg
imul
imul
(bad)
sub
stos
mov
xor
fs
pop
xchg
daa
data16
mov
movs
xchg
dec
pop
jp
cmc
(bad)
aas
xchg
mov
out
xlat
or
ja
mov
jbe
inc
movs
sbb
dec
fld
cmps
daa
lds
xor
cmp
lds
mov
into
test
bound
xchg
mov
out
inc
push
push
sbb
cmp
mov
call
xchg
push
in
ja
lds
or
(bad)
(bad)
cmps
lods
cli
repz
push
mov
dec
jns
in
cmps
xchg
dec
adc
shl
stc
ss
inc
gs
dec
arpl
push
(bad)
and
pop
push
test
or
pop
sub
sbb
test
or
in
inc
jmp
xor
outs
xlat
xchg
stos
jmp
je
inc
sbb
xchg
sbb
add
xchg
je
mov
inc
retf
jg
call
push
mov
and
je
int
inc
(bad)
in
push
or
jp
dec
dec
sbb
addr16
mov
addr16
fld
or
mov
(bad)
pop
inc
nop
pop
addr16
push
call
jns
imul
movs
mov
or
test
xor
ss
adc
jmp
retf
mul
adc
das
inc
sbb
sub
mov
jae
inc
iret
gs
enter
daa
data16
repz
xchg
jmp
shl
rcl
retf
call
les
cmp
pop
ds
push
cwde
jmp
xchg
mov
aaa
jbe
inc
ss
sub
das
test
jge
mov
cli
je
sub
mov
or
push
sbb
pop
push
push
retf
fwait
jmp
adc
push
inc
xor
out
sbb
jmp
ja
sbb
ret
ins
cmp
and
leave
scas
add
mov
push
push
add
jmp
mov
jge
cdq
fwait
jmp
jae
jmp
jns
cmps
movs
mov
retf
das
in
or
inc
out
inc
push
push
pop
add
out
push
cmp
mov
xlat
xchg
fild
aas
xchg
mov
push
daa
jmp
mov
push
dec
inc
inc
cmps
pop
movs
and
and
sbb
jmp
mov
mov
push
or
pop
and
dec
pop
repz
sub
push
retf
fwait
jmp
jae
jmp
jns
movs
mov
sub
das
test
jnp
inc
sbb
into
(bad)
leave
or
call
sar
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
or
mov
inc
mov
push
mov
loop
mov
xchg
mov
jb
sub
or
jmp
mul
cmp
jl
mov
and
dec
push
sub
xchg
je
fiadd
es
(bad)
ds
push
cmps
lods
test
or
add
cwde
xor
and
push
add
push
dec
lock
out
xor
xchg
jmp
push
stos
mov
xchg
push
jp
mov
in
fs
sahf
inc
push
fucompp
jmp
dec
ret
cmps
adc
cmc
cmp
sbb
sub
xor
ficom
ret
add
sbb
and
cmp
rol
retf
adc
jp
bound
cwde
sbb
dec
dec
cmp
cmp
retf
push
mov
mov
inc
mov
push
call
sub
iret
ins
add
retf
sbb
jae
push
or
lods
stos
push
retf
push
jmp
push
stos
data16
dec
jns
xchg
xchg
cmps
jp
or
sbb
retf
stc
fidivr
bound
xchg
inc
call
out
pop
xchg
xchg
cmps
stos
mov
neg
inc
inc
out
xchg
retf
push
adc
inc
loop
stos
cdq
mov
xchg
shl
sbb
(bad)
out
test
fimul
stos
inc
fwait
test
mov
pop
jp
or
and
jp
cmp
retf
push
call
push
stos
mov
pop
dec
xchg
xchg
or
dec
test
(bad)
jmp
xchg
stos
push
mov
xchg
push
jp
or
in
sub
pop
idiv
push
fcom
jmp
push
xchg
and
pop
(bad)
sbb
aad
out
pop
jnp
retf
es
mov
pop
mov
mov
add
xor
or
mov
sub
cmp
add
ds
ss
mov
outs
mov
in
loop
fild
leave
adc
(bad)
sub
(bad)
jecxz
push
fisubr
lods
imul
sbb
cmp
push
add
add
or
adc
cmp
outs
lods
push
inc
or
mov
inc
xchg
dec
(bad)
push
xchg
js
cmp
retf
pop
jmp
push
push
leave
add
xchg
mov
(bad)
adc
and
cmp
ret
fisub
outs
out
xor
ss
sub
push
mov
(bad)
sbb
cmp
pop
cmc
retf
sub
inc
repnz
jbe
adc
or
adc
mov
(bad)
sbb
repz
or
push
ficom
(bad)
daa
cli
mov
push
stos
data16
push
rcr
push
adc
or
sbb
mov
push
jb
jmp
push
jp
pop
xchg
sahf
jle
or
dec
(bad)
dec
xchg
ds
push
xchg
div
mov
popf
jle
mov
xchg
jp
jns
or
cmp
repnz
rcl
jmp
(bad)
ret
or
xchg
mov
cmp
xor
or
loopne
enter
mov
and
in
xor
pop
mov
(bad)
sbb
retf
or
adc
push
stos
data16
fbld
pop
xchg
push
ret
pop
sbb
sub
retf
push
ficom
loope
cli
ss
addr16
xchg
and
sub
jmp
or
jb
jge
test
es
test
push
stos
xchg
dec
xchg
push
jp
adc
into
pop
cmps
and
fist
jmp
push
stos
dec
dec
es
sbb
cmps
push
fimul
mov
aam
out
jbe
or
cli
mov
test
mov
nop
imul
add
in
mul
push
loope
fdecstp
fidivr
mov
inc
xchg
pop
push
xchg
aaa
iret
cmp
retf
pop
jmp
push
fisub
jbe
push
push
xchg
push
test
scas
arpl
retf
loop
(bad)
cmp
data16
xchg
imul
(bad)
sub
test
jbe
jmp
push
jbe
mov
xchg
push
jbe
or
sbb
add
jnp
retf
dec
jmp
xor
push
stos
mov
xchg
(bad)
adc
(bad)
into
loop
test
fistp
repz
cli
mov
push
stos
data16
cmp
xchg
push
jnp
or
sahf
xlat
sub
cmp
push
ficom
inc
and
mov
push
je
xchg
arpl
aam
out
into
mov
ficom
jmp
push
stos
loop
jge
xchg
ret
je
adc
cmp
retf
xor
es
popa
xchg
bound
and
loop
loop
and
and
and
and
out
sub
jmp
adc
dec
xchg
adc
push
sub
retf
push
cli
ficomp
mov
ficomp
cmp
(bad)
pushf
push
jp
mov
cmp
sbb
push
ficom
jmp
push
ret
push
jbe
cli
ficomp
repnz
rol
mov
rol
in
test
and
xchg
bound
das
sub
sub
jmp
push
imul
in
sub
ss
mov
sub
adc
test
or
cs
div
pop
xlat
pop
es
ss
cmp
push
xor
(bad)
sbb
cmp
sbb
or
add
or
xor
shl
call
(bad)
inc
xchg
dec
mov
mov
fiadd
repnz
popa
test
stos
and
and
or
xchg
push
jp
or
scas
outs
xchg
cmps
jg
pop
jmp
push
sbb
jg
dec
xchg
mov
mov
xlat
add
and
cmp
(bad)
cmp
inc
repz
call
ss
mov
(bad)
(bad)
es
xor
fisttp
rol
add
adc
fcomp
icebp
add
sub
xchg
and
dec
add
cmp
ja
xchg
dec
lea
ds
fild
ret
dec
xchg
adc
jl
push
cwde
dec
jno
call
mov
push
jbe
push
ja
xchg
outs
cmps
jp
aas
jmp
retf
cmp
adc
jmp
push
stos
mov
sbb
push
mov
shr
out
push
retf
or
adc
es
push
mov
sub
and
pop
xchg
pop
retf
or
xor
cmp
jle
fist
jmp
adc
inc
je
xchg
jp
push
out
stos
or
sbb
(bad)
out
test
fist
jmp
ret
mov
xchg
push
mov
or
out
idiv
or
jl
mov
push
push
retf
or
dec
xchg
mov
(bad)
out
shr
out
(bad)
ficomp
cli
ds
cli
ss
call
xchg
cli
push
(bad)
mov
(bad)
sbb
out
mul
adc
jmp
push
pop
fs
nop
push
jp
and
dec
lea
cmp
retf
push
jmp
jmp
fs
xchg
push
jp
push
into
in
sub
fist
jmp
push
stos
outs
fidiv
xchg
imul
(bad)
sub
pop
lahf
jno
push
pushf
adc
scas
jp
cmps
jp
adc
xor
sub
cmp
ret
push
jmp
cmp
sbb
fptan
inc
nop
inc
mov
loopne
test
in
retf
add
push
jmp
push
stos
outs
mov
jge
retf
or
adc
in
jl
pop
sbb
cmp
jmp
jge
pop
cld
cmp
pop
xchg
out
fidivr
or
stos
jle
in
test
push
jmp
es
ss
xor
xchg
sbb
mov
out
div
mov
fidivr
call
fdivr
xchg
mov
ret
or
outs
cmps
jp
jle
xchg
inc
mov
cmp
retf
push
jmp
mov
dec
xchg
push
jnp
or
xor
sub
cmp
(bad)
push
bnd
jp
mov
inc
push
cmp
fst
mov
pop
cmp
retf
adc
es
push
mov
call
xchg
mov
(bad)
mov
inc
lods
imul
mov
lea
lods
jp
or
xchg
inc
or
add
jmp
push
popf
outs
stos
ins
imul
mov
push
stc
cmp
loope
push
jmp
push
stos
add
lds
and
das
scas
ja
adc
xor
daa
cli
mov
push
stos
xor
adc
xor
push
es
leave
or
xor
pop
aas
out
das
out
push
cmps
test
mov
dec
stos
mov
pop
rol
shl
jmp
sub
and
stc
cmp
aaa
mov
fisub
sbb
cmp
data16
or
sbb
daa
call
ss
es
sub
push
shl
xchg
imul
(bad)
sub
inc
je
add
sbb
div
mov
jl
and
adc
clc
(bad)
or
or
or
rcl
sub
cmp
cmp
fisubr
mov
push
out
mov
out
daa
repz
(bad)
sbb
out
neg
into
fst
jmp
push
stos
dec
mov
xchg
imul
(bad)
sub
pop
pop
jmp
push
push
gs
inc
outs
cmps
jp
out
in
(bad)
cmp
retf
adc
es
jg
inc
call
xchg
retf
bswap
or
adc
rol
xor
jmp
and
jg
xchg
adc
repnz
nop
gs
sub
cmp
and
fist
jmp
jg
fs
xchg
push
jp
jb
sbb
sub
hlt
retf
(bad)
and
mov
mov
xchg
data16
mov
(bad)
xor
sub
cmp
mov
push
jmp
push
daa
sbb
shl
xor
inc
icebp
ret
sbb
sub
and
loope
fcom
jmp
push
xlat
adc
ss
mov
adc
fsubr
out
mov
lock
push
retf
push
stos
or
add
pop
xchg
loop
jp
or
(bad)
sub
int3
inc
ja
or
push
retf
cmc
mov
dec
mov
and
fstp
adc
lock
sub
test
rcr
clc
sbb
push
stos
mov
aad
nop
push
jp
jb
nop
inc
mov
cmp
retf
hlt
add
pop
xor
xchg
ja
xchg
imul
(bad)
sub
cmps
adc
es
cmps
adc
push
stos
retf
hlt
xor
pop
std
(bad)
sbb
sub
cmp
retf
adc
es
jbe
inc
call
xchg
out
cmps
jp
xchg
(bad)
sbb
sub
in
sub
das
call
mov
jmp
fwait
pop
mov
test
ficom
jmp
mov
jnp
sbb
aas
clc
jnp
or
outs
xlat
sub
cmp
push
ficom
jbe
cli
ss
fwait
push
stos
data16
dec
xchg
push
sub
(bad)
sub
and
loope
in
jmp
push
(bad)
addr16
xchg
push
out
mov
(bad)
sbb
out
div
ficom
jmp
mov
pop
xchg
push
jnp
or
xlat
sub
cmp
mov
ss
loop
stos
mov
xchg
push
jl
or
into
or
pop
shl
push
ficom
repnz
cli
mov
push
stos
data16
cmp
push
jp
jns
popf
inc
mov
cmp
retf
mov
mov
pop
ja
xchg
imul
(bad)
sub
cmp
retf
sub
cwde
push
stos
retw
xchg
mul
sbb
sub
(bad)
test
es
ss
fwait
push
stos
data16
mov
dec
(bad)
sbb
sub
mov
jmp
sar
pop
xchg
mov
(bad)
mul
sub
cmp
fimul
fidivr
sub
call
xchg
push
jp
pop
(bad)
(bad)
(bad)
sub
movs
test
mov
mov
data16
add
ficomp
and
mov
jmp
(bad)
not
mov
scas
mov
sub
mov
mov
pop
int3
mov
or
data16
pushf
inc
out
lock
test
retf
push
pop
xchg
pusha
cmps
int3
pusha
sahf
mov
loopne
push
loop
pop
jl
sub
and
repnz
lock
shl
shl
sbb
and
jp
outs
mov
nop
dec
xchg
dec
cwde
mov
jno
push
jecxz
inc
ret
add
sbb
loop
loop
enter
fnstsw
dec
xchg
add
retf
jns
outs
adc
sti
cmp
or
(bad)
mov
xchg
sbb
imul
xor
xor
add
or
sbb
push
xchg
popa
mov
pop
aad
call
loope
cmc
add
mov
scas
pop
mov
mov
jb
jg
jno
inc
rcl
int
int
aad
ds
sbb
cmc
gs
dec
mov
and
inc
ret
xor
aaa
std
aaa
fist
inc
out
out
out
ret
or
cmp
jne
inc
(bad)
adc
and
add
aas
shl
cmps
jnp
inc
cmp
push
test
pop
out
and
add
add
adc
lds
loopne
cmc
adc
push
xchg
mov
push
mov
and
adc
es
and
cmp
sub
dec
test
xchg
jp
mov
push
mov
push
stc
push
stc
fs
sahf
add
sub
sbb
and
adc
cmp
pop
stc
pop
int3
push
fld
cmp
and
and
mov
and
inc
inc
mov
ss
sbb
sub
or
fs
outs
xchg
inc
cmps
jp
xchg
and
inc
retf
jb
pop
enter
sbb
and
pop
mov
xlat
cmp
cmps
addr16
add
retf
aas
int
leave
sub
mul
jnp
push
or
mov
jbe
adc
xor
mov
jmp
pop
cmps
jg
mov
scas
sub
push
stos
and
fisubr
sub
jae
dec
xchg
jp
clc
aaa
int
into
push
lds
call
add
add
mov
mov
jle
mov
dec
popf
push
stc
push
stc
fs
es
sub
sub
cmp
cmp
dec
mov
movs
push
xchg
mov
push
cdq
inc
mov
jmp
not
into
xor
push
sub
jle
push
retf
pop
(bad)
jne
dec
xchg
test
inc
mov
jmp
not
into
mov
ds
pop
jecxz
out
ret
js
dec
mov
jle
mov
fs
jbe
jns
pop
pop
add
adc
out
ds
cs
not
dec
mov
cmc
outs
mov
add
daa
call
inc
and
sbb
and
outs
xchg
sbb
push
test
data16
jbe
and
jb
adc
ss
or
or
pop
cmps
pop
xchg
push
pop
lahf
test
retfw
pop
retf
or
pop
into
paddusb
in
into
push
mul
pop
in
or
jb
jns
enterw
stc
aas
into
or
ss
sbb
or
pop
xlat
jle
pop
mov
xlat
pop
mov
inc
test
push
mov
and
repnz
push
ror
push
stc
imul
test
das
jmp
leave
jbe
(bad)
or
sbb
div
pop
xchg
test
cmps
pusha
in
scas
jl
push
jmp
cmp
jp
enter
test
push
aad
pop
outs
mov
dec
xchg
xchg
imul
aad
jmp
pop
adc
jecxz
ret
dec
movs
jge
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
pop
push
push
sbb
fnsave
mov
adc
sub
out
add
cmps
jp
bound
fisub
or
mov
mov
cmps
push
retf
sahf
outs
dec
sbb
mov
mov
dec
xchg
mov
and
bound
hlt
cmp
cs
fstp
je
pop
xchg
cmp
add
and
fistp
and
cmp
sbb
jp
push
mov
mov
mov
mov
pop
out
and
mov
jp
imul
fidiv
fwait
pop
out
idiv
ficom
mov
stc
sbb
jp
jns
imul
mov
push
jmp
adc
cli
or
inc
jmp
jp
mov
loopne
cwde
push
fwait
push
out
das
mov
xor
icebp
cmp
pop
ret
pop
sar
pop
mov
mov
push
xchg
inc
jmp
or
push
cmp
fisttp
sbb
mov
dec
mov
and
and
push
ror
out
mov
(bad)
adc
retf
dec
mov
push
retf
ret
xor
into
push
fisubr
pop
sbb
jle
(bad)
push
fidiv
bound
xor
mov
cmc
pop
xchg
sub
cmp
jb
jbe
dec
ret
push
(bad)
mov
inc
test
xor
adc
fisttp
pop
fadd
addr16
movs
bound
inc
in
fbstp
cmp
cmp
ret
jb
dec
xchg
push
cdq
mov
inc
lahf
pop
out
add
les
aad
ds
dec
lods
jp
or
cdq
mov
inc
xchg
jne
daa
mov
push
push
call
pop
ror
mov
push
xchg
mov
inc
mov
and
aam
ds
retf
es
add
inc
lea
out
test
cli
ss
sub
adc
call
or
imul
cli
jae
push
xchg
inc
(bad)
adc
es
psrlq
and
cmp
pop
aad
fstp
je
pop
xchg
mov
dec
mov
stc
and
and
push
adc
mov
retf
popa
test
push
mov
fistp
cmp
repz
fmul
xchg
xchg
xchg
jno
lea
push
iret
fist
psubusw
stos
or
sbb
(bad)
bound
retf
dec
mov
sbb
jb
fimul
and
pop
scas
mov
pop
into
test
xchg
outs
mov
mov
sub
mov
mov
into
xor
ss
mov
mov
loop
ds
xor
jp
mov
sahf
dec
bound
sahf
push
ss
scas
mul
into
adc
push
(bad)
jb
dec
loop
repnz
mov
dec
mov
and
push
ret
adc
pop
call
retf
fs
jae
inc
mov
call
mov
das
jmp
adc
sar
(bad)
pop
xchg
pusha
cmps
pop
mov
retf
jo
push
sahf
fs
div
inc
enter
ds
or
dec
out
add
or
adc
out
imul
cmps
sub
or
sbb
js
jns
add
sbb
mov
inc
leave
and
pop
fimul
adc
add
jp
js
pop
fwait
jg
push
test
xchg
bound
xor
sub
jne
pop
xchg
push
xchg
cmp
outs
test
adc
jmp
dec
scas
mov
repnz
rcl
repnz
out
imul
push
outs
xchg
push
jb
add
mov
cli
ficomp
mov
or
ds
call
inc
or
ret
sbb
cs
leave
cmp
xor
pop
cdq
pop
sahf
sub
scas
jae
je
ss
adc
xor
call
adc
mov
xchg
jns
mov
mov
sub
cmp
sub
sbb
xor
push
push
mov
mov
push
test
jae
arpl
sub
push
es
cmp
or
sbb
dec
cmps
outs
movs
dec
out
lahf
mov
es
inc
out
xor
adc
push
fist
and
cmps
aas
cli
dec
mov
inc
xchg
pop
xchg
retf
pop
mov
and
and
cmp
add
jmp
outs
test
js
clc
ss
cmp
xor
and
push
je
add
mov
inc
xchg
cmp
test
imul
outs
xchg
inc
and
aas
xlat
add
or
imul
cli
jnp
dec
lods
pop
rcl
fcomp
and
sub
sub
dec
lahf
movs
addr16
mov
inc
stc
jo
cmp
add
pop
in
ret
jle
jnp
pop
out
cwde
jmp
dec
out
cmc
add
cmp
adc
pop
test
push
test
jno
gs
jbe
push
retf
and
push
cmp
xor
add
sub
outs
test
sbb
fs
push
cld
add
and
ds
ret
pop
xchg
mov
test
mov
mov
push
mov
stc
xor
rcl
and
sar
js
je
dec
mov
jmp
pop
fldenv
stos
add
or
cmps
push
or
sbb
push
test
push
mov
cmps
dec
mov
xor
aas
lds
int
and
cmps
adc
js
sub
movs
jne
jae
push
leave
pop
stc
xor
gs
or
add
mov
adc
add
call
gs
jbe
add
pop
in
sbb
aas
fistp
mov
pop
(bad)
jg
dec
sub
push
mov
pop
out
int
cli
adc
push
jl
sub
inc
(bad)
xchg
dec
cmp
cwde
scas
inc
xchg
inc
mov
sub
xor
jmp
jns
inc
mov
xchg
xchg
arpl
aad
sti
or
or
sub
das
in
retf
fs
pop
call
stos
imul
add
push
sub
sub
push
stc
and
mov
inc
call
xchg
jb
and
add
cmps
fmul
(bad)
pop
mov
movs
outs
loopne
test
inc
movs
sub
and
xor
fldcw
xor
sub
mov
cwde
dec
mov
stc
and
ins
fsub
add
lock
(bad)
push
jp
gs
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
out
cli
push
mov
or
loop
add
ficom
(bad)
stc
clc
xchg
xor
xchg
xchg
jp
jp
or
sub
sub
fidiv
mov
cmp
(bad)
test
push
xchg
or
mov
cmp
cmps
neg
es
sbb
and
jle
je
clc
add
sbb
aad
mov
xor
es
or
mov
sbb
ret
enter
(bad)
sub
pop
out
les
fild
test
pop
jns
xchg
push
xchg
sub
cmp
mov
es
addr16
call
div
in
xchg
fimul
iret
mov
inc
mov
loop
mov
jne
sub
aas
add
das
xchg
outs
in
mov
shl
(bad)
cmp
(bad)
dec
and
ss
inc
fcom
lods
mov
xchg
cmp
sbb
mov
cmp
jmp
dec
or
and
push
stos
push
inc
sbb
das
outs
cmp
sbb
(bad)
pop
pop
ins
(bad)
scas
push
push
jmp
mov
dec
cwde
stos
rol
ret
or
pop
(bad)
push
fcomp
mov
jmp
fs
data16
and
cs
or
sbb
pop
out
call
cli
add
sub
push
daa
idiv
clc
add
push
shl
jl
sub
sub
retf
sbb
and
adc
rcl
pop
lods
push
xlat
or
jns
retf
pop
xor
repz
jmp
pop
cmp
aaa
shl
test
mov
mov
dec
fwait
jb
outs
xchg
stc
or
addr16
sub
sub
scas
jne
and
dec
test
es
ss
and
adc
data16
sbb
retf
push
in
mov
inc
mov
movs
push
aam
fidiv
cwde
sbb
mov
sbb
jg
sub
push
xchg
push
xchg
push
jecxz
call
push
cmp
xor
sub
adc
mov
mov
xchg
scas
add
push
call
add
(bad)
add
xor
or
dec
icebp
int3
bound
push
movs
mov
aaa
stc
adc
pop
fidivr
ret
or
(bad)
jl
mov
adc
aas
call
pop
das
lds
xchg
pop
(bad)
js
ss
or
cdq
sbb
aas
lds
int3
push
push
ret
sbb
fs
jg
dec
xchg
inc
cwde
mov
dec
leave
inc
sti
xor
and
sub
sub
add
clc
push
mov
out
scas
ja
push
fiadd
mov
sub
aas
jns
bound
outs
hlt
and
mov
adc
pop
mov
mov
dec
cmp
xchg
fild
jbe
push
or
popa
(bad)
cmp
cmps
jmp
leave
add
inc
mov
in
mov
sbb
or
inc
lea
leave
out
aaa
mov
call
and
xchg
imul
daa
sbb
fs
cmp
sub
loope
mov
cmps
fwait
jecxz
stc
push
adc
mov
mov
fisttp
jp
imul
cmp
sub
cmps
push
ret
sub
xchg
pop
jmp
add
push
pop
dec
mov
pop
call
fild
push
retf
pop
cli
aaa
xchg
(bad)
or
out
fadd
mov
sbb
ret
or
jae
mov
sbb
not
div
jbe
or
xlat
sbb
add
lahf
pop
jmp
add
push
mov
sbb
cmps
setp
ds
xor
xchg
pop
pushf
ss
sbb
outs
(bad)
cmp
sub
aas
hlt
nop
jbe
cld
clc
cmps
push
stos
pop
mov
(bad)
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
xchg
push
jp
or
sbb
sub
cmp
retf
push
jmp
push
stos
mov
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
add
test
sahf
sub
jg
mov
cmps
lods
push
push
aad
sub
dec
dec
and
adc
in
sbb
pop
pop
xchg
icebp
xchg
jbe
cmc
xor
cmp
das
sub
xor
inc
jns
mov
ins
mov
cmp
xchg
out
push
adc
scas
jl
ud2
ret
mov
movs
popa
pop
ins
test
sbb
mov
in
aaa
xor
(bad)
pop
pop
out
jmp
inc
ss
mov
cmp
push
es
xlat
rcl
test
jp
retf
add
pop
out
mov
mov
fist
jno
sub
mov
nop
mov
push
push
mov
mov
mov
xor
repz
je
mov
mov
mov
xor
repz
je
mov
push
mov
call
pop
mov
pop
ret
mov
mov
pop
pop
mov
xor
ret
nop
mov
xchg
cwde
lods
xchg
(bad)
sbb
and
xor
inc
pop
push
dec
pop
inc
dec
push
mov
test
fadd
call
(bad)
cmp
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
cmp
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
sub
cwde
xchg
add
clc
mov
test
in
inc
(bad)
leave
push
cmp
inc
sti
and
cwde
in
popf
xchg
lods
pop
arpl
fwait
push
inc
mov
dec
cmp
lahf
pop
movs
cmp
push
inc
xchg
push
loope
mov
xchg
xchg
in
mov
mov
pop
in
pusha
nop
mov
ss
jecxz
lds
fistp
dec
dec
pop
aas
repz
cmp
inc
jns
sbb
or
xor
mov
or
xchg
mov
lds
imul
pop
or
repz
dec
adc
and
int3
cwde
jnp
xchg
mov
ret
cmp
and
in
scas
jbe
inc
or
push
xchg
shl
movs
jg
dec
inc
(bad)
mov
retf
cmc
call
cmp
mov
mov
mov
ins
sub
dec
(bad)
shr
js
sub
mov
rcl
rol
daa
lods
neg
mov
out
imul
push
test
sub
mov
or
repz
xchg
(bad)
sbb
cwde
pop
sub
cmp
sbb
and
test
fimul
ja
mov
mov
fadd
mov
stc
bnd
xchg
stc
dec
(bad)
cmp
push
dec
inc
inc
jmp
cmp
xchg
jle
imul
fsub
and
neg
nop
xor
stos
dec
das
lods
push
in
imul
pop
mov
retf
and
lock
jae
xor
fisub
sbb
adc
xchg
faddp
out
push
pop
lea
repz
rol
imul
jne
fmul
sbb
xchg
(bad)
out
test
xchg
mov
xchg
test
pop
test
jns
enter
pop
sub
sbb
pushw
or
std
daa
mov
aad
mov
or
call
(bad)
outs
std
cs
mov
add
jbe
(bad)
jl
shl
call
push
fisttp
sub
add
inc
nop
cdq
push
fld
xor
out
mov
push
out
je
jb
imul
pushf
mov
xor
fmul
inc
je
mov
ror
fsub
mov
push
clc
fsubrp
mov
shl
ss
fwait
inc
not
mov
push
fldcw
mov
mov
inc
ss
call
fild
sbb
cmps
retf
sbb
inc
dec
nop
cli
cmps
imul
mov
cmp
pusha
sub
inc
data16
sbb
mov
sub
lods
cmp
adc
call
pop
adc
push
dec
push
out
or
dec
enter
sub
sbb
test
xor
(bad)
pop
xchg
xchg
daa
jmp
fwait
fs
push
sbb
push
mov
pop
cmps
mov
sub
or
jnp
dec
leave
(bad)
mov
sub
inc
inc
xchg
ins
cmp
sbb
push
test
into
jp
imul
mov
jmp
popf
test
mov
enter
mov
add
pop
cmp
jmp
pop
cmp
push
ret
stos
call
xchg
arpl
xchg
or
nop
xlat
je
stc
mov
sbb
push
jns
icebp
lea
addr16
ds
in
out
or
mov
adc
pop
or
ret
mov
mul
(bad)
(bad)
jbe
jnp
mov
jle
or
jmp
imul
lods
ret
lahf
sub
dec
ss
js
sub
or
repz
jns
(bad)
test
lods
push
xchg
test
(bad)
es
je
push
neg
cmps
ja
xchg
xor
shr
xchg
or
aam
hlt
dec
jmp
push
cmp
push
push
push
cmps
ds
(bad)
out
sar
in
jecxz
test
ficomp
(bad)
push
jns
mov
test
xchg
mov
scas
neg
push
dec
test
stc
mov
adc
out
pop
std
movs
inc
sbb
mov
out
mov
or
fxtract
xchg
cli
neg
jno
mov
repz
sbb
std
jp
cmp
mov
repz
xor
mov
data16
jg
or
jp
sub
jne
and
inc
mov
mov
xchg
iret
push
fsubrp
or
dec
aaa
xchg
jge
movs
retf
dec
push
cmp
mov
cmp
and
aad
imul
dec
aaa
pop
outs
imul
push
test
cmp
add
xor
pop
pop
les
int
cmp
and
(bad)
(bad)
jge
mov
das
js
aas
jns
jns
push
fnsetpm(287
mov
cwde
dec
jg
clc
scas
mov
mov
leave
pop
shl
js
jge
cdq
push
mov
fs
xchg
mov
inc
xchg
fwait
push
inc
loope
xchg
pop
dec
xchg
js
(bad)
es
int
pop
lods
sub
hlt
stos
ret
cld
pop
mov
pop
inc
test
inc
add
xor
sbb
test
pop
or
sbb
daa
movs
push
or
imul
mov
xchg
add
retf
or
xchg
push
imul
mov
push
je
adc
sub
mov
clc
call
out
cmps
mov
dec
(bad)
cmp
mov
mov
jbe
dec
sub
inc
cmps
push
xor
loopne
cmps
cmp
adc
imul
dec
(bad)
dec
dec
js
and
pop
jle
clc
mov
(bad)
int
test
sub
int
or
hlt
loopne
retf
lea
mov
mov
mov
call
cmps
int
clc
out
gs
pop
sub
repz
add
dec
or
js
push
imul
mov
ss
out
mov
push
rcl
add
add
push
or
shl
inc
neg
inc
dec
push
mov
pop
and
cmps
test
lea
pop
or
jno
or
pop
ins
cmp
call
lods
mov
xchg
push
pop
out
repnz
fstp
jno
ins
ficom
call
inc
jle
mov
lds
neg
xlat
je
out
test
cmc
xor
unpcklps
div
xchg
xchg
mov
(bad)
fisttp
and
sbb
cmp
dec
pop
ins
pop
pop
dec
dec
xor
jle
mov
xor
cmp
hlt
dec
neg
dec
add
xchg
jp
sub
fwait
jp
inc
ds
jbe
mov
call
dec
(bad)
cmc
and
pop
mov
push
xchg
addr16
popa
xchg
pop
out
aaa
pop
lods
enter
mov
jmp
ret
(bad)
addr16
loopne
sub
std
and
daa
dec
fst
pop
stc
cmp
jo
frstor
popf
or
sub
cmp
gs
jns
and
sbb
test
and
jmp
mov
and
pop
sbb
xchg
push
or
jns
loopne
adc
movs
mov
retf
jne
adc
les
push
fiadd
xchg
sub
lds
add
daa
sbb
(bad)
enter
(bad)
or
repz
sub
dec
mov
lea
xchg
lea
mov
ss
pop
lahf
or
cmp
add
call
int
test
lods
jecxz
push
cmp
cwde
call
test
test
push
xchg
shl
daa
int
inc
pop
lods
ins
mov
retf
sbb
fdivrp
cmps
lods
cmp
stos
stos
or
enter
xlat
ret
not
mov
scas
mov
out
int3
ret
jns
rcl
fisttp
adc
popf
cmp
sbb
lods
lods
dec
stos
aas
ret
or
(bad)
dec
mov
jp
ja
sbb
dec
std
xchg
in
cmp
pop
mov
inc
int
jno
add
or
fucom
(bad)
or
ja
jle
adc
sbb
imul
pop
out
shl
(bad)
js
std
or
push
lods
pusha
jbe
dec
inc
mov
out
dec
mov
and
inc
push
add
loope
xor
xchg
mov
inc
xchg
adc
add
xchg
repz
sbb
adc
add
jo
cmp
scas
sbb
dec
sbb
adc
mov
pop
repz
out
mov
ja
add
inc
scas
mov
(bad)
add
sbb
int3
fiadd
into
or
sti
mov
jp
int3
adc
addr16
shl
daa
cmc
rol
pop
and
push
push
mov
dec
lock
dec
inc
(bad)
add
sub
rol
inc
mov
jo
(bad)
and
adc
sbb
xchg
(bad)
nop
bound
fucomp
sub
(bad)
rol
add
xor
or
adc
sub
jo
pop
mov
xor
aas
adc
call
xchg
(bad)
jg
imul
stc
add
pop
sbb
das
movs
inc
mov
mov
or
setbe
mov
out
or
pop
sbb
inc
dec
ret
inc
add
and
imul
jnp
inc
pop
out
test
int
push
xor
dec
xchg
loopne
and
test
xlat
jbe
pop
add
mov
lahf
mov
gs
cmps
sbb
frstpm(287
xchg
lods
stos
ror
aaa
mov
pop
icebp
or
mov
dec
dec
ss
and
pushf
retf
mov
cwde
out
sahf
aaa
repz
xchg
jge
out
jae
out
jge
mov
pusha
and
add
mov
mov
xchg
pop
fdivr
jecxz
pop
ds
jge
icebp
outs
pusha
dec
pop
push
ret
and
ja
jnp
jmp
aas
pop
cmp
push
dec
(bad)
pop
in
test
dec
inc
jge
js
mov
mov
(bad)
aaa
pop
pop
in
mov
js
xchg
std
pop
inc
add
inc
aad
mov
xchg
(bad)
and
mov
test
js
xchg
xchg
mov
xor
or
mov
xchg
xchg
out
sbb
pop
stc
leave
fwait
mov
push
dec
push
jg
test
jo
mov
xor
outs
mov
and
mov
loope
jp
xchg
(bad)
jmp
aam
push
xlat
jbe
mov
call
and
test
xlat
pop
clc
sbb
test
enter
dec
jbe
push
js
sbb
inc
or
inc
xchg
xchg
stos
xchg
call
xchg
imul
lock
or
mov
cmp
hlt
xchg
clc
clc
cdq
retf
mov
movs
(bad)
mov
outs
mov
jne
cwde
add
inc
xchg
mov
xchg
in
out
pushf
call
and
dec
lahf
mov
xchg
mov
jp
repnz
popf
jnp
or
inc
jb
add
cmp
sbb
stos
inc
add
jae
sar
repz
push
mov
and
(bad)
leave
les
xchg
xor
cmc
push
(bad)
leave
rol
aaa
sbb
inc
and
sbb
jl
sub
adc
mov
lock
loopne
fimul
fidivr
and
xor
or
mov
inc
mov
sub
repnz
jne
cdq
inc
sub
les
rol
mov
jbe
mov
test
fiadd
pop
mul
and
jp
mov
popf
daa
data16
adc
ds
fisttp
clc
movs
and
xchg
jbe
sub
push
bound
js
(bad)
std
dec
add
ret
shl
sbb
xchg
mov
mov
daa
data16
dec
rol
out
jp
push
stc
mov
aaa
fwait
dec
scas
sub
adc
push
sub
cmps
test
lds
cmp
sahf
xchg
(bad)
push
dec
jnp
test
pop
js
jmp
add
or
fsubr
or
div
leave
xlat
mov
jne
jb
push
fisttp
adc
retf
or
in
ret
or
mov
mov
sub
push
xchg
add
mov
clc
or
adc
mov
outs
ror
xor
dec
dec
xchg
sti
and
fisttp
mov
shl
out
dec
jmp
repnz
mov
ret
mov
xor
test
sub
scas
nop
aaa
call
data16
mov
movs
aas
adc
imul
jne
ins
lock
jbe
or
adc
retf
mov
test
enter
sub
lea
cmc
data16
xor
mov
sub
mov
dec
(bad)
(bad)
shr
loopne
and
mov
in
fld
adc
jmp
sub
dec
pop
sbb
push
and
pop
lds
clc
sbb
inc
sbb
aam
or
pushw
inc
sbb
in
push
cwde
(bad)
adc
mov
mov
sub
jbe
or
js
cmp
sbb
(bad)
test
dec
out
lods
push
mov
lods
fwait
push
dec
ss
cli
push
or
xchg
jl
imul
out
pusha
push
call
jne
ss
mov
cmp
adc
ja
or
not
dec
aam
pop
cli
loopne
and
inc
lds
cmps
jecxz
repz
mov
cs
div
dec
aaa
scas
cmp
call
cmps
and
in
cmps
or
pop
dec
hlt
inc
movs
inc
imul
test
sub
cli
inc
push
test
rcr
rcr
test
je
jne
call
pop
(bad)
push
sub
dec
push
pop
dec
repz
xor
dec
pop
mov
adc
jecxz
dec
out
xchg
popf
and
mov
jge
movs
mov
std
sub
pop
scas
(bad)
cmps
inc
jo
outs
dec
xchg
ret
sbb
sbb
xchg
mov
fdivrp
rcl
jae
xchg
in
push
xor
dec
mov
js
dec
or
sbb
add
cmc
and
ror
sbb
lods
aad
int
adc
sbb
imul
sbb
sbb
retf
dec
inc
xor
xchg
jge
add
and
inc
ret
mov
mov
sbb
sbb
mov
cmc
push
inc
mov
sbb
adc
loopne
leave
cld
inc
shl
rol
fcmovnu
sub
xchg
clc
mov
xor
jge
cld
mov
(bad)
sub
fnsave
int
clc
imul
and
push
(bad)
cmp
movs
lods
pop
push
or
sahf
dec
stos
xor
or
clc
mov
inc
sub
es
cmc
rcl
push
js
pop
dec
fwait
mov
and
test
sbb
imul
mov
movs
mov
js
in
sahf
add
mov
stc
sbb
jo
mov
jne
cs
and
mov
shl
inc
test
cmc
jae
jbe
mov
and
ds
adc
xor
mov
cmp
xchg
adc
push
nop
or
pop
and
jb
sbb
push
retf
fild
mov
out
ss
jmp
inc
mov
inc
push
jl
je
jae
cmc
neg
cmp
ins
jge
sub
mov
mov
fsub
jl
pusha
adc
mov
jnp
cmp
cmp
lock
stc
test
cmc
call
jle
sub
fidiv
xchg
and
dec
(bad)
shr
rcl
pop
popf
test
adc
addr16
push
aaa
daa
ror
(bad)
shl
cld
enter
jmp
pop
mov
fmul
push
sub
mov
cs
inc
or
fyl2xp1
idiv
xor
push
lds
pop
jmp
pop
jmp
sub
lods
cmp
and
repz
mov
mov
sbb
adc
push
retf
rol
add
jmp
imul
repz
out
cwde
clc
mov
lds
cmp
leave
in
test
js
cmp
cmp
cmp
mov
push
in
xchg
cmps
sbb
jae
test
sub
scas
int
inc
test
xchg
mov
lods
mov
mov
xor
or
dec
xor
(bad)
xchg
cmp
add
cwde
in
cmps
mov
outs
jb
mov
or
push
adc
sub
stos
aam
(bad)
sbb
mov
mov
test
xchg
in
loop
push
xor
or
mov
xlat
retf
hlt
push
mov
ret
mov
dec
cld
lds
repnz
aaa
mov
fmul
jmp
pop
rol
inc
dec
mov
push
mov
or
dec
dec
pop
fldenv
out
add
test
gs
cmps
add
xchg
inc
cmps
outs
mov
js
int3
pop
ins
gs
fadd
aad
xchg
dec
idiv
or
in
sbb
imul
pop
jmp
or
dec
aaa
adc
sub
inc
push
mov
adc
in
in
jle
xlat
add
daa
pop
xchg
mov
jae
xlat
retf
into
cmps
cmp
cmp
movs
retf
mov
cmc
lods
in
frstor
fdecstp
mov
xlat
leave
pop
out
test
xchg
mov
sub
repz
add
cdq
mov
xchg
mov
loope
js
mov
clc
cdq
ret
je
scas
repz
(bad)
mov
cmp
push
mov
std
ror
xor
adc
xor
push
(bad)
leave
fcmovbe
mov
test
jnp
mov
test
fnsave
int
test
cmp
arpl
retf
hlt
push
and
push
xchg
jb
dec
pop
retf
dec
sub
xchg
inc
(bad)
es
mov
push
cmc
data16
pop
sbb
sub
aam
or
mov
and
mov
push
add
pop
inc
retf
out
and
stos
jmp
push
xchg
sub
mov
daa
push
xor
add
call
xchg
pop
stos
aam
out
js
cmp
mov
mov
jne
push
or
mov
inc
cmp
or
js
scas
ja
xchg
int
pop
stos
jmp
xchg
shr
(bad)
out
cmp
xor
pop
inc
sbb
push
in
xor
add
lods
neg
test
mov
sub
ror
outs
and
out
adc
lods
repnz
sti
call
movs
adc
daa
cmp
lahf
sbb
dec
mov
and
mov
shl
push
jne
add
daa
xor
dec
mov
jle
ss
cmps
retf
dec
nop
cli
pop
imul
sbb
xchg
(bad)
(bad)
and
js
sub
adc
mov
shl
dec
fst
stc
stos
sub
cwde
data16
mov
and
sub
std
jge
sbb
mov
stos
ja
lea
and
retf
rcl
sti
push
cmps
scas
xchg
or
mov
bound
xor
cmp
cld
imul
aaa
fsubp
into
ret
fbld
iret
std
je
pusha
std
arpl
lahf
pop
scas
inc
(bad)
(bad)
or
sub
jnp
push
xchg
jnp
pop
repz
mov
inc
cmp
cmp
sub
or
mov
inc
mov
add
mov
sar
lea
mov
mov
shl
jmp
xchg
cmp
cmp
push
out
call
mov
add
cmp
movs
fsubr
pop
leave
loopne
fst
sub
mov
out
nop
mov
and
popf
or
dec
push
fnstcw
pushf
mov
add
mov
and
jle
xchg
outs
loopne
jecxz
fcomp
xor
sub
jge
sub
pop
inc
jecxz
ja
ret
cs
test
lods
add
push
sbb
mov
and
std
fwait
add
inc
and
dec
jge
push
scas
ret
mov
loopne
je
inc
dec
inc
fcom
mov
std
cmp
add
sbb
fld
aad
jle
imul
cs
es
fld
adc
and
mov
dec
push
xor
(bad)
mov
clc
out
jnp
mov
(bad)
mov
jle
out
leave
jle
cmp
call
test
adc
ins
rcr
and
jge
sub
sbb
or
mov
test
push
push
or
repnz
int
cmp
mov
(bad)
dec
sbb
pop
jns
push
movs
cmc
sub
push
mov
clc
push
test
xlat
cmp
or
nop
and
push
add
pop
mov
xchg
adc
lahf
ret
mov
add
push
push
push
jo
inc
iret
pop
mov
ffreep
aam
mov
jl
(bad)
enter
push
mov
cld
dec
cli
je
aas
jp
iret
adc
pop
jo
push
rcl
mov
leave
cmp
cmps
cwde
mov
pop
repnz
imul
cmp
jmp
jl
std
or
mov
int
fild
sbb
in
adc
push
ins
or
xor
sbb
mov
sub
fldcw
pop
sbb
imul
mov
push
mov
(bad)
pusha
sbb
sbb
mov
xchg
fdivp
data16
test
push
ins
push
mov
out
adc
jnp
test
les
ret
scas
pop
iret
(bad)
jmp
sub
mov
mov
sbb
fidivr
jbe
clc
pushf
enter
bound
xchg
mov
outs
retf
push
popf
jl
aam
pop
dec
or
jo
test
jbe
call
jo
int
mov
add
sub
repz
sub
js
xchg
mov
mov
lods
cwde
rol
push
retf
div
(bad)
ins
imul
adc
loopne
mov
pop
dec
xchg
mov
dec
enter
ja
nop
test
xchg
pop
or
pop
fdiv
push
or
popf
inc
dec
faddp
sbb
lock
(bad)
jecxz
(bad)
ret
adc
les
pushf
fld
aaa
push
jp
(bad)
adc
sar
adc
add
test
xchg
scas
outs
cwde
imul
xchg
sub
or
cdq
adc
mov
mov
jl
in
cmp
cdq
mov
dec
mov
xchg
enter
or
(bad)
jno
jns
imul
lock
adc
popf
mov
push
sub
sbb
or
adc
mov
cmp
and
adc
loop
gs
test
sub
xlat
mov
shl
sbb
rcl
or
nop
cmp
dec
pop
(bad)
shr
jae
mov
xchg
jbe
add
aad
cs
cwde
in
dec
cmps
adc
cwde
test
dec
lahf
sbb
scas
mov
jl
xor
sub
push
pop
repz
int3
and
pop
inc
jo
dec
adc
mov
mov
rcr
sbb
mov
dec
mov
(bad)
fldenv
fiadd
in
add
inc
add
push
jle
push
leave
cwde
jns
imul
xlat
mul
(bad)
or
stc
jbe
(bad)
inc
push
movs
mov
into
add
hlt
std
or
popf
push
lea
jmp
push
(bad)
retf
dec
inc
das
movs
iret
jo
(bad)
iret
clc
scas
test
push
add
mov
adc
jecxz
fisttp
ret
xchg
xor
fstp
aad
lds
scas
dec
inc
xchg
pop
sbb
mov
cmps
out
push
xor
mov
xor
sub
dec
loopne
add
inc
mov
stos
inc
fs
xchg
sbb
or
cmp
cmp
retf
cld
adc
jecxz
fcomi
dec
and
xchg
pop
xchg
call
pop
aam
sub
mov
pop
in
movs
vorpd
add
push
cmp
pop
popf
lods
jae
jo
push
shr
call
in
and
sub
xchg
mov
in
jg
mov
cmp
pop
(bad)
ficom
adc
pop
stos
xchg
and
inc
cmp
arpl
inc
push
frstor
sub
fistp
add
ror
and
xor
sbb
fs
cmps
and
mov
jnp
jg
pushf
test
cmp
jge
pop
int3
nop
sub
sbb
sti
das
push
push
xor
wbinvd
xchg
(bad)
out
(bad)
(bad)
xor
cmp
cmp
outs
test
push
mov
or
arpl
push
cmp
cmps
cmp
sub
fst
sti
inc
push
adc
call
dec
addr16
fisttp
mov
leave
in
xor
inc
ret
fstp
fld
push
jnp
call
mov
pop
lds
shl
fsubr
dec
xchg
push
shl
pop
cwde
xchg
mul
cmp
sub
adc
xchg
inc
fst
sar
sub
sbb
adc
gs
jne
pusha
mov
xor
xor
dec
in
xchg
adc
cmps
cmp
or
adc
jl
push
cmp
outs
jns
sbb
or
push
add
push
repz
mov
inc
ret
push
jns
and
jno
mov
sub
js
fcom
mov
mov
cmp
or
adc
pop
dec
inc
out
mov
mov
std
gs
cmp
inc
dec
and
ror
sbb
pop
jbe
shl
popf
xor
int
jne
pop
fwait
cmps
pushf
xchg
outs
inc
sbb
enter
daa
mov
lea
popf
mov
test
inc
xor
cli
xchg
push
cmp
repz
mov
inc
sbb
or
in
jecxz
add
fcmovne
cmps
pop
sti
pop
xrelease
sbb
xchg
cmp
push
add
sub
sub
dec
push
mov
repz
mov
push
push
mov
and
stos
ins
fisub
pusha
jo
mov
test
cwde
xchg
adc
int
sbb
(bad)
les
stc
or
jns
sbb
or
fstp
mov
pop
xchg
movs
call
leave
js
pop
push
xchg
cs
and
xlat
cwde
inc
mov
xchg
jmp
mov
stc
fild
jmp
sbb
mov
rcl
test
(bad)
cmp
xchg
pop
jns
imul
mov
test
pop
nop
dec
fwait
cli
out
neg
and
push
js
push
aad
or
jg
xrelease
cmps
sbb
pop
aaa
ds
fstp
in
sub
mov
add
sti
aad
mov
(bad)
out
adc
fmul
(bad)
ror
dec
jae
cmp
push
je
sub
ja
pop
frstor
xor
sub
lock
repz
mov
push
mov
(bad)
pop
mov
test
ficomp
lea
jle
dec
dec
adc
cmps
outs
mov
xchg
add
cmp
mov
(bad)
(bad)
(bad)
cmp
icebp
inc
inc
adc
pop
jne
push
or
(bad)
push
xchg
and
mov
sub
adc
mov
push
xor
data16
dec
pusha
jns
jmp
out
std
int
lahf
retf
rcl
and
sub
cmp
sub
scas
sub
je
test
fdiv
rol
test
cmp
add
int
cmps
mov
scas
add
pop
dec
fimul
pop
mov
das
js
addr16
outs
pusha
push
xor
cwde
scas
push
outs
add
mov
sar
ret
mov
push
mov
push
in
mov
inc
fbstp
or
int
fsubr
repz
outs
jnp
inc
dec
push
js
push
ja
dec
jae
xor
fs
jae
call
pop
mov
(bad)
push
aad
adc
adc
pushf
repnz
std
arpl
scas
mov
sub
or
popf
jns
ss
and
ficom
call
sub
fsubr
aas
in
test
xor
cwde
cmp
lea
jge
jb
pop
adc
push
cmp
ror
push
jecxz
rol
(bad)
mov
inc
cmp
mov
arpl
push
dec
inc
in
mov
pop
jl
push
pop
popf
jo
push
stos
call
popa
add
daa
nop
lea
sbb
cmp
int
cmc
mov
lock
call
stos
gs
ins
int
ror
sub
xchg
cmp
pop
outs
add
std
xchg
retf
sub
push
hlt
popf
in
push
lods
dec
mov
sti
cdq
mov
push
mov
(bad)
mov
xchg
push
cmp
scas
mov
js
mov
loopne
xchg
mov
mov
dec
fnstcw
fisttp
and
push
or
in
shr
repz
popf
dec
fst
xor
sub
push
xchg
pop
scas
or
cmps
test
push
pop
mov
sti
sar
push
js
pop
stc
add
cmp
inc
mov
inc
stos
and
call
cmp
push
(bad)
(bad)
(bad)
pop
pop
or
xor
mov
mov
in
or
out
out
cmps
add
pop
(bad)
es
or
in
push
sar
and
jns
fdivr
out
cmps
daa
test
sub
push
cmp
push
pop
push
ja
xchg
sbb
adc
daa
cs
mov
inc
xor
sti
mov
out
mov
jl
aam
out
jge
xchg
leave
xchg
cmp
(bad)
shl
jmp
pop
scas
pop
push
stc
out
neg
movs
call
(bad)
ja
movs
ss
sub
mov
push
mov
push
ja
add
arpl
popf
(bad)
enter
loope
push
mov
xchg
mov
inc
push
jns
imul
jae
jmp
pop
aas
push
je
adc
xor
mov
fcomp
jl
lock
cmps
mov
adc
dec
inc
mov
fwait
xchg
dec
je
sub
fst
mov
jnp
movs
idiv
leave
ret
jns
sbb
cmc
and
es
mov
fcomp
out
mul
mov
(bad)
sub
test
(bad)
pop
xor
and
jmp
xchg
push
mov
call
(bad)
cdq
dec
pop
mov
xchg
jbe
jp
pop
jns
retf
les
retf
mov
std
push
and
dec
sahf
push
sbb
inc
ins
and
nop
push
std
popa
in
push
cdq
add
aas
mov
push
fimul
js
xchg
mov
xchg
inc
fisttp
in
and
pop
adc
xchg
out
loopne
jle
in
test
mov
in
daa
mov
jo
lods
repz
repz
cmp
jnp
xchg
push
add
mov
add
fnstsw
inc
xor
idiv
pop
mov
xchg
mov
jae
fisttp
cmp
cli
dec
inc
iret
cs
lods
xor
or
ficom
ins
lock
dec
xchg
ret
xlat
jae
push
or
data16
inc
mov
jae
call
(bad)
sub
lea
jne
cmps
push
fstp
xchg
aaa
or
dec
push
fisubr
mov
dec
mov
xor
sbb
push
xchg
loop
adc
fmul
sub
xor
(bad)
dec
cli
mov
ret
and
ins
inc
cmp
inc
popf
jecxz
xlat
pushf
movs
int
inc
pop
(bad)
es
push
hlt
inc
or
add
pop
ja
xchg
cld
mov
add
add
pop
inc
xchg
lods
xor
mov
rol
sbb
xchg
dec
mov
xor
mov
push
jge
sbb
rcr
mov
movs
xchg
nop
in
movs
adc
push
sub
or
jbe
inc
aam
test
push
out
cmps
int
clc
jecxz
jecxz
pop
js
test
sub
push
pop
ss
push
dec
push
call
add
call
sub
sub
fadd
rcl
jbe
jge
cdq
dec
push
test
sbb
push
retf
cmp
pop
xchg
shl
jnp
mov
dec
mov
push
push
mov
stos
pusha
sahf
jmp
cmp
shr
add
and
xor
xor
xchg
fucomp
mov
popf
(bad)
and
out
sub
stc
ins
cmps
ins
in
push
mov
(bad)
aad
cld
xor
xor
test
(bad)
dec
fnstcw
xchg
retf
xchg
adc
mov
xchg
lock
dec
or
dec
mov
push
sbb
dec
and
in
cbw
jns
xchg
add
arpl
call
ss
push
sbb
mov
retf
test
lods
in
mov
(bad)
(bad)
xchg
mov
cmp
mov
leave
jmp
js
jecxz
sbb
sbb
mov
lods
mov
push
inc
adc
xlat
ds
dec
dec
xlat
test
mov
mov
pop
fwait
mov
(bad)
enter
mov
cs
add
push
in
int3
aam
outs
call
push
jmp
stc
test
sti
cdq
xchg
jbe
push
adc
or
xor
or
pop
push
gs
and
es
lea
cwde
in
mov
xchg
jp
outs
dec
jnp
or
pop
ds
add
cdq
fwait
jb
stos
dec
push
mov
xchg
adc
call
(bad)
mov
out
and
add
jmp
dec
retf
xchg
sub
adc
call
mov
lods
call
jmp
lock
fld
sub
cdq
enter
cmp
push
lock
cs
sbb
icebp
and
ror
push
not
(bad)
fld
call
xor
dec
cmps
aaa
jbe
mov
out
out
into
xchg
cmps
or
repnz
sar
or
sbb
or
call
icebp
loopne
inc
iret
enter
movs
push
pop
leave
mov
clc
lea
sti
inc
push
and
std
dec
mov
(bad)
mov
imul
xor
sbb
out
(bad)
jge
stos
jp
xor
mov
mov
fmul
push
mov
daa
xor
(bad)
jecxz
dec
jle
add
test
in
jns
scas
mov
xor
rcl
jo
arpl
inc
xor
push
mov
push
imul
or
jne
into
les
xchg
push
or
lea
dec
aas
imul
mov
std
add
cmp
jmp
push
mov
lds
popa
pop
test
push
jge
mov
popf
cmp
and
xchg
lds
nop
outs
in
adc
dec
mov
test
adc
bound
dec
arpl
int
aaa
mov
ss
(bad)
retf
in
xchg
mov
add
push
in
test
push
xchg
dec
(bad)
mov
imul
xchg
mov
test
push
out
lock
xor
pop
das
outs
dec
sbb
imul
stos
push
push
loope
mov
clc
movs
push
add
cwde
and
hlt
mov
dec
mov
inc
or
jns
outs
mov
ins
push
cmp
xchg
pop
test
inc
or
xchg
cmps
sub
xchg
and
test
add
int
inc
pop
pop
in
aaa
dec
push
dec
mov
cdq
arpl
sub
mov
cli
pop
(bad)
hlt
enter
xor
ins
lock
cwde
(bad)
aas
jge
xor
push
add
mov
inc
int
call
inc
int
mul
xchg
adc
and
inc
dec
inc
push
push
push
inc
dec
fistp
outs
fistp
daa
mov
mov
shl
push
and
cmp
adc
jmp
mov
xchg
sbb
call
rcr
push
pop
xlat
sub
imul
mov
popf
dec
pop
add
stos
pop
cmp
xor
sbb
je
movs
retf
inc
test
jo
dec
cmp
dec
adc
inc
add
xchg
add
retf
mov
inc
mul
xchg
mov
gs
test
ret
shr
hlt
add
mov
sbb
and
sbb
(bad)
pop
aaa
push
pop
mov
stc
stos
jmp
xlat
aas
cdq
test
xchg
xor
xchg
push
fadd
or
jge
jmp
push
jge
xchg
jp
inc
adc
mov
xchg
fild
daa
mov
aam
fldenv
popf
cmp
mov
sub
push
repz
jbe
xchg
(bad)
jmp
sbb
sub
mov
retf
ins
retf
cs
mov
lea
dec
mov
call
push
or
icebp
outs
mov
jns
sbb
lods
neg
cmp
mov
mov
das
sbb
out
adc
cmps
jmp
out
mov
mov
mov
push
sub
call
ret
add
clc
jecxz
or
es
fisttp
or
clc
pusha
test
xchg
ret
ja
jne
dec
or
cmps
dec
(bad)
mov
int3
xor
push
add
jge
xchg
jbe
mov
mov
test
adc
daa
sar
sub
aam
pop
push
cmp
xchg
inc
mov
out
xor
adc
cmc
push
jne
call
into
xor
mov
inc
js
in
aad
dec
adc
sub
addr16
movs
pop
aaa
popf
(bad)
aaa
sub
arpl
leave
nop
jb
push
mov
xchg
dec
cmps
out
mov
call
jb
cwde
not
(bad)
lea
sbb
or
in
cmps
push
dec
fild
mov
jp
push
clc
movs
pop
add
sahf
xchg
cmp
xlat
jae
push
add
xor
dec
test
cwde
rol
mov
lods
push
(bad)
cwde
xchg
imul
inc
(bad)
(bad)
stos
sub
sti
dec
retf
mov
les
ret
in
in
push
or
enter
jmp
xor
mov
mov
inc
dec
or
addr16
test
ja
into
mov
xchg
jbe
cmp
std
cmps
push
inc
enter
or
adc
or
sbb
jne
or
dec
or
fnstsw
out
outs
and
push
test
jae
rcr
stos
scas
xor
retf
xchg
stos
mov
or
movs
jge
je
inc
inc
push
aam
je
jl
aad
dec
xchg
mov
jp
sar
ins
arpl
xchg
data16
(bad)
cmp
add
push
inc
jecxz
or
pusha
aad
or
xor
into
push
xchg
mov
(bad)
cwde
jns
push
clc
ins
arpl
rcr
xlat
mov
push
push
inc
repnz
cs
push
dec
fild
mov
fcom
push
sub
scas
mov
(bad)
xor
nop
ss
out
or
sahf
mov
scas
mov
pop
aam
xor
push
jne
popf
ss
cmp
lock
mov
jecxz
in
mov
or
xchg
call
shl
mov
call
pop
lds
rol
push
mov
jno
dec
imul
scas
enter
push
push
dec
mov
push
inc
cmp
scas
and
data16
sub
leave
adc
enter
or
inc
push
cmp
daa
ja
mov
call
pop
stc
pop
fwait
enter
pop
jbe
sar
fstp
imul
test
and
sbb
mov
push
mov
lods
fs
ficom
xchg
out
call
out
retf
adc
push
mov
fwait
je
lsl
loope
inc
pop
xor
neg
aam
div
and
add
nop
mov
sbb
push
xor
sub
add
adc
movs
cmc
jbe
pusha
popa
lahf
add
adc
les
and
adc
mov
outs
adc
mov
ret
adc
jp
xchg
aam
adc
adc
adc
pop
int
pop
mov
repnz
mov
fucom
sbb
shl
add
lahf
jl
xchg
cmc
rcr
ret
test
pusha
inc
dec
jo
fisub
mov
mov
cmp
hlt
add
pop
cwde
std
pop
and
enter
repnz
push
(bad)
scas
fnstcw
ins
or
dec
imul
xchg
sbb
xor
mov
pop
data16
sbb
sub
pop
cmp
pop
push
adc
or
and
dec
xchg
std
sbb
push
fwait
inc
mov
stc
fdiv
sbb
pushf
and
mov
test
inc
xchg
in
fmul
mov
inc
aaa
cmp
or
and
cmps
aad
adc
adc
std
cwde
or
cwde
xchg
push
test
lods
and
pop
adc
clc
mov
jns
mov
mov
sti
fisubr
jne
gs
ins
repz
inc
mov
ret
shl
frstpm(287
xchg
lods
stos
ror
aaa
mov
fld
add
inc
call
jns
icebp
cmp
cmp
pushf
neg
dec
jecxz
rcl
daa
sbb
inc
js
xchg
std
pop
or
jns
clc
jmp
rcl
mov
(bad)
out
addr16
xchg
data16
ins
idiv
cdq
xchg
cli
fcmovne
dec
push
xor
test
cwde
dec
int
clc
repz
lock
pop
out
dec
cli
cmc
stos
push
stos
pop
jmp
mov
xchg
mov
clc
mov
or
lods
push
(bad)
daa
push
test
data16
or
ret
add
(bad)
sahf
std
retf
xchg
movs
std
loope
cmp
ss
cmps
xor
or
and
mov
mov
call
ds
jne
mov
xchg
std
rcl
test
pop
ret
mov
adc
or
mov
pop
or
in
dec
adc
cli
pop
js
imul
jge
(bad)
enter
aam
jl
or
adc
mov
cwde
push
cmp
aad
xchg
cli
outs
sbb
clc
jge
mov
out
test
dec
inc
sahf
pop
inc
pop
lods
scas
enter
mov
xor
(bad)
ins
cwde
mov
dec
js
jge
(bad)
xchg
inc
and
mov
ret
int
mov
sub
sub
jle
aam
fidivr
sbb
leave
idiv
xchg
sub
cli
mov
clc
mov
and
jne
nop
ss
inc
push
jmp
sbb
inc
and
xchg
adc
pop
lock
(bad)
ins
jb
(bad)
out
xacquire
inc
xchg
int3
sar
inc
jecxz
ret
mov
adc
or
lods
add
jp
push
fstp
mov
pop
or
iret
je
out
loope
fist
out
sub
mov
xchg
cmp
inc
push
int
pop
inc
and
fwait
mov
push
jno
loopne
cmp
xor
(bad)
adc
hlt
mov
jne
mov
lods
and
lea
popf
or
dec
jmp
iret
rcl
mov
nop
mov
lds
push
and
jns
and
aaa
or
imul
call
popa
test
xchg
ins
jp
pop
daa
push
lds
aam
in
xor
mov
mov
dec
mov
ja
or
retf
push
sub
jmp
(bad)
mov
inc
aas
(bad)
not
ror
xchg
and
push
push
imul
sbb
and
jmp
jmp
shl
xchg
test
je
js
mov
add
pop
xor
div
pop
aad
in
cmp
xchg
pusha
repz
outs
popa
lods
lea
and
push
(bad)
repz
mov
sbb
fcomp
arpl
cmp
sub
inc
sbb
inc
ret
sub
pop
sub
out
jbe
jb
sub
pop
std
out
not
mov
cmps
or
jbe
jle
push
pop
sbb
and
xor
add
adc
jecxz
mov
test
mov
add
cmp
xchg
pop
lock
add
enter
jmp
xchg
mov
adc
adc
adc
pop
sbb
cmp
jae
inc
hlt
dec
js
push
cmps
cmc
and
push
ss
xchg
imul
push
fist
and
mov
adc
and
(bad)
sbb
not
out
mul
mov
jmp
movs
pop
mov
repnz
outs
or
cmp
dec
jne
mov
pop
aas
ss
mov
push
push
bound
jbe
xchg
push
push
ds
int
sti
sub
inc
out
or
jle
lds
cmp
mov
dec
inc
pop
cmp
into
stos
mov
cli
cmp
inc
add
mov
jle
xchg
shl
xchg
cmp
enter
movs
cmp
into
dec
sbb
icebp
jo
(bad)
int
mov
pop
or
mov
xlat
mov
adc
fisubr
dec
and
lods
and
jo
add
xor
pop
xchg
jp
hlt
ss
push
pop
cmc
cmps
jecxz
pop
mov
movs
fcomp
mov
jnp
retf
call
pop
sbb
cdq
jge
cdq
cmps
add
ja
(bad)
aad
jae
sub
cmp
clc
ss
push
jne
and
jae
mov
and
or
push
push
and
pop
cli
pop
jmp
cmps
scas
lds
in
and
push
dec
aad
mov
push
pop
ss
stc
dec
pushf
xchg
push
push
std
shr
ret
clc
aad
pop
daa
cmp
movs
ins
ss
dec
out
sbb
test
cmps
jmp
gs
sbb
ss
push
lea
data16
mov
sub
addr16
sbb
fcom
sub
lods
push
in
imul
mov
and
in
lds
inc
out
sub
lods
rcl
out
ss
(bad)
jecxz
sbb
int3
jne
test
sbb
sbb
out
add
adc
xchg
jecxz
add
cdq
test
mov
inc
pop
mov
cmp
pop
shl
push
js
sub
fisttp
xchg
cld
mov
sub
mov
ins
stc
pop
add
push
test
addr16
clc
xchg
pop
mov
clc
xor
ins
or
dec
cdq
fidiv
cmps
or
mov
xchg
ret
xlat
sub
push
dec
inc
ins
xor
push
mov
jbe
push
lea
lahf
sub
jae
imul
jbe
lds
std
adc
cmp
mov
sub
inc
jmp
icebp
cmp
js
mov
and
popf
cmp
das
sbb
add
ss
clc
sahf
jae
mov
ja
jmp
(bad)
fucomp
neg
ftst
cmc
sbb
sbb
repz
pusha
scas
pop
xchg
mov
xchg
sbb
sub
fstp
ins
xor
jmp
sar
adc
aad
inc
sub
loope
repnz
(bad)
sti
adc
(bad)
neg
std
jge
cmp
dec
cmps
sbb
inc
add
mov
(bad)
push
stc
xor
and
dec
add
fs
je
jns
sbb
aam
lea
(bad)
lods
inc
neg
inc
ins
aad
in
xchg
sub
inc
mov
leave
call
cwde
xchg
or
lods
sbb
xchg
push
and
xor
mov
xchg
xchg
mov
test
cmp
lock
mov
sub
mov
cmps
lods
out
or
in
fdivr
push
stc
adc
test
or
xor
push
cwde
(bad)
cmc
shl
call
(bad)
mov
push
sbb
std
adc
cmps
in
shr
(bad)
es
cmp
bound
xchg
push
adc
addr16
mov
or
arpl
daa
cmp
cmp
xchg
mov
dec
sbb
push
stos
test
push
lds
(bad)
pop
into
sbb
fs
int
enter
popf
inc
shr
jp
lods
ss
inc
xor
ud2
ret
and
cmps
and
sar
mov
loopne
dec
adc
imul
or
jp
mov
mov
call
xchg
outs
adc
ins
push
leave
push
cmp
adc
xor
shrd
mov
jns
sub
sbb
rol
lahf
fwait
mov
retf
ss
push
or
cmp
sub
xor
xchg
mov
(bad)
cld
sub
adc
call
or
in
sbb
aad
or
(bad)
retf
dec
sbb
xchg
leave
sub
(bad)
and
stos
xchg
mov
push
test
fisubr
mov
mul
rcr
jmp
std
imul
test
(bad)
push
js
in
out
test
or
xchg
(bad)
xor
retf
sub
mov
jnp
pop
out
add
nop
mov
add
fldcw
(bad)
js
push
push
xchg
(bad)
and
cmp
out
dec
push
(bad)
fst
cmp
mov
sub
out
jns
icebp
out
test
cld
std
mov
mov
aad
push
dec
test
out
dec
into
mov
mov
jnp
xchg
jne
loopne
xor
and
pop
neg
xchg
xchg
mov
mov
dec
ja
clc
imul
add
(bad)
fldcw
ds
pop
test
jns
jge
cmps
int
add
std
popa
loopne
ret
xor
out
daa
shl
les
and
fucomp
pop
in
cmc
cwde
inc
ja
(bad)
arpl
mov
daa
inc
out
retf
(bad)
ins
cwde
push
xchg
inc
sub
(bad)
sub
arpl
cmp
sbb
imul
mov
inc
xchg
test
jecxz
add
ja
xchg
dec
add
adc
mov
rol
mov
(bad)
mov
popf
clc
pop
call
aad
sbb
mov
fmul
xlat
sar
push
jl
push
push
mov
outs
inc
push
pop
inc
and
arpl
rcl
(bad)
pop
push
pop
inc
lds
jbe
inc
retf
push
cmp
sub
neg
js
adc
lock
pop
(bad)
retf
out
sbb
sti
cmps
mov
jecxz
es
push
aaa
mov
fdivr
jl
je
test
mov
add
xor
jne
neg
jb
fbld
mov
imul
mov
inc
cwde
icebp
int
(bad)
loop
jnp
je
push
add
cwde
ins
lea
aam
enter
sub
je
mov
data16
mov
retf
cwde
pop
aaa
fmul
adc
jne
ficomp
pop
push
jns
sbb
push
xor
cli
imul
push
mov
mov
jae
or
inc
cmc
jae
mov
inc
dec
fild
cmp
retf
popf
repz
jge
ret
fwait
(bad)
es
out
push
jmp
lods
repnz
mov
and
xchg
jge
ins
fadd
and
dec
push
test
test
cmps
sbb
call
fisttp
retf
imul
fdivr
int3
sub
outs
repnz
cmp
xchg
mov
mov
aad
(bad)
call
adc
lods
ss
push
test
mov
xchg
adc
lock
sti
push
xchg
repnz
stos
jnp
or
jno
call
xchg
test
push
fnsave
push
mov
adc
jge
xchg
inc
(bad)
push
inc
or
call
pop
int
xor
dec
rcl
cwde
clc
mov
fwait
(bad)
imul
je
(bad)
dec
lea
xchg
mov
dec
lock
jecxz
movs
arpl
call
jo
cli
jge
daa
pop
sbb
(bad)
fnstenv
xchg
imul
pop
mov
pop
xor
jl
cdq
mov
and
mov
loopne
push
adc
test
jp
sub
sbb
es
add
push
daa
cmps
sti
addr16
cdq
call
ror
jae
(bad)
cmp
jecxz
std
movs
push
lds
adc
shr
imul
xchg
test
(bad)
retf
pop
mov
jmp
sub
scas
scas
cli
adc
out
mov
ror
stc
inc
xlat
cmp
icebp
ss
jbe
adc
dec
lea
fdiv
es
inc
(bad)
pop
aad
out
xor
bswap
ror
faddp
retf
jae
call
xchg
cmp
dec
sahf
js
push
lods
xor
ret
ja
cwde
mov
mov
lods
push
xchg
(bad)
jmp
cmp
xor
or
dec
std
shr
cwde
cli
ja
aas
sahf
clc
mov
test
sub
dec
inc
cli
out
dec
push
mov
xor
pop
cmc
addr16
fld
xor
imul
adc
sub
sti
sub
rcr
stos
mov
mov
mov
lods
outs
je
mov
inc
xchg
adc
movs
push
call
xchg
jmp
fld
test
outs
jbe
retf
test
sub
and
dec
iret
mov
cdq
enter
xlat
mul
dec
enter
nop
mov
dec
stos
call
shr
ds
sub
mov
pop
jmp
fst
dec
fld
imul
or
dec
sbb
add
gs
call
es
jbe
int
pop
aas
and
xchg
rcl
sub
inc
jb
jge
xchg
inc
push
retf
mov
test
cwde
jns
mov
inc
enter
sub
push
or
push
or
or
cmps
shl
repz
xchg
das
xor
mov
dec
mov
iret
rcr
arpl
xor
jbe
mov
lds
pusha
(bad)
sahf
ss
enter
or
push
fcomp
push
loopne
data16
mov
enter
cmp
push
xor
test
ret
pop
(bad)
or
out
mov
jo
push
dec
inc
adc
dec
cwde
sub
inc
xor
mov
call
ret
jne
aam
dec
inc
or
mov
jbe
xor
inc
or
shr
or
mov
push
out
aam
test
cmp
push
dec
test
fimul
jmp
sub
movs
mul
retf
xchg
cmp
dec
(bad)
pop
test
adc
test
pop
adc
(bad)
enter
jl
or
sub
std
rol
fnstsw
mov
xchg
mov
xchg
sbb
cmp
out
dec
retf
jg
pusha
cmp
and
rol
sbb
mov
jmp
adc
cmps
mov
xchg
mov
dec
cwde
xor
jge
xchg
aas
mov
sub
hlt
mov
jbe
outs
(bad)
daa
cmp
(bad)
mov
jbe
sub
nop
cli
imul
rcr
les
cmp
or
mov
add
dec
push
xchg
sahf
daa
mov
out
je
inc
dec
out
(bad)
and
xchg
mov
retf
mov
clc
sbb
neg
(bad)
xchg
(bad)
jp
aam
out
sub
pop
cmps
cmc
mov
jns
xchg
cmp
adc
xor
fs
out
les
pushw
inc
lock
mov
imul
fadd
enter
outs
test
jmp
test
scas
std
dec
(bad)
xchg
cmps
mov
xor
mov
mov
inc
mov
das
push
add
push
inc
jmp
mov
aas
xchg
loopne
push
dec
ret
(bad)
cmp
out
rcr
test
mov
ret
movs
cmp
add
loop
mov
fld
pop
push
mov
inc
dec
ins
xor
mov
daa
loopne
fsub
inc
pop
sar
sbb
in
nop
call
iret
mov
inc
sub
add
jecxz
call
dec
pop
shl
sub
sub
dec
mov
int
cld
jecxz
sbb
fstp
mov
or
sub
cdq
pusha
xor
inc
mov
mov
jns
push
js
push
sub
repnz
inc
mov
stos
dec
push
cmp
hlt
iret
inc
mov
cmp
mov
pop
ins
cmps
aas
cmps
add
mov
repz
jns
jmp
push
sub
jge
pop
repnz
mov
inc
in
pop
or
stos
xor
add
cmp
and
fbld
push
test
scas
jbe
xor
pop
sub
fimul
pusha
sbb
dec
pop
mov
and
push
loopne
xchg
push
call
call
mov
or
pop
mul
outs
aaa
and
daa
jmp
rol
nop
mov
in
inc
(bad)
jo
mov
xchg
hlt
inc
sbb
fadd
mov
jae
jmp
ins
nop
dec
outs
inc
xchg
test
cwde
in
ja
mov
dec
enter
sub
sbb
sahf
js
in
or
adc
fisubr
jp
sub
scas
or
sub
imul
jb
or
cdq
cmps
sub
mov
(bad)
out
xor
and
sbb
enter
push
cmp
mov
xchg
add
mov
(bad)
(bad)
sbb
pusha
jmp
repz
mov
je
jl
mov
es
cmp
pop
adc
pop
jmp
sbb
pop
sbb
sbb
cmp
std
or
cmp
out
or
push
push
push
xor
mov
xor
es
popf
dec
xchg
xchg
push
mov
or
sar
sti
js
add
out
or
mov
add
out
or
jge
add
loope
int
or
xor
inc
or
fs
sbb
js
inc
push
cmps
inc
dec
test
xchg
xchg
hlt
add
cmp
cmp
mov
cli
cld
sbb
mov
push
into
sub
mov
push
cmp
fimul
ficom
cdq
adc
cmp
cmps
test
imul
inc
enter
daa
retf
or
adc
and
inc
inc
push
pop
(bad)
faddp
pushf
mov
jecxz
mov
neg
ret
aam
sub
adc
popf
and
or
or
jbe
lsl
xchg
add
lods
shl
xchg
sub
inc
cmp
addr16
adc
loope
aam
rcl
lods
shl
loope
pop
popf
cmp
xchg
fbstp
scas
mov
shl
popa
jge
pop
inc
std
mov
dec
enter
ss
ret
ret
push
xchg
pop
push
xchg
xchg
fmul
adc
lods
ins
leave
fwait
push
jle
mov
scas
pop
(bad)
mov
mov
shl
int3
mov
cmp
repz
out
nop
mov
imul
shl
nop
cmp
mov
inc
repz
sub
cmp
pop
push
cmp
or
push
fmul
pop
cmp
movs
ss
push
push
ficomp
or
dec
or
div
jo
retf
ins
scas
xchg
jnp
inc
or
adc
data16
push
retf
enter
xlat
div
retf
fidivr
mov
ret
add
add
leave
xchg
sub
out
inc
repz
pop
adc
mov
xchg
js
push
inc
push
ds
mov
ror
mov
mov
stc
pop
push
xchg
data16
xchg
lds
adc
sub
or
push
cmp
(bad)
jnp
je
jae
jmp
push
jge
fld
and
inc
jo
cmp
call
pop
sbb
not
push
ins
loopne
pop
mov
and
pop
aad
push
clc
xchg
jmp
adc
pop
les
imul
sbb
outs
dec
xor
lds
std
pop
movs
lock
rcr
sbb
ins
jge
pop
sar
scas
stos
mov
je
adc
rcl
lods
addr16
xchg
mov
cmp
mov
sub
inc
push
loopne
dec
and
jbe
retf
dec
push
hlt
jmp
lods
adc
movs
add
adc
xchg
push
mov
aam
push
push
or
shl
cmps
mov
pop
ret
push
dec
cdq
les
adc
cld
(bad)
mov
sub
stos
pop
adc
js
dec
(bad)
pop
xchg
fsub
mov
adc
jnp
sub
enter
mov
push
mov
lds
push
jp
mov
cmp
mov
pop
shl
or
jle
add
mov
jbe
(bad)
call
(bad)
sub
inc
adc
and
bound
jns
ret
sti
scas
mov
adc
daa
repz
xchg
retf
test
xchg
jbe
mov
clc
out
enter
mov
jecxz
pop
inc
(bad)
imul
jns
aam
pop
push
push
test
ror
xchg
or
add
adc
inc
pop
lea
fsub
or
stos
pop
adc
and
adc
sar
xchg
leave
pop
push
test
dec
mov
les
clc
sbb
pop
(bad)
cwde
out
fldcw
push
jmp
xlat
pop
push
dec
adc
mov
add
stos
rep
jge
(bad)
sbb
cmp
jmp
push
js
sub
xchg
mov
jns
xor
dec
or
lods
cmp
aad
push
dec
cwde
or
popf
xor
out
jnp
popf
inc
or
nop
data16
add
and
jecxz
mov
xchg
jno
and
js
cmp
push
xor
setns
pop
push
ins
test
cwde
xchg
cs
mov
lods
push
(bad)
lock
push
out
pusha
xchg
xor
fcmovnu
sbb
in
cs
mov
fsubr
sub
stc
or
mov
add
xchg
inc
in
dec
out
inc
push
cli
inc
dec
mov
hlt
pusha
jmp
xchg
inc
adc
aad
mov
in
out
test
pusha
leave
sbb
js
stos
jbe
int3
test
inc
lock
push
dec
(bad)
sub
inc
inc
pop
repz
mov
inc
pusha
imul
and
push
cdq
xchg
dec
js
ds
xor
ds
and
mov
and
mov
push
push
les
push
inc
jge
mov
lea
imul
daa
dec
fwait
xchg
cmp
mov
sub
adc
sbb
mov
mov
xchg
xchg
sti
ins
aas
test
or
sar
mov
popf
repz
jnp
inc
dec
enter
adc
cmps
push
(bad)
int3
sub
stc
int
nop
xchg
mov
xchg
mov
pop
mov
in
push
aad
fsubr
pop
jo
or
js
add
shl
ja
nop
mov
leave
xchg
stos
ins
jecxz
push
clc
out
xchg
mov
repz
or
xchg
inc
mov
pop
sbb
and
adc
push
inc
cwde
outs
mov
sub
pushf
daa
stos
mov
les
pop
dec
js
push
inc
xor
dec
in
push
neg
enter
mov
pop
repz
arpl
nop
ds
cmps
clc
mov
pop
(bad)
call
cmp
les
push
pop
adc
xchg
cli
cmps
std
ret
or
pop
or
and
push
or
js
cmp
xor
inc
jo
mov
mov
cmp
pop
in
je
mov
push
and
add
mov
xchg
jbe
daa
or
xor
push
loopne
cwde
and
and
cmps
lds
lods
clc
popa
or
inc
mov
jnp
std
mov
ror
xchg
jne
mov
adc
push
xchg
mov
jmp
out
jecxz
cdq
enter
push
out
or
xor
sahf
mov
or
in
or
dec
mov
mov
lods
stos
jb
cld
push
xor
retf
mov
mov
or
inc
mov
mov
lock
cli
int3
(bad)
jg
mov
adc
out
sbb
das
push
push
pop
ds
dec
jns
sbb
dec
push
xchg
cmp
mov
fisub
stos
jns
rol
cmp
dec
push
add
mov
leave
dec
outs
xor
daa
mov
or
call
xchg
cmp
inc
ss
push
dec
fwait
js
sub
xchg
xor
(bad)
mov
jl
mov
fdivr
into
pop
(bad)
adc
mov
icebp
mov
das
mov
mov
mov
mov
sti
dec
fisubr
push
mov
in
and
jbe
mov
test
pop
inc
inc
bnd
xor
aad
or
cmp
mov
ins
adc
sti
cmps
pop
mov
cmp
std
xchg
sahf
out
add
fld
inc
stc
push
jp
mov
call
dec
xchg
mov
(bad)
lods
cmp
mov
sbb
and
(bad)
mov
daa
mov
mov
push
stc
push
xchg
mov
lds
lods
mov
arpl
iret
jge
cli
pop
lea
mov
sahf
fwait
dec
test
pop
repnz
cmp
adc
cmp
retf
gs
xor
adc
dec
jmp
out
mov
pop
fsubr
(bad)
out
push
out
sbb
(bad)
cwde
cmp
jmp
(bad)
aad
or
clc
out
jge
ss
stc
(bad)
xlat
je
idiv
jmp
test
mov
cwde
or
pop
sub
popf
pop
lds
mov
xor
or
test
adc
ret
add
cmp
inc
jge
imul
inc
leave
pop
js
jo
adc
out
ja
retf
dec
push
mov
(bad)
and
stc
out
leave
out
test
sub
sbb
jmp
loop
aaa
cmp
cmp
jmp
xlat
adc
xchg
into
aad
mov
pop
fidivr
aam
or
mov
out
dec
jmp
sbb
push
add
cmps
aad
popa
jp
sbb
mov
cmp
push
cmp
sbb
leave
jns
jmp
adc
push
inc
ss
popa
sub
movs
dec
daa
pop
fadd
(bad)
out
jbe
(bad)
loope
loopne
or
addr16
sub
xchg
pop
clc
out
out
jnp
ss
xchg
cdq
mov
aad
ins
test
sub
push
xchg
out
mov
js
jmp
jmp
cmps
mov
push
cmp
jns
cli
xchg
sbb
xor
aaa
pop
cmp
or
fwait
mov
xchg
cmp
mov
sti
pop
mov
push
test
sub
stc
ss
(bad)
not
push
mov
push
ja
mov
test
daa
test
fcmovnb
leave
ror
mov
push
sub
inc
popa
loop
movs
sub
dec
push
test
retf
mov
sti
in
repnz
sbb
jmp
sbb
cmp
(bad)
in
cli
push
mov
push
mov
inc
test
xor
data16
out
pop
not
cmp
faddp
es
sbb
not
jo
push
test
pop
xchg
lds
ficom
aaa
xor
test
sbb
inc
xlat
pop
sub
xchg
test
imul
or
or
enter
icebp
test
mov
retf
aad
ja
xchg
out
mov
fsubr
leave
out
ja
or
lahf
cmps
add
jl
ins
jb
add
cmp
sub
fadd
test
cmps
mov
push
dec
sar
pop
imul
xchg
add
call
xchg
cdq
sub
rol
adc
pop
push
dec
data16
push
cmp
sub
das
or
(bad)
mov
cmps
or
dec
data16
push
call
enter
ins
adc
push
sbb
dec
add
push
mov
or
ror
xlat
rcr
rol
xor
mov
imul
pop
imul
daa
(bad)
or
mov
xlat
ret
loope
xchg
sub
(bad)
mov
test
imul
call
leave
out
dec
call
cmps
retf
(bad)
jb
xchg
or
imul
aaa
pop
stc
(bad)
xchg
xchg
lahf
movs
inc
or
cld
jns
imul
ss
mov
push
or
jl
inc
dec
push
mov
push
imul
mov
xchg
rcr
stc
leave
push
xor
mov
ffree
lock
movs
push
or
mov
mov
pop
clc
not
or
add
add
ds
pop
test
pop
out
ja
clc
movs
jo
xchg
dec
mov
leave
mov
cdq
cmp
cdq
scas
lods
sbb
les
mov
scas
aaa
pop
cmp
cmp
pop
js
sbb
aad
lds
pusha
mov
out
fdivp
xlat
adc
lahf
mov
test
push
inc
stc
jg
stos
test
lea
xlat
div
in
pop
rcr
ds
pop
(bad)
hlt
addr16
imul
mov
(bad)
es
mov
stc
or
xchg
jo
mov
and
loopne
clc
mov
daa
dec
(bad)
push
mov
push
fmul
push
scas
cmps
and
inc
pop
push
dec
data16
add
push
data16
or
cld
fucom
enter
es
cdq
xchg
mov
inc
dec
and
addr16
loopne
clc
daa
int
fadd
pop
cmp
cmps
add
aad
mov
push
pop
xor
sub
dec
or
xlat
adc
push
rol
push
ja
mov
int
jo
inc
(bad)
jp
inc
adc
push
dec
xlat
adc
scas
enter
popf
and
dec
cli
sbb
sub
pop
mov
jp
inc
adc
cmps
inc
fwait
js
test
cmp
push
fidivr
out
jae
(bad)
mov
jge
xlat
ss
or
cmp
push
sbb
pop
inc
dec
push
lds
daa
pop
fsubr
(bad)
out
jnp
out
sub
cmp
mov
mov
push
push
clc
jns
xchg
or
fwait
stc
push
gs
icebp
inc
(bad)
inc
cdq
or
scas
lock
addr16
popa
data16
enter
mov
je
stc
test
xchg
test
mov
pop
inc
inc
call
sbb
pop
or
stos
mov
not
cmp
ins
test
adc
jns
mov
out
push
fdivr
xor
(bad)
pop
stc
clc
push
xchg
mov
xchg
mov
mov
call
pop
cmp
(bad)
ss
dec
mov
or
push
dec
lds
clc
ret
pop
jp
into
jg
xchg
stos
jmp
dec
mov
mov
popf
pop
test
xchg
push
sbb
sahf
std
cmp
xchg
out
or
xchg
mov
retf
mov
pop
jns
push
pop
imul
sub
pop
push
add
ss
sti
lea
aad
mov
xor
mov
call
xchg
hlt
out
cli
push
mov
push
mov
cli
add
cmp
sbb
mov
cmp
(bad)
sti
or
movs
inc
ret
push
dec
fisubr
xchg
jae
sbb
sbb
retf
pop
cmp
fcom
out
mov
add
mov
cmc
push
push
dec
sbb
push
loopne
fwait
or
pop
fisttp
ss
clc
xchg
cwde
sbb
and
addr16
in
lock
push
clc
cmp
aas
fcom
div
out
jmp
fwait
cmps
add
repz
loopne
cmp
call
push
(bad)
out
xlat
test
inc
xchg
gs
xchg
sti
push
fidivr
dec
xchg
sbb
aaa
sub
out
adc
xchg
ja
ror
push
push
cmp
xchg
jb
cs
pop
cmp
push
clc
dec
mov
mov
(bad)
mov
push
sbb
push
addr16
in
sbb
enter
lods
fild
cdq
call
test
mov
daa
jmp
xchg
mov
stc
lea
jge
pusha
test
adc
out
or
test
into
nop
leave
(bad)
rcr
or
lock
pop
mov
push
ja
data16
sbb
mov
push
add
(bad)
push
mov
and
(bad)
cmc
sub
push
cwde
inc
mov
ret
imul
test
push
fldenv
jp
stos
test
sbb
pop
imul
pop
and
dec
fldl2t
pop
sbb
test
jae
push
cmc
push
outs
retf
pop
pop
sbb
adc
aaa
push
mov
xchg
(bad)
cmp
not
sbb
add
fidivr
arpl
pusha
and
(bad)
out
xlat
cmp
(bad)
pusha
mov
add
mov
inc
in
pop
movs
jnp
jno
out
out
(bad)
cwde
stc
leave
(bad)
fadd
mov
call
jno
fs
push
loopne
fsub
or
stc
iret
enter
loope
xchg
mov
mov
dec
push
addr16
popa
jbe
sbb
pop
sub
add
mov
dec
mov
xchg
sti
movs
xchg
inc
and
xor
sbb
daa
das
ss
cmp
sbb
cwde
(bad)
or
mov
push
inc
mov
xchg
out
adc
xor
(bad)
sbb
leave
call
call
jno
jo
cmp
or
jne
sub
dec
fiadd
xchg
lods
inc
pop
sub
xchg
clc
out
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
test
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
test
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
test
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
test
cmc
fcmovnb
retf
aad
and
or
js
push
fs
xchg
mov
test
jmp
sbb
sbb
or
cli
out
sar
xchg
neg
ret
rcr
xor
sub
and
cmp
push
dec
sbb
add
jmp
jecxz
sti
mov
clc
fisub
add
push
xchg
mov
jae
push
push
dec
cdq
add
mov
test
je
inc
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
sbb
or
push
push
mov
xchg
xchg
clc
movs
call
(bad)
cmp
sub
dec
push
cmp
mov
dec
adc
in
mov
xchg
xchg
clc
movs
call
xchg
cmp
ss
or
cmp
jbe
mov
jmp
movs
call
(bad)
cmp
sub
dec
push
cmp
mov
dec
push
cli
cmps
jmp
cwde
jns
aam
out
neg
xlat
ss
push
or
sub
add
adc
fiadd
call
(bad)
cmp
sbb
not
cmp
xor
add
jmp
out
neg
(bad)
mov
jnp
sub
sbb
dec
push
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
mov
fadd
enter
push
pop
inc
dec
push
cmp
xor
inc
dec
push
mov
(bad)
retf
movs
call
(bad)
cmp
sub
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
out
neg
fs
pop
inc
dec
push
cmp
jbe
inc
dec
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
(bad)
cmp
push
sbb
or
push
push
cli
cmps
jmp
out
mov
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
inc
or
in
hlt
fcmovb
retf
out
neg
sub
or
js
sub
inc
dec
push
mov
(bad)
retf
out
mov
test
ss
push
or
js
push
adc
in
mov
xchg
aam
out
neg
es
sbb
or
push
adc
in
hlt
fcmovb
mov
call
je
inc
or
js
sub
inc
dec
adc
in
hlt
fcmovb
mov
fadd
enter
sub
sbb
dec
push
cmp
xor
add
push
mov
les
mov
test
je
inc
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
out
mov
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
inc
or
in
mov
xchg
aam
movs
call
(bad)
cmp
sub
or
cmp
xor
add
adc
in
mov
xchg
mov
test
(bad)
cmp
sbb
or
push
push
mov
les
neg
test
sbb
dec
push
cmp
jbe
add
test
cwde
xchg
aam
movs
stos
neg
(bad)
mov
sbb
or
sub
inc
dec
adc
cwde
xchg
mov
(bad)
enter
imul
or
cmp
or
cmps
test
fcmovb
retf
movs
stos
mov
test
(bad)
cmp
sbb
or
push
push
mov
xchg
aam
movs
stos
mov
test
(bad)
cmp
push
pop
inc
dec
push
cmp
jbe
inc
or
cmps
test
cwde
xchg
neg
test
(bad)
cmp
push
sbb
or
push
push
mov
xchg
xchg
clc
out
mov
test
je
push
or
cmp
jbe
inc
dec
adc
cmps
test
fcmovb
retf
out
neg
fs
pop
push
or
js
push
adc
cmps
test
cwde
les
neg
(bad)
enter
sub
pop
push
or
js
sub
add
push
mov
xchg
neg
(bad)
enter
sub
sbb
cmp
jbe
add
push
mov
(bad)
retf
movs
stos
mov
test
(bad)
cmp
push
sbb
or
sub
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
dec
push
cmp
xor
add
push
mov
(bad)
retf
movs
stos
mov
test
(bad)
cmp
push
pop
inc
dec
push
cmp
xor
add
adc
in
mov
xchg
mov
test
sbb
cmp
xor
inc
dec
push
mov
(bad)
retf
movs
stos
mov
(bad)
enter
push
sbb
or
cmp
xor
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
(bad)
enter
push
sbb
or
cmp
xor
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
dec
push
cmp
xor
add
adc
in
mov
xchg
neg
fs
sbb
or
push
push
mov
(bad)
retf
movs
stos
mov
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
add
adc
in
hlt
fcmovb
mov
call
je
inc
dec
push
cmp
jbe
inc
or
in
hlt
fcmovb
retf
movs
stos
mov
test
sbb
or
sub
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
sbb
dec
push
js
push
push
mov
xchg
mov
(bad)
enter
sub
sbb
dec
push
cmp
jbe
inc
dec
adc
cmps
test
cwde
(bad)
retf
movs
stos
neg
(bad)
enter
push
sbb
or
push
adc
cmps
test
fcmovb
mov
fadd
enter
sub
sbb
dec
push
js
push
adc
in
hlt
fcmovb
ja
clc
movs
call
(bad)
cmp
sbb
dec
push
js
push
push
cli
cmps
test
cwde
(bad)
retf
out
mov
(bad)
enter
push
pop
inc
dec
push
js
push
push
mov
les
neg
(bad)
enter
push
sbb
or
cmp
jbe
add
push
mov
(bad)
retf
out
mov
(bad)
enter
push
sbb
or
push
push
mov
xchg
mov
(bad)
enter
sub
sbb
dec
push
cmp
xor
inc
dec
push
mov
xchg
neg
test
xchg
jp
sub
sbb
js
push
push
mov
xchg
neg
test
(bad)
cmp
push
pop
inc
dec
push
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
dec
push
cmp
xor
add
adc
in
hlt
fcmovb
retf
out
neg
test
sbb
cmp
jbe
add
test
fcmovb
retf
movs
stos
mov
test
sbb
or
sub
add
adc
cmps
test
fcmovb
mov
call
je
push
or
cmp
xor
add
push
mov
xchg
mov
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
inc
dec
adc
in
hlt
cwde
xchg
mov
(bad)
enter
sub
sbb
dec
push
js
push
push
cli
cmps
test
cwde
les
neg
(bad)
enter
imul
push
dec
push
cmp
or
in
hlt
fcmovb
retf
movs
stos
mov
test
(bad)
cmp
push
sbb
or
push
test
fld
mov
call
je
inc
dec
push
cmp
xor
add
adc
cmps
test
fiadd
stos
mov
test
sbb
or
push
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
sbb
dec
push
cmp
jbe
add
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
push
or
js
push
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
or
js
sub
inc
dec
adc
in
hlt
fcmovb
retf
movs
stos
mov
test
je
inc
dec
push
js
push
push
cli
in
hlt
fcmovb
mov
cdq
(bad)
enter
push
sbb
dec
push
cmp
xor
add
push
mov
xchg
neg
test
je
inc
or
js
sub
add
adc
in
hlt
fcmovb
mov
fadd
enter
sub
sbb
dec
push
js
push
push
mov
(bad)
retf
out
mov
(bad)
enter
sub
sbb
dec
push
cmp
jbe
add
push
mov
xchg
neg
test
(bad)
cmp
push
sbb
or
push
push
mov
xchg
mov
(bad)
enter
push
sbb
or
push
push
mov
(bad)
retf
movs
call
xchg
jp
sub
sbb
js
push
push
mov
(bad)
retf
movs
stos
mov
(bad)
enter
sub
sbb
dec
push
js
push
push
mov
xchg
neg
test
je
push
or
js
sub
inc
dec
adc
cmps
test
fcmovb
mov
fadd
enter
sub
sbb
dec
push
js
push
adc
in
hlt
fcmovb
retf
out
neg
test
sbb
dec
push
js
push
push
mov
xchg
neg
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
add
adc
cmps
test
fiadd
call
xchg
jp
push
pop
inc
or
js
sub
add
adc
in
hlt
fcmovb
retf
out
neg
test
(bad)
cmp
push
pop
inc
dec
push
cmp
jbe
inc
dec
adc
in
mov
xchg
mov
(bad)
enter
push
pop
inc
dec
push
cmp
jbe
inc
or
cmps
test
cwde
xchg
neg
test
(bad)
cmp
push
sbb
or
push
adc
in
hlt
fcmovb
retf
out
neg
test
(bad)
cmp
push
sbb
or
push
push
mov
xchg
neg
test
je
inc
dec
push
cmp
xor
inc
dec
push
mov
xchg
aam
movs
stos
mov
(bad)
enter
sub
sbb
js
sub
add
adc
in
hlt
fcmovb
mov
fadd
enter
sub
pop
push
or
js
push
push
mov
xchg
neg
(bad)
mov
push
or
push
push
mov
xchg
xchg
clc
out
mov
(bad)
enter
sub
sbb
js
sub
inc
dec
push
cli
cmps
test
cwde
les
neg
(bad)
enter
sub
pop
push
or
js
sub
inc
dec
adc
cmps
test
cwde
les
mov
test
ss
push
or
js
push
adc
in
mov
xchg
mov
test
(bad)
cmp
push
pop
push
or
js
push
push
mov
xchg
neg
test
(bad)
cmp
push
pop
push
or
js
push
adc
cmps
test
fiadd
call
(bad)
cmp
sub
or
cmp
jbe
inc
or
cmps
test
cwde
xchg
neg
test
(bad)
cmp
push
sbb
or
sub
add
adc
cmps
test
fcmovb
mov
fadd
enter
sub
jnp
push
push
mov
test
neg
(bad)
cmp
or
pop
inc
dec
push
mov
test
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
test
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
xchg
cmc
fcmovnb
retf
aad
and
or
pop
inc
dec
push
mov
(bad)
fdivp
cdq
scas
cmps
mov
jno
sub
dec
fs
sbb
aas
xor
push
retf
(bad)
std
xchg
into
mov
or
jge
dec
inc
sub
and
and
inc
rcl
aam
frstpm(287
aas
xchg
dec
test
mov
pop
sbb
bound
data16
cmp
sub
icebp
test
xchg
mov
(bad)
mov
inc
sub
sub
or
pop
daa
sub
frstor
pop
cmc
mov
xor
push
jb
pop
ja
or
adc
das
and
(bad)
fdiv
test
pushf
push
mov
jno
push
push
imul
das
sub
xlat
fdiv
sbb
or
nop
xchg
lock
scas
jge
jnp
ss
bound
or
lahf
or
retf
ret
out
hlt
or
push
icebp
pop
out
addr16
jae
xor
es
sub
cmp
retf
int
stos
vpsubw
mov
jl
outs
ja
or
cmp
out
div
cmps
repnz
mov
js
js
pop
pop
dec
dec
cmp
sbb
sbb
iret
int3
fcmovu
(bad)
mov
mov
inc
pop
adc
fs
sbb
pop
pop
addr16
mov
mov
enter
inc
push
jno
fs
cmp
dec
sub
cmp
pushf
leave
fcomi
into
xchg
cmc
mov
xchg
push
jno
fs
cmp
pop
xor
jmp
mov
out
dec
dec
dec
push
imul
cmp
sub
or
int3
out
fcmovu
addr16
mov
out
mov
pop
push
inc
pop
ins
inc
addr16
cmp
add
imul
mov
fwait
xchg
stos
mov
(bad)
pop
inc
inc
push
jno
fs
cmp
adc
inc
es
cmps
call
ret
int3
mov
mul
jns
imul
sub
sbb
sub
(bad)
(bad)
fsub
fisub
mov
mov
data16
pop
pop
dec
dec
cmp
sbb
sbb
repz
mov
sbb
js
sbb
jno
data16
es
sbb
retf
enter
jmp
test
pushf
cdq
mov
dec
ins
ss
data16
es
sbb
and
lock
not
inc
loop
mov
and
mov
push
imul
bound
push
sub
addr16
call
mov
xchg
int3
xchg
lods
stos
mov
pop
cmp
wbinvd
push
sub
sbb
xchg
xchg
mov
fmulp
mov
sti
test
jbe
inc
dec
push
or
daa
push
clc
xchg
out
mov
sar
(bad)
fmul
mov
push
sub
sub
add
daa
cmp
call
hlt
enter
test
xchg
dec
data16
pop
inc
inc
sub
add
add
pushf
leave
repnz
call
test
jmp
inc
jns
jl
js
or
cmp
sub
jmp
test
fdiv
retf
test
xchg
js
into
ss
push
push
pop
(bad)
call
(bad)
clc
sahf
test
mov
xchg
mov
pop
test
add
aam
fistp
in
leave
nop
xchg
pushf
mov
push
movs
pop
inc
jl
js
or
push
and
add
xchg
fsubrp
(bad)
dec
mov
(bad)
cmp
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
clc
out
neg
(bad)
enter
test
xchg
jns
imul
and
xor
add
adc
in
hlt
fiadd
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
(bad)
retf
lahf
out
xchg
mov
dec
pop
inc
inc
jle
jae
add
sub
dec
aas
fcmovne
int
stc
jmp
repnz
out
xchg
sub
je
jg
adc
add
and
imul
mov
xchg
sub
fsubr
sub
or
add
xor
rol
(bad)
out
leave
mov
mov
fdiv
push
jp
jp
adc
xor
xlat
call
out
xor
inc
cmp
or
push
and
enter
call
xchg
pop
push
inc
inc
sbb
jns
inc
or
sub
ficomp
cmps
call
not
sub
jnp
pop
push
add
sti
in
cmc
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
inc
jns
inc
push
add
dec
push
ror
test
jmp
mov
retf
cdq
lods
lock
mov
jb
data16
adc
add
sub
cwde
retf
leave
lds
ror
stos
(bad)
scas
neg
inc
pop
jp
ins
ss
xor
aaa
in
(bad)
aad
call
call
dec
dec
inc
cmp
popa
jg
add
jbe
enter
xchg
mov
(bad)
movs
mov
sub
jb
jnp
adc
and
js
rcr
xchg
stc
loopne
mov
xchg
enter
mov
push
jge
jle
pop
or
aas
ss
cwde
cmps
test
cwde
xchg
neg
(bad)
enter
sub
arpl
push
adc
push
add
rol
xchg
mov
test
sbb
push
je
sub
or
jnp
retf
jmp
out
xchg
xchg
xchg
mov
ja
and
push
sub
jbe
xchg
(bad)
xchg
pushf
mov
movs
cmp
inc
and
fs
push
vmread
cmp
iret
leave
fstp
std
cmc
leave
loop
mov
mov
test
je
push
inc
push
push
adc
or
das
push
sti
in
cmc
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
push
sbb
jl
sbb
xor
cdq
in
jecxz
loop
out
cmp
pop
inc
jge
jl
js
sbb
sub
jbe
ror
xlat
stc
hlt
mov
xchg
(bad)
pushf
test
pop
pop
jl
sub
adc
or
int3
mov
rcr
enter
mov
dec
jbe
popa
sbb
add
daa
es
mov
stc
loopne
mov
xchg
xchg
cmp
add
sbb
and
(bad)
test
imul
mov
(bad)
out
mov
or
sub
sbb
push
aad
jmp
mov
out
enter
cli
(bad)
enter
inc
push
sbb
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
jne
inc
dec
push
cmp
or
fcmovnb
retf
aad
movs
stos
mov
test
jne
dec
pop
inc
xor
xor
repz
jecxz
(bad)
mov
lahf
mov
imul
push
pushw
je
and
leave
mov
sbb
ja
or
or
daa
xor
xchg
xchg
xchg
xchg
call
mov
push
inc
push
sbb
jns
pop
push
and
(bad)
jmp
idiv
inc
inc
ss
jg
js
push
and
aad
xlat
lock
xlat
stos
test
cmps
mov
pop
imul
cmp
out
ffreep
imul
stc
movs
sub
(bad)
inc
adc
adc
pushw
cmp
leave
test
(bad)
out
(bad)
dec
out
(bad)
dec
inc
inc
inc
and
fs
nop
and
(bad)
int3
ret
fcmovbe
sti
aad
neg
scas
movs
mov
jno
popa
popa
sub
or
xor
and
xchg
loop
(bad)
mov
mov
jno
data16
sbb
and
(bad)
enter
out
out
cdq
mov
mov
jno
ins
or
pop
adc
jbe
xor
cmps
cld
mov
xchg
xchg
dec
push
pop
add
outs
jg
or
jbe
xor
shl
jecxz
in
mov
dec
dec
inc
ss
ins
inc
sbb
sub
aas
(bad)
sbb
cdq
xchg
lods
lahf
lock
pop
push
outs
inc
popa
push
adc
sub
(bad)
leave
clc
(bad)
out
mov
fcom
call
inc
jno
popa
popa
sbb
xor
iret
ret
fiadd
pushf
(bad)
sahf
(bad)
clc
(bad)
lods
neg
dec
pop
push
jno
sub
add
aas
iret
xchg
test
mov
aam
xchg
clc
mov
pop
push
outs
xor
jb
adc
pop
and
mov
push
mov
ficomp
dec
adc
push
cmp
jae
push
pop
pop
das
push
fcmovnb
stc
loop
fistp
mov
(bad)
push
inc
inc
jns
or
adc
and
xchg
aam
(bad)
xchg
xchg
mov
mov
push
push
addr16
or
push
adc
es
cwde
scas
out
in
test
mov
jno
js
cmp
sub
sbb
mov
out
fucom
popf
mov
xchg
outs
pop
pop
jno
jp
or
sub
xor
xor
leave
test
icebp
ror
mov
outs
push
sub
sbb
jns
add
pop
inc
daa
aas
fcmovnbe
test
fild
mov
js
pop
push
outs
je
cmp
pushw
inc
daa
cmp
lock
in
xchg
(bad)
neg
scas
mov
cmp
inc
sbb
bound
inc
cmp
rcr
out
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
imul
cmps
test
cwde
xchg
neg
(bad)
enter
sub
or
or
pop
inc
dec
push
mov
xchg
neg
(bad)
enter
sub
sbb
dec
push
jae
and
or
shl
push
test
xchg
out
loop
(bad)
enter
pop
push
jge
or
pop
dec
enter
mov
movs
clc
out
jbe
(bad)
leave
fdivr
push
jno
js
addr16
imul
mov
leave
mov
fdivr
push
dec
pop
inc
sbb
or
or
nop
das
or
fld
int
cwde
aad
icebp
clc
out
jbe
mov
mov
sbb
or
adc
es
cmps
test
cwde
out
xchg
clc
repnz
fadd
dec
(bad)
cmp
stos
add
or
jmp
jbe
mov
rol
test
lock
mov
stos
cmc
enter
pop
sbb
adc
dec
enter
mov
jmp
imul
(bad)
mov
sbb
cmp
sub
push
mov
loop
xchg
clc
es
clc
cmp
push
sbb
sbb
inc
inc
aam
iret
rcl
es
cmps
fmul
or
push
push
or
clc
add
cmp
xchg
cld
cmc
in
xchg
(bad)
pushf
xchg
fadd
ret
or
je
or
pop
adc
adc
sbb
in
icebp
retf
clc
out
not
sub
outs
or
and
arpl
in
xchg
in
in
idiv
adc
dec
or
jno
push
cmp
sub
mov
aam
aad
xchg
call
sub
push
inc
adc
adc
push
sbb
and
rcr
imul
frstpm(287
mov
lds
xor
inc
add
popa
sbb
and
test
cli
ret
(bad)
hlt
ffree
retf
push
fs
ins
pop
shl
sub
das
jno
xlat
loopne
lock
(bad)
std
popf
mov
shl
arpl
je
sub
push
mov
(bad)
xor
stos
lea
jp
pop
jo
push
or
pop
retf
shr
out
loopne
mov
cmps
mov
jne
push
pop
popa
adc
add
jbe
or
and
enter
aam
in
sahf
call
inc
dec
pop
jge
ins
bound
add
adc
aam
xchg
sar
mov
dec
pop
pop
push
imul
sbb
sub
hlt
in
icebp
fwait
leave
mov
push
push
push
inc
jbe
ins
daa
dec
push
or
imul
call
sbb
in
clc
mov
add
ss
or
jb
jns
(bad)
mov
lds
es
movs
push
jmp
mov
ss
xchg
cmp
dec
movs
in
or
test
call
(bad)
mov
sub
cwde
xchg
sbb
clc
xchg
(bad)
mov
push
js
push
call
(bad)
fcomp
pop
mov
push
sub
ret
xchg
xor
mov
pop
call
(bad)
fcom
inc
fadd
mov
xchg
out
sti
mov
pusha
pop
sbb
xchg
add
cmps
jp
cmp
push
out
jmp
or
jo
mov
imul
jbe
add
and
pop
cwde
lods
mov
pop
call
xchg
sub
imul
shl
je
ja
sar
repnz
out
ss
inc
arpl
sbb
cmps
sahf
mov
pop
rcr
retf
jp
sub
(bad)
xlat
in
cmps
pop
inc
jp
cmp
ins
push
sbb
xchg
fwait
out
sub
mov
xlat
push
mov
clc
out
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
mov
xchg
neg
(bad)
enter
sub
sbb
or
js
push
push
int3
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
push
mov
sub
mov
mov
push
push
mov
mov
mov
push
push
push
mov
mov
call
mov
push
call
lea
lea
push
lea
push
push
push
call
mov
inc
shl
mov
seto
push
call
push
call
add
mov
mov
pop
ret
mov
in
hlt
dec
movs
test
test
aad
lds
xchg
cli
test
dec
xor
je
les
test
test
movs
retf
xchg
cmp
sbb
jnp
imul
pop
and
(bad)
retf
in
hlt
stos
aam
xchg
(bad)
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
xchg
and
inc
adc
fcmovnu
retf
sti
aaa
into
ds
sbb
adc
dec
retf
in
idiv
aam
daa
je
sti
shr
imul
aam
xchg
sub
ins
xor
dec
inc
sbb
mov
cdq
fwait
ins
xor
or
push
cdq
sub
pop
lea
xchg
add
ds
mov
rol
arpl
fld
div
in
fstp
fs
std
ds
call
push
pop
xchg
imul
cdq
pop
cwde
dec
mov
jle
call
cmp
mov
sub
mov
into
sub
jns
cmp
sbb
push
gs
xor
shl
dec
cmp
jno
jno
inc
imul
dec
repnz
shr
adc
jmp
retf
jmp
sub
cmp
addr16
xor
add
shl
jae
sub
dec
jbe
ret
or
aaa
pop
mov
fadd
xor
sub
adc
pop
leave
jns
leave
fwait
jl
pop
cwde
loop
mov
pop
inc
je
cmp
lods
pop
aad
mov
jp
imul
or
sbb
xor
mov
fcomp
mov
movs
mov
mov
in
jbe
sub
sub
jp
dec
loop
imul
ins
sti
mov
sbb
mov
cmp
sti
cwde
shr
stos
mov
xor
fsub
in
jns
sar
sbb
inc
xchg
inc
dec
std
dec
add
imul
(bad)
sti
stos
mov
xchg
xor
gs
and
dec
push
imul
hlt
retf
aam
icebp
leave
or
xor
aam
pop
ds
in
xchg
pop
je
xor
les
sbb
icebp
test
imul
mov
mov
scas
jnp
xor
dec
aam
in
cmp
pop
xchg
(bad)
sub
adc
push
sbb
je
sti
sub
(bad)
je
xor
add
fstp
test
pop
cmp
out
mov
clc
sqrtps
scas
xchg
dec
mov
sbb
shr
fistp
mov
add
pop
or
hlt
push
jnp
out
shl
and
mov
mov
dec
pop
cmp
or
mov
rcl
or
ret
dec
and
and
jmp
stos
jmp
fcmovb
add
push
popf
pop
and
xor
(bad)
fist
fstp
fmul
mov
sub
dec
mov
inc
add
jnp
add
jg
mov
aad
into
or
arpl
cli
dec
leave
test
xchg
fmul
daa
lock
cdq
(bad)
fmul
push
push
or
mov
out
jmp
fisubr
sub
or
add
les
rcl
mov
hlt
adc
call
ss
adc
aaa
imul
mov
icebp
test
neg
sbb
inc
movs
xchg
imul
mov
mov
xor
sub
jmp
sbb
sub
xchg
test
in
shl
movs
lods
jnp
shl
retf
stc
jns
out
in
hlt
push
mov
fist
jno
scas
and
fwait
in
or
iret
pop
dec
mov
push
aam
repz
and
adc
inc
xor
rcr
in
jl
movs
lds
(bad)
add
and
sub
out
sar
mov
pop
and
mov
retf
das
movs
and
xlat
gs
mov
cld
cmp
pop
int3
inc
ss
mov
sbb
mov
leave
fcmovnbe
pushf
jecxz
xor
mov
or
stos
adc
inc
gs
push
mov
fs
adc
(bad)
dec
clc
ss
iret
sbb
mov
jo
fisubr
inc
out
outs
ins
xor
sbb
sub
call
mov
mov
mov
push
ret
xchg
std
scas
add
sbb
dec
mov
lahf
mov
mov
mov
ret
(bad)
or
push
sub
bound
inc
jmp
xor
leave
mov
rcr
jge
mov
hlt
and
add
movs
mov
arpl
adc
inc
mov
pop
pop
fimul
inc
data16
shr
addr16
imul
inc
push
inc
inc
xor
dec
adc
iret
movs
jg
in
shl
fs
sti
leave
push
pushf
pop
out
hlt
cmp
movs
sbb
repnz
jnp
imul
sub
in
cmp
pop
scas
dec
mov
call
mov
sbb
aam
add
lods
js
loop
retf
mov
and
sahf
ret
sahf
movs
or
stos
jecxz
or
push
int3
shl
push
sub
addr16
mov
movs
mov
lds
ficomp
xchg
pop
sub
push
sbb
dec
mov
test
retf
aaa
(bad)
sbb
dec
sub
jnp
mov
inc
inc
int3
gs
cmp
mov
xchg
cmp
xchg
movs
pop
xor
push
sub
sub
les
in
hlt
cmp
bound
and
and
mov
add
adc
push
dec
push
mov
in
or
add
fistp
jecxz
inc
mov
jbe
ret
pop
and
jp
lds
in
sahf
mov
pop
cmp
jns
call
mov
push
push
div
clc
ret
adc
nop
mov
jb
imul
hlt
dec
add
out
inc
mov
mov
or
jno
dec
stos
xchg
cmp
dec
idiv
cdq
cmps
imul
dec
cs
adc
mov
mov
push
addr16
xor
jno
xchg
xchg
and
mov
push
cmp
sbb
sti
je
or
movs
xor
mov
adc
mov
movntq
or
hlt
dec
adc
icebp
sub
lods
adc
fucomi
cmc
ds
stos
xchg
icebp
sbb
mov
loope
in
jle
sub
dec
sbb
dec
scas
jmp
mov
test
icebp
into
pop
mov
push
fs
stc
test
xchg
mov
sbb
jmp
out
cmp
in
or
xor
push
and
xor
jmp
jne
inc
imul
enter
rol
fs
out
(bad)
sbb
xchg
cmp
adc
xor
push
movs
in
cmc
ss
or
mov
jmp
pop
add
jmp
inc
dec
movs
ins
xor
jmp
jg
jno
dec
add
mov
test
and
bound
push
pop
(bad)
and
gs
retf
in
push
out
retf
pop
ja
into
sbb
test
jbe
cs
retf
and
ret
sbb
enter
ins
addr16
bound
xchg
mov
sbb
adc
adc
push
jmp
and
xor
mov
test
(bad)
mov
ins
cmps
(bad)
fbld
data16
call
pop
scas
repz
in
jns
test
pusha
jns
cmps
push
dec
gs
stc
gs
out
push
push
dec
mov
fs
jg
and
dec
xchg
cmp
mov
pop
(bad)
retf
imul
into
int3
sti
leave
pusha
sbb
fmul
jecxz
inc
xlat
nop
xlat
movs
hlt
mov
shl
in
or
cmp
loope
mov
push
ret
fild
add
rcr
dec
bound
cli
mov
sbb
stc
push
pusha
test
or
mov
pop
test
fcmovnbe
imul
mov
cs
adc
and
jns
sti
fcomp
xor
call
fwait
cmps
add
(bad)
and
sub
push
in
push
mov
inc
cmove
xchg
fs
adc
mov
das
mov
test
sbb
call
dec
hlt
push
leave
stos
ror
in
sbb
test
push
dec
xor
rcl
mov
jo
sti
call
cmove
mov
mov
stos
outs
or
cli
add
cmp
cmp
inc
dec
nop
mov
add
pushf
sbb
xor
mov
dec
and
mov
adc
fsubr
push
arpl
ffreep
movs
jle
or
push
adc
mov
inc
sub
popa
(bad)
jmp
ret
mov
dec
xlat
stos
adc
loop
lock
in
mov
jg
test
int
dec
adc
xchg
jne
push
add
outs
push
and
jp
add
dec
jno
sbb
aaa
dec
xor
mov
sub
pop
in
or
fcom
packsswb
xor
pop
cmps
add
add
push
mov
into
mov
int
dec
mov
pxor
sub
popa
pop
cmp
out
imul
pop
outs
cld
jge
jnp
push
xor
stos
pop
fs
jl
jno
sub
arpl
push
fdiv
ficomp
outs
cmp
xchg
and
pop
inc
sub
pusha
push
pop
push
imul
aam
ror
push
scas
lods
mov
or
add
nop
cli
loop
adc
sar
xchg
in
cld
pop
jnp
push
xor
jg
out
push
jl
or
push
cdq
scas
aas
xor
popf
in
pop
lahf
push
pusha
loope
cli
inc
rol
jb
imul
inc
push
jae
pop
jp
jb
dec
std
fadd
addr16
adc
sar
retf
dec
iretw
mov
sub
outs
out
lahf
xchg
jno
xor
mov
mov
test
jl
iret
mov
dec
dec
mov
mov
(bad)
jnp
lods
popf
loope
mov
nop
std
xchg
lock
cmp
push
pop
out
sbb
jmp
shl
mov
add
repz
adc
mov
out
int
repz
fild
ja
(bad)
cmp
pop
push
ds
mov
push
push
mov
or
add
and
int
frstor
xor
dec
ficomp
xor
fwait
mov
push
aam
(bad)
ret
pop
sahf
aam
int3
jp
arpl
data16
xor
adc
push
stc
cmp
je
call
sbb
movs
stos
in
movs
je
jo
xor
imul
cs
ins
push
push
xor
inc
sbb
adc
fcmovne
xor
push
stos
push
push
mov
xchg
jb
leave
fcomi
adc
xchg
lds
ss
jns
bound
test
xchg
hlt
mov
or
dec
or
imul
xor
push
jg
dec
mov
sub
aas
dec
push
in
or
xor
push
jle
sbb
ret
les
jg
xchg
test
jne
iret
dec
xchg
jmp
add
fistp
sbb
mov
loope
or
imul
inc
adc
pop
out
push
xor
add
data16
mov
imul
jae
retf
or
test
out
pop
push
and
mov
sahf
stos
xor
bound
jns
xlat
inc
in
or
hlt
and
bound
inc
das
lahf
iret
in
aas
repz
pushf
ror
xor
popf
pop
push
leave
icebp
lock
mov
jb
(bad)
mov
fstp
push
call
mov
je
jno
xchg
shr
out
(bad)
mov
popf
jb
lods
xor
xor
push
ret
ins
idiv
arpl
fdivr
cmp
test
hlt
(bad)
lock
shl
dec
cmp
mov
cmp
sbb
shr
sub
bound
fstp
fmulp
es
and
test
pop
and
xor
enter
in
pushf
cli
push
jmp
fisub
push
sbb
mov
cmp
mov
sub
(bad)
(bad)
fnsetpm(287
or
inc
jge
in
cmp
jnp
test
pop
and
mov
daa
ret
pusha
call
cld
fucomip
cwde
cmp
sub
fwait
sub
push
and
cmp
xchg
shl
aam
mov
fstp
repnz
jne
mov
inc
push
imul
lods
(bad)
xor
sub
nop
cmp
fwait
xchg
clc
dec
imul
adc
je
push
cmp
push
inc
ins
aam
imul
cmp
(bad)
pop
inc
cwde
fild
ja
ja
pop
imul
mov
aam
add
std
and
out
dec
ret
fnstcw
outs
fist
loopne
jno
add
sub
leave
sub
idiv
adc
mov
adc
nop
ds
btr
std
xchg
pop
imul
jnp
aaa
dec
cmp
call
cmp
loopne
or
mov
enter
add
and
retf
pop
mov
in
pop
rol
jmp
or
aam
imul
xchg
retf
mov
inc
pop
or
xchg
jnp
cmp
imul
addr16
movs
mov
movs
or
sbb
push
imul
cmp
pop
cmps
push
hlt
mov
(bad)
retf
mov
mov
add
mov
and
btc
dec
aam
mov
jmp
sbb
ror
pop
in
jecxz
test
sbb
dec
xor
sahf
and
adc
pmaddwd
ret
je
add
cmp
int3
mov
mov
icebp
push
push
mov
bsf
sub
dec
cs
sub
add
cdq
lahf
mov
adc
dec
(bad)
sbb
icebp
and
nop
mov
fs
jnp
out
aas
out
retf
jmp
and
clc
cmps
xchg
push
pop
mov
dec
jbe
xchg
and
pushf
xrelease
rcpps
das
pop
jae
mov
xor
loop
mov
xor
out
out
and
jp
(bad)
adc
add
jecxz
jp
fsubp
les
adc
and
lods
pop
ja
xor
aam
sub
into
mov
aas
movs
fwait
push
aas
add
pop
or
or
rcr
or
imul
mov
sahf
sub
icebp
mov
xchg
xchg
mov
jge
arpl
outs
hlt
fstp
loop
pusha
and
iret
outs
jle
scas
inc
pop
cdq
inc
int3
(bad)
jbe
add
dec
or
jnp
jl
movs
and
and
test
sub
jnp
sub
fwait
and
mov
push
in
mov
inc
jmp
push
pop
mov
fstp
retf
je
mov
retf
push
(bad)
sbb
cmp
jmp
sahf
movs
cwde
dec
xchg
inc
ret
fistp
sbb
adc
addr16
(bad)
sti
(bad)
adc
xchg
repnz
or
in
inc
jmp
push
xchg
jmp
lods
jmp
and
jmp
fucomi
inc
pop
mov
outs
add
loopne
lock
and
xor
dec
jmp
hlt
sti
aam
scas
sahf
ror
jns
sub
iret
cs
imul
mov
imul
cdq
loope
jmp
dec
xchg
test
inc
imul
imul
aas
fwait
cld
push
jns
mov
mov
inc
jge
xchg
fs
pop
je
in
jns
enter
xor
retf
push
daa
jmp
jnp
rep
cmp
sti
scas
adc
imul
pop
addr16
or
test
fstp
iret
xlat
add
fwait
iret
je
dec
rcr
and
mov
pop
in
mov
mov
aaa
test
mov
dec
mov
add
lahf
cmps
je
retf
jg
test
hlt
stos
movhps
inc
sub
(bad)
dec
sub
jle
sub
rcpps
cmc
(bad)
mov
sub
pop
push
mov
or
jnp
out
(bad)
jle
retf
mov
jmp
sub
lock
pop
(bad)
nop
jmp
stos
jmp
out
retf
in
or
inc
dec
hlt
out
pop
dec
mov
or
pop
adc
jo
(bad)
xchg
jmp
fstp
retf
loope
cs
cmp
jg
and
and
out
sbb
hlt
shl
sub
fstp
in
pop
mov
lahf
inc
sub
inc
cmps
fstp
imul
pop
imul
mov
mov
aaa
mov
mov
or
nop
out
fbld
stos
pop
fwait
shr
sti
inc
scas
sub
stos
pop
or
sub
out
(bad)
xor
push
aam
cmps
je
jne
adc
dec
mov
or
test
adc
jb
mov
and
push
sti
leave
adc
(bad)
fld
jmp
imul
dec
xor
xchg
stos
pop
imul
cmp
sbb
hlt
stc
pop
mov
mov
dec
jns
sub
sbb
mov
cmp
aam
sbb
jnp
xchg
cdq
jae
ins
add
stos
sub
mov
jmp
and
loopne
adc
hlt
xor
cs
pop
test
xchg
xor
inc
xor
stos
(bad)
jle
mov
in
inc
inc
xchg
push
aam
push
push
and
bound
mov
idiv
out
movs
jl
retf
ss
xor
jns
or
imul
(bad)
fist
and
xchg
adc
and
retf
ds
push
pop
push
cmps
mov
outs
inc
stc
scas
or
adc
xor
push
mov
pop
or
or
fcom
(bad)
jb
lods
xlat
stos
xchg
pop
add
imul
and
mov
fwait
xor
xchg
retf
inc
les
mov
fs
xchg
mov
xor
mov
(bad)
jp
push
out
je
mov
ret
cmp
fwait
or
ins
adc
jg
mov
pop
inc
sub
xchg
and
test
hlt
cld
test
cld
mov
adc
mov
xchg
pop
imul
push
(bad)
outs
push
repz
test
adc
jbe
les
fwait
out
xor
(bad)
daa
out
sbb
inc
and
je
add
inc
pop
je
scas
inc
dec
or
hlt
subps
jne
nop
ficomp
jle
mov
(bad)
std
pop
adc
enter
test
lea
cmp
pop
outs
push
adc
push
sar
mov
pop
add
or
pop
imul
inc
in
test
inc
iret
movs
dec
je
inc
xchg
xchg
movs
scas
dec
jbe
dec
and
mov
xchg
sub
retf
cmp
jbe
jle
xchg
inc
cmp
fdiv
pop
cmps
je
mov
mov
inc
rcl
or
sbb
mov
mov
inc
scas
xchg
rol
fimul
pop
loop
sbb
je
lds
popa
cmps
imul
cmp
xchg
test
mov
mov
adc
je
add
cmp
sub
jnp
and
cmp
iret
inc
test
xor
mov
sti
stos
sbb
add
out
mov
jns
test
dec
dec
pop
imul
ds
jle
scas
dec
mov
call
imul
retf
lods
call
je
in
loopne
add
cmp
xchg
ins
sbb
hlt
jb
adc
and
dec
pop
aas
or
and
add
push
mov
sub
loopne
cld
add
mov
push
loope
stc
add
and
neg
pusha
test
test
fistp
in
jg
pop
cld
in
cmp
lock
ds
sub
add
clc
test
pop
loopne
xor
add
repnz
pop
sub
lock
out
imul
adc
aaa
test
dec
mov
in
pop
mov
jecxz
mov
out
sbb
jo
sub
dec
inc
jae
leave
aam
pop
adc
das
movs
(bad)
into
cdq
retf
jg
pop
adc
xor
daa
dec
xor
xlat
push
nop
popf
add
(bad)
cs
pop
scas
push
inc
into
popf
jo
sub
loope
jecxz
stc
dec
xor
or
fwait
sub
push
popa
push
inc
inc
dec
fdivrp
inc
ins
cmp
and
add
push
pop
in
jg
repnz
loopne
movs
add
dec
mov
lock
nop
loopne
(bad)
push
mov
aam
push
in
hlt
sar
jno
fistp
mov
std
dec
test
fwait
es
(bad)
jnp
lods
sahf
jge
inc
je
scas
(bad)
loope
sub
inc
nop
dec
mov
cmp
dec
push
les
add
shl
xchg
imul
(bad)
imul
adc
fisttp
das
fwait
adc
adc
(bad)
sub
adc
pop
xor
in
xchg
(bad)
ror
stos
sbb
mov
sub
pop
mov
sub
or
cs
mov
pop
pop
jmp
xchg
add
gs
retf
mov
mov
cmps
shl
or
add
adc
xor
hlt
ss
out
xlat
fwait
test
add
sub
cmp
xchg
jo
shr
pusha
lahf
mov
retf
daa
mov
icebp
test
mov
sar
repnz
push
add
pop
and
xor
out
pop
sti
lea
mov
adc
cmp
das
out
shl
adc
dec
(bad)
(bad)
push
fidiv
xchg
fcom
jnp
dec
dec
(bad)
xchg
mov
jle
mov
fmul
adc
(bad)
and
adc
stos
inc
repnz
xor
pop
pop
dec
sub
fiadd
pusha
fsub
sbb
pop
xor
test
fwait
or
dec
jmp
and
mov
jne
add
adc
imul
aam
sub
fnstsw
xor
mov
aaa
add
and
out
mul
mov
adc
imul
sub
inc
xchg
sahf
cmps
inc
dec
jbe
fcomp
(bad)
movs
in
ds
ins
mov
cmp
jl
and
or
les
retf
xor
test
fistp
out
mov
clc
outs
imul
scas
push
cdq
inc
daa
or
lods
leave
bound
cld
jp
push
fist
mov
push
popa
sbb
mov
cld
dec
hlt
cmp
cs
mov
and
add
jnp
xchg
pop
push
fmul
push
mov
fild
inc
mov
or
add
(bad)
out
add
clc
cmp
xchg
test
mov
out
fist
pop
daa
cmp
dec
xor
cmp
cld
jo
pusha
pop
push
stos
mov
mov
dec
mov
adc
lds
aad
and
repnz
mov
xor
cli
mov
jmp
xor
enter
rcl
in
cmc
test
(bad)
(bad)
daa
mov
jne
lods
sub
and
retf
cmp
mov
scas
(bad)
es
fs
cmp
or
inc
je
adc
rcr
cmps
fist
mov
mov
aaa
mov
xchg
fs
mov
mov
cs
mov
outs
(bad)
xor
push
and
fisttp
jne
jmp
out
xchg
shr
sub
test
mov
cmps
in
mov
ficom
inc
push
adc
in
xor
and
jno
add
mov
fcomi
cmp
mov
pop
iret
jl
add
adc
out
pop
out
clc
sti
push
popa
adc
pop
(bad)
jmp
out
cmp
xchg
and
push
ror
xchg
pop
div
add
adc
xor
mov
aas
adc
inc
mov
hlt
mov
in
out
adc
add
jne
cmp
bound
test
aam
in
test
jl
push
ficomp
mov
pop
mov
rcl
ins
xchg
movs
loopne
sahf
push
(bad)
fst
mov
add
shl
mov
cmp
clc
add
fld
pop
outs
or
sub
push
dec
es
in
cmc
hlt
scas
not
inc
mov
stc
jnp
out
popa
sbb
dec
ins
popa
jno
dec
adc
pop
scas
daa
inc
pop
mov
ret
fldcw
xor
xchg
aam
adc
fisttp
dec
popa
push
cdq
ficom
xchg
aaa
ror
sahf
leave
sub
pop
adc
push
aam
adc
hlt
out
in
popa
mov
cld
dec
jnp
and
das
int3
out
mov
push
jnp
rcr
scas
xor
inc
ja
pfmul
sahf
dec
jne
ret
mov
pop
lods
cmps
mov
fsubr
fistp
sub
jle
mov
or
je
sti
sbb
dec
stos
lock
hlt
mov
inc
pop
cmp
sub
(bad)
loop
(bad)
jno
enter
aad
lahf
cs
mov
aas
mov
ins
pop
pop
fs
mov
outs
adc
xchg
fstp
dec
jg
shl
xor
aas
dec
pop
mov
je
jno
lahf
pop
popa
mov
dec
stos
lock
hlt
xor
sahf
(bad)
mov
mov
test
jmp
and
icebp
push
mov
inc
jecxz
fcomp
and
pop
out
sub
fdivrp
xchg
cmp
jns
(bad)
iret
dec
and
retf
mov
adc
sub
mov
cmps
pop
push
out
push
mov
and
arpl
dec
fcmovnbe
fs
xchg
jg
por
fcmovnu
mov
mov
sub
jnp
imul
popf
dec
xor
lds
sbb
cmp
push
and
xchg
mov
sbb
addr16
mov
push
fisttp
dec
pop
sub
mov
push
aam
inc
jbe
cmps
push
sbb
pop
push
add
dec
or
shl
inc
push
fwait
outs
je
ret
ret
add
dec
push
loop
pop
popa
mov
fucomip
or
jb
or
mov
and
xchg
(bad)
int
xchg
add
inc
xor
and
jo
test
das
sbb
sub
fdivr
sub
sub
mov
int
ror
pop
or
push
call
mov
popa
jecxz
jg
sub
std
and
cwde
ins
hlt
and
outs
lods
adc
sub
xor
add
dec
jg
or
mov
lahf
(bad)
fs
lock
pop
jmp
and
addr16
cli
aam
mov
hlt
mov
gs
aas
les
dec
test
dec
scas
xchg
fwait
imul
inc
cmp
(bad)
fs
jo
(bad)
lahf
adc
enter
sub
xor
mov
mov
in
adc
sub
ss
push
pushf
loope
add
in
jmp
(bad)
push
and
cmp
mov
stos
pop
cwde
xor
jle
fwait
test
jbe
xchg
adc
sbb
icebp
rol
mov
sahf
pop
mov
push
sub
xor
or
ja
and
cmc
or
stos
sbb
push
sbb
rcr
ss
xchg
xchg
ficomp
mov
and
aas
mov
inc
sub
out
adc
or
int
les
std
dec
cmp
fimul
jge
inc
push
jno
mov
call
xor
popa
and
xor
adc
sbb
jnp
retf
xor
(bad)
mov
xchg
mov
dec
pop
adc
dec
jb
cmps
imul
retf
mov
sbb
mov
sbb
iret
(bad)
movs
movs
adc
mov
and
mov
rcl
(bad)
mov
pop
sbb
jg
jo
add
mov
sbb
push
jl
mov
jmp
jae
mov
add
jnp
xchg
out
outs
mov
sti
ins
dec
pop
daa
repz
outs
mov
add
push
rol
das
add
push
inc
lock
in
or
xchg
mov
rcl
pop
iret
shl
and
push
pop
idiv
mov
cmc
jnp
inc
cmp
sbb
jo
icebp
adc
in
and
adc
xor
and
imul
stos
mov
(bad)
mov
stos
fist
or
push
pop
sub
mov
inc
mov
mov
inc
mov
rcl
add
and
add
push
or
add
int3
pop
mov
popf
or
(bad)
icebp
cmp
cmp
or
out
sbb
nop
fcom
mov
jmp
(bad)
push
xchg
pusha
bsr
xor
mov
fucomi
add
lock
jmp
(bad)
adc
lahf
or
mov
adc
jecxz
fcmovnbe
xor
cmp
jmp
aad
add
adc
shl
ss
mov
ror
pop
inc
test
fild
xchg
push
push
xor
add
cmp
xor
sbb
cmp
fist
cld
imul
push
mov
call
jmp
or
jbe
in
aas
imul
mov
scas
jo
inc
inc
xchg
xchg
inc
push
cmp
mov
test
nop
pop
or
mov
imul
sub
cmp
push
cld
sbb
sub
int3
imul
repz
sub
mov
adc
push
mov
ja
push
dec
push
cdq
iret
shr
test
ficom
test
stc
lea
shr
or
add
adc
fld
pop
call
daa
test
jnp
pop
push
inc
xor
dec
push
push
retf
rcl
and
mov
add
dec
add
test
hlt
mov
dec
idiv
loopne
pop
dec
dec
mov
mov
xchg
or
das
inc
div
adc
mov
cmp
mov
(bad)
loope
das
jp
fdivr
in
loope
(bad)
jmp
push
das
mov
cli
in
or
adc
or
out
dec
adc
idiv
aam
sbb
jns
out
jmp
and
in
jmp
ss
xchg
out
call
mov
ds
cmp
mov
or
dec
xchg
adc
and
gs
outs
ret
(bad)
adc
sahf
movs
mov
xchg
nop
fwait
in
mov
dec
xchg
inc
sbb
mov
leave
sahf
in
hlt
add
test
not
adc
or
xor
xor
jmp
out
lods
cwde
icebp
in
test
push
pop
iret
fsubr
inc
aam
jno
ins
mov
xchg
pop
ja
jnp
adc
stos
gs
jg
out
in
xchg
sub
cmp
mov
push
outs
(bad)
hlt
mov
lods
fdivp
ins
and
lock
js
out
das
pop
push
and
xchg
sahf
shl
dec
sbb
sub
push
daa
retf
stc
jnp
imul
ds
fldenv
out
or
test
sub
add
aad
jg
xor
ins
ficomp
sbb
shl
hlt
or
fmul
jnp
jl
stos
sahf
sar
mov
retf
lock
sub
xchg
sub
push
pop
out
or
gs
inc
sbb
push
enter
aam
jmp
or
cmp
lea
cmps
xchg
sbb
retf
mov
(bad)
je
and
les
hlt
add
rcl
lea
push
sti
jno
jl
movs
pop
inc
push
fadd
cmp
in
mov
shl
pop
retf
popf
jnp
das
mov
aaa
inc
jle
call
mov
or
sbb
push
sbb
sbb
mov
mov
jnp
rcr
inc
(bad)
out
outs
in
hlt
lods
cli
jmp
pop
pop
iret
not
adc
jmp
call
fs
out
sub
cmps
pop
or
lods
mov
retf
mov
sbb
or
popf
or
and
in
xor
in
sbb
push
xchg
or
sub
in
fs
cmps
push
push
add
adc
test
add
inc
add
add
ror
inc
lock
add
xchg
or
lds
mov
test
dec
pop
stos
inc
pop
and
les
jo
mov
outs
sbb
retf
in
push
cmps
xchg
frstor
dec
je
retf
dec
lods
push
mov
(bad)
outs
into
fidivr
cmp
(bad)
mov
push
xlat
add
mov
cmp
shl
xor
cmp
or
or
jnp
nop
push
repnz
test
dec
push
xchg
adc
mov
jmp
ins
aam
mov
fsubr
movs
lock
dec
jmp
in
adc
mov
xchg
and
push
jo
sbb
mov
pop
push
inc
ret
loopne
xor
mov
fsubr
call
jae
sti
aad
in
jns
inc
test
dec
pop
lods
push
xchg
call
dec
cmp
fwait
push
(bad)
jl
loopne
(bad)
cdq
movs
xchg
imul
fldcw
dec
sub
sub
shl
pop
push
not
cdq
fwait
mov
mov
fcmovnb
mov
scas
fistp
jno
cmp
mov
cs
scas
adc
leave
or
out
mov
sysenter
mov
jmp
xor
xchg
sub
(bad)
xor
(bad)
mov
mov
hlt
ss
rcl
test
or
test
cmp
iret
aam
dec
xor
and
dec
inc
inc
push
shl
jmp
mov
inc
jmp
sbb
inc
adc
push
push
imul
pop
mov
fwait
and
dec
rcl
pushf
mov
jne
lds
call
xchg
fs
cmps
jg
loope
dec
jbe
xlat
and
adc
adc
in
ins
in
add
mov
enter
daa
loop
cmp
data16
adc
popa
mov
test
push
xchg
sbb
test
dec
int3
mov
or
or
and
or
or
rcr
push
mov
repnz
fs
loopne
shr
fwait
rol
in
jne
jnp
test
test
mov
pop
add
fistp
jle
mov
pop
sti
fidivr
add
stos
mov
add
pop
mov
in
loopne
sub
mov
sub
dec
mov
xchg
jmp
xor
mov
ja
add
fwait
sbb
lods
retf
imul
aam
xchg
out
dec
mov
jp
pop
popf
push
lea
xchg
jo
(bad)
mov
test
daa
out
in
mov
pcmpeqb
dec
cmp
and
ror
setp
sub
lahf
cmp
jne
adc
mov
and
pop
dec
scas
rcr
sub
ret
rol
fisub
jnp
xchg
add
leave
mov
aam
fcom
nop
je
sti
movd
and
cld
test
inc
fisttp
pop
mov
not
je
xor
dec
xchg
pop
ins
add
sbb
data16
outs
loop
pop
jge
int3
mov
in
mov
jo
ret
icebp
into
shl
mov
std
cmp
lahf
push
xor
xor
inc
out
in
outs
mov
fcomi
pusha
adc
arpl
jg
push
dec
cmp
je
aas
push
aad
and
ret
(bad)
adc
xchg
sub
and
fst
popa
push
je
jl
add
and
mov
adc
fwait
ja
or
inc
(bad)
rol
or
dec
mov
aas
out
jns
les
mov
and
pushf
repz
ja
sbb
ret
fild
or
jmp
(bad)
jae
fist
sbb
push
dec
xor
jl
test
jnp
dec
stos
sub
fiadd
xchg
pop
sub
mov
out
push
je
adc
or
pop
ja
adc
aad
in
jle
or
adc
jle
nop
jno
je
ins
push
pop
sbb
ja
les
loope
sar
push
inc
cmps
push
and
dec
clc
jnp
loopne
pop
dec
pop
cmps
jmp
jl
mov
mov
stos
leave
mov
lea
push
sbb
cs
dec
loop
jns
xchg
sti
adc
out
jnp
push
(bad)
out
and
iret
xor
mov
or
stos
pop
addr16
mov
or
dec
lds
add
loopne
push
out
(bad)
gs
fwait
in
das
std
fdivr
movs
jns
outs
xchg
nop
jno
je
add
mov
mov
out
mov
sbb
inc
mov
adc
sbb
fs
movs
mov
xchg
cdq
dec
fcmovb
enter
ins
pop
imul
sbb
je
sar
inc
aam
xchg
fs
movs
outs
sti
jle
push
and
retf
dec
adc
hlt
outs
or
or
pop
ds
pop
out
mov
ret
push
je
xor
aad
xchg
fwait
in
cmc
jbe
pushw
xor
mov
jge
mov
data16
pop
scas
pop
mov
aad
xlat
les
les
sbb
cmp
adc
add
dec
push
mov
jecxz
dec
xor
mov
sbb
sub
push
push
lods
jmp
in
jns
enter
stc
or
pop
cmp
test
adc
fimul
add
mov
mov
jnp
push
push
movs
xchg
mov
mov
movs
(bad)
test
inc
call
xchg
sbb
push
add
outs
xchg
push
xchg
inc
je
mov
jecxz
jnp
cmp
(bad)
icebp
sbb
add
test
mov
cmp
push
repz
loope
pop
and
cmc
in
xor
xlat
push
mov
(bad)
popa
sub
pop
mov
xchg
fs
icebp
xchg
mov
icebp
repnz
imul
js
inc
aam
outs
sub
not
test
sbb
je
retf
les
hlt
sti
or
je
and
imul
outs
and
iret
mov
mov
adc
popa
and
jg
push
or
scas
xchg
call
mov
xor
cdq
shl
push
jge
repnz
test
test
mov
adc
in
jae
imul
loop
bnd
movs
mov
jae
adc
sbb
iret
es
pop
cmp
ret
cdq
push
popa
sbb
inc
inc
stos
aam
in
movs
jmp
(bad)
(bad)
sahf
out
adc
pop
movs
or
jne
cmp
mov
fs
push
and
mov
adc
sub
retf
jb
sub
xchg
sbb
jle
dec
xor
test
fwait
mov
or
sar
or
leave
ds
sbb
xor
dec
jno
shr
cmps
add
fwait
imul
mov
mov
loop
inc
outs
cmps
sub
push
stos
jmp
push
mov
sbb
inc
(bad)
(bad)
sahf
gs
pop
adc
test
loope
inc
addr16
xor
les
and
jl
bound
push
sbb
xor
xchg
add
fisttp
cmp
xlat
inc
loope
sar
(bad)
mov
inc
in
leave
ret
xchg
dec
mov
(bad)
aad
and
jno
dec
and
mov
xchg
test
push
cs
sub
push
in
cs
(bad)
sub
sbb
sar
push
imul
mov
sbb
add
sahf
add
out
and
mov
(bad)
pop
outs
push
frstor
hlt
mov
je
adc
jae
bound
mov
jg
sar
jl
jge
frstor
push
cwde
add
ins
in
cmp
xchg
adc
cmp
sub
iret
sub
jns
imul
dec
push
pop
pushf
mov
jecxz
data16
(bad)
push
dec
out
fdiv
sub
in
cdq
mov
sbb
shr
pop
sbb
or
scas
or
mov
xchg
cmc
cli
(bad)
mov
sbb
jae
push
cdq
retf
adc
jg
inc
add
and
je
add
inc
popf
jb
hlt
or
pusha
add
add
inc
stc
jbe
das
add
outs
je
or
push
sbb
add
aam
in
or
or
sbb
leave
cmps
stos
fisub
cmc
fld
sbb
sbb
mov
(bad)
nop
mov
fs
push
mov
fs
xor
cdq
and
push
in
mov
fild
jnp
dec
add
(bad)
jnp
imul
jb
jp
aas
scas
(bad)
std
das
xor
mov
jl
mov
das
addr16
xor
scas
ret
in
pop
(bad)
mov
fdiv
lahf
and
pusha
add
(bad)
loopne
shl
xchg
push
adc
sub
inc
inc
icebp
jbe
jbe
push
aaa
hlt
dec
sub
sbb
scas
mov
jnp
and
pop
mov
outs
adc
or
or
inc
and
jne
les
fild
mov
cld
repz
imul
mov
lock
retf
jo
dec
push
jecxz
sar
or
fisubr
mov
inc
ds
ins
dec
stc
jnp
push
inc
sbb
mov
or
retf
in
mov
push
xchg
scas
(bad)
out
leave
cli
dec
in
cmc
pop
xor
hlt
mov
fs
les
cmc
mov
dec
adc
jb
sbb
pop
popa
ds
jle
pop
ja
(bad)
dec
fisubr
fs
je
jo
and
out
repnz
sbb
xchg
aam
and
in
mov
pop
mov
adc
cmp
push
in
popa
mov
lds
inc
mov
sub
jnp
loopne
gs
imul
stos
inc
xor
ss
arpl
xor
xchg
ret
xor
retf
repnz
inc
sub
nop
push
adc
clc
push
inc
mov
mov
push
mov
xor
dec
and
cs
mov
adc
cmp
sub
dec
xor
lock
daa
and
add
jnp
arpl
test
arpl
mov
jl
mov
retf
adc
xor
fs
sub
sbb
jmp
mov
and
call
adc
jnp
(bad)
cmp
ins
in
fisub
jnp
sub
and
jns
dec
stos
xchg
pop
sbb
sub
jmp
jmp
inc
jle
dec
fistp
xor
add
adc
xchg
je
daa
inc
adc
and
sbb
fs
or
les
or
inc
jmp
out
mov
push
or
push
cmp
sbb
xor
imul
(bad)
out
retf
bound
and
dec
js
add
adc
mov
ja
(bad)
scas
xchg
jp
retf
je
mov
or
pop
sub
aam
xchg
or
hlt
fdiv
xchg
js
push
cdq
pop
xor
mov
retf
adc
push
addr16
in
and
imul
into
or
shr
cmp
(bad)
mov
adc
stos
jne
pop
je
(bad)
xchg
jne
jb
inc
dec
xor
mov
les
push
(bad)
icebp
pop
mov
out
mov
pop
loope
mov
les
fwait
pop
out
cmp
scas
jbe
push
ins
das
pop
iret
outs
or
out
jmp
sahf
cs
ds
mov
cmp
cmps
cmp
outs
bound
scas
cwde
sub
dec
cli
add
test
mov
arpl
ret
pushf
inc
test
hlt
cmp
addr16
mov
leave
hlt
mov
cmp
mov
hlt
cmp
push
xchg
xchg
cwde
sti
out
sahf
and
das
pop
dec
mov
lds
lock
daa
out
mov
push
imul
je
push
pusha
or
jnp
inc
mov
or
sub
mov
scas
dec
push
not
nop
(bad)
sysexit
jo
mov
push
or
retf
sar
icebp
test
imul
and
pusha
outs
fmul
ja
movs
jle
nop
outs
cmp
outs
(bad)
cdq
jne
push
ss
mov
out
enter
push
or
shl
and
jno
mov
push
dec
pop
sub
jnp
nop
xlat
jae
clc
pop
pusha
lahf
shl
or
or
cmp
sub
rol
shr
adc
loopne
sbb
clc
push
sub
xchg
ret
push
not
rcl
jle
mov
and
adc
inc
sub
xchg
ret
aas
mov
push
fistp
add
mov
imul
loope
inc
pop
rcr
repnz
fldcw
stos
or
adc
sbb
adc
xor
sub
sti
inc
retf
jne
sub
xor
pop
ret
pop
xor
and
pop
in
and
xchg
cmp
push
cli
dec
mov
retf
mov
js
push
xor
add
adc
(bad)
iret
jg
nop
and
je
jno
fisub
pop
retf
mov
in
hlt
jo
cmps
push
pop
hlt
fwait
pop
sti
inc
jmp
pop
jmp
imul
and
inc
shl
aam
outs
lahf
mov
push
pop
xchg
jb
inc
aam
frstor
(bad)
inc
lds
cmc
jg
jb
fcos
arpl
clc
jmp
push
gs
jbe
sub
push
ins
or
mov
stos
clc
shr
rol
cmps
pop
call
xchg
push
div
les
fsubr
jae
loopne
movs
aad
mov
jb
dec
xor
scas
das
xor
mov
or
dec
inc
es
fldenv
push
cmp
or
xchg
scas
dec
sahf
mov
pop
gs
push
add
inc
mov
add
aam
addr16
mov
pop
jmp
cwde
imul
test
cdq
pop
call
stos
aam
and
aaa
les
or
xor
fwait
mul
add
jl
popa
dec
xor
dec
adc
mov
icebp
cli
inc
pushw
out
adc
push
inc
lahf
sbb
mov
mov
ins
fwait
outs
add
mov
iret
push
loope
idiv
jmp
retf
xchg
in
imul
sbb
fbld
cli
cdq
mov
fidivr
aam
div
sbb
dec
pop
iret
je
xchg
int3
mov
xor
fsubr
rcl
fstp
imul
not
sti
aad
fistp
jo
outs
sar
cmp
push
mov
jl
pop
out
push
in
xor
dec
and
lods
dec
aaa
sti
fld
and
dec
and
cmps
push
loop
add
(bad)
movs
xor
and
aad
in
or
mov
call
mov
clc
daa
sub
out
jb
mov
addr16
pusha
sub
imul
mov
or
clc
aam
les
xor
or
nop
cmp
in
and
xchg
repz
inc
outs
aam
movs
push
hlt
test
int
call
sbb
or
dec
or
lea
add
jge
cmp
fwait
cli
pop
jae
add
jo
push
(bad)
fcmovnbe
cwde
dec
inc
mov
pop
ins
retf
int
inc
shl
std
or
push
hlt
cmps
sahf
icebp
xchg
(bad)
adc
scas
das
popf
je
sbb
and
ins
out
push
add
adc
call
int
leave
xchg
movs
lahf
fsubr
aam
in
or
sti
rcl
popa
shr
ficom
nop
in
mov
fstp
push
mov
faddp
mov
out
test
jecxz
or
iret
xor
out
test
bound
push
out
dec
xor
outs
test
in
or
inc
ins
adc
and
mov
retf
(bad)
fistp
fsub
sub
mov
inc
sub
lahf
cs
push
fsub
xchg
ror
dec
dec
add
sbb
outs
std
cmp
xchg
pusha
(bad)
or
addr16
cli
sub
les
out
jnp
push
sahf
pop
sbb
jns
xchg
mov
xchg
and
and
ss
jnp
in
pop
jp
xor
sbb
out
push
sub
mov
icebp
jmp
push
movs
iret
(bad)
cmp
mov
adc
push
jno
jmp
fmul
retf
xor
mov
sti
shl
push
mov
sbb
ret
shr
vunpcklps
and
mov
fwait
mov
lods
daa
shl
gs
push
mov
add
mov
add
add
test
or
inc
das
outs
sbb
push
jo
add
es
rol
sub
or
xor
mov
and
in
loope
sbb
jno
(bad)
fidiv
xchg
call
bound
das
mov
rcr
cwde
hlt
mov
cs
xor
iret
pop
add
inc
test
fidivr
movs
ins
add
es
mov
add
dec
xchg
sub
push
xchg
rcr
hlt
add
jmp
xchg
push
jns
aam
push
call
pop
je
cmc
mov
hlt
stc
xor
jb
dec
mov
in
fwait
mov
je
push
cmps
scas
fwait
loopne
xchg
pushf
sub
jne
add
sub
mov
rcr
lods
dec
xor
enter
fwait
adc
dec
or
and
cmp
push
pop
adc
cli
mov
pop
dec
movs
or
daa
gs
test
cld
xchg
mov
test
sbb
movs
jnp
pop
push
sub
sub
push
stos
add
mov
in
mov
mov
cli
ins
test
cdq
popf
retf
shr
pop
aas
xor
ss
mov
dec
loop
mov
aam
cmp
pop
scas
test
cmp
inc
ret
xor
stos
adc
ins
sbb
mov
lea
jnp
fistp
mov
nop
adc
je
add
std
or
cmp
xor
sti
aad
imul
xchg
sub
stos
out
imul
das
and
xlat
cmp
pop
aam
addr16
(bad)
adc
cmp
dec
mov
jne
or
aam
and
xor
mov
(bad)
fwait
sbb
leave
mov
mov
lds
pusha
movs
mov
fwait
adc
jl
cpuid
push
push
sub
push
cmp
or
sbb
clc
aam
push
mov
and
xchg
and
xor
mov
(bad)
sbb
ret
frstor
ja
stos
sub
je
pop
push
xchg
push
sub
or
mov
xlat
cmc
adc
or
test
pop
movs
imul
cdq
jmp
xor
lock
xchg
fisttp
inc
add
and
ins
cld
cs
sbb
ds
pop
or
(bad)
pusha
xchg
sub
sub
lds
stc
call
jo
and
mov
gs
sub
ror
xor
xchg
mov
push
aam
pop
mov
inc
cmp
fwait
xor
shl
repz
dec
jnp
test
int3
and
out
cmp
inc
dec
call
loopne
mov
sub
aas
jmp
pop
movs
into
or
sub
idiv
xchg
ret
or
(bad)
fisubr
pop
mov
test
int
cmp
jb
jnp
mov
xor
ret
int
retf
cmps
mov
inc
xor
cli
mov
push
mov
sti
sub
mov
fst
std
leave
mov
je
sbb
xlat
test
adc
aam
pop
mov
push
xchg
pop
mov
sub
outs
pop
push
scas
nop
xor
cmp
fnsave
aam
inc
gs
popf
je
xor
jmp
loopne
fwait
enterw
and
xchg
loope
jge
nop
jmp
push
sti
inc
(bad)
daa
xchg
sbb
stos
adc
ja
test
in
mov
and
retf
aas
mov
out
int3
mov
sti
imul
mov
cmp
ins
mov
test
shl
sub
push
dec
imul
xor
retf
jp
inc
adc
dec
mov
mov
nop
jge
cmp
sub
jmp
xchg
aad
push
jo
jmp
push
jne
outs
push
xor
ret
mov
jb
cmp
out
div
fcomp
les
inc
mov
cdq
jne
mov
jmp
lahf
or
push
retf
mov
mov
std
aam
test
hlt
jbe
sbb
and
pop
mov
lds
jns
adc
mov
mov
loope
mov
mov
push
icebp
fwait
inc
push
popf
or
inc
stos
fdivr
mov
jns
jns
imul
das
in
fcmovnb
jb
dec
popa
pop
mov
popa
adc
imul
pop
mov
sub
rol
scas
push
jae
or
outs
push
imul
push
xor
xchg
sbb
test
scas
xchg
pop
std
fwait
div
inc
jmp
push
mov
addr16
sbb
stc
inc
add
fnop
fwait
mov
mov
int
mov
add
sub
inc
mov
push
pop
and
jge
inc
cmp
sbb
mov
(bad)
adc
adc
rcr
je
sti
test
fld
mov
fdivr
stc
jle
in
sbb
sub
in
pusha
sti
xchg
pushf
call
sub
sbb
push
dec
lods
sbb
and
mov
mov
aam
dec
dec
push
sub
popa
js
out
push
ja
jno
or
pop
fwait
mov
adc
push
mov
push
pop
mov
stos
in
fisttp
xor
mov
jne
mov
cmp
sub
sub
out
dec
je
inc
sbb
shl
inc
mov
loopne
nop
xor
adc
sbb
fwait
mov
mov
dec
nop
push
cli
sub
add
clc
or
aam
fcomp
icebp
push
stos
add
call
ja
xchg
add
stc
sbb
call
and
xchg
push
pop
movs
xor
les
cwde
fsubr
hlt
xor
add
adc
inc
sti
aam
popa
sti
jge
ins
xchg
push
xchg
gs
js
add
adc
sub
adc
in
dec
jno
or
arpl
fndisi(8087
cmp
or
cwde
pop
jne
mov
(bad)
and
retf
aad
jmp
hlt
mov
sub
jmp
fwait
mov
in
dec
jno
lds
push
call
repz
mov
sub
push
sbb
add
cwde
scas
adc
cmps
(bad)
outs
shl
cld
add
fldenv
(bad)
aas
push
dec
jl
dec
jns
popa
cmp
sbb
jae
pop
mov
in
or
test
scas
pop
xor
js
test
pop
cmp
cmp
adc
es
pop
int
je
xchg
das
test
sbb
inc
sbb
xor
inc
adc
push
movs
and
xor
adc
xchg
out
mov
psubq
mov
bound
mov
hlt
inc
jnp
add
cs
mov
into
pop
mov
pushf
add
cmp
mov
repz
add
jmp
and
mov
mov
jnp
adc
mov
fwait
hlt
mov
imul
shr
hlt
mov
sar
test
popa
mov
ins
imul
add
arpl
add
jmp
fisubr
lds
cs
pop
fwait
idiv
clc
mov
cmps
jge
xchg
mov
in
hlt
jo
pusha
jmp
outs
fnstsw
jecxz
jnp
sbb
retf
call
inc
loope
aaa
xlat
test
dec
mov
jbe
inc
movs
fdiv
rcl
fldcw
xor
scas
xchg
daa
das
test
and
ds
sbb
jb
xor
js
test
je
mov
bound
fs
push
ss
xchg
xchg
movs
ror
inc
cmp
pop
fs
cmc
jns
leave
sub
jmp
leave
sub
mov
jg
push
sbb
xchg
adc
mov
out
push
mov
cmp
jecxz
in
popa
cdq
shr
cs
fwait
out
mov
push
aas
or
inc
pop
sub
cmp
pop
rol
dec
(bad)
(bad)
out
addr16
hlt
push
pop
mov
add
xor
imul
and
je
xor
lahf
xor
mov
xchg
in
hlt
scas
leave
bound
daa
and
iret
sbb
add
jp
stos
sub
icebp
enter
in
and
shl
cld
sub
test
jle
mov
sti
sub
jnp
sbb
and
xchg
in
xor
adc
jmp
fdiv
mov
xor
movs
xchg
mov
adc
outs
mov
push
popf
jle
and
enter
mov
mov
cmps
adc
inc
es
dec
jmp
sub
sub
(bad)
xchg
addr16
ins
fwait
loope
xlat
cmps
sbb
ret
rcr
and
jnp
sub
shl
rol
sub
mov
lahf
cmp
mov
mov
(bad)
and
or
pop
addr16
scas
cwde
pop
into
dec
test
cmp
and
int
int
inc
pop
lock
popa
push
scas
pop
int3
mov
mov
mul
je
push
sbb
ret
inc
outs
push
test
inc
out
cli
inc
test
push
cdq
inc
hlt
adc
cmps
loope
mov
ins
sar
(bad)
push
stos
ror
enter
mov
adc
and
xor
jl
nop
pop
rcl
popf
xchg
fiadd
mov
pop
push
in
dec
lock
xchg
pop
xchg
mov
retf
out
adc
popa
dec
push
push
xlat
xchg
es
cmp
aam
mov
mov
add
test
test
je
pop
outs
adc
scas
dec
call
mov
setle
and
pop
xor
test
imul
shl
hlt
adc
sbb
or
ret
outs
fld
stc
mov
aam
out
dec
je
add
aam
test
out
aam
mov
or
(bad)
mov
cmp
(bad)
xlat
push
iret
es
popa
test
cdq
movs
cmps
push
xor
inc
stos
pop
pop
mov
clc
mov
push
jb
repz
pop
fs
cs
or
and
neg
sub
adc
and
mov
cmp
test
xchg
clc
movs
aam
mov
rcr
outs
loope
mov
aas
inc
xor
jg
fild
hlt
fs
imul
(bad)
ins
fwait
mov
jo
fs
and
mov
sbb
push
mov
or
and
xchg
test
into
movs
mov
jbe
sub
fcomp
cs
scas
imul
pop
repz
hlt
add
jmp
push
movs
popf
jb
dec
ficom
jno
jl
cmps
and
rol
jecxz
test
mov
jo
inc
jl
xchg
stos
mov
shl
jbe
sbb
dec
out
mov
movs
push
jecxz
cmp
out
es
inc
push
jo
sbb
mov
in
pushf
add
and
cmps
cmovo
xlat
add
mov
cmp
jne
repnz
dec
stos
cmp
pop
mov
push
pop
or
or
push
fisttp
loop
repnz
fs
sahf
call
pusha
(bad)
inc
retf
ins
iret
pop
stos
sbb
and
sti
xor
mov
lock
stos
sti
xlat
lods
scas
push
push
pop
push
xchg
mov
or
cmp
ret
dec
pop
not
fdiv
xchg
movs
mov
ret
fstp
cmp
jg
push
jle
repz
inc
lahf
stos
mov
lods
icebp
jmp
add
leave
cld
test
mov
pop
jge
cld
push
cmp
outs
icebp
sbb
stos
jnp
xchg
and
call
cwde
or
jnp
adc
mov
adc
mov
jecxz
cdq
ror
cmp
push
pushf
or
jno
push
pop
hlt
jo
cmp
lods
push
xchg
in
xchg
mov
mov
ret
mov
inc
jmp
in
mov
or
mov
xchg
pusha
fs
test
adc
fisub
or
cmps
inc
cmp
and
jge
xchg
sbb
xchg
aaa
inc
call
div
cmp
jo
jp
nop
ret
adc
clc
test
je
inc
mov
fs
jmp
inc
cmp
mov
mov
mov
xor
movs
sub
retf
mov
(bad)
jle
push
mov
(bad)
(bad)
in
mov
loopne
pop
(bad)
jno
retf
add
lods
pop
jb
mov
and
dec
fs
stc
stos
test
push
jns
jge
sti
mov
popa
and
and
mov
shr
aam
in
mov
sbb
mov
mov
jmp
stos
popf
xor
xor
dec
stos
pop
mov
jecxz
mov
sub
sub
dec
xor
popa
jecxz
rcl
imul
aam
or
(bad)
adc
stos
sbb
imul
iret
ret
dec
lods
mov
jmp
imul
sar
sub
sbb
repz
add
dec
idiv
ins
mov
and
mov
in
or
popf
inc
and
call
(bad)
pop
ins
pop
(bad)
(bad)
mov
inc
dec
jae
jnp
cmps
movs
pop
jo
inc
fwait
dec
xor
fdiv
(bad)
(bad)
sub
mov
xor
lock
push
pop
pop
push
and
mov
cwde
ins
add
or
mov
jge
mov
push
and
sub
(bad)
hlt
lods
outs
push
cmp
adc
push
es
sbb
enter
mov
jb
aam
popf
mov
xor
into
out
mov
nop
fs
mov
add
test
cmc
shl
ret
sub
and
jmp
scas
fs
mov
adc
push
nop
or
mov
adc
ja
into
cmp
ins
xchg
jmp
mov
stos
enter
mov
scas
xor
mov
dec
mov
pushf
jnp
and
mov
cmp
xchg
fwait
xchg
(bad)
adc
xchg
jmp
scas
jmp
js
shld
je
in
xor
jecxz
ja
mov
in
aaa
adc
jmp
sbb
je
mov
xchg
or
push
fdivr
cmp
rcr
mov
push
aam
repz
je
add
in
je
fmul
inc
pop
push
pop
add
test
pop
pop
movs
add
rol
test
pop
popf
mov
sbb
inc
dec
push
mov
js
retf
retf
mov
hlt
inc
repnz
inc
in
das
in
xor
sbb
movs
mov
pop
jnp
cmp
xor
in
adc
ins
stos
sub
imul
movs
movs
jo
(bad)
fistp
xchg
jmp
jecxz
movs
push
push
add
out
or
adc
test
sub
dec
fmul
inc
xor
pop
fisttp
fldln2
jae
mov
jmp
cmp
mov
mov
pop
inc
dec
leave
aam
jmp
scas
hlt
sbb
mov
test
imul
repnz
sbb
cmp
icebp
jp
push
and
xor
push
dec
sub
dec
fwait
and
sti
add
mov
xor
xchg
push
fcomi
mov
test
push
sbb
inc
clc
add
outs
out
and
add
mov
neg
loopne
test
xchg
adc
xlat
xchg
adc
sub
call
and
in
aaa
add
jmp
sub
jne
jbe
inc
stos
jno
sbb
imul
push
cmc
in
xchg
push
jae
je
sti
ins
jmp
sub
out
mov
jnp
and
jno
retf
jl
std
and
mov
outs
xchg
mov
xor
imul
xchg
mov
rcr
(bad)
les
in
hlt
stos
scas
jmp
fimul
mov
add
add
es
je
add
inc
or
aas
xor
or
jg
xlat
test
jne
mov
xchg
nop
ror
sub
cdq
dec
and
mov
ret
in
mov
push
adc
and
and
in
xor
xor
shl
icebp
stos
mov
(bad)
popf
sbb
sub
xchg
shr
dec
sti
mov
outs
mov
movs
mov
ds
daa
je
outs
imul
xor
les
sbb
mov
(bad)
stc
mov
int
fs
test
push
loope
mov
pop
fwait
or
dec
mov
movs
fwait
xchg
dec
xchg
or
popf
cmp
out
pop
jge
mov
fwait
in
loope
cmp
ret
or
aam
pop
imul
cld
rol
or
in
xchg
ret
cmp
push
sub
xchg
(bad)
xchg
hlt
push
cs
inc
pusha
jbe
mov
mov
push
div
push
or
jmp
mov
iret
jecxz
or
mov
or
in
in
pop
jns
push
adc
icebp
sub
loopne
les
jge
pop
mov
popa
jnp
jl
pop
jnp
fsubr
cdq
sub
cmp
cmps
xchg
xchg
imul
pusha
lea
sti
cwde
fs
aaa
jnp
imul
shl
push
rcr
jo
pop
mov
mov
ficomp
add
pusha
lds
retf
inc
xor
test
cdq
pop
aaa
cmp
cmp
add
in
std
ins
jge
aam
in
jle
out
test
ja
std
jmp
call
sbb
add
mov
movs
stos
pop
sub
cmp
dec
cmp
test
push
je
aaa
mov
sbb
jl
push
(bad)
push
mov
imul
out
fist
scas
jmp
fwait
sbb
movs
test
les
pop
es
lea
enter
sbb
adc
mov
xchg
push
sbb
or
pop
sbb
fucomp
dec
mov
mov
jnp
xchg
lea
push
xor
jecxz
jnp
loopne
cld
mov
dec
sbb
mov
pusha
sub
pop
and
mov
inc
fwait
pop
cmp
or
push
jno
gs
les
mov
pop
aam
into
xchg
cmp
and
push
and
push
adc
and
cmc
mov
mov
fadd
pop
test
sub
fwait
es
lea
or
adc
or
ins
test
out
adc
fadd
mov
add
rcl
enter
jecxz
sar
test
push
mov
fwait
aaa
mov
cmp
fs
and
xchg
xor
dec
xor
add
(bad)
in
jge
test
xchg
mov
retf
mov
push
daa
mov
jnp
imul
scas
enter
(bad)
mov
mov
lahf
out
nop
cmp
out
nop
and
std
jo
loop
shr
and
xchg
lds
movs
dec
jmp
(bad)
xchg
jmp
and
idiv
sub
or
adc
pop
int3
or
sub
in
in
retf
add
lahf
xor
rcr
adc
imul
xchg
fucomi
and
repnz
adc
int
pop
jp
mov
sahf
in
xor
xchg
jmp
aam
nop
fs
mov
imul
pop
fwait
cmps
dec
pushf
fidivr
jo
sub
(bad)
(bad)
leave
cmps
push
pop
movs
addr16
jnp
sbb
mov
pop
outs
jecxz
cmp
xchg
(bad)
test
mov
dec
mov
ftst
mov
mov
push
sbb
stc
cmp
sbb
rcr
sahf
mov
ja
mov
xor
xchg
pop
daa
xchg
jns
xchg
cmp
retf
lds
pop
call
adc
mov
adc
pop
push
fild
cmps
test
xchg
sti
add
ror
inc
and
mov
sub
or
sub
in
in
or
ret
sti
xchg
pop
sbb
mov
jp
es
cmp
push
push
enter
sub
fbstp
mov
test
es
pop
add
and
dec
cwde
faddp
cmps
pop
mov
inc
fdivr
iret
inc
xchg
nop
or
mov
es
cmps
(bad)
mov
jnp
and
out
jns
aam
pop
(bad)
hlt
je
and
mov
pop
repz
adc
adc
test
sbb
pop
aad
(bad)
xor
jl
mov
jbe
into
imul
inc
mov
xchg
aam
push
jmp
shr
xor
repz
inc
and
mov
xchg
xchg
jmp
sbb
dec
out
sbb
push
pop
test
or
movs
xchg
pop
sub
xchg
fs
mov
and
adc
pushw
mov
mov
icebp
push
(bad)
scas
pop
mov
mov
test
push
stc
sub
ds
stc
mov
sub
and
adc
fucomi
inc
fdivr
cld
aam
sbb
sbb
pop
adc
pushf
mov
jp
ret
adc
mov
adc
mov
cmp
sub
rcl
dec
(bad)
loope
cdq
push
in
pushf
faddp
cmps
sbb
out
pop
jbe
sub
sti
scas
mov
fs
cdq
(bad)
test
cmps
fst
or
xchg
fs
mov
xor
sub
sbb
jnp
adc
and
jbe
sbb
inc
cmp
cli
stos
adc
ja
(bad)
test
xchg
xchg
call
jle
aam
in
inc
cmp
dec
es
push
imul
sub
cwde
test
mov
jmp
in
sub
call
jb
push
sbb
sub
and
cmp
push
sub
jmp
fidiv
iret
mov
bound
jmp
and
sub
fxam
fwait
iret
lock
inc
xchg
std
movs
and
pop
jp
ret
adc
jg
adc
fadd
or
or
pusha
sub
mov
dec
push
sub
sbb
mov
dec
cmp
cmps
stos
in
hlt
je
data16
cdq
push
sbb
jbe
adc
and
lods
xlat
fldcw
mov
jl
fcmovnb
cmc
int
pop
xchg
push
test
pusha
cld
sbb
mov
sbb
ins
imul
mov
lods
mov
mov
inc
lahf
loopne
outs
or
ficom
jg
or
push
(bad)
in
adc
adc
mov
movs
out
dec
cmp
aam
push
jmp
out
aaa
and
mov
fldenv
cmps
sbb
xor
mov
lds
push
fidiv
push
imul
(bad)
xchg
sub
jns
ret
fdiv
sbb
sti
mov
xchg
rol
and
mov
mov
jmp
push
jmp
aam
ds
stc
jnp
push
std
push
test
es
mov
fwait
and
mov
in
in
dec
add
fisttp
sahf
xor
icebp
imul
add
mov
or
clc
push
jmp
ss
dec
out
sbb
sar
jnp
jge
jmp
aam
repnz
jmp
pushw
mov
sub
scas
ja
in
adc
cdq
gs
push
mov
inc
stc
imul
push
in
jns
add
leave
inc
mov
adc
fucomi
jae
push
popa
aam
push
fdiv
sbb
imul
sar
jl
mov
xchg
mov
retf
idiv
pop
push
stos
arpl
retf
sti
repz
jecxz
daa
adc
icebp
call
xlat
xchg
sub
idiv
sub
stos
scas
sub
xor
(bad)
icebp
fs
jns
(bad)
sub
mov
and
in
jmp
mov
sub
mov
test
xchg
or
or
sub
fbstp
xchg
jle
fwait
jno
sub
jecxz
jo
sub
es
mov
test
aam
cli
rol
out
mov
sub
enter
leave
(bad)
xchg
jae
xchg
mov
jmp
dec
outs
mov
jbe
cdq
and
jecxz
inc
jnp
xchg
xchg
sub
idiv
mov
outs
ss
data16
stc
cmp
fs
leave
or
pop
push
movs
jbe
sbb
fidiv
mov
dec
xchg
in
addr16
mov
sub
imul
dec
jmp
repz
in
dec
mov
fild
jl
pop
xchg
push
test
fstp
cmp
xor
outs
inc
xchg
rcr
(bad)
jbe
shr
mov
jnp
mov
cmp
jne
pushf
and
adc
hlt
push
test
push
pop
repz
pushf
add
repz
xchg
sbb
fcomp
mov
or
add
(bad)
dec
mov
mov
sbb
mov
pusha
test
mov
xchg
fs
mov
in
aad
imul
aam
and
push
mov
jae
and
call
xchg
(bad)
in
mov
imul
add
test
dec
cmp
ret
sub
mov
xor
outs
pop
call
jge
push
test
cld
fs
int3
test
adc
and
mov
mov
fldenv
cmps
mov
cld
aam
sbb
mov
test
out
push
imul
pop
xchg
in
xor
xchg
fs
fucomi
inc
mov
cmp
sti
out
movs
dec
outs
retf
scas
or
icebp
sbb
out
mov
jmp
xchg
or
xor
push
stos
mov
dec
test
xor
dec
cmc
mov
add
xor
rcr
(bad)
inc
jmp
and
pop
(bad)
and
pop
mov
mov
sub
iret
and
push
jmp
es
pop
add
fs
(bad)
dec
add
or
dec
xchg
stos
test
or
cs
movs
imul
sub
fs
xor
inc
mov
mov
jmp
jnp
xchg
mov
test
pop
mov
add
cmps
sbb
out
fcomp
mov
mov
jnp
out
sbb
mov
les
mov
and
pop
fcomp
mov
add
enter
loopne
mov
fwait
test
cmps
sub
enter
mov
xchg
pop
xor
scas
retf
xchg
cmp
pop
test
cmp
push
adc
fcmovnb
xor
cmp
mov
test
imul
dec
sub
mov
pop
add
jmp
jnp
push
or
xchg
cdq
and
sub
mov
aam
js
imul
scas
fs
aaa
mov
jmp
data16
in
or
test
dec
xor
and
mov
xchg
and
add
inc
aam
push
jmp
es
and
retf
sbb
push
data16
cmps
sub
pop
or
test
pop
sub
ret
sti
pop
adc
pushf
mov
mov
cmps
(bad)
jns
(bad)
jb
arpl
mov
mov
addr16
mov
push
mov
in
addr16
xchg
test
stc
mov
imul
push
imul
aam
and
jmp
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
repnz
loop
sar
movs
jmp
cli
test
jne
sub
inc
dec
sub
data16
xchg
jmp
shr
jae
push
xor
xor
jge
(bad)
loope
shr
mov
push
pusha
pop
push
sub
and
jle
(bad)
lock
loopne
sar
cmps
call
imul
or
jnp
imul
dec
imul
mov
mov
inc
sub
jnp
mov
popa
ja
sahf
mov
in
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
fild
push
sbb
jnp
outs
adc
dec
xor
loopne
lock
rol
push
outs
adc
pusha
xchg
hlt
out
push
mov
les
xchg
nop
sar
inc
sub
or
pop
and
xor
cmp
hlt
sti
dec
jmp
(bad)
popf
sbb
daa
add
jmp
and
std
mov
in
hlt
sti
dec
jmp
adc
push
in
or
or
fisttp
mov
in
or
dec
jmp
adc
sahf
sbb
pop
add
jmp
in
dec
xor
(bad)
repnz
sbb
xchg
and
xlat
or
pop
call
push
aam
in
cmp
or
xchg
and
pop
mov
mov
fcomp
fs
je
add
fstp
dec
xor
les
fwait
sub
xchg
(bad)
push
sbb
jnp
imul
stos
mov
in
hlt
sti
loop
xchg
(bad)
push
sbb
sbb
inc
sub
fsub
mov
sti
test
pop
and
or
sbb
ins
add
dec
xor
lods
ret
mov
xchg
in
jmp
(bad)
cmp
adc
jge
dec
and
lods
ret
(bad)
loop
sti
test
xchg
mov
mov
ds
popa
push
adc
adc
and
pop
shr
loope
nop
out
cmp
iret
retf
mov
inc
inc
push
sbb
jnp
imul
and
(bad)
sar
test
push
sub
ja
sbb
push
daa
pop
xlat
test
mov
sti
test
xchg
mov
cmps
mov
inc
sub
jbe
or
push
jns
and
xor
test
out
sti
test
stc
mov
cmps
fnstcw
inc
sub
or
imul
and
aam
in
call
retf
mov
inc
inc
push
sbb
jnp
imul
les
sti
test
cmp
je
or
add
xor
dec
pop
aam
les
rcr
xchg
(bad)
push
sbb
or
sub
mov
xchg
mov
mov
call
xor
jp
or
sub
inc
retf
movs
jmp
ret
out
movs
retf
mov
ss
imul
imul
cmp
mov
aam
in
xchg
movs
mov
daa
sbb
or
sub
inc
enter
fwait
in
xchg
imul
out
xlat
retf
mov
sbb
or
or
adc
push
cmp
les
or
mov
jl
sub
jg
pshufw
jge
ins
icebp
les
cmp
lahf
xchg
(bad)
push
sbb
(bad)
pop
pusha
pop
and
ins
neg
mov
(bad)
lock
scas
movs
retf
mov
or
inc
fwait
or
imul
sbb
mov
nop
push
sti
icebp
sahf
loope
ror
mov
adc
sbb
jnp
imul
dec
xor
mov
aam
in
or
inc
pop
and
jge
or
and
xor
les
hlt
lea
mov
inc
pop
push
sbb
jnp
imul
stos
aam
in
hlt
sti
test
jecxz
sar
sbb
or
sbb
pop
and
inc
mov
xchg
cld
cmp
jmp
lods
movs
retf
mov
xor
arpl
jnp
imul
xor
stos
aam
pushf
mov
sti
test
int3
cmp
arpl
jnp
adc
xor
les
hlt
sti
std
xchg
xchg
(bad)
push
sbb
imul
xor
les
lea
(bad)
mov
inc
push
push
sbb
add
outs
and
dec
sar
mov
fidiv
cs
pop
jo
add
outs
and
xor
(bad)
shr
cmp
out
mov
inc
push
sub
ja
pop
js
push
(bad)
mov
mov
cmps
fdiv
push
sbb
jbe
push
jns
imul
mov
test
movs
retf
mov
cmp
sbb
add
pop
xor
stos
in
cmc
mov
fidiv
sub
or
adc
and
xor
les
hlt
mov
retf
mov
les
je
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
lds
cmc
cli
test
xchg
fisub
sub
or
push
imul
mov
out
idiv
xchg
xchg
fldenv
sub
fwait
in
ja
test
xchg
pop
daa
dec
aaa
mov
fs
jnp
imul
enter
stos
push
sbb
jo
add
(bad)
rcr
add
adc
mov
das
push
pop
pusha
mov
sti
test
pop
and
mov
loope
icebp
inc
into
mov
inc
cs
push
popa
push
jno
add
pop
and
mov
fs
inc
int
cmp
bound
adc
dec
xor
fs
bnd
imul
stos
push
fwait
in
hlt
jl
ins
adc
movs
retf
mov
ret
sub
mov
cld
sub
pop
and
mov
les
jae
add
movs
retf
xor
fs
repz
adc
lods
ret
mov
adc
sti
test
(bad)
push
sbb
jnp
imul
dec
and
mov
jmp
and
push
sbb
jnp
imul
les
hlt
sti
test
sbb
mov
mov
(bad)
jnp
imul
shl
stos
pop
adc
hlt
sti
test
(bad)
fistp
or
imul
dec
xor
les
pop
adc
hlt
sti
test
pop
(bad)
push
sbb
jnp
imul
dec
xor
dec
daa
aam
in
js
or
push
movs
retf
mov
enter
fs
test
daa
aam
in
js
rcl
fistp
nop
lds
sbb
xchg
jnp
imul
push
pop
fwait
in
hlt
jbe
jmp
fld
retf
mov
inc
cmps
fst
add
cdq
(bad)
test
es
fwait
in
hlt
jne
gs
(bad)
push
sbb
cmc
mov
call
and
jp
test
xchg
fld
inc
cmp
test
imul
jns
mov
imul
or
sub
retf
movs
push
sbb
jmp
sti
test
mov
movs
mov
je
hlt
sti
test
dec
movs
retf
mov
aam
les
or
cli
test
mov
xor
les
hlt
sti
adc
retf
mov
aad
lds
xchg
stc
adc
and
cmps
sub
inc
fwait
in
hlt
imul
retf
mov
(bad)
sub
cdq
je
add
xchg
dec
xor
les
hlt
sti
test
(bad)
stos
sbb
add
pop
and
cmps
sub
inc
or
addr16
aaa
retf
mov
inc
mov
loopne
add
adc
mov
retf
mov
in
mov
sti
test
dec
xor
scas
sar
loopne
nop
inc
mov
in
hlt
sti
adc
dec
xor
scas
sar
loope
add
adc
mov
mov
or
adc
dec
xor
lods
shr
push
sbb
in
add
adc
mov
mov
or
sbb
ins
adc
xor
fdiv
je
pushf
imul
shr
jl
ins
arpl
or
cmp
sub
cmp
je
add
adc
and
lods
and
dec
add
ins
bound
push
mov
(bad)
xchg
je
add
mov
dec
xor
pop
xor
jle
hlt
sti
test
int
movs
retf
mov
fidiv
out
loopne
lock
mov
cld
mov
pusha
test
xchg
fstp
push
das
mov
clc
or
test
pop
js
hlt
sti
test
(bad)
push
sbb
jnp
imul
dec
xor
les
dec
push
jns
hlt
sti
test
or
movs
retf
mov
fldcw
push
sbb
out
imul
aad
mov
in
hlt
gs
xchg
fstp
retf
mov
inc
mov
sbb
jnp
imul
xor
hlt
sbb
inc
movs
retf
mov
(bad)
in
imul
aam
mov
jnp
imul
(bad)
push
sbb
stos
aam
add
adc
test
xor
les
push
pop
and
xor
movs
retf
mov
in
push
sbb
jnp
imul
gs
fwait
in
push
pop
test
xchg
fild
sub
mov
movs
retf
and
xchg
mov
inc
mov
sti
test
(bad)
push
sbb
jnp
imul
jmp
jbe
inc
sub
test
xchg
fild
push
push
sbb
jnp
imul
dec
xor
les
ja
in
hlt
sti
daa
dec
xchg
(bad)
lock
add
adc
sub
mov
in
hlt
sti
and
xchg
(bad)
lock
add
mov
sub
jno
inc
cs
pop
test
xchg
fild
retf
mov
inc
(bad)
icebp
mov
mov
dec
xchg
sbb
in
push
pop
and
jge
retf
mov
loop
repnz
mov
in
xor
les
hlt
pop
test
xchg
fild
retf
mov
inc
mov
or
fadd
adc
sub
sbb
or
cmp
sub
pop
test
xchg
fisttp
mov
inc
adc
(bad)
add
adc
mov
mov
in
hlt
push
test
xchg
fisttp
cmp
int3
mov
mov
mov
in
pop
push
sub
retf
mov
inc
sub
or
ret
mov
sahf
adc
jle
dec
mov
sti
test
(bad)
push
mov
or
imul
loope
mov
in
hlt
push
cs
(bad)
push
sbb
jnp
imul
dec
xor
outs
stos
aam
in
hlt
sti
test
aas
(bad)
push
sbb
or
sar
les
hlt
sti
test
(bad)
push
mov
or
(bad)
adc
and
cwde
pop
les
hlt
sti
test
ja
sbb
inc
sub
or
imul
out
push
imul
pop
push
sub
jbe
retf
mov
inc
xchg
mov
or
imul
out
mov
in
hlt
push
test
xchg
fisttp
retf
mov
inc
test
mov
or
imul
in
mov
in
hlt
sti
sub
xchg
(bad)
cli
sbb
aad
imul
in
mov
in
hlt
push
test
xchg
fisttp
retf
mov
inc
test
or
aam
les
mov
dec
mov
sti
test
movs
retf
mov
hlt
sub
fs
je
das
imul
adc
jnp
pushf
sti
fwait
daa
mov
fist
push
bound
push
cmp
pop
and
adc
cdq
out
(bad)
mov
aad
in
mov
adc
dec
inc
cmp
add
xchg
xchg
fisub
cmps
fcom
push
popa
push
push
cs
cmp
adc
jg
(bad)
out
lods
in
(bad)
into
mov
mov
pshufw
das
push
cmp
aaa
pop
daa
push
jmp
jecxz
xchg
mov
mov
scas
fidivr
xor
outs
sub
or
inc
pop
inc
fimul
push
sahf
test
cmc
cmp
outs
sbb
pop
adc
ja
ja
(bad)
jmp
xchg
sti
loope
icebp
fnclex
scas
sar
daa
dec
adc
adc
push
or
dec
aas
fld
repnz
hlt
mov
jmp
sbb
or
jns
imul
cmp
iret
mov
mov
mov
retf
mov
and
cmp
or
imul
and
aam
in
xchg
mov
mov
xor
add
or
jo
push
sub
mov
mov
sti
fcmovnbe
retf
fstp
sub
imul
push
dec
push
rol
enter
enter
xchg
mov
cmps
ficom
dec
push
jo
or
adc
dec
cs
fisubr
push
xchg
test
push
jb
gs
inc
add
sbb
jne
test
xchg
int
retf
mov
jecxz
repz
adc
dec
push
cmp
push
sbb
inc
lahf
movs
fistp
mov
lahf
aam
retf
mov
imul
push
cmovne
sbb
imul
fist
(bad)
iret
sti
test
xchg
hlt
push
es
jo
adc
pop
pop
outs
push
add
adc
test
in
pushf
in
aam
xchg
stc
mov
pop
jo
adc
sub
sub
add
inc
xlat
test
mov
movs
call
cmc
fwait
xchg
retf
test
inc
cmp
and
xor
inc
push
ja
push
or
test
mov
in
mov
les
out
dec
and
xor
xor
cmp
test
xchg
xlat
fwait
out
dec
es
jo
adc
pop
pop
and
jle
imul
hlt
mov
mov
mov
test
je
adc
push
das
adc
pop
inc
outs
inc
test
retf
loopne
out
ror
push
jle
dec
push
cmp
push
sbb
je
xor
movs
nop
retf
mov
hlt
mov
mov
add
push
push
pusha
pop
push
sbb
enter
iret
mov
test
pop
add
push
push
pusha
pop
push
sbb
push
fild
mov
mov
mov
pop
and
pop
cmp
pop
push
pop
inc
cmp
mov
mov
xchg
lock
test
mov
es
xor
jp
push
ja
inc
or
fist
cwde
aam
movs
test
xor
dec
sbb
ja
inc
daa
jae
cmc
stos
xchg
les
stos
rol
xor
pop
and
jae
ja
pusha
sbb
and
repnz
lds
cwde
mov
aam
retf
pop
aaa
imul
xor
add
dec
or
jmp
cli
(bad)
call
aam
xchg
into
mov
pop
adc
or
and
data16
aas
pop
sti
mov
retf
xchg
xlat
stos
(bad)
jnp
sub
arpl
adc
cmp
fadd
call
retf
ss
pop
or
pop
ja
push
pop
and
test
hlt
mov
fwait
xchg
fcmovne
lods
(bad)
push
inc
pop
xor
push
sbb
push
ins
ds
dec
push
in
into
jmp
movs
call
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
aam
lods
loop
icebp
cmp
ja
mov
mov
outs
push
sub
sbb
sbb
xchg
repz
in
hlt
lods
sar
loope
adc
dec
xor
cs
cmp
(bad)
out
nop
inc
scas
sar
out
adc
dec
xor
sub
inc
or
addr16
retf
test
xchg
sahf
test
push
sub
jl
or
cs
cmp
movs
ret
mov
pop
(bad)
push
inc
dec
cmp
add
jbe
jne
dec
adc
aam
lds
xchg
fucomi
out
sti
mov
and
addr16
ja
outs
cmp
push
retf
mov
mov
test
movs
mov
inc
sub
jns
adc
imul
dec
xor
(bad)
fistp
sti
test
cmc
mov
retf
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
icebp
jmp
(bad)
push
sbb
jnp
imul
dec
xor
les
mov
mov
retf
mov
inc
sub
cmp
imul
sbb
or
sar
loopne
adc
dec
xor
das
push
aas
inc
emms
pop
pusha
in
nop
inc
lods
sar
out
pop
js
je
pop
push
jnp
imul
dec
xor
stos
stos
aam
xchg
mov
mov
fs
je
or
push
sbb
dec
dec
pop
leave
in
mov
xchg
test
icebp
mov
and
fs
sbb
jne
push
xor
stos
ret
xchg
clc
xchg
lahf
call
scas
ror
pop
and
sbb
jno
push
ds
fisubr
mov
sti
icebp
cdq
aam
movs
stos
xlat
push
inc
sub
ja
sbb
jbe
jge
dec
cmp
stos
fnstcw
sti
loope
mov
frstor
jl
bound
adc
pop
and
aam
int3
sti
out
xchg
hlt
mul
mov
sub
push
sbb
adc
inc
cmp
adc
lods
mov
out
nop
std
xchg
call
(bad)
dec
xor
es
outs
push
sbb
jno
and
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
add
push
imul
mov
fwait
cmp
neg
test
cmp
jnp
imul
dec
xor
les
hlt
sti
test
mov
inc
sub
or
or
and
xor
xchg
std
or
fisub
mov
popf
loope
adc
dec
xor
das
push
aas
inc
pshufw
out
nop
inc
test
mov
loop
pop
js
dec
aaa
pop
daa
sub
jno
popa
out
xchg
inc
scas
sar
loop
adc
dec
xor
cs
aas
inc
push
jb
addr16
mov
mov
mov
cwde
out
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
gs
iret
mov
out
fimul
shr
jp
xor
adc
jo
and
pop
enter
fwait
nop
out
xchg
call
aad
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
bound
pop
and
xor
les
hlt
sti
test
ror
sub
or
or
and
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
outs
and
jno
popa
out
xchg
inc
scas
sar
loopne
adc
dec
xor
das
push
aas
inc
or
nop
inc
test
mov
(bad)
dec
ss
and
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
es
push
push
add
adc
and
push
call
mov
xchg
mov
mov
stos
retf
mov
xor
outs
je
push
adc
inc
dec
xor
movs
stos
aam
lea
clc
(bad)
push
sbb
or
imul
dec
push
mov
in
hlt
lea
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
icebp
mov
inc
sub
or
pop
and
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
sti
mov
retf
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
mov
mov
mov
retf
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
inc
adc
and
mov
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
nop
sti
test
aad
inc
sub
or
imul
cmp
les
hlt
sti
test
xchg
fcmovnbe
mov
push
sbb
jnp
imul
dec
xor
les
lea
movs
retf
mov
inc
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
fisub
sub
or
add
adc
mov
in
idiv
test
xchg
(bad)
sub
fs
jnp
imul
dec
ss
in
hlt
cli
test
xchg
(bad)
push
adc
jnp
imul
dec
xor
les
hlt
sti
test
xchg
and
retf
mov
inc
sub
or
imul
mov
mov
in
hlt
sti
test
imul
retf
mov
inc
sub
or
imul
and
mov
in
hlt
sti
test
(bad)
push
sbb
test
adc
and
xor
les
hlt
sti
test
imul
retf
mov
inc
sub
pcmpeqb
imul
dec
xor
les
hlt
stc
test
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
xchg
xchg
(bad)
push
sbb
jnp
imul
mov
mov
in
hlt
sti
test
xchg
(bad)
sub
or
imul
and
xor
les
hlt
sti
mov
xchg
(bad)
push
sbb
jnp
imul
dec
retf
mov
in
hlt
sti
xchg
jmp
(bad)
sub
or
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
jp
mov
cmp
or
xor
push
(bad)
lods
enter
stc
xor
scas
adc
and
or
push
push
inc
pop
das
ins
cmp
(bad)
les
sti
loope
in
mov
xor
ret
je
ja
jns
and
inc
aam
les
cld
and
dec
add
push
and
push
sub
jnp
xchg
lods
mov
jmp
popf
loopne
jle
rcl
jg
jge
or
jo
jno
push
jp
retf
enter
mov
xchg
mov
xchg
scas
lds
push
ds
bound
or
sbb
movs
retf
test
test
and
cmp
dec
adc
jns
xor
cmp
ret
hlt
nop
in
popf
cmc
into
stos
pushf
mov
movs
(bad)
jp
pop
push
adc
push
adc
and
push
shl
mov
mov
jmp
xor
inc
push
adc
jp
push
add
mov
loopne
in
ror
pop
cmp
sbb
das
dec
imul
retf
out
xchg
sahf
mov
mov
and
or
dec
gs
sub
push
xor
in
xchg
mov
(bad)
mov
movs
mov
sbb
jns
xor
es
movs
ret
xchg
xor
(bad)
(bad)
mov
shl
push
dec
cs
fnsave
push
mov
sti
je
fs
mov
movs
stos
es
js
inc
imul
(bad)
test
mov
sti
test
mov
jp
hlt
call
xor
dec
sub
mov
xchg
adc
retf
aam
push
pop
ds
mov
call
push
cmp
jnp
jmp
sti
test
sub
out
push
scas
xlat
dec
sub
push
je
cli
repnz
out
sbb
imul
jmp
movs
stos
or
sbb
adc
add
xchg
in
inc
push
cmp
sti
shl
adc
lds
jg
cmps
dec
cmp
jae
sbb
fild
pop
aam
les
cmp
xchg
clc
fnstenv
dec
sub
mov
imul
hlt
imul
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
les
hlt
sti
test
xchg
(bad)
push
sbb
jnp
imul
dec
xor
int3
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
jmp
jmp
int3
int3
int3
int3
mov
push
test
je
mov
xor
mov
test
je
mov
inc
xor
je
dec
je
test
jne
sub
jb
push
mov
shl
add
mov
shl
add
jmp
pop
add
je
mov
inc
xor
je
dec
jne
pop
ret
sub
jb
mov
xor
mov
add
xor
xor
add
and
je
mov
xor
je
xor
je
shr
xor
je
xor
je
jmp
pop
lea
pop
ret
lea
pop
pop
ret
lea
pop
pop
ret
lea
pop
pop
ret
call
call
mov
call
fnclex
ret
ret
mov
mov
mov
mov
mov
mov
mov
ret
push
mov
push
or
mov
test
je
or
jmp
test
je
push
call
push
mov
call
push
call
add
test
jge
or
jmp
mov
test
je
push
call
and
pop
mov
and
pop
pop
ret
push
mov
push
push
push
push
mov
imul
mov
mov
test
mov
mov
jne
xor
jmp
mov
test
je
mov
mov
jmp
mov
jmp
mov
test
je
mov
test
je
cmp
mov
jb
mov
push
push
push
call
sub
sub
add
add
add
mov
jmp
cmp
jb
cmp
mov
je
xor
div
mov
sub
push
push
push
call
add
test
je
cmp
je
sub
add
jmp
push
call
cmp
pop
je
mov
mov
inc
dec
mov
cmp
jne
mov
pop
pop
pop
leave
ret
or
jmp
or
mov
xor
sub
div
jmp
call
test
jne
ret
push
push
push
push
call
add
ret
push
push
push
call
add
ret
push
call
pop
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
push
mov
push
mov
sub
push
push
push
mov
call
xor
mov
mov
mov
and
mov
shl
add
mov
shr
mov
xor
push
call
pop
test
jne
push
call
pop
mov
call
call
mov
call
mov
call
call
call
mov
lea
push
call
call
mov
test
je
movzx
jmp
push
pop
push
push
push
push
call
push
call
mov
push
call
mov
mov
mov
mov
push
push
call
pop
pop
ret
mov
push
call
cmp
jne
call
push
call
push
call
pop
pop
ret
cmp
jne
call
push
call
pop
push
call
ret
push
push
call
pop
pop
ret
push
mov
sub
fld
fstp
fld
fstp
fld
fdiv
fmul
fsubr
fstp
fld
fcomp
fnstsw
sahf
jbe
push
pop
leave
ret
xor
leave
ret
push
call
test
je
push
push
call
test
je
push
call
ret
jmp
push
mov
movsx
push
call
cmp
pop
je
inc
cmp
jle
movsx
push
push
call
pop
pop
jmp
movsx
mov
mov
and
test
jne
mov
mov
mov
inc
mov
mov
mov
mov
inc
test
jne
pop
ret
mov
mov
mov
test
je
cmp
je
mov
inc
test
jne
mov
inc
test
je
mov
test
je
cmp
je
cmp
je
inc
jmp
mov
dec
cmp
je
cmp
jne
dec
mov
inc
inc
test
mov
jne
ret
mov
fld
fcomp
fnstsw
sahf
jb
push
pop
ret
xor
ret
push
mov
push
push
cmp
push
je
lea
push
call
mov
pop
pop
mov
mov
mov
mov
leave
ret
lea
push
call
mov
pop
pop
mov
mov
leave
ret
push
mov
cmp
push
push
je
mov
mov
xor
mov
test
setg
push
xor
cmp
sete
add
push
call
pop
pop
jmp
mov
push
push
fld
fstp
call
mov
mov
push
mov
lea
push
xor
cmp
sete
xor
test
setg
add
add
push
call
add
cmp
mov
jne
mov
inc
test
jle
mov
push
lea
mov
mov
mov
pop
mov
xor
push
cmp
sete
add
add
push
call
cmp
pop
pop
mov
je
mov
mov
inc
cmp
je
mov
dec
jns
neg
mov
inc
cmp
jl
mov
push
cdq
pop
idiv
add
mov
cdq
idiv
mov
inc
cmp
jl
mov
push
cdq
pop
idiv
add
mov
cdq
idiv
mov
add
mov
pop
pop
pop
ret
cmp
push
push
mov
push
push
je
mov
mov
mov
cmp
jne
xor
cmp
sete
add
add
mov
mov
and
jmp
mov
push
push
fld
fstp
call
mov
mov
push
mov
add
push
xor
cmp
sete
add
push
call
add
cmp
mov
jne
mov
lea
mov
test
jg
push
push
call
pop
mov
pop
inc
jmp
add
test
jle
push
push
call
mov
pop
mov
mov
inc
pop
test
jge
cmp
je
neg
jmp
neg
cmp
jl
mov
push
push
call
push
push
push
call
add
pop
mov
pop
pop
pop
ret
push
mov
push
push
push
mov
push
push
fld
fstp
call
mov
mov
dec
mov
mov
xor
cmp
push
push
sete
add
mov
push
call
mov
add
mov
dec
cmp
setl
mov
mov
dec
cmp
mov
jl
cmp
jge
test
je
mov
inc
test
jne
and
push
push
push
call
add
jmp
push
push
push
push
call
add
pop
pop
pop
pop
ret
push
mov
push
push
push
call
and
add
ret
push
mov
push
push
call
and
add
ret
push
mov
cmp
je
cmp
je
cmp
jne
push
push
push
call
add
pop
ret
push
push
push
push
call
jmp
push
push
push
push
call
add
pop
ret
push
mov
test
je
push
mov
push
call
inc
push
push
add
push
call
add
pop
pop
ret
push
mov
push
push
mov
test
je
mov
cmp
jne
push
call
pop
test
push
je
push
call
pop
pop
jmp
cmp
jne
lea
push
lea
push
push
call
add
test
je
push
push
push
call
add
jmp
push
push
push
call
pop
leave
ret
push
push
push
push
mov
cmp
jae
mov
mov
sar
and
lea
shl
mov
test
je
push
call
cmp
pop
je
cmp
je
cmp
jne
push
call
push
mov
call
pop
cmp
pop
je
push
call
pop
push
call
test
jne
call
mov
jmp
xor
push
call
mov
pop
and
test
je
push
call
pop
jmp
xor
jmp
and
mov
or
pop
pop
pop
pop
ret
push
mov
mov
test
je
test
je
push
call
and
xor
pop
mov
mov
mov
pop
ret
push
mov
test
jne
push
call
pop
pop
ret
push
call
test
pop
je
or
pop
ret
test
je
push
call
neg
pop
pop
sbb
ret
xor
pop
ret
push
push
mov
xor
push
mov
mov
and
cmp
jne
test
je
mov
mov
sub
test
jle
push
push
push
call
add
cmp
jne
mov
test
je
and
mov
jmp
or
or
mov
and
mov
pop
mov
pop
pop
ret
push
call
pop
ret
push
push
push
xor
xor
xor
cmp
jle
mov
mov
test
je
mov
test
je
cmp
jne
push
call
cmp
pop
je
inc
jmp
cmp
jne
test
je
push
call
cmp
pop
jne
or
inc
cmp
jl
cmp
mov
je
mov
pop
pop
pop
ret
push
mov
mov
test
je
test
jne
test
je
or
mov
jmp
or
test
mov
jne
push
call
pop
jmp
mov
mov
push
push
push
call
add
mov
test
je
cmp
je
mov
test
jne
mov
push
cmp
je
mov
sar
and
mov
lea
jmp
mov
mov
pop
and
cmp
jne
or
mov
cmp
jne
mov
test
je
test
jne
mov
mov
dec
mov
movzx
inc
mov
pop
ret
neg
sbb
and
add
or
and
or
pop
ret
push
mov
sub
push
push
mov
push
cmp
jae
mov
and
sar
shl
lea
mov
add
mov
test
je
and
mov
cmp
mov
je
test
jne
test
je
mov
cmp
je
dec
mov
mov
lea
mov
mov
lea
push
push
mov
push
push
push
call
test
jne
call
push
pop
cmp
jne
mov
mov
jmp
cmp
jne
xor
jmp
push
call
pop
jmp
mov
mov
add
lea
mov
test
je
test
je
cmp
jne
or
jmp
and
mov
mov
mov
mov
add
cmp
mov
jae
mov
mov
cmp
je
cmp
je
mov
inc
inc
jmp
dec
cmp
jae
mov
inc
cmp
jne
add
jmp
mov
inc
mov
jmp
lea
push
push
inc
lea
push
push
mov
push
call
test
jne
call
test
jne
cmp
je
mov
test
je
mov
cmp
je
mov
mov
inc
mov
jmp
cmp
jne
cmp
jne
mov
jmp
push
push
push
call
add
cmp
je
mov
inc
mov
cmp
jb
jmp
mov
lea
mov
test
jne
or
mov
sub
mov
mov
jmp
and
mov
or
pop
pop
pop
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
mov
mov
mov
mov
mov
add
cmp
jbe
cmp
jb
test
jne
shr
and
cmp
jb
rep
jmp
mov
mov
sub
jb
and
add
jmp
jmp
nop
jmp
nop
jo
inc
add
inc
add
ror
inc
add
add
jmp
add
add
cmp
jb
rep
jmp
lea
and
mov
mov
mov
shr
mov
add
add
cmp
jb
rep
jmp
nop
and
mov
mov
inc
shr
inc
cmp
jb
rep
jmp
lea
aas
out
inc
add
inc
add
inc
add
inc
add
inc
add
inc
add
inc
add
out
inc
add
inc
(bad)
in
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
pop
out
inc
add
inc
add
add
inc
or
leave
ret
nop
mov
mov
mov
pop
pop
leave
ret
nop
mov
mov
mov
mov
mov
pop
pop
leave
ret
lea
mov
mov
mov
mov
mov
mov
mov
pop
pop
leave
ret
nop
lea
lea
test
jne
shr
and
cmp
jb
std
rep
cld
jmp
mov
neg
jmp
lea
mov
mov
cmp
jb
and
sub
jmp
jmp
nop
clc
out
inc
add
lock
add
inc
add
mov
dec
shr
dec
cmp
jb
std
rep
cld
jmp
lea
mov
and
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
nop
mov
and
mov
mov
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
lea
xchg
lock
add
inc
add
inc
add
inc
add
lock
add
inc
(bad)
sbb
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
lock
add
lock
add
icebp
inc
add
inc
add
leave
ret
nop
mov
mov
mov
pop
pop
leave
ret
lea
mov
mov
mov
mov
mov
pop
pop
leave
ret
nop
mov
mov
mov
mov
mov
mov
mov
pop
pop
leave
ret
push
mov
push
push
push
push
mov
push
mov
xor
mov
mov
mov
cmp
je
cmp
je
cmp
jne
mov
jmp
xor
or
jmp
mov
or
push
pop
mov
inc
cmp
je
cmp
je
movsx
cmp
jg
je
sub
je
sub
je
sub
je
dec
jne
cmp
jne
mov
or
jmp
cmp
jne
mov
or
jmp
test
jne
or
jmp
test
jne
and
and
or
or
jmp
mov
test
jne
or
jmp
sub
je
dec
je
sub
je
sub
jne
test
jne
or
jmp
cmp
jne
mov
and
jmp
cmp
jne
mov
or
jmp
test
je
xor
jmp
or
jmp
push
push
push
push
call
mov
add
cmp
jge
xor
jmp
mov
inc
mov
mov
mov
mov
mov
mov
pop
pop
pop
leave
ret
mov
push
push
push
xor
xor
xor
cmp
push
jle
mov
mov
mov
cmp
je
test
je
inc
add
cmp
jl
jmp
mov
jmp
mov
push
shl
call
pop
mov
mov
mov
mov
cmp
je
mov
cmp
je
or
mov
mov
mov
mov
mov
mov
pop
pop
pop
pop
ret
mov
test
je
call
push
push
call
push
push
call
add
ret
push
push
push
call
add
ret
push
push
push
call
add
ret
push
push
pop
cmp
jne
push
call
push
call
cmp
push
mov
mov
mov
jne
mov
test
je
mov
push
lea
cmp
jb
mov
test
je
call
sub
cmp
jae
pop
push
push
call
pop
pop
push
push
call
pop
pop
test
pop
jne
push
mov
call
pop
ret
push
mov
cmp
jae
mov
test
je
call
add
jmp
pop
ret
push
mov
push
push
call
test
pop
je
mov
test
je
cmp
jne
and
push
pop
jmp
cmp
je
mov
mov
mov
mov
mov
cmp
jne
mov
mov
add
push
cmp
jge
lea
sub
lea
and
add
dec
jne
mov
mov
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
push
push
call
pop
mov
pop
pop
jmp
and
push
call
pop
mov
mov
or
jmp
push
call
pop
pop
ret
mov
mov
cmp
push
mov
je
lea
lea
add
cmp
jae
cmp
jne
lea
pop
lea
cmp
jae
cmp
je
xor
ret
cmp
jne
call
push
mov
mov
cmp
jne
mov
inc
cmp
je
test
je
movzx
push
call
test
pop
je
inc
jmp
cmp
jne
inc
jmp
cmp
jbe
inc
cmp
ja
mov
test
je
cmp
jbe
mov
pop
ret
push
xor
cmp
push
push
jne
call
mov
xor
mov
cmp
je
cmp
je
inc
push
call
pop
lea
jmp
lea
push
call
mov
pop
cmp
mov
jne
push
call
pop
mov
cmp
je
push
push
call
mov
pop
inc
cmp
je
push
call
cmp
pop
mov
jne
push
call
pop
push
push
call
pop
add
pop
add
cmp
jne
pop
push
call
pop
mov
mov
pop
pop
mov
pop
ret
push
mov
push
push
push
xor
cmp
push
push
jne
call
mov
push
push
push
call
mov
mov
mov
cmp
je
mov
lea
push
lea
push
push
push
push
call
mov
mov
lea
push
call
mov
add
cmp
jne
push
call
pop
lea
push
lea
push
mov
lea
push
push
push
call
mov
add
dec
mov
pop
pop
mov
pop
leave
ret
push
mov
mov
mov
push
push
and
mov
push
mov
mov
mov
test
je
mov
add
mov
cmp
jne
mov
inc
cmp
je
test
je
movzx
test
je
inc
test
je
mov
mov
inc
inc
inc
test
je
mov
mov
inc
jmp
inc
test
je
and
inc
cmp
jne
inc
jmp
inc
test
je
mov
mov
inc
mov
inc
movzx
test
je
inc
test
je
mov
mov
inc
inc
cmp
je
test
je
cmp
jne
test
jne
dec
jmp
test
je
and
and
cmp
je
mov
cmp
je
cmp
jne
inc
jmp
cmp
je
test
je
mov
add
mov
mov
inc
mov
xor
cmp
jne
inc
inc
jmp
cmp
jne
test
jne
xor
cmp
je
cmp
lea
jne
mov
jmp
mov
mov
xor
cmp
sete
mov
shr
mov
dec
test
je
inc
test
je
mov
inc
inc
dec
jne
mov
test
je
cmp
jne
cmp
je
cmp
je
cmp
je
test
je
movzx
test
je
mov
inc
inc
inc
mov
mov
inc
jmp
movzx
test
je
inc
inc
inc
inc
jmp
test
je
and
inc
inc
jmp
test
je
and
mov
pop
pop
pop
inc
pop
ret
push
push
mov
push
push
mov
push
push
xor
xor
xor
cmp
jne
call
mov
cmp
je
mov
jmp
call
mov
cmp
je
mov
jmp
cmp
jne
cmp
jne
call
mov
cmp
je
cmp
mov
je
inc
inc
cmp
jne
inc
inc
cmp
jne
sub
mov
sar
push
push
inc
push
push
push
push
push
push
mov
call
mov
cmp
je
push
call
cmp
pop
mov
je
push
push
push
push
push
push
push
push
call
test
jne
push
call
pop
mov
mov
push
call
mov
jmp
cmp
jne
cmp
jne
call
mov
cmp
je
cmp
mov
je
inc
cmp
jne
inc
cmp
jne
sub
inc
mov
push
call
mov
pop
cmp
jne
xor
jmp
push
push
push
call
add
push
call
mov
jmp
xor
pop
pop
pop
pop
pop
pop
ret
sub
push
push
push
push
push
call
mov
pop
test
jne
push
call
pop
mov
mov
lea
cmp
jae
and
or
mov
mov
add
add
jmp
lea
push
call
cmp
je
mov
test
je
mov
lea
mov
cmp
lea
jl
mov
cmp
jge
mov
push
call
test
pop
je
add
mov
lea
cmp
jae
and
or
mov
mov
add
add
jmp
add
cmp
jl
jmp
mov
xor
test
jle
mov
cmp
je
mov
test
je
test
jne
push
call
test
je
mov
mov
sar
and
mov
lea
mov
mov
mov
mov
inc
inc
add
cmp
jl
xor
mov
cmp
lea
jne
test
mov
jne
push
pop
jmp
mov
dec
neg
sbb
add
push
call
mov
cmp
je
push
call
test
je
and
mov
cmp
jne
or
jmp
cmp
jne
or
jmp
or
inc
cmp
jl
push
call
pop
pop
pop
pop
add
ret
push
mov
push
and
call
cmp
jne
mov
test
je
add
mov
mov
mov
mov
pop
ret
push
mov
mov
call
lea
push
push
mov
call
test
je
cmp
jne
cmp
jb
push
pop
jmp
lea
push
push
push
call
test
je
xor
lea
cmp
je
mov
cmp
jl
cmp
jg
sub
mov
inc
cmp
jne
lea
push
push
push
call
add
test
jne
lea
jmp
lea
push
push
push
call
cmp
lea
je
mov
cmp
jl
cmp
jg
sub
mov
inc
cmp
jne
lea
push
lea
push
call
pop
pop
cmp
je
push
push
call
pop
cmp
pop
je
inc
mov
cmp
je
cmp
jne
mov
jmp
inc
cmp
jne
push
push
push
call
add
cmp
je
cmp
je
cmp
je
lea
push
call
cmp
pop
sbb
add
pop
leave
ret
xor
push
cmp
push
sete
push
call
test
mov
je
call
cmp
mov
jne
push
call
pop
jmp
cmp
jne
call
test
jne
push
call
xor
ret
push
pop
ret
push
mov
push
push
push
push
push
push
push
push
call
pop
pop
pop
pop
mov
pop
ret
mov
test
mov
je
mov
mov
mov
mov
ret
push
push
push
mov
push
push
push
push
mov
mov
mov
mov
cmp
je
cmp
je
lea
mov
mov
mov
cmp
jne
push
mov
call
call
jmp
pop
add
pop
pop
pop
ret
xor
mov
cmp
jne
mov
mov
cmp
jne
mov
ret
push
push
mov
jmp
push
push
mov
mov
mov
mov
mov
pop
pop
ret
int3
int3
push
inc
xor
pop
inc
xor
push
mov
sub
push
push
push
push
cld
mov
mov
test
jne
mov
mov
mov
lea
mov
mov
mov
cmp
je
lea
cmp
je
push
push
lea
call
pop
pop
mov
or
je
js
mov
push
call
add
lea
push
push
call
add
lea
push
mov
call
mov
mov
call
mov
lea
mov
jmp
mov
jmp
mov
jmp
push
lea
push
push
call
add
pop
mov
pop
pop
pop
pop
mov
pop
ret
push
mov
mov
mov
push
mov
push
call
add
pop
ret
mov
cmp
je
test
jne
cmp
jne
push
call
mov
pop
test
je
call
push
call
pop
ret
push
mov
sub
mov
xor
mov
cmp
je
add
inc
cmp
jb
push
mov
shl
cmp
jne
mov
cmp
je
test
jne
cmp
je
cmp
je
lea
push
push
push
call
test
jne
lea
push
push
call
pop
pop
lea
push
push
lea
call
inc
pop
cmp
jbe
lea
push
call
mov
lea
sub
push
add
push
push
call
add
lea
push
push
call
lea
push
push
call
lea
push
push
call
push
lea
push
call
push
lea
push
push
call
add
pop
jmp
lea
lea
push
push
push
call
pop
push
push
push
call
push
call
pop
leave
ret
push
mov
push
push
fstcw
push
call
mov
mov
not
and
mov
and
or
push
call
pop
mov
pop
fldcw
mov
pop
leave
ret
mov
and
push
push
call
pop
pop
ret
push
mov
xor
push
test
push
je
push
pop
test
je
or
test
je
or
test
je
or
test
je
or
test
je
or
movzx
push
mov
mov
mov
and
mov
je
cmp
je
cmp
je
cmp
jne
or
jmp
or
jmp
or
and
pop
je
cmp
jne
or
jmp
or
pop
pop
test
pop
je
or
ret
push
mov
xor
push
test
je
push
pop
test
je
or
test
je
or
test
je
or
test
je
or
test
je
or
mov
mov
and
mov
je
cmp
je
cmp
je
cmp
jne
or
jmp
or
jmp
or
mov
and
je
cmp
jne
or
jmp
or
pop
test
pop
je
or
ret
push
mov
push
mov
lea
cmp
ja
mov
movzx
jmp
mov
push
mov
sar
movzx
test
pop
je
and
mov
mov
push
jmp
and
mov
push
pop
lea
push
push
push
push
push
lea
push
push
call
add
test
jne
leave
ret
movzx
and
leave
ret
push
mov
push
cmp
push
push
push
jne
mov
cmp
jl
cmp
jg
add
jmp
mov
mov
push
cmp
pop
jge
cmp
jle
push
push
call
pop
pop
jmp
mov
mov
and
test
jne
mov
jmp
mov
mov
sar
movzx
test
je
and
push
mov
mov
pop
jmp
and
mov
mov
push
push
lea
push
push
push
lea
push
push
push
call
add
test
je
cmp
jne
movzx
jmp
movzx
movzx
shl
or
pop
pop
pop
leave
ret
mov
push
push
cdq
pop
idiv
push
mov
mov
cdq
idiv
pop
mov
sub
or
shl
not
test
jne
inc
cmp
jge
lea
cmp
jne
inc
add
cmp
jl
push
pop
pop
ret
xor
pop
ret
mov
push
push
push
push
mov
cdq
pop
idiv
mov
mov
cdq
idiv
lea
push
push
pop
push
pop
sub
shl
push
push
call
add
dec
js
lea
test
je
push
push
push
call
add
dec
sub
test
jge
pop
pop
pop
ret
push
mov
push
push
mov
push
push
push
lea
push
pop
and
lea
push
mov
pop
cdq
idiv
push
mov
mov
cdq
idiv
mov
pop
push
mov
lea
mov
sub
pop
mov
shl
test
je
inc
push
push
call
pop
test
pop
jne
push
push
call
pop
mov
pop
mov
or
mov
shl
push
pop
and
mov
inc
cmp
jge
mov
sub
lea
xor
rep
mov
pop
pop
pop
leave
ret
mov
mov
push
push
sub
pop
mov
mov
add
dec
jne
pop
ret
push
mov
xor
stos
stos
stos
pop
ret
mov
xor
cmp
jne
inc
add
cmp
jl
push
pop
ret
xor
ret
push
mov
sub
mov
push
push
push
push
mov
pop
or
cdq
mov
mov
idiv
mov
mov
cdq
idiv
and
mov
shl
sub
not
mov
mov
and
mov
mov
shr
or
mov
mov
mov
add
shl
dec
mov
jne
mov
push
pop
mov
push
pop
shl
cmp
jl
mov
mov
sub
mov
mov
jmp
mov
and
dec
sub
jns
pop
pop
pop
leave
ret
push
mov
sub
mov
push
push
push
movzx
mov
and
mov
mov
mov
mov
movzx
mov
and
sub
mov
shl
cmp
mov
jne
lea
xor
push
call
test
pop
jne
lea
push
call
pop
push
pop
jmp
lea
push
lea
push
call
push
lea
push
call
add
test
je
inc
mov
mov
sub
cmp
jge
lea
push
call
pop
jmp
cmp
jg
sub
mov
lea
push
lea
push
call
lea
push
push
call
push
lea
push
call
mov
inc
push
lea
push
call
add
xor
jmp
cmp
jl
lea
push
call
push
or
lea
push
call
mov
add
add
push
jmp
push
mov
and
lea
push
add
call
pop
pop
xor
push
pop
sub
mov
shl
mov
neg
sbb
and
or
or
cmp
jne
mov
mov
mov
mov
jmp
cmp
jne
mov
mov
pop
pop
pop
leave
ret
push
push
push
call
add
ret
push
push
push
call
add
ret
push
mov
sub
xor
push
push
push
push
push
lea
push
lea
push
call
push
lea
push
call
add
leave
ret
push
mov
sub
xor
push
push
push
push
push
lea
push
lea
push
call
push
lea
push
call
add
leave
ret
int3
int3
push
mov
jmp
lea
mov
mov
push
test
je
mov
inc
test
je
test
jne
mov
mov
add
xor
xor
add
test
je
mov
test
je
test
je
test
je
test
je
jmp
lea
jmp
lea
jmp
lea
jmp
lea
mov
test
je
mov
inc
test
je
mov
inc
test
jne
jmp
mov
add
mov
mov
add
xor
xor
mov
add
test
je
test
je
test
je
test
je
test
je
jmp
mov
mov
pop
ret
mov
mov
mov
pop
ret
mov
mov
pop
ret
mov
mov
pop
ret
push
mov
mov
push
mov
push
mov
mov
push
lea
mov
test
mov
jle
mov
xor
mov
test
je
movsx
inc
jmp
push
pop
mov
inc
dec
jne
mov
and
test
jl
cmp
jl
dec
cmp
jne
mov
jmp
inc
cmp
jne
inc
jmp
push
call
inc
push
push
push
call
add
pop
pop
pop
pop
ret
push
mov
sub
push
lea
push
push
lea
push
call
pop
lea
pop
push
push
push
sub
mov
movs
movs
movs
call
mov
add
movsx
mov
pop
movsx
mov
mov
mov
pop
leave
ret
push
mov
push
mov
push
push
push
mov
mov
mov
and
shr
and
mov
mov
mov
movzx
mov
and
test
mov
je
cmp
je
lea
jmp
mov
jmp
xor
cmp
jne
cmp
jne
mov
mov
mov
mov
jmp
lea
mov
mov
shr
shl
or
mov
or
shl
mov
mov
test
jne
mov
add
mov
shr
or
lea
mov
mov
add
mov
jmp
mov
or
mov
pop
pop
pop
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
mov
test
je
xor
mov
push
mov
cmp
jb
neg
and
je
sub
mov
inc
dec
jne
mov
shl
add
mov
shl
add
mov
and
shr
je
rep
test
je
mov
inc
dec
jne
mov
pop
ret
mov
ret
int3
int3
int3
int3
int3
int3
int3
int3
push
mov
push
push
mov
mov
mov
mov
mov
add
cmp
jbe
cmp
jb
test
jne
shr
and
cmp
jb
rep
jmp
mov
mov
sub
jb
and
add
jmp
jmp
nop
jmp
nop
add
inc
add
inc
add
inc
add
ror
inc
add
add
jmp
add
add
cmp
jb
rep
jmp
lea
and
mov
mov
mov
shr
mov
add
add
cmp
jb
rep
jmp
nop
and
mov
mov
inc
shr
inc
cmp
jb
rep
jmp
lea
iret
or
or
or
or
or
or
or
or
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
call
or
or
or
add
leave
ret
nop
mov
mov
mov
pop
pop
leave
ret
nop
mov
mov
mov
mov
mov
pop
pop
leave
ret
lea
mov
mov
mov
mov
mov
mov
mov
pop
pop
leave
ret
nop
lea
lea
test
jne
shr
and
cmp
jb
std
rep
cld
jmp
mov
neg
jmp
lea
mov
mov
cmp
jb
and
sub
jmp
jmp
nop
mov
add
or
add
mov
dec
shr
dec
cmp
jb
std
rep
cld
jmp
lea
mov
and
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
nop
mov
and
mov
mov
mov
mov
shr
mov
sub
sub
cmp
jb
std
rep
cld
jmp
lea
and
inc
add
inc
add
inc
add
add
add
inc
add
inc
(bad)
sbb
inc
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
lea
add
add
jmp
mov
or
add
or
or
leave
ret
nop
mov
mov
mov
pop
pop
leave
ret
lea
mov
mov
mov
mov
mov
pop
pop
leave
ret
nop
mov
mov
mov
mov
mov
mov
mov
pop
pop
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
int3
mov
test
je
mov
inc
test
je
test
jne
add
mov
mov
add
xor
xor
add
test
je
mov
test
je
test
je
test
je
test
je
jmp
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
lea
mov
sub
ret
push
call
pop
ret
push
push
push
call
test
mov
jne
ret
mov
and
and
push
mov
mov
mov
pop
ret
mov
lea
mov
lea
cmp
jae
mov
sub
cmp
jb
add
jmp
xor
ret
push
mov
sub
mov
push
push
mov
mov
push
mov
add
sub
shr
mov
imul
lea
mov
mov
dec
test
mov
jne
mov
lea
mov
mov
mov
mov
test
mov
jne
sar
dec
cmp
jbe
push
pop
mov
cmp
jne
cmp
jae
mov
mov
shr
lea
not
and
dec
jne
mov
and
jmp
lea
mov
shr
lea
not
and
dec
jne
mov
and
mov
mov
jmp
mov
mov
mov
add
mov
mov
mov
mov
mov
mov
mov
sar
dec
cmp
jbe
push
pop
mov
and
mov
jne
sub
mov
sar
push
mov
dec
pop
cmp
jbe
mov
add
mov
mov
sar
dec
cmp
jbe
mov
cmp
je
mov
mov
cmp
jne
cmp
jae
mov
mov
shr
not
and
dec
jne
mov
and
jmp
lea
mov
shr
not
and
dec
jne
mov
and
mov
mov
mov
mov
mov
mov
mov
mov
mov
jmp
mov
cmp
jne
cmp
je
mov
mov
lea
mov
mov
mov
mov
mov
mov
cmp
jne
mov
cmp
mov
inc
mov
jae
cmp
jne
mov
mov
shr
mov
or
mov
mov
shr
lea
or
jmp
cmp
jne
lea
mov
shr
mov
or
lea
mov
shr
lea
or
mov
mov
mov
mov
dec
jne
mov
test
je
mov
mov
shl
add
mov
push
push
push
call
mov
mov
mov
shr
or
mov
mov
mov
and
mov
mov
dec
mov
mov
cmp
jne
and
mov
cmp
jne
push
push
push
call
mov
push
push
push
call
mov
mov
lea
shl
mov
mov
sub
lea
push
lea
push
push
call
mov
add
dec
cmp
jbe
sub
mov
mov
mov
mov
mov
pop
pop
pop
leave
ret
push
mov
sub
mov
mov
push
push
lea
push
lea
mov
mov
lea
and
mov
sar
dec
cmp
jge
or
shr
or
mov
jmp
add
or
xor
shr
mov
mov
mov
mov
cmp
mov
jae
mov
mov
and
and
or
jne
add
cmp
mov
jb
cmp
jne
mov
cmp
mov
jae
mov
mov
and
and
or
jne
add
jmp
cmp
jne
cmp
jae
cmp
jne
add
mov
jmp
cmp
jne
mov
cmp
mov
jae
cmp
jne
add
jmp
cmp
jne
call
mov
test
mov
je
push
call
pop
mov
mov
mov
cmp
jne
xor
jmp
mov
mov
mov
cmp
mov
je
mov
mov
and
and
or
jne
mov
mov
and
and
and
lea
or
mov
jne
mov
inc
and
add
mov
and
or
je
mov
mov
xor
imul
lea
mov
mov
and
jne
mov
push
and
pop
test
jl
shl
inc
jmp
mov
mov
mov
sub
mov
mov
sar
dec
cmp
jle
push
pop
cmp
je
mov
cmp
jne
cmp
jge
mov
mov
shr
mov
lea
not
mov
and
mov
dec
jne
mov
mov
and
jmp
lea
mov
shr
mov
lea
lea
not
and
dec
mov
jne
mov
mov
and
jmp
mov
mov
mov
cmp
mov
mov
mov
mov
je
mov
mov
lea
mov
mov
mov
mov
mov
mov
cmp
jne
mov
cmp
mov
jge
inc
cmp
mov
jne
mov
mov
shr
or
mov
mov
shr
mov
or
jmp
inc
cmp
mov
jne
lea
mov
shr
or
mov
lea
lea
mov
shr
or
mov
test
je
mov
mov
jmp
mov
mov
add
lea
mov
mov
mov
mov
test
lea
mov
jne
cmp
jne
mov
cmp
jne
and
mov
mov
lea
pop
pop
pop
leave
ret
mov
mov
push
push
xor
cmp
jne
lea
shl
push
push
push
push
call
cmp
je
add
mov
mov
mov
push
push
lea
push
lea
call
cmp
mov
je
push
push
push
push
call
cmp
mov
jne
push
push
push
call
xor
jmp
or
mov
mov
inc
mov
or
mov
pop
pop
ret
push
mov
push
mov
push
push
push
mov
mov
xor
test
jl
shl
inc
jmp
mov
push
imul
pop
lea
mov
mov
mov
add
dec
jne
mov
push
shl
add
push
push
push
call
test
jne
or
jmp
lea
cmp
ja
lea
or
or
lea
mov
mov
lea
mov
mov
add
lea
cmp
jbe
mov
lea
add
push
pop
mov
mov
lea
mov
mov
and
mov
mov
mov
inc
test
mov
mov
jne
or
mov
mov
shr
not
and
mov
pop
pop
pop
leave
ret
cmp
push
push
push
push
jne
mov
jmp
push
push
push
call
mov
test
je
mov
push
push
push
push
call
mov
test
je
push
mov
push
push
push
call
test
je
mov
cmp
jne
cmp
jne
mov
cmp
jne
mov
jmp
mov
mov
mov
mov
mov
mov
lea
lea
mov
lea
mov
mov
mov
xor
mov
xor
cmp
setge
dec
and
dec
inc
mov
mov
add
cmp
jl
push
push
push
call
add
mov
add
cmp
jae
or
lea
mov
mov
add
jmp
mov
jmp
push
push
push
call
cmp
je
push
push
push
call
xor
pop
pop
pop
pop
ret
push
mov
push
push
push
call
cmp
jne
mov
mov
cmp
je
mov
mov
push
push
mov
mov
mov
mov
push
call
pop
ret
or
pop
ret
push
mov
push
push
push
mov
push
cmp
je
and
lea
mov
cmp
jne
mov
push
add
push
push
call
test
je
or
dec
mov
test
je
cmp
jbe
mov
inc
dec
je
sub
sub
test
jge
cmp
mov
mov
je
cmp
jne
push
lea
pop
cmp
jne
inc
add
cmp
jl
cmp
jne
push
call
pop
cmp
je
cmp
jg
pop
pop
pop
leave
ret
mov
mov
push
mov
cmp
jbe
cmp
jb
mov
cmp
je
jmp
test
jne
mov
mov
and
cmp
jb
mov
mov
mov
mov
and
sub
mov
sub
pop
sar
lea
ret
xor
pop
ret
mov
mov
sub
sar
lea
mov
movzx
add
and
cmp
mov
jne
inc
cmp
jne
push
call
pop
ret
push
mov
push
push
push
push
mov
push
mov
cmp
je
mov
lea
mov
sub
sub
sar
shl
add
cmp
mov
jae
mov
mov
cmp
jl
cmp
jbe
push
push
push
call
add
test
jne
mov
mov
add
lea
add
cmp
mov
jb
jmp
mov
mov
mov
lea
mov
cmp
mov
jae
mov
cmp
jl
cmp
jbe
push
push
push
call
add
test
jne
mov
add
add
cmp
jb
jmp
mov
mov
cmp
je
jmp
mov
sub
mov
jmp
mov
mov
cmp
je
cmp
jne
mov
cmp
je
jmp
mov
and
mov
mov
sub
sub
sar
shl
add
cmp
jne
cmp
jge
add
inc
cmp
je
mov
push
shl
push
push
push
mov
call
cmp
jne
push
push
push
call
mov
add
test
mov
jle
lea
mov
or
lea
mov
mov
mov
mov
mov
add
add
dec
jne
mov
lea
cmp
jae
cmp
je
add
jmp
cmp
sbb
and
mov
mov
mov
mov
sub
sub
lea
lea
mov
jmp
call
test
je
mov
mov
lea
mov
mov
mov
sub
mov
movzx
sub
lea
jmp
xor
pop
pop
pop
leave
ret
push
mov
push
mov
mov
push
push
mov
push
mov
lea
cmp
mov
mov
mov
jb
lea
mov
cmp
jae
add
sub
jmp
and
lea
mov
lea
jmp
add
cmp
je
mov
lea
cmp
jae
mov
test
jne
push
lea
pop
cmp
jne
inc
inc
jmp
cmp
jae
cmp
jne
mov
jmp
sub
cmp
jb
mov
mov
jmp
movzx
add
lea
cmp
jb
lea
cmp
jae
lea
cmp
jae
mov
test
jne
push
lea
pop
cmp
jne
inc
inc
jmp
lea
cmp
jae
sub
mov
mov
jmp
and
lea
mov
mov
add
jmp
cmp
jae
sub
cmp
jb
mov
jmp
movzx
add
jmp
lea
cmp
jae
sub
mov
mov
jmp
and
lea
mov
mov
lea
imul
shl
sub
jmp
xor
pop
pop
pop
leave
ret
mov
xor
mov
mov
cmp
je
add
inc
cmp
jb
cmp
jb
cmp
ja
mov
ret
mov
mov
ret
cmp
jb
cmp
mov
jbe
mov
ret
push
push
push
or
xor
xor
mov
mov
test
je
lea
cmp
jae
test
je
add
jmp
or
sub
sar
add
mov
cmp
jne
add
inc
add
cmp
jl
jmp
mov
push
call
test
pop
je
add
lea
lea
mov
cmp
jae
and
or
mov
mov
add
add
jmp
shl
mov
pop
mov
pop
pop
ret
mov
push
cmp
push
jae
mov
mov
sar
and
lea
shl
mov
cmp
jne
cmp
push
mov
jne
sub
je
dec
je
dec
jne
push
push
jmp
push
push
jmp
push
push
call
mov
mov
xor
pop
jmp
and
mov
or
pop
pop
ret
mov
push
cmp
push
jae
mov
mov
sar
and
lea
shl
mov
add
test
je
cmp
je
cmp
jne
xor
sub
je
dec
je
dec
jne
push
push
jmp
push
push
jmp
push
push
call
mov
or
xor
jmp
and
mov
or
pop
pop
ret
mov
cmp
jae
mov
and
sar
mov
test
lea
je
mov
ret
and
mov
or
ret
mov
cmp
jae
mov
mov
sar
and
mov
test
je
push
call
pop
push
call
test
jne
call
jmp
xor
test
je
mov
mov
or
ret
push
mov
sub
mov
push
cmp
push
push
jae
mov
mov
sar
and
lea
shl
mov
mov
test
je
xor
cmp
mov
mov
jne
xor
jmp
test
je
push
push
push
call
add
mov
add
test
je
mov
cmp
mov
mov
jbe
lea
mov
sub
cmp
jae
mov
inc
mov
cmp
jne
inc
mov
inc
mov
inc
mov
lea
sub
cmp
jl
mov
lea
sub
lea
push
push
lea
push
push
mov
push
call
test
je
mov
add
cmp
jl
mov
sub
cmp
jb
xor
mov
cmp
jne
cmp
je
push
pop
cmp
jne
mov
mov
jmp
call
mov
jmp
lea
push
push
push
push
push
call
test
je
mov
mov
mov
jmp
call
mov
jmp
push
call
pop
jmp
mov
test
je
mov
cmp
je
mov
mov
jmp
sub
jmp
and
mov
or
pop
pop
pop
leave
ret
mov
push
push
test
pop
jne
mov
jmp
cmp
jge
mov
mov
push
push
call
pop
mov
test
pop
jne
push
push
mov
call
pop
mov
test
pop
jne
push
call
pop
xor
mov
mov
mov
add
add
cmp
jl
xor
mov
mov
mov
sar
and
mov
mov
cmp
je
test
jne
or
add
inc
cmp
jl
pop
ret
call
cmp
je
jmp
ret
inc
push
call
pop
mov
test
mov
je
or
mov
jmp
or
lea
mov
mov
mov
and
mov
ret
mov
push
cmp
push
push
jae
mov
mov
sar
and
lea
shl
mov
test
je
push
call
cmp
pop
jne
mov
jmp
push
push
push
push
call
mov
cmp
jne
call
jmp
xor
test
je
push
call
pop
jmp
mov
and
lea
mov
jmp
and
mov
or
pop
pop
pop
ret
push
mov
sub
mov
push
xor
push
test
push
mov
mov
je
mov
mov
jmp
and
mov
mov
test
jne
test
jne
cmp
je
or
push
mov
pop
and
sub
je
dec
je
dec
je
mov
mov
jmp
mov
jmp
mov
jmp
mov
mov
cmp
je
cmp
je
cmp
je
cmp
jne
mov
jmp
mov
jmp
mov
jmp
mov
mov
mov
and
mov
cmp
jg
je
cmp
je
cmp
je
cmp
je
cmp
jne
mov
jmp
mov
jmp
mov
jmp
cmp
je
cmp
je
cmp
je
jmp
mov
jmp
mov
mov
mov
test
je
mov
not
and
test
jne
push
pop
test
je
or
or
test
je
or
test
je
or
jmp
test
je
or
call
mov
or
cmp
jne
and
mov
jmp
push
push
push
lea
push
push
push
push
call
mov
cmp
je
push
call
test
jne
push
call
call
push
call
pop
mov
jmp
cmp
jne
or
jmp
cmp
jne
or
push
push
call
pop
mov
pop
mov
mov
or
sar
and
mov
lea
shl
mov
and
mov
jne
test
je
test
je
push
push
push
call
add
cmp
mov
jne
cmp
je
jmp
and
lea
push
push
push
call
add
test
jne
cmp
jne
push
push
call
pop
cmp
pop
je
push
push
push
call
add
cmp
jne
push
call
pop
or
jmp
cmp
jne
test
je
mov
or
lea
mov
pop
pop
pop
leave
ret
push
push
call
pop
pop
ret
cmp
ja
push
call
test
pop
jne
cmp
je
push
call
test
pop
jne
xor
ret
mov
push
mov
cmp
jne
cmp
ja
push
call
test
pop
je
pop
ret
cmp
jne
mov
test
je
lea
and
jmp
push
pop
cmp
ja
mov
shr
push
call
test
pop
jne
jmp
test
jne
push
pop
add
and
push
push
push
call
pop
ret
push
push
push
call
add
ret
movzx
mov
test
jne
cmp
je
movzx
and
jmp
xor
test
jne
ret
push
pop
ret
push
mov
sub
push
push
push
push
call
mov
pop
cmp
mov
je
xor
cmp
je
xor
mov
cmp
je
add
inc
cmp
jb
lea
push
push
call
cmp
jne
push
xor
pop
mov
cmp
mov
rep
stos
mov
jbe
cmp
je
lea
mov
test
je
movzx
movzx
cmp
ja
or
inc
jmp
push
xor
pop
mov
rep
lea
mov
shl
stos
lea
cmp
mov
je
mov
test
je
movzx
movzx
cmp
ja
mov
mov
or
inc
cmp
jbe
inc
inc
cmp
jne
inc
add
cmp
jb
mov
mov
push
mov
call
lea
mov
movs
movs
pop
mov
movs
jmp
inc
inc
cmp
jne
push
pop
or
inc
cmp
jb
push
call
pop
mov
mov
jmp
mov
xor
mov
stos
stos
stos
jmp
cmp
je
call
call
xor
jmp
or
pop
pop
pop
leave
ret
mov
and
cmp
jne
mov
jmp
cmp
jne
mov
jmp
cmp
jne
mov
mov
ret
mov
sub
je
sub
je
sub
je
dec
je
xor
ret
mov
ret
mov
ret
mov
ret
mov
ret
push
push
pop
xor
mov
rep
stos
xor
mov
mov
mov
mov
stos
stos
stos
pop
ret
push
mov
sub
lea
push
push
push
call
cmp
jne
xor
mov
mov
inc
cmp
jb
mov
mov
test
je
push
push
lea
movzx
movzx
cmp
ja
sub
lea
inc
mov
mov
shr
rep
mov
and
rep
inc
inc
mov
test
jne
pop
pop
push
lea
push
push
push
lea
push
push
push
call
push
lea
push
push
push
lea
push
push
push
push
call
push
lea
push
push
push
lea
push
push
push
push
call
add
xor
lea
mov
test
je
or
mov
mov
jmp
test
je
or
mov
jmp
and
inc
inc
inc
cmp
jb
jmp
xor
mov
cmp
jb
cmp
ja
or
mov
add
mov
jmp
cmp
jb
cmp
ja
or
mov
sub
jmp
and
inc
cmp
jb
pop
leave
ret
cmp
jne
push
call
pop
mov
ret
push
push
push
push
call
add
ret
push
mov
sub
push
and
push
push
mov
mov
lea
mov
cmp
jle
movzx
push
push
call
pop
pop
jmp
mov
movzx
mov
and
test
je
mov
inc
jmp
cmp
mov
jne
or
jmp
cmp
jne
mov
inc
mov
mov
test
jl
cmp
je
cmp
jg
push
test
pop
jne
cmp
je
mov
jmp
mov
cmp
je
cmp
je
mov
jmp
mov
cmp
jne
cmp
jne
mov
cmp
je
cmp
jne
mov
inc
inc
mov
or
xor
div
mov
mov
cmp
movzx
jle
push
push
call
pop
pop
jmp
mov
mov
and
test
je
movsx
sub
jmp
cmp
jle
push
push
call
pop
pop
jmp
mov
mov
and
test
je
movsx
push
call
pop
mov
sub
cmp
jae
mov
or
cmp
jb
jne
or
xor
div
cmp
jbe
or
jmp
imul
add
mov
mov
inc
mov
jmp
mov
dec
mov
test
jne
test
je
mov
mov
and
jmp
test
mov
jne
test
jne
and
je
cmp
ja
test
jne
cmp
jbe
test
mov
je
or
jmp
mov
and
neg
sbb
neg
add
mov
test
je
mov
mov
test
je
mov
neg
mov
mov
jmp
mov
test
je
mov
xor
pop
pop
pop
leave
ret
int3
int3
int3
int3
int3
int3
lea
pop
ret
lea
lea
xor
mov
push
mov
shl
mov
test
je
mov
inc
cmp
je
test
je
test
jne
or
push
mov
shl
push
or
mov
mov
mov
mov
xor
add
add
xor
xor
xor
xor
add
and
jne
and
je
and
jne
and
jne
pop
pop
pop
xor
ret
mov
cmp
je
test
je
cmp
je
test
je
shr
cmp
je
test
je
cmp
je
test
je
jmp
pop
pop
lea
pop
ret
lea
pop
pop
pop
ret
lea
pop
pop
pop
ret
lea
pop
pop
pop
ret
int3
int3
int3
int3
mov
push
push
push
mov
mov
test
je
mov
test
je
mov
mov
mov
inc
cmp
je
test
je
mov
inc
cmp
je
test
jne
pop
pop
pop
xor
ret
mov
inc
cmp
jne
lea
mov
test
je
mov
add
cmp
jne
mov
test
je
mov
add
cmp
je
jmp
xor
pop
pop
pop
mov
jmp
lea
pop
pop
pop
ret
mov
pop
pop
pop
ret
push
mov
push
push
push
mov
jecxz
mov
mov
mov
xor
repnz
neg
add
mov
mov
repz
mov
xor
cmp
ja
je
dec
dec
not
mov
pop
pop
pop
leave
ret
int3
int3
int3
int3
int3
int3
int3
int3
push
cmp
lea
jb
sub
sub
test
cmp
jae
sub
mov
test
mov
mov
mov
push
ret
push
xor
cmp
push
push
jne
push
call
mov
cmp
je
mov
push
push
call
test
mov
je
push
push
call
push
push
mov
call
mov
mov
test
je
call
mov
test
je
mov
test
je
push
call
mov
push
push
push
push
call
pop
pop
pop
ret
xor
jmp
int3
int3
int3
int3
int3
int3
int3
int3
mov
push
test
je
push
push
mov
mov
test
mov
jne
shr
jne
jmp
mov
inc
mov
inc
dec
je
test
je
test
jne
mov
shr
jne
and
je
mov
inc
mov
inc
test
je
dec
jne
mov
pop
pop
pop
ret
test
je
mov
inc
dec
je
test
jne
mov
shr
jne
mov
inc
dec
jne
pop
pop
mov
pop
ret
mov
add
dec
je
mov
mov
add
xor
xor
mov
add
test
je
test
je
test
je
test
je
test
jne
mov
jmp
and
mov
jmp
and
mov
jmp
xor
mov
add
xor
dec
je
xor
mov
add
dec
jne
and
jne
mov
pop
pop
pop
ret
push
mov
push
push
push
mov
push
mov
sub
push
push
push
mov
mov
xor
cmp
jne
lea
push
push
pop
push
push
push
call
test
je
mov
jmp
lea
push
push
push
push
push
call
test
je
push
pop
mov
cmp
jne
mov
cmp
jne
mov
push
push
push
push
push
call
jmp
cmp
jne
cmp
jne
mov
mov
push
push
push
push
mov
neg
sbb
and
inc
push
push
call
mov
cmp
je
mov
lea
mov
add
and
call
mov
mov
mov
push
push
push
call
add
jmp
push
pop
ret
mov
xor
xor
or
cmp
je
push
push
push
push
push
push
call
cmp
je
push
push
push
push
call
jmp
xor
lea
mov
mov
pop
pop
pop
leave
ret
push
mov
push
push
push
mov
push
mov
sub
push
push
push
mov
xor
cmp
jne
push
push
push
pop
push
push
mov
push
push
call
test
je
mov
jmp
push
push
push
push
push
push
call
test
je
mov
cmp
jle
push
push
call
pop
pop
mov
mov
cmp
jne
push
push
push
push
push
push
call
jmp
cmp
jne
cmp
jne
mov
mov
push
push
push
push
mov
neg
sbb
and
inc
push
push
call
mov
mov
cmp
je
mov
lea
add
and
call
mov
mov
mov
or
jmp
push
pop
ret
mov
xor
mov
or
mov
cmp
je
push
push
push
push
push
push
call
test
je
push
push
push
push
push
push
call
mov
mov
cmp
je
test
je
cmp
je
cmp
jg
push
push
push
push
push
push
call
test
jne
xor
lea
mov
mov
pop
pop
pop
leave
ret
mov
lea
add
and
call
mov
mov
mov
or
jmp
push
pop
ret
mov
xor
xor
or
mov
cmp
je
push
push
push
push
push
push
call
test
je
cmp
push
push
jne
push
push
jmp
push
push
push
push
push
push
call
mov
cmp
je
mov
jmp
mov
mov
test
push
lea
je
cmp
je
inc
mov
dec
test
jne
cmp
pop
jne
sub
ret
mov
ret
mov
push
mov
xor
lea
cmp
jb
cmp
jae
push
pop
mov
pop
mov
ret
push
mov
push
mov
push
push
push
call
add
test
je
lea
push
push
push
call
add
test
je
inc
lea
push
push
push
call
add
test
je
inc
lea
push
push
push
call
add
pop
pop
ret
mov
push
push
mov
mov
mov
add
mov
lea
shr
or
mov
mov
mov
shr
shl
or
pop
mov
pop
ret
mov
push
push
mov
mov
mov
mov
shl
shr
or
mov
mov
shl
shr
shr
or
pop
mov
mov
pop
ret
push
mov
sub
mov
push
mov
xor
cmp
push
mov
mov
mov
mov
jbe
push
mov
mov
lea
movs
movs
push
movs
call
push
call
lea
push
push
call
push
call
mov
and
and
movsx
mov
lea
push
push
call
add
inc
dec
jne
xor
pop
cmp
jne
mov
mov
shr
mov
mov
mov
shr
shl
or
shl
add
mov
mov
jmp
mov
test
jne
push
call
add
pop
jmp
mov
pop
mov
pop
leave
ret
push
mov
sub
push
push
push
mov
lea
push
mov
xor
pop
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
cmp
je
cmp
je
cmp
je
cmp
jne
inc
jmp
push
pop
mov
inc
cmp
ja
jmp
cmp
jl
cmp
jg
push
jmp
cmp
jne
push
jmp
movsx
sub
je
dec
dec
je
sub
jne
jmp
push
mov
pop
jmp
and
push
pop
jmp
cmp
mov
jl
cmp
jle
cmp
je
cmp
je
cmp
je
cmp
je
cmp
jle
cmp
jle
cmp
jle
cmp
jg
push
jmp
dec
push
jmp
cmp
jl
cmp
jle
cmp
je
cmp
jne
mov
jmp
mov
cmp
jle
movzx
push
push
call
pop
pop
push
pop
jmp
mov
movzx
mov
and
test
je
cmp
jae
mov
inc
sub
inc
mov
jmp
inc
mov
inc
jmp
cmp
jne
mov
jmp
cmp
mov
mov
jne
cmp
jne
dec
mov
inc
jmp
cmp
jle
movzx
push
push
call
pop
pop
push
pop
jmp
mov
movzx
mov
and
test
je
cmp
jae
mov
inc
sub
inc
dec
mov
mov
inc
jmp
cmp
je
cmp
je
jmp
cmp
mov
jle
movzx
push
push
call
pop
pop
push
pop
jmp
mov
movzx
mov
and
test
je
mov
jmp
lea
cmp
mov
jl
cmp
jle
movsx
sub
je
dec
dec
je
sub
jne
push
jmp
mov
cmp
jne
mov
inc
jmp
cmp
jl
cmp
jg
jmp
cmp
jl
cmp
jg
push
pop
dec
jmp
cmp
jne
jmp
cmp
je
movsx
lea
sub
mov
je
dec
dec
jne
or
push
pop
jmp
push
pop
jmp
push
dec
pop
cmp
je
jmp
mov
jmp
mov
xor
cmp
jle
movzx
push
push
call
pop
pop
jmp
mov
movzx
mov
and
test
je
movsx
lea
lea
cmp
jg
mov
inc
jmp
mov
mov
cmp
jle
movzx
push
push
call
pop
pop
jmp
mov
movzx
mov
and
test
je
mov
inc
jmp
dec
jmp
mov
mov
cmp
mov
je
push
pop
cmp
jbe
cmp
jl
inc
mov
mov
dec
inc
jmp
mov
cmp
jbe
dec
cmp
jne
dec
inc
jmp
lea
push
lea
push
push
call
mov
xor
add
cmp
jge
neg
add
cmp
jne
add
cmp
jne
sub
cmp
jle
mov
mov
mov
mov
mov
cmp
je
xor
mov
mov
xor
mov
jmp
cmp
jge
mov
jmp
push
push
lea
push
call
mov
mov
mov
mov
add
jmp
xor
xor
xor
xor
jmp
xor
xor
xor
xor
mov
jmp
cmp
je
xor
xor
xor
xor
mov
mov
or
pop
mov
mov
mov
mov
pop
mov
pop
leave
ret
xor
inc
add
xor
inc
add
add
ss
add
aaa
inc
add
inc
add
aaa
inc
add
aaa
inc
add
inc
add
in
sub
mov
push
mov
push
mov
mov
and
and
test
push
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
mov
je
mov
jmp
mov
mov
test
jne
test
jne
cmp
jne
and
mov
mov
mov
jmp
cmp
jne
mov
mov
cmp
jne
cmp
je
test
jne
push
jmp
test
je
cmp
jne
cmp
jne
push
jmp
cmp
jne
cmp
jne
push
lea
push
call
pop
mov
pop
and
jmp
push
lea
push
call
pop
mov
pop
jmp
movzx
mov
mov
shr
imul
shr
and
push
lea
mov
imul
mov
lea
mov
sar
mov
movsx
neg
push
lea
push
call
add
cmp
jb
lea
inc
push
lea
push
call
pop
pop
test
mov
je
mov
movsx
add
test
jg
jmp
mov
cmp
jle
push
pop
movzx
sub
and
mov
lea
push
call
dec
pop
jne
test
jge
neg
and
jle
lea
push
call
dec
pop
jne
lea
lea
test
mov
jle
mov
lea
lea
movs
movs
lea
push
movs
call
lea
push
call
lea
push
lea
push
call
lea
push
call
mov
mov
and
add
add
inc
dec
mov
jne
mov
mov
dec
dec
cmp
lea
jl
cmp
jb
cmp
jne
mov
dec
jmp
cmp
jae
inc
inc
inc
sub
sub
mov
movsx
and
mov
pop
pop
pop
leave
ret
cmp
jb
cmp
jne
dec
jmp
cmp
jae
and
mov
mov
mov
and
push
pop
jmp
push
mov
push
mov
imul
cmp
push
mov
ja
test
jne
push
pop
add
and
xor
cmp
ja
mov
cmp
jne
mov
cmp
ja
push
call
mov
pop
test
jne
jmp
cmp
jne
cmp
ja
mov
shr
push
call
mov
pop
test
jne
push
push
push
call
mov
test
jne
cmp
je
push
call
test
pop
je
jmp
push
push
push
call
add
mov
pop
pop
pop
ret
push
jmp
xor
jmp
push
push
push
xor
pop
cmp
jle
mov
mov
test
je
test
je
push
call
cmp
pop
je
inc
cmp
jl
mov
push
call
mov
pop
and
inc
cmp
jl
mov
pop
pop
ret
push
mov
mov
call
push
mov
push
xor
cmp
jae
mov
mov
sar
and
mov
test
je
push
push
push
call
add
cmp
mov
je
push
push
push
call
add
cmp
je
push
mov
sub
test
jle
push
lea
push
push
call
push
push
call
add
mov
mov
cmp
jge
mov
push
lea
push
push
call
add
cmp
je
sub
test
jle
jmp
cmp
jne
mov
or
push
push
call
pop
pop
jmp
jge
push
push
push
call
push
call
add
push
call
mov
neg
sbb
neg
dec
cmp
jne
mov
call
mov
push
push
push
call
add
mov
pop
jmp
mov
or
pop
pop
leave
ret
mov
test
je
push
call
test
pop
je
push
pop
ret
xor
ret
push
mov
push
cmp
push
jne
mov
cmp
jl
cmp
jg
sub
jmp
mov
cmp
jge
cmp
jle
push
push
call
pop
pop
jmp
mov
mov
and
test
jne
mov
jmp
mov
mov
sar
movzx
test
je
and
mov
mov
push
jmp
and
mov
push
pop
lea
push
push
push
push
push
lea
push
push
push
call
add
test
je
cmp
jne
movzx
jmp
movzx
movzx
shl
or
pop
leave
ret
push
mov
sub
push
mov
push
mov
mov
xor
push
mov
mov
mov
mov
mov
mov
mov
xor
and
and
and
cmp
lea
mov
jae
cmp
jae
cmp
ja
cmp
ja
xor
jmp
test
mov
jne
inc
test
jne
xor
cmp
jne
cmp
jne
jmp
xor
cmp
jne
inc
test
jne
cmp
jne
cmp
jne
mov
mov
mov
jmp
mov
lea
mov
mov
mov
add
cmp
jle
add
lea
mov
mov
mov
mov
mov
mov
movzx
movzx
imul
mov
add
push
push
push
call
add
test
je
mov
inc
add
sub
dec
jne
add
inc
dec
cmp
jg
add
cmp
jle
test
jne
lea
push
call
add
pop
cmp
jg
cmp
jg
add
cmp
jge
movsx
neg
add
mov
test
je
inc
lea
push
call
dec
pop
jne
cmp
je
or
cmp
ja
mov
and
cmp
jne
cmp
jne
and
cmp
jne
and
cmp
jne
inc
mov
jmp
inc
jmp
inc
jmp
inc
mov
cmp
jae
mov
or
mov
mov
mov
mov
mov
mov
jmp
neg
sbb
and
and
add
and
mov
pop
pop
pop
leave
ret
push
mov
sub
push
mov
xor
sub
cmp
je
jge
mov
mov
neg
mov
sub
cmp
jne
mov
mov
cmp
je
push
push
mov
add
sar
and
cmp
je
lea
cmp
lea
jb
lea
movs
movs
movs
dec
lea
push
push
call
pop
pop
xor
cmp
jne
pop
pop
pop
leave
ret
mov
push
cmp
jae
mov
and
sar
mov
lea
mov
test
je
mov
mov
and
cmp
jne
and
jmp
cmp
jne
or
neg
sbb
mov
and
add
pop
ret
mov
jmp
mov
or
pop
ret
int3
jmp
