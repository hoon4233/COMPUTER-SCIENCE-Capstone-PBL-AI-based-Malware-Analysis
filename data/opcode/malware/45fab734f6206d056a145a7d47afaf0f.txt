mov
(bad)
(bad)
(bad)
xchg
xchg
mov
das
xchg
sahf
hlt
(bad)
jle
sahf
xchg
xchg
sbb
push
jb
sub
iret
push
pop
repnz
(bad)
push
push
lahf
jle
push
push
sbb
(bad)
jmp
pop
lds
push
ret
rcr
sbb
pop
jo
imul
lods
dec
jecxz
cdq
and
xchg
xchg
cs
xchg
mov
outs
cdq
adc
(bad)
fistp
outs
jg
or
jnp
adc
adc
adc
call
push
fucom
bound
jno
movs
inc
sbb
mov
je
popf
inc
sbb
cs
dec
movs
push
mov
xchg
sbb
push
pop
shl
iret
in
ja
xlat
inc
and
xchg
mov
xchg
addr16
adc
xchg
xchg
xchg
nop
dec
dec
dec
dec
xchg
sahf
lahf
pushf
dec
dec
dec
dec
popf
call
cdq
adc
fcomp
cmp
addr16
sahf
sbb
es
push
imul
(bad)
sbb
jl
js
push
jl
and
xchg
jg
(bad)
in
inc
bound
xor
nop
push
jno
jg
lods
inc
push
int
xchg
xchg
sub
test
jecxz
push
nop
fcom
clc
mov
std
nop
jmp
cmp
jg
mov
dec
loop
adc
cdq
lock
jecxz
adc
jae
adc
jns
cmp
push
adc
ret
pop
lock
loop
push
mov
jle
cmp
daa
in
(bad)
push
call
es
scas
pop
mov
pushf
push
(bad)
jle
and
es
imul
or
xor
mov
loop
sar
cs
pop
add
ret
xlat
xchg
lods
aam
addr16
xor
xchg
or
jg
fisttp
ds
pop
xchg
ficom
jp
(bad)
imul
rcl
sahf
les
jmp
push
pusha
fist
lods
push
stos
sbb
lock
test
cli
jle
cmp
iret
jl
and
rcr
sbb
fld
repnz
jge
jp
fcom
cdq
sbb
mov
jle
inc
jge
(bad)
hlt
jle
jmp
(bad)
retf
pop
mov
mov
cmp
std
call
lahf
dec
es
(bad)
(bad)
sub
jge
pop
movs
cli
into
adc
enter
ror
outs
movs
jnp
xchg
push
lds
sbb
cdq
sub
xor
out
mov
push
shl
nop
xor
pop
sti
into
cmp
xchg
cmp
call
jns
xchg
xchg
je
xchg
sbb
scas
test
xchg
sbb
push
outs
mov
in
xchg
xchg
pop
push
fcom
not
jbe
sub
push
sbb
xlat
and
xchg
xlat
xchg
push
xlat
nop
int
adc
push
sub
push
pop
nop
and
idiv
(bad)
mov
mov
shl
mov
pop
retf
stos
jo
mov
in
sbb
xchg
imul
fisub
mov
push
adc
and
and
jecxz
sbb
mov
jecxz
push
mov
pop
xchg
mov
lods
arpl
mov
call
mov
rcl
imul
adc
in
add
adc
gs
popf
xchg
ret
fstp
mov
xchg
lds
ja
sahf
out
stc
scas
(bad)
inc
call
mov
(bad)
jg
or
js
inc
xchg
sar
jns
call
imul
lock
jo
xchg
out
dec
jle
push
mov
xor
cmp
push
push
(bad)
mov
pop
xchg
lock
nop
jle
xchg
leave
fiadd
adc
std
out
mov
pop
repz
jp
pusha
pop
mov
add
add
retf
sahf
stos
scas
call
sti
in
inc
push
push
jle
cmp
sbb
popf
jle
lock
pop
xchg
pop
outs
sub
data16
jecxz
sub
mov
adc
and
xchg
leave
xchg
adc
(bad)
adc
test
jmp
jmp
pop
cmp
pop
hlt
hlt
pusha
rcr
jge
pop
inc
mov
jmp
outs
in
scas
test
lea
aad
stos
inc
nop
xor
fsub
nop
call
jge
xor
xchg
sbb
push
xchg
imul
adc
in
outs
aas
cmp
in
xchg
mov
pop
inc
(bad)
aam
lods
gs
cmp
hlt
inc
jle
cld
push
imul
test
(bad)
push
pop
add
adc
sbb
lea
sbb
mov
shl
hlt
mov
icebp
cmp
pop
mov
push
sbb
xchg
nop
inc
push
push
xchg
mov
out
ss
loop
xchg
cmp
xor
pop
push
jmp
jl
lods
push
cmps
outs
dec
mov
aaa
cli
sub
xor
int
call
stos
aad
jno
mov
push
mov
and
lock
xchg
dec
jge
jnp
sbb
xor
daa
fsub
rcl
int3
pop
mov
outs
xor
inc
imul
data16
ret
lds
jl
lock
mov
mov
mov
jle
ins
mov
push
xchg
(bad)
pusha
outs
xchg
(bad)
fiadd
hlt
xchg
lods
fld
adc
mov
pop
in
mov
stc
sahf
mov
not
cmps
dec
sbb
fidivr
clc
lods
xor
xchg
test
xchg
fsubp
arpl
push
adc
jle
outs
add
(bad)
mov
imul
stos
jge
scas
xchg
sbb
sbb
push
retf
xchg
retf
(bad)
shl
mov
inc
retf
adc
call
inc
jle
scas
mov
aaa
gs
jle
fadd
std
sub
sbb
out
push
adc
sbb
scas
adc
adc
mov
push
ins
rol
mov
push
lods
push
in
movs
inc
mov
mov
sub
repz
ds
sbb
push
or
or
loope
fist
dec
xor
mov
imul
or
jge
mov
sub
repnz
mov
(bad)
mov
xor
cmp
dec
loop
scas
xlat
xor
adc
push
sbb
inc
xchg
or
push
sub
sub
inc
lds
sbb
add
call
lock
mov
xchg
loope
ret
mov
ret
mov
test
inc
loop
sub
sub
gs
rol
sar
xchg
push
xchg
xchg
push
fdiv
inc
bound
scas
out
in
imul
lods
pop
jl
jge
sahf
jle
xor
(bad)
sbb
mov
cld
xchg
jle
hlt
jge
pop
sbb
sbb
pop
ret
inc
lahf
push
repnz
lods
ret
lock
mov
ror
into
xor
jp
mov
pop
pushf
xchg
mov
shl
test
mov
call
movs
jno
push
out
mov
sahf
xchg
jg
fdivr
add
lock
adc
sbb
das
mov
jp
dec
push
popa
push
and
fstp
fild
inc
int3
outs
pop
jmp
adc
cwde
(bad)
imul
cmp
sub
sub
test
sahf
xor
daa
jae
add
sar
or
xchg
sbb
fisubr
in
aaa
clc
fcomp
add
cmp
add
outs
clc
inc
sbb
jb
jmp
pop
cdq
adc
out
push
fisub
(bad)
mov
shl
stos
popa
jecxz
lods
pop
loopne
cld
push
jg
dec
loope
sbb
gs
xchg
outs
sbb
(bad)
cmp
sar
jge
mov
jne
add
sbb
push
shl
(bad)
ds
jle
loopne
adc
push
and
cmc
(bad)
loopne
add
jle
retf
call
xchg
push
push
popf
vhaddps
jne
and
sbb
and
call
mov
imul
jo
fbld
(bad)
jo
(bad)
cld
sbb
pop
data16
je
scas
pop
imul
mov
sub
inc
cmc
mov
xor
sub
and
repnz
lods
add
xchg
jno
sbb
add
xor
jg
daa
lods
ss
rcr
std
jle
(bad)
enter
add
sub
pusha
call
loope
cmp
out
out
and
xchg
ja
out
jb
out
mov
add
and
xchg
jmp
xor
push
jmp
pop
jmp
mov
add
shr
jno
fisub
adc
ins
mov
pop
(bad)
cmp
mov
xchg
les
mov
aad
sub
ins
cli
push
test
xor
stc
sub
xchg
dec
hlt
inc
fldcw
imul
in
and
jle
pop
sub
sbb
mov
jb
sbb
sti
xchg
dec
push
mov
push
std
adc
dec
pop
retf
jp
cmps
in
xchg
inc
sahf
jle
addr16
scas
fwait
pushf
cdq
out
sbb
outs
cmp
xor
inc
mov
jle
gs
push
outs
xchg
pop
mov
sub
jecxz
das
and
xor
nop
pop
sub
dec
cwde
jne
ror
sub
shl
push
cmp
push
retf
stc
xor
mov
inc
push
nop
and
cmps
scas
test
sbb
jbe
sbb
aam
(bad)
pop
lock
xchg
jmp
mov
mov
dec
pop
or
or
in
xchg
cmp
adc
mov
sbb
clc
pop
sbb
loop
mov
jnp
push
xchg
inc
jge
cmp
mov
scas
es
jmp
mov
inc
fistp
cld
movs
jle
mov
fnsave
(bad)
cld
lahf
daa
neg
cli
mov
push
mov
xor
cdq
add
mov
ficomp
adc
sub
popf
pop
data16
std
in
push
sahf
push
push
jmp
xchg
and
jle
test
add
fwait
adc
xor
xchg
push
push
cdq
adc
loope
int
xchg
sub
jmp
xor
pop
cmps
stos
sbb
push
lock
mov
outs
jle
pusha
(bad)
call
(bad)
jg
xchg
jecxz
scas
iret
mov
jge
loopne
sbb
out
shr
xchg
neg
cld
(bad)
sbb
out
jecxz
cld
movs
sbb
shl
adc
inc
jle
aaa
dec
enter
sbb
lds
shr
mov
cdq
cld
stos
jge
sub
pop
dec
inc
cmp
pusha
stos
dec
pop
jg
push
mov
sbb
icebp
or
aad
push
pop
shl
ret
inc
sti
pop
sub
pop
stc
lahf
loope
and
outs
aad
sahf
xchg
jo
outs
ins
xchg
sar
scas
xor
ins
mov
mov
or
les
xor
push
outs
inc
cdq
in
sub
les
ds
cmp
jge
stos
rcr
xchg
adc
cmp
jo
xor
add
mov
rcr
les
clc
aam
adc
clc
adc
cmc
mov
lds
mov
mov
xchg
pop
mov
xlat
(bad)
imul
mov
inc
jle
int
fstp
jns
ds
mov
xchg
inc
lock
inc
ins
ficom
outs
pop
rcr
leave
call
(bad)
push
icebp
mov
inc
mov
push
mov
lds
pusha
test
mov
jle
movs
jg
loop
or
cdq
adc
sbb
or
inc
lds
ins
dec
pop
dec
lods
push
cdq
adc
mov
mov
in
enter
push
xchg
retf
ja
enter
xchg
sbb
pusha
je
fcmovbe
sub
imul
and
or
iret
push
jnp
sahf
neg
xchg
and
es
push
push
sbb
cld
sub
lods
imul
mov
rcr
out
retf
imul
mov
mov
sbb
jnp
scas
inc
fsub
inc
jmp
push
xacquire
or
or
call
sub
jmp
cmp
dec
imul
ins
lods
outs
pop
adc
sub
inc
jl
sub
dec
dec
cmp
shl
shl
test
xchg
jg
shr
sbb
(bad)
in
xor
(bad)
jg
pop
arpl
cld
sahf
lods
popa
leave
loop
scas
call
sub
mov
adc
mov
xchg
mov
mov
sbb
or
jo
cli
dec
test
push
outs
inc
cmp
dec
leave
or
cmp
inc
push
loope
inc
jo
adc
jnp
(bad)
push
cld
push
into
jle
iret
inc
popa
cwde
imul
xchg
inc
sahf
inc
add
adc
sbb
rol
repz
loope
and
push
stos
(bad)
sti
pop
sti
adc
cmp
ficom
(bad)
loopne
mov
popa
cmp
sbb
pop
mov
xchg
popa
cmps
ja
iret
outs
jp
fistp
xchg
jle
push
sub
or
mov
adc
(bad)
(bad)
fidiv
pop
in
out
add
or
inc
out
xchg
and
jle
addr16
pop
jnp
popf
iret
push
and
or
ror
cmp
pop
dec
popa
inc
sub
push
mov
(bad)
jmp
xchg
loop
cdq
and
mov
movs
mov
pop
mov
aam
jecxz
rcl
inc
fsub
js
pop
push
jnp
movs
mov
add
push
jg
data16
ins
paddusw
push
das
sbb
mov
mov
div
push
sub
dec
mov
inc
sbb
mov
movs
xor
mov
sub
int
in
leave
hlt
out
jae
in
mov
rcr
.byte
(bad)
.byte
