sub
in
or
cmp
repz
in
dec
ds
lds
mov
adc
adc
fucomip
enter
or
fimul
add
jmp
sbb
loopne
sbb
push
jecxz
pop
movs
in
sbb
shl
xchg
mov
mov
out
cmc
fstp
push
ins
xchg
mov
cmp
popa
mov
xor
jmp
and
fist
mov
mov
push
or
mov
aam
dec
stos
call
es
(bad)
scas
mov
or
addr16
inc
or
(bad)
out
xchg
mov
pop
add
mov
fiadd
push
jle
data16
das
test
xchg
and
cmp
and
push
xor
(bad)
pop
dec
push
jo
jmp
pop
or
jno
mov
scas
jmp
movs
jnp
or
jl
movs
loopne
adc
lea
lahf
lahf
mov
pushf
push
lea
ja
push
pusha
lea
jle
jb
pushf
call
rol
pusha
cmp
xor
pushf
call
pushf
push
lea
jae
pushf
lea
jne
jmp
add
push
gs
arpl
add
imul
popa
jae
inc
add
add
je
arpl
ins
ins
push
popa
outs
addr16
shr
add
add
dec
adc
adc
lea
jae
push
push
push
lea
jmp
add
inc
gs
outs
jb
addr16
jne
fs
imul
add
gs
je
push
arpl
outs
add
add
je
gs
jo
popa
je
inc
add
mov
js
les
retf
sbb
aas
push
inc
dec
and
sar
jmp
paddw
ret
mov
lock
addr16
mov
(bad)
mov
jb
stos
cwde
fwait
and
(bad)
fsub
ror
cli
mov
mov
repz
xlat
int3
mov
test
retf
ret
popf
scas
mov
cmps
sbb
les
xchg
adc
jmp
outs
jmp
loope
adc
fdiv
jns
jge
mov
(bad)
aad
fdivrp
push
mov
add
push
dec
bound
dec
xor
movs
pusha
pop
inc
(bad)
int3
mov
sub
inc
cmp
retf
ss
and
mov
push
imul
aas
dec
sub
inc
inc
xlat
xor
in
retf
push
pusha
xchg
inc
push
hlt
leave
mov
and
inc
add
jns
xor
sbb
mov
sub
adc
test
neg
xchg
jge
inc
mov
jbe
cmp
inc
xor
fs
dec
sbb
add
enter
ja
adc
fnstenv
cmps
mul
adc
popa
ins
inc
es
cmps
pop
repnz
push
cdq
daa
add
cmp
dec
std
iret
or
or
(bad)
sar
push
imul
sahf
sbb
ins
push
lds
lods
and
jnp
outs
cmp
adc
adc
aas
sbb
and
dec
mov
dec
les
or
inc
cmp
lods
mov
xchg
test
cld
mov
movs
nop
test
mov
sbb
inc
xor
sbb
adc
cli
sub
test
jmp
inc
cmp
movs
stos
and
sub
(bad)
outs
pop
popa
add
inc
jo
pusha
or
dec
call
mov
sub
mov
daa
adc
cmp
bound
adc
jle
xchg
sbb
xchg
sbb
push
jecxz
xor
jbe
mov
jge
ror
lock
mov
xchg
das
div
imul
aam
xor
cmps
cmps
xchg
xchg
add
aam
push
popa
mov
stos
std
in
push
pop
bound
retf
mov
or
cmps
loop
faddp
(bad)
jmp
add
in
cmp
pop
inc
pop
ds
pop
cli
mov
mov
fld
dec
cmp
inc
xchg
pop
inc
mov
and
popa
or
push
pop
and
sbb
push
out
xor
bound
cld
pop
cli
cmp
bound
movs
repz
in
and
fistp
mov
enter
sub
mov
movs
lea
xchg
ret
push
xlat
dec
and
sbb
int
in
cmp
shl
xor
jle
mov
fmulp
retf
cs
jmp
sbb
and
popa
(bad)
jecxz
aad
scas
(bad)
sar
ins
add
mov
out
push
or
or
movups
(bad)
xchg
add
xchg
shl
jg
add
add
add
cmp
aas
imul
por
or
sti
aas
and
mov
jne
imul
in
rcl
retf
xlat
int3
enter
enter
or
cld
pushf
test
js
es
jge
mov
and
addr16
xchg
(bad)
jbe
mov
and
call
inc
cmc
neg
std
mov
mov
clc
push
popfw
push
call
add
push
gs
imul
outs
addr16
add
add
je
imul
inc
js
inc
js
add
inc
ins
outs
jae
dec
popa
outs
fs
add
cmp
aas
sbb
mov
pop
jp
sub
mov
lea
mov
lods
out
sub
push
repz
cmp
jp
jl
lea
call
xor
mov
ret
mov
mov
fwait
and
fadd
hlt
in
aad
jmp
push
cmp
sub
movs
enter
rcl
or
sbb
and
push
inc
addr16
int3
out
sub
xlat
rcl
or
xchg
outs
jae
mov
or
sub
test
repnz
add
lds
or
cli
and
or
es
lods
xchg
test
clc
loop
push
inc
xchg
pop
inc
retf
addr16
out
ret
mov
es
inc
mov
dec
aad
sbb
addr16
dec
xor
cmp
or
mov
push
jns
inc
outs
ins
outs
jb
mov
bswap
push
movzx
lea
pushf
jmp
add
inc
jb
popa
je
inc
ins
ins
imul
outs
add
sahf
jp
test
mov
mov
pusha
lea
jmp
add
inc
gs
jb
jns
arpl
ins
gs
je
jb
popa
bound
add
inc
jb
popa
je
inc
imul
call
mov
mov
lea
jae
cmp
call
add
inc
gs
jne
jb
outs
je
bound
arpl
add
ja
outs
arpl
push
arpl
mov
inc
pusha
pushf
lea
jmp
str
pushf
pushf
pusha
pushf
mov
call
jmp
dec
cld
fisubr
or
and
out
inc
rcl
clc
adc
pop
add
out
sub
or
sbb
fadd
ret
retf
mov
xor
in
and
stos
jne
jecxz
mov
mov
in
sbb
outs
pop
adc
and
pop
add
xor
mov
pop
adc
add
(bad)
mov
test
ja
pop
nop
jle
cdq
(bad)
sbb
cmps
mov
or
and
and
cld
nop
fwait
and
inc
jb
scas
cs
sub
mov
cdq
or
pop
arpl
lea
sbb
stos
(bad)
repnz
cmp
gs
test
imul
and
push
fidivr
and
xor
lea
nop
mov
mov
aad
fwait
xor
hlt
in
adc
sbb
cmp
pop
mov
(bad)
das
push
pusha
push
fwait
xchg
mov
loop
js
pusha
mov
retf
faddp
ror
mov
pop
xor
or
(bad)
lods
xchg
and
push
add
jmp
mov
xchg
pushf
test
jecxz
adc
mov
sub
mov
xchg
pop
adc
mov
and
icebp
mov
mov
jmp
or
jmp
jmp
add
inc
gs
je
dec
popa
outs
fs
add
add
outs
dec
gs
jo
add
add
cmp
add
add
je
gs
popa
addr16
add
add
popa
ins
inc
jb
add
add
je
ins
je
add
inc
gs
jns
je
ins
dec
outs
jne
pusha
call
add
ins
jae
jb
outs
inc
add
add
jne
ins
push
arpl
mov
or
call
add
dec
gs
jo
imul
gs
jo
ins
ins
outs
arpl
add
push
gs
jne
jb
push
popa
ins
jne
inc
js
add
data16
(bad)
inc
add
imul
jo
imul
movs
mov
cmp
iret
jne
mov
ffreep
in
aam
not
or
and
mov
jo
xchg
(bad)
fsubr
prefetch
or
inc
lock
out
mov
jnp
aaa
gs
(bad)
retf
adc
pop
dec
push
inc
dec
xor
pop
inc
std
in
hlt
xor
or
push
cmp
add
(bad)
pop
enter
sahf
or
push
mov
sub
add
inc
and
jbe
pop
inc
sub
mov
mov
ror
scas
mov
ret
ffreep
aad
stc
out
inc
xor
shr
int3
iret
scas
pushf
test
push
inc
xchg
test
scas
cli
loopne
and
stos
xchg
mov
jmp
cmp
or
rcl
lds
test
jg
add
lahf
int3
pushf
call
add
inc
gs
gs
dec
bound
arpl
out
bt
pushf
sub
jmp
add
push
outs
jb
imul
popa
jae
inc
add
mov
add
inc
das
sub
pop
mov
call
dec
pop
cmp
js
sub
xchg
sub
pop
adc
dec
das
lahf
dec
sahf
xlat
add
popa
data16
xor
pop
cmc
sbb
inc
push
dec
pusha
push
or
jge
outs
popf
inc
sub
push
or
test
aad
push
ins
jno
dec
pop
dec
push
imul
je
jmp
bound
mov
pop
inc
or
and
call
fcomip
xor
vmovlps
pusha
dec
mov
lods
ret
mov
aaa
and
mov
fmul
mov
cmp
inc
pop
loopne
popf
(bad)
les
jb
add
mov
pop
and
(bad)
sub
(bad)
adc
sbb
sbb
scas
xchg
mov
xor
in
pop
mov
ss
push
inc
push
inc
pop
inc
push
cmp
jae
cmp
loopne
mov
sub
stos
jno
ret
gs
dec
cmp
repnz
retf
stos
cmp
lock
pop
mul
into
faddp
rcr
or
push
dec
push
shl
div
adc
mov
xor
mov
lods
mov
cwde
sahf
test
loopne
std
push
push
push
sbb
sbb
fld
popa
retf
fcmovne
mov
xchg
jo
xchg
xor
xchg
repz
jno
bound
das
jp
mov
repz
repnz
push
lea
jb
bt
jmp
mov
call
add
add
imul
or
sbb
add
adc
add
in
add
add
mov
add
adc
add
mov
add
fstp
add
add
sbb
add
add
add
cdq
sbb
add
sbb
add
add
add
jbe
add
ins
and
add
rcr
add
and
je
and
call
add
aam
add
sbb
add
sbb
add
int3
sbb
add
addr16
add
imul
or
sbb
add
sbb
add
and
std
or
add
mov
add
mov
add
lock
sbb
adc
add
test
add
fstp
pusha
mov
adc
add
std
and
data16
add
ins
and
cwde
adc
add
fstp
add
mul
add
jle
add
and
bound
and
(bad)
mov
add
sbb
add
add
mov
sbb
add
sbb
add
adc
add
cs
add
or
add
push
sbb
add
and
arpl
sbb
add
mov
add
and
push
mov
sbb
add
mov
and
and
jle
add
sbb
add
call
retf
sbb
mov
popa
(bad)
and
imul
and
sub
and
aas
test
add
jno
add
mov
add
mov
and
and
xlat
sbb
add
repz
jp
adc
add
push
adc
add
add
add
add
sbb
add
in
and
in
adc
add
scas
adc
add
rcr
sub
sbb
js
and
add
scas
adc
add
or
add
or
add
sbb
add
jle
add
and
ja
adc
add
add
iret
sbb
add
pop
adc
add
add
add
lods
adc
add
sbb
add
and
pop
or
add
adc
add
sbb
add
adc
add
sub
sbb
add
or
add
jo
add
add
sbb
add
jle
add
mov
add
ficomp
add
sbb
add
rcr
popw
adc
add
and
inc
or
add
and
cs
add
sbb
add
sti
and
cwde
test
add
adc
add
out
and
scas
mov
add
xchg
add
pop
adc
add
add
and
adc
add
test
add
adc
add
fistp
add
lods
adc
add
jnp
add
popa
sbb
add
and
inc
stos
sbb
add
add
adc
add
mov
add
or
add
add
mov
add
add
add
sti
and
fldcw
and
or
sbb
add
test
add
int3
sbb
add
loop
add
and
mov
je
add
sbb
add
adc
add
sbb
add
adc
add
scas
adc
add
mov
sbb
in
jp
add
add
add
gs
add
add
add
add
add
mov
adc
add
sbb
jne
add
or
add
mov
add
mov
add
mov
and
shr
add
sbb
add
sbb
add
pop
adc
add
sub
and
(bad)
out
and
mov
and
cdq
add
add
sbb
add
and
mov
add
add
add
sbb
gs
sbb
add
and
iret
jnp
add
test
add
outs
sbb
add
jnp
add
xchg
add
mul
add
stos
sbb
add
mov
adc
add
sbb
add
ja
add
jb
add
mov
add
sbb
add
and
add
and
add
mov
and
sub
sbb
add
nop
sbb
add
rcr
add
add
add
mov
add
(bad)
sbb
add
sbb
add
sbb
add
sbb
add
je
add
mov
and
cdq
call
fild
sbb
add
add
add
sbb
add
and
cmp
add
and
cmp
and
imul
add
sbb
add
add
add
sbb
add
add
add
rcr
add
out
and
cdq
addr16
add
add
or
adc
add
adc
add
pop
add
sbb
add
or
add
mov
add
and
add
popa
loope
add
add
add
add
sldt
add
add
or
add
je
add
adc
add
adc
add
or
add
or
add
lods
mov
add
mov
add
adc
add
scas
adc
add
stc
and
dec
add
add
add
add
add
and
scas
sbb
add
sbb
adc
sbb
add
aam
add
test
add
and
pushf
sbb
test
fidivr
dec
dec
inc
cld
aam
test
shl
in
mov
sar
mov
retf
daa
fist
pop
jp
psrlq
jns
inc
(bad)
ja
fsubr
inc
pop
mov
fisubr
dec
js
push
jmp
jbe
jmp
call
inc
mov
rol
ins
std
dec
in
add
sbb
pop
retf
ja
shr
adc
aas
mov
push
jmp
lods
(bad)
adc
cmc
bnd
iret
call
loopne
cdq
or
frstor
popf
adc
inc
nop
mov
out
pop
sub
sub
call
cmc
lods
mov
jne
xchg
cmp
arpl
paddq
pop
icebp
outs
add
fcmovnb
or
inc
div
or
cli
lds
mov
xchg
sbb
dec
loopne
sahf
jp
push
add
and
fstp
xlat
jnp
pusha
sbb
and
mov
fld
mov
aam
(bad)
cld
cmp
sub
xchg
aad
dec
push
push
pop
cwde
pop
aad
xchg
sbb
pop
ss
mov
jne
out
call
mov
cmp
mov
push
sti
cli
lea
mov
ret
and
inc
jecxz
push
sbb
jmp
fwait
pop
cli
int3
in
xchg
outs
push
int3
retf
push
xchg
(bad)
and
sub
xchg
rol
mov
sub
xchg
cmps
fisubr
mov
mov
in
xor
std
mov
ja
mov
xor
movs
push
xchg
cmp
sbb
jns
jg
ja
sbb
nop
mov
stc
xchg
and
cmp
mul
fild
mov
ja
sub
mov
sub
add
sub
pop
retf
sbb
(bad)
cld
addr16
jmp
pop
add
in
sbb
xchg
cmps
fwait
scas
sub
mov
jo
push
adc
(bad)
stos
cmps
mov
test
or
pop
push
movs
lods
inc
xlat
dec
jns
or
rcl
dec
out
or
sbb
xor
movs
jnp
pushf
xchg
jmp
inc
nop
data16
mov
pop
jno
mov
cmp
push
jmp
pop
and
(bad)
jo
adc
xor
daa
mov
int
mov
or
nop
cld
pusha
inc
pushf
sbb
daa
mov
fstp
(bad)
lahf
cmp
dec
push
inc
jmp
ds
test
lahf
int
pop
lods
ret
pusha
xchg
mov
dec
jbe
inc
es
dec
lods
nop
cmp
dec
push
or
fcom
lahf
and
stc
mov
call
add
xor
pushf
aam
loope
(bad)
outs
mov
fisubr
(bad)
xchg
and
xor
retf
xchg
imul
ins
or
lock
mov
call
sbb
stos
xchg
sbb
sar
adc
mov
pop
mov
adc
jmp
pop
or
jle
cmp
add
lods
(bad)
push
xor
push
test
sbb
in
mov
aaa
mov
rcl
lahf
jnp
sub
out
push
aam
add
call
into
(bad)
and
cmp
adc
in
outs
push
pushf
dec
movs
pop
cmp
ss
hlt
adc
mov
sbb
fistp
sahf
mov
into
and
ss
cld
xor
lds
and
dec
inc
out
jns
test
sar
dec
pop
out
sub
xchg
and
sbb
neg
stc
mov
pop
out
pusha
xor
js
repz
std
jmp
mov
jmp
mov
(bad)
mov
test
xor
inc
cmp
sub
jle
pop
dec
adc
and
mov
ret
fwait
pop
mov
cmp
xor
mov
xor
adc
aaa
ja
and
xor
call
(bad)
sub
out
xchg
xor
xor
test
(bad)
sbb
jns
xor
movs
adc
cmp
jmp
test
adc
scas
imul
or
and
out
icebp
cmp
movs
std
push
mov
leave
mov
ret
add
test
add
fidivr
ins
imul
imul
or
ja
test
leave
pop
(bad)
nop
add
sbb
xor
aam
loop
add
popa
mov
cmps
sub
pop
or
mov
push
mul
and
pusha
push
js
and
daa
or
or
push
adc
mov
cwde
sbb
add
mov
cmps
ret
jmp
repz
fstp
out
mov
rcr
movs
scas
imul
jo
daa
and
add
mul
adc
(bad)
je
dec
fnstcw
cli
jle
inc
bound
test
push
lock
inc
ins
int
jmp
inc
cmps
dec
mov
mov
pop
in
int3
jge
xchg
jecxz
(bad)
sub
mov
es
pop
inc
cmps
jnp
es
aas
ins
into
sbb
in
mov
in
shl
jge
or
add
cmps
jnp
and
imul
stos
in
stc
mov
adc
mov
mov
dec
push
ja
arpl
fadd
push
test
mov
or
jae
lock
loope
sbb
fdiv
cmc
mov
mov
sahf
jbe
pop
sub
jl
and
jnp
or
xchg
or
or
out
xchg
ds
adc
adc
dec
dec
lods
test
mov
ja
mov
sbb
arpl
add
ret
and
ins
loopne
xor
and
clc
test
ds
or
icebp
push
adc
push
test
and
xor
pavgb
popa
outs
mov
sub
fcomp
rol
jno
mov
mov
dec
jg
in
into
std
imul
jecxz
inc
push
push
pop
sbb
gs
adc
fs
mov
push
and
sub
sbb
xor
inc
pusha
out
sbb
sub
test
mov
popa
call
imul
retf
dec
sub
push
or
int3
scas
mov
repz
repz
sbb
sbb
retf
loope
sbb
push
push
cmps
fwait
and
rcr
leave
dec
adc
pop
adc
inc
pop
mov
add
sub
cli
mov
aas
loopne
inc
iret
ins
inc
mov
scas
idiv
inc
popa
mov
stos
push
cs
xchg
cwde
mov
and
pop
push
lock
ja
push
jl
or
out
jns
mov
xor
pushf
lock
mov
mov
cmp
mov
inc
in
or
ficom
pop
call
ss
push
or
and
dec
test
cli
mov
xor
out
jb
scas
sbb
and
jge
xor
mov
pusha
mov
add
fbld
xchg
and
push
jnp
or
addr16
lock
mov
leave
cmps
je
jne
call
cwde
push
sbb
adc
and
push
addr16
inc
sbb
int
stc
pop
(bad)
cs
mov
sub
dec
pcmpgtd
cld
sub
cld
retf
and
aaa
pop
(bad)
in
cmps
xor
add
add
stc
fdivp
clc
sbb
add
fst
call
stc
or
jecxz
add
aaa
sbb
fcmovnb
fidivr
aas
sub
daa
mov
mov
out
int
aas
sub
out
sub
and
dec
cs
adc
popa
push
aaa
in
sub
xlat
mov
push
dec
dec
xor
aaa
gs
inc
add
rcr
sbb
mov
jge
xchg
jecxz
mov
icebp
cld
sbb
adc
div
mov
and
pop
pop
dec
cmp
jmp
jb
aam
sub
repnz
es
sbb
and
or
jg
aad
fsub
inc
gs
gs
inc
outs
ins
outs
jb
add
push
gs
gs
jae
inc
popa
jo
jne
add
jmp
cld
in
push
sti
adc
dec
sub
fadd
fnstsw
xor
ds
xchg
jp
mov
outs
xchg
sbb
fcmovnb
sahf
cmp
pop
lahf
mov
mov
shl
sbb
jb
mov
jo
out
fisttp
scas
cwde
ret
ins
call
or
icebp
in
sbb
cmp
sub
adc
and
jmp
ds
lds
and
pusha
mov
xchg
jle
mov
mov
lahf
(bad)
loopne
fadd
scas
adc
iret
push
dec
xchg
(bad)
fstp
cmps
popa
dec
cmp
ficom
pop
sbb
add
adc
cmp
pop
dec
jg
stos
mov
dec
mov
in
add
push
gs
ins
gs
push
add
je
stc
jmp
add
dec
gs
jo
gs
ins
ins
outs
arpl
jmp
add
ins
imul
ins
push
jb
jo
jb
jns
add
inc
gs
push
dec
outs
outs
add
inc
and
fisttp
int3
pusha
mov
push
mov
pushf
lea
jmp
add
dec
outs
je
jb
outs
arpl
fs
arpl
ins
outs
je
add
push
gs
jne
jae
jb
push
xor
jmp
shl
seto
xor
mov
pushf
mov
call
in
call
pop
mov
lahf
cmps
cmp
sbb
mov
fcomp
scas
xchg
(bad)
cmp
mov
bound
xchg
int3
add
mov
call
dec
loopne
pop
es
imul
stos
aam
rcr
xchg
loopne
pop
push
mov
aam
add
out
xchg
mov
loopne
pop
(bad)
mov
aam
mov
mov
mov
loopne
pop
sub
es
push
pop
sbb
hlt
pop
shl
pop
mov
pushf
mov
pop
xchg
rcr
je
sbb
add
out
xchg
add
ss
and
fdiv
mov
mov
loopne
pop
hlt
mov
aam
es
xor
lock
es
xor
pop
pop
mov
mov
lock
adc
push
mov
loopne
pop
pop
mov
mov
aam
push
pop
and
or
mov
mov
es
push
mov
loopne
pop
adc
in
hlt
les
aam
mov
xor
jb
or
pop
and
push
mov
loopne
pop
retf
aam
mov
mov
aam
or
mov
aam
cmp
push
xchg
mov
fadd
lahf
xchg
and
pop
js
pop
mov
loopne
pop
and
pop
rol
mov
pushf
mov
jb
dec
push
pop
and
xor
mov
aam
fcomp
test
mov
and
and
xchg
pop
aam
sub
xor
adc
mov
aam
mov
sahf
xchg
jp
rcr
in
pop
ltr
stos
loopne
pop
mov
outs
fmul
jl
js
inc
mov
loopne
pop
adc
pop
into
xchg
mov
daa
hlt
mov
out
pusha
lahf
dec
pop
push
mov
mov
adc
lahf
test
test
xchg
pop
popf
xchg
pop
xor
pop
adc
or
nop
mov
lahf
jo
push
lahf
pusha
pop
push
xchg
sub
cld
lahf
push
pop
(bad)
mov
lahf
loopne
into
pop
(bad)
mov
aam
add
cmp
cs
fcom
dec
jle
data16
rcr
pop
lods
mov
aam
call
mov
loopne
pop
cs
aam
jbe
xchg
loopne
pop
aam
enter
pop
loop
push
mov
loopne
add
adc
clc
lahf
enter
mov
sbb
sub
pop
lahf
aam
cmps
cld
aaa
aas
lahf
mov
ins
cmp
jl
pop
mov
loopne
pop
adc
and
pop
pusha
xchg
mov
loopne
pop
in
mov
aam
ficomp
fadd
mov
je
aam
sub
xchg
sbb
sbb
repnz
aam
mov
mov
sbb
mov
aam
sbb
push
xchg
mov
loopne
pop
(bad)
mov
aam
mov
xchg
js
or
xchg
mov
loopne
pop
in
mov
aam
xor
and
inc
mov
loopne
and
mov
(bad)
pop
inc
adc
inc
mov
aam
js
push
xor
xchg
mov
lahf
enter
lock
mov
push
scas
pop
add
add
rol
loopne
movs
aam
pushf
and
pop
je
pop
mov
loopne
pop
push
mov
shl
xchg
xchg
jle
mov
fadd
pop
in
in
xchg
pusha
xchg
pop
mov
pop
sahf
mov
dec
ss
jl
mov
mov
cmps
mov
fcomp
adc
xchg
xor
cli
dec
xchg
mov
ds
call
push
mov
xor
xchg
push
scas
xor
nop
mul
and
mov
aam
leave
pop
clc
xchg
mov
loopne
pop
hlt
mov
aam
jmp
mov
loopne
pop
adc
pop
or
or
mov
aam
cmp
cmp
cs
push
mov
aam
pusha
pop
pop
xchg
pop
loopne
pop
inc
mov
aam
popw
ins
xor
mov
fadd
icebp
pop
out
push
aam
daa
pop
sub
bound
xchg
int
test
pop
fiadd
in
pop
sbb
or
pusha
xchg
aam
int3
mov
test
fcomp
pop
lds
adc
adc
pop
jne
ins
mov
retf
xchg
and
rcl
(bad)
loop
and
xchg
xchg
std
repz
test
movs
cmps
mov
fwait
and
inc
mov
add
loopne
add
or
fst
(bad)
fimul
bound
fwait
mov
aaa
in
xor
mov
dec
dec
jnp
push
sbb
mov
aam
in
cmp
call
hlt
(bad)
loope
mov
stc
neg
les
mov
in
les
repnz
call
(bad)
in
ins
xchg
out
fcmovnu
hlt
jecxz
repz
mov
jmp
in
mov
imul
mov
fmul
dec
sti
(bad)
xlat
into
and
cmp
lds
ret
outs
add
mov
pop
call
and
sub
arpl
fs
out
mov
hlt
jne
cmp
rcr
or
in
fcomi
sti
cmp
loop
or
sbb
aam
hlt
outs
xchg
adc
cmp
jecxz
idiv
mov
and
jecxz
in
into
inc
lock
aad
outs
out
(bad)
sub
(bad)
(bad)
out
dec
ficom
outs
stos
sahf
(bad)
repnz
sti
test
in
xor
dec
(bad)
xor
lds
ret
repnz
xlat
inc
pop
push
push
mov
fs
push
(bad)
adc
(bad)
push
or
and
je
add
lods
sub
dec
scas
shr
dec
not
inc
(bad)
iret
sti
aad
push
inc
in
aaa
xchg
aam
fsubr
idiv
mov
scas
loope
mov
das
iret
xchg
sahf
add
call
call
rol
mov
add
push
fist
hlt
mov
adc
ds
adc
ins
mov
mov
rol
sti
fisttp
add
fwait
shr
xor
call
hlt
retf
xchg
xchg
test
xchg
xor
movs
neg
repz
xchg
add
mov
xchg
jl
pop
ja
xchg
pop
movs
lahf
and
add
neg
test
lods
das
mov
xchg
xor
ret
ja
or
sar
movs
mov
jo
enter
neg
test
inc
aam
xchg
sbb
mov
or
test
mov
clc
jmp
dec
mov
cmc
push
xchg
sbb
or
or
js
sbb
xchg
mov
pusha
adc
lea
or
add
sub
pop
xchg
or
add
or
cmp
pop
push
mov
shl
outs
push
sub
call
mov
mov
xchg
push
hlt
test
scas
repnz
movs
movs
cmc
mov
add
sub
jg
movs
push
cmc
mov
cwde
pop
and
cs
call
sub
or
pop
push
jle
clc
jns
call
fdiv
dec
jg
(bad)
lahf
sbb
xchg
(bad)
out
test
ja
fild
mov
pushf
pop
enter
inc
pop
ja
inc
inc
mov
(bad)
mov
lahf
or
adc
jnp
clc
outs
mov
out
sbb
bnd
clc
mov
aaa
dec
jae
xchg
xlat
and
cwde
movs
mov
mov
(bad)
sub
cmps
test
xchg
sub
aas
cwde
inc
push
pop
jbe
xor
dec
ins
push
enter
js
cmps
push
cmc
mul
movs
or
aad
enter
jp
stc
xrelease
dec
imul
lock
pop
jo
and
xchg
mov
cmps
mov
out
jle
mov
movs
call
(bad)
ins
ja
ja
ins
and
and
dec
and
cmp
test
mov
movs
shl
mov
movs
mov
js
xchg
popa
mov
lds
push
js
xchg
rcl
mov
mov
pop
push
les
adc
jnp
sbb
jno
das
mov
mov
mov
add
test
and
hlt
push
scas
adc
dec
adc
xor
movs
inc
push
dec
in
mov
sahf
inc
sub
retf
sbb
mov
enter
add
sub
shr
sub
in
xor
in
js
pop
mov
(bad)
add
icebp
jecxz
push
adc
xchg
adc
cmps
out
enter
adc
loope
in
cmp
call
out
xchg
jge
dec
lock
and
sbb
(bad)
jg
push
xchg
sub
mov
int3
call
iret
mov
mov
push
js
cdq
test
or
jge
outs
gs
and
(bad)
(bad)
jp
outs
add
repz
aad
es
add
enter
sar
jbe
add
xor
xchg
enter
sbb
add
xchg
daa
js
cmp
data16
hlt
call
and
loop
bound
leave
push
jg
or
sub
dec
xchg
cmp
cli
mov
hlt
outs
mov
jle
aas
sbb
div
mov
cld
(bad)
or
shl
test
sub
add
je
mov
and
dec
sub
push
xor
stc
cli
pop
enter
jge
xor
cmp
pop
gs
aad
leave
sti
pop
xchg
jae
pop
xchg
ret
call
push
lods
fsub
push
mov
es
jns
sbb
jmp
cli
in
idiv
add
js
pop
fadd
lahf
enter
mov
adc
mov
aam
sar
and
xchg
push
and
push
pop
sub
xor
mov
push
inc
xor
sahf
data16
pop
ss
call
pop
sub
cmp
mov
repz
mul
sub
push
jge
and
sub
and
inc
gs
jo
inc
inc
je
cmp
pop
lods
mov
xchg
vpslld
leave
jno
movs
ret
popa
cdq
scas
int3
cwde
cmp
jle
mov
(bad)
rcr
xchg
call
in
sahf
fwait
call
mov
xchg
iret
xchg
push
sti
scas
repz
xor
out
dec
adc
ins
jb
mov
rol
aam
xchg
pushf
fcmovb
jg
shl
popf
lds
sahf
sbb
aam
(bad)
ret
rol
call
mov
mov
xchg
(bad)
mov
lahf
stc
xor
es
add
imul
loop
out
mov
ror
fmul
cmps
leave
cmps
add
(bad)
aam
pushf
icebp
jge
adc
xor
inc
neg
popf
xchg
and
adc
in
fwait
xlat
cmp
dec
jbe
jle
mov
repz
inc
cmp
ret
(bad)
(bad)
call
shl
movs
mov
cs
fistp
mov
repnz
sahf
das
repz
xlat
(bad)
xlat
xor
(bad)
(bad)
mov
pop
and
mov
mov
fwait
add
mov
out
mov
rol
aam
mov
fstp
clc
push
div
cmp
rol
loope
call
into
mov
call
adc
xchg
test
sahf
mov
stc
jecxz
inc
cmps
popf
call
in
fcomp
adc
fild
add
adc
out
aaa
dec
out
and
and
and
adc
inc
adc
repz
pusha
or
and
out
fdivr
std
or
inc
jp
div
movs
cwde
fcmovnbe
rcl
loopne
xor
inc
cdq
test
sub
dec
lahf
ror
xlat
pusha
adc
adc
mov
(bad)
cmp
or
out
aam
test
icebp
xor
cmp
(bad)
(bad)
test
sti
call
(bad)
stc
repnz
(bad)
in
(bad)
jle
jno
(bad)
repnz
sub
cmp
outs
icebp
ss
test
fcmovnb
scas
loopne
mov
push
push
lods
xchg
jno
out
stc
(bad)
in
mov
(bad)
aad
xor
icebp
xor
xor
or
add
loope
fadd
or
aad
xor
rol
jno
cmp
dec
mov
test
mov
xchg
repz
cld
mov
push
ss
sub
dec
adc
sahf
pushf
mul
mov
test
(bad)
ss
or
test
loopne
(bad)
(bad)
mov
je
add
jmp
fcomp
pop
jle
sbb
xor
mov
fwait
(bad)
(bad)
repnz
popf
adc
jl
mov
push
add
aad
dec
pop
fbld
push
dec
enter
out
repnz
iret
lahf
out
lahf
xchg
mov
pushf
mov
dec
or
in
mov
lea
mov
cmp
pop
(bad)
dec
(bad)
in
fucomip
ss
xchg
push
jmp
loopne
test
cmps
test
dec
push
xchg
cmc
cli
in
mov
or
adc
scas
mov
aad
shl
mov
(bad)
test
fisubr
xchg
test
hlt
call
add
inc
popf
pop
loop
(bad)
aad
in
ret
enter
mov
mov
adc
cmps
(bad)
rcl
rcl
mov
out
les
mov
rcr
out
popf
add
stc
add
fsubr
sbb
fisub
loop
or
sbb
mov
mov
fild
xchg
arpl
mov
push
mov
adc
xchg
cli
dec
icebp
repnz
fsub
pushf
pop
mov
loopne
push
out
adc
cmp
xor
neg
loope
and
jmp
mov
or
push
mov
pop
aam
jne
jp
outs
mov
in
xchg
call
aam
fistp
les
jecxz
jmp
xor
xchg
mov
loopne
pop
je
jns
ins
outs
in
xchg
xchg
mov
aam
ret
pop
clc
xchg
mov
loopne
pop
sbb
pop
das
xchg
pop
loopne
pop
dec
mov
aam
xchg
fsubr
call
loopne
pop
fbstp
pop
jecxz
push
mov
loopne
pop
or
pop
pop
xchg
ja
jg
arpl
aam
mov
mov
loopne
pop
cmc
mov
aam
and
add
xor
push
mov
aam
sbb
xchg
and
lods
aam
ret
xchg
mov
loopne
pop
sbb
pop
sub
push
mov
loopne
pop
jge
jo
xchg
sbb
call
scas
loopne
pop
(bad)
mov
aam
in
jmp
loopne
pop
cmp
pop
dec
xchg
addr16
and
mov
fadd
hlt
pop
out
jmp
cmp
(bad)
test
aam
out
scas
movs
mov
icebp
xor
cmp
or
out
xchg
xchg
(bad)
push
mov
(bad)
aam
mul
out
outs
outs
enter
push
lahf
cmc
std
(bad)
fs
push
lea
dec
and
xchg
cmp
inc
out
stos
rcr
into
(bad)
scas
lds
test
aad
ret
aaa
pushf
aaa
aas
adc
loope
movs
xor
and
jae
adc
jno
dec
inc
pop
xchg
imul
popa
xchg
xchg
push
pop
adc
xchg
xor
fisub
(bad)
mov
or
sub
out
pop
jbe
aaa
movs
push
out
sbb
fisub
xchg
lea
lahf
jle
into
add
ja
jmp
ins
cmp
xchg
mov
out
(bad)
jmp
aam
push
and
aam
shl
pusha
cmp
ds
mov
mov
xor
scas
rcl
movs
pop
cmps
pop
and
mov
xchg
stc
call
fisubr
stos
fist
icebp
outs
rol
test
mov
xchg
inc
push
sub
inc
and
sub
aam
inc
push
inc
push
push
dec
mov
sub
outs
push
popa
test
es
jg
cmp
call
scas
inc
ins
cmps
pop
enter
sub
mov
xchg
push
dec
push
jge
je
je
cmps
pop
das
shr
sbb
add
sub
les
push
retf
call
and
jbe
pop
mov
pop
daa
sub
ds
mov
(bad)
aad
rcl
shl
cwde
(bad)
fstp
fcmovnu
fxch
cwde
mov
rcl
iret
into
div
cmc
hlt
repz
icebp
add
(bad)
std
cld
sti
cli
test
call
jecxz
loope
out
out
test
cmps
sub
mov
mov
mov
inc
xor
pop
pop
sti
repz
call
aad
cmps
in
push
pop
rcr
stos
adc
pop
cmps
add
push
fs
mov
push
daa
loopne
retf
iret
rcr
mov
test
js
inc
cld
pop
leave
mov
(bad)
movs
mov
in
out
hlt
inc
mov
xor
mov
leave
pop
push
hlt
stos
ja
test
test
(bad)
icebp
popf
outs
push
fwait
clc
cmps
sub
push
xor
push
sahf
push
fsubr
gs
imul
xor
inc
(bad)
jns
sub
sub
(bad)
xor
test
call
sahf
pop
call
and
pop
add
mov
push
or
jno
push
push
fs
xchg
outs
sub
cmp
mov
and
nop
ret
or
xor
dec
xor
or
xchg
test
sub
mov
jne
mov
mov
inc
popa
adc
xchg
enter
aam
xchg
es
pop
aad
dec
push
or
and
inc
js
clc
inc
popf
(bad)
(bad)
lds
mov
jb
fcmovnbe
cwde
sub
jbe
imul
test
pop
repnz
es
dec
das
adc
jmp
lahf
sbb
add
inc
pop
cmp
sub
aam
(bad)
cmp
or
call
(bad)
mov
sbb
icebp
jecxz
sbb
ror
cmc
push
test
and
adc
enter
mov
rcl
rol
repz
mov
add
gs
push
xor
pop
pushf
mov
pop
inc
daa
mov
shl
ficomp
shl
in
in
xor
repnz
std
inc
pop
pop
fdivr
add
stos
test
push
or
fxtract
repnz
xchg
movs
cmps
leave
xor
mov
cdq
out
loop
jecxz
shl
ror
push
shl
cmc
add
imul
xor
mov
add
mov
stos
lahf
call
addr16
jp
aaa
pop
mov
aad
sub
aam
push
mov
test
test
ja
fisttp
dec
jp
dec
in
lock
xlat
lock
stc
loopne
aam
bnd
push
aad
add
xchg
dec
repnz
inc
pop
xor
rol
fsubr
xor
outs
mov
add
inc
aaa
mov
mov
hlt
(bad)
push
nop
xor
test
rol
lds
or
lock
(bad)
shl
or
push
mov
lds
gs
and
push
sub
mov
mov
push
lea
imul
cmc
pop
push
es
and
mov
fcmovnbe
and
call
xchg
inc
and
call
mov
xchg
mov
dec
out
push
jb
sbb
sbb
call
scas
mov
lods
xchg
mov
aam
fisubr
and
jmp
pop
ror
leave
outs
call
sbb
inc
clc
sbb
xchg
cmc
std
loopne
mov
mov
imul
movs
aaa
xchg
scas
repz
sbb
and
popf
out
outs
(bad)
mov
xchg
leave
fcom
mul
js
adc
sbb
adc
xchg
mov
fdiv
mov
mov
jmp
and
cmc
push
mov
pop
test
inc
mov
push
push
sub
add
cmp
lods
sub
jnp
pop
push
xchg
or
popa
mov
pusha
xchg
push
loopne
pop
mov
enter
lods
dec
sahf
jns
leave
std
jmp
and
inc
and
into
dec
or
outs
dec
and
jbe
gs
dec
cmp
pop
xchg
(bad)
pop
fisubr
fwait
loope
cs
xchg
xor
nop
cmps
and
popf
pop
pushf
fadd
jge
sub
call
test
pushf
sub
inc
add
cmps
fcom
mov
push
xchg
out
sbb
bound
iret
in
xchg
mov
loopne
xchg
aaa
int3
into
lods
xchg
adc
leave
xchg
mov
mov
mov
hlt
(bad)
repnz
mov
fmul
mov
ficom
sbb
mov
lods
mov
int3
and
fs
jmp
push
pop
movs
cmp
mov
jecxz
repnz
fwait
rcr
out
or
(bad)
xchg
sub
xchg
and
and
add
push
sub
into
cli
adc
mov
mov
(bad)
xchg
mov
mov
pop
dec
ret
xchg
inc
in
iret
mov
or
jle
pop
js
and
mov
pop
popf
mov
sub
in
add
xchg
call
pop
mov
dec
popf
add
mov
sbb
pop
les
or
mov
out
pavgw
or
nop
adc
leave
adc
jne
pushf
mov
push
rcl
fadd
jp
js
mov
inc
mov
mov
sbb
nop
lock
pusha
rcl
data16
xlat
adc
pop
jo
nop
clc
addr16
adc
into
xchg
mov
mov
add
cmps
ror
scas
call
lahf
enter
pop
lahf
mov
scas
or
lahf
sub
pop
mov
pushf
cmc
xchg
xor
ja
adc
fisubr
mov
mov
shl
mov
mov
enter
mov
scas
xchg
push
pop
fbld
lock
mov
aam
xchg
sbb
cdq
mov
rcl
pusha
mov
call
bound
mov
mov
js
lods
sub
pop
fcom
sahf
cmp
pop
fwait
mov
mov
add
pushf
mov
pop
mov
fsubr
js
popf
adc
test
nop
call
test
aam
call
stos
(bad)
push
test
xchg
push
push
cld
mov
fisttp
jno
loopne
push
and
sbb
sahf
loop
retf
cmps
scas
mov
pop
xchg
mov
pop
mov
popf
pop
mov
mov
lds
or
mov
movs
mov
inc
ja
int
adc
int3
sahf
jecxz
ret
(bad)
adc
adc
(bad)
call
(bad)
in
mov
dec
loope
or
adc
std
or
mov
or
or
loope
mov
sbb
push
mov
mov
nop
es
add
test
pop
mov
aad
jno
jmp
xchg
push
cmp
mov
or
xchg
cmp
cmp
scas
mov
adc
ins
sbb
daa
sub
retf
lock
adc
mov
data16
icebp
sub
pop
xor
cdq
sbb
test
fstp
test
push
ss
cmps
sub
adc
scas
xchg
mov
add
jecxz
push
imul
lds
aaa
mov
stos
sub
fst
jmp
test
lods
rcr
nop
hlt
xchg
in
fsub
sbb
jo
xor
xor
sbb
xor
icebp
mov
mov
cmps
jl
bswap
call
or
xchg
xchg
push
cmps
loopne
xor
nop
es
push
out
add
push
addr16
add
mov
test
xchg
test
xchg
shr
mov
fnstcw
adc
add
xor
call
sub
call
or
cwde
xchg
xchg
pop
pusha
adc
xor
mov
xor
dec
ja
add
and
add
cwde
pop
xor
mov
push
push
or
mov
add
sbb
(bad)
lods
push
or
adc
mov
nop
rcl
in
enter
nop
mov
or
aad
ja
or
cwde
jno
or
pop
adc
push
stos
mov
push
jo
repz
xchg
jmp
int3
aaa
jo
dec
aad
ja
ss
adc
ss
sbb
or
js
loopne
add
js
pop
rcl
sahf
xchg
test
js
pop
mov
sub
mov
add
test
js
call
nop
mov
sub
pop
cwde
outs
mov
shr
sub
jo
into
sub
xor
fsubr
pop
xor
imul
and
ins
shl
mov
push
mov
test
push
test
mov
arpl
aad
es
push
stos
cmps
push
js
mov
sub
push
mov
mov
pop
push
mov
mov
daa
test
in
push
push
fcom
push
mov
addr16
(bad)
jmp
push
adc
push
fnstenv
mov
push
pop
xchg
inc
mov
dec
stc
(bad)
or
aad
jbe
mov
scas
js
pusha
fucom
mov
ins
lds
add
sbb
push
sub
test
or
sbb
xlat
jno
jo
xchg
repnz
push
mov
movs
adc
sub
or
sbb
push
push
lock
js
fist
pop
push
lahf
scas
sbb
mov
pop
sub
cmps
push
xchg
mov
adc
mov
lock
pop
arpl
lahf
sub
mov
in
in
cmps
test
mov
bound
push
mov
out
xchg
test
mov
inc
adc
cld
add
jb
push
shr
xchg
iret
cmp
and
dec
enter
adc
cmp
mov
sbb
std
jae
enter
xor
ror
jns
add
int3
cmp
mov
add
xchg
xchg
outs
push
enter
adc
mov
mov
pop
shl
pop
out
shl
in
xchg
fwait
inc
lods
imul
int3
dec
xchg
enter
pop
cmps
mov
xchg
or
test
adc
call
(bad)
fst
mov
jae
out
mov
sub
push
cmps
jno
mov
push
leave
fsub
push
xchg
pop
mov
mov
add
xchg
mov
and
dec
dec
mov
xchg
js
xchg
dec
xor
jl
and
or
jns
mov
adc
jbe
pop
and
xor
xchg
out
nop
dec
fdivr
push
test
xchg
lock
cld
push
jmp
in
mov
aad
mov
mov
sbb
psubq
mov
clc
adc
sbb
sub
mov
loop
or
in
pop
clc
test
stos
aam
sbb
xchg
mov
hlt
jbe
div
test
cmp
xlat
pushf
cmp
lahf
call
retf
mov
cld
mov
clc
int3
xchg
repz
cmp
sti
std
jg
cmps
shr
jmp
sahf
dec
push
cmp
jne
and
jo
stos
cld
dec
(bad)
mov
fmul
cmp
mov
mov
xlat
das
mov
and
daa
pusha
jno
add
call
loopne
sbb
and
das
out
add
xor
jno
shr
cmps
jae
push
push
mov
pop
nop
push
mov
call
xchg
or
pop
ficom
sub
xchg
pusha
jl
das
and
dec
sbb
adc
pop
out
add
pop
pop
sub
in
or
xchg
nop
add
xchg
dec
nop
mov
jae
movs
xchg
mov
fist
test
mov
movs
xchg
js
pop
xchg
nop
add
pop
mov
das
pop
xchg
popf
xchg
xor
shl
lods
add
ret
fdivr
pop
dec
xchg
iret
repz
jge
sbb
jb
dec
push
xchg
push
test
mov
push
or
xchg
push
lahf
cmp
sub
push
xor
pusha
cwde
sub
scas
call
xor
mov
inc
cdq
push
enter
js
out
addr16
xchg
mov
xor
mov
xchg
add
mov
xchg
fmul
test
sbb
cwde
sub
sbb
sbb
test
scas
mov
icebp
xor
or
xchg
call
inc
dec
cmp
sub
xchg
and
gs
sbb
sbb
std
or
cmp
xchg
xor
test
lea
out
clc
fidivr
mov
aam
pop
or
mov
je
mov
mov
pop
lods
mov
fmul
sub
test
sub
lea
ficom
mov
fistp
adc
(bad)
push
pop
xchg
scas
adc
sub
xchg
jno
ror
daa
fnstsw
sub
jg
push
cmp
cmps
clc
scas
sbb
and
mov
gs
leave
in
pop
js
fsub
mov
or
inc
xchg
cmp
mov
mov
xchg
ror
ficom
push
stc
add
jbe
push
mov
pop
and
bound
nop
cmp
sbb
jg
pop
aad
and
cs
test
aam
pop
pop
sbb
test
rcr
inc
add
je
retf
mov
xchg
ret
xor
shr
xchg
shl
nop
aam
retf
mov
mov
out
and
sbb
rcr
inc
scas
cmp
dec
adc
(bad)
in
js
adc
test
into
shl
mov
shr
out
ret
in
outs
dec
mov
pop
out
xchg
cmps
enter
ror
xchg
xchg
das
test
lock
cmp
or
cdq
ret
repnz
mov
(bad)
xchg
xor
outs
push
loop
scas
js
js
mov
cwde
pop
jnp
test
xchg
or
push
frstor
pop
cmps
call
jl
lods
mov
dec
aaa
ror
inc
xchg
push
imul
js
test
adc
je
in
add
icebp
enter
icebp
adc
mov
sbb
call
push
sub
mov
sar
sbb
mov
iret
test
xchg
xor
pop
int
sbb
call
in
add
mov
sbb
in
mov
retf
push
xchg
jl
inc
test
jl
fcomp
xchg
or
in
sbb
(bad)
clc
pusha
les
loop
pop
or
pop
or
not
lods
push
gs
cmps
mov
sbb
pop
xchg
xor
aam
push
adc
test
sbb
mov
xchg
cmp
(bad)
daa
je
sub
pop
sbb
sub
dec
or
cmp
mov
aaa
repz
ss
shr
rcr
js
xchg
and
jo
aad
ja
movs
xor
cmp
pop
xchg
jbe
mov
pop
xchg
xchg
pop
lahf
or
mov
lock
sahf
ja
cmp
xor
(bad)
sahf
test
test
jl
(bad)
pop
xor
aad
jp
fcomp
xchg
pop
sbb
sbb
lds
test
(bad)
mov
out
dec
addr16
add
push
nop
lahf
aam
(bad)
pop
xchg
inc
mov
lahf
mov
rol
mov
aam
lea
test
mov
call
aam
dec
js
pusha
lahf
scas
pop
cmps
mov
fnsave
cdq
xor
mov
movs
xchg
push
mov
lahf
mov
inc
push
mov
pop
mov
loopne
or
xchg
fiadd
fadd
sbb
xchg
imul
outs
mov
aam
push
pop
pop
xchg
mov
loopne
pop
js
pop
xlat
sbb
push
ror
(bad)
pop
mov
cmps
xor
mov
test
sub
popf
lea
mov
sti
(bad)
test
xchg
jmp
rcl
fmul
call
push
xchg
mov
lea
ror
cld
les
sbb
call
fimul
mov
test
enter
pop
xchg
stc
fild
cmp
pop
ds
cdq
jns
dec
cmp
jmp
push
in
out
(bad)
ja
retf
xchg
cmp
inc
cwde
pop
test
pushf
cwde
pop
lods
ins
xchg
push
movs
gs
jmp
fsubr
call
in
adc
fldcw
sub
js
test
mov
jne
inc
mov
cwde
clc
or
cmp
or
xor
cmp
or
mov
xchg
push
movs
fs
cwde
pop
lods
ins
xchg
push
mov
xor
adc
and
sbb
adc
and
rcr
test
jge
dec
mov
add
xor
add
cmp
xor
add
xchg
cwde
push
cmps
call
cwde
push
cmps
addr16
pop
stos
imul
(bad)
es
fisubr
jmp
fld
jmp
cwde
jbe
inc
mov
cwde
ja
inc
mov
cwde
test
cmp
or
aaa
cwde
test
retf
sahf
cwde
pop
scas
outs
xchg
push
mov
scas
mov
fisubr
cwde
out
adc
and
pop
fild
cwde
out
adc
and
mov
mov
add
(bad)
cwde
dec
mov
add
push
cwde
into
xor
add
aas
dec
xchg
iret
xor
add
ds
pop
cwde
inc
sbb
mov
fmul
adc
and
(bad)
cld
xchg
pop
push
push
in
and
cdq
sbb
mov
loopne
or
js
sub
sub
xchg
test
daa
rcr
rcr
cmp
fmul
test
pop
inc
xchg
sbb
fadd
sahf
sub
xchg
sbb
movs
test
ror
mov
sub
adc
jae
xor
xchg
movs
call
mov
push
imul
iret
dec
imul
scas
lahf
js
pushf
xchg
cmp
pushf
inc
pop
and
mov
xchg
sbb
nop
(bad)
pushf
jne
inc
je
les
sub
(bad)
push
mov
outs
pop
xchg
jnp
dec
push
mov
in
xchg
sbb
xchg
fs
hlt
rol
pop
aam
xchg
iret
loopne
mov
xor
pushf
pusha
fwait
adc
xchg
mov
xchg
sahf
xchg
popf
xchg
xchg
pushf
xchg
fwait
xchg
call
sbb
fsub
pop
pop
mov
jl
mov
dec
pop
lods
mov
aam
ins
pop
xchg
xchg
mov
loopne
pop
mov
ss
jbe
xchg
inc
pop
cmps
mov
aam
popw
sahf
xchg
mov
loopne
pop
mov
jle
mov
dec
pop
scas
mov
aam
outs
pop
xchg
xchg
mov
loopne
pop
mov
xor
bnd
add
pop
mov
bound
call
pop
mov
jp
mov
dec
pop
stos
mov
aam
push
xchg
xchg
mov
loopne
pop
mov
aaa
aam
ja
xchg
inc
pop
cmps
mov
aam
addr16
lahf
xchg
mov
loopne
pop
mov
jg
pop
dec
pop
scas
mov
aam
outs
pop
xchg
xchg
mov
loopne
pop
mov
xor
repz
add
pop
mov
arpl
fwait
xchg
mov
loopne
pop
mov
jnp
mov
dec
pop
stos
mov
aam
imul
rcl
mov
xchg
jg
inc
mov
xchg
jg
gs
xchg
jg
pop
mov
xchg
jg
jge
pop
mov
jg
or
jg
dec
mov
xchg
jg
ins
mov
xchg
mov
xchg
pop
mov
jg
xor
xchg
pop
mov
jg
add
xchg
pop
mov
jg
and
xchg
pop
mov
jg
sbb
xchg
pop
mov
jg
cmp
xchg
pop
mov
jg
or
xchg
pop
mov
jg
sub
xchg
pop
ror
pop
clc
xchg
pop
call
rcr
xchg
pop
lock
aam
mov
hlt
xchg
in
xchg
adc
push
mov
xor
int3
mov
test
pop
pop
nop
pusha
lahf
xchg
pop
test
pop
xchg
xchg
pop
xor
xchg
xchg
cmps
sbb
pop
test
pop
add
xchg
xchg
xchg
loopne
je
out
stos
rcr
fwait
call
inc
pop
call
xor
outs
(bad)
outs
lea
mov
cwde
inc
push
xchg
data16
and
add
lds
xchg
je
in
sbb
and
rcl
sbb
mov
icebp
mov
or
fst
sbb
call
xchg
mov
cmps
or
mov
fsub
cmp
clc
js
mov
in
xchg
fdivr
pushf
xor
add
sub
fadd
clc
xor
lds
in
cmp
iret
mov
adc
int3
je
xor
or
pushf
xor
lds
push
cdq
stc
mov
lds
cld
fld
daa
fdivr
mov
loopne
pop
cmc
mov
aam
xor
mov
xchg
inc
jl
and
jecxz
call
add
ss
das
jl
scas
test
mov
loopne
pop
pop
mov
and
xchg
mov
loopne
pop
xchg
mov
aam
mov
nop
xchg
add
or
cmp
add
dec
lahf
mov
lahf
jo
in
cmps
sub
cmp
cld
mov
in
loopne
push
xchg
jmp
cmp
and
add
and
and
and
movs
mov
ret
push
mov
mov
mov
sbb
add
mov
xchg
sbb
test
pop
xchg
rcl
mov
ficomp
fdiv
les
aad
stc
in
jecxz
call
and
ja
loop
out
aaa
mov
xlat
jae
test
rcl
pushf
push
shl
xchg
cmp
xchg
add
cld
jp
push
nop
dec
ret
xor
nop
or
mov
or
or
xchg
fsubr
sub
iret
mov
fsub
push
pop
dec
xchg
rcr
mov
jbe
or
lods
adc
nop
add
inc
add
pusha
sbb
inc
pop
push
pop
pop
movs
inc
cmps
ret
add
fimul
mov
pop
hlt
push
lahf
xor
jbe
dec
dec
loopne
lock
je
mov
les
(bad)
xor
jb
sbb
mov
je
icebp
aam
xchg
nop
jne
pop
shl
xchg
icebp
cmps
je
or
mov
out
pop
or
jo
popf
jmp
sti
not
into
sbb
mov
js
xor
jge
xchg
mov
and
and
sub
xor
mov
dec
push
pop
aam
add
repz
test
inc
mov
jbe
mov
sbb
adc
cmps
mov
je
lock
jmp
das
icebp
fadd
shr
and
movs
jecxz
enter
push
or
or
jmp
cmps
adc
or
and
retf
mov
mov
push
xchg
cmps
and
out
add
sub
mov
mov
loopne
pop
cmp
dec
cmps
loopne
push
mov
mov
sub
add
sub
inc
adc
push
pop
cmp
sbb
push
lods
lods
push
(bad)
je
mov
cmp
dec
add
lods
jo
rol
mov
jno
int3
mov
jp
adc
int3
call
cmp
cmp
pusha
jno
iret
sub
in
xchg
hlt
xchg
xchg
test
rep
cmp
addr16
repnz
rcl
test
push
dec
fdivrp
loopne
adc
call
push
push
fild
mov
inc
ins
nop
leave
inc
xor
retf
jae
in
cmp
and
hlt
adc
loopne
cld
loop
dec
fcmovnb
mov
in
pop
push
fmul
scas
aam
icebp
mov
lods
or
mov
sahf
sar
rcl
sbb
mov
aad
jle
mov
call
hlt
mov
mov
aad
arpl
mov
test
popf
push
xor
mov
int
enter
pop
cmp
pop
lea
fsub
mov
sub
adc
arpl
int
mov
les
repz
or
xor
inc
outs
xchg
lahf
(bad)
adc
aaa
test
add
cmps
lea
mov
adc
xchg
xlat
adc
or
cli
mov
jmp
pop
sbb
loopne
pop
jo
xlat
repnz
xor
movs
cmps
movs
mov
in
(bad)
test
(bad)
idiv
mov
adc
ins
push
push
into
xchg
ret
loope
mov
sub
lods
adc
cli
mov
test
imul
adc
in
jle
lea
cmp
sti
enter
add
test
mov
aad
sbb
into
das
sub
pop
fild
call
push
jp
xor
js
out
leave
aam
xor
fmul
adc
daa
push
std
or
xor
adc
jae
mov
inc
loopne
scas
lds
fucomip
loopne
xchg
sbb
(bad)
lods
mov
mov
jo
or
in
lock
(bad)
jbe
inc
fisub
xchg
inc
out
inc
fdiv
jg
mov
les
mul
lock
mov
out
adc
not
jmp
(bad)
xlat
call
out
jae
jg
mov
fcmove
mul
imul
mov
mov
call
lahf
cmp
mov
int3
fadd
fisubr
add
sbb
dec
adc
xor
adc
pop
pop
pop
or
and
lods
cmp
cwde
test
add
inc
xchg
out
mov
xchg
and
xchg
add
dec
out
push
sub
loop
clc
neg
ss
add
xchg
and
sub
fmul
je
loopne
retf
sbb
je
loopne
retf
dec
(bad)
cmp
mov
sbb
mov
inc
fwait
sub
or
mov
shl
add
bound
jb
aas
movs
sub
ret
and
mov
mov
rcl
aas
addr16
lahf
xor
lock
pusha
xchg
pop
ja
add
dec
jmp
jmp
shl
shl
jp
or
jmp
nop
ins
or
shl
add
sbb
xchg
push
pushf
mov
push
and
or
jp
pop
xchg
test
test
mov
adc
pop
or
jbe
add
and
or
aam
jo
rcl
shl
sub
mov
data16
mov
adc
aad
int
mov
lea
or
fs
inc
xor
hlt
popa
jo
and
popa
xor
dec
into
iret
mov
dec
ffree
mov
or
mov
sbb
push
enter
or
test
pop
call
pop
mov
sti
iret
rcl
stos
leave
xchg
and
and
dec
test
xor
ss
cld
(bad)
js
xchg
mov
aam
pop
and
stos
xor
cmps
nop
mov
push
enter
mov
and
mov
and
out
mov
push
stos
push
or
push
hlt
adc
movs
lods
rcl
mov
dec
push
cli
pushf
pop
pop
mov
and
and
rcl
dec
pop
test
cmps
add
shr
lock
push
sti
hlt
mov
rcl
enter
add
push
adc
xlat
adc
in
add
mov
mov
cmp
sbb
iret
mov
mov
pop
out
push
push
sub
push
push
pushf
inc
lahf
mov
test
pusha
mov
mov
(bad)
stc
and
add
rcr
je
or
enter
sbb
lahf
xor
ss
enter
sub
ins
out
pop
mov
mov
sahf
cli
jecxz
jbe
imul
pop
fnstsw
mov
pusha
aas
jno
fild
adc
popa
mov
in
sbb
cmc
xor
pop
test
aam
sar
idiv
mov
shl
xor
dec
and
pop
push
cmp
adc
fisttp
imul
outs
dec
imul
les
out
mov
imul
call
cli
hlt
mov
cld
xchg
das
inc
lea
xor
xlat
fcom
popf
sbb
cmps
xchg
adc
test
xchg
fcom
push
sahf
test
pop
stos
mov
in
fld
in
cmc
out
jae
scas
ins
pop
aaa
sbb
les
and
clc
mov
call
setne
mov
adc
imul
or
pop
mov
xchg
fdiv
int
mov
xor
cld
pop
jnp
mov
aam
(bad)
imul
je
dec
inc
pop
pop
mov
fcmovu
in
call
shl
aaa
mov
xor
shl
movs
mov
cmp
mov
and
push
add
ins
pop
cmps
xchg
lahf
dec
mov
add
lds
add
add
retf
repnz
movd
cli
mov
loopne
enter
pop
arpl
pop
dec
call
(bad)
jne
fist
data16
clc
dec
(bad)
rcr
(bad)
mov
enter
ror
jle
push
aaa
mov
inc
rol
dec
les
pusha
nop
push
(bad)
loope
icebp
aad
cli
sub
(bad)
mov
ret
popf
mov
lahf
or
mov
sub
ins
and
cld
mov
pop
pushf
mov
mov
push
or
cmps
lahf
cli
cmc
lods
les
out
loop
mov
mov
in
push
dec
punpckhdq
and
xor
ss
(bad)
fadd
mov
sbb
mov
repz
repnz
and
sub
push
lods
(bad)
aad
adc
cmc
mov
aad
adc
repnz
cmc
in
js
stos
jge
icebp
mov
shl
scas
or
jno
scas
push
hlt
adc
mov
lahf
cld
out
xchg
sbb
pop
out
pusha
mov
sub
and
loop
push
(bad)
(bad)
cmp
mov
jecxz
xor
rcr
adc
sbb
mov
repz
xlat
call
sbb
shl
out
test
nop
mov
mov
mov
rcl
les
out
mov
fcom
lods
xchg
movs
loopne
int3
jmp
sub
in
test
cmps
cmc
aaa
outs
fwait
push
(bad)
shl
mov
mov
test
shl
adc
inc
in
or
in
pop
add
mov
and
leave
xlat
rcr
(bad)
xlat
inc
push
inc
xchg
push
call
mov
test
retf
(bad)
mov
movs
mov
js
ja
mov
int3
mov
(bad)
in
out
xor
fstp
test
cdq
and
(bad)
mov
sbb
mov
xchg
idiv
(bad)
push
jg
jle
inc
jns
jnp
mov
mov
shl
in
sahf
cmc
mov
push
in
div
movs
loopne
addr16
push
loope
(bad)
xor
into
mov
mov
ror
loop
xor
imul
aaa
mov
movs
clc
ins
leave
dec
ret
cs
jb
jne
clc
cmps
scas
cmp
lods
call
mov
mov
mov
mov
and
fiadd
ror
mov
mov
imul
std
cmp
mov
leave
xchg
adc
sti
fist
jge
(bad)
outs
jo
test
sub
and
sub
aam
mov
std
push
shl
(bad)
mov
not
mov
sub
push
adc
inc
mov
out
sbb
fstp
mov
cmp
(bad)
mov
dec
xchg
sahf
xor
mov
mov
mov
inc
xchg
jbe
dec
repnz
std
inc
in
loope
repnz
pop
jmp
(bad)
push
mov
test
popa
mov
dec
jmp
mov
and
push
mov
dec
cdq
sbb
fldl2t
pop
outs
fcom
mov
sahf
push
out
cli
pop
lahf
cmps
repnz
jl
lock
sti
stc
hlt
ror
lock
(bad)
pop
dec
cld
hlt
fistp
push
stos
sbb
xchg
push
sbb
in
adc
dec
mov
out
hlt
xor
idiv
mov
mov
movs
add
and
shl
test
call
repz
bound
or
mov
mov
adc
push
mov
scas
stos
xchg
retf
push
adc
pusha
mov
add
ror
mov
push
pop
(bad)
push
xchg
jno
sahf
mov
xchg
mov
pop
in
sbb
lock
mov
ficomp
xchg
push
mov
adc
xchg
(bad)
xchg
shl
shl
loopne
imul
add
xchg
xchg
sbb
shr
retf
cdq
movs
xchg
mov
mov
cmps
cld
xchg
mov
ins
ins
dec
mov
jo
jl
lds
adc
xchg
cmp
enter
mov
xchg
nop
enter
mov
inc
enter
mov
pop
pushf
out
add
cmps
xchg
cld
shl
add
mov
and
push
xchg
(bad)
into
ds
fdiv
xchg
xlat
retf
out
int3
enter
ret
test
(bad)
popa
loop
mov
jg
fs
jg
xchg
jnp
mov
lahf
cmps
mov
scas
fcmovbe
cld
fmul
nop
aam
(bad)
lds
jmp
cmp
push
mov
lahf
dec
push
pop
mov
repz
mov
push
mov
retf
hlt
shl
xchg
data16
adc
mov
push
outs
sub
mov
cmp
test
sahf
data16
test
xor
dec
pushf
or
xchg
test
pop
pusha
mov
in
aam
mov
fwait
test
aam
loopne
add
enter
dec
pushf
adc
xchg
aam
daa
test
fldcw
pop
fwait
cli
mov
test
cmp
fcomp
rcr
test
test
es
mov
aam
test
loopne
enter
pusha
mov
aam
xor
xor
cmc
nop
cdq
in
xor
(bad)
test
lods
pop
aam
fadd
stc
mov
adc
or
xor
pop
sub
jmp
mov
xchg
aam
je
fmul
enter
add
adc
mov
xchg
fcomp
test
or
or
or
mov
mov
in
mov
and
fldenv
pop
call
fdiv
fcomp
cmp
test
lods
push
xchg
fisub
dec
adc
iret
ror
push
push
nop
xchg
jg
lock
and
test
xor
add
call
pop
nop
add
jo
aad
jbe
mov
test
mov
test
or
mov
mov
test
test
test
mov
or
and
fadd
repz
rol
test
test
call
fadd
rol
mov
fsubr
cmps
test
cwde
aam
stc
ror
dec
aam
mov
jo
retf
add
aam
enter
das
enter
pusha
or
aam
movs
test
mov
or
mov
out
js
out
lahf
push
lock
xchg
xchg
lock
nop
xor
add
add
sbb
rol
cmps
test
or
pop
or
sbb
aam
xor
lea
outs
xchg
aam
cmp
test
adc
xchg
aam
or
test
sbb
jnp
push
adc
enter
je
dec
xor
enter
xor
nop
lea
nop
out
xchg
aam
je
push
or
jno
push
and
in
sub
call
test
inc
shl
js
cmp
jo
rcl
mov
shl
mov
sahf
ja
(bad)
add
test
sub
or
(bad)
cmp
cmp
lds
test
mov
add
int
xlat
aam
mov
sbb
enter
mov
mov
out
xchg
aam
je
gs
xlat
test
(bad)
rcr
fsubr
(bad)
ret
inc
push
ins
js
test
hlt
in
fcom
mov
test
xor
xor
add
or
xchg
aam
je
lea
fcom
mov
test
xor
ror
pop
test
rcr
enter
inc
test
enter
nop
repz
call
out
test
or
cwde
outs
mov
fadd
je
or
enter
je
mov
clc
xchg
les
xor
jbe
mov
xchg
aam
mov
mov
mov
in
ret
dec
aam
xor
pop
sbb
mov
leave
lods
call
call
xchg
lods
enter
je
mov
lock
push
or
dec
xchg
aam
cmps
test
pusha
jae
sti
mov
mov
push
test
and
mov
out
xchg
aam
adc
enter
add
test
push
cmp
mov
ror
stc
mov
add
fcomi
(bad)
shl
lea
clc
ror
lea
out
clc
lea
out
and
loopne
cmp
cmp
dec
sar
pusha
enter
mov
mov
xchg
nop
mov
popf
push
push
movs
shr
add
enter
jl
rol
mov
sub
adc
mov
mov
aaa
test
push
js
pusha
(bad)
jo
clc
mov
pop
mov
fld
test
shl
xor
ret
adc
mov
aad
pop
or
inc
rcr
mov
pop
data16
xchg
xchg
lods
add
or
xchg
fdiv
test
pushf
test
stos
cwde
mov
xchg
loopne
dec
lds
clc
mov
add
or
cmp
iret
push
lea
je
int3
xchg
dec
push
cmc
test
push
cmc
mov
nop
fstp
rol
mov
int
mov
loopne
pop
out
cmp
lock
(bad)
or
pusha
cmp
sub
dec
aad
pusha
push
nop
mov
test
cmp
hlt
test
mov
mov
and
int3
mov
xchg
int3
mov
mov
dec
int
pop
call
jo
iret
or
lock
mov
push
and
fdiv
dec
xor
shl
addr16
sbb
fcom
cmc
nop
push
sbb
mov
mov
xchg
hlt
ficom
xor
push
push
sub
addr16
add
mov
std
shl
cmp
mov
add
dec
mov
ror
pushw
ins
(bad)
call
out
scas
mov
xchg
xchg
push
rcr
nop
cmc
push
add
mov
sbb
xchg
mov
lahf
pop
add
xor
shl
les
adc
dec
cmp
jg
mov
rcl
mov
adc
dec
sbb
lahf
push
and
mov
rcl
add
and
mov
sbb
inc
ror
xchg
mov
push
sbb
xor
pop
addr16
push
sar
add
mov
pop
xchg
xchg
sar
rcl
data16
sar
xchg
pushf
add
adc
push
lock
pusha
sbb
mov
pop
out
mov
mov
pusha
xor
add
mov
mov
ror
es
rcl
enterw
callw
js
or
sub
rcr
je
lods
sbb
jbe
pushf
icebp
rol
repnz
test
fsub
xor
call
sahf
adc
adc
cmp
cwde
push
inc
pop
daa
cmp
fmul
pop
mov
add
fcomp
cmp
or
call
sbb
ror
sub
rcl
enter
shl
push
loopne
inc
rcr
mov
stc
mov
add
loopne
in
jae
test
pop
pop
je
stc
mov
pop
jge
les
mov
mov
test
adc
call
adc
addr16
lods
(bad)
fldenv
xchg
aam
xchg
pop
cld
xchg
aam
lahf
pop
add
popf
pop
es
aam
fwait
pop
pop
xor
sar
mov
loopne
and
test
test
pop
xor
add
loop
mov
lea
cmp
mov
pop
mov
test
sbb
cdq
cmps
jo
mov
clc
test
mov
and
bnd
mov
sbb
outs
cmps
imul
call
cmps
sbb
cmps
push
outs
cmps
inc
outs
cmps
and
push
outs
cmps
inc
outs
cmps
js
cmps
jp
cmps
ins
outs
test
xchg
nop
sbb
mov
jmp
sbb
(bad)
sbb
enter
sbb
cld
sbb
out
sbb
and
add
xor
lock
pop
sbb
pop
sbb
dec
sbb
jle
mov
jo
xchg
xchg
rol
mov
test
mov
jo
sbb
int3
(bad)
xchg
sar
dec
lods
push
xor
loop
out
rcl
dec
pop
xor
mov
xor
lock
xor
rol
push
cmp
inc
push
pop
adc
fld
lock
jbe
aad
mov
std
fsub
stos
ficomp
rol
es
shr
enterw
callw
adc
test
mov
xchg
sar
mov
and
mov
dec
pop
int
lods
fcomip
push
jp
idiv
test
loop
lock
sbb
pop
sbb
pop
or
lahf
fcmovnbe
neg
and
aam
mov
call
add
or
test
cwde
lods
loopne
lods
(bad)
int
stos
cmc
dec
clc
add
mov
xor
xchg
lods
js
and
cmc
sub
rcr
jno
pop
mov
call
shr
mov
sbb
rol
cwde
and
add
clc
into
rcr
je
out
rcl
cmps
nop
das
das
or
sub
sub
enter
and
lods
jbe
fadd
lds
xchg
pop
xchg
mov
arpl
(bad)
aas
cmp
shl
sbb
rol
call
pop
xchg
xchg
mov
shl
test
outs
mov
test
mov
mov
call
fdiv
lock
mov
pop
lock
and
scas
dec
aad
pusha
scas
dec
aad
pusha
scas
dec
adc
nop
scas
dec
out
sbb
jb
ret
daa
fcom
cmp
xor
rol
xchg
(bad)
in
mov
pop
xchg
xchg
or
sub
xor
pop
jo
js
sub
lods
in
(bad)
icebp
cwde
xor
sbb
jno
lahf
lock
shr
pop
adc
cmps
test
mov
imul
mov
in
mov
adc
jo
test
add
sbb
push
xchg
add
aam
stos
inc
mov
dec
mov
cmp
push
jbe
clc
rcr
int3
fdiv
and
add
pusha
jo
xchg
mov
mov
cwde
pusha
loopne
(bad)
fadd
pusha
push
dec
sar
in
push
stos
mov
dec
mov
ror
mov
cmp
shl
inc
out
sbb
mov
or
pushf
lods
mov
mov
xlat
mov
cwde
mov
iret
clc
ffree
out
shr
mov
cmp
scas
xchg
xchg
mov
fnstcw
and
ret
stos
add
and
push
mov
or
and
xchg
nop
xchg
mov
shr
cwde
mov
call
push
call
rol
lock
mov
cwde
pop
fdivr
sbb
cmp
(bad)
pop
ror
xor
jno
test
xor
test
mov
lock
lods
or
ja
mov
push
adc
push
das
clc
push
mov
je
mov
mov
mov
sbb
enter
mov
xchg
xchg
xor
je
lods
xchg
and
add
test
cmp
push
test
xchg
dec
xchg
xor
mov
inc
push
addr16
addr16
push
test
(bad)
mov
jbe
and
add
clc
pop
mov
or
ret
es
repnz
adc
cli
test
mov
rol
cmp
clc
inc
(bad)
mov
test
dec
mov
push
sar
mov
dec
(bad)
test
dec
mov
enter
out
call
or
mov
pop
add
popf
sub
mov
call
pop
rcl
test
int3
ret
pop
push
add
loopne
pusha
fwait
sahf
cmp
aam
ror
cwde
ins
jbe
xchg
mov
and
sbb
and
stos
pop
(bad)
pusha
or
mov
lds
or
dec
(bad)
cmps
jmp
cmps
add
cmp
cmp
cmps
push
jbe
pop
jbe
inc
jbe
jbe
cmps
jnp
cmps
jo
test
mov
pusha
lock
or
imul
mov
push
(bad)
push
rol
mov
cli
pop
mov
out
aam
adc
mov
sbb
mov
aam
sub
mov
loopne
pop
mov
dec
pop
mov
loopne
pop
mov
outs
mov
cmps
mov
les
or
mov
shr
test
or
aad
cmc
(bad)
push
cmc
leave
push
cmc
sti
push
cmc
in
push
cmc
pop
push
cmc
add
push
cmc
and
cmc
pop
push
cmc
dec
push
cmc
jge
cmc
outs
push
not
(bad)
cmps
pop
cmc
test
cmc
int
cmc
call
push
ins
cwde
jbe
mov
or
push
daa
push
adc
push
push
sbb
inc
(bad)
js
pusha
or
mov
fmul
xor
shl
test
cwde
pusha
mov
ror
lods
int
mov
fistp
push
call
je
lods
call
adc
je
lods
pop
sbb
sbb
sbb
fidiv
test
mov
sar
pop
clc
sub
sbb
mov
sbb
pushf
test
lock
call
daa
sbb
sub
ror
mov
dec
mov
xor
mov
lahf
mov
test
push
mov
push
mov
push
fsub
xchg
fsub
mul
sar
addr16
loope
loopne
push
shl
sbb
adc
rol
shl
cmp
pusha
das
addr16
daa
or
lea
mov
adc
or
mov
cwde
mov
sar
mov
mov
loopne
and
test
es
scas
add
push
lock
or
adc
pop
sub
xor
inc
mov
loopne
jae
cmps
nop
popa
adc
lock
xor
xor
test
push
test
cdq
nop
mov
mov
enter
enter
cwde
sbb
repz
test
inc
data16
out
sub
out
mov
jno
mov
pop
push
int3
mov
mov
sbb
xor
sub
test
enter
sbb
mov
mov
out
int3
sbb
push
xchg
les
pop
retf
mov
lods
pusha
loopne
loopne
dec
enter
cmp
std
test
push
cmp
test
daa
or
jbe
mov
enter
fmul
cmc
mov
mov
fsub
mov
or
lock
mov
js
mov
test
bound
ja
cmps
ror
add
jbe
test
repz
cwde
out
mov
mov
mov
mov
popf
xchg
inc
and
pop
mov
(bad)
and
mov
jle
lock
jle
mov
ja
mov
cmp
mov
cmp
js
adc
jnp
mov
mov
sbb
mov
push
clc
mov
mov
js
js
mov
sbb
cmps
call
pop
and
lock
je
push
adc
(bad)
push
mov
mov
call
out
push
xchg
fcomi
clc
repnz
call
nop
shl
or
dec
lds
sbb
ss
mov
enter
push
mov
mov
bound
test
sbb
mov
mov
mov
fcom
pop
dec
sub
sbb
xchg
jo
je
enter
shl
rol
mov
enterw
pop
shl
out
sbb
lea
or
scas
cwde
mov
out
mov
fdiv
lds
cwde
rcr
sbb
inc
add
mov
sub
lock
cwde
out
test
dec
shl
mov
xchg
sar
mov
mov
cwde
mov
iret
fcomp
shl
or
sbb
cmp
mov
clc
hlt
push
not
pusha
sahf
pop
fcom
xor
das
pusha
call
nop
xchg
inc
mov
sar
mov
je
fst
push
pusha
sub
sets
dec
mov
mov
loope
int3
mov
mov
sub
call
cmps
or
clc
or
sub
xor
xor
adc
iret
mov
push
sub
pop
(bad)
sar
loop
enter
push
pop
out
pusha
fidivr
fild
pop
ja
jb
mov
in
imul
neg
(bad)
pop
iret
jo
mov
push
mov
nop
aad
int3
shl
pop
out
or
mov
call
in
sbb
pop
sbb
add
xor
punpcklbw
cmps
pop
jbe
dec
jbe
jge
cmps
outs
jbe
xchg
cmps
sub
cwde
xchg
xor
fldenv
and
dec
(bad)
mov
pop
mov
jbe
cwde
out
mov
call
lds
and
dec
shr
mov
mov
dec
mov
jge
sbb
bound
adc
cmps
cmc
nop
push
jl
je
test
test
hlt
clc
stc
mov
das
push
and
jae
out
lock
adc
icebp
nop
dec
lea
jae
mov
and
push
lods
test
je
out
fistp
movs
xor
xchg
sub
shl
cmp
mov
push
fs
loopne
hlt
out
xchg
pop
in
mov
(bad)
adc
dec
pop
retf
sbb
inc
mov
aam
sub
rcr
sub
rcr
jp
movs
pop
dec
mov
test
mov
pop
loopne
hlt
enter
ss
movs
retfw
movs
leavew
mov
mov
mov
sbb
shl
mov
mov
scas
shl
test
ror
es
sar
loopne
leave
mov
cmp
xor
rcl
xchg
les
pop
scas
pusha
mov
pop
adc
sbb
ins
test
dec
clc
adc
idiv
sub
or
jbe
add
mov
lock
mov
push
loopne
cmps
enter
cmp
xor
es
call
sbb
ja
mov
xchg
adc
add
sbb
movs
shl
push
sbb
scas
or
cwde
mov
cmps
test
mov
push
xchg
mov
lock
jbe
(bad)
mov
xor
(bad)
mov
lds
mov
and
into
rcr
hlt
xor
lahf
mov
stc
and
div
mov
fmul
push
mov
ja
mov
enter
ins
out
(bad)
fnsave
mov
mov
mov
push
cld
cmps
mov
sbb
xor
xchg
pop
pusha
dec
je
retf
push
pop
cwde
mov
call
mov
xor
je
lds
lock
(bad)
cli
call
or
rol
sub
call
out
test
dec
shl
repz
mov
je
stc
mov
pop
test
xchg
pop
lock
push
or
pop
inc
test
shr
mov
or
sbb
mov
xor
jo
pop
xor
sub
repnz
(bad)
loopne
int
lods
daa
cmp
mov
shl
enter
int
or
rcr
mov
icebp
out
mov
pusha
fmul
js
jge
bound
mov
lea
push
mov
mov
ret
fsubr
pop
pushf
div
lock
sbb
and
add
mov
pop
push
pusha
inc
add
rol
sub
aad
and
dec
shr
data16
pushf
test
test
add
cli
mov
or
data16
out
call
dec
lods
cmp
je
out
stos
call
shl
arpl
lock
xchg
popa
sbb
mov
lahf
jl
cmp
repz
movs
clc
(bad)
pop
fdiv
js
dec
mov
dec
push
mov
out
inc
mov
xor
cwde
aam
cli
mov
add
mov
rcr
add
jbe
cwde
xor
shl
xor
inc
cdq
mov
out
sub
out
sar
jbe
mov
test
je
rcl
data16
rcr
addr16
test
mov
movs
cdq
mov
out
loopne
lock
jbe
mov
loopne
call
adc
xchg
and
nop
ja
sti
mov
sti
pop
dec
mov
test
cli
fcomp
rol
cmp
cmp
xchg
fdivr
sbb
ficom
sbb
jge
stos
inc
or
mov
mov
cmc
push
pusha
out
mov
cwde
fwait
into
(bad)
xchg
sets
mov
or
push
test
out
in
rcr
or
sbb
mov
push
pusha
out
mov
push
and
adc
xchg
pop
loopne
shl
pushf
lock
or
cwde
out
mov
addr16
call
jbe
mov
mov
push
dec
adc
mov
ss
test
or
out
push
lock
xor
lods
clc
sbb
and
je
lods
sub
je
lods
push
sbb
push
out
and
ror
cwde
mov
pusha
nop
cmp
loopne
fs
mov
lods
shl
stc
mov
pop
xchg
mov
out
hlt
int3
sbb
adc
mov
out
cdq
mov
fstp
mov
int3
sbb
pop
and
adc
sub
adc
push
mov
lock
ins
js
sub
dec
pop
aaa
push
in
loopne
(bad)
(bad)
push
push
mov
clc
cmp
scas
xchg
xchg
mov
xor
mov
xor
cli
mov
or
mov
test
pop
shl
mov
mov
mov
mov
push
loop
xchg
pusha
xchg
sub
data16
pushf
mov
mov
dec
pop
dec
pushf
test
xchg
movs
rcr
xor
int3
pop
repz
sti
push
out
push
lea
movs
cwde
shl
jbe
add
rol
data16
ror
pop
ror
sbb
and
push
cmp
sbb
js
inc
pop
jo
fs
sub
lock
loopne
mov
pop
call
adc
adc
pop
sub
sbb
xchg
sbb
cld
ret
pop
es
pop
mov
lock
mov
out
push
clc
pusha
dec
lds
lock
push
ud0
movs
cwde
sbb
hlt
push
push
cwde
rol
es
das
and
rol
xor
pop
fsubr
(bad)
mov
hlt
mov
or
stc
mov
stc
mov
pop
xchg
mov
(bad)
xchg
mov
nop
in
loop
ret
adc
rcr
in
mul
mov
jl
push
cmp
xchg
inc
sbb
and
in
aad
shl
mov
mov
cwde
pop
in
xor
inc
sar
pop
inc
sub
adc
dec
sub
fcom
popa
cwde
(bad)
rcl
cmps
lock
adc
cwde
push
and
mul
cwde
cdq
popa
push
call
bound
inc
sahf
addr16
movs
(bad)
or
sbb
adc
or
loop
cwde
in
int3
pop
jmp
add
sar
aas
mov
cmp
push
mov
test
adc
inc
sbb
cwde
mov
(bad)
push
out
cwde
loopne
dec
out
add
cmp
jmp
aas
pop
xchg
push
out
or
stos
mov
sbb
adc
or
inc
mov
ja
fsub
shl
cwde
mov
shl
dec
push
xchg
jne
sahf
stos
push
jge
dec
sbb
or
sar
pop
cmp
cwde
push
dec
and
mov
dec
sub
cmp
sub
mov
(bad)
xlat
std
jns
add
in
adc
mov
push
mov
cli
xor
or
in
arpl
xchg
cmp
cmps
iret
inc
frstor
push
unpckhps
cs
add
mov
jp
inc
popf
jo
leave
loopne
mov
mov
movs
jg
leave
ret
xchg
cmp
sub
jecxz
mov
shl
out
pushf
jb
fsub
inc
sub
stc
cmps
movs
mov
leave
jecxz
int3
pop
jge
mov
cmps
cmp
adc
mov
dec
dec
and
sbb
stos
xchg
mov
popa
enter
inc
outs
enter
pop
outs
pop
pop
enter
cwde
jo
stos
inc
shl
or
inc
arpl
call
adc
or
adc
sbb
cmp
in
js
call
add
aas
inc
jmp
cwde
pop
je
dec
sub
jae
pop
jg
ins
jnp
mov
lock
cmp
cwde
cmp
add
push
mov
push
jne
cli
fnstenv
mov
cwde
or
loopne
jmp
mov
outs
xchg
and
sbb
repnz
scas
pop
not
int3
inc
popf
adc
ret
xchg
stos
sbb
test
icebp
add
into
cmp
rol
pop
cmp
cmc
mov
(bad)
cwde
aad
mov
cmp
cdq
lock
out
loope
aaa
jle
jl
outs
cwde
mov
mov
cwde
sti
add
outs
test
xchg
bound
retf
lods
inc
and
retf
add
(bad)
pop
jecxz
add
or
ds
jmp
adc
bound
(bad)
loope
imul
cld
xchg
std
call
movs
mov
cmp
ds
add
(bad)
loopne
enter
jo
jne
add
mov
sahf
mov
cli
inc
xchg
pushf
mov
fs
ja
mov
mov
mov
xor
jb
mov
mov
scas
retf
ins
enter
les
nop
(bad)
mov
out
cwde
outs
mov
mov
stos
cwde
dec
pusha
jg
lahf
xor
mov
fmul
push
push
cwde
adc
stc
adc
pcmpgtd
sub
cwde
outs
pusha
mov
(bad)
cmc
shr
sub
(bad)
movs
xchg
nop
push
push
mov
push
je
mov
cs
lods
xchg
sahf
mov
cli
call
sbb
xor
out
sbb
scas
xchg
cwde
and
jge
xor
stos
mov
sub
cwde
mov
or
adc
pop
cmps
in
dec
sbb
jl
cwde
pop
or
pop
pop
test
jecxz
cwde
(bad)
and
jno
cli
enter
mov
pop
cwde
movs
rcr
xchg
outs
loopne
or
cwde
mov
xchg
mov
xor
pop
mov
fdivr
lock
movs
gs
nop
pusha
hlt
mov
mov
push
pushf
ins
inc
cwde
leave
stos
lods
out
dec
or
out
retf
dec
add
cwde
add
outs
cmps
mov
sub
cld
aad
js
mov
fidiv
and
cwde
push
in
pushf
icebp
sbb
mov
scas
cmp
ficom
cwde
pmulhuw
xchg
push
mov
xor
out
rcr
cwde
call
push
add
bound
xchg
cwde
shl
enter
cs
jb
(bad)
fldenv
shl
clc
and
ins
dec
cwde
mov
lock
std
xchg
jns
add
test
pusha
sti
xchg
popf
cli
mov
repnz
gs
and
shl
mov
loopne
fsub
xlat
neg
adc
sti
jl
cwde
push
adc
sbb
xchg
dec
scas
mov
imul
cwde
dec
fiadd
mov
cli
hlt
outs
cwde
ins
jle
adc
add
mov
pop
lods
imul
clc
rcr
sub
mov
push
jp
js
lock
fnstsw
inc
int
test
mov
dec
adc
xchg
outs
cmp
xchg
jle
mov
xor
dec
das
mov
pop
jno
inc
in
adc
cmp
ss
cwde
ins
dec
dec
xlat
sub
xor
add
pop
ss
cmp
popf
daa
cmp
icebp
sbb
dec
retf
pop
adc
cwde
cmp
out
je
xchg
ins
cdq
push
mov
js
add
or
inc
jl
xor
pop
iret
dec
sbb
push
cmp
imul
test
xchg
shl
in
loopne
hlt
popf
push
pop
loope
jne
mov
cwde
mov
call
push
mov
loop
cwde
and
and
jmp
mov
add
clc
addr16
mov
ds
adc
mov
lock
cdq
cli
jmp
cmp
(bad)
js
xchg
sub
imul
fisttp
js
fcomp
test
loopne
xchg
sbb
mov
jmp
pushf
bound
xchg
mov
movs
leavew
sahf
aam
and
push
mov
int3
call
adc
push
imul
cmp
out
mov
stos
cwde
popa
mov
push
cwde
(bad)
int
xor
jns
cmp
adc
mov
ds
dec
bound
rcr
cmp
icebp
into
dec
jl
inc
adc
cwde
pop
jge
mov
xlat
jl
retf
test
sub
fsub
fsubp
int3
adc
mov
test
into
xchg
jnp
mov
aam
and
sbb
jbe
xor
rcr
inc
outs
imul
enter
stos
cmp
out
repz
cwde
xor
pop
jmp
test
jge
cmps
mov
mov
fisubr
jecxz
leave
stos
in
add
aam
cwde
mov
push
cwde
les
mov
xchg
loope
cwde
push
jo
adc
fcomp
pop
fwait
mov
cwde
scas
ror
shl
call
cmp
push
lods
mov
fcom
mov
inc
ins
add
cwde
mov
icebp
cwde
mov
push
lds
add
call
jle
and
or
and
lock
cld
pop
aad
dec
or
mov
jl
push
or
mov
movs
cwde
ins
pop
paddq
pusha
cwde
or
or
and
in
int3
xchg
call
js
rcr
cwde
mov
cmp
push
mov
dec
push
cwde
mov
xchg
idiv
push
add
inc
inc
cwde
imul
fstp
mov
xor
popf
lahf
das
mov
fcom
dec
cwde
add
mov
daa
(bad)
bound
jns
leave
pop
js
mov
jg
cwde
cld
imul
call
xchg
in
arpl
fdivr
xor
clc
ficomp
xchg
or
inc
cdq
jmp
pop
int3
stos
pop
ins
je
arpl
retf
les
push
cmp
inc
push
nop
add
fwait
mov
mov
hlt
(bad)
jmp
mov
or
and
cwde
pop
std
aas
push
pop
dec
xchg
sub
pusha
pop
xlat
mov
jl
(bad)
pop
es
adc
ins
pop
stc
xchg
jg
cmp
fwait
add
inc
push
fsubrp
sahf
ror
cld
stos
mov
xchg
adc
stc
push
pop
fs
xchg
sub
cmp
xchg
cwde
jmp
or
(bad)
cwde
fist
aaa
ins
mov
jb
cwde
clc
adc
cmp
pop
test
sar
retf
inc
mov
mov
push
mov
pushf
fwait
xchg
test
lods
adc
cwde
fld
xlat
shl
sti
ret
aaa
sbb
mov
fstp
mov
or
sbb
push
ins
daa
ds
add
out
xor
ins
inc
cwde
pop
jne
and
pop
lock
mov
push
and
icebp
xchg
sub
or
cwde
xlat
stos
(bad)
mov
scas
retf
scas
add
sti
int3
cmp
xchg
xor
psubsw
aad
cmp
iret
sub
mov
outs
ss
jge
pop
jb
or
in
cwde
pusha
and
sbb
mov
or
xchg
lahf
popa
ror
and
(bad)
mov
cwde
xchg
push
inc
sbb
in
xchg
lock
bound
test
adc
push
je
cs
cwde
imul
jp
mov
scas
pop
aas
call
scas
pop
cmc
adc
retf
cwde
je
add
into
cmp
ficom
mov
das
mov
inc
test
add
scas
(bad)
or
std
ss
sbb
xchg
or
xchg
aad
popf
dec
(bad)
call
nop
call
xor
push
cwde
imul
aaa
jmp
or
pushf
and
or
mov
cwde
bound
xchg
push
in
shl
jl
jns
jg
test
mov
mov
add
jle
int
cld
mov
push
jnp
lods
xchg
push
jg
sbb
mov
rcr
addr16
sub
jns
mov
mov
call
cwde
pop
sub
pushf
imul
sbb
fst
add
xchg
aad
repnz
pop
and
ret
(bad)
pop
rcr
arpl
cwde
fdiv
sub
lods
cdq
jo
adc
repz
mov
xor
enter
cmp
dec
fstp
test
and
jle
lods
cwde
outs
add
loop
xchg
addr16
call
sbb
cwde
push
xor
mov
mov
stc
adc
mov
cwde
(bad)
js
dec
hlt
cmp
clc
stos
adc
push
pop
(bad)
mov
fstp
mov
inc
cwde
int3
retf
icebp
inc
mov
adc
cld
xlat
js
test
mov
out
sub
push
test
mov
fmul
mov
mov
add
mov
aas
add
popf
mov
ins
cmp
sub
cwde
jmp
push
pop
dec
xchg
push
inc
sub
je
cwde
rcl
mov
adc
rcl
lods
mov
fld
or
das
cdq
or
pop
jb
pop
aas
jbe
mov
or
xchg
cmps
cmps
mov
aaa
call
popf
in
xchg
push
pop
fldcw
mov
out
movs
adc
les
push
xchg
aam
xchg
xchg
neg
jbe
jmp
shl
or
lds
jge
test
xchg
mov
addr16
pop
sbb
pop
cmp
adc
cwde
fimul
mov
xor
mov
cmps
aam
mov
mov
lods
mov
lahf
and
dec
call
cmc
movs
cmp
push
into
lock
xchg
xchg
inc
aas
pop
or
mov
xlat
fistp
rcr
cmp
cwde
xor
sbb
cwde
cmp
xchg
mov
xchg
push
stc
call
sbb
cmp
xor
loope
fsubr
imul
jo
cdq
inc
sahf
jbe
js
dec
js
push
sub
cmp
xchg
push
mov
push
sub
scas
retf
cld
mov
xchg
out
aad
cmps
or
mov
dec
xchg
lds
sbb
js
rcr
sub
mov
push
sub
inc
jae
inc
xchg
bnd
dec
inc
ins
sbb
inc
inc
gs
pop
jne
mov
mov
xor
adc
pop
arpl
mov
and
cwde
jecxz
push
icebp
inc
test
cwde
push
mov
mov
fmul
xor
mov
fistp
dec
in
mov
test
cwde
ins
hlt
cmp
add
stc
outs
call
aas
jge
add
sub
js
cwde
std
jmp
or
xchg
mov
xor
ins
aaa
xchg
push
cmp
jo
addr16
push
je
xchg
clc
enter
(bad)
xor
(bad)
cwde
sbb
movs
loop
hlt
outs
xchg
sub
push
push
sbb
fwait
mov
test
adc
ret
imul
jns
sti
mov
inc
cwde
sbb
ja
out
in
push
loope
or
scas
sub
mov
addr16
movs
sbb
cmp
aam
xchg
ret
neg
push
fs
out
jle
jge
xchg
dec
or
pop
sbb
or
cmc
icebp
test
lea
aad
sbb
mov
hlt
test
jnp
call
xchg
dec
push
pop
sub
sub
es
jp
cmps
mov
cwde
in
add
fidiv
push
aaa
fnstenv
xor
cwde
xchg
mov
mov
xchg
mov
rcr
add
adc
add
xchg
xor
sbb
xchg
adc
je
xchg
xchg
mov
scas
and
mov
or
call
(bad)
inc
push
cwde
jl
mov
fcomp
xor
pop
cmp
arpl
mov
add
push
add
sti
jmp
mov
xor
or
xchg
sahf
xor
push
and
test
mov
loopne
mov
cwde
dec
sbb
mov
sbb
cwde
dec
push
cmps
xchg
xchg
movs
xchg
movs
mov
xchg
dec
xchg
push
cwde
das
jno
push
scas
rcl
sbb
dec
cwde
inc
pusha
push
cwde
mul
push
outs
dec
lds
and
arpl
add
js
cwde
xchg
ffree
and
test
rcr
fsubr
sti
not
cmp
inc
push
push
push
ds
push
cs
inc
pusha
jne
jge
and
repnz
fidiv
in
shl
mov
pop
neg
mov
lahf
lea
cwde
out
inc
je
sbb
sub
dec
repz
pop
div
loope
jbe
sbb
push
xchg
xchg
or
fadd
test
sub
fsub
loop
jg
sbb
pusha
sar
sbb
and
xchg
cwde
cmp
xor
sub
jle
not
push
jmp
xchg
imul
rcr
adc
inc
mul
sar
test
cwde
outs
lods
movs
mov
push
mov
ror
repz
dec
jmp
arpl
xlat
fwait
or
cwde
cmc
stos
lea
cwde
out
retf
loop
sahf
pop
mov
jmp
push
retf
pop
retf
adc
int
cwde
xor
and
jmp
loop
sar
xor
pop
dec
jmp
cwde
jb
or
sbb
adc
int3
or
retf
xchg
jb
mov
fucompp
cwde
pop
fs
mov
pop
jo
mov
mov
cmp
cwde
imul
lds
(bad)
jmp
aas
sbb
inc
mov
fsubr
sbb
pop
cs
push
sub
mov
mov
mov
push
mov
dec
ja
and
ins
call
stos
pop
and
cwde
or
(bad)
rcr
(bad)
jecxz
(bad)
jg
dec
cdq
lock
fmul
mul
outs
add
jl
cwde
inc
and
mov
mov
(bad)
call
aas
sbb
stos
push
mov
cld
jmp
repz
mov
dec
cmp
cli
inc
stc
cwde
mov
xor
xchg
fmul
icebp
jle
mov
adc
std
jo
stos
repnz
inc
dec
push
and
clc
fwait
les
pop
xchg
mov
shr
mov
popa
xchg
mov
(bad)
scas
jp
bnd
sub
(bad)
push
mov
cwde
mov
loop
loope
pop
sbb
adc
cwde
jmp
mov
mov
adc
cwde
fidivr
inc
dec
xchg
inc
shl
jg
cdq
xchg
bnd
and
mov
mov
popf
out
repz
or
jb
pop
sub
in
sbb
and
push
push
into
cmp
jnp
call
or
rcl
lahf
adc
fdivr
xor
shl
les
cwde
movs
sbb
or
std
and
loop
xor
(bad)
adc
xor
sbb
xlat
andnps
jns
dec
test
pop
jo
ds
les
adc
dec
pop
jne
cwde
cmp
sbb
jp
cwde
iret
push
int
push
xchg
movs
stos
call
test
mov
pop
add
inc
add
mov
shr
hlt
pop
mov
sbb
and
jae
call
push
sbb
sbb
sbb
xlat
fild
sbb
in
dec
ds
or
or
inc
push
mov
fiadd
cwde
xchg
sub
add
inc
and
adc
xchg
stos
popa
aad
sub
sub
xchg
cmp
cmp
fsub
sub
sbb
cmp
inc
mov
xor
sub
mov
test
jmp
xchg
cmp
xchg
push
test
or
scas
mov
or
pusha
add
xor
jmp
inc
int3
pop
stos
jl
or
cwde
add
mov
add
mov
xlat
push
xchg
mov
js
pusha
xchg
sahf
xchg
add
push
pop
dec
xor
adc
and
jo
add
xlat
push
call
push
dec
pusha
or
mov
xchg
rol
call
imul
jp
call
jns
cmps
fistp
pushf
test
rcl
adc
jae
pop
loop
push
mov
cmp
or
enter
cmps
cwde
jmp
mov
jb
or
xchg
mov
cli
fdiv
cwde
sub
pop
retf
faddp
cld
or
mov
(bad)
popf
jno
add
jecxz
xor
out
xor
cwde
inc
and
and
bound
stos
mov
fstp
aaa
bound
inc
test
sbb
sub
mov
dec
mov
cwde
xchg
jecxz
jbe
hlt
int
mov
arpl
daa
ss
mov
icebp
dec
xor
push
bound
sbb
pusha
push
add
or
jbe
mov
stos
add
sbb
sub
jns
push
and
mov
mov
out
pusha
inc
sbb
ret
aad
ins
push
retf
scas
cmp
cmp
cmc
pop
add
pop
cwde
adc
mov
lahf
push
int3
out
pop
in
xor
jbe
test
test
push
dec
fnsave
cmp
enter
loopne
fld
or
jmp
adc
cdq
add
push
cwde
das
ds
jge
js
mov
cwde
out
sbb
sbb
divps
outs
mov
inc
xor
mov
or
das
mov
dec
gs
push
adc
pop
pop
(bad)
fcomp
(bad)
out
lahf
xchg
and
jne
xchg
jg
call
xchg
(bad)
cwde
outs
fadd
(bad)
jbe
xchg
rol
js
ja
imul
fistp
xor
pop
xor
movs
fdiv
aam
dec
call
jns
or
mov
jmp
call
scas
data16
ins
push
pop
adc
rcr
sub
cwde
cmc
mov
jae
or
movs
xchg
lds
mov
aas
cwde
inc
ds
test
fs
sub
pushf
cmp
inc
push
in
jge
push
cdq
icebp
(bad)
mov
jae
popf
popa
test
xchg
cmp
push
xor
rcr
add
test
xor
and
mov
push
dec
cmp
inc
call
je
fadd
out
cdq
xor
pop
pop
cwde
aas
mov
mov
lahf
add
add
and
jp
dec
xchg
and
(bad)
scas
xchg
fsub
jae
mov
fwait
outs
cmp
iret
push
scas
jle
xchg
add
cld
fisubr
jge
not
pushf
inc
push
push
cwde
lock
mov
sub
xchg
pop
xchg
xchg
sbb
inc
gs
mov
popf
cmp
xchg
sub
repnz
pusha
cmp
xchg
or
mov
cwde
mov
cwde
or
mov
or
sti
xchg
lock
push
push
pop
sar
call
xchg
sbb
cwde
adc
rcr
popf
cmp
vsqrtsd
jo
ror
das
xchg
add
mov
hlt
repz
xlat
xchg
or
in
js
aas
jns
push
sbb
cmp
movs
xlat
cmps
dec
in
jmp
cdq
xchg
cmp
mov
sbb
fadd
ja
push
xchg
push
(bad)
xchg
dec
in
sub
xor
iret
inc
ja
loop
call
inc
push
dec
cmc
in
mov
fdiv
push
cwde
cmp
ins
(bad)
fisttp
push
xchg
test
dec
adc
mov
adc
xor
mov
xchg
cwde
(bad)
test
out
fadd
shl
int3
mov
jg
cwde
fbstp
mov
test
add
push
sbb
js
data16
nop
mov
dec
dec
cdq
les
pop
not
xchg
std
das
jb
cmps
and
jmp
cmc
ss
ret
sbb
fadd
adc
jg
cwde
cmps
push
test
repz
iret
mov
dec
mov
or
les
inc
fsubr
mov
fadd
nop
and
xchg
adc
adc
inc
leave
stc
ds
daa
sahf
mov
sbb
imul
or
adc
mov
xor
dec
xchg
aaa
dec
push
and
dec
dec
movs
in
addr16
mov
cwde
loopne
push
add
mov
(bad)
cwde
or
inc
add
mov
aaa
adc
cmp
pop
and
in
dec
jl
mov
cwde
cmps
xchg
test
cmp
(bad)
dec
jbe
or
jne
push
call
jg
bound
cli
push
mov
ja
out
inc
cwde
or
push
jle
jp
inc
jo
fwait
cmp
cwde
mov
scas
repz
cwde
(bad)
pusha
and
adc
and
xor
jmp
jns
and
enter
test
jg
add
add
out
and
jmp
scas
addr16
stos
lods
icebp
add
(bad)
xchg
movs
int3
outs
cdq
int
mov
sbb
pop
clc
leave
push
push
cmc
sub
sbb
mov
xor
dec
test
adc
sbb
aad
cwde
and
aam
jmp
(bad)
scas
mov
xchg
out
out
(bad)
cmp
lock
jne
jnp
pop
mov
adc
sub
and
jecxz
nop
cwde
adc
dec
or
xlat
cmps
call
xor
push
fs
mov
call
push
xchg
sub
or
popf
or
jle
jmp
mov
or
cdq
je
push
ficomp
or
ds
sbb
imul
test
cmps
ret
cwde
(bad)
data16
outs
xor
xchg
jne
jb
test
in
push
fadd
stos
jmp
cmp
arpl
jns
mov
sbb
ss
or
cwde
stos
stc
push
and
adc
cwde
mov
(bad)
mov
mov
clc
lock
ss
sub
(bad)
retf
rol
fstp
movs
popf
inc
jecxz
cmp
ja
mov
test
sub
cwde
(bad)
jecxz
sub
test
cwde
popf
cmps
imul
js
test
xor
xor
fnstsw
inc
jb
cwde
inc
mov
arpl
(bad)
test
in
mov
pop
dec
push
pop
mov
das
cmp
outs
pop
js
sbb
retf
repnz
or
cwde
outs
js
jle
nop
fucomi
mov
ror
sbb
mov
in
fadd
in
cwde
jo
daa
jmp
cmps
retf
push
test
test
test
pop
loope
in
stc
addr16
and
scas
mov
xor
xchg
or
js
daa
imul
out
ret
xor
pushf
xchg
or
bound
mov
or
cwde
rol
mov
aas
test
js
xchg
xchg
and
(bad)
xchg
or
jle
mov
adc
dec
pop
icebp
sbb
mov
xlat
hlt
mov
dec
jne
cwde
mov
jg
sahf
addr16
shl
fnsave
xchg
nop
xchg
mov
stc
inc
xchg
sub
cwde
mov
mov
ret
mov
push
cmp
cmps
xchg
mov
imul
js
cwde
xlat
and
mov
scas
xchg
xchg
pop
dec
fcom
cwde
cmp
iret
add
jp
enter
enter
xchg
dec
xor
sti
xchg
enter
neg
aam
and
mov
fs
ret
cmp
jmp
mov
cwde
adc
xchg
leave
cs
stos
iret
mov
jnp
and
mov
out
jge
ja
pop
add
add
daa
stc
(bad)
cdq
pop
dec
adc
and
(bad)
cwde
inc
fldenv
mov
(bad)
mov
mov
dec
xchg
mov
sbb
mov
mov
xchg
(bad)
pop
ins
dec
mov
popf
enter
out
lods
ret
inc
cwde
push
or
sbb
(bad)
es
jmp
jns
shl
sbb
aaa
rcr
loope
dec
sbb
jmp
xchg
mov
sbb
loopne
push
fucomip
icebp
sub
and
dec
mov
adc
es
fs
mov
leave
mov
sub
push
jns
adc
cwde
inc
retf
cmp
or
mov
(bad)
cld
ins
lods
jge
stos
xchg
sbb
jbe
xchg
rcr
in
clc
xor
pop
outs
imul
out
addr16
sbb
pop
xchg
adc
dec
cmp
ins
mov
pusha
faddp
sub
imul
dec
pop
xor
sbb
dec
inc
scas
cmp
ds
dec
sub
xchg
xor
fistp
sbb
jp
stos
cmp
push
mov
repz
movs
sti
push
xchg
clc
xor
and
ds
mov
cmps
cmp
push
cwde
in
dec
sahf
mov
mov
cmp
xchg
retf
in
sbb
jge
daa
inc
mov
lea
adc
or
out
pop
jbe
mov
dec
mov
retf
out
jmp
adc
and
pop
cmp
push
inc
mov
hlt
(bad)
xor
or
or
in
lea
loopne
sub
push
xchg
cdq
mov
cmp
(bad)
sbb
sbb
or
cwde
rcl
adc
fs
stos
jg
cdq
in
(bad)
mov
not
jmp
popa
ins
pop
adc
cwde
sub
sub
and
dec
mov
lock
mov
mov
dec
sub
rcr
adc
in
mov
adc
or
lahf
mov
aad
add
stos
sbb
scas
ins
ret
cwde
cmp
ret
mov
icebp
pushf
loopne
popa
cwde
int
jge
jmp
(bad)
sub
pop
cmp
ja
fidiv
dec
jmp
call
or
sub
stc
fadd
xchg
int
cwde
mov
ss
adc
sub
cmps
fwait
retf
cwde
pop
mov
jge
cwde
dec
xlat
jae
mov
into
xchg
retf
cmp
call
test
jo
out
cwde
mul
jo
cmp
cmp
sub
outs
sub
movs
xchg
adc
hlt
ds
es
js
mov
pop
sbb
pushf
js
jl
cmps
into
mov
jmp
out
adc
cmp
mov
cwde
mov
cmp
imul
jmp
clc
adc
jbe
data16
xchg
mov
cmp
stos
mov
in
or
jg
out
inc
sub
sbb
(bad)
mov
popf
(bad)
sbb
pop
jno
les
cwde
loopne
mov
fs
or
sti
mov
xor
and
and
and
adc
sub
clc
mov
out
push
pop
mov
jnp
sub
loop
test
push
sub
pop
fstp
outs
jmp
ss
and
inc
lock
test
and
push
sbb
xor
push
loope
or
movs
add
sbb
in
popf
pop
pushf
js
xchg
adc
inc
adc
inc
mov
je
inc
fwait
je
xchg
(bad)
and
sub
sbb
movs
ret
cmps
adc
dec
pop
dec
popf
inc
fidiv
cmp
xchg
mov
jmp
xchg
and
push
adc
aas
movs
dec
sbb
movs
xchg
and
mov
out
sub
mov
xor
das
ds
adc
push
push
fisttp
scas
pop
js
cwde
inc
sub
adc
mov
xlat
in
sahf
add
sub
xchg
pop
pop
int
sub
pop
stos
js
addr16
sbb
add
loope
add
xchg
test
cwde
push
(bad)
imul
cwde
ja
gs
retf
mov
sbb
rcr
loope
loopne
arpl
xor
fs
xchg
fsubrp
hlt
xchg
cwde
adc
push
fstp
push
push
add
mov
arpl
popf
adc
enter
test
cmp
call
stc
xchg
push
or
ss
into
cmp
loopne
clc
in
dec
ret
cmp
ds
call
cwde
jp
iret
popa
fwait
mov
fs
mov
imul
and
add
cmc
mov
stos
mov
push
daa
or
dec
cwde
sub
mov
scas
xchg
mov
xchg
mov
addr16
sbb
xor
cwde
rcr
loop
push
adc
cwde
in
es
ja
xchg
scas
mov
sbb
cmp
push
and
pusha
mov
jmp
shr
add
fcomp
add
adc
add
in
add
add
mov
add
adc
add
mov
add
fstp
add
add
sbb
add
add
add
cdq
sbb
add
sbb
add
add
add
jbe
add
ins
and
add
rcr
add
and
je
and
call
add
aam
add
sbb
add
sbb
add
int3
sbb
add
addr16
add
imul
or
sbb
add
sbb
add
and
std
or
add
mov
add
mov
add
lock
sbb
adc
add
test
add
fstp
pusha
mov
adc
add
std
and
data16
add
ins
and
cwde
adc
add
fstp
add
mul
add
jle
add
and
bound
and
(bad)
mov
add
sbb
add
add
mov
sbb
add
sbb
add
adc
add
cs
add
or
add
push
sbb
add
and
arpl
sbb
add
mov
add
and
push
mov
sbb
add
mov
and
and
jle
add
sbb
add
call
retf
sbb
mov
popa
(bad)
and
imul
and
sub
and
aas
test
add
jno
add
mov
add
mov
and
and
xlat
sbb
add
repz
jp
adc
add
push
adc
add
add
add
add
sbb
add
in
and
in
adc
add
scas
adc
add
rcr
sub
sbb
js
and
add
scas
adc
add
or
add
or
add
sbb
add
jle
add
and
ja
adc
add
add
iret
sbb
add
pop
adc
add
add
add
lods
adc
add
sbb
add
and
pop
or
add
adc
add
sbb
add
adc
add
sub
sbb
add
or
add
jo
add
add
sbb
add
jle
add
mov
add
ficomp
add
sbb
add
rcr
popw
adc
add
and
inc
or
add
and
cs
add
sbb
add
sti
and
cwde
test
add
adc
add
out
and
scas
mov
add
xchg
add
pop
adc
add
add
and
adc
add
test
add
adc
add
fistp
add
lods
adc
add
jnp
add
popa
sbb
add
and
inc
stos
sbb
add
add
adc
add
mov
add
or
add
add
mov
add
add
add
sti
and
fldcw
and
or
sbb
add
test
add
int3
sbb
add
loop
add
and
mov
je
add
sbb
add
adc
add
sbb
add
adc
add
scas
adc
add
mov
sbb
in
jp
add
add
add
gs
add
add
add
add
add
mov
adc
add
sbb
jne
add
or
add
mov
add
mov
add
mov
and
shr
add
sbb
add
sbb
add
pop
adc
add
sub
and
(bad)
out
and
mov
and
cdq
add
add
sbb
add
and
mov
add
add
add
sbb
gs
sbb
add
and
iret
jnp
add
test
add
outs
sbb
add
jnp
add
xchg
add
mul
add
stos
sbb
add
mov
adc
add
sbb
add
ja
add
jb
add
mov
add
sbb
add
and
add
and
add
mov
and
sub
sbb
add
nop
sbb
add
rcr
add
add
add
mov
add
(bad)
sbb
add
sbb
add
sbb
add
sbb
add
je
add
mov
and
cdq
call
fild
sbb
add
add
add
sbb
add
and
cmp
add
and
cmp
and
imul
add
sbb
add
add
add
sbb
add
add
add
rcr
add
out
and
cdq
addr16
add
add
or
adc
add
adc
add
pop
add
sbb
add
or
add
mov
add
and
add
popa
loope
add
add
add
add
sldt
add
add
or
add
je
add
adc
add
adc
add
or
add
or
add
lods
mov
add
mov
add
adc
add
scas
adc
add
stc
and
dec
add
add
add
add
add
and
scas
sbb
add
sbb
adc
sbb
add
aam
add
test
add
and
pushf
sbb
jmp
add
inc
outs
popa
bound
imul
add
je
outs
jne
je
ins
inc
outs
jne
je
add
inc
jb
ja
arpl
inc
js
push
lea
jne
call
mov
ror
neg
btc
shr
shl
btc
bsr
mov
cmp
clc
bt
or
pushf
jmp
sub
or
mov
iret
ret
push
sub
mov
rcr
add
pop
jbe
mov
cdq
fcmove
ffreep
adc
add
xchg
bound
add
in
mov
pop
mov
xor
mov
fst
mov
popf
scas
call
out
push
hlt
fcmovne
sbb
or
into
aam
stc
jle
aas
and
mov
addr16
int3
out
xchg
and
loope
jbe
pushf
cmp
stc
stos
and
sbb
sbb
fst
or
sbb
xchg
adc
fcmovb
mul
push
repnz
or
dec
xor
add
arpl
add
test
or
das
sar
add
lea
shl
shl
sub
jmp
add
inc
jb
popa
je
inc
arpl
ins
gs
je
jb
popa
bound
add
mov
popf
mov
pop
add
sbb
lods
aaa
or
add
dec
outs
je
jb
gs
popa
outs
outs
outs
imul
push
jb
inc
add
enter
mov
push
not
cmc
cmc
cmc
rol
pushf
mov
cmc
add
cmc
bt
push
stc
test
mov
jmp
sub
xchg
jnp
xchg
ffreep
shl
mov
neg
retf
dec
xor
pop
cmp
pop
pop
dec
xor
xchg
ja
lods
cmc
in
sbb
or
adc
cmp
cmp
jb
(bad)
mov
(bad)
arpl
mov
pop
int3
clc
in
fs
stos
mov
cwde
movs
xchg
stos
xchg
test
mov
iret
mov
jecxz
sldt
bt
add
pushf
pusha
pushf
lea
jmp
add
inc
gs
ins
popa
jae
dec
outs
outs
addr16
add
add
ins
imul
je
movsx
mov
test
test
pushf
call
lea
je
pushf
cmp
lea
pushf
push
ret
dec
shl
adc
sub
push
not
jmp
dec
inc
push
dec
inc
dec
xor
cs
ins
add
and
pushf
cmc
add
cmp
bt
call
add
inc
gs
gs
popa
addr16
imul
gs
je
imul
push
add
add
je
jne
jae
jb
outs
jae
lea
jbe
mov
sub
movzx
movsx
mov
cmc
call
jmp
add
push
imul
ins
ins
outs
arpl
add
push
outs
jae
dec
gs
popa
addr16
add
sar
stos
xchg
xchg
mov
ffree
aad
les
fs
pop
daa
fld
ret
mov
xlat
les
adc
mov
outs
xchg
fsub
fmul
lock
fscale
cld
out
mov
xchg
push
dec
or
nop
or
and
call
push
inc
inc
cmp
cwde
jge
dec
ffreep
scas
std
jmp
test
add
pop
adc
ss
inc
jo
xor
mov
mov
shr
add
imul
outs
jne
arpl
call
jmp
jmp
add
push
push
js
arpl
gs
add
add
fs
je
push
imul
xor
inc
das
jae
outs
inc
cdq
push
jle
push
cmp
dec
aaa
inc
xor
mov
repz
jmp
add
dec
cmp
xor
and
mov
into
mov
add
pop
loop
sbb
push
inc
dec
xor
cmp
xor
pop
dec
add
add
jge
mov
add
inc
xchg
mov
arpl
outs
push
add
ffreep
les
or
push
sbb
cmp
addr16
pop
int3
mov
mov
fmul
jmp
(bad)
(bad)
adc
nop
jmp
cmc
mov
jnp
lods
out
(bad)
out
xor
pop
dec
push
dec
push
ds
test
call
lea
gs
gs
imul
add
push
gs
arpl
ins
gs
add
fs
call
pusha
push
lea
jmp
add
push
gs
je
dec
popa
outs
fs
add
add
je
outs
jne
call
jmp
jmp
add
inc
gs
outs
jne
lods
mov
dec
call
jmp
arpl
gs
jle
pop
inc
push
inc
inc
xor
xchg
jg
mov
fcmovb
jmp
cli
adc
cmp
es
jmp
dec
xor
jmp
cld
xor
cmp
mov
adc
or
fsubrp
aaa
arpl
cmps
mov
int
jmp
jge
(bad)
aad
or
inc
popa
sub
pop
dec
jnp
scas
xchg
mov
fcmovne
sbb
in
xchg
mov
cmovl
js
ret
inc
xor
outs
dec
inc
xor
dec
cmp
arpl
push
jg
mov
jnp
nop
lods
cdq
mov
aad
stos
fst
loopne
(bad)
jmp
push
mov
or
jmp
jbe
mov
cmp
or
cmps
xchg
mov
xlat
shl
and
(bad)
das
adc
adc
cmp
push
mov
retf
es
jl
adc
sbb
fnstsw
and
test
mov
rcr
in
mul
push
sub
lea
jmp
int3
int
fstp
clc
scas
je
js
mov
or
mov
mov
int3
icebp
mov
or
mov
stos
or
enter
fwait
add
js
and
je
clc
movs
jmp
aam
ret
loopne
fnsave
jmp
jmp
ror
and
pushf
push
ins
fcomp
int
lods
cmc
movs
xor
jae
pop
xchg
fbstp
es
sub
rcr
pop
jmp
xchg
add
add
loopne
fs
daa
xor
(bad)
and
sub
lahf
and
arpl
push
outs
jae
push
jne
je
gs
popa
add
add
gs
je
push
arpl
outs
dec
outs
imul
mov
out
cmp
aaa
dec
xor
mov
add
adc
jge
cmps
xchg
out
or
sub
dec
xor
fwait
mov
mov
push
fidiv
scas
mov
cmps
mov
sub
dec
xor
dec
pop
sbb
aam
add
out
js
jl
jp
aam
xor
dec
clc
test
jp
push
mov
std
jo
push
aaa
outs
add
add
dec
cmp
jp
movs
out
outs
pop
inc
gs
dec
xor
xor
sbb
add
jl
xchg
popf
or
cmc
out
sti
xor
dec
cmp
aad
or
outs
push
pusha
push
dec
test
pushf
mov
shl
push
call
jmp
add
inc
jb
popa
je
push
popa
ins
gs
add
or
arpl
loope
jmp
jnp
dec
test
jne
mov
add
out
mov
mov
in
pop
mov
test
mov
xchg
les
ret
mov
daa
std
add
or
sub
add
(bad)
mov
xor
out
gs
jge
imul
ins
xchg
jb
jns
lods
les
loope
or
cmp
push
dec
nop
pop
mov
mov
(bad)
mov
out
aad
and
inc
ins
jne
push
inc
jne
data16
add
mov
lea
jmp
push
jmp
add
inc
gs
jb
imul
imul
loopne
call
add
push
gs
arpl
ins
ins
push
popa
outs
add
add
ficom
and
inc
clc
sbb
cmps
cmps
cdq
cmp
outs
push
xchg
jle
mov
cmp
dec
cmp
push
or
and
(bad)
sub
icebp
cmps
xchg
mov
out
add
mov
es
xor
mov
sub
in
sbb
jne
mov
cmp
gs
cmp
xchg
fs
inc
cmp
mov
jne
adc
mov
inc
pop
lods
hlt
xchg
ins
call
mov
int3
retf
mov
and
or
jnp
fbld
or
dec
push
(bad)
jae
inc
inc
das
sbb
push
(bad)
jo
mov
add
jp
mov
out
add
sbb
aas
sub
aad
sbb
pop
pop
inc
bound
je
(bad)
cli
jbe
fwait
cmp
fs
jns
test
cmps
mov
enter
fsubr
enter
jnp
out
fnstsw
xchg
xor
dec
fsubr
cld
out
sub
sbb
or
sbb
add
retf
sub
mov
mov
push
in
aaa
lock
ds
dec
aaa
ins
push
popa
mov
xchg
std
es
jne
imul
lods
xchg
jecxz
aad
out
movs
inc
pop
inc
or
sbb
aad
pop
jne
and
int
shl
push
aas
dec
mov
inc
in
and
pop
inc
push
cmp
inc
xchg
mov
or
std
add
inc
adc
sbb
inc
je
sbb
outs
push
int3
dec
xchg
rol
cmps
call
push
xchg
jmp
into
out
xlat
lds
(bad)
fadd
cli
in
fimul
or
es
dec
xor
xor
cmp
jle
pop
sub
add
ins
push
xchg
test
cmp
(bad)
loop
mov
fsub
popa
dec
add
inc
gs
dec
push
xor
add
dec
jo
outs
inc
ins
imul
add
xor
add
add
je
jb
gs
gs
fs
imul
ins
push
outs
ja
outs
add
add
ins
gs
imul
arpl
inc
imul
call
pusha
mov
push
pop
pushf
push
ret
add
inc
gs
jne
jb
outs
je
push
dec
add
add
je
jb
arpl
jae
gs
imul
outs
imul
inc
jb
je
arpl
push
arpl
outs
add
add
popa
jo
je
imul
mov
adc
scas
lea
add
das
or
xchg
outs
xchg
and
inc
cs
xor
xchg
test
mov
dec
lea
adc
sbb
out
rcr
push
jmp
sub
xor
mov
mov
adc
pop
add
inc
gs
imul
shl
pusha
mov
push
call
add
push
gs
ins
imul
je
add
add
arpl
gs
ins
imul
mov
pushf
pushf
push
pusha
lea
jmp
lea
jne
pushf
mov
call
call
push
pushf
mov
pusha
pushf
pushf
push
ret
pushf
call
pushf
pushf
pusha
lea
call
push
push
jmp
mov
push
pushf
lea
jmp
add
ins
imul
jae
je
add
push
outs
push
imul
outs
outs
imul
add
push
popa
imul
ins
gs
bound
arpl
xor
sub
push
mov
push
lea
call
pusha
pushf
push
lea
jae
clc
pushf
bt
clc
sub
jmp
add
inc
jb
popa
je
dec
outs
jne
add
push
gs
imul
outs
outs
imul
add
add
outs
inc
push
add
leave
mov
pushf
pusha
pushf
lea
call
pushf
call
add
inc
gs
gs
arpl
popa
jo
add
add
je
imul
outs
jb
mov
pushf
mov
lea
jmp
call
pushf
mov
push
mov
pushf
push
ret
add
inc
imul
add
inc
outs
jo
inc
arpl
ins
gs
je
jb
popa
bound
add
lds
hlt
pop
mov
jae
xchg
jmp
sub
xor
int3
retf
mov
(bad)
repz
adc
xchg
pusha
push
movs
inc
sub
jae
mov
nop
data16
jmp
in
pop
sahf
mov
jecxz
or
add
push
mov
(bad)
into
out
mov
pusha
push
mov
pushf
push
mov
movsx
lea
call
xchg
xor
push
cmp
add
pushf
leave
mov
rcl
aad
retf
scas
repz
push
adc
add
and
xchg
xor
add
popf
mov
cmp
outs
pop
stos
lea
mov
fisub
push
das
sbb
inc
das
out
shl
add
shr
dec
jno
stos
xchg
lds
fmul
fsubr
repnz
enter
(bad)
out
mov
adc
inc
push
xchg
retf
and
dec
cmp
mov
dec
inc
ror
mov
sti
mov
mov
int3
ret
stos
shr
mov
movs
stc
in
adc
test
cs
das
inc
xor
xor
and
cli
jmp
fst
ret
mov
mov
mov
shr
call
push
lea
jb
test
jmp
jmp
add
dec
je
jo
outs
fs
gs
gs
inc
add
mov
cmp
test
lea
jge
pusha
cmp
call
add
inc
js
popa
outs
fs
outs
jbe
jb
outs
ins
outs
je
je
imul
add
outs
bound
inc
ins
popa
addr16
add
dec
je
jo
jo
outs
push
gs
gs
inc
add
fadd
in
aam
and
mov
adc
dec
outs
push
mov
xchg
and
(bad)
cld
in
cmp
pop
xor
test
pusha
mov
fs
icebp
loop
sti
in
loope
(bad)
repnz
and
sub
lahf
mov
sbb
pop
dec
push
dec
dec
xor
mov
(bad)
jmp
ja
jbe
dec
jne
inc
gs
jne
inc
gs
add
add
imul
add
add
jbe
dec
jne
push
outs
jo
gs
jb
dec
gs
fs
add
inc
jb
popa
je
inc
jbe
outs
je
add
add
outs
bound
push
gs
ins
ins
outs
arpl
hlt
fcmove
jmp
mov
pop
cmp
cwde
xchg
loope
sti
push
stc
or
cmp
push
inc
outs
pop
mov
adc
shl
loopne
leave
mov
sbb
mov
lods
mov
pop
inc
jl
call
ror
cmp
pop
inc
stos
retf
adc
cmps
xchg
adc
xchg
mov
rol
std
jmp
or
test
cld
les
jo
xchg
pop
in
adc
popf
movs
repnz
jno
dec
jne
push
int
cmp
pop
dec
fs
imul
mov
(bad)
lock
jo
movs
xchg
inc
lods
cdq
sub
sti
push
cmp
push
jne
aas
dec
cmp
retf
or
or
sub
dec
xor
dec
mov
fist
mov
fwait
inc
dec
dec
inc
push
dec
xor
cs
ins
add
pop
and
pushf
mov
pushf
lea
jmp
add
push
jb
outs
jae
popa
je
inc
arpl
ins
gs
je
jb
add
add
je
imul
je
lea
pushf
pushf
pushf
pushf
mov
mov
mov
pushf
pushf
push
push
push
ret
add
push
popa
jbe
inc
inc
add
cwde
and
inc
sub
push
inc
mov
xor
mov
fimul
rcl
retf
or
cwde
sbb
add
add
xor
cwde
add
sub
ds
mov
mov
stos
out
cwde
int3
int
dec
sub
test
fstp
aad
mov
movs
das
pop
daa
xchg
push
out
mov
out
retf
sub
cwde
push
or
in
loopne
scas
call
lods
mov
sbb
rcr
dec
xchg
sub
popa
mov
xchg
call
lods
mov
or
xchg
mov
pop
mov
lea
xchg
xchg
jo
lods
jno
sub
push
retf
out
sbb
je
rcr
mov
xchg
cwde
push
lock
fmul
inc
dec
push
cwde
and
lods
cmp
cwde
out
cmp
add
xlat
mov
fwait
adc
add
cwde
add
mov
lahf
ss
inc
push
push
inc
es
dec
or
inc
mov
enter
jo
outs
iret
imul
repz
xchg
cmp
inc
sti
movs
arpl
je
outs
jns
call
or
push
out
cwde
sub
jno
sub
jmp
push
and
jp
push
add
inc
adc
dec
jo
mov
cdq
mov
dec
outs
sub
or
(bad)
mov
add
into
jmp
xchg
or
jecxz
sub
outs
jae
je
fcomp
rcr
mov
push
xchg
iret
scas
fnstsw
jo
inc
loopne
(bad)
jo
lock
ret
sti
push
jb
inc
or
push
pop
mov
scas
cmp
dec
rcl
mov
inc
add
cwde
outs
ja
nop
popa
rcl
add
addr16
aad
test
gs
repz
out
xchg
sbb
inc
dec
fwait
loopne
sbb
fidivr
sbb
cwde
jmp
dec
adc
dec
mov
mov
xchg
inc
cwde
cmp
dec
push
shl
cwde
test
xor
mov
dec
push
adc
es
cwde
retf
pop
pop
imul
loope
inc
neg
pop
and
sub
inc
sub
repnz
xor
fcmovnbe
stos
ret
ret
fisub
aas
bound
cwde
rol
scas
jnp
jp
xchg
jns
test
std
rol
jg
leave
test
mov
cwde
push
cli
dec
jns
xor
add
and
test
and
jo
cwde
push
int3
jle
repz
aas
jo
out
lods
rcl
in
pop
lock
xor
je
push
mov
dec
add
out
add
ds
arpl
ficomp
leave
add
and
aaa
in
mov
repnz
pop
jecxz
or
inc
push
fdivrp
adc
out
cwde
shl
cmps
inc
xor
or
cs
sbb
repz
cwde
cmp
push
adc
jne
xchg
mov
cwde
mov
sub
imul
cmp
cmps
cmp
cmp
cwde
dec
xchg
fs
dec
pop
call
adc
dec
push
pop
cmp
mov
pop
pop
cmp
pop
jns
es
dec
mov
dec
mov
cwde
xor
stos
push
out
sbb
add
jl
adc
cmp
lods
std
push
cwde
dec
jbe
movs
mov
retf
push
pop
jne
pop
div
fsub
movs
mov
mov
cmp
int3
jecxz
std
(bad)
hlt
push
xchg
pop
sub
cwde
ja
mov
mov
inc
add
inc
ins
je
inc
mov
mov
imul
into
(bad)
cwde
push
cmc
rol
cmps
repnz
xchg
mov
clc
fsub
cwde
cld
(bad)
int3
loopne
(bad)
cmp
(bad)
push
inc
sbb
ins
cwde
pop
shr
sbb
mov
test
cmps
xor
pop
cwde
and
repz
add
sub
(bad)
xchg
rcl
inc
fsub
test
sub
gs
mov
push
sub
cmp
xor
neg
sbb
int3
cwde
imul
call
mov
and
sahf
sub
scas
idiv
test
outs
scas
shr
add
cld
enter
cmp
xchg
cs
sbb
aad
pusha
push
setle
(bad)
or
fucomip
cwde
repnz
loope
xchg
popa
(bad)
repz
mov
loopne
retf
and
imul
adc
pop
call
cmp
nop
jno
dec
call
jecxz
cmp
sub
jle
jl
xchg
mov
dec
out
out
bound
imul
inc
stos
pop
cdq
call
(bad)
mov
jmp
cwde
into
fdiv
ficomp
add
or
call
mov
cwde
outs
dec
cdq
mov
scas
mov
std
in
sbb
mov
jae
dec
sbb
xchg
and
push
mov
cdq
data16
xlat
fldenv
pop
xchg
xor
dec
pop
pop
xchg
pusha
js
mov
add
or
nop
mov
cli
xchg
mov
call
cwde
push
mov
mov
adc
je
and
rcl
sub
jbe
scas
jmp
adc
ja
fsubr
fwait
cmps
or
inc
sbb
push
jmp
je
and
cmp
cwde
adc
xor
mov
mov
cwde
mov
push
push
or
sbb
inc
pusha
js
outs
xor
mov
cmp
sbb
jecxz
inc
inc
add
call
stos
and
pop
inc
cmp
sub
jno
shl
mov
pop
sub
je
clc
not
cwde
cmp
clc
rol
cwde
add
cmp
lock
adc
pop
(bad)
into
shl
test
xlat
or
gs
cmc
sbb
dec
mov
xchg
out
xchg
les
adc
mov
jl
ins
mov
aad
icebp
inc
pusha
pop
and
pop
aam
cwde
scas
cmp
lods
sahf
sub
pop
mov
jbe
sbb
fcomp
jo
(bad)
jle
mov
rol
frstor
or
mov
push
cwde
add
xor
adc
iret
loopne
movs
cwde
jo
add
stc
inc
pop
das
cwde
push
jns
test
(bad)
jmp
ds
pop
into
cwde
sub
mov
arpl
sbb
inc
pslld
mov
icebp
test
loopne
std
add
movs
mov
jbe
xchg
xchg
pushf
fs
mov
xor
and
pushw
cwde
test
(bad)
fs
dec
push
sub
mov
rcl
add
mov
mov
out
cmp
jecxz
fistp
inc
mov
cwde
int
push
imul
pop
add
adc
push
jb
stos
push
push
sub
loop
clc
sbb
(bad)
mov
test
cwde
adc
(bad)
fcomi
sbb
xchg
icebp
fstp
in
dec
ret
test
xor
movs
sbb
fidivr
popa
pop
inc
xchg
lods
pop
mov
out
and
jnp
icebp
int
xchg
push
jmp
inc
pop
repnz
sbb
xchg
mov
sbb
jecxz
xor
or
pop
loop
mov
sbb
pusha
aad
xchg
inc
es
cdq
jne
adc
out
push
and
sub
adc
in
inc
adc
push
cmp
test
dec
push
inc
pop
ins
cmp
push
and
call
test
cld
jb
xchg
mov
movs
mov
sub
cwde
jp
add
jne
push
lahf
into
adc
scas
mov
call
xchg
fidivr
cmp
pop
iret
and
dec
push
in
xchg
(bad)
pop
cmp
test
pop
call
jle
jns
cwde
push
stos
xchg
mov
sub
xchg
sub
icebp
call
gs
xchg
mov
jmp
cwde
out
jns
jnp
mov
sub
(bad)
lahf
pop
cmp
cwde
or
ja
jg
cmp
(bad)
mov
mov
and
sbb
gs
lock
test
adc
aas
cwde
or
jno
dec
push
adc
popf
rcr
mov
repnz
push
inc
sub
pop
mov
cwde
movs
and
pop
push
sub
fcmovb
dec
or
jl
pop
iret
xlat
sub
int
push
fcom
scas
cmp
mov
aas
sti
je
sub
cdq
mov
movs
dec
push
xchg
jae
inc
and
shl
push
sbb
test
cwde
dec
mov
sbb
js
xchg
xchg
cwde
cmp
mov
push
vandps
cwde
sbb
sti
ss
mov
sbb
(bad)
lea
js
shl
stos
cmc
or
icebp
(bad)
jmp
cwde
add
test
cwde
mov
(bad)
pop
ficomp
xor
mov
push
adc
rcl
mov
xchg
jl
(bad)
outs
jnp
(bad)
push
outs
cwde
dec
add
repnz
bound
xchg
mov
rcl
pop
les
ja
dec
outs
stc
cwde
jg
in
jb
mov
and
sbb
imul
xchg
loope
sub
js
leave
cwde
and
add
and
inc
sub
pop
scas
icebp
clc
shr
mov
xchg
push
lock
adc
aad
xlat
add
pushf
dec
sub
cwde
aas
jbe
sahf
outs
fild
cwde
fwait
jae
inc
sti
loop
lods
cwde
repz
ss
inc
fadd
cwde
out
add
push
in
sbb
in
adc
retf
xchg
or
sbb
out
iret
jne
cwde
mov
ds
sbb
inc
sbb
cwde
mov
push
mov
fidivr
cwde
jo
cmps
jb
pop
(bad)
int3
mov
inc
pusha
pop
popf
out
inc
cmps
and
jno
push
mov
fisttp
dec
push
push
sub
sbb
retf
cli
jle
div
jmp
arpl
int3
cwde
inc
sbb
enter
xor
xchg
retf
jns
call
xchg
push
add
mov
mov
cwde
pop
and
sets
lds
jl
int
push
fist
and
jns
cwde
mov
fwait
mov
sbb
sbb
cwde
hlt
clc
into
std
and
push
cwde
rcr
nop
xor
lds
push
rcr
stc
pop
cld
outs
push
test
and
call
out
pop
aaa
movs
jo
out
test
sub
inc
bound
push
(bad)
(bad)
cmp
xchg
sahf
or
mov
call
fist
pop
(bad)
cmp
mov
mov
out
in
cmc
pop
add
sub
cwde
ja
pusha
xchg
outs
jb
fwait
xchg
or
sub
popa
sti
cmps
in
leave
cwde
inc
xor
xchg
mov
xchg
mov
xchg
nop
scas
outs
inc
pop
inc
loopne
stos
push
test
add
xor
push
call
or
in
jbe
call
ins
and
shl
fdiv
daa
cmp
cwde
jnp
out
cmp
cmps
sub
call
popa
mov
call
xor
add
ins
bound
mov
mov
xchg
movs
mov
scas
push
pop
pop
adc
xchg
pop
and
push
dec
gs
lods
(bad)
cld
sbb
fidiv
movs
mov
cwde
into
test
push
fcom
sub
mov
fsubr
cwde
pop
aas
shl
loope
pop
pop
and
outs
js
and
mov
fidivr
pop
das
xor
in
mov
sbb
xchg
xchg
xchg
jo
test
(bad)
mov
fistp
add
cmp
mov
adc
es
cwde
iret
fnsave
sbb
fistp
repz
clc
push
pop
and
cwde
pop
dec
push
pop
and
jbe
inc
(bad)
sahf
scas
mov
xor
sbb
je
adc
push
stc
cwde
fmul
shl
clc
sub
pop
cwde
xor
dec
pop
arpl
xchg
xchg
mov
movs
in
sbb
push
pop
mov
neg
stc
and
push
xchg
pop
cs
cmp
retf
gs
dec
push
loop
mov
shl
arpl
xor
mov
sar
enter
(bad)
pushf
scas
in
icebp
ret
pop
es
sub
das
cwde
push
and
test
jnp
adc
out
adc
test
lods
cwde
xchg
mov
xchg
pop
cwde
ret
pop
mov
ja
or
xchg
stc
ret
movs
call
lods
and
xor
add
add
call
sti
sbb
into
ja
ret
mov
push
(bad)
xor
inc
cwde
mov
(bad)
mov
cwde
(bad)
popa
nop
fldcw
pop
mov
cwde
int3
mov
add
pop
aaa
pop
cwde
(bad)
push
mov
(bad)
fistp
mov
cmp
movs
cwde
mov
daa
aaa
sbb
lahf
cmp
pop
scas
test
mov
xchg
xchg
inc
sbb
dec
push
cmp
cmp
xchg
repnz
inc
mov
nop
xchg
xchg
fs
mov
and
cmp
add
mov
xor
cdq
gs
daa
fdivr
enter
cwde
in
leave
or
out
test
stc
fcomp
jno
xor
aas
push
loop
cmp
add
dec
push
jmp
into
movs
retf
sbb
push
cli
adc
push
in
adc
cwde
es
pop
xor
cwde
ja
int3
and
sbb
jmp
cwde
out
test
pop
inc
add
mov
fucomp
fsubr
aaa
inc
sub
xchg
es
icebp
test
xchg
jae
scas
cmc
(bad)
fisub
cld
xchg
adc
mov
shr
jecxz
cmp
inc
xchg
das
pop
cmp
push
and
dec
sub
and
in
sets
cli
or
and
or
mov
pop
sub
loopne
aad
in
mov
and
scas
sbb
cmp
xor
cwde
js
push
sbb
aas
rcl
sbb
xor
xor
push
add
pop
mov
(bad)
popa
ins
jno
pop
inc
fild
fmul
stos
pop
sub
mov
inc
add
mov
scas
mov
dec
push
cwde
jl
ins
dec
jno
cmp
xchg
cmps
dec
test
jmp
cld
jo
out
or
retf
fdiv
neg
mov
push
dec
mov
push
mov
pop
lea
int
push
repz
cwde
pusha
xor
fs
add
aaa
cwde
std
ret
fchs
cmps
mov
sub
or
and
cdq
loopne
lock
xchg
aas
or
call
(bad)
xchg
out
out
xchg
mov
ins
dec
fstp
pop
pop
jg
jmp
mov
mov
mov
pop
jnp
pushf
loop
pop
inc
ds
pop
sbb
(bad)
(bad)
push
cld
xor
fbstp
ja
scas
and
xchg
pop
xchg
mov
clc
outs
test
jne
cmps
dec
cdq
daa
mov
psubusb
xchg
sub
push
(bad)
(bad)
iret
gs
inc
and
push
push
test
sbb
xchg
jno
push
add
(bad)
leave
jecxz
sbb
adc
xchg
mov
scas
mov
shl
add
sbb
out
std
in
inc
sbb
cmps
pop
rcl
mov
repz
jmp
jbe
push
push
cwde
jnp
(bad)
mov
fsub
add
retf
xchg
outs
dec
push
in
jmp
sbb
fs
(bad)
xchg
mov
cwde
ins
test
fsubr
xlat
mov
mov
sub
jp
cwde
mov
mov
lods
mov
add
fs
lahf
imul
mov
push
es
or
cmp
movs
sets
jmp
in
xor
push
push
mov
addr16
(bad)
push
scas
loope
je
xor
ja
mov
or
add
mov
outs
mov
cwde
sub
repz
in
cdq
push
adc
push
call
call
out
sbb
(bad)
jne
and
push
ja
adc
rol
sbb
dec
pop
pop
sub
mov
mov
push
jle
call
je
adc
les
scas
sub
mov
cmp
rol
repz
or
cs
das
cmp
rcr
mov
cwde
and
xlat
outs
jns
cdq
xchg
dec
xchg
push
push
pop
movhps
cwde
arpl
imul
aad
mov
or
int
xchg
sbb
das
xor
aad
mov
sub
jp
sbb
popa
jmp
xlat
mov
mov
pop
push
mov
cwde
test
mov
jne
call
jmp
ins
aam
inc
push
retf
sub
lock
rol
fadd
pop
adc
pop
ds
cwde
ret
neg
push
inc
ss
or
leave
inc
pop
jo
sahf
cwde
xor
(bad)
inc
mov
clc
mov
xchg
mov
cwde
outs
ja
push
sbb
pop
and
fwait
imul
push
mov
cwde
mov
out
pop
in
xchg
out
push
cwde
mov
xchg
xor
add
outs
jl
inc
push
stos
scas
mov
push
pop
cmp
outs
popf
jno
outs
pushf
fsub
xchg
lock
cwde
nop
imul
pop
xor
inc
mov
call
cmp
icebp
arpl
mov
adc
push
imul
mov
or
add
out
mov
imul
mov
fsubr
push
cwde
aad
cmp
lea
in
add
outs
scas
cwde
shr
jecxz
and
pop
push
shr
pop
cwde
push
enter
cwde
bound
outs
es
cmp
out
mov
push
popf
fst
sub
dec
sub
xchg
mov
cwde
aad
fdivp
retf
pop
call
jmp
cdq
xor
cwde
sbb
out
js
stos
iret
and
hlt
add
and
adc
pop
cli
inc
and
and
mov
sbb
stos
adc
movlps
cmp
hlt
mov
pop
and
cwde
jl
lods
mov
les
xchg
cdq
mov
dec
clc
push
fnsave
lods
xchg
inc
into
mov
xchg
sub
or
xlat
stc
sbb
hlt
(bad)
dec
sahf
fadd
cdq
retf
push
in
and
jecxz
push
sbb
and
test
dec
push
cwde
(bad)
xchg
sub
inc
cwde
xchg
in
test
push
mov
push
sub
xchg
cwde
(bad)
adc
cs
push
pop
inc
loopne
mov
jl
push
and
cwde
aam
adc
jmp
fs
sub
bound
xchg
mov
int
fnstcw
cmp
cmp
scas
xchg
mov
mov
cwde
or
into
cs
stc
cwde
add
and
adc
xor
popa
aas
add
and
cli
mov
and
pop
sub
data16
push
cmp
adc
cli
add
mov
retf
xchg
adc
mov
loope
mov
cs
cmp
cwde
aaa
mov
ret
aad
sub
or
or
mov
sbb
popf
mov
(bad)
fsub
mov
cwde
jae
cs
in
mov
cmps
jmp
stc
rcl
in
loopne
push
cwde
sub
sbb
and
cmps
mov
rol
repnz
je
call
xchg
push
push
jns
push
adc
(bad)
out
cmp
mov
sbb
cwde
mov
(bad)
shl
jecxz
nop
inc
or
mov
sti
cwde
rcl
in
fld
arpl
retf
retf
pop
ds
pop
(bad)
lods
pop
cmps
inc
ficom
repnz
cld
xchg
mov
into
aad
mov
push
push
cmc
sbb
jo
jge
xchg
clc
xor
clc
and
in
cwde
repnz
sub
inc
je
imul
push
push
and
les
cmp
and
and
or
sub
mov
sub
out
inc
popf
sub
aad
adc
push
cwde
mov
sbb
push
jmp
cmc
ret
cdq
daa
push
push
fdivr
cwde
sub
sub
lock
lods
(bad)
jns
xchg
cmp
js
loopne
cwde
out
jno
inc
push
dec
push
cwde
test
mov
inc
push
dec
cwde
mov
lods
cwde
fcomp
shl
jp
dec
cwde
test
mov
sbb
mov
rcl
fst
cdq
or
fcomp
inc
push
jle
ins
or
cwde
mov
fidiv
push
jmp
test
dec
mov
ret
loopne
sub
shl
pop
sub
fnstenv
out
mov
jmp
div
push
and
jnp
sbb
int
in
and
sub
mov
aas
push
and
iret
js
cwde
arpl
xor
popf
pop
inc
push
dec
ja
(bad)
mov
out
add
shr
push
call
fcomp
mov
or
xchg
xchg
jle
fs
mov
call
loop
fst
cwde
adc
mov
outs
xchg
nop
mov
fdiv
push
adc
pop
sbb
and
cwde
xchg
int
ss
jbe
push
lods
mov
shl
vpaddsb
ret
stos
xor
push
addr16
cwde
xchg
movs
xor
fdiv
xchg
sar
cld
or
add
cwde
inc
(bad)
mov
lds
retf
dec
cmp
stos
cwde
push
push
sub
sub
lods
xchg
imul
and
xchg
stos
mov
sbb
adc
bswap
add
mov
xor
mov
cmp
dec
sbb
leave
inc
xchg
jne
call
mov
dec
cs
sub
ret
repnz
sub
inc
pop
mov
fcom
(bad)
xchg
lds
es
fcom
xchg
outs
test
mov
(bad)
scas
loope
add
dec
(bad)
xchg
mov
lahf
xchg
ins
test
inc
push
out
popf
push
sar
mov
inc
or
mov
sub
cmc
ficomp
jae
push
mov
add
fld
js
inc
pop
mov
inc
xchg
loop
aam
out
mov
push
(bad)
and
jne
or
xchg
mov
cmp
sub
dec
mov
mov
stos
and
push
xor
ds
add
jnp
enter
clc
leave
xchg
xchg
retf
jbe
inc
adc
ds
add
lods
push
add
cwde
in
imul
rol
xor
mov
push
add
icebp
jne
iret
jns
cwde
jmp
fisubr
push
jle
cmc
fs
and
add
popf
cwde
mov
enter
push
xchg
adc
or
dec
pop
mov
or
cwde
ins
and
(bad)
imul
mov
cli
mov
popf
test
jmp
pop
xchg
pusha
cs
ror
test
(bad)
cwde
mov
call
aas
fs
int3
dec
and
jnp
jbe
xor
jmp
mov
dec
data16
jae
popa
jp
or
and
stc
cwde
cmp
aas
jge
ins
push
int3
fcom
xor
pop
outs
xchg
mov
aad
jnp
cmp
xchg
retf
ficom
pop
popf
and
dec
clc
(bad)
jg
test
imul
and
fldlg2
cwde
int3
aam
or
cwde
inc
nop
xchg
movs
mov
scas
fistp
movs
push
(bad)
fxch
xchg
mov
xchg
cmp
mov
mov
add
stos
xor
sub
sbb
mov
popa
lock
lods
aam
or
xor
pusha
shl
(bad)
in
std
cwde
mov
push
cwde
dec
xlat
fwait
xor
cwde
push
push
sbb
pop
adc
scas
cwde
pop
shl
jnp
sbb
sbb
sbb
ficomp
sti
into
sahf
push
cmp
mov
fcmovnbe
xchg
jno
in
jle
xor
(bad)
xchg
cwde
popa
cdq
xchg
cwde
mov
rcl
fs
push
es
js
jle
cwde
popf
dec
into
xor
jnp
mov
xchg
addr16
stos
mov
aad
cld
sbb
xchg
pop
loop
add
inc
das
fdivr
add
xchg
loope
adc
clc
or
clc
mov
dec
rcl
sub
pusha
imul
(bad)
in
cwde
sbb
mov
in
cwde
iret
sub
xchg
jmp
(bad)
mov
xchg
addr16
imul
sahf
dec
add
jl
into
stos
in
sbb
lods
out
inc
sbb
in
sbb
fidiv
outs
cwde
fcmovne
shl
(bad)
in
cwde
cmps
cmps
mov
shr
test
jl
jp
dec
adc
in
mov
data16
xchg
aaa
inc
mov
mov
mov
push
bnd
lods
mov
mov
pop
dec
ss
inc
sub
cwde
loop
lods
inc
pop
push
xor
cdq
pop
lock
mov
fsubr
(bad)
jmp
and
sub
jb
(bad)
xor
in
and
cwde
cld
mov
aaa
sbb
sub
ja
and
dec
pop
rcr
idiv
hlt
popw
adc
push
mov
xchg
imul
clc
add
sub
push
mov
push
out
dec
xchg
inc
push
dec
mov
pop
arpl
pop
inc
(bad)
in
loopne
int
out
cld
fwait
dec
call
xchg
mov
(bad)
dec
test
out
icebp
iret
adc
mov
sub
xchg
jp
cs
inc
das
icebp
lods
jo
sbb
fimul
fadd
mov
aaa
xlat
popa
call
xchg
or
cdq
jmp
jecxz
pop
sub
aas
cwde
add
and
addr16
mov
cwde
jp
jnp
mov
std
neg
sbb
mov
iret
call
test
stos
or
std
(bad)
fsubr
sahf
push
scas
daa
aaa
sbb
push
sub
push
dec
mov
and
jl
mov
cmc
ret
loopne
xchg
adc
mov
fxam
cld
iret
mov
sbb
inc
sub
lods
mov
sub
pop
int3
dec
mov
popf
lds
rcr
test
sti
sbb
xchg
je
pop
cmp
aaa
xor
jne
aad
test
mov
dec
mov
cmp
cwde
jmp
dec
loopne
push
cwde
jle
bound
mov
xchg
xchg
pusha
or
call
js
cwde
imul
cwde
sti
fstp
sbb
jb
cwde
mov
mov
or
sbb
pop
and
mov
leave
fsubr
dec
call
cwde
mov
out
xchg
push
or
arpl
xchg
into
cwde
neg
sub
fistp
pop
sbb
cmps
and
das
bound
imul
ins
pop
imul
ret
xchg
cmp
mov
ins
lahf
(bad)
jg
mov
cwde
repz
or
cwde
pop
out
xor
enter
mov
(bad)
lock
push
neg
mov
mov
imul
neg
ret
scas
fwait
add
retf
fs
and
add
sub
es
ds
imul
lods
xchg
fstp
int
int3
cmp
lods
lahf
ins
mov
in
mov
sub
lahf
ins
pop
into
sub
sahf
xchg
mov
inc
mov
mov
aam
jmp
jne
adc
push
and
popf
jns
mov
cmp
xchg
xchg
call
push
movs
aam
add
lahf
sub
inc
(bad)
jmp
inc
pop
inc
push
push
fwait
int
dec
pop
mov
out
stc
adc
sti
cwde
push
cmp
out
movs
mov
fwait
mov
mov
jnp
(bad)
xchg
dec
pop
pop
cwde
setno
xchg
leave
inc
add
clc
push
out
sub
popf
data16
cmp
pusha
ret
cwde
movs
mov
fdivr
in
(bad)
call
ds
xchg
das
push
in
mov
fistp
(bad)
inc
or
outs
popf
xor
and
add
dec
cwde
xchg
enter
imul
dec
jg
hlt
mov
mov
mov
clc
outs
add
adc
jnp
aad
or
jge
fwait
and
push
stos
iret
sbb
mov
or
jg
sbb
push
and
jecxz
sbb
xor
lea
cwde
mov
cmp
nop
dec
sub
pop
cmp
ja
imul
cmp
cwde
push
and
push
mov
(bad)
jmp
xlat
cmp
inc
mov
cmp
inc
sbb
mov
repnz
adc
push
imul
cwde
jo
or
push
sbb
pop
test
adc
jl
adc
cs
mov
and
cmp
xchg
data16
adc
mov
cwde
and
sub
sub
xchg
mov
pop
mov
xchg
mov
xor
popf
sbb
pop
mov
lock
mov
add
nop
adc
sbb
add
pop
cdq
or
xchg
sbb
cmp
jnp
jl
and
cmp
inc
cwde
fld
test
xchg
sub
test
(bad)
sbb
sbb
xor
dec
push
and
xchg
popf
sbb
mov
mov
leave
call
cmp
nop
test
xlat
int3
repnz
xchg
aaa
sub
and
jmp
pop
loop
cwde
out
pushf
jecxz
mov
and
icebp
call
test
adc
cwde
xchg
pusha
mov
xchg
fdiv
pop
mov
lods
jmp
jo
adc
sub
pusha
xor
outs
imul
cwde
enter
call
je
xchg
jne
jnp
mov
movs
inc
xor
popf
or
push
or
mov
in
add
das
sbb
cwde
push
pop
outs
jbe
pop
cmp
jne
in
mov
iret
cmp
enter
aad
push
or
in
ss
push
push
rcl
scas
mov
cmp
mov
imul
rcr
leave
push
rol
sti
int3
daa
mov
push
mov
test
or
sbb
pusha
das
xor
or
jno
xchg
xchg
gs
rcr
or
mov
jmp
cdq
sahf
cwde
jg
mov
test
cwde
(bad)
test
mov
xor
push
es
dec
cmp
scas
fwait
push
cwde
addr16
mov
cwde
stos
clc
enter
out
xchg
cmp
sbb
xor
add
aad
lock
movs
cwde
push
cmp
xchg
pushf
rcr
fwait
cmc
(bad)
in
fs
push
xor
dec
pop
int
mov
xor
mov
neg
add
cld
add
push
or
push
cwde
add
rol
fldln2
cwde
mov
cmp
ja
call
push
jmp
mov
cmp
cld
into
ds
clc
sub
mov
mov
out
stc
sbb
in
inc
cwde
(bad)
pusha
xchg
mov
sub
mov
ja
adc
jle
jg
test
call
call
dec
scas
mov
cwde
mov
mov
neg
jmp
add
cmp
adc
aaa
rol
push
jp
dec
pop
test
pop
jmp
shl
loop
mov
cmc
cwde
int3
in
out
cli
and
pusha
xchg
sub
xchg
jp
push
cwde
out
adc
sbb
xchg
into
cmps
mov
xlat
xchg
xor
enter
adc
scas
mov
cwde
in
out
clc
dec
inc
pop
jo
jbe
addr16
cli
fbstp
dec
jne
mov
pushf
mov
xchg
xor
ins
dec
jae
sub
cwde
inc
sub
popa
bound
cmp
pop
cwde
pusha
data16
imul
into
dec
cmp
xor
dec
pushf
mov
xchg
iret
dec
cdq
mov
mov
xchg
fild
retf
ins
(bad)
scas
fcomp
ins
push
cwde
retf
jbe
cs
jns
vandps
sub
xor
shl
cwde
inc
jp
mov
(bad)
lods
jmp
jecxz
dec
ins
shl
cmc
fwait
movs
cwde
retf
dec
push
and
arpl
inc
inc
pop
cwde
jp
cs
xchg
sub
mov
repz
push
xchg
dec
xchg
jp
fnstenv
sbb
add
xchg
push
in
xchg
cmp
inc
int3
out
sub
cmp
lahf
bound
push
fbld
jns
add
test
sbb
sbb
sbb
retf
jp
cwde
loop
mov
mov
outs
test
mov
and
inc
sub
addr16
data16
xchg
cdq
fs
mov
inc
cwde
adc
xchg
cdq
outs
jb
repnz
mov
mov
fisubr
add
call
shr
sbb
push
adc
fadd
cwde
sbb
push
jne
mov
xchg
js
jg
xlat
xchg
and
hlt
pop
xor
(bad)
xlat
mov
cwde
(bad)
movs
mov
and
xchg
cmp
lds
cmp
test
pushf
clc
mov
and
pop
movs
mov
not
out
nop
loope
lock
jmp
inc
jge
xchg
xchg
bound
fldenv
ja
push
xor
test
push
mov
jp
(bad)
or
jb
xchg
out
add
push
xchg
mov
sbb
fmul
in
stos
aad
movs
out
adc
push
xor
jmp
and
inc
call
xchg
test
and
or
xchg
pop
outs
cbw
int
adc
aaa
adc
sbb
dec
push
or
xchg
mov
(bad)
dec
jle
push
jae
push
dec
movs
stos
xchg
fmulp
out
adc
push
mov
frstor
cmp
div
jl
push
xchg
pop
sbb
iret
fdivr
retf
xor
pop
mov
xchg
mov
ins
pop
cwde
fwait
mov
fcom
outs
pop
xchg
js
scas
mov
stos
sbb
call
xor
pop
and
jbe
cmc
xor
xchg
inc
retf
xchg
cwde
jp
out
cwde
mov
(bad)
(bad)
js
dec
out
stos
fcmove
adc
sbb
test
(bad)
in
xor
sub
out
sahf
mov
dec
push
dec
pop
daa
dec
adc
add
mov
cmp
call
inc
cmp
jbe
cwde
add
retf
jb
xchg
or
push
cs
sub
mov
enter
mov
cmp
cwde
jae
lahf
mov
out
iret
movsx
jmp
xchg
push
sub
push
cmp
lods
xchg
jo
xchg
out
adc
cwde
xchg
sbb
aad
jl
mov
dec
pusha
adc
jecxz
std
push
mov
dec
pop
dec
push
movs
clc
fisubr
mov
fdiv
push
mov
retf
sub
mov
movs
or
loopne
fistp
loop
aas
adc
mov
and
lahf
push
repnz
dec
add
sbb
(bad)
mov
cwde
jge
push
sub
sub
mov
cmps
aad
sti
xchg
ret
or
sbb
or
pusha
jmp
jecxz
mov
push
fcomp
bound
mov
inc
cwde
cmps
call
cwde
pushf
cmp
ds
cwde
into
ror
imul
fst
test
mov
repz
sbb
sbb
inc
ins
cwde
dec
pop
push
shr
pop
adc
arpl
sbb
jnp
cwde
test
ins
in
cmps
(bad)
rcr
or
test
cmps
mov
pop
sbb
js
lahf
test
push
and
fdivr
dec
push
adc
jne
mov
int
cwde
mov
cmps
(bad)
std
into
sar
das
cwde
xor
jg
imul
xor
scas
scas
fsub
cmp
fs
js
clc
inc
pop
cwde
sub
ficom
sbb
movs
mov
xchg
les
xor
pop
push
push
mov
add
out
cdq
fld
mov
out
aam
out
or
cwde
sbb
or
lahf
lods
inc
mov
cwde
into
fdiv
jge
mov
sub
jp
stos
imul
inc
je
ror
daa
loop
dec
mov
inc
inc
cwde
sub
push
pop
xchg
aad
jecxz
out
icebp
fcom
mov
dec
mov
push
int
pop
sub
popf
xchg
in
mov
mov
cwde
adc
cwde
or
or
js
xchg
loopne
scas
mov
aas
sbb
test
enter
stos
out
sbb
sub
dec
mov
daa
adc
xchg
push
cld
sub
or
and
sbb
and
or
push
mov
test
xchg
jecxz
cwde
mov
sbb
adc
pop
popf
mov
sbb
cmp
mov
loopne
(bad)
mov
rcr
in
icebp
lock
jmp
xor
mov
mov
scas
cwde
retf
lods
sub
rol
adc
inc
push
cmc
fimul
out
inc
into
pop
sbb
jae
mov
dec
pushf
sub
test
std
clc
jmp
inc
xchg
push
and
push
push
sub
dec
push
inc
pusha
data16
sbb
retf
repz
and
push
cmp
inc
test
lock
sub
dec
inc
push
pop
fmul
movs
outs
fst
xchg
or
xchg
ja
mov
call
and
test
cwde
jne
(bad)
xor
(bad)
sbb
fisubr
fnstsw
or
movs
fxch
inc
mov
and
cwde
les
pop
hlt
out
in
test
imul
nop
cwde
or
into
lods
aad
rcl
cs
inc
cwde
xchg
dec
pushf
ins
test
stos
fdivr
cwde
pop
dec
loopne
(bad)
repz
fwait
xor
and
cmp
and
pop
lods
dec
cwde
inc
add
lods
sbb
bound
adc
aaa
jp
inc
pusha
and
mov
or
jbe
mov
mov
inc
fs
jnp
data16
mov
mov
sbb
mov
adc
in
cwde
add
xchg
push
adc
or
js
scas
mov
add
inc
jmp
dec
push
pop
test
ss
mov
aam
int3
cs
xor
xchg
pusha
ror
push
daa
xchg
or
stos
(bad)
pop
cwde
mov
(bad)
xchg
dec
clc
sub
pop
cwde
aas
push
fwait
std
cmps
adc
lea
cwde
(bad)
(bad)
(bad)
loopne
rcr
repnz
inc
xchg
add
pop
daa
or
cmp
mov
data16
dec
xchg
pop
and
pop
sbb
int3
adc
adc
mov
fisttp
retf
mov
push
cmps
cmp
cwde
rcl
sub
cwde
inc
vdivsd
mov
fwait
mov
shr
xchg
inc
ret
loop
out
inc
sbb
fnstsw
lock
call
loop
out
les
outs
mov
push
les
cwde
outs
xor
adc
inc
push
mov
loope
pop
imul
sbb
movs
mov
xor
fcmovne
aam
sahf
cmp
enter
cwde
adc
std
(bad)
out
cld
xor
inc
lahf
scas
fcomip
jge
shl
leave
ins
and
in
out
and
or
fld
pop
fdivrp
lock
push
cbw
sbb
clc
mov
inc
rcl
stc
test
fnstenv
inc
xor
sub
sti
ins
mov
sub
push
(bad)
lahf
and
mov
push
pop
sub
xchg
push
dec
push
dec
push
inc
fdiv
retf
add
add
test
in
add
pushf
arpl
retf
mov
fld
push
xchg
cmp
mov
div
int3
mov
cwde
jmp
xor
sub
out
cdq
jmp
dec
fs
popf
xchg
xchg
push
or
mov
loope
cwde
in
ins
je
xchg
fcomp
pushf
xchg
test
and
loop
or
inc
je
fdivr
xlat
xor
xchg
fptan
(bad)
out
cli
xor
dec
cwde
dec
sub
pop
inc
push
ins
jb
fwait
fs
xchg
mov
rol
lahf
and
jp
call
xchg
adc
ret
cs
cmps
stc
je
sub
pusha
ins
test
mov
ror
xchg
test
mov
lea
push
push
adc
pop
sbb
call
test
loopne
mov
rcl
ret
movs
stc
(bad)
stos
test
std
sbb
cwde
(bad)
and
push
ins
ret
mov
mov
(bad)
mov
movs
sbb
add
test
xor
es
loop
cmp
sub
cmp
cwde
div
movs
mov
(bad)
loopne
sbb
xchg
outs
ficom
xchg
dec
nop
adc
mov
mov
cmp
mov
xchg
in
retf
xchg
or
cmc
outs
js
sbb
cwde
loopne
dec
sub
call
push
lds
dec
xchg
xchg
add
add
push
cdq
aad
xchg
sbb
jmp
dec
ins
sar
cwde
xchg
outs
xchg
div
mov
stos
mov
mov
(bad)
loop
jmp
add
xor
add
test
leave
sub
aad
(bad)
(bad)
adc
loope
jecxz
push
(bad)
mov
pop
cwde
mov
rol
mov
sub
cwde
jb
jbe
pushf
scas
mov
leave
in
fstp
mov
jg
retf
int
aad
fst
test
inc
lock
ds
add
and
pop
mov
or
xchg
ret
cmc
sub
call
mov
pusha
imul
cwde
cmp
sub
sub
jp
pop
jns
pop
stos
or
aas
mov
and
aad
dec
cwde
sbb
mov
and
pop
(bad)
lods
sbb
pop
sub
pusha
cmp
call
out
into
nop
jecxz
rcr
jnp
pushf
or
stos
or
inc
jne
inc
dec
loope
pop
scas
mov
shl
in
test
xor
sub
or
aaa
mov
into
sub
jbe
mov
fnstsw
cwde
xor
lahf
mov
sub
pop
jno
mov
nop
sbb
inc
cmps
std
add
(bad)
sti
popa
dec
inc
cdq
enter
xchg
jnp
xchg
or
jae
sub
shl
aam
fistp
mov
push
or
mov
mov
sbb
cmps
(bad)
mov
mov
mov
arpl
idiv
(bad)
lods
pop
xchg
dec
mov
ret
int3
and
enter
shl
cmp
stos
or
sub
xchg
sub
int
enter
xchg
dec
or
dec
adc
(bad)
aas
test
ins
leave
call
popa
or
adc
push
bound
cmp
loope
and
sub
push
movs
mov
cmp
or
(bad)
das
or
sbb
and
add
bound
cmp
pushaw
add
jecxz
cmp
inc
mov
rcr
sbb
dec
jbe
and
(bad)
jmp
jl
xchg
out
sbb
xor
push
mov
mov
cwde
aam
xchg
push
je
xchg
mov
scas
(bad)
push
hlt
jecxz
xchg
dec
enter
fnstcw
out
cmc
aaa
add
es
pop
cwde
jmp
cmp
das
jno
pop
cwde
pop
int3
jb
inc
push
cwde
aad
lea
and
int3
cwde
cli
ret
imul
cwde
fcmovb
(bad)
loop
lods
xchg
mov
push
ror
js
ins
xor
inc
fcomp
mov
repz
mov
sbb
xchg
sbb
adc
test
pop
fsubr
push
out
in
idiv
cwde
int
divps
pushf
imul
add
push
mov
xchg
(bad)
xchg
(bad)
fld
or
cwde
sbb
mov
out
adc
popa
xor
sbb
cwde
mov
pop
loope
xor
cwde
pop
loop
mov
xchg
int
push
add
sbb
retf
fcmovnb
loopne
and
inc
pop
cs
dec
xchg
pusha
pop
and
xchg
fsub
je
xlat
ja
jo
mov
cli
fucom
iret
push
adc
pop
pop
xor
push
xchg
dec
sub
xor
pop
add
ss
loope
add
adc
xchg
ret
(bad)
xlat
cmp
xor
and
xchg
mov
push
shr
add
or
bound
loop
jb
mov
jg
dec
sub
clc
in
lock
mov
cdq
aam
out
mov
adc
push
lock
pop
and
push
repz
lea
in
cmp
clc
mov
iret
fdivr
xor
jo
arpl
mov
and
mov
jnp
outs
int
loopne
in
div
add
jo
sub
mov
add
cld
imul
adc
mov
stos
into
sbb
cmp
mov
lahf
leave
add
mov
int3
jecxz
xor
push
sbb
imul
(bad)
iret
stos
enter
movs
inc
addr16
pop
adc
push
xchg
adc
or
xchg
fdiv
mov
sbb
sub
dec
cwde
gs
aam
(bad)
cmp
sbb
aaa
jg
dec
mov
pop
pop
mov
(bad)
bnd
or
retf
sub
mov
gs
pushf
xlat
xchg
rep
jbe
outs
nop
imul
jp
aas
or
add
pop
jge
arpl
cwde
popa
mov
loop
cwde
ss
leave
push
cmp
cwde
cmps
mov
pop
pop
xchg
mov
add
gs
test
mov
push
pusha
cwde
sub
test
mov
fisttp
or
cmp
loopne
mov
enter
mov
push
in
mov
xchg
popf
or
xchg
ins
lods
nop
xor
scas
lea
sbb
mov
fcom
sbb
jmp
popa
xor
div
sub
or
cwde
cmp
push
push
rol
or
jl
add
push
and
cwde
jmp
out
scas
pop
popf
in
xchg
cmp
or
out
clc
das
inc
cwde
pop
cmp
mov
das
xor
jnp
add
loop
out
xor
xchg
pusha
xchg
push
daa
in
neg
cmp
out
sbb
adc
pop
sub
js
inc
jge
cwde
imul
int
icebp
adc
mov
daa
push
ins
call
cwde
imul
or
js
lods
add
rol
sbb
cdq
add
mov
test
sub
pop
pop
push
aas
pusha
loop
loop
mov
xlat
fnstsw
sbb
es
push
sbb
sbb
mov
inc
outs
inc
xchg
pusha
pop
cmp
add
imul
out
int
loopne
pop
mov
pop
clc
sar
scas
and
xchg
cdq
mov
fsubr
shr
mov
ret
inc
pop
xchg
neg
lock
aas
shl
push
inc
sbb
inc
push
fimul
cli
out
cwde
sub
push
adc
sub
clc
push
aam
mov
adc
xchg
clc
mov
aad
in
mov
mov
test
jg
jbe
imul
jnp
xchg
ins
mov
and
neg
jl
xchg
jp
dec
(bad)
movs
xchg
sar
into
out
or
not
or
call
jnp
adc
mov
pushf
(bad)
pusha
xchg
xor
mov
lock
nop
je
cmp
hlt
(bad)
sub
cwde
call
mov
int
jmp
call
stc
dec
push
test
pop
push
cmps
mov
sub
pusha
sub
bound
into
and
ins
js
cwde
arpl
fs
adc
neg
mov
sub
inc
in
cmp
std
sbb
add
test
and
dec
pop
cs
xchg
ins
mov
xor
cwde
mov
in
loopne
mov
cmp
adc
aad
data16
mov
je
and
int
fmul
xor
push
sbb
ret
lods
bound
cwde
jle
pushf
pop
(bad)
int
pop
scas
cmp
xchg
(bad)
pop
iret
ficomp
sbb
stc
int3
fs
cmps
test
enter
pop
push
es
arpl
sbb
xor
mov
idiv
or
or
inc
pop
aam
stos
cwde
push
lock
xchg
outs
popf
dec
loopne
std
clc
and
jne
pop
and
bound
jo
fsub
in
and
push
add
dec
sbb
(bad)
pusha
stos
mov
pop
aaa
push
push
pop
push
ret
add
std
aas
loop
fsub
clc
cmp
cwde
ins
leave
pop
sbb
sub
sbb
mov
(bad)
out
push
cmp
push
adc
jl
addr16
aam
scas
fsin
pop
into
imul
mov
cli
adc
out
pop
sub
test
shl
mov
daa
movlps
xor
iret
shl
xor
arpl
adc
pop
stc
cs
lock
cwde
in
adc
and
add
and
mov
pushf
fstp
jle
cwde
xchg
mov
xchg
mov
cmp
push
cwde
mov
mov
mov
repz
inc
call
lock
pop
adc
push
sub
adc
nop
cwde
inc
pop
jmp
mov
adc
mov
lods
mov
dec
dec
outs
test
xchg
jmp
loop
cmp
mov
enter
scas
cld
or
inc
pop
popa
in
or
cwde
aad
jmp
repnz
cwde
ins
jae
std
out
push
or
fld
loope
iret
pop
dec
xchg
enter
hlt
fwait
xor
fadd
xlat
pop
loop
cwde
fdivr
sub
xchg
jbe
popf
test
rcr
popf
mov
xlat
add
push
out
cs
sahf
pop
and
bound
or
mov
ins
jnp
bound
inc
cwde
push
jl
shl
add
adc
xchg
xchg
jae
inc
sub
adc
(bad)
aad
stos
(bad)
call
mov
in
xchg
or
add
gs
stos
cwde
push
pop
and
add
sub
sub
jb
xchg
data16
repnz
cwde
add
pop
stc
sbb
or
jnp
cwde
fwait
jns
mov
sti
cwde
jle
push
dec
add
mov
scas
mov
in
cdq
sti
iret
xchg
test
cmp
add
arpl
push
and
xchg
es
movs
push
pop
movs
xchg
test
fsubr
retf
cmp
cmp
jecxz
shl
ret
and
cmp
xchg
sbb
add
fsubr
cmps
into
aam
retf
cmp
leave
cwde
fsubr
fistp
mov
inc
pop
das
pop
(bad)
and
stos
mov
cli
cmp
inc
push
push
cwde
mov
xchg
jle
adc
adc
jns
cwde
mov
cwde
enter
js
push
and
xchg
test
pushf
ja
or
mov
cwde
call
std
cwde
mov
jbe
add
in
cwde
int
scas
test
sub
scas
rol
jmp
aas
jl
xor
cmp
inc
cli
jae
cwde
push
inc
xchg
push
sub
ret
mul
mov
cwde
sub
jne
jo
fnstenv
mov
out
dec
pop
sub
inc
shl
sub
clc
(bad)
call
push
fisubr
xor
mov
jg
mov
mov
sar
add
pop
gs
cwde
mov
call
aad
adc
inc
xchg
cwde
movs
mov
cmps
cld
fstp
int3
hlt
sbb
mov
call
cwde
dec
das
xor
pop
jbe
xor
jb
or
loope
cwde
sbb
int
add
jnp
inc
xchg
ins
nop
xchg
xchg
out
lods
xchg
or
add
adc
sbb
popf
popf
outs
mov
mov
mov
daa
pop
pop
sti
jp
lods
mov
call
mov
inc
or
cwde
bound
fdiv
clc
std
aaa
add
add
jno
sub
ds
jecxz
lahf
rcr
pop
cwde
or
inc
test
mov
cmp
and
jp
xor
add
cmp
adc
cmps
mov
xor
scas
and
xor
jae
mov
mov
pusha
pusha
cwde
iret
fsub
or
push
icebp
cwde
outs
jl
mov
or
mov
idiv
loope
add
sbb
sub
fs
xchg
or
fadd
or
rol
inc
lds
xchg
call
and
dec
sbb
jae
pop
pop
xchg
pop
cwde
add
repnz
fsubr
stos
sbb
mov
cmp
dec
xchg
test
aas
mov
paddusw
push
add
or
sbb
dec
cmp
arpl
add
neg
aam
cdq
mov
inc
mov
arpl
jb
fst
inc
push
rol
inc
jmp
(bad)
cmp
jno
aad
sar
call
(bad)
out
or
dec
bound
out
cwde
into
cmp
jne
xchg
push
mov
nop
xchg
fwait
mov
shr
pop
pop
xchg
rol
xchg
jbe
dec
pop
cmp
xchg
je
inc
pop
jp
jmp
xchg
adc
pop
adc
ret
cs
mov
adc
jnp
call
pop
sub
pop
clc
mov
xlat
cwde
cmc
test
xchg
popf
jge
leave
cwde
push
imul
add
cwde
test
inc
les
adc
adc
or
inc
pop
jno
call
inc
add
ins
push
outs
cwde
mov
mov
xchg
xchg
pop
daa
pop
mov
adc
data16
(bad)
in
xchg
neg
lods
add
es
rcr
mov
cmp
aad
add
in
sbb
pop
(bad)
(bad)
cwde
out
push
jmp
test
pop
dec
push
push
and
in
cmp
in
cmp
fcomp
(bad)
fdivp
test
jmp
loopne
mov
xlat
mov
adc
repnz
and
jnp
push
dec
push
cwde
push
ror
or
popf
sbb
fld
pop
scas
xor
xchg
jl
jbe
in
xchg
mov
nop
stc
cli
push
loop
push
test
xor
adc
sbb
lods
xor
xor
cwde
fcom
imul
or
lods
(bad)
in
je
rcl
ds
xchg
clc
cmp
mov
arpl
test
mov
stos
pop
sbb
imul
popa
loopne
xchg
test
arpl
movs
test
push
clc
gs
inc
ret
shl
dec
xchg
dec
pop
xor
mov
rcl
cwde
shr
jmp
out
lahf
les
lods
or
pusha
sti
jle
cwde
pop
add
shl
div
rcr
dec
dec
cld
in
and
cwde
adc
cmp
push
inc
pop
jbe
jge
test
cld
int
adc
mov
mov
jb
xchg
pop
jg
mov
xor
out
xchg
add
(bad)
cmps
mov
aaa
inc
xchg
aad
cmps
and
mov
sets
mov
xchg
rcr
nop
xchg
test
sahf
mov
arpl
sbb
sbb
fdiv
xchg
xor
rcr
(bad)
ficomp
lods
and
mov
out
mov
clc
cs
rcr
and
lods
pop
sub
loopne
fiadd
push
(bad)
adc
leave
and
retf
test
les
int
ds
or
xchg
mov
shr
cmp
dec
fwait
cmp
cwde
add
pop
mov
(bad)
pop
cwde
mov
cmps
inc
cmp
cwde
jb
int3
cmp
out
sbb
mov
popa
lea
inc
sub
cld
cwde
retf
fisubr
test
sti
fldenv
repz
jno
shr
in
cwde
pusha
jmp
push
adc
rcl
pushf
int3
std
push
cwde
inc
sub
add
xchg
cwde
push
mov
loop
adc
sbb
test
xchg
push
lahf
jnp
xchg
fs
bound
adc
clc
cwde
fist
cmp
int3
aad
jmp
(bad)
jae
idiv
push
mov
jns
dec
and
jmp
dec
xchg
outs
cdq
pop
mov
shl
mul
test
jp
je
xchg
addr16
cwde
lock
fadd
jmp
test
add
push
fidivr
pop
dec
push
push
push
xchg
popa
js
mov
cmp
cwde
scas
push
stc
jmp
push
pop
inc
imul
push
xor
inc
jmp
clc
ins
adc
arpl
repnz
lock
pop
les
and
xchg
jle
pushf
shl
(bad)
call
jge
and
sbb
xchg
lock
enter
es
push
daa
jae
dec
inc
lock
outs
jg
mov
test
jbe
jge
xchg
fldenv
jno
cwde
dec
push
cmp
lods
inc
xor
or
adc
and
cmp
dec
mov
inc
call
jbe
xor
push
mov
add
sub
push
xchg
add
adc
pop
push
jmp
rcl
mov
xor
cwde
and
dec
popa
mov
dec
movhps
jb
or
int
jns
cwde
fnsave
xor
fs
rcl
call
jo
jge
inc
(bad)
stos
sbb
jle
popa
xor
out
pop
xchg
cdq
adc
je
scas
daa
sub
out
imul
pop
in
cwde
icebp
outs
xor
cli
mov
jl
(bad)
sahf
mov
jnp
pushw
xchg
sbb
sbb
jmp
(bad)
cwde
mov
pop
das
mov
out
sub
add
jne
loopne
inc
mov
fcomp
cwde
je
pop
(bad)
leave
js
shl
out
and
and
push
loope
jl
xchg
dec
adc
jnp
rcr
fisub
sub
mov
popa
call
inc
mov
ret
(bad)
push
jae
mov
jns
bound
adc
loopne
(bad)
lahf
and
mov
jg
xchg
lea
fwait
cdq
sub
mov
mov
adc
add
inc
mov
call
sbb
jo
xchg
les
mov
test
pop
jl
mov
les
xchg
mov
push
nop
es
dec
mul
inc
ror
sbb
sbb
xor
nop
imul
push
bound
mov
dec
ja
xchg
dec
mov
rcl
pop
repz
ret
or
(bad)
fstp
xor
ins
xor
jge
cdq
push
sub
mov
mov
leave
adc
sti
cs
repz
ror
jmp
(bad)
push
loope
xchg
rcr
push
jne
je
int3
in
or
sbb
cwde
cmp
call
mov
cmp
adc
rol
jge
fbld
adc
sbb
adc
hlt
mov
mov
out
cdq
loop
push
cmp
inc
mov
div
mov
jne
nop
pushf
xchg
add
adc
out
js
inc
fisubr
pmuludq
mov
sub
cmp
pop
pop
xor
js
xchg
add
adc
xchg
cmp
inc
or
jmp
or
pusha
inc
pushf
adc
push
aaa
xchg
xchg
mov
cwde
jle
adc
dec
fs
pusha
sbb
fsub
dec
sub
sub
loop
xor
stos
inc
adc
clc
add
mov
add
sub
cwde
inc
add
add
lods
jo
cwde
repnz
dec
sub
in
cwde
fsub
ja
cwde
push
mov
stos
mov
xor
xchg
icebp
mov
xchg
mov
sub
enter
std
cwde
loopne
mov
pop
and
(bad)
data16
dec
loope
fs
cli
(bad)
mov
cwde
cmp
add
or
add
dec
test
push
push
dec
cwde
jns
mov
ins
test
xchg
and
pop
cmp
imul
inc
cwde
cmp
cs
ret
mov
scas
cmp
jmp
nop
xor
es
inc
pop
retf
push
repnz
iret
sub
push
inc
test
sub
out
shl
pusha
xlat
mov
lods
jg
jp
les
loopne
ror
in
gs
je
bound
inc
cwde
imul
ja
test
stos
mov
into
xchg
dec
sub
mov
cmp
mov
popf
(bad)
add
fsub
pop
add
mov
jnp
sbb
cwde
loopne
pop
push
pushf
push
add
rcl
xchg
pusha
scas
mov
int3
xchg
movs
jmp
aad
call
pop
lods
xchg
das
scas
cs
mov
nop
jecxz
adc
pop
adc
cwde
lods
pop
daa
pop
and
dec
mov
neg
popa
xchg
jno
imul
outs
call
push
stos
pop
and
dec
mov
mov
jge
sbb
mov
and
outs
jno
cwde
push
out
loop
imul
sub
js
xchg
xor
shl
std
shl
jp
adc
sbb
pop
daa
jo
jno
cwde
mov
les
cmp
(bad)
fucomip
jg
mov
xchg
lea
stc
cwde
pusha
cmp
cmps
dec
xchg
push
cmp
jle
inc
pusha
dec
sbb
scas
xchg
mov
inc
push
push
or
movs
pop
dec
dec
xlat
add
cwde
add
cmps
push
cwde
push
pop
sbb
mov
loop
popa
pop
and
adc
cwde
jo
rol
loopne
clc
push
ins
scas
dec
sbb
dec
(bad)
jmp
mov
fwait
cwde
pop
dec
inc
lea
call
in
sar
addr16
imul
test
jge
cdq
adc
clc
lods
pushf
ret
xchg
fidiv
and
call
cmps
les
dec
psrlq
movs
sbb
cmp
mov
mov
fsubr
sbb
or
dec
cmp
lahf
jno
add
pop
clc
mov
xchg
mov
clc
push
test
es
imul
sbb
push
aas
jbe
push
xchg
mov
and
sub
daa
sar
jne
cmps
mov
push
jmp
cmp
sbb
fnstcw
sahf
xchg
jl
mov
call
push
sub
gs
push
xor
fcomip
mov
add
mov
out
sbb
test
dec
arpl
dec
das
push
sub
sbb
jne
cmps
mov
in
xor
cmp
sub
jl
ins
jnp
(bad)
xchg
sbb
into
fisttp
jecxz
inc
pop
mov
cwde
cmps
mov
int3
out
or
lock
inc
sub
and
cli
rol
add
mov
mov
pop
imul
mov
lahf
fisub
cwde
cmp
stos
neg
std
mov
xchg
dec
push
inc
pusha
dec
push
cmp
jnp
aad
mov
int
retf
xchg
pop
(bad)
aad
xor
sub
fcomi
fst
test
sbb
cwde
dec
push
arpl
xchg
call
movs
mov
sbb
xor
ins
mov
mov
xor
pop
mov
pop
scas
mov
fsub
jecxz
mov
cmp
pop
cmp
scas
mov
lahf
jle
cwde
push
add
fcomp
repz
or
js
add
xchg
cmp
pop
aam
lahf
cwde
ins
sub
push
jno
cwde
sbb
mov
sub
pop
mov
retf
adc
push
cmp
je
retf
xor
jno
test
icebp
in
xchg
mov
mov
je
bsf
jmp
stc
(bad)
shl
gs
cwde
test
dec
mov
pop
dec
mov
inc
repz
sub
mov
cwde
xchg
outs
mov
push
call
pusha
cwde
(bad)
jecxz
movs
cmps
xchg
mov
and
xchg
and
imul
mov
jbe
(bad)
in
cmovle
mov
int
mov
jle
jl
test
xchg
(bad)
lods
cld
test
mov
sub
fwait
xchg
pop
mov
clc
(bad)
pop
jne
fsub
bound
lds
sub
sbb
xchg
test
fwait
fs
cmp
addr16
jns
dec
xchg
add
mov
shl
xor
aad
cwde
neg
in
pop
sub
lods
mov
repz
jnp
pop
cmp
or
clc
cmp
add
push
std
fild
sub
jbe
jnp
out
adc
or
cwde
ret
arpl
ret
and
mov
popa
loope
adc
adc
adc
stc
xchg
xor
std
or
enter
bound
cmps
jp
mov
movs
mov
adc
test
sbb
mov
out
(bad)
xor
cwde
jae
xchg
sti
ret
test
cmp
cwde
jmp
cmp
sbb
inc
sub
mov
dec
mov
mov
dec
adc
add
(bad)
retf
shl
pop
add
arpl
cdq
mov
jg
jp
pushw
ret
pop
lahf
jge
xchg
mov
sub
jno
cwde
mov
(bad)
(bad)
(bad)
aad
inc
add
add
or
cmp
jnp
nop
mov
mov
cmps
push
sub
sbb
mov
pusha
daa
fcomp
mov
stos
(bad)
rol
test
cmp
adc
es
cmp
je
xor
xor
and
and
mov
push
cwde
xchg
ins
adc
adc
out
fild
adc
pop
jb
push
ret
jle
sbb
sub
nop
mov
push
cwde
pop
or
mov
sbb
push
mov
jmp
out
jecxz
aaa
push
outs
jle
int3
jecxz
cwde
or
push
cwde
xchg
push
(bad)
jg
leave
mov
cwde
lods
or
daa
jne
xchg
stos
and
in
std
shr
in
cdq
inc
sbb
fidivr
sbb
fcom
jo
stos
push
(bad)
jle
adc
push
jmp
imul
cmp
rcl
jle
push
adc
sbb
cmp
xchg
arpl
cwde
jmp
pop
inc
cwde
fs
ret
rcl
rcl
xchg
mov
(bad)
mov
jle
xchg
icebp
sbb
mov
mov
cmc
cwde
ret
inc
test
loopne
cwde
sbb
and
mov
ins
scas
cwde
shl
pop
sbb
xchg
dec
(bad)
(bad)
sub
mov
inc
jp
leave
xchg
mov
xchg
mov
cdq
xor
nop
jns
cwde
mov
repz
ret
(bad)
push
out
in
or
cwde
xor
adc
leave
rol
fcomi
add
cwde
daa
xor
sbb
cwde
adc
xchg
adc
int3
jl
cwde
mov
les
mov
sub
pop
push
and
sar
cwde
dec
xor
stc
adc
aad
in
inc
fstp
cmc
imul
sahf
xchg
push
retf
adc
call
bts
sbb
pop
popa
test
retf
add
(bad)
xchg
mov
cld
xchg
stos
cmc
dec
cmp
adc
out
sub
inc
sbb
cwde
xchg
jge
addr16
mov
mov
stos
(bad)
jnp
jg
jg
cwde
not
cmp
cwde
loop
jmp
lods
push
enter
sti
sub
pop
xor
(bad)
xchg
mov
out
cmp
adc
mov
ins
pop
cwde
pop
fucomip
leave
bound
dec
cwde
in
aas
cdq
jmp
dec
inc
add
xlat
cmps
cmp
nop
fld
or
retf
and
jg
mov
in
(bad)
sub
das
in
cdq
icebp
enter
push
sbb
sub
addr16
xchg
dec
aas
aam
iret
rcr
xor
xchg
push
xchg
mov
je
les
in
pop
call
push
adc
push
(bad)
in
push
aam
pop
jmp
gs
mov
jecxz
inc
mov
mov
sbb
lahf
mov
adc
fsub
in
or
dec
jnp
push
adc
in
push
inc
dec
sar
or
lock
out
sub
sbb
cmp
stos
rcl
call
mov
push
test
sbb
(bad)
mov
sbb
jecxz
call
movs
and
jb
cwde
js
mov
mov
aas
js
add
cwde
dec
push
sbb
mov
mov
xchg
nop
xor
sbb
push
cwde
sbb
loope
test
shr
js
mov
in
pop
out
dec
push
arpl
cdq
imul
stos
adc
pop
test
fstp
js
inc
sbb
pop
jle
cmps
mov
rcl
adc
sbb
in
ds
test
mov
cwde
enter
xchg
jne
jge
pushf
outs
sbb
popf
out
in
pop
jo
cwde
push
push
jb
xor
sbb
imul
ficom
inc
out
mov
and
adc
push
cwde
mov
or
push
xchg
add
xor
jg
xchg
ja
jge
jo
pop
rcr
mov
fdiv
push
daa
mov
jp
adc
out
jmp
dec
and
fstp
cmp
out
push
lahf
pop
add
push
ss
fsub
push
xor
sbb
inc
aaa
fild
jge
jno
jecxz
sahf
cwde
mov
add
cwde
lds
pop
inc
mov
xchg
add
cmp
pop
mov
cwde
sub
jo
imul
ror
mov
imul
mov
cwde
leave
mov
inc
cmp
sbb
iret
adc
scas
loope
enter
dec
mov
xor
nop
std
cmp
iret
test
fisttp
scas
fwait
xchg
clc
ret
sbb
sub
cwde
fs
mov
cs
in
add
mov
push
xchg
retf
arpl
mov
in
repz
jns
mul
xchg
jae
sbb
sbb
jb
cwde
mov
(bad)
push
xchg
cmc
jne
cwde
sub
ins
and
sbb
xchg
sbb
sar
into
cwde
xlat
iret
push
jmp
cwde
sub
add
adc
xchg
cmc
rol
loopne
cwde
je
(bad)
jbe
mov
loop
cwde
inc
sub
stc
scas
or
mov
cwde
fdiv
push
mov
mov
jmp
fidiv
pop
push
pusha
sub
adc
fsubr
xchg
cwde
test
pop
test
sbb
xchg
jo
in
fstp
adc
push
pop
mov
jg
xchg
enter
(bad)
int3
jecxz
(bad)
mov
mov
ror
add
(bad)
cdq
adc
xor
scas
clc
loopne
xor
mov
fadd
icebp
and
fiadd
push
retf
cwde
inc
pop
es
pop
cmp
push
pop
int3
loop
out
pop
out
and
bound
mov
xchg
sub
clc
aam
ficomp
inc
sub
xor
xor
hlt
jmp
sub
daa
and
call
push
loope
inc
pop
(bad)
adc
cwde
leave
mov
out
cwde
sub
ss
sub
cmp
jmp
mov
sar
int
mul
cld
adc
xchg
cmovne
xor
push
or
ror
cwde
mov
push
sahf
cmp
jge
sub
call
inc
sbb
test
jb
mov
or
js
clc
sub
mov
inc
push
dec
push
in
xchg
add
stos
push
fisub
hlt
xor
adc
jo
xchg
push
test
push
adc
and
dec
scas
call
mov
sbb
cmps
icebp
outs
jae
stos
xchg
or
xor
xchg
or
push
pop
aaa
fdivr
jmp
(bad)
xor
lahf
call
mov
in
retf
xchg
add
xchg
pop
call
scas
sub
sbb
sbb
std
cmc
push
cdq
cwde
adc
retf
ss
pop
je
mov
adc
test
inc
and
dec
push
jno
js
pop
mov
(bad)
into
xchg
lock
adc
pop
jmp
and
add
jg
mov
xchg
sub
mov
lahf
mov
xchg
jge
nop
xchg
mov
sbb
xlat
(bad)
rcr
mov
mov
pop
test
sub
xchg
(bad)
iret
cwde
mov
imul
ins
sahf
mov
scas
push
jns
in
bound
inc
dec
mov
cs
mov
mov
hlt
outs
xchg
mov
gs
daa
stos
xchg
mov
xchg
cmp
jmp
loope
ret
(bad)
fsubr
adc
jns
rcl
and
repz
cld
cwde
(bad)
loopne
mov
repnz
shr
sbb
mov
xchg
jge
icebp
xchg
mov
xchg
xor
cmp
cwde
cmps
les
inc
push
lods
lods
inc
cmp
call
or
loop
scas
mov
js
lock
push
pushf
call
test
pop
and
and
pop
fsub
(bad)
repz
call
je
arpl
neg
jp
imul
cwde
sahf
xchg
adc
mov
mov
xchg
arpl
sbb
cwde
xchg
repnz
add
bound
cwde
inc
sbb
imul
inc
or
and
sahf
adc
mov
fcmovb
fstp
lods
jmp
call
cdq
sbb
add
clc
mov
mov
mov
xchg
cmp
xchg
jbe
push
xor
push
jmp
js
pop
arpl
jl
mov
cmps
call
repz
xor
hlt
clc
je
xchg
jbe
jno
jle
cdq
fldcw
push
jecxz
sbb
cmp
ret
mov
mov
inc
inc
cld
xchg
dec
cs
push
imul
(bad)
and
xchg
cwde
(bad)
fdivr
cdq
cmp
inc
or
lahf
ss
push
daa
add
mov
addr16
xor
cwde
sbb
lds
pusha
daa
ins
cmps
lods
jne
lea
cmp
mov
sbb
std
sar
add
xor
add
lods
mov
js
pop
test
shr
cwde
out
pop
stc
pusha
sub
cwde
push
xchg
push
add
jno
fnstcw
xchg
test
pop
jbe
dec
pop
cwde
cmp
mov
lock
add
jl
mul
sbb
call
jge
xchg
cdq
jns
js
xchg
adc
std
xor
inc
sub
mov
adc
hlt
xchg
int
daa
cmovs
inc
jle
js
xchg
sbb
jle
pop
pop
cwde
cmp
sub
popf
xchg
popa
test
pop
fadd
pop
loop
jge
mov
sbb
out
xor
cwde
dec
data16
movs
dec
push
cmp
lahf
pop
xor
cwde
dec
pushf
jno
jne
movs
mov
loope
add
test
cwde
add
scas
call
sbb
push
adc
loope
xchg
imul
jo
stos
test
push
xchg
adc
cwde
(bad)
test
(bad)
jns
dec
xchg
push
test
xchg
mov
nop
ror
retf
jae
pushf
popf
js
xchg
dec
push
inc
pop
(bad)
ins
jae
cmp
cwde
fsub
call
jne
gs
enter
enter
mov
inc
call
cmp
in
cmp
push
addr16
inc
pop
sub
shl
bound
fmul
mov
lods
or
retf
fsubr
fst
jno
adc
lahf
or
ret
xchg
xor
push
mov
pop
jae
cld
xchg
ja
out
in
pop
xlat
xchg
retf
xor
popf
ret
cmp
fist
(bad)
pop
int
mov
dec
loop
lahf
pop
push
and
inc
push
lahf
dec
sahf
arpl
cmp
and
movs
mov
retf
jecxz
data16
lock
mov
pop
adc
out
mov
adc
mov
xchg
mov
rol
xchg
mov
in
les
call
mov
aad
movs
shl
cmps
cwde
sbb
hlt
bound
adc
adc
sub
mov
scas
mov
in
ss
pop
and
gs
into
dec
xchg
adc
in
lds
in
add
cmp
pop
ds
inc
push
mov
xchg
sbb
push
cmp
adc
mov
test
mov
xchg
mov
cmps
xchg
outs
addr16
pop
ins
cmc
aaa
cwde
push
(bad)
loop
inc
stos
mov
or
add
sbb
js
mov
jno
arpl
retf
out
fcomp
pop
xchg
lock
bound
je
ins
sub
pop
fsubr
mov
fisttp
scas
mov
test
call
push
pop
loop
pop
xchg
scas
mov
push
pop
into
jnp
pusha
xchg
pop
dec
sub
outs
xchg
sar
adc
cmps
pop
dec
loope
cwde
imul
fild
inc
and
xchg
adc
dec
jmp
retf
test
jecxz
rcl
call
neg
mov
in
mov
cmp
dec
pop
sbb
mov
cmp
ja
stos
mov
data16
cwde
sbb
inc
icebp
out
nop
dec
xchg
mov
lahf
aad
xor
loop
fcomp
icebp
shr
mov
mov
iret
(bad)
pop
lds
or
mov
pop
cmc
mov
outs
call
test
ins
mov
sbb
lods
mov
loopne
iret
xchg
adc
mov
mov
mov
mov
retf
cmp
xchg
pushf
push
sti
push
mov
xchg
sbb
loopne
bound
xchg
dec
push
inc
push
pushf
cmp
xchg
in
mov
test
xchg
dec
fld
sub
test
and
mov
hlt
repnz
shr
xchg
js
out
test
push
nop
and
xor
popf
sub
nop
mov
xchg
stos
repz
call
cwde
cmc
jbe
pop
fbld
in
inc
inc
sub
(bad)
pusha
lock
pop
jp
test
cmps
push
sbb
push
sbb
loope
outs
aas
or
ins
mov
clc
aam
push
outs
xchg
sub
(bad)
aaa
adc
pop
jns
call
sar
aas
cwde
ins
dec
mov
cmps
lods
and
push
push
mov
into
mov
cwde
jnp
xor
in
popf
dec
pushf
or
adc
dec
test
imul
call
inc
es
pop
loope
adc
out
(bad)
fcom
je
jo
and
test
popa
fnsave
sar
push
xor
xor
ds
sbb
jo
cdq
sbb
retf
cmc
sub
push
and
(bad)
adc
sar
cwde
sbb
mov
mov
stc
nop
inc
pop
ret
rol
aam
mov
push
push
mov
and
and
movs
cmps
aaa
push
or
cmp
add
mov
sbb
xchg
cmp
and
(bad)
pop
cwde
xor
sub
repz
xchg
jge
sahf
or
mov
sbb
or
ins
adc
xchg
mov
stos
xchg
lds
in
cwde
add
xchg
pop
sub
xchg
mov
daa
aas
and
jl
in
add
dec
rol
xchg
and
movs
lods
mov
in
cwde
clc
adc
loope
cwde
or
or
mov
sar
xchg
adc
xchg
mov
xchg
jg
fdiv
jno
fist
mov
lahf
xor
mov
(bad)
cmps
(bad)
lods
js
fistp
pop
in
xchg
mov
jp
adc
sbb
xchg
or
pop
jmp
add
sbb
aaa
add
push
sub
jmp
dec
call
xor
sahf
and
jmp
sbb
inc
sahf
lods
mov
dec
ret
lds
icebp
or
pop
sub
xor
jno
jns
mov
cmp
jg
jae
sub
int
inc
adc
pop
cmp
cs
pusha
push
das
xchg
xor
(bad)
fsubr
jmp
mov
mov
cwde
sar
add
call
in
popa
loop
cwde
fdivr
jnp
nop
hlt
mov
(bad)
(bad)
xchg
adc
pop
data16
mov
xchg
sbb
mov
sets
loope
adc
mov
in
add
cld
je
cwde
int3
ins
jg
clc
fcmove
inc
cwde
or
enter
dec
mov
dec
imul
cwde
lods
and
test
sahf
lea
std
cmp
lahf
jl
xchg
test
cmps
test
xor
dec
js
cmp
mov
xchg
aad
mov
adc
mov
cld
push
test
cwde
and
cmp
cwde
or
jmp
adc
and
mov
xchg
lahf
js
dec
aam
push
sti
mov
push
mov
cmp
ins
adc
ret
int3
sub
add
push
fisub
cmp
je
inc
dec
pop
xchg
cwde
scas
mov
rcr
shl
aad
or
outs
push
mov
mov
dec
mov
mov
push
sub
pop
iret
or
add
inc
pushf
popa
cmps
ss
dec
adc
ds
gs
and
push
icebp
mov
fimul
in
clc
or
xchg
test
jnp
sub
add
add
cmp
add
scas
cwde
jl
push
mov
sbb
in
scas
mov
stc
adc
mov
(bad)
aam
xor
out
test
fidiv
into
stos
push
sbb
lods
mov
or
jecxz
call
or
sti
dec
sub
add
out
jmp
cwde
into
pop
add
push
test
out
xor
fnstsw
sbb
mov
movs
mov
ds
rcl
pop
jl
dec
lahf
fwait
test
cmp
nop
call
sub
pop
scas
clc
jmp
or
cwde
test
add
xchg
jmp
sbb
mov
cmp
push
leave
std
xor
or
lds
pusha
mov
test
lahf
(bad)
out
(bad)
cwde
fcomi
(bad)
test
cwde
add
retf
rcr
jle
pop
daa
mov
scas
dec
scas
xchg
xor
sbb
mov
mov
mov
outs
js
mov
clc
in
cmc
cwde
imul
jmp
cwde
push
pop
aad
xor
mov
pop
js
pop
and
cwde
adc
repnz
xchg
imul
add
loopne
iret
jl
and
(bad)
push
fisttp
ror
cmp
and
cmp
popa
sbb
leave
sbb
pusha
xchg
jo
shl
lahf
or
xchg
xchg
mov
ins
cmp
seta
rcl
outs
mov
pop
dec
push
xchg
dec
(bad)
lock
enter
inc
push
cwde
xchg
inc
push
mov
in
xchg
dec
leave
js
ins
neg
xor
pop
sub
ja
test
xchg
aad
rcl
fnsave
xchg
jmp
fcomp
xchg
lods
jg
push
pop
das
fs
or
stos
push
pop
repnz
imul
add
cmp
clc
xor
adc
dec
cwde
xchg
cmps
mov
rol
xor
jmp
inc
mov
je
cwde
or
inc
xchg
sbb
add
jbe
mov
pop
clc
in
cdq
std
push
push
xlat
xchg
push
pop
xor
mov
out
cwde
pop
sub
dec
mov
popf
mov
out
mov
into
fld
in
cwde
outs
aaa
sbb
push
cmp
stos
jbe
fstp
scas
jno
pop
sbb
mov
scas
sub
sub
out
pop
or
mov
sbb
(bad)
or
test
mov
outs
cwde
mov
gs
add
neg
(bad)
xor
fdiv
repnz
scas
jae
je
in
xchg
shr
lock
pop
mov
jmp
ja
rcr
inc
pop
sub
xor
inc
pusha
push
adc
pop
jnp
cwde
inc
push
pop
and
pop
mov
(bad)
push
cwde
arpl
xchg
lods
mov
fldcw
push
mov
ins
js
jmp
xor
ds
call
call
xchg
mov
call
mov
mov
pushf
pop
aaa
add
lahf
xchg
stos
mov
in
adc
fwait
xchg
outs
fs
stos
mov
add
xchg
stos
mov
(bad)
ds
loopne
pop
push
jecxz
dec
cmp
pop
mov
fmul
stc
pop
rcr
ds
pop
and
clc
mov
cwde
add
xchg
sahf
jnp
mov
test
mov
icebp
test
shr
sub
mov
(bad)
cwde
pop
cs
push
xchg
test
sbb
(bad)
push
cmp
mov
jne
cwde
jg
ins
push
xlat
cmp
jns
push
push
aad
xchg
popa
cmc
ror
sbb
sahf
inc
stos
cwde
shl
aas
imul
cmp
sar
lods
sbb
(bad)
pop
and
mov
or
enter
xchg
sbb
outs
sub
sbb
sti
jmp
out
pop
loope
hlt
jp
jmp
xor
cwde
dec
sub
xor
pop
daa
aas
sbb
aad
out
loope
xor
sbb
xchg
loop
(bad)
mov
sbb
test
sbb
lods
xchg
dec
xor
in
inc
xor
imul
mov
cmp
adc
test
mov
out
mov
in
mov
movs
fcomp
sti
lds
mov
loop
in
adc
cmp
jl
imul
add
inc
test
ja
sbb
cwde
pop
xor
aaa
add
in
push
jg
mov
dec
les
sbb
ins
xchg
xchg
icebp
fstp
dec
add
daa
popf
stc
sbb
sub
jb
xchg
lds
or
loop
les
mov
ficomp
fs
xchg
ror
gs
fmul
cmp
pop
inc
mov
jno
popf
mov
adc
adc
jo
sub
xchg
je
jne
jge
pop
das
jbe
lods
sbb
rcr
and
jo
dec
lahf
jmp
aad
les
cmp
pop
inc
test
cwde
xchg
and
mov
or
cmps
cwde
inc
dec
pop
outs
push
sub
loopne
icebp
out
xchg
cmp
inc
pop
in
add
cwde
(bad)
mov
fistp
lock
cwde
mov
les
stos
mul
mov
int
fstp
(bad)
(bad)
(bad)
xchg
cwde
jle
movs
outs
adc
(bad)
jge
push
je
cmp
pop
pop
push
dec
or
cmp
arpl
push
mov
stos
cwde
ror
leave
adc
mov
je
or
add
dec
pop
cld
or
out
adc
rol
cwde
iret
cmp
stc
rcr
jo
sbb
inc
jmp
int3
xchg
aas
add
pop
test
sub
cli
pop
int3
and
(bad)
or
gs
leave
mov
xlat
test
jmp
jecxz
sbb
xchg
mov
mov
jo
or
sbb
ins
cmpxchg
adc
adc
sub
enter
loop
mov
sub
and
adc
js
pop
ja
jne
mov
scas
cwde
fisttp
neg
jmp
mov
cwde
fadd
jle
fistp
aad
jno
pusha
dec
jmp
imul
sbb
cmp
cmp
call
push
cwde
popa
mov
outs
push
je
cwde
mov
or
lock
cwde
jmp
imul
test
call
add
or
mov
bound
inc
jecxz
outs
mov
push
(bad)
xchg
fs
xchg
loop
aam
add
pushf
js
mov
retf
push
cwde
xchg
cmp
stos
mov
lahf
fld
retf
repnz
scas
cs
ds
fdivr
imul
loopne
arpl
and
xchg
sbb
loope
add
adc
xchg
or
fdiv
int3
ds
stos
pop
or
jg
or
push
fdivr
and
mov
popa
and
(bad)
and
adc
test
sub
push
mov
cwde
jl
fisttp
stc
fisubr
fcom
cld
cwde
push
cli
int
movs
mov
pop
push
pop
cmc
(bad)
xor
xchg
ret
adc
pop
sub
cwde
fwait
push
inc
shl
pop
pop
and
inc
inc
push
sbb
loope
cwde
jmp
xor
pop
xchg
das
pop
lods
mov
cmp
mov
stos
push
cwde
mov
or
xor
cwde
sbb
jecxz
mov
sar
dec
add
push
cwde
sbb
outs
inc
xchg
lea
mov
int
mov
mov
fcomp
cwde
shr
cwde
dec
mov
popa
out
icebp
jb
stos
ja
sbb
fistp
push
jmp
adc
mov
fnstcw
cwde
nop
push
enter
int
fst
or
cwde
add
sti
leave
xchg
pusha
mov
push
and
push
icebp
imul
inc
(bad)
sbb
(bad)
jecxz
lahf
xlat
xchg
or
sub
in
xchg
mov
shl
retf
(bad)
push
les
dec
pop
sub
xchg
jle
adc
or
xchg
lahf
push
fstp
retf
sti
sbb
aam
lahf
fcmove
lods
leave
adc
jnp
ficom
add
cwde
or
(bad)
push
mov
aam
fnstcw
jmp
movups
retf
dec
mov
loope
gs
xchg
mov
test
pop
retf
iret
outs
fwait
cwde
hlt
ret
xor
arpl
mov
loop
sub
shl
mov
push
loopne
pop
and
and
fmul
push
(bad)
xchg
adc
loop
mov
add
aaa
ret
push
leave
fmul
push
mov
cmps
adc
mov
lds
jnp
hlt
sbb
jmp
xlat
(bad)
cmp
sbb
and
cwde
bnd
aas
cmps
mov
add
or
sub
hlt
xchg
shl
jnp
ins
mov
and
dec
pop
push
push
pop
fcmove
mov
ins
sbb
cmp
dec
das
gs
shl
in
std
test
push
cmp
dec
cmp
loopne
cwde
adc
adc
adc
xchg
icebp
outs
sar
xor
data16
das
and
cwde
fmulp
rcl
pop
icebp
cmps
xchg
(bad)
xor
xchg
xchg
cwde
sub
pop
jne
mov
add
out
adc
popa
icebp
jp
call
mov
sar
cwde
mov
pusha
movsx
fisub
mov
ficomp
mov
mov
push
fwait
rcr
fst
sbb
inc
das
dec
xchg
loope
loop
aas
popf
popf
adc
pusha
push
es
push
sahf
scas
cmp
shl
in
loopne
and
sub
int3
or
mov
nop
cmp
cwde
mov
mov
jl
dec
pusha
and
push
pop
sub
add
xor
pop
cwde
inc
jae
out
cmp
sub
cwde
jg
xrstors
ret
fs
mov
inc
popa
popa
inc
cmp
jle
sbb
push
jb
dec
pop
outs
sub
and
sti
cwde
into
ds
daa
cld
jmp
sbb
jl
xor
out
stos
test
pop
cdq
dec
pop
xor
xchg
mov
pop
add
sbb
in
add
pop
and
enter
xchg
jl
cmp
push
retf
adc
mov
mov
adc
pop
sti
aam
int
push
pop
pop
cmp
xchg
(bad)
scas
hlt
fst
pop
mov
mov
sbb
aaa
pop
inc
mov
xor
dec
push
fnstcw
push
int
pushf
imul
xchg
jge
or
icebp
lock
cwde
adc
mov
push
fist
sbb
xchg
(bad)
clc
imul
dec
or
scas
jle
cwde
mov
add
test
pop
xchg
scas
icebp
pop
loopne
inc
inc
pusha
xchg
ss
jb
rol
sub
(bad)
fstp
lods
mov
in
mov
and
shr
xor
imul
jecxz
dec
cmp
cwde
sub
cwde
jb
ret
sbb
and
pop
cwde
or
shl
mov
aaa
push
adc
xchg
je
push
dec
push
jg
clc
jmp
mov
mov
into
and
xchg
jg
sub
cmp
mov
leave
call
fs
xlat
inc
jb
fdivr
pop
in
jns
push
pusha
xchg
fcomp
pop
js
inc
repnz
jge
xchg
rol
cwde
dec
push
jno
pusha
and
push
cmp
adc
jmp
sub
pop
jl
cwde
add
mov
mov
por
ret
adc
pop
pop
xor
mov
test
cmp
add
push
stos
mov
sbb
es
ins
sub
add
stos
ficomp
dec
push
push
fwait
(bad)
fcomi
xor
pop
dec
adc
and
mov
push
imul
cwde
mov
jnp
mov
pop
fwait
mov
xchg
add
push
out
push
int3
fisttp
sti
fsub
jnp
cdq
jo
in
xchg
daa
adc
xor
mov
mov
out
repnz
push
adc
fcmovnu
jg
aaa
cwde
dec
gs
lods
mov
sub
iret
and
xchg
fs
cmp
push
sbb
pop
test
test
jno
lock
add
mov
xchg
shl
add
xchg
xchg
clc
cmc
mov
aad
rol
cdq
pushf
and
jg
push
test
mov
dec
inc
xor
xchg
pop
ins
fstp
in
add
push
cwde
into
ins
xchg
pushf
in
loopne
xor
arpl
add
jno
push
sbb
fwait
push
int
stc
xchg
cmp
sub
dec
push
inc
push
jnp
sbb
enter
xchg
retf
aam
cmps
push
jecxz
js
hlt
add
sub
sbb
mov
add
jecxz
mov
(bad)
xchg
cwde
adc
loop
adc
pop
jl
sahf
pop
sub
xchg
add
xchg
adc
xchg
cmp
hlt
call
jb
or
sub
mov
pop
cmp
daa
cwde
arpl
call
push
jmp
inc
leave
sbb
mov
div
mov
xor
test
inc
outs
dec
mov
sbb
sbb
fsub
loopne
inc
sub
push
push
cmp
dec
cwde
push
daa
mov
cli
push
adc
loopne
outs
cwde
sub
jle
iret
ins
push
cwde
pop
push
cmp
sbb
xchg
fist
mov
jge
in
std
fdivr
sbb
or
sbb
sub
mov
ins
push
clc
fisubr
jl
retf
push
dec
cwde
sub
shl
outs
sbb
iret
lods
loop
pop
dec
push
cwde
pop
and
outs
jne
jg
mov
or
daa
or
xchg
cmps
mov
mov
cwde
or
lahf
mov
sbb
sub
sti
js
mov
mov
or
push
in
add
fs
xchg
push
out
out
adc
pop
push
test
mov
fs
push
xchg
ret
mov
xchg
out
(bad)
push
cwde
aad
retf
test
dec
and
aam
mov
loopne
and
cmc
mov
arpl
ins
adc
pop
ins
push
sub
sbb
inc
pop
cwde
xor
dec
out
push
jns
push
in
push
cs
and
or
clc
dec
sbb
fxtract
push
arpl
mov
repz
add
push
retf
out
js
add
xchg
lea
push
mov
xchg
add
or
lods
outs
hlt
in
cmp
inc
dec
fmul
jg
xlat
out
adc
sti
xchg
fnstenv
inc
cwde
imul
mov
rol
push
push
pop
aas
bound
mov
inc
push
xchg
dec
pop
add
push
repnz
mov
cwde
ins
push
xchg
sub
ror
mov
in
fsubr
xchg
call
add
xor
dec
lahf
(bad)
out
clc
pop
movs
and
xchg
lods
xlat
mov
xchg
outs
jne
cmp
(bad)
cwde
dec
mov
xchg
arpl
movs
sti
les
lods
push
enter
xchg
xor
sbb
and
sub
jne
aad
fisttp
stc
sbb
daa
mov
jecxz
or
sub
popa
je
mov
repnz
cwde
xor
mov
mov
dec
outs
pop
pushf
ins
ins
cwde
addr16
scas
push
and
(bad)
ss
pop
lods
dec
pop
add
xchg
fwait
and
mov
cwde
sbb
out
xchg
js
jns
xor
dec
sbb
jp
in
(bad)
cmp
xchg
out
test
mov
or
fdiv
cwde
pusha
xor
in
mov
mov
jge
push
(bad)
aam
fld
jecxz
in
aaa
mov
stc
ret
adc
mov
in
push
cmp
ror
ds
aam
jmp
imul
cli
or
xchg
iret
(bad)
xchg
jmp
jb
and
pop
push
xchg
popa
jle
lods
xchg
outs
scas
jp
adc
ret
test
popf
adc
cwde
fs
pop
and
push
mov
mov
jecxz
sbb
retf
mov
out
popa
push
xchg
clc
jno
push
and
clc
inc
idiv
aam
lods
add
(bad)
sbb
movs
aam
stos
rcr
cwde
pushf
jns
mov
mov
dec
add
fcmovnbe
adc
adc
dec
add
ds
mov
xor
sub
add
es
sti
pop
fnstenv
mov
jmp
lahf
jle
call
xor
cmc
(bad)
(bad)
ds
or
add
adc
jne
xor
cmp
sbb
out
pushf
fild
and
popa
sbb
mov
inc
jbe
daa
mov
pop
sub
aam
stos
push
jge
mov
in
scas
add
jo
cwde
pusha
adc
lock
aam
ja
addr16
mov
push
dec
leave
test
xchg
jecxz
ds
dec
push
scas
mov
push
jo
adc
pop
sahf
imul
add
jne
and
in
sbb
sbb
cmp
in
out
scas
jle
xchg
xchg
arpl
ficomp
jg
mov
jecxz
call
js
aas
inc
daa
jmp
iret
xchg
popf
mov
rcl
mov
leave
push
cmp
push
lahf
sub
jmp
fmul
mov
sbb
mov
shl
inc
inc
jno
cdq
xchg
clc
gs
push
std
imul
mov
dec
loopne
psubusw
es
cmp
add
outs
pop
cdq
data16
lods
fcomp
les
ficomp
stc
xor
add
sbb
aas
pop
xchg
es
jno
jp
xor
icebp
into
ret
mov
out
mov
int3
mov
inc
or
pushf
push
les
sub
inc
cmp
pop
outs
lahf
pusha
rcl
call
lea
pop
push
sbb
add
xchg
sahf
sub
je
cmps
xor
mov
mov
or
not
je
mov
les
ss
aam
and
pop
imul
adc
jmp
dec
and
ds
ds
rol
xor
mov
hlt
xchg
or
(bad)
pop
js
mov
mov
fimul
xchg
jo
std
nop
sub
cmps
push
xchg
sub
xchg
sub
mov
mov
mov
cpuid
stos
or
scas
sbb
and
pop
mov
out
jge
and
or
jbe
repz
inc
push
daa
sbb
dec
dec
adc
push
cwde
outs
jle
in
leave
xor
ficomp
and
jo
loope
xchg
je
mov
loope
cmp
test
mov
cwde
sub
adc
cwde
jge
call
int
xor
or
add
test
fbstp
push
imul
adc
pop
mov
in
clc
sti
dec
mov
test
sbb
shl
(bad)
cmp
mov
push
sbb
add
(bad)
ret
mov
cmp
fdivr
xchg
into
and
ret
mov
daa
pop
shl
mov
jno
inc
push
stos
or
sub
js
pop
cwde
adc
mov
mov
mov
xchg
push
cmp
repz
mov
cdq
mov
js
or
adc
icebp
xchg
ret
or
dec
fdivr
mov
lea
out
icebp
adc
mov
ret
cmp
xor
xor
scas
psubq
cdq
adc
push
push
outs
js
je
jmp
sbb
xchg
(bad)
scas
cmp
mov
add
and
popa
mov
arpl
fiadd
es
dec
in
rol
int
das
xchg
clc
enter
jo
add
cwde
or
retf
leave
and
dec
inc
xchg
add
and
inc
cmp
loopne
outs
mov
scas
push
clc
cmp
mov
clc
call
daa
and
xchg
sub
enter
(bad)
ret
sbb
ds
add
jecxz
mov
and
push
rcl
(bad)
jne
dec
push
cmp
dec
pop
add
jae
(bad)
jge
int3
clc
inc
push
fstp
cli
test
lea
mov
cdq
push
or
adc
mov
jle
popa
mov
sbb
aad
pusha
push
lahf
mov
mov
cwde
ror
inc
sub
dec
jo
popf
cmp
jo
sbb
je
pop
push
imul
xor
mov
aas
inc
jns
jb
outs
adc
jecxz
enter
addr16
(bad)
aaa
test
jbe
fimul
(bad)
retf
rcl
ins
icebp
daa
xchg
test
rcr
pop
pushf
in
ja
push
(bad)
mov
adc
xor
xchg
iret
shr
test
adc
and
xor
fstsw
cwde
in
stos
fld
xor
mov
ror
rcr
lahf
scas
stc
int
popa
sbb
mov
out
jb
cdq
sbb
ins
jl
test
ins
mov
mov
(bad)
call
pop
loop
cmp
lock
lahf
cmp
jno
mov
adc
add
js
pmaxsw
or
dec
fwait
cmp
ds
pop
jecxz
pop
cld
std
cmp
mov
jl
lea
cdq
mov
pop
call
jg
push
cwde
je
cmp
jge
cwde
xchg
mov
(bad)
stos
ret
js
add
ror
cmp
jl
mov
jmp
adc
push
js
test
fnstcw
aad
mov
aad
sbb
pop
or
sub
sub
nop
cwde
imul
adc
sbb
xor
mov
addr16
mov
cwde
jl
mov
fisub
add
add
addr16
clc
dec
pusha
sub
pop
ja
push
sbb
scas
cwde
repnz
pop
adc
xchg
rol
repz
test
cmp
popf
jmp
mov
push
dec
mov
fucomp
mov
mov
cmc
fdivrp
mov
popa
cwde
push
lods
mov
cwde
sahf
(bad)
jecxz
push
loop
xchg
mov
ret
sub
pop
iret
or
adc
(bad)
jno
movs
jmp
sbb
lea
fcom
mov
cmps
push
mov
mov
psraw
mov
test
iret
ds
ror
(bad)
xchg
add
fwait
dec
mov
cld
iret
add
adc
jge
jp
pop
dec
push
jns
lock
and
fidiv
add
out
dec
pop
mov
pop
or
dec
push
push
xor
xor
aaa
lahf
retf
je
pop
sub
xchg
jg
into
xchg
adc
repz
loope
test
push
outs
jp
ins
xchg
mov
mov
dec
pop
pop
cmp
cmp
xor
arpl
mov
mov
jge
inc
bound
cmc
je
jp
dec
sub
mov
xchg
cdq
movs
lock
or
sbb
pop
cmp
out
inc
push
test
sbb
(bad)
adc
jp
aas
cmp
jecxz
inc
jnp
inc
pop
cwde
shl
xor
dec
push
fistp
loopne
xor
xchg
sbb
icebp
int3
in
in
pop
jl
cwde
lock
pusha
sbb
fisttp
add
ins
scas
cwde
mov
rol
xor
and
cwde
lods
lock
adc
scas
cmp
and
cwde
dec
push
push
aas
imul
pop
jbe
movs
adc
cwde
mov
fnstsw
dec
dec
xchg
sub
movs
mov
das
inc
lock
sti
adc
in
pop
push
test
std
cmp
les
call
jb
jmp
out
cwde
push
loop
das
cmp
rcl
stos
ret
(bad)
push
cwde
sbb
aam
(bad)
mov
enter
test
out
add
jne
in
daa
sub
pop
cmc
cdq
jae
cwde
icebp
jno
in
sar
jnp
push
and
int3
sub
stos
push
sbb
or
xchg
jnp
cwde
mov
adc
jae
out
cwde
add
mov
call
leave
cmp
lods
(bad)
sbb
cmp
retf
mov
and
ror
pop
xor
cmp
or
xor
xchg
jae
(bad)
ret
cmc
es
cdq
push
jns
inc
outs
mov
pop
sub
(bad)
(bad)
push
(bad)
push
adc
test
movs
pop
pop
cwde
rcl
jmp
xchg
push
mov
mov
adc
shl
or
or
sbb
jge
test
mov
bound
sbb
jp
and
mov
jl
mov
ja
test
cli
scas
dec
loopne
cwde
mov
stos
sub
test
add
neg
std
push
and
in
cwde
add
(bad)
and
(bad)
cwde
xor
dec
jb
stos
or
sbb
pop
out
cwde
sub
in
dec
ins
cmp
sub
push
imul
mov
lahf
in
inc
shl
inc
into
(bad)
pop
add
or
inc
push
ins
jb
xchg
jle
retf
cli
js
shl
inc
cwde
aad
lock
mov
mov
add
ret
xchg
jg
stos
xchg
xor
xor
dec
cdq
ret
test
jmp
cwde
add
ss
in
add
call
sahf
jns
xchg
or
xor
sbb
dec
pusha
(bad)
sub
pop
dec
sub
pop
jb
xor
mov
pop
cwde
or
xchg
out
inc
mov
pop
mov
cmp
push
cmp
cwde
mov
ret
sbb
add
popf
xchg
jnp
sub
jp
jo
mov
lds
jo
cwde
adc
cmp
push
out
ficom
mov
ja
and
push
imul
vmread
cmc
iret
sbb
xor
(bad)
mov
xchg
sbb
loope
sub
ss
add
add
lea
loope
std
sub
push
adc
add
push
add
and
in
sub
jno
pop
sub
sbb
or
push
call
or
or
cwde
adc
test
inc
popf
or
inc
pop
addr16
jmp
dec
jg
jb
neg
push
inc
adc
(bad)
cmc
lahf
cli
rcl
retf
sub
push
inc
fistp
adc
push
cmp
xor
mov
cdq
lods
dec
aam
cmps
mov
mov
mov
sub
pop
popf
cli
aad
popf
pop
je
xchg
add
cs
jmp
test
daa
test
xchg
cwde
inc
inc
sbb
in
leave
fadd
or
push
inc
rcr
jo
(bad)
mov
fdivr
xchg
scas
call
sub
je
jge
jmp
push
adc
or
popf
dec
lods
or
xor
daa
aaa
pop
sbb
stc
(bad)
sub
dec
xchg
pop
in
xor
xor
jp
xchg
test
cmps
pop
cwde
sbb
cmp
sbb
test
and
cwde
push
mov
mov
mov
adc
sbb
fstp
xchg
inc
cmp
jb
and
out
les
repnz
mov
leave
sbb
cmc
int3
es
scas
mov
inc
daa
xchg
jo
movs
ret
pushf
or
pop
and
lds
fimul
setp
pop
div
and
push
mov
(bad)
aam
cwde
imul
xchg
sbb
cmp
cwde
shl
imul
enter
stos
mov
jmp
xchg
sub
ror
push
cmc
ins
mov
das
add
call
xor
inc
or
jmp
dec
pop
out
scas
sub
cwde
(bad)
outs
arpl
jns
xchg
ss
mov
mov
out
and
push
adc
or
js
clc
jae
imul
stc
mov
mov
sahf
xchg
arpl
stos
loop
or
xchg
xor
or
push
fstp
inc
or
mov
mov
pusha
rol
cli
or
jmp
and
data16
retf
jmp
dec
push
pop
and
mov
xchg
or
ja
cmps
mov
js
xor
mov
sbb
fs
mov
loope
xchg
ret
sub
cwde
add
xor
jl
mov
in
sub
je
dec
test
add
cwde
and
sahf
scas
shl
test
mov
pop
push
retf
idiv
and
cwde
dec
mov
fcomp
mov
cs
xchg
xor
je
cwde
sub
push
xor
mov
mov
test
push
in
xor
mov
sub
clc
cmp
xchg
sub
xchg
jle
fcomp
or
mov
int3
scas
pusha
xor
gs
out
int
xor
ror
scas
dec
fs
test
jns
enter
cwde
push
adc
push
(bad)
xchg
jp
mov
sbb
mov
in
cdq
mov
js
sbb
xchg
pusha
ret
push
adc
cwde
cdq
mov
xlat
scas
cwde
(bad)
sbb
call
sti
jge
ins
xor
mov
int
mov
movs
or
js
retf
pop
push
sbb
push
sub
mov
adc
lods
(bad)
stc
popf
fdiv
jmp
sub
dec
push
bound
jnp
rdpmc
mov
push
adc
xchg
xchg
daa
push
arpl
xchg
sbb
mov
(bad)
popa
pop
mov
lahf
lahf
mov
cwde
xor
in
cli
xchg
mov
jg
push
mov
fs
(bad)
fisubr
in
(bad)
push
sbb
sbb
mov
sub
loopne
call
movs
aam
mov
push
daa
dec
pop
arpl
and
push
js
cwde
stc
stos
jns
dec
fstp
aad
or
popa
pop
cwde
mov
push
pop
mov
pop
sbb
xor
inc
xor
cwde
mov
push
out
fs
mov
adc
(bad)
js
pushf
movs
in
xchg
mov
and
cwde
leave
jecxz
jmp
arpl
mov
inc
cwde
sub
inc
xchg
or
dec
push
cmps
mov
repnz
sub
sar
cwde
ss
cwde
pop
cmp
sbb
adc
push
and
leave
jae
mov
xchg
pop
imul
or
adc
cmp
xchg
sbb
jmp
inc
xchg
xchg
inc
sub
inc
loope
inc
cdq
jge
xchg
cwde
(bad)
gs
cmp
xchg
push
and
pop
adc
mov
pop
push
lods
or
inc
push
jns
test
xchg
jmp
push
(bad)
add
dec
or
cs
mul
dec
or
mov
inc
cwde
retf
fidiv
xchg
scas
(bad)
sbb
test
and
xchg
bound
arpl
cwde
icebp
jae
fwait
jp
popf
sub
push
cld
xchg
pop
push
imul
cwde
arpl
cmps
mov
scas
xchg
cmp
adc
cld
pushf
add
test
sbb
rol
out
daa
cwde
sub
loop
mov
push
ret
cmp
jecxz
scas
cmp
int
int
daa
xor
mov
hlt
and
and
add
xchg
dec
xor
sbb
out
aad
adc
dec
sahf
cdq
ins
xor
ret
outs
sub
cmc
test
jb
test
fadd
stos
lods
xchg
add
cmps
(bad)
retf
pop
pushf
mov
lods
push
push
fidiv
mov
push
shr
scas
mov
add
clc
sub
inc
test
nop
ficom
xchg
outs
dec
outs
adc
jo
sbb
out
pop
fdivr
mov
ins
mov
cwde
ror
shl
mov
xchg
outs
movs
xchg
inc
mov
sub
push
mov
and
scas
ret
rol
xchg
(bad)
enter
mov
mov
mov
outs
or
mov
int3
popf
test
sbb
push
cwde
jns
ins
xchg
imul
inc
mov
xchg
cmp
or
mov
inc
stc
sbb
cld
mov
adc
(bad)
data16
loop
xchg
lahf
(bad)
mov
push
daa
or
dec
in
xchg
int
out
push
jl
ret
jno
fisubr
and
mov
pop
bound
jmp
dec
out
dec
movs
inc
cwde
mov
ins
cmps
dec
push
mov
xchg
mov
hlt
sub
or
in
shl
loop
cwde
fdivr
xchg
into
xlat
aam
out
ins
mov
loop
imul
pop
cdq
int3
(bad)
cmps
fld
js
cs
ins
mov
data16
jne
sbb
mov
and
pop
popf
push
pop
jp
int3
and
repz
pop
clc
xor
ins
ror
in
and
rcr
xchg
ins
xchg
sbb
clc
xor
inc
lods
inc
xlat
mov
lahf
jmp
cwde
(bad)
aaa
iret
loop
sub
jmp
cwde
pop
dec
(bad)
and
fdivr
clc
cwde
ret
sti
lods
mov
jne
xor
jp
lods
mov
adc
sbb
cmp
push
jge
mov
jmp
lock
jl
cwde
(bad)
pop
mov
cdq
out
test
mov
xchg
jns
adc
cwde
fisubr
addr16
imul
cmp
xor
cmp
int
push
in
sbb
stc
not
sub
jmp
clc
jmp
adc
in
outs
push
dec
in
cmp
and
clc
jne
jp
dec
pop
nop
xchg
dec
movs
mov
ror
push
mov
fadd
dec
push
inc
scas
sub
pusha
jecxz
dec
or
and
xchg
or
aaa
pop
(bad)
push
ins
adc
push
div
push
cs
xchg
push
cmp
cmp
sahf
jns
js
repz
fdivr
stos
sbb
int
out
push
inc
cmovnp
mov
add
adc
shl
(bad)
push
mov
sbb
jg
pop
xchg
jge
enter
cwde
jne
push
ins
push
cwde
push
mov
adc
jb
bound
mov
leave
sbb
pop
xor
je
mov
and
rcl
popf
or
in
lahf
ror
lahf
mov
in
outs
jmp
push
adc
lods
mov
push
and
sub
imul
mov
in
cmp
adc
sbb
push
(bad)
jnp
inc
sub
and
xchg
mov
xchg
adc
movs
mov
inc
cwde
clc
sub
jb
push
xchg
xchg
scas
ret
and
mov
icebp
js
cli
retf
loope
push
cwde
pop
fdiv
cld
mov
xchg
gs
xchg
cmp
cwde
cli
inc
pop
sbb
or
or
(bad)
cwde
cmc
fmul
xchg
mov
cwde
test
pop
and
mov
stos
sub
aad
movs
fdivr
movhps
sbb
cli
das
or
pop
es
jbe
cwde
pop
ds
pop
jbe
jb
jg
mov
xchg
mov
and
sti
mov
xchg
add
mov
mov
cmps
xchg
outs
sar
push
and
or
pop
sbb
sbb
fnstenv
lods
and
fistp
loopne
popa
(bad)
cmp
inc
fs
repz
scas
mov
pop
push
outs
js
cwde
lods
pusha
mov
aas
jne
jl
cmp
inc
cwde
cmp
inc
push
cmp
cwde
bound
enter
inc
xchg
mov
jbe
inc
pop
mov
imul
sbb
(bad)
cwde
mov
pop
inc
pop
xchg
jo
ja
outs
clc
mov
movhps
sbb
dec
int3
push
cdq
jle
(bad)
jo
lahf
lea
inc
mov
fsubr
loope
imul
add
xchg
shl
sahf
inc
fidivr
enter
ret
pop
push
pusha
es
jecxz
leave
ficom
imul
jmp
sbb
cwde
ds
pusha
nop
inc
sub
mov
add
push
fneni(8087
loopne
daa
int3
push
call
ja
lea
clc
inc
rcl
sar
test
push
std
push
call
pusha
jp
sbb
inc
mov
imul
adc
into
jne
(bad)
jp
pop
dec
sub
mov
int
sbb
hlt
push
adc
pop
and
jns
movs
pop
add
cwde
neg
pop
addr16
(bad)
mov
adc
cwde
nop
xchg
out
movs
mov
cld
cmp
sbb
or
outs
enter
call
jne
dec
push
push
call
mov
imul
inc
cmps
clc
sahf
stos
sar
sbb
adc
sbb
cwde
or
ins
sbb
in
lods
les
or
cwde
repz
jp
in
jle
cwde
xchg
push
pop
hlt
cmps
jbe
cli
mov
out
dec
xchg
mov
sub
aaa
imul
out
xor
inc
xchg
pop
int
inc
sbb
adc
pop
stc
cmp
test
pop
cwde
mov
sub
sub
dec
inc
cwde
ins
fstp
movs
xchg
inc
pusha
cmp
adc
cwde
sub
test
xchg
mov
or
ins
popa
mov
movs
mov
sar
(bad)
stos
sar
xchg
dec
pop
push
pop
cmp
(bad)
pop
call
iret
(bad)
(bad)
mov
xchg
shl
div
sbb
cs
fstp
rcr
push
cs
stc
jo
je
ss
test
popa
sbb
out
out
xchg
je
mov
fsubp
retf
aas
inc
xchg
loopne
sub
cwde
sub
shr
cmps
sbb
cmp
cwde
pop
in
je
and
mov
ins
stc
fistp
cmp
or
fcmovnb
xchg
mov
xchg
sub
es
lahf
hlt
int3
ss
inc
mov
aad
push
stos
pop
mov
pop
cs
clc
cmps
sbb
rcl
lods
enter
xchg
fs
retf
pop
mov
aam
mov
inc
stos
(bad)
out
popa
adc
cmp
xchg
sahf
mov
into
fistp
sbb
add
ficomp
cwde
pop
sbb
arpl
addr16
iret
outs
add
(bad)
loop
(bad)
xor
test
cdq
das
mov
jge
xchg
and
sti
les
add
pop
jg
pop
retf
pop
and
mov
(bad)
xchg
nop
je
mov
clc
clc
lds
and
nop
sbb
xchg
add
imul
jno
adc
lds
fisttp
jae
lods
pop
ret
sub
dec
jbe
xchg
jb
cwde
into
and
ficomp
test
cmc
iret
xchg
aas
mov
sub
xor
mov
cmps
push
pop
sub
js
xor
xchg
xor
imul
in
repz
adc
mov
test
or
out
div
cld
data16
and
cmp
jbe
lahf
jo
clc
outs
dec
xchg
in
fisubr
mov
push
and
ins
fstp
movs
outs
stc
pushf
xchg
add
out
(bad)
mov
int3
mov
mov
stos
mov
movs
jg
and
jle
xchg
fstp
cmp
pop
or
mov
xchg
add
pop
push
jecxz
pushf
add
mov
mov
mov
out
test
ins
xchg
push
xchg
sbb
jmp
mov
inc
ins
jns
mov
out
cwde
and
pop
xor
movs
cwde
mov
pushf
dec
iret
push
in
fisubr
sbb
in
retf
sbb
cmp
addr16
lods
mov
cdq
cwde
ins
loope
and
mov
or
push
cmps
pop
mov
xchg
test
popf
in
stos
sbb
cwde
icebp
aas
pop
or
cmp
xchg
scas
test
test
cs
xchg
ins
jge
sub
cwde
mov
pop
fcomp
and
xor
invd
sbb
inc
int3
mov
lods
jns
lock
ja
fs
fwait
pop
mov
sbb
cwde
and
aad
mov
inc
xor
hlt
sub
and
dec
mov
cwde
inc
aaa
call
jl
and
sbb
fld
push
scas
xchg
mov
rol
addr16
cs
pusha
dec
push
xchg
arpl
jp
pop
sub
ror
xchg
inc
xchg
jne
and
mov
xchg
dec
push
cmp
xchg
stos
cmp
jbe
pop
xor
cmp
and
xor
adc
inc
mov
add
sbb
sub
jo
mov
int
das
cmp
add
fs
mov
(bad)
pop
mov
(bad)
or
sub
scas
mov
pop
inc
push
ror
fs
(bad)
gs
and
mov
push
adc
sar
aaa
add
lea
inc
fwait
xor
jmp
dec
mov
in
sbb
mov
fcom
neg
add
sbb
mov
lds
mov
inc
outs
mov
(bad)
hlt
cwde
cmp
xchg
fwait
sub
pushf
or
clc
adc
ins
dec
sub
fnstenv
das
jbe
sbb
in
mov
cwde
push
(bad)
push
icebp
test
leave
repz
xchg
jb
sar
clc
push
cmps
lock
stc
(bad)
sahf
imul
ins
push
stos
mov
adc
les
sti
cli
sub
mov
xchg
inc
mov
out
xchg
or
dec
aaa
iret
cwde
fiadd
sahf
outs
add
js
mov
cmps
rcl
(bad)
in
xchg
lods
out
and
add
ss
or
cwde
leave
into
nop
adc
cmp
sti
dec
cmp
cwde
mov
stc
int3
(bad)
in
sbb
or
xchg
xchg
jp
mov
jl
fs
and
sbb
xchg
fsub
fld
scas
push
int3
sub
xlat
ds
in
xchg
dec
out
repnz
cmp
and
inc
jo
cmp
test
jnp
mov
xor
shr
cwde
add
jae
in
cmc
retf
add
xchg
loope
cmp
cmps
sbb
push
test
in
jmp
repz
and
rcl
mov
leave
fdivr
rol
xchg
mov
jp
mov
jb
les
fcomp
push
scas
or
xchg
(bad)
outs
jl
pusha
jp
into
dec
bound
cmp
cwde
mov
or
mov
xchg
cmp
addr16
test
das
or
gs
es
cwde
jp
mov
xchg
ins
jle
jge
sub
mov
dec
and
or
clc
push
push
loopne
ja
test
mov
pop
or
sub
sbb
stc
loop
cwde
mov
or
outs
cwde
mov
std
or
xchg
xchg
ins
inc
and
imul
cwde
jge
push
stos
mov
mov
test
aas
dec
inc
add
adc
mov
inc
xchg
xchg
xchg
mov
ins
add
mov
jg
mov
(bad)
sbb
push
lods
add
cwde
xchg
inc
or
test
cdq
xor
jmp
mov
xchg
sbb
js
cmp
es
xchg
out
xchg
mov
sbb
bound
dec
adc
data16
xor
adc
push
jae
cwde
mov
xor
outs
dec
xchg
rcr
push
xorps
push
push
pop
and
jle
bound
xchg
xchg
or
sub
fistp
lahf
test
jecxz
cwde
xor
not
in
mov
fdivr
push
test
gs
ret
int
in
xchg
test
cmp
cmp
push
sub
add
popf
and
retf
mov
(bad)
cli
cwde
les
mov
dec
push
pusha
xchg
scas
in
mov
jecxz
push
test
jnp
sub
push
test
push
xor
jl
jo
mov
nop
test
cwde
(bad)
into
in
add
mov
xchg
(bad)
cmp
xchg
push
daa
xchg
(bad)
repnz
lahf
push
jne
pop
imul
sbb
sbb
mov
faddp
sbb
add
test
gs
ss
xlat
sbb
retf
cdq
sbb
push
xlat
add
icebp
lds
mov
cmp
fs
test
xor
sahf
xor
cwde
jp
sbb
jmp
and
mov
ja
mov
xchg
pop
es
mov
mov
les
adc
ror
inc
cmp
outs
cwde
jno
fiadd
jbe
sub
daa
xor
add
out
dec
sub
lahf
sbb
push
loope
fstp
icebp
mov
xchg
cmp
cs
or
les
lods
xchg
push
adc
test
repnz
les
mov
retf
dec
das
in
lock
lods
mov
add
mov
xor
add
mov
xchg
test
js
popa
cwde
jb
nop
out
add
push
jo
add
add
shr
inc
inc
sub
(bad)
adc
test
jecxz
sahf
cmp
bound
arpl
mov
mov
push
aaa
cwde
add
fisub
mov
mov
scas
fmul
xchg
outs
mov
dec
cli
mov
fwait
pop
mov
and
call
(bad)
ins
jl
or
sbb
jge
nop
sahf
xchg
arpl
lods
rcr
push
in
push
out
enter
daa
call
xchg
(bad)
int
inc
xchg
into
pop
adc
jle
push
xchg
(bad)
aam
aad
push
sahf
sub
push
cwde
cs
sub
fisttp
adc
adc
imul
mov
int3
(bad)
fcom
xlat
add
adc
push
jne
or
test
or
and
cwde
repz
(bad)
out
xchg
arpl
enter
pop
fwait
jbe
js
xchg
retf
inc
cmp
pop
jae
in
or
lds
cmp
(bad)
push
sar
sub
shl
lock
nop
cmp
jl
jmp
mov
ins
dec
pop
aaa
mov
and
push
sub
loope
mov
cmp
mov
stos
mov
call
inc
jbe
push
mov
cld
nop
sbb
fcomip
adc
test
pop
(bad)
lock
xchg
push
pop
ret
js
std
(bad)
cwde
fisub
mov
icebp
and
sub
lods
call
bound
iret
ror
cwde
inc
(bad)
imul
in
push
neg
xchg
cmp
popa
lahf
lock
gs
arpl
lods
push
sub
xchg
inc
mov
jmp
sbb
int
push
cwde
mov
repnz
inc
rcl
xlat
xor
fnstsw
(bad)
int
cmp
shl
and
out
sub
jle
push
mov
lods
pop
(bad)
mov
aad
imul
js
pop
enter
mov
rcl
loopne
(bad)
test
add
lock
xchg
clc
aam
into
(bad)
fidivr
jl
dec
push
cwde
xchg
js
xchg
or
fistp
cwde
mov
xor
adc
ins
and
cwde
or
clc
mov
fistp
sahf
js
pop
leave
or
xchg
out
mov
in
test
xchg
sbb
push
xor
inc
data16
or
pusha
lods
(bad)
fnsave
addr16
mov
add
inc
add
pop
test
xor
daa
pop
loopne
xchg
cwde
mov
(bad)
test
out
rcl
icebp
cmp
push
push
popaw
clc
and
iret
mov
loope
test
imul
sub
aas
or
cdq
stos
out
fstp
fdivrp
sbb
cmp
pop
sti
shr
out
adc
retf
or
jmp
push
loope
repz
out
sbb
xchg
or
icebp
push
cld
xchg
add
(bad)
cmp
cmps
call
daa
int
adc
mov
cwde
imul
xor
pop
cwde
test
sahf
and
jmp
loop
add
adc
xchg
sub
pushf
push
push
xor
mov
leave
add
aaa
mov
fwait
cmps
lea
jmp
adc
jp
aad
cwde
pop
add
and
outs
adc
adc
stos
sbb
cmps
mov
cwde
adc
xor
inc
pop
mov
xor
sahf
cwde
in
mov
jnp
cwde
les
pop
aas
dec
test
or
sbb
cwde
mov
jge
pop
into
dec
xor
cmps
test
pop
push
hlt
sar
or
xor
arpl
clc
dec
xor
adc
lahf
sbb
dec
lock
retf
or
not
mov
lock
cwde
mov
xchg
shr
cmp
fidiv
imul
cwde
inc
xchg
inc
push
dec
sub
push
xchg
mov
mov
jle
xlat
cmps
mov
xchg
jecxz
int3
movs
pop
(bad)
push
push
sahf
lods
mov
mov
cwde
jmp
adc
das
xor
sub
push
test
sub
inc
loopne
cmp
popf
adc
or
mov
int
sub
cwde
mov
sub
ror
xchg
xor
jmp
pop
test
pop
jmp
ficomp
test
sbb
cmc
ret
push
outs
jne
xchg
push
loopne
cwde
mov
sub
or
xchg
xchg
jne
test
(bad)
dec
out
dec
xor
jle
cwde
or
mov
out
pop
jns
dec
cwde
dec
mov
jg
cwde
cmp
in
lods
add
mov
repz
sub
test
stos
jbe
xchg
cmps
push
mov
mov
xchg
inc
(bad)
fstp
ret
cmp
jmp
aad
fidiv
sar
jp
add
sub
arpl
xchg
rcl
daa
dec
sub
jmp
pop
in
push
push
cwde
mov
out
push
lock
xor
mov
dec
das
popf
cmc
push
or
ret
mov
mov
dec
les
mov
repnz
mov
mov
dec
sbb
xchg
loopne
cwde
ret
jnp
ins
out
cwde
pop
inc
adc
add
pushf
out
add
jge
dec
xchg
xchg
out
or
sub
lock
das
les
movs
aaa
push
dec
push
mov
test
add
scas
sub
sbb
jge
jno
cwde
xor
stc
ret
or
frstor
test
pop
xor
fistp
retf
call
and
mov
lods
cmc
pop
cwde
cld
movs
imul
pop
xchg
sar
outs
rol
sbb
push
cmp
loop
cmps
mov
iret
(bad)
pop
aaa
jbe
in
cdq
lds
mov
icebp
les
sahf
adc
xor
mov
clc
movq
push
jae
jno
pop
hlt
out
jmp
mov
xor
push
dec
inc
mov
leave
mov
(bad)
out
les
aad
sub
outs
ror
xchg
ret
popf
and
lock
les
cvtss2sd
fmulp
aad
cmp
push
sub
jbe
mov
(bad)
arpl
mov
popa
push
mov
bound
fld
jne
pop
das
jno
pop
cwde
pop
mov
push
fnstenv
pop
aaa
dec
push
jmp
mov
fmul
and
call
icebp
add
fidiv
sbb
mov
mov
out
std
and
push
mov
repnz
xchg
test
lea
jb
inc
push
cmp
cwde
pop
popa
jns
mov
jg
and
rcl
test
sbb
add
push
cmp
out
repz
pop
or
dec
pop
xchg
adc
push
mov
xchg
xchg
jae
pop
pop
pop
xor
fmul
push
and
push
pop
jmp
mov
loop
mov
xor
lahf
loopne
jge
mov
mov
rcl
scas
icebp
clc
iret
aas
stos
sub
mov
mov
jb
add
xor
clc
mov
mov
and
xor
fucomp
shl
scas
cwde
xchg
mov
xchg
mov
addr16
dec
pop
cdq
mov
je
cmc
fnstenv
cwde
push
stc
test
out
cwde
adc
dec
sti
fisubr
jmp
add
test
stos
push
xlat
js
jecxz
cwde
(bad)
sbb
icebp
xchg
jne
inc
push
mov
cdq
je
loopne
cmp
push
dec
sub
js
xor
xchg
inc
icebp
jl
ds
xchg
in
clc
into
or
in
push
js
ret
clc
mov
shl
add
fdivr
mov
rcr
sub
xchg
mov
sbb
sahf
mov
push
aam
cmc
mov
stc
rcr
cmp
xchg
add
or
jecxz
in
adc
dec
pushf
ins
into
xchg
and
nop
push
mov
mov
fstp
outs
inc
jbe
enter
movs
cwde
jecxz
push
inc
rcr
rcl
pop
add
mov
in
push
jno
dec
xchg
cs
sbb
jmp
adc
cmp
(bad)
cwde
push
cli
jecxz
dec
sub
mov
push
test
pop
dec
ss
push
xchg
dec
hlt
ret
dec
stos
adc
xlat
pop
jl
call
repz
or
jbe
xchg
xor
imul
or
or
cwde
jnp
jecxz
ds
add
pop
jl
mov
enter
xchg
sub
call
xchg
xor
sub
pop
cwde
pusha
dec
hlt
mov
jge
jo
fnsave
cwde
mov
sub
cwde
aas
push
es
sbb
or
mov
stos
popf
dec
xchg
xor
sub
or
aaa
iret
in
enter
imul
(bad)
sub
cwde
cmps
mov
icebp
ret
cwde
and
bound
retf
jge
(bad)
aas
mov
pop
fmul
retf
(bad)
add
add
ss
mov
adc
iret
push
cwde
(bad)
mov
xchg
fwait
outs
iret
sbb
int3
xchg
jp
push
push
sbb
push
fadd
es
rcl
(bad)
mov
mov
aaa
pop
sub
mov
jae
aam
dec
es
out
adc
adc
mov
lock
pusha
lds
xchg
loop
xor
pop
dec
mov
inc
jne
cmp
(bad)
xchg
repnz
sub
push
clc
call
xchg
sub
jae
mov
sbb
adc
push
dec
mov
or
test
xchg
cmp
push
pop
rcl
mov
xchg
loopne
sbb
cwde
loop
jecxz
adc
data16
mov
out
les
push
repnz
pusha
xchg
es
rcr
mov
ret
xchg
mov
imul
jmp
enter
xchg
arpl
add
push
add
std
je
push
lods
data16
gs
pop
sub
pop
add
les
and
ret
ins
inc
in
sub
and
mov
cwde
enter
clc
sbb
into
in
fbstp
retf
add
push
inc
andps
cwde
or
cmps
adc
adc
cwde
sbb
(bad)
out
mov
or
popf
out
call
sbb
jp
mov
push
and
xchg
add
movs
div
out
je
fsubr
or
arpl
fstp
or
ret
mov
mov
xchg
adc
mov
inc
imul
mov
jnp
mov
cld
ret
xor
sbb
xchg
jns
hlt
clc
(bad)
cld
enter
mov
sbb
mov
pop
jmp
sbb
in
leave
pop
pusha
adc
sub
push
repnz
sub
cwde
push
in
clc
out
xor
imul
and
xchg
add
call
clc
pop
dec
mov
pop
daa
jbe
out
dec
inc
jo
xor
hlt
cmp
mov
ja
mov
lahf
sub
mov
push
rol
adc
ss
cwde
jl
dec
mov
call
lds
adc
movaps
cld
je
cwde
retf
bound
and
fidiv
stos
xchg
mov
inc
sbb
cwde
aas
pop
mov
mov
xchg
sbb
mov
xor
out
mov
jmp
movs
lea
iret
sbb
outs
sub
rcr
cwde
cmc
push
sbb
aaa
dec
push
je
push
shr
rol
mov
adc
imul
cmp
nop
xchg
mov
mov
xchg
add
lds
push
(bad)
mov
xchg
mov
adc
or
push
adc
das
sbb
jecxz
arpl
call
xor
push
jmp
aam
cwde
daa
imul
mov
repz
jle
(bad)
cmp
pop
fstp
adc
scas
cdq
ins
outs
cwde
test
aaa
in
add
out
leave
or
sbb
cli
pop
(bad)
ins
mov
jnp
pop
rcr
inc
outs
jno
nop
sbb
std
mov
xchg
ins
aad
and
es
dec
dec
fadd
push
sbb
cwde
in
hlt
imul
ror
ja
xor
jge
xlat
ret
fdivr
jmp
pop
lock
sbb
mov
jmp
pop
lea
xor
push
ins
cdq
aam
ins
inc
clc
std
adc
pop
outs
mov
call
jo
cwde
cmp
mov
and
iret
cwde
pop
sub
sub
xchg
enter
aas
adc
int
jle
cwde
in
add
stos
aaa
sets
push
cmp
shr
in
cwde
cmp
lahf
push
xchg
pop
loop
cwde
scas
mov
or
jne
add
cmps
pop
mov
xchg
jp
out
out
push
imul
movs
xchg
scas
xor
cmp
data16
fld
inc
or
jmp
jne
pop
cmp
ror
xchg
outs
xchg
popa
pop
popf
mov
mov
jb
add
xchg
push
mov
js
or
mov
add
call
mov
lea
hlt
cmp
(bad)
pop
mov
lahf
jp
ret
pop
inc
xchg
add
push
movs
pusha
jecxz
in
pop
cdq
sub
pop
dec
scas
mov
sbb
adc
pop
jmp
dec
int3
test
int
xor
retf
push
addr16
pop
cdq
mov
xchg
aad
pop
sub
stc
add
loope
popa
jno
inc
das
inc
push
xchg
addr16
call
sahf
jmp
or
ins
dec
cwde
mov
push
cwde
dec
stc
mov
pop
or
jmp
nop
ins
imul
pop
xor
and
xor
pop
mov
loop
repnz
dec
int3
push
sub
push
(bad)
sahf
retf
ins
mov
aaa
add
test
push
push
stc
adc
leave
adc
sub
clc
sbb
out
ja
sbb
leave
cmp
(bad)
pop
xchg
movs
outs
je
xor
xchg
les
dec
fsub
pop
in
fstp
retf
xor
mov
arpl
shl
push
inc
popf
and
icebp
lods
fldenv
xchg
sbb
ret
adc
push
sbb
rol
cwde
xor
lahf
sbb
cmp
fucom
cwde
sbb
cdq
add
rcl
pop
adc
sub
jne
test
outs
fwait
adc
enter
mov
mul
adc
ret
adc
push
clc
popa
das
mov
outs
push
leave
fwait
ror
dec
cwde
jno
cmps
sar
jmp
or
sbb
pop
sahf
sub
ins
popf
jbe
xchg
imul
daa
inc
jo
pop
imul
inc
inc
mov
cdq
call
daa
and
dec
js
arpl
shl
rcl
mov
repz
cmp
(bad)
je
in
mov
xchg
add
cwde
fild
cwde
shufps
xchg
adc
leave
pop
push
addr16
or
add
mov
cwde
mov
lahf
sub
(bad)
data16
dec
adc
push
adc
sbb
mov
sti
and
xchg
popa
jno
mov
add
xor
add
jno
dec
(bad)
imul
loope
pop
sar
or
push
dec
push
jp
push
or
add
jmp
mov
call
sub
mov
push
(bad)
aam
cwde
mov
fwait
or
cwde
push
daa
and
inc
pop
cmp
js
push
scas
xchg
xchg
in
loope
ds
and
scas
int
sbb
fdivr
cwde
jne
inc
push
cwde
inc
stos
mov
es
bound
outs
int3
rol
retf
add
push
xor
jnp
pop
bound
mov
ret
movs
xor
dec
in
pop
mov
repz
into
cwde
xlat
mov
mov
cmp
jp
fcomp
inc
jmp
cwde
xor
pop
mov
or
(bad)
jmp
ins
jb
mov
dec
rcr
inc
loopne
cmc
shr
jbe
rol
jns
inc
rcr
mov
adc
push
sbb
addr16
in
iret
inc
fwait
dec
xchg
adc
loope
jl
pop
dec
sar
rcr
fdivr
cmp
or
jge
xor
(bad)
js
icebp
sbb
call
push
xchg
psubusw
push
aaa
out
js
or
cwde
sti
movs
inc
(bad)
jo
sbb
in
xchg
loope
(bad)
retf
(bad)
in
leave
and
inc
fdivr
xchg
movs
cwde
out
(bad)
es
or
add
mov
in
jb
mov
fmul
push
mov
mov
xchg
fdivr
out
dec
jmp
mov
repz
push
sub
cmp
repnz
enter
pop
or
call
jg
loop
xchg
inc
mov
aad
xchg
js
add
or
les
ror
lods
xchg
loopne
lock
inc
xchg
mov
mov
mov
movs
mov
jecxz
xor
repnz
sub
cwde
xchg
xchg
add
xchg
loopne
daa
stos
xchg
cwde
rcr
fldcw
(bad)
icebp
jecxz
adc
call
and
cmps
retf
mov
xchg
out
es
or
cwde
iret
fisub
xchg
je
push
add
mov
shr
test
(bad)
xor
cwde
dec
push
pop
cmp
push
daa
cwde
(bad)
cld
les
vmovaps
scas
(bad)
fwait
scas
mov
jp
cmps
fmul
call
push
daa
xchg
arpl
push
xchg
jo
push
sub
clc
pop
repz
xchg
scas
jbe
pop
inc
bound
mov
fwait
pop
or
mov
pop
push
fistp
icebp
out
clc
cmp
xor
dec
inc
cwde
call
loope
mov
push
pop
sub
pop
cwde
sub
loop
cwde
stos
jmp
ret
add
je
icebp
pop
cwde
gs
pop
and
cwde
nop
push
pop
jmp
cwde
fyl2x
pop
enter
push
cwde
mov
push
cld
xchg
pop
sahf
leave
adc
mov
sub
addr16
out
xchg
test
fnstsw
fsubp
xchg
into
dec
pop
pushf
ret
cmc
and
jo
xchg
das
out
daa
push
jp
mov
(bad)
scas
add
lods
mov
inc
clc
sbb
mov
adc
pop
stc
movs
push
mov
or
daa
mov
cmp
inc
push
inc
pusha
jecxz
xchg
mov
sub
dec
sahf
mov
dec
inc
cmp
mov
outs
jnp
cwde
cmp
mov
jge
mov
(bad)
int3
jecxz
add
das
cwde
xor
xor
adc
cli
frstor
scas
js
lds
ins
outs
iret
fnsave
xor
popf
jae
pop
js
mov
or
xchg
xchg
xor
xchg
jb
push
inc
mov
in
adc
mov
pop
inc
pop
push
push
out
retf
sbb
inc
sub
cmps
mov
cwde
sub
sub
xor
push
cwde
add
adc
xchg
jbe
pop
movs
xchg
bound
pop
mov
sub
inc
jl
jo
loopne
clc
add
adc
test
mov
push
and
adc
fstp
push
out
mov
xchg
push
lods
mov
mov
scas
cwde
dec
stc
daa
inc
fcompp
cmp
xor
icebp
pop
dec
xor
adc
sahf
leave
clc
pop
mov
js
xor
in
cwde
cli
pop
shr
ja
mov
ret
loop
(bad)
lock
mov
cmp
mov
daa
pop
loop
data16
les
adc
or
shld
int
pusha
xchg
cmp
adc
cwde
call
aam
adc
scas
scas
push
cmp
pop
mov
mov
xchg
push
test
sbb
loop
xchg
or
xchg
mov
jg
jle
dec
adc
xchg
xchg
and
enter
ret
mov
lock
xchg
(bad)
and
or
nop
test
scas
mov
int3
popf
test
pextrw
jno
into
or
pop
xor
adc
test
mov
add
dec
mov
sub
cmp
xchg
or
mov
xchg
lock
mov
in
bound
or
jecxz
pop
out
mov
adc
xor
push
adc
shr
ret
fs
out
cmps
cwde
pusha
add
xchg
xor
in
mov
stos
xchg
push
popa
mov
jo
fist
jg
js
cmp
and
ror
out
jl
xchg
in
or
sub
xor
or
leave
jb
cwde
das
pusha
iret
inc
cld
cmc
cmp
inc
sbb
xor
scas
(bad)
imul
dec
mov
call
adc
repz
xchg
or
sub
sbb
clc
pop
xchg
fst
(bad)
jb
push
test
imul
in
xchg
ins
idiv
ret
arpl
sub
gs
retf
fcomp
jbe
sbb
add
inc
push
inc
mov
fldenv
gs
jg
outs
and
dec
or
sub
and
dec
into
xor
push
int
add
aaa
add
shr
xchg
mov
pusha
lahf
pop
int3
mov
pop
xchg
pop
mul
xchg
jle
scas
mov
call
cmp
dec
sbb
call
jg
cmp
(bad)
scas
mov
xchg
gs
pop
(bad)
in
repnz
frstor
loopne
jo
sti
into
and
inc
rcl
jp
dec
jmp
add
adc
mov
js
mov
add
mov
icebp
cmp
es
dec
pop
outs
dec
pop
dec
sar
in
sub
add
sar
sub
push
xchg
push
sti
xor
lock
push
mov
mov
std
lods
pop
cwde
js
and
sti
cwde
in
sub
xor
(bad)
xchg
xor
cwde
outs
jl
sub
xchg
xchg
inc
xchg
dec
in
sub
fucomip
mov
pop
xchg
scas
lahf
xor
xchg
out
clc
or
add
pop
sub
(bad)
jbe
cwde
push
inc
test
cwde
jecxz
sti
cmp
inc
jae
or
mov
sbb
cmp
ficom
xchg
rol
fsubr
lahf
add
jbe
clc
stos
cmp
and
retf
(bad)
(bad)
call
test
sub
je
fwait
popf
adc
cmp
cwde
test
xchg
mov
jle
jge
cmp
or
loop
jns
mov
xchg
add
xor
sbb
rcr
fcom
out
clc
xor
mov
inc
xchg
sbb
ins
jae
pop
push
sbb
push
add
jne
lahf
jp
ffree
enter
retf
imul
push
(bad)
movs
cwde
ror
pop
add
mov
mov
jl
mov
scas
or
rcr
pop
sbb
hlt
test
fs
stos
dec
ficomp
or
jno
jg
jg
mov
out
das
cwde
imul
xor
xchg
out
xchg
cld
leave
fcom
push
sub
aam
xchg
sti
(bad)
daa
cmp
in
in
push
jo
jecxz
(bad)
adc
cwde
sahf
xchg
add
and
jae
jo
lahf
retf
add
clc
ret
pusha
jo
xlat
cwde
mov
mov
popf
cwde
jo
mov
ins
imul
jae
test
pop
dec
(bad)
test
(bad)
sahf
pop
inc
das
mov
(bad)
push
pop
loopne
adc
test
dec
icebp
repnz
shr
mov
ss
dec
push
ins
jbe
xor
enter
rcr
mov
jecxz
lds
pop
pop
test
inc
xchg
js
sub
or
xchg
repnz
mov
(bad)
jns
jl
fstp
push
(bad)
int3
mov
cwde
hlt
jg
mov
movs
jp
mov
cwde
jae
xchg
dec
mov
inc
fcomp
arpl
add
pop
lock
rol
xor
push
pop
cmp
cwde
scas
xchg
(bad)
gs
ss
stos
pop
fcomp
leave
call
jmp
push
dec
pop
cmp
fldcw
xchg
pop
adc
mov
xchg
adc
fwait
sub
movs
jnp
push
lds
push
or
cwde
sub
push
cmp
and
in
xchg
xor
mov
stos
(bad)
rcl
xor
fisub
out
stc
leave
sbb
add
mov
sub
clc
push
fdivr
jns
ret
cmp
inc
xchg
fstp
push
jmp
ss
mov
imul
cwde
add
jge
push
pop
ins
(bad)
xchg
rcl
lods
(bad)
scas
shl
lahf
xor
add
ss
in
sbb
aaa
jp
or
inc
loop
cmc
xor
fldcw
loope
xchg
bound
add
xchg
je
mov
shr
push
xor
test
inc
ret
mov
xchg
jns
xchg
lods
mov
(bad)
xor
repnz
push
adc
mov
push
pop
es
ins
adc
inc
js
jmp
call
les
cwde
jbe
dec
pop
mov
dec
sbb
jle
push
ins
xor
jecxz
or
scas
jno
adc
xor
shl
fild
das
xchg
xchg
mov
test
retf
cmp
jle
sti
jecxz
scas
inc
out
imul
fstp
pop
sahf
jne
mov
mov
and
push
push
push
sbb
push
cmp
xchg
mov
clc
jg
push
ds
int3
std
aaa
adc
into
cmp
into
fadd
out
sub
dec
rcl
or
addr16
fs
mov
hlt
inc
sbb
xor
push
jns
add
sbb
jb
je
mov
push
inc
push
adc
cwde
test
fimul
xchg
adc
mov
std
xchg
dec
sti
sub
xor
sbb
jb
mov
call
or
mov
fnstsw
movs
test
cwde
gs
mov
xor
call
cmp
push
retf
sub
sbb
push
or
jnp
xchg
adc
jl
cli
das
lea
xchg
sti
push
adc
and
sbb
jmp
lods
jecxz
push
inc
clc
daa
pushf
cwde
arpl
fadd
sbb
cwde
xchg
shr
xor
test
adc
dec
or
js
jae
cwde
ja
xchg
jp
mov
test
cmp
sbb
pusha
pop
cwde
and
mov
fsubr
mov
cs
retf
lock
or
jbe
inc
aad
pop
adc
inc
xor
adc
out
xchg
push
mov
in
js
and
loope
bound
xchg
scas
xor
cmp
dec
or
sahf
cmp
mov
daa
xchg
pop
cmps
lea
mov
xor
adc
and
outs
sbb
mov
in
sbb
jecxz
out
lahf
adc
pushf
jge
sbb
inc
(bad)
mov
cmp
mov
sbb
pop
xchg
mov
cwde
popa
pop
push
add
cmp
test
(bad)
dec
popa
cwde
dec
cld
data16
gs
or
or
jb
or
or
push
mov
rcl
mov
inc
cdq
push
push
sub
adc
cmp
sbb
and
sahf
jnp
adc
or
jge
enter
lock
pop
ins
pop
and
stos
sbb
test
arpl
inc
push
cwde
adc
enter
ins
inc
xchg
pop
xor
adc
mov
xor
and
pop
dec
(bad)
or
popf
dec
call
xor
push
xchg
adc
sbb
and
xchg
push
bound
cmps
clc
aam
fisubr
xchg
(bad)
xor
jno
adc
cwde
xor
icebp
int3
fcomp
mov
(bad)
pop
xchg
xchg
jg
enter
pop
and
adc
outs
ret
xchg
mov
push
jo
cmp
xchg
or
cwde
jecxz
ds
add
loope
jae
jge
sub
retf
je
mov
aam
aaa
xchg
lods
enter
rol
pop
sub
mov
int3
int
cwde
xchg
push
xchg
cwde
cmc
xchg
jo
in
inc
or
cwde
jle
push
mov
lods
loop
xchg
je
(bad)
jnp
jle
mov
cs
jno
int3
mov
mov
pop
cmp
pushf
data16
mov
mov
sub
pop
into
call
in
fdiv
call
imul
cli
icebp
test
mov
xchg
pop
mov
sub
clc
test
fadd
push
cwde
mov
lea
cwde
test
aad
jbe
push
cwde
cmps
sub
jnp
jb
out
xchg
repnz
xor
js
mov
jns
ds
add
pop
xchg
imul
scas
in
sbb
push
add
ja
adc
push
or
inc
xlat
jno
mov
mov
es
cdq
popa
nop
mov
pop
outs
mov
(bad)
int3
and
jle
scas
inc
add
lods
xchg
push
xor
mov
lea
jge
in
shl
ror
popf
jl
bound
ins
or
add
sub
iret
add
sub
xchg
ret
xchg
ja
jge
stc
(bad)
cwde
enter
sbb
pop
adc
cmc
enter
cmps
push
cwde
cdq
ins
out
hlt
or
sub
scas
pop
daa
test
outs
cwde
cmps
mov
mov
or
loop
dec
push
ja
daa
adc
push
cwde
add
dec
cmps
xlat
mov
xchg
xchg
gs
cmp
jbe
mov
pushf
arpl
std
mov
dec
cwde
bound
xchg
pop
jmp
mov
or
in
and
lea
clc
pop
fcmovne
test
cwde
adc
jge
ss
jo
cdq
lahf
aaa
add
repz
test
cwde
xchg
scas
mov
mov
cwde
jae
ror
xor
repz
sub
add
cwde
mul
stc
lea
mov
pop
dec
aas
cdq
add
sbb
xchg
xor
sbb
cmp
mov
mov
and
or
int
sub
xchg
cli
repz
(bad)
xlat
sub
stos
inc
int
push
(bad)
mov
in
sbb
pop
in
adc
pop
add
adc
in
or
std
lds
mov
push
and
sbb
xor
and
xchg
or
pop
xor
sahf
xchg
imul
push
jmp
jmp
cwde
inc
push
jbe
lods
jecxz
xchg
ja
fisttp
xchg
cmp
test
or
jmp
test
call
mov
sbb
and
movs
mov
test
loopne
sub
cmp
shl
xchg
push
dec
out
test
jb
jp
xchg
cmp
stos
ds
imul
mov
ret
test
ds
ror
and
in
cwde
ja
jl
jp
cwde
xchg
fnstsw
push
pusha
or
jg
jp
int3
dec
adc
or
adc
or
push
and
push
xchg
xchg
call
sbb
dec
adc
or
pop
xchg
xchg
sbb
out
pop
sub
push
or
jmp
add
inc
cld
les
jle
out
xchg
sub
psubsb
mov
cwde
cld
sub
dec
jns
sub
xchg
fld
and
jmp
idiv
ds
dec
push
push
(bad)
and
ror
add
mov
xchg
fst
vpsubd
js
add
mov
pop
pop
sub
xchg
nop
aam
and
popf
and
xchg
adc
out
push
xor
mov
out
or
dec
mov
std
call
sbb
jns
dec
lahf
dec
push
sbb
jge
cmp
in
mov
dec
mov
int3
not
inc
stos
pop
jbe
adc
cwde
jmp
fldcw
xor
sub
jbe
mov
xor
xchg
(bad)
jmp
jnp
call
int
js
loop
cwde
out
cmc
pop
retf
jle
xchg
or
cmps
std
les
xchg
pushf
push
in
(bad)
sbb
xor
aas
(bad)
nop
push
inc
jmp
sbb
jne
dec
cdq
imul
cwde
outs
jae
loop
mov
jl
mov
dec
arpl
mov
addr16
stos
(bad)
ret
sub
inc
imul
and
sbb
mov
add
cwde
cmps
pop
in
jmp
push
into
push
imul
popf
cmp
pop
fld
dec
loop
pop
ins
jae
jo
xchg
xchg
bound
mov
sub
push
cwde
sub
pslld
adc
xchg
jnp
push
test
inc
cwde
jns
cmp
retf
mov
test
xchg
pop
sub
shr
retf
lods
cmp
jecxz
fwait
add
push
jmp
jp
cs
gs
xor
sbb
shl
ins
ja
pop
cli
ret
xchg
adc
push
jbe
sbb
stc
xchg
data16
nop
ret
xchg
ror
dec
adc
add
push
or
je
pop
cmp
pop
jns
fnstcw
clc
lods
cmp
fnstcw
mov
or
shr
push
and
test
jb
nop
fwait
and
pushf
ins
cld
loope
clc
push
leave
inc
mov
fs
fdiv
nop
div
or
fwait
xchg
test
add
shl
sub
fxch
fdivr
(bad)
cmp
mov
pusha
xchg
and
loopne
test
mov
push
cmp
xchg
pushf
mov
fisubr
cmps
ret
xchg
out
std
mov
mov
enter
fmul
enter
leave
cwde
inc
sbb
arpl
push
rol
fcom
jb
jecxz
or
add
out
test
sub
lods
push
xchg
sub
clc
dec
adc
push
sar
pop
call
cmps
clc
mov
cmp
adc
test
fs
(bad)
pop
dec
pop
imul
sub
mov
adc
sub
sbb
cmp
shl
retf
jecxz
cwde
pop
inc
dec
push
and
cwde
jbe
xor
dec
jle
lahf
gs
scas
mov
dec
enter
cwde
int
mov
lds
cwde
push
mov
test
cmps
nop
sti
xor
or
sub
xor
in
cld
sbb
(bad)
repz
dec
push
mov
or
cmps
mov
jb
dec
sub
ja
dec
loop
scas
adc
jnp
nop
mov
nop
(bad)
mov
xchg
popf
les
jmp
retf
stos
mov
retf
into
cmp
(bad)
cwde
(bad)
add
xor
std
cwde
mov
out
sbb
ss
inc
mov
lods
mov
mov
and
mov
xchg
scas
push
mov
xchg
pop
xor
inc
and
jno
mov
dec
and
dec
add
xlat
push
repnz
cmps
mov
out
retf
imul
cwde
call
xchg
lahf
and
xchg
mov
push
push
cwde
pop
mov
and
sbb
mov
ins
mov
shl
ror
cwde
lahf
addr16
add
(bad)
sahf
aad
push
cli
or
or
cwde
lds
adc
jg
cwde
xchg
fwait
inc
add
push
adc
xor
cwde
jmp
pop
cmp
inc
jecxz
xchg
leave
cwde
dec
fs
mov
push
jnp
int3
sub
cmps
and
aam
xor
or
mov
mov
mov
clc
add
cwde
push
pop
and
or
jno
jo
scas
loop
popf
popa
mov
loopne
add
jo
mov
jmp
sub
sbb
sbb
out
pop
lods
inc
ins
loopne
mov
xlat
mov
push
sbb
xchg
or
loope
dec
sub
cmp
mov
aaa
sub
jecxz
in
hlt
je
jo
inc
sub
lahf
int
js
retf
cwde
stos
push
xor
pop
pop
jl
cwde
popf
xor
push
arpl
and
adc
mov
shr
fdiv
mov
add
or
xor
inc
jle
mov
adc
int
xchg
jg
adc
push
es
pop
fwait
popf
js
adc
rcl
jl
adc
dec
add
sbb
push
jae
pop
cmp
jmp
mov
dec
and
(bad)
fnstcw
fisttp
pop
cmp
stos
leave
or
lahf
inc
sub
rol
mov
mov
(bad)
rcr
cmps
xchg
(bad)
lods
rcr
jae
out
cwde
or
and
inc
sub
mov
dec
call
adc
sar
cwde
mov
sub
leave
cwde
loope
test
adc
stos
neg
aad
call
cmp
pop
xor
and
test
mov
shr
pusha
adc
mov
cld
jp
aaa
push
fldenv
push
pop
es
cmp
sub
pushf
fsub
mov
ret
call
ds
push
cmp
repnz
pop
data16
dec
adc
dec
hlt
cmps
inc
cdq
jbe
arpl
outs
mov
inc
pushf
and
pop
sahf
shr
push
or
push
sub
stos
cdq
aam
fist
cmc
xor
retf
lods
xchg
dec
push
jb
ja
pop
popa
sbb
ins
js
mov
adc
xor
pusha
jb
lahf
repnz
cdq
jg
push
xor
js
in
add
pop
push
xchg
push
out
cwde
inc
leave
int3
mov
mov
xchg
fstp
lods
xchg
dec
jae
sub
jne
mov
das
sbb
or
xchg
xor
jle
call
xchg
mov
(bad)
stos
(bad)
push
dec
movs
stc
dec
adc
pop
in
ins
add
sahf
jecxz
pop
pop
add
fwait
cwde
xchg
loop
mov
push
mov
aam
fcomip
ficom
push
cwde
pop
jne
movs
mov
adc
rcr
in
scas
fptan
cmp
mov
mov
cmp
in
mov
out
sbb
mov
mov
pop
and
inc
sub
and
test
pop
hlt
add
xor
jb
dec
gs
(bad)
and
loope
call
loop
push
into
mov
loope
pusha
popa
mov
cmp
jbe
je
sub
out
push
enter
ins
clc
or
(bad)
xchg
mov
adc
sub
stos
mov
fcom
cwde
mov
and
cwde
mov
pusha
mov
dec
cs
shr
adc
pusha
push
jbe
dec
popf
mov
sub
pop
jge
sub
push
xchg
movs
dec
and
adc
rol
int3
mov
call
xchg
movs
daa
inc
fsubr
dec
sbb
sahf
imul
push
lods
mov
inc
mov
add
loope
cmp
bound
cmp
sbb
xor
call
push
xchg
imul
enter
cdq
int
dec
xor
ins
loopne
jg
lods
jg
retf
not
mov
xchg
dec
inc
mov
lock
or
adc
mov
push
cmc
adc
pop
les
and
cmp
data16
push
fisubr
xor
pop
(bad)
lods
popf
inc
xchg
test
imul
loop
adc
cwde
test
pop
dec
cwde
retf
xchg
xchg
xchg
xchg
out
sbb
push
or
jns
in
clc
xchg
lock
xchg
lahf
push
inc
cmp
xor
or
xor
xchg
fldcw
lahf
adc
mov
mov
adc
adc
pop
popf
clc
iret
arpl
adc
add
fld
fdivr
adc
mov
in
test
inc
sub
aaa
add
sub
int
inc
mov
dec
push
pop
sbb
adc
fst
mov
cld
mov
cwde
in
neg
or
inc
fdiv
xor
jnp
or
cwde
xlat
cmps
jle
dec
arpl
or
jmp
cdq
cwde
js
jge
add
pop
cwde
xor
adc
mov
mov
loop
loop
xchg
mov
xchg
dec
jnp
outs
and
xchg
jecxz
sbb
and
inc
jo
cwde
dec
jecxz
inc
nop
repz
cwde
sbb
or
dec
or
cs
test
(bad)
(bad)
leave
cwde
mov
xchg
stc
scas
sub
sbb
test
movs
aad
mov
push
xchg
repz
sub
mov
sbb
xchg
and
adc
pop
pop
mov
jl
inc
int3
xor
xchg
scas
push
in
fmul
clc
pop
mov
pop
jne
xchg
push
cwde
and
push
sub
jecxz
xchg
pop
and
sub
and
jbe
cmp
push
cwde
push
dec
or
adc
cwde
push
and
push
retf
jno
xchg
dec
or
sbb
(bad)
push
and
rcl
push
mov
stc
cmp
dec
ins
mov
jo
retf
mov
sbb
sbb
cmp
mov
add
call
xchg
mul
mov
cmps
fst
add
cwde
mov
lds
fstp
movs
adc
call
loopne
int3
fistp
leave
aas
or
add
not
js
push
sti
xchg
retf
clc
jg
popf
mov
ret
retf
ins
mov
inc
lahf
pop
loop
std
mov
mov
jg
push
(bad)
inc
or
xchg
push
adc
rcr
ror
mov
sbb
in
sbb
enter
outs
inc
cwde
out
mov
jns
jae
xchg
enter
mov
pop
pop
cld
and
mov
mov
ret
lods
aad
or
inc
sbb
or
call
xchg
inc
pop
pop
inc
add
pusha
mov
cmp
mov
jge
xchg
dec
sub
cli
jb
xchg
ins
jbe
push
add
fdivr
xor
ds
cmps
or
or
dec
pop
inc
aas
sub
in
cwde
inc
xchg
arpl
xchg
shr
movs
jmp
sub
pop
mov
sahf
adc
or
(bad)
js
jnp
mov
cmp
les
mov
mov
add
mov
jecxz
lds
xchg
jnp
cmc
in
cwde
pop
rol
hlt
xchg
xchg
test
sbb
push
inc
cmovp
pop
movs
test
add
cmp
push
xchg
or
cwde
or
adc
fwait
sbb
cmp
inc
jnp
enter
into
loopne
pop
cwde
call
push
or
xchg
std
lea
aam
imul
cmp
cwde
gs
dec
jg
dec
retf
or
stos
adc
add
jo
cdq
push
cmp
xor
cwde
or
sub
fstp
sbb
mov
not
mov
inc
pop
mov
addr16
(bad)
cwde
push
pop
lea
in
ret
mov
mov
jecxz
stc
sti
add
jl
ror
nop
outs
(bad)
cmps
mov
push
mov
push
pop
fidiv
movs
dec
add
not
xor
xlat
fisttp
jg
out
sti
ficomp
rcr
les
cwde
scas
loope
das
or
mov
or
retf
jge
hlt
rcr
jnp
repz
in
mov
mov
dec
xchg
xlat
test
jmp
push
out
pop
cmp
je
cmps
cwde
add
adc
sti
cmp
ds
cwde
loope
sub
not
aad
cwde
pop
stos
hlt
int
cli
mov
cwde
loope
test
jecxz
xlat
das
xchg
xor
jle
push
loope
cmp
and
(bad)
mov
call
mov
jnp
(bad)
in
mov
jo
cwde
jmp
imul
cmp
pop
fcmovb
inc
pop
fild
pop
cmp
xchg
push
mov
jmp
stos
or
aaa
adc
aas
push
pop
dec
mov
inc
dec
fs
outs
test
xchg
mov
or
dec
pop
jne
retf
leave
fisttp
lock
or
imul
cmp
sub
in
fistp
and
jne
gs
int
test
call
lea
and
cwde
pop
mov
fisubr
dec
xor
int3
shl
xchg
add
mov
mov
mov
dec
pushf
outs
fsubr
and
arpl
jl
dec
xor
add
mov
imul
xchg
outs
sbb
push
popf
jae
retf
cmp
cwde
(bad)
mov
mov
xchg
cwde
mov
(bad)
xchg
(bad)
les
push
js
movs
cwde
mov
fldcw
mov
xchg
and
lea
xor
int3
push
(bad)
cmp
cwde
xor
mov
fstp
fldenv
in
test
push
enter
sbb
jmp
test
icebp
dec
sbb
data16
push
cwde
test
out
add
ins
dec
cwde
jecxz
push
mov
imul
cwde
aad
test
paddw
cwde
ss
push
imul
lock
imul
push
and
int3
push
ins
pop
push
push
lock
and
or
pop
or
add
or
mov
out
mov
aad
lahf
mov
push
xchg
icebp
(bad)
test
jge
popf
into
fsubr
sbb
pop
xor
sbb
cmp
retf
dec
xchg
jmp
fs
sbb
sbb
pop
ds
xor
mov
and
cwde
cmps
and
push
and
cwde
push
pop
sub
fdiv
in
push
cmps
lahf
lods
mov
test
add
push
add
sbb
pop
and
and
leave
imul
dec
and
(bad)
lds
bound
out
call
xor
xchg
push
push
push
pop
cmp
sbb
jmp
push
xchg
das
outs
jle
popf
mov
cmp
into
mov
jl
xchg
fadd
jg
aad
sbb
push
int
addr16
jb
add
xchg
push
add
pop
jb
xor
outs
mov
xchg
call
in
cli
adc
cwde
pop
xor
mov
cwde
inc
xor
dec
mov
out
das
cwde
int3
pop
xchg
(bad)
loopne
imul
sub
cwde
push
repz
retf
xchg
data16
push
int
xor
cmp
jmp
mov
mov
jo
add
pop
jl
mov
scas
sub
(bad)
push
xlat
jnp
ss
xchg
sbb
sub
xchg
xchg
and
jp
mov
in
mov
jge
or
iret
xchg
mov
inc
xor
mov
sbb
imul
xchg
loope
outs
add
push
pop
xlat
pop
cli
pop
outs
mov
pop
cmp
js
xchg
add
adc
sub
daa
mov
jmp
xchg
sub
jp
dec
push
inc
push
iret
jae
cwde
stos
(bad)
aam
or
int3
and
cmps
fidiv
test
(bad)
cwde
sar
xchg
fisub
js
and
call
jnp
cmps
in
repz
push
in
movs
sbb
(bad)
ds
popf
in
push
cwde
jnp
fwait
add
cwde
cdq
add
ja
enter
fdivrp
dec
pop
cmp
adc
push
xchg
(bad)
scas
adc
shr
pop
mov
push
jb
iret
lods
in
repnz
cwde
pusha
sub
dec
add
jl
test
icebp
rcl
mov
int
xchg
jb
mov
xchg
repz
sbb
push
sub
inc
call
jb
pop
mov
push
in
cmp
js
mov
xchg
jle
jb
sub
out
sub
pop
cli
test
jae
cwde
aad
fidiv
retf
xchg
adc
add
rcr
ss
cmp
xchg
popf
(bad)
das
pop
and
fcomp
jae
ja
cwde
mov
mov
mov
inc
(bad)
or
scas
aaa
dec
adc
inc
js
inc
pusha
cwde
js
cdq
leave
movs
mov
ins
or
(bad)
pushf
mov
xchg
repnz
rcr
ret
cwde
xchg
data16
ret
adc
cdq
sbb
das
loop
add
xchg
hlt
movs
push
out
retf
mov
adc
test
imul
call
push
cwde
fcom
or
rcr
retf
cwde
sub
fcmovnbe
scas
mov
shl
daa
sub
add
dec
sbb
xchg
out
or
pop
mov
scas
push
mov
or
pop
sbb
scas
clc
rcl
lods
dec
mov
xor
jnp
jmp
push
cwde
ret
pop
es
pop
push
adc
xor
pop
push
adc
fs
fldcw
out
or
push
cwde
mov
fld
cwde
dec
cs
mov
xchg
popa
in
cwde
adc
xor
mov
cli
popf
jmp
scas
loopne
xor
cmp
ja
test
daa
cmp
jo
pop
das
push
jl
pushf
lods
mov
jbe
xchg
arpl
jb
stos
jl
aam
mov
fnsave
cmp
xchg
cdq
adc
add
ror
fidivr
and
xchg
fld
mov
fsub
add
or
xor
add
pop
mov
inc
sbb
into
(bad)
adc
stos
nop
cmp
mov
cld
mov
mov
push
test
pop
arpl
sbb
mov
rol
jl
(bad)
pop
push
mov
xor
js
pop
xchg
jno
lahf
xchg
shl
pop
sbb
add
adc
cwde
out
bnd
add
or
in
cs
imul
sbb
gs
clc
cmp
mov
push
call
jbe
mov
jle
ss
push
je
dec
sub
jl
pop
sub
ins
data16
(bad)
daa
push
push
sbb
push
in
and
clc
pop
push
por
xlat
mov
sub
int
pop
jmp
mov
jb
cwde
repz
jne
mov
sbb
pop
cs
inc
jne
and
test
inc
sub
add
(bad)
repz
pop
pop
cwde
and
dec
retf
test
xchg
popa
cwde
dec
jns
xchg
push
mov
hlt
xchg
stos
sbb
xchg
lea
daa
mov
lds
(bad)
mov
push
add
xlat
in
jmp
(bad)
mov
push
bound
cmp
(bad)
call
jmp
pop
out
mov
or
test
or
xchg
out
and
and
mov
adc
das
add
int3
(bad)
mov
rcl
or
cli
jl
int
fild
js
dec
add
or
pop
stos
call
mov
bound
add
dec
data16
int3
fild
jbe
lahf
push
lds
mov
pop
mov
mov
push
cwde
and
sbb
out
outs
sbb
mov
cmc
xchg
sbb
(bad)
sbb
dec
adc
ss
pop
or
inc
push
cwde
xchg
lods
sub
adc
sub
and
cdq
out
xchg
jp
fsub
clc
add
es
sub
into
mov
inc
cmps
js
js
sbb
fcom
(bad)
(bad)
and
dec
pop
mov
jg
cwde
xchg
jp
jmp
and
sbb
jmp
js
cwde
push
jo
xchg
scas
mov
test
dec
addr16
dec
call
add
cmp
inc
dec
inc
jmp
jns
mov
add
out
xchg
push
cld
daa
xor
inc
js
dec
cdq
loope
in
push
cwde
or
shl
cwde
rol
into
add
je
adc
call
xchg
push
and
jnp
xchg
adc
cwde
movs
adc
jg
scas
add
cwde
push
(bad)
cwde
pop
cld
mov
icebp
sbb
jns
push
out
inc
cmp
xchg
xor
sub
inc
fs
mov
scas
inc
mov
push
or
outs
aaa
push
mov
xchg
dec
push
jecxz
jmp
xchg
mov
xor
pop
push
stos
push
cmp
dec
sti
stos
xchg
fmulp
adc
cmp
stc
xchg
pminsw
sub
push
push
es
scas
dec
add
sub
stos
push
jnp
leave
pop
out
lahf
mov
jb
cmps
in
adc
mov
xchg
test
lahf
imul
fisub
into
bound
inc
scas
movs
inc
or
ins
xchg
loope
lods
sub
xchg
jo
addr16
dec
sub
sub
mov
xor
lock
pop
idiv
js
mov
gs
es
sbb
mov
stos
int3
jle
push
ror
jns
jl
mov
pop
ins
dec
xchg
and
and
inc
cwde
mov
xchg
mov
xchg
dec
call
sub
je
xchg
out
xchg
rcl
loop
and
(bad)
pop
nop
retf
clc
mov
ss
fadd
cwde
std
jns
jecxz
in
sbb
pop
js
mov
adc
pop
cwde
mov
add
ret
adc
outs
jmp
jg
adc
fidiv
sbb
lock
leave
sahf
cmp
jle
or
mov
add
jge
out
cwde
(bad)
clc
mov
jae
or
mov
lods
test
jb
and
and
mov
call
jmp
mov
jb
xor
cwde
in
sub
xor
adc
sbb
sbb
push
in
std
sar
das
dec
cwde
jmp
fcomp
push
and
lods
jmp
ret
mov
jle
movs
fisttp
(bad)
outs
cwde
push
(bad)
outs
mov
push
sub
fs
cwde
dec
fwait
xchg
nop
fdiv
xchg
mov
inc
ret
xchg
sub
movs
xchg
push
fcmovbe
cmp
push
push
cwde
idiv
data16
nop
cwde
or
xor
jb
cwde
mov
iret
mov
mov
aad
sbb
mov
add
arpl
push
setno
fs
mov
mov
enter
mov
pop
iret
sbb
imul
xchg
jne
dec
push
jbe
push
cdq
imul
fxtract
push
inc
retf
lds
ret
push
outs
repz
fwait
xchg
push
pop
or
not
push
stos
ror
lock
imul
ror
sub
xchg
jl
and
(bad)
cwde
(bad)
sbb
dec
lods
push
aad
(bad)
cmp
adc
sti
or
or
inc
stc
push
arpl
call
mov
inc
retf
(bad)
adc
mov
sti
inc
fdiv
imul
sub
inc
lods
imul
cdq
sbb
xchg
sbb
pop
das
mov
xchg
pop
test
scas
lods
(bad)
sbb
imul
test
xlat
pusha
lods
mov
out
cwde
jmp
pop
cwde
call
or
test
(bad)
stos
sbb
lahf
cmp
jg
out
scas
movs
mov
push
dec
jmp
int3
aaa
mov
xor
data16
cwde
lock
nop
call
dec
loope
xchg
ins
jecxz
cwde
(bad)
dec
mov
stos
xor
retf
dec
clc
pop
mov
xchg
cmp
xor
mov
xchg
aas
pop
jns
dec
test
stos
mov
enter
ja
add
cmp
mov
mul
cmps
test
pushf
xchg
cwde
push
and
push
or
call
cmp
push
cmp
and
push
and
sbb
stos
mov
cwde
sbb
mov
cmp
das
cmp
mov
xchg
in
xchg
add
sahf
ja
xchg
mov
dec
std
sub
add
xor
push
mov
ficomp
jp
dec
in
nop
scas
fxch
xchg
add
adc
aaa
cmp
jp
test
and
cwde
pop
push
(bad)
call
out
push
xchg
ins
popa
mov
test
mov
cwde
cmp
rcr
add
cld
fisubr
cwde
sti
popa
enter
ret
and
retf
and
les
pxor
sub
and
cmc
bound
and
outs
leave
mov
inc
cwde
add
cmp
and
ins
test
in
neg
pop
out
popa
(bad)
loopne
cmps
aad
xlat
dec
mov
pop
pop
ins
and
sar
test
xchg
jne
cmp
icebp
imul
cwde
mov
sub
dec
pop
add
or
inc
jo
les
rcl
push
add
ins
pusha
out
cdq
jle
jb
xchg
inc
mov
mov
mov
aad
out
icebp
in
into
xor
pop
push
shr
lods
test
popf
xchg
gs
xchg
ret
pop
push
es
data16
add
mov
cmp
and
call
cli
push
in
lock
adc
sub
test
mov
loope
dec
or
xchg
cmp
(bad)
xchg
in
cwde
aaa
sbb
hlt
jg
into
movs
sbb
dec
push
inc
xor
cmp
xchg
pop
lods
dec
fadd
or
cwde
or
movs
sub
add
inc
test
and
sub
fist
cs
xor
inc
lea
cwde
cmp
cmps
cwde
out
xchg
jg
mov
add
xor
mov
leave
cwde
push
mov
cmps
mov
inc
repnz
mov
in
mov
cwde
and
fs
jno
xchg
xchg
fdivp
cmps
dec
jecxz
push
(bad)
jo
in
jp
jle
sbb
gs
test
sbb
sub
stos
or
pop
sbb
loop
dec
(bad)
xchg
dec
cwde
add
inc
xor
movs
and
or
scas
sbb
mov
cld
cwde
lods
and
xchg
popa
xor
sets
adc
jmp
sub
sbb
add
ret
sub
sub
clc
fstp
mov
mov
pop
mov
xchg
inc
popa
lods
popf
cwde
push
xchg
lahf
xor
add
xchg
cwde
bound
icebp
xor
xchg
mov
cmp
or
xor
ja
movs
mov
not
and
sbb
inc
sub
jg
xchg
mov
test
xchg
enter
loopne
pop
mov
mov
xlat
jns
test
push
xchg
add
pusha
hlt
lahf
into
cmp
jmp
sbb
push
jnp
xchg
push
fist
sbb
xor
push
rep
inc
cmc
bound
(bad)
lods
jmp
cmp
ja
sub
retf
sbb
pusha
(bad)
jge
lods
add
mov
sub
cwde
inc
lock
in
inc
jns
mov
xchg
gs
fs
xchg
(bad)
sub
adc
jnp
lahf
mov
mov
adc
push
dec
push
cmp
call
js
mov
cli
push
ret
inc
pop
inc
aad
xor
inc
jne
mov
nop
lahf
movs
cs
mov
ds
pop
out
xor
jae
pop
jbe
cwde
xchg
loop
popa
jp
inc
mov
movs
push
adc
call
push
push
cbw
int
dec
lahf
add
cmc
into
sub
arpl
pop
push
push
jl
imul
cmp
xchg
add
adc
mov
mov
cmp
sar
clc
bswap
adc
leave
enter
sbb
mov
xchg
mov
xchg
and
mov
cli
xor
ror
add
mov
sub
hlt
jmp
mov
cmp
or
add
ins
ss
cmp
mov
xor
stc
cld
dec
mov
adc
shr
scas
pop
cmp
or
in
iret
unpckhps
aaa
jno
cmp
push
sbb
mov
outs
cwde
fstp
dec
ss
cld
in
adc
test
add
sub
icebp
lock
cwde
mov
rcl
int3
aam
bound
repnz
jmp
pop
and
in
cmps
clc
push
lea
sbb
mov
int
enter
mov
or
aaa
cwde
aaa
push
cmp
cli
les
cwde
jns
and
dec
pusha
mov
cwde
sbb
in
(bad)
retf
adc
mov
or
pop
add
mov
enter
add
nop
mov
hlt
adc
je
imul
jmp
mov
out
and
inc
mov
in
int
push
add
pop
jmp
adc
pop
test
js
lea
adc
sbb
xchg
scas
mov
aaa
dec
mov
mov
xor
gs
test
xchg
xor
push
cmp
xor
lahf
mov
in
xor
sub
loopne
and
(bad)
repz
sbb
xor
aas
ins
jbe
or
fcomp
std
xor
pop
mov
retf
lahf
jmp
jbe
imul
sub
outs
push
aad
imul
jecxz
adc
data16
lods
repz
iret
js
push
jmp
jl
or
cwde
adc
pop
xor
xchg
pop
into
loopne
mov
xor
push
mov
js
jae
shl
xchg
push
push
inc
pop
and
push
call
push
cwde
stos
leave
loop
imul
pop
cwde
sub
jbe
xor
xor
xchg
sub
jb
mov
cli
js
daa
rol
xchg
arpl
imul
adc
xor
loopne
scas
xchg
push
jno
loopne
dec
xchg
fadd
xor
inc
(bad)
xchg
pop
fldenv
adc
sbb
fs
cmp
int
jmp
mov
jmp
leave
lds
clc
in
sar
and
or
xchg
xor
fldcw
jae
cwde
mov
(bad)
and
push
xor
pusha
mov
push
push
addr16
mul
xchg
test
cmp
mov
xchg
xor
mov
int3
lods
adc
xchg
stos
ins
push
push
test
pushf
aaa
xor
push
je
jecxz
popa
jg
cwde
fild
jae
or
mov
and
adc
les
ds
cwde
sub
push
fst
or
pop
dec
sub
je
inc
sub
outs
pop
inc
push
jns
mov
lock
int3
adc
jecxz
into
jae
jo
sub
inc
jmp
mov
jg
cdq
mov
xor
add
cs
mov
pop
ins
jae
retf
leave
xchg
test
inc
(bad)
call
or
xchg
add
sahf
arpl
cmp
sbb
stos
adc
cwde
sbb
push
lock
mov
push
call
or
pusha
inc
sub
mov
jge
or
cdq
cmps
inc
add
loope
push
xchg
jb
in
cmc
(bad)
sbb
rcl
push
cmp
ds
ret
mov
loopne
push
cwde
sbb
and
stos
sar
xor
jl
jecxz
xchg
mov
enter
mov
nop
gs
mov
in
xor
jg
xchg
lods
adc
dec
sub
lea
mov
jl
xchg
and
pop
mov
cmp
rcl
loopne
cli
or
test
mov
inc
jo
cmp
xor
mov
mov
or
push
pop
sub
or
xchg
pop
mov
xchg
lahf
sbb
icebp
push
xchg
push
(bad)
push
jmp
ins
push
and
iret
sti
adc
fnstsw
rcr
cwde
push
pop
cmp
and
lock
xchg
pusha
and
and
xchg
sub
sub
cwde
jmp
lds
call
sub
and
inc
js
xchg
std
pop
cmps
ret
inc
popa
or
imul
dec
xchg
sub
or
sar
adc
fcomip
xlat
sbb
les
sub
mov
cwde
fisubr
adc
test
dec
adc
mov
cwde
test
xchg
arpl
scas
popf
push
imul
mov
das
popa
adc
stos
dec
shr
mov
pop
xchg
add
aaa
xchg
js
xchg
and
sub
jecxz
mov
or
or
pop
retf
and
cmp
test
pop
jbe
push
sub
mov
test
sbb
push
imul
clc
cwde
cmp
addr16
xchg
and
xchg
int
dec
push
repz
daa
shl
dec
sbb
dec
jmp
ss
popf
fucomi
clc
mov
sbb
xchg
test
add
ins
int3
rcr
jg
popa
cwde
lods
mov
hlt
stos
jbe
cwde
xchg
addr16
dec
movs
jecxz
scas
cwde
sub
aam
cmps
sti
(bad)
ins
mov
js
pop
adc
mov
fnstcw
push
es
inc
jp
mov
leave
out
dec
in
xchg
leave
aas
inc
cmp
sbb
add
sar
call
mov
imul
out
adc
lar
int3
push
jl
cwde
call
sub
jo
lahf
test
or
sbb
cmp
test
mov
pop
sbb
mov
jmp
cwde
fidivr
cmps
fist
push
repnz
cwde
(bad)
xchg
inc
stos
sub
push
dec
and
xor
pop
xchg
imul
loopne
fsubr
dec
push
inc
push
sub
leave
cmp
sbb
pop
(bad)
dec
pop
sbb
daa
stos
dec
aaa
sub
hlt
sub
fsubr
aaa
mov
add
xlat
add
mov
arpl
xchg
push
cmp
dec
sub
call
xchg
sbb
xchg
cdq
imul
rcr
repz
sub
adc
mov
jl
rcr
mov
mov
sbb
jge
sbb
jle
xchg
xchg
(bad)
aad
enter
mov
push
xor
lahf
stos
test
push
enter
xchg
cwde
(bad)
out
adc
cwde
adc
cmp
in
cwde
repz
jge
mov
adc
bound
cmp
daa
cld
ins
pop
or
ins
xchg
mov
mov
push
or
scas
jmp
clc
sbb
repz
retf
lahf
inc
jns
data16
adc
hlt
in
icebp
(bad)
ins
pop
loop
xor
pop
sub
xchg
sar
in
adc
cs
inc
pop
mov
pushf
mov
xor
cwde
push
and
jl
dec
cwde
mov
push
ret
rcr
stos
or
or
loope
and
add
dec
movs
push
cmps
(bad)
jmp
lahf
test
(bad)
fmul
xchg
add
and
aad
repz
push
mov
sub
or
dec
jecxz
push
cdq
lods
cmp
sbb
pop
rcl
xchg
and
addr16
fwait
clc
jbe
imul
pop
push
push
retf
aad
inc
cmp
imul
ret
(bad)
xchg
mov
sahf
nop
inc
pop
sub
gs
jns
pop
std
push
add
es
cwde
ins
shl
imul
or
mov
pushf
jo
inc
mov
(bad)
jle
stos
pop
adc
fs
int3
and
cwde
add
cmp
idiv
fist
ds
mov
shr
sub
cld
cwde
test
out
out
(bad)
xchg
(bad)
cmc
shl
movs
xor
pushf
push
outs
outs
cwde
pop
and
pop
and
mov
add
(bad)
arpl
adc
xchg
mov
mov
push
xchg
cli
int3
je
adc
popa
pop
mov
mov
stc
lds
cmp
xchg
aas
icebp
pop
push
(bad)
into
xchg
js
fs
out
cld
iret
jge
dec
out
mov
mov
dec
(bad)
lahf
ret
cwde
pop
mov
(bad)
shl
scas
(bad)
cmp
inc
dec
push
mov
fs
call
xor
pop
and
aad
inc
gs
nop
icebp
outs
rol
cmc
xchg
pop
push
push
mov
int3
jmp
sub
xlat
fwait
in
inc
push
xchg
aad
cmp
mov
into
and
add
icebp
pop
sti
loop
xor
jno
xchg
aam
sub
push
inc
add
push
push
les
pop
cmps
push
(bad)
cwde
dec
dec
mov
adc
pop
mov
xor
sub
pop
dec
pop
bound
xchg
inc
sbb
xchg
lods
mov
jb
cwde
sub
enter
cli
mov
xchg
add
pushf
jp
ins
std
fcmovu
cwde
cmps
sbb
das
pop
or
xchg
adc
xor
mov
dec
imul
cdq
mov
test
sub
jb
push
and
add
mov
jns
pop
dec
lahf
rcr
xchg
and
dec
xchg
test
scas
jmp
pusha
pop
jecxz
je
sbb
movs
jg
jl
cwde
sbb
call
mov
xchg
jne
outs
rcl
in
pop
scas
scas
inc
or
adc
inc
cmp
push
dec
pusha
je
outs
pop
scas
dec
sbb
jp
mov
mov
call
adc
jle
repz
and
clc
adc
sub
lods
inc
xor
out
xchg
push
(bad)
or
aas
dec
ds
cld
xor
scas
mov
push
ds
pop
xchg
jo
sti
sub
xchg
xchg
lods
inc
shr
add
pop
sahf
dec
pusha
inc
stos
dec
sub
mov
cwde
sub
push
mov
mov
xor
sub
ret
adc
push
mov
cdq
pusha
and
int3
(bad)
cmps
shr
xchg
lahf
push
push
mov
xor
enter
sbb
lock
ret
ja
rcl
cmp
dec
mov
inc
pop
pop
sar
(bad)
sbb
ins
or
xchg
cmc
into
test
mov
or
retf
clc
mov
cmp
mov
xchg
xor
xor
call
call
outs
mov
sub
(bad)
jns
pop
mov
sbb
xor
inc
loop
cwde
out
jecxz
mov
sbb
xor
ss
jg
aam
leave
jmp
sub
dec
mov
clc
xor
aam
(bad)
(bad)
sbb
add
jmp
loop
ret
pop
mov
in
pusha
or
and
in
lock
sub
dec
sub
push
push
mov
out
mov
call
cmps
cld
(bad)
pop
add
stos
cwde
repz
cmp
cs
out
dec
push
inc
rcr
loope
cmp
xchg
adc
dec
sbb
(bad)
nop
mov
test
pop
cwde
sar
inc
mov
(bad)
loopne
or
pop
gs
cwde
in
cmps
adc
ret
stos
cwde
iret
stos
adc
add
sub
mov
mov
mov
mov
xchg
imul
add
and
outs
jae
imul
mov
pop
popf
cdq
xchg
stc
std
adc
fs
cdq
xor
fwait
gs
stos
fimul
xor
lods
push
push
push
mov
pop
(bad)
imul
dec
add
(bad)
call
jp
pop
mov
jge
cld
mov
or
jne
adc
add
and
and
mov
scas
imul
cwde
xor
add
mov
leave
js
adc
cld
movups
nop
adc
add
scas
call
mov
loope
leave
sbb
sub
fs
icebp
call
inc
stos
jle
cmps
inc
adc
retf
aad
sub
cmp
add
call
pop
cwde
and
js
jg
shl
xchg
pop
frstor
cmp
xor
xchg
sbb
dec
mov
add
jle
jo
push
xchg
mov
mov
adc
dec
icebp
add
cwde
loopne
(bad)
hlt
scas
push
xor
sub
add
add
mov
jge
js
ret
and
jnp
inc
xchg
push
xchg
jo
leave
fsubr
adc
pop
loop
dec
sub
cs
imul
cwde
pop
xor
movs
mov
sbb
mov
ret
add
cdq
movs
fistp
loope
mov
scas
dec
dec
mov
(bad)
cdq
cmp
sub
mov
sub
add
jmp
inc
mov
inc
cwde
stos
cld
sahf
movs
mov
xor
pop
adc
fld
cld
int
mov
rcr
cmc
inc
lds
add
adc
clc
sbb
lea
mov
xor
xor
shr
imul
out
pop
aaa
or
icebp
push
sub
jg
fsub
loop
lock
mov
sar
push
inc
jb
add
jl
fcom
jge
dec
movs
jae
imul
cwde
xor
out
and
cwde
es
or
mov
lods
cwde
inc
mov
push
cs
popf
jb
pop
retf
sbb
in
xor
dec
mov
data16
cwde
xchg
push
stos
and
or
bound
mov
sbb
sbb
movs
inc
push
jmp
dec
adc
cwde
outs
jge
add
mov
js
stos
fnstenv
add
pop
aad
mov
pushf
scas
or
sub
fcom
jge
cwde
adc
cld
fnsave
cmp
or
pushf
int3
std
pop
mov
mov
push
jae
adc
jbe
popf
nop
or
scas
mov
popf
into
adc
lock
dec
clc
ret
repnz
fist
js
xchg
jmp
je
push
cwde
lahf
popa
stos
stos
imul
pushf
lods
outs
fistp
mov
pop
out
icebp
add
mov
rep
cmp
cwde
adc
mov
daa
xchg
cmp
add
aas
iret
shl
mov
push
inc
cs
retf
sub
sbb
jns
sub
mov
les
jb
lods
das
jo
sbb
pop
cmp
out
pop
inc
add
lock
imul
xchg
mov
sbb
inc
xchg
mov
fsub
not
inc
int
std
jnp
cdq
xchg
test
data16
and
mov
jp
push
and
sub
out
push
mov
into
imul
xchg
push
popf
leave
cmp
mov
dec
shr
out
jp
sub
int3
dec
scas
push
jge
mov
test
sub
daa
lahf
add
mov
cwde
mov
dec
add
fwait
mov
cwde
inc
push
(bad)
or
test
pop
jmp
add
xchg
cli
push
and
in
cwde
in
icebp
mov
int3
cwde
aaa
fs
xor
or
js
jb
inc
mov
test
adc
cmp
or
pop
adc
push
sub
push
dec
adc
out
or
mov
cmp
jo
and
mov
xchg
fcmovnu
mov
call
cwde
sub
jecxz
out
aaa
fdiv
xchg
adc
push
mov
out
rcr
add
addr16
push
dec
mov
sub
mov
out
adc
or
xchg
in
retf
iret
and
cwde
inc
movs
pop
xchg
shl
jmp
sbb
out
test
addr16
mov
lock
retf
bound
mov
lahf
pop
jbe
jno
cwde
mov
mov
lds
inc
aam
fsub
push
xchg
loope
cwde
fnstcw
(bad)
aad
xchg
mov
imul
test
ficomp
sub
lahf
loope
push
adc
xchg
and
jle
cmp
jle
inc
mov
and
loop
ja
push
inc
push
xor
sbb
xchg
movs
pop
adc
mov
out
pop
add
push
out
push
mov
push
icebp
call
sub
adc
stos
xor
out
sub
mov
xchg
fild
adc
leave
lea
sbb
mov
fs
(bad)
hlt
cwde
fyl2x
sub
push
cmp
pushf
sbb
adc
add
cmp
aaa
sub
mov
call
push
ss
stos
retf
jmp
jmp
test
dec
test
ins
sbb
int
xchg
add
fldenv
cwde
xsaveopt
add
aaa
arpl
add
je
adc
sbb
push
aad
push
push
call
adc
(bad)
stc
(bad)
pop
push
rcr
cli
sub
fidivr
int
pop
retf
lods
fcomp
xchg
iret
xlat
scas
inc
sbb
xor
ret
xchg
sub
inc
fwait
xchg
cwde
mov
out
rol
xchg
jp
dec
inc
mov
push
fldcw
dec
pop
lea
mov
mov
int
jmp
push
or
cwde
mov
pop
lock
adc
call
es
sub
jge
xor
cwde
dec
dec
not
fldenv
call
jns
js
call
mov
stos
pop
mov
push
sub
mov
jno
imul
ins
push
movlps
xchg
cwde
pop
sbb
xchg
adc
push
cwde
xor
sub
cwde
sub
cmps
xchg
div
cmp
mov
out
adc
jbe
xchg
push
push
sbb
or
push
adc
sub
cwde
xchg
mov
call
mov
sbb
pop
and
test
imul
mov
push
shr
cdq
push
mov
xchg
in
push
jmp
sub
and
(bad)
fstp
jg
cwde
shl
fistp
and
mov
test
mov
xchg
sub
push
cwde
jo
mov
mov
dec
sbb
ret
jl
(bad)
data16
or
xor
push
sub
push
popf
pop
cwde
jecxz
imul
fsin
enter
xchg
pusha
imul
mov
xchg
data16
stos
leave
rcr
or
push
adc
cwde
fcmovb
stos
xchg
push
out
or
scas
xor
out
jle
cwde
(bad)
pop
and
jbe
pushf
xchg
sbb
test
mov
pop
es
pop
dec
clc
scas
push
stc
call
sti
or
adc
daa
out
cwde
or
xlat
stc
dec
pusha
jle
cwde
push
push
es
call
cwde
popa
push
mov
jns
dec
pop
aas
mov
sbb
cwde
sti
pop
jmp
ss
cmp
rcr
xor
int3
(bad)
into
cwde
adc
cmp
leave
sahf
cwde
cvttps2pi
xor
fwait
cwde
mov
aas
fsub
push
cwde
mov
inc
xchg
xor
sub
mov
call
or
out
sahf
mov
cmps
pop
inc
not
xchg
(bad)
push
sbb
xchg
ret
push
mov
ja
inc
jg
dec
xchg
xchg
fnsave
test
cwde
mov
push
dec
mov
add
mov
mov
sbb
int3
fcomi
call
ds
sub
add
aaa
fmul
scas
mov
test
(bad)
cmp
jecxz
fist
fistp
cs
cmp
cwde
jno
mov
aam
out
(bad)
cmps
fnstsw
xor
or
sub
add
mov
xchg
xchg
mov
xchg
mov
cmps
mov
jecxz
pop
mov
fs
xor
mov
sti
add
push
or
or
or
sub
mov
adc
xor
add
pop
xchg
add
fwait
cdq
or
ins
(bad)
xlat
arpl
mov
fcmove
fdiv
sbb
xchg
cmp
cwde
and
leave
lods
test
repnz
retf
js
bound
popf
xor
push
dec
jmp
sub
aas
xchg
cs
cld
add
xor
test
fcom
pop
leave
stc
xchg
jmp
xchg
and
pop
mov
dec
rol
dec
sbb
fdiv
jbe
mov
fsubr
hlt
nop
jge
mov
dec
scas
jmp
imul
jns
lahf
pop
mov
ret
out
cwde
cs
int
cli
inc
add
lahf
jo
xchg
dec
popf
retf
push
xchg
out
xor
push
fwait
loop
and
add
cwde
sbb
sub
into
adc
jecxz
popf
arpl
dec
popf
cwde
hlt
inc
les
cmp
popf
jns
jecxz
mov
(bad)
fcomp
adc
stos
and
int3
js
arpl
popa
mov
mov
mov
out
lock
inc
jl
jns
out
mov
cmp
xor
popf
push
inc
push
je
test
test
push
dec
pop
jae
ret
call
rol
xchg
add
in
js
(bad)
adc
and
mov
mov
adc
jo
pop
lahf
jmp
sub
sahf
or
jmp
xor
fistp
into
xlat
pop
movs
(bad)
stc
push
and
lods
sbb
pop
pop
or
sub
sub
or
inc
jo
sub
add
push
out
cmp
frstor
into
jg
xchg
mov
leave
push
jns
out
pop
jmp
fistp
jns
dec
adc
mov
pop
xchg
sbb
pusha
sahf
jne
xchg
call
xchg
cmp
xchg
cmp
pop
or
sbb
loopne
pop
out
push
sbb
cwde
push
std
mov
jae
aas
pop
out
fadd
sub
out
jge
adc
loopne
ja
dec
mov
test
das
ins
inc
in
ins
(bad)
mov
jl
push
push
push
cwde
movs
dec
cdq
mov
repz
test
ficomp
pop
popa
jbe
cwde
xchg
arpl
sbb
cwde
jl
or
inc
out
or
js
xchg
int3
ficomp
fadd
mov
or
jl
xchg
pop
pop
or
add
inc
cmp
xlat
mov
jmp
in
jecxz
push
cld
adc
mov
test
outs
cmp
push
mov
test
dec
mov
xchg
xlat
and
cmp
dec
nop
dec
sti
xchg
pop
mov
xchg
jns
xchg
icebp
test
call
dec
scas
clc
push
or
jg
sub
mov
jp
into
ret
rcl
stos
std
clc
add
test
cmps
adc
mov
or
cwde
ret
mov
fistp
rcl
cli
push
imul
jmp
cdq
or
or
dec
sub
ret
mov
or
jg
clc
dec
sub
repz
jmp
mov
div
or
test
cld
movs
or
inc
jle
lahf
std
test
cwde
add
ds
loop
ins
cwde
and
jae
cli
data16
cwde
ret
imul
data16
fstp
dec
(bad)
in
add
pop
ret
xor
popf
fidivr
sbb
rcr
sub
or
out
repnz
or
xchg
sbb
inc
add
sub
scas
push
(bad)
adc
scas
(bad)
pop
xor
neg
pop
addr16
cwde
add
or
jl
dec
mov
inc
xchg
mov
mov
imul
dec
retf
xchg
test
stc
int3
je
popa
popf
dec
xchg
addr16
(bad)
fsubr
ret
fmul
and
inc
inc
adc
out
xchg
xchg
loopne
inc
out
mov
pop
rcl
cmp
leave
dec
cmp
mov
cwde
push
cmp
dec
xchg
out
ficomp
jp
jb
cwde
mov
add
mov
mov
xchg
movs
movs
mov
lods
mov
out
push
cmp
sub
daa
call
(bad)
fsub
dec
mov
cwde
push
retf
xor
cwde
cmp
cmps
dec
jge
je
cwde
jmp
arpl
mov
xor
xor
fldcw
or
cmp
cwde
xor
dec
jae
xchg
push
push
rcr
mov
inc
ja
mov
dec
xchg
aad
jno
push
or
adc
push
xchg
cwde
enter
mov
hlt
cmps
clc
push
pop
adc
or
cwde
or
ins
mov
int
das
mov
leave
pop
adc
mov
cmps
mov
push
sar
repnz
clc
shr
stos
jle
into
inc
in
cwde
pop
sub
mov
sbb
adc
jb
in
xchg
mov
fstp
movs
xor
pop
inc
sti
int
sub
(bad)
xchg
outs
xchg
bound
xchg
cmp
movs
mov
xor
mov
rcl
aam
retf
mov
jns
jnp
push
out
cmp
push
sbb
idiv
clc
xchg
dec
push
cwde
test
pop
dec
icebp
pop
ror
inc
(bad)
xor
dec
mov
adc
jp
jmp
inc
sub
pop
or
xchg
xchg
not
xchg
adc
clc
ficom
push
push
call
push
dec
pop
aas
outs
xchg
sub
ja
dec
jmp
clc
outs
jb
lahf
popa
xchg
cwde
jae
mov
frstor
dec
cwde
pop
and
fdivr
out
and
xchg
push
pop
cmp
sbb
rcr
hlt
icebp
jecxz
mov
jmp
jnp
xor
xchg
xchg
mov
cmp
xchg
push
iret
ret
xlat
fsubr
aad
test
adc
aas
outs
xchg
inc
test
push
retf
(bad)
dec
in
cwde
mov
into
cld
jecxz
pop
ror
scas
sbb
xchg
retf
xor
dec
adc
ss
jne
xchg
dec
sub
imul
popa
out
push
pushf
fnstcw
mov
inc
xchg
xchg
jns
xor
xchg
int3
scas
fnstsw
sbb
jl
cmp
adc
rcr
clc
(bad)
cwde
ret
aam
shl
repz
xor
jmp
inc
pusha
mov
shl
mov
loope
cwde
test
fcmovu
push
inc
cwde
sub
and
adc
pop
xchg
loope
lods
sbb
fs
sub
neg
and
inc
xchg
in
add
lods
mov
rol
stc
cwde
dec
rcl
xchg
fs
and
pop
leave
imul
adc
mov
gs
imul
fwait
fs
push
inc
enter
dec
cdq
call
sbb
adc
dec
fstp
stos
fcmovb
div
retf
adc
aaa
mov
or
cmp
mov
xchg
sub
mov
mov
or
bound
xor
ret
loopne
nop
outs
cwde
mov
not
push
enter
jo
call
mov
iret
cwde
push
and
xchg
cwde
out
in
je
clc
adc
mov
sbb
mov
mov
mov
pop
sbb
lahf
int
call
in
in
xlat
aas
mov
js
mov
retf
stos
mov
call
inc
cwde
pusha
outs
xchg
push
inc
mov
xor
mov
call
cmp
mov
jnp
mov
in
cmp
hlt
sbb
daa
je
sar
jle
pushf
mov
in
or
mov
xchg
mov
lods
mov
in
mov
mov
(bad)
and
mov
jecxz
xchg
pop
xchg
into
adc
or
cmp
inc
shr
pop
mov
dec
and
mov
ret
inc
adc
loopne
arpl
mov
iret
xchg
imul
popa
xlat
dec
xor
mov
fdivr
push
cmps
mov
cli
jl
cwde
add
inc
inc
in
scas
loopne
and
cmc
(bad)
xor
dec
or
sbb
mov
inc
pop
ja
out
xlat
enter
inc
idiv
in
mov
repnz
xchg
cmp
cmp
dec
push
push
cwde
jo
hlt
(bad)
js
cwde
and
add
adc
pop
or
mov
cwde
aas
or
daa
fs
and
push
sub
lock
and
xchg
mov
push
aad
cwde
jmp
imul
popf
xor
aaa
push
sbb
dec
push
inc
push
push
inc
std
dec
jmp
add
into
repnz
mov
scas
push
lea
mov
out
sbb
(bad)
push
daa
ins
cmp
jo
retf
or
aas
pushf
xchg
data16
fwait
arpl
lea
movs
xchg
xchg
ins
test
xlat
jmp
and
ret
adc
dec
out
fsub
pmulhw
pop
imul
inc
mov
push
(bad)
add
pushf
pop
inc
cwde
movs
adc
and
outs
cwde
pop
sbb
xchg
add
xchg
xchg
rol
hlt
pop
inc
xor
cwde
adc
mov
scas
shl
shr
(bad)
mov
push
clc
adc
dec
clc
cmp
ret
test
add
aas
or
mov
pop
inc
and
mov
aaa
jg
pop
clc
aad
(bad)
xor
jmp
shr
or
pushf
fild
int
fs
fld
xchg
fsub
cmp
int3
xchg
or
sub
lea
mov
mov
(bad)
mov
cmp
ret
into
pop
xor
or
xor
imul
xor
inc
mov
sub
dec
xor
in
prefetcht2
xchg
cwde
popf
jge
xchg
ror
ja
(bad)
fild
xlat
mov
jl
sbb
outs
gs
(bad)
test
push
inc
sbb
retf
sbb
and
or
(bad)
sub
stos
pop
(bad)
into
in
jb
aas
xchg
movs
push
jno
lahf
outs
jb
rcl
(bad)
jo
lods
push
hlt
cdq
push
add
mov
dec
sub
sbb
outs
mov
cmp
jb
retf
fwait
jle
sbb
sub
inc
sub
cmp
call
in
mov
cwde
(bad)
pop
pop
mov
pop
and
dec
test
push
inc
push
jns
cwde
fdivrp
fucom
stos
jnp
mov
mov
xchg
cdq
test
stc
nop
xchg
pop
pop
js
out
test
sahf
jne
pushf
dec
adc
cmp
mov
inc
jg
popf
xchg
jle
jns
mov
iret
cwde
ret
clc
pop
repnz
mov
mov
movs
mov
dec
and
dec
imul
push
cwde
rcl
jmp
loopne
mov
aas
test
dec
push
cmp
in
movs
cwde
aam
lea
(bad)
dec
push
jecxz
rcr
xchg
loop
adc
call
xchg
sar
rcl
pop
inc
retf
cmp
imul
int
retf
xor
xor
mov
jge
popf
pushf
mov
lods
xor
(bad)
adc
pop
xchg
fisubr
or
and
test
mov
mov
mov
xchg
pop
daa
pusha
cs
mov
push
cmps
les
fdiv
xor
fmul
ret
cdq
in
in
xor
popf
cmc
dec
lock
push
dec
jne
xchg
in
xor
push
sbb
sub
xor
repz
inc
call
cwde
fistp
sub
cwde
pop
daa
pop
dec
pop
inc
(bad)
packssdw
out
leave
cmp
sub
inc
arpl
fild
test
(bad)
shr
mov
shr
dec
sub
dec
push
mov
push
mov
pop
cwde
fdiv
mov
test
jl
mov
xlat
adc
xor
sub
xlat
mov
mov
idiv
jae
cmp
nop
inc
sbb
xchg
mov
inc
push
xchg
dec
dec
mov
jmp
(bad)
ins
jge
xchg
imul
xchg
mov
jno
pop
inc
scas
nop
lahf
or
cdq
movs
mov
test
(bad)
js
jbe
adc
mov
test
sub
push
cwde
jo
aaa
out
cmp
mov
test
xchg
pop
mov
cmp
and
add
jo
sbb
cwde
adc
add
mov
push
cwde
clc
jb
sbb
cld
xchg
lods
mov
cmp
adc
hlt
shl
into
mov
leave
xchg
sbb
mov
cdq
jp
cmps
or
adc
outs
movs
in
and
mov
inc
mov
push
popf
outs
fistp
(bad)
sbb
(bad)
or
fincstp
rcl
add
push
xchg
in
or
mov
mov
movs
xchg
mov
and
mov
ret
sbb
xchg
push
mov
(bad)
jmp
(bad)
dec
push
or
ficom
cwde
lock
push
cmp
mov
pusha
or
xor
jmp
popf
push
xor
call
lock
cwde
sbb
int
push
pusha
add
cwde
xlat
cmps
outs
inc
inc
xchg
jmp
lahf
ret
sti
and
jecxz
mov
push
and
(bad)
stos
push
cmps
dec
in
add
xchg
xchg
pop
mov
idiv
xor
push
ins
neg
sub
jae
xchg
mov
fwait
mov
cmc
retf
fcom
cmps
outs
ins
std
gs
cwde
xor
out
lods
fsubr
mov
es
push
jns
jae
and
push
sub
loope
cwde
mov
fild
add
jae
push
cmp
test
jmp
data16
in
scas
cmps
pop
lods
cmp
pop
ret
xchg
pop
(bad)
mov
into
ja
cmp
imul
add
test
sbb
or
cmp
sbb
xlat
(bad)
out
jb
xchg
adc
adc
or
adc
lahf
lock
repnz
push
inc
pop
inc
push
outs
inc
and
inc
dec
sub
or
push
fs
sar
or
mov
ins
pop
inc
pop
add
je
mov
sbb
cwde
sti
icebp
(bad)
shl
arpl
in
mov
pop
and
stos
sub
mov
push
cs
fs
mov
scas
cwde
out
fisub
enter
and
aas
test
xchg
mov
cwde
shl
xor
jge
retf
push
ficomp
pusha
test
mov
test
xchg
stos
mov
scas
test
cwde
lods
(bad)
fimul
and
cwde
mov
pop
xchg
cmp
pop
inc
inc
or
xchg
ja
sbb
ret
fwait
aas
cwde
scas
cmovae
lock
sbb
aad
mov
cmp
pop
popa
cwde
sbb
xchg
sub
retf
sahf
push
and
loop
or
idiv
xchg
popa
xor
(bad)
cmp
and
in
std
adc
not
sub
shr
scas
cmc
adc
pop
push
cmp
rol
jp
pop
ja
jnp
fistp
call
cld
push
into
popf
aam
jae
and
push
gs
xchg
js
cmp
pop
ins
pop
cwde
push
mov
push
fiadd
(bad)
fdivr
inc
push
cmps
jp
cmps
inc
popf
gs
ret
fcmovne
(bad)
xor
jmp
dec
push
pop
ds
sub
jmp
xor
mov
clc
cmps
jmp
jp
dec
sub
sar
fist
and
dec
retf
clc
out
pop
cdq
push
xor
retf
inc
jo
sub
mov
pop
pop
iret
fdivp
or
aaa
xchg
dec
ss
sub
(bad)
push
sub
xchg
fwait
ins
mov
std
sub
adc
push
pop
jbe
jmp
aaa
movq
test
jge
pop
out
mov
dec
or
xor
stos
mov
cwde
push
lock
xor
(bad)
loopne
js
and
sub
push
jge
test
mov
sub
in
cwde
(bad)
shr
fnstcw
iret
jmp
js
adc
cmp
xchg
lea
ret
mov
addr16
push
mov
xchg
cwde
jmp
xchg
cwde
shl
out
add
or
fdiv
sbb
swapgs
in
inc
xchg
ja
pop
and
aad
inc
cmp
mov
and
push
cdq
adc
xchg
or
jns
mov
out
popf
push
push
or
rcr
mov
(bad)
(bad)
ret
or
popf
fidivr
pop
enter
sub
pop
cmp
push
and
xchg
lahf
stos
mov
sbb
cwde
test
repnz
cwde
aaa
sub
xchg
jge
icebp
push
out
sar
and
addr16
xchg
xchg
popa
inc
retf
stos
sbb
push
je
add
xor
cwde
pop
(bad)
aad
ficomp
jne
pusha
xchg
movs
fucomp
dec
xchg
xor
ret
or
rep
add
test
movs
mov
ins
push
mov
xchg
cwde
xchg
lods
inc
aas
sbb
call
mov
stos
cwde
xlat
ret
aas
sbb
jle
mov
(bad)
push
into
push
cwde
nop
call
push
xchg
and
xchg
ror
stos
sub
push
inc
ins
cwde
push
das
xor
fwait
retf
cwde
daa
sub
push
add
and
xor
xchg
outs
scas
mov
jmp
stos
cwde
mov
push
lock
into
fidiv
dec
add
sub
ss
dec
or
rcl
cmp
pop
cmp
out
cwde
push
and
lods
mov
mov
mov
sti
jmp
or
pop
pop
mov
cwde
jno
cmc
xlat
jns
jecxz
mov
stos
outs
mov
cwde
sbb
daa
and
in
jp
sub
push
dec
test
test
cwde
jae
(bad)
jl
cmps
scas
cmp
bound
add
mov
sub
ins
or
xchg
mov
jp
xlat
xchg
pop
pop
mov
cwde
sub
(bad)
push
mov
lods
inc
xchg
xchg
xchg
(bad)
fild
adc
outs
jbe
out
std
push
js
and
cwde
call
jecxz
call
jns
and
hlt
mov
push
adc
xchg
ror
and
mov
cmps
pop
mov
dec
mov
ins
clc
pop
test
cwde
mov
push
cwde
daa
int
cmps
stos
loop
in
or
jnp
push
ret
xor
pop
push
mov
sar
push
sbb
push
popa
fstp
jo
sub
lods
stc
loopne
add
sub
dec
js
(bad)
ficomp
mov
and
mov
add
les
out
xor
xor
cwde
iret
(bad)
mov
loopne
cwde
dec
push
jp
mov
in
ds
add
int
vmulpd
mul
clc
test
ins
push
mov
dec
in
xor
push
add
fs
push
push
out
sbb
in
dec
in
xchg
inc
out
and
and
cwde
loop
and
test
test
mov
fcmovne
jo
push
popf
scas
mov
call
jg
cwde
repz
jle
fiadd
nop
sub
in
enter
sbb
sti
xchg
inc
outs
dec
xchg
jns
mov
inc
imul
xchg
mov
mov
in
mov
in
outs
je
std
jmp
retf
inc
ins
js
sub
xchg
cwde
in
sbb
or
cwde
push
fisttp
mov
mov
movs
in
mov
test
sub
xor
ret
lods
cmc
fstp
loop
lods
cdq
mov
arpl
push
daa
jb
inc
push
mov
lods
jb
xor
(bad)
push
cwde
xor
add
inc
xor
add
xchg
add
sbb
sub
dec
out
add
out
dec
fisub
push
sbb
jae
adc
pop
pop
retf
mov
inc
pop
in
popf
jp
xchg
daa
fisttp
popf
mov
cld
and
je
or
or
push
mov
adc
push
sub
jmp
jne
aas
pop
cmps
int
pop
das
cwde
inc
mov
retf
dec
xchg
es
jg
add
daa
dec
into
add
xchg
mov
ja
jp
pop
mov
xchg
fsub
inc
jb
test
bound
cwde
jl
hlt
xchg
mov
xchg
or
lods
lea
mov
dec
inc
cwde
cmc
cs
cmp
pop
and
int3
dec
push
stos
xor
ins
jne
ins
mov
test
rcr
outs
pop
jmp
mov
rcr
xor
inc
xchg
mov
xchg
je
cwde
push
cld
daa
ss
pusha
imul
jl
lods
xchg
sbb
mov
cwde
dec
lock
mov
xchg
mov
jbe
fst
test
lods
cmp
sbb
pusha
arpl
mov
sar
loopne
mov
dec
cwde
das
push
xor
adc
mov
loope
mov
adc
xchg
fs
cmp
ins
imul
sbb
aad
xor
cwde
sub
pusha
jnp
xor
push
pushf
or
nop
fadd
shl
clc
pop
shl
and
clc
int3
adc
pop
xor
jmp
jo
bound
cwde
xchg
jl
test
bound
call
stc
xchg
in
test
xchg
push
imul
enter
or
jmp
xchg
or
or
push
sbb
sub
cs
or
sbb
pop
imul
xchg
cwde
sub
adc
xor
ret
add
mov
cwde
lods
mov
jo
inc
iret
cwde
xlat
fild
mov
xchg
test
push
lods
jge
inc
ret
sbb
jne
push
mov
aam
test
jbe
cmp
inc
inc
ins
and
aas
add
mov
xchg
(bad)
retf
loope
adc
cwde
mov
pushf
cld
scas
lahf
sub
push
fdiv
push
xor
jecxz
sub
mov
fcomp
inc
pop
adc
sub
aad
push
cld
fiadd
xchg
ins
mov
fnstenv
pop
add
mov
lods
mov
mov
sbb
cdq
inc
cwde
mov
inc
push
mov
ins
xchg
jno
imul
sub
mov
fcom
push
lock
xor
adc
fsubr
adc
aas
out
cmps
test
or
xlat
cmps
mov
cwde
pushf
shl
lods
cwde
inc
xor
outs
jb
cmp
mov
mov
mov
movs
in
es
push
cwde
ja
hlt
cmp
idiv
add
out
adc
sbb
mov
jno
adc
cli
add
out
dec
mov
lahf
sub
dec
xchg
scas
mov
int3
and
pop
or
xchg
ins
jg
mov
adc
cmp
xor
adc
dec
call
mov
pop
dec
sub
jo
mov
enter
adc
gs
ficom
cmp
or
inc
cbw
rol
cmp
xchg
or
loope
mov
sar
xlat
lahf
sub
jb
cwde
push
mov
pop
mov
lock
dec
mov
xchg
adc
js
jae
retf
mov
shr
add
sub
or
mov
clc
xor
mov
jge
mov
cmp
ds
push
les
inc
cmp
mov
mov
idiv
mov
movs
std
(bad)
imul
push
jbe
inc
outs
xlat
sbb
(bad)
clc
xor
test
pushf
push
jge
test
pop
sub
ss
jnp
lods
sub
mov
test
adc
jmp
sahf
popa
jae
loopne
pop
lods
in
aas
cwde
add
je
rcr
out
call
pop
in
xchg
inc
push
movs
and
fmul
ins
fwait
inc
lock
xchg
inc
pop
call
jge
cwde
sti
test
data16
(bad)
test
nop
jnp
xor
lds
mov
popa
cwde
movs
call
enter
mov
clc
adc
stos
dec
push
test
inc
sub
xchg
mov
fadd
xor
fstp
scas
shr
xchg
xor
sbb
inc
cmp
adc
inc
and
mov
sbb
(bad)
cmp
jne
scas
or
mov
dec
fmul
arpl
sbb
cwde
pop
fs
adc
(bad)
loop
jb
and
int
es
pop
iret
call
bound
dec
das
lock
loope
hlt
stos
xor
jecxz
xchg
xor
add
popf
push
scas
pop
frstor
mov
jg
pop
xchg
aas
cwde
cs
mov
hlt
xchg
push
jmp
xor
inc
neg
fmul
test
cwde
not
jne
cwde
mov
fcomp
(bad)
ret
dec
xchg
sti
loope
outs
jmp
inc
pop
inc
jmp
icebp
cs
push
leave
cwde
test
adc
loopne
pop
xchg
mov
or
xlat
mov
jl
adc
adc
push
xchg
pop
or
popf
inc
nop
lds
clc
fadd
or
mov
adc
repnz
push
movs
and
shl
mov
les
pop
push
sidtd
inc
test
pop
pushf
xor
xrelease
cmc
sahf
ins
das
push
les
ret
rcr
in
mov
inc
nop
call
test
adc
adc
ret
ret
jo
lods
test
stos
jbe
lods
xchg
pop
add
mov
push
xchg
add
jmp
enter
ret
xchg
fdiv
mov
or
(bad)
mov
cli
out
daa
cmp
cwde
inc
out
sbb
sbb
cwde
and
js
nop
xchg
mov
cwde
cld
fcmovnu
mov
int
jo
cwde
gs
ins
mov
aad
pusha
mov
in
clc
ret
or
(bad)
stos
sbb
dec
jo
cwde
les
xor
in
cwde
push
jmp
add
sbb
sub
add
dec
cwde
push
loop
(bad)
cmp
push
fsubr
outs
sub
mov
(bad)
xor
cli
les
ins
movs
jp
and
sub
or
mov
std
or
xchg
call
inc
mov
xchg
mov
or
lds
cmp
mov
xchg
icebp
retf
(bad)
out
(bad)
sbb
ret
sub
cwde
sbb
sti
in
mov
xor
(bad)
ror
rol
jge
test
cwde
fist
sub
jnp
je
push
repz
xchg
arpl
fwait
pop
(bad)
and
sub
clc
sub
imul
xor
dec
or
adc
xor
adc
mov
(bad)
jg
loop
int3
call
dec
xchg
popa
mov
mov
cmp
mov
inc
je
adc
fwait
imul
cwde
cmp
sub
leave
retf
rcr
sub
dec
pop
cwde
pop
dec
cmc
mov
pop
call
bound
sbb
and
mov
nop
fwait
cwde
dec
mov
add
cwde
fisubr
fnsave
mov
pop
xlat
xchg
mov
jp
or
stos
dec
push
loope
sbb
xor
add
or
xchg
lahf
jp
and
lock
xor
inc
push
dec
xor
push
add
xor
jno
mov
(bad)
cmp
mov
enter
sbb
jp
pop
cmp
js
mov
sti
shr
pop
jecxz
or
popa
dec
movs
mov
lahf
mov
push
push
push
ds
shl
outs
jmp
jns
nop
jo
cmp
xchg
ins
pop
cmps
cmp
mov
jg
mov
nop
scas
retf
fcom
int
into
ss
pop
jg
fidivr
outs
mov
xchg
pop
loope
jne
xor
stos
aas
clc
imul
jmp
sbb
test
cwde
xchg
mov
dec
xchg
cwde
ins
ds
mov
cmp
and
sub
cmc
or
out
add
mov
mov
pop
aad
out
aam
jnp
cwde
fmul
xlat
lds
call
adc
xchg
jns
adc
cwde
enter
cdq
mov
inc
jbe
xor
jae
push
ret
cwde
jle
call
xor
pop
test
push
and
push
sub
popf
pushf
mov
pop
pop
stc
int3
cwde
aaa
add
movs
jecxz
mov
adc
push
enter
test
push
ds
and
inc
jg
xor
(bad)
jns
stos
sbb
test
out
aaa
push
retf
cmps
jae
loop
(bad)
pop
and
test
sub
enter
cmp
cld
int3
popa
inc
nop
cmp
mov
imul
inc
shr
xchg
adc
sbb
cwde
sar
dec
shl
xor
ficom
gs
xchg
imul
push
xchg
test
push
jne
addr16
pop
pusha
push
and
ss
rcr
or
sbb
xchg
sbb
mov
stc
ret
and
mov
jmp
ss
pop
shl
cwde
xchg
sub
daa
sub
mov
stos
push
enter
iret
fs
mov
add
cwde
pop
mov
test
mov
mov
jns
cwde
jmp
fidivr
inc
jo
(bad)
iret
in
add
adc
imul
push
mov
call
sub
dec
cwde
jp
mov
out
push
jne
iret
sar
mov
test
xor
imul
cmc
sar
cmp
push
retf
mov
xchg
cmp
push
cmps
mov
fiadd
int
loopne
jmp
jne
or
dec
call
cld
adc
ret
ret
pusha
aaa
mov
xchg
out
(bad)
mov
(bad)
cwde
sub
mov
xchg
sub
sub
(bad)
mov
adc
fsubr
scas
pop
jnp
add
repz
std
in
js
je
mov
repz
retf
mov
and
subps
ret
xlat
fistp
cmp
mov
scas
popf
inc
pop
loope
jbe
jno
xchg
xchg
(bad)
xlat
call
xchg
aas
inc
sahf
popa
push
mov
add
ins
add
xchg
das
cmp
aad
jecxz
std
clc
repnz
out
icebp
(bad)
je
pop
xchg
loopne
mov
adc
int3
nop
cmp
mov
sub
ins
jecxz
int
fcomp
sub
mov
repnz
outs
arpl
lds
jecxz
aaa
cmp
push
les
sbb
xchg
retf
xchg
in
cs
out
jge
ret
cwde
add
cli
int
xchg
pop
data16
adc
arpl
jg
sub
sub
inc
stc
add
sbb
(bad)
scas
mov
pop
xor
sub
(bad)
cmp
mov
and
movs
sbb
xchg
aad
push
scas
cs
xor
test
xchg
rcr
xchg
pop
and
mov
jmp
fs
jb
nop
xchg
jbe
leave
loopne
or
xchg
jmp
aad
in
clc
inc
push
je
jmp
cwde
adc
jmp
leave
mov
or
push
sub
in
icebp
sub
mov
rcr
mov
and
pop
scas
xchg
pop
xchg
push
or
ss
push
(bad)
push
std
test
cmp
sbb
icebp
mov
xchg
xor
mov
dec
xlat
cmp
dec
and
xchg
mov
xchg
(bad)
arpl
(bad)
xchg
mov
adc
jne
mov
mov
xlat
sar
dec
fs
cmc
sahf
push
add
push
adc
and
jecxz
cmp
gs
add
dec
sbb
stc
popf
sub
pop
xor
js
add
stos
and
push
adc
or
pop
pushf
jae
mov
aad
sahf
jmp
xchg
ins
jno
sub
xchg
bound
mov
mov
or
lock
shld
(bad)
icebp
fisub
movs
rcr
add
push
dec
retf
push
fnstcw
mov
cmps
aas
out
clc
dec
pop
int3
xor
pop
sahf
adc
loopne
into
mov
adc
aam
xchg
mov
push
ret
cmp
sub
cwde
addr16
mov
xchg
popf
xor
ds
cmp
xor
or
ficom
jmp
mov
inc
(bad)
repz
mov
out
xchg
ins
cmp
sbb
jecxz
or
mov
aam
add
mov
cwde
nop
popf
int
(bad)
shl
mov
mov
jg
(bad)
push
out
cwde
fmul
ret
lahf
cwde
push
jg
adc
mov
sub
inc
sub
mov
mov
cmp
cmp
gs
inc
retf
imul
test
add
sub
pop
pop
push
jmp
xor
cdq
xchg
mov
add
xor
shr
call
xor
cwde
pop
cmp
cs
mov
(bad)
inc
es
jb
test
js
test
das
xchg
pop
dec
loope
mov
sahf
inc
sub
bound
mov
rcl
mov
cmp
push
das
setnp
rol
push
ja
adc
jl
hlt
xchg
xor
and
clc
sub
test
cmp
add
inc
sub
sub
xchg
test
out
pop
cmp
ds
push
(bad)
imul
cwde
adc
loope
std
push
popf
popf
ins
mov
icebp
gs
mov
push
loope
cwde
sbb
lock
ror
sub
pop
loop
stos
mov
iret
jno
iret
or
or
ins
xchg
imul
sbb
mov
(bad)
lahf
iret
loopne
les
dec
pop
daa
xchg
xchg
or
xlat
ins
xchg
lods
jns
cdq
(bad)
lods
jo
inc
sbb
mov
test
adc
loopne
xchg
mov
sub
sbb
lahf
ror
lods
(bad)
enter
dec
stos
add
mov
or
mov
int
(bad)
test
call
cmp
arpl
cmp
cwde
push
jecxz
inc
mov
jnp
cwde
rol
pop
sub
inc
adc
mov
and
js
pushf
popf
mov
xchg
mov
icebp
jbe
ja
xlat
cmp
jge
(bad)
inc
add
xchg
and
dec
mov
cmps
adc
js
push
mov
call
imul
sbb
cld
out
scas
adc
js
add
jmp
fisubr
push
je
mov
(bad)
cli
in
mov
jmp
sbb
jecxz
retf
out
cmp
pop
jmp
cwde
(bad)
stos
int
cmc
(bad)
int3
mov
sbb
sbb
hlt
cmp
dec
into
mov
imul
scas
xchg
inc
enter
fadd
scas
adc
cwde
pop
stc
adc
pusha
push
and
inc
push
fsubr
test
test
loopne
jmp
call
bswap
pop
mov
cwde
mov
pop
adc
test
jns
push
push
mov
aam
mov
adc
jle
and
push
jl
add
xchg
jb
shr
pop
cmp
push
sub
xor
mov
or
add
or
xchg
mov
xchg
mov
sbb
cdq
pop
mov
lds
or
xchg
add
mov
ret
mov
mov
xchg
mov
mov
add
push
cld
sbb
push
mov
ds
cdq
(bad)
aas
shld
adc
fdivr
sti
sbb
mov
scas
xor
inc
push
ror
icebp
ds
cmp
loope
outs
xchg
lea
popf
mov
push
call
(bad)
fadd
jle
adc
sets
pushf
ins
test
mov
cmp
loop
mov
or
fdivr
inc
pop
je
loope
pop
sbb
mov
xchg
add
adc
mov
and
xchg
mov
xchg
scas
dec
out
test
push
imul
pop
and
mov
push
call
cli
jne
pop
inc
sbb
xchg
or
arpl
fucom
ds
(bad)
shr
xchg
fdiv
or
inc
mov
sar
adc
mov
adc
mov
push
cmp
push
fistp
sbb
sub
mov
cwde
and
(bad)
sub
call
mov
ror
jns
push
jae
push
sub
das
out
loopne
or
in
fnstcw
xchg
xchg
sub
cmp
dec
push
int
cwde
mov
fcom
cmps
xchg
jmp
je
cwde
mov
dec
pop
mov
gs
dec
cwde
fldcw
pop
add
stc
xchg
stos
clc
xchg
in
shr
retf
aam
mov
pop
cwde
mov
icebp
add
xchg
lds
hlt
data16
jne
inc
push
cwde
into
dec
push
add
or
sbb
add
outs
pop
and
clc
in
dec
je
(bad)
xchg
shr
xchg
sbb
call
dec
frstor
ins
scas
cwde
fcomp
push
out
daa
xchg
xor
mov
jge
je
adc
aad
mov
or
retf
das
dec
mov
dec
pop
xchg
pop
and
outs
push
rcl
xor
xchg
adc
inc
ins
mov
sahf
int3
mov
fisttp
daa
mov
std
in
cmp
pop
and
outs
nop
push
iret
cwde
fldenv
mov
(bad)
pop
and
mov
sbb
pop
push
add
xor
cmps
mov
and
sahf
pop
xchg
xchg
push
mov
div
mov
pop
jne
jbe
ja
mov
xchg
cli
cmp
mov
jo
jmp
xchg
std
push
loopne
out
sub
jmp
shr
add
jo
sub
ja
into
scas
sti
call
jne
ja
sbb
cmps
jmp
sub
xlat
jnp
je
call
jge
jecxz
lea
jge
push
mov
cwde
(bad)
repz
xlat
iret
nop
mov
mov
dec
pop
jne
lahf
or
lods
imul
int
clc
pop
fwait
sub
push
xchg
xchg
and
ja
bound
gs
scas
iret
shr
cwde
imul
pop
cwde
add
xchg
test
stos
mov
mov
jb
(bad)
stc
ret
mov
lods
cmp
dec
pusha
jg
or
fldl2t
call
jae
cmp
and
mov
adc
or
adc
clc
mov
repnz
arpl
stc
cwde
(bad)
xlat
(bad)
aaa
out
pop
dec
cwde
pusha
inc
pop
cmp
stos
mov
mov
xchg
sub
adc
movs
mov
pop
arpl
xor
jns
mov
or
xchg
sub
mov
sahf
xchg
lock
xchg
inc
sbb
inc
dec
push
scas
cwde
push
push
ficomp
sti
(bad)
jb
cdq
pop
imul
jne
sbb
pop
out
dec
call
add
sub
mov
mov
jle
cmovno
push
cwde
push
das
cdq
xor
test
out
addr16
test
(bad)
popf
mov
ret
js
cmp
stos
ficomp
sbb
cdq
out
pop
or
in
mov
xchg
in
mov
cli
(bad)
add
push
outs
(bad)
fcom
cdq
jo
cwde
loopne
pop
push
sub
xchg
xor
sbb
mov
or
xchg
push
adc
xchg
sub
mov
or
aad
rcl
mov
pushf
adc
pop
nop
push
jl
add
push
ins
fstp
iret
adc
ja
mov
addr16
pop
sahf
jns
cwde
mov
mov
hlt
out
aad
lock
mov
or
xchg
add
lods
jmp
pop
dec
sbb
mov
mov
aam
in
sbb
xor
sbb
xchg
stc
xchg
shl
addr16
mov
lods
iret
stos
stos
ret
push
cli
jmp
xchg
mov
lods
sbb
cwde
mov
adc
add
add
jle
mov
cwde
mov
jb
cdq
jge
dec
ss
jno
and
mov
and
mov
inc
mov
in
or
xlat
imul
(bad)
jno
sub
adc
inc
cwde
shr
outs
popf
cwde
dec
jmp
inc
out
fsubr
push
leave
push
inc
inc
xchg
sar
fild
xchg
fsubr
mov
rol
xchg
stc
add
cmp
loope
push
cs
and
mov
js
mov
(bad)
aam
test
xchg
leave
and
call
adc
mov
add
loop
pop
clc
jg
xor
xchg
sar
cmp
add
cmps
mov
push
sbb
or
mov
test
retf
xchg
call
or
fwait
sub
add
aas
sub
std
fcomp
ja
retf
gs
pop
jo
pop
jmp
nop
outs
lock
fadd
mov
mov
sti
dec
push
je
sbb
mov
xchg
cmps
scas
cmp
xchg
add
in
cmp
mov
jns
cmp
fcomp
shl
jae
neg
in
jmp
fldcw
cmp
ins
cwde
jno
adc
out
pop
iret
mov
cwde
or
(bad)
cmp
adc
xchg
xchg
cwde
dec
push
es
dec
adc
cwde
enter
movs
mov
mov
or
add
add
and
dec
inc
pop
pop
cwde
and
inc
jb
or
cwde
mov
into
lods
lea
inc
xchg
popf
loopne
and
inc
jecxz
cwde
sub
into
outs
dec
cwde
test
pop
cmp
jle
in
jo
push
sub
sub
mov
ror
repnz
dec
pop
das
or
retf
(bad)
xchg
push
jbe
pop
(bad)
fstp
or
aam
mov
in
popf
jle
dec
push
pop
jp
sub
cli
xchg
mov
test
dec
scas
(bad)
out
imul
stos
jnp
add
stos
(bad)
clc
pop
adc
pop
aas
bound
sahf
into
mov
sub
dec
test
jnp
sbb
xor
pusha
sub
mov
push
cdq
jmp
add
lahf
and
xchg
into
fucomi
out
or
es
addr16
dec
in
ins
mov
shl
xor
lods
into
mov
add
adc
sbb
or
add
out
and
rcl
jp
xchg
and
in
add
ds
inc
(bad)
fcmove
mov
div
daa
xchg
(bad)
stos
std
sar
sbb
lahf
add
inc
fild
sub
and
cwde
jns
jl
jp
xchg
aad
imul
movs
ror
shr
fnstenv
ja
mov
lock
mov
int3
mov
scas
pop
cli
retf
cdq
inc
or
push
push
and
push
push
sub
mov
mov
cwde
or
inc
cwde
std
rol
inc
jmp
pop
jecxz
out
push
cwde
in
sahf
cmp
dec
and
cwde
mov
mov
and
adc
push
js
mov
test
xchg
hlt
(bad)
xchg
(bad)
aam
dec
cs
cwde
and
pushf
test
mov
mov
or
cwde
inc
fxch
dec
pushf
stos
xchg
push
cwde
fwait
push
out
aad
mov
jo
mov
sbb
movs
xor
add
and
dec
call
mov
call
(bad)
call
push
push
xchg
mov
pop
movs
retf
mov
pop
imul
mov
xchg
dec
mov
mov
js
retf
jbe
add
pop
nop
sub
sbb
jg
cwde
mov
loope
cmp
daa
xchg
cwde
(bad)
mov
movs
cdq
addr16
loop
mov
scas
push
cmp
or
xchg
jl
clc
out
cwde
(bad)
jle
std
(bad)
and
pusha
and
jp
sub
adc
sub
xor
sbb
daa
or
sub
pop
(bad)
call
dec
mov
sbb
and
test
cmp
in
movs
mov
mov
cwde
cld
pop
ds
js
pusha
cwde
sahf
pop
lahf
cld
ins
int3
stos
mov
mov
jbe
sub
mov
jo
retf
loop
call
pop
cmp
xor
push
cwde
rsqrtps
neg
int
cwde
cmp
cwde
or
jbe
xor
(bad)
imul
push
sub
cs
call
mov
xchg
dec
mov
retf
sbb
inc
vpslld
pop
ja
dec
stos
outs
and
sub
out
idiv
xchg
push
xlat
cmps
mov
fldl2t
push
pop
jmp
push
movs
(bad)
push
ins
pushf
outs
es
mov
xchg
add
jle
mov
cmps
pop
lods
repz
and
mov
push
xchg
aaa
xchg
jnp
ins
mov
xchg
cmps
xchg
scas
inc
das
cwde
nop
cmps
mov
imul
or
cmp
arpl
fnstenv
push
loopne
xchg
loopne
mov
outs
push
nop
xchg
lods
rol
(bad)
fdivr
hlt
pushf
cmp
xchg
push
adc
ds
ret
aad
or
xor
mov
pusha
add
xchg
cwde
ins
pop
adc
mov
push
cwde
adc
and
add
imul
cwde
bswap
std
push
mov
jl
xchg
and
or
and
ret
push
dec
sbb
out
imul
sbb
jnp
push
inc
nop
and
mov
xchg
inc
(bad)
jns
sub
xchg
mov
test
out
push
or
cdq
or
dec
jo
(bad)
movs
out
in
jmp
cwde
aam
inc
sub
add
pop
xor
jae
push
fldenv
sub
mov
sub
xchg
mov
jno
je
xchg
(bad)
scas
in
or
sub
pop
test
aam
fild
or
pop
test
xchg
push
loope
xor
dec
xlat
cmp
(bad)
stos
test
int
mov
and
inc
clc
sub
mov
sub
pop
ins
add
sub
int
rcl
push
mov
cwde
cmp
push
stos
inc
jns
shr
xchg
jne
xchg
(bad)
cwde
fdiv
mov
xchg
out
sub
sub
rcl
fldenv
lock
cmp
std
mov
xchg
rcr
jno
xchg
loopne
cwde
lods
sbb
pop
jp
cmps
xchg
cwde
outs
mov
mov
fiadd
add
(bad)
sub
rcr
mov
lods
mov
mov
repnz
mov
or
dec
cmp
or
fiadd
mov
xchg
repz
mov
sbb
adc
mov
pusha
or
add
push
(bad)
push
into
sti
retf
push
sahf
arpl
sbb
outs
jb
ficom
jecxz
xchg
int
push
push
daa
xor
in
sub
sbb
outs
rcl
push
cdq
cmp
push
out
xchg
addr16
mov
adc
daa
pop
dec
jbe
mov
jae
sbb
clc
add
lock
mov
xchg
mov
std
outs
dec
pop
cwde
fisubr
jecxz
xchg
ss
jl
push
adc
dec
in
xchg
lods
outs
and
repz
fisttp
dec
aad
pop
adc
ss
cmp
into
aad
mov
iret
jns
loope
mov
pushf
or
or
sbb
pop
mov
add
inc
pop
mov
popa
mov
add
inc
and
inc
adc
mov
mov
mov
lahf
popa
mov
jg
and
adc
mov
xchg
lods
dec
adc
push
cwde
mov
adc
cwde
sbb
xchg
xor
loope
cwde
adc
adc
add
push
sub
and
ret
fcomp
rcl
rcl
jbe
leave
push
mov
jl
mov
loop
test
ret
xlat
mov
pop
lods
js
das
lahf
xor
jb
mov
xchg
rol
in
cwde
xchg
dec
adc
pop
rcr
sbb
int3
xchg
or
cmp
adc
add
sub
lock
inc
pop
fiadd
mov
cmp
xor
aaa
ins
lahf
pushf
int
popf
jns
sbb
stc
pushf
dec
or
inc
mov
(bad)
popf
dec
jmp
fs
stos
push
push
sbb
dec
pusha
mov
xchg
add
enter
xchg
or
sbb
sqrtps
push
inc
leave
jne
das
jge
mov
test
sar
jle
lods
lahf
leave
cwde
xchg
mov
sub
mov
inc
cwde
imul
lods
push
adc
call
mov
test
cmp
sbb
sbb
or
jne
data16
lods
scas
lock
addr16
mov
fst
jae
or
jl
xor
sbb
aaa
mov
cmps
sahf
faddp
inc
loopne
retf
test
jmp
and
sar
loop
cdq
push
pusha
adc
xor
mov
push
push
out
jnp
neg
or
cwde
inc
xor
(bad)
xchg
mov
popf
xchg
rcl
mov
fwait
mov
call
(bad)
mov
sbb
cs
dec
in
adc
or
daa
xchg
cwde
jl
jle
dec
pop
out
cwde
int
ds
jnp
mov
das
or
jo
xchg
jl
xchg
mov
cwde
mov
xor
xor
les
adc
jae
mov
sbb
adc
add
xchg
push
or
std
sbb
push
dec
adc
cwde
adc
aaa
imul
mov
loopne
sub
jo
cmp
sbb
call
mov
jg
xchg
inc
imul
jle
call
lods
sahf
jae
inc
mov
push
(bad)
in
xor
call
jg
shl
loopne
or
imul
xchg
push
xchg
in
mov
lea
cs
inc
fdivr
mov
fdiv
ins
faddp
outs
push
xlat
retf
xor
xchg
hlt
(bad)
sbb
sub
addr16
sti
and
cmp
popf
inc
out
xor
or
hlt
fstp
push
popf
inc
push
dec
push
cwde
mov
xchg
xchg
jg
pop
es
ss
cmp
mov
cwde
push
adc
cwde
push
dec
fisub
xchg
ins
or
pop
ds
mov
ret
mov
jg
ror
iret
sub
cmc
arpl
pusha
jmp
mov
push
sbb
(bad)
cmp
cwde
mov
iret
dec
lahf
inc
mov
call
lock
xchg
adc
out
or
ins
xchg
add
fbld
xchg
call
mov
sub
xchg
and
dec
fdiv
ret
xor
cwde
into
or
jns
imul
cmp
cli
push
mov
push
inc
or
popa
xor
dec
pop
rol
cwde
hlt
dec
fwait
add
xor
bound
adc
ins
jo
mov
stos
inc
inc
xchg
dec
push
sub
icebp
cwde
int3
inc
xlat
std
jo
fisub
movs
jno
fcomip
mov
scas
dec
pop
int
add
xchg
pop
or
xor
pop
or
ret
test
jecxz
mov
push
cmps
cwde
sub
jg
in
xchg
cmc
fild
mov
clc
jno
out
repz
xor
cmovne
mov
push
mov
xchg
mov
xor
adc
popf
push
iret
gs
mov
mov
loope
dec
popf
xor
fisttp
pop
or
sti
repnz
fbld
jg
push
adc
pop
pop
int3
and
mov
or
pop
pushf
rcr
in
push
cwde
mov
loop
and
call
js
adc
and
fmul
mov
pop
and
mov
int
ins
into
jecxz
into
mov
xchg
xchg
mov
jl
in
inc
and
jp
pop
daa
pop
cmp
push
imul
pop
ret
in
inc
pop
add
inc
outs
sbb
pop
mov
fadd
dec
push
mov
ds
cmps
jmp
mov
imul
inc
push
dec
clc
dec
jno
sub
out
outs
in
cwde
shr
pushf
pop
or
or
lods
add
xchg
add
xchg
(bad)
jb
retf
adc
sub
inc
jb
cwde
outs
rcl
xchg
fs
fild
inc
pop
pop
sub
aas
push
push
imul
cmps
push
ins
and
lea
rcr
adc
fst
fist
nop
cwde
int3
xor
cwde
test
or
sub
mov
mov
dec
imul
or
cwde
or
push
jo
mov
cmp
jmp
mov
cmp
xor
mov
mov
fsubr
lods
jmp
pop
sbb
leave
cmp
fcom
jp
mov
mov
in
pop
inc
ins
inc
adc
int3
test
push
std
cs
push
xchg
and
cmp
push
cmp
or
or
cli
xchg
sbb
test
cmps
pushf
add
mov
mov
sbb
rol
or
sub
test
jmp
cmp
test
sub
mov
in
leave
cmp
fdivr
fist
inc
stc
je
xchg
cwde
xlat
mov
fldcw
mov
cwde
dec
xchg
fs
popf
jle
(bad)
xchg
sub
push
mov
xchg
imul
xor
cdq
mov
xchg
daa
inc
(bad)
ficomp
scas
(bad)
neg
jne
cld
cmp
sbb
add
hlt
inc
jns
mov
cwde
sbb
mov
les
js
push
lahf
cmp
jle
cwde
xor
cli
xchg
or
dec
jno
cwde
sbb
loop
je
mov
adc
into
adc
push
es
push
push
or
mov
cwde
xor
inc
popa
jae
xchg
not
jg
dec
js
mov
retf
call
xchg
loopne
sbb
or
sub
and
xchg
imul
or
rol
loop
inc
jo
ins
ret
pop
jbe
mov
imul
imul
retf
mov
xchg
jbe
xor
shr
sahf
sbb
out
mov
clc
mov
push
xchg
arpl
adc
or
add
data16
inc
test
pop
inc
outs
dec
das
retf
imul
xchg
fisubr
lds
cli
cwde
cmp
popa
imul
call
cwde
push
and
sar
dec
cs
mov
cwde
inc
pop
pop
cmp
in
repz
or
test
jmp
cwde
(bad)
cmp
adc
mov
cmp
xor
dec
sbb
cli
test
retf
xor
and
xchg
popf
adc
fbld
int3
lea
cwde
sub
fimul
dec
pop
scas
mov
and
shl
xchg
retf
int
push
push
pop
addr16
loope
and
cmps
cwde
mov
cld
ret
xor
test
retf
push
daa
fnsave
cmp
pop
iret
pop
cwde
cdq
and
fldcw
cwde
ret
gs
call
mov
fsub
fimul
cmp
jp
enter
cwde
push
popf
cmp
leave
mov
pop
loop
ret
pop
or
aad
pop
jg
jmp
mov
in
pop
cmps
inc
dec
push
cwde
mov
loop
jecxz
push
mov
stos
dec
xchg
ins
lea
lods
jnp
xchg
(bad)
test
js
loop
cwde
add
je
repnz
cwde
or
mov
push
sub
(bad)
aam
cmps
ret
cmps
out
or
sbb
in
movs
test
and
out
clc
pop
mov
out
add
cli
fld
mov
fnstcw
mov
in
jne
mov
push
mov
imul
pop
jbe
jnp
xchg
mov
mov
jo
pop
test
movs
pushw
les
neg
and
stc
loopne
cbw
jns
shr
jnp
cwde
jl
xor
retf
and
jo
xchg
icebp
ret
es
test
sbb
aas
add
mov
mov
test
gs
xchg
out
and
ds
cwde
mov
mov
sbb
xor
cwde
(bad)
adc
(bad)
cwde
xchg
and
mov
fwait
fs
xchg
push
xlat
dec
int
adc
data16
and
(bad)
xor
jle
add
in
jle
pop
cmp
sahf
push
and
mov
pop
int
repz
xchg
add
test
in
push
inc
cwde
mov
jns
aam
inc
sbb
jge
(bad)
jns
push
push
stc
int3
mov
pop
(bad)
sub
sahf
pop
fwait
jge
aas
cwde
(bad)
loop
loopne
cmp
cmps
xchg
inc
hlt
stc
retf
cmp
es
xchg
or
jns
add
retfw
fucomp
mov
sbb
jle
icebp
scas
mov
add
shl
in
fsubrp
jns
xlat
inc
xor
outs
xchg
and
sub
fsub
rcr
pop
cdq
xchg
dec
hlt
add
mov
cmp
push
loope
in
sub
push
push
jbe
sub
and
sub
out
jg
jnp
or
xchg
pop
outs
iret
scas
shr
and
pop
in
test
jl
enter
xlat
adc
xor
pop
fwait
popf
gs
xchg
arpl
aam
out
adc
out
mov
cwde
sbb
push
enter
test
push
mov
lods
sub
xchg
push
stc
sbb
xor
test
loope
popa
xor
cmp
sbb
sub
mov
nop
leave
cmps
or
sar
rcr
or
dec
xor
loop
mov
pop
cwde
loope
adc
aam
repz
cwde
inc
bound
scas
nop/reserved
enter
shl
js
xor
frstor
xor
cwde
lea
jg
fs
mov
mov
sar
jmp
mov
xchg
test
sbb
xor
xchg
scas
cmp
sti
nop
mov
(bad)
or
jle
(bad)
mov
mov
cwde
xor
cmp
das
cwde
arpl
nop
xchg
mov
lahf
cwde
data16
push
clc
inc
test
cmp
cmp
sbb
sub
stos
add
xchg
mov
call
push
int
push
adc
jge
sbb
idiv
pop
lock
jo
sub
out
cmp
data16
push
dec
cs
adc
pop
mov
xchg
arpl
inc
push
dec
mov
mov
out
scas
push
lock
enter
inc
sahf
pop
sub
inc
test
(bad)
inc
iret
cwde
fcomp
pop
cli
sbb
hlt
not
cmp
(bad)
retf
add
or
mov
jge
enter
xchg
mov
pop
mov
int3
mov
(bad)
sbb
mov
jnp
jbe
mov
mov
adc
mov
ins
iret
pushf
mov
xor
adc
xor
xor
xchg
or
int
sbb
push
imul
cwde
mov
sahf
mov
xchg
outs
xchg
pop
push
out
cli
mov
xchg
fcomp
pusha
cwde
das
dec
sub
fs
or
lds
scas
ds
adc
xchg
mov
sub
xchg
push
bound
mov
test
iret
adc
lds
sar
arpl
sub
in
cwde
cmp
or
xor
push
sbb
call
xlat
fwait
pop
inc
xchg
or
in
jo
sbb
xchg
mov
push
cwde
popf
jo
rcr
mov
adc
xchg
rcr
mov
xchg
inc
fdiv
out
cwde
jg
test
cwde
mov
loop
adc
pusha
cmp
retf
sbb
sub
xchg
jns
lods
shr
jge
mov
in
movs
cdq
xchg
shl
pop
dec
pop
xchg
ins
arpl
pop
mov
shl
pop
cmp
movs
loope
and
daa
lods
add
add
mov
inc
mov
stos
dec
xor
xchg
sbb
mov
sbb
mov
dec
mov
outs
fld
mov
jae
cwde
adc
(bad)
jp
xchg
lds
fidivr
xchg
mov
rol
xchg
loopne
mov
lea
fsub
pop
cwde
pusha
sub
stos
rol
neg
jne
stos
mov
es
add
loop
jmp
xor
fwait
popf
jb
mov
inc
pusha
mov
je
sbb
repnz
xchg
mov
nop
add
pop
add
inc
shr
test
cmps
dec
iret
fisttp
shl
in
mov
dec
call
jno
cmp
adc
pop
adc
out
cwde
pop
pop
gs
sahf
or
cwde
je
push
pushf
pop
es
dec
sub
xor
add
jmp
repz
das
fwait
xchg
imul
push
cmps
xlat
xchg
ret
imul
xchg
test
in
jmp
imul
xchg
xor
xchg
mov
mov
jbe
sbb
(bad)
aam
ror
lods
test
or
popf
mov
adc
cwde
aaa
mov
(bad)
mov
stc
add
and
inc
popf
sub
mov
mov
ret
fisub
enter
inc
cwde
push
clc
cmp
lea
cwde
pop
jl
popf
sbb
jp
sub
in
nop
xchg
js
jmp
movs
cmp
push
xchg
fs
cwde
ror
mov
pop
fsubr
sbb
dec
dec
mov
hlt
sbb
mov
and
add
inc
inc
jp
mov
pop
xor
push
cwde
mov
es
cwde
mov
ins
loopne
xchg
fistp
jmp
retf
cmp
arpl
sbb
push
push
and
inc
mov
les
dec
sbb
inc
mov
mov
movs
(bad)
dec
(bad)
loopne
jmp
(bad)
clc
and
xor
cwde
aas
shr
lahf
popa
aas
lock
jmp
push
or
xchg
in
and
fdivp
jle
and
ret
sbb
mov
xchg
in
or
scas
sbb
cwde
lods
push
inc
fstp
xor
xchg
cmp
push
test
push
into
cwde
aam
(bad)
fdiv
xor
mov
imul
push
fist
rcr
call
push
inc
push
jmp
lock
or
in
pop
ret
xchg
outs
mov
shl
sub
mov
fisubr
add
jns
adc
nop
jmp
or
clc
scas
mov
and
adc
imul
jo
mov
cmp
mov
adc
out
js
clc
xor
inc
pop
and
rcr
movs
lahf
push
test
mov
dec
pop
cwde
add
add
mov
xlat
test
pushf
lods
sub
shl
dec
pop
cwde
out
pop
dec
add
test
stos
test
jg
jno
inc
fiadd
mov
test
or
jp
xchg
dec
ror
lahf
cwde
(bad)
jo
inc
sub
jg
pop
mov
cwde
cs
sahf
daa
and
out
test
mov
cmp
cwde
mov
dec
push
ret
fisub
cmps
sbb
xchg
cdq
jo
movs
jge
pop
scas
push
pop
cwde
fild
int3
mov
sar
stos
retf
adc
or
addr16
mov
push
dec
daa
cwde
push
lods
sub
cwde
(bad)
xchg
aaa
cld
adc
xchg
(bad)
inc
push
icebp
sub
mov
call
loopne
mov
ret
cwde
test
cli
iret
rcr
cs
jnp
adc
pop
pop
xor
xchg
popa
pop
leave
xlat
rcr
add
add
jmp
pop
cmp
adc
daa
cmp
dec
jnp
sub
imul
(bad)
fincstp
xor
scas
push
test
nop
cmp
add
or
js
inc
test
inc
movs
mov
int3
loop
leave
and
push
(bad)
jmp
or
aam
mov
push
lds
and
cwde
xchg
jne
mov
cwde
loope
aaa
or
add
mov
out
or
xchg
in
icebp
sub
dec
xchg
adc
popa
fldcw
xchg
cmps
out
jne
ds
movs
mov
fldcw
inc
dec
sub
inc
cmp
popf
movs
mov
pop
or
fisubr
jmp
sbb
jne
dec
sub
pop
sbb
cwde
outs
xchg
ja
xchg
xchg
addr16
hlt
fldenv
aaa
push
cwde
ds
sub
mov
ja
fisubr
sbb
push
pop
and
sahf
and
xlat
push
dec
jns
inc
pop
js
adc
popf
cdq
mov
pushf
push
push
hlt
rcr
lock
dec
dec
add
jbe
out
jmp
xchg
cmp
adc
cs
aas
inc
push
inc
cmp
pop
mov
or
dec
ja
push
push
sbb
pop
mov
popf
cmp
xor
sbb
cwde
test
jmp
mov
push
arpl
mov
xchg
mov
mov
jo
(bad)
cwde
jnp
fs
inc
repz
mov
pop
pop
sti
js
fldcw
int3
pop
or
jnp
stos
mov
lods
dec
pop
sub
add
cwde
pop
jns
ret
mov
bound
xor
sbb
mov
xchg
inc
aaa
adc
jg
dec
mov
xchg
or
sbb
sub
dec
push
call
mov
dec
push
cli
sub
cwde
popw
push
jo
mov
sub
shl
adc
mov
leave
xlat
push
push
out
cli
cmp
call
daa
sti
mov
add
cwde
sbb
jne
cwde
imul
ud2
and
sub
sub
sub
mov
les
add
jne
jl
mov
mov
sbb
jnp
pop
and
pushf
addr16
pop
das
test
sub
lock
xchg
push
push
mov
rcr
mov
sub
cwde
dec
push
and
xchg
loope
es
hlt
mov
retf
push
add
call
leave
add
imul
xchg
jne
jge
(bad)
out
or
cwde
imul
int3
sub
test
and
mov
hlt
out
cld
dec
dec
adc
push
cwde
sbb
stc
xchg
outs
jae
faddp
inc
pop
xchg
cmp
imul
pop
xchg
and
pop
data16
xchg
push
dec
movs
call
sbb
in
jmp
shl
test
xchg
mov
jg
mov
ror
movs
add
dec
sub
sub
test
mov
int
fidivr
push
es
sbb
aaa
or
cld
ja
inc
adc
or
mov
xchg
div
dec
mov
lock
cwde
loopne
test
dec
imul
test
loope
pushf
(bad)
xlat
repnz
lods
cwde
aad
cmp
dec
push
jmp
add
mov
jne
stos
xchg
mov
jmp
sub
sub
dec
sbb
xchg
out
icebp
jmp
je
loope
in
cwde
stc
nop
push
xchg
es
rol
fwait
cwde
push
cmp
ret
stos
(bad)
lahf
mov
fld
xor
xchg
int3
mov
or
or
mov
dec
jmp
add
fs
mov
stos
cdq
jo
ins
std
js
push
aam
mov
cmc
xchg
cli
je
nop
mov
fdiv
pop
inc
sub
mov
cwde
add
rcl
sbb
mov
jg
shr
rcl
jp
push
push
jg
xlat
fld
call
add
adc
jbe
xchg
jbe
pop
stos
sbb
adc
test
and
adc
mov
imul
mov
(bad)
xchg
hlt
mov
pop
xchg
std
ret
sbb
sub
fmul
inc
popf
mov
lahf
popf
and
xchg
cs
push
cmp
xchg
retf
dec
sbb
or
or
add
inc
pop
sub
lahf
mov
mov
mov
pusha
xchg
jp
pop
lock
mov
sub
sub
ret
cld
adc
push
pop
sub
pop
addr16
nop
loopne
inc
call
cmp
test
ins
cwde
and
sbb
(bad)
cwde
xor
pop
sub
cld
cwde
aas
push
mov
cmp
inc
fdiv
idiv
xchg
push
pop
cmp
xchg
xor
cwde
push
cmp
and
in
push
popa
xchg
out
xchg
ins
imul
jb
or
adc
inc
mov
ror
aad
lods
xor
cwde
push
scas
push
xor
sahf
test
xchg
popa
xor
jp
adc
cmp
add
and
fs
cwde
test
inc
mov
lock
ror
push
imul
repnz
mov
test
call
stos
mov
pop
bound
neg
mov
add
mov
ins
into
xchg
sar
xchg
cmp
cdq
mov
fs
leave
jl
lea
fdiv
cmp
add
enter
cwde
add
mov
les
fnstenv
jmp
ror
adc
ds
loop
adc
cwde
mov
and
push
(bad)
jae
retf
xor
dec
or
jmp
in
scas
cmp
cwde
adc
push
mov
ins
rcr
or
mov
stc
sub
mul
rcl
dec
js
sbb
push
mov
sbb
jne
int
jmp
stos
mov
ficom
push
aaa
push
xor
aas
inc
sbb
jge
mov
movs
pop
mov
lock
(bad)
or
inc
push
(bad)
cwde
xor
dec
int
cmp
xchg
mov
pop
int
xchg
outs
cwde
sahf
mov
rcr
popf
inc
sti
in
fistp
pop
push
outs
cwde
mov
(bad)
movs
dec
loop
dec
pop
adc
je
cwde
sub
sub
xor
jge
sar
add
mov
jp
fld
mov
cwde
(bad)
inc
leave
adc
xchg
lods
mov
fs
or
pop
(bad)
pushw
pop
xchg
mov
lahf
leave
test
sbb
cmp
in
pop
jp
mov
jo
addr16
(bad)
lock
xor
cwde
pop
and
imul
(bad)
push
out
sub
jbe
xchg
test
mov
fisttp
dec
arpl
ja
cwde
sbb
adc
mov
cmp
retf
pop
cmp
mov
outs
jbe
lea
push
jmp
xor
dec
or
push
or
push
xchg
xchg
cmc
cmps
mov
push
mov
cwde
jnp
imul
pushf
jns
scas
mov
int3
in
mul
fs
cwde
xor
sbb
adc
inc
cwde
pop
or
cwde
(bad)
test
mov
cwde
cli
(bad)
test
dec
xchg
jno
ret
inc
fdivr
mov
xchg
mov
clc
or
adc
cwde
push
lahf
call
xchg
mov
mov
loope
xchg
leave
aad
lods
movs
mov
in
mov
mov
retf
shr
enter
xchg
cwde
mov
sti
movs
and
imul
test
addr16
jl
cwde
call
clc
or
dec
retf
aam
scas
cwde
pop
mov
jp
and
test
ss
fscale
in
mov
xchg
in
cmc
sub
dec
pop
not
jp
leave
mov
pop
sbb
icebp
xchg
adc
cs
das
adc
mov
sbb
lods
mov
lahf
push
sbb
mov
push
xchg
pop
cmp
fidivr
xchg
es
cmp
mov
mov
cmp
xchg
je
adc
out
fistp
aaa
push
es
push
cwde
or
xor
or
lahf
add
mov
sbb
mov
cdq
imul
dec
(bad)
xor
cld
dec
clc
je
in
xchg
sub
add
sub
lds
pop
add
call
std
sub
lock
popf
cmp
dec
push
enter
popf
jmp
out
pop
and
push
rcl
in
sbb
fs
jge
mov
sbb
pop
mov
lock
add
sub
stos
jnp
cwde
jno
mov
dec
ss
fbld
jg
fdiv
cwde
xor
(bad)
jnp
mov
fidivr
push
sbb
fsub
call
xlat
in
cmp
std
fiadd
mov
(bad)
call
std
sbb
cwde
xor
imul
sub
inc
fst
adc
popa
cmp
test
out
jo
movs
ds
daa
(bad)
rcr
daa
pop
bound
pop
shl
jne
mov
repz
iret
xchg
jp
mov
imul
mov
and
mov
sbb
mov
mov
mov
inc
cmp
scas
ret
pop
xchg
out
pushf
ret
xchg
loopne
loopne
xchg
adc
jne
les
xchg
xchg
mov
or
mov
fs
ficom
push
cli
sub
push
xchg
popa
je
fs
and
sahf
repz
cwde
in
frstor
adc
cwde
and
(bad)
in
in
cmp
div
mov
movs
mov
cwde
jae
mov
(bad)
add
add
xor
xor
mov
fsubr
dec
or
mov
fistp
xor
nop
dec
dec
push
mov
movs
add
mov
lods
sahf
mov
cmc
ja
js
aam
test
shr
inc
stc
shl
cmp
adc
push
std
adc
lahf
inc
xchg
xchg
popf
imul
imul
scas
cmp
push
sbb
xchg
fnstcw
push
dec
pop
les
cdq
mov
pop
mov
(bad)
push
ds
out
jmp
lock
jne
sahf
fisub
sub
setb
xchg
xchg
adc
jo
xchg
push
(bad)
stc
sub
add
push
clc
or
test
xor
xchg
jge
pop
out
clc
adc
lahf
inc
jmp
mov
adc
and
pop
mov
jmp
lahf
xchg
cwde
ficom
outs
inc
pop
es
jnp
mov
ffreep
pop
pop
clc
inc
rcl
xor
add
jne
in
mov
inc
imul
add
repnz
xchg
iret
test
jb
mov
pop
cmp
pop
mov
loopne
adc
or
fdivp
cmp
gs
pmulhuw
xchg
shl
mov
lds
jge
mov
push
pop
jo
lea
faddp
jns
rol
aas
cwde
(bad)
dec
push
inc
push
gs
dec
retf
scas
mov
je
sti
sbb
xchg
shr
sub
out
pushf
mov
mov
shl
xchg
loope
cmp
in
(bad)
cwde
int3
ffreep
jecxz
cs
jnp
jge
jns
rcl
xor
popa
fdiv
mov
mov
lds
ret
not
shl
push
cmp
cwde
out
xchg
sar
out
xor
js
push
pop
cwde
sbb
out
pop
pusha
xor
cmp
mov
jl
test
push
add
sub
fdivr
xchg
(bad)
outs
mov
sub
rcl
dec
xor
lods
stos
xchg
popa
mov
mov
bnd
or
call
cwde
loop
pop
xor
lods
sub
shl
fisub
sub
aam
or
cli
int
ss
adc
cmp
mov
stos
call
adc
and
out
stos
dec
or
clc
pop
sub
mov
into
jb
xor
inc
(bad)
fidiv
sub
adc
xchg
les
sbb
pusha
jge
rcr
sti
popf
jmp
push
js
pusha
int3
xchg
lods
inc
cmp
mov
pop
push
scas
mov
(bad)
jmp
or
test
in
bound
(bad)
mov
push
out
call
clc
ins
adc
sub
adc
stc
dec
push
adc
leave
push
sti
in
std
in
jo
or
call
xchg
neg
mov
push
pop
jl
imul
dec
pop
cs
sti
or
mov
mov
mov
cwde
or
pop
lds
mov
cwde
ins
pop
dec
rol
rcl
push
push
jo
xchg
imul
xchg
cmc
enter
scas
das
lds
popa
sahf
jne
movs
in
fs
xchg
iret
ret
pushf
add
ja
int
mov
push
pop
inc
icebp
pushf
and
adc
pop
cwde
mov
stos
mov
xchg
jmp
or
mov
jae
push
cli
xchg
add
jnp
pop
or
cs
jno
dec
push
mov
xchg
rol
mov
push
bound
sbb
push
xor
test
xchg
inc
es
inc
jl
add
enter
repz
in
mov
popa
jns
out
cwde
cdq
stc
outs
mov
xchg
call
xor
xchg
cld
sbb
pusha
add
in
adc
sbb
or
in
dec
xchg
loopne
mov
lods
retf
mov
inc
(bad)
fwait
sub
lods
cmp
fistp
and
push
cwde
scas
fsubr
push
cmp
jne
pop
mov
aaa
push
jecxz
mov
pushf
dec
cwde
sub
sbb
adc
fadd
mov
test
stos
stos
xchg
lds
add
push
cmps
dec
xchg
cmp
adc
mov
or
mov
rcr
add
jns
add
icebp
fscale
mov
in
mov
cmps
pop
push
or
in
sub
and
pop
sbb
dec
cwde
push
and
ror
pop
div
aas
sbb
cwde
pop
or
jnp
or
fisub
mov
mov
dec
pop
push
lea
pop
pop
jp
lds
jae
clc
or
mov
xor
aaa
push
ds
bound
rcr
mov
jbe
adc
sahf
neg
loop
jl
mov
sub
test
rol
mov
lahf
xchg
sti
dec
enter
cs
and
or
dec
mov
mov
dec
mov
push
sub
adc
push
sahf
fsubr
inc
push
ja
fsubr
and
cwde
pop
adc
test
out
xlat
cwde
(bad)
ja
jnp
das
pop
rcl
push
add
popa
int3
sub
dec
movs
int
inc
mov
mov
out
mov
jmp
dec
and
in
cld
adc
mov
adc
mov
fist
cmc
daa
or
lods
pop
cmp
mov
(bad)
sbb
retf
and
cwde
fdivrp
(bad)
ss
sub
out
add
adc
dec
in
leave
outs
call
sbb
xor
xchg
inc
adc
or
sbb
inc
pusha
pop
xchg
cmp
and
fld
in
ds
pop
retf
idiv
pop
inc
cwde
xor
inc
jl
pop
pop
mov
or
dec
add
sub
pop
sub
push
mov
in
adc
adc
xchg
pop
nop
test
pop
adc
inc
stos
ss
cld
ins
mov
gs
mov
xchg
adc
cwde
push
and
loopne
movs
mov
call
lock
call
shl
scas
inc
ins
call
jns
push
je
mov
scas
mov
mov
(bad)
jecxz
xchg
std
(bad)
into
xlat
xchg
lock
sbb
das
ds
inc
js
clc
adc
int
adc
sbb
add
mov
push
mov
inc
(bad)
sbb
xchg
push
(bad)
repnz
sbb
ss
mov
cdq
adc
stos
pop
pop
ror
pop
push
xchg
stc
leave
ss
lea
xchg
sbb
lods
pop
sbb
(bad)
inc
push
mov
sbb
in
xlat
dec
jg
and
in
arpl
ficom
cmps
fs
cs
(bad)
xor
cwde
sub
mov
repnz
cwde
sahf
loopne
clc
add
sub
gs
jns
repnz
add
push
in
test
mov
setne
pop
cli
dec
and
repnz
cmp
sbb
add
push
cmp
fsubr
dec
xchg
pop
das
cdq
jg
jb
inc
xchg
xchg
cld
mov
cmp
stos
cwde
(bad)
(bad)
fdivr
sbb
movs
das
cwde
clc
scas
leave
rcl
mov
(bad)
popf
movs
test
adc
bound
das
call
mov
push
lahf
fisub
ds
out
out
pusha
sub
mov
jb
push
popf
retf
test
and
xchg
jle
mov
pop
add
mov
dec
xor
xchg
adc
iret
imul
dec
mov
lds
(bad)
rcr
out
xchg
pop
push
pop
jo
cwde
xchg
movs
mov
adc
aam
sub
js
cld
and
jmp
ins
xchg
jnp
mov
xchg
je
sub
xchg
popa
xor
dec
shr
pushf
cwde
xchg
mul
cmps
out
mov
cmp
arpl
pop
adc
sbb
ret
std
xor
shl
and
jg
jl
xor
mov
jb
xchg
fdivr
ins
push
ja
push
xchg
pop
xchg
pop
and
xchg
shr
xor
mov
shl
inc
in
sti
xor
mov
dec
xchg
jge
(bad)
out
push
rcl
int3
js
cwde
loopne
ror
arpl
bound
lods
cwde
out
(bad)
fcom
(bad)
aam
imul
neg
rcl
add
mov
mov
sub
je
pop
mov
xor
lods
retf
jae
lahf
cmp
fmul
outs
or
and
add
add
push
cld
jbe
popf
out
std
stc
out
js
nop
xchg
rcl
xor
adc
pop
in
das
xor
pop
out
or
adc
xchg
leave
pop
sbb
clc
inc
sub
pop
mov
xchg
sub
out
adc
dec
xor
clc
enter
add
repz
push
out
test
mov
mov
mov
xchg
in
pop
aam
pop
dec
das
cmp
push
push
dec
mov
push
cwde
sar
es
retf
mov
xchg
adc
stos
mov
xchg
add
mov
ds
mov
fimul
sub
jmp
and
call
cwde
adc
mov
push
push
lahf
cwde
pop
mov
and
clc
rol
fs
dec
pop
cmp
mov
ins
in
gs
mov
jmp
inc
loope
sub
xchg
pop
sti
sbb
jmp
iret
int3
int
retf
jge
xchg
sbb
add
sub
int
call
fbstp
mov
ins
cwde
jno
js
push
lahf
and
es
pop
sbb
xchg
ret
out
ins
pop
sar
jo
(bad)
scas
mov
cld
rcl
cmps
iret
dec
jmp
jg
popf
data16
mov
pushf
int
in
repnz
mov
dec
inc
pusha
inc
in
xchg
sbb
sbb
lds
mov
aas
retf
sbb
mov
xlat
scas
call
pop
xchg
and
popa
xor
xchg
(bad)
rol
or
xchg
mov
pop
(bad)
ss
fdiv
xchg
mov
sti
mov
pop
pop
push
and
xor
lods
mov
mov
cwde
mov
pop
or
lock
xchg
aaa
pop
or
pop
int
mov
test
mov
ins
cwde
ja
sbb
lea
mov
push
rol
mov
pop
ret
mov
or
jmp
push
or
pop
sub
cwde
jnp
sub
inc
sub
leave
dec
pusha
icebp
fmul
push
test
xchg
ins
fcomp
sub
xor
leave
cmp
popf
(bad)
imul
sbb
cwde
daa
test
or
jge
pop
push
fisttp
call
ja
adc
scas
or
lahf
dec
cmp
imul
adc
aaa
ret
aad
cmp
push
cmp
ja
jb
mov
inc
pop
test
mov
xchg
daa
scas
stos
call
test
bound
dec
cwde
shl
popa
cmp
movs
dec
neg
cwde
pusha
fist
and
es
xchg
ss
xor
adc
cmc
mov
cwde
lds
cwde
scas
fldenv
in
adc
jp
mov
push
outs
mov
sbb
mov
adc
xlat
ins
push
xchg
(bad)
mov
push
push
stc
cwde
or
in
cwde
push
(bad)
fnstcw
xchg
adc
retf
jecxz
jo
neg
lods
addr16
(bad)
adc
or
xor
inc
jb
pop
adc
xchg
xchg
shl
push
ds
pop
cmps
pop
ins
mov
loopne
fdivr
xchg
stos
adc
les
xchg
es
and
sub
cwde
out
fld
push
xchg
sub
jmp
fcom
call
test
xchg
mov
test
mov
outs
stos
scas
add
or
push
sub
xchg
ins
mov
mov
cmp
rcl
cwde
sbb
cmp
cwde
cmp
push
cmps
mov
xchg
cwde
cmp
aas
push
mov
pop
inc
mov
(bad)
aad
stc
(bad)
test
mov
jp
int3
or
std
push
xor
or
cmp
pop
in
aas
popa
jl
inc
cwde
cld
test
push
xchg
loope
sub
lahf
lahf
shl
jae
adc
dec
cmps
ins
inc
hlt
sub
lahf
inc
jp
ja
jp
fwait
outs
aam
cmps
ret
js
enter
out
and
nop
lahf
cwde
xchg
stc
fyl2x
aaa
or
enter
out
fs
out
xchg
addr16
stos
ja
sub
sti
dec
cwde
in
das
inc
or
cmp
or
in
ss
xchg
push
cmps
xchg
sub
cdq
add
scas
xor
pop
popf
pusha
cmp
pop
and
mov
cmp
ja
cdq
mov
mov
int3
xor
cwde
adc
mov
test
xchg
pop
pop
bnd
fs
cwde
adc
add
popf
int3
in
or
cwde
fsubr
or
cwde
shl
mov
or
cmp
clc
fsubr
into
pop
sub
mov
and
sahf
ror
xchg
scas
xchg
imul
sbb
ret
cmp
retf
mov
mov
cli
push
and
xlat
mov
jmp
js
aam
retf
cwde
jmp
arpl
int3
test
(bad)
in
movs
xchg
push
int
dec
push
sbb
add
sub
retf
call
and
jle
clc
sar
mov
stos
xchg
sahf
dec
add
xchg
inc
push
clc
int
xchg
cmp
pop
sub
lea
add
stos
cwde
(bad)
iret
loopne
mov
into
xor
push
cdq
xchg
jp
stc
stos
xlat
sub
cwde
shr
inc
cli
bound
push
cwde
jl
dec
push
xchg
test
stc
mov
or
xchg
and
push
mov
dec
adc
or
imul
inc
jecxz
mov
cwde
fs
push
sub
aad
sub
mov
loopne
push
sbb
mov
xlat
sub
cwde
inc
sub
outs
inc
cwde
fld
hlt
int
loopne
jo
xchg
or
cmps
std
cmp
call
jns
pop
out
fstp
fsub
ja
sar
rcl
out
dec
adc
test
imul
out
xchg
and
pushf
sub
xor
xchg
call
cmps
call
or
sbb
pop
xchg
sbb
push
mov
and
xchg
or
mov
mov
xchg
lds
ror
leave
sub
bound
ror
fcom
retf
out
xchg
xor
pop
and
mov
sub
pop
dec
adc
jl
cwde
push
cs
inc
inc
retf
ja
outs
fsubr
into
mov
(bad)
call
xchg
out
bound
jns
xchg
xchg
mov
rcl
push
test
sbb
push
repnz
scas
push
movs
(bad)
iret
loope
retf
cmp
mov
imul
mov
cmps
fucomip
leave
in
std
xor
test
test
jmp
dec
cs
push
ja
pop
sub
rcr
(bad)
or
out
test
(bad)
mov
and
sbb
inc
pop
jne
cwde
call
adc
sahf
push
xchg
repz
cdq
in
mov
ror
push
pop
test
mov
xchg
cmps
(bad)
bound
movs
pop
fsub
rcr
ins
sbb
sub
sbb
fnstenv
leave
daa
xor
ret
jmp
fs
enter
inc
push
add
cwde
call
cli
cwde
test
and
xor
cmp
mov
xor
inc
jmp
(bad)
push
cwde
mov
or
mul
jmp
data16
xor
rol
mov
push
loop
cwde
push
mov
std
fsub
cmc
pop
cwde
or
adc
icebp
ret
mov
xlat
push
xchg
mov
sbb
xor
dec
cs
bound
jecxz
mul
fst
jmp
push
mov
cmps
sahf
and
push
stc
in
clc
(bad)
das
addr16
aad
mov
xor
fadd
and
adc
mov
clc
cmp
je
or
add
xchg
push
call
inc
xchg
or
pushf
movs
mov
inc
cwde
or
test
mov
repnz
enter
jl
cwde
mov
cld
cwde
cmp
inc
imul
jb
pop
dec
sub
adc
fsub
idiv
dec
(bad)
es
xchg
jp
jecxz
push
sub
push
adc
arpl
adc
push
cmp
add
xor
cmps
repnz
xchg
inc
pop
mov
popa
mov
aam
arpl
push
out
and
je
or
movs
cmp
(bad)
xchg
call
mov
out
sub
fneni(8087
jo
(bad)
sub
retf
int
aad
es
dec
fs
clc
dec
je
mov
in
das
xchg
mov
jmp
(bad)
in
not
popa
cmp
mov
stos
cmps
and
lods
dec
pop
loop
jns
pop
pop
cmp
outs
adc
loopne
and
cmp
lods
mov
push
outs
mov
xchg
sub
inc
cdq
call
pop
leave
in
inc
inc
cwde
inc
sti
in
int
pop
test
mov
or
je
sub
mov
in
mov
loop
retf
cmp
cdq
mov
mov
add
jne
fcomp
pop
jae
inc
or
jmp
fcomp
retf
adc
jmp
loop
xor
sbb
add
xchg
imul
fcom
mov
inc
in
js
add
stos
adc
mov
and
imul
push
jnp
cwde
test
mov
cmp
cmp
out
pop
in
retf
leave
fcom
dec
xchg
cwde
shl
(bad)
iret
int
sub
mov
sub
(bad)
clc
add
(bad)
sbb
inc
call
mov
mov
and
add
das
jmp
mov
jnp
or
xchg
cwde
fisttp
pop
leave
lods
neg
cmc
push
fimul
cwde
arpl
jno
mov
faddp
sub
scas
and
mov
jne
je
and
xchg
push
sbb
lock
adc
test
loop
adc
inc
sbb
sub
and
jle
stos
mov
mov
inc
pop
sub
or
imul
xchg
mov
jo
adc
clc
ins
test
sbb
imul
imul
fstp
(bad)
xlat
stos
sub
repnz
sub
xchg
cwde
and
test
push
scas
stos
jbe
cwde
js
mov
xchg
fsubr
or
cmp
pusha
(bad)
mov
fsubrp
test
xchg
sub
cwde
sub
pop
mov
cwde
int3
repz
je
jns
mov
fst
or
and
out
cwde
push
fimul
mov
cwde
(bad)
scas
(bad)
sub
test
(bad)
shl
cwde
adc
paddsb
in
lahf
test
js
push
mov
(bad)
mov
movs
adc
push
ins
cwde
jo
pop
adc
(bad)
ficomp
test
jae
leave
out
and
cwde
std
inc
mov
mov
and
cmp
inc
jno
cwde
adc
mov
mov
inc
out
outs
call
cmc
cwde
mov
dec
call
cmp
(bad)
loop
test
cwde
mov
(bad)
cld
lahf
(bad)
frstor
add
test
adc
clc
dec
iret
sbb
jb
push
and
dec
inc
push
mov
fnstcw
pop
xor
iret
sub
retf
int
jmp
dec
call
retf
pop
cld
test
aam
sti
retf
pop
nop
push
jne
add
lock
cwde
xchg
ret
push
sub
push
adc
shr
sbb
adc
lock
and
xchg
fistp
sbb
and
imul
xchg
jmp
mov
dec
lahf
int
inc
add
pop
fdiv
in
(bad)
enter
xchg
(bad)
mov
xchg
adc
cmp
xchg
or
not
cwde
xlat
sub
jmp
sbb
mov
cwde
std
push
out
pop
and
test
lahf
gs
imul
stos
lea
out
jl
xchg
jb
ins
mov
push
pusha
dec
sub
fisub
push
jns
leave
sbb
popf
sbb
fcom
pop
mov
sbb
jo
xchg
inc
jbe
adc
cmovnp
(bad)
push
mov
dec
sub
mov
and
push
or
mov
mov
xchg
cwde
out
pop
sar
(bad)
repnz
mov
add
adc
xor
js
or
ja
jg
fidivr
cmp
icebp
shl
xchg
mov
or
fs
pop
out
sbb
adc
push
inc
or
xchg
mov
jo
cwde
push
fwait
les
int
(bad)
push
mov
loope
dec
out
cwde
outs
jb
rol
cwde
cmp
pushf
data16
jnp
xchg
and
imul
pop
jae
inc
inc
pusha
aad
mov
xchg
adc
sbb
cld
rcl
pop
loopne
nop
imul
xchg
mov
mov
ficomp
das
cwde
out
mov
(bad)
cmp
xchg
mov
(bad)
pop
xor
add
inc
imul
add
add
sar
push
cmps
mov
xchg
sub
xchg
(bad)
pop
xlat
jmp
arpl
xor
add
jo
fdivr
aad
cmp
out
inc
lock
xor
popf
push
(bad)
xchg
(bad)
int3
ins
xchg
scas
rcr
mov
sti
jmp
cwde
rol
sbb
sub
call
(bad)
jns
push
mov
jecxz
cmps
in
je
push
jmp
xor
movs
mov
(bad)
rol
cwde
stc
(bad)
cdq
addr16
add
xlat
xchg
loop
nop
fst
xchg
out
mov
ret
push
sahf
outs
push
and
cwde
retf
inc
cmp
call
loope
mov
lahf
mov
pop
jae
popf
inc
xchg
dec
push
add
cli
ret
adc
aaa
cwde
push
arpl
lods
mov
cmc
cwde
sar
inc
in
sahf
mov
adc
and
das
and
mov
push
shl
popf
xor
arpl
movs
add
add
cwde
push
push
sub
jmp
inc
test
xchg
out
xchg
jp
pop
int
push
mov
ror
cld
and
stc
jmp
fwait
test
int3
mov
dec
inc
jp
mov
jg
aad
xchg
mov
or
inc
out
loope
test
xchg
scas
mov
push
push
test
adc
pop
mov
jb
mov
ret
iret
push
scas
aaa
out
neg
xor
mov
ret
cdq
lock
pop
push
sub
sbb
pop
sub
adc
or
test
jmp
js
call
cwde
pop
cli
pop
xchg
add
xchg
sub
mov
rol
test
sub
mov
xchg
inc
inc
je
xchg
cmps
cmp
push
(bad)
adc
push
sti
pop
add
lea
adc
shl
lds
mov
nop
aaa
cwde
mov
pop
inc
mov
outs
and
adc
mov
sub
stos
fisubr
cwde
movs
mov
cwde
call
pop
xchg
out
es
int3
mov
xchg
cmps
shr
cmp
mov
ffreep
pop
cwde
adc
cs
cli
cwde
jns
sbb
dec
cwde
fidiv
fnsave
jp
sahf
and
imul
repz
aad
and
cmp
(bad)
test
cwde
bound
lods
(bad)
cwde
out
cld
push
jl
push
es
inc
jnp
push
mov
sbb
add
out
add
add
mov
cwde
loop
out
push
in
div
and
pop
sub
xchg
sub
jmp
fidiv
cmp
mov
repnz
in
jecxz
test
cwde
mov
add
sbb
pop
mov
test
xchg
or
xor
stos
dec
push
aas
sub
not
cwde
mov
mov
jmp
(bad)
jb
ja
or
je
and
jmp
push
cwde
pop
es
jbe
call
push
push
ret
clc
(bad)
test
push
pop
aas
xor
jge
jecxz
mov
or
push
mov
cmp
or
and
push
aad
test
fdivp
cwde
xchg
and
data16
jno
cmp
cwde
call
add
inc
sbb
fmul
lock
sbb
(bad)
movs
mov
cmc
int3
sbb
sbb
cwde
pop
sub
push
dec
sbb
lds
sbb
into
cwde
and
and
pop
out
rcr
dec
rcl
nop
cld
lea
xchg
rcr
mov
arpl
or
pop
das
and
enter
mov
mov
mov
xor
pop
xchg
dec
test
push
cld
or
cwde
adc
dec
xchg
dec
cmps
push
stos
sub
cwde
pusha
int3
ss
pop
rcr
mov
sub
dec
add
cmp
pop
push
or
cwde
xor
xor
sub
jnp
push
(bad)
ds
pop
inc
loop
jo
add
call
inc
jb
cwde
lds
idiv
sub
out
scas
out
scas
add
adc
sar
cwde
ss
push
xor
jecxz
mov
and
sub
xchg
xchg
jmp
frstor
mov
rcl
mov
pop
pop
mov
xor
fcomp
jae
xchg
push
mov
pop
repnz
sub
mov
mov
cdq
xchg
jo
imul
movs
out
rcl
cs
scas
mov
push
jno
mov
movs
xor
adc
data16
cld
sub
aas
cmps
pop
jne
mov
in
or
xchg
mov
sbb
xchg
sub
adc
ds
jne
xor
dec
js
ins
jg
cmp
clc
sub
xchg
jp
push
adc
jmp
out
bound
int
arpl
mov
or
data16
in
frstor
pop
inc
jle
cwde
mov
sub
stos
out
(bad)
fist
mov
dec
clc
sti
out
stos
test
push
ja
pop
xchg
cwde
in
or
ins
fist
fsubp
xchg
sahf
cwde
inc
(bad)
sahf
cmp
inc
ds
das
jg
adc
cmp
add
popf
mov
inc
mov
xchg
int
aam
lock
fmul
dec
sub
sub
fdiv
clc
ret
rcl
jg
mov
loope
jmp
xor
inc
imul
jp
movs
jbe
cld
xchg
outs
jo
xchg
mov
sub
jnp
pop
mov
lds
fbld
add
xchg
sbb
aaa
sbb
fsubr
cld
mov
jmp
leave
loope
movs
fiadd
outs
cwde
cmp
adc
adc
xchg
popf
jo
mov
cmps
xbegin
jbe
and
sar
fldcw
mov
push
and
cwde
xchg
mov
dec
xchg
cmp
leave
clc
aad
or
mov
add
movsx
cwde
add
(bad)
and
add
cld
cmp
pop
sub
adc
ds
(bad)
fst
mov
not
popa
jae
xchg
fadd
and
xchg
js
xchg
test
push
sbb
push
and
jl
mov
dec
and
mov
jecxz
cmp
mov
lods
xor
dec
pushf
dec
test
loopne
cwde
and
lea
add
lock
inc
in
xchg
sub
jns
inc
retf
loopne
sahf
add
pop
(bad)
ficomp
mov
ja
repnz
xor
add
cwde
jno
int3
add
dec
pop
and
dec
xor
sbb
adc
into
fcmovu
mov
out
add
push
cwde
sub
std
push
stc
push
dec
cmp
cmps
(bad)
movs
clc
inc
div
ror
cwde
and
or
mov
loopne
add
xchg
pop
pop
push
xchg
adc
cwde
add
add
in
popf
idiv
sbb
(bad)
push
cmp
and
sbb
mov
and
inc
adc
lahf
push
pop
fwait
cmps
pop
ficomp
adc
cld
js
add
adc
inc
out
xchg
jmp
mov
push
adc
cwde
mov
ins
lods
mov
sub
mov
arpl
mov
inc
ss
jb
mov
push
push
enter
inc
fcmovnb
jae
dec
xchg
adc
popa
jbe
xchg
jg
loop
(bad)
jnp
pop
pop
adc
idiv
cwde
or
(bad)
aam
cwde
(bad)
ficomp
(bad)
call
out
psubsb
cwde
fidiv
pop
(bad)
cwde
mov
(bad)
and
cmp
cmp
int3
js
lods
cmp
mov
push
mov
jle
cwde
std
cli
adc
sbb
mov
arpl
xchg
sar
test
push
mov
sub
int3
or
repz
cwde
mov
lods
or
lahf
mov
out
add
js
inc
push
cwde
push
cs
sub
jle
xchg
inc
adc
out
sub
js
arpl
scas
or
cwde
(bad)
add
adc
adc
shl
mov
pop
ins
cmps
lahf
sbb
leave
adc
mov
push
or
retf
repz
dec
cmps
imul
shr
lods
cmp
xchg
sub
aaa
test
jge
in
pop
xchg
(bad)
aaa
arpl
clc
inc
in
dec
add
jmp
add
jecxz
loope
adc
xor
cwde
jo
scas
mov
test
cmp
pop
cs
out
aam
push
aad
loopne
(bad)
add
xchg
mov
push
and
ins
pop
jns
mov
or
xchg
sbb
lea
jmp
jb
(bad)
dec
lods
xchg
in
jbe
outs
js
cdq
inc
xchg
cwde
pop
les
int
dec
cwde
sub
inc
lods
pop
cwde
retf
inc
pop
mov
fiadd
call
add
mov
loope
xor
lahf
jno
hlt
cmp
in
outs
cwde
jae
mov
pushf
cwde
aad
push
lds
inc
push
out
call
push
dec
push
jmp
adc
add
xor
cmp
mov
push
jge
test
in
loopne
add
sbb
sbb
xchg
les
push
add
sub
outs
fwait
jmp
sbb
jecxz
stos
pop
ds
outs
mov
call
(bad)
xor
repnz
xlat
std
mov
arpl
mov
pusha
add
icebp
sub
lea
shr
js
cmp
cmp
js
pop
das
push
fstp
cmp
cwde
adc
and
push
inc
shr
jp
aas
cmp
mov
or
sbb
rol
sbb
mov
mov
scas
xlat
mov
es
adc
inc
pop
and
dec
mov
les
sbb
in
mov
xchg
ja
mov
or
jg
loop
xchg
stos
mov
jmp
dec
pop
dec
push
and
fs
mov
cwde
mov
jbe
xchg
cwde
pop
fadd
sbb
sahf
add
ins
jo
xchg
dec
das
cmp
lahf
(bad)
or
call
jmp
and
cwde
imul
pop
and
mov
add
nop
xchg
outs
add
mov
loop
mov
xor
clc
mov
jnp
or
xchg
scas
addr16
enter
ss
jmp
push
xchg
pop
and
adc
adc
call
popa
test
jo
xchg
cmc
fmul
stos
push
loop
jl
push
loopne
inc
cwde
retf
pop
cli
pop
sub
jmp
or
setae
ss
dec
mov
clc
(bad)
inc
div
fistp
jbe
or
inc
jg
les
mov
ins
test
lea
or
or
or
push
adc
add
cs
bound
jge
in
xor
adc
inc
adc
retf
lea
xchg
fdiv
es
bnd
xor
sbb
or
mov
lods
dec
cmps
scas
imul
clc
test
pop
jno
sub
cwde
mov
es
cwde
sbb
push
jg
mov
clc
cdq
lods
cmp
adc
(bad)
cwde
push
popf
mov
jbe
dec
mov
or
cwde
mov
and
dec
cmp
cmp
dec
mov
daa
cwde
push
sub
das
je
imul
adc
stos
sahf
mov
add
sti
lods
pop
jns
pop
jae
es
pop
pop
mov
xchg
sbb
sub
jo
mov
nop
mov
sub
fdiv
mov
retf
sbb
clc
scas
fcmovne
xchg
fnstsw
in
adc
lods
mov
cwde
stos
out
imul
lods
pop
(bad)
cwde
and
scas
mov
icebp
fiadd
les
clc
and
call
pop
or
gs
in
cmp
sub
sbb
mov
push
retf
xor
enter
push
lahf
(bad)
sbb
sahf
stos
leave
loopne
add
inc
mov
jnp
aaa
add
ins
jne
les
xchg
sbb
test
cwde
cld
fld
mov
call
hlt
adc
jmp
jl
mov
push
dec
loope
fiadd
mov
adc
inc
movs
rcr
pop
jbe
aaa
adc
std
mov
dec
and
cwde
ret
inc
js
bndldx
pop
loopne
push
scas
jne
pop
sbb
push
adc
stc
mov
xor
add
cdq
pop
fs
cwde
mov
add
cmp
mov
sub
popa
loope
cwde
add
outs
mov
ss
mov
push
hlt
sahf
and
scas
js
add
aam
and
call
add
clc
mov
fwait
xchg
fild
daa
xor
cmc
dec
xchg
sar
int
push
xlat
and
and
ret
icebp
sbb
add
cwde
xchg
mov
mov
rcl
mov
mov
imul
push
fadd
in
xchg
clc
add
shl
std
fsubrp
lahf
add
out
and
or
sbb
xor
and
mov
dec
lods
mov
out
es
cwde
pop
sub
fistp
inc
mov
push
cwde
and
mov
jnp
pop
or
push
movs
cwde
cli
xchg
push
loop
cwde
test
arpl
inc
cwde
(bad)
aas
jmp
leave
xlat
ins
jbe
pop
test
imul
aam
loope
int
ins
in
mov
js
pop
movs
cdq
lea
inc
inc
es
sub
(bad)
xchg
sub
jnp
popa
clc
sub
in
cdq
icebp
and
std
stos
xchg
popa
jp
inc
dec
cwde
js
cdq
iret
jne
dec
xchg
fwait
xchg
mov
std
inc
not
mov
jo
enter
mov
pop
mov
int
icebp
sub
push
jp
icebp
inc
xchg
push
jae
jb
sbb
call
daa
xlat
lahf
sbb
push
ds
icebp
cwde
mov
dec
std
int3
xchg
xchg
add
ins
cs
mov
mov
in
pop
inc
and
push
jnp
pop
shl
inc
inc
sub
test
mov
push
pusha
pop
cwde
mov
in
push
jbe
mov
mov
popa
xchg
lahf
into
fistp
dec
in
sub
scas
inc
push
int
xchg
xchg
dec
pusha
and
(bad)
fsub
imul
dec
adc
cwde
mov
jecxz
or
sub
push
push
cmps
add
push
add
call
mov
call
push
(bad)
aam
jecxz
mov
xchg
mov
inc
mov
mov
movs
fucomip
js
ret
or
std
pop
pop
inc
mov
mov
ss
xchg
fcomi
ins
jge
and
jbe
mov
and
sub
dec
push
imul
mov
loop
iret
pop
jne
mov
mov
jmp
int
jo
pop
in
dec
popa
in
pop
call
jnp
or
cwde
cmp
cmp
xchg
sub
dec
pop
xor
js
out
ret
lods
xchg
push
xchg
pop
push
(bad)
push
sti
push
call
lea
xchg
call
mov
add
ins
cwde
sbb
adc
inc
jnp
sar
xchg
jp
cmp
inc
xchg
dec
mov
fadd
dec
mov
push
cwde
lahf
adc
jl
(bad)
cwde
outs
push
and
jno
pusha
dec
xchg
jge
jmp
sbb
mov
imul
out
adc
or
or
xor
sbb
mov
popa
cwde
call
cmc
or
cmp
shr
daa
xchg
test
xor
aad
xchg
cmps
mov
xchg
sbb
and
sub
dec
dec
test
push
xchg
dec
push
je
data16
push
mov
scas
mov
test
dec
enter
xor
cmps
mov
xlat
sub
inc
(bad)
popf
pusha
or
mov
outs
mov
adc
xchg
out
inc
sbb
mov
cmp
repnz
js
add
lods
mov
pop
dec
sbb
out
jecxz
sub
sbb
cwde
add
out
fstp
xchg
aaa
sbb
aam
test
xchg
jge
inc
jp
(bad)
push
mov
aaa
(bad)
pop
xchg
rcr
or
jo
xchg
movs
outs
jae
addr16
clc
xchg
(bad)
fdiv
into
jb
test
mov
sbb
cwde
mov
cmp
sub
jl
mov
sahf
ins
mov
jmp
pusha
mov
jg
cwde
or
ss
sti
mov
call
dec
sar
mov
sbb
dec
mov
cdq
cmps
imul
mov
cmp
into
mov
pop
xlat
mov
mov
fld
jp
clc
adc
jge
ror
nop
(bad)
mov
ds
xchg
xor
out
fmul
push
cwde
outs
jmp
fild
sbb
sub
fidiv
pusha
xchg
xor
popa
clc
pop
jl
pop
mov
sbb
jg
sbb
sbb
dec
aas
mov
cmp
and
mov
retf
sbb
inc
jb
mov
xchg
inc
outs
cwde
sbb
mov
(bad)
lds
sbb
test
imul
mov
mov
fistp
mov
popf
xor
outs
cwde
sub
xchg
(bad)
cwde
push
cmp
imul
ds
inc
xor
out
test
push
push
sub
xchg
fdiv
cdq
dec
pop
arpl
out
mov
push
daa
push
mov
cwde
dec
mov
cwde
jmp
ins
addr16
adc
sub
ja
loope
sbb
dec
cmp
push
xor
cmp
sub
int
lock
or
imul
or
add
jo
mov
cmp
and
inc
pop
cwde
mov
mov
pop
clc
xlat
and
ss
ins
cwde
jno
xor
je
jg
xchg
lock
dec
mov
mov
fsubrp
jo
mov
(bad)
jmp
cmp
addr16
je
clc
or
xchg
stc
fmul
jp
cmp
out
je
pop
jns
mov
or
mov
sbb
pop
cwde
aas
inc
sub
ins
xchg
jnp
call
test
clc
aaa
je
push
mov
xor
lahf
js
jno
xchg
mov
xor
das
cmp
pop
ffree
push
ret
pop
xchg
and
ja
lods
mov
outs
(bad)
add
cwde
add
push
out
push
pop
jmp
sbb
cmc
sub
adc
mov
xor
add
outs
cwde
xor
jge
adc
jl
imul
xlat
mov
push
dec
into
scas
cmps
xor
push
cli
in
mov
sub
repnz
out
mov
mov
es
pop
outs
mov
enter
outs
sub
jbe
mov
call
fidiv
test
push
les
adc
sbb
jae
stos
and
cwde
sahf
lea
cdq
mov
sar
add
sub
pop
cwde
loope
jns
in
add
std
loopne
cwde
pop
mov
stos
xchg
rcr
loope
loop
or
aas
add
mov
ins
pop
pop
push
jns
adc
int
mul
int3
mov
out
sbb
sub
xchg
adc
dec
test
mov
aas
xchg
xlat
sbb
fisubr
mov
jnp
mov
retf
xchg
fdivr
loop
pop
stc
cmp
dec
ror
mov
adc
xchg
push
mov
lods
ret
lods
ror
lock
mov
mov
es
int3
mov
pop
adc
cwde
sbb
jno
shl
popf
mov
ret
iret
fmul
rol
test
jns
xor
xchg
into
jg
sub
rcl
fs
and
push
bound
mov
fistp
pop
popf
fcmovnb
push
fwait
or
jne
cwde
mov
pushf
addr16
lods
call
(bad)
sub
xchg
mov
ins
aad
in
or
jns
rcl
iret
push
hlt
imul
pop
call
test
fwait
jg
out
ds
xchg
push
mov
and
cwde
inc
jl
retf
sahf
jecxz
pop
cwde
cmp
jnp
jb
inc
fs
jbe
xchg
push
push
daa
dec
adc
pop
in
pop
pushf
cwde
add
mov
mov
cmc
out
sbb
loop
mov
popa
cmp
or
dec
jo
and
addr16
xchg
jp
fmul
jne
cwde
xchg
jecxz
jmp
cwde
clc
shl
xchg
imul
outs
mov
fcomp
dec
push
cwde
retf
(bad)
icebp
sbb
into
cli
xor
push
jmp
xor
rol
pop
sbb
sbb
jb
in
inc
adc
lods
adc
in
push
pop
dec
mov
xor
out
(bad)
fldcw
lea
mov
loopne
call
fisttp
cli
repnz
add
aad
iret
ror
sbb
add
sbb
mov
pop
imul
data16
xchg
in
clc
aaa
setg
ja
mov
call
pop
xchg
sbb
cmps
push
dec
out
js
ins
lahf
fcomip
dec
jmp
push
out
ret
ja
mov
mov
in
cwde
jb
mov
inc
push
cwde
test
jmp
dec
xchg
pop
mov
adc
jmp
stc
jl
adc
mov
mov
fs
xchg
xlat
mov
dec
aas
mov
out
ins
lea
lds
mov
(bad)
jg
lods
cdq
cwde
stos
adc
hlt
cli
popf
pusha
and
sub
popf
push
(bad)
imul
push
cwde
or
clc
xor
arpl
push
nop
inc
bound
ficom
sbb
mov
xor
cmp
xchg
mov
sub
int3
mov
stos
loopne
lahf
jo
punpckhwd
sbb
aaa
sti
xchg
lahf
push
sub
into
ficomp
push
sahf
(bad)
fmul
inc
sub
xchg
sbb
ds
push
cmp
fwait
dec
push
mov
or
xchg
jp
jg
js
sub
(bad)
xchg
test
push
fst
adc
jle
cmc
(bad)
test
or
xor
jno
inc
stos
call
or
inc
push
cwde
dec
jbe
js
mov
cmp
xlat
pop
test
add
dec
inc
xchg
rcr
mov
sbb
hlt
pop
es
out
(bad)
jge
sbb
aaa
add
js
cs
lea
jmp
push
push
jns
pusha
call
enter
adc
fsub
ins
pushf
cmp
sub
or
push
std
dec
js
push
imul
pop
jo
mov
aad
lea
cwde
and
adc
mov
xchg
enter
inc
xchg
mov
jb
mov
push
scas
mov
mov
call
dec
jp
cwde
lods
mov
adc
cwde
mov
loopne
repz
scas
mov
mov
jecxz
ror
push
inc
jne
jae
mov
pusha
inc
jp
mov
add
cmps
add
fsubr
fcomp
out
outs
fs
fldenv
ss
mov
inc
cmp
jns
leave
daa
jmp
test
mov
mov
lea
ror
mov
mov
neg
ficomp
add
push
js
push
xor
mov
or
pop
and
inc
popf
fmul
jns
repnz
in
jl
adc
inc
push
cs
and
out
jmp
fwait
in
out
push
ins
int
pop
ret
test
push
out
pop
or
in
push
cwde
out
jge
push
xchg
sti
js
lods
rol
xlat
jmp
repnz
out
cdq
cwde
cmp
push
push
xor
sub
retf
cwde
test
push
mov
lds
xor
and
push
xchg
or
mov
dec
xchg
aas
add
and
jp
mov
in
adc
sbb
std
cmps
in
mov
test
jl
fcomp
xchg
mov
cwde
lahf
lds
dec
scas
sbb
mov
sbb
cwde
cli
mov
hlt
push
xchg
push
mov
cmps
mov
jmp
in
hlt
ss
int3
xchg
pop
test
adc
xor
push
imul
out
idiv
add
jbe
les
mov
addr16
xchg
add
jno
and
add
in
jge
test
cmp
in
test
bound
push
ins
loope
int3
sbb
xor
je
mov
push
fs
add
inc
sub
pop
dec
mov
jae
cmp
shr
repz
(bad)
jmp
jo
xchg
test
jge
jb
jb
adc
(bad)
fdivr
xor
ret
loop
pop
pop
cmp
jg
shr
into
test
cwde
out
icebp
adc
and
adc
cwde
pop
add
mov
push
cwde
mov
scas
cwde
pop
push
(bad)
xor
aas
or
dec
cmp
cdq
gs
nop
cwde
xchg
arpl
xchg
mov
mov
pusha
inc
xchg
or
or
mov
retf
or
jle
jns
das
das
sbb
fcomp
push
xchg
jne
out
int3
mov
addr16
sub
popf
in
aas
cwde
jnp
fnsave
neg
lods
loop
pop
adc
inc
fs
and
leave
xor
sbb
cmp
or
in
fwait
or
popf
xchg
adc
or
mov
xchg
or
add
in
jb
lods
mov
add
test
(bad)
repz
push
sub
jg
int3
ja
sti
ror
xlat
cld
into
fimul
jo
jmp
int
add
mov
daa
push
retf
or
ins
add
test
addr16
dec
xchg
jnp
cdq
(bad)
mov
and
sbb
call
push
cwde
ss
bound
push
loop
popa
ins
jno
add
addr16
cmps
inc
sbb
or
pop
dec
xchg
call
cmc
in
xchg
mov
ret
test
(bad)
push
fcom
cmc
cld
sub
push
or
lea
movs
inc
jmp
lea
and
pop
sbb
cwde
dec
das
mov
(bad)
ins
int3
cwde
test
shl
(bad)
pop
sbb
sbb
push
mov
jae
dec
push
dec
lods
in
bound
test
pop
out
cwde
mov
add
test
int
fild
fist
or
sbb
sbb
push
adc
sub
test
dec
enter
dec
mov
outs
sbb
ds
aas
xchg
mov
enter
fcomp
std
iret
xchg
cmp
aam
(bad)
pop
push
sbb
sub
sbb
dec
popf
jo
scas
jo
fisubr
test
cwde
sub
jl
test
(bad)
stos
and
mov
cwde
test
jmp
pop
sub
stos
mov
mov
ds
pusha
xor
inc
lahf
add
mov
xchg
aas
adc
xor
mov
ret
imul
xor
push
mov
hlt
xor
mov
push
adc
enter
xor
adc
add
cmp
ins
sbb
call
mov
mov
adc
cmp
xor
inc
out
xchg
fldenv
(bad)
push
scas
cwde
mov
ins
cmps
cmp
cmc
cwde
push
(bad)
retf
imul
sub
hlt
mov
dec
outs
pop
(bad)
or
(bad)
ins
cmps
or
int3
cwde
shr
add
loope
aaa
mov
xchg
pusha
cmp
cwde
jnp
(bad)
fstp
sbb
iret
xchg
mov
sbb
int3
mov
xor
jnp
cwd
ret
sbb
xchg
adc
js
jo
outs
add
es
scas
inc
jns
add
xchg
clc
mov
mov
ins
js
mov
mov
dec
sahf
mov
mov
into
call
pop
sub
jle
call
xchg
js
(bad)
aaa
jp
xor
icebp
sbb
and
mov
adc
jmp
and
jecxz
fisubr
daa
add
push
xor
outs
mov
(bad)
(bad)
out
js
inc
inc
cwde
test
test
into
xchg
js
loopne
mov
cmps
sbb
test
push
pop
inc
pop
ja
cwde
mov
pop
inc
cs
push
pop
or
push
xor
fs
ret
mov
lods
lods
rcl
dec
and
xchg
ins
les
jg
loopne
cld
out
and
push
mov
in
xchg
mov
push
jecxz
or
in
cwde
jge
fwait
test
ret
popf
int
out
js
push
nop
cwde
xchg
mov
jge
cwde
aad
retf
icebp
call
inc
(bad)
fsub
mov
js
xlat
cdq
mov
cwde
or
add
xchg
ja
leave
push
jo
fadd
jmp
fwait
stos
xchg
retf
cli
movs
fs
sub
jns
fistp
pop
cmp
mov
cmp
and
cwde
das
sub
sub
and
xchg
imul
mov
jbe
dec
sbb
push
xor
mov
add
jp
cwde
jbe
mov
cwde
out
jmp
push
mov
das
sbb
fistp
sbb
jo
popf
pop
loopne
(bad)
popa
sbb
stc
and
int3
fcmovne
pop
cmovb
js
sub
js
mov
mov
cwde
xor
cmp
cmp
or
jg
jge
retf
cwde
lea
call
out
xchg
mov
push
push
and
clc
jmp
xchg
je
or
mov
push
aad
mov
data16
xchg
ins
jae
mov
or
cwde
push
in
movs
mov
hlt
push
jmp
scas
cwde
mov
cmp
pop
cmp
cwde
mov
mov
or
cwde
fadd
cmc
sub
sub
rcl
or
or
add
sbb
xchg
inc
ja
pop
leave
inc
xchg
sbb
jb
les
lahf
jo
fs
cwde
popa
jge
mov
mov
xchg
loop
mov
push
stos
mov
cmp
pop
pop
rol
or
jmp
clc
jmp
cmp
jecxz
ret
das
dec
ret
add
fs
lods
xor
and
pop
mov
sub
inc
std
enter
sbb
dec
lds
retf
retf
pop
adc
cwde
cld
mov
into
jmp
push
data16
jl
push
cmp
pop
cli
push
xchg
sub
pop
hlt
inc
or
and
pop
sbb
dec
sub
push
cwde
push
js
push
pop
stc
or
aaa
into
mov
test
xor
sahf
ins
dec
mov
ins
test
aad
cwde
sbb
imul
xor
nop
lahf
movs
cmp
cwde
pushf
mov
pop
sub
clc
lea
test
xlat
cmp
imul
lahf
shl
xchg
pusha
push
loopne
xchg
outs
jnp
mov
adc
cwde
pop
std
sbb
icebp
les
jle
outs
loopne
imul
ja
scas
cdq
xchg
push
adc
out
cwde
call
xor
jb
pop
jno
aad
xchg
jo
cs
das
xor
inc
xchg
mov
mov
shl
add
add
or
xor
push
xlat
mov
cmp
xchg
dec
add
mov
pop
repnz
scas
xor
push
bound
pop
mov
sbb
or
dec
lea
sub
fiadd
inc
inc
imul
sbb
ret
leave
or
mov
push
and
mov
mov
imul
lock
out
and
mov
sti
scas
push
int
imul
xor
cwde
xchg
sbb
mov
inc
add
cmps
mov
dec
or
daa
(bad)
aam
xlat
movs
cwde
fdivr
push
xchg
cmps
mov
in
mov
(bad)
mov
sub
add
stc
dec
mov
jne
add
sahf
and
xor
cmp
into
sahf
sub
xchg
lods
out
std
shl
lea
xor
or
call
and
jp
sub
xor
pop
sub
push
xor
mov
mov
inc
mov
xchg
jle
pop
repz
cmp
enter
add
xchg
jbe
call
xchg
into
loopne
push
das
sar
sbb
movs
cwde
and
jo
in
mov
sbb
dec
sbb
adc
mov
cwde
xchg
add
or
xchg
movs
add
out
mov
pusha
sbb
arpl
mov
cmp
jmp
cmp
mov
push
test
repnz
hlt
gs
stc
sbb
clc
aaa
sbb
and
pop
xor
das
mov
fimul
ds
and
js
add
xchg
je
sub
or
shl
aaa
mov
out
out
retf
test
inc
in
mov
sbb
fcomp
xchg
add
scas
shl
or
lahf
cdq
jge
pop
ins
mov
mov
mov
or
pop
lods
cmp
cwde
xchg
sti
cwde
outs
retf
fld
popf
or
mov
pop
sub
cmps
jo
push
push
test
push
inc
es
xchg
(bad)
movs
pop
and
call
popf
sbb
dec
mov
fdivp
xor
pop
les
add
nop
push
mov
call
cwde
out
and
iret
inc
cs
inc
push
test
xchg
pop
je
int
sub
std
add
add
fs
popf
popa
gs
ins
outs
cwde
mov
jne
sahf
pop
mov
ja
mov
scas
jp
cwde
sub
cmp
push
or
mov
jl
js
arpl
(bad)
repz
xchg
dec
int
cs
jp
add
jb
ins
cmp
cwde
jne
gs
ja
pop
cwde
lds
(bad)
int3
es
push
dec
push
lock
movs
nop
into
jg
mov
inc
cwde
aad
dec
inc
dec
xchg
shl
rol
cwde
xor
imul
cwde
mov
fimul
jmp
dec
imul
jne
js
icebp
push
xchg
scas
mov
adc
jg
out
jmp
cwde
retf
and
pop
out
cwde
imul
je
loopne
je
jo
and
and
popf
outs
in
cwde
and
mov
xor
inc
adc
pop
cs
sub
in
xchg
(bad)
push
sbb
frstor
cwde
in
cdq
mov
push
inc
pop
add
inc
sub
sub
(bad)
jae
test
cmp
push
jp
cmp
hlt
cwde
aas
cld
xchg
and
movs
call
dec
sub
xchg
lahf
ins
fcom
add
dec
hlt
rol
jg
in
mov
ja
mov
out
sub
xchg
or
mov
jle
stos
sar
rcl
test
lock
in
pop
pop
out
inc
cwde
sbb
test
cwde
xor
js
loope
jnp
popf
mov
dec
cwde
cmp
cmp
mov
xor
hlt
push
and
cwde
dec
push
inc
sbb
addr16
stos
popa
aad
pop
iret
mov
cwde
fmul
adc
jl
imul
cwde
pop
mov
aas
sub
or
pop
inc
pop
call
jb
rol
dec
cwde
inc
add
xchg
fmul
cwde
mov
pop
cs
push
xchg
dec
sar
inc
aam
adc
push
stos
fiadd
xchg
dec
js
and
test
sub
jl
xchg
loop
mov
mov
mov
jbe
jp
jb
xchg
inc
sub
cmp
sbb
outs
out
cwde
dec
div
push
in
cwde
pop
jmp
repnz
lahf
jmp
ins
jg
cmp
mov
cwde
mov
xlat
cwde
rcl
and
outs
loope
mov
bound
jne
cmp
sbb
pushf
xchg
test
test
jmp
aas
mov
fadd
nop
xchg
rol
cwde
stc
js
pop
in
retf
stos
mov
call
std
adc
cli
jmp
sbb
cwde
es
mov
push
in
xchg
jmp
pop
jns
pop
clc
xchg
cs
dec
cwde
cmc
xor
mov
popf
cwde
xchg
rol
mov
cwde
cmc
mov
loop
adc
mov
mov
scas
sub
ins
jecxz
xor
xchg
xchg
imul
je
lahf
jmp
add
cmp
shl
xchg
xor
call
pop
add
test
jmp
or
lahf
xchg
mov
dec
push
dec
adc
retf
or
or
and
pop
(bad)
mov
pop
jecxz
scas
sub
mov
fsubr
push
retf
ds
outs
div
pop
bound
mov
push
inc
sub
push
(bad)
xchg
cmps
mov
ret
popf
into
stos
mov
ins
lods
push
cmp
xor
xchg
jp
sub
aam
adc
retf
int3
adc
jbe
fdiv
dec
(bad)
jle
jge
stos
xchg
rcr
imul
jp
push
xor
cs
js
mov
push
inc
cli
cmp
rcr
into
ror
cwde
sbb
or
add
arpl
xlat
aaa
jmp
adc
xlat
stc
xchg
ins
dec
mov
cmp
shl
jmp
call
mov
mov
test
push
arpl
std
out
cwde
out
movs
sub
cmp
xchg
mov
xchg
sbb
sbb
or
mov
xor
add
bound
cmps
push
xchg
xor
fs
pop
xlat
mov
jno
cdq
dec
push
dec
push
push
clc
inc
jecxz
mov
ss
ror
retf
in
in
lods
jno
sub
neg
mov
push
pop
retf
daa
pop
pop
fmul
jne
cmps
pop
xchg
rol
das
jg
dec
cwde
pop
sub
mov
and
xlat
popa
add
xor
jns
daa
xchg
sbb
and
inc
call
outs
sahf
icebp
inc
xchg
inc
xchg
rcr
dec
xchg
das
push
and
adc
xor
xor
fild
cwde
mov
adc
dec
push
cmp
out
out
sbb
arpl
mov
adc
xor
push
ret
jno
or
jmp
leave
test
xor
mov
cdq
ret
xchg
gs
add
add
sahf
jmp
dec
jo
cwde
or
stc
(bad)
(bad)
hlt
cwde
lahf
(bad)
fist
pop
dec
jmp
cwde
jbe
fwait
(bad)
cmps
push
nop
xchg
cwde
addr16
mov
cmp
cmp
in
inc
fs
mov
mov
push
lock
pop
sub
mov
mov
sar
cwde
mov
aad
(bad)
shl
neg
imul
jb
add
push
shl
cwde
xor
cmp
cmps
sets
xchg
popa
rol
mov
add
xor
(bad)
in
jle
or
out
add
retf
xchg
daa
fst
add
in
repnz
add
cmp
dec
clc
sbb
popf
pop
test
ins
pop
js
and
sub
(bad)
fcom
pop
call
adc
cs
push
xchg
or
adc
inc
cwde
je
or
cwde
addr16
ins
mov
in
mov
scas
lock
lea
shl
jecxz
std
sar
mov
(bad)
sbb
xchg
cmp
push
sub
pop
stos
not
fidivr
ss
dec
xor
or
xor
out
cld
jle
mov
push
es
xor
push
daa
inc
jmp
cwde
mov
outs
xchg
mov
iret
lock
xchg
mov
sub
lahf
cmp
aad
outs
scas
pusha
mov
and
pop
cld
(bad)
test
mov
inc
in
hlt
loopne
adc
xchg
stos
ror
pop
and
fisttp
cmp
(bad)
sub
jl
cwde
or
push
not
xchg
nop
pop
dec
or
lods
mov
adc
jp
(bad)
cmp
mov
cmp
out
leave
push
es
or
xchg
mov
pop
adc
fs
push
call
retf
scas
mov
cwde
and
mov
add
push
cwde
inc
inc
retf
sbb
jl
cwde
aaa
das
jbe
mov
dec
sub
fcom
cmp
out
sub
mov
not
add
(bad)
call
jecxz
sub
xor
std
fsubr
lods
stos
repnz
data16
xlat
or
jle
mov
cs
sar
lds
scas
das
jp
xchg
arpl
rcl
xchg
cli
xchg
jg
call
loop
cwde
rcr
retf
pop
xor
sub
cmp
test
mov
push
mov
pushf
popf
or
fst
dec
mov
test
cwde
inc
stos
dec
aam
xor
pop
ins
push
clc
sub
jns
inc
xchg
adc
(bad)
rcr
ins
push
dec
shl
pushf
xor
sub
dec
pop
dec
xchg
sub
jg
aam
leave
inc
adc
or
jno
mov
(bad)
and
pusha
pop
arpl
in
rcr
ss
xchg
jnp
icebp
mov
or
test
ss
sbb
push
call
or
gs
jmp
add
sbb
ins
loopne
test
push
js
jo
xchg
dec
ficomp
jl
push
gs
add
inc
dec
cwde
push
test
push
popa
dec
je
mov
mov
shrd
lahf
or
movs
ss
jnp
sbb
fwait
outs
test
push
xchg
dec
inc
push
test
ds
xchg
dec
ins
lods
mov
sbb
cld
enter
or
dec
stos
out
cwde
cmp
iret
shr
bound
sub
scas
and
inc
dec
sub
mov
dec
imul
xchg
arpl
fsubr
test
cwde
sub
add
mov
mov
mov
adc
jecxz
inc
(bad)
xlat
(bad)
sti
sar
sub
loopne
mov
mov
xchg
sub
stos
mov
pop
mov
push
lods
sub
cwde
inc
mov
sti
jno
popa
xchg
dec
arpl
xchg
stos
mov
pop
push
dec
cwde
sub
xchg
pop
cmps
mov
enter
jmp
cld
cwde
inc
and
pop
fcomp
mov
inc
add
repz
shufps
cmp
inc
leave
add
jmp
push
imul
adc
add
mov
mov
mov
xlat
neg
ror
js
add
test
stc
aas
cmp
rol
das
cmp
fwait
sub
cdq
jmp
lahf
stos
sbb
(bad)
sub
in
retf
cwde
mov
fwait
push
gs
leave
loopne
(bad)
stc
retf
jo
cwde
pusha
dec
mov
sub
imul
stos
mov
inc
adc
dec
outs
cmp
in
or
cwde
out
fs
and
ds
ja
(bad)
xchg
cwde
push
inc
into
jbe
xchg
rcl
js
xor
push
adc
xor
sar
cdq
add
and
bound
push
and
call
aas
sub
mov
dec
pop
cwde
jmp
xchg
or
mov
rcl
sbb
cmp
popf
bound
icebp
(bad)
xlat
cmp
neg
pushf
xor
shl
ss
xchg
jns
or
push
lahf
cmps
mov
push
js
mov
dec
add
push
xchg
or
cwde
sti
repnz
mov
adc
sets
fstp
mov
imul
mov
movs
mov
inc
pop
sub
adc
cwde
add
hlt
dec
icebp
or
sub
mov
psubq
xor
js
sar
adc
je
out
mov
addr16
mov
cwde
aam
mov
inc
jnp
inc
je
(bad)
popf
in
mov
iret
sbb
xor
ficomp
sub
fld
lods
or
sbb
sahf
outs
fild
jo
call
pop
sbb
dec
jp
fadd
cwde
mov
jbe
cdq
(bad)
(bad)
(bad)
pop
ds
ins
push
push
xlat
int3
mov
mov
sbb
mov
jmp
add
lahf
jge
fstp
fild
adc
cwde
cmp
and
dec
cwde
pop
out
mov
xchg
je
push
shl
stos
add
sub
sbb
sbb
mov
imul
push
push
xchg
add
inc
add
cwde
push
and
call
push
and
imul
or
scas
imul
jno
call
xchg
pusha
sbb
xor
or
sbb
lahf
mov
sub
aas
rdmsr
add
pop
sub
rcl
sbb
adc
leave
stos
outs
sbb
inc
shl
cmp
addr16
adc
jmp
hlt
movs
cmp
cwde
sub
scas
mov
dec
pusha
mov
(bad)
mov
sub
cmp
ins
out
xchg
xor
mov
sbb
out
imul
cdq
push
loope
sti
push
add
jge
xor
push
sub
loopne
push
cwde
push
ret
pop
(bad)
push
sbb
test
retf
fisub
push
int3
inc
xor
add
hlt
aaa
mov
scas
call
cdq
mov
cwde
pop
cmc
pop
fsubr
and
cmp
push
(bad)
out
mov
add
pop
push
loop
mov
sbb
mov
cwde
adc
xor
pop
dec
push
adc
rol
inc
fcom
fdivr
retf
fisubr
fs
cmc
enter
xor
add
jmp
out
lock
pop
sbb
cdq
pop
sub
fisttp
push
js
or
stos
scas
rol
sbb
cmc
sbb
cmp
ds
cwde
neg
inc
in
test
dec
cwde
push
lods
mov
mov
xor
lahf
xlat
das
loope
cwde
and
cs
dec
jnp
xchg
outs
xchg
pop
jle
push
push
js
mov
jmp
sbb
sbb
in
cli
ret
lds
cwde
ss
pop
xor
repz
dec
in
loop
jmp
aaa
cwde
fs
xor
sti
inc
inc
cwde
mov
inc
rol
data16
pop
push
cwde
imul
cmp
mov
add
iret
pop
dec
test
jp
dec
push
xchg
xor
outs
movs
mov
cwde
fbstp
mov
lahf
pop
mov
aam
leave
mov
inc
scas
xchg
mov
push
loope
push
add
(bad)
or
push
cmp
sbb
cmp
mov
add
test
cmp
fistp
scas
loope
jle
into
cwde
adc
and
pop
jo
cwde
fs
test
repnz
neg
addr16
sub
add
jo
lahf
mov
push
es
jg
sahf
add
xlat
xchg
in
mov
fistp
ss
lea
(bad)
and
in
xchg
in
retf
cmp
test
mov
jae
std
dec
aaa
fcmovu
cmps
cwde
movs
dec
mov
pop
cwde
cmp
fstp
clc
and
push
cwde
mov
je
scas
add
cwde
in
iret
arpl
icebp
int
or
cmp
pushf
mov
cmps
les
fchs
cld
ficomp
out
jnp
inc
dec
pop
mov
jbe
pop
cwde
std
loope
xor
mov
sbb
ja
rcr
mov
mov
das
pop
cwde
xor
ins
sahf
jmp
fadd
jnp
cmp
mov
loopne
movaps
mov
pusha
leave
push
xchg
imul
jle
(bad)
loope
cmp
in
xchg
sub
mov
pop
pop
cmps
out
aas
outs
shl
leave
les
dec
loope
mov
js
add
xor
sub
and
dec
cwde
hlt
dec
or
mov
cmp
fadd
pop
inc
movs
movs
sbb
enter
dec
and
xchg
jecxz
cwde
ja
mov
mov
sub
xchg
add
jmp
push
iret
cwde
jmp
pop
aas
ja
(bad)
out
cwde
std
adc
retf
push
cwde
and
dec
push
fnstcw
icebp
xor
mov
dec
mov
int3
call
mov
aas
inc
push
daa
pop
repz
movs
mov
mov
je
sets
dec
pop
sub
scas
xchg
arpl
in
rcr
and
mov
adc
hlt
mov
jo
mov
in
sbb
mov
cli
fld
mov
loop
adc
inc
mov
sub
repz
daa
add
adc
xor
popa
add
loop
mov
cdq
dec
addr16
mov
test
cwde
(bad)
or
sbb
les
or
pusha
and
cwde
add
mov
pop
lock
mov
arpl
xchg
test
add
mov
jae
test
cwde
aas
xchg
xor
mov
xchg
hlt
add
call
rol
aam
cwde
add
and
neg
imul
outs
jl
mov
xchg
pop
mov
lods
call
jmp
mov
arpl
outs
test
push
je
idiv
stos
inc
repnz
into
out
sbb
xor
fwait
push
out
inc
and
inc
mul
pop
xor
js
sub
aas
add
nop
outs
cwde
mov
clc
mov
cwde
lock
mov
out
jecxz
add
das
call
pop
(bad)
dec
mov
imul
add
and
sbb
and
cwde
mov
sbb
sub
fisubr
push
mov
push
cwde
leave
xor
stos
xchg
mov
rcl
lods
shr
pop
sbb
jns
cmc
and
xchg
pop
pop
es
shr
cmps
mov
(bad)
gs
adc
dec
push
jnp
test
mov
adc
inc
mov
push
and
movs
mov
(bad)
call
xchg
dec
test
ret
sub
dec
fidivr
lods
sbb
sub
lods
jmp
test
adc
cwde
retf
jbe
fidivr
call
ins
add
jl
xor
icebp
sbb
xchg
inc
lock
mov
add
or
dec
cli
lods
jbe
push
(bad)
loop
pop
pop
outs
jecxz
cld
ret
fneni(8087
scas
adc
pop
dec
sub
push
shl
sbb
xchg
jae
cmp
push
mov
adc
add
sub
fadd
enter
imul
movntq
pop
mov
in
iret
xchg
push
fwait
outs
mov
and
jp
fidivr
ficomp
sbb
jno
ins
xchg
push
push
out
cwde
imul
test
sbb
jg
cwde
sub
cwde
inc
adc
or
jb
cwde
or
xchg
leave
pop
sub
jo
popf
mov
call
test
iret
aaa
sub
daa
jne
adc
adc
call
ss
mov
and
adc
cli
pop
cmp
sar
repz
adc
or
test
movs
xchg
ror
xor
jmp
cmp
ret
movs
mov
retf
xor
outs
cmp
(bad)
std
sahf
(bad)
mov
xor
lds
mov
jne
aam
cmps
or
lods
sbb
stos
lea
push
sbb
cwde
push
aas
daa
in
in
sti
or
sub
dec
jbe
xchg
xchg
pop
and
mov
ficomp
(bad)
in
cmp
mov
fwait
pop
push
or
in
push
out
push
(bad)
hlt
div
push
push
jo
scas
lahf
call
dec
xchg
xchg
fsubr
ret
push
rcl
iret
fsubr
loop
and
pop
jecxz
aam
push
imul
dec
cmc
xchg
iret
fsubr
push
add
xchg
cmp
test
lea
imul
inc
dec
fldcw
mov
in
data16
and
out
les
cmp
jp
sbb
clc
sbb
inc
mov
mov
push
loope
xor
sbb
repz
xchg
xchg
outs
jmp
adc
jecxz
cwde
int3
fidivr
pxor
(bad)
sbb
adc
jp
jnp
cwde
outs
pop
test
mov
ins
fmul
push
in
pop
adc
fst
sbb
jp
sub
les
outs
stos
mov
cwde
call
sbb
sbb
sub
dec
mov
cwde
rol
inc
in
je
movs
(bad)
fldenv
xor
cld
adc
out
pop
imul
xor
bound
and
jecxz
fist
out
pusha
cwde
stos
mov
xchg
sbb
inc
pop
cmp
ficom
lahf
jae
cwde
or
adc
pop
test
je
lods
mov
cwde
inc
repnz
jae
fild
xlat
push
jnp
push
cwde
fimul
inc
mov
mov
das
xor
dec
(bad)
cwde
mov
inc
or
sub
(bad)
aaa
xlat
movs
adc
sub
jbe
call
jmp
pop
jo
cmps
aad
mov
xchg
cmc
ret
adc
lea
dec
jne
and
sbb
mov
mov
sbb
js
jnp
rol
je
mov
cmps
in
clc
adc
and
sbb
sub
xchg
mov
push
sbb
sbb
or
cwde
out
out
and
or
mov
(bad)
fsub
loop
sbb
sub
sub
xchg
push
loopne
mov
cmps
sbb
pop
fcom
mov
adc
sub
ja
push
jne
lahf
mov
mov
pop
cmps
sub
adc
mov
xor
or
mov
test
dec
stos
(bad)
pop
aas
(bad)
data16
pop
sub
and
jno
mov
retf
pop
jl
xchg
outs
jp
jo
ret
js
int3
stos
(bad)
into
sbb
cwde
or
fwait
xchg
bound
jmp
cwde
push
adc
retf
cwde
push
and
addr16
pusha
arpl
sub
cwde
fist
and
xchg
sub
fdiv
sub
sub
xchg
cwde
popa
xor
fisub
cwde
pop
push
and
pop
cwde
retf
jb
in
aam
inc
stos
cmp
sbb
repz
xchg
jge
es
and
(bad)
test
mov
in
clc
sub
ficomp
scas
sbb
stc
rol
xchg
jmp
bound
mov
ins
jb
mov
cmp
std
jo
xchg
mov
mov
cwde
ret
fstp
push
pop
inc
loopne
imul
popf
(bad)
adc
and
call
call
es
dec
sbb
call
int3
scas
fs
iret
(bad)
out
enter
sar
mov
rcl
mov
cwde
and
mov
stc
sub
sahf
xchg
cwde
enter
add
xor
mov
jp
dec
(bad)
xchg
cwde
repz
loop
xchg
sbb
sub
cdq
pop
cdq
cmovl
sbb
(bad)
xchg
lds
lea
stos
xchg
cli
adc
inc
and
popf
test
ins
cbw
or
xlat
adc
in
or
in
imul
jmp
clc
imul
in
adc
ds
jl
mov
not
sbb
push
data16
jmp
xor
cwde
sub
in
dec
test
or
jns
jecxz
mov
sbb
lods
clc
cwde
push
or
outs
jl
iret
out
in
sets
inc
xor
ficom
xchg
shr
mov
push
cwde
adc
adc
and
jp
mov
stos
ret
arpl
cmp
and
cwde
scas
in
cmp
sub
xchg
dec
stc
add
cmp
sbb
test
cmp
xchg
sbb
mov
icebp
xchg
jl
cwde
ins
jbe
xchg
lds
xchg
(bad)
scas
dec
mov
xchg
lahf
inc
pop
imul
stos
repnz
cmp
js
enter
cli
into
adc
movs
cmp
add
out
dec
ins
or
jl
cwde
adc
and
or
mov
sub
je
outs
push
adc
xchg
cmc
lock
and
scas
loopne
mov
or
(bad)
in
sub
jmp
scas
cwde
shr
and
sub
jns
mov
ret
test
or
lods
pmulhw
cdq
(bad)
fsubr
icebp
nop
or
cmp
leave
inc
js
dec
int3
clc
jb
(bad)
and
adc
stc
daa
mov
das
cmp
xchg
fs
jns
and
retf
adc
shr
cmps
mov
cmp
js
dec
sub
cmps
or
js
fs
sar
lds
sub
stos
mov
push
ss
gs
arpl
xor
pop
adc
sub
test
mov
mov
loopne
mov
shr
adc
fnsave
imul
sahf
jns
(bad)
dec
cwde
mov
popa
pushf
mov
or
or
add
lock
xchg
mov
jne
pop
sbb
lds
lods
mov
adc
dec
popa
hlt
ins
pop
stc
cs
mov
sub
(bad)
cwde
test
push
retf
mov
adc
push
stc
fisubr
fcomp
or
mov
sbb
ja
push
cs
or
ins
cmps
(bad)
test
jl
pop
cwde
inc
mov
test
xchg
pop
xbegin
mov
adc
jg
jle
xlat
jo
dec
js
in
fucomip
call
add
push
xchg
mov
pop
sahf
xchg
and
ss
xor
scas
xchg
jnp
cmps
mov
fdivp
sbb
push
xchg
pop
(bad)
in
shr
xchg
hlt
(bad)
adc
outs
xor
mov
xchg
jnp
test
retf
add
sbb
dec
pop
xor
stos
cwde
out
aas
ret
out
es
mov
je
xor
cwde
xor
(bad)
xor
mov
mov
ins
in
lods
pop
outs
push
inc
sbb
inc
push
clc
mov
add
xchg
bound
test
jmp
xchg
fsubp
clc
mov
mov
pop
xor
cwde
ins
pop
xchg
js
jbe
cwde
test
mov
and
sub
leave
lods
fdiv
cwde
icebp
arpl
or
mov
push
push
shr
outs
pop
cwde
pop
cmp
test
mov
inc
fldcw
test
cwde
pop
rol
int3
rcl
pop
cwde
test
cmp
dec
test
or
and
or
adc
or
clc
loopne
test
das
mov
and
push
aaa
inc
xchg
loopne
test
mov
mov
lahf
jecxz
mov
add
pop
and
aam
xor
xchg
(bad)
shl
cmp
loop
cmp
jb
xchg
pop
push
sahf
jg
test
das
test
mov
lods
jo
in
push
add
cmp
pop
call
pop
dec
loopne
inc
adc
sub
fimul
xor
sub
cwde
gs
dec
fstp
lods
sbb
popf
mov
rcl
sbb
mov
les
(bad)
stos
inc
aaa
pop
imul
jo
pop
ret
jb
adc
xchg
add
jb
mov
mov
or
inc
jno
ja
lods
in
xchg
test
pop
or
sbb
pop
push
sub
idiv
arpl
and
cwde
mov
push
or
jge
dec
pusha
lahf
sbb
push
mov
int
add
xchg
inc
jbe
aas
(bad)
or
cmp
ss
sbb
dec
push
pop
xor
pop
cmp
das
cmp
cwde
ja
sbb
sahf
jp
dec
dec
push
cwde
xchg
popa
cdq
pop
(bad)
into
or
call
shl
cmp
call
cwde
fldenv
sbb
clc
fadd
mov
das
ins
in
ss
cwde
es
pop
dec
sar
sbb
xchg
fnstsw
int
in
cwde
cmp
ins
dec
xchg
jns
jo
mov
lods
rol
call
add
stc
or
adc
sbb
inc
jo
pop
stos
jno
adc
mov
xor
shr
cs
xchg
dec
xor
pop
clc
pop
cdq
imul
in
pusha
push
cmp
mov
xor
aaa
or
outs
xor
mov
mov
cwde
int
mov
in
push
jmp
ficomp
cwde
sbb
sub
add
cwde
mov
(bad)
adc
cwde
addr16
repz
(bad)
aad
xor
lods
xchg
shr
cmp
cwde
hlt
push
cld
lds
retf
dec
call
and
push
addr16
xchg
mov
mov
clc
gs
stos
into
jmp
jbe
sub
push
mov
push
add
mov
and
or
arpl
cld
bound
sbb
lahf
mov
(bad)
js
and
adc
(bad)
mov
sti
fdivp
lock
xchg
sbb
repnz
push
addr16
adc
aaa
pop
jmp
inc
inc
pop
add
mov
add
mov
mov
pop
push
adc
jecxz
add
rol
push
sbb
pop
or
adc
sbb
out
in
daa
sub
mov
clc
retf
xlat
movs
xchg
ret
shl
retf
adc
xchg
or
inc
fiadd
ins
adc
mov
cmps
dec
cli
enter
fyl2x
and
frstor
std
push
sar
dec
rcr
ins
enter
or
lahf
dec
dec
xor
add
es
cwde
xor
lock
shl
div
pop
jp
dec
out
push
mov
lods
clc
sbb
push
inc
nop
mov
dec
push
in
cwde
fild
xchg
pop
or
je
(bad)
or
out
(bad)
retf
pop
cmp
mov
push
ss
dec
cmp
jne
rcr
mov
mov
sbb
push
xchg
nop
cwde
and
cmps
test
sbb
out
sbb
mov
cwde
loope
call
add
(bad)
xchg
fwait
jo
lods
jle
imul
add
call
jp
inc
inc
sbb
inc
and
cwde
je
sbb
mov
inc
pop
cwde
jg
imul
mov
cwde
sub
cwde
inc
mov
shr
mov
popf
xor
and
jge
push
push
mov
out
sub
popf
cdq
data16
xor
sbb
add
or
cmp
push
xchg
add
aam
enter
add
fidiv
dec
cwde
jp
imul
jns
xchg
lds
loop
xlat
xchg
stc
and
clc
push
fnstenv
cmp
jmp
cwde
pop
mov
scas
or
pushf
arpl
shl
jb
(bad)
pop
xor
mov
call
cld
sub
ja
push
addr16
sbb
sbb
add
cli
clc
and
push
sbb
mov
cld
js
out
add
sbb
inc
push
xchg
leave
lods
test
fidivr
in
jmp
and
xchg
and
dec
rcl
pop
mov
sahf
jecxz
ins
jge
jge
hlt
cwde
out
xor
loopne
cwde
xchg
fcom
and
lahf
aas
cwde
xlat
push
cmp
in
clc
cwde
cmc
(bad)
xor
mov
add
arpl
addr16
sbb
cwde
fnstsw
jle
cwde
jl
push
push
cmc
mov
mov
call
into
scas
and
lods
adc
mov
mov
sbb
cmp
cmp
imul
mov
pop
jge
retf
or
dec
cwde
sub
movs
test
jmp
ds
sub
cmp
data16
imul
xor
adc
stc
ret
push
std
or
sbb
push
movs
inc
mov
and
pop
xchg
mov
mov
cmps
sub
imul
xor
retf
lock
(bad)
scas
mov
lahf
fsubr
jo
inc
loope
loopne
xchg
addr16
mov
test
push
and
popa
jl
xchg
cmp
mov
xchg
cdq
call
fdivr
pop
cmp
(bad)
es
pop
loop
xchg
in
je
push
xchg
adc
mov
jno
leave
popa
das
sar
and
addr16
cmp
mov
mov
fist
and
push
push
sbb
pop
jno
lds
or
inc
push
inc
sti
xchg
loop
lahf
mov
stos
push
sti
xchg
xchg
dec
push
out
sahf
stc
xchg
sub
stc
scas
adc
xchg
and
mov
imul
cwde
inc
jo
movs
mov
mov
xor
push
jb
fcom
into
das
xchg
bound
setns
scas
fimul
dec
or
sbb
xor
rcl
cwde
in
xchg
ds
mov
into
aam
inc
adc
cwde
test
out
ror
jo
(bad)
fisttp
lahf
(bad)
cmp
adc
in
pop
dec
mov
adc
out
push
mov
(bad)
pop
sbb
xor
push
cwde
fs
pop
data16
mov
stos
pop
cwde
mov
in
adc
test
adc
mov
retf
and
hlt
pop
xchg
push
inc
loope
lea
loopne
je
repz
aam
mov
adc
adc
icebp
js
cwde
(bad)
out
rcl
cwde
daa
xor
mov
cwde
mov
sbb
xor
xor
nop
sbb
xchg
pop
pusha
ins
xchg
fild
pop
jne
out
ins
xor
das
jg
aam
enter
jo
cwde
pushf
xor
inc
add
sub
mov
mov
mov
adc
jmp
adc
das
cwde
ds
push
push
popf
out
les
loopne
and
(bad)
je
inc
cwde
outs
cli
sbb
or
jbe
cwde
mov
aam
xchg
fstp
out
xchg
mov
les
push
adc
sbb
add
xchg
inc
popf
in
imul
fdivp
cmp
xor
scas
mov
lahf
shl
pop
les
sub
leave
cmp
loop
js
push
pop
test
(bad)
xchg
clc
jmp
ret
imul
cdq
jl
bound
mov
ret
cmc
int
sbb
or
popf
adc
ret
cwde
js
cmps
shr
clc
mov
mov
dec
xor
iret
fs
test
adc
add
dec
push
pop
es
sub
push
(bad)
aaa
or
cwde
fmul
sbb
xor
loop
lods
xchg
mov
pop
lods
(bad)
rol
stc
stos
in
ret
xor
cwde
dec
addr16
mov
or
ins
push
scas
cmp
jnp
stos
mov
or
mov
mov
test
mov
fbstp
cwde
rcl
movs
ss
clc
mov
shl
test
and
xchg
or
enter
adc
jo
call
adc
ds
inc
sub
cmps
out
enter
pop
mov
xchg
arpl
dec
cwde
mov
xor
cdq
xchg
sub
shl
xchg
cwde
jge
inc
mov
mov
adc
mov
sbb
push
sbb
xchg
lods
out
pop
cwde
xor
push
bound
adc
fs
jns
sar
add
cwde
or
xor
cwde
pop
ss
addr16
aam
leave
jp
nop
add
retf
xor
pop
adc
fwait
nop
lock
cmp
in
vorps
jo
repnz
mov
cli
and
ja
inc
push
inc
jo
call
in
sbb
loopne
fcomp
push
sub
sub
in
iret
jo
cwde
cld
ret
jb
js
jl
pop
push
cmp
jg
jo
xchg
mov
test
paddsw
aaa
inc
bound
xchg
mov
fld
in
cwde
shl
jo
mov
adc
inc
push
sti
ret
out
cvtps2pd
inc
dec
push
fcmovbe
sub
dec
cwde
sub
mov
int3
xchg
xor
pop
test
adc
js
pop
or
arpl
shl
cwde
lods
cmp
xor
aas
or
jge
fdivr
das
call
jmp
retf
cmp
ret
pusha
inc
pop
pop
jp
icebp
sbb
cwde
inc
mov
aas
dec
cwde
imul
cmp
mov
cmp
fisttp
call
out
cld
into
inc
popf
xchg
sbb
pushf
pop
fstp
(bad)
cmp
xchg
sub
mov
pop
nop
lahf
xor
lods
or
pop
and
(bad)
xor
lea
mov
fcomp
cmc
ret
lods
sbb
hlt
cmp
lahf
scas
mov
loopne
sub
or
mov
out
add
std
adc
xchg
pop
or
cwde
call
xor
sbb
adc
xor
mov
(bad)
sbb
loop
mov
out
cdq
cwde
pop
xor
xor
inc
xor
mov
pop
sub
stc
neg
imul
das
cwde
adc
lds
(bad)
stos
(bad)
xchg
ret
hlt
sar
loopne
je
mov
add
pop
imul
cli
pusha
lds
jmp
jg
inc
fsubr
mov
mov
in
call
fs
inc
test
add
sub
push
jnp
lds
stos
mov
hlt
(bad)
(bad)
push
bswap
or
add
sbb
cli
pop
lahf
sbb
scas
int
sub
sub
movs
js
aad
mov
sub
call
jle
jnp
adc
cwde
pop
mov
mov
(bad)
sub
cdq
jl
mov
fdivr
ret
add
adc
stos
fistp
mov
aam
pop
mov
xchg
lock
lds
addr16
push
mul
dec
sbb
and
mov
and
cwde
adc
cmp
jmp
icebp
popf
sub
daa
inc
push
cwde
scas
imul
addr16
push
mov
fs
push
sti
frstpm(287
arpl
daa
xchg
gs
sub
inc
push
and
fadd
sub
sahf
and
cwde
sbb
cmp
jmp
repz
jae
leave
outs
jecxz
jmp
das
imul
retf
fisttp
or
cdq
sub
lods
pop
loopne
mov
push
or
ins
test
test
fwait
lods
mov
pop
adc
sbb
mov
cmp
dec
sbb
das
je
mov
(bad)
mov
int
mov
xchg
ins
cbw
dec
xchg
cli
push
xchg
jb
in
cmp
hlt
lds
retf
sbb
rcl
aaa
sbb
lahf
lea
fidivr
inc
push
cwde
sbb
iret
retf
mov
ins
push
xlat
cmps
push
xchg
rcr
imul
xchg
jge
fsubr
jno
cmp
adc
xor
xchg
sub
mov
pop
bound
aam
cwde
and
push
int
inc
lock
in
js
or
push
inc
xor
popf
in
aas
jle
cwde
mov
dec
push
icebp
or
cdq
cdq
ins
mov
dec
ret
(bad)
pop
lahf
inc
daa
movs
cs
mov
push
or
punpcklwd
lods
pop
push
nop
(bad)
cli
movs
stc
aam
mov
mov
into
cwde
or
push
es
or
aad
out
mov
xor
cwde
lods
mov
aam
inc
int3
ja
sbb
outs
sbb
ins
pop
dec
xchg
gs
outs
sub
idiv
cwde
mov
ror
inc
xchg
loopne
xchg
mul
sbb
cmp
ins
adc
icebp
inc
or
stc
addr16
stos
outs
js
mov
push
aam
(bad)
xlat
int
pushf
div
jae
mov
dec
mov
pop
daa
push
lea
mov
rcr
pusha
movs
xchg
mov
clc
push
shl
out
cli
sbb
xchg
(bad)
push
cld
xor
mul
push
int3
adc
cwde
dec
add
add
jae
loope
imul
xchg
loopne
cs
test
shl
fistp
push
sbb
inc
xor
lods
xor
push
les
xchg
cmps
out
and
push
push
or
xchg
dec
out
sti
jp
mov
inc
sub
cmps
mov
mov
or
pop
sub
out
jmp
mov
and
js
rcr
icebp
lahf
das
adc
test
pop
add
cmp
jns
sub
jb
pop
cdq
jl
mov
fwait
cmp
cwde
pop
sub
inc
pop
jne
push
call
or
mov
pop
xor
or
inc
in
sub
cwde
jp
fwait
ins
jg
adc
and
cmp
in
in
xor
fdiv
or
and
retf
xchg
pushf
ret
and
js
pop
rcr
stc
xchg
mov
cwde
in
sub
fsub
repnz
test
push
ret
adc
xor
lock
sbb
xor
(bad)
lods
mov
xchg
shl
mov
shl
xor
fmul
sbb
in
adc
cwde
or
cmps
xor
std
cwde
out
icebp
(bad)
sbb
mov
push
sub
cmp
dec
xchg
sbb
loopne
cwde
and
adc
test
int3
loopne
sub
add
movs
mov
rcl
jge
cmc
mov
pop
scas
mov
in
mov
pop
mov
push
sbb
clc
pushf
stos
mov
pop
inc
ret
clc
repz
icebp
pop
das
jmp
ret
and
adc
ret
rol
nop
je
and
and
lds
mov
test
adc
mov
cmps
popf
pusha
bound
movs
dec
cwde
pop
cli
rol
cdq
sti
addr16
xchg
adc
cmp
cwde
jae
mov
popf
xor
lea
fs
jg
mov
js
outs
push
cmp
das
inc
pop
mov
pop
cwde
dec
popa
stc
fisub
add
mov
xchg
mov
adc
jae
lods
fwait
imul
xor
test
inc
je
pop
pop
(bad)
lds
sti
imul
xor
(bad)
sbb
mov
icebp
fild
into
jge
imul
adc
(bad)
cmps
hlt
pop
add
cwde
loop
or
jmp
add
fldz
cmc
loopne
ret
cwde
and
sbb
scas
cs
clc
xor
and
test
cmp
push
bound
push
add
nop
shl
xchg
xchg
pop
shr
cs
retf
dec
or
jo
xchg
into
xchg
inc
xlat
movs
out
cmc
movs
(bad)
mov
mov
and
push
test
push
mov
pop
clc
retf
shl
push
inc
dec
ret
popf
(bad)
call
fs
sub
mov
aad
pop
xor
xchg
mov
push
hlt
lock
loopne
push
fs
frstor
imul
in
loope
xchg
and
jle
xor
fstp
stos
mov
popa
xchg
ja
ins
cwde
sub
push
call
sub
xchg
mov
test
(bad)
cwde
cmps
adc
push
std
sbb
add
jno
cdq
fimul
or
daa
dec
pop
das
xor
adc
jno
and
push
mov
mov
dec
mov
mov
and
jne
pop
lods
lods
dec
rcr
mov
mov
(bad)
mov
jo
and
stc
in
fdiv
xchg
lods
push
std
cwde
inc
push
sbb
icebp
movs
loop
lods
dec
add
loop
sub
inc
jbe
test
dec
data16
or
inc
cwde
add
add
mov
movs
inc
push
mov
nop
lahf
xchg
retf
rcl
(bad)
test
stos
loope
in
mov
inc
ins
cmp
push
push
fdiv
das
or
retf
(bad)
test
pop
lahf
rcl
jmp
popa
xor
xchg
nop
and
pop
outs
xchg
jbe
xchg
jl
or
movs
lock
fstp
sahf
add
xchg
ja
inc
das
dec
sub
(bad)
cwde
adc
dec
or
test
aas
call
sbb
xor
(bad)
es
inc
pop
outs
xor
xchg
jne
and
xchg
les
ins
fsub
xchg
(bad)
lods
xchg
call
inc
mov
and
popf
fst
popf
cmp
push
mov
add
sub
inc
mov
and
fld
adc
dec
dec
pop
mov
das
push
gs
mov
sub
mov
push
sbb
leave
sub
mov
(bad)
sub
add
mov
xchg
int3
xor
push
inc
inc
lods
add
xchg
inc
push
in
xor
xchg
jns
into
cwde
out
or
es
or
sti
jecxz
mov
icebp
mov
push
pop
jl
jmp
push
cwde
fsub
mov
cmps
cmp
mov
pop
cli
jecxz
mov
js
popa
or
xor
cmp
xor
dec
xor
call
sbb
push
xchg
inc
movs
test
xor
test
mov
sub
mov
int3
add
dec
and
das
sbb
inc
adc
outs
sub
adc
into
sub
scas
mov
cwde
cmp
ds
push
inc
pop
jae
cmp
cs
pusha
xchg
lahf
mov
xor
and
inc
push
data16
mov
mov
loope
adc
out
das
inc
inc
sub
mov
add
sub
adc
pop
fidivr
xorps
call
mov
ins
jl
sbb
(bad)
mov
fsubrp
sub
pop
inc
pop
push
and
jne
rcr
sbb
pop
arpl
lods
mov
push
call
mov
leave
cmp
sbb
imul
xlat
cmp
scas
cmp
in
sub
pop
ss
push
shl
mov
daa
push
out
les
test
push
in
jmp
xchg
iret
mov
cli
push
fldcw
push
ja
jne
or
ins
dec
mov
pop
sbb
sub
shl
sti
repz
fisub
mov
mov
aaa
shl
push
xchg
push
sub
cmc
sbb
inc
push
cmp
loop
xor
call
or
adc
repz
or
popf
bswap
xor
into
mov
popf
sbb
xchg
xchg
daa
loop
or
movs
add
mov
cwde
(bad)
aaa
pop
bound
out
dec
loopne
cmps
inc
rcl
dec
adc
stc
rcr
pop
inc
pusha
jb
or
cld
shl
xchg
fcmove
and
or
push
lahf
xor
pop
and
nop
ficomp
test
inc
jno
cmp
mov
lahf
sbb
xchg
add
gs
add
pcmpgtw
mov
retf
xlat
add
cmp
cwde
add
inc
push
ins
jae
mov
test
pushf
sub
push
test
adc
into
dec
inc
push
dec
sar
push
scas
xor
jne
pop
in
push
daa
xchg
mov
jae
mov
jo
frstor
jecxz
xchg
pop
dec
call
fcom
iret
neg
sbb
int3
jg
test
scas
sub
inc
dec
adc
es
push
xchg
mov
cwde
mov
xor
cwde
fcomp
xchg
ror
(bad)
popa
lahf
jge
rol
ror
xchg
ret
(bad)
and
lds
mov
cwde
jbe
jp
(bad)
mov
cmps
push
add
jecxz
nop
dec
push
sbb
mov
cwde
or
add
scas
lods
mov
xor
shl
lods
js
jno
cwde
(bad)
in
fild
mov
ja
int3
cwde
pop
in
cld
(bad)
pop
and
jae
out
in
jmp
cwde
std
inc
pop
ja
rcr
xchg
push
leave
xchg
hlt
rcl
xchg
and
jns
test
popf
mov
inc
pop
cwde
inc
adc
jle
mov
pusha
push
lods
mov
ud1
test
loopne
inc
in
mov
jmp
repnz
or
gs
and
cs
movq
xor
(bad)
mov
ret
cwde
sub
add
mov
hlt
or
xlat
(bad)
retf
mov
xadd
das
mov
repz
mov
out
stc
and
adc
or
jne
xor
xor
cmp
xor
jno
fadd
adc
jp
in
dec
jo
call
sbb
pushf
cwde
xor
dec
aaa
movs
jae
inc
add
mov
cmc
(bad)
or
pop
jb
cwde
stc
out
xor
cs
mov
mov
mov
dec
push
xchg
xchg
xchg
arpl
fsub
call
or
sub
sbb
sbb
xchg
and
pop
fs
cwde
inc
into
arpl
sub
and
inc
clc
aam
sbb
jmp
cmp
xchg
movs
int3
scas
out
cmc
or
cmp
dec
sub
dec
sub
mov
cmp
push
xchg
and
adc
ret
mov
stos
int3
lods
inc
mov
pop
xchg
or
popa
pop
push
cwde
sar
sbb
sub
jns
xchg
icebp
test
push
sbb
repnz
mov
cwde
dec
dec
push
dec
scas
mov
shr
inc
(bad)
das
xchg
xor
or
ror
cwde
inc
jecxz
and
xchg
add
out
add
dec
pop
shr
test
adc
lods
jmp
(bad)
sbb
popf
jg
fsubr
ja
xchg
pushf
je
push
sub
mov
adc
sbb
inc
xor
jns
stos
dec
call
mov
(bad)
retf
cwde
shl
xlat
scas
mov
push
or
jg
pop
lods
adc
cwde
jge
sub
call
pop
push
pop
popa
cwde
ja
mov
scas
mov
ret
cmp
mov
xchg
aam
fmul
(bad)
dec
call
mov
xchg
(bad)
cli
js
inc
cwde
push
lods
test
loopne
and
mov
ret
fisubr
mov
cmp
mov
(bad)
jmp
cmp
or
loop
pop
mov
xor
jmp
fisttp
push
inc
mov
mov
sahf
xchg
out
div
dec
jo
cdq
push
sbb
adc
test
ds
add
dec
ins
cmp
out
mov
mov
(bad)
jmp
mov
jnp
fs
jne
outs
mov
mov
ffree
scas
loop
loope
add
or
and
cwde
pop
mov
in
ret
hlt
cmp
lahf
sbb
test
xchg
or
xchg
in
mov
outs
movs
jecxz
inc
or
(bad)
repnz
rol
dec
push
mov
cmp
jno
jnp
js
and
in
mov
hlt
clc
ja
inc
int3
dec
adc
jnp
jl
nop
cld
les
sbb
popf
sbb
inc
mov
pushf
mov
jbe
rcr
or
sbb
aam
cld
sbb
cmp
daa
push
scas
mov
sahf
data16
(bad)
leave
loopne
lock
icebp
daa
pushf
sbb
out
fsub
push
adc
push
or
cmp
rcl
mov
ss
fcom
inc
add
fsub
pushf
mov
cmp
pop
adc
and
pop
jns
fstp
icebp
adc
cmp
mov
out
xchg
into
jo
inc
test
pushf
and
(bad)
mov
ror
pop
or
xor
ret
mov
mov
mov
pop
adc
ret
xchg
jno
pop
inc
push
lods
les
xchg
push
popa
dec
lea
(bad)
jecxz
xor
mov
repz
xchg
or
les
mov
mov
aaa
xchg
cmps
mov
add
jb
je
mov
mov
mov
add
push
push
xchg
mov
jle
push
stc
fwait
or
out
sub
pop
xchg
xchg
add
aas
adc
cld
call
or
sahf
outs
xchg
push
mov
ins
ins
sbb
xchg
bound
mov
sbb
push
xchg
mov
push
xchg
outs
das
xor
mov
xor
push
and
xchg
inc
pop
cmp
pop
aaa
fs
or
sti
sbb
or
cwde
ret
sahf
call
aas
xchg
arpl
jbe
cwde
ins
int3
or
mov
scas
imul
test
mov
xor
mov
fs
and
or
sbb
loop
std
mov
add
mov
loopne
push
test
jo
cwde
addr16
mov
cmp
adc
lods
adc
shr
dec
jbe
dec
and
(bad)
add
dec
mov
jmp
add
out
push
ins
and
push
dec
cs
clc
mov
cmp
arpl
inc
xlat
jns
cld
leave
xchg
(bad)
clc
cmp
inc
sub
mov
push
es
pop
retf
mov
fdecstp
jo
scas
retf
aad
xchg
jle
jmp
sub
cmp
jl
sbb
addr16
scas
push
adc
stc
pop
sbb
jmp
dec
out
sub
movs
xchg
das
xchg
sar
xor
lds
(bad)
cld
xchg
xchg
(bad)
sti
sbb
mov
pop
mov
std
cwde
adc
xchg
lds
cmc
cwde
movs
aaa
dec
mov
fwait
jp
xchg
(bad)
lahf
sbb
pop
dec
arpl
stc
cwde
aam
jo
loope
pusha
loop
cld
sub
mov
cmp
lods
cmp
aad
dec
jne
dec
pusha
and
dec
cwde
fdivrp
enter
inc
pop
lahf
mov
call
outs
cwde
(bad)
sub
fwait
mov
adc
push
xor
mov
sbb
adc
pop
call
jecxz
fist
xor
fdivr
sti
aam
cwde
loope
out
mov
mov
adc
xor
sti
xchg
imul
in
movs
or
aas
adc
xor
push
les
or
mov
ins
mov
inc
jbe
or
gs
jmp
dec
cwde
mov
mov
mov
push
xchg
gs
inc
jmp
jo
cwde
pop
lea
enter
in
add
call
mov
pop
fstp
(bad)
out
jnp
arpl
les
mov
(bad)
into
mov
push
inc
sub
pop
test
mov
adc
cmp
mov
nop
mov
add
(bad)
(bad)
mov
pusha
pop
sub
sub
xchg
sbb
sub
dec
jge
pop
call
push
mov
ret
pop
adc
int3
cwde
fiadd
data16
mov
add
cwde
imul
in
adc
xor
mov
sub
clc
dec
arpl
push
cli
xchg
mov
mov
xlat
loopne
cmp
int
sub
pushf
int3
ins
icebp
cwde
jmp
sbb
adc
int3
adc
and
cmp
call
mov
call
pop
loop
xchg
movs
mov
sub
adc
pop
mov
or
sub
popa
jno
mov
jge
cwde
or
ins
in
cwde
(bad)
fdivp
push
ja
outs
leave
cmp
inc
xchg
push
cs
fyl2x
imul
arpl
std
xchg
sbb
dec
in
test
cmps
adc
jno
fstp
sub
aad
cwde
mov
test
cmp
in
popf
ret
inc
jmp
pusha
sub
xchg
fs
mov
xchg
mov
pop
xor
xchg
or
dec
fwait
clc
mov
cwde
xlat
scas
icebp
jmp
and
fisubr
js
cmp
sahf
jge
loopne
test
outs
shl
cwde
popa
ja
bound
jp
xchg
gs
cmp
mov
push
xchg
sbb
dec
cwde
sbb
sti
ret
(bad)
les
inc
nop
pop
in
fadd
adc
test
mov
jo
sbb
jp
(bad)
sub
into
push
(bad)
cwde
adc
jb
rol
mov
das
test
push
sub
jl
push
mov
jb
xor
gs
rcl
shr
push
out
mov
dec
jl
push
cmp
jbe
into
sbb
cwde
scas
pop
and
bound
addr16
test
ret
js
push
mov
dec
(bad)
retf
xchg
inc
jbe
ins
cmp
mov
repz
push
xchg
mov
test
inc
pop
xchg
mov
std
inc
lahf
js
shl
pop
ret
in
fidiv
or
(bad)
jne
and
fldenv
push
adc
add
addr16
call
arpl
retf
mov
cwde
add
test
cwde
inc
pop
aaa
sbb
or
push
pop
xor
stos
cmp
sbb
push
cwde
sub
cdq
sbb
add
inc
and
int
leave
out
adc
repz
dec
xchg
push
dec
sub
xchg
push
jecxz
inc
cmp
std
mov
call
aaa
mov
xchg
or
int3
ret
adc
pop
mov
call
ret
js
les
pop
shr
jge
lds
mov
mov
and
pushf
in
mov
pop
out
cwde
xor
imul
mov
cmp
call
(bad)
shl
mov
icebp
(bad)
pop
sub
xchg
ja
xchg
mov
clc
les
xchg
in
and
inc
cmp
cwde
xor
pop
and
jnp
popa
pop
xchg
in
call
adc
test
mov
xchg
icebp
cmp
iret
(bad)
adc
adc
push
push
inc
xchg
adc
(bad)
xchg
test
or
imul
xchg
mov
fwait
jo
out
mov
jl
fcom
es
call
loope
sbb
add
and
cs
mov
sub
sub
enter
cwde
dec
lock
mov
scas
cmp
sbb
dec
fistp
and
cwde
jb
inc
push
scas
lea
popf
stos
mov
daa
in
xchg
mov
xor
jmp
mov
fadd
vmovhps
cld
int
mov
mov
mov
int3
aad
push
xchg
ins
fs
adc
cmp
pop
cmp
jne
dec
push
rcl
(bad)
sahf
fdivr
mov
cwde
sub
test
fdiv
sub
or
xor
add
xchg
and
out
jmp
xchg
push
sbb
in
cmp
adc
cwde
jmp
(bad)
push
or
stos
jp
xchg
dec
test
push
jmp
cmp
pop
dec
pusha
cwde
add
sbb
outs
push
fimul
mov
mov
jmp
pop
mov
mov
es
add
push
cmp
or
mov
mov
mov
cmp
in
add
cmp
aam
adc
xor
call
out
out
or
push
cs
fwait
push
retf
xchg
arpl
push
lea
jp
push
cdq
and
pop
sbb
jno
dec
mov
jns
cs
out
sbb
add
sbb
xchg
or
jecxz
sbb
int
add
test
test
mov
xchg
fld
ss
into
or
push
cld
sub
cdq
sbb
push
dec
(bad)
mov
xchg
std
inc
gs
xor
push
shl
sub
and
movs
jo
ds
cwde
jno
imul
cwde
hlt
mov
dec
push
push
inc
xor
dec
xchg
pop
test
fs
mov
imul
sbb
in
retf
xlat
mov
cmps
enter
pop
mov
imul
test
cwde
jle
sub
js
fstp
ins
adc
lahf
movs
jne
cwde
mov
and
xchg
loope
or
push
mov
xor
mov
out
xchg
or
dec
rcr
or
imul
aaa
ret
int3
pop
cwde
test
xchg
push
pushf
js
imul
(bad)
and
or
pop
stc
sub
lock
repnz
mov
mov
js
xor
sbb
pop
mov
loop
xor
dec
push
dec
mov
pop
sub
stos
lahf
and
leave
pop
push
and
pop
add
xchg
xor
jmp
lea
cwde
fldcw
cwde
out
cmps
ret
mov
or
mov
cwde
hlt
fdivr
(bad)
cmp
adc
fiadd
dec
cli
push
xchg
gs
popa
stos
shl
iret
add
pop
xchg
ss
add
mov
ins
cwde
push
sub
jl
cwde
pushf
ins
test
lock
fs
xchg
push
mov
pop
jp
or
jnp
imul
xor
nop
xchg
xchg
fmul
stos
mov
cwde
sbb
mov
mov
cld
cmp
adc
clc
cmps
cmps
pop
xchg
lds
or
out
mov
cwde
xchg
dec
push
push
jo
lods
cwde
(bad)
sti
fcmovnbe
mov
aas
fnstenv
jmp
(bad)
fstp
fisub
jle
sbb
sub
int3
jmp
xchg
stc
fstp
fistp
jle
mov
movs
inc
pop
dec
out
pop
mov
xchg
and
es
addr16
pop
xor
cwde
jnp
or
add
jo
out
mov
pushf
mov
cld
enter
add
stos
push
add
mov
pusha
push
sub
(bad)
xlat
cwde
(bad)
mov
sub
stc
and
jb
xchg
mov
(bad)
scas
stos
mov
cmp
and
and
or
cwde
cli
leave
(bad)
popa
das
jb
clc
int3
mov
cwde
sbb
cwde
dec
adc
call
push
cmp
repnz
shl
mov
pop
cmc
pop
(bad)
jae
mov
in
pusha
arpl
sbb
loope
pop
mov
out
sub
lahf
mov
clc
lock
fwait
jns
stc
xchg
lahf
call
jo
jo
cwde
pop
and
jb
push
jbe
loopne
pop
cwde
ja
pop
cmp
aas
retf
xchg
loope
daa
ins
push
nop
pusha
cmp
das
into
inc
push
inc
cdq
aaa
mov
pop
mov
nop
xchg
test
inc
xor
mov
push
mov
xchg
cmp
test
xchg
mov
shl
jp
sbb
pop
pop
sub
cwde
in
and
dec
ja
add
out
xor
data16
xchg
lahf
call
aaa
imul
faddp
fld
cld
repz
icebp
pop
in
js
and
push
ret
jbe
cmp
test
pop
scas
cwde
adc
cmp
jmp
test
outs
pop
test
dec
nop
pop
xchg
jnp
loop
pinsrw
xchg
push
pop
dec
(bad)
fadd
nop
ret
xchg
cwde
dec
mov
scas
mov
icebp
cwde
or
cmp
lea
jbe
mov
int3
pop
daa
or
push
xchg
dec
dec
xchg
xchg
add
push
jmp
mov
mov
in
sbb
inc
inc
fcomp
imul
cwde
gs
enter
mov
cmps
ret
js
push
retf
jl
xchg
xor
dec
push
mov
inc
cmp
xchg
call
fnstenv
popf
frstor
jno
ret
lods
add
dec
je
xchg
push
xchg
mov
(bad)
pop
dec
ins
mov
ficom
cmp
rcl
fcmovne
mov
jmp
cwde
fnstenv
push
nop
cmp
rcl
xchg
mov
int3
jecxz
pop
or
repnz
nop
adc
push
in
mov
pop
es
push
mov
in
push
dec
or
jmp
xor
push
mov
add
in
int3
fsubr
(bad)
cld
or
jo
sub
imul
mov
ret
cwde
es
mov
cmp
mov
push
or
and
ja
mov
or
mov
cwde
pop
sbb
push
xor
cwde
in
mov
jae
cwde
repnz
es
mov
mov
repnz
pop
in
out
aas
pop
and
(bad)
fxch
stos
shl
cmc
xchg
and
jb
and
ja
jmp
cli
into
rcr
cwde
or
in
push
into
dec
sbb
(bad)
out
mov
inc
call
cmp
xchg
pushf
jo
sub
pop
add
test
test
push
outs
adc
addr16
jle
(bad)
shl
add
movs
test
jnp
jbe
dec
mov
dec
xchg
out
movs
aad
into
adc
xlat
in
and
loope
cmp
pop
dec
or
pop
int3
test
mov
push
out
js
sbb
lods
shr
pop
sbb
ins
xchg
xor
call
fucomi
js
sbb
mov
ss
stc
bound
mov
into
push
test
sbb
jmp
or
push
cmps
aad
(bad)
inc
fnsave
add
push
dec
lahf
cdq
jge
and
xor
pop
jno
push
loope
mov
xchg
jg
jp
and
leave
cld
shr
inc
out
push
pop
mul
xchg
cmps
pop
mov
jg
outs
lods
sub
pop
cs
ror
add
push
mov
rcl
pop
and
and
out
dec
fadd
push
sub
cmps
cwde
jmp
xor
and
sub
test
xchg
retf
out
emms
inc
xchg
cwde
jge
xchg
sahf
addr16
ds
test
cld
das
div
sub
pop
pop
cli
mov
xchg
pop
out
call
arpl
rcr
jmp
pusha
push
adc
cdq
cmp
push
xor
jnp
adc
sahf
jecxz
adc
repz
pop
and
pop
sub
add
arpl
(bad)
lock
cwde
jmp
fldpi
mov
xor
xchg
mov
neg
cwde
jns
(bad)
sti
(bad)
cwde
lock
sub
mov
test
imul
and
out
xchg
aas
cwde
in
add
push
(bad)
scas
je
add
pushf
repz
lahf
pop
mov
fucomp
cmp
sub
js
dec
mov
sbb
ins
xchg
mov
in
cwde
inc
jmp
in
cwde
sbb
and
arpl
add
in
adc
push
sbb
and
dec
add
not
stc
adc
cwde
imul
ins
loop
cwde
cmp
std
int
in
adc
or
idiv
jne
fcom
xchg
stos
or
sbb
(bad)
into
jmp
aam
jno
data16
aas
(bad)
mov
into
xchg
adc
call
rcr
cwde
jb
lods
in
retf
xor
sbb
repz
add
inc
xchg
(bad)
sbb
and
cmp
cli
aas
call
xchg
pop
jne
jo
je
pusha
cwde
sub
cmps
jle
lods
sbb
or
or
sbb
add
xchg
dec
push
push
scas
push
dec
pop
push
retf
clc
xchg
neg
xor
lahf
mov
push
or
cmp
popf
in
aam
test
cmps
or
jecxz
(bad)
test
jo
xchg
fdivr
outs
mov
call
iret
lea
(bad)
call
adc
lahf
stc
rol
call
jmp
mov
jle
push
ret
fdivr
fisub
fadd
xchg
xchg
mov
mov
aas
cmp
push
fdivr
cli
jne
aaa
imul
iret
cli
xchg
test
sti
xor
cmp
sub
inc
xchg
sub
sbb
xor
enter
in
std
(bad)
sub
cwde
ret
dec
push
pusha
loop
int
fcomp
or
push
push
adc
xor
pcmpgtd
bound
sub
(bad)
mov
mov
xor
push
xchg
in
retf
sub
ins
jne
mov
jnp
lea
mov
sbb
ret
ss
push
(bad)
loop
push
daa
mov
xchg
push
out
sub
inc
rcr
neg
mov
mov
leave
loopne
stos
outs
inc
popa
js
dec
push
cwde
xchg
xchg
jae
lods
(bad)
pop
pop
call
shl
xchg
lock
mov
(bad)
neg
pop
dec
xchg
jle
jne
jmp
(bad)
outs
push
imul
cld
add
xor
cwde
ds
sahf
jbe
pop
jne
dec
push
cmp
je
sbb
sbb
loopne
xchg
jae
in
mov
xor
pop
js
out
mov
hlt
xchg
ficomp
inc
rcl
jb
mov
mov
xchg
aad
mov
fcom
ins
loop
xor
or
lea
fdivr
rcl
aaa
sbb
jbe
xchg
inc
inc
mov
mov
add
mov
push
(bad)
and
mov
scas
mov
dec
out
cwde
fistp
xchg
dec
fadd
int3
mov
xor
xchg
jae
test
in
mov
sub
int
test
mov
cwde
ret
ror
aas
mov
xchg
adc
mov
mov
pusha
xor
mov
cwde
scas
mov
iret
adc
push
ja
adc
mov
(bad)
(bad)
mov
aad
dec
pop
pop
lock
pop
inc
cmp
dec
test
pusha
inc
faddp
xchg
repnz
retf
(bad)
lods
rcl
mov
inc
sti
retf
ficomp
sub
into
push
cwde
xchg
jg
mov
(bad)
jmp
mov
or
mov
ret
fadd
push
sbb
rcl
jmp
pop
daa
sbb
int3
cwde
test
xchg
pop
int
xchg
adc
scas
gs
mov
mov
adc
dec
pop
jle
loopne
and
imul
mov
jp
mov
js
mov
mov
int3
cmp
mov
jb
movs
mov
or
pop
push
imul
dec
js
add
sbb
repnz
test
push
movs
add
mov
mov
fsub
ffreep
clc
(bad)
push
jp
fcomp
xchg
das
inc
mov
xchg
mov
lds
fdiv
imul
pop
lea
sar
out
xchg
in
jno
cmp
jl
xchg
xchg
pop
fdiv
dec
arpl
or
mov
sbb
cwde
sbb
dec
retf
mov
(bad)
iret
nop
shr
xchg
jmp
jp
imul
cwde
or
mov
out
(bad)
jmp
dec
loope
or
mov
cmp
mov
mov
repnz
ret
lahf
stos
cwde
xchg
shl
ret
pop
call
aas
xor
sub
fiadd
outs
cwde
ret
scas
test
sbb
inc
push
test
push
pushf
popa
mov
shl
cwde
lods
imul
ror
push
test
push
cmp
xchg
lds
adc
add
dec
leave
in
cmp
xchg
dec
pop
inc
pop
push
jns
sub
push
jns
adc
jmp
call
push
ins
js
mov
cli
xchg
mov
adc
xchg
popf
mov
cld
not
inc
push
mov
mov
xchg
pop
mov
dec
pop
xchg
push
ret
or
mov
jae
cwde
(bad)
jnp
shr
push
jb
inc
imul
sbb
cwde
xchg
test
popa
das
call
lods
imul
mov
xlat
mov
pop
add
adc
ret
leave
mov
xchg
dec
std
sub
xor
cli
test
jg
arpl
xchg
xchg
mov
pop
xchg
sbb
add
cwde
pop
jmp
mov
cwde
nop
dec
hlt
dec
fild
and
sub
in
enter
cwde
cmps
jl
cli
fidivr
lea
(bad)
cwde
loope
mov
retf
aaa
sub
scas
pop
fwait
mov
cmp
pop
and
cmps
sbb
scas
sbb
adc
cwde
ins
jl
inc
pop
in
int3
cmp
and
retf
clc
add
pop
movs
push
(bad)
test
(bad)
inc
movs
(bad)
sbb
test
adc
and
fwait
std
ror
rcl
ret
adc
sub
mov
mov
xchg
mov
jmp
retf
lods
fstp
mov
popaw
push
mov
push
iret
cmps
sbb
iret
jg
add
rcl
clc
mov
mov
and
clc
mov
dec
iret
pop
inc
popf
sub
sub
cmp
cmps
pop
add
sar
push
popa
mov
dec
imul
lahf
stos
loopne
(bad)
dec
cmp
out
and
aas
push
pusha
aaa
push
cwde
jmp
cs
ficomp
pop
push
clc
push
mov
sub
scas
add
adc
outs
dec
mov
call
xor
int
or
call
shr
xchg
js
rol
jp
cs
sahf
pop
xchg
rol
sub
adc
mov
cmp
adc
jle
xor
mov
call
mov
arpl
xchg
rcl
jo
loope
mov
jge
sar
sub
mov
mov
cwde
outs
fld
dec
ja
stos
pop
pusha
xor
test
scas
call
pop
cmp
cmp
sbb
jecxz
dec
push
aas
std
xchg
pop
cwde
mov
arpl
xchg
or
mov
and
jmp
sbb
lea
xlat
cmps
and
mov
add
mov
mov
cld
adc
xchg
or
sbb
es
ins
and
dec
jp
setno
out
std
cld
fstp
(bad)
fsubr
xchg
xchg
inc
push
xchg
and
add
xor
xor
hlt
stc
xor
dec
sub
call
or
clc
sbb
xchg
inc
call
xchg
cli
adc
cmp
pop
dec
mov
or
xchg
adc
test
pop
daa
pop
mov
push
cwde
jecxz
push
pop
ins
mov
xchg
ret
xchg
outs
lea
inc
jbe
ja
xchg
mov
in
xchg
jae
imul
lahf
xchg
jl
into
shl
loop
je
iret
xchg
sbb
movs
sar
inc
adc
xor
lds
sbb
push
loop
mov
jmp
xor
mov
mov
mov
jmp
shl
cwde
dec
nop
bound
adc
fiadd
into
fst
mov
xchg
retf
push
loop
stc
adc
in
cmp
xchg
mov
pop
stc
inc
imul
scas
(bad)
repnz
js
cmp
inc
xchg
cmps
mov
fldenv
jo
out
je
dec
pusha
js
cmp
ds
fsub
repz
xchg
icebp
jmp
sbb
pop
cli
scas
in
dec
dec
sub
adc
mov
xchg
sbb
dec
fwait
mov
jb
push
outs
xchg
call
push
in
(bad)
xchg
xchg
and
xor
push
or
ja
pop
outs
mov
inc
fnstsw
cmp
sbb
jg
or
adc
dec
cmps
jg
fcomp
mov
sti
sbb
hlt
jmp
and
xchg
add
mov
test
dec
xchg
hlt
and
inc
sar
mov
cmc
mov
std
rol
jae
mov
push
pop
pop
cmp
js
push
cwde
pop
mov
arpl
cwde
mov
popf
or
vpaddw
dec
sub
cwde
leave
xchg
add
inc
ret
call
cmc
loopne
test
mov
movs
fnsave
ret
je
cwde
cmp
mov
sbb
jnp
gs
stos
sub
leave
clc
mov
pop
cwde
dec
inc
sbb
popa
js
ficomp
and
lahf
fist
dec
ret
shr
xchg
dec
push
addr16
stos
mov
or
test
sahf
in
gs
push
adc
xor
adc
and
cmp
add
sub
fcomp
jecxz
mov
push
ins
or
pop
sbb
cwde
mov
push
sbb
mov
adc
ficom
ret
pop
cs
cwde
push
fucomi
dec
int
jns
shl
and
jbe
lock
sbb
rcr
stc
sub
arpl
nop
sahf
into
addr16
icebp
test
push
mov
mov
xchg
je
aam
sbb
jb
je
pop
jl
bound
pop
add
dec
sti
add
mov
(bad)
xor
stc
cmp
dec
add
mov
sbb
jns
loope
aam
fsubr
ror
fmul
jbe
push
out
rcl
xor
(bad)
xlat
cwde
test
sub
cmp
out
js
dec
push
xchg
dec
push
xor
arpl
clc
sub
jbe
or
xor
mov
xchg
mov
xchg
sbb
clc
out
xchg
xchg
popa
mov
fld
inc
push
xchg
sbb
xor
cwde
movs
or
cwde
test
lea
fxch
js
inc
mov
fiadd
movzx
mov
cwde
stos
push
and
jno
or
xchg
xchg
jnp
push
arpl
jp
jmp
clc
aas
cmp
xchg
push
aaa
add
pop
cmp
mov
cwde
inc
imul
or
mov
fdivr
(bad)
lods
sub
dec
jmp
je
mov
push
pop
adc
outs
cmp
sbb
sar
sub
js
jmp
add
ins
pop
sbb
lahf
mov
cmp
das
inc
mov
sbb
mov
jno
sub
pop
mov
xchg
(bad)
clc
jbe
xor
out
adc
sub
cmp
popa
clc
jmp
aad
rcl
mov
(bad)
fdivr
sbb
cwde
push
sub
xchg
or
push
out
int3
xchg
out
dec
mov
or
push
in
repz
sbb
jmp
jae
ret
cwde
es
test
lods
stos
xchg
push
jmp
sbb
cwde
sbb
cmp
rol
push
fld
xlat
sti
xchg
mov
mov
cli
out
mul
push
cwde
add
jecxz
push
outs
xchg
dec
pop
fsub
(bad)
jne
pop
sub
push
sbb
in
mov
repnz
mov
or
cmps
leave
outs
mov
call
sub
arpl
ins
fidiv
mul
cwde
je
fadd
(bad)
cli
retf
lahf
dec
call
popa
test
mov
sub
shl
or
dec
mov
add
xchg
clc
scas
mov
int
sub
cwde
ja
lock
xor
sbb
add
inc
push
nop
je
mov
adc
lods
ins
out
nop
fbstp
bound
pop
sub
pop
cmp
out
xor
push
push
sahf
push
(bad)
cwde
aad
cmc
inc
shl
sti
adc
mov
loop
fsubr
xchg
call
in
xchg
pop
sub
aad
clc
sti
or
retf
arpl
das
inc
fs
cmp
push
and
push
call
push
fld
int
and
outs
or
sti
cwde
add
jnp
bound
xchg
imul
adc
jmp
jbe
js
(bad)
cmp
push
xor
cwde
bound
lds
clc
mov
sbb
int3
cmp
leave
xor
mov
lds
pop
mov
stc
in
and
cdq
mov
push
enter
outs
mov
xchg
sub
fadd
mov
in
jg
enter
int3
hlt
inc
mov
sbb
sbb
or
mov
and
pop
(bad)
jecxz
push
ja
sub
sti
call
cwde
je
mov
retf
sbb
sbb
mov
fsubr
rcr
add
(bad)
adc
loop
mov
fdivr
out
shl
cwde
adc
add
nop
aaa
js
or
mov
ret
(bad)
sbb
mov
loopne
cwde
xchg
loope
jge
cmp
add
push
xor
sub
cmp
xor
stos
cmp
mov
cwde
outs
xchg
data16
add
or
cwde
dec
pusha
pop
and
outs
mov
pop
fldcw
das
sbb
lods
ret
imul
mov
inc
retf
leave
push
movs
xchg
dec
test
pop
or
not
xchg
popa
arpl
push
push
test
(bad)
sub
adc
lock
out
fst
test
inc
push
add
xor
mov
push
sub
push
adc
sahf
addr16
jo
and
xchg
push
jmp
cmp
adc
and
ins
and
jle
jo
mov
into
scas
sbb
xchg
ins
fcom
sub
sbb
sbb
mov
into
test
sbb
cwde
push
addr16
sub
cwde
mov
lods
fs
or
std
cwde
cmp
pop
and
add
fcmovbe
pop
cwde
sub
or
or
in
pop
popf
js
jb
dec
xchg
sar
pop
in
xchg
mov
fstp
je
xor
mov
xlat
cwde
mov
scas
(bad)
sar
popf
enter
sbb
stc
call
mov
push
xchg
cdq
bound
pop
lahf
xchg
fsubr
xchg
xchg
mov
je
rcr
iret
sbb
cwde
ja
dec
push
jo
mov
movs
fsubr
das
push
mov
imul
cwde
adc
cmp
hlt
fisubr
cwde
pop
lea
adc
cmp
push
pop
jg
test
scas
adc
pushf
sbb
mov
pop
js
fidiv
popa
xchg
push
cmp
cs
inc
ins
shr
mov
or
xor
push
jns
enter
outs
mov
add
fmul
ret
lods
outs
mov
stos
in
(bad)
cwde
mov
aam
call
dec
pop
imul
push
push
(bad)
mov
pop
xor
xor
or
pushf
lea
adc
imul
xor
sbb
movs
mov
jns
or
add
addr16
xor
nop
out
inc
ret
add
ins
mov
sar
mov
repz
pop
rcl
cwde
test
jb
add
xchg
mov
push
sbb
mov
adc
int3
push
jg
pop
pusha
or
stos
push
push
inc
cmp
mov
movs
cwde
cld
ret
imul
in
rcr
mov
adc
arpl
jbe
cwde
cld
inc
shl
xor
(bad)
js
pop
mov
or
sub
add
cwde
mov
mov
clc
mov
movups
ret
call
sub
add
and
shr
or
mov
in
cwde
fadd
dec
dec
xchg
inc
popf
mov
outs
xor
cwde
push
(bad)
retf
fidivr
inc
dec
push
mov
cmps
sub
xchg
aad
movs
call
adc
dec
stc
out
inc
js
cmp
or
xor
lods
mov
push
push
jmp
add
movs
stc
out
les
jl
jmp
cwde
nop
leave
or
pop
sub
test
sti
call
sub
cwde
fsub
movs
mov
icebp
(bad)
std
xor
mov
dec
adc
outs
push
xchg
stc
jmp
lods
aaa
int3
mov
repnz
enter
popf
cld
jne
jp
jo
fbstp
and
xchg
mov
aad
inc
clc
ds
ins
sahf
mov
lahf
jecxz
add
out
xor
ds
jl
cwde
dec
jno
sub
rol
pop
sub
jne
out
shl
ret
xchg
jbe
xor
cwde
xchg
xor
adc
sbb
mov
clc
fcomp
cmps
mov
call
ds
ins
repz
add
stc
mov
cwde
or
xchg
pop
mov
ds
sub
cwde
mov
xor
(bad)
mov
sti
cwde
jb
prefetch
sub
jne
pop
mov
pop
(bad)
pop
retf
inc
pop
add
jp
adc
ins
or
sub
xchg
jns
fbld
pop
retf
fdivr
dec
cwde
rol
shl
and
stos
mov
into
push
ins
jmp
xor
hlt
fisttp
loopne
xchg
loopne
sub
lahf
sub
dec
dec
xor
jno
fdivr
arpl
ss
bound
rcl
sbb
fadd
shl
mov
push
stc
xlat
(bad)
jl
lods
mov
mov
and
xchg
clc
lods
lock
out
ret
jecxz
lahf
cmp
or
pop
in
fld
cmp
js
cmps
mov
and
dec
inc
sub
test
jae
jl
fwait
arpl
cwde
and
mov
out
cwde
not
jae
xchg
mov
and
push
test
jp
cmc
sar
shr
fnstsw
xchg
pop
pop
sub
(bad)
nop
lods
mov
jecxz
dec
sub
js
loop
mov
(bad)
loopne
adc
push
xchg
jbe
ret
test
and
out
pop
cwde
xchg
push
and
xchg
inc
dec
test
and
xchg
je
cwde
int3
(bad)
adc
lahf
mul
push
inc
sahf
mov
hlt
je
(bad)
ror
(bad)
das
cmps
add
and
jne
mov
xchg
adc
mov
sub
(bad)
int3
cmp
adc
pop
xor
push
xchg
lea
push
cmp
dec
mov
repz
dec
add
jo
and
xor
int
ret
fs
mov
(bad)
adc
xchg
mov
or
adc
xchg
jmp
adc
repz
cmp
outs
dec
mov
daa
fldcw
dec
sub
hlt
loope
cwde
call
inc
push
daa
in
dec
sub
pop
clc
test
and
pop
out
repnz
xchg
cmp
inc
push
mov
je
loopne
sbb
mov
xchg
push
jne
ret
aad
xchg
jo
or
cwde
cli
test
xchg
pop
cmps
jae
or
adc
retf
inc
push
out
inc
mov
mov
ret
jbe
mov
push
jns
jmp
loopne
aad
movs
enter
sbb
lds
gs
jle
cwde
sub
push
int
and
push
mov
xchg
xchg
popf
or
js
lods
mov
outs
pop
lods
das
inc
cwde
in
not
add
prefetcht2
test
out
push
inc
xchg
xchg
push
(bad)
cwde
lahf
adc
hlt
mov
loopne
inc
jo
xchg
sub
adc
adc
xchg
gs
retf
mov
lea
sub
out
cwde
fisttp
sub
scas
mov
ret
cwde
push
cli
and
push
adc
enter
mov
dec
(bad)
int3
xchg
imul
add
jns
imul
mov
xor
mov
iret
arpl
inc
arpl
js
xchg
jge
inc
enter
sets
sbb
jmp
test
sub
test
sahf
and
xor
rcr
popf
lds
rcl
adc
fdivr
movs
sub
xchg
push
mov
out
popf
xor
lods
aad
test
mov
(bad)
mov
push
in
outs
sbb
cdq
lahf
in
xchg
sahf
out
cwde
gs
sub
popf
ss
ins
mov
cwde
mov
pop
push
cwde
xchg
lods
shl
and
loop
cwde
ret
mov
sar
lds
adc
sub
data16
sub
push
lahf
adc
cmp
or
out
in
(bad)
mov
test
adc
rcr
jmp
xchg
ss
retf
fcmovbe
xor
popf
(bad)
pushf
scas
ret
xchg
inc
pop
cmp
dec
add
mov
arpl
cmps
out
(bad)
stos
test
int3
loopne
out
jo
adc
(bad)
dec
icebp
(bad)
xchg
test
repnz
pop
sub
cwde
setns
fisub
jmp
inc
sub
mov
mov
movs
fwait
mov
cwde
into
je
pusha
mov
arpl
vaddpd
stos
sbb
mov
sbb
out
icebp
sbb
into
jnp
mov
div
xchg
jmp
scas
shr
and
or
mov
xor
(bad)
imul
and
lods
(bad)
ret
pushf
push
and
retf
inc
mov
(bad)
adc
dec
std
imul
xor
loop
and
fstp
adc
pop
and
daa
add
cwde
mov
xchg
cwde
ins
xchg
outs
dec
call
xchg
mov
lods
arpl
outs
clc
xchg
fsubrp
sub
in
lahf
fcom
mov
add
test
test
ret
inc
repz
call
jae
loopne
mov
mov
fs
mov
adc
bts
mov
(bad)
in
jo
push
xor
jbe
cwde
mov
enter
add
adc
jp
xor
cwde
in
adc
enter
call
ja
enter
es
pop
outs
cmp
and
repz
jg
aad
rol
inc
pop
cwde
dec
mov
pop
loope
inc
ins
mov
jb
gs
cmp
xlat
fdivr
cmp
rol
add
sbb
jecxz
adc
add
popa
jno
jmp
or
cwde
stos
mov
or
inc
pop
push
fisubr
lahf
call
mov
sbb
cmp
ss
pop
xor
movs
jl
or
mov
cmp
nop
push
or
or
mov
mov
xchg
lods
fs
rcr
add
ins
jae
xchg
ret
jnp
loope
push
mov
inc
clc
cmp
xchg
enter
xor
dec
sbb
or
inc
test
cwde
pop
mov
push
xchg
(bad)
and
inc
cwde
pop
ins
in
fstp
dec
pop
push
(bad)
retf
pop
stos
js
lods
xchg
fs
add
adc
cwde
add
jmp
jns
jle
pop
xchg
pop
dec
push
jae
xchg
xchg
shl
leave
push
clc
dec
pop
mov
ins
mov
add
cwde
or
and
data16
mov
push
rcr
dec
js
call
clc
outs
push
icebp
sub
scas
dec
push
sti
push
call
dec
loopne
cwde
cwde
lods
fninit
retf
sbb
sub
outs
xor
mov
dec
sahf
add
lock
sub
or
scas
sub
jmp
mov
jmp
mov
push
sbb
cmp
adc
add
xchg
lods
mov
adc
pop
pop
out
jmp
and
pushf
movs
mov
cmp
mov
and
cwde
adc
or
push
loope
mov
jecxz
jnp
(bad)
sub
int3
sahf
dec
lods
cwde
repnz
(bad)
test
jmp
inc
ja
mov
cmc
mov
in
xchg
outs
js
ins
cwde
push
pop
push
jo
add
adc
cwde
test
rcl
retf
mov
fucom
test
pop
int3
and
adc
pop
movs
stos
mov
bound
inc
nop
sar
add
outs
in
ret
out
dec
mov
aas
cwde
or
stos
dec
fst
mov
inc
push
sbb
in
xchg
or
fucomp
cmc
ret
lock
popf
and
(bad)
pop
push
ins
xor
lahf
xchg
aam
bound
xor
mov
lods
sbb
test
test
cwde
outs
sub
aam
mov
push
cmp
cs
push
add
retf
clc
test
mov
xor
dec
icebp
mov
cli
rcr
pop
cdq
pop
sbb
hlt
mov
inc
push
and
lds
xor
inc
sahf
outs
xchg
jg
mov
xchg
imul
jge
lahf
and
sbb
cs
aas
xchg
cwde
inc
mov
xchg
mov
push
cwde
ja
(bad)
mov
xchg
inc
add
into
lods
jmp
je
pop
cwde
clc
pushf
ins
jg
stos
inc
(bad)
cwde
js
addr16
stc
aas
icebp
mov
cmp
jmp
and
mov
(bad)
mov
cwde
push
and
xchg
cmc
ins
shr
push
jbe
fdiv
adc
add
pop
xchg
inc
fdivr
mov
adc
data16
out
dec
ins
cbw
pop
and
(bad)
frstor
fs
movs
cmp
xor
loop
xchg
sub
cwde
mov
mov
xchg
dec
pop
xor
cdq
push
lods
adc
fisubr
xchg
iret
add
cmp
xchg
hlt
ret
aam
mov
lahf
jo
fistp
dec
push
cdq
add
xchg
jno
or
mov
pop
clc
xor
dec
mov
jl
test
sbb
mov
dec
test
jmp
fisubr
out
xchg
mov
scas
(bad)
cdq
xor
or
loop
clc
xchg
(bad)
cwde
inc
push
cmp
adc
fnstsw
mov
jno
xchg
popf
imul
arpl
mov
mov
mov
jge
dec
clc
sbb
out
push
pop
loope
lea
pop
test
adc
icebp
aad
or
push
jmp
inc
test
mov
scas
mov
xor
xchg
out
movs
mov
pop
adc
cwde
shl
loope
dec
rcl
mov
mov
repnz
cwde
jne
inc
fs
add
xchg
int
pusha
mov
inc
(bad)
dec
cmp
inc
cwde
dec
jl
jge
fs
int
leave
test
mov
jge
mov
jge
and
nop
out
add
inc
leave
cmp
mov
test
and
xchg
js
cmp
dec
and
xchg
add
sbb
xor
es
cmp
adc
(bad)
sub
out
inc
sbb
mov
test
shl
int3
sub
stc
or
dec
(bad)
or
repz
loop
adc
jmp
gs
lock
paddw
fisubr
lock
sub
inc
sahf
scas
adc
cwde
pop
sub
push
pop
or
and
push
sbb
enter
sbb
stos
call
vpsrad
pop
imul
inc
pop
pop
xor
addr16
in
xor
or
cwde
sub
retf
into
mov
jne
adc
imul
daa
cmp
xchg
sbb
fist
aaa
ins
movs
sub
int
cwde
pop
(bad)
add
or
retf
js
movs
loop
sub
stc
and
push
sub
inc
dec
jb
enter
jl
lahf
fild
repz
adc
jmp
jne
mov
xchg
mov
je
loope
mov
fwait
lds
in
arpl
sub
adc
cmp
fwait
bound
(bad)
jae
xchg
test
or
cmp
leave
push
sbb
xor
jl
xchg
sbb
popf
clc
movs
inc
aad
lods
and
cwde
dec
test
leave
cwde
int
nop
lods
push
xor
cwde
add
cmp
and
xchg
popa
mov
in
mov
call
xchg
loopne
imul
dec
sub
lea
in
sti
xor
adc
int
adc
push
div
ins
imul
jl
push
(bad)
hlt
mov
test
jb
jle
mov
jmp
call
add
outs
xchg
dec
xchg
or
mov
cmp
scas
rcl
les
or
jnp
cdq
inc
mov
mov
mul
cwde
cmp
mov
stc
ins
stos
jnp
lods
xchg
jo
mov
add
xlat
test
inc
pop
jno
push
lahf
and
add
push
dec
xchg
ss
sbb
jbe
cwde
mov
sbb
xor
mov
inc
jae
adc
add
sbb
push
sbb
movs
xchg
addr16
lahf
ins
jg
rol
(bad)
cmc
mov
dec
pop
outs
pop
in
jne
pop
data16
dec
retf
lock
inc
cmp
cwde
sub
loop
adc
pop
push
dec
pop
jne
mov
pop
xchg
gs
fbstp
add
gs
xchg
nop
cmp
mov
test
clc
jg
sbb
cwde
push
push
sub
push
fs
(bad)
clc
push
(bad)
sub
icebp
lea
xchg
icebp
cwde
rol
mov
test
cwde
nop
xchg
pop
mov
icebp
cwde
pop
out
adc
pop
cli
ja
xchg
mov
cwde
shl
call
cwde
sbb
ret
cwde
and
or
int3
in
lahf
pop
sbb
mov
cmps
adc
rcr
sub
gs
jecxz
sub
les
mov
cld
fwait
xchg
inc
jo
cmp
cmp
inc
addr16
xchg
pushf
ins
and
and
pop
in
pusha
daa
xchg
cmp
sbb
imul
mov
and
adc
rcr
cmp
pop
push
pop
js
jmp
(bad)
cwde
fdivr
cmp
stc
fstp
sub
ret
xchg
or
push
outs
push
jle
push
xor
mov
and
lds
cmp
xlat
stos
mov
sbb
sub
fs
jbe
aad
ds
push
jb
mov
and
call
cmp
cwde
mov
push
inc
out
cwde
fnstcw
sub
test
jne
push
lahf
xchg
push
sub
cwde
repz
add
in
call
inc
enter
sti
sub
les
movs
sahf
fs
and
mov
xchg
mov
mov
cmps
mov
cwde
adc
pop
cmp
mov
lods
clc
arpl
retf
aam
mov
adc
dec
xor
jo
mov
and
mov
jmp
or
fmul
and
daa
out
xor
stos
jg
or
sbb
mov
lods
fcom
(bad)
fst
push
mov
das
aad
std
inc
push
mov
jmp
sub
pop
(bad)
jmp
mov
dec
pop
mov
or
sbb
push
push
push
bnd
stos
cmp
leave
pop
(bad)
jl
mov
or
sahf
mov
dec
iret
loopne
xor
jns
scas
mov
in
ss
pop
cwde
sbb
xor
cdq
push
out
pop
pop
adc
sbb
arpl
clc
mov
push
mov
bnd
clc
cli
cwde
jmp
popf
arpl
cwde
lods
push
test
pop
stos
mov
rcr
or
das
jmp
mov
lahf
aaa
jnp
sbb
push
cmp
sub
pop
pop
call
pushf
jmp
or
pusha
dec
jne
xchg
jb
and
inc
pop
mov
adc
inc
outs
mov
push
dec
jle
adc
cmp
mov
sub
xchg
call
mov
cwde
sub
inc
push
aas
movs
xchg
(bad)
fidiv
add
data16
sbb
xlat
cmp
cdq
push
xchg
dec
inc
nop
cmps
mov
xchg
push
pusha
sbb
(bad)
dec
fstp
or
aas
push
cdq
fwait
out
call
pop
push
cwde
or
or
cwde
in
mov
add
and
xchg
test
test
rcl
cmc
pop
cwde
call
scas
fadd
jae
mov
or
in
cwde
mov
ins
sbb
(bad)
pushf
lods
movs
loope
fxch
fmul
popf
ret
push
cmps
cwde
add
addr16
js
fs
cwde
mov
pop
and
push
xchg
enter
out
push
cmp
mov
stc
cwde
jmp
pop
cwde
dec
mov
cmp
cwde
in
outs
lea
loop
cwde
add
xchg
mov
jne
test
sub
cwde
dec
push
sbb
cwde
mov
out
mov
sar
add
push
cwde
jae
rcl
inc
push
xchg
test
pop
jns
push
je
cwde
push
iret
aas
fcmovu
(bad)
scas
mov
gs
pop
inc
cwde
icebp
push
cmp
aad
fcomp
xchg
mov
cwde
sub
leave
push
pushf
xchg
pop
push
xchg
stos
in
sbb
fldenv
add
and
iret
xchg
adc
js
mov
push
jb
inc
stos
call
mov
push
stos
cld
cli
jbe
xchg
push
repnz
popf
aas
push
sub
cmp
jg
test
call
cmp
mov
push
xchg
jbe
retf
bound
scas
push
movs
mov
movs
aaa
fst
mov
arpl
and
pusha
dec
mov
sahf
xor
ret
xlat
jbe
xor
add
fdivr
mov
inc
js
xchg
mov
lods
sbb
pop
in
sbb
adc
sbb
dec
mov
rol
mov
pop
retf
sbb
xor
push
xor
dec
pop
mov
pop
clc
xchg
jge
fisub
(bad)
jmp
cmps
adc
and
dec
imul
mov
cdq
sbb
stos
lods
imul
dec
daa
cmp
cmp
mov
outs
fucomp
mov
pop
dec
ror
cld
fstp
aas
into
push
cwde
scas
dec
repnz
sbb
sbb
mov
pop
sub
cmp
cwde
or
xchg
test
inc
lock
push
jbe
adc
ret
fdivr
paddb
lds
loop
hlt
xor
rcl
mov
pusha
dec
retf
dec
iret
pop
dec
mov
inc
int3
scas
cwde
inc
pop
daa
and
fdiv
jb
leave
fimul
shr
call
or
mov
cmc
inc
leave
clc
dec
jge
xchg
xlat
cmps
pop
sub
dec
jmp
sar
and
mov
xchg
call
sub
mov
pop
aas
addr16
mov
outs
test
hlt
xchg
jmp
ins
adc
xlat
aam
fs
xchg
dec
fwait
jp
cwde
sub
ja
std
sub
fisubr
popa
test
or
pushf
xor
add
xor
xchg
adc
cdq
cwde
xchg
cdq
and
adc
push
fwait
add
fcmovb
xor
add
rcr
mov
jg
sub
call
cmp
xchg
add
aaa
ds
cmps
sbb
add
ss
jecxz
out
das
cmp
cmp
fsqrt
addr16
jo
cmp
cwde
pop
mov
mov
(bad)
scas
or
fiadd
sub
stc
into
loopne
dec
not
sub
gs
icebp
xchg
cdq
outs
cdq
mov
sbb
jg
retf
jle
mov
inc
cwde
or
in
push
cwde
shl
add
push
(bad)
mov
cs
int
test
sbb
cwde
mov
fadd
xor
jecxz
mov
sbb
int3
cwde
pop
push
loop
mov
xor
mov
pop
popf
pusha
adc
inc
nop
xchg
daa
push
dec
push
mov
scas
or
repnz
bound
jl
gs
pop
iret
dec
test
sbb
sbb
and
mov
mov
push
adc
sti
sbb
call
sub
fsub
in
inc
mov
or
xlat
xchg
les
mov
mov
mov
lods
cwde
in
pop
(bad)
fisubr
push
rol
shl
int3
movs
shl
adc
inc
sub
ins
xor
jl
cwde
inc
add
mov
mov
mov
cmp
inc
pop
jne
fs
je
fmul
aam
cmps
xchg
jg
dec
sub
sbb
fdivr
imul
(bad)
push
mov
jle
push
cwde
push
and
sub
outs
jle
pop
sub
retf
popa
sar
pop
adc
mov
pcmpeqb
imul
movs
popf
xchg
bound
in
clc
call
icebp
jg
retf
xchg
add
cmp
mov
popfw
outs
frstor
xor
pusha
test
cwde
jge
jg
pop
js
fstp
mov
adc
jl
cwde
and
xrelease
ja
lods
mov
adc
out
or
pop
inc
lahf
push
jo
ins
cwde
fwait
mov
imul
or
xchg
data16
cmp
jns
inc
push
int
cmp
cwde
fwait
mov
mov
(bad)
int
shl
enter
push
cmp
loop
and
xchg
call
popf
pop
jnp
adc
loop
push
push
xchg
adc
adc
fnstenv
sub
and
xor
xlat
adc
push
rcl
jne
rol
(bad)
outs
pop
mov
xlat
nop
je
retf
(bad)
pop
enter
push
cmp
mov
inc
sub
ins
xor
(bad)
fdivr
or
inc
sbb
mov
fsubr
add
sti
xchg
lods
in
mov
add
sub
xchg
into
fldenv
hlt
dec
ficomp
ds
sti
jl
mov
test
outs
sbb
mov
gs
shl
add
xor
mov
ins
dec
jo
sub
bound
ror
out
mov
jl
inc
rcr
sub
jo
popa
jecxz
jmp
jge
add
jmp
sbb
add
rcr
cmps
movs
mov
adc
aam
addr16
sub
rcr
jl
mov
sbb
jbe
or
icebp
ins
jns
or
test
cwde
dec
add
scas
jmp
pop
and
cwde
add
loope
neg
addr16
dec
cmp
sbb
push
cmp
jl
popf
add
cwde
popa
ja
mov
int
and
cmp
rol
ds
out
dec
push
mov
addr16
mov
cwde
hlt
adc
pop
or
(bad)
jb
cwde
loop
sar
adc
push
popf
je
cmps
aad
mov
loop
pop
lock
pushf
das
or
std
sub
xchg
bound
xchg
push
test
std
sbb
shl
xchg
jmp
or
adc
inc
pop
leave
xchg
cmps
dec
jbe
xchg
xchg
cmp
jg
gs
fsub
lahf
retf
inc
loope
in
cmp
xchg
mov
js
mov
push
loope
sbb
cld
xchg
mov
lds
xor
lock
pop
cwde
(bad)
frstor
leave
xchg
cmp
or
pop
mov
ins
test
ss
shr
mov
bound
mov
lods
xchg
or
in
dec
jns
xor
call
add
icebp
fst
fstp
adc
push
fnstsw
add
loop
inc
or
and
mov
sbb
nop
stos
push
popf
clc
xchg
sub
xchg
fdiv
cwde
cmp
push
scas
lahf
mov
xchg
loop
fimul
popf
pusha
xchg
sbb
jge
pop
and
dec
lods
mov
push
jg
into
out
pop
dec
stc
mov
xchg
pop
jmp
push
inc
xchg
js
call
pop
ds
add
cwde
jae
jp
call
aam
xlat
rcl
(bad)
stos
cwde
add
lahf
and
test
xchg
mov
neg
mov
imul
jo
cwde
lds
xlat
mov
retf
cwde
mov
cli
fidivr
push
cwde
mov
cmps
repnz
call
xor
imul
arpl
stc
jns
xchg
gs
call
std
imul
sbb
pop
add
add
popf
inc
(bad)
shr
dec
adc
fnstenv
push
stos
mov
aad
arpl
push
lock
cmp
imul
mov
(bad)
stc
pop
xchg
jne
ss
cwde
adc
lea
mov
lods
mov
cwde
lock
scas
mov
jecxz
iret
aad
lds
jo
xchg
pop
(bad)
push
cmp
or
jecxz
cwde
adc
hlt
pusha
das
xor
repnz
jo
mov
mov
retf
cmc
and
not
mov
mov
retf
jg
inc
mov
sahf
or
fmul
fist
jmp
int3
and
outs
jle
stos
mov
adc
icebp
cli
repnz
cld
daa
cmp
push
or
inc
ds
rcl
sbb
repnz
fidiv
cwde
pop
mov
fidivr
mov
add
adc
cmp
es
xchg
add
int3
aad
xchg
sbb
clc
add
xchg
mov
call
sbb
or
sbb
cmp
pop
dec
and
hlt
pop
sub
inc
call
ret
(bad)
ss
push
cwde
dec
inc
push
mov
fs
data16
pop
xor
jmp
lahf
dec
mov
mov
mov
inc
pop
cwde
pusha
mov
jne
xchg
gs
cwde
retf
into
push
push
(bad)
rol
loopne
sbb
and
sar
sar
call
outs
leave
xchg
js
mov
pop
xchg
dec
or
fwait
mov
pusha
bound
arpl
test
cwde
pop
dec
add
imul
loopne
adc
or
jge
cwde
daa
lods
sbb
bound
xor
adc
pushf
cwde
mov
jo
cwde
scas
mov
pusha
push
loopne
repnz
outs
or
(bad)
call
sahf
scas
sbb
outs
cwde
mov
rcr
add
pop
xchg
(bad)
or
xchg
dec
lock
lds
hlt
das
xchg
or
push
pop
jae
ret
into
repz
ja
(bad)
neg
sub
mov
jns
(bad)
test
loop
sub
dec
pop
das
mov
jbe
mov
rcl
cmp
cmp
xchg
push
ins
movs
mov
sub
(bad)
sbb
out
jb
sbb
add
cmp
cwde
sbb
push
cwde
mov
adc
inc
push
cwde
dec
sub
dec
pop
fldcw
adc
pusha
xor
cwde
or
push
imul
out
and
dec
push
cwde
xchg
inc
loopne
in
xchg
ret
mov
jb
mov
call
xor
sbb
pop
push
cli
mov
mov
pop
adc
fcomp
js
sbb
xchg
pop
xchg
mov
adc
das
pop
ficom
and
xchg
in
test
(bad)
xchg
enter
leave
cwde
jecxz
jge
jns
push
push
je
pop
mov
mov
sub
ins
xchg
loopne
imul
mov
mov
inc
jmp
out
inc
mov
add
or
pop
cmp
cwde
in
add
stc
add
cwde
xor
cmp
ins
jge
and
daa
aam
and
rcl
pop
ins
call
enter
js
add
or
out
push
ret
stos
sub
add
out
repz
dec
inc
imul
ins
cwde
in
push
cmp
or
lods
out
mov
fild
repz
mov
push
adc
xor
fmul
retf
push
mov
inc
call
aas
push
std
js
fistp
xlat
iret
pop
push
mov
clc
push
sub
scas
js
inc
mov
outs
dec
xchg
push
rcl
ds
mov
sbb
(bad)
rcr
int3
mov
ins
scas
mov
jb
jo
fidiv
ror
imul
adc
xchg
pop
enter
div
hlt
xlat
or
inc
ss
mov
dec
shl
enter
mov
aad
push
jge
stos
cwde
(bad)
jg
push
xchg
imul
xchg
jle
jno
ins
pop
fnstsw
cwde
sub
call
xchg
test
sbb
lods
repz
cwde
inc
aaa
mov
les
pop
add
ror
sbb
rep
test
inc
push
adc
inc
xchg
pop
dec
repz
es
out
cmp
dec
push
test
sub
mov
daa
into
scas
mov
jmp
setle
cmp
nop
inc
fiadd
cmp
cwde
aad
imul
je
cli
ret
push
call
cwde
or
bound
jb
lods
cwde
loope
ins
cs
mov
or
push
rol
lods
sbb
addr16
out
jbe
xchg
stos
outs
jne
mov
sbb
lock
cwde
pop
jmp
cwde
test
jae
inc
cwde
(bad)
(bad)
movs
sbb
cmc
data16
lods
jbe
mov
cmp
xchg
arpl
mov
xor
dec
mov
call
cwde
xchg
pop
dec
push
fsub
jmp
cwde
sub
ins
dec
mov
cdq
loopne
hlt
(bad)
pop
aaa
jp
push
cwde
sub
fwait
gs
les
xchg
adc
inc
pop
imul
mov
xchg
(bad)
cmp
adc
outs
pop
sbb
cmps
push
sub
mov
or
iret
call
loopne
cmc
lods
dec
push
popa
loope
lods
fcom
adc
xchg
fld
in
jnp
scas
mov
popf
mul
ds
xchg
or
push
fidivr
scas
xchg
outs
add
or
(bad)
test
cwde
dec
out
shr
sub
clc
jbe
(bad)
mov
cmp
pusha
in
pop
js
cwde
in
pop
std
fnstenv
mov
cmp
call
cli
cwde
add
dec
and
sbb
push
sbb
and
scas
dec
sbb
jbe
cwde
inc
push
js
ins
dec
or
mov
pop
xor
fisub
xor
sbb
fst
std
xchg
scas
mov
clc
mov
inc
xchg
cmc
mov
arpl
xchg
inc
je
dec
pop
dec
push
clc
mov
mov
mov
into
adc
mov
push
mov
jbe
sub
xor
fistp
bound
nop
sub
sub
call
ja
xchg
inc
loop
pop
mov
call
cdq
ins
jg
ins
mov
sub
call
fwait
scas
gs
ins
xchg
das
mul
stos
pop
loopne
mov
adc
mov
mov
inc
sub
mov
arpl
popf
lahf
gs
xchg
mov
jle
mov
sub
jo
or
cwde
mov
mov
dec
fs
cmp
fdivr
push
ins
sbb
jle
mov
push
fld
sbb
loope
push
xchg
mov
mov
outs
sub
adc
mov
and
stos
sub
xchg
pushf
in
jmp
in
push
(bad)
xchg
out
(bad)
nop
sar
mov
bound
jle
popa
jle
mov
sti
(bad)
cmp
cwde
stos
sub
imul
test
call
fs
out
daa
dec
adc
add
cmps
mov
sbb
pusha
sar
mov
stos
fdivr
xor
inc
mov
lock
in
xchg
retf
or
sbb
lahf
je
add
or
in
loop
repnz
mov
pop
cwde
int
cli
retf
ret
shr
test
sub
inc
sub
out
xchg
mov
movs
jge
sub
out
push
sbb
daa
xor
cwde
jne
test
cwde
movs
add
lods
dec
jmp
cwde
jecxz
mov
xchg
cmp
mov
aas
pop
cld
push
loope
add
sub
fisttp
loopne
loop
jbe
xor
xchg
addr16
into
cwde
mov
mov
test
mov
mov
shr
sub
data16
ret
cli
(bad)
fxch
cmp
test
jecxz
fmul
das
adc
jg
ret
cwde
jle
xchg
out
icebp
sbb
sub
xor
xor
push
mov
or
xchg
cvtps2pd
out
ss
pop
sahf
push
add
arpl
es
cdq
test
sbb
sub
and
je
cwde
add
cmp
mov
and
fcomp
cmp
nop
into
std
push
in
call
adc
sbb
test
sbb
std
push
jmp
jns
rcl
inc
mov
iret
retf
pop
dec
mov
cwde
mov
xor
mov
mov
jge
arpl
sub
ins
inc
xchg
sbb
pop
inc
js
cwde
pop
shr
xchg
xor
cmp
es
div
lea
(bad)
daa
pop
mov
hlt
cmp
cmp
xor
mov
jo
loope
cld
mov
pushf
xchg
popf
imul
pop
mov
std
shl
daa
cwde
mov
scas
sub
inc
jae
mov
cdq
pop
adc
jbe
lahf
adc
cld
xchg
pusha
jmp
sahf
clc
sbb
or
add
and
sub
mov
xchg
test
fstp
js
xchg
push
and
jno
ins
cmc
cwde
scas
leave
lods
add
push
jmp
ds
js
mov
ret
and
loopne
mov
shl
xor
sub
jp
cs
inc
int
jo
cwde
sub
lods
fsubr
ficom
sub
xor
jne
jo
push
ss
sbb
call
xchg
pop
ins
je
(bad)
push
out
cwde
mov
sub
jmp
clc
xor
jbe
mov
push
pop
xor
mov
mov
and
lahf
call
lock
sbb
cmp
mov
jne
imul
(bad)
lds
(bad)
pop
inc
push
fld
int3
cmps
stos
popf
das
xor
xor
adc
cld
xchg
cmp
xchg
rol
inc
cs
jecxz
loope
mov
adc
add
and
in
loop
jle
jg
sub
inc
sbb
retf
or
cmp
fsubr
mov
and
or
sub
rcr
jmp
aam
xor
mov
outs
mov
imul
cmp
pop
ds
cdq
ss
dec
pop
push
and
mov
adc
(bad)
retf
cld
fnstsw
add
(bad)
jg
sub
mov
sahf
shl
enter
rcl
dec
mov
or
inc
(bad)
sub
push
pushf
jg
fstp
dec
arpl
enter
xchg
mov
and
popa
xor
pushf
imul
in
scas
xchg
lea
add
inc
add
dec
xchg
xor
das
sub
sbb
or
cmc
int3
xchg
lock
mov
loope
mov
div
xchg
jne
jg
mov
add
imul
dec
xor
mov
jmp
imul
pop
jmp
pop
jg
fldenv
and
sbb
sar
arpl
sbb
repz
sahf
jle
adc
push
out
scas
leave
outs
cdq
or
in
or
cmp
popf
adc
xor
push
push
mov
xchg
out
add
in
cmps
clc
push
les
stos
xchg
xor
(bad)
mul
xchg
cli
add
and
aas
jmp
ja
adc
pusha
addr16
push
movs
jg
jecxz
jae
ror
cwde
mov
xchg
loopne
fiadd
stos
adc
ret
dec
pusha
pop
cmp
mov
call
ret
add
sbb
dec
push
and
sbb
aaa
push
sub
or
scas
test
les
xor
sub
popf
xchg
out
sbb
sbb
or
gs
xchg
jno
and
mov
mov
nop
dec
push
popa
enter
fidiv
sub
jle
int
push
cwde
(bad)
retf
test
xor
gs
test
cwde
adc
nop
pop
pop
push
pop
int
pop
loope
lock
cwde
and
push
clc
sahf
pop
dec
mov
sub
sub
cmp
xor
popf
(bad)
sbb
aaa
call
popf
scas
lock
cmp
scas
pop
cwde
push
cmp
sbb
cmps
cwde
sub
sub
jmp
sar
and
loop
inc
ins
adc
lods
(bad)
int3
fmulp
not
push
mov
vaddpd
inc
rcl
test
sbb
inc
ret
sbb
jp
test
cmp
mul
aaa
add
mov
imul
leave
cwde
dec
jl
xor
mov
aaa
cmp
sub
adc
jecxz
mov
fnop
fcom
pop
leave
aaa
sbb
xchg
in
jmp
out
jno
fsubr
jmp
test
ds
retf
mov
scas
mov
movs
or
push
xchg
retf
sub
data16
mov
in
inc
loop
mov
rol
cwde
imul
test
push
xor
sbb
std
or
xchg
pusha
cwde
addr16
in
xchg
xchg
cmc
les
add
sub
cmp
mov
sub
pusha
mov
ins
fst
xchg
ror
call
mov
xchg
cmp
push
xor
sbb
mov
lock
test
mov
cwde
jg
jne
popf
sbb
js
xchg
jnp
jae
test
add
dec
pop
outs
inc
xchg
mov
cld
sbb
pop
ret
fstp
mov
mov
cmp
in
jg
test
ret
outs
cwde
retf
pop
out
fimul
inc
sbb
loopne
ret
(bad)
xchg
fisubr
xor
inc
sub
sbb
sbb
xchg
mov
mov
je
cmp
jle
xchg
sub
pop
sub
ret
ins
cmp
or
push
pop
xchg
sub
pop
in
lods
cdq
adc
push
adc
inc
sub
mov
adc
jnp
rcr
fstp
ds
xchg
mov
lods
cwde
das
inc
and
jns
hlt
push
push
test
pop
or
pop
cwde
inc
or
mov
inc
xchg
sbb
sbb
jno
mov
out
ins
adc
inc
add
mov
addr16
jb
inc
das
jns
inc
jns
(bad)
cmp
lods
xchg
imul
fldcw
cwde
call
call
cwde
mov
cmp
fsubrp
cwde
fld
in
scas
sub
cwde
sbb
in
cwde
sti
adc
imul
cwde
or
mov
lock
mov
retf
stos
bound
(bad)
inc
inc
jg
inc
dec
pop
ja
push
pop
sub
scas
mov
(bad)
test
xchg
xchg
pop
ja
ror
jns
inc
pop
mov
cdq
mov
push
pop
push
and
push
test
pusha
sub
imul
cld
sar
sbb
pop
or
(bad)
cwde
push
mov
imul
mov
cwde
ret
sbb
sub
pop
inc
add
mov
cmp
cmp
push
lds
sbb
sbb
inc
test
sbb
lods
and
cwde
rol
adc
xor
arpl
push
outs
std
push
out
imul
mov
test
sti
ret
lahf
icebp
into
rcl
les
push
add
adc
(bad)
and
pop
ins
pusha
xchg
popf
inc
or
pop
out
dec
push
jmp
pop
dec
jmp
pop
je
push
mov
stos
and
hlt
jmp
sbb
data16
dec
or
dec
dec
sub
xchg
pop
xchg
call
mov
cmp
je
sar
lock
inc
add
stos
aad
pushf
fwait
mov
push
xchg
test
cmc
xchg
in
pop
frstor
mov
das
arpl
(bad)
call
mov
inc
sbb
mov
add
jno
fdivr
mov
cwde
leave
sar
retf
mov
sub
jp
jo
sub
icebp
mov
retf
mov
sbb
or
inc
fiadd
ins
add
ja
inc
loope
repnz
scas
mov
lahf
cmovle
enter
inc
push
or
and
in
mov
enter
bound
int3
cwde
sahf
cmp
or
cwde
sahf
xchg
push
xor
push
cwde
adc
pusha
ds
sahf
push
mov
cwde
cdq
lds
js
test
cwde
dec
jo
(bad)
je
add
jmp
cwde
jl
jle
rcl
jp
mov
xchg
out
mov
push
jl
leave
cwde
popa
pop
div
(bad)
pop
mov
xchg
lea
rol
in
pop
(bad)
jmp
in
cmps
xchg
cmp
mov
retf
(bad)
dec
pop
push
or
scas
shl
mov
call
in
mov
stc
sub
add
retf
dec
in
(bad)
gs
lahf
xchg
cdq
lods
mov
ins
and
sub
cwde
and
adc
and
dec
push
inc
xchg
xchg
jns
mov
pop
push
xchg
cmp
push
push
adc
lahf
mov
shl
lods
pop
ins
add
jmp
xor
add
cwde
ja
inc
loop
cli
dec
cmp
push
sub
sbb
jnp
jno
ret
sub
jmp
or
and
sahf
inc
and
clc
shl
in
cmps
mov
mov
pusha
mov
xor
out
jge
sbb
cmp
popf
cmovg
js
popf
jg
mov
in
iret
xor
das
pop
inc
mov
clc
inc
mov
fucomp
jo
xchg
mov
ds
sub
jmp
test
push
mov
lahf
cmc
inc
add
push
mov
cmp
jbe
cwde
inc
mov
scas
jge
xchg
sbb
lahf
push
sbb
jnp
fstp
inc
adc
mov
loop
ins
test
and
fsubr
js
cmp
xchg
and
xor
cdq
clc
pop
xchg
bound
cwde
scas
stos
mov
push
mov
xchg
push
neg
mov
shr
push
scas
xchg
int3
and
add
lock
call
cmp
fisub
cmp
lods
neg
jmp
cwde
movs
(bad)
in
and
mov
iret
sub
sbb
cwde
push
jmp
lods
adc
add
cli
movs
xor
add
sub
fadd
sti
mov
mov
sbb
ret
pop
and
test
push
cld
xor
pop
sub
sbb
xor
adc
xchg
ret
or
test
pusha
push
mov
cwde
movs
mov
dec
inc
mov
push
inc
sbb
xchg
in
aaa
dec
pop
clc
push
dec
ins
cwde
sub
mov
cwde
popa
or
jl
add
jp
cmps
cwde
xor
(bad)
stos
mov
xchg
aad
xor
or
test
(bad)
lock
xchg
aaa
xchg
sub
add
xor
mov
aaa
mov
and
adc
xchg
jns
xor
enter
sub
std
call
add
xlat
ins
mov
adc
pop
stos
jbe
or
push
xor
cwde
mov
in
push
dec
push
es
cwde
add
loope
sub
ret
xor
rcl
mov
dec
pop
cs
bound
test
sub
xor
retf
lock
cwde
das
cmc
les
push
out
in
xchg
mov
fwait
pushf
jg
ret
jns
repz
call
cmp
mov
mov
pop
out
sbb
jle
loopne
jbe
mov
or
sbb
pusha
cli
push
pop
daa
imul
lock
push
cmps
cdq
xor
std
inc
xchg
sub
lods
mov
jg
xor
inc
repz
test
es
cmp
(bad)
xor
jg
hlt
jl
lods
lock
aam
fadd
out
adc
push
mov
xchg
cwde
ds
pushf
data16
cli
fsubr
xor
mov
daa
cwde
in
or
shr
xchg
jmp
xor
nop
sbb
mov
repz
cdq
adc
cdq
jg
cmp
aam
adc
pop
ds
stc
cwde
daa
xor
and
ror
xor
mov
bound
cld
and
cmp
movs
jg
cwde
sar
lock
adc
cwd
ficomp
push
loope
pushf
mov
or
mov
mov
ret
sub
pop
mov
mul
jno
cmp
clc
jmp
cmp
sbb
ret
mov
xchg
jne
repnz
movs
jp
lahf
fmul
fdivr
dec
dec
cwde
cmc
push
sub
dec
iret
mov
pop
repnz
sbb
adc
mov
push
fldenv
pusha
aas
sub
mov
mov
cli
cwde
(bad)
mov
add
jle
xor
mov
pop
pop
and
in
cwde
call
repnz
xchg
jp
(bad)
ins
mov
data16
dec
fstp
sbb
mov
jmp
adc
js
pop
repnz
sbb
mov
sub
push
sbb
cwde
aad
cs
(bad)
in
not
jns
dec
cwde
dec
pop
inc
sub
mov
jmp
inc
ins
lds
lods
add
test
xor
mov
fst
repnz
xchg
fsub
push
repz
adc
test
ds
sar
pop
out
inc
das
or
dec
mov
cwde
arpl
xchg
jl
nop
cwde
push
and
push
pop
sbb
sub
fisttp
retf
inc
or
sbb
je
mov
sbb
cwde
(bad)
rol
add
inc
loopne
mov
repnz
cwde
in
retf
sar
jp
cwde
xor
out
ror
dec
repnz
sub
cwde
loop
jb
cmp
cwde
pushf
add
ins
sub
mov
sbb
jmp
repz
adc
shl
call
cwde
ins
dec
call
movs
mov
jmp
push
fcomp
mov
mov
das
fnstsw
mov
jmp
push
adc
push
aam
stc
dec
mov
mov
jge
loope
cwde
dec
jnp
jg
mov
inc
lahf
mov
mov
jle
ret
popa
add
xchg
repz
fucomip
neg
imul
cld
mov
pop
xor
(bad)
cwde
sub
lahf
test
xor
in
mov
adc
in
or
js
inc
ret
imul
adc
and
sbb
out
xchg
stos
mov
sbb
cwde
and
cld
out
in
cwde
sbb
push
jb
mov
adc
pop
mov
mov
xchg
pusha
xor
sbb
xchg
shl
fldcw
dec
dec
and
jbe
mov
xchg
cwde
aam
enter
sar
jae
div
or
adc
pop
or
jb
fcom
jle
fcomp
ins
lods
(bad)
pop
push
sbb
leave
xor
movs
push
xchg
cs
and
pop
xchg
in
rcl
push
jp
ins
outs
dec
push
or
push
fwait
inc
push
dec
or
aad
mul
xchg
gs
loopne
mov
repz
sbb
mov
mov
nop
dec
sub
jne
mov
jmp
mov
movs
xchg
pop
push
fs
mov
xor
popf
lock
aam
enter
mov
adc
dec
pop
out
int3
push
sbb
vpsubw
ins
mul
test
jne
data16
pop
mov
nop
and
or
(bad)
cwde
add
mov
inc
stos
jl
je
xchg
mov
dec
sbb
ins
push
push
call
ja
pop
and
pop
aaa
fcmovu
mov
push
xlat
adc
out
fdiv
or
stos
cli
out
adc
and
mov
pop
enter
mov
std
(bad)
ss
nop
jmp
pop
mov
cwde
(bad)
cmps
(bad)
retf
stos
jecxz
jns
mov
clc
push
js
adc
xchg
sbb
sub
ins
mov
jb
inc
and
sbb
inc
cwde
push
push
sub
add
xor
sbb
jmp
sti
cwde
aad
dec
push
add
ret
aam
cmps
mov
punpckhwd
cmc
cwde
(bad)
push
scas
retf
inc
mov
cwde
ds
hlt
or
dec
xchg
cwde
into
gs
push
or
add
adc
mov
ret
or
out
stc
ror
push
pop
sbb
sbb
xchg
xchg
call
xchg
sar
call
xor
in
xor
jl
out
xor
sub
enter
cmp
test
nop
fidiv
repnz
(bad)
mov
sub
pusha
out
std
sbb
jp
cmp
test
jbe
outs
xchg
mov
or
loopne
ins
xchg
or
call
pop
pushf
pusha
ficom
pop
out
or
sbb
pop
inc
jp
test
mov
retf
sub
or
or
xchg
nop
retf
pop
xchg
push
add
or
movs
mov
scas
fadd
test
push
pop
add
cwde
je
jae
(bad)
lock
in
xchg
inc
add
js
pop
xor
and
ds
sbb
lods
mov
push
dec
and
mov
lock
mov
jnp
cwde
push
or
ss
sub
and
push
sub
xchg
jge
add
cmp
dec
pop
js
fst
pop
fist
cli
(bad)
jle
or
scas
mov
sbb
mov
aam
(bad)
jne
mov
cwde
add
push
aas
pop
and
ins
cmp
xchg
addr16
xchg
retf
xchg
pop
(bad)
jmp
popa
sbb
jb
push
and
imul
enter
lods
cwde
(bad)
ins
xor
in
or
in
fild
loope
fsubr
rcr
xlat
and
fnstcw
mov
(bad)
cli
aad
xor
inc
jmp
and
jg
jl
cwde
repz
imul
(bad)
jmp
push
push
arpl
pop
jno
xlat
pop
push
pop
int
inc
loop
fdiv
cmp
sub
dec
cmp
cwde
in
cdq
retf
pop
dec
scas
and
std
shr
mov
cmp
pop
cmp
cwde
xchg
add
fild
lock
cmps
imul
repz
push
in
and
xchg
adc
and
cwde
(bad)
scas
or
cmp
sbb
push
or
mov
fsub
xor
sbb
adc
daa
pop
lods
add
jmp
pop
adc
jns
xchg
movs
cwde
daa
mov
(bad)
nop
rcl
in
and
xchg
inc
sub
dec
mov
call
sbb
sub
push
sahf
aad
inc
lods
aam
xchg
jbe
inc
mov
scas
push
clc
int3
aad
sbb
arpl
nop
imul
cwde
sbb
mov
sbb
test
mov
mov
cwde
into
sub
cmp
movs
cwde
imul
enter
popa
sbb
cmp
addr16
xchg
nop
imul
xchg
jg
jge
push
pop
mov
fdivr
adc
push
push
retf
jmp
add
xchg
inc
cmps
pop
jp
xchg
xchg
push
xchg
mov
mov
ja
test
stc
dec
sar
jl
xchg
pop
mov
gs
cwde
xchg
dec
sahf
in
fcomip
cwde
adc
push
out
and
mov
cld
les
xchg
push
shr
scas
pop
cwde
sub
aad
xchg
jp
clc
int
push
mov
ja
cli
es
dec
push
xchg
mov
adc
adc
cmps
cwde
mov
mov
add
aas
push
ret
lods
cmps
xor
pop
iret
push
in
or
in
push
push
out
xchg
stc
xor
jmp
lds
aam
popa
mov
int3
jp
mov
inc
dec
clc
adc
xor
dec
jecxz
repnz
pop
mov
dec
pusha
jp
mov
and
ret
fimul
and
sbb
adc
popa
cwde
js
mov
shl
shr
jo
sub
xor
adc
cwde
push
push
push
loope
dec
fisubr
cli
and
and
cwde
push
pop
sbb
push
xor
cmp
mov
loop
sbb
adc
cmc
mov
cwd
cdq
dec
and
pop
sbb
and
xchg
xchg
jp
xchg
cdq
cs
mov
arpl
(bad)
test
mov
jecxz
sar
daa
lods
mov
cwde
push
push
pop
and
imul
(bad)
(bad)
xlat
cmp
push
cmp
adc
retf
mov
aas
push
and
xor
inc
sub
movs
shl
inc
sbb
mov
nop
imul
cwde
das
xor
mov
cwde
mov
(bad)
cwde
push
lods
mov
jge
dec
mov
adc
inc
call
out
leave
cmp
cdq
pop
add
jno
xchg
xor
xchg
dec
pop
lods
xchg
in
rcl
pop
push
test
jb
xor
out
popf
adc
cmp
mov
test
dec
scas
mov
sub
xor
dec
gs
es
cwde
add
into
aad
cwde
inc
push
or
xchg
int3
pop
and
loop
mov
(bad)
mov
and
aaa
jo
mov
jmp
bound
stos
retf
xlat
sub
or
cwde
sbb
(bad)
mov
fs
pop
cwde
sub
into
push
xchg
fwait
jo
mov
ss
inc
fs
clc
add
mov
sbb
pushf
mov
inc
in
inc
jnp
in
xchg
mov
jle
imul
mov
mov
mov
pushf
fadd
cmp
mov
mov
push
mov
jmp
in
sbb
imul
clc
and
xchg
jbe
cmps
mov
sbb
cli
or
dec
sub
ds
pop
and
stc
in
mov
or
loopne
in
leave
cmp
xor
sub
xchg
fs
add
jae
cmc
iret
xchg
push
inc
pop
outs
pop
sub
cdq
jne
pop
xchg
sub
push
and
fnstsw
xchg
push
sbb
xchg
mov
gs
aaa
loope
enter
cwde
or
(bad)
jnp
inc
mov
test
ja
mov
pop
and
mov
(bad)
loope
lds
call
stos
sbb
mov
dec
retf
sbb
cwde
stos
mov
jbe
xchg
xor
bound
sub
movs
sub
test
xchg
call
pop
pop
xchg
stos
cmp
and
aas
nop
movs
call
icebp
mov
pop
mov
mov
scas
xchg
pop
mov
jmp
ret
stc
into
sbb
jae
sbb
sub
pop
daa
jnp
jb
mov
jge
push
aad
dec
ja
and
sar
xchg
inc
das
pop
and
je
out
cwde
sti
adc
dec
dec
pop
ja
shl
das
push
call
(bad)
rcr
xchg
in
mov
cli
ret
in
outs
inc
addr16
fnstsw
pop
sub
pushf
xlat
cwde
out
mul
xchg
cwde
repz
mov
mov
cmps
(bad)
cmp
xchg
mov
out
cmp
fwait
mov
cmps
dec
jae
(bad)
faddp
(bad)
aam
enter
push
lahf
daa
adc
push
mov
inc
scas
cwde
sub
outs
mov
cwde
jae
adc
cwde
pop
xor
jmp
(bad)
repz
(bad)
cmp
and
cwde
push
push
out
sbb
in
cwde
jmp
dec
leave
clc
mov
je
in
(bad)
cwde
mov
ins
jbe
and
mov
push
cdq
cdq
cmc
cmp
lock
dec
jecxz
mov
add
sbb
mov
or
pop
cmp
mov
cwde
dec
push
mov
cmps
stos
sub
repnz
arpl
leave
jle
pusha
and
sbb
jmp
rol
fmul
shl
cmp
inc
dec
xchg
std
sbb
loopne
dec
xchg
ins
js
mov
dec
(bad)
loopne
inc
push
jno
dec
xchg
sahf
fs
test
imul
jecxz
or
xchg
mov
jno
pop
out
mov
loopne
movs
shl
cwde
and
out
xchg
repz
xor
push
mov
sbb
loop
je
popf
data16
dec
dec
jecxz
jmp
cwde
rcl
adc
or
push
pusha
popf
cmp
outs
jmp
xchg
jbe
lods
or
std
retf
fdivr
int3
lea
xor
mov
mov
pushf
push
cld
push
sbb
push
imul
mov
lock
mov
adc
jecxz
pop
retf
cmp
sbb
je
mov
jmp
loop
mov
mov
pop
xchg
dec
loopne
push
mov
in
pop
mov
jbe
fidivr
aaa
es
mov
fldz
cwde
sub
outs
cmp
mov
lea
mov
mov
pop
inc
fdiv
or
outs
pop
test
inc
loopne
enter
cwde
xchg
pusha
pop
sub
inc
daa
cwde
xor
(bad)
(bad)
mov
(bad)
push
in
test
add
xchg
icebp
xor
fsubr
scas
cmp
dec
pop
add
cwde
mov
adc
daa
xor
xchg
jae
mov
fistp
bnd
retf
and
xchg
inc
test
or
fs
sub
jns
pop
iret
sbb
stos
fld
fisubr
xchg
cmp
movhps
out
add
cmp
popf
enter
cwde
and
neg
xor
sbb
shr
clc
pop
ffree
push
xchg
mov
jo
out
fistp
out
out
int
arpl
iret
mov
jns
adc
cwde
mov
cmp
mov
dec
xor
push
lods
sbb
jmp
mov
dec
push
cmp
jns
add
pop
shr
fisubr
enter
push
mov
fisub
cwde
rol
push
mov
add
fstp
mov
push
jo
ss
pop
or
sbb
xchg
push
or
cmp
and
dec
rcl
ins
mov
retf
scas
adc
jg
clc
scas
psubb
and
and
cs
inc
loop
xlat
sbb
jo
lahf
sub
call
mov
lods
xchg
push
ret
or
adc
out
shl
cwde
int3
retf
ins
movs
ror
lods
pushf
adc
arpl
xlat
jns
or
mov
and
mov
es
ins
fidivr
jmp
jg
cwde
pop
mov
cmps
sar
inc
jge
push
cwde
xor
dec
mov
sahf
mov
ja
inc
lahf
test
cmp
in
call
cmp
dec
sub
push
call
icebp
xchg
cmp
pop
pop
mov
outs
xchg
xchg
mov
dec
sbb
in
xchg
cwde
aam
retf
inc
push
sti
rcr
arpl
pop
cwde
xor
sbb
je
das
xchg
fnstenv
loope
xchg
lock
pusha
outs
mov
sbb
sbb
xor
adc
(bad)
or
outs
mov
pop
out
xchg
in
add
ret
inc
cwde
sub
add
imul
pop
jmp
mov
rol
loop
sbb
jl
dec
push
mov
push
jns
lods
(bad)
cwde
sbb
sbb
mov
call
add
xchg
jbe
sub
mov
fadd
add
movs
not
jns
pop
cwde
push
add
and
adc
rcl
or
cmp
xchg
and
test
movs
in
push
into
bound
fidiv
xchg
push
sbb
cdq
mov
mov
ret
lea
test
iret
loopne
sbb
mov
xchg
jmp
sub
or
sar
pop
add
mov
adc
test
je
mov
sub
ret
into
mov
fisubr
cdq
adc
xchg
je
xchg
lods
dec
mov
out
int
jmp
add
cmp
daa
push
cmp
xchg
mov
cwde
in
jmp
sahf
inc
dec
enter
popa
mov
pop
xchg
add
addr16
cwde
push
jno
cmps
test
xlat
pop
clc
fstp
rcr
jbe
adc
imul
out
or
jl
mov
rcr
xchg
cmp
aas
ja
(bad)
cwde
cdq
test
cli
ret
repnz
cwde
push
out
push
pop
sar
dec
xchg
(bad)
into
mov
jb
adc
push
inc
cwde
pop
aam
push
mov
xor
mov
pushw
outs
fsub
push
test
add
mov
cdq
jle
ret
fnsave
lods
pop
jge
ja
cwde
(bad)
out
hlt
sbb
inc
pusha
and
pop
cmp
enter
pushf
pop
stos
jmp
push
cwde
sbb
push
mov
adc
adc
mov
xchg
repnz
fcomip
sbb
push
jno
jnp
shl
clc
add
jp
adc
xchg
loop
pop
push
xor
jne
inc
jecxz
stc
pop
popa
inc
adc
sub
(bad)
xchg
mov
cmp
js
sbb
sahf
xchg
mov
mov
sub
cmp
aad
mov
out
adc
lods
push
xchg
mov
dec
push
fmul
or
sahf
cdq
and
popa
test
add
jecxz
pop
(bad)
xlat
adc
ins
jg
loopne
es
inc
dec
sub
push
test
pop
leave
dec
sti
mov
lahf
push
lock
cdq
or
test
pop
in
std
sbb
sbb
sahf
je
cwde
mov
push
add
cwde
sbb
push
into
cdq
cmp
in
fiadd
daa
fnstsw
adc
outs
xchg
jns
jg
lods
mov
retf
or
stos
xchg
jmp
add
xlat
push
je
dec
jae
popa
xor
sar
jne
fdivr
xor
pop
dec
sub
and
leave
aas
out
mov
mov
mov
mov
jmp
mov
cmp
fcom
ror
and
std
adc
ss
xchg
and
jo
fs
imul
mov
and
adc
retf
aam
pop
xchg
cwde
add
mov
icebp
adc
dec
mov
sub
loopne
mov
push
jl
call
fwait
jg
add
pop
pop
in
dec
jnp
xchg
sub
enter
aas
lods
sub
ja
sbb
push
adc
pop
xlat
rol
je
adc
cmp
sub
scas
jbe
or
cmc
aam
ret
ins
ficom
mov
hlt
inc
lods
cwde
psubsw
or
jg
mov
dec
mov
mov
fadd
(bad)
push
pop
cwde
add
dec
mov
xchg
pushf
popa
mov
push
push
inc
mov
enter
rol
stos
add
push
jnp
pop
or
mov
mov
int3
fistp
daa
and
mov
cwde
adc
aad
jge
mov
mov
jg
xchg
cmp
mov
test
cwde
ror
bound
and
stos
mov
sbb
and
repnz
fstp
xor
cmp
cmp
retf
xchg
cs
(bad)
dec
jbe
sahf
push
cmp
mov
scas
inc
mov
xchg
(bad)
loopne
mov
cmp
hlt
and
sub
push
jo
cwde
mov
in
jl
pop
popa
and
aad
fcomp
cmp
int
adc
inc
push
loopne
cwde
and
and
js
inc
mov
adc
call
shr
cmc
inc
std
movs
mov
sbb
or
mov
mov
inc
cwde
cld
ret
cmp
adc
cs
sub
ds
xchg
xchg
movs
pop
jb
push
push
mov
cwde
jmp
xor
jns
inc
mov
mov
cwde
sbb
mov
fstp
or
lods
pop
sbb
mov
inc
push
jl
xor
add
cmp
out
stos
and
cwde
sbb
pop
adc
pushf
cwde
add
(bad)
test
(bad)
add
loope
stc
cwde
ror
mul
stos
mov
clc
sbb
and
and
adc
shl
inc
ins
sub
jnp
fcom
je
out
cwde
pop
pop
loop
xchg
iret
jb
cwde
shl
or
adc
out
dec
imul
cwde
repnz
ds
pop
jl
add
rcr
int3
rol
pop
cwde
add
cmp
xchg
cli
rcl
lods
push
cwde
xchg
imul
fimul
pushf
cwde
retf
outs
rol
sub
enter
mov
mov
adc
out
retf
mov
data16
sub
jg
mov
cwde
shl
pop
cwde
test
sub
push
and
repnz
fwait
sbb
mov
ret
jno
dec
jp
popa
call
daa
fadd
mov
sub
xchg
pop
ret
mov
(bad)
inc
inc
imul
adc
in
pop
int
stc
pusha
and
sub
out
jnp
lahf
mov
inc
pop
retf
dec
popf
mov
dec
out
test
xor
cdq
pusha
and
pop
outs
sbb
xor
cwde
rcl
out
popa
cmp
cmp
stc
pop
xchg
mov
(bad)
es
lahf
imul
pop
xchg
mov
jmp
xchg
jbe
mov
or
xchg
adc
jo
cmc
(bad)
cmp
mov
shl
enter
sbb
push
xchg
xor
stc
sbb
pop
cli
fld
pop
nop
enter
out
popf
mul
loope
jo
shl
cmp
dec
cmp
xor
dec
mov
je
call
imul
and
push
jmp
add
rcl
adc
ss
sbb
xchg
mov
test
fistp
pop
jne
dec
adc
mov
fs
inc
push
adc
mov
push
mov
lahf
push
xor
sub
jg
cwde
pop
adc
cmp
add
fdivp
xchg
ins
jne
xchg
mov
sbb
add
jnp
jo
pop
and
ss
mov
(bad)
(bad)
fsub
mov
dec
inc
je
or
in
adc
not
jo
sbb
push
push
or
fmulp
mov
adc
lahf
jno
aad
jmp
sbb
imul
xchg
pop
fld
mov
test
fstp
mov
xchg
sub
adc
inc
int3
xchg
inc
push
jne
call
add
(bad)
imul
and
popf
(bad)
ss
cwde
dec
sbb
int3
push
push
cwde
ret
sub
in
cwde
jne
jle
inc
inc
mov
cwde
cdq
retf
call
(bad)
(bad)
(bad)
scas
fwait
xor
push
out
ja
push
cwde
sub
vpsubsw
cmp
adc
pop
test
sub
bnd
pusha
mov
sbb
and
dec
clc
sub
xchg
dec
cmp
jl
mov
push
sbb
xchg
sub
in
jmp
dec
lea
sbb
inc
jl
(bad)
xor
popf
pop
mov
sahf
mov
(bad)
jmp
or
cli
dec
cs
mov
mov
cmp
nop
lahf
in
cwde
inc
push
pop
pusha
mov
inc
pop
leave
inc
sbb
rol
xchg
test
mov
leave
and
imul
imul
cmp
cwde
jle
push
sbb
mov
and
cmp
movs
mov
cdq
call
retf
bound
cld
push
imul
jae
adc
js
cwde
jns
fmul
push
xor
jbe
pushf
mov
xchg
xchg
sub
xchg
cmp
mov
lock
push
js
cwde
mov
pop
dec
movs
jge
rcr
pop
pop
loope
push
cld
jae
repz
pop
and
push
ds
call
bound
cwde
jl
cld
sar
push
inc
pop
fimul
cwde
cmc
shr
in
je
rcr
adc
or
dec
data16
cwde
xor
jp
(bad)
je
xchg
(bad)
sti
and
aad
std
retf
mov
mov
pop
sbb
sti
cmp
(bad)
xchg
(bad)
pop
loope
sbb
das
cwde
neg
loop
xor
push
dec
mov
(bad)
mov
cwde
jge
jnp
xchg
cwde
jle
stc
retf
stos
fld1
clc
cwde
fimul
movs
push
or
xchg
add
aaa
sbb
jmp
fisubr
mov
outs
sahf
ss
pushf
jbe
loope
push
xlat
ja
jmp
jo
ja
add
sbb
(bad)
adc
in
add
in
sub
cwde
push
dec
pusha
cmp
ins
repz
xchg
out
loope
test
into
mov
sub
mov
sbb
pop
cwde
jecxz
mov
sbb
dec
cmps
cwde
sub
push
mov
dec
out
cwde
sbb
xchg
ins
test
fstp
xchg
clc
push
cmp
mov
js
test
sbb
cmp
push
mov
call
push
push
neg
pop
xchg
scas
clc
pop
push
(bad)
cli
mov
mov
adc
xchg
or
xchg
rcr
add
stos
test
push
add
xor
push
xor
cmp
or
pop
xchg
jg
(bad)
pop
sahf
mov
cmc
aaa
add
loop
cwde
lods
mov
test
jmp
jg
lea
cmc
les
cwde
mov
in
and
shl
mov
lock
mov
pop
in
movs
push
cmp
test
push
sub
ja
scas
jle
pop
ss
jmp
cmp
mov
or
ins
rcr
cmps
sub
pop
inc
sbb
into
or
sub
jg
xchg
aad
or
inc
faddp
pop
int
mov
repz
mov
sti
ins
pop
int
mov
sub
sub
outs
push
push
mov
mov
mov
js
or
cwde
jno
ds
xchg
shl
in
cld
xchg
adc
(bad)
pop
jne
mov
mov
push
or
xor
outs
cwde
lods
xchg
ret
sub
arpl
stos
mov
fdivr
iret
aas
neg
push
leave
(bad)
aad
jmp
or
lahf
int3
fisubr
gs
icebp
ror
jmp
sbb
ret
mov
dec
outs
pop
test
or
(bad)
push
jo
movs
popa
xchg
sub
addr16
dec
mov
cmp
repz
not
mov
test
lods
into
jl
aaa
mov
test
les
js
leave
stos
in
hlt
(bad)
jnp
cmp
es
push
arpl
int
or
in
std
and
adc
shl
xchg
sti
or
jnp
xchg
push
stos
dec
clc
ret
ret
out
clc
gs
cmp
sub
lahf
popa
mov
lods
fmul
mov
sbb
stos
test
out
cwde
test
sub
ss
xchg
mov
mov
cld
dec
mov
jl
cmp
sbb
rol
inc
cwde
push
dec
aas
mov
cwde
iret
popa
stc
scas
adc
enter
jle
ret
fsubr
adc
push
sbb
push
and
ret
in
inc
sahf
jmp
int3
or
mov
js
retf
mov
lahf
cmp
mov
stos
ret
enter
inc
call
leave
sbb
cwde
arpl
push
ds
sar
pop
sbb
mov
lock
xor
add
xor
inc
pop
das
sahf
(bad)
push
and
sub
mov
xchg
and
or
mov
sbb
jl
repz
mov
push
pop
push
sub
xor
jns
cmp
xchg
sub
fs
mov
jecxz
cwde
push
and
(bad)
icebp
fisubr
and
jno
mov
jmp
mov
sbb
xchg
inc
add
imul
scas
and
lahf
or
(bad)
sbb
add
aaa
fld
jge
sub
cli
cmp
das
xor
(bad)
xchg
mov
jns
cwde
cmp
ins
push
aad
jmp
repnz
lea
pop
sbb
imul
in
cli
sbb
out
aaa
dec
xchg
das
dec
sbb
repz
inc
pusha
xor
mov
shl
inc
sbb
js
xchg
mov
into
mov
mov
ds
call
jmp
xchg
mov
enter
test
dec
jp
in
jmp
scas
fist
add
inc
pop
push
and
popf
dec
test
adc
xchg
fwait
adc
push
xchg
sub
popa
push
and
stos
mov
cmp
and
sbb
xchg
ja
popa
cwde
dec
add
or
xchg
jge
push
mov
rcl
and
data16
fbstp
xchg
xchg
dec
pop
and
mov
adc
repnz
outs
add
cdq
stos
adc
xchg
xor
out
outs
or
sub
cwde
(bad)
(bad)
fldenv
add
dec
loopne
jne
das
cmp
add
sbb
jg
sub
sbb
push
mov
xor
xchg
sub
aad
(bad)
sub
cwde
out
and
clc
mov
jno
mov
or
jo
ror
xchg
ret
sub
test
lds
jo
call
dec
icebp
clc
test
cwde
dec
shr
sbb
push
pop
cwde
and
ret
xlat
iret
jmp
dec
pop
in
cwde
enter
and
sar
pop
fcmovb
jl
cwde
sti
in
std
rcl
addr16
dec
cmp
leave
aam
int
jl
mov
rcl
dec
sub
pop
les
aas
gs
fwait
in
lss
cmp
add
cwde
clc
or
mov
cmp
xchg
mov
shr
push
dec
sub
sbb
mov
xor
jnp
int3
fidivr
cmp
in
ja
lods
stos
or
pop
inc
sub
inc
jo
hlt
shr
cli
sub
in
mov
mov
cmps
arpl
inc
pop
sub
mov
call
sub
mov
add
xlat
xchg
imul
sub
ret
sbb
jnp
xchg
cwde
pop
mov
cmps
mov
mov
cwde
sub
cmp
xchg
mov
inc
xchg
aaa
xchg
sbb
neg
inc
xchg
cwde
pop
and
sub
jb
dec
popf
jo
xor
sbb
jmp
call
cwde
leave
add
and
adc
stos
sbb
dec
cmp
cwde
and
cli
enter
pop
push
sub
into
stos
jns
(bad)
adc
mov
ficom
(bad)
mov
scas
repnz
clc
sub
adc
push
sub
shr
xor
sub
push
aad
jns
lock
into
pop
js
test
cwde
(bad)
or
pop
jae
dec
jl
add
nop
pop
jp
clc
cdq
scas
jmp
cmc
xor
sti
int
xchg
push
cwde
int3
outs
mov
nop
cwde
xchg
movs
data16
loopne
lods
cmp
jbe
cmps
mov
rol
inc
dec
fdivr
cld
(bad)
loopne
scas
dec
jnp
or
daa
or
ds
in
pop
xor
pop
or
sbb
gs
cwde
mov
std
pop
cmp
mov
dec
pop
mov
fdivr
xchg
and
add
cs
adc
test
cwde
push
add
dec
sbb
repnz
mov
mov
push
fld
xchg
retw
jo
clc
pop
jmp
pushf
push
jge
ins
in
cwde
xor
sbb
jmp
addr16
dec
push
inc
loope
cwde
and
pop
mov
popf
mov
cmp
sub
cld
xchg
das
mov
push
imul
mov
data16
mov
sub
cmp
ss
push
pop
test
xchg
cwde
push
out
loop
jg
push
and
mov
pop
mov
xchg
mov
pop
cs
popf
fwait
jnp
not
pop
and
ss
pop
cmp
cmp
ret
movs
(bad)
outs
and
es
(bad)
mov
idiv
xchg
or
adc
pop
mov
push
xchg
sar
out
bound
mov
pusha
sub
(bad)
xchg
jecxz
xchg
lahf
popa
pop
out
jmp
dec
dec
data16
inc
rcr
xchg
xchg
popa
cwde
and
sbb
ret
jle
pop
sub
inc
bound
cwde
in
in
and
jge
adc
cwde
les
cmp
cwde
sbb
jns
add
cwde
mov
iret
mov
inc
adc
adc
daa
mov
sbb
xchg
jle
test
gs
dec
cwde
ins
movs
mov
cmps
and
cmp
jp
test
sbb
hlt
enter
dec
pop
dec
sbb
push
in
rcr
xchg
inc
push
cwde
inc
mov
fdiv
popf
mov
dec
or
dec
ins
(bad)
arpl
into
pop
sub
push
cwde
mov
jbe
fcomp
inc
jb
scas
jnp
xchg
enter
xlat
sbb
mov
jns
arpl
sub
out
push
adc
movsx
in
(bad)
adc
cwde
mov
js
or
ins
dec
test
or
out
pusha
test
xchg
add
pusha
mov
pop
cwde
cs
mov
cwde
cmc
(bad)
repnz
mov
cwde
ret
adc
mov
pop
outs
xor
nop
not
sbb
mov
push
and
das
mov
pop
mov
xor
jne
add
and
xchg
push
add
or
fwait
pushf
leave
pop
cmc
retf
retf
push
xor
loopne
jae
es
mov
pop
jle
pusha
jge
or
sbb
ja
sub
rcl
mov
xor
or
sub
cwde
xchg
cwde
mov
in
sub
push
sub
xor
push
ds
and
cwde
and
movs
push
xor
ror
fld
xchg
add
cmp
jg
mov
jge
push
stos
xchg
bound
test
into
cwde
fcomip
mov
jecxz
xchg
mov
jo
out
sub
xchg
or
loopne
shr
dec
dec
sbb
cwde
xchg
cmp
fs
cwde
aad
jno
pop
shr
test
pop
cmc
mov
sti
ret
mov
cld
pushf
and
popf
dec
sub
sbb
xlat
fwait
sbb
aaa
pop
(bad)
lods
stos
aad
ja
(bad)
push
sub
stos
test
in
or
xor
daa
cs
cwde
lods
sahf
cmps
lock
in
and
data16
push
sti
in
sti
xor
das
stc
cwde
sbb
mov
out
in
mov
sub
and
sub
std
repz
jge
inc
call
or
push
cmp
cmp
mov
pop
daa
or
xchg
or
hlt
rcl
lods
loope
stos
call
and
sbb
cmps
stc
sbb
sbb
leave
cwde
ds
cs
ins
into
or
rcl
add
push
adc
jg
pushf
xchg
mov
mov
or
clc
(bad)
xor
stc
push
test
les
mov
ins
jge
lods
dec
pop
(bad)
ins
dec
xchg
stos
mov
cmc
and
out
neg
jmp
sub
inc
aam
or
dec
mov
push
fwait
xchg
xchg
and
or
cwde
enter
inc
push
cmps
scas
cwde
mov
cs
cwde
sbb
aaa
outs
lea
jae
cmp
(bad)
loope
nop
dec
push
jns
cmp
pop
xchg
pop
repz
fs
inc
cmpxchg
xchg
sbb
mov
in
sub
push
mov
pusha
out
repnz
push
sahf
leave
in
inc
pop
or
cmp
dec
pop
xchg
jne
jae
sahf
cmp
in
addr16
pushf
adc
ds
cwde
lahf
push
sbb
rcl
fiadd
xchg
mov
jecxz
mov
pop
cmp
enter
sbb
fcmove
cwde
dec
xor
std
add
cwde
outs
push
dec
sub
lss
push
adc
dec
sub
mov
pop
push
shl
sbb
inc
xor
xchg
mov
add
pop
or
cmc
int
pop
cli
ret
adc
inc
test
or
inc
jl
mov
sub
adc
jne
dec
push
push
sub
(bad)
mov
mov
xchg
(bad)
scas
adc
movs
test
retf
push
jge
shl
xchg
cmp
ds
cmps
mov
cwde
jge
sahf
bound
xchg
push
jge
pop
add
pop
out
int3
adc
push
cmp
cmps
or
fs
sbb
test
retf
cwde
sahf
dec
pushf
and
mov
gs
aad
push
add
sti
add
xlat
scas
adc
js
push
loopne
lds
loopne
add
inc
or
jle
cdq
js
das
in
dec
sbb
xchg
loope
xor
xor
push
mov
dec
je
push
stos
cmp
jg
or
cwde
mov
int
and
xchg
mov
xchg
loope
js
jns
xchg
pop
movs
mov
adc
jmp
jae
scas
xchg
xor
xor
cwde
add
es
sub
sbb
cdq
pop
jnp
mov
icebp
inc
ss
repz
ds
repnz
sub
xor
lock
and
jns
js
mov
out
std
inc
push
adc
cwde
jns
cmp
ja
jo
or
repnz
push
mov
in
mov
or
sbb
test
sub
cmp
push
cmp
push
jno
inc
jge
bound
aam
xor
and
jmp
in
pushf
add
sub
sbb
mov
sbb
cmc
(bad)
test
xchg
rol
mov
xchg
in
jno
adc
cmp
jp
jle
xchg
les
push
fs
pusha
scas
mov
jecxz
enter
mov
outs
dec
bound
movs
sbb
call
cwde
shl
and
cdq
pop
or
or
cmc
aad
add
lods
xor
cwde
mov
push
out
add
mov
(bad)
cmps
inc
popf
mov
aam
xlat
mov
inc
pop
jbe
ficom
jnp
popf
jmp
add
outs
mov
(bad)
gs
(bad)
cwde
pusha
mov
fmulp
aad
fsubr
sbb
call
cmp
scas
mov
xchg
cwde
lds
lahf
bound
xchg
pop
and
lds
test
int3
add
adc
jno
or
adc
mov
dec
fsub
push
das
ror
sub
pop
sbb
mov
xchg
mov
loop
enter
mov
aam
cwde
adc
and
xchg
add
out
sub
stc
ror
loopne
out
push
lods
cwde
adc
inc
push
pop
and
cmp
push
mov
retf
xlat
iret
sub
cmp
loop
loope
jbe
xchg
jb
add
mov
xchg
add
mov
adc
cwde
lods
leave
ret
mov
xchg
cmp
cs
js
je
or
popf
int
shl
fldcw
stos
adc
push
cmp
cmp
in
outs
mov
sbb
add
shl
xchg
les
lods
xchg
jo
push
stc
jnp
call
mov
popf
mov
scas
into
test
loop
pop
loope
ret
cli
push
adc
xchg
and
(bad)
int
dec
cwde
push
bnd
xchg
pop
scas
cwde
pop
mov
xchg
sahf
adc
rcl
ret
pop
push
cmp
cwde
cli
xor
sub
cwde
xchg
jmp
mov
sub
push
mov
push
sbb
xchg
and
pop
mov
cmp
int
push
lds
adc
sbb
jae
outs
cwde
loopne
hlt
pop
push
repnz
dec
mov
push
jecxz
add
aaa
xchg
fst
adc
jmp
clc
mov
repnz
mov
xchg
xor
cmp
enter
(bad)
push
es
ins
cmp
jnp
dec
cdq
cwde
into
fdivp
mov
pop
adc
out
test
or
pop
jne
and
adc
cwde
jns
or
and
ror
js
je
jmp
test
rol
cwde
repz
fcmovu
test
cmp
fcom
ja
retf
xchg
lea
sahf
jmp
sub
jno
push
cs
test
aad
cmp
mov
loop
sbb
cmp
pusha
out
adc
cmps
xchg
sbb
sahf
jo
es
arpl
mov
inc
sbb
shl
sti
sub
mov
add
cwde
mov
fiadd
xor
call
(bad)
and
(bad)
sbb
fcom
xor
inc
stos
fidivr
add
cwde
or
rcr
call
adc
fisttp
cwde
mov
and
xor
inc
cli
push
out
test
inc
test
pusha
sub
xchg
push
out
not
loope
jmp
and
icebp
test
cli
cwde
add
push
xor
mov
add
cli
clc
sbb
sti
mov
fdivr
scas
mov
mov
push
adc
daa
dec
retf
jae
dec
lods
mov
repnz
fcomp
or
in
mov
mov
jno
retf
ret
xor
test
jb
test
cmc
lods
pushf
jg
xchg
jp
imul
jae
pop
or
rcr
jg
call
push
add
pushf
sub
add
mov
cld
adc
fdiv
aam
lods
in
icebp
inc
mov
mov
and
push
iret
xchg
jp
mov
push
adc
lahf
inc
aas
cwde
push
inc
push
and
jp
cwde
cmp
ins
lds
adc
ror
jo
cwde
mov
mov
jmp
jae
mov
stos
cwde
pop
and
int3
mov
inc
sbb
retf
xchg
ret
mov
add
jle
fcom
mov
xchg
mov
sbb
enter
jne
pop
sub
jp
cwde
fmul
lock
ret
test
pop
jns
cwde
les
leave
in
jg
adc
cli
cmp
jbe
cwde
out
mov
or
in
pop
data16
and
dec
in
(bad)
call
push
mov
adc
dec
push
mov
xchg
push
xchg
or
pop
push
mov
push
pop
lock
int3
sub
cmp
or
dec
dec
imul
imul
das
push
jmp
ins
mov
sub
jl
cmp
icebp
mov
ret
push
and
lods
jle
stos
mov
dec
cwde
jb
cmp
mov
std
adc
xor
adc
sub
sub
rcr
dec
push
jnp
mov
loop
xlat
lds
aad
mov
jmp
xchg
cdq
jp
xchg
iret
test
push
inc
les
xor
clc
push
xor
daa
inc
or
pop
xor
add
popf
mov
icebp
das
cwde
mov
out
lahf
stos
mov
mov
xchg
inc
into
jne
push
cmp
push
ins
fsubr
jp
ret
call
inc
jo
mov
fs
xor
std
enter
lods
loop
nop
xchg
mov
push
cmps
jnp
and
or
and
leave
mov
add
mov
ins
xchg
cli
mov
nop
xchg
pop
pop
ret
jg
in
sbb
sbb
xchg
add
pusha
ins
lds
scas
mov
inc
sub
sub
sbb
xlat
(bad)
mov
cmc
xchg
repnz
ret
add
xchg
fcmovnbe
cmp
iret
push
adc
out
or
and
sbb
mov
lea
test
cwde
ret
iret
(bad)
scas
jl
sbb
xor
ficom
je
pushf
dec
pop
lods
pop
xchg
scas
mov
pop
pusha
lahf
aam
lock
mov
adc
leave
test
fnstsw
loope
loop
add
cwde
push
mov
retf
xchg
inc
ins
xchg
mov
jecxz
test
cwde
xchg
iret
adc
int
cmp
ja
ja
out
(bad)
int3
leave
(bad)
sub
sub
and
cdq
fiadd
mov
fsubr
sbb
fadd
mov
inc
mov
pop
enter
ins
inc
mov
push
pop
daa
mov
aad
icebp
retf
push
ret
sub
cwde
dec
pusha
pop
and
cmp
inc
push
jo
cwde
retf
jmp
bound
cmp
cwde
mov
xchg
test
mov
fcomp
xor
inc
stos
mov
and
sbb
cmp
icebp
sbb
(bad)
adc
pop
je
jmp
pop
aam
out
sbb
add
sub
ds
stos
icebp
pop
cwde
mov
loopne
lods
sbb
xchg
test
sub
dec
cwde
cmp
test
push
mov
js
mov
xchg
sub
rcl
es
jmp
mov
mov
dec
xchg
fisub
loop
xchg
int
loope
test
add
inc
jbe
mov
sahf
test
bnd
push
pusha
push
adc
imul
pop
mov
shr
and
sbb
adc
fs
push
cwde
daa
inc
push
push
scas
push
jmp
sbb
shl
scas
adc
pop
ins
jne
jg
adc
or
lea
inc
mov
(bad)
push
jo
and
jo
xchg
lods
cmp
push
cmp
push
loope
popf
jp
cwde
fwait
pop
add
inc
and
rcl
sbb
xlat
mov
xchg
jecxz
mov
pop
xor
xchg
inc
add
imul
cwde
fwait
aas
icebp
adc
inc
mov
xchg
test
mov
push
ds
fdivr
dec
rol
adc
jle
adc
jmp
cmp
adc
add
cwde
xchg
jp
popf
jl
lea
xor
mov
dec
movs
loope
sbb
cmp
dec
js
aas
add
cli
push
push
cwde
xchg
mov
mov
mov
push
jecxz
(bad)
or
fadd
xchg
icebp
(bad)
(bad)
repnz
lods
jmp
mov
jns
jl
jmp
sahf
adc
rcl
or
xchg
xchg
jge
xchg
fwait
jns
xor
sbb
in
sbb
push
pop
or
xchg
js
popa
sbb
call
mov
xchg
cwd
push
test
shr
sub
call
sbb
adc
or
sbb
xchg
jno
sbb
pop
lea
and
mov
sahf
stc
into
fdivr
outs
dec
cwde
cmp
xchg
push
(bad)
hlt
jns
adc
jmp
je
cwde
mov
test
cwde
retf
jne
scas
icebp
mov
xchg
mov
jbe
stc
cmps
cwde
lea
retf
aam
mov
mov
mov
das
ss
sbb
mov
ja
sub
cwde
pop
push
inc
push
popa
mov
imul
jg
adc
sbb
push
arpl
sbb
retf
je
cmps
mov
jne
sub
les
jbe
add
(bad)
dec
pop
jge
cmp
adc
jle
push
aaa
fdiv
mov
xor
sbb
loope
mov
cmp
das
cmp
jb
mov
aad
sub
adc
fucomp
xchg
retf
cmp
stos
cmp
xlat
inc
push
push
stc
cmp
lock
loope
shl
rcl
dec
std
hlt
jnp
or
icebp
sub
adc
push
test
cmps
fisub
ja
jo
pop
or
pop
in
mov
pop
out
jo
xchg
ins
dec
push
and
jp
mov
pop
js
into
lods
or
cwde
rcr
imul
sub
cmp
lahf
test
in
push
xchg
cwde
retf
mov
ficomp
mov
ret
ds
shl
jg
xchg
jo
mov
mov
call
sbb
add
mov
in
and
mov
sub
mov
pusha
inc
aad
jl
push
repnz
xlat
sub
cmps
or
pop
and
sbb
xchg
sbb
mov
div
xchg
cmp
stc
cmp
nop
lahf
sub
adc
sbb
mov
add
sub
arpl
ins
jno
mov
fsubrp
cwde
retf
out
test
push
out
and
into
cmc
ja
kortestw
and
imul
mov
mov
lahf
or
fldcw
jecxz
jmp
rol
addr16
popf
fist
pop
xchg
mov
jne
cwde
aas
add
push
scas
es
pop
das
dec
cmp
sbb
adc
stc
js
fstp
mov
hlt
fsubrp
sbb
jle
jo
nop
jnp
cwde
add
dec
sub
fs
outs
stos
mov
and
jge
shr
scas
adc
push
ins
cmps
mov
xchg
jl
xor
adc
mov
push
and
cwde
adc
mov
cwde
lods
inc
fcmovbe
cmps
jg
xor
push
fcmovnb
dec
and
aaa
pop
cwde
mov
mov
add
loop
je
mov
mov
cmp
sar
cwde
hlt
xor
in
bndstx
arpl
int
push
popf
xchg
ret
jecxz
pushf
xchg
push
ret
mov
pop
cwde
and
sub
xchg
and
fs
sub
inc
jnp
nop
and
out
enter
lahf
cmp
test
jmp
cmps
out
mov
mov
fcomp
in
(bad)
adc
stos
retf
aad
ins
in
push
xchg
inc
pop
sub
add
pushf
scas
adc
xchg
push
xchg
dec
nop
not
lock
inc
inc
and
and
cmp
(bad)
and
pop
push
lods
xor
jne
jnp
fwait
imul
cwde
(bad)
aam
mov
cdq
clc
sbb
mov
jge
test
ret
xchg
or
ja
mov
ret
xor
js
adc
cmp
jp
enter
in
mov
neg
cmp
shl
push
inc
pop
out
jnp
mov
out
enter
fiadd
sbb
(bad)
pusha
xor
ss
sahf
cwde
js
cmps
stos
xchg
not
lods
sbb
cwde
add
push
adc
sbb
lock
cwde
xchg
jle
fwait
dec
int3
imul
cwde
adc
sbb
xchg
push
cmc
call
test
jmp
push
inc
mov
pushf
inc
xor
test
xchg
xchg
clc
and
xor
inc
ret
fcomp
dec
jbe
push
aaa
pop
in
out
inc
jo
lahf
mov
inc
and
mov
cwde
dec
sti
inc
mov
test
in
cwde
xor
retf
(bad)
inc
clc
cwde
in
and
cmps
sbb
js
xchg
ja
sub
fcom
pusha
mov
leave
cwde
fst
stc
cmp
inc
pop
sub
sub
lods
(bad)
jb
cwde
dec
xor
movs
test
inc
dec
xchg
adc
jmp
push
arpl
push
xchg
bound
mov
hlt
cwde
or
icebp
sahf
test
sar
cwde
movs
aaa
sbb
addr16
lods
stos
mov
cdq
push
neg
jmp
and
mov
cwde
fist
mov
call
iret
shr
ret
cs
xchg
mov
push
out
add
outs
mov
and
jo
call
cwde
pushf
mov
xor
mov
xchg
dec
icebp
cwde
push
or
cdq
(bad)
mov
sti
mov
je
jge
rcl
dec
xchg
mov
iret
mov
clc
loope
(bad)
data16
mov
ja
fadd
scas
sbb
fld
lods
hlt
push
call
outs
mov
add
leave
(bad)
loopne
pusha
cwde
int
push
out
xor
shl
jno
jg
or
push
pop
and
sbb
push
xchg
pop
(bad)
pop
mov
lods
cmps
shr
ret
iret
fistp
mov
fdiv
cmp
or
inc
cwde
or
adc
sbb
xchg
(bad)
lahf
xchg
mov
in
imul
cwde
(bad)
mov
push
cmp
jae
xchg
inc
cmp
push
xlat
cmps
shr
pop
mov
and
(bad)
cmp
sub
jbe
fbld
pop
fmul
sbb
sbb
shr
push
inc
jo
jl
jl
shl
out
in
retf
cmp
popf
cwde
fs
inc
fdiv
fldcw
cld
add
push
out
mov
imul
jecxz
sub
cwde
push
and
sub
dec
movs
cwde
mov
add
mov
xchg
pop
movs
add
mov
aad
pop
xor
fsub
cwde
jbe
fwait
outs
mov
in
mov
hlt
mov
adc
mov
imul
leave
retf
or
xor
das
xor
sar
jns
popa
mov
shl
lahf
in
jecxz
fld
push
adc
sbb
das
xor
pop
mov
adc
lods
push
dec
loop
pop
lds
popf
jnp
sbb
add
push
pop
cwde
jmp
arpl
push
(bad)
pop
mov
pop
imul
ret
sbb
sbb
in
inc
inc
js
cs
das
cwde
cmps
mov
xchg
mov
shl
retf
cwde
enter
in
adc
and
or
mov
add
(bad)
stc
adc
fwait
cmp
sub
cmc
pusha
loopne
xchg
test
pop
sub
sub
ds
retf
js
cmps
mov
inc
in
icebp
sbb
push
sub
jae
pop
or
aaa
mov
xchg
and
jbe
je
popf
xchg
mov
or
out
imul
cmp
push
out
xor
push
pop
and
inc
fwait
inc
xchg
or
cmp
xchg
and
dec
ret
scas
lea
test
cdq
cwde
hlt
dec
push
outs
push
mov
imul
cmp
cmp
mov
idiv
adc
nop
push
cwde
(bad)
xchg
addr16
das
push
sub
aas
ret
sub
xchg
js
sbb
xchg
push
retf
aam
(bad)
push
adc
sbb
inc
push
sahf
adc
stos
(bad)
cld
add
mov
mov
mov
pop
adc
test
pop
add
mov
jmp
xor
push
addr16
into
ds
pushf
mov
nop
mov
xchg
loop
in
cbw
jae
cmps
mov
xchg
stos
call
dec
pop
loopne
mov
or
not
or
xor
push
shr
xchg
mov
jmp
xchg
sub
and
xchg
mov
shl
fisttp
sub
jbe
dec
add
sub
push
inc
fdiv
repnz
enter
int3
(bad)
push
icebp
adc
fmul
imul
pop
fs
ja
mov
push
dec
pusha
je
pop
in
mov
cmp
sbb
vlddqu
add
cmc
retf
adc
or
in
jne
rcl
sub
and
fistp
pop
sbb
dec
xchg
pop
js
inc
repnz
sbb
pop
mov
cmc
adc
xchg
ror
fcmovnb
rol
scas
cwde
das
xor
ins
fwait
call
dec
stos
mov
div
cwde
mov
and
cld
and
jnp
clc
jae
inc
retf
or
popf
dec
sub
movs
mov
stos
sbb
cmps
out
(bad)
sti
std
shl
push
push
scas
cmp
cwde
xchg
xlat
mov
xchg
mov
mov
add
cmp
mov
leave
(bad)
cwde
jl
fcmovb
addr16
ins
cwde
or
mov
mov
sbb
and
sub
hlt
dec
cmp
(bad)
sbb
add
push
jo
pop
je
pop
in
lea
mov
xor
loop
add
xchg
popa
cwde
cdq
mov
dec
gs
dec
sub
inc
sub
shr
ja
mov
movlps
cwde
jns
add
pop
pop
cli
or
xchg
loope
retf
xchg
in
fcomp
cwde
xchg
or
mov
ss
jmp
dec
mov
cmps
loope
js
inc
pushf
call
lock
dec
xchg
fisttp
repz
call
fsubr
push
call
test
sti
jmp
pop
sar
in
push
das
inc
pop
lods
leave
xchg
fist
adc
fs
cwde
ss
sahf
or
cmp
ficomp
adc
push
jno
pop
xchg
div
js
ss
cmp
sbb
neg
fstp
test
xor
test
or
or
jle
cwde
cmp
call
js
dec
jp
push
nop
mov
and
cmps
aas
cmp
call
outs
fcomip
jbe
ficom
cmp
xchg
call
fsubr
cdq
mov
and
xchg
std
fyl2x
adc
jne
sub
arpl
jbe
retf
(bad)
scas
cmc
(bad)
imul
xor
and
punpckhbw
aam
ins
cld
loopne
test
jnp
dec
cmp
cmp
dec
add
xchg
push
test
mov
fcom
jne
icebp
dec
imul
adc
and
add
aam
fist
test
mov
(bad)
mov
add
popa
mov
add
daa
pop
lahf
cmp
ins
arpl
inc
xchg
mov
pop
cwde
addr16
push
icebp
pop
test
mov
mov
scas
sbb
daa
aam
mov
mov
dec
leave
jbe
not
ss
cmp
enter
mov
fadd
mov
xchg
push
jo
mov
mov
pop
dec
outs
sbb
pop
adc
jle
mov
ja
xor
movs
mov
jle
outs
aad
std
(bad)
test
or
inc
(bad)
scas
cwde
sub
cmp
ret
fdivrp
cmps
pop
test
rcr
imul
mov
sbb
shl
es
cs
cwde
xor
imul
dec
adc
or
test
neg
xor
mov
test
jle
daa
xor
pop
xor
fdivr
mov
push
cwde
lahf
outs
xchg
stos
movs
xchg
xor
push
(bad)
mov
ds
dec
out
into
jmp
not
dec
sbb
hlt
jnp
test
sbb
dec
ret
mov
push
mov
rcr
je
leave
loopne
mov
dec
js
or
aas
fdiv
sbb
pop
sub
sub
imul
adc
cwde
and
sbb
in
cwde
retf
retf
pop
add
mov
jle
pop
jecxz
mov
ret
fninit
in
fs
cdq
mov
xor
cs
mov
lea
retf
sbb
xchg
popf
test
jno
cmp
fcom
xchg
xchg
das
outs
cwde
stc
adc
cwde
dec
jns
jl
addr16
xchg
aaa
stos
and
and
loope
lahf
aas
prefetcht1
cwde
inc
xor
mov
xchg
sbb
int
icebp
(bad)
xchg
ret
fstp
lods
(bad)
inc
sub
lock
mov
or
test
add
icebp
imul
cli
push
pop
outs
xchg
or
(bad)
mov
and
in
pop
push
pop
imul
xchg
mov
mov
xor
adc
jg
xchg
and
xlat
ins
aaa
jle
push
adc
popa
lahf
add
adc
mov
adc
aad
sbb
in
xchg
add
or
inc
add
and
call
sub
xor
push
scas
mov
invd
out
add
push
xor
repnz
stos
sbb
lock
ret
inc
xchg
push
mov
aad
jg
or
leave
dec
ficom
adc
mov
mov
and
ret
pop
dec
push
outs
lods
xchg
dec
mov
loope
retf
cmp
(bad)
sub
fisttp
xor
and
cwde
(bad)
jae
mov
cwde
jge
aas
or
stc
sub
pop
pop
cdq
or
sbb
pop
loop
ss
xchg
and
sbb
cwde
push
mov
fisubr
in
popf
std
dec
cld
cmp
imul
sbb
in
popa
cwde
and
push
repnz
mov
pop
inc
pusha
dec
add
sbb
sub
xchg
push
scas
and
mov
jae
cmc
imul
shr
imul
xlat
pop
int3
inc
pop
out
ss
test
mov
jb
(bad)
mov
jae
shl
lods
mov
cmc
std
cmovnp
test
sbb
mov
cwde
stos
add
add
repz
or
mov
(bad)
leave
dec
xchg
les
lods
lds
jae
imul
xchg
cmps
pop
adc
sbb
clc
or
jg
outs
push
pop
leave
jmp
lods
js
push
jne
nop
cli
pop
test
(bad)
mul
daa
add
jns
out
in
inc
jg
adc
arpl
or
mov
mov
sti
shr
imul
rcl
stos
movs
test
sar
mov
mov
pusha
test
fisubr
enter
cmp
xor
xor
jmp
and
mov
movs
clc
adc
push
cs
lods
cmp
call
sbb
jne
adc
in
fisub
cwde
jno
xchg
imul
pop
cwde
jg
push
and
cwde
or
adc
push
mov
mov
cdq
cwde
in
xor
push
jne
mov
ret
pop
xchg
mov
mov
xor
cmp
sbb
nop
(bad)
jbe
popf
add
int
ins
fwait
mov
push
ins
cwde
loope
cmp
jnp
xchg
cwde
arpl
inc
push
jl
mov
je
or
rcl
push
in
xchg
not
std
sbb
pop
cmps
sub
(bad)
push
fucomp
cld
jmp
mov
and
lods
cmc
fyl2x
jnp
int
stos
and
mov
into
adc
jle
jbe
in
add
jge
push
ret
out
sbb
popf
arpl
or
int3
loopne
dec
test
int
jmp
push
jg
and
pop
call
retf
jecxz
push
lahf
gs
pop
inc
daa
xchg
mov
or
(bad)
jnp
stc
jbe
jl
inc
xchg
push
add
xchg
inc
test
xchg
pusha
inc
fs
cmp
lea
cmp
outs
dec
sub
fcom
inc
rcr
ja
test
icebp
cwde
les
shl
out
ja
fcomp
mov
jnp
and
ret
inc
push
push
cmp
and
adc
lahf
ss
std
out
sbb
repnz
sub
push
xchg
lahf
cmps
mov
cmp
cwde
in
xor
cwde
fsubr
std
lea
loopne
sbb
leave
call
jg
and
lods
inc
bound
sub
call
ss
out
dec
movs
lods
mov
test
inc
scas
mov
mov
push
and
and
in
xchg
(bad)
and
xchg
cmp
sub
test
jp
enter
ret
jbe
ret
jle
sti
lds
outs
mov
jno
mov
sbb
or
inc
and
or
shr
inc
xchg
aas
fisub
mov
(bad)
pop
fisub
or
cdq
xor
test
mov
out
sbb
(bad)
test
adc
pop
std
js
sub
push
daa
xchg
xchg
into
in
pop
fdivr
popa
je
xchg
aas
add
arpl
es
icebp
xchg
inc
sub
or
mov
sar
fcmovnb
push
xor
pop
or
int3
stos
jbe
xchg
int
sub
jge
(bad)
fmul
and
inc
mov
fdivr
ret
loopne
rcl
adc
mov
push
pop
pop
fcom
mov
test
ins
xchg
enter
jg
inc
loopne
mov
and
jmp
outs
cmps
xchg
jb
mov
jmp
mov
push
or
xchg
xor
fimul
xor
rol
push
mov
cmps
or
cmp
push
pop
dec
push
mov
jle
mov
int
cwde
out
jo
and
adc
xlat
jbe
mov
outs
test
inc
test
ins
les
push
pop
cmp
adc
out
xlat
xchg
arpl
sbb
pop
lahf
fwait
xchg
jl
bound
dec
nop
cmps
mov
(bad)
dec
adc
dec
dec
push
repnz
(bad)
cdq
les
neg
loopne
fisub
cmp
test
ror
lahf
pop
fcom
mov
jp
mov
sahf
pop
mov
or
cmps
aaa
sbb
jbe
mov
lahf
inc
inc
ds
dec
cmps
mov
add
rol
mov
jg
lock
xchg
popa
addr16
fisttp
push
inc
(bad)
cmps
pop
test
pop
pop
or
addr16
test
push
xchg
inc
sub
mov
jmp
data16
lods
add
add
cmp
lds
adc
mov
int3
cs
fnsave
xchg
pop
mov
dec
in
dec
push
inc
mov
cwde
add
out
pop
cmc
lds
bound
clc
push
and
daa
leave
mov
jecxz
mov
add
ret
dec
movs
cdq
and
cmps
mov
enterw
cwde
xor
jmp
dec
sub
jmp
mov
pushf
xlat
fsubr
cmps
loopne
outs
push
mov
mov
dec
in
cwde
ret
push
mov
icebp
ret
sti
xchg
(bad)
pop
xchg
stc
es
fst
js
pop
ins
xchg
repz
sub
outs
jae
cs
xchg
push
and
and
(bad)
mov
cmp
cmp
les
dec
and
sub
cmp
cmp
xchg
mov
cli
imul
xchg
xor
ja
mov
sti
in
mov
daa
xor
movs
mov
dec
pop
adc
stc
adc
leave
clc
out
and
pop
pop
cmp
sbb
jae
xor
dec
cwde
dec
pop
jbe
mov
pop
cmps
or
push
inc
(bad)
cwde
ret
aaa
jbe
add
mov
or
repnz
add
leave
jno
adc
pushf
mov
(bad)
adc
and
mov
adc
mov
movs
sbb
pop
jge
fimul
inc
movs
lea
vbroadcasti64x2
xchg
shl
xlat
xor
cld
xchg
outs
jg
jns
inc
enter
or
mov
adc
cmp
shl
inc
mov
push
sahf
mov
sub
jg
mov
push
push
mov
sbb
add
inc
mov
xchg
push
out
mov
push
inc
xor
or
inc
cwde
push
dec
or
mov
xchg
mov
ins
jbe
jo
cmp
cdq
xchg
fmul
in
dec
lahf
mov
je
xor
daa
mov
jmp
lods
cwde
cmp
or
call
repz
je
mov
lock
adc
arpl
and
and
add
or
push
loope
fsub
lahf
fdiv
idiv
xor
fldenv
cmc
mov
popf
sar
cs
cli
popf
loope
ret
aaa
lods
pop
leave
stos
add
in
stc
ficom
(bad)
cwde
push
dec
mov
mov
jmp
lock
push
jo
cwde
mov
aad
add
and
not
push
jns
inc
xor
cmp
(bad)
call
add
icebp
push
cwde
dec
jno
imul
mov
jecxz
sbb
ins
mov
jp
loop
inc
fs
loopne
cmps
hlt
enter
mov
movs
xchg
mov
pop
lods
scas
mov
ret
push
shr
out
jmp
retf
mov
shl
cmp
mov
iret
fisttp
sbb
jecxz
repnz
dec
push
jmp
mov
scas
adc
xchg
popa
push
pop
shl
pop
inc
adc
sbb
mov
and
add
add
adc
cmp
jb
imul
xchg
ins
lock
mov
add
sub
retf
jb
mov
lods
js
dec
popf
or
inc
xor
bound
call
bound
mov
out
sbb
fadd
cwde
fsub
sti
or
outs
fcomp
cmps
xor
jbe
ret
shl
daa
dec
arpl
movs
xchg
add
outs
jl
xchg
jmp
sysexit
loop
fadd
cwde
in
ins
inc
mov
jno
into
popf
loopne
mov
ins
leave
cwde
test
mov
cmp
dec
jne
add
inc
jl
clc
call
xchg
sub
dec
out
js
fsubr
imul
or
push
mov
and
jne
jb
call
mov
sub
sbb
jmp
test
mov
jle
sbb
rol
in
scas
pop
jo
cdq
(bad)
xor
loopne
ja
cmps
inc
lock
add
dec
cwde
adc
loope
push
scas
mov
cwde
(bad)
mov
nop
or
scas
ss
push
stos
div
mov
jge
jbe
mov
cmps
mov
lods
loopne
and
test
jno
sub
sub
xchg
loope
cmp
sbb
add
jb
fistp
pop
fldenv
in
scas
xchg
mov
adc
cmp
pop
push
fstp
xchg
cmp
lahf
arpl
add
scas
pop
cdq
mov
inc
mov
stc
xchg
daa
into
mov
mov
cdq
cwde
dec
int
xor
stos
sub
sub
bound
cli
cwde
mov
cmp
push
adc
fbld
push
jle
loopne
or
neg
pop
mov
sbb
cmc
push
or
inc
out
stc
or
xchg
adc
sbb
push
sbb
xlat
sbb
push
aam
data16
sbb
or
xchg
sub
icebp
hlt
mul
mov
mov
jno
dec
lods
(bad)
scas
popf
cs
jo
cwde
jmp
dec
jmp
xor
pop
call
dec
pusha
rcl
inc
loop
lahf
imul
pop
xchg
sub
movs
xchg
sub
les
cwde
iret
jl
es
fdivp
lahf
cmp
push
jmp
dec
loopne
movs
xchg
ret
shl
ret
std
push
pop
int
sub
imul
push
cmp
scas
jmp
xlat
lods
cwde
mov
call
cwde
popf
pop
daa
rol
mov
gs
inc
and
pop
push
and
pushf
bound
xchg
mov
or
sbb
sbb
sub
pop
cs
xchg
aas
ins
sbb
fadd
rol
pop
cmp
das
fisttp
or
sub
stc
out
push
and
xchg
xchg
fild
gs
fadd
adc
and
cld
lods
enter
sbb
cmps
jecxz
sbb
sti
into
push
repz
loope
test
adc
mov
xchg
scas
stos
mov
add
mov
xor
xchg
popf
out
aad
repz
or
push
clc
push
lea
adc
mov
bound
imul
and
int3
sahf
jmp
mov
(bad)
fdivr
pop
jb
cwde
ret
jle
mov
dec
or
inc
out
cwde
int
mov
add
sbb
mov
loope
dec
dec
rcr
aas
adc
jnp
sti
xchg
pop
cmp
adc
test
mov
outs
je
mov
enter
cmps
and
push
cmc
cwde
and
pop
aad
cwde
dec
pusha
and
cwde
sub
outs
jae
adc
mov
retf
and
xchg
nop
cmp
jmp
and
cdq
dec
call
js
in
ins
int3
pop
push
sub
sbb
inc
mov
push
sub
mov
adc
push
mov
sbb
sub
jb
retf
ins
cdq
xor
mov
dec
int
(bad)
rol
xchg
lods
int
jnp
cwde
pop
sub
fnstsw
cwde
movs
adc
movs
ss
xchg
mov
inc
fcomp
out
push
outs
dec
sub
adc
sti
dec
push
jb
hlt
xor
mov
retf
add
ficomp
fs
xchg
ins
(bad)
jle
loope
push
push
mov
outs
push
and
cwde
aaa
sbb
cmp
inc
cwde
sub
mov
mov
jo
cli
(bad)
sbb
adc
rcl
mov
sbb
pop
mov
js
sar
int
js
adc
movs
in
rcr
or
test
sub
repz
mov
pmuludq
call
mov
mov
mov
lahf
and
xchg
adc
imul
mov
stos
pop
and
call
jbe
cli
scas
mov
out
leave
popf
loope
push
js
xchg
jp
lock
add
pop
pop
nop
xchg
fcom
test
push
sub
pop
jp
cmp
in
repz
jp
sbb
movs
fld
js
jnp
pop
dec
pusha
jno
mov
lahf
cwde
cmc
fnstenv
sbb
data16
fwait
push
sbb
aaa
sbb
das
cmps
loope
mov
jmp
pop
pop
cwde
or
or
pop
xchg
jle
cwde
mov
in
push
xchg
sahf
sbb
sbb
mov
xor
jmp
js
and
int3
xor
fcomp
adc
xchg
scas
lods
mov
(bad)
push
test
iret
aad
cwde
push
in
adc
fisubr
pop
pop
inc
push
aas
pop
xchg
and
call
push
in
adc
test
jl
jb
push
adc
add
lds
clc
xor
pop
pop
cmp
lahf
cmps
jle
scas
loope
pop
shl
mov
lahf
ja
arpl
loop
jge
lea
pop
pop
rol
mov
movs
mov
xor
sar
or
and
idiv
adc
xor
mov
xchg
in
nop
cmps
pop
mov
fcom
mov
shr
je
(bad)
xchg
adc
hlt
imul
jnp
je
bound
movs
mov
cwde
mov
test
push
jmp
out
call
sbb
sbb
dec
xchg
inc
mov
pop
call
in
data16
retf
push
jmp
xchg
push
data16
pushf
ins
test
aam
sub
mov
sbb
xlat
fist
inc
adc
stos
out
sbb
iret
out
cwde
fiadd
sub
ret
mov
cdq
push
push
pop
add
int
mov
sub
push
or
cwde
rcl
jmp
int3
(bad)
cs
cmp
sbb
mov
dec
pop
cwde
aam
into
aad
repnz
sbb
in
mov
pop
jmp
lock
cwde
test
or
add
cwde
add
and
mov
sahf
mov
cwde
mov
test
mov
xchg
push
pop
dec
outs
clc
jg
sub
mov
xchg
inc
imul
repnz
sub
mov
out
cwde
sub
jno
mov
mov
icebp
adc
add
ins
hlt
into
repz
and
ja
jmp
jp
xchg
jae
mov
xchg
xor
ss
push
(bad)
loopne
inc
pop
cwde
xor
jns
mov
mov
leave
adc
add
adc
pop
jecxz
lahf
or
mov
xchg
xchg
cmp
loope
xor
cwde
mov
jne
and
xchg
retf
stos
mov
sbb
sahf
bound
mov
stos
push
popa
sub
jp
in
cwde
jecxz
xor
ins
inc
lods
ins
cwde
(bad)
sti
aad
leave
xlat
sub
mov
and
cwde
int
icebp
lods
jmp
xchg
mov
and
mov
in
xchg
pop
shl
jns
imul
call
aaa
add
repnz
cwde
out
repz
cmp
shl
cwde
hlt
xchg
cdq
movs
mov
sbb
jecxz
xlat
cwde
mov
jns
mov
push
pushf
or
and
push
(bad)
jmp
js
and
xchg
inc
adc
adc
test
and
(bad)
loopne
or
loope
or
outs
jl
fsub
sub
jg
sub
icebp
xchg
fisubr
push
pop
ficom
jecxz
sub
inc
cwde
sub
dec
sub
(bad)
xchg
xchg
gs
xchg
jp
test
sub
cwde
xor
or
neg
or
lds
sbb
xor
sub
adc
retf
cmp
pop
les
inc
sbb
mov
push
rol
inc
push
dec
(bad)
js
push
iret
cwde
das
push
adc
ret
mov
mov
cmp
cmps
dec
jg
mul
or
jge
cmp
ret
push
in
and
or
xchg
in
sub
sbb
stos
cwde
test
icebp
dec
ja
scas
(bad)
enter
or
push
mov
sti
jnp
sbb
jb
xchg
popf
imul
or
bnd
xor
std
mov
xchg
push
in
sbb
cmp
xchg
sub
arpl
mov
mov
movs
add
sbb
cwde
sbb
sub
js
out
jne
dec
push
fcom
xchg
mov
shl
repnz
jo
daa
ror
pop
mov
(bad)
imul
ds
data16
imul
or
xchg
pop
pop
adc
sbb
mov
ins
movs
adc
fadd
pop
jns
lahf
mov
call
pop
xchg
adc
pop
cdq
push
and
push
js
mov
xor
sahf
mov
repnz
xchg
cmp
and
inc
push
movs
xchg
int
imul
dec
inc
pop
sub
adc
fmul
jmp
or
es
push
ret
mov
cmp
fsubr
sub
pop
or
(bad)
jg
es
jae
push
retf
shl
sub
xlat
movs
mov
jnp
ret
cwde
cmp
push
add
retf
pop
mov
jns
or
adc
push
lea
loop
mov
or
lea
pop
fmul
pop
repnz
sub
mov
dec
mov
or
mov
cwde
leave
xor
ss
cli
cdq
in
(bad)
ds
pop
adc
loope
mov
xchg
je
push
cs
sub
or
xchg
jo
or
cmps
xchg
clc
retf
bound
ja
es
shl
pushf
hlt
adc
loope
or
cdq
dec
xor
retf
xor
cmp
mov
sbb
xchg
popf
mov
test
int
inc
jae
sbb
fnstsw
sbb
cwde
and
push
fwait
pop
mov
scas
fsubr
sti
sbb
cwde
int3
jle
pop
xchg
out
imul
outs
stc
out
sar
cwde
mov
jg
xchg
gs
dec
mov
in
jmp
mov
push
fcom
xchg
int
out
out
pushf
adc
mov
ss
ret
aam
ins
(bad)
ffree
mov
push
js
gs
adc
call
xlat
test
idiv
pop
pop
cld
push
scas
sbb
aaa
xchg
es
push
pop
and
or
je
inc
cs
sub
cwde
lahf
leave
aam
rcl
iret
and
retf
xchg
push
jmp
sub
retf
or
cwde
pop
mov
add
loope
sbb
es
aas
xchg
ror
cli
pop
jmp
out
jmp
mov
sub
js
xchg
xchg
mov
cmp
cmp
jecxz
inc
pop
mov
push
rcr
mov
xchg
fs
addr16
dec
pop
(bad)
fcmovnu
movs
(bad)
cwde
xlat
jecxz
add
pop
in
sub
scas
xor
push
xchg
movs
add
add
imul
cmc
mov
jmp
push
cwde
popf
data16
dec
pushf
or
test
loopne
fdiv
vpxor
ret
movs
sbb
mov
add
popa
js
xchg
cmp
scas
cmp
jne
xlat
push
rcr
ins
sbb
mov
pop
aad
in
fidiv
mov
cwde
push
fcomp
movs
mov
imul
sbb
cmp
mov
fdivp
xchg
xchg
sub
jge
adc
ret
sub
ret
ins
push
cwde
or
test
ret
jmp
push
cwde
xchg
out
xor
or
sub
push
jp
arpl
imul
pop
add
xchg
dec
(bad)
loopne
and
pusha
adc
stos
mov
pop
jae
mov
and
pusha
jge
sahf
mov
sbb
mov
in
sub
xchg
push
jae
mov
cld
cwde
in
xor
stc
mov
mov
loopne
cmp
mov
push
cwde
sahf
aam
fucom
shl
rcl
iret
xchg
adc
adc
lds
clc
sbb
jge
jae
or
push
in
das
fstp
loop
xlat
cmp
jmp
scas
fadd
pop
push
sbb
sub
xchg
xor
lahf
dec
sub
sub
mov
aam
js
mov
ret
repz
adc
mov
cmp
add
xchg
sbb
push
jo
popa
xlat
mov
xchg
add
fldenv
dec
or
jp
xchg
je
push
aas
pop
jle
loope
sub
mov
cmp
in
aas
sbb
pop
sub
cmp
dec
add
enter
call
lods
mov
fst
rcl
push
retf
add
xchg
push
xchg
lods
mov
cmps
fsubr
retf
xor
sub
xchg
add
je
pop
cmp
movs
fadd
stc
int3
rcl
lds
add
in
cwde
mov
adc
fld
xchg
inc
rcr
jmp
mov
mov
inc
pop
enter
jle
xchg
lds
mov
mov
retf
outs
sbb
int
xchg
jp
out
cmp
imul
adc
pop
aaa
shr
in
cld
retf
cwde
jp
mov
(bad)
xlat
cwde
sahf
out
sub
iret
cwde
fdiv
outs
adc
fidivr
das
xor
inc
mov
mov
retf
cld
pop
dec
sub
shr
push
sbb
jae
int3
pop
test
sbb
dec
test
add
sub
arpl
xchg
in
aaa
inc
inc
imul
dec
movs
mov
cwde
adc
or
into
aaa
test
inc
pop
mov
jl
jp
dec
outs
jnp
outs
idiv
push
push
or
or
sub
cwde
out
adc
sbb
push
idiv
enter
hlt
xor
inc
adc
imul
jno
repnz
fs
sub
retf
std
jmp
lock
test
sub
repnz
mov
and
aas
push
mov
xchg
ds
test
loope
and
or
imul
test
sahf
lods
sbb
mov
dec
lods
ins
fidivr
ins
push
cwde
(bad)
jne
mov
mov
aaa
sbb
rcl
add
cmp
data16
cwde
lods
in
call
loopne
push
mov
repnz
repz
fisttp
mov
push
pop
cmp
retf
in
add
or
cmp
dec
aas
icebp
jge
inc
test
and
lods
cwde
(bad)
xchg
pop
rcl
pop
or
test
push
cwde
push
icebp
jle
int3
or
mov
or
rcl
and
mov
stos
loopne
ds
(bad)
pop
dec
push
sub
push
mov
fsubr
mov
(bad)
mov
jo
jp
mov
inc
cmp
pop
ds
jg
bound
imul
mov
fldenv
push
popf
mov
xchg
push
fisubr
push
or
cwde
adc
ja
dec
cs
or
pop
inc
leave
or
xor
imul
call
jns
out
or
mov
hlt
clc
jp
cli
mov
sbb
add
add
add
cmps
push
cmp
mov
push
popa
push
inc
frstor
loope
int
sbb
jns
mov
pop
cmp
lods
cwde
shr
loopne
xchg
xchg
pop
and
pop
and
das
stos
call
loop
jb
repz
sbb
mov
cwde
or
xor
mov
(bad)
shr
fisubr
xor
push
cmp
stos
mov
mov
hlt
rol
cwde
popa
pop
and
cmp
jge
xchg
xchg
js
mov
test
push
shr
les
push
mov
add
leave
ret
xchg
jmp
jmp
test
mov
adc
adc
nop
das
imul
aaa
cwde
add
outs
mov
xchg
dec
call
jle
clc
pop
(bad)
xchg
dec
pop
je
cdq
push
fs
dec
pop
leave
loopne
jp
or
push
xchg
add
push
(bad)
fsubp
mov
xchg
inc
push
aaa
out
mov
cmp
retf
sub
repnz
jnp
xchg
addr16
xchg
in
push
retf
lock
xchg
cwde
std
cmps
jnp
adc
sbb
jmp
jae
into
repnz
mov
popa
jno
pop
enter
mov
xchg
push
je
sub
push
add
sar
xor
fstp
sbb
nop
mov
jb
enter
push
movs
mov
cwde
jge
mov
sar
test
or
cmp
(bad)
cwde
imul
push
das
mov
out
inc
adc
mov
xchg
iret
cmp
sahf
mov
aas
imul
xchg
sar
rcr
xchg
shr
es
in
out
loopne
ja
xchg
jl
mov
mov
nop
into
loope
cmp
call
std
rcl
out
push
and
hlt
imul
popa
add
jns
mov
push
inc
inc
cmp
je
dec
push
sbb
js
pop
mov
sbb
fwait
je
jno
lea
xchg
pop
mov
(bad)
mov
lds
jo
pop
loope
xchg
dec
push
leave
sub
inc
in
test
in
adc
jmp
retf
push
repnz
dec
jl
out
mov
jp
scas
xor
adc
push
xchg
xlat
mov
sbb
lahf
jae
imul
(bad)
lea
hlt
aam
mov
mov
sbb
les
cld
cs
xchg
inc
mov
repnz
(bad)
ins
pop
adc
mov
sbb
inc
jo
cwde
in
jmp
add
push
and
cwde
imul
jmp
and
popf
mov
iret
bound
cdq
ins
xchg
jecxz
(bad)
xchg
jnp
data16
rcl
scas
push
stos
xchg
and
jae
sub
sahf
popa
lods
lahf
mov
int
retf
data16
cmp
(bad)
lahf
jge
or
sbb
scas
sbb
rol
mov
add
mov
sub
adc
mov
sbb
sub
sub
out
inc
xchg
xchg
dec
mov
out
loope
cmps
xor
outs
mov
xchg
leave
call
in
sbb
mov
in
aas
ja
rcl
cwde
(bad)
movs
scas
loope
sbb
mov
xchg
outs
mov
inc
fxch
jns
rcl
pop
cwde
dec
mov
push
pushf
mov
jne
mov
adc
mov
add
popf
loopne
jl
or
loopne
push
hlt
lds
out
xor
ja
mov
dec
sbb
push
ret
std
(bad)
clc
xor
jae
(bad)
(bad)
cwde
call
call
push
sub
shl
movs
mov
daa
shl
test
sar
inc
mov
dec
jl
ret
int
fldcw
xchg
or
jns
mov
mov
pop
ds
add
aad
in
aas
or
and
popf
jl
(bad)
dec
cwde
add
(bad)
and
mov
cmp
cwde
pop
jg
mov
mov
cs
xchg
lahf
inc
lods
loope
fcomip
jne
dec
xchg
popa
or
lahf
add
inc
push
xchg
or
adc
cwde
jge
sbb
jl
or
cwde
and
push
imul
cld
mov
clc
add
jbe
add
xchg
mov
addr16
popf
mov
outs
test
dec
ret
push
test
pop
ret
cdq
cwde
fs
mov
add
xchg
out
sbb
xor
aas
aad
sbb
cmp
rcr
fst
outs
jmp
jg
dec
cs
pop
dec
push
dec
xor
mov
mov
inc
dec
mov
lock
adc
in
cli
sub
out
cwde
rol
lahf
sub
fisubr
push
jg
pop
sub
mov
sub
cmp
fisub
icebp
cmp
adc
mov
mov
and
jns
adc
push
fcomp
imul
ds
cmc
push
pop
adc
int
sub
xchg
jecxz
sbb
cld
push
ins
and
add
and
cwde
mov
popa
mov
cmp
push
sbb
xchg
xchg
lods
mov
int3
adc
pop
lahf
sbb
imul
imul
ret
clc
cli
pop
cmp
sbb
test
mov
pop
popa
xchg
push
sub
mov
inc
cmc
int3
push
inc
hlt
test
xchg
aas
cmp
(bad)
mov
pop
sbb
int3
jbe
aas
xchg
sub
cmp
xor
popf
rcl
fdiv
sti
inc
xchg
ja
nop
shld
sbb
and
xchg
jp
mov
sbb
xchg
mov
test
lahf
arpl
push
aam
ss
mov
popa
dec
movs
rol
fistp
inc
pop
jle
jb
cwde
aad
push
hlt
mov
add
sbb
xchg
push
mov
fcomp
sbb
add
fisttp
jmp
ja
xchg
dec
jle
sbb
daa
jmp
arpl
dec
xchg
retf
sar
fs
or
add
push
iret
xchg
mov
repz
xchg
fisub
push
adc
or
(bad)
jl
sbb
popa
mov
rcr
stc
shl
cwde
pop
jbe
jmp
cwde
out
scas
jmp
push
das
fwait
xchg
sets
mov
jne
(bad)
xchg
fmulp
shl
clc
and
out
cwde
sahf
fs
mov
cmps
mov
xchg
adc
mov
xor
fwait
popa
je
loopne
(bad)
repnz
xor
lods
mov
js
invd
sti
retf
xchg
cli
das
aaa
es
sbb
mov
stc
cwde
inc
out
retf
dec
xchg
or
int3
and
(bad)
mov
sbb
movs
test
adc
fidivr
int3
add
add
dec
clc
pop
adc
mov
inc
cwde
bound
into
fst
mov
push
adc
push
pop
xor
mov
inc
pop
push
xchg
mov
hlt
mov
pushf
fs
adc
add
pop
xchg
mov
xchg
mov
xchg
xchg
or
inc
dec
push
test
mov
idiv
and
sets
inc
test
cwde
stc
test
(bad)
sub
mov
inc
inc
js
xlat
cwde
push
sbb
push
sbb
and
jg
cmp
jae
mov
loop
xchg
inc
jo
xchg
cmps
jns
jne
jp
(bad)
ins
cs
lods
call
push
jle
inc
ins
fs
ja
cmps
aam
jg
jnp
dec
ret
stos
cwde
std
pop
stc
sub
or
das
mov
fldln2
jo
sub
jl
cwde
or
fadd
fcom
dec
xor
pusha
add
pop
mov
or
test
inc
outs
popf
in
icebp
neg
and
inc
pop
push
dec
call
cmps
mov
push
pop
jmp
jb
cwde
(bad)
(bad)
adc
es
sub
sbb
pusha
sub
fs
jae
scas
cwde
mov
int3
jmp
ret
call
mov
xchg
gs
std
(bad)
test
lods
xchg
jge
push
mov
cmp
xlat
repnz
cwde
fisubr
(bad)
mov
fs
sub
xchg
and
add
and
shl
test
or
add
in
cdq
enter
rcl
cmp
int3
xchg
ins
cmp
jl
mov
call
ret
cs
cmps
shl
push
xor
mov
push
push
test
cmps
adc
repnz
call
mov
dec
xor
(bad)
fimul
inc
addr16
sbb
in
jge
jecxz
inc
xchg
(bad)
sti
or
xor
cwde
push
ss
mov
ret
or
mov
mov
retf
sbb
add
jb
aad
bound
pop
sti
pop
xor
enter
adc
adc
repz
call
lods
js
xor
mov
push
leave
(bad)
mov
sbb
mov
mov
lods
xchg
xchg
imul
movd
sbb
das
pop
push
dec
int3
test
add
push
or
xchg
pop
add
pop
sbb
ins
cmp
mov
and
or
xchg
pushf
test
xor
mov
sbb
mov
xchg
pop
cli
rol
pop
in
dec
sub
imul
mov
add
add
ror
bound
movs
xchg
mov
or
(bad)
mov
push
das
(bad)
loop
push
dec
add
sub
cwde
mov
add
bound
cwde
xchg
arpl
outs
int
xchg
inc
sbb
rol
inc
xchg
call
jo
cwde
jo
mov
xor
dec
sub
jecxz
popa
xchg
test
or
stos
loop
loopne
test
cmp
pop
sub
jle
cmps
mov
fnsave
inc
popf
mov
xchg
jo
and
or
mov
inc
push
mov
repz
sub
dec
sbb
jno
mov
or
cwde
mov
push
les
hlt
int
call
outs
cwde
sbb
push
jle
fwait
xchg
int3
addr16
cwde
mul
bound
cwde
adc
loopne
(bad)
rcr
xor
outs
xor
pop
ficomp
sbb
inc
mov
xor
cwde
mov
adc
pop
cmp
mov
cwde
mov
ret
cwde
xor
or
adc
sbb
xchg
and
or
pop
outs
xchg
stos
cli
retf
ins
pop
loop
rcr
hlt
jle
pop
mov
aad
and
hlt
adc
pop
inc
mov
adc
inc
inc
fidivr
iret
inc
cs
in
cwde
dec
ror
call
or
in
test
or
fst
mov
(bad)
sub
cmp
(bad)
fcom
xchg
mov
int3
ret
pop
jb
out
and
fldenv
mov
mov
inc
xchg
ficom
cmps
and
push
in
cld
into
bound
(bad)
rcr
mov
xchg
pop
xor
adc
jne
out
pop
xor
fcomp
add
out
cmp
sub
dec
popf
push
dec
dec
push
mov
cdq
enter
cwde
sub
jae
xor
cwde
xor
mov
jns
fild
mov
fsubr
pusha
and
arpl
inc
fucomip
cwde
push
pop
call
push
lea
jge
mov
cmp
(bad)
mov
xchg
and
xlat
shl
shl
push
fwait
xchg
mov
pusha
icebp
les
dec
into
xlat
fistp
cmp
(bad)
sar
cwde
lods
int
sub
push
jo
jno
xor
pop
out
sub
xor
xor
cwde
lea
lods
and
cwde
fild
dec
test
pop
test
push
out
inc
outs
xchg
mov
inc
std
sbb
lea
fcmovnb
mov
cmps
pop
sub
sbb
cwde
shl
push
xchg
(bad)
jo
mov
jle
jno
xchg
data16
xor
pop
cmp
aas
push
mov
mov
loopne
gs
imul
xchg
jns
sbb
das
mov
pushf
retf
aam
pop
ss
out
xchg
sub
and
cwde
adc
cmps
mov
popa
dec
xchg
mov
mov
rcl
lock
inc
or
hlt
mov
jbe
popf
pushf
lea
fs
fisubr
cwde
repnz
cmp
mov
test
mov
add
outs
cmp
mov
adc
mov
xchg
adc
pop
outs
dec
push
popf
push
sub
out
imul
mov
push
pop
mov
push
add
jg
sahf
dec
clc
lods
add
mov
sar
xchg
jmp
push
adc
std
cmp
cmp
cli
std
ktestw
fistp
push
mov
jb
or
retf
jnp
xor
bnd
xlat
hlt
scas
sbb
pop
pop
xchg
adc
push
je
scas
mov
add
sbb
call
cmp
(bad)
adc
mov
scas
or
or
push
and
adc
adc
out
xchg
jl
dec
cmp
pop
repz
jecxz
push
stc
aad
xchg
cwde
cmp
and
adc
and
mov
push
jle
xchg
mov
sbb
cmp
pusha
xchg
fs
test
mov
sbb
jo
movs
in
arpl
xchg
xor
mov
cwde
or
push
retf
cwde
mov
fnsave
xchg
clc
shr
add
(bad)
xor
cwde
dec
inc
pop
mov
scas
ror
in
in
cwde
sti
into
ins
jecxz
mov
and
bound
mov
dec
pop
jp
pop
jmp
test
ss
movs
(bad)
push
fisub
cmp
gs
scas
adc
cwde
pop
push
xor
cwde
jnp
mov
cli
loop
sbb
loope
clc
clc
push
and
sbb
pusha
iret
or
pop
mov
adc
leave
cmp
jp
pop
aas
and
out
iret
sub
cwde
cli
arpl
movs
cwde
xlat
fmul
mov
hlt
and
aam
xchg
std
fisub
mov
cmp
sbb
mov
(bad)
sub
add
loopne
sbb
(bad)
loop
sbb
inc
xchg
scas
mov
inc
popf
xchg
jmp
adc
dec
pushf
jnp
test
add
mov
pushf
push
push
ds
sub
mov
sbb
jb
aaa
mov
lea
cwde
stos
mov
mov
fst
or
lods
xchg
dec
inc
jns
jg
add
ret
add
les
int
fdivr
repnz
xchg
rol
cwde
popf
outs
jb
rol
std
cdq
mov
xchg
aam
xchg
fcom
pop
ds
stos
stc
jo
je
mov
imul
ins
pop
imul
and
lods
fsub
xlat
lahf
(bad)
test
mov
bound
jecxz
mov
cmps
in
into
cwde
repz
retf
aam
cmp
mov
cwde
icebp
call
jb
lods
js
pop
data16
sub
out
icebp
dec
pop
scas
sbb
cwde
int
xchg
pop
and
mov
(bad)
test
xor
push
aas
sub
loope
popf
fsub
mov
inc
sub
dec
push
jl
(bad)
std
jecxz
push
fxch
xchg
fsubr
pop
ret
neg
stos
dec
repnz
into
and
jnp
inc
dec
mov
daa
push
scas
out
dec
jno
cwde
mov
inc
xchg
mov
data16
scas
mov
loopne
repnz
cwde
inc
rcl
and
pop
arpl
sbb
jle
adc
sti
int
lahf
cmp
and
xchg
xor
fld
mov
outs
scas
mov
pusha
fnstcw
fwait
push
mov
inc
sub
bound
jl
cwde
dec
cli
mov
pop
cmp
call
out
popf
or
lar
sti
cwde
iret
fcomp
mov
pop
call
sahf
nop
call
call
clc
daa
lahf
mov
loopne
dec
xor
sbb
scas
(bad)
aam
ret
aaa
call
xchg
pop
xchg
pushf
jp
mov
jno
sbb
adc
in
xchg
xor
or
jg
xor
xchg
lods
mov
add
push
js
fldenv
jge
or
call
repz
leave
loop
dec
fstp
xchg
add
rcr
fsubr
or
leave
add
pop
and
scas
rol
cli
ret
cwde
sbb
mov
(bad)
push
rep
lods
xchg
fsub
adc
pop
into
sahf
mov
sub
ret
pop
sub
add
retf
dec
sub
imul
scas
repz
fwait
ja
test
sub
xor
sbb
out
or
jp
jo
mov
inc
ret
mov
mov
cwde
push
nop
scas
mov
aad
clc
cwde
push
icebp
xlat
lock
jae
sar
cmp
dec
setbe
gs
add
stos
sahf
jg
inc
or
loope
enter
mov
test
repz
neg
fidivr
in
mov
or
push
call
mov
jp
jbe
sub
test
mov
or
and
add
push
out
sar
clc
or
sahf
pop
jns
xor
xchg
out
xchg
aad
add
mov
xchg
sub
adc
mov
sbb
fsubr
xchg
mov
mov
mov
xor
ficomp
push
jno
sbb
fsubr
cmp
imul
test
or
sahf
jecxz
imul
xchg
xchg
loope
lahf
dec
pushf
push
mov
mov
jecxz
or
and
jge
fsub
dec
call
pusha
es
add
xor
fcom
jo
mov
sbb
clc
shr
lea
in
push
xor
clc
and
xchg
xchg
mov
jns
call
(bad)
test
fs
sbb
xor
jle
call
popf
aaa
out
push
pusha
cwde
loop
dec
pop
dec
into
push
ds
cdq
pop
sub
imul
sub
ror
iret
aad
cmp
movs
mov
xchg
icebp
or
or
retf
fs
cdq
fidivr
arpl
js
lds
test
mov
out
adc
mov
xor
mov
retf
loop
push
pop
sar
inc
push
adc
dec
adc
bound
mov
xchg
loopne
fldenv
cwde
repnz
jno
test
xchg
ins
fwait
rcr
adc
or
gs
mov
in
pop
scas
mov
inc
gs
adc
add
ds
adc
inc
add
add
aam
adc
adc
clc
or
cmps
mov
jecxz
lock
dec
xor
adc
icebp
rcr
push
push
daa
pop
stos
and
xor
les
push
scas
mov
(bad)
lods
les
fcomi
add
fldenv
xor
dec
popf
jns
mov
cmc
mov
pop
ja
test
xchg
add
bound
and
sub
xor
pop
jae
sub
fadd
mov
or
int
clc
stos
adc
cwde
mov
inc
pop
jo
jbe
pop
mov
pop
aam
and
push
xchg
movs
cmp
pop
aad
cs
in
mov
mov
pop
and
inc
mov
cwde
xchg
pop
inc
xchg
clc
push
push
icebp
shl
shr
getsec
pop
sub
xchg
lods
sar
shr
pop
xor
mov
popa
cwde
ins
js
test
enter
in
fistp
jns
fmul
stc
xchg
fcom
mov
jbe
loop
out
cli
shl
adc
xor
loope
pop
or
cwde
cmp
adc
into
cmps
inc
je
retf
enter
in
adc
sub
mov
leave
(bad)
into
loopne
movs
or
sub
xor
jo
xchg
or
or
jno
imul
xor
fisubr
xchg
mov
into
sub
dec
ret
cwde
sbb
and
outs
and
loopne
inc
fnstsw
mov
cmp
xlat
cmp
je
test
addr16
or
in
(bad)
mov
and
cwde
loop
dec
jne
out
push
jl
add
test
mov
add
cli
mov
fdivr
outs
pushf
mov
test
push
sar
lods
mov
fs
mov
pop
imul
popa
leave
mov
dec
cwde
bound
mov
je
mov
cli
out
cmp
rcl
in
outs
jmp
pop
cmp
sbb
jns
dec
iret
int
jo
mov
add
es
js
das
(bad)
stos
push
call
add
push
xchg
addr16
jmp
ds
cld
dec
and
sub
adc
mov
mov
mov
cwde
inc
cmp
or
cwde
pop
lods
popf
jp
(bad)
xchg
pop
xchg
(bad)
jl
fwait
xchg
dec
popa
inc
clc
shr
cmp
cwde
mov
xchg
sbb
popa
jge
clc
arpl
cs
bound
mov
xchg
loope
or
dec
sbb
aad
and
xor
or
lock
jle
and
mov
out
popa
test
ds
(bad)
(bad)
int3
cwde
mov
push
add
mov
jns
jo
cs
push
push
mov
sbb
cmps
clc
into
xchg
xor
sbb
aas
add
dec
sub
jne
mov
leave
repz
ret
test
mov
ss
jecxz
add
nop
in
sub
cmp
ins
pop
adc
loope
xchg
xchg
xchg
lea
std
mov
xor
cmp
les
inc
jle
mov
cli
(bad)
xor
movs
mov
mov
cmp
xchg
test
movs
fwait
xchg
mov
in
push
imul
pop
daa
jo
lahf
inc
adc
xor
leave
cvtpi2ps
sbb
jns
retf
fcmovne
outs
mov
mov
xchg
mov
inc
or
push
shr
xchg
cwde
sahf
outs
or
dec
mov
adc
pushf
cmp
movs
in
das
pop
xchg
pop
outs
push
cwde
sbb
push
pop
ja
adc
pop
rcl
mov
pop
sbb
jmp
or
outs
mov
adc
or
ds
mov
cwde
add
jp
cmp
stos
push
cs
cwde
in
sub
movs
ins
pop
je
mov
imul
fcomp
not
fbstp
cmp
cwde
inc
aad
fst
fdiv
mov
sbb
add
stc
call
dec
push
fs
mov
mov
lods
out
imul
arpl
pop
jg
adc
ins
es
and
test
jp
mov
and
out
fs
adc
dec
aad
sub
and
into
shr
ins
cmc
fild
ret
jecxz
in
xchg
xchg
lds
push
sub
(bad)
sbb
js
mov
aaa
and
dec
into
mov
fmul
test
(bad)
cli
jo
test
xor
sbb
(bad)
cwde
push
push
cmp
xchg
int
jmp
inc
push
das
inc
sbb
cmp
pop
arpl
ret
sbb
dec
push
or
mov
mov
aaa
add
cwde
mov
movs
lahf
mov
mov
xchg
cmp
cwde
imul
rcl
pop
cwde
xchg
dec
clc
iret
out
push
xor
ret
pop
test
sub
stos
ror
lods
cbw
ret
fdivr
sti
retf
cli
jle
push
hlt
out
sub
ret
mov
bound
sbb
push
int3
popa
enter
(bad)
out
ret
mov
sahf
sbb
fild
xchg
add
cwde
cmps
pusha
mov
cwde
jbe
repnz
loope
cmp
fiadd
and
lahf
pop
inc
push
inc
arpl
loope
sub
cwde
dec
pusha
mov
les
cwde
stc
jmp
xchg
into
dec
push
test
loope
cmp
sbb
in
aas
jbe
dec
cmp
(bad)
aaa
imul
sti
dec
out
ret
test
mov
movs
mov
sbb
(bad)
xchg
jl
cdq
leave
out
stos
dec
jbe
sub
aaa
mov
jb
sahf
fdivr
sub
cmps
mov
pop
(bad)
ret
sbb
sbb
push
fcom
cs
enter
test
popf
ins
jnp
sahf
xchg
popf
mov
mov
mov
and
pop
xchg
cs
pop
mov
(bad)
(bad)
adc
cld
xchg
xor
ins
js
mov
dec
movlps
mov
pop
js
in
hlt
and
rol
mov
mov
cmp
jmp
jp
mov
push
or
and
cwde
pusha
sub
and
xchg
add
xchg
adc
pop
fsubr
mov
push
mov
(bad)
jo
cwde
sub
xchg
ret
loope
push
mov
xchg
jbe
cwde
lea
cs
stos
out
sub
add
pop
ds
cmp
jmp
loop
mov
or
out
pop
fsub
adc
fnstenv
je
sti
cwde
ror
mov
push
(bad)
stc
daa
inc
jmp
test
sti
shr
xchg
mov
scas
add
sub
jbe
jo
mov
call
lods
push
dec
xchg
nop
fadd
push
cwde
push
inc
pop
add
xchg
cwde
cdq
shr
mov
xchg
jb
ror
or
stc
inc
sub
ds
fist
shl
mov
rcl
push
mov
mov
leave
mov
cmps
mov
cwde
push
push
inc
mov
ja
mov
cld
pushf
jmp
and
aad
add
sbb
mov
or
pop
push
jle
sbb
aam
fnstcw
daa
imul
arpl
sbb
call
push
push
inc
mov
mov
dec
jmp
xchg
pop
or
or
fmul
nop
dec
or
outs
in
imul
xchg
lods
cdq
sub
xor
int
lods
in
in
fdiv
xchg
jg
mov
and
cwde
mov
cwde
cmp
inc
xchg
push
jmp
cmp
inc
jne
ins
int3
add
adc
inc
push
cwde
jle
or
in
test
cwde
nop
xchg
iret
ror
leave
sub
daa
jle
in
xchg
lea
push
lods
pop
sub
sbb
push
cwde
bound
xor
mov
lahf
lds
sbb
pop
mov
retf
adc
and
mov
adc
xchg
xchg
ins
jae
movs
mov
cmp
pop
pop
lods
je
lea
pop
jl
pop
sbb
push
out
outs
ror
or
push
or
sbb
sub
cmp
mov
(bad)
test
sti
cwde
jge
js
sub
mov
loop
or
and
mov
test
nop
sub
sbb
xor
ins
inc
cwde
sub
call
xor
mov
das
stc
jl
mov
aad
cwde
pushf
sub
cmp
aas
xchg
ja
or
scas
ins
sar
mov
xor
jecxz
int
cwde
or
add
aaa
and
and
shl
(bad)
cwde
(bad)
test
or
cs
fstp
jecxz
fcomp
imul
push
xchg
or
sub
in
popf
ja
fs
xor
xchg
xchg
or
inc
push
xchg
mov
inc
cmp
int
push
and
aaa
adc
or
cmp
cwde
xchg
in
sub
sbb
jp
sbb
iret
(bad)
(bad)
fsubr
unpckhps
jbe
push
cmp
xchg
mov
or
jb
loop
mov
aad
cmp
xchg
out
add
add
lea
or
jo
fcom
xor
lods
mov
cmps
sbb
imul
pop
test
jg
lock
cdq
arpl
jp
mov
(bad)
fsub
cdq
or
pop
fs
jle
inc
xor
jp
pop
loope
jle
pop
jg
jne
inc
addr16
fiadd
out
sub
dec
cwde
mov
jecxz
push
test
add
nop
mov
xchg
sub
lahf
mov
add
rol
jb
or
xchg
ret
repnz
push
xchg
xchg
adc
cmp
enter
rol
sbb
jg
es
cmp
test
xor
add
fcompp
loope
cmp
cli
int3
pusha
sbb
push
sub
fdivr
sub
sbb
adc
fs
mov
push
push
and
leave
repnz
mov
test
mov
xor
jle
dec
mov
dec
xchg
mov
xor
inc
cwde
sbb
(bad)
mov
int
xchg
push
shl
jle
call
je
mov
xor
sub
cld
add
rcl
xor
pop
pop
or
sahf
cs
adc
cmp
push
in
cmc
fmul
cwde
sbb
inc
test
sbb
or
das
pop
xchg
mov
test
pop
xchg
popa
lds
movs
xchg
xchg
xor
in
add
ss
sbb
cwde
push
mov
or
xchg
jns
(bad)
sahf
push
ret
or
shl
fsubr
mov
inc
lock
cwde
xchg
add
xor
out
loopne
push
sahf
cmp
pop
jmp
popa
js
mov
(bad)
loopne
cmp
sub
xor
cwde
xor
fst
(bad)
rcl
xchg
mov
lds
or
or
add
cli
mov
lods
ins
dec
(bad)
mov
mov
xchg
gs
xchg
out
aad
jg
sub
push
ins
js
jp
setns
pop
pop
and
aas
bound
push
dec
jecxz
jo
aaa
retf
out
jecxz
mov
and
cdq
ins
test
cmp
cwde
jecxz
repnz
setb
mov
sti
xor
shl
clc
push
call
ss
sub
sbb
push
pop
and
jg
mov
xchg
cwde
xchg
fmulp
fmul
(bad)
in
cwde
cmp
sbb
xor
fst
xchg
test
xor
cwde
push
in
dec
pop
cmc
call
les
xchg
sbb
inc
jns
test
cwde
pushf
int3
add
cwde
(bad)
or
jl
fscale
push
cwde
(bad)
out
cmp
cmps
sbb
jl
call
js
scas
mov
lods
das
or
push
jecxz
stc
(bad)
cmps
dec
out
sbb
add
loopne
inc
xchg
sub
daa
dec
retf
aad
inc
add
add
sahf
cmp
aaa
imul
push
fistp
mov
adc
imul
or
in
cwde
scas
iret
rol
xchg
push
inc
cwde
(bad)
adc
mov
cwde
cmc
imul
sbb
ja
jne
call
pop
rcl
fdivr
enter
out
call
daa
into
test
or
out
cwde
imul
add
pop
adc
call
xchg
jmp
mov
sbb
(bad)
jmp
cwde
fwait
xchg
jmp
das
pop
jns
cwde
(bad)
(bad)
ja
push
cmps
jp
cwde
pop
lods
jbe
sub
imul
shl
into
clc
ret
xchg
mov
cmp
inc
or
mov
mov
lds
push
cwde
pop
and
inc
inc
loopne
add
pop
cmp
fisttp
clc
je
xchg
fcom
sub
lahf
pop
mov
loop
push
inc
jns
mov
clc
scas
sub
scas
rcr
push
jmp
cwde
in
daa
or
or
jmp
and
mov
xlat
mov
cld
push
sbb
sub
jmp
xchg
push
add
push
dec
push
out
mov
test
xchg
mov
(bad)
in
xor
out
adc
cmp
mov
jl
nop
mov
mov
jg
push
js
xchg
and
jno
mov
(bad)
ins
cwde
inc
inc
pop
ja
jl
mov
(bad)
cwde
aaa
adc
jge
xchg
xchg
sar
adc
gs
adc
cmp
and
pop
loope
add
push
rcl
jmp
cwde
dec
sbb
jns
ret
xchg
shl
aam
(bad)
mov
adc
pop
je
push
sub
addr16
(bad)
lds
aam
xor
sub
mov
fdivr
sbb
xchg
push
lock
dec
fdiv
jecxz
mov
ins
out
fidivr
in
push
aaa
ss
mov
xchg
adc
jmp
(bad)
jl
inc
stos
cwde
xchg
xchg
jo
dec
mov
test
dec
add
imul
out
fisubr
cwde
fldcw
pop
jae
pop
jecxz
fs
mov
mov
lea
mov
xchg
ins
cwde
test
shr
pop
adc
dec
movs
mov
add
shl
push
sbb
lahf
std
int
xchg
mov
pop
adc
sbb
dec
out
cmp
inc
add
push
inc
(bad)
push
sbb
idiv
push
mov
xchg
rol
je
sbb
popf
mov
cwde
retf
adc
cdq
cmp
add
test
sbb
mov
push
mov
mov
xchg
cwde
(bad)
fistp
sbb
or
xchg
jns
sub
popf
jnp
loopne
cwde
cwde
in
sar
stos
jae
cwde
gs
cs
xchg
shr
jno
mov
jo
inc
popf
fucomip
icebp
or
stc
ret
xchg
mov
cs
xchg
jmp
push
dec
repz
ror
ret
sahf
bndstx
add
push
cs
imul
push
sub
dec
sbb
xchg
bound
sar
dec
pop
stos
sbb
neg
dec
fwait
retf
jmp
jl
sub
not
retf
popf
fld
(bad)
aas
mov
ds
xchg
popf
xchg
pop
arpl
shl
xchg
cmp
stos
icebp
int
loope
or
push
stos
xchg
test
gs
push
or
test
iret
loopne
mov
mov
push
push
jecxz
ror
test
mov
leave
and
mov
xchg
(bad)
idiv
adc
cmp
and
sub
cmp
and
cmps
add
push
js
jg
dec
or
or
jecxz
retf
bnd
lea
mov
push
mov
loopne
imul
js
mov
sub
inc
repz
(bad)
shr
int3
push
and
call
dec
es
jmp
push
sub
sbb
or
sub
outs
imul
add
test
sbb
jge
loop
jnp
popa
cmps
mov
xchg
movs
out
repz
pop
dec
and
loop
push
xchg
es
xlat
push
sub
lea
movq
xchg
pop
test
pop
pop
out
cmp
or
pop
sbb
add
je
xchg
mov
mov
pop
sub
xchg
sbb
cmps
ret
jb
push
sbb
lods
and
mov
scas
dec
pop
test
jg
mov
mov
out
mov
test
push
cwde
daa
pop
mov
xchg
cwde
sbb
iret
mov
dec
push
inc
out
and
ins
jmp
xchg
push
or
fadd
push
pusha
sub
cwde
cmc
pop
jne
ins
jg
mov
xchg
xchg
lahf
in
fsubr
loope
push
and
pop
(bad)
jmp
xchg
mov
js
gs
dec
mov
dec
pop
cwde
or
fild
and
cwde
sub
test
xchg
pop
xchg
mov
(bad)
call
inc
fidiv
xchg
cmp
js
imul
cwde
sub
ficom
cwde
enter
cs
sbb
loop
jp
movs
daa
mov
loope
or
mov
fild
sbb
mov
cwde
adc
jle
sbb
jne
mov
mov
ror
stos
loop
cmc
cmp
add
xor
div
rcl
jno
cmp
mov
cdq
rcl
movs
arpl
pop
ins
int3
or
sbb
pusha
mov
outs
pop
mov
jmp
xlat
add
adc
xchg
or
(bad)
mov
jmp
fidivr
das
sbb
sub
bound
jecxz
mov
pop
push
std
jg
cwde
sub
dec
lea
rol
cmps
and
xchg
dec
pop
and
or
jne
add
es
loopne
pop
sub
outs
pop
into
std
in
pop
xchg
sar
mov
data16
mov
jecxz
aaa
xchg
aaa
jb
jl
repz
popa
cwde
scas
xchg
sub
cdq
movs
fidivr
jmp
cwde
pusha
and
xlat
add
call
jle
cwde
aas
push
and
adc
sub
dec
pushf
fisubr
(bad)
retf
xor
jmp
push
push
mov
jno
adc
cdq
jge
pop
sub
push
or
sbb
scas
cmp
push
sub
mov
mov
imul
clc
dec
ds
push
pop
jmp
cmps
std
in
das
xchg
or
mov
mov
sub
(bad)
cs
cmp
or
cmp
cwde
and
movs
mov
aaa
cmp
xchg
bound
dec
into
mov
ins
adc
stos
jle
push
fld
push
push
popf
and
call
adc
cmc
mov
mov
sbb
adc
xchg
mov
test
xchg
das
mov
cli
mov
xchg
cli
push
ret
sub
fmul
lahf
rcr
mov
and
pop
sub
push
pop
dec
sub
ins
push
sub
xchg
dec
or
pop
mov
cs
xchg
cmp
test
push
and
in
pop
or
or
lods
cwde
jmp
push
and
cwde
ins
jb
out
ret
lea
jno
shr
pop
sub
jle
pop
addr16
xor
aas
xor
adc
pushf
icebp
cmps
ja
std
or
cli
xchg
stos
xchg
inc
mov
adc
test
sbb
cdq
jns
cdq
arpl
dec
js
sub
lock
shl
fadd
xchg
xchg
outs
jno
sar
out
adc
ja
ins
or
push
push
push
rcr
and
jp
cwde
xchg
ja
pop
adc
adc
call
imul
add
and
fwait
xchg
bound
jae
jnp
cwde
out
dec
stos
leave
loopne
mov
jnp
call
ficomp
or
pop
adc
mov
femms
xchg
fcom
daa
sbb
scas
mov
ins
int3
or
mov
push
xlat
cwde
int
push
and
mov
fsub
mov
test
in
add
aas
xchg
sbb
xchg
pop
fisub
pop
out
clc
les
cwde
inc
addr16
jb
cdq
outs
jno
fidivr
xchg
or
fs
leave
aad
rcl
repz
int
sbb
or
or
daa
xchg
push
and
shr
cwde
dec
pop
cs
hlt
mov
sahf
dec
xchg
fwait
(bad)
loop
xchg
mov
out
cmp
add
and
ja
js
pop
pop
call
imul
jge
sub
push
and
push
jae
pop
pop
sub
mov
xor
add
push
and
sbb
xlat
stos
push
rcl
fisubr
mov
test
adc
sub
fmul
mov
pop
scas
lahf
mov
cwde
mov
fwait
xor
into
test
test
aaa
push
sbb
test
cwde
adc
mov
loop
iret
dec
jbe
call
ror
and
popa
xchg
icebp
aam
lds
push
cwd
sub
ss
adc
add
mov
adc
test
xchg
scas
cwde
lahf
imul
int
push
push
xchg
daa
cdq
ss
lods
stos
mov
fwait
adc
retf
cmps
sbb
dec
sub
xor
outs
imul
fbstp
or
pop
cs
sub
std
inc
pop
outs
mov
lods
mov
repnz
in
bound
popa
add
enter
inc
xchg
jg
movs
jge
test
sub
stos
and
cmp
sbb
rcr
xor
push
push
xchg
mov
mov
xchg
and
and
dec
push
gs
adc
cmp
pop
jb
inc
cmp
or
xchg
cs
or
push
and
mov
mov
movs
shr
std
sub
jne
sahf
xchg
and
arpl
jle
lahf
dec
pop
xchg
mov
sbb
rcr
mov
fsubr
or
push
cmp
pop
cwde
dec
sub
push
sbb
jo
mov
or
pop
push
mov
clc
call
push
cmp
xor
push
push
push
pusha
cs
test
adc
daa
pop
cmp
mov
add
pop
sub
js
adc
mov
xchg
inc
cwde
and
fisttp
and
mov
inc
iret
xchg
repz
push
pop
jo
mov
cwde
std
or
push
xchg
jmp
sub
dec
pop
retf
cwde
pop
adc
leave
xchg
push
xchg
cmc
repnz
xchg
mov
jmp
cwde
movs
stos
aad
xor
in
retf
adc
aaa
add
or
mov
cdq
in
imul
ud2
ficom
and
addr16
mov
add
fyl2x
push
jbe
pusha
out
push
cwde
push
stc
ins
add
rcl
jge
dec
xor
addr16
test
dec
xchg
sub
xchg
clc
ret
retf
sub
and
dec
into
sbb
lahf
popa
scas
(bad)
cwde
xor
inc
imul
call
xchg
sbb
pop
stc
iret
sar
cwde
outs
sub
pop
cs
sbb
loope
std
call
mov
outs
cwde
jge
mov
and
xchg
jl
push
push
fmul
outs
test
cmp
pop
xor
push
js
xchg
add
xor
mov
cdq
jp
mov
sub
xor
sbb
sub
xchg
loop
mov
test
jnp
(bad)
push
call
loope
pop
add
test
push
xor
cs
push
ret
fcom
sub
sub
jle
dec
mov
les
lods
cwde
mov
mov
pop
scas
mov
inc
(bad)
xor
in
(bad)
jnp
mov
in
enter
call
push
sahf
jbe
retf
enter
cwde
mov
jae
lods
pushf
mov
xchg
mov
mov
jle
stos
mov
enter
pop
jo
jne
repnz
cmp
not
add
aas
adc
out
(bad)
fcom
vpaddusb
imul
in
stos
mov
shr
in
mov
xor
fs
cwde
sbb
jnp
mov
mov
mov
pop
cwde
cld
adc
dec
les
dec
sti
pop
aad
ins
xchg
push
rol
dec
inc
loope
cs
imul
in
fs
dec
mov
aad
jb
xchg
mov
mov
sti
jne
push
(bad)
or
jmp
sbb
push
test
lahf
sbb
pusha
push
mov
mov
mov
cwde
stc
add
rcr
into
inc
cmp
sub
mov
adc
gs
add
stc
xchg
adc
in
cwde
jbe
push
fmul
bound
cwde
je
jno
inc
jp
and
sbb
xchg
arpl
xlat
mov
in
jecxz
in
push
cli
cmp
rcr
xchg
mov
loope
cld
or
fld
sbb
arpl
mov
enter
pop
mov
fsubr
jmp
mov
xchg
add
dec
xchg
dec
fistp
cmp
cwde
mov
cmp
and
cwde
add
sub
mov
rcr
pop
fst
xchg
mov
pusha
pop
mov
out
js
out
mov
cwde
test
dec
cli
fnstcw
xor
test
add
fistp
or
xchg
xchg
out
cwde
js
jmp
aas
jo
jno
cwde
mov
cmp
rep
sbb
lock
cwde
and
ja
sahf
mov
xchg
icebp
into
or
mov
(bad)
sahf
mov
mov
push
jg
jge
icebp
in
cmp
inc
cwde
sub
xchg
mov
dec
mov
hlt
lds
jp
pop
push
das
inc
mov
mov
scas
fidiv
mov
cwde
add
or
mov
push
int3
out
fstp
or
loop
jecxz
cs
lahf
push
int
sbb
cmps
push
push
sahf
mov
sub
sar
(bad)
pop
outs
movs
xchg
loope
or
sbb
cwde
stos
popa
ja
mov
mov
or
cmp
sti
inc
cmp
pop
sub
sbb
out
popf
fs
pusha
nop
pop
aad
and
and
cmp
dec
sub
(bad)
xor
imul
pop
lods
ins
rol
lea
mov
pop
jmp
mov
call
cdq
xor
aad
icebp
sub
jbe
inc
cmps
dec
outs
fs
cmp
and
div
push
cwde
jo
mov
fstp
push
clc
cli
add
repnz
adc
in
xchg
or
sub
test
push
inc
cmp
xchg
sub
fadd
sub
sbb
cwde
test
cmp
leave
mov
mov
jge
push
in
add
icebp
sbb
mov
movs
pop
sub
sub
ret
push
adc
sub
jns
out
and
fnstenv
call
pop
xor
(bad)
inc
mov
fbstp
pop
not
push
arpl
in
sbb
cwde
cli
std
rol
cmp
cwde
addr16
sub
xor
arpl
mov
mov
mov
repz
fbld
jle
mov
das
xor
stos
jb
sbb
inc
or
jnp
jb
cwde
mov
ret
mov
cwde
fisubr
mov
add
sbb
and
push
fcmovu
(bad)
cwde
mov
cmc
fimul
dec
addr16
(bad)
sub
sar
in
movs
mov
jb
mov
mov
fwait
jns
mov
sub
inc
xchg
xor
push
cwde
inc
pop
(bad)
fndisi(8087
std
sub
in
outs
aas
mov
ja
(bad)
mov
xchg
cs
sbb
pusha
and
ficom
mov
loopne
(bad)
xchg
add
cmp
sahf
sbb
push
stos
pop
sbb
push
pop
adc
stc
enter
aaa
mov
bound
cmp
loop
cmp
jecxz
and
jmp
test
lock
pop
cwde
inc
push
push
in
sahf
xchg
jg
add
cwde
push
cdq
aad
rcl
jle
ds
jmp
add
or
ficom
fbld
pop
cmp
push
adc
xor
xchg
hlt
jle
fstp
pop
mov
pop
push
cli
jmp
inc
pop
adc
outs
cwde
scas
mov
cwde
or
retf
stos
ret
ror
scas
lock
frndint
addr16
outs
loope
xchg
fs
cmp
fs
or
and
mov
sub
es
sahf
xchg
test
or
cmp
into
fsub
mov
sub
stc
int3
pop
xor
sub
xchg
(bad)
ins
std
movs
jg
jo
enter
sbb
lds
push
mov
lahf
and
rcr
xchg
clc
jbe
inc
stos
stc
jo
pop
pop
mov
xchg
push
arpl
mov
int3
arpl
rol
in
sti
mov
jmp
jo
call
or
dec
cwde
pop
xor
xchg
inc
xchg
jns
inc
jle
and
cwde
popa
or
std
clc
movs
(bad)
enter
fdiv
jmp
xchg
data16
fwait
arpl
cwde
inc
push
inc
pusha
inc
pop
dec
aaa
lods
xlat
scas
call
inc
aam
mov
cwde
neg
sbb
pop
sub
sub
dec
or
mov
outs
movs
imul
cwde
dec
mov
mov
stos
mov
inc
pop
ins
jp
xchg
cwde
cli
ret
add
adc
jge
jne
sbb
or
or
outs
xor
sahf
jl
pop
data16
or
retf
add
fs
jae
cmps
mov
repnz
xor
ss
pushw
mov
sub
mov
call
loope
add
retf
xchg
jle
lahf
call
xchg
xchg
stos
xchg
ret
push
js
clc
mov
scas
js
adc
adc
sub
les
fs
xchg
adc
inc
pop
dec
ds
push
mov
test
mov
aam
in
js
(bad)
xor
retf
rol
pop
xor
iret
pcmpgtb
mov
icebp
dec
in
cli
mov
push
das
sub
or
popf
and
sbb
cli
sbb
add
fldcw
int3
pop
push
mov
pop
nop
lahf
mov
cdq
outs
mov
shl
or
mov
test
lods
xor
cdq
jb
shr
cwde
bound
push
mov
xchg
jecxz
sbb
ror
imul
enter
add
out
sbb
loope
cli
cwde
(bad)
(bad)
loopne
out
adc
xchg
out
fdivr
test
popf
dec
mov
fdivr
shl
data16
cwde
ins
test
jo
mov
mov
sbb
jmp
jbe
mov
mov
gs
or
or
mov
push
cwde
sbb
push
inc
pop
inc
aad
lock
cwde
sbb
push
cs
xor
js
xchg
jmp
xchg
jns
daa
and
pusha
mov
lds
cmp
cwde
xchg
dec
ret
xor
cwde
mov
pop
outs
jae
cmps
jb
cwde
and
call
fdivr
out
retf
leave
push
sub
in
sub
rol
xchg
xchg
xchg
inc
sub
hlt
into
std
sbb
jns
bound
int3
jg
push
movs
mov
xchg
in
call
scas
xor
js
arpl
(bad)
mov
es
in
xchg
add
or
sub
imul
jo
jnp
ds
fisub
cmps
add
ffree
jb
cwde
mov
add
clc
or
xchg
loop
mov
xlat
adc
adc
jmp
cmp
out
(bad)
push
mov
xchg
ds
cwde
jne
jno
nop
and
add
jo
mov
xor
pop
dec
scas
mov
sbb
sti
fldcw
popa
push
shl
pop
or
mov
sbb
push
movs
and
cwde
dec
fcmovnu
mov
call
test
ins
cwde
leave
pop
adc
push
imul
ss
inc
sbb
loope
xchg
mov
cmp
lds
cwde
pusha
sub
sub
cwde
shr
shr
icebp
and
fild
pop
adc
push
or
in
test
retf
pmaddwd
mov
mov
into
fmul
fisub
lds
or
pop
repz
dec
mov
idiv
leave
mov
pop
sbb
mov
fldenv
cwde
adc
imul
cmc
sub
cwde
mov
gs
push
pop
add
test
cwde
retf
sub
ins
jne
test
xlat
mov
bound
xchg
loop
repnz
add
inc
call
pusha
pop
das
lahf
fdivp
fmul
dec
fstp
xchg
sbb
push
gs
push
xchg
call
(bad)
enter
cwde
xchg
imul
dec
mov
mov
pop
mov
add
pop
cwde
cmps
mov
test
out
adc
adc
pop
sbb
fdiv
pop
jno
xor
adc
inc
sbb
rcr
lds
das
inc
in
scas
jmp
adc
in
cli
daa
add
arpl
repnz
and
or
dec
jg
xor
add
xchg
sub
or
jecxz
and
sub
jg
jmp
pop
mov
test
aam
xchg
or
out
es
stos
dec
xchg
test
loopne
pop
out
mov
push
push
aas
add
lea
cdq
jb
jbe
cwde
xchg
fs
retf
push
mov
pusha
dec
(bad)
sub
aam
xchg
push
mov
cwde
pusha
scas
sub
sets
movs
lods
leave
outs
dec
mov
sbb
mov
cmp
mov
jmp
stos
mov
or
pop
(bad)
sub
jp
cmp
loopne
cwde
mov
syscall
pusha
cld
enter
add
repz
lock
test
fld
cwde
pop
cmc
ret
fisub
push
iret
(bad)
inc
jno
daa
push
mov
lahf
pop
in
fdivr
or
out
adc
jmp
stos
xlat
movs
push
ror
add
call
add
xchg
sbb
mov
shl
cld
test
mov
xchg
push
aam
cld
xor
lock
retf
idiv
aad
into
fcom
cmp
call
sbb
repz
jne
or
sub
lahf
sub
lahf
mov
into
ds
dec
cwde
and
mov
push
jae
sub
sar
fld
ja
sub
mov
mov
int3
shr
sahf
cmps
mov
sub
test
inc
jge
(bad)
cwde
fisubr
mov
xchg
adc
adc
push
cwde
loop
dec
fisub
(bad)
js
mov
lods
outs
push
cli
ret
(bad)
js
adc
cwde
cmc
loop
inc
sbb
adc
xchg
retf
pop
pusha
cmp
xlat
push
mov
test
nop
dec
push
and
jns
mov
inc
mov
(bad)
out
fisub
dec
(bad)
int3
(bad)
cmp
ss
fdiv
push
out
cmp
loope
jmp
fsubrp
clc
es
jns
pushf
popa
ja
mov
lahf
jp
cwde
js
mov
into
push
adc
scas
sub
and
ror
or
mov
cmps
fsubr
fidivr
pushf
pop
leave
push
jp
cwde
or
xlat
fwait
xchg
js
jne
(bad)
or
xchg
in
ins
xchg
lds
xchg
adc
cwde
or
popa
ret
(bad)
xchg
imul
or
stos
movs
enter
out
js
into
arpl
sti
int
push
cwde
jge
fs
call
stos
inc
or
(bad)
xchg
aad
es
jns
xor
jmp
inc
stc
push
mov
mov
add
jg
test
mov
imul
sbb
sub
mov
sbb
rcl
adc
push
pop
sub
sbb
out
pop
dec
sbb
call
mov
cwde
popf
aad
aaa
dec
jo
jl
pop
xchg
jbe
retf
push
fs
fstp
or
dec
push
ficomp
and
sbb
add
ror
push
clc
xor
dec
push
push
(bad)
cld
iret
out
cwde
mov
sub
ins
cwde
sbb
out
stos
inc
cwde
fisttp
clc
lock
adc
add
xchg
jns
cmp
repnz
adc
adc
dec
aad
xor
mov
or
pushf
sub
pop
cld
xchg
adc
js
sahf
dec
jecxz
neg
icebp
into
and
lahf
mov
dec
or
in
cmp
retf
lods
jne
adc
fs
jns
fadd
jl
ja
push
xchg
cs
cli
daa
ret
sub
icebp
cwde
outs
into
out
xor
xchg
push
cmp
pop
cmp
push
pop
loopne
stos
cdq
arpl
sbb
or
cwde
jnp
inc
sbb
xchg
mov
clc
mov
div
mov
pushf
add
xchg
std
sbb
dec
shl
cwde
addr16
js
scas
mov
jo
imul
hlt
into
out
cwde
call
xor
imul
aas
sub
or
popa
mov
inc
add
and
cwde
mov
(bad)
out
fst
sub
jmp
movs
xor
push
out
int
sub
jmp
mov
shl
(bad)
jge
cmps
mov
push
push
test
mov
or
add
js
fwait
mov
cmp
retf
adc
in
pop
xor
push
adc
push
movs
push
adc
lods
mov
mov
xchg
mov
sub
mov
call
mov
and
jecxz
aas
or
cmp
in
stos
cwde
sti
push
lods
scas
into
stos
xchg
test
xchg
fs
add
xchg
fstp
jo
in
or
ins
pushf
xor
cdq
pop
stc
push
mov
xor
push
in
int3
test
fld
xor
fcom
lock
sbb
sub
xchg
sub
or
sub
inc
pop
icebp
imul
stos
cld
fcom
movs
mov
adc
leave
outs
xchg
das
retf
ss
fs
pop
clc
popa
dec
xchg
mov
pop
in
add
out
xchg
add
lock
xchg
(bad)
mov
dec
add
dec
cwde
pop
popa
jns
fwait
ins
sbb
cwde
xor
dec
xchg
cwde
mov
dec
jp
cwde
daa
ins
cmp
pop
frstor
mov
loopne
lods
ror
sahf
mov
comiss
mov
pop
add
jo
aam
mov
ss
mov
adc
sahf
jge
add
jne
test
and
enter
xchg
fwait
jg
push
mov
popf
loopne
js
and
xchg
lahf
jo
call
scas
push
adc
cmps
lock
(bad)
push
and
lds
mov
shr
cwde
push
ss
inc
add
pop
inc
cwde
fsub
mov
cmp
jae
js
inc
retf
xchg
dec
and
xor
ins
lahf
xor
lods
mov
shl
hlt
out
int
ds
fcom
das
fidiv
adc
ins
fs
retf
outs
adc
(bad)
(bad)
leave
sbb
push
mov
sbb
push
enter
nop
test
stos
into
jo
cwde
sub
push
dec
(bad)
nop
mov
enter
xchg
cmp
mov
fdivr
(bad)
sub
mov
mov
mov
scas
cdq
lea
pop
jp
je
and
sbb
loopne
cwde
jge
(bad)
int3
jg
aas
xchg
add
out
sbb
cwde
mov
fs
xchg
lea
push
sbb
dec
fcomp
fs
mov
mov
mov
sub
es
cwde
das
pop
add
mov
movs
lods
xor
sub
jnp
lods
push
stos
pop
fnstsw
push
cwde
or
movs
mov
test
or
pushf
bound
xlat
cwde
mov
ds
bound
imul
leave
cwde
add
push
rol
adc
inc
xor
out
add
test
push
outs
sbb
cmps
cwde
mov
push
xchg
inc
sub
pusha
std
clc
scas
out
cld
pop
test
mov
pop
sbb
sub
mov
and
lods
popf
dec
daa
mov
mov
xchg
inc
fcmovbe
loopne
shl
cwde
adc
mov
aam
test
fbld
mov
jg
lahf
xchg
scas
or
inc
repnz
mov
and
jle
rcl
cwde
(bad)
push
sub
mov
jne
fdiv
mov
adc
cmp
shl
les
inc
push
or
xchg
and
pop
out
sbb
fcomp
or
cwde
and
add
jbe
nop
lods
ds
push
or
inc
sub
outs
inc
sub
xor
addr16
lea
add
adc
mov
mov
xlat
(bad)
xchg
(bad)
mov
xchg
sub
repz
out
stos
fst
inc
mov
mov
dec
sbb
lds
push
adc
pop
sub
idiv
add
xor
pop
fwait
and
jae
jmp
fild
es
ja
xchg
sub
or
cmps
xor
loope
pop
or
xlat
cmp
sahf
arpl
daa
in
mul
or
cld
fcmovnbe
aas
adc
inc
sub
leave
call
fld
repnz
push
or
jmp
aas
pop
cwde
ror
popa
cwde
add
jo
imul
cwde
scas
jmp
stos
sub
cwde
pop
cmp
cwde
call
mov
mov
int
pusha
adc
adc
mov
sub
cwde
push
xchg
bound
popf
jo
xchg
mov
shr
jo
popf
xchg
out
icebp
or
stos
enter
in
bnd
int
outs
in
sbb
clc
cwde
enter
stos
add
ins
xchg
inc
sub
cmp
and
mov
ret
dec
mov
pop
ins
add
cwde
add
pop
loopne
jecxz
push
arpl
mov
ror
mov
jns
jp
jp
mov
in
retf
or
or
ret
movs
cs
lahf
or
aaa
retf
inc
mov
ins
test
cmp
cwde
xchg
mov
mov
xchg
pop
inc
sbb
into
and
mov
call
add
xor
push
cwde
mov
arpl
adc
(bad)
outs
shr
cdq
push
cmps
jno
pop
cmp
jge
sub
sbb
in
daa
mov
(bad)
sbb
mov
pop
jecxz
jge
inc
push
cwde
sti
mov
xchg
jnp
sar
mov
stc
(bad)
mov
fwait
cmp
push
out
xchg
xchg
les
je
inc
sbb
xor
leave
sete
xor
bound
test
adc
jecxz
push
repz
jmp
ret
out
stc
sub
scas
cs
cwde
dec
cmp
lods
add
rcr
sbb
adc
xchg
sbb
cwde
inc
pop
jmp
mov
mov
(bad)
cwde
cmps
pop
hlt
(bad)
or
jo
iret
xor
scas
(bad)
fsubr
xchg
les
scas
or
jne
inc
cwde
bound
imul
xor
xchg
xchg
ins
test
cwde
pop
sbb
lahf
cmp
ret
mov
cmp
jae
iret
sbb
and
cwde
xchg
sub
or
mov
cmc
xchg
pop
dec
movs
jo
call
fcomp
cwde
and
adc
jnp
mov
cmp
push
and
sub
xor
sbb
loop
jne
cwde
mov
push
lods
popf
sar
jmp
cmps
test
pop
cs
inc
sub
sahf
pop
gs
pusha
movs
cwde
mov
retf
and
aaa
dec
adc
push
clc
scas
stos
xchg
retf
clc
xor
pop
(bad)
xchg
dec
dec
pop
jg
mov
ds
sub
pop
mov
addr16
and
and
clc
xor
in
push
(bad)
(bad)
fist
add
sbb
xchg
imul
fsub
sub
cmp
imul
nop
mov
hlt
xchg
xchg
add
dec
js
or
jp
cwde
inc
jb
test
adc
push
fistp
call
popf
inc
mov
cdq
pop
adc
js
inc
aas
xchg
rcl
lods
lds
(bad)
jo
cwde
cmp
and
dec
pop
push
or
sbb
mov
aam
pop
jp
mov
dec
mov
jg
xor
popf
xor
retf
xchg
mov
adc
aas
or
inc
mov
or
cwde
add
xor
shr
imul
cwde
push
lock
sub
xchg
aam
(bad)
pushf
mov
arpl
mov
stos
mov
inc
loope
mov
mov
xchg
mov
and
sub
pop
ret
call
xacquire
jle
sbb
out
into
sbb
xor
fsubrp
add
add
xor
xlat
test
iret
mov
cmp
add
fdiv
jns
call
xchg
call
movs
xor
in
leave
loope
lock
push
imul
out
clc
into
pop
pop
loopne
mov
clc
jecxz
cld
dec
in
or
mov
aaa
lods
mov
mov
jg
xchg
arpl
out
outs
mov
cwde
inc
push
push
push
push
sub
cs
pop
sub
add
cwde
scas
retf
jae
std
test
sub
aas
add
push
ficom
push
dec
push
xor
xchg
pop
jmp
jp
ret
push
jmp
push
nop
ins
mov
ja
sub
inc
cmovp
or
ds
outs
xchg
jne
mov
cwde
fsubr
cmp
sti
cmp
pop
cli
fstp
stos
mov
dec
cwde
xchg
into
fcom
mov
add
jb
mov
xchg
inc
add
out
cmc
dec
jae
or
cwde
mov
es
icebp
xchg
lea
push
clc
mov
icebp
pop
and
in
cmp
fcomp
int3
xchg
sub
mov
push
pop
cmc
mov
rol
and
add
cwde
lock
imul
aas
cmp
cwde
mov
test
ret
cld
ret
fdivr
in
cmp
mov
jns
ficomp
lods
mov
test
mov
cwde
cmp
lea
mov
loopne
rcl
scas
addr16
dec
pop
popa
sub
daa
cmps
lea
fsub
loope
jg
and
fwait
dec
jo
shl
ja
xor
clc
pop
xchg
push
rol
stos
sub
test
push
xchg
cmp
into
nop
out
pop
lea
push
ret
js
(bad)
int
out
mov
cdq
add
les
mov
pop
das
shl
mul
retf
js
cwde
ins
lock
int3
or
mov
xchg
in
scas
xchg
jo
js
jg
jmp
je
jbe
push
fstp
push
add
xor
and
push
shl
gs
cld
call
push
sub
jne
cwde
mov
sbb
es
xor
retf
jg
scas
cmps
hlt
cwde
into
test
popf
push
cwde
adc
pop
daa
or
out
sbb
cwde
pop
movs
loopne
neg
push
(bad)
sub
cwde
out
xlat
imul
rcl
xchg
pop
mov
adc
xor
(bad)
cwde
inc
push
sub
adc
fldcw
mov
mov
mov
sub
hlt
jb
test
std
mov
test
cwde
movs
mov
cwde
hlt
inc
push
loopne
mov
repnz
out
adc
add
cwde
and
in
enter
xchg
jl
mov
(bad)
jmp
adc
adc
jo
inc
ins
lds
push
call
fdiv
ins
mov
xlat
add
cs
xor
dec
push
jae
push
mov
mov
jno
cmp
pop
mov
pop
lea
cmp
pop
dec
sti
cmp
add
jle
xor
pop
pop
jle
mov
pushf
shr
scas
leave
lods
in
pop
data16
push
sub
jns
lahf
xchg
sbb
nop
or
and
mov
adc
imul
xchg
xchg
or
cld
mov
cmp
fstp
jecxz
fild
sub
bound
mov
test
add
scas
pop
xchg
push
or
add
aam
fwait
scas
mov
mov
fcmove
aaa
xlat
xor
inc
xor
push
shr
or
test
xchg
mov
pop
fist
xor
sbb
mov
push
in
xor
inc
push
jp
xlat
xchg
jmp
fcomip
xor
ja
pusha
pop
ret
leave
scas
jl
cdq
(bad)
clc
jb
sbb
xchg
mov
leave
xchg
cwde
xchg
cmp
cwde
adc
xchg
and
xor
xchg
sub
and
loop
push
out
shr
sub
int3
arpl
sbb
xchg
cmps
aaa
in
lods
jno
cwde
inc
mov
(bad)
scas
(bad)
lahf
push
dec
imul
jp
in
xchg
cmp
jo
mov
mov
outs
jne
xchg
les
test
inc
mov
mov
inc
sbb
call
adc
cmc
sbb
xlat
inc
push
fmul
sub
shl
loope
jge
hlt
int3
and
into
ss
jns
dec
stc
fcmovbe
scas
(bad)
sub
ds
cli
sbb
sahf
pop
aam
add
or
sar
or
aaa
sti
mov
and
fiadd
cmp
or
inc
outs
push
sbb
xchg
fsubr
sti
into
push
ds
rcr
or
loope
mov
fucomp
ret
fsub
mov
call
mov
or
dec
loope
mov
add
scas
mov
mov
ja
adc
push
push
xchg
in
jl
cwde
xchg
mov
mul
clc
push
push
lahf
pop
cmp
cmp
lods
pop
loop
cdq
fmul
xor
push
lods
in
xor
jl
inc
cwde
xchg
and
jnp
mov
popa
repnz
add
pop
dec
fsub
enter
pushf
xor
adc
mov
cwde
leave
aad
repz
jbe
xchg
pop
(bad)
mov
in
clc
int3
in
cwde
mov
fld
push
outs
jle
xchg
mov
arpl
cmp
mov
(bad)
adc
aaa
iret
mov
jno
arpl
aad
cdq
es
jp
or
xchg
call
and
cwde
call
push
and
stos
xlat
xchg
mov
cs
(bad)
scas
or
rol
mov
xchg
adc
retf
dec
cmps
fdivr
pushf
jnp
(bad)
mov
mov
adc
js
mov
fstp
ins
(bad)
mov
cwde
call
mov
scas
mov
push
xchg
movs
jb
sub
lock
push
(bad)
lock
lahf
pop
popa
addr16
cwde
mov
fdivr
adc
pop
test
loopne
jl
push
sbb
or
mov
mov
cli
push
sub
div
xchg
out
adc
xor
add
mov
fsub
stos
mov
and
cmc
movs
lea
xor
xlat
sbb
cdq
sub
inc
int
dec
imul
or
ror
lods
out
in
add
call
mov
dec
xchg
mov
(bad)
jnp
push
fstp
jo
cwde
test
int3
jnp
dec
mov
adc
add
ins
sub
jp
fldenv
cwde
mov
sub
cwde
dec
repz
and
cwde
data16
or
mov
lahf
ins
jo
pop
sub
xchg
xchg
xor
js
mov
cmps
loope
cwde
(bad)
stos
ret
aam
clc
(bad)
jmp
lods
xor
and
loopne
test
ins
mov
cmp
pop
xchg
pop
cmp
pop
push
jne
test
ss
data16
xchg
mov
repz
xor
xor
fwait
push
mov
cmp
or
sub
sub
data16
leave
outs
cmp
mov
in
scas
add
mov
push
adc
cmp
mov
cwde
pop
in
pop
sbb
movs
loopne
cwde
jo
in
fst
xchg
cwde
mov
aam
popa
(bad)
je
sub
loop
xchg
cwde
sub
xor
fwait
cwde
stc
cmps
shl
faddp
cmp
sub
js
in
retf
sub
aaa
push
rcl
loopne
xor
loopne
inc
mov
dec
fmul
cdq
and
cmp
imul
or
mov
push
fxam
sub
sbb
jne
test
inc
sub
fisub
rcr
lods
jmp
xchg
cmps
clc
iret
out
repnz
or
pop
loop
lock
push
leave
add
dec
inc
nop
pop
jl
mov
sbb
dec
push
stos
cmp
jmp
fistp
por
cwde
ds
mov
xchg
movs
pushf
mov
std
add
cwde
icebp
mov
lods
dec
pop
push
and
lock
test
lods
int
shl
pop
and
js
jnp
xchg
add
cwde
xlat
repz
sbb
loope
pop
push
sbb
push
and
mov
icebp
sub
adc
stc
(bad)
sbb
and
imul
mov
jmp
pop
mov
sub
mov
(bad)
xchg
pop
loope
mov
lds
repnz
cwde
mov
add
xchg
mov
inc
repnz
mov
mov
lahf
cmp
xchg
in
add
or
push
jp
sbb
cwde
icebp
les
push
mov
mov
leave
cmp
std
adc
stos
popf
push
mov
xchg
ret
jge
pushf
ins
repnz
inc
and
mov
ret
cmp
add
leave
mov
jle
mov
pop
xchg
add
and
pop
cmp
ins
pop
push
sbb
fdivr
and
xor
aad
mov
sub
mov
push
sub
fs
bound
rcr
jle
xor
(bad)
out
test
add
cdq
fisubr
call
in
xor
xchg
or
add
test
pop
dec
and
fcomp
(bad)
clc
sub
int
xchg
mov
iret
mov
popa
(bad)
xchg
ja
mov
imul
or
xor
cwde
xchg
or
jmp
mov
or
push
fwait
dec
call
jmp
pop
jae
jge
or
xchg
sub
xchg
xor
ss
std
loope
dec
mov
inc
mov
sub
outs
mov
out
je
out
mov
and
push
icebp
push
ds
cmps
pop
pop
mov
cwde
push
dec
adc
movs
dec
leave
xchg
mov
sbb
or
ss
ja
je
mov
call
xlat
mov
cmp
push
cwde
adc
(bad)
push
jmp
pop
and
mov
jbe
cmps
dec
clc
push
xor
xchg
push
and
ss
in
cli
pop
js
or
loopne
inc
xor
and
rcr
mov
movs
jecxz
dec
fnstcw
mov
dec
sti
adc
ret
lods
sub
jg
aad
popa
stc
(bad)
xor
jmp
mov
sbb
(bad)
ins
adc
or
mov
das
xchg
sub
ds
xchg
addr16
js
test
xchg
test
fs
test
enter
mov
mov
out
push
in
cwde
(bad)
adc
fst
push
adc
mov
iret
xor
push
lea
mov
ret
cdq
sub
push
xchg
cwde
pop
dec
xor
add
or
push
pop
and
cs
call
mov
arpl
fs
mov
jge
sub
cwde
imul
icebp
adc
je
xchg
fcom
test
push
add
loop
fcom
pminsw
push
xchg
push
jo
cdq
test
jbe
outs
jno
mov
or
xor
in
xbegin
les
cmp
sub
xchg
xor
int3
ficomp
test
or
inc
ret
cwde
and
dec
test
adc
add
sub
rcr
iret
rol
cmp
mov
cwde
out
pop
and
cmps
fnstcw
sbb
mov
mov
imul
or
repz
data16
mov
adc
punpcklwd
mov
clc
sbb
rol
sub
jo
push
adc
and
test
ja
pop
mov
ins
out
mov
aam
cwde
add
cwde
shl
pop
imul
stc
bnd
xor
ins
ffree
in
add
dec
push
pop
sub
cwde
fwait
bound
cwde
push
adc
outs
xchg
icebp
scas
dec
sub
adc
dec
cmps
inc
sub
js
mov
mov
ror
xlat
arpl
cmp
in
sub
xchg
mov
call
mov
adc
(bad)
mov
sbb
stos
xchg
push
and
pop
not
test
rol
xchg
xchg
inc
not
push
popf
ins
inc
stc
add
test
cwde
xor
jmp
cs
cwde
popf
pop
sub
jl
lahf
sahf
lods
mov
dec
pop
jmp
lods
xchg
cli
ins
dec
mov
aad
push
push
jno
cs
mov
or
mov
mov
daa
cmp
jg
popf
push
cmc
sub
xchg
push
es
jmp
das
or
mov
or
push
xchg
cmps
sub
gs
imul
ficomp
repz
fist
cli
(bad)
mov
mov
test
retf
xor
jns
inc
fwait
jo
mov
xor
lahf
(bad)
repz
cwde
add
inc
daa
mov
mov
in
fadd
ja
cs
inc
cli
push
or
jp
jb
dec
fadd
jp
inc
cwde
retf
fsubrp
das
xor
cs
lds
inc
pop
mov
xchg
jns
mov
fdivr
out
mov
mov
jle
or
dec
sbb
push
in
adc
outs
cmp
jge
cwde
(bad)
enter
loopne
rcl
push
into
call
int3
rcr
scas
stos
ds
jle
ss
dec
pop
or
mov
cmp
pop
ss
inc
mov
aam
cs
jp
or
jb
mov
mov
xchg
xchg
dec
push
adc
pop
rcr
push
jnp
(bad)
sti
sar
sub
out
push
aam
sti
xchg
ror
pop
jns
fcom
das
dec
pop
jp
lods
mov
(bad)
cmp
pop
outs
or
push
ds
xchg
mov
mov
push
sbb
loopne
xor
cmp
xchg
pop
aas
arpl
sbb
out
rcr
mov
das
jg
add
pop
icebp
push
dec
push
xchg
or
test
or
shr
sbb
mov
add
cmp
test
inc
fnstenv
mov
jmp
cmc
popf
push
or
pop
inc
cmp
dec
push
cwde
lahf
outs
jg
dec
add
inc
xor
in
ror
fcom
adc
into
in
rcr
sbb
adc
jecxz
call
mov
imul
sbb
sbb
xchg
dec
mov
push
and
nop
stos
adc
or
cdq
out
sar
(bad)
popa
push
sub
xchg
ds
mov
int3
xchg
and
add
push
dec
jecxz
ss
mov
cs
pop
xor
mov
rcr
shl
into
pop
retf
mov
jbe
and
xchg
cdq
adc
cdq
mov
sbb
adc
fidivr
or
stc
mov
fisttp
in
mov
push
inc
sub
push
inc
ds
and
dec
mov
ins
xor
out
iret
adc
cwde
sub
add
mov
test
cmp
pusha
cmp
or
xor
iret
aas
and
(bad)
aaa
gs
dec
push
push
sbb
push
xchg
popa
test
(bad)
imul
push
lea
jmp
aaa
add
dec
sub
xchg
scas
mov
adc
addr16
jmp
or
jmp
ins
cwde
xchg
xchg
push
add
fstp
jl
(bad)
mov
ret
add
cmc
push
sar
xchg
les
or
loopne
int3
or
mov
jnp
inc
call
add
into
xchg
and
cmp
cwde
mov
xor
cwde
dec
fnstsw
pop
or
repnz
push
xchg
mov
cdq
nop
cld
dec
cmp
jl
inc
xchg
in
cmp
pop
out
jo
call
mov
jbe
push
arpl
stos
jns
aad
cwde
das
ret
mov
xchg
rcr
jae
pop
add
mov
pushf
inc
pop
inc
ds
adc
out
xchg
push
xchg
add
pop
mov
inc
inc
xchg
scas
mov
adc
leave
leave
pop
xchg
pusha
push
les
or
or
pop
jmp
inc
pop
and
mov
jmp
mov
push
xchg
bound
add
pusha
xchg
push
ins
sbb
hlt
mov
div
in
pop
mov
mov
add
out
adc
scas
out
les
dec
push
cmp
hlt
pop
or
jp
pop
bound
xor
jmp
aaa
je
test
sub
sar
cmp
xchg
jae
mov
inc
pop
mov
mov
(bad)
mov
adc
aad
fld
lock
pop
jns
or
or
ins
mov
dec
sbb
pop
cmc
imul
fcomp
stc
mov
adc
add
adc
mov
mov
jmp
cwde
packsswb
ins
mov
into
xlat
cwde
gs
outs
js
ss
xchg
pusha
add
add
pop
xchg
outs
dec
mov
js
adc
inc
stos
(bad)
mov
cwde
sahf
(bad)
pop
mov
ja
aad
jno
sbb
arpl
ja
sbb
lahf
bound
sub
cli
test
mov
hlt
pop
cwde
sar
or
jo
xchg
xor
push
mov
aad
push
es
imul
mov
enter
cwde
cmp
xor
inc
imul
sub
jmp
test
shl
sar
call
lods
or
push
inc
push
pop
cmp
ins
push
xchg
(bad)
and
mov
stos
dec
mov
or
push
aas
dec
cs
and
cs
lock
cmp
ret
test
loope
pop
jg
cwde
jbe
loop
sub
idiv
imul
sbb
mov
stos
fs
xchg
mov
sub
jno
fnstenv
mov
ja
(bad)
mov
mov
cmp
(bad)
and
inc
stos
out
xor
loopne
mov
mov
mov
pusha
stos
xchg
jbe
sub
ss
fstp
sub
push
sbb
jne
pop
push
xchg
mov
lds
stos
js
cmp
movs
neg
lods
mov
fwait
scas
repnz
mov
push
jmp
sbb
mov
gs
mov
scas
push
movs
into
stos
cmp
frstor
jo
xor
fwait
mov
pop
(bad)
mov
in
pusha
xor
sub
loopne
(bad)
popf
xchg
fisub
lahf
dec
adc
dec
mov
mov
call
sub
cmp
cmp
dec
pushf
and
sbb
(bad)
int
cwde
retf
sahf
lods
mov
push
and
cwde
sbb
pusha
loopne
cwde
jmp
mov
xchg
xlat
rcl
repz
pushf
adc
jecxz
pop
dec
push
clc
into
lods
cwde
fnsave
mov
or
mov
movs
cwde
mov
call
sub
jns
mov
sbb
test
test
jb
push
sbb
pop
inc
fcom
aad
std
ins
xchg
fcmove
cwde
jmp
int3
cdq
cmps
sub
outs
sbb
mov
fcom
dec
sub
in
push
mov
jno
cmps
sbb
xchg
fwait
gs
xchg
xchg
xchg
and
pusha
jns
or
push
jne
pop
cmp
add
push
xchg
or
jo
cwde
call
xchg
cwde
sub
push
add
xlat
cwde
and
pop
sbb
jae
xchg
fwait
jp
cmp
cmp
xchg
aas
pop
(bad)
int
jle
sahf
jg
dec
cwde
pop
sar
lea
in
clc
sbb
push
adc
pusha
inc
fistp
repz
cli
movs
pop
pop
cld
das
pop
cmc
jno
cwde
xor
leave
pop
lods
sbb
rol
push
add
jno
mov
loop
add
in
sti
adc
pop
enter
push
xchg
lahf
xchg
inc
xchg
ins
pushf
mov
pop
cli
jae
xor
add
xchg
cmp
out
jecxz
cwde
xchg
call
mov
lahf
mov
adc
sbb
or
in
(bad)
fidivr
jl
sub
sub
cld
push
cwde
jmp
std
fwait
pop
out
ss
jbe
stos
mov
mov
cwde
cmps
fidivr
js
fistp
(bad)
jns
push
add
mov
inc
or
mov
ret
aam
call
mov
mov
les
loopne
aam
xchg
and
cwde
push
bound
lods
sub
cwde
dec
repz
pop
rol
mov
xchg
popa
mov
int
in
sbb
or
pop
sub
loopne
dec
stos
sahf
jl
js
(bad)
test
cwde
push
inc
jmp
pop
(bad)
xchg
iret
mov
mov
mov
mov
pop
dec
popa
jge
lea
(bad)
or
push
sub
sbb
push
adc
inc
mov
and
lock
sbb
ins
jmp
xchg
and
cmp
das
call
icebp
inc
xlat
jne
out
movs
lahf
add
sub
dec
retf
call
stc
ins
sub
repnz
jl
hlt
retf
cwde
or
pop
dec
das
outs
cwde
jl
lods
dec
repnz
int
jmp
cmp
jo
cwde
inc
neg
and
(bad)
fmul
inc
jl
mov
or
cmp
cwde
pop
jle
mov
cwde
imul
in
pop
into
jp
jne
adc
or
mov
sbb
out
xchg
or
in
aam
nop
ret
movs
mov
fsubr
jecxz
add
cwde
cli
and
cwde
lds
and
dec
(bad)
repz
cwde
dec
xlat
mov
sbb
mov
int3
fs
mov
or
lods
mov
cmc
ds
cdq
shl
arpl
and
xchg
das
inc
mov
cmp
xchg
cwde
(bad)
imul
xchg
pop
push
scas
fadd
leave
xor
adc
push
clc
push
adc
push
pop
jmp
xchg
mov
loop
push
sub
add
xor
jno
sbb
test
pop
sub
push
add
ins
mov
push
mov
cli
pop
sbb
or
sub
mov
pop
sub
jne
pop
lock
sbb
add
or
jne
imul
xchg
cwde
or
stc
cwde
out
cs
cdq
shl
sub
fcom
mov
cwde
pushf
popa
fwait
ins
fdiv
pop
mov
push
mov
push
sbb
in
outs
mov
outs
(bad)
test
repnz
rcr
mov
xor
jp
or
outs
lods
shl
repnz
xor
cs
cmp
add
push
bound
sahf
mov
xchg
cwde
sbb
mov
pop
cmp
rcr
mov
imul
scas
js
xchg
adc
pop
retf
repz
mov
jecxz
cwde
inc
push
cld
xor
sti
ins
scas
push
cmp
cmps
mov
std
enter
push
inc
jg
sub
pop
cwde
mov
(bad)
ret
push
vpsubq
mov
inc
out
pop
in
popa
cmps
lods
js
and
cmp
add
call
ja
xor
mov
rol
xor
jp
lahf
adc
psllw
xchg
stos
mov
repz
dec
aas
mov
xchg
test
or
call
movs
fdivp
sbb
sub
ins
arpl
arpl
jge
and
cwde
inc
sub
jno
cmp
lock
ds
add
loope
sbb
aaa
add
cmp
addr16
outs
mov
xchg
outs
lods
mov
int3
ss
xchg
add
movs
or
pop
cmp
cwde
test
fisub
add
in
sbb
(bad)
leave
xlat
sub
lods
stos
cwde
nop
inc
and
arpl
ret
adc
or
dec
and
and
inc
push
pop
(bad)
mov
mov
sbb
add
lahf
cmp
sub
mov
push
mov
fisttp
out
imul
add
fiadd
stos
or
aaa
jae
mov
sets
inc
ins
sub
push
cmps
stos
hlt
(bad)
dec
push
xchg
jp
jl
sbb
fwait
push
loop
cmc
ja
popf
jbe
sahf
add
pop
lods
cmp
test
aas
jne
cwde
mov
inc
sub
jns
and
mov
mov
add
mov
dec
in
test
push
sbb
in
addr16
cwde
pop
aam
pop
pop
push
dec
test
pop
dec
sub
cwde
int3
xchg
adc
dec
cdq
mov
and
xor
shl
and
and
cwde
mov
setl
fwait
adc
(bad)
cli
les
loop
cwde
or
sub
jmp
adc
mov
mov
mov
sbb
xchg
jp
mov
jo
popf
mov
mov
ret
and
push
movs
dec
scas
ficom
add
mov
push
inc
cmp
pusha
mov
clc
ret
das
dec
jg
cwde
scas
push
ret
rol
xchg
mov
cmp
push
xchg
jbe
cdq
retf
rcl
scas
cwde
jl
dec
pop
loopne
inc
lahf
sbb
daa
or
xchg
mov
stc
mov
cli
mov
sbb
hlt
clc
sbb
mov
sub
fimul
dec
cdq
jno
jp
cmps
mov
or
cmps
aas
dec
jmp
xchg
lods
inc
nop
cwde
push
and
(bad)
movs
sub
sub
mov
lahf
mov
inc
mov
xor
(bad)
movs
dec
jno
mov
sbb
lods
loopne
xchg
test
call
mov
adc
push
cwde
loopne
icebp
fstp
xor
sbb
in
adc
push
push
adc
pop
dec
call
inc
pop
pop
sbb
in
pop
cwde
aam
xchg
cmp
pop
xchg
or
movs
lods
pop
add
popf
sbb
bound
ins
cmp
jmp
mov
xchg
sahf
outs
mov
nop
push
jp
xchg
out
sub
cmp
idiv
loope
retf
outs
popf
sub
sbb
wbinvd
cmps
xlat
in
add
sbb
(bad)
jg
jle
or
jecxz
lods
retf
xchg
or
loop
call
loop
xchg
inc
sub
pop
aad
bound
cld
cmp
cdq
call
sub
fistp
add
pop
push
das
mov
cmps
test
xor
retf
test
mov
scas
push
cmp
rol
into
cmp
cmp
and
push
enter
jmp
mov
ret
mov
sub
ins
pop
call
jns
xchg
stc
std
push
push
das
or
xchg
xchg
stos
mov
mov
mov
sbb
adc
fucomi
jo
cwde
jp
(bad)
sub
jl
call
xchg
mov
cwde
ins
inc
icebp
mov
test
movs
jmp
test
push
fcmovu
lea
xor
cmp
fs
gs
xchg
clc
mov
push
loopne
xchg
fdiv
les
ret
fsub
dec
stos
mov
retf
cwde
and
xchg
lods
mov
cwde
loop
xor
popf
xchg
int
adc
int3
shl
mov
add
push
dec
push
push
daa
jle
in
pop
in
cwde
inc
das
add
mov
sub
add
xchg
rol
rcl
rcl
popf
leave
in
stos
jno
call
cli
add
dec
fmul
imul
mov
ins
inc
ds
push
mov
push
daa
xchg
ret
lods
leave
scas
retf
mov
cwde
mov
xor
fdivr
sub
mov
mov
dec
or
out
mov
jns
adc
xor
sbb
cmps
mov
push
in
inc
sbb
enter
sahf
xchg
or
and
pop
loop
jmp
cmp
mov
fidivr
push
adc
sahf
mov
scas
sbb
adc
loop
jmp
cmp
js
xchg
jg
pusha
xchg
cmps
mov
mov
nop
popa
sbb
popa
inc
pushf
es
push
ret
clc
into
rcr
xor
sbb
ror
call
xchg
mov
lock
add
dec
fdivr
inc
sub
add
data16
mov
inc
retf
and
cwde
fld
ds
sqrtps
sbb
(bad)
jmp
addr16
rcr
cld
push
xchg
in
add
mov
adc
push
ja
ins
mov
jl
xchg
sahf
lea
movs
mov
test
clc
push
xchg
mov
pop
xchg
fcomp
pop
addr16
add
or
dec
pop
mov
mov
stos
cwde
inc
outs
repz
cmp
bound
cwde
loopne
mov
imul
cwde
aaa
leave
fucomp
push
stos
ror
(bad)
aad
retf
fsub
sbb
popf
jle
in
cld
jmp
push
loope
sub
and
cwde
cmp
jbe
int
int3
js
mov
leave
dec
cwde
shl
pop
inc
xchg
or
mov
mov
das
push
push
jge
dec
cwde
sub
cmps
ret
addr16
fsubr
mov
xchg
cwde
leave
test
cwde
je
jb
fs
dec
scas
xor
jmp
mov
jmp
xchg
xchg
mov
xchg
iret
add
loopne
rol
sub
add
add
cmp
aas
cwde
inc
pop
sub
push
fwait
loope
mov
fs
in
jbe
jmp
mov
mov
sbb
jnp
dec
mov
scas
sbb
xchg
loope
fmul
and
add
sub
(bad)
xchg
lds
fsub
popf
addr16
add
sbb
scas
imul
and
pop
(bad)
stc
mov
data16
or
mov
shr
add
pop
cmp
cwde
in
mov
out
jo
scas
test
cwde
pop
std
sti
int
push
sub
xchg
sbb
test
or
dec
sub
push
js
imul
lods
mov
jp
outs
test
mov
mov
or
(bad)
mov
push
inc
or
mov
rcr
cdq
add
pop
xchg
add
jecxz
cwde
lahf
leave
repz
(bad)
(bad)
push
cwde
mov
xchg
ror
int
stos
push
sub
dec
in
xchg
cmp
mov
test
and
ss
or
outs
fimul
pushf
movs
cld
ret
out
cs
es
sbb
test
rcl
fsubr
addr16
cwde
mov
out
cmc
add
sbb
push
es
push
dec
add
push
fsub
xor
xchg
in
lahf
jge
sysexit
pop
(bad)
mov
lea
(bad)
sbb
ins
aad
mov
outs
cwde
sahf
adc
jno
icebp
cmp
dec
mov
xlat
push
mov
js
pop
das
xchg
sub
adc
adc
sbb
and
cwde
mov
(bad)
mov
xchg
cmp
shr
ret
mov
cmp
xchg
fcom
test
sbb
sub
out
add
jmp
pop
fimul
ins
push
cwde
inc
jp
and
cwde
loope
popf
pop
adc
add
add
icebp
xchg
or
xor
jne
sub
mov
call
rcr
ins
cmp
fnstsw
xchg
mov
add
ja
scas
cwde
aas
fdivr
cmp
jns
jge
xchg
mov
sbb
xor
mov
sbb
test
clc
pop
cwde
and
out
(bad)
xchg
xor
jb
xchg
sub
leave
xchg
push
mov
fistp
mov
cwde
xor
and
dec
stos
mov
xchg
(bad)
cmp
jg
inc
js
add
jge
inc
retf
shl
sbb
jo
in
jp
stc
and
popf
or
adc
adc
test
mov
inc
aad
xlat
out
jbe
addr16
test
icebp
enter
sbb
bound
lock
xchg
daa
xor
mov
adc
dec
out
jmp
cwde
mov
mov
xor
ja
inc
xchg
int3
aas
and
xchg
ins
mov
sar
in
xor
jg
mov
mov
sbb
jmp
pop
imul
outs
pushf
sbb
xchg
popa
test
add
leave
jbe
pop
inc
inc
(bad)
cwde
loope
sar
lock
and
xchg
mov
xchg
push
xchg
xor
(bad)
fimul
std
loop
mov
(bad)
int3
or
pop
cmps
into
mov
dec
inc
das
pop
cwde
(bad)
pushf
sbb
push
loopne
pop
pop
inc
int3
rcr
js
and
inc
ss
push
sub
cwde
sbb
in
retf
pop
cmp
(bad)
into
pusha
push
nop
repnz
add
cmps
stos
fisubr
loope
iret
popa
into
jmp
pushf
cmp
cwde
shl
(bad)
(bad)
xchg
adc
in
shl
mov
push
fbstp
mov
das
adc
xor
ret
sar
xchg
pop
in
pop
sbb
inc
sub
out
cdq
imul
call
ret
and
hlt
jae
jecxz
repz
push
sbb
mov
ins
adc
mov
sub
xchg
fcom
sub
call
adc
push
push
mov
mov
add
adc
ss
and
dec
cli
rol
imul
outs
pop
stos
pushaw
mov
in
int3
pop
pop
clc
jg
cmc
xchg
push
fs
add
sahf
or
test
sbb
out
(bad)
ror
inc
adc
pop
xchg
cdq
sbb
(bad)
and
fdivr
inc
push
pop
inc
(bad)
cs
outs
mov
nop
or
sbb
(bad)
cli
in
ret
and
xchg
js
cwde
scas
mov
hlt
(bad)
adc
jmp
popa
out
cdq
das
xor
rcr
add
jnp
rcl
sub
js
mov
es
mov
xor
dec
ins
sub
mov
rcl
sbb
jno
call
push
cmc
int3
fistp
jle
or
adc
inc
xor
xor
cwde
test
sti
mov
cwde
test
stc
cmps
adc
mov
jecxz
mov
jmp
call
adc
xchg
pop
and
mov
xchg
adc
mov
mov
cwde
xchg
xor
or
xor
bound
sbb
mov
daa
xchg
ret
mov
data16
add
test
ds
xchg
jmp
ss
add
push
adc
sbb
movs
in
js
dec
(bad)
cli
ret
cwde
xor
ret
arpl
mov
pop
retfw
shl
sti
or
dec
outs
jnp
dec
dec
test
sar
push
fnstsw
add
sub
pop
repnz
je
sub
sub
cmps
cwde
int3
cdq
inc
push
and
pushf
xor
inc
adc
loope
mov
pop
dec
fs
call
xor
pusha
xchg
cld
(bad)
pop
cli
sbb
ret
cwde
(bad)
inc
pop
dec
aad
les
push
aas
std
sbb
stos
push
push
loopne
cli
int3
in
fwait
scas
dec
je
data16
mov
xor
int3
out
cwde
xchg
outs
shl
xchg
xlat
test
jecxz
int
dec
jns
(bad)
mov
push
mov
mov
mov
inc
mov
pop
xchg
ror
add
sub
inc
jecxz
or
ja
jnp
std
cmp
cwde
xor
test
jmp
in
ins
jl
test
inc
push
sbb
or
lock
dec
push
clc
dec
dec
push
addr16
jmp
scas
adc
sub
pop
xor
push
out
xchg
cwde
test
inc
mov
cmp
retf
fldcw
mov
and
xor
stos
sbb
sbb
int
or
push
mov
push
pop
sbb
daa
push
dec
ins
pop
cwde
lods
add
(bad)
adc
jecxz
stos
sbb
pop
sub
mov
cmp
fnstsw
(bad)
call
xchg
aad
(bad)
mov
pop
or
mov
adc
pop
shl
rol
and
jnp
movs
nop
cmp
nop
push
in
enter
pushf
loope
push
mov
sbb
fwait
or
xor
lahf
dec
pop
(bad)
pop
inc
in
dec
push
sub
xchg
adc
enter
pusha
mov
jle
pop
ret
addr16
test
sub
push
loopne
sar
dec
sti
or
data16
out
fdivr
pop
test
and
jle
(bad)
jle
mov
clc
pusha
stc
mov
mov
mov
sbb
pusha
fild
stc
lds
call
test
inc
sub
scas
ds
cwde
jmp
lods
xchg
mov
mov
pop
jb
fisub
int3
or
jno
(bad)
loopne
sub
mov
inc
jae
outs
jne
mov
mov
or
jp
mov
lock
or
inc
cwde
pop
aas
imul
gs
and
and
push
cmp
call
rcr
mov
es
cwde
and
daa
outs
jae
ins
clc
jnp
pop
outs
(bad)
(bad)
xchg
fbld
xchg
imul
push
sub
(bad)
cwde
dec
pop
repz
cmps
mov
cs
sub
xchg
mov
mov
cwde
dec
pop
adc
ror
pop
adc
mov
neg
fnstcw
xchg
mov
push
call
sar
and
imul
jne
fs
fwait
movs
(bad)
mov
xchg
xchg
shr
adc
jmp
xchg
pop
xchg
mov
inc
mov
cwde
fild
mov
or
cwde
mov
xor
and
scas
and
addr16
dec
js
jecxz
mov
sub
push
push
xchg
fisub
shl
or
xor
movs
sub
dec
cs
outs
es
add
mov
inc
outs
lahf
or
mov
addr16
sub
aas
add
loope
inc
and
cmp
out
fs
adc
push
ffreep
loope
sbb
neg
cmp
cld
jbe
cli
xor
xor
mov
push
int
jo
cwde
stos
aas
and
mov
push
mov
sbb
jmp
cmc
push
xchg
aas
push
int
(bad)
cmp
mov
sub
inc
pop
sbb
popa
push
pusha
cmp
mov
mov
dec
mov
ret
cdq
aam
xlat
sbb
jo
push
cwde
cwde
stos
test
inc
mov
pop
and
cmp
aam
loop
mov
call
das
inc
or
adc
cmp
sar
test
sbb
imul
sub
jno
out
cwde
push
and
add
push
call
scas
mov
xor
test
jne
mov
addr16
test
xchg
xlat
fistp
(bad)
mov
sbb
popf
xchg
scas
jbe
in
lahf
repnz
lahf
std
(bad)
test
xchg
loopne
in
retf
adc
add
xchg
cmp
in
outs
out
pop
cmp
push
xchg
sbb
inc
pop
sub
lahf
gs
ret
adc
in
adc
popf
push
out
ins
test
in
cwde
fnstsw
jge
push
cwde
dec
stos
je
xchg
xor
lods
ins
inc
clc
fist
cld
sub
mov
fdivr
jle
sbb
xor
jo
test
sbb
rol
or
ret
cwde
add
mov
aad
mov
cdq
ins
test
cwde
xor
cli
pop
icebp
test
popf
dec
jmp
cmp
sbb
push
mov
fstp
mov
js
(bad)
cld
jl
xor
call
add
adc
dec
std
xchg
mov
hlt
ins
outs
lahf
das
ds
push
cmp
xchg
xchg
or
outs
js
pop
push
in
nop
leave
retf
out
xchg
cmp
jne
mov
cwde
inc
cs
push
dec
jnp
les
mov
cmp
or
(bad)
mov
stos
repz
xorps
pop
loop
or
xor
jnp
pop
xchg
xchg
jge
mov
ror
clc
sub
int3
gs
xchg
cwde
adc
imul
push
jmp
(bad)
mov
xchg
(bad)
xor
jne
pop
rcr
jg
dec
arpl
pop
retf
js
mov
mov
test
cdq
jge
cdq
lods
mov
aad
movs
std
ror
cmps
xor
cwde
jbe
adc
stos
xchg
or
cmp
or
cwde
sbb
movs
ror
pop
and
mov
adc
bound
cwde
adc
cmc
mov
arpl
or
pushf
test
out
shl
xchg
mov
call
mov
push
mov
loope
xchg
test
cwde
jmp
rcr
jo
fcmove
cwde
(bad)
cmp
mov
aad
cdq
jl
pop
and
jne
movs
push
inc
retf
jl
cwde
add
pop
push
std
sub
sub
rcr
lahf
jae
xchg
jg
dec
mov
clc
aam
sub
dec
test
dec
adc
outs
dec
ins
sbb
push
cmp
jb
imul
or
sbb
xor
sti
addr16
call
rcl
xchg
cld
cwde
(bad)
test
cwde
ficom
mov
cwde
mov
cmp
mov
leave
sbb
ds
outs
popa
cwde
ja
xchg
loope
rcr
ss
aas
xchg
pop
sbb
xchg
out
dec
pop
push
cmp
pop
pop
xchg
sub
arpl
xchg
retf
fsubr
add
mov
jno
ss
not
mov
repz
add
stos
stc
ficom
jle
cwde
test
fs
std
jmp
ss
cdq
sub
enter
xchg
mov
test
leave
mov
xchg
and
pop
popa
aaa
sbb
cdq
aas
sbb
scas
icebp
dec
xchg
pop
ja
mov
rcl
xchg
in
gs
pop
dec
adc
stos
mov
pop
jmp
xor
mov
xor
mov
inc
pusha
fcom
sub
in
(bad)
xchg
jmp
adc
ins
scas
pusha
push
sub
mov
hlt
pusha
pop
daa
cmp
ret
xchg
fisubr
push
into
fild
in
int
dec
xchg
push
adc
push
xchg
fistp
xor
mov
jle
lods
add
jbe
jge
dec
fnstcw
xchg
cmp
dec
dec
push
cwde
inc
pop
je
out
sub
in
outs
pop
mov
stc
mov
sbb
mov
xchg
fs
add
mov
arpl
cld
fcomp
sbb
fstp
mov
xchg
jb
mov
pop
and
out
cmp
cwde
and
nop
movs
aaa
inc
xchg
pop
cmp
arpl
push
adc
ds
call
sti
cmp
xchg
les
dec
sub
test
jno
stos
mov
inc
(bad)
ss
xor
repz
xor
mov
sub
clc
and
mov
div
jne
scas
ins
repnz
rol
lods
dec
add
cwde
nop
call
cwde
jno
jnp
test
xchg
sub
data16
sar
sub
cwde
lods
xchg
(bad)
jns
outs
inc
pop
cwde
xor
mov
sub
test
sbb
inc
sbb
pop
daa
mov
xor
jl
arpl
loope
rcr
mov
in
mov
cwde
dec
adc
loop
lods
fxch
cwde
xchg
scas
in
std
or
sbb
mov
or
ret
jne
sbb
or
dec
add
sub
fwait
out
mov
push
mov
pop
unpckhps
sbb
xor
mov
and
xchg
stc
inc
jp
pushf
pop
inc
sar
mov
popf
in
mov
scas
sub
inc
fisttp
mov
std
in
adc
stos
test
bound
cs
movs
aam
sti
or
loop
cdq
sub
fs
jnp
xchg
in
jmp
sub
xchg
leave
fwait
lods
sbb
test
push
sbb
jecxz
inc
fisttp
xchg
pop
adc
or
cmp
(bad)
(bad)
inc
push
dec
push
gs
idiv
and
pop
clc
lods
cwde
bound
test
cwde
inc
in
repnz
cmp
xor
push
mov
ret
cmp
xchg
(bad)
pop
sub
int
popa
xchg
sar
lds
xchg
mov
pop
cmp
sti
mov
call
fidiv
or
cwde
fld
icebp
xchg
push
and
out
cwde
push
inc
hlt
and
mov
stos
mov
out
xchg
add
jbe
clc
sub
cmp
sub
(bad)
stc
sub
js
mov
xchg
arpl
xchg
dec
cwde
imul
adc
inc
test
lock
push
sub
lods
cwde
jg
and
xchg
data16
mov
xchg
ins
sub
ds
aaa
add
dec
fwait
or
dec
cwde
xor
cdq
mov
cwde
in
pop
ffreep
neg
clc
outs
cwde
dec
test
xchg
mov
popa
jg
lods
sbb
xchg
cmps
mov
inc
cwde
leave
sbb
sbb
xchg
add
cmp
je
sahf
stos
mov
fld
xchg
call
dec
pop
sub
stos
or
nop
mov
cmp
ret
mov
pop
leave
pop
mov
xor
adc
(bad)
mov
fnstsw
push
and
push
retf
xchg
inc
adc
push
addr16
test
scas
add
xchg
ret
lods
movs
call
popf
xchg
shl
push
mov
(bad)
sbb
imul
sbb
sub
lods
jecxz
mov
cwde
imul
mov
or
enter
jae
pop
xor
xor
mov
xchg
fdivr
push
cwde
dec
and
(bad)
mov
(bad)
bound
imul
inc
cli
add
cmp
mov
cmp
xchg
pop
and
inc
inc
cmp
jbe
or
data16
xchg
cmp
jecxz
cwde
jb
mov
and
or
adc
mov
mov
int3
inc
xchg
out
push
loope
sbb
repnz
cmp
mov
xchg
stc
xor
ffreep
inc
cmc
scas
push
push
jne
cwde
cmc
adc
cs
push
adc
xchg
(bad)
fcom
mov
mov
imul
fidiv
dec
inc
(bad)
loop
fcom
and
cwde
sub
inc
xchg
or
cmp
adc
mov
sub
fsubr
add
bound
xor
sub
and
in
add
js
xchg
nop
xchg
xchg
(bad)
jmp
fxch
cwde
stos
jmp
cwde
cmp
movs
mov
xchg
sub
sub
test
in
call
inc
inc
mov
xchg
sub
pop
sub
pop
adc
loope
jp
adc
cwde
sub
push
jo
cwde
scas
daa
inc
xchg
cmps
mov
or
in
jmp
cmp
sbb
test
adc
(bad)
pop
add
test
das
test
(bad)
sbb
push
and
cwde
ss
xchg
popa
(bad)
and
sub
jl
bound
frstor
or
in
dec
cwde
sub
mov
xchg
or
ds
pop
lods
ja
iret
sub
ret
imul
loope
sbb
push
jbe
push
mov
lods
pusha
test
(bad)
sub
push
in
add
fisttp
ror
mov
popf
xor
inc
cld
dec
lahf
nop
jg
sti
cwde
mov
xor
outs
ror
push
sub
xchg
cwde
jns
clc
fld
adc
cwde
mov
sub
push
sub
inc
inc
bound
push
test
dec
jl
push
xchg
xchg
jl
mov
outs
push
mov
push
sub
and
mov
mov
and
cmp
add
push
xchg
ret
neg
cmp
neg
inc
sub
push
sub
pop
hlt
test
sub
pusha
inc
sub
cdq
sub
xor
jmp
enter
add
popa
cbw
hlt
or
pop
jg
push
push
mov
cmp
stc
mov
push
cwde
mul
nop
bound
rcr
push
sbb
sub
push
popa
mov
or
pushf
(bad)
test
fmul
jnp
add
xor
ret
adc
inc
mov
mov
jae
sub
cmp
fisttp
les
movs
cwde
inc
mov
dec
jmp
xchg
or
adc
xchg
popa
mov
stos
mov
or
mov
sbb
sbb
cli
(bad)
xlat
lds
sub
imul
in
leave
shl
jo
xor
lahf
(bad)
out
mov
jbe
pop
in
pop
adc
adc
mov
sub
pop
out
out
pop
retf
pushf
mov
popf
adc
pop
pop
ins
add
mov
out
sbb
sub
mov
cmp
add
or
jno
jp
lahf
mov
shl
in
ret
jbe
jp
jle
lahf
mov
shl
loop
retf
adc
dec
hlt
xchg
mov
arpl
jmp
stos
sub
push
mov
pop
push
and
adc
mov
adc
inc
pop
sub
xor
add
clc
bound
pop
int3
add
inc
fdivr
cmps
cmp
fsub
call
xchg
rol
add
call
jo
adc
xor
pop
xor
xchg
jle
sbb
(bad)
ret
loopne
sbb
mov
or
dec
sbb
sbb
xchg
stos
mov
es
xchg
cmps
or
lock
lods
adc
mov
push
popf
jnp
cwde
(bad)
ret
je
std
xchg
adc
imul
ins
mov
iret
(bad)
call
mov
loop
outs
adc
rcl
shr
or
jmp
sbb
ss
cwde
push
sub
lods
lods
xchg
shr
dec
adc
cwde
and
jl
iret
(bad)
lds
add
pop
adc
ja
leave
push
cmp
pop
mov
call
(bad)
or
cmp
xchg
add
aad
jmp
cwde
inc
idiv
and
(bad)
pop
jbe
int3
push
add
fimul
mov
pop
les
and
mov
lods
jecxz
inc
push
shl
lahf
arpl
jmp
sbb
aas
mov
inc
lahf
fldcw
jecxz
lds
ret
xchg
and
xor
and
mov
jmp
daa
daa
xchg
jo
push
test
xchg
mov
cmp
aam
shr
mov
(bad)
enter
jg
fdivr
sbb
and
xchg
xchg
js
popa
dec
ins
outs
fwait
cwde
mov
idiv
xchg
or
repz
mov
cmp
cwde
jle
inc
jp
pop
push
cwde
mov
xchg
ds
ror
cwde
push
cmps
fnstsw
out
pop
cwde
hlt
loope
sti
aaa
xor
xchg
scas
add
or
mov
push
and
fwait
and
(bad)
fcmovnu
mov
cmp
adc
and
scas
mov
cdq
idiv
mov
aad
mov
out
inc
xlat
adc
js
mov
pop
pop
outs
dec
cwde
push
jnp
dec
inc
imul
cs
jmp
lahf
loopne
lahf
das
retf
out
cwde
pop
or
adc
shl
cwde
(bad)
test
repnz
sti
mov
enter
pop
cwde
adc
lods
xor
add
ficom
cmc
or
out
popf
jle
mov
dec
popf
and
fldcw
lds
xor
lahf
fist
and
xchg
daa
add
mov
jmp
mov
pop
sahf
enter
cmp
pop
add
fst
dec
cwde
pop
imul
mov
xchg
push
cmps
mov
sub
cmp
adc
jns
repz
icebp
rcr
xor
adc
dec
retf
sub
xchg
jns
cmp
xchg
lock
cwde
test
retf
scas
out
(bad)
cwde
xor
imul
cwde
imul
shr
cmp
clc
dec
jp
pop
push
loope
push
sti
adc
jecxz
jmp
int3
mov
mov
fist
mov
jne
inc
dec
js
movs
mov
fist
inc
add
dec
ss
shr
add
int3
mov
mov
cwde
or
sahf
lea
(bad)
dec
push
xchg
or
cwde
loop
xchg
addr16
pop
sbb
adc
lock
sbb
daa
cmp
push
or
dec
jp
lods
ja
xchg
ins
jp
cmp
or
push
xor
out
mov
jecxz
adc
add
and
mov
out
inc
lahf
aam
mov
inc
mov
mov
sbb
shr
scas
mov
sbb
xchg
inc
mov
mov
cwde
inc
sbb
data16
jg
stos
aam
mov
adc
add
inc
jo
or
int3
jmp
push
cwde
mov
bound
sbb
mov
out
push
sub
push
test
push
ror
and
stc
adc
(bad)
loopne
test
test
cwde
push
add
xchg
sbb
rcr
jge
mov
sub
test
xor
xlat
xchg
cmps
mov
fild
mov
mov
xor
or
call
inc
or
out
gs
jecxz
cmp
fist
sar
xor
mov
in
cli
das
cmc
cwde
sub
push
cmp
mov
mov
xor
inc
mov
dec
sbb
js
jns
jecxz
cwde
push
adc
sahf
call
es
mov
add
int3
popa
xor
xor
cld
xchg
scas
sbb
arpl
cdq
int3
aad
fsub
repz
std
js
jle
inc
jge
xor
jp
(bad)
pop
mov
jne
or
push
cmp
pop
pop
out
dec
into
mov
xchg
and
sbb
cmc
call
call
dec
push
mov
stc
mov
cmp
xlat
adc
or
rcr
dec
dec
cs
ds
outs
xchg
push
push
faddp
sub
mov
jecxz
add
and
bound
jae
sbb
mov
fcomp
mov
cmp
jle
imul
sahf
xchg
sbb
sub
dec
sub
add
pop
cwde
cli
test
pop
mov
cmp
push
cmp
mov
and
xchg
lods
jge
cmp
cmc
xor
sub
cwde
xchg
jns
jp
mov
pop
xchg
cmp
out
add
pop
adc
stos
sar
mov
lahf
jge
iret
add
in
das
cmp
push
pop
sahf
fld
cmp
xchg
or
xchg
lahf
push
fild
nop
sahf
bound
and
xchg
mov
mov
mov
sbb
push
adc
adc
jo
cwde
and
retf
scas
enter
push
adc
nop
and
inc
lock
js
fwait
push
cwde
out
neg
lock
xor
mov
xchg
pop
mov
enter
xchg
xchg
ror
(bad)
cdq
dec
xchg
adc
mov
cwde
ja
mov
xchg
push
xchg
xor
mov
pop
stc
jg
sbb
xchg
cdq
adc
cmps
lods
mov
xchg
jecxz
pop
sub
and
ins
cwde
push
fs
outs
shr
xchg
push
ds
jne
add
jmp
mov
popa
jns
push
movzx
xor
cwde
pusha
sub
pop
bound
cwde
loopne
inc
mov
test
push
je
movs
mov
or
lahf
ret
jmp
cdq
fdiv
sti
repz
dec
push
fs
loop
xor
pop
jo
jp
int
mov
sub
jle
and
inc
push
cwde
cmp
lahf
dec
(bad)
mov
cmp
cli
dec
cwde
push
dec
ja
xchg
jl
jns
retf
push
inc
push
mov
mov
mov
sbb
les
fdivr
jo
movs
mov
sbb
or
lods
gs
jo
jo
xchg
cwde
ds
adc
je
or
push
test
aad
sbb
cmp
or
pop
das
inc
clc
xor
cmp
add
sbb
arpl
sbb
stc
pop
xchg
rcr
lods
xchg
sbb
mov
mov
call
add
jle
mov
jo
clc
add
dec
(bad)
ins
fidiv
xor
je
and
jmp
mov
clc
jae
popf
mov
adc
js
fld
cmp
or
fmul
mov
fld
jge
sti
lahf
stc
addr16
mov
rcl
inc
stc
icebp
aam
or
out
jle
mov
mov
pop
mov
(bad)
jnp
xchg
mov
(bad)
jg
neg
mov
inc
push
lods
xchg
add
pop
adc
pusha
aas
clc
or
rol
lock
addr16
cmp
cwde
aad
jmp
(bad)
xor
lods
inc
xlat
inc
xchg
cmps
jae
std
cmps
jge
jge
iret
fsubr
fmul
retw
in
sbb
sub
leave
stc
stos
jmp
cli
mov
or
movs
retf
sbb
aaa
adc
and
ss
in
jmp
retf
daa
cmp
mov
sbb
ret
dec
fadd
xlat
cdq
mov
hlt
xor
cwde
push
inc
inc
fisttp
pop
sub
gs
aas
cwde
stos
inc
outs
out
add
adc
or
push
push
enter
ret
add
fadd
std
test
test
fdivr
sti
fnsetpm(287
mov
repnz
test
xchg
add
mov
sahf
stos
mov
ficom
cdq
mov
mov
cmp
push
xor
jp
movs
mov
sbb
adc
mov
call
stc
jecxz
es
pop
or
pop
or
call
inc
into
push
call
dec
in
int
sub
cmp
jp
js
dec
ret
aad
out
mov
std
clc
sti
sub
pusha
pop
sub
imul
mov
and
dec
pusha
sbb
in
sub
add
fyl2x
cwde
popa
ins
sub
push
cwde
pop
jnp
js
pop
out
cwde
xor
enter
call
jge
sub
aad
pop
scas
mov
jle
mov
dec
push
sbb
sub
dec
xchg
sub
add
or
sbb
call
std
dec
(bad)
int3
mov
mov
js
out
mov
jno
sub
sub
xchg
jns
mov
or
pop
and
sub
push
push
pop
jle
clc
aam
inc
jb
and
sbb
cwde
mov
dec
or
dec
xor
cwde
or
jge
dec
adc
mov
dec
or
pop
mov
dec
push
ret
xchg
xchg
jp
popf
mov
div
lods
dec
scas
mov
call
lahf
popa
mov
jne
xchg
cwde
push
xor
cmp
les
dec
xor
jecxz
icebp
adc
out
enter
cmp
(bad)
cmp
clc
or
sahf
push
mov
loope
or
icebp
push
cmp
cmp
xchg
call
or
loop
inc
push
pop
cs
sub
cwde
es
and
pop
arpl
xor
retf
or
aad
(bad)
aaa
cmc
add
push
sub
addr16
cwde
lahf
mov
xor
in
adc
or
cmps
mov
and
push
pop
and
fistp
(bad)
xlat
xchg
stos
clc
test
in
jb
bound
mov
stos
jmp
cwde
jp
xchg
fiadd
dec
in
push
mov
xor
pop
ja
popa
xchg
cwde
outs
fimul
or
call
cwde
shl
dec
fs
or
lahf
js
sbb
xchg
cwde
xor
adc
test
popf
sbb
arpl
mov
cwde
mov
in
cli
popf
das
aaa
pop
jae
hlt
cwde
and
outs
pushf
lods
mov
imul
pminsw
jbe
arpl
data16
mov
lea
jle
cwde
loopne
shr
repnz
push
pop
cmp
push
cwde
add
mov
cdq
push
pop
sar
inc
outs
xchg
add
in
out
mul
call
aam
movlps
pop
(bad)
adc
out
call
cwde
add
mov
int3
mov
hlt
mov
dec
cmp
or
lods
jbe
push
push
sar
adc
out
push
adc
jns
loop
xchg
or
mov
ret
enter
sub
mov
out
out
cwde
inc
mov
cmp
sbb
(bad)
cmps
mov
mov
in
in
mov
popf
ss
cwde
out
call
paddd
arpl
out
faddp
mov
sub
cmp
inc
cwde
mov
jne
jp
xchg
cwde
sbb
or
sub
cmps
cwde
lock
(bad)
mov
mov
jb
lods
call
out
cwde
and
xchg
adc
pop
dec
jp
pop
in
loope
sbb
cmp
pop
sbb
je
aas
es
xchg
outs
and
add
xor
or
sbb
adc
ss
pop
(bad)
cwde
in
sub
add
lock
gs
jo
leave
jmp
std
fwait
sub
mov
cwde
xchg
sbb
leave
test
cmp
cwde
movs
loopne
sub
scas
cli
sbb
mov
push
dec
push
daa
push
cwde
cwde
adc
sbb
mov
aad
push
sti
push
cmp
dec
popa
popf
data16
mov
test
add
lahf
bound
leave
mov
or
lahf
movs
xchg
mov
scas
jg
pop
push
sbb
jl
cwde
lea
mov
fcomp
loop
cmp
or
xchg
pop
pop
sub
cmps
lds
sbb
mov
das
aas
mov
leave
adc
lods
pop
test
pop
inc
addr16
mov
mov
xchg
arpl
fwait
shl
and
out
xchg
movs
test
out
pop
loopne
xchg
les
push
sbb
iret
stc
out
inc
jle
jmp
adc
mov
out
sub
loop
xchg
repnz
adc
dec
cmp
cwde
mov
add
sub
pop
ror
sbb
sbb
cli
jnp
xchg
push
test
inc
cmp
aaa
push
jne
adc
push
dec
pop
ja
pushf
outs
outs
rcr
sbb
or
cmp
xchg
clc
mov
gs
rol
sub
test
xchg
jo
push
call
pop
repz
add
xchg
in
stos
add
push
push
add
and
popf
data16
mov
add
enter
push
xor
mov
pop
repnz
xor
lds
aad
xor
mov
mov
outs
pop
cwde
push
cmp
xor
addr16
mov
les
pusha
loop
adc
xchg
cwde
pop
mov
and
je
or
adc
mov
cwde
xor
aam
call
sbb
adc
aas
add
or
das
push
icebp
push
dec
out
inc
retf
dec
pop
dec
jo
cmps
mov
cwde
(bad)
aad
fcmovb
aam
enter
fisub
repz
movs
cwde
mul
mov
es
call
pop
xlat
mov
stos
inc
add
push
mov
xchg
call
not
ficom
jmp
sbb
in
(bad)
popf
lods
out
sti
adc
aaa
pop
sub
mov
test
fadd
sahf
cwde
dec
mov
mov
scas
pop
adc
imul
push
cwde
ret
jno
leave
shl
mov
xchg
cs
push
ficomp
out
xchg
xlat
cwde
imul
pushf
mov
mov
sub
inc
stos
jle
cmp
and
pusha
adc
stos
adc
push
clc
cmp
jmp
hlt
jno
jge
mov
cwde
mov
dec
push
jp
lods
xchg
mov
push
adc
ins
cwde
loope
out
cmp
aam
imul
int3
xchg
cmps
xchg
inc
into
(bad)
fld
sub
mov
je
loop
push
ins
nop
sub
mul
inc
inc
or
pop
arpl
rcl
push
in
repnz
fs
(bad)
in
push
mov
inc
lahf
mov
xor
sbb
push
retf
xor
test
test
mov
aas
(bad)
cwde
jmp
pushf
inc
cmp
cwde
ins
pusha
and
cmp
dec
mov
imul
lods
push
add
xor
or
xchg
jns
sbb
adc
cwde
pop
pop
gs
nop
push
jge
cwde
sub
into
ds
jmp
add
cmp
cmp
adc
push
imul
sub
aam
sub
sar
cmp
adc
les
mov
inc
(bad)
lods
outs
mov
fnstenv
push
mov
cwde
mov
lea
cwde
sbb
push
aas
and
push
(bad)
ins
fcom
mov
retf
data16
cwde
xchg
jmp
cdq
jg
jl
xchg
inc
push
pop
cmp
adc
jae
cdq
call
adc
clc
pop
sbb
dec
xchg
jne
retf
inc
dec
xor
cwde
(bad)
mov
and
addr16
mov
dec
lock
fdivr
ret
xor
xchg
(bad)
adc
enter
bound
(bad)
cmp
mov
gs
mov
fldenv
(bad)
test
adc
inc
es
loopne
mov
(bad)
jo
xchg
aam
out
repnz
jecxz
mov
xchg
adc
cwde
xor
pop
pop
adc
jnp
mov
adc
cld
xchg
sub
in
push
mov
sub
in
sbb
(bad)
pop
inc
or
into
cwde
pop
xor
sub
push
sub
or
or
jle
lahf
icebp
adc
sub
(bad)
js
cdq
adc
aad
ret
push
bound
test
xchg
sar
xor
jb
add
out
push
test
xchg
inc
push
in
addr16
cwde
pop
or
ds
sbb
xor
sbb
push
out
jno
lods
sbb
mov
fistp
mov
dec
cmp
mov
imul
scas
sub
mov
jbe
loope
aam
data16
or
add
sbb
test
into
stos
or
and
xchg
stos
sub
or
leave
cwde
cli
sar
add
cwde
pop
loopne
sub
hlt
inc
repz
jno
repnz
data16
cwde
xchg
mov
add
rol
mov
pop
out
mov
cwde
pop
sub
je
jb
mov
xchg
repz
or
xor
sbb
sahf
fs
adc
cwde
fnsave
inc
mov
pop
popa
jbe
fs
xchg
stc
ja
mov
mov
cli
push
out
sbb
nop
inc
xor
jmp
lods
jb
xchg
cs
and
test
fsub
push
int3
and
cwde
jecxz
int3
cld
(bad)
repz
cwde
xor
test
push
xchg
xchg
test
ins
dec
leave
sbb
clc
mov
push
cwde
jns
sub
xchg
test
repnz
imul
cwde
sub
scas
shr
sub
sbb
mov
pop
jecxz
dec
push
xchg
in
ret
sbb
xchg
ja
sub
pop
pop
bound
xchg
pop
(bad)
mov
es
pop
aad
cmp
ror
and
jge
adc
xchg
imul
or
xor
mov
test
lea
fwait
jge
xchg
dec
mov
push
mov
sub
scas
into
cs
sub
add
xchg
sub
pop
cs
and
push
call
push
outs
push
popf
cld
xor
jb
jnp
shr
out
cli
xor
adc
cmp
jg
cdq
(bad)
sti
(bad)
mov
retf
add
je
push
sbb
mov
cwde
cmps
push
int3
(bad)
sar
outs
add
or
cli
push
cwde
inc
jae
and
mov
pop
rcr
add
mov
push
dec
inc
jno
arpl
sub
mov
push
int
push
popf
cwde
ins
test
shr
inc
push
pop
jle
sbb
jecxz
sub
jmp
xchg
mov
addr16
pop
push
and
hlt
jmp
sbb
push
cmp
mov
mov
push
jnp
inc
push
xchg
dec
sub
les
jns
xchg
shl
js
sbb
pushf
test
adc
xchg
mov
mov
xchg
outs
jno
jmp
or
cwde
mov
add
in
pusha
mov
ins
jmp
(bad)
cwde
in
idiv
loope
hlt
jns
cwde
fwait
jo
mov
sub
jmp
mov
popa
je
mov
int
add
pop
jle
inc
int
pop
aad
jecxz
pop
data16
jmp
adc
mov
mov
or
and
call
or
mov
xchg
cwde
or
and
mov
popa
js
lods
sbb
fldcw
add
sbb
mov
repnz
popf
cmp
popa
fcomp
cmp
mov
mov
cmp
and
jge
jnp
or
call
fst
mov
xchg
out
inc
scas
cbw
dec
pop
cmp
xchg
fs
idiv
pop
daa
stc
daa
out
push
in
leave
js
ins
jnp
mov
fsub
mov
xor
ds
pop
cmp
cmps
mov
sub
mov
cs
or
les
cs
addr16
push
pop
cwde
jp
xchg
mov
(bad)
mov
or
cwde
sbb
sub
repnz
mov
je
adc
or
mov
adc
jge
ins
sti
stc
les
ins
movs
cwde
xchg
ins
fwait
pop
int3
push
cwde
daa
dec
xor
sbb
lds
pop
test
push
test
stos
bound
sbb
fmulp
rcr
inc
xor
pop
loopne
lea
lahf
sbb
mov
shr
jecxz
jmp
cmps
mov
xor
ins
pop
adc
stos
rcl
sub
mov
in
add
mov
lahf
aaa
mov
(bad)
xchg
adc
or
jo
cdq
xchg
fisubr
jne
jbe
push
jl
sub
xchg
mov
adc
cmps
mov
cmp
mov
aas
xchg
cmp
sar
outs
dec
pop
xchg
mov
aas
xchg
mov
pop
push
sub
jno
sbb
das
xchg
retf
push
imul
jb
inc
xchg
aaa
out
clc
sbb
outs
add
stos
mov
or
add
mov
in
xchg
or
or
stos
cwde
jnp
lods
mov
hlt
into
fcomp
inc
pop
(bad)
cmp
test
mov
cwde
mov
ds
cwde
xchg
xlat
retf
lods
outs
mov
xchg
es
xor
and
pop
ficomp
(bad)
pop
ret
xlat
cwde
xor
je
dec
pop
and
adc
movs
sbb
pop
int
pop
ds
fidivr
and
adc
int3
cmp
mov
popa
and
cmp
cmp
cmp
cmp
jns
mov
(bad)
std
js
xchg
jae
cs
push
in
inc
xchg
(bad)
xchg
cwde
sar
fdiv
xchg
(bad)
ror
lods
jmp
inc
push
inc
js
addr16
add
cwde
repnz
(bad)
jb
movs
aad
cwde
aas
pop
jmp
ss
and
inc
icebp
sub
xchg
loopne
pop
fnstsw
aam
xchg
(bad)
jae
fldenv
(bad)
cli
pop
jg
ja
cdq
je
inc
je
mov
pop
xchg
push
adc
adc
add
cwde
or
add
loop
jp
arpl
inc
xchg
adc
pop
stc
xchg
inc
sbb
or
cmp
inc
push
jno
pop
and
mov
prefetcht1
fcom
adc
add
popf
ja
cdq
icebp
retf
and
outs
pop
fcom
arpl
leave
mov
loope
loop
xchg
loop
ret
dec
cmc
mov
inc
sahf
lock
jno
dec
cwde
fld
test
fcomp
or
shl
add
lods
inc
and
xor
dec
leave
retf
loopne
movs
xchg
mov
jmp
cwde
pop
sub
test
mov
mov
mov
push
je
aad
icebp
pop
sub
(bad)
out
std
cwde
sbb
add
scas
mov
jno
test
enter
data16
out
xchg
xchg
or
mov
cmp
jbe
adc
js
imul
enter
(bad)
fldln2
adc
cwde
leave
out
test
cwde
jecxz
jp
pop
adc
into
stos
js
push
cwde
inc
push
in
push
test
cmps
into
scas
fsub
inc
pop
pop
and
fbstp
pushf
retf
loope
(bad)
xchg
out
and
jne
sub
loopne
push
cwde
cmp
add
or
outs
fidiv
adc
cmps
(bad)
(bad)
sub
shr
mov
xchg
cmps
sub
push
sbb
mov
loope
add
xchg
int
in
outs
pop
cmps
mov
add
aam
fcmovnu
mov
repz
dec
push
jns
iret
in
inc
enter
mov
mov
out
push
mov
ds
xchg
adc
push
push
js
test
test
in
ja
or
xchg
int
push
cmp
in
cmp
loopne
mov
and
pop
jge
dec
jno
cwde
mov
shl
sbb
shr
cwde
xchg
inc
neg
fistp
xchg
aam
xor
ret
mov
das
cmp
cwde
popa
bound
fwait
jo
xchg
cld
(bad)
dec
dec
sub
jge
cwde
ret
call
sub
mov
cmc
fnstenv
fdivr
sub
xor
es
jns
mov
xlat
and
jmp
cmp
out
fldl2e
add
ins
in
lds
dec
imul
inc
xor
shl
ds
ja
jmp
dec
and
ret
inc
fidivr
xchg
mov
test
xchg
test
cmp
pop
test
push
(bad)
fs
into
xchg
call
sbb
sub
mov
icebp
(bad)
sbb
and
mov
xchg
pop
addr16
and
out
test
pop
test
mov
push
mov
aad
movs
inc
jmp
jecxz
in
mov
(bad)
cli
jmp
inc
jecxz
cmps
pop
jae
dec
push
mov
mov
mov
outs
in
fs
jnp
daa
xchg
pop
int
jge
mov
sbb
cmps
xor
bnd
xchg
mov
pop
adc
inc
mov
dec
lock
scas
inc
das
iret
xchg
xor
mov
out
in
sbb
sub
cmps
or
rcl
sub
and
xchg
jae
call
xchg
clc
jo
adc
iret
bound
xchg
fld
(bad)
retf
aaa
fmul
push
lahf
and
push
push
jmp
cwde
(bad)
jle
mov
(bad)
push
call
bound
xor
jle
push
xchg
cmp
inc
jge
je
(bad)
push
adc
fmul
mov
call
stc
rol
popf
pop
je
push
out
push
push
cwde
pop
push
xchg
jno
(bad)
int
cwde
(bad)
imul
jo
pop
mov
add
pop
dec
cwde
fcmovbe
sub
xchg
shr
cmp
call
into
push
sbb
sub
mov
sub
jecxz
cmp
push
leave
aas
pop
xchg
js
test
(bad)
sub
inc
cwde
xchg
add
cmp
daa
dec
dec
push
jb
jl
cwde
push
dec
pop
(bad)
jp
nop
and
push
stc
test
adc
(bad)
fisttp
xchg
jbe
add
sbb
adc
test
xchg
pop
mov
jmp
mov
idiv
and
inc
pop
push
or
and
fcomp
mov
mov
ret
sub
lahf
movs
mov
add
cmc
stc
sbb
rcl
fcomp
or
mov
cmp
and
repz
sbb
push
nop
jge
nop
fimul
push
dec
mov
call
cwde
(bad)
cmp
push
xchg
outs
jbe
jp
sbb
mov
xchg
js
mov
(bad)
sbb
xor
or
xchg
lods
push
les
xchg
adc
xchg
mov
stc
dec
imul
scas
mov
rol
ret
jne
inc
mov
inc
out
cwde
sub
push
test
lahf
bound
int3
js
je
cwde
repnz
sub
push
mov
xchg
mov
pop
mov
out
mov
mov
fist
cwde
loopne
test
retf
sahf
push
mov
test
or
mov
adc
fist
std
cld
inc
pusha
and
or
inc
aam
lds
push
movs
mov
jnp
aam
sub
adc
cwde
aam
push
cmp
aaa
mov
mov
xchg
inc
push
rcl
shl
retf
mov
sub
scas
push
mov
clc
lds
xchg
das
into
lea
mov
aam
mov
retf
adc
dec
ja
xchg
nop
ret
shr
sub
pop
jle
scas
xor
daa
pop
ret
add
imul
mov
imul
retf
sbb
push
test
mov
mov
xchg
xchg
xor
test
cwde
por
(bad)
fucom
retf
and
xchg
scas
mov
popf
cmc
and
cbw
mov
or
ficomp
push
arpl
jns
mov
(bad)
out
retf
hlt
adc
mov
sbb
jmp
gs
call
dec
inc
pop
cwde
cmp
imul
shr
xchg
bound
sub
add
cwde
and
jmp
nop
xchg
es
iret
mov
and
enter
dec
fldcw
jb
lahf
adc
clc
ins
in
mov
xor
push
mov
inc
cmc
(bad)
out
or
out
ins
push
dec
cwde
pop
and
xlat
mov
jg
test
scas
mov
test
cs
ins
xchg
mov
rcl
push
std
cmp
jae
inc
inc
pushf
ficomp
cmp
fld
cwde
pop
pop
and
sub
test
movs
mov
fldenv
cmps
add
cwde
je
sub
cmp
pop
cmp
mov
jp
retf
dec
mov
sbb
dec
push
(bad)
outs
xchg
(bad)
fsub
xchg
cmp
adc
mov
addr16
dec
in
push
cmc
xor
clc
sbb
xchg
push
xor
sub
xor
cld
add
mov
sbb
shl
lock
outs
mov
push
xchg
pop
push
(bad)
fisub
adc
add
add
cmp
jmp
cwde
test
sbb
and
xchg
rol
out
xor
aam
in
in
push
lods
cwde
cdq
jo
bound
test
call
cli
sahf
xchg
inc
jne
jnp
cmp
xchg
into
loopne
cmps
out
retf
js
and
jecxz
inc
fs
fst
mov
stos
mov
sub
sbb
int
call
stc
pop
cwde
out
sbb
imul
add
push
inc
cwde
mov
enter
sub
add
test
cwde
jl
bound
add
aas
or
sub
lahf
push
pusha
cmp
popa
jne
pushf
or
stos
dec
data16
fnstsw
stos
mov
cwde
(bad)
ror
xchg
cli
cwde
aaa
into
sbb
and
imul
mov
xchg
call
xchg
mov
inc
xor
cwde
imul
jecxz
cmps
mov
std
pop
out
xchg
xor
sbb
adc
push
jp
xor
popf
or
cwde
dec
fild
in
cwde
inc
jl
fld
aas
cwde
xchg
out
mov
fsubr
cdq
cwde
mov
loop
and
rcr
and
mov
dec
fsubr
or
test
pop
sub
cwde
cmp
nop
pop
and
leave
imul
pop
aaa
lods
cwde
sbb
push
mov
loope
cmp
mov
loop
(bad)
call
sbb
jle
repz
cmc
test
or
bound
xchg
imul
(bad)
(bad)
cmp
or
push
cwde
push
std
and
bound
scas
(bad)
cmp
shl
xlat
nop
mov
sub
xchg
cmp
adc
and
cmps
mov
pop
push
lods
daa
sub
inc
mov
popa
fsub
xor
xchg
xor
adc
daa
cs
push
fmul
lods
ds
rcr
pop
xchg
in
xor
scas
cmp
pop
xor
cmp
push
xchg
jp
or
retf
fsub
cmc
stos
adc
fbstp
jmp
out
leave
mov
mov
jo
sub
push
ss
mov
dec
repz
cwde
fiadd
cmp
cmp
jmp
rcl
loop
mov
xchg
and
mov
(bad)
scas
xchg
ficom
call
push
xchg
ds
vandnpd
ret
(bad)
push
mov
(bad)
sub
push
push
jecxz
loopne
cmps
sub
inc
push
xchg
xor
std
les
xchg
loope
retf
xchg
mov
pop
adc
dec
dec
jge
adc
jp
adc
pushf
bound
cwde
les
jno
jno
pop
and
push
das
je
je
(bad)
ds
cwde
outs
out
jge
pusha
scas
cwde
shl
popf
ret
xor
add
xchg
ins
mov
retf
and
sar
dec
mov
lock
adc
push
push
out
cdq
nop
ja
push
mov
cwde
cmps
mov
(bad)
not
mov
sub
mov
repnz
pop
hlt
cmps
inc
imul
xchg
adc
hlt
daa
mov
cmp
ds
inc
inc
(bad)
rol
sbb
mov
mov
xchg
and
cmp
mov
mov
xor
bound
movs
jo
aad
mov
sbb
push
js
shl
in
dec
mov
rcr
sub
jno
xchg
xchg
cwde
ins
jbe
jne
in
aam
fcomp
jno
jl
jg
(bad)
xchg
icebp
sub
cmps
mov
cwde
std
or
in
add
cwde
ret
lods
jecxz
lahf
inc
pop
(bad)
out
sbb
and
mov
mov
shl
cmovg
shr
cmp
lds
xchg
gs
loop
inc
test
and
adc
mov
outs
cmp
sub
xchg
fidiv
dec
fs
or
test
or
dec
(bad)
out
js
or
add
ins
clc
dec
lds
cmp
dec
and
dec
enter
cmp
fidivr
sahf
jbe
mov
clc
cmps
mov
xlat
sub
and
xchg
(bad)
push
(bad)
repz
pop
sub
cmp
hlt
stc
adc
jle
sub
jge
(bad)
xor
call
or
(bad)
xchg
fnstcw
inc
xchg
xor
jmp
dec
pop
outs
cwde
pop
sbb
cmp
loopne
push
cwde
push
sub
(bad)
into
push
and
(bad)
dec
xor
xlat
aaa
dec
push
mov
loopne
imul
js
push
sub
adc
call
repz
dec
or
aaa
xchg
sub
mov
pop
jmp
cwde
push
sbb
mov
clc
jle
adc
fs
cwde
gs
rol
cwde
mov
in
sub
dec
cwde
mov
ror
sub
mov
mov
loop
ins
fiadd
push
pop
out
xchg
inc
and
test
adc
loopne
jae
int3
cmp
cwde
push
xchg
cwde
pop
popa
outs
push
pop
jbe
jae
in
stos
dec
push
dec
aad
and
xor
out
popa
add
cmp
test
cli
jmp
out
loop
add
enter
and
or
xchg
adc
movs
mov
jmp
cwde
out
clc
sti
(bad)
xlat
xchg
shl
sbb
or
fs
lahf
movs
mov
in
fcomp
add
sbb
adc
shl
mov
mov
mov
pop
es
ja
arpl
cmp
mov
mov
push
loopne
add
jl
adc
cmps
adc
lea
sub
pop
arpl
adc
sbb
sub
(bad)
(bad)
jecxz
cmp
retf
out
cwde
jno
xchg
xabort
(bad)
mov
sub
mov
push
add
jno
dec
jmp
js
imul
cwde
in
je
sub
mov
pop
jno
bound
enterw
jecxz
arpl
clc
nop
xor
fist
je
outs
xchg
cmp
push
in
cmp
mov
(bad)
fild
sbb
dec
call
fld
(bad)
mov
lahf
cwde
jb
lds
out
in
mov
sbb
push
in
add
add
dec
add
frstor
jnp
push
imul
jb
mov
rcr
ror
jge
mov
pop
sar
(bad)
mov
mov
mov
movs
dec
or
fsub
cmc
cwde
cmp
adc
daa
stos
mov
ret
jle
dec
cmc
add
mov
cs
call
cs
inc
jl
or
and
xchg
pop
push
mov
(bad)
stos
sbb
shl
mov
jl
gs
in
xchg
sbb
xchg
mov
nop
clc
jge
push
xchg
jl
(bad)
xlat
retf
pusha
inc
lds
or
or
(bad)
jmp
outs
dec
sbb
ja
or
jl
outs
cwde
inc
out
ss
xchg
imul
push
stos
jb
xchg
shl
retf
pop
dec
mov
mov
pop
leave
sbb
pop
mov
sub
push
inc
mov
sbb
dec
stc
xchg
in
icebp
inc
ds
inc
cwde
mov
jle
cmc
inc
scas
pop
mov
je
xchg
loop
lods
stos
sbb
call
pop
inc
test
mov
lea
mov
xchg
add
xchg
aas
dec
pop
cdq
loope
xchg
pushf
add
mov
out
xchg
jmp
retf
(bad)
jmp
movs
mov
repnz
(bad)
cwde
cdq
jp
rcl
sti
mov
xlat
push
sub
push
fdiv
push
cwde
xchg
xchg
add
cwde
mov
fst
clc
into
out
jmp
popf
fidivr
test
sub
cs
jnp
jl
ret
cwde
js
jp
int3
xchg
aam
cwde
cmp
sub
jmp
cli
pop
inc
cwde
jnp
xchg
adc
test
mov
arpl
pop
nop
daa
inc
loop
into
dec
fistp
rcl
push
mov
add
repz
xlat
js
daa
int
inc
sub
pop
div
gs
in
clc
(bad)
xchg
add
test
xor
jae
sub
xchg
mov
clc
xchg
iret
mov
mov
adc
xor
popa
add
(bad)
stos
pushf
loopne
call
sar
mov
cmps
lock
fmul
outs
xor
cwde
idiv
(bad)
pop
cwde
inc
adc
loop
lods
fstp
mov
pop
mov
retf
sub
mov
or
and
dec
nop
cmp
aam
xchg
mov
(bad)
fmul
push
and
in
daa
cmp
add
pop
sub
shl
jae
xchg
mov
ds
xchg
xchg
arpl
sbb
cmp
adc
mov
jo
shl
popf
bound
mov
inc
mov
sbb
mov
lahf
cwde
leave
jnp
sub
xor
loope
sbb
push
dec
mov
rcl
or
xchg
outs
hlt
ficomp
pop
aas
pop
or
fcmovbe
sub
call
jb
add
jl
mov
cmp
outs
test
mov
outs
xchg
push
daa
xor
pop
ds
jmp
in
scas
adc
je
jbe
cwde
mov
jg
jl
pop
sub
xchg
mov
dec
xchg
jge
jp
jg
imul
loopne
movs
lahf
jns
inc
xchg
loop
sti
test
add
mov
push
sub
and
(bad)
xchg
sti
fistp
out
or
adc
xor
pop
rcl
pusha
cmp
test
(bad)
push
das
inc
ins
and
icebp
iret
pop
rcl
jae
cwde
ins
xchg
jg
xor
fwait
mov
cmp
mov
scas
fiadd
pop
das
lahf
imul
inc
test
inc
sub
aam
xchg
add
mov
bound
dec
cwde
rcr
adc
(bad)
cmp
popf
inc
push
fstp
fisub
pop
sahf
scas
mov
nop
cmp
std
outs
ja
pop
xor
xchg
dec
sbb
xchg
imul
inc
mov
out
out
mov
cmp
imul
and
push
cs
push
pop
imul
jg
jecxz
neg
xor
mov
les
cwde
pushf
push
in
xchg
ret
ror
lock
rcl
mov
je
sahf
clc
xchg
std
cmps
push
lods
cdq
mov
mov
push
out
add
pop
push
daa
fs
mov
add
mov
push
xchg
mov
pop
xchg
xchg
mov
or
cmp
pop
test
push
daa
jg
mov
push
inc
rcl
scas
push
std
clc
mov
cmc
fdivr
xor
ret
stos
sub
lods
test
scas
sbb
repnz
aam
rcl
ds
xchg
loopne
(bad)
ins
stc
cmp
mov
mov
pop
loope
sbb
pop
xor
mov
add
xchg
push
xor
or
scas
push
test
lea
loop
sbb
adc
adc
enter
(bad)
clc
mov
int3
or
adc
mov
jecxz
mov
adc
cmps
jnp
test
cld
cs
mov
pop
or
adc
push
pop
lds
stc
jne
push
pop
inc
int
scas
adc
mov
mov
cmps
sub
inc
lods
fisub
xchg
xchg
mov
data16
mov
xchg
or
xchg
sahf
iret
pushf
pop
ror
imul
(bad)
and
mov
fstp
loop
pop
int
push
pop
test
mov
or
inc
loope
cwde
loop
xor
lods
daa
push
fmul
lea
cwde
push
enter
cdq
test
hlt
int3
mov
out
sbb
rcl
pop
pusha
mov
lds
jbe
jo
xor
cmp
xchg
pop
cwde
inc
pop
mov
push
cmps
in
int3
sahf
nop
je
es
cwde
inc
retf
test
lds
add
inc
adc
jnp
cwde
sub
add
fistp
stos
cwde
retf
pusha
test
inc
push
es
xor
fdiv
xchg
inc
pusha
inc
scas
push
je
push
pop
jp
mov
ss
sub
sbb
xchg
sbb
scas
mov
mov
add
sub
ds
movs
lods
add
retf
fnstsw
lahf
arpl
cmp
sub
xchg
xor
push
daa
sbb
sbb
or
and
ficomp
pop
es
push
pop
jecxz
cdq
xchg
sbb
sub
iret
add
sbb
out
rol
mov
inc
lock
in
bound
sub
rol
test
mov
das
sbb
mov
jge
push
or
pushf
movs
stos
jl
cwde
fsub
add
push
jecxz
jbe
jae
and
cwde
js
xchg
xchg
lock
inc
pop
cwde
pop
cmp
dec
xor
mov
lea
or
jo
lahf
scas
mov
ja
lods
fst
adc
mov
ror
xor
sbb
dec
xchg
add
cs
and
inc
push
jb
sub
push
lock
xchg
outs
cli
push
ins
imul
int
loopne
xchg
cwde
sub
loopne
add
xchg
jl
push
dec
sub
pop
and
mov
dec
pusha
adc
adc
es
std
(bad)
xor
sbb
fsubr
xchg
movs
adc
cmp
push
test
or
inc
add
pop
or
lahf
pop
or
or
xchg
cdq
loopne
loopne
xchg
push
add
jle
jno
call
dec
sub
dec
push
cwde
xchg
fnstcw
jae
sbb
enter
(bad)
push
cwde
out
add
popa
cdq
cmp
inc
dec
pop
lods
jp
xchg
out
inc
test
jmp
push
and
daa
pop
cwde
push
stos
pop
stc
test
jl
mov
ror
push
sub
outs
and
xchg
adc
les
add
dec
jae
wrmsr
mov
inc
pop
cs
jnp
inc
mov
cmp
dec
dec
push
pop
inc
adc
pop
ret
movs
or
push
outs
cmp
movs
mov
(bad)
fimul
cmp
call
dec
cwde
call
jb
loopne
inc
push
cmp
dec
sub
mov
outs
mov
pop
pop
cmp
sub
retf
enter
or
popf
adc
inc
mov
mov
popf
fucom
cwde
adc
pusha
out
ret
bound
(bad)
int3
push
cwde
inc
push
push
gs
(bad)
mov
retf
rol
loopne
cmp
ins
(bad)
call
fstp
xchg
int
ret
inc
sub
pushf
sbb
pusha
cs
in
clc
push
inc
ins
xchg
jns
adc
add
or
sbb
sub
push
add
mov
xor
or
lods
jmp
cwde
adc
lds
rcr
dec
jle
test
leave
gs
fcmovbe
outs
ja
cmp
or
ret
fsubr
in
jmp
call
push
adc
cwde
jns
hlt
es
into
xor
das
fwait
gs
mov
int
xchg
or
lods
pop
jmp
les
ds
push
mov
mov
retf
jno
fwait
out
cwde
aad
and
jge
mov
dec
cmps
dec
or
imul
ins
xor
lods
mov
mov
cmp
pop
addr16
cwde
clc
and
sub
bnd
mov
pop
call
or
stos
call
sub
and
(bad)
mov
int
lods
mov
(bad)
stos
jnp
push
cmp
call
(bad)
pop
dec
ins
jne
mov
ins
push
inc
pop
xor
jb
jp
dec
pusha
bound
pop
cli
jo
sahf
rep
mov
lds
jnp
cmp
pop
sub
rcr
push
retf
(bad)
cmp
sub
push
dec
push
ins
xchg
jb
imul
outs
dec
rcr
add
jae
shl
mov
inc
es
shl
dec
pop
ja
sbb
add
mov
mov
mov
mov
adc
call
ss
push
jb
inc
retf
lahf
or
sub
sbb
push
test
cmc
cwde
add
and
add
adc
xor
push
pop
das
add
jnp
dec
mov
cwde
arpl
inc
mov
xchg
jmp
clc
add
xchg
cwde
outs
cmc
jl
push
in
jns
and
lock
adc
mov
sbb
cmc
lods
cwde
mov
mov
mov
or
cdq
mov
xchg
retf
sbb
ss
add
fdivr
(bad)
call
cmps
mov
(bad)
arpl
loop
icebp
sub
inc
sub
cwde
mov
mov
data16
cwde
loop
adc
aas
mov
fisubr
pop
jmp
cwde
sar
jne
clc
xchg
or
ins
add
jecxz
sti
ins
and
lock
mov
inc
xlat
lods
test
mov
mov
xchg
loope
jns
hlt
mov
ins
jge
adc
push
in
xchg
and
mov
pop
fild
cmp
jp
mov
lahf
enter
xor
push
mov
(bad)
ror
ins
mov
sti
ret
js
fstp
jecxz
jl
cmp
inc
fsubr
adc
enter
in
fsub
adc
call
lock
and
jns
in
adc
popf
arpl
jno
aad
loop
xchg
pop
scas
mov
push
dec
test
xchg
mov
js
hlt
mov
mov
jl
xlat
inc
leave
mov
adc
lods
xchg
xor
cmp
dec
pop
outs
sbb
stc
pop
loop
sbb
mov
mov
clc
mov
outs
std
sub
cwde
pop
lock
arpl
add
xor
sub
scas
popf
or
cmp
fs
xlat
jbe
pop
scas
in
xchg
jg
sbb
push
sbb
cwde
lods
shr
or
sbb
rcl
push
xchg
cli
(bad)
and
cmp
push
jge
movs
jl
lahf
xor
jmp
jne
inc
xor
out
cdq
cwde
dec
adc
out
xor
push
in
sbb
adc
sar
jb
test
pop
out
xchg
outs
call
push
fbstp
mov
(bad)
or
popa
enter
xlat
lahf
mov
sub
push
enter
loop
in
pop
or
cmp
rcr
mov
push
movs
mov
shl
test
cwde
sbb
cmp
cli
cdq
popa
out
hlt
or
fstp
imul
test
jne
jb
and
jl
fcomi
ret
repnz
cwde
aam
xchg
sbb
cwde
inc
mov
(bad)
and
cmp
dec
sub
jmp
(bad)
mov
cwde
lds
xor
xchg
out
jge
xchg
aad
cwde
ret
loopne
repz
push
out
mov
sub
je
ins
push
fimul
cmp
outs
adc
add
dec
cwde
clc
rcl
cwde
or
dec
rcl
mov
cwde
loopne
je
sub
test
cmp
mov
ret
xor
mov
loopne
fdivr
retf
mov
or
xchg
mov
xor
cmp
and
sub
mov
sub
inc
popa
add
in
cwde
mov
mov
pop
ins
and
stos
mov
jg
mov
sub
xor
call
cmp
xchg
mov
sbb
dec
xchg
push
xchg
loop
ds
and
add
cwde
aad
shl
fwait
mov
or
movs
clc
jno
in
jnp
xchg
cdq
add
mov
lods
adc
jge
pop
dec
repz
xchg
clc
push
mov
into
pop
mov
sub
inc
jge
call
jae
add
cli
jmp
cmp
(bad)
mov
js
in
dec
adc
sbb
adc
add
cdq
jmp
sbb
pop
jg
xchg
sub
js
fdivp
add
loope
push
dec
sub
sub
xchg
retf
out
xor
(bad)
pusha
test
xor
out
push
sbb
xchg
push
int3
mov
leave
jo
cwde
cli
fcmovbe
mov
sar
clc
jg
movs
shl
adc
ja
dec
inc
rcr
xchg
outs
mov
mov
cmp
xchg
lea
mov
repz
das
or
jb
cwde
iret
stos
int
pop
int3
addr16
xchg
mov
shl
or
repz
aas
add
add
fdivr
scas
jle
cmp
test
add
or
add
adc
pop
or
call
lock
sub
out
lods
mov
pop
push
loop
movs
pop
dec
jo
(bad)
stc
mov
addr16
sub
xchg
mov
cmp
cmp
out
sbb
sub
jo
mov
mov
div
dec
cld
daa
adc
iret
imul
cli
dec
xchg
push
sbb
push
pop
ret
jbe
imul
in
lahf
jmp
mov
xchg
int3
xor
xchg
pop
mov
jno
push
push
mov
lds
cmp
adc
daa
xor
mov
cmps
cs
loop
pusha
mov
mov
mov
cwde
mov
ja
jbe
lods
cmp
dec
or
jno
pop
cli
enter
jp
loope
xchg
sbb
das
hlt
shl
lods
ins
fstp
ds
cwde
mov
push
mov
test
cwde
mov
xchg
outs
jno
repz
cmp
fcmovnbe
lods
or
sbb
cwde
cmps
jmp
lahf
ror
xchg
mov
add
dec
into
cs
imul
mov
imul
ja
hlt
mov
ror
js
stc
jp
out
sbb
aad
add
stos
and
dec
retf
je
sub
mov
xchg
push
sbb
iret
sub
mov
adc
xchg
mov
hlt
dec
xchg
out
retf
test
push
xchg
es
sbb
adc
jns
mov
xor
or
cli
jo
jg
icebp
cmp
mov
imul
xchg
mov
test
xchg
add
dec
xchg
xchg
das
sbb
dec
enter
in
stos
fdiv
mov
rcl
fdivr
pop
cmp
mov
pop
sbb
paddq
push
push
dec
retf
sar
or
jecxz
aad
pusha
mov
sub
xchg
gs
(bad)
out
into
(bad)
push
cs
pop
mov
(bad)
lods
in
push
xor
dec
mov
mov
rcr
fsubp
xchg
inc
jecxz
sbb
aas
dec
cwde
pop
call
mov
popa
mov
es
sbb
call
jno
(bad)
dec
sbb
push
es
cwde
clc
ds
adc
std
sub
fwait
arpl
xchg
inc
pop
cs
bound
or
cmp
pop
dec
mov
cmps
mov
xchg
cwde
jge
xchg
loop
das
lea
fsub
andps
loopne
bound
dec
xor
lahf
inc
inc
sub
xchg
jbe
pop
fst
int
adc
add
add
bound
lea
(bad)
fadd
push
cdq
sbb
sub
mov
jle
sub
xchg
pushf
xor
scas
daa
or
ds
push
sub
sub
popf
xor
dec
out
int3
dec
dec
rol
fimul
fstp
xchg
jmp
mov
xchg
(bad)
fiadd
jbe
cwde
adc
mov
cld
sub
shl
fcom
ret
cwde
xor
aaa
shr
mov
aam
mov
outs
cwde
sub
mov
mov
mov
push
push
out
sub
(bad)
fwait
xchg
fsubr
or
adc
or
cdq
xor
xlat
in
es
inc
leave
ret
sub
cwde
cmp
pop
sub
ds
call
aad
jg
mov
(bad)
xchg
mov
fstp
dec
and
jecxz
mov
out
xlat
call
into
shl
inc
adc
popf
cwde
imul
inc
mov
add
data16
loope
popa
sbb
cmp
int
push
cwde
jmp
mov
das
cwde
push
pop
and
pop
shl
mov
fcmovnbe
shl
aaa
cmps
mov
mov
test
js
add
sub
loopne
es
fcom
ins
pop
adc
mov
xchg
cdq
mov
and
pop
stos
push
inc
sub
xor
mov
ror
lods
iret
(bad)
inc
clc
push
sbb
add
mov
pop
jb
inc
jg
push
js
push
jle
pop
out
pop
lock
mov
cwde
retf
jg
pop
lahf
mov
pop
xor
pop
and
jne
inc
push
pop
jnp
stos
retf
xlat
push
adc
adc
sub
push
pop
and
enter
mov
out
xchg
jp
movs
jb
sbb
dec
out
scas
cwde
lds
repz
les
mov
das
xchg
or
dec
mov
push
push
and
mov
or
sbb
cwde
retf
inc
jae
mov
lock
push
loopne
(bad)
xor
or
xor
push
sbb
ins
iret
xchg
mov
aam
and
sbb
movs
inc
cwde
lahf
lea
mov
sbb
ficom
pop
mov
je
mov
clc
iret
fsub
ret
sbb
test
cmp
ficom
or
inc
mov
call
fucomi
repnz
mov
push
(bad)
xchg
inc
pop
and
sub
popf
ins
mov
repnz
xchg
mov
mov
jo
loop
mov
outs
jp
das
jne
push
jl
cwde
inc
leave
out
(bad)
xchg
push
lods
addr16
imul
ret
and
mov
xlat
cmps
out
iret
mov
xchg
addr16
sub
ror
call
aad
dec
cwde
fwait
(bad)
fmul
add
out
inc
push
enter
pop
push
in
xor
iret
loope
clc
leave
adc
cmp
repz
mov
scas
js
or
in
sbb
scas
push
punpckldq
inc
sbb
cwde
aas
push
and
mov
lahf
and
ror
jne
pusha
cwde
xor
ror
unpckhps
fcom
or
pop
outs
retf
or
pop
push
sub
call
bound
adc
or
repnz
pusha
fild
pusha
call
push
popf
cmps
xchg
mov
inc
test
sar
mov
repz
addr16
popf
outs
sbb
in
leave
mul
ret
rcr
movs
rcl
les
jle
xlat
sbb
dec
pusha
xchg
jbe
popf
xchg
call
cmp
dec
hlt
ins
daa
nop
mov
jb
xor
pop
sbb
xchg
pop
cmp
push
pop
pushf
and
rcr
lods
je
push
xchg
mov
call
inc
jmp
cwde
jp
xchg
pop
aas
inc
fst
cwde
sub
push
mov
cwde
xchg
add
add
stos
ret
lods
cwde
sbb
lods
mov
call
push
sbb
sbb
or
cli
lods
loopne
iret
xchg
imul
push
lds
cwde
imul
jle
mov
int
scas
sbb
adc
sub
cs
xchg
scas
cwde
ss
test
jae
ret
cmp
stos
cwde
je
inc
sub
enter
loope
jo
sahf
les
(bad)
adc
push
sub
xor
or
enter
test
inc
test
mov
repnz
jb
sar
jbe
std
jae
cmp
cwde
adc
xchg
lods
mov
dec
scas
mov
mov
(bad)
mov
jnp
mov
push
lock
inc
mov
sar
cwde
stc
mov
shl
call
xor
and
xchg
mov
dec
aam
mov
and
cwde
or
xchg
xchg
call
jne
cmp
ins
retf
cmps
cdq
push
jnp
stos
sti
dec
mov
shl
mov
fidiv
pusha
ret
and
pop
lock
add
pusha
mov
jp
imul
aas
(bad)
fdivr
push
js
ja
jmp
xchg
mov
xchg
vcmpps
jge
xor
ins
ds
push
out
lds
out
sub
shl
daa
fnstenv
cmp
xchg
jge
mov
sub
in
add
inc
sbb
stc
adc
ss
mov
jge
cwde
dec
jecxz
dec
and
out
xchg
in
popf
repnz
mov
mov
cmp
cmc
pop
ins
jmp
xor
mov
dec
push
cmp
mov
rcl
lods
cdq
xchg
xor
cmp
dec
jle
test
xchg
fisttp
lods
and
aaa
push
imul
or
js
cwde
cmp
push
add
mov
test
fimul
add
xchg
sub
into
in
call
iret
out
or
adc
or
xchg
push
pushf
fs
(bad)
add
or
dec
push
cwde
popf
jo
hlt
adc
pop
call
cwde
push
xchg
mov
aas
push
pusha
and
mov
fadd
into
fcomi
dec
cwde
cmp
out
add
and
and
sbb
jne
xchg
mov
(bad)
cmps
sub
outs
test
pushf
outs
fidiv
sub
push
cwde
loope
or
cwde
dec
pop
jae
and
or
or
adc
cwde
in
pop
dec
(bad)
cld
(bad)
fld
mov
mov
mov
int3
test
sbb
fcmovne
cwde
dec
int
or
sbb
(bad)
push
jno
inc
sub
mov
test
neg
cmp
cmps
mov
clc
cwde
loope
ds
push
repz
xchg
sbb
adc
xor
cmc
lds
dec
clc
sbb
push
retf
or
xchg
or
leave
data16
sbb
jp
pop
in
outs
add
xor
(bad)
jmp
fistp
adc
outs
and
pop
mov
outs
cmp
test
int
mov
jecxz
loop
sbb
and
cwde
inc
pop
adc
cwde
dec
leave
rol
sub
adc
xchg
gs
cwde
stc
fld
mov
sub
cmp
aam
mov
loopne
mov
xor
jnp
fs
ficomp
or
push
or
cwde
jno
and
xchg
out
cwde
dec
jbe
movs
mov
call
sub
adc
mov
repnz
add
(bad)
add
data16
push
xchg
jp
mov
xchg
scas
outs
sbb
add
and
sbb
mov
mov
leave
loope
ret
(bad)
sbb
aas
add
add
sbb
cmps
mov
cmp
jge
cld
call
cwde
mov
or
mov
xor
push
pop
dec
jge
sbb
pop
call
test
pop
inc
push
mov
ds
and
sbb
lds
pop
xchg
aad
jno
or
mov
or
cdq
jp
push
and
and
xchg
dec
leave
xchg
fadd
ffreep
shr
mov
out
and
jg
imul
pop
retf
dec
test
je
inc
sbb
xchg
jl
or
fiadd
xchg
adc
sub
scas
pop
in
adc
pop
and
mov
pushf
(bad)
pop
jns
(bad)
aam
xchg
xchg
cs
stos
les
(bad)
aad
daa
loopne
push
mov
push
cmp
movs
cwde
rcr
xchg
jo
push
fistp
out
adc
cwde
xchg
ins
test
dec
jle
pop
xchg
test
inc
or
push
pop
ror
fwait
cdq
pushf
push
sbb
mov
leave
cwde
push
int3
jmp
inc
push
data16
fldcw
dec
push
cwde
sar
movs
movs
iret
fcmovu
jl
cwde
adc
inc
loope
cmp
mov
data16
(bad)
xchg
movs
test
xchg
mov
xchg
or
js
adc
jg
xlat
jbe
or
mov
enter
mov
jno
call
pop
sub
arpl
cwde
dec
push
ins
sbb
inc
cwde
sub
jo
dec
xchg
cwde
rol
in
in
mov
cwde
ror
stos
add
out
or
jbe
adc
pop
jnp
push
xor
jecxz
ret
sbb
push
(bad)
and
mov
mov
call
adc
sub
dec
js
imul
jl
dec
push
cwde
jo
mov
add
icebp
cmp
or
and
out
mov
gs
pop
fs
adc
or
cdq
push
inc
sub
inc
stos
pop
jge
mov
xchg
es
(bad)
fcom
cmp
cmp
sar
loop
in
sbb
fdivr
mov
cmp
test
retf
xor
or
out
and
mov
mov
cmc
xchg
adc
js
inc
sbb
es
add
(bad)
sub
into
xchg
xlat
push
imul
mov
xor
xchg
jecxz
mov
sbb
scas
mov
mov
xor
push
daa
xchg
push
mov
dec
cdq
push
sbb
stc
sbb
cmps
int
je
xchg
fs
mov
fcomp
fwait
xchg
sbb
lahf
jo
xchg
test
gs
js
pushf
push
adc
(bad)
jg
(bad)
int3
xlat
stc
lds
or
iret
aas
neg
mov
or
aas
mov
push
fmul
out
cwde
xchg
and
mov
xchg
lea
cmp
sub
mov
psubb
jecxz
imul
mov
int
push
jne
dec
push
imul
jnp
les
ficom
pop
and
xor
div
adc
ins
jae
pop
sub
out
jecxz
stos
cmp
inc
xchg
mov
lock
add
call
push
out
cmp
jecxz
xchg
jp
sub
mov
aaa
mov
pop
gs
icebp
push
hlt
or
adc
retf
sub
pop
and
rol
sbb
shl
or
pop
and
jl
ja
nop
stos
xchg
fsubrp
retf
push
lds
jns
inc
adc
ret
xchg
jb
psubq
mov
mov
xchg
xchg
mov
cmp
jo
adc
cwde
cmp
pusha
in
lods
ins
xor
lahf
popa
jp
push
sbb
and
dec
mov
(bad)
ja
cwde
mov
(bad)
dec
pop
sub
xchg
xor
in
add
xlat
dec
push
std
pop
test
sub
pop
popa
ja
mov
loope
push
loopne
or
test
in
xor
xor
addr16
ret
js
int3
jmp
pop
enter
pop
pop
ds
call
dec
add
xor
popa
test
mov
jmp
int3
call
jo
xchg
adc
popa
push
fwait
dec
xchg
add
xchg
cmp
cwde
pop
stc
jns
sahf
stos
jno
sbb
sub
and
cmp
push
pop
cs
retf
dec
lock
sbb
fst
adc
cwde
or
fisub
xchg
push
and
jnp
fadd
and
ret
test
ins
sub
out
add
push
xchg
sar
sub
(bad)
test
loop
in
cdq
cmc
cwde
sbb
sbb
leave
shl
adc
mov
and
cli
nop
jmp
cwde
push
sub
(bad)
test
fbld
cmp
fldcw
(bad)
jl
movs
das
hlt
fmul
shr
sbb
jmp
(bad)
add
fdivr
mov
adc
call
dec
jp
fidivr
cwde
cmp
js
mov
icebp
fstp
sar
pop
js
cwde
sub
push
test
pop
fistp
add
and
pop
mov
mov
or
(bad)
in
cdq
movs
cwde
inc
mov
retf
mov
daa
(bad)
call
outs
sub
test
enter
jge
mov
jmp
and
xchg
enter
(bad)
fdiv
fcom
popf
popa
add
(bad)
push
mov
xchg
mov
outs
xchg
sbb
sar
fwait
popf
mov
inc
xchg
mov
dec
and
and
mov
call
lods
cwde
frstor
pop
cmp
mov
shl
add
in
cli
stos
sbb
xor
jae
mov
iret
push
lods
xor
arpl
dec
daa
frstor
idiv
stos
lea
repnz
push
dec
push
in
out
pop
fdiv
pxor
mov
mov
ss
jne
call
jo
clc
jl
sar
movs
xchg
xor
sbb
add
cwde
push
pusha
imul
mov
icebp
sub
out
mov
cwde
mov
test
out
pushf
cwde
xchg
mov
cwde
call
pop
push
mov
jmp
cld
fistp
sar
es
aas
test
jge
inc
cwde
and
mov
xchg
sbb
inc
jmp
jo
cwde
daa
mov
dec
es
xor
xchg
sbb
ror
cdq
jge
mov
int
jle
jae
push
xor
fist
test
and
lock
or
dec
adc
xchg
rcr
(bad)
dec
ja
lock
mov
cli
push
cs
mov
stos
mov
cwde
movs
enter
pop
lea
and
adc
push
cwde
xchg
rcr
movs
pop
popf
(bad)
aam
cmps
dec
cs
mov
cmp
inc
shr
pusha
es
cmp
add
cmp
cmps
add
int3
jo
cwde
mov
lahf
sbb
xchg
jnp
xchg
push
dec
and
test
loop
aaa
fadd
(bad)
or
mov
mov
xchg
jne
inc
sub
stos
inc
fwait
add
mov
cwde
adc
sbb
rcr
sbb
enter
cwde
daa
add
push
out
por
xchg
add
mov
mov
cdq
loope
xchg
iret
inc
sub
mov
gs
xor
ja
mov
(bad)
mov
mov
inc
mov
int3
jl
cwde
dec
imul
ins
jae
mov
stos
in
leave
adc
push
xchg
inc
push
cmp
mov
cmp
call
rcl
sub
scas
test
repz
in
sti
test
cwde
sub
loope
out
call
mov
(bad)
fld
cmp
into
inc
sub
and
xchg
mov
push
pop
jle
mov
sbb
iret
rcr
in
push
xchg
cmp
and
sub
lods
hlt
xchg
(bad)
cmc
cmp
sbb
sbb
pop
sub
mov
xchg
outs
adc
inc
fnstcw
dec
sub
je
inc
push
ins
inc
xchg
xchg
jmp
pop
je
gs
movs
aad
cmps
mov
cmp
out
clc
cwde
mov
or
xchg
dec
inc
xchg
nop
inc
push
mov
adc
cwde
adc
xor
lods
cwde
hlt
push
cmp
or
lock
les
add
loop
mov
cwde
push
pop
call
cld
aam
sub
push
test
jecxz
sub
(bad)
xor
jle
cmp
mov
mov
pop
pop
cmp
pop
and
mov
(bad)
cmp
cwde
jo
push
jmp
mov
mov
lods
icebp
(bad)
sub
cwde
xlat
xchg
xchg
pop
adc
das
inc
sbb
push
stos
retf
dec
push
and
mov
mov
jl
pop
sbb
xchg
adc
test
mov
lahf
adc
stc
mov
clc
clc
imul
aas
addr16
(bad)
or
sub
xchg
sub
and
push
loop
sbb
arpl
sti
cwde
push
pop
mov
popf
inc
jmp
xchg
xor
or
pop
lods
mov
dec
pop
sbb
scas
mov
mov
fimul
sbb
ret
(bad)
les
or
and
dec
das
push
sub
dec
daa
aas
mov
xchg
(bad)
xchg
mov
fs
xor
fmul
xchg
leave
push
rcl
cmp
sbb
add
or
xchg
cs
in
add
xchg
rol
mov
inc
add
add
inc
popa
fistp
cwde
icebp
fcmovnu
mov
sbb
imul
js
mov
mov
fistp
test
cmps
mov
sub
repz
xchg
jns
popf
bound
mov
mov
cs
retf
stc
test
jne
fdiv
retf
cmp
push
in
jno
mov
cwde
xor
pop
into
loopne
std
popf
jg
mov
inc
cwde
js
adc
int3
lahf
cmps
push
test
sub
movs
dec
outs
stc
fadd
cmps
dec
sar
push
dec
pop
je
sahf
cmp
xor
mov
sub
in
sub
cwde
adc
out
jbe
out
cld
sub
pop
(bad)
push
jmp
stos
call
push
sbb
cmp
cwde
cmp
pushf
mov
pop
xchg
mov
sahf
jle
retf
aam
test
cli
int
push
sub
jae
or
ret
repnz
jecxz
(bad)
xor
and
sbb
sar
inc
mov
retf
xchg
int3
aaa
add
push
clc
mov
xchg
dec
movs
mov
aam
loope
mov
iret
jg
inc
xchg
ror
pop
inc
jno
jns
jb
lods
mov
cmp
in
pop
sub
sbb
arpl
jo
or
adc
inc
ds
jb
mov
popf
cmps
or
jge
pop
add
cmp
cwde
push
push
jne
inc
pop
pop
add
xor
jle
pop
in
jne
jmp
enter
fadd
sbb
add
ds
lods
adc
(bad)
push
mov
or
pop
push
bound
pop
les
dec
jp
jb
sbb
retf
and
retf
mov
shr
inc
xchg
js
mov
jmp
fstp
jo
sbb
xchg
scas
lock
es
in
jmp
jno
cwde
stc
push
and
or
aaa
jo
(bad)
push
adc
std
retf
cmp
into
xchg
mov
mov
jae
sbb
(bad)
xchg
pop
and
fdivr
mov
mov
sbb
jecxz
xchg
or
sqrtps
clc
mov
xchg
add
sbb
movs
pop
xchg
lea
sahf
retf
push
js
mov
push
cwde
das
call
loopne
in
cwde
in
jo
cmp
jns
mov
push
test
sahf
loop
jge
js
mov
idiv
jnp
fwait
mov
cwde
cld
daa
rol
cwde
rol
or
aas
pop
loop
fsubr
scas
push
mov
ds
pop
xchg
add
mov
dec
fcmovb
push
add
lahf
and
push
sar
cwde
(bad)
xchg
lods
mov
fist
jp
fbld
sbb
sub
xchg
dec
pop
inc
pop
push
dec
jg
adc
dec
jp
stos
les
add
in
loop
in
mov
xchg
xchg
out
sub
fadd
test
int3
loopne
xchg
cwde
xor
enter
(bad)
std
lock
inc
cmp
imul
pop
into
call
adc
lock
aad
xchg
xor
mov
out
jecxz
xchg
in
sub
aaa
gs
fcmovu
in
repz
cwde
jno
lods
mov
fcomp
and
adc
xchg
mov
retf
cwde
adc
lods
mov
push
mov
xchg
and
jp
adc
sti
adc
cwde
mov
pop
mov
xchg
bound
dec
add
xor
imul
leavew
jg
shl
aam
lock
and
push
jns
xchg
push
mov
jge
fs
mov
xor
loope
pop
sub
mov
mov
push
mov
sbb
or
cwde
mov
into
scas
lds
lock
cmp
inc
lahf
fs
call
cmps
mov
cwde
movs
addr16
(bad)
inc
cwde
dec
pop
and
stos
repz
push
cwde
and
inc
shr
ins
jle
xchg
scas
daa
or
pusha
fsub
dec
mov
add
ss
mov
scas
ds
cwde
fsub
sti
into
std
jno
push
mov
dec
sub
out
dec
clc
repnz
test
mov
into
cmp
push
out
mov
sub
mov
mov
mov
push
daa
xor
data16
(bad)
test
sub
push
loope
push
fidivr
fdiv
ret
adc
mov
or
mov
pop
sub
xor
mov
or
add
les
mov
push
xchg
push
cmp
push
sub
xchg
call
lods
jns
outs
addr16
lea
mov
popf
js
stc
jl
push
adc
mov
movs
mov
cwde
push
scas
pusha
xlat
dec
push
cwde
icebp
and
pop
popf
popa
(bad)
sbb
inc
pop
test
inc
push
push
mov
sbb
popf
sahf
xchg
cmp
mov
cwde
imul
xchg
imul
stos
int
ja
shr
adc
cwde
xor
xor
pushf
xchg
arpl
jge
fs
sete
add
cmp
and
sbb
outs
aaa
scas
jmp
dec
cdq
pop
sbb
adc
(bad)
jecxz
popf
out
push
std
adc
cli
movs
leave
scas
das
xchg
pop
add
iret
aam
cmp
lds
inc
leave
cwde
xor
or
xchg
clc
rcl
inc
mov
xchg
dec
push
gs
icebp
jecxz
(bad)
in
and
cmp
and
test
xchg
rol
out
shr
jecxz
jnp
sub
stos
(bad)
ds
sti
cwde
sti
jno
clc
ret
in
or
and
xchg
test
add
test
fs
xor
std
ins
cwde
cmp
sub
lods
js
mov
xchg
aaa
out
cli
je
and
mov
imul
out
xchg
loop
aam
dec
cmp
outs
gs
lahf
shl
dec
cwde
cli
(bad)
in
ins
mov
lahf
pop
arpl
or
(bad)
mov
into
push
jmp
std
iret
push
xchg
sbb
daa
mov
call
jae
clc
jg
lock
mov
pop
mov
sbb
inc
loope
jae
pop
aas
ja
cwde
push
mov
retf
inc
cwde
jle
adc
xor
addr16
push
je
jle
xchg
clc
pushf
in
add
adc
sub
cli
push
jmp
mov
cwde
xchg
ins
fcom
cmp
out
cwde
dec
xchg
mov
mov
and
fcomp
sub
mov
and
clc
not
icebp
xchg
clc
dec
jg
jns
xchg
xchg
mov
fwait
jp
mov
mov
test
cmc
stos
xor
int
aam
movlps
das
dec
sub
pusha
sahf
arpl
or
addr16
xchg
push
fdiv
adc
and
inc
dec
push
cwde
addr16
jo
imul
ins
hlt
xchg
ret
scas
push
jne
sbb
mov
movs
cmps
jmp
mov
pop
pop
push
mov
cld
cwde
test
mov
cwde
xchg
int3
and
cwde
stc
leave
sbb
mov
fwait
in
int3
jns
js
add
mov
fsubr
cwde
cmp
pop
cwde
adc
push
ss
cld
xchg
cwde
cmp
xchg
mov
mov
loop
(bad)
push
push
icebp
cmp
test
rcr
js
fidivr
jle
xchg
cmp
into
es
popf
js
mov
add
jmp
sbb
repz
jg
test
aas
push
mov
stos
mov
xchg
(bad)
or
inc
jl
mov
or
ret
and
mov
sub
jbe
dec
cmps
adc
jae
xlat
loopne
mov
pop
out
paddsw
pop
std
push
out
sbb
retf
cmp
sbb
ds
cwde
daa
or
dec
nop
(bad)
lods
cwde
jmp
mov
test
mov
and
pop
inc
call
test
jno
xchg
mov
push
or
outs
dec
mov
icebp
cdq
jmp
imul
std
push
push
jle
ret
xor
mov
out
idiv
push
xor
xor
(bad)
sbb
mov
(bad)
scas
gs
xchg
mov
inc
pop
js
mov
lods
push
sub
adc
retf
cmps
cs
test
and
cwde
mov
dec
fs
mov
mov
clc
fsubr
leave
sub
mov
fucom
test
retf
inc
pop
add
mov
dec
mov
mov
jo
dec
jns
nop
mov
push
xchg
mov
mov
adc
iret
xchg
add
xchg
out
mov
inc
out
pushf
add
sahf
dec
int3
cmp
cmp
imul
push
add
dec
shl
mov
pusha
jno
mov
std
inc
out
jb
xchg
test
das
test
ret
daa
ss
je
(bad)
mov
push
(bad)
adc
xchg
mov
pop
jmp
js
cwde
std
jge
stc
adc
pop
mov
fwait
retf
cwde
and
(bad)
ror
loop
sub
inc
loopne
or
xchg
js
adc
scas
xor
xchg
retf
outs
dec
movs
cli
lahf
mov
out
cmp
add
pop
(bad)
cwde
fbld
and
push
sub
mov
xchg
mov
adc
das
xor
cmp
xchg
ret
sub
jnp
cmc
fstp
mov
cmp
arpl
xor
mov
ins
push
push
sti
rcl
cmp
mov
mov
fld
mov
mov
stc
cmp
jecxz
ss
adc
sub
push
fcomp
mov
jecxz
push
cmc
inc
cwde
jb
(bad)
pushf
fld
fdivr
xchg
add
push
xchg
sbb
scas
gs
mov
push
xchg
cwde
pop
stc
(bad)
or
xor
ja
add
addr16
cdq
pop
add
mov
inc
sbb
repz
push
lds
hlt
pop
push
and
sbb
pop
dec
cmp
pop
lahf
xor
(bad)
rcr
add
cwde
push
lock
mov
or
(bad)
js
xor
scas
add
xchg
push
cmp
cmp
mov
push
xchg
sbb
mov
inc
push
xor
pop
dec
push
js
jl
push
lock
sbb
mov
mov
and
loope
inc
push
mov
mov
jbe
lea
in
jmp
mov
retf
arpl
test
cmp
mov
cmps
xor
clc
mov
movs
sub
xor
mov
ss
sub
jae
xor
xchg
dec
in
push
das
xor
js
out
movs
xchg
dec
stos
sub
das
add
add
stos
pop
adc
jne
cmc
jmp
inc
adc
ja
push
cwde
push
lock
adc
mov
xchg
push
push
inc
sub
mov
adc
repnz
retf
int3
add
cwde
cmp
out
sub
mov
cld
jo
js
sub
nop
dec
fs
push
xor
push
xchg
xor
lea
push
mov
push
cmp
xor
aad
daa
sbb
popf
and
xchg
sub
or
jo
xchg
psubsw
call
bound
std
cwde
(bad)
movs
mov
stc
fcmovu
arpl
inc
jno
push
cwde
jmp
js
mov
cmp
cwde
retf
add
mov
imul
xchg
les
inc
sti
fadd
mov
loop
sbb
out
cmp
sbb
lock
cwde
js
retf
into
call
out
add
aas
sti
in
rcr
lock
fistp
std
(bad)
push
rcr
push
icebp
push
mov
retf
sbb
shl
xor
cwde
sbb
or
jo
cwde
xor
mov
icebp
cwde
jb
lods
mov
add
or
dec
mov
mov
stos
lahf
and
jle
jp
add
mov
repnz
add
cmp
push
ror
pop
neg
retf
out
inc
push
int3
sbb
or
mov
jle
cwde
mov
cmp
sbb
sub
jle
or
or
call
into
loope
cwde
arpl
fmul
pop
mov
enter
jns
mov
ss
mov
mov
xor
icebp
stos
(bad)
jbe
xchg
jnp
iret
sub
cmp
push
nop
fisttp
dec
pop
pop
jo
pop
retf
add
xchg
or
or
popf
jg
xchg
cmp
in
ins
fs
fidiv
or
les
in
pop
js
push
mov
sbb
pushf
clc
jg
leave
and
in
enter
sub
push
xchg
stos
sbb
jns
ins
in
sti
add
sbb
cs
scas
xchg
mov
lds
push
ret
cwde
cmp
mov
aas
cdq
cld
imul
mov
push
fs
arpl
movs
lahf
fsub
lock
addr16
push
idiv
lods
(bad)
test
mov
add
call
ret
cwde
lods
adc
ins
pop
ds
jecxz
cwde
lods
das
cmp
ror
fimul
and
das
cmc
pop
sub
out
push
cmp
pop
lock
idiv
mov
(bad)
fistp
xchg
push
into
cmp
mov
ja
sub
cmp
call
cwde
pop
dec
sbb
or
push
test
not
enter
fidivr
push
cwde
sub
xor
cwde
shl
(bad)
les
dec
sub
je
(bad)
mov
cdq
aam
sbb
xchg
cwde
repz
dec
adc
jo
scas
xchg
jge
jp
js
cs
pop
lock
(bad)
and
cwde
fmul
xchg
gs
mov
cwde
add
cwde
push
mov
out
outs
and
ins
add
stos
enter
icebp
pop
test
cmp
xchg
aam
dec
fwait
test
nop
jge
loope
add
or
xor
out
iret
jecxz
or
inc
frstpm(287
and
repnz
mov
mov
shr
or
adc
jnp
mov
adc
push
scas
lahf
fst
cwde
pusha
pop
aas
jbe
jmp
xchg
jge
test
or
clc
aas
fcom
mov
repz
ficomp
xchg
jns
cmp
call
loope
popa
fiadd
xchg
jmp
repz
pushf
fld
push
jge
and
retf
cli
mov
jge
cdq
adc
add
push
test
pop
sbb
jmp
cli
in
sbb
inc
cmp
add
sbb
ret
(bad)
bound
hlt
jecxz
addr16
test
enter
push
xchg
jmp
mov
adc
leave
dec
daa
data16
jne
repnz
xchg
repz
add
mov
cwde
inc
push
push
pop
test
call
js
mov
or
xchg
and
pop
iret
les
dec
xor
xchg
out
int3
jmp
lock
call
fcom
push
xor
outs
cwde
fnstcw
mov
jp
in
addr16
fdivr
fstp
add
or
lahf
aaa
js
(bad)
shr
mov
mov
fcomp
mov
cwde
sub
xchg
popf
popf
mov
sub
jmp
xlat
retf
stos
ret
mov
xchg
in
sub
push
sub
jmp
pushf
xchg
rcl
and
(bad)
mov
sbb
mov
cmp
rol
push
and
mov
repnz
cmp
cwde
pop
pop
cmp
pop
xchg
add
movs
icebp
sbb
mov
in
push
test
jns
mov
add
add
cmp
cwde
adc
add
jmp
sub
lods
mov
sub
dec
lea
push
or
dec
adc
jo
dec
out
call
cmp
test
lock
or
(bad)
pop
lahf
pop
loope
neg
fwait
xor
push
cmc
cli
(bad)
sbb
jl
cwde
push
mov
std
xchg
and
dec
pop
jno
xlat
and
push
push
fs
adc
mov
xchg
or
test
xchg
jae
sbb
in
jl
or
ret
test
inc
mov
xchg
xchg
jl
cwd
push
test
adc
stc
lock
dec
das
loope
xchg
sub
aaa
xchg
or
out
cdq
xor
inc
ss
cmp
ja
jmp
out
xchg
std
movs
mov
push
loope
or
push
hlt
pop
iret
es
and
ins
mov
push
cwde
push
addr16
push
and
dec
push
xchg
(bad)
mov
sub
mov
mov
or
shl
mov
enter
mov
dec
cwde
sub
test
mov
imul
jge
dec
xchg
test
pusha
pop
and
and
cwde
add
scas
mov
cwde
out
sbb
mov
jae
xchg
adc
or
lea
cli
fs
xchg
mov
xchg
lds
jl
js
fcomp
in
sbb
call
fwait
(bad)
xchg
mov
xor
test
xchg
jg
movs
jmp
push
cs
mov
es
mov
sbb
arpl
fisubr
aam
xchg
fdivr
jmp
inc
ins
jbe
xor
push
mov
sub
rol
jae
sbb
shr
cwde
sbb
jmp
and
retf
jo
leave
in
mov
mov
ret
(bad)
mov
(bad)
mov
fild
dec
cmps
dec
add
and
xchg
repnz
pop
lahf
or
in
sbb
push
addr16
(bad)
sbb
add
pop
outs
sub
dec
sub
test
repz
std
fisub
out
sbb
icebp
jp
addr16
ja
mov
push
test
loope
ins
xor
push
add
loope
pushf
dec
dec
pop
mov
loope
es
push
sub
xor
pop
(bad)
or
(bad)
dec
push
call
push
outs
cmp
mov
xchg
fwait
cwde
leave
fdivrp
int
cmp
das
xchg
dec
sub
xchg
jbe
repnz
push
mov
pop
xchg
xchg
je
xchg
mov
sar
xchg
pop
inc
xchg
jne
cmps
leave
fcomp
mov
les
mov
out
cbw
cmp
adc
push
mov
lahf
repnz
lock
ja
sub
aam
ins
sar
sbb
sbb
jns
mov
sbb
loope
cwde
stc
enter
pop
xor
cwde
ds
es
and
cwde
push
imul
xchg
push
xchg
int
popf
pop
aad
push
repnz
(bad)
cdq
cmp
fs
pop
lods
js
push
dec
test
xor
scas
and
aaa
fwait
and
ss
call
push
lds
add
push
xor
popf
mov
and
xchg
scas
(bad)
sub
fwait
sbb
fmul
xor
push
test
or
sbb
cmp
mov
push
jge
cli
sub
out
mov
and
sbb
jmp
retf
jmp
sbb
mov
fld
out
lahf
pop
push
mov
push
push
and
sbb
popa
jbe
fldcw
pop
cwde
xchg
ins
sub
and
clc
fsubrp
sti
adc
or
not
mov
jbe
imul
test
jb
popf
movs
pop
dec
cwde
pusha
add
cwde
mov
push
pop
lods
cs
xchg
inc
cmp
xchg
and
cmp
mov
xchg
dec
adc
push
or
push
and
jbe
jmp
mov
jle
and
cs
movs
loopne
or
mov
jmp
sbb
and
adc
sbb
int
stc
rcl
stos
cmp
je
aam
arpl
cld
add
rcr
in
ret
fnsave
sbb
push
jmp
sub
and
movs
mov
pop
lods
add
mov
icebp
xchg
ins
or
add
dec
pop
cwde
and
retf
and
xchg
scas
mov
mov
xchg
dec
pop
mov
xor
jmp
sbb
fsubr
mov
cmc
mov
rcl
adc
cmp
sbb
adc
out
xchg
add
inc
ss
xor
push
sub
mov
jp
gs
mov
push
pop
jns
inc
xchg
popf
imul
inc
and
loop
and
pusha
dec
cmps
xchg
ja
ds
outs
rcr
or
jae
je
sub
add
ror
xor
add
gs
ins
pop
xchg
sub
jnp
pusha
clc
pushf
aas
ins
add
xchg
cwde
mov
lods
loope
fdiv
mov
jb
fiadd
cwde
nop
xchg
mov
cwde
sbb
mov
sbb
hlt
mov
lods
loope
mov
jmp
cwde
cmp
sub
arpl
cdq
cwde
ins
jmp
sub
in
pop
mov
movs
imul
fcom
cmp
adc
inc
lahf
mov
rcr
call
fsubr
mov
pop
jmp
ror
inc
retf
inc
inc
je
daa
sbb
push
push
mov
jnp
mov
call
add
mov
dec
sbb
aad
xchg
mov
std
ins
sbb
mov
xchg
pop
lock
paddusw
hlt
in
sub
pop
cmps
pop
imul
jmp
cmp
jle
push
add
lods
imul
ins
fdiv
mov
sbb
mov
sub
lods
add
push
mov
xchg
pop
xchg
adc
int
add
pop
adc
scas
inc
push
xchg
pop
daa
mov
cwde
sahf
ins
cmps
mov
inc
push
mov
inc
add
xor
ja
xchg
mov
pushf
clc
pop
cld
retw
ret
mov
pop
xchg
push
mov
mov
inc
stos
xchg
mov
cwde
iret
add
and
test
mov
xchg
or
repnz
and
push
ins
jne
and
dec
xchg
rcl
int
(bad)
mov
or
add
mov
or
push
in
shl
cmp
arpl
mov
fdivr
scas
test
jno
add
cmp
push
fwait
xchg
jne
sbb
cwde
sbb
xor
push
test
test
jno
push
sahf
test
mov
sub
cwde
out
push
and
push
or
cmp
daa
fldcw
cwde
adc
in
pop
sbb
jmp
inc
dec
cdq
fcom
pop
aas
sbb
mov
inc
mov
dec
push
cwde
out
xor
jle
cwde
push
(bad)
cmc
sbb
in
aam
xchg
aam
test
ins
js
lahf
add
xchg
jl
(bad)
aaa
ror
and
les
pop
call
inc
pop
mov
fwait
int3
(bad)
xlat
pop
jmp
xor
mov
push
xchg
cwde
cmc
std
sub
pop
out
mov
in
xchg
mov
mov
mov
movs
arpl
xchg
(bad)
call
or
mov
pop
(bad)
ud0
mov
mov
retf
cmps
gs
es
jge
pop
movs
xor
idiv
xchg
mov
rcr
movs
pusha
mov
test
lds
push
repnz
out
and
test
repz
std
ja
pop
and
mov
addr16
jp
lea
adc
mov
mov
cmp
aas
icebp
xor
popf
mov
enter
cmp
mov
rcl
pop
arpl
les
push
xor
cwde
fbld
push
mov
test
mov
mov
jg
adc
fistp
mov
and
add
mov
and
cwde
pushf
pop
push
mov
mov
cmp
test
push
fistp
sbb
fs
mov
fcmovnb
(bad)
ror
mov
not
mov
xchg
cwde
xchg
pusha
adc
clc
call
aas
shr
inc
addr16
and
loope
ins
ins
pop
pushf
adc
out
add
rcl
pop
mov
dec
leave
clc
add
movs
jg
xchg
cwde
inc
mov
fstp
movs
jecxz
sti
xor
mov
push
pop
xchg
loope
jae
mov
sbb
stos
popf
ss
and
sub
and
jnp
retf
or
cwde
out
sub
dec
cmp
fsub
pop
test
mov
call
push
out
pop
adc
sbb
xor
or
xor
sub
push
sub
out
mov
xchg
xor
dec
pop
push
xchg
cwde
jbe
fwait
or
cwde
sbb
fld
mov
jge
cwde
nop
(bad)
xlat
xchg
imul
and
push
in
cwde
xor
inc
sub
mov
adc
sbb
sbb
cmps
jnp
mov
xor
jecxz
cwde
cmp
pop
and
jp
js
pop
imul
sub
shl
mov
fst
inc
int
mov
dec
mov
fadd
(bad)
clc
cmp
mov
lock
or
or
xchg
sti
rcl
ret
retf
dec
add
mov
(bad)
rcl
(bad)
push
or
pop
cwde
pop
sub
dec
dec
das
inc
bound
dec
mov
cwde
jmp
fs
ja
sub
cwde
call
xlat
stos
jmp
cmp
or
xchg
imul
sub
int3
loop
cwde
adc
call
cmp
cwde
xor
stc
sbb
pop
imul
int
clc
push
mov
retf
dec
push
cmp
(bad)
call
mov
or
mov
into
sub
pop
inc
jle
cmp
cli
(bad)
xchg
jecxz
stos
mov
jbe
rcr
popf
push
inc
inc
pop
or
xchg
rcr
(bad)
in
xchg
mov
pop
mov
pop
sub
adc
into
dec
inc
leave
jae
and
out
adc
fstp
push
mov
mov
retf
lods
cmp
lea
jp
and
cwde
mov
mov
das
mov
mov
sbb
loopne
test
xchg
add
xchg
jmp
iret
out
or
xchg
pusha
scas
xchg
inc
sbb
stos
ja
lods
sub
sbb
fld
out
cwde
mov
(bad)
out
or
sbb
iret
pop
xchg
repz
cmp
out
pop
sub
and
sub
lahf
(bad)
pop
dec
mov
stc
cmps
scas
out
out
mov
repnz
inc
adc
xchg
sbb
push
push
jge
in
push
push
add
xchg
jge
addr16
mov
lods
push
cwde
dec
pop
dec
add
push
lods
xchg
mov
stos
stc
sub
push
xchg
xlat
pop
scas
or
sbb
and
xchg
and
clc
lahf
dec
push
dec
inc
ret
imul
mov
lods
mov
lock
xchg
out
cwde
cli
push
add
pop
cmc
cs
fnstsw
sti
sub
lahf
inc
xchg
add
pop
cdq
pusha
pop
sub
xor
mov
inc
call
cld
and
mov
jp
test
lock
cwde
sti
retf
fisub
lods
push
and
loopne
fcomi
fcom
fdivr
int
pop
sub
sbb
push
fadd
fstp
mov
sbb
adc
call
in
retf
sbb
cmp
fcmovbe
sub
cmp
dec
pusha
dec
cdq
arpl
jbe
stos
jns
lods
jecxz
fdivr
inc
mov
sahf
gs
arpl
push
adc
cwde
xor
(bad)
xchg
sbb
repnz
fstp
iret
xor
inc
(bad)
fcomip
cwde
cmp
in
iret
cwde
repnz
loop
(bad)
sbb
cmp
lahf
pop
pop
and
add
xchg
bound
das
xor
shr
lea
jo
add
sahf
mov
movs
sbb
adc
sub
test
(bad)
mov
xchg
sbb
pop
out
xchg
push
call
es
cmps
jge
inc
test
popa
mov
and
pop
stc
add
(bad)
mov
(bad)
fdiv
fldpi
xchg
xchg
test
push
cwde
push
and
imul
mov
and
push
and
xor
adc
(bad)
mov
xchg
mov
jge
inc
call
cwde
rol
mov
cwde
or
test
jb
cwde
push
out
icebp
outs
dec
(bad)
mov
stc
xchg
mov
ret
scas
jg
add
movs
ja
loope
add
rcl
and
call
cwde
mov
popf
mov
pop
adc
cwde
xchg
cmp
push
mov
pusha
imul
mov
popf
gs
mov
outs
cmps
mov
out
sbb
add
in
cdq
mov
push
xor
mov
pushf
ficomp
aam
xchg
in
lahf
fwait
adc
cwde
inc
das
outs
jne
mov
test
mov
xchg
or
or
outs
inc
imul
push
and
stos
mov
or
xor
xchg
jp
out
cmps
sbb
test
cli
or
lahf
sbb
ins
jno
fnstsw
cdq
(bad)
xlat
push
out
xor
inc
dec
fnsave
leave
lock
nop
test
push
das
cmp
cwde
shr
xchg
mov
xchg
cld
push
push
cdq
in
pop
push
cwde
jmp
add
(bad)
call
add
mov
mov
mov
and
cwde
fimul
sbb
dec
call
xor
push
cs
add
nop
cwde
mov
test
int3
mov
sbb
inc
shl
std
scas
cmp
push
adc
and
dec
pop
mov
jb
cwde
addr16
out
retf
lods
div
and
ja
pop
retf
xchg
iret
lahf
loopne
retf
ss
pop
mov
mov
fucom
rcl
inc
lahf
sbb
repnz
lods
sar
sbb
adc
mov
(bad)
loopne
cmc
cwde
(bad)
stos
sub
sahf
inc
cmps
mov
sub
jns
mov
aas
push
sub
cwde
inc
dec
sub
out
pop
call
imul
rcr
in
pop
add
cwde
push
loop
in
adc
fcmovnb
cmp
xor
(bad)
xchg
xlat
cmps
(bad)
dec
ins
push
add
aam
push
popf
pop
es
pop
push
push
mov
mov
pop
mov
inc
jno
mov
sahf
stos
jns
adc
loop
sbb
(bad)
in
call
retf
sbb
cdq
jo
mov
inc
cmp
xchg
test
dec
sub
lahf
imul
div
add
pop
jle
fisubr
jge
dec
sahf
cmp
sbb
fwait
scas
mov
stc
push
mov
je
enter
lods
pop
add
mov
in
(bad)
mov
lahf
loope
aad
call
int
outs
into
sbb
repz
push
xchg
xchg
mov
in
adc
(bad)
je
repz
xchg
sub
add
jbe
push
outs
push
lods
sar
dec
in
cwde
jnp
test
out
fdivrp
xor
xchg
push
push
lea
loopne
or
loope
xor
adc
std
dec
jnp
sub
in
(bad)
out
cwde
cmp
cmp
jg
cwde
(bad)
lea
xchg
add
and
fprem
js
xchg
sahf
add
loopne
mov
je
test
xlat
mov
sub
xor
mov
stc
call
clc
fild
dec
adc
rcl
inc
mov
outs
clc
mov
push
sahf
jg
pop
xor
jecxz
inc
or
stc
scas
nop
xor
in
jo
aas
mov
xchg
dec
push
pop
ds
xchg
adc
fmul
shl
pop
jmp
dec
cdq
push
aad
or
loop
cwde
or
mov
inc
test
mov
call
cwde
les
adc
out
xchg
mov
add
mov
ret
xchg
jnp
cli
push
cmp
inc
cwde
mov
mov
outs
lahf
ficomp
cwde
pusha
mov
stos
add
call
cwde
push
scas
mov
fldenv
fsubr
test
inc
dec
pop
xor
xor
inc
add
sbb
xchg
mov
push
cwde
jp
icebp
bound
xchg
sub
and
push
shl
xchg
lea
(bad)
jl
mov
cmps
push
(bad)
aam
lea
cmc
mov
jno
mov
push
cdq
xor
test
inc
push
movs
sub
mov
sbb
cmp
pop
call
sbb
and
outs
mov
add
sub
cmps
xchg
adc
movs
lahf
fsubr
sbb
loop
or
cmp
dec
lahf
push
inc
lods
mov
or
xchg
out
sub
dec
fisttp
push
add
push
or
fiadd
mov
add
sub
sbb
dec
sub
and
mov
lock
mov
pop
dec
pop
cmp
mov
js
int3
mov
sub
mov
retf
fild
out
pushf
pop
inc
jne
(bad)
cmp
popf
pop
xchg
lahf
loop
inc
push
cwde
addr16
popa
or
xchg
add
lock
mov
jmp
sbb
jg
pop
call
test
xchg
sbb
pop
popf
bound
cwde
mov
adc
push
sbb
jo
ins
cwde
test
sbb
rcl
cmp
inc
cmps
xor
int
pop
sub
or
push
inc
pop
fnsave
sub
popa
pop
das
mov
mov
xchg
dec
push
test
add
pushf
js
popa
lock
lahf
adc
mov
mov
shl
enter
cwde
dec
gs
and
or
sar
sub
les
mov
mov
jo
cwde
or
xor
push
mov
add
test
gs
jo
push
cwde
pop
in
aam
inc
leave
jnp
das
pop
sbb
loopne
ja
inc
popf
dec
or
popa
xchg
fisttp
xor
push
dec
mov
fnstcw
test
mov
das
cwde
xchg
mov
push
cwde
xchg
and
retf
aam
in
(bad)
sub
push
je
xchg
pusha
cmp
mov
push
push
add
cmp
fnsave
jns
xchg
sbb
sub
popa
xchg
cdq
push
loopne
scas
repz
(bad)
jb
jmp
dec
mov
xchg
das
js
mov
pop
lock
cmps
loopne
xchg
pop
mov
jmp
aad
mov
dec
jle
clc
enter
bound
scas
push
inc
cmp
dec
jl
jmp
xchg
scas
(bad)
repnz
xor
sub
xchg
gs
cmps
mov
fsubrp
das
jo
jmp
or
iret
xor
pop
rcr
xchg
scas
(bad)
repnz
push
push
loope
in
sub
xchg
loope
js
ja
push
clc
and
sbb
inc
pushf
scas
dec
sub
sbb
out
cmps
push
push
aaa
push
xor
push
rcl
mov
lock
jg
xchg
sahf
mov
leave
xlat
add
add
test
push
inc
push
ds
mov
jmp
mov
aam
popa
ja
dec
aaa
into
lock
mov
mov
lds
jae
mov
cli
sti
jbe
cmp
dec
cwde
pop
and
popa
mov
mov
dec
repnz
inc
push
dec
push
or
cwde
push
and
addr16
stos
xchg
mov
adc
arpl
jno
cwde
shl
shl
test
jge
ins
pop
xor
mov
scas
sbb
sub
int3
adc
cs
fnstenv
icebp
fist
mov
cwde
mov
push
jbe
lahf
ins
dec
shr
ds
xchg
mov
pusha
fsubrp
and
repz
enter
out
call
jbe
cmp
jbe
xchg
(bad)
xchg
popf
mov
dec
call
hlt
cmp
push
call
mov
sub
cwde
ret
xchg
sub
xor
mov
push
sbb
cld
aam
xor
cmps
mov
xor
(bad)
or
repnz
and
stos
xchg
mov
int3
adc
aas
push
or
xor
cwde
loope
xchg
shl
fcmovnb
cwde
aad
inc
push
mov
mov
mov
jmp
jb
loope
aad
clc
and
shl
xchg
push
(bad)
sub
push
clc
pop
push
mov
jmp
dec
mov
pop
push
sbb
xchg
ret
bound
pop
adc
mov
sub
dec
(bad)
ja
dec
xchg
arpl
jmp
cwde
adc
mov
sbb
sbb
cmp
pop
sub
push
jmp
in
lock
out
push
mov
outs
clc
mov
mov
push
mov
adc
and
jecxz
cwde
sub
fidiv
pop
cwde
test
jns
cdq
adc
sbb
cwde
jb
inc
pop
popa
fisttp
(bad)
(bad)
push
dec
iret
test
mov
jle
lahf
repnz
push
ficom
and
(bad)
xchg
in
inc
pop
or
bound
enter
sbb
rcr
addr16
pop
dec
das
mov
sub
xchg
add
je
lahf
mov
lock
call
push
sbb
xchg
cwde
mov
rep
addr16
or
retf
cwde
in
dec
pop
jae
xchg
inc
cmp
sbb
xor
cwde
mov
lea
jmp
in
pop
shl
rol
cwde
fmul
mov
bound
mov
sub
xor
push
xor
push
mov
mov
jmp
retf
in
(bad)
js
cwde
pop
inc
setns
jl
xchg
nop
cmps
ficomp
push
out
repnz
out
aaa
dec
mov
cwde
inc
inc
lods
sar
push
popf
adc
scas
loope
cwde
xchg
mov
pop
add
outs
jne
test
jns
and
cwde
push
cmp
xor
adc
adc
inc
adc
mov
mov
cmp
mov
cli
sbb
rcr
retf
nop
fbstp
cmp
mov
xchg
jg
test
neg
out
pop
shr
imul
xchg
mov
sbb
xchg
mov
shl
dec
push
push
inc
sub
popf
test
mov
pop
lock
add
pop
in
aaa
stos
xor
mov
dec
das
add
cmps
xchg
rol
jl
fsubr
dec
sub
cwde
sub
push
mov
je
add
xor
sbb
sbb
int3
imul
out
jmp
clc
jecxz
clc
inc
ss
push
and
sahf
cwde
test
xchg
jae
push
aam
add
jg
enter
xchg
xchg
outs
mov
pushf
mov
xlat
xchg
and
or
jmp
mov
clc
xchg
cmp
enter
cwde
and
or
sar
mov
or
cwde
outs
push
mov
into
push
popa
and
and
push
pop
cmp
dec
sub
call
cwde
in
xor
add
pushf
cmps
mov
cwde
push
out
in
and
sbb
cmps
stos
mov
pop
cwde
fcom
mov
xchg
xchg
jns
jmp
lock
cwde
inc
add
outs
scas
loopne
jge
cmc
rol
repz
fmul
xchg
prefetcht0
lahf
xor
mov
rol
pop
jb
cwde
mov
sub
fist
leave
mov
dec
test
cmps
stos
mov
xchg
dec
sub
bound
and
arpl
jae
xchg
mov
push
jl
add
and
int
adc
pshufw
aas
cwde
jmp
mov
(bad)
rcr
cwde
scas
cmp
xchg
les
movs
out
push
xchg
adc
xchg
push
sbb
jle
fnstsw
loop
adc
ins
mov
jb
call
in
hlt
and
xchg
or
fwait
pushf
push
cmp
push
outs
cwde
mov
mov
sbb
cwde
aam
in
or
xchg
cdq
(bad)
aas
jmp
mov
inc
pop
adc
aam
sbb
dec
mov
(bad)
and
add
sti
out
mov
mov
xchg
or
dec
jmp
inc
mov
inc
stos
jbe
cwde
xor
pop
mov
sub
jns
cdq
or
mov
adc
outs
cwde
cmps
and
adc
pop
cwde
in
ins
gs
xor
cmps
pop
adc
sub
pusha
data16
daa
pop
sub
ins
push
mov
out
in
mov
sbb
mov
loope
rcr
xchg
dec
push
addr16
js
cld
xchg
cdq
outs
shl
dec
dec
pop
xchg
ins
popa
xor
xor
mov
rcl
cmp
or
ret
and
ds
xchg
addr16
sbb
add
jmp
lahf
mov
xchg
out
add
xor
fs
sub
call
pop
cwde
rcl
sub
fadd
dec
int
outs
pusha
mov
stos
in
leave
sbb
xchg
cmps
sahf
aas
inc
or
pop
cwde
lods
lds
cmp
push
inc
push
xor
gs
scas
fisub
adc
hlt
retf
cwde
xchg
cmp
cmps
in
clc
xchg
fld
addr16
ins
xor
popf
pop
sahf
sbb
stos
jle
lods
out
or
jnp
mov
add
sbb
scas
nop
dec
xor
enter
sbb
xchg
mov
retf
cwde
mov
es
cmp
addr16
aad
lock
and
jnp
cmp
or
xchg
jg
and
push
xor
cmovs
inc
retf
sub
rcl
popf
bound
je
cdq
into
ja
(bad)
loop
adc
repz
sub
outs
jae
pushf
cwde
mov
(bad)
repz
sub
xchg
push
and
add
sbb
cmp
outs
test
cmp
into
xor
daa
test
sub
pop
adc
jmp
sbb
add
jbe
lock
loope
cwde
mov
mov
into
(bad)
ficom
xor
jbe
pop
retf
fs
fwait
imul
into
retf
inc
cwde
in
and
scas
ins
nop
fs
push
jne
and
pop
sbb
add
xchg
addr16
out
xchg
iret
fmul
out
adc
dec
sbb
out
test
add
xchg
mov
loopne
shl
inc
mov
mov
dec
sti
test
push
and
clc
jb
jne
lods
cwde
adc
je
xchg
movs
mov
sub
cwde
xchg
cmps
mov
xchg
cld
ret
sub
cwde
movs
lods
lock
and
mov
imul
cwde
push
add
pop
das
mov
jle
fsubr
mov
shl
test
icebp
ins
fs
jnp
pop
or
push
enter
shr
out
js
sub
js
dec
sub
push
js
dec
cwde
jno
pop
cmp
adc
fwait
inc
push
lahf
add
mov
cmps
(bad)
fistp
adc
jle
xor
stos
call
movs
sub
or
popf
movs
dec
xchg
lods
inc
xchg
jle
ja
lock
bound
jmp
outs
dec
push
pop
xchg
in
clc
leave
sub
push
pop
loope
cwde
call
mov
cwde
outs
adc
movs
lock
data16
pop
jmp
and
shr
nop
ins
sub
in
xchg
add
out
out
adc
jmp
cwde
or
outs
mov
cwde
sub
xor
mov
out
int3
pop
push
out
push
sbb
xor
lock
sbb
cwde
add
sub
adc
or
push
aam
xchg
cmp
pusha
fs
out
cld
cwde
push
rcl
adc
cmp
xchg
cmp
jnp
(bad)
cmp
sub
pop
xor
in
cwde
mov
add
lods
cwde
call
pop
fiadd
mov
fistp
push
clc
stos
fidivr
cmp
pop
or
clc
mov
mov
pop
push
jp
and
or
loope
add
fs
cwde
arpl
sub
or
jecxz
sub
iret
sar
mov
cmp
jecxz
call
cmp
call
jns
lock
mov
retf
gs
not
dec
add
out
xor
cmp
push
adc
pop
adc
jnp
lods
fbld
push
push
sub
ret
dec
cwde
mov
mov
out
clc
stos
jno
pop
pop
xchg
mov
popf
sbb
popf
pop
jge
cmps
out
jle
dec
js
stos
mov
clc
aam
nop
and
xchg
pop
cmc
or
leave
push
sub
push
mov
cmp
imul
pop
mov
xchg
ret
enter
clc
div
xchg
push
jmp
mov
dec
mov
cwde
fwait
mov
jecxz
sbb
xor
and
pop
push
call
js
lods
retf
loopne
jmp
mov
sar
add
sub
adc
sti
(bad)
sbb
sbb
cwde
push
stos
cmp
xor
cs
xchg
xchg
lock
mov
ins
cwde
popf
jno
in
adc
xor
cmc
push
cmps
stos
lahf
cwde
adc
mov
cwde
stos
mov
sti
push
add
mov
mov
sar
xor
jns
aaa
fwait
jle
js
fcomp
scas
cs
clc
fild
cwde
cmp
stos
mov
pusha
push
jo
xor
sub
sub
retf
imul
sbb
(bad)
jmp
xor
pop
fs
or
shr
in
adc
mov
fld
xor
test
mov
push
call
mov
ja
(bad)
xor
add
sbb
scas
xor
and
dec
mov
mov
cwde
retf
shl
and
cmp
mov
sub
rcr
and
outs
lock
in
rol
push
add
cbw
cmc
idiv
adc
jp
inc
hlt
fadd
and
sti
rcr
out
inc
mov
xchg
pop
les
sbb
(bad)
adc
int3
or
xchg
sbb
and
fisttp
retf
bswap
jp
inc
cwde
test
js
pop
cmp
jmp
push
inc
sbb
xchg
jl
adc
rcr
or
jne
xor
pop
or
cdq
jp
pop
add
xchg
(bad)
in
scas
xor
aaa
sbb
push
jne
repz
lock
dec
bound
mov
xchg
cmps
inc
out
out
popf
jo
sbb
cwde
data16
sbb
or
cwde
pop
jmp
cmp
push
in
xchg
push
lahf
mov
pop
push
and
sbb
xchg
sbb
std
ds
lea
popf
inc
sbb
stos
fild
rcl
jne
imul
mov
sti
push
adc
ret
mov
xchg
callw
pop
pusha
add
ud1
cmp
call
fcomp
fild
push
mov
lods
pop
sbb
jmp
clc
push
iret
or
mov
jl
cwde
mov
sub
xchg
cdq
mov
mov
xchg
test
iret
pop
dec
cwde
mov
fimul
sbb
jmp
dec
sahf
xor
fcom
call
dec
rcl
adc
sub
cmp
cwde
mov
lds
cwde
mov
pusha
jbe
adc
mov
dec
push
and
loope
sbb
xor
sbb
bnd
hlt
ret
mov
popa
cwde
fsub
mov
stos
imul
call
rcr
addr16
mov
mov
(bad)
imul
pushf
call
icebp
mov
aas
call
xchg
and
mov
sbb
outs
dec
cwde
and
add
cmp
popf
xchg
push
retf
std
sbb
stc
push
stos
in
call
cwde
mov
lock
mov
ss
cwde
pop
jbe
mov
arpl
cdq
inc
inc
push
cmp
pop
lea
xchg
lods
mov
mov
sub
and
test
arpl
jge
jecxz
add
cmp
mov
xor
dec
(bad)
shr
adc
rol
cwde
or
es
mov
jge
cwde
sub
xchg
inc
sbb
sub
leave
pop
dec
fmul
sbb
add
rcl
iret
cwde
inc
aad
mov
retf
or
xchg
mov
ret
or
xchg
mov
repnz
bound
inc
pop
pushf
ja
pop
mov
mov
test
in
pop
adc
add
into
fstp
data16
xchg
adc
movs
ds
stos
sti
xchg
popf
mov
pop
call
fdiv
pop
or
xor
xchg
outs
mov
jecxz
sbb
sahf
xchg
outs
xchg
outs
shr
mov
cmps
mov
mov
(bad)
adc
mov
xor
aas
cwde
sbb
pop
or
scas
mov
mov
xlat
mov
mov
shr
push
out
xchg
xchg
inc
mov
add
jae
cwde
test
jb
mov
dec
inc
fst
xor
sbb
jb
cwde
sbb
push
mov
aaa
fdiv
mov
xlat
(bad)
lock
xor
and
in
sub
cwde
and
mov
std
stos
mov
mov
inc
js
pop
retf
cwde
popa
(bad)
jmp
(bad)
movs
aad
xchg
add
sar
jo
addr16
mov
retf
into
fimul
mov
rol
push
xchg
or
and
push
das
jecxz
cwde
xor
mov
lock
test
test
push
xchg
xchg
in
push
sub
ins
out
cwde
pusha
and
push
xchg
pop
jle
cwde
jb
push
mov
cwde
aaa
add
cmp
push
popa
xchg
fld
cmp
js
mov
sbb
sub
loop
push
test
dec
pusha
sub
retf
lsl
repz
fnstsw
xor
inc
imul
gs
stos
xor
out
enter
cmp
out
rol
shl
fidivr
xchg
jp
pusha
sub
loope
outs
cwde
mov
and
mov
xchg
mov
mov
adc
movs
lods
repnz
das
rcr
arpl
sar
cwde
xlat
jae
lods
mov
push
inc
out
mov
lea
xlat
int3
pop
and
jne
dec
push
lahf
mov
jmp
adc
rol
cwde
int3
aad
(bad)
into
fs
adc
in
lods
mov
pop
pop
es
out
or
nop
push
cli
push
xchg
dec
push
rcr
out
and
sbb
sbb
mov
cdq
ret
jmp
cmp
cmp
cmp
out
cmp
add
stos
sahf
pop
sbb
jae
pop
push
loope
or
cmp
push
aam
xchg
xlat
sbb
mov
pop
stos
aaa
sub
xor
mov
mov
clc
scas
arpl
adc
mov
xchg
shr
ins
in
or
cmps
push
cwde
cmp
lea
mov
mov
push
sub
adc
in
aas
popf
bound
mov
out
lock
or
push
sub
sub
xor
cmp
sub
imul
std
les
add
ins
or
cwde
mov
fdiv
or
push
enter
fidiv
cmp
(bad)
mov
push
dec
pop
dec
enter
cwde
popf
cmp
jne
(bad)
pop
es
stos
pop
adc
jg
mov
or
or
fsubr
mov
mov
test
inc
mov
dec
out
int
push
iret
dec
dec
xchg
adc
and
imul
scas
call
xchg
cmps
retf
sbb
test
xchg
repnz
mov
mov
mov
js
into
ror
adc
cmp
aad
pop
dec
cwde
jno
pop
xor
adc
cdq
cwde
pop
dec
leave
mov
push
sar
and
pop
xchg
sbb
inc
retf
jb
inc
fcmovb
je
in
arpl
out
xchg
push
inc
out
sbb
dec
or
(bad)
icebp
into
sar
mov
repnz
sbb
retf
pop
loope
fst
push
sbb
xlat
jbe
loop
xchg
cli
xor
pop
aad
mov
es
pusha
pop
shl
and
and
and
push
test
jne
sub
rol
inc
mov
arpl
cs
inc
or
std
cmp
fisttp
sub
xor
loop
push
xchg
mov
add
pop
mov
xchg
adc
imul
and
add
cmp
push
and
repz
cmps
and
mov
aam
cmp
mov
and
(bad)
ds
inc
cwde
fiadd
cmp
or
fsub
fnsave
out
mov
xchg
push
add
mov
dec
retf
(bad)
call
cmp
mov
xor
xchg
mov
clc
lds
imul
mov
adc
inc
clc
test
cmp
cwde
xor
inc
push
dec
push
arpl
js
sbb
xchg
adc
adc
mov
std
aas
dec
xlat
mov
dec
cmp
jmp
cmc
ret
aas
lock
add
in
fisttp
sub
movs
cmc
and
(bad)
(bad)
jbe
call
loopne
cmp
cwde
mov
outs
jae
xchg
push
rol
test
and
int3
xchg
sub
jg
addr16
xchg
mov
lods
xchg
mov
repnz
clc
call
xchg
imul
aas
mov
lahf
aad
pop
fcomp
inc
xchg
shl
imul
jno
in
cmp
mov
mov
adc
xor
add
and
dec
or
imul
aas
pop
cmp
js
adc
adc
push
je
(bad)
mov
jp
xchg
cdq
addr16
shl
int3
or
cwde
adc
jno
pushf
std
bound
inc
adc
jecxz
out
cwde
mov
inc
inc
push
aas
stos
or
addr16
retf
pop
or
mov
test
in
cwde
add
pop
adc
inc
and
mov
(bad)
(bad)
mov
inc
sub
mov
iret
fprem
inc
frstpm(287
fwait
cwde
ror
mov
das
or
adc
jecxz
call
pop
xor
mov
test
sbb
dec
mov
cwde
jecxz
push
xor
cmc
xchg
xchg
popa
xchg
arpl
or
push
jno
sbb
jmp
pop
xchg
xchg
(bad)
pop
push
xor
xchg
xchg
enter
xchg
mov
addr16
jp
jns
xchg
mov
sti
das
jo
stos
sub
mov
rcr
es
push
mov
iret
unpckhps
dec
push
xchg
pop
out
test
xchg
mov
inc
mov
add
pop
ret
int
cmc
pusha
dec
inc
cwde
jae
or
xchg
mov
cwde
(bad)
loope
dec
arpl
inc
xchg
iret
sbb
cmps
sbb
sbb
sub
pop
mov
sar
push
ss
xchg
sbb
neg
adc
test
and
gs
jo
and
in
in
icebp
aas
jle
bound
dec
cwde
xchg
mov
inc
pop
push
mov
xchg
stos
jmp
sbb
add
and
or
cwde
sbb
imul
data16
movs
fsubr
aam
cmps
shl
xchg
and
daa
jmp
dec
iret
mov
clc
mov
imul
xor
test
cmp
or
enter
cwde
fcomp
bound
call
test
inc
fadd
add
sbb
jl
xchg
call
xchg
dec
addr16
mov
retf
pop
jo
popf
pop
and
dec
test
sub
jmp
and
bound
jl
xchg
xchg
xor
ja
arpl
fs
cwde
add
pop
and
jno
cwde
mov
int
add
fstp
int3
test
nop
xchg
dec
sahf
mov
inc
pop
shl
sbb
cmp
fld
jo
cwde
call
sbb
sub
mov
ret
(bad)
popa
pusha
loopne
pop
cwde
jmp
cmp
dec
push
xchg
stc
cwde
cmp
ja
cdq
dec
pop
mov
movs
mov
into
pushf
test
scas
adc
std
push
repz
loope
cwde
mov
xchg
cli
int3
mov
cmp
aam
mul
dec
pop
push
sub
sbb
jbe
mov
mov
stos
ret
int
or
jge
mov
jns
xchg
add
jne
jecxz
mov
popf
xor
mov
and
repnz
add
push
retf
mov
or
push
inc
fcom
push
popa
push
jmp
add
hlt
test
inc
mov
stc
scas
or
in
dec
repnz
sahf
add
push
fcomp
scas
ins
push
push
fdivr
inc
and
popf
add
ret
loopne
addr16
xchg
test
sub
mov
mov
mov
mov
cwde
jle
(bad)
ret
pusha
into
js
xchg
retf
jecxz
add
lock
loop
inc
jnp
fsub
fistp
xor
retf
pop
daa
pop
and
das
push
push
xchg
inc
pop
outs
xchg
mov
div
sub
sbb
xchg
adc
pop
test
mov
pop
loope
jmp
cmp
mov
mov
sbb
pop
and
mov
mov
in
in
in
pop
mov
xlat
cmp
std
cdq
push
jmp
loope
jmp
jle
loopne
pop
mov
mov
cmc
sbb
into
xor
and
ins
lahf
test
repz
inc
mov
out
mov
jmp
rcr
(bad)
fwait
daa
cwde
popf
xor
and
movs
mov
scas
retf
lea
loopne
popa
xchg
sbb
jne
xchg
shl
xchg
ss
fsub
xor
loopne
repnz
and
adc
out
sbb
iret
jmp
aas
lds
popa
ins
dec
sbb
loopne
(bad)
pop
mov
in
or
jo
test
daa
mov
mov
mul
cmp
mov
cwde
add
add
jbe
popf
lahf
jae
(bad)
push
cwde
fsub
xchg
fadd
inc
outs
mov
jo
cdq
cmps
push
repnz
nop
cwde
cmp
xor
push
sbb
test
in
sbb
dec
xchg
push
or
pop
outs
mov
popa
sbb
test
adc
cmp
mov
lahf
mov
xchg
lods
pop
test
fs
(bad)
xor
je
sbb
mov
les
fmul
enter
xor
sbb
test
xchg
lds
cwde
inc
mov
sbb
aam
dec
pop
push
sub
fbld
dec
in
in
loopne
in
outs
and
lock
aas
mov
(bad)
xchg
out
cmp
cdq
fisub
shl
test
fist
test
xchg
(bad)
pop
pop
lods
dec
inc
cmc
jbe
dec
aad
test
mov
or
dec
cmp
xchg
rcl
or
and
sti
imul
mov
or
xchg
scas
leave
lods
add
test
xchg
iret
dec
push
push
sbb
sub
adc
sbb
jge
mov
push
sti
into
test
aas
jmp
xchg
pop
repnz
mov
jae
je
out
popf
mov
add
bound
dec
retf
enter
(bad)
fcomp
in
inc
dec
xchg
imul
adc
cmp
jo
cwde
cmp
retf
lds
pusha
daa
push
push
rol
mov
sub
lahf
adc
sub
sahf
cli
cwde
es
das
test
gs
daa
mov
jo
sub
pop
popa
loop
or
and
mov
enter
adc
(bad)
repz
pop
nop
xor
sub
xlat
mov
and
sub
sbb
mov
jns
sbb
in
popf
push
mov
(bad)
outs
push
fistp
add
bound
gs
sub
mov
aam
shl
cwde
jo
xor
fwait
xchg
(bad)
xchg
data16
sbb
add
sub
jp
mov
xchg
cmp
xor
cmp
cmp
mov
stos
add
jne
cmp
lock
les
mov
dec
mov
cmp
pop
inc
adc
clc
add
inc
sbb
inc
add
xchg
cmp
inc
test
in
pop
xor
rcl
xchg
mov
or
fisttp
push
and
call
push
xchg
not
and
repz
je
xchg
aas
icebp
ins
lds
mov
push
cwde
dec
mov
inc
push
popf
in
jns
arpl
pop
fwait
(bad)
push
jmp
xchg
arpl
aam
xor
call
inc
xchg
push
cmp
arpl
fsubr
inc
adc
xchg
inc
icebp
ret
jnp
mov
fadd
jmp
add
iret
and
enter
mov
jnp
pop
mov
fnstsw
pop
add
xor
sbb
xchg
mov
jne
jnp
out
mov
sbb
dec
shl
ja
std
cwde
cmp
mov
sub
adc
je
mov
into
ds
stos
mov
test
enter
(bad)
mov
cmc
retf
dec
repnz
retf
(bad)
xchg
hlt
shl
xchg
int
neg
stc
jle
mov
inc
mov
jno
pusha
enter
mov
popf
cwde
in
out
or
pop
and
iret
inc
or
sbb
cs
sub
test
and
int3
aam
ret
cmp
fs
inc
mov
cwde
fisubr
and
ficomp
adc
xchg
mov
retf
scas
lea
out
cdq
cwde
fsubr
dec
jb
jecxz
cmc
xchg
mov
cmp
mov
sbb
jge
js
lahf
jno
std
fsub
add
jns
inc
in
or
js
sub
xchg
mov
call
mov
mov
fs
cld
dec
imul
lahf
xchg
sub
xor
mov
pop
arpl
xchg
push
ror
sub
clc
pop
loop
cmc
mov
mov
xor
sub
xchg
mov
or
(bad)
dec
xor
popf
outs
xchg
fnsave
jbe
fsub
out
test
xor
dec
mov
or
inc
nop
sahf
into
sbb
std
adc
lds
(bad)
fsub
retf
ins
cwde
jno
imul
mov
hlt
mov
jo
pop
daa
and
mov
out
adc
or
pop
sub
cmp
add
xchg
add
icebp
loope
jb
cwde
mov
mov
retf
out
sub
lock
sub
div
fldlg2
jo
xchg
(bad)
cli
(bad)
int
adc
dec
cwde
test
lods
pushf
(bad)
ret
test
ja
mov
popa
cdq
or
mov
fst
xor
(bad)
mov
icebp
cwde
aam
cli
fisubr
rcl
mov
cwde
sbb
pop
xor
jb
cwde
call
shl
push
out
sub
int
(bad)
retf
sbb
idiv
push
sbb
xchg
xor
imul
inc
or
mov
das
dec
test
ins
lods
or
mov
xor
sub
push
sar
stos
fidiv
jecxz
jmp
pop
dec
cli
jp
sub
shl
sub
icebp
lds
cwde
jae
dec
out
bound
mov
call
retf
xor
(bad)
xchg
addr16
lahf
sub
add
mov
mov
sub
mov
pop
push
xor
adc
add
mov
mov
cmp
sub
lock
scas
xchg
pop
cmps
mov
int3
cld
xchg
or
pop
sub
cmp
dec
xchg
pusha
mov
jle
jnp
jecxz
inc
movs
lods
dec
imul
inc
xchg
pop
mov
sbb
fwait
adc
add
lods
mov
popa
push
sub
cmps
pop
adc
popf
jl
jbe
xchg
out
movs
pop
inc
test
clc
(bad)
sbb
(bad)
stc
imul
adc
out
js
mov
sub
mov
sbb
out
or
stos
cmps
mov
int
sub
cmp
cwde
test
stc
push
(bad)
adc
imul
(bad)
adc
pop
jecxz
outs
test
retf
or
retf
dec
stos
cmp
xchg
aad
sar
fisttp
inc
push
cwde
bound
cwde
mov
retf
sbb
lahf
stos
in
sub
fdiv
adc
outs
in
cwde
(bad)
in
(bad)
fldcw
in
cmp
lock
adc
sbb
jbe
pop
cld
out
enter
ret
arpl
jmp
xor
lock
lds
(bad)
fadd
push
sbb
sahf
push
push
xor
jo
js
xchg
and
mov
xchg
(bad)
rcl
imul
dec
mov
cwde
mov
ret
push
xor
cmp
call
stos
mov
jp
jecxz
lods
lods
pop
inc
or
or
xor
or
retf
jo
popa
fst
ja
test
mov
cmps
adc
rcr
mov
popa
jl
clc
loop
fyl2x
xchg
inc
sbb
iret
dec
jns
(bad)
jnp
adc
imul
sbb
sub
cmp
xchg
fstp
xor
and
int3
dec
pop
sub
xchg
dec
push
jle
push
or
fsub
fs
xchg
(bad)
popf
inc
push
ja
sbb
pop
test
test
movs
imul
stos
mov
test
out
ja
and
out
jl
into
es
cwde
push
or
mov
xchg
fcmovu
inc
lods
xchg
repz
and
in
ret
push
sbb
out
adc
adc
inc
mov
rcl
sbb
push
clc
fldl2t
xchg
inc
cmp
pop
addr16
lea
mov
frstor
lahf
int
out
mov
lock
in
mov
xchg
mov
mov
push
xchg
dec
pop
ins
push
dec
pop
pop
aam
mov
das
jns
or
or
movs
xchg
xchg
sbb
xchg
jecxz
xchg
and
imul
mov
ja
adc
jmp
dec
clc
les
jo
add
mov
jne
dec
pop
inc
xchg
adc
xchg
pop
pop
(bad)
xor
out
cwde
dec
mov
mov
es
jge
push
push
sbb
or
xchg
jae
mov
leave
sbb
fmul
in
(bad)
loop
mov
xchg
mov
fisub
jo
cwde
vsqrtps
mov
aas
rcl
rcr
lahf
mov
xchg
push
scas
jo
retf
repz
xor
adc
dec
imul
ret
loopne
push
cwde
pop
idiv
cwde
out
jmp
call
jo
jge
stos
jmp
pop
mov
push
mov
clc
xor
inc
cmp
ins
adc
popf
mov
aad
mov
xchg
or
push
or
jo
cwde
xchg
add
test
xor
add
push
adc
cmp
push
hlt
lds
or
jae
adc
dec
pop
in
mov
es
sar
inc
clc
xchg
mov
js
into
pushf
sbb
mov
adc
and
inc
aas
pop
cwde
fnstsw
mov
cwde
fld
mov
xchg
mov
sbb
movlps
adc
pop
dec
sbb
loope
sub
test
add
xlat
test
adc
and
adc
push
inc
sub
sbb
repz
mov
xchg
and
mov
(bad)
fsubr
push
mov
sub
jge
sub
cmc
mov
test
mov
popf
aam
nop
cli
dec
adc
aas
inc
paddusw
popa
(bad)
xlat
fs
mov
fidivr
mov
outs
jecxz
aaa
sbb
pminsw
sbb
xor
xchg
xchg
mov
shl
bound
popf
cdq
sbb
in
imul
je
sub
xchg
fcom
aaa
call
push
mov
les
add
outs
pop
sub
adc
push
inc
xchg
dec
popf
xlat
xchg
cvtpi2ps
seta
ret
mov
pop
int
sub
fdiv
inc
imul
pop
cli
cdq
imul
xchg
clc
ret
cld
sub
or
sbb
xchg
(bad)
push
xchg
sbb
ss
cmp
dec
clc
pusha
or
pop
scas
aaa
lods
mov
fwait
lea
push
shl
lahf
ins
sub
xor
loopne
or
call
mov
jmp
and
and
out
into
fadd
pop
adc
push
xchg
fdivr
bound
add
repnz
jecxz
loope
mov
sbb
and
dec
adc
rcl
sbb
mov
jp
jns
daa
out
cwde
jmp
cmp
and
push
pop
rcr
dec
push
sbb
cwde
mov
cmp
xchg
out
faddp
push
out
mov
mov
mov
mov
movs
int
xchg
fcomp
mov
adc
adc
sbb
or
push
sub
push
dec
hlt
in
mov
call
and
loope
cmps
xchg
lds
jo
pop
xor
gs
adc
xchg
push
mov
mov
retf
jae
gs
xchg
fwait
pop
inc
loope
imul
mov
scas
ror
scas
ficom
xchg
adc
pop
(bad)
fs
dec
or
cwde
das
add
mov
jo
fstp
push
pop
sbb
pop
das
lahf
sbb
(bad)
cmp
dec
mov
test
jge
sbb
shl
push
iret
fs
fs
(bad)
xchg
ffree
fmul
rcr
popf
ja
loope
add
ss
jmp
cwde
xchg
imul
mov
xchg
stos
loopne
retf
xor
out
rcl
xor
fwait
cdq
cld
push
and
into
pop
xchg
hlt
lahf
jae
cmps
push
ret
js
sbb
cmp
shr
lods
or
fnstsw
sbb
mov
or
mov
mov
scas
sbb
sub
imul
jb
jl
xor
cwde
push
push
push
pop
sub
movs
cdq
and
jb
cmp
jecxz
sbb
jnp
push
xchg
xor
jp
fs
push
dec
clc
cld
xor
ret
retf
je
or
mov
test
adc
js
mov
jo
test
xchg
fwait
jns
ss
add
lahf
loop
push
fistp
cmp
cwde
cld
adc
pusha
xchg
int3
mov
mov
mov
push
xchg
mov
xchg
jmp
movs
push
push
or
cmp
inc
xchg
adc
cwde
push
out
inc
sbb
dec
scas
mov
(bad)
cwde
sahf
push
mov
cmp
in
lock
xor
lahf
add
dec
cmp
cs
jae
cmp
loopne
or
addr16
rcl
repz
aam
es
fbstp
or
and
mov
mov
test
sub
push
xchg
sub
push
cwde
test
inc
or
sbb
scas
movs
into
adc
cdq
and
push
cwde
sar
iret
ins
jb
popf
xchg
xchg
jo
(bad)
cld
(bad)
jmp
jne
sbb
cmp
in
bound
ror
sbb
cmp
int
cwde
jge
rcr
aam
pop
mov
daa
inc
push
int
push
pop
pusha
fsub
aaa
add
and
dec
dec
js
jmp
xor
inc
fst
sti
mov
cmc
and
dec
push
lock
imul
scas
sub
add
scas
into
xor
xrelease
loope
cs
iret
dec
jecxz
popf
or
or
mov
outs
pusha
dec
mov
dec
cmc
dec
add
adc
cdq
das
inc
pop
pop
daa
pop
and
jns
xchg
aaa
cdq
push
xchg
mov
ror
lods
mov
mov
jnp
ret
or
je
das
cmp
mov
or
add
fnstsw
mov
mov
cmps
mov
and
(bad)
push
in
mov
enter
leave
xor
mov
push
add
cmp
(bad)
mov
or
fld
mov
sub
xor
and
out
repz
mov
adc
test
je
push
mov
ret
in
loope
sbb
dec
push
jo
and
inc
jmp
adc
ins
jge
in
jmp
xchg
test
jmp
push
hlt
hlt
xbegin
dec
clc
xchg
cmps
sub
xchg
ss
sti
(bad)
les
int3
repnz
dec
and
push
std
(bad)
and
jp
push
push
out
add
repz
lahf
shr
xchg
and
cmp
mov
dec
mov
cmps
pushf
rcr
rcl
dec
aaa
xchg
push
pop
pop
dec
push
popf
cwde
jmp
or
xor
daa
fadd
adc
xchg
xor
mov
sbb
jo
mov
jmp
cmp
mov
fiadd
lods
add
arpl
sbb
add
dec
mov
xor
dec
push
fld
xor
es
push
popf
pop
push
stc
sbb
fwait
xchg
cmp
cmp
dec
adc
mov
sub
push
sub
mov
mov
in
adc
dec
call
popf
mov
push
sub
dec
add
data16
inc
mov
cwde
xchg
add
ret
and
sub
lock
ins
cmp
and
inc
jge
cli
retf
fs
xchg
jmp
mov
clc
sbb
sub
dec
fwait
mov
dec
jnp
xchg
outs
mov
and
pop
add
jno
repnz
rcr
xchg
cwde
imul
out
pop
cwde
and
sbb
mov
jmp
ja
lahf
test
mov
xchg
xor
hlt
inc
pop
push
daa
scas
push
or
pusha
movs
mov
adc
hlt
adc
sbb
out
mov
push
push
jmp
jae
sub
cwde
ret
(bad)
push
into
outs
dec
xchg
jg
out
sub
lods
lahf
mov
rcr
rcr
call
fwait
js
jb
test
into
inc
push
dec
add
dec
sbb
mov
pop
pop
je
xchg
jp
imul
clc
inc
push
jmp
int
div
(bad)
sbb
clc
nop
aad
aaa
je
inc
xchg
dec
outs
sbb
adc
fmul
dec
cwde
das
pop
xor
ss
popf
cmp
call
add
test
push
mov
call
aas
fbld
stos
adc
icebp
xchg
jg
fwait
cmp
add
sbb
movs
push
rol
outs
dec
addr16
test
loope
inc
sbb
das
popa
popf
js
xchg
jg
pop
rcl
not
add
js
pop
inc
fisub
pop
sub
dec
data16
aam
je
outs
xchg
jbe
xor
xchg
xor
loop
stc
and
jl
mov
cmps
xchg
jmp
sbb
fdivr
xor
jmp
adc
aas
push
dec
loop
loopne
aaa
bound
xchg
(bad)
fiadd
inc
jno
dec
dec
and
js
xchg
aad
leave
js
inc
sub
xor
mov
xor
lahf
adc
xor
fld
aam
jmp
sbb
in
jp
xchg
mov
or
es
sbb
aam
shr
pop
adc
pop
cwde
fbstp
mov
add
sbb
(bad)
sub
cwde
inc
pop
imul
jbe
movs
jo
aas
lahf
test
xchg
jg
ret
bound
lds
fsub
and
add
lahf
dec
not
push
loope
jp
cwde
jmp
xchg
call
mov
in
repnz
inc
and
iret
les
es
gs
popf
xchg
fs
dec
outs
ins
jmp
test
xor
cmps
xchg
pop
hlt
and
ja
adc
inc
clc
jmp
cwde
sub
sub
movs
cwde
shr
sub
pusha
adc
inc
int
sbb
jecxz
lahf
xor
jns
mov
mov
inc
mov
stos
cwde
xor
(bad)
fiadd
xor
or
xchg
or
inc
mov
add
pop
add
mov
cwde
add
xchg
dec
sar
xchg
xchg
ins
call
sbb
int3
jl
mov
data16
leave
test
and
jmp
sub
pop
mov
pop
push
stos
leave
mov
inc
add
pop
jbe
sub
ins
es
mov
lods
lds
mov
cwde
(bad)
repz
adc
sti
pop
jmp
das
(bad)
cwde
dec
bound
pop
rcl
bound
icebp
int3
in
cli
cwde
jne
jb
cs
js
lahf
xlat
aas
clc
or
lahf
movs
call
mov
inc
or
test
cmp
cwde
mov
or
or
sbb
imul
scas
xor
and
test
xor
inc
(bad)
sub
cs
inc
push
dec
or
or
xchg
mov
xchg
cmp
add
add
jne
inc
push
out
mov
mov
pop
and
xchg
popf
test
sbb
xchg
push
cwde
icebp
out
pop
in
inc
out
sbb
jbe
jg
jnp
xchg
mov
xchg
sbb
sbb
sub
(bad)
fist
nop
and
push
test
js
rcr
mov
pop
cwde
addr16
fsubp
repz
xchg
or
pop
das
push
ds
out
jns
jno
mov
(bad)
pop
js
mov
xchg
push
ja
sahf
xchg
jnp
out
imul
sub
inc
sub
mov
fld
repz
ret
into
rcr
dec
pop
mov
ins
cmps
and
jbe
cwde
mov
sbb
jns
xchg
(bad)
test
mov
jne
in
fs
jmp
cwde
sbb
fsubr
rcl
mov
ja
fwait
bound
rol
ins
cwde
add
xchg
lods
ins
addr16
xchg
sbb
adc
fcomp
jbe
lds
cwde
aad
lea
xor
lods
mov
ins
imul
lods
jecxz
pop
out
mov
ss
popa
add
ins
cdq
test
iret
loop
push
sub
hlt
push
xchg
jg
call
into
inc
test
fs
bound
push
pushf
push
cli
or
das
xchg
lods
fdivr
bound
sbb
xchg
adc
mov
lahf
call
inc
rcr
pop
in
cmp
dec
jo
popf
aas
push
lds
test
pop
inc
push
sub
push
xor
adc
dec
aas
ror
cmp
not
inc
jbe
imul
xchg
pop
xor
sub
xchg
sbb
push
sahf
add
jmp
and
ins
mov
sbb
mov
mov
iret
(bad)
jle
xchg
pop
jno
xchg
push
cwde
and
sub
cmp
mov
sub
loop
mov
pop
fwait
inc
xchg
dec
out
pop
retf
stos
pop
loopne
mov
cwde
push
out
jae
pop
pop
cwde
fsub
sbb
pushf
test
movs
push
(bad)
inc
sub
jp
jnp
stos
mov
inc
xchg
cmp
add
sbb
mov
outs
pinsrw
in
test
iret
gs
loope
adc
hlt
sbb
ss
fcomp
pop
mov
test
xor
adc
call
jle
cmp
outs
jne
nop
mov
leave
cwde
pusha
sub
push
mov
xor
push
mov
lods
mov
movs
clc
cwde
(bad)
test
sbb
and
dec
mov
mov
sbb
inc
jge
cwde
data16
cmp
cmps
dec
test
mov
xchg
aaa
ja
xchg
test
inc
ins
cwde
addr16
jne
adc
sub
daa
push
pop
addr16
mov
mul
jne
sub
xor
inc
push
sbb
xlat
pop
mov
push
push
stos
cwde
rol
mov
xchg
and
cs
test
inc
les
(bad)
inc
sbb
pop
add
fdivr
jae
(bad)
fwait
mov
xchg
scas
shr
xchg
sbb
stos
inc
pushf
jb
pusha
inc
or
add
cdq
imul
lahf
minps
push
mov
mov
rcl
cmp
inc
pop
ds
inc
pop
sbb
fnsave
outs
push
fs
imul
xchg
mov
add
aaa
adc
fistp
xor
dec
call
sbb
aas
sbb
fcomp
ss
pop
popa
cwde
rcr
jbe
push
xchg
(bad)
xor
or
lods
sbb
jge
xchg
or
xchg
xor
push
adc
dec
nop
ds
cwde
mov
pop
enter
movs
(bad)
jmp
ret
jge
arpl
dec
stos
sub
cwde
shl
aad
jo
hlt
sar
and
cmp
push
repnz
push
inc
outs
jmp
jp
mov
cmp
mov
test
xchg
out
mov
bnd
push
cwde
push
jbe
and
popf
leave
adc
arpl
popf
add
std
daa
xor
add
inc
movs
mov
clc
inc
dec
jmp
loop
or
push
out
inc
ins
sub
and
sbb
mov
mov
xchg
lahf
ins
ins
pop
mov
xchg
rcl
mov
gs
xchg
arpl
clc
out
xor
(bad)
push
jp
outs
loopne
jmp
in
jo
pop
xchg
or
inc
inc
add
xchg
sub
fs
cwde
repnz
xchg
inc
icebp
cmp
call
cwde
into
jnp
mov
inc
jbe
pop
cld
in
push
inc
sub
stc
shl
dec
call
and
or
sub
jb
test
rcl
cmp
nop
jmp
cmp
das
mov
sbb
pop
jmp
pop
(bad)
jmp
(bad)
setns
or
imul
out
xor
add
mov
xlat
stc
ins
fs
push
cwde
jge
sub
inc
cwde
or
inc
pop
fadd
xchg
clc
inc
cld
icebp
xchg
jnp
ja
cmp
xchg
xchg
cmp
and
iret
mov
dec
repz
mov
mov
pop
cli
fcomp
lods
add
jecxz
cwde
(bad)
ret
mov
pop
retf
lahf
mov
stos
cdq
call
ret
cmps
or
pop
sbb
mov
add
test
leave
aaa
ins
mov
xchg
adc
or
push
jecxz
sti
into
cwde
lds
add
cmp
aad
and
jb
jge
mov
mov
das
mov
aas
out
jbe
jmp
mov
mov
xchg
dec
arpl
pusha
in
std
fidivr
xor
cwde
push
cmp
lea
jge
dec
repnz
sbb
push
add
aas
cwde
push
pop
and
inc
mov
lahf
movs
aam
adc
xchg
dec
pop
and
test
pop
sub
cwde
in
js
add
cli
mov
data16
ins
jb
cwde
addr16
mov
or
or
rcr
sub
outs
shl
cwde
test
and
mov
pop
je
xor
cwde
lock
jmp
fwait
and
cmp
inc
xchg
dec
jg
xchg
add
xchg
or
je
icebp
sub
and
int
in
add
call
pop
add
sub
push
cli
fstp
test
jle
inc
cdq
popa
cwde
xor
sbb
vcvttpd2dq
test
cwde
fldcw
adc
xor
mov
adc
or
sbb
xchg
mov
(bad)
mov
adc
cmp
or
not
cmp
out
loope
es
cmp
push
dec
lods
sahf
(bad)
mov
shl
mov
xchg
cmp
call
jns
repz
pop
outs
or
pop
inc
xchg
call
in
loopne
cmp
sub
mov
bound
mov
push
push
pop
xor
push
ret
xchg
lods
mov
push
sub
lods
enter
cwde
div
push
cmp
js
inc
pusha
fisub
iret
cmp
neg
and
pop
dec
mov
xor
mov
sub
mov
jmp
pop
sub
out
xacquire
rcl
xchg
jo
mov
xchg
jecxz
js
xchg
inc
das
xchg
xchg
outs
shr
push
in
sti
mov
mov
adc
sub
out
je
xchg
outs
movs
sub
retf
enter
sub
rcl
out
pop
jae
fist
xchg
or
clc
outs
push
rol
mov
call
pop
fst
add
xchg
mov
in
fsubr
xchg
add
push
push
cwde
add
mov
cmp
pushf
mov
ins
rcl
xchg
mov
sub
and
loope
lahf
sti
inc
jo
fbstp
pop
cwde
add
push
es
pop
cwde
cmp
or
adc
cmp
sub
and
sub
in
nop
cmps
mov
inc
cwde
fwait
jecxz
xor
jo
cwde
xchg
mov
inc
pusha
sbb
jo
ins
mov
push
jle
and
inc
xchg
sub
enter
popf
xchg
jge
outs
xchg
mov
push
mov
pop
xor
push
cs
fs
dec
(bad)
cwde
rol
fisubr
mov
(bad)
jns
retf
jmp
shl
or
fwait
loop
push
lods
push
lods
mov
ins
or
dec
xor
and
pop
mov
inc
sub
mov
lea
inc
dec
mov
dec
pop
inc
sub
sbb
dec
je
mov
adc
fadd
xchg
ss
dec
pop
jp
cdq
fsub
and
push
aam
mov
jmp
xchg
adc
jl
adc
mov
(bad)
in
mov
and
inc
cmps
mov
clc
ret
cmp
js
jp
push
adc
pop
aas
push
loopne
jo
test
fcomp
adc
dec
cwde
loope
jmp
in
xor
xchg
cmp
mov
push
xchg
jp
cmp
sbb
jno
jge
popf
and
adc
out
test
sub
sub
and
clc
leave
(bad)
mov
mov
sbb
mov
adc
imul
test
dec
cs
daa
cwde
(bad)
jl
cmps
sbb
inc
add
or
fs
mov
jmp
pop
sub
xor
xchg
xor
jbe
dec
cmp
pusha
movs
xchg
pop
push
jnp
jl
jns
jmp
mov
adc
dec
sub
cmc
(bad)
mov
cmp
xlat
fsub
xor
push
push
mov
adc
mov
test
sbb
ins
dec
push
popf
jbe
ror
add
add
inc
adc
je
leave
jbe
pop
dec
sub
in
adc
lock
ficomp
pop
cli
sub
lods
pop
sub
pusha
and
mov
mov
js
sti
add
stc
inc
sub
sub
in
cwde
imul
jle
cwde
fstp
jle
in
lods
mov
aaa
sbb
push
sbb
jb
push
stos
sub
mov
cs
sbb
(bad)
retf
scas
das
xchg
sub
xchg
xchg
mov
aam
test
sbb
(bad)
loope
or
enter
jno
xchg
js
jns
mov
(bad)
sbb
cld
sbb
test
out
pop
movs
jbe
lds
sbb
dec
cld
xchg
ja
mov
cwde
(bad)
fmulp
xor
inc
outs
ret
jmp
inc
(bad)
lahf
aaa
scas
popf
cwde
and
dec
fdivr
lock
loopne
sbb
cwde
jmp
or
push
cdq
pushf
aad
inc
push
cmp
in
shl
ret
enter
fnstenv
cwde
sahf
jns
adc
push
loopne
mov
push
shl
stos
ins
xchg
sbb
in
pop
xlat
or
popf
fabs
inc
mov
xor
pop
xchg
and
mov
push
xchg
cwde
mov
shl
nop
xchg
mov
(bad)
sub
dec
xchg
daa
add
dec
or
dec
or
into
mov
mov
push
(bad)
not
cmp
stos
fdivp
jmp
stos
push
xchg
sbb
inc
add
in
loop
cwde
fwait
cmps
pop
int3
pop
mov
rcr
scas
js
pusha
xchg
pop
das
xor
dec
retf
mov
mov
sbb
fcom
push
cs
cmp
add
or
push
cwde
lea
add
cmp
sahf
push
add
ds
inc
aas
jo
mov
adc
gs
xor
ja
enter
cwde
add
or
inc
in
je
in
cmp
es
sub
scas
add
sbb
ficom
fsubr
int
sar
std
xor
cwde
imul
jle
mov
xchg
ds
dec
pop
je
cwde
call
cmp
lods
in
cdq
cwde
sbb
es
or
cs
in
cwde
mov
jnp
adc
lods
mov
retf
sbb
jne
jmp
outs
repz
data16
mov
jle
jo
sub
lock
repz
inc
test
inc
aaa
sbb
cwde
jl
stos
mov
cmp
dec
cmps
pop
push
leave
out
xchg
adc
sbb
dec
mov
push
push
jle
dec
jge
arpl
xor
cs
addr16
hlt
dec
jge
(bad)
push
cli
movs
in
ds
mov
bound
sbb
cwde
aad
and
frstor
(bad)
test
xchg
mov
and
imul
int
cli
int3
fbstp
xor
or
popf
das
je
cmp
aam
ret
shr
fstp
daa
or
xchg
mov
(bad)
stos
xor
dec
test
loope
js
dec
mov
inc
adc
mov
sar
mov
xchg
xchg
jg
or
cmp
pop
mov
xlat
mov
cwde
loope
(bad)
mov
out
out
shr
pop
ret
cli
xchg
sbb
xor
(bad)
shl
and
cwde
fucomip
repz
out
loopne
pushf
mov
cwde
rol
inc
ins
sbb
mov
mov
sbb
scas
or
and
sar
shl
in
cwde
push
pop
int
sub
lds
mov
call
lock
jmp
fsubr
sbb
mov
or
cmp
jmp
outs
dec
out
(bad)
sub
jb
(bad)
lds
call
arpl
shl
and
stc
add
add
cwde
lock
out
cwde
fidiv
pop
ret
into
loopne
out
mov
lock
mov
fldenv
cwde
outs
es
cli
cwde
sbb
in
int3
sub
xchg
mov
popf
push
idiv
add
cwde
cmps
aas
cmp
xor
jo
rcr
movs
jmp
pop
adc
test
inc
sub
add
cwde
push
cmps
imul
call
pop
sub
mov
shl
mov
lods
sbb
sbb
ins
cld
les
xchg
outs
popf
jmp
int
add
cwde
movs
retf
xchg
pop
mul
xchg
cmp
lock
or
cmp
movs
mov
xchg
mov
fbstp
sub
push
or
stos
mov
sub
ins
es
mov
pop
dec
jnp
push
cmp
xchg
aad
ins
pusha
mov
shr
scas
and
sbb
dec
aas
leave
xor
sahf
push
mov
jns
push
jg
and
rol
mov
xchg
fisttp
push
test
jl
pop
mov
(bad)
add
aad
sub
lds
and
popf
iret
pop
inc
pop
popa
rcl
shl
jp
mov
mov
mov
push
ss
cmp
inc
xor
cli
leave
(bad)
pop
sbb
mov
or
or
sbb
scas
cwde
cmp
mov
inc
xchg
mov
js
xor
in
push
mov
lahf
push
stos
ret
pop
ss
cmp
cwde
sub
mov
loopne
push
add
cwde
add
and
cwde
hlt
rcr
int
outs
adc
xor
pop
in
adc
leave
add
fst
sbb
inc
jb
mov
dec
out
lea
mov
or
xchg
lahf
mul
mov
aam
out
fisubr
rcl
add
add
jle
pop
push
outs
cwde
ja
lods
mov
stos
mov
xor
loope
cwde
out
bswap
pop
cs
test
xchg
xchg
or
rcl
ficomp
xchg
add
cmp
push
add
push
test
cdq
dec
push
xlat
dec
cdq
bound
xchg
or
test
jo
mov
jmp
adc
jns
data16
mov
les
dec
push
or
mov
in
test
jmp
adc
xlat
and
cmp
loope
lahf
sub
(bad)
fcmovu
cmps
mov
push
daa
dec
pop
xor
cmp
sub
cmp
push
mov
fist
aaa
pop
pop
ret
cwde
pop
and
outs
js
test
loop
cwde
or
adc
in
xchg
mov
mov
and
mov
popf
cmp
nop
fldl2e
push
dec
jo
into
mov
test
(bad)
add
cmp
jecxz
cmp
lock
scas
cwde
cmps
jmp
adc
add
xor
push
es
jns
outs
lea
cwde
fisttp
ins
dec
movs
mov
out
cwde
mul
std
lds
stos
mov
cwde
inc
push
cmp
ret
popf
scas
mov
fldenv
into
pop
pop
push
sbb
or
enter
xchg
test
xchg
shr
inc
cmc
xchg
(bad)
movs
aad
std
addr16
or
imul
lahf
(bad)
rcr
cmp
ss
xor
arpl
dec
rcr
mov
mov
xchg
mov
int
adc
test
mov
xchg
jmp
sub
test
adc
rcl
cmp
jg
call
lods
mov
xchg
test
xchg
ins
xchg
cmps
mov
out
fld
cwde
rep
or
ins
rcr
mov
sbb
gs
cwde
dec
dec
push
outs
jg
or
xchg
cmovge
push
daa
adc
es
or
cwde
inc
sub
xor
mov
and
xchg
adc
sbb
add
xchg
xchg
mov
in
inc
sub
inc
adc
add
popf
int
cmc
cwde
jbe
jmp
cmp
call
sar
enter
out
cmp
sub
js
fs
jnp
mov
xchg
test
arpl
mov
and
xchg
ret
adc
pop
xchg
inc
sbb
push
daa
or
add
pushf
call
or
out
jb
bound
rcl
jmp
fs
sbb
xor
mov
aas
sub
adc
adc
cmp
frstor
je
adc
jne
loope
int3
jle
cwde
jle
xchg
ja
rol
push
shl
stos
push
cmc
sub
jmp
push
adc
push
mov
xchg
pop
cld
shl
loope
ret
movs
jg
adc
jbe
xchg
cmovb
pop
and
repnz
mov
pop
cmc
(bad)
mov
sbb
cmc
add
or
es
jns
xor
dec
lock
out
test
fistp
pop
mov
sahf
call
or
aam
(bad)
loopne
shl
lods
(bad)
sar
or
or
stos
sbb
ds
cdq
pop
dec
and
and
call
xor
imul
pop
inc
mov
inc
xchg
xchg
iret
stos
pop
fcomp
test
daa
aad
pop
adc
mov
fisubr
mov
push
fimul
dec
pusha
dec
xlat
test
mov
add
cld
add
es
pop
clc
outs
xor
xchg
das
cmp
xchg
movs
mov
add
xchg
mov
test
call
mov
nop
xchg
xor
xchg
adc
sbb
shr
(bad)
js
cmc
cwde
fst
test
xor
adc
jmp
cmp
icebp
loope
cwde
mov
mov
jp
in
xchg
iret
push
cmp
ins
fdivr
jo
sar
scas
je
dec
mov
ja
push
and
cmp
lock
pop
pop
arpl
out
call
jle
cwde
pop
imul
and
prefetcht2
pusha
and
push
cwde
std
cmp
xchg
xor
loope
enter
xor
(bad)
call
clc
mov
xchg
test
(bad)
loop
mov
xchg
sbb
stos
sbb
xchg
sub
cli
int3
jg
pop
lahf
pop
and
pop
mov
arpl
in
imul
mov
lds
mov
lahf
(bad)
sub
dec
leave
sbb
inc
ins
fcomp
mov
mov
inc
push
popf
pop
push
jmp
outs
cwde
cmc
retf
sub
clc
(bad)
mov
js
xchg
fcmovne
jmp
gs
popf
inc
jo
je
mov
mov
fcom
and
xchg
lahf
push
cmp
jmp
test
call
push
pop
sbb
aas
xchg
not
mov
xchg
scas
and
pop
jg
xchg
mov
in
imul
icebp
(bad)
cmp
sbb
mov
dec
mov
xchg
mul
inc
cwde
shl
loop
lods
xchg
pop
cdq
cld
out
sar
or
or
rcl
push
test
lods
stos
xchg
mov
sti
inc
sbb
outs
stos
rol
mov
xchg
push
mov
xor
cmp
sahf
xchg
xchg
and
inc
push
iret
rcr
popf
xchg
clc
push
pusha
xchg
cmp
lds
push
sbb
inc
pop
pushf
arpl
mov
jg
cwde
jle
xchg
das
dec
push
leave
adc
mov
pop
xchg
(bad)
int3
push
pop
and
adc
cwde
sbb
loop
fsubr
mov
movs
jmp
call
xchg
mov
adc
cmp
push
out
sbb
aam
jge
call
adc
xor
sar
jmp
push
sub
cmp
ins
sub
leave
data16
mov
rcl
popf
mov
sbb
sub
mov
xor
xor
mov
dec
les
mov
shld
add
cwde
mov
cwde
dec
adc
jo
mov
dec
mov
fsub
xchg
in
pop
lods
test
out
cwde
mov
icebp
fimul
outs
into
xor
call
aaa
sbb
push
int
clc
xchg
loop
push
dec
jecxz
fdivr
push
fstp
cmp
xchg
aaa
add
js
out
leave
out
cmp
mov
push
xor
and
xlat
cwde
in
mov
pop
xor
sahf
mov
ins
mov
nop
call
jg
int3
push
pushf
stos
sub
daa
jl
mov
outs
mov
aam
(bad)
in
dec
cwde
sub
push
and
push
or
cwde
dec
test
add
ret
(bad)
xchg
neg
hlt
enter
jnp
test
inc
cwde
lods
(bad)
push
or
dec
push
and
cmc
lods
xchg
rcl
dec
push
mov
add
clc
push
out
add
xchg
dec
cwde
jb
and
inc
loop
test
cmc
stc
pop
aas
and
cwde
adc
or
daa
leave
jge
es
shr
dec
pop
loopne
aaa
cwde
fisub
(bad)
mov
dec
sub
(bad)
(bad)
cdq
ss
or
xchg
add
mov
sub
adc
cmps
fisttp
lahf
je
fadd
ins
sbb
xchg
pop
into
int3
in
add
mov
mov
loopne
push
and
inc
push
movs
outs
mov
sub
cmp
fstp
dec
dec
xadd
jb
adc
and
jbe
jmp
sub
int3
ret
adc
call
pop
(bad)
or
clc
(bad)
repz
cwde
ficom
mov
pop
div
push
sbb
popf
xor
jns
push
push
or
sub
jo
sub
pop
inc
shl
mov
repz
call
push
cmp
std
(bad)
call
jbe
mov
sub
pushf
cmp
xchg
out
or
sbb
xchg
std
and
shr
in
into
dec
(bad)
out
aam
cwde
aad
mov
addr16
add
daa
xor
mov
int3
jmp
push
pop
pop
mov
call
adc
imul
add
pop
jb
sub
lahf
dec
push
cdq
into
adc
mov
sub
jle
jnp
cmps
stos
push
imul
mov
push
jb
or
imul
mov
mov
mov
outs
outs
jbe
mov
cdq
pop
test
or
pushf
sbb
out
and
rcl
inc
jbe
test
sub
jl
icebp
cmp
ds
or
inc
into
cwde
push
lock
adc
add
push
cs
and
push
and
jg
push
mov
retf
cwde
arpl
test
sbb
inc
and
mov
(bad)
fldcw
pop
and
icebp
cld
jge
add
in
adc
pop
cmps
mov
xchg
fs
sub
cmp
push
aaa
or
mul
mov
das
adc
bound
sahf
or
mov
push
jo
lods
pop
clc
mov
jnp
pop
scas
stos
cmc
jmp
in
push
jo
and
mov
ss
loopne
test
jmp
cwde
adc
sti
sub
outs
js
cwde
aad
xchg
ds
mov
cwde
add
cmps
(bad)
cwde
push
dec
(bad)
or
aaa
add
ficomp
jp
ret
mov
or
loope
scas
sbb
(bad)
lahf
inc
std
or
xchg
adc
jl
xchg
in
je
out
clc
mov
lahf
pop
mov
in
xchg
loopne
add
and
jg
movs
push
and
adc
shl
fcomp
cwde
add
and
(bad)
fdiv
lock
xchg
cmp
and
pop
add
push
ret
aad
add
xchg
ficom
mov
stc
ja
cwde
ror
inc
pop
xchg
cmp
or
xor
aaa
jge
jne
lods
in
lahf
not
stc
cs
xchg
xchg
jg
jns
fst
leave
sbb
sahf
push
xchg
inc
call
jns
mov
ja
daa
aas
ins
stc
push
test
cmp
mov
ins
jle
jl
cwde
or
and
in
cwde
in
ins
cs
sub
add
push
fidiv
xchg
xchg
sbb
(bad)
push
push
sub
stc
or
ds
addr16
sub
rcr
xchg
lahf
xchg
push
arpl
xchg
mov
mov
scas
ins
jno
dec
(bad)
pusha
cwde
jl
neg
push
js
mov
enter
and
fcom
push
in
sbb
lea
nop
mov
call
push
add
inc
fsub
clc
stos
test
cs
ins
aas
sbb
xor
mov
jns
and
movs
adc
or
mov
sbb
push
test
test
mov
mov
sub
and
and
xchg
add
inc
sbb
xor
test
retf
outs
xchg
push
daa
adc
mov
scas
icebp
test
jecxz
xor
jge
retf
pop
sbb
popf
repnz
and
adc
adc
mov
xor
cwde
push
scas
dec
out
and
daa
mov
cwde
bound
lods
retf
mov
dec
imul
ins
fcomp
xor
or
cwde
scas
clc
dec
pusha
dec
or
ret
in
leave
sub
dec
pop
and
mov
mov
mov
pop
mov
xor
lds
popf
test
enter
xor
(bad)
(bad)
loop
mov
cmp
dec
push
pop
cmp
pop
adc
or
or
xor
mov
push
mov
fcom
cdq
and
cmp
imul
lock
mov
mov
les
pop
out
arpl
dec
adc
fcomi
adc
ins
cwde
pushf
inc
mov
mov
xchg
(bad)
pavgw
retf
adc
push
neg
push
cli
add
jb
mov
adc
movs
pop
les
daa
jmp
and
push
or
mov
lods
es
cwde
lahf
aam
mov
imul
xchg
data16
fwait
into
push
shl
xchg
mov
fldcw
mov
cwde
ds
mov
xchg
sbb
jp
scas
mov
mov
mov
call
push
jmp
push
test
into
fdivr
movs
enter
cwde
movs
sbb
xchg
scas
xchg
mov
cs
or
fst
inc
and
add
fsubr
cmp
lea
push
mov
fsub
inc
test
sahf
call
push
add
or
js
adc
fs
mov
mov
or
mov
imul
mov
add
leave
cld
nop
aas
add
push
retf
sub
or
inc
pop
dec
mov
imul
inc
aam
jnp
and
cwde
or
xchg
pop
cmp
rcr
je
jb
cmp
jp
enter
xchg
repnz
jne
mov
pop
les
cmp
add
data16
sbb
adc
cdq
add
cli
ins
or
(bad)
jl
fst
cmp
aad
mov
cs
and
sbb
(bad)
xchg
push
jne
call
jmp
sub
push
pop
sub
dec
cs
adc
and
inc
call
xchg
jp
js
out
shr
cwde
mov
rcl
mov
mov
pushf
je
inc
mov
mov
mov
ins
lahf
jge
aas
popa
jb
mov
inc
cmp
js
push
xor
mov
mov
not
daa
xor
pop
sbb
popf
ss
adc
xchg
and
xor
mov
cmps
push
pop
pop
loopne
xchg
shr
pop
mov
xor
pop
inc
xchg
xchg
pop
pushf
call
into
cwde
pop
dec
push
les
or
adc
test
dec
xlat
cwde
ins
and
xchg
add
inc
loop
xchg
cwde
push
cld
pop
and
sub
mov
rol
mov
ret
jbe
xlat
jo
mul
aaa
sub
pop
sbb
and
shl
inc
imul
mov
fst
mov
clc
int
mov
cmps
je
xor
cdq
jo
cwde
retf
mov
jmpw
mov
mov
or
(bad)
fcmovnu
jmp
ins
xchg
xor
push
and
loop
cmp
mov
mov
outs
mov
scas
sub
xchg
loopne
fnstcw
xor
or
xchg
(bad)
mov
adc
mov
add
push
mov
fs
xor
je
sub
lahf
cld
leave
fcom
cwde
lods
add
add
push
cwde
ds
ret
mov
cwde
cdq
popa
dec
cmp
imul
or
sub
popf
xchg
inc
pusha
cmp
xchg
pop
and
add
dec
push
fwait
js
xor
cwde
sub
pushf
xor
cwde
sbb
mov
cwde
jb
dec
xor
icebp
pop
push
cwde
pop
sbb
or
add
out
cwde
push
xchg
lea
mov
fstp
dec
sbb
add
mov
imul
add
xchg
mov
adc
xchg
pop
mov
jp
arpl
iret
int3
jecxz
inc
stc
cwde
das
cmp
test
ss
pop
mov
mov
out
xchg
xlat
xor
call
ss
(bad)
cmp
mov
pop
mov
ja
pop
cmp
sbb
(bad)
in
xchg
leave
jl
arpl
xchg
inc
imul
xchg
out
loope
add
xchg
in
add
xor
xchg
je
add
cs
je
cmp
call
jl
mov
in
xchg
pop
lea
add
movs
xchg
lods
pop
dec
in
imul
xchg
jno
mov
enter
leave
clc
cld
push
cmp
mov
jno
sub
test
sbb
stos
cwde
mov
lock
add
aas
test
pop
ss
or
fcom
gs
cmp
jns
dec
imul
(bad)
cwde
cmp
xor
and
xchg
and
dec
lods
pop
mov
lea
mov
(bad)
jle
inc
dec
cld
dec
test
xchg
sub
sar
cmp
cwde
pop
and
xchg
jle
mov
cdq
arpl
call
add
sahf
mov
cwde
(bad)
call
xlat
xchg
outs
pop
and
fadd
shl
hlt
fadd
inc
ficomp
fwait
scas
pop
cld
sahf
in
jmp
pop
add
jo
ins
xchg
mov
xor
push
sar
fsin
cmp
scas
xor
lods
mov
popf
pop
push
sbb
and
xor
xchg
push
(bad)
fsubr
aaa
cwde
addr16
fisubr
test
dec
pop
rol
dec
imul
pushf
and
and
xchg
fst
jo
aaa
push
cwde
add
inc
adc
jecxz
sub
inc
xor
jbe
rcr
fdivr
cdq
mov
das
push
mov
lock
std
js
aam
int
hlt
imul
ret
fwait
pop
nop
sub
(bad)
xchg
mov
sar
and
or
adc
sahf
jo
xchg
int3
cwde
pusha
jg
inc
push
xchg
mov
leave
xchg
lock
push
sub
dec
sbb
or
cwde
div
outs
jno
or
stc
add
pop
pop
pop
push
dec
sub
push
sub
aaa
jecxz
cwde
inc
dec
cs
xchg
lods
cmps
cmp
sbb
or
fidiv
js
xchg
or
retf
call
xchg
mov
jmp
js
fwait
mov
shr
mov
push
aas
mov
push
mov
pop
dec
clc
add
(bad)
mov
cli
adc
cwde
dec
pop
mov
fisttp
pusha
jle
out
jne
cwde
ficom
xlat
test
rcr
sbb
sbb
pop
cdq
js
loop
cmp
jmp
fldcw
sbb
jge
dec
sbb
adc
xor
xchg
imul
sar
loope
xchg
add
add
int
mov
jne
iret
sbb
push
cmp
jne
int
jo
in
bnd
xchg
cmp
xchg
xor
pop
clc
out
jmp
cwde
out
jl
xchg
std
rsqrtps
cwde
xor
mov
fsub
xchg
lahf
fistp
dec
test
out
cmp
call
mov
mov
or
loopne
test
jb
dec
sub
mov
or
and
retf
jb
pop
and
in
dec
mov
cmc
call
dec
jne
jecxz
neg
pop
adc
mov
xor
jbe
dec
xchg
mov
inc
pop
popa
mov
or
xor
inc
xchg
pop
ss
xchg
aas
sub
sbb
fsubr
lahf
cdq
scas
pop
adc
xlat
xchg
push
mov
fcomip
inc
int3
lock
adc
pop
imul
cmps
outs
fdiv
mov
out
es
int3
cwde
sbb
xlat
imul
imul
and
movs
push
loopne
jl
mov
lds
lahf
scas
and
(bad)
or
imul
pop
(bad)
std
daa
fiadd
push
dec
sbb
loop
fidiv
jno
std
push
cmps
push
xchg
nop
add
adc
fdivr
retf
add
sub
in
test
mov
ja
push
pop
jg
mov
sub
loop
sbb
adc
outs
js
shl
(bad)
cwde
lods
and
(bad)
sti
xchg
loopne
dec
arpl
jnp
mov
mov
leave
out
in
hlt
pop
dec
sbb
adc
cmc
xchg
(bad)
and
add
cmp
sub
xchg
pop
push
addr16
cmp
xchg
pop
sbb
xchg
ins
sbb
retf
data16
add
rcr
clc
lahf
pop
jmp
cmp
jns
adc
loop
ds
pop
or
addr16
cmps
lea
xchg
aam
into
stos
int
adc
out
adc
addr16
daa
addr16
scas
mov
sub
cwde
pop
xor
mov
shl
clc
(bad)
sub
lea
ja
cwde
and
mov
rcr
mov
jl
xchg
jnp
data16
repz
jp
dec
push
inc
jo
xchg
jmp
rcr
ins
sahf
ficom
imul
cli
or
push
pop
cwde
sub
call
adc
lds
add
dec
xor
loope
ficomp
aaa
imul
mov
inc
arpl
xor
xchg
(bad)
jl
lahf
sub
push
xor
stos
fstp
jge
dec
icebp
push
inc
fdivr
das
shr
leave
adc
aaa
les
shr
xor
mov
dec
fucomp
cmp
int
call
jbe
scas
mov
iret
aam
nop
xchg
push
cld
ffreep
pop
jne
mov
mul
or
and
push
and
imul
out
add
test
shl
aas
pop
adc
repnz
leave
adc
xor
scas
or
aas
pop
mov
sub
mov
pusha
push
pop
cwde
xchg
arpl
in
xchg
xchg
dec
dec
push
imul
cwde
icebp
jmp
and
jb
sbb
mov
lea
mov
pop
iret
jmp
pop
sub
imul
stos
mov
xor
(bad)
mov
push
jmp
iret
loopne
sbb
clc
or
push
sbb
aad
mov
test
pop
lods
mov
mov
into
adc
repz
fisubr
xchg
imul
cwde
or
hlt
add
jnp
push
dec
or
xchg
push
or
dec
sub
mov
sub
rcr
cwde
stos
ret
xchg
xchg
push
daa
sub
cwde
pop
hlt
jg
cli
sar
iret
mov
push
loope
pop
sub
sti
inc
call
mov
mov
cwde
jl
sub
xchg
iret
data16
xchg
mov
(bad)
call
test
fmulp
ds
pushf
lods
mov
xchg
ficom
adc
push
pop
aad
or
cmp
daa
jo
ret
rcr
jp
fcomp
popa
jnp
xchg
jp
cmp
outs
sbb
mov
mov
add
ins
test
movs
or
pop
mov
push
fnstenv
xchg
stos
inc
or
inc
mov
xchg
xor
pusha
xchg
add
clc
adc
lea
cld
mov
mov
xchg
cdq
adc
or
cmps
test
sbb
cmps
pop
idiv
and
xor
jmp
sub
(bad)
(bad)
xchg
fsub
mov
add
pop
es
scas
mov
cwde
in
and
inc
or
pop
adc
adc
xchg
xor
data16
or
in
pop
pushf
popa
push
cwde
fstp
xor
cwde
rdmsr
xor
or
pop
int
xlat
mov
jmp
xchg
call
and
xchg
call
and
mov
pop
dec
push
ins
cwde
jb
xchg
movs
mov
xlat
adc
inc
popf
adc
mov
adc
imul
xchg
jnp
mov
js
cmp
xchg
xchg
xchg
imul
clc
mov
cmp
test
sub
sbb
(bad)
sub
jmp
cwde
nop
int3
popf
and
sbb
arpl
(bad)
xchg
jbe
add
push
call
cwde
xor
pop
cmp
ficom
push
mov
jmp
lock
inc
pop
sbb
xchg
dec
neg
ins
test
(bad)
call
or
and
retf
cwde
adc
push
cmp
clc
and
ret
(bad)
jmp
aaa
adc
popw
rol
cwde
sti
dec
les
jns
and
mov
cmp
mov
push
in
lods
std
cwde
jns
xor
mov
iret
shl
ror
lds
outs
pop
test
push
movs
jg
inc
cwde
cmps
mov
lds
and
mov
add
imul
data16
sti
xchg
inc
ss
xchg
mov
in
in
push
pop
rcr
xchg
repnz
outs
cmps
cmp
cmp
hlt
enter
push
cmps
mov
popf
clc
and
pop
inc
adc
inc
cmp
pushf
cwde
gs
push
add
sbb
movs
out
(bad)
cwde
cmp
mov
in
xchg
jp
cmps
mov
push
xchg
cbw
xchg
mov
cmp
add
inc
in
cld
xor
cwde
push
dec
shr
dec
in
adc
cwde
push
push
dec
(bad)
cwde
shl
jle
jo
jmp
cs
inc
jb
rol
add
mov
mov
enter
adc
pop
cwde
cdq
xor
stos
push
pop
sbb
add
inc
jecxz
mov
or
sub
xor
mov
cwde
xor
xchg
shl
in
push
fdiv
fldcw
jecxz
push
pop
(bad)
or
(bad)
pop
and
icebp
dec
loope
jl
cwde
mov
jmp
add
aaa
outs
jbe
cmps
sub
cwde
xor
ins
dec
adc
call
repnz
stc
clc
adc
cwde
mov
mov
sbb
and
gs
inc
inc
addr16
pop
pop
nop
or
repz
jg
rcl
pop
and
xchg
jecxz
cld
cli
les
pop
jecxz
test
jmp
pop
lock
or
mov
icebp
xor
popf
lahf
movs
mov
enter
sti
enter
mov
inc
xlat
pop
shr
out
cs
in
ret
mov
adc
cwde
jmp
mov
sbb
cmp
add
inc
add
or
gs
popf
xor
mov
adc
add
mov
stos
xor
mov
push
lods
mov
enter
xchg
stos
xchg
out
repz
popa
jl
rol
adc
into
cwde
dec
mov
mov
cwde
outs
jge
stc
fnstcw
lock
cwde
sbb
push
jg
jbe
(bad)
cwde
arpl
adc
sar
xchg
mov
jnp
inc
ret
ss
add
mov
sbb
cwde
mov
push
jno
xchg
gs
addr16
loopne
retf
xlat
add
sahf
add
inc
je
push
sub
out
fisttp
jg
sub
ficomp
adc
fsub
cwde
pop
mov
or
mov
cmp
jp
daa
jp
xor
push
scas
mov
retf
xchg
daa
adc
gs
cmp
sub
push
sub
xlat
popf
mov
pop
pop
outs
mov
mov
jae
jg
mov
adc
inc
jo
cwde
jmp
mov
add
push
add
or
mov
pop
mov
ficomp
xchg
icebp
adc
movs
hlt
mov
push
out
lods
push
or
call
inc
hlt
sbb
stc
ficomp
xchg
loope
adc
sbb
fwait
or
sbb
gs
ja
outs
cwde
or
pop
push
jg
or
cwde
mov
push
rcl
in
rcl
fst
jmp
aam
xchg
mov
push
xchg
out
inc
jo
sbb
not
cwde
fwait
mov
lods
arpl
sbb
cmp
push
sub
pusha
daa
mov
fdivr
add
cwde
mov
std
sti
sbb
sbb
xchg
ds
pop
inc
pop
js
rcl
push
dec
addr16
div
sti
add
jl
out
xchg
imul
into
sar
xchg
sar
push
loope
dec
adc
xchg
sbb
push
dec
call
shl
lock
or
(bad)
or
fucomi
mov
rcl
pop
dec
mov
xchg
xor
sbb
xchg
addr16
retf
push
cmp
js
add
jg
paddusw
jp
dec
aam
xchg
into
lds
jno
push
fld
aam
out
pop
cwde
or
jb
jnp
lahf
and
xchg
sbb
and
sub
mov
lock
cwde
ret
jle
dec
sub
dec
add
or
xchg
inc
push
push
inc
mov
xor
aas
fadd
movs
mov
add
mov
ins
adc
push
xchg
and
push
mov
adc
lahf
enter
out
mov
into
lahf
adc
unpcklps
cdq
dec
cmps
xchg
mov
stos
jmp
jns
(bad)
retf
int3
dec
cwde
pop
dec
sub
inc
jge
add
mov
sbb
and
or
pop
cwde
sub
das
popf
cwde
mov
push
xlat
imul
sub
pop
ret
xchg
jo
jmp
jge
cmp
add
add
pop
(bad)
or
repnz
shr
call
call
pop
ja
sub
loopne
adc
add
jmp
adc
mov
sbb
cld
add
push
int
cmp
imul
mov
mov
mov
int3
jecxz
(bad)
push
xchg
les
je
mov
cwde
scas
pusha
adc
push
call
data16
pop
(bad)
out
push
fs
cwde
sbb
push
dec
adc
dec
cwde
shr
loop
xchg
pop
addr16
movs
mov
std
adc
(bad)
loop
cmp
cmp
xlat
push
add
push
rcl
lock
idiv
mov
fmul
in
cwde
adc
inc
push
and
ins
add
pop
shl
cwde
les
cmp
xchg
out
and
adc
fld1
and
call
ds
imul
ins
and
outs
add
je
xchg
stos
rcr
bound
clc
push
adc
test
and
xor
cdq
(bad)
test
push
sbb
std
scas
outs
aam
mov
sub
jbe
mov
out
jo
cwde
das
outs
and
adc
stos
jp
adc
aad
mov
or
sbb
pushf
jno
push
adc
push
jo
movs
loop
js
cwde
iret
scas
add
mov
fcom
cdq
icebp
out
(bad)
call
mov
mov
shr
icebp
cmp
cmp
xchg
jle
js
cmp
push
sub
pcmpgtb
arpl
add
ins
test
sti
or
sbb
(bad)
popf
jb
(bad)
adc
lods
mov
out
add
mov
adc
in
(bad)
js
adc
outs
shr
inc
xchg
int3
fild
push
cmc
xchg
sub
inc
dec
push
cwde
mov
les
or
aaa
inc
add
jecxz
rol
test
inc
adc
ins
mov
xchg
popa
jl
jecxz
retf
in
out
shl
push
cwde
cmp
mov
sub
stos
sub
dec
jp
push
jl
adc
jmp
ud2
push
sub
add
mov
div
nop
and
stc
sbb
imul
mov
popf
pop
pop
cmp
push
cwde
popf
jle
mov
mov
mov
bound
cwde
mov
cmp
aas
push
sub
cwde
test
or
lock
or
push
cmp
xor
push
jnp
mov
cmps
push
and
push
and
add
cwde
lods
scas
mov
test
cwde
data16
enter
in
cli
mov
pop
lods
gs
sbb
fnsave
popf
pop
sbb
xor
sub
sbb
in
bound
jns
fsub
adc
cmp
out
pop
xor
jl
in
arpl
mov
loop
mov
xchg
adc
test
in
imul
mov
xor
sbb
inc
xchg
mov
mov
push
jo
add
mov
mov
adc
sub
mov
push
mov
lock
dec
fld
jecxz
xor
mov
jae
inc
sbb
call
popf
fs
rcr
dec
pop
jmp
sub
lods
jmp
retf
xchg
fwait
sub
mov
in
cmp
xor
jecxz
sub
in
sub
push
cmp
out
or
mov
sbb
lahf
nop
imul
std
dec
sub
cmp
xchg
icebp
xchg
jo
xchg
sbb
adc
sbb
xor
test
mul
cmp
es
jns
cwde
test
outs
pop
add
fsubr
movs
fnsave
sub
(bad)
(bad)
fwait
xchg
fidivr
int3
loop
cwde
imul
or
mov
js
rol
cwde
in
xlat
mov
call
(bad)
movs
cwde
leave
inc
jmp
arpl
inc
cmp
jae
mov
cmp
clc
mov
outs
pop
movs
adc
mov
xchg
pop
sbb
pop
popa
adc
cmp
rol
sub
pop
icebp
pusha
dec
fs
shl
cmp
popa
dec
pop
cwde
push
jne
mov
rcr
mov
rol
pop
push
ja
loopne
and
jae
mov
hlt
(bad)
cmp
dec
xchg
fidiv
rol
sbb
shl
cwde
add
mov
xchg
xchg
fldenv
xlat
push
mov
mov
dec
xchg
ja
cmps
and
dec
mov
mov
rcr
adc
clc
not
push
mov
mov
mov
(bad)
adc
ins
dec
jle
ret
cmp
icebp
les
leave
jnp
push
scas
outs
mov
cwde
cmp
mov
inc
nop
mov
cmp
scas
sbb
dec
sub
stos
cmp
rcr
loop
mov
(bad)
in
and
shl
or
fldcw
fcomp
(bad)
leave
jo
mov
fcom
sbb
push
enter
ins
cmp
movs
xchg
add
cwde
pop
loop
mov
test
fldcw
xchg
adc
pop
clc
inc
adc
call
fs
xor
lea
xor
cwde
lea
inc
cld
cwde
(bad)
neg
repz
jg
xchg
pop
push
xor
dec
inc
cwde
pushf
mov
stos
mov
mov
scas
sub
push
addr16
mov
cmp
xor
fdivr
shr
cwde
ret
jge
mov
or
loopne
aam
push
out
dec
cmp
rcr
cmc
sbb
push
lahf
std
push
out
xor
sbb
imul
pushf
cld
test
sub
cmp
sub
(bad)
fisubr
popf
(bad)
aad
sub
push
lahf
movs
xor
mov
mov
xchg
enter
and
jle
nop
cwde
pop
test
loope
jmp
daa
xor
lock
cwde
test
lods
push
pop
clc
cwde
test
mov
mov
dec
das
call
pop
test
mov
sbb
sub
clc
mov
ins
sbb
or
xchg
sub
mov
sbb
pusha
nop
xchg
cwde
daa
xchg
cmp
push
aas
add
sub
cwde
pusha
clc
xchg
(bad)
mov
or
mov
jo
mov
movsx
xchg
fs
(bad)
call
cmp
add
sbb
inc
pop
stos
sub
retf
xchg
mov
jns
jmp
push
push
or
cwde
in
aaa
mov
ror
lods
sbb
xlat
bnd
jo
movs
or
loop
fist
sbb
jne
mov
sub
add
call
cwde
dec
jns
movs
in
cmp
mov
sti
xchg
call
push
scas
push
jns
dec
jae
and
pop
cwde
add
mov
adc
js
mov
inc
ret
fcom
cmp
and
jmp
push
ins
xchg
pop
int3
sub
sahf
push
push
ret
fsub
lods
add
fcomp
aas
inc
add
sahf
or
push
xor
in
add
(bad)
push
ja
imul
jl
cwde
jbe
inc
js
(bad)
ficom
xchg
ins
and
rcl
jns
mov
mov
jns
data16
cwde
xchg
dec
cs
inc
add
in
add
jne
rol
aaa
dec
push
jge
ficomp
popf
push
xchg
push
loopne
cmps
es
call
sahf
cmp
jne
fld
clc
(bad)
xor
retf
xchg
clc
sbb
dec
(bad)
mov
sub
add
inc
ss
pushf
aam
retf
cwde
lea
xor
adc
push
pusha
enter
sbb
sub
mov
mov
jmp
xor
push
pop
fnstsw
pop
xchg
ins
jne
xchg
mov
cmp
and
mov
shl
mov
lock
and
fnstcw
cmp
test
pop
cmp
xchg
push
es
push
outs
jl
addr16
xlat
xchg
ja
out
push
aaa
imul
mov
call
sbb
rcl
or
stos
int3
push
fild
inc
lds
jo
xchg
push
pminsw
dec
loope
test
add
inc
lds
pop
cwde
or
std
adc
cmp
cwde
inc
pop
jae
dec
push
push
xchg
outs
jle
mov
aaa
cdq
(bad)
cwde
lahf
(bad)
jo
dec
pop
jmp
cwde
es
jp
cmp
pop
scas
mov
outs
xchg
fcom
shr
add
dec
out
jge
cwde
push
fimul
xchg
pop
mov
sbb
jecxz
pushf
xchg
jne
cmp
lods
add
mov
cwde
xchg
jg
fadd
mov
sbb
movs
mov
mov
dec
das
adc
and
cdq
or
icebp
jbe
mov
rol
rcr
mov
ret
stos
mov
aaa
pop
sbb
jbe
pop
inc
(bad)
pop
stc
jbe
inc
sub
mov
out
mov
mov
push
jp
jge
shl
popa
ja
sub
stos
std
sbb
ds
xor
sbb
and
xchg
cwde
imul
xchg
out
push
ins
dec
xchg
mov
fcom
leave
rcr
xchg
dec
into
fcom
(bad)
push
sub
test
mov
push
fwait
xchg
aad
lds
jbe
sub
push
(bad)
xor
sbb
test
lahf
inc
mov
inc
xor
out
ins
pop
(bad)
push
test
adc
aam
push
sbb
dec
nop
retf
(bad)
test
pop
in
cmp
and
push
sub
cwde
xchg
jg
xchg
or
cwde
sbb
xor
rcr
add
mov
enter
cwde
sbb
xchg
leave
jb
dec
mov
or
xlat
ret
cdq
test
inc
push
inc
push
dec
mov
fwait
out
test
cwde
mov
outs
inc
or
xchg
cli
call
pop
cmp
aas
ss
dec
push
test
imul
ins
dec
nop
jb
xor
repnz
inc
popf
adc
mov
push
add
add
cmp
leave
adc
sar
and
arpl
mov
lea
and
test
sub
xchg
movs
mov
movs
fndisi(8087
mov
jne
push
and
xchg
push
inc
jle
add
mov
adc
xlat
pop
sti
out
add
test
hlt
and
adc
rcl
mov
xor
dec
cwde
movs
shr
loop
dec
push
xchg
xchg
adc
pop
pop
xchg
inc
ror
outs
js
push
xlat
fs
ss
aaa
xchg
pop
in
cwde
adc
or
adc
xchg
leave
cmp
ret
(bad)
clc
pop
stos
jmp
push
pop
add
cwde
cmp
aam
shl
ins
(bad)
fidivr
mov
push
jmp
mov
xor
je
fadd
lahf
call
and
stc
add
pop
fidiv
sub
mov
jl
xchg
pop
push
mov
and
xor
fdivr
mov
fmul
test
add
cwde
xchg
and
jge
enter
fild
sub
xchg
lods
test
sub
je
jle
(bad)
adc
push
mov
iret
cmp
sbb
arpl
test
mov
cwde
pop
pop
cmp
aaa
cwde
mov
mov
or
cmp
sti
shr
sub
push
adc
daa
push
sub
lea
mov
popa
mov
jp
xchg
addr16
pop
add
(bad)
xor
lahf
pop
das
gs
test
rcr
mov
mov
mov
or
rcl
cmp
adc
ins
inc
sbb
mov
int
sub
and
repnz
or
xchg
lahf
sbb
xchg
xchg
add
xor
stos
cwde
jmp
ficom
data16
sti
xchg
outs
ret
lea
out
arpl
pop
daa
sub
mov
xchg
lea
enter
jno
inc
mov
push
retf
mov
add
adc
out
sub
cmp
loopne
lods
shr
test
adc
aam
cwde
fld
xchg
loop
sub
test
enter
lods
cmp
jge
les
lock
sub
enter
iret
(bad)
call
cdq
lahf
test
ret
(bad)
mov
repz
adc
xchg
repz
cwde
or
pop
and
shr
punpckhbw
or
or
dec
outs
sub
xor
and
jmp
push
cwde
popa
fcom
xor
in
push
mov
push
imul
(bad)
adc
jnp
aam
(bad)
pop
sbb
sub
push
cwde
es
push
and
hlt
mov
inc
ret
lahf
aaa
adc
xchg
aas
push
dec
push
test
pop
push
cdq
xchg
inc
aaa
or
xor
mov
psrlw
pop
dec
imul
push
or
inc
cwde
inc
out
scas
cmp
stc
popf
fs
sbb
or
jno
cwde
sub
int
pop
cmp
rcl
push
cli
js
or
arpl
pop
int3
imul
stc
inc
push
pop
xchg
cmp
jae
out
fist
pop
adc
sbb
mov
enter
retf
cwde
aad
mov
fisub
xchg
jb
mov
pop
cwde
shr
outs
push
push
mov
jno
mov
add
adc
jbe
aad
not
movs
push
popf
jb
pusha
ins
dec
cwde
mov
push
lock
in
push
out
xchg
rol
cmp
jp
cwde
mov
or
xchg
adc
imul
jne
push
sbb
int
repz
sbb
and
cwde
frstor
push
and
adc
lahf
lods
adc
into
jmp
leave
dec
ins
es
pop
gs
mov
lahf
inc
cmc
and
shr
xchg
cwde
push
mov
and
cwde
and
jo
fdivr
add
push
and
test
cli
push
push
lods
ret
mov
adc
adc
sbb
stos
mov
mov
das
shl
cmp
push
pop
or
push
pop
jmp
pop
inc
jge
dec
or
aaa
das
icebp
push
je
push
jecxz
cwde
call
gs
and
jp
mov
je
movs
sbb
movs
cmp
sbb
sub
push
jo
cwde
add
cmp
rcl
or
push
sbb
int
mov
lahf
and
inc
cwde
inc
push
cmp
adc
xlat
adc
push
add
out
pop
xchg
int3
test
into
inc
in
not
retf
ror
cmps
inc
add
retf
sbb
(bad)
imul
push
xlat
out
test
mov
push
popf
ficomp
add
dec
out
jnp
jl
adc
jns
imul
push
lahf
xchg
cmps
popa
in
nop
loope
and
xchg
fwait
imul
adc
bound
mov
push
sub
cwde
xor
ret
dec
push
loop
xchg
outs
sub
in
adc
rcr
das
cmp
arpl
adc
into
out
iret
ins
push
fisub
fisubr
cmp
test
jns
pushf
mov
in
cwde
pop
sti
lds
or
cwde
push
pop
xchg
dec
xchg
bound
sub
cwde
iret
hlt
fstp
out
cwde
or
mov
or
jne
cmc
cwde
and
repnz
movs
aad
push
test
call
ret
js
adc
xchg
xchg
adc
bound
inc
or
or
leave
lods
cmp
push
push
xor
cwde
xlat
iret
push
jmp
fs
pop
aas
pusha
cmp
rcl
unpcklps
sub
aas
pop
cmp
sbb
ret
or
lahf
sub
jle
mov
push
xchg
pop
outs
test
repnz
(bad)
jl
mov
dec
or
int
cwde
daa
test
mov
jge
add
cmp
cwde
push
jg
cld
xchg
cmp
retf
jecxz
enter
lds
dec
xchg
cmp
xchg
arpl
adc
mov
mov
imul
imul
fdiv
shl
cli
cwde
inc
xchg
mov
add
xchg
pop
dec
cwde
addr16
retf
mov
lock
xchg
add
xor
xlat
mov
test
not
(bad)
cmp
lahf
jne
cdq
repnz
sbb
mov
test
scas
popf
mov
xchg
add
push
es
js
xor
stos
dec
push
pop
add
mov
jae
leave
mov
inc
cwde
lea
push
cmp
and
mov
(bad)
jecxz
fdiv
ret
inc
int
out
add
xchg
test
movs
adc
leave
xchg
sar
inc
mov
ret
in
test
push
sbb
mov
fcomi
cwde
ds
inc
push
rcl
lods
loope
add
call
and
mov
inc
clc
(bad)
sub
mov
sub
mov
adc
pop
sbb
ret
jne
sbb
sub
mov
push
mov
out
clc
int3
mov
lahf
mov
xor
cmp
and
adc
sti
sub
rcr
adc
leave
sbb
mov
fbld
and
xor
dec
push
and
sahf
call
cwde
jae
jle
ss
sar
lahf
iret
adc
mov
mov
dec
cwde
and
dec
aas
sbb
pop
arpl
fcomp
je
mov
and
cwde
imul
fwait
cwde
outs
dec
not
adc
es
cwde
inc
pop
sbb
add
or
mov
inc
xor
fucom
in
pop
icebp
iret
xchg
gs
pop
(bad)
sbb
sbb
dec
mov
and
dec
jne
push
js
xor
or
(bad)
shr
cwde
sub
dec
dec
dec
call
jne
mov
in
cwde
ins
call
cwde
gs
mov
bound
cwde
les
loopne
ficomp
ins
jg
mov
ret
add
and
mov
loopne
jmp
repz
push
(bad)
stos
ds
push
jae
fwait
outs
jno
aam
out
call
adc
mov
add
cmp
cwde
ins
sbb
test
sbb
cwde
cmp
fild
cwde
out
sbb
shl
test
cli
sbb
xchg
or
(bad)
xor
jns
(bad)
gs
and
enter
mov
cli
int
ds
movs
pop
inc
mov
jmp
push
adc
pop
repnz
push
imul
cmp
adc
cwde
aaa
pop
pop
sub
loope
std
lods
jae
cwde
or
push
ins
mov
shr
xor
and
jle
cwde
out
mov
xchg
or
jne
pop
out
jmp
and
retf
call
shl
test
fwait
dec
in
mov
or
xchg
mov
adc
cld
adc
xchg
and
ins
xchg
push
(bad)
dec
test
jo
push
daa
clc
xlat
pop
popa
push
pushf
push
push
mov
lods
inc
cmp
xlat
push
aam
xchg
imul
test
xchg
cmp
cmp
in
xchg
in
ds
adc
dec
cmp
xchg
xchg
icebp
ret
xor
cwde
test
retf
or
and
cwde
xchg
(bad)
jmp
cwde
mov
rol
jb
in
cwde
(bad)
adc
push
cdq
pop
movs
ret
ins
scas
and
int3
leave
push
test
test
or
lahf
cmp
mov
(bad)
into
lahf
jl
enter
push
aaa
clc
in
cmp
add
into
fistp
push
ins
jno
sub
pop
dec
mov
or
imul
addr16
mov
fdivr
inc
out
retf
sub
xchg
jbe
imul
imul
sbb
fidivr
lock
fwait
sbb
sbb
aaa
(bad)
jne
jg
push
mov
add
int3
push
out
sahf
outs
xor
add
test
xchg
mov
inc
pop
ins
fndisi(8087
retf
sbb
push
popa
mov
fs
dec
arpl
movs
rol
scas
mov
rcr
adc
(bad)
cwde
or
nop
out
sti
enterw
daa
sbb
mov
mov
adc
(bad)
aam
mov
rcl
cli
out
jl
sub
cwde
enter
and
fcomp
sbb
jbe
lods
xchg
or
cmp
jns
xor
in
sub
or
(bad)
cmp
push
jle
cmp
xor
pop
xlat
outs
(bad)
jle
push
cmp
jmp
jg
fnstsw
xchg
add
mov
(bad)
neg
ror
ret
ret
sbb
inc
push
ja
in
fimul
cwde
jg
and
sahf
ss
rcr
nop
popf
popa
movs
out
cwde
and
cwde
mov
sub
ins
bound
push
cmc
sar
addr16
add
cwde
mov
ret
mov
xchg
shl
ss
push
in
sub
scas
mov
pop
es
jl
inc
push
jae
jo
sbb
arpl
cwde
push
jg
mov
fs
repnz
or
fild
and
cmp
pop
out
and
xchg
aam
ficomp
adc
(bad)
xor
pop
xchg
dec
sub
jp
(bad)
push
sahf
lods
xor
mov
loopne
cwde
pop
add
sub
push
push
cmp
mov
aaa
cwde
sti
sub
jl
mov
sub
xchg
xchg
jg
std
das
cs
call
adc
test
pushf
imul
cmp
jne
xor
adc
cwde
mov
scas
cwde
mov
cmp
cwde
mov
cmc
mov
(bad)
pop
adc
cwde
fs
fwait
test
jmp
adc
imul
imul
and
in
test
push
arpl
outs
cwde
and
rcr
pop
pop
adc
ja
adc
xor
in
(bad)
leave
pop
pushf
fist
and
mov
out
iret
xor
cdq
pop
inc
mov
sub
cwde
add
icebp
stos
(bad)
imul
inc
push
inc
rcr
sub
jae
xor
mov
push
sbb
inc
cmp
dec
adc
jns
cmp
retf
sub
cdq
xor
jg
pop
(bad)
cwde
data16
lods
mov
(bad)
cmp
cdq
pop
or
shr
and
pusha
push
das
push
popf
cmp
sar
repz
out
(bad)
rol
adc
ret
pop
jnp
adc
sub
push
sub
mov
(bad)
imul
popf
aad
idiv
js
xchg
jge
xchg
jnp
push
cmp
rcl
add
cmp
pop
pop
daa
add
pop
inc
mov
call
mov
sbb
pop
das
jle
inc
push
dec
push
movntps
pusha
adc
lea
mov
icebp
mov
test
inc
stos
dec
push
pop
lods
cmp
pop
pop
xchg
scas
int
inc
pop
cwde
pop
in
dec
retf
mov
adc
cwde
pop
and
fwait
jl
cmps
jg
fcmovu
push
pop
mov
bound
mov
and
fs
sti
into
push
ds
jecxz
ja
mov
call
push
pop
adc
add
jl
ins
mov
mov
sub
mov
fsub
in
clc
out
addr16
xchg
in
lods
(bad)
loopne
adc
jnp
ficom
cs
cld
fwait
jle
mov
xchg
inc
xchg
fdivr
sub
sbb
ja
mov
cmp
test
xor
sub
adc
xchg
cmp
cld
sbb
adc
aam
or
or
push
adc
cwde
iret
fidiv
dec
out
xchg
sub
xor
cdq
xchg
mov
pop
xchg
pop
aam
or
push
add
jp
push
cmp
mov
gs
loope
pop
push
clc
dec
push
or
pop
jmp
cwde
gs
pop
sub
jg
mov
jae
pusha
xor
shl
das
(bad)
xchg
hlt
or
xchg
daa
out
retf
shr
call
vpaddd
adc
push
jecxz
push
jo
add
cli
cmp
mov
mov
mov
fwait
dec
pop
cs
jns
push
adc
mov
dec
and
stos
push
fidivr
aam
mov
stc
fldenv
jo
mov
cmps
cwde
adc
sub
(bad)
mov
sbb
cwde
iret
lods
mov
dec
jl
(bad)
(bad)
fidivr
leave
sbb
cmps
ss
pop
test
lea
push
stc
ss
inc
jo
pop
mov
test
dec
sub
cmp
ss
jge
jnp
xchg
ror
xchg
dec
(bad)
mov
mov
xchg
push
out
cmp
jb
rol
retf
(bad)
and
loope
bound
xchg
test
inc
xchg
pop
daa
jbe
push
cwde
es
shr
xchg
aad
cmp
xor
cmp
shl
outs
imul
cwde
and
pop
retf
xor
test
shl
and
pop
mov
jnp
popf
ins
mov
cmp
(bad)
loop
xor
and
rol
aad
mov
out
repnz
xchg
mov
fmul
push
ret
cwde
cmp
sti
es
shr
in
test
cwde
xor
not
push
xchg
mov
and
shr
test
cdq
(bad)
xchg
jp
mov
add
repnz
push
jmp
icebp
sub
loopne
cwde
sub
nop
jbe
sbb
cmp
xchg
aas
add
adc
fist
daa
adc
lahf
sar
push
or
push
mov
cmp
fcomp
adc
retf
sbb
adc
aaa
sub
ja
pop
inc
js
inc
pop
cwde
dec
mov
mov
or
pushf
pop
scas
mov
sbb
cdq
imul
push
mov
inc
pop
out
add
test
jp
inc
mov
outs
dec
mov
pop
xchg
gs
or
pop
mov
iret
adc
adc
ins
bound
movs
cs
xchg
sub
push
sub
push
push
mov
sbb
mov
mov
mov
xor
sbb
cwde
mov
xchg
retf
stos
fistp
lock
pop
fmul
iret
lds
imul
rol
repnz
(bad)
nop
xchg
mov
or
cmps
mov
add
mov
rcl
add
repnz
mov
and
imul
sbb
fidivr
ret
fsub
enter
cwde
mov
popa
xchg
pop
xchg
mov
aaa
out
and
bound
clc
mov
mov
pop
jns
cdq
addr16
ins
lea
and
sub
aas
cwde
(bad)
stos
mov
jmp
add
shl
into
mov
dec
shl
adc
cwde
xchg
movs
jnp
arpl
fldlg2
cwde
mov
sbb
cwde
lods
jmp
call
(bad)
mov
cwde
mov
fucomp
push
cmp
push
cwde
dec
sti
shr
mov
add
stos
cdq
aas
adc
jmp
or
sub
jo
jne
test
ds
cwde
std
push
push
xor
mov
fadd
in
cdq
lds
add
sub
sub
sub
dec
dec
cwde
push
jge
test
fs
mov
cdq
lods
fcom
fldcw
sub
xchg
movs
fs
(bad)
jbe
cwde
sahf
es
mul
sbb
or
cmp
lock
pushf
pop
jge
inc
sbb
cwde
ret
xchg
aaa
ret
xor
loop
sbb
icebp
xor
xor
pop
out
jmp
in
dec
push
mov
fcmovb
fcomp
jno
adc
sub
xchg
sub
mov
cmp
fld
and
pop
add
pop
sub
mov
nop
inc
sbb
mov
dec
cwde
aad
outs
mov
mov
jecxz
popf
add
cwde
cmp
sub
mov
shl
hlt
(bad)
outs
dec
add
das
add
mov
push
xchg
popa
ss
lods
dec
fs
and
test
fldcw
ja
loop
jmp
push
ror
cmp
pop
mov
loopne
in
iret
sub
inc
pop
je
mov
mov
add
jnp
loope
xchg
jl
lahf
mov
int
inc
push
sbb
inc
clc
push
test
sbb
sbb
das
adc
xchg
sbb
pop
clc
add
out
into
xor
xor
repnz
neg
mov
sub
rcr
xchg
gs
cld
(bad)
call
sub
dec
call
repz
nop
dec
cmp
shl
(bad)
add
and
(bad)
cs
xchg
jmp
lds
jmp
mov
std
xor
mov
inc
ja
aas
inc
mov
ja
push
jne
pushf
xchg
push
int3
call
pusha
shl
fsubr
dec
or
dec
frstor
rol
inc
adc
(bad)
jg
adc
push
and
xchg
push
mov
imul
int
pop
push
jae
pop
jle
jecxz
gs
cmp
repz
jno
xchg
ins
int
lahf
mov
or
scas
ficom
imul
daa
push
cmp
xchg
xor
das
jg
adc
cwde
es
inc
xor
jmp
or
pop
lock
xchg
or
cmp
add
in
xchg
emms
ins
popf
in
mov
sar
loopne
lds
jo
mov
popa
xchg
adc
sbb
in
pop
fistp
cwde
sbb
mov
loopne
or
loope
xchg
xor
cli
sub
xlat
test
xchg
lahf
push
pop
or
popf
or
retf
out
add
fdivr
lds
xchg
test
ins
mov
adc
mov
mov
out
jl
mov
ffree
daa
lds
or
lods
and
fld
jg
clc
pop
mov
into
std
adc
cmp
repz
pop
cmps
aam
mov
iret
mov
mov
inc
sbb
inc
nop
xchg
xchg
inc
out
xchg
les
(bad)
pushf
pop
sbb
jge
cmp
ret
scas
out
xchg
fmul
cwde
loop
ret
ja
dec
pop
popa
push
xor
je
imul
aaa
push
adc
out
xor
jg
lahf
pop
add
stos
cwde
in
cld
aas
es
add
(bad)
xchg
(bad)
out
addr16
jmp
inc
push
in
dec
call
mov
adc
cwde
clc
dec
adc
mov
push
test
fisub
daa
xor
rol
mov
bound
cdq
xchg
sub
push
and
mov
push
pusha
(bad)
js
shr
xchg
adc
push
and
xchg
mov
clc
data16
fstp
and
imul
loopne
std
fiadd
add
sub
adc
call
dec
ja
shl
mov
ins
xchg
stos
fisttp
lock
push
dec
into
adc
mov
stc
sub
add
retf
je
cmp
cs
out
in
inc
pop
cwde
cmp
pop
jge
mov
sub
outs
dec
popa
mov
cmp
mov
push
mov
sbb
jae
(bad)
pop
cmp
push
xchg
jl
cwde
test
test
sbb
jbe
xchg
jno
arpl
xchg
dec
out
cmps
or
push
imul
pushf
push
push
ins
push
cwde
inc
aad
push
popf
push
jo
outs
cmp
or
inc
ficomp
fcmovnb
mov
fldpi
pop
adc
sbb
and
pop
in
add
adc
jl
leave
mov
xchg
mov
mov
push
retf
jns
pop
(bad)
ror
hlt
enter
iret
das
je
dec
or
ficomp
mov
jb
test
sub
cmc
adc
mov
xchg
cmp
inc
xchg
mov
cwde
rol
dec
mov
js
shr
in
mov
bound
and
cmp
cwde
inc
mov
dec
call
cdq
int
icebp
pop
outs
ret
cdq
sbb
stos
retf
add
test
repz
stos
cs
jbe
dec
ja
and
popf
jbe
pop
add
jo
jae
jg
inc
retf
ret
cmp
mov
mov
ret
pop
sub
dec
mov
fbld
sbb
ins
pushf
sub
mov
arpl
and
push
imul
fdivr
(bad)
xchg
xchg
rol
push
sbb
sub
fsubr
mov
dec
rcl
sbb
lahf
lds
ja
fidiv
dec
push
cwde
sbb
xchg
lea
push
jns
stos
mov
pusha
fisub
cwde
or
mov
adc
mov
shl
cmp
aam
xchg
scas
jg
xor
fnsave
ret
xchg
das
aaa
adc
retf
mov
int
sbb
cmp
rcr
retf
sbb
cwde
ret
pushf
int3
xchg
xchg
data16
in
sbb
cmp
mov
leave
fdivr
xor
(bad)
fidivr
cwde
(bad)
jl
jmp
fsubr
add
dec
mov
xchg
outs
mov
ins
mov
sbb
or
jnp
sub
mov
lock
loopne
iret
push
cld
sub
cmp
ins
fdiv
sub
dec
ret
cmps
aaa
mov
cmp
sub
xchg
sbb
sub
xchg
jmp
cs
in
or
popa
scas
cmp
adc
dec
jne
xchg
xchg
call
sbb
push
cdq
out
jmp
xor
xchg
mov
mov
scas
arpl
int
mov
jno
fild
or
dec
shr
adc
cwde
mov
daa
mov
aas
fsubr
cmp
ins
mov
ja
lea
sbb
xor
dec
pop
dec
inc
mov
mov
loopne
popa
jns
xchg
push
push
sbb
sar
mov
jmp
adc
movs
rcl
mov
xchg
add
jnp
push
sub
xor
aad
sahf
out
pop
jle
movs
sbb
in
xchg
rcl
xor
sbb
cld
out
repz
pop
out
shl
mov
cwde
daa
adc
stos
jnp
icebp
not
scas
sbb
xchg
outs
mov
(bad)
jmp
pop
xor
ror
arpl
dec
loope
jle
cwde
not
inc
mov
mov
test
into
jmp
or
mov
cmp
sbb
idiv
leave
cld
and
sbb
lock
push
cwde
bound
add
pop
call
in
ja
outs
jmp
in
lods
mov
fmul
fadd
dec
sbb
pop
stos
jle
fnstsw
or
stc
jge
fild
or
inc
xchg
int3
and
ds
pop
jnp
fcom
(bad)
pusha
fnsave
and
jmp
ss
jle
and
mov
ins
cwde
push
xchg
imul
dec
call
jns
mov
retf
test
dec
cwde
push
and
mov
mov
test
cwde
mov
push
test
pop
loop
das
sbb
adc
push
xor
inc
cwde
(bad)
push
cmp
xor
aam
sub
lahf
cmps
jne
pop
cwde
popa
inc
push
dec
mov
inc
bound
enter
cwde
adc
jbe
sub
mov
add
fbstp
cmp
fdivr
imul
fcomp
movs
jp
xor
stc
sub
xchg
or
sub
sahf
pop
add
xlat
(bad)
neg
into
fdiv
fdiv
fcmove
iret
cwde
jne
int3
sub
push
lahf
push
pop
ds
adc
es
push
mov
addr16
ins
mov
jae
leave
xchg
jo
or
(bad)
cwde
adc
pop
push
pusha
add
xor
add
loope
out
cmp
sbb
xor
sub
push
dec
rcl
(bad)
mov
movs
push
pop
into
cmps
mov
aas
loopne
pop
pop
sub
leave
add
jne
sub
sbb
push
fild
(bad)
jnp
cmp
jmp
xchg
push
add
mov
sets
popf
addr16
test
or
cwde
ds
in
pushf
enter
push
loop
aaa
in
push
mov
cmp
hlt
cwde
push
test
mov
dec
arpl
loop
scas
jmp
pop
fisttp
or
mov
clc
add
mov
jle
into
and
test
xchg
xor
gs
jae
xchg
jb
test
shr
sbb
mov
mov
pusha
js
xchg
push
cwde
jle
cmp
add
cdq
cmps
shl
jbe
in
adc
sbb
pop
or
lods
mov
(bad)
pop
leave
aad
dec
dec
mov
and
and
or
push
fwait
les
pop
aaa
(bad)
jno
call
fld
mov
dec
es
cmp
xchg
pop
cmp
cmp
cs
xchg
je
add
mov
mov
dec
inc
scas
test
out
sub
mov
dec
sbb
mov
xchg
mov
test
les
sar
pop
pop
xchg
lock
ss
mov
or
pop
inc
add
add
sbb
mov
cmc
xchg
mov
loope
lea
add
loop
(bad)
xor
dec
pop
cwde
push
in
or
and
mov
scas
inc
loope
ja
jecxz
into
pop
adc
pop
pop
inc
push
shl
xor
inc
push
mov
mov
js
pop
cwde
daa
jo
inc
sar
bound
not
(bad)
sar
cmp
cwde
cmp
push
jns
jnp
cwde
aad
push
sub
test
cli
mov
dec
pusha
pop
and
xor
cs
or
jl
pop
and
jno
cmc
xchg
mov
pop
add
retf
cwde
pop
xor
mov
sar
clc
rcl
push
(bad)
loope
ret
adc
cwde
js
mov
loopne
inc
xchg
outs
mov
lock
mov
mov
dec
mov
cmc
cwde
mov
sub
pop
std
mov
adc
ins
xchg
sub
outs
xchg
dec
pop
xor
push
mov
push
cli
ret
(bad)
xor
xchg
cmp
pop
dec
push
clc
or
xor
les
aam
jno
in
loope
call
stc
jp
mov
adc
xchg
and
sub
mov
xchg
mov
inc
jae
mov
(bad)
rep
xor
xor
sbb
xchg
inc
jne
xchg
daa
push
enter
sub
push
jb
mov
jo
pop
mov
test
lods
mov
mov
out
icebp
cmp
cwde
pop
xchg
dec
sub
(bad)
ficomp
xor
loop
popf
or
push
xchg
mov
cs
ret
push
or
repnz
in
pop
cld
ret
data16
xor
dec
dec
movs
cs
stos
add
cwde
xchg
int3
push
mov
inc
xor
cs
loopne
cwde
and
mov
mov
inc
mov
out
pop
scas
out
xor
shl
mov
call
and
fsubr
dec
rcl
in
leave
cwde
or
mov
push
int
jnp
xchg
or
sub
fmul
pop
mov
fist
push
aad
jmp
lea
and
inc
jp
push
jo
inc
pusha
mov
cwde
adc
into
fild
add
cmps
sub
movs
mov
shr
pop
movs
push
push
jecxz
mov
add
add
aaa
jmp
push
jmp
or
(bad)
into
cmp
inc
shr
test
inc
and
(bad)
xchg
jp
xchg
cwde
cmc
lock
ret
or
cwde
sbb
inc
inc
pop
sub
ins
jae
mov
xchg
mov
aaa
push
mov
imul
outs
arpl
lds
nop
retf
js
dec
pop
sbb
icebp
cmc
stc
ret
jecxz
xchg
hlt
shl
call
adc
sbb
jne
lods
pop
cwde
icebp
mov
push
xchg
dec
inc
push
cmp
ret
in
call
jl
push
cmp
sub
repnz
or
dec
fwait
push
push
int3
sub
test
sar
dec
adc
ds
les
inc
push
movs
ret
enter
cwde
adc
xor
jns
mov
add
inc
jne
js
push
loop
cmc
cwde
mov
lods
xchg
xchg
adc
inc
jge
and
jmp
ins
(bad)
cli
jg
xchg
sub
cwde
jno
adc
pop
add
cwde
cdq
dec
out
fadd
clc
xchg
in
mov
gs
dec
stos
cmp
xor
cli
ficomp
sbb
mov
hlt
repnz
cdq
cwde
push
loope
imul
test
sbb
push
int
js
mov
popf
mov
icebp
mov
gs
mov
cld
scas
fisttp
sub
dec
pop
jnp
js
sbb
sub
sbb
mov
les
dec
inc
fsub
shl
push
adc
xlat
pop
sbb
aam
aam
loopne
stos
mov
xchg
cmps
ret
jne
mov
xchg
lock
xchg
in
or
sub
dec
retf
(bad)
neg
sbb
adc
push
or
adc
cmp
jo
xchg
pushf
ja
mov
sub
mov
outs
jb
cdq
dec
adc
or
je
push
pushf
jecxz
cwde
inc
imul
add
inc
call
in
add
mov
push
leave
sbb
adc
pop
fstp
outs
arpl
add
sbb
add
sub
push
cwde
jl
fwait
outs
popf
test
jae
retf
rcr
inc
scas
mov
mov
jno
mov
xchg
cmc
int3
cmp
pop
push
loopne
jp
pop
into
pop
cmp
cwde
inc
xor
push
js
mov
add
add
adc
xchg
pop
sahf
jne
jl
lds
mul
(bad)
ror
gs
push
or
je
dec
repz
cwde
clc
add
aas
mov
push
adc
shr
cld
adc
arpl
mov
jmp
das
pop
mov
retf
loopne
stos
lock
clc
jecxz
sub
xor
mov
adc
jl
les
jg
(bad)
daa
xchg
idiv
jns
add
sub
loop
cwde
sbb
ds
and
sbb
into
out
mov
adc
dec
js
inc
cwde
pop
shl
sbb
ret
mov
xor
ja
adc
lock
je
mov
xchg
jmp
or
mov
nop
in
xchg
jo
sbb
test
push
jg
pushf
mov
nop
cwde
push
rcr
or
loope
mov
mov
pop
mov
push
mov
xor
cmp
adc
sbb
test
out
repnz
push
add
ja
or
rcl
rol
inc
cdq
or
loope
cwde
rcl
adc
inc
sti
enter
mov
pop
outs
jg
pop
repnz
dec
jae
js
loope
call
mov
xor
nop
out
sub
add
dec
pop
icebp
cwde
inc
scas
shl
shr
arpl
lea
cmps
(bad)
and
pop
dec
mov
and
shl
cwde
add
(bad)
popa
inc
out
addr16
mov
movs
fxch
cmp
add
aad
div
cmps
dec
cmp
cwde
jp
jo
(bad)
sar
enter
jns
(bad)
dec
mov
sub
cli
jo
lods
cwde
clc
mov
cwde
pop
cmps
call
fcomp
mov
js
ret
lea
xchg
or
xchg
push
dec
add
cwde
fsub
xchg
dec
mov
mov
pop
jg
call
add
cmp
push
mov
call
std
test
cwde
loop
jne
or
test
dec
cwde
pusha
pop
cmp
jno
jmp
aad
or
call
inc
test
jmp
fcomp
push
fstp
loope
push
sub
pusha
scas
mov
cdq
sub
mov
mov
mov
mov
push
call
push
scas
push
sub
push
xchg
in
jmp
adc
pop
sbb
stc
clc
inc
fsub
pop
hlt
xchg
mov
pop
add
popf
aas
mov
mov
jecxz
aam
xchg
sub
mov
xor
loop
nop
pop
inc
(bad)
cwde
xchg
dec
sbb
(bad)
sub
jmp
(bad)
aam
xor
or
cdq
push
jmp
sub
push
ficomp
or
xchg
and
inc
push
cmp
xor
in
dec
jmp
mov
dec
sub
(bad)
and
mov
dec
pop
mov
inc
sub
addr16
shr
js
xchg
das
push
add
mov
and
mov
push
sub
xchg
icebp
imul
shr
movs
in
pop
aaa
mov
push
cmc
xor
js
cmps
mov
mov
call
(bad)
out
xor
pushf
outs
paddq
xchg
test
mov
enter
ror
(bad)
(bad)
xlat
stos
or
call
repz
call
in
je
inc
test
cmps
sar
lea
(bad)
out
mov
inc
push
dec
movs
mov
pusha
cwde
loop
psadbw
imul
sub
outs
jmp
and
cwde
push
stos
mov
pop
xchg
add
jecxz
cmpps
push
xchg
popf
int
push
fwait
(bad)
cs
inc
mov
push
jg
sti
shl
add
push
test
loop
xchg
ficomp
(bad)
jne
xchg
mov
sub
cmp
inc
sub
add
retf
jb
adc
iret
push
data16
sub
adc
sbb
or
push
scas
pushf
pop
test
(bad)
in
stos
pop
mov
ins
imul
in
std
lahf
sbb
shr
xchg
xchg
xor
dec
fist
pushf
out
push
outs
ss
xchg
mov
xchg
xchg
rcl
xor
jnp
pop
nop
push
and
imul
mov
cwde
lods
(bad)
xlat
add
in
or
sub
pop
imul
leave
in
loop
cli
dec
imul
fimul
xchg
sub
aas
lock
sar
cmp
ds
mov
cwde
adc
jecxz
cmc
clc
fld
fadd
js
mov
fwait
or
sbb
adc
and
(bad)
mov
stc
clc
fsubr
es
mov
mov
outs
xor
xor
repnz
mov
sub
xor
sbb
mov
mov
xchg
xor
repnz
jl
das
pop
out
loopne
ds
pop
cdq
push
and
or
sbb
(bad)
jecxz
cwde
push
mov
xchg
mov
pop
rol
push
cs
mov
cmps
cmp
lods
push
or
jne
(bad)
adc
jno
jbe
call
in
pop
add
sbb
mov
lods
cmp
adc
(bad)
stos
mov
and
cmps
nop
cmp
(bad)
cwde
inc
mov
loop
int
sbb
mov
loope
iret
test
adc
or
cmp
push
mov
xor
loopne
ja
jb
addr16
cwde
popf
popa
mov
cdq
stos
pop
xchg
mov
push
(bad)
fsub
mov
jecxz
mov
cmp
neg
pop
mov
ret
scas
hlt
(bad)
cld
jnp
or
stc
cwde
inc
int
cmps
rol
push
daa
psubsb
add
sbb
cld
arpl
lds
inc
xchg
fisub
xchg
sbb
cwde
lahf
in
lock
scas
lahf
sbb
sub
rcl
popa
or
(bad)
pop
adc
push
dec
add
xchg
ins
xchg
xchg
scas
mov
test
jns
push
or
cwde
test
(bad)
int
popf
fnstenv
dec
nop
rol
rcr
test
mov
stc
cwde
cmp
jb
mov
shl
pop
daa
outs
out
stos
mov
sahf
arpl
iret
push
daa
sub
sub
mov
scas
xchg
lahf
mov
shl
dec
enter
xchg
int3
xor
push
cmp
in
mov
test
pop
and
enter
mov
bound
xor
jns
jnp
push
mov
jmp
jecxz
sub
out
jecxz
mov
in
dec
dec
das
imul
jae
mov
into
sbb
int
clc
cmps
or
pop
pop
test
jne
mov
xor
jae
jge
xchg
adc
fdivr
mov
lods
(bad)
leave
fisub
cwde
and
mov
int3
jns
cld
xchg
retf
dec
mov
fs
div
cwde
cmp
rcl
popf
cld
mov
enter
push
cwde
mov
test
and
mov
neg
inc
pop
pop
ds
sbb
xchg
xchg
gs
out
cmps
pop
add
je
cwde
pop
mov
xchg
rcr
inc
ss
sbb
push
test
inc
cmp
inc
pop
bound
stos
cmps
shl
frstor
js
rcl
imul
or
stos
push
jae
les
popf
pushf
jg
clc
(bad)
adc
sub
jg
leave
call
cld
int3
sbb
test
cwde
inc
sub
inc
das
inc
jp
jb
mov
vmovaps
pop
sub
sub
daa
jle
pop
and
aaa
push
mov
cmp
dec
cwde
or
dec
pop
cmp
push
pop
sbb
in
ja
dec
pushf
pop
and
stos
sbb
das
clc
sbb
add
push
pop
or
into
out
sub
add
icebp
and
mov
xchg
gs
int
test
in
sbb
jno
jo
sub
cwde
sbb
pop
xchg
shr
jo
cwde
(bad)
xor
loop
sti
sbb
out
mov
ret
or
or
cwde
in
mov
cmps
cwde
xor
dec
xchg
leave
cwde
mov
cmps
not
and
inc
bound
cwde
pop
xchg
jl
cwde
cmps
inc
dec
(bad)
xchg
data16
or
jecxz
je
ja
cdq
push
mov
xchg
mov
call
mov
xchg
jle
mov
push
mov
neg
data16
jno
xchg
leave
pop
das
or
test
push
and
lahf
mov
cld
push
sub
sbb
scas
sub
out
jb
cli
lea
push
call
fwait
inc
xchg
popf
test
push
mov
jo
xchg
push
adc
or
cmp
and
add
sbb
in
movs
pop
mov
mov
test
leave
add
fistp
das
icebp
cwde
mov
push
in
in
xor
add
or
sbb
jo
adc
mov
or
sbb
inc
test
cmp
xchg
cld
popf
(bad)
xlat
jne
leave
sbb
xor
inc
sub
jmp
fs
ja
mov
inc
call
push
and
(bad)
xor
push
mov
stos
cwde
cli
xchg
lods
pop
pop
sub
lea
dec
(bad)
pop
xchg
out
cwde
mov
pop
outs
out
push
cwde
mov
mov
push
scas
inc
ds
repz
mov
mov
aad
xor
dec
test
das
mov
add
fimul
cmps
rcr
or
int3
push
xchg
cmc
fpatan
(bad)
std
jmp
adc
pop
sbb
int
push
cwde
or
xor
xchg
test
ror
retf
lods
xlat
xchg
cmps
call
inc
push
fs
mov
add
sbb
icebp
mov
cs
pop
pop
pop
rcl
dec
adc
cli
mov
inc
cwde
in
shl
or
cwde
arpl
fwait
xchg
jg
cwde
leave
mov
int3
hlt
xchg
mov
daa
lods
pop
jns
movs
xchg
out
aaa
nop
outs
cmp
mov
pop
inc
sub
dec
mov
mov
inc
mov
lods
add
xchg
dec
or
cwde
pop
stc
int3
fs
mov
loop
cwde
sbb
pop
stos
dec
call
ret
mov
bound
xchg
xchg
(bad)
sub
xchg
loopne
mov
stc
pop
ret
mov
sbb
popa
jl
cwde
mov
add
arpl
adc
pop
push
pop
outs
xchg
aaa
push
ins
jge
xchg
pop
clc
mov
xchg
add
imul
push
aam
xor
outs
mov
cmps
mov
and
sbb
sbb
cwde
nop
pushf
mov
sti
cmps
mov
cmp
iret
sub
cdq
xchg
ror
or
xlat
test
and
leave
adc
xchg
inc
maxps
pop
imul
mov
fisttp
cwde
out
mov
sub
sub
dec
aam
xchg
push
push
addr16
cmp
sbb
pop
sub
test
jbe
in
sbb
push
push
in
out
inc
xchg
add
xor
js
mov
arpl
bound
mov
pop
cmp
fisubr
cmp
lea
std
jbe
out
leave
imul
test
sar
xchg
mov
fmul
and
add
cwde
mov
in
lods
push
lea
fwait
push
ins
xchg
imul
or
repnz
imul
loopne
cmp
adc
popf
rcr
neg
push
(bad)
cmp
cs
and
push
cmp
mov
js
dec
cmp
sti
inc
je
xchg
xchg
ret
jne
adc
dec
mov
pop
ins
push
adc
or
cwde
inc
mov
xchg
xchg
mov
or
lahf
popa
xchg
jnp
mov
out
icebp
jmp
push
pusha
xchg
sbb
ins
jmp
xchg
jo
jp
cwde
mov
pop
sbb
test
mov
test
pop
fld
cdq
push
or
(bad)
js
call
mov
retf
dec
test
(bad)
sbb
adc
pop
xchg
or
pusha
pushf
mov
xor
ins
xor
pop
iret
sub
jae
leave
mov
cwde
cdq
sbb
icebp
in
or
shl
adc
or
movs
pop
or
jle
jo
and
cwde
sub
or
pop
stos
lahf
inc
inc
jno
mov
shl
popf
mov
(bad)
ins
push
jl
test
mov
dec
mov
je
and
xor
mov
pop
cli
nop
and
cwde
mov
(bad)
xchg
jb
cwde
mov
push
inc
mov
jge
jo
pushf
cwde
lock
jmp
jl
cmp
popa
sub
outs
cwde
and
pushf
mov
(bad)
stos
xchg
jae
mov
sar
push
aam
ror
loopne
pop
xchg
mov
cmp
sub
jg
retf
pushf
mov
push
pop
test
popf
(bad)
dec
sbb
dec
push
xchg
push
xchg
fwait
out
add
mov
loop
jns
call
xchg
stos
mov
clc
movs
push
cmp
in
and
pop
xchg
pop
pop
cwde
lods
das
(bad)
out
outs
js
xchg
jns
fs
(bad)
(bad)
popf
aam
(bad)
faddp
call
sub
xchg
scas
xchg
addr16
xchg
cwde
lods
ins
jmp
jecxz
mov
(bad)
movs
dec
pop
inc
jecxz
push
push
ins
fmul
std
enter
mov
outs
jo
cwde
push
nop
out
aaa
adc
inc
lahf
outs
dec
clc
(bad)
icebp
cwde
ret
cdq
mov
add
mov
into
xor
retf
in
std
imul
mov
aas
sbb
xor
lods
lahf
es
cdq
jbe
jmp
clc
push
cmps
pop
sub
mov
int
xchg
push
out
jnp
xor
addr16
sub
lahf
xchg
popa
test
rcl
mov
pop
mov
dec
out
outs
leave
fdiv
into
out
rcl
mov
repz
cli
pop
lahf
jmp
sbb
loope
xor
popf
cmc
inc
add
lahf
das
retf
sbb
movs
mov
and
jmp
pop
jle
add
push
scas
xchg
sub
pop
xchg
sbb
adc
xchg
clc
adc
mov
push
jle
repnz
repz
ror
push
mov
stos
cs
inc
inc
jne
mov
out
adc
call
test
inc
clc
popa
jp
test
cdq
test
mov
pop
sbb
sbb
xchg
jo
lea
fldcw
cwde
test
stos
xchg
rcl
jmp
xchg
cmps
mov
ffree
mov
xchg
or
popa
xchg
imul
lods
push
push
dec
sbb
jae
jne
sbb
push
pop
retf
cwde
ret
push
int3
ficom
pop
cs
pop
cwde
and
pmullw
clc
mov
cwde
inc
push
out
jo
outs
inc
mov
cmp
cdq
fist
gs
cwde
stc
sub
mov
lods
fcom
hlt
and
cmp
sbb
cs
mov
int
xor
pop
and
dec
out
mov
clc
inc
out
sub
gs
xor
sbb
or
push
leave
xchg
outs
dec
enter
sub
push
mov
popf
test
cmp
fisttp
jo
xchg
cmp
mov
fmul
sets
aas
call
retf
ins
mov
sbb
pop
and
jbe
mov
sbb
popa
jne
xchg
inc
movs
lea
shr
loopne
dec
cmp
pop
mov
pop
sbb
mov
push
lock
cmp
cmp
cwde
xor
mov
pop
jbe
inc
bound
jecxz
jo
int3
or
push
inc
xlat
mov
mov
xchg
cmps
xchg
sub
xchg
scas
loope
xchg
push
aaa
sbb
add
xor
out
add
add
mov
xor
ja
lock
add
repz
cwde
and
jmp
aaa
lods
mov
push
and
add
out
out
adc
mov
inc
test
xchg
loopne
jge
lock
sbb
lds
ins
jbe
jle
or
shl
pop
bswap
add
and
cli
mov
dec
xchg
fdiv
xor
pop
rcl
lods
pop
in
xor
dec
mov
dec
sti
add
push
cdq
cld
add
push
cwde
adc
or
pop
fs
shl
(bad)
dec
aas
mov
arpl
and
push
dec
inc
mov
mov
ins
mov
mov
cwde
outs
cmp
les
clc
leave
data16
cmp
out
mov
jmp
scas
mov
test
cdq
mov
xor
out
std
test
cmc
push
cmps
jge
in
xor
xchg
adc
in
sub
dec
and
xor
(bad)
jecxz
inc
cmps
push
(bad)
fcmovnb
mov
inc
in
fistp
jecxz
setns
or
and
adc
xor
mov
xor
jl
les
sub
jle
rcl
inc
ins
clc
mov
int3
cmp
std
mov
push
mov
add
ss
sub
pop
adc
nop
xchg
lahf
iret
in
movs
dec
push
imul
cwde
ret
lock
clc
mov
cwde
inc
or
pop
adc
mov
xchg
dec
xlat
and
aam
mov
jecxz
in
retf
inc
(bad)
lods
sbb
clc
(bad)
repnz
inc
xchg
cli
cmp
repz
cmp
sbb
pop
das
inc
fs
xchg
imul
jp
ja
add
out
cwde
addr16
bound
mov
outs
fcomp
sti
xchg
test
jge
lahf
adc
cwde
mov
fldcw
jle
cdq
jno
xchg
dec
fs
shl
push
imul
int
cmp
loopne
test
sub
lahf
cdq
ins
test
cmc
(bad)
shr
xchg
jp
mov
cwde
xchg
loop
jns
push
scas
jno
dec
xlat
cwde
cmp
outs
sti
sub
mov
lods
(bad)
fcomp
rcr
cdq
mov
frstor
cwde
das
cli
hlt
call
std
ins
or
dec
pop
dec
imul
cwde
int
inc
xor
cwde
pusha
push
(bad)
sbb
ret
lahf
jbe
mov
pop
fidiv
loope
leave
xchg
add
sbb
or
xchg
inc
push
daa
sbb
mov
fsubr
ds
mov
ins
js
pop
loop
cmp
test
inc
xchg
mov
xchg
cmc
sub
and
stos
daa
and
arpl
dec
add
iret
into
test
in
push
mov
nop
int
aaa
outs
(bad)
frstor
rcr
push
adc
sbb
(bad)
retf
fcmovu
add
mov
into
hlt
imul
fild
adc
sub
xchg
rol
jp
xchg
mov
(bad)
mov
ret
xchg
xor
test
mov
dec
fadd
cmps
(bad)
neg
sar
adc
js
mov
stos
cwde
mov
out
sbb
outs
mov
add
pop
mov
mov
scas
mov
xor
sti
retf
xchg
push
add
fadd
retf
js
scas
cmc
in
and
jae
inc
cmp
add
sbb
xchg
gs
mov
arpl
rcr
or
xchg
jae
mov
out
hlt
jg
in
xchg
pop
es
xchg
adc
cmp
aaa
(bad)
call
fstp
sub
mov
lods
push
data16
and
repz
jecxz
movd
or
fsub
pop
cmc
sub
fcom
mov
push
jl
pop
jecxz
cmp
sbb
mov
jmp
cwde
fstp
mov
ret
xchg
cmp
sbb
clc
and
or
or
iret
stos
test
cwde
lods
add
adc
xor
inc
test
jmp
xchg
xchg
data16
mov
sub
outs
add
clc
(bad)
imul
cwde
or
icebp
add
inc
rdmsr
daa
xor
fiadd
sbb
into
aam
rol
cmc
sar
cwde
xor
add
xchg
cwde
xchg
fs
dec
inc
rcr
retf
inc
sub
nop
lahf
mov
mov
xchg
inc
jl
push
xchg
jl
retf
jbe
push
jl
jmp
push
inc
push
inc
mov
xchg
cwde
xchg
fbld
sub
mov
sbb
jge
pop
mov
stos
cwde
add
out
pop
imul
icebp
push
push
cmp
aam
stos
mov
sbb
xchg
lods
(bad)
cwde
lahf
call
out
sbb
je
cs
(bad)
fist
mov
pop
pop
mov
push
arpl
push
dec
add
jae
mov
and
cmp
cwde
gs
fistp
test
cwde
inc
mov
sbb
sub
xchg
cmp
add
xchg
push
fcmovb
out
retf
repnz
cwde
into
bound
sub
mov
add
stc
repz
repnz
scas
movs
mov
fdivr
xor
stos
dec
aad
add
retf
rcr
(bad)
jecxz
jle
and
xchg
ret
jmp
inc
inc
sbb
stos
(bad)
shl
scas
lock
push
mov
imul
sbb
jecxz
rcr
sbb
xchg
pop
test
xchg
mov
clc
mov
ret
cwde
xor
add
xchg
adc
push
jo
cwde
push
mul
loope
or
and
inc
mov
retf
xor
mov
test
mov
sub
bound
adc
and
je
inc
mov
mov
sub
or
adc
inc
aad
cdq
mov
test
cld
repz
adc
add
fidivr
loope
test
jle
xchg
inc
and
das
cwde
jl
test
scas
mov
xchg
rol
mov
xchg
lea
int3
fstp
ss
inc
xor
pop
cwde
and
hlt
sub
mov
rcr
(bad)
jmp
xor
mov
cwde
inc
pop
inc
pop
lods
adc
add
push
fist
mov
in
cwde
mov
jmp
cmp
sub
repz
jmp
cwde
inc
xor
and
test
dec
push
xor
(bad)
push
cwde
or
push
jl
cwde
push
mov
push
call
icebp
cmp
sub
mov
arpl
fwait
bound
repz
rcl
mov
sbb
frstor
xchg
dec
jnp
mov
push
cmpxchg
mov
stc
fnsave
push
pop
xchg
lods
jne
jl
pop
popa
je
jo
xor
popf
jo
xchg
jg
lea
js
pop
adc
clc
dec
in
icebp
mov
pop
leave
mov
rcl
cwde
repz
and
ins
or
ss
jle
out
xchg
in
retf
adc
inc
jo
stos
cwde
cmc
mov
push
cmp
fld
push
daa
cwde
das
dec
jmp
xor
lahf
jo
and
and
dec
pop
(bad)
fdiv
xor
scas
push
push
mov
in
xor
bound
mov
in
ss
cwde
lods
daa
dec
sbb
cwde
add
sub
ror
call
dec
cwde
inc
push
cmp
cwde
mov
push
add
dec
aaa
hlt
push
mov
cmc
jmp
xchg
data16
jb
imul
cwde
pop
jg
sub
jge
cdq
and
mov
out
test
xchg
cwde
inc
fwait
fs
retf
jecxz
xchg
and
mov
add
clc
fld
cmp
jb
es
mov
xchg
repz
xlat
mov
scas
jb
mov
mov
or
jmp
xchg
sbb
and
push
int3
push
dec
cwde
inc
mov
xor
xlat
cmp
cwde
jnp
inc
mov
mov
lds
dec
inc
ror
je
ss
cwde
je
hlt
out
dec
cmp
ret
mov
stc
push
cwde
or
or
jp
fst
sub
xor
pop
dec
jg
rep
dec
ds
inc
or
xchg
int
add
sbb
aas
std
jnp
lahf
cmp
pushf
pop
and
cmps
cmc
int
jmp
pop
int3
out
xlat
mov
ins
jnp
mov
and
or
mov
mov
scas
mov
fcomp
mov
imul
and
and
daa
or
test
int
addr16
cwde
(bad)
cmps
shr
cwde
aam
cmp
mov
clc
ds
arpl
lahf
(bad)
stos
mov
adc
add
inc
es
inc
xchg
adc
mov
jae
ss
test
mov
sbb
adc
loope
jo
cli
sub
xor
movs
push
and
sbb
jle
mov
cwde
sbb
cwde
call
cmp
xchg
sahf
sub
and
stc
fild
shl
out
fdiv
sbb
ret
pop
aam
sub
jl
fwait
retf
xchg
inc
ror
ds
mov
mov
loope
in
leave
pop
aas
dec
pop
and
aam
xchg
mov
aaa
xor
fldcw
cwde
iret
adc
(bad)
adc
push
jo
mov
out
mov
push
or
fild
push
nop
jmp
lods
fucomip
jl
pop
lods
mov
test
jg
cmp
mov
loopne
leave
or
out
mov
cs
pushf
jns
js
jl
(bad)
xchg
rol
out
dec
pop
inc
push
lahf
push
dec
or
data16
cmps
iret
outs
sub
sub
cdq
sbb
add
sub
xchg
cs
cld
dec
push
jmp
ret
cwde
aad
pop
or
add
(bad)
les
mov
push
sbb
mov
add
push
shl
and
sub
inc
lea
rcr
scas
pop
mov
xor
dec
mov
outs
test
mov
pop
pop
sbb
shr
sub
xchg
push
cmp
mov
pushw
xchg
fisttp
aas
ret
adc
mov
std
cmp
jmp
imul
out
dec
mov
push
fistp
pop
adc
inc
enter
test
dec
out
arpl
and
ficom
push
(bad)
xchg
inc
pop
and
lods
mov
cwde
aam
cmc
mov
mov
sbb
mov
or
pop
cs
dec
sub
push
xchg
jns
(bad)
fistp
mov
lds
(bad)
loope
cwde
in
add
outs
test
fiadd
mov
or
cmp
test
mov
je
mov
xchg
lods
addr16
and
cwde
cmc
(bad)
movs
in
mov
das
mov
mul
sbb
jbe
mov
shl
pop
cwde
xchg
lds
cli
cwde
push
and
imul
cwde
pop
add
fcmovbe
cwde
cmps
fisubr
cwde
sti
mov
sub
in
cs
or
addr16
gs
bound
repz
mov
sbb
sbb
dec
cld
mov
pop
ret
dec
or
hlt
pop
cmps
cwde
movs
mov
and
jle
adc
pop
out
xchg
movs
inc
call
jl
out
imul
xchg
fisubr
in
sar
clc
push
mov
mov
cld
out
cwde
shl
inc
into
and
xchg
mov
stos
mov
xor
call
cmp
mov
retf
push
xor
cmps
xchg
lea
sub
xchg
or
imul
pop
retf
xlat
mov
sub
sub
cmps
mov
(bad)
test
xchg
jle
mov
push
rol
inc
cwde
push
mov
xor
cmp
enter
adc
cmc
lods
xchg
sbb
sbb
into
xchg
jnp
loopne
dec
cwde
xor
jmp
xchg
mov
mov
addr16
sahf
add
xlat
ror
jb
aad
mul
inc
and
fdiv
pusha
xor
ins
mov
cmp
int
imul
pop
cmp
xchg
(bad)
cdq
cwde
bound
pop
push
stos
sbb
adc
cwde
xchg
push
clc
and
push
ds
sub
xchg
push
in
push
add
cmp
mov
or
mov
enter
push
xchg
bound
out
call
or
iret
lods
ins
cwde
jle
sub
inc
or
fwait
xchg
idiv
xchg
xor
rol
cmp
add
mov
cmp
ja
xchg
jp
mov
xchg
or
retf
inc
sub
sub
pop
xchg
imul
push
push
jo
enter
or
sub
lods
xchg
lds
adc
mov
loop
xchg
pop
cmp
mov
push
and
xlat
movs
xor
dec
push
cwde
sub
in
mov
add
lock
xchg
(bad)
mov
clc
pop
out
dec
jl
fdivr
pop
mov
scas
loope
stos
gs
mov
push
pop
cli
adc
mov
cwde
jl
xor
rol
xchg
sub
xchg
xor
scas
sbb
mov
mov
shl
pop
rol
test
xchg
aaa
aas
and
cwde
dec
push
cli
xchg
or
int
mov
cwde
and
mov
mov
jbe
clc
pop
call
(bad)
dec
cwde
pop
mov
stc
add
movs
fnsave
jle
cmp
mov
add
aam
pop
fmul
aad
xchg
iret
fisttp
dec
mov
aad
push
bnd
mov
or
jbe
mov
call
clc
pusha
dec
in
in
loopne
sbb
stc
add
out
bound
sub
popf
inc
jbe
test
xchg
fidiv
or
lahf
push
adc
aaa
sbb
out
sub
sahf
mov
js
or
lods
sti
inc
sbb
sub
xor
pop
cwde
jnp
mov
fst
lods
xchg
xchg
sbb
xchg
xchg
xor
adc
clc
push
inc
aad
pushf
xlat
stos
mov
clc
and
dec
pop
js
aas
cwde
imul
ds
cmps
(bad)
mov
mov
xor
mov
retf
(bad)
xchg
mov
pushf
push
add
push
push
cwde
mov
add
jl
pusha
ja
rcr
sbb
mov
adc
mov
inc
cmps
and
cmp
bound
cmps
xchg
xchg
inc
mov
jmp
sbb
mov
sahf
and
add
test
dec
mov
inc
sub
cwde
aaa
add
xchg
mov
push
ret
je
repz
lahf
inc
mov
xchg
test
enter
cs
and
(bad)
push
loope
cwde
aaa
add
adc
xchg
fcomp
sahf
js
dec
add
sub
mov
mov
pop
sbb
sbb
xchg
and
lods
test
ins
adc
push
mov
js
mov
cmp
lock
jge
xchg
(bad)
call
inc
movs
cwde
out
int
xchg
mov
(bad)
cwde
xchg
addr16
mov
mov
mov
add
je
mov
aad
or
fnstsw
lock
mov
test
cs
xchg
mov
sub
pop
sub
out
or
ds
fcomp
jle
mov
scas
pop
pop
cwde
pop
cld
mov
data16
mov
pop
mov
mov
xchg
cmp
popf
sahf
mov
pushf
bound
(bad)
rcr
scas
fstp
mov
mov
inc
dec
and
and
pop
sub
ret
in
adc
mov
fst
push
push
sar
sub
add
addr16
mov
xchg
pop
rol
and
pop
or
loope
cwde
retf
imul
sbb
(bad)
or
cs
add
hlt
xor
loopne
add
in
aam
push
sbb
mov
iret
rcr
jecxz
mov
cmp
sub
mov
xor
jno
call
xchg
aam
mov
movs
cmp
mov
pop
in
outs
loop
xchg
bound
das
movs
sbb
adc
gs
ins
jge
add
cwde
dec
pop
push
leave
outs
push
fist
xchg
out
inc
jae
mov
mov
cmps
and
push
fnstenv
pop
test
cmp
add
cmp
pop
fdivr
push
out
shl
fsin
ret
and
push
lock
pop
jecxz
or
std
push
push
xor
adc
sbb
mov
mov
adc
cmp
cwde
cmps
imul
mov
bound
mov
pop
scas
neg
mov
sbb
fidiv
cwde
pop
mov
das
inc
xchg
loopne
gs
jbe
cdq
inc
ret
shl
ins
adc
sbb
mov
sbb
test
mov
inc
xchg
adc
fmul
test
xchg
jmp
cmps
mov
imul
ss
aad
cmp
or
cmp
or
mov
(bad)
cwde
mov
jbe
call
adc
pop
adc
cwde
call
adc
mov
xchg
or
and
pop
xchg
pop
and
jne
xchg
ins
xchg
and
cwde
jecxz
lods
shl
fistp
mov
gs
jo
xchg
pop
xchg
xchg
sahf
outs
jb
sbb
sti
or
stos
loop
push
mov
pusha
imul
jecxz
leave
push
mov
pop
imul
ins
pop
scas
add
mov
cmps
ror
mov
mov
jg
js
int
popf
sbb
fcom
xor
mul
clc
push
js
adc
movs
pop
add
sahf
(bad)
mov
cmps
inc
fstp
stc
jo
pop
adc
jne
push
shl
jmp
xlat
sar
xchg
(bad)
outs
mov
sbb
and
xchg
adc
xor
retf
mov
int
ret
sbb
rcl
pop
out
leave
add
xor
mov
cwde
in
es
cmp
and
cli
cmp
mov
push
sbb
xchg
jbe
xchg
int3
rcr
mov
or
sub
outs
cmp
jg
mov
fmulp
test
add
and
test
cmp
pop
stc
leave
sbb
loopne
inc
cwde
movs
mov
retf
sbb
fld
mov
mov
std
adc
or
mov
addr16
pop
jg
mov
push
cmp
das
sbb
inc
paddb
popf
xchg
mov
sbb
rcr
xchg
fmul
fstp
sbb
lods
jne
(bad)
xchg
xor
xchg
ins
mov
xchg
gs
inc
test
out
jns
in
push
xchg
mov
inc
push
sti
mov
xchg
test
loope
cwde
scas
(bad)
fistp
xchg
push
adc
lods
jge
sub
icebp
test
lahf
sub
ret
js
(bad)
cmp
cwde
mov
sub
jg
daa
in
icebp
sbb
adc
add
test
inc
adc
inc
sbb
sbb
rol
out
icebp
gs
popf
cli
js
and
clc
add
or
sbb
inc
or
inc
xor
pop
cmp
inc
sbb
xchg
sub
mov
sbb
imul
mov
ins
push
mov
lds
pop
push
das
sub
ret
sub
dec
cmp
(bad)
fild
push
xchg
fcom
nop
out
retf
cmp
inc
push
or
lods
or
push
pop
sbb
sub
lock
iret
outs
push
pop
mov
jecxz
call
out
add
enter
dec
cwde
xchg
jnp
jl
xchg
inc
cmc
retf
sbb
sub
xor
pop
jne
xchg
repnz
jo
mov
cmc
fild
pop
retf
sbb
les
nop
jns
xor
pop
sbb
inc
in
loop
les
fcom
cdq
mov
fcom
out
std
cmps
sub
int3
mov
and
movs
cwde
mov
aam
(bad)
shr
add
push
and
into
imul
cwde
mov
mov
xchg
in
in
adc
push
loope
jo
and
xchg
je
sbb
mov
sbb
cmp
and
sar
push
jmp
xchg
mov
mov
cwde
add
loopne
mov
mov
cwde
cli
pop
arpl
and
xchg
cmps
pop
pushf
imul
xor
mov
out
adc
mov
mov
popa
rcl
xchg
and
push
xchg
movs
cs
push
std
ins
mov
cwde
or
inc
movs
mov
and
cdq
add
fsubr
push
lahf
cwde
lods
mov
adc
mov
dec
pop
fadd
fwait
and
inc
push
jmp
popa
cmp
inc
add
jbe
aam
cmp
xor
mov
cmp
and
add
xchg
sbb
sub
int
or
mov
cmps
dec
enter
pop
cmc
mov
fidivr
pop
and
or
and
xchg
cmc
call
sbb
cwde
mov
aam
adc
rcl
pop
mov
out
mov
cld
jo
cwde
xor
mov
lahf
pushf
ins
je
cwde
mov
xor
or
xor
inc
mov
jo
aad
mov
retf
call
xor
xchg
imul
and
adc
ficom
xor
and
dec
fadd
(bad)
sbb
jmp
cwde
pop
add
(bad)
faddp
js
(bad)
xchg
xchg
cmps
mov
stos
clc
js
and
inc
fcmovnu
push
test
ss
in
mov
lock
movs
add
mov
sbb
cwde
cdq
aad
retf
clc
out
cmp
sbb
pop
lods
mov
cmp
sahf
dec
push
in
mov
inc
test
push
xor
cmps
sub
pusha
jp
mov
and
scas
int
push
jp
cwde
dec
rcr
fsub
call
aas
jecxz
mov
push
jmp
neg
mov
arpl
and
xlat
xchg
fcomp
js
fisttp
nop
mov
cwde
pop
lds
rol
ja
lods
push
cmp
pusha
sub
cmps
cmp
cdq
leave
xor
stos
fmul
cwde
iret
push
imul
cwde
and
jg
outs
xchg
sahf
mov
paddd
mov
out
xchg
lods
push
ds
or
mov
(bad)
mov
in
cwde
add
add
xchg
mov
pop
mov
sti
aaa
out
jg
xchg
inc
adc
xchg
jno
shl
add
stos
cwde
mov
push
pop
ret
cmps
imul
and
stc
adc
cdq
stc
call
sub
out
cwde
push
in
cmp
iret
cmp
or
shl
cmc
sbb
daa
jmp
xor
mov
xlat
mov
jae
mov
push
movs
ret
loope
jae
jg
leave
clc
movs
adc
jmp
adc
adc
and
scas
dec
cwde
pusha
and
inc
jmp
push
pop
sti
mov
(bad)
cwde
jae
ficomp
lahf
repnz
fidiv
or
inc
and
add
or
loop
sbb
cli
mov
fldcw
pop
lds
mov
fstp
test
popa
fdivr
sub
jno
clc
adc
aad
pop
sahf
fs
cwde
pop
add
sbb
push
retf
mul
mov
add
les
pop
in
hlt
loope
sti
xor
cwde
movs
mov
jne
rcl
jg
retf
arpl
push
xchg
les
dec
sub
stos
mov
arpl
mov
sbb
lods
mov
or
cld
xchg
ret
repnz
jno
add
(bad)
mov
pop
pop
jp
xor
into
ins
jg
sbb
in
into
in
jnp
adc
xor
sbb
add
mov
rol
add
adc
or
imul
xchg
enter
mov
jmp
lahf
add
mov
jge
aam
jmp
loop
xchg
dec
pusha
cmp
call
mov
sub
cwde
adc
in
ficom
jle
aaa
leave
dec
or
mov
push
cdq
(bad)
les
adc
xor
cld
int3
fild
sbb
leave
jle
stos
mov
jo
(bad)
xor
mov
inc
mov
cmp
retf
cwde
sbb
cwde
shl
retf
dec
xchg
pop
push
pop
cwde
fstp
dec
out
sar
adc
xor
cmps
cwde
mov
pushf
mov
adc
push
pop
cwde
xchg
repz
jge
loop
cdq
cwde
jae
jne
popa
add
cmp
nop
or
pop
sahf
jns
test
sbb
xor
popf
std
sbb
mov
fdivr
push
mov
outs
fisubr
loopne
lock
push
out
cwde
ret
cmp
jmp
pop
nop
cmps
je
retf
cmp
gs
movs
mov
fistp
dec
sub
cdq
or
mov
and
jbe
jge
enter
sub
fwait
mov
in
cwde
ja
(bad)
stos
inc
lods
xchg
dec
mov
pusha
sbb
sub
push
js
addr16
sbb
shr
pop
dec
enter
rcl
mov
pop
pop
mov
adc
or
pop
xchg
jle
mov
out
repnz
adc
add
mov
fadd
pop
sbb
mov
scas
ins
cmp
push
cwde
cmp
cmc
les
lahf
stos
xor
dec
xchg
adc
dec
in
add
push
jg
pop
imul
pop
icebp
xchg
out
add
fstp
sub
mov
stos
mov
mov
cwde
dec
pusha
retf
call
cwde
cmp
popf
in
jnp
dec
xchg
sbb
xor
ins
test
pop
(bad)
pushf
aaa
ret
aad
adc
cwde
sub
cmps
(bad)
repz
mov
mov
push
cwde
sub
mov
retf
sbb
sub
enter
ds
xor
int3
jmp
jo
repz
scas
mov
les
cwde
test
sbb
jl
inc
xchg
ret
dec
fisub
pop
shr
adc
fnstsw
jb
retf
aam
hlt
gs
repnz
shl
cwde
ret
xor
cs
movs
push
fwait
mov
scas
(bad)
cwde
jp
cmp
fist
sub
cmps
jecxz
jne
rcl
pop
mov
imul
pop
mov
sub
cmc
int3
jae
dec
int
cwde
mov
inc
dec
sahf
and
mov
mov
ret
loop
xor
xchg
repnz
in
pushf
mov
cmp
pushf
data16
(bad)
call
les
cmp
in
ficomp
(bad)
adc
fs
fist
jns
arpl
pop
mov
add
mov
in
and
enter
cld
mov
mov
mov
pop
xor
frstor
out
cld
enter
cwde
cmps
sub
gs
xchg
retf
outs
jmp
sti
lods
scas
rcl
dec
cdq
dec
iret
fs
pushf
outs
lds
push
fsubr
jb
xchg
cwde
(bad)
stos
aad
scas
pop
add
imul
inc
clc
push
repnz
shl
sub
xor
sub
jmp
dec
stos
(bad)
mov
loopne
loopne
adc
xchg
xor
ins
cwde
push
mov
pop
cmp
in
retf
pop
mov
test
adc
mov
cmp
(bad)
xchg
sub
mov
std
int3
sti
xor
lods
push
int
imul
push
and
fs
xor
inc
pop
mov
ss
es
or
ja
clc
aaa
jo
add
push
lds
mov
lock
or
scas
jl
and
jbe
lods
pop
fimul
mov
mov
xchg
or
adc
mov
xchg
pop
es
push
jo
mov
xchg
sahf
xor
mov
jae
test
test
add
mov
jl
mov
jle
scas
lods
(bad)
je
inc
cwde
xor
jo
loop
jp
xchg
out
pusha
shl
jae
sub
pop
and
mov
stos
mov
(bad)
jmp
cmp
pop
cwde
push
nop
outs
rcr
xor
fcomp
movs
das
enter
inc
jmp
push
popa
jge
test
(bad)
add
movs
retf
(bad)
and
xchg
mov
sub
mov
enter
xchg
inc
xchg
dec
adc
sub
hlt
test
pop
cmp
cwde
sub
add
gs
sub
dec
adc
cmps
xchg
mov
mov
sar
push
bound
popa
cwde
and
ror
sub
lahf
jcxz
sub
jae
fldcw
cwde
fiadd
adc
push
sbb
adc
into
sub
push
xchg
fs
xlat
aas
mov
push
lods
mov
sbb
loopne
call
out
add
inc
sbb
stos
push
sar
js
add
and
movs
leave
outs
bound
xchg
jg
pop
sbb
in
retf
push
call
and
stc
stos
push
fcmovb
dec
idiv
mov
loope
sbb
loopne
rcr
test
xchg
cld
jo
mov
xchg
pop
xor
std
dec
rol
dec
cwde
out
push
pop
sub
adc
out
jg
dec
jno
cwde
mov
sub
inc
js
jnp
int3
mov
jmp
or
hlt
xchg
aaa
adc
mov
les
inc
ja
or
jo
cwde
sub
jle
call
pop
cvtdq2ps
das
cs
js
data16
mov
jecxz
cwde
inc
fmul
mov
jg
cwde
xchg
imul
or
pushf
cmp
les
mov
dec
cs
jg
cdq
mov
test
pop
cwde
dec
sar
mov
ret
add
add
jne
data16
mov
push
push
and
pop
cmp
cwde
pusha
scas
and
adc
push
xchg
mov
(bad)
jl
pop
sbb
jb
mov
jnp
pop
cs
repnz
or
push
push
xchg
stos
jle
pop
addr16
(bad)
pop
pop
jne
pop
xor
adc
mov
jecxz
mov
pop
in
mov
jae
and
or
dec
mov
fisub
scas
adc
add
in
sub
inc
push
push
les
or
imul
test
test
and
mov
ds
mov
push
scas
pop
xchg
repz
add
aaa
xor
scas
push
cdq
jp
movs
mov
and
repz
popa
call
lods
fcom
outs
ja
imul
outs
in
sti
adc
xchg
jo
sub
cdq
fdiv
or
pop
mov
and
call
in
add
mov
test
sbb
push
mov
cwde
dec
pop
mov
sbb
pop
aad
aaa
pop
sbb
cdq
arpl
xchg
sub
(bad)
stos
cwde
cs
ret
sub
popf
mov
sbb
aas
je
clc
enter
push
dec
xchg
and
je
add
jge
imul
out
les
inc
push
xchg
dec
adc
in
mov
mov
adc
js
inc
xchg
push
arpl
jns
test
lods
fsubrp
xchg
add
jg
cmp
adc
adc
js
adc
and
int
rcr
mov
pop
xchg
mov
stc
ja
int3
rol
ins
sbb
xchg
xchg
stos
ins
mov
in
jo
popa
popf
test
sar
es
cwde
xchg
movs
lods
rol
dec
js
mov
mov
xchg
sub
out
xor
mov
mov
daa
adc
popf
mov
cwde
inc
jb
and
mov
retf
and
jnp
test
inc
cwde
out
(bad)
cmps
rcl
in
jmp
pop
cmp
xlat
xor
imul
push
cwde
fcmovnbe
scas
iret
aad
aam
popa
test
outs
mov
adc
jns
add
test
jecxz
adc
retf
sbb
mov
in
jecxz
js
xchg
sbb
jbe
lods
js
retf
inc
xchg
add
pop
cld
into
xchg
outs
stos
cmp
mov
pop
clc
lds
mov
push
es
cwde
and
popa
dec
or
aam
ds
push
ror
cwde
and
inc
sub
dec
mov
pop
pop
mov
cwde
add
dec
inc
repnz
shl
popf
sub
push
sbb
cwde
fist
mov
sar
cli
mov
lahf
das
cmps
push
jno
inc
xchg
and
fldcw
lahf
mov
icebp
cwde
std
clc
test
loop
pop
test
int
jbe
retf
(bad)
mov
dec
push
or
ds
inc
add
dec
js
sub
aaa
xchg
xchg
cdq
pop
jbe
jge
mov
clc
or
sahf
sub
adc
(bad)
shr
cmp
xor
lea
mov
sti
aas
xchg
sbb
xchg
and
xor
stc
enter
dec
mov
mov
pop
push
sub
pop
ret
push
or
mov
mov
(bad)
sbb
cmp
cmps
mov
cwde
sbb
xor
push
sub
push
aas
sub
cwde
add
inc
(bad)
cld
aaa
jle
cmp
cmp
cwde
mov
sub
mov
push
popf
add
ins
pop
inc
pop
fdivr
cwde
inc
or
outs
cmp
xor
cwde
in
je
jno
repz
jecxz
jb
pop
sbb
push
add
cmps
in
sbb
adc
aas
test
cwde
push
enter
rcl
scas
loopne
xor
inc
mov
gs
xchg
jns
jbe
push
xor
mov
pop
jmp
mov
sub
jg
in
sub
fistp
pop
cmp
sub
stos
sbb
pusha
cmp
pop
pop
das
inc
sbb
cwde
imul
adc
test
dec
std
push
xchg
xchg
in
mov
ja
push
test
aad
js
sub
dec
xchg
jge
jg
push
bound
jle
pop
xlat
jp
aad
dec
int3
dec
aas
mov
ins
inc
popf
pop
sub
push
dec
pusha
popa
lds
xchg
or
sbb
push
push
jne
loope
stos
fsub
pop
mov
sub
outs
pop
jno
sub
shr
pusha
xor
(bad)
mov
and
in
pop
out
lock
mov
clc
nop
rcl
jg
mov
into
aam
xchg
xchg
cmps
add
data16
push
jmp
xchg
pusha
push
or
xchg
fmul
clc
inc
fwait
arpl
mov
sub
xchg
test
test
stc
pop
outs
cwde
dec
inc
mov
xchg
add
test
sub
or
pop
mov
xlat
sbb
fldenv
and
clc
jns
test
das
test
(bad)
cmp
imul
xchg
dec
mov
xchg
dec
push
inc
sub
xor
shr
cwde
stc
int3
add
xor
dec
xor
xor
push
ret
(bad)
(bad)
adc
fisubr
rcr
lds
dec
pop
add
mov
sahf
push
mov
mul
or
xchg
jbe
rcl
movs
pop
stos
scas
sub
cmp
(bad)
cli
out
gs
or
shl
loopne
cmp
out
int3
(bad)
ror
fsub
sbb
cwde
inc
clc
mov
sub
jge
cwde
sub
xchg
ins
cdq
arpl
aas
cmp
xchg
jmp
or
sub
dec
arpl
movs
sahf
scas
mov
call
aas
setns
jge
out
mov
push
ror
cmp
fist
mov
inc
push
fcomp
retf
or
pop
idiv
xor
scas
sbb
xchg
add
(bad)
fucomi
aas
cwde
test
push
jg
outs
cmp
addr16
dec
ficom
sbb
xlat
jecxz
ja
or
adc
jle
xor
push
lods
cwde
push
cs
push
lock
cwde
mov
xchg
jb
test
loopne
mov
mov
adc
retf
sub
movs
push
ins
adc
clc
push
xchg
and
(bad)
nop
xchg
cld
cs
(bad)
jmp
(bad)
lea
push
fdivr
xchg
lods
xor
out
dec
ror
pop
adc
lahf
jle
fidiv
stos
or
jg
lahf
repnz
lods
inc
and
(bad)
xchg
add
int3
mov
mov
cwde
pusha
ins
jae
push
test
loopne
in
jo
jmp
sub
cmc
fiadd
iret
out
xchg
xchg
enter
add
pop
daa
imul
in
cwde
mov
inc
dec
cwde
push
push
pop
jge
xor
loope
push
das
or
pop
mov
and
sahf
dec
mov
gs
fcomi
push
cwde
cmp
outs
mov
stc
les
out
sub
cmps
mov
into
cmp
or
dec
cmp
test
ret
stos
xlat
ds
mov
dec
pusha
popf
fsub
(bad)
lods
fnstsw
push
adc
sbb
lock
cwde
jmp
add
inc
xor
adc
jmp
sbb
xchg
jle
sbb
fisub
das
lods
mov
je
xchg
shr
ret
loop
test
cwde
out
lea
jle
stos
jmp
add
ret
std
add
xor
sub
lahf
push
push
or
rcl
mov
sub
sub
fnstenv
or
lahf
sub
pop
and
xchg
jno
and
call
dec
fs
pushf
call
add
retf
daa
test
bound
cdq
xor
mov
movs
add
iret
lods
(bad)
mov
sub
push
in
sub
mov
js
cmc
not
lea
mov
cs
mov
leave
movs
stos
scas
out
bound
sar
(bad)
push
cwde
fcmovu
test
daa
aaa
arpl
test
sub
pop
jae
retf
cwde
test
pusha
sub
leave
(bad)
jo
cdq
stc
enter
mov
les
dec
popa
xchg
(bad)
sahf
push
fldcw
cwde
in
ins
adc
sbb
in
and
dec
cwde
push
dec
das
add
mov
(bad)
dec
sbb
retf
xchg
das
in
sbb
adc
fucomp
jne
ret
cmc
xchg
retf
pop
push
mov
dec
xlat
push
mov
stos
pop
scas
mov
sub
inc
sbb
sar
add
jne
mov
rcr
jle
mov
sahf
jp
(bad)
push
jnp
mov
mov
imul
ret
add
lods
xchg
(bad)
inc
push
idiv
enterw
dec
push
punpckhbw
mov
cld
cwde
inc
cs
(bad)
pop
std
mov
cli
fmul
fbstp
pop
adc
jge
nop
das
xor
push
inc
cwde
mov
inc
test
fdiv
sbb
loop
jmp
mov
jae
out
jbe
mov
add
popf
aam
popa
pop
xchg
jg
cmp
popf
mov
cmp
or
xchg
mov
stc
psrld
and
jmp
push
and
add
aaa
imul
cwde
ja
test
fisub
ret
sub
push
inc
inc
rcr
jae
cmp
sbb
cmp
stos
arpl
sahf
pop
arpl
adc
xor
ja
cwde
jnp
jle
ror
xchg
ss
sbb
dec
mov
xchg
popa
outs
xchg
pop
dec
(bad)
rcr
pop
jmp
push
adc
arpl
loope
or
xchg
xor
xor
cmp
jge
pop
fadd
popa
xchg
sub
or
cwde
and
jmp
cwde
fisubr
aas
jge
test
sub
xlat
jo
shr
mov
sbb
mov
rcr
es
xchg
ret
ret
cdq
jg
popf
push
jno
push
push
xor
push
jmp
cdq
mov
aad
xor
lods
push
jne
cli
jge
pusha
cdq
add
mov
fdivr
pop
in
and
push
aad
mov
retf
push
add
pop
out
sbb
retf
inc
inc
mov
popa
sbb
lods
xor
adc
icebp
push
sbb
dec
xchg
leave
and
inc
or
mov
mov
cwde
out
xor
fst
clc
rcr
aas
mov
sbb
retf
push
adc
jne
imul
cmp
ins
jno
sub
stos
xchg
mov
movs
fisubr
rol
int3
adc
cwde
inc
sar
imul
out
xchg
jg
adc
(bad)
mov
xchg
jo
ins
pop
clc
retf
in
adc
adc
popf
shl
mov
outs
cwde
nop
jns
addr16
gs
push
xchg
daa
bnd
aaa
sbb
test
int
cmps
cwde
mov
imul
mov
test
inc
movs
jmp
enter
int3
cmp
rcr
fcom
out
lahf
jno
xchg
fs
adc
xchg
clc
adc
loope
pushf
sbb
mov
xchg
arpl
scas
jl
jns
jmp
cwde
inc
test
push
pop
lods
shl
sub
mov
js
mov
mov
jbe
cwde
cs
push
mov
lahf
and
fsub
xchg
into
jne
sbb
xor
and
rol
xchg
mov
pop
sbb
(bad)
sbb
mov
leave
icebp
adc
test
add
jmp
mov
lods
jns
clc
and
cwde
adc
push
cmp
pop
xchg
pop
and
das
mov
push
jmp
sub
cwde
pop
cs
fcomp
xchg
mov
adc
lahf
and
outs
jp
cwde
inc
sbb
inc
push
daa
sbb
neg
jne
outs
cmp
cwde
and
imul
pop
pop
sub
push
and
jo
fldenv
jmp
jge
mov
stc
std
int3
adc
or
jns
ds
(bad)
dec
or
call
ja
mov
fdivr
mov
test
push
dec
nop
xlat
repz
pop
idiv
push
mov
test
sbb
out
push
jp
and
sbb
ds
inc
out
sahf
inc
push
adc
dec
sub
sbb
fist
out
jmp
in
mov
ret
jecxz
repz
fs
dec
push
xchg
(bad)
jne
mov
push
das
inc
scas
mov
mov
sbb
and
jnp
mov
call
mov
outs
dec
daa
in
xchg
sbb
pop
push
fdivr
mov
fidiv
sub
sub
pop
jp
dec
push
add
cwde
out
imul
out
cwde
xor
push
jne
fsub
mov
xchg
outs
dec
xchg
call
cmp
mov
pop
mov
sbb
xlat
in
cmp
mov
xor
add
push
loop
loope
out
sbb
push
cwde
sub
xor
cmp
mov
mov
or
sbb
popf
cwd
push
cmp
adc
mov
sbb
push
sbb
lock
mov
cwde
cmp
nop
jmp
cmp
xchg
xchg
cwde
bound
and
adc
sbb
push
and
jb
sbb
mov
pop
mov
jb
jmp
jge
xchg
inc
cwde
fmul
sar
lds
imul
fsub
hlt
jmp
sub
xchg
push
mov
js
xchg
movaps
sti
(bad)
pop
add
(bad)
and
or
arpl
test
fsubr
add
and
cwde
push
in
mov
xor
enter
daa
cwde
adc
enter
(bad)
lahf
lods
shr
xor
cmp
fidiv
push
aam
cwde
mov
das
xor
data16
and
jno
xchg
vpavgw
(bad)
idiv
pop
or
test
sub
jo
adc
imul
add
sahf
js
jns
test
jmp
mov
fstp
xor
xchg
add
jmp
cmp
mov
add
scas
mov
add
mov
push
or
(bad)
(bad)
pusha
xchg
sub
js
jg
mov
lods
mov
sbb
sub
sub
icebp
xor
mov
fcom
or
lock
ds
fmul
popa
js
sub
mov
imul
add
push
mov
sbb
sbb
int3
push
xchg
cli
lds
mov
fdivr
pop
xor
loop
cwde
ror
inc
mov
pop
sets
scas
xchg
xchg
jecxz
cwde
add
mov
aaa
cwde
mov
and
mov
das
cwde
fnstsw
mov
cmp
xchg
fidiv
xor
and
in
rcr
clc
(bad)
hlt
xchg
fldcw
jmp
leave
jne
xor
jp
cwde
mov
sub
xchg
and
or
call
fwait
mov
lahf
xchg
sbb
sbb
data16
ss
and
dec
pop
fs
mov
xchg
mov
xchg
outs
xchg
push
inc
add
mov
mov
add
les
xchg
ficom
sub
ins
sbb
popf
in
mov
mov
jle
call
bound
neg
adc
jb
mov
sbb
mov
cmps
mov
jb
cdq
pop
cwde
pop
cmps
mov
xchg
mov
popa
jbe
jns
ss
cwde
fimul
sub
leave
sbb
cwde
retf
jne
xchg
shl
xchg
mov
fmul
dec
dec
xchg
fcomi
push
push
dec
inc
inc
inc
xor
je
ins
aad
sar
mov
or
jo
inc
mov
ret
xchg
lea
xchg
jl
loope
xchg
pushf
pop
sub
or
gs
iret
out
loop
cwde
aam
mov
(bad)
jg
pop
cwde
xlat
inc
sbb
adc
inc
push
loop
cwde
enter
mov
mov
retf
sbb
adc
pusha
out
out
ret
stc
mov
push
dec
leave
ja
jp
pushf
mov
cmps
cwde
add
popa
addr16
out
mov
stos
xchg
shr
xchg
cmps
in
xor
out
dec
add
add
jp
or
mov
xchg
outs
xor
(bad)
and
sbb
xchg
add
mov
adc
xchg
out
dec
push
and
inc
imul
mov
pusha
sbb
call
xchg
hlt
xchg
push
cmp
and
sub
cwde
dec
jp
mov
push
imul
retf
adc
and
ins
adc
out
cwde
xchg
xchg
push
mov
enter
mov
lock
xchg
push
cs
pop
ja
xor
scas
cwde
mov
fnstsw
in
popf
jno
inc
pusha
mov
xor
adc
cmps
cmp
clc
in
pop
test
fcomp
ficom
lods
enter
xor
adc
push
(bad)
jns
cmp
nop
popf
mov
mov
js
push
popf
adc
imul
(bad)
sbb
push
leave
lea
and
xchg
lock
jns
(bad)
adc
aas
mov
enter
les
cmps
sbb
cmp
or
ds
ret
or
cdq
sub
cmc
sbb
bound
mov
cwde
les
pushw
and
or
pop
pop
cwde
out
in
repnz
ins
lea
dec
mov
pop
mov
jno
dec
pop
push
push
sub
hlt
bound
cwde
out
xchg
jge
add
push
or
mov
mov
dec
imul
fidiv
imul
push
test
xor
cs
cmp
movs
fst
pop
lds
ret
add
retf
iret
repnz
into
stos
jecxz
sub
cwde
test
in
push
cwde
and
jb
popa
sahf
stos
fsubr
neg
push
inc
xchg
rcr
or
fstp
inc
inc
ss
push
stos
cmp
xchg
dec
ret
sbb
adc
in
clc
push
ret
jno
pop
push
mov
sub
jae
and
aas
sub
push
adc
adc
loope
sub
(bad)
cli
(bad)
sbb
rol
popf
fadd
dec
enter
sub
js
repz
mov
inc
pop
nop
add
xchg
cmp
test
xchg
jle
fcomp
popf
jnp
dec
xor
mov
sub
sbb
lahf
pop
mov
stos
cwde
mov
test
retf
inc
inc
aad
xor
cwde
cmp
sbb
push
inc
xor
sti
les
sbb
sub
scas
pop
lods
cwde
mov
(bad)
sbb
push
adc
loop
cmp
sti
ret
pop
lock
push
cwde
and
imul
clc
and
jae
sbb
sub
out
push
call
jo
mov
ds
and
jge
cdq
jecxz
mov
das
xor
call
mov
lods
sbb
xchg
xchg
cwde
sub
into
mov
adc
les
popf
mov
xor
lea
lahf
lahf
bound
(bad)
rcl
pop
in
pop
push
or
xchg
fld
jmp
cs
push
cwde
(bad)
mov
scas
xor
sub
xchg
lds
into
dec
leave
mov
xchg
popa
fstp
in
cwde
dec
call
or
mov
sbb
ds
outs
xchg
cwde
push
out
in
sti
sbb
cwde
or
inc
xchg
cli
pop
mov
push
loop
stos
(bad)
cwde
dec
fwait
mov
in
mov
(bad)
pop
add
mov
pop
mov
jmp
ficom
outs
xchg
inc
ds
mov
arpl
mov
mov
mov
mov
(bad)
iret
jecxz
xchg
add
sar
clc
addr16
dec
push
mov
dec
lea
imul
mov
add
dec
sub
jecxz
add
or
mov
lea
or
inc
mov
sbb
sbb
clc
(bad)
mov
enter
mov
addr16
mov
call
pop
stos
or
xchg
dec
out
je
jb
pop
xchg
mov
push
mov
popf
movs
mov
pop
sub
pop
xchg
pop
imul
test
or
sbb
pop
fprem1
clc
pop
ret
pop
jne
lods
xor
sbb
in
push
sub
sbb
outs
xchg
lods
xor
shr
pusha
mov
out
aad
sbb
addr16
mov
inc
pop
aas
jo
cwde
fs
lods
or
or
push
lahf
xchg
pop
test
mov
jne
jbe
imul
mov
mov
out
outs
jg
jle
mov
mov
sahf
or
add
xor
inc
cwde
mov
and
in
shr
sbb
xchg
out
adc
in
mov
mov
push
(bad)
mov
push
sub
test
xor
cwde
push
lds
jmp
jne
inc
jno
and
mov
fidivr
inc
gs
mov
retf
jmp
retf
add
cmp
inc
xchg
mov
ins
inc
mov
iret
loop
xchg
int
jno
push
loop
xlat
clc
or
cwde
push
sub
lock
scas
ins
pushf
sbb
das
mov
test
lods
icebp
cmp
mov
mov
mov
les
adc
(bad)
test
mov
test
and
loope
clc
cmp
mov
je
jo
sub
sub
pop
cmp
enterw
dec
push
xchg
mov
cwde
outs
es
add
pop
add
cwde
cli
sbb
xor
xchg
sub
jns
dec
sub
fdiv
jae
rcr
cwde
push
xchg
push
clc
adc
loopne
mov
ret
mov
(bad)
movs
inc
cli
sbb
mov
sbb
xor
outs
inc
adc
aaa
add
push
xchg
(bad)
dec
xchg
push
add
dec
ffreep
jecxz
dec
push
mov
jecxz
xchg
call
and
xchg
and
ins
push
fcom
(bad)
pop
xchg
fnsave
fs
jns
adc
cmps
cmc
lds
jmp
dec
xchg
jg
pushf
push
repnz
add
cs
lea
push
pop
dec
cwde
rcl
xchg
ins
xor
das
fwait
dec
cwde
cmp
outs
jle
shr
test
scas
inc
sub
or
push
fsub
mov
xchg
outs
jno
fmul
inc
cmp
mov
(bad)
fnsave
mov
push
cmp
inc
and
retf
shl
test
xchg
or
fldenv
ins
push
enter
inc
mov
es
dec
and
pop
ja
sar
dec
(bad)
aas
mov
xchg
cld
shr
xchg
dec
pop
leave
mov
xchg
pop
xor
adc
inc
pop
cwde
pushf
jmp
mov
out
sbb
mov
not
fld
pop
frstor
sbb
mov
push
jb
cwde
pop
dec
iret
xchg
data16
jbe
cwde
xchg
cmp
cmps
push
ja
and
dec
pushf
dec
sbb
loop
sbb
out
push
push
cdq
imul
aad
repnz
and
in
inc
sbb
mov
push
sbb
adc
mov
dec
sbb
or
cwde
popf
pop
ins
or
cmp
cwde
jg
xchg
outs
xchg
add
xchg
sbb
fbld
aad
cwde
in
pop
jge
dec
pusha
xchg
mov
aas
cli
sub
xchg
cdq
jl
out
(bad)
call
sbb
jge
mov
xchg
cwde
ret
xor
popf
push
jne
xchg
or
dec
popf
outs
xchg
xchg
xchg
scas
addr16
clc
into
add
push
dec
adc
jns
xchg
sahf
dec
lea
cmp
std
fldcw
mov
jnp
mov
ds
in
cwde
jb
xor
(bad)
cmc
sub
adc
test
lahf
lea
or
jl
inc
sbb
js
fcomp
or
je
jle
cdq
popf
and
dec
pop
(bad)
xchg
jecxz
pop
cwde
mov
xlat
adc
fdiv
mov
xchg
dec
pop
mov
xor
cwde
retf
shr
add
dec
push
dec
xchg
test
aad
shl
add
mov
popf
push
(bad)
aam
cwde
cmp
inc
adc
mov
aaa
loope
and
or
or
ret
adc
xchg
cmp
jle
sub
imul
sub
rcl
retf
stc
test
jmp
stos
pop
xchg
and
pop
cmps
in
jo
push
mov
sbb
pop
xchg
xor
pop
in
pop
int3
fcom
lock
rcl
int
jo
retf
inc
adc
inc
mov
push
js
push
sbb
xchg
shl
mov
dec
adc
jno
mov
repnz
pop
cmp
cmp
dec
cmp
inc
lds
shl
mov
and
mov
into
test
cwde
test
add
test
int3
cld
xchg
cmp
pop
enter
mov
pop
pushf
jmp
mov
lods
aad
jle
fld
cmp
xchg
fdivr
leave
mov
and
mov
add
mov
add
pusha
cmps
dec
jo
sbb
cvtps2pd
inc
popa
sbb
pop
ja
cwde
mov
add
pop
mov
push
or
pop
push
sub
push
and
mov
aaa
cwde
arpl
mov
js
xchg
int
test
push
inc
sub
movs
scas
xchg
xor
inc
shr
(bad)
fisubr
shl
stc
test
add
mov
and
or
sbb
shl
lahf
mov
or
ret
cdq
mov
cmp
addr16
mov
cwde
ins
sub
mov
xor
icebp
sbb
push
mov
jecxz
add
mov
cwde
(bad)
lea
mov
cwde
xor
retf
test
cdq
pop
cmp
cmp
or
xchg
jae
cmp
push
mov
fdiv
aas
push
fiadd
js
data16
mov
jle
jo
or
fdivr
(bad)
xor
es
push
cwde
jp
sbb
push
call
jno
xchg
mov
lods
add
lahf
jmp
retf
mov
xchg
dec
add
sub
test
xchg
fs
cwde
add
loopne
cwde
cs
mov
mov
sbb
xchg
aad
daa
xchg
out
push
dec
jae
jbe
and
loop
inc
icebp
test
sub
jl
cld
sub
mov
adc
out
sbb
cmp
sbb
outs
fmul
lea
xchg
pop
jp
imul
jmp
and
add
or
test
adc
cmp
je
pop
cmps
inc
loope
inc
cmp
cdq
sub
(bad)
in
cwde
icebp
add
fwait
shl
inc
add
stos
mov
cmp
(bad)
mov
mov
and
pop
sub
mov
pop
(bad)
loope
xchg
inc
sbb
mov
inc
ret
cwde
out
xchg
clc
jmp
xchg
xor
xor
jmp
popf
pusha
sub
pusha
hlt
outs
or
xor
out
mov
inc
sub
inc
push
clc
popf
int3
cmps
mov
cwde
nop
pop
mov
mov
push
sbb
xor
addr16
je
mov
dec
sbb
add
js
push
jmp
cmp
sbb
fnsave
daa
cmp
ror
test
fcomp
push
xor
test
xchg
popf
dec
pop
cs
cmp
clc
sub
cwde
sbb
pop
xchg
mov
test
fiadd
cmc
xor
enter
fcom
ds
cwde
call
dec
mov
sahf
pop
cld
aad
and
sub
push
in
(bad)
sbb
adc
xor
shl
mov
mov
fsubr
cmc
mov
dec
pop
sbb
out
int
fcom
sbb
cwde
dec
aam
outs
push
mov
cli
mov
addr16
(bad)
(bad)
lods
aam
sbb
push
int
popf
xor
jmp
cmp
cdq
pusha
and
pop
and
cwde
ror
lods
xor
or
push
push
inc
mov
gs
loop
mov
ds
jge
inc
mov
inc
pop
push
cs
das
mov
xor
jnp
popa
popf
inc
jns
adc
sub
jecxz
cwde
xor
mov
fsubp
lahf
int3
add
cmp
sbb
xchg
imul
jp
cmp
jne
mov
dec
div
sti
into
not
add
in
jmp
push
dec
clc
fcom
push
mov
cmp
mov
mov
ret
sub
sbb
or
pop
daa
or
and
mov
test
ins
data16
outs
add
(bad)
mov
pop
add
test
mov
mov
xor
loop
push
xlat
sbb
xchg
cdq
fst
cmp
jmp
js
mov
cwde
out
cs
loope
fiadd
sbb
or
jp
iret
int
nop
xchg
test
movs
pop
pop
jl
ins
daa
inc
cwde
ins
cmp
cmp
and
idiv
push
pop
aas
mov
mov
sub
and
cdq
fisttp
ins
inc
imul
arpl
inc
xor
mov
jle
mov
and
inc
imul
out
cwde
cli
aaa
in
shl
sti
retf
fisubr
sbb
das
mov
mov
into
mov
test
sub
inc
xchg
lahf
int3
cmp
in
aam
in
push
repnz
push
scas
clc
mov
test
inc
mov
icebp
push
(bad)
xlat
mov
add
sub
sbb
pop
jecxz
or
or
out
test
mov
mov
mov
push
je
jge
cmp
jmp
popf
cwde
and
std
nop
pop
sub
xchg
(bad)
sub
pop
test
dec
cmps
repz
jo
mov
in
jne
rcr
lods
add
addr16
lds
lods
leave
jmp
xchg
nop
outs
mov
push
icebp
jns
int3
jp
pop
mov
mov
push
cwde
sti
dec
cmc
cmp
icebp
(bad)
(bad)
sbb
xor
fwait
scas
clc
pop
call
jae
add
add
ins
lea
or
das
fst
ins
aas
neg
sbb
es
or
std
retw
pop
adc
pop
sub
cld
mov
cmps
mov
stc
sub
cwde
bound
adc
adc
call
dec
sbb
popf
mov
xor
(bad)
xchg
mov
push
std
and
repnz
pop
imul
movs
pop
lods
cld
ins
ret
pop
xchg
retf
out
xor
je
jmp
js
jle
cwde
mov
lock
imul
adc
popf
outs
jno
sub
popf
jg
inc
lock
int
cmp
xchg
add
or
repz
(bad)
jle
cwde
push
fstp
and
cwde
pop
mov
xchg
fs
loopne
cmp
push
jmp
cmps
dec
cdq
xchg
je
fdiv
pop
call
add
fld
ror
aam
jmp
and
jno
test
test
call
adc
cmc
jnp
pop
cwde
and
xor
mov
loope
add
xchg
push
call
mov
nop
or
ds
adc
cmp
cli
fs
mov
test
sbb
pop
push
ret
retf
xchg
(bad)
jmp
add
retf
fcomp
enter
push
push
bnd
fisub
fsub
jnp
popf
out
popa
out
enter
xchg
pop
mov
inc
pop
cwde
cmp
clc
fisub
dec
cbw
imul
xor
daa
outs
dec
mov
mov
cmps
(bad)
sbb
xor
and
xchg
jae
dec
arpl
pop
sub
movs
push
push
in
std
cdq
add
stos
dec
loope
pop
xchg
pop
int3
(bad)
rol
test
add
movs
jne
test
sahf
shl
mov
xchg
inc
sub
test
cs
xchg
cmp
inc
or
xchg
mov
cmp
adc
cwde
ins
dec
mov
repnz
test
jmp
loope
jne
adc
adc
mov
in
cli
je
sar
and
test
mov
iret
cwde
dec
(bad)
jge
pop
jg
xchg
cwde
jne
and
mov
pop
pop
pop
or
cwde
sub
pusha
repz
scas
push
ror
push
pop
push
dec
sar
fs
fs
cwde
addr16
xor
scas
adc
mov
sbb
dec
xchg
cld
in
retf
push
mov
jecxz
fdivp
jl
sar
cwde
fwait
mov
ins
dec
cwde
loope
repnz
dec
loop
cmp
js
pop
add
push
xchg
es
in
cld
dec
dec
pop
xchg
pcmpeqb
xchg
pop
ret
sbb
fcmovnbe
sub
sub
rol
bound
inc
mov
adc
fnstsw
lods
dec
cwde
xor
dec
push
add
xchg
pop
pusha
(bad)
fld
sub
mov
pop
sbb
out
sbb
jnp
cwde
scas
jns
mov
adc
ret
adc
jns
lock
cwde
lea
cli
add
cmp
rcl
push
mov
xlat
push
fsubr
cmp
cmp
mov
leave
pop
xor
adc
pop
jp
call
(bad)
popf
push
pop
cmp
imul
imul
test
sbb
cwde
push
es
icebp
xchg
inc
cwde
out
popf
das
inc
mov
fdivr
ins
dec
push
and
(bad)
xchg
inc
jns
aad
push
and
or
jmp
ror
cwde
adc
aaa
sub
fnsave
cmp
mov
xchg
fidiv
arpl
cdq
mov
push
sub
shr
push
out
loope
xchg
out
xchg
xchg
push
clc
test
xor
push
xchg
or
popa
inc
or
sbb
fidivr
rcr
out
mov
xchg
mov
fsub
or
jecxz
rol
cmp
cwde
dec
cmovp
fidivr
mov
ins
mov
icebp
mov
sub
sbb
sbb
mov
loope
stc
lods
jae
cwde
pop
sub
mov
push
xchg
xchg
pop
jle
and
fs
cwde
xchg
clc
leave
sbb
cwde
stos
jl
or
mov
loopne
lock
sub
cwde
aad
xor
bound
cdq
cmp
dec
pop
jge
clc
cmp
test
jecxz
cwde
faddp
call
fbstp
add
add
push
xor
pop
sub
mov
fst
push
loopne
sub
xchg
sahf
jb
and
jg
sahf
rcr
dec
jnp
add
in
xchg
rcr
scas
jnp
dec
cwde
pop
outs
jb
adc
sub
xor
icebp
xchg
sbb
dec
push
inc
cwde
call
icebp
cmp
pushf
xchg
fs
fnstcw
neg
sub
test
pusha
cmp
inc
sbb
push
popa
dec
xchg
stos
mov
inc
idiv
addr16
mov
pop
add
popf
pop
loope
pop
and
sbb
xor
pop
sahf
scas
xor
or
fwait
pop
adc
xchg
mov
pop
(bad)
inc
in
xchg
push
pushf
bound
pop
lds
in
repz
cwde
mov
test
or
mul
xor
and
js
mov
jo
cmps
sbb
(bad)
push
and
ret
mov
dec
test
fs
into
and
in
cwde
fisub
push
jmp
jo
sub
(bad)
not
imul
das
shl
outs
test
xchg
(bad)
mov
neg
xchg
in
add
push
loopne
add
dec
push
cmp
sbb
(bad)
cmp
sbb
jo
mov
pop
push
cwde
dec
jae
xor
cwde
mov
pushf
jge
(bad)
aam
test
repz
cmp
cmps
rcr
neg
mov
sub
inc
xchg
ins
jno
shl
mov
aam
in
in
lods
scas
ficomp
sub
jo
scas
pop
add
mov
jno
xchg
mov
sub
les
dec
cmp
xchg
fdivr
cwde
cdq
jae
stc
push
mov
sbb
in
pop
jmp
out
xchg
int
addr16
out
jo
sahf
loopne
add
mov
pushf
int3
mov
stc
inc
cwde
jl
add
adc
retf
dec
int
cmp
(bad)
xchg
lods
or
shr
adc
push
inc
clc
cmp
hlt
jl
fnstcw
xchg
pop
int
xor
lods
loopne
inc
scas
ins
or
lahf
jae
fstp
mov
cmp
retf
and
das
mov
cwde
dec
mov
xchg
jo
movs
outs
cwde
(bad)
mov
sub
xchg
(bad)
call
in
sub
fst
fdivrp
fdivr
out
(bad)
jl
pop
lock
cwde
xchg
in
sbb
xor
xor
xlat
stc
adc
mov
jge
xchg
out
jne
mov
idiv
mov
test
imul
call
dec
stos
push
loope
ds
test
mov
xchg
cs
(bad)
ror
push
xchg
aas
add
loopne
ins
jecxz
mov
or
mov
jno
jb
call
sbb
mov
lock
fisubr
xor
mov
(bad)
mov
shl
loop
lds
dec
je
mov
int3
sbb
xchg
stc
rcl
(bad)
mov
xor
mov
or
cdq
xchg
mov
jne
sbb
xchg
ret
popf
mov
mov
sbb
or
in
jns
lods
inc
mov
sbb
adc
sub
adc
and
xor
xchg
clc
sar
xchg
jns
pop
js
test
xchg
push
(bad)
fcomp
sub
popf
sbb
mov
out
in
mov
cwde
js
lock
mov
xlat
dec
inc
fimul
bound
cdq
adc
push
jmp
push
sbb
or
push
jmp
push
xchg
repnz
icebp
adc
push
pop
clc
sar
pop
fs
dec
pushf
popf
xchg
or
addr16
mov
mov
jmp
sbb
push
cli
xor
adc
fwait
cwde
movs
mov
push
in
jp
loop
mov
pop
fnstcw
lods
mov
xchg
pop
cmp
lock
ret
adc
sbb
xchg
popf
or
jae
xor
push
pop
cwde
test
jne
iret
js
cwde
adc
dec
icebp
or
enter
popa
call
outs
pop
xchg
adc
mov
fldcw
push
jae
mov
push
push
mov
lahf
inc
pop
cdq
retf
pop
test
jmp
sbb
xchg
pop
shl
dec
mov
retf
pushf
das
xchg
xor
mov
cmp
push
out
fxch
rol
call
iret
pop
(bad)
popf
jmp
clc
adc
test
sti
and
jecxz
jne
ins
or
rcl
fidiv
shl
push
pop
aas
test
pushf
jo
popf
shl
frstor
rcr
lods
call
or
pusha
nop
sbb
aas
mov
gs
loope
xor
stos
xor
js
pop
fldcw
push
xchg
mov
mov
jnp
popa
in
cmp
dec
pop
loopne
dec
clc
call
test
aas
cld
xor
outs
xchg
lahf
mov
mov
pop
xchg
sub
inc
sub
sbb
pop
out
mov
fs
fstp
(bad)
cmps
pop
ficomp
in
xchg
add
cmp
scas
fcom
xchg
repnz
test
add
xor
mov
xchg
sub
fs
jo
lea
mov
iret
xchg
xor
dec
jge
mov
js
out
retf
int
adc
or
ds
cwde
popa
sbb
aad
stos
cwde
mov
pop
jno
retf
cmp
mov
inc
pop
sbb
pop
fiadd
adc
sub
outs
dec
cwde
dec
jecxz
ficom
dec
xchg
and
cli
les
xor
cld
adc
out
loop
daa
call
scas
cmps
xchg
mov
jne
xor
popf
xor
das
push
repz
jo
sub
retf
fdivp
jb
jbe
fwait
cwde
inc
jnp
test
shl
jo
cwde
xor
xlat
mov
xchg
mov
push
sbb
neg
test
push
add
and
shl
mov
in
repnz
or
mov
fsub
adc
add
cwde
pushf
push
push
push
pusha
dec
dec
jle
cwde
mov
dec
retf
add
add
xchg
movs
mov
call
sbb
jecxz
jmp
fimul
jo
mov
loope
cmp
fisubr
test
inc
nop
fiadd
jl
ja
mov
fs
mov
cmc
pop
sub
jl
cwde
pop
lock
out
icebp
(bad)
cwde
mov
jle
pusha
cwde
cmp
adc
push
cld
out
scas
sbb
cmp
or
push
movs
mov
mov
icebp
inc
xchg
jp
push
and
sahf
jnp
pop
ins
push
js
mov
repz
push
lods
jl
mov
mov
cs
xchg
xor
mov
addr16
mov
mov
bound
dec
mov
push
xlat
adc
iret
aad
add
or
cwde
into
lods
in
idiv
sbb
push
xchg
sub
ins
je
push
inc
movs
cli
(bad)
rcl
xchg
loope
xchg
jmp
cmp
imul
retf
int3
xor
dec
push
pop
and
sub
stos
mov
push
andnps
cwde
mov
mov
test
lods
call
out
inc
dec
push
cmp
cwde
call
add
mov
push
icebp
inc
in
loope
test
pop
test
pusha
cwde
xor
mov
mov
sbb
cmp
pusha
clc
add
cwde
sahf
sbb
push
xchg
(bad)
cmp
std
sbb
arpl
xchg
movs
mov
je
out
or
cmps
pop
and
lahf
jnp
cmp
jo
int
aad
leave
or
inc
mov
sub
mov
add
inc
jmp
fs
jl
pushf
mov
ins
xchg
pop
imul
pop
js
stos
nop
cld
or
sbb
pushf
pushf
add
and
pop
and
sub
adc
add
xor
add
clc
xchg
out
mov
pop
jae
scas
scas
cmp
test
mov
jmp
pop
sbb
or
dec
call
mov
test
or
mov
lahf
dec
sub
cwde
inc
std
adc
mov
xchg
shl
or
ficomp
shr
sub
or
outs
aam
ins
scas
imul
push
test
mov
dec
call
add
cmp
mov
mov
enter
and
cdq
add
pushf
inc
jnp
mov
arpl
mov
imul
ins
dec
scas
mov
or
jecxz
scas
pushf
jnp
pop
nop
retf
xchg
fsubr
popa
cwde
xor
cmp
out
or
cwde
dec
mov
pop
adc
mov
gs
inc
cmp
stc
add
rcl
in
lods
popa
jo
je
ins
movs
xchg
sbb
data16
xchg
mov
(bad)
xchg
sbb
(bad)
cli
iret
xchg
(bad)
sahf
shl
into
cmc
dec
dec
adc
cwde
add
mov
int3
xchg
dec
mov
xchg
rcr
adc
sbb
mov
hlt
lock
cwde
jmp
ss
pop
sub
dec
mov
lahf
pop
aam
je
cmp
sbb
cld
xor
sub
sub
cmp
jmp
call
adc
cs
adc
adc
add
xor
sub
and
xchg
test
mov
or
push
in
ds
sbb
and
inc
imul
cmps
fld
push
jle
lea
sub
out
pop
cwde
ds
test
fistp
in
push
imul
div
mov
pop
adc
mov
pop
cwde
sub
add
cmp
cwde
pop
mov
outs
bound
fwait
sbb
mov
cli
mov
or
dec
call
mov
retf
mov
adc
mov
or
jge
inc
add
sbb
cmp
cli
lods
pop
lock
jne
clc
cld
adc
xlat
int
or
cwde
call
sub
out
sub
or
pop
sub
cld
outs
adc
cwde
sub
nop
inc
sub
xchg
pop
scas
bound
in
mov
inc
movs
jmp
pop
loop
bnd
aam
sbb
leave
fbld
mov
mov
(bad)
clc
je
fistp
push
inc
mov
leavew
mov
xor
inc
cmc
jne
scas
popf
pop
xor
scas
cmp
cwde
sub
lahf
test
les
dec
push
sbb
jg
(bad)
or
fdivr
retf
or
leave
pop
ins
xlat
lock
cmc
test
cdq
loopne
jge
mov
movs
sbb
xchg
fs
sahf
gs
xchg
fwait
stc
add
cwde
sub
mov
or
or
test
jg
popa
jmp
xchg
dec
adc
daa
call
icebp
xchg
pushf
jg
inc
cmc
cmp
addr16
mov
mov
(bad)
(bad)
aam
retf
add
sbb
sbb
cmp
imul
push
cdq
inc
sub
movs
push
cwde
fcomp
loope
aas
ror
lods
mov
sub
mov
xchg
test
out
mov
mov
inc
cwde
xor
sar
and
jge
sbb
ds
loop
push
xor
push
cmp
xchg
inc
stos
mov
add
call
popf
jmp
fisttp
xchg
mov
data16
(bad)
leave
cwde
gs
pop
xchg
arpl
mov
push
pop
xchg
jne
mov
out
cmp
stos
pusha
push
push
popf
sbb
adc
cs
nop
or
xor
add
mov
mov
or
dec
pop
and
mov
jle
pop
cmp
push
cwde
sub
inc
prefetcht1
ins
dec
cwde
clc
cmp
xor
daa
sbb
clc
jo
movs
push
cmps
jno
not
test
mov
or
dec
lahf
ja
cmps
or
xchg
les
(bad)
popf
fimul
sbb
test
or
push
jle
retf
shr
xchg
jb
mov
mov
xchg
xor
test
fist
cmc
fmul
les
sub
pop
mov
mov
sbb
ins
dec
pop
cld
mov
sub
enter
loop
adc
push
aas
data16
lahf
sahf
ins
(bad)
addr16
call
push
or
test
cmp
push
push
sti
ret
mov
pop
lods
add
cmps
dec
das
jne
sbb
xchg
push
inc
cwde
cmp
push
jnp
jg
mov
pop
sbb
icebp
cwde
add
sub
idiv
lock
and
sub
and
rcr
dec
lods
sub
push
mov
out
dec
xchg
xor
inc
xchg
mov
ss
mov
out
das
inc
xchg
pop
(bad)
adc
xchg
push
push
sbb
mov
test
sub
xchg
icebp
cwde
test
mov
in
imul
pop
in
scas
sbb
and
cwde
int3
pop
es
sub
cwde
mov
lods
aaa
push
mov
mov
xor
cmp
mov
push
dec
and
pusha
mov
and
mov
pop
outs
and
and
sub
rcr
or
mov
sbb
inc
enter
(bad)
jmp
xlat
inc
sar
adc
in
lods
int3
(bad)
enter
pop
sbb
inc
sub
xchg
jge
sbb
cmp
adc
mov
test
sbb
nop
fwait
jmp
ins
mov
fstp
enter
rcl
mov
mov
cwde
adc
pop
push
and
lock
and
aad
or
push
mov
inc
call
test
mov
fdivr
cwde
scas
and
pop
in
mov
jne
inc
mov
xchg
not
out
sbb
xchg
scas
xchg
mov
fmulp
aam
mov
retf
pop
es
pusha
cmp
data16
outs
adc
push
lods
loop
stos
inc
or
in
cmp
mov
ins
xchg
xchg
push
call
call
inc
arpl
out
or
ss
add
xchg
cwde
dec
test
cmp
mov
ret
adc
adc
cmc
push
lahf
push
ins
jbe
arpl
into
cwde
and
cdq
fs
je
jno
jl
xchg
test
nop
xchg
cmp
xchg
dec
dec
push
jae
jge
stos
js
mov
mov
pop
int3
dec
or
les
cli
xchg
push
lea
push
inc
xchg
es
cld
xchg
mov
adc
dec
pop
mov
and
xchg
in
leave
or
lahf
dec
xor
mov
(bad)
shl
jle
call
pop
lahf
imul
xchg
cmp
add
mov
cmp
popa
push
pop
and
clc
pop
(bad)
or
(bad)
and
adc
ins
push
jo
daa
bound
push
mov
xlat
pop
jo
pop
xor
fwait
cdq
sbb
test
adc
icebp
repz
add
xchg
aas
pushf
mov
test
jb
add
nop
xchg
jmp
mov
loope
js
popa
xchg
shl
into
ds
sbb
xor
adc
call
push
or
xor
inc
fs
(bad)
(bad)
cwde
jae
mov
cmp
sbb
call
dec
retf
mov
aaa
in
or
xchg
out
lods
in
add
jmp
pop
mov
jns
adc
sub
and
imul
add
(bad)
pop
push
or
es
inc
cmp
in
xchg
hlt
jge
adc
sbb
jmp
add
add
loopne
jp
cs
fmul
mov
inc
inc
xor
outs
in
add
add
jo
mov
clc
push
jg
jecxz
xchg
jge
pop
sbb
pop
push
mov
rcl
fld
cmp
cwde
mov
jnp
loop
mov
sbb
cmc
mov
dec
daa
pop
pushf
adc
or
pop
in
sbb
sbb
inc
mul
cmp
jo
mov
jno
addr16
rcl
jg
xchg
repz
fnstcw
sbb
or
pushf
cdq
out
adc
daa
imul
fmul
in
lahf
sti
stc
retf
les
aas
ret
cli
bound
popf
jg
addr16
xchg
push
aaa
or
mov
mov
call
cdq
adc
pushf
(bad)
repnz
sub
sub
dec
loopne
xchg
data16
cld
rcl
dec
dec
ins
xlat
mov
mov
(bad)
cmp
cwde
adc
pop
iret
in
int3
and
push
inc
xchg
shr
jns
xor
and
xchg
sar
push
cmp
jl
push
cwde
pusha
xor
in
cmc
enter
jle
xchg
jp
xchg
mul
cmp
loopne
adc
xchg
lods
mov
movs
ja
addr16
lods
dec
push
(bad)
sub
aad
push
sub
jbe
dec
push
mov
inc
cwde
stos
retf
push
xchg
xchg
retf
aad
js
push
cmps
imul
ds
ret
nop
fisubr
not
cmp
pop
sub
sbb
movs
test
and
cwde
cmp
dec
out
cmp
cmp
mov
fild
sbb
push
xor
or
sub
push
jecxz
fisub
clc
leave
jo
cwde
add
cmps
xor
gs
in
fstp
cmps
pop
loopne
cwde
test
xor
and
and
cwde
jl
pop
or
lds
adc
cmp
cwde
xchg
in
jle
push
cwde
daa
xor
ss
push
ds
jle
cwde
add
(bad)
je
fist
mov
cwde
push
loop
sub
jae
mov
outs
lahf
(bad)
lea
leave
pop
jl
mov
and
fcomp
ffree
cmp
cwde
adc
or
inc
xchg
fs
push
test
loop
xchg
mov
ins
fsub
clc
scas
std
out
and
mov
sbb
clc
rcr
outs
ins
and
mov
pushf
mov
repz
push
cld
jae
mov
cwde
push
pop
and
jne
add
xchg
out
xchg
cmp
mov
jmp
cmp
jns
sbb
jg
into
sbb
xor
cwde
mov
sub
xchg
int3
mov
out
inc
daa
xchg
aas
jo
xchg
push
dec
test
mov
xchg
jae
leave
adc
xor
retf
aam
es
pop
jbe
inc
ja
jo
in
cwde
xor
lds
mov
inc
push
daa
sbb
mov
lods
outs
stos
dec
pop
ins
jge
dec
add
out
inc
sub
cmp
dec
pop
outs
scas
jnp
cwde
ret
dec
arpl
cwde
test
lods
rol
out
clc
inc
in
sbb
in
clc
fistp
fbld
and
pop
inc
fadd
cld
fiadd
mov
in
jmp
xchg
inc
pop
cwde
and
ss
ror
fadd
cwde
cwde
mov
std
test
jp
inc
dec
xchg
inc
int
xchg
fsub
lahf
ja
xchg
or
xchg
out
loopne
cmp
movs
ret
imul
ficomp
scas
sbb
and
lea
xchg
inc
sub
dec
fwait
jne
xchg
or
mov
retf
inc
sbb
loope
ss
dec
hlt
fld
jge
fistp
and
cmp
loop
adc
pop
ret
push
cmp
lods
mov
cwde
cmps
sar
out
xchg
jmp
push
test
call
xchg
mov
shl
into
shr
cmp
fnstcw
sbb
mov
cmp
jbe
scas
xchg
pushf
gs
mov
dec
sub
mov
sbb
(bad)
cli
ret
rcl
in
sbb
in
sub
push
icebp
fnstsw
ret
in
pop
cwde
int3
pop
movs
cli
or
mov
cwde
adc
call
lock
fidivr
mov
jmp
mov
test
mov
mov
rcl
inc
xchg
test
pop
je
xchg
lock
shl
cwde
rcl
mov
rcl
sbb
pop
push
jbe
retf
call
pop
adc
jae
add
mov
in
xchg
xchg
dec
stos
call
stc
adc
int3
retf
imul
shr
aam
mov
stos
(bad)
xlat
scas
scas
out
lahf
ret
sti
jmp
arpl
inc
or
test
dec
fmul
paddusw
mov
xlat
neg
fild
mov
xchg
pop
cdq
cwde
retf
mov
jge
rcr
movs
(bad)
jae
xchg
mov
jb
repnz
adc
enter
cwde
loop
cmp
leave
loope
or
repnz
repz
inc
xor
bound
xchg
inc
sub
fucomi
js
setge
cwde
das
cmp
scas
xor
cwde
push
cmps
pop
inc
aas
cmp
movs
retf
shr
cwde
mov
(bad)
jnp
jg
fs
cld
addr16
clc
pop
scas
mov
and
sub
xor
xchg
sub
fdivr
cs
enter
imul
sub
jmp
xchg
mov
mov
and
pop
cmp
push
test
fsub
fst
or
xor
xor
cwde
xchg
out
out
jl
pop
jnp
loop
enter
inc
imul
pop
jg
stos
imul
cld
xchg
cmp
dec
add
test
js
xor
inc
into
xlat
ret
lods
repz
fcmovnbe
loopne
cwde
neg
and
pop
xor
push
loopne
test
out
mov
mov
adc
mov
popf
pop
fmul
and
cwde
pop
int3
in
sar
lods
call
add
leave
ja
stos
mov
dec
sub
xchg
xor
cld
xchg
ret
cs
dec
popf
mov
je
cwde
addr16
rcr
movs
(bad)
mov
test
enter
ds
sub
sahf
ja
jno
jmp
lock
push
aad
into
pop
and
clc
mov
movs
mov
ins
repnz
sbb
data16
add
(bad)
pop
shl
enter
iret
adc
sbb
neg
repz
jmp
movs
fsubr
jl
out
popa
call
sub
addr16
cwde
into
mov
sbb
in
lods
dec
pop
xchg
inc
lea
in
and
call
xchg
mov
sbb
outs
jg
mov
int
call
cmp
xchg
adc
sbb
fcomp
xchg
or
pop
ins
xchg
cmp
dec
sub
frstor
add
lahf
(bad)
add
je
mov
xchg
push
lahf
inc
pusha
cwde
out
adc
sub
or
in
fild
jo
jbe
inc
outs
jns
gs
cmc
fstp
stos
pop
mov
in
call
cdq
cmp
pop
mov
clc
vcvttpd2dq
jg
jle
call
pop
adc
or
repnz
out
and
das
jno
sub
xchg
mov
sub
adc
pop
xchg
inc
es
sub
jae
cmp
clc
cwde
mov
xchg
mov
imul
push
sbb
imul
in
cmp
cmp
mov
(bad)
jle
jle
retf
retf
xor
xchg
mov
mov
mov
in
xlat
mov
ret
xchg
mov
lods
sub
adc
adc
mov
cwde
in
shl
xchg
bound
jg
repnz
clc
stos
aas
add
enter
cdq
sub
mov
mov
sbb
in
lds
test
mov
int3
int
cmp
clc
xchg
mov
lea
pop
loope
push
retf
pop
mov
out
lea
xchg
loopne
add
inc
fwait
jns
test
leave
lahf
mov
mov
(bad)
fwait
sbb
dec
stc
lea
mov
je
lds
inc
adc
gs
push
jns
cmp
push
fucom
mov
dec
xchg
add
sub
push
jne
call
dec
cmp
cs
xor
push
sub
dec
add
std
or
sahf
out
shl
or
fadd
pop
popf
ja
dec
sub
inc
xchg
mov
(bad)
jg
cwde
mov
push
push
cwde
shr
xor
adc
add
cld
enter
ret
data16
cdq
sub
fdiv
fistp
cs
les
jbe
lods
xor
sbb
cs
cli
adc
(bad)
pop
add
jno
push
mov
pop
jmp
cdq
xchg
xlat
mov
mov
daa
sbb
fwait
cdq
inc
jbe
fisub
loopne
cwde
cmp
rcr
xchg
cmp
cwde
in
popa
bound
fld
pop
xchg
jbe
imul
xchg
pushf
jo
xchg
call
push
jmp
out
test
xchg
xchg
mov
imul
cld
fs
test
fwait
daa
pop
push
inc
test
ret
adc
les
retf
cwde
call
enter
punpckhdq
sbb
out
sbb
sbb
xchg
jge
cs
mov
cwde
mov
mov
aas
popa
dec
mov
sbb
sbb
sbb
sahf
mov
xor
mov
movs
neg
pop
movs
push
sbb
cmp
jb
mov
mov
or
dec
lahf
sub
out
xchg
mov
pop
test
shl
in
cwde
out
and
adc
popf
scas
xchg
retf
iret
mov
test
out
ins
stos
(bad)
outs
loop
(bad)
cli
cwde
cld
dec
xor
dec
jl
cwde
mov
ficom
fstp
stc
test
jns
mov
xor
gs
arpl
push
add
mov
add
or
adc
imul
adc
jbe
mov
cmp
adc
clc
(bad)
bound
sub
in
cmp
xor
aas
(bad)
cmps
mov
sar
jmp
cmp
xchg
sbb
push
gs
cwde
gs
mov
out
jge
dec
mov
mov
sub
jl
mov
(bad)
mov
xchg
mov
cwde
dec
push
mov
lahf
xchg
jmp
loop
daa
jle
pusha
stos
mov
and
sub
push
cwde
arpl
int3
out
inc
bound
cmp
popf
mov
cwde
loopne
ror
inc
jae
shl
scas
and
mov
loop
or
push
xchg
popa
mov
mov
xor
dec
cwde
mov
(bad)
mov
aam
cwde
xor
call
cwde
popa
mov
sar
cmp
pop
jnp
xchg
fwait
cdq
push
push
xor
cwde
push
sub
retf
popf
(bad)
loopne
les
push
or
cli
jge
inc
add
(bad)
rcl
adc
xchg
adc
sub
dec
fdiv
lds
jecxz
sub
xchg
jl
mov
outs
jle
mov
and
lock
cmps
int3
cwde
dec
sub
xchg
das
iret
push
cli
xchg
in
icebp
add
cwde
push
lods
mov
cmc
jns
add
aam
repz
and
add
and
clc
mov
les
mov
rcr
ins
jmp
mov
in
mov
add
xchg
cmps
shl
inc
jp
gs
pop
inc
cs
dec
scas
mov
fistp
cwde
dec
xchg
in
or
popf
adc
jge
hlt
fisubr
mov
mov
pop
sub
dec
cmp
(bad)
cmc
dec
cwde
add
mov
cwde
push
mov
lea
cld
sub
xchg
ins
hlt
xor
cmps
push
in
test
sub
frstor
sbb
adc
xchg
jbe
dec
xchg
jnp
inc
test
sbb
cwde
mov
and
(bad)
xchg
sbb
push
xchg
mov
clc
or
cwde
and
mov
pop
adc
jo
xchg
and
adc
popf
cdq
jne
push
adc
dec
xchg
mov
aaa
ret
cwde
imul
loop
xor
jmp
(bad)
icebp
sar
inc
out
scas
test
jae
xor
add
dec
mov
push
xor
mov
inc
mov
scas
shr
lods
(bad)
jmp
ficom
movs
mov
loop
cwde
movlps
lods
mov
enter
out
sub
pop
sbb
fld
push
adc
or
xchg
cmp
adc
call
inc
push
cld
push
pop
pop
dec
lods
je
out
cwde
repz
sbb
xchg
lock
pusha
jg
lahf
or
mov
test
xlat
lea
pop
out
inc
push
aam
push
hlt
jge
push
xlat
cwde
popf
shr
or
mov
mov
pop
loopne
sti
inc
push
loop
pinsrw
nop
clc
add
pop
cmp
mov
mov
or
test
jnp
cwde
adc
push
add
hlt
pop
fs
cwde
dec
cs
mov
dec
xor
call
or
adc
push
or
push
or
mov
(bad)
push
leave
in
ins
jle
push
out
out
or
jb
(bad)
outs
cwde
retf
adc
hlt
jge
xchg
sbb
mov
xchg
push
lock
mov
in
inc
lahf
sbb
ins
lods
adc
xor
adc
mov
fsubr
xchg
xor
sub
fbstp
dec
and
dec
sbb
nop
jne
jl
popa
sbb
or
test
dec
cli
enter
loopne
retf
sbb
inc
test
movs
adc
adc
push
inc
sar
or
out
or
xchg
fs
dec
dec
dec
js
pop
inc
cwde
push
out
fisubr
mov
push
daa
fidiv
lock
lods
sub
lahf
or
adc
adc
xchg
test
pop
cli
fadd
nop
imul
xchg
jp
mov
jecxz
sub
push
sub
sar
jl
lods
(bad)
sbb
movs
mov
cwde
xchg
mov
cmp
je
inc
movs
sub
mov
sbb
in
(bad)
out
call
push
and
addr16
xchg
into
xchg
mov
sub
pop
push
fwait
hlt
mov
jne
lock
mov
clc
std
imul
test
pop
repz
cmp
dec
lds
xor
cwde
sub
sub
inc
cmp
mov
jp
sbb
aad
xchg
dec
mov
shl
jmp
cwde
xchg
loopne
dec
(bad)
fiadd
mov
es
cwde
add
popf
stos
add
and
cmp
mov
jle
lods
ins
sub
cwde
imul
mov
cmp
mov
or
adc
pushf
in
outs
dec
mov
mov
push
xchg
(bad)
xchg
mov
mov
and
mov
sbb
retf
lods
fisub
xor
mov
cmp
aas
test
adc
in
cli
pop
cwde
shl
xchg
push
mov
daa
in
xchg
jl
cdq
data16
dec
pushf
mov
adc
jne
or
dec
jl
sub
push
sar
fsub
out
xchg
jge
jmp
jl
add
clc
ins
push
sub
pop
add
xchg
mov
cli
pop
retf
cli
addr16
inc
inc
pop
ins
scas
mov
int
repz
bound
pushf
outs
je
shl
ja
and
mov
lahf
mov
push
add
data16
pop
test
inc
ror
adc
daa
and
loop
jae
fs
test
jle
das
inc
pusha
xchg
clc
cmc
cdq
sbb
xchg
test
fadd
cdq
sbb
add
nop
sub
mov
mov
cmp
or
fstp
lahf
sub
gs
adc
mov
int
ret
rcr
inc
lea
push
fsub
add
xor
push
cmp
inc
fadd
jo
xchg
inc
adc
push
inc
xchg
xchg
pop
stc
mov
sbb
fmul
pop
pusha
cmp
pop
push
and
cmps
arpl
push
sub
imul
test
pop
and
xchg
ret
mov
jecxz
out
jp
lahf
(bad)
imul
xchg
cs
jae
out
lods
xchg
fs
(bad)
cwde
xchg
push
pop
pop
adc
cwde
inc
scas
mov
mov
jmp
aaa
sbb
or
cwde
lods
(bad)
mov
sub
sar
sar
xchg
les
movs
xchg
pop
push
lock
fdiv
lock
inc
or
add
cmp
push
enter
out
xchg
mov
fist
cmc
sub
xor
jae
xchg
jns
sub
rcr
stos
cwde
or
sbb
inc
mov
fucomp
rol
fcomp
out
scas
fisubr
or
lods
inc
pop
mov
and
or
cmps
aaa
or
dec
push
inc
dec
add
or
cwde
xchg
ret
std
sub
lahf
inc
sbb
scas
pop
bound
sahf
pop
sub
cwde
and
mov
and
mov
mov
enter
shr
call
movs
mov
mov
call
test
call
sbb
(bad)
add
cwde
xchg
pusha
push
add
scas
mov
and
push
dec
cdq
xor
cmp
add
cmps
das
add
lea
push
cmp
adc
jp
mov
retf
dec
pop
jmp
jns
test
or
mov
add
mov
and
pop
and
sub
xchg
cwde
inc
(bad)
ss
(bad)
jmp
scas
mov
aas
call
pop
sub
lods
movs
cwde
jne
push
imul
xlat
pop
mov
xor
movs
movs
mov
icebp
push
rcl
sahf
outs
mov
jp
clc
call
loopne
adc
mov
sbb
cmp
fadd
jo
xchg
mov
ins
popf
sub
test
adc
mov
retf
xchg
fld
jb
test
xor
jo
addr16
push
fidivr
sbb
push
dec
repnz
in
movs
push
and
jge
ret
add
ins
rol
push
mov
fsub
loope
sbb
jb
mov
sahf
push
(bad)
jl
cwde
iret
xchg
mov
(bad)
sub
xchg
mov
cmp
ds
mov
mov
pop
or
or
pop
out
cwde
inc
and
das
loopne
ror
cwde
adc
dec
lea
popf
lock
mov
xor
push
sub
loope
in
sub
(bad)
std
lods
mov
sbb
pop
push
cmp
mov
or
aaa
mov
cmp
mov
fild
xchg
sub
inc
mov
xor
test
push
mov
sub
jbe
jp
leave
fwait
push
mov
imul
cwde
add
mulps
aas
xchg
retf
out
fld
inc
cwde
mov
cdq
mov
call
cwde
jecxz
das
pop
(bad)
adc
shl
scas
push
enter
xchg
leave
xor
and
xchg
shr
out
mov
jp
call
not
(bad)
test
lahf
sub
and
hlt
lock
nop
sbb
sbb
retf
cmc
es
push
pusha
sbb
or
bound
mul
sub
xchg
mov
mov
mov
gs
out
pop
cmp
neg
int3
(bad)
sub
loope
sub
sar
shl
xchg
pop
sub
ja
xchg
jb
sub
and
fstp
int
or
pop
jg
sbb
mov
clc
push
sub
sub
mov
cwde
mov
pop
movs
cdq
inc
cmp
push
popf
test
push
(bad)
mov
fwait
pusha
xchg
loopne
push
rcr
imul
cld
stc
retf
fbstp
cdq
adc
rcl
push
test
xchg
js
push
cmp
cmps
adc
cld
xchg
mov
xlat
inc
pushf
pop
mov
mov
push
lock
dec
aas
imul
(bad)
cs
add
aaa
mov
mov
cmp
les
inc
cmp
inc
aaa
lock
fwait
jo
imul
xchg
retf
xchg
leave
xlat
and
cmp
pop
dec
imul
pop
lahf
mov
ins
scas
frstor
xor
and
lock
xchg
sti
mov
mov
fst
lahf
sub
jmp
sub
shl
push
mov
adc
lods
push
call
and
or
inc
xchg
jne
xchg
jmp
pop
out
or
xor
gs
cwde
imul
xchg
xor
in
xlat
in
lds
(bad)
pop
loop
cld
leave
lods
ficomp
mov
mov
pushf
cld
(bad)
fstp
aaa
push
adc
inc
mov
cmp
cwde
pop
mov
adc
and
push
daa
push
stos
mov
mov
cmp
and
cwde
push
div
leave
out
jp
cwde
out
xor
cwde
ins
jae
pusha
mov
xchg
adc
(bad)
loope
and
cmp
mov
gs
fnstenv
ficom
(bad)
mov
cwde
popa
dec
pop
leave
inc
call
mov
mov
push
aaa
sahf
inc
or
cwde
adc
push
pushf
outs
popa
add
dec
xor
push
sub
stos
cwde
cmp
pusha
daa
cwde
jge
fwait
outs
les
sbb
jo
jl
inc
bound
jl
scas
xchg
push
jmp
test
mov
fcmovnb
sub
or
(bad)
xor
push
xchg
xchg
inc
call
enter
cmp
push
test
mov
and
mov
es
fdivr
mov
push
out
sbb
out
jmp
lods
cwde
xchg
sbb
fsubr
cwde
sbb
es
inc
inc
test
daa
push
lds
fcomi
mov
stos
adc
jne
cwde
je
sbb
test
push
adc
pop
iret
hlt
(bad)
test
ins
mov
cwde
pop
cmp
pop
pop
or
or
cmp
cdq
imul
inc
lods
xlat
mov
or
jne
bound
cmp
stos
sub
pop
imul
cwde
aam
sub
jb
int3
lods
lds
fnstcw
stos
add
aas
stos
pushf
es
mov
xchg
add
sub
pop
and
arpl
lock
bound
inc
push
mov
and
lock
inc
sbb
adc
mov
pop
jns
xchg
cmps
mov
ret
xchg
push
and
pushf
out
mov
int3
imul
out
xor
ins
jbe
dec
xor
pop
gs
rcl
pop
cwde
out
xlat
jne
fist
fadd
inc
push
push
(bad)
in
jmp
xor
xchg
das
or
xchg
jl
aam
addr16
cmps
mov
add
test
pushf
add
add
push
mov
jle
fidiv
js
out
xchg
mov
push
jo
adc
jge
das
xchg
jbe
test
and
xchg
xlat
jo
inc
sti
iret
cwde
out
loop
dec
cmc
ficom
jmp
ins
add
pop
test
fsub
retf
dec
adc
mov
dec
adc
or
push
(bad)
jmp
mov
cmp
cwde
sub
xchg
xor
nop
hlt
adc
mov
fsubr
mov
jg
add
ins
adc
orps
push
pop
call
xchg
dec
sub
xchg
add
xchg
dec
cmp
pop
cwde
lock
fwait
jbe
xchg
(bad)
or
jmp
dec
mov
mov
clc
loop
fadd
jo
bound
call
mov
pop
das
fistp
popf
mov
(bad)
(bad)
loopne
into
fdiv
lahf
jmp
add
sar
loop
int3
xchg
out
or
push
xchg
dec
dec
inc
cwde
out
aam
xlat
or
adc
shl
jle
fst
rcr
mov
retf
loopne
stc
je
add
movs
sar
shl
imul
xchg
push
and
pop
outs
jp
sbb
fpatan
jae
xlat
sbb
ja
mov
lock
or
and
push
inc
cwde
sar
mov
add
gs
out
jb
je
xor
fst
jmp
jno
shl
sbb
fisub
pop
jge
and
cmp
jle
rep
cs
jle
sbb
push
loop
push
out
call
addr16
sbb
daa
jle
aaa
cmp
or
dec
jecxz
int
test
jge
mov
jle
(bad)
xor
jge
cmp
cmp
leave
js
aam
in
in
xchg
ror
xor
addr16
fld
or
inc
ret
dec
ss
pop
xor
popf
pop
jno
rol
jne
sbb
mov
push
and
icebp
test
daa
mov
loop
cdq
sub
push
aam
fcomip
or
push
cmp
dec
mov
je
mov
cdq
inc
outs
mov
ins
jle
(bad)
jnp
mov
pop
js
das
pop
lods
cmp
fdivr
xchg
in
pop
repnz
sbb
add
or
sub
es
cs
cdq
jl
xchg
mov
loopne
mov
sbb
daa
cmps
mov
xchg
cmps
mov
popf
(bad)
leave
push
rcr
mov
push
jbe
xor
or
(bad)
push
cmp
pop
add
mov
mov
into
dec
pop
push
push
pop
cwde
jecxz
lods
dec
xchg
xor
cwde
sbb
arpl
out
leave
call
inc
cwde
js
adc
ja
in
mov
sbb
retf
sbb
cmp
jg
mov
cwde
pusha
repnz
sub
dec
popf
push
loope
out
jbe
jecxz
or
mov
xor
popa
inc
ds
bound
fsubr
lahf
sbb
fsubr
sbb
cli
or
pop
mov
add
call
add
test
push
and
pop
fsubr
lahf
into
stos
div
mov
fwait
sub
adc
inc
ret
xlat
leave
les
xchg
or
dec
xchg
dec
js
sbb
neg
cmp
loope
fist
js
mov
movs
jbe
neg
stos
js
lahf
jmp
ficom
stc
or
imul
hlt
out
fdivrp
and
push
ins
xlat
cwde
or
fucomip
mov
rol
fdivp
loop
xor
ds
mov
inc
call
mov
fistp
clc
xchg
fiadd
mov
das
loope
inc
sti
into
cmp
adc
(bad)
out
add
lea
les
jmp
jg
sub
mov
ret
add
push
sbb
adc
cmp
inc
mov
xchg
inc
fmul
ja
cwde
and
dec
add
sub
cwde
fdivr
test
mov
xor
xchg
shl
loop
jp
cmp
mov
push
bnd
fdiv
leave
cwde
push
cmp
inc
jno
or
mov
and
cwde
mov
lock
sbb
sub
push
leave
bound
cmp
or
cdq
jp
mov
mov
ja
adc
add
push
lea
loope
stos
mov
not
xchg
jmp
pop
fs
xchg
adc
les
mov
or
mov
mov
ret
mov
int3
loopne
in
js
jo
dec
push
cwde
lds
xchg
outs
iret
cld
ret
(bad)
cmp
pop
cmp
cwde
ds
pop
sar
jo
call
cwde
jg
retf
add
or
mov
fcmovnbe
push
add
cwde
stos
scas
cmp
pop
and
xchg
mov
xchg
sub
mov
or
cmp
add
movs
pop
inc
mov
dec
nop
add
lahf
or
bound
cld
repz
pop
inc
push
mov
or
inc
pop
jo
js
std
mov
push
es
push
gs
mov
xchg
push
mov
inc
js
cld
ror
sbb
push
mov
ds
cwde
fucomi
cld
ret
or
cmp
mov
add
and
cli
enter
sub
shr
aad
push
add
push
cmps
mov
and
jnp
mov
nop
add
cwde
jo
fnsave
fs
cwde
push
cmp
cs
mov
adc
jg
push
stos
popf
lahf
nop
inc
lahf
lods
push
pmaxub
cmps
mov
jae
fldenv
jnp
mov
ins
dec
or
loop
sbb
push
cdq
xchg
mov
stc
mov
aaa
mov
push
and
test
repnz
pop
cmp
ds
add
cmps
adc
movs
std
retf
inc
and
out
mov
ins
imul
pop
jae
pop
and
cwde
ins
daa
inc
dec
push
push
xchg
xor
outs
sub
fistp
xor
sub
push
and
cmp
push
add
xor
cwde
dec
lahf
jns
and
xchg
jp
das
pop
int
cmc
in
sub
xchg
je
dec
pop
push
das
jno
cwde
in
psraw
xor
jbe
xchg
push
fisttp
mov
rcl
test
(bad)
adc
push
add
mov
adc
imul
ins
or
or
jmp
or
mov
or
xchg
aad
out
add
stos
xchg
mov
add
js
sbb
data16
and
dec
ret
or
mov
or
sbb
jno
pusha
jmp
in
les
push
push
cwde
into
in
aam
jp
jmp
ficom
xor
adc
xchg
(bad)
mov
sub
cwde
inc
das
mov
dec
rol
ret
loope
invd
ret
test
dec
fld
fmul
jne
pop
and
jb
cmps
mov
mov
jb
xchg
xchg
jns
xchg
js
dec
call
pop
jne
xchg
call
dec
int
out
movups
stos
in
ds
dec
adc
in
xchg
repnz
pop
outs
mov
dec
push
or
xor
imul
xchg
pop
clc
xor
leave
cwde
cmp
aas
scas
cdq
and
inc
ficom
xchg
mov
mov
(bad)
cs
sub
cwde
int3
call
cwde
cdq
outs
jb
scas
in
sar
xlat
mov
int3
pusha
and
data16
loopne
push
and
adc
or
fidiv
into
add
jae
pusha
push
aas
iret
mov
add
xchg
jl
dec
or
retf
aas
mov
into
mov
sub
sub
push
fdivrp
inc
push
inc
clc
mov
les
clc
push
jae
jno
and
cwde
retf
mov
add
cwde
adc
or
addr16
out
fmul
rol
lods
loop
call
outs
pavgb
mov
xchg
mov
add
fdiv
jge
ficom
inc
sbb
stos
inc
scas
ss
mov
cwde
leave
xchg
jae
cwde
rcr
push
scas
test
retf
fisttp
pop
cwde
jmp
daa
leave
div
mov
xor
pop
ja
lock
loope
jmp
cwde
add
lahf
scas
in
stc
cwde
jnp
call
inc
int
cmp
sub
(bad)
dec
push
shl
ficomp
xchg
sub
(bad)
push
in
adc
inc
rcl
sub
retf
retf
mov
mov
xor
or
xchg
(bad)
sub
inc
ror
clc
(bad)
xchg
stos
sub
adc
inc
cdq
sbb
jbe
test
outs
push
add
loop
pop
bound
inc
into
push
push
aam
xor
icebp
pushf
lahf
dec
jp
mov
dec
dec
and
jg
inc
fs
mov
retf
cmc
outs
xchg
sub
(bad)
mov
jne
pushf
mov
pop
(bad)
(bad)
ror
mov
sbb
xchg
cs
pop
or
int3
out
in
add
into
jo
cmp
push
sar
fistp
cwde
stc
arpl
(bad)
aam
lds
test
data16
cld
and
retf
inc
jb
xchg
aad
sub
out
push
sbb
sbb
test
stos
fisub
jmp
or
retf
sub
mov
jmp
rcl
addr16
neg
in
sub
sub
rcl
scas
enter
cwde
sahf
push
push
jecxz
jl
arpl
xlat
retf
pop
adc
adc
sbb
xor
ins
jl
mov
das
add
cwde
jecxz
cmc
bound
pop
sbb
add
fcmovne
cli
cmp
xchg
dec
pop
stos
out
xor
sub
sbb
mov
mov
dec
sub
jb
inc
push
(bad)
outs
mov
imul
stc
cmp
(bad)
std
sar
sbb
das
or
icebp
push
iret
ror
xchg
out
retf
or
mov
inc
jo
(bad)
inc
dec
push
cwde
xor
pop
mov
cwde
cmp
fidiv
sub
sub
push
scas
mov
icebp
adc
sub
push
mov
add
enter
lahf
xchg
lea
jle
cld
and
ficom
test
movs
cmp
xor
mov
add
pop
(bad)
pop
or
mov
fadd
imul
xor
out
cmp
mov
xchg
push
leave
dec
pop
jbe
mov
clc
mov
push
lock
loop
scas
push
dec
jg
ins
jle
out
popf
nop
mov
nop
push
and
jne
not
iret
in
rol
aaa
push
arpl
ins
ret
or
adc
mov
mov
mov
push
pop
das
xor
jl
popw
cli
inc
push
mov
fs
int3
jo
pusha
imul
mov
in
push
bound
div
(bad)
ret
retf
daa
cmp
jb
mov
pop
and
das
push
cmp
sub
cld
cmc
dec
daa
mov
sbb
ror
aam
fst
dec
mov
(bad)
cld
cwde
jbe
pop
ja
push
movs
add
outs
ror
cwde
pop
out
icebp
dec
pop
cmp
add
xlat
test
push
dec
add
mov
sub
sahf
mov
xor
mov
cli
push
dec
popa
call
enter
mov
add
and
test
neg
and
dec
push
jne
sbb
int3
aaa
push
cdq
je
pop
ds
cwde
je
mov
sar
mov
xor
cmp
and
add
fbstp
cwde
pop
jmp
cmp
mov
cmp
pop
add
cwde
xor
xchg
mov
fdivr
and
pop
cld
das
xchg
or
jl
out
fwait
mov
mov
cli
dec
or
and
cwde
and
mov
movs
cwde
cmp
xor
test
aad
sbb
jns
test
sahf
aad
sub
mov
push
or
rol
add
loop
movs
(bad)
loopne
cwde
test
mov
sub
stc
int
jle
mov
jne
rcr
pop
fsubr
in
pop
test
hlt
add
js
lea
sbb
(bad)
das
cmp
pop
push
jecxz
mov
jbe
popf
push
popa
enter
push
push
imul
xchg
mov
inc
jno
mov
adc
cdq
fisttp
inc
inc
pop
mov
cli
scas
cwde
(bad)
addr16
mov
stos
mov
or
popf
test
cmp
jg
packssdw
aaa
xor
or
dec
push
sbb
je
jno
fdivr
fstp
cmc
mov
ret
mov
mov
cwde
jecxz
and
pop
and
xchg
rcl
clc
ret
mov
into
cmc
sbb
dec
ja
bound
add
pop
hlt
jne
xchg
ins
cmp
push
pop
imul
imul
mov
arpl
or
(bad)
out
test
add
cmp
and
and
imul
mov
cs
stos
mov
loopne
sbb
outs
xor
sbb
gs
retf
(bad)
sbb
out
aad
add
xchg
mov
push
dec
neg
inc
push
jp
cwde
mov
into
shr
loop
out
movs
xchg
xchg
sahf
jp
test
mov
rcr
xchg
lds
push
sbb
rcr
sub
pop
pop
into
fist
pop
jge
or
add
add
out
add
add
inc
mov
lahf
add
ficomp
lahf
jnp
mov
lea
cmp
dec
cwde
test
adc
rcr
xor
mov
inc
or
imul
lods
test
sbb
push
in
adc
push
mov
outs
adc
pop
push
xchg
pusha
arpl
pop
pop
dec
cmp
fdivr
js
pop
dec
push
ins
pusha
cwde
fisttp
and
mov
movs
mov
sub
fadd
adc
inc
(bad)
jl
cwde
aam
mov
sbb
add
test
sub
or
mov
mov
outs
dec
cdq
sti
cmp
mov
retf
xchg
in
out
jmp
cwde
or
fcmovbe
mov
pusha
pop
std
fist
call
fsubr
jne
xor
(bad)
mov
or
ins
gs
out
xchg
hlt
jle
jb
fist
pop
push
xor
aad
push
sbb
(bad)
fcmovnu
cmps
div
xchg
xor
icebp
ins
imul
outs
ja
mov
pusha
dec
pop
outs
mov
enter
aas
pop
inc
pop
jle
pusha
imul
dec
xchg
jp
xor
push
xlat
mov
outs
adc
dec
sub
imul
xchg
adc
movs
add
adc
sbb
mov
jne
lahf
sbb
enter
push
cmps
mov
push
inc
jmp
xchg
cwde
in
cmp
jecxz
stc
sub
sub
je
or
jmp
inc
mov
daa
cwde
(bad)
push
fs
jge
nop
mov
push
sbb
and
je
pop
fdivr
clc
int3
in
int3
adc
push
nop
pushf
xchg
sbb
popa
lahf
mov
int
sbb
cmp
out
rol
xchg
aam
push
scas
xor
test
mov
test
sbb
fdivr
clc
cmps
cwde
aad
cmps
mov
jae
xchg
mov
imul
xchg
inc
push
cmp
cmps
popa
sbb
jl
xchg
jno
xchg
mov
jne
cwde
sbb
ret
and
lahf
xchg
leave
aam
test
fnstenv
pop
fs
adc
xchg
jle
pusha
add
mov
adc
add
cwde
sub
scas
test
mov
add
cmp
imul
outs
or
rcr
mov
mov
pop
fstp
xchg
add
mov
loopne
retf
and
popf
dec
sub
sbb
push
mov
inc
test
mov
dec
leave
jmp
jl
and
stc
or
bndstx
xchg
cmps
xor
shr
iret
add
sub
int3
test
xchg
out
xchg
aad
mov
je
fwait
out
movs
xchg
mov
loopne
ror
add
(bad)
fadd
inc
dec
xchg
mov
pop
mov
shr
xchg
push
adc
sbb
cmp
aad
shr
cwde
sar
loop
imul
mov
in
iret
adc
retf
pop
mov
cld
popf
(bad)
pop
sub
fadd
icebp
fnstsw
mov
push
pop
cdq
pop
push
outs
dec
addr16
ins
mov
sbb
test
mov
loope
add
dec
test
cmp
popf
outs
jno
sbb
cwde
mov
mov
mov
movs
pop
add
rcl
xchg
repz
cs
or
rcr
int
sub
les
cwde
sbb
fs
sbb
fist
sub
dec
push
xchg
aaa
mov
jns
push
nop
jmp
push
cwde
cmp
sbb
lsl
in
and
bound
pop
cmp
cwde
xor
add
mov
into
xor
dec
dec
cwde
xor
dec
sbb
out
add
cwde
mov
jl
cmc
jns
loopne
sbb
clc
inc
je
push
daa
cwde
lods
mov
and
cwde
jmp
pop
and
jae
push
in
mov
mov
shr
jge
mov
cwde
fistp
test
cwde
xchg
(bad)
fistp
push
push
push
test
aad
sub
pop
sahf
inc
in
push
ja
shr
sbb
shl
inc
inc
sar
cwde
scas
cmp
cwde
dec
pusha
dec
lea
push
aas
cdq
retf
imul
in
icebp
leave
adc
shl
push
pop
sbb
push
aaa
cwde
or
ret
add
mov
jo
cmp
fisubr
les
xchg
add
mov
scas
sub
ins
sub
sbb
(bad)
je
and
and
stos
cwde
gs
jmp
xchg
popf
scas
xor
cli
xor
(bad)
cwde
(bad)
imul
jg
sub
fbld
movs
div
or
xchg
cmp
push
jbe
fsub
pop
and
jne
js
sub
mov
(bad)
popa
jmp
test
cmp
cld
dec
and
mov
repnz
adc
daa
cmp
push
sub
aad
ret
cmp
sbb
pop
or
or
pop
jae
push
ss
jmp
mov
dec
pop
adc
sub
push
jbe
lahf
mov
xchg
xchg
sbb
cmp
es
and
and
(bad)
add
cwde
retf
jge
add
std
sbb
sub
mov
cmps
mov
add
popf
inc
test
jo
pop
fdiv
dec
cwde
dec
xor
xchg
cmps
data16
xchg
fcomp
clc
in
mov
or
ret
loopne
std
or
fisubr
call
cdq
jle
div
stos
sbb
inc
xor
mov
lahf
call
outs
xchg
lahf
pop
pop
es
int3
popa
sub
popf
arpl
das
xor
dec
pushfw
add
movs
pop
adc
out
lahf
cmp
test
push
xor
stc
or
xor
call
hlt
sbb
pop
ins
jnp
jmp
sub
mov
test
dec
ins
scas
add
into
cwde
add
and
lock
call
loop
sub
jmp
jae
ja
push
imul
mov
stc
fisub
adc
adc
sub
pop
sub
cmp
dec
push
mov
pop
or
add
pop
xchg
sub
mov
xlat
ret
push
movs
enter
inc
hlt
xchg
push
sbb
or
adc
mov
pop
sub
cwde
add
das
movs
sar
dec
pop
pop
or
addr16
mov
sbb
sbb
push
cwde
push
faddp
cmp
std
push
jbe
pop
retf
call
(bad)
dec
sbb
dec
fwait
push
pop
mov
mov
int
sub
dec
test
cwde
mov
mov
xor
cwde
inc
lods
mov
cwde
rcr
xchg
idiv
cwde
pop
mov
jb
stos
inc
cwde
dec
fwait
xchg
loope
jl
push
cwde
stc
and
inc
jge
js
cwde
and
xor
cwde
xor
in
jmp
or
jmp
cwde
ins
push
pop
out
jnp
cmc
cmp
movs
outs
cs
cwde
fild
mov
mov
jle
mov
mov
sbb
adc
call
cwde
out
int3
fs
sbb
pop
sbb
pushf
in
xchg
retf
lahf
(bad)
xchg
xchg
imul
and
xor
pop
scas
sahf
les
dec
sbb
test
mov
jge
add
jae
mov
sub
push
fiadd
fwait
xchg
mov
and
call
int
pop
out
push
sbb
fisttp
mov
or
inc
mov
outs
pop
mov
out
in
push
cwde
mov
or
jg
clc
pop
test
cmp
ja
mov
cmps
xchg
fnstcw
pop
mov
sbb
pop
pusha
and
push
and
mov
cwde
pop
data16
ficom
push
cmps
fwait
cmp
push
xor
arpl
ja
shr
outs
inc
pop
dec
ret
sbb
jo
retf
mov
test
sub
mov
jecxz
xor
aaa
mov
dec
xor
lods
cmp
scas
push
sbb
cwde
test
sbb
ss
pop
xchg
pop
rcr
jl
push
iret
faddp
mov
cmc
mov
xor
jle
push
xor
cwde
fwait
and
cld
sbb
test
aaa
es
(bad)
sbb
cmps
sub
stc
adc
aaa
or
ficom
add
xor
or
stos
sub
fcomp
sub
loopne
clc
dec
jb
push
push
and
xchg
add
add
out
and
xchg
mov
scas
sar
adc
mov
sbb
(bad)
jle
push
jo
cwde
je
ja
fwait
dec
push
xor
mov
pop
outs
rcl
call
mov
and
push
inc
test
popf
sete
repz
shl
retf
mov
xchg
sti
aam
mov
jns
pop
jne
mov
cwde
aad
mov
ret
stc
cdq
rcr
scas
push
in
sub
jbe
fdivr
cwde
ins
sbb
loope
rol
cwde
jmp
inc
cwde
sub
mov
pop
mov
xchg
out
leave
inc
inc
mov
and
mov
pop
gs
pop
clc
je
cs
jecxz
push
icebp
movs
pusha
lods
adc
sbb
cwde
xchg
sub
mov
imul
jbe
cdq
add
test
xchg
jb
xchg
xor
push
lods
or
(bad)
dec
mov
out
nop
xchg
push
cwde
push
sbb
add
add
jg
mov
fst
sbb
mov
add
aaa
fadd
adc
sar
dec
sbb
xchg
xor
popa
mov
mov
inc
mov
pop
in
mov
lahf
loopne
inc
sbb
pop
call
xchg
jns
daa
mov
ds
xchg
js
jns
xchg
or
jmp
adc
push
mov
lock
outs
jle
rcl
sbb
push
adc
fcom
fdivr
jle
pinsrw
xchg
mov
cmp
int3
push
daa
retf
adc
lahf
xor
dec
rcl
fldcw
(bad)
out
jbe
or
test
mov
std
rol
ja
mov
pop
retf
jno
sar
push
xchg
dec
ret
xchg
sub
xchg
mov
test
inc
cwde
std
sbb
outs
or
pop
jge
dec
pusha
xchg
out
adc
xchg
push
push
add
cmp
push
jae
in
icebp
lock
dec
xchg
sahf
outs
and
dec
adc
stos
mov
dec
push
pop
cli
pop
fcmovbe
xor
or
cwde
mov
dec
sbb
fimul
cwde
jmp
add
imul
cwde
mov
push
sub
dec
xchg
inc
jae
shr
cmps
(bad)
dec
ins
jae
push
mov
add
neg
xchg
dec
push
out
pop
add
push
cwde
sbb
and
out
xchg
cmc
(bad)
repz
aas
scas
sbb
lahf
addr16
mov
mov
les
ja
fs
das
xchg
mov
pop
jns
ins
js
hlt
cdq
in
in
push
js
dec
push
dec
push
je
(bad)
pop
sets
outs
sbb
inc
adc
mov
jmp
push
in
mov
rol
and
add
push
or
out
pop
ret
int
cwde
mov
sub
cwde
popf
mov
jecxz
mov
xchg
je
pusha
cmc
dec
(bad)
pop
xchg
nop
cwde
std
mov
and
jbe
xchg
mov
jmp
adc
jbe
mov
iret
aad
jo
cwde
scas
mov
adc
push
mov
aam
int3
pop
aas
call
int3
xchg
and
arpl
dec
data16
nop
cmp
stos
mov
adc
shr
jp
mov
mov
cmp
mov
pop
call
ins
js
je
mov
jns
cmp
sbb
fcomip
adc
clc
adc
jmp
in
sub
push
add
xor
add
jge
std
mov
cwde
inc
stos
or
or
arpl
cwde
mov
xchg
fstp
push
push
jb
push
xor
dec
lahf
xchg
rcr
(bad)
hlt
cmp
addr16
or
xchg
sbb
push
add
add
loope
cmps
jo
(bad)
cld
fcomip
call
xchg
or
inc
mov
sbb
sbb
xchg
or
sub
fsub
lods
xchg
(bad)
mov
popa
push
pop
fimul
pop
sub
sub
add
mov
jne
leave
jmp
mov
pushf
xchg
or
cli
pop
ds
mov
xchg
push
sub
jae
div
or
stos
out
and
jl
lahf
mov
not
call
sbb
(bad)
cwde
test
pop
dec
cwde
fnstsw
enter
xor
cmp
inc
rcr
jmp
scas
mov
cwde
add
test
xor
es
cld
add
or
jecxz
out
sbb
add
outs
test
mov
sbb
mov
lock
xor
inc
pop
es
or
call
lock
or
pop
pop
cmp
int3
(bad)
xchg
cwde
adc
imul
retf
adc
sbb
fild
xchg
aaa
fs
aad
cmps
jmp
inc
cdq
mov
fisubr
aad
fisttp
pop
ins
loopne
mov
(bad)
int3
fcmovne
adc
mov
or
fdivr
mov
xor
mov
push
push
sbb
adc
loope
dec
push
movs
and
cwde
sbb
cmp
(bad)
fstp
jmp
or
mov
mov
jmp
cwde
mov
mov
xchg
ja
loop
pop
xchg
xchg
popf
dec
lods
xor
or
and
xlat
mov
int3
and
ins
sbb
jle
dec
rcr
sub
mov
cmp
popa
pop
inc
cwde
int
fcmovnu
mov
xor
push
fldcw
sub
or
mov
jg
push
ins
out
xchg
mov
xchg
add
outs
push
dec
iret
loopne
sub
jnp
aas
mov
or
rol
(bad)
aad
scas
fnstsw
lods
jmp
xor
scas
cmp
adc
sbb
mov
fistp
sub
js
lea
aas
push
cwde
jl
call
cmc
mov
xchg
jmp
xchg
cwde
pop
out
lods
sub
pop
movs
adc
jmp
push
stos
retf
lods
pop
sbb
xchg
push
dec
dec
(bad)
mov
inc
mov
xlat
enter
adc
popf
mov
mov
sbb
ja
inc
imul
adc
cs
add
pop
int3
cmp
cwde
inc
push
pushf
ja
mov
xchg
outs
repnz
jle
mov
cwde
inc
stos
jmp
cmp
cs
inc
mov
cwde
je
and
dec
xchg
das
or
ret
lods
push
in
scas
ficomp
es
push
es
adc
cwde
push
cmp
xor
inc
sahf
push
test
dec
fsubr
cmp
mov
cmp
dec
push
dec
pop
cwde
cmp
rcl
mov
cwde
idiv
stos
cmpxchg
jmp
repz
imul
xchg
mov
xchg
cdq
data16
cwde
js
aad
nop
xchg
cwde
dec
cmc
mov
mov
jecxz
add
mov
repz
xchg
arpl
or
das
mov
push
jmp
test
xchg
mov
scas
mov
mul
adc
div
outs
pop
dec
sub
mov
repnz
xchg
or
xor
pop
out
call
inc
ja
lods
push
inc
xchg
mov
add
sbb
adc
sub
lea
ficomp
pop
adc
call
sbb
test
out
imul
sbb
or
push
push
outs
add
dec
jne
rcl
pop
xchg
xor
jl
retf
shl
push
cld
stc
jge
shl
int
addr16
push
(bad)
cmps
mov
scas
leave
rcr
sbb
mov
nop
and
jle
jb
sbb
fldcw
cmc
push
daa
out
aad
xchg
push
sub
ror
xchg
ret
aad
pop
outs
mov
mov
daa
inc
cwde
fsub
ja
cwde
cs
scas
mov
and
xchg
sbb
mov
lahf
popf
mov
mov
mov
mov
scas
stos
cld
out
rcr
fcom
xchg
xor
popa
in
daa
cmp
jle
add
push
dec
fcom
xor
outs
mov
adc
int3
mov
mov
push
rol
inc
cmp
rcl
cmp
pusha
pop
cmp
inc
pushf
push
mov
mov
hlt
push
in
mov
mov
cs
fnstcw
fsub
lea
cwde
or
cwde
add
loop
out
xchg
mov
inc
enter
test
outs
leave
cmps
jo
lahf
out
(bad)
cmp
inc
and
add
jecxz
xor
mov
pushf
mov
clc
inc
addr16
loop
xchg
fcmovnu
daa
js
and
push
or
cdq
(bad)
push
test
or
and
test
mov
mov
sbb
push
sub
xchg
lea
dec
ja
sbb
and
sbb
je
arpl
xchg
into
cwde
jae
js
sub
sti
mov
sub
cwde
mov
push
pop
cwde
icebp
sbb
add
cmps
fadd
jp
out
cld
xchg
ins
cmp
lahf
mov
lea
jnp
aad
cwde
push
push
fbld
adc
call
sub
push
pop
sbb
cwde
(bad)
repz
cwde
int
in
test
imul
sbb
sbb
cwde
cmp
scas
fiadd
test
loope
mov
pop
dec
push
mov
into
mov
inc
sbb
cld
inc
sub
icebp
sbb
in
sbb
retf
(bad)
rcr
xlat
out
aas
mov
call
psubb
inc
lahf
pushf
ins
pop
rcr
inc
xchg
jne
cmp
gs
test
fdivr
bound
jbe
popf
inc
fdiv
es
rcl
fild
test
clc
or
cwde
repz
test
sub
fsub
lods
sqrtps
test
mov
xchg
repz
push
mov
mov
push
pop
in
nop/reserved
or
add
jno
cmp
and
jle
xchg
mov
test
pop
sbb
movs
sbb
outs
or
or
add
pop
dec
inc
inc
pop
inc
pop
mov
dec
dec
(bad)
xchg
daa
push
mov
sub
popf
cdq
popa
lahf
fs
fstp
xor
imul
call
lods
push
cmps
pop
adc
inc
nop
and
mov
outs
and
inc
or
nop
dec
push
test
cwde
inc
mov
call
cwde
xor
sub
cld
xchg
adc
inc
aad
sbb
adc
mov
(bad)
adc
das
rcr
or
call
push
ds
cwde
mov
sbb
mul
adc
push
jns
dec
outs
fild
mov
and
imul
sub
test
in
clc
je
inc
xchg
pop
pop
cmp
xor
adc
mov
jmp
call
scas
cmc
in
mov
xor
jae
shl
push
cwde
rcr
das
xor
jmp
in
cmp
jae
fsubr
iret
frstor
xchg
fistp
push
and
cwde
mov
call
cwde
push
loope
jb
(bad)
dec
int
jl
lods
je
fidiv
xchg
jo
lahf
push
aam
fsubr
push
xchg
jbe
lea
add
push
into
clc
ins
adc
loop
in
cmps
rol
or
imul
in
push
rcl
mov
clc
neg
cwde
inc
adc
jbe
addr16
pop
int
fild
adc
std
xchg
popa
pop
jbe
pop
popf
sub
add
int
js
jno
mov
retf
sbb
popf
stos
ja
pop
ret
es
sbb
out
call
push
or
inc
pop
loopne
jp
dec
test
out
cwde
movs
out
dec
push
jg
sahf
(bad)
rcl
xlat
outs
mov
mov
xchg
mov
fcom
lock
stos
sbb
in
mov
dec
sub
div
cwde
inc
push
arpl
or
test
das
cmp
xor
jo
push
pushf
aad
pop
adc
nop
mov
pop
movs
and
push
pop
(bad)
cwde
xor
scas
lods
(bad)
out
loop
aas
dec
push
pop
cmp
jl
mov
int3
sar
xchg
cld
retf
cwde
mov
xchg
mov
ins
sbb
pop
sub
icebp
jmp
cmp
sub
xchg
addr16
sahf
rcr
int3
xchg
iret
jl
cmp
stos
jbe
dec
cwde
mov
push
(bad)
(bad)
fiadd
add
jle
sti
popa
xchg
jle
adc
cmp
fs
gs
and
movlps
dec
out
cmp
pop
test
mov
add
hlt
movs
test
ds
mov
jmp
in
mov
sbb
mov
test
clc
jbe
mov
xchg
xor
fcmovb
cmp
shr
(bad)
sbb
ret
or
cwde
cmp
repz
sub
or
mov
(bad)
int3
rcr
jp
xor
cmp
mov
scas
mov
int
sahf
outs
xchg
pop
cdq
dec
enter
jmp
xchg
push
push
popf
xchg
xchg
das
cs
(bad)
(bad)
mov
in
jecxz
js
push
add
adc
xchg
test
stos
cwde
mov
icebp
add
push
sub
ss
mov
sbb
sahf
js
and
cmp
and
jbe
inc
test
mov
xlat
lds
inc
aaa
arpl
push
ins
and
jmp
lods
outs
mov
sub
in
and
je
test
inc
jle
jbe
pop
mov
hlt
mov
jl
cmp
adc
pop
rcl
test
jle
icebp
sbb
(bad)
outs
iret
lods
cmps
aam
add
or
xor
cmp
aaa
fst
cwde
mov
xchg
imul
pop
dec
push
test
xchg
scas
adc
xchg
fnstenv
cmc
ret
mov
dec
mov
inc
popa
sar
das
xchg
xchg
pop
sbb
mov
mov
aas
add
or
ins
pop
dec
cwde
outs
js
retf
fsubp
cwde
fstp
inc
cwde
rcl
and
pop
lods
mov
mov
xchg
jecxz
cwde
retf
sub
cwde
call
cmp
mov
pop
or
cs
mov
(bad)
pop
cmp
cwde
jns
add
js
clc
outs
(bad)
stos
stos
ret
(bad)
cmp
cwde
push
rcr
icebp
lock
(bad)
cwde
das
mov
test
mov
mov
jl
or
sti
shl
test
pop
neg
ror
popf
movs
jo
add
lea
adc
mov
int
arpl
jb
and
mov
dec
cwde
cs
xchg
fdivr
mov
int3
jl
xchg
xchg
mov
aaa
sbb
xor
jge
cmp
into
fistp
jp
cmp
xchg
stos
inc
test
jnp
rcr
pop
es
pop
xchg
jbe
imul
mov
outs
out
sbb
or
push
out
mov
(bad)
sbb
ins
mov
xchg
adc
cli
int3
jns
inc
add
and
xchg
pop
pop
xor
xchg
mov
mov
push
mov
fs
js
(bad)
cmps
pop
jbe
inc
outs
cwde
test
jns
stos
into
adc
sbb
cwde
push
loop
or
popf
test
fidiv
xchg
jmp
adc
(bad)
lea
add
mov
or
push
call
leave
sar
cwde
ret
in
jmp
sbb
enter
xor
inc
sub
dec
cmps
mov
mov
fdivr
rol
cwde
add
movs
pop
imul
jmp
jns
(bad)
call
lahf
out
repz
mov
push
mov
adc
mov
or
sub
ds
test
out
test
xor
test
daa
inc
pop
xor
jne
adc
sub
mov
shr
jge
or
int3
aad
xor
xchg
cld
mov
data16
jbe
retf
lock
gs
(bad)
jl
mov
mov
and
cmp
nop
xchg
sub
mov
loop
repz
ret
daa
sub
sahf
sbb
mov
pop
pop
and
push
ds
pop
mov
(bad)
jge
adc
mov
outs
dec
mov
mov
jnp
sbb
lds
imul
push
pop
pop
xchg
xor
mov
ja
ret
inc
adc
les
cmp
adc
dec
or
sub
popf
arpl
jmp
inc
push
repnz
cmp
dec
stos
xchg
(bad)
aam
ins
sbb
xor
and
pop
jns
popf
ins
std
cwde
(bad)
fldcw
lds
ins
mov
cbw
leave
or
mov
fs
add
xchg
sbb
test
dec
pop
add
sub
mov
imul
out
out
sti
sub
test
cwde
mov
jg
hlt
fstp
cdq
je
aam
js
mov
mov
sbb
mov
cwde
adc
mov
retf
int3
out
pop
fwait
imul
cwde
clc
rcl
fisub
cmps
lock
xchg
int3
das
cmp
xchg
mov
lahf
aas
and
stc
pop
cwde
out
adc
rcr
sbb
int3
cwde
loope
fsubr
sbb
cmp
cwde
pop
sub
mov
in
out
cmp
lock
jns
les
mov
pop
call
xchg
xor
xor
sbb
aaa
jns
push
cwde
pop
outs
in
icebp
ret
jnp
xchg
xchg
sbb
js
or
(bad)
inc
call
xchg
lea
leave
cmp
xchg
push
cmp
xor
lods
adc
mov
fsub
mov
sub
or
ss
dec
fdiv
sar
and
and
in
xchg
xor
inc
test
scas
shr
div
sbb
dec
(bad)
mov
shr
or
mov
scas
inc
jno
jp
jb
loopne
pop
ficom
(bad)
(bad)
cwde
xor
bnd
test
push
jb
mov
cwde
mov
and
in
(bad)
rol
jg
xor
cwde
sahf
mov
in
adc
fisttp
cwde
add
or
cdq
sahf
adc
lea
sbb
adc
pusha
adc
scas
mov
fstp
or
mov
cwde
add
jecxz
scas
(bad)
jnp
or
pop
idiv
adc
or
jo
add
inc
daa
jge
xor
mov
dec
popf
(bad)
add
test
fisubr
xor
cwde
adc
jns
out
retf
cwde
retf
inc
or
xlat
push
and
lahf
push
ja
movs
pop
int3
dec
and
cwde
push
jle
add
xor
xchg
dec
sahf
inc
leave
aas
popa
daa
push
imul
inc
or
in
std
pop
mov
(bad)
inc
dec
mov
jmp
sub
inc
pop
movs
push
adc
cwde
mov
popf
mov
mov
call
in
cld
in
or
jmp
inc
stos
mov
call
jbe
sub
cmp
mov
xchg
sbb
pop
jmp
or
lods
(bad)
xchg
adc
jecxz
and
inc
mov
add
popf
lods
dec
xchg
mov
sbb
(bad)
std
jge
adc
mov
test
imul
mov
jo
pop
xchg
xchg
mov
repnz
loope
dec
pop
fidivr
or
cwde
mov
mov
sub
xchg
and
push
mov
pop
push
pop
cmp
in
mov
repnz
add
jp
xor
xor
(bad)
js
cwde
sub
adc
adc
cmp
cmp
clc
pushf
push
mov
loop
repz
call
call
cdq
pushf
cmps
stos
cwde
ss
jle
cwde
dec
xacquire
cwde
pop
ds
jb
inc
pop
jp
dec
lahf
bound
(bad)
adc
inc
icebp
mov
fsubr
xlat
ret
js
call
loopne
aas
test
add
jle
lahf
call
repnz
nop
mov
cmp
jmp
push
in
push
cmp
xchg
sub
fdivr
and
adc
pop
pop
adc
jge
mov
test
rdmsr
in
sub
cwde
xchg
clc
es
lods
sub
mov
outs
fwait
scas
sbb
(bad)
or
neg
fld
popf
cwde
xor
popa
mov
xchg
inc
(bad)
pop
adc
out
jmp
xchg
loope
adc
imul
adc
cmps
mov
and
in
les
cwde
jnp
push
ins
jle
xchg
fstp
das
jg
data16
mov
(bad)
mov
scas
outs
sub
cwde
cmp
xlat
ret
dec
cmp
adc
inc
or
cmp
cmp
and
fmulp
push
adc
popa
cmp
xchg
cwde
fmul
or
mov
nop
shl
int
xlat
cwde
pop
cmp
stc
sbb
adc
cli
push
mov
inc
(bad)
cwde
movs
mov
clc
sub
loopne
jne
push
imul
ja
jo
retf
(bad)
cwde
into
pusha
xor
cmp
aaa
cmp
mov
clc
(bad)
sahf
cwde
inc
and
push
pop
cmp
scas
shl
fild
aad
scas
cwde
pusha
shl
shl
sbb
mov
xchg
pop
or
adc
popa
cmps
cmp
out
fsub
fidivr
jmp
aad
loopne
rcr
loope
xchg
mov
das
and
les
pop
sbb
sbb
jae
cwde
mov
or
pushf
add
add
inc
(bad)
xor
push
dec
fisub
sbb
sbb
xchg
or
xchg
jp
leave
sbb
stos
jmp
in
jmp
xchg
or
or
adc
in
scas
sub
addr16
xor
jp
sbb
pop
add
loope
cwde
cld
or
cwde
cmc
(bad)
int
out
xor
out
loop
fcmovnu
iret
loopne
clc
sub
in
(bad)
test
popf
sub
mov
sub
into
mul
adc
enter
adc
sub
ret
mov
pop
and
sar
inc
scas
push
aam
dec
jbe
jns
or
cs
int
mov
jb
mov
dec
imul
int3
into
mov
test
in
popf
jle
xchg
jl
sub
inc
mov
lea
retf
or
pop
(bad)
gs
push
cmp
lahf
sbb
ror
mov
adc
aas
cmp
cmp
js
sbb
cwde
mov
or
push
mov
push
(bad)
cmp
jmp
cmp
or
sbb
js
into
add
adc
stc
sub
rcr
aaa
add
cwde
xchg
and
jmp
mov
aas
sbb
mov
add
inc
jno
jl
imul
cmp
mov
mov
lock
leave
sub
mov
xchg
outs
cli
sub
adc
popf
mov
mov
add
outs
cwde
shl
fs
mov
push
out
aaa
test
cdq
jns
xchg
mov
fisub
or
call
xlat
dec
rep
call
dec
repz
push
cwde
pop
cmp
push
cwde
and
jle
cwde
neg
jmp
ret
jmp
xchg
arpl
lea
out
xchg
cwde
mov
mov
adc
mov
ins
rol
cwde
pop
xchg
mov
mov
out
push
xchg
mov
dec
xchg
jno
cmps
mov
mov
rcl
(bad)
push
retf
cwde
int3
add
mov
push
xchg
sbb
aas
outs
sbb
mov
push
xor
sub
daa
cmp
jae
cwde
push
addr16
mov
sub
js
pop
jg
inc
cmp
mov
ror
xchg
clc
dec
or
repnz
and
jp
xor
sbb
and
retf
xchg
mov
pop
inc
aaa
outs
sbb
cmp
push
(bad)
std
enter
pop
add
cs
out
pop
sub
arpl
in
es
rcl
movs
leave
inc
out
scas
fcomp
sbb
mov
repz
outs
adc
xor
dec
ffree
out
fs
ins
dec
cmp
leave
sbb
sub
lods
je
sahf
out
cmp
ins
push
in
shl
xchg
add
sti
cmps
aaa
out
pusha
inc
into
add
cmp
jns
inc
mov
dec
mov
sbb
or
cmp
not
xor
inc
push
aam
cld
test
ins
lods
nop
jg
call
jbe
movs
test
jge
sbb
pop
xchg
cmp
ins
jle
jg
hlt
test
sub
xchg
and
mov
or
pop
(bad)
ins
sub
push
in
test
cwde
and
mov
mov
fwait
mov
retf
stc
or
lods
mov
ins
scas
cwde
mov
lahf
repnz
scas
inc
or
in
test
gs
test
and
xchg
fdivr
shr
dec
pop
sbb
lahf
fs
popa
jno
(bad)
mov
push
popf
pop
repz
cdq
cmps
fsubr
iret
adc
cwde
push
mov
jbe
outs
jl
jo
fdiv
adc
jno
sub
mov
sub
fs
clc
cwde
retf
rol
ret
aam
push
jl
std
out
loope
push
scas
mov
gs
xchg
(bad)
jmp
call
ja
cmp
sub
cwde
jecxz
stc
mov
lods
test
mov
ins
jnp
dec
gs
mov
sub
fdivr
rcl
popf
lock
cmp
clc
cmp
adc
push
inc
pop
ret
push
jmp
test
ins
cmp
cwde
adc
mov
mov
push
in
xchg
fisub
and
(bad)
mov
jae
sub
jbe
mov
ror
loopne
nop
scas
lahf
das
add
adc
aad
repz
imul
pop
sub
lds
lods
cwde
push
aas
mov
iret
xchg
cwde
out
adc
shl
mov
lods
dec
cwde
js
inc
dec
push
mov
xchg
xor
sub
stc
std
retf
repz
xchg
mov
cs
stos
pop
add
mov
cwde
push
lea
inc
inc
add
or
stos
outs
imul
mov
cwde
nop
xor
(bad)
pop
lock
ret
cmp
jo
fsubr
inc
or
cmp
inc
sbb
or
lahf
lods
ins
or
pop
dec
mov
pop
xor
loope
hlt
sbb
push
sub
and
fimul
sbb
mov
cwde
mov
inc
sub
mov
data16
sub
gs
jg
mov
sbb
jbe
sub
mov
inc
xchg
pop
adc
lods
xchg
xor
pop
pop
jo
dec
cmp
cwde
div
xchg
xor
dec
jb
cwde
adc
or
pop
and
sub
(bad)
jmp
icebp
mov
iret
or
cwde
pop
cli
loop
mov
push
sbb
push
or
bound
mov
pop
cwde
inc
push
jg
jge
mov
stc
push
and
loope
sub
fstp
inc
fadd
mov
adc
cwde
es
pop
mov
add
cmps
inc
imul
mov
out
xor
inc
fdiv
mov
and
and
and
push
push
out
in
retf
mov
aas
pop
nop
xchg
loopne
sub
dec
mul
cwde
inc
mov
push
sbb
loopne
inc
xchg
mov
cmps
(bad)
mov
aad
or
into
inc
cwde
call
and
mov
adc
push
fwait
xchg
repz
test
cld
inc
pusha
push
cmp
jno
dec
push
push
mov
idiv
cwde
in
ret
dec
daa
leave
in
adc
(bad)
mov
add
cli
or
xchg
call
dec
mov
jg
push
dec
mov
call
xchg
bound
cwde
ret
arpl
sar
shl
xchg
mov
not
icebp
rcr
test
sar
jo
xchg
sbb
lea
outs
out
out
test
iret
mov
cwde
stos
mov
sbb
lock
mov
call
inc
jns
jle
popf
sbb
popf
mov
rcl
leave
cwde
int
push
xor
mov
nop
cmps
mov
cs
loopne
inc
mov
sub
pop
cwde
sub
push
pop
cmp
sub
push
and
cmc
sub
clc
sub
enter
int3
push
mov
mov
stc
mov
xchg
shr
outs
pop
xchg
inc
cs
call
jmp
push
adc
cwde
clc
fstp
out
push
jl
cwde
or
ret
sti
dec
add
sbb
xchg
cwde
gs
xor
xchg
push
sub
mov
sub
popf
pop
gs
fisubr
mov
jbe
cmp
(bad)
enter
mov
adc
add
cwde
mov
or
or
ja
mov
cwde
dec
dec
int
push
pop
cmps
cwde
sub
in
xor
test
div
cli
mov
inc
cwde
mov
sub
jg
data16
imul
pop
and
inc
test
sti
outs
jne
mov
and
enter
ins
cwde
js
cli
fistp
frstor
cwde
xchg
sbb
stos
lahf
jns
clc
push
sbb
in
jmp
ret
hlt
call
push
jb
sbb
push
pop
jmp
jmp
(bad)
push
in
inc
cwde
loop
adc
pop
enter
xchg
push
xchg
lods
mov
les
xchg
xchg
push
push
clc
ret
cwde
pushf
add
hlt
xchg
jns
xlat
popf
sub
imul
test
lds
loopne
jecxz
test
nop
jae
jmp
test
ret
jmp
xchg
or
sub
pushf
or
mov
pushf
xchg
cdq
adc
xchg
mov
int3
(bad)
fwait
xor
(bad)
xor
mov
jle
push
add
and
cld
sub
dec
adc
into
adc
js
test
mov
js
sbb
jecxz
xchg
cwde
dec
push
dec
sub
jbe
nop
mov
into
sub
imul
cmp
in
push
out
(bad)
sti
idiv
and
fstp
and
lahf
or
adc
cwde
sub
js
stos
mov
cmp
out
pop
mov
or
cwde
push
mov
sbb
and
nop
fdivr
xor
mov
push
jb
lahf
pop
js
pop
ret
sub
mov
loope
stos
mov
call
mov
dec
fsub
push
mov
inc
xchg
push
push
leave
bound
pusha
xchg
dec
push
(bad)
mov
outs
addr16
enter
dec
mov
rcl
scas
lahf
inc
xor
je
cmp
bound
sbb
sub
jge
lock
pusha
fcmove
(bad)
aam
xchg
push
xchg
pop
fnsave
das
dec
shl
loope
cwde
fist
push
pop
in
inc
xchg
jnp
push
sub
clc
js
dec
adc
sub
retf
xchg
cmp
pushf
jge
jb
cwde
mov
mov
cdq
sbb
movs
push
ss
inc
adc
das
and
fcomp
add
in
adc
retf
push
dec
pop
out
mov
adc
cmp
aaa
dec
push
xor
add
lock
out
push
xchg
mov
push
out
xchg
xor
mov
sbb
out
or
mov
dec
push
xchg
popa
js
mov
sub
inc
(bad)
cwde
pop
xchg
push
jbe
clc
add
or
cmp
enter
jb
aaa
fwait
add
xchg
cmc
add
mov
and
mov
or
mov
mov
mov
call
ret
test
pushf
sti
iret
mov
lahf
cwde
mov
jmp
mov
jl
and
cwde
jp
mov
enter
xor
xchg
gs
xchg
mov
test
test
xchg
ror
stos
xchg
push
ret
jnp
jg
repz
test
mov
scas
in
leave
cmp
test
dec
cli
mov
pop
popf
ds
lods
fs
push
(bad)
movs
push
sbb
dec
xor
pop
and
or
pop
cwde
(bad)
fstp
xchg
cwde
mov
adc
xor
inc
imul
mov
adc
mov
xor
rol
hlt
cli
jae
lahf
xor
push
sbb
push
cmp
xor
dec
mov
mov
jae
out
or
ds
adc
mov
pushf
xchg
data16
cmps
jp
bound
popf
mov
or
ds
fld
cs
in
ss
sti
mov
shr
xor
pop
jle
cmps
outs
call
imul
xchg
clc
scas
and
mov
mov
cmp
ss
(bad)
mov
(bad)
fld
and
xchg
mov
inc
leave
enter
pop
and
outs
enter
xchg
xchg
lds
les
jp
lahf
fist
mov
test
aas
imul
mov
inc
add
mov
test
xchg
sti
xchg
jl
daa
dec
movs
xor
or
or
lods
js
inc
shr
imul
adc
mov
ins
cwde
mov
out
clc
xchg
in
je
push
dec
sub
aaa
push
in
call
or
das
jg
pop
adc
sub
or
frstor
rcr
adc
mov
pushf
int3
push
shl
xor
adc
call
pop
cwde
retf
mov
sar
sbb
call
pop
das
xor
xor
add
ss
xor
cmp
fiadd
fsubr
mov
cmc
lods
sbb
retf
or
jb
push
gs
jge
or
or
cwde
cmp
push
or
or
cmp
sbb
cwde
sbb
pop
rcr
push
inc
ficom
pop
cmp
pop
retf
pop
xchg
mov
add
push
jmp
inc
pop
xchg
aaa
jo
fcomp
cwde
(bad)
test
jns
cwde
and
outs
pop
or
sbb
push
daa
push
xor
pop
cmps
sbb
jmp
xor
leave
shl
xchg
mov
jae
fdiv
inc
pop
adc
imul
mov
mov
mov
push
adc
cmp
sub
dec
pop
scas
mov
shr
push
pop
(bad)
jmp
loop
enter
push
jg
ret
call
aam
cwde
inc
pop
mov
ds
push
and
inc
cwde
sbb
ffree
test
xlat
sub
shr
inc
or
mov
xor
lods
sbb
mov
cmp
cmps
inc
jo
xchg
mov
xor
leave
lds
xor
cmc
ret
retf
in
in
and
jno
aam
(bad)
js
inc
cwde
or
cmc
xchg
push
cwde
or
jge
jg
lahf
jne
pop
jbe
mov
dec
loopne
mov
xchg
test
mov
daa
pop
arpl
ja
movs
fist
sub
mov
and
sbb
ror
stos
lods
ds
call
xchg
lods
arpl
cwde
jb
pushf
jge
mov
scas
enter
sbb
lea
cmp
mov
mov
ret
xchg
mov
pusha
popf
js
cmp
call
xor
pop
cwde
jecxz
jg
out
(bad)
cld
xor
je
xchg
es
mov
jge
jbe
ret
mov
clc
mov
adc
gs
cli
xchg
xor
push
adc
jg
xchg
adc
(bad)
mov
pop
leave
jns
test
pop
push
and
xor
sbb
xor
inc
in
mov
inc
dec
xor
shl
jae
xchg
dec
jp
imul
jl
mov
int3
sbb
xchg
inc
sbb
mov
(bad)
stos
ins
loope
mov
xchg
rol
lea
mov
xchg
jecxz
retf
inc
mov
in
setno
test
dec
mov
hlt
stc
bound
fs
leave
fsub
pop
setl
adc
or
fdiv
mov
jecxz
ret
and
ja
or
call
movs
jecxz
movs
(bad)
push
pop
mov
in
outs
pop
arpl
cmp
cwde
leave
sar
cwde
sti
xchg
jp
lds
mov
ins
pop
jb
clc
or
shr
mov
xor
cwde
dec
sti
xchg
(bad)
es
fidiv
fcom
mov
inc
pop
call
cld
retf
jecxz
lock
jl
dec
mov
js
xchg
dec
inc
sahf
retf
or
cmp
(bad)
int
ins
cdq
int3
add
sub
pop
mov
push
xchg
fcom
pop
pop
adc
xchg
jo
push
rcr
xchg
cli
sub
xchg
jne
clc
mov
neg
lods
fstp
pop
push
frstor
nop
pop
rcr
mov
dec
add
neg
lds
dec
test
aas
cwde
adc
mov
ret
inc
jl
cwde
mov
shl
jmp
inc
sub
inc
nop/reserved
cwde
bnd
pop
pop
sbb
enter
or
pop
stos
mov
cwde
int3
inc
es
fwait
jecxz
lahf
cmps
gs
in
xor
stc
or
fstp
mov
jge
inc
mov
add
js
xchg
jae
jge
or
sub
add
xchg
pop
add
sbb
jg
call
in
jne
or
call
in
or
pop
xchg
xor
inc
cmp
jns
dec
adc
push
and
ins
sbb
cld
adc
out
push
mov
bound
shl
inc
cwde
adc
pop
shl
(bad)
jmp
cmp
mov
sub
mov
test
push
add
push
and
leave
bound
fidiv
scas
mov
or
push
dec
push
dec
fadd
lods
mov
jno
cs
je
jbe
cwde
mul
push
sub
dec
call
aaa
mov
scas
inc
shr
icebp
lock
push
sti
and
fcmovbe
mov
fld
mov
xchg
pop
les
xchg
xor
leave
or
push
and
repz
sti
aam
mov
arpl
mov
out
scas
jmp
mov
(bad)
mov
cmp
lahf
jbe
dec
xor
nop
test
add
mov
jne
ins
xchg
mov
xchg
mov
push
retf
aad
fcomp
imul
push
push
jmp
inc
shl
dec
add
sbb
pop
jo
push
mov
aas
mov
imul
fldcw
jecxz
ret
out
in
nop
inc
cwde
sbb
lods
mov
sub
ins
(bad)
sub
cs
sub
sbb
retf
adc
adc
int3
push
or
ror
clc
cwde
popa
rol
sub
cdq
into
shr
icebp
sbb
daa
(bad)
adc
imul
push
cwde
jmp
imul
fiadd
inc
sar
ds
sbb
std
sar
loop
adc
fnsave
idiv
mov
data16
cwde
xchg
mov
or
adc
jge
xchg
push
inc
stos
mov
cwde
fstp
clc
sub
pusha
and
sub
inc
push
ins
jb
or
bound
cmp
mov
sub
jne
jns
hlt
(bad)
xchg
xchg
repz
and
sahf
movs
mov
mov
mov
xor
stos
idiv
(bad)
cmps
out
call
jbe
xchg
pop
aad
mov
cwde
jo
xor
push
xor
or
loope
xor
int3
in
cwde
xchg
test
mov
mov
fwait
sub
cmps
(bad)
cwde
mov
bound
test
add
jmp
adc
imul
xchg
inc
sub
gs
js
(bad)
jmp
sbb
cmc
and
loop
mov
add
repnz
mov
scas
aaa
sbb
xor
and
xor
int
pop
xchg
xlat
movs
out
repz
in
sub
xchg
pop
pop
aas
imul
clc
arpl
stc
lods
cs
mov
clc
pushf
xchg
rcl
lds
cmp
and
ja
imul
hlt
mov
cwde
inc
pop
and
in
inc
repz
movs
shl
popf
mov
push
mov
ret
xlat
mov
mov
cld
pop
cs
out
jmp
mov
loope
cdq
pop
cwde
outs
jle
loopne
or
xchg
enter
outs
cwde
sbb
addr16
lahf
sar
es
xchg
enter
cmp
push
cwde
hlt
inc
fdivr
and
stc
xchg
retf
jmp
in
jle
out
movs
cwde
push
sub
and
call
mov
clc
jmp
fbld
xor
xchg
mov
adc
cmp
sbb
or
inc
pop
in
in
jnp
xchg
push
jae
mov
or
cwde
mov
sar
pop
xlat
cmp
dec
jle
sbb
xchg
push
or
lahf
cmp
ss
fnsave
sbb
jp
lods
xor
scas
pop
cmp
mov
mov
cdq
test
in
hlt
xor
push
daa
arpl
add
sub
xor
add
not
cwde
jb
jbe
cdq
bound
mov
cs
inc
or
out
mov
pop
and
pop
sbb
and
in
cmp
xchg
cld
inc
cwde
jecxz
test
int
por
(bad)
adc
dec
fild
ret
cwde
or
jecxz
adc
addr16
test
jbe
fild
hlt
push
imul
fs
fdiv
pop
pop
xor
push
add
popf
pop
xchg
xor
cwde
dec
dec
push
jmp
imul
xor
retf
jne
int3
fs
pop
and
xchg
push
jmp
clc
adc
xchg
mov
pop
cmp
pop
lock
push
sub
mov
push
push
mov
inc
cmp
jns
xlat
add
pop
or
mov
mov
cmps
mov
sub
retf
nop
test
es
and
or
aaa
add
lahf
lods
mov
jmp
pop
push
sbb
cmp
call
gs
sub
repz
cmc
out
pop
and
inc
dec
push
adc
lea
fucomi
and
push
jge
dec
mov
loop
popf
push
jmp
cwde
ja
xchg
fwait
jp
mov
in
cwde
pop
ins
pushf
push
(bad)
cmp
sahf
cwde
cmps
popf
dec
mov
in
sbb
and
cmps
inc
jno
into
dec
das
pop
xchg
mov
xchg
rcl
out
js
lods
jb
pusha
repz
rcl
adc
sub
cwde
push
sub
pop
jns
xchg
mov
or
sbb
(bad)
repnz
add
out
fidivr
cwde
mov
pop
adc
ror
sub
xchg
lods
add
adc
and
mov
bound
xchg
(bad)
push
out
mov
add
pop
mov
fisub
sub
or
fdiv
rcr
cwde
sbb
or
nop
sbb
lock
pop
cwde
add
in
loopne
mov
lods
mov
lods
dec
imul
int3
stos
std
xchg
shr
push
dec
leave
xchg
jae
push
cmps
sbb
fbld
pop
test
mov
popf
fwait
cwde
test
mov
test
(bad)
jmp
fldenv
mov
push
sbb
sbb
ins
add
cld
cwde
test
(bad)
mov
test
xchg
cmps
fs
aaa
or
out
neg
pop
dec
push
mov
mov
xchg
cwde
jno
add
fisubr
ins
pop
adc
scas
popa
cwde
dec
int3
ffree
loopne
or
cmp
mov
neg
scas
ins
sbb
inc
out
mov
mov
xlat
jne
adc
test
add
mov
cwde
and
cwde
jmp
pop
ret
shl
sbb
sbb
jmp
add
pop
in
in
xchg
and
cmc
fisubr
cwde
mov
jnp
sub
addr16
faddp
stos
jecxz
add
push
mov
xor
test
xchg
mov
adc
xchg
fstp
fsubr
add
mov
aad
mov
fimul
jle
and
jbe
int
mov
pushf
cwde
xor
inc
and
cwde
cmp
jb
jmp
push
jle
dec
mov
cwde
neg
scas
frstor
adc
cwde
dec
jns
(bad)
inc
imul
and
cmps
xchg
xchg
or
pop
or
idiv
sub
push
push
cmp
(bad)
in
push
jb
jle
cwde
lock
pop
in
mov
push
pop
(bad)
and
call
mov
xchg
cwde
mov
jbe
xchg
nop
cmps
pop
sub
mov
adc
mov
cmp
adc
xchg
js
xchg
es
enter
stc
fidivr
xchg
dec
out
mov
arpl
dec
cmp
jmp
test
sbb
test
mov
or
movs
add
jmp
lahf
pop
and
and
stc
or
dec
and
add
gs
mov
fisub
cmp
push
mov
mov
sbb
mov
sbb
fimul
not
pop
jmp
mov
enter
push
loop
das
ja
mov
stc
cmp
pop
jecxz
push
pop
aad
or
imul
adc
mov
and
(bad)
stc
ja
addr16
push
dec
push
jmp
ret
xor
jp
pop
mov
fs
inc
fld
add
mov
les
pop
mov
inc
push
loop
mov
pop
ins
push
test
sbb
jmp
xor
push
je
imul
call
(bad)
and
or
sub
scas
adc
mov
lock
inc
test
push
or
sbb
xchg
repnz
outs
fistp
cmp
scas
(bad)
xchg
adc
mov
ss
dec
jne
jle
enter
ret
xor
cwde
jge
inc
lock
and
pusha
movs
xchg
mov
xor
mov
jle
mov
jne
inc
aas
aam
pop
sub
das
nop
nop
jge
mov
in
cmp
cmp
icebp
cwde
and
inc
push
mov
fild
mov
sub
pop
and
ds
cmp
dec
stos
xchg
mov
push
mov
ret
mov
push
jmp
mov
push
xchg
lea
pop
loope
callw
in
mov
add
sub
pop
sub
cs
and
xchg
mov
loope
add
js
fs
mov
lea
cwde
mov
(bad)
fistp
and
lock
jo
sbb
pushf
jge
mov
aaa
sbb
push
int
push
sub
out
cwde
aaa
cld
sbb
xchg
push
call
add
push
outs
mov
scas
cwde
fwait
mov
fcomp
fidivr
cli
(bad)
call
fcom
loope
stos
mov
out
adc
and
pusha
ror
xor
mov
nop
push
mov
sti
jmp
jp
clc
(bad)
sahf
(bad)
mov
sub
mov
fadd
add
jmp
mov
mov
iret
pop
loop
or
mov
aad
test
mov
inc
cwde
pushf
sahf
push
out
movq
or
outs
jbe
arpl
jl
clc
out
dec
sbb
jne
jge
cwde
mov
cld
pop
xchg
fistp
fild
inc
and
xchg
wrmsr
cmp
jecxz
ret
test
in
mov
cmp
popa
mov
ds
cld
(bad)
and
xlat
sahf
inc
mov
stos
lock
sti
adc
test
add
ror
jo
xchg
addr16
mov
std
push
(bad)
xchg
sub
jne
jl
xchg
dec
idiv
jecxz
jl
pop
mov
add
xor
mov
cwde
sub
cmps
int
fisub
xchg
in
repnz
std
cmp
out
add
cwde
inc
jb
mov
ret
sti
addr16
ret
sub
inc
or
fdiv
fdivr
out
into
std
sub
xor
mov
mov
out
cwde
cmp
pop
stos
rcr
sbb
xor
xor
inc
jg
xchg
jecxz
sbb
push
call
push
mov
stos
ds
fild
std
cwde
mov
icebp
mov
jne
jmp
sub
adc
dec
enter
cdq
std
add
push
enter
jge
mov
test
jnp
xchg
sbb
cmps
push
cwde
test
hlt
mov
cdq
(bad)
mov
sbb
dec
in
jbe
pusha
out
mov
mov
or
popf
xchg
les
dec
arpl
aad
lods
cwde
es
test
xor
inc
iret
or
xchg
adc
sbb
neg
cmps
mov
(bad)
(bad)
in
add
xor
das
jns
nop
sub
int3
data16
pop
xor
loopne
and
xchg
out
out
fst
push
dec
leave
in
add
jnp
cmp
cmp
test
sub
cwde
iret
pop
cmp
pushw
retf
xchg
sub
xor
rcr
mov
dec
aad
jecxz
shl
sbb
jb
xchg
inc
aaa
sbb
cmp
adc
fimul
cmp
je
jo
jns
cmp
out
icebp
xchg
lock
(bad)
cwde
inc
cmp
dec
das
cwde
xor
lods
pop
or
loope
and
out
cmp
cli
fmul
cwde
push
pop
loope
out
retf
xchg
cmp
mov
pop
jle
pop
ins
jae
stos
adc
retf
adc
mov
add
xchg
sar
or
xlat
and
jns
clc
push
sub
or
mov
cwde
cld
out
jg
inc
popf
data16
hlt
fnstenv
scas
clc
xor
fmul
in
fistp
push
cli
xchg
mov
jb
or
popf
push
pop
sub
inc
push
or
in
ficom
dec
mov
leave
pop
lahf
cmp
dec
ds
pop
xchg
mov
icebp
dec
cwde
cli
adc
jmp
bound
cwde
mov
stc
ret
(bad)
or
inc
test
lock
loope
(bad)
loopne
or
fmul
sub
xchg
aas
inc
mov
scas
cmp
shl
cmp
sub
sub
xor
sub
mov
cmp
in
icebp
sub
cmp
and
push
leave
dec
cmps
mov
jl
lods
test
mov
out
or
(bad)
or
cwde
dec
cs
sub
gs
imul
dec
call
xchg
fbstp
gs
xor
sub
or
and
mov
iret
test
push
cmp
idiv
add
jb
xchg
cwde
jp
and
and
fcom
push
adc
inc
mov
mov
out
push
jne
cwde
cld
sbb
cwde
inc
(bad)
and
retf
shl
(bad)
repz
pop
je
mov
outs
sbb
cmp
and
cwde
inc
cs
sub
loop
sbb
out
movs
mov
bound
mov
jns
mov
lea
cdq
enter
push
xchg
sub
outs
fsub
ins
imul
jl
inc
push
sbb
(bad)
xor
cwde
out
xchg
sub
mov
cdq
int3
pop
mov
xchg
pop
inc
inc
das
sbb
inc
push
jae
add
fcomp
leave
inc
push
out
in
jo
loope
scas
popa
cwde
pushf
addr16
popa
and
(bad)
mov
pop
fsubr
hlt
dec
cwde
ss
fwait
mov
sub
aad
and
inc
add
cwde
out
or
ret
jnp
pop
dec
sbb
loopne
clc
mov
mov
mov
icebp
pop
fild
lahf
mov
push
(bad)
es
data16
mov
ins
imul
xor
fwait
nop
inc
xlat
add
sahf
(bad)
jbe
sub
xchg
cmp
repnz
sub
xchg
add
(bad)
call
jmp
cwde
fcom
mov
out
push
clc
leave
and
pop
out
inc
xchg
mov
push
je
xor
jge
jbe
mov
sbb
or
out
fldcw
cwde
add
icebp
cmp
sbb
in
push
out
loope
mov
jo
mov
(bad)
outs
pop
cwde
push
add
enter
mov
jns
ja
mov
ins
dec
call
xor
outs
add
pusha
shr
or
cwde
sub
and
data16
repnz
xchg
jl
test
outs
fisub
push
adc
mov
sti
dec
add
dec
xchg
cs
mov
xchg
lea
aad
out
sar
outs
cwde
ja
mov
add
jmp
push
inc
scas
pusha
xor
pop
cwde
popf
popa
dec
aam
add
xor
rol
ja
mov
xlat
aad
sbb
xchg
cwde
mov
(bad)
repnz
push
xor
fldenv
dec
xor
mov
sti
or
dec
xchg
mov
push
jns
cs
cwde
or
bnd
lods
fwait
jg
cwde
pop
cmps
hlt
sub
cwde
fisttp
xor
cwde
fidiv
add
or
sub
pop
aaa
xchg
sbb
adc
mov
call
imul
push
mov
scas
cmp
fnstsw
daa
push
mov
mov
dec
add
ret
pop
(bad)
and
popf
jge
test
and
pop
arpl
jbe
leave
fdiv
sub
cmp
out
stos
fnsave
aaa
adc
jb
xchg
pushf
cmps
(bad)
jle
sbb
jg
and
push
jl
cwde
inc
fist
inc
pop
loop
shl
fld
ins
or
shl
popf
push
xchg
sub
mov
pop
imul
pop
pushf
push
test
adc
out
or
pop
repnz
aas
jbe
test
outs
jae
and
data16
inc
sub
sub
scas
ins
jge
jnp
mov
mov
and
je
pop
jns
fisub
add
bound
and
adc
or
dec
xchg
pop
dec
in
fdivr
test
mov
xchg
and
ret
repz
(bad)
xchg
xor
push
(bad)
sbb
inc
cmp
mov
sti
adc
nop
pop
test
xchg
test
mov
adc
and
sbb
mov
fdivr
out
jle
jo
xchg
inc
xor
icebp
mov
fs
cmc
mov
mov
cwde
fst
mov
movs
cwde
and
jmp
repnz
mov
xchg
popa
test
stos
xchg
cwde
gs
xchg
xlat
mov
add
push
movs
fcomp
je
sbb
test
(bad)
aaa
stos
int3
mov
cwde
adc
iret
cwde
adc
into
(bad)
retf
sbb
dec
lds
adc
cwde
adc
mov
push
xor
repnz
sbb
mov
cdq
dec
out
(bad)
sub
ins
jo
scas
mov
shr
or
cmp
ds
xchg
pop
mov
cmps
cdq
pop
xchg
mov
adc
popf
or
in
mov
mov
sbb
lods
retf
push
ss
fild
cld
mov
rcl
mul
push
lahf
xchg
dec
mov
call
cmp
sub
lahf
mov
fst
sbb
cmp
(bad)
std
mov
mov
aaa
cwde
adc
push
fimul
test
mov
enter
daa
ds
dec
xlat
sbb
push
mov
cmps
fdivr
mov
(bad)
jle
repz
jo
call
fimul
ins
xlat
or
mov
pushf
mov
in
test
cli
adc
ins
ficom
mov
mov
mov
cwde
fucomp
cmc
fnstenv
cmps
sbb
in
push
cwde
mov
lods
xor
cmc
jge
cld
sub
cwde
retf
push
push
outs
jg
stos
mov
scas
div
mov
in
out
loope
fchs
aam
xor
xchg
jmp
sahf
mov
jl
cdq
dec
push
addr16
and
inc
pop
pop
fwait
popa
cwde
fstp
ss
and
das
mov
pop
in
mov
call
jle
(bad)
repz
neg
outs
mov
cli
sbb
xchg
sbb
or
hlt
stc
test
jmp
and
loop
push
xchg
pusha
repz
add
ror
mov
jb
cwde
push
xor
or
jecxz
cmp
mov
pop
bound
test
cwde
push
xor
cwde
jnp
adc
sbb
gs
mov
call
cwde
cdq
inc
inc
and
out
jecxz
outs
jbe
add
js
xchg
sbb
lahf
add
je
jo
nop
mov
scas
sbb
xchg
in
sbb
xor
mov
daa
push
or
rcr
cmp
fs
cmp
dec
sub
cwde
mov
sbb
pop
adc
in
popw
mov
jb
cwde
adc
(bad)
adc
je
mov
addr16
aaa
outs
mov
fnstsw
push
mov
cmps
cwde
shl
and
fs
adc
mov
pop
jbe
mov
push
movs
pop
imul
xchg
outs
xor
aad
sub
push
cmp
mov
rcr
or
push
(bad)
jge
cwde
mov
ins
cwde
jmp
cdq
arpl
mov
test
lea
aaa
sbb
and
test
mov
mov
adc
jmp
mov
icebp
movs
in
pop
or
mov
imul
imul
mov
cwde
or
adc
add
scas
xchg
mov
(bad)
daa
aaa
push
movs
jle
push
mov
sbb
les
(bad)
cmp
fwait
out
cwde
repnz
pop
iret
sar
cwde
shr
pop
dec
push
gs
cwde
adc
xor
in
test
inc
cwde
inc
sub
jg
mov
repnz
sti
xchg
mov
jae
mov
(bad)
fnsave
fstp
js
lds
add
cmp
mov
push
js
iret
je
jno
fisubr
sub
or
aad
clc
sahf
(bad)
push
leave
nop
clc
xchg
cdq
scas
mov
je
scas
cwde
inc
in
out
mov
mov
lods
jl
cwde
mov
(bad)
outs
cwde
pusha
and
test
test
adc
jne
cwde
enter
add
test
cwde
mov
inc
sub
jb
movs
mov
fdivr
mov
dec
lahf
push
xor
cdq
jmp
retf
push
sub
popa
cdq
mov
retf
in
cmp
push
loope
in
fnstsw
jmp
sbb
add
push
push
sar
cli
xor
rcl
jbe
clc
and
mul
or
fadd
mov
jns
push
xlat
jmp
cwde
lea
xchg
pop
ss
and
dec
idiv
lods
clc
fisubr
in
jl
cwde
dec
mov
sbb
nop
xchg
mov
cld
ins
add
lea
mov
in
dec
adc
cmp
rcl
jno
or
sti
fidiv
movs
div
xchg
lds
aaa
pusha
sub
sub
daa
xchg
mov
jmp
dec
lahf
jo
arpl
xchg
aas
add
cwde
push
daa
add
add
cwde
test
mov
jns
in
sbb
sub
(bad)
and
dec
push
push
xchg
das
popf
or
icebp
les
jo
int3
pop
mov
out
shl
mov
jae
test
push
sbb
push
adc
xchg
cmp
inc
repz
scas
out
popf
ret
sbb
cdq
aas
popf
(bad)
rol
cwde
dec
(bad)
lock
cdq
pop
sub
(bad)
aas
call
je
(bad)
jae
cwde
inc
dec
popf
sub
xor
cwde
mov
or
inc
neg
mov
mov
movs
mov
in
mov
sbb
fstp
inc
mov
inc
inc
jecxz
and
push
imul
cwde
loop
test
cmps
xchg
mov
pop
push
daa
js
xchg
sub
mov
dec
sahf
stos
cld
bound
dec
mov
sub
imul
push
es
stc
xchg
xor
push
mov
das
dec
xchg
lods
xlat
mov
aad
add
std
adc
push
gs
mov
stos
and
stc
xor
inc
mov
xor
xchg
outs
mov
dec
pop
xchg
cmp
sbb
int3
cwde
(bad)
xchg
inc
mov
adc
es
cwde
mov
test
push
movs
rol
sub
sub
clc
shl
xor
push
es
cwde
test
adc
sbb
cmp
nop
cwde
das
xor
sbb
push
cwde
mov
and
dec
or
jg
xchg
pop
test
loop
adc
inc
jns
clc
(bad)
mov
and
rcl
test
cmc
inc
dec
jmp
into
pop
lods
push
mov
jge
test
sub
fsubr
jle
cmps
fisub
and
cwde
int
loope
mov
mov
mov
in
mov
push
cwde
xchg
fisubr
loopne
ins
jbe
movs
mov
(bad)
sub
clc
data16
or
imul
cli
nop
js
mov
leave
adc
in
xchg
lods
mov
test
or
or
jl
lahf
int3
rol
push
cmc
enter
dec
dec
mov
xchg
nop
add
aaa
pop
mov
enter
addr16
jae
call
mov
add
arpl
dec
or
mov
(bad)
in
neg
mov
gs
addr16
adc
sbb
or
repnz
arpl
dec
ret
loope
bound
push
in
repz
fisubr
scas
fisubr
adc
movlps
and
dec
aaa
pop
imul
mov
pop
out
xchg
push
sbb
repz
xor
cwde
dec
and
stos
cwde
cld
int
adc
xor
jl
mov
add
inc
fstp
jmp
sbb
mov
js
xchg
cmps
jne
mov
jmp
xchg
pop
and
ret
dec
jns
sbb
fldcw
mov
stc
mov
leave
out
xchg
add
jne
pop
cwde
sub
call
mov
(bad)
mov
cmp
xchg
and
mov
ins
add
fs
shr
cwde
sub
jecxz
add
(bad)
imul
xchg
int
in
cld
adc
loop
jecxz
adc
cmp
jbe
cwde
and
push
push
mov
inc
or
dec
dec
imul
ins
cwde
arpl
pop
gs
call
ds
(bad)
(bad)
mov
(bad)
jg
cwde
add
cwde
mov
hlt
(bad)
shr
inc
sti
and
mov
sbb
cmc
mov
sbb
rcr
outs
adc
push
cmp
xor
inc
stc
push
call
sub
sbb
cdq
cmp
inc
movhps
scas
jbe
fdivr
mov
jb
xchg
jmp
loope
std
outs
or
cmp
popf
xor
pop
outs
in
fadd
(bad)
or
jno
pushf
cmps
into
and
xchg
cwde
(bad)
mov
or
jg
clc
fcomp
jb
scas
jl
sbb
in
jp
fld
xor
mov
mov
dec
inc
aam
cmp
mov
mov
out
fldcw
in
cwde
in
dec
cmp
sub
out
sbb
sub
movs
mov
into
add
pop
jo
sbb
cmp
xchg
bound
or
(bad)
(bad)
jo
mov
bound
mov
in
int
sti
shl
jl
push
shl
std
adc
in
sbb
test
fwait
xchg
mov
jne
(bad)
pop
adc
jecxz
pop
add
mov
cwde
or
xor
ins
fnstenv
stos
popa
push
repz
adc
xchg
into
and
add
and
lods
mov
sbb
push
ja
jns
or
pop
sub
icebp
cwde
pop
mov
(bad)
aam
iret
xor
hlt
in
neg
cmp
call
sub
cwde
ss
cmp
(bad)
(bad)
fcmove
outs
cwde
inc
and
xchg
cs
cwde
push
pop
enter
push
(bad)
sar
pop
xor
cwde
into
inc
jmp
je
sub
cld
fcmovb
push
dec
sub
loop
xchg
mov
ss
inc
cli
pop
mov
mov
pop
adc
add
pop
cdq
in
movs
test
test
fisubr
push
cmps
xchg
dec
std
jne
xchg
xor
add
pusha
mov
lds
lods
adc
mov
push
pop
and
scas
sub
(bad)
mov
dec
xchg
in
xchg
hlt
ret
add
cmp
dec
mov
(bad)
int
lea
fwait
inc
xchg
pop
fisub
pushf
mov
mov
xor
clc
out
add
stc
(bad)
in
cwde
out
inc
pop
jmp
mov
mov
xor
cmc
xchg
adc
jns
sbb
mov
leave
jae
ret
mov
retf
mov
adc
inc
ins
cmp
jae
pop
jb
cwde
mov
ins
(bad)
rcr
inc
xor
repz
cli
xchg
(bad)
cwde
fstp
lods
call
add
sub
sub
mov
add
les
jne
es
call
mov
cmps
cmp
add
cmps
mov
es
int
pop
sub
mov
mov
int3
sub
and
mov
push
add
js
add
fsub
je
push
and
cld
mov
adc
sbb
xchg
es
loop
scas
push
mov
pop
mov
cwde
jle
icebp
ds
popa
jae
inc
and
add
fucomi
std
mov
xchg
and
clc
pushf
out
xor
outs
xchg
cwde
pushf
arpl
outs
fidivr
sahf
movs
lea
mov
mov
add
aas
inc
inc
adc
shr
clc
fist
jmp
cwde
stc
je
(bad)
mov
jle
xchg
xchg
push
cmp
inc
sbb
fstp
or
fnstenv
sub
push
sub
sar
or
pop
popa
pushfw
or
xchg
call
mov
push
push
sub
xchg
pusha
pop
and
push
sti
rol
cmp
xor
sub
push
aam
push
push
or
clc
cwde
mov
mov
xchg
imul
scas
push
jo
push
jnp
and
rol
mov
jmp
jmp
pusha
inc
sbb
cmp
mov
inc
mov
pushf
dec
dec
mov
sbb
and
mov
inc
das
mov
inc
icebp
ret
mov
inc
xchg
add
push
adc
leave
(bad)
ins
mov
aam
popf
cmp
pop
xchg
stos
mov
scas
sbb
push
and
jle
jo
pop
adc
aam
adc
fs
sub
sbb
sub
popf
loopne
bound
stos
mov
mov
cwde
adc
out
ins
fadd
jnp
jno
xor
mov
addr16
sub
out
cwde
shr
fdivr
pop
dec
push
scas
call
mov
xor
mov
int3
fbstp
mov
mov
jae
dec
cwde
icebp
cmc
mov
mov
icebp
call
sub
call
dec
cmp
sbb
xchg
inc
jb
adc
sahf
inc
dec
fs
mov
jmp
not
sbb
sub
pop
cwde
das
mov
push
cld
jbe
xchg
push
dec
jns
data16
sbb
cmp
fisttp
cwde
int3
sbb
or
add
iret
fwait
pop
rcl
and
test
sbb
mov
dec
mov
in
fcompp
(bad)
jg
in
call
rcr
jl
stc
push
lods
je
test
dec
push
cld
xor
cwde
jo
xchg
jle
fs
jp
mov
fwait
popf
data16
and
jle
jbe
and
out
test
enter
hlt
cdq
jecxz
adc
cwde
pop
data16
add
(bad)
fcom
cmp
pop
fsub
or
cwde
retf
jecxz
sbb
std
fs
mov
sub
ja
push
adc
movs
ins
dec
pop
cwde
ja
mov
(bad)
test
repz
call
mov
jns
push
jp
(bad)
fcompp
leave
sub
pop
sbb
fcmovnbe
mov
cwde
shl
repz
xor
jp
dec
es
lods
and
push
xor
push
dec
out
jecxz
arpl
jmp
lea
jl
rcr
pop
push
fs
or
xchg
mov
jbe
jns
loop
icebp
adc
ficomp
jg
xchg
jg
leave
mov
xchg
ja
ins
jge
fidivr
pop
jbe
sbb
pop
push
push
imul
test
and
ja
inc
jbe
fcomp
test
sbb
lds
(bad)
xlat
neg
fsubr
add
push
fmul
inc
dec
stos
mov
cld
cmp
popf
xor
and
enter
aas
pop
cmp
imul
mov
mov
popa
mov
loope
sub
adc
inc
sub
push
cwde
mov
loope
mov
jo
ret
push
es
js
inc
movs
push
lock
adc
push
popa
aad
mov
mov
je
xchg
shl
or
sub
mov
jg
mov
cwde
push
(bad)
outs
or
lds
push
jnp
sbb
add
mov
mov
jecxz
jae
cmc
in
sbb
add
nop
popf
cwde
jo
mov
cmps
icebp
ret
(bad)
cwde
jl
mov
cwde
pop
shl
add
sbb
aad
shr
(bad)
adc
mov
(bad)
pop
mov
bound
push
cmp
cwde
retf
xor
aaa
enter
cwde
rcl
mov
push
dec
in
popa
test
sbb
xchg
xchg
mov
add
inc
fist
adc
and
cwde
push
test
shl
xchg
xlat
dec
add
test
pop
or
pop
loopne
cmp
jmp
cwde
cli
dec
(bad)
xchg
inc
rol
fadd
retf
xchg
outs
pop
mov
arpl
jne
xchg
pop
cwde
enter
mov
mov
pop
sbb
xchg
into
(bad)
cmc
adc
ins
js
jns
inc
push
sub
inc
dec
xchg
inc
pusha
inc
cmp
lahf
pop
sub
and
xchg
lock
mov
jge
mov
or
out
or
dec
cmps
mov
es
(bad)
dec
push
loope
mov
push
or
sbb
jmp
cwde
and
mov
mov
pop
in
xchg
data16
xchg
movs
cmps
jmp
adc
into
pop
scas
ins
jae
cwde
ficom
sbb
xor
lahf
xor
jns
dec
jbe
lock
mov
imul
inc
sbb
mov
xor
fisttp
outs
adc
xchg
cdq
gs
push
mov
xchg
bound
pop
xor
call
outs
je
ins
xchg
rcr
dec
xor
les
loop
out
pop
add
cdq
outs
fst
movs
mov
xor
xchg
add
push
inc
add
and
pop
jge
add
mov
fs
mov
pop
cwde
cmp
cmp
mov
(bad)
shl
cmp
xchg
out
and
lock
fisubr
ins
mov
cmp
or
mov
mov
pop
ja
ficom
in
ret
clc
ret
scas
pushf
fs
and
sub
rcl
mov
cwde
adc
sub
dec
scas
icebp
les
aaa
repnz
fmulp
sub
ror
cmp
pop
cwde
bound
mov
cwde
sbb
jecxz
cmp
jle
stc
mov
dec
mov
or
ret
call
into
xor
add
das
add
movs
cmc
pop
push
inc
cmp
je
mov
punpcklbw
sahf
mov
inc
call
cwde
and
adc
sub
cwde
test
add
les
push
pop
lahf
xchg
or
cwde
xchg
push
mov
int
sar
or
jb
add
fwait
cwde
sub
sub
ja
mov
not
jecxz
faddp
fdivr
bound
mov
xchg
push
adc
call
icebp
pop
xchg
mov
cli
push
adc
dec
clc
sbb
xor
out
loope
add
loope
leave
imul
push
rol
fisttp
sub
popf
cmps
mov
inc
mov
push
sbb
popf
lods
fs
xor
adc
adc
jo
icebp
add
mov
les
adc
mov
out
imul
xchg
push
cmps
mov
cli
ds
or
lods
nop
je
cs
in
ds
imul
and
cwde
jg
or
jle
mov
loope
add
lahf
dec
fnstenv
pop
adc
xchg
add
cwde
xchg
mov
cwde
stos
mov
dec
popa
jbe
cmps
pop
or
pop
(bad)
cwde
jl
ds
shl
mov
push
movs
mov
jmp
jle
retf
push
jbe
and
push
sub
jmp
cwde
and
or
mov
movs
out
dec
imul
test
punpckhbw
fnstsw
inc
pop
xchg
fwait
outs
lods
mov
(bad)
ins
jge
dec
push
mov
jo
call
icebp
shl
fcmove
jp
sbb
scas
dec
mov
sub
mov
fcom
lods
fcmovnbe
mov
and
imul
sbb
xor
jbe
fcomp
ds
je
outs
retf
and
push
adc
cmp
iret
or
sbb
cmp
xor
pop
stos
das
mov
or
or
test
jmp
push
out
adc
mov
cmps
enter
iret
aas
fisub
add
out
xchg
enter
out
and
popf
jnp
mov
cwde
add
and
add
jl
movs
inc
mov
pop
imul
call
data16
jge
scas
mov
retf
or
adc
push
pusha
jae
js
mov
jne
ins
popa
jecxz
jmp
xor
sbb
aaa
add
add
fisttp
mov
sbb
sbb
cwde
dec
mov
or
inc
push
fdiv
imul
iret
sub
lahf
(bad)
mov
mov
mov
aam
into
nop
pop
cwde
xlat
inc
mov
imul
pop
popf
mov
ja
sub
xchg
repnz
xchg
rcr
(bad)
pop
out
jo
or
push
and
or
lods
in
js
sbb
nop
ficomp
or
mov
idiv
sbb
sbb
fisub
in
stos
mov
fucomip
or
call
jbe
popa
xchg
lahf
das
inc
inc
pop
sub
xchg
gs
mov
cmp
int3
mov
loop
xchg
call
dec
inc
xlat
fcom
adc
iret
sub
rcr
push
in
outs
xchg
aam
(bad)
in
repz
or
sti
hlt
or
cmp
mov
cs
js
inc
ins
mov
jge
pop
mov
sbb
push
inc
push
dec
cs
inc
inc
cmp
xchg
pushf
push
jecxz
pop
mov
out
daa
or
scas
mov
inc
sti
jmp
sbb
cmps
mov
mov
cs
xchg
stos
movs
in
cmp
cwde
outs
push
jns
js
out
and
into
or
test
inc
push
fiadd
sub
and
repnz
in
jae
sahf
and
rcl
mov
or
scas
mov
pop
lods
test
fiadd
cwde
fadd
pop
and
ja
gs
jmp
mov
int
xlat
stos
sub
push
add
dec
mov
mov
lds
pop
je
add
add
cwde
fwait
push
jg
pop
adc
cwde
add
mov
or
sar
icebp
retf
or
(bad)
xchg
or
pop
pop
cmp
jmp
xchg
jmp
mov
pop
cmp
test
or
cmps
repnz
xchg
dec
fcom
pop
std
out
xor
cmp
ret
gs
adc
sub
les
cmp
mul
cwde
cmp
push
pushf
jns
push
push
mov
ins
fdivr
xchg
pop
into
(bad)
shl
xchg
mov
js
loopne
add
push
cmp
mov
stos
xchg
call
mov
inc
sbb
test
loopne
call
xor
and
fidivr
adc
dec
mov
add
outs
repz
jno
in
loopne
js
loopne
in
(bad)
jle
cmp
dec
push
sbb
fs
adc
jo
cwde
into
and
in
adc
inc
xchg
pop
aas
jns
leave
bound
test
data16
push
fisubr
xchg
shl
outs
xchg
loopne
push
dec
inc
cmp
push
mov
xchg
xchg
out
sbb
cdq
ins
ins
std
xchg
mov
push
mov
cwde
and
imul
loopne
int3
scas
xor
(bad)
cwde
mov
cmp
add
xor
inc
cmp
loopne
cmp
cmp
into
mov
push
cmp
pop
push
ffree
xlat
pusha
fsubr
popf
and
mov
inc
outs
mov
ror
sbb
mov
shl
cdq
sub
out
call
xchg
jp
loopne
push
in
mov
push
sub
sbb
sbb
lahf
bound
cmp
jo
outs
(bad)
xchg
sub
or
out
clc
jbe
xor
adc
push
and
out
(bad)
loope
data16
sub
adc
sbb
mov
call
sahf
adc
movs
ins
and
sti
call
jmp
add
imul
xlat
sbb
repnz
mov
nop
test
sub
cwde
scas
push
jmp
sub
mov
imul
and
mov
iret
xchg
or
mov
jae
rol
inc
call
inc
mov
mov
es
cmp
sub
mov
retf
in
int
mov
jae
mov
jecxz
xchg
xchg
arpl
cwde
sub
sub
cmp
xchg
imul
push
(bad)
cli
add
push
sahf
(bad)
int
xor
mov
push
int
mov
fucomi
xchg
ss
pop
and
xchg
(bad)
xchg
jns
retf
sbb
xor
xchg
fmulp
lods
loope
mov
sub
pop
imul
xchg
(bad)
dec
rcl
push
xchg
push
and
js
ror
jb
rcl
cwde
mov
aam
or
xor
(bad)
ret
ficomp
nop
lahf
mov
cwde
mov
sbb
dec
xchg
add
mov
push
fcom
mov
ret
popf
sbb
xchg
or
push
sub
shl
and
mov
sub
and
call
(bad)
pop
mov
mov
push
xor
pop
jne
test
retf
cwde
repz
xor
jg
jmp
jnp
cmp
dec
sub
cmps
ret
idiv
add
cmp
cwde
cmc
in
cmp
cli
addr16
cwde
hlt
int
pop
not
sti
mov
push
dec
mov
jl
pop
dec
mov
rcl
dec
inc
call
rcl
mov
jns
cmp
(bad)
cmp
mov
ins
inc
pop
pop
test
cwde
(bad)
out
(bad)
or
lahf
xchg
cmp
dec
cwde
cli
test
cmp
add
in
fstp
retf
enter
pushf
sbb
movs
cmp
push
jae
test
nop
loopne
dec
mov
xchg
xchg
imul
add
aam
in
cwde
inc
dec
arpl
add
xchg
xchg
mov
cmp
sbb
in
es
xchg
dec
mov
les
push
hlt
in
cwde
xchg
imul
js
dec
jnp
ret
xor
rcl
in
push
stos
mov
daa
div
cmp
fisub
cmp
cvttps2pi
xchg
mov
sbb
and
sbb
jb
mov
inc
(bad)
popf
(bad)
out
(bad)
and
in
adc
mov
fwait
test
stos
out
cld
aaa
or
inc
cwde
retf
(bad)
lock
retf
retf
or
or
jg
xlat
stc
in
add
lods
dec
ds
ret
das
in
mov
mov
sbb
dec
mov
or
or
aad
fcomi
(bad)
fwait
mov
scas
shl
sahf
popa
xchg
arpl
sar
daa
xchg
retf
rcl
mov
cwde
and
out
jnp
mov
cwde
mov
(bad)
test
out
(bad)
fcom
sbb
ds
in
(bad)
rcr
cwde
mov
ficomp
stos
sbb
push
sbb
hlt
pop
mov
push
popa
js
cmp
stos
pop
jae
sbb
or
mov
mov
cs
xchg
in
stos
hlt
dec
xchg
(bad)
jg
pop
sub
cs
(bad)
leave
ins
call
cdq
jmp
call
fimul
cmp
xchg
jo
fs
jp
int
loopne
dec
cwde
jmp
xor
cmp
aas
pusha
cwde
jge
lea
aaa
mov
lock
sbb
inc
les
cwde
or
jnp
mov
dec
fwait
cwde
cdq
jecxz
and
pop
int
adc
popf
imul
imul
cmp
nop
call
jge
jmp
fldlg2
sub
stc
cwde
out
adc
pop
jmp
je
cwde
cs
and
mov
ins
pop
or
leave
cdq
cwde
int3
pop
loope
sbb
sbb
adc
ret
mov
or
fsubr
push
add
stos
in
nop
xor
mov
xor
adc
push
mov
(bad)
out
loopne
test
xor
pop
sub
js
ins
mov
jle
scas
cmps
mov
lods
pop
cmp
rcr
aad
ins
imul
arpl
gs
mov
xchg
aam
xor
out
out
or
sbb
stc
adc
adc
add
xchg
ja
cwde
push
cmp
bound
mov
sub
ficomp
neg
jbe
dec
enter
mov
or
and
movs
cwde
int
ficom
imul
dec
jge
stos
scas
mov
mov
mov
mov
jp
stos
lahf
xor
sbb
out
xchg
shl
inc
sub
jge
mov
and
sub
jns
jbe
shl
xchg
test
push
sub
cdq
sbb
repz
ret
fisub
ds
mov
push
dec
mov
xchg
push
and
jbe
push
and
xchg
mov
ins
adc
fst
mov
push
cmc
sbb
stos
cmp
dec
pop
adc
(bad)
repz
xchg
push
mov
outs
cwde
push
hlt
in
call
jns
dec
leave
fdivp
pop
mov
push
fsub
push
ja
mov
(bad)
mov
dec
in
fscale
mov
cmp
jnp
mov
xchg
mov
sbb
mov
cmps
rcl
stos
bound
cwde
push
loope
xchg
ins
leave
cmp
jmp
mov
adc
jl
cwde
sub
bound
test
mov
xchg
popa
loopne
int
xor
clc
fcmovbe
lahf
jno
jle
inc
jo
fisubr
fs
(bad)
sub
xchg
ss
mov
rol
out
fsub
enter
adc
call
pusha
cwde
add
dec
mov
cwde
cmp
mov
rcr
sbb
not
jb
mov
push
mov
push
(bad)
sub
add
sets
add
sbb
cwde
jno
or
push
leave
arpl
gs
imul
adc
pop
sbb
sbb
lds
and
cmp
ret
mov
nop
xchg
adc
push
and
or
bnd
jl
enter
adc
(bad)
fidivr
shl
mov
stos
pop
mov
popa
or
fs
rcl
jo
xor
push
inc
gs
inc
call
daa
mov
pop
popa
out
xchg
pop
dec
xchg
add
call
shl
cmp
fstp
mov
push
std
xchg
xor
scas
cmp
mov
fcomp
stc
test
adc
xlat
cmps
pop
push
fucomi
int
outs
xchg
cwde
dec
push
or
out
cwde
cmp
in
iret
fadd
cdq
jle
cwde
ret
and
inc
rcl
in
push
xchg
adc
push
pop
pop
fcomp
jmp
ja
mov
cwde
add
sbb
lods
jecxz
or
push
add
push
fiadd
sbb
ja
dec
push
xchg
dec
ds
stos
mov
push
cmp
jp
lock
cmps
cwde
pushf
jns
pop
xor
push
cwde
sbb
out
repnz
dec
test
add
pop
mov
pushf
cwde
xchg
(bad)
out
retf
(bad)
shl
sbb
ret
mov
add
adc
sbb
pop
(bad)
xor
pop
and
lea
jae
leave
lahf
jge
jecxz
rol
or
loope
dec
call
cwde
cld
push
mov
xor
inc
inc
sub
ins
sahf
jp
test
mov
fadd
sub
cwde
in
outs
and
xor
lods
mov
cwde
mov
stc
cmp
jg
outs
in
cld
push
pop
mov
dec
push
addr16
test
sbb
cmc
cwde
(bad)
loopne
stos
std
data16
clc
popf
xor
sub
(bad)
(bad)
pusha
xor
enter
aam
inc
nop
push
or
mov
push
pop
out
mov
clc
sub
jo
ins
sbb
pop
cwde
push
sub
add
cmp
cwde
pop
leave
fcomp
faddp
add
frstor
xchg
dec
pop
adc
mov
push
retf
lods
sbb
adc
ret
sbb
or
push
sti
mov
mov
arpl
sub
in
jmp
xor
add
int
sub
cwde
sbb
cmp
xchg
loope
fdivr
out
push
mov
sbb
jp
das
bound
sti
sub
push
jo
es
inc
clc
mov
and
shr
mov
loop
inc
cwde
ror
cli
mov
or
jno
push
in
sar
cwde
sub
sub
dec
ret
mov
xchg
cli
push
retf
xchg
rcr
mov
jns
xor
or
int3
sti
dec
jmp
fst
add
aas
pop
mov
pop
sbb
test
push
dec
sub
stos
ins
mov
or
in
push
sbb
ret
or
adc
jae
(bad)
mov
push
scas
sbb
xchg
dec
ret
adc
xchg
add
mov
xor
cmovne
xor
pop
ins
jp
push
mov
cwde
data16
(bad)
mov
cdq
push
xlat
xchg
push
cmps
jne
pusha
jae
push
dec
sub
inc
mov
xchg
leave
pop
stos
xchg
ins
adc
jg
add
jp
lods
or
mov
cli
pop
adc
and
jbe
loop
jns
push
or
sub
popa
pop
pop
cmp
pop
scas
adc
or
jl
leave
test
jg
cwde
pop
icebp
add
push
ret
int
mov
cld
xor
sub
cmp
xchg
xor
fidivr
inc
cwde
(bad)
outs
pop
add
adc
in
cwde
or
(bad)
sub
push
sbb
or
jl
pusha
out
test
nop
pushf
adc
cmp
xchg
xchg
mov
xchg
les
push
popa
sub
sbb
mov
adc
push
sbb
and
fisub
add
jmp
cwde
inc
cs
pusha
dec
push
imul
popa
ror
icebp
icebp
mov
sub
int3
jb
xchg
pusha
das
inc
pop
jp
adc
rol
pop
cmp
mov
test
(bad)
lds
inc
xchg
and
daa
or
xor
push
xor
inc
fst
dec
mov
scas
cwde
push
mov
sar
inc
sahf
bound
xchg
mov
pop
push
adc
mov
and
mov
aaa
test
loope
pop
gs
sub
inc
dec
push
fwait
cwde
push
popf
jns
xlat
stc
sbb
mov
adc
enter
ret
sub
inc
lahf
push
jl
mov
cwde
cmp
std
sub
adc
pavgb
arpl
call
enter
xchg
and
sub
sub
inc
aaa
xchg
lahf
adc
jmp
clc
test
cwde
(bad)
arpl
inc
push
push
mov
xchg
in
test
cli
loop
jp
test
pop
in
fstp
jae
cmps
fmul
push
sub
outs
mov
test
xchg
shr
xchg
sbb
daa
in
pop
and
sbb
add
cli
sub
xor
adc
and
xchg
js
je
push
mov
scas
rol
hlt
lock
push
jmp
xchg
arpl
cmp
and
stos
and
clc
or
jnp
inc
push
jg
jns
xchg
xchg
lds
jne
hlt
in
sbb
push
clc
jle
sub
adc
jl
sar
fnstsw
mov
jecxz
xchg
aaa
push
sbb
add
jo
dec
dec
cwde
xor
pop
outs
push
and
mov
push
push
stc
inc
pusha
dec
sbb
out
popf
sub
or
cmp
nop
jae
(bad)
and
(bad)
in
hlt
xor
imul
mov
and
cwde
xlat
in
hlt
inc
pop
sub
cmps
or
jle
lds
push
push
lods
jmp
jle
adc
lea
sar
scas
mov
pop
jle
jle
fcmovb
cmp
cmp
jno
pop
mov
push
xchg
lock
add
mov
addr16
pushf
jns
adc
enter
cmp
or
out
stc
dec
inc
repnz
and
jb
outs
outs
xchg
cwde
(bad)
retf
fisub
adc
jl
cmp
push
and
and
ds
and
mov
push
xchg
cmp
mov
sbb
dec
sbb
lea
push
pop
inc
pop
and
jp
mov
xchg
xor
shr
sti
push
inc
adc
xchg
rol
cmp
scas
mov
in
int3
xchg
xchg
sub
lods
mov
ret
mov
inc
xchg
ss
cmp
cmp
cwde
ss
shl
mov
ret
inc
push
and
xchg
mov
ins
mov
cmp
or
inc
inc
ja
call
mov
daa
xor
jl
call
mov
push
sahf
push
pop
fidiv
mov
std
mov
movs
mov
inc
jnp
mov
daa
out
les
cli
stc
jge
es
addr16
clc
cmc
add
lock
sbb
and
and
mov
sub
popf
push
sbb
ja
jns
(bad)
mov
xchg
cmc
stos
sbb
pop
mov
xor
ins
cmps
mov
push
xchg
mov
movs
cwde
rol
stos
cdq
jno
cmp
cli
shr
push
inc
push
mul
pop
cmp
dec
lods
arpl
inc
or
or
rol
rol
xchg
out
gs
fcomip
into
mov
pop
mov
test
popa
fcomp
out
fisttp
(bad)
cmp
cwde
lds
out
cwde
rol
inc
sbb
cwde
dec
mov
(bad)
int
push
sbb
xor
jecxz
push
iret
loop
xchg
shr
fistp
lahf
adc
sbb
sub
scas
cmp
sahf
cwde
aas
adc
cli
cwde
retf
cld
sub
mov
or
cs
mov
shl
jns
xchg
push
lods
push
imul
dec
call
sbb
mov
idiv
add
jecxz
bound
mov
push
push
(bad)
jge
push
mov
aaa
addr16
cwde
mov
call
(bad)
dec
loop
cwde
movs
fisttp
adc
and
iret
pop
adc
mov
call
dec
lods
(bad)
enter
sbb
loope
xchg
pop
inc
push
cmp
imul
sbb
jno
neg
stos
mov
daa
xchg
ret
mov
pusha
cmp
pop
inc
hlt
(bad)
lahf
ins
outs
mov
jnp
jp
inc
setne
addr16
jno
js
dec
cmp
cwde
std
mov
cwde
add
retf
push
sbb
scas
and
mov
aam
xchg
mov
jo
inc
jmp
xchg
shr
push
or
cmp
ins
xor
cli
cmp
mov
clc
js
rcr
jnp
ss
fisttp
cmc
je
xor
mov
scas
pop
xor
(bad)
mov
cli
out
leave
sbb
push
jle
ins
push
mov
sbb
xor
mov
mov
cmp
sub
xchg
outs
call
loop
jno
xchg
mov
jnp
(bad)
js
ins
xchg
pushf
gs
sbb
adc
pop
stos
push
js
jno
in
repnz
aas
pop
sbb
sub
sbb
sbb
pop
or
int
loopne
cdq
xchg
mov
(bad)
out
mov
ficom
test
movs
shr
or
add
int3
in
sbb
aad
jae
mov
add
mov
push
je
addr16
js
(bad)
fucomi
pop
jg
mov
xlat
cwde
sbb
ficom
xchg
adc
mov
js
int3
mov
jno
ins
ins
sbb
adc
push
mov
rcl
aam
ja
push
add
or
adc
mov
pop
sbb
leave
stos
cmp
xor
push
mov
inc
test
cmp
ja
inc
cdq
int
xchg
jmp
jg
hlt
cmp
not
and
xchg
test
adc
stos
fwait
sbb
(bad)
test
es
enter
int3
cmps
mov
sahf
sub
movs
cmp
cmp
xchg
fadd
test
or
cdq
adc
retf
push
fisub
push
mov
rcr
lds
mov
cli
cmc
repz
fcmovbe
loopne
mov
push
lods
cmp
lock
pop
fucomp
sub
xchg
xchg
test
inc
push
pop
sbb
push
adc
xchg
cmp
cwde
lock
xor
mov
out
clc
sbb
das
cmp
push
adc
mov
cmp
das
lea
dec
and
and
dec
fdiv
retf
sbb
es
psubsw
movs
pop
and
adc
cwde
scas
addr16
xor
or
daa
nop
mov
(bad)
test
or
outs
retf
aas
inc
adc
fcomp
sub
xchg
ds
xchg
mov
sbb
and
pushf
add
jb
cwde
push
call
lock
pop
cwde
or
push
fldcw
daa
aam
retf
out
and
hlt
arpl
mov
mov
aam
adc
out
sbb
bound
cld
aas
int
adc
test
pop
ins
pop
inc
and
aas
cwde
in
and
dec
or
sub
xor
mov
lea
xor
fs
popf
pop
out
jg
cwde
push
or
adc
mov
es
or
addr16
cwde
out
inc
mov
mov
mov
xchg
gs
dec
pop
in
add
push
pop
(bad)
dec
cmp
outs
push
mov
pop
ins
fsubr
aas
sub
cli
xchg
and
xchg
call
mov
xchg
nop
imul
pushf
lea
outs
jb
in
xchg
fisubr
je
xor
inc
mov
popa
jp
cmc
pop
add
xor
fdivr
mov
xor
inc
cwde
inc
inc
sub
xchg
and
push
ins
jno
jo
aaa
adc
stos
xor
xor
das
push
adc
dec
lock
sub
adc
stc
xchg
mov
adc
dec
jns
imul
dec
xchg
ins
cwde
push
and
test
add
rcr
and
adc
pop
cdq
xchg
scas
test
sbb
and
pop
inc
stc
dec
lock
inc
enter
addr16
or
pop
sbb
push
movs
jge
aas
stc
mov
sbb
xor
and
or
xchg
call
push
arpl
xchg
sbb
or
mov
xchg
(bad)
stos
cmp
xor
ja
scas
js
hlt
sub
in
call
push
cmp
stos
jae
cmp
daa
cmp
jmp
mov
ror
sar
les
icebp
inc
add
push
xor
clc
mov
imul
sub
push
xchg
loope
ret
mov
push
mov
dec
mov
adc
pusha
arpl
cmp
rcl
mov
in
sub
inc
mov
pusha
jmp
cmp
xchg
cmp
sbb
jno
cwde
sar
jl
or
rcl
mov
scas
icebp
and
daa
xor
test
sti
or
xchg
mov
xor
cwde
xchg
add
cwde
daa
test
sahf
cmp
add
cwde
cmp
fwait
ds
jmp
and
outs
xor
aam
fisubr
mov
lahf
jp
jae
pop
cwde
and
cdq
jecxz
mov
mov
adc
cmp
adc
add
cmp
ss
rcl
ins
inc
jg
fs
inc
pop
mov
jb
mov
jp
ss
neg
ins
mov
push
mov
sbb
rcl
fcomp
cwde
fiadd
jmp
mov
push
pop
inc
sub
sub
cwde
test
into
cwde
stos
loopne
cdq
shl
jno
add
cmp
call
cmp
cwde
rol
and
sar
mov
xor
xchg
sub
pop
mov
imul
div
call
pop
sbb
push
repnz
dec
les
mov
mov
cbw
lods
mov
cwde
idiv
push
or
jne
inc
push
mov
dec
xchg
push
(bad)
call
mov
sar
adc
and
pusha
inc
ret
dec
or
popf
pop
xor
adc
dec
pop
fwait
js
xchg
xchg
jl
xchg
sbb
pop
cmp
jb
cmp
xchg
ds
xor
cvtps2pd
jns
inc
sahf
addr16
retf
fcmove
cwde
ror
lods
out
ss
in
xchg
cwde
xlat
mov
scas
cmc
scas
(bad)
mov
push
movlps
mov
mov
xchg
xchg
int
pop
ja
inc
cmp
and
stos
out
dec
popa
aad
push
mov
mov
popf
cli
cwde
lods
fimul
imul
sbb
test
or
push
mov
add
es
xchg
js
or
vpmaddwd
repnz
jb
mov
leave
fdivr
(bad)
pop
xchg
je
test
mov
(bad)
jb
inc
jle
fimul
ret
pop
adc
xchg
aam
mov
ret
int3
stos
(bad)
out
xchg
mov
add
xor
fstp
mov
and
shl
pop
mov
mov
hlt
jbe
dec
xor
inc
cwde
mov
inc
rcr
stos
call
jmp
mov
daa
sub
cwde
movs
ror
push
adc
xchg
cwde
mov
repz
sbb
mov
dec
inc
cmp
xchg
test
dec
out
mov
adc
sbb
push
pop
pop
jno
test
cwde
call
add
xchg
inc
outs
sbb
movs
test
and
xchg
jae
push
and
cmps
idiv
push
sub
mov
fnsave
jle
pop
jg
pop
pop
inc
or
fcom
scas
push
xchg
js
cwde
mov
fwait
push
mov
cmc
and
push
push
test
xchg
cwde
jns
test
xchg
jg
popf
popf
inc
jmp
outs
repnz
jbe
or
xchg
add
out
pop
(bad)
ins
sbb
popf
jmp
shl
lds
jecxz
in
sub
inc
scas
xchg
push
inc
call
mov
dec
hlt
(bad)
je
out
pushf
cs
jnp
mov
scas
xchg
xchg
mov
enter
out
sbb
clc
sub
xor
xchg
sti
into
mov
cmp
call
dec
dec
aam
cli
enter
mov
mov
mov
fsubr
mov
push
add
ds
mov
mov
xchg
xor
push
pop
retf
add
ss
sahf
in
mov
dec
xor
idiv
addr16
in
mov
cwde
ins
sahf
ins
pushf
das
xor
ret
rcr
cmps
xor
cwde
xor
std
fyl2x
push
cld
xchg
loopne
sbb
idiv
mov
aam
xor
int3
js
dec
xchg
sbb
in
sti
sbb
cwde
div
mov
cwde
sub
mov
jo
xchg
add
dec
or
inc
sbb
adc
mov
jle
cwde
sbb
fnstcw
cmps
inc
clc
jmp
jns
push
sub
xchg
mov
data16
ins
xchg
jno
imul
xor
jle
fwait
or
sub
adc
xchg
add
mov
xor
aas
imul
leave
sub
ret
test
lea
cmps
cdq
outs
mov
pop
xchg
xchg
cmc
ins
fadd
int
popa
mov
xchg
add
into
push
mov
data16
fstp
loop
jmp
aaa
imul
mov
popf
jbe
sbb
sbb
ds
or
xchg
pop
movs
cmps
les
in
pusha
js
mov
mov
scas
hlt
mov
test
add
nop
shl
je
pusha
fdiv
adc
mov
sub
xchg
pop
mov
int
sbb
or
push
sbb
dec
sub
inc
rcr
test
out
pop
inc
movs
inc
pop
outs
rcr
jecxz
add
cwde
inc
fistp
enter
out
jge
inc
ret
std
cwde
mov
mov
jmp
fsub
sbb
call
into
mov
or
sbb
xchg
sbb
cdq
xor
dec
les
int
sub
mov
enter
xor
mov
cwde
jmp
xchg
test
test
cwde
(bad)
cmp
mov
sub
retf
add
fmul
xor
jbe
push
(bad)
out
lahf
sahf
and
xchg
push
jmp
sbb
xor
sbb
cwde
leave
popa
jl
(bad)
js
loopne
inc
jns
ror
loope
cmc
and
sti
(bad)
retf
lock
pop
and
lahf
and
mov
loope
lds
outs
je
mov
arpl
inc
sub
ret
xchg
cmp
ins
imul
call
push
jnp
mov
xchg
or
xor
jl
icebp
test
mov
xor
sub
mov
shl
imul
or
dec
dec
jmp
push
sbb
ins
fcomp
ins
test
sar
rcl
mov
inc
pusha
jecxz
xchg
mov
scas
mov
fisub
add
jge
sub
retf
ja
push
call
jle
stos
es
push
mov
stos
popf
in
add
push
leave
call
inc
nop
push
out
in
pop
(bad)
cmp
outs
lea
cmp
ret
cwde
jge
idiv
mov
test
mov
jmp
ins
or
std
cmps
mov
push
fsave
push
xchg
and
push
lods
popf
shl
push
sbb
loopne
pop
cwde
shl
pop
loope
jb
push
ret
hlt
enter
xchg
fistp
loope
in
sbb
aad
cmp
dec
cmp
dec
mov
jg
adc
add
xchg
jmp
inc
or
scas
jno
jmp
into
outs
and
int
sub
sahf
add
in
cwde
mov
jge
jae
pop
jnp
scas
sbb
cmp
(bad)
jmp
add
cmp
or
cmps
adc
inc
cmps
pop
xchg
cs
xchg
cmp
push
mov
jb
xchg
add
push
out
inc
js
fwait
mov
test
mov
fidiv
fmul
and
dec
push
pop
bound
xchg
lods
mov
fcomp
lods
pushf
imul
icebp
jmp
push
and
out
inc
or
imul
push
test
mov
rcr
add
test
ins
xchg
int
mov
sub
daa
in
test
aas
xchg
leave
cs
pusha
xor
outs
add
dec
push
scas
mov
cmps
shl
sbb
jge
xchg
jle
add
cli
ja
rol
mov
xchg
push
xchg
or
xchg
call
jl
cwde
or
dec
icebp
add
mov
outs
xchg
(bad)
inc
xchg
jo
cdq
xchg
pop
or
clc
inc
aam
imul
in
je
cwde
shr
sub
adc
bound
repz
jge
xchg
fidivr
fucomp
loope
adc
lods
cdq
push
mov
mov
inc
push
loope
sbb
xchg
imul
(bad)
fucomi
fidivr
repz
add
nop
mov
push
mov
mov
xchg
pop
mov
bound
mov
sti
cwde
scas
mov
pop
in
adc
or
inc
sub
je
fcompp
ins
add
and
sahf
gs
mov
fnstenv
xchg
pop
test
mov
jmp
test
cmp
inc
mov
sbb
(bad)
shr
(bad)
popf
sbb
hlt
push
imul
in
loopne
rcl
hlt
into
ror
movs
mov
aam
retf
fdivr
out
(bad)
in
adc
popa
fsub
daa
aas
add
shr
mov
ja
sbb
push
cdq
cmp
test
gs
push
push
pop
push
in
cbw
movs
mov
fidivr
(bad)
sbb
out
scas
xchg
inc
sbb
jae
jp
add
sub
sbb
jmp
mov
cmp
xchg
pop
cli
adc
scas
sti
lds
popf
mov
or
sub
out
sbb
cmp
test
cs
adc
mov
mov
loope
adc
call
addr16
jno
sbb
icebp
adc
imul
adc
int3
adc
fwait
xchg
mov
mov
mov
dec
mov
pop
cmps
mov
cmp
pop
push
ret
fnstsw
and
jnp
out
clc
cmp
mov
dec
sub
pop
dec
ja
jmp
ins
nop
push
mov
mov
test
add
bound
out
cdq
test
and
xchg
xchg
fimul
into
push
fstp
ret
pop
adc
test
cmp
sbb
and
or
in
sbb
scas
shl
inc
loope
jle
adc
jecxz
cmp
jmp
ret
imul
xchg
push
out
xlat
repnz
lods
sub
dec
rcr
cwde
mov
loope
int3
cmp
mov
cmp
add
sub
loop
iret
lea
aam
push
loope
mov
xchg
jb
xor
add
pop
jmp
lahf
test
mov
(bad)
sub
fs
cwde
nop
xchg
stos
rcl
cwde
out
and
(bad)
adc
sbb
jl
js
cwde
cmc
lods
repz
xchg
jns
ins
sbb
not
inc
adc
ds
mov
xor
js
ja
and
sub
rcr
stos
ss
cwde
mov
test
adc
and
cwde
inc
push
dec
stos
mov
add
icebp
push
pop
cwde
adc
cdq
pop
aam
test
xchg
cmp
add
cwde
jg
mov
add
jo
xchg
push
push
mov
ds
or
fbstp
cwde
nop
mov
or
into
adc
mov
into
(bad)
fdiv
sub
mov
cwde
out
cmps
call
jbe
in
repz
stc
adc
lahf
cmp
and
stos
bound
cwde
hlt
sahf
xchg
gs
or
and
(bad)
mov
pop
fidiv
adc
push
int3
sbb
(bad)
fist
sub
or
jno
into
jnp
sti
(bad)
cs
push
jmp
mov
cwde
call
test
ret
push
adc
mov
add
stc
sub
dec
or
cwde
jno
outs
fild
inc
mov
pop
clc
xchg
fcomp
cmp
fmul
xchg
mov
mov
cmp
pop
test
test
lock
(bad)
xchg
test
jge
cwde
cwde
loope
(bad)
inc
popa
xchg
imul
push
mov
xchg
out
(bad)
mov
sti
fcomp
or
fsub
fistp
fdiv
cwde
stos
mov
or
mov
mov
mov
retf
pop
adc
mov
clc
jbe
and
call
mov
dec
adc
call
pop
test
cmp
cmp
xor
pop
cmp
push
in
push
add
out
xor
enter
inc
ds
push
jp
dec
sbb
sub
mov
cmp
xchg
frstor
fidivr
cmp
xlat
lods
fwait
dec
cwde
jp
ret
add
lock
add
mov
push
add
cwde
mov
(bad)
mov
fdivr
retf
daa
bound
sahf
and
xor
mov
cwde
mov
pusha
xor
data16
scas
push
cmp
jg
xchg
mov
mov
mov
neg
jne
add
sbb
sub
jne
inc
scas
mov
mov
pop
add
xchg
add
test
stc
in
cmc
in
push
xchg
jmp
lea
xor
jns
xor
and
ins
sub
out
cwde
xchg
out
mov
ror
(bad)
in
cmp
cwde
or
lods
mov
mov
mov
div
sti
cwde
xchg
fnstsw
sets
pop
lods
popf
sbb
in
cwde
jae
sbb
das
cwde
sub
or
inc
lahf
dec
popf
loopne
cmc
cwde
(bad)
and
ret
pop
xchg
aas
loope
popa
cmp
mov
push
push
lds
ror
rcr
mov
pop
xchg
sub
loop
mov
cmp
pop
inc
int3
shl
adc
or
mov
cwde
mov
adc
fstp
lock
sbb
jge
xor
es
pop
fmul
cmp
xchg
or
push
cmovnp
cmp
push
mov
dec
test
lahf
jo
cwde
mov
sbb
les
aaa
mov
mov
clc
cmc
sahf
jnp
xchg
jge
(bad)
std
cmp
inc
sub
js
jbe
call
(bad)
mov
push
imul
int3
pop
test
mov
inc
lods
adc
and
xor
loopne
dec
add
(bad)
xlat
xchg
in
icebp
xor
jne
ins
cwde
mov
push
sar
stos
inc
cwde
or
pop
imul
push
ror
fistp
adc
jae
mov
mov
xchg
dec
jmp
xchg
lea
dec
cli
sub
sub
scas
cwde
mov
es
mov
adc
popa
mov
lods
lods
fsub
rcr
ds
dec
xchg
in
xchg
aaa
lods
xor
jnp
xchg
dec
dec
and
cmp
loop
in
mov
daa
int
js
pop
popf
sub
mov
and
call
scas
or
xchg
xor
icebp
sub
pop
jg
jmp
sub
lds
and
mov
dec
jg
ret
adc
into
loopne
hlt
(bad)
jne
daa
jmp
js
pop
or
div
mov
xor
push
clc
mov
mov
jae
or
cwde
mov
aad
lods
retf
mov
adc
int3
and
jmp
cwde
and
jb
jnp
push
sbb
nop
xchg
fcomp
add
adc
(bad)
call
mov
or
lods
(bad)
fadd
xchg
cwde
push
inc
pop
pop
cmp
push
dec
cwde
jnp
and
daa
pop
cld
cmpxchg
sub
jg
nop
push
out
mov
out
repnz
cwde
rcl
arpl
not
test
stc
iret
daa
xor
cdq
fstp
je
push
xchg
adc
cwd
ins
sub
icebp
enter
sbb
cwde
and
pop
ins
mov
add
sbb
aas
aam
sub
jl
ficomp
mov
out
loope
sub
pop
inc
sub
lods
sahf
and
leave
xchg
mov
fidiv
sub
outs
adc
js
push
fst
sub
aam
sub
sahf
mov
ins
dec
mov
push
cli
sub
xchg
xchg
mov
int3
jle
cli
unpckhps
push
xchg
inc
push
jae
fs
push
sbb
adc
mov
xchg
repz
adc
xchg
jp
dec
icebp
jmp
sahf
psubb
and
push
fadd
bound
retf
mov
cmp
daa
and
mov
cwde
push
in
push
mov
cwde
adc
push
jecxz
loope
imul
mov
loopne
shl
mov
jbe
fwait
cwde
fidivr
mov
dec
jne
xchg
jge
pop
lods
leave
test
sbb
ds
loopne
mov
cmp
xor
xor
stos
cmp
leave
xchg
xor
pop
scas
js
dec
sub
mov
sbb
shl
mov
repnz
jmp
clc
inc
imul
mov
or
sahf
and
jge
xchg
mov
repz
jg
in
sub
lods
fs
fwait
push
iret
movs
or
fld
stos
icebp
mov
sbb
push
add
xlat
lods
jg
ins
mov
dec
(bad)
ret
(bad)
rol
stc
inc
adc
add
xchg
mov
push
sbb
or
ja
jb
cmp
jp
push
pop
cmp
cdq
in
sbb
fadd
pop
cmp
call
es
pop
lock
je
(bad)
fistp
std
pop
pusha
addr16
in
cwde
jae
dec
mov
xchg
xchg
retf
inc
mov
mov
js
pop
xchg
out
xor
aas
aaa
cmp
inc
pop
xchg
mov
and
pop
(bad)
jmp
jnp
mov
daa
push
dec
and
fstp
in
stc
ja
push
(bad)
jg
adc
push
jmp
cmp
sub
arpl
cmp
loopne
es
fdivr
scas
cs
and
loop
cwde
mov
(bad)
pop
retf
sub
add
xchg
inc
(bad)
dec
test
pop
sub
cdq
and
jmp
rcr
ins
or
cwde
inc
out
push
push
adc
sbb
xchg
lods
retf
dec
lahf
sbb
js
outs
xchg
mov
fnstcw
out
jo
push
cwde
sbb
mov
add
mov
rcr
fwait
fs
xchg
mov
xchg
rcr
mov
es
mov
adc
dec
jns
cmp
sub
xor
xchg
ja
imul
cmps
sbb
sbb
jecxz
enter
jo
cwde
loope
mov
ficom
cdq
out
ja
mov
daa
mov
mov
jmp
xchg
loop
leave
mov
inc
cmp
cmovg
idiv
and
push
shl
ficomp
js
mov
push
out
and
adc
inc
sub
pop
and
dec
sahf
jo
jo
cwde
and
xchg
add
pop
fmul
mov
mov
test
dec
sub
jae
cwde
fnstsw
mov
aaa
cwde
js
data16
mov
lahf
icebp
into
dec
pop
popa
shl
aas
xchg
sti
fidivr
sbb
pusha
call
push
push
das
sbb
bound
pop
xlat
cmp
jl
mov
std
sbb
test
mov
pop
inc
in
cld
cwde
sbb
and
jg
lock
mov
cwde
and
iret
adc
lahf
add
je
jecxz
inc
sbb
clc
sbb
pop
push
js
lods
inc
push
fld
scas
sbb
rcr
xor
dec
pop
ds
or
add
popf
xlat
and
xchg
mov
or
adc
cmovae
add
jg
mov
dec
mov
pop
push
or
jecxz
(bad)
mov
mov
test
ror
add
movs
out
imul
retf
push
push
xor
(bad)
mov
cmp
fwait
retf
adc
ds
cwde
(bad)
push
aas
pop
and
lahf
mov
fadd
dec
push
jmp
lea
fdivr
fsub
mov
dec
jecxz
dec
push
cli
sub
mov
cmc
(bad)
sbb
in
lahf
pop
clc
adc
or
cwde
test
xor
cs
jns
add
(bad)
xchg
cmps
outs
js
fld
cwde
in
out
mov
sbb
adc
out
inc
cwde
mov
out
push
int3
xchg
fnstsw
dec
push
dec
mov
cld
ins
cwde
jge
inc
add
xchg
mov
scas
sub
or
cmps
sub
into
jmp
jns
adc
ins
outs
push
pop
hlt
fistp
and
das
fs
push
xchg
movs
out
es
std
mov
xchg
fisubr
pop
mov
cdq
jle
jne
sahf
(bad)
adc
xor
jmp
xchg
neg
mov
sbb
sbb
or
mov
xchg
mov
cmp
cwde
or
xor
jmp
xchg
pop
jl
cwde
and
and
(bad)
mov
rcr
iret
adc
test
(bad)
cmps
mov
push
xor
push
inc
and
ret
push
pop
cmp
jo
sub
lahf
mov
fld
ret
sahf
jmp
xchg
mov
add
retf
scas
rcl
in
mul
push
imul
cmp
xor
cwde
popa
dec
hlt
jnp
sbb
cwde
mov
loopne
mov
sbb
retf
sub
jg
cmps
aad
dec
mov
sub
mov
fimul
test
mov
cmps
xchg
popa
jae
mov
outs
cwde
enter
icebp
mov
jnp
sbb
pop
ret
and
es
call
push
test
push
dec
ins
je
test
ret
cmp
push
or
mov
mov
cs
jl
into
icebp
je
mov
or
loop
jl
inc
pop
ret
cdq
lods
sub
das
cmp
xor
add
xchg
or
sub
es
or
push
ret
test
rcr
loope
mov
mov
push
jle
xchg
daa
(bad)
pop
add
es
cdq
dec
push
push
sub
dec
addr16
mov
mov
fimul
adc
xchg
mov
cld
or
add
test
(bad)
push
ffreep
cmp
mov
pushf
loopne
mov
add
cwde
xor
mov
sahf
jecxz
iret
ins
pusha
cmp
std
push
leave
xchg
xchg
mov
repz
aam
and
popa
and
jg
shl
call
fist
ror
into
(bad)
xchg
cmps
or
cwde
sahf
ds
repz
imul
jmp
inc
adc
cwde
shl
adc
neg
in
enter
pop
lods
sbb
add
sub
movs
mov
xchg
js
add
test
cwde
scas
cmp
rol
xchg
jbe
mov
(bad)
jp
and
out
aas
stos
repz
cwde
xchg
pop
sbb
xchg
test
addr16
jg
xchg
cwde
push
outs
jb
cwde
cmps
aad
(bad)
mov
push
ror
push
push
ret
push
add
mov
pop
cwde
(bad)
ror
push
lods
popf
sbb
add
push
xchg
sub
int3
mov
out
add
std
cwde
push
jb
inc
mov
or
mov
cwde
das
add
rcr
sbb
imul
clc
push
test
popf
inc
vpunpckhqdq
mov
mov
loopne
mov
sbb
lahf
pop
jno
dec
call
add
adc
stos
push
sbb
mov
adc
inc
push
cmp
sub
mov
bound
cld
arpl
push
adc
pop
sti
sti
(bad)
xlat
jl
stos
push
out
push
or
es
xchg
addr16
push
jb
pop
test
xchg
lahf
cli
push
test
xor
jns
test
push
cmp
fs
call
push
daa
pop
mov
aad
pop
xchg
or
dec
std
inc
jnp
inc
push
inc
add
jne
nop
xchg
addr16
les
dec
icebp
jl
cwde
addr16
cmps
scas
mov
enter
push
aam
pop
xor
movs
push
jge
imul
into
inc
push
sub
adc
push
shl
(bad)
int3
fdivr
in
test
pop
mov
fstp
lock
int
imul
mov
movs
retf
stos
ret
in
mov
xor
inc
add
into
cmp
mov
adc
das
ret
and
xchg
imul
pushf
xchg
in
or
out
cwde
clc
ret
jae
sti
cwde
xor
enter
push
iret
dec
or
and
aas
jne
sbb
xchg
mov
pop
and
pop
(bad)
mov
outs
push
jne
pop
inc
push
mov
cwde
mov
out
inc
call
test
inc
fdiv
add
clc
es
dec
xchg
lea
add
sbb
cwde
shl
lahf
xchg
cmps
mov
sbb
or
inc
and
push
jge
xchg
(bad)
fdivp
xchg
fldcw
xor
in
fist
movs
cmp
stos
pop
xchg
push
jmp
loopne
sbb
xor
(bad)
arpl
shl
out
in
popw
pop
lahf
dec
mov
pop
arpl
dec
mov
imul
add
cwde
xchg
pop
lods
imul
pop
inc
add
adc
xchg
lods
push
push
mov
hlt
xchg
loopne
clc
enter
jmp
stos
cs
sbb
add
aaa
fild
in
push
inc
addr16
fst
cld
adc
mov
pop
jb
imul
or
je
imul
cwde
rcl
(bad)
push
mov
xchg
cli
pop
out
dec
pop
dec
sub
or
arpl
mov
into
adc
xchg
mov
push
adc
push
xchg
add
and
push
mov
xlat
daa
das
ret
dec
pop
mov
cmps
mov
xchg
stos
ds
pop
adc
or
xor
cmp
xor
cwde
inc
inc
push
pop
sub
dec
xchg
push
xor
add
out
pop
jge
scas
mov
cwde
jmp
xchg
leave
fcom
xchg
jecxz
mov
iret
sub
(bad)
cwde
movs
lods
add
rcr
xchg
gs
inc
fwait
add
lods
mov
call
ficomp
adc
add
loopne
mov
jno
pop
adc
hlt
xchg
(bad)
js
test
cmp
popf
push
gs
dec
cmc
xchg
test
aad
enter
mov
pop
cmp
sub
cmp
fisub
lahf
dec
inc
mov
test
(bad)
sbb
adc
nop
cmp
(bad)
fild
fcomp
test
clc
xchg
mov
fcom
xchg
in
ss
dec
lahf
cmp
scas
cwde
jno
cmps
mov
add
cwde
cmp
push
imul
je
ret
imul
sub
xchg
stos
cmp
jp
jns
jl
in
popf
xor
xlat
mov
push
imul
shr
bnd
pop
test
mov
mov
call
call
loope
push
das
lahf
aas
mov
sub
xchg
int
xor
fucomip
clc
ss
gs
push
retf
dec
je
xchg
into
mov
ret
(bad)
loop
mov
int
fdivr
scas
cmp
mov
push
rcl
or
shr
pop
sbb
sahf
fwait
xchg
cmp
fsub
adc
push
dec
test
xchg
mov
inc
loop
int
sbb
in
cwde
into
out
adc
int
push
jb
ret
push
pusha
push
push
jg
xor
xchg
cmc
mov
sbb
pop
inc
sbb
aaa
pusha
daa
stos
js
imul
sub
mov
cdq
push
sub
xor
add
outs
test
popf
cwde
retf
sub
addr16
leave
sbb
loopne
bound
push
cmp
movs
pop
sub
push
aas
cwde
inc
pop
outs
pusha
sub
pop
dec
ja
cwde
out
jp
enter
xchg
ret
xchg
ins
sbb
or
xor
dec
sahf
add
push
sub
clc
out
or
cdq
push
les
adc
cwde
aaa
lods
sub
pop
xchg
icebp
dec
test
call
cwde
jmp
and
lea
cmc
xor
mov
jecxz
rcl
mov
sbb
jge
test
pop
pop
cmp
(bad)
cwde
mov
cdq
and
aaa
(bad)
jae
or
iret
repz
adc
push
or
cwde
popa
cdq
int
cwde
cmp
clc
outs
sbb
inc
pop
xchg
stc
enter
sub
xchg
mov
out
leave
pop
fsub
loopne
pusha
inc
push
cwde
inc
lds
addr16
cmp
lods
or
scas
rcl
lahf
push
xchg
imul
push
cli
adc
sbb
or
xchg
ins
pop
xchg
xchg
daa
fs
xor
dec
retf
out
pop
xchg
(bad)
mov
pop
outs
or
cwde
out
xchg
xchg
into
int3
fimul
jmp
loopne
adc
sbb
jns
cmps
mov
cwde
stos
lock
cwde
mov
sbb
ficom
icebp
mov
aas
ins
loopne
mov
jne
pop
inc
imul
cwde
mov
mov
fadd
sub
rcr
out
or
xor
cmp
hlt
xchg
in
sbb
test
cmp
daa
or
mov
sbb
dec
in
mov
xor
cwde
jle
and
stc
fsubr
jo
xchg
or
sbb
call
rcr
sbb
or
cmp
cwde
push
and
mov
lahf
div
xchg
push
mov
jmp
out
and
ins
push
sbb
fsubr
cmps
je
in
sbb
shl
and
push
inc
scas
ins
dec
scas
xor
push
js
jmp
mov
cwde
jge
xchg
data16
jmp
inc
mov
add
pop
cwde
pop
add
pop
cmp
ins
xchg
fwait
xchg
cwde
inc
pop
mov
pop
sub
loopne
test
popf
push
iret
xor
sti
loope
(bad)
jmp
xor
in
test
sbb
lahf
bound
jp
loope
stc
int3
push
sbb
repz
(bad)
shl
adc
sar
fidiv
loope
push
cdq
mov
push
cwde
jecxz
sbb
aaa
addr16
rcr
adc
sub
push
xor
add
repz
push
inc
pop
leave
loop
cwde
dec
cmp
xchg
in
cmp
test
inc
or
cwde
leave
cmps
inc
or
cwde
or
or
xor
dec
cwde
mov
inc
jecxz
xchg
imul
lahf
aas
mov
pop
mov
jbe
inc
sbb
push
data16
or
or
retf
cwde
mov
or
mov
popf
lods
mov
push
pushf
push
xor
cwde
sbb
scas
push
imul
stos
push
adc
popf
nop
in
jnp
sbb
pop
push
cmp
shr
inc
sub
xchg
test
imul
jo
cdq
cwde
jno
mov
pop
cwde
hlt
xchg
shl
xor
adc
or
int
repz
mov
dec
cmp
jmp
push
and
pop
(bad)
je
int3
cmps
out
cmp
dec
paddusb
mov
das
imul
lahf
popw
jb
cmp
xchg
stos
pop
in
mov
xchg
and
mov
imul
xor
adc
or
pop
das
xor
or
imul
sub
push
or
mov
into
cmps
adc
push
mov
push
lock
mov
test
and
mov
xchg
xor
loop
push
call
sub
or
xor
(bad)
aam
cs
call
dec
jae
mov
cwde
fwait
xchg
(bad)
sub
mov
or
cmp
stos
cmc
xchg
xchg
loopne
pop
xor
lea
inc
push
xchg
push
das
clc
aas
fs
xchg
stos
mov
repz
push
dec
arpl
call
mov
jns
ins
(bad)
ret
jo
dec
iret
call
and
loope
cld
sbb
mov
lahf
or
out
and
pop
sub
into
add
das
clc
jp
cwde
cmp
pop
jmp
retf
out
clc
dec
push
cwde
and
sbb
jno
xchg
dec
adc
cmp
fcmovb
mov
mov
mov
js
rcl
stos
mov
and
je
mov
cmps
sbb
inc
scas
cmp
retf
cwde
movs
jbe
or
les
add
test
sti
ret
fbld
ins
lock
dec
popf
xchg
mov
imul
xor
test
enter
mul
add
or
hlt
xor
lahf
mov
nop
popf
cmp
int3
dec
xchg
xor
frstor
cwde
mov
cwde
push
es
daa
or
pusha
mov
pop
mov
stos
mov
mov
test
mov
clc
mov
jns
dec
out
cmp
xchg
add
js
pop
js
cmp
mov
add
and
xchg
cwde
shr
add
sbb
dec
inc
cmp
pop
mov
bound
mov
jne
in
cdq
lea
(bad)
cwde
dec
shl
pop
sub
cmc
pop
sar
jle
out
mov
les
or
jge
je
add
call
add
clc
rcr
mov
rol
sbb
mov
mov
mov
jp
add
push
pop
dec
pop
cmp
pop
in
or
fdivr
or
inc
outs
fs
and
dec
pop
repz
retf
or
loop
cwde
mov
mov
icebp
test
inc
pop
cwde
mov
repz
push
into
sub
call
add
cmp
retf
gs
cwde
imul
sahf
xchg
retf
loope
push
lods
mov
cwde
fisttp
cmp
ds
adc
push
out
add
cli
dec
push
scas
mov
cli
lds
adc
cwde
adc
adc
adc
push
das
es
(bad)
inc
push
fldcw
aaa
cmovle
sbb
xor
(bad)
les
mov
add
fadd
test
arpl
daa
jb
jae
call
repz
mov
add
cmps
cmp
xchg
int
adc
neg
jmp
xchg
stc
inc
adc
inc
sbb
(bad)
stos
mov
xlat
lods
(bad)
fs
idiv
push
cwde
xchg
movs
sbb
ins
adc
xchg
sahf
(bad)
shl
fbld
dec
fnstcw
xchg
lods
lock
les
mov
sahf
jmp
lds
xchg
cmp
call
sub
mov
daa
cmp
test
push
jnp
stos
mov
add
and
mov
stos
mov
xor
pop
sub
cmps
mov
fbld
clc
and
push
or
pop
dec
push
inc
test
pop
test
or
in
sbb
sbb
or
inc
xchg
das
cmp
sysret
xchg
out
shl
push
shl
mov
lods
hlt
mov
jmp
addr16
iret
out
dec
mov
xlat
push
pop
dec
push
inc
mov
xchg
sbb
lahf
lods
mov
ins
movs
xchg
movhps
push
add
push
push
fsub
mov
enter
ds
adc
mov
sub
pop
les
sar
push
fwait
push
repnz
ret
or
dec
mov
pop
pop
sub
pop
std
cmp
mov
lea
mov
cmp
pop
pushf
lods
mov
retf
sub
sub
mov
test
add
adc
nop
push
mov
add
adc
sbb
inc
or
cwde
pop
lods
rcl
aad
in
cwde
add
(bad)
xchg
loopne
or
adc
ins
adc
jo
push
lds
mov
sti
aaa
add
mov
fstp
mov
nop
lds
(bad)
ins
xchg
lods
push
aad
jns
rcl
mov
imul
movups
retf
sbb
jg
(bad)
popf
int
enter
mov
mov
pop
mov
pop
and
and
mov
icebp
in
fbstp
xchg
call
retf
ret
aad
test
pop
hlt
inc
fucomi
push
in
dec
stos
loopne
scas
xor
setae
fdivr
loope
cmp
jmp
aas
fisttp
pusha
cwde
adc
ret
sub
mov
sbb
mov
clc
pop
ja
mov
mov
push
shr
stc
lock
cmp
(bad)
cwde
cli
push
and
dec
pop
xchg
ins
jg
sbb
mov
add
mov
and
xor
les
cwde
lods
movs
add
out
cmp
mov
jb
mov
ret
test
(bad)
sub
sbb
mov
push
sbb
test
sbb
sets
stos
mov
cwde
in
cmp
out
cmp
test
inc
push
test
jne
add
scas
sar
(bad)
mov
ins
jbe
jmp
push
cwde
cmp
xchg
out
push
cs
aaa
xor
imul
mov
fimul
aad
js
les
cmp
leave
push
xor
inc
jne
dec
lods
sbb
or
xchg
xchg
stos
mov
fnstsw
ja
cmp
sub
sbb
aad
sbb
dec
aas
cwde
retf
aad
in
pop
cwde
pop
adc
and
loope
and
js
push
adc
rcr
(bad)
es
sub
xchg
push
scas
lods
mov
cdq
rcr
pop
(bad)
xchg
mov
(bad)
js
das
jae
inc
and
mov
jg
dec
je
neg
ror
push
daa
sub
pop
fsub
mov
retf
je
jo
not
(bad)
and
popf
or
pushf
test
shl
xchg
mov
imul
int
cwde
lods
and
out
mov
lahf
rol
push
add
xchg
sub
xchg
(bad)
adc
mov
mov
add
sub
xchg
mov
or
add
mov
or
stos
dec
ins
sbb
push
inc
sbb
jmp
xor
push
jnp
(bad)
sub
scas
mov
nop
mov
shl
(bad)
dec
gs
pop
or
cwde
aas
push
cmp
cwde
cmp
push
mov
cwde
mov
pop
lahf
pop
jmp
inc
adc
fmul
xchg
pop
or
lahf
adc
sub
(bad)
mov
adc
jg
add
imul
enter
loop
aad
mov
or
rcr
push
pop
cmp
dec
xor
cwde
fiadd
bound
jl
stos
retf
push
cwde
xchg
fs
aad
gs
test
and
jns
mov
test
int3
mov
test
mov
(bad)
(bad)
mov
pop
pushf
and
sti
mov
jbe
inc
sub
pop
rcl
out
scas
and
sbb
outs
mov
lea
fidivr
jge
pop
fwait
test
lock
xchg
inc
out
xchg
sbb
jo
mov
inc
clc
adc
fcmovu
fstp
sub
lock
adc
add
test
and
nop
inc
push
ins
outs
cdq
pushf
(bad)
mov
add
in
pop
and
cdq
stos
repnz
sbb
cmp
cwde
jbe
inc
nop
jnp
call
outs
dec
xchg
leave
loopne
sbb
pop
in
xchg
out
call
and
or
sbb
mov
xchg
xor
dec
mov
cwde
xor
aaa
pop
xchg
fs
call
cwde
lea
jle
int3
cwde
ss
pusha
aaa
push
xor
and
cdq
xchg
loop
adc
ds
in
popf
fisub
jl
cwde
lea
sub
mov
sub
mov
pop
test
ins
and
das
mov
jne
cmps
mov
call
out
inc
jle
jo
add
aam
dec
pusha
cwde
movs
lock
or
fs
ins
jge
adc
mov
aad
inc
push
jge
xchg
scas
push
push
cmp
aas
cwde
cs
pop
cmp
or
add
call
cmp
pusha
mov
cmp
ss
lea
into
ins
cwde
jmp
stos
and
js
cwde
push
daa
xchg
jns
xchg
mov
aam
xchg
leave
(bad)
mov
xchg
and
outs
sub
jecxz
push
mov
jns
cmp
inc
push
xchg
aas
sbb
mov
and
leave
dec
pop
je
cwde
adc
sub
ins
lahf
mov
jp
rol
inc
or
inc
sub
arpl
jbe
pop
test
(bad)
cmc
cwde
and
xor
adc
or
test
mov
jae
xchg
jnp
and
int3
fwait
pop
cdq
repz
sub
pop
fcom
cli
dec
mov
inc
clc
sub
inc
sbb
retf
scas
aad
sbb
and
lods
push
ret
ret
(bad)
mov
int
ficom
loopne
test
in
dec
(bad)
jmp
inc
sub
test
js
push
(bad)
sbb
pop
js
sbb
inc
iret
cwde
jne
les
mov
inc
jle
sbb
hlt
cmc
clc
xor
in
sbb
jb
push
cwde
add
in
xlat
mov
mov
lods
mov
fstp
cmp
push
into
aaa
pop
js
sbb
pop
arpl
add
js
(bad)
jmp
fdivp
cmp
gs
mov
xchg
aad
aaa
adc
scas
ins
clc
push
mov
cwde
and
add
push
imul
(bad)
imul
jp
cld
jmp
pop
daa
push
rcr
adc
xor
fadd
inc
mov
test
xchg
sbb
xchg
pop
mov
loopne
stc
mov
jo
pop
sub
xchg
mov
mov
push
mov
das
mov
ins
(bad)
mov
in
mov
and
jae
push
addr16
lock
or
iret
cwde
movs
xchg
push
arpl
sbb
dec
sbb
xor
aaa
loopne
mov
pop
mov
push
push
adc
xor
mov
dec
or
adc
mov
cwde
aad
inc
dec
fwait
jl
push
mov
mov
stos
xchg
or
in
sub
pop
xor
sahf
lods
call
test
xchg
jbe
lock
mov
xchg
scas
shr
call
cwde
cmps
(bad)
cmp
cwde
movs
sahf
fcomp
cwde
retf
mov
jmp
je
imul
test
ja
ins
cwde
or
loop
and
cmp
add
mov
ret
sub
sub
pop
mov
outs
jb
cmc
pop
sub
lds
push
test
sub
mov
sbb
and
mov
add
lock
fnsave
cmp
fcomp
sbb
call
ins
push
mov
push
pop
jp
lods
cmp
retf
mov
(bad)
leave
fcom
mov
retf
and
es
call
inc
mov
add
cwde
call
clc
and
call
mov
add
cwde
mov
dec
cli
jo
mov
lea
sbb
jecxz
cwde
or
(bad)
mov
xor
xor
xor
mov
dec
jns
add
adc
xor
mov
pop
inc
push
mov
push
inc
sbb
xchg
mov
cmp
addr16
fnsave
xlat
inc
bound
push
cmp
cs
ins
add
test
and
push
jns
xchg
cli
mov
icebp
dec
push
(bad)
xchg
adc
cmp
cmp
dec
push
nop
sbb
outs
out
adc
fidiv
push
pop
inc
mov
enter
imul
fldcw
dec
mov
icebp
jmp
pop
out
ins
or
xchg
or
sar
xchg
pop
cs
add
mov
inc
(bad)
mov
retf
scas
jnp
cwde
jmp
test
xchg
arpl
mov
jge
cmp
das
sub
mov
enter
jbe
fwait
and
(bad)
fdivr
mov
inc
sbb
hlt
pop
jl
dec
cmps
mov
scas
push
jg
mov
frstor
cwde
test
lea
sbb
xor
push
mov
call
mov
cmp
xor
clc
xor
cmp
rcr
mov
nop
push
cmp
cmp
sbb
fadd
xchg
cs
push
int3
push
(bad)
mov
pusha
adc
jmp
and
ret
mov
mov
pop
out
sbb
movs
mov
int3
sbb
cmps
xor
mov
repz
pushf
in
or
pop
das
test
dec
repnz
test
dec
jnp
(bad)
or
int
jge
mov
fistp
hlt
popf
fwait
and
loopne
cld
mov
add
pop
sub
inc
xchg
stos
jle
leave
adc
outs
sub
jmp
dec
cdq
pop
cmp
push
sbb
sub
adc
neg
mov
mov
push
(bad)
cmp
push
movlhps
sub
dec
xchg
ret
cmps
mov
inc
cwde
inc
imul
call
(bad)
ins
inc
sub
daa
dec
cwde
push
and
scas
mov
xor
sbb
mov
sbb
mov
cwde
rcl
adc
mov
out
popf
imul
pop
test
cwde
cmp
cmp
or
call
push
and
mov
and
xchg
jmp
sub
ss
clc
mov
push
adc
pmaxsw
or
cwde
lods
mov
sbb
cwde
clc
sbb
or
jecxz
sbb
cmp
sar
inc
pop
mov
mov
sbb
mov
push
call
mov
ins
xchg
mov
cmp
outs
add
pusha
xchg
pop
cmp
xchg
lods
cwde
mov
repz
ins
dec
mov
cmp
cld
add
dec
scas
pop
es
jb
cwde
lods
push
and
mov
xchg
dec
push
add
out
push
inc
xlat
adc
jno
enter
retf
add
cmp
xchg
or
aam
mov
inc
pop
shr
ins
adc
mov
dec
dec
cwde
push
add
xchg
mov
jge
jp
and
cdq
jae
jge
outs
outs
jg
arpl
mov
sub
inc
pop
push
cwde
fxch
shl
jmp
mov
sub
pop
adc
add
cmp
rcr
cdq
pop
and
fld
sbb
test
cli
mov
mov
lock
pop
cwde
dec
push
daa
inc
sbb
outs
cwde
stos
dec
jno
pop
mov
cwde
int
mov
les
dec
ror
sbb
aad
push
xchg
push
pop
leave
push
pushf
imul
mov
lock
adc
jmp
cmp
ins
jl
in
mov
push
rol
push
ds
jb
out
(bad)
popf
cdq
jo
movs
leave
aas
or
lock
jle
stos
cmp
add
push
outs
xchg
test
fcomip
push
mov
pop
inc
push
daa
push
add
ins
pop
sub
mov
icebp
shl
out
jle
adc
mov
not
lahf
sbb
cmc
cmp
cwde
jmp
xchg
mov
mov
ins
sbb
loope
imul
mov
sbb
cmp
xchg
mov
push
retf
loop
cwde
and
xchg
in
retf
jmp
pop
cli
xor
push
xchg
ret
pop
xchg
dec
dec
jge
scas
adc
ja
retf
jmp
and
pop
jne
and
pop
jl
scas
shr
test
sbb
sbb
lahf
xchg
std
iret
imul
in
xchg
adc
add
shl
xchg
std
ret
lods
jno
test
inc
cmp
in
pop
or
cmc
pop
cmp
and
push
sub
or
hlt
fwait
cwde
pusha
(bad)
loopne
aam
test
cld
rol
popf
sbb
cmp
test
or
mov
jp
xchg
retf
dec
cmps
sbb
mov
mov
fild
mov
jmp
and
pop
out
retf
imul
lods
leave
ficom
mov
cld
fadd
jae
das
xchg
inc
inc
shr
mov
jmp
push
ds
in
xchg
int3
aam
pop
std
js
clc
fadd
ret
icebp
sub
ficomp
test
pushf
or
mov
push
pop
fsubr
push
daa
sbb
daa
xor
pop
jmp
int3
out
stos
jecxz
dec
adc
xchg
lods
sub
mov
mov
cmps
lods
adc
fisubr
mov
xchg
push
xor
and
jae
dec
popa
leave
adc
gs
add
push
or
std
mov
cmp
jecxz
mov
ror
inc
ss
(bad)
sbb
cli
int
push
adc
lahf
hlt
mov
mov
jo
xchg
repz
pusha
out
jl
inc
call
jmp
jo
(bad)
out
retf
sbb
or
cwde
out
push
or
popa
sub
nop
cdq
fwait
movs
pop
pushf
push
cmp
in
addr16
imul
hlt
out
aaa
scas
in
or
adc
shr
xor
pop
mov
add
pop
cmp
and
popf
fs
call
mov
lahf
inc
dec
pop
jp
out
cwde
mov
int
popf
cli
int3
cmp
div
cwde
inc
pop
sub
addr16
cwde
nop
outs
fwait
push
mov
test
xor
stos
mov
add
leave
sbb
out
ins
pop
cwde
add
ja
outs
cwde
bound
push
sub
fsub
cwde
mov
(bad)
or
test
push
sets
fcom
mov
mov
stos
xchg
icebp
out
rcl
xchg
push
mov
stos
cwde
mov
fcomp
cwde
jo
pop
xchg
mov
xchg
out
inc
retf
in
lea
mov
add
mov
ret
adc
cmps
mov
imul
in
mov
adc
ds
cmp
and
call
rcl
xor
add
or
jl
fcomp
mov
pop
mov
or
je
(bad)
stos
shr
call
test
aad
cmp
loopne
mov
add
cld
xchg
xchg
icebp
pop
sbb
out
sbb
xchg
push
in
std
add
and
jnp
in
add
push
ja
add
dec
add
push
jle
das
adc
sbb
sbb
shl
push
aaa
sar
push
mov
in
pop
cmps
lahf
test
cwde
inc
shl
xchg
sub
inc
int3
pop
mov
cwde
imul
shl
cwde
inc
test
cmc
int3
push
iret
fcomp
inc
test
outs
sbb
dec
push
scas
cmp
call
je
mov
and
cwde
retf
imul
xchg
mov
mov
xchg
mov
jmp
arpl
rcr
mov
out
sub
cwde
dec
movs
out
leave
imul
and
push
rol
cwde
sti
in
hlt
jecxz
pop
jbe
mov
or
in
out
(bad)
sbb
or
cwde
inc
xchg
cmp
loopne
loop
cs
imul
xchg
adc
jae
mov
bound
scas
sbb
hlt
loopne
call
cwde
add
jecxz
and
cwde
mov
xor
out
jle
test
out
sub
and
test
inc
retf
cmp
call
daa
or
push
sub
es
pushf
push
lods
lods
in
or
(bad)
cmp
inc
cmp
or
cmp
push
push
aad
and
mov
inc
fcom
cmp
dec
mov
in
retf
ja
retf
ss
lock
call
xchg
pop
daa
mov
test
scas
jle
xor
test
xchg
(bad)
cwde
dec
test
std
shr
jp
iret
hlt
fcmovb
shr
nop
cdq
int
dec
and
cmp
push
ins
sub
rol
cwde
sub
addr16
jmp
test
sbb
arpl
scas
inc
cmp
shl
jmp
cwde
and
mov
mov
push
popf
mov
mov
pop
cmp
fisubr
sbb
call
mov
and
sub
dec
lahf
push
jbe
je
shl
aad
xlat
ret
fstp
or
lods
outs
test
push
les
dec
cwde
test
xor
and
mov
adc
shl
js
jge
cwde
mov
mov
or
jbe
cli
aaa
add
pop
push
cwde
fdivrp
inc
in
int
pop
call
sub
mov
in
cmps
inc
and
xor
jb
test
add
pop
push
xchg
mov
dec
cwde
out
mov
outs
cmps
inc
adc
jae
sbb
cwde
mov
inc
cli
rcr
push
adc
xor
push
sti
(bad)
sub
aas
(bad)
cwde
sbb
jp
cmp
jg
mov
cwde
stc
addr16
mov
lock
test
jmp
mov
adc
inc
int
gs
ftst
pop
cwde
or
mov
dec
repz
xchg
jp
lahf
dec
sbb
ins
inc
cdq
sbb
mov
sbb
xchg
xor
sbb
mov
clc
fild
cmps
and
cmp
sti
fmulp
shl
loop
xchg
adc
(bad)
iret
sub
into
jp
cwde
lahf
xchg
sbb
shl
add
ret
sbb
mov
mov
cmp
ror
sar
fsubr
xchg
inc
repnz
or
and
dec
clc
out
push
cmp
adc
cmc
mov
cwde
ret
cmp
imul
or
cdq
mov
jge
inc
pop
popa
in
xchg
ds
jo
out
add
mov
outs
mov
(bad)
out
bound
repz
pop
adc
(bad)
(bad)
js
cs
mul
push
aam
sbb
pop
call
push
movs
clc
xchg
outs
(bad)
mov
xor
leave
(bad)
hlt
sbb
add
or
test
dec
sub
sbb
fistp
pop
xchg
push
arpl
jne
inc
fcomp
repz
mov
cli
les
sbb
xor
cwde
stc
adc
sti
dec
inc
inc
cwde
xor
adc
mov
xchg
loop
fstp
fst
sbb
jmp
pop
sbb
dec
sub
nop
popf
int
cwde
shl
sbb
adc
icebp
cwde
stc
add
repz
stos
test
xor
cdq
xchg
push
mov
sub
mov
adc
mov
ss
xchg
es
fisubr
or
push
push
in
jp
adc
sbb
aaa
add
popf
jb
push
jo
call
ins
ret
pop
shr
mov
or
jae
sbb
aad
cwde
fdivr
repnz
xchg
dec
adc
inc
imul
push
jne
xchg
mul
ds
fdiv
sahf
pop
push
jge
adc
popa
and
mov
or
mov
cwde
xor
add
(bad)
ss
and
call
jle
inc
lods
cmp
inc
xor
pop
fisttp
mov
sbb
cmp
mov
arpl
nop
mov
cmp
fstp
(bad)
xlat
sub
test
leave
cmp
pop
retf
add
cwde
movhlps
pop
dec
push
cwde
loope
pop
xor
dec
sub
hlt
(bad)
cwde
xor
call
sbb
fdiv
das
jb
pushf
inc
call
cwde
add
mov
cdq
test
push
sub
por
push
repnz
lahf
xor
push
push
and
pop
sbb
and
test
inc
push
fs
ja
pop
push
adc
data16
pusha
push
fcomp
fdiv
mov
and
sbb
xor
cmp
adc
jae
shl
sub
icebp
sar
fbld
jg
scas
aas
or
in
sbb
jg
cwde
lods
jmp
std
jp
test
pop
mov
jb
in
test
fnstcw
push
cwde
frstor
xchg
mov
ins
sbb
and
sbb
pop
inc
pop
je
xchg
adc
fistp
inc
xchg
cs
mov
cmp
pusha
ja
jae
(bad)
jle
out
cmp
movs
call
mov
or
cs
outs
in
out
xchg
sub
ins
push
lds
jno
xchg
cmp
fidivr
adc
xor
idiv
icebp
ret
sub
pop
cs
test
addr16
add
in
imul
pop
pop
imul
or
mov
xchg
mov
std
scas
push
cmp
scas
jp
and
xchg
bound
out
cwde
(bad)
fcom
repz
cmp
in
xchg
ja
sub
mov
clc
mov
xor
xor
xchg
shl
or
sbb
cwde
lods
push
or
ds
leave
ja
imul
cwde
push
xor
jne
scas
pop
popf
xchg
hlt
int
adc
out
in
push
mov
adc
xchg
or
jmp
lds
pop
in
pushf
mov
add
adc
fmul
cli
cwde
retf
sub
fs
xchg
imul
ins
(bad)
movs
add
sahf
sbb
les
mul
push
(bad)
pop
scas
xor
jb
shl
(bad)
fucom
sbb
xchg
scas
cli
xchg
xchg
popa
jae
in
xchg
jmp
cwde
clc
test
push
sub
or
xor
xchg
xchg
fcmovnb
shl
ins
xchg
movs
enter
dec
cdq
jmp
xchg
xchg
xor
popa
pop
push
xchg
stos
(bad)
fwait
out
sbb
jo
pop
mov
ret
into
cwde
jo
pop
repz
cwde
jae
outs
ror
pop
cwde
in
or
push
push
and
jnp
movs
mov
aas
adc
cmp
inc
pop
out
and
and
mov
js
xchg
rol
int
inc
jp
ins
inc
imul
ins
pop
push
popf
cmps
jb
daa
call
or
add
ficomp
push
dec
or
pushf
and
mov
dec
jns
jge
movs
jne
lock
inc
cwde
xchg
cmp
mov
fsub
and
outs
push
ret
mov
jb
rcl
and
popf
mov
aad
mov
int
xor
dec
xchg
imul
(bad)
loope
les
jae
arpl
inc
cwde
sbb
pop
loop
mov
jmp
lock
jecxz
adc
push
(bad)
stos
add
or
call
ja
dec
js
in
fwait
pop
cmps
xchg
test
test
mov
scas
fld
or
shl
stos
test
mov
pop
mov
push
ret
fst
dec
pusha
and
sbb
sbb
inc
xchg
mov
pushf
mov
mov
adc
pop
imul
xchg
cmp
jae
xor
call
out
sub
cli
movs
mov
xlat
outs
xchg
pop
push
ret
fsubp
fwait
sub
pushf
ins
(bad)
loopne
sbb
sbb
xchg
mov
xchg
inc
js
rcr
xchg
mov
inc
imul
pop
add
cwde
lods
mov
sbb
lods
or
pop
mov
mov
fsub
sub
aam
or
sbb
push
int3
stc
cwde
jbe
call
dec
cwde
jne
push
icebp
and
adc
inc
mov
iret
cwde
xchg
sub
jns
fst
cwde
xor
dec
inc
mov
cmp
cmp
mov
(bad)
cwde
sub
fdiv
cmp
add
in
cwde
push
(bad)
fldcw
cwde
jbe
dec
or
cwde
cdq
lods
xor
scas
test
test
inc
xchg
jl
mov
stc
les
out
inc
shl
mov
loope
clc
xor
cmps
or
lods
push
push
out
popf
inc
sbb
es
popa
sub
mov
and
xor
sub
call
ret
or
out
in
nop
push
sub
xchg
fxch
aad
stos
sbb
xchg
jecxz
jns
sbb
cmp
mov
xchg
mov
nop
or
fwait
les
mov
adc
pop
add
xchg
jno
pop
and
jmp
xlat
cld
idiv
sub
sub
xchg
rcr
and
out
xchg
in
xor
push
adc
fsubr
xchg
fidiv
cld
(bad)
push
mov
bound
cmp
stc
fisub
jae
cwde
sbb
lds
mov
mov
sbb
pop
xchg
pushf
cmps
rcr
fs
cdq
lahf
movs
xor
pop
sbb
push
ret
leave
test
push
adc
xchg
popf
xor
pop
pop
out
jnp
jge
inc
xchg
pop
mov
daa
ss
clc
shl
lock
in
xlat
stc
jmp
int
int3
fist
ins
push
dec
mov
lahf
jle
adc
xlat
ins
adc
jns
je
xor
cwde
add
add
push
adc
outs
js
xchg
arpl
mov
xchg
xchg
jge
imul
cmps
repnz
sub
inc
push
sbb
inc
cwde
xor
int
cwde
lods
neg
repz
cwde
cmps
add
call
xchg
xchg
popf
test
mov
dec
pop
pusha
es
gs
mov
adc
call
jne
mov
test
and
std
jo
adc
sbb
xchg
cwde
add
push
mov
jbe
rcl
cmp
mov
jbe
leave
jl
in
mov
(bad)
jg
xor
sbb
push
add
repz
add
ins
xor
mov
jmp
jl
nop
and
sbb
cmp
mov
leave
xchg
lods
icebp
(bad)
scas
jle
mov
or
(bad)
stc
fdivr
fimul
repz
rcl
ror
daa
mov
dec
jge
cmp
arpl
ss
add
(bad)
enter
mov
jmp
stos
test
imul
sbb
loopne
test
mov
xchg
xor
or
imul
lds
loope
jg
cmp
add
or
add
pop
loop
and
mov
sti
ret
je
jge
mov
mov
push
in
test
xchg
xor
jecxz
cwde
ret
jmp
sub
loop
cwde
shl
clc
or
add
sbb
dec
mov
xchg
jge
daa
stos
inc
(bad)
xlat
cdq
test
fnstcw
(bad)
jmp
lods
pop
lds
cmp
stos
lods
popf
xchg
(bad)
loope
std
sbb
sub
push
daa
inc
xlat
sar
sar
imul
repnz
cwde
mov
mov
add
cmp
inc
push
cmp
inc
push
dec
dec
sbb
xchg
add
mov
loopne
adc
push
sub
shl
(bad)
jno
mov
movs
mov
lods
out
pop
scas
sbb
add
stos
mov
or
fwait
or
sbb
fist
adc
ret
xchg
aam
enter
lahf
test
clc
cmp
mov
xchg
push
nop
js
imul
pop
push
pop
or
xchg
xchg
mov
fcmovnbe
push
cmp
jo
cwde
add
int3
test
sar
int3
jl
xchg
sbb
lock
ret
inc
gs
hlt
nop
jecxz
pop
inc
stc
pop
cmp
mov
or
jmp
cwde
movs
or
bound
cmp
jle
pop
enter
xlat
xlat
cmp
inc
dec
push
push
das
sub
sar
adc
cdq
xchg
das
sbb
call
inc
xchg
data16
movs
mov
js
scas
out
cmc
cmp
ins
mov
dec
enter
cmps
or
and
test
xchg
lahf
stos
out
adc
sbb
pushf
and
xor
rcl
xchg
cmps
fldenv
mov
leave
mov
adc
inc
pop
cvtdq2ps
mov
test
dec
(bad)
fdiv
xchg
stc
xor
pop
mov
lahf
dec
add
jns
movs
pop
arpl
mov
lahf
xchg
loope
cwde
dec
sub
push
mov
xchg
test
dec
test
imul
test
call
ret
(bad)
dec
mov
pusha
pop
sub
test
push
cs
into
jecxz
ror
cwde
out
div
add
xchg
dec
sub
jmp
das
js
sub
push
outs
ja
lea
lods
aad
add
imul
xchg
call
cwde
cmps
mov
out
inc
sbb
mov
inc
push
stos
jno
dec
and
(bad)
scas
mov
jmp
adc
fnstcw
sbb
out
cmp
loope
cs
cdq
sbb
mov
in
jne
add
adc
mov
test
adc
jl
stc
mov
imul
and
cmp
out
retf
push
in
cwde
call
movs
test
test
xchg
aaa
mov
loopne
pop
test
in
popf
xchg
inc
push
addr16
js
inc
sub
cwde
fs
dec
imul
cwde
xchg
jns
xor
mov
mov
cwde
push
outs
js
xchg
movs
mov
add
or
cmp
cmp
loopne
jg
addr16
xor
lds
loopne
lea
icebp
push
xor
inc
gs
jecxz
test
mov
pop
jns
and
aam
jo
cwde
in
add
push
sbb
mov
ss
pop
mov
or
fsub
aad
rcl
and
fst
dec
xchg
loope
sub
push
leave
adc
mov
and
je
mov
ja
mov
xchg
sbb
ret
pop
xchg
ins
mov
xor
adc
mov
xchg
lds
push
lahf
pop
adc
inc
sbb
inc
mov
call
(bad)
in
aad
div
int
xchg
(bad)
daa
out
setg
rep
loopne
or
test
out
adc
adc
jno
jb
mov
addr16
loopne
stos
sti
into
cmp
out
in
cmp
push
jle
lock
fdiv
jnp
mov
shr
loope
sub
jnp
fbld
push
push
inc
outs
gs
mov
mov
push
fisub
sub
adc
sbb
out
jb
cmp
bound
mov
xchg
xor
xlat
(bad)
xor
aaa
mov
addps
inc
xchg
cbw
xchg
retf
adc
aas
jae
and
push
push
push
pop
jb
cwde
mov
in
mov
mov
ins
test
retf
add
cwde
leave
ins
pop
push
push
jbe
cwde
and
and
adc
mov
dec
je
sbb
inc
xchg
test
(bad)
sbb
jo
enter
pop
cmp
mov
inc
stos
mov
sbb
mov
loop
icebp
push
sahf
bound
cmp
cmp
test
fwait
cwde
(bad)
and
repnz
sbb
in
and
cmps
ds
loopne
sub
cwde
sbb
lods
inc
ret
jb
cwde
cmc
mov
jns
cwde
mov
ja
push
mov
lahf
dec
fadd
pop
sbb
xchg
sub
push
sub
popf
out
es
test
xor
hlt
sub
movs
retf
jmp
clc
cmp
pop
test
xor
popa
dec
mov
sbb
imul
scas
pop
pop
ss
out
push
js
cwde
fiadd
inc
lock
sub
add
sbb
fimul
outs
sub
mov
cwde
inc
shl
xchg
pop
mov
and
and
loop
ins
js
xchg
dec
pop
pop
push
push
pop
dec
jge
mov
stos
pop
push
loope
jb
inc
retf
popf
dec
jecxz
je
out
xor
add
cmp
mov
mov
cmp
dec
bound
rcr
xchg
inc
pop
cdq
dec
jns
xor
mov
fisub
mov
pop
jg
call
retf
xor
xchg
inc
idiv
push
add
mov
mov
popf
sub
cwde
dec
sub
or
cwde
lock
repz
sub
movs
pop
pop
fcomp
xchg
popf
cmps
sbb
pop
test
sbb
mov
(bad)
fstp
xchg
and
ja
call
addr16
call
push
xchg
popa
sbb
ins
inc
ja
mov
or
cwde
js
test
adc
popf
adc
out
sbb
dec
test
shr
and
xchg
fs
js
loopne
enter
add
and
call
adc
xor
or
sar
inc
cwde
lods
inc
xor
sub
lock
rol
sub
cs
mov
xchg
mov
outs
or
mov
sbb
out
xchg
mov
mov
adc
test
pop
pushf
sti
(bad)
into
and
mov
nop
rcr
ds
push
jge
push
mov
adc
add
cmp
jo
push
push
and
retf
or
aam
pusha
cmp
xchg
out
pop
and
pop
clc
stos
call
mov
sub
and
repnz
xchg
xor
repz
rcl
jp
inc
xchg
shl
neg
rol
adc
sub
jle
cwde
dec
adc
xchg
sbb
adc
or
xchg
cmp
lods
mov
mov
mov
sbb
stos
mov
sbb
repz
jmp
push
(bad)
cwde
inc
push
es
stc
(bad)
cwde
stos
mov
(bad)
and
scas
lahf
std
shl
cwde
adc
pxor
cwde
cmps
add
mov
pop
mov
xchg
leave
or
xchg
repz
sbb
jp
ins
sbb
push
xor
xchg
inc
add
add
push
cmc
mov
dec
leave
xlat
cmp
addr16
mov
and
cmps
lods
sbb
std
rcl
jmp
imul
ins
dec
sub
lahf
adc
mov
cwde
mov
jecxz
add
xchg
push
and
dec
pop
sbb
je
pop
adc
sub
xchg
sub
cmp
sub
aam
and
int3
mov
xchg
xor
xor
mov
inc
cmps
es
adc
aad
xor
adc
mov
xchg
fidiv
pop
mov
inc
add
inc
cwde
popf
je
jno
xor
push
cmp
push
pop
cmp
aas
cwde
push
pusha
fucomi
mov
xchg
sar
xor
not
fldcw
fst
pop
rol
popf
ins
jae
inc
cld
cmp
xchg
xchg
into
dec
mov
dec
mov
in
cmc
push
fbstp
shl
xchg
jle
hlt
mov
lahf
cwde
je
pop
aad
jbe
xor
outs
inc
jno
sub
mov
xchg
and
xor
jbe
lods
sbb
cmp
jge
xor
(bad)
std
jo
ins
test
or
push
test
mov
jle
ja
push
inc
fdiv
cli
xchg
xor
test
sti
sbb
lock
cmps
leave
adc
mov
out
cmc
cmp
pop
sbb
push
js
stc
xor
and
out
mov
xlat
(bad)
push
shr
xor
shl
jp
mov
xchg
pusha
repnz
out
or
cmp
int3
loopne
out
push
ja
fimul
or
xlat
dec
xchg
pop
sub
add
mov
sbb
sub
xchg
test
cmp
aas
fwait
xchg
lods
fs
pop
xor
mov
and
outs
pop
jns
jle
add
mov
mov
adc
sub
jmp
imul
xchg
test
push
push
es
out
in
pop
and
(bad)
int3
push
cmp
jae
dec
cs
mul
adc
jb
dec
cwde
fcom
inc
sahf
cwde
xor
int3
(bad)
fisttp
jp
test
imul
ds
xchg
pop
jmp
cwde
cs
add
into
mov
add
push
imul
popf
or
jecxz
xchg
das
mov
in
cmc
in
lods
call
inc
pop
jbe
xchg
push
sub
add
outs
cwde
dec
movs
mov
mov
xchg
lahf
bound
not
cwde
arpl
pop
pop
push
jmp
mov
fwait
xchg
jne
cwde
dec
call
cwde
jo
and
add
xchg
outs
mov
repnz
lods
stos
jg
lahf
aas
pop
or
sbb
sub
pusha
pop
inc
popf
int
adc
cld
xchg
xchg
adc
cld
cmc
cs
stc
lahf
rcr
in
or
push
xor
cwde
cmc
sbb
jb
lahf
mov
mov
cmp
dec
js
fisub
or
sbb
pop
add
(bad)
mov
adc
aam
and
dec
mov
cmc
popa
sbb
sub
push
cwde
push
and
out
mov
retf
enter
dec
push
jmp
leave
mov
rol
ds
leave
gs
jmp
mov
ds
out
xor
jecxz
ds
inc
hlt
add
or
cwde
xor
iret
push
stc
loope
popa
in
int
js
adc
jecxz
sbb
add
xchg
jns
mov
rcr
xchg
xchg
jae
jno
and
mov
sub
sub
xchg
(bad)
cmps
in
and
jmp
inc
nop
adc
sub
cwde
pop
pop
sub
mov
mov
push
lock
ja
adc
enter
nop
adc
cwde
popf
sbb
or
cwde
mov
mov
inc
lahf
clc
nop
dec
cwde
jl
aam
jb
fs
lock
out
xchg
fbstp
push
scas
jno
loop
mov
aad
xchg
fs
and
cwde
mov
mov
cwde
gs
(bad)
repz
vmread
out
test
mov
jle
lock
mov
fadd
out
sar
push
cwde
hlt
arpl
dec
add
lods
outs
jmp
imul
lahf
and
fwait
(bad)
retf
xchg
sar
sub
mov
xlat
aad
pop
mov
test
std
pop
xchg
and
or
add
fmul
dec
ja
mov
int
fcomp
(bad)
sar
jmp
sbb
in
stc
jl
mov
mov
fmul
adc
repnz
in
xchg
cmps
mov
cmps
add
xlat
scas
aaa
call
loopne
movs
test
in
push
dec
push
jno
cmp
sub
mov
retf
fcomp
or
fisub
icebp
(bad)
test
mov
mov
mov
pop
leave
ret
out
std
xor
daa
jmp
push
xchg
cwde
repnz
ret
xchg
mov
loop
(bad)
add
jo
xchg
mov
and
and
sbb
arpl
nop
cwde
bound
dec
sub
out
push
push
jecxz
mov
es
mov
in
xor
cwde
pop
push
push
cli
jnp
das
cmp
movs
js
lahf
add
xchg
ja
sub
loope
mov
in
mov
adc
sbb
pop
(bad)
push
cwde
sbb
leavew
mov
sbb
iret
jg
add
push
jne
sar
jae
sub
push
rcr
sbb
add
inc
jo
(bad)
xchg
retf
aad
stc
imul
ds
or
lea
test
xchg
(bad)
out
add
cwde
outs
push
ds
fsub
cwde
shl
jmp
sbb
cwde
loop
ins
je
fwait
cwde
mov
jle
jge
stos
mov
shr
hlt
push
imul
popf
bound
lahf
xor
pop
mov
pop
popa
cwde
jae
adc
loopne
mov
ds
dec
out
and
aas
jne
fucom
(bad)
not
jmp
fcom
add
call
jno
sbb
mov
jmp
push
mov
addr16
mov
jp
stos
(bad)
int
cmp
pop
pop
imul
movs
fcomp
repnz
lea
js
xchg
(bad)
mov
pop
adc
push
mov
xchg
fisub
arpl
adc
xor
xor
mov
sub
test
xchg
nop
das
mov
test
lahf
xor
pop
out
cmps
push
mov
jo
mov
nop
(bad)
mov
pushf
lods
pop
mov
mov
fs
sbb
mov
jle
dec
mov
lahf
cwde
call
leave
cmp
xor
test
aaa
jae
mov
add
mov
push
xor
and
or
or
and
dec
lahf
cmp
(bad)
les
xor
dec
out
retf
(bad)
sbb
mov
mov
popf
int
les
sbb
inc
sub
sub
lahf
gs
push
cmp
cwde
pop
sub
or
or
out
push
mov
jle
cwde
mov
sahf
mov
push
test
xchg
xor
jl
xor
gs
ret
stos
(bad)
fcmovne
cwde
enter
sbb
dec
jnp
adc
push
mov
jg
mov
loopne
lock
iret
popa
dec
push
xchg
dec
(bad)
jp
and
pop
loopne
xor
pushf
or
cmps
inc
xchg
push
into
push
cmp
sub
out
mov
pop
sub
fnsave
sbb
cmc
xchg
iret
jmp
mov
add
push
xchg
fdivr
iret
imul
adc
test
or
fdivr
cdq
scas
sbb
jmp
mov
sbb
std
stos
sbb
add
and
ins
aaa
add
xchg
mov
xchg
mov
rcl
clc
or
not
sub
imul
mov
sub
cmp
or
loope
pop
mov
xchg
cwde
std
outs
dec
imul
rcr
popf
ins
call
mov
lahf
enter
xchg
popa
ror
pandn
jmp
mov
aaa
mov
xor
retf
xchg
jl
add
xor
aad
push
imul
fiadd
sub
xchg
inc
sub
jbe
mov
cwde
cmp
pop
cmp
cwde
xor
mov
push
cwde
adc
xor
(bad)
cwde
mov
nop
cs
xchg
cmp
push
call
es
fs
adc
mov
arpl
cwde
movs
mov
mov
and
jae
jo
aaa
sqrtps
fwait
addr16
jg
je
mov
imul
pop
ins
mov
popf
mov
adc
call
pop
sbb
cld
rcr
data16
sbb
std
ret
xchg
mov
jns
enter
cmp
add
outs
jne
cdq
outs
xchg
inc
xchg
bound
cli
(bad)
push
and
and
stos
add
jbe
aam
arpl
mov
cdq
clc
mov
or
into
push
sub
stos
lds
sbb
inc
cdq
jmp
shr
inc
pop
sub
test
jo
fcmovne
adc
adc
jbe
push
sub
xchg
dec
sub
std
cwde
lods
(bad)
xchg
es
xchg
les
aam
ret
pop
inc
int3
and
retf
xchg
pusha
das
out
pop
pop
fcomp
xchg
bnd
movs
iret
mul
sub
sub
xchg
stos
push
dec
ret
dec
jmp
inc
(bad)
rcr
xchg
js
(bad)
sub
pop
sbb
sbb
repnz
neg
mov
out
add
jmp
jmp
cwde
jle
imul
xchg
scas
fistp
mov
cwde
ret
jb
jmp
jecxz
les
cmp
sahf
mov
(bad)
fwait
gs
sar
in
sub
cmp
mov
pop
clc
ret
cwde
aas
adc
push
rcl
retf
jns
int3
(bad)
in
(bad)
sub
and
xchg
pop
fisub
sub
lods
or
loope
push
jge
clc
adc
rcl
xlat
mov
xor
mov
mov
stc
adc
aas
jl
mov
cmp
xor
popf
ins
sbb
xchg
push
cmp
pop
xchg
push
stc
aas
sub
xchg
jg
mov
mov
(bad)
outs
mov
arpl
fsub
fcmovne
fnsave
jb
xchg
ins
or
sahf
adc
lahf
mov
enter
mov
dec
sbb
push
je
sahf
or
cwde
mov
or
repnz
lea
fsub
add
cwde
fst
leave
mov
fmul
aad
mov
mov
cmps
mov
js
nop
loop
fcmovnu
js
mov
sub
dec
jae
cli
cwde
jnp
xor
mov
repnz
shl
std
cwde
add
mov
aas
push
mov
(bad)
ror
stc
retf
in
out
add
outs
inc
inc
push
jmp
and
retf
and
push
mov
jmp
fisttp
pop
loopne
sub
xchg
mov
add
mov
stc
push
stos
dec
shl
fcmove
or
xor
or
ret
sar
sbb
xchg
push
addr16
sbb
and
sbb
dec
add
jo
enter
pop
xlat
inc
jo
mov
sbb
push
jb
inc
sub
mov
rcl
mov
leave
push
add
lock
push
mov
lea
cmp
fs
cwde
movs
cmp
mov
neg
push
imul
sbb
sub
mov
jecxz
aas
repnz
pop
sub
mov
pop
cwde
jne
ja
mov
retf
arpl
std
mov
loope
call
scas
(bad)
clc
mov
in
xchg
sti
push
adc
xor
les
sbb
adc
pushf
cwde
scas
jb
ins
out
cmp
sub
jl
stos
cwde
sar
dec
mov
lods
mov
cwde
jge
pop
add
ss
das
in
sbb
mov
cwde
jmp
adc
add
call
pop
lahf
scas
inc
mov
retf
xchg
ret
or
xchg
out
repnz
out
mov
jge
adc
dec
sbb
and
push
xchg
retf
scas
add
inc
mov
push
or
shl
sbb
stos
dec
inc
cwde
ins
stos
mov
fsub
cli
shl
push
repz
ins
mov
jo
cmp
popf
xchg
mov
inc
sbb
and
fistp
shl
xchg
icebp
jae
sub
movs
loopne
or
retf
inc
mov
or
popf
add
pop
cmc
int3
push
test
add
les
sar
mov
jmp
mov
inc
or
cmpps
adc
cmp
cwde
inc
dec
or
mov
test
test
mov
stos
pop
fdivr
dec
pop
sbb
cwde
idiv
mov
add
mov
add
jp
ja
cwde
mov
loop
pop
cwde
(bad)
out
mov
movs
sahf
xchg
pop
dec
inc
cdq
sti
or
imul
and
xchg
sar
shl
(bad)
mov
xchg
mov
jmp
dec
js
inc
xchg
sbb
into
std
fwait
ret
js
gs
mov
or
sar
call
movs
sub
lahf
fistp
mov
mov
adc
jne
cmp
mov
ja
pop
sub
fistp
int3
push
xchg
cs
push
or
push
adc
xchg
and
add
sub
sbb
mov
out
adc
cmp
adc
cwde
popf
jbe
mov
adc
xchg
pop
movs
dec
add
sti
js
jbe
cwde
push
sbb
rol
jle
bound
movs
mov
adc
push
push
in
push
fadd
out
mov
imul
dec
cwde
push
inc
(bad)
xchg
jmp
cdq
pop
pop
pop
push
cwde
les
loopne
shl
cmp
xchg
mov
jb
pusha
test
fs
cmp
push
cmps
cwde
pop
adc
or
or
fimul
and
(bad)
in
cwde
or
lahf
test
cli
push
bts
mov
cmp
cwde
sahf
jl
inc
cwde
mov
mov
ins
stos
xchg
cmp
add
xor
leave
xor
js
rcr
mov
jnp
sbb
adc
xor
xchg
xor
scas
ret
fst
xlat
repz
jbe
jns
mov
pusha
cmp
mov
jb
shr
mov
pop
jmp
push
and
jmp
push
add
cwde
mov
sub
retf
cmp
pop
xchg
adc
inc
cmp
fwait
pop
add
out
leave
mov
std
xor
pop
and
ins
xchg
dec
scas
mov
in
mov
inc
cs
xchg
cmps
push
mov
jmp
xor
and
mov
sub
add
rcr
and
mov
lods
or
xchg
jb
mov
jle
mov
je
lock
cdq
push
cmp
cmp
popa
cwde
mov
jnp
cwde
es
push
dec
push
movs
push
call
mov
cld
xchg
jbe
dec
sub
mov
xor
sub
cmps
and
stos
sbb
sbb
out
mov
cmps
mov
sub
arpl
clc
shl
in
cmp
shl
imul
cwde
out
sub
cmp
sbb
(bad)
pop
and
adc
mov
cmp
cwde
mov
jae
popf
lahf
xchg
jl
push
aas
xchg
nop
xchg
jns
add
js
mov
lock
movs
mov
mov
cwde
lods
and
inc
push
ror
xchg
repnz
cli
enter
sti
scas
dec
and
push
xchg
int3
sub
or
jge
dec
gs
ret
js
ds
repz
stos
fadd
xchg
push
test
icebp
xlat
fnsave
enter
cmp
mov
fisub
mov
stos
jb
xchg
adc
cwde
cmps
movs
mov
adc
inc
div
call
retf
(bad)
push
cwde
jns
imul
sbb
sub
enter
sbb
mov
fcomp
pusha
mov
push
xchg
adc
cmp
inc
xchg
push
mov
jb
in
cwde
mov
and
scas
shl
lahf
and
and
add
pop
ds
outs
add
call
mov
or
test
lahf
jle
aam
in
mov
loopne
inc
add
mov
add
mov
stos
mov
jae
cwde
imul
jno
outs
test
mov
ret
add
mov
xor
cdq
icebp
shl
fwait
retf
push
xchg
imul
scas
dec
(bad)
ret
scas
(bad)
push
stos
pop
sbb
xor
jg
xor
xchg
or
(bad)
fcomi
sbb
stc
sub
jmp
push
xor
call
outs
pop
push
or
push
mov
ficom
jge
scas
pop
loop
cwde
mov
test
in
imul
aaa
mov
mov
pop
and
mov
mov
(bad)
dec
adc
mov
xchg
mov
jb
mov
mov
in
jge
repnz
loope
mov
push
cmp
xchg
cdq
arpl
cwde
jl
gs
adc
repz
ja
cwde
sub
cwde
mov
push
xor
std
int
add
out
and
inc
cwde
out
stc
jmp
xor
xor
xor
jae
loopne
div
and
cwde
xlat
aam
mov
popf
stos
shl
pushf
mov
scas
aaa
and
(bad)
loope
cwde
fidivr
or
cwde
mov
aam
jns
stos
test
pop
adc
and
push
and
cwde
ret
inc
stos
sub
dec
cwde
mov
add
mov
jne
mov
or
aam
add
stos
pop
ficom
retf
outs
inc
jge
fdivr
enter
mov
shr
cmp
or
ror
scas
and
das
sub
loop
xchg
sbb
ret
lock
fisub
js
adc
fcomp
push
pop
lods
dec
loopne
jecxz
xchg
xor
cmp
call
popf
push
arpl
jns
outs
mov
mov
les
sbb
dec
pop
push
xchg
add
daa
xor
pop
cwde
ret
push
stos
popa
and
xchg
jg
(bad)
cmc
or
mov
sbb
popa
cwde
add
sbb
pop
adc
push
pop
sub
dec
push
cwde
jge
mov
or
inc
inc
push
(bad)
cwde
xor
loope
ret
xchg
int
cwde
lahf
jb
dec
add
sbb
xchg
rol
jecxz
push
add
(bad)
xchg
stc
cli
call
xchg
cmp
adc
push
(bad)
jp
dec
xchg
arpl
(bad)
call
cwde
out
(bad)
push
mov
movs
mov
arpl
cdq
push
sub
jl
data16
bound
xor
jmp
cwde
cdq
repz
inc
inc
push
cmp
jmp
into
xlat
iret
sub
rcl
mov
and
and
int3
xor
daa
push
xor
cwde
clc
les
cwde
hlt
push
xchg
dec
push
dec
ror
sub
cwde
dec
sti
push
pop
repz
aam
jg
mov
mov
xor
xchg
xchg
or
push
mov
xchg
push
xor
dec
jmp
mov
cwde
je
jg
pusha
lods
mov
xchg
xor
out
and
dec
lds
cs
cwde
ds
mov
int
call
adc
loop
xor
add
dec
enter
shl
pop
mov
pop
push
gs
pop
jl
outs
xlat
outs
push
mov
inc
fs
mov
into
cmps
jmp
loope
xchg
outs
ja
jne
pop
dec
jge
mov
jb
fsub
pop
lock
(bad)
mov
push
add
cmp
jae
xchg
cwde
fs
fdivp
jl
arpl
fist
retf
fimul
cwde
movd
or
xor
add
scas
mov
fnstcw
in
sub
outs
(bad)
retf
ins
mov
popf
retf
loop
loop
jo
test
push
cwde
jl
push
test
lock
fdiv
inc
mov
jecxz
mov
in
mov
loope
lock
(bad)
clc
xchg
add
test
sub
sub
ret
xchg
dec
loop
imul
jl
sub
push
in
movs
add
iret
xchg
rcl
mov
adc
cwde
xchg
cli
sbb
test
dec
or
xor
bound
sub
adc
mov
push
or
ret
test
pop
cmp
test
mov
test
jle
jge
mov
in
neg
sbb
test
fst
sahf
dec
adc
fcomp
mov
popfw
xchg
fcom
dec
fdivp
and
or
mov
push
test
ficomp
mov
inc
inc
xlat
push
mov
xchg
repz
xchg
fsub
call
lock
xor
push
push
out
inc
leave
push
cwde
sub
scas
xchg
in
ficom
inc
push
idiv
sub
cwde
rol
mov
frstor
mov
pop
js
inc
not
pop
cwde
(bad)
mov
mov
mov
enter
xchg
shl
add
retf
cwde
fwait
rol
cwde
mov
jl
aas
cwde
add
gs
cwde
xchg
je
ret
outs
jo
push
cwde
push
stos
pushf
movs
add
pop
cwde
icebp
mov
jns
stos
test
xchg
pop
cmp
mov
cmps
sub
scas
jecxz
xchg
xor
mov
mov
mov
loope
scas
js
cwde
rol
lds
fsubr
xor
enter
dec
or
push
popf
rcr
daa
data16
js
movs
nop
mov
lods
out
or
test
sti
add
stc
adc
ja
std
(bad)
shl
test
dec
scas
sbb
add
pop
imul
jbe
(bad)
add
xor
mov
(bad)
pop
loop
sbb
cmp
mov
aaa
imul
mov
sub
imul
dec
out
mov
and
cs
fs
cwde
xchg
push
push
xchg
std
adc
sbb
lods
mov
jae
pop
ss
movs
jg
pop
scas
imul
les
dec
(bad)
mov
mov
sbb
dec
loopne
pusha
pop
fcomp
in
push
and
out
pusha
mov
xchg
xchg
call
loopne
mov
xchg
mov
jo
mov
add
and
mov
clc
or
retf
cmp
aam
adc
cmp
fs
cmp
sbb
pushf
push
mov
retf
fstp
mov
pop
cwde
aaa
add
outs
push
mov
xchg
fwait
push
and
jle
cmp
cwde
retf
enter
inc
setg
sub
sub
pop
test
mov
sbb
in
in
or
jnp
popa
cmp
daa
sub
dec
adc
push
cs
ja
pushf
outs
xor
pop
cwde
ss
xor
mov
cdq
xchg
into
scas
pop
mov
jne
sub
pop
add
mov
bound
clc
or
int
sbb
or
push
sub
stos
in
out
xor
cwde
aad
fdivr
cwde
std
lock
rcr
cmps
shl
lahf
add
mov
loop
ret
pop
dec
add
in
rol
jae
xchg
xchg
(bad)
dec
jg
idiv
or
scas
push
cmp
xchg
cld
and
sub
cwde
retf
jecxz
in
sahf
mov
mov
mov
cwde
jne
pop
or
add
call
sbb
dec
sbb
sub
in
jecxz
cmps
fisub
lods
xchg
or
loop
sub
inc
dec
jge
dec
adc
sbb
xor
or
seto
ror
out
int
cld
and
push
imul
popf
icebp
jo
cmc
add
cdq
addr16
mov
outs
scas
fbstp
sbb
mov
sar
rcr
and
(bad)
into
js
mov
jnp
movs
mov
cwde
push
adc
or
adc
add
into
loopne
xor
mov
int3
aam
aad
mov
dec
push
scas
adc
int3
xor
jecxz
in
mov
jns
cwde
adc
int3
jl
jge
cwde
popf
pushf
mov
mov
mov
repz
je
jmp
clc
pop
aas
adc
pop
nop
push
xor
cmp
mov
imul
sub
nop
pusha
out
movs
cwde
lods
push
or
lock
jl
pop
push
pop
stos
or
mov
daa
lahf
sbb
cmp
cmps
mov
jne
test
adc
adc
add
aaa
xchg
dec
push
scas
aam
sub
mov
das
xor
inc
daa
xchg
int3
ror
outs
pop
cmp
in
bound
fucomip
pop
cli
inc
jmp
jge
push
mov
loope
or
xchg
sti
retf
dec
pop
and
dec
sub
stos
or
xor
jnp
sbb
das
or
cmps
mov
and
sti
push
pushf
jmp
mov
scas
(bad)
in
cwde
shl
jb
mov
add
bound
js
xor
dec
in
rcr
iret
adc
das
inc
mov
xor
jae
push
mov
adc
retf
xlat
sub
xor
scas
fdiv
aas
push
jns
push
cwde
pop
jo
fld
add
push
sub
gs
push
adc
fimul
adc
sbb
xchg
je
push
sub
xchg
mov
xor
jecxz
xor
ins
scas
and
(bad)
(bad)
cmp
cwde
loope
add
cmp
and
cdq
cwde
jmp
mov
imul
mov
imul
sub
jne
mov
jmp
and
xchg
dec
sub
jo
sbb
sub
xchg
push
push
inc
pop
xchg
push
or
mov
mov
aam
mov
loop
xchg
cwde
fistp
cwde
push
and
aas
aam
jo
add
sti
repnz
sbb
and
stc
popf
cmc
add
repz
or
jecxz
sub
inc
xchg
mov
enter
and
shl
adc
sbb
lods
in
mov
outs
and
adc
arpl
pop
xchg
mov
pusha
daa
inc
imul
outs
ins
dec
mov
(bad)
into
fmulp
rcr
sahf
mov
mov
xor
push
push
cwde
and
addr16
hlt
push
mov
mov
je
jle
inc
dec
pop
add
xchg
(bad)
stos
mov
jnp
adc
cmp
mov
std
xchg
call
push
xlat
fidivr
out
popf
repz
jmp
pop
enter
cmp
adc
sbb
sbb
push
(bad)
cmp
and
and
std
ins
fcom
out
das
xor
imul
or
ss
inc
popf
call
inc
xchg
dec
cwde
xor
loope
outs
xchg
jmp
out
sub
xchg
mov
es
in
shl
shr
pop
stc
je
mov
call
push
scas
popf
and
xchg
pusha
xchg
es
jmp
ins
adc
xchg
xchg
xchg
add
int3
jno
enter
adc
in
sti
ja
push
adc
loope
jp
mov
or
xor
shl
enter
inc
or
gs
fwait
movs
add
cwde
repz
shl
add
adc
cwde
mov
movs
push
ficomp
jo
scas
mov
movs
jns
lahf
hlt
cmp
xchg
jecxz
jmp
mov
(bad)
mov
sbb
ror
mov
sahf
mov
cwde
add
xchg
fldcw
clc
addr16
lods
in
cwde
xchg
iret
retf
xchg
add
lahf
push
inc
mov
xchg
ss
adc
dec
es
jae
mov
test
neg
ja
cmp
sbb
add
jmp
fsub
adc
and
cwde
shl
pop
cmc
out
mov
push
sub
rol
xchg
clc
enter
cmp
por
frstor
jl
sbb
shl
loop
push
sbb
jge
sbb
sub
mov
out
jno
ja
push
sbb
stos
fidiv
outs
out
jge
adc
bound
neg
test
hlt
movs
dec
mov
xchg
pop
push
leave
dec
out
mov
xor
movs
cwde
jno
fimul
mov
enter
test
jle
mov
pop
ret
sub
pop
mov
add
jg
mov
fiadd
(bad)
or
mov
and
jne
rcl
leave
rcr
mov
jmp
or
imul
sub
cmp
cmp
adc
addr16
xor
and
mov
xchg
jne
dec
leave
scas
lods
repz
sbb
xchg
mov
pusha
adc
add
lahf
pop
xor
push
addr16
mov
(bad)
dec
sbb
inc
push
sbb
in
mov
aas
pop
pop
inc
add
push
mov
cwde
push
nop
sbb
retf
outs
fstp
jl
clc
add
cmp
fistp
hlt
retf
sub
dec
cmp
out
js
add
dec
pop
aam
push
pop
enter
shl
aam
push
jnp
popa
mov
pop
ins
push
xchg
cwde
jne
jne
ja
stc
ret
xor
push
daa
mov
scas
adc
cwde
ins
loope
dec
cmps
mov
loopne
jb
shl
fnstcw
neg
or
pop
dec
lahf
scas
pcmpgtw
cwde
lods
or
add
xchg
fsubp
test
adc
and
push
(bad)
cwde
call
xchg
mov
cwde
pop
sub
push
addr16
test
mov
test
lea
jecxz
cwde
dec
jmp
fs
into
add
lock
test
adc
stc
ds
cwde
xchg
mov
or
mov
pop
mov
cmp
stos
scas
cwde
je
push
or
dec
add
xchg
mov
sbb
(bad)
dec
cwde
cli
(bad)
ret
mov
inc
sub
pop
inc
push
shr
add
pop
popf
frstor
mov
mov
or
sub
pop
cmp
ret
sbb
call
dec
sar
inc
lods
hlt
mov
xchg
adc
repz
jae
jmp
lods
push
(bad)
stc
cmp
push
sbb
adc
inc
in
out
inc
pushf
mov
push
inc
sbb
push
loopne
sbb
mov
lock
sbb
cmp
cmp
dec
or
dec
test
(bad)
cwde
jmp
test
adc
sbb
cwde
std
mov
leave
cmps
outs
out
aad
sbb
jno
mov
popa
imul
iret
inc
fdivr
(bad)
ins
cwde
push
or
pop
popf
rol
mov
ret
push
dec
mov
dec
outs
jmp
lods
test
dec
fidiv
test
xchg
jecxz
out
jmp
cs
mov
arpl
cwde
inc
ror
jmp
js
sub
xchg
in
outs
jp
test
ret
lock
push
outs
lahf
imul
bound
cwde
xchg
cs
shr
popf
rcl
xor
adc
push
fsub
jmp
mov
leave
add
dec
call
jnp
aad
mov
call
jmp
cmp
sbb
mov
out
hlt
mov
inc
sbb
nop
fwait
jle
loop
cwde
add
add
call
bswap
in
dec
retf
push
and
pop
daa
dec
mov
pop
lahf
shl
xchg
sbb
repz
jecxz
in
dec
push
ds
fsub
xchg
pop
repz
sbb
call
test
xor
dec
lahf
push
jp
scas
loop
cwde
cmovle
(bad)
(bad)
loope
xchg
jg
cmp
icebp
mov
sti
neg
pop
xchg
or
mov
jbe
arpl
jmp
sti
js
inc
add
cwde
into
dec
stos
mov
xchg
les
stos
mov
cwde
mov
daa
mov
cwde
das
xor
push
aaa
push
(bad)
scas
popf
xchg
inc
loopne
in
cwde
xchg
loope
mov
cwde
xchg
ret
ins
push
dec
and
sub
cmps
add
cwde
clc
and
dec
pop
jl
popa
and
in
mov
jge
adc
shr
fst
repz
idiv
inc
pop
cmp
push
ret
mov
mov
shl
push
jle
jmpw
and
pop
(bad)
sti
pop
adc
sub
mov
iret
nop
push
pop
or
dec
cdq
mov
test
(bad)
repnz
dec
aas
jb
aad
jg
js
mov
ins
add
idiv
imul
pop
mov
mov
mov
mov
jge
imul
bnd
retf
rcl
fist
js
sbb
xchg
(bad)
mov
xor
xchg
add
aas
add
push
xchg
push
call
xor
or
arpl
cwde
fidiv
fsub
xchg
(bad)
push
push
and
mov
fwait
ins
test
cwde
std
addr16
lds
xchg
rcl
sbb
cwde
fdivr
int
mov
push
loop
sub
imul
and
jge
dec
sbb
cs
jo
call
or
push
lods
mov
inc
sub
mov
xchg
mov
xchg
neg
push
cwde
in
add
les
mov
or
mov
in
popf
pop
push
cmp
xchg
ret
mov
out
sub
scas
xchg
cli
in
xor
push
fcom
sub
jecxz
sub
mov
adc
cwde
mov
push
cwde
sub
lock
jmp
es
mov
xchg
and
mov
push
adc
in
inc
pop
sub
mov
mov
jl
test
jo
imul
hlt
rcl
xchg
dec
cmp
shl
pop
(bad)
sub
gs
nop
inc
push
popf
jp
cmp
cmps
cwde
sub
nop
xchg
cwde
fidivr
mov
mov
repnz
dec
adc
cmp
clc
les
and
rol
ins
in
mov
imul
jmp
bswap
lea
jmp
inc
popa
js
rol
adc
iret
cmp
mul
pusha
fist
test
or
aaa
dec
xchg
xor
lea
jnp
retf
push
mul
jmp
shl
push
mov
inc
push
jbe
loop
std
pop
loope
push
push
xchg
das
inc
pusha
and
adc
mov
jg
xor
mov
retf
imul
push
pop
leave
shr
fidiv
in
(bad)
adc
ja
mov
sar
loope
cmps
xor
mov
jns
nop
ja
push
cmp
sar
cdq
jmp
mov
cli
mov
mov
pop
out
xor
fdivr
daa
(bad)
cmp
pop
cmp
pop
fs
aad
jo
rcr
add
xchg
stc
mov
lds
pushf
int
jo
xchg
(bad)
adc
jl
das
xor
and
add
test
jb
(bad)
add
rol
stc
enter
js
xchg
adc
pop
sub
xor
call
nop
push
lods
sti
mov
inc
(bad)
mov
pop
xlat
pop
daa
test
not
xchg
add
sbb
mov
popf
xchg
push
mov
shl
sbb
movs
ja
mov
in
cwde
ins
and
mov
into
test
jmp
pop
std
pop
int
out
cwde
xor
movs
je
push
out
inc
cwde
in
fsub
jmp
push
pop
sti
or
sub
js
cwde
loope
inc
outs
jbe
mov
add
out
scas
aam
inc
movs
bound
pop
fidiv
jge
xor
(bad)
push
pop
je
arpl
loopne
jl
nop
cmp
cmp
adc
cmp
adc
jnp
pop
sar
xchg
std
and
sub
bound
cdq
xchg
push
sub
fisttp
jp
cld
cwde
sub
loope
aad
dec
pop
cwde
and
jae
inc
dec
push
aam
push
and
xchg
pop
stos
xchg
sbb
jecxz
mov
jbe
push
addr16
dec
mov
add
fsub
dec
push
inc
arpl
cli
pushf
jg
clc
and
mov
fs
shl
in
mov
jae
cmp
cmp
xchg
mov
push
es
cdq
test
sub
nop
push
sub
out
dec
jmp
xchg
leave
call
dec
clc
stos
mov
xchg
push
test
cmp
in
push
cwde
add
stc
and
push
es
mov
call
add
(bad)
sub
std
cwde
sar
sbb
xlat
cs
xor
fs
icebp
xor
jb
push
or
add
cmp
cwde
sbb
ins
imul
mov
sbb
in
xor
je
test
out
cwde
iret
rcl
mov
add
sub
and
xchg
jae
call
ins
cwde
lods
mov
aad
or
or
push
cwde
int
dec
scas
arpl
mov
add
push
dec
xchg
push
mov
stos
in
jne
js
outs
jae
cmp
out
mov
xor
cwde
push
jno
js
mov
and
pop
scas
dec
(bad)
jmp
push
push
cmp
jmp
ins
mov
mov
jnp
mov
in
push
dec
call
dec
mov
ss
hlt
fisub
xor
ins
mov
leave
jecxz
push
fsub
add
mov
pop
dec
neg
neg
cwde
push
in
push
hlt
jns
sahf
xchg
into
mov
sbb
pop
and
xchg
fs
fsubr
out
push
repnz
es
inc
push
outs
adc
xchg
outs
xchg
addr16
sbb
mov
and
mov
imul
cmp
cwde
imul
mov
sti
int
cwde
sbb
or
scas
and
xor
xchg
fiadd
(bad)
mov
mov
mov
adc
lds
fcmovnb
push
cld
fnstsw
in
pop
xor
(bad)
sub
pop
jmp
fs
xor
sbb
movs
mov
mov
aad
ret
sub
mov
mov
add
cdq
xchg
js
jge
cli
scas
stos
push
mov
pushf
hlt
retf
loopne
cwde
ds
jnp
cmp
and
jne
dec
jp
mov
es
ror
test
aaa
adc
add
jg
mov
xchg
(bad)
retf
inc
jecxz
leave
fisttp
popa
cwde
dec
pop
mov
das
xor
bound
(bad)
(bad)
lock
out
enter
jne
push
mov
aas
add
lahf
sbb
xchg
sar
xchg
lods
test
ins
cwde
scas
xchg
movs
mov
test
inc
lea
fadd
xor
retf
lea
mov
sub
and
or
inc
pusha
jmp
nop
rol
xor
in
(bad)
mov
cli
lahf
cwde
lds
jne
inc
mov
and
ja
fiadd
les
clc
jge
repz
xor
push
pop
sti
mov
imul
mov
fs
dec
sub
mov
xor
xchg
jo
add
push
mov
cwde
scas
mov
mov
jbe
sbb
or
xchg
je
ret
shl
push
jecxz
xor
call
iret
scas
cwde
jb
in
retf
rcr
mov
iret
xor
fiadd
stos
lahf
mov
dec
push
cwde
sbb
xor
cwde
inc
inc
mov
popf
call
loope
enter
sbb
mov
push
xor
cwde
fdivrp
int
aas
add
js
inc
test
mov
add
mov
pop
mov
push
fs
inc
push
out
call
inc
cmp
jns
cmp
and
scas
ja
out
adc
call
mov
add
xor
adc
jg
xchg
(bad)
mov
div
mov
inc
jge
int
pop
ins
cmp
and
and
add
xor
mov
mov
das
mov
jecxz
pop
cmp
inc
test
in
pop
cwde
das
or
movs
mov
stc
mov
jnp
stos
mov
mov
je
cwde
rcl
sub
push
add
push
jb
lods
xchg
lods
cwde
jbe
aaa
xor
push
(bad)
(bad)
jb
push
xor
cmp
std
cs
mov
test
rcl
fistp
sbb
cmp
movlps
push
push
push
(bad)
sbb
cmp
cwde
push
cmp
fsub
int3
lods
cwde
xchg
jge
addr16
sub
pop
or
cwde
cli
mov
xor
mov
cwde
sub
mov
mov
retf
mov
fmul
inc
(bad)
mov
push
movs
leave
test
sub
loop
sub
push
xor
and
xchg
jmp
jbe
retf
sbb
add
xchg
jnp
mov
mov
dec
pop
cld
fs
shl
jmp
retf
fisttp
lods
neg
cwde
add
xor
ret
rcl
(bad)
in
xchg
shr
inc
ins
xchg
lahf
pop
out
shl
jns
dec
into
fsubr
sub
cld
xchg
stc
bound
push
daa
loope
loopne
jae
test
mov
add
push
or
jb
scas
or
scas
pop
xor
in
and
rcr
sbb
neg
loop
retf
add
cwde
sbb
inc
jo
test
adc
scas
in
or
mov
pop
xor
xchg
(bad)
cdq
and
mov
fsub
jle
dec
clc
push
adc
adc
jmp
xchg
call
fdivr
div
imul
jbe
cwde
inc
lock
pop
add
adc
sub
and
sub
lahf
test
popa
cdq
sbb
leave
movs
pop
out
dec
dec
outs
out
lahf
cwde
loop
cmp
xchg
or
dec
sbb
sub
call
inc
fcom
scas
mov
lahf
xchg
xchg
fs
sbb
scas
je
dec
imul
jmp
add
popa
mov
outs
nop
xchg
mov
mov
int3
(bad)
retf
xchg
cwde
mov
das
cwde
mov
pop
xchg
mov
cmp
cdq
sahf
push
dec
psllw
xchg
jae
xor
ficomp
jl
xchg
pop
sub
inc
dec
jmp
or
mov
jb
stc
retf
xchg
(bad)
ficom
(bad)
adc
xor
push
sub
push
jbe
jo
out
fist
cmp
mov
jl
mov
(bad)
inc
aam
pop
jecxz
mov
mov
cmp
outs
sbb
mov
lds
lahf
pop
retf
out
retf
test
xchg
in
(bad)
xor
inc
pop
add
cwde
stc
pop
jmp
mov
cwde
and
inc
sub
cdq
aam
popf
ins
ret
adc
push
pop
push
fwait
push
cmp
cwde
leave
(bad)
sahf
and
xor
test
popa
pusha
neg
xchg
dec
mov
daa
fwait
jge
(bad)
sub
pushf
aaa
into
xor
jns
fmul
inc
dec
xchg
mov
cmps
dec
daa
jmp
ins
sbb
out
mov
retf
push
and
fild
sbb
movs
xor
adc
xchg
push
mov
xor
rcl
aaa
scas
pop
sub
xchg
push
xchg
outs
sahf
jl
xchg
ja
xchg
pop
mov
add
or
call
push
mov
jo
jno
cwde
jbe
jg
fyl2xp1
cmp
jmp
cwde
cmps
pop
jo
cmp
dec
(bad)
jb
cwde
mov
ja
sub
xchg
data16
pop
xlat
push
jns
(bad)
push
cmp
cwde
(bad)
out
inc
ror
icebp
dec
movs
cwde
(bad)
(bad)
(bad)
lahf
jo
xchg
data16
mov
pop
les
inc
add
cwde
or
pop
push
dec
cwde
movups
inc
jp
pop
lock
movs
mov
push
mov
xor
loope
dec
xchg
arpl
xchg
xor
jecxz
aas
jb
inc
pop
xchg
sbb
push
inc
lea
xchg
jle
mov
lahf
stos
std
les
add
leave
aad
xchg
rol
mov
fwait
js
loopne
cwde
cmp
ins
xchg
stos
push
popa
jno
imul
pushf
ins
les
fisttp
or
(bad)
jmp
cs
out
xor
in
cmps
xchg
mov
pop
sbb
mov
pop
mov
jmp
adc
mov
adc
jae
leave
bound
sbb
ss
cmps
cmps
mov
or
call
test
inc
pop
cmp
out
cwde
stos
add
adc
(bad)
pop
test
dec
js
fwait
popf
mov
aaa
adc
xor
and
sbb
sbb
xchg
out
push
fldenv
popa
cwde
mov
or
icebp
fstp
sub
jl
sub
mov
cmps
movs
mov
push
and
sti
imul
ins
dec
lahf
shr
inc
dec
mov
add
push
mov
outs
cs
sahf
mov
mov
cwde
mov
retf
sbb
mov
ins
fdiv
fidivr
pop
push
outs
add
lock
jge
pop
in
xchg
dec
sbb
clc
dec
pop
and
cwde
fsubr
xor
cmp
add
test
cmp
call
push
loopne
push
mov
push
sub
mov
into
jo
sbb
stos
xchg
mov
adc
mov
cwde
jns
cli
loop
cmps
das
inc
sahf
sar
mov
aaa
xchg
adc
mov
out
xchg
dec
loopne
mov
push
cmp
sbb
push
mov
test
ret
pop
inc
stc
gs
push
loop
add
scas
mov
call
inc
pop
adc
pop
cwde
mov
ror
xlat
leave
stc
jnp
xchg
mov
sub
mov
dec
cwde
out
sbb
xchg
cmp
or
lock
test
dec
sbb
jmp
and
fs
pop
ret
mov
bound
add
jo
mov
sub
fistp
int3
pop
xchg
dec
cwde
pop
dec
fimul
cwde
rol
popf
dec
push
sbb
or
jge
shl
xlat
cmp
jge
mov
lahf
and
loope
dec
into
push
test
jno
pop
test
stos
cmp
cmp
into
ds
iret
pop
mov
shl
fdiv
xchg
ins
sbb
mov
popf
scas
daa
xor
ret
mov
cdq
add
add
jp
ins
imul
daa
outs
(bad)
icebp
std
(bad)
xchg
cmp
js
ins
imul
int
(bad)
xlat
mov
xor
(bad)
or
outs
cwde
in
leave
cs
sub
cwde
inc
adc
stos
jns
sub
mov
dec
sbb
adc
gs
or
jb
popf
cdq
outs
dec
(bad)
xchg
scas
and
xchg
cwde
aaa
adc
sbb
cli
int
push
xchg
sub
adc
aaa
or
sub
cwde
ret
jbe
in
jecxz
xchg
sub
in
cwde
or
je
test
xchg
loopne
popf
sub
lds
in
loop
(bad)
mov
enter
xchg
pop
jae
cmp
xchg
ja
dec
jmp
fbstp
scas
dec
cs
add
outs
fwait
mov
jp
sub
fs
cwde
or
lds
cwde
das
movs
shl
jle
jb
add
imul
sub
aad
xchg
push
mov
and
xchg
pop
sub
mov
leave
sbb
pop
push
xor
jmp
shl
cwde
add
call
sti
jnp
xor
pop
fmul
sbb
test
scas
jl
test
add
sbb
sub
mov
sub
imul
xchg
bound
out
hlt
(bad)
out
sahf
fild
or
push
sbb
push
iret
jmp
lahf
jnp
pop
pop
rcl
push
push
jg
hlt
xchg
mov
lahf
mov
push
push
shl
fnstsw
xchg
or
les
in
test
dec
or
inc
xor
push
cli
ret
sbb
and
das
into
push
js
jb
pop
jle
pop
xchg
popa
lods
mov
(bad)
je
(bad)
stos
data16
push
jns
daa
out
rcr
push
and
add
push
dec
lods
push
pop
sub
in
cmc
(bad)
js
push
repnz
lea
xor
dec
cli
retf
or
fld
ret
call
aad
cmp
pop
and
imul
xor
dec
cmp
xchg
jmp
sbb
add
xor
addr16
push
repz
cmp
dec
call
jl
push
(bad)
div
je
addr16
inc
ja
push
mov
ja
pop
xchg
movs
repnz
int3
call
adc
or
retf
mov
pop
jmp
in
leave
jge
xchg
pop
pop
(bad)
in
xchg
mov
sub
sub
int
jle
repz
pop
push
inc
sub
es
push
es
loopne
(bad)
sub
sub
sbb
mov
lds
stos
shl
adc
cmp
push
dec
or
jae
sub
jecxz
popa
dec
pop
sub
shr
adc
test
mov
imul
and
pop
lods
addr16
cmp
xchg
add
fwait
cmp
and
ror
sub
jg
mov
leave
cwde
xor
jle
mov
clc
movs
sar
mov
imul
xor
scas
jne
mov
and
fnsave
jmp
in
xchg
push
cs
push
inc
cmp
and
dec
mov
popa
mov
dec
jmp
xlat
adc
xor
fidivr
xor
(bad)
cmps
mov
loope
sahf
push
inc
push
stc
or
call
std
(bad)
in
cwde
or
fisubr
add
pop
mov
data16
jmp
mov
xor
push
xor
sahf
mov
mov
push
jp
adc
jnp
xchg
vpsubusw
js
push
mov
iret
out
test
sbb
dec
xchg
adc
test
int
xor
push
in
(bad)
jmp
sbb
clc
push
stos
pop
out
pop
adc
in
cwde
sbb
xchg
lahf
retf
lods
leave
test
cmp
cwde
cmc
sti
fld
mov
mov
xchg
sub
push
lods
aam
js
daa
ds
sub
adc
mov
pushf
jle
jbe
cwde
mov
and
cwde
fldenv
xor
mov
or
js
ins
sbb
neg
xchg
int3
jge
stos
ret
js
or
sbb
ds
cmps
pop
gs
jge
sti
jb
das
scas
mov
mov
or
xchg
cwde
jno
pop
mov
fs
int3
xchg
cwde
inc
push
dec
imul
add
dec
cmp
jle
sbb
dec
cmp
in
call
mov
fidiv
xchg
mov
pusha
mov
cwde
lods
ret
fidivr
push
je
xchg
push
fimul
adc
push
xor
dec
retf
mov
xchg
ins
jle
xor
call
pop
xor
adc
mov
fadd
mov
jmp
mov
shr
std
push
out
push
cmovns
mov
into
xchg
sub
push
jl
inc
cwde
adc
std
push
popf
mov
fdivp
cwde
sbb
lock
repnz
cdq
nop
mov
fdiv
int
ds
stos
and
pop
push
aaa
mov
mov
push
xchg
mov
mov
cmp
sub
or
icebp
cdq
push
sbb
jg
push
inc
mov
push
mov
sbb
out
jno
add
push
dec
fisub
dec
mov
rcr
jno
ret
xchg
stos
js
xor
mov
push
call
or
lahf
loop
dec
cmp
cwde
std
mov
fcmovne
aam
clc
mov
cwde
sbb
add
arpl
call
mov
mov
mov
imul
dec
iret
xlat
push
out
mov
mov
sbb
and
pop
xchg
ret
dec
imul
dec
xor
sub
or
fsub
fld
movs
ja
mov
or
cwde
jp
stos
lods
or
pop
out
(bad)
push
int3
pop
jmp
jbe
sbb
cwde
push
dec
xlat
mov
dec
push
imul
or
mov
cwde
popa
mov
xchg
add
sub
mov
cmp
outs
mov
cwde
aam
fmul
lahf
pop
cdq
dec
pushf
cwde
test
lds
rcr
outs
xchg
xchg
scas
mov
test
dec
cwde
xor
xchg
xor
pop
mov
test
test
adc
cmp
jne
je
adc
mov
mov
or
mov
fdivr
call
add
sub
jne
xchg
adc
xor
cs
popf
imul
int
dec
jne
outs
pop
mov
pop
pusha
dec
(bad)
test
add
test
cmp
leave
adc
cmp
and
ret
or
push
inc
sub
imul
lahf
push
push
sub
cwde
mov
jle
xchg
sub
inc
fdivr
and
retf
cdq
push
pop
mov
clc
mov
cdq
fwait
jno
(bad)
mov
call
lock
pop
add
cdq
xchg
dec
out
cmp
pop
pusha
dec
lods
neg
aad
out
cwde
icebp
stos
xor
jne
sets
dec
push
pop
and
mov
inc
xchg
cwde
jne
cli
fcos
fild
mov
cdq
push
add
fstp
int
and
out
lea
pop
out
fstp
mov
lock
(bad)
adc
(bad)
test
push
sub
popa
cwde
sbb
int
stos
fldcw
rcr
adc
jbe
xchg
or
aam
inc
jne
push
ret
inc
cwde
xchg
or
out
pop
jge
add
std
push
outs
arpl
pop
movs
mov
cwde
jmp
shl
mov
or
aaa
push
aad
adc
lock
cwde
cs
sbb
cwde
mov
xor
aad
mov
ror
dec
shl
cmps
js
adc
and
addr16
xchg
lods
in
cmc
xor
in
add
retf
loopne
mov
dec
and
test
push
cwde
fst
outs
and
cwde
push
cmp
mov
test
push
or
test
cwde
test
out
add
mov
push
sbb
outs
ds
adc
and
scas
dec
cld
push
(bad)
jns
dec
lahf
pusha
cs
xchg
and
jmp
in
(bad)
inc
push
call
cwde
inc
in
fbld
mov
stos
popf
mov
mov
sbb
nop
test
into
in
xchg
(bad)
aad
jmp
pop
and
mov
add
adc
jmp
in
mov
mov
stos
out
sub
push
dec
xchg
cmp
data16
in
cmp
mov
cmp
cwde
fs
xchg
cdq
data16
sbb
enter
add
test
mov
(bad)
and
sar
aad
rcl
inc
pushf
cwde
add
mov
mov
cs
add
xchg
mov
sbb
pop
mov
cli
mov
fmul
lahf
push
inc
sbb
xchg
jp
or
ror
mov
add
push
inc
push
daa
xchg
std
js
and
add
cld
push
stos
retf
lods
lahf
sbb
hlt
sbb
imul
leave
mov
or
data16
push
jecxz
xor
jl
sbb
int
adc
push
out
fs
(bad)
cld
jb
aam
rcl
mov
mov
stos
adc
(bad)
adc
and
mov
mov
bound
xor
pop
fadd
push
js
xchg
mov
shr
clc
int3
mov
call
js
into
scas
xchg
out
icebp
cmp
inc
sub
ror
jmp
jnp
sbb
icebp
cld
or
cwde
pushf
outs
fimul
dec
or
cwde
xor
ins
les
jge
cmp
ds
jo
ins
mov
popf
sbb
sub
inc
add
pusha
mov
jns
and
push
sti
sub
call
jl
mov
stos
pop
xchg
(bad)
xchg
nop
xchg
sub
stos
outs
jbe
jl
leave
sbb
add
neg
xchg
gs
sbb
cmp
or
jg
clc
push
out
cwde
or
repz
sbb
pop
inc
sub
sub
cs
iret
or
mov
sar
not
ss
jne
scas
mov
repnz
jg
lea
mov
cmp
enter
fcom
mov
clc
jmp
mov
mov
enter
mov
push
fsubr
add
stos
fsubr
mov
adc
pop
lahf
or
cmp
out
add
loop
xchg
test
cmp
popa
clc
js
(bad)
pushf
out
hlt
or
jge
fwait
mov
mov
push
adc
sbb
cmovnp
fild
test
lock
fadd
mov
out
mov
cwde
(bad)
arpl
push
and
loopne
sub
cdq
lahf
int
jns
jnp
mov
(bad)
xor
jmp
mov
mov
int3
fmul
xchg
aad
dec
sbb
push
cwde
les
mov
and
jae
sbb
cwde
hlt
mov
add
mov
cwde
arpl
test
ficomp
add
mov
and
cmp
xor
mov
mov
mov
push
sub
cwde
push
sbb
imul
and
addr16
dec
mov
sub
and
call
ins
xor
lahf
pop
pop
(bad)
jb
mov
pop
lahf
mov
dec
inc
arpl
cmps
cwde
clc
xchg
neg
bound
mov
add
sub
mov
(bad)
pop
sub
pop
cwde
sub
and
outs
push
dec
ror
dec
stos
mov
sub
push
mov
xor
pop
out
mov
xchg
iret
stos
cld
mov
sbb
movs
fadd
rol
xchg
or
xchg
addr16
loope
mov
mov
in
pop
pop
loop
cwde
inc
out
add
rsm
pop
scas
test
sbb
xor
xchg
cmp
inc
and
and
jnp
cwde
cli
dec
pop
movs
pop
lock
call
shr
cwde
sub
outs
je
out
into
scas
dec
test
lods
inc
stc
jno
xor
je
dec
call
retf
lock
mov
(bad)
mov
sahf
xchg
sbb
mov
sbb
imul
push
stos
cmc
inc
jge
xor
sbb
ss
cmp
loopne
jg
sbb
outs
dec
cmp
cmps
call
test
cs
cmp
cmp
push
mov
in
dec
and
ret
loop
cwde
jp
aam
(bad)
xchg
movs
mov
mov
imul
xor
pop
test
fisttp
cwde
or
sar
daa
or
cwde
jle
or
loop
repnz
xchg
jmp
das
sub
dec
loopne
(bad)
(bad)
fyl2x
cwde
loope
sbb
adc
push
cwde
mov
dec
cmp
mov
pop
and
sbb
cdq
leave
mov
xchg
push
mov
into
push
push
test
das
out
clc
cmp
add
cmp
xchg
aaa
js
inc
cmp
xlat
aas
mov
or
add
xchg
mov
loope
mov
xchg
inc
sbb
sub
rcr
scas
sub
inc
jnp
data16
dec
clc
sar
mov
sub
data16
mov
dec
jg
push
stos
mov
inc
into
jo
cwde
mov
nop
fistp
and
cwde
mov
mov
cmp
mov
dec
mov
jo
pop
pusha
js
cwde
sbb
scas
xchg
mov
repnz
or
inc
call
mov
repnz
ficomp
or
dec
lds
jp
cmps
jmp
js
jle
scas
pop
dec
rcr
sbb
xor
je
movs
mov
add
sub
imul
sbb
test
sub
cmc
rcr
xchg
jle
cwde
hlt
jp
xor
jecxz
add
xchg
ins
je
cld
in
shr
push
xchg
ret
pop
cmp
mov
fs
call
bound
sub
ins
add
icebp
cwde
inc
dec
cmps
sub
das
rcr
sbb
call
cmps
xlat
aaa
and
xor
pop
aam
cs
mov
jp
ins
mov
rcl
inc
cmp
or
mov
or
xchg
call
mov
imul
cmp
dec
jge
int
push
or
ins
les
lahf
ins
xchg
adc
adc
cwde
adc
xor
aad
or
cmps
mov
push
cmps
xlat
jb
sbb
sub
push
jmp
and
cwde
cmp
add
mov
and
fistp
sub
pop
js
push
xchg
lahf
cs
add
pop
js
pop
test
pusha
cs
mov
sbb
(bad)
mov
and
jbe
xchg
cwde
xlat
test
mov
dec
mov
mov
pop
dec
jbe
xchg
add
cmp
inc
push
sbb
sub
push
and
fdiv
mov
xchg
sub
ins
dec
je
test
or
pop
cmp
push
(bad)
pop
cmp
gs
mov
inc
xor
or
dec
inc
cmp
mul
in
cmp
sbb
sbb
push
loope
cmp
cmp
jae
push
popf
dec
sub
and
push
ins
push
cwde
sub
retf
sbb
ret
xor
jge
push
xor
sbb
pop
dec
into
(bad)
out
sub
cwde
sbb
cmp
or
jno
loop
sbb
jbe
lods
popf
add
ja
jmp
mul
(bad)
mov
cmp
adc
or
jo
cwde
lods
adc
sahf
outs
mov
ret
sbb
into
pop
cmp
rcl
cwde
dec
stos
mov
fdivp
mov
or
clc
into
scas
out
mov
dec
mov
mov
movs
jl
or
and
and
mov
fsub
xchg
fldcw
dec
pop
xchg
into
pop
mov
mov
icebp
and
sbb
fadd
add
jg
enter
leavew
jne
xor
xchg
sbb
pop
or
shl
cld
or
add
out
mov
mov
and
lods
jg
push
xchg
(bad)
ss
mov
mov
mov
ins
inc
and
in
fsubr
int
jg
push
cwde
fxch
stos
int3
or
push
into
jmp
xlat
cwde
xor
sub
push
ja
je
jl
xchg
mov
es
xor
test
fadd
sbb
mov
ror
xchg
popa
lock
cwde
(bad)
push
jge
xor
adc
or
and
out
clc
mov
xchg
lods
xor
jl
ret
lods
push
xchg
cwde
cmps
sar
inc
mov
mov
lods
jmp
(bad)
fisubr
jnp
mov
mov
and
cwde
or
adc
popf
scas
stos
mov
bound
mov
dec
movs
das
inc
in
push
mov
(bad)
std
dec
xor
mov
sbb
scas
out
clc
or
inc
or
lea
mov
call
or
sub
movs
xchg
bound
pop
jmp
cdq
dec
sub
retf
mov
repnz
sub
push
mov
loop
sbb
and
mov
mov
inc
pushf
arpl
aam
cld
xchg
cld
ret
shl
xchg
add
sbb
jmp
adc
into
inc
rcl
sub
bound
or
shr
push
addr16
adc
das
sbb
cmp
xchg
and
push
je
xchg
xor
mov
xchg
frstor
aam
xchg
pop
bound
xchg
jne
popf
mov
out
pop
(bad)
xchg
or
sbb
lods
ret
(bad)
in
(bad)
cmp
lahf
das
ss
sub
or
or
mov
ins
(bad)
repz
or
jmp
jmp
jp
dec
xlat
mov
push
bound
pop
cwde
rol
mov
mov
(bad)
xchg
aas
inc
add
inc
jnp
xchg
mov
arpl
add
mov
xchg
xchg
outs
cdq
adc
inc
push
fmul
pop
jnp
cdq
fwait
jns
mov
ret
cmp
or
dec
or
pop
jp
imul
xchg
xchg
dec
pop
add
pusha
lahf
lea
push
cmp
js
dec
in
mov
push
pop
push
mov
mov
ret
sub
mov
cwde
std
mov
push
mov
push
jmp
loope
hlt
test
xor
pop
popf
aad
loopne
aas
cmps
cwde
cmp
add
cwde
scas
ret
pop
xchg
add
mov
cwde
mov
out
int
rol
mov
inc
stc
cmp
cdq
mov
fcomp
xchg
fisub
pop
mov
out
neg
mov
icebp
into
cwde
out
mov
pop
ficomp
popf
xor
pop
mov
popa
fwait
add
mov
xlat
cmps
(bad)
jbe
ds
pop
add
call
cmp
lahf
lahf
mov
stos
fisubr
cmp
adc
pop
popa
xchg
jo
cdq
sbb
repnz
mov
jge
loopne
shl
in
cwde
(bad)
rcr
xor
xchg
fs
movs
xchg
js
scas
dec
je
xor
repz
mov
(bad)
mov
in
cmp
pop
mov
sbb
cs
js
mov
jne
inc
aam
push
fisubr
clc
test
in
mov
ds
mov
mov
sbb
jne
leave
mov
stos
cdq
test
dec
into
jmp
shr
fdiv
or
fldln2
mov
sub
sub
jb
sbb
cwde
aas
add
push
dec
cs
outs
hlt
jmp
mov
xchg
fisub
in
xchg
or
jp
aad
push
stos
and
sbb
xor
test
sub
cmp
mov
stos
(bad)
push
cmps
ror
adc
add
loope
cwde
frstor
xchg
pop
ja
test
pusha
enter
mov
test
push
xchg
jo
fisubr
ds
ret
push
jbe
mov
rcr
loop
jmp
jmp
rcr
dec
sbb
gs
loop
(bad)
push
nop
cwde
jg
dec
cmp
cwde
mov
pusha
cmc
or
cmp
leave
stos
or
cwde
mov
imul
jb
fbld
pop
das
int3
push
xchg
aaa
adc
cwde
mul
pop
xor
mov
aam
pop
cdq
aam
dec
loope
sbb
fsubr
imul
mov
xchg
push
sub
test
(bad)
jge
stos
adc
call
xchg
das
adc
fstp
mov
call
inc
cmp
pop
sub
xchg
jmp
cmp
scas
sahf
call
cli
adc
inc
add
test
cmp
or
out
loopne
cmp
cmp
fistp
les
mov
inc
sbb
ja
pop
ins
xor
(bad)
ins
imul
mov
fldenv
mov
inc
cwde
out
arpl
mov
call
mov
(bad)
mov
cwde
xor
dec
sub
or
jmp
test
push
ins
sahf
xchg
stos
movs
lods
push
jle
push
push
adc
sbb
addr16
mov
xchg
fcmovnb
ret
popf
xchg
pop
lock
xor
adc
lods
call
xchg
shl
fist
sub
pop
fld
inc
fwait
jo
mov
cwde
fidiv
int3
mov
xlat
cmp
jmp
repz
dec
push
(bad)
jns
fcmovb
cmp
xor
nop
push
stos
adc
in
dec
cwde
out
mov
xchg
mov
and
lahf
ja
mov
(bad)
repnz
xchg
jmp
jge
push
movs
mov
and
std
xor
sbb
stc
add
pop
jne
in
pop
ins
or
scas
call
clc
dec
stos
xchg
or
fcomp
jl
rcr
push
pop
cmp
mov
adc
push
cmc
(bad)
adc
gs
jnp
repz
aad
push
or
jecxz
ja
out
mov
dec
clc
cwde
nop
mov
test
pop
lock
dec
push
outs
jno
jge
imul
aad
loopne
jne
cwde
dec
dec
pusha
rcl
xlat
leave
xchg
je
push
xchg
arpl
jo
mov
inc
test
ss
sahf
jnp
sbb
sar
nop
hlt
ins
sub
(bad)
cwde
fdiv
push
xor
inc
jns
and
dec
mov
popf
mov
mov
(bad)
out
pop
in
pop
stc
adc
xchg
fsub
sti
mov
fcom
adc
cmp
outs
push
and
pop
in
inc
jae
add
push
cwde
adc
inc
sbb
sub
cmps
retf
fnsave
or
mov
clc
cwde
cmps
mov
cmc
iret
sbb
imul
xchg
push
clc
adc
xor
or
add
and
sbb
mov
ins
fcomp
cdq
mov
fwait
mov
test
lods
fsub
add
stos
mov
pushf
gs
mov
cwde
ror
out
retf
xor
fnstsw
pop
and
xchg
cmc
(bad)
sbb
inc
push
inc
push
push
xchg
xchg
or
mov
xchg
dec
(bad)
hlt
inc
loopne
das
or
xchg
push
repnz
sub
fcmovu
lods
rcl
mov
(bad)
outs
jecxz
jle
stc
imul
sub
ins
je
out
lock
push
cmp
mov
neg
xchg
outs
xchg
ins
rol
sar
adc
int
adc
jbe
cmp
iret
push
(bad)
movs
ins
jae
mov
test
jg
xchg
pop
imul
cmps
pop
movs
shr
cdq
sbb
fst
dec
dec
sub
xchg
push
mov
(bad)
ds
add
mov
or
cwde
xchg
jge
push
test
mov
loope
adc
aas
add
jge
outs
adc
adc
dec
sar
cli
call
loopne
call
jmp
pop
pop
inc
pop
nop
cmps
cwde
out
jns
jnp
loopne
cwde
mov
sbb
push
and
leave
mov
mov
sub
ret
enter
ficomp
sbb
js
cmp
xchg
shl
xor
dec
out
sbb
std
ret
xchg
dec
(bad)
sub
out
les
xor
xchg
sbb
ds
(bad)
fst
push
sbb
out
icebp
enter
xchg
in
xchg
jle
pusha
cmps
and
in
xchg
or
fidivr
sub
out
add
xchg
bound
xchg
mul
xor
cmc
adc
in
ins
sbb
outs
dec
adc
cwde
cmp
movs
mov
cmps
ret
outs
scas
mov
sbb
sbb
movs
fistp
fmulp
fdivr
rol
add
enter
pop
sub
loop
neg
or
jo
xchg
xchg
mov
cli
inc
xchg
fbstp
fiadd
clc
out
imul
jge
xor
mov
sbb
ret
enter
shr
sti
stc
xchg
xchg
addr16
imul
cdq
outs
into
xor
dec
ds
dec
popf
pop
cmps
das
test
cmp
enter
std
leave
test
push
call
cmps
lahf
adc
cmp
mov
jb
xchg
pop
adc
retf
hlt
add
xchg
inc
test
inc
cmp
xor
xor
or
daa
cwde
and
sbb
shl
add
sbb
imul
stc
dec
movs
jne
fwait
jnp
cmp
scas
(bad)
aad
adc
int
and
pop
ficom
mov
stc
xchg
ret
and
jo
add
sar
lods
sbb
xor
cmp
and
enter
ins
mov
push
popa
cdq
loopne
jle
lods
mov
cwde
(bad)
mov
xchg
frstor
mov
fwait
or
cwde
jns
mov
mov
aaa
(bad)
cwde
ror
sub
addr16
jae
cwde
mov
or
push
lock
fsub
(bad)
push
mov
data16
lods
ja
mov
jecxz
cmp
outs
cdq
cdq
fimul
pop
xchg
jle
inc
popa
cwde
cmp
test
adc
xchg
je
sub
push
sub
popa
clc
mov
pushf
fs
into
rol
adc
xor
sqrtps
add
push
mov
lea
cdq
sbb
dec
jne
dec
or
add
cmc
out
(bad)
dec
sub
add
adc
mov
arpl
or
lock
xor
cmps
mov
mov
add
fiadd
pop
ja
js
dec
jmp
pusha
cmps
mov
idiv
push
pusha
push
aas
sbb
jle
ins
jmp
pusha
cmp
es
ins
sbb
cs
jae
sti
(bad)
fbstp
cwde
xchg
imul
mov
cwde
lods
jle
mov
xor
cwde
push
xor
ins
pop
mov
out
rcr
xor
(bad)
scas
icebp
jl
add
and
stc
cwde
adc
(bad)
popf
mov
mov
jae
addr16
pop
pop
popf
sub
push
jmp
mov
int
sub
call
sbb
xchg
inc
sbb
lods
push
add
xchg
cli
test
sub
fwait
jecxz
outs
pusha
jl
fstp
mov
mov
mov
xor
dec
cwde
adc
mov
cwde
push
sbb
hlt
add
fcomp
xchg
int
mov
stc
cwde
leave
test
jg
xchg
ss
lahf
add
sub
push
popf
and
cmp
nop
xchg
jns
dec
push
dec
imul
retf
loop
cwde
retf
shl
enter
cmp
add
in
lahf
shl
ret
scas
jbe
lahf
sbb
and
add
outs
adc
push
mov
jns
dec
add
movs
xchg
enter
add
inc
sub
loopne
mov
shl
mov
fnstsw
jmp
xlat
xchg
cmp
outs
fs
sbb
hlt
and
jle
xchg
xchg
jp
fldenv
xchg
pop
dec
sbb
xchg
jmp
les
std
cwde
xor
adc
pushf
popa
nop
in
cwde
dec
movs
sub
fstp
sub
and
and
adc
inc
es
dec
jge
enter
and
mov
jb
clc
mov
stos
mov
iret
cwde
mov
nop
ret
out
scas
inc
pop
mov
mov
sbb
cdq
gs
pop
and
js
test
lea
mov
adc
and
in
pop
clc
imul
mov
mov
mov
test
out
test
sub
sub
bound
inc
jae
lods
jp
inc
inc
fcom
test
js
and
imul
mov
sbb
int
call
js
popf
(bad)
aad
icebp
jmp
adc
xor
outs
in
push
mov
sbb
jl
lea
ret
mov
scas
sbb
cmp
in
je
xchg
js
push
sbb
sbb
outs
cmp
hlt
int3
mov
or
test
test
pushf
xor
and
xor
xchg
cli
sbb
out
cs
fst
sbb
pushf
sbb
dec
sub
ds
cmp
in
add
push
pop
and
push
cmp
sub
dec
or
dec
clc
push
clc
test
pushf
test
fwait
jl
cwde
push
push
pop
push
xchg
test
cli
ret
jae
out
mov
add
mov
jmp
inc
loopne
sub
sbb
enter
lock
dec
xchg
ror
mov
jmp
xchg
popf
test
inc
je
repz
mov
test
sbb
inc
push
add
lock
int
jg
xchg
shr
jnp
nop
or
push
jb
popf
adc
add
or
fsub
inc
jmp
add
dec
cwde
enter
pushf
imul
pop
int3
ficom
stc
or
ret
mov
mov
scas
out
xor
cwde
mov
sbb
xchg
mov
sbb
(bad)
into
fdiv
jno
jge
mov
lahf
push
enter
(bad)
mov
push
in
stos
sbb
cvtps2pd
fdiv
pop
sub
std
cdq
clc
jg
cmp
dec
mov
je
icebp
ret
shr
movs
mov
loope
jo
test
xchg
jg
sbb
(bad)
fimul
inc
xchg
movs
les
retf
or
jge
push
or
out
int
and
inc
call
and
loope
popa
js
jg
xchg
sub
push
cwde
mov
push
int
ret
lea
vdivss
fidiv
and
das
jb
jmp
mov
fidiv
cmps
scas
add
cs
out
xlat
inc
cwde
push
inc
or
sub
adc
adc
push
(bad)
inc
sbb
xchg
jle
(bad)
ins
sahf
ins
push
dec
stos
cwde
aaa
adc
retf
sbb
fisttp
and
cs
(bad)
shl
fst
cmp
jae
cwde
mov
sbb
cwde
outs
jle
push
stos
and
mov
loop
cmp
dec
mov
inc
ret
mov
mov
shl
hlt
cwde
xor
adc
add
xor
cwde
sbb
jle
push
mov
daa
push
fidivr
mov
rol
cwde
or
sbb
xchg
repz
call
sub
cwde
sub
jae
xchg
mov
push
mov
mov
xchg
pop
or
ja
out
add
cmp
xchg
cmps
(bad)
pop
jecxz
sbb
inc
mov
aam
pop
inc
icebp
int3
fist
pop
jmp
in
js
jns
rcl
sbb
loope
dec
and
call
jmp
aam
enter
scas
jnp
loopne
shl
rol
or
xor
xchg
(bad)
(bad)
xchg
cmps
sbb
xor
or
add
enter
mov
(bad)
jnp
xchg
loopne
jbe
clc
xor
out
cwde
call
mov
push
retf
arpl
xchg
mov
scas
jne
xor
xchg
xchg
cmps
mov
sar
ror
mov
jne
pop
jp
lds
fldenv
sub
xchg
pushf
xor
mov
adc
cwde
mov
(bad)
mov
and
in
jp
xor
sti
sbb
add
jp
xchg
pop
out
movs
mov
dec
scas
fisubr
cwde
jb
loope
xor
(bad)
dec
lods
das
and
jl
retf
sub
adc
jmp
lahf
cmp
dec
call
cmps
mov
pop
daa
dec
xchg
test
pop
cs
mov
outs
inc
pop
cwde
fwait
js
mov
cwde
mov
jb
mov
lea
add
push
mov
jmp
cld
mov
popf
jp
imul
sbb
xor
pop
rcl
aaa
neg
stos
js
dec
call
sahf
and
retf
shr
sti
or
dec
adc
add
inc
dec
pusha
(bad)
jmp
gs
clc
dec
dec
cmps
and
scas
cwde
hlt
add
scas
pop
sub
inc
cwde
mov
rcl
test
xor
iret
sahf
ins
pop
call
mov
scas
shr
pop
or
jne
cwde
popa
in
add
or
dec
nop
cwde
xor
xchg
aam
add
xlat
ds
cmp
mov
test
(bad)
enter
mov
mov
or
ss
lods
push
mov
call
cwde
add
xchg
cwde
imul
test
cwde
mov
loope
cmc
(bad)
shl
in
mov
cwde
std
mov
mov
xchg
fwait
ins
fdiv
clc
or
cmp
cwde
xchg
push
test
stc
jmp
adc
cmc
shl
cwde
dec
push
xchg
inc
scas
mov
jp
loop
xchg
xchg
jl
xor
fs
pop
cwde
jecxz
test
rep
push
mov
inc
xchg
pop
xor
aas
fwait
popa
mov
jbe
xchg
jnp
xchg
inc
jmp
int3
xchg
stc
movs
test
sub
dec
nop
xchg
and
cmps
dec
push
push
jae
push
add
vxorpd
dec
mov
jecxz
xor
stos
mov
in
xor
cmp
dec
popf
enter
clc
loopne
out
mov
pop
sub
dec
pop
push
cwde
loop
inc
inc
push
inc
out
cmps
xchg
pusha
mov
jg
sbb
mov
push
xchg
leave
pushf
sti
pop
mov
stos
xchg
push
cld
mov
cdq
mov
(bad)
das
retf
imul
sbb
pop
sub
jnp
add
retf
fistp
popa
xor
sub
addr16
mov
pushf
xchg
bound
div
jmp
movs
xchg
retf
sbb
mov
push
xchg
cdq
test
mov
rcl
mov
adc
mov
mov
lods
xchg
and
dec
push
aad
les
sub
push
out
in
pop
cdq
xchg
pop
out
sbb
jae
dec
mov
mov
xor
in
cwde
cmp
add
loop
add
or
pop
mov
mov
stos
ret
shl
call
inc
cwde
ss
sbb
(bad)
imul
dec
retf
out
scas
xchg
mov
rcl
sahf
pop
adc
sub
ret
inc
mov
xchg
and
mov
in
daa
ss
cwde
or
fs
and
or
dec
cmp
xchg
adc
cwde
xor
jl
int
scas
sahf
iret
rol
mov
xchg
pop
and
pop
cmp
test
push
inc
mov
sub
or
cmovo
lahf
xchg
mov
pop
ret
xor
inc
test
enter
int3
or
sub
rcr
ins
cs
sub
mov
cwde
xlat
or
dec
pop
cmp
loopne
mov
xor
sub
call
inc
cwde
std
pop
das
inc
bound
cmp
push
add
or
and
in
xor
and
test
or
cwde
ja
iret
adc
cmp
pop
mov
fcom
or
lock
test
fisttp
retf
sahf
mov
scas
push
xlat
pop
ficom
pop
push
push
cmps
cwde
xchg
ret
dec
fsubr
in
pop
xchg
js
sub
sti
push
popf
dec
dec
fcom
popa
cwde
dec
mov
in
repz
xchg
int
mov
addr16
sbb
xchg
call
fsub
mov
fcom
mov
test
push
and
ins
fidivr
cdq
xchg
int3
lods
sbb
mov
mov
ins
daa
ja
popf
jo
push
movs
cwde
dec
push
sub
mov
out
pop
and
mov
mov
add
dec
jle
cwde
xor
adc
cwde
imul
cmp
or
xchg
push
mov
in
cwde
outs
inc
test
push
xchg
movs
fcmovbe
cmp
(bad)
test
jmp
jo
aad
je
xchg
cmc
sub
jbe
dec
adc
cwde
fistp
adc
mov
or
ins
sbb
sar
and
or
pop
fwait
xchg
(bad)
fisubr
dec
mov
mov
sbb
or
out
out
scas
sbb
sbb
lds
push
xchg
push
mov
mov
mov
mov
mov
test
xchg
mov
retf
inc
test
push
xchg
sub
(bad)
mov
mov
pop
lock
cmp
in
mov
jecxz
xchg
jns
pop
jb
fs
mov
mov
fs
and
test
dec
mov
cmp
sbb
outs
mov
retf
cwde
scas
sbb
call
or
pop
and
fs
mov
enter
imul
pop
or
mov
sub
into
sbb
and
outs
cwde
cmp
push
mov
mov
xchg
rcr
jmp
jecxz
mov
mov
imul
int
sub
fidivr
jb
cmp
sub
xchg
add
jg
add
and
cmp
sub
ins
fst
shl
or
jmp
rcr
call
xor
cmps
push
ss
pop
jnp
dec
lahf
xor
in
or
out
pop
mov
cmps
test
lahf
mov
(bad)
sbb
xchg
jbe
ins
push
cwde
and
cmp
imul
cdq
add
jb
mov
leave
cwde
xor
cmp
adc
pop
push
cwde
cmp
or
or
outs
jnp
(bad)
fyl2x
ins
cwde
pop
ins
jae
jo
cmc
aaa
cmps
test
iret
int
jae
push
mov
dec
int3
shl
arpl
mov
lea
adc
dec
cwde
je
mov
cwde
mov
(bad)
fcmovne
cwde
inc
add
mov
cli
jmp
inc
lods
in
add
ja
fidivr
mov
aaa
push
sbb
pop
nop
ins
cmc
mov
test
pop
or
mov
xchg
add
push
mov
test
jae
xchg
push
inc
(bad)
sahf
pusha
pop
and
rol
fnsave
mov
std
in
cmp
cwde
or
add
push
(bad)
ror
sbb
cwde
adc
cmp
enter
cwde
xchg
fistp
pop
imul
popf
retf
ficomp
shl
dec
sbb
inc
stc
sub
enter
pop
cwde
mov
push
jl
and
mov
and
frstor
pusha
xor
adc
scas
ins
cwde
fnstenv
scas
mov
mov
xchg
in
rcr
jne
cmp
js
adc
pop
dec
sub
pusha
neg
xchg
call
test
and
repz
sub
popa
cwde
ret
mov
and
(bad)
stos
xchg
mov
daa
jb
sub
ins
cmp
sbb
out
jne
lods
retf
clc
int
dec
add
addr16
cmp
xchg
xchg
aad
jae
mov
(bad)
int3
push
jns
lods
retf
clc
loopne
cmp
add
cmp
jg
xor
sub
jne
test
fisttp
js
dec
sub
inc
jge
js
jbe
jnp
clc
cwde
jmp
fdivr
cwde
pop
inc
rcr
cwde
aas
pop
add
cwde
adc
mov
call
inc
ds
pop
div
xchg
sbb
loope
jmp
adc
or
push
push
mov
jmp
arpl
dec
movs
rcr
dec
jg
or
mov
dec
cmp
inc
push
pop
cwde
pop
out
fbstp
mov
stos
les
add
jbe
mov
call
aad
or
dec
or
and
xchg
ja
test
mov
call
daa
pop
test
cwde
xchg
xchg
dec
loope
das
(bad)
push
daa
xchg
cld
push
ins
fstp
add
sti
jle
xchg
cwde
ret
mov
popa
jl
neg
lods
mov
sub
dec
icebp
ins
pop
cwde
and
xor
int3
xchg
or
scas
mov
(bad)
dec
iret
and
je
jae
mov
popf
shl
and
xchg
jo
xchg
or
adc
ds
push
out
jmp
mov
test
cmp
and
pop
jo
mov
sbb
movzx
sbb
mov
cmps
push
mov
fwait
or
or
cmp
cwde
fdivrp
xor
in
sub
adc
adc
and
cwde
pop
loopne
repz
xchg
loope
sub
and
adc
xchg
xor
inc
push
cmp
fs
fimul
pop
mov
mov
fdivr
(bad)
std
or
cwde
jmp
lea
jp
pusha
call
lods
xor
sub
mov
ror
out
add
pop
das
arpl
inc
cdq
cmps
push
jbe
test
clc
cwde
adc
setne
cmc
outs
stos
les
adc
lock
cwde
rcr
cmps
mov
xor
jmp
adc
call
(bad)
out
in
and
lods
xchg
fnstcw
in
inc
inc
icebp
mov
enter
jns
in
sub
aam
repz
faddp
enter
xor
ins
js
fisubr
pop
jg
and
mov
jae
add
in
cwde
inc
nop
outs
mov
mov
test
cwde
add
and
dec
jp
out
sbb
ret
cmps
mov
shl
scas
call
pop
mov
out
cs
mov
adc
xchg
push
loopne
bnd
aaa
pop
push
mov
add
mov
shl
push
adc
jg
mov
mov
sbb
jmp
rol
gs
add
add
imul
sub
je
cwde
and
or
cwde
in
sbb
push
arpl
or
ins
cwde
and
jp
xchg
fisubr
sbb
out
bound
jecxz
push
xchg
out
jmp
cwde
mov
mov
cmp
jmp
(bad)
rol
iret
hlt
or
jno
fldcw
mov
mov
scas
retf
jge
jo
inc
push
shl
xlat
jg
sub
(bad)
xchg
stc
(bad)
xchg
sub
push
xchg
sub
ret
sbb
popa
clc
clc
sbb
dec
push
pop
rcl
adc
push
ins
inc
sub
jbe
dec
popf
push
hlt
ret
xchg
push
std
adc
(bad)
pop
and
sbb
lods
sub
ins
lock
cwde
push
loope
dec
(bad)
cwde
ret
mov
imul
xor
add
or
xchg
cmps
mov
pop
adc
add
mov
(bad)
enter
sbb
sbb
cmp
push
das
push
or
adc
clc
push
and
cmp
mov
jb
add
cwde
pop
sub
sbb
cwde
mov
pop
outs
sbb
scas
jne
sbb
div
cdq
mov
shr
lock
jecxz
ins
and
cmc
outs
js
stos
xchg
fsub
call
adc
stc
cwde
pop
and
movs
jp
jle
xchg
cs
in
idiv
enter
xor
jo
hlt
loopne
push
mov
ror
mov
xor
sub
mov
sar
fstp
out
pop
mov
lahf
jmp
lock
retf
cmp
scas
mov
ror
call
push
cs
sbb
pop
cmp
add
or
xor
adc
lods
or
xchg
xchg
mov
pop
jmp
cwde
or
inc
jbe
mov
cwde
inc
sub
or
lods
mov
out
cwde
(bad)
hlt
outs
mov
add
(bad)
in
cwde
jb
addr16
fstp
xlat
call
sbb
mov
pusha
lock
int
add
fucomi
shl
test
or
or
jge
arpl
xchg
cwde
ror
aam
repz
xchg
push
cmp
ret
mov
retf
cwde
pop
xor
xchg
adc
mov
inc
and
lock
cwde
or
adc
xchg
dec
xor
mov
jecxz
cwde
pop
sub
pop
aas
std
add
fisub
inc
fiadd
(bad)
gs
or
std
addr16
pop
push
dec
jl
sub
leave
sub
sahf
imul
gs
xchg
rcr
push
js
sub
mov
mov
jo
leave
cwde
je
ds
xchg
sbb
jg
cwde
(bad)
pusha
adc
scas
mov
cmc
ficom
mov
sbb
jl
jp
dec
xchg
pop
int
ficomp
das
test
sub
or
fdiv
test
dec
not
push
inc
sbb
jmp
fcmovu
dec
mov
xchg
ja
or
add
fdiv
mov
(bad)
jl
test
jmp
jg
aaa
fs
repz
(bad)
mov
mov
cwde
sti
sub
mov
(bad)
in
or
mov
popf
add
add
leave
sbb
dec
xchg
lea
jbe
lahf
push
jb
enter
inc
outs
imul
mov
mov
and
cmp
je
movs
mov
rol
jle
inc
push
mov
out
mov
cmc
adc
jnp
sbb
sbb
ss
aaa
push
pop
jp
dec
call
icebp
cdq
and
out
pop
sub
ret
cwde
loope
enter
in
cdq
jl
and
std
fucom
xchg
mul
mov
out
test
aas
sbb
xor
das
xchg
in
sbb
cld
fmul
scas
or
xor
sbb
add
add
cwde
jecxz
dec
aaa
xchg
mov
das
xchg
dec
out
add
js
jo
addr16
rcr
in
sbb
cmp
sbb
cwde
dec
jno
mov
inc
mov
xchg
sub
in
ins
hlt
clc
fld
sbb
or
cwde
dec
lods
pop
in
add
cwde
inc
push
fmul
sbb
fs
jmp
rcl
dec
fdiv
jle
cwde
sti
fstp
inc
cwde
sub
int3
emms
push
movs
adc
pop
cmp
cmc
out
add
mov
hlt
stos
dec
sbb
or
lock
je
jmp
pop
add
mov
shl
(bad)
sbb
fild
in
pop
xor
xchg
and
dec
sbb
scas
push
cdq
inc
iret
xor
rcr
cwde
(bad)
mov
test
jge
inc
outs
xor
jo
fidivr
sub
add
adc
xchg
xor
js
xor
sti
call
cwde
add
ror
mov
mov
adc
push
xchg
or
daa
pop
cmp
lods
out
pop
cld
in
js
js
push
push
or
jl
cmp
jge
jmp
addr16
xchg
xchg
test
sbb
mov
call
ret
fdiv
sub
es
popf
inc
arpl
loop
cmp
xchg
add
mov
jg
xor
xchg
or
fmul
dec
sbb
xchg
dec
push
inc
pusha
dec
aam
add
cwde
pop
mov
lds
cmp
sub
cwde
in
mov
fild
retf
into
outs
cwde
enter
loope
ds
push
cwde
int
xchg
jle
in
call
in
popa
mov
fbld
push
fnstcw
iret
clc
sbb
pusha
jmp
mov
aaa
pop
fwait
jp
cwde
aam
or
mov
mov
cwde
mov
cwde
dec
xor
ret
ss
cwde
bound
lock
push
ud0
xor
sub
mov
call
dec
pusha
and
shl
inc
stc
cwde
je
xchg
scas
mov
aaa
or
xchg
ins
test
mov
sbb
test
xchg
ins
pop
push
jmp
sahf
push
jo
rcr
loopne
imul
sbb
sbb
push
xor
fs
outs
pop
call
sub
into
add
jbe
xor
xor
push
in
pop
jp
stos
pop
sbb
rol
xor
js
xchg
pusha
xchg
mov
xor
adc
xor
js
cwde
mov
fwait
push
out
cmp
icebp
(bad)
test
push
sbb
mov
bound
inc
iret
fstp
jmp
push
xchg
iret
fsub
inc
pop
dec
or
and
ret
or
push
in
imul
mov
mov
retf
scas
loop
out
sbb
pushf
idiv
aad
add
imul
inc
cwde
cmps
pop
adc
cmp
out
pop
cs
mov
jo
push
xchg
dec
or
mov
sbb
cwde
mov
call
call
xchg
mov
(bad)
xor
ins
or
jge
in
repz
mov
sbb
jl
xchg
fsub
call
xor
xchg
iret
inc
sub
xor
xchg
fs
outs
lahf
add
jmp
std
lock
mov
enter
push
adc
cmp
pop
mov
mov
sbb
fmul
jp
(bad)
aad
shl
mov
popa
dec
sar
repnz
cwde
scas
dec
test
push
int
sub
cwde
stos
push
mov
lock
js
adc
add
loope
sub
xchg
cwde
mov
into
mov
in
daa
shl
mov
dec
push
inc
pop
xchg
jns
bound
jge
dec
and
push
pop
mov
pop
ins
mov
add
clc
iret
xor
cdq
add
sbb
pop
repz
stos
pop
xchg
in
xor
xchg
sub
clc
xchg
pushf
ficomp
xchg
jo
ins
stc
sub
xchg
adc
daa
js
pop
dec
cwde
int
pop
pop
pop
add
(bad)
imul
int3
xor
pop
mov
jnp
mov
es
icebp
in
jmp
int3
call
rol
addr16
sub
mov
inc
sub
pop
and
leave
pushf
rol
cli
sub
(bad)
xor
inc
pop
jp
adc
xlat
stc
xchg
ds
adc
mov
ins
mov
loope
cwde
pop
mov
jo
jp
mov
mov
ret
or
mov
ins
pop
push
cwde
sub
rcl
fs
cwde
and
sti
repz
into
popf
cwde
xor
xchg
faddp
cmp
mov
ret
xchg
sub
dec
inc
sar
sub
loop
xor
fcomp
pop
lock
int
cdq
in
arpl
cwde
fnstsw
sub
add
dec
mov
adc
add
fwait
js
scas
adc
ja
(bad)
fsubr
in
xchg
es
jbe
pusha
add
xchg
mov
lods
div
iret
fadd
jmp
push
bound
stos
cwde
sbb
in
add
cwde
mov
and
call
jg
aas
mul
dec
call
loop
dec
push
cmp
out
int3
xlat
mov
les
mov
cwde
or
pop
into
ins
js
jnp
leave
stos
xchg
inc
xchg
jae
popf
int
out
pop
xor
mov
or
pop
mov
sbb
jns
inc
pop
leave
jno
sub
cwde
pop
loop
loope
call
call
xchg
mov
push
cdq
xchg
push
ins
push
ds
ror
lods
lahf
int3
pop
retf
(bad)
es
or
ins
mov
aad
aaa
adc
sti
and
jne
push
sub
xor
icebp
adc
bound
push
cmps
push
xchg
dec
push
(bad)
jg
mov
and
pop
push
xor
(bad)
out
or
cmps
lods
mov
ins
faddp
cwde
fstp
xor
jnp
cs
sbb
mul
xchg
cwde
jmp
xchg
push
cwde
std
aad
xor
cmp
cld
fmul
(bad)
push
push
xchg
adc
sub
leave
fild
sub
outs
sahf
cli
inc
ss
add
std
xchg
ins
lods
push
mov
push
add
leave
loope
inc
js
jnp
cwde
call
not
dec
push
rol
dec
push
cwde
sahf
outs
xchg
movs
jo
push
cwde
cmp
mov
xchg
cwde
push
mov
loope
popf
xcrypt-ctr
cmps
pop
xor
dec
inc
js
pop
sub
adc
mov
addr16
popa
xchg
ins
xchg
jecxz
cwde
xchg
or
mov
mov
icebp
fucomi
int
pushf
sbb
mov
pop
ror
cmp
lahf
rol
js
push
jns
mov
push
jecxz
inc
pop
imul
ja
imul
dec
mov
mov
xchg
sbb
dec
mov
mov
or
mov
(bad)
or
das
retf
or
jne
xchg
or
xchg
mov
in
rcr
test
mov
and
cs
xchg
mov
xbegin
and
fcomp
mov
sbb
add
xor
lahf
jmp
loopne
mov
xchg
and
movs
mov
mov
cmps
or
aam
repnz
cwde
pop
or
add
mov
dec
push
push
and
cmp
pop
cmp
cwde
frstor
fidivr
cmp
sbb
adc
stos
ja
cwde
gs
cli
mov
cmp
xchg
bound
add
call
pop
push
dec
out
sbb
ins
jle
jp
mov
sti
(bad)
fisubr
dec
cmps
sbb
mov
frndint
jo
call
pop
pop
adc
and
xchg
or
jge
pop
arpl
enter
int
inc
sub
cs
(bad)
div
xor
mov
push
mov
sbb
add
lock
pop
jg
xchg
les
popf
popa
dec
lahf
ror
xchg
pop
and
and
outs
mov
in
pop
out
cwde
xchg
popa
jae
int
icebp
xor
movs
stos
sub
xchg
sbb
mov
inc
movs
fdiv
imul
loopne
rcl
add
loopne
mov
xchg
mov
neg
sbb
in
out
mov
outs
pop
imul
pusha
retf
push
mov
test
loope
(bad)
xor
sub
movs
cwde
(bad)
rcl
or
sbb
cwde
pop
mov
ja
popf
imul
jecxz
js
sti
es
dec
stc
std
push
or
xchg
xlat
retf
inc
xchg
lea
in
dec
inc
push
stos
sbb
mov
cwde
adc
xlat
iret
xor
rcr
mov
(bad)
adc
sub
outs
js
pop
sbb
cwde
push
xchg
xor
jne
mov
nop
sar
adc
and
push
pusha
inc
pop
retf
xchg
sbb
cwde
mov
(bad)
fist
lahf
inc
pusha
mov
add
xchg
jb
outs
add
lahf
add
fmul
int
cld
cmp
shl
loop
scas
shl
adc
cmp
pop
fiadd
sbb
cmp
ficom
fld
cdq
scas
mov
jmp
imul
pusha
and
js
xchg
jg
mov
out
ins
fstp
aad
push
xor
dec
and
pop
dec
and
cli
ret
test
das
mov
stos
int3
push
xchg
inc
in
dec
stos
adc
sub
cwde
fdiv
pop
(bad)
fild
xor
fcmovnbe
cmp
lahf
data16
les
xor
outs
sbb
cmp
sub
aam
jecxz
sub
repnz
(bad)
mov
push
cwde
mov
punpcklbw
mov
adc
mov
je
xchg
lods
ins
aaa
push
dec
mov
jecxz
inc
push
aas
popa
enter
and
add
fist
call
es
jle
inc
mov
pop
pop
fbld
ffreep
shl
dec
data16
data16
dec
ins
inc
cwde
data16
inc
xchg
pop
cs
test
mov
fwait
lods
test
jno
lock
pop
mov
adc
push
add
jo
sub
and
inc
out
cli
sub
test
push
out
(bad)
test
mov
mov
(bad)
jb
xor
rcl
loopne
ja
xchg
cwde
dec
cmp
repz
cwde
outs
pop
lds
mov
jle
cwde
ss
test
xrelease
sbb
leave
jne
cwde
js
enter
ret
cmp
mov
loop
mov
push
add
cwde
std
dec
in
xchg
loopne
popw
(bad)
out
pop
icebp
arpl
jae
xchg
xchg
add
or
mov
cmp
test
mov
je
push
loope
cs
jge
mov
lahf
ret
out
leave
push
pop
push
sbb
xor
mov
ror
mov
aas
jmp
mov
inc
dec
lahf
aam
mov
dec
xchg
scas
mov
iret
(bad)
push
test
adc
or
add
dec
mov
sbb
sbb
lods
cld
mov
mov
dec
mov
mov
clc
sub
dec
xchg
push
add
jbe
mov
out
sbb
imul
movs
repz
adc
fistp
pop
sbb
xor
inc
fidivr
add
adc
sub
jbe
jmp
xor
and
mov
icebp
or
(bad)
int
add
and
ret
mov
push
repnz
je
mov
(bad)
inc
dec
jb
mov
mov
cs
dec
ds
addr16
mov
add
pop
mov
sub
imul
out
inc
test
in
out
bound
js
inc
sub
daa
pop
pop
das
inc
cwde
shl
or
adc
call
push
and
mov
daa
cwde
arpl
inc
mov
push
mov
add
aaa
sbb
loope
retf
xchg
jle
dec
retw
jbe
in
call
(bad)
xlat
repnz
lahf
and
push
addr16
dec
loope
sub
push
ret
aam
fild
adc
adc
cwde
pop
mov
fadd
sub
stos
lea
shl
aas
imul
sar
xor
push
cmp
repnz
or
outs
sub
icebp
inc
sub
jb
scas
stc
dec
fisub
mov
dec
cmp
push
popa
fsub
lods
test
cs
out
sbb
mov
dec
mov
mov
push
mul
ss
xchg
(bad)
fucomi
repnz
imul
cld
es
nop
popa
jne
je
ins
jb
adc
sub
xchg
ja
jle
fldcw
dec
(bad)
je
pushf
dec
lahf
arpl
shr
inc
cwde
in
repz
dec
push
jae
frstor
into
loop
and
ror
outs
jge
call
push
cdq
and
push
jle
inc
xor
fcom
jo
cwde
pop
test
into
and
cwde
push
adc
(bad)
mov
pop
scas
cmp
rcr
stos
js
jge
or
cwde
dec
push
aad
lock
push
cwde
inc
imul
mov
push
fisubr
inc
lds
pop
xchg
mov
enter
lods
add
cwde
or
xor
clc
pushf
and
outs
inc
cwde
pop
cmp
dec
mov
sti
cmc
add
and
bound
lea
std
nop
inc
push
mov
sub
test
cmp
fdivr
enter
cwde
push
mov
int3
fnsave
iret
icebp
mov
mov
xchg
cwde
test
pop
cmp
or
xchg
and
sbb
pop
sbb
dec
pop
xor
mov
cwde
mov
fs
(bad)
lock
call
hlt
dec
sti
fisttp
fcom
shr
outs
xor
fldcw
mov
(bad)
leave
rol
cmps
dec
test
add
cmps
aas
outs
add
sub
or
cmp
aad
and
loop
push
pop
jns
mov
imul
idiv
adc
adc
test
add
retf
fsubr
jo
aaa
sub
cmp
test
pop
sub
push
(bad)
mov
cwde
mov
pop
push
xor
repz
test
jge
mov
adc
pusha
jmp
mov
pop
dec
push
mov
in
loopne
ret
and
lock
jge
cmp
mov
test
push
mov
ins
mov
jne
rcl
xchg
inc
cmp
enter
mov
cmp
cwde
sahf
jg
push
adc
lock
cwde
in
scas
in
mov
dec
pusha
clc
clc
out
push
ds
add
out
sbb
lods
out
cwde
mov
pop
es
arpl
lahf
cmps
mov
enter
sub
push
xor
cmp
enter
xchg
adc
inc
arpl
pop
xchg
cli
fnstenv
add
mov
data16
iret
sub
fcom
adc
adc
push
cwde
adc
inc
inc
sub
push
mov
cmp
pop
aas
xchg
js
jnp
mov
xchg
push
out
push
das
cli
clc
inc
lods
adc
jge
punpckhbw
cdq
out
jmp
pop
and
dec
cwde
jbe
(bad)
daa
hlt
adc
dec
push
xor
sar
or
sbb
fsub
xchg
cmp
cmc
data16
push
jmp
loopne
retf
das
adc
fwait
popa
js
test
js
cwde
popa
mov
(bad)
imul
inc
add
mov
or
and
int3
cmp
push
and
les
xchg
jmp
mov
jmp
sbb
into
jle
cwde
(bad)
or
inc
imul
dec
xchg
(bad)
leave
mov
scas
mov
lods
jmp
inc
add
or
fisttp
ss
add
adc
inc
push
leave
cmp
dec
mov
sbb
icebp
adc
sub
fild
sbb
stc
xchg
jo
adc
mov
xor
pop
inc
pushf
mov
stos
dec
cwde
mov
push
push
rcl
adc
add
cwde
mov
test
mov
push
fld
std
in
mov
mov
shr
in
sbb
or
cs
pop
push
xlat
jmp
lds
fistp
cmp
mov
sbb
inc
sbb
add
push
cmp
inc
cmp
loop
scas
xchg
xor
leave
ss
sub
xlat
daa
stos
mov
(bad)
xor
mov
mov
movs
outs
fbstp
add
inc
fdivr
rol
lds
xor
sub
add
mov
mov
fisub
jmp
adc
cdq
dec
cmp
in
repnz
cmp
dec
adc
retf
sbb
mov
stos
mov
ror
pop
call
mov
retf
sub
mov
or
mov
mov
dec
fnstcw
pop
adc
cmp
xchg
shl
mov
popa
dec
(bad)
xchg
sbb
push
out
dec
loope
clc
sbb
push
cdq
out
cwde
mov
mov
sub
mov
rcr
mov
mov
test
shr
adc
push
xchg
dec
jns
pop
pop
mov
mov
pushf
mov
mov
jge
jo
sbb
xchg
cmps
mov
int
sahf
xchg
jnp
(bad)
push
xchg
or
out
call
mov
cwde
call
in
mov
xlat
(bad)
ror
jae
outs
rcl
dec
inc
xchg
scas
loope
retf
sub
lods
fnstcw
inc
or
lods
icebp
rcr
push
cwde
xor
and
cmp
mov
cld
xchg
(bad)
and
in
ficomp
aam
les
out
add
xchg
add
aaa
add
cwde
dec
push
push
test
lods
mov
mov
lods
mov
shr
cwde
xor
cwde
sbb
iret
call
mov
lods
jecxz
cmc
cmp
inc
cwde
fs
outs
lahf
jo
shl
pop
mov
inc
jge
out
enter
dec
movups
and
jo
and
cwde
or
pop
cmp
fisub
push
dec
movs
ffree
adc
jmp
sub
fld
pop
mov
aam
addr16
dec
(bad)
call
ds
xchg
shr
sbb
(bad)
cmps
or
ss
or
pop
imul
ins
or
push
dec
test
dec
cwde
pop
rol
test
lahf
sbb
out
ret
scas
pop
mov
(bad)
outs
xor
fldenv
lea
fidiv
movs
dec
inc
or
in
cwde
adc
rcl
outs
or
addr16
push
or
sbb
cwde
cmps
or
adc
test
inc
jb
sub
cli
sub
inc
sbb
xchg
cwde
mov
ja
out
test
xor
jb
add
add
aad
inc
xchg
jnp
push
mov
adc
fwait
add
mov
inc
ret
arpl
sar
cmp
mov
call
xchg
push
jnp
cli
add
in
test
lock
test
pop
clc
jb
test
adc
and
add
pushf
xchg
outs
and
ret
jge
test
push
lock
idiv
cs
jmp
cmc
mov
fsubr
or
push
or
shl
mov
or
ds
out
cmp
jge
dec
mov
lea
fsubr
cmp
xchg
jmp
fdiv
cmc
xor
fstp
xlat
cmps
mov
sbb
in
sub
lods
dec
je
pop
lock
sbb
jno
gs
mov
cdq
sub
sbb
push
jb
test
in
pop
ins
call
push
into
xor
sbb
ins
sbb
in
iret
cwde
test
mov
jg
jmp
shl
or
movs
lods
mov
cwde
or
jo
push
pop
es
dec
mov
xchg
out
xor
pop
jne
cmps
jo
sbb
outs
dec
sub
cwde
xor
jmp
push
ds
jg
aaa
push
int
stc
rcr
sti
leave
adc
mov
rcl
inc
and
dec
cwde
jmp
inc
cdq
sub
lahf
jnp
in
add
push
mov
push
(bad)
ja
mov
ds
std
addr16
in
ja
xchg
jl
retf
mov
ins
sahf
inc
mov
out
sbb
std
repz
clc
test
pop
cs
cmp
mov
push
cmp
je
(bad)
ds
les
inc
(bad)
outs
mov
js
jmp
xchg
mov
popf
mov
pop
enter
adc
lods
xchg
mov
xchg
in
test
aaa
dec
inc
int3
xchg
das
xor
mov
cwde
(bad)
sbb
aaa
sbb
cmps
and
xor
cli
call
fsubr
ins
cwde
push
dec
imul
inc
cwde
jmp
xor
cmp
paddq
mov
mov
pusha
cwde
scas
mov
icebp
sub
ret
loopne
ja
ret
in
test
adc
push
or
cwde
adc
push
fwait
ins
adc
inc
dec
mov
ficom
retf
js
scas
pusha
mov
add
mov
frndint
sub
xchg
ds
push
push
loop
sbb
and
lahf
rcr
sbb
pop
or
push
rcr
test
mov
ds
fcomp
cmps
in
xchg
or
fstp
xchg
cwde
jns
inc
retf
xlat
retf
call
out
enter
or
inc
es
mov
ja
mov
sar
jecxz
and
xchg
js
pop
push
xor
pop
xchg
cmp
mov
call
pop
imul
add
gs
push
scas
push
or
in
outs
test
xchg
cld
(bad)
aad
mov
and
arpl
mov
mov
(bad)
(bad)
stos
cwde
cli
dec
cmps
sbb
leave
cmp
pop
ret
aam
fdiv
xchg
scas
push
xchg
xor
pop
jl
in
ret
jb
sub
(bad)
fucomip
inc
and
mov
test
cmp
inc
ret
pusha
lods
sub
or
popf
jb
jmp
mov
int3
jecxz
dec
loopne
int
or
inc
cmp
dec
out
adc
dec
push
xchg
(bad)
or
pushf
(bad)
pushf
test
fwait
mov
test
es
or
jecxz
cmp
and
push
jo
fidivr
inc
dec
pop
dec
mov
cwde
sub
add
repz
mov
js
aad
xchg
outs
push
in
xchg
dec
dec
sub
shl
(bad)
fild
jp
inc
jno
popa
loopne
js
or
jbe
sbb
mov
and
or
test
sbb
ror
aaa
add
outs
fwait
jns
dec
ins
cwde
ret
dec
push
or
daa
sub
popa
jbe
push
mov
daa
cmp
fcom
int
outs
xor
cwde
sbb
pop
das
pop
out
cwde
cmc
inc
retf
icebp
mov
xchg
mov
jmp
dec
nop
cwde
dec
test
add
daa
ja
add
in
das
xor
sub
and
popa
fs
or
push
sub
fst
out
mov
sbb
popa
pusha
push
cwde
repz
adc
or
or
in
jne
adc
push
push
sahf
ret
fs
int
jp
enter
cwde
movaps
mov
iret
inc
push
and
mov
xchg
outs
(bad)
(bad)
mov
mul
cmp
in
mov
jmp
cmps
mov
pop
add
push
(bad)
pop
pushf
ror
mov
and
xchg
fwait
mov
and
adc
jp
not
icebp
xchg
pop
scas
xchg
jns
pop
mov
test
xchg
push
hlt
jle
xchg
cmps
mov
test
not
xchg
jns
push
iret
push
cmc
dec
cwde
adc
cmp
stc
int3
sbb
in
lahf
jo
xchg
xchg
sbb
sub
jns
out
jmp
in
cmp
cwde
sti
jge
(bad)
mov
pop
and
nop
fld
mov
rcl
je
sahf
mov
lahf
add
int
imul
scas
add
cwde
aam
cmp
and
inc
add
pushf
cdq
lds
inc
mov
pop
mov
gs
in
cwde
inc
mov
sub
icebp
inc
push
cmp
das
xor
sahf
jne
retf
addr16
mov
cmp
push
fsub
iret
loopne
cmp
and
xor
pop
and
pop
sbb
xchg
ja
push
aam
jo
imul
out
jmp
popa
push
cmp
or
pop
mov
or
outs
jo
lahf
shl
das
xchg
inc
jle
xchg
push
push
rcr
mov
adc
push
jle
popf
sbb
xchg
mov
push
test
mov
xchg
pop
das
cdq
mov
into
cmp
fnstsw
xchg
repz
inc
jmp
dec
adc
jne
jbe
popf
iret
bound
cmp
jl
je
aaa
nop
fst
xchg
icebp
test
or
dec
enter
pop
jp
jmp
call
ficomp
int3
scas
add
les
jmp
sub
clc
pop
bound
stos
fs
aad
mov
push
out
fcom
sub
dec
mov
pop
fadd
hlt
dec
push
cs
xchg
aaa
call
test
movs
fcom
or
pop
xor
jle
xchg
push
out
(bad)
dec
push
stc
arpl
popf
test
add
fidivr
inc
push
dec
push
repnz
popa
in
dec
inc
cmp
ins
mov
pop
dec
mov
inc
push
cwde
inc
icebp
jnp
fmul
rcr
lock
xchg
add
mov
out
out
adc
test
movhps
adc
push
nop
mov
stos
test
pop
popf
mov
scas
xor
xchg
add
lods
add
lock
xor
jecxz
je
iret
adc
dec
out
imul
je
iret
sub
xchg
fdiv
outs
jle
fldenv
sub
pop
dec
push
push
inc
or
add
dec
test
and
pop
je
dec
or
cwde
pop
jae
mov
cwde
xchg
xor
push
xchg
cmp
pop
data16
xchg
hlt
jb
cwde
scas
cmps
add
inc
test
mov
stos
pop
jns
and
and
cwde
lds
mov
cwde
jno
push
pop
retf
dec
push
cmp
mov
scas
jl
xor
add
ss
push
push
cmp
jb
lods
mov
iret
stc
adc
dec
pop
cs
xchg
fadd
ins
inc
sbb
aad
pushf
fcomp
inc
loopne
arpl
out
int3
mov
cld
and
inc
add
(bad)
scas
addr16
rol
pushf
int
(bad)
fimul
test
hlt
scas
pop
add
arpl
leave
adc
pop
jl
mov
jns
and
clc
sub
clc
pushf
movs
jg
jns
ficom
or
mov
in
pop
scas
ins
(bad)
je
sub
dec
pop
jbe
nop
add
xchg
clc
or
cmp
scas
xchg
jmp
popa
cmp
dec
sub
inc
sub
xchg
cwde
cli
daa
dec
xchg
sbb
mov
xor
cwde
cmp
push
arpl
mov
xor
xor
mov
mov
cwde
sbb
jb
xchg
sbb
cmp
xchg
cdq
fidivr
xor
inc
pop
lods
in
mov
sbb
outs
ja
fidiv
ds
pusha
jecxz
add
xchg
shl
pop
ins
jl
mov
dec
ds
dec
push
inc
or
mov
cwde
int
cmp
mov
xchg
arpl
add
jno
shr
add
cli
sbb
mov
addr16
(bad)
(bad)
lds
mov
pop
sub
ja
jp
and
xchg
mov
cwde
fmul
ror
stos
mov
xchg
jg
push
call
xchg
es
sbb
cmp
and
xchg
dec
cwde
es
sti
ret
xchg
out
or
pop
push
clc
pop
lock
push
dec
xchg
or
in
in
inc
(bad)
mov
mov
je
xchg
pop
addr16
mov
mov
clc
enter
push
ja
dec
push
pop
cmp
dec
arpl
add
xor
mov
pusha
xchg
bound
jns
retf
outs
push
int
das
push
je
out
shl
pop
xor
shl
adc
js
imul
xor
xchg
cs
mov
pop
xchg
adc
sbb
mov
js
jns
outs
nop
imul
jb
rcl
stos
movs
and
mov
aaa
das
pop
test
fild
mov
jecxz
(bad)
sbb
jge
test
pop
push
dec
(bad)
sbb
popf
sbb
xor
mov
add
ret
das
xchg
mov
icebp
retf
dec
loop
daa
lods
ror
add
cwde
stos
jecxz
push
pop
cmp
data16
fsubr
jg
mov
and
push
test
outs
jl
xchg
xchg
jo
sahf
mov
enter
pop
loope
cwde
cmp
int
cwde
clc
and
push
into
neg
jno
icebp
rol
push
push
push
scas
clc
fimul
out
stc
cwde
fild
clc
cs
and
rcr
jmp
mov
pop
dec
fimul
int
cwde
xchg
clc
rcl
add
inc
repz
rol
jmp
xchg
jae
call
xchg
lock
fsub
xor
dec
pop
std
pop
cwde
sti
xor
aas
pop
fisubr
add
add
test
cdq
mov
jmp
mov
mov
inc
cs
in
stos
loopne
cwde
sub
add
pop
lahf
test
fcom
fbld
push
cwde
jns
mov
inc
push
and
cmps
mov
push
xchg
cwde
lock
outs
scas
movs
xor
sbb
and
xor
inc
or
mul
cwde
sub
rcl
shl
pop
ja
fsubr
js
push
mov
stos
jp
les
sub
aaa
(bad)
out
bound
pop
cwde
aam
xor
inc
jae
mov
xchg
shl
jo
and
sub
cwde
mov
or
dec
cwde
sbb
das
xor
out
leave
fsubr
inc
pop
fistp
inc
rcl
jle
bound
adc
mov
cwde
adc
rcr
xor
sbb
mov
stos
inc
adc
xor
jno
pop
out
test
adc
in
jo
and
sub
cmp
sar
cmc
mov
mov
test
out
fild
xchg
sbb
xor
or
add
ret
std
(bad)
xlat
and
pop
cwde
cmp
inc
shl
ins
ret
enter
loope
xchg
mov
in
scas
push
xchg
les
adc
add
shl
cmps
ret
jl
popa
call
xchg
out
add
adc
fmul
jmp
cmp
sahf
lea
mov
cwde
outs
in
in
inc
mov
jbe
enter
push
push
mov
cwde
jne
pop
(bad)
add
loope
in
test
outs
pop
stos
mov
cwde
pop
hlt
jno
test
int3
call
add
adc
jne
movs
in
repnz
fdiv
or
jle
jg
jne
cmps
dec
cmp
pop
cwde
mov
movs
mov
adc
dec
mov
mov
pop
cs
xchg
leave
cwde
jl
pop
push
inc
dec
outs
push
mov
adc
cwde
test
clc
ficomp
(bad)
sar
enter
mov
out
cwde
or
das
lahf
push
clc
int
add
xchg
inc
aad
and
lods
mov
mov
pop
jmp
sub
inc
pop
les
repnz
xchg
shl
inc
ficomp
outs
in
gs
cwde
call
push
sub
mov
ins
out
lods
pop
push
and
or
mov
popa
lods
or
lahf
sub
ins
arpl
movs
js
out
fidiv
je
mov
jbe
xchg
popa
push
loopne
jecxz
leave
ds
cwde
pop
sub
(bad)
les
test
cmp
sub
cmp
test
add
sbb
sbb
ret
fs
mov
into
scas
loop
cmp
sbb
cwde
xchg
test
fwait
imul
ins
add
cmp
sbb
lods
add
xchg
jp
popf
jo
sbb
hlt
ret
pop
test
in
mov
cwde
mov
hlt
out
loop
mov
(bad)
rcl
test
cwde
lock
xor
cwde
jbe
xor
cwde
sub
cmc
shr
scas
sub
shr
pop
pop
jns
xchg
xchg
pop
les
retf
lock
pop
mov
inc
push
mov
and
mov
rol
or
ds
call
adc
imul
jl
cwde
jle
jge
jb
dec
scas
inc
cli
sbb
dec
loopne
jecxz
cwde
pop
es
push
stos
xor
out
cwde
and
xor
test
cdq
scas
push
mov
push
leave
or
sbb
mov
into
xchg
rcl
adc
jmp
mov
jle
dec
cwde
aad
in
shr
popa
sbb
scas
in
cmp
repz
mov
js
mov
loope
and
hlt
xchg
mov
cwde
mov
imul
add
push
dec
add
cmp
adc
cwde
jae
int
lock
repz
dec
push
loope
cwde
fdivr
out
xor
mov
loopne
retf
popf
pop
out
adc
call
fdivr
imul
cmp
sbb
jp
cmps
mov
fdivr
sub
xchg
and
ret
int
push
mov
ficom
(bad)
das
pop
and
cld
or
std
xchg
mov
cwde
movs
or
aad
nop
add
fsub
popa
cmp
dec
dec
pop
add
das
xchg
test
stc
cmp
stos
stc
in
xchg
test
call
adc
mov
inc
push
call
xchg
sbb
pop
shl
outs
cwde
jb
(bad)
mov
mov
je
ins
js
sbb
jmp
ins
pop
xchg
add
lods
stc
or
mov
adc
mov
inc
xchg
test
movs
(bad)
(bad)
cmp
add
sub
push
inc
outs
mov
push
xlat
in
pop
pop
jnp
xchg
ja
neg
fdiv
cmp
push
(bad)
cmp
cwde
sti
fadd
jae
inc
push
cwde
pop
jmp
jmp
pop
je
stos
jns
xchg
call
add
dec
ja
dec
pop
mov
xchg
push
xchg
arpl
ret
xchg
sbb
sub
adc
xchg
mov
pop
xchg
and
mov
or
lods
inc
test
popf
rcr
out
and
push
xor
out
js
adc
sbb
into
add
inc
xchg
push
je
push
fld
jo
xor
ja
pop
test
pop
jns
scas
mov
adc
push
and
mov
adc
cwde
jnp
lahf
sbb
outs
or
mov
movs
xchg
test
sbb
sbb
sub
jb
sub
enter
push
xchg
jle
inc
fld
lds
aas
add
stos
in
adc
ss
push
jo
jg
imul
test
jbe
inc
dec
mov
add
xor
es
xchg
pusha
dec
push
cwde
outs
je
sahf
test
daa
xor
push
push
xor
xchg
xchg
cmp
cmp
push
xor
fadd
dec
popa
mov
cwde
mov
ja
retf
inc
cld
sbb
add
mov
push
xor
xchg
stos
cmp
adc
jnp
das
loope
sub
adc
adc
fsubr
mov
mov
adc
hlt
ror
ss
call
mov
cmps
test
leave
cwde
and
push
(bad)
xchg
pop
imul
mov
cmps
pop
ja
add
and
(bad)
outs
sub
push
addr16
cmc
call
inc
xchg
xor
push
lds
and
mov
dec
add
xchg
out
into
in
xor
cwde
jp
pop
inc
pop
das
xchg
outs
cwde
shr
test
jecxz
in
xor
add
call
ss
adc
(bad)
sbb
js
push
pop
cwde
ins
(bad)
fmul
aam
aad
cwde
ror
bound
scas
retf
leave
call
sub
inc
add
outs
jae
fmulp
sbb
mov
imul
jl
pop
sbb
cdq
dec
ds
lock
xor
addr16
rol
xchg
sbb
pop
stc
adc
ins
dec
mov
test
call
mov
xor
xor
out
mov
dec
cli
cwde
xchg
mov
in
sahf
and
cs
ss
mov
cwde
cmp
mov
sahf
outs
lock
xchg
adc
(bad)
out
sub
sti
xchg
cmp
jmp
inc
lahf
xchg
fs
cmp
dec
loope
js
movs
cmp
mov
mov
cwde
and
repnz
fld
dec
jg
ss
xchg
clc
mov
jp
fnsave
adc
push
les
xchg
mov
retf
clc
or
and
mov
mov
push
sahf
popf
push
call
idiv
fnstcw
les
cdq
je
adc
int3
loop
shl
push
pop
and
mov
jp
jmp
sub
xchg
bound
pop
jae
mov
lock
hlt
sub
les
mov
mov
xlat
adc
or
test
adc
int3
retf
adc
xchg
add
cmp
jp
add
fcomp
cmps
and
jnp
xor
cwde
push
sub
or
stos
test
(bad)
enter
pop
fld
out
fist
inc
mov
test
cdq
stos
adc
loop
xor
call
shr
xchg
js
fcmovu
jo
cwde
add
in
pop
fwait
lods
adc
sub
test
inc
test
xor
add
add
xchg
std
jns
daa
or
mov
xchg
mov
cwde
lahf
adc
iret
out
pusha
or
xor
adc
fucomp
outs
retf
xchg
add
inc
jle
ds
inc
push
imul
repnz
cwde
fs
pop
mov
cwde
dec
cli
ret
xlat
in
loop
xchg
push
scas
data16
into
dec
test
and
dec
stos
ror
xchg
jg
cmps
push
lods
dec
test
icebp
lahf
xchg
and
xchg
aaa
mov
push
xlat
movs
outs
clc
inc
(bad)
push
pusha
pop
or
data16
and
clc
or
mov
dec
jbe
rcl
jae
cmps
inc
std
inc
mov
es
mov
xchg
sbb
push
shl
js
add
xchg
setno
cdq
enter
fdivr
in
push
into
pop
and
out
cmp
(bad)
xchg
fadd
(bad)
mov
call
leave
js
dec
sub
imul
fwait
xchg
fs
cli
iret
(bad)
aam
xchg
loopne
dec
fisttp
sar
and
sub
cdq
fbld
adc
add
push
cwde
push
sub
lods
sbb
lahf
lods
out
push
pminsw
pop
call
sar
mov
mov
jle
push
retf
(bad)
fcom
cmp
pop
gs
fdivr
out
or
clc
test
lods
xchg
test
fistp
add
clc
xchg
jne
mov
dec
scas
push
dec
ret
lahf
sub
ss
lods
addr16
inc
pop
mov
xchg
cs
sub
mov
mov
icebp
fdivp
mov
adc
sbb
cli
shr
stos
mov
xchg
movs
pushf
js
enter
pop
imul
sub
cwde
sahf
dec
stos
mov
out
cmp
jno
out
into
(bad)
mov
sub
dec
mov
inc
(bad)
fs
cwde
loopne
clc
test
fidivr
sbb
pop
sub
jbe
push
mov
cwde
stc
adc
in
xchg
jb
inc
mov
jmp
in
gs
je
stos
scas
popa
adc
mov
aad
xchg
pop
in
data16
mov
int3
push
cmp
loopne
sbb
dec
mov
test
cwde
sbb
mov
sti
lods
inc
pop
adc
pop
mov
adc
xchg
test
repz
rcr
xchg
call
sbb
out
cli
ret
mov
pop
ins
jnp
cwde
push
adc
mov
jmp
mov
mov
dec
js
into
fadd
cwde
xor
push
or
cwde
xor
clc
add
add
add
cli
mov
call
dec
xchg
push
sub
sbb
sbb
jmp
xchg
leave
scas
lock
and
inc
cwde
dec
sub
push
and
jne
test
mov
mov
xchg
push
jo
arpl
in
push
cwde
cmp
pop
rcr
sub
sub
xchg
mov
fdivr
sbb
pop
jmpw
xchg
test
push
jns
repz
jmp
jge
ds
mov
mov
test
lods
cwde
mov
dec
shl
loop
cwde
xchg
push
adc
push
movs
lods
cdq
add
cwde
les
ins
aam
mov
xchg
xor
cmp
and
je
cwde
mov
jb
popf
cmc
and
add
int
imul
cwde
in
add
or
arpl
jp
outs
or
or
mov
mov
cmp
xchg
cmp
movs
xlat
push
push
sbb
inc
pop
and
adc
push
sub
xchg
test
leave
sub
iret
stos
test
aam
cmp
xchg
repz
mov
rol
rcl
cmp
jnp
adc
mov
je
or
cwde
gs
pop
loope
xor
mov
mov
xor
xchg
sbb
(bad)
cmp
mov
ins
test
mov
add
xchg
enter
cs
dec
into
clc
xchg
in
in
sbb
adc
sar
nop
aas
add
ja
dec
cli
ficomp
rcr
xlat
push
inc
outs
xchg
jb
sub
sbb
pop
pushf
in
mov
mov
xor
call
mov
pop
xchg
imul
and
sub
cwde
jnp
mov
ret
shl
xchg
sbb
std
js
sbb
cwde
not
xor
outs
ss
cwde
mov
hlt
shl
sub
xchg
repnz
imul
cmp
jp
movs
jnp
fcomp
push
sbb
out
enter
add
outs
pop
push
inc
sub
cmp
xchg
jo
stc
dec
int3
movs
push
(bad)
sbb
cmp
pop
es
cmp
scas
pusha
xchg
push
cmp
out
pop
sbb
mov
movs
sub
sbb
add
rcr
in
jnp
cdq
fisubr
test
cwde
push
out
sub
dec
retf
cwde
(bad)
fadd
jle
mov
enter
imul
mov
rcl
fucomi
retf
push
push
jb
xchg
jmp
pop
jge
fnstcw
cwde
ret
and
adc
xchg
mov
fisub
fsub
cwde
add
lea
mov
xchg
je
inc
jecxz
mov
xor
test
push
pop
cmp
xchg
or
adc
in
cwde
inc
or
(bad)
inc
lods
or
jnp
xchg
mov
add
out
in
shr
stc
mov
xchg
sub
dec
pusha
or
cmps
xchg
mov
std
mov
jne
fsubr
into
stos
popf
jmp
call
das
xor
hlt
and
adc
cwde
pop
loop
mov
lods
(bad)
pop
cwde
cs
jo
jb
adc
loope
pop
or
sub
sbb
adc
or
iret
mov
jne
das
jl
repnz
or
outs
jl
fs
test
xor
jmp
stos
ret
repz
add
jbe
js
or
cmp
(bad)
cwde
mov
inc
jbe
fsub
dec
xchg
xchg
xor
add
adc
lock
push
out
pop
or
xchg
mov
lods
push
shl
arpl
jo
pop
or
dec
xor
pop
clc
add
enter
and
aad
movs
loope
sti
into
push
ins
cwde
add
(bad)
loop
xchg
cwde
arpl
sbb
fadd
pop
dec
sub
pop
pop
in
loope
sub
sar
cld
adc
push
sbb
cmp
mov
push
fwait
bound
das
inc
push
(bad)
(bad)
and
xchg
cmp
or
aam
xchg
mov
or
popa
mov
mov
xchg
ins
dec
cwde
mov
adc
data16
add
push
in
cwde
adc
mov
and
push
leave
(bad)
and
cmps
lods
shl
retf
sbb
cmp
cwde
js
(bad)
rcl
xchg
aaa
int
jl
xchg
outs
xor
fmul
loope
pop
(bad)
(bad)
pop
jmp
push
inc
out
cdq
cwde
std
lods
cmp
outs
cwde
js
mov
idiv
test
popa
bound
cdq
retf
nop
cld
inc
sbb
faddp
sahf
lea
enter
clc
or
add
xor
aam
cmps
rcl
call
jns
sbb
retf
(bad)
cwde
rcl
fadd
cwde
stos
mov
inc
push
xchg
pop
es
sub
pop
(bad)
pusha
fild
xchg
jl
out
ror
lods
adc
or
add
pushf
enter
dec
mov
pop
dec
loopne
jg
cwde
(bad)
mov
jecxz
adc
arpl
jns
cld
daa
or
push
mov
add
sub
pop
mov
mov
pop
in
push
pop
ins
sti
jecxz
cwde
loop
xor
cdq
cmp
rol
cwde
or
mov
cwde
scas
movs
int3
push
or
xor
sti
fldcw
mov
xor
xchg
(bad)
fucomp
xchg
shl
clc
dec
push
cwde
call
pop
test
adc
cwde
into
jp
mov
sbb
push
pop
mov
push
out
sbb
addr16
push
lahf
mov
(bad)
adc
or
xchg
in
and
pop
pop
xchg
jmp
mov
fisub
retf
inc
cwde
cdq
inc
mov
pop
fidivr
or
xor
retfw
les
stos
pop
push
test
ja
cwde
mov
sti
mov
hlt
xchg
sar
call
push
jg
cmp
push
pusha
data16
stos
and
xchg
push
add
sub
js
mov
pop
nop
int3
mov
inc
stos
mov
test
pop
xchg
xor
data16
cwde
test
lahf
adc
xchg
cwde
xor
vmwrite
retf
movs
push
inc
jmp
xor
lods
ss
cwde
cmc
bound
pop
sbb
jmp
(bad)
inc
sbb
cmps
and
xchg
les
mov
je
push
sti
ins
ret
rol
out
jle
ja
pop
jg
outs
fs
adc
push
mov
clc
fld
call
fs
xor
in
pop
sbb
or
xor
jge
pop
dec
push
xchg
cmp
ficomp
fsubr
cmps
pushf
cdq
outs
lods
mov
retf
(bad)
add
into
push
cmp
ret
and
imul
std
cwde
int3
add
adc
lods
repz
jae
mov
inc
inc
aaa
pusha
mov
std
cmp
addr16
mov
cmp
or
and
shl
adc
xor
mov
std
adc
dec
cwde
xor
jno
or
dec
shl
dec
cwde
cld
or
mov
aam
cwde
movs
jmp
lahf
cmp
pushf
jns
mov
ja
lahf
push
es
imul
imul
daa
sub
xor
dec
cwde
(bad)
cld
(bad)
ficomp
mov
sbb
cwde
into
mov
xchg
push
loope
pop
or
mov
dec
sub
fnstsw
loopne
shl
repz
cmps
adc
in
popf
cld
shl
xchg
popf
mov
sahf
daa
jmp
xchg
js
(bad)
jmp
mov
test
cmps
shr
ds
sbb
addr16
xchg
or
cmp
xchg
cdq
xchg
ret
test
sub
cmps
ror
cmp
outs
in
cld
and
das
or
(bad)
scas
push
test
sbb
popa
clc
xchg
xchg
xchg
popa
xchg
and
cmp
adc
inc
dec
add
aad
jl
lock
ins
xchg
js
jle
test
adc
jp
ret
cmp
out
ins
iret
cwde
mov
jecxz
push
cwde
loopne
popa
sub
cli
cmp
test
sub
dec
xchg
pop
xchg
cmp
addr16
jbe
xchg
push
push
pop
jg
adc
inc
out
cmps
jmp
mov
imul
jae
aad
adc
adc
icebp
ret
sub
pop
sub
mov
lock
mov
iret
ror
imul
imul
cmps
call
pop
js
jbe
cwde
jle
stos
mov
add
enter
and
scas
inc
xchg
inc
hlt
cwde
sub
push
or
push
cwde
std
pop
rcl
or
aad
clc
push
cs
test
cmp
lods
mov
xchg
jge
mov
sbb
aaa
ja
ins
xchg
test
rcr
cwde
sti
or
sub
dec
pusha
arpl
ins
mov
cmp
mov
cmc
jecxz
pusha
out
sbb
cwde
aaa
xchg
sbb
pop
adc
adc
clc
jmp
(bad)
sbb
leave
push
jmp
inc
push
sub
scas
mov
pop
ins
imul
lods
cmp
mov
xor
lods
xchg
inc
push
jb
pop
jge
repnz
mov
(bad)
or
pusha
cmp
jmp
retf
push
inc
mov
cwde
xor
test
fs
pop
ficomp
outs
mov
mov
scas
inc
cwde
adc
nop
cwde
add
ja
and
sti
cmp
lods
aad
push
push
cwde
in
aas
gs
pop
call
dec
adc
xchg
fs
mov
mov
(bad)
mov
push
ja
xchg
and
ficomp
addr16
pusha
xchg
dec
push
(bad)
cwde
test
mov
pop
and
xchg
aas
jge
sbb
fwait
lods
xchg
cmp
ins
dec
pop
fcmovnu
add
sub
xchg
jg
mov
mov
add
adc
xchg
jg
iret
aas
aam
inc
lea
jno
add
xchg
jb
and
mov
jbe
push
xor
call
jo
aas
(bad)
loopne
mov
and
mov
inc
push
cmps
sub
sar
(bad)
(bad)
stc
push
cwde
fcmove
mov
outs
call
sahf
js
jp
cwde
fnsave
mov
repz
in
dec
fmul
sbb
aaa
push
xor
cmps
jmp
scas
cmp
cli
call
push
adc
sub
jae
sub
retf
adc
jo
sbb
in
in
out
retf
sub
adc
pop
stos
int
sub
cwde
sbb
inc
jp
push
stos
out
push
lods
or
xchg
pop
cmp
dec
pop
dec
add
popf
jo
test
sub
sti
int
in
inc
xchg
inc
jne
dec
loop
push
pop
dec
or
dec
xchg
xchg
xchg
data16
jo
mov
xor
or
cmp
xor
popf
cmc
out
push
dec
xchg
sub
dec
inc
test
enter
push
cmc
adc
sbb
mul
cmp
mov
outs
je
dec
xchg
xchg
jmp
mov
pop
sub
or
pop
cwde
or
mov
inc
jnp
xchg
jp
mov
sti
jmp
int
jns
pusha
cmp
cwde
lea
and
scas
retf
push
cwde
addr16
inc
xor
sti
inc
pop
jp
movs
mov
mov
push
mov
sbb
adc
mov
push
cmp
add
cwde
push
adc
int3
hlt
and
mov
loop
imul
cmp
sub
mov
push
sti
ja
stos
push
adc
repnz
rol
fsub
mov
add
add
mov
jo
push
aad
mov
int3
mov
jae
dec
out
mov
gs
mov
pushf
neg
xchg
cmp
fisubr
mov
mov
nop
cwde
pop
and
gs
pusha
cwde
cli
xchg
xchg
dec
mov
push
push
mov
dec
loop
inc
lahf
push
push
push
push
stc
leave
cmp
adc
push
into
fcom
inc
gs
adc
and
leave
cmp
push
and
push
call
pop
cwde
xor
scas
daa
cwde
aas
pop
ss
ds
lahf
add
(bad)
mov
adc
lahf
adc
and
jbe
adc
mov
xor
push
mov
jecxz
sbb
adc
int3
add
cwde
xor
out
sub
jg
cdq
gs
rcr
mov
sbb
das
or
jbe
push
xor
mov
dec
push
dec
test
dec
jbe
jmp
push
dec
pusha
in
cli
fld
jo
lahf
jo
mov
(bad)
ins
add
ss
es
pop
cmp
inc
pop
out
or
xchg
mov
sub
test
rcr
dec
push
stos
les
add
adc
cwde
xor
mov
cmp
or
sahf
add
xlat
xor
add
aad
imul
test
xor
cwde
xchg
loop
mov
mov
fwait
xchg
icebp
jmp
cmp
mov
arpl
mov
add
xor
mov
out
jle
aad
jl
dec
jae
pop
out
or
adc
mov
push
pop
push
inc
test
jl
mov
into
(bad)
cmc
enter
cld
add
cwde
push
test
mov
call
dec
imul
mov
xor
add
dec
xchg
pop
inc
addr16
xor
daa
jno
pop
and
sti
(bad)
cmp
ret
cwde
popf
pushf
push
cli
push
sub
int3
js
inc
rcl
test
ins
dec
bound
dec
adc
gs
lods
cmp
mov
adc
cmp
xchg
push
retf
mov
arpl
inc
cmp
add
and
inc
cmp
cwde
xchg
addr16
lea
mov
jb
loopne
cmps
adc
lahf
fiadd
cmp
retf
fstp
push
xchg
aas
xchg
dec
int3
test
clc
sbb
xor
popf
lahf
inc
jmp
retf
mov
xchg
clc
push
scas
icebp
test
jl
mov
add
and
mov
pop
mov
aaa
mov
ss
stos
xor
mov
data16
xchg
std
fcom
inc
add
and
mov
cmp
inc
mov
test
sbb
or
outs
fwait
ins
shr
push
pop
dec
mov
fiadd
iret
jmp
(bad)
and
inc
jg
das
in
pop
sub
ja
inc
push
retf
mov
mov
xchg
into
push
and
aas
pop
mov
inc
and
cld
(bad)
jae
loopne
fnsave
mov
pop
bound
mov
lods
gs
std
test
retf
mov
push
mov
fnsave
out
les
rcr
xchg
addr16
pop
and
xchg
mov
pop
clc
and
mov
lock
jmp
out
sbb
cmp
pop
pop
sub
cmps
mov
sub
not
fisubr
mov
int3
pop
xchg
hlt
ret
push
pop
sub
fprem
int3
cmps
push
mov
and
mov
cwde
xchg
outs
enter
sub
cwde
adc
inc
ss
arpl
inc
or
retf
dec
test
xor
std
fadd
cli
ret
or
pusha
adc
out
xchg
and
dec
lods
popa
ja
in
dec
fwait
cmp
outs
fisub
dec
pop
sti
fadd
retf
jg
sbb
push
jge
jbe
dec
gs
xchg
mov
xor
push
cmp
fs
mov
(bad)
rcl
mov
retf
push
mov
mov
inc
pusha
mov
and
fs
in
mov
mov
inc
stc
sbb
mov
test
dec
xchg
cwde
cmp
fld
xchg
cwde
out
sbb
sbb
div
(bad)
lahf
outs
jbe
lock
jp
clc
sbb
xor
mov
push
inc
cwde
push
je
pop
cmp
gs
mov
mov
mov
pop
loopne
sbb
pusha
fimul
sti
test
mov
xchg
pushf
pop
int3
jge
rcr
fwait
mov
cmc
fucom
sbb
jbe
popf
(bad)
cmps
pusha
and
dec
int3
jmp
xchg
sub
adc
lods
cs
jge
jns
mov
lods
pop
test
xchg
ins
stc
not
test
mov
push
and
fidivr
cwde
and
pop
cwde
cmp
cmp
mov
enter
int3
mov
sub
popa
ja
test
xchg
xor
push
aaa
ss
aas
dec
test
add
mov
int
shl
dec
mov
xlat
xchg
repnz
movs
cwde
pop
scas
jo
in
mov
jmp
(bad)
mov
push
rcl
loope
or
popf
jns
test
pop
popa
pusha
(bad)
fistp
cmp
test
adc
xor
mov
pop
popa
xchg
mov
lods
sub
fs
mov
ins
mov
and
jae
dec
nop
or
sbb
xor
inc
dec
clc
enter
stc
xchg
fdivr
xchg
in
inc
mov
stos
and
xchg
and
inc
popa
jno
test
and
push
push
ins
push
adc
push
rcl
jae
rcl
pusha
mov
jno
arpl
add
mov
test
popf
inc
test
and
rcl
xchg
sbb
fmul
stos
je
cwde
sub
adc
std
dec
pop
cwde
sbb
dec
mov
imul
push
pop
sub
dec
loopne
push
mov
or
sbb
pop
xchg
pop
push
pop
imul
lods
mov
retf
movs
loope
leave
cwde
push
dec
rcl
or
mov
popf
fisubr
ficomp
mov
xlat
outs
cli
movs
jle
sbb
xor
mov
loopne
in
lds
jno
shl
and
sub
jle
jecxz
mov
sti
dec
(bad)
outs
push
fsub
cmps
outs
cwde
pushf
mov
mov
clc
and
and
(bad)
mov
xchg
xor
xor
jg
enter
add
pop
xor
scas
mov
mov
and
retf
clc
rcr
sbb
ficom
sub
add
fdiv
in
fcomp
mov
and
pop
adc
pop
test
retf
into
inc
cwde
or
out
pop
frstor
(bad)
dec
mov
outs
cwde
xor
mov
and
jo
mov
mov
xlat
mov
xchg
lods
mov
(bad)
jp
lock
or
ins
test
or
jmp
(bad)
js
and
cwde
stos
data16
xchg
or
jae
cmc
jo
mov
xchg
mov
adc
(bad)
mov
dec
and
sbb
cwde
jle
lds
add
das
test
ins
je
mov
mov
cwde
jmp
jecxz
cwde
jge
pop
test
pusha
imul
jno
iret
adc
jmp
fdivr
(bad)
pop
pushf
loop
sbb
or
lock
icebp
and
imul
dec
mov
call
(bad)
mov
jge
aad
mov
adc
mov
ret
pop
arpl
xchg
outs
pop
cld
mov
les
xor
cmc
stc
ret
(bad)
clc
into
sub
cwde
cmp
mov
daa
push
xor
cmps
inc
data16
scas
out
or
test
dec
push
and
xchg
jp
jns
repz
jle
or
cwde
popf
test
push
mov
add
mov
jnp
or
dec
pop
or
jp
xchg
mov
ins
outs
xchg
mov
dec
stos
test
adc
std
xor
scas
imul
jecxz
pop
cwde
or
xor
push
fimul
inc
xchg
push
sub
lea
xor
cwde
mov
mov
cmp
bound
push
cwde
cmp
lock
sahf
int3
ficom
and
lods
cwde
cmps
jecxz
out
jl
cwde
push
push
pop
and
jp
inc
js
xchg
and
dec
mov
mov
push
inc
shr
(bad)
loope
cwde
ret
inc
mov
out
and
addr16
sbb
(bad)
fpatan
and
sub
daa
mov
(bad)
jg
mov
push
lods
or
dec
jl
xchg
imul
or
cmp
cs
sub
popf
fs
jl
cdq
push
mov
leave
mov
dec
mov
pop
fldcw
fwait
jmp
cwde
jl
cdq
mov
ficom
add
sbb
(bad)
pop
jo
or
call
jmp
jmp
int
ret
shr
push
test
loopne
adc
mov
sub
push
lods
fisub
int
xchg
adc
push
and
inc
pop
and
arpl
clc
pop
fild
mov
shr
jp
int3
jbe
loop
leave
or
mov
mov
cmp
xchg
js
push
xlat
mov
cwde
jg
jo
dec
out
rcr
out
and
xchg
mov
aad
and
cmp
cwde
mov
adc
add
fs
into
test
sub
xchg
test
scas
test
push
mov
xchg
(bad)
sahf
mov
dec
and
pop
push
mov
(bad)
cmp
aam
retf
movaps
cwde
mov
fwait
cdq
fcmove
jg
inc
dec
jl
push
sub
mov
mov
hlt
xor
dec
mov
aad
ss
xchg
xor
mov
cwde
in
bound
adc
ret
(bad)
in
retf
sbb
cs
mov
repz
fdivr
cwde
nop
sar
jle
jg
mov
sub
fild
pop
cmp
lods
lea
in
adc
add
xor
adc
xchg
sahf
sbb
das
adc
jg
shl
fcom
cmp
or
out
into
call
scas
mov
push
jae
mov
xchg
cmp
rcr
sti
or
mov
add
sbb
outs
movs
mov
cmc
or
cld
cwde
dec
cs
or
enter
xchg
enter
inc
xchg
in
sahf
fld
int
pop
es
adc
dec
lahf
test
(bad)
pushf
popa
mov
xchg
inc
cwde
ss
inc
sub
ret
push
pop
dec
loope
cwde
or
adc
pop
xchg
(bad)
sar
inc
(bad)
int3
repz
cdq
add
imul
cwde
add
xchg
mov
cdq
pop
jbe
es
adc
inc
push
imul
adc
xchg
push
aas
add
movs
fucom
xchg
iret
push
adc
pop
ret
pop
imul
retf
jbe
out
add
(bad)
imul
xchg
pop
push
int3
xchg
pop
pushf
sbb
adc
arpl
in
stc
test
shl
push
cwde
pop
mov
adc
sti
jbe
push
pop
sub
call
cwde
movs
nop
out
push
mov
popa
cmp
jge
adc
div
(bad)
out
inc
cs
ja
dec
pusha
mov
dec
cwde
(bad)
movs
mov
xor
and
retf
sbb
pop
aam
sub
sahf
out
xor
dec
popf
popf
addr16
mov
std
adc
jns
lahf
je
fdivr
jnp
cmc
fdiv
and
adc
cs
loope
lods
test
(bad)
sub
fwait
mov
jnp
inc
mov
call
mov
cmps
mov
sahf
cwde
jp
shl
cmc
aas
mov
xchg
lock
inc
cs
sub
xchg
sbb
cmp
cwde
in
fld
xor
jnp
adc
call
cmps
push
xchg
cmp
lock
leave
ror
pop
outs
mov
ret
push
scas
pop
pop
cmc
adc
shr
or
push
ret
idiv
aam
xchg
movs
loope
inc
cwde
pop
inc
sub
mov
push
add
pop
clc
dec
das
popa
cmp
xor
mov
shl
push
repnz
dec
pushf
inc
cmps
mov
in
ret
popf
and
prefetcht2
xchg
outs
pop
test
fcomp
cmp
add
lods
movs
mov
clc
into
mov
lock
js
cwde
loopne
adc
nop
cmp
pusha
mov
pop
retf
sbb
and
add
mov
mov
or
out
sbb
out
cmp
jbe
fmul
fistp
and
rcl
cmp
adc
push
mov
js
jne
mov
xchg
ror
js
jb
mov
and
cwde
jbe
mov
pop
cli
push
mov
and
and
fcomp
sbb
enter
shr
in
lds
cwde
not
mov
hlt
pop
cld
dec
stos
ss
mov
(bad)
leave
jb
cmp
inc
cwde
into
rcr
cmps
xor
jmp
sub
cmp
outs
cmp
adc
loop
mov
dec
int
cwde
push
loope
push
lahf
xchg
fs
add
push
pop
mov
fbstp
push
gs
outs
js
ins
jl
outs
rcr
cwde
outs
xchg
pop
les
repnz
add
cdq
adc
(bad)
test
mov
jg
test
cld
daa
dec
fcomp
xchg
mov
sbb
scas
iret
fdiv
fsubp
clc
sub
xchg
addr16
ror
fcmovbe
push
aas
stc
xchg
mov
mov
popa
pop
stos
and
mov
jnp
cmps
mov
pop
mov
ja
mov
xchg
sub
loopne
sbb
(bad)
aam
mov
hlt
stos
mov
or
and
imul
mov
inc
outs
jge
mov
(bad)
inc
cmp
sub
pop
sub
stos
ss
xchg
stc
into
es
sbb
adc
imul
mov
cmp
sub
pop
xchg
mov
sub
or
inc
mov
adc
dec
(bad)
mov
push
outs
sub
test
ins
jmp
jns
lock
adc
inc
pop
sbb
imul
jecxz
cwde
or
xchg
loopne
aaa
mov
cwde
stos
aaa
pop
(bad)
out
cwde
push
out
in
xor
jl
cwde
ds
pop
and
out
adc
inc
movs
pushf
loop
dec
pop
cwde
std
sti
mov
and
(bad)
sub
xchg
push
pop
and
js
pop
sahf
mov
jl
aam
or
fld
xchg
sbb
sbb
in
pop
std
cwde
cmp
mov
jmp
jmp
sub
mov
xchg
jnp
xor
not
add
stc
inc
sti
adc
inc
mov
cwde
dec
sub
pop
jo
pop
cmp
cwde
scas
push
mov
lahf
add
pop
fldenv
or
mov
push
movs
xchg
fisubr
int
adc
sbb
xor
test
xchg
pop
cmp
or
adc
ret
mov
stos
repnz
sbb
rcr
mov
push
loop
push
mov
mov
sub
xchg
outs
jb
jo
mov
js
dec
push
xchg
jns
mov
dec
outs
jbe
jo
mov
xchg
mov
ins
xchg
mov
mov
mov
sbb
add
pop
out
sbb
mov
adc
js
push
sbb
test
aas
add
jl
loopne
xchg
sbb
cwde
scas
lock
xchg
cwde
jb
xor
cmp
call
push
push
dec
fistp
sbb
pop
mov
(bad)
(bad)
leave
fbstp
add
cs
xchg
int3
push
icebp
xor
xchg
sahf
push
push
pop
or
in
push
xchg
sar
shr
cwde
popa
jns
push
enter
scas
pop
xor
call
mov
mov
cwde
sar
sbb
xchg
mov
jmp
push
jnp
mov
push
mov
or
xlat
iret
js
dec
popa
mov
sbb
mov
inc
push
xor
cmp
adc
test
popf
in
imul
sub
addr16
into
movs
dec
icebp
lds
add
cwde
jg
pusha
cmp
xchg
mov
movs
mov
jns
add
and
xor
cwde
jmp
loopne
dec
cwde
aaa
sbb
arpl
call
test
inc
mov
sub
and
xchg
in
push
mov
icebp
pop
dec
scas
arpl
mov
icebp
fisttp
or
inc
mov
test
fs
fcom
push
pop
pop
scas
push
jo
mov
into
fld
xchg
mov
mov
and
push
cs
(bad)
imul
test
lahf
(bad)
gs
aaa
mov
outs
bound
sub
test
in
xchg
fild
stos
jmp
cwde
cli
outs
jae
xchg
test
xchg
fsubr
ret
mov
cmps
jg
xor
sbb
sub
inc
int3
rcl
into
xchg
repnz
mov
cmp
xchg
dec
out
xchg
adc
sbb
call
and
cs
pop
fstp
adc
pop
adc
mov
jmp
pop
sub
(bad)
cld
mov
in
lahf
xchg
fldcw
mov
loop
xor
cmp
not
pop
dec
pop
cdq
dec
test
xchg
frstor
pop
mov
xchg
cs
add
pop
mov
rsqrtps
push
sbb
cmps
push
imul
sbb
inc
xor
xchg
jle
mov
pop
daa
push
sub
dec
aam
int
sub
adc
cwde
leave
fcom
mov
out
pop
cwde
in
mov
adc
pop
pop
pop
aam
fcmovb
xchg
adc
fsubr
cmp
fisttp
adc
fcmovnb
jo
retf
xchg
inc
test
add
rcl
mov
mov
les
and
sahf
enter
adc
mov
fcom
scas
cs
pop
cmp
ficomp
in
or
pop
and
loop
xchg
pop
es
mov
push
fsubr
out
jge
fs
xor
inc
push
mov
xchg
sbb
cmp
clc
movs
pop
sub
cmp
xor
mov
aad
sub
add
popf
lock
(bad)
icebp
xor
sbb
imul
in
cli
iret
pop
call
dec
pusha
push
inc
ds
jle
scas
and
cld
xchg
lds
adc
cmp
mov
imul
(bad)
jecxz
jmp
mov
add
popf
xchg
aaa
call
add
das
imul
pusha
xchg
jne
dec
pop
jbe
mov
sub
cmp
bound
dec
push
fsub
mov
(bad)
outs
jmp
lahf
mov
sbb
lods
jle
cwde
cmc
jo
pop
pop
popf
xor
and
jmp
xchg
pushf
push
aaa
push
fs
outs
mov
test
arpl
sahf
nop
push
add
stos
sahf
mov
jns
pop
jg
jmp
std
lock
adc
retf
fdiv
or
and
dec
ins
sub
and
push
push
pushf
fild
fstp
(bad)
call
neg
stos
sbb
lahf
gs
cmp
ret
lock
or
jecxz
sub
dec
xchg
cmps
mov
dec
jbe
sbb
cwde
imul
xchg
mov
dec
hlt
int
test
xor
outs
cwde
xchg
pop
push
mov
imul
xchg
dec
in
fwait
lahf
pusha
cmp
push
jae
dec
sbb
and
push
std
sub
cwde
jno
xor
or
pop
mov
jecxz
fmul
mov
fsubr
inc
lods
push
sbb
sbb
sahf
mov
or
cmps
sub
inc
lea
lahf
sbb
enter
push
je
sub
repnz
pop
xor
out
pop
mov
sbb
cwde
test
mov
into
data16
xchg
ins
dec
stos
mov
jl
call
mov
mov
sub
call
sbb
sub
gs
loopne
xchg
test
loope
ins
ins
mov
in
je
jmp
sub
ret
fcom
popa
jle
mov
xchg
sbb
and
mov
add
add
sub
dec
pop
(bad)
sar
jmp
bound
cwde
out
lahf
add
and
test
ds
cmps
or
cmp
adc
sub
add
mov
jo
adc
lock
xchg
ins
mov
jo
lahf
imul
aas
add
into
imul
xchg
or
push
and
enter
enter
cld
cmp
and
or
pushf
add
xor
fst
aam
cmp
cmp
data16
rol
push
in
xchg
jmp
xchg
arpl
dec
pop
sub
jl
mov
cs
sbb
jl
cwde
adc
and
push
sub
test
pop
cmp
fld
enter
int3
rcl
dec
js
add
xchg
push
xor
pop
cwde
data16
sbb
loope
pop
adc
cmps
rcr
mov
inc
popa
mov
mov
out
loope
sub
xchg
lods
xchg
mov
xor
dec
int
jns
adc
cwde
(bad)
mov
ret
cli
push
pusha
bound
call
icebp
les
retf
xchg
das
call
sahf
cwde
push
mov
or
push
sbb
mov
js
dec
cwde
into
and
lahf
sbb
pusha
hlt
add
fwait
shr
call
imul
sub
(bad)
inc
es
outs
ins
cli
xchg
mov
push
test
push
rol
aas
mov
lds
stos
mov
loope
neg
out
icebp
mov
push
out
repz
nop
inc
call
int
and
jns
(bad)
lock
push
scas
push
clc
add
stos
repnz
cwde
add
popa
xchg
stc
outs
scas
cwde
adc
and
cmp
ret
sbb
xchg
adc
je
mov
mov
addr16
xchg
jge
xchg
scas
mov
in
in
xchg
dec
arpl
je
leave
mov
in
cmp
cwde
test
mov
mov
adc
pop
and
xchg
scas
popf
mov
dec
(bad)
cwde
fsubr
pop
and
add
fisubr
jmp
sbb
jns
adc
sub
and
fadd
inc
cs
jo
mov
dec
xchg
push
and
rcl
cwde
in
pop
mov
and
daa
inc
enter
ins
cwde
leave
test
sbb
xor
bound
mov
mov
sub
pop
and
ret
clc
adc
inc
(bad)
mov
ja
inc
sub
hlt
ss
xchg
or
int3
and
xchg
pop
xchg
add
jnp
cmps
int
add
test
sbb
cwde
rol
xchg
adc
sbb
(bad)
ins
sub
cwde
mov
idiv
rcr
xor
hlt
and
js
and
pop
cwde
popa
repz
scas
cmps
sbb
or
je
xchg
fldcw
or
add
sbb
sbb
cmp
jmp
in
add
jmp
ins
test
jbe
xchg
xchg
lahf
ins
sbb
sbb
mov
leave
dec
repnz
ror
dec
push
jecxz
or
or
call
loope
inc
mov
cwde
cmp
and
xchg
jmp
ja
div
in
adc
imul
dec
cwde
add
stos
inc
pop
push
inc
mov
int
mov
mov
sbb
or
in
sbb
or
add
fsubp
imul
pop
inc
ficomp
mov
and
pop
dec
popa
jne
cwde
leave
ror
hlt
fnstsw
jmp
and
add
xor
jnp
xchg
(bad)
enter
ins
fimul
icebp
add
call
(bad)
das
inc
les
fiadd
push
cs
or
pusha
js
int
cwde
mov
cmps
aam
fsubr
aad
or
adc
jmp
push
xlat
dec
stc
sahf
push
xchg
cwde
sbb
inc
mov
push
les
fs
out
fs
cwde
das
icebp
and
pop
shr
cwde
lock
call
mov
imul
mov
not
or
push
ss
ins
jae
fsubr
call
cwde
repnz
add
lods
sbb
push
cwde
fst
outs
popf
cwde
lea
test
inc
xor
or
bound
rol
(bad)
add
aam
or
dec
sub
inc
jb
scas
mov
not
je
popf
mov
adc
bound
mov
jo
mov
stc
mov
push
or
inc
cmp
dec
mov
out
sbb
lods
xor
stos
mov
icebp
retf
fst
push
in
xchg
inc
sub
mov
es
jb
cwde
or
jae
sbb
adc
loope
jns
dec
xor
leave
bound
repz
aam
fsincos
cmp
and
dec
sbb
adc
mov
push
fldl2e
inc
xchg
popf
cwde
data16
sahf
xchg
mov
mov
mov
and
or
mov
cwde
sub
js
cmp
pushf
test
pop
and
nop
ds
stc
leave
sbb
push
add
push
fsubr
push
cdq
outs
das
inc
cmc
mov
fimul
pop
and
cld
push
cwde
dec
cmc
je
mov
mov
dec
pop
mov
dec
sub
xchg
ss
stos
sub
add
scas
cwde
dec
xor
mov
lahf
xor
dec
mov
adc
dec
dec
lock
push
fwait
cwde
pop
nop
fld
xlat
fsub
cwde
jne
cdq
fistp
sub
sub
cld
in
add
retf
pop
and
test
bound
pop
lock
rcr
scas
and
movs
cli
ins
ins
push
mov
jg
loop
jno
retf
fcom
or
sub
jbe
pop
icebp
cmp
cwde
and
push
ret
aam
push
in
repz
cmp
inc
adc
test
sbb
mov
add
sti
test
jl
xor
bnd
add
fisttp
retf
cmpxchg
pop
and
and
jmp
dec
pop
icebp
xor
and
cs
cwde
ja
mov
lock
pop
mov
push
es
mov
lods
mov
or
loope
xchg
out
rol
jo
sbb
mov
xor
sbb
sar
jbe
enter
inc
cmp
cdq
dec
and
xor
stc
mov
and
push
or
push
retf
sbb
jecxz
pop
call
(bad)
ss
pusha
shr
cs
out
or
sbb
inc
pop
jne
popa
js
jnp
push
shl
inc
out
or
or
pop
icebp
je
sub
int3
shr
ds
and
adc
std
fst
scas
(bad)
xchg
out
hlt
jnp
daa
adc
mov
jecxz
imul
out
repnz
push
mov
clc
inc
sub
inc
popf
mov
sti
lahf
sbb
cmp
xchg
add
dec
mov
call
ins
and
imul
ins
data16
mov
ret
cs
mov
xchg
mov
cld
mov
pop
es
popf
xchg
fst
ins
sub
sub
xchg
cdq
clc
add
les
xchg
xchg
call
sbb
imul
fistp
in
out
or
xchg
xchg
sbb
mov
jecxz
sbb
arpl
push
int
sbb
ss
lock
lods
int3
sbb
(bad)
call
mov
fisttp
loopne
or
cmc
mov
xchg
jbe
pop
ret
mov
xor
xor
adc
or
jmp
stos
sub
loope
ror
out
and
inc
push
inc
call
adc
fnstcw
cwde
push
jo
pusha
mov
pop
jne
cmp
jmp
js
je
out
shl
sbb
or
sub
xchg
dec
sub
sbb
pushf
pop
add
test
popf
retf
jge
repnz
push
cmp
mov
arpl
(bad)
dec
or
lahf
jl
jge
fdivr
push
test
test
mov
mov
out
cmc
sub
add
push
xchg
and
mov
mov
mov
mov
pop
inc
popf
sbb
inc
cmp
addr16
(bad)
fnstcw
aaa
or
xchg
mov
pop
mov
aad
aaa
mov
mov
jo
int
adc
fwait
ins
jo
ins
dec
cwde
mov
xchg
sub
or
sti
ficom
unpcklps
out
and
clc
xor
cmp
jecxz
out
xchg
out
outs
mov
jo
fisubr
cwde
jno
imul
cwde
inc
das
test
adc
cmp
hlt
cmp
pop
(bad)
and
pop
mov
push
out
or
shl
int
sbb
xor
jge
loope
fsubr
jne
clc
mov
stc
adc
jmp
sbb
sub
or
dec
enter
xchg
out
(bad)
std
sub
js
mov
mov
sbb
or
ret
enter
mov
add
and
xor
cwde
enter
jecxz
ins
add
jge
jl
lods
mov
and
js
mov
mov
call
retf
xor
jp
pop
stc
push
cwde
xor
mov
sbb
cwde
push
dec
push
jp
pop
add
out
cmp
xchg
adc
sub
dec
(bad)
fs
dec
in
xchg
adc
pop
jle
sbb
cmp
rol
cmps
pop
inc
jmp
dec
add
inc
pop
push
das
js
ins
jmp
(bad)
lods
xchg
or
dec
jbe
mov
sub
mov
sub
in
push
jns
out
test
imul
out
cs
or
push
pop
outs
sbb
xchg
jns
pop
mov
in
xchg
call
rol
shr
xchg
cwde
out
fstp
xor
lods
jge
mov
mov
push
fisubr
cmp
xlat
cmp
jg
fwait
jo
or
pop
and
cmc
mov
stc
mov
cmp
jbe
xchg
xor
pop
adc
adc
cmp
add
jg
push
scas
pushf
arpl
cmp
sub
or
push
aam
dec
fnstcw
jl
cwde
cld
adc
or
push
cmp
scas
addr16
cwde
fisubr
fsubr
out
sti
jecxz
dec
dec
call
or
stos
pop
cmp
mov
dec
test
xchg
or
mov
adc
out
xchg
fisttp
jno
xchg
add
lock
mov
retf
pop
mov
leave
jne
loopne
jle
push
adc
fcomp
repnz
lods
scas
pop
sbb
idiv
mov
inc
sbb
lock
sahf
ins
push
or
sub
sti
and
movs
pop
ins
jbe
in
ds
push
call
mov
pop
xchg
jae
imul
fcomp
cld
jbe
sbb
cwde
and
push
sbb
mov
jo
xchg
jns
movs
out
dec
ins
xor
stos
test
xlat
add
int
push
(bad)
jecxz
clc
xchg
daa
or
fs
dec
pop
xchg
(bad)
fcomp
cli
and
popf
and
xchg
sbb
add
fwait
adc
cmp
adc
popf
mov
inc
sub
pop
jbe
jo
test
and
popf
inc
sub
mov
scas
rol
test
cli
xchg
jle
or
sbb
cwde
mov
in
repnz
add
or
scas
ret
adc
mov
out
dec
add
test
mov
(bad)
push
pop
mov
sub
mov
xchg
mov
fdivr
push
fisubr
addr16
push
xchg
jne
call
push
pop
mov
jae
and
cdq
xchg
cmp
xchg
rol
or
xchg
xchg
sti
stc
addr16
or
cmps
ds
retf
stos
jmp
sub
cmp
dec
push
xchg
push
and
sub
sbb
scas
pop
es
sub
lods
in
sahf
push
xchg
sbb
sar
ret
and
push
push
adc
xor
xchg
push
xchg
mov
fadd
xchg
cwde
fcom
mov
xor
dec
inc
jns
rcl
xchg
in
imul
popf
or
pop
cwde
jg
mov
leave
xor
retf
mov
inc
jle
or
xchg
ja
cmps
sbb
add
mov
inc
lds
fdivp
jle
jl
fsubr
mov
xchg
xchg
add
mov
push
xor
stc
not
aad
sahf
jl
jae
loopne
mov
cwde
push
out
and
or
leave
push
ins
daa
mov
outs
popf
repz
push
or
mov
mov
xor
daa
push
adc
cwde
pop
dec
cs
ss
xchg
xchg
mov
jmp
data16
inc
xchg
(bad)
call
test
dec
mov
(bad)
cwde
and
je
test
stos
cwde
push
cmp
popf
xor
shl
sahf
clc
push
test
cs
mov
cwde
fdiv
jmp
test
movs
fmul
hlt
les
jmp
cmp
sub
movhps
mov
mov
mov
xchg
call
popf
mov
(bad)
scas
push
xor
inc
test
inc
dec
cwde
fbstp
add
pop
outs
and
sar
dec
rcr
data16
lahf
stos
mov
popf
repz
or
addr16
push
mov
fstp
pop
aad
rcl
xchg
cmps
cld
int3
push
dec
or
ds
xor
scas
(bad)
fdiv
jecxz
mov
mov
mov
fnstsw
ret
(bad)
sar
in
shl
and
aad
clc
jne
into
call
ds
ret
xlat
mov
dec
popa
xlat
xor
ja
std
xchg
jmp
mov
(bad)
cmp
aaa
or
mov
movs
(bad)
and
inc
cs
sahf
sub
jb
clc
inc
cmps
test
retf
pop
fsubrp
sub
pop
jmp
movs
stos
mov
push
xor
mov
or
mov
nop
xchg
jg
pusha
jmp
dec
int
push
inc
lods
mov
fisubr
or
push
cmps
jp
mov
clc
std
arpl
ins
in
call
mov
mov
sbb
xor
push
pop
leave
pop
sub
cmp
dec
sahf
arpl
adc
retf
inc
cmp
xchg
push
bound
add
jnp
push
dec
push
and
jno
cmp
sbb
leave
dec
add
mov
ficomp
cmc
inc
cwde
xlat
fwait
inc
call
lods
jns
xchg
add
cmp
push
push
cmps
ret
fdivr
inc
clc
xlat
push
dec
cwde
add
sar
mov
daa
cwde
bound
popf
ins
xchg
ins
cdq
cwde
arpl
xchg
jns
idiv
cli
js
leave
jle
loope
mov
out
inc
lea
les
movs
jmp
push
in
es
push
push
outs
fdiv
mov
mov
lock
outs
mov
push
mov
jp
mov
rcl
scas
ins
(bad)
popf
in
inc
ret
aas
cmp
jnp
pusha
clc
jmp
mov
mov
cwde
xchg
popf
scas
adc
pop
xchg
out
push
adc
and
jb
int
add
or
or
cwde
inc
add
fnstsw
inc
jne
cwde
push
dec
popa
cmp
fist
adc
or
ret
and
sbb
inc
fcomp
enter
jb
xchg
and
out
jb
std
cld
pop
hlt
scas
or
add
leave
cs
and
cmps
xor
or
pop
jmp
cwde
sub
pop
cmp
arpl
lods
inc
and
in
pusha
cwde
pop
fadd
inc
cwde
das
pop
or
and
mov
mov
add
or
xchg
addr16
fst
xchg
inc
push
arpl
daa
pop
out
fwait
xchg
xor
xor
out
xchg
or
jbe
and
xor
mov
sti
sbb
cs
mov
xchg
in
dec
push
aas
or
pop
loope
sbb
fucomi
pop
dec
popf
xchg
inc
pusha
inc
cmp
stos
mov
scas
stos
xchg
mov
or
cmp
call
push
sub
lock
mov
repnz
outs
mov
inc
lahf
xchg
jle
dec
pop
mov
outs
lods
mov
xchg
inc
cld
jecxz
dec
cwde
(bad)
out
loop
ret
adc
pop
push
dec
and
cwde
loope
cld
sub
and
cwde
sub
ins
pushf
mov
mov
mov
push
(bad)
lock
push
test
jnp
inc
xchg
xchg
mov
fisttp
leave
aas
ficom
ja
nop
enter
lahf
mov
mov
out
(bad)
out
loope
nop
add
xlat
jbe
inc
dec
jecxz
xchg
loopne
mov
nop
sbb
sbb
clc
stc
addr16
(bad)
jge
jo
stos
push
adc
inc
adc
and
cmps
std
pop
shl
cmp
cwde
inc
push
movs
rol
inc
xchg
fdiv
inc
retf
test
das
test
sub
adc
fisttp
rcr
stos
sbb
add
cwde
push
aas
jae
push
leave
in
cwde
idiv
addr16
and
mov
jmp
pop
inc
jo
cwde
pop
jge
dec
lock
bound
data16
xor
fst
sets
nop
jo
fwait
shl
js
ins
cwde
retf
cs
mov
bound
pop
gs
jl
mov
pop
push
mov
mov
xchg
push
ficomp
mov
lock
push
aam
xor
push
scas
retf
arpl
lahf
iret
icebp
popf
push
push
popf
cmps
and
int3
cdq
and
mov
sub
mov
add
sbb
xor
mov
mov
dec
or
shr
fbld
jg
add
imul
mov
(bad)
aad
(bad)
loopne
vcvtsi2ss
mov
mov
xor
sar
mov
aaa
jmp
xchg
mov
mov
sbb
mov
out
dec
aaa
xchg
dec
sub
jbe
lods
push
cmp
jb
fcomp
xchg
shr
jno
(bad)
sbb
inc
das
mov
sbb
jle
and
xchg
push
popa
jns
or
icebp
adc
pop
mov
fcom
xlat
test
sbb
hlt
jp
mov
gs
jbe
cmp
mov
jecxz
ja
scas
cs
push
or
push
dec
add
cwde
or
inc
jno
sbb
jns
cdq
mov
mov
js
and
jbe
lahf
das
dec
mov
out
jmp
movs
pop
or
xchg
jae
dec
out
jge
lods
inc
inc
mov
js
sub
ins
ficomp
push
sub
inc
std
jo
sbb
jmp
pusha
jmp
cwde
dec
cmp
lods
gs
and
ins
ret
xchg
leave
aaa
add
pop
cmp
mov
repz
xlat
iret
mov
aas
test
lahf
lock
mov
call
nop
add
movs
sub
dec
loop
push
dec
xor
push
add
cmp
mov
push
mov
add
xchg
cmp
(bad)
mov
inc
(bad)
int
lahf
aaa
sub
mov
sbb
arpl
sbb
mov
or
sti
sbb
sbb
out
xchg
hlt
shr
dec
pop
call
mov
mov
es
mov
pop
hlt
in
pop
lock
cwde
sbb
shr
cli
cwde
jmp
retf
xchg
test
dec
addr16
pop
mov
or
pusha
mov
scas
or
retf
int3
cmp
jmp
daa
push
call
jne
sbb
sar
fld
aam
xor
int3
cwde
int
pop
xor
mov
sub
mov
xchg
xchg
outs
popf
push
sar
test
retf
adc
out
adc
cwde
sbb
adc
adc
sbb
ja
mov
movs
jp
adc
out
lahf
popf
bound
pushf
stos
sbb
push
pop
test
or
dec
inc
sbb
ins
dec
pusha
and
aad
fistp
fcomp
push
(bad)
mov
cwde
xor
cld
daa
ss
test
sub
jnp
fs
dec
mov
icebp
scas
nop
mov
faddp
kortestw
repz
jb
add
or
ss
pop
dec
push
adc
xor
adc
push
mov
retf
add
test
mov
bound
lods
add
ret
xchg
out
jb
pop
jae
jbe
cwde
mov
out
dec
mov
mov
adc
(bad)
das
or
mov
lahf
jnp
cdq
cmp
cli
ficomp
xor
shl
xchg
mov
mov
(bad)
out
lds
cmp
cmc
aad
sub
dec
push
pusha
push
add
xchg
or
imul
cwde
mov
cwde
xor
jmp
retf
cwde
das
aas
cmp
retf
adc
imul
jecxz
and
loopne
xor
cwde
stos
ret
jno
pop
inc
jnp
mov
rcr
mov
out
icebp
les
cli
clc
scas
das
js
mul
push
call
dec
jns
jecxz
and
mov
cmp
add
(bad)
pop
cs
movs
std
addr16
and
inc
sbb
not
shl
dec
mov
add
stos
pop
lea
outs
test
mov
add
jge
mov
sub
cs
jmp
mov
mov
cmp
lock
jge
and
mov
ins
xchg
xor
xchg
jno
imul
cwde
fwait
test
mov
pop
dec
(bad)
inc
call
push
sbb
arpl
ret
cwde
sub
mov
leave
lods
lock
jo
cwde
pushf
jns
shl
(bad)
popa
push
call
add
mov
xchg
add
mov
arpl
in
cmp
sahf
or
cld
xor
call
mov
push
fsub
adc
push
inc
aam
add
and
arpl
test
dec
xchg
(bad)
aas
cwde
clc
in
inc
adc
pop
xchg
sub
imul
das
ss
push
sub
aad
enter
pop
sub
pop
xor
cwde
cmp
mov
jmp
retf
test
mov
pop
push
loope
lds
pop
push
adc
add
shr
clc
lahf
imul
sbb
(bad)
pushf
xchg
xor
xchg
in
push
out
jecxz
out
sbb
inc
loope
pusha
xchg
fbld
inc
fwait
xchg
sbb
push
pushf
xchg
punpckhwd
add
fwait
jmp
mov
xchg
and
cwde
mov
push
loop
test
or
cdq
out
cmp
adc
fistp
push
dec
inc
push
je
adc
dec
pushf
ins
xchg
jb
cmps
scas
pop
js
dec
mov
jg
fisttp
jl
retf
pop
loope
cmp
sbb
xchg
fisub
push
xor
cmp
rol
cmp
adc
popa
fdiv
cmp
ja
push
jmp
push
xchg
popa
js
call
push
inc
pop
ja
adc
jge
and
cmp
dec
scas
inc
(bad)
xchg
lahf
mov
scas
fstp
jecxz
push
not
sub
jbe
popa
dec
stos
mov
fmul
xchg
repz
fisub
add
jl
loop
clc
inc
lahf
sbb
sbb
jno
test
mov
jns
sbb
imul
mov
xchg
add
repnz
ds
pop
in
movs
not
jp
les
mov
rol
in
xchg
js
jmp
ror
aas
data16
push
adc
and
pop
adc
mov
pop
cwde
xlat
or
fstp
xor
sub
sub
pushf
and
sahf
mov
lock
inc
das
pop
loopne
lods
mov
dec
mov
cwde
cmp
fisubr
or
mov
out
and
mov
xor
cwde
ins
xor
sbb
out
cwde
pop
fist
jnp
mov
sub
loop
ins
fidiv
jp
cmp
sbb
pop
(bad)
ins
gs
loop
mov
mov
dec
cwde
std
jo
lock
adc
leave
cwde
cmp
(bad)
jb
stos
fcmovnbe
mov
mov
cmc
fcom
cwde
push
jge
out
xchg
loopne
sbb
xchg
movs
mov
or
(bad)
rcl
cwde
push
sub
sahf
xor
(bad)
and
enter
mov
and
leave
ins
(bad)
aaa
test
xchg
add
xlat
mov
mov
loope
inc
call
push
aas
ja
jmp
nop
mov
cwde
ins
iret
cs
(bad)
mov
jo
pop
push
je
and
std
pusha
pop
push
cwde
inc
hlt
enter
cwde
in
dec
add
push
xor
mov
out
cmp
jbe
mov
push
(bad)
push
iret
pop
cwde
js
cdq
ins
(bad)
xchg
stc
cwde
fmul
inc
push
in
out
cmp
pop
hlt
mov
sub
mov
jg
mov
in
mov
jg
pop
fld
jmp
ins
mov
ja
sbb
and
inc
and
mov
mov
sbb
push
cmp
shl
fld
outs
scas
mov
(bad)
add
loop
add
stos
jmp
das
cmp
clc
mov
mov
push
lahf
mov
enter
outs
jbe
push
cmp
js
fwait
outs
std
int
cmp
mov
test
gs
or
fadd
or
adc
inc
and
push
in
fstp
inc
sub
out
dec
pop
and
pop
add
loope
jg
rcl
inc
inc
adc
push
pop
jl
in
js
out
jecxz
sub
(bad)
sbb
inc
jle
gs
outs
fst
retf
je
(bad)
stos
test
fiadd
loope
out
adc
sbb
mov
cwde
and
and
pop
pushf
push
(bad)
sti
imul
xor
cwde
sbb
mov
in
inc
pop
xchg
clc
xchg
dec
inc
pop
mov
test
jns
movs
retf
inc
test
or
xchg
cmps
xor
jne
loope
call
ja
mov
shl
xchg
aad
xchg
inc
(bad)
mov
lock
test
ins
mov
cmc
push
push
sti
sbb
xchg
and
mov
dec
jns
cmp
mov
jl
cwde
lock
rol
(bad)
das
or
sbb
lahf
jmp
outs
repz
daa
xor
cs
shl
test
in
pusha
xchg
dec
push
jns
xchg
inc
sub
aaa
popf
loop
fidivr
std
cmp
cwde
mov
cld
fstp
inc
out
ret
(bad)
les
dec
push
(bad)
in
icebp
movs
js
mul
adc
push
and
jl
pop
test
cwde
ja
test
dec
scas
jmp
fst
adc
mov
adc
mov
outs
cmp
jb
fcmovb
adc
loope
lods
pushf
mov
bswap
test
xor
push
push
imul
cwde
fsubr
jg
sub
jp
push
cmp
mov
xchg
jns
mov
mov
dec
inc
pop
jo
push
xchg
push
mov
push
outs
cmp
test
cmps
(bad)
jmp
call
jl
mov
cwde
gs
cmp
imul
sbb
mov
out
xchg
cmps
repz
mov
lahf
aad
retf
adc
cmp
sub
push
(bad)
leave
xchg
fneni(8087
mov
jbe
inc
js
xor
mov
xchg
jecxz
into
rcr
bound
leave
cmp
xchg
sub
pop
push
jne
and
cmp
frstor
ins
fidivr
dec
rcl
popf
call
out
jmp
cld
or
xchg
fld
iret
push
xor
bound
mov
cwde
push
cmp
xchg
xchg
add
xchg
mov
mov
movs
xor
pop
scas
xchg
(bad)
icebp
ret
es
in
sbb
sub
dec
inc
ret
xchg
repz
cs
mov
xchg
jge
pop
adc
and
call
leave
xchg
jl
cld
add
and
jne
mov
push
cwde
mov
sub
mov
adc
nop
xor
cwde
ins
scas
fld
or
adc
jmp
cdq
sub
dec
mov
ffreep
xlat
stc
and
test
mov
movs
add
cmp
ret
and
adc
mov
div
movs
mov
iret
aam
(bad)
les
push
cwde
push
cmp
jge
inc
test
adc
jnp
add
lods
mov
es
xor
jne
push
cwde
dec
mov
inc
aam
mov
xchg
lods
dec
push
sbb
cli
jbe
xchg
inc
push
xchg
in
adc
push
mov
cwde
(bad)
icebp
or
sbb
shl
cwde
and
pop
adc
shl
xchg
nop
xchg
mov
stos
imul
(bad)
push
es
arpl
call
xchg
xchg
movs
push
jb
xchg
mov
sub
lea
jp
scas
jmp
fsubr
dec
movs
arpl
xor
cdq
or
mov
iret
xor
dec
cs
out
push
xchg
fwait
xchg
add
mov
inc
push
pusha
cwde
or
aad
in
mov
cmp
mov
out
inc
cmp
adc
leave
inc
cmp
arpl
cwde
(bad)
(bad)
std
mov
cwde
cmp
inc
mov
dec
not
fsubr
adc
ret
xchg
out
and
bound
in
mov
push
arpl
push
scas
cs
or
add
cwde
and
rcl
js
push
das
lahf
pop
es
pop
xchg
loopne
ja
clc
xchg
inc
xchg
lods
shl
mov
mov
call
(bad)
mov
out
xchg
add
xchg
fdivr
into
cdq
pop
cmp
adc
loopne
xchg
mov
inc
dec
jmp
xor
push
push
cmps
lahf
aaa
xor
cld
out
inc
int
inc
push
mov
push
sbb
rcr
adc
sub
push
adc
sbb
arpl
or
mov
mov
stc
or
fld
out
sbb
fcom
jbe
xchg
add
call
cwde
scas
cmp
ja
xchg
xchg
jle
jo
outs
test
cwde
mov
xchg
or
jecxz
das
pop
add
pop
push
ret
push
and
and
out
clc
xor
mov
call
(bad)
and
out
leave
cwde
xchg
jnp
xchg
int3
push
test
enter
or
setl
sbb
pop
add
daa
mov
popf
sar
movs
mov
jmp
pop
out
int3
ins
ds
pop
data16
cwde
mov
pop
cmp
cwde
fmul
jo
xchg
push
sahf
xlat
mov
inc
cs
popf
ja
xchg
test
mov
test
jo
mov
(bad)
retf
cwde
adc
test
dec
out
push
jb
int3
pop
xchg
stos
lock
ja
lods
push
retf
sub
push
and
into
je
(bad)
es
pop
rol
in
cs
(bad)
aam
jnp
lea
enter
cwde
dec
push
dec
pop
jge
mov
movs
(bad)
jbe
jp
sbb
jl
inc
ror
or
ja
push
cli
or
pop
inc
sub
test
jmp
retf
cmp
jne
xchg
fld
mov
cwde
mov
add
jb
cwde
mov
sub
mov
jmp
cmps
fistp
cwde
fstp
mov
das
sub
pop
pop
jns
lods
mov
addr16
gs
pusha
sar
fidiv
(bad)
fnsave
jl
movs
fcmovu
outs
add
clc
xlat
jnp
aad
jns
jg
out
adc
call
add
jmp
xor
xchg
jb
pushf
sub
xchg
xchg
fs
jle
cwde
mov
mov
(bad)
ins
movs
cwde
push
rcl
cmps
mov
retf
cs
push
cmp
xchg
out
inc
mov
and
adc
call
sub
retf
adc
call
xchg
stos
lds
dec
ds
dec
pop
xchg
pop
cli
les
pop
pop
daa
jmp
pop
mov
int3
lods
test
or
adc
mov
dec
adc
cmp
fwait
jmp
cwde
jmp
lods
cmp
mov
loopne
aad
dec
das
and
dec
loope
xchg
scas
inc
xchg
popf
es
dec
sbb
js
pop
mov
mov
or
add
cwde
or
das
push
ret
xlat
cmps
mov
mov
xor
inc
cmp
das
int3
mov
push
mov
mov
(bad)
push
js
jns
mov
idiv
push
xor
adc
jns
jecxz
mov
iret
dec
adc
jg
repnz
adc
mov
push
ins
push
inc
out
inc
push
adc
imul
cmp
jge
sahf
outs
dec
cwde
ss
adc
push
repnz
stos
push
fistp
inc
xchg
pop
lea
dec
xlat
mov
xchg
push
dec
xchg
and
std
and
in
adc
(bad)
mov
mov
sbb
leave
cld
hlt
sub
xchg
cwde
aam
ins
imul
das
cwde
inc
cs
pusha
xchg
jbe
mov
ret
jmp
outs
pop
stos
dec
xchg
arpl
jl
js
test
pushf
cmp
add
cwde
inc
aaa
mov
adc
adc
cs
sub
les
xchg
std
lahf
imul
mov
cwde
xchg
adc
cwde
(bad)
cmps
mov
or
rcr
pop
push
or
jmp
imul
fstp
mov
xchg
mov
cmp
push
out
cwde
fmul
test
scas
sub
retf
xor
fcom
enter
push
adc
or
ins
fcom
mov
pop
add
or
dec
in
fidivr
mov
(bad)
es
sbb
inc
cwde
cmp
push
cli
out
xor
sub
scas
arpl
(bad)
aad
cwde
dec
out
idiv
sbb
call
cwde
repnz
xchg
xchg
xchg
in
mov
loopne
mov
cmc
and
push
inc
push
dec
push
pusha
cwde
cmp
shl
xchg
enter
inc
ins
push
xchg
jle
(bad)
and
push
(bad)
inc
push
xchg
scas
mov
push
pop
enter
retf
pop
pop
vphsubwd
xchg
vunpckhps
ror
js
inc
je
call
aad
mov
repnz
rcl
cwde
(bad)
fdivr
jecxz
hlt
xchg
mov
lods
rol
push
sbb
fsub
mov
cmp
cmp
xchg
fadd
push
out
cwde
add
mov
mov
cwde
cmps
sbb
out
in
push
xchg
lock
cli
cmp
xchg
pop
jmp
adc
mov
int
or
shl
fdivp
sub
jno
lahf
and
mov
and
sbb
xlat
xchg
aad
repz
daa
cwde
add
hlt
xchg
addr16
sub
jle
inc
retf
js
fiadd
mov
sbb
mov
or
ins
pushf
cwde
dec
jne
pop
data16
cli
lahf
dec
sub
lods
dec
adc
xor
pop
mov
sub
js
inc
pop
ficom
cmp
ja
scas
inc
cwde
mov
ss
jb
add
aad
repnz
icebp
scas
lock
cwde
xchg
outs
push
lea
retf
sub
adc
cwde
push
loopne
sbb
ret
push
mov
mov
ret
add
stos
cwde
(bad)
pop
jno
lea
(bad)
loope
aam
inc
push
ins
rcr
mov
jo
xchg
and
dec
enter
div
bound
call
pop
loope
in
in
xchg
xor
stos
or
clc
xlat
and
cmp
es
and
cwde
adc
xchg
pop
call
fldenv
cld
and
fisttp
push
and
or
fidivr
test
mov
lea
rcr
cs
loop
xchg
(bad)
jmp
push
in
fld
and
fwait
or
sbb
add
cdq
in
cwde
inc
mov
into
stos
inc
lock
or
arpl
xchg
daa
jge
mov
data16
(bad)
fisttp
fmul
call
dec
pop
movs
jmp
add
fwait
push
or
mov
or
repz
jp
jns
mov
test
xchg
cwde
ja
push
cmp
movs
in
or
xchg
sahf
jp
cli
popa
xchg
sbb
cmp
push
ds
pop
inc
or
and
pop
retf
gs
call
mov
ja
mov
call
mov
jecxz
fld
pop
leave
in
mov
mov
cwde
mov
retf
cwde
leave
test
scas
hlt
xchg
inc
xor
dec
push
jb
push
pop
cmp
cmp
daa
or
js
xadd
mov
int
outs
cwde
jmp
adc
daa
cwde
imul
and
ror
popa
mov
push
std
mov
jp
(bad)
(bad)
jle
pop
jge
test
mov
cmc
enter
sbb
loopne
push
fisub
cwde
xor
mov
stos
mov
cmps
repnz
jge
push
cwde
les
imul
repnz
ficomp
cwde
test
leave
fistp
dec
xchg
cmp
hlt
xchg
popa
cmp
dec
lds
pusha
pop
adc
icebp
xor
lahf
and
pop
mov
and
cdq
dec
xchg
xchg
loop
dec
(bad)
repnz
cmps
jno
rep
mov
push
xchg
js
sbb
push
push
add
int3
int
mov
out
xor
cld
or
lock
jge
cwde
push
mov
imul
call
mov
mov
pop
sub
jp
jns
xchg
fidivr
or
leave
lahf
pop
inc
jo
call
jmp
jae
cwde
push
and
fs
test
jmp
sub
jmp
cwde
stos
pop
cmp
retf
popf
push
jl
pop
fs
int3
sbb
xor
outs
retf
aad
das
cwde
clc
jo
leave
dec
xchg
in
push
(bad)
std
fbld
das
cmps
or
xor
test
pop
adc
xchg
dec
pusha
mov
out
xchg
outs
neg
mov
fbld
xor
cmp
xlat
inc
lods
jl
push
cwde
pushf
ffree
mov
inc
scas
push
cdq
dec
sar
sbb
xchg
or
test
repnz
call
pop
(bad)
fisttp
cwde
shr
mov
test
push
inc
icebp
add
cwde
cli
(bad)
adc
daa
or
in
xchg
mov
je
jmp
xchg
jmp
call
ja
aad
xchg
ret
das
shr
xchg
jnp
xor
cmp
enter
mul
imul
repnz
(bad)
(bad)
pop
mov
adc
inc
sub
jb
(bad)
pop
pop
push
and
push
add
add
add
outs
int
cmp
loope
mov
cwde
xchg
mov
sbb
or
into
sti
(bad)
movs
xchg
neg
xchg
mov
test
fld
int3
jbe
mov
adc
xchg
adc
sub
ds
mov
cwde
out
aas
cmps
push
jae
xchg
cwde
mov
and
imul
jg
repnz
cwde
or
mov
mov
and
daa
xchg
mov
mov
pop
loop
cwde
lock
cmp
sbb
sub
push
ins
jnp
call
in
pop
mov
xchg
mov
rol
or
inc
lods
push
xor
clc
sti
dec
cmps
aad
lock
push
sbb
and
pop
popf
daa
jl
and
sbb
inc
into
bound
pop
(bad)
pop
(bad)
pop
pop
xchg
loop
push
cmp
mov
repnz
loopne
cmc
cwde
sub
icebp
and
push
cdq
inc
sbb
fmul
out
jmp
cmp
ss
dec
mov
mov
adc
rcr
(bad)
adc
xchg
test
stc
and
fbld
cwde
xchg
and
ror
jae
fs
ins
jmp
xchg
loopne
icebp
jne
push
loope
pop
cli
sbb
clc
mov
xchg
iret
xchg
out
jp
ficomp
inc
sub
cwde
dec
jae
(bad)
sbb
movs
(bad)
jbe
xchg
hlt
sbb
cli
aaa
cmp
lods
stos
(bad)
push
enter
aam
xchg
arpl
(bad)
push
not
das
inc
xchg
xor
icebp
mov
pop
mov
stos
fisubr
inc
mov
add
in
in
out
adc
sbb
jle
mov
sbb
cmc
cmp
popf
fdivr
sub
xchg
retf
xchg
sar
or
sbb
or
jnp
into
fdiv
cwde
and
add
movs
xchg
outs
fwait
xchg
mov
fnstenv
xchg
mov
jl
(bad)
lahf
xchg
outs
dec
inc
add
and
mov
rcr
sub
loopne
adc
retf
adc
cdq
jg
mov
mov
loope
push
adc
ror
pop
push
add
inc
imul
jno
add
(bad)
mov
jge
add
inc
xchg
pop
cmp
mov
ret
cwde
sti
jmp
and
dec
daa
mov
lods
add
add
cwde
or
pop
in
mov
and
aaa
inc
push
add
sub
lds
xchg
call
fisub
xchg
shl
lahf
popa
test
xchg
jmp
enter
call
jbe
movs
mov
mov
push
das
or
xchg
sbb
jns
inc
cmp
cld
(bad)
repnz
and
jnp
push
cmpxchg
ret
pushf
sbb
sub
mov
cwde
push
xor
jle
fldenv
aas
scas
fnstsw
mov
add
sbb
ins
out
popf
imul
cs
mov
xchg
aam
fld
push
daa
jne
push
lahf
and
imul
mov
push
pushf
ror
jne
cmp
data16
mov
idiv
mov
ror
push
jns
cwde
cmp
jne
push
mov
std
ret
or
popa
sub
and
adc
wrmsr
pop
sub
inc
sub
cwde
push
or
sub
jae
jl
call
or
sub
push
xchg
jno
mov
sbb
sbb
mov
xor
adc
cwde
jg
mov
out
cdq
sbb
push
sub
pop
cwde
mov
popa
arpl
scas
cmp
dec
fcom
stc
add
adc
xlat
jmp
cmp
or
imul
push
cwde
xchg
mov
inc
imul
inc
jo
out
popf
or
cmp
cwde
movs
sub
jbe
xchg
cmp
push
add
inc
ja
push
pop
ins
pushf
adc
out
int3
push
or
sbb
pand
or
mov
push
pushf
cmp
xchg
ss
test
xor
cmp
pop
jnp
loop
ins
cwde
push
ficomp
call
cld
not
dec
adc
xchg
jp
ja
scas
and
je
dec
cwde
imul
xchg
sub
dec
inc
cmps
and
inc
or
ins
add
jnp
and
dec
push
cwde
xchg
dec
xor
pop
mov
cmp
sub
inc
retf
inc
pop
ds
adc
imul
ret
shl
jmp
pop
sub
fcom
cwde
dec
mov
inc
push
cmp
dec
push
or
std
cmp
sbb
add
scas
mov
test
(bad)
clc
xchg
and
jl
cdq
js
(bad)
cmps
mov
cmp
xchg
pop
out
or
pop
imul
sub
popf
pop
imul
adc
fwait
xchg
frstor
sub
mov
xor
outs
jbe
cwde
test
lods
pop
adc
xor
int3
and
xchg
cmp
push
fwait
xor
and
das
mov
adc
xor
ins
ret
adc
cli
push
xor
sub
je
mov
es
cmp
xchg
push
loop
aad
ins
inc
mov
sub
lock
cdq
inc
iret
fisttp
arpl
mov
mov
mov
dec
cmp
and
pop
(bad)
movs
mov
lahf
fs
pop
les
xlat
(bad)
xchg
cwde
mov
dec
hlt
mov
scas
mov
adc
in
inc
daa
mov
fistp
sbb
jno
shl
rol
or
sbb
adc
dec
adc
(bad)
mov
frstor
cmp
repz
rcr
push
sub
jmp
test
xchg
lahf
xchg
arpl
mov
xlat
adc
enter
inc
fucomip
out
and
pop
pop
push
(bad)
jmp
fisttp
inc
push
loop
cwde
popa
jno
xchg
imul
pusha
fwait
cwde
push
inc
dec
pop
lea
mov
scas
sbb
sbb
out
arpl
ret
call
aad
stos
mov
aaa
push
jmp
imul
sti
dec
mov
push
pop
push
xchg
push
add
lock
imul
xchg
ins
int3
cwde
add
loop
mov
xchg
sub
ss
sbb
push
jo
cwde
cdq
and
nop
ret
add
mov
dec
mov
mov
push
ins
xor
outs
and
cmps
jmp
cwde
movs
fdivr
dec
pop
leave
aad
inc
sbb
add
dec
jno
adc
fisttp
nop
cwde
jge
clc
fistp
test
jle
jecxz
data16
xchg
xchg
arpl
or
jle
mov
lock
ds
pop
dec
sti
jp
cwde
push
add
cmp
sub
cmp
or
stos
adc
jg
lahf
outs
(bad)
xchg
fwait
loope
dec
rcr
fild
or
inc
or
test
dec
popf
mov
xor
outs
cs
outs
sbb
call
add
mov
add
test
icebp
add
stos
ror
std
popf
pop
sub
adc
fidivr
loope
cwde
out
adc
in
xchg
pop
push
int
sub
jmp
sbb
jmp
push
pop
add
inc
cs
stos
xchg
xchg
in
ins
pop
in
push
or
pop
xchg
cmc
adc
push
out
repz
jae
jg
adc
mov
push
mov
mov
popf
xor
push
add
or
dec
sub
fdiv
xchg
movs
xor
shr
xchg
cdq
popa
dec
sub
sbb
add
lahf
push
cmp
cli
sbb
fstp
ret
div
mov
pop
test
lahf
mov
cmp
scas
mov
cmp
sbb
scas
ins
out
add
retf
adc
fs
cwde
cdq
ins
mov
or
fidiv
cwde
push
inc
(bad)
adc
pop
inc
dec
and
sub
push
daa
jl
inc
mov
lahf
mov
push
sub
sub
pop
pop
iret
cmp
mov
loop
push
cwde
out
xlat
jns
add
dec
cwde
sahf
adc
enter
nop
mov
fbstp
adc
stos
cli
add
pop
in
(bad)
cmps
add
hlt
cmp
xor
add
dec
call
jl
xchg
lds
fsubr
push
xchg
and
rcl
mul
push
push
int3
cdq
xchg
mov
pop
pop
push
ins
adc
and
and
ins
cwde
or
cmp
cdq
mov
xchg
cmp
clc
mov
dec
xchg
sub
loope
and
ret
xlat
imul
cwde
jle
or
add
frstor
push
sti
dec
fsubr
mov
into
sbb
aaa
mov
out
dec
xchg
jae
xchg
fs
scas
mov
nop
sub
jle
xchg
lahf
jl
xchg
sub
fild
lock
mov
mov
xor
pushf
and
xchg
xchg
xchg
popa
test
les
(bad)
dec
lods
pop
test
mov
adc
mov
jnp
test
mov
mov
push
sub
push
mov
in
sub
dec
pop
(bad)
cmp
fnstsw
adc
mov
ret
lock
(bad)
inc
mov
stos
adc
push
push
leave
dec
dec
sbb
xchg
push
(bad)
mov
adc
pop
imul
xor
call
fstp
out
xchg
outs
and
cmp
cmps
cwde
js
jl
addr16
cwde
mov
push
push
scas
xchg
and
add
sbb
sub
in
js
xchg
xchg
sbb
dec
pop
loope
dec
push
mov
paddb
adc
sbb
jg
(bad)
outs
dec
imul
es
mov
cwde
mov
out
mov
pop
adc
jne
pop
push
cwde
jge
mov
xchg
pop
sub
outs
mov
xchg
in
jmp
fidiv
lock
sub
arpl
rcl
add
outs
sbb
mov
fnstenv
sti
pop
xchg
das
jne
add
fsubr
loopne
rol
mov
enter
xchg
sbb
add
shr
inc
ror
sbb
mov
mov
add
ins
ins
jne
push
fld
mov
sbb
or
sbb
or
pop
add
xor
stos
jmp
xchg
xor
inc
push
dec
dec
enter
sub
addr16
or
cmp
sbb
aaa
pop
into
rcl
repnz
in
fcmovnbe
call
sbb
clc
mov
shl
sub
jnp
bound
cdq
lock
ror
push
and
mov
pop
dec
test
data16
call
cwde
or
lea
ret
cwde
shr
cwde
dec
pop
ja
or
stos
mov
(bad)
popa
or
mov
cmp
lods
xchg
fsubr
push
pop
popf
loop
js
test
call
or
enter
int
xchg
mov
cwde
data16
mov
icebp
cwde
(bad)
clc
sbb
and
lods
cwde
mov
inc
rcl
clc
(bad)
daa
cwde
or
inc
pop
ret
mov
cmp
movs
jge
jbe
je
and
cdq
into
std
fs
scas
leave
sub
mov
sbb
ins
push
mov
and
pop
sbb
sbb
jl
mov
shr
jmp
inc
pop
xor
xchg
jns
mov
mov
cwde
repnz
gs
hlt
test
push
sbb
popf
pop
or
mov
in
dec
pusha
cwde
jno
popa
imul
sub
mov
xor
pop
seta
repnz
jmp
jnp
dec
pusha
ss
cwde
ficom
icebp
mov
aad
adc
mov
aad
jns
loop
popa
sbb
push
pop
sbb
enter
(bad)
or
xchg
mov
sub
push
xchg
mov
hlt
or
outs
jle
paddsb
cmp
js
cwde
mov
movs
retf
lods
sbb
lea
sbb
ja
push
sub
or
stos
sbb
or
shr
mov
aas
sub
aaa
pop
adc
cwde
call
add
in
cwde
mov
push
xchg
inc
or
stos
sahf
cmp
sub
adc
dec
xlat
aad
and
push
lahf
mov
popf
xor
and
pop
ins
lods
js
mov
test
iret
add
sbb
add
test
int3
jp
sbb
cmps
jmp
out
dec
fs
add
mov
test
xchg
lds
jbe
cmp
mov
push
(bad)
iret
adc
sbb
fld
push
sbb
(bad)
daa
pop
inc
push
adc
nop
outs
into
mov
int3
cmp
cmp
mov
jmp
xor
pop
scas
call
xchg
dec
mov
and
pop
sub
xchg
adc
dec
cwde
xchg
dec
lahf
cmps
or
dec
xchg
adc
push
cwde
mov
add
js
xchg
jp
outs
scas
mov
jmp
sbb
jne
popf
xor
sub
lods
xchg
loop
icebp
mov
enter
pushf
(bad)
aas
jbe
xchg
ret
aaa
pop
mov
xchg
jmp
pop
popf
inc
adc
cmp
xchg
inc
add
mov
scas
jns
add
loopne
fnstsw
inc
and
adc
push
je
cwde
jmp
jnp
je
std
int
stos
loopne
mov
repnz
call
sbb
cld
pusha
inc
std
clc
popf
fldpi
sbb
pop
or
aaa
ins
sub
cmp
outs
arpl
mov
in
pushf
jb
cmp
dec
in
jecxz
adc
test
rol
add
clc
add
lds
and
cmp
jne
mov
cmp
jmp
dec
pushf
pop
mov
jmp
loopne
std
in
call
pop
pop
mov
test
je
sbb
xchg
arpl
xlat
pop
sbb
sbb
cmc
in
add
shl
push
cwde
pop
sub
sar
movs
xchg
arpl
mov
out
leave
scas
mov
in
cmp
ins
jb
test
push
mov
js
add
into
dec
cmp
in
pop
xchg
adc
rcl
xchg
movs
sub
arpl
inc
ret
iret
cli
in
std
and
cwde
cdq
jae
jmp
pushf
cwde
jmp
jmp
cld
gs
out
(bad)
xchg
adc
or
inc
sub
xchg
adc
push
shr
int3
sbb
push
xchg
xchg
pop
es
(bad)
jns
(bad)
sbb
pop
rcl
xchg
(bad)
lahf
add
loope
jecxz
cwde
test
in
push
inc
pop
or
movs
cmp
jne
fs
mov
or
rcr
fsubrp
pusha
xor
nop
mov
xchg
ins
jb
xchg
inc
add
cmp
xor
out
ret
dec
push
add
int3
pusha
adc
xor
cmp
or
sub
sub
jg
xor
adc
cmp
jnp
sbb
push
(bad)
(bad)
sbb
mov
sbb
imul
add
test
dec
push
jecxz
mov
repz
inc
cmp
mov
and
xor
inc
cwde
jge
fadd
xchg
pop
xchg
loopne
int
pop
pop
sub
cwde
test
(bad)
inc
push
cmp
pop
cmp
xor
(bad)
sbb
xor
fcomip
enter
clc
mov
ret
cwde
mov
sahf
xchg
mov
xchg
xchg
xchg
mov
cmc
sbb
cmps
stos
add
and
push
fimul
scas
jp
mov
lock
cmc
ret
retf
retf
jmp
addr16
adc
setbe
nop
or
inc
push
push
mov
int
jo
fmul
cld
popf
add
mov
add
mov
pop
pop
(bad)
addr16
xchg
mov
je
loop
sbb
lds
mov
sbb
ins
dec
xchg
mov
test
dec
cmp
xor
cwde
mov
mov
pop
cmp
inc
ss
cwde
sbb
outs
xor
pop
pop
jne
fsub
scas
xchg
cwde
or
jnp
ins
js
ins
in
loop
mov
and
popa
ret
mov
in
adc
push
pop
out
fsubr
cmp
cli
xchg
int
and
movs
jo
cwde
cmps
pop
push
mov
fcmovbe
cmps
xchg
mov
pop
mov
xchg
sbb
repnz
push
jbe
sub
push
in
das
rcr
data16
add
jno
xor
sbb
aad
out
aam
or
cmp
mov
retf
xchg
frstor
call
pop
push
rcr
cwde
adc
(bad)
cmps
imul
fstp
xor
sub
push
cmp
test
aam
and
je
and
pop
inc
add
cmp
inc
daa
dec
popa
jne
add
jne
icebp
(bad)
test
jns
out
int
sub
iret
cwde
add
ret
fimul
lds
xchg
je
jmp
or
xchg
hlt
dec
(bad)
outs
jno
dec
add
cwde
xor
out
push
enter
and
pop
xchg
jne
xchg
pop
mov
or
icebp
cmp
and
cmp
pop
sub
xchg
sbb
xor
push
fsub
xchg
xlat
fs
jns
fdivrp
add
xchg
test
loopne
jae
(bad)
loope
lds
lods
and
mov
jno
adc
xor
add
retf
cmp
scas
mov
xor
push
pop
aas
bound
daa
xor
cwde
mov
and
mov
nop
adc
sub
movs
(bad)
ins
ror
cs
lock
adc
or
dec
jp
cwde
pop
lea
mov
sti
iret
cdq
sub
add
or
push
test
imul
jno
not
mov
shld
add
or
add
xchg
popf
add
pop
ins
push
cmp
xchg
movs
push
adc
mov
dec
mov
pop
mov
xor
pop
(bad)
jle
push
sets
or
dec
sub
add
std
call
outs
scas
mov
mov
je
cwde
push
dec
sub
sbb
popf
or
cwde
sub
and
stc
jno
mov
scas
cmp
push
loop
cdq
push
push
cdq
adc
sahf
jo
cdq
dec
sbb
cmp
sbb
fstp
xchg
xor
sbb
aam
bnd
pushf
cwde
clc
and
xchg
ins
data16
jns
xchg
cwde
cmps
mov
xor
call
pop
and
cmc
cwde
dec
xlat
adc
aam
dec
das
loopne
pop
sahf
(bad)
imul
sub
pop
das
xor
cmp
push
(bad)
push
jle
jg
and
bound
sub
in
mov
mov
pushf
or
add
adc
loope
jnp
push
push
xlat
movs
jmp
xchg
mov
cwde
add
lea
xchg
push
pop
add
pop
pop
xchg
adc
pop
add
rol
loop
xchg
outs
cli
stos
enter
inc
sbb
js
xchg
movs
push
mov
push
add
mov
adc
stc
clc
ja
jne
dec
xor
push
cwde
test
cmc
push
jae
mov
push
cwde
push
push
rep
clc
cmp
add
add
mov
jge
sbb
lods
push
cdq
aaa
cwde
dec
shr
aas
(bad)
mov
cwde
and
rol
push
inc
xchg
pop
call
jae
jo
and
sub
hlt
(bad)
pop
cwde
and
jb
sub
cwde
jge
mov
in
dec
les
hlt
lods
or
std
xchg
fs
(bad)
inc
fisub
xchg
jae
push
ret
inc
inc
idiv
sub
fcomp
out
dec
bound
fld
pusha
in
stc
(bad)
cwde
stos
daa
or
(bad)
and
cdq
cmp
inc
icebp
xor
and
lods
cwde
pop
and
jns
adc
ds
daa
push
es
cwde
aad
mov
xchg
addr16
sbb
mov
cwde
sub
sub
icebp
cwde
xor
aas
xchg
shr
mov
dec
retf
imul
addr16
sbb
data16
mov
call
dec
pop
repz
fidivr
lock
xchg
sbb
repnz
mov
add
add
or
adc
xchg
imul
xchg
xchg
mov
pop
pop
xchg
clc
in
jg
test
mov
ins
add
xchg
cmps
mov
imul
pop
cwde
push
cmp
aad
fwait
cmps
inc
mov
cwde
mov
lock
mov
cld
pop
sub
xchg
mov
xchg
ins
mov
adc
jo
inc
push
add
xchg
ret
jo
les
xor
cmp
xchg
push
and
pop
mov
xchg
jp
sbb
mov
nop
mov
les
mov
pushf
popa
sbb
push
mov
xchg
or
mov
cdq
push
call
out
(bad)
jecxz
push
inc
sub
fidivr
das
rcl
sbb
fsubr
push
pop
cwde
mov
and
push
inc
cwde
dec
sub
xchg
icebp
test
(bad)
repnz
cwde
sbb
jle
stos
push
cwde
imul
mov
lods
or
jge
je
push
adc
rcl
aaa
mov
mov
sbb
enter
jne
fisub
fld
out
js
loope
lods
add
pop
jge
test
outs
push
mov
shr
ret
cmps
dec
test
cwde
add
cdq
stos
pop
addr16
ficom
dec
or
daa
in
call
sbb
in
jbe
inc
push
adc
mov
sbb
push
popa
push
add
mov
cmp
faddp
add
xchg
pop
xchg
pusha
xor
cwde
mov
stc
or
mov
test
pop
addr16
js
mov
or
fninit
loopne
sbb
cmp
mov
sar
sub
repnz
lods
mov
pop
mov
sbb
xchg
imul
adc
fist
js
in
ss
sbb
mul
adc
cwde
adc
mov
xor
ins
push
sar
adc
adc
cmp
xchg
fldenv
jg
sub
cwde
fstp
push
push
and
int3
add
adc
cwde
fcom
and
push
cmovnp
inc
rol
lahf
add
sbb
xchg
(bad)
xchg
or
call
jle
test
cdq
call
ret
mov
sub
fidivr
xchg
pushf
jo
push
je
jmp
fcmovnbe
les
pop
call
into
push
jle
bnd
inc
mov
pop
xchg
retf
int
pop
xchg
retf
add
or
fidiv
sub
mov
mov
xor
daa
aaa
sbb
cwde
pusha
jnp
pop
ja
xchg
or
pop
iret
sub
lods
cld
lea
movs
test
jl
call
xchg
pusha
inc
xchg
inc
out
loop
sbb
cwde
or
jge
push
sub
xchg
add
std
lock
sub
pop
sbb
imul
dec
xchg
loopne
mov
(bad)
push
push
leave
popf
js
and
ja
mov
mov
sbb
lahf
or
jecxz
sub
imul
in
mov
fcomp
rcl
xchg
cs
sbb
push
out
push
retf
mov
xchg
or
xor
ror
adc
(bad)
xchg
outs
ja
mov
mov
cmp
xor
inc
outs
ja
imul
and
and
(bad)
loopne
dec
stc
dec
or
stos
pop
xor
pop
xchg
and
ins
jae
(bad)
js
hlt
adc
push
mov
adc
ins
push
mov
aas
ja
dec
push
or
lahf
xor
rcr
sbb
je
loopne
lahf
clc
mov
arpl
shl
mov
je
fmul
mov
pop
cwde
xlat
repz
adc
jae
sbb
xchg
cwde
ins
push
adc
int
pop
or
bound
inc
retf
jmp
(bad)
bound
int
ins
ins
cwde
adc
adc
rcr
xchg
mov
mov
pop
cli
cmp
push
and
(bad)
cmps
cmp
mov
xor
iret
test
pop
call
aad
mov
enter
test
sub
outs
push
and
sahf
sub
fcom
imul
popa
dec
rcr
cli
sub
cwde
xor
cdq
sbb
imul
cmp
lock
call
adc
movs
outs
sbb
ret
fdivr
nop
int
and
and
popf
add
cmps
push
stos
pop
fadd
dec
mov
cli
imul
sar
shl
test
sar
adc
push
sbb
dec
xchg
pushf
cmp
jmp
scas
loope
arpl
xor
ins
leave
ss
xchg
sub
dec
sub
push
fwait
cmp
(bad)
cwde
daa
shl
add
jge
jmp
out
cmp
ret
xor
out
mov
add
xlat
mov
mov
std
sub
push
jecxz
test
sbb
xor
jb
fidiv
in
cwde
mov
or
cwde
loop
and
push
test
push
add
and
xchg
ja
push
in
xchg
hlt
mov
call
mov
cmp
lock
mov
int3
mov
retf
dec
daa
sub
test
jo
imul
jnp
sub
iret
mov
stc
sbb
dec
mov
add
(bad)
xchg
cld
(bad)
jmp
adc
daa
ds
popf
jae
sub
dec
xchg
inc
rcr
push
dec
inc
(bad)
cwde
push
mov
ss
add
xchg
std
fldcw
cmc
ja
and
les
cdq
(bad)
shl
movs
test
sub
push
mov
imul
rol
jns
imul
sbb
loope
clc
sbb
mul
cwde
jp
mov
and
add
mov
xchg
retf
aam
les
pop
ins
pop
mov
inc
xchg
in
xchg
adc
pusha
cwde
daa
sbb
leave
push
cwde
test
ret
es
fcomp
clc
in
mov
mov
xchg
cmp
pop
test
cwde
ret
out
mov
test
mov
pop
arpl
int
int3
xchg
mov
mov
cwde
std
sbb
pop
xor
push
out
in
cwde
(bad)
dec
lock
(bad)
jl
cmps
xor
jge
mov
push
adc
test
clc
cwde
add
fmul
mov
pop
pop
call
dec
aas
mov
sbb
aam
loop
fdivr
jecxz
xchg
xor
scas
push
cmp
aaa
test
loope
mov
mov
cmp
ins
cmps
loope
xor
call
aas
daa
pop
out
fdiv
mov
shl
popf
jns
jmp
push
mov
icebp
cmp
lahf
pop
mov
fcom
lods
cwde
hlt
mov
out
inc
xchg
jp
add
cmp
xchg
ds
jne
(bad)
pop
xor
stc
mov
rcl
cmps
leave
les
mov
or
dec
and
sete
stc
sbb
push
pop
outs
mov
fistp
sub
jnp
int
mov
mov
je
js
cmps
mov
loope
sbb
in
lds
ja
dec
jmp
retf
shl
sub
push
and
inc
in
js
add
jmp
and
cmp
mov
sbb
out
jne
stos
mov
js
pusha
and
inc
push
ds
cmc
in
enter
inc
retf
xchg
ins
cbw
cdq
push
xor
or
call
pop
aad
and
add
ins
xchg
sub
push
cmp
idiv
add
jl
xchg
and
xor
pop
sub
dec
xchg
popf
rcl
xor
fmul
das
cwde
dec
sbb
hlt
xchg
popf
jne
call
in
add
aas
jecxz
mov
ja
dec
test
in
cmps
cwde
fcmovu
out
imul
std
dec
pusha
xchg
cwde
clc
sub
mov
stos
fisubr
idiv
mov
cmp
out
pop
out
and
push
scas
ins
sbb
mov
xor
imul
les
iret
sahf
bound
ins
push
cwde
lods
mov
clc
dec
mov
je
cwde
(bad)
std
sar
add
jmp
rol
popf
xchg
(bad)
cmps
loope
mov
pop
out
cmp
push
cwde
add
outs
pop
jbe
jl
mov
jnp
popf
push
xor
jno
jg
cwde
xchg
aad
xchg
xchg
je
jns
adc
popf
fstp
dec
fist
adc
mov
sub
aam
cwde
inc
pop
lods
mov
pop
sbb
cwde
xchg
leave
or
enter
jmp
cwde
push
ficomp
outs
jle
cwde
jne
jo
pop
pop
lods
gs
mov
push
lods
sbb
cwde
popf
loop
imul
imul
cdq
inc
jmp
leave
test
pushf
mov
daa
xor
(bad)
xor
repnz
xlat
fwait
pop
pop
jne
cwde
mov
inc
leave
sbb
in
mov
cli
push
push
fidiv
sbb
mov
(bad)
into
fdivp
push
push
cwde
rcr
std
pusha
or
xchg
cmp
addr16
inc
lods
mov
test
fmul
cmp
popf
popa
jge
inc
out
cwde
sbb
xor
pusha
sub
ret
out
jbe
leave
cli
push
xchg
loope
movlps
push
jns
inc
mov
pop
out
mov
xchg
cmp
loopne
and
outs
jp
mov
nop
fsub
test
xchg
loope
or
pop
cmp
mov
xchg
out
mov
in
cwde
hlt
jecxz
and
xchg
shr
jp
dec
xor
ja
xlat
xor
mov
adc
mov
sbb
xchg
mov
add
cwde
cli
jmp
push
push
cwde
adc
add
mov
jp
pusha
jo
popf
jns
dec
push
xchg
jg
push
inc
push
dec
in
shl
lods
sub
push
test
and
sbb
cmps
cli
mov
inc
sti
push
mov
sub
popf
dec
sub
sahf
(bad)
cld
(bad)
cmc
and
repz
cdq
inc
repnz
lods
push
dec
and
push
neg
add
push
sar
js
mov
leave
rcr
push
inc
mov
xchg
jle
fmul
cdq
jge
sahf
popa
pop
mov
xchg
in
mov
xlat
push
loope
jl
sub
cdq
retf
(bad)
imul
pop
nop
push
xor
fimul
jnp
js
cwde
stos
out
mov
push
aam
xchg
mov
sbb
hlt
out
cmp
gs
sbb
cli
cwde
mov
pop
or
into
call
in
jno
jnp
cmp
shl
and
jbe
xchg
jmp
arpl
xchg
es
push
sub
shr
cwde
push
inc
(bad)
lahf
or
inc
and
in
mov
or
aad
lock
xchg
fwait
sar
jmp
cwde
jecxz
pop
sbb
xchg
dec
push
xchg
jp
push
test
xor
and
mov
xchg
xchg
jo
xchg
inc
cmp
fwait
loop
or
(bad)
cmp
fcmovbe
cwde
sub
inc
arpl
lods
add
lahf
mov
xchg
jo
movs
sbb
enter
mov
aam
inc
add
inc
adc
sbb
sbb
push
pop
in
cld
lahf
lahf
stos
pushf
push
cwde
sub
xor
mov
cmps
mov
mov
cmp
sub
jnp
xor
or
jecxz
rcr
add
aad
sub
jmp
hlt
add
bound
cwde
dec
js
xchg
push
lahf
mov
cli
xchg
jnp
cmp
icebp
xchg
mov
sub
or
xchg
dec
jb
xchg
adc
mov
cli
add
push
mov
mov
xchg
xor
dec
sbb
mov
cmp
shl
push
or
neg
and
es
aad
mov
jmp
cmp
lock
and
xchg
fisub
dec
sbb
sub
dec
cwde
pusha
bound
mov
pushf
or
xor
push
mov
enter
mov
jmp
dec
jl
gs
imul
(bad)
mov
in
mov
test
outs
add
mov
shl
sub
xchg
pop
sbb
jmp
sbb
jbe
shl
pushf
int3
pop
loope
pop
aas
xchg
ins
dec
jns
fwait
mov
jmp
in
mov
mov
xchg
cwd
xchg
fstp
(bad)
or
or
js
sar
pop
jg
imul
mov
mov
xlat
scas
add
xchg
pushf
push
adc
sub
push
mov
xchg
cs
jo
outs
cmp
sar
cwde
pushf
xor
sbb
adc
loop
adc
cmp
fmul
scas
out
sbb
xor
in
mov
mov
lods
(bad)
mov
fisttp
fidiv
je
fmul
jmp
loopne
mov
in
mov
cld
adc
add
arpl
sbb
or
sbb
cwde
adc
call
outs
jns
inc
mov
cwde
scas
ins
(bad)
clc
fld
loop
mov
xchg
jmp
add
or
sub
xchg
pop
(bad)
cwde
into
mov
pop
mov
sbb
les
enter
add
xchg
push
sbb
shr
not
stos
cwde
mov
adc
js
aaa
mov
cwde
ret
lods
fstp
push
dec
cmp
inc
addr16
xchg
inc
js
jo
test
xchg
add
cmp
call
cmc
and
in
cmp
inc
scas
jnp
cwde
add
mov
push
push
cwde
jecxz
inc
shl
mov
xchg
mov
push
dec
adc
js
jp
xchg
jl
nop
les
pop
xchg
xor
xchg
or
ins
push
jno
cwde
pushf
(bad)
js
add
cmps
mov
daa
lea
lods
mov
cwde
xor
cmps
sbb
mov
aad
(bad)
(bad)
push
les
push
stos
cwde
inc
dec
adc
cdq
sahf
push
fst
adc
(bad)
cwde
fcmovnu
xchg
dec
in
loopne
ret
cwde
hlt
aad
mov
xchg
call
in
mov
push
(bad)
out
adc
mov
pop
mul
mov
sar
cmp
and
dec
in
jns
xchg
std
retf
(bad)
in
pop
into
or
xchg
shl
push
push
enter
js
xchg
jns
push
imul
js
clc
test
ins
iret
and
hlt
cmp
addr16
dec
xchg
retf
popf
cmp
xlat
clc
or
hlt
(bad)
pop
ja
jle
les
inc
loop
cmp
fmul
int
ficomp
add
cmp
pushf
bound
test
sbb
pop
jle
out
mov
mov
and
in
sub
in
adc
out
pop
retf
xor
sub
push
cmp
repnz
ins
cmps
ins
or
push
push
loopne
cmps
fldenv
(bad)
je
popf
sub
xchg
jno
cwde
push
mov
in
or
adc
leave
(bad)
ins
out
fist
sbb
or
xor
leave
clc
dec
xchg
mov
adc
inc
and
nop
lahf
leave
inc
out
(bad)
xchg
iret
shl
jno
sahf
ret
push
push
mov
jl
dec
pushf
lea
push
jl
mov
cwde
or
sbb
push
cmp
test
mov
inc
sub
xchg
xor
push
icebp
or
jg
xchg
push
test
pop
arpl
jns
lods
nop
cwde
fstsw
sbb
fcos
inc
or
and
cwde
push
stc
bound
mov
shr
and
inc
mov
pop
push
xchg
jecxz
mov
or
jnp
stos
(bad)
fdivp
hlt
pop
scas
sbb
shr
cwde
fnstenv
lds
fidivr
mov
add
jle
push
and
loopne
or
test
sub
mov
push
enter
xor
mov
ret
call
pop
aad
add
hlt
cmp
ss
mov
sub
jg
leave
jb
fwait
lods
add
jmp
cwde
jle
les
int3
fs
mov
pop
sub
cmp
cmp
cmp
test
dec
movs
mov
jb
int3
loopne
or
aad
bound
ins
mov
mov
shr
mov
jmp
test
fst
ins
int3
je
jp
cwde
mov
dec
mov
cwde
jmp
popa
jno
xchg
pop
xor
jmp
xor
add
or
mov
(bad)
retf
push
lock
imul
(bad)
pop
in
fdiv
sbb
and
int3
mov
pop
mov
push
into
dec
xchg
jnp
push
dec
pop
sub
das
pop
mov
je
in
add
cwde
push
and
or
fld
sbb
push
int3
sbb
pop
es
test
loope
jp
popf
xor
mov
add
test
jnp
dec
sub
pop
cli
pop
movs
mov
cwde
inc
pusha
cmp
cwde
mov
mov
xor
dec
stc
nop
dec
pop
sbb
in
ret
in
test
jo
jno
add
push
ins
stos
sbb
enter
mov
sbb
xchg
jns
pop
ficomp
ss
lahf
outs
mov
cmps
(bad)
mov
addr16
adc
mov
xchg
bound
inc
shr
push
dec
adc
jno
xor
or
mov
(bad)
xchg
push
stc
movs
add
jns
bound
arpl
pop
dec
inc
ja
xchg
jo
push
fldcw
xchg
sub
jns
xchg
cli
cmp
sahf
sub
pop
mov
inc
stos
(bad)
int3
dec
adc
mov
jo
movs
xchg
xor
xchg
call
inc
jns
scas
sub
push
icebp
iret
int
jo
mov
jl
mov
not
xchg
mov
pop
mov
sbb
ret
jp
mov
imul
cmp
xchg
add
inc
js
inc
jo
rol
pop
mov
imul
mov
in
mov
sbb
mov
inc
cwde
pop
and
or
xor
or
add
xor
jno
xchg
pusha
mov
mov
and
xlat
mov
test
aaa
dec
fistp
syscall
jne
in
xchg
fcmovne
pop
mov
cwde
lea
mov
or
cwde
hlt
(bad)
je
rcr
jecxz
add
sub
adc
addr16
js
ins
call
popf
inc
jne
mov
mov
jno
pusha
xor
test
cmp
or
pop
pop
jmp
nop
nop
popf
xchg
ror
loop
cwde
call
jg
pop
mov
mov
xor
fidiv
jge
sbb
aaa
xchg
push
ins
jae
je
cmp
cwde
lock
cmp
cmp
inc
mov
mov
out
xor
pop
or
not
adc
cwde
addr16
inc
mov
adc
adc
cmp
sub
sub
adc
nop
mov
jp
pusha
push
cwde
inc
sub
sbb
nop
mov
cwde
mov
sbb
int
pushf
lock
xor
dec
sub
xchg
clc
shl
ret
fidivr
enter
popf
fwait
sub
out
imul
ds
push
add
pop
mov
push
xchg
imul
fisubr
adc
js
xchg
mov
hlt
enter
movs
mov
jns
pop
fimul
mov
and
cwde
pop
test
cmps
mov
scas
or
xchg
dec
call
stos
cmp
pop
or
or
push
cmp
icebp
test
les
sbb
lods
mov
sub
sub
xchg
xchg
in
mul
mov
clc
sub
pop
and
inc
push
pop
cs
push
mov
xchg
fs
xchg
sti
int3
fild
rcr
pop
sub
add
inc
push
daa
push
cmp
xchg
lods
leave
xor
out
fdiv
xor
jno
in
jmp
push
cmp
push
in
repz
xchg
mov
or
in
or
pop
dec
push
lahf
bound
jae
xchg
jo
pop
or
test
aas
call
prefetch
or
es
cwde
and
sbb
lahf
arpl
adc
jnp
push
dec
pop
and
dec
fcom
sti
fidivr
jo
nop
sub
add
cmp
sbb
dec
pusha
nop
push
cmp
jmp
rcl
daa
or
jp
cmp
push
dec
sub
xor
test
dec
pusha
lock
cwde
dec
add
test
or
add
rcl
outs
pop
ja
add
(bad)
rcr
outs
pop
into
adc
fcmovnu
cmps
cwde
test
daa
aas
add
mov
in
bound
call
xchg
ins
xchg
cmps
repz
sub
out
and
cmc
in
xor
test
data16
call
cwde
xor
jnp
int3
xchg
mov
cwde
jmp
jb
lea
dec
or
ss
mov
push
jp
push
adc
popf
jo
xor
test
jbe
rcr
sub
loope
adc
fwait
mov
xchg
sbb
push
cdq
lods
inc
mov
inc
movs
mov
and
dec
int3
shl
(bad)
sub
cwde
jae
mov
sbb
jnp
cli
adc
push
xchg
mov
repnz
add
jbe
ficomp
inc
sbb
lahf
lock
pop
inc
fbld
imul
jge
push
arpl
mov
xchg
(bad)
mov
and
pop
mov
ror
enter
mov
dec
pop
or
stc
xor
int
test
movs
test
leave
(bad)
ror
add
push
xchg
movs
adc
pop
mov
xchg
sbb
popf
jmp
xchg
xor
add
dec
aad
xchg
aad
cmp
push
retf
out
sbb
add
test
test
enter
push
aaa
pusha
adc
ret
sub
mov
aad
rcr
xchg
and
cmp
xlat
add
loope
loop
add
inc
fstp
hlt
mov
cwde
sbb
or
scas
push
push
lahf
pusha
aas
ja
or
enter
jo
cwde
dec
sub
sbb
movs
cwde
mov
mov
call
or
popf
bt
mov
adc
clc
je
inc
cwde
pop
shr
lods
ds
cwde
out
mov
pushf
xchg
push
push
push
fcom
in
mov
aam
pop
sub
mov
xchg
or
pop
xor
mov
test
sbb
call
rol
push
cwde
es
sbb
push
ja
leave
mov
xchg
push
lahf
call
aas
and
cwde
push
add
add
mov
mov
xlat
push
cwde
pop
rcl
sub
cwde
push
stc
jo
fcmovnbe
mov
aad
movs
xchg
outs
and
pop
cmp
pop
sub
dec
pop
xor
js
inc
add
stos
cwde
mov
mov
xor
jbe
cmps
stos
mov
shl
jge
cmp
mov
adc
in
jns
jg
fs
loop
into
enter
retf
jbe
mov
mov
mov
popa
jo
retf
mov
leave
loopne
push
adc
lock
pop
cs
mov
loop
cwde
xor
jnp
imul
cmp
fst
push
daa
jge
xlat
out
xor
jmp
retf
dec
pop
jae
aad
iret
inc
js
sbb
add
(bad)
xor
inc
cwde
mov
mov
add
xor
fs
fnstenv
int3
push
movs
mov
cwde
cld
pop
shl
jg
loopne
adc
cwde
push
arpl
dec
mov
out
neg
add
cmp
mov
ror
mov
push
push
mov
scas
pop
jns
loope
scas
sub
lahf
or
adc
add
sbb
or
xor
dec
xchg
cmp
jo
sbb
cwde
in
pop
dec
cld
dec
das
push
sub
pop
ins
add
movs
cwde
xchg
mov
ret
adc
and
(bad)
cwde
cli
xchg
mov
pop
mov
fbstp
ficom
pop
ret
mov
jl
xchg
out
leave
ss
inc
enter
cbw
repz
aad
fisub
jmp
cmp
mov
stos
call
xchg
push
adc
mov
daa
cwde
xchg
popa
mov
jge
xchg
(bad)
mov
(bad)
mov
scas
xor
pop
ret
push
pop
and
cdq
mov
sar
jb
jnp
pop
push
lods
es
cwde
sbb
fld
xor
cwde
aam
shl
cwde
js
scas
dec
ins
dec
adc
into
aam
add
push
cwde
and
mov
cmp
pop
dec
stc
adc
pop
test
push
mov
adc
add
pop
repnz
nop
fld
xchg
ss
mov
addr16
(bad)
fimul
scas
mov
dec
popa
loope
ja
add
sub
jmp
dec
sub
xor
mov
daa
in
les
jb
adc
adc
jle
pop
push
cmp
in
stos
test
in
cwde
ficom
push
ins
sbb
cwde
test
fxch
xlat
mov
xchg
ja
cli
mov
dec
dec
dec
rcl
cwde
xchg
jmp
sub
xchg
jns
lahf
pop
in
mov
out
xchg
hlt
and
(bad)
lds
jecxz
jo
inc
jae
int3
mov
xor
cwde
inc
cdq
dec
(bad)
xchg
pusha
xchg
sub
pop
(bad)
sub
in
cwde
icebp
xor
sar
(bad)
and
das
push
fcom
fild
add
cmp
xchg
jo
lahf
cdq
out
pop
arpl
ins
cmp
xchg
mov
xor
sbb
inc
mov
scas
mov
cmp
xlat
loop
adc
out
jp
bound
xor
cwde
xor
lahf
adc
cwde
stos
fdiv
stos
and
xchg
jle
sbb
sahf
push
and
push
sbb
in
mul
push
jmp
loop
shl
fiadd
cmp
sub
mov
cwde
add
xor
in
xchg
push
retf
aas
jo
fcomp
test
in
xchg
lods
sbb
dec
inc
dec
push
or
inc
xchg
jns
fmul
inc
cdq
enter
inc
mov
xchg
push
out
addr16
push
call
enter
rol
sub
(bad)
push
xchg
hlt
call
popa
push
mov
or
pop
jmp
push
jmp
out
mov
cs
mov
push
push
and
xchg
cmp
inc
jns
lods
jmp
cmp
cwde
pusha
add
push
in
xchg
pop
add
cwde
popa
add
lahf
movs
stos
adc
ficom
add
mov
push
test
test
sbb
cli
mov
xchg
push
pop
call
add
xor
sti
bswap
xchg
aam
mov
inc
jl
xchg
ret
fstp
xlat
sahf
cmps
or
adc
jecxz
sbb
pop
js
sub
popf
jp
jb
icebp
clc
mov
in
xchg
sar
retf
sbb
cmp
popf
inc
pop
cmp
in
mov
jmp
pop
movs
pop
add
arpl
mov
and
test
dec
and
jnp
cwde
mov
int3
pop
aad
push
mov
and
push
fst
mov
ret
xchg
les
pop
repnz
addr16
imul
inc
xchg
xchg
ret
dec
xor
inc
jbe
jmp
call
in
cwde
(bad)
dec
sahf
inc
in
cwde
rol
jae
xchg
mov
add
push
test
sbb
or
movs
add
lock
and
(bad)
xchg
lock
mov
xchg
mov
xchg
jecxz
xor
and
inc
ja
test
mov
lahf
popf
push
cwde
pop
out
add
xchg
mov
sbb
xor
mov
dec
adc
sub
cwde
test
jne
xchg
sahf
je
xchg
jae
push
adc
xor
fdivr
sbb
int3
(bad)
movs
cwde
jp
sub
mov
mov
adc
pop
or
movs
add
pop
and
(bad)
cmps
add
std
test
jo
imul
imul
retf
jp
cwde
pop
shr
xchg
mov
cmps
pop
xor
mov
jae
and
int
cmp
pop
cwde
cmp
sub
ds
mov
ins
lods
mov
ins
dec
int3
arpl
cdq
fst
dec
inc
mov
mov
add
ret
fnstcw
sahf
xor
sti
and
cwde
jmp
in
add
aaa
ins
ins
sbb
out
inc
dec
push
cwde
and
addr16
int3
push
sub
pop
pop
daa
aaa
ss
loopne
push
push
bound
stc
in
fmul
leave
cmp
xchg
dec
pop
pusha
daa
jle
pushf
sbb
xchg
out
aaa
add
clc
jmp
sub
lahf
outs
pop
imul
jl
add
sub
rcl
ficom
jl
rol
and
arpl
mov
jae
adc
iret
jmp
cmp
xchg
leave
sub
test
pushf
sar
(bad)
(bad)
mov
retf
jnp
cwde
or
and
ins
dec
shl
jmp
xchg
jp
mov
lods
loopne
std
ror
bnd
and
xor
rcr
rcl
outs
and
xchg
jo
pop
cli
adc
call
fnsave
xor
es
mov
dec
and
add
jns
mov
inc
jle
out
ss
lahf
call
pop
or
or
(bad)
scas
(bad)
scas
cdq
dec
jmp
sub
pop
xchg
fadd
pusha
or
mov
cwde
sub
pop
sub
mov
push
sbb
test
mov
mov
xchg
jbe
xor
mov
jl
and
push
xor
push
popa
jecxz
fstp
sub
cld
xor
sub
stc
xchg
inc
mov
dec
cwde
loop
adc
sbb
push
call
pop
add
sbb
mov
stc
push
fnstcw
dec
xchg
pop
and
add
adc
mov
repz
rcr
push
mov
mov
sbb
test
loope
repz
fcomp
and
push
mov
es
dec
cwde
pop
dec
loop
rol
xchg
pop
lods
(bad)
aam
shl
xchg
jecxz
xchg
and
dec
push
jge
nop
scas
push
in
add
cmp
xor
push
mov
mov
retf
or
div
or
push
pop
sub
and
lds
cwde
xor
movs
inc
pop
and
pop
jl
xchg
clc
inc
popf
out
in
adc
cwde
int3
jo
mov
sbb
jno
out
fnstcw
cmp
fisttp
outs
sub
cmp
mov
push
adc
sub
cwde
fst
jecxz
mov
cs
stos
fdivrp
adc
mov
add
push
stos
loop
cwde
dec
sub
leave
mov
loope
cwde
stos
(bad)
fisub
jp
adc
sbb
pop
sti
ret
xchg
hlt
(bad)
jecxz
push
out
push
mov
cmp
not
dec
inc
dec
imul
fidivr
popf
icebp
int
es
jge
sub
add
js
shl
jl
ja
cwde
lods
std
sub
dec
out
mov
xchg
xchg
(bad)
into
(bad)
cmps
aad
(bad)
jo
dec
cwde
popa
cmp
add
stos
stos
cwde
mov
jns
cwde
sub
not
test
pop
dec
mov
retf
lahf
xchg
out
repz
xchg
mov
sbb
xchg
mov
not
(bad)
fist
xchg
and
or
or
fdivr
xlat
cmp
ret
(bad)
xor
pop
pop
inc
repnz
(bad)
cwde
aas
and
mov
dec
mov
mov
sbb
cmp
jp
pop
sbb
popf
aaa
ret
sbb
cli
dec
into
jmp
mov
xchg
and
sti
adc
fld
cdq
imul
out
not
int
(bad)
mov
int3
xlat
in
cld
dec
cwde
pop
call
xchg
push
stos
mov
mov
pop
inc
sbb
dec
addr16
cmp
cwde
rcr
mov
xor
pop
ins
sub
cwde
lock
(bad)
sub
and
retf
jp
sbb
cdq
rcl
mov
frstor
jmp
retf
add
imul
cmp
cs
sbb
data16
xchg
add
sbb
adc
sub
sub
jnp
ror
cmp
cld
(bad)
cdq
or
jg
xchg
push
add
aam
loope
shr
add
jmp
cwde
xchg
pop
jne
mov
pop
pop
sub
cdq
imul
sub
idiv
fst
jl
sbb
idiv
xchg
movs
cwde
xlat
cmp
into
push
mov
test
sub
ins
call
aaa
lahf
push
out
sbb
jmp
pop
cmp
popf
je
xor
repnz
in
cwde
es
call
jmp
inc
inc
aaa
mov
popf
jns
push
aas
fcomp
ja
and
mov
in
(bad)
cwde
inc
das
jne
jb
push
cwde
xor
and
sbb
inc
xchg
ins
sub
aas
test
push
pusha
cwde
cmp
int3
shl
add
lods
mov
lods
mov
xchg
cld
jmp
fs
dec
cwde
push
add
test
mov
lods
mov
jb
cwde
xor
call
repz
jecxz
(bad)
in
cwde
stos
punpckhdq
inc
cmc
mov
rcl
lahf
fs
sbb
fcomp
mov
and
stc
xchg
int3
or
push
sbb
out
xor
xor
ins
sbb
dec
xchg
(bad)
dec
pushf
not
icebp
sar
ret
cmps
test
punpckhbw
jo
xchg
xchg
xchg
add
cwde
pop
pop
sub
push
loope
sti
fsub
xchg
xchg
fldz
int
pop
add
and
xchg
jo
push
retf
adc
xor
xchg
in
fs
jle
ds
lea
or
mov
out
push
add
js
push
fcom
int3
xor
inc
outs
fdiv
ins
push
dec
mov
xchg
and
icebp
rcl
outs
jmp
push
adc
adc
mov
sahf
jp
and
or
out
fcomp
xor
xchg
cmp
sub
sti
shl
out
cld
adc
inc
sub
adc
sub
push
mov
mov
cdq
mov
jle
add
and
mov
cwde
mov
popf
addr16
mov
xchg
jmp
test
fisubr
or
jecxz
ret
jno
fs
shl
sbb
(bad)
sar
rol
pusha
(bad)
pop
cmp
stos
aad
jns
sub
adc
mov
mov
(bad)
fdiv
mov
jle
pop
loopne
sbb
out
js
cwde
pop
daa
mov
or
dec
sbb
ss
cmp
xor
jl
sbb
mov
test
lock
int
cli
mov
ja
pop
cdq
jns
fmul
xchg
ins
sub
data16
test
cld
adc
enter
out
in
or
arpl
movs
test
(bad)
jo
cwde
jp
mov
jmp
icebp
ss
xor
imul
mov
mov
jmp
cdq
out
retf
shl
rcl
cmp
dec
sub
(bad)
das
jp
mov
ret
out
sub
and
inc
outs
rol
(bad)
xor
push
jb
and
jne
mov
sbb
xchg
push
pop
imul
lahf
retf
xor
into
cmp
sub
xchg
jg
cld
imul
sahf
dec
fisttp
pop
sub
push
test
and
xor
lock
(bad)
pop
lods
ficomp
dec
mov
mov
mov
cmps
mov
leave
jle
retf
cwde
push
aas
sbb
lock
xor
push
aad
popa
or
not
cwde
xchg
add
jp
mov
cmp
inc
je
or
jmp
inc
inc
imul
push
mov
fild
xchg
enter
mov
mov
imul
mov
aaa
sbb
sub
cmp
mov
mov
mov
sti
shr
inc
sbb
push
in
in
call
out
and
cmp
int3
cwde
xor
inc
push
daa
or
cwde
mov
dec
xchg
sbb
or
test
fld
push
fidivr
stos
outs
aam
cwde
and
into
int3
lods
les
and
dec
or
or
sbb
mov
jo
fcomp
shr
xor
jnp
call
add
mov
ins
js
test
ret
and
dec
pushf
je
popf
(bad)
fdivr
clc
mov
cmp
sbb
inc
enter
inc
adc
ret
enter
jle
pop
inc
test
pop
test
jl
pop
je
mov
mov
jns
mov
mov
repz
popa
mov
sbb
add
cwde
jb
sub
mov
call
iret
sub
mov
retf
int3
and
jnp
xchg
jge
pushf
or
sub
arpl
mov
adc
stos
and
imul
xchg
pusha
aad
adc
sbb
mov
xlat
sar
call
(bad)
call
jge
out
std
cwde
mov
cld
sub
sub
cmp
mov
or
push
mov
aas
js
imul
sti
sbb
arpl
cdq
enter
div
jne
sbb
xchg
pop
outs
jb
ds
jo
mov
mov
jge
and
xchg
fs
fisttp
loop
sub
test
mov
icebp
pop
push
popf
loope
out
imul
sub
inc
push
and
dec
ss
leave
cwde
test
mov
loopne
push
sbb
out
mov
rcr
clc
inc
mov
jns
adc
(bad)
jns
jg
adc
mov
(bad)
fdivrp
pop
cmp
jge
(bad)
xchg
psrlw
mov
push
ret
pop
lock
cwde
out
push
jmp
inc
fmul
cwde
xlat
mov
rcl
cwde
push
int3
pushf
jmp
inc
xor
xchg
ret
mov
cmp
jno
mov
out
push
xchg
inc
or
mov
(bad)
xchg
mov
mov
push
lods
sbb
push
not
sti
mov
jo
test
push
mov
hlt
out
sahf
ds
loope
lahf
mov
fnstcw
xchg
jns
out
mov
cmp
into
enter
lahf
sbb
je
sbb
jnp
jmp
mov
test
add
(bad)
into
cmp
js
inc
pop
clc
pop
dec
cwde
loope
xchg
pusha
sti
(bad)
jne
cmp
mov
sbb
jmp
jmp
jae
xchg
xchg
push
dec
sub
lods
xlat
sbb
(bad)
int
cli
pop
inc
push
lahf
dec
ss
imul
enter
dec
sbb
xchg
mov
aaa
shr
test
(bad)
ud2
inc
sbb
push
add
sub
mov
xor
xchg
popf
jo
pop
adc
clc
fs
cwde
lock
dec
call
test
lock
mov
mov
mov
cvtdq2ps
loop
inc
mov
(bad)
fdivr
cwde
repz
and
push
push
adc
xchg
add
imul
jo
mov
addr16
js
or
cwde
cld
inc
pop
ins
add
pop
sub
jle
xchg
sbb
cmp
cwde
out
int3
out
add
cwde
sbb
sub
in
sub
mov
into
adc
not
push
(bad)
or
fwait
sbb
stc
test
cwde
mov
bound
jle
cwde
xchg
mov
adc
out
and
jo
cwde
dec
popf
ins
jle
mov
mov
jo
pop
xor
or
cwde
nop
into
push
sbb
es
xchg
push
sub
cwde
xor
retf
cwde
pusha
and
dec
(bad)
sub
jns
repnz
(bad)
pop
or
loope
leave
aad
push
sahf
cwde
adc
jle
das
cwde
adc
mov
aad
xchg
jmp
sbb
retf
inc
mov
inc
stos
cwde
jg
aad
adc
ret
sbb
xor
pop
jmp
pop
jmp
jns
push
lods
mov
mov
xchg
(bad)
mov
es
lods
gs
mov
mov
xor
mov
mov
xchg
inc
dec
into
pop
gs
ss
pop
and
pop
sbb
ins
fnstenv
lock
dec
retf
mov
loopne
daa
sbb
aam
mov
xchg
add
cmp
lods
cmp
dec
xchg
fs
aam
pop
and
and
xchg
fisubr
and
movs
cwde
or
(bad)
test
dec
cdq
iret
(bad)
mov
sbb
repz
ins
xchg
ret
rcr
push
dec
jbe
cmp
data16
xor
ret
xchg
aad
and
or
in
cwde
and
sub
outs
cmp
jmp
xchg
xchg
mov
sub
lea
jnp
ret
inc
xchg
lods
jbe
jl
(bad)
not
xlat
xchg
movs
out
neg
push
push
stos
pop
jl
mov
cwde
mov
adc
adc
cwde
mov
lods
add
cwde
push
mov
out
test
iret
jbe
xchg
mov
fild
push
div
nop
jmp
adc
push
sub
stc
jne
xchg
adc
push
dec
sbb
lahf
push
(bad)
pop
inc
mov
call
imul
mov
arpl
shl
or
inc
sub
lea
cmp
cwde
cmp
mov
out
xchg
mov
push
xchg
cmp
xchg
cwde
fdivr
test
aam
movs
inc
mov
(bad)
push
jmp
cwde
imul
xchg
cmc
ja
sar
pop
icebp
push
push
jge
push
stos
(bad)
stc
outs
js
xchg
fdivr
test
push
sub
pop
inc
or
sbb
sub
cwde
or
mov
ss
mov
int
cmp
lahf
mov
push
cwde
ins
jbe
shl
sub
das
xor
stos
outs
cmp
ficom
dec
daa
arpl
cwde
pop
mov
push
aas
addr16
cwde
jb
adc
and
jecxz
dec
pop
imul
push
sub
push
dec
jno
push
mov
mov
xchg
retf
mov
or
in
push
sub
jmp
lock
(bad)
cmp
adc
icebp
hlt
mov
clc
rcr
xchg
pop
inc
pop
push
or
inc
and
xchg
fld
sub
popf
add
lahf
inc
and
fdivr
cmp
int
sbb
mov
lock
loope
dec
jmp
cli
adc
push
test
push
and
adc
and
cwde
pop
lods
hlt
cld
retf
dec
popa
cmp
mov
cmp
xor
cdq
push
inc
jge
(bad)
repnz
int3
fbstp
sub
xchg
mov
mov
ins
scas
popf
adc
in
fsubr
test
cwde
(bad)
shr
fisubr
sbb
in
sbb
jp
xchg
mov
rcr
dec
push
js
jnp
jge
mov
stos
push
xchg
cwde
out
arpl
in
rol
ds
and
xchg
dec
pop
ja
push
sub
das
inc
scas
adc
jne
cwde
mov
ja
inc
int
inc
mov
xor
adc
mov
dec
xlat
jmp
repz
repz
xor
sub
rcr
sub
sub
jnp
mov
in
ss
stc
fst
das
xor
push
cld
add
xor
pop
or
mov
add
jmp
test
fnstcw
push
or
xchg
arpl
and
test
mov
mov
inc
dec
push
dec
int3
lods
(bad)
cwde
ins
sub
outs
sub
push
mov
ficomp
mov
lahf
stos
loop
daa
leave
adc
cmp
sub
dec
adc
pusha
jle
mov
pop
out
inc
mov
call
outs
int
jns
lahf
mov
les
cmp
popf
push
mov
push
outs
test
ret
lds
test
and
pop
mov
xor
add
bnd
or
xchg
mov
lock
bswap
jb
inc
dec
mov
into
fcomp
gs
fisubr
jo
rol
dec
pop
call
mov
gs
scas
xchg
mov
test
frstor
cwde
xor
cmps
inc
pop
cwde
cmp
mov
mov
inc
xor
int3
aad
outs
dec
bound
xchg
and
imul
lock
call
mov
adc
push
xor
xor
loope
push
add
and
retf
pop
and
(bad)
movs
fnsave
xchg
(bad)
sbb
ja
fisttp
sbb
cmp
inc
xchg
sub
inc
pop
push
sar
loopne
aad
fsub
mov
jb
mov
mov
and
jmp
int3
cwde
rol
ret
ds
in
and
imul
hlt
cmp
xchg
retf
ret
(bad)
or
sar
xchg
add
dec
adc
cwde
sti
adc
and
or
rcr
and
push
mov
mov
jne
mov
jmp
out
lock
cs
add
pop
push
push
js
mov
ficom
inc
inc
test
shr
or
movs
lahf
cli
(bad)
test
repnz
in
sti
adc
lods
je
mov
sbb
pusha
mov
mov
in
fisubr
mov
mov
dec
fdiv
cli
dec
add
push
loope
xchg
mov
movs
loope
xor
add
stos
fadd
cwde
test
das
jno
jo
cdq
pop
pop
xor
fcomp
or
and
dec
cld
int
cmc
xchg
mov
loope
cwde
mov
hlt
(bad)
fadd
inc
cmp
popf
cwde
stc
sub
or
mov
sub
cwde
not
cmp
test
das
mov
call
cmp
lods
dec
push
jb
dec
sbb
pop
push
or
es
int
fistp
imul
js
push
(bad)
int
ss
xchg
xor
imul
outs
rcr
push
and
mov
push
cmp
cwde
lods
mov
aad
pop
mov
pop
data16
jae
fisttp
lods
jb
outs
pop
push
ins
hlt
ret
fwait
cmps
retf
xor
fnstsw
scas
rcl
(bad)
outs
inc
mov
nop
sub
jns
popf
shl
add
cld
add
out
(bad)
jmp
ror
mov
mov
sar
sub
in
bound
jp
movs
jmp
mov
xor
fwait
(bad)
ror
xchg
xlat
stc
jmp
dec
push
xchg
test
mov
pop
icebp
loopne
jo
dec
ret
push
hlt
lock
cwde
lods
or
je
pusha
and
mov
shr
pusha
cwde
(bad)
xor
test
sub
or
cwde
cwde
js
sub
imul
inc
xor
scas
push
cwde
push
cmps
mov
xor
add
sub
cwde
cmp
jl
fwait
enter
or
pusha
and
fs
call
cmp
popf
daa
sub
pusha
leave
mov
jmp
jbe
inc
into
xchg
or
or
jle
call
mov
hlt
(bad)
or
loopne
aaa
dec
xchg
push
inc
sub
mov
xor
cwde
cmp
call
xchg
cwde
les
mov
cwde
and
mov
xchg
popf
jbe
(bad)
repnz
icebp
retf
shr
adc
stos
into
jae
and
mov
mov
mov
imul
in
popf
sbb
or
movs
mov
repnz
(bad)
test
mov
jp
lahf
sub
int
sbb
xchg
fimul
movs
mov
js
ficom
pop
into
cwde
jg
xchg
add
cwde
fcom
mov
adc
sbb
sbb
popf
stos
in
jmp
pop
lock
fadd
in
cwde
fadd
lods
jbe
cwde
adc
(bad)
shr
mov
lds
or
xchg
test
mov
or
push
xchg
pop
inc
stos
mov
xor
xchg
xor
pop
and
fsubr
addr16
jno
adc
ret
test
jae
or
std
sub
push
or
cmp
lods
aam
popf
enter
fdiv
das
pop
pop
jmp
pop
adc
mov
popf
jp
je
shr
clc
dec
jmp
mov
adc
pop
push
dec
and
jmp
cwde
ror
mov
adc
rcl
icebp
iret
adc
out
loope
sbb
cwde
mov
cwde
out
pop
mov
xchg
in
popa
cwde
jp
mov
add
sbb
cmp
int
jo
in
mov
adc
std
test
fisubr
icebp
loop
xchg
out
inc
add
or
lods
shr
and
xchg
ja
test
cs
stos
inc
inc
clc
cdq
adc
adc
sbb
sub
arpl
and
mov
outs
or
jp
test
pop
sub
loopne
xor
popa
jnp
and
mov
jle
clc
mov
aam
and
pop
pop
mov
xchg
stos
xchg
call
push
pop
and
push
xor
es
lock
cwde
push
inc
jnp
pop
ficomp
out
stos
ret
test
push
ds
push
cwde
arpl
mov
jne
leave
popa
xchg
add
push
mov
test
pop
jnp
cdq
mov
adc
cdq
aam
add
(bad)
mov
jbe
aaa
or
outs
jp
pop
clc
cwde
inc
jge
lgdtd
mov
mov
inc
dec
in
test
dec
lds
cwde
(bad)
jl
mov
test
dec
loope
ins
xor
inc
push
inc
mov
cwde
xchg
daa
push
clc
push
call
and
adc
das
cmps
cwde
imul
cdq
jns
ins
popa
cwde
les
int3
push
mov
xchg
push
jmp
nop
outs
loope
(bad)
mov
clc
test
pop
and
sbb
pop
add
add
xlat
mov
cdq
xchg
push
int
jb
cmps
(bad)
jle
(bad)
mov
mov
addr16
dec
movs
push
ss
add
cmp
ds
in
xor
pusha
jl
jmp
or
mov
mov
test
rcr
xchg
mov
or
pop
mov
add
dec
jp
stc
stos
retf
and
mov
inc
sbb
test
adc
add
mov
mov
push
repz
cwde
xor
aas
or
and
xchg
sub
or
imul
stos
jnp
mov
lods
rcr
push
cmp
scas
(bad)
cwde
ret
jl
les
sbb
lods
repz
stc
pop
sub
cwde
xchg
in
adc
cwde
cmps
leave
fild
cwde
imul
lods
cwde
cdq
imul
mov
sub
int3
(bad)
aas
sub
mov
inc
push
call
int3
mov
jne
xor
pushf
push
mov
jae
push
in
int3
cwde
sbb
mov
mov
sub
cmc
js
shl
xchg
jge
shl
or
test
push
repz
nop
cpuid
push
js
xchg
test
pop
xor
add
cmp
push
push
cs
jmp
addr16
mov
and
lds
das
fstp
cwde
sbb
ss
cmp
hlt
les
jmp
retf
loope
sti
push
pop
adc
or
adc
cld
add
pop
xchg
ror
push
jb
and
sti
cmc
mov
(bad)
rol
aam
lock
adc
pop
xor
push
sub
ret
(bad)
call
sub
push
in
(bad)
cwde
push
sub
fwait
sub
mov
scas
test
cmp
imul
adc
repz
push
cmp
pop
cwde
cmp
sub
xchg
or
movs
test
rcl
fadd
ja
into
mov
xchg
mov
mov
push
mov
pop
fs
clc
xchg
sbb
leave
push
push
dec
jo
leave
sub
addr16
or
lods
js
add
stos
mov
mov
mov
into
cmp
cs
mov
enter
adc
int3
adc
xchg
imul
mov
sbb
scas
mov
loope
in
cwde
push
mov
loop
and
adc
or
ret
inc
push
cwde
js
out
add
cwde
inc
sub
icebp
nop
sahf
and
cwde
lea
xor
adc
shrd
push
in
aas
jo
outs
adc
inc
retf
xchg
sbb
imul
adc
pop
inc
mov
xor
lock
jns
jno
call
bound
cwde
data16
test
xchg
fs
or
icebp
mov
cwde
inc
adc
xor
jae
mov
sub
test
sbb
les
retf
adc
adc
pop
ret
sub
adc
adc
mov
mov
stc
icebp
ror
cmc
retf
and
sbb
data16
js
int
xchg
pop
cmc
fwait
xor
mov
outs
inc
jmp
xor
rol
in
std
push
inc
jae
ins
sub
fwait
push
sub
or
rcl
(bad)
adc
cmp
mov
inc
xchg
enter
imul
dec
pop
mov
mov
cwde
lahf
mov
cwde
jbe
psubsb
mov
cmp
lods
xchg
add
scas
mov
out
in
inc
cmps
dec
xchg
cdq
stos
stos
adc
shr
outs
mov
mov
gs
bnd
xchg
mov
pop
popf
inc
and
or
sti
mov
arpl
std
push
cmp
(bad)
loopne
imul
es
sti
xchg
out
cli
popa
push
mov
cwde
ret
mov
jg
loop
das
xchg
push
sbb
jno
xchg
jae
inc
jmp
lods
lock
stc
in
in
sub
popa
jno
lahf
lods
and
clc
jbe
mov
cdq
outs
xchg
mov
lods
cwde
jmp
sub
dec
sbb
pop
retf
mov
popa
aam
push
sub
imul
dec
adc
sbb
lds
(bad)
shr
nop
ret
leave
adc
push
cmc
dec
mov
pop
sbb
stos
mov
sbb
out
and
jnp
add
or
dec
pop
mov
dec
shl
mov
sub
adc
xchg
mov
sub
jle
jecxz
lahf
pop
mov
cmp
sbb
push
xchg
sbb
mov
das
xchg
adc
in
mov
fwait
ins
(bad)
fucomip
shl
add
sub
jbe
pop
scas
popf
push
dec
sub
aaa
push
mov
add
jg
jne
js
retf
xchg
aam
(bad)
adc
xor
imul
pop
dec
call
(bad)
cdq
mov
push
xor
push
inc
jne
or
xchg
ins
jb
mov
enter
out
adc
test
pop
inc
push
mov
pop
shr
bound
psllq
clc
fidiv
jmp
sbb
loope
or
cli
xchg
push
sub
ins
in
inc
xchg
popf
mov
mov
jmp
cmps
(bad)
fcom
inc
cwde
inc
cmps
push
out
cwde
jns
mov
(bad)
(bad)
into
retf
xchg
fdiv
fldpi
xchg
cwde
gs
adc
cwde
sbb
jl
clc
sti
aad
mov
inc
icebp
push
pop
xlat
rcr
and
cmp
cmps
pop
mov
loopne
xor
and
leave
mov
add
pop
cmp
cmp
add
sub
push
iret
cwde
aaa
push
jmp
ficomp
fcomp
inc
add
mov
nop
fild
jg
stos
jo
adc
pop
sub
sahf
test
mov
and
fadd
aaa
frstor
cmp
adc
or
push
mov
ret
mov
mov
sub
sub
into
inc
js
push
test
jne
popf
sub
fucomip
fmul
push
arpl
add
pop
sahf
jmp
test
push
and
loopne
mov
std
dec
arpl
cld
into
cwde
cmp
sbb
mov
cdq
daa
js
movs
mov
inc
sub
stos
(bad)
shl
scas
jne
imul
cwde
push
mov
mov
and
cwde
pop
cli
jo
sbb
jp
stos
or
sbb
push
push
mov
sbb
gs
cwde
int3
pop
clc
and
retf
rol
sub
retf
aaa
shl
push
or
dec
stc
in
rcr
fdivr
js
(bad)
popf
outs
fmul
sub
push
add
shl
iret
push
cwde
inc
jne
inc
mov
sbb
or
xor
xchg
(bad)
xor
xor
fimul
or
mov
in
pop
dec
sub
cmp
movaps
xor
and
cmp
sub
lahf
mov
mov
mov
xchg
xchg
jno
mov
in
les
xchg
sahf
cmp
inc
cli
ja
push
fdivr
sub
call
mov
test
cmp
cdq
sub
loope
inc
ins
dec
pop
call
push
(bad)
stos
cmp
mul
in
mov
mov
(bad)
cmp
(bad)
aam
ja
mov
in
test
outs
cdq
lods
cwde
(bad)
mov
jbe
clc
add
pusha
dec
loopne
cwde
mov
xor
cmp
fldenv
es
cli
lahf
mov
gs
pusha
mov
retf
das
mov
cwde
sbb
xlat
fcmove
xor
mov
mov
mov
and
mov
loopne
sbb
movs
mov
sar
fstp
(bad)
jns
jnp
sbb
sbb
ficom
shr
outs
imul
mov
cmp
aas
dec
cwde
push
ja
imul
add
pop
push
and
out
in
mov
mov
cwde
jno
or
pop
mov
xchg
xchg
retf
icebp
int3
cmp
pop
sub
sar
lahf
jmp
rcr
adc
xchg
mov
in
sbb
xchg
fsub
sbb
sub
mov
(bad)
jnp
mov
add
in
inc
pop
aas
aam
rcr
dec
push
mov
out
xchg
out
sbb
dec
enter
xchg
je
cwde
pop
in
add
xchg
jne
out
mov
mov
lea
fnstsw
push
daa
in
icebp
scas
test
js
push
mov
repnz
sub
mov
xor
xor
out
push
xchg
popf
scas
int
ror
or
add
xchg
xor
cwde
cwde
or
iret
retf
inc
mov
xchg
mov
aad
repz
aaa
or
inc
dec
push
xchg
dec
push
es
xchg
xor
xchg
fistp
adc
(bad)
cwde
stc
pop
cli
stos
adc
push
mov
or
pop
jno
mov
imul
test
cmps
mov
adc
add
repz
jmp
mov
enter
inc
pop
sub
xchg
outs
scas
mov
test
cwde
push
jbe
clc
jg
push
in
popf
mov
sbb
popf
(bad)
arpl
push
cmp
test
popa
xchg
dec
cmps
mov
leave
and
mov
pop
test
pop
cwde
and
mov
aad
sbb
adc
and
or
mov
arpl
stc
sub
jmp
or
call
iret
adc
jg
mov
pop
les
rol
pop
cmc
fdiv
shr
pop
cwde
dec
add
xchg
add
xchg
mov
xchg
ja
or
hlt
loope
cmp
inc
mov
xchg
mov
xchg
cwde
aad
lea
dec
sub
in
xchg
mov
mov
test
cwde
adc
and
popf
fs
ret
xor
adc
sub
outs
test
mov
mov
into
mov
std
iret
outs
(bad)
adc
jl
cwde
jns
and
jp
js
sar
mov
in
cs
shl
bnd
push
dec
pop
sub
popa
sub
sbb
bound
fcmovb
adc
cmp
sbb
or
add
xchg
mov
lods
push
test
adc
mov
mov
in
mov
and
mov
js
jp
sbb
mov
retf
push
in
ret
shr
repnz
int3
add
xchg
mov
mov
out
jp
dec
fisubr
mov
jg
fmul
xchg
fisub
cwde
cmps
sub
pop
loopne
xchg
pop
jmp
stc
and
(bad)
and
push
popa
dec
xchg
jns
ins
test
cwde
jns
outs
sub
or
mov
mov
js
ins
or
xor
pop
stos
cmp
sbb
sub
cwde
pop
das
stos
nop
push
push
lahf
mov
sub
jnp
sbb
mov
pop
cwde
imul
xchg
pop
dec
cs
push
mov
ret
cwde
sub
imul
cwde
rcr
push
jl
fs
cwde
cmps
mov
sahf
xchg
push
xchg
dec
(bad)
int3
sub
or
pop
and
outs
and
sbb
xchg
in
add
das
pop
popf
mov
add
cwde
test
das
pcmpeqb
cwde
adc
jg
neg
mov
cwde
adc
dec
inc
adc
mov
jge
pop
mov
sbb
cwde
out
repz
loopne
jo
inc
cwde
push
adc
cs
xchg
add
mov
(bad)
loop
cwde
test
sbb
mov
adc
push
test
movs
movd
mov
xchg
lea
pop
inc
neg
into
sar
ror
mov
jge
jmp
(bad)
fprem
outs
mov
xor
test
dec
not
pop
sub
pusha
push
shr
rol
stc
adc
xor
sbb
cmp
fsub
retf
in
and
not
pop
jmp
nop
xor
xchg
xchg
mov
stos
dec
js
(bad)
or
sbb
inc
mov
add
cwde
pop
cmp
ja
cmp
sub
outs
pushf
jo
sbb
sub
dec
push
popf
scas
mov
test
push
sub
push
sub
cwde
inc
scas
push
add
pop
in
mov
int
(bad)
cli
mov
adc
push
jp
cwde
xchg
mov
or
pop
data16
mov
shl
sub
clc
test
lds
pop
mov
dec
rcl
or
fcomp
ret
enter
mov
ins
lahf
xchg
xchg
mov
iret
fcomi
inc
lock
outs
adc
xchg
xchg
fwait
jns
in
mov
int3
rcr
sub
cwde
aaa
inc
arpl
lds
xlat
adc
clc
push
mov
test
dec
lock
es
test
out
sbb
clc
jno
mov
xor
push
scas
xchg
lods
imul
neg
pushf
loope
mov
outs
pop
cmp
cwde
loop
(bad)
inc
lods
arpl
jb
or
jl
sub
xchg
hlt
dec
push
mov
das
and
cwde
leave
mov
cwde
add
pop
mov
test
xor
mov
(bad)
jge
cwde
out
sub
popa
pop
in
or
cwde
jno
add
push
xor
leave
inc
jle
dec
xchg
xor
ficomp
shl
add
(bad)
loope
fld
icebp
cwde
imul
jns
pop
xchg
add
mov
cld
lea
cwde
jmp
or
jp
leave
call
xchg
and
xor
in
lahf
popf
aad
mov
fcomp
ret
ins
cwde
dec
je
mov
stos
stos
push
cwde
ret
xchg
js
iret
xchg
inc
jge
fmul
lock
aam
(bad)
inc
mov
imul
fisubr
movs
mov
loopne
adc
xchg
push
cs
push
jns
sbb
imul
scas
xor
or
jmp
shr
ins
test
cmp
imul
cmp
sbb
jg
pop
push
clc
fdivr
test
sbb
mov
adc
add
jecxz
push
mov
mov
inc
push
retf
adc
cmp
xor
sbb
mov
mov
stc
mov
daa
test
jl
mov
idiv
add
addr16
cdq
mov
mov
jecxz
fistp
jl
inc
xor
pop
pop
cmc
push
jo
xchg
push
and
mov
xor
int
inc
push
imul
fwait
push
(bad)
mov
push
sub
sbb
mov
ret
icebp
ins
push
jno
aaa
inc
(bad)
mov
cwde
in
push
mov
movs
pop
sbb
xor
sub
mov
xor
aam
imul
popf
daa
cmp
mov
jecxz
cwde
inc
movlps
test
test
test
pop
mov
test
lds
shr
cmp
dec
call
xchg
push
and
das
addr16
push
je
sbb
add
push
xor
mov
sahf
adc
or
js
cwde
stos
mov
fld
sub
retf
out
jmp
xchg
test
mov
adc
or
outs
and
dec
adc
sbb
js
xchg
jnp
push
jne
dec
fcmove
(bad)
jno
dec
clc
pop
scas
mov
movs
aam
out
mov
pop
and
pop
fldenv
mov
mov
les
ja
aas
mov
sbb
mov
sub
cmc
push
unpckhps
js
dec
out
add
or
inc
pusha
js
movs
js
mov
xchg
popa
cmp
cwde
sti
aam
mov
cwde
pop
fld
ret
push
in
cwde
push
loopne
repnz
jl
pop
pop
cmp
inc
sub
cwde
pop
and
es
imul
xchg
and
lea
lods
cwde
mov
xchg
fsubp
js
out
(bad)
push
(bad)
(bad)
jmp
icebp
ret
jnp
inc
dec
jns
cwde
dec
push
xchg
fnsave
mov
jo
sub
cmc
and
jle
pusha
mov
retf
hlt
rcl
dec
cdq
cwde
ror
mov
dec
cwde
mov
repz
jbe
pop
cs
sub
shr
fdiv
xor
xchg
pop
imul
hlt
fcom
call
popf
bound
mov
sbb
in
or
retf
in
add
nop
inc
push
mov
mov
jo
data16
(bad)
test
xchg
jno
in
retf
mov
push
cmp
cs
rcl
xor
xlat
mov
out
sbb
movs
mov
cwde
add
push
es
mov
sub
xor
cwde
push
and
shl
mul
int3
into
sti
ins
mov
je
call
push
adc
pop
cmp
into
clc
pop
sub
std
out
mov
xchg
push
pop
xchg
(bad)
jmp
xchg
pop
cmp
in
and
mov
lock
sub
push
pmaxsw
adc
dec
jnp
xchg
jo
xchg
arpl
cwde
mov
sbb
mov
adc
cmp
enter
test
inc
cwde
dec
pop
stos
push
retf
sub
pushf
sbb
(bad)
rol
xchg
movs
mov
xchg
retf
jge
mov
scas
shl
jl
cwde
call
mov
jae
dec
test
push
fld
lahf
in
leave
xchg
loopne
xor
(bad)
icebp
mul
push
lock
xchg
test
arpl
push
xchg
sti
sub
dec
ss
pop
popa
cwde
(bad)
mov
rol
inc
push
inc
cwde
xchg
xor
enter
stc
cmp
mov
in
mov
out
daa
xor
xchg
popa
out
xchg
pop
int3
fsub
loop
inc
arpl
and
scas
sub
gs
mov
jmp
cwde
hlt
enter
sub
dec
jno
dec
cs
iret
test
pop
xchg
dec
leave
xchg
sub
mov
pop
pop
and
xchg
inc
pusha
dec
push
pop
cs
jp
int
sub
xchg
mov
jb
or
sti
cmp
sub
adc
mov
dec
push
push
dec
mov
push
loop
add
lea
out
pop
ds
jnp
ret
stos
mov
xor
dec
push
jge
xchg
add
push
pop
ret
cmp
and
sti
fs
inc
sbb
or
push
xchg
sbb
mov
sub
sbb
mov
into
mov
pop
pop
lods
enter
retf
mov
idiv
rol
lds
mov
popf
jg
call
test
lahf
xor
popa
push
cmp
fsubr
mov
sbb
mov
dec
sub
stc
scas
adc
sbb
xchg
inc
mov
sbb
sbb
int
jbe
lds
sbb
cmp
fs
pushf
mov
jg
jns
push
adc
and
pop
in
inc
xchg
xchg
das
push
mov
repnz
add
loopne
arpl
stc
or
mov
cwde
call
call
push
dec
pusha
push
xor
mov
sahf
jo
mov
enter
sbb
sar
cmp
pop
ins
jne
mov
sbb
out
add
pop
xchg
sbb
mov
push
and
sbb
dec
ret
or
push
push
cwde
add
lods
enter
mov
lods
cmps
fiadd
mov
or
xchg
jle
xchg
sub
icebp
adc
xchg
mov
sbb
inc
add
xchg
jb
or
dec
xchg
mov
mov
xor
push
cwde
dec
jae
inc
repnz
bound
or
mov
xchg
sbb
cli
int
(bad)
cwde
ret
das
aaa
and
xor
test
sub
mov
or
mov
mov
sbb
pop
jns
sub
shl
mov
adc
mov
retf
mov
mov
addr16
pop
retf
(bad)
clc
xor
out
cwde
jne
push
idiv
pop
sbb
jae
push
sbb
mov
ja
cwde
pop
xchg
inc
pop
cmp
mov
cwde
mov
pop
add
mov
inc
or
enter
jno
mov
xchg
mov
scas
xchg
loope
popf
mov
imul
mov
loop
pop
arpl
pop
(bad)
in
xchg
mov
fiadd
es
sahf
jl
gs
or
inc
xchg
lds
(bad)
aaa
jge
bnd
xchg
ds
in
retf
loopne
jae
pop
xchg
cmp
pop
mov
or
xchg
popf
lahf
data16
inc
pop
jp
jecxz
retf
in
stos
and
fiadd
loop
xor
sahf
stos
jg
cwde
xor
in
cmc
adc
push
cwde
adc
test
push
mov
xchg
fs
pop
inc
xor
cmp
ret
xchg
add
(bad)
out
mov
adc
fidivr
cwde
jne
dec
jbe
add
stc
cwde
push
adc
sbb
arpl
xchg
addr16
out
sbb
push
leave
inc
js
jbe
test
test
(bad)
xlat
or
pop
jne
xchg
adc
sbb
sbb
iret
stos
pusha
push
stc
sub
(bad)
xor
cwde
sub
ins
dec
(bad)
cmp
xchg
icebp
jo
mov
cwde
lahf
sub
in
je
mov
fcomp
arpl
jo
popf
fldenv
push
sub
dec
gs
clc
inc
mov
mov
xchg
xchg
in
adc
add
jle
cld
jge
dec
cwde
addr16
mov
(bad)
cmp
lahf
mov
xchg
xlat
adc
imul
fcom
adc
adc
jge
loop
fdivr
push
arpl
scas
pop
add
cmp
push
add
ins
cmp
in
add
sbb
clc
jns
(bad)
jg
pusha
xchg
pop
outs
push
(bad)
jmp
sub
retf
loopne
repnz
sbb
push
sahf
cwde
xor
jbe
adc
outs
mov
fcomp
sar
add
and
cmp
retf
add
push
js
xchg
imul
jmp
jmp
cwde
aaa
clc
dec
mov
cwde
cli
out
aas
add
or
push
push
and
sub
je
adc
mov
lods
adc
push
stc
jae
mov
sub
cwde
push
pop
dec
mov
sbb
and
dec
mov
aad
fidivr
aaa
repz
cmp
cwde
(bad)
push
mov
sbb
and
inc
ins
cmp
sub
xchg
arpl
dec
pusha
cwde
and
not
es
xor
lock
(bad)
cwde
and
outs
dec
push
fnsave
pop
jno
lods
(bad)
call
mov
leave
xchg
(bad)
sbb
push
daa
xchg
jo
inc
pop
mov
shl
enter
retf
and
sti
fcomp
stos
std
hlt
and
neg
sub
cmp
add
cmp
mov
movs
push
cwde
sub
ret
cwde
ds
add
push
jp
movs
xchg
ja
inc
sbb
jp
jne
neg
xlat
mov
hlt
retf
sbb
outs
mov
cwde
jo
ds
inc
jno
push
cwde
test
pop
iret
xchg
sbb
sbb
movs
jmp
pop
data16
mov
repz
jbe
lahf
test
cmp
retf
arpl
pop
xchg
stos
cmp
nop
sub
jp
scas
xchg
mov
mov
mov
aas
xchg
out
cmp
push
cli
adc
mov
cwde
fidivr
inc
clc
cwde
sbb
xchg
lock
repz
push
xlat
or
mov
pushf
inc
push
pop
fldcw
jmp
sbb
fs
and
inc
xchg
bound
retf
jbe
adc
sub
scas
test
add
mov
or
and
das
cmp
add
cwde
stos
fist
cwde
leave
ror
test
sbb
xchg
in
lods
rol
test
jl
test
retf
scas
sbb
pusha
mov
and
int3
jp
cwde
push
adc
jne
inc
lock
mov
pop
add
lods
xor
cwde
sbb
shl
sub
mov
jmp
test
inc
dec
lods
loop
xchg
inc
sbb
ss
cmps
xchg
mov
movs
sub
pop
xor
jmp
aaa
ins
test
inc
cwde
adc
movd
push
mov
imul
out
mov
stos
retf
aaa
adc
sub
dec
dec
cwde
mov
pop
(bad)
icebp
mov
cwde
or
jno
push
jl
pop
ins
jae
push
lahf
test
mov
mov
outs
cdq
inc
inc
push
add
sar
jmp
and
into
push
push
leave
js
jg
add
in
repnz
jb
mov
dec
dec
aas
cwde
aam
jecxz
cmp
xchg
cmp
mov
out
in
retf
add
sti
int
cwde
in
movs
mov
mov
pop
jecxz
shl
cmps
cmp
mov
cwde
mov
sbb
mov
adc
(bad)
sub
pusha
lahf
jne
into
call
sub
sub
mov
(bad)
fucomp
push
int
jl
xchg
imul
ror
pushf
pop
cmp
fsub
(bad)
xor
sbb
mov
cmps
push
cwde
int3
fimul
aam
cli
ret
add
imul
add
(bad)
(bad)
and
and
retf
cs
sub
add
mov
cwde
leave
jmp
push
jle
xor
add
xchg
cwde
lock
xor
movs
xchg
sbb
mov
sub
stos
xchg
fldln2
jmp
test
imul
xchg
rcr
xor
or
and
dec
adc
sbb
mov
push
sbb
cli
mov
mov
push
or
push
or
cwde
xchg
mov
mov
out
cwde
or
or
in
add
add
js
ret
ror
adc
inc
jmp
mov
sub
cwde
push
sub
daa
inc
cmc
jo
xchg
cmp
fwait
(bad)
or
xor
sahf
jl
jge
lods
sbb
lods
jle
and
cdq
(bad)
sub
addr16
loope
sbb
or
jae
dec
out
cmp
in
sub
sbb
test
stc
sar
enter
cmp
gs
inc
push
add
add
xchg
int
icebp
push
add
loope
cld
push
test
or
sahf
sbb
cwde
jae
iret
out
adc
mov
jmp
in
fsub
sbb
adc
pop
in
stos
cwde
mov
or
jle
and
xor
cwde
jo
sar
cmc
jmp
cwde
pop
lds
mov
mov
xchg
bound
xlat
pop
or
loope
out
push
pop
jl
aam
mov
inc
or
adc
ss
lock
daa
xchg
(bad)
int
jg
xchg
sub
cmp
cmp
jmp
fdivr
outs
jg
addr16
mov
daa
xor
push
jmp
mov
push
mov
and
inc
ins
cwde
popf
(bad)
int
mov
or
dec
imul
xor
inc
sbb
pop
sbb
neg
adc
mov
mov
sbb
call
cwde
jnp
test
call
add
sbb
mov
(bad)
push
lods
lods
cwde
lea
fstp
cwde
pop
cmp
mov
cwde
aam
inc
jg
clc
pushf
test
cwde
inc
arpl
add
test
out
or
cmps
mov
push
xchg
std
outs
inc
in
pop
adc
xchg
push
xor
or
pop
jmp
xchg
in
sbb
sub
popa
add
xlat
sub
mov
xchg
shl
inc
fcomp
inc
xchg
(bad)
mov
test
xchg
sub
add
rcr
repz
loop
cmp
mov
and
cmp
shl
cwde
ret
neg
cli
lds
sbb
loop
cwde
lods
ror
inc
out
data16
hlt
inc
pusha
mov
fidivr
rcr
stc
les
jmp
lahf
jp
fdivr
push
movs
xchg
mov
jecxz
mov
cmp
arpl
cwde
cmps
call
mov
into
loope
and
dec
adc
xchg
je
add
scas
mov
or
sbb
mov
(bad)
fdivr
cwde
xchg
fs
gs
jo
cmp
mov
pushf
xchg
sub
out
enter
cwde
aad
fwait
pop
sub
outs
push
shl
scas
out
(bad)
mov
and
jle
fnstenv
sbb
adc
mov
xor
mov
push
or
cdq
push
push
dec
cs
fsub
call
dec
lock
pop
fmul
test
mov
in
xchg
cmp
sub
imul
xlat
aad
in
mov
cdq
sub
stc
adc
sbb
mov
lods
fdiv
(bad)
cwde
shr
mov
cmp
sub
pop
xchg
mov
cli
cwde
pop
pop
dec
cs
and
repnz
push
movhps
sbb
ja
sbb
lahf
mov
sub
push
sbb
or
pop
imul
fimul
dec
test
out
mov
mov
mov
mov
sub
imul
scas
gs
inc
xchg
jl
sbb
movs
sub
cwde
std
push
and
mov
(bad)
push
mov
loop
scas
xchg
push
outs
mov
rol
fisub
add
adc
push
jbe
xchg
cmps
lods
pop
cmp
jle
pusha
lahf
xchg
jl
test
outs
push
pop
xchg
xchg
cwde
out
adc
jbe
jecxz
iret
sub
addr16
or
gs
arpl
jg
mov
xor
cwde
xor
sub
xchg
add
cwde
imul
pop
and
adc
sahf
xchg
cwde
cmp
or
loop
mul
push
mov
push
(bad)
in
outs
aam
cmp
xor
push
cld
fmul
fcom
sbb
cwde
lds
jg
sub
out
xchg
call
adc
inc
cwde
or
(bad)
stos
out
test
dec
scas
cwde
fisubr
xchg
add
mov
add
xchg
and
popf
cmps
xor
jecxz
outs
cwde
pop
push
sub
ror
leave
pop
ins
jo
jmp
sti
push
and
mov
xor
xchg
or
jo
lods
cwde
fcomp
push
mov
mov
mov
cwde
daa
bound
das
loopne
fwait
jp
cwde
and
xor
lock
call
jecxz
adc
aas
retf
mov
daa
jle
aam
cwde
mov
test
push
and
jno
xchg
xor
sbb
ror
mov
repz
arpl
push
fadd
ja
scas
dec
adc
call
adc
cwde
pop
cli
int3
pop
jecxz
enter
cmp
lock
push
jmp
cwde
ins
dec
xchg
jp
inc
movs
icebp
mov
pop
ret
sbb
leave
add
scas
(bad)
or
jl
mov
cs
sbb
outs
lds
in
cli
inc
cmps
into
outs
jo
cwde
enter
sub
das
push
push
push
xor
ficom
outs
sub
push
inc
das
sbb
cs
sbb
cmp
lock
(bad)
jl
sub
push
jle
sti
mov
punpckhwd
out
nop
shl
push
scas
pushf
nop
xchg
push
iret
aas
mov
and
or
(bad)
fs
cmp
popf
xchg
shl
div
jmp
lahf
into
dec
ss
shl
cld
xlat
stos
jnp
xchg
shl
test
sub
mov
iret
cmp
pop
jg
popf
sub
jmp
in
inc
push
je
xchg
xchg
(bad)
leave
sub
jge
test
fstp
add
imul
xor
cwde
fisubr
dec
jecxz
mov
sub
je
cmp
mov
jne
test
test
repz
xor
jnp
cmp
pop
iret
or
jg
jnp
lds
mov
fldcw
push
sub
sub
cwde
jb
jno
call
or
and
retf
push
mov
leave
hlt
inc
cwde
pop
add
daa
mov
jns
call
clc
cmc
sbb
mov
mov
mov
ss
xchg
arpl
mov
mov
mov
mov
imul
pop
inc
jmp
scas
cwde
div
xchg
and
or
mov
xor
loop
xchg
cld
add
dec
fwait
jmp
sub
ja
mov
ja
dec
(bad)
jmp
pop
xchg
arpl
fwait
icebp
sbb
push
call
popf
lahf
push
push
je
pop
dec
sub
(bad)
mov
sbb
jmp
ss
cwde
jmp
dec
cwde
add
std
lea
(bad)
mov
push
lahf
stos
adc
mov
sbb
or
es
pop
mov
sub
out
or
xchg
scas
sbb
mov
jmp
pop
arpl
and
xchg
mov
ins
mov
(bad)
lods
cld
xchg
int3
nop
ss
or
ss
cmc
mov
add
out
cmp
loopne
retf
inc
sub
pushf
retf
fbstp
rep
cmp
cdq
xor
rcr
mov
sub
cwde
shl
je
cs
or
pop
aas
or
push
call
sbb
jns
add
mov
mov
pop
ins
fwait
mov
add
push
leave
out
stos
loope
mov
xor
mov
sbb
add
add
pop
mov
push
rcl
mov
rcl
out
call
cwde
fwait
inc
bound
in
jp
cwde
sbb
or
xchg
sar
mov
vmaxpd
push
pusha
push
inc
test
push
inc
mov
xor
mov
shl
fucomp
neg
xor
push
test
mov
loopne
cwde
bound
int3
mov
jecxz
cmp
retf
lea
mov
xchg
cwde
shl
sahf
arpl
push
clc
xchg
int3
pop
repz
xor
mov
dec
shl
in
daa
cwde
jne
sub
add
and
retf
mov
pop
dec
pusha
idiv
je
test
hlt
mov
jmp
push
lea
push
sub
cwde
jb
or
push
and
cwde
lods
ret
sub
mov
stos
loopne
iret
(bad)
add
(bad)
cld
and
imul
jns
nop
jle
or
stos
ficomp
sbb
cdq
clc
xor
xchg
(bad)
jl
je
xchg
mov
mov
mov
dec
cwde
sub
xor
ja
sub
ja
and
sbb
in
cwde
push
jl
test
cwde
retf
add
in
dec
xchg
pusha
sbb
mov
aaa
mov
xchg
jno
inc
pop
pop
mov
push
pop
pop
dec
jne
or
(bad)
sbb
cmp
xchg
hlt
out
inc
ins
test
clc
scas
xchg
pop
jnp
mov
or
pop
sti
xlat
mov
sbb
mov
cwde
inc
call
(bad)
mov
jae
cmps
xchg
shl
dec
test
mov
(bad)
add
or
xlat
imul
cmp
int
xchg
xchg
cmp
pop
adc
xor
pop
mov
and
dec
cwde
pop
jne
push
mov
jmp
clc
lds
or
mov
ja
retf
cwde
xor
fidivr
xchg
push
bound
adc
xchg
dec
fist
cmps
mov
cwde
clc
loop
and
sub
sub
stc
pusha
push
sbb
inc
cli
push
and
jb
or
cmp
cwde
clc
sub
xor
mov
inc
xchg
sbb
test
jns
xchg
(bad)
xor
jecxz
(bad)
rcl
sbb
fst
add
jecxz
mov
cdq
popa
in
cdq
mov
mov
inc
pop
loope
push
mov
daa
push
gs
clc
call
cwde
xchg
push
jl
mov
xchg
clc
iret
push
adc
fimul
idiv
xchg
xchg
sbb
repz
pop
mov
fimul
std
(bad)
cwde
stos
fbld
(bad)
xchg
fs
lods
pusha
pushf
mov
test
movs
and
sahf
aam
ins
xchg
and
arpl
ret
pop
add
retf
loopne
mov
mov
enter
imul
dec
pop
or
test
pop
stos
cwde
and
mov
les
xchg
cwde
mov
cdq
sub
retf
xchg
je
retf
nop
cmp
xchg
add
or
cwde
adc
adc
jge
mov
xchg
pop
xor
mov
pop
outs
xchg
pop
pop
cmp
mov
aam
jne
mov
aad
inc
fcom
and
imul
fcmovb
or
jns
retf
xchg
xor
cmps
adc
lds
pop
mov
bound
ins
inc
js
or
jle
sbb
push
adc
sbb
fidivr
rcl
mov
retf
fwait
cwde
pop
adc
int3
cmp
adc
sti
stc
or
or
call
popa
aas
push
sub
xchg
inc
mov
dec
ss
loope
cwde
sub
mov
mov
adc
push
test
sub
dec
cwde
push
jno
push
and
and
mov
add
cmp
push
lahf
xchg
stos
mov
xchg
dec
inc
sbb
lahf
or
sbb
arpl
mov
xchg
jmp
sahf
cwde
enter
int
push
cs
inc
push
das
shl
repz
mov
dec
gs
rcl
mov
xchg
out
jp
cwde
push
movs
mov
xor
add
cwde
dec
test
xchg
in
inc
xchg
lock
jmp
pop
sub
in
mov
cwde
jo
jp
retf
test
loopne
cmc
sub
adc
dec
pop
cwde
xchg
jae
test
imul
adc
imul
stos
add
hlt
push
or
pushf
ja
xsaves
or
lods
movs
pop
jne
or
lahf
test
push
aas
cwde
arpl
jle
aad
sbb
pushf
test
xchg
push
movs
das
xor
call
outs
and
mov
punpckldq
movs
push
test
adc
pop
hlt
mov
sub
js
xchg
mov
imul
cmp
std
(bad)
in
inc
sub
jmp
pop
int3
cmp
in
xor
pop
call
mov
mov
inc
dec
push
stos
movs
cmps
inc
fsubr
adc
icebp
cwde
inc
sbb
leave
mov
pusha
cwde
cmp
(bad)
mov
or
mov
movs
push
xchg
sbb
neg
out
push
cs
repz
fidivr
cwde
imul
cdq
ins
add
jo
test
das
and
gs
fucomip
cmps
xchg
call
jmp
sahf
icebp
stc
test
add
outs
xchg
lea
cdq
push
retf
ss
cmc
sbb
jl
cwde
or
(bad)
out
imul
into
sar
xchg
jecxz
cwde
out
mov
xor
lea
fsub
push
cwde
sub
dec
add
mov
push
inc
mov
xchg
loope
les
mov
mov
push
(bad)
call
outs
lds
out
or
add
jl
jae
les
es
aad
xor
(bad)
mov
cwde
or
dec
push
lahf
je
xor
push
mov
mov
cmp
test
out
leave
loopne
pop
jmp
sbb
(bad)
mov
imul
js
cs
cdq
je
push
fwait
cmp
xchg
pop
add
cmp
dec
mov
jl
int
stc
inc
xchg
stos
jmp
pushf
push
cwde
add
sahf
jo
cmps
and
xchg
adc
jecxz
in
xor
lahf
xor
adc
jg
inc
shl
int3
lods
sbb
dec
jmp
sub
out
js
jnp
in
or
push
xchg
js
ficomp
pop
aas
bound
inc
mov
imul
or
cdq
repz
movs
mov
jno
pushf
mov
mov
or
in
adc
dec
or
dec
call
xchg
xchg
cwde
jo
xchg
popa
cmp
mov
xlat
mov
ss
xor
sbb
jp
popf
mov
nop
js
pushf
jns
dec
push
dec
lahf
pop
add
xor
dec
or
and
aaa
ret
lahf
test
cwde
mov
sbb
pop
lock
xchg
or
or
push
jmp
outs
xor
dec
cwde
test
pop
mov
mov
cwde
leave
cmp
test
adc
cs
repz
sbb
inc
xchg
jb
mov
add
js
cmp
shr
imul
ror
rcl
fdiv
(bad)
test
mov
fldenv
out
cwde
(bad)
test
sahf
dec
shl
mov
std
cmp
into
mov
adc
mov
sub
mov
test
sbb
sbb
in
cmp
dec
stos
mov
cwde
xchg
push
(bad)
into
cwde
imul
jg
pop
pop
mov
mov
and
sub
sub
adc
mov
cli
lds
int3
dec
imul
xor
(bad)
cwde
call
movs
xchg
rol
push
jns
xor
std
xchg
jp
cmps
bswap
rol
adc
dec
mov
mov
dec
xchg
test
dec
dec
sbb
ins
jle
pop
mov
xchg
in
xchg
aad
push
xchg
mov
mov
call
cmp
cwde
xchg
inc
(bad)
shl
lahf
push
es
js
repnz
movs
std
xchg
adc
xchg
ins
fdivp
lea
iret
sbb
dec
out
(bad)
mov
daa
arpl
cmp
mov
cdq
sub
mov
test
daa
call
inc
(bad)
dec
sbb
adc
pop
(bad)
imul
sbb
aas
loopne
icebp
xchg
mov
pop
int3
mov
jns
inc
out
cli
retf
and
xchg
jbe
cwde
dec
or
loope
or
ins
les
or
cmp
pop
mov
clc
inc
pop
jnp
inc
sub
jp
mov
je
in
cmp
dec
sbb
into
test
cli
and
push
push
mov
push
mov
and
nop
cwde
sbb
push
in
pop
jp
mov
push
xlat
pop
js
sbb
inc
pop
rcl
push
cli
imul
es
cwde
inc
sub
stc
push
icebp
xchg
(bad)
sub
inc
adc
loope
mov
sub
dec
xchg
in
jo
mov
jo
xchg
push
and
dec
mov
(bad)
scas
fcomi
or
fnsave
jmp
shl
fdivr
push
inc
jp
test
sbb
inc
cmp
jb
pop
outs
xlat
push
hlt
mov
loope
cwde
jp
dec
sub
jne
pop
push
movs
inc
xchg
inc
rcr
div
cwde
lahf
lock
sbb
in
push
cwde
out
add
mov
mov
xchg
je
sbb
into
xchg
xchg
mov
pop
cs
fldenv
pop
stos
test
adc
jge
aas
cwde
mov
push
jmp
xchg
inc
and
sbb
mov
cdq
aas
push
mov
xchg
test
fild
into
outs
add
fisubr
clc
mov
les
repz
stc
popf
cmp
das
mov
inc
sbb
inc
cmp
test
adc
in
movs
cwde
addr16
xchg
mov
push
mov
and
je
cwde
(bad)
ficom
pop
popf
out
jge
lock
and
xchg
and
add
cmp
adc
out
xor
mov
mov
jmp
jle
retf
paddusb
(bad)
fnstsw
pop
fnstsw
hlt
out
cwde
or
loope
pop
mov
(bad)
ficom
mov
iret
test
(bad)
mov
xchg
pop
push
dec
xor
fidiv
xchg
mov
xchg
cwde
xchg
popf
fdiv
retf
jno
pop
cli
cwde
dec
push
test
sbb
mov
shr
ret
mov
mov
les
xor
icebp
push
xor
push
out
mov
out
xchg
ins
imul
or
pop
dec
or
imul
mov
mov
or
push
in
call
xchg
cdq
sub
push
popf
aaa
pop
dec
pusha
dec
cwde
stos
cmps
mov
retf
movs
arpl
cld
add
fisub
cwde
aas
lds
inc
mov
pop
int3
daa
cwde
fs
fnstcw
call
and
cwde
pop
imul
cwde
inc
push
pop
popf
dec
xor
retf
(bad)
mov
cmp
pop
sar
dec
push
push
scas
sub
fs
dec
cmp
loope
cwde
xor
dec
stc
nop
cwde
in
and
xchg
mov
in
int
iret
popa
in
pushf
xchg
fcmovu
lods
mov
rcl
in
xchg
and
sub
cdq
gs
xchg
mov
int3
daa
cmp
mov
cmp
sti
mov
mov
scas
push
lahf
xchg
stc
cmp
sbb
inc
xchg
adc
jmp
jne
xor
pop
or
jne
xchg
cwde
shr
mov
jo
add
out
jle
cwde
mov
fisubr
cwde
jnp
mov
cwde
dec
das
rcl
add
xor
adc
cwde
dec
hlt
push
sub
push
inc
es
xchg
mov
pop
jns
cmp
test
xor
sub
leave
xchg
imul
cwde
(bad)
lods
(bad)
dec
imul
sbb
pop
push
movs
mov
(bad)
loopne
fdivr
dec
add
loop
adc
mov
fcmovne
cwde
out
in
iret
cmp
adc
cwde
and
inc
jmp
sbb
push
sub
jg
mov
add
xchg
fwait
popf
cmps
mov
jo
lock
test
and
mov
cmp
sahf
jle
mov
movs
imul
xor
push
push
dec
cdq
outs
fisubr
js
add
loopne
jmp
imul
cwde
popf
gs
add
ror
repz
leave
test
cdq
adc
int3
push
rcl
xor
xchg
xchg
jae
jg
sub
call
dec
and
(bad)
rol
or
scas
mov
inc
ret
sub
mov
(bad)
hlt
xchg
loopne
clc
int
sbb
cmp
in
mov
add
popf
inc
out
sub
adc
rol
ins
xor
add
into
add
pop
call
adc
pop
fimul
cld
cmps
mov
mov
cwde
dec
push
inc
pusha
push
inc
mov
clc
cmp
cmc
ins
pop
mov
cwde
lods
xchg
add
xchg
in
cwde
xchg
push
sub
aas
or
mov
aaa
movs
jns
mov
in
into
cmp
loop
jle
xchg
fdivr
clc
out
fnstenv
sbb
loope
cli
cmp
test
xchg
mov
pusha
xchg
xchg
rcr
pop
adc
push
test
mov
dec
push
call
push
push
xchg
fucomi
fbld
mov
xor
mov
ret
loop
jmp
dec
lods
mov
mov
nop
push
cmp
add
xchg
mov
(bad)
mov
adc
jbe
(bad)
in
(bad)
pop
xchg
sbb
dec
dec
dec
shl
lock
inc
adc
xchg
pop
mov
mov
loopne
mov
int
cmp
mov
adc
cwde
pusha
popf
sub
das
and
js
sbb
in
or
jecxz
cmps
mov
lahf
out
call
ins
test
jle
inc
jg
bound
sbb
dec
xchg
xchg
stos
imul
mov
xlat
pop
xchg
mov
inc
add
aad
mov
lea
cwde
test
mov
push
pop
dec
push
outs
outs
xchg
xchg
ins
cdq
arpl
out
add
imul
(bad)
cdq
dec
cwde
add
lods
les
adc
test
enter
cmp
scas
ins
hlt
jbe
popa
fcom
xchg
adc
push
pop
mov
push
jns
mov
and
add
dec
stos
xchg
dec
sbb
popf
bnd
inc
cwde
inc
outs
xchg
mov
push
arpl
jmp
pop
mov
lahf
sbb
ja
jge
in
push
scas
pop
push
mov
lods
loope
leave
popa
cwde
in
mov
addr16
cwde
jmp
and
iret
icebp
add
fsub
add
mov
ins
inc
hlt
mov
xchg
cmp
mov
pop
or
sbb
neg
xchg
inc
push
lods
loope
jl
ins
cdq
mov
xchg
ret
ficomp
dec
jmp
(bad)
outs
dec
into
stos
inc
xchg
add
or
push
push
mov
idiv
cwde
call
jnp
ror
xor
and
cwde
mov
enter
or
jmp
loopne
not
mov
out
cmps
xor
clc
push
fldcw
repz
sbb
in
sbb
inc
and
jae
rcl
inc
pop
lahf
loop
pop
repnz
jb
in
setp
push
sub
mov
cmp
lahf
mov
sbb
pop
popa
jle
test
push
lahf
sub
sub
or
add
jmp
pop
sbb
mov
xor
cwde
push
adc
out
(bad)
jl
cwde
pop
loop
push
pop
imul
sar
scas
lods
push
sahf
shr
pop
pop
das
ins
inc
ins
stos
bsr
add
xchg
js
and
sub
dec
sub
leave
clc
int
dec
rcl
cwde
ffreep
add
loop
pusha
test
push
ja
add
jbe
inc
xchg
neg
push
cwde
push
or
sub
push
arpl
fisttp
leave
iret
sub
int
xor
lods
add
mov
fsub
cmp
jg
int
es
call
mov
cmp
inc
xor
cdq
sbb
xchg
test
ds
pop
in
pop
pop
gs
ficom
push
repnz
(bad)
cmc
pop
fistp
clc
xchg
out
sar
cwde
add
js
push
icebp
push
or
icebp
mov
test
outs
movs
push
out
push
mov
add
pop
mov
je
repz
dec
dec
or
lea
dec
stos
or
and
mov
sbb
xor
sub
push
mov
mov
push
sbb
jge
rol
cwde
ret
pop
push
cmp
mov
jnp
mov
(bad)
mov
cwde
fnstenv
push
fisub
adc
xchg
sub
jecxz
fcom
dec
sbb
xchg
jle
inc
push
sub
mov
enter
jge
sbb
dec
mov
fwait
mov
test
xchg
and
pusha
out
cwde
push
and
je
in
dec
cwde
mov
and
xchg
mov
retf
ffree
pop
(bad)
lahf
ins
jnp
stos
cwde
mov
inc
sbb
or
sub
fadd
es
xchg
cwde
jo
aas
xchg
bound
ror
scas
rcr
enter
jmp
sub
or
jo
and
test
mov
(bad)
(bad)
cwde
call
cmc
fmul
bound
sub
inc
test
retf
ss
lahf
rcr
cwde
je
ret
cwde
ficomp
inc
mov
cmps
mov
xchg
mov
imul
cwde
fidivr
scas
mov
cwde
test
jmp
push
jge
dec
mov
add
push
push
ins
and
jle
pop
push
in
xchg
jl
retf
mov
nop
mov
push
push
jmp
adc
and
cwde
jns
sbb
mov
push
outs
ins
jnp
pop
push
outs
jbe
ins
jecxz
div
aaa
mov
inc
imul
add
out
shl
mov
enter
xor
cmp
mov
sub
pusha
push
inc
jp
push
sbb
pop
fcomp
or
test
push
shl
nop
inc
sub
xchg
dec
push
(bad)
sbb
cwde
xor
call
retf
test
cmp
and
and
nop
les
push
(bad)
jle
cmp
movs
jmp
push
je
pop
jle
mov
adc
sub
cwde
cdq
imul
es
repnz
cwde
mov
pusha
bound
push
mov
stc
retf
mov
clc
xor
xchg
bound
jp
fild
jne
in
add
xchg
cli
int3
shr
mov
xchg
sub
sbb
aam
push
push
mov
jg
add
and
cmp
jbe
xchg
mov
adc
shr
call
mov
pop
cwde
ins
push
fidiv
xor
push
sar
ret
inc
push
inc
sbb
xchg
jl
mov
jle
shr
dec
mov
jp
jo
clc
push
pop
mov
and
or
into
cmp
mov
mov
xchg
jp
jp
push
push
cwde
cld
sbb
xor
arpl
cmps
mov
fsubr
adc
lock
jmp
adc
iret
adc
test
cwde
jo
cld
clc
jmp
cwde
int
sub
xchg
(bad)
(bad)
out
leave
repnz
fsubr
js
jp
xchg
xchg
data16
dec
in
or
rcr
ins
mov
sub
in
std
sub
sbb
lahf
mov
int3
sub
dec
xchg
mov
ret
inc
sbb
cwde
outs
bound
js
xchg
xchg
mov
loop
add
inc
dec
add
in
jnp
cmp
bound
imul
ror
jl
or
mov
lods
add
aaa
cwde
push
sbb
cs
mov
and
ja
xor
sub
aaa
and
call
adc
loope
push
shr
popa
scas
xchg
fcom
jle
or
jge
call
jecxz
or
or
inc
pop
js
out
in
pop
fcom
and
call
pusha
mov
add
fsubp
inc
into
mov
add
leave
mov
lods
pop
push
push
fadd
or
adc
sub
loopne
add
push
addr16
nop
xchg
test
sahf
lahf
arpl
xchg
test
jl
pop
pop
push
pop
icebp
pop
arpl
js
push
sbb
inc
scas
mov
pop
mov
pusha
cmp
arpl
lods
(bad)
das
loopne
mov
ss
inc
pop
sbb
movs
or
imul
xor
call
fiadd
inc
mov
lock
cwde
mov
dec
fucomp
ja
clc
xchg
xor
fs
adc
ss
mov
rcr
pop
mov
add
imul
retf
jne
jo
mov
daa
imul
popa
je
or
pop
fs
jns
dec
mov
fistp
push
xchg
int
shl
js
fld
xchg
push
scas
push
pop
and
cmp
pop
jecxz
out
aam
xchg
outs
sahf
adc
hlt
jmp
push
into
xchg
enter
xchg
retf
pop
cmp
lds
ja
ins
das
cmp
std
bound
loopne
push
jmp
and
jnp
pop
mov
push
cmps
push
or
mov
xchg
aaa
and
push
cwde
sub
add
cs
cwde
pop
push
retf
xchg
sub
cwde
mov
and
cwde
mov
ficomp
cwde
fld
sub
out
jle
cwde
ret
mov
in
fadd
out
jle
into
mov
or
lods
mov
call
ss
aaa
cmp
adc
dec
retf
idiv
icebp
mov
imul
mov
inc
mov
inc
xchg
sbb
cwde
les
adc
mov
pop
cmp
es
mov
mov
test
cmp
cdq
xchg
inc
fsub
cmp
pop
mov
and
or
ret
dec
rcr
jno
bound
sahf
addr16
jmp
dec
jmp
inc
xchg
pop
or
push
jmp
lahf
fadd
retf
inc
cs
xchg
mov
clc
sar
and
popf
jno
rcl
jle
nop
or
inc
pop
das
dec
push
stos
push
imul
jns
test
test
ret
adc
push
ins
jl
dec
std
fist
loopne
test
push
gs
sub
cwde
push
add
in
mov
and
cwde
add
sbb
dec
push
fnstenv
cwde
aaa
pop
jo
mov
xor
mov
mov
mov
test
sbb
cwde
xchg
ret
in
and
inc
lahf
retf
loope
imul
cwde
(bad)
int3
out
xchg
outs
or
scas
pusha
loope
pop
cmc
cmps
hlt
and
or
jecxz
data16
leave
div
inc
mov
loopne
lds
loope
aad
pop
pop
stos
test
mov
hlt
xor
dec
cmps
cdq
mov
cld
xlat
fcom
test
mov
out
cwde
ror
leave
adc
push
push
cdq
mov
add
lods
ret
mov
jmp
popf
adc
add
stos
inc
in
rcl
jecxz
mov
push
or
xlat
cwde
iret
inc
pop
push
call
cmc
fnstsw
cmp
cwde
dec
push
fwait
dec
mov
(bad)
mov
sbb
stos
mov
adc
adc
xchg
outs
aad
movs
mov
cwde
push
lods
mov
sahf
or
mov
or
mov
xchg
cwde
pop
shr
xor
mov
loop
retf
cmp
nop
ins
lock
inc
jecxz
cli
aam
int3
fidivr
sub
cwde
sub
jne
sbb
cmp
out
repnz
js
or
in
xor
outs
cmp
out
in
pusha
cwde
sar
adc
jl
ret
out
cwde
fstp
les
mov
sahf
pop
jae
and
or
mov
dec
xchg
mov
jno
mov
xchg
push
nop
je
jo
idiv
cwde
sar
mov
xchg
gs
mov
std
xchg
scas
xchg
bound
ret
outs
int
stos
push
nop
loop
pop
leave
or
push
ins
mov
std
(bad)
(bad)
aam
(bad)
mov
int
xchg
cmp
fcmovne
loope
xchg
std
fnstenv
pop
cwde
and
pop
and
inc
push
cwde
data16
fisub
out
loop
sbb
cld
adc
data16
dec
imul
cmp
push
sbb
cmp
jmp
adc
rcr
test
jmp
push
arpl
pop
leave
fdivr
jg
xchg
jp
mov
pop
cwde
lock
sbb
test
cmp
sahf
fs
lods
scas
repz
leave
fldcw
add
and
and
ja
pop
test
cld
iret
push
aas
push
push
(bad)
out
repz
scas
jb
sbb
adc
pop
push
xchg
jmp
clc
mov
lock
fnstsw
inc
cmc
xchg
ja
mov
rol
jmp
jecxz
shl
(bad)
lock
cwde
cs
mov
lahf
jge
rol
sahf
ins
iret
cs
in
retf
mov
mov
stc
push
cmp
ret
dec
rcl
cmp
pop
in
shl
outs
cwde
cvttps2pi
and
or
in
mov
arpl
shl
retf
pusha
out
cmps
adc
lods
inc
dec
cwde
pop
xchg
je
xchg
push
cwde
xor
cmp
cmps
xchg
out
addr16
mov
sub
fsub
not
push
and
cmc
cmp
ret
xlat
cdq
pop
cmp
mov
pop
mov
les
shl
push
xor
dec
mov
cwde
cmp
adc
lock
call
cld
mov
xor
fst
lahf
imul
jns
mov
outs
mov
adc
cwde
jmp
fimul
inc
out
adc
xchg
addr16
or
inc
ja
push
(bad)
fcmovnbe
mov
mov
test
int
or
in
cwde
cs
or
pop
out
xchg
psubusb
mov
jecxz
ret
inc
sub
fwait
stos
dec
mov
sbb
ror
cmc
add
cwde
pop
dec
jns
mov
(bad)
test
dec
out
dec
sub
jp
xchg
mov
jb
daa
or
cmc
dec
out
sub
or
xchg
cwde
inc
push
loop
ins
call
movs
(bad)
fsubr
mov
jmp
cmp
out
cmps
clc
sbb
std
pop
cmp
sbb
dec
lea
and
cwde
fs
mov
adc
pop
inc
jmp
fsub
loopne
mov
sub
and
pop
popa
clc
loope
jmp
adc
scas
jp
or
jmp
lods
fnstcw
call
cmp
outs
pop
js
scas
cwde
(bad)
leave
fdivp
jnp
repnz
mov
repz
jae
push
xchg
sbb
cmp
push
jp
ss
sbb
xchg
bound
mov
jae
addr16
adc
xchg
or
(bad)
test
not
adc
ins
jp
imul
loop
adc
imul
xchg
out
pop
jmp
jbe
inc
push
sub
(bad)
fidiv
cs
sub
cwde
imul
mov
pushw
xchg
push
mov
int3
xchg
and
pop
cmp
sub
pop
xor
push
pop
push
nop
cwde
mov
lahf
mov
in
mov
jns
xchg
fsub
nop
pop
cwde
jecxz
inc
outs
jae
xchg
mov
(bad)
cwde
cmp
mov
popf
loope
sub
jp
cwde
js
pop
and
pop
pop
cwde
cmp
inc
inc
jg
mov
push
movs
mov
inc
xchg
push
sub
ror
lock
cwde
sar
dec
adc
dec
push
pop
xor
sub
pop
push
cmps
arpl
out
mov
retf
iret
cwde
add
inc
sbb
fprem
cwde
inc
or
cwde
scas
sub
fild
sar
scas
mov
xchg
ret
cmp
repnz
push
ins
movs
cwde
mov
add
stos
add
xchg
cwde
mov
jle
xlat
cwde
mov
pushf
jo
mov
dec
jb
mov
ins
movs
out
cwde
fwait
in
ja
mov
jp
jge
xor
movs
(bad)
scas
inc
mov
sbb
jb
or
ficomp
or
nop
cdq
mov
inc
adc
pop
sub
push
ds
int
pop
dec
bound
inc
xchg
jno
xchg
(bad)
xchg
ret
fsub
mov
jle
xchg
bound
adc
jmp
add
xor
fdivr
pop
mov
sbb
lahf
neg
cwde
out
push
and
mov
sar
pop
out
or
out
fdivr
add
jg
in
sbb
pop
or
mov
jmp
test
mov
repz
cmps
jle
and
pusha
mov
xchg
adc
imul
pop
xchg
(bad)
jp
out
cmp
stos
inc
(bad)
retf
fcom
movs
lahf
sub
xchg
mov
ins
mov
pop
jbe
cwde
xchg
sbb
pushf
daa
cmp
out
push
loopne
cli
cld
xchg
jmp
in
and
xchg
xchg
jl
sub
cwde
pushf
mov
push
lds
loope
lea
mov
cwde
xlat
jmp
add
or
in
cwde
or
addr16
(bad)
mov
lea
dec
mov
sti
scas
js
pushf
cwde
jnp
dec
cmp
cwde
shr
pop
sub
cwde
pop
xchg
lahf
cmp
xchg
sbb
sub
es
scas
stos
sbb
xchg
xchg
push
bound
sub
fcmovu
or
cmp
sub
cmp
in
cmp
dec
cwde
dec
push
outs
lahf
jne
mov
cwde
mov
or
aaa
xchg
ret
scas
fdivr
inc
clc
adc
shl
xchg
in
xor
aad
push
push
xor
lahf
sbb
pop
aas
mov
push
push
rcr
cwde
xchg
jnp
in
pop
adc
sets
dec
push
and
jo
mov
pushf
outs
mov
sub
mov
js
and
fstp
jl
mov
ss
ret
mov
icebp
loopne
mov
push
imul
jl
xchg
scas
jmp
add
aad
int3
push
and
packssdw
imul
pop
(bad)
inc
xor
mov
repnz
mov
hlt
fdivrp
sar
(bad)
push
inc
lea
add
mov
push
test
ret
lds
addr16
daa
sbb
cmp
lods
jbe
dec
jp
popf
dec
fsubr
cwde
push
sbb
popf
mov
xchg
ret
enter
mov
cmp
leave
cwde
aaa
or
std
sub
loope
cwde
jo
shl
xchg
ficomp
leave
or
cmp
fidivr
test
sti
xchg
fsub
data16
mov
les
sbb
sbb
into
out
(bad)
int3
jno
xchg
rcr
int3
ins
pop
cmp
retf
cmp
xor
cwde
cs
jge
and
push
xchg
pushf
xchg
imul
retf
pop
and
mov
push
and
sub
push
stos
addr16
fimul
xchg
sub
push
push
gs
inc
fwait
test
test
inc
adc
mov
sbb
pop
dec
xchg
mov
inc
stos
(bad)
jecxz
add
aad
push
sbb
dec
sbb
sahf
mov
mov
inc
std
cwde
pop
push
cmp
dec
pusha
dec
sub
jecxz
cdq
mov
mov
and
jmp
inc
leave
ja
fiadd
lods
push
popf
aas
push
jns
retf
mov
in
add
dec
jge
sub
push
test
mov
retf
jmp
mov
(bad)
aas
push
test
jbe
lahf
test
push
or
repz
scas
push
stos
ret
inc
jb
jle
sub
lods
cdq
out
sbb
mov
mov
jg
adc
iret
mov
hlt
mov
xchg
jns
retf
ins
mov
add
cmp
jo
cwde
(bad)
sar
int3
or
and
jmp
cs
iret
cwde
sbb
push
add
pop
sub
pushf
jns
fbld
and
loope
dec
xchg
mov
dec
scas
cs
ins
(bad)
jp
sbb
pusha
aam
dec
lahf
dec
inc
xchg
or
mov
loope
cmp
pop
jo
(bad)
cwde
in
adc
data16
out
cwde
xchg
repz
mov
pop
rol
pop
loopne
sbb
pop
push
inc
clc
pushf
std
fisub
xchg
inc
jae
sub
pop
popa
xchg
dec
jle
rcl
pop
lods
lods
shr
push
icebp
sub
fxch
cdq
jg
movs
pop
js
scas
outs
cmps
sahf
cwde
mov
cmp
rcr
(bad)
or
add
pop
cmp
sbb
cmp
pop
hlt
cwde
repnz
cmp
cwde
sti
add
add
cwde
push
adc
jo
cwde
and
shr
mov
jb
in
add
ja
jecxz
xlat
enter
push
fmul
ret
in
call
imul
mov
cmp
fadd
xlat
fsub
cwde
call
sub
xchg
jp
and
lahf
push
js
push
dec
outs
imul
jl
add
mov
pop
xchg
sbb
pop
xor
inc
jge
sub
mov
leave
cwde
push
dec
sub
stos
stos
mov
sbb
test
test
pop
jl
inc
push
xchg
fwait
mov
mov
cmps
std
lahf
shufps
jmp
pop
es
cwde
inc
pop
cmp
fdiv
rcr
push
out
(bad)
cwde
mov
push
and
xor
fmul
mov
xor
mov
pop
mov
fdivr
push
call
cmp
sbb
pop
out
xchg
sti
int
mov
add
stos
inc
push
and
cmp
add
and
retf
mov
cmp
fdivp
sub
xchg
nop
popa
adc
(bad)
cwde
and
sub
rcl
mov
cwde
shl
fdiv
rcl
mul
dec
mov
in
mov
out
mov
(bad)
jnp
cld
adc
xor
and
mov
xchg
sub
pxor
jne
je
sub
jno
jb
mov
dec
sub
ins
jnp
xchg
cdq
mov
xchg
les
add
bound
imul
mov
fld
loopne
mov
xchg
mov
push
retf
clc
mov
jmp
cmp
cwde
adc
add
call
(bad)
jmp
test
adc
xchg
test
xor
cmps
(bad)
in
mov
std
les
ss
fiadd
push
jae
fdivr
mov
iret
mov
retf
aaa
mov
add
dec
popf
in
fnstcw
sbb
repz
or
adc
test
mov
neg
popa
jno
fwait
xchg
(bad)
xchg
sahf
jnp
ficom
pop
xchg
fldenv
jne
lds
xchg
outs
mov
fisubr
add
mov
stc
pop
fdivr
cmp
push
cwde
in
sti
lds
ins
jb
test
fistp
xchg
push
cmp
pop
gs
adc
jmp
call
jno
aaa
mov
mov
leave
rcr
scas
(bad)
clc
outs
das
xchg
out
repz
cmp
xor
cmp
into
mov
scas
pop
push
shl
xchg
jl
daa
adc
popf
(bad)
push
xor
pop
xchg
jnp
push
xchg
jo
loopne
jmp
cmc
cwde
xchg
cs
andnps
les
rol
add
jp
xchg
jmp
mov
std
inc
sbb
push
jns
fsub
movs
not
xchg
inc
jecxz
push
and
xlat
pop
mov
mov
inc
lock
retf
xor
(bad)
pop
addr16
adc
jmp
pop
cwde
outs
(bad)
dec
sub
jb
mov
scas
cwde
pop
push
lods
cmp
fwait
call
cmps
add
aaa
xchg
cmps
fiadd
sub
sar
cwde
mov
adc
push
xchg
fucomp
or
jb
outs
mov
jns
lds
rcr
fcmovnb
shr
std
or
cwde
out
dec
push
cmp
cs
pop
rcr
xor
cdq
xor
inc
inc
fwait
xchg
out
repz
and
dec
(bad)
mov
int3
add
push
mov
pushf
xchg
adc
out
or
pop
pop
or
lahf
sub
sahf
mov
mov
xchg
pop
add
mov
cwde
inc
jb
mov
sub
dec
dec
adc
fcomp
daa
xor
xor
or
leave
js
cwde
xor
pop
jae
hlt
rcl
enter
xchg
ins
sbb
pop
aas
xchg
push
rol
loopne
add
mov
cwde
(bad)
into
enter
mov
mov
shl
mov
push
inc
cwde
and
push
out
dec
pop
mov
lods
xchg
cli
xchg
loop
mov
das
dec
mov
ja
push
push
idiv
jmp
(bad)
out
dec
pop
je
or
push
enter
xchg
or
sbb
xor
cwde
xor
iret
xchg
xlat
add
adc
pop
pop
sub
xchg
mov
mov
sbb
cli
sbb
cmp
sbb
int3
pop
and
leave
fsubr
xchg
jbe
stc
(bad)
aam
hlt
jno
push
loope
mov
mov
loop
popf
xor
pusha
aam
xchg
mov
test
jl
mov
ret
mov
retf
data16
out
sbb
push
inc
xor
cmp
leave
dec
jge
push
js
inc
rcr
adc
pop
and
adc
pop
cmp
xchg
out
xchg
sbb
call
arpl
outs
test
ror
enter
ret
into
stos
retf
enter
aad
xchg
push
cs
call
jg
xchg
sbb
daa
stos
dec
push
add
cmp
idiv
xchg
jmp
cmp
jo
sahf
shr
shl
xchg
or
xchg
mov
mov
in
cmp
mov
jg
jge
cmp
cwde
fisub
push
mov
mov
int3
fcomp
cmp
sbb
xchg
mov
mov
dec
sub
xchg
sahf
ja
add
ds
les
sub
sar
jl
call
ficomp
adc
loopne
enter
mov
imul
pop
or
xchg
hlt
xchg
je
popf
inc
(bad)
cwde
dec
movs
clc
(bad)
lods
xor
cwde
and
and
call
dec
xor
sar
add
pop
ja
cmp
(bad)
rcr
dec
push
xchg
xchg
and
clc
mov
adc
or
retf
dec
or
jmp
add
dec
fimul
cwde
or
push
in
add
push
sbb
fwait
inc
sub
push
out
inc
sbb
cwde
lds
rol
cwde
call
or
adc
into
fs
push
mov
imul
jmp
jge
xchg
fnstcw
and
add
outs
nop
or
imul
retf
or
shl
xor
or
and
inc
add
xchg
fdivr
xchg
cld
sbb
call
mov
fisttp
test
jmp
(bad)
sub
(bad)
stos
mov
dec
clc
ins
jne
mov
jo
outs
fistp
dec
or
scas
mov
sub
(bad)
jmp
sbb
or
cwde
lea
fdiv
or
sbb
cmp
xchg
movs
xor
test
jp
cwde
idiv
sbb
or
imul
mov
inc
test
js
aam
sub
sbb
call
cmp
mov
add
cmp
retf
pop
cmp
movs
mov
jle
jnp
ja
push
aaa
add
stos
sub
popf
shl
inc
pop
xchg
jge
aas
leave
push
or
ficomp
loopne
xor
sub
pop
push
je
inc
jg
jns
call
enter
ss
inc
ret
(bad)
xchg
xchg
push
and
mov
test
cwde
leave
fisttp
pop
cmp
cwde
xor
dec
mov
xor
js
mov
cmc
xchg
fbld
outs
cwde
sahf
and
inc
out
out
sub
(bad)
in
dec
dec
cmp
outs
mov
call
push
jb
div
js
push
mov
jecxz
les
test
pop
mov
lock
int3
push
jmp
inc
inc
outs
inc
mov
push
adc
mov
adc
or
bound
xchg
mov
test
inc
xchg
test
xor
das
inc
push
inc
mov
mov
cmps
mov
addr16
mov
xchg
mov
out
push
jl
loop
cwde
xchg
(bad)
push
cwde
repz
push
cmp
xor
cs
pop
pop
cwde
mov
in
xchg
popf
addr16
mov
lock
test
cmp
out
cwde
push
pop
sub
sbb
jns
xchg
sahf
jne
mov
add
sbb
mov
cmp
add
ins
shl
inc
cwde
scas
sub
push
cmp
cdq
stos
movs
ret
dec
nop
sub
cmps
push
jmp
or
cmp
aaa
mov
and
repz
mov
ret
cmp
sub
(bad)
loopne
push
call
fwait
data16
mov
adc
fidiv
cmps
inc
pop
adc
psubsw
js
fstp
jle
loope
push
add
scas
mov
xor
iret
sti
sahf
pop
js
loopne
mov
cmp
or
and
stc
int
sbb
or
jecxz
popa
loop
cwde
xchg
sub
xor
sub
mov
sub
ins
mov
jecxz
lods
mov
sbb
test
mov
ret
sub
(bad)
jge
cwde
retf
mov
and
add
test
sub
popf
ja
inc
push
ins
mov
vpsllq
ror
sbb
mov
push
push
xor
popa
cwde
xchg
or
xchg
xchg
lods
mov
cmc
jecxz
ds
xchg
dec
jno
mov
test
ins
clc
cwde
out
(bad)
shl
(bad)
mov
and
cs
xor
xchg
adc
in
test
enter
psrad
cmc
lds
push
(bad)
sbb
into
ins
pop
cmp
dec
int
or
or
inc
dec
test
data16
cwde
or
sub
inc
nop
jnp
cwde
shr
mov
in
xchg
xor
addr16
mov
aaa
lds
stos
lahf
sub
gs
push
xchg
fcomp
add
test
movs
or
sbb
pop
enter
xchg
push
(bad)
(bad)
adc
cmp
fcomp
xchg
jmp
jns
aaa
pop
test
call
dec
xchg
in
mov
mov
jecxz
xchg
xchg
mov
jo
xchg
int3
push
mov
aaa
pop
jb
xchg
mov
mov
xchg
jge
adc
outs
bound
pop
mov
iret
add
lods
cmp
and
pushf
add
xchg
jo
in
inc
movs
xor
pushf
and
pop
mov
cmps
test
push
add
cmp
loop
and
or
xchg
jns
xchg
les
mov
retf
cmps
push
neg
lock
out
outs
dec
stos
(bad)
mov
xor
cwde
js
mov
ja
shl
stos
mov
cwde
cmp
fisub
mov
push
cdq
(bad)
call
and
pop
add
jmp
loop
jl
mov
push
test
xchg
es
pop
xchg
push
call
jecxz
mov
js
sub
push
jg
rcr
or
cwde
pop
dec
push
push
loopne
sub
popf
daa
jmp
repz
dec
cdq
push
neg
inc
lahf
emms
push
add
fbstp
dec
inc
dec
jecxz
icebp
mov
pop
popf
or
out
retf
mov
mov
hlt
xchg
lea
sbb
sbb
jg
jecxz
adc
inc
je
cwde
push
icebp
test
int3
aam
or
loope
arpl
mov
xchg
sbb
outs
jno
cwde
ror
mov
enter
lods
ss
ins
ins
(bad)
mov
or
xchg
rcl
cwde
outs
je
push
cdq
fwait
and
das
jl
bnd
push
sbb
and
add
xchg
push
push
adc
pop
test
jns
add
and
mov
daa
js
add
inc
push
dec
sub
mov
fnstcw
push
jg
jbe
stos
mov
loopne
cmps
sbb
ins
mov
adc
cmp
cmp
mov
add
sbb
inc
je
lods
mov
test
cdq
sub
ss
cmp
sahf
mov
sar
fmul
sbb
jmp
ret
jg
loopne
bound
add
inc
test
xlat
shr
leave
sbb
bound
pop
cwde
outs
addr16
scas
mov
xchg
repnz
pop
and
gs
fwait
mov
loop
xchg
and
lods
mov
stos
xchg
mov
pop
add
loopne
sub
jnp
xor
xchg
pop
and
fwait
jbe
push
movs
cmp
popf
push
add
push
or
cli
sbb
(bad)
(bad)
mov
xchg
inc
stc
dec
pop
dec
dec
pop
inc
adc
sbb
loop
xchg
pop
mov
mov
clc
mov
mov
xchg
(bad)
aam
cmp
shl
cld
sbb
inc
lock
enter
stos
or
sub
rcl
pop
call
mov
(bad)
push
out
les
popf
xor
inc
lock
xchg
addr16
rcl
and
sub
sub
aam
add
push
jl
xlat
mov
stc
pop
mov
icebp
dec
jbe
loope
sub
cmp
jge
dec
sbb
push
and
pop
pop
cmps
jmp
push
and
inc
imul
sti
add
cwde
jmp
nop
pushf
cmp
add
pop
xchg
mov
ss
mov
test
cwde
xor
and
nop
inc
jnp
bound
lock
leave
cwde
mov
inc
jp
xchg
data16
test
push
mov
adc
jl
loopne
sbb
rcr
fcom
lock
js
adc
adc
jmp
out
mov
fcom
rcr
out
cwde
outs
sahf
pushf
jle
xchg
movs
scas
scas
mov
push
mov
pusha
nop
sub
dec
xchg
xchg
fs
addr16
stc
pop
cwde
clc
into
xor
sbb
cs
aaa
je
mov
xchg
dec
retf
int3
loopne
cmc
mov
jp
mov
cdq
inc
sub
js
lods
and
xor
repnz
or
daa
cmps
xchg
sbb
mov
cmp
lods
pcmpeqd
stc
shr
test
xor
or
sbb
stos
in
clc
out
xchg
pop
cmp
fdiv
repnz
out
cwde
push
sbb
xchg
jmp
and
and
lahf
dec
jns
inc
lahf
mov
iret
pop
nop
xchg
(bad)
mov
push
rcr
outs
cwde
mov
dec
xchg
mov
call
xchg
and
ficomp
ror
mov
cmp
test
pusha
mov
xchg
in
xor
das
repnz
cwde
movs
jecxz
nop
pop
mov
daa
(bad)
xor
gs
xchg
xor
pop
jo
xchg
xor
ds
xchg
movs
pop
jo
outs
ficomp
mov
xor
add
pop
xor
lock
inc
jnp
inc
int
pop
cwde
int3
shr
jmp
push
fcmovu
mov
outs
clc
dec
jecxz
imul
mov
xchg
jmp
sahf
xchg
aaa
sbb
xor
rcl
std
xor
xor
hlt
add
pusha
jae
mov
lahf
dec
popf
imul
scas
popf
mov
cwde
jmp
xchg
inc
inc
or
push
ror
repnz
jg
mov
fadd
popf
out
into
inc
xchg
in
cmp
pop
cmp
pop
jbe
arpl
mov
int
pop
cwde
jecxz
xor
xchg
ret
daa
arpl
popf
loopne
mov
sbb
and
retf
xlat
fsub
xchg
mov
test
push
into
mov
scas
cwde
mov
mov
ficomp
and
jle
mov
push
imul
push
xor
fdiv
jmp
mov
test
inc
add
lds
jnp
sub
adc
mov
sbb
hlt
test
fistp
pop
sbb
cmp
fs
fstp
pop
push
sub
inc
push
or
lock
fs
leave
xchg
mov
pop
xor
xlat
push
out
lds
sub
xchg
jns
xchg
add
aad
pop
pushf
mov
inc
mov
jno
or
mov
rol
mov
add
push
sbb
sbb
ret
cwde
lods
add
cs
div
sub
adc
xchg
adc
fs
dec
xchg
data16
jg
cwde
ror
adc
pushf
mov
test
mov
cwde
xchg
mov
cwde
movs
out
retf
arpl
adc
in
adc
or
inc
fs
movs
jle
outs
test
cli
lods
dec
aaa
sbb
(bad)
and
push
dec
push
adc
sbb
mov
mov
stos
ins
test
xchg
les
pusha
xor
cmp
or
push
iret
icebp
sar
add
xchg
jb
in
aas
mov
inc
dec
pusha
cmp
imul
or
mov
mov
fcmovnb
(bad)
fxch
movs
aaa
xchg
fsubr
test
das
sbb
out
mov
jbe
mov
dec
cwde
mov
lods
pushf
or
and
cmp
mov
adc
cdq
adc
or
inc
xchg
jns
mov
cmps
xchg
add
dec
rcl
js
add
sub
push
aas
dec
ret
into
rcl
ret
mov
int3
es
test
mov
jbe
lods
xchg
mov
cmp
sbb
sub
cvtpi2ps
shl
fxch
ds
aaa
jp
in
add
enter
cwde
inc
cmc
xor
int
cld
(bad)
test
in
mov
xchg
movs
cwde
adc
mov
fwait
jle
pop
call
mov
inc
cmp
ds
popf
cmps
mov
cld
or
retf
imul
mov
(bad)
sub
mov
dec
sub
std
mov
sub
pop
jl
pop
test
pop
sub
jmp
addr16
xchg
adc
or
dec
push
inc
xor
cwde
and
(bad)
dec
pop
push
popf
and
push
ret
mov
or
in
xchg
idiv
in
adc
dec
sbb
daa
jns
lock
fcom
push
ffreep
push
aam
or
push
mov
push
(bad)
push
js
lds
push
imul
add
push
js
sahf
cmps
mov
mov
hlt
shl
loopne
test
pop
xor
out
cmp
lods
outs
jecxz
adc
retf
mov
jecxz
jbe
ins
dec
cwde
mov
(bad)
into
xchg
xchg
mov
add
pop
inc
push
dec
push
inc
mov
mov
imul
aas
loopne
lods
lock
imul
lds
or
adc
leave
push
sub
jge
add
ins
jle
xchg
pop
jbe
or
ss
jmp
(bad)
adc
sub
addr16
push
push
inc
xchg
dec
push
ja
dec
cmp
cwde
(bad)
(bad)
mov
shr
add
inc
push
jns
das
jno
cwde
push
pushf
pop
mov
or
cmp
sbb
jmp
sub
mov
pop
and
pop
popa
dec
(bad)
jg
cwde
pop
pushf
arpl
jns
push
nop
pop
push
loope
cwde
jnp
mov
sbb
jmp
push
and
in
aas
xchg
add
ins
cmp
pop
cwde
mov
adc
cli
mov
mov
ret
inc
xor
rcr
dec
rcr
retf
mov
mov
loop
xor
cmps
cwde
mov
fild
jb
xchg
pusha
js
aaa
xchg
mov
xchg
cmp
je
cmc
loopne
push
movs
(bad)
jno
lods
sub
xchg
rol
(bad)
xor
pushf
int
dec
scas
stos
or
adc
cs
mov
pop
push
mov
cwde
(bad)
sbb
mov
fdivr
sub
pusha
sub
test
retf
retf
jge
adc
pop
push
rcl
mov
icebp
aad
shr
shld
dec
test
jo
mov
xor
in
jns
xchg
sub
add
add
sbb
fcompp
jle
sar
gs
cwde
add
loope
add
mov
in
cmp
pop
pop
repz
dec
cwde
adc
jmp
sbb
adc
jmp
pop
pop
cli
or
jmp
(bad)
jae
push
sbb
(bad)
xlat
dec
push
pop
fnstenv
push
js
jle
lahf
(bad)
jmp
sub
push
popa
xchg
aad
aam
out
xor
cli
sub
jmp
das
pop
cwde
push
mov
cwde
sbb
rol
xchg
mov
outs
ja
lods
sub
loopne
fisubr
pop
dec
test
inc
jge
push
test
fsubr
(bad)
pushf
add
xchg
cmp
pop
or
jb
xchg
mov
js
outs
jg
lahf
xchg
test
mov
dec
fisttp
aad
(bad)
lock
xchg
jmp
or
je
mov
bound
sar
fsub
clc
xchg
push
fs
xor
xchg
push
dec
inc
push
mov
in
mov
scas
mov
cwde
mov
and
retf
adc
dec
jp
cmp
push
scas
inc
add
jle
(bad)
mov
sahf
pop
das
xor
ins
addr16
jb
gs
cwde
call
ins
dec
test
dec
int
and
shr
dec
out
sub
dec
fnstsw
cwde
or
dec
sub
inc
ja
xor
mov
movs
cmc
xor
or
cli
xchg
aaa
cwde
sbb
mov
popf
jmp
xor
push
jnp
data16
jb
pop
push
fcomp
cwde
ss
pop
mov
stos
mov
repnz
cdq
sub
xchg
outs
sub
scas
loopne
mov
cmp
pop
push
arpl
test
aaa
fsub
out
in
cwde
jge
sbb
jmp
call
nop
xchg
gs
jl
xchg
jno
arpl
in
cmc
fldenv
jmp
push
xor
push
push
gs
hlt
sbb
xor
lock
cmp
lods
(bad)
in
std
je
cwde
or
jmp
stc
xchg
cmp
jo
cwde
sti
(bad)
add
sub
pusha
add
fimul
jnp
pop
arpl
dec
jg
cld
push
or
jecxz
int3
in
in
cwde
vshufps
enter
push
fcomp
jecxz
mov
jmp
push
fsub
and
inc
stos
mov
hlt
adc
adc
into
xor
xchg
clc
xchg
popf
jb
or
fistp
mov
cwde
fdivr
(bad)
xchg
fptan
fucom
neg
nop
fbld
sub
xchg
push
cli
(bad)
sbb
call
imul
lahf
inc
outs
aad
cwde
sub
pop
jo
aad
add
loopne
loope
pop
cwde
jae
call
aam
sub
xchg
sub
mov
adc
pop
in
cwde
cld
mov
mov
xchg
xor
cmp
test
mov
mov
in
cwde
mov
or
adc
pop
add
pop
cmc
jb
cmp
hlt
int
mov
fs
mov
idiv
aaa
push
std
js
int3
cwde
push
pop
cmp
xor
dec
jno
inc
into
xor
cwde
xchg
mov
popf
imul
repnz
lea
xlat
xchg
fnstcw
push
sub
pusha
push
mov
cwde
cmc
cs
fs
jmpw
fst
outs
cwde
addr16
add
mov
in
mov
mov
cmp
xor
xchg
dec
push
test
mov
pushf
cmp
xchg
dec
icebp
lds
xor
xchg
mov
pop
popa
jl
mov
mov
clc
jmp
and
pop
xor
or
cwde
pop
test
mov
lahf
push
stc
xchg
(bad)
sbb
scas
pop
dec
jo
push
aam
stos
cmp
es
inc
js
mov
jmp
sbb
adc
or
movs
loopne
cmp
enter
loope
fdiv
test
rcl
add
sub
inc
cmp
scas
add
adc
push
sbb
push
xlat
or
clc
fist
fisttp
cmp
jmp
pushf
mov
leave
cwde
mov
test
imul
xor
sub
in
cmp
jl
cmp
sahf
call
cwde
scas
or
addr16
dec
test
jmp
add
iret
add
pcmpgtd
enter
mov
jbe
movs
xchg
adc
or
mov
idiv
enter
repnz
cmp
or
xchg
and
xchg
sbb
or
js
sub
xchg
jl
pushf
bound
sub
xchg
stc
in
arpl
shl
cmp
cli
cmp
or
out
pushf
call
test
enter
cli
(bad)
adc
test
xchg
bswap
push
inc
push
dec
out
cmp
cmp
das
cwde
xor
cmps
mov
xor
push
xor
sbb
cwde
push
sub
xchg
(bad)
or
jle
test
pop
cs
daa
inc
sbb
imul
sub
loop
enter
in
into
and
cwd
arpl
ins
jge
push
neg
jmp
mov
sbb
lods
mov
jmp
pop
imul
shl
push
xchg
mov
addr16
jbe
popf
rcl
bound
lahf
arpl
inc
push
in
cmps
mov
jne
fucom
sti
clc
jg
rcr
lods
inc
mov
pop
stos
enter
aam
ins
(bad)
test
jo
aad
leave
nop
push
cld
or
repnz
cdq
push
dec
in
clc
add
and
aam
test
cwde
sbb
xchg
mov
xchg
mov
sub
fsubr
mov
faddp
js
mov
ss
adc
cwde
mov
lea
ins
fwait
mov
cmp
scas
xchg
loope
xchg
push
adc
shl
jbe
popf
dec
dec
push
push
dec
push
or
mov
lds
and
mov
dec
repz
sub
fs
arpl
pop
dec
cli
jbe
dec
cmp
push
fld
push
fwait
xchg
dec
sbb
jns
mov
repnz
icebp
jne
jge
add
imul
movs
or
xchg
mov
xchg
xor
jb
neg
in
jb
lahf
dec
jns
inc
rcr
or
jle
mov
mov
aas
push
sbb
in
pavgb
cwde
mov
cs
out
test
inc
or
sar
ret
sub
mov
stos
xchg
outs
adc
test
mov
xchg
add
add
cmp
movmskps
jge
(bad)
popa
or
add
pop
fdivr
cmp
ror
add
mov
fdivr
lods
outs
stos
(bad)
nop
fwait
cs
in
and
cmps
sahf
arpl
call
pusha
lods
add
call
dec
mov
inc
dec
je
(bad)
cmp
adc
scas
pop
scas
sti
jno
movs
cli
pusha
and
cwde
cmp
xor
dec
cwde
mov
mov
sbb
push
jmp
(bad)
mov
jecxz
add
push
loope
out
jl
rol
out
pop
mov
mov
retf
lds
mov
inc
sbb
out
and
mov
mov
clc
js
lea
loopne
xchg
sbb
push
retf
lds
movs
int3
inc
push
cld
sbb
add
push
mov
xchg
test
sbb
sbb
div
mov
jg
dec
cwde
pop
dec
shr
iret
out
add
not
mov
pop
cmp
adc
cmp
dec
sub
js
int
jl
cmps
mov
aam
xor
jbe
in
bound
out
ret
jecxz
in
push
out
pop
repnz
sub
sbb
ja
pop
stos
ja
mov
add
or
lods
rcr
retf
ror
test
push
or
xor
add
aaa
fld
mul
pop
call
aam
outs
lods
fs
push
lods
mov
push
mov
sub
sar
pushf
gs
or
fidivr
and
sbb
test
cmp
add
dec
fnstsw
push
push
xchg
cwde
scas
xchg
mov
addr16
or
xor
mov
cmp
nop
adc
jg
mov
cmp
rol
hlt
cld
mov
sbb
rol
push
pop
push
cmp
dec
je
xchg
mov
pop
xchg
mov
pop
adc
movs
push
mov
ret
adc
push
xchg
pop
cmps
xchg
mov
into
cmp
loope
pop
xchg
cdq
rcl
jle
shr
imul
xor
js
pusha
pop
mov
xchg
add
xor
mov
and
pop
pop
mov
stos
mov
pushf
imul
jnp
jg
xchg
dec
pop
imul
adc
cmp
push
and
cwde
xchg
gs
aad
add
fstp
push
lock
aam
loop
sar
stos
xchg
(bad)
fucomi
dec
sbb
mov
rol
adc
push
xor
hlt
cmp
mov
out
xlat
ins
pop
mov
mov
ja
leave
xchg
jbe
mov
push
sub
jmp
cwde
fcmovbe
xor
pusha
xchg
das
jle
mov
adc
adc
cmp
or
xchg
bound
add
and
mov
cmp
(bad)
mov
push
mov
xchg
pusha
jge
xchg
cmp
sbb
push
neg
ror
fcomp
mov
xchg
xchg
loope
sub
imul
stos
cwde
mov
inc
leave
into
pop
sbb
mov
adc
in
sti
or
xchg
pop
stos
test
shl
out
test
cwde
cmp
and
xchg
pusha
lock
mov
xlat
in
mov
pushf
sbb
and
push
dec
cwde
sub
rol
pop
push
dec
mov
test
sar
test
cwde
lods
jnp
call
xchg
fcmovu
in
sbb
pop
xchg
jb
mov
adc
cwde
je
add
test
outs
dec
inc
xchg
cmc
adc
xor
pop
sub
stos
push
inc
mov
pop
nop
dec
aam
ficomp
push
jne
in
ror
cmp
cwde
inc
or
xor
dec
cwde
jae
adc
aam
mov
mov
test
jl
shl
cwde
or
jno
inc
dec
fisttp
fidiv
xor
adc
aam
add
sub
and
pushf
stos
xchg
mov
dec
rcr
mov
and
iret
cwde
sub
frstor
mov
cli
pop
rcr
mov
jb
ror
mov
lahf
imul
outs
sahf
xor
mov
xchg
pop
inc
retf
leave
fdivr
mov
repnz
fmul
dec
xchg
sub
rol
xor
pop
aad
into
scas
xchg
sbb
(bad)
retf
mov
push
mov
push
and
cli
inc
and
pop
push
sbb
push
pusha
dec
dec
(bad)
mov
inc
dec
xchg
cwde
xor
dec
(bad)
stc
ins
cmp
in
aaa
dec
addr16
fmul
lds
jmp
mov
ficomp
sti
or
ja
sub
sahf
jb
je
mov
inc
hlt
inc
imul
xlat
test
das
inc
(bad)
fdivr
push
fadd
add
sub
pop
push
jl
loop
xlat
test
pop
mov
inc
xchg
pushf
mov
xchg
pop
adc
fdiv
mov
xlat
or
push
cmp
mov
adc
adc
ficom
fdiv
jecxz
and
xchg
and
pop
lock
fwait
adc
xchg
js
in
mov
cmps
sbb
cwde
push
scas
js
aam
xor
jns
sti
mov
enter
mov
xchg
pop
mov
sbb
aam
mov
test
pop
dec
xchg
mov
dec
push
cmps
ja
sbb
leave
dec
xor
push
inc
popf
in
stc
push
les
mov
pop
out
xchg
fst
ins
dec
cmp
leave
in
int
or
nop
cwde
out
mov
pop
xchg
and
cwde
aas
pusha
push
out
or
imul
xchg
jae
movs
jmp
mov
adc
int3
fs
dec
pop
in
cwde
jecxz
lds
daa
cmp
inc
cwde
mov
rcl
(bad)
jmp
or
fwait
cwde
mov
es
cmp
cwde
outs
retf
loop
stc
hlt
cwde
shr
fidivr
fmul
fnstsw
or
xchg
pop
cmp
sbb
mov
(bad)
mov
(bad)
cwde
mov
jns
int
test
xchg
dec
inc
and
inc
jno
mov
out
mov
xchg
inc
les
cwde
xchg
and
dec
movs
xchg
in
rol
in
xchg
dec
pusha
and
repz
and
leave
rol
in
fiadd
jle
addr16
jmp
call
dec
inc
lods
jecxz
in
mov
mov
mov
shl
inc
test
cmp
push
and
stc
jae
je
js
test
loop
scas
or
cdq
or
pop
neg
ins
xchg
inc
pusha
jmp
cld
test
adc
mov
sahf
adc
mov
int3
and
outs
dec
ins
sahf
jmp
mov
pop
sub
cs
pop
ja
es
dec
xor
pop
lods
in
cwde
ds
cmps
pusha
movs
out
or
sub
mov
mov
jmp
ret
cmp
loopne
xchg
pop
popf
jge
adc
cmp
test
rol
cs
xlat
enter
out
retf
adc
xor
addr16
push
mov
jmp
lods
xor
shl
jnp
int
sbb
add
jg
hlt
lods
cwde
xchg
lock
in
ja
cwde
push
add
test
xor
mov
clc
(bad)
cs
mov
sbb
pop
fadd
cwde
nop
sub
and
pop
(bad)
es
mov
cwde
mov
out
sahf
gs
test
or
inc
dec
shl
aam
in
(bad)
aas
inc
cwde
arpl
push
cdq
jl
lea
pop
js
sbb
mov
and
popf
cwde
pop
lods
push
ins
shl
nop
int
and
xor
push
sub
add
sbb
xchg
inc
cwde
jno
sbb
jmp
jl
hlt
int
xchg
xchg
mov
jmp
imul
cwde
in
jnp
push
rol
mov
mov
js
dec
mov
inc
rcl
dec
mov
cmp
sub
pop
daa
cwde
mov
push
in
cwde
xor
in
or
and
leave
shl
in
fmulp
sub
xchg
ss
pop
sahf
jne
nop
cwde
std
js
sbb
xchg
mov
sub
aad
rcr
xchg
jmp
test
xor
cmp
xchg
add
div
pop
js
enter
inc
jne
(bad)
cmp
mov
retf
jecxz
dec
xchg
out
arpl
mov
push
xchg
scas
xchg
shl
(bad)
add
pusha
and
cwde
fcmovnbe
and
stc
out
mov
cwde
nop
xlat
loopne
je
mov
cwde
repz
loope
cwde
pushf
sub
out
or
and
enter
fdiv
jmp
add
call
sub
xchg
clc
fadd
and
sbb
call
out
int3
aam
pop
fadd
(bad)
ss
sbb
scas
jo
sbb
xchg
pusha
jbe
lods
repz
addr16
loopne
cs
inc
jo
mov
sbb
shr
jecxz
mov
imul
leave
in
xor
jo
cwde
sub
pop
inc
aam
mov
dec
call
mov
test
jns
xchg
mov
cmp
mov
ja
mov
jecxz
or
inc
gs
nop
into
mov
mov
fsub
stos
jmp
mov
or
mov
int
jo
and
mov
std
cwde
xchg
pusha
sub
lock
pop
inc
jb
stos
mov
ror
or
jmp
mov
mov
cwde
or
cwde
pop
push
es
mov
pmaxsw
cwde
cmp
or
xchg
mov
adc
mov
loop
dec
fadd
into
clc
xchg
sbb
push
adc
jecxz
sbb
and
test
pushf
ror
jmp
aam
imul
loopne
xor
adc
sti
rcl
mov
and
in
call
jnp
adc
mov
call
adc
rol
sub
inc
cli
test
and
jmp
pushf
xchg
call
add
inc
gs
outs
arpl
add
add
outs
jae
inc
ins
imul
add
aad
dec
rcr
add
cwde
add
add
push
je
jb
inc
outs
arpl
push
dec
dec
dec
dec
cs
ins
add
mov
in
xlat
cs
sbb
(bad)
or
and
movs
xchg
loope
adc
add
xor
jb
pushf
test
(bad)
mov
scas
call
mov
sub
sub
popa
(bad)
js
jne
mov
mov
jbe
call
mov
mov
scas
popf
repz
mov
sar
dec
imul
fimul
adc
push
or
rcr
test
stc
repnz
repz
mov
imul
push
sti
cli
pop
jb
adc
and
pop
add
fild
repz
add
lahf
cli
in
sub
popa
push
push
nop
stos
inc
cmp
jp
mov
loopne
jae
xor
push
dec
cmp
je
ja
popf
push
inc
xor
int3
into
mov
mov
mov
in
cli
fidivr
out
sar
ret
js
xchg
jl
jae
je
mov
rol
(bad)
mov
mul
pusha
sub
call
(bad)
sub
out
int
call
mov
es
(bad)
adc
sbb
test
lea
out
int
mov
xor
dec
jae
cmps
cdq
(bad)
pusha
sub
jnp
test
xor
(bad)
fisubr
or
jmp
and
and
loope
jmp
out
mov
mov
pop
jmp
test
test
call
das
sbb
bound
add
push
jle
mov
ret
mov
retf
mov
loop
nop
and
xchg
loope
jl
xor
jge
nop
sbb
ret
scas
cli
loopne
icebp
and
pop
inc
cmp
outs
cmp
dec
pop
inc
js
push
ins
sub
xchg
ret
movs
nop
sar
jo
xor
fdivp
mov
lock
mov
adc
or
sub
sub
retf
retf
cmps
mov
ret
in
add
adc
pop
mov
stc
ficomp
or
out
xor
dec
jnp
push
stc
loop
loop
sub
bound
sbb
dec
xor
inc
jge
(bad)
jge
mov
push
fsubp
imul
sbb
cld
cmc
repz
push
inc
das
pop
sti
sub
dec
jns
into
sti
jmp
mov
(bad)
xor
sbb
inc
cmc
clc
es
fldenv
call
mov
sbb
xor
push
inc
dec
xor
movs
mov
and
fcmovb
scas
shl
icebp
jecxz
ret
not
cmp
push
aas
je
jae
sbb
aad
mov
rcr
ret
repz
jmp
jle
pop
inc
xchg
rol
pusha
dec
dec
xor
inc
jnp
dec
xor
dec
xor
xchg
xlat
mov
aad
cmp
aad
mov
hlt
(bad)
mov
call
sbb
(bad)
add
sbb
pop
or
push
inc
dec
xor
push
mov
outs
cmp
xor
push
ins
add
(bad)
ret
mov
add
repnz
pop
dec
pusha
push
push
icebp
mov
xor
add
inc
gs
popa
jb
outs
je
mov
call
pushf
lea
jne
btr
mov
bsr
mov
sbb
sub
sbb
movsx
mov
cmc
call
push
lock
std
std
adc
sti
ret
jnp
psraw
sar
mov
pop
inc
ss
or
cld
fnstsw
jmp
inc
jae
jl
pop
push
iret
add
in
daa
adc
test
push
or
or
pop
jae
inc
xchg
je
in
xchg
push
mov
aam
jge
push
or
fcomi
es
fmul
pushf
jmp
jmp
add
inc
jb
popa
je
push
outs
ins
imul
add
inc
gs
outs
arpl
push
imul
ins
jae
jb
add
add
je
jns
je
ins
push
popa
ins
gs
gs
outs
je
imul
imul
ins
push
je
jo
add
inc
imul
je
imul
add
add
push
gs
imul
outs
add
xchg
and
retf
push
scas
stos
xchg
cli
(bad)
vmread
mov
ins
mov
test
xlat
les
lods
out
popa
xor
sub
retf
add
test
add
lods
inc
popa
dec
push
shl
cmp
mov
outs
pop
jmp
cmp
push
pop
inc
add
inc
xor
xlat
daa
push
or
push
xchg
cmp
pop
xchg
jns
inc
xor
or
or
repz
inc
xor
pop
inc
pop
ds
dec
dec
xor
lea
jae
movs
rol
xlat
retf
fdiv
jb
dec
cmp
std
fimul
clc
and
std
jnp
jecxz
fistp
cmp
mov
mov
lods
cmp
inc
aaa
ins
push
mov
dec
cmp
test
test
cmp
and
aas
jno
loope
sub
or
clc
cmp
mov
nop
hlt
loop
fs
je
xchg
fwait
clc
call
ins
pop
ins
test
jbe
cwde
cli
sbb
shl
jl
sbb
test
jmp
fsubr
mov
cmp
xchg
out
cmps
mov
aas
mov
stc
bound
sbb
lock
stc
das
sbb
(bad)
pop
pusha
push
jbe
in
and
retf
iret
mov
cmp
imul
repz
xor
cmp
xor
fistp
inc
ror
loop
push
js
fwait
push
int3
fsubr
mov
test
pushf
sbb
ins
loopne
int3
cmp
imul
or
adc
loop
(bad)
or
addr16
jae
xchg
not
jno
mov
cmc
pop
cmp
popf
mov
adc
sbb
enter
mov
and
and
or
jo
out
xor
mov
and
or
mov
and
or
push
or
mov
in
mov
arpl
into
xchg
mov
je
mov
inc
push
outs
fsubrp
int
push
mov
push
bnd
jecxz
mov
mov
inc
push
fwait
or
inc
movs
and
mov
jecxz
sub
(bad)
jb
nop
mov
sub
xor
aam
call
test
(bad)
jecxz
call
fst
(bad)
out
retf
and
mov
jae
and
(bad)
stc
into
xchg
cmp
jnp
cmp
(bad)
aam
add
or
xor
jb
sti
mov
nop
(bad)
jno
dec
call
or
(bad)
push
enter
push
dec
aaa
inc
xor
dec
xor
xchg
iret
pop
out
icebp
movs
stos
xchg
loop
ret
adc
call
cmps
sub
popf
xor
add
xor
xor
push
dec
bound
mov
cmc
hlt
rcr
int3
add
inc
jb
popa
je
push
imul
inc
add
ret
pop
cmc
push
cmp
push
jmp
add
fld
adc
push
inc
in
cdq
xor
clc
sbb
or
xor
jbe
popf
xor
or
inc
xor
aad
in
mul
std
popf
ret
cs
frstor
les
icebp
cmp
imul
mov
xchg
dec
pop
mov
pop
cmc
inc
xor
mov
imul
jmp
jg
std
jmp
call
rcl
sbb
in
ss
sbb
xchg
ret
push
int
or
icebp
inc
xor
addr16
inc
dec
rol
lods
mov
xlat
(bad)
and
sbb
adc
push
xchg
jnp
jns
ffreep
clc
jecxz
icebp
sbb
iret
push
arpl
push
push
xchg
and
sahf
mov
adc
inc
adc
rcr
in
xor
adc
stc
sbb
test
and
retf
test
shr
call
fs
jae
push
lea
jne
jmp
mov
mov
push
mov
lea
jmp
add
push
imul
imul
inc
outs
jb
popa
je
add
outs
mov
xchg
sar
jmp
mov
int
jecxz
or
addr16
xchg
jns
ja
jge
fwait
jmp
into
imul
adc
repnz
sub
push
jne
cmps
xchg
icebp
in
sub
or
or
sbb
mov
call
add
enter
pop
jl
mov
xor
stos
jmp
mov
sti
lea
jbe
sbb
dec
pop
jp
xchg
xchg
pusha
xchg
jl
mov
adc
inc
push
sti
icebp
and
test
idiv
loop
pop
mov
ffree
fdivr
out
adc
imul
mov
(bad)
cld
jmp
or
and
scas
nop
stos
popf
mov
sbb
cdq
jmp
cmps
lds
sub
(bad)
mov
shr
sbb
daa
adc
or
adc
mov
clc
or
inc
xor
sbb
dec
(bad)
retf
mov
pcmpeqw
xchg
(bad)
lods
and
loop
fdivr
xor
xchg
dec
push
mov
stc
jecxz
and
or
dec
outs
rol
mov
and
xor
jecxz
or
sbb
loopne
jge
push
jns
push
xchg
loopne
dec
pop
cld
ret
cwde
jmp
xlat
fadd
fadd
out
pop
bound
out
sub
outs
push
inc
rcr
and
xchg
rol
cmp
fistp
lods
jle
jne
gs
fwait
cmp
xor
sbb
je
cmps
dec
push
sbb
(bad)
in
mov
retf
inc
cwde
aad
push
scas
aas
cdq
push
push
dec
jge
mov
xchg
mov
icebp
test
out
jo
sbb
and
pop
sbb
push
pop
popf
(bad)
aad
in
sti
out
and
gs
clc
jecxz
mov
stc
pop
outs
push
dec
lea
sahf
scas
sar
mov
(bad)
fistp
add
or
sub
stos
sbb
push
fucomi
shl
xor
jg
mov
mov
jle
xor
jle
mov
aas
dec
cmp
cdq
out
into
mov
mov
mov
cld
sub
adc
sbb
into
mov
xor
or
shr
(bad)
sub
dec
push
inc
pop
mov
stc
std
into
xor
ins
gs
imul
jae
gs
push
imul
sub
xchg
shl
mov
ror
rcl
sar
add
adc
lea
bsr
xchg
mov
jmp
int3
pop
inc
jno
xchg
sbb
dec
inc
aaa
js
movs
xchg
icebp
in
add
sbb
sar
in
fld
sbb
lock
aad
mov
inc
xor
scas
(bad)
push
(bad)
xchg
(bad)
ja
mov
pop
inc
pop
dec
push
inc
dec
xor
movs
(bad)
fbstp
enter
add
cwde
test
sar
and
add
xor
jae
mov
out
or
stc
cmp
cli
pop
in
hlt
loop
adc
add
add
xor
pop
xor
xor
xor
xor
add
pop
add
sahf
aaa
and
xor
aas
cmp
cmp
outs
cmp
sbb
add
add
inc
add
add
xor
xor
ja
mov
sbb
and
inc
xchg
pushf
ss
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aas
add
add
pop
add
add
xor
test
ss
lds
adc
pop
aaa
cmps
aaa
mov
mov
cmp
cmp
cmp
dec
cmp
movs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
aas
(bad)
aas
jmp
add
add
add
xor
sar
jae
xchg
cmp
cmp
cmp
cmp
ds
xor
add
add
add
mov
mov
xor
ja
mov
ss
ss
fbstp
out
ss
aaa
pusha
aaa
xlat
aaa
or
cmp
cmp
aas
cmp
cmp
cmp
cmp
cmp
jmp
or
cmp
mov
sar
aas
inc
aas
pusha
aas
jnp
mov
aas
(bad)
aas
add
add
add
add
xor
xor
xor
xor
pop
xor
or
adc
adc
sub
aaa
lods
cmp
jo
add
add
jl
pop
xor
ss
push
adc
pop
aaa
pop
aaa
data16
fwait
aaa
fidiv
add
cmp
iret
cmp
cmp
cmp
jecxz
pop
cmp
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
jl
xchg
add
add
add
xor
in
xor
aaa
push
jne
shl
aaa
adc
and
sub
inc
cmp
push
cmp
cmp
jmp
add
add
xor
xor
xor
aaa
pop
cmp
cmp
xor
std
cmp
add
add
xchg
xor
xchg
cmps
ss
(bad)
(bad)
out
sti
ss
aaa
jnp
(bad)
aaa
mov
shl
cmc
aaa
add
jl
cmp
add
inc
add
add
xchg
adc
and
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jae
mov
retf
cmp
push
sub
pop
add
add
add
add
add
xor
xor
xor
mov
les
iret
cmp
cmp
cmp
cmp
cmp
cmp
adc
sbb
sub
xor
jno
or
or
adc
adc
sbb
sbb
and
pop
ds
xchg
xchg
mov
aas
cwde
aas
pushf
aas
mov
rol
add
add
dec
xor
(bad)
jmp
xor
loopne
in
call
aaa
out
mov
cmp
cmp
cmp
cmp
cmp
add
add
add
dec
add
add
xor
ss
sar
aam
fdivr
fdivr
loopne
in
mov
lods
cmp
cmp
cmp
cmp
cmp
add
arpl
jl
mov
ds
adc
es
cmp
lock
call
xor
mov
sub
ins
xor
xor
xor
mov
xor
js
xor
xor
xor
xor
xor
xor
xor
test
shl
ss
aaa
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
icebp
aaa
xor
popa
cmp
xchg
cmp
cmp
cmp
cmp
cmp
test
stos
cmp
cmp
cmp
sbb
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cld
cmp
cmc
add
add
add
push
add
add
xor
xor
xor
or
and
jge
(bad)
ss
cmps
aaa
add
adc
xor
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
es
retf
cmp
sar
sar
fidivr
add
add
cmp
add
(bad)
xor
xor
xor
xor
aaa
mov
cmp
mov
cmp
dec
cmp
cwde
cmp
cmp
cmp
cmp
cmp
add
add
add
js
add
shl
xor
mov
xor
imul
add
pop
aaa
aaa
aaa
test
xchg
aaa
jmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
jle
loop
adc
cmp
jo
je
js
jl
cmp
cmp
cwde
cmp
movs
cmp
mov
ret
cmp
add
enter
imul
lock
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
cmp
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
(bad)
xor
inc
aaa
dec
aaa
push
aaa
imul
xchg
aaa
mov
aaa
div
arpl
jl
adc
xor
jne
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
ds
ds
ds
ds
mov
lods
ds
ds
push
aas
addr16
iret
aas
add
add
add
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
ss
ss
aaa
js
xor
aaa
loope
add
sar
push
cmp
aas
add
add
add
add
xor
xor
xor
xor
xor
test
mov
xor
xor
add
das
xor
jae
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
mov
cwde
aaa
scas
aaa
mov
ins
cmp
cmp
daa
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
cmp
cmp
xchg
cmp
cmp
cmp
jno
adc
sbb
pop
cmp
sub
arpl
fnstsw
idiv
add
add
add
xor
xor
jae
jnp
shl
in
xor
xor
jno
jns
das
xor
xor
xor
xor
shl
or
pop
aaa
inc
cmp
mov
mov
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
loop
and
aas
outs
sar
aas
in
aas
lock
hlt
aas
clc
aas
cld
aas
add
add
add
add
or
xor
dec
xor
xor
xor
xor
xor
shl
xor
std
xor
cmp
aaa
jo
je
js
jl
pushf
aaa
inc
cmp
cmp
cmp
cmp
cmp
cmp
call
cmp
adc
push
cmp
cmp
push
cmp
jb
cmp
cmp
cmp
cmp
outs
cmp
cmp
cmp
aam
fdivr
in
call
cmp
xchg
ds
fdivr
fdivr
loopne
in
call
ds
add
add
repz
xor
xor
xor
xor
xor
inc
xor
les
xchg
aaa
mov
aaa
(bad)
aaa
adc
outs
cmp
cmp
cmp
cmp
cmp
fistp
add
add
push
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
ja
mov
xor
xor
xor
and
xor
xor
xor
xor
xor
xor
xor
mov
shl
push
cmp
aad
ret
cmp
cmp
cmp
ds
xchg
aas
add
add
ret
xor
xor
xor
xor
xor
dec
aaa
jae
pushf
aaa
fnstsw
add
sub
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
xor
xor
cmp
dec
cmp
cmp
arpl
imul
jge
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
test
ds
mov
aas
cmp
outs
aas
xchg
aas
jmp
mov
add
mov
xor
xor
mov
xor
jge
(bad)
xor
xor
xor
xor
xor
xor
xor
(bad)
add
adc
pop
aaa
sbb
aaa
xor
cmp
inc
aaa
dec
aaa
fs
imul
js
jg
xchg
mov
xchg
aaa
xchg
aaa
pushf
aaa
mov
aaa
mov
mov
aaa
leave
aaa
iret
aaa
(bad)
aaa
fdiv
loope
out
in
aaa
repz
stc
aaa
(bad)
aaa
add
or
adc
sbb
pop
cmp
sub
das
cmp
cmp
cmp
dec
cmp
push
cmp
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
bound
cmp
jae
jp
cmp
cmp
cmp
stos
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
cmp
pop
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
ds
mov
ds
cwde
aas
add
add
cmp
add
jae
scas
xor
xor
xor
xor
mov
xor
xor
shl
cmp
cmp
cmp
cmp
cmp
add
rol
add
add
xor
xor
xor
xor
getsec
mov
aam
dec
cmp
movs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
ds
mov
aas
sar
clc
aas
add
add
mov
add
or
adc
push
xor
jnp
mov
mov
xor
xor
xor
xor
xor
xor
xor
pusha
xor
xor
fidiv
add
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
loope
div
cmp
dec
ss
shl
ss
add
sbb
das
aaa
inc
aaa
pop
aaa
ins
aaa
mov
inc
cmp
cmp
cmp
cmp
cmp
cmp
cli
cmp
cmp
test
add
shl
test
int
shl
fnstenv
fbstp
xchg
xor
xor
test
lods
xor
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
out
ss
aaa
loope
xchg
out
cmp
cmp
lods
cmp
cmp
cmp
cmp
ds
adc
add
add
cwde
add
add
imul
xor
add
test
popf
xor
xor
xor
xor
xor
xor
xor
mov
ss
shl
out
stc
add
push
aaa
and
jb
xor
aaa
xchg
aaa
cmps
aaa
mov
mov
aaa
fnsave
or
cmp
inc
cmp
mov
cmp
cmp
mov
cmp
cmp
cmp
loope
cmp
int
out
or
ds
ds
idiv
cmp
aas
mov
aas
add
add
add
nop
add
add
jb
cmp
cdq
xor
xor
xor
push
jl
test
xor
xor
xor
xor
xor
xor
pop
xor
scas
xor
retf
ss
xor
aas
aaa
popf
aaa
jmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
pop
cmp
lods
cmp
xchg
(bad)
ds
ds
mov
(bad)
aas
add
add
fadd
add
pusha
xor
xor
xor
xor
test
mov
cwde
xor
xor
xor
xor
xor
xor
xor
shl
div
or
xor
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
ss
fdiv
fbstp
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cwde
cmp
cmp
cmp
jl
cmp
mov
mov
nop
ds
ds
ds
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
ds
xor
jbe
add
add
test
add
pushf
xor
xor
mov
mov
xor
xor
jg
push
xor
xor
xor
xor
xor
cmps
cmp
cmp
cmp
cmp
je
repz
cmp
cmp
cmp
cmp
pusha
ds
ds
js
jl
cmp
mov
mov
nop
ds
ds
ds
mov
lods
ds
sar
aam
fdivr
fdivr
loopne
in
cmp
outs
aas
add
add
add
add
xor
xor
ss
cmp
cmp
jnp
test
mov
jecxz
out
cmp
in
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jo
je
js
jl
cmp
ds
aas
add
add
add
add
add
xor
xor
xor
xor
xor
xor
dec
xor
xor
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
push
cmp
cmp
cmp
cmp
cmp
cmp
scas
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
movs
ds
add
adc
mov
movs
aas
jmp
(bad)
aas
add
add
push
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
movs
xor
push
ss
xor
adc
xor
mov
cmp
cmp
popa
cmp
cmp
cmp
push
cmp
out
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sub
aas
push
aas
ja
xchg
aas
add
add
add
add
xor
push
aam
xchg
and
pop
xor
xor
xor
xor
mov
aaa
shl
aaa
popf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
pop
ds
out
add
add
inc
xor
retf
xor
xor
ret
xor
xor
pop
aaa
scas
aaa
nop
cmp
test
and
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
jle
xchg
cmp
cmp
cmp
cmp
pop
outs
ds
ds
add
add
cmp
inc
xor
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
jge
xor
ss
ss
out
push
sbb
cmp
inc
aaa
pop
aaa
arpl
xchg
aaa
test
mov
in
add
or
mov
mov
cmp
cmp
cmp
cmp
int3
cmp
sar
test
cmp
cmp
cmp
cmp
cmp
es
push
cmp
xchg
(bad)
cmp
push
ds
sar
jecxz
in
aas
repz
add
add
add
push
xor
xor
xor
and
jle
mov
call
xor
ins
ss
leave
cmp
inc
aaa
pop
aaa
shl
inc
cmp
cmp
cmp
cmp
dec
cmp
cmp
aam
out
lock
cmp
cmp
ins
cmp
je
js
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pusha
cmp
ins
cmp
jb
test
scas
ds
aas
sbb
push
aas
add
add
add
xor
push
xor
xor
xor
aaa
mov
cwde
aaa
mov
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
add
add
movs
add
add
xor
stc
xor
outs
xor
xor
push
xor
pusha
xor
ins
xor
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
jnp
xchg
ss
ss
cmp
cmp
cmp
cmp
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
iret
cmp
xor
sar
ds
aas
retf
aas
add
add
add
test
add
jb
cmps
xor
xor
jbe
xor
xor
xor
xor
cmp
shl
xor
xor
outs
xor
(bad)
(bad)
pop
cmp
repz
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
scas
cmp
adc
cmp
cmp
cmp
cmp
cmp
inc
ds
ds
mov
cdq
ds
ds
ds
idiv
sbb
fs
mov
fnstcw
add
add
add
je
add
xor
xor
xor
xor
xor
xor
test
xchg
xor
xor
xor
jne
movs
xor
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xchg
lods
fnstenv
add
pop
aaa
ja
nop
aaa
mov
aaa
repnz
and
arpl
jmp
cmp
add
add
add
pop
add
add
inc
xor
xor
xor
xor
xor
xor
xor
jns
int3
xor
addr16
push
aaa
fwait
aaa
les
iret
aaa
jecxz
mov
sti
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
sub
xor
pop
ds
loopne
add
add
jl
add
cmp
mov
nop
xor
mov
xor
xor
ins
xor
je
js
or
sbb
das
xor
dec
xor
xor
xor
xor
xor
xor
xor
xor
jmp
ss
aaa
call
aaa
das
cmp
xchg
cmp
cmp
js
xor
cmp
cmp
cmp
add
add
inc
add
add
fnsave
std
xor
xor
xor
xor
xor
sti
aaa
imul
cmp
cmp
inc
cmp
cmp
nop
cmp
add
add
and
add
shl
add
push
xor
xor
add
addr16
test
test
in
sbb
bound
add
add
sub
add
mov
mov
xor
xor
xor
xor
mov
ss
and
and
sub
add
add
add
xor
movs
xor
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xchg
fdiv
jecxz
repnz
adc
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
and
ret
ds
aas
add
add
add
add
add
sub
out
shl
scas
xor
imul
jmp
ds
ds
ds
movs
ds
aas
add
add
add
add
add
xor
xor
xor
movs
aaa
ret
aaa
xlat
aaa
out
xor
pop
cmp
and
aas
add
add
add
imul
cmps
xor
xor
xor
xor
push
xor
xor
xor
in
xor
lods
fnstenv
hlt
ss
aaa
fnsave
or
and
and
cmp
cmps
cmp
cmp
fidivr
cmp
aas
mov
aas
add
add
add
add
inc
xor
pop
xor
xor
sub
dec
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
push
ss
ss
aaa
out
xor
aas
cmp
cmp
cmp
cmp
mov
cmp
add
nop
add
push
add
add
xor
xor
mov
xor
xor
xchg
xor
jmp
ss
aaa
imul
aaa
les
cmc
aaa
inc
cmp
mov
sahf
cmp
ss
dec
test
add
add
sbb
fwait
xor
xor
xor
xor
xor
jae
jmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
lock
popa
aas
mov
mov
add
add
retf
xor
xor
sbb
sbb
and
and
sub
dec
ss
ss
mov
les
enter
les
fidivr
(bad)
cmp
cmp
cmp
and
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
call
rol
push
add
add
xor
xor
xor
mov
xor
xor
xor
aaa
arpl
cmp
cmp
cmp
cmp
jbe
mov
sar
push
cmp
cmp
mov
out
cmp
xlat
add
push
aas
aaa
aas
pop
aas
add
add
jo
add
imul
pop
xor
xor
xor
xor
xor
dec
xor
fbstp
in
xor
xor
cmp
inc
xor
pusha
xor
xor
xor
xor
xor
xor
icebp
xor
pop
mov
aaa
cmp
cmp
cmp
or
cmp
cmp
cmp
cmp
sar
and
cmp
test
add
add
add
call
xor
push
xor
xor
jp
push
xor
cmp
cmp
cmp
cmp
cmp
sbb
sub
add
add
add
push
xor
xor
xor
xor
xor
jne
xchg
xor
xor
adc
cmp
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
jo
adc
sbb
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
jae
mov
add
add
xor
add
sbb
int
repz
cld
xor
sahf
ss
and
lods
aaa
jmp
cmp
mov
sbb
call
cmp
cmp
add
jo
add
test
ss
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jg
lahf
cmp
aaa
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
idiv
sbb
sub
inc
ds
mov
aas
popa
aas
jno
lods
aas
mov
add
xor
mov
xor
xchg
xor
xor
xor
xor
xor
pop
xor
clc
xor
xor
xor
xor
xor
xor
xor
xor
xchg
push
mov
cmp
jo
pop
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
cmp
cmp
cmp
ret
cmp
cmp
cmp
and
cmp
cmp
ds
les
int3
xor
cmp
test
aas
loope
add
add
nop
add
add
xor
test
call
xor
xchg
xor
xor
xor
mov
stos
xor
xor
pusha
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
aaa
xor
push
xor
cwde
xor
xor
ss
mov
aaa
movs
cmp
cmp
cmp
cmp
cmp
mov
lock
cmp
cmp
cmp
cmp
add
inc
add
jo
add
xor
aaa
cmp
outs
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
mov
cmp
fidivr
sbb
xor
dec
ds
xchg
ds
aas
jb
popf
aas
cmps
aas
enter
fstp
in
jmp
push
add
rol
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
movs
xor
xor
xor
xor
xor
xor
xor
xor
xor
outs
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jb
test
(bad)
adc
sbb
push
ss
cmp
dec
ss
ss
ss
jg
mov
stos
ss
shl
fnstenv
jmp
aaa
xchg
aaa
test
mov
aaa
jmp
cmp
cmp
mov
fnstcw
out
cmp
cmp
cmp
cmp
cmp
cmp
add
pusha
add
cmp
add
(bad)
xor
inc
ss
ss
ss
cmp
scas
cmp
cmp
fdivr
fdivr
loopne
adc
inc
aas
push
aas
xchg
aas
test
aas
icebp
aas
add
mov
add
or
and
cmp
push
xor
xor
leave
xor
xor
xor
xor
xor
pop
xor
mov
mov
xor
xor
xor
xor
xor
stos
xor
pop
ss
ss
aaa
lea
fdivr
in
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
ds
aas
push
aas
jp
cmp
rol
add
xor
xor
xor
xor
xor
xor
xor
xor
imul
xor
xor
xor
mov
aad
loope
out
xor
sbb
sub
xor
ss
ss
ss
mov
xchg
mov
ss
loop
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
jno
push
cmp
cmp
cmp
push
(bad)
cmp
cmp
or
sub
jg
xchg
aas
mov
add
add
pop
xor
xor
scas
xor
enter
shl
aam
fdiv
push
xor
jl
xor
xor
xor
pop
xor
xor
xor
aam
retf
fdiv
or
sbb
xor
cmp
cmp
arpl
cwde
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jno
jecxz
pop
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
dec
aas
pop
aas
outs
aas
sar
add
add
add
jae
mov
leave
xor
xor
xor
imul
and
xor
xor
xor
jno
aaa
xor
in
xor
daa
ss
ss
aaa
mov
aaa
ret
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
jge
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
test
xchg
lods
add
add
add
xor
xor
pusha
xor
xor
xor
add
xor
aaa
adc
cmp
cmp
cmp
cmp
cmp
cmp
jp
mov
in
std
cmp
cmp
cmp
cmp
push
ds
cmp
sar
fnstcw
and
ss
jne
xchg
aas
leave
aas
fnstsw
add
add
add
push
add
add
xor
xor
xor
xor
xor
aaa
and
sub
xor
aaa
aaa
sub
das
cmp
cmp
cmp
cmp
cmp
sahf
cmp
cmp
cmp
cmp
aas
add
add
cmp
add
aaa
xor
push
xor
jp
mov
xchg
xor
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
ins
cmp
je
js
jl
add
add
sub
add
mov
cmp
sub
das
aaa
ss
cmp
aaa
push
aaa
pop
aaa
pusha
aaa
addr16
outs
aaa
call
cmp
add
lock
and
add
pushf
xor
xor
xor
xor
xor
mov
cmp
cmp
cmp
add
add
xor
xor
xor
xor
adc
add
xor
mov
test
inc
cmp
bound
add
add
add
xor
xor
ss
sub
dec
cmp
cmp
cmp
cmp
cmp
arpl
jae
sar
fnstsw
sti
cmp
cmp
cmp
mov
mov
mov
cmp
cmp
aas
inc
aas
sar
jmp
xor
add
pop
xor
push
xor
lods
ss
aaa
and
cmp
gs
jnp
lods
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
dec
cmp
cmp
cmp
cmp
cmp
add
inc
add
add
xor
sbb
xor
add
push
add
add
and
daa
ss
cmp
cmp
cmp
call
push
add
add
add
pop
ds
ds
add
add
xor
sub
inc
xor
aaa
dec
cmp
jnp
test
loop
out
push
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
lods
cmp
ins
ds
pushf
add
dec
aas
data16
mov
fdivr
add
add
mov
xor
xor
int3
xor
xor
xor
mov
cld
xor
xor
pop
xor
xor
xor
popa
xor
xor
xor
xor
xor
sbb
and
sub
jo
ja
lock
cld
aaa
xor
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
aad
or
sbb
outs
ds
ds
ds
aas
ret
aas
add
add
add
adc
push
xor
xor
dec
xor
xor
xor
xor
xor
xor
(bad)
xor
inc
ss
inc
aaa
xor
aaa
inc
cmp
cmp
ins
cmp
cmp
cmp
and
cmp
cmp
cmp
int3
aas
add
add
add
into
xor
xor
push
xor
xor
xor
xor
xor
mov
xor
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
cmp
pop
cmp
data16
jo
je
jp
jle
test
mov
mov
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
push
cmp
sub
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
jo
je
jp
jle
test
mov
mov
cwde
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
xchg
sar
xlat
idiv
pop
aas
test
mov
loope
add
add
add
push
xor
xor
xor
xor
xor
inc
xor
(bad)
xor
xor
xor
bound
lods
xor
popa
xor
xor
xor
xor
xor
xor
xor
xor
xor
fs
retf
xor
or
ss
ss
xor
inc
aaa
pop
aaa
in
repnz
sbb
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
cmp
inc
cmp
dec
cmp
pop
cmp
cmp
outs
cmp
js
jle
cmp
cmp
pushf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
cmp
xor
cmp
inc
cmp
dec
cmp
push
cmp
cmp
push
outs
cmp
jns
jg
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sub
ss
dec
cmp
pop
cmp
outs
cmp
jle
test
xchg
cmp
test
cmp
enter
aam
fidivr
clc
cmp
or
adc
adc
sbb
push
ds
sub
cs
cmp
inc
ds
ds
ds
ds
arpl
push
ds
jge
cmp
xchg
ds
ds
movs
lods
ds
mov
ds
sar
(bad)
fdivr
jecxz
jmp
ds
aas
adc
aas
and
aas
ss
cmp
aas
push
aas
pop
aas
pop
aas
fs
push
aas
js
jl
cmp
aas
(bad)
aas
cdq
aas
mov
aas
mov
mov
mov
aas
retf
aas
xlat
aas
fnstsw
out
out
aas
hlt
aas
cli
aas
add
add
add
xor
xor
adc
sbb
push
xor
sub
xor
xor
xor
inc
xor
push
xor
pop
xor
xor
jne
jp
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
push
xor
sub
xor
xor
xor
inc
xor
push
xor
popa
xor
ins
xor
ja
jge
xor
xchg
xor
xor
xor
int3
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
pop
xor
xor
xor
xor
inc
xor
xor
pop
xor
imul
xor
jle
test
mov
mov
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
xor
xor
push
xor
pop
xor
push
jo
jp
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
and
sub
cmp
xor
push
xor
addr16
jns
jg
test
cwde
xor
test
scas
xor
mov
xor
fidiv
in
xor
std
xor
or
sbb
and
sub
das
ss
ss
ss
ss
ss
ss
bound
data16
ss
ja
jle
test
mov
xchg
ss
ss
mov
ss
mov
mov
ss
shl
fnstenv
jecxz
jmp
ss
ss
or
adc
sbb
and
daa
aaa
sub
aaa
cmp
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
bound
push
aaa
jp
jle
test
mov
mov
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
mov
mov
aaa
loope
icebp
aaa
add
push
cmp
cmp
cmp
cmp
push
cmp
cmp
je
jns
jle
mov
lea
xchg
cmp
mov
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
pop
cmp
ins
cmp
jnp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
dec
cmp
pop
cmp
cmp
jbe
jnp
test
mov
(bad)
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jp
xchg
cmp
jge
mov
cmp
int3
cmp
lock
fstp
loopne
jmp
add
add
xchg
xor
xor
xor
shl
mov
mov
aaa
outs
aaa
xchg
add
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
add
clc
aas
add
add
add
add
repz
xor
xor
or
push
cmp
cmp
cmp
xor
add
add
add
xchg
xor
xor
ss
int3
cmp
cmp
cmp
dec
cmp
xchg
cmp
push
cmp
mov
(bad)
inc
cmp
popa
cmp
cmp
push
ds
ds
ds
or
aas
mov
int
fstp
add
push
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
cmp
cmp
ds
sbb
add
add
push
add
add
add
cmp
add
inc
add
add
xor
xor
inc
aaa
in
aaa
cld
aaa
add
or
push
cmp
sbb
cmp
cmp
cmp
cmp
cmp
out
jge
mov
add
add
jb
jg
call
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
aam
icebp
xor
cmp
inc
ss
ss
ss
bound
ins
ss
jge
test
mov
xchg
ss
cmps
ss
mov
ss
ss
fidiv
loopne
out
or
sub
popa
aaa
jns
mov
cdq
aaa
into
aaa
cmc
aaa
pop
cmp
cmp
cmp
cmp
aas
cmp
jne
mov
cmp
cmp
cmp
cmp
cmp
sar
push
cmp
push
cmp
jne
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ins
cmp
xchg
cmp
mov
cmp
mov
ds
ds
ds
pusha
aas
mov
aad
add
add
add
daa
xor
xor
xor
xor
xor
pop
xor
jl
es
xor
xor
add
aaa
xchg
aaa
mov
int
pop
cmp
cmp
pop
cmp
cmp
cmp
push
mov
cmp
mov
int
fdivr
sbb
sub
cmp
cmp
cmp
cmp
fdivr
sub
inc
ds
ds
ds
ds
ds
ds
ds
ds
sub
xor
aas
pop
aas
pusha
aas
fs
cmp
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
add
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
(bad)
xor
cmp
dec
ss
ss
ss
test
xchg
ss
shl
(bad)
div
sbb
and
sub
aaa
jns
test
mov
cmps
aaa
mov
aaa
shl
fbstp
pabsw
cmp
cmp
cmp
and
sub
xor
jno
mov
cmp
enter
call
aas
ret
aas
add
add
add
add
add
xor
push
xor
mov
xor
push
xor
xor
xor
xor
xor
xor
xor
jno
mov
retf
xor
xor
xor
xor
xchg
xor
sub
ss
shl
ss
ss
fdiv
fdiv
add
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
mov
aaa
sub
xor
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
inc
cmp
cmp
cmp
cmp
cmp
cmp
pop
ds
aas
ds
dec
aas
pop
aas
gs
jb
jns
mov
mov
mov
jo
add
add
add
xor
xor
xchg
lea
jge
xchg
lea
xchg
xor
xor
mov
mov
xor
xor
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
lods
xor
fdiv
mov
pop
aaa
mov
cmp
cmp
xchg
cmp
cmp
scas
cmp
cmp
cmp
cmp
mov
mov
cwde
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
imul
into
cmp
cmp
loopne
out
add
cmp
push
ds
repnz
sbb
add
add
sbb
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
push
xor
retf
xor
repz
xchg
xchg
ss
ss
ss
or
sub
xor
aaa
fs
jne
call
aaa
xor
push
cmp
cmp
cmp
xor
push
cmp
mov
cmp
cmp
cmp
add
cmp
jns
sahf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
mov
mov
ds
sub
ds
ds
ds
ds
loop
add
sub
aaa
aas
inc
aas
js
mov
retf
aas
xlat
aas
loope
cmc
aas
add
add
add
adc
adc
xor
lds
or
in
xor
xor
xor
pop
xor
jns
mov
xor
jbe
mov
xor
xor
xor
xor
xor
xor
cmp
xor
mov
movs
xor
xlat
xor
hlt
xor
cmp
inc
ss
ss
fsave
icebp
ss
sbb
aaa
aaa
dec
aaa
bound
imul
scas
aaa
shl
aaa
shl
xlat
aaa
add
sbb
sub
dec
cmp
cmp
cmp
cmp
cmp
cmp
imul
pop
aas
int3
aas
add
add
add
mov
mov
pushf
xor
xor
xor
xor
xor
pop
xor
test
nop
xor
xor
xor
mov
pop
xor
ss
mov
shl
(bad)
jecxz
clc
aaa
add
or
and
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jno
in
cmp
cmp
cdq
cmp
mov
aas
adc
aas
mov
add
add
mov
stc
aaa
adc
cmp
cmp
cmp
cmp
mov
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
cmp
or
sbb
sub
push
ds
ds
ds
add
dec
aas
pop
aas
cdq
aas
test
rol
add
add
jo
call
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ret
cmp
ins
ds
leave
ds
aas
aam
fstp
call
aas
std
aas
add
rol
add
push
xor
xor
je
jp
xchg
xor
xor
xor
xor
xor
xor
or
pop
xor
cmp
inc
xor
push
xor
push
xor
inc
ss
ss
imul
xchg
mov
xchg
ss
movs
ss
ss
repz
ss
outs
aaa
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
hlt
cmp
sar
loopne
inc
aas
xchg
aas
out
add
add
push
add
add
xor
pop
xor
test
xor
adc
jle
jb
jbe
jp
jle
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
xlat
aas
jmp
add
add
push
add
xor
xor
pop
xor
xor
xor
jle
mov
popf
xor
xor
xor
xor
xor
out
xor
push
fidiv
icebp
aaa
jo
jp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
repz
cmp
ds
icebp
ds
aas
bound
(bad)
aas
add
add
pop
add
add
add
ret
xor
xor
xor
cmp
push
xor
outs
xor
xor
xor
xor
pop
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
das
xor
inc
xor
arpl
jg
test
movs
xor
(bad)
xor
in
cld
xor
dec
ss
sahf
lds
int
in
ss
adc
sbb
and
aaa
jp
xchg
aaa
fwait
aaa
cmps
aaa
mov
mov
aaa
shl
fnsave
out
out
aaa
cli
aaa
add
adc
push
cmp
cmp
cmp
cmp
dec
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
data16
test
mov
idiv
add
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
add
pop
add
xor
adc
cmp
cmp
xor
jl
test
(bad)
xor
xor
ds
xor
xor
mov
xor
fidiv
ss
push
aaa
outs
aaa
sahf
aaa
(bad)
aaa
fbstp
and
inc
cmp
cmp
cmp
jae
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
cmp
sub
ja
pushf
cmp
cmp
and
sub
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
cmp
aas
mov
aas
add
pop
add
add
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
stos
xor
xor
xor
xor
cmp
cmp
cmp
cmp
ret
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
add
cmp
cmp
cmp
cmp
cmp
cmp
mov
add
xor
add
xor
xor
xor
pop
xor
xor
inc
xor
shl
in
xor
xor
xor
xor
xor
xor
xor
xor
xor
ret
ss
aaa
pop
aaa
enter
mov
sahf
cmp
cmp
inc
cmp
test
mov
nop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
call
cmp
cmp
scas
cmp
cmp
cmp
cmp
cmp
cmp
jae
stos
cmp
and
inc
ds
ds
int3
sar
cli
ds
aas
jl
mov
add
add
add
ja
cwde
xor
xor
xor
cwde
xor
xor
xor
xor
xor
int
fidiv
sbb
aaa
idiv
cmp
cmp
push
cmp
cmp
lods
ds
int
add
or
das
aas
cmp
inc
aas
popa
aas
ins
aas
js
xchg
aas
sahf
aas
stos
aas
lds
sar
fdivr
repnz
add
add
add
add
add
xor
xor
xor
xor
test
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
ss
aaa
push
aaa
pop
aaa
push
aaa
retf
aaa
out
clc
aaa
push
cmp
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmps
cmp
cmp
das
cmp
cmp
arpl
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
int
xor
aas
clc
aas
add
add
add
add
xor
xor
pop
xor
or
pop
xor
ja
mov
sub
aaa
xor
xchg
xor
xor
xor
jns
test
xchg
xor
xor
xor
ss
ss
ss
jge
xchg
mov
mov
les
retf
ss
ss
add
or
pop
aaa
sub
aaa
aaa
inc
aaa
inc
aaa
bound
mov
aaa
(bad)
aaa
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
imul
cmp
cmp
cmp
cmp
cmp
fnstsw
pop
ds
mov
ds
add
xor
inc
aas
je
xchg
aas
test
ret
aas
sar
aad
call
add
jo
add
add
add
or
adc
xor
xor
jne
jge
xchg
xor
mov
or
sbb
sub
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
dec
ss
xor
ss
iret
ss
cmp
aaa
in
aaa
hlt
aaa
or
adc
pop
cmp
cmp
cmp
cmp
cmp
cdq
cmp
cmp
cmp
cmp
cmp
cmp
ds
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
je
js
jl
cmp
aas
mov
mov
nop
aas
sahf
aas
add
add
add
pop
xor
pop
xor
jo
shl
xor
aas
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
movs
ss
ss
ss
and
mov
aaa
xchg
cmps
cmp
adc
(bad)
cmp
cmp
cmp
cmp
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
dec
lds
adc
xor
aas
outs
aas
jns
cmp
aas
mov
add
nop
pop
add
and
cmp
pop
xor
mov
xor
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
movs
xor
cmp
pop
ss
aaa
mov
aaa
inc
cmp
mov
cmp
leave
cmp
cmp
cmp
cmp
cmp
outs
cmp
stos
cmp
pop
ds
cmp
ds
ds
aas
and
daa
aas
inc
aas
dec
aas
pop
aas
cmp
aas
loop
add
add
pop
xor
sti
xor
xor
mov
aam
adc
push
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
das
ss
ss
ss
ss
adc
sub
jb
jmp
das
cmp
cmp
cmp
cmp
cmp
inc
cmp
dec
cmp
push
cmp
pop
cmp
cmp
outs
cmp
ja
jnp
jg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
scas
cmp
cmp
cmp
cmp
cs
ds
jmp
add
add
add
shl
out
xor
xor
xor
xor
xor
push
xor
mov
xor
xor
xor
xor
bound
xchg
inc
xor
push
xor
movs
xor
xor
sub
xor
xor
xor
xor
mov
xor
movs
ss
ss
aaa
sub
cmp
cmp
pop
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ds
xchg
mov
ds
add
rol
je
add
jo
xchg
xor
aas
xor
fbstp
xor
test
mov
xchg
ss
mov
div
add
aaa
dec
aaa
imul
aaa
(bad)
aaa
cmps
aaa
mov
shl
clc
aaa
or
push
cmp
dec
cmp
mov
cmp
cmp
cmp
cmp
scas
cmp
sbb
sub
jne
jnp
mov
rol
add
wrmsr
and
sub
inc
xor
xor
xor
push
xor
sahf
xor
xor
jg
xchg
xor
inc
xor
jg
fwait
xor
xor
xor
xor
xor
xor
jo
mov
xor
push
ss
ss
shl
or
cmp
cmp
cmp
lea
cmp
mov
cmp
and
ss
cmp
jecxz
sbb
sub
ds
dec
aas
pusha
aas
jo
jns
fdivr
sti
aas
add
pop
add
add
add
stos
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
xor
pushf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
cmp
jle
sahf
xor
jmp
div
adc
sbb
test
mov
nop
ss
cmps
ss
mov
aaa
es
cmp
push
aaa
mov
shl
cmp
popa
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
mov
cmp
lea
mov
cmp
cmp
cmp
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cdq
cmp
loopne
repnz
cdq
add
adc
sbb
xor
inc
aas
push
aas
mov
lahf
aas
test
mov
aas
idiv
add
pop
add
add
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
jne
call
xor
xor
push
add
xor
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
lahf
xor
add
push
sub
inc
xor
ss
(bad)
call
aaa
sbb
sub
cmp
push
aaa
addr16
jb
jg
mov
mov
mov
mov
aaa
repz
stc
aaa
push
add
cmp
pop
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
cmp
jno
jle
mov
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xchg
cmp
sar
xor
jg
xchg
xchg
ds
ds
ds
ds
xor
ds
dec
aas
xchg
mov
lods
aas
mov
aas
add
add
or
lods
add
add
xor
xor
xor
xor
imul
leave
xor
xor
xor
push
xor
mov
test
xor
xor
xor
xor
xor
xor
xor
fnstenv
inc
ss
ss
mov
aaa
jo
mov
shl
aaa
outs
cmp
cmp
cmp
jnp
test
cmp
cmp
cmp
cmp
cmp
jns
cdq
cmp
cmp
cmp
cmp
cmp
cmp
cmp
imul
fnstcw
add
add
or
movs
add
add
sbb
sbb
inc
xor
jns
mov
leave
xor
xor
xor
xor
jns
cdq
xor
xor
xor
pop
ss
ss
aaa
sub
popa
aaa
xor
fnstenv
stc
aaa
xor
dec
cmp
cmp
cmp
(bad)
cmp
cmp
cmp
imul
or
dec
cmp
mov
test
cmp
pop
cmp
cmp
cmp
cmp
cmp
cmp
mov
jmp
ds
mov
mov
fnstcw
add
sbb
cmp
pop
aas
jns
cdq
aas
sar
aas
add
or
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
jns
shl
or
sub
push
aaa
xor
inc
cmp
cmp
loope
sbb
inc
cmp
jns
mov
cmp
cmp
mov
test
cmp
cmp
cmp
imul
sar
jmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
lahf
cmp
sti
cmp
imul
fnstcw
stc
ds
aas
imul
add
or
rol
add
xor
xor
jns
cdq
xor
xor
xor
cmp
pop
xor
xor
xor
xor
xor
xor
jns
cdq
xor
xor
xor
xor
xor
mov
loop
adc
popa
test
mov
aaa
cdq
aaa
shl
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
jne
call
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
adc
inc
ds
ds
mov
popf
ds
lds
fnstcw
in
add
adc
aas
push
aas
gs
jns
lea
mov
aas
aad
jmp
cmc
aas
add
add
adc
xor
ins
xor
xor
xor
xor
xor
jnp
lea
mov
xor
xor
xor
xor
xor
mov
mov
leave
xor
xor
xor
xor
jns
lea
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
push
xor
xchg
xor
leave
xor
add
add
push
or
and
add
mov
nop
aaa
cwde
aaa
movs
aaa
lods
aaa
mov
mov
mov
aaa
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
aaa
hlt
aaa
clc
aaa
cld
aaa
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
int3
cmp
clc
cmp
dec
ds
sar
fdivr
clc
sbb
dec
aas
pusha
aas
ins
aas
mov
test
fdivr
lock
cld
aas
add
add
add
add
add
xor
xor
xor
cld
xor
xor
cmp
pop
xor
hlt
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
xor
xor
inc
ss
ss
ds
ds
ds
ds
in
add
add
add
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
or
or
js
add
into
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
data16
outs
xor
jbe
jp
jle
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
dec
xor
push
xor
pop
xor
xor
outs
xor
jbe
jp
jle
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
ja
jnp
jg
cmp
aas
mov
(bad)
aas
xchg
aas
xchg
aas
fwait
aas
lahf
aas
add
add
add
dec
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
dec
cmp
cmp
fdivr
hlt
cmp
and
cmp
push
cmp
cmp
aam
in
cmp
sbb
xor
dec
cmp
cmp
fdivr
clc
cmp
cmp
sub
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
mov
aam
in
cmp
xor
push
ds
ds
test
pushf
ds
int3
ds
cld
ds
xor
xor
dec
aas
fs
jl
cwde
aas
pushf
aas
mov
int3
aas
in
cld
aas
add
add
sbb
sbb
xor
dec
xor
xor
xor
add
sbb
cmp
cmp
push
xor
je
mov
movs
xor
add
sbb
cmp
cmp
push
xor
je
mov
movs
xor
hlt
xor
and
cmp
push
xor
xor
aam
in
xor
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
mov
les
cld
xor
inc
ss
ss
mov
test
lods
les
fdiv
hlt
ss
sub
sub
inc
aaa
pop
aaa
je
mov
movs
aaa
mov
aaa
add
sbb
xor
dec
cmp
cmp
int3
cmp
cmp
cmp
sub
inc
cmp
cmp
cmp
hlt
cmp
sub
sub
inc
cmp
cmp
aam
in
cmp
sbb
xor
push
cmp
cmp
mov
cmp
cmp
sub
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
test
int3
cmp
sbb
sbb
xor
dec
ds
mov
les
fdivr
clc
ds
ds
sub
inc
aas
pusha
aas
fs
jl
xchg
aas
lods
aas
les
fdivr
hlt
aas
add
add
add
or
sub
sub
dec
xor
xor
xor
cwde
xor
test
lods
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
add
or
adc
sbb
sbb
xor
dec
ss
xchg
lods
les
fdiv
hlt
ss
and
cmp
push
aaa
ins
aaa
test
pushf
aaa
mov
int3
aaa
in
cld
aaa
adc
sub
dec
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
push
cmp
je
nop
cmp
int3
cmp
cmp
cmp
xor
xor
dec
cmp
ins
cmp
sar
aam
in
cmp
sbb
cmp
cmp
push
cmp
je
mov
movs
cmp
or
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
xor
cmp
inc
cmp
push
cmp
mov
cmp
sub
xor
xor
dec
ds
ds
ds
int3
ds
cld
ds
sub
inc
aas
pop
aas
je
mov
movs
aas
mov
aas
loopne
in
add
or
je
add
add
add
sbb
xor
dec
xor
xor
xor
xor
xor
xor
sub
inc
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
sub
sub
inc
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
sub
sub
inc
xor
xor
aam
in
xor
sbb
xor
dec
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
ins
test
pushf
ss
int3
ss
cld
ss
sub
inc
aaa
pop
aaa
je
mov
test
lods
aaa
les
fdiv
hlt
aaa
or
and
cmp
pop
cmp
cmp
aam
in
cmp
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
inc
cmp
cmp
fdivr
fdivr
loopne
in
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
dec
cmp
pop
cmp
fs
jo
je
js
jl
cmp
ror
add
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
sub
xor
inc
xor
xor
xor
xor
or
hlt
add
add
xor
xor
xor
xor
push
xor
xor
xor
xor
xor
nop
xor
xor
enter
shl
aam
fdiv
fdiv
loopne
in
call
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
cmp
dec
xor
push
xor
pop
xor
xor
ins
xor
je
js
jl
xor
xor
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
js
mov
cwde
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ss
ss
ss
ss
ss
ss
ss
ss
ss
ss
js
jl
xor
mov
mov
nop
ss
ss
ss
mov
lods
ss
mov
mov
les
enter
shl
aam
fdiv
fdiv
loopne
in
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
mov
nop
aaa
xchg
aaa
cwde
aaa
pushf
aaa
mov
aaa
enter
in
cld
aaa
adc
sub
inc
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
inc
cmp
cmp
aam
in
cmp
sbb
xor
dec
cmp
cmp
fdivr
hlt
cmp
and
cmp
push
cmp
cmp
cmp
cmp
cmp
test
lods
cmp
mov
cmp
int3
cmp
fdivr
in
call
cmp
cld
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
ds
cmp
mov
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
push
aas
pop
aas
pop
aas
pusha
aas
fs
push
aas
je
js
cmp
aas
movs
aas
test
lods
aas
mov
mov
aas
call
lock
cmp
add
add
adc
and
xor
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
dec
xor
xor
fdiv
hlt
xor
and
cmp
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
sbb
and
sub
xor
cmp
inc
xor
dec
xor
pop
xor
fs
jo
je
js
jl
xor
xor
cwde
xor
movs
xor
mov
mov
mov
xor
int3
xor
fdiv
in
call
xor
cld
xor
or
or
adc
and
sub
sub
xor
xor
cmp
inc
ss
ss
ss
xchg
lods
ss
call
ss
ss
ss
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
pusha
aaa
fs
push
aaa
je
js
jl
xor
aaa
mov
nop
aaa
pushf
aaa
mov
aaa
enter
lock
or
sbb
xor
xor
dec
cmp
ins
cmp
test
lods
cmp
cmp
enter
sar
aam
fdivr
fdivr
loopne
in
call
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
nop
cmp
mov
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
dec
cmp
cmp
cmp
cmp
cmp
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
and
inc
cmp
cmp
cmp
cmp
cmp
cmp
or
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
sub
xor
cmp
pop
cmp
je
js
jl
cmp
cmp
fdivr
call
ds
sub
inc
ds
ds
nop
ds
ds
ds
mov
lods
ds
mov
mov
les
enter
sar
aam
fdivr
fdivr
loopne
in
call
ds
ds
ds
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
aas
inc
aas
dec
aas
dec
aas
push
aas
xchg
aas
lods
aas
enter
sar
aam
fdivr
fdivr
loopne
in
call
aas
hlt
aas
clc
aas
cld
aas
add
add
or
rol
add
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
dec
xor
xor
xor
xor
xor
xor
xor
jo
js
mov
mov
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
or
or
sbb
and
xor
cmp
dec
xor
xor
xor
xor
xor
xor
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
adc
xchg
cmp
cmp
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
inc
cmp
push
cmp
movs
cmp
sar
cmp
adc
sub
sub
xor
inc
ds
ds
ds
ds
jl
cmp
movs
ds
mov
enter
sar
in
hlt
ds
add
sbb
xor
xor
cmp
dec
aas
pop
aas
pusha
aas
push
aas
mov
pushf
aas
lods
aas
mov
mov
aas
in
call
add
adc
add
xor
adc
and
xor
cmp
inc
xor
pop
xor
je
test
mov
nop
xor
xor
loopne
call
xor
xor
and
xor
cmp
inc
xor
jo
mov
mov
nop
xor
shl
xor
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
xor
xor
xor
xor
fdiv
lock
xor
sbb
and
sub
inc
xor
xor
xor
nop
xor
mov
les
enter
call
xor
xor
sbb
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sub
dec
xor
jo
js
nop
xor
lods
xor
enter
clc
xor
add
or
or
and
xor
cmp
inc
ss
ss
ss
test
mov
nop
ss
lods
les
aam
fdiv
loopne
clc
ss
ss
and
sub
xor
dec
aaa
dec
aaa
push
aaa
fs
je
js
xor
aaa
pushf
aaa
mov
les
enter
call
cmp
sbb
and
cmp
cmp
push
cmp
cmp
mov
mov
cmp
fdivr
loopne
clc
cmp
cmp
cmp
sbb
sub
xor
cmp
push
cmp
cmp
cmp
test
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
xor
dec
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
adc
and
xor
cmp
inc
cmp
pop
cmp
cmp
cmp
fdivr
loopne
clc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
xor
push
cmp
je
test
test
lods
cmp
fdivr
cld
cmp
or
or
and
xor
cmp
inc
ds
ds
ds
test
mov
nop
ds
lods
ds
les
aam
fdivr
loopne
clc
ds
add
adc
and
sub
xor
dec
aas
pop
aas
ins
aas
jo
js
nop
aas
xchg
aas
lods
aas
mov
aas
int3
aas
in
hlt
aas
clc
aas
add
or
sub
add
add
sbb
sbb
xor
inc
xor
push
xor
jl
mov
nop
xor
xor
xor
xor
xor
and
cmp
dec
xor
xor
mov
les
loopne
in
xor
xor
xor
xor
sub
dec
xor
xor
test
mov
cwde
xor
shl
in
or
adc
sbb
sub
inc
xor
ins
xor
xchg
xor
shl
in
xor
xor
xor
adc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
cmp
inc
xor
pusha
xor
movs
xor
fdiv
sbb
sub
inc
ss
ss
ss
ss
cwde
movs
lods
ss
ss
ss
or
adc
sbb
sub
inc
aaa
dec
aaa
push
aaa
pop
aaa
push
aaa
cwde
aaa
mov
mov
aaa
aam
fdiv
call
cmp
xor
cmp
inc
cmp
ins
cmp
xchg
cmp
mov
mov
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sub
inc
cmp
ins
cmp
cmp
pushf
cmp
aam
loopne
call
cmp
xor
inc
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
or
sbb
xor
inc
cmp
cmp
pushf
cmp
fdivr
hlt
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
inc
cmp
test
mov
mov
cmp
cld
cmp
sub
xor
cmp
inc
ds
ds
ds
ds
ds
xchg
ds
ds
les
sar
in
ds
ds
sbb
and
xor
dec
aas
push
aas
pusha
aas
jl
test
nop
aas
lods
aas
mov
aas
in
lock
add
or
nop
add
add
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
sbb
xor
cmp
dec
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
xor
xor
xor
xor
cmp
dec
xor
xor
xor
xchg
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
dec
xor
js
mov
movs
xor
mov
xor
in
xor
add
or
sbb
and
sub
xor
cmp
push
ss
ss
mov
xchg
ss
movs
lods
ss
ss
in
ss
ss
ss
or
adc
and
cmp
dec
aaa
fs
ins
aaa
je
jl
test
mov
cwde
aaa
mov
mov
aaa
aam
fdiv
in
in
aaa
hlt
aaa
cld
aaa
add
adc
sub
xor
cmp
inc
cmp
cmp
cmp
pushf
cmp
aam
fdivr
in
lock
adc
sbb
and
xor
dec
cmp
cmp
cmp
fdivr
hlt
cmp
cmp
and
xor
dec
cmp
je
jl
test
mov
xchg
cmp
mov
cmp
cmp
cmp
xor
dec
cmp
cmp
jl
test
mov
pushf
cmp
sar
fdivr
in
in
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
xor
pop
cmp
nop
cmp
mov
cmp
adc
and
cmp
dec
ds
js
mov
mov
mov
ds
ds
ds
ds
or
adc
sbb
and
xor
dec
aas
pop
aas
je
jl
test
mov
cwde
aas
mov
mov
aas
lock
add
add
add
add
or
sbb
xor
cmp
inc
xor
xor
push
xor
enter
add
or
adc
and
sub
cmp
pusha
xor
xor
xor
fdiv
call
xor
cmp
inc
xor
xor
mov
mov
xor
xor
xor
xor
xor
xor
dec
xor
xor
xor
mov
xor
xor
sbb
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
pusha
xor
mov
movs
xor
mov
xor
in
in
xor
add
or
adc
sbb
and
sub
xor
cmp
inc
ss
ss
ss
ss
ss
jl
test
mov
xchg
ss
movs
lods
ss
mov
ss
fdiv
in
in
ss
ss
ss
or
sbb
xor
cmp
inc
aaa
dec
aaa
push
aaa
pop
aaa
fs
ins
aaa
je
jl
test
mov
xchg
aaa
pushf
aaa
movs
aaa
lods
aaa
mov
mov
aaa
aam
fdiv
in
in
aaa
hlt
aaa
add
sbb
and
sub
xor
cmp
inc
cmp
ins
cmp
xchg
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
dec
cmp
je
cmp
cmp
cmp
cmp
cmp
and
cmp
dec
cmp
cmp
movs
cmp
les
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
lods
cmp
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sub
cmp
jl
test
mov
sar
cmp
and
cmp
inc
ds
ds
ds
ds
ds
ds
sar
ds
aas
adc
sbb
and
xor
dec
aas
push
aas
pusha
aas
jl
mov
movs
aas
lods
aas
mov
mov
aas
in
aas
hlt
aas
add
add
add
add
sbb
sub
inc
xor
ins
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
inc
xor
xor
xor
mov
cwde
xor
xor
xor
xor
xor
xor
xor
xor
dec
xor
xor
xor
xor
xor
aam
fdiv
in
lock
xor
xor
cmp
inc
xor
xor
push
xor
xor
xor
xor
xor
xor
xor
or
sbb
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
push
xor
shl
xor
sbb
and
xor
dec
ss
ss
ss
ss
ss
shl
ss
aaa
adc
sbb
sub
inc
aaa
push
aaa
ins
aaa
js
xchg
aaa
mov
aaa
int3
aaa
fdiv
hlt
aaa
add
sbb
sub
xor
inc
cmp
cmp
cmp
cmp
mov
sar
cmp
cmp
cmp
sub
xor
cmp
dec
cmp
cmp
cmp
int3
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
enter
in
cmp
cmp
sbb
and
xor
dec
cmp
je
cmp
cmp
aam
fdivr
in
lock
adc
and
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
xor
cmp
dec
cmp
mov
mov
cmp
in
lock
sbb
and
sub
xor
inc
ds
ds
ds
jl
test
mov
xchg
mov
ds
lock
sbb
xor
inc
aas
pop
aas
push
aas
xchg
aas
pushf
aas
movs
aas
lods
aas
mov
aas
call
add
add
add
adc
sub
xor
cmp
dec
xor
xor
xor
mov
xor
xor
xor
xor
xor
or
adc
xor
cmp
inc
xor
ins
xor
xor
mov
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
les
shl
in
xor
xor
xor
or
adc
sbb
and
sub
cmp
push
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
adc
and
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
jl
test
mov
mov
xor
cld
xor
xor
dec
ss
ss
ss
mov
movs
lods
ss
shl
ss
lock
adc
sbb
sub
inc
aaa
dec
aaa
push
aaa
pusha
aaa
jl
test
mov
cwde
aaa
mov
mov
aaa
fdiv
hlt
aaa
cld
aaa
add
adc
sub
xor
cmp
inc
cmp
ins
cmp
xchg
cmp
cmp
cmp
cmp
cmp
sbb
sub
inc
cmp
cmp
cmp
cmp
cmp
cmp
and
inc
cmp
cmp
cmp
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
cmp
inc
cmp
ins
cmp
xchg
cmp
cmp
cmp
cmp
sbb
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
dec
cmp
jl
pushf
cmp
test
lods
cmp
in
lock
sbb
cmp
inc
ds
ds
ds
ds
ds
movs
ds
mov
ds
or
and
xor
cmp
push
aas
mov
movs
aas
mov
mov
aas
cld
aas
add
add
add
add
xor
xor
dec
xor
xor
test
nop
xor
xor
xor
xor
xor
xor
and
cmp
dec
xor
xor
shl
xor
xor
adc
sub
cmp
push
xor
xor
mov
cwde
xor
in
lock
sbb
xor
inc
xor
xor
mov
cwde
xor
clc
xor
or
sbb
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
dec
xor
mov
shl
adc
sub
xor
cmp
pop
ss
ss
movs
lods
ss
shl
ss
aaa
sub
cmp
push
aaa
pusha
aaa
push
aaa
lods
aaa
mov
aaa
cld
aaa
or
and
xor
dec
cmp
je
cmp
cmp
cmp
cmp
cmp
cmp
and
and
sub
cmp
dec
cmp
cmp
cmp
sar
in
cmp
cmp
cmp
sub
inc
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
xor
dec
cmp
cmp
cwde
cmp
aam
fdivr
call
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
mov
add
xor
xor
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
dec
xor
pusha
xor
xor
mov
mov
pushf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
sub
xor
inc
xor
pop
xor
ins
xor
test
test
lods
xor
shl
call
xor
and
and
xor
xor
cmp
dec
ss
ss
ss
je
js
test
mov
mov
cwde
ss
mov
ss
shl
ss
fdiv
call
add
adc
adc
and
sub
cmp
cmp
dec
aaa
push
aaa
pusha
aaa
fs
push
aaa
test
mov
mov
cwde
aaa
pushf
aaa
mov
les
fdiv
in
aaa
lock
add
add
adc
sbb
sub
sub
xor
cmp
inc
cmp
cmp
pop
cmp
cmp
mov
mov
cmp
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
xor
xor
inc
cmp
pop
cmp
cmp
cmp
cmp
lods
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
adc
and
and
sub
cmp
cmp
dec
cmp
pusha
cmp
cmp
mov
mov
pushf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
adc
sbb
and
sub
sub
xor
cmp
inc
cmp
cmp
cmp
ins
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sub
xor
cmp
dec
cmp
pusha
cmp
je
js
mov
mov
cmp
fdivr
lock
adc
sbb
sub
sub
cmp
inc
ds
ds
ds
ds
ds
cmp
ds
ds
mov
ds
fdivr
loopne
lock
ds
or
sbb
sbb
sub
xor
inc
aas
inc
aas
push
aas
pop
aas
push
aas
jl
cmp
aas
nop
aas
xchg
aas
cwde
aas
movs
aas
test
lods
aas
mov
aas
sar
loopne
in
hlt
aas
clc
aas
add
add
or
mov
xor
sbb
and
xor
xor
inc
xor
pop
xor
xor
xor
xor
cwde
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
and
and
xor
cmp
dec
xor
xor
jo
je
xor
xor
xor
mov
shl
xor
xor
xor
xor
xor
xor
xor
adc
adc
sbb
and
sub
cmp
cmp
dec
xor
push
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
adc
sbb
sub
sub
cmp
inc
xor
xor
xor
ins
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
sub
dec
xor
fs
mov
pushf
xor
mov
mov
xor
fdiv
lock
add
adc
sbb
sub
sub
xor
cmp
inc
ss
ss
ss
ss
mov
nop
ss
mov
ss
fdiv
loopne
in
ss
ss
or
sbb
sbb
sub
xor
inc
aaa
inc
aaa
push
aaa
pop
aaa
push
aaa
xor
aaa
xchg
aaa
cwde
aaa
movs
aaa
test
lods
aaa
mov
mov
aaa
shl
loopne
in
clc
aaa
cld
aaa
or
adc
and
and
xor
cmp
dec
cmp
cmp
jo
je
test
mov
cwde
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
cmp
cmp
dec
cmp
pusha
cmp
cmp
mov
mov
pushf
cmp
cmp
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
sbb
sub
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
sbb
and
xor
xor
inc
cmp
pop
cmp
cmp
cmp
cmp
test
lods
cmp
aam
in
call
cmp
adc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
and
sub
dec
cmp
fs
mov
pushf
cmp
mov
mov
les
fdivr
add
add
adc
sbb
sub
sub
cmp
inc
ds
ds
ds
ds
cmp
ds
movs
ds
mov
sar
loopne
in
hlt
ds
or
or
sbb
sbb
and
and
xor
xor
cmp
inc
aas
dec
aas
dec
aas
pop
aas
pop
aas
pusha
aas
ins
aas
jo
je
cmp
aas
mov
xchg
aas
cwde
aas
pushf
aas
test
lods
aas
mov
mov
aas
sar
aam
fdivr
in
call
aas
cld
aas
add
or
mov
xor
xor
xor
xor
cmp
dec
xor
xor
xor
je
js
test
mov
mov
cwde
xor
mov
mov
shl
xor
xor
xor
xor
xor
xor
xor
xor
and
sub
cmp
cmp
dec
xor
pusha
xor
xor
xor
xor
xor
aam
fdiv
fdiv
call
xor
xor
adc
sbb
sub
sub
cmp
inc
xor
xor
xor
ins
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
adc
sbb
and
xor
xor
inc
xor
dec
xor
pop
xor
xor
xor
cwde
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
sub
cmp
inc
xor
fs
js
xor
xor
mov
mov
xor
loopne
in
hlt
xor
or
sbb
and
xor
xor
inc
ss
ss
ss
ss
ss
xor
ss
ss
ss
ss
lods
ss
shl
aam
in
call
ss
adc
adc
and
and
sub
xor
cmp
dec
aaa
push
aaa
pop
aaa
pusha
aaa
fs
jo
je
js
test
mov
mov
cwde
aaa
pushf
aaa
lods
aaa
mov
shl
aaa
aam
fdiv
call
aaa
add
adc
adc
and
sub
cmp
cmp
dec
cmp
cmp
cmp
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
adc
and
sub
add
or
sbb
sbb
sub
xor
inc
ds
ds
ds
ds
cmp
ds
ds
mov
ds
mov
add
loopne
add
xor
fdiv
fdiv
in
xor
xor
xor
adc
sbb
sub
sub
cmp
inc
xor
push
xor
push
xor
xor
mov
xor
xor
xor
xor
xor
xor
sbb
and
xor
xor
inc
xor
pop
xor
xor
xor
xor
lods
xor
xor
xor
xor
xor
xor
xor
xor
xor
and
sub
cmp
cmp
dec
xor
pusha
xor
xor
xor
xor
movs
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
sub
xor
pop
xor
xor
xor
mov
xor
call
xor
and
and
xor
cmp
dec
ss
ss
ss
ss
je
test
mov
cwde
ss
lods
ss
shl
ss
fdiv
call
add
add
adc
adc
sbb
and
sub
cmp
cmp
inc
aaa
dec
aaa
push
aaa
push
aaa
pusha
aaa
fs
push
aaa
jl
mov
mov
pushf
aaa
mov
aaa
les
enter
fdiv
in
aaa
lock
add
add
adc
sbb
sub
sub
cmp
cmp
inc
cmp
cmp
push
cmp
push
cmp
cmp
mov
cmp
cmp
cmp
cmp
cmp
cmp
sbb
sbb
and
and
xor
xor
cmp
inc
cmp
dec
cmp
pop
cmp
ins
cmp
je
cmp
cmp
cmp
les
aam
fdivr
call
cmp
cmp
cmp
and
sub
cmp
cmp
dec
cmp
pusha
cmp
cmp
mov
mov
pushf
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
cmp
cmp
inc
cmp
cmp
lock
inc
add
add
xor
dec
xor
pusha
xor
xor
mov
mov
pushf
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
sbb
sub
sub
xor
cmp
cmp
inc
xor
xor
xor
xor
ins
xor
jl
xor
xor
xor
mov
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
or
or
sbb
sbb
and
sub
sub
xor
xor
inc
xor
xor
xor
xor
xor
jl
xor
xor
xor
movs
ss
lods
ss
mov
mov
aaa
je
jl
test
mov
xchg
aaa
pushf
aaa
movs
aaa
lods
aaa
mov
mov
aaa
aam
fdiv
in
in
aaa
hlt
aaa
cld
aaa
add
or
adc
sbb
and
sub
xor
cmp
inc
cmp
cmp
cmp
cmp
cmp
movs
cmp
les
int3
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
add
add
or
movs
add
add
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
adc
sbb
and
sub
xor
cmp
inc
cmp
dec
cmp
pop
cmp
fs
jo
je
js
jl
cmp
cmp
cwde
cmp
movs
cmp
or
rol
add
lods
xor
xor
enter
cld
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
movs
xor
les
int3
xor
xor
xor
xor
xor
xor
xor
or
adc
sbb
and
sub
xor
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
sbb
and
sub
xor
cmp
inc
xor
pop
xor
je
jl
lock
ds
ds
add
add
or
or
adc
adc
add
add
adc
sbb
and
sub
xor
cmp
inc
xor
push
xor
pusha
xor
jo
js
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
pop
xor
lock
xor
shl
xor
add
sbb
sbb
and
xor
cmp
cmp
push
ss
ss
ss
ss
je
xor
mov
shl
fdiv
cld
aaa
add
or
adc
adc
sbb
sbb
and
and
sub
xor
cmp
add
add
add
xor
inc
xor
push
xor
js
jl
mov
movs
xor
shl
xor
clc
xor
adc
and
and
xor
xor
dec
ss
ss
ss
ss
test
nop
ss
mov
ss
enter
fdiv
fdiv
call
ss
or
or
and
and
xor
xor
inc
aaa
inc
aaa
push
aaa
push
aaa
push
aaa
jl
mov
mov
cwde
aaa
pushf
aaa
test
lods
aaa
shl
aaa
add
add
cmp
push
cmp
cmp
cmp
sar
aam
lock
cmp
cmp
sub
sub
inc
cmp
cmp
cmp
mov
mov
enter
loopne
in
add
add
sbb
sbb
xor
xor
dec
cmp
cmp
cmp
sar
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
or
nop
or
or
add
add
or
add
add
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
shl
xor
xor
xor
xor
add
mov
add
add
add
xor
xor
xor
xor
xor
xor
xor
push
xor
add
sbb
xor
dec
ss
xor
ss
enter
adc
xor
pop
aaa
js
cwde
aaa
mov
enter
add
sbb
cmp
pop
cmp
mov
mov
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
or
adc
xor
push
cmp
nop
cmp
cmp
cmp
cmp
push
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
js
nop
cmp
sar
cmp
add
add
or
or
adc
adc
sbb
sbb
and
and
sub
sub
push
ds
js
add
or
push
xor
xor
xor
or
or
adc
adc
sbb
sbb
and
and
sub
sub
xor
xor
cmp
cmp
inc
xor
xor
xor
xor
xor
xor
xor
xor
xor
nop
xor
mov
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
xor
inc
xor
xchg
xor
lods
xor
les
fdiv
hlt
xor
or
adc
sbb
and
sub
xor
cmp
inc
ss
ss
ss
add
push
aaa
or
push
aaa
adc
push
aaa
sbb
push
aaa
and
es
sub
cs
xor
ss
cmp
ds
inc
aaa
inc
aaa
dec
aaa
dec
aaa
push
aaa
push
aaa
pop
aaa
pop
aaa
bound
data16
push
outs
aaa
jb
jbe
jp
jle
xor
aaa
mov
mov
xchg
aaa
xchg
aaa
call
aaa
stos
aaa
scas
aaa
mov
mov
mov
aaa
(bad)
aaa
retf
aaa
shl
(bad)
aaa
fidiv
fidiv
loop
out
jmp
aaa
cli
aaa
add
and
xor
inc
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
cmp
loopne
add
add
add
cmp
cmp
int3
cmp
cmp
ds
xor
xor
cmp
cmp
inc
ds
ds
ds
ds
ds
rcl
push
stc
test
jmp
inc
pusha
mov
pusha
mov
lea
call
push
adc
pushf
pusha
mov
lea
call
jmp
add
push
imul
outs
ins
push
outs
imul
push
pusha
lea
jmp
push
sbb
cmp
cmps
inc
xor
xchg
sahf
jae
push
stc
repz
or
push
or
cmp
jno
mov
mov
popf
in
repnz
push
daa
inc
aaa
sub
outs
push
mov
ja
mov
xchg
das
int3
in
aam
mov
mov
cli
cmp
ret
lahf
dec
jge
icebp
into
mov
(bad)
rol
hlt
loopne
adc
inc
cmp
popa
ja
test
mov
mov
jle
jne
push
add
inc
gs
jb
jo
add
test
xchg
add
inc
pusha
pushf
jmp
call
add
dec
outs
popa
fs
jne
jae
jb
add
add
je
imul
bound
gs
add
lods
cdq
xchg
mov
imul
retf
sbb
jbe
outs
jns
jg
cdq
les
dec
sbb
cmp
js
(bad)
call
aaa
ss
popa
dec
and
dec
ret
ret
stc
jecxz
cli
add
or
popa
retf
mov
out
push
sbb
sbb
das
arpl
jge
mov
and
and
fnstenv
add
popf
mov
into
and
cmp
mov
mov
push
lea
shl
rol
jp
ds
pop
ins
and
out
repz
std
push
push
sub
xchg
pop
nop
adc
mov
xor
retf
outs
retf
fcmovnb
mov
mov
pop
add
inc
push
dec
push
inc
push
dec
dec
xor
mov
jg
cmp
pop
mov
mov
pusha
pushf
lea
jmp
push
push
pusha
jmp
add
dec
jae
popa
fs
gs
fs
je
add
fiadd
add
test
cmp
push
lea
ja
rol
rcr
jmp
jmp
xor
cmp
scas
aas
push
mov
jp
mov
cmp
pop
inc
dec
sub
je
stos
mov
mov
enter
xchg
je
and
mov
pushf
scas
call
imul
or
or
sbb
mov
cwde
shr
push
pop
icebp
add
imul
lock
jne
push
leave
push
imul
icebp
fcomip
pushf
inc
shl
xor
inc
gs
jb
mov
jae
jo
jne
mov
aas
push
in
mov
xchg
cmp
movs
fsubr
and
movs
leave
arpl
xor
xchg
xchg
mov
sbb
and
je
pushf
mov
push
bswap
pusha
lea
mov
push
pushf
push
xchg
seta
pop
jmp
add
cmps
xchg
stos
inc
sub
push
sbb
sub
loope
(bad)
jmp
sbb
sub
jl
popf
(bad)
fstp
(bad)
cmp
jnp
mov
fmul
mov
loop
inc
jo
mov
xchg
mov
xor
fnstcw
(bad)
jmp
loopne
ins
push
popf
mov
mov
jecxz
scas
out
mov
fmul
(bad)
out
jp
jo
dec
iret
add
pop
xor
js
addr16
cmp
lds
fcmovne
jmp
call
sub
inc
hlt
xchg
push
xchg
cwde
jne
push
jle
jge
inc
add
and
sbb
push
not
add
sbb
push
dec
push
retf
les
adc
gs
jne
fisttp
xchg
test
enter
pop
fisttp
arpl
cwde
sbb
pop
inc
pop
mov
add
or
hlt
or
popa
adc
loop
leave
out
les
or
fisttp
inc
jne
test
call
add
dec
pop
inc
dec
das
fs
push
inc
jge
mov
fsub
add
test
movs
stos
lods
fwait
(bad)
mov
sbb
pop
xor
outs
dec
dec
xor
pop
dec
sti
fnstenv
and
sub
mov
push
pop
inc
push
dec
xor
xor
gs
jg
test
lahf
xchg
or
and
icebp
xchg
sbb
dec
cmps
leave
ror
mov
movs
ret
(bad)
hlt
push
icebp
or
pop
ds
inc
call
add
inc
gs
gs
inc
ins
addr16
popa
bound
gs
add
add
je
outs
ins
jns
imul
pushf
repnz
jmp
cmp
bt
sub
call
add
inc
outs
popa
bound
outs
jne
je
ins
add
out
(bad)
xor
in
fwait
mov
stos
fadd
sti
jecxz
icebp
aas
and
addr16
sar
sar
or
pop
push
add
adc
adc
in
hlt
sbb
mov
sbb
test
and
push
out
into
ins
push
jg
cmp
xor
add
xor
dec
xor
call
ds
lods
mov
dec
xor
xor
xor
jge
daa
push
inc
stos
ret
mov
xor
and
aam
sub
js
sbb
call
fiadd
dec
outs
push
ins
push
pop
inc
dec
cmp
cmp
loop
sbb
push
sbb
loopne
push
pop
inc
lds
out
sub
stos
xchg
test
sbb
or
frstor
adc
dec
imul
xchg
cmp
add
pop
add
or
and
push
inc
imul
in
cmc
and
or
cmc
fidiv
sub
inc
jmp
(bad)
fcmovb
call
daa
inc
xor
jo
xchg
jb
dec
fcmovnb
(bad)
in
push
test
push
mov
sub
inc
cs
pop
add
adc
inc
ins
push
ror
pop
lods
lea
mov
jno
outs
cmps
xchg
xchg
jno
xchg
in
fisubr
in
loop
mov
sbb
gs
sub
inc
cmp
nop
jle
mov
cdq
jmp
cmps
lock
popa
adc
adc
das
sbb
in
loop
and
(bad)
mov
sbb
pop
aad
lds
jo
nop
jg
imul
adc
cmp
cmp
cli
ret
mov
jecxz
(bad)
push
outs
jg
ror
ret
mov
repnz
maxps
xchg
inc
xchg
and
sbb
test
mov
sbb
adc
sub
push
clc
or
xor
imul
ficom
call
mov
test
mov
add
test
add
pusha
call
adc
sbb
dec
xor
outs
push
mov
adc
cmp
cmps
inc
push
cmp
imul
mov
jecxz
and
popf
dec
aaa
and
and
add
or
fisttp
(bad)
rcl
pop
inc
jge
repnz
(bad)
repz
sbb
in
cld
jmp
pop
jo
xor
xchg
movs
and
add
inc
cmp
mov
shl
shl
fadd
jle
or
fidiv
(bad)
dec
je
mov
inc
mov
push
xchg
ja
stos
mov
mov
fcomp
lds
push
ds
aas
pop
inc
pop
inc
inc
ss
jg
ret
or
xor
inc
xor
xor
jo
mov
jo
lea
pushf
test
push
popa
(bad)
in
and
loop
inc
jo
cwde
mov
test
clc
ret
mov
aas
in
popa
push
mov
sti
call
mov
(bad)
mov
nop
jge
imul
inc
xor
mov
call
and
xor
outs
jp
mov
out
and
xor
test
stc
push
push
mov
aad
sbb
adc
sbb
push
inc
pop
inc
pop
inc
xchg
push
ins
push
fs
fs
popa
push
aas
cmp
mov
sbb
sub
imul
sbb
jle
cwde
cmp
fmul
inc
xor
add
jbe
dec
jne
push
jb
je
add
add
gs
je
push
outs
jne
fs
arpl
outs
add
add
je
inc
add
add
ins
inc
imul
je
ins
addr16
je
ins
add
add
je
outs
jne
je
ins
inc
imul
add
push
jae
push
imul
arpl
add
add
gs
je
inc
outs
ins
jo
je
bound
imul
loopne
pushf
lea
jne
call
add
inc
jb
popa
je
push
outs
ins
jns
outs
outs
push
outs
add
test
dec
clc
(bad)
inc
inc
jb
dec
neg
jmp
push
push
pushf
mov
mov
push
pusha
mov
push
ret
push
dec
inc
dec
dec
xor
cs
ins
add
add
je
outs
push
gs
js
gs
imul
gs
inc
jmp
push
mov
mov
lea
call
call
lea
call
push
lea
jae
pusha
xchg
mov
inc
inc
call
call
add
ins
jae
jb
popa
je
add
add
inc
jb
popa
je
push
outs
jo
jo
outs
jne
lea
call
pushf
lea
jae
cmp
cmc
sub
call
lea
ja
sar
pusha
shr
and
sub
movzx
call
pusha
mov
pusha
jmp
mov
lea
je
push
pop
movsx
lea
bswap
movzx
movsx
push
mov
jmp
add
dec
ins
gs
outs
imul
add
enter
mov
or
call
call
add
inc
outs
inc
jb
popa
je
dec
outs
jae
popa
outs
arpl
inc
stc
neg
bt
shr
jmp
add
inc
gs
outs
jbe
jb
outs
ins
outs
je
popa
jb
popa
bound
add
pop
or
jmp
add
inc
gs
jns
je
ins
inc
imul
jns
add
add
gs
imul
pushf
pusha
lea
jne
call
add
push
gs
jb
popa
je
dec
gs
js
add
add
je
imul
addr16
js
push
jmp
push
mov
mov
jmp
int
fld
out
or
add
mov
call
add
push
xchg
jge
xchg
aam
lock
add
pop
inc
dec
xor
cwde
jl
shr
mov
je
idiv
jbe
(bad)
leave
mov
popa
test
lahf
loopne
(bad)
mov
mov
jle
adc
call
int
mov
cmp
dec
mov
xlat
sahf
dec
xchg
adc
and
and
jne
xchg
test
data16
sbb
sub
push
dec
sub
hlt
(bad)
push
aas
movs
sahf
push
ins
dec
dec
mov
mov
mov
sti
in
pop
repnz
lds
mov
sub
xchg
mov
ins
push
mov
sbb
call
ss
sbb
jae
lods
cdq
loope
enter
(bad)
mov
mov
call
mov
repz
stc
sbb
add
sbb
bound
lea
retf
out
jmp
dec
aaa
gs
cs
repnz
data16
cwde
idiv
jp
pop
push
add
push
sub
push
mov
xchg
mov
inc
push
sub
pop
add
push
daa
xor
or
cmp
out
sbb
pusha
xchg
mov
psadbw
ins
xchg
mov
push
mov
(bad)
mov
loope
adc
sti
sub
push
inc
pop
inc
jns
mov
push
mov
(bad)
sbb
push
pop
jg
rcr
or
cld
sbb
psadbw
mov
rol
icebp
jecxz
in
popa
sbb
sar
fmul
repnz
mov
xchg
xchg
xchg
mov
adc
sbb
std
jmp
or
shl
mov
jae
imul
out
fisub
xor
je
jle
cmp
ins
pop
mov
xchg
jns
inc
and
mov
mov
frstor
push
sbb
and
psllw
(bad)
jmp
pusha
mov
bound
add
fdiv
(bad)
sahf
cmps
call
sub
mov
or
popa
pop
sahf
xchg
adc
dec
outs
data16
popa
je
push
arpl
add
push
imul
add
inc
gs
imul
je
js
add
add
dec
pushf
stc
cmc
mov
not
clc
stc
xor
jmp
push
cli
loopne
push
imul
retf
sbb
out
adc
sub
mov
push
cmps
mov
sub
retf
(bad)
xor
das
and
out
(bad)
shr
inc
sub
inc
xor
inc
ss
push
ror
out
clc
jbe
mov
(bad)
fcomp
stc
loop
or
test
data16
sar
xchg
jle
mov
lock
je
dec
jb
mov
(bad)
sti
call
pop
push
pop
cld
jnp
xchg
cdq
in
fsubr
push
xchg
sub
es
xchg
jns
lods
jmp
add
and
inc
xor
xor
jp
test
mov
mov
add
gs
outs
jbe
jb
outs
ins
outs
je
je
imul
movzx
call
sar
out
add
sbb
mov
pop
inc
push
dec
dec
cs
sub
mov
(bad)
rcr
push
jle
inc
cmp
and
(bad)
xchg
jmp
add
cmp
and
sub
push
out
sbb
sbb
adc
cmp
add
ins
push
loope
out
fadd
psubb
in
(bad)
mov
inc
dec
fs
xor
push
dec
popa
push
pop
inc
pop
dec
xor
push
mov
mov
xor
push
fadd
test
out
hlt
(bad)
mov
dec
cmp
inc
ror
push
jmp
dec
inc
cmp
imul
jle
jnp
mov
(bad)
enter
add
inc
jb
popa
je
inc
outs
ins
jo
je
bound
inc
add
xor
inc
stc
clc
push
mov
neg
stc
test
push
popfw
push
mov
inc
push
pushf
push
adc
lea
push
pushf
push
ret
stc
bt
test
sub
mov
pusha
pushf
rep
lea
mov
pushf
pushf
push
lea
jmp
mov
pusha
mov
pushf
lea
jmp
call
call
push
call
call
jmp
add
dec
inc
dec
popa
jo
je
imul
scas
in
sub
std
popa
gs
popa
push
mov
repz
push
cmp
mov
fstp
sbb
pop
(bad)
ss
mov
int3
mov
add
neg
push
inc
mov
das
sbb
xor
add
push
jmp
stos
imul
sbb
inc
jp
scas
xchg
stos
xor
dec
adc
dec
neg
and
push
outs
push
ds
jp
jge
out
and
push
jmp
sub
cdq
xchg
cmp
pop
add
je
or
int3
jmp
pushf
push
jmp
add
push
je
jb
push
popa
add
add
imul
je
push
jb
imul
imul
inc
gs
jb
jns
outs
jne
(bad)
out
sbb
or
or
sub
fwait
and
sti
cmp
je
add
jmp
inc
ficomp
lahf
sbb
mov
(bad)
enter
mov
leave
sar
cmp
js
(bad)
inc
mov
adc
lahf
repnz
dec
call
mov
dec
mov
sub
repnz
jae
cmps
pop
ffreep
ret
mov
cmp
test
(bad)
fcmovb
sbb
xor
dec
cmp
nop
jle
outs
lods
xchg
popf
test
ffree
adc
outs
fsubr
adc
adc
imul
inc
les
(bad)
es
imul
mov
(bad)
icebp
(bad)
shl
fs
ins
addr16
je
ins
dec
gs
popa
addr16
add
xchg
outs
add
push
pusha
lea
jae
dec
not
mov
push
not
setns
setb
inc
setg
mov
pusha
mov
lea
call
pusha
push
jmp
xor
int
mov
add
mov
jle
mov
in
push
jb
xchg
jle
test
shl
sub
outs
pop
inc
mov
cwde
shr
mov
xchg
icebp
xor
daa
retf
or
jo
sahf
mov
nop
xchg
lea
sub
jne
test
jbe
xchg
hlt
(bad)
mov
push
inc
pop
push
je
mov
popf
mov
xlat
adc
sbb
inc
pop
pop
cmp
pop
inc
pop
test
test
paddw
mov
(bad)
jmp
cmc
xchg
ret
adc
imul
ins
push
jae
mov
mov
mov
push
cmps
xchg
rol
repz
les
or
ds
daa
pop
jno
stc
loop
sti
cmp
gs
lock
sub
aam
fst
mov
jg
ins
mov
mov
or
pop
lock
mov
adc
ins
push
scas
xchg
cli
fistp
push
or
and
sbb
mov
ret
icebp
xor
ja
mov
add
add
cmp
das
fs
pop
inc
retf
push
or
pop
sahf
mov
sar
movs
(bad)
stc
fmulp
dec
xor
lahf
pop
sahf
test
jmp
mov
cmp
movhps
adc
repnz
rcr
aaa
and
sub
loope
cmp
lds
jbe
pop
dec
mov
ret
stos
aad
retf
scas
rol
ror
fdivr
lods
inc
daa
mov
xchg
sar
sar
in
popa
and
pop
mov
xchg
jecxz
or
sub
cmps
adc
pop
add
xchg
xor
out
xlat
enter
sbb
push
or
dec
fldcw
les
sbb
retf
fcmovne
ret
mov
call
mov
cwde
jg
push
adc
adc
push
push
sti
es
or
dec
xor
popa
mov
addr16
(bad)
fmul
int3
(bad)
jns
enter
pop
iret
out
inc
mov
mov
loopne
je
nop
test
xchg
nop
cmp
sbb
push
inc
push
dec
xor
cs
ins
add
lea
call
pusha
mov
lea
jae
clc
pusha
mov
bt
sub
jmp
add
ins
jae
jb
ins
jo
inc
add
add
outs
inc
imul
outs
addr16
add
clc
jmp
add
inc
gs
outs
jo
imul
jl
adc
movzx
mov
mov
push
mov
movzx
push
mov
pushf
mov
push
ret
lea
je
cmc
test
cmp
pusha
call
pushf
mov
lea
jne
call
add
inc
imul
add
setbe
mov
not
setge
pushf
mov
pushf
clc
mov
add
adc
mov
mov
sub
pusha
rep
movsx
mov
push
lea
jmp
add
push
gs
gs
inc
outs
ins
outs
jb
pop
jmp
fmul
aad
fcom
adc
scas
xchg
cld
fldcw
or
or
sbb
push
mov
repnz
or
jo
xchg
test
cwde
mov
jo
cmp
xchg
call
xor
outs
dec
inc
cmp
fs
xchg
mov
sub
add
pop
inc
es
iret
cmp
(bad)
js
xchg
dec
xchg
(bad)
mov
or
pop
dec
imul
pop
(bad)
lods
cwde
xchg
jbe
cmps
aam
lods
pop
add
retf
outs
loopne
xlat
out
cmp
push
ins
mov
loop
inc
mov
xchg
mov
std
fisub
pop
sbb
cmc
or
jge
dec
test
stc
adc
mov
jmp
out
pmuludq
repnz
add
adc
and
add
sbb
or
cld
jmp
shr
and
adc
cdq
lea
and
and
pop
lea
into
push
xchg
js
sub
push
inc
sub
add
cld
inc
cmp
pop
in
idiv
pop
bound
in
pop
cmp
out
(bad)
xchg
sub
cmp
dec
cs
ins
rol
shl
(bad)
mov
dec
je
fsub
jl
adc
adc
mov
repnz
clc
imul
fs
clc
call
adc
pop
clc
cmp
jp
test
test
mov
loop
adc
ins
movs
clc
or
adc
gs
addr16
popa
push
imul
into
sar
ins
outs
pop
add
inc
gs
imul
popa
arpl
outs
je
push
pusha
push
jl
test
movs
cmp
mov
inc
mul
daa
adc
imul
loopne
jmp
dec
ss
cmp
push
aas
nop
sbb
outs
ja
push
or
mov
push
sub
xchg
ffree
jge
xor
pop
lahf
mov
adc
and
sub
sub
or
mov
repz
ins
pop
imul
out
les
leave
(bad)
(bad)
in
push
push
mov
enter
and
mov
xchg
sub
lea
jo
xchg
xor
push
stos
cwde
ins
not
mov
dec
sub
xchg
sub
adc
and
inc
aaa
or
xchg
jg
pushf
int3
mov
fisttp
mov
inc
inc
xor
das
popf
test
mov
fwait
daa
adc
xchg
test
in
cmc
in
push
sbb
sbb
and
xchg
pop
dec
jbe
imul
test
pop
inc
cld
rcr
leave
idiv
add
sbb
xchg
cmp
xchg
xchg
xor
and
ins
arpl
imul
fdiv
and
shr
pushf
lea
jmp
add
inc
js
push
gs
arpl
imul
add
addr16
jo
outs
dec
gs
js
add
add
je
jne
jb
outs
je
jb
arpl
jae
add
inc
gs
ins
imul
add
imul
add
inc
gs
outs
jne
push
popa
jb
inc
imul
outs
jae
add
dec
data16
je
arpl
call
out
cs
mov
add
jo
loop
aad
or
pop
dec
(bad)
vcomiss
sub
popf
repnz
pop
lahf
popf
scas
mov
nop
adc
ret
mov
sub
out
and
aad
mov
shr
sub
pop
inc
mov
cmp
jle
mov
xchg
movs
aas
add
push
repnz
mov
outs
push
aas
inc
imul
int3
scas
sub
mov
inc
cs
and
push
jns
pop
mov
adc
sbb
adc
cmc
jecxz
sub
or
jmp
jecxz
xchg
mov
sar
in
or
inc
xchg
inc
iret
mov
sbb
pop
lods
sub
cmp
popa
cwde
in
xchg
jae
popf
cmp
xchg
mov
pop
inc
aas
mov
ins
in
xchg
aam
in
add
mov
add
nop
mov
aad
mov
sbb
mov
xchg
sbb
(bad)
push
stc
in
aam
adc
les
sub
jp
shl
mov
adc
jge
sbb
lahf
bnd
or
movs
dec
mov
push
mov
xor
push
mov
ss
cli
pushf
retf
int3
sub
jge
pop
push
ficomp
add
jg
dec
adc
ret
jmp
aad
mov
popf
mov
in
jle
shl
xor
cmp
out
inc
mov
rol
xor
xor
mov
outs
sar
sbb
xchg
scas
aas
xchg
outs
add
stc
jg
sti
test
mov
push
pop
adc
mov
xchg
movs
nop
jle
aam
imul
(bad)
sub
push
push
jecxz
loop
cmps
mov
jns
test
push
inc
xor
jcxz
sub
leave
and
xor
lahf
mov
mov
(bad)
fmul
ja
call
add
dec
outs
je
jb
gs
outs
outs
outs
arpl
jl
pusha
mov
lea
jno
push
push
mov
push
lea
jmp
add
push
gs
gs
popa
ins
jne
inc
js
add
inc
sub
push
js
push
xor
loope
and
ins
dec
outs
push
mov
fld
into
scas
(bad)
loopne
push
imul
ins
mov
xchg
sbb
push
(bad)
pop
out
movs
mul
iret
std
ja
mov
test
cmps
(bad)
adc
pop
aas
jne
mov
and
rcr
leave
sbb
retf
push
mov
push
pop
in
loopne
sbb
or
xor
pop
por
jg
mov
into
mov
pop
jnp
mov
dec
push
xchg
aaa
adc
pop
or
int3
push
shr
ror
mov
(bad)
in
fadd
jecxz
call
call
push
add
push
push
push
mov
lea
jmp
add
inc
dec
push
dec
inc
inc
jb
ins
push
je
imul
or
and
jae
pusha
test
cmp
pushf
mov
pusha
jmp
add
add
cwde
push
add
xor
inc
aas
mov
and
dec
sub
daa
push
neg
pushf
bsf
das
mov
clc
cmp
push
aad
pushf
shl
xor
jmp
add
inc
gs
imul
dec
outs
outs
jb
popa
je
outs
outs
add
fs
ja
push
imul
add
push
bt
pusha
test
add
mov
pushf
lea
jmp
in
adc
add
add
add
adc
add
adc
add
add
add
add
add
mov
add
adc
add
adc
add
stos
adc
add
add
add
add
push
adc
add
test
add
adc
add
push
adc
add
push
adc
add
cdq
sbb
add
add
add
add
add
push
adc
add
push
adc
add
jnp
add
adc
add
ficomp
add
adc
add
add
add
pop
adc
add
adc
add
adc
add
add
add
adc
add
dec
jae
arpl
imul
call
add
inc
outs
fs
outs
arpl
add
dec
jae
arpl
jo
jns
add
inc
ins
ins
imul
inc
gs
jne
dec
outs
jne
bt
sub
cmp
stc
cmp
push
pushf
lea
ja
jmp
push
shl
push
lea
je
call
sub
adc
ins
push
movs
outs
jl
mov
lock
sbb
jne
mov
(bad)
pop
inc
xor
scas
push
inc
xchg
popa
and
jo
xchg
mov
aaa
inc
sub
sub
mov
clc
adc
psadbw
loopne
mov
inc
and
jno
test
scas
repz
add
jecxz
jbe
push
ds
repz
adc
(bad)
call
std
mov
stos
int
ret
inc
pop
jmp
jns
push
leave
(bad)
outs
mov
ror
(bad)
jmp
and
pop
add
and
scas
xchg
sar
shl
mov
push
push
call
clc
mov
fst
push
dec
push
dec
dec
cs
das
ins
push
gs
popf
call
mov
jecxz
sbb
in
popa
cs
mov
repz
inc
sub
rol
inc
xchg
push
push
jmp
mov
and
xchg
mov
aam
push
loopne
push
cwde
mov
or
ja
std
in
mov
xor
sub
sbb
cdq
sub
adc
adc
push
sub
adc
int
push
inc
jno
scas
xchg
scas
cwde
mov
enter
mov
gs
inc
pusha
stos
push
push
mov
lea
jmp
pushf
mov
mov
mov
mov
mov
lea
jmp
call
add
push
je
outs
push
arpl
cmps
sub
add
fs
je
pusha
push
mov
sub
cmp
bt
cmp
pushf
push
pushf
pushf
lea
ja
pusha
cmc
imul
pusha
pushf
push
lea
jmp
add
inc
gs
imul
cmps
stos
mov
fcmovb
sbb
aaa
sub
shl
jno
jnp
imul
sti
push
(bad)
ficom
add
ds
jp
xchg
loop
nop
xchg
mov
pop
aad
fwait
lea
add
pop
aas
cdq
dec
lods
xchg
xchg
mov
pop
sub
xor
xor
imul
mov
jae
pop
jecxz
sub
jle
mov
push
push
(bad)
mov
jnp
mov
inc
loopne
(bad)
sahf
xchg
cwde
cdq
cmp
push
cmp
dec
cmp
push
jb
mov
lahf
cdq
cs
pop
loope
cld
or
mov
xor
mov
ret
jmp
xor
lock
jp
push
jp
xchg
sbb
cld
loope
cld
jmp
inc
and
std
fs
push
cwde
mov
cmp
fisttp
movs
xchg
cmp
mov
(bad)
cld
jmp
fwait
push
inc
pop
inc
mov
cli
jge
xchg
jl
xchg
xchg
cmp
iret
jo
mov
mov
fmul
in
out
in
scas
sar
jl
jne
ret
into
push
mov
jns
jno
jno
xlat
shl
ret
mov
in
lock
dec
aaa
add
push
jns
cmp
cdq
xlat
jnp
in
jmp
lods
ss
mov
in
add
pop
dec
dec
xor
lods
xchg
mov
test
mov
lahf
test
adc
and
ret
enter
add
xor
push
test
stos
xchg
cli
(bad)
pop
pop
inc
gs
pop
dec
cdq
jb
push
(bad)
fdivr
cdq
aam
pop
dec
pop
or
adc
and
loop
retf
mov
inc
pop
push
mov
scas
jmp
cmp
and
mov
out
jmp
retf
mov
jno
mov
fadd
fdivr
mov
jnp
cli
pop
mov
jb
xchg
cdq
xlat
jnp
outs
add
fnstenv
mov
cmc
jmp
xchg
jle
xchg
movs
nop
xchg
mov
fisttp
ins
push
jae
stos
(bad)
mov
xor
sahf
mov
movs
enter
xor
inc
xor
pop
test
fwait
xchg
push
not
cdq
xlat
jp
imul
mov
jmp
mov
out
in
cmp
ins
push
push
sar
(bad)
add
mov
xor
jbe
ja
lods
out
xor
pop
dec
dec
xor
ins
mov
jg
lods
(bad)
fadd
mov
pop
jbe
adc
rcr
arpl
jle
xchg
dec
jno
fisttp
clc
adc
ret
mov
add
je
imul
shl
mov
cmp
jmp
add
inc
ins
outs
bound
inc
ins
ins
outs
arpl
or
popa
cmps
xchg
xlat
mov
(bad)
stos
in
cvtps2pd
ins
call
stos
push
mov
mov
xchg
jp
add
std
and
rcl
retf
out
fadd
mov
dec
cmp
mov
mov
inc
in
and
jp
sbb
push
or
sti
fst
and
xor
jo
mov
jl
cdq
jmp
les
clc
in
(bad)
rol
dec
ss
adc
mul
sbb
jg
lea
mov
mov
sbb
in
popa
xor
pop
cmp
mov
(bad)
in
aam
or
push
or
jmp
(bad)
jmp
jne
xchg
xor
xor
test
nop
out
xor
test
xor
push
nop
adc
mov
sbb
sbb
jae
(bad)
jl
jne
mov
xchg
or
mov
xchg
test
out
push
and
stc
daa
pop
or
mov
pop
mov
mov
mov
inc
pushf
dec
inc
ss
cmp
arpl
outs
cmps
xchg
ffreep
or
aas
sbb
call
fs
jns
push
scas
jbe
nop
xor
lock
into
out
add
push
push
into
ret
stos
cmp
jnp
movs
xchg
scas
in
ror
sbb
dec
cli
daa
sbb
push
fwait
stc
loopne
sub
jecxz
in
in
xchg
or
inc
shl
fadd
xor
push
jns
mov
cmps
in
shl
aam
jmp
imul
mov
outs
push
(bad)
jbe
jne
cmp
push
outs
sbb
jmp
pop
mov
and
mov
loopne
daa
sbb
pop
xchg
jl
mov
sbb
out
enter
mov
pushf
xor
cmp
push
mov
ret
outs
cmc
jnp
mov
sub
push
sbb
and
psllw
push
push
aas
push
dec
jne
scas
xchg
or
cmp
add
imul
jae
mov
mov
push
push
pusha
lea
jmp
jmp
add
inc
ins
outs
bound
dec
popa
outs
fs
gs
inc
and
frstor
fbld
mov
add
int
(bad)
inc
add
outs
outs
jae
inc
outs
ins
outs
jb
add
add
je
je
arpl
bound
arpl
sar
sbb
btr
sub
stc
rcl
bsr
mov
cmp
sub
push
cmc
test
push
pop
push
jmp
call
add
inc
ins
outs
bound
inc
imul
inc
add
and
not
pop
mov
push
pusha
mov
push
ret
mov
push
lea
call
call
add
inc
jo
outs
fs
outs
jne
add
add
je
outs
jbe
jb
outs
ins
outs
je
je
imul
daa
lock
sub
pushf
push
jmp
add
push
gs
arpl
push
arpl
fs
jne
dec
and
cmc
rcr
mov
call
mov
push
lea
call
push
jmp
add
inc
gs
gs
inc
inc
add
add
je
jb
outs
jb
outs
fs
ja
shl
not
sub
bsf
btc
add
pusha
ror
rcr
mov
pusha
test
pushf
clc
mov
call
add
inc
popa
ins
ins
push
imul
outs
arpl
jmp
lea
jo
push
jmp
add
inc
outs
fs
popa
imul
add
out
cmp
xchg
pop
je
cmps
mov
lods
xchg
cld
fstp
add
and
gs
jmp
or
xor
jae
std
dec
hlt
fiadd
cmp
dec
and
sub
push
xor
mov
movs
mov
test
test
(bad)
stc
inc
xor
std
in
es
add
imul
sub
mov
mov
loopne
cld
and
clc
mov
in
fistp
je
inc
dec
sub
das
cli
jne
fld
mov
or
xor
dec
cmp
mov
jecxz
clc
loopne
pop
sub
lahf
test
outs
hlt
jbe
jo
mov
cs
imul
fcmovne
popf
xor
vshufps
ret
mov
frstor
cmp
jge
push
lea
ja
jbe
add
cmp
jmp
push
mov
push
push
ret
pusha
pushf
inc
call
lea
jne
not
mov
push
pushfw
pop
call
mov
pushf
pushf
mov
lea
jmp
add
dec
jo
outs
push
jb
outs
je
jb
add
add
ja
jb
ins
gs
outs
outs
je
outs
ins
add
stos
es
inc
add
(bad)
xchg
int3
jmp
add
push
arpl
ins
gs
inc
and
jge
(bad)
call
lea
jmp
mov
lea
call
call
lea
bswap
not
mov
lea
jp
push
push
lea
call
call
add
ins
jae
jb
jo
inc
add
fs
je
clc
pusha
lea
jp
add
push
lea
jmp
dec
in
lds
adc
or
inc
push
inc
pop
inc
popa
dec
jnp
pushf
xchg
jo
xchg
aam
loope
fmul
jmp
imul
jl
lods
xchg
in
sub
sub
in
jg
int
mov
iret
cs
dec
xor
pop
inc
push
inc
push
dec
jns
pop
dec
repz
cmp
cld
xor
jae
cld
cmp
imul
dec
movs
and
cld
jmp
and
pop
test
xchg
mov
pusha
test
test
add
jmp
pop
into
mov
iret
(bad)
out
aam
mov
and
jp
mov
retf
(bad)
mov
fld
adc
dec
sub
jns
dec
out
aad
hlt
out
jne
jge
pop
aas
ins
test
int3
mov
xchg
test
out
fisttp
pmaddwd
xlat
mov
inc
xchg
fs
cmp
pop
retf
xchg
and
enter
mov
stos
fldenv
inc
dec
jo
mov
mov
call
mov
jg
xchg
fnstcw
inc
inc
das
mov
idiv
cmp
jmp
and
lock
test
loope
push
outs
aas
and
sbb
retf
jecxz
imul
not
push
into
repnz
dec
jge
xchg
stos
enter
add
and
pop
dec
pusha
mov
test
lds
cmp
(bad)
in
sar
in
push
imul
adc
pop
xchg
xchg
xchg
xchg
cs
mov
or
xor
inc
das
mov
mul
xor
add
inc
push
xchg
test
test
(bad)
addr16
mov
sbb
mov
les
in
aaa
jmp
ins
pop
mov
lea
test
mov
aaa
mov
stos
and
cmp
dec
bsf
mov
test
cmp
pusha
mov
jmp
pushf
inc
pushf
bt
neg
push
mov
mov
lea
call
stc
cmp
jbe
jae
jmp
add
inc
jb
popa
je
push
push
add
sahf
int3
push
pushf
push
pushf
mov
pusha
lea
jmp
add
push
gs
imul
inc
js
inc
js
add
ja
jbe
dec
jne
push
gs
je
mov
pushf
mov
push
pushf
push
mov
lea
jmp
stc
add
push
dec
pushf
call
mov
call
add
inc
gs
jns
inc
outs
ins
outs
jb
jb
jae
add
add
outs
jae
popa
je
dec
gs
popa
addr16
sbb
hlt
push
mov
pusha
lea
jmp
pushf
pushf
mov
push
pushf
pusha
pushf
mov
mov
push
lea
jmp
stos
call
add
inc
gs
je
jb
jne
dec
outs
outs
inc
add
out
add
add
dec
je
jo
jne
jb
dec
outs
outs
inc
add
loop
int3
pushf
mov
call
fsub
mov
sub
mov
and
sbb
retf
jmp
pusha
dec
popa
push
pushf
and
in
(bad)
xor
nop
mov
mov
(bad)
fcmovb
enter
xchg
call
jb
xor
xchg
cmps
pushf
mov
(bad)
fmul
rcl
push
xor
js
xchg
test
or
jnp
mov
lods
ror
push
ins
iret
mov
fucomip
(bad)
jno
mov
mov
jne
jnp
lea
std
loope
and
dec
popa
push
ds
mov
inc
dec
sbb
loopne
pop
cwde
cmp
push
prefetcht0
cmc
push
xchg
xchg
xchg
ret
jnp
push
xchg
mov
(bad)
or
daa
adc
jle
adc
icebp
add
(bad)
in
call
mov
push
cmps
xchg
int3
mov
jmp
into
(bad)
cli
mov
pusha
and
loope
sbb
movs
pushf
sbb
xchg
daa
fdiv
fsub
cmp
sub
push
inc
dec
xor
je
xchg
sbb
ret
mov
mov
lds
out
cli
or
add
in
fld
popa
dec
jae
mov
call
mov
(bad)
add
push
arpl
outs
push
outs
inc
ins
imul
out
add
push
pop
bt
cmp
pushf
lea
ja
pusha
not
sbb
call
add
inc
gs
jns
je
ins
push
imul
and
pop
push
fmul
and
jmp
mov
pushf
push
lea
jmp
add
inc
gs
imul
js
dec
outs
addr16
inc
add
lods
jp
dec
fs
shl
sbb
rol
retf
ficom
clc
pmaxsw
lock
push
push
inc
bound
cmp
pop
inc
sub
inc
pop
fisttp
pop
push
pop
aas
dec
dec
xchg
fidiv
cmps
loope
jmp
jns
sbb
pushf
test
inc
xchg
pop
lods
xchg
jae
retf
add
or
cmp
adc
retf
loope
push
jno
call
sbb
jbe
movs
xchg
lock
push
pop
popf
das
adc
sbb
sub
sahf
test
pop
int3
push
or
dec
icebp
or
push
pop
mov
xchg
call
adc
inc
ins
cmp
(bad)
fidivr
icebp
jecxz
jmp
sub
mov
pop
add
ja
(bad)
mov
mov
or
dec
(bad)
out
int3
mov
jmp
test
xor
xchg
repnz
inc
xchg
aad
xchg
pop
fisubr
or
pop
jl
in
mov
xor
popf
fidivr
cmp
jge
mov
fist
add
xor
push
lahf
nop
jp
cwde
int
lds
lods
cmps
test
pop
mov
xchg
js
cmp
sub
shufps
lds
hlt
loope
and
push
sbb
stos
in
jbe
js
xchg
add
mov
or
repnz
scas
call
mov
pop
dec
and
push
inc
sub
int3
mov
stos
jmp
dec
xor
cmp
jge
push
sti
mov
push
mov
mov
rcl
aad
(bad)
mov
rcr
pop
dec
jnp
jo
arpl
pop
mul
sti
shr
test
shr
test
add
add
xor
add
mov
rcr
shl
cmc
mov
jmp
mov
push
jmp
push
push
push
lea
je
jmp
add
inc
outs
fs
popa
je
add
inc
cmp
xchg
test
sub
stc
retf
test
or
and
lds
jae
test
test
mov
test
mov
cmp
pop
adc
out
xchg
daa
sbb
push
push
test
(bad)
fmul
hlt
retf
or
add
into
sub
jae
mov
mov
cmps
neg
mov
adc
sbb
push
hlt
xor
sbb
push
iret
jp
xchg
pop
inc
dec
das
arpl
xchg
stos
xchg
int
sbb
jmp
(bad)
cmp
nop
jge
fisubr
xor
fs
(bad)
jnp
ret
mov
mov
cmp
data16
sar
jno
movs
(bad)
sti
loop
or
icebp
(bad)
jno
xchg
pop
inc
(bad)
push
inc
mov
inc
ins
jae
pusha
mov
popa
(bad)
jae
jmp
cdq
in
(bad)
adc
and
mov
pusha
das
xchg
sub
and
jp
rcl
and
mov
mov
fld
adc
mov
mov
sub
psllw
and
cld
dec
in
rcl
push
(bad)
fadd
mov
sbb
or
dec
pushf
pop
inc
bound
xchg
mov
aad
retf
and
in
fnsave
add
push
popa
imul
je
jo
gs
bound
arpl
add
ins
imul
gs
jb
dec
gs
fs
repnz
lea
jg
pusha
pushf
lea
jne
movzx
btr
xadd
mov
neg
sub
jmp
add
inc
js
push
gs
dec
jne
inc
add
and
call
pushf
push
lea
jae
clc
push
call
mov
xchg
movsx
mov
setg
lea
jmp
movs
lea
ja
sbb
ja
and
in
into
lods
cli
out
sbb
bound
xchg
shr
add
ins
pop
inc
lahf
fidivr
mov
push
add
jmp
pushf
sar
push
mov
jmp
cmps
xchg
cmp
not
outs
pop
dec
jae
mov
mov
rcr
(bad)
out
sbb
retf
dec
scas
int3
leave
dec
cld
jmp
push
movs
call
jecxz
pop
inc
lea
jp
outs
outs
xchg
push
mov
repnz
lock
add
cmp
ds
dec
bound
dec
cmp
push
sbb
movs
sbb
push
push
inc
sub
cmc
fidivr
and
or
mov
jo
mov
sbb
jmp
retf
push
ror
hlt
pop
add
add
dec
jbe
mov
xchg
sub
ds
fidivr
adc
in
mov
nop
sub
je
mov
les
mov
jecxz
cld
fdivr
push
jge
scas
xchg
jg
scas
fstp
pop
cli
or
sti
and
or
arpl
bound
(bad)
mov
std
in
push
pxor
sub
popa
xchg
xchg
mov
adc
add
add
and
adc
jle
nop
jg
xchg
loop
les
lea
or
adc
adc
popa
inc
mov
push
imul
pop
cs
fmul
in
out
loopne
fidivr
test
das
or
adc
sub
mov
je
je
cs
div
sub
jno
cmp
bound
(bad)
ja
aam
dec
dec
movs
stos
xchg
cmp
in
fxch
jecxz
ffree
lds
retf
stos
inc
and
sub
add
dec
fistp
and
push
inc
aaa
dec
cmp
imul
bound
fs
add
inc
gs
jne
ins
push
popa
je
dec
popa
ins
gs
add
out
push
and
or
fmul
dec
outs
popa
fs
arpl
inc
add
add
imul
arpl
outs
add
or
cmp
and
jae
mov
out
cmp
pop
inc
inc
xor
bound
sub
pop
cmp
mov
mov
pop
push
jp
lea
mov
js
scas
jnp
ffreep
aad
jmp
sub
jmp
test
ds
cmp
sar
pop
mov
int3
or
xor
inc
jns
test
push
shl
mov
in
shr
add
push
or
add
sbb
mov
push
pop
test
into
mov
and
mov
fcmovnbe
mov
cmp
imul
xchg
mov
ret
int
movs
and
add
hlt
hlt
sub
or
inc
mov
icebp
enter
enter
(bad)
jge
sub
stos
cwde
test
and
sub
imul
in
lods
and
cmp
and
(bad)
enter
enter
adc
sub
test
mov
mov
mov
ds
loope
mov
mov
push
inc
jo
xor
jne
scas
ret
rol
mov
mov
xchg
mov
fcmove
pop
fcmovnb
adc
mov
mov
add
adc
movs
call
add
mov
repnz
sbb
xor
gs
lahf
mov
jae
jl
jne
lods
xchg
adc
push
je
pop
jecxz
mov
jmp
mov
mov
out
or
mov
mov
xchg
xchg
mov
push
in
popa
inc
in
(bad)
mov
aad
sub
pop
dec
jp
retf
mov
add
mov
inc
lea
ror
pop
mov
out
iret
xor
push
inc
jp
fwait
adc
sub
mov
(bad)
rcr
ret
retf
sub
jno
stos
(bad)
mov
and
dec
inc
test
imul
push
dec
cdq
pop
dec
cmp
cdq
(bad)
pop
dec
cmp
jmp
pop
xchg
cmp
cld
loopne
icebp
add
add
push
mov
mov
mov
dec
pop
aas
inc
cmp
stc
dec
test
inc
imul
popa
xchg
jne
mov
loope
lock
pop
mov
sar
pop
or
lods
sub
jl
das
pop
ffreep
jmp
and
outs
pop
fist
pop
pop
addr16
test
popf
xlat
ret
sbb
add
neg
movs
xchg
fst
in
pop
add
cs
les
jp
push
mov
mov
mov
(bad)
loope
or
adc
add
mov
cmp
sbb
fmul
loope
lods
ins
pusha
push
mov
imul
xor
ja
lea
loop
leave
inc
and
push
push
mov
je
dec
in
adc
(bad)
jmp
dec
and
mov
pop
or
adc
pop
dec
cmp
pop
jne
fnsave
out
dec
jno
mov
push
dec
test
xchg
and
loope
aas
sbb
scas
mov
mov
pop
or
sub
push
dec
pop
inc
xor
lods
xor
fwait
stos
cwde
call
ffree
stc
out
sub
clc
pop
add
xor
pop
dec
jge
mov
es
jle
ret
mov
cmp
dec
repnz
sbb
ins
dec
jo
jge
in
jg
mov
mov
retf
mov
ffree
ror
mov
mul
and
jns
aaa
sbb
xor
in
adc
cmps
xchg
pushf
shr
dec
repz
jmp
xor
inc
xor
sahf
xchg
jne
mov
mov
dec
xor
pop
in
popa
dec
xchg
div
pop
dec
xor
add
retf
and
mov
dec
ss
adc
and
jecxz
bnd
mov
mov
adc
sbb
je
mov
push
sbb
adc
adc
cmp
mov
loop
add
xor
mov
cdq
clc
loop
pop
addr16
movs
popf
mul
adc
adc
xor
mov
and
jb
inc
xchg
pop
inc
bound
push
jle
mov
fwait
(bad)
mov
jmp
pop
sub
data16
je
imul
dec
jb
inc
js
add
dec
jae
push
add
ja
jbe
dec
jne
dec
jo
outs
add
cmp
inc
sub
je
jp
lahf
test
scas
cmp
lea
imul
sbb
ret
stc
addr16
hlt
fbstp
and
sub
jno
cmps
xchg
mul
xor
addr16
call
cmp
pop
jo
push
push
mov
out
shl
cdq
sub
cld
or
inc
push
into
mov
fisttp
mov
loopne
xor
data16
mov
jo
and
pop
movs
call
sub
cmp
imul
dec
pusha
mov
mov
add
inc
push
jo
jb
add
add
outs
bound
inc
jb
add
add
jbe
dec
jne
inc
ins
outs
jae
add
sti
or
bsf
bswap
cmc
lea
add
shrd
sub
mov
xor
mov
pushf
cmc
repnz
jmp
sbb
xor
mov
test
and
bt
call
btc
movsx
mov
lea
mov
sub
xchg
not
rcr
mov
movzx
shld
mov
shl
bts
rol
clc
mov
pushf
jmp
mov
mov
mov
call
add
dec
popa
jo
imul
ins
add
xor
cs
ins
add
daa
adc
add
mov
add
push
gs
popa
ins
jne
add
xchg
(bad)
jmp
fistp
and
out
les
push
or
lea
jge
je
call
bt
pusha
add
bt
movzx
sub
bt
add
sub
mov
push
clc
add
bt
mov
call
stos
push
call
add
pusha
pusha
call
mov
jmp
add
ins
imul
ins
push
gs
popa
jb
add
add
addr16
gs
gs
push
popa
ins
jne
inc
add
jnp
(bad)
call
mov
aad
sub
inc
xor
ss
push
cmp
cs
cdq
xchg
jo
jbe
xchg
int3
mov
in
pop
(bad)
(bad)
fadd
mov
in
cld
dec
cmps
xchg
lods
adc
das
push
xchg
scas
jmp
ds
cmps
std
pusha
lea
jo
leave
mov
ret
loopne
xchg
pusha
jmp
test
pop
inc
movs
aas
or
mov
sbb
xchg
mov
sar
mov
push
std
lods
push
mov
mov
adc
ds
repnz
and
cdq
push
icebp
or
xor
scas
(bad)
jbe
ss
pop
cmp
arpl
(bad)
ins
fistp
sub
dec
mov
jnp
xchg
and
inc
jmp
cmp
pop
dec
xor
cmp
xor
ins
ret
mov
xor
outs
pop
jb
dec
sub
add
jmp
dec
mov
int3
and
mov
inc
callw
xchg
lock
jge
lahf
jecxz
push
inc
xchg
daa
lahf
pop
inc
mov
js
xor
mov
cmpps
adc
pop
nop
lahf
int3
sub
enter
mov
push
(bad)
jle
imul
lods
cld
dec
mov
out
in
xchg
enter
sar
sub
retf
xlat
lds
and
push
inc
imul
jbe
pop
sub
ffreep
pop
lock
inc
imul
shl
bound
sub
and
xchg
in
fimul
xchg
mov
dec
xchg
inc
stos
mov
(bad)
add
xor
xor
test
loopne
rep
push
mov
mov
imul
add
(bad)
arpl
cmp
test
rol
add
out
lahf
mov
or
push
push
call
retf
lds
xchg
(bad)
push
mov
lock
mov
mov
pop
inc
call
add
(bad)
push
push
xchg
push
jns
mov
mov
mov
xor
jge
jg
icebp
adc
ret
aam
iret
mov
jo
xor
das
gs
pop
dec
movs
mov
push
hlt
cdq
cdq
xor
dec
bound
jnp
mov
pop
ds
xchg
icebp
in
sti
push
and
pop
jl
adc
pop
icebp
ret
sub
jbe
imul
add
sub
mov
push
test
mov
in
jmp
or
push
imul
jb
test
push
dec
cmp
ja
ret
mov
retf
test
pop
cmc
hlt
aam
call
lds
retf
test
fnsave
lods
clc
cmc
or
mov
adc
movs
cwde
jl
xchg
xchg
stc
fist
xchg
mov
js
jo
in
push
hlt
ja
retf
push
(bad)
xchg
and
add
and
aaa
cmp
jb
cdq
mov
xchg
xchg
add
fnstsw
aas
sbb
xor
dec
test
and
inc
outs
push
movs
xchg
fadd
repnz
jmp
ja
cwde
mov
fidiv
sub
jge
mov
ret
mov
enter
jo
dec
dec
push
ds
cmp
ins
cs
iret
xor
icebp
pop
jno
imul
test
leave
retf
scas
hlt
jmp
cld
loop
fnstsw
icebp
jbe
cmps
xchg
cli
loop
xor
inc
sub
add
sbb
and
dec
xor
call
(bad)
cmc
loope
cld
daa
adc
js
pop
cmp
sahf
mov
imul
push
hlt
and
test
mov
out
and
cmp
std
jmp
jnp
cwde
ds
stos
fdiv
loope
mulps
(bad)
push
sbb
mov
xchg
sbb
xchg
sub
mov
lahf
test
repz
pop
mov
add
or
sbb
add
jmp
push
inc
cs
xor
pop
lods
cwde
(bad)
sbb
lods
fnstcw
lahf
mov
and
ss
test
push
xchg
jnp
xchg
lods
and
sub
je
push
lods
sbb
cmp
bound
lea
stos
mov
iret
mov
sub
adc
lods
sar
dec
dec
xor
inc
add
add
or
sub
inc
pop
ds
xor
dec
cmp
movs
xchg
test
imul
cmp
bound
lea
jle
fs
out
cld
add
sub
or
or
sub
dec
ss
outs
push
xchg
pushf
mov
in
imul
retf
push
sti
add
pop
add
std
rcl
outs
dec
inc
xor
xchg
jnp
lea
ins
push
inc
movs
nop
repz
jmp
(bad)
loopne
inc
cmp
sbb
cmp
icebp
loope
lock
cmp
ss
aam
add
adc
test
aaa
div
or
mov
push
pop
jle
mov
mov
cmp
test
push
add
cmp
inc
push
pop
retf
cmp
shl
push
cmc
sbb
data16
and
cmc
sub
push
pop
rcr
inc
dec
xor
sub
ins
and
retf
mov
enter
movntq
sbb
(bad)
mov
mov
cld
pmaddwd
ffree
stos
fldenv
fstp
into
clc
push
sub
dec
xor
mov
icebp
in
push
pop
dec
dec
cs
inc
jl
mov
sar
cmc
(bad)
pop
aas
add
ja
add
pop
mov
push
dec
pop
inc
dec
cmp
xor
or
push
hlt
jmp
add
lods
mov
pop
adc
dec
xchg
hlt
call
(bad)
push
inc
xchg
retf
(bad)
outs
popf
and
xchg
lock
cmp
shl
push
sti
push
cmp
les
xchg
sub
mov
call
mov
pop
movs
fwait
(bad)
mov
mov
ins
push
push
dec
push
dec
aaa
mov
xchg
retf
jo
and
xor
imul
adc
ins
nop
add
sbb
stc
adc
and
xor
or
or
add
ror
pushf
movzx
mov
mov
mov
lea
push
mov
pusha
pushf
mov
push
ret
add
push
gs
popa
jo
outs
fs
push
pop
jmp
jmp
movs
xor
push
aas
pop
inc
cwde
sbb
jmp
out
and
inc
inc
xor
push
call
adc
dec
cs
cmp
lods
(bad)
femms
or
(bad)
jne
mov
mov
ror
cmp
aaa
movs
fadd
stc
loopne
sbb
call
pop
mov
jo
cdq
rol
out
ret
ror
mov
add
cdq
jmp
imul
sbb
paddb
mov
fild
lock
push
ds
inc
dec
cmp
push
mov
ret
mov
mov
add
gs
je
push
gs
popa
jo
outs
jb
inc
add
fs
je
pusha
push
push
mov
lea
jmp
mov
lea
jae
push
pushf
pusha
pushf
lea
jne
call
scas
mov
lock
add
dec
mov
adc
push
cdq
(bad)
fist
std
or
sbb
pop
repz
pop
xchg
cmp
pop
jp
and
jmp
sbb
and
sub
mov
xlat
ror
or
mov
(bad)
mov
and
jmp
imul
dec
xor
mov
ins
and
sar
aad
cli
adc
lock
inc
call
fdiv
in
adc
pop
dec
ins
push
cmp
pop
push
add
push
xchg
popa
lods
outs
push
inc
jno
cmp
add
jb
mov
mov
mov
mov
inc
gs
jb
arpl
jae
gs
jo
std
push
sar
sbb
inc
popf
js
xchg
fcomi
aad
sar
push
std
xor
push
cmp
imul
stos
(bad)
aas
scas
sub
adc
jmp
test
pushf
add
daa
cld
je
data16
stos
shl
cmps
jns
xor
scas
lea
fsubr
sub
add
push
ins
in
cmc
push
nop
and
popf
cwde
retf
mov
ret
sub
data16
sbb
and
pushf
leave
add
xchg
shr
push
inc
xchg
add
xor
xor
cwde
jne
icebp
fist
dec
das
inc
cwde
sbb
sbb
in
in
inc
cmp
xchg
push
xor
je
lods
mov
retf
repnz
cmp
or
and
or
push
dec
mov
cmp
fs
jno
rcl
cmps
mov
mov
ror
sahf
or
push
jne
scas
gs
mov
push
call
jp
shr
and
pop
cmc
add
aaa
(bad)
mov
pop
daa
int
sbb
xchg
cld
mov
(bad)
lds
ds
xchg
js
(bad)
pop
(bad)
pop
or
jnp
pop
jmp
int
xchg
dec
int
int
xchg
xchg
fstp
or
jecxz
popa
leave
scas
int
repnz
mov
call
ret
mov
nop
icebp
mov
test
sub
in
sar
sub
inc
mov
pop
out
scas
test
inc
jns
mov
push
mov
dec
jge
pop
icebp
mov
es
add
push
pop
sahf
inc
loope
aaa
bound
sbb
cmps
movs
push
jmp
lahf
mov
fnstsw
std
lahf
cmps
mov
mov
sbb
lock
jo
mov
mov
loope
mov
xchg
dec
in
(bad)
xchg
mov
movs
pop
out
leave
xor
cmps
mov
push
das
test
clc
adc
cli
pop
enter
outs
imul
cs
mov
jge
mul
aas
cmp
loope
jle
dec
mov
jns
fisubr
(bad)
sti
icebp
cmc
push
cs
ret
ret
lods
idiv
sub
aam
rcl
nop
xor
sbb
push
pop
inc
mov
xlat
add
maskmovq
test
xor
in
cmp
dec
cmp
mov
mov
dec
ss
cmp
outs
pop
xchg
adc
mul
pop
add
adc
or
icebp
das
lock
or
in
mov
jecxz
dec
xor
sub
outs
pushf
and
adc
sbb
movs
cwde
xor
mov
movzx
mov
stc
xor
cmp
repnz
jmp
pusha
call
add
add
lock
adc
adc
sbb
adc
xchg
cmps
sbb
add
add
add
addr16
add
inc
and
shl
pusha
pushf
jmp
stos
push
pushf
pushf
pushf
lea
jmp
pop
lock
or
sub
mov
and
pop
xchg
jle
and
in
cld
or
aaa
sub
test
outs
test
push
fld
push
sbb
add
sbb
(bad)
mov
mov
test
pop
outs
fistp
and
out
fld
ins
nop
sub
(bad)
jmp
popa
dec
jb
mov
push
sbb
stos
shr
adc
and
mov
cmp
stos
add
js
mov
fcom
leave
pmaxub
pop
push
or
sbb
mov
enter
adc
in
popa
pop
push
(bad)
faddp
fdivr
in
xlat
das
adc
dec
xor
xchg
sub
jl
jne
mov
out
add
jge
mov
pop
adc
push
xor
mov
xchg
scas
call
cmps
and
cld
mov
cmps
and
(bad)
mov
popf
jp
mov
cmps
xchg
xor
sar
sub
mov
shl
mov
add
jecxz
adc
sbb
xchg
test
scas
xchg
ret
push
jne
addr16
call
push
add
fistp
jno
jecxz
jmp
(bad)
in
es
ret
xor
mov
enter
mov
gs
outs
jbe
jb
outs
ins
outs
je
je
imul
je
add
lea
call
pushf
call
pushf
lea
ja
pushf
push
mov
pusha
lea
jb
clc
bt
cmp
push
call
ins
js
cmps
cwde
repnz
pusha
push
cdq
(bad)
sub
inc
cdq
mov
mov
popf
jns
jnp
movs
fadd
std
in
jmp
add
add
ds
call
aas
daa
ja
lahf
mov
lods
or
lea
(bad)
imul
loopne
dec
sbb
xchg
enter
mov
jmp
lock
popa
ret
js
cld
adc
enter
jae
add
sub
outs
je
mov
rol
fcomi
fisttp
das
push
dec
cmp
cmp
mov
(bad)
xor
pop
mov
outs
xchg
adc
xchg
mov
retf
movs
call
(bad)
push
pop
push
pushf
mov
push
ret
add
dec
jae
imul
popa
bound
add
add
inc
gs
popa
ins
jne
add
in
aad
sti
pop
or
mov
mov
ins
xchg
jp
je
jbe
cwde
out
shl
sub
pushf
mov
and
les
cdq
mov
jbe
retf
dec
cmp
or
sub
cli
dec
das
pop
ds
inc
inc
cmp
sub
and
fnstsw
inc
call
adc
scas
sub
call
lahf
int
rol
xchg
push
sub
jmp
imul
or
and
push
jle
mov
imul
or
adc
sbb
push
inc
addr16
jne
lahf
mov
cdq
mov
(bad)
stos
sahf
mov
cmc
call
adc
push
pushf
pusha
lea
jae
jmp
add
inc
gs
imul
arpl
jno
add
add
dec
jae
popa
fs
jb
je
push
je
add
xor
inc
push
inc
inc
cmc
call
mov
call
sub
lea
jbe
pusha
push
pushf
lea
call
pushf
lea
jae
bt
xor
pusha
lea
call
push
pushf
push
call
add
inc
gs
arpl
gs
imul
and
pusha
cmp
pusha
call
add
inc
push
outs
jne
je
ins
add
add
inc
ins
ins
outs
arpl
call
push
pusha
lea
jne
cwde
mov
push
mov
pushf
mov
lea
jmp
add
dec
outs
popa
fs
ins
popa
addr16
add
add
jne
fs
arpl
inc
pushf
lea
jmp
pusha
mov
pusha
mov
pushf
lea
jmp
add
push
gs
imul
jae
mov
cmc
test
push
push
pushf
lea
jmp
add
inc
imul
add
test
xor
shld
mov
sub
cmp
mov
jmp
add
push
gs
imul
gs
add
push
gs
popa
jo
jne
add
fld
fnstcw
mov
pushf
cmps
nop
ds
enter
sub
sbb
fs
jb
test
cwde
out
xlat
retf
mov
and
add
std
retf
(bad)
(bad)
sahf
mov
jmp
shl
mov
adc
push
dec
xor
lods
push
inc
pop
inc
ss
sar
call
pop
les
jge
in
xchg
lods
add
ins
mov
outs
pushf
and
dec
fs
mov
(bad)
sub
push
inc
push
xchg
jmp
or
neg
sub
inc
mov
loopne
and
rol
addr16
pop
dec
pop
adc
cwde
lea
shr
(bad)
push
das
pop
sbb
je
dec
retf
jo
gs
add
and
aas
ins
fnstsw
ret
icebp
call
mov
icebp
cld
sub
xchg
(bad)
xchg
xor
jmp
ret
jns
bts
mov
adc
inc
call
addr16
mov
vpinsrw
int3
add
push
fidiv
dec
ss
cmp
cmp
jb
cwde
test
jg
lods
xchg
popf
mov
cmps
inc
push
jmp
or
test
sti
and
xor
sub
cmp
sub
retf
pop
inc
je
mov
scas
jmp
pop
rcr
pop
movs
dec
je
mov
(bad)
out
fcos
out
fisttp
mov
in
ja
shl
fcomp
ffreep
aad
inc
into
ins
push
jb
cwde
mov
mov
out
and
stos
nop
nop
test
xchg
mov
int
std
xor
add
inc
gs
jb
jbe
je
push
jb
imul
imul
clc
and
shld
add
btc
shr
push
mov
stc
pusha
add
jmp
bt
test
test
pusha
lea
je
jmp
pushf
lea
je
push
mov
not
mov
mov
pop
push
jmp
lea
mov
pushf
xchg
pushf
mov
pop
lea
push
lea
pusha
pushf
mov
mov
mov
push
push
pop
pushf
push
push
mov
push
ret
cld
inc
xor
sub
mov
xchg
push
mov
cmps
fmulp
shl
loopne
or
or
sti
sub
ins
cs
pop
sbb
and
jne
jnp
push
arpl
lods
cwde
fcmovb
loopne
retf
mov
jle
xor
das
sbb
dec
das
adc
add
out
sbb
idiv
xchg
int
mov
mov
mov
in
cmp
into
mov
push
jmp
popf
shr
popf
cs
inc
cs
mov
es
pop
mov
cdq
out
into
mov
mov
sbb
stos
pop
mov
jno
mov
test
outs
push
xchg
jg
mov
ret
adc
mov
rcr
cwde
jle
je
div
je
idiv
lock
add
je
popa
jbe
inc
imul
add
add
je
jb
gs
jo
outs
inc
add
add
fs
push
dec
jne
je
inc
jns
add
mov
shr
clc
dec
mov
mov
jno
or
fwait
jnp
adc
sub
imul
(bad)
pop
outs
cs
pop
lea
xor
xchg
mov
xchg
sbb
and
enter
imul
cld
icebp
fild
(bad)
les
or
adc
or
shl
out
cvttps2pi
xor
pop
mov
aam
cmp
mov
jmp
out
sbb
shl
push
jo
or
sub
test
mov
aam
lock
inc
sbb
cli
loopne
sbb
scas
xchg
scas
cwde
mov
fadd
hlt
loope
push
ffree
retf
jo
xor
imul
dec
pop
(bad)
mov
cdq
cmp
jae
mov
out
mov
rcr
dec
push
adc
pushf
lea
jmp
daa
enter
and
push
inc
xchg
cwde
mov
xor
js
mov
cmc
xor
pop
mov
loopne
or
push
out
cmp
push
(bad)
cmps
mov
rol
retf
mov
cmps
mov
cmp
fdivr
pusha
push
mov
das
mov
jp
les
dec
xchg
int
jle
mov
retf
mov
js
cs
pop
or
mov
repz
int
push
or
test
fnsave
sub
xor
test
es
(bad)
lds
fs
repnz
in
xor
adc
fadd
cli
out
out
aas
enter
jl
shr
or
shl
in
add
dec
sbb
inc
icebp
call
push
icebp
and
addr16
mov
xlat
(bad)
adc
or
or
dec
xchg
test
lahf
mov
popf
mov
jbe
mov
ret
(bad)
ror
fimul
push
inc
call
pushf
pushf
lea
ja
inc
inc
pusha
inc
add
pusha
pushf
xchg
sub
aam
bswap
mov
btc
mov
cmc
mov
pusha
cmc
mov
shld
mov
jmp
scas
scas
mov
cmp
dec
sub
in
int
xlat
adc
sbb
loopne
cs
xor
pop
stc
fidivr
out
fldcw
enter
scas
mov
jge
mov
sub
(bad)
fdivr
out
cmp
cwde
xchg
dec
xor
dec
cmp
jnp
movs
xchg
cwde
sub
adc
cwde
xchg
fucomip
add
add
cmp
and
and
pop
add
pop
add
std
and
ret
and
in
push
add
repz
xchg
sub
cmp
xchg
pop
push
dec
jg
mov
push
ins
mov
and
call
hlt
test
jp
stos
jne
adc
adc
sbb
mov
adc
xor
loopne
sbb
mov
adc
inc
cs
pop
cmp
push
bound
outs
xor
and
loop
sbb
mov
out
in
ror
std
jmp
clc
adc
psadbw
or
adc
cmc
cmp
inc
das
sbb
mov
jo
ds
dec
xor
cs
push
inc
xor
shl
inc
aaa
jg
mov
cld
loop
pop
das
mov
aam
lahf
movs
xchg
add
push
imul
outs
outs
ja
gs
popa
addr16
add
add
outs
bound
push
imul
gs
outs
jb
inc
inc
add
add
jo
imul
bt
test
push
mov
push
mov
lea
je
bt
add
jmp
imul
push
push
mov
lea
jmp
call
push
push
inc
push
xor
cs
ins
add
add
jo
inc
imul
and
inc
mov
pusha
inc
pushf
pushf
lea
jmp
push
jmp
call
xor
loope
loopne
clc
loope
repz
sbb
dec
sub
addr16
scas
fstp
and
inc
pop
ret
ins
mov
mov
stos
aad
out
xlat
enter
(bad)
(bad)
mov
mov
dec
out
xlat
sub
add
in
movs
dec
and
test
jg
test
mov
jmp
test
sbb
in
jne
mov
xchg
stos
imul
cmp
cmp
cmp
cmp
sbb
dec
push
inc
push
dec
dec
cmp
pop
inc
nop
jb
cwde
retf
jo
lahf
std
call
ins
cs
ret
imul
jl
push
or
inc
xor
mov
aam
popf
sbb
push
enter
ffreep
fmul
icebp
xchg
and
xchg
jp
mov
push
push
enter
inc
xor
pop
test
mov
jl
mov
mov
loop
bound
dec
sahf
fild
jno
out
adc
into
es
sub
pop
inc
xchg
pop
mov
mov
and
push
ds
dec
dec
xor
fmul
mov
inc
ja
pusha
setno
rcr
sub
cmc
bswap
sub
btc
sub
add
movsx
or
ror
mov
not
rcl
neg
mov
pusha
repnz
pusha
call
test
clc
test
mov
pushf
lea
je
pushf
call
inc
inc
dec
xor
cs
ins
add
add
je
imul
dec
jb
inc
js
lea
mov
setbe
xchg
mov
lea
jle
movsx
movsx
pop
call
add
push
gs
outs
fs
inc
imul
je
xchg
or
and
outs
push
mov
(bad)
or
in
or
daa
je
mov
out
fsubr
mov
inc
rcr
aam
jbe
push
xor
les
jp
lock
pop
adc
adc
lds
cmps
sbb
out
pop
add
dec
push
adc
comiss
stc
loop
(bad)
mov
mov
pop
or
movs
loopne
aad
or
mov
(bad)
mov
sub
dec
das
jno
cwde
mov
nop
lods
cdq
les
dec
pop
inc
out
repz
jecxz
cmc
push
mov
(bad)
cli
pop
cld
jge
js
mov
mov
data16
call
repnz
in
lods
fcmovu
adc
les
rol
gs
jmp
pushf
rcr
mov
push
(bad)
mov
mov
fst
or
(bad)
jno
aam
iret
mov
xchg
(bad)
repnz
shl
mov
or
jecxz
scas
(bad)
rcl
aad
lds
sub
(bad)
movs
cmps
mov
ret
or
sar
mov
out
icebp
in
ins
cmc
icebp
stc
fmulp
pop
add
movs
mov
hlt
jae
mov
mov
add
mov
xchg
and
push
(bad)
das
out
out
xor
sbb
in
fistp
aaa
xchg
xadd
xchg
xchg
pop
test
push
or
hlt
xchg
lahf
xchg
fsub
fisttp
mov
stos
je
mov
nop
mov
push
push
cld
push
lahf
adc
jmp
mov
lock
call
lods
adc
xchg
imul
js
xchg
sub
xchg
nop
push
ins
push
and
ins
push
mov
mov
enter
ins
stos
movs
mov
stc
mov
test
aam
test
sbb
xchg
pusha
lahf
cdq
pop
mov
movs
loop
jb
aaa
xchg
ret
push
movs
push
sbb
xchg
and
fadd
cld
pop
lahf
clc
cmps
les
xchg
jl
ja
xchg
mov
mov
or
bound
mov
pop
and
shl
xchg
lahf
ror
int3
fild
fsubr
pop
pushf
xchg
adc
ins
pop
sbb
nop
pop
ror
mov
adc
xchg
sahf
push
xchg
(bad)
jmp
(bad)
xchg
mov
call
mov
xchg
mov
sub
pusha
mov
ja
mov
fdiv
enter
repnz
add
loopne
or
cli
add
mov
xchg
lods
xchg
fdiv
fsub
fsub
aas
fdiv
push
pop
xchg
lahf
inc
xchg
pop
mov
pop
or
mov
or
xchg
cmp
lods
push
aad
mov
test
adc
xchg
sbb
mov
mov
pop
cdq
adc
test
jae
cmps
sub
rcr
icebp
pop
jmp
repnz
dec
mov
enter
xchg
in
cmp
ror
mov
lock
les
xchg
sbb
ror
adc
xchg
fcom
xchg
fcomp
and
xor
ja
daa
xchg
mov
ror
mov
push
test
call
fcomp
mov
push
sbb
mov
hlt
xchg
xsave
rcr
sub
idiv
cmp
test
and
sbb
xchg
xchg
mov
pusha
add
mov
mov
mov
or
loopne
ja
das
cmp
or
xor
dec
mov
adc
test
stc
or
mov
lock
sbb
lock
sbb
push
pop
fild
mov
adc
jns
test
jl
sub
lock
test
test
aam
push
xchg
mov
loopne
aam
and
daa
sbb
xchg
adc
in
ja
mov
aad
nop
je
test
loopne
or
ret
dec
stos
inc
pushf
dec
mov
nop
jnp
(bad)
jns
xchg
pushf
dec
stos
push
dec
stos
push
dec
mov
arpl
or
(bad)
dec
add
inc
js
cmp
add
sar
jg
sub
lock
ror
aaa
adc
mov
push
ja
pushf
popa
xchg
cdq
mov
loopne
inc
adc
out
inc
pop
shr
inc
sbb
mov
mov
in
xchg
jno
in
cmps
rcr
fsubp
jo
inc
nop
xchg
frstor
fsubr
push
fisttp
int3
out
call
fcom
xor
mov
dec
sbb
xchg
loopne
mov
mov
popa
or
call
or
or
and
loopne
xchg
pop
call
aad
loopne
xchg
fucomp
push
fadd
stos
jmp
and
loopne
mov
(bad)
mov
pop
xor
push
in
lods
loopne
pop
xchg
mov
dec
push
mov
push
ds
test
call
loope
bound
adc
add
jmp
in
xchg
cmp
sbb
xchg
xchg
(bad)
adc
call
sub
xchg
movs
inc
in
mov
mov
and
mov
sbb
dec
popa
jbe
out
add
xchg
cdq
test
int
loopne
mov
call
mov
or
call
das
call
sub
xor
cs
mov
call
sbb
xor
xchg
push
mov
add
stc
fnstenv
pop
rcl
cdq
ins
and
sub
sbb
pushf
cdq
adc
mov
loope
mov
add
mov
and
mov
cld
ret
add
cld
ret
ror
add
or
push
mov
fdivr
popf
push
mov
(bad)
and
sub
sbb
and
mov
je
xchg
add
xchg
cmp
popf
xchg
pop
fbstp
sahf
mov
enter
ja
out
mov
sub
xchg
fisub
(bad)
test
mov
sub
data16
fwait
stos
xor
and
xchg
int3
mov
imul
pop
xchg
test
xchg
and
dec
ficom
test
(bad)
enter
aad
xor
pusha
popf
xchg
add
and
and
push
aad
out
xor
mov
dec
mov
sub
lock
outs
cdq
lock
and
(bad)
je
cmp
xchg
(bad)
cmps
pushf
icebp
mov
mov
leave
ja
pusha
hlt
mov
add
(bad)
test
mov
mov
cmp
call
call
inc
aam
stc
js
js
aas
test
xchg
mov
ficom
rol
pop
mov
xor
add
adc
jecxz
(bad)
lahf
add
lahf
mov
mov
jae
cmps
rcl
xor
add
adc
ror
and
mov
test
sti
push
mov
out
shl
imul
push
mov
mov
push
add
push
repnz
enter
div
pop
sbb
call
fsub
rcr
xchg
mov
jo
in
sahf
pusha
add
or
mov
mov
mov
out
pop
sahf
(bad)
(bad)
ficomp
scas
clc
scas
repz
lds
hlt
add
out
(bad)
and
repnz
fcmovnbe
fst
neg
mov
pusha
stos
into
cld
push
call
add
pusha
pop
add
and
pop
sbb
xor
mov
xchg
mov
mov
pop
not
fmul
mov
sbb
fisttp
jge
test
pop
scas
sbb
(bad)
mov
out
mov
mov
(bad)
lahf
pushf
mov
xchg
jb
add
xchg
test
xchg
mov
lock
xchg
mov
mov
add
mov
callw
movs
fild
call
push
add
je
mov
scas
xchg
pushf
int3
or
std
mov
loopne
pop
js
pusha
iret
xchg
(bad)
repnz
mov
cmp
sbb
xchg
xchg
ins
int
(bad)
mov
add
pusha
xchg
je
cmps
fld
rcl
outs
nop
dec
fnstenv
mov
dec
bsf
and
ss
xor
mov
xchg
push
int
lock
mov
xchg
jo
pusha
mov
mov
hlt
movs
or
add
jp
mov
mov
xlat
xchg
(bad)
mov
test
xchg
test
mov
call
fcom
mov
jmp
ficom
push
xchg
xchg
cli
lock
sbb
xor
ins
pop
ins
mov
mov
mov
xchg
call
sub
test
out
jae
lea
mov
and
(bad)
adc
adc
jl
adc
lods
pop
call
imul
adc
sbb
int
push
rol
dec
mov
or
mov
and
test
icebp
mov
mov
pop
out
xlat
mov
(bad)
ins
adc
adc
js
add
pop
xchg
cld
or
adc
rcr
test
xchg
adc
(bad)
fisubr
mov
mov
(bad)
pop
cld
cld
arpl
push
jp
mov
aam
clc
call
cmps
call
adc
test
dec
sbb
xchg
ret
(bad)
pop
xchg
jge
in
mov
les
sbb
movs
inc
call
movs
push
cld
adc
stos
mov
sub
call
sub
xchg
aas
sbb
push
hlt
scas
mov
or
mov
mov
cmps
in
pusha
(bad)
popf
popf
pusha
fcomi
jle
repz
fucom
in
loopne
or
gs
mov
xchg
int3
call
fiadd
std
push
lds
sub
js
adc
fsubr
mov
sub
in
test
fcmovu
int3
xchg
dec
retf
xchg
hlt
mov
sub
int
sub
mov
hlt
leave
(bad)
test
iret
adc
sbb
pop
sbb
xor
js
pop
neg
fistp
xor
mov
xchg
jmp
nop
pop
mov
mov
leave
adc
lahf
(bad)
adc
pop
xchg
adc
fdiv
mov
mov
xor
ror
mov
repz
leave
pop
mov
aas
add
clc
mov
add
movs
or
xchg
sahf
sbb
mov
(bad)
shl
and
pusha
cld
fst
xchg
sub
sbb
mov
cli
mov
pop
inc
(bad)
lahf
scas
mov
and
pusha
stos
clc
inc
jmp
lds
jmp
xchg
ja
scas
loopne
out
xchg
adc
cmp
add
imul
shl
pop
inc
ja
cmps
(bad)
push
aad
xor
ins
mov
pop
shl
jle
xor
aas
mov
jmp
sbb
sti
in
mov
mov
push
add
mov
shr
das
adc
rol
sub
mov
cwde
inc
(bad)
pop
pop
fwait
iret
or
or
fwait
std
rcl
(bad)
mov
loop
and
(bad)
xchg
add
movs
add
lods
jb
ret
pop
lahf
mov
sti
mov
(bad)
and
xchg
xchg
dec
fisubr
cmp
sub
and
push
inc
xchg
inc
iret
mov
rcr
pop
xchg
pop
xor
mov
or
dec
xor
or
push
xchg
mov
mov
test
gs
sbb
fidivr
pop
cmp
push
mov
adc
int
cmps
jmp
jl
inc
mov
mov
(bad)
aad
mov
mov
push
cmc
std
rol
adc
fwait
out
(bad)
jg
cld
add
xchg
lds
idiv
xchg
mov
pusha
sbb
add
out
xor
mov
scas
cmp
int
shl
hlt
adc
sub
call
mov
pusha
and
mov
mov
je
mov
mov
dec
push
push
cmps
xchg
lds
mov
sub
outs
retf
add
out
mov
(bad)
cld
xchg
movs
nop
aam
icebp
adc
imul
clc
mov
and
xor
shl
xchg
jmp
aam
mov
pop
stos
pop
cld
call
or
(bad)
ja
mov
adc
add
inc
aad
fs
out
hlt
sbb
movs
add
js
fst
shl
(bad)
outs
add
fld
push
adc
cld
adc
adc
add
mov
adc
retfw
cli
mov
jbe
movs
xchg
fcmovnb
add
add
hlt
xor
push
fild
pop
and
loop
sbb
pop
(bad)
jle
jmp
xor
jl
jle
out
out
test
aad
mov
pushf
adc
xchg
sbb
mov
push
adc
cmp
mov
in
mov
repz
add
adc
sub
fidivr
mov
mov
pop
loopne
aam
add
xchg
mov
fisubr
pop
ja
stc
clc
xchg
jns
cwde
inc
sbb
not
jmp
pop
push
pop
hlt
mov
cmp
test
fwait
inc
cld
lock
mov
nop
les
sahf
add
in
cmp
jae
enter
sbb
dec
loopne
aaa
aam
mov
lea
iret
mov
ror
mov
int3
jmp
or
imul
mov
sbb
mov
push
mov
mov
test
cmp
mov
les
add
xchg
jecxz
out
sbb
xchg
fcmovu
mov
cld
push
fdiv
imul
mov
mov
hlt
nop
test
mov
(bad)
out
fcom
or
add
retf
jo
and
lods
iret
fild
mov
xchg
imul
adc
out
lahf
jmp
(bad)
(bad)
mov
outs
(bad)
sahf
fdiv
rol
add
mov
add
push
dec
and
cmps
imul
push
ss
pop
fmul
fidiv
fadd
cmc
add
es
mov
dec
rol
test
clc
int3
scas
icebp
add
cmp
(bad)
scas
mov
das
int
int3
loopne
mov
fstp
(bad)
aaa
mov
dec
push
sbb
xchg
mov
mov
xlat
cmp
and
les
add
add
or
ror
mov
iret
sbb
(bad)
sar
fsubr
fcomp
push
push
out
and
xchg
push
pusha
popf
dec
cmc
jb
nop
mov
icebp
sbb
bound
lods
enter
mov
xchg
retf
or
int3
mov
in
sub
lods
add
add
xor
hlt
and
jb
add
push
push
jbe
jmp
mov
dec
cld
mov
mov
mov
add
lock
xchg
push
push
out
adc
ss
fsubr
ja
pop
mov
int
mov
pushf
push
test
mov
push
xchg
adc
jmp
out
and
cmp
rol
cmp
je
lds
add
fadd
nop
mov
nop
xchg
inc
lds
pushf
mov
cmps
ja
(bad)
mov
xchg
inc
lds
and
sub
xchg
mov
xor
xor
dec
mov
fst
dec
sbb
add
fcom
(bad)
out
test
xchg
mov
inc
fadd
mov
sbb
push
add
xor
(bad)
jbe
xor
pop
call
pop
(bad)
test
adc
xchg
mov
nop
loopne
add
xor
jo
nop
fbld
adc
add
(bad)
lock
inc
lds
call
and
push
icebp
call
mov
shl
bnd
mov
ret
push
call
das
in
(bad)
(bad)
outs
retf
sbb
jae
int3
enter
rol
cmps
mov
test
(bad)
cld
lock
push
jle
div
push
add
sbb
xor
mov
test
aam
out
cmp
sbb
mov
and
stos
push
xchg
fs
push
sbb
loop
fcomp
mov
mov
nop
clc
xor
les
movs
fsub
mov
(bad)
(bad)
ja
sbb
daa
sbb
lahf
into
lahf
loop
in
push
add
sbb
bound
sbb
bound
adc
mov
movs
fcom
xchg
sti
movs
xchg
mov
das
rcr
idiv
outs
aam
cwde
lahf
not
lea
pushf
jmp
pushf
mov
push
mov
pushf
mov
mov
mov
lea
jmp
call
cmp
cmp
pushf
or
pushf
jmp
mov
movsx
lea
jmp
jmp
add
dec
popa
jo
imul
imul
inc
jb
popa
je
dec
arpl
inc
jb
ins
push
gs
jne
arpl
pushf
mov
call
add
push
gs
popa
jae
inc
jb
outs
jb
mov
loop
ss
ss
mov
(bad)
jecxz
fnstcw
mov
cmc
jmp
ja
mov
cmps
push
add
pop
outs
jmp
jle
jl
das
pop
loop
fld
fnstsw
popa
jns
mov
mov
mov
pop
inc
xor
dec
lahf
mov
fidivr
and
lods
xchg
mov
cmps
xchg
out
hlt
or
cmp
arpl
xlat
out
rol
daa
or
pop
iret
repz
sub
mov
sti
mov
jmp
imul
jne
pushf
mov
pop
mov
cwde
push
not
lea
mov
mov
call
stc
or
pusha
mov
call
mov
mov
push
pusha
push
ret
pop
mov
pushf
not
mov
movzx
setl
lea
push
mov
jmp
test
clc
and
push
icebp
or
shl
cli
out
sub
jns
mov
test
out
loopne
and
sbb
or
sub
xchg
lods
pushf
cmp
mov
leave
(bad)
sub
test
bound
pop
jo
outs
xchg
xchg
dec
inc
xor
test
jo
xchg
or
and
dec
xor
stos
xchg
mov
fcmovb
cmc
iret
mov
or
mov
rcl
xor
jmp
mov
or
cmp
push
inc
xchg
pop
inc
mov
in
rol
dec
add
dec
imul
add
test
ficom
add
push
and
dec
dec
sub
mov
adc
and
inc
not
xor
ss
push
adc
cmc
std
sub
shl
fisttp
ret
sub
mov
(bad)
scas
xchg
xchg
add
add
repnz
inc
das
pop
inc
dec
adc
mov
or
xor
mov
mov
in
sar
faddp
add
inc
jb
jns
je
imul
push
imul
jb
add
jmp
mov
shr
add
shrd
add
lea
dec
test
mov
cmc
call
add
push
gs
arpl
ins
ins
push
outs
jae
jmp
add
inc
gs
imul
ins
push
nop
jl
xchg
jl
arpl
sbb
test
jns
outs
xor
(bad)
sti
in
sbb
cmc
loop
repnz
popa
dec
cmp
and
push
dec
xor
push
inc
xor
(bad)
jnp
test
ja
jp
lahf
sbb
inc
mov
aaa
fwait
lods
gs
dec
xor
test
ret
inc
cmps
pop
cmp
and
cmp
sbb
push
add
mov
and
test
into
enter
mov
or
jge
in
sub
sub
push
adc
popf
xchg
or
cmp
or
pop
(bad)
fcmove
sbb
adc
(bad)
vpsubd
cmp
fst
sti
sbb
adc
stc
push
inc
add
mov
add
push
inc
pop
mov
pop
leave
iret
mov
frstor
cwde
call
jmp
or
jge
test
inc
xor
loopne
jns
test
(bad)
jno
jb
xchg
xchg
mov
lahf
test
inc
xor
push
mov
lahf
and
out
cmp
pop
inc
bound
push
xchg
(bad)
sar
xor
je
xor
pop
jnp
mov
aam
out
sbb
mov
push
inc
(bad)
and
sbb
jmp
or
inc
cmp
push
hlt
repz
(bad)
push
mov
in
inc
clc
in
jle
inc
mov
ffree
repz
pop
outs
icebp
add
fdiv
jg
in
rcr
sbb
mov
jno
cmp
je
cmp
hlt
call
retf
ret
fst
add
and
mov
lahf
lea
mov
fxch
mov
ins
call
out
fadd
rol
ror
out
loope
push
out
cld
push
mov
out
xchg
push
push
pusha
pushf
stc
cmp
push
lea
movzx
lea
lea
not
call
aaa
xchg
jne
test
xor
pop
jae
ret
(bad)
jns
sub
mov
sub
jl
mov
sar
dec
aaa
mov
(bad)
std
adc
pop
mov
sahf
inc
push
xchg
repz
gs
shr
or
xchg
mov
ja
mov
inc
cmp
mov
and
pop
test
lods
and
mov
cmps
imul
sbb
xor
mov
iret
pop
inc
pop
aas
mov
or
and
mov
cmps
rcr
mov
xchg
jmp
sub
sbb
sbb
repz
adc
adc
pop
sub
and
test
xor
jo
test
ins
push
sub
sub
jnp
add
adc
adc
or
pop
aas
add
push
gs
jne
jae
jb
outs
jae
add
push
gs
imul
je
js
add
ins
jae
jb
ins
jo
add
mov
call
call
add
inc
imul
ror
fcmovne
ficomp
add
dec
xchg
jmp
std
sbb
or
add
adc
or
das
or
cli
sbb
sub
outs
nop
(bad)
fadd
aam
mov
pop
or
rol
adc
cld
out
add
adc
js
jb
xor
push
das
jb
dec
cmc
jmp
add
sbb
in
xchg
jne
mov
adc
retf
and
mov
mov
cmp
jbe
mov
sbb
jb
jno
ss
mov
loope
idiv
mov
mov
pop
sub
jg
aas
cmp
adc
sbb
(bad)
in
sti
in
ficomp
jns
and
mov
in
sbb
push
dec
pop
inc
jbe
mov
fmulp
sti
call
push
jae
cmp
js
test
out
shr
adc
xor
cmp
dec
jnp
(bad)
jb
lea
call
add
fs
(bad)
lods
xchg
test
pop
pop
inc
inc
xor
icebp
add
mov
aas
cld
fist
xchg
imul
mov
mov
shl
jp
jbe
pushf
scas
mov
and
xor
das
mov
or
rol
out
add
in
and
inc
inc
push
imul
mov
pmuludq
jecxz
dec
jne
dec
imul
hlt
stc
push
jno
dec
cmp
cs
out
iret
and
sbb
pop
clc
sbb
or
or
push
hlt
cmp
ja
and
xor
dec
cmp
mov
(bad)
mov
mov
mov
repnz
push
outs
push
mov
cmp
cli
in
sbb
arpl
ins
cmps
xchg
icebp
in
pop
sub
call
rcl
cmp
xor
inc
jne
ds
cmp
aas
inc
xor
ror
mov
jb
mov
vpandn
or
test
mov
test
xor
scas
aas
inc
cmp
mov
cmp
mov
push
dec
cmp
xchg
cmps
cmp
(bad)
outs
popf
mov
in
(bad)
leave
lds
adc
xor
repnz
(bad)
mov
jae
shld
mov
call
pop
pushf
jmp
and
enter
adc
sub
cmps
xchg
xlat
mov
into
mov
aad
sbb
stos
(bad)
mov
xlat
ror
into
mov
ret
shl
hlt
loope
retf
jo
dec
push
pop
inc
pop
inc
outs
ins
das
add
jae
cmp
xchg
jp
xchg
out
fcomp
dec
xor
push
inc
push
inc
sub
(bad)
retf
mov
mov
add
je
pushf
pusha
lea
jmp
add
dec
ins
gs
jne
add
add
inc
popa
fs
outs
fs
je
add
inc
and
pushf
adc
pushf
call
cmp
call
mov
jmp
lds
enter
add
daa
adc
inc
xor
bound
mov
xor
cmp
dec
xor
xor
int3
mov
(bad)
xchg
stos
push
scas
movs
xchg
jecxz
nop
stc
jecxz
mov
sub
fs
pusha
mov
es
mov
sub
test
repz
or
dec
sahf
mov
daa
push
dec
xor
inc
dec
jl
shr
daa
sbb
jmp
dec
inc
mov
mov
clc
cdq
ror
mov
cdq
leave
mov
mov
int3
jmp
inc
jno
pop
stos
dec
xor
jo
(bad)
sar
fisttp
xchg
xor
dec
outs
push
xchg
test
movs
xchg
xchg
lea
adc
arpl
jae
bound
add
inc
gs
ins
imul
bsr
xor
aaa
neg
call
shr
bt
cmp
jmp
add
inc
jb
popa
je
inc
dec
inc
imul
add
adc
je
xor
btc
add
lea
adc
mov
push
clc
add
stc
bt
mov
call
clc
add
pushf
lea
jmp
add
push
push
dec
outs
je
data16
arpl
inc
add
adc
add
add
ins
imul
ins
dec
jo
outs
add
push
inc
push
dec
xor
cs
ins
add
and
add
push
pusha
lea
jne
pushf
lea
jae
stos
pushf
push
lea
jmp
add
dec
outs
popa
fs
imul
add
inc
out
cmp
ret
mov
call
add
inc
gs
je
imul
inc
add
and
jb
lods
(bad)
sar
das
or
or
pop
inc
cs
fwait
mov
push
cld
pop
ins
add
fmul
or
ds
inc
addr16
inc
mov
call
pushf
xchg
fldl2t
(bad)
mov
hlt
sub
sbb
inc
xor
mov
mov
imul
mov
jmp
in
popa
xchg
nop
cmp
dec
xor
mov
mov
fs
jle
lods
scas
xchg
out
sar
dec
xor
jle
cmps
xchg
cmp
sbb
push
push
mov
icebp
fimul
out
jmp
add
push
xchg
cwde
mov
ret
xlat
adc
pusha
xchg
test
mov
xchg
jmp
movs
sbb
call
(bad)
scas
data16
adc
sub
cli
in
adc
xchg
or
shl
in
(bad)
add
ja
jbe
dec
jne
push
popa
jne
add
add
je
outs
fs
gs
imul
add
test
sub
mov
cwde
lahf
push
cwde
pusha
lea
pusha
jmp
add
push
gs
outs
jbe
push
jb
jo
add
and
inc
and
push
lea
jmp
add
inc
outs
arpl
outs
je
jb
jo
jb
imul
loopne
lea
jne
push
pusha
inc
jmp
cmc
test
pusha
pushf
or
push
lea
jne
inc
bt
not
rol
mov
cmc
bt
call
movzx
lea
mov
call
xchg
pusha
lea
jne
push
pusha
mov
call
pushf
call
push
call
popa
sub
xor
rcl
aad
lock
sub
mov
cmp
bound
lods
out
sar
push
(bad)
pop
push
inc
jl
pop
mov
cmp
js
popa
(bad)
adc
lahf
jnp
and
xchg
cmp
adc
jo
dec
loope
sub
push
inc
pop
aas
mov
push
inc
pop
inc
inc
cmp
and
mov
fistp
dec
or
add
pop
mov
cli
in
es
inc
push
dec
imul
in
add
pmaddwd
jo
ss
sub
das
or
sub
sub
call
dec
push
inc
addr16
jg
nop
jle
mov
clc
lds
sbb
lea
jne
lea
not
lahf
pusha
mov
push
lahf
bswap
jmp
add
inc
gs
jb
arpl
fs
jae
add
add
jae
popa
outs
addr16
jo
add
push
stos
pushf
pushf
lea
jmp
mov
pusha
mov
pusha
push
push
mov
mov
pushf
push
ret
add
inc
gs
gs
inc
jb
je
arpl
push
arpl
outs
add
add
jae
popa
addr16
outs
js
add
fs
call
cmc
pusha
stc
sub
lea
jg
jne
jmp
add
inc
jb
ja
gs
inc
add
pusha
ror
mov
sub
bts
lea
dec
btr
bts
sub
pushf
setp
not
btr
mov
or
lahf
push
shr
inc
push
movsx
dec
btr
push
rol
pusha
add
mov
cmc
test
pusha
push
mov
lea
je
dec
shrd
cmp
shrd
mov
bsr
add
sub
call
popf
dec
sub
jp
aaa
dec
bound
imul
js
mov
test
mov
loopne
cvttps2pi
add
mov
adc
shl
push
es
inc
mov
xchg
stos
or
xchg
fucompp
xchg
sbb
in
sub
inc
xor
push
or
jl
sub
std
fs
push
cwde
mov
inc
mov
xchg
adc
shl
(bad)
jbe
dec
bound
test
rcl
retf
xchg
pop
sub
jnp
pushf
fmulp
hlt
loop
sub
test
jl
test
test
in
cli
ins
mov
cli
movs
es
add
inc
gs
gs
inc
imul
adc
mov
mov
jmp
stos
mov
add
test
adc
push
pusha
push
lea
jmp
jmp
add
inc
gs
gs
dec
gs
imul
test
not
jmp
add
push
gs
imul
gs
(bad)
popa
cmp
call
add
push
popa
je
push
outs
push
imul
gs
jbe
inc
jb
je
arpl
push
arpl
outs
add
inc
and
mov
pop
stc
pushf
push
pushf
push
lea
jmp
pusha
(bad)
jmp
adc
push
(bad)
ja
add
repz
dec
aaa
popa
dec
jle
mov
addr16
jge
ja
scas
sahf
add
sbb
sbb
popa
xchg
and
sub
and
and
sbb
movs
adc
ret
lock
sub
push
inc
arpl
inc
xchg
ins
push
inc
test
sbb
pusha
pop
inc
popa
xchg
mov
dec
int
out
retf
std
loop
sub
call
test
mov
sti
dec
ret
scas
xchg
xchg
jg
cdq
in
aam
clc
and
mul
pop
push
or
sub
jnp
movs
xchg
fxch
fdivr
add
cmp
jle
push
out
sar
dec
jecxz
cmps
xchg
jle
out
adc
xchg
test
ficom
add
jmp
mov
cwde
and
add
sub
imul
ins
test
loopne
lods
inc
sub
inc
xor
mov
inc
sub
aas
xchg
and
xchg
and
shl
imul
adc
sub
ss
jecxz
fwait
call
mov
xchg
jp
stos
out
(bad)
mov
dec
daa
(bad)
and
retf
jo
in
mov
movs
hlt
ins
das
or
cmp
or
mov
(bad)
push
add
xor
outs
push
pusha
push
fs
cld
jmp
add
jbe
ins
imul
je
fwait
mov
pop
cmp
mov
sar
retf
loope
sti
push
stc
xor
inc
sub
hlt
in
fwait
pushf
test
je
enter
mov
inc
pop
movs
dec
push
inc
push
dec
dec
xor
cmps
dec
cmp
or
push
movs
movs
sbb
or
add
or
cmp
scas
aas
jbe
mov
xchg
jno
mov
cld
shl
add
or
adc
dec
icebp
mov
or
out
inc
mov
sbb
inc
xor
cwde
sbb
popf
sub
call
cmp
pop
inc
cmp
add
mov
add
xchg
repnz
test
dec
jge
xor
icebp
rcl
xor
call
aad
inc
movs
xchg
mov
mov
mov
sahf
aaa
xor
sub
and
cmp
adc
jge
pop
shr
and
mov
or
and
stos
int
jle
inc
in
jmp
and
cmp
xchg
int3
mov
iret
in
out
out
mov
sub
dec
imul
xor
push
mov
les
xchg
scas
int3
mov
fidivr
out
stc
in
cmp
sahf
lods
xchg
jmp
mov
test
sar
ret
shl
aad
mov
mov
mov
mov
bswap
movsx
pop
mov
pusha
pushf
push
pushf
mov
jmp
add
push
outs
fs
gs
popa
addr16
add
(bad)
dec
stos
(bad)
inc
les
inc
gs
popa
jae
inc
jb
outs
jb
push
pusha
mov
pusha
mov
lea
jmp
add
inc
gs
ins
imul
inc
popa
je
add
dec
dec
dec
inc
push
cs
ins
add
(bad)
jo
jb
test
into
fnstcw
inc
ss
pop
inc
mov
js
inc
inc
xor
dec
aaa
jnp
pushf
xchg
or
dec
cmp
push
loope
inc
xor
out
aam
in
or
out
adc
add
adc
sub
arpl
push
outs
pop
jb
(bad)
jmp
mov
mov
jne
bswap
movzx
not
pop
pushf
mov
push
push
ret
jmp
and
push
bsf
xor
btr
push
bsf
xadd
cmp
pushf
mov
xadd
test
adc
rcl
mov
xchg
test
movsx
not
mov
rcl
mov
xor
pushf
cmp
sub
lea
call
dec
bsr
mov
clc
jmp
jge
mov
call
mov
adc
sbb
and
adc
out
and
jnp
mov
loopne
aas
sbb
push
pop
dec
xor
mov
sbb
push
repnz
sub
mov
sub
mov
add
add
adc
mov
rcr
in
dec
aaa
xchg
mov
pushf
xchg
dec
dec
(bad)
div
jne
add
int
call
arpl
clc
xor
push
inc
outs
or
mov
std
out
es
jae
retf
mov
mov
fadd
aad
lds
iret
mov
jecxz
std
mov
repz
out
adc
cmp
mov
or
icebp
add
inc
gs
gs
dec
outs
jne
add
dec
outs
imul
inc
add
rcr
xor
mov
call
pusha
lea
jge
jne
pushf
stos
push
pusha
lea
jmp
mov
lea
jbe
push
push
push
mov
lea
jmp
add
push
gs
arpl
imul
imul
arpl
add
ins
ins
dec
gs
dec
outs
outs
imul
add
out
jecxz
sub
and
dec
cmp
(bad)
dec
aaa
dec
sub
outs
push
fwait
and
add
or
dec
xor
sahf
mov
xor
jb
sahf
xor
mov
xor
enter
push
ds
inc
xor
fwait
jle
mov
add
cmp
test
mov
(bad)
rcr
out
jmp
sbb
outs
jg
pop
leave
iret
fmulp
mov
or
ins
push
sbb
xor
xchg
xchg
out
imul
jecxz
mov
js
cmp
inc
xor
mul
cmp
cmp
xor
aas
dec
xor
jae
mov
test
retf
(bad)
mov
fiadd
inc
xchg
ins
popa
addr16
imul
je
outs
jns
clc
pushf
pushf
pusha
mov
lea
stc
rol
mov
rol
not
rol
not
mov
call
lea
mov
pop
movsx
push
movsx
mov
jmp
lea
jae
xchg
call
in
jmp
clc
pop
rol
je
mov
ror
lock
pop
xor
push
aas
dec
sub
jo
mov
and
add
call
aas
pop
loope
leave
mov
push
mov
dec
dec
cs
aas
jbe
mov
aas
pop
dec
sahf
mov
mov
call
mov
sbb
jmp
stc
pminsw
cli
sbb
and
call
sub
ss
cmp
outs
pop
mov
call
or
fisttp
xor
cdq
add
add
push
gs
popa
outs
fs
gs
outs
jne
je
add
ins
jae
jb
jo
outs
inc
add
add
gs
je
inc
imul
imul
jb
ins
inc
add
iret
mov
shl
sbb
pop
inc
and
sbb
inc
xor
push
inc
dec
sub
jge
popf
xchg
jmp
xor
adc
in
mov
fstp
cs
cmp
push
call
or
adc
mov
and
pop
cld
in
or
(bad)
adc
fwait
and
popa
push
outs
scas
xchg
sbb
jl
sahf
mov
fst
leave
sbb
enter
call
cmp
cmp
(bad)
mov
loopne
adc
mov
xor
pop
jp
mov
xchg
nop
xchg
jmp
fmul
mov
adc
push
jge
repnz
pop
inc
mov
lds
inc
cs
mov
(bad)
in
fiadd
push
cmps
inc
dec
ss
push
in
popa
xchg
xchg
cwde
or
fcmovne
mov
mov
fidiv
mov
add
shr
inc
mov
add
fisubr
adc
mov
add
daa
push
jb
mov
sbb
ins
mov
lahf
(bad)
loopne
pop
inc
xchg
dec
xor
xor
sub
mov
push
inc
(bad)
stc
outs
push
mov
mov
sub
xor
jo
or
mov
je
jb
gs
jb
arpl
jb
inc
add
add
outs
bound
push
outs
ins
outs
arpl
lea
jne
jmp
push
mov
mov
(bad)
vpaddusb
es
lods
xchg
jmp
iret
stos
cld
in
out
sub
dec
test
test
mov
mov
loopne
xchg
mov
sahf
dec
sub
enter
bound
cmps
stos
jb
stos
xchg
mov
jmp
and
push
inc
je
test
mov
fiadd
add
inc
ins
outs
jae
push
jb
outs
je
jb
add
inc
jne
ins
imul
outs
fs
add
add
dec
in
inc
mov
mov
aam
adc
inc
ss
sub
push
xchg
jl
jb
ins
cdq
adc
ret
ins
xor
in
imul
mov
add
jp
jmp
aam
or
div
sub
xchg
and
loope
sub
maxps
jmp
cmp
fwait
clc
jle
lahf
mov
loop
and
pop
dec
cmp
dec
cmp
iret
retf
add
add
sbb
repz
mul
iret
je
cmps
xchg
in
in
fld
mov
sub
fisttp
mov
dec
add
jle
mov
(bad)
cli
jmp
clc
or
ds
pop
dec
call
aad
mov
cmp
lods
and
adc
hlt
bound
call
mov
loope
sub
jae
fiadd
cmp
pusha
call
cmc
pusha
cmp
pushf
lea
ja
call
lea
je
stc
push
bt
push
cmp
jmp
add
inc
ins
outs
bound
dec
outs
arpl
mov
jmp
cmps
sbb
xor
inc
xor
cmps
xchg
sbb
push
clc
lock
or
xor
inc
xor
mov
and
sub
inc
fisub
adc
pop
das
sbb
jp
ins
pop
adc
out
lock
push
cli
jmp
adc
and
dec
in
ret
in
aad
add
sti
aas
and
aaa
and
inc
lock
aam
inc
and
fadd
mov
sbb
(bad)
pop
int3
mov
sub
xchg
test
inc
inc
dec
cmps
xor
fnstenv
repz
push
xchg
ret
lock
jp
dec
dec
int3
jo
mov
xchg
fxch
mov
(bad)
jmp
inc
cmp
dec
inc
ss
fiadd
fucomi
mul
mov
push
push
add
nop
ins
in
loope
lods
in
retf
out
jmp
and
inc
fs
je
lea
jae
call
je
inc
jmp
loop
pop
cmc
loop
adc
cmc
in
and
cmp
imul
out
fsub
lea
and
sbb
mov
stos
fs
mov
int3
repnz
fcom
scas
jbe
pushf
mov
or
mov
sar
ss
jle
js
mov
fmulp
call
push
inc
xor
aad
mov
cmp
push
cmp
aad
loop
daa
sbb
push
mov
pop
cld
xchg
sub
inc
push
inc
pop
mov
in
popa
cwde
inc
mov
imul
push
dec
int3
jb
je
dec
xor
(bad)
in
leave
pop
inc
ins
pop
fnsave
leave
add
inc
dec
sub
(bad)
jae
movs
aad
aam
dec
imul
xor
je
pop
adc
fadd
pop
fistp
sub
gs
inc
mov
xchg
test
out
(bad)
jae
lods
nop
out
enter
dec
aaa
movs
cwde
in
enter
into
int
jecxz
rol
(bad)
jmp
dec
cmp
xor
adc
or
jg
mov
ret
int
out
mov
cmps
xchg
es
sbb
jns
dec
ins
push
mov
push
inc
push
inc
jne
inc
pop
inc
push
dec
xor
lea
xor
cmp
cmp
cmp
lea
jle
(bad)
mov
mov
das
out
pop
je
mov
(bad)
mov
pusha
retf
mov
pop
lock
mov
mov
mov
push
cmp
or
xchg
cmp
leave
lea
pop
shl
sub
popa
mov
lock
lock
ds
mov
(bad)
in
in
jecxz
cmp
imul
call
cmps
retf
mov
xchg
or
xor
inc
xor
or
iret
les
je
outs
jbe
jb
outs
ins
outs
je
je
imul
ins
fs
xor
cs
ins
add
aas
mov
mov
jmp
jmp
or
jmp
add
inc
jb
popa
je
inc
outs
outs
je
outs
imul
adc
popa
mov
rcl
fisttp
sub
cmp
inc
sub
jno
sahf
sbb
cli
jecxz
es
xor
jge
sahf
xchg
cld
loopne
and
inc
imul
jns
(bad)
js
cdq
fcmove
rol
hlt
loopne
pop
inc
xor
icebp
inc
stos
pop
(bad)
jecxz
add
js
cmp
cli
sub
mov
mov
or
cli
mul
or
ja
jbe
test
dec
sub
mul
out
and
sub
ja
nop
jns
outs
mov
(bad)
mov
shr
push
xchg
ror
mov
mov
fs
pop
(bad)
shl
movs
leave
pop
inc
jle
mov
aam
ja
ds
ins
push
sub
repnz
neg
cmp
xchg
xchg
jl
mov
push
jmp
es
or
cmp
or
call
inc
aad
retf
int
psubw
mov
shl
cld
(bad)
mov
sbb
sbb
ficom
xor
jb
mov
jnp
test
in
es
adc
cmp
xchg
int
jns
and
jmp
std
xor
icebp
add
imul
or
xor
lods
pushf
mov
loop
call
push
popf
test
sub
cmp
dec
xor
movs
cdq
clc
loop
mov
pop
xor
and
in
jne
lea
loop
xchg
jg
xchg
add
add
cs
and
inc
sub
aas
cdq
push
xor
out
std
push
push
repnz
cmp
jne
fild
mov
retf
(bad)
dec
sub
stos
jmp
mov
fisttp
neg
pop
sbb
and
mov
scas
fwait
sub
and
int
jns
sbb
and
pop
dec
lock
push
inc
xor
aad
(bad)
retf
scas
lock
push
ja
inc
inc
aaa
jnp
dec
aad
in
popa
pushf
sub
iret
std
xlat
retf
sbb
ror
js
mov
icebp
fidiv
outs
pop
test
or
aaa
mov
shl
imul
out
test
adc
sbb
and
dec
imul
imul
rol
mov
push
fdivr
cmp
inc
das
fs
gs
pop
inc
push
inc
xchg
pop
mov
xchg
repnz
call
jbe
add
xor
fcmovnb
repnz
icebp
sbb
pop
or
mov
or
add
add
add
add
push
add
add
fwait
clc
sbb
add
add
add
add
add
sbb
add
sbb
add
add
add
add
add
add
sbb
jae
data16
xor
lock
retf
dec
ins
sbb
and
pop
xchg
jno
dec
aad
arpl
lahf
dec
mov
cmc
not
cmc
popf
repz
sbb
xchg
sub
push
mov
add
ins
dec
sahf
add
arpl
inc
push
mov
and
movs
inc
les
test
or
sar
out
jge
jnp
aam
loope
addr16
mov
sub
daa
mov
data16
pop
push
fwait
js
test
dec
mov
or
retf
(bad)
pop
retf
pop
idiv
pop
bound
int3
cmp
mov
inc
mov
aaa
push
loopne
inc
ds
push
dec
mov
mov
loop
mov
loop
dec
mov
dec
mov
adc
daa
ret
nop
xchg
jns
pushf
adc
retf
test
mov
(bad)
aas
(bad)
jo
rcr
sahf
cli
and
out
inc
xchg
xor
dec
jge
(bad)
mov
test
sbb
mov
pop
add
test
sahf
(bad)
and
leave
pop
fwait
inc
loope
inc
in
adc
test
not
inc
push
push
mov
sbb
repz
mov
popa
sub
and
or
int
sub
xor
cmp
aas
pusha
jp
cmps
fstp
cmp
inc
mov
icebp
push
lds
imul
jl
out
dec
clc
inc
int3
adc
data16
push
sub
sub
mov
je
lds
call
mov
ret
clc
pop
cwde
dec
cmps
jle
in
adc
sub
shl
cmp
and
fs
pmaxsw
push
shl
push
les
loop
push
lds
sub
sbb
paddb
mov
push
mov
dec
outs
jns
jb
shl
jmp
or
xchg
mov
jbe
fimul
sub
fs
(bad)
lods
pusha
or
retf
pushf
and
dec
push
ja
pop
cwde
cdq
mov
loopne
push
pop
std
sbb
pusha
mov
sub
dec
lahf
sub
pushf
jle
xor
(bad)
sbb
mov
leave
icebp
movs
repz
pushf
sbb
xor
popf
ret
fcomp
add
aam
icebp
lods
and
dec
pop
mov
inc
dec
pop
shl
sub
dec
daa
(bad)
mov
xchg
push
xchg
loopne
scas
push
and
movs
mov
out
mov
je
cmps
inc
ins
js
ss
cs
jo
js
jnp
je
dec
inc
mov
js
add
push
inc
pusha
pop
mov
in
fbld
mov
xor
pop
std
sbb
fistp
and
push
lds
imul
shl
test
and
pop
add
push
xchg
mov
or
mov
fs
and
(bad)
(bad)
loop
cld
dec
test
adc
jge
add
out
sbb
je
shr
push
mov
je
mov
jne
mov
jle
push
leave
cwde
sub
mov
sbb
lods
pop
cmp
add
cld
pop
pop
mov
data16
test
push
pop
cmps
xor
je
sub
jo
push
mov
in
test
jge
jbe
retf
popf
call
pusha
jmp
pop
inc
clc
imul
repnz
dec
jl
pop
jb
or
inc
das
jle
jl
or
jne
ret
inc
cli
dec
jmp
pop
xor
fst
add
mov
into
jae
mov
sbb
out
mov
leave
popf
icebp
dec
sar
pop
xchg
mov
int3
hlt
nop
fbstp
pavgw
aam
push
test
dec
xchg
mov
aad
arpl
cmp
lds
dec
adc
push
xchg
(bad)
push
lea
mov
ror
xor
mov
out
or
cmp
sbb
jmp
ds
mov
cmp
adc
add
jmp
fisttp
jbe
fcom
cmc
pushf
mov
repz
jg
fs
div
mov
out
push
mov
push
mov
mov
xor
mov
xor
hlt
dec
inc
push
cdq
xchg
arpl
jno
popa
xor
push
(bad)
pop
movs
sbb
and
inc
xchg
(bad)
pop
dec
icebp
pop
xchg
xchg
rcr
and
(bad)
push
div
lods
push
jp
and
jne
nop
mov
push
push
test
gs
fbstp
adc
test
mov
pop
adc
push
lahf
pop
xor
sub
out
in
fwait
adc
dec
inc
neg
mov
sub
cdq
call
call
inc
add
sbb
ret
sbb
and
adc
pop
outs
mov
jnp
mov
(bad)
or
push
inc
retf
jge
scas
fdiv
imul
or
jnp
outs
call
mov
pop
cmp
mov
jno
mov
mov
inc
jnp
mov
ds
retf
retf
loope
xor
imul
and
push
push
adc
sub
popf
stos
call
sbb
in
mov
adc
retf
daa
adc
xchg
fistp
pop
retf
jno
rol
int3
dec
pop
sti
xchg
fyl2xp1
pop
jg
(bad)
in
xchg
ins
jp
fmul
inc
movs
add
sub
jl
rol
jb
scas
mov
fcom
lods
in
mov
mov
xor
dec
ss
fdivr
jmp
fdiv
push
scas
dec
fcomp
push
adc
aam
push
xchg
mov
sub
or
imul
jb
test
or
sub
pusha
mov
pop
(bad)
cld
add
pop
inc
mov
outs
mov
add
mov
outs
shl
outs
sar
inc
cwde
retf
out
cmps
aam
clc
push
dec
mov
and
loopne
push
mov
jno
jno
loop
cmp
call
fild
and
and
adc
xchg
mov
push
in
hlt
mov
test
xor
xchg
inc
ds
xor
test
rcl
leave
and
out
ins
dec
mov
lock
xchg
dec
scas
repnz
ror
gs
dec
int
cwde
fwait
jb
add
adc
jne
cwde
popa
in
xchg
(bad)
xor
das
lock
cli
mov
sub
mov
cmps
jb
into
(bad)
(bad)
mov
fnstenv
jne
loop
ret
or
movs
arpl
std
lock
adc
add
push
mov
test
push
adc
adc
dec
hlt
imul
scas
jle
pushf
xchg
sar
movs
mov
inc
cmp
jmp
pop
mov
mov
mov
test
ret
cmp
sbb
test
jmp
cmps
xor
aas
mov
jo
lods
test
xchg
imul
mov
data16
inc
scas
mov
mov
sub
mov
aad
push
cmp
and
mov
mov
(bad)
out
jb
adc
push
mov
pop
xor
pop
ret
add
pusha
jg
(bad)
(bad)
mov
out
and
arpl
pop
jns
fcom
inc
push
jp
leave
sub
mov
jnp
call
mov
test
xchg
or
sbb
mov
adc
scas
cld
test
add
xor
adc
push
icebp
mov
into
sbb
test
jb
test
imul
inc
shl
(bad)
fabs
xlat
push
or
dec
int3
push
cmp
(bad)
leave
mov
clc
int
movs
sbb
cmc
stos
js
into
adc
test
mov
call
aad
call
imul
ins
dec
sbb
sub
loope
imul
push
jo
jmp
fnstsw
jg
mov
lods
jb
test
in
jo
clc
xlat
jnp
ins
inc
retf
xchg
fstp
pop
xchg
popf
adc
cld
dec
inc
jns
dec
pushf
or
mov
(bad)
mov
icebp
sub
ja
movs
sar
jecxz
int3
pop
jae
hlt
add
dec
sbb
stos
shl
jb
push
daa
enter
pop
movs
addr16
stos
sahf
cmp
inc
(bad)
cmp
ds
nop
ss
imul
(bad)
xchg
jecxz
(bad)
retf
rcr
dec
adc
add
sub
in
push
cli
scas
in
retf
push
cmp
popa
or
mov
jmp
out
sti
add
pop
cmp
fldenv
xchg
mov
lock
test
repnz
scas
(bad)
imul
xchg
js
cmp
popf
popf
or
stc
cmps
adc
push
mov
inc
and
bound
call
or
jnp
or
(bad)
or
mov
mov
mov
imul
and
cmp
mov
inc
jl
or
cmp
xlat
loopne
pusha
inc
imul
das
mov
loopne
and
mov
(bad)
adc
adc
xchg
adc
dec
ins
dec
retf
mov
int
adc
sub
leave
pop
call
sahf
or
sbb
inc
inc
inc
mov
je
daa
fisttp
push
xlat
loop
dec
mov
add
add
cmps
pop
inc
scas
sbb
mov
fisttp
and
fsubr
and
das
adc
mov
addr16
or
jmp
adc
cld
fnstenv
adc
lods
jmp
(bad)
cmp
and
je
aad
(bad)
cmp
jg
sub
call
dec
cld
xchg
rcl
cmp
pop
addr16
fadd
pusha
xor
arpl
push
pop
pop
push
lea
jl
xor
push
pop
adc
sub
in
pop
test
addr16
ds
call
xlat
cmp
shr
outs
inc
mov
cmps
mov
pop
mov
movs
or
push
jl
push
add
jb
jbe
sbb
fwait
or
mov
jp
aad
enter
ins
push
xchg
dec
in
sub
jo
push
sub
dec
mov
cdq
stos
test
jno
fwait
push
mov
xchg
cmp
das
sub
mul
in
je
jl
ficomp
jge
cmp
ds
sar
sub
stc
std
movs
imul
aad
mov
mov
out
into
mov
enter
jmp
aas
adc
scas
in
(bad)
ret
add
add
cmp
std
fisttp
pop
jg
sub
mov
push
lods
movs
sub
mov
sbb
inc
ret
retf
pop
mov
(bad)
xchg
lods
imul
daa
out
add
sbb
imul
and
sbb
pushf
daa
pop
add
aas
hlt
mov
(bad)
test
enter
icebp
rcr
shr
int3
dec
xchg
push
sub
sbb
jb
sbb
ds
dec
das
fs
scas
pop
jp
jmp
shr
sub
sbb
push
pop
mov
add
cs
ins
add
add
ins
bound
gs
outs
add
inc
inc
push
push
xor
cs
ins
add
test
add
leave
jmp
call
add
inc
jb
popa
je
inc
imul
outs
addr16
add
cwde
mov
lea
movsx
lahf
lea
mov
jmp
popf
rdtsc
nop
push
mov
call
add
push
gs
imul
outs
arpl
jae
lea
je
shrd
dec
lea
shr
add
movsx
sub
pushf
inc
pop
shr
rcl
xchg
inc
bsf
mov
shr
shr
clc
add
add
inc
add
or
clc
bsr
mov
pusha
pushf
clc
pushf
shr
call
movs
cwde
pop
push
or
sbb
or
xor
jae
retf
push
mov
in
mov
mov
dec
fcom
fwait
sub
xchg
sbb
push
sbb
scas
or
xchg
stc
xchg
jecxz
sbb
mov
push
mov
or
pusha
mov
adc
push
dec
mov
lea
js
mov
xchg
in
push
xchg
(bad)
pop
movs
jge
iret
jne
rcl
repnz
retf
inc
xchg
pop
test
xchg
jge
xor
out
pushf
fs
jmp
(bad)
sbb
pop
pushf
sub
sti
or
push
mov
ret
(bad)
jo
mov
(bad)
xchg
fucom
ins
imul
jae
sbb
xor
repnz
inc
pop
cdq
sub
data16
movs
ret
pop
aam
jno
scas
push
cdq
pop
pushf
retf
sbb
repnz
fdivr
in
(bad)
push
clc
sub
jmp
out
stos
scas
mov
test
gs
arpl
mov
call
dec
sbb
imul
dec
inc
movs
lods
xor
mov
repnz
push
scas
sbb
stos
push
jp
repz
jmp
(bad)
retf
out
xorps
jp
push
ret
clc
push
fst
iret
call
sahf
sbb
test
xlat
sbb
js
push
xchg
pop
imul
(bad)
and
sahf
popa
dec
or
sti
test
jmp
loopne
jl
xchg
std
int3
fidiv
cmp
sub
cmp
or
arpl
fdivr
(bad)
lods
les
arpl
inc
mov
mov
(bad)
rcl
mov
cwde
push
ret
xchg
mov
adc
loop
mov
mov
call
mov
adc
mov
(bad)
and
aaa
push
push
movs
jg
ficom
cmp
xchg
test
fcomp
fcom
xlat
mov
aam
and
nop
ror
mov
fxch
sahf
(bad)
adc
jne
icebp
and
mov
rcl
cwde
bound
clc
aaa
push
xchg
jnp
ds
or
mov
adc
sub
add
sahf
mov
mov
loopne
icebp
mov
mov
jecxz
add
xchg
rcr
sub
adc
test
and
shl
xor
(bad)
(bad)
nop
dec
ret
popf
leave
test
mov
or
pop
imul
jg
xchg
cmps
shl
xchg
repz
scas
adc
arpl
ins
mov
and
(bad)
fwait
clc
es
xchg
mov
sub
mov
les
jb
xchg
add
push
icebp
test
add
cmps
adc
jae
test
add
imul
xchg
sahf
dec
mov
pushf
and
lahf
xchg
jp
xchg
outs
mov
cmp
or
punpckhdq
fld
mov
ss
pop
bound
inc
je
or
packsswb
les
mov
arpl
das
(bad)
repnz
fwait
xor
add
inc
jg
push
push
mov
(bad)
sbb
add
lea
call
shr
dec
pushf
adc
or
and
fistp
lahf
sub
aaa
xchg
daa
test
sbb
js
sbb
int3
test
pop
mov
dec
mov
cmp
mov
(bad)
mov
test
mov
addr16
xchg
enter
push
dec
xchg
adc
push
push
and
jne
cmp
adc
ret
shl
cmovs
fcom
sahf
inc
test
bound
sbb
inc
lahf
js
lds
outs
lahf
arpl
sbb
repnz
aad
ds
dec
or
pop
jo
push
inc
fisttp
xchg
fcmovnu
scas
dec
mov
xor
inc
mov
adc
sbb
out
(bad)
xlat
ret
inc
add
inc
pop
pusha
fadd
cs
lea
dec
mov
test
sbb
inc
push
inc
xchg
inc
jbe
sbb
outs
add
lods
push
fdiv
loopne
test
cmps
inc
mov
ret
rcr
clc
xor
scas
or
popf
xchg
pushf
or
xchg
adc
xchg
movs
pop
xchg
popf
adc
rcr
cdq
xchg
mov
inc
pusha
pop
movups
popf
add
sbb
jo
popa
xchg
out
mov
jmp
add
imul
test
cdq
adc
shl
mov
nop
mov
xor
dec
je
rcl
imul
jg
enter
xchg
sbb
adc
xlat
mov
pusha
cdq
sbb
xchg
sbb
inc
outs
popf
xchg
idiv
vaddsubps
loopne
stos
fwait
add
mov
and
int
push
in
pusha
mov
aam
clc
push
js
mov
fs
int3
repnz
aaa
xchg
jl
push
ins
xor
(bad)
stc
inc
not
add
stos
and
int3
lds
fsubp
out
jmp
adc
mov
xchg
add
xor
mov
push
(bad)
dec
and
mov
(bad)
and
enter
add
or
jl
push
jl
aad
and
and
or
sbb
pop
test
sub
xchg
sbb
xchg
fs
xor
push
enter
hlt
test
xchg
sub
add
cmc
movs
and
mov
and
imul
fwait
sahf
dec
mov
lock
and
xchg
sbb
mov
lea
adc
sub
jb
push
rol
les
push
push
(bad)
fcmovnu
and
int3
lods
dec
(bad)
in
adc
xor
and
pop
xchg
pop
repz
aas
and
sahf
scas
mov
add
sbb
fs
xlat
xchg
dec
loop
rol
imul
sahf
and
mov
xchg
(bad)
mov
stos
mov
jle
cmp
lock
mov
jmp
push
xchg
ret
lods
adc
fcomp
adc
nop
test
push
adc
loopne
adc
popa
and
loopne
and
test
test
call
out
ins
daa
xor
shr
enter
sub
popa
push
cmp
or
call
dec
push
adc
mov
push
sahf
or
add
enter
inc
and
inc
add
mov
cdq
push
call
cdq
xlat
jecxz
sbb
push
jmp
push
mul
pop
in
fsub
xor
ret
dec
cdq
mov
jge
test
push
out
push
imul
push
add
and
jle
test
push
jae
adc
cmp
lds
mov
loopne
jecxz
sub
and
(bad)
fsub
xchg
scas
aaa
mov
fs
mov
fdivr
ja
xor
or
jg
(bad)
lods
dec
adc
int3
xchg
pushf
add
in
std
jb
pop
lock
fstp
ins
adc
idiv
scas
lea
enter
xor
(bad)
sahf
cs
test
pop
jg
mov
mov
int
mov
adc
sub
dec
pop
imul
jle
sar
cld
or
call
test
pop
out
gs
pop
mov
outs
loopne
jmp
xchg
pop
mov
jmp
jp
ss
sar
add
xor
cmp
ror
loope
addr16
cmc
add
test
int
mov
cmp
add
mov
in
cld
nop
cmps
sub
test
xlat
sbb
movs
mov
retf
add
aam
xor
dec
fnsave
fwait
cmp
jne
aas
dec
lahf
mov
neg
(bad)
in
inc
test
mov
push
xchg
mov
nop
test
js
and
cmp
daa
cmps
ins
pop
fsubr
mov
mov
cmps
pop
std
cmp
xor
push
jnp
sahf
push
mov
push
cmps
cmp
cmp
mov
cmp
cmp
aam
mov
cmp
mov
out
ins
pop
push
(bad)
gs
sahf
sbb
in
pop
dec
sbb
add
pop
pop
and
xchg
xor
jnp
(bad)
jg
sbb
jo
rcr
mov
xchg
dec
loopne
jecxz
push
aas
mov
pop
pop
aaa
mov
fs
(bad)
push
test
and
pop
jno
fldenv
jb
fadd
in
mov
cdq
cmps
repnz
addr16
cmp
clc
imul
push
dec
ret
inc
xchg
pop
xchg
test
fcomp
ret
or
mov
add
push
cmp
xchg
push
jp
and
cmp
pop
jbe
out
aam
cmp
sbb
cwde
add
pop
test
rcr
push
xchg
cdq
xor
or
pop
inc
mov
push
outs
sbb
dec
or
pop
pushf
adc
jg
jle
dec
mov
mov
push
(bad)
(bad)
adc
and
xor
adc
dec
mov
mov
push
fsubrp
push
loop
push
addr16
loopne
ret
xor
push
adc
pushf
jg
adc
sti
jb
loope
rcl
add
and
test
pusha
lock
lods
sahf
scas
daa
cmp
sar
xchg
jae
daa
js
xchg
adc
push
cdq
adc
cld
les
gs
sub
mov
in
mov
inc
aad
and
adc
outs
arpl
sahf
xor
scas
and
jo
push
xchg
push
pop
push
or
jg
push
mov
loopne
add
inc
push
add
pop
bound
push
stos
dec
xchg
mov
les
adc
pop
push
test
xchg
arpl
xchg
push
mov
add
jae
mov
(bad)
mov
je
push
les
shr
pop
cld
cmc
sub
les
leave
add
pop
cdq
fadd
mov
ror
test
imul
or
cmp
jns
out
movmskps
shl
mov
jae
test
jle
sub
or
add
fcom
mov
fpatan
test
sub
xlat
scas
and
push
mov
push
sbb
mov
push
pop
xchg
fs
test
lds
push
cmp
mov
sahf
push
fmul
xor
cdq
mov
ret
or
sub
jp
mov
inc
sti
scas
push
mov
mov
cwde
xchg
es
sbb
mov
lods
hlt
and
mov
pop
adc
into
or
xchg
pop
int
mov
xchg
sbb
jl
jnp
xor
fwait
cmp
sahf
or
imul
jbe
jge
push
test
clc
mov
mov
es
sub
test
data16
(bad)
jg
(bad)
push
push
add
scas
outs
push
ja
jae
push
fucom
pop
fidivr
add
push
scas
neg
xchg
clc
mov
pop
(bad)
arpl
aam
add
hlt
rol
mov
jne
pushf
fnstsw
repnz
clc
fcom
add
movs
pmullw
xlat
inc
mov
cmp
fdivr
in
cmps
push
mov
cdq
sbb
leave
mov
js
pop
int3
mov
imul
stc
mov
sub
mov
loop
cs
(bad)
jg
push
test
enter
xchg
cmps
add
adc
fsubr
or
xor
push
or
sahf
rcl
stos
xchg
sar
mov
pop
icebp
enter
push
or
pop
mov
cmps
mov
xor
movs
enter
imul
call
lods
mov
pop
inc
cld
sub
jo
fwait
inc
dec
pop
test
mov
push
jnp
pop
mov
mov
ins
mov
mov
adc
pop
adc
cmp
loopne
aas
fadd
mov
fisttp
sbb
sahf
mov
das
gs
xchg
mov
adc
loope
les
in
(bad)
neg
xor
pop
iret
xchg
(bad)
jno
(bad)
out
xor
dec
pop
and
mov
sbb
sar
mov
mov
loop
cmp
aaa
cmps
sahf
bound
int3
hlt
or
and
sbb
(bad)
pop
mov
mov
mov
push
xor
inc
cmp
mov
test
stos
rcl
mov
inc
jne
mov
mov
ins
xor
test
mov
pop
fsub
lods
adc
adc
(bad)
out
sahf
and
xor
push
xor
xor
xchg
sar
push
ja
xchg
xchg
pop
sahf
sbb
push
call
jecxz
mov
fcmovb
out
jecxz
pushf
dec
(bad)
xor
or
pop
cmp
imul
push
ja
xor
aam
add
retf
(bad)
adc
les
sahf
push
xlat
xor
out
(bad)
out
stc
repnz
cdq
sbb
jecxz
nop
fidivr
pop
into
pushf
mov
pop
loope
dec
xor
pop
xor
retf
mov
aas
cmp
out
or
xor
dec
movs
test
cmc
pusha
ficomp
repz
(bad)
enter
scas
fisub
repz
mov
(bad)
lods
cmps
sbb
adc
or
jo
stos
sahf
and
ret
mov
jne
int
scas
movs
xchg
xor
and
pop
int
retf
(bad)
mul
jo
test
cmp
fcom
xor
mov
mov
mov
aaa
inc
and
inc
and
jb
hlt
ins
loop
xlat
cmp
xchg
pop
mov
dec
adc
neg
push
push
out
xchg
rcr
in
in
sbb
nop
pop
fs
pop
data16
fs
je
mov
jbe
mov
fisubr
ja
add
push
retf
adc
(bad)
jae
fs
js
imul
jmp
nop
dec
sbb
push
pushf
mov
xchg
pop
mov
adc
adc
mov
cld
scas
fnstenv
cmp
(bad)
xchg
mov
(bad)
pop
mov
add
shl
imul
mov
add
mov
(bad)
fadd
jle
rcr
cmp
mov
cwde
(bad)
cmp
ja
dec
dec
lock
adc
fbstp
or
cmp
and
push
pop
repnz
int3
pop
xlat
into
dec
mov
(bad)
mov
mov
fucomip
ins
push
push
movs
jg
dec
icebp
pushf
cmovo
pop
test
jl
mov
lds
test
xchg
mov
fist
fisub
ret
and
stos
xchg
cs
xor
in
sbb
test
pushf
sbb
retf
iret
pop
push
or
mov
inc
xor
and
(bad)
aam
pop
movs
xchg
mov
xchg
pop
rcl
xchg
mov
mov
inc
loope
and
and
xchg
mov
nop
pushf
sub
in
cmp
or
rcl
mov
add
cdq
movs
push
and
push
or
lds
lods
in
test
aas
das
pop
xchg
xor
cmp
adc
stc
(bad)
dec
jle
aad
pop
jge
stos
mov
hlt
inc
les
fadd
cmps
mov
xchg
push
xchg
pop
adc
ror
mov
(bad)
or
shl
iret
rol
xor
cs
cmp
pop
jp
int3
jge
add
test
jge
int3
fnstcw
movs
cmp
mov
push
mov
or
not
or
aas
mov
outs
mov
add
nop
mov
mov
xchg
jl
rcl
mov
scas
in
retf
(bad)
push
adc
aad
frstor
add
hlt
mov
(bad)
pusha
mov
lock
adc
sti
or
jbe
test
aam
aam
cmp
mov
cmps
inc
mov
scas
fisttp
sbb
dec
and
aam
mov
fidiv
in
cmps
je
js
in
shl
cmps
pushf
aad
adc
js
movs
pop
iret
in
sbb
or
mov
xchg
sti
mov
or
or
je
and
hlt
xor
cmp
or
jl
adc
cli
retf
jge
(bad)
jmp
bound
outs
test
or
pop
jmp
add
lods
sbb
xchg
fwait
cmp
xchg
aam
loope
inc
mov
ds
scas
imul
sbb
enter
mov
retf
arpl
ins
and
lahf
xor
and
jmp
sahf
mov
add
jbe
imul
xor
imul
push
jecxz
sub
add
dec
xchg
(bad)
xchg
add
xor
lods
sub
pop
popf
cdq
adc
xchg
lea
push
int
rcl
lea
xor
jo
lods
data16
xor
sub
shl
inc
dec
push
xor
mov
fiadd
hlt
adc
ffree
test
add
xor
div
stos
or
int
into
sub
mov
mov
frstor
inc
call
push
ja
dec
mov
xchg
mov
inc
call
aam
ret
cmps
js
dec
(bad)
in
pusha
adc
cmps
dec
test
and
cmps
rol
mov
mov
xchg
imul
push
pop
jl
push
dec
sub
dec
push
mov
push
sub
pop
sahf
test
xchg
add
movs
in
stc
mov
(bad)
and
in
nop
ror
ins
fsub
push
rol
jmp
cld
push
imul
push
xlat
fdivr
pop
rol
aad
mov
aam
idiv
fld
push
and
or
or
add
mov
sbb
mov
je
retf
mov
hlt
sbb
add
mov
test
(bad)
fisttp
call
ja
fld
pop
adc
sbb
cmp
sbb
(bad)
sbb
push
jnp
adc
and
(bad)
(bad)
ja
inc
lea
or
out
or
jbe
xchg
mov
lahf
add
sub
mov
rol
out
rol
push
fimul
dec
or
cmp
add
mov
cmp
sahf
dec
ret
jne
sar
cmp
mov
shl
adc
mov
popf
mov
and
ss
test
or
pop
xor
bound
test
inc
sub
and
mov
fistp
pusha
fs
add
inc
mov
ret
and
pop
iret
jnp
mov
xchg
xor
mov
jbe
inc
or
inc
dec
imul
mov
jae
xchg
mov
ins
mov
adc
les
xchg
aad
mov
push
das
xchg
repz
cmp
sbb
in
xor
(bad)
jns
xchg
xor
mov
jo
mov
add
out
mov
xor
dec
loop
add
fs
out
mov
cli
in
mov
xchg
adc
ins
je
adc
or
mov
mov
sub
imul
xchg
popf
jae
shl
and
pop
jle
mov
js
pusha
pop
inc
out
test
push
fs
cmp
aad
and
int
test
push
in
fsub
popf
inc
xchg
adc
aas
add
call
shl
and
pop
outs
shr
in
xchg
in
push
sub
or
fucomi
pusha
mov
in
scas
xor
dec
shl
ss
inc
mov
mov
xchg
pushf
pop
lea
imul
or
scas
inc
movs
jecxz
pusha
nop
sub
call
shl
lods
movs
pop
loopne
sub
mov
cmps
mov
mov
call
mov
sub
loopne
dec
div
xchg
xor
imul
dec
mov
cmp
call
pushf
jg
popf
lahf
les
sbb
ficom
cdq
pop
ret
adc
movs
ds
popf
inc
jb
call
jbe
ret
test
test
jnp
rcl
dec
stos
mov
lock
outs
iret
ja
sbb
ins
mov
push
pop
push
jae
lahf
dec
das
mov
repnz
bnd
xchg
rcr
pop
pop
lock
add
aaa
adc
iret
js
mov
pop
inc
clc
test
mov
mov
or
fiadd
push
test
push
inc
loope
mov
mov
mov
iret
stos
sub
jg
mov
push
lock
cmps
aad
mov
daa
je
cmp
adc
ja
mov
out
fimul
out
add
mov
ins
sbb
push
sbb
mov
mov
and
or
(bad)
mov
cmps
xchg
xor
pop
(bad)
shl
dec
jo
ret
xor
pop
jg
(bad)
scas
(bad)
pushf
mov
xchg
cmps
jg
ja
pop
push
jo
repnz
adc
bound
ret
xchg
clc
cmp
das
adc
lods
cmp
mov
push
pop
xchg
outs
fs
sahf
in
ds
(bad)
push
sets
cmp
cmp
push
mov
xchg
xor
retf
jg
sahf
xchg
clc
inc
adc
or
mov
xchg
lds
jmp
retf
fdivr
mov
mov
inc
push
dec
aas
leave
ret
lock
sbb
aam
fstp
shr
dec
test
test
stos
xchg
in
cmc
jmp
jecxz
repnz
ret
pop
xor
push
xchg
rol
push
(bad)
retf
and
mov
jmp
aam
sub
sbb
ins
out
sbb
arpl
xchg
imul
outs
sbb
jae
ret
imul
retf
bnd
push
and
push
(bad)
mov
enter
cmp
fisttp
mov
push
jo
mov
ret
xor
clc
mov
fiadd
dec
cmp
mov
and
ret
rcl
jno
mov
sub
push
or
mov
adc
adc
xchg
or
dec
or
iret
ret
sahf
fcom
mov
adc
ds
aaa
cmp
xchg
cli
pop
xor
arpl
xor
mov
mov
rcl
frstor
(bad)
and
dec
nop
mov
cmp
lds
ror
ret
mov
fisttp
imul
in
fdivr
jecxz
mov
retf
into
sub
lahf
popa
in
xchg
fist
addr16
xlat
xchg
bound
add
imul
push
xchg
(bad)
dec
and
pop
outs
lds
mov
dec
ret
inc
mov
rcl
inc
mov
jg
xchg
cwde
adc
cdq
mov
dec
push
mov
xchg
lods
nop
push
mov
cmps
jo
xor
inc
mov
push
jo
xchg
mov
xor
rcr
push
mov
xchg
sub
cmp
xchg
xchg
pop
push
jg
mov
cwde
sbb
sbb
fild
cwde
bound
shr
mov
pop
inc
cwde
pop
pop
jg
sbb
add
jle
pop
cmp
test
pop
mov
push
arpl
sbb
call
pop
(bad)
(bad)
xlat
mov
pop
outs
daa
xlat
scas
sub
shr
jae
jmp
ret
rol
aas
pop
retf
lds
sub
mov
xchg
sbb
inc
sbb
dec
lahf
adc
mov
xor
arpl
mov
aam
(bad)
out
test
ins
cmp
fisub
sar
pop
push
inc
adc
pop
push
xchg
test
dec
sub
ret
push
pop
xlat
jbe
mov
mov
sbb
xor
jle
shl
cli
adc
inc
dec
out
pop
push
fbld
fmul
leave
repnz
mov
clc
into
in
ret
dec
loopne
mov
retf
xchg
loopne
add
mov
cmp
outs
lock
pop
pop
add
lods
aam
sbb
mov
xor
pop
test
mov
imul
mov
test
pop
outs
push
mov
add
mov
mov
js
ret
and
daa
sbb
fild
mov
lea
and
in
mov
xchg
sbb
call
sub
nop
push
mov
or
outs
xchg
inc
sbb
mov
leave
adc
ret
dec
mov
cs
sbb
add
dec
inc
cmp
jo
es
mov
xor
sbb
sahf
call
(bad)
pusha
jmp
cli
(bad)
imul
mov
jns
cmp
pop
call
int3
aam
lahf
fisubr
jp
movs
movs
xor
jle
xchg
call
sub
mov
sbb
jb
fisttp
out
or
shl
xlat
mov
jae
mov
test
je
lahf
ja
int3
and
lods
clc
mov
add
inc
fwait
call
mov
sub
ds
sub
xchg
mov
push
xchg
mov
cwde
scas
jp
xchg
or
inc
mov
mov
mov
mov
add
and
jae
mov
pop
mov
pop
dec
or
out
cmps
add
push
(bad)
imul
call
nop
inc
dec
pop
(bad)
and
push
(bad)
jno
cmps
scas
fcom
jl
cmp
pushf
xor
add
push
mov
test
imul
jle
dec
push
adc
jmp
xor
mov
loopne
gs
add
mov
aam
daa
into
xchg
test
sbb
add
mov
push
ret
addr16
or
mov
std
fldcw
mov
mov
adc
xor
pushf
push
retf
pop
psubw
xchg
repz
push
bound
xchg
aaa
inc
icebp
mov
cmp
or
pop
mov
add
in
int3
frstor
neg
sbb
adc
imul
cmp
adc
xor
fidivr
inc
xchg
test
mov
ins
fld
adc
inc
mov
mov
lahf
pop
popa
dec
dec
cmp
push
jb
add
sbb
jp
cs
fcomp
es
fisub
push
cmp
aas
mov
add
ficom
inc
add
xor
pusha
nop
jge
push
xchg
arpl
adc
jge
test
xor
cmp
xchg
fadd
mov
push
adc
mov
mov
outs
es
pop
or
iret
mov
js
xor
or
ds
pop
fsub
pop
or
pop
jb
or
push
pushf
inc
arpl
call
xor
xchg
adc
jns
mov
clc
dec
aas
hlt
fs
idiv
add
push
outs
mov
push
clc
js
jae
shl
mov
xor
enter
sub
test
arpl
ret
lahf
cdq
adc
int3
inc
adc
and
adc
inc
ja
(bad)
pop
sub
loopne
jo
jae
fwait
je
mov
rcr
(bad)
mov
push
dec
mov
push
or
pusha
leave
stos
and
outs
aad
ins
pop
push
inc
pop
mov
jno
push
pop
mov
ins
adc
fsub
ret
in
adc
cmp
ss
inc
fcom
sbb
xchg
fs
pop
bound
pop
test
jge
lods
sbb
or
rol
call
jp
cld
and
mov
mov
repnz
sub
shl
mov
ret
mov
jno
push
jae
push
mov
add
mov
cdq
cmp
fs
xchg
rol
and
or
add
retf
push
jo
sbb
and
mov
shr
(bad)
js
repnz
test
(bad)
stc
fstp
data16
scas
sbb
clc
jno
mov
inc
inc
jmp
add
je
stos
push
pop
xchg
ja
fisubr
inc
sub
add
addr16
cwde
pop
inc
xchg
(bad)
repnz
fs
movs
test
inc
dec
sbb
inc
xor
pop
jbe
jecxz
push
add
xchg
fbld
pusha
push
pop
clc
push
pop
pop
dec
cs
push
shr
jb
dec
cmp
push
xchg
into
mov
xlat
xchg
push
or
daa
sub
or
int3
sti
aam
cmp
hlt
sti
inc
add
or
push
mov
popf
pop
jmp
jg
add
sbb
dec
xchg
retf
call
(bad)
dec
push
mov
cmps
inc
pop
test
out
xchg
in
dec
push
sbb
imul
into
jns
outs
stos
data16
and
jne
(bad)
test
or
aas
mov
pop
push
mov
cmp
mov
jp
mov
push
inc
int3
xor
shl
inc
arpl
fisubr
mov
push
dec
test
add
jp
add
mov
cmp
dec
sub
call
inc
inc
sub
add
das
popf
movs
add
pop
jae
sbb
inc
ja
add
sbb
or
lahf
jle
fcomp
xchg
mov
add
push
xchg
addr16
iret
pop
fstp
fwait
test
push
mov
push
jb
nop
mov
clc
xchg
lea
(bad)
push
sbb
xor
xchg
pop
inc
pop
push
fisttp
sbb
jmp
push
mov
jecxz
mov
and
ror
mov
popf
mov
test
test
mov
ret
dec
sub
mov
xchg
xchg
jg
jbe
push
and
push
push
int3
mov
pop
mov
xchg
pushf
arpl
data16
inc
mov
inc
sti
mov
inc
cwde
test
jnp
xor
pop
fwait
inc
and
push
inc
lds
pop
cmp
fild
jo
movs
call
wrmsr
mov
in
jb
sbb
and
cmp
pop
lahf
ss
out
jo
clc
(bad)
in
push
jo
in
aad
out
data16
shl
dec
dec
add
pop
sub
popf
aas
mov
sbb
jle
push
jns
shl
movs
or
mov
dec
cmps
xchg
lahf
cmps
fidivr
test
push
rol
add
cmc
les
imul
push
retf
mov
cmp
dec
push
out
addr16
sub
jge
(bad)
adc
loopne
or
sbb
jp
xchg
ins
into
mov
in
xchg
mov
imul
aad
mov
test
xchg
cdq
mov
clc
into
sbb
fcmovb
sub
xchg
add
mov
mov
dec
jg
repnz
or
jno
out
or
jnp
jnp
lds
arpl
outs
jne
and
xor
outs
ret
jl
pop
leave
mov
jbe
out
ret
and
aaa
fistp
sub
adc
add
mov
mov
outs
pop
outs
mov
push
jg
(bad)
push
pop
fst
clc
mov
mov
retf
add
(bad)
cmps
push
test
inc
lock
inc
push
mov
(bad)
or
or
dec
leave
sub
(bad)
out
ds
test
cli
mov
inc
enter
push
(bad)
xchg
adc
bound
xor
mov
push
add
inc
pushf
retf
dec
push
test
pop
test
std
ror
pop
and
mov
pop
mov
xor
sub
xor
mov
xchg
mov
cwde
jo
popa
push
cld
jl
mov
imul
push
sbb
out
mov
lahf
jg
js
push
jae
mov
mov
mov
repnz
mov
inc
or
aaa
add
sbb
pop
jg
aas
and
push
inc
aam
mov
stos
fistp
movs
test
aaa
sar
outs
push
mov
in
test
jnp
jmp
cdq
cpuid
hlt
mov
call
imul
xchg
dec
retf
lahf
dec
mov
xchg
mov
adc
mov
js
jmp
cmps
jge
test
or
sbb
aam
jmp
std
outs
pop
add
lds
lock
xor
mov
adc
clc
jg
adc
add
or
test
fcomp
outs
push
mov
int3
mov
jg
push
or
xchg
add
adc
mov
fcmovnu
fs
cmp
cmp
movs
push
add
test
jae
pusha
sahf
fs
cmc
test
repz
out
xor
mov
test
xor
sbb
jecxz
add
aad
in
fisttp
xchg
mov
enter
xchg
jo
inc
mov
push
mov
int
test
xchg
cmp
inc
imul
adc
aas
jns
js
lahf
push
pusha
inc
bound
mov
adc
cld
inc
in
sub
test
mov
adc
fcom
faddp
ficom
lods
xlat
sbb
adc
xor
lock
repz
ror
bound
inc
call
add
or
sub
leave
pop
xchg
xchg
ja
mov
and
les
xchg
add
popa
rol
clc
push
inc
imul
or
sbb
iret
loopne
frstor
bound
xor
mov
xchg
mov
movs
pushf
inc
push
popf
push
jp
jg
pusha
es
test
xchg
dec
push
dec
cmp
pop
sbb
and
sub
pop
mov
popa
dec
cmp
add
clc
mov
add
jmp
bound
mov
mov
(bad)
data16
jae
pop
aam
or
lahf
dec
loopne
jecxz
pop
and
cwde
add
fs
pop
sub
call
loopne
inc
lahf
jg
shl
test
cmp
sbb
add
cmp
mov
add
and
add
arpl
pop
cmp
adc
push
jmp
outs
add
xchg
stc
sbb
xchg
mov
inc
xchg
ins
out
xor
add
adc
sub
mov
not
and
in
je
and
jl
enter
repnz
xor
pop
jmp
sbb
adc
adc
dec
sub
aam
mov
cmp
cli
pop
gs
pop
nop
dec
xchg
cmp
push
fdiv
or
xor
sub
(bad)
bound
dec
pop
xchg
sub
mov
adc
sbb
ins
mov
in
xchg
sar
in
sub
mov
fdivr
add
cmp
mov
fcmovnbe
in
mov
popf
fld
push
xor
test
pop
fadd
push
div
popa
std
retf
into
ss
push
call
mov
(bad)
int3
xchg
jne
xchg
push
xchg
jecxz
nop
sbb
jge
pusha
mov
fadd
pop
xchg
xchg
mov
xchg
xchg
xchg
add
dec
sbb
jge
sub
ret
mov
ins
and
inc
sub
mov
jg
aaa
inc
xor
pushf
and
retf
mov
mov
push
out
mov
arpl
test
mov
scas
out
mov
cdq
call
inc
outs
int3
out
ret
fcmove
or
clc
test
(bad)
pop
retf
push
push
jp
push
xchg
adc
inc
sbb
jnp
cmc
js
bound
xchg
fsubr
dec
out
xor
sub
ror
movs
jle
jne
xchg
inc
mov
inc
inc
call
retf
movs
sub
adc
aam
adc
jnp
popf
test
and
bound
add
(bad)
mov
aam
lods
test
sub
xchg
lea
cmp
xchg
cmp
ins
daa
xor
test
in
ins
idiv
and
stc
call
fisub
test
and
xchg
or
rcr
dec
cmp
jl
adc
pop
push
jns
enter
aam
mov
test
dec
fbld
loop
mov
cli
shl
sbb
or
xor
cmp
fstp
push
jle
add
mov
mov
mov
mov
inc
cmp
push
dec
movs
xchg
xor
dec
add
je
sbb
xchg
es
pusha
lea
enter
aas
(bad)
je
mov
mov
(bad)
jl
jno
push
jmp
xor
imul
pusha
mov
mov
pop
and
xchg
test
mov
hlt
add
mov
call
adc
scas
lods
ss
sub
loopne
lahf
stos
jmp
aas
xor
hlt
push
(bad)
xor
gs
fs
xchg
adc
sti
cmp
leave
add
fdiv
inc
ss
ret
(bad)
test
adc
sti
xor
jp
cmps
xor
xor
into
enter
cld
adc
test
dec
or
and
icebp
mov
and
xchg
cld
jbe
popf
inc
mov
push
mov
lods
or
xor
in
(bad)
mov
mov
ins
ss
scas
dec
test
jge
test
mov
sub
and
adc
retf
mov
inc
pusha
daa
mov
push
clc
sar
mov
aad
in
mov
data16
popf
(bad)
mov
ror
jbe
and
dec
retf
test
pop
inc
ficom
(bad)
and
les
inc
mov
inc
arpl
out
lahf
enter
mov
add
fldenv
push
add
add
mov
enter
(bad)
mov
push
pusha
ror
pop
ja
dec
lods
xlat
or
push
xchg
(bad)
add
aas
fld
mov
inc
xor
nop
jne
push
lods
mov
sahf
push
push
or
sub
dec
ror
add
jle
xchg
test
out
pop
fistp
rcr
cli
cdq
es
test
dec
call
jg
lea
mov
add
pop
sbb
push
fnsave
int3
test
cmp
mov
adc
push
ins
jg
or
clc
fs
pop
sub
add
fstp
test
lahf
ret
dec
imul
xor
fwait
cmp
xchg
dec
xchg
xchg
push
retf
js
jecxz
cmp
xlat
jno
ja
pushf
and
mov
les
outs
lods
call
outs
add
jl
cmc
inc
sbb
sahf
arpl
add
push
sbb
shr
jmp
adc
xor
and
jg
pusha
nop
mov
sub
pushf
push
(bad)
je
pushf
mov
mov
cmp
push
dec
jmp
mov
push
xchg
js
xor
mov
or
lds
inc
inc
jp
fs
mov
call
dec
stos
out
(bad)
stc
or
ficom
bound
pop
sub
push
sbb
push
mov
bound
call
push
inc
fist
ficom
xchg
inc
lahf
pop
add
dec
test
outs
in
sar
sbb
or
mov
pop
add
aaa
or
cmps
dec
mov
cmp
fcom
inc
jmp
add
inc
clc
(bad)
adc
push
das
arpl
sti
xchg
loope
and
cs
pop
cmp
(bad)
mov
sbb
pop
fisub
cli
pop
pop
adc
lods
jg
mov
sub
fcomip
cdq
shl
xor
pusha
adc
(bad)
sti
les
jo
sub
and
sub
test
jnp
xlat
mov
xor
(bad)
mov
xor
xchg
and
inc
add
enter
popf
(bad)
pushf
push
int3
and
push
cmps
cmp
pop
jecxz
adc
sbb
xchg
or
test
mov
in
inc
push
inc
icebp
sahf
movs
dec
xchg
jp
rcl
jmp
sbb
lds
jbe
repz
fisttp
dec
jb
out
jmp
adc
sbb
bound
mov
arpl
jl
add
jno
mov
mov
inc
sbb
into
add
sub
ss
adc
mov
jl
mov
enter
(bad)
dec
sbb
bound
daa
leave
repnz
stos
or
in
jg
outs
mov
sub
loop
pusha
test
fsub
popf
inc
movs
xchg
out
mov
lods
outs
jecxz
lods
cld
sbb
scas
and
or
lods
and
dec
loop
sbb
loop
mov
push
mov
ja
mov
cs
push
not
(bad)
sub
in
aam
aaa
call
sti
popf
mov
xor
jmp
push
inc
fsubr
jl
addr16
fsubr
cdq
scas
sbb
stc
dec
aas
mov
jmp
call
cmp
rcr
mov
std
addr16
(bad)
enter
jne
mov
inc
cmps
adc
push
clc
shl
xchg
lahf
or
inc
hlt
push
jg
inc
cmp
nop
or
xchg
jo
sbb
and
dec
and
ds
cmp
push
clc
jg
call
dec
mov
repz
lds
adc
arpl
and
pop
cmp
mov
dec
fdiv
xchg
(bad)
(bad)
retf
jp
mov
rcr
call
xchg
sub
(bad)
cmp
arpl
sahf
add
sub
add
clc
and
add
in
and
lds
xchg
xchg
push
jge
arpl
inc
cmps
je
inc
xchg
inc
ss
add
mov
mov
sbb
sub
ins
push
cmp
xor
sahf
pop
push
das
adc
cmp
cmp
jl
pop
mov
out
enter
retf
ja
test
mov
or
mov
xchg
test
jmp
aam
loop
repz
pop
and
add
pop
sbb
jne
gs
imul
add
mov
rcr
sub
bound
cwde
xor
test
xchg
je
and
xor
cmp
lahf
jg
xchg
loopne
popa
push
lods
pusha
adc
daa
mov
xor
dec
sbb
add
xchg
aam
mov
pop
cdq
pop
jb
(bad)
data16
cmp
stos
cmps
stos
mov
pusha
jmp
jne
sbb
xchg
cmp
test
out
cmps
xor
mov
imul
jg
xchg
addr16
nop
dec
pop
xchg
fs
or
push
xchg
and
cmp
inc
cmp
popf
dec
arpl
fld
sti
mov
(bad)
fld
mov
ret
ret
int
sbb
pop
or
mov
imul
sbb
xor
fst
in
jle
into
jecxz
ins
add
add
pop
dec
cmp
push
pushf
hlt
sbb
dec
daa
or
add
jg
mov
mov
dec
add
dec
hlt
mov
fld
sbb
outs
push
clc
je
mov
adc
mov
push
push
stos
mov
mov
push
add
es
test
cs
push
fisubr
or
push
xor
adc
and
lahf
adc
fist
push
jb
xchg
pop
stc
test
shl
pop
test
push
sar
adc
push
scas
jg
das
in
(bad)
sub
mov
dec
add
loopne
pop
ins
mov
ss
icebp
ja
push
xor
inc
aam
rcl
xor
mov
aaa
sub
mov
shl
call
dec
test
lods
jg
lahf
aam
mov
jae
add
add
mov
pusha
xchg
mov
xchg
sub
pop
out
ins
scas
pop
or
xchg
inc
cwde
dec
clc
adc
mov
imul
popf
cmp
movs
mov
(bad)
xchg
into
cdq
adc
sahf
fwait
cwde
arpl
mov
jg
inc
adc
sbb
push
pop
push
adc
jno
jg
and
rep
adc
je
jp
cmps
pop
xor
jmp
test
mov
add
xlat
ds
test
aas
or
mov
cmps
loop
adc
jg
lock
out
or
js
(bad)
ja
stos
repz
clc
shufps
add
xor
pop
xchg
and
hlt
jmp
push
pusha
cdq
add
cmp
ror
xor
clc
push
dec
mov
or
mov
push
xchg
outs
sahf
push
ins
push
(bad)
jg
dec
retf
je
stc
lahf
pop
clc
ret
pop
les
or
psrad
mov
push
mov
das
sub
jae
sub
jmp
jmp
icebp
pushw
push
js
in
pop
mov
daa
and
iret
or
mov
imul
mov
popa
jae
dec
sti
mov
clc
frstor
sub
pop
popf
pop
xchg
mov
retf
xor
fdiv
add
rcl
or
outs
jo
rcl
rcl
pop
ss
retf
test
push
xchg
outs
and
sbb
xchg
jmp
push
add
jp
and
xor
sbb
rcl
out
xchg
lods
repnz
fidivr
inc
movs
push
pop
jg
sbb
mov
rcl
mov
push
out
es
push
sbb
mov
(bad)
data16
data16
mov
shl
mov
clc
mov
daa
inc
and
dec
push
push
bound
jg
mov
xor
ret
sbb
or
mov
push
or
cwde
sbb
jp
(bad)
pop
outs
out
fimul
pop
(bad)
mov
and
or
(bad)
ror
frstorw
inc
or
cmp
(bad)
(bad)
out
mov
jl
shl
or
loopne
push
jg
dec
out
mov
leave
sbb
retf
push
pop
test
call
pusha
add
(bad)
mov
inc
div
test
es
sub
imul
xor
and
jmp
xchg
push
jbe
jle
mov
or
adc
sub
rol
mov
sbb
push
mov
add
jg
call
int
(bad)
mov
mov
xchg
pop
mov
jmp
stc
mov
jecxz
add
mov
mov
mov
(bad)
jnp
rcl
test
test
fdivr
jo
xchg
pop
rcl
mov
jp
sbb
aam
pop
and
icebp
test
int3
movs
cld
mul
rcr
pop
out
pop
xchg
aaa
test
xchg
mov
call
and
inc
out
mov
mov
xor
pop
cmp
out
or
and
push
xor
(bad)
lock
adc
mov
mov
push
xchg
pop
aaa
imul
movs
das
int
cmps
sbb
push
pop
pop
jnp
cmps
ret
jg
push
xor
sahf
push
pop
loopne
aam
pushf
popa
addr16
call
fsub
in
test
mov
pusha
jno
enter
repz
mov
je
sub
push
shl
add
pop
rcl
mov
cmps
enter
test
xor
mov
clc
(bad)
dec
repz
mov
ficom
mov
(bad)
jno
repnz
loopne
mov
movs
fst
pop
cmps
mov
or
fcom
and
cmps
inc
mov
mov
cmps
dec
sbb
push
fsubr
and
pop
pop
jge
mov
mov
mov
add
xchg
push
xchg
out
sbb
mov
(bad)
or
sub
nop
xchg
int3
dec
aam
ss
or
(bad)
push
xlat
fsub
fadd
sbb
lock
mov
pop
outs
cmp
ins
lahf
cmp
push
fcmovnbe
mov
pop
mov
mov
enter
loopne
xchg
daa
ja
mov
lahf
xor
push
mov
mov
mov
lock
pop
add
mov
pop
xchg
fild
xor
mov
mov
adc
lods
pop
in
rcl
aam
xchg
push
mov
enter
adc
adc
pop
addr16
or
jp
jg
pop
shl
popa
inc
ja
mov
add
jb
loopne
fdiv
std
jg
xor
or
(bad)
mov
mov
xor
inc
or
sbb
addr16
icebp
xchg
jne
pushf
xor
sahf
cmp
push
cli
mov
or
mov
test
in
cmp
sub
adc
popf
test
das
adc
pop
push
lods
and
cdq
adc
popf
or
inc
pop
add
repz
pop
push
jo
dec
cs
(bad)
in
movs
mov
loope
pop
xchg
mov
mov
mov
cdq
push
pop
aaa
rcr
loopne
or
sbb
jo
(bad)
push
mov
mov
test
jg
(bad)
outs
sbb
inc
shl
fisttp
dec
shl
in
xchg
pop
sbb
enter
cwde
jge
push
call
cmp
loop
stc
mov
jnp
mov
pop
mov
inc
and
fwait
rcl
js
pop
rol
push
enter
pop
pushf
popf
xor
xchg
nop
movs
jecxz
add
mov
shl
mov
ds
pop
in
lock
leave
ret
dec
sbb
(bad)
neg
add
inc
mov
push
xchg
ja
data16
sub
push
imul
jbe
xchg
mov
fsubr
pop
ret
sbb
ret
scas
ins
and
mov
push
add
fwait
retf
push
lds
jp
inc
xlat
sub
out
pusha
mov
pushf
xor
aad
mov
and
dec
js
push
xchg
in
jno
dec
mov
cdq
xlat
cdq
cmps
mov
imul
bound
int
mov
adc
xchg
out
xchg
xor
hlt
push
es
test
xor
dec
jle
into
inc
or
cmps
jmp
jmp
or
aam
lods
sub
gs
pushf
and
pop
sub
push
cmp
rol
fwait
adc
dec
and
sahf
and
mov
mov
ss
xchg
ficom
call
push
pop
push
retf
mov
pop
mov
inc
aaa
ret
mov
xor
lds
pop
push
hlt
in
inc
cmp
mov
mov
or
pop
(bad)
lds
jg
lds
or
dec
loopne
je
out
sub
push
inc
test
mov
(bad)
pusha
pop
rol
mov
call
hlt
sub
dec
mov
jb
inc
test
mov
xchg
xchg
adc
sub
mov
xlat
mov
cld
add
out
popf
(bad)
lea
and
mov
or
nop
dec
pop
lock
mov
aad
push
mov
and
fidiv
stos
add
sub
leave
out
mov
pusha
dec
repz
mov
retf
adc
shl
enter
push
dec
in
add
icebp
inc
push
out
fsub
push
jmp
add
js
mov
inc
lahf
mov
into
dec
push
cwde
enter
push
push
add
test
and
jge
movs
xor
ins
sbb
cmp
dec
jbe
mov
dec
in
cmp
xchg
push
add
loope
pop
(bad)
dec
fldcw
call
jno
pop
lahf
and
mov
mov
ja
sbb
in
inc
mov
jecxz
lea
pusha
clc
mov
mov
pop
movs
pop
jg
movs
call
ds
mov
retf
aas
mov
cmp
popf
jb
pop
xchg
shr
mov
mov
inc
pop
dec
cs
lods
sbb
fwait
shr
dec
sahf
fimul
push
into
xchg
xchg
xor
ficom
arpl
popa
dec
cmp
push
retf
clc
sub
ret
xor
adc
pop
xchg
inc
jnp
jp
adc
pusha
(bad)
cld
dec
int3
add
xor
xchg
inc
call
or
mov
sub
in
int3
push
(bad)
jl
sbb
add
popf
or
stos
adc
push
mov
std
call
fmul
push
adc
and
idiv
mov
mov
pop
fstp
sbb
pop
cdq
leave
test
xor
icebp
pop
jo
adc
xchg
movs
jg
xchg
inc
pop
inc
(bad)
mov
mov
fisttp
jg
xor
mov
inc
fmul
inc
test
push
ins
mov
sub
push
push
xchg
fdiv
ins
dec
mov
(bad)
cmp
sub
xchg
jmp
leave
and
test
jmp
aad
add
and
data16
mov
mov
faddp
(bad)
enter
jg
push
pop
add
ficomp
or
retf
test
pop
mov
mov
xchg
fidiv
fild
mov
mov
ins
aas
dec
lods
mov
adc
mov
stos
adc
add
in
or
(bad)
sbb
push
adc
mov
and
push
iret
inc
mov
mov
sbb
or
inc
arpl
retf
rcl
cmp
pop
data16
inc
push
push
inc
xor
test
call
pop
aam
sub
dec
mov
pop
idiv
pop
push
mov
adc
in
cs
xchg
and
ror
retf
dec
cli
imul
pop
xchg
(bad)
xchg
imul
pop
enter
adc
push
je
mov
dec
or
xchg
cmc
cdq
push
mov
fnstsw
push
xchg
xchg
jne
retf
in
xor
xchg
cwde
call
push
jns
ffree
mov
and
pop
sub
xor
sbb
retf
xchg
hlt
cwde
jg
pusha
add
xchg
mov
(bad)
and
mov
inc
mov
xchg
pop
adc
sbb
and
mov
pop
pop
jo
outs
or
cmp
ins
dec
jl
and
push
shl
add
xchg
ret
push
sbb
cs
(bad)
mov
mov
mov
adc
ret
xchg
mov
pop
sub
gs
adc
jge
jns
mov
pushf
cmps
dec
cld
xor
pop
gs
xchg
cmp
aas
scas
into
mov
mov
push
lods
aam
xchg
push
nop
ret
in
sub
adc
adc
jg
jne
ja
xor
add
sub
mov
pushf
adc
cmp
call
loop
cmp
jmp
sub
mov
sbb
cdq
cmp
sbb
xchg
sbb
jmp
fiadd
aaa
or
hlt
rcr
frstor
and
imul
js
push
or
and
add
mov
add
sub
stc
jecxz
test
ins
test
fcom
cwde
inc
push
sbb
je
add
test
bound
mov
fs
aaa
cld
fmul
push
push
sbb
dec
xor
push
push
pop
ror
ret
or
out
pushf
and
retf
xor
jg
or
addr16
ffreep
out
mov
jns
mov
dec
enter
sbb
mov
xchg
xor
retf
into
push
out
mov
cdq
sub
shl
pushf
shl
sar
fs
into
(bad)
das
into
xchg
lods
pop
cdq
sbb
imul
inc
loopne
jmp
js
jo
mov
xchg
sub
jo
xchg
mov
xchg
dec
retf
fwait
pushf
mov
ret
sbb
sub
into
int3
das
xlat
pusha
dec
repz
mov
pop
jl
xlat
push
jp
dec
je
repz
call
aam
xor
ret
sub
push
lods
(bad)
sub
push
mov
sub
push
adc
fs
iret
into
xlat
jg
push
jo
mov
std
mov
xchg
mov
push
in
ins
call
test
add
adc
or
sbb
pusha
xchg
adc
stos
adc
cmps
add
mov
in
int3
test
xchg
fwait
add
scas
sub
mov
bound
xchg
test
xor
jo
push
ins
add
js
pop
dec
in
(bad)
and
in
arpl
sbb
xchg
rol
cmp
jnp
push
adc
cmp
add
movs
pop
test
cwde
sbb
and
daa
dec
cld
jmp
imul
inc
movs
sbb
movs
and
jae
out
mov
xchg
cs
movs
inc
pop
pop
jae
cmp
sub
sub
mov
sete
push
and
gs
push
cmp
push
or
push
mov
inc
mov
pop
pop
xor
sahf
cdq
mov
jg
das
in
retf
pop
mov
sbb
push
xchg
mov
rol
shl
pop
repnz
push
sub
and
jns
cs
push
inc
test
mov
push
pop
push
adc
sbb
push
aas
dec
xchg
push
bound
rcr
(bad)
adc
push
je
cmp
jns
or
lods
cdq
pop
fs
leave
xchg
cmps
fnstcw
ret
shl
xlat
jg
inc
cwde
adc
test
test
loope
push
scas
push
add
mov
jg
push
cli
out
jnp
ins
rcl
mov
aam
inc
fwait
adc
mov
jmp
das
shl
(bad)
and
in
cli
out
adc
or
sub
mov
jg
inc
xchg
jp
(bad)
jmp
sbb
clc
jae
inc
mov
push
jbe
or
sbb
mov
or
retf
mov
aam
icebp
pusha
les
shr
xor
pop
loope
(bad)
fidivr
pushf
push
mov
jnp
adc
dec
sub
les
(bad)
into
lds
movs
je
fdiv
dec
xchg
pushf
mov
dec
movs
addr16
outs
movs
sbb
mov
push
cwde
in
adc
sbb
inc
(bad)
xchg
mov
mov
std
(bad)
fldl2t
jmp
xchg
inc
pop
dec
sub
xchg
pop
daa
cmp
test
stos
in
cwde
fst
xor
jecxz
sbb
and
cwde
jo
add
retf
arpl
or
sbb
push
adc
mov
xchg
push
loope
stos
dec
pop
sub
test
jb
cmp
cwde
pushf
daa
pop
cmp
data16
cwde
pop
cs
push
cmp
dec
mov
ja
sub
jns
outs
jmp
cmp
pop
rol
mov
fisttp
mov
add
test
sbb
mov
xchg
dec
in
pop
sti
and
cwde
aaa
es
std
frstor
xor
push
fild
cwde
mov
sbb
test
loopne
cli
xchg
and
or
pop
inc
sub
push
rcr
add
cmp
xchg
movs
popf
bound
gs
outs
cwde
pushf
data16
xchg
rcr
cwde
sub
fmul
cwde
sbb
or
inc
or
cwde
jp
mov
cmps
xchg
xor
loopne
loop
xchg
ds
sbb
punpckhbw
cwde
lahf
mov
test
xchg
mov
pushf
cdq
jle
fdiv
int
xchg
(bad)
cli
jl
adc
xchg
stc
xchg
call
ss
push
jo
mov
sahf
retf
lds
pop
loope
add
push
icebp
repnz
inc
test
or
pop
sub
call
and
mov
nop
ss
clc
sub
xchg
arpl
pushf
mov
cmp
xchg
pop
and
pop
fcomp
inc
push
call
push
and
imul
xchg
jl
imul
pushf
push
or
aaa
adc
dec
clc
enter
adc
cwde
push
in
push
sub
xchg
cmp
ficomp
or
xchg
mov
mov
mov
fcomp
inc
jle
call
retf
rcl
ror
test
aas
jae
dec
pop
shl
mov
pop
std
mov
jb
push
pop
popa
sub
pop
pop
and
mov
mov
add
push
addr16
in
shl
cwde
cmc
(bad)
or
inc
test
out
iret
xor
push
xor
test
mov
mov
ins
cwde
lods
mov
xchg
ret
ror
mov
mov
mov
test
stos
xchg
jno
mov
cmps
(bad)
stc
fcom
jmp
cwde
enter
leave
movs
mov
dec
jne
mov
xor
outs
out
add
adc
cwde
xor
into
ffreep
cwde
fsubp
cmc
push
sbb
aas
inc
xchg
push
pop
and
fisubr
cwde
cmps
mov
add
cwde
mov
jl
pushf
cmps
mov
cwde
stos
cld
or
out
jb
ss
lods
mov
outs
rol
test
cli
int3
push
xchg
sub
enter
xlat
loop
test
es
cmp
fimul
inc
jmp
stos
pop
repnz
and
xor
fwait
mov
xchg
mov
retf
push
cmp
xor
dec
(bad)
int
ins
mov
lods
out
call
cld
cs
outs
mov
adc
call
pop
sbb
xchg
inc
lods
mov
push
jg
add
add
mov
add
ret
aas
add
lahf
dec
or
popf
xchg
mov
cmp
mov
jg
sub
cwde
aaa
xlat
xor
jbe
mov
out
push
in
push
out
cwde
loope
out
add
mov
test
mov
xchg
dec
push
popa
xor
and
stc
ret
sti
add
in
dec
sbb
xlat
test
jb
cmp
add
sbb
call
xchg
cdq
gs
popa
repz
rcr
rol
sub
cmp
pop
je
inc
push
jp
dec
sahf
outs
xchg
cwde
xchg
mov
xchg
aam
mov
push
dec
pop
mov
arpl
ins
inc
cwde
sahf
out
mov
mov
cdq
popa
mov
(bad)
xchg
xchg
mov
mov
xchg
xchg
call
xchg
add
mov
mov
aad
sahf
mov
lds
stos
xchg
jb
sbb
pop
test
and
mov
ins
lock
sbb
pushf
jg
fsub
add
test
cmp
push
hlt
push
xchg
pop
sbb
scas
add
mov
aad
mul
lds
jge
jb
fcmovb
repz
mov
outs
aam
and
mov
mov
pop
(bad)
adc
pop
cmp
mov
push
aam
or
cwde
ds
add
add
push
push
pop
popa
icebp
push
test
mov
xor
adc
popa
dec
xchg
cwde
mov
les
xor
jp
outs
fwait
push
(bad)
stos
fisub
fisub
cdq
icebp
jl
pop
mov
into
xor
mov
push
jmp
mov
or
mov
jg
ficom
and
lea
pop
xchg
cmp
dec
dec
int3
mov
call
data16
popf
mov
div
inc
scas
xchg
fs
movs
dec
xchg
data16
xchg
xchg
push
es
jmp
cmp
sub
jp
repnz
cld
popa
mov
mov
mov
xchg
cmp
(bad)
add
jmp
fwait
pop
mov
ror
in
sbb
in
or
sub
mov
sub
and
jg
jp
mov
pop
and
sbb
mov
rcr
push
cmp
jb
adc
das
cwde
into
stc
pop
test
fs
ds
sub
or
shl
push
sub
jp
mov
addr16
push
test
add
mov
pop
jg
ret
cs
mov
or
aas
push
enter
xor
xor
adc
stos
mov
fistp
xor
inc
(bad)
or
je
out
icebp
inc
push
adc
xchg
inc
inc
push
dec
test
pop
ret
ret
int3
scas
push
jg
lock
shl
and
mov
jmp
push
xchg
jne
adc
loop
xchg
dec
dec
nop
cdq
pop
sub
push
stc
scas
add
outs
test
daa
push
and
or
mov
imul
(bad)
dec
repz
mov
mov
jmp
mov
push
pushf
test
fisttp
cmp
adc
jnp
not
xor
sar
xchg
add
outs
or
aad
pop
push
fdivr
fisub
dec
ss
push
fisttp
pop
test
clc
jb
mul
int3
and
or
jns
cwde
movs
scas
ins
stc
xor
xor
pop
fcom
jg
sub
int
xchg
sub
add
mov
push
imul
jmp
stc
sub
mov
push
jo
cmps
fdecstp
sub
xor
lods
lods
jle
(bad)
or
xchg
(bad)
movs
sub
shl
xchg
mov
outs
rol
add
cmp
xchg
out
xchg
xchg
mov
pop
(bad)
dec
mov
ret
jle
out
jg
pop
adc
stos
stos
push
push
clc
jle
mov
xchg
mov
rol
xchg
icebp
xchg
int3
mov
or
hlt
xchg
xchg
fwait
pop
and
test
shl
mov
add
fmul
mov
jo
cmps
adc
test
jne
mov
dec
add
inc
sub
mov
(bad)
cmp
int
or
cs
pop
ins
jbe
jmp
test
repz
push
lds
push
push
pop
setnp
js
movs
cwde
retf
int3
or
sub
js
jo
test
push
mov
int
sbb
push
stos
jg
in
cwde
mov
movs
adc
push
scas
sub
lods
xchg
or
mov
scas
cwde
hlt
(bad)
sahf
jae
jnp
pushf
cwde
adc
mov
xchg
fistp
cwde
arpl
in
clc
xor
and
xchg
in
pushf
jns
xlat
push
push
mov
cwde
mov
imul
xchg
std
test
inc
cwde
sub
adc
add
jl
icebp
idiv
fldcw
ss
pop
sub
mov
test
(bad)
stos
xor
cmp
add
sbb
add
je
mov
movs
or
loopne
test
cmp
dec
sbb
push
cmp
mov
xchg
mov
fld
and
xlat
mov
retf
jge
test
mov
mov
and
or
xchg
inc
mov
addr16
sbb
(bad)
(bad)
lods
(bad)
scas
jmp
repnz
push
in
(bad)
sbb
sub
mov
add
mov
into
in
or
mov
fstp
adc
mov
ja
push
mov
test
(bad)
aaa
cwde
or
jle
xlat
stos
fdivr
cwde
xchg
test
sub
fdiv
call
mov
adc
jo
mov
dec
sub
jae
cwde
mov
fs
xchg
retf
sbb
sub
jae
jmp
and
into
jmp
popf
push
in
cwde
sub
inc
push
dec
push
jno
test
jo
xchg
sub
hlt
out
arpl
pop
fmul
inc
xlat
nop
adc
les
pop
lds
test
pop
or
jo
xchg
mov
int3
add
mov
sub
cbw
mov
iret
cwde
push
call
mov
add
jnp
xchg
sbb
mov
cdq
or
xchg
leave
mov
retf
lds
sbb
lods
mov
retf
loopne
pop
sub
mov
jno
push
dec
in
sbb
(bad)
xchg
mov
pop
ds
inc
sbb
mov
push
mov
sub
loop
call
imul
imul
mov
add
pusha
sub
xchg
pop
jg
cmp
inc
adc
aas
mov
cmps
mov
test
mov
mov
mov
inc
xor
adc
mov
jg
dec
fcomp
push
ret
xchg
loopne
cmps
ret
(bad)
sbb
xchg
and
out
mov
xor
les
push
fistp
xchg
call
push
sbb
loope
sbb
stos
xchg
out
xchg
and
mov
push
loopne
push
(bad)
in
dec
cdq
mov
ins
sbb
adc
popf
cwde
movs
xchg
sbb
xor
jo
xor
sbb
pop
test
add
inc
xor
je
or
sbb
cwde
cmp
push
inc
js
cmps
cwde
out
pop
adc
push
add
out
pop
adc
or
xchg
push
stos
dec
cmp
cwde
or
xor
(bad)
cwde
rcr
loope
cmp
imul
sub
and
mov
xchg
jcxz
cmp
neg
pop
sub
(bad)
(bad)
(bad)
sti
ret
adc
icebp
out
les
frstor
xlat
pop
lock
jle
cdq
sbb
sbb
add
movhps
xchg
clc
scas
mov
mov
jecxz
adc
cwde
jne
and
push
jl
addr16
jecxz
in
or
ja
xor
adc
cwde
push
cmp
push
es
sub
pop
cmp
aaa
xchg
jp
lods
push
in
cwde
data16
bound
shl
jns
lea
out
inc
or
cwde
imul
mov
aas
inc
pop
ja
mov
icebp
dec
xchg
dec
lea
shl
adc
out
cdq
dec
es
arpl
in
fdiv
cwde
fwait
xchg
jg
mov
retf
add
jmp
push
in
in
xchg
push
jae
mov
add
in
cwde
retf
mov
call
sbb
inc
movs
jae
cwde
daa
cmps
(bad)
cli
mov
cwde
xor
mov
push
xchg
and
inc
sbb
cmp
bound
cwde
jb
imul
cs
popf
add
jg
mov
pop
push
mov
dec
mov
xlat
lods
lds
push
add
les
push
dec
ret
rcr
lods
mov
cld
adc
xor
xor
mov
mov
pop
pop
(bad)
xchg
sahf
cwde
jns
cmp
int
enter
fcmovne
test
repz
std
jmp
xor
or
cwde
push
xor
mov
push
jns
and
cwde
(bad)
push
push
push
dec
push
and
call
(bad)
jmp
leave
inc
or
add
xchg
cmc
ins
gs
cmp
cdq
jnp
jg
adc
imul
sbb
icebp
cwde
int
fwait
lea
dec
push
popa
xor
sahf
jmp
jecxz
fcmovb
movs
cmp
add
xor
or
sti
rol
fucomip
inc
aas
push
dec
mov
add
cwde
push
shl
clc
dec
or
jb
xchg
mov
icebp
lds
or
clc
cdq
mov
enter
or
frstor
xor
call
lahf
test
mov
xchg
jp
jb
mov
fmul
xor
fidiv
sbb
adc
xchg
loopne
aad
fmul
inc
cwde
inc
fwait
adc
xor
sbb
cs
dec
push
pop
xor
mov
mov
(bad)
fsubr
aam
push
jb
jmp
sub
and
call
stos
fidivr
push
mov
mov
mov
retf
mov
jg
push
call
adc
scas
test
mov
jb
mov
(bad)
stc
dec
in
push
mov
mov
sti
outs
fimul
clc
fnstsw
jg
das
scas
xor
adc
add
imul
loopne
jmp
fnstenv
add
cmp
mov
sub
xchg
mov
(bad)
stos
sbb
aas
xchg
(bad)
call
(bad)
mov
mov
cwde
mov
clc
enter
jecxz
inc
sub
jo
jno
mov
cwde
ret
retf
repz
movs
mov
mov
test
fnstsw
mov
clc
sbb
mov
in
mov
jae
icebp
je
out
frstor
inc
nop
cwde
sahf
mov
mov
aad
repz
cmp
push
aas
or
js
clc
pop
popa
xchg
jl
bound
mov
cwde
push
shr
cwde
jge
ds
aas
sbb
stos
sub
inc
dec
pop
aas
push
dec
or
cwde
push
in
fxch
(bad)
sub
push
sub
mov
mov
aas
test
rcr
jg
clc
call
lds
pushf
mov
sub
pop
sub
in
sbb
shr
out
sysexit
mov
aaa
enter
push
dec
pop
jp
mov
mov
les
xchg
or
pop
push
out
adc
test
nop
mov
push
es
cmp
movs
mov
ss
test
outs
inc
adc
in
mov
adc
cli
mov
pop
hlt
xor
je
cmp
test
or
pop
mov
sub
push
or
retf
iret
inc
aad
mov
mov
shl
cmps
push
xor
ret
iret
dec
mov
mov
sahf
gs
sub
xchg
mov
sub
mov
lea
daa
dec
iret
push
mov
lea
and
stos
test
mov
cmps
ins
xchg
mov
outs
pop
push
(bad)
aad
daa
sar
movs
icebp
sub
pop
fidiv
mov
push
mov
jecxz
mov
mov
jl
mov
or
push
pop
mov
pop
jmp
jge
(bad)
dec
pop
pop
sbb
inc
mov
adc
xor
hlt
ins
mov
mov
xor
div
lds
sub
cld
mov
push
into
ret
sub
mov
dec
mov
mov
inc
add
mov
arpl
es
div
mov
mov
push
enter
mov
jmp
jg
mov
xchg
in
cdq
sbb
adc
jne
outs
pusha
cmp
ins
jmp
push
int
ja
cwde
mov
and
mov
clc
push
pop
test
clc
mov
pop
ins
retf
jno
push
sbb
retf
and
nop
inc
mov
push
add
ficomp
cwde
inc
xchg
arpl
adc
outs
or
add
adc
lods
mov
sub
cwde
(bad)
rol
loopne
call
xor
push
sub
mov
fstp
test
loop
cmp
pop
fs
xchg
aam
pop
cmp
in
or
aaa
cwde
fdiv
cmp
xchg
call
sbb
dec
push
pop
and
ret
js
or
call
jb
adc
les
pop
lods
or
push
mov
cwde
jns
call
xchg
sbb
outs
cwde
stos
xchg
scas
mov
add
mov
sahf
push
mov
mov
aas
cmps
add
add
jmp
cmp
fdivr
fs
cwde
dec
(bad)
dec
mov
loop
xchg
test
ins
jmp
push
sbb
lock
cmp
mov
test
inc
adc
pop
sub
mov
cmp
std
push
cmps
cwde
mov
test
mov
rcr
(bad)
cwde
imul
mul
xor
je
xchg
mov
sahf
fdivr
mov
cwde
dec
xlat
mov
sbb
inc
bound
data16
cwde
sub
stos
mov
mov
sub
jle
mov
push
sub
lods
inc
div
sub
cdq
push
cld
lock
fmul
jbe
jl
cwde
int
push
push
jl
or
jg
sbb
or
xor
in
data16
dec
mov
push
in
cwde
push
popf
jmp
mul
outs
sbb
enter
adc
jne
jmp
or
sbb
fld
into
icebp
mov
dec
test
movs
pushf
fiadd
fwait
jo
mov
xchg
out
sub
dec
jmp
cwde
sti
leave
imul
xchg
(bad)
lods
cwde
pop
or
xchg
popa
jmp
gs
add
dec
mov
adc
jne
cwde
inc
js
iret
dec
lock
cwde
pusha
and
in
jecxz
cwde
mov
push
lock
jecxz
popa
inc
add
xchg
or
in
repnz
jge
clc
gs
pusha
sub
jle
pop
das
mov
cmp
scas
(bad)
cwde
je
mov
dec
or
push
push
mov
stos
cwde
lahf
jmp
sbb
inc
daa
pusha
and
test
cwde
(bad)
fistp
adc
inc
cwde
jge
test
push
xchg
ds
sub
pusha
imul
mov
rcr
js
out
(bad)
repz
fnsave
xchg
cmc
jb
ror
mov
or
add
enter
ret
stc
xchg
dec
sub
inc
mov
pop
cs
shr
aas
cwde
sub
adc
popf
imul
cwde
outs
std
cdq
dec
sbb
out
xchg
dec
and
(bad)
and
aas
sbb
pop
(bad)
mov
adc
jo
sbb
icebp
mov
cwde
or
imul
cmp
add
xor
jmp
ficomp
jg
pop
shl
mov
mov
cmps
(bad)
das
int3
dec
cwde
pop
push
xchg
dec
pushf
mov
xor
lods
daa
jnp
cwde
sub
stos
pop
int3
jo
fs
call
sub
aaa
das
cwde
mov
or
in
sbb
outs
dec
test
retf
in
xchg
fwait
inc
pop
cmp
xchg
cwde
das
jp
aam
mov
mov
fucomp
mov
mov
push
sub
push
mov
aad
int
in
enter
cdq
xchg
test
xchg
jnp
sub
mov
mov
cs
pop
movs
cwde
mov
out
cli
das
aaa
pop
sti
stos
dec
jb
lock
(bad)
mov
push
test
sahf
dec
popf
outs
jb
pop
cmp
xchg
dec
pop
adc
call
inc
nop
or
inc
or
pushf
stc
jns
push
aam
call
int3
xor
pop
cwde
jo
pop
call
cwde
mov
in
fld
pop
push
adc
jmp
addr16
shr
call
inc
sti
sub
cwde
scas
add
sub
mov
retf
shr
xchg
sti
sbb
neg
mov
lods
xchg
bnd
mov
mov
sbb
xchg
sub
xchg
jg
cwde
gs
xchg
cwde
call
xor
cwde
dec
sub
mov
mov
(bad)
out
mov
call
fst
mov
pop
fs
lods
fisubr
cwde
or
ds
lock
repz
dec
push
mov
not
dec
cbw
xor
mov
jb
ss
dec
mov
cmps
cwde
mov
ret
fisub
mov
jo
test
xchg
ins
xchg
pop
pop
mov
xlat
sub
add
cmp
inc
mov
sti
shr
and
push
test
cwde
imul
arpl
jo
cwde
jecxz
(bad)
xor
push
in
lahf
out
call
inc
cmp
in
sbb
xor
mov
xchg
cwde
jnp
cmp
repnz
sbb
leave
jecxz
lods
and
ror
jp
lahf
push
xchg
rcr
imul
inc
imul
gs
fdivr
xchg
jo
cwde
mov
je
adc
or
js
enter
cwde
sbb
sbb
in
test
cwde
add
out
das
fdivp
in
pop
mov
cmp
(bad)
or
cmps
adc
xchg
pop
dec
pusha
data16
enter
mov
fisub
pop
cwde
arpl
cmp
dec
or
fbld
cwde
lods
shr
cwde
adc
adc
xor
inc
sub
sbb
xor
xchg
test
push
dec
aad
lahf
stc
ret
pop
xchg
lods
mov
call
outs
xchg
movs
mov
call
pop
imul
test
repz
and
mov
js
scas
cmps
rcr
movs
mov
scas
fdivrp
(bad)
adc
cmp
jmp
mov
sub
cwde
js
add
xor
ja
call
xchg
fwait
mov
clc
jno
bound
clc
cli
mov
adc
xor
mov
ret
fmul
xlat
repnz
adc
sbb
push
xchg
lea
jg
sub
mov
ds
cmp
push
pop
jne
adc
and
sub
jg
mov
mov
iret
cwde
mov
in
xchg
jbe
cwde
lea
jge
jnp
xchg
cwde
pop
mov
cmc
and
push
cwde
in
hlt
cmp
push
jle
push
xchg
mov
inc
mov
out
pop
pop
leave
cwde
cmp
mov
(bad)
jmp
jb
int
sbb
cs
jmp
dec
pushf
inc
addr16
or
cwde
cmps
jne
mov
loopne
ins
nop
icebp
enter
push
cwde
loop
inc
jb
cmp
push
xchg
lock
sbb
pop
push
lods
mov
loop
cwde
iret
scas
shl
xchg
add
popf
mov
push
cwde
xor
jne
jl
das
jb
mov
pusha
in
out
fistp
jle
sbb
push
pop
ds
cmp
adc
or
out
cwde
into
xchg
bound
cwde
push
(bad)
cmp
inc
clc
in
out
cwde
sti
mov
add
xor
test
push
mov
fdivr
aad
add
xchg
xchg
xchg
adc
(bad)
imul
cmps
enter
in
xchg
xor
call
in
sbb
fsubr
dec
mov
in
push
icebp
(bad)
sbb
mov
mov
xchg
mov
cwde
adc
mov
jmp
pop
inc
push
inc
pusha
imul
pushf
xchg
dec
cmp
ins
mov
(bad)
adc
push
and
mov
cmp
fisubr
lock
or
inc
sub
jg
loopne
ret
jmp
outs
fwait
js
jbe
fsubr
popf
mov
inc
ds
pop
cwde
cmp
cmp
cdq
mov
cmps
xor
jbe
inc
adc
cwde
cmc
in
jg
scas
int
pop
cwde
or
pop
cwde
push
add
fdivr
gs
icebp
ror
or
adc
nop
retf
push
fs
dec
jp
jno
xchg
cwde
inc
(bad)
leave
loopne
(bad)
fstp
test
push
push
cwde
pop
jbe
dec
pop
popa
dec
xchg
push
and
lods
pop
clc
mov
mov
daa
jne
mov
pop
sbb
in
dec
je
enter
popf
enter
dec
push
mov
sti
xchg
call
push
jb
mov
push
retf
mov
push
xchg
lods
mov
mov
cwde
push
call
ins
or
jl
int
in
cwde
add
xchg
es
aaa
sbb
pop
push
sub
pop
dec
scas
push
arpl
sbb
mov
retf
sub
push
fs
mov
xchg
stc
call
pop
push
loop
cwde
jnp
dec
push
ins
jb
mov
inc
movs
add
push
cmps
xchg
mov
mov
jg
scas
push
inc
mov
stc
fmul
sbb
rep
ins
jge
es
mov
popa
fwait
or
(bad)
cmp
inc
sub
xchg
sub
(bad)
dec
sbb
add
dec
xchg
bound
dec
ret
jmp
cmp
pop
or
add
mov
add
arpl
cmp
ja
(bad)
mov
mov
les
cdq
ror
icebp
mov
and
push
adc
xchg
lahf
adc
cli
sti
ins
lods
mov
nop
vcvtsd2si
cmp
cmp
add
add
ins
mov
fsubr
or
data16
or
push
xor
adc
or
push
sbb
adc
aas
test
cwde
cmp
popa
cdq
cwde
dec
icebp
adc
xchg
mov
aam
mov
hlt
fnstenv
pop
je
inc
stos
(bad)
aad
fsub
mov
dec
popf
fcom
and
push
test
je
cmp
mov
stc
ret
cld
cwde
ret
std
in
fnstenv
inc
lods
aas
or
loope
mov
aad
sbb
in
das
shl
js
int3
int
or
aas
aam
push
xor
scas
adc
mov
pop
xchg
cmp
cwde
mov
inc
aam
cwde
dec
retf
shl
ins
sbb
repnz
adc
jp
mov
scas
jne
inc
aad
push
int
mov
and
call
enter
inc
imul
cwde
inc
shl
cdq
cmp
mov
inc
or
xchg
test
aad
jp
pop
xchg
and
sub
js
sbb
xchg
stos
retf
test
cli
ret
icebp
sbb
daa
aas
ins
jbe
pop
pop
mov
mov
jecxz
shr
hlt
or
sub
add
aas
push
sbb
xor
je
cwde
jp
mov
shl
mov
(bad)
(bad)
jle
ja
dec
pop
fstp
pop
lea
int3
imul
xor
ret
inc
in
cwde
(bad)
cld
pop
out
xor
or
call
popa
jge
mov
pop
mul
sub
mov
arpl
jge
(bad)
sub
call
jns
lds
cwde
push
sbb
nop
inc
mov
cwde
push
fld
rcr
call
add
push
adc
out
cs
fs
je
xchg
shl
into
xchg
dec
test
mov
(bad)
pop
sub
xchg
push
ins
pop
sahf
pop
sub
rcl
dec
sbb
mov
push
lock
pop
mov
mov
std
jmp
ja
js
sbb
icebp
xlat
add
scas
cmps
stos
xchg
adc
xchg
fwait
or
xchg
cmp
mov
pop
loopne
int
pop
inc
inc
jmp
rcr
out
push
push
inc
test
cmc
ins
xchg
clc
sub
or
jmp
jo
imul
push
add
mov
fsub
and
pop
not
pop
xor
outs
and
sbb
jns
or
cwde
(bad)
clc
ret
add
mov
dec
out
xchg
pusha
jmp
sbb
fwait
jb
(bad)
sbb
dec
mov
lods
ds
or
dec
adc
test
mov
mov
into
sbb
or
push
ins
jp
mov
test
xchg
stc
xor
mov
aad
ret
jecxz
aas
sahf
and
or
xchg
pop
push
cdq
xchg
cmp
inc
xchg
inc
adc
div
xchg
mov
or
aam
sub
call
mov
xor
pop
mov
mov
mov
push
mov
mov
aam
mov
xchg
lods
adc
inc
mov
pop
adc
jecxz
push
aam
mov
xor
loop
cmp
lahf
loope
xor
mov
mov
aaa
rcl
mov
adc
cmc
sahf
outs
mov
cmps
xchg
mov
xchg
or
jnp
xor
mov
xchg
mov
xchg
out
mov
mov
rcl
inc
outs
mov
mov
xchg
and
sbb
mov
test
call
and
icebp
inc
cwde
push
je
jle
mov
fstp
pusha
pop
jmp
mov
mov
and
push
ret
outs
jl
xchg
jmp
sar
pop
push
(bad)
(bad)
std
and
sar
xchg
sbb
pop
dec
pop
cmp
push
sbb
inc
cmp
inc
cwde
or
fadd
pop
mov
cdq
ds
data16
or
and
aas
test
dec
dec
nop
xor
mov
fisub
push
jge
cmp
jne
pop
lods
shl
or
pop
clc
mov
mov
dec
cmp
jae
imul
fcomp
cmp
or
loopne
imul
cmp
stos
fdiv
xchg
fmul
xchg
push
icebp
cmp
ins
mov
xor
inc
cwde
push
pop
ds
je
jp
xchg
mov
mov
xchg
or
jns
pop
push
in
cwde
dec
nop
jbe
add
push
inc
pop
rcl
fst
mov
pop
shr
inc
icebp
enter
or
add
das
hlt
into
cmp
in
sub
or
cwde
jne
mov
inc
imul
lock
mov
ret
add
dec
mov
fld
sbb
dec
pop
inc
std
test
iret
fld
adc
fs
aam
cwde
popf
push
inc
das
je
mov
xchg
addr16
fmul
iret
push
or
fimul
pop
xor
inc
and
xchg
cmp
adc
icebp
add
lods
cdq
data16
cwde
test
movs
outs
leave
jmp
sbb
shr
ja
mov
lahf
mov
cmps
frstor
jbe
pushf
sub
xchg
push
lahf
jb
sub
rol
adc
cli
lods
push
int
pop
xchg
push
xor
add
xor
aam
call
popf
push
mov
clc
(bad)
push
scas
bnd
fiadd
scas
movs
repz
mov
mov
push
mov
xchg
iret
push
cwde
sub
(bad)
mov
stos
sub
fld
inc
aas
mov
fstp
dec
aad
xchg
or
add
fidiv
lahf
sub
dec
sar
mov
dec
pusha
lds
and
in
mov
in
mov
sub
push
push
mov
(bad)
cmp
lods
cmps
ret
int
add
in
daa
jno
push
mov
add
int
cmp
test
test
(bad)
cmp
pop
add
jmp
jge
into
(bad)
pop
popf
mov
fiadd
test
(bad)
pusha
popf
mov
aam
mov
daa
ins
call
aaa
hlt
inc
hlt
jge
scas
xor
and
and
lds
repz
sbb
imul
jmp
jae
fwait
add
xchg
jle
cwde
ret
addr16
push
clc
jmp
dec
outs
fstp
sbb
jmp
pop
cmc
xchg
mov
int
mov
mov
fnsave
(bad)
mov
test
fmul
popfw
xor
jecxz
into
leave
adc
inc
(bad)
movs
xlat
sbb
gs
mov
inc
jle
cmp
in
fsubp
ficomp
mov
das
fwait
out
dec
sub
add
ret
dec
sbb
pop
sti
sub
in
push
lock
pusha
ret
retf
shl
movs
cdq
hlt
call
add
(bad)
adc
jge
adc
pushf
add
and
fsubr
mov
jge
test
test
out
mov
xchg
mov
xchg
std
xor
mov
pusha
dec
push
push
ds
push
push
mov
push
es
lahf
imul
imul
jle
xchg
ror
shl
adc
arpl
call
lods
and
ins
xor
aam
mov
mov
pushf
cmp
mov
(bad)
imul
(bad)
cmp
mov
pusha
jl
jmp
lods
pop
test
mov
cli
setb
fwait
jg
sub
sahf
sbb
jb
push
push
sahf
mov
adc
pop
lods
jl
pop
jl
push
mov
mov
ja
jg
push
js
pusha
les
sbb
in
out
idiv
movs
jp
dec
jb
fmul
lahf
mov
and
sahf
test
ins
xchg
jne
sbb
sub
jnp
xor
cmp
popa
push
dec
sub
and
pop
add
mov
sbb
push
sbb
cmp
rcl
jne
jo
pop
pop
addr16
inc
mov
dec
jno
adc
push
cmc
mov
adc
push
imul
rcl
and
push
push
fwait
mov
push
movs
mov
xchg
icebp
inc
jo
ret
and
pop
int3
push
ins
sbb
pop
fdecstp
aaa
call
sahf
push
and
mov
dec
stc
and
sahf
xor
jne
push
push
xchg
je
pop
cdq
adc
add
adc
push
push
lahf
dec
push
adc
loope
lods
sub
js
ficom
and
pusha
aad
xor
mov
xchg
jle
cwde
lds
xchg
movntps
xchg
pop
mov
push
mov
ffreep
xchg
mov
mov
nop
ffreep
lods
shl
out
xchg
adc
(bad)
gs
add
nop
or
mov
sub
test
stos
xchg
and
dec
into
jl
je
jne
push
imul
sub
jmp
mov
push
jo
outs
neg
xchg
loope
dec
push
retf
jae
loopne
adc
xor
inc
clc
mov
mov
mov
movs
inc
mov
sub
inc
xchg
nop
inc
lea
popf
sar
adc
movs
and
mov
mov
inc
sub
out
pop
mov
into
mov
das
pop
sbb
jo
xor
in
dec
cmp
inc
mov
jne
rcr
(bad)
jo
pop
imul
mov
repnz
jno
mov
lidtd
jmp
xchg
and
push
push
xchg
cli
repnz
aam
jmp
xor
es
int
out
lods
and
jo
xchg
in
cld
push
out
xchg
xchg
jbe
leave
ins
nop
jg
fnstsw
lock
jmp
fld
sub
pop
adc
inc
cmp
and
leave
dec
xor
scas
dec
inc
inc
loopne
push
add
(bad)
hlt
and
sub
loope
inc
push
cmp
jae
mov
or
aam
pusha
dec
movs
adc
push
xchg
mov
adc
mov
mov
add
loop
stos
cmp
cdq
sbb
mov
sbb
lods
mov
xchg
xor
push
cmp
pop
imul
nop
xchg
pop
adc
inc
xor
repz
or
push
test
cmp
xor
cmp
cmp
sub
imul
je
push
pop
ins
sub
or
js
enter
push
xor
in
xchg
ins
dec
jne
fstp
das
es
adc
outs
out
mov
arpl
mov
lods
xor
push
add
les
nop
mov
or
ror
fst
(bad)
mov
loope
in
xchg
sub
jmp
cdq
adc
in
dec
sahf
mov
mov
sbb
je
test
adc
data16
popa
inc
pop
mov
xchg
push
xchg
add
adc
cdq
loopne
pop
sahf
arpl
or
mov
jne
sub
jecxz
jmp
mov
push
das
cmps
xchg
lahf
lahf
mov
stos
mov
sbb
add
mov
(bad)
xchg
jo
or
pushf
add
lahf
push
pop
adc
jae
or
xchg
fwait
lds
aad
jbe
inc
jns
sbb
xor
mov
mov
adc
xchg
add
push
shr
lahf
xchg
mov
(bad)
jmp
pop
cmps
jecxz
mov
fwait
mov
retf
xor
movs
mov
lock
test
ins
popf
int3
aaa
repz
test
pushf
outs
cld
rol
shr
rol
push
push
mov
shr
xchg
movs
nop
mov
retf
aaa
rcr
test
loope
mov
mov
fwait
(bad)
aam
dec
push
ins
mov
ja
in
(bad)
rcl
loopne
and
jae
adc
test
mov
int3
xor
in
dec
clc
test
push
lock
out
push
aam
pop
mov
lds
mov
adc
or
and
not
xchg
aas
xchg
xchg
fwait
mov
rcl
ja
xor
fs
mov
fdivr
xor
push
nop
push
sbb
fadd
stc
dec
shl
fidivr
retf
les
mov
adc
out
jmp
shl
mov
mov
adc
mov
xchg
add
lahf
ins
pop
cmps
call
mov
sub
int
fstp
in
(bad)
(bad)
push
mov
jmp
les
or
sub
push
mov
pop
sbb
adc
adc
jecxz
fsub
ret
mov
shl
nop
pushw
jb
movs
in
dec
test
outs
enter
push
adc
jmp
xchg
sbb
sahf
movs
aad
xchg
popf
mov
jne
addr16
push
mov
sahf
inc
inc
lahf
fmul
cmp
mov
test
inc
nop
mov
or
in
mov
adc
pushf
adc
mov
mov
hlt
mov
mov
xchg
mov
in
dec
sahf
shl
mov
and
nop
int
cmp
pop
aas
sbb
fstp
ins
inc
stos
(bad)
xor
mov
jecxz
out
fstp
inc
ds
sub
adc
retf
ror
in
int3
mov
add
fs
and
into
xchg
sub
test
inc
loopne
push
pop
dec
enter
pushf
adc
add
sub
rcr
addr16
xchg
loopne
dec
xor
sub
bound
rol
sub
push
retf
mov
not
mov
push
xchg
xchg
fstp
les
pushf
ret
cmps
sub
ja
(bad)
xlat
sub
nop
enter
rol
inc
jmp
outs
cwde
xchg
mov
push
xor
mov
mov
mov
mov
(bad)
ins
test
xchg
lds
jno
out
jae
call
push
std
test
adc
jecxz
test
sub
push
test
lods
lea
(bad)
mov
mov
rol
cdq
sub
push
stc
xchg
mov
test
aam
sbb
loopne
dec
shl
mov
aaa
into
popa
aad
(bad)
mov
lds
test
imul
ffree
(bad)
pusha
pop
lahf
mov
push
cdq
lds
pushf
outs
ja
mov
mov
jecxz
aas
test
push
lea
mov
jge
ficom
rcr
mov
(bad)
mov
mov
nop
xor
sbb
lahf
push
xchg
ds
lods
loop
xchg
mov
ror
sub
push
inc
sbb
jmp
gs
push
push
mov
mov
xchg
lea
bound
dec
ins
inc
leave
movs
jbe
pop
xor
in
sti
addr16
jecxz
inc
jge
mov
ret
test
xor
push
aad
jp
jge
outs
pop
pop
adc
xor
mov
rcl
xchg
adc
mov
(bad)
inc
sub
dec
imul
push
nop
movs
pop
push
(bad)
push
push
sub
(bad)
ss
xchg
clc
pop
hlt
aaa
and
fidiv
mov
idiv
ret
movs
or
mov
es
sbb
cdq
mov
pop
adc
js
push
fadd
push
fmul
popa
loopne
(bad)
enter
xor
cmps
aas
xlat
lock
mov
outs
mul
pushf
adc
jg
and
push
jle
or
loopne
mov
in
fadd
dec
jge
sbb
xor
or
arpl
add
xlat
enter
push
ss
(bad)
sbb
or
xlat
jge
sbb
enter
cmp
mov
hlt
mov
mov
sub
push
mov
or
mov
jle
and
fild
sbb
xchg
mov
pop
into
outs
je
jecxz
mov
js
rol
lds
in
push
loopne
movs
pop
xchg
push
rcl
jle
ficom
retf
xchg
xlat
lods
fsub
ja
repz
mov
mov
sbb
pop
pop
loope
xchg
add
leave
rcl
loopne
cdq
movs
adc
mov
jbe
movs
test
jo
pusha
xchg
pop
adc
mov
inc
dec
les
mov
and
push
daa
test
mov
mov
sahf
xchg
xchg
mov
xchg
leavew
lods
lea
mov
xor
aam
fadd
xchg
or
mov
ror
push
pop
xchg
test
mul
push
push
xchg
popa
sbb
mov
xor
mov
push
adc
stc
mov
pop
xchg
mov
push
jecxz
xor
mov
pop
test
pop
push
cdq
sub
test
test
movs
test
pop
add
stos
inc
test
add
xor
inc
rcr
test
mov
enter
test
loopne
push
lahf
mov
(bad)
lock
xchg
mov
or
movs
popf
jnp
jmp
mov
outs
in
test
sbb
pusha
pop
mov
int3
mov
jecxz
mov
xchg
aas
test
cmp
xchg
cmps
test
jecxz
sub
mov
hlt
push
mov
cwde
sub
mov
outs
jmp
call
das
pop
push
fcomp
push
enter
movs
in
jb
jmp
mov
imul
punpckldq
outs
sbb
out
into
imul
or
aam
mov
mov
aad
xchg
scas
pusha
outs
fwait
repnz
lahf
jo
outs
mov
sar
xchg
cmp
test
sub
push
xor
mov
shl
xchg
dec
lea
push
xchg
(bad)
or
xor
jnp
mov
inc
and
aaa
cmps
mov
sub
movs
sbb
pushf
mov
das
and
adc
lahf
shr
and
mov
xor
cwde
inc
xchg
adc
mov
dec
push
(bad)
xchg
mov
dec
xadd
movs
scas
cmp
loopne
test
nop
rcl
shl
jp
les
arpl
mov
mov
call
add
(bad)
mov
movs
inc
(bad)
inc
xchg
or
fidiv
test
mov
dec
aas
pop
mov
das
lock
pop
les
imul
cmps
test
push
ins
and
pop
addr16
sub
cmp
adc
adc
(bad)
jno
fsub
mov
inc
pushf
cmps
dec
adc
test
nop
rol
mov
sub
dec
mov
cwde
into
mov
push
pop
mov
ret
enter
fisubr
and
push
xchg
pop
es
stc
xor
repz
das
mov
mov
data16
xchg
mov
mov
pop
mov
lods
jge
mov
xchg
jl
nop
add
not
test
ins
cmp
enter
test
xchg
add
xchg
aad
xchg
add
jno
out
add
ret
jmp
cmps
or
call
push
push
mov
xchg
movs
sbb
lds
inc
test
enter
mov
aas
shl
loopne
lds
jge
cmp
or
lahf
jg
pushf
idiv
adc
pop
(bad)
cmp
addr16
mov
mov
sub
enter
sub
dec
jle
adc
sbb
cmp
xchg
lds
enter
test
cld
fadd
adc
test
std
add
mov
inc
mov
dec
cdq
aas
and
jle
and
(bad)
stos
loope
shl
xchg
fst
mov
mov
sbb
cld
cwde
jmp
sbb
in
shl
xchg
and
push
adc
pop
adc
xchg
pop
jno
sbb
loopne
pop
mov
call
mov
loopne
add
push
push
adc
sti
sub
shl
mov
bound
xchg
(bad)
or
mov
lds
push
sub
pop
push
or
dec
adc
push
fadd
mov
ins
cmc
xor
mov
push
fcom
pop
and
sbb
pop
cs
mov
rol
inc
repnz
push
push
push
xor
fwait
xchg
in
jnp
mov
push
mov
ins
dec
int
adc
in
out
fs
mov
inc
sub
xchg
ds
cmp
shl
xchg
mov
adc
xchg
mov
or
cdq
mov
pop
mov
das
adc
mov
fmulp
mov
cmp
(bad)
jecxz
stos
popf
pop
pushf
inc
cmps
test
call
pop
xchg
pop
clc
aam
test
lock
loopne
jb
in
xchg
loopne
lea
nop
sahf
lahf
jmp
es
imul
xor
xchg
lahf
inc
mov
mov
(bad)
xchg
jecxz
fcom
movs
mov
jle
xchg
mov
(bad)
xchg
fcomp
push
ins
adc
aaa
push
mov
xchg
out
sbb
pop
mov
jnp
(bad)
xchg
cwde
xlat
mov
xchg
in
test
enter
repnz
in
sahf
mov
cvtpi2ps
mov
call
out
dec
inc
not
test
dec
xchg
add
sahf
mov
rcl
cmc
movs
pop
and
lahf
nop
jmp
into
or
mov
movs
repz
ja
sbb
pop
arpl
mov
mov
inc
sbb
fwait
test
lods
in
pop
sar
retf
nop
xor
out
in
fdivr
mov
push
sub
int
movs
pop
cmps
jp
jnp
rcl
in
xchg
push
xchg
adc
cs
mov
add
ins
mov
add
sbb
adc
out
cdq
shr
pop
pusha
in
xor
lock
pop
push
test
pop
sbb
call
popa
js
adc
and
push
jle
aad
inc
pop
std
and
ins
mov
and
jmp
mov
mov
int
nop
cmp
add
jmp
movs
jge
xor
xchg
cmp
or
shr
mov
mov
xlat
and
sbb
test
das
lods
push
test
and
pop
xor
aam
fsubr
pop
fisub
cwde
in
dec
push
imul
mov
shr
xchg
loopne
ret
jmp
imul
xchg
adc
mov
jno
sub
shl
cmp
adc
js
mov
fidiv
and
adc
loopne
add
sbb
mov
xchg
adc
out
push
dec
pop
vphsubbw
xor
mov
stos
test
cli
in
sbb
mov
adc
and
sub
lahf
ds
and
push
arpl
enter
push
mov
xchg
push
xchg
xchg
inc
enter
ret
stos
test
aaa
movs
xchg
rcr
lahf
(bad)
sahf
(bad)
adc
mov
xchg
fisttp
push
jecxz
in
xchg
mov
das
xchg
shr
sbb
test
hlt
mov
pushf
inc
movs
push
inc
xchg
loopne
fwait
mov
(bad)
dec
pop
and
cmps
dec
mov
xor
lahf
loopne
test
jae
ins
mov
in
pop
stos
or
ficom
iret
shr
aaa
outs
xor
and
enter
repnz
in
loop
mov
loop
(bad)
adc
fcomi
jns
ss
add
jge
pop
xchg
mov
cdq
inc
mov
nop
xchg
adc
mov
cdq
sahf
dec
pushf
js
pop
mov
fmul
rol
cdq
iret
aad
and
push
sbb
enter
push
or
inc
mov
cmp
inc
jl
mov
lea
xchg
or
pop
jp
mul
xchg
jmp
sub
movs
call
or
mov
imul
imul
mov
fcomp
adc
retf
test
cmp
jne
outs
fnsave
fwait
mov
imul
and
mov
adc
add
mov
test
push
fdiv
fild
pop
jmp
xor
sbb
mov
(bad)
pop
mov
(bad)
je
dec
mov
fild
imul
movs
add
push
mov
mov
mov
fimul
pop
dec
xlat
aam
mov
push
(bad)
sbb
xor
aas
ficomp
scas
fbstp
fsubr
arpl
ss
pop
xchg
(bad)
push
jno
sbb
add
lods
fsubr
dec
cmp
fbld
add
mov
pop
add
enter
cmp
or
mov
lods
mov
or
stos
add
gs
adc
aam
hlt
cmps
jge
or
stos
aaa
mov
sub
sbb
dec
hlt
add
push
adc
mov
mov
mov
jb
cmps
daa
lahf
and
lods
jno
shl
add
push
movs
push
stos
add
into
inc
dec
sub
add
xchg
mov
or
ficom
sbb
(bad)
movs
sub
pop
add
cmc
popa
xchg
das
pop
fistp
mov
(bad)
fcmove
mov
pop
push
imul
mov
add
loopne
mov
mov
mov
je
hlt
sub
adc
clc
hlt
xor
mov
xchg
push
repz
loopne
js
std
jmp
add
mov
and
enter
in
test
add
mov
js
retf
jns
inc
scas
mov
jns
scas
call
add
mov
das
jns
imul
pusha
and
(bad)
pushf
mov
push
mov
sar
cmps
dec
xchg
dec
xor
inc
pop
mov
hlt
jmp
retf
xor
retf
xor
add
push
fs
hlt
stc
push
mov
jo
daa
push
xchg
shl
lods
xchg
sbb
xchg
dec
mov
xchg
daa
movs
inc
rol
push
fidivr
add
std
test
push
sub
(bad)
push
dec
call
mov
(bad)
cld
mov
mov
mov
xchg
sub
jae
cwde
and
mov
and
mov
dec
jg
inc
(bad)
(bad)
icebp
mov
sbb
loope
dec
repz
and
aad
mov
xchg
les
pop
pop
shr
(bad)
shl
nop
inc
add
xchg
add
mov
pusha
jg
jmp
jo
push
push
mov
cwde
mov
mov
adc
xchg
leave
dec
enter
mov
inc
movs
pop
sub
loopne
adc
popa
inc
sbb
enter
push
xchg
adc
gs
sbb
cvtps2pd
test
retf
adc
pusha
mov
es
fincstp
sub
fist
adc
or
push
ret
xchg
into
lds
in
push
adc
fisub
in
cmp
pop
adc
xchg
movsx
fmul
fdivp
push
dec
loopne
lods
ss
leave
or
sub
rcr
cmp
(bad)
jb
shr
lods
loopne
(bad)
fcmovne
mov
sub
ror
jge
jmp
outs
adc
xor
daa
fidivr
adc
fadd
pop
fdivr
(bad)
rcr
test
aam
fnsave
aas
sub
int
mov
mov
jno
cmp
add
js
inc
ins
stc
cdq
call
xchg
push
xchg
out
hlt
mov
mov
loopne
mov
clc
lock
add
ins
test
mov
(bad)
loopne
clc
jl
jecxz
mov
inc
ret
fnstsw
iret
mov
lahf
sbb
or
sar
xor
sar
inc
ja
push
add
jb
fwait
push
xchg
js
cmps
stc
imul
rcl
xchg
jo
aaa
mov
neg
add
mov
push
xchg
add
adc
jne
mov
mov
xor
ret
call
fistp
test
ror
int3
mul
mov
sbb
dec
cmps
fsub
or
or
aad
mov
fdivrp
xlat
mov
fiadd
push
popf
mov
sar
xchg
leave
mov
adc
lods
lds
ins
loope
jmp
mov
into
mov
xor
outs
aas
je
shl
xchg
ins
(bad)
enter
imul
div
jp
sbb
loop
scas
aas
shl
mov
int
push
sbb
outs
fcomip
test
mov
fwait
xchg
mov
adc
push
es
inc
je
xchg
mov
inc
push
mov
sti
mov
std
nop
jne
daa
fcomp
ret
rcr
sar
cwde
test
icebp
fisubr
add
enter
outs
(bad)
pushf
and
xchg
mov
js
test
mov
adc
cmp
pusha
cmp
mov
call
retf
les
pop
lds
leave
pop
push
shr
sti
push
or
jbe
dec
sub
in
xchg
fld
sbb
mov
sbb
pop
dec
jecxz
xor
mov
ror
leave
(bad)
xchg
inc
(bad)
cdq
cmp
outs
test
lods
push
retf
sub
movs
lahf
rcr
fisttp
mov
jl
jb
jmp
cmp
(bad)
mov
fldenv
pmovmskb
sub
gs
addr16
into
fistp
shl
movs
in
pop
mov
movs
lods
mov
(bad)
sbb
add
xor
xor
shl
xchg
mov
imul
fidiv
pushf
lods
dec
jmp
in
mov
xchg
lds
rcl
mov
sub
ins
stos
ja
pop
repnz
cld
xor
xchg
mov
(bad)
add
nop
(bad)
pushf
(bad)
outs
js
pop
jmp
push
mov
arpl
(bad)
jmp
dec
stc
xor
push
lods
pushf
ja
mov
(bad)
in
mov
mov
movs
leave
mov
dec
xchg
sbb
repz
aad
mov
xor
jmp
imul
jl
xor
in
mov
scas
xchg
or
mov
add
push
mov
sbb
js
xchg
cli
sbb
shl
ret
ret
pop
scas
jg
adc
ins
xchg
adc
ds
inc
ret
and
cmc
jg
(bad)
stos
xchg
mov
jge
fwait
retf
jge
xchg
je
ret
mov
push
pop
add
adc
pushf
mov
pop
xchg
sbb
jo
push
inc
das
and
into
pusha
pusha
sbb
sbb
inc
ins
aam
je
xlat
adc
sub
inc
in
push
adc
sbb
push
adc
and
les
mov
mov
mov
jl
shl
dec
mov
pop
jl
push
jb
adc
ror
pop
rol
(bad)
aad
rcr
into
xor
and
xor
enter
repnz
add
fcomi
mov
nop
cli
repnz
movs
call
adc
lods
in
or
js
pop
xor
inc
into
ja
pop
je
jmp
inc
(bad)
ins
ss
xchg
pop
lahf
out
dec
mov
gs
fwait
adc
rcl
xchg
outs
ja
cmps
pop
lock
xchg
ret
add
jg
dec
scas
ret
or
pusha
pop
out
sbb
jecxz
sbb
xchg
jg
aaa
mov
pop
shl
sub
or
dec
inc
dec
sub
cmps
mov
adc
fstp
add
cmp
push
mov
mov
shl
into
mov
mov
mov
jg
inc
adc
mov
mul
xchg
pop
xchg
pushf
or
call
shl
into
loop
and
clc
je
scas
add
or
mov
in
push
xchg
inc
loop
pop
xchg
mov
sbb
int
adc
int3
mov
mov
dec
(bad)
jno
adc
and
scas
push
sub
pop
adc
into
ds
cmp
mov
cmp
inc
jge
jo
mov
push
inc
pop
aam
jge
and
dec
or
retf
fld
jne
stos
fs
jne
pop
fcmovne
jg
fistp
sub
mov
loopne
pop
repz
aam
aas
pop
pop
test
xchg
xchg
xchg
jae
sahf
or
mov
and
mov
mov
jp
lds
fcom
pushf
xchg
lahf
adc
enter
(bad)
or
fnstcw
push
adc
jl
add
jo
push
clc
add
mov
adc
push
pushf
fsubr
inc
into
or
or
mov
dec
mov
jne
xchg
int
jle
test
leave
xchg
cmps
sbb
call
adc
mov
stc
repnz
xchg
mov
mov
shl
inc
int
sub
mov
out
mov
shl
xchg
stos
retf
shr
fild
and
sbb
loopne
or
loopne
or
ret
call
aad
enter
loopne
sbb
outs
add
cmp
push
ja
or
int3
adc
cmp
mov
or
pop
lds
ds
retf
ror
sbb
ffree
mov
sbb
int
mov
mov
nop
or
mov
pop
mov
push
adc
dec
fst
int3
cmp
clc
mov
ins
in
jae
pop
clc
dec
jmp
adc
ror
clc
popf
pushf
cmp
xchg
sub
push
add
enter
mov
pushf
jmp
(bad)
xchg
xchg
xchg
dec
pushf
ret
and
popf
in
loop
cmp
repnz
jecxz
mov
lahf
shr
sbb
lods
add
jmp
lahf
jnp
jge
dec
rol
sar
mov
mov
rcl
mov
mov
sti
pop
mov
and
push
retf
push
cmp
shr
xchg
lds
cmp
out
stos
cld
retf
sar
fld
idiv
adc
(bad)
imul
jecxz
pop
int3
ins
scas
aaa
test
stc
mov
dec
add
test
(bad)
and
rol
jge
xchg
adc
loopne
fistp
mov
mov
shr
repnz
xchg
pop
jb
retf
sub
push
dec
int3
jb
fadd
jge
fld
xchg
push
adc
push
jmp
pusha
mov
mov
add
push
xor
nop
cmps
popf
push
sahf
sbb
mov
(bad)
ret
inc
dec
mov
lds
mov
fldenv
mov
mov
cmp
sbb
xlat
inc
xchg
inc
sub
ficomp
(bad)
retf
in
std
pop
pop
test
aam
scas
jb
es
addr16
xchg
in
rol
fcom
shr
xchg
cmp
cmps
rol
mov
shl
jb
enter
pushf
sub
imul
push
mov
add
xor
test
repnz
pop
fdivr
xchg
adc
push
pcmpeqb
pop
outs
lods
or
or
inc
aaa
mov
int3
lds
mov
inc
nop
je
pushf
sub
ins
aam
jle
xchg
sub
jmp
mov
test
addr16
je
and
shl
sbb
pushf
les
fcmovbe
je
pop
mov
scas
push
sub
call
cdq
push
rol
(bad)
jbe
(bad)
shr
movs
or
adc
fwait
jecxz
inc
inc
cmps
test
mov
jo
or
adc
loopne
xor
push
fsub
adc
or
fcmovnb
inc
xlat
das
call
ret
pop
outs
cmps
and
std
push
jo
dec
pusha
stc
fbstp
cmp
stc
mul
(bad)
cli
lods
jge
inc
fwait
xchg
jmp
mov
mov
push
mov
xor
adc
aad
xchg
movs
lods
lods
xchg
pushf
aas
mov
pusha
leave
mov
xor
mov
mov
xchg
push
mov
mov
push
enter
push
test
cdq
adc
out
mov
fld
sub
ja
add
pushf
push
lods
sbb
mov
ret
xor
(bad)
xchg
cdq
add
pop
mov
in
xchg
test
lea
call
mov
gs
pop
push
mov
mov
pop
or
mov
jmp
inc
cdq
mov
cmps
std
retf
rol
hlt
mov
popf
cmp
sar
popa
mov
pushf
ins
nop
push
sbb
xchg
mov
je
imul
cmp
mov
dec
or
rcl
cmp
or
idiv
or
xor
icebp
jno
jmp
pop
xchg
shl
add
mov
mov
jg
jg
push
or
ja
adc
out
ret
pop
call
sbb
mov
loope
test
pmulhuw
dec
pop
mov
iret
mov
mov
xlat
mov
mov
jnp
(bad)
adc
movs
dec
call
test
lock
ins
cld
jmp
ror
(bad)
cmps
mov
js
adc
jbe
test
pushf
fiadd
xchg
mov
cs
clc
pop
repnz
mov
mov
pop
rcr
push
sar
(bad)
inc
stc
inc
push
fwait
fwait
jecxz
xor
or
xchg
js
shl
dec
test
xchg
(bad)
cdq
sbb
clc
add
cmps
push
xchg
or
and
ret
mov
cmp
add
sub
mov
pushf
cmps
inc
retf
mov
in
lds
xchg
ret
push
xchg
cwde
ds
pushf
pop
jecxz
dec
xchg
inc
call
mov
inc
xchg
pusha
xchg
push
pop
mov
xchg
push
push
and
test
pop
mov
push
js
jns
add
sub
dec
clc
outs
jg
mov
sahf
jl
push
je
mov
(bad)
push
inc
or
call
sbb
cmps
out
cmp
(bad)
jbe
aas
mov
nop
movs
ja
aaa
cmps
or
pop
test
test
cmp
pop
in
jne
mov
xor
mov
pushf
jmp
push
pusha
xor
inc
ds
idiv
(bad)
sbb
test
ds
push
mov
xchg
mov
mov
inc
add
pop
sahf
test
movs
inc
popf
sbb
inc
sar
xor
xlat
jno
mov
xchg
popf
ret
push
lahf
rol
lahf
into
push
(bad)
jae
aad
jl
xchg
ins
xchg
out
cmp
(bad)
rcl
imul
test
mov
add
dec
popf
pop
ss
sub
pop
dec
ret
inc
cdq
sub
les
stos
adc
or
popf
lods
push
jge
hlt
xchg
ret
mov
retf
aad
hlt
adc
pop
pop
push
je
fisubr
push
xchg
enter
test
test
mov
sub
mov
(bad)
stos
fwait
enter
lahf
mov
pcmpgtb
or
imul
pop
push
mov
sbb
sub
int
retf
fcom
sbb
push
call
cli
gs
ja
push
cdq
sbb
cmc
mov
mov
inc
out
stos
mov
fst
sbb
test
pop
push
lock
inc
push
adc
lds
cld
test
push
adc
pop
(bad)
mov
loopne
mov
mov
adc
std
mov
adc
loope
aaa
xchg
or
jb
out
adc
(bad)
inc
pop
pop
not
mov
in
mov
test
js
add
or
mov
push
in
mov
pop
call
cmps
lods
adc
call
xchg
fwait
movs
inc
mov
lahf
adc
mov
(bad)
int3
add
movs
sub
hlt
cmps
push
or
mov
mov
iret
xchg
mov
sub
sbb
xchg
push
sahf
pop
mov
jg
call
popa
or
xchg
popa
lahf
mov
mov
mov
ftst
cmp
jb
enter
or
lahf
pop
jbe
cmps
mov
inc
and
or
inc
pop
cmp
xchg
xor
mov
imul
cmp
fldcw
lahf
retf
jns
ja
nop
or
mov
xchg
inc
out
test
adc
fnstsw
pop
out
jo
lods
mov
jg
cmp
mov
mov
pop
shl
rcl
dec
xor
add
mov
jae
ror
sar
shr
movs
mov
xlat
mov
loope
mov
mov
mov
dec
lock
(bad)
and
fstp
aad
cli
mov
fmulp
prefetchnta
outs
xchg
adc
xchg
cmps
xchg
and
and
xchg
cwde
loope
in
mov
xchg
mov
pop
cmp
shl
or
retf
fcom
add
xor
xchg
mov
inc
add
repnz
xchg
or
mov
pop
add
pop
iret
mov
aad
mov
push
(bad)
movs
mov
loopne
adc
mov
ret
xchg
outs
not
sahf
xchg
sahf
mov
adc
test
(bad)
(bad)
adc
adc
dec
sbb
call
sbb
xchg
movs
fidivr
cs
jge
in
jmp
jbe
(bad)
xchg
(bad)
mov
jge
pop
in
imul
push
jmp
repz
(bad)
loopne
iret
sahf
mov
ret
cmp
adc
test
sub
popf
adc
aam
repnz
call
mov
mov
clc
jl
add
mov
pop
test
adc
fsubp
or
cld
pushf
stos
(bad)
sbb
bnd
mov
mov
leave
enter
cli
iret
mov
xor
enter
movs
movs
mov
sti
rol
test
or
adc
push
push
pop
repnz
xor
retf
xlat
adc
addr16
lods
pop
std
pop
test
lds
xchg
ins
jmp
int
inc
shl
test
lahf
ret
sub
es
call
mov
dec
mov
pop
add
ja
cld
xchg
add
movs
jmp
cli
inc
pop
dec
pushf
push
bound
mov
pop
hlt
cmp
mov
mov
mov
add
xchg
ret
mov
xor
push
addr16
xchg
pop
jecxz
cld
push
arpl
pop
fld
cmp
aam
enter
(bad)
dec
out
push
jo
sbb
(bad)
stos
fistp
popa
test
test
adc
stos
mov
clc
stos
xchg
adc
xchg
test
mov
data16
aam
mov
mov
push
xor
add
adc
ins
fbld
ins
sahf
lahf
rcr
xchg
aaa
inc
mov
xchg
je
loopne
jecxz
popa
cs
in
(bad)
gs
pop
add
pop
sahf
ja
ds
push
rol
rcl
pop
inc
mov
cld
js
pop
ficomp
scas
test
mov
or
cmps
pop
(bad)
enter
mov
sar
(bad)
xchg
fs
xchg
mov
shl
xchg
xchg
es
cmp
aam
mov
mov
jno
xchg
rcr
pop
jl
aas
sbb
lock
and
sti
call
add
mov
xchg
jle
sub
stos
inc
push
sub
loopne
gs
mov
and
vunpckhpd
xor
cs
sbb
(bad)
mov
and
and
movs
dec
cdq
mov
(bad)
and
not
fdiv
test
aam
xchg
adc
lods
(bad)
call
push
movs
(bad)
out
loope
xchg
mov
push
jmp
aaa
adc
push
ret
not
lahf
mov
stos
sahf
mov
hlt
leave
inc
std
xlat
(bad)
aaa
and
cdq
outs
daa
shl
fld
pop
adc
push
dec
retf
(bad)
cmp
out
xchg
cmp
dec
or
gs
mov
pushf
ret
jnp
dec
mov
retf
sub
and
adc
fisttp
lock
hlt
lods
adc
cs
inc
arpl
mov
xchg
lods
pop
in
nop
adc
mov
push
jmp
lock
adc
jecxz
out
xor
rol
add
fadd
mov
(bad)
fnstcw
or
in
mov
shr
frstor
fcomp
out
sbb
fs
and
push
pop
(bad)
cmp
mov
test
mov
imul
mov
movs
(bad)
fisubr
cmps
or
repz
mov
fcom
jo
out
aaa
add
outs
in
ins
pop
xchg
mov
packuswb
push
fnsave
cdq
test
adc
dec
retf
mov
adc
popa
cdq
dec
movs
out
icebp
(bad)
pushf
mov
xchg
out
popf
test
jle
jmp
xlat
inc
sub
call
and
call
jmp
nop
lds
int3
lock
scas
or
fnstenv
nop
mov
stc
cli
and
and
xchg
adc
push
call
sub
inc
repnz
mov
jne
stc
and
mov
test
je
adc
pop
pushf
adc
xchg
mov
test
mov
pop
outs
loop
xchg
popa
dec
inc
push
push
stos
push
(bad)
mov
nop
rol
push
xchg
lods
pusha
loop
scas
pop
dec
iret
and
movs
pop
mov
pushf
push
rcl
add
dec
scas
mov
lahf
cs
xchg
xor
fwait
adc
rcr
rcr
sbb
inc
loop
mov
inc
cwde
(bad)
sbb
adc
neg
test
mov
and
push
ins
mov
cmp
push
sbb
frstor
sar
xchg
jmp
cdq
mov
sub
push
clc
add
sbb
adc
retf
jo
mov
push
sbb
add
mov
inc
movs
cmp
mov
xchg
jle
or
inc
sahf
sbb
inc
inc
mov
(bad)
and
mov
out
ror
mov
loopne
jo
push
mov
repz
stc
lock
jo
addr16
dec
push
in
call
(bad)
jl
adc
movs
pop
xor
xor
imul
aam
imul
sbb
mov
loopne
rol
aam
mov
sbb
mov
cmp
lea
sub
cmp
popf
lods
into
push
ret
mov
lods
leave
inc
gs
dec
jbe
sub
jmp
test
fisttp
inc
add
rcl
mov
nop
pop
fdivr
popf
mov
mov
stos
rcr
mov
lahf
xchg
ror
push
mov
ret
mov
jbe
xchg
popf
push
ret
sahf
inc
loop
xchg
ret
jl
outs
xchg
(bad)
adc
mov
sub
mov
retf
je
(bad)
int
cmps
mov
dec
jecxz
xchg
scas
ret
cmp
mov
in
enter
sar
mov
jecxz
mov
rcr
mov
fadd
and
xchg
sub
nop
ret
fild
cmp
or
mov
xchg
mov
pop
enter
jmp
jl
cmps
xchg
cli
imul
or
int
adc
adc
stos
leave
es
arpl
test
add
fisubr
add
inc
out
push
pop
fadd
sub
and
sub
repz
mov
mov
mov
mov
daa
inc
push
push
jge
add
ins
xchg
enter
and
mov
and
mov
lahf
xchg
mov
lds
dec
shl
movs
dec
fistp
mov
pop
arpl
adc
movs
enter
inc
mov
in
mov
movs
mov
xchg
icebp
pushfw
mov
pop
(bad)
add
fiadd
xchg
cmp
pusha
(bad)
dec
push
stos
mov
hlt
jb
imul
je
test
ja
lock
jl
sbb
mov
popf
test
fild
push
add
loope
mov
mov
push
inc
push
cmp
fwait
add
mov
and
dec
ror
mov
jae
dec
mov
(bad)
mov
call
push
fcomp
push
dec
shl
xor
and
test
frstor
fwait
dec
mov
push
cs
inc
sahf
ins
cli
pusha
xchg
iret
fidivr
push
push
mov
lds
pop
mov
leave
mov
push
out
ss
push
inc
xor
jmp
adc
cli
leave
xor
fisttp
mov
shl
xchg
pushf
and
hlt
iret
arpl
fcomp
mov
test
imul
mov
adc
rol
test
(bad)
push
mov
xchg
cs
hlt
sub
adc
jle
xchg
imul
ror
and
fisub
lahf
stos
sbb
adc
inc
cli
mov
mov
jo
pop
sbb
sbb
adc
pusha
dec
adc
lods
(bad)
push
xchg
bound
retf
xchg
leave
jge
stc
rcr
xchg
or
loope
hlt
fdivp
xchg
mov
aad
mov
in
inc
sahf
sbb
push
scas
scas
add
xor
add
imul
je
or
sub
test
jnp
push
jne
xor
cmps
lea
lahf
shr
mov
push
int
aad
xchg
cdq
aam
push
xor
movs
sbb
mov
lods
movs
(bad)
mov
out
inc
fmul
pop
sbb
popf
push
sbb
cld
fs
(bad)
lock
retf
xor
bound
fmul
outs
xchg
loope
rcr
leave
xor
cmc
jge
retf
lods
dec
test
adc
dec
fadd
mov
pop
test
inc
popa
ret
mov
mov
shr
pusha
lahf
repz
cld
mov
sub
ror
(bad)
cdq
xchg
lahf
add
sahf
push
mov
xchg
push
fs
lods
mov
lahf
or
jmp
or
and
enter
sbb
cmp
enter
xchg
or
shl
mov
div
enter
es
mov
xor
mov
xchg
and
push
dec
scas
push
mov
rcl
out
xor
pusha
rol
mov
ficom
cmp
jmp
lods
repz
and
or
frstor
(bad)
aas
mov
mov
mov
jmp
mov
lahf
pushf
or
sub
lahf
fcmovb
enter
popf
test
xor
jg
mov
mov
sub
fiadd
mov
(bad)
mov
jbe
and
push
adc
aam
ins
lahf
ret
push
xchg
pushf
in
(bad)
jecxz
sub
test
mov
and
xchg
and
stos
cmps
xchg
cs
test
loopne
(bad)
popf
fnstenv
cmp
stc
adc
mov
cmps
mov
leave
mov
in
push
je
out
fwait
inc
aaa
mov
sub
add
cmp
pop
test
inc
xchg
adc
cmp
pop
mov
add
leave
in
aad
xchg
jecxz
movs
imul
mov
or
fisub
scas
jmp
popa
dec
push
retf
jns
pop
cmp
mov
xchg
sbb
addr16
xchg
cld
mov
jge
sub
pusha
inc
push
jbe
loop
sub
mov
aad
es
nop
lds
add
xchg
es
cmps
test
adc
adc
mov
in
and
cmp
push
test
mov
lahf
fnstsw
pop
xor
push
xchg
push
ss
adc
xchg
and
mov
fist
inc
retf
fild
into
jbe
xor
sbb
add
rcl
and
mov
and
dec
mov
dec
xchg
or
push
shl
test
xchg
jecxz
mov
std
push
fdivr
jo
xchg
and
cmps
pushf
ret
imul
into
test
jmp
int3
xchg
shl
movs
fdiv
fdivr
loopne
push
mov
hlt
loopne
les
pop
in
fwait
mov
dec
dec
imul
inc
ja
retf
in
retf
aad
sbb
outs
lds
xchg
sub
mov
jno
std
stos
jge
popf
(bad)
cdq
adc
(bad)
adc
aad
mov
pushf
sub
xor
mov
xchg
mov
jno
mov
mov
rcr
mov
push
xor
test
fstp
lods
rcl
xchg
sbb
rol
mov
scas
es
cdq
std
fnstenv
popf
pop
test
(bad)
jp
sbb
jp
and
xchg
scas
add
popa
xchg
jle
fdivr
aam
(bad)
mov
(bad)
(bad)
out
cmps
or
shl
xchg
and
les
icebp
fisub
cmps
lds
aad
adc
(bad)
fs
or
mov
pop
scas
pop
fucomp
int
mov
leave
pushf
out
push
xor
and
in
mov
hlt
test
shl
lods
push
loopne
xor
jbe
xchg
nop
and
cmp
sar
popf
daa
movs
inc
(bad)
popf
movs
xchg
mov
aad
mov
mov
push
sbb
xchg
je
div
or
rcl
hlt
mov
and
gs
daa
cs
(bad)
fcom
scas
ins
mov
push
cmp
les
mov
adc
cmps
lods
mov
mov
inc
mov
mov
shr
scas
imul
xor
jno
pop
sub
outs
sub
mov
xchg
xchg
int3
(bad)
xchg
sub
xchg
mov
clc
jge
jle
push
fwait
ret
pop
movs
lahf
je
add
pop
nop
xchg
mov
xor
adc
ror
mov
mov
psubsb
aaa
sbb
fimul
add
stos
push
adc
mov
xor
rcr
ret
push
cmp
cmp
mov
push
mov
in
jecxz
and
xor
mov
pop
daa
sub
inc
mov
mov
dec
das
idiv
movs
ret
cmp
bound
sub
pop
pop
or
push
pop
push
call
jmp
mov
mov
sub
xlat
mov
mov
xchg
popf
and
aam
push
jge
adc
mov
mov
and
mov
movs
jge
sahf
xchg
cmp
popf
test
adc
rol
fdivr
arpl
xor
jo
fst
repz
or
sub
bswap
inc
(bad)
fadd
inc
test
cmp
xchg
mov
aad
adc
retf
xchg
jo
xchg
add
jnp
mov
and
test
jb
mov
sbb
pop
dec
mov
cld
loopne
add
fild
retf
xchg
adc
xchg
xchg
test
fmul
push
or
xchg
pop
inc
push
mov
clc
push
xchg
ror
outs
fld
add
fimul
pop
ja
xchg
inc
adc
retf
ins
cs
shl
mov
movs
pop
gs
mov
dec
shr
jle
fadd
sbb
dec
jne
mov
icebp
push
(bad)
sbb
inc
hlt
or
pusha
add
xor
pop
inc
idiv
lods
sbb
and
jmp
add
cmps
lods
mov
pushf
mov
pop
mov
in
ret
fidiv
into
and
ror
jmp
ret
xor
jp
pop
in
fs
mov
mov
or
test
add
enter
pusha
std
mov
xchg
lds
das
and
mov
das
pop
mov
jmp
cmp
cmp
inc
sbb
fs
(bad)
addr16
stc
sub
or
in
pushf
scas
leave
xchg
pop
xlat
pop
cmp
and
pop
pop
sub
add
cmp
lods
jecxz
test
rcl
dec
xchg
mov
xchg
xor
call
push
jge
popf
inc
mov
sbb
cmc
int3
mov
dec
xor
fistp
pop
add
outs
lahf
jge
ss
mov
pop
movs
test
or
sbb
and
jmp
(bad)
repnz
cmp
fisttp
add
iret
mov
daa
add
xchg
data16
test
xchg
mov
xchg
(bad)
lock
jge
sbb
imul
inc
add
sbb
mov
call
rol
and
mov
mov
shl
loopne
jmp
test
xchg
cmps
xor
push
out
ss
out
cdq
adc
movs
cmp
clc
mov
push
adc
pop
sub
mov
mov
xchg
aam
and
jmp
sar
mov
loop
mov
xchg
xchg
ret
popa
rol
mov
mov
es
jmp
xchg
sahf
or
sbb
add
inc
pop
pop
push
sti
or
out
iret
mov
aam
and
pop
sahf
xchg
fild
fadd
cmps
jg
fnsave
push
and
ja
xchg
test
mov
cmc
xchg
lds
ret
mov
test
lea
pop
inc
and
adc
mov
and
or
push
add
sahf
add
xchg
in
(bad)
xor
cmp
jg
xchg
sub
fiadd
mul
push
iret
mov
mov
push
or
dec
adc
les
mov
jns
mov
pushf
shl
cmps
and
jg
ficomp
movs
pop
inc
mov
or
fbstp
(bad)
sub
ffreep
push
adc
out
cld
cmp
ret
aad
jmp
rcl
repnz
popa
jmp
inc
mov
shr
or
fmul
test
fdiv
movs
stos
push
inc
(bad)
in
fwait
lea
es
popf
sbb
push
into
lock
(bad)
into
pop
shl
and
daa
repz
aad
popa
aaa
inc
add
lds
les
jmp
das
enter
sbb
cdq
and
sar
in
out
aad
in
mov
push
cli
(bad)
adc
mov
ss
and
xchg
jg
push
and
xchg
mov
adc
scas
mov
or
fcomp
mov
sahf
jge
(bad)
(bad)
sbb
sbb
mov
jmp
xor
retf
bound
push
(bad)
faddp
mov
(bad)
test
test
sbb
test
sahf
inc
loope
mov
nop
jg
sub
test
jo
pop
add
inc
pusha
test
cmp
mov
mov
push
not
xchg
daa
dec
mov
pop
(bad)
hlt
movs
fadd
jg
inc
cmp
mov
ss
xchg
shl
cmp
das
fild
mov
mov
adc
pop
aam
mov
adc
fs
rol
add
mov
scas
push
push
and
ss
push
adc
sub
or
mov
xchg
mov
ds
jp
xchg
cmps
int
pushf
dec
mov
xchg
sub
mov
cli
pop
push
xchg
ja
test
mov
mov
mov
mov
mov
loope
mov
inc
fisttp
retf
mov
jo
or
add
sar
imul
mov
mov
cmp
pop
xor
mov
cdq
cld
fisub
ins
sbb
dec
out
mov
rcl
mov
mov
loopne
imul
clc
fdivr
adc
push
shl
mov
in
loopne
jmp
hlt
inc
push
add
test
in
je
cli
stc
pop
rcl
(bad)
mov
cmps
retf
add
mov
ins
daa
repnz
mov
test
in
call
loop
sbb
xor
sbb
retf
retf
sbb
ffree
fist
nop
cmp
jbe
sub
mov
pop
ins
rol
cmps
sub
rol
push
push
sbb
pusha
sbb
add
mov
cmp
inc
ins
(bad)
lock
int
jns
ins
adc
fs
sahf
mov
mov
leave
cli
push
adc
mov
outs
inc
xlat
es
or
mov
cld
sbb
dec
xchg
mov
pop
jmp
xchg
test
mov
fidiv
add
xor
sub
jae
xlat
xchg
ins
fwait
xor
push
lods
dec
pop
xchg
scas
xlat
lock
ss
dec
fadd
pop
mov
lahf
repz
mov
ret
lods
adc
adc
cmp
or
push
mov
lahf
add
retf
mov
popf
jo
pop
mov
iret
jns
xchg
fcmove
xchg
in
and
inc
js
sub
pushf
ret
xchg
daa
test
jecxz
or
aaa
dec
ror
or
(bad)
in
(bad)
fs
sbb
add
xchg
nop
jl
push
pop
mov
pop
mov
out
fild
iret
mov
jb
mov
and
hlt
cld
sub
int
pop
call
pop
cwde
enter
xchg
sbb
outs
inc
sbb
imul
fadd
adc
leave
scas
js
ins
cmps
inc
mov
mov
(bad)
int3
sbb
fwait
test
gs
unpcklps
xchg
cmp
dec
ror
cmp
mov
lods
test
mov
xor
xchg
adc
xchg
not
(bad)
jp
enter
js
lahf
cmp
sbb
dec
xor
xor
outs
mov
lods
inc
xchg
test
mov
inc
call
add
mov
imul
xor
ins
xchg
mov
mov
daa
pusha
fisubr
xchg
lahf
or
xchg
out
mov
test
aad
test
das
test
push
cdq
adc
bound
mov
and
add
in
mov
xchg
es
rcl
add
rol
test
adc
jb
test
sub
test
loop
loopne
or
in
clc
or
test
xchg
popa
xchg
imul
push
(bad)
aaa
(bad)
adc
loopne
adc
push
mov
in
sti
cmp
std
xor
enter
retf
lahf
and
fild
jb
or
ffree
sbb
cli
xchg
cmp
ror
inc
fidiv
push
loop
das
mov
sub
inc
and
mov
push
nop
xchg
les
cdq
or
test
push
xchg
imul
mov
adc
fdiv
jmp
add
add
ins
sub
dec
fild
arpl
xor
inc
leave
ds
pop
cmp
inc
jg
mov
and
ret
or
test
fsubp
mov
sbb
or
mov
enter
or
outs
inc
imul
and
repz
add
std
sbb
fwait
adc
jmp
inc
dec
fdiv
mov
sub
cmp
xor
cdq
and
test
sti
push
pop
adc
add
xchg
and
scas
mov
sbb
and
pushf
sub
hlt
pop
enter
daa
pop
and
mov
int
je
imul
lock
popf
xchg
and
pop
sbb
mov
adc
clc
outs
mov
jnp
sahf
sub
push
(bad)
xchg
test
imul
inc
in
fst
addr16
rep
icebp
sti
pusha
loopne
aam
jp
dec
sbb
sbb
mov
and
xor
jle
outs
pop
pushf
or
adc
mov
push
mov
mov
xor
clc
test
mov
lahf
enter
aam
xor
inc
test
xchg
test
add
inc
xlat
cmp
inc
div
femms
mov
and
rcr
(bad)
jb
xchg
movs
lds
mov
scas
pop
jecxz
(bad)
js
add
jae
retf
mov
push
jns
fisttp
test
push
cdq
cli
int
jae
mov
scas
sbb
(bad)
dec
mov
out
or
xor
pushf
xchg
(bad)
into
imul
fidiv
jecxz
aaa
stos
inc
jmp
xchg
sub
in
push
jecxz
add
pop
inc
cmp
shl
mov
movs
es
shl
(bad)
mov
pop
pop
inc
xlat
nop
lods
enter
dec
push
gs
outs
mov
hlt
aaa
xor
xor
push
stos
cmp
mov
mov
push
or
mov
sahf
sub
mov
cmps
push
cli
inc
daa
jne
fnsave
sar
mov
or
inc
add
and
xlat
and
rol
dec
loopne
push
push
inc
sbb
sti
xlat
mov
repz
pop
rol
ja
retf
ret
fdivr
xchg
je
and
fisubr
mov
call
mov
cmp
call
inc
loopne
call
ror
(bad)
into
(bad)
inc
cmps
out
fiadd
xchg
pop
loopne
jmp
xlat
test
pop
sahf
popa
fdivr
and
mov
es
addr16
mov
ins
inc
jp
jo
or
(bad)
jnp
int3
cmp
pushf
lsl
xchg
cwde
inc
jo
dec
in
lea
sub
push
(bad)
inc
jmp
rol
xor
add
pushf
(bad)
icebp
inc
jmp
cmp
push
idiv
mov
inc
adc
adc
rcr
mov
hlt
les
(bad)
pop
or
inc
cmp
or
and
push
and
jmp
clc
adc
les
std
inc
ss
stos
xchg
sahf
cmp
cmpxchg
jmp
fidivr
inc
mov
aad
xchg
retf
pop
ret
mov
sbb
rcr
or
xchg
add
sbb
xlat
add
int
loope
loope
pop
push
and
rcl
mov
push
mov
rcr
ins
mov
pushf
xchg
out
inc
mov
push
jne
and
stos
unpcklps
sbb
mov
jmp
dec
mov
mov
push
adc
js
sub
xor
outs
jno
xchg
pop
mov
test
pop
fidiv
inc
int
push
rcr
test
ret
iret
pusha
scas
sbb
add
out
mov
add
lock
xor
fisttp
mov
cmp
sbb
mov
outs
mov
fidiv
inc
mov
shl
xor
(bad)
pop
(bad)
movs
mov
pop
mov
cdq
enter
and
sbb
dec
sar
jnp
jmp
or
pop
idiv
xchg
aad
inc
or
ss
inc
mov
mov
retf
sbb
add
fldenv
movs
push
pushw
test
movs
adc
js
fstp
(bad)
(bad)
mov
aad
popa
mov
leave
popf
mov
test
jno
ret
icebp
inc
adc
ret
mov
pop
dec
inc
jo
pop
in
bound
xchg
mov
inc
ja
leave
sar
pop
cmp
retf
loope
retf
jb
pusha
pop
fcom
xchg
or
push
xlat
push
(bad)
xchg
aad
scas
sahf
xchg
cmp
mov
xchg
push
js
test
mov
sahf
mov
out
scas
loop
push
es
sbb
mov
sar
mov
sbb
xchg
fadd
ror
jmp
push
cmp
sbb
xchg
fs
stos
les
jmp
sbb
inc
cmp
or
jmp
push
pop
mov
nop
jg
push
mov
aas
(bad)
mov
loopne
mov
cmp
xchg
xchg
jge
sahf
(bad)
out
mov
xchg
sar
shl
ret
jge
xor
sub
xchg
jo
mov
sbb
nop
adc
xchg
out
dec
xchg
sahf
loope
nop
xchg
nop
movs
and
sbb
rcr
(bad)
jp
mov
in
nop
jmp
xchg
dec
popf
xchg
mov
in
push
je
(bad)
mov
in
pop
movs
xchg
xor
and
fidivr
adc
mov
jge
fdivr
push
rol
jno
xlat
cmp
xchg
xlat
pushf
jge
shr
dec
cmps
add
(bad)
popa
add
mov
xor
rcl
movs
push
popf
and
imul
mov
or
in
mov
es
sbb
xchg
pop
clc
sub
test
add
xor
add
data16
and
enter
xor
jne
fs
cdq
scas
popa
pusha
lods
xor
fcomp
adc
nop
dec
lahf
stos
(bad)
pop
push
xchg
aad
mov
lods
or
mov
fdivr
and
dec
cmp
inc
add
and
dec
adc
sub
movs
mov
or
in
in
(bad)
leave
rol
add
mov
aaa
mov
cld
mov
(bad)
shl
mov
loopne
adc
mov
pushf
add
pop
cmp
aam
adc
xlat
aam
mov
add
pop
push
and
test
inc
sbb
add
lahf
(bad)
in
in
iret
push
(bad)
test
(bad)
cs
jmp
lea
fisub
dec
test
iret
xor
cmp
ret
imul
out
dec
into
ds
jnp
not
repz
adc
push
sub
rol
sub
fisub
dec
les
push
(bad)
shl
inc
(bad)
inc
sbb
fs
mov
push
scas
ret
lods
pusha
jnp
add
hlt
aam
ret
(bad)
fisttp
xchg
or
pop
cmps
nop
add
push
arpl
pusha
mov
or
rcl
fisubr
or
int3
call
dec
add
mul
mov
xchg
stos
and
data16
mov
hlt
fld
enter
push
push
mov
in
adc
ret
mov
push
push
test
out
mov
ret
and
in
ja
inc
mov
mul
jmp
les
add
dec
and
xchg
cmp
gs
ins
pop
dec
arpl
mov
jns
mov
xchg
pop
dec
popf
add
xchg
jecxz
adc
cmps
xlat
call
push
popf
test
ss
icebp
mov
jbe
(bad)
pop
data16
inc
xor
test
xor
nop
lahf
mov
movs
push
mov
jb
retf
or
sbb
or
pushf
test
daa
inc
mov
jge
jl
mov
movs
mov
push
jne
push
nop
mov
mov
lahf
in
xchg
ficomp
xchg
cdq
adc
(bad)
dec
lock
aas
jp
test
dec
lock
mov
adc
enter
push
jbe
pop
sahf
dec
(bad)
sbb
sub
and
cmps
fld
add
jmp
pop
mov
test
jmp
jae
lock
enter
or
cmps
sub
into
inc
or
movs
adc
sbb
fild
(bad)
mov
lahf
push
je
loopne
sbb
and
mov
mov
xchg
add
sahf
mov
adc
pop
jns
in
and
loopne
mov
mov
scas
fnstenv
test
jnp
mov
xchg
ja
mov
add
jecxz
retf
test
int
mov
cmps
aam
xchg
movs
mov
adc
clc
mov
or
retf
scas
int3
cmps
sar
mov
xchg
add
(bad)
lods
jecxz
jb
retf
ja
xchg
popf
and
jo
leave
ss
ja
stos
pop
sub
xchg
int
mov
jns
dec
test
xchg
fadd
xchg
(bad)
cmp
into
xchg
jmp
sub
inc
lods
test
and
xor
mov
mov
jnp
movs
or
adc
xor
daa
lock
xchg
dec
aaa
push
nop
cli
mov
push
mov
mov
push
movs
cli
mov
mov
mov
pop
jmp
xor
(bad)
les
push
loope
mov
out
fidiv
(bad)
xchg
sbb
(bad)
clc
cdq
mov
or
and
out
mov
dec
cmp
fmul
loop
sbb
xchg
add
or
inc
mov
not
ins
sub
fldcw
ret
or
pusha
lock
shl
sahf
fidiv
add
jmp
test
fst
shl
xchg
out
popf
and
imul
and
mov
xchg
xor
popf
shr
test
int
jb
mov
push
mov
int3
(bad)
mov
clc
xlat
test
(bad)
cmp
cmps
pop
aas
popf
cld
mov
mov
cmp
ret
loopne
or
pop
test
shr
hlt
cmp
xchg
ret
shr
rcl
mov
in
rol
push
inc
sub
push
shr
inc
je
dec
fidivr
sbb
push
mov
cmps
jnp
add
outs
pop
sbb
sahf
push
mov
xor
aad
mov
mov
inc
and
mov
pusha
mov
push
jl
repz
bound
push
pop
sbb
jbe
pop
push
stc
gs
fdiv
sahf
(bad)
mov
dec
inc
pop
rcr
ins
rcl
aam
into
push
xchg
dec
cmps
jp
push
jmp
and
mov
mov
xchg
ds
mov
mov
imul
div
out
popa
je
outs
mov
mov
(bad)
ins
mov
xchg
leave
mov
nop
sub
xor
mov
mov
test
daa
dec
retf
sbb
push
neg
jecxz
in
push
repz
inc
aaa
ss
jmp
(bad)
mov
cmps
fiadd
xor
mov
mov
sbb
mov
mov
shl
or
sbb
and
xor
mov
jp
mov
lds
lods
push
jge
adc
xor
test
imul
and
jecxz
sub
pop
mov
rcl
ror
scas
jp
or
(bad)
pop
push
call
int3
aad
pusha
stc
aam
jnp
sub
push
stos
mov
retf
aaa
retf
xchg
mov
xlat
xor
pushf
mov
retf
cmp
ror
cmps
mov
aas
pop
mov
and
sub
and
jmp
push
adc
fcmovnu
cmp
dec
mov
fidiv
mov
mov
or
pop
fcmovb
sbb
fcmovb
(bad)
adc
push
cmp
(bad)
jge
ins
(bad)
push
cmp
mov
dec
(bad)
inc
sub
adc
sbb
adc
jge
fwait
cdq
mov
mov
lock
lods
sbb
pop
fs
jge
push
outs
push
xchg
mov
lahf
pushf
(bad)
xchg
jmp
or
cmp
push
mov
push
sub
(bad)
jmp
mov
(bad)
hlt
fistp
or
mov
jg
and
fnstcw
dec
sub
sbb
fdiv
gs
mov
loop
enter
pop
mov
xchg
mov
movs
pop
sahf
mov
movs
rol
scas
jecxz
aam
lods
loopne
cld
jl
rol
mov
add
xchg
test
sub
jbe
mov
and
and
xchg
rol
mov
ret
cld
repz
mov
call
cmp
sbb
cmp
je
in
cmp
je
sti
mov
cwde
vphaddbq
js
(bad)
lahf
mul
in
adc
add
xor
pop
jge
ins
mov
ret
loopne
pop
jecxz
pop
aam
daa
pop
push
xchg
jnp
or
ficomp
push
lock
or
xor
mov
addr16
sub
retf
outs
outs
cmc
pushf
test
xor
movs
sub
jg
iret
ret
icebp
mov
test
fnstcw
sbb
sub
sub
or
xchg
pusha
lods
push
movs
add
adc
xchg
enter
bound
sbb
loop
xchg
popf
or
push
xor
nop
xchg
sbb
pop
jl
adc
inc
dec
lds
js
mov
jmp
sbb
jge
sub
lahf
pop
jo
mov
add
in
mov
ins
cmp
(bad)
xchg
mov
call
fwait
or
aad
mov
mov
test
push
mov
xchg
sahf
inc
ins
mov
clc
enter
or
test
call
mov
mov
sbb
out
jmp
in
test
es
cdq
loop
jl
es
shr
mov
ss
xchg
add
xchg
ret
pop
xchg
sbb
push
mov
xchg
mov
xchg
adc
ret
and
sub
jmp
xchg
stos
mov
xchg
out
retf
push
fld
out
cld
push
mov
popa
pop
xchg
test
mov
lods
aaa
call
sbb
dec
fst
pop
ins
push
xchg
lods
ret
mov
mov
xchg
xor
inc
call
jle
mov
and
jbe
and
mov
mov
dec
pop
mov
mov
xchg
test
mov
xor
out
popf
inc
or
xchg
inc
ss
mov
iret
pop
or
pop
sti
lods
mov
and
xor
aad
cmp
into
pop
fsubr
adc
sub
nop
xchg
sub
mov
inc
sub
xchg
test
or
call
ret
cmp
and
rcr
into
shr
pop
ret
xchg
repnz
pop
xchg
push
(bad)
push
sahf
xchg
jmp
dec
mov
retf
mov
push
mov
int3
retf
adc
enter
sub
enter
mov
ds
aad
xlat
cmps
std
mov
out
inc
sub
ret
mov
cmp
and
shr
sbb
(bad)
pop
jecxz
pop
aas
xor
and
push
dec
outs
pusha
adc
mov
cmc
sub
push
mov
test
retf
leave
mov
aaa
xchg
lods
out
inc
outs
pop
cmp
mov
pop
imul
cmp
add
movs
mov
lods
lahf
mov
loopne
fdiv
es
jno
sbb
aaa
add
mov
(bad)
adc
mov
xchg
add
jle
pop
jl
xchg
fistp
jle
pop
int3
and
das
in
mov
fisub
call
stos
cmp
add
retf
sub
adc
call
in
jmp
dec
mov
mov
sbb
lods
mov
adc
mov
mov
pop
push
in
jmp
lock
mov
sbb
lock
lods
nop
pop
xchg
mov
add
inc
mov
jecxz
mov
(bad)
outs
xchg
or
pushf
lea
into
pop
(bad)
aad
cld
push
ss
add
fucompp
sti
sbb
rcr
push
(bad)
in
add
ret
jmp
mov
add
push
adc
arpl
fs
dec
xlat
in
xchg
jns
inc
xor
out
and
in
(bad)
xchg
retf
sbb
out
mov
(bad)
std
jmp
loop
cld
movs
inc
fild
add
jg
jmp
cdq
pop
lods
addr16
pop
cmp
adc
in
jo
test
or
test
aaa
push
aas
stos
push
and
sub
mov
or
adc
(bad)
jne
hlt
test
mov
bound
mov
shr
dec
lds
mov
test
addr16
loopne
(bad)
xchg
xchg
enter
rcr
adc
out
ins
push
dec
xor
in
out
data16
ret
xchg
or
popa
mov
mov
(bad)
jg
popf
les
push
xor
push
in
icebp
add
mov
cs
sbb
jle
ret
int3
xor
std
retf
icebp
loopne
xor
inc
repz
or
add
or
outs
push
sahf
inc
sub
sub
retf
test
cli
(bad)
mov
xor
jecxz
clc
sbb
xor
push
cld
int3
rol
pop
jae
hlt
test
adc
jmp
or
fcmovbe
mov
loopne
add
cmp
xchg
adc
mov
jae
xchg
fwait
enter
test
cmp
push
retf
jne
test
les
mov
mov
rcr
adc
aas
mov
and
adc
push
cmp
or
enter
ds
xor
int3
(bad)
and
pushf
ret
mov
in
(bad)
pusha
in
cmp
and
dec
and
punpcklwd
pop
mov
enter
rcl
rol
mov
in
rcl
or
adc
sbb
imul
test
(bad)
cmp
pusha
leave
hlt
add
cld
(bad)
jp
aad
repnz
nop
and
pop
stc
pop
test
nop
add
les
sbb
xchg
pop
in
scas
cmp
jecxz
mov
jmp
sar
xchg
mov
pop
adc
paddq
pop
inc
xchg
(bad)
sbb
std
test
dec
pushf
mov
push
(bad)
mov
les
es
mov
sub
jmp
sub
xchg
push
or
adc
xchg
or
adc
add
int3
shl
mov
mov
pop
into
pop
cmps
and
mov
lahf
pop
not
sahf
aas
inc
(bad)
xchg
adc
aas
mov
(bad)
lea
sub
rol
scas
and
or
cmp
fidiv
aam
inc
inc
int3
retf
dec
jno
cmp
(bad)
mov
stos
enter
and
dec
cmp
dec
outs
into
scas
inc
cmp
pop
pop
aas
xchg
adc
xchg
xor
scas
add
mov
out
xchg
xchg
sub
xchg
into
jne
test
loopne
fmul
lods
add
test
hlt
(bad)
xchg
hlt
(bad)
xlat
clc
fstp
cmp
outs
xchg
cmp
hlt
add
cmp
xchg
cmp
cmps
jg
(bad)
mov
(bad)
mov
adc
cmp
js
add
test
xchg
cmp
xchg
in
add
jmp
mov
inc
add
mov
test
mov
cmp
cmp
aam
ror
aam
lods
add
mov
(bad)
xchg
cmps
adc
cwde
enter
(bad)
ficomp
cld
scas
inc
imul
xor
jg
repnz
fst
(bad)
mov
inc
fnsave
in
add
shl
enter
mov
call
dec
jge
cmp
(bad)
bound
loopne
xchg
sbb
std
(bad)
push
neg
sbb
test
out
je
ret
mov
and
push
jns
cli
push
call
add
mov
push
ds
add
mov
push
sbb
and
fwait
popa
jno
arpl
push
ret
push
mov
mov
push
mov
popf
xchg
in
movntq
cwde
or
das
shr
arpl
(bad)
test
dec
mov
and
lods
popa
jns
push
gs
stos
stos
sub
jmp
push
mov
jb
aam
mov
jo
pop
inc
and
mov
add
pop
and
push
xchg
inc
adc
leave
loopne
sub
jae
sbb
adc
call
lahf
test
xchg
and
sub
jns
and
mov
enter
or
fcom
cdq
outs
sub
enter
sub
aam
ret
mov
movs
jnp
ror
fisubr
mov
sbb
movs
mov
outs
cmp
fild
arpl
loop
movs
adc
lods
ins
or
fdivp
pop
sbb
mov
sbb
xor
jp
leave
cmc
mov
cmp
or
enter
std
dec
fdivr
dec
mov
stos
cmps
mov
mov
mov
jns
pusha
push
(bad)
mov
xchg
(bad)
sbb
mov
jb
dec
test
mov
pop
cmp
pushf
out
jl
(bad)
xchg
sub
xlat
enter
cmp
lahf
aaa
pop
jl
rcr
jne
ret
repz
popf
jg
aam
jae
rcr
les
(bad)
mov
push
jmp
aam
call
sbb
in
jmp
push
mov
ja
fbstp
xor
shr
mov
mov
fcom
loopne
lods
hlt
fsubp
xchg
test
fstp
xchg
adc
jge
pop
packuswb
push
xchg
loopne
ror
xchg
mov
jmp
xchg
cmp
scas
std
loopne
ficomp
enter
jl
iret
pop
test
ror
xchg
mov
iret
add
push
arpl
loopne
mov
call
dec
lea
mov
into
fcomp
push
clc
cmp
or
cmc
jmp
inc
rol
loopne
inc
mov
(bad)
mov
aad
push
test
add
aaa
mov
sahf
xchg
jecxz
imul
xchg
xor
retf
fsubr
adc
cmp
xor
pop
dec
mov
out
add
das
mov
scas
xchg
clc
or
add
rcl
loopne
enter
outs
push
mov
add
loope
sub
in
in
pusha
sub
fisttp
adc
addr16
ds
jmp
test
movs
lods
push
jmp
push
mov
pusha
out
lahf
test
jae
sub
mov
xchg
mov
mov
fisttp
std
mov
mov
rol
adc
mov
out
es
(bad)
sti
int
add
jl
retf
adc
ret
mov
mov
mov
fs
cdq
aam
or
out
adc
idiv
dec
pop
lods
lahf
sub
xchg
push
test
rcl
push
xchg
cdq
adc
jl
mov
outs
add
lds
mov
sar
jmp
das
mov
mov
icebp
repnz
xchg
popa
jp
outs
sbb
sahf
xchg
dec
mov
sahf
pop
popa
jns
jnp
mov
stos
inc
xchg
jle
cdq
call
nop
mov
aam
enter
scas
das
push
pop
sbb
add
mov
add
or
imul
lods
mov
data16
add
mov
movs
mov
mov
push
lds
pop
cli
lods
cmps
push
xchg
in
xchg
rcr
mov
popa
pop
sub
cs
dec
mov
mov
add
xor
push
cmp
pusha
adc
push
mov
daa
dec
pusha
push
mov
fist
call
mov
mov
pop
mov
push
pop
inc
mov
xor
pop
(bad)
sub
lahf
mov
iret
clc
retf
(bad)
dec
enter
xchg
or
clc
ffree
dec
dec
mov
aas
(bad)
shl
inc
sbb
clc
test
outs
sbb
ftst
lahf
cmps
arpl
lods
sbb
or
mov
xchg
xor
ret
(bad)
jmp
add
push
shl
lahf
mov
or
sbb
inc
popa
mov
sbb
ja
scas
adc
pop
mov
call
out
popf
and
jae
sbb
movs
imul
pop
and
(bad)
retf
sub
sub
mov
jecxz
out
mov
mov
sbb
shr
inc
mov
rol
mov
xor
leave
outs
nop
call
mov
inc
or
aad
sub
mov
sbb
es
aad
add
ins
(bad)
xlat
lds
sbb
mov
out
in
(bad)
jl
mov
xchg
stos
xor
xchg
dec
sbb
add
mov
jp
test
jbe
leave
mov
add
arpl
jbe
mov
cli
int3
add
mov
xor
mov
pop
movs
add
nop
mov
(bad)
std
int3
mov
test
pop
(bad)
pop
setne
sub
mov
sbb
jge
or
pop
cmps
sahf
xchg
cmps
clc
cmps
xchg
popf
mov
mov
adc
test
jg
mov
xor
repnz
(bad)
loopne
ret
add
bsr
leave
pop
xor
idiv
cmps
mov
pop
mov
pop
add
xchg
sbb
jge
aad
fdivr
ficom
sub
mov
shl
mov
xchg
mov
mov
test
mov
jne
jns
sar
fxch
and
pop
ss
xor
fadd
loopne
nop
push
rcl
and
jbe
fwait
sahf
hlt
pop
jle
mov
jg
ret
movs
iret
adc
fiadd
xchg
push
ret
imul
xchg
pushf
bound
in
rcl
inc
bound
push
sub
and
retf
or
inc
adc
hlt
xor
and
or
adc
cld
cmps
inc
imul
ret
adc
gs
push
inc
push
pushf
icebp
mov
push
add
ret
fcmovu
mov
or
push
movs
fadd
push
jmp
cmp
in
xchg
fld
adc
mov
mov
loopne
test
jmp
cdq
movs
popa
repz
aad
cli
push
ins
scas
retf
push
int3
xor
jge
pushf
xor
inc
mov
xchg
(bad)
rcr
mov
xchg
jae
fdivrp
xchg
into
inc
(bad)
clc
mov
aad
fmul
pushf
loope
idiv
mov
retf
xlat
fdiv
push
xor
loop
jnp
pop
lahf
std
mov
aam
loopne
jmp
cmp
test
pop
clc
fdiv
test
sti
jg
xor
xor
int3
jl
sub
adc
xor
loope
xor
cld
mov
je
mov
inc
lahf
jae
bound
xchg
and
nop
lahf
cs
retf
mov
xor
lahf
mov
bound
inc
(bad)
mov
lods
mov
xchg
and
pusha
test
mov
jae
xor
mov
enter
sti
or
hlt
jmp
push
retf
pop
addr16
lods
(bad)
inc
xor
or
cmp
movs
adc
xchg
(bad)
ja
push
pusha
mov
icebp
push
mov
xchg
push
sub
daa
shr
xchg
add
retf
and
mov
mov
xchg
sub
mov
loop
pusha
inc
inc
jle
ror
push
rol
scas
mov
or
call
mov
sbb
xor
mov
lahf
clc
lock
sub
mov
add
fidivr
adc
adc
rol
and
mov
sub
mov
sbb
cli
push
repz
xchg
or
cmp
and
cs
and
push
xchg
(bad)
movs
fimul
cmp
scas
or
cmc
in
ficomp
data16
fst
cmp
sbb
rol
push
sbb
in
push
sbb
sbb
pop
xchg
xor
cmp
sbb
adc
xchg
inc
push
pop
push
push
fs
xchg
mov
inc
xor
stc
adc
jecxz
dec
int3
jecxz
xchg
test
sub
xor
shr
lock
fucomip
popa
mov
imul
call
or
sbb
or
mov
adc
and
mov
mov
sub
nop
retf
ss
aam
mov
adc
retf
call
pushf
enter
outs
sahf
and
aad
mov
imul
mov
mov
es
(bad)
loopne
sbb
rcl
les
(bad)
or
push
scas
into
cdq
adc
xor
fadd
test
lahf
xchg
scas
stc
(bad)
in
sbb
pop
lods
push
dec
xchg
call
pmaddwd
push
mov
inc
dec
pop
hlt
mov
mov
rcl
and
ret
ret
enter
sub
lahf
mov
add
adc
mov
fild
cmps
(bad)
lahf
shl
xlat
rcr
xchg
bound
jmp
jbe
pop
in
sbb
sahf
push
cmps
enter
rcl
int3
movs
cmp
ja
aaa
jbe
add
aam
mov
pop
inc
inc
jo
cmc
cmp
rcl
imul
out
in
adc
aas
je
ror
inc
xor
std
iret
cli
lahf
mov
cmp
rcr
adc
cmp
cwde
je
enter
sbb
mov
sub
jno
or
cs
mov
jb
adc
or
cmp
sbb
adc
movs
and
ror
fbstp
add
je
scas
aad
mov
ret
movs
cs
pop
xchg
out
push
out
ins
sub
push
push
sub
jg
mov
popf
pop
nop
jmp
nop
rcl
inc
xor
push
adc
pop
xchg
aam
xchg
sti
xchg
aas
push
pop
cmp
cmp
inc
bnd
push
and
in
pop
xor
imul
cli
sahf
pop
inc
xchg
jbe
cmp
and
inc
cmp
mov
adc
pop
xchg
mov
mov
dec
dec
ror
mov
add
mov
jo
mov
aaa
ins
sub
adc
and
push
add
test
xor
inc
ret
test
leave
shl
and
mov
pushf
fadd
xor
xor
mov
in
je
sub
icebp
push
sbb
and
(bad)
sub
mov
mov
bound
jmp
clc
sub
or
je
cmps
sub
or
div
or
mov
xchg
in
retf
test
out
(bad)
and
movaps
xor
leave
jno
add
daa
rol
call
xor
das
or
outs
inc
out
sbb
push
xchg
movs
dec
shr
(bad)
arpl
rcl
rcl
pop
jecxz
sahf
and
fdivr
adc
add
dec
sar
ret
in
mov
pushf
(bad)
in
aas
icebp
mov
ja
sub
js
ss
add
mov
xchg
in
ds
cmp
sbb
retf
pop
outs
sbb
into
rcr
iret
lahf
sub
mov
push
test
adc
sbb
mov
mov
adc
aaa
mov
cmp
sbb
xchg
and
xlat
fild
fmul
pop
push
xchg
lods
gs
mov
test
daa
push
add
sub
enter
or
call
repnz
mov
cmp
jnp
mov
push
hlt
jecxz
mov
dec
mov
jp
mov
and
jmp
or
sbb
jge
mov
dec
push
lahf
sub
enter
add
in
add
or
cmp
xchg
adc
test
stos
cmp
leave
jg
aaa
push
add
mov
cli
les
adc
add
and
adc
jne
out
push
fstp
movs
out
int
fld
cmp
mov
fiadd
fisttp
retf
jp
add
adc
pusha
add
xor
and
fmul
mov
out
lods
fwait
aam
xor
inc
pop
int3
in
mov
(bad)
aam
outs
movs
stos
popf
dec
daa
xchg
hlt
outs
loopne
mov
and
add
hlt
imul
lds
xchg
inc
xor
lock
inc
sbb
sbb
(bad)
les
aas
fwait
mov
push
or
xor
fst
sti
clc
xchg
add
stos
push
test
(bad)
nop
mov
add
vpunpcklbw
adc
enter
mov
call
or
lahf
add
or
dec
adc
jno
inc
bound
pop
sbb
call
enter
add
scas
fidiv
sbb
or
and
lahf
add
call
fiadd
aam
fadd
cmp
mov
sbb
mov
mov
mov
data16
mov
cmp
leave
sub
add
and
xchg
mov
fcmove
mov
xchg
test
stos
push
(bad)
ss
(bad)
pusha
mov
in
jo
mov
sub
pushf
xchg
hlt
pop
fmulp
je
iret
inc
xchg
sbb
enter
xchg
adc
or
adc
mov
jecxz
adc
mov
fwait
mov
nop
fcmovnbe
dec
mov
dec
ins
test
ins
imul
aaa
fnstenv
imul
leave
xchg
js
fwait
cmp
lahf
cmp
sbb
dec
cmp
enter
hlt
inc
mov
and
pop
faddp
clc
or
outs
mov
and
enter
fisubr
add
sbb
ss
fisubr
inc
cmp
retf
cmp
ficom
fisttp
adc
push
or
in
adc
jmp
fiadd
adc
push
jmp
xchg
xchg
push
pop
cli
js
lods
sub
fstp
jl
inc
push
dec
gs
test
push
or
adc
test
lods
jo
in
and
jp
pop
stos
add
lea
and
sub
push
lahf
ds
ss
push
and
cmps
loope
dec
cmps
dec
nop
mov
shl
pop
test
loopne
fadd
pop
sub
xchg
hlt
ror
push
(bad)
push
mov
or
cmps
jecxz
mov
add
mov
pop
test
mov
pop
stos
jecxz
dec
sub
and
adc
mov
pop
cli
mov
outs
ss
test
(bad)
xchg
sbb
xor
jecxz
call
jg
xor
sbb
nop
je
dec
ins
sbb
mov
ret
shld
lahf
mov
test
mov
pop
retf
out
mov
inc
sbb
ret
dec
enter
jge
mov
(bad)
lods
or
(bad)
mov
sub
clc
add
xchg
pop
jl
loope
add
in
add
sub
(bad)
lods
mov
scas
xor
pushf
xchg
and
xchg
dec
mul
sub
sbb
pop
stos
fld
jae
xchg
adc
test
and
or
pop
mov
cmps
and
push
xor
xchg
inc
jge
mov
outs
mov
in
daa
(bad)
sbb
in
xchg
ja
lahf
iret
pop
movs
in
jg
inc
push
sti
popa
inc
mov
mov
dec
rcl
(bad)
stc
std
xchg
rol
les
push
cdq
adc
fdivp
add
call
add
mov
mov
mov
fcmovbe
aas
add
add
mov
scas
sbb
aaa
test
add
add
(bad)
ds
inc
addr16
retf
mov
(bad)
mov
xchg
xchg
sub
jl
xchg
add
movs
mov
cmp
dec
cs
call
aad
xchg
mov
inc
repz
ffreep
xor
jl
push
or
mov
adc
test
cmp
imul
and
inc
dec
mov
xchg
stos
jne
mov
fnstcw
xor
adc
and
inc
push
out
xchg
imul
aam
or
pop
or
ret
sar
pop
mov
std
or
lahf
xchg
add
fld
rcr
jp
dec
outs
mov
or
sbb
jecxz
(bad)
fwait
movs
cmp
in
dec
push
les
inc
or
mov
cmp
xchg
jmp
aad
scas
call
fmul
enter
sub
test
push
div
xchg
xchg
int3
sar
pop
mov
enter
sub
jge
ret
cmp
loope
shl
test
cmp
in
jns
push
adc
sti
into
jmp
mov
pop
pop
mov
xor
scas
imul
jge
test
or
add
(bad)
fadd
sbb
neg
jge
add
xchg
jmp
scas
in
add
adc
test
add
push
sahf
sar
add
retf
retf
pop
(bad)
pop
je
popf
fsub
dec
fcmovu
mov
xor
cmp
xchg
(bad)
or
xchg
push
and
loope
ret
ficom
enter
mov
jb
fidivr
sub
pop
pop
data16
cwde
rcl
aad
fdivr
xor
cmp
ret
test
ss
mov
jmp
fcom
fadd
jge
dec
xchg
lock
popf
not
dec
mov
(bad)
mov
js
lahf
ins
jns
js
das
mov
xchg
mov
mov
push
stc
jo
or
push
mov
add
clc
(bad)
sbb
xor
cs
pop
ds
pop
mov
clc
sbb
push
imul
pusha
mov
sbb
adc
mov
cmps
jo
mov
lock
into
(bad)
push
daa
dec
inc
clc
call
aam
xchg
mov
sub
adc
sbb
iret
or
and
sub
fist
mov
shr
cmp
sbb
sbb
icebp
dec
mov
daa
ret
pop
xchg
sbb
or
inc
or
pop
jg
es
cmp
fisttp
push
adc
fimul
stos
inc
xchg
mov
cld
inc
add
adc
(bad)
mov
and
rol
xchg
sub
push
dec
dec
out
pusha
outs
(bad)
dec
adc
jmp
imul
xor
push
sbb
(bad)
je
dec
sbb
pop
sbb
test
mov
mov
and
out
nop
out
sbb
xlat
test
mov
and
js
outs
lock
je
dec
ficomp
cmp
es
mov
pop
rcl
mov
push
cmps
push
in
imul
mov
mov
xchg
push
jmp
cs
ret
(bad)
aas
inc
fstp
pop
call
jb
mov
enter
iret
clc
ret
cmp
adc
fst
aaa
mov
lea
enter
enter
dec
xchg
mov
enter
and
jne
push
and
test
mov
adc
and
sub
cmp
xor
mov
mov
jmp
push
call
sbb
rcl
inc
lods
pop
int3
adc
cld
xor
std
les
pop
jb
fsub
mov
xor
ins
(bad)
rcr
inc
push
stos
sahf
add
mov
adc
or
xor
in
jnp
aaa
out
adc
cwde
ds
pop
adc
cmp
adc
push
lea
push
adc
cmp
pop
jb
sub
std
(bad)
jae
out
int3
enter
cmps
test
and
cld
xchg
enter
inc
sar
mov
retf
sub
sbb
out
mov
sub
push
je
jmp
sbb
pop
js
clc
jge
push
jmp
xchg
push
repnz
into
jmp
mov
enter
dec
lea
push
or
fild
xor
sar
jmp
dec
int3
mov
(bad)
outs
lea
enter
mov
dec
fdivr
fisubr
jl
add
clc
rcl
push
add
lods
mov
fwait
sub
mov
shr
mov
inc
not
inc
aad
mov
shr
aad
push
pop
and
sbb
call
call
fisubr
icebp
sub
dec
repz
jno
stos
or
movs
dec
aam
jmp
xchg
xchg
aad
dec
xchg
jge
fwait
loopne
sbb
(bad)
cmp
sbb
fldcw
dec
xchg
lods
pop
in
sahf
movs
pop
sbb
imul
sahf
loop
mov
lods
enter
enter
sbb
lahf
shl
mov
mov
xchg
inc
sar
cld
(bad)
clc
fiadd
sahf
iret
repnz
leave
das
cmps
enter
inc
fmul
fisttp
lods
add
pop
push
arpl
add
shr
(bad)
cmps
(bad)
or
fldln2
mov
pop
cmp
test
cdq
cmps
xchg
cmps
call
repz
adc
in
push
les
pop
outs
mov
dec
lea
outs
add
sbb
bnd
jecxz
sbb
adc
inc
jge
add
pop
test
mov
push
lahf
scas
iret
loopne
lahf
fadd
rol
cmp
jns
jge
mov
mov
(bad)
int
xchg
xchg
clc
lahf
lock
mov
push
cmp
rol
mov
in
dec
pusha
mov
or
push
pop
hlt
stos
push
xchg
mov
adc
ins
in
mov
test
ins
cmps
jle
sbb
pop
shl
jo
ins
lea
repz
scas
cmc
cdq
daa
jecxz
sahf
xchg
xor
jl
push
cld
ins
out
adc
mov
jge
stos
hlt
sub
shl
aaa
jg
push
adc
dec
lahf
mov
mov
or
pop
mov
cld
test
xor
cmps
xchg
and
push
into
idiv
cmps
push
nop
add
ds
pop
cs
cmp
call
mov
xlat
repnz
xchg
aam
cdq
jg
ds
test
popf
mov
pop
bound
hlt
sbb
in
lock
in
neg
scas
adc
and
sbb
or
add
adc
xor
inc
mov
loopne
aam
mov
(bad)
xor
pusha
test
sbb
sbb
aaa
xchg
pusha
mov
dec
inc
les
xchg
xchg
mov
adc
int
rcr
cmp
mov
inc
out
inc
sbb
mov
xchg
pop
jmp
inc
mov
lods
xchg
mov
popf
mov
loopne
idiv
push
inc
fild
mov
cmp
les
ins
dec
not
pushf
movs
mov
(bad)
leave
shr
mov
mov
ror
pop
cwde
xchg
popf
adc
ret
mov
leave
loopne
add
aad
aam
les
pop
call
movhps
scas
scas
push
xchg
arpl
sub
lods
xchg
xor
jl
and
dec
xor
(bad)
gs
sbb
cmp
ror
add
jb
fcom
int3
push
mov
pop
push
sub
test
mov
in
inc
test
push
fucomi
adc
cli
into
fmul
push
adc
mov
retf
jp
or
imul
or
sbb
pushf
push
mov
loopne
mov
aaa
std
leave
push
test
aam
outs
frstor
mov
xchg
adc
dec
add
and
push
add
and
pop
xchg
cmp
inc
sub
xchg
les
lods
xchg
call
cdq
addr16
popa
dec
iret
(bad)
ds
adc
push
or
mov
pusha
ror
add
push
call
pop
and
xchg
out
ins
adc
outs
in
(bad)
sub
stc
cli
mov
mov
test
xchg
mov
(bad)
test
mov
nop
sbb
add
ins
dec
mov
(bad)
scas
leave
xchg
xchg
or
adc
nop
pop
mov
lahf
mov
(bad)
call
xor
lock
lods
xchg
mov
sub
jo
mov
imul
or
pop
jl
pop
inc
repnz
push
mov
or
(bad)
jno
shl
sub
inc
xchg
adc
sbb
in
xcrypt-cbc
cmps
adc
sub
loop
add
repnz
mov
movs
adc
ret
pop
ins
ss
lods
jge
add
(bad)
test
sub
test
mov
add
ja
fild
or
cld
sbb
mov
add
sub
cmp
rcl
fisubr
or
adc
ficomp
popf
leave
pop
loop
fdivr
xchg
or
cmps
pop
sbb
jae
mov
dec
les
push
dec
stos
enter
vorpd
call
rcl
add
or
ds
sub
nop
xor
dec
push
popf
add
outs
ret
push
and
adc
das
cmp
cwde
jl
push
adc
dec
push
xor
sbb
cmp
jl
call
dec
daa
retf
outs
add
or
mov
rcl
sub
xchg
pop
mov
cli
das
retf
pop
or
jecxz
or
xchg
push
mov
pop
or
mov
lahf
in
(bad)
movs
jecxz
push
fsubr
push
sub
in
or
dec
dec
lods
push
or
mul
xor
pop
or
pop
pushf
out
push
ret
(bad)
xchg
(bad)
retf
test
mov
mov
fcomp
ret
push
retf
dec
or
pop
mov
leave
mov
xor
push
cwde
mov
repz
scas
sub
mov
mov
jge
test
scas
mov
ret
retf
add
pop
mov
cvtps2pi
inc
sub
pop
cld
jecxz
xchg
loopne
xchg
jg
imul
jl
mov
mov
jns
gs
mov
xor
ret
vrsqrtss
movs
call
clc
dec
cmp
xchg
sub
cmp
adc
stos
sub
lahf
scas
xor
mov
movs
popa
sub
daa
rcl
adc
imul
and
mov
jmp
ret
dec
(bad)
push
mov
inc
test
push
ficom
jns
loope
jge
push
xchg
push
and
ficom
lahf
call
mov
es
retf
sub
sbb
add
ret
fmul
sbb
fistp
retf
pop
add
clc
xlat
repz
scas
sahf
mov
sbb
mov
loopne
xchg
enter
xor
xor
xchg
add
iret
int
xor
mov
jge
mov
inc
hlt
or
rcr
shr
dec
(bad)
push
or
push
sub
test
pop
aam
shl
pusha
xchg
aad
nop
fidiv
hlt
xchg
push
inc
lods
jo
jbe
cli
mov
push
fwait
imul
jle
in
test
int3
pop
fisttp
jl
adc
lahf
in
add
div
sbb
sbb
(bad)
sbb
outs
mov
mov
cmp
imul
popf
or
cmp
xor
std
xor
and
shl
mov
in
add
mov
cs
pushf
or
test
xchg
adc
xchg
jle
je
and
xchg
pop
test
push
test
xlat
mov
aad
sti
or
mov
hlt
mov
xchg
xor
sbb
shl
mov
adc
xchg
lds
sbb
pop
in
retf
sub
dec
mov
push
dec
outs
retf
mov
dec
aad
bound
lea
xchg
pop
lea
or
ficom
fcom
xchg
pop
mov
add
push
sti
xor
mov
(bad)
mov
ror
and
adc
js
ret
je
mov
pusha
push
mov
xchg
ins
jo
aaa
xchg
pushf
sbb
fadd
les
mov
xchg
mov
mov
test
movs
or
mov
je
stos
aas
sbb
xor
xor
mov
aam
(bad)
cmps
les
inc
clc
pop
mov
xchg
and
mov
xchg
mov
lock
adc
in
mov
xchg
fbld
neg
sbb
aam
cmps
or
aad
xchg
aam
neg
dec
nop
xchg
aad
mov
xchg
xchg
rcr
cmp
xchg
sub
iret
and
jecxz
xchg
pop
adc
push
mov
mov
mov
push
dec
cmps
js
je
adc
mov
data16
fs
mov
js
xchg
mov
xchg
jl
test
mov
mov
and
mov
lods
sbb
fdiv
(bad)
enter
cdq
(bad)
adc
int3
mov
xchg
and
push
(bad)
cmps
cld
xchg
mov
mov
mov
pusha
sbb
adc
and
aad
mov
mov
and
cmp
adc
inc
test
cwde
mov
fild
mov
adc
xchg
rcl
adc
mov
sbb
sbb
mov
movs
pop
pop
jo
pop
sbb
push
stos
gs
(bad)
push
in
loop
adc
hlt
in
rcr
jbe
mov
ss
add
or
dec
and
(bad)
jle
mul
xchg
pop
fmulp
cmp
test
test
repz
add
push
and
adc
dec
leave
das
lahf
ret
cmps
mov
inc
mov
dec
cmc
retf
fdivr
mov
loope
shl
pushf
sbb
popf
ja
push
mov
or
aas
mov
js
jg
adc
push
pop
movlps
mov
push
aam
into
dec
xchg
jo
mov
push
sub
jae
mov
mov
xchg
adc
cwde
popf
cmps
jge
scas
cmp
push
dec
je
addr16
xchg
mov
dec
jae
mov
jl
mov
in
xlat
sbb
clc
fadd
sbb
mov
or
test
cmp
xchg
push
in
rcl
and
cmp
adc
xchg
(bad)
xchg
imul
sahf
mov
sar
mov
(bad)
hlt
add
call
mov
test
shr
outs
mov
in
bound
lock
jmp
mov
std
scas
ret
test
jmp
add
mov
jg
fwait
aam
out
popf
popa
xchg
out
xor
ret
lods
push
in
jmp
(bad)
jge
aam
(bad)
(bad)
mov
jg
pop
fsub
dec
ja
(bad)
sub
adc
lds
push
sar
clc
push
push
in
pushf
xor
ror
sub
jo
in
dec
lods
call
in
xchg
icebp
(bad)
dec
xchg
leave
test
pop
push
mov
mov
ret
(bad)
cmps
xchg
rcl
or
test
xchg
xchg
(bad)
add
fadd
push
sbb
retf
ds
pop
in
mov
add
ins
push
std
pop
jl
xor
cld
pop
test
mov
jp
pop
xor
sbb
loope
xlat
outs
test
es
test
out
rcl
(bad)
mov
test
aad
mov
shl
popf
das
sbb
shl
add
lods
pushf
dec
adc
xchg
fwait
xor
das
stos
xor
fiadd
pusha
nop
jmp
mov
shl
add
out
inc
dec
mov
cmp
mov
jecxz
lods
dec
add
xor
cmp
int3
arpl
leave
popa
sub
jae
mov
jnp
enter
daa
(bad)
sbb
push
jne
xchg
sub
mov
aam
mov
dec
mov
sbb
cmp
ja
loop
jo
xchg
pushf
push
ja
push
sub
mov
jmp
lahf
sub
shr
xchg
jae
xchg
push
jbe
push
jp
sbb
or
es
mov
mov
and
daa
cmp
ss
or
aam
int3
sub
loopne
mov
fsub
xchg
retf
nop
popa
(bad)
xor
push
add
xor
daa
xchg
leave
xchg
enter
daa
ret
cdq
mov
rol
pop
addr16
(bad)
(bad)
add
leave
and
(bad)
loop
xchg
and
lea
jmp
push
or
or
jecxz
cmp
adc
rol
mov
imul
ins
lds
test
or
mov
(bad)
or
lds
stc
cmp
retf
or
int3
adc
aaa
mov
lahf
mov
loop
jmp
or
xor
push
mov
call
mov
popa
ret
outs
out
jmp
pop
xor
inc
test
xchg
mov
sbb
mov
and
push
cmp
outs
mov
or
mov
jecxz
cs
rol
bnd
ret
gs
pop
mov
and
idiv
je
or
mov
adc
fld
mul
sbb
jno
lock
int3
adc
xor
sar
mov
in
cli
xchg
push
and
lgdtd
inc
retf
push
xchg
int3
jg
movs
jbe
mov
rol
jle
stos
mov
dec
ret
adc
les
rcl
pop
pop
fcmovne
cmps
fnstsw
rcr
adc
push
sub
into
xchg
jl
push
adc
ret
aam
mov
popa
xchg
sub
mov
xchg
pop
fmul
test
fdivr
mov
xchg
ds
xlat
and
jo
inc
repnz
jns
pop
jmp
add
mov
push
aam
enter
and
aam
(bad)
sahf
xchg
lods
sar
adc
adc
ret
int
fnstcw
enter
and
imul
movs
xchg
inc
arpl
jl
daa
stc
push
adc
xchg
sbb
inc
mov
(bad)
nop
push
outs
xchg
mul
cmps
nop
cdq
mov
xchg
aam
add
(bad)
stos
xchg
scas
in
lods
jl
daa
(bad)
into
push
xchg
sahf
jmp
(bad)
in
xchg
push
int3
imul
sbb
pop
scas
and
in
test
cmp
push
push
pop
pop
jg
popf
fidivr
mov
es
sub
mov
jg
ret
or
ds
push
lods
sub
int
jb
mov
retf
mov
out
scas
pop
data16
nop
jmp
xor
cmp
leave
sub
les
(bad)
push
inc
sub
enter
jmp
xor
(bad)
xor
test
das
pop
mov
mov
int
push
mov
(bad)
aam
imul
lods
and
pusha
sbb
xor
sbb
pop
pop
loopne
jg
push
xor
je
test
enter
push
xchg
cmp
add
xchg
test
cmps
iret
xchg
test
sbb
xchg
mov
(bad)
mov
idiv
hlt
pusha
leave
pushf
sbb
(bad)
and
dec
retf
xor
pushf
test
loope
test
clc
aas
cs
push
cmp
inc
out
inc
leave
fidiv
clc
lea
pop
les
mov
das
and
mov
loope
sub
jge
add
test
(bad)
mov
mov
enter
and
add
cmp
fabs
inc
movs
fidivr
mov
out
in
hlt
adc
push
and
push
and
dec
cwde
(bad)
and
push
movs
dec
pop
test
pop
dec
fadd
mov
test
mov
xchg
ret
(bad)
in
fcom
mov
scas
push
aam
jle
cmps
pop
or
mov
pop
fcmovbe
jge
ss
ret
mov
enter
mov
loopne
stc
pop
pop
fmul
push
mov
call
pop
out
xchg
in
dec
test
retf
aad
push
xchg
lods
data16
push
xlat
nop
ret
add
push
jbe
pushf
add
in
cs
fcom
jl
es
xchg
es
outs
mov
pop
or
xchg
arpl
ficom
mov
pop
ds
mov
cld
enter
inc
test
mov
mov
mov
shr
fisub
movs
lods
call
push
movs
xchg
ret
xlat
mov
stc
js
pop
push
iret
mov
cmp
es
pusha
popf
cmps
jmp
cmc
mov
mov
jg
xchg
data16
sub
inc
xchg
ins
sbb
in
test
ret
ins
imul
xchg
pushf
xchg
jo
push
jnp
arpl
pop
imul
cmc
pop
dec
mov
xchg
sbb
das
loopne
fcmovbe
sbb
dec
rol
ret
(bad)
and
push
inc
mov
(bad)
jmp
icebp
mov
clc
add
pop
iret
adc
inc
mov
sbb
push
pop
dec
mov
pop
lods
stos
popf
and
mov
sub
into
add
jmp
sahf
shl
cmp
enter
sub
adc
mov
sbb
leave
sbb
test
test
out
(bad)
in
fstp
cmp
ffreep
in
aas
mov
ja
ret
(bad)
mov
or
ins
inc
clc
cmp
xor
ja
xchg
push
sub
test
enter
imul
jmp
outs
ficom
or
push
pushf
adc
rol
cmp
aas
cmc
(bad)
lahf
inc
dec
(bad)
sar
leave
fistp
iret
xor
jl
fnstenv
ror
mov
cmps
stos
(bad)
nop
nop
mov
push
fdivrp
ins
xchg
cmp
jmp
pop
fwait
(bad)
mov
nop
dec
ja
sub
arpl
push
pop
mov
pop
mov
nop
add
fistp
outs
(bad)
and
leave
leave
(bad)
jl
inc
mov
pushf
rol
mov
dec
cmp
sbb
add
push
test
mov
je
mov
push
out
pop
sbb
fstp
sub
sub
cmp
lods
dec
inc
pop
ds
retf
push
adc
pop
fidivr
rcl
mov
test
enter
imul
xlat
popa
test
enter
xchg
retf
lods
jbe
setl
adc
jo
xchg
mov
(bad)
adc
fnsave
(bad)
cli
jl
imul
mov
mov
xchg
or
hlt
pop
fstp
jmp
lods
xor
jl
adc
mov
cli
add
inc
jnp
cli
fs
pop
ffree
test
stos
(bad)
into
mov
gs
push
add
(bad)
ins
iret
mov
xchg
jl
ds
fs
and
(bad)
push
dec
mov
xchg
stc
enter
adc
ret
cmc
out
mov
xchg
dec
sub
dec
retf
xlat
test
(bad)
in
xchg
or
shl
xchg
mov
adc
fchs
enter
xchg
sbb
cs
arpl
imul
xchg
pop
push
cld
enter
fst
xor
jo
imul
scas
mov
mov
push
and
mov
leave
mov
ret
cs
cmp
and
jne
mov
pop
xchg
dec
xchg
cmp
test
fisubr
cmp
lods
inc
pushf
rcr
pop
ja
xchg
pop
cmp
jae
les
or
jmp
sbb
mov
out
add
mov
fst
pushf
mov
mov
fwait
scas
retf
inc
jecxz
push
shr
in
jp
or
not
das
scas
sub
sbb
jl
add
cli
inc
dec
(bad)
and
and
jle
fxch
ret
(bad)
es
iret
das
pop
test
cmp
ret
test
imul
jl
or
cmp
rcr
fadd
popa
int
test
mov
mov
imul
sti
xor
xchg
jmp
call
xchg
push
or
imul
aam
mov
(bad)
lods
dec
aam
sbb
xchg
mov
mov
pushf
mov
pusha
nop
test
mov
shl
movs
add
call
xchg
pop
neg
mov
adc
push
add
dec
xor
ror
in
jmp
retf
xchg
mov
push
pop
jp
xchg
popf
mov
jg
mov
jmp
ins
adc
(bad)
cmps
call
iret
sub
adc
sahf
aaa
cmp
lods
fs
sbb
dec
sub
xchg
repz
xchg
fld
mov
test
xlat
cmc
push
push
jl
xor
mov
mov
xchg
mov
rcl
xor
fcomp
out
retf
push
dec
xor
js
xchg
cmp
arpl
retf
popf
push
jmp
dec
imul
jg
push
jbe
(bad)
aad
(bad)
mov
pop
ds
cmp
sbb
jne
xlat
sub
addr16
and
jge
inc
stos
pop
adc
adc
push
xchg
test
mov
fcomp
fnstcw
stos
rcl
jb
frstor
mov
(bad)
pusha
and
loop
pop
lods
arpl
popf
rol
shl
jns
cwde
mov
loop
pusha
mov
es
sar
xor
cld
adc
push
mov
in
xor
(bad)
sbb
movs
fnstsw
mov
in
xor
or
pop
loopne
popa
dec
inc
popf
test
enter
pop
mov
cmc
pop
xchg
in
mov
hlt
movs
lods
mov
mov
ss
pop
jno
jmp
pop
cmp
mov
mov
add
xor
mov
pop
scas
jae
mov
xchg
out
mov
imul
test
mov
fldcw
int3
and
dec
(bad)
cmp
jle
mov
jbe
and
mov
aaa
(bad)
xor
jle
std
sbb
ret
pop
mov
jmp
gs
inc
cwde
cld
movs
bound
adc
das
pop
push
gs
mov
mov
movs
sub
sbb
aaa
sahf
xchg
add
in
popf
mov
jb
push
ins
add
mov
js
mov
fwait
out
scas
and
cmp
in
hlt
int
ffreep
icebp
xchg
rol
pop
fsub
jno
ret
stos
imul
gs
addr16
cli
sbb
xchg
xor
xchg
aad
jge
sbb
adc
gs
jmp
test
push
add
cmp
iret
pop
rol
dec
fst
ins
xchg
add
fisub
mov
sahf
pop
cmp
mov
sub
leave
test
loop
pusha
ret
lahf
sub
sbb
push
sahf
xchg
(bad)
jmp
mov
(bad)
push
rcr
lahf
adc
cmp
sbb
xor
push
ret
das
or
repnz
xor
dec
jb
test
mov
inc
adc
sbb
mov
sti
retf
lahf
nop
push
mov
mov
jmp
lods
out
jmp
lods
repnz
mov
ds
in
sahf
in
xchg
xchg
mov
or
mov
cmp
(bad)
leave
outs
js
sar
adc
repz
mov
adc
jmpw
sbb
pop
ficom
mov
sbb
dec
cmc
std
idiv
outs
movs
inc
xchg
add
ja
pop
in
lods
(bad)
mov
mov
fs
aaa
call
or
push
rcr
in
cmps
add
or
pusha
(bad)
pop
shr
loope
xor
push
xlat
nop
call
sbb
dec
jl
mov
ret
or
jnp
into
shl
in
lock
imul
jle
pop
scas
js
jns
mov
push
retf
jecxz
dec
fst
or
ret
and
fwait
call
inc
push
jmp
dec
jae
xor
out
adc
dec
lock
aad
sbb
add
out
rcr
rcl
mov
ds
sbb
(bad)
in
mov
stc
mov
sar
jge
xchg
lods
(bad)
cld
inc
xor
pop
je
dec
mov
push
jne
ins
popa
int3
leave
adc
or
push
ror
bound
test
sub
inc
cmps
pushf
loopne
addr16
sbb
jecxz
mov
cdq
add
dec
movs
add
jecxz
pop
rol
sbb
fs
rcl
push
mov
sbb
jge
sbb
jmp
mov
cmps
dec
xlat
int
push
mov
std
jb
movs
loope
push
fidivr
jne
jns
fwait
sub
hlt
movs
pop
inc
mov
pushf
inc
aaa
and
mov
xlat
inc
sub
push
fnstenv
mov
vcvttss2si
xor
or
pop
daa
fild
pop
sar
jp
xor
les
popa
inc
or
xor
aaa
imul
jns
shr
call
movs
adc
test
enter
(bad)
movs
jmp
stos
nop
inc
jge
mov
jmp
push
popf
mov
push
mov
sar
loopne
jg
mov
cmp
xchg
push
ins
ins
cwde
adc
ret
iret
test
les
mov
ins
cmp
aad
jl
sub
test
mov
shl
sbb
daa
or
ror
sbb
stos
sbb
stos
xchg
retf
push
sub
xchg
clc
jmp
xchg
and
popf
and
mov
mov
int
mov
aam
and
xor
pushf
(bad)
xlat
adc
dec
mov
inc
dec
or
jbe
pop
shr
ret
jnp
mov
(bad)
jmp
pop
pop
call
sbb
mov
fistp
out
je
aad
aad
xlat
rcr
sub
or
(bad)
xchg
add
adc
push
pop
xchg
popa
pop
mov
or
test
xchg
mov
push
sahf
not
lods
clc
adc
ins
jne
int
sub
push
cmp
adc
test
in
jg
imul
jle
mov
into
xchg
push
dec
fwait
or
dec
not
xchg
adc
mov
adc
adc
and
or
mov
xchg
fcom
adc
movs
div
shl
mov
je
not
shr
mov
je
test
pop
cmp
jecxz
sbb
xchg
mov
xchg
push
jecxz
lahf
out
xchg
mov
jo
lods
call
shl
sbb
sbb
and
dec
(bad)
clc
popf
mov
in
dec
cmps
or
dec
pushf
sub
mov
pop
pop
cmc
xchg
mov
mov
sub
mov
in
sbb
loopne
or
add
adc
or
push
cmp
ret
sub
stos
mov
push
pushf
pusha
adc
pop
mov
mov
rol
adc
pop
inc
rol
not
and
(bad)
(bad)
addr16
xchg
mov
je
xchg
jl
and
inc
ja
cmp
and
adc
adc
(bad)
iret
test
nop
cmps
mov
pushf
pop
adc
movs
lods
sar
inc
xor
xlat
int
jb
fisubr
jae
test
xchg
mov
mov
xchg
popf
sub
mov
push
add
aas
je
mov
xchg
mov
out
inc
sbb
int
sbb
xor
mov
mov
jg
cmp
out
xchg
mov
sbb
mov
pop
or
or
mov
push
imul
(bad)
mov
xchg
(bad)
in
(bad)
fisubr
inc
retf
cmp
cmps
dec
shl
ror
and
xchg
mov
xchg
jbe
test
mov
jmp
loopne
and
in
and
sbb
sub
mov
aad
pushf
mov
dec
sbb
or
xchg
repnz
push
in
(bad)
rol
mov
xlat
pusha
or
mov
lea
in
jae
mov
out
xor
mov
shr
sub
loopne
xchg
out
scas
clc
pushf
fcomp
rol
pusha
test
mov
adc
pushf
mov
das
push
stos
jo
mov
and
aam
loop
mov
(bad)
cmps
rcl
mov
or
cmp
cmp
mov
fwait
shl
pushf
or
pusha
adc
popf
out
vpmacsdd
(bad)
mov
pop
lahf
pusha
(bad)
stc
out
mov
scas
xchg
mov
adc
mov
adc
xchg
ret
shl
pop
fdiv
fs
push
sbb
mov
sbb
push
adc
aad
mov
and
mov
adc
push
xchg
xchg
and
mov
mov
adc
mov
xor
mov
mov
and
mov
add
jmp
outs
dec
mov
mov
adc
xor
add
jmp
dec
or
xchg
nop
sbb
test
aad
inc
add
mov
sbb
call
dec
jbe
jo
adc
dec
lds
inc
jne
push
jle
lahf
jecxz
inc
jge
outs
mov
repz
scas
cli
mov
and
jnp
pop
mov
iret
mov
xchg
stos
inc
push
xchg
rol
imul
pop
mov
push
lahf
inc
fs
(bad)
adc
call
mov
movs
test
xor
frstor
ficom
mov
sbb
xchg
bound
sub
push
aad
retf
cmp
xor
push
enter
add
test
(bad)
push
loopne
(bad)
adc
jmp
push
xchg
add
lahf
mov
xchg
loop
push
mov
bound
inc
ret
pop
loopne
add
out
movs
ins
inc
lahf
inc
inc
loop
mov
test
div
xchg
jg
int
into
xor
sbb
rol
pop
mov
xchg
sahf
inc
push
nop
or
hlt
jge
ja
lods
push
push
mov
jnp
cmps
in
and
jne
jecxz
ret
pop
mov
jg
into
sahf
and
enter
out
or
mov
aam
xor
idiv
inc
psrlw
xchg
fmul
mov
fcomp
aas
sbb
ror
adc
loope
leave
push
cmc
xchg
cmp
int3
idiv
add
(bad)
enter
jle
mov
repz
scas
jecxz
fs
das
aaa
xchg
mov
call
mov
push
lds
test
fsubr
sbb
loope
(bad)
pop
std
js
dec
lods
test
repz
fisubr
xchg
mov
ins
dec
lahf
xchg
pop
push
xor
lock
xchg
sbb
jne
add
(bad)
mov
mov
fist
xchg
test
test
lahf
in
enter
mov
fs
sub
ss
push
adc
imul
aad
adc
mov
mov
test
jne
mov
add
repnz
push
dec
div
das
lea
jmp
icebp
lahf
jecxz
ret
(bad)
push
mov
jo
out
(bad)
mov
out
mov
lds
sbb
imul
xchg
jmp
sub
inc
or
and
mov
cmp
lods
adc
inc
dec
mov
stc
test
(bad)
pop
and
and
mov
lds
inc
inc
daa
mov
mov
push
dec
out
mov
mov
mov
pop
cmps
inc
adc
mov
(bad)
pop
inc
sub
fwait
and
xor
add
lahf
pushf
push
outs
rol
mov
sub
in
and
add
inc
mov
sqrtps
push
cmp
in
or
xchg
adc
xor
jg
xchg
jnp
push
fld
loopne
mov
icebp
ficom
shl
rcl
xchg
int3
mov
fdivr
jo
push
add
aam
jmp
(bad)
int3
mul
call
xchg
call
aad
rol
nop
xchg
xchg
jl
lock
cmp
cmpxchg
sub
(bad)
jno
add
inc
das
mov
mov
mov
pop
dec
mov
jg
out
sbb
(bad)
out
xchg
test
hlt
or
push
loopne
jmp
and
(bad)
sbb
jg
mov
popf
xor
sahf
inc
cmp
mov
xchg
(bad)
cmc
mov
mov
jno
pop
add
mov
fs
cdq
enter
daa
dec
shl
pushf
adc
daa
daa
inc
cmp
mov
(bad)
xchg
loopne
push
xor
ja
int
or
adc
or
jge
test
test
call
xchg
retf
push
adc
xchg
(bad)
pop
adc
push
clc
push
sbb
aam
mov
mov
jnp
mov
inc
jl
xchg
mov
mov
dec
fist
lods
push
shl
pop
and
(bad)
(bad)
mov
dec
adc
adc
mov
imul
mov
or
xchg
xchg
mov
push
shl
push
nop
leave
sub
(bad)
pushfw
mov
jg
loopne
shr
xchg
call
mov
sahf
(bad)
mov
push
ret
ret
in
fcmovnb
cmc
dec
(bad)
adc
pop
das
hlt
mov
mov
add
call
dec
stos
lea
xor
jns
jo
jecxz
jg
in
push
mov
shr
lahf
cdq
cmp
jecxz
stos
mov
sbb
fnstcw
dec
pushf
push
jg
xchg
fcom
(bad)
jecxz
sbb
(bad)
call
lahf
test
push
jg
jbe
pusha
add
push
jg
xchg
mov
mov
(bad)
adc
lods
mul
xchg
jae
mov
mov
int3
xchg
sbb
inc
xchg
mov
cwde
dec
mov
fdiv
enter
enter
adc
mov
cmp
add
jge
push
pop
shl
(bad)
jae
fs
xchg
adc
aam
pop
sbb
jge
int
(bad)
mov
aaa
jns
in
fwait
test
mov
inc
pop
stos
test
pushf
loope
test
mov
mov
jmp
pop
jo
or
test
pop
jne
dec
pushf
fld
fwait
lods
push
test
sbb
and
fld
sysret
xor
(bad)
movs
xor
mov
xchg
mov
mov
cmc
or
mov
int
loop
xchg
syscall
lahf
cmp
mov
mov
add
adc
data16
cmps
mov
shl
xor
cmc
jg
out
push
(bad)
cld
in
sbb
loope
dec
(bad)
pop
mov
dec
adc
pop
ret
test
std
aaa
shl
cmc
mov
lea
or
outs
inc
add
adc
mov
lods
xchg
jns
mov
movs
push
or
mov
int
xlat
outs
ret
mov
push
sti
es
sub
fmul
nop
add
ins
test
mov
dec
clc
jo
rcr
mov
leave
mov
mov
sub
outs
jp
jo
mov
addr16
sub
test
int3
xchg
movs
imul
in
ss
int3
xor
jge
test
ret
xor
es
(bad)
mov
stos
lods
jo
fadd
fdiv
rcr
lds
adc
jbe
ins
jns
lods
jg
mov
pop
lahf
int
cli
mov
xchg
mov
sub
inc
xchg
sar
fdivr
adc
test
stos
and
jl
mov
mov
lahf
repnz
jge
fdivr
pop
and
xchg
mov
repnz
jo
push
mov
mov
inc
aam
scas
sbb
loopne
(bad)
pop
ret
hlt
lahf
adc
mul
inc
add
cmp
les
dec
mov
jb
sub
test
sbb
pushf
stc
out
jecxz
cmps
adc
cmc
inc
push
mov
cmp
push
movs
ror
xor
push
out
(bad)
lds
int3
(bad)
jecxz
push
cld
mov
or
call
pushf
mov
mov
mov
rol
mov
aam
add
arpl
rcl
adc
ret
xor
add
cmp
mov
fadd
mov
and
aad
mov
in
jg
xchg
outs
mov
xchg
add
int3
adc
mov
jno
outs
dec
mov
mov
xchg
mov
xor
retf
add
xor
popa
mov
sub
fimul
pop
jle
ins
test
sub
sahf
jp
or
sub
mov
adc
pop
loop
sbb
and
aam
retf
jp
mov
mov
sub
mov
jns
fnstcw
retf
xor
je
sar
sahf
sbb
inc
fisub
pop
sbb
popf
dec
pop
jecxz
adc
retf
in
ds
(bad)
pop
push
xchg
jge
outs
test
mov
push
dec
push
js
xor
leave
daa
jmp
mov
xchg
mov
jp
sbb
jge
adc
push
pop
mov
mov
mov
fcom
jg
cmc
mov
push
fcomip
adc
popf
fmul
call
cmp
cmp
xchg
push
pop
or
mov
sub
mov
xchg
adc
leave
retf
jp
sub
inc
mov
mov
les
mov
push
jmp
imul
out
adc
or
pop
fst
enter
movs
addr16
jecxz
jmp
or
in
jno
(bad)
and
push
sbb
test
ss
mov
cmp
fmul
pushf
pop
sbb
pop
push
add
xlat
loopne
ins
cmp
popf
popf
or
mov
in
cld
xlat
call
clc
mov
lock
fld
push
out
jnp
sbb
xor
push
fdivr
push
push
sti
lods
popa
ss
int3
scas
jns
retf
ret
pop
xchg
es
in
fld
cmp
push
or
pop
sbb
push
arpl
scas
sar
mov
das
enter
jg
jge
adc
mov
xor
ins
sbb
jecxz
je
push
xor
push
sub
sbb
push
jl
addr16
in
sub
mov
push
mov
scas
les
jecxz
xlat
ss
xchg
add
pusha
popf
adc
ins
mov
adc
add
pop
pop
inc
jo
jge
inc
pop
dec
mov
push
(bad)
(bad)
lahf
in
iret
dec
jle
stos
(bad)
pop
push
push
push
inc
popf
push
dec
shl
ret
int3
stc
mov
sbb
in
and
call
imul
mov
sub
out
inc
push
mov
inc
mov
fmul
fmul
neg
sbb
sbb
lahf
enter
mov
sub
pop
add
mov
add
mov
repnz
adc
push
(bad)
in
fdiv
or
push
nop
or
mov
cdq
mov
mov
rcl
lea
stos
in
xor
add
dec
mov
popf
cdq
sbb
pop
shr
das
cmp
push
mov
leave
or
dec
add
in
and
test
mov
fnsave
scas
jg
ins
inc
fisub
mov
mov
cmp
dec
mov
mov
jb
and
pushf
call
jno
mov
ds
sbb
add
cmc
ror
fsubr
fadd
sub
js
cmp
push
jle
adc
test
js
jle
mov
sub
mov
jecxz
pop
ret
mov
std
push
jp
shl
(bad)
sbb
loop
movs
push
lock
push
rcl
in
adc
sbb
nop
fisttp
leave
xchg
stc
(bad)
sub
sbb
adc
push
cmp
sbb
ins
jl
xchg
jge
sbb
xor
fisubr
adc
xchg
mov
mov
pop
(bad)
loopne
xchg
mov
xchg
pop
fsub
sub
pop
and
xor
dec
aam
or
pop
and
add
rol
sahf
push
pop
xor
mov
rol
mov
icebp
(bad)
adc
xchg
movs
out
pop
jns
cmps
cmp
pusha
push
(bad)
ret
inc
lahf
dec
adc
push
mov
pop
mov
nop
xchg
push
into
cmc
add
dec
mov
loopne
inc
inc
pop
mov
jae
retf
iret
or
add
aas
jb
xor
(bad)
fcmove
test
or
(bad)
loopne
mov
lods
adc
pusha
xor
lds
jb
enter
rcl
push
fcmovu
mov
leave
loopne
test
test
push
cmc
outs
cmp
aaa
fild
sub
loopne
push
sbb
imul
fucomip
(bad)
push
inc
repnz
in
test
jg
out
pop
dec
test
test
(bad)
jp
cmp
and
mov
sbb
mov
mov
imul
xchg
and
inc
sub
sbb
adc
cmp
ror
sub
lds
pop
push
xchg
sar
mov
pop
dec
dec
(bad)
mov
sub
in
cmp
mov
jl
in
push
je
add
repnz
xor
rcr
xchg
cdq
sub
enter
popa
mov
xor
loopne
out
das
out
xchg
retf
pop
cwde
inc
xchg
nop
pop
test
cmps
cli
jmp
imul
in
lahf
add
ja
test
jecxz
mov
push
push
cli
shr
ins
inc
rcl
retf
xor
fwait
pushf
jmp
mov
stc
jne
push
xchg
test
fnstsw
xor
dec
push
iret
fninit
ja
pop
in
jns
fldenv
inc
inc
add
mov
sub
ins
shl
test
call
pushf
mov
or
xchg
push
outs
push
and
mov
test
scas
lds
pusha
xor
cmp
push
aam
les
mov
stc
loopne
movs
lods
fst
ins
xchg
jmp
fnstsw
mov
inc
sub
(bad)
pop
sub
push
sahf
sub
in
inc
pop
add
test
imul
test
pop
xor
retf
int3
in
(bad)
xchg
enter
movs
(bad)
lock
sbb
je
shl
push
repnz
ret
xchg
ins
aam
rcl
leave
push
leave
pusha
cld
xor
fld
xchg
adc
pusha
enter
mov
(bad)
jns
add
fiadd
xor
inc
push
mov
fstp
arpl
or
call
in
jbe
aam
push
jmp
adc
mov
ins
add
xchg
pop
cmps
shr
lock
and
mov
je
mov
(bad)
retf
xchg
adc
xchg
ret
pop
sub
mov
hlt
mov
inc
hlt
aas
sub
mov
mov
cmp
iret
xchg
push
test
mov
bound
inc
adc
ins
xchg
push
pop
push
xor
inc
cwde
nop
lods
push
ja
or
scas
mov
ins
xchg
mov
into
dec
(bad)
mov
and
xchg
sahf
pop
push
mov
sahf
ret
or
inc
push
cwde
xor
loop
mov
jmp
(bad)
mov
xchg
xchg
adc
icebp
or
faddp
mov
sbb
sbb
ret
outs
faddp
push
push
adc
xchg
or
pop
mov
enter
add
(bad)
mov
ror
das
fidiv
jle
inc
xor
add
das
test
lea
dec
mov
mov
add
pop
lods
pusha
cdq
adc
mov
fwait
pop
push
sub
in
(bad)
sub
enter
fstp
lods
push
ja
test
test
or
push
lods
sar
ror
cmp
aaa
mov
fcom
repz
jecxz
dec
nop
shl
mov
cmp
xchg
test
outs
imul
xchg
callw
pusha
bound
ror
xchg
movs
xchg
push
add
test
pop
adc
mov
mov
push
(bad)
loop
(bad)
push
sbb
mov
xor
mov
mov
(bad)
nop
push
sbb
xor
cmps
mov
cdq
stos
mov
pop
test
popa
pop
sub
scas
fisub
arpl
cmp
jecxz
mov
dec
das
shl
and
xchg
loop
nop
cmp
popa
mov
add
jnp
lea
movs
jge
lahf
and
jecxz
xor
add
stc
pusha
cmps
stos
inc
(bad)
jecxz
add
leave
xor
adc
iret
clc
push
or
jmp
(bad)
leave
xchg
sbb
repz
push
jns
mov
fs
inc
fnsave
inc
shr
dec
fcmovb
sub
mov
clc
cmp
cmp
inc
mov
adc
hlt
push
clc
ror
xchg
push
jge
jp
je
lahf
lods
jns
or
retf
ins
out
push
xchg
js
cmps
adc
lods
fwait
jg
xchg
in
or
mov
pop
fisttp
adc
push
jbe
pusha
(bad)
aad
(bad)
icebp
xchg
or
icebp
data16
sub
es
shl
retf
jae
inc
jb
jg
mov
mov
loope
and
nop
dec
rcpps
call
jmp
mov
lahf
mul
xchg
dec
gs
adc
or
fidiv
mov
(bad)
neg
jecxz
outs
and
daa
rcr
jmp
mov
pushf
loope
out
repnz
pusha
mov
mov
(bad)
ss
lds
sbb
iret
jo
aas
in
mov
sub
mov
pushf
shl
in
mov
or
dec
movs
adc
loope
neg
retf
and
xor
adc
inc
xchg
sub
fsub
push
das
jmp
push
(bad)
into
jbe
lahf
ret
mov
dec
sbb
xchg
sub
xchg
add
add
cdq
pop
data16
and
loopne
rol
loope
rcl
int3
test
and
pop
repz
jecxz
imul
add
sbb
adc
add
aam
pop
fucom
(bad)
xor
cmc
pop
lods
add
mov
jmp
dec
xchg
mov
test
clc
sub
(bad)
out
aaa
or
mov
xchg
bound
bound
xchg
cmp
loope
ret
hlt
scas
pushf
add
ret
lahf
cmp
push
jb
xor
xchg
test
mov
sbb
mov
in
add
mov
push
and
mov
(bad)
pusha
sub
fistp
xchg
dec
jp
sub
mov
fcomp
cmp
lods
mov
sti
outs
xor
push
lock
jle
call
mov
lods
xor
sub
cmp
jno
mov
addr16
add
lahf
adc
push
retf
mov
test
push
imul
inc
xchg
ret
fsubr
jp
pop
mov
sbb
nop
test
or
or
popf
shl
add
dec
inc
mov
lods
inc
sub
xor
test
in
test
inc
jns
fdivr
cmp
lods
test
cwde
jb
or
inc
outs
hlt
inc
push
mov
test
jecxz
cmp
out
call
fsubrp
mov
clc
icebp
retf
mov
inc
push
imul
fadd
adc
(bad)
fld
mov
(bad)
mov
mov
cs
pop
frstor
jl
adc
sbb
mov
push
(bad)
pop
mov
clc
clc
lock
inc
sub
mov
xor
fmul
and
(bad)
leave
add
lock
imul
or
add
add
movs
pop
retf
xchg
and
test
ret
(bad)
adc
jno
and
xor
mov
call
mov
push
pop
xchg
pop
pushf
adc
xchg
fucomp
jle
stc
leave
into
outs
xchg
aaa
or
push
ret
int
enter
pop
jmp
mov
push
push
ja
xor
jp
push
loop
mov
pop
sub
sbb
or
pop
sbb
mov
inc
or
out
sbb
loopne
sar
sub
int
push
jecxz
jle
imul
sbb
jmp
test
inc
sub
push
test
and
cmp
retf
sub
ins
aad
rcr
mov
jmp
mov
jge
popa
jb
fnstcw
push
add
sub
mov
add
hlt
dec
sub
fcomp
retf
cmps
mov
mov
js
mov
jmp
cmp
push
fs
push
leave
ss
push
out
dec
cmp
cli
fucomp
inc
fbstp
rcr
not
out
cmps
(bad)
jbe
fbld
mov
xor
into
stc
sahf
scas
fimul
sbb
retf
mov
cmp
cmps
mov
inc
lock
xchg
sbb
xchg
xchg
nop
sub
jg
fcomp
sar
xor
adc
lds
stc
mov
xor
sbb
push
call
jns
push
push
sbb
imul
pop
adc
cmp
and
jl
cmps
jecxz
mov
mov
sbb
ret
mov
jae
outs
pop
sar
(bad)
enter
inc
iret
(bad)
movs
ret
add
dec
xchg
cmps
mov
fidivr
jecxz
(bad)
mov
mov
shl
in
inc
js
add
xor
mov
push
or
add
aas
push
pusha
mov
xchg
adc
cmp
sbb
clc
sbb
mov
sbb
aad
ret
mov
cdq
adc
xchg
cmp
test
cmps
jl
push
mov
sub
cmps
push
es
dec
mov
adc
xchg
pop
fsubp
add
adc
push
xchg
push
cwde
bound
test
and
shl
push
cmp
aam
(bad)
jns
mov
dec
dec
inc
shl
push
add
push
lods
enter
jo
and
std
test
mov
faddp
mov
pop
leave
cld
xchg
ficom
ret
xlat
xor
in
jbe
mov
mov
repnz
or
pop
xchg
xchg
(bad)
int
mov
adc
adc
int
and
add
stos
jg
dec
jmp
outs
add
push
push
fcomp
(bad)
jecxz
int
ret
push
pushf
xchg
pop
imul
in
(bad)
repnz
retf
(bad)
punpckhdq
xchg
movs
mov
fcom
lds
sbb
fistp
jle
push
pop
das
push
(bad)
push
push
jle
push
mov
jnp
fisub
stos
xchg
cmp
sbb
and
adc
(bad)
je
mov
cmps
mov
pushf
adc
adc
adc
lock
stc
pop
cmp
bound
stos
mov
jl
jae
sub
movs
add
loope
cmp
sbb
test
sbb
pusha
sub
sub
add
mov
xlat
inc
sbb
sbb
ss
mov
cdq
in
aaa
xchg
inc
or
xchg
mov
sbb
add
or
sub
add
add
sbb
cmp
lods
pop
int
imul
push
(bad)
outs
and
adc
add
into
push
pop
shl
leave
ja
ja
mov
mov
mov
mov
push
push
aad
push
xchg
jo
add
xchg
leave
mov
lods
out
jne
mov
adc
(bad)
sbb
xchg
test
sub
inc
outs
(bad)
cmp
sbb
sub
test
dec
xchg
jmp
adc
rcr
dec
enter
loopne
or
rcl
xchg
push
add
jge
xchg
pop
jb
hlt
fisubr
cwde
lods
call
enter
pushf
arpl
lea
pop
add
(bad)
icebp
pusha
hlt
(bad)
pushf
push
mov
or
cmp
mov
xchg
adc
mov
cmp
mov
xor
(bad)
out
call
dec
imul
adc
xor
test
neg
out
fild
fs
cwde
sbb
test
shr
adc
jecxz
mov
mov
or
into
mov
bnd
jecxz
xchg
and
cld
nop
adc
add
imul
(bad)
mov
dec
xlat
rcl
sbb
cmp
jne
imul
mov
mov
sub
mov
imul
cmp
pop
mov
push
fcom
sbb
xor
inc
and
scas
adc
push
fsubp
add
sbb
mov
data16
clc
push
mov
popa
cmp
inc
test
fidivr
adc
mov
loope
les
jge
push
ja
std
xor
aam
mov
pusha
mov
add
cdq
add
mov
cmp
lds
jecxz
add
dec
adc
lock
lock
mov
scas
sub
push
sub
mov
cdq
mov
push
cmp
enter
dec
push
dec
xchg
mov
adc
jl
stc
nop
sub
mov
jns
xchg
mov
xor
push
dec
imul
out
add
pop
(bad)
mov
imul
data16
dec
mov
ins
mov
cmp
loopne
mov
adc
push
je
call
in
cdq
int3
outs
mov
aad
mov
push
test
xor
enter
loopne
mov
getsec
inc
sub
je
mov
add
adc
jb
xor
je
mov
pop
mov
scas
fldcw
jp
(bad)
inc
fcom
shl
clc
inc
lds
test
fcomp
sub
lds
int
cmp
jmp
adc
dec
cmp
add
push
scas
mov
sbb
push
mov
enter
jle
sbb
push
jbe
jns
sub
in
pop
mov
lds
fs
and
pop
push
push
adc
dec
(bad)
xchg
mov
test
enter
pmuludq
pop
push
xlat
fisubr
xchg
jle
(bad)
push
pushf
fst
mov
sub
fisubr
mov
sub
xchg
lods
xlat
fstp
push
idiv
pop
adc
lods
in
sar
cdq
sbb
mov
inc
xor
jb
mov
xchg
push
pushf
or
and
out
and
aam
ret
int
inc
add
out
out
jmp
ror
(bad)
jge
ror
loopne
iret
call
jg
sub
shl
(bad)
mov
mov
(bad)
jns
cld
call
js
dec
add
mov
(bad)
dec
ds
pop
dec
pusha
xchg
addr16
pop
sbb
push
(bad)
and
enter
mov
lds
(bad)
jmp
sbb
push
jp
adc
push
sbb
xchg
mov
cmp
adc
mov
enter
fidivr
mov
xor
xchg
dec
mov
pop
push
inc
dec
loopne
cdq
leave
mov
mov
push
mov
jmp
movs
xchg
inc
iret
and
dec
mov
stos
push
mov
jmp
nop
ins
sbb
jno
sub
mov
adc
push
xor
dec
xchg
lods
mov
inc
add
mov
aaa
ja
mov
jnp
mov
je
or
mov
lahf
in
cmp
jl
inc
xchg
jecxz
pushf
shl
mov
add
test
push
or
adc
imul
mov
and
jl
int
and
call
(bad)
cmp
enter
add
int
push
dec
pop
jnp
or
fisttp
pop
fwait
(bad)
outs
lock
fdiv
scas
add
lds
int3
push
or
popf
or
and
jns
shr
aad
enter
imul
mov
test
retf
pop
xchg
in
test
enter
sub
(bad)
dec
mov
mov
fnstsw
cmp
test
mov
push
inc
xchg
mov
and
jmp
mov
xchg
cmp
mov
xor
push
inc
out
xchg
mov
jmp
das
lods
pop
dec
adc
xchg
cdq
jno
cs
lock
enter
sub
mov
and
sub
movs
adc
scas
or
in
fiadd
add
dec
sbb
arpl
(bad)
mov
es
(bad)
aad
push
cdq
pushf
rcr
inc
loopne
fidiv
push
sti
jp
mov
loopne
cmps
pushf
add
rol
cmp
(bad)
mov
movs
fs
push
aad
rcl
pushf
xor
loopne
aam
mov
hlt
dec
adc
mov
mov
push
fisttp
loopne
bound
icebp
and
pop
cmp
adc
aam
fcom
sbb
pushf
and
jmp
mov
mulps
(bad)
in
aas
xchg
mov
ret
iret
cmp
fisubr
add
or
ret
pop
dec
sbb
ret
pop
push
add
adc
add
stc
inc
leave
or
pop
leave
add
daa
nop
cmp
mov
test
jae
mov
inc
cmp
cmp
cmp
enter
loope
push
xor
xchg
jecxz
mov
xchg
pop
push
and
adc
sub
push
pop
sbb
mov
or
es
add
aam
mov
mov
popa
fsubr
fstp
mov
cmp
out
sub
xor
pop
fisubr
sbb
in
or
add
mov
and
enter
mov
rol
lgs
dec
ret
mov
pop
cmp
bound
lahf
or
(bad)
xchg
xchg
jmp
jle
dec
nop
and
int3
into
test
add
loopne
push
jp
dec
into
leave
sbb
mov
lahf
mov
cmp
jns
rol
adc
lahf
lods
je
popw
aam
cmps
(bad)
test
sar
loopne
mov
mov
ret
jo
ss
cmp
dec
in
mov
fwait
les
pop
sub
out
mov
sub
je
jo
push
out
gs
popa
sbb
outs
xchg
add
enter
dec
mov
sub
sub
jg
scas
sbb
inc
xchg
mov
popa
dec
sahf
mov
lahf
xchg
ret
out
(bad)
xor
aas
shr
sbb
out
nop
lods
ret
ror
xchg
push
ret
int3
cmp
fs
cmp
inc
push
ds
pop
cmps
add
xchg
lods
or
or
push
mov
cdq
fstp
xchg
rcr
test
stc
pop
outs
dec
push
cmp
xor
mov
mov
xchg
xchg
push
xchg
adc
mov
jl
mov
ins
xchg
cwde
xchg
xchg
jecxz
xchg
mov
data16
mov
pop
aam
jle
or
push
ret
test
ret
mov
ror
pusha
dec
daa
sub
loopne
inc
mov
pushf
jecxz
call
cmp
xchg
add
inc
js
xlat
xchg
jl
das
in
mov
shl
adc
inc
push
ret
into
hlt
test
push
sbb
mul
into
add
mov
fst
mov
in
mov
fmul
add
shr
fiadd
ret
mov
or
push
pop
push
push
stos
dec
push
push
mov
or
jp
jns
imul
retf
inc
inc
fwait
pusha
jnp
stc
xchg
outs
pop
fisubr
pop
cdq
outs
sub
xchg
mov
inc
xor
mov
push
adc
mov
cdq
pusha
ret
enter
xor
jp
mov
inc
mov
adc
mov
(bad)
fwait
mov
int3
loop
push
mov
nop
ja
call
cmp
fcom
mov
mov
inc
int
jb
jbe
imul
lahf
aam
jmp
ss
xchg
xor
mov
jecxz
cmc
jg
mov
clc
leave
std
sahf
loopne
jecxz
jno
pop
push
sbb
jl
xchg
pop
fld
inc
into
(bad)
cmp
(bad)
(bad)
xchg
pushf
inc
mov
push
aad
gs
dec
pop
cmp
fsub
push
add
loop
jo
jp
sub
push
dec
ins
cmc
imul
or
into
push
int
aaa
sub
ins
or
cdq
sub
pushf
ficom
mov
xchg
adc
hlt
mov
add
gs
jg
cdq
xchg
int
repz
imul
fsub
xchg
mov
mov
sbb
aaa
or
sahf
jg
lea
and
leave
fwait
inc
add
imul
cmps
cmp
pop
into
(bad)
jns
xor
shl
test
cmp
cmps
jmp
xor
jmp
mov
call
aaa
repz
imul
pop
ror
fcomp
rol
out
shl
lods
(bad)
ja
mov
and
mov
jmp
lods
jecxz
call
xlat
cmc
and
or
mov
or
repz
punpcklwd
xchg
xchg
inc
mov
movs
push
lahf
mov
sbb
popa
inc
aam
pop
jbe
xchg
shr
xchg
cmp
repnz
push
push
inc
xchg
(bad)
jg
add
xlat
jg
scas
mov
jmp
adc
mov
xchg
add
xchg
cs
add
adc
test
in
movs
xor
adc
in
js
pop
pop
jbe
jg
ja
ror
loopne
ja
mov
xor
cmp
scas
call
push
push
push
jmp
and
js
fisub
push
fdivr
data16
arpl
pop
adc
jl
mov
cmovg
dec
pop
or
scas
xor
call
mov
loopne
sbb
(bad)
sub
xor
fs
push
bound
inc
jecxz
pop
sar
pop
(bad)
xchg
pop
nop
fadd
cmovs
dec
out
xchg
cmps
jne
leave
add
loope
mov
nop
test
xchg
xchg
mov
mov
call
enter
xchg
out
jb
push
xchg
xchg
xchg
mov
xchg
pushf
xchg
nop
sbb
fbld
mov
out
aam
xor
das
xchg
ret
fld
test
inc
xlat
cmp
fcomp
ret
ror
setbe
jmp
and
stos
in
mov
cmc
in
sub
daa
inc
inc
fstp
jb
fsubr
stos
repnz
xchg
in
not
clc
mov
sbb
fsubr
or
dec
xor
jg
dec
inc
sti
nop
ja
imul
fsub
out
mov
stos
ret
xchg
(bad)
enter
add
push
dec
sub
mov
cli
sub
call
push
fsub
imul
pushf
push
jecxz
out
mov
pop
add
mov
add
fadd
xchg
lods
lock
lods
mov
mov
ret
test
shr
dec
sbb
pop
push
xor
(bad)
outs
bound
cdq
or
sub
rol
fistp
jb
push
xchg
sub
pop
es
loope
and
stos
mov
add
cmps
mov
jmp
mov
adc
pop
jg
movs
shl
pop
popf
cmp
(bad)
mov
xor
or
fistp
sahf
xor
push
jge
cmp
push
pop
leave
mov
mov
fisub
lods
in
je
(bad)
shl
cdq
mov
dec
mov
mov
rol
or
pop
retf
xlat
sbb
ret
dec
mov
mov
xchg
xchg
mov
pop
rcr
cmp
ret
adc
pop
sbb
add
xor
nop
and
(bad)
out
sbb
add
data16
xchg
or
adc
and
mov
loope
cld
cmp
mov
jnp
or
jbe
ret
outs
leave
mov
pushf
ret
mov
loopne
mov
or
pop
push
push
jmp
es
or
lds
mov
out
(bad)
lahf
or
in
in
scas
mov
jecxz
push
jge
(bad)
xor
jb
dec
pusha
inc
adc
mov
pop
xchg
imul
jb
xor
test
cmp
mov
or
add
imul
mov
mov
adc
sti
or
mov
pop
mov
(bad)
lods
inc
in
lds
call
ret
mov
push
add
fs
push
sub
fmul
stc
inc
pop
and
mov
test
mov
add
mov
mov
fbld
js
dec
aas
pop
int3
stos
mov
bnd
sub
mov
xchg
adc
lods
and
test
mov
mov
js
adc
xchg
xchg
cmp
inc
int
add
cmp
leave
jmp
das
add
int
repnz
mov
jle
sub
push
mov
ss
fwait
mov
mov
mov
pmaxsw
hlt
test
nop
lahf
dec
adc
and
add
mov
das
ret
pop
mov
mov
retf
and
mov
(bad)
mov
enter
les
sar
loopne
dec
div
or
dec
fadd
and
jg
pushf
jb
scas
and
or
pusha
cmc
mov
xor
adc
das
retf
popa
cmp
mov
adc
push
jecxz
push
pop
lds
fnsave
sti
int
jb
into
jbe
xchg
xchg
cdq
adc
(bad)
fsub
sub
cmp
(bad)
xchg
sub
add
or
cmp
xchg
je
jg
pop
scas
popa
push
out
or
adc
enter
shr
add
pop
pop
xchg
(bad)
imul
out
mov
retf
leave
inc
xchg
mov
dec
adc
pop
cmp
(bad)
lods
pop
and
and
xchg
add
pop
jle
add
(bad)
xor
mov
lock
jle
fcmovbe
xchg
pusha
xchg
out
lahf
push
sahf
adc
aam
xchg
xor
adc
frstor
(bad)
ficomp
test
aad
mov
or
push
(bad)
lahf
mov
test
and
jbe
mov
aas
sbb
jmp
mov
ror
cld
xchg
sub
and
cwde
pop
mov
xchg
aas
in
jge
mov
push
aas
(bad)
mov
cmp
gs
jmp
add
fst
shl
adc
dec
lahf
mov
call
pop
imul
pushf
jb
push
mov
sbb
adc
test
cmc
test
xlat
xchg
loop
xchg
push
mov
mov
pop
mov
lahf
mov
shr
lea
es
cmp
dec
xor
clc
loope
leave
ins
cdq
mov
dec
adc
cs
inc
scas
(bad)
pop
mov
dec
adc
mov
sub
ja
ins
cdq
sbb
mov
fnstcw
sub
xchg
mov
mov
mov
retf
mov
adc
pop
jg
mov
ins
inc
xchg
push
dec
jmp
ret
push
shr
lock
xor
rol
pop
nop
ins
sbb
add
fldl2t
adc
push
mov
adc
xchg
jecxz
sub
test
dec
adc
push
and
gs
mov
cli
mov
adc
jmp
add
push
pop
cld
xchg
fsub
rcr
aad
ficomp
mov
cmp
(bad)
fwait
mov
ret
scas
jecxz
pop
jg
xor
sbb
adc
dec
pop
adc
mov
mov
mov
movs
test
jl
xchg
pop
xchg
jge
sub
mov
mov
push
cmc
pop
mov
pop
jecxz
jnp
push
ret
xchg
movs
xchg
ret
inc
inc
loope
test
into
xor
(bad)
lods
push
add
lea
out
xchg
inc
mov
and
inc
(bad)
xor
mov
ins
cmp
sub
nop
popa
rcl
mov
adc
inc
sbb
inc
push
int
mov
mov
add
fsubr
call
dec
fwait
cmp
mov
aaa
clc
cld
gs
pop
not
jge
andps
and
shr
arpl
sbb
xchg
pop
mov
movs
fmul
scas
jmp
sub
int
push
mov
sub
cdq
mov
jg
inc
out
add
fs
shl
xchg
sbb
sub
div
stos
jmp
sub
jno
mov
sub
cmp
or
adc
(bad)
mov
push
pushf
test
push
mov
push
(bad)
popf
scas
mov
cmc
mov
lods
mov
fsub
arpl
jnp
and
pop
xchg
push
fadd
sub
xchg
mov
imul
xchg
retf
and
fst
test
addr16
ds
clc
inc
xlat
test
mov
sub
out
loope
dec
add
cmp
hlt
dec
inc
cmp
into
xchg
mov
pusha
mov
adc
or
mov
sti
addr16
pop
push
jp
test
lahf
mov
jbe
test
out
sahf
lock
ret
(bad)
sahf
dec
dec
jne
inc
and
jecxz
shl
jg
test
les
(bad)
in
fist
and
add
xchg
mov
test
sub
add
fnstsw
or
bound
test
jg
add
or
dec
sbb
aaa
test
sar
cmp
lahf
mov
pop
push
add
inc
push
pop
sub
test
inc
test
mov
ficom
mov
mov
add
mov
xchg
ret
(bad)
mov
movs
or
add
aaa
aad
jecxz
or
lahf
sbb
loope
xchg
sar
xchg
ficom
pop
jecxz
and
push
add
xor
or
mov
pop
mov
pcmpgtb
jo
or
or
sub
sbb
lods
mov
adc
(bad)
jo
fcmovb
pusha
or
or
add
retf
mov
cmc
out
or
jae
sar
sbb
inc
cmp
jg
sbb
inc
push
clc
jg
and
or
into
sbb
or
adc
xchg
push
pop
inc
push
loopne
loop
(bad)
jmp
sbb
add
sar
or
fcom
jb
or
or
(bad)
rcl
push
int3
sar
or
jo
sbb
xchg
cmp
sahf
adc
dec
cld
add
addr16
data16
out
scas
rcl
pop
cld
je
leave
mov
(bad)
inc
xchg
imul
loope
rol
(bad)
ja
mov
je
hlt
and
rol
iret
push
add
mov
cmp
pop
xchg
or
xchg
fld
aas
xlat
shl
mov
loopne
mov
jns
fsubr
and
mov
push
xor
nop
test
cmps
pushf
pop
inc
lahf
mov
movs
stc
and
movs
sbb
shl
mov
mov
mov
aam
je
and
xchg
inc
pop
fmul
adc
imul
xlat
mov
loopne
cmp
jp
(bad)
dec
dec
js
mov
cmps
pushf
fwait
lods
aaa
jmp
xchg
aaa
daa
push
aam
jns
or
xchg
cwde
pushf
push
inc
imul
popf
rol
pushf
or
(bad)
mov
xchg
mov
mov
sbb
cmc
in
mov
stos
adc
lahf
mov
mov
into
mov
cmps
pop
xor
xor
xor
cmp
pushf
xchg
xor
pop
ins
rcl
adc
scas
xchg
mov
cmp
sbb
ret
jmp
xchg
sub
pop
fstp
pop
in
jns
int
mov
mov
xor
sub
mov
shl
jae
test
adc
cwde
aas
dec
in
pop
aad
pushf
sbb
(bad)
std
push
push
popf
mov
aad
movs
pop
in
sub
into
jne
jmp
cmp
and
std
fmul
pushf
(bad)
xchg
mov
sbb
popa
idiv
cmps
sbb
xchg
call
push
push
jo
sub
jmp
cmp
arpl
sub
outs
sbb
and
(bad)
push
or
call
shr
mov
and
xchg
movs
in
ja
push
fist
popf
mov
mov
add
dec
(bad)
add
inc
cld
push
test
cdq
xchg
xor
jecxz
jmp
mov
test
pop
adc
cmp
pop
xchg
mov
movs
xchg
mov
dec
movs
pusha
mov
add
sbb
test
lock
in
cmp
adc
and
aam
cmp
sub
mov
cwde
or
sub
cmp
xchg
inc
jecxz
fwait
inc
ret
call
add
xchg
push
mov
out
sub
addr16
or
pop
sbb
mov
enter
pop
mov
sub
pop
add
(bad)
cld
mov
call
lock
dec
xchg
sbb
mov
mov
jns
sbb
movs
adc
mov
adc
pop
inc
shl
lods
mov
sub
add
cmp
es
xor
not
mov
sub
mov
jns
or
inc
mov
xchg
and
scas
mov
push
outs
jmp
push
or
pop
sub
dec
(bad)
mov
jne
pusha
shr
ror
jmp
mov
sahf
push
sti
sar
xchg
adc
mov
pop
cmp
xchg
mov
dec
jmp
or
das
bound
adc
lock
popf
and
inc
mov
and
aad
and
adc
clc
mov
push
sub
test
adc
imul
and
xor
test
inc
leave
ret
fs
imul
pop
mov
pop
rcr
xchg
jns
xor
bsr
icebp
push
std
dec
xor
adc
push
mov
or
(bad)
cmp
jg
jmp
aam
enter
or
push
leave
inc
in
pop
add
mov
outs
not
aaa
dec
sbb
gs
call
fnstsw
mov
jbe
add
ror
fucom
dec
ror
mov
xchg
aad
out
imul
mov
jmp
ja
call
mov
jecxz
test
jmp
or
cmp
fwait
dec
jnp
push
add
jg
push
add
(bad)
mov
bound
fucomip
add
and
add
loop
sbb
(bad)
xchg
ret
xchg
leave
rep
xchg
pop
(bad)
(bad)
outs
cmp
idiv
data16
lock
fsubr
out
int
(bad)
mov
aas
push
add
mov
sub
stos
sbb
in
lds
cli
push
jo
xchg
jge
cmp
pop
cmp
dec
sbb
enter
pop
mov
inc
lock
xchg
xchg
xor
popa
(bad)
and
mov
xchg
test
enter
sub
lea
push
lods
pop
sbb
mov
pop
dec
loopne
sar
xor
mov
xor
ror
sbb
add
pop
cmp
popf
add
xchg
dec
mov
xchg
sub
bound
mov
pushf
jecxz
out
xor
shr
std
add
push
(bad)
lods
cmp
jo
lea
fwait
cmp
faddp
ret
xor
popf
cmp
pop
nop
imul
pop
push
cmp
jmp
fst
ret
xor
dec
xlat
inc
mov
rcl
xchg
fwait
lods
xlat
and
outs
mov
mov
and
mov
mov
xor
push
xchg
pop
push
mov
cmp
hlt
jge
sti
call
jbe
out
lahf
aam
(bad)
not
push
repnz
ins
xchg
fmul
outs
xchg
lods
inc
cs
scas
xchg
mov
adc
pop
cmp
cld
lods
pop
adc
pop
or
lods
pop
jecxz
sahf
mov
or
mov
or
xchg
loope
movs
push
sbb
fist
hlt
sahf
mov
pushf
sbb
cld
mov
pop
std
mov
outs
ret
cld
push
mov
adc
loope
(bad)
gs
out
pushf
call
(bad)
jnp
jl
lods
aas
fsubrp
int3
stos
jmp
mov
stos
mov
lock
rdmsr
push
xchg
mov
mov
mov
and
dec
push
cld
test
ins
xchg
sbb
mov
mov
push
xchg
mov
xchg
sub
cmps
fcom
(bad)
sbb
jo
xchg
mov
in
sub
ja
loopne
frstor
push
pop
and
adc
xlat
fbstp
inc
mov
pop
pop
mov
jo
aaa
add
adc
jns
adc
mov
jno
adc
cmp
inc
mov
inc
hlt
mov
nop
sub
fisttp
(bad)
call
fisttp
push
test
xor
mov
in
sahf
aaa
movs
enter
mov
rcl
leavew
retf
mov
mov
dec
rol
push
lods
in
(bad)
outs
pop
xchg
xor
ret
sub
clc
ss
ror
leave
sar
sbb
sbb
add
sbb
gs
push
cmp
push
cmp
dec
sub
cld
frstor
setnp
fmul
xor
adc
mov
call
fld
xchg
stc
xchg
mov
pop
pop
hlt
push
xchg
aad
mov
xchg
add
test
bound
hlt
push
xchg
push
(bad)
mov
mov
jb
or
cwde
retf
inc
fwait
call
ins
arpl
sub
add
mov
lods
test
mov
jmp
(bad)
cwde
or
sti
(bad)
jmp
mov
imul
stos
fadd
xchg
adc
sub
out
leave
imul
push
in
dec
stos
iret
fdivr
mov
inc
les
pop
cmps
ds
push
mov
popf
xor
mov
out
sbb
xchg
mov
retf
(bad)
cdq
xlat
mov
sbb
push
int3
(bad)
cmp
pusha
inc
sbb
adc
sbb
jl
mov
(bad)
stc
rcl
xchg
mov
xchg
(bad)
ret
jae
(bad)
out
xchg
movs
add
cmps
xor
test
sub
lods
and
sbb
lahf
mov
test
sbb
sbb
lods
sub
push
pop
aam
ficomp
xor
(bad)
into
dec
out
sti
(bad)
mov
mov
sahf
adc
les
dec
mov
popf
add
mov
and
out
hlt
xchg
pop
es
sbb
sub
mov
(bad)
loopne
mov
mov
(bad)
leave
addr16
hlt
xchg
adc
call
outs
pushf
pop
push
inc
or
not
fist
inc
sub
and
push
inc
call
test
mov
in
sbb
pop
cwde
cwde
mov
mov
jmp
pop
sub
dec
xchg
jg
or
lods
pop
push
int3
scas
test
and
sub
dec
shr
aad
add
stos
push
mov
stos
mov
scas
xchg
jecxz
rcl
mov
(bad)
sbb
inc
hlt
retw
das
xor
arpl
(bad)
daa
mov
and
lock
fsubr
out
xchg
mov
sub
out
sbb
xlat
sbb
(bad)
fidiv
retf
test
mov
xor
cmps
mov
adc
xor
fisub
jmp
ret
cdq
mov
xchg
stos
lahf
sbb
lods
cmc
inc
(bad)
icebp
mov
mov
cld
sbb
sbb
test
or
xchg
loopne
les
dec
fs
test
cmp
cmp
sbb
movs
jnp
xor
movs
xlat
pop
adc
sbb
rol
retf
test
call
mov
loope
(bad)
xlat
je
push
dec
addr16
xor
push
je
retf
add
popf
xor
clc
hlt
je
jg
mov
jg
add
xchg
or
fadd
sub
xchg
add
scas
ficom
repz
lahf
push
jmp
outs
enter
adc
xor
mov
mov
aam
jecxz
sbb
dec
pop
gs
lds
repnz
sub
and
cs
aaa
repnz
arpl
pusha
hlt
pushf
daa
das
clc
lahf
sbb
sbb
rol
arpl
rcr
retf
fwait
pop
aam
ret
sub
call
jb
fadd
into
loopne
retf
inc
or
out
rol
ficom
fnstsw
ror
int
mov
mov
push
cmps
shl
add
hlt
cmp
sbb
out
aad
(bad)
and
movs
inc
xor
int3
xchg
pop
mov
repz
test
and
add
and
call
iret
aad
inc
arpl
fdivr
test
dec
sub
pop
scas
mov
inc
pusha
call
test
dec
xchg
ret
pushf
sbb
mov
loopne
pop
push
mov
aam
stos
fadd
fstp
pop
xchg
mov
loopne
pop
jae
outs
mov
scas
pop
fiadd
mov
das
aam
lods
sub
or
aas
test
lar
xchg
mov
sub
das
add
icebp
clc
sbb
cld
imul
and
cmp
fist
ret
aam
les
push
shr
sar
dec
xchg
dec
test
pushf
faddp
xor
push
int3
loopne
xchg
adc
sub
daa
outs
mov
inc
popf
xchg
hlt
faddp
fld
sahf
jle
icebp
and
ins
sbb
mov
inc
movs
jecxz
es
jecxz
mov
push
adc
xchg
push
cmp
mov
xchg
hlt
popf
sub
(bad)
adc
xchg
icebp
adc
inc
jl
inc
mov
dec
or
arpl
mov
pop
jmp
adc
mov
popa
and
mov
pop
sub
(bad)
fstp
or
daa
enter
scas
jns
call
xor
add
mov
add
(bad)
or
or
adc
out
aam
mov
mov
(bad)
aam
mov
addr16
mov
xchg
xchg
sbb
lahf
es
xchg
or
add
adc
jno
and
sub
ja
jp
or
and
in
push
mov
sub
cld
or
cmp
mov
dec
outs
pushf
test
adc
rol
out
imul
rol
ds
je
and
adc
stc
sub
add
mov
test
int3
in
mov
sub
jecxz
inc
mov
maxps
mov
cmps
lods
(bad)
int
cmp
mov
stos
mov
movs
into
mov
lods
add
pop
jg
pushf
dec
out
add
fwait
push
jo
pop
mov
xchg
sbb
or
and
xchg
adc
dec
jmp
es
or
xchg
loop
stos
loopne
mov
mov
daa
pop
mov
sub
push
repz
pop
jg
test
push
ds
xor
arpl
xlat
js
xchg
call
les
fwait
xchg
adc
adc
(bad)
or
mov
jbe
jns
jg
sub
jns
jnp
cdq
adc
push
les
test
mov
jmp
dec
shl
popf
ds
cmp
retf
imul
into
xchg
outs
jns
inc
aad
mov
imul
mov
cmp
sub
fwait
or
les
fwait
enter
push
mov
dec
push
fucom
ret
ror
add
out
shl
mov
adc
mov
push
repnz
pop
sub
push
adc
inc
fwait
pop
fs
lea
pushf
jl
aad
mov
xchg
push
je
or
inc
xchg
or
adc
cmp
js
xchg
xor
enter
test
jbe
jge
cwde
aaa
push
cmp
test
mov
loop
mov
mov
mov
popa
repz
movs
jge
ins
pusha
xchg
add
jns
iret
sbb
or
jno
repnz
mov
mov
sbb
inc
(bad)
mov
or
ficomp
fbstp
dec
xchg
je
pop
jns
push
push
arpl
push
test
test
sahf
xor
loope
inc
lahf
mov
rep
mov
mov
mov
cmp
cmp
and
in
inc
sbb
sbb
inc
int
jo
pop
nop
push
dec
xor
jg
js
out
cmps
sub
fbld
jecxz
jne
ret
mov
jecxz
ficom
dec
(bad)
rsm
fs
pushf
dec
movs
inc
enter
aam
xchg
cmp
cmp
sahf
xchg
ja
jmp
test
xchg
lods
popa
dec
dec
pop
iret
(bad)
mov
mov
into
jle
push
adc
xor
xor
inc
fld
retf
movs
and
adc
push
dec
fs
inc
xchg
aam
enter
inc
cli
jg
ja
xchg
push
fstp
cmps
lahf
jge
outs
xchg
fistp
xchg
sub
lahf
in
jecxz
out
push
add
xor
hlt
fmul
add
sub
jmp
out
into
(bad)
imul
test
lahf
movs
sub
jbe
into
sub
arpl
push
rcl
shr
jecxz
mov
jo
dec
(bad)
shl
das
pop
xor
(bad)
fldcw
mov
fcom
push
and
loop
fs
lock
lahf
cmp
mov
xchg
jge
mov
(bad)
sbb
neg
dec
test
aaa
lods
(bad)
stos
hlt
sbb
ret
rcl
and
in
loopne
pop
ss
in
adc
mov
jge
mov
fdiv
cmp
push
mov
mov
nop
ret
fadd
jmp
fcomp
mov
mov
rol
movs
es
adc
jnp
mov
outs
push
or
fist
retf
pop
mov
xlat
pusha
fistp
cdq
pop
push
jnp
popf
pop
ins
push
ja
lahf
sbb
call
adc
mov
gs
jne
pop
mov
xor
repz
loope
xchg
mov
and
enter
cmp
arpl
inc
cld
ret
add
sub
inc
lahf
inc
enter
xchg
aas
cdq
shl
frstor
fsub
sbb
dec
adc
xchg
stos
movs
inc
cmps
cli
enter
mov
mov
inc
jbe
pop
sbb
arpl
and
jge
ins
jnp
iret
xchg
mov
int
cmp
inc
repz
mov
mov
rol
fld
test
inc
xor
aam
sbb
xchg
push
sbb
push
outs
xchg
pop
jo
mov
test
mov
iret
retf
pop
cmp
add
xchg
mov
push
je
enter
xor
retf
das
cmps
mov
rcl
mov
xor
pop
loopne
lea
shr
xchg
mov
(bad)
xor
pusha
adc
jge
pushf
rol
jo
repnz
add
test
das
pop
test
pop
push
adc
ds
mov
cmc
and
lds
arpl
cmp
sub
jg
enter
pop
mov
xor
sub
bound
xchg
add
push
mov
xchg
push
loop
icebp
repnz
mov
mov
std
in
add
leave
ds
xchg
out
lahf
nop
ror
mov
push
stos
sub
mov
retf
sti
mov
sub
std
and
and
dec
aam
jge
retf
or
ins
mov
adc
xor
out
cmp
xchg
mov
ret
loopne
test
lahf
ret
fiadd
in
mov
fnstcw
leave
and
fimul
cwde
push
xchg
and
sahf
ret
ret
test
loopne
les
mov
aaa
retf
(bad)
mov
mov
retf
mov
adc
jmp
leave
aam
push
and
mov
jae
cmp
aam
int3
sub
fs
lds
pusha
adc
sbb
push
retf
xchg
xchg
pusha
lods
pop
add
push
(bad)
loopne
ds
push
clc
mov
ins
cmps
test
fdiv
or
retf
cmp
pop
pop
dec
push
jmp
frstor
add
jmp
xor
mov
(bad)
pop
pop
(bad)
adc
cmps
mov
shl
(bad)
std
mov
sar
cli
aam
sub
pop
loopne
cld
mov
and
ret
sub
xchg
xor
and
cmp
idiv
and
push
xor
sub
fwait
xchg
jg
ds
test
mov
inc
mov
cmp
movs
sbb
dec
fcomp
mov
scas
retf
je
cmp
out
rol
(bad)
iret
pop
xor
mov
mov
retf
hlt
les
pop
shr
xchg
cmp
and
add
ss
pop
mov
adc
push
mov
cmp
mov
test
pop
jg
loopne
pop
xor
add
lods
jg
out
jmp
mov
mov
push
pop
inc
dec
cdq
cmp
lahf
lods
dec
jmp
movs
enter
mov
cld
jmp
jmp
mov
fdivr
dec
fisttp
ret
ror
mov
pop
add
xchg
aam
movs
adc
lea
fs
mov
mov
xchg
(bad)
mov
pop
mov
dec
vmwrite
shl
lds
jecxz
(bad)
jp
(bad)
xlat
push
cwde
ficom
and
push
add
inc
pushf
test
add
iret
ret
jbe
push
adc
push
mov
jno
xor
pop
les
cmp
push
mov
mov
in
jmp
lahf
mov
xor
push
xchg
add
jmp
dec
add
inc
mov
sub
mov
loopne
lods
lock
fnstsw
addr16
sub
cmps
adc
xchg
push
(bad)
popaw
outs
call
repnz
push
ja
outs
out
arpl
or
mov
push
or
movs
dec
jno
(bad)
jns
loope
pop
add
int3
jns
push
repz
push
cmp
jno
stos
xor
jg
daa
and
out
xchg
pop
and
xlat
scas
dec
fidiv
ja
xlat
(bad)
xchg
inc
cli
and
std
leave
scas
jmp
ins
ins
repz
int
xor
inc
xor
es
and
or
retf
inc
or
cmp
aaa
add
xor
(bad)
push
inc
push
aaa
sub
icebp
pop
or
shr
pop
in
ins
in
sub
xor
fistp
lods
push
fsub
add
push
xor
not
mov
mov
sub
dec
lods
mov
int3
adc
test
and
push
ds
ret
sbb
xor
dec
lods
test
test
cmp
jl
xor
dec
lods
gs
dec
sub
popf
push
xor
adc
ja
leave
dec
retf
rol
(bad)
fiadd
int
xchg
jbe
xchg
ret
add
and
mov
(bad)
arpl
loopne
cdq
add
popf
neg
(bad)
pop
lahf
in
ja
xchg
(bad)
pop
adc
loope
nop
add
add
fld
adc
aad
aad
jecxz
ret
sbb
sub
aad
push
mov
cmps
xchg
cmc
(bad)
outs
loope
or
cs
or
inc
sahf
test
test
xor
jmp
pop
push
in
dec
pop
or
mov
jno
push
dec
mov
repz
jg
dec
sahf
(bad)
jge
cli
loopne
cmp
aaa
test
out
das
imul
mov
shl
fsub
xchg
mov
inc
les
cmp
jl
dec
fstp
(bad)
and
mov
ret
cmp
fcom
cli
and
push
test
cmps
(bad)
popa
outs
add
int
xchg
outs
ins
xchg
sub
fild
jns
call
jnp
mov
xor
sub
mov
ror
mov
neg
push
out
xor
movs
cli
scas
(bad)
inc
sar
call
push
iret
push
mov
cmp
ins
xlat
ror
xor
sub
stos
popf
sbb
mov
cmps
mov
xchg
push
arpl
cmps
out
adc
iret
sub
or
cmp
pop
rcl
(bad)
dec
dec
mov
pop
frstor
cmp
mov
mov
dec
movs
xchg
xlat
ja
call
xchg
into
addr16
aam
jp
pop
enter
jbe
mov
loop
outs
xchg
jecxz
scas
(bad)
pop
xor
lods
aad
and
arpl
adc
inc
in
mov
xor
mov
cwde
mov
xlat
outs
out
fwait
and
adc
xchg
ret
mov
js
imul
out
inc
xor
dec
push
(bad)
imul
adc
es
dec
cmp
adc
retf
xchg
fadd
js
imul
jl
xchg
mov
aam
ss
retf
pusha
push
or
adc
push
push
sbb
rcl
add
sahf
pop
out
xchg
xchg
sbb
ja
les
les
rol
cwde
xchg
jecxz
push
mov
dec
lds
fldcw
jge
jbe
fwait
rol
dec
adc
push
repnz
imul
sub
repz
push
je
nop
push
retf
mov
mov
mov
inc
sbb
aam
ror
add
aam
add
pop
nop
pop
fmulp
ds
mov
add
icebp
or
dec
or
push
mov
cmp
mov
and
sahf
pop
lahf
rol
mov
jmp
jge
inc
jp
or
je
rcl
and
mov
sub
loopne
pop
fld
cmp
push
inc
arpl
sub
inc
lock
retf
or
cmp
(bad)
repnz
retf
mov
xchg
ss
or
rcl
ret
fadd
icebp
aam
lds
push
fs
clc
fidiv
imul
cmp
leave
sub
pop
push
inc
adc
fiadd
rcr
mov
fsub
dec
push
sbb
mov
(bad)
loope
retf
in
sub
sbb
test
repnz
(bad)
push
loop
adc
push
in
pop
and
sbb
cmp
movs
mov
jge
test
adc
leave
movs
adc
lods
popa
mov
mov
ror
add
push
test
imul
test
push
mov
out
sar
loop
add
sbb
push
std
xchg
leave
test
fwait
mov
push
out
xor
mov
dec
pop
dec
inc
je
lods
mov
sub
dec
add
xchg
ja
mov
or
fidivr
sbb
js
dec
into
mov
cmps
add
pop
mov
iret
cmp
push
mov
xchg
dec
out
retf
cmp
lods
cmps
mov
xor
shl
ss
mov
pop
xlat
xor
ficomp
dec
cmp
mov
lahf
loopne
loopne
mov
xchg
pushf
push
scas
(bad)
adc
jmp
and
jl
call
adc
mov
push
mov
lahf
xchg
mov
mov
push
aam
mov
mov
mov
inc
mov
lahf
pop
loope
sbb
aas
addr16
inc
add
les
adc
xchg
repz
jbe
fldenv
and
inc
xor
xchg
mov
xor
shl
ins
ror
adc
rol
cmc
popa
in
jle
idiv
push
push
sbb
popf
lahf
xchg
sub
fisub
ficom
jmp
jp
jmp
lods
push
ret
pop
iret
shl
outs
or
rol
test
and
add
test
dec
aaa
xchg
call
loopne
neg
mov
(bad)
xchg
jg
mov
mov
mov
or
push
imul
cmps
pop
sub
xor
rcr
fist
in
push
pop
dec
test
pusha
or
out
push
(bad)
call
(bad)
dec
idiv
ins
xchg
jge
stos
xor
aas
jl
je
imul
sub
out
inc
jecxz
pop
add
xor
push
test
mov
dec
fistp
int
cld
jno
retf
push
mov
mov
(bad)
arpl
popf
dec
jns
push
jne
pop
fsubr
lea
cmp
cmp
push
lds
and
mov
outs
in
stos
int3
cmps
mov
enter
pop
inc
(bad)
push
stos
fisttp
cmps
imul
mov
and
cmps
xchg
add
add
shl
jno
test
push
or
hlt
enter
mov
add
out
mov
rcr
fsubr
push
inc
jmp
fldcw
push
and
or
add
add
jb
add
cld
ins
xchg
into
sub
mov
loopne
xchg
mov
xor
xor
inc
mov
sahf
xor
call
div
push
hlt
sub
in
adc
lock
dec
xchg
mov
jmp
cmp
aad
in
popf
fldenv
test
sbb
xchg
in
ret
add
xor
fucomi
sbb
jo
aas
xchg
in
mov
cmc
pusha
in
mov
add
adc
inc
clc
je
mov
adc
push
xor
sub
and
retf
push
xor
hlt
bound
cmps
test
aaa
shr
mov
add
mov
mov
add
scas
cmp
push
pushf
mov
pop
mov
sub
pop
cli
inc
inc
gs
and
mov
aas
fucomp
push
sub
mov
fs
(bad)
out
pop
xor
cmp
push
rcl
sbb
(bad)
cs
cs
ret
cld
clc
retf
add
sbb
and
xlat
pushf
or
cld
rdpmc
js
add
shl
push
xchg
xchg
adc
add
sub
aas
jns
jecxz
adc
out
sub
push
(bad)
or
mov
jns
mov
pushf
cs
lds
lahf
lock
int3
add
loopne
cld
or
mov
ret
fadd
sbb
adc
sbb
adc
rcl
sub
shl
aam
fcomp
xchg
sbb
xor
or
icebp
or
pop
out
loopne
inc
fadd
xchg
push
pop
mov
repnz
adc
lahf
aam
in
adc
jp
adc
rcl
les
mov
in
adc
(bad)
cmps
das
loop
mov
cmp
jmp
pop
and
stos
xor
aas
sbb
and
(bad)
movs
mov
push
gs
pop
and
gs
and
pop
or
push
mov
xchg
fs
xcrypt-ecb
cmps
mov
xchg
loop
add
push
pop
adc
loop
mov
add
fisttp
gs
and
push
aas
xor
fistp
pop
nop
pop
inc
inc
gs
inc
mov
shr
icebp
mov
jmp
retf
mov
jp
sbb
push
push
xchg
mov
loopne
adc
nop
in
mov
loope
mov
push
ret
jmp
shl
xchg
ss
int3
int3
xchg
cdq
mov
inc
arpl
xor
pop
mov
adc
fs
ret
mov
push
les
in
sahf
xor
loopne
into
push
mov
pop
pop
add
push
push
sub
shl
popf
addr16
mov
push
mul
xchg
retf
jae
sub
or
push
sbb
je
leave
lods
cmp
addr16
popf
mov
loopne
or
imul
(bad)
lds
(bad)
mov
outs
jge
xor
pusha
sbb
jnp
rol
test
out
fnstsw
shl
fstp
sub
(bad)
aam
aad
lods
scas
and
daa
out
in
(bad)
sub
(bad)
push
fidiv
mov
cmp
les
xor
add
xor
sbb
repz
pop
add
mov
push
xchg
daa
sbb
mov
cdq
loope
ror
(bad)
jge
pop
imul
jmp
add
enter
retf
(bad)
jnp
test
jg
cdq
inc
movs
ja
mov
rcl
adc
mov
or
mov
xchg
xlat
fldcw
mov
jg
dec
xchg
fs
xlat
xchg
add
add
pop
lods
jmp
sub
inc
jge
stc
add
sub
mov
mov
pop
(bad)
or
or
xchg
cmp
pop
mov
add
xlat
add
add
mov
mov
nop
in
jae
xor
hlt
sub
pop
pusha
mov
test
sbb
mov
mov
inc
xchg
sbb
sar
aas
lahf
fwait
mov
add
lea
imul
fmul
jnp
mov
inc
inc
add
pushw
ret
jmp
xchg
mov
lods
cs
lahf
mov
push
fisttp
mov
xchg
sub
es
pop
aad
add
add
fldenv
cmp
cmp
pushf
(bad)
ins
mov
or
add
dec
jne
sbb
dec
push
in
shl
add
fdivr
cmps
push
in
xor
mov
jmp
mov
adc
xchg
xchg
sub
jae
popf
fnsave
dec
mov
xchg
mov
aaa
xchg
sub
cmps
loop
outs
sahf
movs
mov
in
or
mov
mov
(bad)
mov
fistp
add
shl
jl
(bad)
pop
mov
jmp
fisub
out
repnz
mov
sbb
xor
xchg
mov
iret
jns
pop
mov
retf
addr16
jne
lock
mov
mov
in
rcr
dec
outs
jbe
js
mov
adc
or
dec
adc
mov
xchg
xlat
cdq
sbb
push
cmp
test
pop
xchg
push
mov
daa
lahf
push
jge
rcl
mov
push
fucomi
adc
inc
nop
push
mov
pop
mov
test
mov
sub
and
xor
push
add
dec
sub
cmps
adc
(bad)
jmp
ficom
add
push
ror
ss
xchg
jl
mov
(bad)
adc
push
pop
stos
jge
rcl
or
or
xchg
ss
and
or
test
inc
mov
aam
inc
pop
mov
pop
test
mov
push
int3
sbb
jecxz
mov
hlt
ret
xor
dec
arpl
inc
mov
mov
jg
mov
xchg
(bad)
mov
imul
outs
add
or
pop
std
add
push
jge
(bad)
xor
mov
xchg
fnstcw
push
mov
int
aad
mov
loope
sbb
cli
sbb
add
lahf
sbb
pop
add
cmps
popf
mov
adc
or
xor
pop
mov
in
call
hlt
call
jge
jne
xchg
cs
test
out
jge
mov
cmp
lock
jl
les
or
and
inc
movs
fs
rcl
gs
inc
pop
mov
and
cs
pop
imul
test
mov
dec
xchg
cmps
inc
in
mov
sbb
daa
call
sub
cmps
rol
jmp
inc
xchg
mov
bswap
mov
int3
fistp
int
leave
fs
(bad)
jo
jne
std
mov
hlt
xlat
hlt
(bad)
movs
xchg
(bad)
js
shr
mov
and
hlt
call
(bad)
popf
(bad)
aad
xor
rol
jnp
dec
pop
(bad)
mov
push
jbe
pop
xor
push
ds
cld
call
outs
mov
sub
or
mov
xchg
in
fist
pop
std
stos
into
xor
mov
sar
adc
pop
mov
sbb
cs
imul
lods
movs
aad
sti
aam
fwait
test
dec
jle
je
(bad)
or
cdq
adc
cmp
push
or
test
loope
shl
xchg
das
outs
pop
cmp
adc
xchg
jbe
das
dec
(bad)
xchg
sbb
test
sbb
in
jbe
pushf
mov
test
push
sub
pushf
jge
ins
push
sbb
adc
and
add
push
cdq
push
sahf
test
inc
les
fldcw
push
enter
lea
xor
call
movs
(bad)
(bad)
push
icebp
adc
shl
imul
lea
push
xchg
sbb
arpl
cmp
inc
jae
loope
mov
(bad)
aaa
(bad)
cmp
loopne
imul
pushfw
xchg
mov
test
xchg
loopne
lock
test
jmp
test
jg
out
and
cmp
and
push
or
aas
push
outs
xchg
sbb
ret
fs
xchg
ds
rcr
or
aad
or
sub
fsub
xor
mov
adc
lods
ss
xchg
or
pusha
xor
add
and
jmp
xor
xchg
pushf
dec
lahf
(bad)
fcomp
and
push
nop
mov
pop
jmp
pop
lds
mov
xor
push
(bad)
mov
mov
fcom
push
call
jecxz
in
pop
fcomp
add
arpl
sub
out
mov
das
gs
shl
lods
jo
int
mov
pop
js
jmp
enter
ret
sub
imul
xchg
popf
jmp
sbb
addr16
cmps
loopne
ins
les
add
or
jne
icebp
cld
movs
shl
je
xchg
sbb
xchg
fisubr
fidivr
add
rol
in
sbb
mov
loop
fidiv
cli
sub
jbe
jecxz
xor
cwde
fimul
push
xchg
in
add
mov
js
inc
cmps
(bad)
pop
nop
lock
and
enter
and
jg
xor
scas
or
enter
xchg
ret
dec
or
mov
(bad)
not
adc
mov
mov
and
test
add
mov
jb
mov
aam
test
mov
hlt
and
lds
pop
pop
xchg
jle
lock
pop
add
xchg
push
call
icebp
add
popf
pop
movs
xor
iret
shl
cmp
inc
and
pop
mov
push
jl
xchg
hlt
pop
and
mov
pop
lahf
push
aad
in
clc
test
mov
sub
pop
pop
(bad)
leave
gs
pop
mov
cmp
cvtpi2ps
nop
fcom
fidivr
mov
mov
xchg
xchg
mov
push
ins
pusha
jo
sbb
or
ffreep
mov
sbb
xor
in
cmc
inc
fs
fidiv
test
push
jo
(bad)
jmp
inc
mov
fstp
mov
lods
add
jmp
pop
pusha
arpl
out
xor
dec
nop
jb
cli
mov
cli
out
shr
mov
dec
add
jmp
push
mov
bound
cld
adc
retf
outs
stos
xor
imul
lahf
hlt
inc
les
dec
push
push
fisubr
sbb
pop
pop
nop
xchg
popa
or
sub
iret
mov
mov
jne
pushf
cmps
test
pop
(bad)
pop
cdq
(bad)
mov
pop
pop
fcmovb
xor
jmp
aad
sub
scas
jge
aam
test
popf
fidiv
sub
dec
jmp
data16
addr16
mov
xchg
fisubr
cdq
(bad)
cs
mov
enter
push
ret
push
mov
retf
ret
and
shl
push
inc
or
xchg
xor
(bad)
dec
sbb
out
push
nop
aaa
js
mov
or
fld
jnp
adc
xchg
xor
leave
retf
mul
(bad)
sbb
inc
sar
add
mov
push
hlt
fdiv
(bad)
mov
(bad)
jl
or
inc
dec
aam
inc
push
mov
lahf
jge
dec
daa
xchg
inc
push
xor
jb
(bad)
lds
push
ficom
pop
shr
jl
dec
push
mov
xchg
(bad)
sbb
ret
leave
popw
mov
addr16
adc
xor
adc
sub
jge
jo
dec
cmp
cli
scas
fistp
jl
jle
push
test
mov
pop
jmp
mov
xchg
popf
xchg
std
not
mov
inc
test
push
mov
sbb
mov
xchg
mov
(bad)
pop
pushf
xor
cs
test
mov
(bad)
imul
inc
and
lds
mov
mov
sbb
ret
pop
scas
movs
inc
adc
jmp
rol
push
dec
call
add
ss
jae
pop
mul
push
xchg
push
mov
aaa
repnz
mov
jmp
imul
jmp
fnsave
test
and
pusha
mov
mov
rol
and
xor
fcom
nop
xor
ss
mov
enter
(bad)
jge
fisub
jmp
ds
inc
dec
mov
in
enter
rcl
mov
or
jo
mov
icebp
aam
mov
xchg
test
mov
jg
sbb
sub
or
jb
jecxz
or
ret
outs
retf
repnz
jo
popf
adc
loop
pop
clc
fs
test
imul
mov
shl
(bad)
std
out
sub
aam
sbb
pop
xor
adc
or
jecxz
popa
xchg
jg
popf
sbb
stc
rcl
xor
sbb
push
push
mov
movs
icebp
ret
ds
js
xor
xchg
ret
jg
movs
aad
sar
adc
push
fst
out
mov
mov
mov
sti
mov
and
xchg
jl
ret
mov
mov
jmp
inc
xchg
loope
lahf
mul
sar
mov
xchg
movs
jg
adc
rcr
or
mov
xor
sbb
inc
shl
or
pop
out
mov
stos
adc
jge
std
cmps
pop
lock
jl
scas
sbb
rcl
cmp
or
fwait
push
mov
xchg
mov
push
mov
fbld
inc
stc
cmp
in
adc
mov
jg
mov
stos
dec
or
sub
pop
mov
mov
pop
dec
dec
mov
push
jo
cld
inc
test
dec
adc
retf
adc
dec
mov
int3
(bad)
or
push
ins
je
in
cmp
mov
rol
fcomip
sub
nop
test
mov
(bad)
pushf
mov
push
mov
xchg
nop
xor
movs
xor
fadd
add
fmul
mov
loopne
rcl
inc
lds
(bad)
mov
pop
mov
add
mov
(bad)
jae
addr16
mov
ret
scas
cmp
shl
inc
fmul
mov
popf
sbb
sub
sbb
fdiv
push
sbb
xor
adc
jno
daa
in
mov
mov
fld
scas
or
dec
int3
rcl
add
(bad)
mov
xor
test
fdiv
int3
dec
jg
in
mov
jb
mov
ss
aaa
and
jmp
inc
cmps
mov
retf
push
pop
ret
inc
xchg
xor
inc
jno
jg
add
dec
rcl
jnp
mov
push
dec
stos
sub
fs
inc
pop
inc
popa
outs
push
inc
pop
jmp
mov
call
out
ja
shr
stos
popf
sub
adc
add
stos
sbb
in
dec
leave
push
push
loope
(bad)
add
aad
dec
cmc
xchg
test
dec
in
adc
xor
jecxz
ins
pop
mov
aaa
pop
adc
mov
sbb
adc
shr
dec
push
ja
xor
jmp
mov
out
pop
push
int
sub
mov
mov
div
xchg
jecxz
push
mov
adc
mov
enter
cdq
fdivr
jecxz
mov
xlat
dec
sbb
popf
and
mov
or
mov
sub
add
scas
push
loopne
pop
inc
ins
addr16
adc
fwait
xchg
jmp
fst
push
dec
repz
inc
dec
inc
retf
xchg
pop
pop
xchg
mov
aad
fdiv
xchg
mov
sbb
cmp
xchg
mov
sub
pop
mov
and
cli
lea
xor
stc
leave
or
ret
jae
aam
sbb
hlt
in
test
jmp
sahf
mov
xchg
jno
gs
mov
pushf
rol
not
les
mov
xchg
mov
mov
adc
daa
pop
pop
xchg
loope
out
sub
or
mov
push
mov
cs
and
pop
pushf
adc
cdq
fld
xchg
loopne
adc
mov
pop
xlat
popa
ins
int
out
push
sub
xor
punpckldq
test
xchg
lods
pusha
push
cmp
cdq
(bad)
lahf
aas
inc
cmps
mov
out
pop
push
xchg
sbb
lock
loop
cwde
mov
shr
mov
xchg
push
mov
sbb
cld
nop
pushf
lahf
in
xlat
fadd
neg
pop
jns
mov
dec
xchg
mov
addr16
mov
js
test
xchg
inc
js
js
cdq
sub
retf
ins
dec
ins
ins
inc
fwait
cmps
test
and
adc
call
jb
pushf
and
retf
mov
adc
ja
mov
jecxz
jge
inc
fild
sbb
dec
sar
rol
aam
ss
aad
mov
(bad)
xchg
mov
jnp
ret
push
sbb
or
ss
je
mov
push
hlt
cmps
into
xchg
and
and
push
mov
int
movs
jmp
outs
pop
or
xchg
add
mov
mov
jb
inc
cmp
mov
sub
sbb
push
add
sub
cmp
nop
pop
js
cli
(bad)
jne
int
hlt
or
sub
mov
xchg
imul
les
pop
mov
rcr
retf
sub
or
retf
dec
xchg
sbb
mov
xchg
or
int3
fsubr
push
mov
pushf
ss
xchg
push
push
pushf
movs
mov
pcmpeqd
cmp
adc
add
or
push
mov
fmul
rcl
data16
mov
test
sahf
push
dec
push
adc
mov
lods
and
mov
test
enter
popf
sub
(bad)
rol
sub
or
mov
aam
mov
fwait
mov
(bad)
lods
inc
mov
popf
sbb
out
es
jmp
lods
mov
enter
fld
jg
cdq
in
(bad)
dec
data16
js
nop
shr
or
mov
fstp
add
mov
ror
dec
(bad)
push
mov
(bad)
fimul
std
xor
mov
cs
jg
xor
inc
adc
jns
test
mov
push
push
xchg
add
ret
std
and
shl
sub
std
nop
icebp
sbb
push
mov
and
in
movs
sbb
mov
xchg
pop
lock
or
addr16
cli
cwde
cmp
sbb
imul
pop
jge
lods
test
sbb
pop
mov
into
leave
sub
call
mov
or
bound
mov
(bad)
sbb
ins
pusha
ja
or
jecxz
push
mov
pushf
mov
mov
test
cmps
push
nop
add
mov
mov
int3
les
mov
scas
and
push
pushf
sub
mov
int3
pop
jno
stos
fcom
imul
cdq
mov
movs
test
in
fidivr
mov
push
movs
sahf
mov
addr16
xchg
cmp
pop
adc
(bad)
js
sbb
fld
add
clc
mov
mov
pop
push
inc
jecxz
xor
mov
mov
add
jb
(bad)
push
add
mov
aam
jae
sti
lea
fwait
sti
dec
std
das
add
dec
cdq
jb
cmp
stos
pusha
test
push
daa
pop
bnd
and
push
scas
repnz
mov
(bad)
mov
or
cmp
leave
jmp
adc
jg
movs
ror
mov
push
cdq
adc
sub
leave
ror
add
jg
fiadd
or
jl
dec
mov
mov
jmp
jo
in
jg
sahf
push
loop
addr16
pop
pop
pop
inc
stos
fstp
push
sbb
jno
addr16
fidiv
xchg
xchg
shr
es
mov
mov
cld
sbb
dec
nop
add
or
adc
sbb
add
sbb
pop
jecxz
cmp
test
loope
popa
adc
xchg
and
movs
retf
into
xor
int
pop
loopne
xchg
je
push
mov
lods
int3
stos
rcl
push
retf
xchg
(bad)
jnp
lock
pushf
cdq
mov
jg
enter
push
add
push
push
ins
outs
rcl
daa
add
xchg
fistp
ror
int
in
push
push
mov
dec
mov
push
push
jecxz
lods
in
call
cdq
mov
jns
test
dec
fdiv
xor
loop
cwde
imul
mov
pop
jg
push
mov
jmp
and
pusha
gs
data16
xchg
adc
(bad)
jmp
xlat
ret
jmp
xchg
pop
jmp
scas
xchg
jmp
ins
popf
movs
into
sbb
loope
jge
lock
pop
pop
sub
ror
les
test
pop
xchg
clc
sub
std
jnp
pop
cld
(bad)
leave
(bad)
fs
add
aad
fistp
sti
js
aam
xchg
adc
mov
add
or
jb
add
popf
xchg
out
xor
fwait
pushf
or
sub
sub
adc
sub
xor
xor
mov
cmp
retf
fnstcw
mov
or
in
cdq
lods
mov
mov
sbb
out
jmp
mov
sar
xor
dec
retf
fs
add
loopne
popa
test
and
add
ds
dec
mov
lds
nop
jmp
andps
inc
push
fist
(bad)
push
push
retf
jmp
ins
xor
daa
xchg
pop
jle
mov
push
mov
fwait
shr
mov
jle
push
or
jl
fcomp
add
bound
add
movs
into
test
jle
jns
sub
mov
adc
pop
mov
ins
add
mov
(bad)
in
push
jp
sbb
cmp
or
popf
xchg
cmp
in
inc
aam
or
arpl
xchg
add
xor
enter
hlt
mov
mov
xchg
and
and
xor
fcmove
cmp
cld
dec
dec
pushf
loope
inc
mov
in
ds
dec
add
mov
pushf
rcr
dec
stos
mov
jg
and
sbb
pop
ret
(bad)
(bad)
nop
enter
iret
in
ja
mov
mov
mov
lahf
sub
shl
mov
movs
sahf
(bad)
ds
sahf
lock
sbb
mov
xchg
cdq
fmulp
adc
mov
inc
int
mov
outs
shl
sbb
mov
ret
enter
sub
xchg
retf
imul
mov
mov
mov
xchg
or
cmp
fstp
cmp
mov
or
int3
call
add
push
call
fcom
(bad)
ins
add
int3
retf
adc
cmp
pop
stc
jbe
xchg
loope
in
xchg
les
xchg
sbb
cmp
aam
pusha
int
movs
push
mov
jge
fs
ficomp
jecxz
xor
mov
inc
xor
sbb
mov
lahf
adc
add
push
inc
jmp
cmps
popf
pop
fmul
sub
lods
push
in
fs
jmp
dec
std
mov
adc
fcom
push
jne
sub
sbb
(bad)
stos
repz
mov
push
jge
jns
xchg
lods
in
popf
lods
data16
movs
(bad)
and
mov
lods
pop
push
pop
jmp
daa
stos
push
fdivr
add
imul
mov
pop
call
mov
fist
les
pmullw
xlat
xchg
jo
in
add
loope
loopne
int3
cmp
out
cmp
add
movs
retf
scas
jmp
push
and
xchg
aam
xchg
sbb
lahf
popa
stos
add
jno
pop
ficom
inc
leave
in
jp
scas
iret
dec
cmp
sub
es
lods
(bad)
enter
mov
xchg
jb
cmps
ja
xor
adc
(bad)
into
or
pop
imul
xor
push
and
and
push
adc
lahf
or
push
dec
inc
or
rcl
add
lods
jmp
add
cmp
leave
not
sbb
stos
loop
lods
xchg
jmp
sub
scas
and
movs
mov
in
test
out
repnz
mov
cmps
rol
into
pop
dec
mov
aad
aam
or
inc
rcr
and
push
xor
lahf
ins
xchg
mov
dec
aam
mov
imul
shl
pop
xor
or
push
xbegin
popf
in
popf
pushf
test
scas
xor
or
das
fs
popa
xchg
inc
sub
lds
pop
jl
aas
into
xor
aas
jne
add
jae
pop
ret
(bad)
aad
adc
int3
inc
lahf
inc
cmp
sub
xchg
test
xchg
movs
mov
cmp
jae
xchg
js
push
leave
iret
mov
inc
mov
pushf
(bad)
mov
push
or
or
push
jg
movs
xor
mov
inc
jecxz
(bad)
imul
add
into
loope
cmp
sub
mov
ret
sbb
adc
mov
test
rol
sbb
in
sahf
mov
fwait
pop
sahf
xchg
sub
cmps
sub
mov
scas
xchg
icebp
xor
add
pop
sahf
pushf
mov
pop
mov
mov
(bad)
lahf
or
outs
add
and
mov
mov
loope
sub
arpl
inc
fild
xchg
lods
adc
adc
dec
cwde
mov
mov
inc
add
mov
lahf
ret
mov
das
fadd
sub
bnd
sahf
out
das
mov
ds
rol
mov
mov
pop
push
mov
cmp
(bad)
nop
sbb
xlat
sbb
lods
jle
mov
ret
cld
in
or
outs
fnstsw
in
outs
xor
and
lods
(bad)
xor
rol
add
inc
xor
repnz
ins
call
test
mov
inc
es
inc
xchg
test
cli
sbb
inc
imul
fst
movs
sbb
loop
shr
(bad)
ss
dec
push
leave
pop
pusha
retf
sbb
push
pop
loopne
lds
cmp
xlat
jecxz
jge
bound
cs
cdq
test
mov
pop
add
sub
pop
test
or
lds
inc
mov
mov
pop
and
jno
(bad)
ja
jae
lds
ret
jae
add
sub
gs
aas
xchg
jmp
icebp
and
addr16
jb
jge
inc
sti
sbb
fcom
popf
cmp
adc
jne
and
icebp
in
data16
popa
mov
(bad)
xlat
test
add
ss
pop
or
mov
add
mov
ret
stc
xchg
rcl
test
xchg
fwait
xchg
pop
mov
sub
pop
sbb
mov
in
xlat
push
loope
add
(bad)
and
mov
xchg
pop
sbb
xchg
punpcklwd
mov
pop
push
jmp
ins
ss
jge
aas
inc
sub
mov
pop
cmps
jo
adc
mov
sbb
jb
or
ins
ret
mov
loopne
sub
mov
push
add
adc
jecxz
dec
out
aam
fcom
and
icebp
add
(bad)
std
pop
lds
mov
jb
and
sti
or
push
xor
sbb
shr
and
enter
pop
xchg
fistp
pushf
adc
sar
into
xor
and
jle
shr
ficomp
pop
fstp
iret
outs
cdq
mov
(bad)
mov
hlt
add
mov
fisttp
push
push
aam
lea
mov
mov
test
sbb
mov
fstp
pop
loop
out
jmp
or
call
inc
xlat
(bad)
rdtsc
mov
scas
js
push
rcr
test
int3
inc
or
ss
add
or
adc
xchg
adc
pop
test
or
mov
add
retf
pop
ror
mul
neg
xchg
sahf
(bad)
movs
cmps
cdq
jle
mov
rcr
push
in
sbb
(bad)
mov
xchg
(bad)
jb
xchg
movs
push
inc
(bad)
xor
mov
loope
pop
mov
retf
fld
mov
xor
mov
mov
and
test
ret
xchg
add
xlat
mov
hlt
mov
ret
adc
dec
or
adc
add
call
sub
inc
jp
(bad)
loopne
shr
lock
ficomp
jge
ja
inc
out
mov
mov
enter
add
push
cmp
xchg
jns
xchg
and
jge
ds
add
xor
cmp
shr
pop
repz
inc
into
jl
mov
adc
inc
cmp
test
inc
jno
pushf
lods
xchg
fcom
fcom
pop
movs
sbb
mov
(bad)
pop
test
mov
mov
mov
out
js
mov
lods
push
xchg
aam
scas
into
loop
nop
nop
mov
mov
sahf
mov
loope
mov
or
xchg
(bad)
sbb
pop
aam
adc
in
mov
adc
aad
xchg
mov
mov
dec
daa
aam
sub
cmp
jae
and
leave
push
xchg
pusha
xor
mul
and
adc
push
clc
retf
mov
dec
out
rcl
ret
(bad)
ror
loopne
loope
fcomip
mov
mov
enter
jge
lods
loopne
mov
idiv
retf
inc
xchg
xor
scas
loopne
pop
inc
push
xchg
mov
push
outs
pop
es
adc
mov
xchg
jns
js
aaa
call
xchg
movs
jnp
push
repz
fmul
movs
fisttp
mov
mov
aam
stos
stc
cmp
call
and
loope
jns
inc
es
sbb
retf
mov
jne
inc
aad
ins
lods
das
push
fisub
jmp
leave
int
aaa
jne
das
loop
lods
push
add
test
nop
in
mov
push
xor
data16
ret
inc
mov
ror
(bad)
loope
sub
popf
inc
push
pop
fadd
mov
dec
(bad)
fcmovb
mov
jb
xchg
leave
int
test
mov
nop
fldcw
jecxz
sub
inc
lahf
mov
inc
push
call
cmp
movs
dec
sub
jns
aam
lahf
sub
test
mov
adc
mov
inc
sahf
mov
mov
out
adc
fdivr
out
cmp
fimul
and
pusha
xchg
bound
sub
lahf
data16
inc
add
inc
out
ins
mov
sbb
(bad)
retf
push
gs
cmc
mov
scas
loopne
jg
dec
push
cwde
push
retf
jl
add
les
jg
mov
fsub
int
cmps
dec
test
mov
inc
and
retf
or
loope
ins
shr
stos
mov
xchg
into
test
arpl
les
shl
xchg
clc
jmp
mov
pusha
ins
lods
hlt
jo
push
fsubr
call
xchg
data16
push
fucom
cmp
and
jb
jmp
inc
push
das
xor
test
xchg
fwait
adc
repz
mov
inc
pop
push
mul
and
pusha
shr
pop
mov
xchg
movs
lods
dec
xlat
jg
fwait
inc
pushf
mov
mov
jp
mov
clc
dec
fst
dec
pop
popf
shl
ss
push
test
cmp
xchg
add
xor
(bad)
pushf
mov
mov
(bad)
push
(bad)
(bad)
cmp
cmps
ret
xlat
cmps
xchg
loopne
(bad)
fisttp
jge
or
jno
mov
mov
xchg
xchg
movs
or
fstp
dec
push
shr
call
loopne
sbb
call
add
cmp
inc
push
mov
clc
ret
(bad)
sbb
adc
rcl
adc
add
xor
scas
fiadd
cmp
dec
lock
mov
(bad)
hlt
test
and
jno
add
leave
rcr
dec
adc
xor
push
jno
xlat
cdq
sahf
lods
das
and
test
mov
add
inc
sub
in
jnp
pop
(bad)
mov
add
aam
test
fdiv
cmps
and
les
cmp
mov
inc
das
jl
mov
enter
iret
jmp
sbb
sub
stc
stos
out
std
gs
mov
mov
repz
bound
call
mov
xchg
ins
mov
and
adc
sahf
sbb
nop
xchg
pop
jecxz
lods
pop
push
sahf
sub
out
xchg
shl
and
jecxz
sahf
(bad)
inc
jge
mov
dec
pop
das
pop
push
mov
and
xchg
xor
mov
outs
cmp
add
sbb
push
sbb
or
push
(bad)
leave
nop
mov
xchg
dec
test
jmp
cmp
test
ins
pop
adc
xchg
cmps
les
push
fdivr
lods
push
ins
call
jmp
xchg
into
shl
and
xor
jmp
or
ffree
mov
xlat
frstor
pop
sub
dec
mov
push
retf
fwait
xor
xchg
repnz
jg
rol
fcom
lds
(bad)
xchg
test
test
in
xchg
in
jnp
and
(bad)
mov
aam
daa
sbb
push
ror
pop
lock
into
lods
cmp
xchg
mov
sbb
rcl
adc
(bad)
xor
popf
(bad)
mov
mov
outs
and
mov
jge
ret
and
pushf
dec
lea
jg
mov
repnz
test
(bad)
ja
xor
mov
lds
cmps
push
xchg
adc
jl
lea
fucomip
xchg
ins
inc
rcl
inc
sub
retf
dec
mov
pusha
inc
and
popf
and
bound
or
movs
cwde
popf
sub
mov
inc
inc
jge
in
pop
add
lock
cdq
cwde
sahf
std
xchg
hlt
and
and
cmp
push
push
in
stos
dec
imul
es
pop
pop
mov
sbb
jecxz
add
pop
in
ins
sbb
fsub
xchg
sbb
jecxz
into
loopne
and
pop
or
fcom
add
gs
push
int3
popa
xchg
or
push
cmp
mov
or
stc
call
leave
or
push
mov
cmp
fnstenv
adc
sahf
sub
sbb
mov
or
mov
retf
dec
xchg
pop
out
iret
push
cmp
rol
(bad)
xchg
lds
cmc
out
xchg
(bad)
sub
cmp
clc
inc
or
add
sbb
stos
xchg
data16
jmp
inc
imul
add
add
lahf
cmp
and
cmc
(bad)
cmp
es
adc
imul
fs
(bad)
xor
pop
push
mov
cdq
sbb
repz
fcomp
adc
outs
pushf
in
sahf
mov
sbb
ret
jl
mov
pop
loopne
sbb
in
xchg
shl
mov
ret
push
push
movs
iret
jp
adc
sbb
push
fcomp
cmp
fcom
shl
sar
mov
mov
sbb
sub
xor
dec
mov
idiv
mov
mov
aas
dec
dec
ss
fs
hlt
pop
hlt
push
es
pusha
pop
pop
bound
xor
fmulp
adc
lahf
dec
clc
pop
outs
dec
jmp
inc
push
sbb
ja
stos
sub
loopne
fdiv
pop
fadd
rcl
and
xor
lock
fild
xchg
push
into
(bad)
adc
shr
fist
xchg
fidivr
or
sbb
cmc
(bad)
test
inc
and
pop
jle
int3
push
mov
rcl
les
cmps
and
sub
mov
mov
stos
in
mov
shr
loope
imul
adc
fstp
std
inc
ret
sub
mov
and
lds
and
ret
push
shl
sbb
jg
dec
iret
pop
(bad)
pushf
dec
loopne
in
pop
hlt
call
sbb
jnp
push
cmp
push
bound
adc
jmp
test
inc
mov
test
mov
sti
fidiv
adc
jno
xchg
jo
retf
mov
adc
and
and
outs
push
fdivr
push
imul
push
dec
mov
pusha
cmp
cmp
das
dec
fistp
push
std
mov
jl
movs
js
loopne
mov
xor
mov
push
push
mov
xor
(bad)
popf
cmps
add
ds
xlat
rol
sbb
cmps
inc
or
pop
jp
jmp
enter
inc
fimul
adc
sbb
call
push
and
aaa
adc
xor
rcl
sar
xor
adc
add
fdiv
xor
and
lahf
fsubr
pop
pop
xor
and
xchg
pop
xchg
push
pop
nop
aam
(bad)
mov
pusha
lahf
iret
add
mov
(bad)
fcom
add
jmp
fidiv
or
(bad)
mov
test
pop
sbb
mov
inc
add
sbb
sbb
xlat
ja
pop
adc
sbb
dec
not
xor
push
and
mov
retf
mov
push
bound
and
pop
inc
jmp
popf
cmp
and
loope
imul
cmp
pop
xchg
cmp
out
test
cld
mov
sbb
test
jmp
and
pop
cmp
rcl
adc
jp
cmp
test
ja
js
pop
ret
sbb
scas
xchg
sub
(bad)
sbb
fcomp
dec
pusha
(bad)
leave
lds
repnz
leave
jno
scas
sub
lock
and
cmps
outs
inc
dec
or
in
es
mov
dec
(bad)
cmp
xchg
pop
ja
loopne
aad
das
push
mov
push
jne
and
test
call
mov
xchg
sub
xchg
(bad)
test
adc
push
xchg
xchg
push
push
pop
adc
(bad)
in
xor
jmp
add
xchg
les
mov
mov
call
iret
aam
sbb
pop
xor
cmp
bound
mov
(bad)
jle
or
stc
ss
xchg
leave
in
call
push
and
xchg
leave
add
xlat
adc
movs
sub
mov
cdq
adc
jg
ds
inc
dec
mov
into
dec
popf
push
jecxz
fsub
aam
xor
sbb
ffreep
cmp
cmp
rcr
cmp
pop
pop
addr16
aam
les
mov
nop
sbb
mov
xchg
jg
stc
clc
push
mov
data16
mov
fsubrp
aad
cmp
pusha
jnp
shr
mov
or
addr16
push
jg
div
mov
jns
jge
mov
cmp
jmp
loopne
pop
sbb
inc
or
sub
icebp
aam
in
test
push
loop
dec
inc
mov
xchg
and
push
pop
cmps
xor
and
(bad)
jg
jmp
adc
sahf
(bad)
cmps
mov
mov
mov
pusha
or
seto
xchg
pushf
jge
xchg
int3
test
gs
push
out
(bad)
mov
in
mov
retf
dec
mov
mov
shl
lahf
fsub
pop
cld
call
iret
rol
dec
fild
je
fadd
add
or
ret
jecxz
xor
in
mov
js
fimul
test
mov
jmp
mov
ja
fwait
inc
stos
pop
mov
jl
mov
pop
je
sti
push
push
stos
xchg
into
or
push
(bad)
lds
and
retf
pop
push
rol
cmps
push
xor
mov
enter
sbb
pop
pop
pop
pop
lahf
dec
mov
pop
mov
aam
cmp
pop
pop
outs
fist
ins
call
in
aas
jecxz
xchg
xor
sub
dec
mov
stos
lods
outs
mov
test
(bad)
out
fdivr
stos
inc
stos
and
or
lods
bound
add
aad
stos
fcmove
cmp
(bad)
inc
js
movs
sti
inc
nop
les
enter
or
push
std
inc
add
pop
add
pop
push
ds
xlat
scas
ins
lods
sub
retf
fdiv
dec
mov
add
fwait
mov
jecxz
inc
(bad)
nop
xchg
fdivrp
clc
mov
test
pop
mov
fcmovu
fild
ficom
ja
aaa
imul
mov
sub
sbb
jo
enter
rcl
xchg
mov
jb
enter
es
aad
sbb
cs
hlt
push
or
or
into
mov
aaa
add
addr16
xor
fcmovu
int3
mov
jecxz
xlat
lock
cmp
push
xchg
sbb
push
es
xchg
mov
push
sbb
rol
or
push
xchg
mov
adc
or
sar
arpl
movs
je
pop
in
dec
cmp
mov
sbb
mov
hlt
mov
out
imul
pop
(bad)
push
add
pop
js
leave
ret
rcr
div
call
push
mov
sub
pop
retf
clc
jle
ftst
xchg
mov
cld
jle
jecxz
adc
mov
cli
sbb
dec
fidivr
call
jg
xor
cld
xor
pusha
rol
fnsave
daa
sbb
and
cwde
mov
cdq
adc
imul
push
repnz
fcom
stos
shl
imul
pop
jmp
sbb
lods
push
mov
leave
aam
mov
lods
pusha
mov
scas
aad
fistp
ds
test
mov
movs
add
shr
sbb
pop
test
lods
ret
xchg
popf
dec
aad
jmp
in
(bad)
mov
test
aad
mov
and
jno
leave
cmp
mov
mov
and
test
mov
jmp
(bad)
jge
sbb
aam
ins
pop
dec
fmul
retf
xor
push
(bad)
fisubr
out
jae
xchg
clc
xor
repnz
add
cld
push
les
ds
fdiv
add
dec
ds
dec
ret
mov
outs
push
cmps
outs
add
jns
cmp
sub
push
ret
xor
inc
test
lock
cmp
inc
popf
or
test
hlt
sbb
mov
inc
shr
mov
dec
call
sub
and
popf
rol
xor
mov
in
pop
jmp
jns
aad
adc
mov
test
xchg
jl
lods
inc
hlt
push
sahf
pop
push
retf
mov
inc
mov
mov
repz
mov
adc
retf
jecxz
inc
je
cmps
test
dec
pusha
mul
mov
mov
neg
mov
push
fwait
xchg
jmp
jecxz
rcr
mov
(bad)
mov
data16
std
mov
retf
mov
xor
mov
jo
xchg
loop
lahf
adc
stos
mov
es
cmp
adc
stos
sub
jp
mov
xchg
std
dec
es
fs
add
mov
jge
mov
jg
(bad)
mov
fdivrp
inc
cli
stc
hlt
xchg
pop
movs
scas
fnstcw
sbb
or
jge
cmc
and
jp
push
sbb
push
mov
mov
cmc
cmps
pop
jb
icebp
push
ficomp
dec
(bad)
adc
sbb
enter
xchg
cs
mov
xor
mov
pop
xchg
jmp
mov
icebp
les
inc
add
and
icebp
lock
das
test
or
sub
xchg
mov
stc
cld
dec
repz
imul
xor
mov
push
jcxz
movs
(bad)
mov
gs
(bad)
movs
(bad)
mov
inc
sub
mov
mov
xchg
add
inc
cmp
push
ds
sub
les
mov
sbb
mov
inc
pop
sbb
mov
cmp
aaa
sub
outs
xchg
stc
pop
pop
loopne
xchg
mov
enter
xchg
test
lods
dec
imul
mov
lds
sub
pop
vlddqu
loope
or
pop
mov
stc
(bad)
or
test
push
and
dec
(bad)
mov
adc
add
jecxz
psubusb
lahf
mov
(bad)
imul
push
fwait
jp
add
pop
mov
std
pop
mov
aaa
push
jge
popf
cli
jnp
in
mov
xchg
inc
movs
mov
mov
pop
jl
jecxz
push
inc
push
aad
sub
scas
mov
test
adc
outs
jbe
icebp
jmp
jge
pop
jo
add
sub
add
sbb
mov
js
in
scas
jmp
jmp
xchg
mov
dec
pop
inc
ret
popa
dec
sub
lahf
pop
jbe
call
mov
nop
push
xor
mul
inc
mov
pop
loopne
push
pop
int3
enter
int3
mul
push
es
lahf
retf
xchg
inc
(bad)
jg
data16
mov
pop
sub
retf
shl
push
loopne
mov
aam
aaa
and
mov
jmp
cmps
sbb
hlt
ret
xchg
div
lahf
cmp
push
(bad)
jp
push
mov
cmp
jecxz
push
xlat
sbb
mov
jecxz
inc
dec
jns
push
test
sub
test
xchg
cmp
sub
fsub
xchg
mov
scas
sahf
cli
clc
jecxz
mov
sub
fisttp
xor
inc
outs
hlt
pushf
pop
mov
mov
pop
jg
(bad)
lods
jmp
ss
and
pop
fidivr
mov
(bad)
out
mov
out
mov
adc
cmp
scas
aad
fcom
rcl
outs
adc
out
cmps
pushf
xchg
(bad)
jb
dec
mov
out
xchg
lock
in
(bad)
pop
fnstenv
mov
cmp
out
popf
cs
test
retf
dec
xlat
add
mov
jo
cld
lds
loope
fisubr
mov
mov
mov
pop
pop
mov
aad
mov
call
mov
mov
mov
(bad)
adc
or
das
cmps
enter
mov
sub
sbb
mov
cmc
pushf
lahf
ds
(bad)
stos
enter
aad
push
or
mov
outs
cmp
mov
in
sbb
jge
mov
push
popf
sbb
fiadd
aam
pop
popa
pop
cs
mov
sub
aad
fidiv
mov
mov
lods
sub
jne
clc
call
mov
xchg
bound
xor
fiadd
ror
fisttp
pushf
jecxz
les
in
mov
mov
or
scas
cmc
(bad)
stos
mov
adc
add
stc
sub
mov
mov
lock
ret
mov
push
and
rol
pause
je
lods
or
and
in
jmp
dec
mov
test
popf
mov
fcomp
ins
enter
dec
mov
push
test
mov
leave
in
cdq
call
movs
test
adc
cmps
cmp
adc
jae
(bad)
dec
ja
in
dec
cmp
ret
cmp
lock
mov
loopne
jmp
cmp
loopne
or
pop
mov
xor
push
imul
jbe
fneni(8087
or
bound
icebp
xchg
mov
xchg
xchg
jmp
aam
push
and
push
aas
test
jnp
fild
mov
jl
stos
(bad)
retf
int3
push
test
cmp
add
lods
inc
xchg
sbb
push
cmc
enter
das
adc
int
sub
popf
(bad)
pusha
pop
jp
ret
enter
adc
or
xchg
outs
and
lds
and
std
mov
in
aam
jns
in
cmps
popf
jmp
mov
aam
xchg
clc
mov
into
retf
sbb
in
jmp
lods
push
nop
gs
cmp
lods
push
inc
mov
and
jno
jp
sahf
loopne
pop
mov
xchg
call
ret
fimul
pop
pushf
mov
retf
add
xchg
jge
scas
add
imul
pop
fsubr
add
mov
icebp
mov
test
inc
rol
test
or
les
xchg
mov
and
or
and
jmp
cld
jbe
sub
xchg
jmp
mov
loopne
mov
cmp
sbb
pusha
stos
pushf
xchg
xor
add
retf
mov
cmp
pushw
jmp
push
jg
xchg
add
mov
mov
mov
xchg
in
mov
fcom
ret
fcom
loopne
gs
cdq
fstp
jns
lds
adc
scas
cmc
push
push
fnstsw
cmp
addr16
mov
ret
fsubr
add
adc
and
mov
add
pop
das
xchg
loopne
daa
loope
pop
sahf
xor
(bad)
add
mov
imul
pop
mov
(bad)
jge
fwait
ret
xchg
adc
jge
jmp
mov
or
(bad)
popf
loop
dec
(bad)
cmp
jecxz
lods
enter
push
inc
xor
mov
push
lods
enter
std
lds
dec
loop
mov
dec
inc
xchg
and
sbb
leave
pop
add
xlat
in
xchg
xor
scas
mov
stc
mov
dec
add
jnp
pop
ja
popf
inc
ret
fiadd
push
lahf
mov
jmp
xor
inc
inc
xchg
mov
xchg
sub
pop
jae
in
inc
sbb
xchg
jge
enter
loopne
sahf
ret
fild
cld
ret
cmp
pop
pop
retf
ret
or
in
sub
adc
and
sub
add
cdq
div
movs
jnp
ret
cmp
xchg
popf
fild
mov
jb
sbb
push
mov
loopne
(bad)
fadd
lea
push
pusha
icebp
cmp
sahf
(bad)
rcl
adc
cmp
sti
sbb
stos
out
sahf
fneni(8087
pop
loopne
aas
xchg
cdq
dec
mul
dec
mov
rcl
add
mov
jmp
mov
sti
jg
(bad)
mov
(bad)
lea
in
pop
out
mov
mov
out
and
cmp
mov
(bad)
aad
lds
xor
dec
scas
out
add
in
(bad)
adc
lahf
cli
jne
retf
fadd
xor
sahf
(bad)
cdq
mov
aam
xchg
jns
jmp
mov
icebp
scas
and
(bad)
inc
sub
dec
xchg
(bad)
(bad)
nop
mov
(bad)
lahf
int3
xchg
mov
fadd
or
push
xor
call
pop
dec
jl
pusha
pop
in
inc
fcom
dec
sub
cmps
sahf
ret
ret
jg
cli
ret
and
outs
rcr
pop
test
sahf
(bad)
xchg
out
enter
xor
xchg
stc
test
fidivr
inc
mov
and
pop
mov
cdq
cmp
fs
data16
retf
cdq
in
push
push
cmps
in
ins
pop
sbb
test
sbb
and
imul
inc
sbb
ds
adc
cs
or
adc
jle
pusha
sbb
add
sbb
inc
inc
xor
mov
es
inc
clc
arpl
lahf
pop
pop
dec
xor
or
mov
push
out
rol
mov
lds
movs
fnsave
push
mov
and
retf
add
add
repz
push
sbb
add
(bad)
add
inc
xchg
add
sub
mul
ret
or
fld
rcl
in
(bad)
les
fld
call
dec
pop
repnz
pushf
dec
lahf
js
sbb
jg
sub
push
int
(bad)
inc
retf
cmps
inc
and
test
enter
mov
int3
cmp
pop
cmp
push
ds
jno
ret
mov
(bad)
sub
sbb
int3
scas
sub
dec
fisttp
sub
xchg
dec
jg
and
mov
dec
aaa
(bad)
lods
dec
jecxz
add
jmp
popa
dec
adc
in
add
clc
int3
(bad)
hlt
lds
pop
jl
mov
movs
mov
xchg
mov
and
jo
shl
fidivr
clc
inc
faddp
sub
sbb
and
mov
scas
mov
add
fcomi
in
fdiv
mov
sub
jbe
mov
loopne
in
xchg
and
add
into
retf
inc
lahf
sub
mov
je
jge
push
repnz
xchg
and
retf
mov
test
in
fidivr
call
add
ins
adc
dec
je
cmp
pop
lods
(bad)
and
mov
cmp
mov
test
rol
xchg
es
repnz
stos
xor
push
bound
mov
xchg
ins
xlat
sbb
repz
pop
cmp
test
mov
sbb
imul
sub
rol
pop
jo
mov
mov
add
ss
and
stc
adc
push
mov
pusha
xlat
nop
aad
push
into
mov
dec
pop
mov
mov
mov
ds
fidiv
jg
movs
jp
out
or
mov
ret
pop
daa
movs
mov
mov
cmp
inc
pusha
mov
movs
cmp
sbb
or
nop
(bad)
in
xchg
xchg
sahf
pop
push
pop
mov
fcomp
adc
pop
int3
or
and
mov
mov
mov
mov
loope
jns
sbb
sub
fdiv
(bad)
retf
(bad)
and
loopne
aad
sbb
js
xor
cld
inc
push
mov
jecxz
clc
push
retf
add
xor
add
cdq
ficomp
(bad)
not
push
fld
and
mov
pop
add
and
jg
adc
mov
std
jnp
scas
mov
jp
jo
xchg
or
lds
lods
popa
add
sbb
sbb
and
xor
add
call
jno
movs
sub
mov
cmps
mov
dec
dec
sub
sbb
dec
in
movs
adc
mov
sbb
or
(bad)
movs
sub
push
or
xor
sti
mov
xchg
mov
inc
out
je
mov
mov
gs
pop
and
inc
retf
push
lods
mov
inc
lock
or
sahf
cwde
mov
xchg
inc
rol
adc
push
xchg
add
sub
xchg
test
inc
mov
out
mov
adc
mov
mov
scas
xor
mov
or
adc
mov
mov
in
dec
xchg
mov
pusha
xor
test
add
ja
popa
dec
inc
mov
outs
fidiv
push
ja
mov
xchg
sub
aas
xchg
cmps
(bad)
fiadd
add
push
repz
add
dec
loope
sbb
pop
adc
inc
push
jle
fst
mov
in
nop
call
inc
or
mov
ins
mov
mov
mov
jecxz
pushf
mov
in
xchg
dec
inc
cmps
scas
mov
add
inc
(bad)
add
aaa
call
mov
scas
pop
xor
mov
shr
jmp
xchg
cmp
push
(bad)
add
or
retf
xchg
mov
adc
mov
or
lods
pop
arpl
aas
mov
mov
sbb
stos
mov
add
ret
and
pop
outs
lock
add
add
in
popa
cwde
retf
adc
repnz
mov
adc
shl
pop
adc
mov
imul
push
pop
cmp
dec
inc
jle
dec
adc
test
pop
fucomp
xor
dec
mov
ja
push
sbb
pop
(bad)
fwait
sub
pusha
pushf
or
mov
aam
mov
xchg
test
or
sbb
stos
or
jbe
stos
or
mov
(bad)
lds
push
jbe
xchg
(bad)
fisub
adc
imul
ins
xchg
cmps
clc
ss
xchg
jge
(bad)
ss
fbstp
cld
push
fadd
mov
pop
push
push
xor
mov
xchg
outs
mov
out
int
push
dec
outs
adc
sbb
cmps
movs
in
jge
sti
fidivr
or
xor
pop
mov
pop
pop
ins
sub
repnz
jmp
mov
repz
loopne
mov
fucomp
pop
pop
jmp
adc
scas
test
popa
fcomp
mov
push
sahf
sbb
adc
jge
pop
loop
push
aaa
jmp
mov
ja
mov
retf
pop
cdq
cmp
nop
pop
or
in
popf
xchg
jmp
sbb
lds
cwde
xchg
mov
mov
adc
test
loopne
mov
add
or
mov
pop
(bad)
adc
in
pop
pop
mov
cmps
jb
iret
cmp
mov
push
enter
(bad)
push
sahf
mov
and
out
(bad)
out
and
imul
add
or
nop
loopne
xor
push
dec
sub
and
fadd
lods
adc
push
cmp
push
or
or
data16
pop
and
test
xchg
inc
mov
xor
xchg
movs
cdq
sbb
jo
sub
jle
mov
wbinvd
mov
xchg
dec
xchg
push
push
aad
cmp
imul
xchg
push
sub
and
or
outs
pop
jmp
in
es
xlat
rcl
cmc
pop
pop
out
gs
add
pop
sbb
mov
repz
call
outs
mov
pop
jnp
mov
shr
dec
repnz
call
jo
dec
cld
in
call
xor
or
ret
aam
enter
mov
push
leave
call
push
fsubp
inc
dec
pop
push
xchg
fsubr
in
and
inc
(bad)
shl
in
sahf
sti
ins
jno
fwait
loop
dec
adc
xor
pop
push
sbb
cmp
loop
jns
(bad)
push
push
mov
adc
cmp
mov
add
into
movs
ss
(bad)
test
sbb
xchg
xchg
xchg
(bad)
test
movs
xchg
loopne
mov
mov
xlat
sub
hlt
pop
mov
into
mov
xor
adc
(bad)
fistp
xchg
(bad)
mov
mov
push
lds
push
push
xchg
pushf
mov
sar
push
xor
xchg
hlt
rcr
xchg
dec
xlat
loopne
xor
retf
test
mov
jecxz
pop
inc
mov
mov
scas
sbb
mov
mov
ror
cmp
sbb
xchg
mov
sub
enter
rcl
aam
xchg
shl
jmp
daa
push
test
adc
jo
or
jecxz
jecxz
jmp
mov
rol
les
xor
push
pop
aad
mov
not
enter
fistp
xchg
mov
sbb
rcr
test
sbb
loope
outs
js
pop
jg
adc
popa
sub
repz
mov
lock
pop
mov
xlat
adc
sbb
movs
xlat
rol
mov
jmp
mov
imul
sub
daa
xchg
clc
test
ret
bnd
push
movs
mov
mov
mov
add
daa
icebp
cld
mov
frstor
jmp
(bad)
jbe
or
or
inc
imul
fsubr
fsub
pusha
mov
adc
mov
sysretw
pop
ret
ret
cmp
sbb
imul
mov
das
cmp
sub
cmps
push
cmpxchg
push
cmp
mov
pop
pop
shl
adc
(bad)
fs
sahf
inc
leave
and
retf
lock
or
sbb
jecxz
mov
bnd
mov
cs
inc
push
xor
xchg
movs
xlat
fmul
enter
inc
call
pop
rol
(bad)
and
adc
int3
das
push
mov
lahf
lahf
pop
retf
nop
nop
mov
nop
push
sbb
adc
xor
lods
mov
repnz
or
add
mov
mov
in
sbb
push
jae
xchg
push
and
mov
jb
jno
sti
or
jne
add
out
push
xchg
ror
push
mov
xor
cmp
pop
clc
mov
jmp
mov
or
retf
or
jmp
inc
in
retf
test
mov
movs
mov
cmp
or
xchg
dec
je
cwde
mov
add
ins
sub
inc
or
jge
mov
pusha
sbb
mov
sub
pusha
add
adc
xor
fxch
mov
lds
int
cmp
popf
popa
mov
sbb
pushf
sub
sbb
sub
sbb
pop
cmc
ret
or
into
mov
sbb
pop
mov
inc
stc
sub
lock
push
mov
ret
adc
fadd
dec
mov
loopne
mov
shl
push
mov
jg
outs
cmp
daa
mov
hlt
retf
cs
mov
add
add
lock
sub
mov
sahf
xchg
(bad)
jmp
mov
scas
mov
in
shr
popf
push
cld
mov
add
fsubrp
cdq
sbb
fnstsw
mov
xchg
inc
fnstenv
in
ffreep
pop
fneni(8087
pop
call
outs
test
ret
inc
(bad)
cmp
les
cmp
or
mov
push
sbb
xchg
jmp
out
sbb
test
push
rcl
adc
das
push
mov
mov
(bad)
es
cmp
mov
es
add
rol
mov
cmp
fdiv
(bad)
sahf
scas
cdq
cmp
jno
mov
lods
add
xor
test
mov
dec
imul
mov
cmps
inc
sub
mov
xor
ror
xlat
lock
ins
cwde
pop
in
push
mov
and
leave
enter
xchg
cmp
cmp
fisttp
inc
es
inc
(bad)
rol
sbb
imul
inc
and
js
push
inc
inc
and
jmp
fwait
ror
cmp
sub
inc
fistp
push
pop
dec
dec
lahf
popf
mov
stos
pop
mov
jle
mov
adc
test
sub
mov
cmp
ss
cmps
fidiv
out
mov
sub
imul
mov
xchg
cdq
lods
xchg
mov
pushf
cmps
ror
hlt
rol
sar
les
stc
pop
push
data16
pop
dec
test
cmp
xor
jg
ret
pusha
ret
retf
xor
mov
jbe
pushf
cmovno
adc
fistp
push
jecxz
dec
imul
cmp
mov
imul
jnp
dec
add
in
xchg
sub
adc
js
je
pusha
mov
pop
sbb
xor
fcomi
ja
jge
mov
jle
dec
sbb
call
push
outs
repz
in
dec
in
mov
in
push
or
xor
aam
xchg
sbb
xor
jns
adc
mov
cmp
add
cmps
(bad)
fisubr
mov
sub
mov
scas
xor
pushf
or
test
imul
or
push
mov
sub
test
and
xchg
arpl
(bad)
bound
sbb
adc
mov
pop
sbb
nop
adc
enter
jecxz
jge
mov
adc
enter
mov
aam
add
shl
shr
iret
mov
inc
in
ds
fdiv
or
pusha
sub
jl
pop
and
push
dec
into
sub
cmc
fwait
loopne
fnstsw
add
ret
es
loope
sub
shl
test
and
sbb
gs
and
fadd
inc
add
push
rol
inc
(bad)
(bad)
call
push
movs
pop
sub
jge
jo
dec
lahf
sbb
int
dec
mov
xchg
and
cmp
sar
push
push
cmc
or
mov
or
(bad)
retf
inc
(bad)
popa
dec
mov
nop
call
lock
rcr
rol
iret
ins
je
sar
xchg
inc
leave
call
and
(bad)
cli
shr
push
cmp
(bad)
into
or
or
repnz
sub
or
sbb
popa
adc
lds
les
dec
test
sub
jecxz
mov
imul
jg
xor
fcomi
lods
cmp
pop
rcl
mov
das
pop
xchg
(bad)
jmp
pushf
lock
mov
pop
repz
sar
lahf
jbe
sbb
xchg
call
cvttps2pi
aam
rcr
mov
gs
fadd
neg
std
(bad)
(bad)
loopne
pop
jo
gs
xchg
xor
and
ins
push
rol
xchg
rcl
push
(bad)
enter
loopne
xchg
adc
mov
mov
repnz
ret
jae
pop
loopne
inc
mov
mov
xchg
jnp
rol
pushf
mov
out
mov
bound
inc
sub
cmp
dec
shl
xor
pop
shl
outs
and
ror
xor
mov
retf
push
jmp
mov
outs
dec
push
cmp
js
push
shl
xchg
mov
jl
xchg
xchg
(bad)
push
mov
mov
lea
loop
scas
fsubr
(bad)
jecxz
or
mov
adc
and
pop
dec
sub
retf
iret
mov
and
sbb
cmps
mov
push
loopne
inc
inc
retf
leave
in
cli
out
lahf
mov
ja
stc
mov
cmp
cdq
cmp
xor
jl
jmp
mov
fsubp
sbb
outs
test
clc
arpl
repnz
sub
jns
fsubr
inc
rcl
loope
xlat
fwait
or
xor
cmps
pop
pop
xchg
jmp
or
rcl
hlt
test
nop
adc
push
mov
push
jge
pcmpeqw
pop
mov
div
sbb
test
mov
sbb
mov
xchg
bound
pop
mov
dec
inc
mov
mov
jecxz
add
mov
(bad)
or
cmp
jmp
add
add
stos
into
ret
mov
stos
and
shl
sbb
fst
lahf
jae
cli
pop
mov
mov
gs
call
repz
inc
push
cdq
jecxz
mov
jmp
lahf
shl
in
ins
sbb
fidivr
pop
shr
js
push
pop
jo
hlt
adc
add
mov
test
fistp
adc
fwait
lods
push
clc
xlat
xchg
push
rcr
jge
jecxz
pop
jbe
cmp
or
cmps
es
or
push
data16
push
pop
sahf
sub
add
push
dec
push
push
(bad)
jle
rol
nop
sahf
sbb
call
movs
fnstcw
fsub
int
cmps
(bad)
scas
mov
inc
lods
shl
xor
aam
inc
xor
pusha
xchg
mov
pushf
mov
xchg
aad
jle
adc
shl
adc
mov
xchg
xchg
push
mov
sbb
sbb
rcl
cmp
push
cmps
and
hlt
lds
or
mov
pop
leave
rol
xchg
fsubr
(bad)
and
mov
fadd
scas
(bad)
fisubr
push
dec
retf
sub
xlat
xchg
xchg
mov
les
or
popa
mov
pusha
call
add
cli
adc
leave
es
add
lods
pop
fstp
pushf
lods
cmp
mov
into
push
sub
aad
fst
cmps
leave
aaa
cmps
int
icebp
cmps
xchg
mov
je
cmps
(bad)
int3
repz
ret
outs
aam
(bad)
ins
mov
outs
call
shr
pop
sub
ror
mov
sbb
gs
movs
mov
hlt
mov
lods
(bad)
jmp
out
pop
lahf
fcomp
in
repnz
fidivr
aad
or
dec
mov
dec
shl
in
fadd
fcmovne
clc
pop
hlt
pop
mov
push
sub
xlat
dec
mov
in
xchg
lods
jns
and
movs
popa
push
daa
sbb
retf
pop
in
adc
cmp
jmp
dec
sub
xor
or
inc
iret
xor
mov
and
nop
lods
mov
cmp
xor
inc
mov
cs
inc
mov
cmp
cmp
and
sbb
loopne
mov
sub
into
sub
sbb
je
push
and
fsubr
in
mov
imul
xor
add
fcomp
outs
inc
jg
dec
test
(bad)
or
leave
shl
cmc
lods
repnz
push
add
mov
add
ror
adc
enter
retf
adc
mov
leave
(bad)
leave
and
neg
add
cmps
xchg
and
cmps
movs
in
test
mov
add
push
icebp
mov
push
adc
fucomip
popa
push
aas
mov
hlt
scas
lahf
pushf
(bad)
jbe
aam
sbb
inc
mov
cld
scas
cld
jbe
xor
int
dec
out
scas
mov
ins
jecxz
fnstcw
sbb
or
add
iret
lods
add
call
in
xchg
sahf
(bad)
mov
mov
mov
and
mov
cmp
push
iret
mov
ret
or
repnz
ret
int
mov
and
and
rol
data16
ins
sysexit
fst
rcr
shl
outs
hlt
(bad)
hlt
cdq
push
clc
int3
sub
inc
(bad)
mov
push
ror
or
test
xor
popa
adc
cmp
(bad)
mov
stos
sahf
add
pushf
iret
jp
or
outs
and
or
scas
ret
mov
dec
sub
outs
mov
inc
out
push
pop
pop
pop
aas
add
out
pop
add
hlt
sti
sub
mov
or
add
and
loop
outs
xor
es
pushf
out
pop
aam
cmp
mov
pop
popa
and
hlt
rcr
cmc
gs
fcom
enter
mov
movs
dec
add
xchg
ror
scas
mov
adc
in
xchg
int3
scas
mov
mov
cmps
outs
push
jmp
xchg
icebp
xchg
test
mov
xor
jg
jbe
fbstp
mov
sub
sar
les
mov
inc
push
popf
sti
imul
mov
mov
(bad)
retf
mov
push
dec
pushf
jge
cs
dec
fwait
les
lods
dec
push
jp
shl
push
idiv
sub
in
xor
inc
lahf
jp
cmps
xchg
movs
dec
mov
xor
aam
fisubr
fdiv
rcr
fnstcw
call
adc
clc
pushf
add
pop
popa
xchg
mov
stos
lea
xchg
push
mov
push
jmp
push
push
push
psubusb
lahf
aam
loope
sahf
mov
cmp
in
fbld
push
in
pop
rcr
sub
gs
fcomp
scas
push
sbb
bswap
xchg
mov
add
gs
lds
adc
int
push
out
cmp
jecxz
arpl
mov
mov
mov
hlt
push
mov
aad
cli
pop
mov
push
mov
nop
popf
mov
test
xchg
mov
push
jecxz
fdiv
mov
aaa
xchg
cmp
fcom
test
or
scas
pop
cmp
cmp
sub
lea
sbb
fidivr
fcom
inc
xchg
dec
push
mov
ficomp
test
sub
jge
mov
fnstsw
adc
clc
mov
fdivp
daa
fst
and
ret
fwait
neg
mov
mov
das
xchg
jmp
inc
xor
jo
aad
and
xlat
out
data16
out
leave
test
add
add
xor
pushf
neg
mov
and
test
xchg
test
mov
push
mov
test
adc
retf
fidiv
fild
pandn
and
xchg
cdq
sbb
cmp
push
xchg
mov
outs
(bad)
jecxz
popa
neg
fist
xor
fcmovne
aad
shr
mov
shr
test
scas
rcl
xchg
hlt
loop
xchg
mov
je
lea
mov
mov
pushf
xchg
in
rcr
mov
in
mov
mov
fisub
mov
shr
adc
leave
std
movs
or
loope
fs
repnz
(bad)
or
sahf
jge
stos
xchg
cmp
or
sub
push
int3
dec
mov
rcl
jecxz
mov
lods
jae
sti
cmp
cmps
mov
cmps
sub
sbb
add
push
aad
and
pop
(bad)
jae
pop
out
mov
jbe
inc
jae
fild
jbe
loopne
mov
rcl
mov
(bad)
xchg
xor
mov
xor
scas
daa
mov
pop
movs
dec
xchg
test
mov
shl
mov
shl
push
inc
test
out
shl
pop
or
xor
fwait
stc
xchg
rol
sub
adc
add
js
mov
imul
cwde
mov
mov
jmp
add
pop
push
ja
inc
mov
inc
rcl
ret
(bad)
jae
mov
mov
jmp
sbb
mov
pushf
xchg
jecxz
push
fist
dec
mov
and
xchg
jecxz
sar
popf
sbb
shr
ins
pop
jmp
jl
dec
jnp
add
pop
nop
jnp
(bad)
mov
and
in
sbb
rcr
mov
arpl
inc
dec
cmp
jg
inc
push
jo
sub
xor
adc
and
mov
jo
push
in
call
(bad)
rcr
stos
sahf
adc
and
aam
jecxz
ins
daa
bound
or
cs
push
add
sbb
dec
dec
hlt
out
mov
jmp
xor
(bad)
and
or
ss
lahf
jb
hlt
jnp
aas
rcr
ss
or
mov
aam
fistp
and
mov
arpl
fdivr
and
mov
mov
adc
xchg
adc
fsubr
shr
(bad)
push
pop
test
js
arpl
mov
test
push
mov
mov
mov
mov
movs
sbb
jl
sbb
clc
fwait
movs
inc
xchg
movs
enter
jne
add
sbb
outs
scas
test
jno
call
mov
scas
push
out
cmp
mov
test
test
call
adc
push
push
retf
jge
xor
push
pop
mov
dec
ficom
test
push
rcl
sahf
xor
cmp
xchg
sub
rcl
and
inc
lock
(bad)
setne
scas
mov
and
sahf
dec
inc
lahf
xor
mov
mov
dec
mov
ror
xchg
les
adc
xchg
outs
jo
jecxz
imul
inc
pmaxub
jecxz
adc
out
push
stc
out
loop
jecxz
(bad)
ins
fs
outs
or
jl
push
stos
test
jo
xchg
fs
mov
mov
out
or
mov
push
mov
(bad)
int3
mov
ins
push
sbb
adc
stos
mov
in
leave
aam
jp
out
jns
mov
inc
lock
mov
push
or
jns
pop
bound
xchg
or
shr
dec
jg
mov
mov
ror
pop
jecxz
mov
fwait
rol
add
mov
jg
test
and
ins
popf
push
pop
test
call
pop
xor
inc
mov
pusha
push
(bad)
push
xor
or
adc
test
lods
pop
jmp
push
leave
pop
and
mov
pushf
stos
jmp
nop
arpl
xchg
mov
arpl
xchg
(bad)
pop
mov
in
lea
pusha
push
or
pop
outs
push
inc
jbe
movs
mov
repz
(bad)
jge
inc
gs
popaw
push
icebp
inc
std
fldcw
call
ja
sub
pop
pop
out
xor
cmp
lds
xor
xor
mul
outs
fldcw
out
in
mov
fldenv
fimul
std
xchg
jecxz
mov
push
mov
sub
movs
fld
inc
pop
mov
xchg
cmps
xchg
leave
je
ficom
repnz
movs
js
fucomi
mov
enter
dec
frstor
inc
lods
loopne
sub
pushf
mov
mov
inc
retf
adc
icebp
add
stos
xor
push
loope
jns
mov
adc
push
dec
mov
rcr
cmps
mov
popf
dec
mov
inc
inc
js
pop
mov
lea
adc
adc
gs
mov
fcomp
(bad)
into
sub
aaa
ror
retf
call
int
pop
fmul
push
(bad)
xor
dec
mov
test
mov
cmp
rol
mov
mov
inc
xchg
iret
cli
mov
rol
mov
ins
add
es
inc
hlt
ins
inc
popf
mov
or
sub
xlat
gs
aaa
stos
fimul
xor
sahf
outs
jg
mov
jl
fidivr
sub
mov
jl
fild
mov
mov
push
xchg
mov
test
data16
xchg
fwait
pushf
pop
mov
push
(bad)
sbb
mov
movs
shl
jl
mov
push
inc
or
push
sub
adc
fs
xchg
jecxz
imul
jmp
mov
loop
push
fsub
jge
aas
and
call
and
sub
(bad)
adc
lock
adc
call
xor
push
ficom
pushf
jb
ins
push
add
retf
mov
add
into
mov
daa
sar
imul
test
add
int3
sbb
rcl
scas
sahf
mov
fnstsw
test
sti
std
int3
imul
movs
sub
sbb
jbe
xor
loop
(bad)
mov
rol
sbb
cmp
push
das
mov
xchg
sbb
pop
lods
and
adc
mov
into
sahf
inc
or
adc
jno
jnp
test
and
mov
fldenv
test
test
in
and
movs
mov
mov
es
lahf
sub
and
xchg
test
xchg
arpl
xor
inc
mov
xor
ret
sub
out
addr16
cli
test
or
inc
pop
pop
test
push
push
jns
sbb
gs
xchg
mov
inc
int3
lahf
gs
jb
mov
(bad)
mov
add
jge
imul
cmp
or
sbb
aam
test
xchg
fistp
rcl
or
push
push
jmp
test
loope
call
ret
repnz
sub
mov
push
xchg
mov
leave
mov
adc
push
xchg
retf
cmp
test
ins
xor
mov
xor
mov
stos
(bad)
xor
scas
cs
add
add
pop
mov
pop
add
xchg
loop
push
pushf
cdq
imul
and
mov
rcr
fmul
aam
lods
mov
push
push
cmp
push
mov
pushf
gs
xor
pop
pop
imul
dec
sub
jge
lods
inc
pop
jmp
mov
add
nop
add
dec
mov
pusha
inc
pop
ins
add
inc
and
xor
mov
dec
push
les
loopne
dec
adc
push
push
rcr
fcom
sbb
xchg
push
adc
stc
xchg
push
mov
and
sbb
xchg
aas
lahf
ins
lds
pop
(bad)
hlt
je
rcr
imul
mov
mov
add
cmp
fwait
call
jmp
add
mov
ja
shr
in
in
xor
xchg
mov
(bad)
cli
push
jo
lods
push
imul
push
call
mov
pushf
pop
ja
sbb
fist
xor
mov
and
int3
jae
fcom
mov
std
mov
hlt
fst
jo
loopne
fsubr
cmps
add
jae
inc
adc
or
push
imul
inc
fdivr
jno
test
mov
shl
jecxz
xchg
lahf
lods
pop
loop
(bad)
ins
mov
arpl
sub
fdiv
xchg
imul
pop
(bad)
mov
aam
movs
pop
rcr
call
in
call
mov
in
sbb
mov
push
mov
add
xchg
(bad)
jnp
repnz
in
fwait
daa
and
popf
mov
pop
(bad)
out
repnz
mov
adc
cmps
xchg
mov
loopne
or
call
sahf
js
push
xchg
cdq
adc
xor
loope
(bad)
xchg
pusha
ret
cmp
mov
lods
mov
push
rcl
mov
push
enter
push
push
pop
inc
pop
lods
mov
in
loope
pusha
popa
cs
push
mov
int
iret
inc
mov
push
ins
adc
enter
cli
xchg
ret
lds
inc
aam
xchg
mov
cmp
arpl
js
xlat
mov
xchg
push
sbb
shl
int3
mov
xor
add
dec
and
cld
sub
ss
xchg
lock
inc
mov
cmps
in
out
xor
je
and
ja
test
xchg
fwait
sbb
jae
cmp
add
les
ss
dec
or
and
out
sub
sbb
inc
adc
add
imul
dec
int3
icebp
xchg
and
sbb
cmp
xlat
add
push
xor
repnz
xor
aad
mov
mov
mov
add
lds
and
pushf
aad
leave
leave
fistp
xor
jmp
shl
inc
js
ret
adc
push
fcmovnb
pop
jl
xchg
nop
xchg
mov
rcr
test
push
fsub
xchg
lods
adc
iret
inc
test
or
out
jmp
shr
adc
(bad)
das
xchg
jg
loopne
retf
(bad)
daa
loopne
out
sub
test
dec
push
cmps
add
call
mov
pop
push
or
ret
ins
shr
and
pop
cld
loopne
lahf
enter
adc
loopne
mov
int
xor
mov
pop
inc
ss
adc
or
push
pop
lock
cmp
pop
cmc
pop
mov
pop
sahf
mov
test
jno
test
jge
add
xchg
dec
shr
in
add
movs
cmp
test
add
test
(bad)
fnstsw
stos
scas
push
pop
push
dec
pop
xchg
clc
adc
lea
jbe
mov
mov
test
mov
rcl
pop
stc
sbb
int3
sbb
cmp
mov
fwait
xor
mov
add
inc
inc
push
inc
xor
push
loop
add
push
or
repnz
add
mov
test
and
enter
movs
push
rcl
add
mov
fisttp
cmp
push
cdq
pop
(bad)
je
add
aaa
mov
enter
std
push
mov
pop
out
mov
test
sub
mov
jmp
xchg
jle
mov
xchg
dec
cmps
lods
push
in
and
int
aad
dec
xor
xchg
adc
pop
and
pop
loopne
pop
mov
std
pop
adc
inc
xchg
pusha
pop
jbe
mov
sub
jns
(bad)
les
movs
mov
xchg
(bad)
ror
fidivr
enter
push
cdq
mov
push
mov
cdq
xchg
adc
nop
sbb
mov
out
or
jl
xchg
mov
cld
fcom
aad
pusha
mov
push
out
jb
fnsave
add
and
cld
or
faddp
mov
pop
ds
sbb
(bad)
nop
bound
mov
dec
out
mov
stc
jl
or
hlt
push
test
push
jo
and
daa
pop
mov
bound
cs
imul
div
mov
mov
mov
mov
(bad)
lahf
imul
lahf
popa
fcom
fwait
lea
call
fsubr
ja
xor
inc
sbb
nop
add
loopne
xor
int
jl
xchg
xor
dec
ins
ret
es
or
sub
xlat
(bad)
out
nop
mov
pop
lds
mov
cmps
nop
jecxz
ds
outs
fadd
sbb
sbb
stos
mov
fcmovnbe
hlt
mov
or
scas
ret
push
stc
hlt
push
loopne
fs
into
les
shl
shl
lds
jecxz
xor
lock
cli
ret
(bad)
sub
push
jmp
test
push
jecxz
lods
ins
mov
sar
jo
scas
push
xor
push
mov
mov
rcl
mov
jmp
mov
out
mov
mov
call
dec
aas
mov
push
sub
(bad)
scas
leave
mov
mov
call
in
mov
xchg
push
cli
inc
stc
stc
shl
int3
add
fst
mov
packuswb
dec
cmps
retf
pop
mov
sbb
psrlq
and
pop
leave
shr
push
adc
je
ror
sbb
iret
loopne
rcr
cmp
inc
(bad)
xchg
or
or
adc
(bad)
in
mov
jecxz
cmp
jg
(bad)
cmp
xor
mov
xchg
ss
jmp
(bad)
fwait
adc
push
dec
dec
ins
shr
xor
sahf
(bad)
sbb
fisubr
pop
cmp
imul
leave
pushf
push
scas
jmp
jp
mov
xchg
in
scas
or
xor
xchg
push
inc
(bad)
loopne
fimul
mov
fdiv
push
iret
div
push
(bad)
loopne
ss
movs
imul
lods
repz
jne
(bad)
(bad)
(bad)
nop
in
inc
in
in
sbb
push
bound
scas
fmul
or
sbb
lods
mov
xchg
add
add
shr
sbb
sti
and
dec
rol
aaa
outs
xor
mov
sub
(bad)
xchg
scas
pop
mov
pop
xchg
mov
mov
in
add
mov
(bad)
xor
or
pop
mov
scas
out
popa
fcomp
inc
retf
jg
loop
inc
inc
xor
pop
xchg
sbb
xlat
xchg
xchg
mov
xchg
mov
mov
popa
or
lahf
inc
mov
adc
cmp
xchg
xchg
xlat
inc
sbb
dec
jecxz
leave
jle
lods
adc
inc
test
and
xchg
push
push
lods
mov
adc
push
ja
xchg
mov
mov
imul
arpl
lods
pop
pusha
mov
and
xchg
sbb
cld
call
pusha
sbb
cli
outs
repnz
sub
xchg
mov
shl
test
pop
fs
sbb
sti
leave
pushf
ror
into
call
mov
add
cdq
adc
sbb
xchg
addr16
loopne
push
mov
retf
push
lock
mov
test
or
and
xchg
adc
inc
mov
dec
(bad)
mov
mov
lods
rol
pushf
mov
adc
(bad)
ret
pop
lahf
ins
popf
adc
cli
jg
cmc
or
sub
xor
xor
stos
shl
pop
rcr
or
jmp
jmp
loop
and
xchg
and
adc
test
pop
mov
adc
push
fcmovnbe
mov
popf
jecxz
leave
loopne
pop
enter
mov
fcomp
rol
dec
mov
sahf
jecxz
or
cmp
inc
push
cwde
loopne
bound
xchg
(bad)
sub
mov
pop
lods
pop
test
jae
into
cmps
mov
lock
jb
popf
push
dec
pop
mov
pop
cmps
retf
fisubr
sbb
shr
loopne
fcmovnu
xor
mov
push
shl
xchg
rcr
sti
fcomp
mov
cwde
loop
scas
ret
enter
xlat
pop
xchg
adc
test
dec
or
jmp
mov
aam
and
pushf
in
leave
frstor
pop
out
fcmovnb
(bad)
out
push
ins
pop
push
pop
rcl
sbb
xchg
push
popa
loop
fwait
inc
mov
cmps
pop
loopne
sbb
pushf
and
push
aad
loopne
in
in
jmp
sar
ficom
scas
push
in
cmps
lds
(bad)
mov
loop
lods
outs
sub
in
xchg
xchg
jnp
pop
fcomip
mov
leave
adc
jge
dec
cld
mov
pop
arpl
int
in
scas
mov
or
adc
add
adc
gs
mov
(bad)
push
sbb
hlt
scas
and
test
pop
rcl
pop
sub
inc
add
test
push
loop
mov
mov
(bad)
sub
fdiv
xchg
xchg
test
fidivr
cmp
das
fst
mov
not
inc
fisubr
jg
rol
lods
pop
sar
and
jl
int
adc
cs
cmp
js
xor
xchg
add
sbb
sbb
int3
int
iret
lahf
clc
xchg
mov
(bad)
dec
cld
and
adc
repnz
sbb
in
or
dec
out
fistp
cmps
xchg
jb
mov
pop
jle
dec
sbb
out
push
xchg
fimul
cmp
stos
cmps
pushf
mov
mov
xchg
jp
xchg
push
mov
jmp
fidivr
fld
fst
mov
hlt
mov
fwait
xchg
loop
or
mov
mov
in
call
pop
xor
stos
sbb
jg
mov
repnz
gs
jno
mov
sub
stc
int
sbb
ret
xlat
sub
mov
popf
pop
cld
pop
push
es
mov
adc
dec
lea
pushf
inc
mov
pop
cmp
pop
xchg
pop
shl
scas
stc
test
jne
loop
pushf
or
(bad)
call
add
pop
rcr
push
sub
dec
loop
cmp
mov
test
add
push
push
(bad)
bound
adc
cdq
leave
adc
cld
cs
(bad)
add
dec
push
ja
sbb
enter
cli
jecxz
int3
int3
(bad)
xor
xor
push
pushf
push
push
mov
mov
(bad)
and
xlat
push
mov
mov
clc
(bad)
xor
pushf
pop
sbb
ret
push
test
lods
or
adc
adc
rol
inc
retf
jl
dec
dec
dec
pop
cs
xchg
xchg
push
adc
stos
inc
lods
pop
and
stos
cdq
in
push
into
call
cmps
xchg
cld
mov
enter
(bad)
call
dec
jbe
and
inc
aaa
je
mov
aam
enter
push
mov
loopne
inc
cmps
pop
xchg
mov
gs
jo
call
mov
les
xlat
(bad)
stos
pop
jb
xor
lea
mov
lock
jmp
sbb
xchg
mov
nop
pop
and
pop
adc
pop
mov
in
xchg
fcomp
inc
call
mov
in
mov
fmul
cmps
push
loopne
push
test
pop
scas
cmp
mov
and
mov
pop
jecxz
enter
adc
(bad)
scas
mov
sar
lock
es
mov
ret
rcr
jbe
and
jo
call
cmp
call
push
push
pushf
push
mov
and
hlt
pop
ja
retf
fisttp
lea
xchg
push
adc
cld
test
xchg
mov
scas
popa
dec
mov
add
xchg
pop
pushf
es
shl
(bad)
jns
or
(bad)
sbb
mov
cdq
sbb
je
push
movs
mov
rol
mov
cmp
movs
mov
cmp
xchg
push
aas
loopne
add
pop
js
xchg
scas
leave
ins
(bad)
xchg
xchg
loope
ret
xchg
push
mov
jmp
fwait
push
pushf
jecxz
mov
and
lods
(bad)
fnstsw
sbb
(bad)
cmps
call
mov
(bad)
mov
or
cld
ja
lahf
jnp
push
call
or
call
push
mov
pop
push
add
xchg
fstp
inc
cdq
adc
loope
bound
lock
pop
cmps
mov
cmps
stc
lods
jle
xchg
mov
pusha
cmps
inc
sahf
jge
mov
jae
adc
imul
lahf
cwde
sahf
dec
stc
xchg
xchg
mov
xchg
adc
retf
adc
cdq
ins
je
push
dec
loopne
adc
iret
jle
jne
jnp
loop
mov
dec
ins
ret
push
mov
test
jecxz
cmp
mov
sti
dec
out
aad
dec
lods
push
dec
jns
(bad)
mov
add
dec
xchg
or
mov
sahf
push
jecxz
or
adc
fdiv
stos
nop
and
test
aad
inc
mov
aad
jecxz
addr16
fmul
dec
nop
cmp
mov
fnstcw
cmp
cmp
enter
or
sbb
mov
retf
fsubr
xchg
inc
adc
cmp
in
ds
pop
lods
inc
ds
push
mov
dec
outs
xlat
xor
ins
push
(bad)
out
fwait
aad
rcl
(bad)
sahf
stc
inc
mov
push
data16
sub
xor
popf
jecxz
inc
jne
sahf
or
mov
(bad)
xor
and
(bad)
jae
mov
mov
test
dec
sar
cmp
jl
in
mov
or
xlat
fsubr
cmp
aas
lock
fisttp
jbe
mov
pop
call
sub
add
test
in
call
aam
xchg
movs
inc
sbb
adc
xchg
retf
mov
inc
jb
inc
lahf
lods
enter
ins
mov
xor
sbb
pusha
jmp
sub
popf
ins
popf
ja
pop
(bad)
cmp
int3
inc
cs
xchg
pop
pop
push
jb
lgs
cmp
pop
jne
div
pop
jle
ins
ds
iret
push
xlat
mov
mov
sub
xor
or
fmul
mov
ficomp
movs
cmp
les
les
xchg
push
add
push
sahf
jbe
fisttp
ins
(bad)
rcl
imul
mov
test
cmp
imul
scas
pop
xchg
pop
jecxz
jl
ficom
push
leave
cmps
push
pop
mov
or
inc
xchg
xor
leave
inc
mov
mov
xchg
xlat
pop
in
test
movs
les
repnz
xlat
dec
pop
push
fadd
jecxz
imul
inc
jg
call
mov
add
inc
mov
add
data16
dec
in
add
fadd
sbb
push
shl
(bad)
pop
mov
(bad)
jp
fistp
dec
fs
call
jg
push
pop
mov
jecxz
sahf
pushf
mov
cdq
cmps
pop
test
icebp
pop
cmc
inc
jnp
cmp
or
mov
sub
mov
xchg
sbb
pusha
mov
or
cli
mov
xchg
imul
imul
adc
(bad)
mov
pop
jno
xor
jge
and
dec
xor
add
mov
adc
cmp
hlt
mov
pop
mov
ja
inc
inc
jg
loope
cmp
in
mov
push
xor
xor
mov
pop
jecxz
or
pop
nop
add
inc
les
adc
mov
jle
push
test
or
pop
mov
sbb
shl
pop
lods
ins
aam
mov
scas
adc
pop
pop
inc
call
push
dec
ret
jns
push
pop
fstp
call
ret
lods
shr
les
add
rcr
mov
push
sub
sub
jae
mov
dec
ret
pusha
jo
les
in
outs
test
cmp
ds
in
cli
mov
cmp
mov
mov
lods
inc
xor
stos
fidiv
dec
pop
pop
inc
nop
int
push
mov
pushf
ror
add
retf
xlat
pop
(bad)
fadd
sbb
sub
fdiv
and
(bad)
ds
sub
fs
mov
add
mov
sub
xor
(bad)
pushf
xlat
(bad)
popf
enter
push
cmp
cmc
sbb
rol
xchg
ds
inc
popf
or
fld
push
dec
shr
movs
ss
mov
iret
dec
hlt
mov
test
inc
(bad)
int
test
mov
lahf
push
and
jmp
inc
xor
cmps
add
jmp
jmp
add
imul
out
(bad)
scas
jnp
pop
cmp
fnstsw
jmp
inc
lahf
lods
mov
pop
jmp
pop
int
adc
imul
retf
ins
cli
xchg
cmp
xchg
jecxz
push
pusha
js
sub
mov
fmul
jne
mov
retf
imul
out
bnd
fdivr
shl
pop
outs
push
push
mov
cmps
adc
aam
popf
ror
jmp
ss
jb
std
ret
xor
jmp
mov
pop
movs
mov
and
xchg
push
push
jne
fist
sub
inc
push
cdq
mov
rcr
stc
das
pop
adc
rol
fst
sub
mov
push
cmp
ret
aam
(bad)
enter
test
push
les
pop
sbb
fdivr
retf
add
fxch
xor
sub
and
ds
pop
push
rol
pop
sub
dec
dec
aad
cmp
out
ja
loopne
test
mov
test
xlat
sbb
mov
(bad)
mov
mov
jmp
push
in
imul
mov
xor
and
push
or
xor
imul
sub
xchg
lds
sbb
cmp
loopne
cmps
hlt
fcmove
inc
fnstsw
sbb
imul
push
pop
int
or
inc
(bad)
sub
add
cmp
js
push
sub
icebp
(bad)
call
(bad)
fsub
adc
movs
hlt
sub
mov
sti
adc
shr
dec
pop
push
adc
fcomp
enter
or
(bad)
jbe
in
fs
sub
jg
cmp
mov
in
inc
out
enter
aam
rol
clc
pusha
pusha
xchg
push
fmul
mov
movs
jmp
movs
xchg
jmp
lahf
js
mov
fisubr
test
test
push
fcmovnbe
inc
cld
jb
ret
sbb
bound
pop
or
mov
repnz
icebp
mov
sub
fcom
push
mov
xchg
lods
push
pop
jbe
mov
adc
mov
movs
mov
inc
pop
mov
or
mov
rcl
sti
cs
mov
push
js
clc
popa
push
loop
push
push
mov
outs
adc
push
xchg
in
fcom
push
xor
mov
sub
push
imul
retf
aas
mov
jb
push
movs
shr
movs
pop
sub
jns
enter
aaa
mov
adc
sub
rcl
mov
shl
jns
cwde
mov
fcom
dec
outs
xchg
mov
push
xor
sub
xchg
mov
xor
mov
enter
(bad)
pushf
pushf
cmps
loopne
fsubr
pop
pop
add
cmps
mov
dec
aam
push
pop
xchg
out
add
push
jmp
sti
xchg
jmp
enter
sub
mov
imul
push
cmc
enter
pusha
push
inc
mov
push
fwait
jge
mov
pop
pushf
sub
das
lods
adc
(bad)
and
(bad)
push
cmps
retf
fistp
pop
jg
test
adc
adc
(bad)
cmp
add
or
push
lock
push
popf
(bad)
xchg
cld
cmp
shl
in
adc
rcr
ret
cld
xchg
mov
xchg
ja
(bad)
xchg
mov
mov
nop
mov
push
test
(bad)
xor
push
xchg
lahf
jge
jg
sar
lea
fiadd
data16
ds
mov
jne
mov
inc
add
(bad)
loopne
(bad)
mov
mov
loopne
pop
dec
mov
aam
sti
pop
and
psubsb
dec
retf
xor
mov
fwait
mov
test
hlt
aad
xchg
(bad)
in
or
xchg
sub
mov
cmps
xchg
push
in
fwait
pop
fst
nop
and
fmul
mov
(bad)
outs
in
inc
pop
cmp
push
pusha
mov
clc
jno
clc
add
lods
jg
ret
ror
shl
in
mov
(bad)
mov
xchg
push
ins
pmulhw
imul
add
cmp
ins
(bad)
mov
ss
xchg
cld
aas
(bad)
add
or
jns
fcom
in
call
sub
fbstp
or
in
xor
fld
(bad)
fsubr
addr16
xor
ret
fbld
mov
popf
ret
and
retf
push
jmp
scas
jb
test
fistp
xchg
push
push
pushf
adc
pop
in
sub
fld
push
(bad)
mov
test
mov
ffreep
push
call
cmp
jns
aas
push
fisub
mov
sub
aam
inc
call
adc
movs
and
(bad)
je
call
push
xor
mov
cmp
inc
mov
dec
mov
stc
pop
pop
mov
out
pusha
les
cmp
dec
pushf
addr16
add
xor
cdq
sbb
sub
in
mov
xchg
clc
fldenv
cmp
adc
enter
fisubr
push
xlat
leave
icebp
cmp
fsub
mov
lods
(bad)
test
xchg
push
test
imul
dec
xchg
mov
and
outs
mov
(bad)
nop
(bad)
mov
fucom
mov
pop
nop
mov
xor
mov
inc
inc
(bad)
movs
rcl
mov
push
repnz
mov
push
sbb
enter
sbb
adc
sub
fucomip
cmp
sub
and
(bad)
pop
push
retf
arpl
dec
inc
lea
les
sbb
cld
lea
push
retf
mov
lahf
fimul
mov
xchg
imul
cmp
arpl
aaa
dec
mov
scas
and
les
pop
lods
push
repnz
add
repz
sub
add
les
shr
cdq
jmp
call
gs
retf
mov
sar
push
pop
stos
enter
lahf
mov
mov
dec
push
push
mov
lds
dec
jmp
(bad)
int
sbb
pop
xchg
jecxz
sub
sub
pushf
mov
sbb
add
xor
loope
xor
call
push
and
lock
push
sub
imul
pushf
push
lods
loope
lods
add
jg
retf
leave
jg
pop
pop
jmp
stc
retf
movs
sub
mov
adc
in
retf
cmp
add
arpl
pop
lahf
mov
mov
cdq
rcr
fcomip
jae
mov
jmp
push
movs
mov
ins
dec
jmp
mov
mov
mov
call
addr16
in
call
sahf
callw
adc
xchg
adc
enter
imul
mov
scas
cmc
int3
aad
(bad)
jecxz
das
push
stos
mov
mov
lahf
cli
xor
mov
loope
(bad)
test
fcmovnbe
mov
push
pop
sbb
aam
mov
push
leave
fimul
jmp
imul
jo
sbb
xor
mov
test
sub
xchg
imul
mov
enter
push
shr
std
mov
xchg
outs
je
or
call
pop
outs
(bad)
out
xor
mov
in
sub
xchg
out
or
add
push
iret
inc
xchg
xor
js
mov
add
loope
into
ret
cmp
fistp
sbb
mov
mov
sbb
mov
pushf
ret
jl
mov
enter
aam
bound
nop
out
ret
xor
nop
jl
sub
dec
or
push
ret
inc
cmp
push
xchg
ret
test
cmps
scas
mov
jae
jge
test
pusha
xchg
xchg
cld
mov
ficom
or
pop
jge
outs
sar
sub
or
add
cmp
js
jle
repnz
ds
jbe
sahf
popa
outs
ds
add
test
loop
push
mov
ja
(bad)
pop
xor
rcl
mov
std
mov
adc
lods
sbb
daa
xlat
pusha
push
xchg
mov
sti
test
lock
mov
pop
ror
pop
pop
cmps
or
in
neg
jb
addr16
dec
push
icebp
pop
pop
les
inc
out
scas
xor
(bad)
jp
sti
jl
shr
lahf
pop
rol
pop
dec
dec
scas
adc
mov
add
imul
stos
call
sbb
jecxz
stos
cmp
mov
ror
jmp
sub
jecxz
pushf
imul
adc
mov
xor
push
das
mov
xchg
shl
repnz
xchg
sub
mov
inc
jge
xchg
imul
cdq
mov
out
int3
inc
lahf
ret
addr16
lea
movs
xchg
in
sbb
cmp
rcl
mov
xchg
cmp
(bad)
std
adc
jmp
xchg
in
or
jmp
add
popf
mov
adc
xchg
and
(bad)
fdiv
jl
or
sahf
xchg
add
xchg
inc
in
loopne
mov
add
aaa
test
test
xchg
call
mov
mov
inc
test
cdq
cmp
sub
call
fwait
adc
mov
xchg
call
xor
in
call
sbb
add
xchg
pop
jecxz
nop
out
mov
adc
sbb
data16
xor
movs
out
adc
test
xchg
xor
push
ja
mov
or
xchg
mov
popa
mov
retf
inc
add
psubusb
cmp
sbb
and
mov
pushf
jne
fbld
adc
cmps
add
fsubr
fdivr
fdivr
fdivr
sar
fdivr
fdivr
fdivr
fadd
xor
out
adc
xchg
mov
ins
lock
mov
mov
setl
mov
lods
xor
mov
je
fistp
adc
cmps
movs
mov
lock
movs
cmp
cmp
cmp
lea
mov
imul
jmp
push
adc
add
shl
mov
push
pop
retf
inc
fcomp
call
movs
nop
test
(bad)
xor
(bad)
pushf
pusha
mov
jge
push
loop
mov
loopne
mov
repnz
mov
and
dec
jge
mov
loop
aas
mov
clc
out
aas
mov
mov
cli
retf
sbb
mov
mov
repnz
test
cmp
xor
mov
mov
ret
shl
(bad)
mov
rcr
mov
mov
adc
pop
sahf
xchg
xor
mov
(bad)
mov
mov
stos
mov
shr
sbb
shl
inc
sbb
cmps
outs
(bad)
mov
scas
pop
cmps
and
push
retf
cmp
mov
mov
jecxz
mul
adc
dec
adc
inc
or
xor
jbe
(bad)
push
aad
pop
in
xchg
inc
out
mov
cmp
imul
add
push
cli
test
adc
push
(bad)
sahf
je
in
nop
add
(bad)
cmp
push
movs
xchg
mov
(bad)
retf
push
and
mov
inc
sbb
mov
cdq
popf
push
push
cmp
jns
sub
fisub
inc
or
or
fidivr
mov
sub
inc
mov
add
rcl
aaa
mov
out
mov
aaa
aad
loopne
lods
sbb
hlt
xor
mov
add
add
add
adc
add
rol
sub
retf
adc
jecxz
je
sbb
cmp
cmp
nop
mov
(bad)
je
jnp
in
movs
add
loope
addr16
aas
dec
pop
inc
(bad)
aaa
add
and
ss
rol
out
and
arpl
ret
(bad)
mov
aaa
xchg
cdq
retf
add
cli
jns
outs
pop
adc
retf
mov
mov
add
mov
in
adc
mov
in
inc
(bad)
push
aad
inc
outs
sub
lods
dec
jmp
(bad)
and
jne
cli
out
loopne
mov
sbb
addr16
xchg
push
sbb
nop
mov
int
xor
dec
test
mov
push
test
stc
xor
(bad)
pushf
call
dec
ja
jge
aam
cmps
jecxz
xor
push
enter
pop
enter
and
xchg
movs
cmp
outs
pusha
mov
pusha
imul
dec
jmp
pop
std
(bad)
mov
and
pop
fnsave
imul
sub
push
jge
cmp
retf
ss
les
aam
rcr
repnz
or
push
mov
daa
lea
inc
lods
rol
pop
xchg
stos
mov
enter
mov
test
test
push
outs
mov
cmp
int
xchg
jbe
mov
jbe
fisubr
adc
xchg
xchg
sbb
test
dec
fwait
xchg
mov
xor
mov
dec
mov
ja
cmp
es
mov
mov
das
test
dec
jmp
xchg
fnstenv
(bad)
nop
in
push
(bad)
xchg
loope
shl
pushf
outs
imul
jecxz
cwde
out
sar
or
pop
push
pusha
xchg
adc
int3
sub
popa
outs
xor
pop
push
int3
cmp
aaa
fisttp
rol
xchg
popa
mov
adc
adc
push
jno
popa
nop
and
in
jmp
loopne
and
sahf
repz
mov
popf
test
(bad)
outs
or
ret
mov
ja
imul
lods
mov
ret
add
xchg
mov
repz
cdq
sbb
mov
push
pushw
out
(bad)
aas
(bad)
(bad)
repz
pop
push
stc
fcomp
fmulp
jge
cs
nop
adc
jge
dec
in
push
lods
cmp
sub
sub
rcr
les
ds
loopne
test
rcl
nop
scas
pushf
push
jmp
sahf
mov
or
cmp
or
cmp
pop
mov
call
pop
dec
xchg
out
cmp
sbb
sti
jmp
shr
pusha
mov
movs
movs
pop
loopne
jns
bound
push
jmp
push
imul
sub
jecxz
call
jge
mov
cdq
cs
das
jg
jno
out
push
lods
add
shr
mov
mov
jg
(bad)
ret
sti
mov
xlat
(bad)
mov
jnp
xchg
sbb
inc
xor
aas
or
lahf
imul
sbb
retf
dec
jecxz
mov
adc
xor
add
jmp
ja
mov
sub
aaa
add
int
arpl
cmps
xlat
sahf
mov
dec
loopne
aam
sbb
dec
jmp
xchg
mov
retf
push
sbb
jge
aam
test
push
or
add
dec
add
xchg
ficom
fucomip
sbb
add
sbb
add
mov
sahf
lahf
test
mov
push
pop
add
jmp
cdq
mov
(bad)
mov
add
dec
add
sbb
push
das
cld
test
pop
or
test
ins
lods
adc
mov
retf
dec
leave
ret
adc
fist
test
xchg
jmp
inc
xchg
add
cmp
lods
test
sar
in
sbb
jmp
cmp
adc
stc
jge
add
and
jmp
fs
mov
hlt
iret
sub
arpl
mov
xchg
mov
in
push
enter
ret
call
rol
jmp
push
add
mov
in
and
xchg
test
int3
test
jp
sbb
jo
mov
arpl
dec
imul
and
sbb
popa
jecxz
add
push
cmp
out
in
mov
cld
mov
loopne
push
ja
mov
in
stos
dec
pushf
mov
dec
mov
sub
ret
shl
nop
jns
cs
mov
jo
mov
(bad)
cli
aas
xor
sbb
repz
jo
setb
retf
data16
and
xchg
pop
sub
arpl
repnz
sub
push
(bad)
push
sbb
repnz
push
icebp
pop
jecxz
pop
into
mov
lods
sbb
mov
leave
dec
nop
cs
popf
fdiv
jne
retf
xor
add
imul
or
shr
pusha
ja
int3
sub
jnp
stc
dec
cmp
xor
lahf
or
outs
mov
xchg
add
rol
(bad)
mov
mov
retf
movs
jecxz
mov
sbb
int
test
and
mov
das
hlt
mov
mov
mov
sbb
repnz
les
ret
int3
jae
cli
jbe
cmp
fwait
push
xchg
enter
pop
mov
and
test
fs
popa
xor
push
xchg
fldcw
dec
outs
adc
aaa
(bad)
aas
mov
ret
fbld
pop
mov
mov
mov
push
scas
shr
shl
inc
(bad)
mov
fdiv
enter
push
mov
mov
je
test
js
movs
pop
xchg
mov
lods
scas
push
xchg
jno
mov
ror
mov
in
xchg
mov
loopne
arpl
xchg
cwde
jne
iret
mov
mov
call
or
leave
jne
push
ds
sti
adc
iret
movs
outs
int
jmp
movs
cmp
out
retf
pop
pop
outs
dec
xor
data16
mov
imul
cmp
movs
push
in
push
daa
mov
cli
cmp
cmp
das
outs
mov
xchg
push
stos
je
cmps
xchg
(bad)
in
mov
in
loop
retf
xchg
xchg
je
mov
mov
push
fdivr
in
xchg
ins
les
push
bound
adc
call
sbb
pushf
shr
cs
leave
jecxz
ret
leave
pop
mov
loop
push
cdq
sub
ss
add
xchg
xchg
dec
push
and
aaa
cmp
std
xchg
inc
xchg
xchg
sahf
xchg
jecxz
scas
retf
shl
xchg
ret
sbb
xchg
enter
add
jge
retf
in
test
sbb
ds
mov
xchg
mov
and
cmp
jecxz
push
mov
int3
or
jmp
mov
jecxz
sub
cs
in
test
mov
(bad)
mov
sub
jg
nop
enter
xchg
xchg
aas
jne
mov
jl
cmp
rol
rcl
mov
jb
mov
cmp
pop
sub
popa
xchg
cmps
inc
(bad)
push
push
loope
and
xlat
fnstsw
test
jl
mov
inc
pushf
test
add
mov
mov
popf
pop
imul
movs
mov
stos
not
mov
lods
fcom
xchg
push
xchg
mov
xchg
xor
aam
sub
push
mov
ret
sub
lods
rcr
or
std
ret
fisttp
mov
rcl
xchg
sbb
mov
aad
xchg
pop
loope
rcl
mov
std
pushf
inc
lds
xor
outs
in
sbb
sbb
mov
(bad)
pop
rol
sar
or
(bad)
xchg
inc
push
push
mov
js
sti
pop
cmps
dec
movs
pop
ror
sbb
fsub
mov
sub
xchg
mov
mov
xchg
call
xchg
scas
and
ffreep
jns
pslld
mov
lahf
cmp
dec
xchg
dec
scas
lock
cli
call
les
pop
push
(bad)
ds
dec
(bad)
jnp
rol
push
xchg
ins
lods
dec
and
cmps
lods
jmp
push
test
mov
lahf
cmps
rol
pop
(bad)
call
movs
scas
mov
inc
in
(bad)
or
push
js
adc
lods
inc
mov
iret
scas
out
push
push
mov
cwde
sub
xor
aad
mov
pushf
loop
add
xor
jo
jae
cdq
mov
jne
int3
outs
sub
ret
sbb
ret
xor
clc
xchg
outs
pop
rcr
push
add
jnp
fidiv
lods
mov
int3
rcl
in
adc
pop
lock
and
cmp
fiadd
mov
test
rol
cmp
adc
in
sbb
mov
call
lods
arpl
jle
push
jmp
in
cmps
in
jmp
ret
add
push
pop
jecxz
enter
fdivr
or
in
sar
inc
mov
inc
jo
(bad)
repz
scas
mov
lahf
in
or
add
inc
rol
add
nop
cld
lds
test
push
out
fxtract
jne
mov
cmp
adc
aam
pop
icebp
mov
push
pop
inc
mov
lods
xchg
popf
push
sbb
ins
repz
push
loop
shl
add
loop
add
and
cwde
inc
mov
fcom
loope
div
mov
mov
mov
lods
push
mov
loopne
jge
pop
xchg
sbb
in
aad
test
push
sbb
dec
mov
mov
dec
mov
sub
shr
and
fwait
pop
out
mov
sbb
sub
enter
xchg
shl
lods
pop
jmp
ja
inc
call
shl
imul
pushf
xchg
mov
test
enter
add
mov
call
adc
outs
sbb
cld
add
fucomip
pusha
fimul
fmulp
sub
jmp
ins
aad
mov
add
or
(bad)
xchg
and
ja
jns
sbb
mov
xchg
repnz
in
fmul
adc
movs
mov
xchg
xchg
(bad)
xor
cmp
jo
inc
mov
and
xchg
retf
fdivr
dec
push
push
xchg
mov
xchg
test
in
mov
les
push
mov
sub
and
add
mov
(bad)
stos
or
pop
inc
inc
std
adc
test
xchg
(bad)
ss
mov
in
mul
nop
mov
adc
jmp
mov
nop
mov
call
popf
mov
push
dec
dec
(bad)
js
retf
shr
std
out
rol
outs
stos
mov
sar
cmps
inc
mov
clc
(bad)
das
shr
push
fwait
jg
in
fwait
push
xchg
adc
push
cmp
adc
jb
jbe
shl
rcl
sbb
sbb
mov
test
ror
js
movs
sbb
or
int
es
fdiv
sar
stc
in
sbb
enter
loopne
push
and
xor
les
shl
mov
test
adc
leave
pusha
(bad)
movs
adc
fdivr
call
add
cmp
xchg
je
inc
les
jg
mov
sbb
mov
mov
rol
mov
loopne
mov
repnz
cmp
imul
mov
pop
jae
or
test
lock
in
ins
xchg
(bad)
popf
and
pop
aam
jecxz
dec
not
pushf
xor
imul
push
mov
(bad)
test
outs
xchg
in
aam
jg
xlat
jmp
rcl
cmp
(bad)
mov
jle
cwde
pop
pop
shl
rcr
add
scas
shl
add
push
in
or
hlt
mov
dec
gs
arpl
into
test
cmp
push
ins
xlat
sbb
mov
sub
sbb
sbb
mov
xchg
lahf
in
ja
ss
adc
cmp
stos
dec
mov
imul
gs
loope
add
adc
mov
sar
add
mov
dec
xchg
repz
loopne
jge
aad
cmps
js
ror
inc
push
popf
in
(bad)
repz
sbb
jge
mov
inc
push
outs
xchg
add
cld
sub
inc
cmp
rol
dec
cli
xchg
lahf
xchg
mov
jae
idiv
out
aaa
jno
xchg
adc
cmp
mov
pushf
js
push
mov
in
jge
out
(bad)
or
js
jge
adc
mov
aad
icebp
or
imul
pushf
mov
xlat
(bad)
mov
(bad)
pop
movs
fisttp
into
into
mov
jns
push
cmp
sbb
icebp
inc
inc
aas
mov
dec
test
nop
mov
outs
push
jl
mov
hlt
lock
push
push
adc
pop
scas
xchg
mov
imul
mov
and
fmul
fmul
mov
out
call
addr16
les
stos
es
fisubr
push
clc
xchg
inc
jecxz
(bad)
retf
pop
lds
iret
stos
or
iret
push
jbe
add
pop
gs
add
test
push
dec
xlat
in
loopne
mov
mov
jmp
dec
addr16
sub
xor
cli
dec
repnz
adc
jb
addr16
jge
lods
imul
adc
sbb
or
mov
cmc
mov
sbb
xchg
sahf
mov
je
aam
dec
out
mov
fwait
movs
out
sahf
fcom
out
je
mov
test
scas
jae
pop
or
lock
jnp
xchg
jns
test
popf
add
out
adc
cmp
pop
mov
loop
fbld
call
xchg
pop
jl
inc
cdq
sub
sbb
jmp
movs
jnp
cmps
sbb
dec
adc
ret
sub
sbb
sbb
add
and
jb
cmp
or
(bad)
or
sub
dec
and
add
jp
je
inc
or
cmp
sbb
fsubr
add
mov
jae
outs
mov
and
stos
jbe
popa
hlt
mov
in
scas
push
ja
push
pop
in
je
pusha
loopne
pop
(bad)
xchg
adc
jns
xor
cmp
add
add
cmp
jle
hlt
outs
stos
rcr
cmp
idiv
mov
hlt
mov
pusha
mov
pusha
cdq
rol
xor
and
xchg
mov
xchg
movs
div
sub
out
out
xchg
pop
pop
cmp
jecxz
sbb
mov
test
or
mov
or
ds
out
sbb
rcr
les
and
hlt
dec
cmp
lds
jg
imul
cmp
push
lods
xor
dec
ficom
xor
test
outs
adc
in
mov
mov
cmp
cs
test
and
add
jbe
mov
mov
popa
pusha
push
enter
pop
or
(bad)
xor
and
rol
mov
inc
aas
cmps
out
aam
into
enter
dec
stos
int
test
sar
mov
pop
mov
and
rcr
sub
mov
(bad)
sub
(bad)
int3
lock
test
or
sbb
cld
sub
add
mov
dec
mov
dec
mov
sbb
jmp
nop
(bad)
xchg
(bad)
scas
or
dec
hlt
adc
mov
or
(bad)
fs
loopne
inc
add
pop
xlat
stc
clc
shl
fmulp
repz
loop
push
ret
mov
dec
loopne
or
inc
ins
popf
mov
es
cmp
jae
mov
fwait
or
ss
dec
rol
repnz
push
mov
add
fucom
lods
out
cmp
cmp
add
pop
fadd
popa
pop
mov
fdiv
enter
mov
int
mov
pop
cmp
ret
pop
imul
and
and
adc
lea
sahf
xor
ret
loopne
dec
call
xor
xchg
xchg
mov
add
dec
call
xchg
adc
(bad)
sbb
sbb
xchg
call
cdq
pop
movs
sub
ficomp
in
cmp
dec
lahf
adc
adc
cmps
jp
(bad)
aas
mov
int3
cmovne
pop
and
cld
ret
inc
int
imul
push
cmp
inc
hlt
in
cmp
loop
xchg
hlt
fs
ficom
sbb
pushw
add
xchg
ins
xor
lock
fwait
cdq
sbb
(bad)
imul
xchg
push
jmp
scas
sub
fidiv
jnp
je
fs
nop
jmp
rcl
sahf
out
out
(bad)
aam
fdivr
inc
mov
inc
nop
(bad)
push
pop
shr
add
je
stos
(bad)
cmp
inc
xor
pusha
sar
and
xchg
sub
jmp
inc
popa
push
and
pop
leave
addr16
int
mov
sahf
into
and
outs
sub
and
out
mov
(bad)
leave
repnz
fsubr
mov
imul
fwait
popf
jg
xchg
ret
cmps
(bad)
out
stos
call
rol
mov
outs
outs
add
sar
xchg
mov
xchg
pop
shl
pushf
(bad)
xchg
lods
sti
nop
pop
dec
jmp
and
mov
outs
xchg
fbstp
fidiv
xor
and
fmul
iret
mov
ins
add
les
mov
mov
inc
sar
dec
pop
mov
push
inc
(bad)
call
popa
pop
sbb
jecxz
ds
adc
adc
data16
call
fcomp
dec
jmp
scas
stos
cmp
mov
mov
push
adc
pop
jecxz
add
call
(bad)
xchg
cmp
xchg
jnp
jns
imul
xchg
xchg
push
jnp
lahf
in
push
xchg
test
sub
(bad)
pop
sbb
jle
jg
lods
push
lahf
fsub
dec
inc
mov
xchg
pop
sub
enter
xchg
sub
xchg
test
mov
stos
pop
out
or
daa
fnstsw
sahf
sbb
test
inc
inc
stos
push
xchg
ret
ret
iret
nop
cmp
(bad)
lods
ret
sub
lods
lds
pop
cmps
jmp
jg
or
fcom
xchg
jmp
mov
int
adc
jne
sbb
popf
movs
enter
xchg
movs
pop
add
rcl
cmp
std
xlat
lods
adc
lahf
scas
lds
ret
in
mov
mov
inc
mov
std
mov
call
push
pop
ret
shl
fistp
xlat
repnz
mov
dec
imul
sbb
ins
inc
mov
in
lods
mov
cmp
push
cmps
jmp
dec
arpl
jp
adc
xchg
mov
xlat
ins
(bad)
addr16
repnz
or
mov
xchg
aas
mov
lahf
jge
dec
pop
dec
jp
outs
ret
sbb
lods
pcmpeqb
loopne
lods
or
daa
pop
les
nop
dec
push
cdq
adc
push
int3
in
arpl
jge
add
mov
mov
mov
or
push
pop
mov
fcom
enter
movs
jmp
mov
xor
scas
rol
int
cmp
stos
(bad)
aas
mov
jge
div
add
mov
mov
test
stos
xor
loopne
aaa
popa
mov
mov
lds
xchg
xor
push
sbb
rcr
ds
lds
push
jnp
dec
addr16
ins
add
pop
and
in
arpl
fdivrp
mov
and
adc
inc
push
cmp
mov
sub
sbb
xchg
jg
movs
lods
jno
loopne
xlat
aad
jle
sub
push
iret
imul
lds
cmp
ds
xor
xchg
(bad)
rcr
push
cs
jbe
xchg
push
iret
xor
mov
mov
jmp
mov
mov
pop
dec
adc
rcr
jmp
cdq
les
cmps
push
mov
pop
and
dec
xor
enter
sbb
push
mov
loope
retf
or
or
or
in
mov
mov
inc
and
and
inc
ror
cmps
enter
pavgb
in
jmp
pushf
and
(bad)
aas
and
sub
jae
std
mov
jae
and
(bad)
imul
fsub
xchg
mov
sub
or
sbb
xchg
inc
stc
xchg
jg
or
repz
sti
and
clc
xchg
jb
sub
aam
pusha
push
push
out
pop
int3
mov
xchg
pushf
fwait
out
or
push
mov
mov
mov
je
ins
call
adc
mov
(bad)
mov
out
and
mov
xchg
push
xchg
pop
iret
clc
lods
jle
test
xor
in
jge
ficomp
bound
sub
out
xchg
add
xchg
sub
push
or
and
dec
cmp
mov
mov
lahf
sti
shl
inc
fisttp
mov
das
int
clc
test
ja
or
shl
clc
in
mov
dec
addr16
mov
ret
jbe
push
sbb
xchg
(bad)
in
push
jg
jb
(bad)
cmp
adc
adc
and
xlat
jb
jle
push
adc
sub
jno
retf
loop
dec
rcr
and
mul
call
stos
retf
mov
and
sub
jae
mov
icebp
pop
dec
ret
xchg
retf
ja
add
out
pop
xor
nop
xchg
repz
stos
pusha
sti
call
scas
call
xchg
adc
sahf
mov
cmp
jle
outs
mov
in
dec
push
outs
in
add
jae
mov
sub
(bad)
push
fstp
and
fcomp
enter
adc
popf
call
in
les
xchg
hlt
int3
push
outs
mov
clc
push
or
loopne
mov
adc
stos
dec
xor
fmul
xchg
ficomp
ds
pop
ja
cmc
retf
sub
or
adc
ins
inc
cld
cmps
cmp
(bad)
mov
push
(bad)
mov
jl
aad
fucomp
mov
pop
leave
mov
loopne
loop
push
xor
in
cmps
sub
sbb
cmp
fsub
jmp
repz
aam
int
add
cmps
add
sub
js
(bad)
pop
jg
mov
fcmovb
dec
retf
rcr
fcmovnb
jle
test
ins
fiadd
jne
dec
cmp
cmova
mov
mov
push
je
and
sar
mov
sbb
adc
es
dec
mov
mov
and
sub
xchg
cdq
sbb
addr16
lahf
int
push
addr16
mov
popa
test
cmp
test
and
cld
shl
fsubr
rol
pop
pop
(bad)
lods
push
aam
(bad)
and
(bad)
pop
xlat
jg
mov
xchg
aam
xchg
cmp
je
shl
test
lahf
xchg
pop
sub
gs
sar
mov
mov
mov
loopne
test
mov
movs
sub
test
inc
xchg
xchg
pop
push
sbb
sbb
jns
or
lahf
inc
leave
dec
movs
cmp
sbb
adc
jae
mov
mov
dec
mov
lea
mov
loope
xchg
mov
adc
xchg
mov
fcomp
mov
mov
pop
or
enter
sub
sub
inc
(bad)
mov
sub
and
dec
call
sub
push
fild
cmp
xchg
mov
mov
aam
pop
mov
dec
xor
mov
add
ret
leave
imul
lds
or
icebp
ja
int
dec
xchg
or
icebp
das
mov
movs
inc
adc
jmp
not
fidivr
lods
xchg
jbe
dec
and
mov
js
enter
fsub
mov
dec
lds
fist
int
adc
adc
push
shl
les
push
or
hlt
pop
and
mov
push
sahf
loopne
ja
jo
movs
cmc
pop
(bad)
jmp
xlat
in
jns
leave
div
stos
(bad)
enter
(bad)
fidiv
aam
(bad)
(bad)
lds
shr
xchg
popf
adc
or
repnz
xlat
or
xchg
mov
rcl
fcmovbe
enter
pusha
ficom
pop
cmp
lods
xchg
sub
fadd
cmp
clc
ret
mov
or
sub
jg
sub
test
or
lods
fisttp
xchg
cmps
movs
xchg
inc
retf
lods
dec
in
mov
loopne
inc
push
cld
outs
es
nop
retf
je
rol
dec
mov
clc
dec
or
mov
cmp
sub
mov
inc
jecxz
(bad)
adc
jnp
mov
xor
enter
popf
mov
rol
mov
jnp
lds
(bad)
xchg
sbb
mov
lea
test
(bad)
mov
daa
fild
add
ret
sahf
mov
retf
shr
bound
sbb
adc
push
mov
rol
int3
bswap
sub
test
cdq
stc
ins
fst
mov
enter
in
pop
stos
jl
inc
cmps
loopne
inc
pop
mov
add
retf
push
sahf
mov
or
mov
inc
pop
mov
jmp
push
fidiv
push
add
das
std
outs
retf
retf
cld
dec
rcl
jbe
jecxz
adc
mov
into
idiv
leave
cdq
shl
lds
sbb
test
push
ds
loope
mov
mov
cwde
fbld
cld
lds
daa
dec
scas
mov
out
movs
xchg
pushf
int
dec
and
iret
clc
mov
mov
dec
pop
pop
mov
xchg
aam
inc
mov
mov
call
push
call
js
int3
jl
pop
nop
iret
dec
(bad)
aas
lahf
and
setbe
adc
int
jno
in
into
inc
jge
cdq
pop
xchg
add
movs
jmp
sub
jnp
shl
pop
test
idiv
jbe
mov
mov
shr
mov
test
lea
pushf
loopne
lods
mov
sahf
mov
pop
mov
jmp
mov
mov
mov
in
mov
nop
shl
test
(bad)
mov
pop
(bad)
fldenv
push
pop
(bad)
jmp
mov
xor
push
push
sub
out
jecxz
or
inc
(bad)
rcl
out
inc
adc
ret
aam
enter
pop
enter
mov
and
xchg
push
retf
push
sbb
add
or
(bad)
je
jecxz
mov
jmp
stc
jl
inc
fisttp
mov
(bad)
jmp
(bad)
stc
fist
outs
cmp
xchg
loopne
sti
call
leave
shl
fisub
push
jecxz
sahf
mov
xor
fnclex
fstp
dec
pop
sub
pop
hlt
daa
lods
cmp
jecxz
and
push
adc
dec
lahf
inc
retf
mov
into
clc
sub
xchg
push
xchg
jmp
and
stos
mov
pop
mov
pop
ins
in
(bad)
mov
mov
xchg
sbb
outs
add
mov
test
lahf
test
or
ret
outs
jno
(bad)
in
sub
ss
jmp
call
inc
pop
mov
mov
add
add
add
loop
test
call
jae
(bad)
cmp
mov
dec
(bad)
xor
movs
jl
mov
push
daa
loop
adc
test
mov
das
jecxz
scas
adc
nop
mov
and
sub
fadd
test
cmps
cmp
adc
movs
jge
xchg
push
cmp
cmp
jmp
cmp
sub
or
popf
stos
add
les
sbb
mov
pusha
jp
dec
lahf
dec
fild
pop
iret
call
mov
pop
movs
push
xchg
aam
lds
jge
mov
dec
xor
xchg
arpl
jecxz
scas
mov
enter
inc
bound
nop
stos
in
inc
mov
or
add
cmp
imul
(bad)
je
jge
mov
pop
es
jbe
call
mov
(bad)
push
jmp
fisub
js
enter
fadd
shl
dec
inc
push
ds
fstp
mov
imul
sar
stc
fcomp
cmp
push
mov
imul
(bad)
retf
cmp
loopne
pop
cmp
sbb
ss
cmps
bound
xchg
dec
xchg
pop
pop
stc
jne
retf
jecxz
es
out
sbb
lock
jnp
cmps
mov
jge
loope
jp
mov
inc
cmps
(bad)
in
daa
rsqrtps
xchg
lods
and
test
cmps
mov
mov
pop
and
inc
jbe
push
jb
sbb
popf
sbb
jbe
push
cmps
jge
xchg
loopne
fld
push
test
sti
popf
mov
and
mov
fnstsw
aas
push
pop
mov
jmp
neg
test
or
jmp
imul
mov
jmp
mov
push
mov
imul
mov
add
(bad)
shr
movs
and
lock
add
hlt
retf
jle
adc
mov
jp
dec
fild
clc
ror
icebp
test
or
xchg
mov
cli
pusha
mul
jne
jmp
inc
lea
jmp
pushf
add
adc
sbb
jb
arpl
mov
mov
fwait
scas
xor
lds
jl
call
test
mov
dec
sbb
push
mov
mov
add
ror
or
outs
pop
adc
ins
push
dec
out
adc
cmp
in
and
std
adc
or
cmps
cmps
or
xchg
xchg
pop
xchg
mov
adc
fnstsw
and
pop
rcr
dec
fcom
in
sahf
inc
fwait
push
shl
jmp
xor
sub
push
adc
push
dec
mov
cmp
dec
pusha
ror
test
test
ror
or
movs
mov
fsub
pop
jmp
push
shl
dec
ins
les
dec
hlt
sbb
push
add
repnz
ret
rol
and
dec
sahf
out
mov
jo
fcmovnbe
mov
test
mov
mov
push
mov
imul
mov
call
ror
jmp
icebp
jg
leave
xchg
mov
arpl
mov
cmps
jge
push
mov
push
cwde
(bad)
movs
loopne
mov
jno
mov
and
(bad)
push
inc
(bad)
cld
xchg
mov
xchg
shr
adc
cmp
(bad)
and
push
scas
mov
dec
mov
addr16
pop
lahf
inc
sub
in
popf
xor
cmp
loopne
and
push
pop
push
cmps
jge
jbe
mov
sub
jmp
dec
ret
mov
pop
mov
xor
mov
lock
pop
in
out
jo
add
push
xor
jg
sbb
cli
outs
mov
ds
mov
pop
inc
adc
rcl
or
sbb
add
jbe
mov
adc
jmp
arpl
lock
or
or
xchg
mov
or
imul
ss
popa
push
ret
popf
push
jmp
rcr
rol
adc
add
fdiv
jmp
fisttp
inc
cmps
shl
shl
mov
inc
dec
das
ss
neg
rcr
sbb
cmps
das
push
or
push
cmc
das
or
dec
sub
mov
sar
inc
daa
bound
mov
pusha
jmp
es
dec
lea
push
xchg
fsub
pop
int3
inc
lods
adc
fcom
test
adc
stos
jl
dec
mov
enter
xor
pop
inc
sbb
mov
(bad)
jg
mov
adc
ret
mov
dec
(bad)
fcmovne
cmp
je
jge
dec
push
mov
dec
rcr
sbb
sbb
sbb
pop
push
xchg
lock
movs
xchg
push
fs
mov
xchg
sub
imul
loopne
ret
push
mov
sbb
nop
cmp
mov
sub
cli
mov
mov
xchg
sti
jl
test
adc
ror
ret
jecxz
mov
cmp
mov
mov
mov
mov
xchg
adc
daa
push
es
out
mov
mov
sbb
sbb
mov
mov
add
test
in
test
aas
or
mov
xchg
scas
adc
xchg
int3
dec
mov
pushf
call
(bad)
pop
jl
dec
cmp
test
adc
add
jae
test
jle
mov
jp
jle
xchg
xchg
repz
adc
add
ins
test
enter
sbb
movs
mov
cld
push
aas
push
mov
sbb
xchg
jg
fimul
(bad)
push
imul
jecxz
inc
rol
imul
push
scas
jecxz
daa
in
and
xor
pop
pop
loop
mov
(bad)
sub
adc
test
inc
or
fistp
icebp
pop
mov
lods
sbb
push
pop
mov
mov
or
rcr
xchg
mov
js
rol
gs
add
cmp
sbb
and
jnp
outs
mov
mov
pushf
(bad)
adc
inc
retf
sbb
imul
(bad)
(bad)
fdiv
mov
fnstcw
cwde
xor
scas
adc
xlat
push
in
mov
sahf
scas
or
xchg
push
loope
retf
adc
inc
mov
xchg
in
clc
ins
pop
mov
les
or
jae
mov
push
adc
mov
(bad)
mov
or
inc
push
or
sub
in
xchg
sub
push
stos
mov
mov
sub
popf
test
movs
inc
cmp
(bad)
ds
imul
add
dec
jbe
mov
pop
test
cmp
pop
push
add
xlat
aam
fadd
leave
fsubr
adc
pop
sbb
mov
cmp
sbb
imul
xchg
push
adc
(bad)
mov
enter
and
push
mul
ret
jge
es
repnz
jecxz
push
(bad)
push
enter
test
pushf
dec
call
repz
aaa
mov
aam
pop
push
add
fmul
add
add
pop
jge
sub
stos
mov
std
pop
inc
addr16
sub
and
xchg
xchg
adc
xlat
sub
xchg
add
rcr
adc
ins
ja
mov
inc
and
xor
jmp
out
xor
sub
xchg
jle
dec
sahf
stos
mov
sahf
xchg
xor
lahf
jecxz
sub
out
cdq
mov
int3
mov
test
xchg
mov
pop
cmp
sahf
xchg
(bad)
fwait
popa
(bad)
xor
mov
fsubr
test
retfw
test
jb
mov
fs
sbb
aaa
(bad)
mov
mov
(bad)
fmul
es
daa
mov
neg
outs
stos
lldt
cmp
imul
mov
adc
mov
xchg
fs
(bad)
jae
add
add
jp
mov
shl
xchg
and
repnz
outs
hlt
retf
pop
xlat
add
xor
mov
mov
rcr
movs
jg
jle
ss
push
in
or
les
(bad)
scas
fcmove
add
ins
lds
and
mov
jns
call
push
ficom
pop
sbb
stos
cmp
pop
and
mov
stos
popa
dec
lea
sar
mov
ja
(bad)
(bad)
mov
lahf
mov
mov
jo
inc
xor
loopne
and
es
in
inc
data16
jae
sbb
movs
pop
rol
lahf
fxtract
cmp
cld
ret
call
ret
ret
scas
jo
pop
stos
jmp
mov
int3
jb
mov
lahf
jo
dec
jle
leave
loop
std
mov
sar
inc
in
dec
lds
lahf
ret
enter
retf
adc
xor
or
or
aaa
adc
in
pusha
leave
mov
ja
mov
dec
pop
and
test
adc
sub
sbb
loopne
or
mov
add
call
xchg
pusha
fnsave
mov
jle
dec
test
outs
and
sti
lods
dec
mov
loopne
jp
add
mov
out
pop
xchg
sbb
add
mov
in
imul
sar
ror
(bad)
jl
and
dec
(bad)
or
int3
push
pop
add
aad
mov
test
fwait
out
or
push
adc
jmp
jns
cmp
lahf
sbb
sbb
cmp
mov
stos
sbb
sub
pop
mov
shl
scas
arpl
int
popf
dec
imul
in
fidiv
mov
sbb
and
stos
test
pop
cmp
xchg
push
jl
enter
mov
lods
lods
sub
sbb
cmp
sbb
(bad)
sbb
pop
cmp
push
jne
lds
scas
stc
mov
(bad)
push
mov
mov
jns
lods
pop
and
loopne
dec
sbb
sbb
sbb
(bad)
movs
test
pop
ficomp
jecxz
sub
xchg
lahf
xor
push
dec
cmps
fild
sbb
sahf
mov
push
enter
push
mov
fadd
xchg
fisub
ins
sti
pushf
outs
cdq
inc
xchg
and
xlat
adc
jmp
adc
cmp
stos
sbb
popf
int3
sbb
dec
inc
jnp
cmp
jecxz
pushf
push
rcl
test
xchg
jae
sub
lods
sbb
mov
retf
test
ret
add
sub
mov
aam
jmp
shl
(bad)
lea
lods
pusha
xor
ja
ja
test
hlt
mov
enter
das
nop
mov
or
xchg
xchg
jmp
xchg
sahf
pop
and
cmc
rcl
mov
push
xchg
mov
xchg
ins
mov
ror
loop
mov
jb
cmp
(bad)
lea
jle
pop
(bad)
(bad)
movs
imul
fldcw
mov
popa
push
retf
pop
(bad)
retf
cmc
pop
in
scas
adc
mov
xchg
pop
jecxz
daa
lods
ins
enter
dec
enter
cmps
fwait
mov
xchg
pop
daa
ret
test
push
mov
jb
jmp
mov
in
lahf
lods
(bad)
mov
(bad)
xchg
shr
push
test
in
mov
hlt
fsubr
mov
je
mov
xchg
push
mov
loope
push
mul
mov
mov
fdiv
lods
lods
jmp
(bad)
dec
lds
ins
mov
pop
in
mov
mov
(bad)
adc
shl
jb
dec
sbb
sub
xchg
mov
iret
adc
mov
and
adc
aaa
popf
jbe
mov
adc
xchg
ins
cmp
mov
test
test
mov
stos
ret
loop
out
or
pop
mov
push
add
xor
out
jl
add
imul
cmps
(bad)
push
test
test
jg
je
leave
test
in
xor
mov
pop
cld
jbe
iret
push
add
ror
inc
ja
pop
test
ror
xchg
pop
test
sbb
inc
test
mov
nop
cmps
pop
add
pop
imul
shld
pop
call
ss
push
imul
jmp
or
(bad)
fild
pusha
dec
dec
push
not
pop
xchg
jp
cmp
inc
lock
fmul
dec
mov
mov
adc
fnstenv
out
xchg
xchg
xor
inc
mov
adc
or
cmc
ficom
(bad)
(bad)
pop
mov
movs
neg
imul
or
out
daa
dec
rcr
mov
cmp
shl
push
push
shl
mov
mul
adc
in
xor
or
push
(bad)
mov
xchg
xchg
mov
loop
into
push
dec
fstp
mov
dec
push
or
ds
xor
pushf
sub
fsubr
adc
out
add
xchg
loope
lea
adc
xchg
xchg
mov
jge
rcl
call
hlt
push
sahf
xchg
pop
add
push
ror
cmps
call
mov
xor
lahf
addr16
pop
mov
mov
push
xchg
dec
jae
das
fist
cmp
cmovb
lahf
and
in
cmp
inc
and
or
push
(bad)
(bad)
or
sub
cmp
hlt
enter
rol
retf
inc
sub
push
sahf
and
cmp
cmps
xchg
sbb
les
inc
js
ror
test
cdq
adc
mov
mov
dec
add
leave
fucomp
retf
jmp
mov
dec
sbb
retf
mov
dec
mov
pop
and
add
cmp
mov
mov
(bad)
mov
test
pop
in
and
cmp
inc
inc
repz
inc
mov
xor
fcomp
sbb
inc
(bad)
bound
cmp
sar
mov
sbb
movs
fist
inc
or
sbb
cmps
call
jmp
mov
push
es
sub
jne
lods
and
inc
sbb
fadd
loop
fnstsw
pop
add
or
(bad)
lods
aam
pop
and
icebp
nop
pop
dec
pop
scas
test
and
lahf
into
sub
cs
xchg
out
mov
enter
cmp
sbb
test
jns
nop
sub
pop
pop
jge
inc
mov
mov
mov
xchg
fisttp
add
movs
pop
push
xchg
or
clc
mov
cs
mov
inc
aas
xchg
xchg
in
or
mov
enter
fst
mov
xlat
mov
cmp
call
repz
pushf
lea
xchg
xlat
cdq
adc
xchg
mov
mov
ret
jp
shl
sbb
and
sbb
push
xchg
xchg
shl
pop
sbb
xchg
jmp
lahf
loopne
jne
mov
mov
cmps
fldenv
ret
pop
pop
retf
jl
pop
ror
sbb
cmps
push
push
and
sub
test
bndstx
enter
mov
add
sbb
lea
pop
mov
cmp
inc
(bad)
mov
or
sub
push
mov
mov
adc
ret
rcl
add
loopne
aam
icebp
nop
inc
fcomp
xor
jp
xchg
hlt
mov
(bad)
fbstp
aad
sub
cmps
mov
hlt
xlat
fisttp
jecxz
and
fsub
xchg
and
xor
test
push
ffree
enter
mov
lods
int3
mov
test
jge
nop
adc
cmp
fcom
(bad)
sar
das
fcom
push
outs
adc
hlt
mov
mov
shl
xchg
rcr
add
mov
jbe
mov
push
fidivr
xchg
clc
jecxz
dec
sub
repz
add
mov
enter
loopne
ret
pop
pop
imul
rol
cdq
jns
xchg
and
sub
mov
adc
sub
xchg
xor
jecxz
dec
mov
movs
lahf
xchg
popf
aas
xchg
cwde
push
xchg
xchg
xchg
popf
xor
jo
leave
sahf
xor
cmp
data16
jae
mov
mov
mov
movs
lock
test
or
scas
add
pavgw
push
adc
out
mov
retf
xchg
push
clc
mov
(bad)
sub
xchg
jnp
or
icebp
mov
mov
jae
sub
push
dec
jne
sbb
dec
(bad)
push
fwait
mov
out
sub
dec
push
les
pop
mov
and
push
scas
int
add
(bad)
int
jno
mov
xchg
out
adc
addr16
and
mov
mov
out
fild
shl
ins
fiadd
jle
repnz
mov
gs
syscall
add
or
jmp
lods
jmp
mov
dec
and
shr
lea
push
ret
sbb
and
xor
lahf
or
jmp
pop
xor
into
mov
jo
cmps
js
mov
loop
jp
ret
jne
les
dec
pop
mov
loopne
sub
mov
bound
pushf
loopne
mov
mov
shl
push
or
loopne
enter
shr
into
pop
cmc
adc
mov
fidivr
mov
iret
imul
shl
sub
fcom
and
fwait
test
(bad)
jmp
inc
into
bound
fwait
jo
push
mov
aaa
loope
and
out
ins
cmp
movs
fdiv
aam
mov
rol
loopne
push
aam
cs
loopne
pop
push
push
pop
lahf
sahf
push
adc
mov
add
sub
test
int
pop
jns
jmp
xor
add
pop
idiv
gs
mov
xchg
aaa
adc
push
lahf
rol
sahf
adc
mov
mov
mov
pusha
(bad)
mov
repnz
cmp
and
pop
or
lahf
sub
and
inc
loopne
jae
cmp
icebp
fadd
dec
xor
pop
rcr
loopne
jmp
aas
out
fnsave
leave
add
shr
or
adc
scas
mov
sbb
inc
sbb
dec
retf
push
dec
pusha
push
pop
shr
mov
frstor
cmp
xor
fild
fidivr
fadd
loopne
ins
outs
xchg
and
out
adc
cld
ja
push
(bad)
jl
ss
movs
int
jbe
mov
(bad)
seta
test
lahf
movs
cmp
shr
in
add
mov
add
test
pop
stos
lods
push
xor
aam
mov
mov
aam
push
ins
dec
cmps
in
shr
shl
(bad)
imul
popa
popf
(bad)
(bad)
mov
add
dec
ret
mov
dec
sub
clc
mov
mov
out
pop
mov
leave
and
mov
shr
in
dec
cld
test
jg
xchg
popa
push
mov
xor
test
orps
pop
xchg
out
or
push
pop
cld
pusha
cmp
mov
mov
push
mov
icebp
pushf
cmps
mov
in
aam
xchg
sbb
xchg
xchg
push
cld
test
(bad)
cld
inc
sahf
loop
or
sub
jmp
mov
dec
adc
test
dec
inc
sub
mov
test
repnz
push
pusha
mov
mov
faddp
mov
retf
into
xor
imul
xchg
inc
mov
push
loope
leave
mov
mov
mov
push
mov
mov
pop
in
pop
aad
mov
add
jmp
movs
test
movs
inc
hlt
enter
sub
sub
int
sub
adc
jmp
int
jno
sub
mov
push
and
xor
addr16
xchg
sbb
pop
pop
test
jo
sub
dec
in
fs
cmps
test
or
inc
mov
ds
mov
ds
adc
scas
or
cs
in
xchg
pop
das
and
adc
cmps
daa
jge
call
call
fsub
add
rol
call
mov
bswap
nop
aad
pusha
das
aaa
push
mov
lds
stos
aad
test
inc
popf
push
nop
fbld
jmp
sub
fcomp
fidivr
mov
outs
sti
ins
lods
int
mov
popa
jns
arpl
rcl
mov
fcmovbe
icebp
push
cmps
(bad)
in
loopne
add
xchg
or
aam
inc
fnsave
xchg
js
push
daa
in
add
iret
ret
aam
retf
xchg
cmp
xchg
xchg
neg
mov
jmp
out
push
shl
cmp
(bad)
jg
inc
(bad)
dec
jb
or
(bad)
xlat
daa
(bad)
mov
inc
into
test
mov
mov
ins
xchg
mov
jg
mov
mov
xchg
cmps
adc
mov
loop
jmp
scas
inc
pop
jmp
add
std
mov
into
mov
mov
lods
inc
dec
in
dec
imul
push
mov
in
mov
pop
test
jge
lock
loop
fisubr
cmp
and
jo
sbb
mov
mov
clc
not
(bad)
xor
(bad)
push
(bad)
(bad)
dec
out
jne
xor
sar
aad
push
repz
rol
das
xor
or
loope
add
rol
aam
mov
xchg
mul
jnp
xor
xchg
xchg
cmp
ins
out
xchg
hlt
xchg
(bad)
aam
mov
in
dec
mov
inc
ret
sbb
sbb
mov
ror
inc
xor
or
hlt
jge
sub
inc
stos
je
lock
cmps
xchg
adc
mov
je
jecxz
fwait
mov
pusha
xchg
jge
stos
xchg
add
popa
push
mov
mov
sub
lahf
fidiv
std
(bad)
mov
lods
adc
sub
(bad)
or
adc
icebp
ficom
ret
and
jge
imul
jno
stc
ins
lahf
push
pop
cmp
pop
pop
test
xchg
adc
push
push
mov
pushf
push
test
mov
adc
adc
aam
rcr
lock
mov
rcr
jne
test
lds
mov
sub
fnstcw
xor
sbb
enter
lds
int3
fbld
jle
mov
int3
sub
xchg
das
aas
jbe
mov
enter
pop
imul
dec
cld
add
jb
mov
mov
shl
(bad)
int3
push
lock
dec
rol
in
dec
jmp
shl
cmps
jge
cmp
mov
lock
(bad)
or
cmp
cmps
jg
jg
lds
ret
pop
rol
xchg
adc
mov
outs
loopne
sbb
xor
xchg
aam
cdq
xor
daa
cmp
std
nop
call
cmp
test
mov
sbb
ret
adc
jmp
adc
add
xchg
mov
stos
loope
mov
add
lods
push
shl
leave
xchg
mov
fidivr
lea
adc
mov
shl
xor
test
dec
add
scas
push
pusha
pop
pushf
add
mov
out
fwait
jmp
xchg
push
scas
inc
ins
pop
mov
push
inc
test
mov
sub
shl
push
sub
das
mov
mov
in
pop
retf
xlat
jmp
(bad)
jbe
xor
mov
push
push
loopne
pop
sbb
jecxz
pop
out
dec
mov
mov
retf
ret
push
ins
(bad)
lds
fstp
push
sar
pop
rcl
out
rol
and
daa
in
and
idiv
and
fdivr
inc
and
dec
fwait
jns
sbb
or
sbb
leave
mov
jbe
call
sysexit
lahf
xor
aas
dec
rdmsr
fcmovnbe
pushf
dec
sbb
push
jge
mov
movs
ins
mov
mov
push
xchg
lock
mov
add
(bad)
fistp
outs
xor
(bad)
add
mov
xchg
inc
jns
sahf
mov
pop
enter
repnz
mov
shr
add
push
sub
or
leave
mov
jmp
(bad)
retf
push
fs
push
pop
and
fsubp
loope
jmp
mov
ss
enter
or
or
out
sub
popf
or
xchg
jecxz
sbb
or
add
push
rcl
aam
sub
pusha
cdq
jmp
sub
fwait
sar
fmul
int
add
int3
popa
daa
xchg
lahf
ja
(bad)
cmp
aam
retf
ds
mov
mov
and
ret
ins
out
addr16
push
imul
bound
in
aaa
int3
popa
cmp
jecxz
pop
mov
sahf
retf
and
je
nop
mov
mov
mov
mov
(bad)
out
cmp
mov
push
jp
jae
inc
pop
pop
fwait
imul
add
into
and
dec
push
and
pop
hlt
rcr
sub
jmp
cmp
fdivr
dec
inc
sub
or
fnsetpm(287
call
push
movs
mov
fwait
xchg
cdq
jp
mov
pop
cmps
retf
push
push
stos
das
aad
mov
xor
out
xchg
mov
in
sub
add
add
stos
lods
cmc
sub
jmp
mov
rol
push
mov
movs
data16
jg
adc
pop
and
les
push
(bad)
(bad)
jmp
dec
or
lods
fldcw
cmp
mov
loop
add
pop
xchg
pop
pop
push
fldcw
fisub
cs
lods
shl
mov
jmp
pop
nop
test
in
in
movs
mov
shr
cld
jno
inc
inc
pop
dec
rol
bound
jmp
cld
or
imul
shl
jecxz
lahf
lds
adc
xor
fistp
mov
pushf
xor
in
xchg
inc
xchg
mov
fld
sub
fmul
vfnmadd213sd
push
shl
data16
fwait
enter
into
cmp
add
test
sub
stos
xor
daa
ins
dec
loop
test
jmp
sbb
and
and
and
std
shl
int
mov
outs
jns
or
pop
movs
(bad)
mov
jmp
inc
mov
add
cmp
dec
mov
pop
adc
xchg
fist
or
add
cli
scas
jge
push
mov
rol
mov
sahf
adc
or
std
mov
adc
ss
cli
pop
popa
mov
enter
add
and
fnsave
xor
add
xchg
rcr
lods
or
test
outs
sbb
retf
out
dec
in
test
pushf
fdiv
push
cmp
pop
push
scas
mov
out
mov
aas
mov
push
fs
inc
fmul
test
nop
fwait
lods
jbe
fisubr
or
cdq
xchg
(bad)
iret
xor
gs
and
outs
pop
loopne
jge
mov
xor
ficom
push
ror
ret
add
jae
test
popf
cmp
scas
dec
mov
outs
ds
ins
jnp
mov
leave
lods
(bad)
cmps
shl
inc
sub
test
scas
in
es
fimul
and
fs
in
outs
not
or
fdivr
es
dec
mov
adc
mov
stos
xchg
xchg
add
add
out
xchg
add
das
mov
mov
sbb
ins
dec
add
xor
adc
jmp
out
(bad)
mov
inc
adc
push
js
fsubr
xor
add
hlt
repz
es
ret
xor
push
aas
add
and
xchg
fcom
or
in
add
mov
popa
push
ret
mov
add
ret
xor
popw
in
(bad)
out
mov
ret
test
jmp
aaa
add
in
cmc
xor
cmp
adc
cmc
popf
fmul
lock
fld
int
add
sub
mov
or
int
xchg
into
sub
cmp
fild
fs
and
fdiv
retf
test
mov
push
enter
enter
or
mov
and
cmps
in
mov
sbb
cs
xchg
ret
adc
pop
ret
call
xchg
retf
and
test
(bad)
aam
push
scas
push
outs
nop
fbstp
cmp
xor
repnz
clc
inc
in
pop
sahf
xchg
inc
lods
mov
cmp
arpl
scas
cmp
ret
mov
fldcw
and
xchg
dec
jge
lahf
mov
(bad)
fcmove
xchg
fwait
push
fsubr
mov
add
ja
cmps
jmp
mov
push
imul
cmp
fldcw
add
bound
push
out
mov
inc
cmps
jecxz
and
test
sub
cdq
sbb
xor
lahf
xor
in
push
hlt
mov
sar
mov
add
xor
dec
sbb
jnp
popf
sub
mov
sub
ret
jle
leave
add
mov
and
adc
popf
test
aas
adc
sub
mov
cmps
popf
cmps
mov
dec
or
repz
xor
fdiv
repnz
rcl
dec
mov
int
mov
mov
movs
test
pushf
push
(bad)
call
inc
inc
mov
fwait
dec
es
dec
jmp
and
dec
mov
mov
enter
adc
push
aad
mov
outs
(bad)
(bad)
data16
sub
in
adc
inc
pop
loopne
pop
iret
iret
sub
sub
dec
mov
jmp
movs
adc
fcom
popf
pop
les
aad
sbb
mov
mov
in
xchg
push
imul
mov
jl
fdivr
out
jmp
xor
sbb
imul
inc
(bad)
push
dec
xor
shl
jmp
ds
sti
push
mov
mov
add
enter
push
and
push
xchg
in
jo
and
xor
mov
movs
or
push
mov
int3
shl
rcl
xor
nop
std
jmp
mov
mov
fmul
xor
xchg
mov
push
mov
pop
adc
add
mov
out
xor
ss
int
js
(bad)
mov
das
das
cmp
mov
xchg
iret
mov
and
pop
fcom
jb
ins
pop
imul
adc
sbb
push
mov
dec
setae
popf
sbb
mov
mov
retf
add
mov
xor
inc
mov
test
xchg
scas
lods
(bad)
pop
imul
push
sbb
add
ror
movs
xchg
(bad)
scas
ror
inc
jle
cmps
or
push
out
mov
js
mov
shr
loope
not
add
jmp
cmp
shl
mov
xchg
mov
mov
fistp
pop
ins
scas
inc
sar
dec
add
mov
test
stos
inc
popf
aam
ins
sbb
xchg
ins
sbb
xchg
outs
sbb
xchg
xchg
adc
push
lahf
loopne
push
sahf
loopne
push
popf
loopne
push
pushf
loopne
push
fwait
loopne
test
js
push
test
enter
mov
push
aaa
push
xchg
imul
sub
rcl
sar
out
fidivr
sub
mov
cmp
popf
or
bound
fidivr
push
xchg
push
fs
sub
inc
mov
add
cli
inc
sbb
xchg
pop
imul
sub
xor
cmp
jp
pusha
int
mov
shr
aaa
mov
xchg
movs
in
mov
or
call
fwait
adc
loope
repz
aas
cwde
out
sahf
and
sub
(bad)
test
popf
lahf
imul
xchg
shl
mov
push
push
xor
xor
dec
xchg
sbb
loopne
pop
jmp
je
out
jge
cwde
xbegin
pop
pop
daa
push
xor
(bad)
mov
jg
lods
shl
retf
cmp
(bad)
cdq
sbb
fistp
mov
test
jnp
lahf
pop
cmp
push
adc
lahf
mov
inc
fcomp
jbe
test
scas
xlat
test
fsubr
jge
cs
add
dec
pop
in
lods
jg
lods
pop
or
adc
jp
sub
lds
adc
add
pushf
movs
jg
stc
cdq
push
loop
loopne
xchg
into
push
lock
mov
(bad)
sub
adc
(bad)
mov
jno
push
push
repz
(bad)
sti
sub
push
lds
or
mov
mov
mov
lea
clc
(bad)
(bad)
mov
outs
add
mov
cwde
ror
loopne
mov
mov
inc
movs
ss
xchg
(bad)
inc
jg
xchg
cs
ret
int3
jle
mov
cmp
push
movs
mov
pop
xor
xlat
push
lock
jecxz
jae
xlat
nop
jmp
pop
jo
enter
ret
sbb
jg
xlat
adc
mov
movs
add
test
in
aad
mov
inc
dec
(bad)
dec
xlat
dec
add
mov
and
jbe
test
dec
stc
lods
lods
push
(bad)
stc
mov
mov
test
cmp
cmp
ret
cmps
je
les
jns
mov
inc
pop
shl
dec
and
push
lods
adc
jl
pop
push
lahf
fist
sub
push
adc
pushf
pop
fnstcw
stos
and
push
jecxz
leave
ins
inc
or
xchg
inc
jmp
lods
mov
call
mov
(bad)
pop
lds
scas
jecxz
imul
aad
push
ins
xor
pop
push
rcr
dec
cmps
in
mov
je
fisubr
adc
pop
lods
xchg
xor
enter
int3
mov
jle
push
xchg
mov
jbe
int3
push
iret
scas
fcom
std
fcomp
je
iret
pop
lds
sahf
dec
mov
mov
xchg
in
dec
gs
cmp
mov
cmp
fimul
and
ret
dec
push
pop
loopne
mov
xor
cmp
add
sbb
or
mov
xchg
imul
nop
jg
imul
push
dec
xchg
xchg
ror
into
push
icebp
push
aam
dec
repz
std
push
mov
in
cmps
test
leave
dec
mov
sbb
and
imul
(bad)
shl
stos
sub
fimul
out
test
mov
or
test
in
xchg
inc
out
or
xor
pop
imul
mov
xchg
sbb
aas
jecxz
xchg
pushf
or
cmp
shr
into
or
cmps
cmp
outs
pop
and
mov
jbe
lods
imul
int3
mov
ret
and
fidiv
mov
or
pushf
push
mov
mov
cmp
test
or
rcr
mov
sub
mov
ins
dec
push
(bad)
rcl
add
dec
add
mov
add
iret
dec
lock
retf
or
xchg
cmp
xchg
outs
outs
add
adc
(bad)
out
sbb
or
shl
xchg
sbb
cmp
sbb
cmp
repnz
call
and
mov
ja
mov
xchg
xchg
and
stos
fiadd
cmps
adc
push
dec
pushf
push
(bad)
xchg
aad
fst
(bad)
mov
mov
ret
and
(bad)
adc
sub
in
stos
jl
imul
pusha
push
loop
aam
call
mov
inc
push
js
enter
push
(bad)
pushf
xor
out
pushf
dec
cld
pop
out
loopne
call
push
fsubr
sub
push
xchg
(bad)
push
test
into
mov
adc
outs
push
lds
test
lahf
xchg
mov
and
push
sbb
dec
jns
rol
adc
rcl
jle
pop
lods
push
(bad)
and
cmc
jmp
xor
inc
leave
popf
pop
add
imul
rcl
(bad)
adc
add
push
rcr
loopne
aaa
adc
pop
outs
stos
je
loop
xchg
cs
push
push
push
sub
lods
out
pop
fsubr
fwait
sbb
adc
mov
test
mov
sub
aam
jl
shl
cmp
adc
mov
packuswb
pusha
fild
xchg
ss
cmp
outs
xchg
imul
push
push
adc
sub
rol
loopne
outs
jg
lds
call
lahf
imul
mov
nop
fidivr
sbb
push
outs
add
sbb
xchg
(bad)
test
cmp
adc
push
sbb
cmp
xchg
cmp
ds
pushf
xchg
test
out
ins
pop
push
push
ja
jp
dec
mov
xchg
xchg
push
ficom
cmp
inc
fcmovne
push
ret
inc
ins
mov
test
ret
add
in
out
neg
test
push
jecxz
arpl
or
jne
fistp
int3
test
push
in
cmp
push
adc
js
adc
add
cmp
bound
jmp
dec
shl
push
idiv
jnp
fwait
hlt
outs
cmps
ficomp
dec
aas
push
aaa
test
pop
adc
xchg
xlat
nop
jmp
mov
jo
(bad)
or
in
push
mov
sahf
outs
sbb
push
jo
repnz
dec
out
ror
sbb
and
jns
imul
sbb
js
std
sbb
fimul
dec
aas
sub
fcomp
lods
pop
aaa
sbb
fmul
jge
sar
push
cmps
sub
xchg
cld
in
mov
dec
pop
fadd
in
les
mov
mov
mov
es
cmp
fbstp
fistp
ror
adc
ja
inc
sti
pop
push
inc
ret
jno
(bad)
jo
test
fild
daa
in
pop
pop
std
rcl
mul
pop
push
stos
ja
jge
or
or
adc
pop
jl
inc
xchg
mov
stos
cmps
test
or
adc
add
xchg
push
xor
mov
pop
mov
inc
push
fisubr
out
ret
jo
test
sub
adc
mov
mov
in
mov
push
mov
iret
inc
cmp
or
in
cmps
adc
je
mov
rol
in
sub
nop
hlt
ror
imul
sub
retf
sub
mov
pop
mov
adc
in
xchg
sub
push
mov
sub
ret
sub
mov
imul
lds
lahf
adc
fistp
fld
add
cs
pminsw
jmp
jle
xor
mov
and
and
fisttp
or
jne
sbb
repz
and
push
ret
aad
int3
cmc
(bad)
mov
loopne
gs
ins
mov
jge
pop
xchg
test
retf
outs
cwde
imul
(bad)
jmp
jae
sub
add
dec
xchg
cdq
cmp
mov
aaa
nop
call
push
mov
sbb
mov
outs
xchg
cmps
dec
rcr
jge
ror
mov
lods
ja
aam
pop
inc
mov
sub
adc
jecxz
cdq
dec
scas
leave
into
mov
jno
mov
in
lods
(bad)
mov
or
xchg
adc
pop
xchg
mov
call
pop
fimul
push
sub
jp
push
fstp
fs
mov
dec
mov
mov
mov
repz
out
ds
xor
test
inc
data16
ffree
shl
cmp
or
stos
add
pop
arpl
mov
push
arpl
push
pop
inc
add
je
pop
add
fiadd
ins
dec
rcr
les
adc
sbb
cld
(bad)
mov
push
inc
lods
xlat
mov
repz
pop
xor
pop
in
xor
repnz
mov
sub
add
jae
or
shl
push
pop
xor
stc
mov
mov
call
mov
jl
outs
cmps
hlt
sbb
retf
(bad)
pushf
add
cmps
aas
cmp
fldlg2
and
(bad)
out
(bad)
in
iret
lds
and
mov
aad
mov
xchg
(bad)
in
ficom
and
jo
outs
sahf
push
sub
fadd
push
lods
mov
call
cld
cmps
pusha
push
call
sbb
push
mov
fwait
test
(bad)
or
out
mov
inc
add
mov
sbb
rol
test
lods
mov
and
add
add
mov
and
mov
sbb
mov
aaa
and
mov
pushf
pop
test
repnz
push
lods
hlt
in
push
lds
pop
or
add
xchg
adc
or
push
pop
rol
imul
inc
pop
jg
xor
call
gs
mov
frstor
mov
mov
es
jae
int3
sbb
ins
or
add
and
cmp
push
shl
jmp
sar
dec
popf
mov
mov
lods
rcl
xchg
sbb
imul
jno
mov
cmps
mov
add
mov
xor
imul
test
test
les
dec
jg
xchg
push
cdq
sbb
xchg
pop
cdq
jg
fmul
lock
mov
pop
or
and
add
xchg
mov
ss
sub
mov
adc
mov
int
in
mov
loopne
mov
ficomp
scas
retf
xor
cmps
arpl
out
adc
pop
fst
aam
jmp
ret
xchg
add
hlt
into
movs
push
imul
adc
in
test
dec
mov
iret
xor
aam
push
das
xchg
inc
repnz
mov
iret
push
lea
xor
out
imul
push
lahf
fadd
mov
clc
mov
xchg
jmp
ficom
sub
xchg
mov
int
xchg
outs
push
sbb
mov
adc
mov
sub
push
ret
into
mov
in
in
cmc
popf
add
(bad)
out
das
les
in
add
mov
adc
and
cmc
inc
dec
es
mov
and
adc
cmps
lahf
dec
jno
mov
fldenv
xor
inc
mov
xor
mov
cld
iret
out
out
dec
popf
pop
mov
clc
fisttp
xchg
arpl
fbstp
movs
(bad)
and
pushf
xor
out
or
mov
xchg
dec
loop
mov
into
(bad)
scas
rcr
test
jb
cmps
aaa
aad
pushf
js
pop
pushf
dec
xor
(bad)
mov
and
or
imul
neg
clc
dec
ss
xchg
sub
xchg
test
jmp
add
cmp
push
adc
or
(bad)
aad
sub
pushf
popf
adc
lock
cmps
popf
jns
(bad)
fcom
xor
dec
leave
(bad)
xchg
outs
rol
mov
inc
inc
jg
call
mov
inc
push
fcomip
mov
xlat
jge
jae
inc
cmps
inc
ss
enter
xor
pop
out
call
(bad)
mov
push
pop
in
xchg
xor
jmp
imul
loop
test
shl
nop
test
jp
(bad)
pushf
ret
push
in
mov
dec
inc
pop
jmp
cmps
scas
je
test
loop
and
retf
sahf
test
ret
mov
sub
adc
xor
in
pop
ja
fwait
std
movs
repnz
(bad)
sbb
pushf
mov
mov
xchg
loopne
rol
icebp
repnz
xchg
pushf
cdq
sbb
aam
and
jmp
mov
add
mov
jge
jmp
outs
mov
test
loopne
mov
xchg
adc
pop
push
push
sbb
rcl
jg
adc
loop
imul
sbb
and
sahf
jg
leave
mov
cmps
ret
xchg
cmps
jg
xchg
jp
mov
mov
and
mov
mov
mov
mov
jmp
scas
dec
mov
jg
mov
imul
les
fs
dec
xchg
ret
mov
and
sbb
fwait
sbb
stos
xor
and
xchg
xor
jge
(bad)
std
in
call
movs
sub
test
js
loop
xchg
add
cli
sbb
nop
(bad)
popf
sar
cmc
adc
mov
fsub
ret
jge
popa
push
sbb
mov
iret
xchg
jb
xchg
in
lods
jmp
gs
inc
outs
mov
xchg
int
xor
mov
test
adc
adc
dec
add
rcl
lahf
jl
cmp
pop
out
popa
or
hlt
add
and
int
in
sub
loope
ins
ret
mov
push
(bad)
and
shl
adc
and
add
mov
jae
xchg
jecxz
loopne
pop
test
push
push
add
pop
in
xor
mov
inc
push
push
adc
leave
inc
icebp
pop
sti
mov
sub
sub
(bad)
imul
jle
mov
ret
mov
mov
mov
push
idiv
mov
aaa
idiv
mov
xchg
daa
mov
nop
add
dec
fdiv
pop
mov
jo
rcr
add
cmp
xchg
sbb
sub
cmc
(bad)
push
rcl
mov
dec
rcl
lods
sbb
xchg
bound
in
mov
popf
pop
aaa
jecxz
push
add
lahf
mov
shr
mov
lods
jle
xchg
call
loope
xchg
enter
(bad)
scas
adc
jbe
mov
sbb
sub
mov
in
pop
dec
push
adc
and
push
call
sar
mov
xor
and
push
cld
cwde
and
cmps
mov
pushf
iret
sub
xchg
mov
mov
xor
shr
and
jne
bound
sbb
xchg
jmp
ret
adc
mov
mov
fisubr
fst
daa
mov
mov
pop
cmc
mov
cdq
movs
dec
pop
jo
push
mov
mov
sub
imul
mov
leave
cld
pop
mov
sbb
lods
adc
pop
mov
int
retf
leave
mov
and
(bad)
(bad)
xchg
inc
dec
cmps
aaa
push
retf
mov
test
stc
aam
or
jae
or
outs
lahf
mov
mov
mov
mov
clc
xor
fidiv
adc
ss
cmp
in
or
icebp
mov
and
mov
jns
xchg
lods
jnp
jne
cmp
jecxz
lock
fisubr
ins
pop
pop
shl
xchg
inc
adc
rcl
jecxz
in
xchg
xchg
adc
xchg
not
dec
jno
lahf
cmp
aas
test
imul
rcl
outs
out
(bad)
xor
xchg
lods
leave
test
sbb
outs
aad
jle
jmp
push
inc
fsubr
call
int
ja
lock
mov
xor
jnp
es
test
mov
int
lahf
mov
inc
xchg
das
(bad)
cs
pop
enter
mov
fbstp
movs
jge
cmp
sbb
push
loope
add
adc
hlt
adc
sub
ficom
mov
pop
lock
test
sub
pop
add
aam
scas
(bad)
dec
je
or
inc
or
jecxz
cmp
(bad)
sub
jmp
lahf
fadd
test
pop
(bad)
aad
mov
sahf
xor
pop
jg
call
and
xchg
xchg
scas
shl
test
mov
mov
xchg
sub
cmp
popa
push
retf
push
imul
mov
arpl
mov
mov
push
xor
(bad)
aas
in
call
arpl
xchg
fcom
jns
(bad)
mov
in
loope
out
rcr
jge
sbb
mov
push
popf
sbb
hlt
jecxz
and
ret
(bad)
(bad)
fdivr
fisubr
cmps
push
fild
enter
(bad)
sbb
in
push
adc
mov
cmp
add
inc
pushf
ja
test
and
sbb
out
rol
mul
pushf
sbb
faddp
daa
out
aas
xchg
push
(bad)
ret
ror
sbb
and
int
xor
pop
ret
and
cmp
sub
test
pop
jmp
xchg
enter
xchg
ins
mov
and
(bad)
mov
test
sbb
sbb
in
pop
pop
jmp
enter
fcom
adc
mov
mov
fsubr
xor
aam
jo
cmp
repnz
or
inc
imul
xor
in
add
mov
push
inc
shl
mov
in
mov
ficomp
rcr
ins
jns
or
mov
sbb
jle
loope
or
cs
pushf
xchg
mov
pushf
imul
xor
mov
mov
jnp
int
adc
cmp
movs
jmp
cmp
jecxz
ret
lahf
fidiv
add
movs
loopne
mov
cmp
inc
mov
xchg
cmp
imul
sbb
ret
and
push
stos
sbb
mov
mov
fld
xlat
lea
fidiv
sar
in
pop
(bad)
iret
xchg
pop
mov
push
push
jle
cmp
fsubr
mov
stos
sbb
pop
imul
lods
and
xchg
into
ror
mov
fsub
cmp
repz
xchg
sbb
add
aad
jge
nop
test
loopne
sub
mov
test
pop
xchg
fist
(bad)
es
imul
mov
popa
ins
out
adc
je
pop
add
add
adc
sbb
hlt
jmp
mov
pop
jge
or
nop
adc
cli
pop
xchg
out
jns
retf
add
add
outs
in
add
std
rcr
sub
mov
jp
push
ret
mov
fist
and
cmps
fbld
mov
fstp
push
ficom
and
cmp
xchg
lock
rol
(bad)
cmp
repz
popa
bound
arpl
gs
add
lods
cmps
add
pop
cmps
or
mov
(bad)
mov
xchg
cmps
sub
fild
and
sub
adc
fst
push
add
pop
test
pop
pop
out
std
cmp
(bad)
xchg
sub
(bad)
xlat
lock
rol
(bad)
pop
xchg
pop
push
mov
cld
popf
xchg
xchg
cmps
call
iret
push
fiadd
int
outs
sbb
test
das
add
mov
loop
div
popa
test
cmp
loopne
outs
add
jnp
sbb
inc
mov
push
ret
into
add
mov
push
ror
arpl
cs
pop
cmc
in
or
xchg
push
std
lds
sub
pop
cmps
bound
popa
lods
mov
xchg
or
mov
cmp
mov
sbb
ins
rol
cmp
xor
cmps
(bad)
loopne
sbb
jmp
jb
(bad)
jg
imul
xor
ins
ret
ins
sub
mov
ret
stos
cmps
aaa
aam
inc
cwde
add
cmp
gs
ret
pushf
pop
and
xor
sub
jecxz
(bad)
daa
xor
adc
retf
adc
mov
adc
jl
fwait
or
pop
daa
mov
xchg
cmp
mov
ror
es
xlat
mov
test
dec
fdivp
mov
jge
bound
jp
cmps
adc
cli
push
(bad)
mov
mov
ins
movs
sbb
outs
sahf
adc
adc
fisubr
imul
adc
xchg
loop
jl
pop
(bad)
aam
les
jge
and
mov
pop
and
push
xchg
pop
daa
pop
cmp
cmp
xchg
xor
mov
lods
mov
xchg
mov
and
and
push
jge
aaa
xchg
imul
fcomip
out
daa
lods
pop
jmp
xor
mov
sbb
loopne
into
test
pop
imul
bound
ins
(bad)
sub
xchg
daa
xchg
movs
cmp
shl
rcl
add
aaa
mov
push
fadd
daa
popf
xor
mov
mov
(bad)
xor
and
cmp
movs
xor
or
ret
pop
sub
(bad)
cmps
jge
mov
loopne
jecxz
fidiv
pop
std
call
(bad)
hlt
dec
add
shr
ss
sbb
sub
cmp
ret
fldenv
mov
cmps
and
jnp
cmps
and
xchg
pop
cdq
mov
mov
sbb
pop
adc
push
or
jo
in
cld
(bad)
push
enter
mov
(bad)
cmps
mov
mov
sub
aaa
jge
mov
rol
lds
div
xchg
aaa
inc
add
daa
repz
inc
lods
repnz
clc
push
pushf
sbb
sub
int3
inc
fisubr
fstp
test
rcr
sub
idiv
jg
mov
sub
jae
in
mov
mov
pop
xchg
jl
lds
pop
xor
add
mov
outs
inc
jmp
in
or
lock
sbb
sbb
jo
gs
je
mov
jmp
sbb
inc
mov
xor
add
enter
dec
jecxz
jg
in
(bad)
fisttp
out
popf
test
adc
in
mov
call
jmp
dec
mov
fdiv
mov
sub
xchg
jp
adc
mov
sub
and
or
int3
fistp
xor
fwait
and
cdq
(bad)
rol
cmc
(bad)
jbe
xor
mov
pop
hlt
movs
shr
pop
jl
sar
loopne
dec
sbb
inc
mov
shr
mov
push
push
push
jns
or
test
mov
pop
fbstp
gs
xchg
(bad)
fst
sub
pusha
jecxz
xchg
rol
ins
aas
(bad)
inc
push
mov
scas
xchg
scas
gs
mov
cmp
xchg
fldenv
mov
leave
jmp
jg
lods
daa
mov
lods
mov
push
push
or
pop
sub
leave
iret
inc
test
sbb
cld
mov
dec
jbe
push
in
cmp
add
outs
imul
or
ins
push
ins
inc
cmps
and
fadd
sbb
xchg
add
sahf
mov
or
add
cmp
push
jae
daa
daa
movs
sub
repnz
shl
ins
and
pop
mov
in
xlat
lea
in
sub
xor
mov
mov
fidiv
dec
pop
pop
sbb
aaa
ret
movs
enter
mov
in
add
pop
rol
(bad)
xchg
mov
jmp
mov
loopne
lahf
push
jnp
sahf
mov
push
lock
sub
js
pop
retf
test
jg
or
inc
jae
outs
or
(bad)
jp
xchg
lods
and
cdq
sub
(bad)
aaa
repz
cmp
sub
int3
mov
push
xchg
mov
jno
leave
(bad)
push
sti
add
fst
movs
pop
mov
add
(bad)
fcmovnb
mov
aad
fist
aas
xor
mov
nop
and
mov
adc
outs
pop
dec
(bad)
in
xchg
xchg
mov
fmul
loopne
sar
cmp
mov
mov
mov
inc
dec
dec
sub
aad
test
cmps
mov
add
xor
jo
jnp
cmps
shl
stc
and
into
aas
fild
scas
push
xor
idiv
xchg
cmp
jmp
rcr
ret
push
add
int
inc
fsub
in
pop
paddq
inc
push
sbb
xchg
xchg
lea
push
clc
mov
(bad)
ja
and
int3
mov
adc
or
push
xor
mov
sar
inc
mov
das
xchg
(bad)
push
fimul
ret
jne
test
dec
sub
and
cmp
jge
addr16
outs
xchg
loope
ds
fldenv
outs
int
and
scas
jecxz
aas
mov
jg
jb
or
iret
add
mov
jl
outs
xlat
hlt
test
sar
or
mov
xchg
xlat
lods
add
jne
scas
push
sub
cmps
pushf
pushf
ret
fiadd
push
ds
jle
js
mov
jne
je
mov
sahf
movs
test
add
pop
test
mov
add
mov
lods
call
ins
add
mov
loope
int
fcom
xchg
(bad)
hlt
dec
rcl
adc
xchg
pop
inc
cmp
pushf
mov
cmps
stos
aam
outs
ds
add
jb
fnstcw
daa
mov
mov
neg
cmp
mov
jo
repnz
cmp
mov
shl
jle
(bad)
xchg
mov
fcom
dec
jg
push
rcr
retf
xchg
sub
mov
lds
test
out
ins
mov
mov
enter
mov
push
mov
test
inc
into
fisub
inc
sub
jbe
rcr
mov
sub
jo
clc
inc
movs
cmp
add
jmp
mov
test
push
lahf
pop
loopne
enter
movs
mov
repnz
mov
leave
rcl
test
pusha
mov
cmps
in
xchg
pop
sbb
(bad)
jg
fimul
and
or
mov
idiv
jae
and
arpl
(bad)
mov
cmps
not
movs
mov
cwde
mov
and
jecxz
xor
outs
lock
xlat
fcomp
inc
shl
dec
sbb
cld
xchg
push
(bad)
cmc
mov
add
sti
xor
pop
ficomp
dec
cs
sub
add
pop
jmp
xor
fld
pop
das
push
ud0
or
jecxz
adc
push
int3
mov
fist
mov
pop
inc
or
in
mov
mov
enter
aam
inc
jno
adc
enter
mov
dec
mov
mov
aad
inc
test
xchg
retf
adc
sbb
jle
xchg
inc
and
rol
lods
push
pop
in
mov
sbb
loop
mov
push
sub
shl
(bad)
inc
mov
jb
aam
fnstenv
mov
and
xchg
ins
loopne
cmp
arpl
mov
ja
rol
enter
mov
cli
icebp
push
mov
inc
fdivr
bound
jmp
ja
mov
cmps
int
xchg
cs
test
and
or
fwait
sub
test
repz
cmps
into
sbb
ins
leave
pop
pop
mov
pushf
ja
mov
cmp
xchg
xchg
(bad)
xchg
test
sbb
pop
int3
hlt
mov
cmps
xchg
je
mov
push
mov
jbe
loop
les
ret
adc
int3
retf
add
test
xor
fld
jl
por
add
jp
maxps
leave
sub
out
cmc
cmc
jb
test
int
shl
jecxz
movs
inc
cmp
mov
xchg
loopne
jae
nop
hlt
shl
lds
push
pop
xchg
das
jmp
jge
xor
xchg
jecxz
sub
scas
push
mov
cdq
sbb
push
fs
mov
jp
mov
add
mov
push
mov
pusha
mov
std
test
inc
dec
push
mov
into
and
mov
ret
inc
jns
and
into
inc
jge
es
add
gs
jp
pop
add
js
shl
xchg
enter
dec
xchg
sub
jle
fdiv
lahf
push
xor
shl
outs
pop
push
and
rcl
push
xlat
cmp
mov
popf
repnz
and
xchg
pop
arpl
cmp
push
mov
pop
push
ds
fs
pop
(bad)
xchg
ror
cmc
into
inc
ficom
imul
sub
push
fist
add
mov
jno
cmp
int3
mov
aam
push
and
pop
mov
fs
pop
mov
mov
ins
adc
cmp
mov
loop
cmp
ret
ins
push
xlat
(bad)
mov
inc
cmp
jb
outs
mov
adc
in
loop
shl
jge
sbb
push
inc
jbe
inc
or
scas
xor
into
(bad)
cli
(bad)
push
retf
bound
(bad)
scas
adc
fsubr
fild
jg
mov
out
push
inc
sbb
enter
cmps
adc
sbb
pmaxub
or
das
or
pushf
(bad)
(bad)
mov
push
daa
(bad)
mov
jge
out
xor
in
mov
stos
dec
mov
inc
ret
mov
xchg
xchg
or
cmps
inc
nop
push
push
xchg
pop
leave
retf
sub
jmp
xor
xchg
xchg
add
test
xchg
into
hlt
call
or
outs
dec
ffreep
push
sub
adc
test
ins
mov
sub
(bad)
(bad)
sub
push
movs
mov
int3
add
jo
rcr
push
loopne
imul
ror
enter
xchg
ins
mov
add
jle
repnz
adc
int
mov
loope
lds
mov
test
lds
add
push
mov
or
loopne
(bad)
(bad)
inc
lds
and
sti
push
pusha
inc
call
outs
xor
push
mov
jmp
cmc
pop
fmulp
retf
add
cmp
push
imul
out
ret
cmp
retf
test
(bad)
cmp
lea
push
adc
push
mov
push
lahf
add
ret
(bad)
and
push
or
sbb
mov
adc
std
jle
xlat
lahf
jecxz
out
cmps
(bad)
xchg
xchg
aaa
aam
loopne
hlt
imul
xor
push
push
jns
cwde
outs
imul
hlt
loopne
pushf
in
jg
mov
jge
xchg
sub
pop
mov
outs
adc
cmp
sub
push
call
xchg
cmp
adc
aam
test
and
xchg
ret
push
and
in
mov
scas
shl
in
sbb
fldcw
and
sub
dec
inc
mov
adc
push
repz
push
push
xchg
jmp
jmp
xchg
sbb
cli
cmc
fstp
mov
xor
cdq
pop
mov
xchg
and
clc
push
sar
aas
or
xchg
pop
add
jnp
fisttp
push
pop
fcom
adc
dec
lahf
add
fistp
repnz
dec
hlt
or
jbe
mov
add
sbb
hlt
test
xor
add
or
cmc
div
and
inc
or
and
or
sbb
or
daa
mov
jno
sahf
cdq
mov
xor
mov
mov
push
retf
xor
arpl
jo
push
cmp
adc
gs
mov
or
fisttp
dec
xchg
in
scas
rol
jg
loop
mov
rol
add
adc
mov
aam
(bad)
adc
call
aam
xor
adc
sar
xchg
ins
jbe
xor
mov
dec
xchg
jbe
xchg
xor
push
pusha
cmp
dec
scas
popf
mov
xchg
retf
leave
retf
sub
leave
in
sbb
fcmovnb
add
sbb
in
xchg
in
lahf
jg
or
aaa
retf
pop
add
mov
pop
stc
adc
movs
ins
icebp
fdiv
sub
mov
enter
vaddps
rol
pushf
(bad)
mov
jo
xchg
jnp
push
xor
jbe
fcomp
lock
hlt
xchg
sub
cmp
retf
ret
inc
mov
fild
mov
imul
and
(bad)
(bad)
lds
js
jp
push
cs
ror
sbb
dec
xor
aad
cs
dec
aas
or
jo
mov
aad
daa
xchg
mov
add
aaa
mov
fwait
mov
in
nop
mov
cli
mov
rcl
mov
or
arpl
mov
or
(bad)
mov
xchg
test
enter
fst
or
inc
inc
mov
lods
mov
mov
fdivr
stc
rcr
jmp
add
fnstenv
inc
leave
adc
cmp
xchg
mov
xchg
popf
push
dec
pop
call
retf
lods
cmp
(bad)
xchg
ss
ret
adc
in
sahf
out
(bad)
cld
test
test
aad
push
push
xchg
rcr
sub
mov
imul
rcl
shl
aas
mov
xchg
pusha
or
and
retf
pop
rcl
stos
hlt
add
and
sbb
dec
push
jno
std
push
rcl
jg
imul
jle
call
mov
push
test
sub
pop
jmp
and
pop
sar
jge
pushf
pushf
or
pop
or
icebp
test
jp
dec
pop
push
aam
test
xchg
imul
push
pop
aad
jnp
fisttp
cmp
adc
inc
inc
sbb
inc
or
test
inc
xchg
aaa
sbb
sar
ins
push
js
lods
jnp
jno
int3
add
jmp
ror
xchg
fucomp
loopne
sub
fist
add
(bad)
loopne
in
je
jecxz
jle
pop
in
fcompp
ret
mov
rcl
mov
ret
dec
sti
(bad)
ds
call
cmovno
cs
repz
popa
dec
inc
push
lods
popf
ret
test
enter
(bad)
ficom
sbb
mov
cmc
loope
mov
fwait
dec
ret
fisttp
iret
les
mov
pop
shl
jns
mov
add
fidivr
in
mov
loopne
out
pop
std
iret
mov
outs
mov
mov
fwait
iret
sahf
mov
or
mov
cmp
push
arpl
movs
call
pushf
cmp
repnz
xchg
daa
fdivr
add
mov
(bad)
inc
rcr
cmc
push
into
aas
test
sbb
mov
inc
mov
pop
leave
or
sub
(bad)
popa
dec
repz
pop
xchg
jle
xor
adc
and
ds
pop
pop
test
sub
loopne
push
xchg
mov
loopne
not
push
(bad)
sbb
stos
shr
loopne
outs
neg
pushf
movs
or
sbb
outs
clc
data16
leave
cmp
xchg
lods
pop
in
(bad)
rol
push
mov
out
cdq
jmp
add
xor
adc
mov
and
mov
dec
cmp
add
out
dec
mov
fsubr
fsub
gs
je
push
mov
in
add
retf
pop
xchg
lahf
int3
mov
sbb
leave
mov
popa
push
hlt
add
iret
fadd
imul
mov
loope
mov
les
fcom
repz
mov
cmp
and
pushf
add
cmp
retf
ins
mov
(bad)
loop
jmp
gs
mov
push
jge
push
push
cmc
hlt
inc
bound
enter
mov
in
bound
std
pusha
inc
adc
ret
adc
(bad)
pushf
add
mov
and
imul
jle
(bad)
sbb
push
cmp
sub
mov
or
and
fcmovb
xor
push
fldenv
div
fldenv
pop
cmp
jmp
pop
inc
mov
push
dec
cmps
das
and
fcom
les
sar
mov
or
cmp
(bad)
scas
scas
in
and
fs
test
dec
or
mov
ins
jb
loop
lods
mov
ror
lods
mov
xchg
mov
xchg
pop
(bad)
shl
mov
jns
pop
loopne
stos
push
vpscatterqq
xlat
mov
pop
test
pushf
adc
test
xchg
cli
sbb
rol
(bad)
(bad)
mov
adc
fldcw
mov
push
loop
loop
mov
sub
pop
call
popf
rol
test
mov
call
mov
ret
pushf
xor
loope
(bad)
and
mov
mov
inc
sub
hlt
mov
pushf
push
std
xchg
rcl
std
or
jbe
sbb
sbb
test
das
rcl
jge
cs
mov
inc
mov
enter
int3
(bad)
adc
das
test
mov
shl
inc
shl
mov
push
inc
adc
mov
call
sahf
adc
push
pop
loopne
lods
aaa
xlat
ror
xchg
les
pop
sbb
pushf
aad
mov
or
inc
hlt
inc
cmps
sub
sbb
or
or
cmps
mov
pop
xchg
push
adc
pusha
mov
lahf
push
xor
push
leave
in
push
and
int
(bad)
aam
pop
enter
shr
mov
xchg
fnstcw
dec
addr16
xchg
jmp
inc
cmp
xchg
sub
and
mov
pop
nop
test
add
add
ins
mov
mov
mov
movs
mov
inc
and
xlat
mov
adc
sbb
push
loope
adc
adc
fisubr
mov
adc
pop
push
popa
jmp
cmp
dec
shl
dec
loopne
mov
mov
aaa
add
cdq
sbb
cld
dec
mov
fwait
mov
pusha
ror
nop
dec
lock
ret
jl
cmp
test
jp
(bad)
adc
or
cdq
les
setae
lds
jp
mov
test
xchg
popw
xor
scas
sbb
leave
pop
mov
pusha
call
nop
add
dec
repz
mov
jo
or
inc
add
movs
inc
je
outs
(bad)
mov
ins
pop
ss
rcl
jmp
inc
ret
lods
ja
xchg
push
sub
stos
jge
mov
cmp
cmps
test
xor
dec
dec
rcr
mov
aam
xor
mov
jecxz
pop
mov
mov
mov
(bad)
and
sub
cmp
std
sbb
arpl
imul
aaa
ror
scas
cmp
call
xchg
adc
aad
cld
adc
sbb
retf
(bad)
pop
mov
jge
test
push
pop
push
in
neg
xchg
int3
out
rcl
sahf
shr
in
push
sbb
aas
jmp
add
and
mov
cmp
add
mov
jnp
add
and
lahf
mov
test
mov
dec
les
fsubr
mov
mov
in
adc
(bad)
ret
test
adc
call
jge
pmuludq
ins
xchg
and
shl
ret
aas
ss
mov
lahf
xchg
(bad)
jmp
sub
test
adc
in
or
lods
sub
ret
rol
shr
out
int3
daa
jle
lods
retfw
ret
pop
int3
and
pop
add
neg
pop
sbb
outs
adc
cmp
mov
dec
jmp
iret
cwde
add
or
sbb
js
push
ds
aam
shl
call
pop
mov
jl
sahf
sar
push
leave
xchg
out
mov
sub
push
adc
lahf
mov
push
sbb
xor
jmp
sbb
add
push
mov
inc
add
test
jnp
push
aad
repz
ins
mov
les
ror
or
mov
ret
pop
and
pop
and
mov
fisubr
mov
add
add
dec
sar
aam
push
ja
jg
xor
pop
dec
pop
jg
js
push
push
fisub
pop
cmps
lock
arpl
inc
outs
push
or
scas
pop
push
(bad)
int3
pusha
mov
ret
pop
repz
mov
mov
adc
xchg
push
ret
pop
div
xchg
jge
out
xchg
mov
mov
adc
fcmovnb
jbe
retf
push
pop
fsubr
cmp
jb
inc
inc
adc
fst
mov
xor
mov
popa
aam
cmps
ins
daa
jne
ret
add
mov
adc
adc
sahf
add
fisttp
in
pop
inc
lahf
xchg
add
scas
push
(bad)
fcmovbe
jbe
mov
pop
lds
mov
repnz
rcl
cmp
test
pop
adc
sub
dec
cmps
pop
jne
ror
add
test
sub
loopne
mov
in
movs
movs
les
bound
pop
xor
outs
adc
test
shl
or
adc
stos
imul
xchg
mov
(bad)
dec
movs
and
cmp
xor
or
inc
or
inc
pop
cmp
sbb
pop
leave
(bad)
(bad)
mov
mov
and
std
stos
test
dec
(bad)
push
push
test
inc
movs
push
stc
mov
sbb
jge
mov
repz
scas
sbb
clc
pop
(bad)
rcr
xor
xchg
(bad)
pmaddwd
cli
jne
pop
adc
cmps
rol
lds
loope
push
pop
push
and
test
neg
je
mov
jge
neg
adc
jle
jmp
aam
ror
xor
stos
test
push
test
(bad)
pop
mov
xor
adc
popf
xchg
sbb
adc
std
sbb
pushf
mov
shl
fdiv
or
pusha
sahf
loop
(bad)
sahf
jle
(bad)
es
daa
push
push
adc
ins
mov
enter
psraw
or
call
fild
fisubr
arpl
test
rol
push
dec
and
mov
pop
mov
sub
aam
neg
das
sar
dec
leave
arpl
mov
xchg
pushf
add
sbb
sbb
bound
push
rcl
inc
or
mov
xchg
rcl
pop
pop
mov
rcl
scas
jecxz
loop
xchg
imul
call
xchg
ret
rcl
pop
cmp
ss
adc
(bad)
jo
bound
sbb
loope
ja
pop
push
xlat
inc
js
(bad)
sbb
inc
lock
mov
xchg
xchg
pop
fstp
and
adc
fwait
lods
(bad)
jmpw
inc
test
inc
cmp
xor
je
sbb
(bad)
mov
push
rcr
fwait
jge
adc
push
mov
mov
enter
rol
mov
hlt
pushf
and
push
les
pop
add
inc
nop
jecxz
cld
mov
or
push
pop
out
xor
enter
popa
(bad)
ficomp
aad
ffreep
jo
pop
mov
add
fbld
cdq
cdq
or
or
or
and
addr16
stc
add
fisubr
dec
jns
push
cwde
sub
aam
push
les
or
xor
test
movs
dec
xchg
iret
lods
push
ror
pusha
add
push
sbb
sbb
xchg
jle
ds
enter
sahf
mov
sbb
pop
pop
cdq
adc
mov
stos
add
xchg
jne
mov
xor
(bad)
sar
mov
jae
adc
xchg
fdiv
mov
xor
and
loopne
xor
(bad)
test
sbb
cmps
push
xchg
mov
out
movs
jg
pop
push
sbb
pop
dec
ins
scas
dec
retf
mov
aam
mov
imul
pop
loopne
push
je
ss
(bad)
xchg
push
cwde
aad
scas
inc
and
pop
jecxz
cwde
xor
out
fwait
das
dec
inc
dec
hlt
adc
jge
pusha
push
pushf
scas
push
xor
jmp
test
(bad)
jmp
ret
pop
nop
movs
jge
xchg
fbstp
pop
mov
sbb
sub
mov
iret
push
and
rcr
mov
ds
mov
lahf
sahf
xchg
xchg
bound
sub
aaa
sti
scas
prefetcht0
cmps
or
inc
xchg
jp
xchg
addr16
mov
lock
pop
jl
pop
and
rcl
jp
call
adc
dec
mov
addr16
xchg
adc
icebp
(bad)
(bad)
out
xchg
add
ficom
(bad)
fmul
push
ror
mov
lahf
cdq
cmp
addr16
xchg
ror
enter
arpl
lahf
add
out
dec
mov
shl
jp
xor
cmp
mov
sub
repnz
popa
adc
mov
gs
dec
mov
xchg
sbb
das
sti
(bad)
fnsave
popf
repnz
shl
pop
fwait
call
test
mov
fisubr
pop
fisub
scas
or
push
leave
xchg
sbb
mov
mov
push
sti
xchg
push
ret
push
inc
fist
add
add
jmp
pop
enter
cmp
stos
or
push
sahf
test
loopne
call
push
xchg
enter
popf
sahf
xlat
pop
xchg
sbb
lahf
fsubr
pop
popf
shl
outs
xchg
jecxz
xor
enter
sub
cmp
push
cwde
pop
sbb
sbb
mov
inc
jmp
xchg
pop
aam
imul
xrelease
rcl
scas
cmp
clc
sub
mov
fmul
rcr
aam
retf
cmp
ret
pushf
in
add
inc
xlat
adc
loopne
sub
outs
(bad)
mov
xchg
add
push
cwde
out
push
ret
xchg
inc
loopne
sahf
fidiv
push
push
jge
imul
inc
jle
push
jge
call
and
jg
les
enter
or
out
add
or
fld
arpl
rcr
xchg
jb
jno
repnz
sbb
jmp
pop
imul
sar
xchg
xchg
sbb
lea
mov
push
cmp
xor
pusha
push
pusha
loope
cmp
out
cdq
mov
div
test
js
pusha
inc
fs
dec
scas
dec
mov
sbb
fdivr
mov
pop
shl
push
scas
inc
and
inc
xchg
jl
retf
cmps
jae
jb
sbb
xchg
cmp
add
stc
sbb
je
mov
repnz
pop
jge
std
cmp
sub
xor
adc
push
mov
add
fadd
pop
inc
cwde
sbb
outs
pop
push
cmp
les
scas
pop
add
inc
int3
add
mov
mov
stc
loopne
ja
out
mov
test
ins
pop
pop
mov
mov
hlt
out
test
retf
nop
out
pop
(bad)
mov
cmp
xor
xchg
aaa
stos
fadd
dec
enter
ins
retf
out
inc
sub
je
mov
jg
pusha
adc
sbb
pop
mov
hlt
xor
sub
push
faddp
cmps
hlt
movs
leave
jns
ficom
scas
ret
es
jbe
mov
inc
jle
xchg
dec
push
scas
xlat
mov
jge
gs
loopne
and
mov
pop
xchg
out
sbb
inc
js
push
lods
jbe
mov
not
ins
mov
push
adc
inc
adc
mov
clc
cmp
inc
clc
pusha
xchg
inc
dec
sub
or
adc
inc
(bad)
stos
xchg
in
lahf
or
(bad)
ror
xchg
enter
inc
mov
pop
xchg
sub
xchg
clc
jns
xchg
dec
(bad)
repz
loope
aam
push
test
outs
mov
test
ret
ds
lock
cmp
inc
xor
mov
mov
imul
xchg
in
scas
aad
sti
or
push
push
or
outs
hlt
hlt
popf
inc
sub
add
shl
mov
xchg
xchg
daa
test
mov
inc
or
and
cmps
fistp
adc
fadd
push
repnz
pop
shl
cmp
pop
hlt
jmp
pop
xchg
push
(bad)
sbb
imul
xchg
hlt
outs
mov
out
adc
xchg
inc
in
call
adc
sahf
dec
ret
fidivr
sub
push
cmps
test
xchg
pop
mov
test
and
(bad)
push
pop
bnd
pusha
pop
mov
jne
adc
in
shl
repz
adc
mov
jo
rcr
sbb
push
mov
add
sub
push
mov
xlat
sbb
xchg
fbld
mov
cmp
sbb
mov
or
sub
loopne
add
in
ss
xchg
mov
xchg
push
jnp
outs
push
mov
adc
adc
test
xchg
stos
mov
dec
pop
sahf
sub
(bad)
mov
and
movs
outs
or
daa
adc
fistp
pusha
fist
mov
adc
xchg
in
xchg
xchg
test
cmp
sahf
jge
lods
and
dec
adc
and
mov
loopne
int3
inc
mov
movs
pop
mov
cmps
aaa
and
leave
lods
jno
jecxz
xor
xor
xor
fist
(bad)
leave
mov
cdq
jl
and
xchg
add
sub
movs
push
and
jp
inc
xor
imul
push
(bad)
dec
in
sub
aam
movs
cmp
adc
sbb
dec
shl
dec
pop
mov
mov
movs
adc
xchg
add
in
sbb
lods
sub
xchg
mov
adc
out
iret
xor
stc
movs
imul
add
xlat
aad
test
in
xchg
or
inc
dec
sbb
enter
vpshufd
and
jmp
add
leave
in
loop
mov
(bad)
jnp
jecxz
sub
adc
pop
mov
push
loope
inc
shl
imul
cdq
das
xchg
mov
imul
xor
pop
ret
in
xchg
repz
mov
inc
push
mov
jb
jge
cmp
sub
in
sub
push
pop
mov
ret
push
sahf
jmp
stos
inc
movs
cmp
fimul
out
mov
int
sub
sahf
jbe
test
inc
mov
ins
push
inc
xchg
ss
mov
ins
and
xor
fnstsw
and
jle
movs
pushf
xchg
mov
mov
xchg
mov
mov
and
call
mov
int3
ficom
aaa
cmps
das
scas
movs
shr
pop
mov
push
dec
mov
popf
push
xlat
sar
inc
jbe
out
in
pop
inc
jmp
nop
out
pushf
imul
fimul
xor
pop
lahf
test
sbb
sbb
cmps
hlt
sbb
jg
lods
loope
(bad)
(bad)
push
xor
fwait
xor
mov
in
xchg
sub
jl
mov
pushf
rcr
(bad)
rcl
jg
inc
jbe
inc
ror
and
je
rcr
mov
loopne
mov
cmp
add
or
ja
and
mov
ficomp
jmp
jg
adc
jecxz
leave
sbb
inc
inc
push
aam
ins
cmp
add
mov
inc
ret
out
mov
aam
add
inc
iret
add
fisub
popa
mov
cmps
fcomp
sete
push
pop
mov
in
ins
ins
jo
xchg
lods
push
jecxz
adc
mov
out
mov
and
aas
es
test
cmps
xchg
fwait
sar
(bad)
retf
in
mov
cmp
pop
mov
sbb
(bad)
jne
mov
imul
dec
jmp
stos
xor
(bad)
add
jecxz
sbb
sub
js
push
cmc
xchg
jp
mov
mov
(bad)
cmp
and
and
pusha
or
xor
xor
arpl
xor
mov
clc
lds
sbb
xchg
fidiv
adc
xor
inc
inc
push
fnstsw
mov
gs
xchg
adc
or
xor
pop
mov
or
pop
imul
xchg
add
out
dec
out
mov
lea
and
pop
push
add
pop
imul
sbb
jge
aad
adc
sub
push
popf
push
(bad)
sbb
mov
loope
ret
sub
pop
xor
xor
or
loop
(bad)
fadd
mov
mov
sbb
xchg
retf
xchg
shl
mov
mov
adc
cmps
call
inc
dec
les
das
pop
(bad)
mov
inc
and
pop
cmp
in
cmp
xchg
stc
mov
rol
loop
fsub
shl
enter
dec
xchg
mov
aam
fcom
pop
and
in
mov
push
test
mov
out
int3
les
(bad)
or
inc
inc
sub
pop
xchg
add
mov
mov
lods
xlat
fld
sbb
mov
outs
xchg
adc
iret
outs
test
jbe
in
arpl
js
loop
xor
mov
mov
cld
push
xchg
pop
popa
lods
imul
push
aaa
les
into
cmp
mov
popw
lea
pop
ss
hlt
popa
retf
in
aam
shl
jne
xor
scas
fisubr
(bad)
mov
in
jb
bound
sbb
les
mov
pop
ficom
pop
fidivr
or
dec
pop
cmp
xchg
in
sbb
xchg
frstor
aaa
test
add
add
ret
inc
cmps
mov
cmp
xchg
out
frstor
push
pop
jo
retf
jl
jge
enter
cmp
adc
push
mov
jmp
in
sub
fild
xchg
popa
dec
nop
mov
mov
fsub
fs
mov
jae
call
fld
imul
dec
inc
fnstsw
mov
pop
rol
jmp
aas
xchg
clc
shl
test
cmc
xchg
loopne
adc
std
in
dec
popf
adc
jmp
shl
jecxz
adc
mov
mov
xchg
jmp
pushf
push
jne
xchg
dec
ins
aad
mov
jmp
push
sbb
mov
mov
sahf
jmp
(bad)
enter
fiadd
not
cdq
dec
mov
mov
aad
or
iret
pusha
add
push
pop
mov
ret
mov
mov
jecxz
cmp
mov
pop
in
shl
hlt
test
push
mov
fmul
popa
outs
jmp
dec
jg
imul
mov
loopne
sahf
shr
mov
sbb
mov
sahf
test
test
in
ret
(bad)
stos
push
rol
jg
push
jecxz
xchg
mov
pusha
mov
ror
jmp
sbb
(bad)
push
outs
mov
mov
(bad)
mov
stos
add
push
sbb
in
dec
jge
mov
pushf
xchg
push
(bad)
loopne
mov
push
enter
dec
rcl
repnz
and
pop
sbb
mov
fdivr
imul
jecxz
mov
xchg
shr
test
movs
movs
pop
mov
mov
push
fsubr
fdiv
sub
aas
inc
fist
jae
push
pusha
mov
pushf
sub
rol
in
cmp
mov
rol
fwait
ret
mov
test
mov
pop
sbb
loope
jb
ret
les
retf
dec
sbb
pop
mov
mov
xchg
loop
leave
cmp
popf
das
imul
adc
xchg
xchg
push
xor
dec
or
rol
cmp
jnp
mov
leave
sbb
ret
mov
dec
mov
(bad)
(bad)
ret
or
sub
mov
and
mov
int3
add
cs
(bad)
push
cld
jecxz
pusha
ror
repz
mov
retfw
jb
pop
aad
inc
sbb
or
mov
pop
jl
xchg
pushf
out
jno
in
retf
and
stc
adc
sbb
aaa
popf
push
inc
(bad)
jo
adc
dec
test
pop
mov
and
add
fist
add
push
pusha
adc
push
add
(bad)
mov
pop
(bad)
xchg
sbb
mov
xchg
push
(bad)
shl
cmp
inc
ins
xchg
rol
jge
add
popf
ins
xchg
movs
vmovaps
adc
cmp
fisub
loopne
or
scas
push
shr
aam
add
outs
or
mov
test
movs
xchg
sub
jge
jmp
je
mov
mov
add
xchg
loopne
mov
adc
adc
xchg
xchg
aaa
add
dec
hlt
into
loop
xor
adc
mov
ss
xchg
(bad)
xchg
push
sub
xchg
or
xor
movs
mov
sbb
call
sub
loopne
adc
and
pop
push
loopne
ret
mov
xor
pop
push
int3
inc
mov
dec
sub
mov
js
sbb
xchg
pushf
push
in
lock
push
iret
jle
mov
xchg
test
pop
stos
mov
push
push
in
dec
rol
pop
in
(bad)
adc
sbb
pop
out
jp
push
xchg
test
inc
ret
ds
das
jmp
aaa
xor
xchg
lods
or
in
add
loopne
loop
sti
test
mov
in
push
popa
mov
rol
(bad)
sbb
mov
xchg
aaa
xchg
mov
pushf
jbe
stos
(bad)
je
movs
mov
mov
stos
or
mov
cwde
sbb
pusha
cmp
push
rol
call
stc
ja
mov
jecxz
inc
fisttp
and
cmp
test
lods
hlt
push
retf
and
and
shl
lahf
into
rol
ss
aaa
xor
popf
cmc
enter
sbb
imul
icebp
inc
shl
inc
rcl
sbb
arpl
jg
dec
sbb
js
(bad)
push
jg
jmp
adc
xchg
and
js
mov
je
sbb
dec
adc
das
and
lock
xchg
rcr
out
inc
xchg
test
push
nop
ret
sub
adc
test
in
xchg
fiadd
xchg
and
js
ret
jge
or
sub
iret
mov
mov
push
push
scas
xchg
mov
out
xchg
push
mov
movs
movs
push
test
lea
pushf
adc
loopne
jo
aaa
ret
jecxz
inc
ja
jge
bound
std
lods
mov
adc
add
dec
adc
int3
je
pop
dec
push
cdq
adc
sbb
xor
test
ss
pop
push
push
and
int
test
xor
xor
jge
pop
mov
dec
sahf
jle
sub
jns
fidiv
add
jg
call
mov
loop
sbb
xor
push
ins
mov
or
mov
enter
int3
sub
lock
pop
call
retf
mov
test
xor
in
rol
(bad)
int3
sub
dec
stc
add
dec
(bad)
cmp
mov
dec
gs
add
aad
xlat
or
push
xlat
adc
enter
sbb
push
les
dec
outs
les
push
pop
fisubr
xchg
lods
mov
add
xlat
adc
dec
dec
sbb
cmp
sbb
mov
add
xor
pop
add
sub
xchg
rol
ror
popa
je
pop
mov
lds
test
mov
sbb
xchg
lock
inc
sub
sbb
(bad)
mov
mov
popa
inc
inc
pop
addr16
ret
pusha
jns
or
sahf
ret
xchg
jno
adc
pushf
aam
push
popa
inc
mov
inc
(bad)
sbb
test
mov
sub
push
xchg
mov
dec
mov
popa
scas
stos
push
mov
lods
mov
jp
sub
ins
icebp
jno
idiv
popf
js
outs
(bad)
pop
xor
cld
lahf
dec
popa
or
outs
inc
mov
adc
fdivr
adc
cmp
jo
jns
or
test
(bad)
pop
xchg
pop
push
push
shr
mov
shl
test
(bad)
cmps
push
mov
mov
test
inc
mov
mov
push
or
shr
jbe
sub
(bad)
dec
push
aam
repnz
lds
mov
or
sbb
arpl
data16
xchg
repnz
and
fldenv
imul
(bad)
push
lods
popa
in
adc
test
push
(bad)
adc
loopne
mov
imul
adc
pop
pushf
fcomp
or
sub
int3
pop
push
movs
fsub
arpl
movs
or
enter
enter
mov
mov
std
mov
dec
pop
dec
les
push
les
mov
mov
aam
mov
popa
scas
ins
mov
sar
push
or
push
sbb
out
xor
mov
jle
(bad)
loopne
repz
push
pop
mov
dec
sbb
cmp
mov
stos
and
imul
mov
pop
xchg
xor
jp
lahf
div
pusha
test
movs
pop
hlt
test
jge
(bad)
mov
fsub
xchg
lahf
cdq
(bad)
dec
xchg
pop
sbb
das
in
xchg
xlat
sub
into
retf
xchg
call
les
sub
mov
ds
and
jno
jb
mov
aad
sub
xchg
retf
mov
lea
popf
addr16
push
es
mov
loopne
leave
pop
loopne
add
int3
test
lds
xlat
lahf
sbb
push
adc
imul
xchg
pop
sahf
pop
jb
dec
scas
(bad)
pop
mov
pop
inc
(bad)
dec
hlt
sub
pusha
ins
inc
jno
push
ficomp
mov
push
(bad)
cmc
inc
push
mov
dec
icebp
ins
dec
aam
inc
jecxz
or
jb
ja
hlt
test
mov
inc
cld
stos
repz
outs
fbld
xchg
mov
push
mov
loopne
in
add
fucomip
pusha
mov
lahf
adc
inc
aam
lahf
call
dec
xor
into
shr
xor
mov
adc
dec
add
sbb
xchg
test
mov
push
movs
shl
xor
rol
inc
mov
jo
jns
adc
xchg
lahf
mov
add
push
fld
pusha
lods
mov
cmp
dec
xchg
stc
icebp
mov
lahf
call
add
loopne
call
js
shl
and
pop
movs
out
fsub
shl
popf
(bad)
scas
outs
imul
xchg
hlt
fisttp
movs
push
jae
xor
(bad)
out
or
aaa
loopne
add
xor
mov
pop
xchg
rcl
stos
xor
in
(bad)
popf
push
clc
test
movs
inc
je
hlt
mov
cmp
mov
dec
fadd
int
(bad)
mov
push
call
aam
sub
xor
and
movs
pop
ss
sub
mov
lods
cmps
jo
cdq
sub
cwde
cmp
pop
mov
(bad)
jo
cdq
and
imul
pop
(bad)
xchg
call
xor
pop
lahf
xchg
loopne
pop
movs
or
clc
outs
mov
int
pushw
lock
jbe
cmp
in
xlat
dec
xchg
or
mov
aaa
jle
pop
jae
pop
push
mov
cmps
inc
lds
adc
adc
imul
push
scas
jle
or
clc
in
mov
xchg
xor
cmps
imul
xchg
dec
cmps
jle
js
or
mov
int3
pop
stos
xchg
jae
dec
jb
inc
mov
mov
mov
mov
lock
aam
mov
dec
pop
test
add
xor
or
repz
push
js
adc
test
icebp
movs
add
stc
(bad)
leave
mov
sar
lahf
push
xchg
mov
inc
pop
push
ja
scas
enter
jg
sbb
mov
aad
add
cmp
mov
xor
sahf
xor
xchg
loopne
mov
mov
rol
inc
jg
cmp
push
clc
nop
add
or
(bad)
jp
cmp
jns
pop
and
pop
pushf
sbb
sahf
mov
adc
(bad)
jns
dec
hlt
fldenv
test
loopne
sub
jmp
jns
mov
xchg
imul
outs
inc
iret
adc
retf
adc
or
ror
test
add
test
inc
stc
or
jecxz
adc
lds
int3
nop
and
push
test
aaa
inc
inc
shl
mov
adc
xchg
xor
ins
mov
fld
xchg
jecxz
les
fistp
ficom
dec
(bad)
xchg
enter
icebp
fimul
jecxz
test
dec
or
push
jmp
sub
jmp
add
or
jecxz
(bad)
ja
shl
scas
pop
add
or
dec
jno
jge
pusha
call
(bad)
(bad)
fmul
mov
jge
jecxz
pop
pushf
(bad)
sbb
ror
fsub
cmc
nop
xchg
dec
aaa
add
lea
or
shr
mov
jno
mov
push
jge
popa
or
and
in
int3
ret
(bad)
sub
clc
dec
dec
mov
movs
shr
dec
xchg
out
icebp
sahf
push
jne
aaa
push
das
mov
pop
int3
inc
call
xchg
dec
retf
int
addr16
adc
inc
shr
cmp
out
xchg
push
xchg
sti
add
gs
xchg
aam
xchg
fcom
jmp
mov
push
adc
lahf
sub
leave
push
popa
scas
js
mov
mov
cdq
mov
or
fstp
test
nop
xchg
das
lock
pusha
xchg
add
jp
add
cmp
adc
dec
gs
int3
movs
lea
dec
enter
pop
and
imul
js
pop
push
jge
lods
cdq
loope
fwait
jbe
pushf
enter
jge
popf
fwait
mov
or
inc
imul
retf
int
adc
sbb
jmp
fldcw
pop
inc
cld
rcr
and
in
or
fisttp
xor
jge
popf
push
retf
pop
push
add
pop
adc
fstp
add
shl
test
dec
sbb
test
xlat
rcr
jmp
adc
xchg
mov
and
push
push
mov
sbb
and
out
mov
adc
leave
mov
inc
cli
fdivr
sbb
(bad)
cdq
loope
(bad)
cmp
cdq
pushf
fadd
xor
test
mov
mov
jmp
inc
or
add
mov
adc
popf
adc
push
lods
movs
xchg
add
(bad)
sahf
mov
test
add
leave
mov
sbb
(bad)
retf
mov
pushf
fs
lods
test
into
aam
jge
pop
mov
sub
fbld
jecxz
add
add
mov
popa
shl
mov
add
inc
fcom
pop
push
(bad)
adc
scas
cdq
fsub
mov
pop
outs
xchg
outs
push
test
and
jmp
outs
int
fadd
pop
iret
and
and
xchg
mov
loop
scas
jmp
jecxz
jecxz
xchg
(bad)
dec
int
push
sub
mov
xchg
mov
out
or
(bad)
and
loopne
in
inc
jp
lahf
lods
inc
in
jnp
mov
pop
cwde
or
cmp
push
add
call
push
pop
(bad)
call
stos
pop
push
js
jns
push
push
jnp
add
call
jnp
add
mov
cmp
aas
sahf
cmp
retf
sbb
retf
mov
test
xor
and
and
pop
mov
mov
jp
outs
xor
jns
cdq
adc
xchg
push
mov
sub
xchg
(bad)
in
xchg
jmp
pusha
mov
mov
adc
push
jo
push
movs
fsubr
mov
mov
push
repnz
or
dec
fldenv
cmp
mov
dec
int3
dec
clc
push
pop
inc
js
mov
data16
mov
sub
push
or
pop
dec
push
and
adc
bound
xor
cmp
dec
mov
mov
rcr
pop
mov
dec
or
dec
jmp
inc
jl
sbb
sub
push
and
pusha
xchg
xchg
push
add
movs
movs
mov
mov
xlat
xlat
(bad)
fidiv
cdq
inc
jb
cmp
pop
retf
js
jmp
mov
popf
jl
dec
(bad)
daa
mov
lahf
sub
add
xlat
pop
add
push
sub
push
movs
(bad)
aas
mov
mov
std
xchg
ins
scas
adc
pusha
popa
push
and
enter
xchg
(bad)
pop
retf
push
mov
add
mov
repnz
test
pop
xchg
cdq
sbb
imul
call
fwait
psrad
nop
xor
sub
out
and
xor
popf
inc
rol
test
jbe
push
fld
loop
mov
mov
sbb
call
push
inc
pop
xchg
stos
in
mov
hlt
jns
es
iret
jge
jge
daa
mov
xchg
mov
jb
jmp
in
push
sbb
xchg
test
sbb
loope
test
(bad)
push
pop
adc
dec
jno
or
pop
inc
jl
in
mov
jmp
sub
imul
ins
add
dec
sub
fs
push
and
cs
jbe
xlat
xor
cmc
mov
sub
or
cs
ja
or
mov
adc
outs
inc
mov
xchg
inc
bound
in
push
mov
std
mov
and
popa
clc
push
arpl
(bad)
imul
mov
ret
js
aad
jns
scas
xchg
mov
das
jmp
cdq
mov
hlt
inc
lahf
jg
frstor
div
out
fnstsw
aad
mov
out
hlt
mov
mov
adc
jmp
not
lods
push
std
xchg
add
sahf
add
adc
(bad)
dec
out
xchg
push
jmp
ficom
xchg
xlat
jle
imul
rcr
push
mov
movs
(bad)
sahf
imul
sahf
pop
fsubp
jbe
es
jl
pop
and
gs
push
mov
popa
aas
fld
sub
in
sbb
xor
rol
jge
repz
and
fdivr
xor
fwait
cdq
or
cmps
out
mov
pop
daa
out
dec
pop
adc
push
sbb
cmps
aam
repz
sub
ror
(bad)
sbb
cmps
std
mov
xchg
das
enter
xchg
push
xchg
mov
push
push
push
mov
or
cmp
xchg
or
mov
mov
rcl
add
in
data16
adc
pop
add
mov
xchg
or
mov
sub
jae
xchg
pusha
cmps
aas
out
inc
mov
push
xchg
pop
out
cdq
mov
pop
xchg
mov
cmps
nop
xchg
mov
cmps
sbb
mov
cmps
adc
in
sbb
xchg
lods
or
test
lock
xchg
sahf
xor
mov
aam
out
mov
mov
mov
aad
pusha
add
pop
out
xor
call
cdq
mov
jbe
xchg
movs
dec
loopne
(bad)
mov
xchg
xor
test
dec
pusha
test
outs
arpl
jne
ja
shl
mov
aad
ror
mov
mov
push
sbb
add
sbb
inc
inc
xchg
xchg
pushf
push
xchg
rcl
popa
mov
mov
adc
rcr
jnp
dec
leave
cli
mov
mov
mov
lock
(bad)
jge
icebp
mov
cmc
mov
inc
and
add
stos
mov
adc
adc
paddb
fcom
mov
mov
pusha
(bad)
hlt
push
cmps
(bad)
(bad)
lahf
fwait
push
xchg
mov
int3
mov
push
jae
mov
xchg
mov
int3
mov
(bad)
push
cmps
push
adc
mov
aad
jmp
mov
lds
(bad)
out
pushf
js
(bad)
(bad)
xchg
aas
mov
mov
aam
cmps
aad
add
xchg
pushf
cmps
adc
dec
mov
or
enter
loopne
xchg
mov
and
lahf
pop
push
or
jg
inc
outs
pop
xchg
xor
and
mov
bound
adc
add
outs
mov
xchg
xchg
test
mov
shl
dec
dec
iret
mov
imul
(bad)
xor
xchg
inc
xor
add
ror
int
and
xchg
retf
int3
mov
sbb
rcr
(bad)
outs
int
inc
or
dec
jge
xchg
mov
mov
xchg
ins
xor
inc
sbb
mov
arpl
mov
ins
and
idiv
dec
in
xchg
(bad)
xchg
ret
cs
sbb
stos
rcr
test
(bad)
out
call
cmp
adc
mov
(bad)
into
mov
inc
mov
(bad)
mov
and
aaa
pop
jns
fidiv
sub
mov
fsubr
push
pop
and
mov
pop
movs
nop
cdq
mov
sbb
int
sbb
sub
dec
mov
mov
cmps
xor
daa
sub
es
adc
ja
sbb
mov
ret
xor
mov
call
adc
nop
cmps
sub
jbe
scas
cmp
xchg
sbb
scas
sub
mov
loope
push
stos
rcr
loope
push
sti
je
inc
pop
jnp
and
ins
xor
aad
push
mov
xor
ret
leave
dec
lahf
loopne
mov
fcom
lock
dec
mov
inc
or
outs
push
mov
mov
sub
movs
and
scas
jl
loopne
mov
shl
pop
add
push
fcom
inc
cdq
or
(bad)
xchg
sub
dec
out
mov
call
outs
in
add
mov
enter
leave
je
scas
scas
fnstsw
test
and
push
xor
aaa
xchg
xchg
scas
cli
pop
mov
jno
popf
and
and
adc
(bad)
push
jb
push
pop
push
xor
inc
push
imul
(bad)
xchg
neg
gs
cmps
nop
les
test
scas
push
cdq
dec
cmp
mov
mov
mov
ds
pusha
push
push
rcl
and
loopne
not
xchg
pop
aam
in
nop
cmp
push
xor
push
push
inc
test
pop
xchg
jnp
hlt
lock
cmc
mov
cli
mov
mov
xchg
mov
cld
xor
pop
adc
outs
push
test
fs
xor
push
scas
inc
or
lahf
leave
dec
in
adc
ja
push
in
sub
jle
inc
adc
in
cmp
push
je
mov
shr
inc
mov
iret
mov
test
mov
ins
shr
mov
ficom
and
sbb
adc
shl
mov
adc
add
retf
shr
mov
pop
enter
adc
and
idiv
in
sbb
fldcw
mov
mov
mov
jecxz
iret
inc
xchg
adc
leave
gs
stos
jg
mov
push
stos
jg
or
add
mov
(bad)
mov
add
(bad)
mov
aad
(bad)
lahf
imul
inc
inc
int3
mov
lahf
xchg
xchg
jg
cmp
mov
fwait
or
push
fsub
loop
fnstcw
sbb
test
inc
(bad)
in
xlat
(bad)
xchg
adc
cmp
xchg
push
hlt
(bad)
cs
push
adc
mov
mov
cmp
xchg
daa
and
xchg
(bad)
pop
mov
or
adc
dec
into
(bad)
jmp
enter
jl
das
dec
pop
adc
inc
dec
push
rcl
push
add
repnz
jns
addr16
outs
mov
xlat
mov
dec
test
(bad)
push
cmps
jecxz
(bad)
mov
lods
mov
add
mov
and
(bad)
test
psllq
rcl
mov
push
cmps
add
xlat
jl
push
push
shl
fisttp
xchg
mov
(bad)
cmps
jge
repnz
std
jbe
adc
call
lds
mov
shl
les
sub
jge
inc
add
sub
test
xchg
xor
and
mov
push
mov
mov
aad
xor
shr
in
mov
ror
pop
push
adc
fistp
mov
push
sub
xchg
xor
pop
push
ret
add
pop
inc
sbb
push
inc
rcl
test
xchg
push
adc
cmp
fistp
ror
scas
dec
outs
push
jp
(bad)
lea
hlt
(bad)
repz
pop
shr
rol
sar
mov
and
arpl
(bad)
test
and
pop
les
test
xchg
adc
xor
clc
lods
in
es
cdq
enter
(bad)
or
or
aam
cmc
inc
adc
jns
push
add
sti
aam
mov
(bad)
add
test
inc
add
call
leave
mov
lock
icebp
repnz
jne
dec
ins
ins
movs
das
sahf
push
imul
xchg
shr
mov
cmp
adc
mov
push
addr16
in
das
dec
daa
adc
fiadd
neg
test
fs
fst
xchg
adc
rol
xchg
fwait
jge
sbb
push
sar
sbb
or
or
das
ds
xchg
shl
mov
hlt
mov
movs
rcr
stos
push
ja
shl
icebp
sahf
das
gs
mov
sbb
pop
pop
dec
mov
mov
xchg
pop
inc
ret
outs
inc
jg
sub
add
mov
(bad)
hlt
hlt
dec
ficomp
ret
call
gs
pop
(bad)
aam
push
je
xchg
push
es
jl
push
jge
div
fiadd
push
loopne
and
(bad)
mov
fwait
out
pushf
mov
adc
xchg
pop
and
jl
rcl
push
daa
retf
push
inc
movs
std
pop
icebp
dec
adc
sbb
cwde
call
adc
aaa
cmps
lds
xchg
icebp
xor
mov
xor
(bad)
adc
mov
aaa
mov
mov
jecxz
jo
rcl
jge
jae
add
xor
or
xor
add
jp
test
push
jo
push
sbb
fs
jno
xchg
jmp
aam
sbb
addr16
in
lds
sbb
mov
(bad)
aaa
lock
jg
call
aam
xor
sbb
xchg
push
sbb
push
popf
xchg
cmps
pop
pop
mov
retf
mov
and
mov
sub
retf
ret
mov
sbb
push
movs
cmps
cmps
(bad)
daa
pop
int3
push
push
xor
mov
enter
je
hlt
popf
mov
std
add
ss
jecxz
(bad)
pop
aas
lods
pushf
stos
sub
dec
pop
sbb
inc
stos
and
add
inc
mov
xor
sti
or
cli
iret
push
xor
mov
push
inc
shl
int3
and
sub
xchg
enter
retf
iret
fidivr
loopne
sub
ins
and
ss
push
neg
rcl
enter
push
rcr
(bad)
pushf
jb
mov
adc
fcom
imul
je
add
loope
sub
aad
shl
nop
movs
pop
mov
xor
inc
adc
or
jmp
adc
jb
gs
mov
mov
loopne
pop
shl
mov
mov
lds
in
pop
or
inc
imul
ins
shl
add
adc
rcl
cs
dec
ins
xchg
or
xchg
es
pop
fwait
jecxz
xchg
shl
xchg
xchg
xchg
mov
mov
mov
nop
call
mov
fadd
(bad)
mov
out
movs
ror
frstor
add
mov
enter
mov
and
icebp
lahf
sub
xor
jns
or
sub
enter
hlt
xchg
pop
mov
retf
mov
in
js
ins
das
or
aaa
push
or
loopne
mov
shl
pop
add
or
dec
pop
mov
pusha
mov
xchg
enter
imul
mov
mov
setns
fisttp
jno
lahf
in
pusha
jle
inc
or
jecxz
(bad)
push
cmp
mov
test
mov
test
mov
nop
test
inc
scas
retf
add
jae
bound
shl
(bad)
pop
xchg
xchg
leave
stos
jecxz
fld
enter
(bad)
xchg
push
loopne
je
add
push
mov
int
push
popf
arpl
inc
enter
(bad)
int
inc
sahf
test
fmul
dec
data16
xchg
xor
cld
enter
and
les
cmps
enter
pop
lea
xchg
cmp
mov
fnsave
test
in
xchg
stos
xchg
mov
fdiv
push
je
add
scas
(bad)
fiadd
ret
popa
mov
inc
js
fst
xchg
xor
mov
cmp
je
enter
jg
mov
into
sbb
iret
xlat
mov
enter
test
dec
and
xor
fisubr
push
inc
(bad)
retf
lds
(bad)
mov
into
push
rcl
fdivr
push
xchg
mov
lahf
xchg
sub
dec
mov
dec
xlat
cmps
jp
sub
and
js
shr
and
mov
mov
test
xor
ret
ins
and
enter
aam
xchg
sbb
popf
movs
jno
cmps
popf
and
xchg
nop
push
pop
test
jns
cmps
inc
fmul
addr16
xor
mov
ds
cmps
test
mov
test
retf
mov
imul
(bad)
pushf
xchg
add
cmps
sbb
add
js
cmps
mov
fwait
(bad)
int
fild
push
movups
jl
jbe
adc
xchg
cmp
pop
rcl
cmp
jmp
mov
popf
adc
in
add
hlt
xchg
xlat
or
xchg
mov
test
xchg
inc
xchg
sahf
into
sbb
inc
dec
mov
into
jmp
cwde
rcl
call
ins
ss
add
repnz
xchg
sbb
test
pop
sub
pop
xchg
fdiv
shl
cmp
xor
cmp
movs
and
enter
dec
xchg
sub
fcom
mov
retf
inc
sar
fistp
xor
loop
mov
jns
cmp
cld
jne
mov
in
cdq
ficom
movs
not
rcr
cli
add
sahf
enter
dec
nop
mov
test
dec
leave
stos
or
jecxz
sbb
cwde
inc
jmp
mov
push
popf
cdq
xchg
aas
fwait
xchg
rcr
clc
int3
pop
sar
mov
(bad)
jmp
mov
in
pop
outs
rcr
lds
test
movs
dec
or
push
xchg
ds
ror
mul
in
push
mov
cld
mov
sbb
pop
ds
(bad)
mov
fbld
ror
push
adc
or
inc
sub
sbb
fsubr
dec
lahf
ror
adc
int
ss
inc
loopne
mov
aaa
mov
xchg
inc
out
sar
mov
test
xchg
ds
dec
enter
ins
leave
push
(bad)
outs
dec
fs
add
push
and
mov
xor
mov
or
xchg
test
leave
or
xchg
pop
add
dec
retf
jo
push
xor
retf
(bad)
sahf
or
and
add
pop
fldcw
aam
and
mov
inc
lds
mov
movs
pop
sub
sub
imul
stos
test
call
inc
mov
(bad)
cs
sub
push
mov
dec
lahf
mov
ror
mov
sub
in
in
and
add
adc
jmp
xchg
fisub
push
inc
and
ret
ror
sbb
test
xchg
add
hlt
mov
push
dec
popa
(bad)
call
mov
mov
std
adc
add
adc
mov
pop
pop
repnz
test
push
xchg
punpcklwd
mov
test
mov
mov
inc
xchg
mov
xor
(bad)
pop
cmc
dec
pop
mov
push
cmp
in
xor
push
jge
enter
adc
xor
xchg
adc
sub
mov
data16
sub
mov
or
jp
push
dec
pop
mov
int
cmp
and
push
inc
mov
jecxz
shl
idiv
repnz
hlt
call
loop
into
pop
retf
cdq
pop
loopne
mov
pushf
not
push
jg
mov
jns
(bad)
mov
mov
cmps
shl
mov
cmps
ja
jl
dec
mov
mov
adc
and
mov
mov
xlat
addr16
jnp
adc
pop
mov
clc
mov
fucomip
fidiv
xor
dec
sub
add
mov
das
test
movs
dec
aam
pusha
int3
adc
sahf
dec
jecxz
cmc
push
add
lea
call
adc
fucomip
inc
out
push
cdq
cmp
fstp
fcomp
add
mov
or
(bad)
xchg
xor
xor
push
aam
jmp
(bad)
lods
xchg
mov
inc
jb
dec
xchg
test
(bad)
int3
push
ja
mov
ds
jmp
cmp
pop
hlt
cmp
in
shr
out
ds
xor
es
in
sub
inc
retf
jle
sahf
cmps
pop
(bad)
xor
mov
movs
mov
inc
inc
cmps
imul
mov
shr
(bad)
mov
(bad)
xchg
push
jmp
ja
call
out
mov
mov
push
push
repnz
mov
mov
imul
dec
sbb
dec
hlt
mov
mov
sbb
add
pop
push
inc
jae
sbb
in
sub
pop
stos
add
movs
push
nop
jecxz
loopne
mov
push
fnstcw
bswap
rcr
pop
sbb
vunpcklps
adc
neg
mov
movs
pushf
mov
js
push
mov
add
rcr
or
out
or
fdivr
repz
push
call
rcl
iret
cld
inc
outs
mov
call
push
jmp
jbe
inc
pusha
sar
int3
ds
xchg
rol
aaa
xchg
pop
push
mov
stos
hlt
jecxz
push
std
movs
mov
jb
pop
lahf
hlt
ret
inc
mov
fisubr
pop
in
sti
dec
js
hlt
push
shr
in
adc
inc
movs
xor
mov
mov
cwde
xor
mov
fadd
sub
imul
aam
sbb
jl
popa
std
jae
xchg
iret
sbb
adc
imul
(bad)
mov
push
div
mov
push
cmps
gs
pushf
add
pop
add
adc
xor
ins
pop
push
jmp
loop
cmp
and
mov
sbb
and
and
push
or
and
xchg
mov
xchg
jbe
mov
mov
rol
cmp
lds
sub
xchg
sbb
jns
(bad)
push
xchg
and
mov
adc
fiadd
sbb
jbe
pop
sbb
mov
mov
and
movs
fstp
jmp
mov
loopne
push
in
cmp
pop
ds
xchg
js
test
push
mov
jg
cmp
(bad)
xchg
push
xor
adc
xor
pop
cmps
ret
sbb
pushf
sbb
xchg
hlt
cs
mov
xor
dec
push
xchg
dec
jb
test
adc
(bad)
lds
mov
aas
pop
je
enter
aas
(bad)
push
loope
stc
push
dec
pushf
mov
movs
call
(bad)
not
addr16
(bad)
sub
dec
or
mov
pop
mov
sub
cmps
ret
add
sbb
mov
scas
push
sar
jmp
jnp
mov
loope
shr
jmp
mov
outs
xchg
and
aam
popf
mov
pop
lea
and
test
mov
ror
icebp
enter
test
and
in
push
shr
and
fdivrp
add
sub
mov
sub
and
xor
xchg
and
and
test
add
mov
mov
mov
test
mov
adc
jecxz
jb
seta
rcr
push
je
ds
pusha
loopne
or
jno
outs
out
mov
(bad)
cwde
sbb
mov
pop
clc
sahf
mov
mov
ss
xor
imul
jae
inc
leave
or
xor
(bad)
into
iret
mov
inc
leave
add
mov
inc
jns
mov
mov
pusha
push
repz
cwde
mov
mov
icebp
out
or
push
cli
out
mov
jnp
mov
test
lea
pop
add
rcl
imul
ins
dec
push
nop
sbb
fadd
xor
push
imul
cli
cmp
mov
push
in
loope
rol
push
pop
in
or
icebp
or
mov
mov
xchg
test
sbb
sar
bound
cmc
push
rcl
lods
push
out
lock
mov
inc
adc
in
xchg
fidivr
xchg
jo
(bad)
in
push
push
data16
add
pushf
fld
xchg
sbb
nop
in
inc
jge
push
ins
ror
neg
and
jp
jbe
popf
mov
lods
sbb
jge
imul
hlt
pushf
push
xchg
pop
lods
cmp
xchg
shl
imul
ret
in
sub
nop
push
jo
pop
xchg
loope
cmps
fisttp
sub
rcl
dec
rcl
repz
lods
jns
jmp
popf
jne
mov
std
xchg
jle
xor
xchg
mov
jge
outs
movs
jmp
xchg
ficomp
outs
lods
dec
mov
pop
pusha
fmul
inc
inc
fdivr
mov
outs
cdq
adc
loopne
int3
(bad)
mov
jb
push
dec
sahf
mov
push
shl
loope
leave
and
sub
mov
mov
movs
mov
in
out
push
ror
sub
test
retf
pop
sub
sbb
xchg
in
in
xchg
inc
pushf
not
pop
cmc
test
ret
mov
mov
repnz
nop
sub
xchg
mov
retf
inc
fstp
push
xchg
ret
pushf
cdq
in
push
retf
loop
jg
dec
cmp
dec
cmp
nop
movs
inc
in
cmp
retf
retf
cdq
scas
dec
stos
pop
or
ret
mov
jns
ds
add
xor
adc
sbb
add
and
mov
sbb
lods
and
out
add
nop
add
fs
add
sub
pop
rcl
fs
(bad)
enter
dec
loope
aam
pushf
call
cmp
lock
retf
pop
inc
imul
clc
add
mov
es
(bad)
test
repz
leave
popf
push
retf
arpl
fwait
sub
cs
inc
jne
push
aad
cs
mov
push
les
std
retf
pop
(bad)
nop
clc
outs
xchg
ds
into
and
clc
popf
lock
imul
sbb
push
ret
mov
ret
aas
xchg
test
xor
push
pop
and
cmp
push
movs
mov
jecxz
daa
es
cwde
movs
jnp
mov
test
dec
outs
clc
push
lahf
(bad)
xchg
push
das
mov
gs
lldt
xchg
xchg
and
pusha
mov
movs
lods
cmp
mov
xchg
(bad)
sar
(bad)
pop
pop
cmp
add
dec
movs
imul
adc
aam
and
shr
int
xchg
scas
(bad)
fwait
out
rol
ins
mov
(bad)
ss
leave
int3
jns
lods
jle
iret
add
jno
xor
add
js
add
xchg
inc
js
in
jge
std
clc
(bad)
sbb
push
fld
test
ins
cmp
mov
cmp
mov
sub
pop
jae
cs
and
outs
mov
sahf
je
jp
xchg
dec
neg
jg
jecxz
add
adc
cld
mov
jecxz
nop
mov
sbb
cmp
popa
nop
or
adc
mov
je
sbb
jbe
inc
dec
sub
jmp
pop
scas
mov
add
imul
pop
jmp
fsubr
push
or
cmp
pop
in
adc
cmp
sahf
rol
mov
aam
xchg
xchg
in
aas
ret
call
mov
mov
sbb
push
stos
pop
nop
mov
inc
aam
dec
or
fwait
push
add
(bad)
and
mov
sbb
sbb
mov
outs
push
je
rol
fwait
ret
and
mov
ds
push
call
mov
call
fnsave
mov
(bad)
mov
sub
pop
jecxz
add
pop
fdiv
push
and
sub
adc
mov
call
scas
mov
mov
lock
repnz
test
pop
push
retf
push
imul
sub
stos
lock
jl
(bad)
inc
mov
fistp
xchg
push
ds
rcl
test
inc
mov
cmc
mov
sbb
jle
(bad)
in
outs
pop
and
out
stc
mov
outs
mov
xor
loopne
xor
cmp
cdq
cmp
inc
inc
repnz
xchg
mov
cmp
push
sbb
jge
sub
in
lods
mov
fadd
sbb
xchg
enter
ret
imul
outs
dec
cmps
test
adc
aam
mov
mov
sbb
cmp
retf
mov
xchg
jp
sahf
nop
bound
sbb
rcr
xchg
retf
(bad)
fld
sub
aaa
fidiv
clc
into
lods
push
cdq
in
adc
xchg
stos
mov
jbe
mov
push
gs
sar
cmp
dec
cmps
sete
mov
stos
loopne
xor
push
pop
ins
xlat
mov
je
arpl
in
mov
(bad)
xchg
leave
int
test
icebp
jecxz
push
adc
mov
mov
loop
push
lods
jl
stos
mov
popf
imul
xchg
lods
outs
jecxz
adc
test
lahf
shr
pop
lahf
dec
xor
inc
jle
add
add
in
int3
or
sub
mov
add
and
xor
mov
jne
into
jne
mov
dec
nop
sub
div
and
fcmovbe
enter
mov
ret
in
jnp
mov
enter
test
adc
ficomp
cmp
and
fistp
scas
mov
mov
(bad)
je
enter
or
mov
lods
xor
imul
push
pushf
mov
jo
mov
pop
pop
inc
adc
mov
and
jl
adc
sbb
paddw
sbb
retf
mov
dec
(bad)
xchg
outs
ins
sbb
data16
inc
or
sti
mov
fld
pop
jbe
(bad)
shr
sub
fnsave
xor
inc
daa
cli
sub
push
push
lahf
inc
fisttp
mov
rcl
in
inc
in
scas
adc
loop
cmp
xchg
mov
xchg
jge
shl
mov
aaa
(bad)
xor
mov
sub
xor
xchg
mov
xchg
movs
jg
pusha
mov
pop
sbb
aam
iret
fst
js
add
mov
xor
xor
pop
xor
sbb
imul
xchg
repnz
lods
sbb
and
daa
int
push
push
push
adc
or
adc
push
sub
adc
inc
xor
popf
fadd
and
push
(bad)
pop
scas
cwde
mov
imul
pop
pushf
xor
shr
imul
and
adc
dec
push
mov
adc
xchg
arpl
call
adc
dec
mov
cmp
rol
ss
imul
shl
loope
lds
pop
jl
fidivr
cwde
(bad)
mov
xor
ror
add
xchg
aam
mov
xchg
loopne
les
push
adc
and
ror
aad
outs
xchg
aad
inc
jmp
mov
call
(bad)
pop
ins
add
pop
cdq
(bad)
mov
fwait
repz
push
xchg
sub
xchg
int
mov
sbb
test
jo
lods
lods
ins
fisubr
and
stos
mov
sbb
xchg
add
mov
retf
(bad)
outs
test
jle
mov
cmp
(bad)
dec
sbb
fidivr
rcl
adc
sar
mov
test
movs
sbb
loop
jle
pop
xchg
pusha
or
inc
dec
into
movs
and
sbb
int3
ficomp
mov
pop
out
add
xchg
mov
pop
or
ror
xchg
arpl
mov
or
jge
out
lea
push
test
mov
enter
mov
add
icebp
rol
fs
mov
push
xchg
cmp
and
dec
arpl
gs
cli
outs
push
add
ror
into
hlt
xchg
xlat
in
add
or
add
pusha
dec
aam
push
jecxz
jecxz
mov
sbb
imul
into
pushf
sub
popa
dec
pop
add
popf
push
les
xor
inc
or
test
mov
xchg
jns
sub
leave
mov
je
lds
addr16
sub
dec
out
xor
ins
js
jecxz
sbb
cmp
sub
scas
mov
sbb
loopne
scas
lahf
pushf
(bad)
dec
xchg
sbb
jne
cld
nop
adc
out
(bad)
mul
mov
movs
xor
mov
add
dec
push
xchg
mov
xchg
adc
mov
mov
adc
enter
bound
fldl2t
test
fdivrp
ret
fwait
adc
push
shl
inc
push
cdq
mov
stos
cmp
shr
cmps
stos
push
mov
imul
gs
(bad)
ror
push
pop
out
shr
stos
sbb
es
dec
adc
shl
(bad)
mov
aam
ror
jecxz
loop
repnz
scas
xchg
lahf
pushf
stos
cmc
cmp
fcom
mov
pop
adc
enter
xchg
lods
jmp
shl
mov
adc
mov
mov
pushf
(bad)
in
mov
lock
enter
xor
jge
stc
pushf
call
xchg
in
aad
xor
add
mov
push
inc
ds
pop
in
mov
(bad)
jae
push
sbb
push
xchg
test
jge
pop
sbb
jg
call
ffreep
jge
shr
imul
mov
adc
pusha
lahf
jbe
mov
cmps
mov
(bad)
fcmovnb
push
sbb
mov
adc
push
inc
xchg
xchg
jl
pop
mov
das
cmps
aam
int
pushf
cmp
daa
pop
cdq
add
mov
pop
les
sahf
mov
adc
add
xor
jg
pop
call
icebp
push
fmul
gs
and
jle
arpl
mov
add
shr
(bad)
or
idiv
int3
leave
or
(bad)
push
mov
add
movs
in
and
imul
xchg
adc
add
push
pushf
ret
sub
sub
push
inc
cs
and
mov
inc
inc
cmp
jge
add
lods
jne
lods
shr
(bad)
imul
pop
sahf
fiadd
mov
mov
mov
push
cmp
repnz
fwait
and
in
rol
sahf
enter
push
mov
retf
and
and
adc
jmp
test
fsubr
mov
mov
mov
xlat
pusha
push
add
ror
enter
lock
repnz
iret
add
scas
dec
into
or
dec
xlat
outs
push
dec
xchg
test
lock
imul
inc
imul
xchg
popf
jmp
in
mov
scas
xchg
nop
lods
(bad)
aam
test
(bad)
fmul
cmp
lods
xchg
push
gs
sbb
xor
jle
cmp
pop
xchg
(bad)
(bad)
std
add
adc
lods
xlat
lahf
xchg
xchg
icebp
out
fcomp
mov
scas
and
mov
lahf
mov
inc
outs
movs
pop
adc
pop
pusha
repz
xor
rol
in
push
(bad)
ror
add
scas
stos
in
mov
mov
adc
lods
sbb
mov
imul
push
xchg
hlt
add
ficom
(bad)
jge
test
push
mov
gs
out
hlt
mov
test
xchg
dec
sbb
dec
test
sub
mov
out
lods
adc
sub
je
jns
push
push
sbb
test
pop
xchg
mov
in
(bad)
ret
cmp
sbb
and
pop
dec
jnp
popa
retf
xor
rcl
adc
movs
inc
nop
mov
icebp
shl
mov
xor
ret
aam
or
pop
popa
scas
inc
shl
mov
call
aad
std
movs
mov
add
aas
mov
aam
mov
fs
inc
xchg
imul
addr16
mov
(bad)
xor
adc
push
into
mov
test
jmp
push
mov
jo
inc
fwait
and
push
imul
movs
fidivr
je
sbb
push
outs
pop
dec
fild
push
rcl
sar
add
fiadd
and
push
adc
xchg
daa
retf
and
movs
aam
call
xchg
push
mov
sbb
dec
fisttp
sub
pop
lea
ds
sbb
inc
dec
mov
inc
push
(bad)
shl
shr
js
lods
dec
test
sahf
js
push
pop
fst
pop
jne
pop
inc
leave
test
sbb
mov
dec
rcl
xchg
jbe
xor
and
push
rcl
jbe
xchg
jecxz
sbb
push
jne
pop
rcr
inc
add
call
fwait
xchg
sbb
clc
sub
and
stos
mov
aas
pop
test
rol
les
in
in
dec
jb
pushf
outs
test
inc
js
cld
push
jbe
pop
ds
ss
imul
ins
xor
cmp
cmps
xchg
aaa
outs
jmp
push
inc
movs
call
lds
xchg
aaa
(bad)
jns
push
dec
adc
dec
(bad)
dec
cmp
cmp
add
jbe
cmp
sbb
add
inc
fsubr
pop
sub
adc
and
daa
dec
shl
lds
xchg
push
arpl
push
loope
fnstsw
mov
std
fst
xchg
ret
popf
and
lahf
rcl
pop
int
outs
jp
add
mov
xchg
sub
inc
inc
mov
push
data16
ror
(bad)
pop
jge
loopne
enter
xchg
gs
cs
add
out
scas
add
(bad)
mov
jmp
daa
jecxz
or
popf
js
cmp
xchg
push
loop
and
test
xor
dec
add
pushf
pop
jl
movs
aam
xchg
out
call
outs
and
add
gs
push
ins
movs
mov
ret
in
iret
add
call
loop
and
adc
ret
xchg
jne
fcom
xchg
in
sub
jne
cmp
sbb
popf
sub
sbb
jl
add
movs
fcmovnb
lahf
movs
fwait
stos
pushf
das
ss
cli
cmc
xchg
and
xor
sahf
sbb
rol
pop
mov
jle
pushf
mov
aaa
add
mov
daa
cmp
mov
cdq
adc
repnz
retf
test
jmp
stos
jecxz
test
lods
sub
mov
mov
push
int
sub
fld
push
jnp
mov
fimul
int
xchg
pop
cmp
xchg
stc
mov
dec
call
(bad)
outs
idiv
pop
inc
mov
ret
(bad)
xor
or
(bad)
cmp
stc
mov
(bad)
scas
jg
jne
fnstsw
clc
test
rol
es
test
sub
sbb
xor
call
shl
jecxz
dec
in
scas
fcomi
pop
lds
test
test
push
jecxz
rcl
mov
ss
inc
lock
scas
inc
dec
jmp
loop
scas
lahf
sbb
adc
ret
pop
mov
mov
aaa
int
inc
in
pushf
imul
adc
add
inc
retf
es
cmp
sub
sub
rdtsc
loope
not
jg
push
xchg
test
and
mov
and
sub
add
std
sub
in
jge
aad
scas
sub
div
stos
test
jge
popa
in
add
test
cmps
jp
mov
mov
out
inc
inc
mov
shl
xor
mov
inc
xor
mov
(bad)
jb
test
pop
pushf
data16
lahf
cmp
(bad)
mov
shr
pop
imul
outs
mov
push
sbb
(bad)
cdq
shl
(bad)
xor
shl
(bad)
rol
mov
repnz
sub
push
add
or
psrad
sbb
or
mov
aad
adc
jp
push
jbe
xchg
gs
out
int
jge
sbb
lds
mov
(bad)
rol
mov
(bad)
mov
jmp
mov
jno
adc
dec
ins
cmp
mov
ss
(bad)
jmp
call
sahf
scas
retf
sbb
addr16
dec
(bad)
jge
(bad)
fidiv
push
fmul
inc
retf
xchg
(bad)
gs
dec
mov
xchg
test
repnz
xchg
xchg
dec
mov
dec
mov
pop
test
mov
sbb
mov
mov
repz
add
xor
push
ja
cwde
cmp
dec
ins
sbb
mov
and
add
xchg
jb
pusha
push
lods
dec
mov
mov
xchg
sub
rcl
xchg
fwait
arpl
jno
inc
push
mov
fsubr
je
lods
adc
sbb
sub
mov
div
lds
mov
mov
les
test
push
push
ret
(bad)
fsubp
push
adc
out
sahf
ins
adc
arpl
sub
test
cmp
(bad)
xchg
mov
add
ss
mov
or
push
ds
retf
mov
ins
movs
add
imul
push
call
and
xor
jg
pop
in
shl
or
fmulp
mov
jae
cmp
test
movs
dec
adc
retf
mov
ret
pop
test
xchg
test
iret
mov
xchg
xchg
hlt
cmp
push
fisubr
jmp
rcr
adc
fsub
xchg
test
loop
xchg
push
push
iret
nop
inc
xchg
xchg
(bad)
popf
cmp
leave
call
nop
and
xchg
arpl
add
mov
fstp
shl
addr16
jnp
adc
add
sbb
or
es
adc
movs
in
and
fldl2t
and
push
adc
cmp
xor
dec
cdq
(bad)
clc
fst
fwait
push
into
xchg
jae
fadd
adc
call
call
stc
add
(bad)
push
in
test
call
sbb
cmp
inc
mov
mov
rcl
(bad)
sbb
leave
loope
and
cmps
fld
pusha
sub
lea
fs
pop
push
cdq
ja
pusha
lahf
test
xchg
jge
push
push
sub
mov
cdq
popf
inc
adc
xchg
shr
lds
popf
adc
sar
lahf
popa
xchg
xchg
cld
call
pusha
push
adc
dec
mov
nop
mov
popf
xor
imul
(bad)
pop
jmp
xchg
jmp
hlt
test
xchg
rcr
adc
lea
rcl
(bad)
jmp
and
add
test
or
scas
enter
mov
cmp
xchg
call
sar
outs
(bad)
outs
mov
sar
adc
aad
inc
lahf
aad
sahf
pushf
add
hlt
inc
cmc
sbb
sbb
out
pop
je
cwde
mov
pushf
mov
adc
pop
xchg
loopne
mov
(bad)
shl
clc
std
cmps
or
xchg
xchg
jb
pop
xchg
cld
inc
push
add
sbb
pop
mov
cs
mov
fcom
pop
cmp
mov
lods
push
in
movs
mov
cmp
inc
and
shr
loopne
loope
daa
add
xchg
xchg
test
add
fisttp
mov
enter
mov
push
sub
pop
jmp
jl
pop
mov
call
push
mov
sar
dec
sbb
aam
rcr
mov
xor
test
lds
xchg
pop
or
pop
test
sti
mov
outs
lods
xchg
das
mov
adc
fnstsw
out
popf
cmp
mov
xchg
mov
and
pmuludq
rol
fist
stc
or
sbb
sbb
rol
pop
mov
add
loopne
ds
xchg
movs
cmp
imul
add
ret
inc
call
xor
jae
sub
(bad)
xchg
mov
jg
(bad)
out
call
push
jecxz
cmps
push
xchg
mov
sbb
jecxz
and
or
xchg
pop
rcl
push
sub
jmp
je
retf
inc
xlat
mov
cmc
fild
adc
mov
inc
int3
call
mov
jl
jg
mov
enter
aas
adc
push
inc
les
sbb
jno
push
addr16
call
stos
ficomp
and
mov
adc
test
mov
cwde
pushf
retf
mov
sub
dec
sbb
pusha
mov
mov
xchg
xor
retf
push
xlat
inc
xchg
test
sbb
cld
loope
and
ret
add
loope
mov
dec
mov
shl
and
aam
push
xchg
aaa
push
jno
fcom
lock
pop
sbb
leave
ss
xor
and
add
bound
scas
lods
push
mov
and
mov
jp
add
xchg
pop
mov
gs
or
movs
pop
xchg
ja
pusha
mov
xor
lea
push
imul
inc
cdq
sub
add
fsubr
or
mov
fdiv
in
data16
cmp
mov
xor
iret
push
clc
ficom
fdivrp
popa
push
cmp
or
sub
cmc
mov
hlt
adc
adc
mov
test
or
cmps
xchg
aam
adc
or
pop
pusha
or
push
or
mov
jg
mov
cmps
mov
call
push
or
int
and
fnsave
sar
mov
sub
or
inc
(bad)
jmp
hlt
fist
lock
mov
xor
xchg
mov
lods
jo
or
lahf
jge
jecxz
outs
int
or
daa
xor
scas
jnp
pop
add
mov
add
retf
adc
mov
int3
xchg
fcom
ss
fild
mov
and
imul
nop
enter
add
mov
(bad)
mov
mov
ss
mov
mov
xchg
dec
inc
pop
imul
leave
sbb
popf
jecxz
add
(bad)
mov
sub
aam
push
sbb
pop
out
loopne
rcl
or
shr
clc
cmp
ret
int3
xchg
loop
xor
xchg
ror
movs
xchg
fdiv
xchg
jecxz
sbb
ins
or
xor
mov
hlt
fadd
or
mov
mov
mov
test
sbb
add
jne
test
ret
mov
int3
mov
mov
shr
xchg
aaa
repnz
adc
pop
sub
or
js
cdq
sbb
pop
dec
mov
das
pop
lahf
out
add
cmp
push
data16
shl
inc
dec
push
out
movs
lods
mov
sbb
sbb
mov
inc
push
cmp
leave
xchg
cmp
(bad)
(bad)
sbb
loop
or
fadd
mov
pop
out
(bad)
push
jecxz
or
popa
ror
lahf
mov
retf
sbb
fisubr
jmp
cdq
jmp
sbb
dec
push
mov
or
mov
jecxz
ins
pop
imul
scas
cdq
push
jmp
adc
data16
xor
sbb
repnz
mov
les
das
(bad)
mov
cld
xchg
xchg
pushf
xor
sbb
fs
sti
xor
or
mov
sub
cmc
fidiv
jg
push
sub
mov
push
btr
test
fldenv
jg
mov
push
push
loopne
mov
scas
nop
push
dec
jle
mov
and
pop
les
ret
push
int
cs
outs
sbb
pop
pop
fwait
mov
push
cmc
retf
stos
cmps
pop
push
xor
ja
mov
(bad)
xor
push
push
inc
loopne
rcl
aaa
xor
xlat
scas
ror
jmp
ins
data16
mov
fisubr
in
test
push
pushf
fisubr
pop
popa
leave
rol
ret
pushf
mov
or
jo
popf
inc
repnz
test
fldcw
jmp
loopne
neg
sar
les
addr16
lock
xchg
jle
pop
icebp
jb
out
jl
call
lock
(bad)
test
push
(bad)
mov
leave
addr16
and
movs
and
xchg
es
push
stc
(bad)
test
xchg
rcr
sbb
push
jmp
inc
call
lock
lods
push
(bad)
inc
hlt
mov
inc
and
pop
mov
leave
lods
dec
leave
int
test
sbb
loope
test
mov
jno
jmp
movs
xor
push
jle
pop
jg
int
sub
rcr
xchg
je
xor
fisubr
xchg
rcl
and
test
or
repz
sub
(bad)
int
dec
xchg
fiadd
mov
jmp
adc
push
sub
lds
push
mul
mov
xor
js
xchg
xchg
cdq
jmp
push
ds
(bad)
xchg
daa
mov
mov
mov
xchg
xchg
ffree
xor
popf
ss
jg
imul
adc
icebp
int
hlt
pop
mov
jo
cld
in
(bad)
out
jecxz
pop
lds
mov
push
xchg
shr
sbb
loopne
(bad)
jecxz
or
(bad)
xchg
mov
movs
jecxz
pop
push
add
mov
adc
imul
adc
shr
mov
adc
jg
or
or
or
mov
(bad)
mov
xor
mov
fs
adc
push
pop
inc
pop
pushf
mov
xor
clc
xor
and
xlat
cdq
sub
loop
cmp
pushf
cli
jmp
clc
inc
mov
aaa
mov
mov
mov
inc
mov
dec
push
mov
ins
(bad)
in
(bad)
jle
mov
inc
mov
xor
shl
fdivrp
int3
mov
xor
popf
dec
jmp
scas
pop
add
jo
(bad)
pop
lahf
and
mov
dec
cmp
js
cdq
fiadd
(bad)
xchg
or
pop
mov
and
cmp
(bad)
lods
adc
in
mov
fisub
les
test
fdiv
mov
push
fcom
fisub
aas
add
inc
jns
push
test
pusha
mov
sbb
jo
fbld
inc
cmpxchg
add
nop
adc
nop
xlat
(bad)
xchg
in
pusha
xchg
or
jge
cmp
nop
not
mov
push
(bad)
repnz
repnz
mov
adc
cmps
sub
mov
inc
mov
js
adc
add
xchg
dec
lds
nop
jg
adc
or
test
push
inc
sahf
mov
cdq
les
mov
into
mov
fsubr
push
dec
push
sbb
inc
add
in
push
test
mov
and
xor
mov
mov
rcr
sahf
scas
jmp
dec
pop
nop
inc
cs
fst
shr
xor
shl
adc
mov
dec
fdivr
mov
popf
mov
jle
dec
jnp
imul
sahf
movs
jnp
mov
in
aas
cmps
mov
and
mov
imul
dec
daa
fisttp
xlat
sub
jecxz
rcl
hlt
loop
cdq
test
test
test
rcl
or
call
icebp
jno
aas
dec
enter
outs
pop
jge
test
and
dec
idiv
les
test
jbe
xchg
fdiv
pop
jmp
inc
into
xlat
popa
jo
sbb
push
xor
mov
imul
lahf
fstp
mov
jecxz
pop
lds
aam
push
and
lahf
xchg
jg
mov
aad
f2xm1
call
test
(bad)
out
mov
ins
or
adc
push
push
sub
std
popf
jecxz
cmps
jbe
ins
lock
or
aas
mov
jmp
imul
loopne
pop
test
imul
lods
add
xlat
pop
sbb
lods
push
cdq
ret
xchg
(bad)
rcl
rcr
pushf
xchg
(bad)
xchg
das
sub
stos
xchg
mov
xchg
movlps
mov
jb
aad
mov
push
retf
mov
sbb
mov
lahf
and
adc
mov
adc
ja
push
and
xchg
add
or
cmp
mov
pusha
and
push
(bad)
pop
dec
mov
mov
test
jb
aad
mov
push
jl
imul
out
push
in
getsec
test
icebp
mov
pop
mov
fild
rol
pop
jmp
mov
xor
imul
xchg
outs
inc
lahf
aam
shl
pop
dec
cmps
pushf
(bad)
push
mov
push
xchg
xchg
lahf
stc
aam
outs
lahf
clc
xchg
mov
loopne
xor
xor
pop
xchg
adc
xchg
xchg
mov
clc
mov
pushf
fcomp
sbb
loopne
xchg
pop
call
iret
push
sub
(bad)
das
out
je
sbb
pop
es
xchg
and
push
xchg
sbb
sbb
jp
rcr
ror
xchg
and
test
mov
and
xlat
call
hlt
test
mov
bound
enter
push
ret
fs
test
ret
pop
int
retf
adc
pop
pushw
dec
retf
xchg
xor
mov
or
pop
(bad)
cmc
xchg
sbb
call
xchg
pusha
mov
into
push
pop
mov
cdq
test
or
(bad)
mov
gs
out
fisttp
mov
cli
mov
scas
add
iret
nop
in
sbb
call
dec
mov
sbb
rol
sbb
mov
je
mov
lds
call
cmps
jmp
mov
in
jle
(bad)
push
movs
dec
adc
mov
and
xor
(bad)
push
xchg
in
push
dec
enter
xchg
int
pop
or
cmps
ffreep
out
push
cdq
sbb
sbb
scas
movs
rcl
jecxz
push
out
cmp
fist
popa
dec
dec
adc
outs
fmul
pushf
popf
iret
mov
test
aaa
out
sar
fadd
mov
mov
cmp
mov
sub
test
sub
std
or
mov
push
mov
push
clc
cmc
in
rcr
fiadd
les
addr16
xlat
sbb
jecxz
mov
push
rol
sahf
xchg
push
mov
popa
fistp
xor
shl
and
arpl
rol
iret
les
mov
xchg
lods
inc
jecxz
fstp
mov
lods
sub
test
and
aam
or
dec
pop
xor
mov
pusha
repz
(bad)
aad
pusha
test
mov
addr16
cmp
push
ret
ins
movs
sbb
mov
pop
xlat
lods
and
add
in
fidivr
(bad)
jae
aaa
push
addr16
jne
js
jg
scas
je
or
mov
lock
sub
mov
mov
jg
shl
rcl
loopne
xor
push
test
sbb
xor
sbb
rol
mov
or
pop
iret
inc
fild
(bad)
sbb
aam
call
mov
pop
dec
pop
or
push
mov
rol
lock
fistp
rcr
cli
ja
push
call
test
iret
push
cmp
jne
es
movs
pusha
seto
and
rol
jle
sbb
loopne
mov
jg
mov
fild
call
jg
mov
sbb
repnz
and
retf
aam
out
lods
fsubrp
loopne
fcos
xchg
clc
out
jle
mov
shr
js
sbb
fcmovb
sbb
out
lahf
and
and
jge
mov
inc
sbb
and
(bad)
nop
mov
xor
jp
push
or
movs
or
pop
mov
inc
add
and
mov
xchg
push
and
add
sub
ss
push
jno
pop
mov
push
repz
inc
stos
mov
mov
mov
add
xchg
sbb
fcmovu
add
adc
(bad)
out
aad
xchg
dec
shr
lahf
fidiv
shr
ffree
sti
sar
cmp
jno
in
sbb
xchg
sbb
lea
shl
fadd
add
movs
adc
test
shl
test
push
adc
into
jle
adc
fsubr
fs
xor
int3
jmp
pushf
das
cmps
cmp
xchg
add
mov
cmp
sub
xchg
sbb
int
mov
ret
mov
clc
pop
mov
add
enter
pop
push
repz
mov
push
in
out
xor
mov
cli
std
test
ins
xchg
es
and
cld
mov
lahf
mov
ret
adc
sbb
rcr
movs
pop
xchg
loope
daa
xchg
mov
pushf
and
test
fadd
test
in
xor
mov
sbb
test
push
mov
or
sub
add
jmp
jecxz
imul
mul
mov
jp
push
cmps
stos
shr
mov
or
dec
xchg
jge
dec
pop
int3
mov
movs
fimul
movs
(bad)
int3
call
adc
jmp
or
xchg
ror
jne
ja
mov
mov
ja
xchg
mov
bound
adc
pop
xchg
jecxz
enter
adc
gs
adc
pop
nop
ins
pop
add
test
pop
mov
jg
mov
sub
mov
into
and
call
xchg
sahf
xchg
push
jge
mov
sbb
movs
fst
mov
lods
xor
stos
adc
pop
cwde
bnd
fiadd
pop
mov
out
add
gs
inc
fnstcw
enter
jecxz
lods
popa
mov
adc
and
lahf
aam
push
into
fadd
jns
jbe
sbb
aam
dec
jl
jo
dec
xor
cmps
and
or
mov
pop
push
inc
lahf
mov
shl
push
xor
jp
popf
xchg
mov
out
or
sti
aam
sar
push
sub
retf
and
add
jo
and
test
pop
mov
inc
outs
hlt
popf
mov
xchg
jge
and
aad
push
in
enter
pop
imul
in
adc
nop
dec
mov
xchg
inc
jo
data16
jl
pop
jle
jmp
and
mov
fcom
sbb
(bad)
mov
add
(bad)
out
sbb
sub
popf
cld
pop
call
cs
jo
push
dec
retf
dec
pop
fstp
pop
(bad)
and
pushf
sub
push
fmulp
mov
mov
xchg
int3
push
out
enter
jle
dec
dec
rcr
enter
pop
xor
gs
call
int
mov
cmp
or
jg
mov
sbb
aam
jge
test
pushf
nop
aad
mov
mov
jns
aaa
xchg
shr
outs
jp
pop
fidivr
loopne
rcr
jo
rol
xchg
lods
add
ins
imul
xor
rcl
jnp
dec
nop
pushf
pushf
(bad)
pop
add
lock
test
jnp
xchg
lods
sti
in
(bad)
fninit
(bad)
loop
pushf
leave
inc
test
(bad)
pushf
test
mov
sbb
clc
out
out
xchg
rcl
pop
in
pop
xchg
ret
or
gs
mov
fwait
shr
popa
add
pop
popf
mov
mov
push
(bad)
je
repnz
pop
pushf
sub
sbb
sahf
and
xchg
aam
stos
gs
or
aam
adc
es
movs
mov
jge
test
and
push
lods
cs
fdiv
sbb
pop
xchg
jmp
inc
cmps
in
add
(bad)
shl
jge
xor
loopne
int3
outs
pop
or
popw
xor
out
sub
in
pop
xchg
pop
call
jne
mov
dec
mov
loopne
pop
in
xchg
mov
mov
mov
call
ss
pop
mov
mov
out
sbb
or
hlt
xchg
ret
sbb
ror
hlt
jns
es
xchg
sub
cdq
lahf
stos
pop
bound
test
sbb
push
mov
mov
xchg
pop
and
push
(bad)
push
in
mov
xchg
fisubr
fidivr
adc
jo
repz
mov
push
push
xchg
(bad)
mov
mov
arpl
retf
sub
pushf
cmp
pop
loope
imul
neg
loop
sbb
sbb
cdq
cmp
mov
mov
xchg
sbb
das
xchg
push
xchg
adc
push
fsubp
bound
iret
mov
pop
or
not
xchg
fidiv
mov
sub
(bad)
xchg
cmps
pop
and
mov
(bad)
popa
mov
ins
xchg
dec
lahf
cmp
sub
retf
es
into
fstp
pop
jge
repnz
mov
or
aaa
das
sub
pushf
or
aam
lock
mov
loopne
or
adc
ins
(bad)
aam
not
mov
shl
dec
add
mov
push
xchg
test
push
je
add
mov
mov
aam
mov
pop
mov
dec
cmp
pop
push
rcl
clc
pop
in
xchg
sub
lock
xchg
jge
punpcklwd
inc
push
jmp
jecxz
push
(bad)
in
sti
adc
sar
xor
pushf
fmul
xor
jno
cmps
mov
lods
add
push
inc
inc
sbb
rcl
(bad)
mov
pushf
xchg
sbb
mov
(bad)
out
and
setge
mov
fs
sahf
fiadd
cwde
mov
loop
mov
aam
call
ret
shl
sar
mov
dec
cmps
sbb
test
movs
pusha
jp
mov
mov
mov
es
xchg
sahf
push
cs
sub
test
rol
adc
ins
jle
xor
fstp
xchg
setne
sbb
jle
into
lods
push
sbb
aad
pusha
dec
loop
pop
mov
add
ret
mov
sbb
cmp
mov
xchg
pop
sahf
sbb
(bad)
xor
out
xchg
aas
icebp
or
pushf
shl
xchg
sbb
in
cmps
push
retf
test
lahf
inc
push
pop
mov
pop
retf
stc
fisubr
mov
out
or
xlat
pop
xchg
cs
cmps
rol
out
xor
add
xlat
test
mov
in
jecxz
(bad)
jl
mov
and
hlt
ds
xchg
lods
mov
jl
fld
sahf
pop
pop
inc
ss
jge
shl
test
lahf
ins
dec
or
ret
pop
mov
inc
inc
rol
outs
xchg
cmp
push
add
shl
retf
adc
xchg
rol
mov
imul
lds
rcl
inc
mov
das
jmp
jmp
inc
jns
data16
imul
push
les
dec
add
inc
push
sbb
out
push
sahf
mov
dec
dec
mov
push
push
es
scas
in
lods
ins
aaa
int3
or
dec
pop
cli
mov
sbb
nop
xlat
sahf
sbb
imul
pop
dec
ss
mov
push
mov
xchg
bound
mov
mov
cmp
adc
out
sbb
pop
xchg
pop
add
jae
pop
cmps
out
mov
(bad)
lahf
mov
lahf
iret
imul
ror
mov
mov
loope
fsub
sar
jecxz
test
addr16
nop
jmp
inc
(bad)
ins
sub
mov
rcl
jmp
pop
(bad)
push
sub
xor
sbb
dec
js
int3
xchg
ins
pusha
cdq
or
loopne
jg
push
push
push
in
xchg
not
xor
test
stc
mov
mov
xor
jle
pushf
pop
pop
mov
push
movs
fsub
jg
enter
int3
add
clc
xor
inc
test
sub
and
enter
pushf
inc
jmp
ja
and
or
leave
retf
push
imul
xor
hlt
xchg
add
xchg
sar
and
jl
or
loopne
hlt
push
adc
dec
mov
test
xchg
push
cmps
leave
pushf
inc
es
jmp
mov
mov
sbb
mov
ds
push
jbe
inc
jb
mov
jno
in
cmp
cmp
jge
sbb
mov
sar
in
sbb
xchg
sar
cld
sbb
popa
pushf
mov
or
enter
nop
frstor
mov
(bad)
ja
out
jmp
test
jmp
data16
lea
pushf
out
outs
test
ins
pushf
push
inc
jne
lods
dec
jmp
or
inc
xchg
jae
jge
xchg
xchg
pop
push
imul
dec
pop
xlat
inc
repz
cmp
fiadd
in
cmp
or
(bad)
div
adc
shl
mov
(bad)
rol
jb
mov
xchg
lods
pop
aaa
mov
aad
aad
div
mov
xor
leave
loopne
mov
mov
push
clc
adc
mov
ss
cwd
pusha
test
popa
fidivr
jecxz
xchg
fadd
jbe
push
cdq
cld
rcr
inc
(bad)
xlat
push
push
mov
pushf
lahf
sbb
fcomip
cmp
xor
or
rcr
xchg
gs
jns
scas
in
push
mov
(bad)
fidiv
push
retf
scas
(bad)
mov
out
rcl
fild
out
mov
int3
ret
cdq
test
mov
ja
adc
mov
xlat
clc
jnp
or
push
ror
mov
mov
inc
xchg
fwait
scas
(bad)
push
jecxz
mov
pop
fsubp
popf
sub
or
cmp
lahf
test
bound
or
repnz
mov
xchg
scas
sub
mov
movs
adc
popf
aas
adc
xchg
push
leave
ffree
add
push
out
xchg
scas
call
in
hlt
xchg
add
cmps
in
mov
imul
ins
xchg
adc
fistp
dec
int
adc
jmp
dec
(bad)
mov
inc
xchg
leave
or
pop
fld
add
mov
or
aaa
lds
sbb
sahf
sub
nop
jge
arpl
test
mov
mov
rcr
stos
inc
mov
and
inc
jge
or
sbb
xchg
cmp
add
mov
mov
xchg
scas
out
mov
sub
aas
cmp
cmp
cld
jecxz
shl
sbb
nop
and
ror
(bad)
arpl
cwde
mov
in
xor
xor
movs
jmp
fcom
lods
daa
mov
ds
shl
cmp
ja
rol
mov
push
push
mov
push
(bad)
ja
fimul
jge
or
das
mov
int
adc
retf
dec
mov
pop
push
adc
or
test
push
lea
cs
mov
gs
in
aad
arpl
push
shl
xlat
(bad)
call
xchg
xlat
cdq
sbb
inc
jge
mov
inc
fnstenv
pop
and
stc
(bad)
mov
dec
stos
and
cmps
pusha
shl
push
adc
cmp
popf
aaa
xor
popf
call
mov
pusha
and
into
aam
neg
jecxz
pop
mov
mov
push
and
nop
pop
(bad)
daa
inc
mov
popf
xor
or
jbe
push
adc
sti
sub
pop
repnz
fnop
and
sub
xor
popf
adc
rol
(bad)
loope
outs
repz
xchg
adc
add
push
adc
inc
jl
dec
out
pushf
popa
adc
mov
enter
int
arpl
mov
pop
xor
test
pop
adc
inc
repnz
sbb
in
(bad)
mov
ret
sub
mul
pop
or
les
inc
fild
inc
add
loope
imul
jne
fsubr
mov
push
jmp
jle
aam
inc
fldcw
pop
mov
call
jmp
test
xlat
add
inc
in
pop
pop
dec
and
popf
fnsave
jecxz
popa
mov
ds
mov
inc
hlt
add
jge
jbe
dec
aas
aaa
idiv
out
mov
int3
ds
cmp
lahf
cmps
into
dec
adc
enter
test
pushf
cmps
jmp
add
add
test
or
enter
and
or
dec
xchg
push
xchg
clc
ins
push
mov
mov
mov
fisubr
mov
jmp
mov
mov
movs
addps
sahf
jge
xchg
mov
jnp
sub
pushf
rcl
sbb
idiv
shl
ds
mov
mov
mov
mov
(bad)
mov
xchg
add
push
clc
test
nop
shl
sub
push
sbb
jl
inc
add
jmp
jmp
xchg
or
or
push
push
inc
mov
add
pop
fst
inc
sub
adc
ja
or
loopne
movs
imul
lea
pop
or
loop
pop
and
mov
push
ins
dec
fild
xchg
test
out
sub
cli
cmp
aam
sub
loop
mov
jg
add
dec
out
lds
daa
fwait
xchg
sbb
xchg
mov
sub
mov
mov
pop
(bad)
fist
test
movs
int
lahf
pop
fnstcw
in
pop
mov
mov
mov
add
jmp
ds
pushf
push
mov
xlat
xchg
rol
dec
push
mov
test
daa
(bad)
movs
lods
mov
(bad)
jo
loopne
lea
data16
movs
mov
mov
addr16
jbe
mov
out
fimul
xchg
es
jg
dec
pop
scas
mov
int3
mov
jmp
add
nop
push
js
stos
cld
xchg
push
add
jmp
inc
aam
and
dec
lea
movs
daa
sbb
lods
bound
loop
and
mov
(bad)
jl
xlat
or
xchg
mov
ffree
adc
lods
cwde
pop
ficomp
lods
nop
jecxz
addr16
jb
in
repz
mov
jg
pop
jecxz
add
jo
cdq
sbb
aam
leave
int
push
mov
std
dec
ss
dec
test
fadd
add
adc
fisub
lods
gs
mov
adc
jb
lock
(bad)
ret
jae
mov
imul
mov
retf
ret
push
sti
(bad)
pushf
nop
xchg
out
lods
fwait
push
retf
out
jecxz
mov
xchg
jge
sub
mov
test
(bad)
xor
xor
rcr
cmp
sub
fidivr
mov
pop
cdq
adc
mov
inc
cmp
ss
sahf
mov
sub
ss
test
loopne
fmul
push
cmp
ins
out
xchg
scas
rcr
mov
movs
sar
loopne
(bad)
pop
push
inc
lods
sbb
rol
xor
pop
or
fidiv
adc
cmps
push
movs
inc
pop
add
ret
fimul
sbb
mov
test
lods
mov
cmp
sar
or
add
push
pushf
(bad)
mov
(bad)
cmps
iret
mov
cli
repnz
pushf
fsubr
adc
dec
cmp
pop
ins
sbb
rcl
sbb
pusha
mov
(bad)
cmovge
sub
mov
aad
les
mov
mov
or
add
mov
clc
xchg
cmps
cmp
xchg
inc
jne
sub
fwait
and
sahf
add
loopne
xchg
and
pop
movs
dec
int3
mov
int
ficomp
sub
add
out
mov
or
in
ror
dec
sbb
add
jg
pop
jo
adc
dec
xchg
leave
data16
shl
xchg
xchg
shl
pop
arpl
mov
push
jge
pop
popa
enter
or
push
(bad)
xchg
inc
jmp
pop
out
dec
adc
jecxz
arpl
xchg
(bad)
mov
(bad)
mov
(bad)
lahf
and
scas
mov
or
ret
dec
mov
mov
addr16
js
gs
or
cmp
js
xchg
loop
mov
mov
std
call
adc
mov
fstp
jmp
push
loopne
neg
aaa
pop
pusha
in
aad
fist
xchg
(bad)
and
mov
inc
shr
pop
fnstcw
fwait
mov
mov
call
imul
jmp
ret
(bad)
and
mov
test
(bad)
inc
and
xlat
pushf
fsub
xchg
mov
test
adc
mov
(bad)
xor
xchg
les
lods
shl
mov
push
dec
sub
xchg
push
sbb
or
or
adc
daa
xor
jmpw
pop
lods
aaa
mov
shr
ficomp
in
neg
dec
mov
in
nop
cdq
daa
(bad)
movs
mov
stos
push
mov
bound
sbb
add
cmp
popf
push
push
adc
jg
add
arpl
pop
fsub
enter
xor
pusha
push
sub
aas
arpl
test
mov
lahf
and
ret
rcr
mov
bound
adc
push
call
xchg
loopne
retf
add
lds
in
aas
adc
mov
dec
(bad)
xchg
jle
and
jno
imul
loopne
int3
std
leave
mov
mov
mov
nop
sub
mov
pop
test
and
arpl
fist
lods
cmp
in
lahf
shl
loope
pop
mov
es
mov
in
mov
mov
repz
mov
mov
jmp
outs
and
lods
ret
jmp
add
pop
mov
xor
jbe
cwde
mov
rol
(bad)
ret
xchg
ins
add
outs
push
push
daa
xlat
test
ror
jp
cmps
sub
clc
jp
enter
add
frstor
test
in
adc
pop
jle
push
(bad)
movs
sub
add
xchg
inc
shl
pop
out
je
xchg
neg
mov
dec
(bad)
shr
sbb
movs
cmp
mov
jl
pop
ins
sbb
adc
and
je
dec
mov
(bad)
(bad)
pop
test
pusha
add
in
lds
xor
nop
mov
rcr
in
(bad)
and
adc
pushf
mov
adc
fmul
push
push
pop
mov
(bad)
pop
jmp
mov
xchg
push
ds
cmp
iret
adc
ja
fdivr
lds
pop
mov
jl
pop
cld
jmp
iret
fst
add
push
lods
push
or
fdivrp
pop
in
and
pusha
xchg
or
movs
push
sbb
outs
pop
pop
xor
ins
mov
test
dec
xchg
call
sub
pop
lods
test
bnd
inc
jnp
inc
popa
in
jl
cmps
scas
sub
lahf
add
mov
jae
mov
(bad)
xchg
push
loopne
lods
or
sar
adc
movs
mov
in
test
xchg
push
out
aad
push
jl
(bad)
jl
mov
and
xor
push
lds
mov
ror
das
movzx
or
sbb
call
push
add
mov
out
sub
movs
pusha
jo
push
mov
mov
push
(bad)
add
int3
add
(bad)
inc
mov
(bad)
pop
loope
ins
btr
test
fsub
inc
dec
mov
jnp
add
loop
in
fdivr
push
adc
inc
out
in
xchg
(bad)
or
loope
adc
xchg
cmps
sbb
pusha
push
(bad)
xlat
call
fcom
scas
sbb
aaa
pop
inc
hlt
and
sar
jns
(bad)
idiv
call
punpckhwd
(bad)
mov
(bad)
sahf
data16
mov
out
aas
cdq
xchg
jmp
dec
push
(bad)
aas
cmp
inc
loop
int3
(bad)
rcl
(bad)
xchg
(bad)
pop
push
inc
movs
jmp
shl
sti
pop
dec
adc
leave
movs
shl
iret
inc
pop
shr
adc
mov
das
xchg
test
inc
pop
push
sbb
push
jl
retf
ins
pushf
into
xor
loopne
ror
fild
ret
nop
sub
rol
mov
outs
fcmovnbe
xlat
jp
imul
es
adc
lea
int
jl
inc
cld
dec
fnstenv
sub
test
pop
xchg
std
js
jnp
mov
nop
ja
retf
adc
adc
push
lock
inc
pop
adc
mov
hlt
icebp
and
loop
adc
pop
xor
xor
add
pop
adc
or
add
pop
sahf
(bad)
lock
adc
hlt
jmp
fadd
(bad)
sbb
je
mov
scas
sub
daa
inc
sbb
fs
das
xchg
adc
cmp
loop
adc
jno
out
add
nop
aad
adc
ror
scas
(bad)
mov
inc
mov
call
xor
and
sbb
das
cmp
inc
adc
or
dec
and
sbb
ficomp
into
cwde
dec
jecxz
inc
test
mov
enter
pop
cmp
sbb
cdq
out
pop
xchg
push
lods
pusha
loope
jmp
fnstenv
es
and
std
imul
loopne
cmc
mov
jg
sbb
mov
xor
pop
sbb
push
mov
xor
pop
pop
xchg
movzx
pop
mov
fistp
mov
scas
add
rcl
test
mov
fucomi
mov
jecxz
ss
mov
push
movs
aam
adc
bound
out
addr16
fldenv
inc
jg
lock
xchg
lahf
fdivr
iret
mov
sahf
mov
sar
(bad)
mov
mov
into
(bad)
fmul
xor
sub
aam
or
jmp
in
frstor
xchg
xchg
cmp
mov
in
pushf
mov
arpl
gs
fwait
xchg
jno
sahf
hlt
mov
int3
arpl
xchg
or
cmp
sbb
adc
std
test
retf
mov
cs
das
or
lock
test
lods
rcl
dec
in
mov
fcom
ins
es
jmp
mov
inc
mov
outs
lock
ret
add
scas
xchg
nop
fidivr
xchg
mov
jb
mov
inc
psubusb
sbb
hlt
imul
fs
xor
push
imul
adc
jl
dec
cmps
in
lds
jnp
mov
cli
enter
mov
add
sti
es
fmul
and
fidivr
or
push
rcl
dec
push
sar
push
dec
shl
mov
cli
mov
(bad)
clc
dec
xchg
lock
(bad)
jae
popa
imul
jmp
inc
cwde
and
(bad)
imul
mov
push
xchg
mov
retf
loopne
mov
(bad)
icebp
jmp
(bad)
cmp
aam
in
adc
xor
fnsetpm(287
sbb
adc
mov
in
ficom
ins
xor
xchg
hlt
mov
test
adc
sub
sub
push
data16
imul
and
jmp
xchg
xchg
cli
adc
xchg
lahf
mov
xchg
hlt
shr
add
loop
push
inc
daa
es
sbb
pop
mov
xor
inc
in
push
in
jmp
imul
(bad)
mov
sbb
cld
mov
shl
dec
cli
outs
out
jbe
popa
pop
and
shl
adc
dec
pop
inc
enter
cdq
adc
inc
rol
push
adc
mov
or
call
imul
mov
xlat
sub
jge
jl
push
(bad)
call
push
out
or
out
sar
in
mov
lods
or
retf
int3
test
push
or
jl
xchg
cmp
push
movs
mov
mov
inc
jge
imul
dec
into
cdq
push
stos
push
or
cmp
mov
cdq
or
push
pop
push
jmp
sbb
jb
jmp
jg
ins
loopne
sub
lods
inc
adc
pop
movs
es
rcl
jmp
jecxz
sub
pop
adc
cdq
pushf
sub
mov
lods
inc
jecxz
mov
sub
repnz
jp
in
push
test
int3
jecxz
movs
(bad)
(bad)
das
sbb
lods
(bad)
push
ret
clc
mov
pop
call
sub
aad
test
adc
dec
xchg
punpckhwd
outs
outs
pop
push
add
es
cmp
pop
push
retf
and
fld
add
mov
loop
mov
push
dec
xor
jne
sub
xchg
mov
xchg
adc
mov
mov
push
out
mov
xchg
shl
mov
pop
cwde
repz
rcr
and
sahf
push
(bad)
mov
jecxz
wbinvd
rol
scas
mov
rcl
cmc
dec
stos
lods
data16
aaa
inc
jb
mov
cdq
(bad)
retf
jne
push
data16
pop
mov
dec
retf
cdq
sbb
push
cld
jbe
cdq
adc
test
mov
and
ret
(bad)
xchg
mov
push
div
mov
and
inc
push
push
xor
js
lods
push
mov
ins
sbb
sbb
imul
jmp
and
and
sbb
fstp
test
aam
or
cli
mov
fidiv
into
(bad)
jecxz
aad
push
jno
or
ins
pusha
pop
lds
ds
mov
cli
test
mov
leave
(bad)
jbe
idiv
inc
push
pop
xchg
xor
mov
push
in
lahf
jmp
xor
or
in
xor
loope
std
jle
clc
fild
dec
in
pop
jae
popf
arpl
pop
xor
jmp
aad
inc
pop
jo
and
jge
lods
int
xchg
xchg
es
jle
daa
test
pop
inc
les
out
mov
push
mov
cmps
xchg
loopne
xchg
lods
xor
mov
adc
(bad)
rcr
test
out
mov
mov
push
jb
frstor
pop
adc
test
repnz
(bad)
adc
test
add
adc
and
hlt
pushf
push
hlt
cdq
sbb
call
out
ffree
ds
and
cmp
movaps
popa
pusha
rcl
push
jmp
mov
in
mov
dec
scas
ins
pushf
or
leave
dec
push
sbb
mov
ror
bt
aad
xchg
sbb
or
fldcw
and
cmp
nop
imul
aam
sub
(bad)
mov
jmp
cmps
jmp
xchg
mov
test
outs
fcmovne
mov
push
mov
sbb
les
dec
test
or
jb
or
lahf
in
call
dec
ret
cs
mov
inc
pop
add
cmp
xchg
or
mov
lods
jmp
sbb
cmp
push
cmp
xchg
hlt
test
jo
pop
movs
jmp
jg
pusha
retf
retf
cmp
int3
sbb
add
push
(bad)
into
cmp
nop
test
jmp
movs
(bad)
ret
mov
push
or
mov
loop
jmp
xchg
mov
lds
xchg
mov
pop
sub
loopne
ds
or
xchg
shl
jge
sbb
fs
dec
jns
add
push
addr16
mov
int3
cmps
dec
push
sbb
lahf
or
mov
add
jg
and
enter
dec
lods
cmps
xor
sbb
mov
push
jmp
ret
aad
push
and
into
jmp
dec
inc
jbe
leave
xor
push
and
fidiv
mov
pop
mov
sub
loopne
adc
rcl
sbb
sbb
sbb
push
outs
xchg
or
inc
jb
dec
push
outs
adc
mov
jbe
lods
(bad)
lds
ins
lods
inc
aad
or
xor
jb
cdq
in
xchg
jg
test
imul
jo
cmp
dec
fidivr
xchg
cdq
test
dec
adc
retf
jmp
jle
jg
loopne
jo
(bad)
outs
push
lea
aaa
fisubr
mov
sub
sbb
sbb
cmp
jecxz
xor
push
repz
ins
movs
and
jle
dec
dec
push
fst
pop
sbb
(bad)
iret
ja
lods
pop
inc
mov
adc
ficomp
fldln2
adc
mov
push
cmp
pop
jns
cdq
shl
or
pop
test
stos
movs
outs
mov
movs
mov
nop
xchg
sub
loopne
fisttp
arpl
sub
pushf
sub
rcr
push
push
jo
mov
rol
fs
mov
jbe
pop
int
xchg
push
sub
cli
sbb
popf
sbb
cwde
push
in
jl
push
cmps
adc
mov
pop
outs
sbb
(bad)
(bad)
xor
push
mov
adc
fwait
xor
xchg
jge
push
xchg
mov
dec
sub
in
jl
sbb
gs
dec
jb
sar
xchg
mov
mov
xchg
xor
pop
in
inc
mov
cmp
into
jge
mov
sahf
cwde
pop
jmp
jecxz
psadbw
mov
in
cmps
adc
sar
adc
loopne
dec
jp
rcl
pop
stos
cmps
pusha
aam
std
xor
fstp
cmp
sti
xchg
mov
js
xchg
fldcw
js
test
dec
imul
mov
adc
push
jmp
or
xchg
leave
mov
mov
adc
mov
pop
xchg
fbld
jmp
add
pop
pop
rcr
or
add
inc
or
sahf
rcl
xchg
mov
lahf
ins
xchg
ins
call
xchg
fadd
and
push
lods
dec
ror
dec
nop
js
retf
(bad)
sbb
iret
cmp
push
or
sbb
inc
repnz
jecxz
cs
inc
aad
(bad)
mov
nop
fcomip
cmp
aam
lods
not
mov
lds
xchg
test
pop
enter
inc
es
xchg
fcomip
xor
nop
add
ss
mov
mov
cld
js
dec
fld
sbb
pushf
and
test
aam
gs
adc
or
push
jo
test
aam
in
mov
(bad)
je
lea
push
sub
imul
pop
dec
movs
xor
inc
(bad)
iret
push
sbb
or
push
xchg
into
imul
and
leave
xchg
gs
push
mov
sbb
jmp
mov
xchg
lahf
sbb
(bad)
pandn
jg
push
mov
cwde
(bad)
mov
xor
or
jmp
and
jb
pop
int3
mov
ss
cmp
gs
pop
ror
sbb
ins
cmps
imul
dec
pop
dec
shr
cmps
mov
data16
jge
xor
adc
arpl
add
jl
(bad)
shr
fsubr
fild
pop
(bad)
cmps
pushf
lods
lods
xor
test
sbb
fistp
jge
mov
popa
jnp
cmp
test
jno
(bad)
aad
xor
fild
mov
(bad)
out
jl
jae
loopne
sbb
lock
rol
mov
(bad)
lahf
mov
adc
aad
dec
sub
mov
add
dec
aaa
pop
(bad)
std
jle
shl
in
nop
pop
inc
(bad)
(bad)
or
sti
or
lods
(bad)
jecxz
stc
std
call
and
repnz
test
scas
xchg
add
xor
pop
out
pop
mov
sbb
test
inc
(bad)
jp
and
dec
push
fldcw
mov
inc
adc
adc
push
push
adc
add
mov
mov
xor
push
fistp
or
mov
mov
inc
push
push
lahf
adc
xchg
int3
imul
mov
(bad)
xlat
lods
pop
pop
cmp
xchg
test
ds
sub
icebp
pop
in
sub
fist
push
jmp
add
push
add
cmp
push
add
outs
fidiv
xor
or
sar
test
ss
mov
(bad)
mov
inc
mov
fcmovb
xor
adc
test
enterw
call
or
inc
js
repz
xor
rol
clc
push
ins
imul
add
popa
data16
aam
mov
jl
loopne
mov
test
sbb
mov
jmp
dec
mov
mov
sub
mov
imul
jle
dec
or
lods
(bad)
repnz
mov
ret
jecxz
xchg
movs
loopne
aad
clc
sbb
pop
mov
loopne
mov
jnp
mov
loopne
mov
mov
sbb
pushf
loopne
out
ror
stos
pop
or
fcomp
sub
clc
(bad)
repnz
scas
enter
cmp
dec
mov
stos
pop
adc
stos
stos
mov
sbb
sahf
mov
shr
mov
xchg
push
sbb
pop
adc
dec
inc
lods
and
(bad)
in
test
in
fdivr
retf
sub
hlt
jmp
ins
xchg
cmp
add
dec
add
sbb
test
fisubr
mov
xlat
sar
mov
cmp
pop
in
cld
and
xor
aaa
or
sub
inc
iret
mov
and
iret
lods
xchg
cmp
jle
je
xor
rol
jbe
add
sbb
xchg
inc
xchg
into
sub
jae
cdq
leave
add
je
sbb
(bad)
imul
jmp
cld
add
test
or
(bad)
adc
pop
fidivr
mov
rcl
and
mov
mov
xor
scas
mov
mov
jo
mov
rcl
cmps
mov
ret
sbb
xchg
fiadd
pop
mov
and
sub
inc
jecxz
mov
in
xchg
xchg
push
out
inc
jge
pop
mov
je
mov
(bad)
std
(bad)
call
fisttp
int3
jae
loop
xchg
jns
dec
sub
dec
cli
scas
fsubr
mov
ror
add
leave
xlat
adc
push
in
push
mov
neg
xchg
add
jno
pop
cwde
pause
in
lods
addr16
mov
ret
cmp
inc
arpl
ja
push
jo
nop
fnstcw
gs
leave
cmp
and
cmp
fcom
out
xchg
js
push
mov
into
pop
xlat
in
in
add
push
mov
add
into
or
pop
inc
xchg
iret
mov
call
ins
div
sbb
xchg
imul
sub
adc
out
rcr
mov
fadd
inc
xchg
mov
(bad)
jge
jmp
mov
adc
push
mov
mov
sbb
push
sub
rcr
repnz
rol
lods
mov
jnp
xchg
push
fdivr
hlt
jmp
and
out
pushf
sub
mov
push
test
loopne
inc
or
sar
dec
in
xchg
cmp
pop
xchg
jo
in
scas
xchg
cmc
gs
add
push
ins
ss
pusha
xchg
in
xchg
retf
aaa
cmp
jae
jno
cmp
aas
ds
lods
inc
data16
lahf
mov
cs
pop
pushf
out
outs
pop
fucom
xor
xchg
add
xchg
cdq
adc
ret
test
push
push
sbb
test
test
or
cmc
mov
and
sub
movs
pop
mov
sbb
sub
mov
shl
enter
mov
push
inc
inc
pop
mov
js
dec
inc
push
scas
jmp
xchg
dec
(bad)
les
mov
push
fwait
push
pop
mov
mov
fwait
inc
das
imul
dec
sub
iret
dec
leave
stos
inc
push
pop
adc
pushf
popf
push
jne
jge
pop
push
out
dec
mov
(bad)
mov
adc
stos
dec
loopne
clc
call
cmp
test
push
in
ficom
dec
int
mov
mov
mov
push
push
into
mov
mov
mov
dec
pop
retf
push
push
loopne
loop
iret
ins
stos
sti
movs
sbb
movs
mov
jnp
cmps
shl
pop
jmp
jns
stos
inc
add
mov
adc
push
lahf
out
leave
popa
xchg
mov
fidiv
cmps
ret
dec
mov
and
pop
sub
push
xchg
enter
dec
or
in
ret
add
add
aam
hlt
in
push
or
ret
outs
lahf
inc
enter
cs
sbb
lock
enter
es
ret
shl
cmps
adc
data16
lods
enter
scas
(bad)
std
pop
das
and
cmp
jg
sub
pop
jp
fbstp
std
or
addr16
add
aaa
fisub
mov
movaps
rcl
in
clc
mov
sbb
mov
test
sbb
mov
enter
pop
mov
push
(bad)
mov
leave
stos
mov
xchg
mov
mov
mov
ror
enter
test
fchs
mov
loop
or
sbb
out
mov
jo
and
fucomi
dec
add
push
clc
add
adc
or
data16
movs
or
cmp
mov
xlat
sbb
dec
inc
test
cmp
nop
sbb
or
mov
jbe
sahf
mov
rcl
je
ret
add
adc
lds
outs
jnp
sbb
(bad)
loop
sbb
ret
stos
mov
stos
xchg
ds
jge
adc
xchg
mov
pusha
retf
out
pop
xor
into
and
inc
xor
and
sar
and
mov
mov
push
jmp
mov
push
int3
mov
jo
cs
in
ins
push
xor
or
rcr
pushf
and
pop
enter
call
out
sub
jnp
out
popa
int
xor
pop
daa
add
es
dec
daa
mov
mov
(bad)
xchg
add
xchg
(bad)
pop
fdivrp
push
pop
mov
pop
push
pusha
arpl
xchg
mov
push
mov
mov
sub
cmp
jg
mov
cld
pop
rcl
sbb
push
sub
leave
xchg
fucomp
mov
rcl
je
loopne
shr
and
fimul
adc
stos
inc
cmp
mov
pusha
and
sub
pushf
adc
add
arpl
scas
cmp
jecxz
cdq
enter
adc
dec
jg
pop
mov
add
call
shl
and
jl
inc
inc
shr
cdq
xor
mov
test
call
mov
pop
loope
(bad)
mov
or
enter
mov
mov
mov
push
xlat
and
jmp
xchg
and
addr16
xor
test
xchg
into
pop
and
repz
pop
adc
ficom
clc
fcmove
int3
add
or
cdq
sbb
enter
mov
mov
bound
into
sub
lods
fsub
popf
xlat
clc
push
int3
enter
or
mov
lahf
mov
in
bnd
xchg
sbb
rcl
mov
ja
in
pushf
and
jecxz
sub
mov
fld
or
movs
mov
sub
xor
mov
add
in
iret
in
push
int3
ds
xor
aas
in
fcom
aad
mov
inc
push
mov
pusha
lods
addr16
xor
rol
mov
leave
imul
fcomp
mov
clc
ins
fisttp
pop
loope
mov
ds
fisttp
xchg
lods
push
int
xchg
aam
into
imul
es
mov
sbb
test
sub
call
clc
lods
cmps
jo
pop
mov
xor
enter
inc
rcr
sbb
add
sbb
jmp
std
xor
xor
mov
std
test
jbe
std
call
lahf
xchg
cwde
jp
arpl
aad
xchg
xlat
push
jp
mov
jmp
inc
not
push
dec
inc
xchg
adc
dec
rcr
ror
and
add
in
cwde
rcl
lahf
test
faddp
sub
fld
push
ins
dec
push
test
into
xor
jg
mov
push
mov
push
inc
jb
ss
lahf
push
ins
xchg
add
cmp
popf
test
es
in
mov
xchg
xchg
adc
into
lods
add
ja
xchg
sbb
mov
fwait
push
xor
mov
dec
jmp
in
pop
retf
and
ret
movs
bound
and
or
pop
cld
jle
pop
mov
inc
loop
push
icebp
test
ret
adc
(bad)
push
push
dec
les
xchg
fiadd
mov
add
imul
or
xchg
int
jo
xor
ret
enter
dec
cli
push
mov
sbb
clc
mov
(bad)
sbb
mov
and
cmp
jle
in
arpl
movs
(bad)
push
xchg
push
mov
xchg
cmp
dec
adc
jecxz
mov
lds
iret
imul
fcomp
jae
jg
cmp
pop
mov
bound
retf
sbb
imul
call
sbb
ret
xor
lods
loope
mov
lods
and
fnsave
iret
push
iret
mov
(bad)
nop
pop
pop
jge
rcl
mov
sub
pushf
pop
mov
arpl
fist
lods
jbe
cld
pop
sub
dec
adc
loop
shl
mov
(bad)
sbb
mov
and
cmp
je
movs
and
mov
mov
mov
inc
adc
ror
adc
push
xchg
cli
cmp
mov
loop
sbb
test
cmps
sbb
jmp
movs
inc
fld
lock
sahf
jecxz
push
add
movs
jge
mov
(bad)
jmp
xchg
icebp
push
mov
fcom
xchg
adc
dec
mov
retf
lods
push
mov
(bad)
retf
cmp
push
and
jbe
nop
dec
pop
pop
or
iret
clc
cmps
mov
das
addr16
mov
jmp
das
xchg
or
nop
lea
inc
popf
popf
mov
inc
shl
xchg
pop
push
loopne
pop
test
sub
lahf
lea
test
in
(bad)
mov
scas
and
jg
push
repz
aaa
xor
scas
pop
fisubr
dec
push
push
jecxz
shl
outs
adc
(bad)
aad
loop
jecxz
mov
adc
mov
test
jne
fcomp
in
xchg
push
clc
(bad)
in
dec
jmp
sahf
jno
(bad)
jge
cmc
or
push
jmp
das
out
mov
test
scas
mov
jno
sbb
or
pop
mov
xchg
cwde
pushf
daa
mov
rcl
popa
call
lea
nop
jmp
push
cmp
or
xchg
or
retf
cmp
aam
mov
mov
push
test
fisub
push
sahf
mov
int
sub
sbb
sbb
mov
dec
push
ins
lea
mov
adc
repnz
fidiv
test
mov
mov
mov
mov
inc
js
retf
pop
inc
imul
and
sub
or
push
xor
fcomp
xor
mov
pushf
add
fadd
cmp
mov
pop
scas
lods
fnstenv
out
sbb
jmp
mov
fisubr
dec
xor
into
inc
clc
test
ins
inc
aad
js
call
mov
and
je
es
fisubr
ins
jmp
mov
xor
add
iret
lods
lods
sbb
test
(bad)
imul
movs
mov
loopne
jo
jbe
jmp
mov
hlt
test
and
inc
adc
pop
cmp
mov
push
push
xchg
outs
mov
mov
or
enter
call
xchg
loopne
sti
xor
lds
add
pushw
shr
inc
mov
test
sub
shr
or
cwde
xchg
push
adc
xchg
call
inc
(bad)
std
bound
xchg
outs
dec
out
data16
inc
imul
cmp
inc
inc
adc
jecxz
(bad)
jecxz
call
push
loopne
aam
jae
inc
(bad)
sub
imul
arpl
pop
in
push
push
jmp
stc
fbstp
pusha
test
fdiv
test
loopne
add
mov
mov
aam
cmps
or
mov
jp
dec
lods
jl
ins
pop
mov
scas
imul
pop
fmul
jo
rcr
add
xchg
test
sbb
pop
push
(bad)
push
or
pop
fdivr
sahf
mov
or
mov
loopne
outs
loopne
xchg
dec
mov
dec
push
fdiv
ret
or
int3
xchg
arpl
ficomp
xchg
fsubrp
xor
and
loopne
mov
pop
xchg
adc
mov
bound
lea
es
mov
and
test
rcl
cmp
lock
inc
pop
mov
mov
pop
inc
icebp
rcr
fld
dec
or
mov
mov
sub
shr
icebp
sub
les
mov
and
sub
test
popf
and
(bad)
rcl
mov
mov
stc
xchg
cmp
mov
cmp
mov
fst
sar
or
mov
mov
and
sbb
aad
(bad)
mov
test
rol
jge
pop
int3
mov
push
in
aad
fdiv
and
xchg
adc
outs
retf
cmps
mov
pop
jg
test
sahf
mov
inc
mov
ins
push
and
enter
dec
data16
or
jecxz
mov
test
mov
stc
nop
dec
test
xchg
mov
rcr
jl
xor
imul
mov
pushf
add
dec
or
std
outs
adc
mov
nop
jecxz
add
clc
and
rcl
add
pop
imul
enter
pop
call
dec
loope
add
push
(bad)
jle
sahf
jge
cdq
lods
adc
push
cmp
mov
ret
scas
mov
inc
jle
adc
inc
adc
mov
mov
out
test
aad
and
(bad)
gs
mov
jno
pop
std
add
jmp
test
dec
push
mov
popf
shl
shr
jp
push
dec
pop
shr
shl
arpl
test
test
mov
add
pusha
sbb
xor
adc
(bad)
xor
shr
xchg
in
aas
or
xor
sahf
sub
mov
add
sahf
and
mov
enter
call
sbb
sub
clc
adc
adc
or
ins
js
fisttp
jns
call
mov
jno
dec
add
sub
mov
pop
dec
dec
xchg
mov
mov
xchg
in
sahf
aam
mov
rol
rcr
test
mov
mov
cmps
mov
call
or
xor
add
in
test
push
and
and
jmp
cmp
scas
lahf
(bad)
ins
mov
lahf
popf
xchg
(bad)
(bad)
stos
mov
iret
mov
imul
fldenv
xchg
outs
mov
mov
inc
inc
shl
jne
sbb
push
inc
aad
add
pusha
pop
xor
aam
pop
popa
lds
xchg
dec
or
inc
jle
iret
(bad)
rcl
pop
imul
mov
xchg
pushf
fadd
xchg
xor
or
pop
mov
jmp
or
or
dec
lea
stos
aad
or
clc
ins
js
aaa
xchg
mov
xchg
push
mov
adc
outs
push
sub
ins
pop
xchg
xchg
into
jl
imul
jp
fld
ins
ss
cmps
in
dec
or
xchg
test
sbb
mov
adc
xor
ja
stos
in
mov
fcmovbe
xor
pop
add
in
pop
push
ror
addr16
push
add
into
xchg
and
call
pop
mov
js
jne
jmp
jle
(bad)
xchg
push
mov
(bad)
loopne
dec
sub
add
add
add
sub
shl
icebp
inc
jne
outs
mov
imul
cwde
xlat
fstp
jecxz
sbb
fdiv
nop
pop
sbb
stc
(bad)
movs
mov
inc
jne
push
aad
pop
inc
outs
test
jnp
inc
out
mov
add
pop
dec
les
test
inc
pushw
es
or
mov
adc
ss
push
xchg
out
mov
mov
pushf
add
dec
sub
adc
fistp
sbb
repz
test
fidivr
push
adc
rol
mov
adc
ins
add
ss
ror
int
bound
in
fsubr
mov
inc
jne
jecxz
and
ficom
adc
shr
and
sub
push
jmp
add
fidiv
lahf
mov
shl
sahf
fucom
jle
xor
cmp
ss
repnz
add
call
sbb
jno
rol
fcomp
scas
iret
imul
pop
push
(bad)
cwde
xchg
xlat
xchg
push
jle
xchg
jbe
hlt
sub
(bad)
xchg
adc
imul
mov
inc
loope
fisubr
dec
adc
cmp
lods
jmp
enter
and
xor
bound
xlat
enter
mov
mov
ret
add
shl
(bad)
movs
aaa
ins
pop
jp
mov
hlt
pop
or
and
int
(bad)
jge
mov
outs
push
adc
pop
pop
jno
out
push
xchg
adc
retf
mov
mov
pop
adc
rcr
cdq
call
ror
cmp
test
js
fimul
and
mov
popf
pop
jl
xchg
bound
push
adc
sar
dec
and
mov
or
fild
imul
sub
sbb
xchg
cmp
imul
push
pop
lahf
vcmpeqpd
int
daa
add
push
add
mov
(bad)
sub
add
dec
rcr
inc
push
lock
push
leave
test
mov
ja
mov
pop
adc
aas
jmp
or
xchg
xlat
sbb
and
mov
cmp
mov
sub
mov
pusha
test
dec
push
and
addr16
test
je
sub
add
in
pushf
xor
pushf
lods
loopne
and
adc
pop
sub
and
outs
pop
mov
int3
and
mov
outs
cmp
sbb
xchg
dec
or
cld
lods
mov
sub
and
test
xchg
mov
mov
mov
cmc
std
in
scas
push
movs
push
inc
xchg
xchg
mov
dec
mov
cdq
cmp
stos
nop
in
push
mov
xchg
mov
mov
jmp
sbb
push
sbb
xchg
in
inc
mov
jge
xchg
jp
sub
mov
push
jmp
push
inc
sub
pop
jmp
mov
mov
push
pop
cmp
mov
pop
jmp
pop
repz
inc
cld
mov
lods
in
xchg
xchg
test
sub
sub
push
mov
mov
shl
pop
ds
jecxz
test
push
pop
xchg
pop
jbe
retf
sbb
cmps
out
pop
fcomp
push
hlt
cmc
sub
mov
retf
fdivr
and
xchg
jle
ins
mov
loopne
mov
inc
push
xor
jge
out
sti
neg
push
adc
dec
pushf
or
mov
loopne
mov
push
test
mov
call
sahf
dec
jns
adc
jmp
mov
jnp
aaa
out
add
mov
mov
xchg
cmc
xchg
ins
jne
in
popf
sbb
loop
imul
mov
fistp
not
mov
xchg
pop
cld
pop
jecxz
cmpxchg
xchg
jbe
cmps
push
mov
pop
mov
xor
and
(bad)
xchg
aad
jecxz
sub
or
fbstp
jecxz
shl
xchg
jo
push
xchg
mov
or
sbb
fistp
das
dec
test
mov
(bad)
mov
jl
(bad)
int3
fcmovb
mov
dec
rol
pop
jnp
push
lods
fs
call
xor
shl
retf
es
cld
jmp
(bad)
xchg
shl
outs
push
icebp
in
fadd
mov
xchg
outs
rcr
sub
stos
lock
dec
call
ret
repz
pop
faddp
adc
mov
cdq
ins
sbb
call
jecxz
shl
jns
adc
mov
enter
aaa
pushf
jmp
js
hlt
mov
sbb
pop
mov
cmps
(bad)
or
sbb
in
into
lock
sub
fisttp
pusha
data16
and
enter
in
jns
pushf
sbb
cmps
pop
lea
mov
adc
repz
lods
sbb
cdq
jp
ret
(bad)
mov
rcl
in
or
repz
mov
jo
ds
mov
scas
mov
xchg
pop
retf
mov
les
sub
ficom
pushf
inc
xchg
sbb
push
lock
cs
neg
add
inc
repnz
std
(bad)
shr
loopne
adc
rol
cdq
mov
mov
clc
jnp
pushf
sbb
sar
pop
xchg
push
repnz
ret
adc
xchg
or
(bad)
test
push
pop
push
div
xchg
add
pushf
stc
ror
sbb
pop
xchg
(bad)
push
dec
mov
jle
fimul
in
shl
test
mov
(bad)
mov
nop
mov
loopne
call
adc
push
pop
inc
lods
xor
add
mov
fisubr
nop
test
in
mov
ja
mov
cld
(bad)
push
or
imul
ficom
cwde
push
test
and
push
imul
fmul
mov
adc
icebp
mov
pop
adc
(bad)
retf
lock
(bad)
dec
xor
push
and
push
out
pushf
test
fiadd
pop
ret
mov
pop
cs
jge
test
jbe
jmp
jge
push
mov
dec
xor
push
inc
dec
std
shl
xor
aam
lds
ficom
nop
mov
call
inc
add
push
rol
inc
jp
mov
in
and
xchg
sub
out
mov
inc
or
lods
popa
jmp
pop
xor
xchg
xchg
xchg
pop
sbb
lods
push
jmp
inc
ror
arpl
add
adc
adc
fimul
mov
cmp
mov
mov
es
pop
icebp
jmp
inc
mov
jmp
mov
or
push
test
in
sbb
mov
cmp
repz
sub
enter
stos
rcr
clc
sub
add
mov
enter
cmp
(bad)
adc
inc
cmps
xlat
mov
popa
lea
into
in
xchg
mov
fisttp
mov
jmp
test
mov
lea
push
cmp
jmp
sbb
jnp
mov
and
lahf
mov
add
jo
rol
ins
pop
mov
dec
adc
aas
jge
xor
xor
mov
adc
lods
push
jmp
adc
sahf
faddp
push
pop
mov
inc
loopne
call
nop
pop
pushf
rol
xchg
push
jmp
test
sar
test
or
std
stos
inc
xchg
int
xchg
push
jmpw
and
jecxz
mov
sbb
fcom
data16
adc
test
xor
les
cmp
jmp
loopne
frstor
aam
xchg
in
sub
adc
jmp
jb
in
fmul
pop
adc
into
cmp
dec
out
movs
mov
lods
dec
mov
sti
mov
mov
cmp
addr16
xchg
or
pusha
xchg
push
call
push
pop
add
movs
jnp
pop
call
add
xchg
jo
fsub
add
mov
jmp
adc
dec
outs
fst
jge
sbb
mov
inc
xchg
sbb
xchg
mov
in
rcr
xor
push
jae
loopne
outs
push
jmp
xchg
jecxz
imul
mov
push
jae
cdq
(bad)
jecxz
or
aas
inc
add
popa
into
cmp
sub
add
mov
sahf
in
mov
pop
xlat
cwde
shr
xchg
inc
lds
inc
in
push
pusha
add
dec
mov
rol
addr16
rcl
repz
xor
test
dec
ret
fild
inc
ret
out
pushf
cmp
test
jbe
jmp
xchg
xchg
lods
push
jmp
lahf
xchg
sub
fucomi
adc
fld
(bad)
push
jecxz
and
push
add
add
sub
jge
pop
mov
bound
test
out
adc
add
cmps
lds
xchg
mov
mov
mov
pop
clc
in
push
mov
xchg
in
and
push
add
dec
(bad)
(bad)
mov
aas
or
lea
int3
inc
sub
sbb
mov
dec
xchg
iret
int
test
xlat
je
data16
mov
data16
mov
jmp
xor
(bad)
popf
mov
cwde
in
adc
loopne
loopne
add
test
push
fwait
add
mov
inc
movs
(bad)
sti
jle
imul
(bad)
popf
loop
add
mov
popf
mov
xor
push
shl
and
mov
xchg
test
retf
mov
repz
fwait
sahf
aad
ret
push
arpl
dec
mov
fstp
mov
sub
fmul
test
dec
cdq
xchg
sbb
mov
sub
mov
xor
pusha
mov
mov
daa
out
mov
or
es
shr
and
and
jb
sar
ins
loope
ja
mov
stos
cmps
outs
add
push
adc
out
mov
sahf
sbb
test
(bad)
xchg
xor
xlat
mov
mov
leave
mov
sub
xlat
out
scas
mov
add
rol
xchg
adc
pop
call
mov
and
aam
xchg
movs
enter
pushf
ror
pop
and
jnp
and
xor
in
lock
xor
frstor
sub
inc
fdiv
sub
outs
scas
popf
sbb
mov
mov
ret
in
fstp
dec
aad
(bad)
add
ret
sub
movs
out
or
cmp
stc
test
adc
sbb
std
jmp
jns
mov
pop
into
push
xchg
jle
mul
fwait
movs
sbb
dec
xchg
mov
ins
mov
je
jmp
push
pop
adc
sbb
mov
lods
pop
sbb
xor
inc
fwait
cmp
in
sub
fdiv
jae
push
add
fst
je
push
sahf
mov
arpl
call
mov
jbe
out
pop
loop
call
dec
loope
sub
jbe
jl
jne
sub
pop
loope
mov
imul
push
cwde
push
jmp
push
jb
jge
adc
push
(bad)
popf
dec
nop
(bad)
jmp
int3
pop
inc
gs
mov
cmp
loopne
lods
adc
inc
cmp
ja
jp
jno
cmps
jl
mov
sub
add
fld
xchg
movs
inc
pushf
cmp
jmp
add
xchg
outs
pushf
es
fimul
in
pusha
nop
in
cmp
add
push
jecxz
jge
sbb
mov
(bad)
pushf
aam
sbb
push
addr16
dec
(bad)
rcl
mov
mov
sbb
mov
rol
or
and
jecxz
mov
push
mov
aad
jge
xor
fisttp
jb
add
add
jb
(bad)
enter
ficom
test
imul
call
ins
mov
push
push
int3
push
retf
test
mov
into
cmps
adc
pop
pop
push
(bad)
imul
fld
push
mov
repnz
and
jp
addr16
enter
mov
jmp
pop
xor
jge
xchg
adc
push
(bad)
pop
mov
jp
sbb
imul
push
add
dec
scas
mov
jb
xor
in
in
leave
loopne
ja
push
ds
adc
push
mov
add
push
leave
rcr
adc
xchg
test
pop
dec
pop
fsubr
jb
(bad)
outs
das
adc
cld
lahf
ss
push
push
jle
ret
ins
push
daa
into
aas
pop
xchg
ror
sub
mov
fs
into
imul
movs
jnp
xor
cmps
push
fld
icebp
mov
in
and
push
ret
out
not
aam
test
adc
inc
add
stc
les
shl
jmp
xlat
or
test
pop
mov
ret
jns
cmp
and
lock
int
xor
inc
push
sub
(bad)
xor
imul
mov
movs
cmp
pushf
and
push
mov
mov
cwde
inc
pusha
xor
popf
stos
rcr
sbb
imul
xchg
sahf
sub
jmp
aam
movs
dec
cmp
inc
pop
or
adc
push
jbe
pop
rol
push
enter
push
xor
push
sub
mov
mov
arpl
xchg
jmp
mov
or
xor
mov
inc
sub
push
js
ins
inc
pop
ficom
nop
ins
jne
fmul
mov
pop
mov
dec
arpl
icebp
lock
bswap
(bad)
out
mov
les
shl
outs
sti
cli
push
lds
test
ins
mov
and
test
fsubr
mov
ja
sbb
adc
jp
nop
fmul
and
(bad)
test
mov
push
rcl
fidivr
jne
push
mov
add
mov
pop
test
mov
push
out
call
dec
jmp
xor
icebp
xchg
mov
out
ins
clc
ja
lds
jmp
add
(bad)
div
jg
test
ins
lock
push
shl
data16
mov
and
inc
iret
sar
xor
test
dec
inc
hlt
xor
fimul
or
mov
sbb
xchg
lods
jns
adc
fldcw
frstor
or
mov
xor
loop
(bad)
popf
sub
arpl
or
test
movs
loope
adc
cmp
(bad)
mov
push
jb
sbb
outs
cmp
push
sub
push
inc
sub
add
xchg
test
push
dec
scas
sahf
shr
cld
sbb
adc
dec
add
(bad)
xchg
sub
mov
clc
inc
jb
enter
ficom
(bad)
dec
fadd
movs
mov
mov
mov
add
ror
cmps
(bad)
in
pop
push
sub
mov
pop
test
fucomip
aaa
fisub
mov
mov
cmp
add
cld
cmp
fnsave
adc
dec
adc
inc
fadd
shl
pop
ficom
xchg
xor
mov
push
fwait
or
sub
xchg
lods
push
ja
xchg
addr16
outs
les
pop
(bad)
addr16
bound
scas
loop
inc
(bad)
jb
in
add
in
jp
and
and
mov
outs
(bad)
bound
rcr
and
es
mov
fist
pop
test
stc
push
jecxz
pop
mov
js
dec
(bad)
ins
mov
mov
loope
bnd
mov
movs
xchg
aam
sbb
call
and
add
repnz
std
xchg
(bad)
es
mov
mov
and
cdq
inc
(bad)
xchg
push
xor
cmc
push
bound
mov
aam
(bad)
in
jle
les
or
fwait
push
sub
mov
scas
loopne
jo
sub
scas
push
pop
int
scas
aam
jbe
jbe
ficom
enter
and
call
mov
mov
outs
lds
or
mov
inc
adc
jmp
pop
push
or
cdq
adc
jl
dec
cmp
in
sub
xchg
xor
push
sub
mov
sahf
xor
into
cmps
rcr
inc
and
push
loopne
test
jns
dec
mov
pop
push
popa
xor
mov
push
push
mov
es
shl
mov
pop
rol
loop
cmps
popa
(bad)
aad
shr
clc
scas
push
mov
(bad)
popw
loopne
mov
aad
mov
push
push
xchg
push
sti
ror
popa
popf
mov
or
jne
mov
and
loopne
mov
enter
xchg
(bad)
fdivr
inc
(bad)
jle
mov
enter
mov
fcomp
rol
shl
xchg
bound
test
pop
jo
lods
fbld
push
jno
ins
and
rcl
mov
add
das
cmp
xchg
pop
(bad)
js
push
ja
add
mov
and
adc
sbb
xchg
xchg
sbb
mov
call
push
sub
push
addr16
ja
fwait
mov
mov
jp
pop
mov
jno
fdiv
xchg
jecxz
inc
and
ret
lods
out
nop
inc
xor
adc
mov
inc
(bad)
fwait
das
pop
outs
mov
sub
and
lods
test
fild
mov
pushw
cmp
mov
jo
or
or
repnz
enter
mov
xchg
xchg
mov
dec
push
or
movs
mov
(bad)
aad
pushf
int
rcr
cmp
pop
movs
jne
jne
xrelease
rcl
ret
iret
not
sahf
xchg
and
fadd
je
popf
xchg
or
pop
shr
jecxz
mov
xlat
frstor
and
(bad)
xlat
sbb
inc
add
xlat
xor
mov
add
pop
or
dec
(bad)
neg
inc
arpl
adc
cmps
push
add
pop
mov
xchg
cmp
cmps
add
ja
mov
sub
cmp
arpl
data16
mov
popa
pop
test
mov
pop
nop
mov
sbb
fadd
ins
ins
mov
mov
mov
pop
iret
fdivr
mov
push
dec
push
sbb
aas
fist
mov
push
shr
fsubr
jmp
call
ins
xchg
inc
lods
sar
inc
mov
movs
mov
ror
xlat
test
int3
cmp
xchg
add
fst
test
push
out
mov
pushf
test
xchg
mov
inc
dec
mov
lahf
adc
leave
xchg
pop
xchg
adc
xlat
mov
push
xchg
mov
les
cli
push
mov
fadd
enter
xor
mov
dec
and
dec
popa
mov
stc
test
pop
jns
(bad)
in
pop
mov
pop
push
xlat
pop
mov
ja
js
test
mov
cld
out
push
jg
test
jno
or
in
int3
(bad)
loopne
mov
jp
(bad)
aas
mov
push
cmp
mov
fmulp
add
adc
prefetch
or
mov
fadd
cmps
movs
aas
nop
fld
xlat
or
stos
or
retf
mov
xor
ins
xor
xchg
cdq
lods
mov
pop
fiadd
xchg
mov
(bad)
xor
push
xchg
(bad)
xchg
sbb
fsubr
push
mov
(bad)
jo
ds
dec
ins
into
ds
cmp
push
lahf
xchg
push
inc
ret
out
(bad)
mov
pushf
push
pusha
push
jb
rol
neg
bound
mov
sub
inc
push
mov
mov
jl
iret
clc
pop
movs
and
cli
lds
sub
xchg
inc
mul
clc
cld
adc
mov
clc
imul
call
mov
pop
fsub
jle
es
push
nop
mul
into
clc
xor
call
les
and
(bad)
scas
clc
fist
loop
fadd
mov
cmp
jmp
jp
adc
jg
ficom
out
fsub
cmp
pop
test
xchg
lahf
call
dec
adc
add
aas
adc
push
or
mov
push
pop
popa
ret
pop
les
xor
xor
rcr
xlat
dec
movs
sbb
mov
mov
out
sub
cmp
gs
pop
js
stos
xor
mov
xor
inc
sbb
clc
sbb
jo
mov
dec
std
mov
popa
mov
mov
or
sbb
int3
jmp
jne
and
daa
xor
dec
add
in
fstp
xlat
add
test
jge
push
pop
rcr
rcl
or
mov
mov
sub
repz
or
push
pop
push
rcl
mov
clc
mov
sbb
ror
in
fld
mov
pop
enter
fistp
pop
mov
leave
call
iret
pushf
ret
(bad)
mov
test
jns
(bad)
call
pop
or
sub
xchg
adc
or
out
mov
jge
int3
pop
stc
popa
inc
jle
pusha
cmps
mov
xchg
test
shl
test
das
es
xchg
xchg
xchg
xchg
mov
xchg
jg
ins
lahf
cmp
loope
or
stos
outs
setl
xchg
pop
xchg
sbb
mov
loopne
mov
sti
(bad)
mov
outs
lods
cmp
stc
ror
adc
outs
sbb
pop
out
sahf
mov
dec
fisubr
or
push
xchg
pushf
inc
sbb
pop
mov
aam
dec
adc
pushf
fisttp
outs
xlat
xor
enter
push
lar
inc
jbe
imul
xor
inc
cmps
add
add
dec
mov
xchg
xor
cmps
xchg
pop
shl
bound
rcl
mov
and
leave
and
pushf
mov
fchs
jmp
stos
xchg
stc
mov
mov
les
pop
mov
test
push
jae
add
mov
mov
push
or
push
mov
inc
push
and
pop
ins
stos
movs
clc
sub
mov
daa
and
hlt
inc
movs
sbb
pop
retf
mov
fsub
(bad)
enter
data16
in
fsub
dec
lock
dec
out
enter
xchg
clc
and
pop
pushf
cmp
jg
psrad
sbb
(bad)
mov
xchg
dec
pop
call
inc
out
cmp
lea
mov
pop
dec
nop
lods
shr
repz
push
push
mov
test
cmp
pop
fld
xchg
hlt
test
ds
jne
not
ret
mov
test
push
ss
mov
enter
and
(bad)
cmp
js
fsubp
bound
adc
dec
xchg
push
nop
leave
or
aaa
iret
mov
cmp
aaa
pop
sub
rcr
sar
test
xor
inc
sub
(bad)
hlt
inc
leave
mov
cli
add
in
hlt
mov
mov
push
push
sbb
adc
adc
test
(bad)
sbb
sar
or
fild
inc
add
add
pop
inc
mov
add
pop
mov
mov
push
sti
jo
pop
es
jmp
sbb
cmp
and
jns
add
or
rol
xor
enter
sbb
scas
and
(bad)
(bad)
mov
int3
jno
jg
into
les
mov
pop
loop
add
sar
inc
push
adc
iret
ret
xchg
mov
xchg
test
aaa
lods
sbb
rcl
push
dec
scas
repnz
and
adc
inc
add
lds
xchg
sub
rcl
add
xor
outs
fisttp
xchg
or
out
les
and
(bad)
int
ds
jno
loopne
pusha
push
adc
rol
clc
cmp
mov
lds
mov
jnp
xor
dec
rcr
clc
mov
mov
mov
add
bound
xchg
cdq
adc
loope
retf
rcr
dec
arpl
mov
mov
test
(bad)
loope
ficomp
call
pushf
mov
dec
add
cmp
cli
pop
(bad)
js
xchg
jg
xor
fstp
cmps
pop
fmul
es
mov
mov
xchg
mov
sahf
sbb
mov
retf
pop
mov
jne
sbb
sbb
call
jo
push
sub
and
push
pop
loop
ja
cmp
pushf
or
adc
test
push
ins
inc
add
cmc
call
cmc
in
jle
cmp
mov
inc
pop
mov
inc
sub
arpl
xchg
mov
arpl
cmc
mov
cld
jnp
mov
jp
mov
inc
loop
shl
xchg
add
push
xlat
call
jmp
mov
data16
pushf
retf
xor
pop
out
mov
test
adc
cwde
shl
pop
xlat
js
stc
mov
adc
(bad)
push
fst
outs
jle
aam
rol
jecxz
pop
jo
adc
xchg
cmp
mov
adc
jns
xor
fnstenv
xor
mov
xchg
lods
dec
dec
cmps
test
sbb
xchg
enter
shl
popf
or
nop
dec
mov
and
and
(bad)
mov
stos
and
adc
iret
repz
loopne
test
jne
xchg
add
pusha
arpl
shl
xchg
stos
xor
xchg
mov
xor
inc
xchg
jmp
lock
add
push
out
(bad)
ss
mov
xor
ds
mov
adc
dec
xor
or
jbe
add
mov
int3
pusha
dec
dec
and
add
add
in
cmp
test
jecxz
xchg
adc
test
loop
push
xchg
xchg
ins
xchg
addr16
inc
inc
les
pop
push
jo
push
aaa
call
xchg
ins
mov
xchg
jecxz
ret
pop
jmp
cmp
mov
cmp
fld
fldcw
mov
lds
sbb
out
nop
ret
adc
jns
sbb
shl
out
int3
xchg
dec
adc
fwait
jbe
xchg
xchg
pop
mov
add
or
test
lahf
adc
je
push
out
jmp
pop
rcr
imul
mov
lods
cmps
xchg
xchg
pop
shl
and
dec
mov
inc
mov
ret
add
(bad)
inc
mov
int3
push
in
pop
ret
jle
mov
test
jne
pop
or
shr
sar
(bad)
xor
ds
daa
mov
or
xchg
(bad)
mov
sahf
pop
fisub
ror
push
jmp
xchg
sub
inc
lahf
hlt
sbb
rol
cwde
int3
xchg
(bad)
leavew
mov
iret
xchg
inc
out
mov
add
js
popf
out
mov
imul
jle
mov
xchg
pop
dec
xchg
jge
aad
(bad)
mov
shl
mov
dec
cmps
push
(bad)
or
pushf
repnz
mov
lods
(bad)
outs
repz
add
test
dec
or
and
stos
xchg
xor
xchg
aas
push
int3
sti
or
pop
dec
push
sar
mov
push
sub
loopne
lahf
ret
xchg
xchg
es
jle
pop
push
fsubr
xor
push
out
xchg
pop
xchg
nop
push
mov
pop
test
xchg
sahf
ficom
sub
aam
cmp
add
jmp
ret
retf
pop
mov
rcl
cmp
inc
retf
xchg
repz
mov
add
(bad)
call
and
loope
mov
xchg
stc
sbb
mov
cmp
push
ins
repnz
sbb
jle
adc
jno
in
mov
add
pop
push
stos
lahf
sbb
sub
xchg
iret
dec
mov
dec
pop
nop
xchg
ds
stos
add
xchg
sbb
mov
xchg
retf
pop
call
out
ins
xchg
adc
ja
pop
sbb
data16
xchg
mov
ss
adc
sub
fst
pop
and
mov
clc
fldenv
push
mov
bound
(bad)
push
popf
adc
or
imul
fwait
push
push
mov
add
sbb
nop
pop
mov
push
imul
cmps
sahf
push
xchg
lahf
mov
fdivr
std
lds
movs
fnstcw
xchg
inc
jmp
push
mov
imul
aam
lds
jns
and
fnstcw
cmps
sub
addr16
mov
mov
sbb
and
loopne
cld
pop
mov
aaa
shl
jle
xlat
cwde
xchg
(bad)
mov
(bad)
jge
jae
xor
movs
jmp
and
sahf
pop
xchg
fisttp
icebp
jle
int
mov
push
mov
cmps
or
out
hlt
std
mov
sbb
gs
imul
and
in
jnp
lods
enter
pop
popf
in
(bad)
pop
fiadd
jbe
ja
bnd
jno
or
das
lods
cmp
sub
rcr
jecxz
fisubr
xchg
ret
xlat
jmp
pop
rcr
xchg
pusha
test
fdiv
mov
sbb
mov
mov
mov
mov
rol
adc
adc
(bad)
add
dec
push
sahf
test
jb
and
adc
mov
ja
sbb
lods
outs
cmp
mov
inc
test
lock
push
add
fadd
sbb
mov
mov
(bad)
jl
les
aaa
pop
cmp
xor
movs
pop
ficom
adc
lods
xchg
sub
mov
mov
ss
mov
xor
das
cmps
or
loope
js
add
in
jle
mov
xor
sbb
xchg
repnz
or
and
pop
mov
popf
icebp
or
dec
jmp
rcl
shr
xchg
xor
and
add
push
pop
pop
call
inc
sbb
(bad)
mov
mov
jge
clc
cmp
inc
lods
aaa
sbb
pop
add
mov
sbb
inc
sbb
loop
enter
pushf
daa
mov
test
mov
pushf
cld
jmp
out
aam
sbb
hlt
fwait
xchg
pminsw
les
lea
addr16
cmps
mov
mov
mov
push
mov
hlt
push
xchg
(bad)
adc
shr
fsub
imul
retf
cmp
pop
fist
fwait
enter
add
mov
jecxz
mov
and
pop
repz
lds
sub
call
ffreep
movs
pop
ret
shr
loopne
daa
movs
test
xor
xchg
mov
pusha
stos
sub
ret
pushf
(bad)
mov
mov
shl
sub
adc
(bad)
mov
mov
mov
push
mov
or
mov
out
xor
movs
mov
es
mov
in
(bad)
sar
test
mov
popa
pop
repz
mov
loopne
ret
inc
fcomp
fild
jmp
inc
xchg
pop
cwde
pusha
adc
xchg
sub
sar
cmp
js
fsub
mov
jl
fldcw
xchg
xchg
repz
add
xchg
xchg
adc
test
arpl
rcl
mov
push
or
sahf
lods
push
in
or
iret
adc
and
push
pop
lods
mov
pop
sub
or
mov
xchg
jbe
(bad)
je
cmp
mov
js
push
push
popa
dec
lahf
retf
in
outs
cdq
jae
pop
mov
loope
outs
pushf
push
mov
xlat
cmp
enter
(bad)
mov
out
and
fild
mov
inc
add
adc
aaa
dec
call
jne
je
out
pop
leave
fidivr
pop
ret
sub
lea
lea
mov
xchg
das
jnp
mov
movs
mov
or
pop
adc
sub
movs
lods
movs
mov
sub
daa
or
push
lods
dec
fs
pop
adc
mov
push
adc
pusha
call
inc
sahf
mov
push
mov
fld
pop
xor
or
dec
out
test
xchg
jne
dec
(bad)
sbb
addr16
dec
mov
enter
sbb
mov
add
push
outs
push
pop
jmp
loop
lahf
iret
xchg
lahf
push
sbb
jecxz
enter
cmp
add
hlt
mov
add
or
shl
xor
sbb
xor
inc
adc
pop
mov
outs
call
jne
or
sub
lss
dec
ss
(bad)
es
mov
fmul
pop
sbb
mov
mov
adc
in
push
or
test
scas
dec
push
xchg
dec
in
lds
mov
sub
imul
nop
xchg
sub
and
xchg
xchg
dec
mov
xor
mov
xchg
add
pop
imul
mov
dec
popf
fcomp
cmp
xor
xchg
jecxz
(bad)
sub
call
inc
out
xor
sti
(bad)
mov
fsub
pop
jecxz
pop
imul
xchg
adc
lods
(bad)
jnp
jecxz
adc
pop
mov
pop
and
loope
dec
adc
(bad)
pop
lods
loope
out
lahf
ja
in
pushf
cmp
jmp
xchg
aaa
cld
es
pusha
in
add
xchg
xor
out
jmp
retf
jecxz
stc
sahf
xchg
and
or
stos
(bad)
pushf
mov
jnp
dec
jecxz
fwait
sub
retf
cmp
mov
add
lahf
aas
xchg
inc
imul
mov
xchg
sbb
hlt
lods
dec
out
pop
loope
leave
pop
ins
data16
sub
xchg
test
bound
in
nop
enter
sahf
mov
xchg
push
std
mov
lock
iret
es
jne
cs
sbb
dec
jns
push
jl
jmp
mov
in
ins
inc
jo
and
scas
call
mov
ror
jg
sub
sbb
and
pop
mov
mov
pop
in
pushf
mov
aam
imul
and
xchg
sub
inc
push
(bad)
les
xlat
popf
rcr
add
sub
jl
xchg
mov
(bad)
and
push
jo
push
aam
aas
adc
dec
retf
mov
adc
popa
adc
jns
clc
inc
call
stos
cmp
stos
cmp
fisubr
adc
iret
fldenv
sbb
clc
(bad)
mov
push
ror
int3
cmps
sti
test
sub
add
pusha
add
xchg
jmp
cmp
mov
xchg
outs
sahf
dec
mov
cdq
out
ss
imul
mov
inc
aam
cmp
sub
(bad)
or
test
fld
push
jmp
js
scas
pusha
jecxz
xchg
add
or
(bad)
mov
ins
shr
cwde
mov
jecxz
xlat
or
hlt
iret
arpl
fcomp
adc
push
xchg
adc
cli
pushf
mov
sbb
stos
stos
xlat
dec
nop
test
push
push
pop
inc
iret
push
jle
fdiv
in
mov
aam
fst
dec
daa
test
dec
ret
xor
xchg
popa
jg
retf
jo
lahf
lods
inc
jmp
inc
mov
sub
neg
mov
nop
add
push
sbb
xor
scas
test
fadd
push
lds
xor
out
les
push
jge
cmp
scas
lock
rcr
pushf
arpl
cmp
fadd
jo
lods
jmp
jbe
stos
pushf
mov
pop
add
dec
sti
dec
pop
mov
enter
ja
mov
je
pop
shr
xchg
std
enter
jns
mul
pushf
(bad)
stc
(bad)
hlt
mov
aad
adc
int3
ret
mov
sub
cmp
xchg
xor
xchg
shl
movs
mov
movs
fwait
sub
xlat
ret
outs
mov
pop
and
pop
lods
std
shr
ja
pop
inc
jg
xor
test
mov
push
in
loopne
loop
movs
pop
and
pop
ja
inc
sti
cmps
into
cmp
fiadd
pop
test
jg
clc
jmp
mov
sbb
test
xchg
adc
xchg
or
cwde
fwait
int3
mov
mov
xchg
cdq
xlat
popf
push
and
nop
push
aam
and
icebp
shr
mov
xor
lock
push
sbb
mov
push
cmp
rep
neg
fucomip
mov
cmp
adc
repnz
sub
int
sub
xabort
mov
add
add
sub
popf
push
sub
and
jle
enter
fsubp
rcr
in
(bad)
xchg
pop
adc
loope
fadd
or
pop
cmp
or
pusha
cmp
js
or
cmp
jmp
add
jo
stos
adc
(bad)
mov
adc
push
sbb
movs
push
xor
aad
push
mov
lods
xor
pop
xchg
je
pop
retf
push
fadd
mov
add
dec
in
pop
jge
lea
xchg
ror
lock
int
ins
xchg
dec
add
daa
call
cs
mov
xor
jnp
xchg
pop
jl
arpl
cmps
dec
jecxz
cs
mov
pop
jg
cli
stc
add
mov
xchg
mov
sub
(bad)
pop
push
ss
or
ds
mov
mov
je
mov
push
xchg
and
aad
lds
mov
enter
out
mov
add
add
cmp
sub
mov
sbb
jmp
mov
mov
(bad)
adc
and
popf
and
pusha
xchg
jecxz
mov
fst
jge
push
fbld
nop
loop
and
ins
popf
sbb
(bad)
jl
test
sbb
sub
nop
mov
(bad)
cmp
pop
cmp
push
dec
mov
div
mov
rcl
outs
push
nop
inc
outs
mov
jne
call
ds
sub
dec
inc
and
dec
inc
mov
jns
ficom
imul
je
add
xchg
or
test
test
int
test
mov
rcl
movs
fcom
lods
xchg
mov
aam
loopne
les
xchg
jp
add
xor
add
xor
push
fwait
dec
pop
mov
imul
mov
push
xchg
add
or
mov
mov
retf
sahf
sbb
sbb
adc
leave
xchg
lahf
adc
mov
add
pusha
loopne
xchg
mov
sahf
fdiv
fld
ja
jmp
test
test
dec
inc
adc
scas
mov
ret
and
mov
mov
pop
aaa
pushf
xchg
test
mov
mov
mov
fsubr
or
jge
cmp
pop
mov
ficomp
nop
and
or
test
cmp
mov
stos
mov
hlt
pop
in
push
scas
js
xor
pop
aam
int
out
adc
(bad)
cmps
push
sar
jae
xor
outs
ja
and
or
xchg
pushf
in
test
(bad)
pop
aam
shl
or
xor
fcmovb
std
pop
mov
jae
pop
in
lock
bound
js
jge
int
push
jmp
jle
out
sub
mov
aaa
push
pushf
aad
push
push
repz
test
xor
pop
mov
pop
retf
pop
es
dec
es
(bad)
pushf
adc
xchg
mov
push
cmp
fdivr
xchg
mov
ja
fdiv
xor
test
jo
pusha
adc
and
fcmovb
sbb
movs
mov
in
loopne
fdivr
jmp
push
pop
(bad)
loope
mov
popf
and
mov
fbstp
outs
out
nop
mov
adc
and
xchg
mov
in
test
(bad)
enter
lods
scas
add
mov
sbb
stc
ja
dec
fucom
jle
test
scas
push
pusha
adc
(bad)
shr
into
cmps
lea
xchg
jmp
popa
mov
mov
xchg
aad
jo
fcomp
mov
(bad)
pop
mov
sbb
xlat
int3
pop
movs
xchg
ins
push
and
int
(bad)
in
dec
mov
cwde
pop
rcl
lods
sub
and
sbb
and
test
pop
aam
or
push
sub
test
loope
push
adc
(bad)
jo
pop
fadd
popa
jg
fiadd
pop
pop
jmp
add
cmp
arpl
dec
shl
jle
pop
ds
add
jno
cmp
movs
shr
push
es
push
adc
inc
add
dec
cmp
test
or
mov
add
jbe
jns
dec
(bad)
pusha
mov
xchg
or
mov
cmp
mov
mov
sahf
mov
xor
push
popa
inc
out
xor
add
push
ss
dec
ja
add
movs
pop
sahf
sti
jo
aam
in
fstp
adc
sar
add
ror
mov
cmps
int
jne
and
shr
adc
xchg
and
cmp
pop
and
mov
adc
popa
idiv
lock
cld
adc
retf
pushf
ds
ins
aas
lds
pop
lahf
scas
gs
(bad)
jle
dec
pop
bound
imul
adc
imul
add
jl
dec
pushf
out
or
xlat
rol
mov
push
mov
mov
mov
fmul
fnsave
mov
cmps
add
sbb
mov
popf
hlt
nop
lods
or
mov
or
pop
jmp
test
out
(bad)
bound
repz
mov
(bad)
pop
xchg
mov
mov
loope
xchg
icebp
sub
mov
and
fist
xchg
jb
in
add
je
mul
loop
ret
addr16
ret
mov
add
pop
mov
and
inc
or
mov
int
inc
and
pop
push
cs
nop
xchg
(bad)
sub
mov
xor
test
xchg
and
push
add
mov
add
mov
sbb
std
(bad)
(bad)
pop
ret
dec
push
inc
pop
cmp
or
aad
jo
aaa
retf
pushf
push
pop
adc
mov
bound
inc
push
lahf
shl
(bad)
out
loopne
mov
jno
dec
ja
mov
shl
push
xchg
mov
es
mov
in
not
cmp
mov
das
dec
push
jg
aas
stc
sar
sbb
aad
adc
shr
ret
xor
mov
sub
stos
fldcw
sahf
xor
and
fldenv
mov
adc
inc
add
pop
(bad)
cmps
xlat
xchg
push
mov
(bad)
push
dec
jne
adc
sbb
xor
cmp
rcl
sbb
pushf
cmp
movs
push
shl
add
cmps
mov
mov
test
and
int3
ss
fisubr
rcr
inc
ss
sahf
add
pop
sbb
adc
xchg
and
push
aam
addr16
addr16
xchg
sub
jecxz
add
outs
and
popa
jg
lods
mov
movs
jnp
sbb
xchg
fld
imul
retf
xchg
mov
xchg
dec
outs
and
popf
xchg
jecxz
mov
shl
enter
fucomip
ja
jmp
push
es
mov
sbb
outs
lock
sbb
imul
push
rcr
and
jne
and
sub
or
ror
push
pop
and
out
sbb
fisubr
in
adc
push
and
sub
dec
inc
adc
mov
jb
repnz
lds
jp
mov
lahf
and
dec
jge
shl
mov
xchg
jge
rcl
pop
sub
clc
clc
dec
cmp
adc
sub
gs
and
sub
lahf
xchg
push
loope
outs
mov
or
fst
sub
movs
sbb
mov
sbb
cmp
popf
sbb
xchg
loopne
or
cmp
pusha
movs
lods
mov
pop
add
or
ins
sbb
push
mov
idiv
out
push
mov
dec
aas
xchg
mov
sar
jge
mov
ret
rcr
pop
loope
cmps
ins
imul
mov
adc
xor
scas
push
shl
ds
mov
loop
pop
rol
pop
scas
(bad)
retf
lods
in
(bad)
mov
in
jecxz
lahf
test
loope
out
fidiv
or
cmp
shr
mov
xchg
in
cmp
adc
and
pop
outs
push
adc
test
ret
sub
pop
mov
mov
mov
xchg
sbb
test
lds
sbb
sbb
test
sti
xchg
adc
outs
xor
mov
adc
test
sahf
pop
mov
xlat
and
fist
jmp
mov
popf
add
push
movs
cdq
repz
mov
(bad)
sub
fsub
in
aam
pop
(bad)
and
xchg
jmp
outs
sahf
aaa
mov
xchg
(bad)
xlat
jl
jg
push
sbb
add
iret
inc
push
mov
aas
jmp
mov
out
clc
jno
ret
retf
jae
and
jecxz
xchg
or
adc
cld
rol
sbb
xchg
mov
loopne
movs
jbe
loopne
sub
jecxz
dec
leave
sbb
daa
add
add
or
dec
pop
and
out
bsf
dec
mov
xchg
jg
xor
sub
dec
inc
adc
cmp
jmp
lods
lock
sbb
fist
iret
ins
lahf
aad
xor
shl
xor
pushf
xchg
mov
fstp
adc
jnp
or
inc
(bad)
mov
stc
dec
neg
std
rcr
jle
or
jp
fwait
jmp
jmp
or
sbb
push
push
lock
mov
push
and
mov
movs
out
mov
nop
fstp
push
pop
pusha
ret
or
sbb
sub
mov
ds
and
ins
push
xchg
(bad)
pushf
stos
(bad)
pop
fsubr
rcl
scas
sub
in
pop
mov
inc
sbb
add
mov
mov
lods
xchg
or
pop
dec
imul
test
cmp
jle
jecxz
in
or
push
sbb
jecxz
ret
mov
int
popa
xchg
push
lahf
adc
dec
jb
ss
sar
and
out
adc
push
imul
mov
cmp
push
es
shr
js
ficom
xchg
or
(bad)
mov
cmp
mov
fisubr
mov
sbb
repz
mov
or
cmp
mov
in
das
mov
in
xchg
push
adc
xor
cmp
int3
fst
mov
sahf
sub
popa
inc
out
push
fistp
mov
jmp
push
cmc
pop
test
push
mov
mov
mov
(bad)
fs
pop
push
and
imul
mov
cmp
xchg
cdq
repz
nop
jo
pop
lds
push
pop
jmp
push
add
and
push
pusha
lds
aam
cmp
mov
ss
and
test
xor
add
lods
stos
cmp
xor
mov
cmps
ret
fcmovb
dec
ds
jg
leave
je
xor
out
stos
fsub
popa
shl
cmp
sbb
jnp
dec
repz
pop
cmp
inc
or
add
pop
cwde
jnp
pop
jecxz
mov
mov
cmp
inc
cmp
leave
hlt
pusha
movs
mov
pop
push
leave
int3
mov
ror
jnp
mov
fisub
mov
nop
cli
inc
mov
pop
inc
mov
imul
xor
arpl
outs
pushf
scas
(bad)
jecxz
fadd
lds
pop
lock
retf
lahf
cli
cmps
fs
movs
addr16
out
ficom
or
xor
(bad)
jmp
fidivr
fst
in
adc
cmp
cmp
dec
ins
std
not
dec
mov
sahf
out
in
adc
fistp
jmp
mov
sub
pop
inc
ins
push
jmp
sbb
in
test
sub
retf
dec
cmp
div
cdq
sbb
mov
shl
arpl
imul
xchg
enter
test
vpcmpd
test
pop
addr16
jecxz
cwde
shr
pop
scas
mov
fst
sbb
je
out
fnsave
dec
mov
push
xchg
nop
xchg
leave
int
rcl
jl
dec
(bad)
dec
out
adc
or
fs
in
in
mov
jecxz
les
movs
nop
xchg
adc
stos
xchg
pop
mov
test
popf
mov
xchg
xchg
loopne
aam
adc
mov
push
add
nop
(bad)
xor
jecxz
jg
add
xor
(bad)
xchg
jge
mov
fimul
popf
jecxz
rol
iret
nop
mov
lods
gs
fild
lds
jmp
int3
in
mov
xchg
fs
xchg
xchg
ins
mov
sti
and
sbb
inc
int
pop
or
test
inc
(bad)
sub
sub
lods
cwde
add
xor
adc
jmp
cmps
loope
cmp
inc
sub
jecxz
and
ret
ret
arpl
inc
nop
pop
jno
enter
mov
pusha
sbb
loop
push
hlt
stc
sub
cmps
mov
mov
mov
dec
mov
(bad)
xor
xchg
push
fstp
mov
pop
xchg
push
mov
inc
inc
pop
mov
push
xchg
test
(bad)
xchg
imul
shl
inc
ret
test
push
pop
pop
cmps
and
mov
ret
lock
push
push
sub
and
push
sbb
cdq
in
pop
iret
mov
icebp
cmp
pop
jecxz
fild
mov
je
xor
call
pop
test
xchg
sub
pushf
cmp
adc
in
aas
mov
mov
dec
push
(bad)
popf
hlt
loope
add
ret
je
call
inc
imul
test
movs
jecxz
xchg
sub
imul
in
xor
ret
adc
adc
std
xchg
ds
and
and
sub
gs
pop
iret
test
add
inc
arpl
aaa
std
mov
fcomp
hlt
sbb
(bad)
popf
das
fadd
sub
sub
gs
adc
imul
rcr
dec
mov
pushf
movs
push
xor
mov
push
jnp
sbb
mov
adc
jbe
call
or
test
pusha
pop
aam
cmps
mov
les
push
mov
rcl
(bad)
fwait
adc
mov
aad
les
xor
add
les
adc
aam
adc
sub
fcom
cld
fcomp
jo
jb
pop
shr
xor
or
mov
and
inc
mov
mov
ret
aaa
sahf
xor
pop
test
pusha
xchg
dec
mov
xchg
dec
adc
js
je
jl
sub
push
fs
aas
sahf
jo
les
cdq
enter
pushf
xchg
outs
mov
mov
pusha
enter
enter
aam
lods
mov
test
sbb
mov
movs
xor
mov
mov
inc
aam
xchg
loopne
fsub
ror
push
adc
xchg
xchg
xor
add
ja
call
in
fcomp
mov
shl
mov
aas
fcomp
xchg
pop
and
loopne
pop
pusha
sbb
inc
or
pop
xchg
mov
mov
test
mov
cmp
and
dec
enter
sbb
sub
pop
xor
push
loopne
pusha
xor
ret
sub
adc
stos
inc
lea
hlt
mov
dec
lea
(bad)
lock
cmp
pop
dec
iret
cmp
js
fcom
mov
lods
test
stc
mov
aam
mov
sar
jle
xchg
mov
cmp
rol
inc
jnp
xchg
int3
aam
mov
mov
in
or
dec
jno
popf
pop
cmp
in
mov
cwde
call
push
clc
push
pusha
xchg
dec
dec
jmp
cdq
inc
jge
add
aam
daa
test
aas
sub
jg
out
cwde
pop
cmp
mov
mov
cmps
push
mov
sub
or
call
ja
xchg
xchg
pushf
cdq
cmp
loope
cmp
sbb
xor
jg
lods
jg
push
jb
jl
retf
jae
daa
jecxz
and
jl
inc
push
cmp
adc
ds
push
jecxz
addr16
add
pop
xchg
dec
out
dec
nop
stos
inc
mov
int3
push
sbb
hlt
pop
call
add
mov
dec
add
pusha
xlat
(bad)
push
pushf
cmps
in
sbb
test
xchg
aam
les
leave
dec
data16
fcomp
mov
adc
test
cld
mov
cdq
adc
into
leave
mov
fs
jecxz
call
push
adc
inc
add
or
cmps
js
xor
lahf
or
(bad)
add
cdq
jmp
adc
cmps
(bad)
pushf
jp
and
es
inc
jo
sahf
cmp
lods
dec
in
xchg
mov
mov
and
cmps
or
test
adc
dec
xor
cld
bound
mov
test
or
lahf
or
mov
fnsave
imul
mov
adc
sbb
adc
pop
leave
sub
mov
pop
sbb
and
pushf
sub
add
lods
fst
in
test
and
scas
add
mov
iret
rcr
pusha
enter
enter
adc
cdq
adc
shl
inc
(bad)
ret
mov
lds
aam
mov
xor
test
scas
add
lea
rcl
add
push
sbb
(bad)
jno
fdiv
push
dec
pop
in
lods
and
sti
shr
xchg
pop
mov
sub
jle
xor
call
cmps
add
es
ins
int
or
add
xchg
(bad)
(bad)
xchg
add
scas
jge
lahf
(bad)
sbb
out
test
jbe
mov
ror
retf
add
leave
add
push
mov
test
test
sar
pop
mov
mov
gs
pop
sub
mov
push
mov
or
pop
loopne
push
sbb
cmp
pop
es
cmp
cmp
adc
push
cmp
mov
push
mov
inc
lods
cmps
cmp
mov
mov
xor
je
pop
adc
adc
ds
aad
jbe
movs
je
cmp
adc
rol
pop
push
in
icebp
adc
and
push
retf
fst
cmps
ret
lds
or
adc
retf
dec
mov
repnz
loopne
jmp
add
push
neg
adc
push
fidiv
sbb
iret
(bad)
popf
mov
inc
call
popf
ret
or
pushf
mov
inc
ror
aam
push
adc
lea
adc
mov
xor
mov
inc
outs
ds
sub
jle
add
xchg
pop
outs
pop
ins
push
lock
lods
or
pop
fimul
jae
les
mov
(bad)
mov
jmp
pop
xlat
mov
movs
xchg
xchg
xchg
jecxz
pop
adc
mov
xlat
(bad)
or
and
and
pop
push
sbb
popf
jge
call
lahf
mov
xchg
add
stc
fadd
or
enter
mov
call
jae
inc
cmp
ds
pushf
addr16
cmp
jbe
jp
cmc
test
push
cmp
test
mov
jne
mov
ret
inc
sbb
sbb
inc
mov
xchg
sbb
mov
lods
jp
xchg
xchg
in
gs
add
push
push
mov
inc
retf
fwait
mov
imul
adc
mov
pop
nop
pusha
stos
pushf
add
pusha
nop
push
ret
sar
pop
test
mov
jecxz
(bad)
rcr
jg
add
sbb
or
jecxz
and
(bad)
fcmovb
mov
cmp
mov
(bad)
shr
retf
sbb
aad
mov
sub
inc
scas
es
cmp
int3
xchg
xchg
out
sbb
pop
leave
fcom
pop
xchg
pop
mov
lds
rol
mov
sahf
and
mov
jge
pop
int3
sub
cmp
and
mov
mov
mov
test
test
call
add
adc
xchg
sahf
mov
ss
ja
sti
aam
retf
xor
ja
nop
mov
mov
nop
ret
pop
dec
ins
or
repz
cmp
aad
(bad)
sbb
mov
jno
push
sbb
add
call
(bad)
push
add
pushf
ins
cmps
mov
xchg
pushf
fmul
aad
mov
test
int3
seto
xor
ss
pushf
cmp
mov
xchg
hlt
add
cmps
clc
mov
and
cmp
aaa
xor
and
dec
pop
sub
mov
xchg
mov
xchg
mov
repz
fs
loope
(bad)
das
cmp
fcom
int3
mov
pushf
test
loop
nop
pop
push
(bad)
mov
(bad)
mov
mov
cmc
fcomp
adc
movs
cmps
mov
and
mov
loopne
xor
fsub
mov
push
jl
sahf
xchg
mov
jmp
cld
mov
call
pusha
mov
in
pusha
sbb
or
stc
mov
sbb
or
pop
adc
and
sahf
xor
out
aas
mov
mov
out
sub
push
xor
adc
add
into
xor
sub
pop
sub
aas
js
test
add
lahf
dec
mov
cmps
jl
pop
fdivp
cmp
push
cmp
fwait
jnp
mov
mov
xor
fwait
jns
jmp
popf
xchg
cmp
fxtract
pushf
sub
push
add
iret
sbb
stos
nop
cmp
fwait
mov
fwait
mov
(bad)
mov
add
mov
aad
mov
aad
mov
rol
mov
mov
not
(bad)
aam
rcl
loopne
fadd
enter
les
shl
pop
test
xchg
xchg
push
xor
(bad)
fldcw
mov
xchg
pushf
in
mov
lock
mov
in
sbb
sbb
adc
and
(bad)
sbb
adc
test
or
xor
adc
cmp
cmp
stos
aam
pop
jo
inc
xchg
jmp
movs
and
sub
push
push
mov
imul
shl
add
sub
mov
mov
out
and
ins
pop
sahf
xchg
push
pop
xor
mov
mov
xchg
not
xor
lds
inc
retf
xchg
mov
jle
fnstenv
sahf
pop
cmp
jp
pushw
sbb
bound
call
cmp
mov
ficomp
xchg
push
nop
outs
(bad)
mov
fwait
mov
fwait
push
add
mov
cmps
movs
nop
mov
lods
mov
cmps
loopne
shr
fadd
call
aas
mov
add
clc
fisub
div
hlt
mov
xchg
(bad)
cld
mov
(bad)
mov
cmps
lock
in
pushf
sbb
pop
adc
adc
and
sbb
and
faddp
jo
adc
in
mov
jmp
cmps
clc
addps
aam
adc
cmp
sahf
shl
ds
cmp
cmp
and
pusha
xor
mov
mov
aad
mov
xchg
fist
shl
test
cmps
dec
pop
inc
adc
push
mov
mov
or
loop
rol
les
xor
aad
mov
add
mov
mov
out
mov
jmp
pusha
add
pop
and
daa
call
sbb
nop
xchg
pop
mov
sti
fcom
xchg
xor
rcr
sahf
pop
mov
test
cmps
xor
and
pusha
lods
rep
loopne
aam
sbb
aam
loopne
hlt
(bad)
rcr
ret
xchg
and
hlt
shl
clc
adc
idiv
add
ins
sbb
sahf
in
or
and
movs
movs
mov
pusha
push
out
fbld
in
sti
jge
sbb
adc
mov
aad
mov
aad
loop
sbb
adc
clc
nop
or
push
aad
mov
pop
xor
xor
inc
cmps
ds
sub
mov
and
mov
aaa
dec
sbb
mov
mov
push
hlt
pusha
neg
pop
pushf
pop
xor
dec
mov
sbb
dec
jl
sahf
js
cmp
int
nop
jb
mov
mov
pusha
push
adc
mov
add
fld
neg
clc
mov
mov
sbb
aaa
or
mov
or
xchg
mov
mov
fnstenv
rcl
mov
pusha
pop
test
add
(bad)
and
xchg
mov
shl
push
(bad)
fcom
fsub
les
into
or
pusha
retf
iret
out
test
pushf
adc
call
(bad)
aam
jl
sbb
hlt
in
loop
dec
mov
pop
hlt
jmp
and
xchg
fmul
fisubr
pop
add
mov
test
(bad)
cmp
aam
cmps
xor
xor
leave
pop
sub
jp
sahf
xor
call
push
sub
push
adc
pusha
mov
lahf
repz
loopne
dec
and
in
aam
aam
pop
mov
mov
loopne
dec
push
inc
adc
pop
js
jbe
je
and
jp
out
xchg
fs
jo
pop
adc
sahf
mov
xor
ret
stos
xchg
push
lods
xchg
push
stos
mov
mov
test
xchg
int3
xor
es
mov
je
mov
cmps
mov
test
cmps
or
lods
(bad)
fadd
pop
pusha
(bad)
sahf
loopne
add
ret
fsub
mov
jo
adc
in
std
adc
rol
mov
out
call
sbb
mov
retf
sbb
invd
rol
xchg
into
mov
clc
(bad)
mov
lds
sbb
add
in
sahf
cld
sbb
xchg
add
jmp
and
or
pusha
sbb
enter
(bad)
mov
mov
or
cmp
ss
rcl
inc
push
ss
push
leave
push
clc
not
fwait
xchg
adc
imul
add
arpl
test
mov
jo
les
jmp
inc
mov
inc
addr16
mov
or
test
adc
push
pop
addr16
mov
add
out
rol
mov
aam
mov
xchg
and
in
sub
fdiv
mov
mov
mov
pop
pop
xchg
mov
xor
mov
push
(bad)
test
fidivr
cli
dec
shr
sub
test
fdiv
lock
sub
xchg
xchg
nop
xchg
mov
push
mov
hlt
mov
popf
mov
mov
js
sar
inc
pop
(bad)
rol
(bad)
sub
xchg
cmp
push
sbb
enter
mov
xchg
mov
mov
sub
(bad)
int
mov
mov
sbb
mov
xchg
mov
mov
mov
mov
and
shl
clc
adc
call
js
lods
and
aam
mov
xchg
xor
mov
and
push
xchg
test
inc
loopne
aam
mov
mov
in
shl
mov
mov
clc
pop
call
pop
test
mov
mov
mov
and
js
in
xchg
sbb
mov
rcl
mov
daa
mov
pop
xchg
push
jmp
mov
ret
int3
dec
test
leave
inc
call
push
aad
lahf
mov
cs
jbe
add
out
jecxz
inc
push
mov
and
jecxz
ret
cmc
xchg
in
call
test
sbb
mov
outs
pop
pop
or
sbb
jle
nop
xchg
mov
mov
inc
add
push
xor
test
sbb
mov
jle
pushf
lock
into
iret
ds
enter
aaa
sub
stos
sub
adc
jne
cmp
sbb
(bad)
and
pop
cmp
or
push
inc
mov
cmps
out
test
movs
call
mov
mov
clc
call
mov
cwde
ret
data16
cmp
test
lock
jb
repz
test
stos
cmps
scas
jmp
mov
mov
retf
(bad)
ins
mov
xor
(bad)
jbe
pop
sbb
pop
or
cmp
in
jl
mov
out
cmp
jecxz
ss
jmp
pop
repnz
fsubr
inc
int
outs
mov
test
mov
test
dec
bound
xchg
aam
mov
sar
mov
mov
rcr
xlat
mov
xchg
enter
or
mov
cmp
pusha
cmps
cwde
xchg
push
int
ror
mov
mov
cmp
lods
(bad)
push
sub
cmp
(bad)
sub
ret
dec
imul
adc
inc
aad
pop
xchg
movs
or
xor
jmp
icebp
inc
mov
sbb
(bad)
fsub
xchg
or
jmp
test
ret
cmps
mov
cdq
fidiv
mov
lock
or
rcr
push
ficom
es
aam
loopne
aam
add
xchg
jmp
cmp
xor
mov
jl
test
movs
lods
or
in
add
xor
call
mov
xlat
inc
(bad)
push
cmps
mov
test
inc
adc
call
mov
call
movs
mov
out
into
scas
fisttp
lods
xchg
rcl
(bad)
clc
js
xlat
lea
inc
dec
mov
rcr
mov
push
push
mov
pop
fcom
mov
data16
or
movs
xchg
clc
mov
div
jmp
leave
and
iret
fiadd
call
mov
or
in
(bad)
and
mov
fsub
retf
xchg
push
mov
mov
movs
mov
mov
aad
in
adc
ja
mov
inc
imul
stos
push
test
stc
or
ja
push
mov
mov
test
bound
cwde
mov
cld
ja
sbb
rcr
outs
adc
mov
into
push
popa
imul
leave
add
adc
arpl
dec
fcom
fsubr
inc
xchg
lods
enter
xchg
jmp
inc
jecxz
push
aad
mov
pusha
cmp
cmp
mov
fisubr
xchg
int3
nop
or
xor
pop
sub
je
pop
xor
dec
push
shl
push
les
xchg
mov
push
xor
(bad)
cmp
mov
dec
fidiv
icebp
ins
les
fiadd
fwait
add
popf
addr16
add
test
in
cwde
add
ja
mov
test
enter
(bad)
mov
hlt
xchg
hlt
je
test
aas
outs
push
xor
mov
and
(bad)
pop
push
inc
cmp
push
daa
test
sbb
arpl
in
ret
nop
and
retf
cmps
push
enter
les
les
inc
fild
push
pop
fwait
loopne
gs
getsec
std
test
ss
mov
push
aaa
mov
call
rol
jo
fisubr
xchg
mov
mov
hlt
mov
ret
(bad)
or
call
and
add
add
dec
xchg
push
fisubr
jne
and
sbb
cmp
xchg
mov
cmp
inc
outs
mov
xor
div
jae
jmp
dec
mov
ds
cmps
inc
loopne
pop
retf
xchg
mov
dec
xchg
test
pushf
add
test
enter
xchg
imul
jl
xor
cmps
mov
xchg
pop
mov
push
jecxz
pop
ins
sub
mov
pusha
sahf
out
inc
ficom
in
jns
cmc
mov
adc
std
push
loope
sub
and
pop
(bad)
(bad)
jecxz
xor
cmp
and
clc
xor
xchg
test
xchg
test
inc
out
pusha
xor
outs
pop
lea
mov
adc
mov
xchg
push
mov
mov
movs
test
rcl
or
push
xor
shl
call
and
test
idiv
xchg
stos
dec
sbb
jp
mov
sub
inc
imul
test
dec
or
mov
jbe
mov
pop
push
and
mov
sbb
sbb
mov
mov
fwait
cmp
push
push
cdq
enter
aad
enter
aam
ficom
dec
xchg
(bad)
aam
and
lahf
or
mov
inc
cdq
mov
mov
xchg
mov
xchg
or
jo
ss
(bad)
mov
sub
pop
(bad)
cdq
shl
(bad)
jbe
xor
lahf
aam
lods
pop
cmps
xchg
mov
loopne
pop
into
mov
ror
push
sahf
push
xchg
sbb
push
xchg
xchg
popa
xchg
jno
bound
sub
push
mov
(bad)
cmc
adc
pop
pop
and
cld
aam
and
push
retf
pop
(bad)
pop
(bad)
lods
idiv
jbe
imul
lahf
outs
sbb
mov
nop
add
inc
rcr
jb
xchg
lods
lods
gs
or
addr16
out
adc
mov
add
sbb
push
jnp
rol
inc
sub
cmps
mov
outs
inc
mov
sub
test
lock
test
shl
into
enter
sbb
cmp
ja
cmp
xor
mov
pop
in
bsr
loopne
mov
pop
pushf
fcmovnbe
sbb
fnsave
out
cmp
mov
add
inc
ficomp
loop
sbb
mov
or
dec
sbb
das
movs
xchg
or
jg
aam
dec
outs
(bad)
or
test
pop
add
xchg
imul
jae
test
retf
pop
or
push
mov
pop
and
arpl
inc
jge
rcr
sub
jo
pop
mov
mov
je
pushf
repnz
mov
imul
jne
xchg
pop
sbb
cmc
sbb
es
dec
sbb
mov
cmp
iret
xchg
xor
lods
mov
je
ret
sub
pop
push
push
in
mov
mov
dec
or
repnz
pop
jb
mov
jl
pushf
cmp
repnz
sbb
ffreep
daa
cs
js
xor
mov
fs
mov
jnp
add
(bad)
mov
fisubr
inc
jg
pop
(bad)
pusha
jne
inc
inc
fadd
xchg
shl
test
adc
fidiv
lea
(bad)
mov
jecxz
sub
inc
rcl
pop
shr
mov
mov
jecxz
enter
aam
cmps
add
jb
bound
bound
adc
add
fadd
in
or
fs
push
sbb
mov
clc
hlt
mov
push
in
push
sub
add
cdq
aaa
jae
mov
into
inc
cli
lods
test
call
push
(bad)
ins
jge
sbb
in
inc
push
(bad)
mov
cmps
mov
xor
jae
add
fs
out
mov
rcr
inc
repz
mov
daa
pop
test
rcl
in
aad
mov
fldenv
int3
add
adc
(bad)
outs
in
add
aam
pop
stos
hlt
mov
sub
cmp
nop
pop
xchg
xchg
sbb
lahf
adc
outs
idiv
lods
push
lods
scas
or
icebp
aam
push
and
loopne
lds
sbb
adc
adc
mov
lods
adc
adc
adc
scas
arpl
and
xor
(bad)
push
mov
dec
mov
xchg
mov
aas
push
add
mov
(bad)
adc
imul
int3
cmp
mov
mov
jb
push
pop
pop
or
mov
cli
aad
loop
rol
mov
sbb
pusha
call
hlt
or
and
rcl
pop
mov
and
push
mov
mov
push
inc
popf
retf
aas
(bad)
add
out
or
repnz
es
aaa
inc
xchg
mov
mov
rcr
pop
adc
mov
mul
cs
shld
rol
mov
pusha
or
add
je
stos
mov
mov
lea
mov
mov
fdivr
icebp
in
mov
xabort
mov
rcr
ret
(bad)
call
imul
jmp
bound
mov
mov
ins
pusha
xor
xchg
repnz
lods
or
nop
jl
aad
inc
je
mov
ret
lods
rcl
daa
cli
sbb
mov
sub
adc
mov
or
jbe
push
test
lock
adc
push
lods
adc
repnz
aad
inc
jp
push
mov
repnz
jl
mov
test
and
cdq
cmp
(bad)
lods
jbe
repz
(bad)
push
xchg
mov
test
mov
shl
xchg
push
inc
mov
es
xchg
test
cmps
xchg
mov
cmps
data16
add
mov
add
dec
rcl
mov
sahf
enter
aad
xor
dec
push
mov
dec
fsubr
pop
and
call
push
movs
stos
jmp
mov
inc
imul
fisubr
sbb
or
mov
xor
(bad)
fistp
pop
mov
stc
jnp
repnz
cmc
mov
mov
mov
push
or
mov
xchg
pusha
add
loopne
fisttp
iret
data16
jle
mov
test
mov
test
adc
pop
repnz
fimul
mov
loopne
repnz
fstp
jmp
or
in
mov
stos
mov
mov
daa
and
add
sub
sub
inc
fdivr
and
test
(bad)
sahf
mov
popa
repz
imul
cmps
lods
fstp
mov
fcmovnb
aaa
adc
mov
adc
or
fwait
lahf
arpl
test
fwait
mov
shl
out
mov
test
stc
out
mov
mov
add
in
adc
cdq
movs
mov
and
jmp
or
mov
movs
dec
call
rcr
loopne
adc
test
nop
xchg
mov
neg
xor
push
xchg
push
push
comiss
ss
jnp
aad
inc
hlt
inc
mov
lahf
xchg
xor
or
fsubr
(bad)
test
pusha
push
push
sub
and
out
mov
sub
mov
mov
aaa
ss
mov
inc
lods
leave
jo
pop
ror
leave
or
in
sbb
xor
in
in
out
mov
hlt
dec
or
add
push
sub
mov
(bad)
xor
clc
es
icebp
mov
push
sub
cmps
mov
(bad)
or
call
adc
or
pop
cmp
jbe
pushf
test
xchg
mov
icebp
enter
push
lods
leave
adc
xchg
push
lock
xchg
jb
adc
int
std
push
shl
push
mov
fldln2
cmps
mov
pop
ins
mov
hlt
or
popf
shr
mov
(bad)
sub
nop
aam
aam
pop
push
mov
mov
in
mov
fld
pop
sar
sub
mov
loopne
enter
lods
xchg
test
nop
pop
and
mov
leave
jns
hlt
test
movs
add
add
cmps
sti
loope
sbb
mov
adc
lahf
mov
mov
mov
out
sti
aam
cmp
cwde
add
xor
call
push
mov
jne
add
pusha
shl
sub
ins
mov
jg
icebp
(bad)
jbe
nop
std
dec
fstp
jnp
mov
mov
mov
call
loopne
test
out
inc
pop
push
dec
dec
sub
sub
outs
mov
cs
jo
(bad)
jp
mov
mov
xor
test
popf
cmps
cmp
push
daa
fadd
add
les
aam
jmp
mov
or
pop
retf
lods
inc
jmp
xchg
pop
fld
clc
xchg
inc
pop
retf
int
imul
shr
push
push
das
mov
xchg
call
mov
and
sbb
repz
ins
(bad)
lahf
sub
adc
and
mov
mov
test
jne
sbb
and
lock
xchg
sbb
xchg
adc
and
and
and
mov
retf
mov
enter
pop
in
push
push
add
sti
sub
add
(bad)
rol
and
ds
and
or
mov
xchg
mov
ret
cwde
mov
xor
adc
push
arpl
(bad)
stos
adc
push
sbb
fidiv
xor
push
mov
mov
ins
inc
mov
popa
xchg
xor
xchg
ret
addr16
mov
xlat
repnz
pop
inc
mov
enter
jmp
dec
lea
adc
pushf
mov
sar
add
call
sar
(bad)
sub
or
cmc
jb
push
add
jg
addr16
adc
mov
test
(bad)
stc
ret
popf
adc
adc
aad
inc
cwde
pop
pushf
xchg
inc
test
cmp
xchg
lods
jg
mov
xchg
cld
out
mov
iret
call
mov
sub
rol
mov
xchg
ins
bound
and
xchg
and
sub
mov
xor
adc
adc
xlat
int3
stos
sbb
rcl
(bad)
ret
inc
test
scas
adc
sbb
pop
rol
mov
jo
pop
in
sub
xchg
xchg
leave
pop
(bad)
jae
push
mov
mov
leave
cmp
xor
sbb
ins
sub
sahf
mov
adc
jno
mov
hlt
fistp
imul
push
push
rol
enter
mov
test
sub
sub
int
add
inc
ret
sbb
fiadd
inc
mov
repz
xchg
xlat
fcmovu
adc
sti
rol
out
shl
repz
push
sahf
jg
or
mov
loop
nop
or
sar
test
add
hlt
(bad)
push
outs
cdq
mov
dec
imul
add
mov
fwait
ins
popf
inc
xchg
cmps
test
(bad)
call
pop
das
xlat
add
xchg
mov
push
jnp
retf
sbb
or
(bad)
stos
iret
mov
and
sub
fs
and
jmp
mov
(bad)
push
call
ds
movs
sub
adc
aam
out
test
fadd
push
loope
hlt
mov
in
add
repnz
inc
shr
mov
inc
fisttp
mov
fnstsw
je
pop
movs
inc
les
xor
popf
mov
enter
mov
(bad)
test
mov
or
sbb
test
xchg
lds
es
push
and
and
mov
pop
das
fwait
lahf
mov
mov
popf
pop
xor
shl
(bad)
fidivr
pop
xchg
in
cdq
cmps
(bad)
(bad)
mov
xor
int3
stos
enter
pop
(bad)
cli
sbb
pushf
pusha
cmc
aad
and
xchg
adc
xchg
jecxz
or
lods
xchg
cmps
inc
ds
mov
(bad)
das
clc
nop
fwait
inc
xchg
xchg
ss
cmp
sbb
nop
xor
sti
inc
cmps
xchg
rcr
(bad)
mov
push
ror
mov
add
jmp
sti
test
and
fisubr
jecxz
fisubr
mov
aam
or
xor
(bad)
outs
push
test
mov
mov
push
test
xchg
test
xchg
mov
aam
addps
adc
nop
inc
aas
xor
stos
rol
ror
xor
sub
mov
sbb
ds
xchg
xchg
xchg
int3
(bad)
mov
mov
xchg
iret
movs
mov
fdivr
cli
aaa
or
in
mov
idiv
lods
cdq
add
std
mov
loope
mov
out
addr16
add
sub
xor
ins
daa
pop
sti
cli
add
leave
fist
outs
sbb
gs
xchg
dec
in
push
and
push
mov
stos
adc
mov
sbb
pop
psubsb
cld
out
in
xor
out
ja
and
xlat
repz
sar
pop
pop
int3
arpl
(bad)
test
xor
(bad)
(bad)
loopne
aam
sub
xchg
mov
shl
call
les
dec
adc
lahf
loop
sbb
cdq
loop
inc
ins
and
pushf
mov
adc
xchg
mov
adc
cmp
ins
into
jle
or
repnz
xchg
arpl
jmp
out
retf
xchg
(bad)
cmp
aam
jb
stos
(bad)
mov
movs
add
xor
xchg
das
mov
inc
push
aaa
xchg
adc
pushw
lock
or
imul
mov
xor
jl
test
pop
mov
jb
fidiv
jb
ret
test
push
xchg
pop
mov
pushf
xor
or
loope
out
cmp
loopne
rol
fwait
mov
(bad)
mov
jle
int3
pop
mov
test
sub
mov
movs
pop
sbb
fsubr
add
pop
(bad)
fdiv
add
push
addr16
loope
data16
push
sbb
enter
sub
in
imul
xchg
inc
sub
cmp
(bad)
outs
lods
pop
pop
push
mov
(bad)
xor
nop
xchg
sub
sbb
xchg
or
dec
cld
ret
imul
lods
inc
adc
lods
arpl
mov
xor
pop
cmp
sub
or
out
jle
lahf
pop
retf
mov
mov
shl
or
call
test
xor
scas
mov
mov
pop
adc
ret
sub
mov
mov
pop
sub
dec
sti
mov
out
leave
push
(bad)
int
scas
movs
fsub
ins
cli
sub
retf
mov
jmp
fdiv
inc
bound
outs
cmp
xchg
ins
lods
push
in
adc
dec
jg
rol
adc
mov
inc
je
xchg
cmp
adc
xor
(bad)
push
rcl
pop
nop
mov
xor
(bad)
in
xchg
lods
dec
out
mov
pop
scas
adc
cld
in
xchg
test
test
inc
jle
fcmovne
jg
mul
or
hlt
(bad)
faddp
data16
(bad)
cld
sbb
xchg
xchg
mov
jge
test
xor
or
aam
pop
push
push
(bad)
enter
sbb
xor
mov
in
jg
and
or
imul
cmp
ret
pusha
retf
dec
fwait
ins
hlt
xchg
test
out
xchg
leave
xchg
inc
aam
push
in
mov
outs
mov
push
xchg
fst
or
fmul
mov
movs
xchg
cld
nop
xchg
cdq
pop
or
inc
jg
out
sub
stos
cs
dec
jge
inc
loopne
push
sbb
outs
xchg
lea
cs
pop
jo
mov
mov
add
adc
arpl
pop
lea
jnp
mov
lods
test
pushf
out
les
repnz
sbb
xchg
(bad)
sar
test
repnz
inc
xchg
scas
inc
sbb
ret
clc
cmp
cmp
push
and
mov
lahf
pop
retf
fstp
adc
out
fmul
and
nop
enter
push
xchg
cmp
fadd
js
pop
test
mov
mov
push
sub
fwait
stc
je
xchg
push
xchg
push
(bad)
dec
cmp
and
pop
jmp
push
mov
xchg
adc
xchg
sbb
mov
jb
pop
nop
enter
sbb
test
lds
pushf
dec
lods
adc
add
retf
cmps
and
lods
shl
sbb
(bad)
les
imul
jmp
call
stos
(bad)
mov
cwde
push
push
cmps
xchg
fdiv
gs
and
idiv
stos
enter
jmp
push
jmp
lahf
adc
mov
in
fnstcw
out
pop
repnz
mov
out
inc
scas
loope
pop
lods
xlat
retf
fwait
rcl
push
sub
push
rcl
loopne
xor
(bad)
(bad)
js
adc
rcr
pusha
push
fcom
mov
jg
and
in
aam
pusha
ror
add
adc
xor
(bad)
popf
pop
ja
inc
test
js
add
xchg
adc
test
popf
in
mov
lods
aad
and
enter
ret
xchg
sti
or
test
push
out
sbb
or
push
es
dec
lock
call
ficom
pop
add
xchg
scas
iret
imul
push
jmp
stos
mov
inc
jno
push
fist
ret
fisubr
or
mov
fcomp
jecxz
sub
repz
lock
aaa
nop
imul
cmc
or
cmps
rcl
xchg
lahf
push
mov
cli
adc
mov
push
xchg
(bad)
push
add
ret
fldenv
xchg
out
repnz
xor
sbb
mov
xchg
push
push
ret
xchg
sahf
xchg
sbb
sbb
pop
mov
out
neg
lods
push
outs
pop
out
jecxz
fisubr
mov
add
ret
lahf
cmp
test
and
dec
repnz
outs
mov
imul
fisub
push
dec
push
mov
cmp
add
ja
xchg
leave
jb
es
retf
data16
adc
loope
mov
clc
stos
movs
imul
inc
pop
xchg
stos
fst
jmp
or
inc
sbb
inc
pop
fcom
push
cmp
mov
push
xchg
mov
cmps
fsub
shr
cdq
pop
retf
lock
jle
mov
push
adc
xchg
cs
movs
adc
and
hlt
mov
xchg
test
call
stos
mov
outs
imul
xchg
or
cmps
xlat
lea
mov
push
xchg
imul
imul
sahf
mov
aam
ror
test
jle
ret
jb
mov
lahf
lods
inc
jmp
add
jle
movs
add
fadd
or
rcr
movs
bound
ret
mov
sub
test
popa
push
jecxz
out
faddp
imul
add
or
outs
(bad)
int3
icebp
ds
mov
popf
xchg
cmps
xor
clc
sub
xchg
xor
mov
mov
call
cli
icebp
in
lock
xchg
jne
in
out
cmp
sub
pop
imul
xchg
loope
mov
push
xchg
in
aas
setg
adc
mov
sub
sub
xchg
and
call
scas
out
(bad)
movs
adc
test
hlt
cld
push
(bad)
jae
test
sbb
lock
gs
movups
outs
loopne
outs
fcom
pusha
or
mov
sbb
cmp
dec
xchg
fcomp
mov
mov
sub
stos
mov
pop
movzx
xor
jecxz
inc
mov
mov
push
outs
clc
inc
cdq
imul
(bad)
push
xchg
xchg
pop
pusha
mov
push
adc
stc
jmp
mov
fidiv
clc
mov
aam
call
sub
mov
mov
ss
mov
mov
scas
mov
xchg
push
jecxz
xor
and
push
ficomp
add
cmps
fidiv
jg
jmp
adc
loopne
(bad)
xchg
mov
jg
ins
int3
inc
in
int3
aaa
inc
mov
pusha
inc
mov
mov
aad
mov
sbb
outs
sbb
pop
push
mov
dec
add
pop
sbb
ins
lock
xchg
adc
gs
xchg
ins
pushf
leave
mov
push
sbb
int
mov
dec
pop
jmp
in
pop
xchg
jns
adc
sub
nop
mov
adc
ret
test
ins
sub
mov
lahf
mov
cdq
sbb
mov
jecxz
test
dec
ds
fs
jmp
mov
pop
lods
ret
outs
lahf
mov
gs
and
bound
mov
and
ins
sahf
mov
aam
shr
mov
jmp
enter
or
shl
jecxz
push
fsub
lds
cmp
push
sub
lahf
ins
sti
jns
test
fisttp
test
push
js
leave
popf
jge
fwait
in
pop
sub
mov
mov
lahf
sbb
xchg
repnz
jecxz
fmul
test
or
cmp
fmul
cmp
call
pushf
outs
fwait
jmp
inc
fidiv
cmp
repnz
out
dec
mov
adc
lahf
and
mov
mov
pop
mov
mov
adc
test
jne
cmp
loopne
and
test
int
ror
jmp
cmp
inc
jbe
and
mov
jmp
dec
sbb
int
das
in
and
ds
inc
xchg
xchg
loopne
in
pop
push
jmp
or
mov
adc
cmp
jg
mov
(bad)
(bad)
mov
jnp
and
cmps
movs
xor
adc
data16
scas
jg
dec
xchg
lods
pop
loope
jge
sbb
xchg
or
cdq
jmp
pop
outs
pop
mov
sbb
add
mov
adc
push
dec
lea
retf
les
frstor
cdq
rcl
inc
mov
add
cmc
cmps
xchg
(bad)
fwait
retf
pop
cdq
mov
test
daa
sub
data16
mov
cmps
test
jmp
inc
fcomp
mov
jg
(bad)
xchg
xchg
test
inc
jne
or
retf
cmc
pushf
mov
pop
mov
pop
xchg
loope
cmps
or
pop
push
and
or
and
jle
sub
inc
test
pop
push
pop
fmul
call
xlat
jb
jmp
daa
lods
fidiv
xor
mov
dec
inc
cmps
sbb
aas
stos
dec
retf
fisubr
mov
pop
push
adc
mov
pop
(bad)
and
movs
adc
out
and
and
jmp
scas
dec
(bad)
sbb
mov
pop
sbb
fwait
sbb
les
or
test
mov
(bad)
xchg
sub
std
dec
je
mov
pop
inc
jmp
jle
push
sahf
xchg
rcr
stos
xlat
adc
xchg
adc
rcr
test
movs
movs
pop
repnz
xor
(bad)
mov
mov
in
leave
xor
das
sbb
mov
ret
add
push
inc
leave
ins
sbb
or
fnsave
mov
sbb
shl
xor
adc
sahf
loopne
aaa
mov
mov
mov
fdivr
(bad)
push
pop
retf
xchg
or
xlat
or
pop
rcr
in
in
in
loope
inc
inc
jle
mov
adc
mov
out
mov
out
or
(bad)
jge
out
xor
out
mov
push
enter
call
fdivr
xchg
or
xlat
fistp
ret
mov
cmc
out
push
(bad)
sub
xchg
xchg
cdq
sbb
aam
fidivr
add
js
(bad)
shl
jbe
mov
nop
pop
push
movs
mov
and
(bad)
rol
rcr
test
and
sub
imul
sub
sub
pop
fcomp
mov
shl
dec
shl
and
lods
inc
out
jecxz
push
add
and
or
xchg
clc
inc
loope
xlat
or
dec
into
and
rol
mov
lahf
loop
loop
pop
adc
mul
shr
adc
sbb
jmp
pop
loop
popa
add
mov
or
ds
jmp
jne
outs
lds
mov
rol
jae
lahf
cdq
add
out
lahf
enter
ficom
test
jge
mov
cs
cmp
inc
sub
dec
shl
dec
test
test
sbb
adc
aas
sub
push
push
test
adc
lea
test
add
in
mov
in
imul
sbb
jmp
rcr
xchg
stos
pop
lds
xlat
lods
pop
mov
clc
(bad)
dec
or
test
push
adc
lods
pop
imul
les
push
mov
push
xor
xor
push
xchg
sub
ss
in
or
push
daa
iret
mov
(bad)
push
arpl
repz
sub
push
popa
and
sbb
inc
pop
shr
mov
nop
sbb
test
sahf
sub
loopne
mov
mov
test
mov
(bad)
adc
adc
push
jecxz
mov
push
mov
loopne
mov
shr
lea
mov
lahf
ficom
ins
ds
push
shr
sbb
lods
push
inc
dec
jns
(bad)
add
xchg
dec
or
push
xchg
push
mov
pop
ds
test
pop
push
push
jecxz
shl
xchg
jmp
jno
pusha
les
adc
xchg
mov
arpl
cwde
dec
xchg
jo
loopne
and
pop
in
xlat
push
out
jge
imul
mov
js
inc
mov
mov
adc
in
(bad)
enter
mov
fmul
test
jecxz
adc
ins
mov
xor
mov
sbb
into
lahf
add
add
cmps
xor
(bad)
mov
cmps
sub
dec
hlt
(bad)
xchg
mov
inc
idiv
es
aam
jecxz
xchg
loopne
pop
jmp
add
add
fadd
or
test
xor
lds
xor
fsub
loopne
shr
push
sub
mov
cs
push
out
sub
pushf
xchg
nop
repnz
xchg
sbb
aad
jmp
dec
push
nop
sbb
xchg
ret
mov
shl
xor
cli
adc
sahf
repnz
sub
adc
inc
push
sub
cli
mov
lea
jmp
xchg
pop
test
pop
mov
pushf
or
mov
(bad)
xchg
pop
sahf
cmp
outs
sub
pusha
mov
jecxz
sar
and
or
adc
xchg
fldcw
and
test
or
outs
jp
add
and
cli
stos
sbb
je
movs
arpl
mov
push
pop
or
xchg
(bad)
jmp
sbb
xor
inc
xor
ret
xor
cmp
je
jmp
in
add
mov
mov
xchg
xor
fwait
jmp
sub
sbb
(bad)
retf
dec
mov
adc
add
lahf
jbe
ds
rol
retf
int3
nop
fisttp
sbb
lahf
scas
test
sbb
push
or
test
or
cmp
ins
pop
inc
rcr
lds
stos
rcr
mov
scas
add
int3
out
pushf
sbb
xchg
xor
inc
adc
ret
sub
movs
stc
dec
iret
jge
(bad)
adc
mov
and
sub
stc
add
rcr
scas
retf
inc
dec
sbb
mov
icebp
or
add
daa
in
lods
cmp
inc
loopne
adc
xor
lock
and
and
adc
mov
xor
sbb
and
cmps
retf
mov
sub
aam
adc
xchg
pop
sub
fidiv
jg
loop
or
push
aas
mov
aaa
sub
aaa
call
or
push
or
rcl
or
lds
push
addr16
pop
mov
inc
add
pushaw
sbb
ror
and
inc
add
jg
cmp
adc
mov
shl
cmp
sbb
fwait
mov
rcl
xor
pop
sub
pusha
sub
mov
jecxz
popa
daa
jge
aas
and
add
xchg
push
dec
aas
jge
jecxz
das
push
je
je
xchg
mov
inc
outs
push
xlat
in
mov
dec
ficom
and
pop
dec
stc
js
xchg
adc
adc
or
jg
xchg
xchg
xchg
or
sbb
mov
push
mov
dec
imul
xchg
add
and
and
hlt
add
inc
daa
aaa
aam
loope
je
sbb
shl
pop
out
repnz
(bad)
or
loopne
fbld
sbb
scas
loopne
mov
sub
inc
shl
xor
mov
into
push
inc
jo
adc
mov
xchg
mov
or
jp
lods
pop
mov
out
dec
or
or
fisttp
ja
adc
nop
aad
inc
sbb
nop
imul
xchg
pop
shr
lahf
popf
push
sub
mov
out
dec
cmp
les
aas
mov
inc
cld
push
movs
or
or
in
fisub
sbb
pushf
push
repz
mov
cmps
pop
dec
lods
pop
adc
jo
ds
icebp
fwait
xchg
(bad)
rol
mov
(bad)
int3
mov
js
and
mov
(bad)
push
jg
mov
stc
mov
add
pop
sub
in
cmp
popf
cmp
mov
or
cmc
or
add
inc
and
mov
out
lea
add
sbb
pop
aam
jne
into
mov
dec
mov
pop
outs
pop
xor
iret
push
popa
or
shr
call
inc
jns
pusha
cmp
ror
jbe
scas
(bad)
(bad)
cld
lock
sbb
and
aam
test
push
mov
scas
in
xor
mov
xchg
xchg
retf
pop
mov
rcl
je
sub
sbb
sbb
rcl
or
jecxz
ret
cmps
inc
mov
fsub
ror
int
retf
jmp
xor
mov
sar
adc
call
xchg
leave
cdq
add
aad
out
cli
imul
sub
frstor
jb
xchg
popf
push
inc
jg
js
fdiv
push
nop
or
ret
xchg
adc
mov
not
call
xlat
retf
push
cmp
bound
lods
inc
jmp
cmps
dec
sbb
inc
sub
push
sbb
mov
in
test
out
fidivr
ret
xchg
ins
shl
(bad)
(bad)
stc
mov
dec
xlat
bound
inc
or
mov
popa
inc
push
stos
rcr
inc
mov
cdq
int
(bad)
pop
sub
daa
mov
sbb
dec
ret
adc
rcr
xor
aad
fbld
xchg
xor
jle
push
lock
rcr
pusha
xchg
sbb
sbb
xchg
cmp
sub
(bad)
movs
arpl
sbb
push
icebp
std
pop
rol
sub
sahf
inc
xchg
jp
jmp
call
xchg
pusha
pop
imul
popf
adc
sti
pop
mov
rol
xor
sbb
or
xor
jecxz
add
mov
addr16
mov
pop
pusha
imul
jns
in
cdq
mov
add
jge
sti
xchg
outs
test
xor
shl
xchg
mov
in
mov
retf
push
stc
pushf
cdq
mov
ins
push
push
loope
pop
xchg
jg
sti
jge
mov
mov
cmp
push
bound
mov
cdq
(bad)
repnz
jmp
cdq
mov
jo
adc
push
push
push
jbe
push
aas
xchg
mov
xchg
adc
mov
and
pushf
cwde
push
(bad)
hlt
bswap
popa
loopne
adc
das
or
push
jo
push
int3
jmp
mov
ja
es
xchg
loopne
push
jge
mov
repz
cmp
sub
adc
pop
sbb
sahf
sub
pushf
imul
cmp
call
test
mov
stos
mov
loope
cli
xchg
iret
sub
pop
pop
sbb
mov
jmp
bswap
popa
push
adc
pop
std
pushf
xchg
loope
xchg
pushf
adc
test
test
std
pop
cwde
lods
xchg
push
pop
jg
add
xor
je
xchg
xchg
adc
fwait
pop
js
push
inc
mov
jb
or
nop
shr
aad
pop
push
mov
movs
pusha
mov
retf
mov
js
sahf
xor
sbb
xchg
nop
mov
cmp
xchg
jo
movs
jmp
nop
dec
xchg
clc
mov
xchg
pop
mov
dec
inc
rcl
cmp
fbstp
dec
mov
push
cmc
test
mov
sub
dec
sti
jnp
push
adc
shr
movs
sub
test
(bad)
xchg
sub
scas
loopne
mov
push
add
(bad)
xchg
test
(bad)
fist
add
sbb
sbb
dec
jo
stos
shl
ror
push
fwait
push
and
xchg
mov
adc
out
clc
les
mov
pusha
icebp
mov
and
ror
add
outs
push
cmps
div
ret
push
xlat
mov
mov
(bad)
xchg
inc
xchg
push
push
ds
(bad)
lods
dec
leave
mov
enter
in
(bad)
push
or
push
daa
call
pusha
in
inc
dec
xor
ins
mov
xor
inc
retf
add
push
in
xchg
fcmovbe
fcomp
xchg
icebp
fdiv
mov
adc
mov
(bad)
imul
sar
pop
out
push
xchg
mov
sub
int3
pop
xchg
xchg
sahf
push
sbb
test
inc
dec
call
mov
xchg
xor
es
shr
sti
dec
xchg
pop
ss
mov
mov
cmps
repnz
jecxz
in
repz
dec
enter
add
call
sub
pushf
push
ja
pop
dec
jg
lds
xchg
pop
xchg
enter
push
cmp
dec
fsubr
test
pop
addr16
addr16
(bad)
(bad)
xor
xchg
bound
dec
xchg
push
fmul
aam
ds
push
lahf
jl
mov
fisttp
xchg
mov
xchg
js
sahf
mov
dec
mov
pop
imul
sub
mov
or
add
jge
xor
sahf
xchg
sbb
or
out
cmp
(bad)
cmp
mov
xchg
push
jmp
cdq
mov
mov
int
jmp
jmp
jmp
dec
scas
add
inc
clc
shl
push
pop
stos
test
mov
or
iret
inc
movs
mov
fcmovnb
(bad)
sahf
aam
mov
cmp
fsubr
test
xlat
test
mov
cmps
xor
test
xchg
inc
xchg
push
sahf
add
fmulp
lds
pop
imul
push
xchg
xchg
xchg
mov
mov
xlat
pusha
in
xchg
bound
cwde
ins
(bad)
xchg
dec
jp
pop
(bad)
lods
outs
in
push
sub
adc
loopne
clc
into
mov
mov
data16
or
and
dec
push
lock
ret
adc
test
fucomip
lea
(bad)
out
sub
enter
or
out
pusha
jecxz
mov
sbb
sbb
(bad)
cmps
imul
mov
or
pop
and
mov
nop
add
fwait
inc
mov
mov
push
retf
fadd
dec
mov
(bad)
jns
dec
(bad)
dec
cwde
xchg
dec
(bad)
out
push
shld
bound
xchg
repnz
adc
add
or
add
pop
and
ins
iret
ss
xchg
je
xchg
iret
push
rcl
rcl
aas
cdq
pusha
sbb
and
inc
int3
cdq
push
lock
mov
(bad)
lock
aad
data16
or
out
daa
sbb
and
adc
lahf
dec
or
aam
aaa
dec
mov
mov
inc
jle
mov
xchg
mov
ret
xor
sbb
ins
pop
scas
cmp
or
mov
in
pop
aad
cld
(bad)
(bad)
retf
xor
mov
fsubr
push
add
jnp
leave
lock
dec
xchg
pop
cmp
repnz
xchg
fadd
scas
mov
inc
scas
in
fcom
cmp
cmp
or
lds
in
cmc
mov
js
shr
test
in
add
cmp
add
iret
sub
hlt
and
mov
sub
lea
pushf
adc
mov
setae
pop
mov
sub
aad
mov
cmp
rcl
add
(bad)
in
xor
pop
mov
mov
int
lea
xchg
lods
jge
inc
mov
scas
add
lds
and
lea
stos
lock
cmp
ja
jmp
sub
rcl
mov
mov
mov
into
call
jge
(bad)
sbb
mov
ret
ror
sbb
mov
lods
ret
fwait
mov
hlt
aaa
jne
cmp
cld
aaa
std
xor
mov
xor
jmp
cmc
rcr
dec
in
adc
push
sbb
enter
mov
aad
pop
in
sub
dec
sar
dec
gs
push
mov
in
test
push
mov
sbb
mov
out
adc
jo
lahf
fs
adc
pop
out
pop
jmp
add
jae
cmc
mov
mov
(bad)
push
div
daa
pusha
es
mov
hlt
mov
or
mov
and
(bad)
jg
inc
jo
(bad)
in
adc
cmps
aas
loopne
pushf
fcmovb
adc
inc
daa
mov
popf
fsub
sahf
xor
nop
or
(bad)
pop
mov
outs
fmulp
mov
push
pushf
sub
imul
xor
inc
add
pop
arpl
retf
mov
jmp
sub
jp
xchg
cdq
ret
lock
mov
adc
push
mov
mov
mov
and
adc
push
(bad)
scas
and
sbb
shl
pop
mov
js
add
out
dec
ror
inc
outs
(bad)
pusha
mov
cmp
dec
ror
in
ret
popf
sahf
xor
shl
sbb
or
sbb
and
aaa
sub
fidivr
adc
imul
retf
sub
or
push
rcl
fld
aam
adc
push
retf
mov
sbb
out
ret
pop
dec
xor
fld
es
ret
xor
(bad)
fldcw
jl
repz
retf
loopne
adc
push
aad
aam
cmp
sbb
fisttp
cdq
xchg
cmp
xchg
clc
push
call
mov
mov
pop
cli
lds
xchg
mov
adc
ror
shr
cs
loopne
or
xchg
add
outs
lds
stc
sbb
jmp
push
adc
xchg
and
adc
sbb
cmp
data16
mov
gs
rcr
cmp
add
fmul
outs
mov
shr
jmp
(bad)
shl
(bad)
imul
jle
inc
xchg
adc
add
and
push
xor
(bad)
sbb
xchg
xor
jge
out
sub
xor
scas
outs
ret
stos
shl
mov
inc
popf
pop
cmps
popf
mov
cwde
imul
sbb
scas
dec
xchg
call
je
jecxz
mov
iret
fwait
movs
clc
inc
imul
xor
mov
es
iret
hlt
push
int3
pushf
jp
adc
sar
jmp
jnp
rcl
inc
mov
xchg
sahf
xchg
xchg
jecxz
aaa
add
mov
xchg
adc
or
inc
sbb
cmp
jp
(bad)
cmp
cld
push
cmps
mov
push
adc
(bad)
mov
add
fadd
in
ror
mov
cmps
rcr
inc
iret
aaa
in
ret
pop
(bad)
in
repz
mov
rol
xor
icebp
xor
sub
mov
cmp
or
aad
mov
and
jbe
adc
prefetchwt1
pushf
aad
test
push
pop
aas
add
js
pop
mov
and
xor
pop
cmc
push
or
nop
fucomi
xchg
sbb
and
pusha
enter
outs
repnz
mov
or
mov
jl
mov
shl
aad
in
mov
adc
(bad)
aaa
addr16
ja
test
neg
xchg
dec
adc
sahf
fstp
fs
adc
pop
mov
push
cs
jg
pop
mov
je
lock
fsub
xchg
mul
jmp
jge
lea
xor
add
fcomp
aam
push
ret
mov
push
popf
xor
fnsave
test
dec
mov
cmp
enter
cmp
aad
xor
rol
pop
(bad)
scas
ret
ss
int3
lock
not
mov
iret
in
imul
pop
xchg
ret
dec
mov
cmps
push
jg
retf
out
stc
xor
mov
mov
dec
push
mov
in
xor
ret
push
cld
xchg
lea
xchg
popa
sbb
sbb
dec
mov
pop
inc
add
fsub
addr16
mov
call
push
add
ja
dec
test
ret
aaa
lea
fiadd
sahf
mov
sbb
push
xchg
cmp
push
push
cmps
or
aad
pop
pop
ins
push
inc
daa
push
or
adc
call
mov
cli
pop
push
push
loop
mov
xchg
sub
mov
ret
dec
pop
icebp
or
xlat
dec
call
inc
stos
mov
adc
or
mov
mov
shl
in
mov
retf
iret
ret
test
fldcw
jecxz
mov
sbb
mov
or
(bad)
push
xor
or
aaa
mov
js
rol
inc
int
jecxz
cdq
std
mov
aad
mov
test
nop
lds
leave
mov
and
(bad)
mov
mov
stos
mov
mov
push
lea
aam
sbb
dec
mov
mov
dec
rep
loopne
adc
jne
scas
(bad)
sub
(bad)
js
lahf
mov
pop
adc
jmp
(bad)
xchg
sub
lds
jge
outs
loope
mov
in
or
jno
dec
or
jmp
cmc
es
adc
dec
(bad)
cmps
not
mov
xchg
pop
cmp
pop
xor
shr
sub
loope
or
and
sbb
leave
pop
push
or
test
xchg
mov
call
add
xor
or
mov
mov
mov
popf
xor
sbb
jge
call
jmp
or
fcomp
retf
(bad)
dec
dec
(bad)
leave
enter
out
jo
mov
push
mov
test
out
mov
out
(bad)
xor
scas
jmp
fidiv
inc
sbb
or
or
cmc
dec
jmp
ficomp
jo
popa
mov
movs
pop
pop
hlt
pop
jmp
pop
lahf
mov
imul
arpl
jle
call
fninit
pop
xchg
pop
icebp
xchg
iret
loopne
in
xor
sbb
push
inc
xchg
jge
xchg
and
es
(bad)
push
repnz
(bad)
mov
popa
sub
icebp
push
call
mov
mov
sbb
mov
push
mov
inc
scas
movs
fsub
cmp
rol
xchg
movs
loop
ss
std
xchg
inc
mov
mov
addr16
push
xchg
adc
call
mov
sub
dec
push
out
dec
add
daa
mov
mov
adc
pop
add
jo
loopne
mov
mov
lods
push
iret
loop
xor
lds
rcl
inc
mov
aam
mov
cld
pop
xor
push
jbe
aaa
mov
out
hlt
add
xor
out
xchg
ret
xor
retf
xor
push
imul
iret
adc
mov
ret
jb
cmovs
push
data16
(bad)
cli
call
fstp
imul
jl
dec
xlat
test
jmp
sub
aaa
ins
sbb
xor
enter
add
movs
mov
xchg
in
jae
lea
mov
repz
cmp
(bad)
push
push
fisttp
push
test
mov
jb
xor
(bad)
adc
add
and
add
push
paddusw
bound
or
add
mov
mov
add
js
in
adc
js
loope
je
mov
(bad)
repz
lahf
jo
ins
leave
push
mov
sti
jo
aam
mov
aam
fist
jecxz
sbb
inc
sbb
test
sbb
cmp
repz
pop
int
adc
mov
jge
sub
loopne
ss
jb
or
add
into
iret
pop
sub
mov
stc
jnp
mov
jp
(bad)
xchg
mov
xchg
call
push
lock
mov
les
push
xchg
sbb
mov
mov
test
mov
rol
loope
aam
push
push
pop
(bad)
pushf
in
scas
adc
sub
xor
xchg
mov
sbb
call
jmp
(bad)
scas
and
mov
push
fild
in
xchg
lods
rcr
or
cmps
and
push
lods
fst
pop
add
(bad)
jecxz
pop
test
(bad)
jo
add
mov
popa
test
(bad)
mov
pushf
xchg
xor
mov
enter
add
hlt
imul
mov
mov
in
lods
jno
sbb
pop
movs
loop
mov
loopne
out
in
loopne
mov
xchg
xchg
movs
mov
stc
imul
hlt
sbb
xchg
ins
repnz
add
sub
enter
test
out
xchg
inc
out
aaa
outs
(bad)
pop
scas
dec
mov
xchg
sbb
addr16
xor
xchg
aad
jl
sbb
sahf
xchg
mov
stos
js
(bad)
mov
xchg
dec
jo
mov
push
xor
nop
cdq
pop
inc
pusha
push
mov
xchg
mov
loopne
mov
ret
mov
(bad)
mov
jmp
clc
test
push
or
retf
ret
bound
mov
rcr
mov
movs
mov
movs
dec
iret
aam
clc
xchg
pop
je
xlat
(bad)
popf
aaa
pop
stos
call
call
sbb
pop
adc
xchg
popa
push
or
test
mov
iret
dec
(bad)
das
add
mov
dec
sbb
das
mov
pop
mov
(bad)
sub
push
adc
not
ins
test
xchg
pusha
test
pop
mov
mov
xchg
popf
xchg
icebp
inc
inc
inc
call
sub
test
(bad)
cld
cmp
pop
daa
xor
movs
inc
jge
clc
mov
jecxz
cmp
lds
hlt
xlat
aaa
xchg
loopne
ja
inc
fxch
pop
mov
hlt
hlt
fadd
adc
sti
sbb
(bad)
jo
out
sub
idiv
bswap
repnz
aaa
movs
push
rcr
clc
std
bound
xchg
in
sbb
adc
js
repz
or
add
fisub
dec
pop
jmp
pusha
ret
mov
test
xchg
sbb
mov
xor
cmp
inc
ss
pushf
cmp
pop
and
lods
push
mov
dec
xchg
loopne
ss
outs
test
and
or
retf
adc
mov
jg
mov
mov
fs
fwait
jo
seta
bound
movs
or
pop
mov
ja
or
std
retf
icebp
ins
push
push
adc
push
or
sub
lds
pop
sbb
inc
fisubr
ror
ins
test
xchg
jp
stos
ror
inc
adc
jo
jge
push
jge
cdq
and
enter
repz
outs
adc
xor
das
inc
jle
aam
xchg
pusha
rcl
cwde
and
lds
stos
xor
mov
div
adc
test
ret
aad
nop
adc
push
jge
adc
mov
adc
mov
adc
stc
loopne
js
xchg
mov
fcom
out
iret
xor
adc
pop
ret
add
pop
adc
or
scas
pop
jmp
sar
inc
adc
in
scas
mov
nop
adc
jecxz
outs
and
jbe
shl
xrelease
pop
jmp
inc
jge
dec
cmp
mov
dec
cdq
cmps
xlat
push
pusha
xor
jb
inc
out
lods
mov
loope
mov
ficom
sbb
icebp
dec
jbe
fiadd
imul
vpand
push
aad
and
test
out
ror
xchg
(bad)
hlt
or
pushf
push
nop
(bad)
test
jge
daa
dec
scas
cmps
gs
leave
daa
mov
mov
cmp
mov
pushf
loop
mov
stc
xchg
mov
das
leave
daa
cmp
add
jo
xchg
push
or
push
xchg
jo
push
lock
lahf
popa
push
add
pop
jecxz
retf
adc
pop
mov
adc
push
fmul
out
stos
js
adc
test
dec
fist
test
bnd
pushf
test
test
mov
pop
push
and
in
pop
pushf
xchg
cmp
xchg
xchg
push
loopne
pop
rcr
fbstp
mov
xlat
jb
xor
rcl
rcl
mov
fdiv
cmp
sbb
adc
in
mov
loopne
inc
shl
cmps
xchg
jg
push
jg
jo
pop
mov
sbb
xchg
or
xor
lds
addr16
mov
dec
shr
(bad)
(bad)
or
loopne
out
outs
mov
inc
popf
mov
sbb
scas
push
out
mov
rcr
enter
dec
(bad)
adc
dec
(bad)
outs
nop
mov
or
div
add
push
dec
xchg
lea
and
add
mov
push
xchg
jns
jmp
dec
fisttp
enter
xor
or
retf
into
xchg
ror
sbb
cdq
pushf
pusha
lahf
test
mov
pop
rol
hlt
xchg
inc
mov
retf
mov
pushf
inc
mov
retf
mov
xchg
inc
fst
mov
add
lahf
lock
xor
xor
and
and
mov
adc
lahf
and
ins
cwde
sahf
jecxz
scas
rcr
call
enter
xchg
test
jmp
xor
sahf
loope
and
sbb
dec
mov
inc
jecxz
dec
jge
mov
pop
dec
stos
es
aam
lds
cmp
fimul
lahf
push
sbb
jge
cmp
lahf
imul
lods
call
push
out
or
(bad)
fsubr
jl
mov
test
xchg
sbb
in
sahf
jecxz
xchg
xchg
cdq
cmp
jle
out
jmp
sbb
test
fsub
lea
pushf
xchg
xchg
lahf
mov
dec
iret
adc
mov
xchg
adc
mov
cld
lock
jp
jb
iret
mov
mov
stos
xchg
mov
popa
mov
jg
enter
les
xor
ja
fs
push
jb
retf
pop
popa
cdq
adc
push
test
pop
jecxz
mov
fnstsw
jg
out
iret
or
mov
std
int3
cmps
mov
mov
or
xchg
fistp
data16
xchg
mov
(bad)
xor
xor
in
jl
sbb
mov
(bad)
fbld
add
jg
jp
xchg
mov
mov
fcomip
shr
pop
out
ret
cmp
cmps
ret
loop
mov
cs
jge
outs
shl
mov
rcr
push
mov
test
int3
sbb
mov
stos
mov
xchg
mov
ss
loop
test
xchg
pop
fadd
jp
mov
outs
ret
pop
retf
adc
cmp
imul
xchg
dec
dec
push
xor
aas
adc
dec
scas
adc
scas
mov
popa
push
mov
mov
in
nop
add
imul
call
mov
cmp
push
clc
jecxz
cmp
adc
dec
sbb
jecxz
shl
xchg
jle
loop
inc
test
test
aaa
call
sbb
mov
stc
rol
xor
xchg
lds
cdq
mov
xchg
shl
(bad)
repz
lds
(bad)
sbb
js
sbb
push
push
add
sub
or
mov
js
sahf
push
xor
popf
mov
rol
repz
(bad)
ret
mov
jmp
add
sub
ret
xchg
adc
adc
mov
add
mov
jb
pop
sbb
pop
sbb
dec
jecxz
add
pushf
push
add
mov
adc
icebp
sbb
or
pushf
push
or
mov
mov
push
into
xor
xchg
sbb
cdq
addr16
jge
dec
mov
retf
mov
jg
jns
sub
aad
and
pusha
fwait
enter
ret
add
(bad)
mov
jecxz
mov
push
mov
js
jl
retf
test
hlt
rol
int3
xchg
inc
stos
jmp
jb
pushf
mov
jns
jns
jae
daa
inc
loopne
mov
mov
pop
mov
or
leave
dec
addr16
jmp
mov
call
mov
xchg
xchg
adc
fild
in
jle
scas
sbb
ficom
push
adc
and
inc
or
xchg
out
pop
jb
or
sub
sahf
or
push
mov
js
in
inc
retf
push
fsub
(bad)
in
jg
push
in
sub
shr
test
cmp
dec
stos
push
loope
mov
mov
lods
xor
cld
sti
outs
jp
xor
test
popf
aas
mov
fwait
in
mov
push
out
cmp
mov
test
sahf
pop
mov
(bad)
jmp
(bad)
adc
mov
xchg
in
mov
mov
movq
call
mov
mov
xchg
shl
adc
inc
jge
repnz
sbb
jg
push
pop
scas
arpl
dec
leave
encls
pop
sahf
loopne
leave
(bad)
invd
push
ins
imul
nop
and
unpckhps
adc
push
ins
pushf
adc
sahf
xor
mov
mov
mov
cld
stos
test
xor
jle
xor
test
sahf
(bad)
mov
xor
pop
(bad)
(bad)
xor
popf
jecxz
popf
push
pop
retf
push
push
jne
retf
sub
sbb
xchg
fsubr
imul
xchg
xchg
pop
ja
xchg
jecxz
mov
xchg
outs
sbb
fdiv
sbb
xor
int
cmp
xchg
ins
mov
in
cmp
push
je
jno
push
fdiv
xchg
and
add
es
cmp
xchg
xchg
imul
and
outs
jecxz
test
jp
mov
jmp
lods
ret
fcom
push
sar
inc
(bad)
repnz
loopne
nop
sbb
call
call
int
(bad)
xlat
dec
xor
adc
arpl
imul
push
ret
sbb
rcl
pop
outs
sar
out
sbb
cmp
jge
sub
or
loopne
mov
ffree
pop
sub
out
rcl
rcr
mov
clc
or
test
xchg
sbb
mov
sahf
mov
lahf
scas
in
jge
mov
and
mov
retf
xchg
(bad)
xlat
and
movs
add
push
enter
fidivr
inc
aas
inc
jl
in
jge
fwait
imul
cld
fidiv
push
and
mov
push
xchg
cmp
jmp
xchg
lahf
and
pushf
dec
mov
shl
dec
xchg
adc
sahf
xchg
jecxz
push
pushf
leave
ficom
xchg
jge
jmp
mov
mov
js
out
movs
xlat
xchg
pause
sub
adc
lea
daa
clc
xchg
std
push
push
jg
sub
add
xchg
mov
in
xor
cdq
pop
repz
fidiv
mov
mov
push
mov
or
scas
sbb
popa
loope
mov
ss
inc
mov
scas
pop
inc
mov
fsub
fmul
repz
aad
pop
add
jns
loopne
jno
xor
lahf
test
ss
xlat
popa
dec
fstp
test
imul
pusha
rcl
ins
movs
push
ins
fucomp
mov
xchg
sar
neg
ret
fbstp
icebp
push
adc
mov
xlat
(bad)
xchg
shr
push
push
sbb
imul
rcr
jl
sbb
mov
punpcklwd
pusha
push
lahf
dec
popa
sub
xchg
xlat
mov
cmps
or
scas
rol
xor
mov
not
and
mov
xchg
inc
jne
aam
cmp
nop
rcl
jae
ret
mov
enter
(bad)
stos
(bad)
push
inc
jne
push
jp
push
fsub
or
in
stos
(bad)
jge
sbb
mov
ret
lock
call
sub
push
mov
mov
std
and
js
aas
nop
dec
test
pushf
(bad)
out
pop
sti
jecxz
jb
mov
pusha
xchg
cmps
xchg
push
cld
loopne
mov
fld
xlat
bnd
xchg
dec
(bad)
xchg
mov
loopne
sar
loopne
bound
xchg
sar
adc
rcr
adc
iret
mov
jge
(bad)
push
jg
adc
das
int3
std
cmps
int
into
dec
fwait
inc
push
sub
into
mov
out
lds
cdq
or
test
mov
ret
(bad)
cli
icebp
mov
jbe
xlat
xchg
xchg
jge
test
popf
pop
xor
jnp
scas
sbb
fadd
mov
test
jnp
retf
imul
out
call
loop
sbb
mov
enter
clc
in
hlt
lods
and
inc
retf
pop
sbb
mov
cdq
sbb
mov
cmps
popf
lods
ins
push
repz
xor
cmps
push
or
mov
test
clc
jg
push
push
lods
xlat
mov
cmp
pop
test
(bad)
cli
push
pop
pop
fistp
scas
xchg
js
mov
xor
retf
mov
jmp
ds
imul
or
bound
xchg
outs
jl
xor
lods
leave
pop
leave
sub
push
jecxz
dec
retf
or
and
push
mov
push
loop
push
cdq
test
shr
xchg
fstp
sbb
(bad)
pushf
sub
repnz
push
iret
aam
mov
ja
ins
neg
xchg
mov
jl
and
or
scas
mov
ret
cmps
pushf
(bad)
fsub
sub
arpl
es
jb
or
pop
jnp
mov
jmp
cmovns
(bad)
jmp
fwait
jl
(bad)
fimul
aas
rcl
adc
xlat
mov
mov
mov
xchg
push
and
mov
pusha
into
mov
and
nop
jmp
dec
retf
out
mov
ret
fdivrp
iret
or
(bad)
adc
push
and
mov
xchg
mov
or
cwde
and
lahf
or
push
ffree
test
cmp
dec
mov
(bad)
mov
and
imul
movs
add
iret
cmp
es
mov
dec
data16
inc
ret
cdq
mov
pop
jmp
cdq
stos
js
adc
das
xchg
int
shr
cli
mov
push
lods
lods
ins
jecxz
sbb
loope
fadd
loop
cmp
pop
retf
dec
jge
adc
mov
xchg
in
clc
ret
loopne
fadd
and
or
lock
dec
or
pop
xor
cld
xor
imul
cmp
daa
push
adc
push
jmp
add
adc
(bad)
mov
adc
enter
aam
shl
push
jecxz
mov
push
test
rol
call
(bad)
mov
(bad)
into
cmp
daa
(bad)
pop
mov
imul
xchg
out
jecxz
cmc
mov
and
mov
push
lods
loop
cmp
jne
pushf
iret
ss
into
add
rcl
pusha
cmp
fsubrp
jne
cmps
jo
dec
retf
jg
and
in
sbb
xor
xchg
pusha
or
pop
iret
test
icebp
loop
jmp
mov
hlt
xchg
mov
jmp
xchg
push
xor
add
mov
add
stos
sahf
add
pop
mov
iret
leave
nop
jge
test
(bad)
push
(bad)
outs
movhps
repnz
xchg
retf
aad
out
mov
fstp
enter
iret
push
pop
ror
xor
fisttp
xor
jmp
mov
jl
scas
sub
sub
and
cs
shr
addr16
popf
mov
adc
shl
stos
add
retf
jae
mov
popa
fadd
sbb
ret
push
ins
gs
aam
xchg
mov
sbb
loop
in
sbb
cmp
rol
ret
jbe
adc
nop
movs
retf
retf
push
movs
mov
pop
xchg
jbe
pop
idiv
loop
mov
test
or
stc
das
mov
xchg
movs
ins
pop
stc
out
push
in
(bad)
loop
movs
test
xor
inc
mov
mov
fwait
lods
jo
fidiv
stos
pop
ret
jmp
enter
imul
cld
adc
ror
test
inc
push
xchg
xchg
cmp
jae
add
push
xchg
outs
fiadd
std
xchg
xlat
sbb
in
mov
arpl
ins
dec
fnsave
pop
scas
cdq
pop
scas
xor
mov
loopne
add
xor
or
jl
aam
pop
(bad)
ret
lock
mov
pop
xchg
cmp
pop
std
xchg
lea
mov
stos
jo
mov
mov
mov
int
xchg
add
mov
mov
ret
mov
call
icebp
cdq
pusha
repnz
icebp
loope
aam
retf
call
mov
lods
push
jp
addr16
sbb
and
sub
outs
mov
in
cli
mov
mov
or
aad
cmp
sbb
dec
sbb
and
sub
in
adc
sub
jge
ret
sbb
xchg
in
xchg
in
fcomp
mov
loopne
cmp
or
icebp
sbb
push
sti
sbb
mov
aam
cmps
loop
retf
(bad)
pop
and
ror
fimul
mov
and
aaa
das
mov
mov
scas
fistp
mov
cmp
out
stos
mov
es
sbb
jo
pusha
(bad)
das
(bad)
sbb
ja
nop
pop
lea
pushf
push
iret
adc
or
push
push
aam
popa
inc
jo
cmp
in
repnz
js
adc
mov
test
je
jecxz
outs
sbb
xchg
mov
fistp
les
lea
(bad)
fdivrp
mov
fwait
ret
xchg
xchg
xchg
daa
jbe
pop
ror
mov
adc
xchg
adc
add
pop
stc
add
aam
or
(bad)
jl
fidivr
mov
in
sbb
xchg
xchg
cmps
push
sub
inc
add
nop
nop
scas
call
jno
test
or
push
adc
test
xchg
fsub
pop
mul
add
xchg
rcl
adc
mov
pop
push
iret
mov
push
xchg
(bad)
fwait
rcl
shr
push
retf
and
add
push
xchg
fsub
mov
retf
jle
cdq
xlat
jecxz
xchg
es
add
test
stos
sub
cmps
xlat
ins
iret
cmps
in
popf
mov
out
test
mov
and
mov
hlt
push
test
imul
ins
inc
add
xor
adc
fs
mov
sar
jp
and
popf
(bad)
and
sahf
leave
out
or
xor
ror
lock
fstp
sub
jl
add
adc
push
fwait
pop
(bad)
movs
mov
xor
mov
fld
push
aam
lea
and
pop
push
mov
loope
inc
(bad)
fwait
xchg
jl
jle
or
scas
cdq
xchg
jecxz
rcl
loopne
and
inc
sub
loopne
in
in
pop
sub
dec
dec
jne
pop
mov
movs
and
sar
mov
fisubr
rcr
sbb
dec
or
xchg
mov
push
xchg
cs
adc
imul
cdq
mov
pop
jecxz
pusha
nop
dec
jp
js
call
jbe
xchg
lods
mov
pop
loopne
out
leave
pop
lahf
into
push
leave
sub
lock
or
mov
popf
je
outs
mov
imul
loope
nop
add
fild
imul
jecxz
push
sahf
psrld
fld
fbstp
xor
fsub
xor
shr
sub
sahf
mov
xor
mov
mov
mov
mov
sar
bound
mov
push
adc
pop
aam
stos
out
xchg
jg
push
jbe
movs
push
push
jns
mov
movs
mov
cmp
movs
and
pop
pop
fstp
sub
add
and
test
mov
xchg
lods
xchg
ss
xor
or
mov
jbe
push
and
xchg
aaa
or
adc
cli
fnstsw
fild
xchg
mov
jmp
xlat
int
mov
bound
xor
retf
cdq
and
mov
jo
bound
data16
xchg
and
fst
mov
xchg
pop
fst
fld
imul
xchg
fist
retf
dec
jmp
jmp
mov
mov
out
xlat
xchg
arpl
ret
leave
add
scas
cli
ins
(bad)
adc
loopne
lds
enter
pop
push
js
les
mov
mov
mov
jno
pop
mov
clc
lods
ja
nop
rcr
inc
pushf
mov
sar
mov
pop
test
test
lahf
adc
mov
fcom
or
mov
jmp
and
call
enter
mov
nop
(bad)
sbb
iret
iret
sub
ja
xchg
rcr
sahf
retf
push
jmp
mov
sbb
mov
xchg
sub
lahf
mov
inc
outs
loopne
mov
xchg
mov
retf
inc
xor
call
sub
cmp
movs
xor
xor
fdiv
test
popf
fstp
outs
mov
xchg
xchg
pop
jecxz
xchg
nop
in
cdq
xchg
aaa
mov
ins
sbb
add
jecxz
cmp
and
mov
and
jbe
shr
imul
cmps
adc
outs
sbb
push
xchg
and
nop
aaa
pop
mov
mov
shr
aas
movs
loope
pushf
jo
jl
adc
fisub
dec
loop
pop
mov
movs
mov
repz
cdq
iret
sub
ret
rol
mov
jo
mov
mov
adc
xor
mov
inc
movs
lds
cs
fwait
iret
(bad)
aaa
or
cmp
loopne
and
(bad)
into
add
pushf
out
dec
ror
lea
arpl
mov
mov
push
repz
mov
pop
add
xchg
retf
and
mov
imul
xchg
jge
daa
xchg
ds
mov
(bad)
mov
ja
and
mov
(bad)
xchg
add
fdiv
push
mov
or
adc
std
bound
xchg
sub
xchg
shl
xor
lods
jg
inc
sub
and
pop
into
clc
aam
or
and
mov
push
rol
leave
sub
dec
pushf
add
sbb
outs
lods
inc
xchg
xchg
rol
rol
jg
ins
ins
cdq
adc
pop
sti
xchg
test
pop
inc
xchg
inc
jb
ss
xor
rol
xchg
xchg
dec
xchg
stos
xchg
fmul
fcos
pop
call
mov
stos
cwde
clc
in
sbb
and
pop
scas
xchg
ror
and
mov
adc
in
xchg
rep
aam
(bad)
xchg
xchg
sbb
adc
call
mov
mov
mov
xchg
out
mov
aam
jg
mov
dec
loopne
and
fst
fcomip
sbb
sub
scas
mov
fwait
and
push
cmp
or
sub
pop
hlt
mov
lahf
jg
imul
and
mov
fisttp
ja
adc
sub
mov
jmp
hlt
xchg
mov
and
push
stos
test
push
xchg
(bad)
jecxz
rcl
push
xor
popf
jo
and
lahf
jecxz
xor
test
scas
xchg
out
fwait
test
test
mov
mov
rcl
test
lea
jecxz
inc
sbb
jecxz
js
mov
mov
sahf
sub
sub
and
imul
push
xor
mov
lahf
xchg
mov
pop
ds
dec
movs
mov
xchg
fcomp
mov
(bad)
rol
push
push
adc
xchg
call
mov
std
add
sbb
xor
and
pop
jmp
push
pop
fwait
inc
fcomp
xchg
and
jmp
dec
ret
xchg
mov
xlat
imul
jno
sub
loop
sbb
ret
jae
fwait
mov
fild
test
cmp
push
fwait
(bad)
jno
push
mov
aaa
rcl
imul
imul
mov
adc
popa
xor
pop
sbb
je
sub
push
pop
popf
(bad)
jg
mov
mov
push
mov
loop
div
pushf
movs
xchg
idiv
sbb
lahf
add
xchg
rcl
adc
pusha
inc
xchg
add
add
and
mov
retf
mov
call
inc
mov
fcom
imul
aas
outs
(bad)
push
test
pop
(bad)
loopne
outs
mov
xchg
daa
jge
inc
jg
dec
stc
adc
mov
mov
ret
dec
jge
mov
jg
pop
test
shr
mov
xchg
mov
jbe
test
or
cmp
hlt
and
clc
iret
jg
xor
out
out
fidiv
push
inc
mov
pop
and
aam
jecxz
scas
je
cmps
movs
push
movs
mov
dec
inc
xchg
lds
mov
fdiv
xor
cmps
jg
dec
inc
add
sub
jnp
ret
sub
popf
jge
pusha
call
shl
lds
das
mov
sahf
push
fstp
adc
ss
xchg
jo
leave
mov
lds
push
mov
div
jmp
push
pop
push
imul
mov
cmps
movs
fmul
dec
stc
dec
inc
call
cmp
popa
nop
push
aaa
sub
sub
popf
dec
add
enter
popf
cmp
(bad)
push
cdq
push
xchg
dec
push
jmp
jl
ficom
push
call
out
sar
cmp
jo
ja
mov
and
adc
clc
mov
call
popa
pop
stos
je
shl
mov
mov
rol
retf
or
lods
push
sub
enter
sar
xlat
daa
inc
fs
aad
cdq
pop
push
pushf
xchg
xchg
adc
in
jne
test
pop
sbb
pop
xchg
(bad)
sub
xlat
fst
lahf
push
fdivr
fwait
cmp
sub
inc
retf
pop
pop
outs
cdq
pusha
mov
dec
pushf
sub
mov
inc
adc
add
mov
(bad)
mov
mov
xchg
xlat
add
xor
jmp
pand
aas
lods
jg
jg
in
ins
dec
push
dec
fadd
mov
hlt
ror
mov
push
ss
mov
ficom
cmps
jl
xchg
(bad)
mov
test
sbb
or
rcl
pop
hlt
cmp
test
xchg
test
(bad)
test
mov
mov
retf
pop
fs
ret
push
mov
shl
sub
mov
inc
lahf
fist
jo
ins
idiv
mov
into
dec
xor
or
aaa
mov
cmps
lahf
leave
rcr
arpl
sbb
test
jb
or
loopne
cwde
xor
mov
mov
adc
mov
mov
pop
sub
dec
mov
sub
(bad)
push
pushf
mov
loope
jb
sub
sbb
hlt
xor
mov
xchg
cmp
sbb
sti
js
fild
mov
enter
cdq
sbb
hlt
dec
jge
adc
aas
lahf
mov
sbb
pop
(bad)
sbb
test
cmps
lahf
push
(bad)
sahf
(bad)
scas
xchg
cmps
push
xchg
lods
lock
fwait
rcl
loopne
mov
adc
lds
xchg
xchg
test
and
rcl
retf
fwait
mov
xchg
aas
stc
adc
in
popf
xor
jo
push
fisttp
pop
inc
jg
aaa
jbe
aad
shl
(bad)
shl
push
fcom
xchg
mov
mov
mov
jp
pop
das
fs
dec
pushf
add
push
loopne
xchg
add
lahf
ins
xchg
fisub
and
xchg
push
nop
jg
(bad)
mov
adc
pushf
inc
mov
xchg
or
xchg
jge
inc
xchg
sub
mov
xchg
test
xchg
sbb
or
scas
adc
mov
repnz
mov
sbb
xchg
push
movs
mov
in
dec
jo
dec
daa
mov
xchg
(bad)
(bad)
aaa
xchg
push
(bad)
jo
xchg
sub
dec
ror
mov
jo
inc
jmp
mov
pop
inc
pop
addr16
imul
loop
punpckhbw
xor
enter
(bad)
in
mov
pop
xchg
shr
out
pop
outs
test
mov
sbb
hlt
repz
mov
and
repz
push
pop
outs
or
sbb
or
jle
mov
pop
adc
lea
xchg
cmp
dec
and
or
fld
pop
and
xor
xchg
out
loopne
stos
and
jmp
call
or
test
imul
push
movs
pushf
fild
in
lahf
sbb
iret
xchg
add
ss
das
outs
cmps
xchg
pusha
fcomp
xchg
(bad)
imul
push
mov
pop
mov
mov
fld
mov
call
adc
xor
mov
ja
push
mov
xchg
xlat
sbb
mov
jg
dec
mov
mov
pop
(bad)
pop
cmc
data16
adc
xchg
sbb
stos
loopne
mov
mov
push
jecxz
xor
pop
ret
sbb
mov
jmp
inc
ror
cmp
hlt
push
push
aaa
jg
mov
fadd
sub
mov
test
lock
lock
test
push
mov
pushf
nop
(bad)
stc
hlt
in
cmp
test
es
fidiv
xor
in
js
xor
(bad)
(bad)
push
add
ja
adc
popf
(bad)
mov
gs
mov
pop
shl
sbb
push
dec
bound
adc
stos
inc
js
jo
adc
shr
ja
lods
push
hlt
(bad)
cdq
test
pushf
xchg
jge
mov
nop
mov
pop
(bad)
movs
test
adc
sti
adc
mov
lods
js
(bad)
out
pop
test
push
or
mov
test
xchg
fcom
bound
(bad)
xchg
mov
ss
adc
lods
or
retf
xchg
or
nop
adc
mov
test
loop
mov
push
pushf
adc
or
add
adc
rcr
and
fistp
iret
lods
mov
(bad)
aaa
mov
bound
inc
mov
xchg
inc
xor
nop
in
data16
stos
jg
idiv
pop
sbb
lahf
retf
adc
push
mov
(bad)
cmp
cmp
sbb
gs
cdq
mov
jmp
adc
jns
xchg
loope
lock
fwait
and
imul
sub
pop
xchg
fdivr
scas
popf
add
enter
(bad)
cmp
mov
fimul
test
cmp
mov
or
mov
push
cwde
outs
lods
push
loope
sbb
push
mov
mov
call
pop
mov
sahf
mov
mov
loop
xchg
mov
push
into
loopne
xchg
or
pop
jmp
(bad)
xor
push
adc
mov
movs
sub
mov
pop
iret
xor
(bad)
pop
adc
rol
clc
ret
cdq
mov
adc
lds
pop
enter
xor
adc
fcmovnu
cmp
nop
stos
test
in
mov
sub
cli
pop
cli
inc
retf
jbe
stos
adc
int
pop
xor
adc
lods
push
(bad)
aas
gs
imul
rcr
ins
jecxz
aaa
push
outs
(bad)
fwait
mov
cmp
sbb
imul
xchg
mov
sub
mov
movs
jb
dec
leave
iret
push
and
or
hlt
and
rol
cdq
and
ret
jl
stc
sbb
fs
lods
shl
adc
mov
ret
gs
das
sahf
xchg
lods
push
cdq
loope
mov
add
sbb
out
push
push
pop
imul
int
and
popf
inc
popf
add
add
and
xlat
in
xchg
loope
mov
fdiv
pusha
rcr
aam
pusha
int3
in
mov
sbb
or
xchg
rep
pop
or
nop
jge
mov
mov
jne
cmp
mov
sub
fiadd
(bad)
sahf
into
adc
stos
push
mov
adc
sub
call
js
fist
sub
jnp
mov
xchg
imul
imul
(bad)
mov
xchg
test
loope
aas
int3
nop
lahf
test
and
xchg
sbb
sbb
mov
adc
je
jecxz
aam
jmp
cmp
pop
fwait
iret
jo
sbb
pop
dec
repnz
sbb
pushf
jmp
in
jl
dec
dec
cs
movs
shl
push
cs
adc
call
mov
jge
jo
xchg
sub
sbb
leave
cwde
(bad)
aad
imul
dec
xchg
pop
cmps
sbb
add
arpl
sub
test
pop
adc
mov
test
pushf
or
inc
or
lods
in
xor
add
jp
fcom
es
xchg
inc
jge
retf
jo
xchg
ins
rol
lock
out
inc
jbe
jmp
ret
push
(bad)
inc
inc
aaa
in
sbb
idiv
xchg
xchg
xchg
dec
lods
test
cmp
sub
mov
cdq
ret
cmp
cli
mov
(bad)
fs
scas
sahf
arpl
xchg
loopne
xchg
mov
xchg
xchg
pop
mov
stc
int
xor
push
sub
sub
out
cmp
in
mov
rcl
into
adc
cmps
xor
xchg
or
push
adc
and
(bad)
iret
data16
fcom
lods
pop
ficomp
jle
jmp
or
jle
inc
call
sub
aam
mov
push
push
repnz
cmp
lods
pop
push
jno
sub
ficom
std
xchg
xchg
pushf
in
lea
sub
or
in
aam
bound
push
fsub
fsub
or
dec
jmp
iret
retf
out
mov
mov
pop
lds
outs
xchg
xchg
jecxz
repnz
jns
cmps
mov
adc
imul
lods
push
in
rcr
jl
call
imul
sbb
xchg
cmp
into
mov
add
iret
in
xchg
fmul
inc
pop
mov
and
xchg
out
cmps
mov
iret
scas
stc
pusha
sub
mov
sbb
xchg
int3
iret
ds
xchg
push
pop
xchg
dec
pop
pushf
bound
test
dec
xchg
cmp
enter
hlt
bound
inc
xchg
in
aad
mov
sub
hlt
call
and
(bad)
pop
movs
sub
dec
sbb
in
in
sbb
add
xchg
mov
in
jo
int
sbb
xlat
test
aam
(bad)
xor
(bad)
jle
leave
in
adc
push
cmp
hlt
test
and
pop
mov
loopne
ficom
rcr
sti
lods
ss
aaa
test
xor
repz
sahf
retf
aas
pop
push
push
fmul
jo
push
pop
call
sub
mov
push
int3
cmc
jmp
sbb
mov
push
cdq
aas
sub
push
dec
pop
mov
pop
push
sbb
mov
fcmovnb
push
add
stos
jnp
adc
(bad)
jle
addr16
or
xor
shl
cmps
test
mov
mov
xchg
aam
arpl
jae
fistp
xchg
es
call
not
jmp
xor
arpl
in
jmp
mov
jo
or
xor
or
mov
aaa
ror
cmp
rol
xor
xlat
(bad)
jmp
xor
fidivr
jmp
shr
lods
test
mov
add
ret
xor
fmul
pop
lods
fsubr
cmp
sbb
xor
or
mov
mov
js
jmp
push
cmp
sahf
test
je
mov
mov
xchg
inc
clc
jmp
add
inc
popf
(bad)
adc
enter
mov
pop
fst
gs
outs
add
adc
push
outs
fist
lahf
pop
mov
int
adc
rcl
(bad)
js
and
ja
fbstp
imul
adc
mov
(bad)
sar
add
mov
jp
je
xchg
lock
ror
pushf
leave
mov
je
stos
loopne
xchg
sbb
ficomp
icebp
sahf
and
xchg
in
add
fsub
cmp
cmp
inc
into
mov
shl
xor
jmp
not
jmp
or
jbe
popf
mov
push
mov
jns
mov
aad
mov
mov
sbb
mov
jo
mov
in
xchg
cmp
xchg
push
xchg
scas
sbb
lods
stos
ins
xchg
(bad)
js
dec
push
mov
sbb
xchg
in
jge
outs
sub
and
push
test
lods
gs
add
mov
cmp
aam
xchg
jo
xchg
scas
ret
rol
iret
rcr
test
daa
cmps
std
lods
push
test
xchg
aas
mov
or
test
fisttp
call
fcom
add
and
mov
add
cld
push
int
hlt
cmp
sub
fsub
int
sbb
fwait
pop
xchg
loope
js
xor
mov
jecxz
jle
xchg
inc
enter
lds
jo
jp
dec
and
pop
push
fild
inc
sbb
cmp
cmps
test
fild
add
loopne
and
or
dec
push
nop
push
scas
test
or
xchg
cmps
push
fwait
aad
aaa
pop
mov
mov
jecxz
push
enter
outs
jb
imul
popf
pushf
imul
loopne
inc
idiv
aas
fwait
sahf
mov
stos
(bad)
xlat
push
scas
jge
xchg
xchg
mov
sahf
fcomp
jmp
and
dec
lahf
mov
pop
xchg
(bad)
xchg
loopne
push
mov
repnz
pop
adc
or
pop
js
push
mov
xchg
sub
nop
pusha
(bad)
sub
sbb
arpl
inc
mov
nop
adc
int3
jecxz
pop
test
jge
add
xchg
outs
mov
(bad)
scas
loopne
cli
fdivr
sbb
sar
or
xchg
shl
nop
cdq
test
inc
jge
inc
fcmovu
sub
(bad)
aad
xchg
push
xchg
int3
rol
pop
aam
fdivrp
adc
sbb
scas
ret
mov
pop
xchg
cmps
mov
xlat
pop
xchg
mov
rcl
das
mov
sbb
mov
push
cs
jmp
(bad)
movs
pop
ja
(bad)
bound
aas
jecxz
sahf
inc
xchg
in
xchg
iret
mov
dec
mov
ins
nop
xchg
mov
fstp
call
test
enter
mov
jl
fcom
nop
jecxz
or
test
js
inc
inc
jo
sbb
fcom
jl
sub
mov
push
movs
push
(bad)
cli
add
ret
enter
int
ins
fld
call
imul
add
dec
ret
lods
mov
cmc
test
xor
adc
mov
mov
sahf
fsubr
jnp
xchg
bound
pop
add
pop
cmp
lahf
popf
ret
jo
mov
mov
mov
and
ja
(bad)
test
pop
mov
into
ret
sbb
loopne
adc
arpl
mov
call
mov
xor
scas
sbb
sbb
add
adc
mov
xlat
inc
mov
and
xchg
outs
aam
jg
jle
xor
adc
or
xchg
ficomp
mov
dec
les
mov
dec
mov
(bad)
or
lods
imul
jmp
push
mov
jmp
fisttp
mov
pop
mov
enter
pop
enter
test
aaa
pushf
ret
(bad)
enter
test
enter
stos
(bad)
mov
sub
and
fs
and
(bad)
cmps
sahf
(bad)
jg
and
ds
or
xchg
inc
and
xor
and
jmp
xchg
iret
mov
or
jae
jecxz
mov
test
xchg
push
xor
mov
sbb
pop
add
test
mov
scas
dec
pop
cmc
sahf
push
jecxz
jg
sar
sub
icebp
mov
ds
pop
mov
adc
shl
shl
adc
loopne
aas
test
lea
call
xchg
sahf
and
imul
popf
fld
xchg
inc
adc
(bad)
shr
pop
cmp
xlat
adc
add
std
xchg
ds
dec
fld
fdivr
sbb
jae
cmp
pop
mul
xor
mov
outs
mov
mov
hlt
pop
and
sti
mov
xor
lock
cmp
xor
fcomp
popf
inc
and
dec
push
xchg
lods
add
lea
push
inc
jbe
cmps
sti
xlat
repnz
clc
mov
outs
jl
scas
mov
stos
dec
sbb
pmaddwd
xchg
jecxz
inc
in
into
mov
shr
xchg
mov
sahf
fmul
pop
lods
loop
mov
mov
cmp
int3
adc
jmp
enter
push
jno
mov
cmps
mov
xchg
inc
arpl
int3
fwait
add
dec
mov
aam
mov
add
xchg
shl
adc
mov
or
cmps
push
push
sahf
ret
or
out
inc
ds
inc
mov
xchg
add
cmps
in
jb
clc
jo
xchg
movs
mov
in
les
dec
jmp
xchg
sti
nop
imul
arpl
popa
cmp
movs
retf
es
and
pop
jnp
mov
cmp
enter
push
mov
jmp
xchg
and
push
pusha
gs
mov
and
cmp
scas
jb
dec
xchg
jecxz
xor
int3
xchg
xor
shl
dec
ins
push
out
pushf
lahf
adc
jecxz
iret
xor
or
arpl
mov
fsubr
imul
cld
rep
sahf
shl
fbstp
bound
sub
out
xchg
sbb
cmps
and
lahf
arpl
mov
loopne
imul
(bad)
clc
and
iret
xchg
mov
mov
loopne
shr
repnz
test
rcl
ret
(bad)
sub
ss
lock
ret
xor
movs
xchg
sub
pop
sar
jmp
mov
dec
pop
pop
(bad)
fwait
lea
aas
fnstsw
jecxz
int3
xchg
xor
mov
arpl
not
xchg
mov
jp
xor
or
cmp
and
xchg
push
setg
xchg
test
stos
mov
adc
xchg
push
xchg
out
rcl
jbe
inc
sahf
rcl
inc
out
mov
fmul
loop
adc
sahf
and
retf
mov
rcl
mov
rcl
lods
or
xchg
fucomp
(bad)
xchg
popa
dec
sar
in
xchg
adc
test
call
sti
xchg
sbb
lods
mov
aad
or
outs
aam
xchg
inc
adc
push
mov
and
add
mov
xchg
gs
xchg
in
lods
push
stos
jecxz
js
sbb
test
sbb
and
xchg
xchg
in
jnp
lods
push
repnz
push
mov
leave
mov
iret
adc
jge
sub
mov
jmp
xchg
loop
rol
xchg
adc
mov
dec
jge
add
scas
push
lahf
in
xchg
pop
retf
icebp
int3
outs
mov
pop
adc
dec
cli
rcl
push
sahf
adc
loop
popa
xlat
push
call
mov
xchg
or
or
inc
sbb
mov
arpl
mov
outs
mov
and
jmp
das
add
ffreep
mov
inc
or
jmp
push
cmps
cmps
xor
repnz
ror
(bad)
popa
aam
cmp
fs
jge
lods
test
(bad)
jmp
mov
mov
and
icebp
daa
aas
mov
cwde
mov
push
adc
pop
pop
push
jnp
(bad)
jge
xchg
cmps
jnp
jle
pop
or
mov
push
bound
idiv
mov
mov
mov
pushf
call
jg
add
rcl
popf
pop
retf
inc
and
ja
or
fisubr
inc
push
push
xchg
push
dec
jnp
fbstp
sub
out
loopne
xlat
shl
add
push
mov
cmps
outs
pop
push
pop
ja
lds
movs
repnz
ffreep
jg
loope
pop
xor
push
mov
hlt
dec
sbb
sbb
adc
pop
(bad)
jnp
jg
jge
loope
rcr
rcl
ds
push
xchg
push
jbe
pop
or
iret
test
sbb
dec
sbb
lods
ins
xor
mov
outs
jne
test
inc
push
movs
inc
mov
or
in
outs
pop
(bad)
in
sbb
jo
xchg
adc
addr16
push
fs
jmp
mov
loop
xchg
pop
outs
imul
mov
mov
retf
sbb
adc
sbb
call
or
pop
jmp
pop
xchg
sbb
and
jecxz
in
test
or
add
cmp
xlat
jae
add
adc
sub
xchg
call
dec
out
in
xor
mov
cdq
inc
cdq
sub
inc
jns
jecxz
xchg
push
xchg
adc
mov
add
lods
add
pop
mov
out
or
or
push
scas
rol
fst
in
div
push
add
iret
retf
mov
cmps
and
loopne
jmp
cli
idiv
sub
(bad)
fdivr
xchg
call
mov
push
jns
pop
mov
or
ret
out
mov
sbb
cmps
fwait
jmp
ficom
shl
add
fidivr
pop
jl
and
jge
cs
je
jns
test
inc
xchg
mov
pop
or
out
mov
cmp
cs
stos
xchg
dec
sti
cs
inc
pop
xchg
xor
(bad)
dec
ja
cs
cmp
mov
mov
and
cli
push
lea
cli
pop
loopne
dec
test
mov
mov
lahf
movs
enter
sub
mov
stos
sbb
pop
dec
(bad)
xchg
xchg
mov
lea
xor
popf
scas
push
ja
mov
mov
sbb
xor
pop
(bad)
arpl
cwde
mov
xchg
and
xor
into
into
mov
cmc
push
xor
call
fcomp
sbb
neg
test
jmp
push
test
leave
out
mov
mov
inc
mov
sbb
repz
dec
xchg
in
fst
daa
rcl
out
or
xchg
cmp
push
pushf
jl
mov
hlt
sub
in
hlt
adc
adc
retf
pop
inc
cmp
inc
cmps
(bad)
(bad)
in
mov
jg
loopne
das
pop
popf
imul
xor
dec
cmp
push
out
inc
cld
xchg
or
les
js
scas
(bad)
mov
mov
pop
(bad)
xor
cs
push
mov
mov
mov
rcl
jge
mov
in
icebp
out
jge
sub
cld
sbb
jne
mov
mov
adc
dec
mov
add
mov
inc
lock
sar
test
inc
sub
xor
(bad)
push
or
push
mov
pop
jecxz
test
popf
jmp
mov
push
mov
add
xchg
cmp
daa
sbb
adc
imul
xchg
jecxz
call
dec
std
es
cdq
push
imul
adc
test
sub
dec
add
(bad)
push
push
mov
pop
xor
in
nop
sar
jae
mov
das
stos
mov
mov
repz
enter
mov
inc
ins
sub
aaa
mov
xlat
cmps
addr16
test
add
ror
xchg
mov
xchg
or
add
push
imul
movs
adc
retf
js
(bad)
aad
mov
pop
cld
test
push
call
int3
and
add
xchg
pop
lahf
rcl
add
xchg
adc
pop
and
pop
fld
rcr
in
dec
mov
aam
hlt
jp
and
mov
addr16
cld
cwde
popa
inc
mov
adc
xchg
xchg
popf
pop
leave
jp
push
sbb
mov
mov
dec
lea
mov
ins
js
jg
mov
pop
imul
xchg
sahf
clc
push
adc
adc
adc
fdivr
fistp
jmp
xchg
aaa
ins
xchg
sbb
mov
sbb
or
in
movs
cmp
loop
call
icebp
rcl
inc
xchg
jge
sub
pop
test
pop
pop
jmp
ins
adc
xchg
in
pop
xchg
fsubr
jne
mov
inc
pop
xchg
jle
or
sbb
push
imul
jbe
int3
daa
xlat
inc
test
loopne
retf
adc
call
mov
sub
jmp
aam
xchg
lahf
stos
fadd
xchg
jecxz
cmp
adc
pop
outs
sbb
xchg
add
ins
pop
xchg
mov
jns
adc
mov
dec
xor
mov
ja
sub
mov
adc
popf
ficom
call
xchg
add
pop
adc
(bad)
dec
shl
xlat
test
test
mov
loopne
xor
into
dec
fcomp
movs
mov
sub
or
int
push
(bad)
mov
in
int3
adc
jecxz
cdq
lds
xchg
jno
jg
daa
cs
push
and
das
pushf
sub
test
jg
mov
inc
xor
mov
idiv
aam
add
addr16
lahf
pop
outs
pop
adc
lods
pusha
sub
pushf
dec
xchg
xor
xchg
add
jp
adc
mov
mov
mov
mov
call
(bad)
lahf
dec
push
adc
aaa
xor
dec
push
xchg
push
(bad)
push
jg
pop
xchg
sbb
dec
mov
rcr
mov
jge
cld
xchg
dec
mov
iret
loopne
xchg
fisub
xchg
imul
pushf
jmp
sbb
sbb
mov
in
scas
inc
or
in
push
shr
cwd
pop
(bad)
pop
push
xchg
xchg
ins
enter
fwait
mov
stos
mov
inc
sti
out
mov
lahf
pop
fistp
xchg
nop
je
jecxz
jne
scas
mov
adc
retf
cdq
or
cmps
and
pop
mov
xchg
inc
xchg
push
popf
(bad)
push
push
add
cmp
int
lahf
imul
fidiv
and
cld
in
hlt
ret
mov
fnstenv
lods
repnz
add
fwait
jmp
dec
jns
and
sub
or
fidiv
sar
mov
enter
inc
lods
push
cmp
pop
sbb
in
push
pop
outs
xchg
test
mov
xor
retf
and
mov
sub
xlat
push
test
lods
and
lahf
in
addr16
mov
jnp
mov
xchg
pop
adc
lods
mov
js
xchg
jge
cs
pop
mov
adc
xchg
ins
add
loop
xor
xchg
push
cmc
bnd
xchg
call
cli
ja
cmp
jmp
pushf
aam
jecxz
je
sbb
xchg
imul
xor
pusha
repnz
pop
mov
dec
sbb
sub
iret
add
ror
push
(bad)
mov
mov
mov
pushf
push
movs
adc
(bad)
adc
arpl
cmps
in
adc
pusha
push
fild
push
mov
push
pop
punpckldq
mov
dec
inc
repz
xchg
popf
sbb
adc
mov
pop
dec
call
or
test
sub
and
dec
xor
mov
and
sbb
call
cdq
sub
dec
(bad)
nop
add
(bad)
or
aam
mov
lea
loope
(bad)
jecxz
and
pusha
mov
iret
inc
(bad)
jg
xlat
add
sti
pop
in
rcr
push
ss
dec
cmp
sahf
dec
mov
retf
ins
or
xchg
(bad)
std
int3
mov
aas
movs
cmp
imul
cdq
in
jge
mov
pop
push
test
aam
lds
mov
fisttp
sub
adc
pushf
mov
sbb
sub
cmp
mov
fst
stos
xor
xor
(bad)
xor
aam
(bad)
adc
or
mov
mov
call
adc
out
xchg
adc
jle
xor
adc
retf
sbb
jecxz
pop
pop
ret
push
mov
aad
lods
out
scas
fsubr
rcr
movs
jecxz
(bad)
stos
repnz
and
mov
push
xlat
jge
dec
cmp
test
push
ret
mov
mov
cmp
jge
pop
mov
lahf
gs
shl
in
ja
lock
(bad)
jge
mov
stos
ror
mov
xchg
mov
add
pop
or
in
aam
adc
sbb
or
icebp
out
mov
xchg
in
imul
fwait
sbb
mov
mov
inc
imul
repnz
(bad)
xlat
push
aad
call
test
retf
push
jg
(bad)
movs
sbb
shl
dec
jns
retf
scas
clc
and
fcomi
ins
repz
jecxz
mov
pop
retf
add
(bad)
xor
xchg
cdq
xor
popf
enter
bound
loope
push
(bad)
mov
dec
cld
mov
mov
xchg
loopne
xchg
pop
(bad)
cdq
adc
lahf
call
outs
push
clc
(bad)
pop
test
cdq
inc
push
push
pusha
mov
xchg
clc
fwait
dec
in
mov
mov
xchg
or
mov
shl
cmp
sub
sbb
(bad)
mov
mov
ror
out
push
inc
rol
inc
data16
mul
xchg
push
cmps
add
test
in
jge
mov
out
enter
pop
test
add
cwde
fadd
or
push
ret
adc
sub
into
or
jmp
push
push
cmp
pop
xchg
bound
popf
mov
ret
dec
xchg
cmp
test
pop
shl
(bad)
lea
test
sbb
xchg
inc
rcl
mov
push
mov
mov
mov
mov
inc
ror
sbb
pop
loopne
xlat
cmp
mov
inc
adc
pusha
imul
sub
lock
ror
lds
nop
adc
mov
inc
int
mov
add
mov
ja
or
loopne
fcmove
dec
lock
sbb
ins
iret
lds
test
mov
xor
mov
mov
rcl
sbb
xor
test
adc
rol
rcl
pop
ror
adc
pop
loop
pop
xor
pop
repz
icebp
mov
in
rol
mov
jmp
ins
(bad)
lock
sub
cmp
xchg
dec
pop
int
loop
ret
in
adc
lock
test
xor
sbb
lds
xor
adc
mov
mov
rcl
add
xor
mov
loopne
lock
nop
mov
cmp
enter
inc
mov
push
xor
sbb
pop
mov
push
movs
and
jae
and
movs
adc
mov
xor
dec
test
push
jbe
mov
jne
or
ss
xchg
fwait
jbe
(bad)
dec
mov
cld
scas
dec
cmp
dec
test
movs
and
ins
push
jno
jb
push
cwde
jo
(bad)
push
and
mov
loop
jmp
in
jl
(bad)
push
mov
in
outs
imul
mov
jo
rol
ret
add
js
and
xchg
cdq
adc
popf
add
scas
imul
(bad)
mov
xchg
imul
rcr
pushf
mov
sbb
mov
mov
test
adc
test
pop
jne
xchg
mov
mov
inc
and
test
aad
jmp
stos
jns
mov
out
inc
shr
fst
fdiv
loopne
mov
xor
ror
ss
jecxz
or
ror
pop
int
push
imul
hlt
pusha
test
xchg
jbe
pop
xor
push
dec
ja
xor
pushf
push
inc
mov
sar
xchg
jl
xchg
pop
dec
fwait
jl
dec
xchg
adc
and
fs
aas
call
in
sub
hlt
test
imul
in
nop
(bad)
xchg
mov
bound
lahf
jle
lea
sbb
test
imul
xchg
pop
mov
int
xchg
(bad)
dec
scas
adc
nop
xor
out
xchg
aas
mov
leave
dec
pusha
inc
test
into
push
retf
call
(bad)
movs
outs
adc
pop
ret
xchg
sbb
es
sbb
stos
sub
xchg
(bad)
aaa
inc
inc
jmp
mov
xchg
sub
xchg
mov
fstp
xchg
xor
popa
iret
push
popf
jge
arpl
lea
ins
(bad)
mov
jbe
sbb
pop
pushf
fsub
(bad)
dec
gs
lods
push
daa
mov
aam
sub
movs
scas
mov
xchg
adc
retf
iret
jle
sub
pop
push
mov
movs
mov
mov
lahf
popf
enter
mov
dec
gs
cmps
pop
mov
inc
xor
addr16
jbe
std
push
leave
retf
inc
xchg
ret
adc
adc
stos
sar
and
adc
adc
sbb
xchg
jge
shl
sub
jge
cmp
push
push
mov
jae
test
push
int
enter
pop
jne
mov
loopne
jnp
or
cli
retf
push
mov
mov
mov
jmp
sahf
stos
cmp
sbb
add
jmp
push
outs
xchg
loope
sub
adc
arpl
stos
ret
jl
push
add
sub
ret
add
(bad)
or
jb
je
ror
shr
jecxz
or
repz
dec
pusha
imul
je
mov
stos
pusha
sub
cmp
sub
xchg
jo
fsubr
inc
cwde
and
xchg
cdq
add
ins
xchg
std
pop
mov
pop
jmp
xor
les
loope
jp
stos
add
cmps
shl
mov
lods
dec
xor
rcr
movs
xor
scas
in
jae
mov
jecxz
pop
mov
push
mov
xlat
shr
(bad)
dec
dec
int
fiadd
jle
inc
dec
xor
movs
and
lods
test
mov
shr
inc
jge
lahf
ror
jo
push
loop
sbb
lods
jge
mov
pop
xchg
and
sbb
jecxz
adc
sbb
and
aas
xchg
test
adc
jne
inc
not
or
push
jl
or
fsub
sub
cmps
ins
mov
xor
sub
xchg
ss
js
fsub
dec
(bad)
in
inc
mov
xchg
mov
jbe
loopne
add
sub
loop
cmp
jg
xchg
enter
cmp
loopne
fwait
mov
lahf
xchg
mov
stos
xchg
inc
adc
fisttp
push
pop
mov
mov
mov
fiadd
aaa
mov
leave
push
fisttp
into
sbb
aam
jecxz
push
sti
mov
inc
pop
cmp
fs
cmp
test
test
mov
pusha
mov
xchg
pop
xchg
sbb
jge
inc
mov
fist
mov
jp
and
jge
and
data16
pop
ins
scas
pop
ror
cdq
nop
lods
adc
mov
sbb
call
push
mov
xchg
ins
push
lds
mov
hlt
and
jge
xchg
ins
je
add
dec
(bad)
stc
mov
mul
movs
lock
retf
mov
push
inc
out
cmps
mov
or
cmp
inc
mov
xchg
add
daa
and
xlat
out
mov
xchg
bnd
adc
stc
adc
xchg
adc
jle
icebp
imul
stos
clc
xchg
enter
in
js
cmp
addr16
pop
fucomip
inc
retf
cdq
and
mov
mov
leave
push
adc
mov
neg
lea
mov
fcomp
fcom
dec
push
fsub
dec
xor
imul
nop
lods
xlat
xchg
push
mov
sub
(bad)
sub
mov
xchg
fmul
mov
scas
test
add
xchg
xchg
cld
mov
mov
xchg
mov
push
pusha
retf
ja
jl
and
lds
dec
inc
cmp
outs
xchg
popf
dec
lods
sbb
and
cs
sbb
adc
jns
nop
xor
adc
jae
mov
inc
mov
in
xchg
shl
aad
inc
in
pushf
push
mov
hlt
push
mov
fstp
inc
sbb
xchg
cmp
xchg
popf
movs
mov
sub
jo
mov
scas
stos
jmp
jg
cmp
stos
sbb
mov
mov
mov
adc
mov
adc
fnstsw
cli
sbb
jg
int
pushf
and
xchg
xor
cmc
xlat
xor
jmp
rol
and
mov
lahf
fs
ficomp
pusha
aam
repz
mov
mov
adc
fadd
repz
pop
jnp
stos
cmp
push
jle
lods
in
aad
push
lods
jmp
retf
cli
xchg
xor
add
xchg
sbb
bound
test
push
mov
xchg
push
jl
jg
test
xor
(bad)
push
shr
das
inc
nop
sbb
push
sbb
jg
xlat
jmp
inc
shr
mov
xchg
pushf
jne
bound
push
mov
cmp
or
inc
xchg
cdq
movs
sahf
lahf
pop
test
xchg
int
or
jle
(bad)
sub
sbb
repz
xor
xchg
jmp
lods
xchg
cmp
ret
cmp
jg
cmps
dec
lods
cmps
inc
jecxz
loope
loopne
aam
xor
push
xor
fld
mov
xor
dec
or
add
mov
jge
jg
jecxz
mov
fst
mov
es
jg
mov
push
push
mov
mov
mov
scas
arpl
ror
mov
mov
push
iret
jmp
shl
aad
rcl
rcr
sbb
jae
pushf
fimul
mov
out
retf
into
xchg
sub
xlat
inc
pop
aas
out
mov
sahf
lods
nop
in
inc
dec
and
test
cmp
fist
jae
cld
xor
fsubr
js
movs
adc
jmp
fdivr
mov
loopne
mov
xchg
xor
lds
pop
cmps
xor
test
sar
sbb
sti
cli
popf
in
inc
add
mov
add
mov
pop
or
je
adc
(bad)
popf
js
call
push
mov
mov
test
push
and
stos
cld
pushf
inc
in
call
addr16
ret
test
cmp
jecxz
lds
push
sahf
mov
mov
test
rcr
inc
in
(bad)
pushf
pop
xlat
movs
fstp
pop
jo
test
mov
clc
inc
sub
inc
aam
jmp
aam
xchg
clc
add
(bad)
fiadd
jmp
xchg
repz
push
test
scas
(bad)
nop
add
inc
lea
(bad)
push
retf
adc
in
mov
je
cmps
mov
js
test
mov
ins
test
push
sub
and
pop
pop
mov
movs
nop
sahf
ret
scas
sbb
mov
xchg
jmp
mov
clc
adc
xor
test
adc
cmp
loopne
outs
jmp
push
sub
push
fcomp
shl
movs
cmc
shl
cmp
add
sbb
xchg
xor
jmp
fild
mov
jg
dec
mov
push
xor
inc
sub
add
xlat
(bad)
imul
test
mov
int3
aam
lock
arpl
jl
xchg
mov
push
dec
xchg
sbb
jp
fst
push
outs
mov
push
pop
(bad)
mov
ret
repz
mov
mov
jno
cmps
jmp
sbb
mov
and
test
or
mov
pusha
outs
mov
mov
push
scas
scas
sbb
and
nop
clc
push
scas
jge
or
lahf
jg
fadd
mov
push
pop
int3
add
ret
jnp
lds
cmp
in
inc
xchg
jp
aaa
ins
jnp
sbb
mov
fstp
enter
test
xchg
lea
xor
fs
jo
mov
lods
pop
pop
iret
pop
fcom
xchg
mov
and
mov
pop
in
and
(bad)
jp
mov
pop
mov
ins
ret
mov
(bad)
hlt
(bad)
cmp
mov
pushf
push
pop
and
lock
and
sbb
popa
fistp
ror
imul
arpl
sahf
call
nop
or
push
push
inc
rcr
push
push
fdivr
and
lods
rcl
lods
mov
neg
mov
je
mov
and
xlat
pusha
(bad)
(bad)
mov
add
in
push
dec
mov
inc
push
or
fadd
jb
xchg
test
xchg
(bad)
sbb
js
xchg
xchg
inc
repnz
add
mov
(bad)
pop
mov
add
sub
sahf
and
int
imul
sar
hlt
xchg
int
lds
ins
(bad)
mov
aaa
adc
pop
mov
jo
mov
mov
movs
test
iret
push
xchg
and
fdivr
cdq
scas
jmp
jmp
pop
shl
ror
out
into
mov
jg
imul
frstor
inc
adc
mul
mov
fwait
xor
rcr
lock
mov
adc
jmp
xchg
inc
mov
popf
mov
xchg
pusha
popa
push
and
lahf
jge
cs
fiadd
out
dec
and
outs
enter
aam
shl
lea
aam
sbb
lods
popa
in
bound
mov
(bad)
sahf
jmp
data16
inc
sbb
cli
rcl
and
nop
repnz
dec
or
js
xchg
push
dec
or
in
ret
je
push
in
enter
jecxz
mov
push
mov
xchg
out
push
and
pop
mov
es
aaa
out
jg
aam
cs
ficomp
xchg
sbb
imul
xchg
fcomp
mov
(bad)
retf
mov
scas
leave
jae
pop
hlt
sub
mov
daa
sub
xor
mov
scas
adc
mov
out
test
ja
loopne
in
mov
dec
adc
inc
jae
xchg
xor
call
ins
lea
stos
loopne
push
jmp
sub
adc
test
in
xor
call
enter
pusha
inc
mov
mov
sahf
into
pop
inc
cmp
or
test
dec
fsub
popf
ds
sahf
xor
sbb
push
aas
jg
jae
xchg
sbb
inc
mov
mov
retf
xor
aad
mov
mov
push
je
cmp
inc
aam
fmulp
cs
lds
mov
stc
mov
jge
stc
xor
jns
mov
test
popf
mov
cld
ficomp
mov
test
aam
add
mov
and
ins
xor
imul
pusha
push
adc
pushf
call
rol
fwait
ja
enter
xchg
add
sbb
fisub
jl
(bad)
(bad)
cdq
xchg
mov
ins
enter
dec
popf
test
ror
popa
pop
shl
push
jns
pop
xlat
retf
push
push
ins
mov
jns
adc
pop
xchg
sub
aam
pop
sub
ins
xor
movs
jb
movs
call
ret
fs
ins
pushf
jmp
push
lods
cwde
retf
pushf
jecxz
push
outs
xchg
fsubp
adc
(bad)
pop
into
jmp
in
mov
mov
sbb
fcom
int3
xchg
xor
push
jecxz
cmp
icebp
(bad)
jge
adc
mov
push
or
push
hlt
mov
xchg
mov
xchg
xor
mov
out
xchg
cmps
pop
into
mov
imul
inc
sbb
jmp
and
add
mov
push
ins
xchg
mov
retf
mov
xchg
sbb
inc
pop
scas
fwait
lods
inc
mov
sub
cmc
inc
pop
test
out
jno
fcom
adc
inc
mov
enter
xchg
mov
cmps
pop
mov
js
mov
mov
pop
xlat
nop
cs
out
add
dec
sahf
pop
ficomp
mov
pop
mov
jmp
repz
mov
sub
add
dec
repz
stc
leave
call
lods
mov
clc
push
push
mov
mov
in
sbb
jmp
push
call
sbb
rcl
push
jp
aas
mov
mov
or
cs
jle
adc
hlt
lahf
aaa
pop
aad
xchg
pop
aam
add
(bad)
mov
rol
dec
ss
les
cmp
cdq
mov
xchg
sub
(bad)
inc
mov
adc
scas
pop
fcom
dec
shl
mov
loopne
fistp
jp
inc
lahf
adc
xchg
sub
dec
xor
pushf
inc
and
dec
lods
loopne
pop
sbb
sbb
mov
call
js
aam
out
shl
sahf
lods
xchg
mov
loop
(bad)
mov
lds
rcr
stos
fbstp
outs
sbb
mov
dec
lods
push
ss
adc
fild
ret
popf
mov
inc
xor
jge
stos
js
outs
ror
arpl
or
mov
outs
jnp
das
ror
imul
retf
ins
nop
movs
out
xchg
out
test
mov
and
jge
movs
jae
sbb
in
pop
in
aad
or
mov
les
xor
push
lods
in
lds
mov
ficom
mov
inc
das
cdq
mov
and
pusha
ret
popa
jmp
mov
or
jp
jle
pop
(bad)
mov
or
(bad)
cdq
arpl
scas
or
xor
lods
addr16
test
inc
in
movs
push
pop
adc
pushf
(bad)
daa
pop
mov
(bad)
mov
cmp
sar
sbb
and
addr16
push
ficom
jno
retf
fwait
sbb
sbb
adc
mov
cdq
xlat
xor
cwde
fs
int3
lods
and
js
push
jecxz
add
iret
fstp
int3
jge
mov
mov
mov
pop
inc
stc
pmullw
cld
inc
xchg
out
popa
std
je
pop
loope
dec
jnp
mov
test
adc
addr16
lea
ror
(bad)
jl
xor
or
hlt
pop
mov
mov
add
push
sub
daa
pop
inc
cmp
popf
inc
or
enter
(bad)
mov
fidivr
mov
fsubrp
rol
mov
mov
fistp
xchg
fisubr
outs
or
push
xlat
test
call
bound
fstp
or
pop
popf
mov
lahf
cld
xchg
jb
push
dec
or
call
test
mov
push
jbe
(bad)
pop
(bad)
or
stos
xchg
popf
add
add
inc
shl
fs
add
shr
mov
mov
inc
add
jmp
pop
and
add
sbb
out
jmp
adc
stc
and
out
xlat
imul
enter
push
test
jmp
push
mov
mov
mov
or
push
mov
adc
ja
out
mov
call
push
inc
cli
push
inc
jg
mov
mov
mov
loope
(bad)
push
and
loop
lods
push
ins
push
cdq
push
fdiv
push
jns
xlat
loopne
xchg
push
sbb
pop
rcr
in
xchg
std
push
sbb
pushf
xchg
jo
adc
repnz
mov
aam
sub
aam
mov
rcl
inc
pusha
xchg
pushf
adc
inc
in
and
push
lock
cs
push
xchg
jle
inc
mov
push
repnz
jno
sbb
imul
jle
adc
cdq
adc
pop
adc
lods
repz
xlat
mov
fsub
ins
fcom
std
leave
lods
jne
pop
adc
pop
test
sbb
fild
test
xlat
fxch
pop
xchg
test
mov
(bad)
clc
jo
fcom
mov
cmps
mov
nop
shl
arpl
(bad)
pop
rcr
adc
xchg
jo
add
call
xchg
mov
fldenv
push
ins
fmul
fs
xlat
ins
xchg
pop
int
fadd
rcl
lods
mov
int3
push
sbb
xchg
imul
pop
in
jb
das
repnz
pop
jge
aas
mov
and
adc
sti
mov
loopne
pushf
test
aam
(bad)
in
xchg
ret
push
or
mov
jo
jnp
int3
cli
test
cdq
cdq
sbb
mov
(bad)
int3
movs
repz
(bad)
daa
jg
mov
sub
out
sbb
(bad)
setae
xchg
mov
sar
and
xchg
pop
out
rcr
out
mov
and
out
fsub
out
gs
adc
scas
pushf
mov
daa
jp
in
mov
mov
int3
das
jp
push
cmp
fisub
fsubr
mov
xchg
cmp
fimul
xchg
fcomp
inc
or
js
add
fs
add
xor
jge
mov
mov
mov
inc
mov
push
fcomp
stos
dec
fsub
movs
cmp
inc
cmp
cmp
xor
jecxz
movs
jecxz
je
sahf
push
cmc
xor
adc
mov
mov
xchg
aaa
lahf
shr
lahf
sbb
xor
and
ins
repz
fistp
jnp
std
addr16
cdq
or
fidiv
cmps
loopne
add
pop
imul
sbb
rol
fstp
xchg
push
or
call
push
loop
fcom
xchg
push
jle
icebp
push
(bad)
jge
retf
ja
mov
and
mov
sahf
pop
push
(bad)
in
shl
inc
adc
mov
scas
mov
jb
push
xor
mov
pop
pop
movs
xchg
shr
(bad)
push
retf
xor
push
sbb
retf
int
out
xor
jmp
add
sbb
cs
scas
push
push
ss
xchg
dec
xor
ret
ficomp
mov
sbb
outs
sub
adc
xchg
hlt
push
push
adc
jmp
sbb
or
enter
cmp
imul
mov
pushf
(bad)
pop
(bad)
mov
jns
xlat
jecxz
(bad)
out
cmp
test
lods
xor
out
jmp
xchg
push
repz
jle
loop
cmps
loop
sahf
test
aad
lahf
jno
in
jge
lahf
inc
cdq
jecxz
adc
cs
adc
lods
data16
add
popf
dec
call
fdiv
cli
push
mov
push
retf
push
pop
aam
push
loope
inc
mov
mov
push
mov
cdq
and
mov
loopne
xchg
push
fcom
imul
outs
jns
xor
es
das
sub
sub
mov
in
mov
mov
test
inc
cdq
lock
bound
push
mov
outs
sbb
scas
sbb
cwde
pop
in
mov
add
mov
jo
xor
lds
fidiv
xor
fiadd
jmp
(bad)
xchg
in
sbb
(bad)
xlat
fild
cmp
repnz
pop
lock
pop
xor
xor
in
mov
cmp
cld
pop
aam
mov
jg
iret
xchg
inc
pop
js
imul
xchg
cmp
inc
dec
jp
sbb
and
mov
in
push
movs
mov
js
xchg
jb
loope
xchg
lods
push
xchg
and
push
inc
xchg
mov
push
ret
bswap
test
sbb
ret
ins
and
inc
bound
jmp
and
mov
xchg
add
push
(bad)
or
mov
adc
sbb
ins
jecxz
mov
jg
mov
pushf
xor
lods
jge
mov
xchg
rcr
test
mov
and
adc
in
pop
jb
sbb
inc
cmc
iret
cmps
les
dec
loop
mov
mov
mov
movs
jmp
sub
scas
addr16
sub
mov
xchg
scas
sbb
pop
(bad)
mov
lock
loopne
retf
mov
xchg
and
pushf
xchg
xchg
xchg
adc
adc
outs
je
xchg
retf
popf
ds
push
mov
movs
fcom
push
nop
adc
jecxz
hlt
lods
shl
mov
aad
cmps
jge
xor
fisub
fist
enter
and
mov
ret
and
test
xchg
cmp
jecxz
sub
cmp
popa
in
or
adc
sub
fcomp
retf
aad
aad
mov
mov
push
cmp
(bad)
ds
pop
xchg
cmps
and
mov
sahf
in
mov
movs
xchg
push
pop
xchg
push
sbb
push
xlat
cmp
and
pop
cdq
inc
retf
fbstp
ret
sahf
dec
jle
(bad)
call
pushf
lods
fild
loop
jns
xchg
mov
jmp
loopne
ja
jge
in
cmp
adc
cs
xor
in
sbb
nop
das
(bad)
push
and
daa
dec
loope
push
aam
mov
push
in
scas
push
add
sbb
aad
cmp
xchg
mov
jne
call
fist
dec
mov
jne
pop
fcom
xchg
std
daa
aas
rol
icebp
jl
dec
jnp
test
fcmovu
xchg
sub
call
cs
test
jge
fwait
nop
push
sbb
dec
test
mov
cmps
in
test
aam
push
outs
inc
(bad)
xor
jle
mov
nop
inc
xor
rcl
adc
pusha
cwde
mov
jmp
mov
mov
mov
pusha
xchg
push
xchg
dec
data16
push
mov
sub
(bad)
mov
inc
mov
inc
sbb
mov
repnz
xor
(bad)
or
mov
jno
push
loopne
xchg
out
adc
ins
mov
test
xchg
sub
xor
stos
repnz
arpl
repnz
mov
sbb
clc
aam
dec
jge
and
jle
xor
aad
mov
aam
mov
jg
lods
sub
adc
(bad)
sub
mov
or
jg
fcomp
aas
jmp
pop
push
clc
mov
mov
xchg
movs
sbb
imul
jg
mov
repz
push
jnp
icebp
leave
sub
int
addr16
pop
xchg
dec
sub
push
hlt
out
dec
sti
(bad)
jbe
mov
add
pop
sbb
push
pop
xchg
push
mov
mov
rcr
jl
mov
jmp
xor
call
xchg
call
mov
jp
push
enter
ins
xor
mov
xchg
mov
sub
addr16
push
push
mov
arpl
lahf
xlat
sub
or
aad
scas
push
test
imul
adc
sbb
xchg
jno
(bad)
pop
lahf
sbb
mov
fcomp
dec
mov
and
dec
push
jmp
mov
mov
aaa
out
mov
mov
sahf
and
sub
(bad)
adc
cli
jb
mov
inc
fadd
mov
pop
sahf
lahf
xor
ins
les
xchg
sahf
or
ret
adc
push
jmp
test
mov
ret
sar
sbb
jno
jle
cmp
or
pop
mov
nop
test
(bad)
out
and
scas
icebp
cmp
push
or
call
push
mov
iret
xchg
retf
ss
push
(bad)
stc
adc
mov
jge
mov
adc
pop
inc
jbe
adc
(bad)
fsub
(bad)
xor
rol
addr16
sbb
retf
adc
push
iret
pop
xlat
pushf
adc
xchg
mov
xchg
ror
rol
jg
mov
fdiv
xchg
arpl
(bad)
retf
sbb
mov
js
test
mov
and
cmp
jge
jmp
pop
xchg
mov
nop
(bad)
mov
mov
fisubr
neg
jg
xor
loopne
xchg
cmp
mov
int3
push
or
push
xchg
jle
xchg
mov
shl
lahf
ret
jl
les
stos
mov
cmp
adc
xchg
rcl
sahf
ds
clc
jmp
pushf
aas
lods
mov
stos
in
pop
fcom
repz
xor
repz
sbb
(bad)
in
mov
jg
and
data16
mov
mov
inc
cdq
jge
sahf
pop
mov
sahf
in
jne
jmp
cli
in
xor
js
dec
pop
repz
jge
dec
mov
dec
pop
mov
mov
cs
scas
rcr
setle
(bad)
mov
mov
fstp
pop
jmp
in
mov
outs
ins
aas
rol
and
jno
ds
and
fst
push
xchg
cdq
rep
scas
mov
es
fcomp
sbb
pushf
or
cmp
add
push
test
push
in
fstp
mov
push
xchg
test
xchg
cmp
mov
push
fmul
ins
bound
jnp
inc
push
xchg
jle
push
xor
mov
popf
mov
dec
popf
mov
push
xor
mov
cmps
pushf
jnp
loope
mov
int3
in
mov
hlt
mov
(bad)
or
sub
sub
pop
sahf
xchg
cmps
shr
add
mov
xlat
pushf
push
inc
je
lock
movs
xchg
aad
sub
call
jecxz
sbb
nop
test
push
fnstenv
dec
dec
jae
movs
iret
sub
xor
sub
mov
rcl
in
xchg
fwait
sar
(bad)
(bad)
repz
mov
frstor
ds
fild
xor
mov
jbe
mov
pop
mov
lahf
rcr
jl
cmp
pushf
xchg
imul
xchg
dec
sub
fst
mov
or
fmul
mov
cmp
ja
push
xor
movs
sub
sub
mov
movs
mov
jmp
pop
test
movs
rep
mov
leave
dec
out
mov
pushf
ins
and
out
repnz
mov
sub
lea
push
mov
pop
test
jbe
pop
gs
inc
hlt
movs
fwait
adc
xchg
(bad)
sbb
adc
or
das
sub
retf
add
cmp
adc
ret
add
dec
scas
jle
or
xlat
(bad)
jbe
cmps
fwait
jb
in
jb
mov
in
mov
push
mov
ret
xchg
and
adc
lods
int3
adc
xor
je
xor
in
mov
sbb
out
int3
adc
fmul
push
(bad)
sub
pushf
mov
dec
mov
xchg
repnz
mov
xchg
sub
(bad)
mov
cmp
xchg
sbb
push
shl
int
stc
xor
ret
push
push
sub
add
pop
outs
mov
cmp
lock
lods
jo
adc
xor
add
sub
xchg
leave
mov
ja
dec
outs
not
lock
jmp
sbb
add
cmp
push
sbb
push
rcl
call
jns
(bad)
ds
push
lea
jb
ss
pop
inc
inc
je
or
popf
pop
aaa
jae
cmc
(bad)
fnstcw
leave
pop
sub
and
loop
xchg
mov
je
xchg
push
pusha
(bad)
push
cwde
mov
shl
mov
retf
jo
push
test
push
push
inc
fistp
cld
pop
xchg
xchg
pop
push
or
ror
pop
jbe
mov
dec
add
jmp
dec
xchg
sbb
xchg
and
adc
mov
mov
jno
dec
push
pop
in
stos
jmp
(bad)
jmp
xchg
push
loop
out
je
add
aas
clc
int3
xor
xor
pop
scas
fisub
sahf
adc
mov
popf
push
xchg
jecxz
mov
xor
js
js
pop
or
inc
or
or
cmps
into
ror
mov
add
sbb
jge
mov
or
sahf
pop
mov
sub
mov
pop
adc
add
pop
jge
mov
enter
mov
inc
mov
fwait
xchg
xchg
rcl
xchg
rol
mov
pop
push
clc
push
jp
stos
mov
pop
mov
pop
lahf
add
add
push
movs
imul
push
mov
dec
or
retf
inc
xor
aas
retf
cmp
xchg
sahf
pop
dec
es
mov
outs
jge
repz
in
pop
call
les
rcr
sahf
movs
push
jge
sub
bound
rol
mov
in
dec
jmp
loopne
xor
push
iretw
mov
add
mov
stos
loope
mov
out
xchg
ins
push
xchg
jge
push
mov
sbb
push
sbb
inc
jne
add
push
push
mov
inc
sbb
jb
dec
test
jmp
add
xchg
and
cmc
imul
lods
mov
(bad)
or
cld
punpckhdq
adc
push
in
mov
cmc
hlt
test
and
mov
popa
cli
popf
mov
jmp
sahf
xchg
scas
data16
mov
xlat
xchg
or
stc
rcr
retf
mov
xchg
xchg
and
jmp
jne
or
ficom
pop
fdiv
sbb
popf
inc
hlt
retf
jl
mov
inc
scas
jg
mov
sbb
lods
push
and
or
(bad)
jmp
aad
rol
ds
jge
mov
je
fs
add
push
add
cmp
fdivr
mov
arpl
mov
sub
jnp
retf
sub
sbb
int3
cmp
push
mov
xchg
adc
adc
xchg
cdq
retf
fldcw
movs
std
sahf
repz
cmps
sahf
shl
push
mov
push
loop
xchg
repz
mov
mov
adc
add
xadd
mov
xor
and
mov
adc
sbb
bound
cld
fild
sub
enter
pusha
pop
enter
cmp
sub
mov
in
scas
pop
adc
jmp
mov
fdivr
or
(bad)
xor
ins
mov
xchg
ja
pop
test
mov
inc
pop
lods
sbb
outs
test
rcr
push
call
jg
dec
scas
test
int
push
xchg
sbb
and
fdiv
jecxz
psllw
cmps
xor
inc
pop
or
jge
xchg
mov
rcl
(bad)
mov
mov
mov
mov
shl
and
mov
cwde
mov
imul
shl
adc
xchg
jge
lods
mov
imul
or
xchg
outs
dec
loope
adc
mov
in
not
ret
clc
push
ret
in
test
leave
shl
and
cdq
sbb
mov
in
push
push
jge
mov
mov
mov
nop
inc
xchg
push
sbb
xchg
imul
or
(bad)
(bad)
cmp
xchg
pusha
push
dec
sbb
dec
xchg
rcl
xchg
add
push
inc
jb
mov
dec
cmp
(bad)
jae
loopne
pmullw
inc
das
dec
jo
pusha
leave
in
jmp
into
mov
jbe
nop
push
outs
xchg
sbb
xchg
or
pop
adc
clc
mov
(bad)
jecxz
pushf
jle
add
sbb
and
rol
cmps
mov
gs
fwait
cwde
add
add
jmp
add
in
push
sbb
dec
push
fcom
xlat
shl
pop
push
test
sub
repz
out
out
sahf
int3
mov
xor
cs
xor
das
add
mov
xchg
ss
jne
out
adc
cmp
adc
clc
xchg
rcl
cs
sub
push
push
neg
(bad)
test
shr
xchg
mov
push
pop
fsubr
(bad)
leave
sbb
mov
hlt
fwait
shl
fs
push
cmps
ret
dec
pop
push
iret
add
lds
cmp
mov
xchg
das
(bad)
lds
or
push
xor
xchg
pop
mov
mov
push
or
aaa
lock
mov
dec
seta
mov
push
shl
push
shr
scas
xchg
loopne
mov
adc
sub
push
sbb
mov
push
pop
cdq
aam
mul
test
scas
push
es
mov
loop
sahf
fdivr
push
jno
xchg
jge
sbb
mov
jnp
daa
dec
sub
sahf
adc
sub
fcomp
in
mov
dec
mov
cdq
mov
xchg
cmp
xchg
popa
enter
add
cs
pop
push
cld
into
mov
mov
mov
pusha
rcl
(bad)
cmp
mov
data16
cmp
or
pushf
sub
dec
(bad)
movd
aas
loope
cwde
xchg
pop
lods
push
fisubr
popf
ret
jae
mov
push
nop
movs
and
rcr
stos
or
dec
in
dec
push
dec
mov
retf
clc
popa
cli
ins
aam
push
lahf
ret
int3
test
push
mov
jno
sbb
xor
jb
xor
add
cmp
es
xlat
das
stos
sub
add
push
ret
jle
imul
inc
and
pop
mov
jb
add
xchg
test
xchg
jns
stos
jge
mov
pop
lock
outs
sahf
sub
ficomp
mov
add
dec
sub
inc
pop
fcomip
shl
adc
sbb
(bad)
dec
dec
mul
jno
inc
mov
lods
sub
cdq
in
mov
cmp
out
ss
sahf
in
shl
push
pop
cmps
pushf
ror
(bad)
and
and
ret
stos
iret
push
or
dec
jecxz
and
lods
imul
je
shrd
mov
test
test
mov
retf
outs
cmps
cmps
lods
add
jb
mov
not
mov
pop
bound
and
mov
retf
adc
imul
cmp
pop
(bad)
or
pushf
popa
ins
inc
rcr
int3
fist
mov
pop
adc
dec
imul
bound
mov
pop
shr
jae
xor
mov
imul
je
jecxz
rol
mov
ret
movs
mov
xchg
cmp
arpl
add
dec
int
jnp
inc
push
fcom
adc
mov
and
xchg
xchg
sbb
xchg
loop
pop
push
aam
xchg
into
sahf
ja
mov
dec
(bad)
aam
push
push
cmp
ret
scas
add
retf
xchg
test
or
test
xchg
fnsave
mov
lahf
call
inc
adc
lock
sbb
test
push
dec
push
lahf
inc
sbb
iret
push
adc
outs
lods
sahf
push
inc
pushf
pop
cmp
mov
ins
and
jl
call
cdq
adc
push
js
hlt
mov
cmp
xchg
fwait
in
xchg
and
imul
fild
adc
fcomp
mov
or
xchg
mov
in
pop
iret
inc
xchg
cmps
inc
ror
sahf
pop
adc
jle
ror
cmp
mov
aad
and
cmps
xchg
jge
lods
stos
push
lods
popf
ja
imul
jge
or
out
add
mov
and
fldcw
retf
mov
inc
fdiv
xchg
and
imul
shr
(bad)
push
sbb
mov
popf
sbb
retf
adc
mov
test
test
fcmovnbe
or
or
jns
pop
jns
sbb
popf
or
fsub
pop
and
aas
mov
cmp
sbb
add
fwait
mov
test
xchg
ins
and
test
cmp
and
add
cmp
(bad)
pop
test
mov
stos
js
into
stos
push
shl
scas
ins
dec
mov
fld
imul
cmp
loopne
sbb
push
scas
outs
mov
jg
sbb
aas
sbb
fadd
sub
test
adc
iret
in
sar
inc
ins
sub
sub
xor
bound
pusha
jecxz
popf
cmp
imul
clc
mov
xchg
xchg
jecxz
bound
lods
lods
sbb
pop
add
ss
pop
loopne
div
sub
mov
lods
xor
and
in
stos
movs
inc
mov
ja
xchg
xor
push
pop
mov
mov
or
pop
jmp
lds
lahf
rol
pop
call
repnz
sahf
jmp
inc
test
sub
lea
mov
xor
iret
rcr
das
aad
jg
inc
js
mov
mov
clc
out
retf
or
sbb
xlat
nop
in
xchg
mov
(bad)
xchg
push
jge
sbb
(bad)
mov
fisttp
nop
movs
pop
xchg
fstp
scas
jne
mov
fisttp
aam
mov
fild
leave
xchg
pusha
xchg
pushf
mov
mov
inc
mov
sbb
pushf
jmp
mov
mov
mov
test
pop
test
cwde
sbb
pop
call
stos
repz
mov
in
mov
push
sub
pushf
sub
push
lds
xchg
xchg
xlat
jge
mov
adc
popa
enter
shl
sub
xchg
sbb
adc
call
ja
jmp
retf
pop
jge
cli
ins
into
imul
jae
push
jge
xor
test
and
lahf
lea
push
mov
ds
(bad)
xchg
out
addr16
(bad)
ret
add
xchg
or
iret
push
pop
lods
sub
jmp
mov
(bad)
int
jno
dec
icebp
push
adc
sub
mov
das
sti
repnz
fisubr
dec
add
in
adc
push
iret
(bad)
cmp
mov
mov
xor
xchg
jecxz
xchg
fs
daa
arpl
jns
push
pop
neg
mov
push
jl
dec
push
adc
call
js
push
lahf
lea
outs
sahf
jle
test
lahf
fsub
sbb
xchg
mov
sub
(bad)
pop
inc
mov
je
call
inc
pushf
in
aad
fs
retf
xchg
push
in
popf
and
out
dec
stos
inc
test
push
mov
sbb
out
fadd
jmp
xlat
inc
xlat
rcl
xchg
sbb
fs
hlt
jmp
mov
jge
mov
jnp
mov
mov
pushf
and
mov
pop
pushf
ds
add
stc
mov
iret
sahf
mov
inc
xor
fisubr
ror
enter
lds
sahf
stos
cwde
(bad)
cdq
cmp
and
mov
rcr
sbb
lahf
out
push
mov
popa
lods
cmp
dec
(bad)
xchg
and
(bad)
pushf
push
mov
xchg
and
mov
es
call
(bad)
jecxz
nop
out
mov
fmul
(bad)
in
gs
mov
(bad)
nop
nop
aaa
mov
outs
jmp
push
sub
retf
hlt
jmp
push
mov
mov
rol
or
mov
push
pop
add
xor
xor
leave
push
xchg
mov
push
mov
xor
mov
or
retf
nop
mov
fcom
sub
clc
xchg
mov
cmc
push
sbb
and
ficomp
daa
xchg
dec
rol
adc
sub
sub
sub
jae
mov
mov
clc
movs
scas
loop
xor
stc
enter
push
dec
or
repz
sub
mov
(bad)
pop
xchg
jmp
(bad)
call
mov
dec
inc
push
sub
sub
lahf
(bad)
add
outs
add
xchg
xchg
pop
dec
sub
adc
add
mov
sbb
ja
cld
test
pop
sbb
in
imul
add
repnz
xchg
movs
sub
jnp
rcl
xchg
imul
sbb
outs
dec
out
mov
sub
xchg
inc
or
xchg
mov
pushf
fsubr
jg
pop
xchg
pop
lods
xchg
rcr
xchg
sub
cmp
loop
cbw
sbb
sbb
ret
fldlg2
outs
fwait
sub
sub
adc
pop
jle
xchg
lock
lahf
sti
rcr
outs
mov
xchg
(bad)
popf
adc
cmps
iret
jecxz
cdq
les
add
cdq
hlt
scas
loopne
iret
shl
pushf
leave
jmp
movs
pop
and
fwait
sub
pusha
cdq
push
aad
mov
mov
cmp
mov
in
xor
stos
mov
test
lods
js
fistp
add
xor
or
pop
lods
repnz
mov
(bad)
xor
ret
lahf
addr16
bound
shr
mov
lea
jmp
cdq
mov
xchg
cmps
pop
xor
sbb
enter
mov
or
pop
pop
cmps
push
call
mov
inc
stos
xor
shr
test
xchg
clc
test
mov
ficom
sbb
pop
mov
xlat
xor
div
xchg
jb
dec
call
mov
push
cld
call
mov
and
add
cmps
cmc
repz
add
xor
data16
add
mov
xchg
(bad)
xchg
imul
jne
(bad)
mov
pushf
adc
dec
fs
cmp
push
inc
cld
xlat
dec
xchg
and
pop
ret
stos
pop
fnstsw
clc
dec
mov
push
in
xchg
sbb
jge
inc
(bad)
retf
push
aas
fsub
pusha
mov
mov
cli
rcr
(bad)
pop
mov
cdq
sub
adc
xor
dec
xchg
sub
fldcw
dec
and
movs
enterw
xchg
xchg
xlat
jge
and
push
dec
pop
mov
addr16
mov
jo
inc
pop
sub
fadd
int
rol
pushf
mov
cmp
mov
nop
cli
pop
or
fist
mov
(bad)
repnz
mov
adc
xchg
mov
adc
jecxz
sub
rcr
mov
mov
test
test
xor
add
xchg
clc
mov
cmps
pop
cmp
pop
push
mov
enter
mov
mov
add
test
push
cmp
sub
adc
(bad)
cmp
(bad)
lock
jne
xchg
mov
adc
lea
pop
aam
pushf
rol
call
lods
mov
mov
push
xor
ja
and
mov
sub
sub
or
mov
data16
jmp
jne
mov
int3
xchg
inc
stos
adc
jecxz
jo
mov
or
in
xor
mov
jns
mov
ret
aaa
pusha
mov
jns
mov
mov
mov
push
mov
in
xchg
lods
jge
xor
sub
add
xor
out
rcl
xchg
nop
push
jo
outs
(bad)
lods
xchg
xchg
imul
xchg
leave
punpcklwd
nop
jp
sahf
ret
mov
call
popa
cmp
jge
hlt
call
jecxz
jmp
shl
div
xchg
mov
lods
pop
jmp
lea
cs
lahf
mov
xchg
test
xchg
mov
(bad)
mov
dec
dec
and
ins
xor
adc
mov
popf
xlat
xchg
mov
pusha
push
xchg
int3
mov
fistp
fwait
adc
push
in
jmp
test
cmovb
mov
int3
imul
mov
jmp
ficom
add
mov
jmp
push
xor
add
mov
mov
test
test
call
cmp
adc
popf
(bad)
add
nop
sub
adc
popf
lahf
mov
xchg
xchg
mov
fild
xchg
dec
cmp
add
cmp
add
sahf
xchg
lds
pop
mov
fidivr
jo
sub
ret
js
jle
ins
repz
push
icebp
mov
mov
call
ja
gs
dec
sti
out
mov
inc
mov
test
test
aas
repnz
pop
icebp
adc
bound
xchg
mov
or
mov
xor
xchg
popf
sbb
ret
into
sub
mov
inc
sub
mov
lock
test
inc
jge
xor
scas
cs
cwde
xchg
sbb
pop
retf
mov
sbb
jge
test
leave
retf
bound
add
push
mov
xchg
mov
mov
mov
inc
sbb
ss
sbb
pop
sub
fimul
xchg
cmp
jge
sahf
scas
adc
xchg
into
and
or
(bad)
jecxz
popf
xchg
addr16
(bad)
push
retf
adc
mov
bswap
popa
clc
adc
mov
mov
inc
jbe
inc
mov
test
push
jmp
sbb
xchg
push
mov
push
mov
data16
retf
pop
mov
dec
test
(bad)
sub
mov
mov
ret
push
xor
js
pop
cmp
mov
inc
scas
leave
pushf
fcom
or
jmp
(bad)
lahf
leave
addr16
pop
in
xor
leave
xchg
push
pop
push
retf
and
in
jne
loopne
movs
retf
jecxz
and
xchg
pop
lahf
sub
xchg
retf
vsubsd
call
jle
cdq
shl
mov
sub
push
imul
or
push
dec
fnstcw
cmps
sbb
ret
mov
lahf
test
movs
xchg
mov
fsubp
arpl
imul
arpl
stos
xchg
xor
mov
fwait
xlat
xchg
ret
mov
pop
mov
adc
lahf
aas
lock
rcl
xor
pop
clc
jb
in
dec
fld
sbb
pop
cmp
popf
stos
inc
xchg
cmp
(bad)
mov
cmp
aam
jecxz
dec
adc
int
popa
jle
retf
iret
mov
cdq
leave
push
imul
mov
popa
adc
jge
push
or
dec
ffree
jg
out
js
add
nop
cmps
sbb
cdq
loopne
jg
xor
out
xchg
loope
loope
xchg
test
adc
mov
jge
test
adc
leave
daa
fwait
mov
sub
fidiv
outs
pop
iret
jmp
mov
push
iret
push
cmp
mov
sbb
loope
mov
mov
cs
xchg
aad
ja
xchg
jb
fincstp
(bad)
aas
mov
jge
xchg
lods
push
jmp
sub
pop
cmps
loop
test
cmp
fisttp
pushf
fadd
mov
(bad)
iret
mov
mov
lods
mov
rol
cmp
mov
and
xchg
(bad)
jle
sub
jmp
sbb
or
sub
push
cmp
push
mov
mov
add
sbb
retf
popf
addr16
fdivr
fwait
mov
push
retf
or
stc
sahf
mov
sub
cld
test
shr
or
(bad)
jae
mov
jp
mov
xor
pop
(bad)
adc
inc
stos
fld
inc
adc
xchg
cmp
inc
and
pop
test
add
inc
xchg
fisubr
sbb
jmp
dec
jns
mov
movs
repz
cdq
sub
xor
xchg
(bad)
test
and
jecxz
fyl2xp1
nop
pop
enter
scas
jecxz
leave
fwait
sub
loope
sbb
xchg
test
arpl
xor
xchg
jo
loopne
(bad)
mov
push
mov
lods
dec
std
arpl
fcmovb
push
mov
push
xchg
iret
test
push
mov
fiadd
xor
repnz
dec
cmp
dec
sbb
dec
les
push
sbb
pop
dec
sbb
jmp
call
(bad)
pushf
xchg
sub
jmp
test
jg
pop
add
pusha
dec
repz
sub
sub
div
push
lods
adc
jge
sub
dec
mov
mov
xchg
sub
data16
fstp
xchg
(bad)
daa
pushf
cmps
push
add
sbb
dec
imul
xor
xchg
pop
jecxz
sbb
dec
push
cwde
jge
popf
dec
sbb
push
and
xlat
adc
jge
inc
popf
popf
pop
pop
push
loopne
push
cdq
in
movs
lahf
jne
lds
ins
leave
shl
rcr
adc
xchg
cmp
loopne
shl
lods
mov
mov
jmp
xchg
jecxz
dec
jmp
jns
xchg
mov
dec
mov
int
push
mov
push
aaa
mov
add
lods
jae
and
dec
or
xchg
mov
retf
(bad)
xor
pop
cmc
dec
ror
retf
dec
push
pop
xchg
push
push
loopne
adc
cmp
adc
xor
imul
(bad)
test
and
cmp
clc
inc
adc
sub
jg
test
mov
popf
outs
test
scas
repz
sub
pop
jecxz
mov
xor
enter
sub
dec
(bad)
mov
xor
lgs
movs
xchg
push
xchg
xchg
push
xchg
sbb
mov
cmp
mov
cmp
adc
ror
ror
or
retf
lea
or
xor
xchg
lods
fxch
or
in
push
in
xor
sti
movs
test
mov
jmp
lods
stos
sar
sub
push
dec
aas
repz
(bad)
and
xchg
push
xchg
out
call
mov
inc
scas
inc
cmps
and
pop
mov
loop
cmp
retf
xchg
xlat
jb
push
dec
xor
sub
or
add
adc
add
aad
jbe
out
mov
xor
jmp
pop
test
pop
xchg
pop
scas
cmps
pop
arpl
(bad)
dec
jno
xchg
les
adc
mov
rcl
mov
sti
sbb
je
fbld
xchg
mov
inc
js
adc
stc
jge
mov
inc
adc
mov
mov
mov
test
vpmulhuw
jl
jo
fcomp
(bad)
test
mov
(bad)
sahf
add
jg
dec
jmp
add
push
jne
popf
jmp
call
add
mov
sahf
mov
push
es
dec
xchg
je
jo
jl
mov
adc
ds
call
xchg
sar
clc
pop
retf
inc
or
xchg
popf
cdq
adc
xchg
sub
xchg
mov
ins
cmps
in
pushf
mov
jg
add
dec
mov
mov
cs
call
pop
movs
mov
sbb
repz
or
push
jmp
or
sahf
mov
xor
cwde
aad
sbb
xchg
cmp
cmc
pusha
mov
icebp
repz
(bad)
xchg
jg
lea
(bad)
nop
pop
xor
aam
sar
iret
(bad)
or
sbb
imul
xchg
fcmovne
and
jge
call
jae
mov
mov
lods
sbb
jge
pushf
inc
xchg
mov
jo
sub
popf
je
pop
aas
jg
scas
lods
cli
into
lea
fwait
xchg
dec
jecxz
jns
add
faddp
gs
dec
sbb
xchg
das
add
mov
xchg
xchg
jg
inc
jns
fstp
imul
sbb
je
sub
xchg
rcr
push
sbb
ins
cmp
(bad)
pusha
dec
not
hlt
fnsave
(bad)
mov
loopne
xchg
xor
jmp
jmp
mov
cmps
jg
jge
sbb
in
call
rcr
jg
imul
lahf
jecxz
jge
dec
mov
in
repnz
sub
pop
cmps
and
adc
push
sub
imul
pop
mov
fnstenv
sbb
jl
adc
mov
dec
addr16
xor
scas
dec
push
cmps
test
daa
inc
mov
aam
in
gs
pop
push
sub
test
push
pop
sub
sbb
xchg
cmp
retf
xor
jmp
mov
scas
inc
cwde
loop
sbb
sub
push
fisubr
adc
loopne
mov
push
pop
xchg
or
mov
and
push
and
xor
shr
lahf
and
cmp
scas
mov
scas
cmp
mov
js
hlt
mov
sahf
mov
arpl
xor
jae
ret
cmps
fprem
ja
xor
push
inc
fidiv
retf
add
shl
mov
std
enter
add
sbb
or
push
mov
jge
out
loopne
cmc
stc
add
cmp
adc
and
cdq
add
popf
clc
jne
mov
out
push
iret
xchg
repnz
sahf
pop
jl
mov
xor
adc
ss
xchg
fmul
lahf
mov
xchg
push
pusha
push
jge
and
push
stos
repz
js
push
neg
ins
mov
and
loopne
ins
test
aaa
ins
aad
ins
lea
inc
mov
dec
xor
mov
and
cmp
and
cli
sub
xchg
adc
pop
loope
adc
and
neg
loope
cmp
and
xchg
je
adc
das
push
cmp
push
call
mov
adc
addr16
jg
fnstcw
lahf
leave
pop
lahf
test
mov
push
add
lea
cmps
test
inc
push
pop
xchg
xchg
jecxz
cli
cmp
jmp
int
mov
movs
lahf
mov
dec
nop
sahf
cmp
adc
aad
rol
ins
sbb
mov
cmp
mov
xor
xchg
jb
test
pop
in
xchg
movs
pop
mov
xchg
dec
sar
std
push
(bad)
xor
mov
adc
in
fdivr
cdq
add
push
dec
int3
ret
scas
and
sbb
or
out
xchg
cmp
out
lods
add
out
jge
shr
dec
enter
fdivr
mov
add
inc
gs
xor
js
dec
cmp
jmp
js
hlt
sub
push
inc
push
mov
fcomp
movs
js
xor
lahf
mov
ret
adc
push
nop
shr
rcl
out
nop
xchg
test
nop
sub
push
push
xchg
adc
outs
push
add
pop
fidiv
and
ret
sbb
test
pop
retf
adc
lahf
sahf
test
mov
sbb
xor
div
fdivr
push
enter
mov
movs
dec
fisttp
ja
mov
retf
push
mov
and
xor
mov
fs
test
mov
push
sbb
dec
and
mov
imul
sahf
dec
ss
pop
inc
push
pop
mov
or
xchg
mov
pop
ret
add
lods
pusha
lahf
jmp
jno
xor
(bad)
adc
sbb
jecxz
loop
(bad)
mov
xchg
(bad)
aad
pop
jb
test
fist
xchg
mov
xor
aam
rol
(bad)
fidiv
out
cmp
adc
xor
fwait
inc
mov
test
jge
loopne
or
mov
mov
fist
test
mov
sahf
pop
mov
pushf
sub
and
sub
mov
push
(bad)
nop
mov
mov
jg
fdiv
into
popf
div
jo
rol
or
xor
loope
sub
or
dec
enter
clc
cdq
aam
jp
leave
ret
xchg
pop
in
or
push
loope
xchg
xor
sbb
xchg
mov
inc
adc
push
iret
loope
aad
mov
add
jl
retf
xchg
jnp
sub
jnp
push
xchg
jge
lock
adc
inc
push
into
pushf
cmp
push
jecxz
xor
push
pop
mov
xor
lods
xor
iret
fadd
rcr
test
data16
ucomiss
cmp
mov
inc
enter
in
dec
jo
nop
int3
int
icebp
and
popf
xchg
jecxz
shl
out
xor
mov
repz
jle
dec
addr16
mov
rol
retf
pop
xchg
push
fcom
xchg
xchg
pop
xlat
inc
mov
lods
mov
mov
mov
rcl
push
mov
jge
mov
ins
mov
xchg
nop
mov
fadd
or
test
xchg
scas
jo
es
lock
mov
mov
pushf
mov
xchg
jae
cmp
push
sbb
ins
imul
adc
cmp
mov
or
push
stos
dec
mov
in
scas
sub
nop
push
(bad)
or
stos
or
jl
rcr
jmp
ins
mov
fucompp
test
mov
push
shl
dec
pop
mov
pop
cmps
jecxz
adc
call
in
xchg
push
and
dec
rcr
fisttp
into
or
xchg
loopne
push
sbb
stos
cmp
scas
xchg
in
jbe
xchg
pop
cdq
fisttp
dec
mov
popf
adc
je
push
lods
jno
popf
dec
hlt
aad
xchg
je
jo
mov
fst
and
xor
jo
sbb
aam
mov
out
or
fist
push
pushf
in
scas
call
jmp
in
shl
in
and
sub
out
sbb
and
sahf
and
jae
mov
icebp
pop
std
jmp
enter
test
and
mov
or
adc
ins
pop
stos
lock
lods
test
lock
cdq
pop
xchg
bound
mov
jg
popf
jmp
shl
inc
jle
inc
ja
(bad)
imul
retf
shr
clc
scas
jg
pop
pop
pop
mov
jle
pop
and
fsubr
loopne
retf
movs
inc
lods
mov
ret
fcmovu
call
popf
mov
aas
pop
gs
push
sub
cs
jae
jg
(bad)
mov
mov
aad
cdq
sub
lods
adc
fnstenv
mov
dec
xchg
cmps
jecxz
pusha
leave
scas
sub
mov
int3
pusha
add
pop
aad
inc
aaa
sbb
jge
ja
test
daa
xchg
pop
fs
jge
sub
push
cmps
hlt
mov
fs
mov
bnd
fcom
aad
daa
clc
aam
test
cmps
dec
xchg
pusha
sub
outs
mov
mov
repnz
jge
ds
pusha
mov
jno
cmp
xchg
jl
jnp
jp
popf
jns
mov
sbb
aad
mov
xchg
nop
pushf
adc
in
adc
fisttp
jo
mov
ror
pushf
xchg
test
push
repnz
in
sbb
jo
fdiv
jmp
push
xchg
add
in
sahf
jge
add
adc
jns
push
adc
mov
mov
cdq
icebp
mov
jl
movs
add
mov
fisub
scas
cmps
xchg
repz
xchg
xor
adc
inc
mov
mov
xchg
cwde
xor
pop
(bad)
sbb
call
fild
shl
mov
mov
pop
(bad)
jmp
fs
push
into
sub
pop
push
push
out
xchg
cwd
sub
push
mov
idiv
and
repnz
pop
jmp
imul
mov
jnp
sbb
movs
mov
xchg
mov
xchg
bound
inc
aaa
or
in
fiadd
leave
adc
leave
outs
jl
mov
push
daa
mov
cmp
iret
jecxz
stc
cwde
scas
and
sahf
jmp
mov
ret
dec
test
enter
fsub
fxch
xchg
jne
mov
adc
mov
lahf
mov
xor
sbb
pop
xchg
popf
and
jp
mov
push
loopne
das
adc
outs
mov
test
jle
into
cdq
push
mov
mov
jge
hlt
outs
xchg
xchg
fdiv
imul
les
nop
ficom
pushf
test
jecxz
into
fs
dec
xchg
out
test
cmc
xchg
add
inc
retf
add
or
push
fdivr
fstp
fnstsw
je
mov
sahf
push
or
hlt
ds
pop
jno
sub
test
push
xor
add
jmp
outs
imul
adc
movs
inc
test
scas
cmc
loopne
push
push
xchg
jmp
jbe
pop
mov
test
repz
int
mov
mov
lds
xchg
xchg
mul
inc
(bad)
shl
xchg
jg
shl
ins
or
pushf
xchg
fcomp
(bad)
fistp
imul
inc
xchg
or
nop
ins
jecxz
jb
xor
popf
cmps
add
pop
xor
(bad)
int3
ret
sti
fs
fild
ins
cld
xchg
nop
pushf
cmp
jmp
mov
jnp
jmp
push
retf
or
sahf
ins
daa
jle
mov
jbe
push
scas
add
das
cmp
and
in
dec
pop
(bad)
(bad)
and
xlat
add
mov
loopne
jle
jl
dec
xchg
inc
mov
pop
lock
mov
cdq
sbb
addr16
stos
mov
dec
jp
mov
out
hlt
jbe
mov
rol
movs
sub
f2xm1
(bad)
jge
xor
fs
push
dec
sbb
in
sbb
popf
push
adc
lods
(bad)
xchg
pushf
je
xchg
mov
dec
jge
mov
jnp
mov
mov
mov
js
sub
enter
adc
add
adc
outs
inc
arpl
sub
jno
mov
ret
adc
outs
xchg
das
js
test
in
mov
sbb
lods
sub
push
or
fs
and
popf
out
inc
nop
lea
push
sub
xor
popf
ret
mov
and
in
xchg
(bad)
mov
(bad)
xchg
xor
mov
or
fidivr
rcl
pushf
add
fs
(bad)
jns
xlat
out
arpl
xchg
add
pop
push
mov
adc
call
pop
mov
enter
adc
fisttp
(bad)
fcom
cs
mov
inc
(bad)
movs
xor
cmp
repnz
call
push
pop
inc
scas
sbb
mov
and
add
push
dec
pop
into
lea
mov
pusha
ror
into
popa
cmp
mov
shr
mov
sub
mov
push
je
xor
je
push
fldenv
xchg
xchg
les
xchg
push
fmul
push
scas
lock
jmp
xor
push
jae
or
sahf
bnd
pop
add
dec
inc
jmp
xchg
imul
mov
adc
mov
call
add
xchg
mov
pop
int3
retf
pop
fidivr
enter
rcr
les
mov
add
mov
sahf
test
mov
ja
add
fimul
movs
xor
xor
jge
out
fadd
add
add
add
mov
hlt
shl
sar
and
les
pop
out
xchg
leave
mov
dec
or
mov
inc
aam
add
mov
jnp
push
mov
jbe
retf
push
call
div
jno
xor
test
dec
inc
(bad)
adc
jg
jg
cmp
cmps
test
loop
lods
shr
mov
push
mov
cmps
fisubr
sbb
adc
cmp
sub
add
retf
or
xor
cdq
jne
leave
ret
rcl
jecxz
push
cs
retf
retf
aaa
pop
xor
lods
sahf
pop
xchg
lods
enter
call
jge
lds
lock
add
movs
outs
sahf
in
(bad)
jmp
shl
mov
mov
cmps
adc
imul
mov
xor
rcl
stos
and
mov
ret
ret
add
rcr
adc
mov
into
imul
xchg
pop
addr16
xchg
cli
mov
mov
pop
jns
fist
ins
or
dec
(bad)
fsubr
add
xchg
mov
mov
jle
cmp
pop
test
jo
out
ret
imul
xchg
xchg
call
rol
in
cmps
mov
push
xchg
(bad)
inc
xlat
lods
mov
xor
jo
stos
mov
xchg
cmps
test
(bad)
jge
lods
mov
mov
push
mov
lods
loop
push
cli
scas
push
cmp
rol
(bad)
xor
outs
mov
stos
cmp
stos
popf
push
lods
push
lods
shl
jge
sub
sbb
mov
and
mov
rcl
and
(bad)
lahf
xchg
add
js
sub
or
movs
jp
ficom
jge
add
mov
in
adc
mov
fsub
xchg
mov
pop
cli
mov
mov
mov
xchg
or
mov
pop
call
mov
retf
(bad)
sbb
xor
dec
push
xchg
xchg
dec
adc
xchg
mov
mov
adc
adc
jo
push
mov
xchg
lods
mov
jne
xchg
pushf
bound
dec
adc
or
mov
mov
test
mov
mov
or
out
push
scas
pop
iret
mov
cwde
cmp
xor
(bad)
mov
call
or
inc
pop
mov
adc
mov
loop
js
and
and
rcr
adc
popf
jge
call
xor
xchg
sub
(bad)
push
push
push
xchg
dec
sub
sbb
add
push
push
mov
cmp
inc
jmp
mov
mov
cli
mov
cmps
add
adc
mov
mov
call
fsubr
stos
bound
xchg
in
lods
in
enter
or
sahf
adc
imul
nop
sub
jne
(bad)
popf
jp
cli
sbb
fldcw
es
adc
cmps
xor
jecxz
pop
cmps
sbb
jmp
cmp
aaa
mov
dec
jle
sbb
test
pushf
into
movs
pop
scas
and
sahf
and
xor
jb
pushf
ret
retf
cli
inc
les
rcl
ins
mov
cmp
int3
or
std
inc
into
pop
inc
adc
jmp
(bad)
mov
rcr
dec
push
sbb
sar
pop
push
mov
out
xlat
aam
shl
ja
mov
hlt
cld
pop
ins
cs
adc
sbb
(bad)
fadd
enter
xchg
push
xchg
mov
cmp
out
cld
aam
adc
sub
inc
out
movs
sbb
adc
mov
lods
mov
adc
jmp
xor
xchg
and
mov
(bad)
push
and
xlat
fwait
jmp
fistp
test
fcomp
fs
nop
xchg
mov
sbb
stos
mov
ins
push
xchg
mov
neg
push
shl
inc
sub
jmp
rcr
xor
xchg
mov
es
sbb
pushf
mov
xchg
(bad)
fsubr
outs
test
mov
movs
and
fist
jnp
faddp
or
add
xor
repz
lods
xor
ret
test
scas
mov
pusha
xchg
shr
shl
cpuid
adc
(bad)
aam
pop
inc
xchg
jle
adc
cdq
(bad)
clc
xchg
or
xor
out
cmp
push
ret
popf
cmp
(bad)
leave
push
scas
cmp
xor
cmp
cld
and
xchg
pop
pop
in
xchg
pop
in
jge
mov
push
ja
sub
out
bound
sbb
cdq
adc
dec
test
sti
int
ss
add
or
mov
mov
dec
fist
adc
push
sub
ret
cmp
xor
stos
mov
mov
lds
adc
retf
fstp
adc
test
jle
sub
jae
stos
loopne
xor
pop
inc
fcom
sub
mov
mov
hlt
xchg
xchg
imul
inc
int
sar
jmp
aad
cmp
lock
out
xchg
pushf
adc
ret
xchg
inc
adc
cmps
xchg
(bad)
fcomp
ret
mov
(bad)
repz
shl
adc
mov
sub
(bad)
fst
inc
pop
jmp
sbb
(bad)
xor
test
adc
lds
data16
push
daa
mov
pusha
xchg
movs
jge
jae
in
in
stos
jae
sub
pop
retf
(bad)
inc
push
inc
cmp
and
mov
js
or
popf
adc
cs
xchg
sub
xor
mov
xor
or
push
push
nop
je
xlat
(bad)
(bad)
call
add
or
lds
xchg
loop
les
lds
jge
xor
(bad)
inc
mov
fnstcw
jo
inc
inc
jo
or
outs
sbb
xchg
iret
push
stos
xchg
pop
jg
dec
push
lahf
push
leave
loopne
add
retf
int
in
adc
pushf
mov
xlat
retf
(bad)
mov
pop
pop
scas
add
test
sbb
jmp
aam
retf
lods
inc
xchg
cmps
lods
xchg
call
mov
cld
jge
sbb
adc
pop
fwait
and
adc
dec
mov
mov
inc
xchg
out
mov
scas
leave
daa
inc
jbe
add
pop
retf
push
test
in
mov
push
sar
adc
inc
das
or
in
sbb
pop
adc
push
add
daa
dec
outs
retf
stos
js
dec
sub
pop
push
test
push
xchg
imul
outs
jp
dec
ins
retf
(bad)
loopne
mov
push
mov
ror
and
cld
xchg
in
add
and
enter
mov
xchg
push
mov
pushf
push
jnp
movs
(bad)
in
fdivrp
push
add
retf
dec
cmp
dec
sahf
ror
push
pop
xchg
jo
loopne
mov
or
add
stos
fadd
push
push
sbb
push
pop
leave
xchg
sbb
or
adc
mov
xchg
mov
in
jmp
or
mov
inc
xor
pop
lea
jmp
mov
es
xchg
add
dec
jl
add
lahf
add
out
inc
fs
aam
(bad)
xchg
mov
cdq
fnstcw
pop
xchg
rcr
into
sub
jecxz
push
ja
js
inc
es
int
adc
cmps
fcom
nop
push
adc
les
cmp
fsub
loopne
test
js
mov
cmps
pop
stos
push
mov
xchg
test
jmp
mov
fbstp
neg
push
and
scas
sahf
sbb
rol
lahf
add
push
jecxz
mov
shr
es
inc
jb
dec
jge
out
mov
pushf
inc
div
subps
xor
into
fist
int3
mov
adc
push
jg
cmp
test
fst
lods
or
shl
xadd
enter
xchg
cmp
add
xchg
daa
lods
add
fcomi
test
push
mov
ss
mov
imul
mov
aam
mov
(bad)
inc
add
pop
lods
adc
jmp
jl
arpl
add
cmp
sub
pushf
xchg
mov
pop
sbb
loop
sbb
cs
push
pushf
sbb
ret
test
repz
lds
mov
sar
in
dec
arpl
xor
pop
xchg
mov
push
pop
fld
push
jge
pushf
je
(bad)
cmp
js
loope
fsubr
push
(bad)
jo
xor
mov
rcl
test
and
jbe
mov
pusha
mov
pop
fwait
mov
or
inc
jne
add
std
fsubp
dec
push
xchg
xchg
pop
mov
pop
mov
cmp
adc
lahf
repz
fs
mov
and
test
xor
sbb
push
pop
ds
push
xor
gs
popf
add
jecxz
into
popf
add
mov
sub
repnz
fs
arpl
pusha
movs
xor
pop
sahf
xor
mov
rcr
adc
call
outs
mov
mov
test
mov
adc
dec
add
inc
mov
xchg
cmp
push
jecxz
fs
(bad)
lds
retf
xchg
stos
inc
or
ja
test
out
pop
mov
movs
cmp
or
pop
sbb
movs
fs
(bad)
mov
or
int
push
hlt
nop
retf
push
cmp
outs
inc
in
stos
les
inc
aad
loop
(bad)
fwait
cmp
outs
ret
lahf
mov
sbb
adc
add
mov
or
push
fistp
cmp
out
xchg
add
and
mov
jbe
arpl
sbb
jp
jg
adc
adc
mov
pop
aam
sbb
ror
sub
(bad)
rcr
fistp
add
(bad)
pop
or
ret
mov
and
dec
jo
push
or
pop
sub
sub
sub
test
or
pop
or
xchg
popf
jne
test
(bad)
ds
test
cmps
sbb
clc
(bad)
loope
lea
mov
jge
mov
mov
jmp
mov
jbe
cmps
xor
jle
call
aas
jle
adc
mov
push
ins
xchg
popf
iret
sbb
inc
xor
scas
imul
xor
fisubr
inc
cmp
and
xchg
pop
mov
(bad)
(bad)
mul
xor
inc
(bad)
dec
push
mov
mov
mov
xchg
repnz
pop
ror
xor
leave
mov
xchg
(bad)
xchg
jno
(bad)
mov
ret
dec
nop
ins
ffreep
and
leave
aas
ret
xchg
shl
pop
xor
mov
and
arpl
test
loop
les
out
add
mov
inc
rcl
out
aam
pop
inc
jmp
das
sub
pop
(bad)
sbb
div
retf
add
idiv
sub
les
inc
leave
jecxz
pop
bound
mov
or
lock
add
pop
dec
(bad)
fcom
add
sbb
xchg
mov
pop
mul
in
(bad)
inc
jns
xchg
xchg
fwait
xlat
pushf
bound
pop
sbb
mov
mov
cmc
adc
imul
inc
jl
add
cmp
push
mov
pop
add
cmps
jge
stos
stos
push
and
das
lods
call
jne
lds
cmc
iret
mul
into
stos
rol
pusha
and
and
add
rcl
jle
dec
add
mov
test
xchg
test
and
sub
jecxz
or
(bad)
cmp
(bad)
sbb
das
fldcw
lds
arpl
mov
jnp
cli
and
cmpxchg
int3
jmp
mov
dec
push
xlat
in
call
outs
mov
push
fsub
mov
ja
mov
ss
(bad)
jnp
cmp
hlt
push
je
loope
aam
pop
out
push
shl
cmp
xchg
mov
push
dec
fdivr
dec
push
loope
stc
(bad)
fdivr
and
pop
pusha
cmp
loopne
pop
adc
call
jmp
fiadd
cmp
mov
cdq
iret
and
sub
mul
push
cmps
push
pop
sahf
lahf
ror
and
mov
fld
mov
movs
mov
mov
push
mov
das
mov
aam
or
adc
mov
pop
mov
enter
scas
push
stos
sahf
or
mov
(bad)
test
inc
add
jbe
mov
test
outs
loope
(bad)
outs
lods
loope
in
popf
mov
dec
or
fstp
rcl
xor
cmp
pop
dec
std
fld
push
push
mov
gs
shl
rcr
aas
mov
pop
repnz
add
cmp
das
(bad)
aad
ror
and
jo
dec
add
aam
popa
dec
sub
push
enter
jmp
push
fcom
xchg
xchg
mov
ja
out
nop
rcl
mov
jnp
jge
sar
shl
push
xor
xor
(bad)
mov
out
test
xchg
out
int3
imul
aam
cmp
mov
aaa
int3
imul
outs
imul
inc
daa
out
ficomp
daa
ss
pop
mov
or
mov
fs
pop
mov
fcomip
mov
outs
pop
daa
push
mov
fisttp
jae
std
or
xchg
(bad)
int
push
jnp
inc
dec
pop
cmps
or
rol
(bad)
mov
movs
(bad)
call
push
pop
hlt
mov
add
push
add
xor
or
and
(bad)
call
dec
xchg
xchg
lea
mov
xchg
adc
mov
pusha
jmp
push
mov
mov
pop
jge
and
push
out
xchg
pop
push
mov
mov
mov
jmp
cli
xchg
sbb
pusha
(bad)
ror
adc
retf
pop
xor
rcl
push
cmp
push
mov
mov
cs
jns
sti
xchg
fld
xchg
lahf
add
movs
inc
aaa
pop
xchg
popf
jmp
test
int3
add
cmp
out
sbb
xor
ror
inc
mov
nop
jo
imul
mov
push
xlat
mov
push
push
xlat
cmp
aaa
dec
shl
or
inc
outs
popf
call
lahf
add
(bad)
test
jne
mul
rcl
pop
lock
hlt
cmp
mov
add
dec
popa
push
push
cmps
mov
addr16
nop
ins
xchg
xor
jo
dec
retf
add
fdiv
repz
or
shr
scas
outs
mov
popf
test
or
jmp
adc
mov
in
aam
in
rcr
xor
jecxz
mov
cmp
cmp
dec
call
cmp
xchg
fs
cdq
xlat
sub
ja
sbb
data16
mov
ficomp
js
pop
shr
repz
cwde
push
movs
inc
push
jmp
stos
popa
out
(bad)
fmul
call
xor
movs
cli
sar
cld
out
bound
adc
ins
push
xor
xchg
std
scas
out
jl
lea
scas
gs
mov
imul
mov
fdiv
pushf
mov
push
pop
add
mov
(bad)
pop
lock
adc
outs
inc
add
leave
outs
mov
push
mov
adc
add
adc
and
or
adc
sub
jg
push
lods
or
adc
adc
inc
loop
std
hlt
icebp
mov
jecxz
rol
cmc
lods
outs
mov
push
fadd
(bad)
aam
mov
(bad)
lods
inc
in
ret
adc
loop
div
mov
inc
aaa
inc
repnz
mov
and
popa
std
leave
test
cmp
bnd
jbe
movs
mov
xchg
hlt
lds
out
xchg
into
cmp
(bad)
ret
xchg
jle
pop
jno
popa
stc
popf
scas
add
fs
mov
fisttp
movs
jnp
cli
aad
and
add
mov
cmp
imul
fnstcw
test
lods
repnz
leave
das
mov
jne
(bad)
mov
push
sub
xor
mov
mov
mov
ins
test
inc
test
cmps
inc
cmps
inc
mov
ins
(bad)
(bad)
jbe
adc
push
cli
pop
and
dec
cmps
test
shr
sbb
icebp
push
push
pop
cwde
sahf
popa
push
adc
mov
pop
xchg
jmp
jp
push
adc
pop
xlat
idiv
stos
mov
movs
or
mov
push
xor
ror
ins
push
xor
jge
imul
out
xor
fisttp
fisttp
ret
sub
mov
out
mov
sbb
sub
fstp
sar
pop
mov
retf
and
cdq
xchg
sub
push
ins
test
pop
movs
test
icebp
ret
stc
and
xchg
add
sbb
add
adc
xor
and
daa
loopne
aaa
les
mov
fwait
mov
sbb
test
xor
push
outs
sbb
xchg
fcom
and
lock
jbe
ss
js
jge
gs
hlt
or
imul
jp
add
mov
jg
mov
das
or
test
add
fld
rcl
cmp
adc
add
das
and
xchg
(bad)
bound
mov
or
and
push
fdiv
nop
adc
sbb
nop
aam
ret
rol
mov
lahf
cmp
pushf
xchg
jge
shr
sub
cdq
rol
fld
sub
sbb
int
aaa
or
xchg
sbb
nop
mov
cmp
stc
mov
push
xor
test
sub
sub
sbb
test
push
stos
(bad)
mov
test
dec
aam
dec
imul
push
push
xchg
xchg
sbb
lods
fwait
int3
aas
push
sahf
jl
push
xor
addr16
jg
sub
es
mov
into
add
mov
test
inc
mov
add
fsubr
sbb
mov
test
jo
pop
aas
mov
push
jmp
jecxz
pop
pop
in
clc
or
ins
cmps
jmp
jmp
stc
gs
xor
movs
push
int
xchg
pop
test
rcl
mov
add
mov
mov
or
ror
test
mov
xor
pop
adc
mov
mov
fcomip
or
push
popf
gs
(bad)
lds
fadd
pushf
lds
add
jmp
lahf
dec
retf
jno
mov
jo
mov
mov
popf
pop
xor
lods
pusha
in
adc
sub
push
cmp
jecxz
or
mov
jge
outs
cdq
xor
xor
jmp
add
sbb
jns
adc
fwait
mov
sti
or
(bad)
in
add
xchg
xor
ret
pop
das
cmps
enter
dec
mov
jns
dec
sti
add
xchg
sahf
jae
pop
loopne
sbb
int3
arpl
addr16
mov
test
repnz
mov
int
stos
push
jecxz
cmc
jecxz
je
xor
jne
test
jl
into
pop
mov
rcl
inc
lahf
retf
and
ffreep
jb
ret
sub
loope
bound
pop
lods
jl
mov
mov
lds
push
repnz
add
mov
xor
fisttp
(bad)
(bad)
enter
mov
stos
mov
mov
sbb
call
push
in
repz
sub
mov
and
mov
leave
mov
rcr
inc
test
std
mov
add
test
xchg
test
rcr
out
js
hlt
sub
repz
mov
mov
or
sbb
(bad)
scas
lods
sbb
cmp
fistp
das
sti
fisubr
scas
cmp
mov
pop
test
inc
add
lods
jmp
fs
leave
outs
cwde
sbb
xchg
enter
aam
mov
vpaddq
aaa
push
mov
cli
mov
aam
add
retf
pushf
call
jb
or
repz
pushf
movs
push
jge
push
xchg
jmp
xchg
push
cdq
and
mov
sub
loope
pop
mov
retf
int3
sub
lahf
lods
gs
mov
push
cwde
mov
(bad)
jmp
xchg
and
test
sub
scas
inc
and
fcmovnu
lods
push
retf
mov
leave
sar
push
enter
mov
mov
mov
sub
(bad)
(bad)
mov
mov
ds
and
jb
xchg
sbb
xchg
arpl
rcr
push
ins
(bad)
xor
cs
gs
stos
and
mov
jbe
add
scas
cmp
mov
lea
jmp
sbb
idiv
push
jmp
(bad)
(bad)
jmp
add
xchg
sar
mov
push
sbb
lods
aam
mov
je
or
not
sbb
dec
loopne
pushf
adc
or
popf
sub
inc
push
xchg
jne
popf
mov
add
aam
inc
xchg
xchg
mov
cli
in
sub
sbb
sbb
sub
outs
imul
fisttp
jmp
add
in
fwait
pop
shl
in
inc
std
ret
add
add
ins
inc
int3
aaa
(bad)
xor
in
xchg
xchg
add
lahf
retf
clc
retf
lahf
sbb
xor
mov
rcr
sub
loop
push
bound
fld
(bad)
xlat
jle
test
push
xor
retf
jno
jmp
mov
sbb
pop
push
fs
lahf
pushf
es
pop
pop
pusha
push
std
pop
mov
push
scas
loopne
sahf
sbb
pop
rcr
rcr
loopne
add
in
ins
loopne
mov
test
jge
rcl
jo
sub
stos
repz
cmp
xchg
inc
push
jle
mov
jmp
adc
fisubr
sahf
jns
push
mov
mov
sbb
jmp
ret
fs
rol
(bad)
fs
pop
test
and
sbb
jbe
stc
leave
test
lahf
outs
pop
mov
retf
xor
ins
arpl
sbb
jmp
ret
sub
fwait
enter
(bad)
fadd
or
cmc
gs
mov
xchg
mov
(bad)
cdq
mov
scas
pop
retf
mov
or
movlps
jmp
or
mov
adc
fnsave
dec
jecxz
out
mov
jbe
inc
mov
nop
jge
imul
push
or
call
loop
shl
pop
mov
cmp
jg
in
dec
jg
aaa
stos
pop
popf
inc
mov
arpl
or
mov
or
xchg
mov
sti
sbb
test
cmp
mov
inc
pop
mov
rcr
pusha
in
stos
and
mul
or
cmp
mov
pop
cmp
lahf
fs
shl
jb
fsub
into
xor
out
pop
mov
add
add
add
aad
(bad)
bound
cmps
xchg
jecxz
mov
lea
mov
(bad)
out
les
or
inc
mov
inc
je
or
mov
dec
xor
lahf
jl
pop
mov
mov
aam
jge
xchg
mov
or
jae
movs
dec
mov
push
fwait
pop
sbb
sbb
scas
pop
in
xchg
outs
int3
jge
loop
xchg
(bad)
push
loopne
(bad)
fwait
mov
dec
push
mov
(bad)
(bad)
fmul
retf
test
mov
push
pushf
jge
test
mov
(bad)
idiv
xchg
and
scas
mov
aaa
mov
dec
in
pusha
js
dec
retf
push
out
(bad)
xor
std
xor
push
adc
or
test
test
and
sub
mov
or
movs
and
iret
pop
(bad)
cs
dec
mov
or
jge
outs
sahf
ret
pop
fsub
pop
xor
loop
mov
mov
mov
jno
cwde
popa
fucomp
gs
cmp
cs
dec
push
sub
mov
xchg
cld
mov
fist
mov
add
ds
(bad)
js
int3
mov
popf
pusha
lock
adc
sahf
repnz
int3
sbb
sub
xchg
fs
sub
loopne
les
jp
xchg
mov
fldenv
stos
cmps
div
push
aam
push
sub
sub
jg
sbb
jp
ins
ror
add
cmp
mov
retf
inc
mov
(bad)
call
xor
jle
popf
adc
jnp
bound
fnstenv
xor
sar
or
sahf
xor
adc
test
push
mov
nop
and
fidiv
jecxz
cmp
and
sbb
jle
cmp
(bad)
sub
mov
sar
test
shr
rol
stos
loopne
jmp
shr
push
push
mov
fs
sub
popf
mov
mov
inc
adc
int
outs
xlat
hlt
xchg
add
cld
mov
mov
movs
sub
into
mov
pop
inc
rcr
and
lods
fst
into
and
xor
jae
mov
dec
das
dec
add
jne
jle
xchg
js
(bad)
dec
outs
stc
es
adc
fstp
fwait
in
and
in
es
mov
cmp
pop
lahf
add
int3
out
je
out
dec
leave
xchg
mov
sbb
test
test
fnstsw
fmul
cmp
add
jb
and
aaa
retf
cmp
add
mov
data16
mov
adc
mov
cdq
add
ds
pop
sbb
mov
mov
out
cmp
or
and
stos
mov
push
jmp
loope
loopne
adc
cdq
div
jmp
or
fst
mov
ffreep
lea
adc
jl
hlt
fst
pop
pop
sahf
or
xor
xchg
ss
js
jns
adc
aad
mov
pop
lahf
dec
mov
leave
popf
repnz
arpl
inc
fstp
jmp
or
xchg
mov
jmp
sti
in
push
add
xchg
pop
ror
or
retf
in
xchg
xor
push
add
adc
arpl
loopne
(bad)
ja
popa
test
mov
retf
aam
mov
fcmovb
pop
jle
std
and
push
scas
cmp
(bad)
out
aam
pop
sub
idiv
ffree
and
adc
not
retf
xchg
and
push
hlt
xlat
xchg
lods
push
jne
cmp
xor
xchg
aam
adc
fcom
mov
sbb
test
repz
fsubr
pop
or
xchg
sbb
pusha
dec
mov
test
dec
(bad)
xor
(bad)
shl
aad
jmp
and
repnz
xchg
jmp
ret
xchg
fisub
cmc
movs
pushf
and
mov
ins
xchg
lods
push
in
aam
jl
cmps
(bad)
xchg
mov
(bad)
inc
cmc
bound
mov
or
jle
adc
es
je
mov
mov
pop
loop
pop
ret
je
hlt
aad
jmp
iret
xchg
cmp
loopne
(bad)
dec
sbb
cmp
pop
sub
mov
lahf
aas
(bad)
(bad)
sar
call
sub
xor
pop
ss
mov
mov
and
xchg
movs
inc
or
in
lods
stos
sbb
dec
sub
xchg
pop
mul
adc
(bad)
nop
adc
pop
cmps
sub
adc
add
movs
adc
scas
sub
jne
leave
enter
movs
mov
xchg
nop
push
or
(bad)
mov
stc
jnp
or
xchg
mov
or
stos
pop
mov
push
aaa
xchg
(bad)
fcos
mov
test
push
std
in
jle
mov
loopne
push
push
lock
sbb
lods
lahf
add
push
sbb
outs
shl
not
push
jo
adc
lahf
and
es
mov
movs
mov
mov
dec
pop
fadd
in
push
xchg
mov
sahf
cs
xor
movlpd
pusha
aaa
inc
popf
pop
mov
push
ins
fcmovbe
out
mov
mov
test
rol
cld
mov
enter
imul
aam
and
fbld
lahf
adc
push
ins
rcl
test
lds
jnp
adc
int
shl
jl
data16
shl
mov
xchg
xor
call
inc
clc
xchg
pusha
sbb
test
and
add
adc
mov
cmp
push
fldenv
lods
dec
rcr
sub
int
je
adc
inc
rcl
xor
int
jae
fwait
(bad)
mov
xchg
xchg
aam
jbe
repnz
sar
mov
sub
xor
and
xchg
mov
or
push
into
in
repnz
cmp
xchg
hlt
shl
lahf
mov
jg
mov
adc
xor
add
mov
je
mov
mov
das
ss
mov
mov
sahf
out
inc
mov
jo
sahf
stos
push
push
inc
xchg
pushf
mov
or
jg
sahf
gs
pushf
or
mov
xchg
lds
cmp
mov
imul
into
adc
jno
out
cmps
or
jl
and
aam
mov
adc
popa
mov
jg
inc
inc
and
xor
mov
push
test
ret
mov
lahf
rcl
xchg
xchg
mov
push
retf
lods
mov
jmp
xchg
fs
fst
mov
jl
sbb
push
je
hlt
icebp
mov
sub
cmp
lahf
pop
xchg
push
jge
lea
pop
es
mov
cmp
iret
inc
lods
xor
arpl
lods
fld
test
fs
mov
mov
pop
xchg
pop
popf
loop
mov
out
sar
ja
sub
mov
and
and
(bad)
imul
nop
mov
xchg
mov
pop
movs
(bad)
(bad)
lods
pop
aaa
xlat
(bad)
cmp
shl
shl
xchg
mov
ins
jge
jmp
or
mov
cli
push
mov
and
enter
repz
add
test
xchg
mov
aam
jecxz
fidiv
lds
call
fcmovne
icebp
iret
cmps
mov
jns
sbb
or
call
cmps
retf
jnp
inc
scas
into
loopne
into
imul
test
loop
adc
stos
push
(bad)
fnstcw
jle
jb
int
into
push
pop
dec
mov
cs
loope
dec
inc
sub
lock
mov
mov
sbb
or
cld
int3
call
mov
call
popa
jmp
pop
jp
xchg
or
mov
aad
aaa
mov
movs
in
xor
and
fst
call
retf
jge
xchg
pusha
mov
fstp
jl
xor
scas
mov
inc
sub
movs
xlat
pop
jecxz
aam
popa
pop
popf
xor
in
call
fs
hlt
rcl
mov
sub
mov
fsubr
adc
mov
xchg
fcomp
lods
xchg
mov
jne
sbb
xor
(bad)
daa
push
sub
push
push
jmp
jns
sbb
pop
clc
jmp
add
fdivr
adc
clc
outs
mov
je
sbb
movs
fnsave
jecxz
xchg
add
mov
cmp
imul
dec
int
push
je
push
push
dec
push
arpl
les
retf
fnstenv
ins
test
jl
mov
push
ins
fucomi
fs
mov
popa
push
je
mov
fdivrp
sub
mov
mov
clc
xchg
lahf
ret
leave
movs
cmp
xchg
paddq
jmp
xchg
enter
jge
add
xor
adc
xor
fs
stc
mov
xchg
fisttp
mov
cmp
fcomp
fs
jge
das
ret
(bad)
retf
xor
jle
push
xchg
int
adc
jmp
jb
pop
xchg
in
mov
pop
stos
or
shl
ror
jae
or
iret
adc
repz
rcl
cmp
mov
mov
(bad)
call
(bad)
ins
shl
and
lds
in
daa
cdq
jge
or
adc
test
push
ja
movs
dec
add
mov
add
lahf
xchg
or
retf
shr
pop
mov
add
cli
bound
fldenv
pop
mov
rol
pop
cmp
and
(bad)
mov
dec
push
sti
sub
lahf
sti
mov
in
ins
lods
push
add
and
push
inc
icebp
sub
push
rcl
imul
pop
mov
mov
mov
xchg
mov
adc
and
add
mov
add
das
cmp
mov
in
mov
xchg
rol
mov
call
push
mov
test
sbb
retf
aas
ins
jo
cmp
xchg
shl
xchg
dec
push
repnz
(bad)
jb
lods
clc
int3
sbb
test
aam
sbb
and
cmp
inc
cdq
cmps
(bad)
xchg
enter
and
sbb
jp
push
or
inc
inc
cmp
xor
adc
pop
js
out
fdivp
outs
(bad)
inc
stos
inc
popa
(bad)
mov
cwde
aad
xchg
mov
ret
mov
movs
test
lds
icebp
cmps
cmp
xchg
sbb
ffree
aas
out
ror
rol
sub
cdq
rol
loope
lahf
pop
xchg
ret
pop
je
lock
mov
sti
ins
xchg
sbb
movs
fcomip
and
shl
int3
into
test
lods
fidiv
adc
cmp
pop
inc
sti
test
mov
jle
(bad)
xchg
push
xchg
in
mov
pop
shl
mov
mov
cdq
mov
mov
(bad)
xlat
or
in
mov
mov
outs
popf
mov
cli
(bad)
cmp
retw
test
mov
add
js
fnstsw
jmp
lock
stos
jg
inc
ret
mov
fnstsw
aas
sahf
and
inc
sub
jp
add
ins
fcomp
sub
out
and
xchg
pop
inc
jo
pop
js
shl
push
leave
mov
cmp
ss
mov
test
nop
out
add
outs
add
leave
xor
aam
cmp
imul
dec
outs
jl
fisub
jo
enter
sub
hlt
outs
in
aad
add
fcomp
mov
test
adc
push
inc
mov
sbb
jl
xchg
hlt
xchg
fcomp
adc
and
cmps
sub
cmp
jno
enter
(bad)
xor
scas
mov
pop
adc
int
dec
mov
jo
and
xchg
inc
fadd
cwde
popa
lahf
inc
inc
(bad)
cmp
xor
sar
xchg
inc
xchg
push
lock
fcmove
movs
sbb
retf
sbb
cld
mov
call
inc
mov
push
das
cdq
scas
(bad)
pop
outs
inc
pop
into
xlat
adc
cs
test
loope
push
shl
scas
loope
jecxz
sub
jnp
mov
rol
or
and
das
xor
xchg
lds
mov
mov
pop
test
lods
pop
mov
dec
retf
dec
pop
jp
les
vorpd
mov
ret
sub
push
inc
xor
movs
dec
stos
pop
mov
cli
inc
jmp
pop
loopne
mov
dec
data16
fnsave
ud1
xchg
ror
dec
cmps
xchg
xchg
jno
push
mov
add
aaa
cmps
sar
dec
dec
mov
in
xlat
popa
fwait
mov
in
mov
pushf
enter
adc
xchg
lds
sar
jle
mov
xlat
and
in
(bad)
cmp
sub
mov
fisttp
xor
pop
mov
adc
mov
setle
popf
int
loopne
jge
pop
xchg
cmp
sbb
es
movs
jge
cmp
(bad)
mov
sbb
bound
dec
xor
adc
xor
cmp
outs
jnp
hlt
jecxz
sbb
cmp
mov
push
xor
mov
hlt
cmp
shl
in
and
or
inc
mov
pop
xor
popa
in
mov
cmp
inc
cmp
push
dec
add
in
xor
push
adc
or
push
inc
out
fwait
mov
pop
in
cwde
adc
sbb
imul
hlt
adc
jmp
rcr
dec
sbb
vmovaps
push
ror
mov
sbb
mov
jecxz
pop
nop
cmp
rcl
pop
iret
xlat
mov
outs
jb
xchg
ret
int
lods
repz
xchg
inc
xor
arpl
add
pop
fidiv
clc
repnz
sub
jge
ss
xchg
nop
loope
xchg
xor
mov
es
inc
push
jmp
loopne
xchg
imul
in
cmps
mov
aam
mov
xor
mov
and
adc
retf
scas
inc
enter
add
fld
(bad)
mov
sbb
dec
lahf
push
movs
js
jmp
dec
mov
xlat
test
pop
sub
(bad)
mov
pop
test
rcr
in
push
adc
scas
sbb
aam
and
fstp
cwde
dec
loopne
jecxz
cmp
jge
mov
out
mov
retf
push
mov
mov
add
adc
test
sbb
outs
pushf
sbb
push
xor
fbstp
push
jmp
mov
je
cld
jecxz
xor
movs
sbb
mov
std
out
popf
xor
push
mov
ins
sti
int
loope
push
mov
xchg
sbb
movs
mov
sahf
push
xchg
or
and
mov
call
sahf
or
cmp
dec
lahf
and
shl
outs
daa
cdq
push
rcl
popa
out
fmul
xchg
xor
dec
into
scas
and
and
add
xor
and
cmp
mov
outs
or
sub
test
xchg
popf
jno
pop
arpl
jo
inc
js
(bad)
mov
or
sub
scas
sub
fst
(bad)
pop
dec
mov
pushf
cmp
inc
cli
mov
int
cmps
mov
and
or
add
mov
push
xor
mov
mov
ficom
stos
into
push
pusha
arpl
pop
xchg
in
repz
dec
clc
mov
dec
push
rcr
dec
jae
fwait
xor
mov
loopne
rcl
mov
rol
test
jbe
xchg
or
and
adc
sbb
and
pop
leavew
outs
neg
xor
sub
cmp
ds
fwait
xchg
jo
fst
jl
cmovbe
adc
lods
xchg
jmp
loope
xchg
jecxz
bound
aas
pushf
loope
mov
pmaxsw
retf
sbb
dec
jbe
mov
push
sub
lea
rol
pop
and
xor
fdivr
adc
jns
xchg
les
out
mov
ins
push
adc
shl
test
retf
ffreep
sbb
sbb
xor
mov
jo
cmp
push
pop
(bad)
(bad)
in
dec
int
scas
xchg
add
mov
push
clc
xchg
push
sahf
ret
push
inc
scas
cld
jp
mov
stos
sub
or
mov
fsubr
out
test
(bad)
xor
add
(bad)
xchg
movs
dec
xchg
push
xchg
int
xor
dec
sub
popa
mov
sub
jecxz
lods
aad
inc
mov
int
inc
les
adc
xchg
pop
jmp
mov
mov
scas
pop
popf
icebp
clc
in
jge
repz
xor
xchg
mov
pop
in
mov
add
fdivr
lahf
sti
jge
inc
pop
(bad)
mov
add
xchg
test
mov
daa
mov
adc
fcmovbe
xchg
aad
repnz
adc
add
movs
mov
mov
inc
lods
add
hlt
hlt
fmul
mov
out
mov
xchg
out
pop
lods
xchg
lea
imul
mov
cdq
adc
xor
fnsave
cmc
mov
xor
(bad)
fdivr
jg
out
mov
xchg
pop
adc
lock
inc
mov
pop
xor
in
xor
in
bound
sub
xchg
push
mov
mov
loopne
add
cmp
ret
jg
dec
mov
cmovp
js
mov
sub
sbb
mov
xchg
push
dec
cmp
aaa
loop
(bad)
out
lods
in
adc
add
add
int
xchg
mov
inc
xchg
jmp
pop
retf
and
jge
fcomp
jg
cwde
mov
ror
inc
add
sahf
add
mov
(bad)
mov
rcr
lahf
rcr
adc
cmps
mov
sbb
imul
jne
mov
xchg
addr16
cdq
add
clc
jg
test
mov
scas
xchg
push
popa
jge
aam
jmp
fmul
pop
jnp
jle
sub
les
pop
(bad)
(bad)
mov
mov
stos
or
mov
enter
xchg
pop
adc
mov
mov
dec
sbb
call
je
pop
mov
outs
fdiv
xor
jge
retf
(bad)
popf
xchg
ret
call
jge
sub
out
aas
add
nop
popa
or
mov
lea
lods
dec
int3
mov
cmps
and
jecxz
(bad)
pop
sahf
lds
mov
in
mov
mov
fnsave
lods
add
mov
stc
jmp
bound
test
imul
inc
popf
in
mov
cmp
test
xchg
cdq
cmps
xchg
mov
lods
fidiv
xchg
pop
mov
xchg
mov
fadd
lahf
xor
and
loopne
pop
jle
outs
paddq
call
pop
lahf
stos
mov
pop
fsubr
mov
add
pop
shl
int3
(bad)
inc
push
mov
add
mov
dec
push
xor
nop
adc
or
mov
sbb
in
cmp
xchg
xchg
retf
fild
(bad)
fsin
pusha
popf
jmp
push
imul
ins
in
daa
movs
or
(bad)
imul
fnstenv
sbb
cmp
xor
inc
add
sub
pop
movs
pop
pop
push
inc
js
push
or
or
outs
inc
mov
mov
fcmovnbe
aas
push
and
nop
add
rcl
scas
adc
enter
mov
pushf
pop
pop
or
fidiv
push
icebp
or
sub
jo
(bad)
int3
in
cmp
xlat
mov
bound
jmp
bound
int
push
mov
popf
loop
inc
adc
push
cmp
push
xchg
bound
jle
add
test
push
popf
mov
sbb
mov
(bad)
push
and
sbb
jge
(bad)
xchg
sub
das
(bad)
sub
pop
mov
and
xor
in
call
mov
call
xchg
sar
test
cmps
xchg
xchg
xchg
add
jns
call
popf
add
dec
rol
pop
mov
xor
enter
popf
arpl
xor
daa
shl
out
stos
fadd
retf
cmps
retf
mov
mov
lock
test
popf
xchg
or
xor
add
ret
mov
xchg
fwait
(bad)
xchg
or
retf
add
(bad)
mov
push
mov
out
inc
les
mov
mov
mov
mov
or
cmp
sub
jmp
retf
ror
lahf
adc
sti
neg
repz
int3
push
dec
jge
cmp
push
les
es
mov
pop
jbe
and
adc
test
pusha
icebp
ficomp
xor
cli
fisubr
sbb
enter
inc
mov
sbb
into
retfw
mov
retf
jl
mov
shl
cdq
sbb
pop
or
repnz
mov
jle
popf
jge
dec
scas
int
adc
mov
jmp
shl
cmps
mov
fs
inc
cmp
xor
and
and
jae
lods
jo
std
adc
mov
out
cld
mov
cmp
or
mov
push
pushf
in
shl
fcmove
lahf
(bad)
xchg
adc
jl
cmps
mov
xor
push
aas
adc
lods
adc
scas
jb
test
rol
mov
sahf
iret
cmp
(bad)
loope
mov
sbb
out
mov
popf
in
dec
jmp
or
enter
adc
push
clc
out
pushf
mov
neg
test
inc
mov
mov
xchg
imul
or
mov
loope
in
xchg
adc
jae
adc
loopne
fwait
neg
fs
sbb
cmp
push
jns
inc
push
ss
sbb
ins
add
inc
lods
pushf
sub
mov
mov
call
shl
adc
jmp
xor
loope
cmc
sbb
imul
jb
leave
test
fbld
mov
test
js
mov
pop
sub
adc
test
fs
mov
(bad)
out
pop
adc
adc
mov
inc
int
(bad)
out
xchg
test
mov
fstp
inc
cmp
fcomp
adc
sbb
dec
and
jo
pmaddwd
add
retf
cmps
sahf
das
push
(bad)
mov
jecxz
fdiv
ror
jecxz
add
nop
jo
mov
aam
xchg
shl
fisttp
add
mov
mov
adc
ficomp
out
jne
lock
inc
and
and
ss
mov
pop
dec
div
repz
or
mov
test
dec
pop
lock
lahf
leave
(bad)
pushf
mov
adc
mov
mov
jo
and
test
mov
pop
lahf
mov
sbb
or
jmp
call
outs
xchg
mov
dec
dec
mov
retf
das
mov
iret
push
sbb
fdivrp
test
xchg
out
mov
xchg
push
sub
dec
(bad)
les
mov
arpl
jp
jb
cmp
mov
popf
push
or
pop
mov
or
mov
mov
jbe
mov
mov
popf
inc
mov
ins
cmps
mov
cmp
lea
jae
mov
addr16
pop
je
cld
dec
enter
or
mov
enter
dec
mov
pushf
pop
or
sub
xchg
leave
push
jmp
stos
xor
dec
mov
mov
push
lods
icebp
xchg
adc
rol
sar
pop
nop
out
(bad)
jge
mov
scas
cmp
out
test
jp
jne
add
jns
pusha
movs
cmc
pusha
pushf
test
xchg
gs
movs
pop
mov
mov
inc
lods
psrad
scas
rcr
(bad)
ins
pop
stc
adc
jg
mov
xchg
data16
nop
adc
mov
push
push
xchg
mov
add
add
int3
push
cld
(bad)
push
mov
dec
xor
or
fnstenv
into
retf
add
cmp
mov
jl
sbb
adc
data16
and
adc
ins
sbb
jge
mov
ficomp
inc
pop
test
test
(bad)
add
jns
das
pop
addr16
mov
xor
xchg
rol
les
mov
mov
cli
dec
and
mov
xlat
ins
test
lahf
add
sbb
cdq
jge
bound
fsub
popa
mov
push
mov
mov
in
xchg
out
movs
mov
(bad)
jg
fdivr
adc
sbb
(bad)
push
shl
xchg
(bad)
mov
xlat
arpl
ror
ds
inc
mov
adc
pop
clc
test
mov
lock
mov
push
repz
push
inc
mov
xor
inc
pop
call
cmp
mov
sub
or
enter
mov
(bad)
push
xlat
xlat
xchg
and
mov
sub
mov
clc
outs
jmp
js
push
mov
je
sub
or
push
dec
adc
inc
outs
add
rcr
xchg
push
push
mov
jmp
mov
stos
push
xchg
outs
sub
push
gs
sbb
jecxz
mov
dec
dec
xchg
retf
fs
jle
in
scas
inc
mov
inc
mov
sbb
sub
in
xor
cmp
add
adc
or
in
enter
inc
nop
data16
xchg
jne
jo
mov
xchg
sahf
ret
cmp
std
push
cmp
push
gs
mov
and
lods
repnz
sbb
in
xchg
fstp
stos
movs
xchg
xchg
xchg
xor
movs
xor
jecxz
mov
fcom
mov
dec
fisubr
sbb
and
push
out
dec
add
jge
cmc
(bad)
add
xchg
neg
retf
ret
call
mov
xor
ins
outs
xlat
adc
imul
cmp
hlt
leave
adc
fild
cmp
mov
out
dec
push
fnstsw
test
cdq
loope
mov
dec
test
xchg
xchg
or
test
push
int3
call
dec
mov
xchg
lea
inc
mov
mov
sti
fcmovu
repnz
sbb
repz
jo
mov
test
or
xchg
ret
(bad)
into
fs
icebp
dec
mov
cmp
fst
fidivr
adc
test
fwait
test
scas
lahf
rol
xchg
pop
out
repnz
fld
push
add
(bad)
pop
fdivr
xchg
icebp
jmp
jge
sbb
sub
ins
and
int3
es
repz
or
inc
lods
push
jecxz
and
out
bnd
stos
aam
ret
rcl
hlt
pushf
call
iret
xchg
or
inc
xchg
or
imul
popa
shl
xchg
xchg
mov
cmp
retf
int
push
mov
js
and
pop
bound
test
push
add
repnz
out
xor
mov
cmp
xchg
cdq
and
je
mov
hlt
ja
iret
cmp
adc
dec
into
imul
jno
test
sub
enter
out
cmps
adc
outs
add
leave
cdq
mov
add
scas
ins
movs
leave
bound
cmp
test
cmps
test
rcr
mov
xchg
popa
jge
loope
jmp
addr16
pop
pop
idiv
mov
lahf
movs
cmp
rcl
sub
frstor
add
lods
inc
rcl
push
mov
inc
sub
and
dec
je
inc
(bad)
sub
mov
nop
ret
push
xor
jl
xor
jle
mov
push
mov
xchg
addps
icebp
mov
fistp
xchg
mov
mov
mov
pop
aam
xchg
data16
lods
pop
jmp
mov
arpl
xchg
pop
xchg
jae
clc
add
adc
fcmovne
push
std
xor
adc
pop
pusha
mov
xchg
xor
std
xor
mov
xor
cmps
enter
test
mov
push
test
in
mov
out
mov
fsub
or
jge
sahf
jo
mov
dec
adc
in
enter
jo
xchg
(bad)
hlt
xchg
test
jb
shr
cmps
test
pop
add
mov
mov
and
xor
adc
sbb
mov
scas
fmul
ds
mov
fisttp
mov
mov
sbb
xchg
mov
xor
push
xchg
mov
sub
push
xchg
jo
outs
lods
pop
not
xor
mov
mov
sub
sub
mov
sub
sub
arpl
add
push
push
dec
dec
mov
mov
addr16
(bad)
push
push
push
int3
sub
pop
retf
xchg
pop
xchg
add
mov
sbb
fistp
movs
push
mov
xor
repz
shr
xlat
movs
push
sbb
jmp
and
out
sbb
add
cmp
adc
cdq
data16
shl
xchg
inc
cmp
jb
xlat
mov
in
(bad)
enter
adc
jo
jmp
pop
mov
sub
push
inc
cmp
out
(bad)
mov
(bad)
mov
jp
fistp
mov
in
(bad)
pusha
jp
sub
push
jge
and
ret
hlt
mov
(bad)
push
push
xor
mov
and
push
loopne
dec
inc
in
cli
jecxz
(bad)
add
in
in
(bad)
mov
rol
sbb
pop
(bad)
hlt
push
pop
dec
popf
sub
nop
aaa
ss
movs
adc
test
int
xchg
aaa
mov
les
ins
outs
mov
aam
outs
das
retf
arpl
rol
mov
sbb
jge
lea
push
or
(bad)
nop
inc
and
cmp
test
(bad)
xor
les
inc
inc
mov
inc
push
mov
jmp
or
jbe
inc
outs
mov
and
fdiv
popf
jne
test
sbb
jno
inc
fsub
sub
inc
mov
xor
push
inc
sub
mov
(bad)
mov
push
xchg
push
mov
ins
mov
jb
ret
in
sub
cmc
cmp
popa
mov
imul
aaa
dec
cs
pop
push
mov
mov
jne
adc
mov
aam
jl
rcl
mov
ja
and
pop
push
mov
in
ins
mov
fcmove
add
cdq
push
sbb
pop
nop
retf
add
mov
sub
(bad)
xchg
jmp
rol
loope
enter
retf
retf
mov
push
adc
mov
add
les
push
xchg
cmc
iret
xchg
mov
aaa
mov
sbb
jns
or
adc
(bad)
mov
cmp
(bad)
push
xchg
cmp
outs
xchg
(bad)
xchg
stos
rol
adc
xchg
(bad)
sub
lods
mov
shr
push
xor
loope
arpl
dec
adc
add
sbb
mov
add
xchg
xchg
or
stos
call
adc
pop
mov
pop
xchg
hlt
out
lahf
enter
and
xchg
cld
xchg
(bad)
int3
adc
shl
ss
retf
sub
jecxz
lahf
scas
into
outs
jmp
add
scas
and
gs
test
(bad)
jge
pop
and
push
pusha
jecxz
(bad)
mov
mov
jge
(bad)
sub
sbb
rol
xlat
mov
cli
movs
fiadd
push
or
in
push
mov
and
rol
and
mov
jge
imul
retf
imul
or
retf
sub
pop
mov
push
retf
loop
fst
imul
mov
lock
cmps
pop
call
ds
cmp
sbb
lock
arpl
js
fmul
mov
xchg
sub
sub
pusha
out
fsubr
pop
mov
data16
mov
test
aas
mov
popf
adc
push
movs
mov
jnp
push
mov
inc
les
enter
pop
mov
nop
test
dec
mov
sub
or
push
(bad)
aam
hlt
xchg
ins
mov
cwde
and
int
loope
addr16
test
xchg
jg
scas
ror
jns
loope
cwde
out
sahf
hlt
ror
mov
jecxz
adc
nop
sti
imul
rol
xchg
popf
push
test
pushf
jge
xor
push
fisubr
icebp
sub
in
fprem1
stos
pop
js
xchg
xchg
hlt
enter
jecxz
scas
add
popf
xor
call
retf
adc
test
nop
xor
jmp
outs
push
mov
in
cmp
xchg
jp
retf
cwde
fnsave
aas
fiadd
sub
pop
ja
sbb
lods
lods
pop
xor
push
add
mov
mov
rol
loopne
ficomp
sbb
mov
pop
push
in
jge
dec
outs
push
mov
(bad)
inc
jmp
add
dec
add
not
outs
push
mov
scas
fnstcw
add
int
pop
mov
push
push
mov
adc
xchg
sub
pop
std
mov
sbb
xchg
inc
sub
push
lods
dec
jo
add
pop
mov
jb
movs
xor
and
imul
popf
fimul
sbb
(bad)
mov
outs
retf
into
inc
mov
sahf
push
add
mov
pop
mov
aad
mov
mov
xor
mov
sbb
and
repz
loopne
push
outs
ins
xchg
mov
mov
cmp
mov
fidiv
(bad)
xchg
shl
ja
imul
sbb
push
and
inc
(bad)
sub
pushf
jg
pusha
pop
ror
ret
jmp
xchg
sbb
test
int
sbb
das
fisttp
aam
push
mov
iret
mul
xchg
leave
push
rcl
neg
nop
pop
mov
rcr
outs
cmps
mov
(bad)
mov
add
jb
fdivr
inc
or
in
inc
scas
cmp
jmp
cli
pop
int3
addr16
mov
add
(bad)
mov
nop
in
sahf
mov
out
test
stos
shr
inc
idiv
sub
push
xchg
add
cwde
sahf
adc
loopne
hlt
scas
cmps
aad
dec
xchg
mov
mov
lods
adc
xchg
repnz
bound
xor
add
xchg
and
cmp
cdq
data16
int
cmovo
mov
mov
repz
cmp
sub
dec
xor
shr
ins
mov
in
sub
adc
mov
or
dec
and
xchg
test
cmc
pop
adc
jle
sbb
pop
in
popf
xchg
and
clc
inc
cdq
ins
fstp
enter
popa
sbb
push
sbb
pop
mov
rol
rcr
pop
sub
stc
add
in
call
jl
frstor
enter
or
sub
pop
int3
movs
test
and
mov
cli
movs
test
xchg
sub
es
fs
xlat
xabort
mov
iret
inc
fldenv
int3
or
ret
cdq
shl
stc
nop
popa
aaa
test
cmp
xchg
dec
jge
mov
add
ds
cmp
cs
pop
push
fistp
or
cmp
cdq
and
mov
pop
jecxz
mov
fisttp
int3
popa
sahf
(bad)
out
clc
js
lods
out
hlt
in
and
(bad)
je
xlat
fxtract
mov
and
movs
jnp
shr
sbb
xchg
out
mov
imul
adc
jp
ss
faddp
inc
mov
jl
loop
mov
or
ret
ret
call
add
xchg
add
out
leave
fcmove
aaa
arpl
pop
scas
cli
mov
leave
push
cs
int
cmp
sbb
mov
aad
inc
movs
cmc
(bad)
mov
inc
lds
inc
std
aaa
xchg
or
inc
adc
mov
test
cmp
adc
loop
jge
mov
inc
fisttp
jmp
push
fistp
cmp
aam
test
hlt
lahf
cdq
or
(bad)
adc
loopne
jg
pop
dec
push
das
aaa
ror
mov
lock
aad
lods
push
in
ret
jne
ss
mov
inc
adc
fiadd
shl
nop
in
jge
pop
lahf
mov
xchg
adc
mov
je
imul
call
add
jo
aaa
adc
js
in
pop
bound
retf
dec
stc
pushf
mov
repnz
hlt
mov
mov
push
loopne
pusha
in
(bad)
xor
push
mov
cmp
out
jmp
jl
jl
retf
je
fst
test
cmps
push
fwait
inc
(bad)
xor
jb
xor
sub
int
xchg
sbb
add
enter
call
mov
mov
scas
mov
push
retf
aaa
es
lock
ror
lods
call
outs
leave
lods
bound
push
leave
mov
rol
xchg
push
adc
inc
push
into
rcl
aaa
aas
fucomi
sub
ror
pop
fdivr
cwde
popf
sahf
mov
test
mov
push
int
pop
int3
mov
cmp
jmp
and
in
xchg
pop
sub
leave
jecxz
fsubr
and
inc
iret
push
or
inc
adc
xor
fwait
add
jno
nop
add
and
add
mov
jg
lock
in
pop
mov
fnstcw
xor
mov
xchg
popf
retf
arpl
mov
and
hlt
pop
loope
mov
test
fisttp
push
adc
sbb
xchg
sbb
sahf
js
push
adc
xor
loope
test
retf
sbb
mov
rol
sahf
(bad)
lahf
pushf
inc
ror
jnp
push
xlat
mov
adc
xchg
leave
add
push
mov
sbb
test
add
xor
add
jmp
aaa
cmc
sbb
call
inc
xlat
ret
xchg
adc
(bad)
mov
aas
or
div
xchg
add
pusha
sbb
nop
xor
pop
adc
imul
sahf
mov
lock
adc
int
hlt
fcomip
or
jge
retf
xchg
(bad)
call
ret
in
jmp
out
or
inc
mov
pop
imul
aam
sbb
push
jmp
xchg
pusha
sub
jge
(bad)
pop
pop
cmp
in
cmp
sbb
(bad)
daa
rcr
clc
adc
xchg
outs
stos
inc
test
(bad)
jecxz
add
xchg
push
mov
mov
dec
cmp
push
add
sbb
mov
mov
jne
ficomp
pop
into
pop
bound
(bad)
mov
push
mov
aam
jl
loope
ret
xor
push
sbb
test
jge
mov
sbb
rol
repz
xchg
push
xchg
test
fdiv
mov
bound
or
add
rol
mov
pop
int3
retf
das
popf
sub
adc
cmp
adc
aad
xchg
(bad)
loope
in
movs
call
out
mov
jg
xor
sub
les
mov
dec
les
mov
mov
pop
cmp
lods
in
mov
adc
add
jmp
xchg
xchg
xchg
mov
call
mov
adc
mov
mov
xor
test
loope
in
jmp
push
fcomp
out
cmps
pusha
xchg
leave
mov
cmp
shl
les
call
cmp
jo
ficom
sbb
pop
or
and
je
cld
shl
fadd
xchg
and
das
mov
fwait
repnz
lods
in
test
stc
loope
add
xor
mov
jmp
test
and
sbb
dec
or
mov
cmps
pushf
in
dec
jecxz
retf
lods
(bad)
pushf
ss
sub
ins
retf
push
cdq
mov
inc
shl
out
fwait
adc
jns
jecxz
jg
test
ins
rcr
nop
hlt
xchg
popf
cdq
mov
xor
xchg
fsub
adc
jns
lahf
jmp
stos
inc
mov
nop
call
mov
test
inc
inc
mov
mov
xchg
xor
sar
lods
(bad)
mov
or
xor
adc
outs
sbb
loope
xchg
push
fsub
arpl
cmp
pop
inc
loopne
xor
dec
xchg
mov
mov
shr
clc
sar
xlat
jg
ins
into
test
jno
xor
jp
push
adc
cmp
outs
sub
test
add
out
mov
and
(bad)
addr16
shr
fistp
addr16
(bad)
sbb
lods
fld
out
mov
push
(bad)
jmp
cmps
dec
xchg
xor
movs
xchg
scas
lahf
mov
push
pop
sbb
inc
test
or
les
xchg
ret
dec
neg
mov
lock
mov
push
adc
das
mov
jmp
dec
stos
(bad)
lock
mov
mov
lock
push
sbb
(bad)
in
mov
iret
in
fst
jmp
test
cmc
in
int
push
fmulp
sbb
mov
adc
fist
xchg
sti
loope
sub
fstp
scas
cmp
int
cdq
add
data16
push
and
aad
imul
xchg
das
int
rol
pop
mov
mov
ror
sub
test
fmul
inc
xor
add
jnp
in
retf
retf
ja
or
repz
sub
adc
and
js
ret
sbb
rcl
and
(bad)
jbe
mov
fwait
les
lods
xchg
xchg
pusha
adc
jecxz
sub
xchg
jge
add
repnz
scas
lods
add
xor
jl
or
jo
int
fs
dec
inc
movs
xor
mov
adc
mov
pusha
xchg
push
cli
bound
retf
sub
xor
xor
vaddpd
mov
nop
sar
jo
test
mul
push
rol
imul
imul
jno
sbb
jmp
unpcklps
mov
mov
mul
adc
loopne
xor
sbb
jo
sar
loop
or
push
js
xor
cmp
lds
das
jmp
push
cmp
je
mov
push
mov
dec
sub
inc
scas
pop
dec
mov
push
(bad)
lods
dec
std
pop
sbb
ins
pusha
test
mov
out
enter
jo
push
mov
adc
clc
rol
enter
xchg
out
xchg
add
push
nop
fist
pop
mov
enter
ins
aas
xlat
xchg
stos
adc
sub
mov
cmc
xor
jmp
and
ficom
into
mov
xchg
adc
jmp
sub
les
add
sbb
inc
fcom
adc
mov
fstp
(bad)
xchg
mov
jecxz
mov
sbb
lea
lahf
jmp
push
fs
aam
mov
bound
loop
jl
in
dec
and
dec
(bad)
es
and
and
(bad)
iret
cmp
adc
popf
bound
fcomp
rol
jl
xlat
test
lods
loopne
mov
cs
iret
mov
rol
aas
out
repz
push
sbb
adc
mov
out
rcl
cdq
and
and
lea
mov
(bad)
loopne
jg
fcom
xor
jp
inc
inc
sub
mov
data16
pop
sbb
rcl
xchg
inc
fadd
inc
ins
cld
mov
test
loopne
data16
pop
sahf
movs
pop
mov
xchg
add
ret
fbld
pop
ror
mov
arpl
push
xor
mov
push
pop
add
fs
enter
xchg
lahf
sub
inc
pop
xchg
imul
or
sbb
jle
aaa
and
inc
repnz
push
xchg
mov
xchg
sar
test
jb
rol
scas
jmp
(bad)
push
cmp
popf
int
jmp
xchg
adc
inc
sub
imul
lds
sub
pop
sub
in
mov
mov
xlat
in
(bad)
xor
pop
ror
in
or
adc
dec
or
cld
jmp
inc
loop
call
xchg
iret
xchg
enter
mov
or
std
(bad)
jns
or
ret
adc
push
enter
xor
mov
loopne
cmp
xor
xor
(bad)
adc
arpl
mov
ror
mov
cli
mov
int
clc
rcr
(bad)
or
aaa
ja
(bad)
mov
arpl
push
pop
pop
mov
sub
sbb
dec
mov
das
es
push
nop
popa
push
pop
xchg
into
and
out
xchg
mov
nop
cmp
sub
ret
push
jb
mov
cdq
jl
loop
arpl
js
cdq
int3
push
jno
fidiv
cmp
addr16
cdq
addr16
sub
pusha
cdq
test
test
pop
movs
xchg
enter
dec
fmul
pushf
sahf
mov
shl
pushf
fisub
outs
add
and
or
cdq
xchg
add
push
mov
daa
push
xor
shl
retf
into
in
nop
in
mov
cmc
mov
pop
or
adc
je
xchg
pushf
pushf
add
push
lahf
(bad)
xchg
jmp
and
xor
xor
stos
adc
xor
aas
mov
les
test
xchg
sbb
pop
fs
or
loope
pusha
dec
iret
or
xor
push
rcr
adc
(bad)
adc
jmp
leavew
lahf
jge
dec
mov
test
call
cmp
add
push
mov
and
mov
dec
mov
mov
sub
aad
ins
sub
int
xchg
lahf
cmp
mov
push
int
outs
out
xchg
lods
mov
jmp
xchg
mov
sbb
stos
rcl
fimul
lods
in
xor
cmp
xor
sti
std
loop
xchg
imul
fs
leave
gs
xor
mov
outs
mov
cmp
push
popf
mov
fsubr
in
xor
out
or
pinsrw
mov
movs
popf
adc
xchg
imul
cdq
retf
jl
push
xor
call
cdq
mov
cmp
add
dec
outs
loopne
enter
test
jg
jnp
outs
in
out
aam
sub
imul
inc
mov
test
dec
movs
cdq
fadd
xor
jno
mov
retf
data16
add
rcl
(bad)
fcomp
aas
pop
fwait
ret
in
fbstp
mov
int
cmps
jae
(bad)
dec
mov
shr
push
pushf
or
(bad)
aam
mov
loope
fdiv
cmps
retf
mov
(bad)
mov
shr
sbb
push
enter
les
dec
fwait
sar
idiv
ins
stos
mov
cdq
jo
fs
(bad)
jmp
mov
add
push
and
push
pushf
jmp
inc
sbb
out
rcl
les
cmps
arpl
push
mov
sbb
jns
sar
sub
pushf
enter
sub
add
imul
fild
leave
mov
ret
mov
pushf
addr16
xchg
je
mov
add
sub
lods
and
mov
push
add
ss
mov
mov
or
mov
or
mov
sub
mov
push
adc
(bad)
mov
inc
adc
iret
add
into
xor
and
and
mov
jmp
push
sahf
pop
sar
pop
ds
aam
call
push
popf
mov
lds
(bad)
(bad)
sub
push
stos
mov
shr
bound
dec
popa
(bad)
js
pop
push
mov
xchg
enter
mov
mov
(bad)
xchg
test
push
or
lods
fild
or
xchg
out
cmp
sbb
jns
jns
or
xor
adc
pop
shl
and
dec
mov
rol
xchg
bound
mov
test
out
into
and
dec
(bad)
iret
bound
shl
in
or
jb
sbb
test
jne
push
arpl
push
cmp
mov
adc
jmp
cmps
arpl
cmps
es
es
pop
add
das
jno
xor
(bad)
(bad)
mov
push
sub
mov
enter
mov
(bad)
xor
xor
push
mov
lds
inc
jnp
fsub
outs
call
mov
movs
sti
jnp
jno
loopne
xor
fs
aam
shr
mov
out
push
enter
retf
shl
jle
lock
je
test
push
xor
(bad)
test
xchg
ficom
nop
or
dec
movs
mov
push
push
xor
mov
lods
dec
test
fwait
jmp
je
fdivr
xlat
lea
outs
pop
xlat
xchg
enter
inc
mov
sbb
ficom
or
mov
jecxz
mov
adc
in
outs
sahf
mov
mov
call
xor
int
push
push
ficomp
jmp
pushf
in
cdq
and
ins
adc
cdq
call
mov
mov
pop
cmc
call
xchg
cdq
add
clc
jg
shr
mov
cmp
pop
mov
aaa
test
xor
cmp
cmp
jns
or
mov
fisub
adc
inc
pop
cmp
fst
lahf
rcr
and
mov
mov
mov
repnz
cmp
fs
push
in
popf
js
mov
push
push
xor
aas
mov
xchg
mov
adc
push
pop
push
xchg
nop
xor
adc
push
pop
shl
adc
xlat
or
adc
icebp
mov
movs
push
stos
aaa
in
xchg
push
push
aas
lods
mov
fdiv
nop
test
mov
dec
mov
fsubr
lods
out
mov
mov
fimul
xchg
sti
scas
inc
sub
pop
mov
cmp
lods
push
xor
dec
data16
cmp
inc
loopne
not
ret
pusha
bound
shr
into
push
pop
or
outs
push
retf
fstp
push
xor
icebp
xor
pushf
popf
out
xchg
push
add
imul
push
jo
jo
cmps
sbb
push
jmp
xor
mov
mov
sbb
jl
jb
aaa
mov
fiadd
ja
xor
repnz
inc
popf
pop
jmp
mov
xchg
jg
fist
xchg
pop
inc
je
mov
in
ins
or
mov
pop
out
cmps
push
jge
xor
(bad)
nop
sbb
mov
mov
and
movs
loop
push
xchg
jo
push
fist
loop
cmps
ficom
jo
jno
cdq
adc
imul
adc
push
loope
sub
jo
lds
aam
out
sbb
test
dec
mov
pushf
mov
sbb
repz
sbb
popf
lahf
ja
repnz
out
mov
jl
sub
fstp
icebp
out
jle
inc
fsub
fild
in
frstor
lahf
xlat
adc
les
aaa
call
fimul
hlt
sbb
rol
mov
fidiv
pusha
addr16
in
retf
nop
cmp
mov
ffreep
cdq
or
rcr
lock
xlat
sbb
mov
scas
imul
jge
ds
ret
mov
retf
push
jecxz
lods
push
in
(bad)
mov
imul
loope
jecxz
sub
push
inc
ds
add
sbb
xor
mov
addr16
addr16
loopne
sbb
retf
outs
xchg
push
pop
fidiv
pop
jecxz
mov
jmp
mov
cmp
(bad)
push
repz
mov
cmp
jmp
xchg
loopne
pop
sbb
sbb
pop
pop
ds
mov
push
pop
push
pushf
xor
sbb
fisttp
mov
pop
and
movs
jge
add
mov
rol
xchg
dec
(bad)
mov
mov
call
jmp
imul
bound
in
xor
popf
std
fld
pop
outs
mov
pop
adc
shr
pop
in
xor
(bad)
rcl
adc
jge
jecxz
mov
mov
xor
adc
xor
add
cmps
jecxz
mov
int
div
mov
cmp
mov
xor
and
and
pushf
mov
outs
fdivr
sahf
push
call
mov
xchg
mov
rol
push
mov
(bad)
push
adc
pushf
jmp
pop
(bad)
sahf
enter
ret
out
out
jmp
jp
push
stc
seto
xchg
push
xor
js
mov
shl
mov
leave
add
aad
(bad)
mov
push
hlt
(bad)
jecxz
mov
into
repnz
(bad)
sub
(bad)
pop
xchg
clc
cmps
ret
and
sub
sbb
lods
lods
add
mov
xchg
sub
or
jl
mov
pushf
cs
mov
fidiv
imul
mov
shl
jmp
mov
mov
test
xchg
gs
dec
(bad)
push
mov
cmp
inc
dec
(bad)
shr
jp
popf
movs
pop
(bad)
mov
dec
jo
fsub
cdq
dec
lds
mov
popa
div
fld
aas
jns
jns
shr
jmp
jmp
sar
cdq
mov
(bad)
stos
(bad)
retf
test
sub
dec
mov
xchg
mov
aas
pop
popf
sbb
xchg
adc
loope
dec
repz
cs
lock
sub
lods
mov
enter
lds
adc
sub
sbb
inc
xchg
aaa
enter
cmps
xor
ins
mov
arpl
mov
(bad)
jne
push
jnp
mov
test
jo
mov
push
dec
(bad)
push
(bad)
inc
jmp
cmc
movs
inc
in
mov
lods
cmp
ins
mov
cmp
push
pop
inc
call
pop
mov
xchg
jnp
inc
cmp
in
mov
jae
add
pop
imul
jmp
imul
dec
cmps
xchg
dec
xor
cmp
jecxz
jmp
jo
mov
aam
mov
mov
repz
js
lods
dec
loop
or
add
in
jle
imul
out
mov
loopne
les
movs
or
add
sahf
inc
repz
leave
nop
sub
ins
repnz
mov
loop
stc
(bad)
div
add
out
hlt
mov
loop
fiadd
imul
add
mov
mov
aad
enter
adc
xchg
jne
xchg
in
test
test
jae
and
sti
js
pop
xor
loop
adc
sahf
imul
outs
fs
test
leave
jge
xor
xchg
mov
loope
xchg
ror
test
lahf
add
pop
dec
inc
in
mov
shr
aaa
sub
push
xchg
popf
call
mov
dec
cmp
and
push
out
jp
xchg
popa
push
xchg
ret
xchg
push
sub
adc
push
leave
dec
adc
or
fnstsw
ins
xchg
mov
mov
mov
ret
mov
xchg
sbb
nop
call
push
mov
xchg
nop
jge
adc
arpl
mov
sahf
ret
scas
jns
fnstenv
std
leave
mov
test
cmp
add
mov
jge
aas
popf
jle
jmp
sar
in
push
loope
dec
ins
fadd
mov
push
js
in
nop
jbe
ss
popa
jb
daa
fisub
mov
jge
lahf
ins
xchg
stos
sbb
or
pop
popf
gs
retf
adc
test
dec
xor
aad
add
add
and
mov
push
pop
scas
dec
jle
sbb
xchg
pushf
mov
arpl
jmp
sbb
jl
pop
loopne
(bad)
sub
lds
xchg
fs
mov
es
pop
pop
dec
adc
add
xor
leave
xor
inc
mov
jne
popa
and
sub
mov
movs
pop
test
out
pusha
je
icebp
ror
push
xor
dec
fst
dec
xchg
add
sbb
lock
(bad)
sbb
push
ss
(bad)
cmp
mov
jnp
arpl
repz
aas
dec
retf
mov
fadd
in
mov
xchg
inc
inc
mov
popa
ret
retf
ret
sbb
pop
cwde
jo
(bad)
aad
scas
inc
lods
mov
mov
or
sub
push
in
(bad)
sbb
scas
xor
jge
adc
retf
int
addr16
std
push
aad
aaa
and
imul
mov
mov
pop
jmp
fild
xor
pop
adc
and
push
add
add
rcr
fiadd
push
mov
outs
(bad)
pop
jmp
scas
mov
enter
rol
jge
mov
mov
popf
cmp
(bad)
arpl
pop
xor
mov
xchg
mov
outs
jg
in
mov
aas
js
mov
scas
fdecstp
test
out
or
nop
and
jae
add
imul
lods
cmc
(bad)
shl
mov
sbb
lods
ret
fiadd
stos
and
mov
push
retf
push
aad
push
push
loope
(bad)
jp
pop
and
inc
dec
loopne
push
jns
leave
xor
xor
jmp
retf
sbb
fdiv
cli
enter
(bad)
repz
mov
shl
test
test
mov
leave
jge
xor
fld
pushf
enter
pop
enter
rol
gs
add
jp
mov
mov
jbe
cld
aam
test
fst
xor
in
or
xchg
mov
xlat
call
scas
in
xchg
into
sub
lock
ja
push
(bad)
mov
xor
rcl
lods
rol
xchg
hlt
pop
pop
lea
test
xchg
push
xchg
aaa
cdq
and
inc
and
aad
(bad)
outs
(bad)
push
sbb
out
mov
sub
cmp
stc
fld
jo
out
pop
in
fs
xchg
sahf
test
jg
xchg
sar
dec
adc
jo
aad
dec
or
aad
rcr
xchg
and
sbb
cmp
dec
sub
cli
jbe
and
fdiv
out
inc
test
sahf
fnstenv
pop
lds
cmp
loope
mov
aaa
hlt
lahf
mov
mov
ins
aaa
cmp
movs
stc
call
and
jmp
push
xlat
mov
outs
add
xchg
mov
popf
inc
mov
rcl
pop
or
add
and
cmc
or
lods
aas
inc
pop
sahf
mov
push
clc
or
xchg
jg
aam
xchg
and
xchg
repz
addr16
scas
sbb
pop
dec
sahf
jo
mov
xchg
push
arpl
(bad)
popf
jle
sbb
sbb
nop
jne
sahf
aad
pushf
xlat
pusha
and
add
sbb
sbb
or
shr
test
adc
pop
add
std
sub
leave
cmps
lock
leave
rcr
sahf
xchg
add
dec
test
or
inc
leave
(bad)
push
jmp
inc
je
cmp
xor
addr16
push
imul
repnz
mov
jle
loop
leave
outs
(bad)
adc
(bad)
je
mov
and
add
mov
popf
pop
mul
cmps
pop
inc
imul
fst
fstp
aad
inc
mov
push
add
(bad)
fimul
push
jmp
sahf
enter
jb
adc
in
mov
lods
fstp
xchg
imul
clc
pusha
mov
or
mov
lahf
add
xchg
in
pop
adc
loopne
unpcklps
rol
out
inc
xchg
push
fs
or
scas
mov
sub
dec
js
lods
je
int3
shr
js
xor
add
push
test
lahf
loope
inc
inc
inc
push
xor
lds
int
pop
fisubr
xchg
xchg
rsm
mov
jmp
popf
push
leave
lods
xor
add
mov
leave
jo
mov
fs
adc
bound
stos
dec
iret
hlt
in
into
xchg
xor
shl
push
bound
fistp
dec
int3
xor
sahf
and
popa
and
adc
mov
inc
jecxz
(bad)
mov
popa
adc
into
inc
cdq
jns
or
push
push
rcr
scas
loope
mov
sbb
icebp
mov
cmp
sub
test
punpcklwd
cmps
ins
xchg
test
push
test
enter
add
scas
xchg
jmp
push
fsubr
xor
inc
cwd
stos
je
frstor
les
and
(bad)
shl
xchg
dec
adc
jmp
jge
imul
inc
push
hlt
dec
fimul
retf
xchg
fstp
cmps
jmp
aad
or
xlat
push
pop
mov
add
mov
xlat
mov
mov
imul
aaa
neg
mov
jnp
jp
(bad)
shr
adc
jecxz
xor
ficomp
mov
inc
pop
ret
sub
(bad)
mov
(bad)
jge
xchg
enter
fsub
hlt
imul
ffree
imul
jo
xchg
fwait
jmp
jne
inc
and
ins
xchg
sub
xchg
loopne
mov
sbb
imul
adc
dec
push
cdq
inc
sub
aas
fidiv
mov
cdq
mov
cmp
pop
adc
xor
pusha
test
mov
ja
mov
rcr
mov
inc
leave
aas
mov
test
es
loop
imul
and
xor
mov
xchg
xor
jge
inc
loop
adc
fcom
push
movs
jnp
push
add
jae
rcr
xchg
push
mov
loope
sub
fsubrp
call
inc
cs
mov
fidivr
pop
cld
ret
mov
mov
fld
in
ins
mov
shr
jp
inc
stos
loopne
mov
mov
mov
inc
and
sbb
add
dec
add
xor
jo
mov
sar
call
jmp
dec
ins
pop
sahf
pop
pop
bound
dec
add
sub
dec
mov
pop
push
xchg
push
outs
sbb
cs
mov
sub
cmps
es
out
sbb
mov
outs
fldl2e
inc
mov
jnp
mov
out
or
sbb
in
mov
jmp
loopne
bound
mov
clc
call
scas
mov
jae
xchg
pop
cmp
test
jne
cmp
xchg
xchg
rol
into
dec
jnp
dec
outs
or
(bad)
jmp
pop
ja
mov
jge
jle
bound
das
repz
push
mov
xor
mov
(bad)
adc
jno
iret
imul
dec
repz
(bad)
cmps
mov
push
xor
pop
clc
mov
sub
(bad)
dec
mov
fwait
call
repz
cmps
mov
rcr
addr16
pop
sbb
fst
xchg
xor
lods
and
(bad)
and
(bad)
pusha
pop
in
mov
out
mov
adc
sbb
not
(bad)
mov
adc
rcr
mov
xor
aam
(bad)
fist
dec
lods
je
shl
push
call
pop
aad
ja
xchg
stos
jg
shl
jecxz
clc
js
retf
repz
push
sbb
mov
ret
cmp
dec
dec
jmp
lds
cmps
or
jp
sub
dec
xchg
push
mov
mov
pop
mov
push
iret
(bad)
pop
xchg
lahf
fiadd
in
add
inc
in
xor
nop
mov
ret
pushf
fld
loop
xchg
push
jo
fs
test
repnz
and
(bad)
fld
lahf
or
repnz
mov
and
test
inc
dec
repz
add
(bad)
cmp
and
lock
outs
sbb
or
xchg
cmp
mov
adc
mov
retf
movs
aam
jns
test
mov
leave
ins
dec
dec
int
repnz
jo
cwde
cli
jb
mov
scas
and
cmps
gs
cmps
mov
mov
xlat
jnp
into
jecxz
or
nop
push
mov
or
loopne
jp
add
push
sub
and
adc
or
fcomip
std
(bad)
retf
nop
clc
mov
pop
bnd
stos
mov
nop
aad
stos
xor
in
and
adc
mov
push
jecxz
lods
add
mov
leave
push
cld
test
cli
mov
push
out
mov
jnp
scas
add
sbb
in
sahf
sbb
lds
jo
mov
retf
mov
pop
mov
call
push
(bad)
(bad)
loope
xlat
es
inc
(bad)
imul
les
mov
addr16
or
xchg
push
fdiv
popf
or
mov
(bad)
xchg
push
mov
cmps
xchg
xchg
out
mov
jg
leave
inc
inc
push
xchg
fistp
mov
jmp
retf
jg
leave
jecxz
and
mov
lea
and
mov
mov
push
add
adc
aam
add
je
lahf
aas
cmp
enter
mov
inc
fistp
push
mov
mul
mov
idiv
mov
shr
sahf
pop
pop
sbb
js
retf
pop
pop
and
sahf
pop
loop
add
dec
test
add
mov
data16
mov
loopne
push
xchg
ja
mov
bound
cld
rol
push
hlt
std
mov
lahf
xlat
fwait
(bad)
pop
shl
add
fistp
in
pop
mov
push
xor
pop
xor
and
xchg
cmp
outs
lods
scas
test
jmp
in
inc
cmp
into
mov
mov
pop
push
or
pusha
pop
aam
repnz
ret
stos
xchg
xor
sub
pop
add
cmp
mov
and
or
xchg
or
or
xor
ror
xchg
sub
je
and
mov
(bad)
jne
cmp
fwait
es
int
mov
mov
pusha
out
aam
repnz
(bad)
mov
std
add
in
pop
retf
cmp
add
jl
aas
xchg
nop
pushf
push
(bad)
dec
repnz
out
sub
jg
cmps
pusha
jne
inc
(bad)
xchg
and
aad
call
enter
sub
xchg
inc
addr16
jmp
sti
add
xor
rcl
xchg
pop
repnz
xor
das
rcl
clc
fidiv
xor
add
or
push
mov
xchg
and
test
sub
dec
jp
cld
xor
std
jno
sub
lahf
adc
je
(bad)
in
lahf
bound
retf
push
lahf
mov
jg
xchg
mov
jae
dec
out
xchg
mov
aam
adc
jno
pop
fcom
and
jbe
fprem1
push
addr16
sub
jg
add
fbstp
std
mov
call
and
mov
adc
xor
aam
lahf
rol
mov
lods
or
mov
jb
push
scas
mov
jg
(bad)
xor
or
xor
shl
xchg
(bad)
test
pop
fstp
les
ja
sub
push
xor
jns
adc
push
xchg
sub
xchg
test
movs
xor
adc
mov
push
sar
lds
push
or
or
xchg
sbb
mov
imul
scas
mov
push
cmp
jl
movs
mov
or
ret
sub
fnstsw
mov
test
push
pop
cmp
mov
jb
sahf
mov
in
xchg
cld
push
mov
jl
push
adc
call
pusha
inc
loopne
scas
cmp
jb
push
movs
inc
sbb
and
xchg
mov
sbb
jp
mov
lods
loopne
(bad)
fisub
push
imul
fadd
mov
repnz
nop
(bad)
xor
push
(bad)
fst
shl
dec
mov
sti
pop
inc
push
bound
es
xor
xchg
mov
lods
stc
enter
mov
push
or
data16
push
mov
out
mov
repz
pusha
stc
loopne
clc
ror
xchg
pop
inc
out
(bad)
cmp
inc
ror
loopne
inc
add
lea
mov
pushf
mov
out
mov
adc
clc
cmps
in
repz
push
movs
jge
sahf
fild
xor
fwait
out
cdq
retf
fs
test
cli
mov
lahf
clc
call
jmp
cwd
add
lds
aam
and
addr16
sbb
fbstp
dec
adc
pop
mov
stos
(bad)
rol
ret
sbb
xchg
outs
dec
ret
push
rol
mov
push
ret
sub
and
js
imul
inc
jmp
and
call
es
mov
hlt
mov
mov
mov
xchg
popf
cmp
add
jns
adc
push
mov
retf
sbb
pop
add
je
push
(bad)
jge
scas
mov
shr
push
jo
pop
add
dec
push
inc
xchg
mov
jge
sub
cmp
xchg
shl
outs
fdivr
add
pop
sahf
retf
cmp
popa
mov
xor
mov
into
inc
inc
xchg
aas
sahf
jmp
dec
jns
xchg
or
push
push
in
mov
inc
cmp
xchg
add
stc
dec
or
hlt
push
leave
lock
jle
cs
push
enter
jecxz
sub
xchg
cmps
add
nop
push
mov
sbb
leave
inc
cmp
mov
cld
push
add
ins
imul
lods
imul
fwait
add
dec
enter
pusha
outs
leave
pushf
lods
jns
lea
call
push
test
in
gs
mov
sbb
mov
(bad)
add
add
mov
jge
or
push
outs
movs
rcl
mov
xor
dec
dec
push
stc
into
lea
lahf
cmps
add
inc
jns
dec
cmp
inc
add
out
popa
mov
nop
into
mov
push
ja
sub
int
jmp
mov
pop
retf
pop
mov
lods
jmp
out
sbb
fdivr
retf
mov
sahf
retf
iret
push
push
inc
outs
jb
scas
test
cs
xchg
xchg
retf
sub
retf
sub
bound
stos
add
dec
pop
ror
out
lea
mov
ins
dec
jae
fiadd
outs
push
inc
int3
leave
gs
clc
call
loopne
shl
adc
inc
(bad)
jge
(bad)
cmp
sahf
mov
or
adc
xchg
sti
xor
sub
imul
fist
xchg
jp
icebp
(bad)
ja
and
lds
fdivrp
sub
dec
(bad)
loopne
mov
or
fcom
push
dec
xchg
pop
pop
into
leave
in
xchg
mov
fmulp
xchg
push
hlt
hlt
mov
jb
and
lds
pop
mov
movs
add
ret
ins
imul
jmp
iret
scas
jmp
adc
pop
jmp
xchg
inc
adc
pop
xchg
xlat
lods
lahf
stos
in
ja
test
xor
mov
in
loopne
dec
leave
les
mov
sar
jge
js
fisttp
xchg
mov
xor
bts
outs
xor
iret
repnz
scas
sbb
rol
(bad)
(bad)
test
jge
lock
adc
dec
pop
mov
outs
loope
lea
fisub
ds
mov
mov
hlt
imul
jl
fisttp
dec
aaa
add
cmp
or
xchg
(bad)
mov
test
jge
lds
add
outs
jle
mov
adc
je
test
adc
push
dec
pusha
add
xor
pushf
sbb
pop
dec
pop
lods
call
es
test
push
(bad)
icebp
aaa
sar
imul
jbe
mov
mov
loopne
(bad)
fstp
push
xchg
sub
sub
xor
jmp
jecxz
les
jp
xor
fs
mov
out
jmp
scas
fldcw
adc
xchg
imul
je
pusha
mov
push
arpl
inc
adc
shl
in
and
fld
xchg
jge
xor
loop
idiv
fld
mov
out
xor
add
cmp
hlt
aaa
mov
xor
push
mov
xchg
add
mov
lahf
jecxz
and
adc
sub
push
cmp
loop
cdq
push
jl
imul
lock
retf
fld
fwait
cs
shl
scas
jmp
pusha
xchg
call
mov
lock
jmp
mov
sbb
test
jge
pop
pop
lods
and
enter
in
xchg
push
into
je
in
xchg
inc
add
jp
add
rcl
and
test
mov
sub
mov
cmp
mov
jp
pushf
adc
aad
mov
pop
adc
push
adc
xor
inc
mov
shr
addr16
int3
popf
loop
or
adc
addr16
aam
push
fst
mov
(bad)
loop
iret
lahf
(bad)
sbb
addr16
movs
fsubr
sahf
xchg
fcom
and
test
scas
fidivr
mov
cli
iret
sbb
arpl
mov
xchg
mov
adc
mov
mov
(bad)
mov
sub
pusha
push
xlat
push
imul
mov
leave
pop
mov
movs
sti
inc
hlt
mov
sbb
push
sahf
sbb
sbb
cmps
loopne
(bad)
mov
mov
dec
xchg
xchg
outs
retf
clc
inc
sbb
in
rcl
mov
(bad)
ficomp
mov
xchg
cmps
pop
pop
retf
adc
imul
jae
add
inc
mov
adc
pusha
add
ret
and
push
dec
jp
push
push
adc
fiadd
dec
sbb
sar
imul
jg
bound
fs
cmc
xchg
lea
popa
mov
add
add
mov
mov
das
test
inc
jno
fbstp
mov
test
or
xchg
data16
push
xchg
aas
xchg
xor
jl
shl
ror
mov
and
xor
fldenv
or
ins
adc
mov
popf
cdq
sub
pop
xchg
pusha
jmp
jg
xchg
(bad)
xor
sbb
sub
mov
push
mov
xchg
dec
lods
pop
inc
imul
lods
ins
adc
leave
loopne
shr
(bad)
(bad)
mov
retf
jge
dec
fild
in
xor
outs
inc
cmps
nop
movs
ins
pop
inc
jo
cdq
cmp
bound
and
shr
mov
and
movs
pop
popa
or
call
imul
pop
or
fs
retf
and
(bad)
loop
jmp
adc
fdivr
jne
push
jne
add
mov
cmp
pop
lock
rcl
or
sti
pusha
rol
in
sub
fidiv
or
in
das
jle
cld
(bad)
rol
or
rcr
rcl
int3
mov
in
mov
cmp
mov
xchg
mov
out
nop
xor
jmp
ja
mov
mov
aad
pop
lock
jae
stos
ror
stos
mov
xor
(bad)
sub
mov
or
mov
mov
out
test
cmp
mov
ins
lock
and
dec
(bad)
(bad)
mov
clc
push
sar
dec
ss
imul
mov
sub
out
sbb
ja
(bad)
push
aam
mov
mov
loopne
fist
mov
xchg
pushf
or
setb
aam
jle
call
mov
push
stos
push
cld
stc
mov
loopne
pop
xor
mov
aaa
mov
or
test
stc
inc
or
test
xlat
fwait
xchg
and
call
push
push
pop
call
es
push
int
xchg
fsubrp
add
mov
in
cli
or
retf
mov
hlt
dec
push
call
dec
pushf
xchg
mov
popf
cmp
enter
add
mov
and
imul
push
mov
xor
aaa
xchg
pop
sbb
ins
mov
mov
mov
sub
aas
scas
or
mov
mov
add
adc
mov
ins
inc
mov
xor
movs
mov
jge
and
shl
add
mov
mov
popf
retf
ins
add
call
push
xchg
xchg
inc
mov
aaa
adc
mov
and
enter
ret
dec
add
push
xchg
cmp
dec
push
mov
mov
lods
int3
imul
scas
jecxz
push
sbb
loop
inc
mov
push
push
sahf
shr
and
xchg
test
mov
nop
ret
es
jmp
xor
stos
mov
popa
pop
xchg
ret
lods
cmp
shl
lods
xchg
in
repnz
outs
sbb
mov
(bad)
mov
mov
bound
mov
(bad)
pop
aaa
shr
in
imul
jecxz
fcmovb
ds
add
inc
fistp
push
xchg
lds
call
enter
leave
cmp
mov
in
mov
les
or
sub
shl
mov
les
(bad)
not
inc
inc
and
xchg
push
aam
cmp
sbb
(bad)
push
cs
cmps
sar
add
scas
fdiv
lods
mov
dec
jg
or
shl
or
sbb
fidiv
push
push
add
cs
aaa
ins
pop
rcr
mov
cmova
push
inc
sub
mov
aam
int
dec
popa
xchg
jge
mov
leave
adc
push
mov
mov
xchg
push
aad
add
add
mov
jmp
retf
(bad)
in
mov
lock
xor
xchg
ins
cmp
xchg
add
mov
push
inc
fmul
mov
pop
cld
xchg
push
pop
cdq
and
xchg
cwde
push
jbe
xchg
pop
pop
fcmovu
les
in
rcr
push
xchg
mov
int3
push
mov
retf
xchg
vshufpd
hlt
fdivr
and
xor
mov
mov
aam
add
jne
(bad)
mov
sahf
xor
pop
js
or
enter
leave
cdq
add
fld
(bad)
sub
mov
in
cmp
and
cmp
or
popa
push
pop
rcl
add
xor
test
lahf
jnp
scas
lds
int3
jmp
adc
xor
mov
jle
mov
ins
pushf
jo
rcr
and
and
jl
test
xchg
test
in
fwait
pop
mov
mov
rcr
sub
inc
scas
add
inc
inc
add
jo
jecxz
mov
fs
fimul
(bad)
retf
xor
int
xor
int3
mov
mov
jnp
adc
add
mov
psraw
push
clc
mov
repz
mov
in
jecxz
add
imul
sub
imul
enter
repnz
mov
jl
call
(bad)
cmp
adc
hlt
mov
repz
jb
mov
jmp
test
adc
fistp
inc
or
mov
or
(bad)
pop
sbb
xor
(bad)
fnsave
out
in
je
ficom
pop
mov
dec
pop
outs
out
push
xor
mov
iret
jmp
outs
sbb
mov
cmps
fsubr
lea
and
into
push
ret
inc
push
mov
aad
sbb
into
xor
xchg
imul
fsub
dec
out
call
xchg
sahf
or
clc
mov
dec
adc
xor
repnz
mov
movs
jecxz
mov
stos
lods
das
neg
out
adc
xchg
mov
jecxz
mov
push
xchg
shr
xchg
mov
add
adc
stos
xchg
mov
push
fsubr
push
mov
inc
ret
div
ins
dec
je
cmp
std
rcl
push
retf
ficom
and
adc
cs
push
mov
je
cmp
ret
inc
scas
push
sub
outs
cwde
adc
test
std
push
js
pop
dec
xchg
xchg
cmc
inc
add
dec
fcomp
jbe
shl
loope
jge
push
cld
and
adc
push
les
xchg
lds
sub
push
push
ficom
call
daa
xor
pop
and
iret
imul
ss
iret
xcrypt-ecb
cmps
retf
mov
mov
or
sub
jg
push
dec
je
xor
mov
sub
fmul
and
mov
pop
mov
adc
mov
or
mov
pop
jg
add
int
(bad)
mov
lods
push
push
add
mov
xlat
fnstsw
or
sahf
inc
sbb
or
arpl
push
icebp
dec
test
outs
and
mov
jo
rcl
mov
in
push
adc
dec
mov
sub
sub
sar
mov
mov
mov
xor
(bad)
mov
data16
fdivr
imul
rcr
adc
cmps
mov
mov
fadd
js
pushf
mov
mov
test
mov
or
fsubr
or
mov
outs
lock
add
xor
sub
push
rcl
pusha
mov
xor
pusha
inc
stos
ss
in
test
int3
(bad)
mov
mov
xor
fcom
test
pop
movs
fld
in
pop
or
add
movs
cmps
call
sub
mov
pusha
adc
fcom
add
add
movs
mov
sub
mov
lea
lea
mov
std
imul
mov
mov
rcr
pop
adc
ins
fisttp
js
dec
stos
add
jns
xchg
mov
sub
adc
sbb
cmp
int3
inc
mov
or
(bad)
mov
push
sub
clc
xchg
test
in
jns
jecxz
push
jge
xchg
mov
call
lahf
dec
stos
movs
push
sub
mov
mov
call
mov
push
add
push
cwde
pop
pushf
mov
addr16
adc
aaa
xlat
or
shl
or
pop
mov
sahf
dec
cdq
popf
push
call
mov
loopne
push
(bad)
push
imul
mov
hlt
and
sbb
mov
in
call
or
hlt
lahf
mov
mov
scas
mov
enter
adc
ror
sbb
(bad)
out
imul
nop
cmps
mov
mov
add
mov
push
jmp
aam
lods
fsub
xlat
addr16
xlat
popf
dec
jb
lds
pop
xor
mov
iret
outs
test
adc
(bad)
adc
enter
ss
movs
xchg
mov
outs
popf
sahf
jnp
imul
rol
jnp
xor
shr
pop
sbb
or
neg
ins
cmp
mov
in
in
adc
icebp
in
enter
adc
in
and
or
and
(bad)
xor
and
test
mov
xchg
(bad)
nop
mov
or
dec
cmps
out
xlat
push
test
scas
push
cwde
push
dec
loopne
(bad)
mov
xchg
stc
cs
pop
jo
adc
mov
jg
jmp
mov
jo
mov
mov
xchg
xabort
jnp
mov
fmul
mov
pusha
cmp
ret
fstp
js
and
in
add
mov
mov
pushf
je
dec
mov
mov
cmp
lds
mov
xchg
mov
fmul
(bad)
inc
mov
in
sub
cmp
pop
mov
lock
cld
mov
call
outs
popf
push
lods
jb
daa
mov
jo
mov
cmp
loopne
xchg
mov
mov
(bad)
mov
mov
js
rcr
(bad)
sub
sbb
jo
ret
test
push
xchg
mov
mov
and
loop
adc
mov
in
imul
nop
mov
and
inc
lahf
enter
es
cmp
mov
dec
mov
loopne
jmp
mov
sub
sbb
pusha
adc
xor
add
inc
jb
xor
adc
or
adc
sbb
fcom
call
loopne
into
(bad)
pop
mov
sub
shl
xor
pusha
test
(bad)
test
fcom
mov
mov
pop
jne
cmc
push
sbb
scas
mov
push
sbb
lock
rcl
push
adc
push
repz
mov
enter
sbb
nop
(bad)
mov
mov
jg
aad
pop
(bad)
push
popf
push
test
fstp
pop
sub
mov
ss
mov
push
dec
stos
dec
test
aad
pusha
inc
aam
rcl
mov
movs
lods
or
js
mov
xchg
xchg
outs
and
nop
movs
adc
lock
aam
ror
jge
mov
mov
ss
fcomp
ss
mov
mov
test
sbb
push
mov
(bad)
xor
mov
jo
jl
sub
pushf
xchg
xchg
(bad)
mov
mov
test
fdiv
xor
or
push
test
sub
clc
xchg
mov
pop
scas
in
mov
or
mov
mov
stos
stos
cmps
push
mov
xchg
sar
movs
fsub
mov
inc
enter
and
movs
enter
fcom
lods
movs
enter
cmp
imul
call
mov
adc
cmps
out
xchg
loopne
push
in
jb
sar
and
(bad)
fisub
int3
aam
shr
(bad)
mov
rcl
(bad)
xchg
cmp
xchg
rcr
movs
sbb
push
(bad)
clc
fadd
pop
call
call
call
xchg
sahf
mov
mov
clc
xchg
sahf
mov
mov
ss
(bad)
sahf
mov
xchg
mov
cli
lds
mov
xchg
mov
(bad)
call
mov
ins
nop
push
adc
shl
rcr
(bad)
call
aam
add
stos
cmps
xlat
outs
loop
xchg
enter
lock
sub
push
(bad)
mov
cmps
pop
add
mov
out
xchg
push
xchg
push
mov
add
leave
xchg
movs
or
stos
sbb
mov
pusha
xchg
adc
mov
add
add
cwde
nop
mov
sbb
bswap
and
push
mov
xchg
mov
movs
faddp
cmp
sub
fcom
nop
test
pusha
aaa
mov
hlt
inc
mov
test
test
mov
or
mov
cwde
sbb
imul
aaa
sbb
xor
test
mov
xor
or
xor
add
popf
adc
outs
pop
js
sbb
cmp
out
retf
mov
sub
mov
inc
jae
lods
stos
mov
scas
xor
xchg
out
mov
sbb
stc
mov
enter
sub
sub
shl
lods
cmp
xchg
popf
sbb
inc
fiadd
mov
test
mov
fwait
jle
sub
lods
or
jbe
shl
mov
add
cmps
lods
sub
(bad)
mov
push
adc
ficomp
adc
nop
mov
clc
out
xor
push
inc
lods
adc
sub
or
ja
or
aam
outs
mov
jp
popf
ins
cs
rcl
fmul
mov
pop
mov
das
xchg
mul
jo
inc
adc
and
dec
outs
mov
push
(bad)
sub
cs
jecxz
popa
popf
xchg
ins
mov
mov
outs
or
cwde
loopne
mov
das
fdivr
xchg
mov
shr
inc
dec
test
shl
jae
mov
rcr
aaa
popf
shl
push
sbb
mov
div
rol
(bad)
enter
pop
and
and
xchg
inc
sahf
mov
or
push
clc
test
xor
lock
mov
xor
sbb
xchg
rol
scas
fiadd
into
ja
scas
add
rcl
sbb
mov
jl
adc
inc
mov
out
xchg
sbb
mov
mov
scas
or
lock
out
(bad)
mov
jmp
shl
sub
scas
rcr
inc
xor
sub
jo
loopne
es
xchg
shl
jmp
mov
xor
or
ss
mov
adc
test
nop
aam
push
aaa
mov
sbb
mov
or
lods
sbb
cmp
loope
xchg
mov
(bad)
inc
das
xchg
ror
mov
(bad)
rol
xchg
mov
(bad)
jmp
jae
mov
ins
xchg
rcl
loope
scas
aam
mov
cmp
popf
sbb
shl
cmp
mov
xor
push
cdq
popf
stc
jmp
hlt
les
xor
jmp
mov
data16
mov
mov
mov
mov
mov
outs
test
sbb
sbb
sub
ss
adc
jns
add
push
cmp
or
jae
adc
mul
imul
cmp
cmp
repnz
xor
das
jno
inc
and
mov
cmp
mov
mov
clc
sahf
(bad)
fcmovne
jo
imul
(bad)
shr
push
in
outs
xchg
mov
shl
(bad)
rcr
adc
pusha
mov
shl
push
xchg
mov
mov
stos
(bad)
cmp
in
pusha
xlat
fcom
sbb
icebp
fisub
sub
lahf
jg
or
adc
cmp
adc
cdq
mov
out
add
mov
pop
rol
jo
cmps
shr
xchg
push
jg
adc
cwde
adc
and
mov
rcr
dec
xchg
mov
sub
cwde
and
and
aaa
shl
mov
xor
mov
call
cmp
adc
and
aam
mov
popf
mov
push
mov
xor
cmp
cmps
loopne
mov
clc
pop
dec
and
jns
xor
mov
pop
sub
or
repz
fsubr
mov
in
or
fmul
pop
lock
cmp
loopne
retf
cwde
push
xor
test
fst
push
adc
mov
sbb
test
add
out
mov
mov
cwde
hlt
and
mov
pop
mov
cwde
lahf
shl
test
enter
xor
cmps
ins
sbb
shl
mov
xchg
fmulp
pop
pop
add
dec
les
mov
mov
fst
test
loopne
xor
mov
retf
inc
mov
or
mov
xchg
mov
xchg
push
cmc
imul
xchg
cmp
(bad)
(bad)
and
xor
mov
push
pop
(bad)
sbb
mov
outs
and
shl
loop
(bad)
dec
mov
and
(bad)
push
xchg
gs
pop
mov
or
icebp
mov
or
cmps
sub
aad
xchg
imul
hlt
cmp
test
adc
nop
push
es
les
sub
or
xor
jo
fcmovbe
rcl
(bad)
aad
pop
add
mov
pop
aas
call
int
popf
stos
and
jp
mov
mov
pop
call
mov
daa
and
popa
popf
stos
add
sbb
mov
ss
stos
jne
pop
push
call
stos
movs
push
test
mov
mov
or
ins
lods
push
sub
(bad)
adc
mov
xchg
or
sahf
mov
mov
mov
test
pop
dec
push
lods
mov
lock
aam
mov
test
(bad)
cmp
mov
xchg
(bad)
int
add
test
xor
test
cmps
aaa
mov
adc
shr
add
call
and
out
aam
mov
daa
mov
(bad)
call
aam
mov
mov
add
inc
mov
dec
mov
mov
mov
(bad)
mov
mov
cwde
pop
and
mov
in
call
xor
fst
std
gs
lods
mov
popf
fsubr
or
pusha
and
pushf
test
adc
mov
mov
and
xchg
add
and
mov
dec
pusha
mov
es
xchg
mov
test
mov
adc
leave
lods
mov
mov
test
push
adc
nop
fisubr
adc
int
fadd
movs
mov
cmp
mov
fisubr
pop
add
popf
aad
mov
mov
dec
lods
and
cmps
mov
mov
pusha
jo
sub
and
push
mov
enter
mov
ins
enter
adc
or
sar
mov
imul
xchg
jns
imul
je
sub
dec
pop
rcr
xor
push
(bad)
sub
movs
cmp
sub
(bad)
rol
adc
pop
xor
and
add
js
and
or
repz
scas
call
sbb
cmp
mov
lods
cmp
or
leave
lock
xchg
inc
inc
dec
std
aas
mov
cwde
ror
loope
xchg
call
push
movs
adc
enter
out
add
js
and
enter
and
pop
aam
mov
mov
push
in
outs
sub
enter
mov
lods
xchg
xor
jecxz
(bad)
into
sar
dec
mov
repz
mov
cld
cmp
sbb
jp
daa
cwde
dec
add
and
add
shl
pop
inc
mov
and
adc
mov
push
ret
je
pop
mov
dec
test
test
outs
inc
mov
pushf
push
mov
mov
pop
fisub
test
mov
ins
dec
div
rol
xchg
nop
or
(bad)
and
inc
cwde
or
pop
mov
cwde
rcr
cdq
clc
sbb
push
mov
xor
fcomp
enter
dec
lock
mov
call
test
mov
rcr
loope
xor
sbb
lock
nop
leave
fstp
or
mov
rcr
xor
xor
punpckhdq
xchg
sbb
xlat
mov
movs
xor
mov
(bad)
jb
iret
test
mov
das
cmp
aaa
inc
push
(bad)
pusha
mov
mov
ss
stos
loopne
mov
sbb
loopne
aam
mov
xor
lock
sbb
push
es
leave
(bad)
and
(bad)
loopne
or
jp
cwde
mov
(bad)
nop
js
jg
xor
lock
aaa
rcl
sub
cmp
ror
pop
xchg
rcl
rcl
nop
push
mov
xor
mov
(bad)
in
stc
and
call
mov
mov
xchg
and
and
(bad)
jns
xor
nop
into
shl
shl
test
(bad)
shl
push
mov
(bad)
rol
in
xlat
mov
push
clc
call
cwde
mov
nop
stc
mov
sbb
mov
xchg
es
(bad)
dec
lahf
push
xchg
sbb
dec
jecxz
in
rcl
xchg
mov
xchg
scas
jp
sbb
pop
clc
hlt
jae
jo
xor
mov
add
std
test
mov
xchg
mov
repz
adc
or
sti
out
mov
icebp
cmp
push
push
(bad)
clc
ds
add
lock
jo
call
mov
or
xchg
push
cmp
mov
sub
retf
mov
add
sbb
xlat
call
mov
hlt
mov
cmps
dec
cmc
enter
dec
test
adc
mov
mov
sub
sahf
jo
mov
sub
sub
fldenv
(bad)
call
pop
pop
fsub
and
pusha
sahf
sub
pusha
cmp
aam
xchg
xor
cmp
sbb
mov
(bad)
pop
data16
or
imul
xchg
cmps
fmul
(bad)
xor
mov
ss
fs
les
out
cmp
jmp
mov
sbb
xor
inc
jno
movs
jmp
sub
jmp
sub
mov
cmp
jle
inc
pop
movs
jmp
push
iret
and
test
adc
ret
dec
aaa
xchg
xor
mov
mov
pop
jg
imul
mov
repz
rol
adc
int
fiadd
mov
int
xchg
scas
cwde
mov
js
jo
out
fld
nop
shl
(bad)
sbb
test
add
mov
test
and
sub
scas
ret
enter
mov
mov
aam
aam
int3
mov
mov
mov
xchg
push
push
in
ror
mov
sbb
sar
add
fdiv
sbb
jno
and
or
cmp
cli
mov
js
mov
xchg
nop
clc
lock
mov
pop
rcr
enter
nop
fsub
sub
daa
into
or
repz
lahf
inc
movs
ins
ins
xchg
jne
mov
rcl
(bad)
jo
sbb
outs
mov
in
sub
(bad)
mov
popa
mov
test
outs
daa
outs
ja
outs
std
sbb
and
add
repz
adc
into
in
sbb
movs
jmp
movs
lahf
inc
pop
sub
adc
fild
xchg
cwde
das
xor
adc
mov
pop
mov
sub
cwde
mov
aad
daa
ins
adc
cmp
mov
data16
cmp
test
xchg
shr
jb
ja
nop
mov
nop
nop
mov
shl
(bad)
mov
mov
mov
fs
js
ror
clc
push
add
sub
jp
pop
sbb
loopne
mov
call
retf
sbb
jns
or
and
out
ret
ss
jmp
scas
mov
pushf
(bad)
xchg
test
mov
mov
xchg
call
push
mov
xor
shl
pop
adc
movs
add
enter
fnstenv
hlt
out
and
jae
loopne
mov
fwait
mov
mov
push
mov
lahf
fstp
adc
mov
clc
add
pop
dec
es
(bad)
rcr
sbb
mov
daa
popf
test
shl
repnz
stos
test
mov
aam
test
mov
cwde
pop
das
mov
jbe
mov
adc
(bad)
js
dec
pushf
scas
cwde
nop
js
xlat
call
inc
nop
push
mov
xor
mov
mov
and
rol
pop
or
mov
push
pop
rol
call
outs
ss
push
fld
(bad)
icebp
(bad)
pusha
xchg
movs
adc
mov
mov
popf
mov
and
fistp
int
or
repz
cmps
mov
fidivr
mov
and
inc
xchg
fidiv
add
nop
jmp
sbb
bound
and
adc
outs
mov
adc
imul
mov
sbb
mov
or
test
popf
mov
jae
and
nop
hlt
pop
dec
sahf
stos
(bad)
push
bound
fisttp
or
xor
mov
mov
mov
cmp
sahf
cmp
dec
nop
jmp
push
add
fidivr
mov
cmp
fcom
push
mov
xrelease
inc
mov
mov
sahf
pop
in
daa
popa
ret
fdiv
rcl
mov
aaa
push
push
jle
mov
push
lock
adc
add
cmp
add
cmp
test
mov
jae
inc
push
(bad)
mov
sub
mov
dec
lods
xchg
mov
pusha
fmul
je
mov
movs
adc
aaa
cmps
stos
sahf
or
pop
mov
mov
fsubr
mov
enter
dec
push
call
sbb
mov
adc
rcr
out
mov
mov
sub
pop
mov
adc
jbe
mov
icebp
add
or
mov
fmul
push
sub
mov
and
clc
xchg
test
enter
es
(bad)
jecxz
or
xchg
inc
add
ja
pop
int3
call
and
and
adc
sub
push
mov
mov
adc
outs
push
fmul
hlt
mov
call
inc
dec
pusha
push
sub
xor
inc
mov
dec
loop
movs
jg
mov
fs
out
cwde
add
push
test
aam
cmps
mov
int
jl
push
adc
mov
pop
test
xor
mov
test
repz
xchg
inc
(bad)
adc
nop
repz
push
jge
fcom
pop
xchg
lahf
mov
mov
stos
je
je
xor
imul
fsub
mov
jmp
pop
inc
add
xor
das
not
xchg
in
adc
jmp
mov
or
rol
or
mov
mov
hlt
popf
mov
xchg
cdq
pop
push
add
mov
sti
and
cmp
enter
adc
dec
push
push
daa
imul
cmps
pop
pop
adc
and
cmps
hlt
jmp
lea
in
enter
adc
mov
call
jo
sahf
cmc
xor
aam
pop
sbb
test
push
fcom
jo
mov
pop
mov
cwde
fucom
test
mov
shl
scas
fcomp
test
aas
shl
(bad)
pushf
jge
aam
mov
imul
mov
mov
cmp
nop
out
push
mov
hlt
(bad)
enter
push
nop
and
sub
imul
test
scas
call
adc
fisubr
mov
push
imul
rcr
popa
int
mov
aas
mov
adc
mov
and
sbb
out
out
mov
add
jno
push
or
sub
sub
(bad)
cmp
push
add
mov
dec
jo
add
bound
in
and
test
shl
call
add
mov
add
loopne
mov
and
mov
fs
pushf
cmc
movs
mov
int3
in
into
adc
mov
mov
aam
mov
mov
cmps
cdq
lock
call
sbb
adc
jb
and
mov
hlt
adc
pop
xchg
test
dec
and
in
int3
mov
call
aam
xlat
mov
sbb
jae
mov
movs
pusha
mov
add
cmp
and
add
mov
sub
(bad)
loopne
test
call
loop
xchg
fsub
jl
sub
inc
cmp
in
out
sahf
ror
cwde
cmp
test
adc
sti
xchg
test
mov
loope
xor
fwait
pop
test
test
lea
adc
or
sub
stc
test
push
xchg
fwait
loopne
inc
aad
call
nop
mov
xchg
test
xchg
lock
cmp
je
les
mov
dec
adc
and
add
inc
rol
aam
rol
stos
mov
(bad)
pop
mov
mov
cld
add
dec
jo
add
push
shl
mov
out
rcl
enter
adc
lahf
mov
xor
mov
mov
aaa
bound
xchg
enter
mov
mov
dec
pushf
mov
xor
sub
mov
cmp
or
push
add
sub
sbb
inc
or
mov
and
xor
(bad)
mov
xchg
dec
in
cwde
cwde
add
inc
gs
jae
jb
gs
jne
je
inc
dec
inc
add
addr16
dec
xor
sub
fs
scas
nop
lds
cmc
fsubr
push
dec
cmp
movs
xchg
mul
add
and
pop
pop
inc
outs
(bad)
fs
leave
push
outs
dec
cmps
call
mov
xchg
sub
add
jnp
mov
cmp
mov
(bad)
enter
mov
stc
xlat
enter
or
fcmovne
nop
xchg
rcl
mov
push
mov
stos
hlt
lahf
and
add
(bad)
pop
and
daa
adc
push
sbb
or
and
jb
mov
mov
dec
je
mov
iret
scas
and
sbb
pop
ins
pop
inc
retf
not
xor
xor
mov
inc
xor
add
popa
ins
push
gs
ins
ins
outs
arpl
pushf
jmp
jmp
bswap
mov
pusha
push
push
ret
add
push
popa
jae
gs
outs
outs
outs
arpl
popa
je
jae
add
add
push
imul
jae
bound
mov
add
clc
push
bt
bt
cmp
mov
jmp
add
inc
gs
imul
imul
jns
add
sbb
add
add
imul
jmp
cmp
je
jp
cdq
stos
(bad)
loop
es
inc
push
ds
mov
add
or
or
or
push
jp
lahf
xchg
mov
(bad)
mov
push
stos
push
daa
or
push
movs
out
sub
lahf
jp
popf
loop
iret
scas
xor
push
jmp
add
sbb
je
lods
call
lods
add
and
popf
dec
push
test
mov
int
(bad)
fsubrp
fcom
add
add
dec
sub
adc
sbb
jmp
jno
or
outs
push
mov
loopne
pop
cmc
xor
push
inc
inc
cmp
inc
xor
add
ss
mov
retf
dec
xor
push
sub
scas
pushf
loop
daa
push
adc
sbb
mov
iret
xchg
adc
es
jb
pop
pushf
mov
scas
and
aad
ret
scas
in
int3
loopne
sti
in
sbb
mov
push
inc
mov
xor
and
dec
push
sub
outs
outs
pop
mov
dec
pusha
push
inc
xor
dec
inc
cmp
dec
cmp
xchg
mov
fmul
test
pop
or
push
pop
cmp
pop
outs
adc
lods
(bad)
stos
push
aam
xchg
inc
sbb
(bad)
mov
rol
(bad)
enter
dec
cmp
lods
mov
xor
push
rcl
aaa
pop
cmc
cmc
loop
je
cmps
xchg
sbb
inc
xor
push
push
(bad)
mov
sbb
out
jmp
in
pushw
in
neg
or
xor
jl
xchg
jne
and
push
cmp
mov
mov
push
cmp
lods
xchg
faddp
and
inc
xor
inc
push
dec
ja
mov
inc
ss
inc
je
js
inc
call
imul
dec
and
sub
jmp
push
jns
xchg
mov
hlt
sbb
sti
loope
or
fsubr
call
push
outs
scas
nop
cmp
scas
fwait
in
fcmovnb
clc
jmp
jno
loop
jmp
jae
outs
outs
ins
gs
add
push
dec
inc
inc
jb
ins
push
jb
addr16
inc
add
add
je
jne
jb
outs
je
imul
jns
add
add
imul
push
arpl
imul
imul
ins
and
lea
jae
cmc
test
pushf
jmp
or
or
sub
fs
adc
in
push
add
adc
pop
ds
pop
mov
xor
xor
push
je
mov
mov
mov
mov
mov
and
and
adc
sbb
imul
(bad)
inc
jmp
jno
dec
popa
gs
mov
mov
sbb
jb
fwait
out
aam
int
mov
nop
jbe
je
mov
imul
std
in
data16
loope
shl
es
cmp
push
call
(bad)
int3
mov
ds
ja
sbb
loope
cdq
hlt
mov
dec
mov
cmp
or
adc
sub
push
je
pop
mov
pusha
mov
dec
js
out
jecxz
faddp
out
ffree
retf
cld
loop
fnstcw
fcomi
jmp
jno
dec
popa
gs
xor
repz
mov
shl
add
maskmovq
test
and
mov
mov
xchg
jp
jmp
(bad)
xchg
int3
pushf
call
add
inc
outs
jo
push
arpl
popf
sub
dec
test
or
ror
or
push
lea
jmp
daa
adc
add
cmp
mov
out
shl
inc
cmp
dec
xor
dec
dec
xor
imul
sar
sbb
xor
sub
xchg
inc
out
(bad)
jg
aas
sub
push
repnz
loope
and
cmp
push
dec
dec
xor
sbb
into
mov
jle
xor
mov
xchg
enter
clc
sbb
cmps
xchg
mov
xchg
or
xchg
neg
jle
inc
pop
xchg
retf
scas
sub
int3
or
adc
cmp
cmp
and
aad
imul
and
push
aas
jns
mov
sti
in
add
xor
inc
jb
mov
ins
pop
faddp
retf
je
xor
ins
xor
dec
int
out
pop
jmp
xor
pop
aas
bound
pop
jne
loop
out
les
je
arpl
gs
imul
mov
push
lea
jne
sub
mov
xor
rcl
mov
bswap
shld
shl
sub
bsf
mov
push
call
call
sub
aad
repz
sbb
lods
xchg
sti
loopne
adc
nop
jp
movs
hlt
out
add
cli
xor
arpl
ins
mov
xchg
sub
fidivr
xor
inc
or
in
cmp
rcr
xchg
loopne
adc
pop
or
sub
fiadd
mov
sbb
scas
xchg
std
dec
xor
mov
cld
push
aas
mov
lahf
lods
mov
sbb
sar
fbstp
and
sbb
cmc
xor
call
cld
adc
jecxz
ja
inc
cmp
cmps
pushf
pop
mov
xchg
and
xor
ret
add
jno
jo
jge
jb
rcr
fdiv
mov
punpckldq
js
cs
cmps
xchg
dec
imul
mov
inc
stos
(bad)
push
inc
sahf
dec
mov
ins
(bad)
cmp
pop
pop
xchg
sbb
sub
sub
jmp
es
push
outs
in
xlat
xchg
mov
mul
adc
sbb
cmc
adc
clc
loopne
or
xor
js
lods
xchg
mov
scas
xchg
jg
fild
and
call
sub
call
fisttp
dec
arpl
mov
xchg
out
xchg
sub
add
and
push
push
ins
or
popa
push
pushf
add
int
retf
mov
fnstsw
add
inc
mov
(bad)
sub
cmp
push
ja
jmp
pop
retf
xchg
adc
sbb
jmp
(bad)
out
or
je
mov
xchg
test
mov
ins
pop
test
dec
and
push
mov
mov
lahf
sub
pop
xchg
jle
mov
cmps
loope
jnp
fwait
mov
faddp
repnz
pushf
xor
xor
add
mov
aam
shr
fimul
sti
sbb
add
ins
push
push
xchg
jmp
sbb
push
push
call
add
fs
jae
push
jmp
pop
dec
das
fs
dec
das
jae
mov
repz
push
pop
ss
mov
rol
dec
cmp
jnp
push
mul
mov
or
retf
mov
xchg
push
inc
sub
lods
in
cmps
inc
mov
test
inc
cmp
rol
xor
jp
jb
pop
xchg
mov
ror
cli
out
sub
inc
xor
jecxz
fiadd
pop
aas
arpl
test
fmul
mov
ds
stc
in
xor
push
test
fld
add
in
test
mov
scas
mov
xchg
xchg
repz
pushf
lea
jmp
add
ins
imul
ins
dec
jne
add
aaa
sub
popf
jmp
add
lock
arpl
sub
jmp
adc
sbb
add
lock
and
rcl
bnd
int3
loope
ds
mov
jb
mov
jbe
stos
xor
mov
jmp
ffree
enter
jae
and
cmps
nop
enter
or
adc
adc
push
jno
jmp
push
mov
lods
in
sbb
lds
daa
jnp
push
ret
lods
cmp
leave
and
xor
loop
and
mov
loop
push
push
cmps
shr
or
xor
popa
pop
xchg
jle
pop
inc
sub
leave
call
mov
cmc
cld
and
mul
sub
inc
inc
ss
nop
test
shl
in
mov
xchg
xor
sbb
mov
pop
dec
mov
int3
mov
mov
stos
retf
mov
leave
scas
sar
sbb
jo
jmp
xor
mov
call
pop
sti
sbb
daa
push
add
adc
aas
sub
push
test
lods
lea
adc
xchg
sub
popa
mov
int3
repnz
std
jnp
loope
sub
movs
in
sbb
out
fld
push
xlat
fxch
jmp
dec
cmp
dec
rcl
cs
idiv
out
mov
popa
push
inc
cmp
imul
mov
or
loop
repnz
(bad)
icebp
add
fsubrp
es
not
add
pcmpgtd
outs
mov
jmp
call
imul
push
inc
cmp
pop
sub
or
cld
jmp
cmp
add
and
dec
xor
mov
lds
lea
sub
push
ret
ins
mov
mov
fsubr
fldenv
push
adc
hlt
xchg
pop
inc
aam
lahf
out
xor
cmps
inc
xor
add
dec
test
xchg
sub
cmps
rol
int3
mov
mov
push
gs
gs
jae
dec
jne
gs
and
jmp
in
sbb
jg
movs
or
mov
int3
mov
leave
shl
adc
aas
inc
xor
mov
xchg
sbb
push
loopne
xor
pop
lea
aas
rcl
ffree
pop
and
sub
xor
dec
xor
inc
aaa
pop
nop
mov
retf
scas
xchg
sti
or
imul
lea
jge
clc
sahf
dec
sbb
bound
sbb
push
xchg
sahf
(bad)
enter
mov
loopne
and
sub
aam
cmp
dec
movs
mov
inc
stos
fdiv
jne
mov
into
out
(bad)
in
sub
cmp
je
out
sbb
je
sbb
xor
push
inc
xchg
ins
xor
mov
sbb
sbb
rcr
dec
aaa
jns
stos
xchg
jnp
loop
jl
push
inc
pushf
mov
pusha
push
pop
push
push
ret
lea
jne
btr
shl
sub
sar
das
shr
mov
neg
dec
and
add
add
sar
mov
stc
pushf
mov
push
test
pushf
pushf
pushf
mov
lea
jmp
add
inc
jb
popa
je
inc
inc
inc
add
add
je
dec
push
xor
add
dec
gs
jo
jb
popa
je
add
sub
push
shl
fisttp
and
mov
stc
stc
sub
call
push
not
stos
pushf
pushf
not
mov
push
pushf
call
mov
not
not
push
mov
pusha
cmp
pushf
push
lea
jb
pusha
cmp
push
lea
ja
sub
adc
rcl
add
shr
clc
add
mov
clc
pushf
jmp
mov
test
stc
cmp
pusha
pusha
pushf
lea
jne
bsr
lahf
and
sbb
xor
shr
rol
aad
mov
jmp
mov
lea
call
fstp
ss
cmp
mov
ins
mov
retf
rol
mul
or
sbb
xor
bsr
mov
jne
cwde
test
leave
mov
or
jne
test
shl
add
shr
sub
ror
push
aad
(bad)
enter
mov
out
clc
cmp
push
ds
inc
pop
inc
je
jae
xchg
mov
loop
mov
lea
jae
test
test
cmc
cmp
call
add
dec
outs
popa
fs
gs
jne
arpl
push
push
lea
jne
jmp
ins
les
in
inc
sub
data16
enter
xor
xchg
jle
jl
jle
mov
jle
xchg
jmp
and
(bad)
(bad)
ror
(bad)
mov
mov
mov
mul
das
hlt
aad
inc
pop
inc
push
dec
aaa
mov
cwde
retf
sbb
mov
dec
xor
dec
aaa
gs
je
loop
out
cli
in
mov
mov
push
push
call
add
inc
gs
arpl
ins
ins
push
outs
jae
add
inc
imul
inc
imul
outs
fs
popa
add
setb
adc
xor
shl
mov
push
test
call
call
add
push
push
outs
outs
ja
lea
jne
pusha
jmp
les
sub
sbb
sub
jle
xchg
jp
jo
sahf
shr
aad
cld
out
or
je
mov
dec
test
enter
and
and
dec
pop
inc
pop
inc
xor
inc
scas
popf
mov
rcl
repnz
mov
jnp
fwait
mov
ret
stc
call
das
movhps
stos
mov
cmp
cli
add
dec
outs
popa
fs
je
imul
inc
gs
outs
jne
je
ins
dec
inc
add
mov
les
pushf
push
ret
mov
mov
mov
lea
call
jmp
pushf
push
mov
push
push
call
ror
cmp
stc
cmp
not
stc
mov
add
cmc
cmc
clc
rol
jmp
push
mov
call
jmp
add
inc
gs
jns
je
ins
dec
gs
imul
gs
outs
jbe
jb
outs
ins
outs
je
popa
jb
popa
bound
add
add
je
outs
ins
jne
gs
outs
outs
jb
popa
je
outs
outs
inc
add
(bad)
call
jmp
bswap
push
call
pusha
mov
inc
mov
lea
jmp
add
inc
gs
bound
arpl
push
push
xor
xor
fs
ins
add
add
je
jb
jo
add
int3
push
sti
(bad)
jmp
retf
inc
daa
or
mov
hlt
loopne
imul
adc
pop
sub
sbb
das
adc
and
pop
dec
inc
cmp
pop
ss
scas
xchg
xchg
or
aaa
and
push
imul
mov
xor
xchg
pop
lods
imul
jp
dec
sahf
outs
dec
mov
xor
lods
xchg
movs
sub
scas
adc
int3
mov
(bad)
inc
jo
dec
push
outs
push
movs
out
dec
sub
jb
xchg
mov
sub
repnz
mov
mov
lds
imul
dec
(bad)
jmp
push
popa
xchg
outs
cld
mov
jecxz
add
inc
aas
sub
xor
ret
repz
sub
xchg
and
mov
pushf
retf
rcr
add
cdq
out
call
jo
jne
xchg
je
jp
ss
loop
pushf
ins
jg
test
test
pusha
add
sbb
push
push
inc
pop
ds
xchg
sub
and
(bad)
mov
bound
aaa
pop
mov
stos
fstp
int3
scas
xor
adc
or
mov
sahf
cmp
cmp
cmps
in
cs
mov
aas
sub
mov
adc
and
add
fild
pop
sub
cmp
push
inc
ja
stos
xchg
out
adc
sbb
and
push
dec
xor
loop
test
push
movs
test
test
shr
test
xchg
adc
mov
push
inc
xchg
movs
cs
enter
mov
adc
inc
cmp
mov
xor
sub
xchg
sub
add
dec
xor
gs
mov
sub
movs
dec
je
jbe
(bad)
mov
popf
int3
push
(bad)
test
add
push
mov
call
pushf
mov
push
pushf
pusha
lea
jmp
add
inc
outs
fs
imul
or
jmp
add
push
gs
gs
jae
inc
inc
add
scas
mov
lea
ficomp
add
or
sbb
pop
xchg
sbb
aad
into
mov
(bad)
push
clc
cmp
bound
sub
cmp
ror
xchg
daa
out
ret
mov
mov
adc
test
or
sti
out
and
pop
xchg
jle
xchg
mov
fistp
cmps
mov
icebp
call
(bad)
fsubr
aad
jmp
dec
pop
aas
jbe
js
xchg
sub
iret
mov
mov
lahf
xchg
cmp
push
cmc
call
pusha
not
push
jmp
xor
rol
call
add
inc
ins
jo
jns
ins
imul
add
add
outs
fs
gs
jne
arpl
add
push
std
sub
pop
inc
pop
cmp
xchg
jg
jne
jnp
fs
push
pop
movs
xchg
(bad)
outs
mov
mov
loop
jl
arpl
ins
cmps
cwde
fcomp
jmp
xchg
repnz
pop
cld
add
push
add
xor
pop
test
fisttp
mov
push
jmp
lods
mov
jae
jle
clc
push
jle
push
push
inc
dec
cs
mov
mov
imul
or
cmp
bound
test
push
add
fs
and
or
and
bound
mov
iret
mov
in
movs
leave
push
cmp
stos
call
int3
mov
aaa
and
aaa
and
xor
lahf
push
bound
ret
retf
lahf
xor
out
(bad)
fsubr
test
test
in
leave
ret
scas
fwait
pop
clc
(bad)
in
xlat
les
cld
fisubr
jb
xor
imul
imul
pop
stos
sub
adc
loop
and
sub
sbb
cs
popa
ja
xchg
sbb
sti
dec
loope
sahf
rep
cmp
(bad)
test
cmc
fcom
dec
lock
sub
ret
mov
mov
pusha
mov
push
push
mov
jmp
add
push
ins
gs
add
inc
gs
jb
jns
arpl
add
jecxz
std
daa
adc
mov
add
mov
ffree
in
psadbw
je
cmps
(bad)
lods
icebp
loop
cld
or
sbb
dec
xchg
cmps
xlat
fmul
mov
jns
mov
push
or
cmp
jne
mov
mov
imul
lds
xchg
xor
movs
fs
adc
and
rep
dec
data16
and
shl
adc
adc
and
and
mov
sti
jp
cs
dec
std
sub
daa
(bad)
sub
ins
mov
(bad)
ror
mov
sti
call
shl
jecxz
push
push
ins
xor
pop
jmp
cmp
addr16
loop
jmp
adc
add
push
push
mov
mov
outs
inc
sub
ds
pop
shr
mov
imul
add
adc
pop
cli
adc
xor
lds
stos
aam
jno
(bad)
sti
fldenv
pop
fs
fwait
mov
mov
adc
in
jl
mov
adc
stos
aas
jmp
jp
pushf
mov
lahf
cmp
jg
test
xchg
mov
xchg
mov
add
push
arpl
gs
imul
je
js
add
push
arpl
gs
imul
inc
js
inc
js
movs
iret
mov
loopne
sbb
inc
ss
pushf
xchg
sub
sub
xchg
out
adc
cli
ins
popf
cmps
lock
fmul
mov
and
mov
fs
out
popf
xchg
adc
aaa
mov
pop
add
and
rcr
into
add
mov
xchg
jp
in
ror
cmp
adc
xchg
sub
pusha
das
mov
inc
xor
inc
push
dec
pop
ds
jns
xor
je
cdq
fcmove
mov
js
inc
pusha
lea
jge
mov
pusha
call
jbe
scas
repz
(bad)
in
clc
es
iret
jns
mov
cmc
adc
adc
or
adc
popf
imul
aaa
sub
mov
xchg
sub
inc
cmp
jbe
push
into
xor
cli
sub
sbb
call
ins
dec
pop
into
mov
int
inc
push
dec
ja
push
imul
mov
sbb
pop
adc
push
or
cmp
and
inc
das
dec
arpl
fs
xchg
pop
fwait
cmp
sub
call
jmp
or
sbb
das
or
je
lock
mov
mov
mov
ins
scas
(bad)
adc
add
and
popa
scas
xchg
xchg
mov
movs
rol
arpl
stos
cwde
cld
fiadd
icebp
xlat
fcom
and
pop
stos
mov
repnz
imul
adc
xor
nop
jp
lods
out
add
fisubr
pop
int
pop
(bad)
mov
xor
out
rcl
mov
jmp
inc
aaa
xchg
cmp
jl
repz
enter
fcom
rcr
ror
cmp
out
dec
jne
call
pusha
pop
mov
jecxz
repnz
pusha
push
or
mov
mov
int3
mov
leave
loope
clc
adc
retf
or
mov
inc
cmp
dec
xor
push
inc
cmp
lods
xchg
loope
jb
xchg
fdivr
ror
xchg
cwde
xchg
mov
mov
call
jmp
movs
imul
dec
gs
jo
jb
add
inc
and
cmp
and
call
lea
call
push
push
adc
push
pusha
call
add
push
arpl
ins
ins
push
imul
add
add
je
gs
popa
addr16
outs
jae
add
dec
outs
jbe
push
imul
add
popa
ins
inc
ins
ins
outs
arpl
cmp
pushf
jmp
add
inc
jb
popa
je
dec
arpl
inc
jb
ins
push
gs
jne
arpl
js
push
dec
dec
push
push
dec
dec
dec
cs
push
push
add
add
je
jne
jb
outs
je
push
add
sbb
sti
call
push
dec
pop
lods
(bad)
mov
popa
mov
ret
mov
loope
adc
bound
cdq
into
mov
mov
and
int3
xor
xchg
adc
sub
ja
sub
mov
(bad)
clc
jmp
mov
mov
cmps
jmp
mov
xchg
dec
mov
mov
scas
sub
add
sbb
(bad)
daa
aas
jo
mov
sub
shl
or
repnz
mov
sti
repnz
xor
xor
cmp
sub
pop
jge
mov
lds
in
rol
adc
enter
xchg
aaa
or
xchg
sub
movhps
push
xchg
(bad)
inc
cmp
inc
cmp
jnp
loop
loopne
in
(bad)
cmp
cmps
daa
pxor
sub
mov
add
lds
push
movs
nop
cmps
xchg
mov
div
stos
and
and
nop
adc
xor
jp
cdq
shr
pop
lahf
mov
xchg
jg
cdq
jl
stos
hlt
in
xor
fiadd
scas
xchg
aad
add
and
and
push
inc
jno
fdivr
(bad)
xchg
jmp
test
xchg
cmp
out
inc
xor
aaa
or
arpl
adc
in
ret
in
inc
fs
dec
jno
fwait
mov
mov
cmps
call
dec
fs
data16
xchg
cmp
cmp
imul
aaa
or
xor
or
mov
js
jbe
mov
std
sub
jne
xor
xor
push
sub
es
jge
xor
mov
(bad)
shl
loope
push
sub
pop
jmp
data16
or
adc
and
cld
mov
dec
loop
dec
pop
inc
inc
cmp
mov
jb
add
ds
in
fdiv
sub
pushf
push
jl
movs
xchg
test
fld
xlat
mov
test
or
inc
jmp
push
dec
das
push
inc
lea
popf
sar
loope
fdivr
fdivr
mov
jne
adc
xchg
fmul
stc
inc
xchg
jp
shl
jns
adc
sbb
mov
adc
mov
scas
out
shl
sar
in
push
neg
pop
sbb
sbb
retf
je
push
and
add
dec
ins
xor
(bad)
retf
loope
sbb
lea
mov
mov
test
aam
in
call
call
call
mov
push
dec
fs
dec
sbb
cmps
mov
and
push
cmp
inc
ins
push
mov
mov
stos
mov
popa
dec
pop
inc
xchg
sbb
sti
mov
and
jno
xchg
pushf
test
mov
les
sub
movs
xchg
lea
shl
fwait
inc
aas
xchg
xor
out
push
push
sbb
xor
cmps
and
mov
inc
test
xchg
sahf
hlt
sub
push
outs
pushf
sbb
jl
call
sub
addr16
push
dec
push
dec
arpl
ss
aaa
gs
aaa
imul
hlt
lods
in
aam
scas
ins
xor
push
xchg
lds
cli
sbb
adc
adc
cmp
test
add
ja
jbe
dec
jne
push
jb
jo
jb
dec
gs
fs
cwde
push
xchg
mov
mov
pop
(bad)
and
dec
fdiv
fdiv
fdivr
fsub
popa
in
fdiv
stos
mov
mov
movsx
mov
xchg
mov
stos
mov
jo
or
xchg
adc
and
call
xchg
push
mov
xchg
push
dec
out
xchg
xchg
in
mov
aas
xchg
mov
mov
sub
fsub
adc
clc
xchg
mov
ss
mov
mov
add
inc
and
mov
or
jbe
push
mov
ret
shl
mov
xchg
nop
(bad)
das
mov
pop
mov
call
fwait
call
xchg
call
xchg
mov
mov
test
shr
daa
lahf
cmps
mov
in
mov
loopne
pop
shl
iret
sbb
enter
pop
cmp
pop
data16
sbb
push
jne
inc
sub
pop
push
stos
pop
jae
outs
push
dec
sub
sub
nop
pop
or
dec
push
ds
add
movs
clc
sub
aaa
pusha
lods
push
sbb
push
sub
sub
arpl
dec
inc
ins
and
aam
push
push
gs
fadd
sub
pusha
aas
and
and
pop
inc
daa
es
or
xor
mov
adc
hlt
push
jle
inc
push
xchg
pusha
inc
nop
loopne
pop
daa
push
mov
jge
mov
mov
pushf
xchg
aad
cwde
mov
shl
cwde
cmc
repz
fdiv
add
(bad)
jne
out
repz
cmp
cld
repz
ss
sbb
test
inc
test
inc
aaa
pop
je
cwde
pop
push
sub
mov
mov
clc
pop
outs
inc
dec
cmp
jae
sub
lock
lods
pop
fwait
sahf
pop
mov
inc
inc
ss
fdiv
sub
aaa
sbb
and
mov
aam
hlt
pop
lods
and
sahf
add
mov
jnp
jge
outs
gs
and
les
jp
mov
sar
xchg
xchg
jge
test
shr
or
xor
and
xchg
xor
add
lds
movs
sub
std
loopne
scas
add
jge
push
xor
mov
add
or
(bad)
xchg
and
fsub
sub
test
xor
adc
ret
(bad)
push
cwde
(bad)
xchg
xchg
sbb
xchg
and
repz
and
(bad)
mov
ror
(bad)
jge
cli
inc
add
sub
fcmovnu
jge
ins
add
test
pop
test
jge
inc
fist
outs
or
sub
and
enter
cwde
sbb
ror
nop
imul
imul
loopne
jo
cmp
dec
inc
xchg
xchg
jo
js
jge
mov
inc
(bad)
les
test
stos
inc
hlt
jnp
and
fs
fmul
cld
xor
in
jg
ret
jnp
fdivr
lahf
lods
sahf
test
hlt
imul
pop
repz
mov
and
fs
xchg
clc
ins
arpl
and
mov
jmp
fchs
inc
add
pusha
sub
sbb
sub
mov
test
inc
dec
imul
test
int
cwde
sub
sbb
test
mov
jmp
test
jge
test
and
dec
adc
(bad)
fstp
enter
jg
lods
jns
pop
jl
mov
add
sub
inc
jp
dec
cwde
cmp
ficom
or
in
cmp
add
fdiv
cs
je
das
retf
inc
and
jge
sub
shl
add
jl
mov
xchg
dec
movs
mov
push
dec
es
mov
loope
dec
mov
out
and
xchg
mov
and
mov
mov
lahf
xchg
mov
jae
into
adc
xchg
adc
loope
jnp
outs
shl
movs
xchg
repnz
mov
in
adc
jne
push
adc
stos
out
fwait
pop
mov
in
dec
mov
pop
mov
aad
xchg
pop
setbe
in
mov
arpl
xchg
pushf
push
lahf
jmp
sub
sub
mov
mov
mov
mov
ins
mov
fwait
mov
imul
stos
and
xchg
pop
xchg
push
cmp
aam
jecxz
xchg
or
test
inc
inc
xor
sub
lods
(bad)
fcomp
mov
mov
jnp
dec
xor
dec
popa
out
call
repnz
mov
dec
hlt
push
xchg
sub
mov
movs
mov
xchg
cmp
lock
jbe
mov
xor
imul
sub
lods
mov
push
cs
mov
imul
dec
loopne
retf
dec
or
cwde
sar
dec
inc
shr
jge
fsub
add
and
or
sbb
and
lahf
in
in
pop
loope
jle
xor
dec
cs
jae
bound
add
imul
jae
outs
jnp
std
sbb
jge
call
fldcw
test
mov
cld
retf
cdq
call
push
mov
test
cmps
mov
lahf
enter
mov
adc
mov
adc
sbb
lahf
mov
lahf
in
hlt
mov
aam
lds
cmps
mov
fucomi
out
stos
xlat
or
test
mov
sar
(bad)
rcr
mov
enter
pop
ja
aas
fs
cmp
es
sub
pop
inc
ds
gs
fdiv
sub
and
inc
fdiv
in
jg
daa
push
ins
push
jp
rcl
adc
push
popf
dec
jge
bound
movs
pop
(bad)
daa
call
and
js
jp
dec
inc
addr16
mov
inc
out
stos
dec
aaa
or
push
daa
jnp
and
sub
push
sbb
sahf
das
inc
push
shl
ficom
ins
jns
sub
and
and
sub
inc
dec
rcr
stos
pop
and
js
test
push
cmp
and
aam
push
sbb
cs
cwde
pop
inc
and
sub
imul
pop
push
xor
ja
nop
mov
and
cmps
lock
push
dec
jle
xchg
or
sbb
mov
(bad)
leave
test
push
inc
cmp
les
mov
push
sub
sub
dec
adc
mov
jbe
sub
(bad)
aam
scas
inc
mov
(bad)
movs
(bad)
adc
mov
cmc
in
cld
xchg
leave
jecxz
hlt
stc
loope
mov
pop
rcl
mov
les
mov
push
(bad)
cld
push
aas
cmp
(bad)
sahf
sub
xor
xchg
aad
push
pop
adc
popa
pushf
test
mov
sahf
dec
mov
fsub
out
or
stc
call
pop
sti
mov
add
in
mov
(bad)
cld
in
scas
js
jl
ja
push
enter
enter
sub
inc
push
stos
inc
enter
iret
aam
in
div
xor
(bad)
xchg
aad
cli
mov
pop
lods
lds
out
int3
icebp
mov
fsubr
dec
xchg
inc
data16
xor
push
pusha
jge
xchg
sbb
and
dec
lods
and
in
pop
fcomp
jbe
sub
mov
sub
ins
push
cld
mov
xchg
mov
shl
mov
pop
xor
mov
inc
push
xlat
fdiv
jbe
push
mov
in
xchg
xor
loopne
or
mov
mov
aad
or
push
jae
push
mov
(bad)
fwait
sahf
add
outs
push
jge
inc
pop
dec
jne
fsub
aam
pop
ret
lahf
cli
out
icebp
mov
xchg
loop
sahf
test
xchg
xchg
aam
rcl
ret
fadd
xchg
(bad)
les
fs
push
xchg
sahf
xchg
inc
ins
and
mov
push
sub
pop
jae
repnz
adc
test
mov
jb
dec
sbb
mov
aaa
xor
mov
sub
push
pop
je
test
sar
cs
enter
sub
jnp
jl
jno
sub
sub
out
mov
adc
push
jo
sub
inc
jge
in
add
jge
js
cs
movs
imul
mov
mov
mov
aad
stc
xchg
les
mov
mov
(bad)
mov
test
sub
fwait
mov
not
dec
mov
mov
xchg
cmp
(bad)
mov
repnz
ror
pushf
mov
mov
mov
pushf
pop
fcomp
aam
cmp
(bad)
mov
je
sub
adc
leave
out
aas
into
fistp
sub
fisubr
mov
shl
int3
pushf
sbb
(bad)
mov
clc
ror
jo
xchg
ror
sahf
xor
and
in
mov
push
adc
call
test
mov
ja
sti
fdivr
lahf
push
cmp
xchg
test
push
lock
(bad)
dec
pusha
adc
adc
mov
fs
push
in
mov
dec
lods
or
fs
cmp
or
mov
in
scas
xchg
xchg
cmp
mov
adc
sbb
adc
ret
int
push
aam
cmp
repz
mov
mov
ins
sbb
mov
fistp
adc
mov
mov
pushf
cmp
cmp
popa
mov
test
shl
sub
fwait
push
xchg
fimul
mov
mov
rcr
mov
mov
ins
(bad)
mov
push
mov
mov
mov
out
call
xchg
or
lds
mov
pop
mov
xchg
repnz
mov
adc
mov
xchg
mov
mov
mov
mov
test
push
mov
sahf
xchg
shl
mov
or
and
jl
ror
jb
xchg
add
pusha
mov
inc
adc
das
into
push
lds
aad
(bad)
cli
rcr
dec
test
nop
jmp
mov
push
adc
push
mov
push
fimul
mov
aas
cld
xchg
pop
lahf
xchg
mov
aam
push
pop
and
adc
push
mov
aam
pop
pop
cdq
adc
icebp
adc
mov
leave
sbb
and
pushf
inc
jb
mov
xor
int3
scas
pop
cmps
xchg
xchg
mov
loopne
pop
xchg
mov
aam
cmp
xchg
xchg
xchg
loopne
pop
mov
or
inc
loopne
pop
popf
mov
aam
or
fwait
xchg
call
xchg
mov
loopne
pop
xchg
pop
test
cld
pop
xor
nop
xchg
mov
loopne
pop
mov
pop
mov
fadd
mov
pop
mov
loopne
pop
mov
mov
mov
pop
mov
mov
aam
mov
mov
nop
mov
loopne
pop
mov
pushf
mov
loopne
pop
mov
push
mov
aam
scas
mov
test
cmps
pop
push
loopne
pop
xor
js
mov
pop
push
pusha
inc
sbb
cmc
hlt
repnz
add
sti
cli
call
in
loop
lock
clc
out
jo
mov
xchg
cdq
fwait
popf
xchg
sahf
xchg
or
xchg
sbb
xchg
mul
cmc
shl
mov
jnp
cld
xchg
mov
lods
sbb
mov
mov
mov
lea
mov
mov
mov
mov
xchg
add
mul
repnz
cwde
idiv
pause
(bad)
mov
mov
call
pusha
mov
aad
loopne
mov
ret
xchg
mov
xchg
sbb
dec
xor
xchg
nop
inc
add
scas
sbb
xchg
xchg
and
mov
xchg
xchg
sbb
mov
daa
xchg
xchg
je
out
mov
mov
or
test
pop
xchg
iret
mov
cmps
pusha
mov
aad
aaa
cdq
sbb
pushf
mov
fwait
mov
xchg
scas
test
xchg
sbb
test
nop
mov
es
xchg
(bad)
xchg
xchg
mov
sbb
sahf
aam
nop
pop
mov
ror
jmp
xchg
mov
mov
xchg
sbb
test
gs
loopne
mov
mov
xchg
mov
or
(bad)
mov
push
rcl
sbb
xchg
and
mov
xor
ins
mov
xchg
mov
dec
xor
mov
mov
lods
xchg
mov
jno
je
out
(bad)
mov
mov
cmp
xchg
mov
sbb
mov
lahf
adc
nop
xchg
or
les
shl
movs
xor
movs
sbb
mov
lods
lds
mov
xchg
or
sbb
or
repz
shl
xchg
push
lods
call
mov
xchg
or
scas
test
xchg
pop
mov
xchg
(bad)
and
aad
mov
or
mov
loop
add
adc
jmp
rcr
pushf
jbe
rcr
(bad)
sahf
xchg
xor
sbb
sbb
nop
cmp
sbb
mov
adc
sbb
movs
mov
fldenv
mov
or
jo
(bad)
sbb
mov
mov
in
ins
mov
mov
jbe
test
cmps
xchg
mov
loopne
dec
mov
nop
xchg
aad
ret
rcr
jne
test
xchg
or
int
mov
sbb
pushf
movs
retf
adc
or
movs
xchg
clc
rcr
ret
mov
neg
pushf
(bad)
cmc
xchg
cmps
daa
xchg
hlt
add
mov
stos
(bad)
jne
aad
xchg
inc
icebp
cmp
add
pop
inc
repz
(bad)
mov
sahf
mov
cld
sbb
data16
cli
mov
retf
stc
sbb
call
(bad)
out
in
lahf
in
jecxz
mov
mov
xor
pop
out
sub
cmps
add
mov
xor
pusha
mov
mov
in
dec
inc
aas
xchg
inc
in
ror
test
jmp
loopne
jmp
(bad)
jle
movs
fwait
mov
pop
gs
jns
lea
mov
sbb
mov
mov
xchg
adc
adc
xchg
(bad)
repz
scas
mov
mov
in
mov
xchg
mov
mov
test
mov
(bad)
sahf
lea
xchg
sbb
nop
mov
cld
sbb
lahf
or
xchg
mov
pushf
(bad)
xchg
(bad)
mov
mov
mov
add
call
mov
pusha
mov
shr
mov
or
adc
mov
jnp
out
test
cmps
test
and
ror
xchg
mov
je
ror
lods
mov
or
xchg
outs
mov
xchg
test
sbb
xchg
xor
pusha
mov
(bad)
mov
lock
xchg
(bad)
mov
xor
sahf
xchg
mov
es
mov
mov
mov
mov
mov
sbb
adc
test
sahf
mov
cmp
cmp
mov
es
mov
and
mov
mov
lds
cmps
sbb
mov
cmps
aad
pusha
mov
(bad)
shl
mov
mov
mov
and
mov
sbb
mov
cmps
shld
xchg
(bad)
mov
stc
mov
push
lds
mov
hlt
mov
sub
dec
daa
xchg
sub
nop
mov
sbb
push
call
push
sbb
rcr
ins
mov
pusha
pop
mov
test
stos
sbb
lock
dec
mov
xchg
test
and
pushf
mov
xchg
pushf
inc
sbb
inc
sbb
inc
dec
mov
inc
test
xchg
mov
iret
mov
mov
adc
xchg
retf
aaa
inc
sbb
fwait
test
scas
ret
dec
nop
cmps
xchg
mov
(bad)
shr
(bad)
mov
cmps
cmps
xchg
dec
sbb
xor
add
mov
out
dec
cs
jmp
mov
dec
xor
mov
inc
xchg
ins
nop
sbb
(bad)
mov
xchg
mov
or
mov
xchg
enter
jae
pushf
shl
xchg
jno
and
push
jle
sar
mov
xchg
hlt
mov
mov
jnp
jp
xchg
mov
xchg
mov
xchg
mov
mov
mov
mov
popa
sbb
xor
ret
pusha
mov
and
mov
cmps
(bad)
mov
mov
push
popa
sbb
xchg
(bad)
mov
jo
sbb
mov
sbb
mov
xchg
mov
(bad)
xchg
es
mov
ror
mov
mov
fwait
cmps
imul
mov
xor
aam
add
pop
mov
pop
setnp
lds
xchg
pop
xchg
nop
mov
xchg
hlt
(bad)
mov
mov
mov
lahf
adc
outs
add
xlat
xchg
pop
mov
mov
xchg
fwait
mov
aaa
(bad)
xchg
loop
mov
cdq
pop
int3
pushf
mov
dec
fwait
lahf
mov
mov
mov
xchg
mov
out
mov
adc
xor
cli
or
xchg
xor
xchg
hlt
test
(bad)
pop
les
sbb
(bad)
mov
stc
xchg
pusha
nop
ret
pop
mov
push
mov
mov
pushf
mov
mov
add
xchg
iret
cmps
mov
xchg
dec
mov
gs
rol
mov
stc
mov
inc
xchg
cmp
lock
xor
and
mov
repnz
rcr
test
mov
mov
nop
pusha
mov
xchg
lea
jmp
dec
mov
mov
mov
(bad)
test
mov
mov
xchg
xchg
stos
or
movs
lahf
sbb
sbb
mov
xor
xchg
test
xchg
lea
ficomp
outs
int
mov
dec
lods
pop
xor
lods
xchg
mov
stos
sahf
sahf
mov
out
add
mov
mov
inc
mov
mov
ror
aam
aas
mov
pop
shr
mov
(bad)
mov
xchg
fiadd
cdq
mov
lea
inc
sbb
pop
mov
xchg
mov
mov
test
push
(bad)
fwait
mov
bnd
fcomip
lock
mov
mov
xor
xchg
repnz
mov
retf
loopne
mov
or
movs
shl
mov
mov
lock
jo
xchg
icebp
mov
in
mov
mov
popf
mov
sbb
pop
xchg
mov
xor
lods
add
outs
fwait
cmps
adc
sub
(bad)
xlat
cmp
lock
sub
ficom
mov
lods
test
mov
sbb
ss
call
(bad)
ins
mov
pushf
in
js
js
mov
xchg
or
xchg
inc
lahf
mov
test
xchg
cmps
sahf
mov
xchg
lahf
adc
cli
mov
sub
jae
jb
and
mov
movs
rcr
mov
mov
xchg
fcomp
cmp
mov
sub
test
xchg
fwait
cli
rol
cdq
jl
xchg
movs
mov
cli
adc
cmp
ror
inc
int3
mov
(bad)
pop
call
push
fmul
or
sbb
push
cmp
push
mov
jo
mov
xchg
mov
jg
not
add
nop
adc
xchg
add
push
add
sub
inc
or
jnp
mov
mov
mov
(bad)
nop
mov
lahf
push
sahf
xchg
sbb
in
xor
loop
mov
pop
rcl
jg
xor
lahf
idiv
sub
cmps
mov
cmp
jle
xchg
push
cmp
lahf
xchg
sbb
pusha
(bad)
xchg
pushf
dec
cmp
add
xchg
push
xchg
mov
(bad)
sbb
mov
cdq
inc
jp
inc
ror
inc
and
push
xchg
mov
push
adc
fwait
jmp
mov
pop
sub
mov
rcr
xchg
push
xchg
xchg
xchg
mov
mov
xor
pushf
pop
ins
xchg
add
xor
xor
inc
jmp
(bad)
lahf
or
clc
pop
loopne
xchg
les
cmp
(bad)
fbstp
ds
fmul
mov
pop
test
dec
or
mov
cld
cmp
cmp
addr16
xchg
mov
xchg
mov
jo
fisttp
fisttp
out
xchg
xor
stos
xchg
xor
xchg
lea
sahf
(bad)
mov
ja
dec
pop
leave
pop
clc
je
add
cmp
push
into
or
enter
movs
mov
mov
mov
out
hlt
inc
pusha
mov
daa
sbb
ss
dec
dec
je
cmp
xchg
mov
dec
or
nop
mov
xor
nop
es
pop
addr16
in
pop
test
ins
les
add
pop
push
add
xor
mov
repz
sub
or
or
enter
xchg
(bad)
mov
cmps
mov
cwde
mov
xchg
mov
pop
mov
jb
sbb
pop
xor
push
mov
xchg
outs
fwait
nop
push
enter
adc
fcom
rol
test
add
retf
fcomp
inc
xor
nop
in
(bad)
or
in
xchg
ja
push
or
xchg
cld
pop
xchg
mov
fstp
jo
es
lahf
xchg
mov
xchg
cli
pop
stc
mov
test
cmps
lahf
mov
sahf
jecxz
mov
idiv
adc
mov
repnz
sbb
mov
xchg
inc
out
push
pop
(bad)
dec
pop
dec
and
mov
push
xchg
in
movs
adc
add
push
jb
cli
test
in
xchg
jo
stc
cdq
dec
test
sub
mov
add
out
mov
test
pop
mov
in
and
and
test
pop
pushf
xchg
mov
sub
pushf
mov
sub
mov
mov
pop
pushf
mov
mov
push
hlt
enter
cwde
and
inc
mov
stos
mov
je
cmps
loop
mov
and
lock
shl
out
enter
loopne
cld
popf
xchg
mov
add
je
xchg
mov
movs
push
pusha
movs
lock
out
pop
out
not
cdq
cmps
push
rcr
mov
push
inc
(bad)
(bad)
sub
push
(bad)
or
mov
mov
jmp
push
movs
fimul
gs
cmp
xchg
cli
lahf
int3
test
xchg
mov
mov
(bad)
dec
sbb
push
mov
adc
xor
xchg
pop
mov
or
pusha
jo
inc
mov
mov
mov
xchg
daa
lahf
nop
adc
ficomp
or
mov
(bad)
mov
adc
or
jbe
test
call
mov
std
pushf
and
xchg
dec
xchg
(bad)
mov
test
std
adc
je
loop
mov
lea
test
xor
mov
repz
pusha
mov
jmp
fmul
mov
test
sub
sbb
mov
call
mov
inc
fdivr
adc
(bad)
or
xor
test
xchg
(bad)
mov
mov
xor
rol
jge
adc
or
sahf
adc
lahf
sahf
mov
and
dec
rcr
mov
cwde
call
hlt
int3
mov
mov
add
test
fild
in
retf
fwait
je
cmp
call
mov
lahf
mov
aad
imul
pop
add
jnp
call
mov
shl
push
mov
fdiv
ds
mov
les
mov
lahf
mov
test
mov
add
loop
dec
(bad)
es
nop
call
and
cmp
sar
hlt
sbb
lods
mov
xchg
popf
(bad)
xchg
push
test
sub
test
push
cmp
xor
fmul
lock
loopne
or
int3
fwait
out
dec
xlat
adc
outs
mov
fld
lods
push
cld
rcr
mov
or
fdiv
mov
lods
sbb
jmp
movs
fmul
fcom
fdiv
(bad)
cmp
fs
or
mov
adc
mov
cs
ss
push
loop
repz
add
push
mov
(bad)
sub
sbb
call
fwait
outs
test
test
inc
push
mov
test
push
test
mov
xchg
out
pop
inc
mov
xchg
push
add
mov
outs
arpl
fs
inc
cmp
js
mov
sahf
inc
or
int3
and
stos
xor
push
adc
push
mov
cmp
pop
mov
xor
sbb
push
mov
pop
xor
mov
cmp
add
sbb
mov
call
inc
cmp
ficomp
cmp
or
out
shr
mov
icebp
pop
mov
pop
and
inc
xchg
adc
pusha
and
inc
xor
adc
mov
ficomp
adc
inc
lods
test
outs
retf
cdq
push
mov
sbb
fistp
iret
sbb
je
sbb
or
test
inc
xchg
into
xchg
mov
add
add
mov
es
fcomp
mov
adc
lock
lahf
fcom
push
mov
jmp
mov
out
cmp
dec
clc
rcr
mov
bound
adc
sbb
fimul
and
ror
xchg
mov
test
test
movs
push
test
pop
je
sbb
dec
(bad)
inc
test
add
fdiv
or
push
inc
cmp
cmps
je
xchg
mov
mov
adc
pop
adc
aad
fadd
xchg
jmp
fmul
call
or
or
mov
sbb
test
sub
enter
or
enter
pop
lahf
sub
sbb
test
aaa
xchg
out
sub
mov
mov
mov
inc
add
cmps
xchg
mov
movs
xlat
push
pushf
outs
retf
mov
pop
int3
sub
or
push
fidivr
(bad)
stos
xchg
pop
xor
xchg
aas
cmp
pop
test
xchg
out
lods
or
or
mov
mov
push
popf
fnstenv
test
cmps
push
pushf
push
jne
pop
enter
pop
add
push
push
sub
mov
cmp
sub
mov
repnz
and
cmp
movs
test
in
cmps
repnz
mov
push
mov
mov
and
adc
iret
adc
(bad)
mov
push
fwait
inc
pop
hlt
mov
cmp
sbb
enter
mov
movs
cmp
int3
mov
shr
hlt
dec
jo
cmp
mov
cmp
imul
xchg
mov
add
add
cli
push
mov
pop
push
xchg
sub
bnd
mov
xchg
jo
mov
mov
call
sub
xor
push
xor
pop
jle
mov
xor
or
mov
adc
xor
xchg
xchg
push
xchg
rcr
ds
inc
or
sti
inc
test
mov
mov
pop
test
les
scas
xchg
xchg
mov
mov
mov
shl
jle
ds
pop
xor
xor
call
cmps
cmp
xchg
mov
loopne
push
lahf
dec
sahf
xor
xchg
push
push
loopne
cld
inc
loop
ss
ds
xchg
and
nop
nop
cmp
ss
fidivr
adc
lea
mul
and
rol
mov
and
xchg
cld
(bad)
jmp
mov
cmp
add
daa
fsub
cmp
mov
mov
or
mov
popf
jge
in
movs
mov
mov
xchg
(bad)
lock
mov
xchg
sub
xchg
test
mov
cmp
cmps
sahf
hlt
les
inc
and
jbe
xchg
xchg
mov
(bad)
test
cmp
sub
sub
cmp
stos
mov
pop
je
adc
mov
(bad)
aam
fcom
xchg
cwde
xchg
push
int3
mov
jmp
push
aad
lahf
inc
or
cld
fcmovu
rcr
push
fisttp
mov
call
aam
and
mov
mov
mov
xor
sbb
mov
data16
jb
je
inc
mov
mov
or
iret
xchg
stos
fild
mov
mov
pop
out
cmp
sar
adc
adc
das
outs
nop
fist
adc
or
cdq
(bad)
mov
cmp
cwde
movs
mov
mov
sub
mov
sub
test
cs
(bad)
mov
movs
adc
fsub
clc
push
mov
into
push
test
sbb
fcom
hlt
test
push
aad
xchg
nop
sub
sbb
adc
fisub
loopne
cmc
mov
jl
ins
push
lahf
aad
repnz
xchg
nop
lahf
or
jbe
lea
mov
xchg
ficom
fcom
add
pop
fistp
nop
ins
dec
lea
test
and
xchg
cmp
mov
(bad)
cmp
mov
mov
xlat
jl
or
hlt
push
adc
push
sahf
add
or
adc
add
call
nop
xor
nop
xchg
cmp
out
outs
cmp
jae
movs
in
fist
mov
mov
(bad)
pop
push
sub
mov
xchg
mov
mov
fucomp
es
(bad)
xchg
bound
pushf
(bad)
ds
lods
mov
push
jo
adc
lods
push
mov
and
test
jae
inc
push
mov
mov
push
sbb
lock
mov
mov
push
jbe
bound
push
movs
adc
mov
std
mov
fwait
add
lahf
or
lock
pushf
xchg
sub
mov
lock
fdiv
xor
(bad)
loopne
loopne
xlat
jbe
cmps
fadd
fs
call
xchg
retf
jbe
mov
neg
and
dec
xchg
rol
pop
push
lods
ja
ret
sbb
int
xchg
add
lods
repnz
adc
je
xor
in
add
(bad)
cdq
into
mov
jo
pause
add
or
sub
pushf
mov
cmp
aam
shr
int
lahf
movs
adc
or
pushf
xchg
dec
pop
pop
and
add
dec
outs
loopne
mov
and
rcl
mov
sar
call
push
sub
cli
les
enter
pop
test
mov
cdq
dec
add
push
popf
rcl
adc
(bad)
mov
(bad)
and
stos
call
pop
fs
cmp
mov
lea
js
mov
sub
(bad)
xchg
lahf
mov
mov
xchg
mov
add
mov
out
mov
sbb
in
je
add
bound
in
fwait
xor
xor
(bad)
mov
scas
pop
dec
movs
inc
ret
ins
test
mov
push
push
aam
sbb
dec
cdq
jmp
push
mov
ret
sub
lahf
lds
test
jl
mov
and
mov
call
inc
call
mov
in
mov
in
inc
aas
push
inc
adc
inc
lock
push
pop
das
pop
movs
xchg
shl
push
lods
adc
(bad)
cld
out
pop
xor
rol
pop
es
outs
ja
cmps
xor
xchg
xor
(bad)
dec
ss
sahf
test
movs
mov
add
cmp
mov
scas
mov
pop
into
mov
inc
mov
in
shl
(bad)
push
mov
mov
pushf
cmp
xor
leave
or
cs
lock
fdiv
inc
sbb
xchg
push
outs
xor
mov
mov
cmps
mov
xchg
xor
jmp
call
add
je
dec
jo
(bad)
mov
adc
cmp
push
lock
mov
inc
adc
push
add
jle
cdq
mov
push
or
in
jl
fmul
adc
idiv
loopne
mov
mov
add
lock
js
ret
xchg
inc
mov
mov
mov
mov
fild
push
into
pusha
dec
xchg
push
mov
(bad)
xor
mov
jg
jbe
(bad)
mov
pop
std
mov
ja
(bad)
dec
mov
je
inc
mov
call
ins
mov
sub
add
outs
fwait
jbe
mov
xlat
and
nop
sbb
rol
push
mov
inc
call
xchg
xchg
adc
xchg
mov
dec
ja
mov
jp
mov
mov
ret
mov
mov
test
test
pop
(bad)
popf
loop
fcom
pop
daa
mov
mov
mov
fistp
rol
xchg
in
mov
es
mov
adc
jmp
lea
pop
les
push
fidiv
fstp
pop
fcomp
mov
xor
xor
mov
pop
fidivr
mov
xor
mov
add
call
cs
or
inc
and
dec
movs
div
mov
add
sbb
add
push
test
mov
adc
inc
push
dec
sbb
push
push
xor
fadd
fimul
push
(bad)
div
loop
movs
pop
test
xchg
adc
cmps
pushf
das
fild
xor
jmp
sbb
les
sbb
adc
mov
and
add
inc
and
mov
popf
mov
add
iret
xchg
add
push
push
in
cmps
mov
mov
sub
(bad)
jl
lock
sbb
jp
or
fdiv
movs
push
data16
push
cmp
mov
add
add
movs
repnz
lahf
int3
sti
mov
and
and
xchg
mov
sbb
fdiv
mov
mov
and
in
enter
xchg
cmp
or
fdivr
pop
call
shr
cs
mov
sar
cli
cmp
test
inc
sub
xchg
outs
pop
add
sti
xor
mov
xchg
inc
loopne
jg
test
and
adc
aas
sub
mov
xchg
call
arpl
call
xchg
dec
sbb
int
fwait
ss
(bad)
mov
dec
mov
fcom
xchg
cli
adc
aas
jmp
adc
mov
xor
nop
lahf
xchg
mov
and
mov
sti
mov
adc
and
dec
cmps
fld
shl
xchg
jno
je
retf
movs
mov
xchg
repnz
out
add
mov
repnz
fwait
sub
cs
les
mov
mov
mov
xchg
mov
adc
retf
push
cmp
xchg
dec
fwait
sub
call
cmps
mov
push
mov
inc
pushf
test
mov
addr16
movnti
mov
jg
xchg
lea
sub
sar
mov
adc
fwait
movs
xor
mov
add
enter
mov
cmps
fwait
pop
add
pushf
lods
enter
nop
rcr
fcom
sbb
pop
xchg
inc
sar
mov
or
xchg
mov
xchg
xchg
push
or
xchg
cmps
lock
fwait
push
mov
or
sbb
xor
sub
aam
cmp
mov
mov
xor
(bad)
es
mov
outs
xor
popf
mov
inc
fwait
adc
fwait
sub
mov
mov
mov
pushf
sar
rol
stos
push
sbb
mov
jg
mov
add
ss
inc
mov
test
xchg
or
fwait
mov
adc
mov
nop
and
imul
pushf
or
(bad)
xchg
xor
aas
(bad)
mov
inc
loopne
mov
push
fcomp
imul
cmp
xchg
mov
cld
mov
mov
ret
mov
popf
dec
sub
mov
lea
outs
in
push
out
xchg
jl
icebp
fwait
mov
cmps
mov
push
dec
mov
hlt
(bad)
and
mov
mov
int3
in
mov
pop
es
hlt
pushf
add
aas
mov
loop
ret
pushf
xchg
mov
stos
fwait
jmp
mov
cmp
xchg
rcr
test
pushf
mov
mov
cmp
xchg
inc
xchg
push
mov
xchg
and
mov
mov
daa
sub
xchg
xchg
mov
fwait
pop
test
cmp
aad
mov
xor
mov
or
mov
xchg
mov
loop
(bad)
dec
in
adc
pushf
test
add
neg
jge
jo
mov
enter
jbe
je
add
in
(bad)
xchg
int
js
xchg
jnp
mov
mov
loop
nop
in
push
rol
xchg
mov
xchg
movs
mov
mov
enter
repz
pop
mov
nop
dec
fiadd
push
call
mov
mov
nop
(bad)
push
mov
cdq
inc
fst
xchg
xor
sbb
mov
loop
inc
xlat
xchg
xchg
pushf
mov
cmps
sub
je
and
xchg
xchg
xchg
mov
xchg
pushf
fldenv
jl
fwait
or
ficom
mov
mov
aam
inc
mov
jl
xchg
mov
pop
mov
test
dec
xchg
xchg
add
and
push
lock
addr16
xchg
xchg
pop
add
out
mov
mov
pop
xchg
test
dec
lods
movs
fwait
ss
or
aas
or
adc
faddp
push
push
xchg
popf
mov
in
fadd
pushf
fs
(bad)
mov
into
mov
inc
mov
lahf
stos
inc
dec
inc
mov
xchg
mov
aam
clc
or
nop
call
pushf
(bad)
clc
not
xchg
dec
mov
inc
mov
in
xchg
add
push
cdq
mov
inc
mov
mov
fsubr
test
ss
dec
and
xor
pusha
nop
push
mov
shl
mov
xchg
call
inc
xor
fwait
mov
push
rol
mov
sub
cmps
add
outs
jnp
push
jl
adc
push
or
mov
cmps
mov
jnp
lahf
xchg
mov
pop
and
jmp
pop
inc
iret
adc
test
adc
stc
xchg
pop
rol
ss
rol
add
stos
jg
leave
mov
ss
mov
aas
scas
and
(bad)
xlat
rcl
add
pop
jbe
xchg
mov
mov
adc
and
push
jle
into
test
aam
add
inc
cwde
mov
cld
mov
mov
sbb
xchg
mov
sbb
sbb
dec
mov
bound
cli
pop
mov
(bad)
fldenv
or
shl
cmps
push
mov
out
fldenv
cld
clc
pop
mov
cmp
pop
mov
ins
add
fisub
aam
xchg
mov
les
test
call
and
mov
push
and
inc
dec
add
(bad)
nop
loop
xchg
fisttp
add
clc
sti
out
sbb
into
aas
mov
ret
pusha
es
hlt
lock
xchg
adc
adc
push
mov
scas
rol
xor
push
cmps
mov
inc
mov
movs
mov
adc
std
(bad)
ret
loopne
ins
cmp
(bad)
loop
jecxz
(bad)
mov
(bad)
xor
cli
xchg
repz
pop
repnz
lahf
stc
stc
(bad)
lea
ja
and
mov
dec
cmp
aas
push
and
add
movs
(bad)
loope
out
pop
lahf
in
cmc
aam
out
lock
mov
loopne
pop
std
fdiv
cld
pusha
lahf
cli
pop
in
hlt
aam
sti
pop
call
int
cmc
lahf
out
cmps
repz
xchg
push
sub
daa
xor
out
mov
push
jae
and
mov
pop
mov
cmp
ins
sahf
pushf
cwde
mov
and
int
mov
cmp
aaa
mov
inc
ss
push
mov
dec
sub
push
call
dec
and
lds
cwde
pop
sub
cmp
xor
jne
sbb
fs
mov
out
ja
sub
sub
xchg
nop
in
mov
rcl
lods
fwait
pushf
fcmovnu
aam
popf
fwait
in
dec
xor
pop
or
lea
lock
cdq
jnp
adc
enter
cmp
sahf
cmps
mov
lahf
adc
mov
aam
add
clc
xchg
mov
loopne
pop
fdiv
pop
mov
mov
ja
jo
xchg
push
pop
push
mov
aam
pop
pop
pusha
xchg
loopne
pop
xor
pop
inc
xchg
mov
loopne
pop
and
pop
add
loopne
lods
mov
aam
nop
pop
pushf
and
dec
push
pop
xor
sbb
in
mov
aam
fcomp
lods
xchg
ins
stos
xchg
shl
push
mov
mov
loopne
pop
shl
pop
fild
fadd
(bad)
pop
mov
ret
rcr
iret
xchg
pop
cli
iret
out
pop
in
sbb
loope
mov
or
in
pop
(bad)
call
xchg
mov
loopne
pop
loop
loope
lock
pop
out
cmp
xchg
inc
mov
leave
mov
and
in
pop
pushf
and
pop
in
sbb
and
mov
movs
aam
xor
test
cli
add
in
mov
add
repnz
shl
sbb
test
mov
mov
mov
movs
outs
cmps
mov
lds
dec
mov
popa
sahf
cmp
push
or
xor
mov
fs
cmp
sbb
mov
pusha
mov
scas
movs
mov
cmp
mov
dec
xchg
pop
xchg
sub
xor
mov
pusha
shl
ret
mov
sbb
lds
enter
fisubr
rcr
mov
pop
fbld
je
out
scas
ror
sbb
xlat
xor
mov
mov
mov
sub
sar
push
(bad)
loope
dec
fwait
and
shl
in
mov
mov
in
scas
push
fimul
iret
sbb
dec
cmp
xchg
sub
test
aas
mov
sub
inc
xor
xor
mov
mov
scas
scas
pusha
je
stc
je
ja
pop
push
loop
cmc
inc
push
cmp
leave
push
push
fisttp
pop
push
(bad)
shr
popa
lahf
mov
leave
call
pusha
aam
in
mov
pop
cdq
fcmovnbe
ss
aad
imul
sub
dec
mov
and
imul
pop
mov
ins
mov
loopne
pop
mov
and
adc
popa
mov
aam
sub
arpl
sbb
gs
aam
cld
pop
addr16
mov
loopne
pop
jns
mov
jp
fcomp
jnp
sub
jge
and
pop
lods
xchg
jno
pusha
pop
jb
sub
jae
pop
je
or
mov
aam
aam
js
mov
pop
dec
mov
dec
aam
dec
pop
cmp
dec
mov
loopne
pop
cld
mov
aam
push
pop
aam
inc
mov
loopne
xor
inc
and
inc
and
aam
sub
inc
xchg
mov
loopne
pop
pop
mov
aam
int3
pop
pop
xor
pop
mov
rcl
pusha
pop
sub
push
aam
push
pop
or
push
pop
hlt
mov
mov
movs
(bad)
push
xchg
pop
mov
cmps
fadd
sub
shl
adc
sub
jl
xchg
pop
pop
das
xchg
mov
loopne
pop
and
pop
and
not
and
pop
and
daa
mov
loopne
pop
sbb
imul
and
push
jge
(bad)
fst
arpl
xchg
dec
jnp
mov
jp
mov
and
push
aaa
nop
mov
sahf
sub
pop
inc
inc
in
fmul
and
add
jb
out
daa
js
jge
lahf
and
ja
and
sub
jo
pushf
das
imul
into
dec
scas
test
sbb
jnp
in
jns
sub
cwde
fiadd
inc
xchg
addr16
jne
test
cmp
es
arpl
or
aaa
sub
and
daa
ins
shr
inc
mov
neg
inc
adc
imul
add
inc
and
pop
js
pusha
iret
movs
mov
push
mov
ins
add
sub
rcl
pusha
cmp
call
push
cmp
dec
mov
mov
cmp
mov
aaa
xor
sub
fld
repz
mov
ds
adc
addr16
lahf
mov
fstp
add
call
enter
inc
outs
mov
mov
pop
jp
repnz
mov
dec
sahf
sub
(bad)
(bad)
les
jmp
pop
mov
jne
(bad)
mov
adc
out
and
mov
xor
push
mov
outs
lahf
pop
(bad)
adc
inc
shl
add
test
sub
(bad)
mov
test
mov
or
shr
shl
mov
jle
mov
lock
lock
fs
data16
ins
sbb
xor
fidiv
fdivr
sub
aas
mov
dec
pusha
sub
test
inc
and
cli
repnz
sbb
call
xchg
sbb
cmp
sub
push
(bad)
jb
cmp
enter
test
shl
cmps
xor
test
mov
mov
pop
cmp
aam
xlat
in
sahf
push
loopne
xlat
cmp
pushf
xlat
mov
cli
xor
pop
shl
ret
repnz
sub
fdiv
je
pushf
cmps
add
sbb
scas
and
cmps
fmul
aas
mov
mov
int3
clc
pop
daa
push
xor
in
and
into
xchg
call
push
mov
cs
xor
pop
ins
mov
pushf
mov
cmp
pop
mov
xor
xor
sbb
sub
cmp
(bad)
jnp
mov
test
jae
xchg
and
inc
lods
push
xor
or
and
mov
mov
je
(bad)
(bad)
test
pusha
mov
mov
aad
add
cmps
ins
(bad)
and
mov
sbb
and
dec
or
ret
inc
call
mov
mov
outs
pop
pop
into
neg
nop
call
mov
mov
pop
call
aas
(bad)
sub
(bad)
outs
mov
add
retf
adc
das
xor
popa
mov
cs
add
es
out
add
mov
and
fs
dec
ins
repnz
rol
pop
stc
cld
pusha
jecxz
popf
enter
ret
xchg
cmp
ins
inc
inc
pop
fidivr
push
int
mov
sti
push
jl
push
push
(bad)
(bad)
rcl
(bad)
xchg
or
scas
push
xor
jo
and
mov
dec
inc
mov
xchg
sub
xor
test
mov
retf
push
mov
mov
ins
test
pushf
add
imul
pop
pop
daa
dec
inc
gs
and
xchg
sbb
mov
push
sub
fwait
ins
movs
pop
ins
xor
clc
popf
sub
sub
fwait
push
jb
pop
mov
push
sub
push
xchg
sub
jo
aaa
add
fistp
push
and
hlt
mov
xchg
mov
retf
mov
loopne
pop
clc
mov
aam
xchg
push
mov
lahf
(bad)
loopne
pop
fdiv
pop
mov
pop
(bad)
add
shl
(bad)
mov
pop
arpl
sbb
push
adc
nop
je
sbb
push
jp
mov
fs
retf
jne
pop
mov
fsubr
xor
sub
adc
lahf
dec
aam
test
or
sub
fs
hlt
xor
popf
scas
mov
mov
pop
movs
fimul
mov
(bad)
sub
mov
mov
mov
mov
push
cmp
xchg
dec
xor
xchg
xchg
jg
mov
js
adc
xchg
inc
xchg
sti
cmp
mov
add
sbb
fmul
clc
stc
call
add
fsubr
pop
pop
inc
mov
shl
mov
mov
xchg
movs
fadd
dec
mov
call
xchg
nop
ja
sub
mov
and
sub
shr
mov
and
push
js
and
fcom
fidivr
pop
push
pusha
(bad)
adc
test
sbb
test
or
fadd
test
push
fmul
pushf
test
(bad)
in
loopne
clc
mov
fistp
adc
movs
in
mov
call
test
loopne
dec
xchg
mov
pusha
js
fcomp
mov
lahf
(bad)
stc
icebp
jecxz
add
repz
test
hlt
sahf
repnz
mov
mov
ds
rol
test
mov
add
cmp
je
ficomp
in
xor
xchg
cmp
loopne
xor
xchg
xchg
mov
(bad)
or
(bad)
es
fwait
pop
daa
sub
js
test
jl
jg
test
repz
mov
xchg
xchg
(bad)
out
(bad)
cld
mov
mov
mov
call
cld
rep
outs
fisttp
mov
jb
outs
(bad)
(bad)
icebp
mov
jnp
jno
jle
mov
call
mov
test
rol
mov
outs
test
lahf
test
imul
cmp
mov
(bad)
cmp
mov
sbb
dec
movs
sbb
sbb
shl
(bad)
xchg
fstp
fcmovnu
fstp
mov
xchg
ret
ret
iret
into
jmp
cmps
xor
test
adc
mov
scas
mov
dec
lods
mov
ss
pushf
in
xchg
mov
fxam
repnz
sub
rcr
int
sub
mov
fist
or
jle
test
aaa
mov
xor
call
lock
xchg
cmps
cmc
add
(bad)
repz
(bad)
mov
cmp
mov
cld
stos
lods
jnp
out
jge
lock
sbb
stc
loopne
call
cwde
mov
fld
fcmovbe
xlat
(bad)
out
iret
popa
fist
pop
out
xor
stc
(bad)
cs
sub
(bad)
dec
rol
hlt
mov
cmc
movs
jo
dec
lahf
dec
div
frstor
idiv
scas
mov
cmps
mov
clc
lahf
ffreep
ret
ffreep
cmp
xchg
inc
pop
sub
and
and
xor
push
mov
ins
and
into
mov
xor
pop
jo
jno
add
fiadd
xchg
(bad)
mov
dec
pop
xchg
xchg
and
test
cmp
fild
xchg
inc
cld
js
push
xchg
inc
adc
mov
mov
dec
repnz
scas
clc
lahf
aam
xchg
cmp
xchg
in
and
(bad)
jl
inc
test
pop
or
hlt
cmps
pop
lahf
push
cmp
xchg
repz
mov
fist
iret
rcr
ja
(bad)
movs
sbb
rcl
pop
xchg
adc
adc
add
aam
mov
mov
mov
sub
inc
xor
and
and
pop
jge
push
pop
pop
inc
aaa
mov
in
call
hlt
out
loope
mov
cli
rcl
out
outs
add
cmp
mov
cmps
mov
leave
mov
mov
push
push
aaa
and
push
pop
adc
inc
pop
sub
jo
pusha
pop
push
addr16
and
inc
cwde
pop
cmp
sub
pusha
dec
mov
and
mov
and
mov
jbe
pop
inc
inc
xchg
jns
inc
les
adc
cmp
jg
and
sbb
scas
lock
fcmovb
mov
ror
cwde
push
sub
and
inc
aad
vpmaddwd
cmps
addr16
cs
popf
pop
xchg
das
sub
inc
sub
pusha
jno
loopne
imul
test
jmp
idiv
jecxz
int
jnp
lock
test
mov
sbb
dec
loopne
mov
out
loop
xchg
repnz
int3
cwde
pusha
pusha
pop
cs
(bad)
dec
jae
mov
xchg
and
sub
outs
sbb
mov
stos
mov
and
clc
lods
retf
xor
fdivr
cmp
pop
rol
dec
in
or
xchg
jbe
dec
shl
inc
test
movs
aas
ret
add
or
push
mov
repz
inc
movs
daa
js
test
cs
or
xlat
inc
inc
jg
sar
or
sub
push
test
and
push
xchg
das
push
pop
push
jno
adc
cld
pop
push
push
inc
cmps
ss
out
cs
adc
add
imul
es
ss
sub
hlt
adc
dec
shl
jne
jns
call
push
mov
adc
sahf
pop
jb
pop
xchg
adc
mov
adc
xchg
cmp
addr16
fimul
sar
sbb
mov
mov
pusha
mov
and
shr
mov
mov
rcr
(bad)
sahf
and
loopne
mov
mov
cmp
jo
and
mov
mov
push
fdiv
cmps
fiadd
add
push
push
aam
in
stos
imul
adc
mov
xlat
enter
not
xchg
sahf
not
jge
xor
sbb
inc
lahf
aaa
mov
aaa
xor
xor
test
mov
ds
movs
das
xor
dec
xlat
adc
mov
add
jmp
inc
inc
cmp
ds
ins
xchg
in
dec
sub
xor
fwait
mov
cs
push
adc
adc
sbb
adc
mov
push
aaa
push
aaa
pop
lahf
mov
mov
out
push
inc
jb
es
and
in
jnp
xchg
xlat
test
mov
mov
into
xor
push
ror
lods
or
aam
jle
jle
mov
push
ins
push
shl
fidivr
adc
dec
push
aam
push
and
inc
push
inc
ins
xor
add
je
pop
mov
pop
pop
pop
bound
es
outs
cmp
sub
fistp
mov
mov
dec
xor
push
mov
mov
loopne
mov
enter
push
cli
cs
adc
dec
and
in
mov
xadd
daa
xor
and
inc
mov
ret
sub
jp
hlt
mov
leave
push
out
pop
lods
je
mov
repz
cmp
scas
mov
mov
cmc
dec
jns
xlat
mov
cmps
jnp
cmps
aad
mov
and
les
in
pop
xchg
div
out
cli
in
sti
rep
cld
ins
mul
mov
jmp
arpl
mov
stc
out
(bad)
ror
fsubr
cmc
leave
shl
in
jl
repz
loope
div
sti
call
mov
(bad)
pushf
retf
sbb
dec
clc
sbb
fs
loope
mov
aad
call
push
xchg
loop
frstor
dec
retf
pusha
mov
test
lods
inc
leave
xor
pushf
xor
cmp
test
pop
mov
cwde
mov
sar
jo
aaa
jne
push
cdq
mov
and
xor
hlt
dec
mov
aad
pusha
sahf
repz
jecxz
int
ret
dec
nop
cs
jp
dec
adc
sub
out
rcl
mov
out
or
cmp
mov
les
pop
xchg
lahf
enter
xor
aaa
add
faddp
push
inc
faddp
mov
sbb
popf
and
fstp
shl
pop
aam
aad
inc
sbb
xlat
loopne
nop
adc
hlt
ret
adc
pop
sub
push
sar
hlt
cmps
cmp
call
push
push
je
sbb
repnz
adc
(bad)
aam
aad
fistp
sub
in
mov
loopne
mov
jp
std
hlt
xchg
out
scas
les
push
and
adc
adc
push
(bad)
adc
sub
inc
stos
dec
mov
sar
mov
mov
xlat
iret
add
test
popa
enter
mov
(bad)
jmp
fidivr
mov
jmp
xchg
in
das
lahf
and
xlat
sar
(bad)
jg
cmps
je
retf
cmp
add
add
dec
(bad)
rol
xchg
cmps
hlt
cmps
jecxz
ficom
mov
hlt
mov
pop
inc
mov
(bad)
sub
jbe
mov
add
test
call
cld
enter
and
and
pop
sub
data16
pop
jae
retf
pop
cmp
fmul
leave
mov
ficomp
aas
sub
pusha
ret
mov
lock
cld
fist
cs
call
or
rol
fcom
sub
cmps
(bad)
and
mov
in
scas
mov
sbb
rcr
int3
aad
ins
outs
jle
int3
shl
int3
retf
in
pop
cld
ficomp
mov
or
push
mov
adc
icebp
fbstp
sti
cmps
rcl
or
hlt
(bad)
jmp
lods
out
fcmove
sti
loopne
cld
sub
rol
dec
jne
rol
cmps
sti
scas
int3
fcomp
(bad)
cld
sub
(bad)
je
rcr
xchg
add
clc
mov
cmp
mov
jo
xchg
or
out
adc
fucomip
shl
leave
pmulhuw
in
mov
jl
mov
or
std
or
xor
or
sbb
icebp
adc
mov
loopne
mov
(bad)
mov
adc
cmp
sbb
loopne
jl
sub
mov
jmp
sub
mov
xchg
js
inc
and
and
daa
dec
shl
add
pop
and
mov
daa
test
inc
ret
dec
xor
pop
lahf
mov
push
inc
push
xchg
aaa
sub
aam
pop
daa
sub
dec
iret
dec
xor
xor
and
pusha
add
scas
sar
jmp
mov
movs
loopne
mov
imul
aam
jae
xchg
jmp
jb
sahf
and
and
pop
hlt
pop
inc
xchg
cli
inc
inc
mov
pop
adc
and
xor
push
ffreep
sti
mov
sub
add
jg
(bad)
ffree
add
mov
(bad)
mov
inc
dec
mov
or
cmps
mov
mov
icebp
in
mov
inc
int3
jns
shl
xchg
xchg
and
push
cli
sub
repnz
sbb
ror
je
push
inc
retf
pushf
or
mov
push
dec
jnp
mov
mov
pop
dec
xor
ja
push
div
push
jg
cdq
mov
je
dec
cmp
mov
xor
and
enter
dec
inc
push
sub
outs
ja
pop
rcr
test
int3
mov
adc
int3
and
clc
les
in
mov
cmp
add
or
push
shr
sub
leave
fdivr
sbb
lods
cmp
cmp
stos
xlat
mov
push
movs
cmps
sbb
outs
sbb
xchg
xchg
loop
jnp
shr
ss
faddp
retf
in
enter
inc
shl
mov
xor
in
enter
inc
ret
retf
xor
mov
mov
fistp
or
fisubr
dec
jnp
fsubr
add
cs
ret
shr
out
jle
pop
jl
imul
mov
(bad)
enter
rcr
sbb
shl
lahf
pop
mov
test
inc
frstor
xchg
test
adc
adc
test
xchg
xchg
adc
scas
jmp
xlat
loop
out
xchg
xchg
inc
mov
sbb
xchg
push
inc
mov
and
xor
pusha
in
sub
mov
or
lock
lock
mov
clc
(bad)
shl
mov
mov
xor
fsub
in
cdq
dec
mov
adc
call
test
stos
scas
fistp
adc
jl
lds
xchg
out
or
add
adc
adc
adc
int3
scas
pusha
push
shl
(bad)
aam
imul
(bad)
movs
xchg
add
xlat
in
mov
pop
scas
mov
(bad)
ror
sbb
xchg
jle
mov
aam
sar
lds
mov
popf
pop
lahf
pushf
mov
aam
mov
mov
nop
cdq
pop
mov
test
test
pop
nop
xchg
lea
les
mov
inc
xor
cmp
call
inc
pusha
(bad)
xchg
add
jl
mov
aam
in
das
mov
sbb
fmul
aaa
mov
pop
inc
mov
inc
ds
cwde
and
js
pusha
cmp
sar
out
outs
ret
aas
jg
ss
ficom
leave
and
addr16
es
cmps
mov
push
mov
into
leave
lds
cs
(bad)
inc
add
mov
lods
leave
(bad)
(bad)
mov
cld
sahf
pop
js
xchg
dec
add
inc
jno
adc
or
test
push
inc
out
push
mov
jmp
push
bound
mov
mov
(bad)
(bad)
retf
mov
sbb
push
and
je
and
into
inc
push
mov
or
movs
xchg
pushf
hlt
movs
retf
mov
cmps
in
shl
addr16
test
dec
mov
pushf
xor
push
(bad)
cmps
jecxz
push
pop
and
lea
adc
aam
cmp
cmp
pusha
scas
xlat
ror
fsubr
call
inc
fucomp
mov
xchg
sub
stos
(bad)
aam
jle
add
and
sbb
icebp
cli
ret
out
pop
xchg
mov
mov
push
adc
rcl
shl
sbb
cmps
jecxz
lods
jnp
dec
aaa
adc
rcr
pop
pop
js
pop
push
fadd
fiadd
add
movs
sbb
mov
out
mov
fild
sub
fcom
push
outs
es
pop
mov
sub
cmp
inc
and
(bad)
mov
or
mov
pop
leave
mov
xchg
scas
cmp
fsubrp
shl
fisub
retf
lahf
shr
inc
fnstenv
xlat
stos
dec
and
rcr
je
sub
es
xchg
(bad)
pushf
lahf
sub
shl
lock
imul
std
je
ret
cdq
adc
iret
(bad)
adc
cmp
push
retf
pusha
pop
movs
stos
mov
fidivr
add
pop
fldl2t
sar
(bad)
out
pusha
sbb
mov
pushf
inc
dec
dec
inc
pop
or
jmp
int3
dec
pop
sub
test
jne
test
outs
add
mov
fadd
hlt
sub
cld
push
sub
or
xor
xor
dec
pusha
mov
ret
xor
jle
gs
mov
and
jg
mov
pop
pusha
scas
bound
pop
jle
xor
fisttp
xor
lds
clc
mov
and
cdq
popf
ret
xor
inc
mov
jno
mov
aad
int3
retf
addr16
out
push
sub
sti
movs
jecxz
cmps
xchg
(bad)
mov
clc
std
mov
(bad)
scas
inc
sub
xchg
pop
inc
and
xor
or
add
cmp
iret
icebp
bound
dec
pop
xchg
cld
mov
jbe
shl
test
push
sbb
outs
aam
out
jecxz
ss
loopne
fild
ret
bound
imul
dec
pop
push
pop
call
fcomp
sbb
cmp
int3
push
fsub
cs
inc
and
into
pushf
in
fcomp
push
mov
xchg
in
cmp
call
fldenv
cmp
pop
shl
int
push
mov
push
int
sbb
call
pop
inc
xchg
jg
inc
ds
adc
sahf
rcl
cmp
stc
(bad)
push
jns
les
and
xor
pushf
repnz
(bad)
scas
and
and
xchg
sbb
mov
inc
call
add
jg
imul
fst
out
or
and
mov
sbb
cmp
clc
or
pop
jbe
and
cmp
clc
mov
enter
repz
and
mov
sbb
fistp
push
into
cmp
jo
mov
dec
hlt
xchg
fild
push
inc
ins
ret
fiadd
adc
(bad)
mov
cli
outs
sahf
cld
ret
push
ret
xchg
xchg
repnz
xor
data16
shl
and
dec
mov
inc
push
pushf
fmul
jbe
(bad)
mov
popa
lods
fcomp
mov
repz
je
sar
push
call
push
sbb
mov
sub
pushf
sar
mov
aaa
or
dec
mov
sbb
lock
sbb
shl
sti
(bad)
cld
aad
xchg
mov
shl
mov
push
mov
push
mov
mov
loopne
inc
xchg
add
mov
cs
call
cs
mov
repnz
sbb
inc
lea
and
pusha
mov
aas
pop
fnsave
aaa
mov
ror
shl
pushf
xor
xor
mov
pop
es
stc
xor
or
aam
ss
mov
loopne
fs
fs
push
or
push
adc
mov
pop
aam
mov
fcom
pusha
je
rol
cmp
push
pop
and
repz
mov
mov
das
cmps
cmp
dec
test
sub
dec
mov
dec
adc
xor
xor
cmp
loopne
inc
cmp
pop
addr16
movs
jb
sar
dec
adc
out
dec
sbb
fild
add
fsub
inc
rcl
jae
int
add
fcomi
(bad)
jl
ds
outs
mov
push
dec
xlat
mov
lahf
ins
adc
in
mov
test
movs
sbb
cmp
cs
test
cmps
mov
js
mov
xchg
fadd
cld
push
mov
out
jmp
mov
mov
sar
cmps
mov
lahf
xchg
scas
cmps
mov
sahf
xchg
lods
movs
mov
mov
xchg
cwde
stos
mov
fwait
xchg
cwde
lods
movs
mov
xchg
xchg
lea
xor
stos
cdq
xchg
add
ins
dec
retf
adc
xchg
xchg
mov
movs
mov
cmps
mov
mov
mov
cmps
mov
icebp
mov
xchg
(bad)
in
(bad)
sub
mov
jno
xlat
lahf
bound
and
sahf
mov
mov
lea
dec
adc
into
mov
and
xor
movs
add
add
pop
test
dec
(bad)
cld
or
or
xor
dec
mov
clc
xor
sti
sahf
mov
adc
mov
xchg
or
(bad)
mov
lock
lock
xor
dec
lahf
mov
test
pushf
lahf
arpl
sbb
adc
imul
sahf
(bad)
push
fwait
cmps
jbe
aam
sub
aad
add
pushf
loopne
aaa
shr
adc
add
sbb
pushf
movs
jg
add
inc
xor
and
adc
add
xchg
aam
mov
xchg
rol
mov
mov
cmp
xor
in
adc
push
test
cdq
scas
(bad)
movs
(bad)
and
hlt
adc
aam
or
mov
mov
cmps
add
jl
nop
int3
xchg
xchg
retf
mov
mov
adc
pop
xchg
pop
ret
mov
xor
stos
fcom
adc
dec
pushf
push
repnz
pop
adc
xor
lock
mov
loopne
sub
sbb
adc
lods
shr
sbb
(bad)
sahf
cmp
and
ret
mov
lahf
pop
nop
(bad)
mov
fadd
lahf
mov
mov
ss
xchg
loopne
sti
fbstp
fcom
sbb
(bad)
aaa
test
xor
int3
in
xor
(bad)
xchg
lock
fmul
lods
test
test
mov
rol
rcr
loop
pop
sbb
inc
nop
mov
hlt
ror
mov
mov
aaa
nop
adc
test
pushf
inc
add
repnz
fdiv
pop
enter
add
mov
push
ror
fistp
sahf
(bad)
call
aad
dec
mov
fcom
test
xchg
call
dec
mov
mov
mov
or
clc
lea
push
add
lods
and
les
inc
iret
aam
pop
fwait
int3
test
(bad)
add
(bad)
pushf
dec
xchg
test
aas
cmp
mov
sahf
mov
fdiv
int3
add
nop
mov
pop
mov
dec
in
add
stc
or
loop
mov
add
mov
mov
mov
or
dec
push
movs
(bad)
aad
pushf
(bad)
add
call
fdiv
cs
movs
jg
mov
sbb
mov
xor
jnp
xchg
hlt
jge
cmp
scas
adc
fs
jmp
aam
hlt
pop
les
cli
or
jecxz
mov
adc
repnz
inc
mov
enter
cmc
addr16
pop
mov
out
jmp
inc
arpl
mov
ror
cmp
sub
int
mov
cmp
sahf
xchg
cwde
add
inc
inc
mov
lahf
cdq
shl
dec
out
dec
mov
pop
mov
nop
hlt
test
icebp
test
je
aam
xchg
xor
ins
cmp
(bad)
mov
call
repnz
cdq
hlt
enter
clc
scas
mov
stos
stc
mov
fdivr
xchg
mov
pop
nop
pusha
or
(bad)
mov
sbb
mov
dec
aam
xchg
rol
mov
add
mov
pop
and
mov
xchg
scas
les
jne
pusha
mov
scas
pusha
mov
mov
inc
inc
clc
and
aam
mov
mov
sbb
mov
lds
shr
mov
push
push
out
sub
pushf
mov
mov
xchg
scas
(bad)
mov
pusha
mov
out
cmps
scas
push
mov
mov
xor
xchg
je
out
scas
je
pop
scas
into
mov
aad
out
pusha
scas
je
out
scas
dec
sahf
pop
push
pusha
fidiv
xchg
scas
ret
pop
pop
mov
movs
scas
loop
mov
cwde
pusha
cdq
je
out
scas
cmp
xchg
sbb
adc
jne
retf
je
out
scas
jmp
lea
cli
pusha
mov
scas
sbb
data16
scas
xchg
outs
out
cmps
sbb
push
pusha
div
ss
xchg
mov
sbb
xlat
mov
je
out
scas
push
mov
inc
outs
dec
sbb
pop
mov
pop
data16
scas
add
shl
mov
pop
pop
repz
mov
ds
xchg
mov
pop
shl
outs
retf
mov
jmp
stos
out
stos
sar
mov
pop
cs
fwait
je
out
scas
outs
mov
add
dec
cwde
mov
pop
movs
pusha
push
outs
cmc
mov
clc
mov
add
mov
ror
mov
pop
add
scas
lods
mov
pop
std
pusha
mov
scas
sbb
bound
je
test
pusha
pop
outs
icebp
mov
xchg
pop
adc
je
in
leave
sbb
mov
test
stc
pop
mov
out
scas
(bad)
push
ins
aaa
sbb
mov
outs
inc
mov
push
ins
pop
sbb
mov
outs
jns
das
outs
test
xor
mov
push
inc
and
pop
outs
cmp
or
test
sbb
mov
push
jne
add
and
pusha
pop
push
cmp
or
sub
rcl
xor
sbb
mov
outs
popa
mov
test
sbb
mov
outs
sub
xchg
cmps
cmp
shl
enter
mov
mov
mov
xchg
ret
loopne
or
push
fcomp
aam
loopne
aam
mov
int3
mov
into
adc
outs
ret
mov
mov
xchg
das
sbb
mov
xchg
(bad)
xchg
nop
not
mov
add
sbb
xchg
cmps
cmps
sahf
mov
mov
cdq
call
mov
cdq
lahf
cmps
sbb
imul
pop
test
or
xchg
mov
fisub
nop
sti
lahf
mov
cmp
movs
push
add
adc
xchg
pusha
lahf
fiadd
sti
and
into
sub
jbe
and
cmp
nop
lds
and
dec
mov
loopne
in
test
loop
(bad)
test
jg
dec
test
shr
sbb
mov
jno
mov
(bad)
sub
stos
pop
push
sahf
nop
push
enter
mov
hlt
jmp
enter
nop
rcl
out
jecxz
add
les
call
sar
inc
jo
mov
call
outs
xor
jl
shl
mov
xor
or
push
nop
pop
rcr
jmp
cmp
mov
lods
test
in
mov
lods
enter
or
in
clc
lahf
cmc
std
mov
and
rol
out
fsub
ins
mov
in
dec
add
out
rol
in
stos
cmc
add
(bad)
jecxz
(bad)
mov
stc
sti
test
lock
rcl
jl
add
neg
(bad)
and
or
sar
pop
jmp
(bad)
icebp
invd
mov
inc
cli
stos
jmp
adc
loopne
sar
cmps
mov
pusha
mov
(bad)
pop
enter
sbb
aaa
add
(bad)
js
sar
fisubr
xchg
test
in
ja
or
rcl
pop
fisubr
ret
aad
inc
jmp
sub
xor
(bad)
xor
mov
add
loopne
adc
mov
jle
cmp
cmp
jne
mov
mov
mov
mov
nop
cmp
loop
dec
mov
sbb
hlt
repz
shr
imul
sub
rcr
imul
mov
popa
ins
aam
sar
hlt
mov
mov
push
aas
sahf
mov
cli
cmc
add
data16
pop
adc
lea
dec
movs
sbb
mov
inc
mov
add
test
fistp
je
fdivr
bound
or
cmp
lds
or
test
sbb
push
sub
dec
fld
jo
loopne
(bad)
xor
int3
cmp
out
xchg
mov
in
xchg
stos
mov
and
xchg
js
call
pop
call
xor
pusha
mov
outs
into
mov
mov
test
xchg
add
sbb
retf
leave
cmp
xchg
push
imul
(bad)
add
dec
pop
push
xor
and
into
mov
push
ins
or
sub
inc
aam
cmp
or
adc
mov
aam
clc
pop
les
loopne
aam
fcom
lods
mov
movs
xchg
pop
mov
mov
mov
jo
pushf
push
xchg
loopne
pop
xor
pop
or
rcr
mov
or
lds
nop
xchg
pop
fwait
xchg
push
ficomp
fisub
lods
xor
addr16
add
fwait
mov
nop
shl
xlat
pusha
aad
enter
seto
fsub
iret
in
mov
mov
aam
mov
out
cmp
xor
pop
mov
adc
pop
mov
fimul
mov
aaa
out
xor
call
cmp
pop
mov
xchg
cmps
pushf
loope
aam
data16
add
pop
xor
dec
mov
pop
or
mov
adc
push
xor
sbb
push
mov
add
test
mov
pop
and
mov
int
pop
or
les
dec
retf
leave
icebp
(bad)
adc
mov
js
xchg
cmps
jmp
add
lods
jbe
xchg
std
push
adc
or
mov
mov
pop
lods
xchg
sub
push
push
fcom
xchg
mov
aam
(bad)
and
pop
mov
and
mov
pop
out
xchg
mov
loopne
pop
ins
mov
mov
idiv
fst
jmp
cwde
xor
adc
out
fwait
add
pop
mov
test
aad
adc
test
repz
pop
xchg
or
mov
mov
mov
or
push
add
pop
(bad)
(bad)
pop
push
inc
xchg
push
push
pushf
movs
fst
(bad)
jecxz
fcomp
jbe
cwde
jmp
xchg
mov
aam
mov
call
pop
cdq
mov
xchg
xchg
mov
loopne
pop
push
mov
mov
loopne
pop
push
mov
aam
mov
pusha
xchg
pop
xor
pop
inc
xchg
pop
or
mov
adc
out
jo
dec
lahf
jns
pop
jnp
sbb
mov
push
jl
shr
test
ret
pop
call
js
xor
call
lods
(bad)
pop
inc
jb
push
and
cmp
cmps
cs
sub
mov
aam
jbe
push
xchg
sub
scas
pop
fidiv
pop
add
loopne
pop
jb
push
xchg
aam
mov
mov
loopne
pop
ss
aam
dec
pop
arpl
xchg
mov
mov
aam
nop
xchg
mov
loopne
pop
push
mov
(bad)
pop
test
pop
push
mov
aam
jb
gs
pop
lahf
cmps
ret
sahf
adc
outs
jge
pop
pop
sar
mov
add
or
dec
pusha
ret
sahf
xchg
xrelease
dec
cmp
adc
inc
mov
pop
add
fdivr
mov
shr
pop
xchg
mov
pop
cmps
nop
xchg
xchg
mov
lock
xchg
ds
mov
or
pop
lahf
aad
inc
add
retf
mov
mov
fimul
test
imul
popa
push
enter
lahf
fdivr
sbb
ins
push
std
dec
lock
lods
mov
xchg
xchg
pop
popf
setl
cdq
mov
shl
lods
or
or
pushw
mov
add
lock
sahf
cmp
ror
mul
xor
and
inc
movs
data16
mov
mov
int3
mov
loopne
pop
fsubr
fcom
aaa
nop
mov
aam
jmp
sub
mov
sar
jmp
add
cmp
pusha
xchg
ja
mov
pushf
test
mov
xchg
sbb
mov
sbb
sub
(bad)
sbb
xchg
sub
sbb
pop
sbb
ficomp
mov
xchg
mov
(bad)
js
retf
imul
(bad)
jge
jo
cwde
add
aad
xchg
sbb
outs
sub
aam
pop
xchg
sbb
lods
inc
xor
fisttp
stc
push
js
jg
cwde
pop
shr
add
cwde
std
ret
mov
sbb
js
in
(bad)
cwde
dec
sbb
or
cwde
jmp
jne
pop
mov
pop
mov
xchg
ror
jne
push
in
outs
xchg
jge
inc
gs
enter
add
push
pop
call
xor
pushf
mov
pop
adc
pop
loopne
rcl
cwde
je
add
es
jnp
outs
call
sbb
xor
cwde
aaa
mov
mov
sbb
retf
pop
outs
cwde
dec
icebp
add
mov
stos
ss
sbb
cli
fcomp
add
clc
push
mov
xor
movs
pop
pop
xchg
mov
xchg
stos
sahf
inc
xor
sbb
hlt
lods
dec
fst
adc
mov
rol
dec
xchg
cdq
mov
ror
jp
fcomp
cmp
jge
movs
stos
sub
out
jae
cdq
add
inc
jno
push
imul
loope
cmp
int
fist
jb
jne
pop
lds
test
push
cmp
dec
icebp
cs
xchg
sar
mov
pop
jmp
jbe
push
cdq
cmps
neg
iret
push
jmp
leave
sbb
mov
push
adc
mov
jg
push
mov
jmp
cmp
aaa
je
hlt
in
ror
cwde
ret
stos
cmc
in
xchg
pop
mov
xchg
loope
imul
scas
(bad)
cwde
out
cmc
mov
cmps
pop
cmp
cwde
mov
inc
mov
rol
xor
cwde
inc
lods
dec
and
mov
jne
xor
(bad)
cwde
xchg
and
jecxz
dec
mov
mov
sbb
into
scas
xor
sub
dec
lods
xor
cwde
and
xchg
xor
or
iret
and
add
mov
cmp
std
cwde
sbb
xchg
xor
dec
push
jmp
ins
adc
jno
into
cwde
rol
sub
adc
(bad)
imul
sbb
xchg
add
jmp
int3
dec
or
inc
pusha
xchg
dec
xor
pop
push
push
fwait
es
xor
test
rcl
pop
fcom
test
xchg
sub
lods
xchg
adc
cli
fld
fisttp
xchg
in
or
das
test
es
or
test
xchg
mov
or
mov
lds
cmps
ins
push
lea
sub
imul
fdiv
xchg
movs
cmp
xor
cmps
repnz
mov
mov
mov
jmp
cs
xchg
sbb
test
call
pop
and
stos
mov
mov
call
mov
fidivr
cmp
cwde
dec
repz
pop
movs
xchg
push
(bad)
std
inc
xchg
test
les
sub
out
fcom
(bad)
dec
ret
daa
sahf
mov
mov
cmp
nop
call
jp
int
xor
ror
ret
xor
mov
mov
and
shr
xchg
mov
icebp
mov
mov
mov
jmp
je
imul
(bad)
fdiv
mov
xor
call
fdivrp
ins
mov
mov
mov
jecxz
xlat
cli
mov
call
sbb
or
mov
enter
(bad)
and
dec
test
js
add
mov
sti
mov
call
movs
mov
repnz
mov
out
test
xchg
xor
scas
xor
ficom
pop
xor
push
or
fist
outs
(bad)
jno
iret
xchg
add
xlat
aas
(bad)
fwait
cli
ds
rcl
stc
xor
mov
test
push
xchg
adc
mov
mov
push
aad
scas
adc
sbb
mov
movs
(bad)
push
(bad)
mov
cmps
jecxz
enter
fist
loop
(bad)
test
inc
ror
xchg
js
mov
rcr
repz
push
push
je
and
push
xchg
ja
xchg
jge
clc
cwde
call
add
inc
gs
jo
outs
inc
imul
add
add
outs
bound
inc
gs
je
ins
dec
popa
ins
gs
add
movsx
not
bswap
bswap
mov
lahf
call
rcr
mov
mov
push
cmc
cmp
push
push
jmp
pusha
mov
mov
jmp
add
push
gs
jo
outs
dec
gs
add
add
outs
inc
js
arpl
pusha
push
adc
mov
mov
pushf
push
push
ret
add
dec
imul
add
ins
ins
push
outs
add
pop
ret
add
dec
gs
jo
gs
jb
jns
clc
mov
jmp
push
jmp
sub
aaa
and
test
retf
loope
fld
jmp
push
out
push
cmc
add
daa
sbb
pop
inc
jno
icebp
mov
movs
xchg
out
push
fst
jp
push
inc
push
inc
pop
inc
pop
inc
push
dec
push
dec
dec
xor
pop
pop
js
retf
gs
dec
jno
int
mov
loopne
inc
inc
lods
(bad)
mov
cmps
aad
jmp
gs
pop
sbb
push
dec
jbe
mov
push
jg
imul
les
shl
je
or
sti
outs
push
push
sti
test
outs
pop
push
inc
xor
pop
or
in
call
adc
add
push
inc
mov
jb
fcmovnb
dec
ins
es
fstp
lds
cmp
inc
jl
test
fisub
int
mov
dec
xor
push
lds
fcmovnb
(bad)
add
push
jmp
pop
shl
aam
xor
dec
sub
jne
iret
mov
mov
test
jmp
shl
jno
push
fiadd
pushf
mov
sar
pop
sbb
push
and
fsub
dec
sub
xor
or
jp
in
add
xchg
ds
push
cmps
sbb
adc
push
add
arpl
clc
push
fucomp
rcl
cli
sbb
push
mov
jmp
pop
ins
(bad)
jne
mov
inc
sbb
inc
cld
sbb
int3
es
or
es
fbld
push
pushf
les
or
ins
push
inc
repz
cmp
mov
fisub
pop
inc
mov
adc
inc
sub
out
cmps
mov
inc
xor
pop
aas
jne
cmps
popf
mov
mov
sar
in
sub
outs
pop
movs
pushf
fmulp
stc
out
pop
or
push
or
push
das
mov
push
push
xor
add
push
gs
popa
jb
outs
je
and
in
into
and
aad
sub
mov
shl
(bad)
jmp
dec
xor
arpl
mov
ss
stos
enter
sbb
inc
out
mov
repnz
adc
rol
fnstcw
sbb
inc
ss
retf
xchg
xchg
loope
inc
or
xchg
jae
jae
icebp
mov
mul
cmp
cmp
jl
retf
mov
hlt
pop
pop
hlt
pop
push
push
inc
xor
pop
adc
repnz
bound
rcl
pop
ins
pop
pushf
dec
push
stc
test
jnp
xor
xchg
test
sar
div
ror
neg
sub
fidiv
(bad)
aas
and
dec
cmp
jp
jae
mov
pushf
das
sub
add
fs
ja
imul
mov
movsx
mov
mov
lea
movzx
pop
push
movzx
pushf
jmp
add
dec
ins
gs
outs
imul
imul
ins
cli
jmp
xor
push
ret
add
push
jns
je
ins
push
popa
jb
ins
gs
jb
dec
outs
outs
inc
add
add
gs
je
push
outs
add
add
jb
je
push
jmp
add
inc
gs
gs
je
je
add
add
jne
inc
imul
gs
imul
ficom
shr
mov
and
jne
movzx
rcr
add
bsf
mov
cmc
pusha
test
add
pusha
movzx
add
bt
neg
ror
mov
stc
mov
call
add
push
gs
je
gs
push
outs
fs
add
je
imul
outs
jb
pusha
lea
jb
stc
cmc
cmp
push
pusha
lea
jnp
pusha
lea
jae
pushf
or
pushf
stc
mov
xchg
mov
xor
rol
mov
bt
xor
pushf
cmp
pusha
pushf
repnz
call
lea
jb
push
pusha
cmp
jmp
add
inc
gs
inc
dec
inc
push
add
add
gs
je
inc
imul
and
jne
shld
test
xor
rcr
or
mov
not
sar
add
add
shl
or
xor
call
add
inc
gs
imul
outs
arpl
add
inc
gs
popa
jo
jne
add
and
gs
cwde
int3
mov
mov
lea
jle
pushf
mov
pushf
push
push
lea
jmp
xlat
mov
cdq
in
fadd
les
es
(bad)
or
add
dec
das
jge
sub
lods
xchg
lock
and
inc
inc
xor
xchg
lea
mov
adc
cmp
ss
or
dec
inc
cmp
fxch
stc
out
adc
movs
xchg
stos
lds
sbb
jmp
movs
mov
cmc
mov
test
xor
lahf
ror
cmc
jmp
jne
(bad)
js
cli
fcomp
or
add
cmp
in
jae
js
jno
mov
outs
dec
sub
inc
imul
retf
rol
shl
or
adc
push
push
cli
sub
and
cmps
fwait
test
push
popa
pop
mov
xor
call
outs
push
outs
pop
sub
xchg
and
lds
jae
jp
inc
imul
mov
leave
(bad)
(bad)
in
fstp
and
(bad)
gs
jge
lea
(bad)
cld
fstp
or
push
ss
xchg
sub
imul
std
fidiv
sub
dec
xor
div
in
adc
test
sbb
xor
addr16
mov
sbb
cmc
fsub
or
bnd
stos
stc
jno
mov
mov
in
sbb
jns
pop
neg
retf
imul
fmul
iret
add
inc
fdiv
mov
inc
imul
mov
push
sbb
jno
mov
mov
adc
mov
(bad)
repnz
neg
ret
mov
rol
hlt
fprem1
clc
in
push
inc
mov
inc
in
bound
retf
inc
adc
sub
xor
movs
cwde
in
call
enter
loopne
or
pop
mov
xchg
cmps
repnz
test
sbb
pushf
mov
xlat
shl
das
adc
sbb
adc
lock
sub
adc
(bad)
mov
jecxz
jmp
outs
fidivr
loopne
xor
ins
test
aad
add
inc
gs
outs
ins
ins
popa
outs
fs
imul
push
gs
arpl
jo
jns
or
(bad)
xor
inc
add
mov
adc
retf
mov
push
aas
(bad)
pop
lods
(bad)
ffree
aad
retf
mov
mov
pop
xchg
movs
pop
push
data16
pop
mov
out
scas
fwait
jo
inc
cmp
and
and
mov
inc
fcmovnb
push
mov
repnz
push
rol
(bad)
enter
push
inc
xchg
rol
pop
cmp
repz
adc
lock
and
int
les
mov
pop
pop
(bad)
xlat
ret
pop
push
mov
movs
lea
out
shr
cld
add
inc
cmp
dec
xor
imul
push
fs
movs
dec
aaa
xchg
jne
hlt
movs
xchg
jg
ins
xor
retf
xor
xchg
adc
cli
in
jmp
cmp
lods
inc
pop
mov
adc
add
push
gs
ins
outs
jae
dec
gs
add
inc
gs
popa
jae
inc
arpl
gs
outs
jo
jo
lea
jne
shld
pushf
rcl
mov
mov
add
clc
pushf
movzx
bts
bsf
neg
sub
mov
test
pusha
pushf
add
mov
bt
bt
test
mov
push
test
push
lea
je
stc
jmp
pusha
push
push
pop
push
pushf
mov
mov
push
ret
add
inc
jb
ja
fs
add
bound
push
gs
dec
jne
inc
add
add
je
inc
push
add
test
ja
dec
nop
ret
not
mov
dec
not
mov
pushf
jmp
jmp
pusha
pusha
lea
je
cwde
jae
sub
bsr
or
mov
shl
test
mov
test
and
test
shr
rcl
mov
pushf
or
pusha
pusha
call
repz
pushf
mov
push
mov
call
cmp
pusha
lea
jb
cmp
bt
cmp
push
pushf
mov
push
lea
jae
rcl
test
shl
mov
push
cmc
mov
shl
shld
mov
stc
pushf
test
stc
xor
test
cmp
pusha
test
repnz
push
lea
jne
ror
mov
push
lea
shrd
sub
bt
pusha
bsr
lea
lea
pusha
stc
sub
mov
push
push
pop
mov
jmp
mov
push
enter
lea
cmc
mov
or
add
sub
inc
das
jge
mov
repz
(bad)
inc
push
inc
xchg
jne
push
loope
movaps
add
sub
retf
out
nop
movs
cdq
jmp
cmp
dec
dec
gs
pop
or
mov
faddp
std
jmp
and
pop
inc
add
or
cmps
jl
pop
inc
retf
adc
dec
xor
stc
mov
retf
push
or
sbb
push
rcl
jecxz
jnp
mov
movzx
mov
lea
pusha
pushf
pushf
mov
pusha
pushf
mov
mov
lods
call
add
inc
gs
outs
jne
je
je
add
sar
ret
inc
bt
xor
neg
jmp
bt
test
mov
jmp
cmp
pushf
call
add
push
gs
jbe
outs
je
stc
shl
dec
cmp
neg
pusha
jmp
pushf
bswap
mov
movsx
jmp
add
inc
push
je
dec
push
add
add
outs
bound
inc
fs
je
ins
inc
add
add
addr16
jne
jb
push
popa
ins
jne
inc
add
add
je
jne
inc
add
and
lea
jmp
stc
jp
mov
or
and
push
and
pop
cmp
sub
inc
ss
xor
cs
inc
jnp
xchg
xchg
xor
mov
pop
in
call
(bad)
mov
cmp
outs
push
popa
push
or
mov
mov
inc
cmps
pop
mov
and
out
cmp
pop
inc
pop
mov
call
and
xchg
fcmovne
sbb
mov
push
sti
call
adc
ret
pop
lods
or
adc
repnz
not
add
(bad)
daa
or
aad
ss
enter
in
(bad)
es
sbb
jmp
rol
std
add
dec
mov
pop
dec
int
out
sub
mov
mov
sbb
fs
jne
cwde
mov
not
pusha
cwde
mov
push
call
mov
lahf
mov
call
add
inc
outs
ins
jo
jb
push
je
imul
and
call
pushf
lea
jmp
lods
call
bsr
push
add
add
mov
movsx
mov
sbb
pushf
bt
bt
mov
mov
test
cmc
test
repnz
jmp
outs
inc
das
jge
cmps
cwde
xchg
aas
jl
mov
xchg
retf
scas
jmp
sbb
mov
sahf
sub
inc
xor
sar
jmp
retf
push
cmc
in
jg
lods
sbb
adc
push
dec
cmp
jb
daa
stos
(bad)
pop
mov
push
jmp
mov
sub
cs
pop
in
mov
xor
sti
fcom
(bad)
xchg
fstp
(bad)
ja
sbb
in
into
xchg
xchg
out
jecxz
pop
mov
xor
xchg
gs
leave
or
iret
mov
or
sbb
cmp
xlat
mov
fild
jmp
sub
dec
jl
jle
repz
inc
call
(bad)
cli
repz
or
sti
xor
push
jno
sub
sbb
add
je
imul
add
add
je
jb
gs
ins
outs
jae
dec
popa
outs
fs
add
add
je
imul
add
fs
jne
xor
dec
movsx
push
sub
bsr
mov
lea
stc
shr
add
rol
test
cmc
cmp
mov
pusha
test
lea
pusha
lea
je
cmc
sub
stc
clc
clc
cmp
jmp
mov
and
xor
rcl
add
and
shl
mov
jmp
add
inc
gs
imul
js
inc
add
inc
and
cmp
out
aas
mov
pushf
pushf
lea
jmp
call
cmp
call
call
es
test
cwde
sti
fisubr
or
out
add
sbb
push
movs
mov
sti
jmp
add
sbb
(bad)
std
jecxz
cmp
fdiv
jecxz
sub
or
push
jo
(bad)
mov
mov
cdq
jg
fadd
loop
sti
in
cmp
mov
ins
pop
cs
lock
fwait
mov
stc
stc
jmp
ret
and
sbb
pop
mov
ror
mov
scas
xchg
mov
sbb
in
ret
add
je
je
gs
push
outs
fs
xchg
inc
add
inc
imul
jae
popa
addr16
add
add
je
outs
arpl
add
jno
and
pop
jp
mov
cmps
sar
sbb
inc
ss
sub
push
mov
call
push
repnz
dec
js
push
sub
js
pop
popa
test
or
adc
stc
xor
(bad)
lods
cdq
stos
retf
mov
xchg
shr
pop
inc
(bad)
mov
rcl
jns
sbb
sub
shr
push
cmc
jecxz
cmc
jmp
sub
mov
aas
sub
inc
push
dec
popa
push
imul
cmps
sti
in
add
test
inc
ds
rol
add
je
outs
jns
imul
es
xor
(bad)
fnstenv
adc
push
inc
pop
clc
aad
and
add
ds
xor
dec
imul
ja
int3
in
push
mov
sbb
or
mov
xchg
push
mov
fxtract
fcom
sbb
mov
inc
cmps
retf
dec
xchg
dec
sub
lods
(bad)
fcmovb
jmp
das
adc
repnz
inc
cs
mov
arpl
mov
(bad)
mov
fwait
in
dec
push
imul
(bad)
aaa
sbb
jbe
adc
bound
cmp
outs
dec
adc
push
mov
out
fadd
ror
jmp
daa
push
retf
dec
dec
xor
mov
les
add
jmp
jmp
scas
mov
mov
and
test
lahf
aam
fdivr
pop
leave
repz
adc
cmp
sub
(bad)
fs
loop
cmp
or
and
jmp
stos
xor
jle
pop
out
retf
fcmovne
rol
(bad)
enter
dec
dec
xor
cmp
adc
fs
addr16
pop
adc
mov
mov
mul
xor
xchg
mov
jmp
and
call
movs
xor
mul
stos
cmp
inc
xor
ret
adc
in
lahf
mov
das
xor
ins
pop
outs
pop
test
mov
not
int
or
or
js
sbb
(bad)
js
inc
xor
fidivr
pop
xor
mov
fmul
adc
xor
fs
outs
mov
sbb
add
inc
gs
outs
fs
gs
imul
add
inc
and
fimul
xor
cli
jmp
cli
inc
add
je
jb
jb
je
arpl
push
arpl
outs
add
add
je
gs
je
jo
imul
ins
and
bt
clc
repnz
pushf
pushf
jmp
clc
movzx
bts
lea
mov
bt
stc
cmp
pusha
pusha
jmp
clc
cmp
pusha
call
add
inc
gs
ins
addr16
je
ins
dec
inc
add
add
je
gs
imul
pop
inc
jno
dec
fadd
clc
push
(bad)
xchg
mov
xchg
faddp
in
into
lods
sti
ficomp
or
sti
add
in
bound
xchg
cmps
cmc
mul
shl
pop
and
jecxz
sub
or
popf
out
aam
mov
push
ins
mov
mov
sbb
xor
jne
movs
les
add
retf
in
std
cmc
jecxz
xchg
les
mov
movs
pop
pusha
push
jge
mov
loope
add
fbstp
mov
and
adc
xor
mov
fabs
movd
push
mov
jb
(bad)
mov
push
mov
dec
popa
mov
pop
cli
int
mov
pushf
call
jmp
add
push
outs
ins
popa
jo
imul
ins
add
and
jecxz
int3
mov
mov
push
pushf
pushf
pushf
lea
jmp
cmp
pusha
jmp
call
add
inc
gs
ins
imul
je
daa
pop
inc
jg
mov
int
fild
jmp
jle
mov
in
idiv
sub
mov
(bad)
mov
xor
ja
test
lods
sar
mov
adc
push
add
push
outs
call
iret
adc
xchg
outs
lods
pop
les
jecxz
ins
fdivr
jmp
jmp
pop
ds
sub
xor
jg
mov
mov
popa
and
in
shr
dec
jno
fwait
xchg
inc
imul
adc
std
sub
sub
outs
adc
fsubr
in
or
in
inc
sahf
adc
xlat
retf
adc
mov
and
cmp
pushf
call
int3
int
fldcw
cmp
cli
fdiv
adc
lahf
push
sar
inc
cmp
popa
mov
clc
add
jne
jae
or
enter
fwait
and
mov
outs
das
fdivr
and
jnp
xchg
mov
test
out
adc
fnstsw
loopne
xlat
jne
fcmovnb
mov
and
and
jbe
popf
int
lea
push
cmps
jae
pop
xchg
(bad)
iret
test
bound
push
mov
mov
cdq
fdiv
rol
sub
mov
(bad)
lods
mov
and
mov
pop
inc
dec
push
and
push
scas
pop
into
add
push
gs
imul
addr16
js
add
push
gs
jae
addr16
add
out
adc
push
inc
dec
lahf
(bad)
out
dec
dec
or
sbb
inc
xor
ins
push
sub
adc
mov
jmp
ret
imul
adc
loope
enter
mov
lods
rol
(bad)
mov
adc
shr
xchg
in
das
pop
aas
mov
push
sub
pop
dec
movs
test
xchg
lods
cwde
test
scas
push
dec
or
mov
jbe
aam
inc
mov
sbb
aad
test
ins
cmp
xchg
jg
je
xor
jbe
push
pop
jl
mov
push
mov
mov
(bad)
lods
push
sbb
fadd
out
adc
std
add
adc
cmp
push
inc
dec
xor
dec
xor
retf
jne
xchg
or
sti
aas
sub
xor
and
pop
dec
scas
xchg
aad
ja
cmp
dec
cmp
cdq
push
pop
dec
aaa
mov
and
sti
retf
mov
add
je
outs
fs
gs
popa
outs
fs
gs
add
add
je
imul
outs
addr16
add
add
je
jb
gs
gs
jo
imul
inc
gs
imul
inc
add
test
(bad)
cli
jmp
mov
mov
fs
jmp
pusha
enter
or
stc
cmp
inc
sbb
sar
add
das
or
sbb
jns
mov
xor
outs
dec
jg
mov
test
lods
mov
aam
repz
xor
mov
ror
test
test
sbb
sub
jnp
jg
mov
ret
out
(bad)
in
xor
inc
xor
sub
inc
push
dec
pop
inc
jle
mov
inc
sbb
lea
pop
shr
adc
daa
outs
push
jne
jbe
jecxz
xlat
lock
inc
push
inc
push
in
pop
push
cmp
in
fdiv
fist
(bad)
out
or
test
dec
dec
addr16
dec
pop
dec
arpl
pop
xchg
cmp
sbb
jmp
pop
movs
dec
ja
(bad)
sub
or
fisttp
sub
mov
push
push
or
and
xor
xchg
jg
pushf
mov
pop
dec
outs
push
sub
data16
mov
cdq
repnz
or
pop
or
loope
sub
dec
cmp
mov
add
adc
cmp
and
pop
clc
popa
push
inc
cs
fcmovne
jmp
adc
mov
or
cmp
clc
mov
enter
cmps
xchg
shr
fld
push
sti
call
es
adc
mul
(bad)
sub
or
call
add
or
loop
cmp
arpl
cmps
cmc
out
add
std
add
sbb
sbb
shl
inc
imul
add
inc
ins
outs
bound
inc
gs
gs
inc
je
ins
add
add
ins
jo
jb
push
je
imul
inc
gs
ins
popa
jae
dec
popa
ins
gs
add
popf
call
add
dec
jne
je
inc
jns
gs
outs
push
imul
call
push
lea
jae
call
add
inc
gs
outs
ins
jns
imul
and
sbb
push
add
jns
add
mov
cmp
imul
mov
rcl
test
sub
push
daa
(bad)
int
xor
(bad)
push
into
cld
push
inc
pop
inc
jge
movs
xchg
dec
or
push
or
rcr
jo
dec
sub
push
bound
mov
xchg
xor
jp
jne
cmp
mov
ins
icebp
adc
xchg
stos
out
cmc
out
(bad)
ret
add
pop
std
je
into
pop
out
push
mov
jl
mov
bound
xor
pop
inc
fs
push
dec
xor
xor
icebp
jmp
xor
test
lods
dec
lods
ins
scas
sub
in
push
scas
xchg
stos
popf
jecxz
jmp
es
imul
inc
imul
bound
gs
add
loopne
add
rol
clc
or
pusha
pushf
lea
jp
pushf
lea
je
pusha
jmp
add
inc
push
imul
outs
ins
push
outs
imul
jae
jb
xor
fs
ins
add
add
jo
je
push
popa
addr16
add
inc
and
sub
and
call
add
push
gs
gs
jae
push
gs
popa
jo
outs
jb
add
mov
cli
call
jmp
call
pop
mov
and
jbe
js
mov
fcom
(bad)
cmp
inc
cs
mov
xchg
hlt
out
scas
popf
jp
and
repnz
cmp
and
push
inc
inc
cmp
jnp
nop
jle
outs
push
inc
nop
mov
push
xor
add
cmp
ins
cmps
xchg
into
(bad)
lahf
mov
mov
pop
and
pop
lahf
ret
shr
push
test
pusha
dec
cmp
loope
jne
loope
imul
test
adc
into
adc
sahf
mov
cmp
repz
inc
ss
test
aas
pusha
dec
pop
inc
mov
out
in
and
push
dec
dec
cs
push
aam
leave
mov
sub
sub
jnp
mov
push
mov
jae
pushf
in
call
adc
and
aaa
(bad)
je
sbb
sub
into
out
and
dec
test
sub
or
adc
repnz
sbb
sbb
sub
nop
mov
out
in
mov
pmaddwd
pop
outs
dec
outs
push
movs
xchg
repz
fnstcw
ret
cmp
mov
mov
or
je
mov
ins
movs
xchg
cmp
cli
out
adc
call
dec
mov
fadd
out
sub
push
inc
pop
inc
outs
inc
xor
mov
(bad)
adc
cld
sub
fistp
(bad)
cli
jmp
sahf
ret
sbb
add
sub
das
sbb
pop
aas
cdq
push
jg
xchg
ja
mov
sub
push
sbb
aas
es
cmp
in
mov
(bad)
mov
loope
fstp
and
dec
aaa
dec
cwde
mov
sub
fisub
mov
push
inc
push
aas
les
ins
test
mov
jmp
jecxz
adc
sbb
inc
aaa
gs
movs
popf
aam
ror
sar
lods
rcl
(bad)
retf
and
(bad)
retf
mov
sub
into
mov
in
adc
pop
pop
sbb
xchg
add
ins
jae
jb
outs
push
add
dec
xor
lea
mov
ins
cmp
test
rol
jmp
aaa
and
xchg
jg
mov
adc
cmp
jg
lea
in
cmp
stc
cmp
sbb
inc
pop
ins
push
mov
in
adc
sbb
vmptrld
popf
sub
or
sbb
retf
mov
arpl
mov
out
and
out
and
adc
ss
scas
sub
jno
gs
fcomi
cli
adc
outs
fnstcw
(bad)
sub
xchg
cmp
pop
or
cld
sbb
adc
pop
add
push
inc
mov
retf
jne
pusha
cmp
lock
ins
xor
jl
mov
xchg
add
push
imul
adc
add
stc
out
jecxz
and
push
gs
outs
jb
addr16
jne
fs
imul
sub
jne
(bad)
js
mov
dec
mov
ja
popf
loop
pop
std
sub
jl
mov
xlat
adc
mul
pusha
pop
inc
repnz
push
inc
add
fist
add
cwde
neg
push
mov
popf
and
inc
xor
(bad)
retf
sbb
xchg
xor
inc
xor
push
inc
outs
repz
sahf
hlt
data16
outs
fisub
dec
pop
add
js
cmp
push
pop
inc
pop
inc
outs
pop
dec
out
or
fidivr
loopne
dec
arpl
and
daa
fadd
xchg
int
out
ret
sar
and
and
push
or
pop
dec
imul
jecxz
jecxz
ror
neg
cmp
bsf
mov
bt
jmp
add
dec
outs
je
jb
arpl
arpl
je
or
cli
inc
add
fs
imul
lock
std
std
test
ds
js
jle
(bad)
leave
(bad)
in
and
pushf
mov
pop
fidiv
xor
and
cmp
jge
or
icebp
enter
and
aam
push
rol
fbld
adc
test
mov
xor
inc
(bad)
fbstp
in
xchg
push
ss
jne
fadd
fadd
fst
jmp
sbb
inc
fistp
imul
movs
mov
ret
stos
cli
fsub
adc
stos
mov
loop
cmp
fs
mov
enter
fistp
imul
sbb
aas
jl
jge
cld
out
(bad)
jb
out
fwait
add
or
cld
cmp
fscale
loope
ret
mov
neg
sub
sbb
popf
push
sahf
test
outs
movs
mov
pop
inc
pop
xchg
xlat
aas
and
movs
popf
mov
adc
(bad)
cmp
push
inc
xor
int3
in
push
addr16
adc
(bad)
pop
jmp
retf
call
dec
cmp
pop
sub
sub
loope
xchg
sub
cwde
xchg
inc
cld
dec
iret
dec
call
(bad)
mov
xor
(bad)
sar
sub
or
cmp
fsubr
xor
hlt
push
inc
add
xor
add
mov
add
mov
inc
popf
addr16
or
xor
mov
iret
mov
(bad)
in
push
mov
fnstenv
or
or
sbb
mov
push
or
jns
xlat
pop
inc
sub
cmc
(bad)
(bad)
inc
popf
test
outs
mov
or
test
lahf
sub
cmc
push
ficomp
aas
sar
dec
and
sbb
jbe
mov
push
and
bound
xchg
pop
mov
loop
repnz
add
jp
cmp
aad
adc
pusha
adc
mov
lock
push
ins
nop
jle
clc
loopne
pop
fmulp
in
enter
icebp
sar
stc
rcl
(bad)
loopne
add
stos
push
push
adc
icebp
xchg
mov
push
imul
sbb
pop
test
pop
aaa
adc
lock
movs
adc
punpckhbw
lods
(bad)
loop
and
popw
or
(bad)
push
ret
mov
in
repz
repz
xchg
push
dec
jp
mov
outs
mov
out
xor
ja
push
shr
(bad)
sti
fistp
push
push
inc
popf
mov
ins
lods
(bad)
and
jne
mov
(bad)
mov
jecxz
jo
lds
push
imul
dec
jb
inc
js
stc
push
pop
pusha
cmp
call
pop
mov
shl
loope
push
or
int
enter
push
(bad)
sub
dec
dec
addr16
jb
stos
xchg
bnd
sub
in
fldcw
repnz
or
cmp
pushf
psadbw
(bad)
hlt
jns
out
dec
pusha
cli
(bad)
cld
push
or
cli
ds
arpl
xor
(bad)
into
mov
(bad)
fdiv
in
cmp
in
out
cmp
int
shl
(bad)
cmps
dec
sub
popf
jb
adc
stc
pop
jnp
scas
xchg
mov
xor
cmp
cmps
mov
dec
mov
out
sub
pop
div
xchg
std
retf
scas
mov
es
mov
(bad)
mov
jmp
push
repnz
cli
sub
stos
ds
mov
loope
(bad)
lods
stos
call
and
xchg
mov
in
aam
mov
das
push
call
loope
pop
sbb
mov
aad
neg
std
cmp
jnp
jns
jg
jle
xchg
out
mov
out
mov
sbb
xchg
xor
popa
pop
loopne
ret
ror
(bad)
out
adc
dec
jg
mov
mov
sti
dec
lods
xchg
icebp
fisubr
loope
push
ins
push
cmp
or
push
or
pop
lahf
pop
push
sti
add
cli
das
sbb
call
jo
jle
push
sbb
aas
sbb
arpl
sub
push
ja
lods
(bad)
lods
cwde
test
jp
jg
mov
das
les
cli
repz
ja
pop
xlat
mov
sbb
nop
xor
sbb
arpl
loope
cmp
nop
cwde
mov
fadd
rol
ret
mov
int3
fcmove
leave
mov
lods
mov
test
xor
sbb
cld
hlt
addr16
loop
inc
aaa
js
test
imul
xchg
test
pop
sub
retf
sub
mov
jmp
fs
cmp
adc
xchg
cmp
fs
arpl
dec
outs
push
pop
inc
jnp
call
mov
xor
outs
push
add
inc
gs
dec
inc
imul
out
push
pop
je
mov
scas
mov
inc
push
cmp
cmps
xchg
ret
lods
aam
cmc
fcomp
sub
push
inc
dec
xor
outs
push
jle
xor
es
sbb
mov
test
adc
mov
loopne
aaa
sub
and
sub
xor
xchg
mov
sub
push
popa
fist
sti
and
push
dec
mov
pop
xchg
cli
fst
das
sbb
out
sub
and
mov
imul
mov
(bad)
ja
dec
sub
jge
mov
(bad)
test
aas
sub
pop
nop
jge
(bad)
jle
pop
cmps
xchg
sub
gs
xchg
sub
push
add
sbb
std
adc
and
test
add
jbe
push
outs
inc
js
add
inc
gs
ins
popa
jae
dec
outs
outs
inc
add
add
jbe
inc
imul
imul
jo
gs
jb
dec
gs
fs
mov
mov
pushf
pushf
pushf
push
lea
jmp
add
push
gs
imul
js
inc
add
push
cli
jmp
scas
xchg
stos
(bad)
fdivr
sub
je
mov
(bad)
in
ffree
loope
int
sti
ficomp
add
out
adc
or
fnsave
push
pop
sbb
or
scas
pop
and
and
icebp
add
jge
mov
jmp
adc
mov
push
xchg
enter
cli
out
outs
push
cmps
mov
add
rol
clc
jmp
imul
cmp
push
bound
sub
shl
xor
pop
or
dec
inc
out
add
dec
cmp
cdq
loope
ret
sbb
push
cmp
sti
fwait
inc
push
pop
cli
repz
xor
loopne
cmp
fwait
cmp
imul
ror
cld
in
add
add
ds
jnp
xchg
test
or
sbb
out
hlt
sbb
clc
sub
push
cmp
dec
sub
push
movs
xchg
iret
mov
mov
jecxz
(bad)
adc
clc
imul
pop
sbb
dec
fimul
stc
daa
inc
div
mov
js
cwde
adc
mov
jmp
cmps
mov
sub
jp
test
retf
dec
xor
mov
aad
fmul
mov
outs
jno
repz
push
jge
mov
ja
fwait
inc
jb
mov
xchg
sar
cmp
mov
clc
jge
pop
ds
pop
xchg
test
mov
xlat
ret
dec
push
xchg
stos
loopne
in
les
cmp
pop
pushf
adc
xchg
xor
inc
push
sti
xor
push
sub
fst
push
mov
mov
enter
(bad)
aam
repnz
pop
ja
inc
ds
(bad)
loope
lds
retf
stos
xchg
fmul
sbb
into
mov
mov
fs
movs
pushf
icebp
in
sbb
rcr
push
inc
sub
stc
cld
(bad)
mov
test
mov
xchg
in
test
cli
sbb
push
cld
sbb
adc
retf
cmp
pushf
lea
ja
movzx
not
push
call
mov
jmp
call
add
test
bt
mov
call
add
push
gs
outs
jne
dec
gs
add
test
ret
sub
sub
pushf
push
push
push
lea
je
clc
jmp
add
push
gs
fs
imul
ins
outs
arpl
imul
mov
pushf
pushf
push
dec
clc
cmc
clc
not
cmp
bt
xor
push
mov
jmp
mov
lea
jae
pusha
cmc
sub
mov
pusha
call
call
stc
setp
bsr
sub
add
cwde
mov
add
call
pushf
call
add
push
dec
inc
gs
jo
arpl
ins
inc
outs
ins
fs
popa
je
inc
add
(bad)
push
pop
movzx
cwde
call
add
inc
gs
gs
inc
js
outs
je
outs
imul
add
push
gs
gs
gs
dec
gs
add
cld
inc
mov
cmps
ret
cli
inc
add
je
ins
imul
inc
popa
je
add
add
je
outs
jns
jne
jae
jb
mov
jmp
add
dec
outs
je
jb
outs
arpl
fs
outs
arpl
ins
outs
je
push
pushf
mov
pusha
push
lea
call
call
add
ins
imul
ins
inc
ins
outs
jae
add
add
push
imul
cwde
or
lea
jmp
clc
jmp
call
mov
call
mov
mov
jmp
mov
jmp
push
push
mov
jmp
push
mov
mov
lea
jne
rol
shr
mov
clc
pushf
and
call
pushf
push
lea
jne
clc
shld
xor
mov
movsx
bswap
jmp
repz
pop
or
mov
test
xchg
rol
mov
xchg
bsf
push
pop
jmp
call
xor
rol
stc
adc
add
pushf
movzx
lea
lea
lea
mov
lea
jmp
pusha
push
pop
pushf
push
push
lea
jmp
call
push
pusha
fild
pusha
lea
jmp
jmp
jmp
add
cmp
push
cmc
clc
neg
pushf
not
push
bt
add
push
mov
jmp
pushf
lea
cpuid
pushf
mov
mov
sub
stc
cmp
call
mov
push
lea
jmp
push
mov
pushf
push
push
jmp
jmp
stc
test
add
pusha
pushf
pop
pusha
push
push
pop
mov
pushf
pushf
lea
jmp
sub
jle
push
pusha
sub
pushf
mov
push
mov
lea
jmp
mov
mov
pushf
pop
pushf
push
call
pusha
call
not
neg
movsx
mov
push
bt
mov
sub
mov
pushf
call
xadd
btc
clc
mov
cmc
call
push
pop
push
lea
jmp
mov
jmp
mov
mov
pushf
shl
and
mov
mov
pushf
jmp
push
not
dec
setne
movsx
cmc
ror
mov
shl
pusha
not
neg
shld
pushf
clc
xor
sbb
btc
inc
mov
jmp
push
mov
mov
mov
pusha
push
pushf
lea
jmp
call
call
clc
stc
clc
stc
sub
push
pusha
pushf
add
push
sub
call
mov
call
bsr
btc
cmp
mov
test
jmp
mov
pushf
push
mov
mov
lea
jmp
sub
jmp
mov
call
pushf
mov
call
pushf
xchg
call
push
mov
mov
push
lea
jmp
mov
stc
add
mov
mov
mov
mov
pushf
pusha
pushf
lea
jmp
jmp
inc
aas
daa
bts
fnstsw
test
pushf
pusha
sub
call
mov
push
lea
jb
pusha
mov
mov
jmp
jmp
pushf
fchs
pushf
lea
jmp
jmp
bt
push
add
pushf
neg
push
pusha
call
mov
pushf
mov
jmp
mov
bt
cmp
call
and
push
call
pusha
xchg
bt
push
call
sub
not
xor
pushf
bswap
add
lea
movzx
lea
push
lea
pushf
pushf
push
pushf
lea
jmp
pushf
push
push
fdiv
mov
pushf
pusha
mov
lea
jmp
mov
push
push
lea
jmp
pushf
pushf
push
fstp
pusha
push
lea
jmp
call
mov
pusha
pushf
mov
jmp
pushf
pushf
pop
jmp
push
pop
rcr
bsr
mov
mov
btr
movsx
mov
bts
clc
shr
sub
xor
bts
not
xor
mov
sar
bswap
add
jmp
jmp
shr
xor
setp
sub
mov
stc
call
mov
mov
pushf
pushf
lea
jmp
push
call
mov
jmp
pusha
shr
jmp
push
pushf
lea
ja
movzx
movzx
push
xchg
lea
shl
lea
add
btc
clc
bt
sub
aas
lea
clc
and
rcr
not
test
test
sub
pop
movzx
pushf
movzx
mov
bswap
push
mov
jmp
not
dec
mov
test
test
bt
stc
bswap
test
sub
jmp
mov
movsx
repz
pop
cmp
movsx
cmp
rcr
mov
or
adc
xchg
rcl
rcr
not
movzx
push
pop
lea
bt
sub
mov
pushf
bts
mov
bsr
push
sub
sar
sub
xor
mov
pushf
add
mov
lea
pushf
mov
lea
jmp
jmp
pusha
jmp
mov
push
pushf
lea
jmp
pusha
mov
jmp
aas
shld
sub
mov
rol
mov
stc
add
push
pusha
push
mov
mov
pushf
lea
jmp
sub
push
cmc
shr
mov
mov
mov
mov
push
jmp
sar
shld
movzx
sbb
rcl
ror
xor
pusha
pushf
dec
bswap
rcl
lea
lea
pop
ror
shl
ror
bts
not
call
add
rcl
movzx
clc
lea
mov
jmp
mov
pusha
pushf
mov
pushf
lea
jmp
xor
push
rcr
push
mov
bsr
add
ror
shr
sbb
call
mov
movzx
pop
pusha
repz
pop
cmp
mov
shrd
btc
cmc
shl
xchg
call
bsr
clc
ror
sbb
movzx
call
jmp
push
pushf
mov
pop
pop
repz
pop
shld
shrd
shl
mov
test
cmc
xchg
jmp
cmc
push
pop
jmp
call
jmp
push
sub
cmc
cmc
pushf
neg
pushf
push
sub
call
call
mov
call
fadd
pushf
lea
jmp
cld
cld
cld
lea
jle
pusha
rep
cmp
bsf
dec
mov
not
adc
stc
rol
mov
push
push
popf
push
mov
lea
jmp
call
cmp
sub
cmc
add
jmp
jmp
mov
bswap
repz
pop
sar
clc
xchg
neg
xor
lea
dec
mov
add
push
pop
rcr
push
movsx
pushf
bsf
xchg
mov
shr
rcr
pusha
rol
sub
setnp
push
shl
add
xor
lea
or
shrd
rcl
add
lea
lea
sub
rcl
push
xchg
sub
xadd
mov
bt
rcl
lea
mov
btr
shl
add
bsf
setbe
add
movsx
mov
bswap
pusha
add
pushf
movzx
movsx
dec
bt
bts
lea
ror
shrd
bswap
not
neg
btc
jmp
adc
cmp
adc
pushf
mov
neg
shr
dec
mov
clc
stc
sub
push
pusha
cmp
shl
call
rcr
mov
pushf
bts
cmc
call
jmp
mov
pushf
mov
mov
bswap
push
pushf
repz
pop
clc
dec
mov
rcl
bsr
xchg
add
push
pop
lea
add
inc
stc
mov
mov
mov
inc
pusha
mov
rol
pushf
rcl
sub
not
xor
test
shrd
clc
pushf
add
call
call
lea
je
pushf
cmc
push
sub
push
xchg
bt
mov
pusha
cmc
bt
sub
pushf
pushf
pushf
lea
jne
stc
bt
xor
call
repz
pop
sub
bts
mov
bts
or
shr
mov
clc
not
push
pop
call
mov
mov
jmp
jmp
push
pushf
pop
mov
push
pop
pushf
pushf
pushf
lea
jmp
push
mov
jmp
bswap
bswap
lea
pusha
pushf
pushf
lea
jmp
bts
or
adc
aaa
mov
cmp
pushf
add
push
mov
mov
call
push
jmp
mov
push
push
pushf
pushf
mov
lea
jnp
pushf
pushf
lea
jne
shld
mov
bt
call
push
push
pusha
mov
push
mov
bswap
pop
repz
pop
xor
cmc
xor
mov
sbb
bsr
sbb
sub
mov
movsx
cmc
push
pop
cmc
rcr
and
mov
shld
mov
add
cmc
not
rol
sub
btr
test
test
bsr
xor
bswap
jmp
jmp
mov
jmp
call
pusha
jmp
call
add
call
pusha
mov
mov
call
jmp
call
pushf
mov
mov
mov
pushf
push
pusha
call
neg
movzx
stc
add
pusha
stc
clc
add
cmc
bt
push
cmc
ror
pusha
jmp
jmp
pushf
jmp
call
mov
pushf
push
push
mov
mov
push
lea
jle
pushf
pushf
push
pop
push
lea
jmp
dec
call
jmp
call
add
clc
neg
call
pushf
push
pusha
mov
jmp
rep
bts
mov
sub
pop
xor
and
mov
stc
call
bswap
lea
mov
lea
jmp
lea
jmp
push
pop
cmp
jmp
jmp
push
pop
pushf
push
mov
lea
jmp
push
mov
mov
pusha
call
push
push
call
jmp
mov
pushf
pusha
jmp
push
xchg
movzx
ror
push
pop
cmc
mov
neg
bsf
movsx
mov
lea
sub
add
movsx
and
xor
cmc
add
jmp
lea
mov
jmp
sub
cmp
mov
test
jmp
pushf
pop
push
jmp
div
call
call
pushf
mov
movzx
mov
mov
lea
repz
pop
neg
pushf
call
mov
btc
xadd
inc
cdq
mov
bsr
das
neg
mov
push
or
xor
push
popf
cwde
cdq
xchg
mov
setp
not
not
mov
jmp
pusha
mov
call
rol
mov
sub
push
neg
mov
cmc
add
mov
call
pushf
pushf
pop
pushf
jmp
lea
jne
shl
btc
xor
pushf
pusha
bswap
not
mov
push
mov
pushf
lea
jmp
jns
push
pusha
mov
push
pushf
call
push
pop
mov
mov
mov
mov
lea
jmp
cmp
mov
xor
sbb
sub
cmp
xor
pop
pop
bts
bt
add
bswap
pusha
call
call
jmp
jmp
cmc
test
cmc
mov
jmp
pushf
call
mov
mov
jmp
jmp
daa
pushf
rdtsc
test
add
jae
stc
clc
sub
call
jmp
pusha
pushf
mov
pushf
pushf
pushf
call
not
lahf
pusha
mov
call
bt
call
cmp
call
call
call
pusha
pushf
mov
mov
mov
pushf
pushf
pushf
pushf
mov
pushf
jmp
mov
pushf
pop
push
call
pusha
jmp
mov
mov
pusha
lea
jmp
push
push
call
lea
setp
jmp
mov
call
lea
push
push
lea
jmp
pushf
mov
not
movsx
mov
call
mov
add
bsr
sub
neg
xor
shld
rol
xor
add
jmp
call
mov
push
push
ret
shld
xchg
mov
mov
mov
btc
shld
sub
lea
sub
shrd
not
xor
or
add
movzx
movsx
movsx
lea
mov
lea
jmp
mov
push
mov
push
push
lea
jmp
pusha
pusha
add
pushf
dec
mov
cmc
add
cmc
bt
push
ror
sub
jp
sub
push
add
clc
clc
bt
sub
call
mov
pushf
push
pushf
pop
call
mov
pushf
mov
mov
pushf
jmp
mov
jmp
pushf
push
mov
jmp
and
jmp
not
jmp
shl
push
pop
lea
pop
mov
or
neg
and
stc
mov
test
sub
cmc
movsx
inc
jmp
pushf
pusha
mov
jmp
cmc
call
ftst
pushf
push
mov
lea
jmp
pushf
test
sub
pusha
mov
mov
pusha
mov
mov
mov
pushf
lea
jmp
call
pushf
pop
pushf
push
call
jmp
mov
call
push
pop
push
mov
pushf
lea
jmp
sub
bts
inc
lea
jmp
push
push
mov
pusha
mov
mov
jmp
sar
mov
mov
neg
mov
test
test
add
push
call
bsf
bt
mov
cmp
test
sub
pusha
call
pusha
pushf
add
test
pusha
clc
mov
push
popf
push
mov
lea
jmp
rol
cmc
jmp
push
fcomp
push
lea
jmp
call
jmp
mov
push
pusha
mov
mov
call
push
mov
fld
push
mov
pushf
push
lea
jmp
bt
stc
mov
pushf
clc
push
test
sub
push
pusha
call
pushf
mov
jmp
jmp
pushf
push
pushf
mov
call
mov
mov
mov
dec
pushf
push
push
mov
push
push
mov
push
ret
cmp
push
pushf
add
call
stc
push
sub
jmp
jmp
push
cmp
jmp
pusha
push
mov
pushf
pusha
mov
pushf
jmp
setge
test
mov
pusha
call
jmp
mov
pushf
pusha
mov
mov
call
rcl
bsr
mov
bsf
mov
shld
sub
bts
xor
shl
rcr
cmc
add
add
lea
pushf
movsx
lea
push
lea
jmp
call
mov
pushf
push
lea
jmp
shl
sbb
mov
push
mov
cmp
push
clc
test
sub
jmp
pushf
push
mov
push
pusha
mov
movzx
mov
jmp
mov
mov
lea
jmp
bt
test
bsr
shl
mov
test
test
push
add
call
pop
pusha
pusha
pushf
lea
jmp
mov
cmp
call
mov
mov
not
mov
push
movsx
mov
mov
push
pushf
push
ret
push
pusha
mov
push
pushf
mov
mov
lea
jmp
sbb
rcr
sar
mov
cmc
stc
add
jmp
and
mov
inc
das
daa
rcr
pop
call
call
mov
push
lea
jo
jne
shrd
mov
jmp
call
push
pusha
not
stc
jmp
mov
mov
jmp
pushf
pushf
mov
pushf
xchg
pushf
repz
pop
sar
mov
shrd
dec
rcr
sub
xchg
push
bt
jmp
add
jb
cmc
clc
sub
pusha
pusha
pushf
lea
jmp
call
call
push
pushf
jmp
mov
call
and
and
setb
btc
mov
dec
mov
pusha
stc
push
add
pushf
mov
push
lea
jb
mov
pusha
lea
jmp
shld
rcr
rcl
shl
mov
or
pushf
jmp
mov
mov
push
push
lea
jmp
and
cmp
cmp
pushf
lea
jne
jmp
add
add
xchg
mov
mov
bswap
movzx
repz
pop
stc
shl
mov
inc
pusha
xchg
test
shl
inc
push
pop
bts
pushf
ror
mov
xadd
mov
mov
add
ror
sub
bt
call
mov
pushf
push
mov
lea
jmp
repz
pop
and
mov
sar
xchg
rcl
add
rol
movsx
push
pop
rcl
neg
mov
sar
mov
btr
call
mov
mov
call
lea
mov
pushf
mov
push
push
lea
jmp
pushf
pushf
mov
jmp
pusha
mov
mov
push
jmp
add
mov
push
call
push
pop
mov
mov
push
lea
jmp
mov
push
xchg
bswap
push
mov
repz
pop
mov
rol
shr
mov
adc
rcl
xchg
dec
bts
push
pop
bts
mov
adc
mov
mov
movzx
adc
ror
sub
rcr
bsr
shr
xor
shrd
btr
sbb
add
movsx
lea
pushf
lea
jmp
xchg
pushf
call
mov
pusha
call
push
call
mov
push
pushf
mov
mov
pushf
pusha
push
jmp
lea
jmp
mov
mov
mov
mov
lea
jmp
jmp
push
pushf
mov
pushf
mov
mov
mov
mov
push
mov
pusha
xchg
lea
bswap
movsx
repz
pop
shld
mov
and
shl
shr
ror
xchg
neg
push
pop
adc
and
bts
inc
mov
not
cmc
jmp
call
push
pushf
pop
jmp
pushf
lea
call
jmp
push
pushf
xchg
call
push
pop
pushf
push
lea
jmp
mov
call
lea
jb
pushf
mov
call
pushf
mov
push
mov
xchg
lea
movzx
bswap
lea
repz
pop
rcr
adc
btr
cmp
mov
cmc
xchg
xchg
add
push
pop
rcr
and
shld
mov
clc
call
call
call
add
bt
test
test
push
cbw
test
cwde
stc
test
pushf
sub
stc
clc
mov
jmp
jmp
shrd
btr
mov
mov
cmp
sub
jmp
pushf
push
pop
push
lea
jmp
cmp
xor
neg
sar
and
mov
test
call
pusha
shrd
push
call
push
not
bt
call
pushf
pop
pushf
push
jmp
mov
jmp
pushf
push
mov
mov
push
mov
mov
call
pushf
mov
mov
push
mov
mov
mov
jmp
push
pusha
push
mov
push
mov
call
add
not
lea
mov
lea
jmp
mov
mov
pusha
pusha
call
mov
push
pop
pushf
pusha
push
lea
jmp
add
push
mov
pushf
call
xchg
pop
repz
pop
bswap
mov
bt
shl
bt
xchg
and
push
pop
stc
shr
mov
sub
neg
sar
add
mov
bt
bsr
sub
shl
or
bt
test
xor
clc
lea
jg
add
rcl
add
call
call
add
btr
lea
movzx
btr
ror
seto
xor
bts
sub
test
neg
pusha
add
push
dec
test
rcr
mov
movzx
test
pushf
mov
test
cmp
call
cmc
call
mov
push
pop
pushf
pusha
push
mov
lea
jmp
push
call
jmp
mov
mov
mov
pusha
push
push
mov
push
call
mov
xor
pushf
not
call
movsx
neg
mov
clc
dec
call
push
and
pusha
jmp
das
movzx
pushf
mov
bt
call
call
mov
pushf
mov
mov
jmp
push
mov
lea
ja
rep
not
pushf
clc
movzx
mov
inc
shld
shrd
mov
cld
push
popf
mov
pusha
mov
lea
jmp
ror
cmc
add
jmp
pushf
cmp
jmp
mov
push
lea
jmp
std
push
popf
pushf
pushf
lea
jmp
pusha
pushf
pushf
pop
call
jmp
mov
pushf
pusha
push
mov
push
pushf
lea
jmp
rol
mov
shl
mov
stc
cmp
not
cmp
pushf
push
cmp
not
test
and
jmp
jmp
dec
mov
btr
call
pushf
pop
mov
movzx
lea
push
cld
call
call
rcr
shl
cmp
mov
push
add
mov
push
lea
jmp
mov
push
mov
call
push
not
movsx
mov
pusha
push
call
pushf
mov
mov
pusha
pushf
push
ret
sub
bsf
xor
not
bsr
bsr
sub
btc
cmc
bt
ror
bswap
bsf
rcr
or
sub
pusha
mov
pusha
mov
dec
cmp
add
mov
pushf
push
mov
pushf
mov
mov
mov
lea
jmp
test
sub
bt
push
bt
mov
bt
stc
stc
sub
jmp
repz
pop
rcl
add
rcr
btr
mov
jmp
cmc
cmp
sub
pusha
stc
stc
ror
call
push
jmp
jmp
not
movzx
movsx
mov
rcr
stc
add
setb
push
not
jmp
fld
pushf
lea
jmp
ror
bt
sbb
not
sar
xor
movzx
rcr
shl
mov
stc
push
clc
sub
call
mov
pusha
jmp
add
neg
add
ror
neg
push
rcl
not
add
bsr
add
inc
sbb
cmp
mov
call
push
mov
mov
call
call
shl
shl
mov
jmp
call
pushf
jmp
cmp
pushf
push
lea
jne
bsr
rol
xor
push
pusha
mov
push
push
pushf
lea
jmp
add
call
mov
mov
mov
push
mov
jmp
ror
and
bts
xor
bswap
call
stc
sub
mov
mov
pushf
push
pushf
pushf
lea
jmp
jmp
mov
jmp
call
mov
pushf
mov
mov
call
mov
jmp
jmp
pusha
call
mov
pushf
lea
jmp
call
test
clc
cmp
shl
jmp
xchg
not
not
push
pusha
movsx
mov
movsx
mov
not
mov
seto
bswap
setb
pushf
mov
movzx
pop
jmp
call
mov
mov
mov
call
call
lea
pushf
push
lea
jmp
jmp
stc
rcl
clc
bswap
mov
adc
rcr
mov
stc
jmp
call
mov
mov
push
mov
lea
jmp
call
call
inc
mov
setp
mov
cmp
add
call
not
test
cmc
clc
push
add
add
jg
stc
pushf
mov
bt
push
stc
push
sub
call
movsx
das
test
mov
add
bswap
btr
bsf
mov
jmp
push
mov
call
pushf
mov
pushf
jmp
shrd
mov
bt
jmp
mov
pushf
pop
push
push
pop
push
pushf
pushf
lea
jmp
pushf
jmp
add
add
jmp
mov
xchg
mov
sub
neg
mov
cmc
cmc
clc
add
call
stc
bt
add
pusha
pusha
mov
push
push
lea
jmp
xadd
adc
adc
mov
or
jmp
pop
pushf
movsx
repz
pop
and
stc
rcl
cmc
mov
movsx
and
rcr
mov
pusha
bts
sub
push
pop
xchg
call
jmp
mov
mov
repz
pop
dec
mov
cmp
jmp
cmc
imul
jmp
pushf
mov
pushf
mov
jmp
test
pusha
sub
pushf
pusha
mov
mov
mov
lea
jmp
mov
push
mov
mov
call
push
mov
mov
mov
push
mov
pushf
mov
lea
ja
push
push
jmp
call
lea
push
mov
mov
lea
jmp
call
call
cmc
clc
call
not
bswap
mov
pushf
mov
push
pushf
mov
push
mov
pushf
lea
jmp
xor
jmp
jmp
clc
cwde
mov
jmp
lea
jno
pusha
push
pop
mov
lea
jmp
mov
mov
jmp
pop
call
mov
pusha
mov
mov
pusha
push
mov
mov
pushf
call
call
jmp
jno
pushf
pusha
push
mov
mov
pushf
mov
push
lea
jmp
mov
sub
jmp
call
call
stc
test
sub
call
setge
movsx
pushf
mov
call
push
push
pushf
mov
push
call
shr
shl
movzx
jmp
jbe
push
pushf
mov
call
mov
pushf
jmp
mov
pushf
pusha
lea
jmp
pushf
lea
push
pushf
mov
lea
jmp
call
inc
clc
cwd
mov
not
mov
pusha
jmp
stc
clc
pushf
sub
call
push
call
add
cmc
cmc
cmp
sub
push
mov
pusha
pushf
lea
jmp
jmp
dec
stc
mov
stc
or
pushf
mov
jmp
pushf
mov
mov
pusha
pushf
push
call
add
call
pop
pusha
lea
jmp
mov
pushf
repz
pop
btc
btr
shl
mov
movzx
mov
call
pushf
mov
mov
push
pushf
call
mov
pushf
lea
jmp
jmp
rcl
mov
sar
rol
mov
call
pushf
push
pop
mov
mov
mov
pushf
lea
jmp
mov
call
push
mov
mov
pusha
lea
jmp
jmp
mov
not
call
pushf
pushf
pop
mov
push
pop
pushf
pusha
push
lea
jmp
jmp
mov
mov
jmp
xchg
pushf
jmp
and
mov
rol
cmp
add
sub
neg
pushf
xor
neg
movzx
or
add
lea
lea
pushf
pushf
lea
jmp
xor
bsr
adc
xor
add
not
lea
mov
lea
jmp
pushf
mov
lea
jne
pusha
pusha
mov
push
pushf
stc
and
mov
cmp
cmc
test
cmp
call
pushf
pop
call
mov
mov
pusha
lea
jnp
push
push
mov
push
push
ret
btc
shr
mov
bt
adc
push
pop
bts
mov
bt
btr
mov
btc
shl
movzx
neg
sub
rcr
xor
sbb
add
movzx
jmp
clc
ror
cmc
add
jmp
add
mov
btc
mov
and
push
sub
btr
pusha
mov
bswap
sar
test
mov
test
shl
bt
sub
rcl
lea
jmp
movzx
rol
setno
bsr
jle
xor
movsx
inc
not
pusha
lea
push
mov
movzx
dec
dec
clc
call
mov
push
push
mov
lea
jo
pushf
mov
pusha
pusha
pushf
mov
call
jmp
inc
mov
push
jmp
xor
rol
ror
push
sbb
add
bswap
pop
lea
pusha
lea
jmp
call
pushf
pusha
fmul
push
lea
jmp
bt
clc
add
mov
add
lea
jae
pushf
mov
pushf
pushf
lea
jmp
sub
test
push
clc
and
push
jmp
pusha
mov
pushf
push
pushf
lea
jmp
push
push
push
mov
mov
push
mov
pushf
pushf
jmp
mov
push
pushf
lea
jmp
jmp
pusha
mov
pushf
pushf
jmp
fsub
push
lea
jmp
pusha
pusha
mov
call
add
mov
pushf
mov
jmp
jmp
bts
mov
shrd
mov
shrd
rcr
sub
shrd
mov
xor
xor
bswap
neg
add
pop
pusha
lea
mov
pushf
push
lea
jmp
pusha
neg
mov
stc
lea
jl
sub
push
shl
jmp
sub
cmc
stc
call
push
pushf
mov
jmp
pusha
fild
pushf
mov
pusha
mov
lea
jmp
stc
rcr
mov
xor
call
cmc
stc
rol
clc
mov
test
jmp
push
pusha
mov
jmp
pushf
mov
mov
pushf
pushf
push
lea
jmp
mov
mov
repz
pop
ror
neg
mov
shl
mov
shr
shrd
dec
push
pop
btc
dec
bts
rol
mov
pusha
shrd
mov
not
push
pushf
sub
call
mov
push
push
push
mov
lea
jmp
pushf
mov
mov
mov
pusha
lea
jmp
sub
pushf
stc
shl
pusha
pushf
push
mov
jmp
push
pop
mov
mov
mov
lea
jmp
push
lea
push
mov
mov
pusha
mov
pushf
lea
jmp
pusha
mov
pushf
pop
call
lea
push
lea
jmp
clc
call
push
add
pushf
call
sub
push
mov
pushf
pushf
lea
jmp
btc
mov
setle
seta
add
pushf
call
aad
not
neg
bswap
aad
mov
pusha
sub
call
not
jmp
mov
call
mov
jmp
rcl
bt
lea
push
pop
and
cmc
shl
mov
mov
mov
stc
xor
sub
btr
mov
rcr
bts
xor
push
push
add
movzx
pop
lea
pushf
push
push
lea
jmp
test
shld
push
pusha
pushf
jmp
push
pusha
pusha
mov
call
or
rol
movzx
stc
push
xchg
call
pushf
call
call
and
(bad)
xor
and
(bad)
xor
adc
cmp
adc
aas
and
xor
adc
sbb
adc
sbb
adc
and
adc
and
xchg
sbb
adc
and
adc
and
(bad)
cmp
adc
sbb
adc
and
adc
adc
sub
adc
and
pusha
and
adc
daa
and
jecxz
and
stc
cmp
adc
sbb
adc
cmp
adc
cmp
adc
and
adc
adc
sub
adc
and
adc
aaa
and
mov
and
lods
xor
adc
sbb
adc
cmp
adc
xor
adc
and
scas
sbb
adc
and
push
daa
and
leave
xor
adc
and
adc
xor
adc
xor
adc
xor
adc
xor
adc
and
(bad)
das
and
lods
aaa
and
mov
and
lahf
sub
adc
and
iret
aas
and
xor
and
leave
sbb
adc
and
jle
and
iret
sbb
adc
pop
and
stc
sub
adc
adc
inc
and
les
and
ret
sub
adc
inc
and
fiadd
adc
and
jns
and
xchg
sub
adc
and
ret
adc
and
inc
xor
and
mov
and
ret
adc
sbb
adc
sbb
adc
and
adc
and
lods
aaa
and
add
and
movs
xor
adc
and
xor
and
js
and
clc
cmp
and
cmps
sbb
adc
cmp
adc
and
adc
and
adc
sub
adc
and
adc
and
div
and
push
pop
and
pop
and
mov
scas
pop
and
stc
push
and
cmps
sub
adc
sub
adc
and
(bad)
cmp
adc
and
jns
and
mov
and
and
pop
and
adc
adc
xor
and
adc
and
fbld
adc
cmp
adc
and
adc
sub
adc
sub
adc
cmp
and
(bad)
cmp
adc
and
jle
and
mul
and
aaa
cmp
adc
and
adc
sub
adc
and
xor
and
das
and
and
retf
adc
aas
and
xor
and
imul
and
div
adc
and
fdivr
and
dec
sub
adc
and
jle
and
dec
xor
adc
and
adc
adc
and
adc
pop
and
or
and
jp
and
inc
sub
adc
adc
cmp
adc
and
jns
and
outs
xor
and
stos
pop
and
or
and
jle
and
int3
xor
adc
sub
adc
adc
inc
and
scas
pop
and
pop
cmp
adc
cmp
adc
cmp
adc
cmp
adc
sbb
adc
and
jecxz
and
retf
adc
inc
and
pushf
sbb
adc
xor
adc
cmp
adc
cmp
and
icebp
cmp
adc
cmp
and
push
cmp
adc
and
idiv
and
outs
sbb
adc
pop
and
pop
sub
adc
cmp
adc
cmp
adc
sub
adc
and
adc
xor
adc
and
adc
sub
adc
adc
adc
and
push
cmp
adc
and
and
mov
cmp
adc
cmp
adc
xor
adc
and
add
and
xor
and
jecxz
and
icebp
xor
and
les
and
js
and
scas
jmp
call
mov
mov
call
mov
call
mov
xchg
movzx
repz
pop
test
mov
pushf
sar
mov
bt
push
pop
btr
cmp
mov
movzx
mov
lea
bts
bswap
mov
ror
bswap
rol
bt
sub
pop
movsx
cmp
xor
and
rcr
clc
add
mov
bswap
movsx
pop
lea
mov
push
mov
mov
lea
jmp
or
push
jmp
sub
pusha
call
bts
xor
movzx
pushf
stc
add
not
mov
bswap
lea
push
mov
mov
lea
jmp
mov
jmp
cmc
shr
pushf
call
bt
jmp
pushf
pusha
pusha
mov
mov
lea
jmp
jmp
