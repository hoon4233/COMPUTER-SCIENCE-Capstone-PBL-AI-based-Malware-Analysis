and
mov
adc
out
in
dec
cmp
cmp
xchg
and
dec
add
sbb
or
repnz
sbb
jnp
and
xor
cmp
xchg
pop
cmp
cvtpi2ps
outs
ins
imul
jno
mov
sub
or
sbb
aad
adc
pop
pop
ds
popa
inc
leave
adc
repz
inc
push
pop
fmul
mov
fmul
fistp
cli
popa
fbld
nop
pop
mov
enter
xor
push
lods
push
mov
mov
mov
enter
sbb
leave
or
or
enter
sbb
xor
nop
ja
inc
ja
cmp
mov
imul
int3
iret
jl
loopne
mov
imul
mov
sub
mov
frstor
adc
sbb
rol
mov
push
je
mov
add
cmps
gs
sub
or
xor
pop
adc
pop
cmc
rcl
mov
(bad)
enter
xchg
(bad)
fidivr
sub
shl
inc
jae
fdiv
neg
dec
enter
pop
xor
inc
sub
dec
icebp
scas
loope
xor
xchg
das
cwde
les
xor
retf
sbb
push
xor
and
mov
pop
loop
fdivr
fstp
cli
xor
pushf
pushf
sahf
mov
cwde
inc
pop
xchg
mov
(bad)
lods
cmps
and
add
or
mov
dec
dec
xchg
inc
out
xchg
sub
(bad)
pop
stc
xchg
mov
xchg
fcom
sub
int
leave
movs
sbb
inc
cmps
mov
daa
fisttp
dec
jo
adc
cmp
push
cmp
gs
rol
loop
pop
mov
test
adc
inc
cli
into
mov
add
mov
cmp
ror
cmp
xchg
rcl
ins
(bad)
shl
test
imul
div
xchg
add
sub
xor
dec
mov
or
ds
or
fisttp
int3
or
add
ret
ror
pop
imul
cmp
inc
pop
lock
dec
sbb
push
adc
dec
mov
out
mov
pop
not
std
xor
data16
sub
sub
xor
mov
hlt
mov
sub
sbb
add
ins
sbb
enter
xor
scas
aam
inc
push
jmp
retf
xchg
sub
(bad)
xor
push
pop
cmps
mov
jmp
or
dec
in
dec
(bad)
std
sub
shl
dec
arpl
sbb
lahf
inc
mov
jmp
mov
sbb
jl
jle
ret
pop
or
ficomp
scas
add
or
cmps
adc
dec
out
mov
rcl
inc
jle
cld
mov
sbb
fs
mov
add
rcl
adc
jecxz
iret
cs
mov
fdivr
add
and
xor
adc
mul
ja
lds
push
mov
jbe
js
mov
scas
cwde
cmp
xor
add
jp
xchg
mov
mov
cmps
dec
sub
or
adc
mov
jg
fsqrt
idiv
jl
test
or
dec
fild
add
aas
repnz
cmp
not
shr
xor
ja
packsswb
iret
adc
sub
neg
add
ins
cwde
pop
loop
pop
lock
xchg
dec
call
lds
add
mov
and
sar
sub
push
addr16
push
xchg
push
pop
and
lods
aaa
lods
add
push
rcr
pop
pop
nop
cmp
stos
test
add
jmp
jae
adc
shl
jle
mov
mov
push
adc
es
pop
ds
nop
cmp
push
call
dec
mov
pop
ficom
inc
mov
dec
xor
nop
shr
jp
aad
add
movs
mov
inc
data16
into
cmp
mov
in
pop
imul
lea
dec
add
or
xor
push
push
inc
xor
loop
inc
test
daa
clc
xor
inc
lds
adc
lods
and
pop
xchg
jb
sub
jno
pop
jae
or
sbb
cmp
dec
or
das
movs
mov
popf
or
ins
mov
and
movs
ins
jge
sub
xchg
push
les
popf
imul
shl
pop
inc
lock
add
jmp
ror
adc
mov
js
fstp
push
and
pop
enter
pop
mov
mov
or
(bad)
imul
int
lea
adc
sub
cmps
pushf
pop
pop
stc
addr16
inc
cld
inc
aaa
adc
lods
mov
mov
adc
fild
mov
xchg
sbb
dec
pop
sbb
(bad)
ficomp
cmps
mov
dec
pop
xchg
fld
js
mov
push
mov
inc
jae
leave
dec
popf
sbb
mov
inc
lock
xchg
ficom
fnsave
nop
xor
call
xchg
pop
outs
inc
fdivr
(bad)
adc
ds
dec
shl
out
aam
icebp
mov
lods
dec
das
adc
push
jle
or
mov
push
add
xor
sbb
inc
pop
hlt
mov
push
popf
aas
inc
push
sbb
inc
(bad)
pop
inc
(bad)
or
sub
test
or
shl
ror
enter
out
sahf
push
xchg
cwde
vmwrite
es
jmp
add
int3
nop
or
cmp
enter
into
out
sub
sbb
(bad)
push
add
ja
push
cmp
mov
xchg
xchg
shl
ret
loopne
inc
mov
test
mov
stos
psubsw
dec
psrld
call
xor
stc
push
rcl
in
sbb
mov
mov
mov
mov
or
add
retf
mov
(bad)
ins
mov
sub
xor
cwde
gs
xchg
dec
push
(bad)
xchg
fist
imul
jmp
jnp
jns
aad
jle
mov
sub
aad
cmc
push
fbstp
cmp
dec
ss
push
pusha
test
stos
adc
bnd
cld
jle
xor
or
loop
shl
inc
fistp
pop
icebp
bound
push
mov
cmp
scas
clc
jmp
inc
mov
aaa
xchg
rol
iret
xchg
lock
push
dec
adc
inc
pminsw
add
(bad)
daa
fwait
mov
pop
mul
leave
(bad)
stos
stc
inc
jno
out
test
sbb
movs
mov
and
dec
sub
ins
jg
pop
sbb
push
stc
mov
or
xchg
(bad)
out
cld
sbb
pop
add
sbb
imul
inc
cdq
rcr
xor
clc
mov
pop
fbld
scas
sbb
add
adc
out
dec
jle
cmp
sar
movs
inc
daa
sahf
cmp
mov
mov
xchg
out
xchg
mov
cmp
int3
and
xchg
cmp
and
mov
sbb
enter
nop
mov
cmp
arpl
hlt
cmp
int
and
leave
mov
cmp
xchg
or
dec
rcr
leave
pusha
dec
adc
push
xlat
fsubr
pop
jl
popf
sub
cwde
adc
repz
daa
pushf
mov
xor
and
imul
sahf
(bad)
lahf
push
movs
and
leave
mov
movs
jae
mov
push
pop
mov
mov
add
mov
xor
int
test
sbb
addr16
test
adc
sbb
in
out
dec
cli
test
xchg
mov
cdq
cmp
test
xor
ins
and
mov
cmps
sub
sub
fcomp
inc
pop
jns
mov
sbb
inc
in
je
stc
ficomp
xlat
fwait
inc
sbb
test
test
dec
and
mov
mov
nop
fs
aam
mov
inc
cld
test
fcomp
fdivr
jg
(bad)
fs
(bad)
push
push
inc
(bad)
jae
int3
call
adc
pop
push
loope
pop
sub
(bad)
movs
jl
sti
in
cmc
xor
call
mov
cmps
dec
xor
cs
jge
movs
fwait
div
xchg
rol
xchg
mov
(bad)
dec
xor
mov
dec
push
call
dec
int
and
mov
add
dec
cdq
push
pushf
int3
add
push
out
sub
das
aas
mov
jne
movs
fisub
xchg
aam
pop
pushfw
cli
test
pop
call
cld
int
mov
loope
mov
lds
nop
jne
stc
imul
dec
mov
lods
add
sub
call
pop
loop
std
pop
mov
fst
(bad)
lahf
in
leave
inc
jbe
addr16
daa
pop
jmp
add
test
in
xchg
pop
daa
xchg
retf
mov
mov
clc
cmp
or
in
push
jae
mov
imul
ins
iret
push
in
in
pop
fcom
retf
test
arpl
imul
push
cmp
loopne
pop
pop
adc
xor
add
adc
stos
test
fwait
nop
cmp
add
stc
inc
arpl
gs
pop
aad
aam
bound
adc
pop
xchg
xchg
add
addr16
arpl
je
add
inc
sbb
test
ret
mov
xchg
jmp
or
dec
bound
or
rcr
fild
push
add
or
lahf
xor
jl
repz
push
pop
xor
addr16
hlt
test
or
push
in
add
xlat
mov
xchg
fidiv
rcr
loopne
mov
inc
pusha
scas
mov
(bad)
sub
sub
inc
iret
mov
mov
dec
mov
loop
inc
cdq
pop
sub
pop
jmp
cmc
mov
bound
adc
mov
hlt
(bad)
out
shr
pop
test
mov
inc
xor
mov
mov
pushf
push
ins
or
shl
xchg
xor
in
xor
cwde
(bad)
lods
sbb
inc
mov
xchg
inc
out
sbb
cs
inc
or
stc
or
int3
ficom
in
daa
sbb
fcmovnbe
in
mov
and
cdq
push
(bad)
sub
loop
test
mov
cmps
mov
sub
jb
push
xor
(bad)
mov
jbe
adc
push
test
mov
inc
pop
sbb
cwde
stc
push
(bad)
repz
aas
or
mov
inc
repz
dec
pop
xchg
add
nop
cmp
cld
scas
xor
jns
std
ins
in
sbb
loope
cmps
sub
pop
leave
fstp
or
ds
mov
inc
push
mov
xor
popa
mov
fisttp
push
add
xchg
jmp
sbb
ja
arpl
retf
jp
hlt
ins
xchg
cmp
push
push
mov
jns
stc
jmp
push
dec
call
mov
cs
(bad)
mov
scas
add
pop
mov
push
mov
not
stos
fcmovnb
pop
outs
adc
retf
dec
enter
jbe
mov
mov
xlat
aad
inc
push
inc
sub
dec
fst
sub
mov
int3
mov
xor
dec
call
or
sbb
stos
cwde
xchg
aam
xchg
lods
retf
jmp
sbb
adc
test
lods
jge
jbe
cmc
mov
sar
cmp
dec
imul
lea
jns
push
dec
in
aas
mov
mov
dec
push
cmp
push
jmp
push
jmp
mov
xchg
int3
sub
and
adc
mov
pop
mov
jbe
je
sbb
mov
pushf
adc
jp
xor
int
test
mov
stos
xchg
mov
or
mov
cmp
mov
mov
sub
xchg
mov
cli
push
jmp
(bad)
nop
retf
pop
pop
cld
mov
jo
or
adc
cmp
and
mov
ret
shl
cmps
in
pop
into
mov
ds
pop
mov
xchg
sub
sbb
aad
adc
pop
mov
dec
jmp
jge
stc
sbb
test
mov
mov
jmp
pop
and
push
sbb
ss
dec
xlat
popf
ja
xchg
cli
push
push
xor
nop
out
int
xchg
or
mov
stos
and
and
or
retf
std
jbe
mov
stos
jb
repnz
jg
mov
xor
push
dec
jmp
or
loope
or
dec
xchg
jno
pop
push
call
xor
sub
mov
std
adc
inc
add
sbb
(bad)
repnz
call
sub
call
push
inc
outs
dec
cmps
cli
sti
fbld
out
cld
adc
test
mov
xchg
in
ds
out
inc
jmp
jne
arpl
push
aaa
adc
popf
scas
and
mov
hlt
loop
push
jns
xor
pop
daa
push
mov
jmp
data16
xor
add
xor
and
mov
mov
dec
xor
sub
mov
cmp
daa
sub
push
dec
es
lods
dec
cmp
xor
sub
jmp
cdq
test
movs
inc
or
div
call
scas
mov
mov
loop
int3
dec
or
(bad)
pop
outs
loope
add
xor
xchg
repnz
rcl
cmp
or
mov
ja
and
inc
lahf
and
sbb
dec
in
dec
std
lock
int
outs
mov
and
out
inc
fistp
div
jns
jns
outs
cli
icebp
mov
push
xor
je
adc
jecxz
in
adc
outs
xchg
cld
inc
pop
push
call
jno
lahf
mov
leave
call
iret
(bad)
or
pop
jle
pop
stos
fldenv
mov
fisubr
loop
mov
xor
hlt
push
movs
and
pop
repnz
pcmpgtd
in
xchg
mov
lahf
mov
jnp
(bad)
cmp
sub
cli
push
mov
inc
and
push
xor
push
retf
mov
push
or
pop
jmp
xor
lods
(bad)
iret
pop
ret
jbe
inc
sbb
mov
lock
sbb
xchg
shr
jge
(bad)
stos
outs
cmovbe
or
xor
test
lock
aad
push
mov
cmps
call
or
retf
pop
test
mov
mov
call
cdq
repnz
mov
cmps
lahf
loopne
out
fwait
pop
mov
sbb
fisttp
and
ds
arpl
sti
in
daa
ja
xchg
sub
rcr
into
dec
cld
outs
or
pop
jge
fiadd
and
test
rol
jns
xchg
je
sbb
fs
cmp
sbb
add
or
sahf
xchg
jnp
pop
repnz
adc
fidiv
aaa
mov
jge
retf
ror
and
jne
outs
lds
push
push
inc
call
dec
popa
adc
xchg
dec
or
and
in
dec
out
mov
aad
loop
cld
lods
sbb
xchg
int3
ret
jns
(bad)
ffreep
mov
gs
or
bound
and
add
std
into
add
push
xor
push
mov
add
leave
mov
out
shl
(bad)
and
sar
pop
jae
mov
jb
dec
hlt
mov
(bad)
ins
add
xchg
sbb
mov
sti
sub
imul
adc
ficomp
loopne
xor
jge
adc
dec
inc
hlt
call
mov
not
xchg
movs
jl
dec
mov
and
adc
inc
push
cli
push
out
mov
or
gs
ficom
sbb
jl
jp
inc
repnz
add
mov
mov
sub
ret
mov
or
and
adc
add
mov
mov
sbb
aam
adc
ret
jbe
movs
call
clc
ins
and
lods
in
lds
popf
xchg
aaa
push
or
adc
xor
scas
pop
pop
cmp
aas
aad
add
mov
xor
or
lods
inc
aaa
mov
cs
mov
out
sub
xchg
inc
pop
and
jno
les
lds
ret
fimul
(bad)
mov
push
xor
(bad)
sahf
std
fsub
or
pop
dec
push
out
test
pop
les
aaa
jns
test
mov
call
xor
lea
lock
and
pushf
or
loopne
xchg
mov
add
xchg
(bad)
jmp
fild
add
mov
jne
(bad)
mov
xor
loope
xor
or
fisubr
in
or
stos
push
(bad)
cld
sbb
mov
pop
cmp
dec
push
in
xchg
xchg
jmp
cmp
int
add
ss
aaa
and
cmp
outs
repnz
ret
rcr
scas
jmp
add
cmp
dec
or
(bad)
clc
push
mov
adc
ret
rcl
cmp
adc
pop
mov
(bad)
lock
and
cmp
jb
xor
mov
call
mov
stos
push
add
lods
xor
ret
movs
daa
xor
aaa
pop
inc
out
cmp
enter
test
add
xor
std
xchg
jae
das
or
push
dec
pop
cmps
mov
mov
jmp
(bad)
(bad)
call
dec
and
pop
mov
jae
cwde
jmp
cmp
xchg
jns
repz
popa
pop
adc
int3
push
stos
out
mov
sub
xchg
inc
in
xchg
std
adc
repnz
and
mov
imul
jnp
jnp
xor
pusha
fnsave
sub
cmp
repnz
mov
mov
dec
fs
fwait
lahf
in
loopne
aam
test
mov
xor
fidiv
sbb
in
push
push
jno
cmp
rcl
mov
imul
adc
retf
leave
mov
mov
ret
clc
adc
xor
pop
or
aad
sahf
jle
fst
fbstp
and
dec
lds
jnp
mov
mov
sbb
fisub
ds
xchg
pop
dec
xchg
mov
and
mov
test
xchg
sub
push
mov
jbe
mov
xor
mov
sub
enter
popf
push
xor
repnz
mov
ret
push
mov
test
sbb
lock
stc
loop
(bad)
shl
pop
daa
inc
fwait
dec
push
xchg
xor
repz
sub
sahf
test
pushf
push
jmp
aas
stc
call
nop
inc
sbb
es
sbb
inc
enter
(bad)
stos
rcl
and
mov
imul
pop
ss
sbb
addr16
add
and
sbb
xor
(bad)
xchg
lds
dec
test
sbb
dec
in
retf
jg
xchg
inc
jmp
in
cmps
mov
jnp
jge
ror
add
or
mov
scas
mov
in
lahf
rcr
ficomp
addr16
mov
(bad)
mov
sub
cwde
add
sub
push
mov
test
xchg
(bad)
sbb
and
int
rcr
in
cs
xor
stos
and
add
lahf
inc
mov
stos
inc
imul
icebp
dec
aam
mov
and
inc
push
jg
mov
mov
fwait
jmp
dec
stos
add
movs
nop
test
cmp
addr16
das
mov
adc
inc
outs
or
stos
jno
xchg
dec
aam
dec
not
js
mov
jne
mov
movs
aas
jbe
stos
(bad)
sbb
fisubr
adc
in
dec
ins
clc
call
sbb
addps
sub
mov
inc
mov
out
dec
int3
jbe
push
xor
xor
jle
cmp
retf
daa
cmps
mov
jecxz
mov
xchg
fdivrp
push
fldenv
push
out
daa
or
cmp
outs
xor
movs
shl
sti
jae
push
retf
aad
iret
aad
cs
dec
aad
repz
mov
ss
cwde
push
aas
nop
ds
cld
lea
cmp
cmp
mov
mov
inc
xchg
inc
sbb
fnsave
imul
cmp
fidivr
mov
mov
movs
xchg
jecxz
test
das
sub
fadd
add
shl
jg
sbb
inc
push
aas
rol
lea
mov
jb
sub
xlat
div
and
adc
push
js
loopne
xchg
test
sahf
loop
lock
aam
iret
sbb
rol
imul
sbb
pushf
push
xlat
xchg
das
cs
xor
inc
std
enter
xchg
inc
jb
pop
repz
pushf
cdq
test
sar
jbe
(bad)
jmp
push
repnz
mov
mov
pop
mov
fistp
rcl
imul
out
mov
xlat
enter
push
(bad)
aad
mov
call
mov
jl
aaa
inc
es
ja
cmps
jbe
repz
xor
inc
push
mov
bound
xchg
cwde
mov
pushf
nop
pop
cwde
(bad)
jmp
iret
js
popf
adc
cmc
mov
lods
and
push
cmp
shl
mov
je
pop
ror
cmp
shr
js
dec
fwait
pop
mov
xor
or
xrelease
mov
jg
mov
push
inc
mov
mov
fadd
loop
fsqrt
xchg
xor
test
shl
xor
jmp
jnp
add
mov
mov
xchg
bound
pop
cld
dec
les
sub
mov
mov
cmp
ret
ror
dec
inc
mov
cld
push
xor
retf
loop
pushf
ins
push
lods
cld
xchg
dec
into
dec
adc
inc
jecxz
adc
aam
out
jne
lahf
sti
dec
mov
pusha
into
scas
cmps
or
or
fwait
and
imul
jge
cli
ins
jo
enter
mov
jne
test
mov
or
fimul
cli
xor
fidivr
adc
adc
xor
jmp
outs
or
push
or
push
mov
loop
in
cmps
push
in
fisubr
aaa
push
imul
aas
and
ret
lahf
pop
arpl
xchg
ret
pop
fisub
pop
daa
call
pop
cmp
push
mov
test
cmp
scas
and
mov
pop
and
enter
pop
jmp
pop
aaa
into
xchg
pop
std
retf
dec
aaa
hlt
test
fucomip
xchg
outs
xchg
push
dec
mov
data16
and
movs
cwde
stc
sbb
(bad)
adc
inc
mul
icebp
mov
sub
cmp
(bad)
jbe
mov
aas
jmp
mov
and
push
push
jge
shr
pop
lds
inc
rol
cdq
add
mov
test
std
or
xchg
ret
pushf
repz
push
into
add
cmps
dec
ja
pop
mov
(bad)
jecxz
jo
pop
jno
cmp
xchg
(bad)
movs
test
in
sti
dec
inc
xchg
test
fcos
jne
pop
out
sub
je
pop
cmps
xchg
icebp
enter
sub
dec
daa
out
push
or
cmp
arpl
add
fwait
inc
push
and
cmp
mov
repz
cld
in
xchg
int
inc
dec
cmp
sahf
cmp
and
scas
dec
xlat
inc
xor
push
leave
ret
add
sub
cli
jmp
xchg
call
jmp
aaa
lock
mov
push
lock
js
inc
and
add
fidivr
movs
sbb
mov
in
sahf
test
dec
push
std
sbb
sub
mov
out
in
aaa
retf
lock
push
pop
jno
jge
mov
xor
cmp
scas
bswap
jnp
jge
and
cld
icebp
jns
mov
xchg
je
test
inc
xchg
jmp
mov
and
mov
jbe
cmp
imul
or
gs
fmul
jecxz
std
cmp
push
adc
shl
pushf
into
mov
aas
loop
add
ror
ds
test
and
jne
std
pop
xchg
lock
mov
xor
inc
dec
inc
xor
pop
stos
mov
push
sbb
sbb
cmp
ja
stos
pop
stc
packuswb
pusha
sbb
outs
(bad)
mov
cmps
int3
cmp
push
mov
jmp
int
sbb
movs
mov
into
das
shl
ss
(bad)
jl
push
dec
daa
in
inc
fisttp
aam
stc
pop
daa
pop
sub
clc
shl
cmps
clc
xchg
leave
movs
adc
xor
xchg
scas
push
push
mov
adc
jg
mov
and
sbb
pop
add
pop
push
das
cmp
push
inc
imul
mov
cwde
mov
cmp
out
int
xchg
jecxz
cwde
dec
jmp
mov
mov
mov
or
dec
jp
call
call
mov
mov
sub
repnz
or
or
sbb
into
daa
inc
mov
push
xchg
aad
push
ja
pop
pop
sub
aam
stc
and
lods
sbb
jo
out
je
jnp
nop
(bad)
fsub
dec
hlt
pop
int
cmp
or
sub
jns
adc
cmps
into
mov
cmp
stos
shr
mov
push
pop
mov
sbb
out
jmp
frstor
jg
xchg
lock
rcr
mov
or
push
cs
es
mov
cwde
idiv
pop
add
push
sub
rcr
jecxz
bound
mov
push
ror
sbb
and
pop
adc
adc
stos
cs
icebp
loopne
sar
out
jecxz
scas
sbb
sub
jp
push
(bad)
push
mov
pop
(bad)
xchg
adc
rcl
pop
xchg
cmp
(bad)
mov
(bad)
mov
and
lods
out
nop
cmp
data16
sbb
cmp
jo
leave
(bad)
daa
ss
sbb
mov
mov
xor
adc
clc
xchg
(bad)
fld
stc
xchg
sub
adc
repz
clc
xchg
jmp
and
adc
int
xchg
push
cwde
stos
mov
bound
mov
sbb
out
dec
(bad)
stc
jle
movs
sub
data16
jmp
cdq
jmp
aaa
push
jae
push
push
in
movs
cmc
push
mov
mov
aad
adc
xor
jecxz
sbb
push
cmp
shl
pop
nop
jo
pop
sbb
push
scas
ficomp
cli
and
xchg
les
mov
pushf
lods
aaa
jmp
push
and
xchg
mov
and
(bad)
mov
xor
je
mov
int3
pop
add
out
jbe
xchg
xchg
jo
test
iret
jno
loope
repz
push
lea
sahf
stc
popf
inc
xchg
xchg
popf
and
fdivr
int3
jl
inc
out
mov
mov
jmp
mov
xchg
mov
sub
stos
inc
push
mov
sbb
retf
jbe
data16
xlat
push
sub
jno
fdiv
inc
mov
daa
inc
jno
push
sbb
mov
and
mov
test
in
sahf
fidiv
adc
dec
das
mov
adc
in
mov
dec
mov
popf
fisubr
xor
imul
mov
pop
dec
cmp
div
into
mov
pusha
lods
sbb
sub
int
fs
mov
add
addr16
mov
fisttp
sub
(bad)
hlt
arpl
ss
sub
stos
mov
cmp
ins
xor
inc
es
(bad)
or
xor
inc
cmc
paddusw
stos
mov
inc
mov
out
sub
sbb
inc
mov
mov
sub
loop
mov
xor
in
pushf
push
sbb
mov
inc
dec
out
(bad)
std
mov
xor
dec
fimul
das
jg
pop
or
xor
inc
or
sti
test
mov
add
outs
add
mov
fisttp
lea
retf
sub
mov
sub
repz
and
ficom
int
fnstenv
or
retf
sbb
push
in
sub
xchg
push
ins
inc
xor
push
out
repnz
ins
int
push
sbb
rcr
dec
mov
dec
cmp
jl
push
stos
mov
dec
mov
and
ret
sbb
ins
pop
and
xor
or
jb
loope
in
mov
ja
fdiv
pushf
in
or
mov
arpl
loope
jo
(bad)
hlt
imul
add
adc
add
adc
push
xchg
or
call
mov
add
and
mov
dec
xchg
sti
push
js
sub
test
adc
retf
adc
scas
and
or
push
mov
jge
or
cmp
add
mov
mov
mov
iret
jl
add
add
imul
pop
xor
test
or
xchg
int
(bad)
mov
or
aas
movs
mov
ins
popa
sar
je
or
push
and
or
out
mov
daa
shl
pop
jecxz
ror
shl
cmp
mov
mov
and
int
and
dec
fwait
popf
sbb
xchg
add
bnd
in
and
xchg
test
daa
ret
jnp
mov
sub
scas
or
xchg
into
js
jnp
jne
inc
in
popf
adc
(bad)
imul
adc
and
sbb
or
dec
lahf
clc
adc
mov
jecxz
int
outs
xor
push
adc
daa
popf
rcl
dec
add
lahf
cmps
xchg
or
inc
push
xor
adc
loop
sbb
add
stc
nop
pop
adc
xor
xlat
ror
mov
fdiv
in
or
in
add
cli
pop
push
loop
pop
loop
pop
outs
cmp
push
or
aaa
sub
and
int
add
jg
adc
jno
mov
imul
mov
fidivr
pop
fdivp
xor
and
es
repnz
xor
mov
xor
and
aaa
(bad)
mov
std
daa
clc
jno
cdq
xchg
push
or
adc
xchg
sbb
mov
fiadd
adc
xor
sub
pop
fs
cmp
pop
add
test
mov
sbb
test
xor
mov
pop
cmps
mov
movs
inc
push
cmps
mov
(bad)
dec
pop
scas
push
mov
test
(bad)
out
inc
lahf
repnz
push
jbe
jne
daa
cs
jl
sbb
pop
add
cmp
pop
outs
jg
rcr
push
cmp
daa
add
pop
fsub
sub
pop
cld
aaa
popa
outs
test
aas
lods
dec
xchg
pop
out
xchg
test
cmp
add
pop
cmp
cmp
gs
lahf
iret
ret
push
imul
mov
call
mul
sub
cmp
mov
retf
dec
inc
xchg
test
jne
inc
fld
sbb
stc
ja
test
sahf
mov
sub
mov
jmp
jb
jmp
test
mov
add
mov
je
xchg
imul
(bad)
mov
cld
inc
std
cmps
je
adc
pop
ds
lock
lods
sub
lahf
cli
xor
pop
sub
push
jmp
hlt
push
cmp
call
or
sti
adc
pop
push
daa
ss
fwait
or
iret
and
mov
jo
add
loopne
icebp
std
sub
out
cld
or
or
mov
out
mov
push
call
jge
mov
cli
pop
inc
(bad)
out
aad
imul
repnz
aam
inc
mov
adc
movs
mov
jl
mov
movnti
push
fidivr
adc
inc
push
jg
in
and
jnp
cmp
mov
stos
sar
call
inc
sbb
je
cdq
jle
mov
stc
dec
fbld
das
pop
cmps
stos
cmp
push
and
out
movs
mul
rol
fmul
sub
jae
lods
ror
call
(bad)
mov
sub
cmp
jbe
and
cmp
pop
into
xchg
mov
dec
(bad)
shr
loopne
inc
xor
lahf
loopne
adc
outs
add
shl
or
int3
fiadd
in
pop
clc
xor
push
imul
mov
xlat
lahf
mov
stos
sbb
add
outs
xor
xchg
pop
retf
paddd
dec
xor
inc
fwait
movs
neg
add
xchg
and
push
test
iret
dec
mov
(bad)
loopne
xchg
inc
sub
adc
lahf
loope
or
call
push
fidiv
loop
int
popa
es
out
(bad)
movs
mov
xchg
mov
xchg
push
inc
adc
push
mov
jle
push
rol
call
mov
add
jecxz
jo
xchg
out
or
inc
pushf
ds
inc
adc
arpl
into
mov
inc
aas
(bad)
fwait
jle
dec
jge
jmp
out
stos
xor
jnp
out
jb
scas
sub
xor
cs
outs
les
out
dec
sbb
or
inc
mov
xchg
or
bound
inc
(bad)
movs
xor
jmp
sub
(bad)
mov
retf
call
cmps
xchg
loopne
dec
inc
xor
jle
cs
jo
mov
fsubr
mov
les
mov
ins
pop
pop
jnp
sbb
dec
mov
jp
(bad)
mov
(bad)
cmp
or
mov
mov
pop
fnstsw
or
mov
fs
sti
jp
or
sbb
push
test
pop
mov
cli
and
hlt
repnz
retf
lds
aad
ins
add
fnstenv
scas
xchg
rcr
inc
ret
clc
call
fwait
lods
inc
add
push
les
test
popa
add
cmp
dec
fsub
pop
xchg
je
fnstsw
inc
xchg
popa
and
lock
pop
mov
stos
xor
pushf
iretw
(bad)
jb
mov
gs
dec
imul
xchg
add
call
and
or
sub
ja
test
int3
retf
bound
rcr
inc
pop
add
and
pop
enter
xacquire
stos
pop
sbb
stos
(bad)
cs
sti
iret
(bad)
idiv
jg
jmp
pop
mov
sti
jl
or
cld
mov
mul
cmp
xchg
sahf
test
or
stc
sbb
rol
or
push
dec
dec
adc
push
xchg
pop
adc
sbb
mov
and
pop
dec
rcr
mov
ret
mov
inc
fs
cli
data16
add
dec
sahf
out
cmps
jbe
xor
loope
cmp
cmp
mov
addr16
add
retf
(bad)
jp
or
neg
mov
add
les
mov
das
das
mov
cmp
mov
pop
pop
cs
sbb
ror
push
mov
ss
scas
push
mov
push
out
stc
dec
in
adc
fwait
adc
nop
rol
ror
cwde
mov
push
or
ja
nop
jmp
jb
sbb
mov
bound
pop
or
cld
and
push
sbb
or
mov
sub
int3
push
jp
dec
aam
test
jo
adc
hlt
sub
cwde
jp
int3
mov
push
mov
or
mov
(bad)
idiv
adc
rcl
clc
inc
call
push
cwde
sbb
int
adc
pop
rcr
inc
cmps
fnstcw
inc
xchg
test
rcl
pop
(bad)
mov
push
aas
call
lock
sub
fild
pop
cmp
(bad)
sub
shr
xchg
mov
xchg
mov
leave
sbb
and
sub
adc
fucomp
inc
adc
adc
mov
xchg
(bad)
lods
les
(bad)
sub
shr
iret
push
mov
ja
daa
mov
jmp
jmp
pop
clc
fnstsw
mov
ja
ins
pop
ins
jae
(bad)
stos
cmps
std
shl
jnp
fist
icebp
sbb
mov
scas
mov
stos
mov
nop
or
pop
ret
scas
jae
push
xor
cmc
call
outs
dec
daa
pop
std
mov
ds
daa
(bad)
fsub
push
fmul
idiv
daa
mov
dec
xchg
fdiv
cld
dec
mov
cwde
xchg
loop
rol
mov
aad
xchg
mov
test
rcr
mov
inc
mov
rcl
stos
ss
aad
dec
or
xor
sbb
push
hlt
add
aam
xor
xchg
out
mov
jo
nop
test
mov
fwait
mov
mov
retf
adc
jno
scas
and
neg
mov
cmp
push
mov
dec
rol
retf
cmp
test
scas
loopne
push
mov
xchg
dec
add
sbb
push
cdq
movs
push
jbe
fdiv
sbb
inc
mov
push
sub
push
aad
xchg
bnd
cld
jbe
shl
mov
popf
mov
inc
inc
pop
fdivr
jmp
pop
mov
ja
jg
ret
cld
fnstenv
jmp
not
dec
jg
imul
inc
leave
shl
outs
clc
lods
pop
mov
xchg
ds
inc
out
cmc
ss
jae
cdq
or
push
lods
popf
xchg
dec
xor
and
mov
inc
push
jbe
nop
int
dec
mov
sbb
fst
push
out
dec
cmp
inc
mov
test
ins
add
sbb
push
(bad)
dec
iret
or
xchg
pop
leave
fwait
sbb
jg
test
cld
push
out
fmul
jne
repnz
sub
aaa
enter
aas
or
xlat
add
dec
shl
sbb
fs
cld
push
mov
rcr
xor
mov
push
cmps
aam
int
data16
and
call
lods
mov
jle
or
nop
lods
cs
cmp
dec
jns
dec
inc
ja
sbb
fxch
mov
gs
hlt
jae
xchg
test
inc
mov
xchg
dec
loope
dec
cmp
(bad)
jmp
pop
push
xchg
or
test
sbb
mov
bound
daa
xor
inc
in
jno
push
jb
jo
in
sbb
mov
xlat
mov
daa
push
dec
aaa
out
adc
pop
cli
push
addr16
jo
ins
adc
std
cmps
fisub
imul
xor
in
inc
pop
or
in
push
adc
xor
xchg
sbb
icebp
out
adc
(bad)
push
imul
xchg
sbb
mov
addr16
push
nop
xchg
rcr
mov
push
xor
cli
popa
cmp
mov
in
pop
fcmovnbe
hlt
sbb
out
sub
push
arpl
push
adc
pop
test
(bad)
push
xor
inc
mul
outs
push
test
xchg
(bad)
cmp
push
(bad)
jmp
movs
or
in
aaa
jo
or
and
push
rcr
sar
pop
leave
jb
sub
mov
in
adc
hlt
gs
mov
fild
dec
movs
dec
sub
js
(bad)
dec
das
adc
pop
and
or
cs
pop
inc
dec
mov
jmp
jecxz
cmp
xor
cmp
mov
pop
in
xor
xchg
ds
pop
mov
dec
sub
inc
mov
or
test
mov
xlat
sub
repz
shl
je
enter
int3
in
int
popf
or
fmul
std
data16
adc
ja
or
ss
xchg
aaa
sbb
add
out
xor
fcomp
lods
cwde
(bad)
cmps
arpl
and
mov
inc
(bad)
cli
out
pop
xor
inc
out
push
clc
call
addr16
(bad)
and
mov
push
sti
stos
pop
sbb
push
pop
out
dec
je
dec
rcr
and
loop
std
push
cli
in
sbb
mul
stos
inc
adc
shr
imul
je
idiv
mov
jg
lock
pop
adc
(bad)
fstp
js
push
add
sub
(bad)
int
fstp
cmp
xor
xchg
mov
xchg
sbb
sub
fdivr
add
rcl
sub
sbb
jnp
gs
sbb
push
pop
dec
or
push
mov
leave
and
std
call
mov
mov
push
xor
js
mov
test
je
lahf
dec
sti
(bad)
push
push
imul
adc
pop
lahf
cmc
mov
sub
pop
repnz
inc
shl
fucomi
cmp
aaa
retf
neg
push
mov
cmovs
sub
jmp
repz
jmp
or
sbb
cmps
aam
sub
pusha
(bad)
mov
int3
ret
jle
push
fild
cmp
or
scas
imul
in
or
(bad)
mov
cmp
das
(bad)
aam
fs
jno
test
push
inc
cmp
cli
in
push
push
jmp
jp
in
jle
das
pusha
dec
into
stos
dec
mov
mov
in
mov
add
mov
mov
cdq
stc
ret
call
out
and
loop
test
out
lock
iret
imul
out
dec
stc
test
xor
jne
mov
mov
jo
pop
lea
in
or
inc
pop
xor
rcr
or
popf
ja
cmp
jo
add
imul
pop
push
cs
sub
sub
inc
mov
test
or
push
add
add
add
or
inc
adc
inc
out
outs
ds
adc
shr
mov
scas
push
pushf
xor
sbb
jmp
and
sbb
rol
gs
pop
pushf
sub
out
fsubr
fld
out
test
clc
(bad)
idiv
push
jmp
pusha
cli
shl
gs
pop
xor
imul
mov
mov
sbb
ficom
or
int3
xchg
aaa
mov
push
pop
add
test
xchg
cmp
leave
cmps
mov
fadd
lea
rcl
cmp
not
pop
and
lds
mov
push
mov
cmp
retf
repz
mov
in
call
lds
stos
sbb
imul
xor
jecxz
xor
or
jns
imul
test
pushf
enter
test
inc
cld
and
jns
les
popa
pop
push
arpl
mov
mov
xchg
pop
mov
