xchg
sub
div
ins
and
xor
sub
pusha
dec
xor
shl
mov
imul
bound
repnz
fmul
add
je
inc
dec
add
mov
shrd
mov
xor
retf
pop
add
inc
dec
add
cs
sar
sub
jl
cmps
retf
and
jecxz
jo
cmp
cmc
sar
imul
idiv
lods
push
addr16
dec
mov
stc
xor
xor
push
mov
xor
jnp
outs
loop
jmp
xchg
jno
shr
enter
jae
mov
arpl
aas
sub
xchg
hlt
xor
fs
imul
out
cwde
mov
imul
mov
(bad)
mov
xchg
scas
lds
loopne
mov
mov
and
xor
sub
mov
stos
mov
pop
pop
loopne
out
cmps
mov
loopne
adc
mov
enter
imul
jbe
jb
shl
mov
imul
mov
imul
mov
imul
ins
xor
dec
pusha
in
jmp
loopne
mov
dec
pop
scas
int
cmp
pushf
retf
xchg
(bad)
and
ja
not
sub
cmp
addr16
mov
sbb
inc
dec
retf
xchg
adc
cmp
dec
dec
xor
cmps
jb
add
xor
hlt
xor
and
xor
das
pop
mov
and
mov
sub
hlt
push
add
cmps
test
and
xor
and
cmp
dec
retf
cmps
jb
(bad)
in
xor
and
xchg
mov
fcmovnb
push
cmp
and
mov
and
xor
loopne
retf
pop
xor
jbe
int3
xchg
dec
imul
imul
xor
out
or
hlt
xor
push
mov
push
mov
or
sbb
data16
pusha
fist
shl
popa
push
retf
xor
jno
rol
fcmovnu
sub
data16
icebp
xor
xor
inc
aas
adc
mov
call
jae
push
xor
inc
aaa
cmp
mov
inc
add
pop
imul
and
adc
data16
dec
xchg
hlt
xor
popa
int
imul
sbb
data16
pop
add
jbe
fild
mov
imul
inc
imul
es
fsub
pop
mov
mov
and
xor
and
mov
push
pop
fwait
sbb
jae
mov
ja
mov
out
aam
retf
jno
imul
push
dec
mov
imul
jns
mov
loop
push
or
mov
mov
dec
mov
push
and
xor
mov
out
arpl
xor
mov
out
or
xor
movs
pop
jmp
and
xor
adc
es
sub
mov
fadd
adc
mov
scas
sub
inc
outs
adc
xor
ins
imul
loop
pop
xchg
xchg
inc
xchg
in
push
in
jne
loop
out
cmp
sub
shl
test
repz
pop
push
and
xor
and
xor
and
inc
addr16
cmp
cdq
iret
xor
lods
jo
lods
ins
nop
xor
sub
jbe
push
fcmovnb
sub
push
mov
xor
push
cmps
retf
push
fcomp
adc
mov
cmp
inc
outs
adc
retf
int3
push
mov
imul
repz
pop
in
imul
xor
mov
adc
xor
rcl
fdivr
repz
dec
add
mov
push
sub
arpl
loop
imul
(bad)
ret
in
add
dec
inc
ja
mov
push
xor
inc
xchg
int3
test
aas
repnz
push
dec
fdiv
mov
(bad)
ret
in
cmp
neg
bound
repz
jmp
mov
cmp
mov
xchg
shl
int3
loop
xchg
loop
dec
retf
outs
push
add
cmps
rol
imul
add
loop
mov
loop
dec
retf
outs
push
add
adc
repz
popa
arpl
or
imul
inc
push
aas
(bad)
dec
je
sbb
neg
xor
jno
scas
repz
popa
inc
inc
outs
scas
repz
or
and
ret
push
fdivr
jno
lods
repz
sub
inc
mov
fcomi
mov
and
jno
(bad)
fcomi
enter
mov
sub
or
adc
dec
retf
rcr
dec
xor
jnp
outs
mov
pushf
cmps
xor
and
nop
addr16
scas
jmp
lods
mov
add
fisttp
loop
lahf
mul
mov
retf
xchg
fisttp
pop
nop
hlt
xor
popa
mov
retf
sub
or
out
and
pop
jle
rcr
loop
lahf
(bad)
loopne
mov
mov
xchg
arpl
mov
fisttp
loop
dec
retf
xchg
fstp
mov
fisttp
pushf
or
fisttp
loop
dec
retf
xchg
fstp
in
inc
aam
mov
and
cmp
xor
in
std
test
aas
shr
enter
jae
imul
retf
hlt
xchg
xor
rcl
enter
mov
add
add
and
mov
es
cmps
gs
inc
fisubr
cmp
mov
jecxz
xor
popa
mov
mov
lahf
lods
repz
aas
jno
jnp
outs
mov
jne
addr16
jecxz
enter
jnp
popa
dec
mov
fadd
sti
sbb
mov
push
sub
out
inc
cmps
gs
inc
fisubr
cmp
mov
jecxz
xor
std
xor
ror
loop
dec
mov
pop
nop
hlt
xor
popa
mov
imul
push
cmp
mov
jg
repz
ja
popa
dec
mov
fmul
pop
nop
hlt
xor
rcr
loopne
mov
mov
sub
in
and
jae
sti
retf
dec
dec
loope
and
add
mov
jne
addr16
fwait
bound
cli
je
int3
pop
fdivr
repz
and
sub
dec
inc
addr16
call
fsubr
popa
dec
mov
add
jbe
jb
pop
xchg
fisttp
loopne
dec
ja
jb
xlat
xchg
fisttp
scas
add
loop
inc
shl
popa
dec
mov
mov
jne
addr16
fwait
sub
fs
mov
mov
dec
inc
arpl
call
and
xor
fld
retf
push
sub
xor
and
xlat
sbb
mov
sub
aas
jno
lods
jno
outs
pop
mov
fwait
jnp
outs
mov
jne
bound
ret
cmp
push
sbb
and
mov
mov
ret
mov
cmp
mov
outs
scas
scas
retf
cmp
sub
ja
mov
fdivr
repz
xor
jnp
outs
mov
cmps
pop
sub
jb
mov
push
xchg
xchg
mov
lods
cmps
nop
xor
inc
mov
add
xchg
sbb
mov
jnp
hlt
xor
lods
(bad)
xor
lods
jne
xchg
and
jbe
mov
sub
loop
pop
cmp
add
pop
imul
inc
imul
pop
in
out
fs
mov
(bad)
call
test
imul
retf
jg
mov
imul
jmp
hlt
(bad)
(bad)
mov
shl
ret
xor
neg
lods
dec
xor
and
retf
xchg
jge
hlt
xor
in
std
test
aas
rcl
or
inc
imul
enter
inc
cld
aas
imul
sbb
sub
dec
retf
imul
call
and
xchg
adc
mov
xor
scas
repz
pop
add
movs
jne
je
mov
push
mov
ret
mov
cmp
mov
scas
out
imul
xor
fisttp
imul
fs
push
mov
xor
and
mov
out
lds
xchg
je
pop
nop
fisttp
scas
sub
inc
cmps
xchg
test
data16
cmp
imul
mov
xor
xor
test
repz
fs
loopne
dec
arpl
repz
xor
mov
xor
mov
and
dec
xor
sbb
sub
dec
retf
imul
loop
inc
xlat
loop
outs
retf
xchg
fstp
not
cmp
dec
fbld
inc
ins
cmps
xchg
dec
fbld
xor
pop
add
lods
repz
jmp
xor
fld
xor
jge
in
pop
cld
aas
test
lods
repz
pop
add
test
ret
aam
enter
popf
mov
imul
adc
loope
push
fndisi(8087
adc
popa
dec
mov
out
cld
dec
retf
jne
push
fdiv
xchg
sub
hlt
mov
mov
push
(bad)
xor
popa
dec
cmp
mov
outs
mov
xchg
fimul
retf
jbe
je
or
mov
xor
and
jno
sub
mov
fbld
retf
xchg
and
mov
mov
dec
retf
pop
sbb
(bad)
jmp
xchg
sub
inc
pusha
test
xchg
sub
mov
xchg
popa
dec
mov
xchg
sub
dec
mov
push
je
and
ret
mov
dec
mov
mov
cmps
pop
and
jb
mov
retf
inc
dec
imul
loop
aaa
ret
dec
jns
xor
inc
dec
xor
popa
mov
cmp
mov
xor
sub
repz
xor
xlat
aas
int3
pushf
ret
aas
jno
lods
jno
adc
xor
mov
push
sub
add
and
jno
test
fisub
push
mov
call
rcl
fdivr
rep
and
xchg
sub
fadd
in
xor
inc
dec
xor
pop
dec
xor
jae
pusha
retf
data16
seto
xor
outs
aas
int3
push
aas
repz
(bad)
aas
int3
pushf
ret
aas
jno
lods
jno
ja
ins
inc
outs
sbb
movs
mov
pop
sbb
dec
outs
cmps
ror
imul
jb
popa
mov
cmp
pop
dec
retf
xchg
cmps
ror
imul
retf
push
sub
add
fs
mov
pop
aaa
repz
xor
xor
and
xor
and
xor
and
pop
imul
xor
lods
repz
add
fdiv
and
fcomp
mov
loopne
mov
retf
sub
mov
es
xchg
push
mov
dec
add
mov
imul
pop
fwait
(bad)
hlt
xor
push
dec
fadd
dec
mov
loop
inc
shl
popa
inc
mov
xchg
push
dec
fcom
jp
std
test
aas
rcl
mov
pop
imul
jne
push
xchg
lods
xor
test
jne
popa
and
repnz
(bad)
xchg
and
ror
dec
mov
loop
inc
retf
xchg
fstp
mov
fisttp
cmp
(bad)
iret
xchg
fucomi
cmp
arpl
mov
test
mov
inc
push
mov
or
imul
mov
test
add
xchg
fimul
out
loopne
retf
pop
ficom
sub
xor
push
jl
aaa
and
mov
fisttp
loop
cmp
cmp
out
push
fndisi(8087
jl
popa
dec
cmp
mov
push
mov
xchg
lods
jne
out
clc
dec
retf
ficom
mov
out
les
xchg
je
or
xor
mov
mov
aaa
test
mov
out
test
aas
jno
sub
mov
xchg
sub
sub
cmps
jb
loop
icebp
mov
xchg
scas
xor
xchg
fimul
aas
test
xor
cld
lahf
in
loop
cmp
cmp
out
push
fndisi(8087
dec
loop
dec
cmp
ins
and
push
call
(bad)
xor
movs
or
xchg
fimul
mov
fdiv
imul
add
cmp
jecxz
mov
xchg
movs
jne
push
and
cmp
mov
mov
xchg
and
cmp
sbb
add
sub
xchg
fisttp
cmp
sub
iret
add
mov
scas
sub
retf
mov
cmp
pushf
xchg
fimul
call
and
cmp
out
xor
movs
jne
dec
and
pop
push
arpl
sub
fs
gs
inc
ror
call
(bad)
xor
imul
arpl
cmps
jb
push
fisttp
imul
out
mov
xchg
and
mov
stos
(bad)
hlt
xor
je
jne
int3
pop
rcl
retf
imul
add
mov
(bad)
(bad)
xchg
jae
call
sub
inc
popa
jecxz
pushf
xchg
fimul
imul
push
sbb
sub
fs
gs
int
dec
retf
call
(bad)
xor
imul
arpl
cmps
jb
push
fisttp
imul
out
mov
xchg
and
mov
enter
add
imul
rcl
retf
imul
add
mov
(bad)
(bad)
xchg
jae
jae
fisttp
scas
sub
inc
popa
jecxz
pushf
xchg
fimul
imul
mov
push
mov
xchg
lods
jne
push
and
sub
fs
gs
jge
dec
retf
call
(bad)
mov
fisttp
push
mov
add
mov
cmp
retf
xchg
cmps
jb
push
fisttp
imul
out
mov
xchg
and
mov
adc
hlt
xor
je
jne
int3
jp
xchg
(bad)
retf
imul
add
mov
(bad)
(bad)
xchg
jae
fwait
lahf
fisttp
scas
sub
inc
jbe
mov
sbb
hlt
xor
cdq
dec
retf
xchg
fndisi(8087
fdivr
ror
call
(bad)
mov
fisttp
push
mov
jmp
mov
fisttp
imul
outs
push
add
and
mov
fisttp
cmp
push
into
xchg
fucomi
fistp
mov
fbld
xor
imul
in
pop
cld
aas
imul
(bad)
xor
xlat
repnz
cmp
cmp
dec
fs
dec
arpl
lods
repz
mov
and
retf
xchg
(bad)
mov
xchg
je
or
jae
mov
push
aas
imul
pop
dec
xor
mov
xor
retf
imul
mov
hlt
dec
retf
xor
retf
push
cmp
test
enter
jno
repz
jl
jno
retf
fisttp
push
mov
out
ds
xchg
(bad)
mov
xchg
je
mov
fisttp
cmp
aas
in
pushf
(bad)
aas
mov
fisttp
loop
cmp
cmp
sub
retf
cmp
mov
imul
xchg
sub
mov
imul
fs
(bad)
retf
xchg
(bad)
mov
imul
fdivr
in
push
aas
imul
pop
dec
xor
mov
cmp
cmp
dec
fs
dec
arpl
repz
mov
daa
mov
jmp
sbb
mov
out
out
clc
dec
retf
cmp
mov
or
ret
mov
dec
mov
imul
hlt
push
ror
je
mov
fisttp
cmp
aas
jno
lods
outs
add
push
fdiv
xor
movs
pop
inc
(bad)
mov
into
aam
retf
dec
adc
test
dec
adc
cmp
sbb
imul
xor
and
fild
and
mov
in
repz
fild
fcom
dec
retf
ficom
data16
out
(bad)
xchg
je
or
and
mov
xor
in
inc
cld
aas
test
scas
xor
xchg
fimul
out
mov
retf
xor
out
ds
xchg
(bad)
lea
mov
cwde
cmp
retf
call
popf
mov
imul
xchg
fndisi(8087
mov
loop
dec
cmp
imul
retf
aaa
not
mov
out
jmp
hlt
xor
mov
out
push
(bad)
xor
popa
dec
cmp
imul
xor
test
dec
fs
adc
xchg
(bad)
mov
loop
dec
cmp
push
mov
into
mov
xchg
and
aad
and
pop
imul
pop
imul
mov
outs
mov
sbb
dec
retf
imul
retf
xchg
fstp
mov
fisttp
cmp
dec
mov
xor
rcl
and
mov
xchg
cmps
pop
and
ret
wrmsr
imul
into
scas
or
loopne
dec
arpl
lods
repz
xor
rcl
out
js
retf
jne
push
fdiv
xor
cmps
adc
out
xor
xchg
(bad)
pop
sbb
hlt
xor
mov
out
push
(bad)
xor
popa
dec
cmp
push
mov
(bad)
mov
mov
xor
mov
out
imul
rcl
retf
cmp
mov
inc
cld
aas
imul
pop
dec
xor
mov
shl
xchg
sub
mov
and
xor
cdq
fmulp
xchg
(bad)
xor
test
dec
fs
xchg
fmulp
xchg
fistp
cwde
fisttp
scas
sub
repz
or
dec
mov
cmp
(bad)
mov
jno
fisttp
push
mov
add
dec
add
mov
out
ss
hlt
xor
mov
out
dec
dec
mov
call
(bad)
xchg
cmps
jle
sub
mov
xchg
movs
pop
sub
mov
fidivr
xchg
test
dec
fs
dec
retf
xchg
fstp
mov
(bad)
xchg
je
stos
add
mov
sub
xor
mov
out
xor
hlt
xor
mov
out
mov
loopne
mov
pop
repz
cmps
or
pop
and
mov
fisttp
cmp
aas
in
pushf
(bad)
aas
mov
fisttp
loop
dec
mov
fisttp
loopne
push
retf
xchg
fisttp
retf
cmps
mov
mov
fisttp
cmp
cmp
retf
cmp
dec
mov
fisttp
loopne
push
retf
xchg
fisttp
retf
cmps
pop
enter
mov
push
mov
out
(bad)
xchg
and
adc
mov
mov
dec
mov
xchg
fimul
loopne
dec
bound
or
xchg
fimul
pop
sub
retf
cmp
xor
retf
imul
out
lock
retf
cmp
mov
xchg
je
add
jb
mov
xchg
je
add
jb
mov
test
xor
xchg
fimul
loopne
dec
bound
xchg
ret
xchg
fucomi
push
in
jne
loop
fmul
add
sub
sub
xchg
imul
cmp
adc
mov
call
jae
push
and
rcl
sub
jmp
repz
jno
in
xchg
xor
dec
out
imul
add
mov
and
popf
fisttp
push
movs
add
and
jmp
dec
retf
xchg
iret
sahf
repz
jno
out
push
and
call
loopne
push
xchg
adc
pop
xchg
dec
imul
rcl
cli
in
je
imul
cmp
arpl
rcl
fdivr
repz
pop
imul
and
xor
and
pop
push
and
mov
or
imul
pop
and
jb
imul
aas
les
aas
repnz
and
sub
aas
in
call
and
mov
lods
cmps
xchg
sub
gs
call
and
mov
sub
je
and
xor
and
xor
and
lods
sub
xor
and
cld
sub
div
xchg
mov
repnz
stos
sub
dec
imul
xor
stos
lds
imul
out
mov
jbe
movs
mov
je
inc
mov
imul
inc
fbld
add
fs
jl
les
xor
imul
imul
jae
div
shl
imul
sub
mov
xor
and
xor
aas
les
jo
outs
es
xchg
and
into
push
mov
outs
push
add
shl
and
and
xor
movs
inc
retf
ins
and
mov
cmp
jne
xor
je
gs
jnp
div
adc
mov
hlt
gs
pop
and
xor
movs
inc
jb
and
mov
cmp
jne
and
xchg
fisttp
outs
cmp
jne
sub
xor
pop
aad
and
mov
inc
aad
imul
retf
fs
jne
xchg
xchg
sub
xlat
xchg
fisttp
outs
cmp
jne
and
pop
sub
inc
mov
hlt
gs
lods
and
sub
xor
and
adc
sub
es
in
mov
test
xor
movs
mov
lods
and
lods
sub
xor
and
mov
outs
push
add
(bad)
mov
lods
movs
mov
je
and
test
push
mov
fnsave
rcl
cs
bnd
scas
stos
sub
fisttp
enter
cmps
jbe
push
mov
imul
das
mov
mov
mov
mov
xchg
mov
imul
outs
push
add
cmps
mov
hlt
gs
cmp
sbb
outs
sbb
jne
daa
pop
mov
stos
int
xor
jae
div
movs
jo
gs
mov
leave
je
jbe
sub
xor
test
xor
in
pusha
call
fist
xor
movs
mov
imul
movs
and
xor
push
dec
adc
in
jbe
movs
mov
je
adc
pop
nop
hlt
xor
or
fdiv
gs
outs
sbb
jne
iret
xchg
retf
outs
sbb
jne
lods
inc
add
data16
jne
fs
cmp
pop
gs
mov
popf
mov
xor
(bad)
ret
sub
fs
xor
in
idiv
sub
les
aas
repnz
mov
retf
adc
popa
dec
cmp
and
xchg
sub
into
fs
repz
push
in
xor
sub
mov
push
fcomip
inc
ins
(bad)
mov
cmp
xor
sub
jno
sbb
xor
and
aas
retf
jne
and
mov
push
pusha
das
jne
es
and
pop
dec
xor
jbe
dec
xchg
and
js
and
fild
movs
retf
into
outs
push
xchg
mov
cmp
jne
movs
aas
les
aas
repnz
idiv
sub
sub
jne
cmps
push
xor
popa
dec
mov
fidiv
iret
imul
outs
sub
je
and
les
aas
bnd
and
fbstp
jle
loopne
mov
xor
and
retf
outs
sub
je
test
xor
div
push
fidiv
add
movs
sub
fbstp
jle
loopne
mov
xor
and
retf
outs
sub
je
test
xor
div
dec
pop
nop
hlt
xor
in
lahf
in
enter
imul
idiv
lods
push
cmp
mov
dec
and
imul
mov
xchg
and
sub
fidivr
sbb
jecxz
daa
shl
arpl
xchg
xchg
sub
sbb
data16
adc
imul
ja
and
ret
lea
fimul
shl
arpl
xchg
sub
jg
data16
and
imul
push
data16
adc
xor
xchg
xchg
sub
push
out
mov
cmp
(bad)
mov
mov
loop
mov
loop
dec
xor
nop
hlt
xor
mov
repz
cmp
mov
repz
scas
xor
and
in
push
aas
imul
inc
pop
xor
popa
push
mov
lahf
fs
imul
mov
fdiv
retf
outs
push
add
cmps
shl
imul
mov
lock
cs
mov
imul
mov
mov
imul
loop
cs
shl
mov
pop
nop
hlt
xor
popa
push
imul
add
pushf
(bad)
aas
jno
lods
jne
cs
mov
imul
xlat
test
mov
imul
mov
imul
out
push
fs
xor
sub
in
pop
cld
aas
mul
popa
sub
cmp
je
xor
and
xor
and
(bad)
int3
sub
and
jno
je
inc
iret
test
mov
leave
inc
mov
xchg
and
sub
fdiv
push
push
pop
imul
outs
dec
mov
push
rcr
and
mov
(bad)
aas
jno
lods
jne
push
rcr
and
retf
outs
push
add
test
ret
test
popa
push
fs
xor
sub
mov
adc
mov
cmps
pop
adc
stc
mov
(bad)
lods
repz
inc
push
mov
xchg
scas
repz
popa
inc
mov
xchg
cmps
rol
imul
jno
dec
mov
imul
cs
mov
push
(bad)
xor
popa
inc
fs
dec
inc
arpl
mov
mov
jmp
std
test
aas
sar
jae
xor
cmp
mov
lods
(bad)
retf
push
sub
retf
xchg
xor
rcl
and
ret
mov
jmp
shr
enter
jae
inc
arpl
ret
and
retf
fs
mov
push
(bad)
cmp
pusha
xor
frstor
ss
(bad)
cmp
pusha
xor
imul
frstor
xor
mov
imul
imul
jo
and
push
lods
mov
xor
xchg
repz
fs
mov
or
mov
mov
and
xor
fdivrp
cmp
xor
mov
xchg
cmps
pop
ss
mov
dec
loop
xor
and
je
add
and
fsubr
mov
xor
dec
jbe
out
mov
xlat
data16
cmp
imul
popa
xchg
dec
fs
xor
cmp
jmp
cmps
jle
loopne
cmps
mov
xchg
cmps
pop
xor
mov
xchg
cmps
pop
xor
popa
inc
mov
push
int3
mov
sar
and
mov
imul
cmp
popa
dec
pop
stos
xor
or
or
and
cmp
popa
dec
xor
xchg
(bad)
mov
sbb
jl
sbb
int3
call
and
mov
daa
or
ret
add
fdiv
xor
fiadd
sbb
xor
and
aas
loop
xor
xor
mov
and
jo
xor
into
mov
stos
and
xor
mov
imul
xchg
ins
or
ret
push
imul
aaa
jmp
mov
push
bound
int3
call
and
xor
and
inc
inc
cmps
jle
loopne
cmps
mov
xchg
cmps
pop
xor
mov
call
fdivr
aaa
outs
and
cmp
xor
mov
jmp
mov
and
mov
jmp
mov
push
sbb
int3
call
and
mov
and
or
sub
inc
ins
sbb
imul
or
and
jo
xor
xor
and
mov
sub
dec
xor
and
cmp
xchg
dec
retf
xchg
jnp
outs
mov
cmps
pop
cmp
jb
retf
outs
push
add
scas
ret
cmp
cmp
or
ret
cmp
push
movs
dec
fsubr
mov
jns
cmp
aaa
imul
sbb
and
mov
cs
xor
nop
hlt
xor
xchg
jecxz
stos
(bad)
mov
push
xor
out
loop
mov
cmp
xor
xchg
fucomi
retf
outs
push
add
sub
xor
xor
and
adc
mov
imul
push
fdiv
aaa
fdivr
ins
lods
mov
xchg
outs
mov
xor
popa
dec
inc
or
mov
jne
repnz
mov
fdivr
(bad)
push
lahf
in
fidiv
jno
test
jecxz
loop
mov
outs
mov
xor
fbstp
retf
loop
mov
inc
hlt
aas
into
push
mov
call
fdiv
pop
int
jo
and
cmps
retf
outs
push
add
cmps
jle
inc
fdivr
pusha
jne
mov
call
fdiv
sub
xor
jb
cmp
ja
imul
hlt
xor
push
dec
retf
xchg
cmps
jb
xor
in
std
test
aas
rcl
js
xor
int3
jp
imul
xchg
(bad)
mov
dec
retf
imul
ins
imul
imul
ins
loop
xlat
mov
dec
xor
xchg
(bad)
jbe
and
mov
push
cmps
cmp
mov
or
or
and
push
jmp
(bad)
mov
retf
dec
retf
jmp
mov
xlat
data16
push
es
push
xchg
and
test
dec
mov
xchg
dec
jl
out
mov
or
pushf
mov
dec
mov
sub
cmp
pop
retf
xchg
dec
jl
out
mov
gs
(bad)
mov
inc
and
mov
out
xor
scas
and
outs
xor
mov
retf
dec
retf
push
add
add
test
push
and
sub
cmp
imul
test
dec
xor
xchg
and
test
dec
cmc
mov
xor
je
and
mov
and
mov
das
jne
lods
and
mov
dec
retf
outs
push
add
movs
or
mov
dec
xor
mov
pop
or
cld
imul
fbld
mov
xchg
lods
gs
xor
xlat
jge
outs
xor
div
mov
xchg
add
or
lods
jo
popf
and
add
sub
jne
jnp
mov
not
pop
retf
xchg
push
popa
mov
xchg
je
imul
mov
outs
push
add
cmps
adc
test
dec
xor
test
xor
dec
dec
retf
imul
xchg
dec
retf
xchg
xchg
outs
jmp
fistp
xchg
fisttp
scas
sub
jno
sub
adc
mov
pop
jbe
fstp
out
stos
into
mov
mov
mov
xchg
scas
or
cdq
dec
fist
dec
xor
and
inc
mov
dec
retf
push
lods
outs
xor
mov
loop
ss
mov
imul
imul
xor
xchg
dec
inc
xchg
int3
mov
mov
enter
and
xor
mov
dec
sbb
pop
fist
dec
retf
xchg
and
sub
dec
xor
int
aaa
imul
(bad)
xlat
pop
retf
xchg
in
ss
mov
mov
xchg
cmps
adc
test
dec
xor
mov
fist
outs
cmc
and
aad
daa
sti
enter
mov
xchg
fstp
retf
stos
(bad)
mov
mov
pop
ss
lds
jmp
mov
out
rcr
xchg
movs
or
test
dec
xor
and
inc
(bad)
mov
fbld
mov
(bad)
imul
add
jbe
int3
push
bound
aas
mov
cli
dec
retf
loop
mov
outs
sbb
test
fisttp
test
mov
cmp
retf
loopne
cs
mov
out
mov
retf
xchg
scas
xor
mov
retf
xchg
daa
mov
out
mov
retf
xchg
lods
xor
out
lock
mov
dec
pop
ja
xor
xchg
push
xchg
fistp
cmp
mov
out
lock
mov
dec
inc
sub
dec
mov
xchg
and
dec
mov
(bad)
imul
add
xor
mov
(bad)
nop
imul
cmp
dec
cmc
sub
mov
xchg
mov
jmp
fistp
xchg
and
sub
mov
retf
xchg
in
ss
push
xchg
fistp
retf
loop
mov
cmp
mov
fist
mov
xor
mov
fist
mov
sbb
xor
lods
xor
sub
push
push
mov
push
sub
cmp
push
mov
imul
cmp
and
(bad)
mov
movs
retf
cmp
sub
or
mov
jo
mov
loopne
inc
fist
mov
imul
xor
mov
jo
enter
imul
xor
xchg
push
jmp
fstp
les
movs
mov
or
(bad)
call
and
sub
aam
fsubr
mov
xor
(bad)
call
and
ds
xor
xor
sub
mov
fbld
cmp
mov
jmp
add
iret
dec
jmp
adc
cmp
and
inc
jge
mov
push
mov
call
adc
mov
xchg
iret
xor
pushf
iret
mov
retf
xchg
and
mov
mov
int
cdq
enter
push
add
stos
(bad)
mov
xlat
xor
out
xchg
(bad)
imul
imul
push
sbb
jne
mov
push
push
mov
xor
and
inc
popa
movs
mov
outs
and
xor
push
mov
sub
sub
push
dec
into
movs
retf
cmp
push
stos
cmp
mov
out
fdivrp
imul
mov
dec
fcomp
loopne
mov
(bad)
imul
call
(bad)
retf
xchg
in
ss
ja
imul
dec
mov
xchg
fstp
xor
xor
test
dec
mov
rcr
xchg
and
xor
push
retfw
outs
push
add
int
enter
mov
retf
dec
retf
push
add
add
test
push
and
sub
cmp
or
xchg
jnp
outs
mov
cmps
pop
or
jb
mov
xchg
fiadd
jns
mov
lods
popa
dec
xor
pop
push
or
popf
cmps
xor
and
nop
loopne
dec
mov
mov
popa
jb
fdivr
dec
mov
xor
and
xor
cmp
mov
data16
ins
and
xor
xor
xchg
cmp
push
sub
mov
(bad)
imul
aas
popa
xchg
loop
retf
mov
popa
xchg
push
repnz
mov
popa
movs
repz
retf
retf
push
repnz
xor
daa
mov
jo
cld
mov
xor
popa
dec
mov
and
mov
(bad)
or
inc
mov
hlt
imul
xchg
fs
xor
popa
dec
xor
loop
xor
xor
cs
mov
fs
xor
popa
dec
xor
popf
addr16
push
sub
xor
and
jno
daa
cmp
sbb
fs
cmc
xor
imul
xor
and
xor
popa
dec
xor
or
inc
ja
sbb
xor
popa
dec
xor
popa
dec
xor
cmps
loopne
xchg
(bad)
xchg
and
and
daa
mov
jo
cmc
ret
xor
popa
dec
xor
xchg
and
(bad)
shr
dec
dec
sahf
cs
cmp
daa
mov
outs
movs
repz
push
add
jnp
outs
mov
ja
arpl
push
mov
jp
iret
repnz
imul
imul
add
xor
and
mov
sub
mov
push
sbb
inc
ins
loop
add
pop
xor
dec
xor
pop
cld
aas
div
in
imul
int3
xchg
imul
aam
fsubr
inc
lods
dec
ret
mov
dec
mov
lods
test
ret
cmp
mov
out
jge
mov
out
mov
xchg
(bad)
fsub
xor
loopne
mov
lods
adc
jne
loop
loope
std
cmp
sbb
retf
sub
imul
add
inc
arpl
fdiv
ja
xor
jns
popa
loop
xor
arpl
mov
sub
js
and
pop
imul
and
aaa
add
aaa
add
xor
fcmovnb
cmp
cmp
xor
lods
jo
xchg
fcmovnb
sub
pop
and
xor
fadd
loop
inc
mov
cmp
bound
lods
jne
stos
xor
pop
sub
jb
imul
xchg
movs
pop
xchg
push
cmps
retf
cmp
mov
jno
iret
mov
fdivr
jno
fcmovnb
sar
ret
enter
imul
xor
ins
lods
dec
sbb
xor
lods
push
cmp
mov
push
loop
mov
loop
fdiv
movs
mov
imul
imul
imul
xchg
push
mov
xor
loop
repz
mov
call
adc
mov
imul
and
cmp
in
cld
xchg
fs
ret
int
out
xor
jno
data16
ret
cmp
and
xor
popa
dec
add
faddp
mov
bound
movs
inc
in
inc
and
bound
pushf
mov
imul
xor
jne
loop
xor
mov
sub
and
pop
icebp
xor
rcl
fdivr
repz
mov
and
pop
outs
dec
mov
imul
in
inc
arpl
push
imul
loop
inc
shl
popa
inc
mov
push
and
add
xor
int3
push
imul
out
dec
fs
push
cmps
retf
push
sub
fcom
mov
loop
lahf
int3
loop
loopne
mov
in
imul
out
cmp
jecxz
enter
jne
dec
dec
mov
mov
imul
push
and
mov
inc
addr16
not
sub
dec
cmp
mov
fcomp
ja
and
jnp
ja
xor
loopne
add
frstor
test
add
push
jbe
int3
loop
imul
addr16
pop
add
push
sbb
or
lea
pop
inc
bound
or
jbe
int3
call
scas
repz
mul
jno
imul
push
cmp
mov
jcxz
enter
dec
jmp
pop
push
(bad)
hlt
xor
shl
xor
jge
retf
xor
sub
pop
pop
(bad)
hlt
xor
(bad)
imul
inc
or
and
sti
cmp
ins
loopne
dec
mov
ds
push
in
jne
loop
xor
arpl
movs
stc
subps
jne
lods
popa
push
xor
imul
shr
retf
(bad)
out
sub
aaa
imul
into
pushf
sub
inc
xlat
loop
push
test
retf
and
push
mov
lods
popa
push
sub
scas
repz
xchg
div
jecxz
dec
fild
push
imul
loop
outs
mov
xchg
sub
jo
aad
hlt
jne
repz
pop
dec
ss
and
(bad)
adc
xor
push
out
cmp
je
lods
repz
aaa
fisttp
xchg
repz
repnz
popa
pop
mov
fidiv
imul
mov
cs
aas
mul
popa
mov
popa
arpl
add
inc
hlt
fcomip
push
and
jecxz
mov
sar
push
aas
mul
imul
fs
sti
(bad)
pushf
lds
jno
and
mov
mov
cmp
lahf
in
xchg
jecxz
mov
sar
arpl
in
inc
hlt
mov
(bad)
scas
repz
cld
aas
div
in
std
test
movs
sti
mov
mov
div
lahf
xor
adc
mov
movs
sti
mov
inc
inc
mov
movs
sti
adc
es
mov
movs
sti
fs
sti
mov
je
mov
movs
sti
fs
sti
mov
or
sti
push
ins
movs
sti
mov
mov
hlt
xor
lahf
data16
and
lea
jne
sti
mov
es
ja
movs
sti
adc
es
and
movs
sti
sbb
es
xchg
movs
sti
mov
push
sub
movs
sti
mov
movs
or
mov
imul
sti
mov
movs
outs
pop
mov
fwait
adc
fs
loopne
movs
sti
mov
jl
mov
movs
loopne
mov
daa
sti
mov
movs
call
mov
(bad)
sti
mov
movs
pop
enter
mov
hlt
addr16
movs
call
mov
cld
sti
mov
movs
or
fstp
xor
div
stos
div
cmp
xor
(bad)
sub
jne
test
movs
sti
mov
mov
div
dec
mov
sti
mov
imul
movs
sti
cmps
dec
xor
mov
inc
cmp
mov
mov
movs
sti
or
es
sti
je
movs
sti
mov
mov
sti
rol
sti
mov
movs
sti
mov
movs
sti
jl
movs
sti
mov
mov
cmp
movs
sti
mov
xor
sti
mov
mov
hlt
xor
cmps
dec
xor
mov
inc
cmp
aad
and
mov
sti
or
es
sti
je
movs
sti
mov
mov
sti
rol
sti
mov
movs
sti
mov
movs
sti
jl
movs
sti
mov
mov
jne
sti
adc
es
sti
mov
es
sti
mov
movs
sti
inc
pop
(bad)
(bad)
test
aas
shr
enter
jae
imul
repz
xlat
mov
push
aas
popa
xchg
adc
inc
xor
int
xor
and
in
push
out
cmc
ror
xor
ss
nop
and
xor
push
pop
addr16
mov
cs
and
mov
xor
xchg
jecxz
loop
lahf
in
ror
stos
scas
repz
ror
test
std
icebp
xor
rcl
enter
mov
jne
mov
leave
inc
jnp
outs
xor
jnp
add
or
add
jne
push
xor
and
and
cld
mov
sub
add
xchg
sti
into
inc
out
ds
popa
dec
test
and
pop
arpl
imul
cdq
je
fwait
and
popa
dec
fs
mov
cmp
jecxz
push
out
loope
mov
add
cmp
je
in
push
out
adc
xor
loopne
mov
and
inc
xchg
adc
jno
sub
jno
ins
(bad)
repnz
scas
retf
xchg
fucomi
push
in
jne
loop
xor
arpl
in
out
movs
jne
inc
and
fadd
sub
cmc
pushf
into
mov
stos
fidivr
(bad)
loop
out
mov
call
and
inc
ins
adc
mov
out
push
fs
push
mov
retf
call
sub
mov
imul
dec
test
push
ss
mov
jg
push
mov
and
jecxz
lods
retf
fdivr
add
in
ss
adc
mov
(bad)
data16
and
xor
dec
mov
aaa
outs
loopne
jbe
daa
repz
int3
push
jns
and
lock
jle
sub
jno
iret
mov
xor
lods
inc
aaa
fdivr
xor
xor
jno
and
cld
(bad)
data16
outs
call
repz
loopne
data16
fcomp
rcr
in
imul
mov
loop
mov
xchg
scas
mov
add
outs
test
sub
xor
popa
dec
inc
mov
and
jno
int3
sar
and
dec
mov
add
loop
mov
and
repz
or
iret
test
imul
es
mov
es
mov
xchg
lods
je
fdiv
ja
jnp
popa
mov
imul
rcr
mov
stos
cdq
hlt
xor
int3
push
js
and
lock
sub
jno
iret
mov
xor
lods
inc
aaa
sar
xor
xor
jno
and
cld
(bad)
data16
outs
call
repz
pop
loopne
data16
cs
and
fwait
scas
mov
add
outs
test
sub
xor
popa
inc
inc
mov
inc
aaa
push
loopne
jbe
sub
popa
test
push
mov
sub
xor
sub
(bad)
data16
fnsave
in
scas
mov
xor
sub
sub
cmp
jne
fs
mov
retf
mov
outs
cmps
fcmovnu
jae
add
je
les
jb
sub
fadd
fmul
call
dec
mov
imul
xor
fs
inc
arpl
mov
jno
movs
inc
dec
jl
mov
imul
aam
fcmovnb
rol
fcmovnb
rol
jb
repz
add
shl
xor
rcl
cs
div
in
std
test
aas
shr
enter
and
bound
push
mov
and
ret
lea
dec
mov
fbld
sahf
imul
jbe
imul
lods
jo
aad
mov
shl
sti
push
jnp
aas
cmc
pushf
into
ja
ins
in
sub
aas
in
lods
jno
lods
gs
into
jecxz
dec
retf
jo
xchg
and
std
xor
sub
dec
xchg
sahf
gs
xor
mov
xchg
and
je
jl
mov
out
mov
xchg
(bad)
jno
and
mov
xor
std
xor
lods
je
test
mov
test
out
and
xchg
push
aaa
ret
mov
out
dec
retf
out
sti
test
xor
shr
imul
adc
xor
dec
mov
imul
imul
imul
out
dec
leave
xchg
(bad)
fdivr
mov
dec
inc
arpl
fsubr
mov
add
mov
(bad)
cmp
imul
(bad)
data16
(bad)
dec
retf
xchg
int3
xchg
aas
les
aas
repnz
xchg
inc
leave
xchg
fistp
sub
push
add
ja
jmp
out
fisttp
xchg
je
mov
and
mov
xchg
je
call
out
fisttp
xchg
je
xor
and
fdivr
and
xor
movs
push
rcl
out
int3
dec
retf
xchg
lods
jo
outs
push
add
dec
jne
sub
stc
mov
mov
out
fisttp
xchg
je
xor
and
fmul
mov
cmp
sub
dec
mov
mov
imul
xor
cmps
jb
jmp
push
in
jne
loop
xor
arpl
push
mov
sbb
fcomp
xor
nop
hlt
xor
fadd
loop
inc
mov
imul
enter
pop
push
and
xor
and
xor
and
inc
addr16
cmp
add
inc
mov
fcomi
mov
and
repz
xchg
push
dec
bound
and
cmps
retf
push
fcomp
and
mov
sbb
enter
xor
jnp
outs
mov
jae
stos
inc
inc
out
test
ret
and
dec
mov
xchg
push
mov
inc
addr16
cmp
adc
sub
jns
popa
loop
out
aam
mov
inc
lods
dec
ret
mov
fdiv
add
cmp
je
inc
jnp
ret
cmp
mov
call
out
mov
aam
loope
and
jno
cs
mov
imul
and
xor
and
xor
push
mov
outs
and
cmp
stos
iret
or
jg
ret
sub
and
inc
jnp
ret
enter
xor
sub
ret
enter
xor
adc
dec
sbb
push
fcomp
and
add
test
aas
shr
enter
scas
ret
and
popa
scas
push
loop
scas
mov
outs
jg
jmp
xor
dec
add
cs
pop
jb
mov
add
inc
addr16
cmp
shl
xor
sub
jbe
push
test
fdiv
and
inc
jnp
ret
enter
xor
sub
ret
enter
xor
adc
ret
enter
xor
sub
jno
iret
mov
xor
ret
aas
jno
lods
jno
xor
shl
cmp
inc
scas
mov
(bad)
aad
imul
xor
pop
pop
xor
and
add
int3
loop
xchg
loop
pop
enter
or
pop
in
fild
dec
mov
lods
and
xor
and
xor
and
push
mov
mov
xor
xor
fsub
imul
cmp
stos
iret
mov
jbe
int3
(bad)
jb
and
jno
iret
mov
pushf
ret
lods
xor
jnp
std
test
in
repnz
cld
inc
in
aas
cmc
loopne
xchg
xor
xor
jmp
and
fs
jecxz
mov
bound
ret
cmp
jns
repz
je
adc
sbb
loop
pop
add
sbb
int3
inc
cld
out
fwait
and
cmps
fdiv
arpl
mov
ds
xor
aas
int3
call
movs
repz
xor
movs
mov
imul
mov
xchg
mov
sbb
jl
sbb
jno
loop
xor
popa
dec
mov
and
mov
loop
mov
cmp
adc
and
repz
cmp
fwait
and
cmps
fcom
popa
dec
mov
fdivr
in
push
pop
ss
in
push
in
jne
loop
xor
arpl
jns
repz
adc
and
inc
fwait
add
addr16
and
mov
mov
jae
je
movs
cmc
xor
lods
repz
and
pop
call
push
mov
mov
push
xor
lea
push
push
mov
aam
or
shl
fidiv
adc
mov
int3
sar
mov
imul
repnz
int3
sar
mov
imul
(bad)
stos
into
mov
ds
jecxz
arpl
pop
inc
arpl
jle
jbe
jae
dec
sub
xor
retf
fidivr
jno
push
sbb
xor
jne
loop
push
jl
es
adc
jb
mov
addr16
push
stos
ret
into
ror
xchg
and
xchg
xchg
dec
retf
imul
fs
push
mov
retf
call
lods
inc
xor
mov
mov
stos
int
aas
imul
imul
or
fnstsw
mov
xchg
push
mov
xor
mov
push
sub
into
fmul
xchg
lods
xor
xchg
(bad)
(bad)
cld
dec
leave
xchg
dec
or
xchg
(bad)
loopne
(bad)
retf
xchg
fstp
mov
mov
imul
xor
imul
mov
scas
ret
xor
fcmovnb
cmp
and
jne
and
les
aas
repnz
mov
leave
xchg
lods
ja
mov
and
jno
arpl
dec
xor
cmps
fisttp
scas
sub
popa
mov
mov
push
sub
mov
scas
sub
jp
data16
(bad)
dec
retf
out
jno
and
lock
mov
and
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
xchg
dec
retf
xchg
fistp
cs
mov
sub
les
aas
repnz
xor
popf
mov
ret
xchg
cmps
dec
xor
pop
pop
iret
das
and
lea
and
xor
ror
loopne
dec
retf
xchg
fndisi(8087
pop
push
sti
hlt
xor
int3
dec
jo
and
lock
outs
jo
and
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
xchg
dec
retf
xchg
fistp
das
and
mov
sub
add
dec
retf
push
jo
and
lock
push
jo
and
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
xchg
dec
retf
xchg
fistp
das
and
mov
sub
dec
das
and
lea
mov
repnz
xchg
and
pop
or
imul
ret
xchg
jbe
mov
dec
mov
sub
fmul
loopne
retf
push
add
es
mov
out
fmul
xchg
je
adc
sub
imul
ins
imul
das
and
lea
mov
repnz
xchg
and
daa
add
push
jbe
fild
enter
fsubr
pusha
mov
call
sti
hlt
xor
xchg
dec
retf
xchg
fistp
das
and
mov
sub
fild
and
lea
mov
repnz
xchg
and
daa
add
push
jbe
fild
enter
fsub
mov
call
sti
hlt
xor
xchg
dec
retf
xchg
fistp
sub
mov
sub
xchg
and
lea
mov
repnz
xchg
and
pop
add
xor
and
ret
xchg
jbe
mov
dec
mov
sub
fdiv
addr16
call
dec
mov
pushf
ret
cmps
fisttp
loop
pop
pop
sub
lea
ror
add
push
jmp
cmc
xor
test
dec
fs
push
cmps
mov
xchg
je
in
data16
xor
imul
xor
popf
mov
ret
xchg
cmps
dec
xor
pop
pop
sub
and
lea
and
xor
ror
loopne
dec
retf
xchg
fndisi(8087
pop
push
sti
hlt
xor
int3
stos
ja
and
lock
inc
ret
lea
dec
mov
imul
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
xchg
dec
retf
xchg
fistp
sub
mov
sub
jmp
and
lea
mov
repnz
xchg
and
daa
add
push
enter
fadd
loopne
fmul
data16
shr
mov
imul
dec
js
inc
aam
and
adc
cmps
jb
loop
xchg
loop
fisub
push
xor
retf
cmp
sub
fcom
loopne
fdiv
cs
imul
dec
js
jge
sub
adc
cmps
jb
sbb
xor
and
ret
xchg
cmps
dec
xor
aaa
faddp
mov
retf
(bad)
dec
retf
out
jbe
and
lock
mov
imul
pushf
fnsave
fsubr
mov
rol
xor
mov
or
xchg
fimul
add
imul
and
mov
xor
dec
dec
and
mov
and
jb
xchg
(bad)
xor
mov
mov
test
xor
cmps
adc
xchg
(bad)
sbb
scas
fisttp
push
fisttp
retf
sbb
mov
cdq
jbe
xchg
fstp
int3
sar
mov
imul
data16
ucomiss
mov
and
jb
pushf
(bad)
ja
push
(bad)
mov
test
dec
arpl
jle
jbe
test
dec
arpl
cmps
jb
ror
xor
rcl
out
pushf
dec
leave
xchg
lods
jo
out
in
leave
xchg
movs
or
xchg
(bad)
imul
jmp
fild
rcl
mov
and
retf
cmp
dec
add
jbe
je
sub
and
mov
cmp
retf
sub
lea
mov
repnz
xchg
and
daa
add
jbe
fild
enter
fdiv
mov
call
fs
shr
mov
imul
dec
js
jge
sub
adc
cmps
jb
loop
xchg
loop
pop
fwait
sub
lea
mov
repnz
xchg
and
daa
add
push
jbe
fild
enter
fsub
loopne
mov
loopne
leave
xchg
movs
mov
imul
rcl
retf
xor
xchg
(bad)
jmp
lods
xor
xchg
(bad)
fwait
rcl
out
in
leave
xchg
lods
jo
adc
stos
mov
xchg
int
xor
imul
imul
or
mov
fwait
adc
repz
jle
imul
cmp
bound
int3
xchg
fimul
out
enter
fcmovnb
and
jge
jbe
test
dec
cmp
cmp
test
xor
or
ret
int
jecxz
mov
xchg
lods
inc
add
out
and
retf
xchg
je
sub
dec
leave
xchg
test
dec
retf
cmp
xchg
packssdw
mov
fisttp
cmp
pop
int3
xchg
(bad)
les
dec
retf
ret
sub
xchg
inc
retf
xchg
fstp
retf
cmp
sub
fmul
sbb
fsubr
sbb
xor
mov
mov
js
jmp
sub
adc
cmps
jb
loop
mov
loop
pop
outs
push
and
lea
mov
repnz
xchg
and
daa
add
push
enter
fcom
sbb
fcomp
mov
shr
mov
imul
dec
js
inc
aam
and
adc
cmps
jb
xchg
xchg
inc
retf
xchg
fistp
push
and
mov
mov
rcl
retf
xchg
je
adc
(bad)
int3
xchg
fimul
stos
sub
cmps
xchg
fisttp
push
cli
hlt
xor
xchg
dec
retf
xchg
fistp
push
and
mov
sub
not
mov
popa
and
xor
ror
xchg
and
daa
add
jbe
fild
enter
fmul
loopne
fdiv
sbb
xor
mov
mov
js
jge
sub
adc
cmps
jb
loop
inc
shl
mov
aas
repnz
imul
ret
xchg
cmps
dec
xor
aaa
faddp
mov
retf
(bad)
dec
retf
cmp
imul
sub
adc
cmps
jb
adc
xor
popf
mov
ret
xchg
cmps
dec
xor
pop
pop
pop
push
and
lea
and
xor
ror
loopne
dec
retf
xchg
fndisi(8087
pop
push
sti
hlt
xor
int3
xchg
or
xor
or
(bad)
imul
pushf
fnsave
pop
ss
hlt
xor
xchg
dec
retf
xchg
fistp
push
and
mov
sub
ret
mov
xor
xor
popf
mov
ret
xchg
cmps
dec
xor
aaa
fdivrp
mov
mov
(bad)
dec
retf
inc
or
xor
or
(bad)
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
xchg
dec
retf
xchg
fistp
push
and
mov
sub
mov
popa
and
xor
ror
xchg
and
pop
sbb
imul
ret
xchg
jbe
mov
dec
mov
sub
fcomp
loopne
pop
inc
cli
hlt
xor
xchg
dec
retf
xchg
fistp
push
and
mov
sub
les
aas
repnz
xor
popf
mov
ret
xchg
cmps
dec
xor
aaa
faddp
mov
retf
(bad)
dec
retf
jmp
dec
stos
jmp
dec
retf
sub
imul
xor
popf
mov
ret
xchg
cmps
dec
xor
aaa
faddp
mov
retf
(bad)
dec
retf
xchg
or
xor
jmp
dec
retf
xor
cmp
shl
repz
and
lea
mov
repnz
xchg
and
daa
add
push
jbe
fild
enter
fmul
loopne
mov
xchg
je
mov
fisttp
cmp
sub
fmul
sbb
fsubr
sbb
xor
mov
mov
js
inc
aam
and
adc
cmps
jb
add
jbe
fild
enter
fdivr
sbb
fsub
cs
imul
dec
js
inc
aam
and
adc
cmps
jb
rcl
xor
rcl
out
in
leave
xchg
lods
jo
jno
mov
ror
mov
imul
repz
mov
cmp
or
xchg
fimul
add
imul
pop
cmp
mov
scas
xor
fist
mov
popa
and
xor
ror
xchg
and
daa
add
push
jbe
fild
enter
fsub
mov
call
stc
hlt
xor
xchg
dec
retf
xchg
fistp
push
and
mov
sub
adc
lea
mov
repnz
xchg
and
daa
add
push
jbe
fild
enter
fdivr
loopne
mov
push
repz
int3
cmp
imul
imul
pushf
fnsave
fcom
pop
mov
rol
xor
mov
or
xchg
fimul
add
imul
and
mov
xor
in
data16
(bad)
dec
retf
packssdw
pop
imul
imul
imul
xchg
push
mov
xor
mov
aaa
repnz
mov
xchg
xchg
dec
retf
xchg
fistp
push
and
pop
imul
arpl
fild
enter
retf
fmulp
dec
leave
xchg
int3
(bad)
or
and
add
fild
enter
fmul
adc
(bad)
fdivr
adc
retf
xchg
fucomi
push
in
jne
loop
aaa
fsub
mov
cmp
push
data16
aas
int3
pushf
ret
aas
mov
fimul
loop
jo
xchg
and
pcmpgtb
cmp
mov
fimul
cmp
add
imul
pop
fdivr
repz
mov
data16
out
fisttp
xchg
je
xor
pushf
aam
retf
call
(bad)
xor
call
imul
and
xor
mov
repnz
imul
and
fbstp
and
mov
lods
inc
retf
xchg
cmps
jb
jmp
std
test
aas
shr
enter
and
bound
sbb
int3
pop
fdivr
repz
(bad)
or
sub
hlt
call
mov
retf
xchg
scas
repz
and
mov
xchg
lods
dec
sbb
mov
repz
loop
repnz
jb
jg
and
mov
imul
dec
retf
xchg
jb
add
mov
xchg
fild
xchg
xchg
fisttp
dec
adc
mov
xchg
test
loop
push
aas
mov
loop
mov
loop
loopne
imul
into
leave
xchg
fisttp
retf
(bad)
adc
xor
lods
xor
fisttp
fidivr
add
cmp
dec
xchg
fisttp
aas
cs
out
dec
retf
xchg
test
loop
push
aas
mov
jmp
xor
data16
aad
mov
loop
and
xchg
(bad)
ret
xchg
mov
add
xor
mov
out
imul
pop
or
mov
outs
and
add
xchg
(bad)
pop
(bad)
clc
hlt
xor
nop
push
imul
movs
pop
and
add
fmul
adc
push
and
fsub
retf
add
mov
imul
fs
add
xchg
(bad)
fmul
adc
leave
xchg
fisttp
sti
(bad)
xchg
xchg
cmp
xchg
fisttp
jecxz
dec
retf
xchg
xchg
cs
xchg
fisttp
retf
(bad)
cmp
fisttp
sub
xchg
cmps
jb
loop
sub
xchg
fstp
fcom
mov
pop
in
ret
mov
retf
clc
hlt
xor
mov
out
rcr
loop
lahf
int3
loop
cmp
cmp
dec
xor
fist
dec
retf
add
xor
mov
out
jge
mov
call
or
xor
and
repz
ror
and
jno
sbb
retf
imul
imul
lods
mov
mov
jmp
mov
fimul
cmp
movs
les
dec
retf
xchg
je
mov
fimul
cmp
pop
imul
imul
imul
add
ret
pop
and
cmp
imul
fimul
pop
imul
inc
fdivr
repz
xchg
and
xchg
fcmovnu
es
mov
push
clc
hlt
xor
mov
out
rcl
xor
loopne
repnz
push
dec
retf
xchg
and
sbb
sar
mov
fimul
cmp
sub
pop
pop
and
mov
jo
pop
aaa
imul
pop
and
mov
push
dec
retf
xchg
and
dec
retf
push
and
cld
(bad)
inc
popa
add
xor
int3
cli
add
xor
retf
imul
imul
xor
sbb
mov
imul
xchg
fimul
cmp
sbb
pop
push
fsubr
sub
mov
fimul
cmp
repnz
dec
retf
imul
call
(bad)
test
fisttp
jmp
cmp
sub
mov
mov
xor
cmp
imul
loop
(bad)
leave
xchg
fstp
repz
and
xor
xchg
adc
xchg
fistp
pop
and
retf
fiadd
adc
imul
sub
ins
popa
and
ret
mov
dec
mov
mov
lods
push
mov
xor
bound
jmp
aam
mov
add
push
sub
sti
pop
and
mov
xchg
lods
dec
add
push
sub
pop
and
mov
xchg
fcmovnb
and
mov
push
loop
inc
add
lods
je
loop
inc
cmp
popa
dec
cmp
jno
xor
popf
and
inc
mov
add
(bad)
pop
and
mov
and
cmps
retf
sub
and
loop
inc
mov
cs
mov
rcl
mov
call
sub
(bad)
call
sbb
ret
cmp
retf
mov
sub
pop
and
mov
lods
fcmovnb
and
xchg
repz
mov
fs
jecxz
out
cmps
ss
mov
cmp
popa
dec
mov
fdiv
xor
popf
test
pop
fistp
mov
cs
pop
imul
cmp
imul
xchg
push
mov
loop
aaa
fist
fneni(8087
fmul
push
mov
out
dec
fs
and
fdiv
adc
dec
imul
push
mov
cmp
xor
ja
arpl
jns
mov
fcomp
mov
mov
dec
mov
mov
dec
je
and
mov
xchg
je
mov
les
cmp
sub
test
cmp
mov
xor
movs
inc
jno
and
addr16
xchg
jb
xchg
fistp
pop
and
mov
sub
hlt
push
cmp
mov
push
mov
xor
fadd
loop
add
xchg
fstp
repz
in
fbstp
jecxz
mov
and
mov
xchg
je
mov
les
cmp
pop
inc
and
cmp
xchg
or
dec
sub
cmps
jb
(bad)
in
sub
xchg
fisttp
addr16
bound
imul
sub
mov
xor
iret
sbb
stos
jnp
outs
mov
pushf
mov
cmps
inc
and
addr16
call
dec
adc
(bad)
pop
outs
and
xchg
lods
outs
mov
fcomi
mov
and
jno
arpl
pop
pop
xlat
fisttp
scas
sub
popa
mov
mov
and
imul
pop
imul
inc
aam
repnz
jbe
test
dec
and
cmp
lds
xor
and
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
retf
pop
and
mov
sub
(bad)
pop
and
lea
mov
repnz
xchg
and
sbb
imul
ret
xchg
jbe
mov
dec
retf
cmp
out
call
imul
retf
cmp
push
pop
imul
imul
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
mov
out
cmc
pop
mov
call
or
sub
imul
retf
cmp
xor
imul
imul
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
mov
out
xor
loopne
fdiv
mov
shr
mov
imul
dec
inc
int3
mov
push
imul
pushf
fucom
mov
xchg
jae
ins
mov
mov
(bad)
and
retf
xchg
jae
retf
pop
and
mov
xor
inc
jnp
movs
jmp
and
mov
les
cmp
sub
mov
les
cmp
push
imul
lea
dec
mov
imul
imul
pushf
fnsave
pop
fwait
(bad)
hlt
xor
mov
out
movs
push
mov
call
sti
hlt
xor
mov
out
rcl
mov
call
push
mov
shr
mov
imul
dec
jg
inc
aam
and
mov
les
cmp
and
imul
sub
mov
les
cmp
ss
imul
lea
dec
mov
imul
imul
pushf
fnsave
fdiv
mov
rol
xor
mov
or
fisttp
add
imul
arpl
cmps
jb
add
xor
fisttp
add
xor
cmps
jb
add
xor
popf
mov
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
retf
pop
and
mov
sub
jg
data16
out
and
retf
xchg
je
fistp
mov
scas
sub
les
aas
repnz
xor
and
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
mov
mov
scas
sub
cs
mov
out
and
retf
xchg
je
lahf
pop
and
mov
sub
push
pop
and
lea
mov
repnz
xchg
and
and
aam
jbe
test
dec
and
cmp
shl
inc
addr16
dec
add
push
imul
sbb
xor
cmps
jb
cmp
xor
popf
mov
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
cvtps2pd
mov
sub
xor
data16
out
and
retf
xchg
je
adc
mov
scas
sub
xlat
pop
and
lea
mov
repnz
xchg
and
and
aam
jbe
test
dec
and
cmp
sbb
xor
rcl
out
enter
lods
jo
lds
xor
int3
mov
imul
repz
mov
cmp
or
fisttp
add
push
imul
arpl
cmps
jb
sbb
imul
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
scas
pop
and
mov
sub
jmp
push
retf
xchg
je
mov
and
mov
sub
fcmovu
gs
sbb
xor
popf
mov
ret
xchg
cmps
dec
xor
xor
les
and
retf
xchg
je
outs
pop
and
mov
sub
and
mov
popa
and
xor
ror
xchg
and
sbb
imul
ret
xchg
jbe
mov
dec
retf
cmp
out
call
imul
retf
cmp
dec
sbb
xor
jmp
imul
retf
cmp
mov
lock
pop
imul
imul
imul
cmp
sbb
aas
mov
sti
dec
retf
jmp
mov
les
cmp
mov
xor
cdq
dec
jmp
fndisi(8087
fs
mov
xchg
fndisi(8087
retf
(bad)
imul
imul
xchg
sti
dec
retf
sbb
imul
les
aas
repnz
in
std
test
aas
shr
enter
and
bound
pop
push
nop
dec
aas
int3
pushf
ret
aas
mov
fisttp
loop
xor
retf
imul
xor
scas
jmp
cmp
push
sbb
cmp
ss
and
xchg
rcl
out
movs
dec
retf
xchg
lods
jno
and
mov
cmp
sbb
and
or
fisttp
lods
cmc
xor
mov
sub
inc
inc
and
mov
xchg
dec
cmps
pop
imul
fs
xor
dec
mov
imul
(bad)
dec
retf
cmp
sub
xor
mov
add
retf
xchg
cmps
jb
(bad)
in
mov
es
add
mov
imul
fs
add
xchg
(bad)
fcom
mov
loop
mov
loop
dec
or
test
dec
or
cmp
mov
xor
test
imul
or
adc
dec
retf
out
std
or
retf
xchg
lods
xor
and
repnz
imul
xor
xor
cmps
jb
jmp
mov
fimul
das
and
xor
mov
mov
imul
imul
lods
mov
mov
jmp
mov
fimul
cmp
lods
rcl
dec
retf
xchg
je
mov
fimul
cmp
pop
imul
imul
imul
add
retf
inc
and
cmp
push
mov
fimul
sbb
push
aas
repz
xchg
push
leave
xchg
fcmovnu
es
mov
push
clc
hlt
xor
mov
out
(bad)
mov
call
pop
dec
retf
xchg
and
sbb
jecxz
or
and
mov
fimul
cmp
sub
pop
inc
and
mov
jo
pop
aaa
imul
inc
and
mov
pop
dec
retf
xchg
and
dec
retf
push
and
cld
(bad)
mov
xor
and
xor
int3
out
imul
inc
fdivr
repz
mov
imul
fs
and
xor
imul
xor
xchg
cmps
jb
push
fisttp
imul
repnz
out
test
retf
xchg
je
(bad)
ror
call
sub
call
add
out
test
retf
xchg
je
jnp
and
mov
pop
fnsave
test
dec
fs
xchg
and
xchg
fistp
mov
fild
mov
and
mov
add
push
imul
push
imul
pusha
clc
hlt
xor
int3
dec
sbb
xor
inc
inc
dec
mov
retf
inc
and
mov
xchg
cmps
pop
push
cmp
dec
cmp
adc
xchg
cmps
jb
cmp
mov
(bad)
call
fild
mov
jo
dec
retf
call
rcr
imul
inc
and
repz
mov
mov
imul
fs
xor
lods
dec
xor
imul
nop
xchg
fisttp
push
or
adc
xchg
fistp
inc
and
mov
xchg
iret
mov
pushf
sub
xor
jnp
outs
mov
lods
push
mov
xor
bound
jmp
aam
rcl
cmp
jno
xor
lods
repz
xchg
push
mov
xor
jno
mov
add
inc
and
mov
dec
add
xor
rcl
sar
repz
xchg
sbb
addr16
pop
xor
cmp
imul
bound
mov
je
dec
mov
imul
sbb
add
loopne
aad
mov
loop
inc
shl
popa
inc
mov
cmp
ja
and
bound
scas
repz
std
test
aas
rcl
and
xor
int3
and
imul
aam
repnz
dec
movs
jno
pop
and
pop
outs
fcmovnb
cmp
fstp
mov
lods
sub
jbe
sub
imul
push
dec
retf
cmp
rol
mov
push
ret
cmp
mov
out
sub
loopne
or
aas
les
inc
mov
add
loopne
lds
xor
loop
fwait
xor
jg
lods
push
mov
sub
mov
arpl
sub
rcr
repz
sub
out
ins
clc
hlt
xor
popa
inc
fs
xor
movs
inc
sbb
and
mov
imul
and
add
test
xor
or
add
cmps
jbe
cmp
sub
jno
je
stos
inc
and
mov
cmp
jno
je
xor
addr16
imul
sbb
gs
xchg
or
xor
fcomi
retf
repz
mov
idiv
lods
push
mov
sub
arpl
push
lea
pushf
pop
cmp
and
shl
popa
dec
mov
imul
pop
push
mov
imul
sti
and
fdiv
and
and
sbb
mov
cs
pushf
ret
xchg
lods
jo
push
fadd
adc
xchg
sub
mov
push
fadd
adc
sub
dec
inc
and
pop
push
fadd
adc
xchg
sub
pop
inc
and
pop
push
fadd
adc
imul
pop
push
fadd
adc
jnp
and
mov
mov
mov
add
add
div
sbb
mov
add
add
div
or
mov
add
add
xchg
xor
cmp
mov
add
add
test
xor
sub
inc
add
push
fadd
adc
(bad)
dec
and
pop
push
fadd
adc
sub
xlat
dec
and
pop
push
fadd
adc
xchg
sub
out
and
pop
push
fadd
adc
xchg
sub
test
xor
ret
lahf
lods
jo
xor
out
test
popa
and
pop
xchg
fild
fsubr
add
je
dec
cmps
mov
and
enter
test
dec
and
pop
xchg
fild
fmul
mov
enter
imul
and
enter
xchg
sub
and
mov
mov
dec
dec
retf
pop
or
jne
int3
dec
adc
adc
pop
jnp
div
fmul
inc
mov
nop
xor
dec
dec
retf
pop
cmp
je
int3
bound
imul
jnp
div
fmul
ja
div
in
nop
xor
dec
dec
retf
pop
or
jne
int3
push
adc
adc
pop
jnp
div
fmul
inc
mov
nop
xor
dec
dec
retf
pop
add
jne
int3
cmp
imul
jnp
div
fmul
dec
mov
nop
xor
lods
dec
add
xchg
fild
fmul
add
jne
dec
cmps
mov
and
enter
xchg
sub
arpl
mov
test
aas
shr
enter
fwait
inc
dec
cld
cmp
(bad)
shr
imul
cmp
mov
retf
xchg
lods
jo
xchg
hlt
xor
int3
xor
lock
mov
xor
int3
into
adc
aaa
ret
das
cmp
fs
and
xor
adc
xor
scas
repz
fs
dec
pop
cs
pop
imul
imul
add
imul
and
xor
and
fcom
mov
enter
imul
pop
adc
jne
dec
mov
add
cmp
(bad)
call
xor
and
and
mov
dec
jb
sub
out
mov
mov
imul
adc
adc
mov
lods
dec
mov
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
es
xchg
psllq
call
jne
and
sub
push
sub
out
mov
mov
imul
adc
adc
pop
imul
imul
outs
dec
mov
imul
imul
and
xor
and
cmp
xor
dec
and
mov
add
add
div
inc
xchg
xor
dec
mov
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
cmps
pop
pop
es
add
sbb
and
xor
dec
(bad)
sub
out
mov
mov
imul
adc
adc
mov
adc
xor
dec
mov
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
cmps
pop
dec
es
add
add
xor
dec
scas
out
sub
out
mov
mov
imul
adc
adc
pop
imul
add
gs
imul
jo
gs
jnp
addr16
imul
inc
dec
mov
imul
data16
mov
hlt
xor
and
xlat
dec
and
xchg
addr16
dec
add
div
and
add
test
xor
xor
dec
push
mov
aad
mov
add
xor
and
pop
in
hlt
xor
(bad)
ins
jbe
dec
mov
rol
xor
xor
jne
dec
mov
pop
adc
jne
dec
mov
pop
inc
push
jbe
dec
rcr
dec
sbb
imul
add
mov
cmp
sub
mov
data16
imul
adc
adc
mov
scas
xchg
xor
dec
int3
out
sub
xor
addr16
imul
and
pop
push
(bad)
hlt
xor
and
ja
and
retf
pop
int3
sub
int3
stos
adc
fdiv
adc
xor
adc
xchg
sub
sbb
mov
pop
dec
sbb
imul
add
mov
cmp
sub
mov
data16
imul
adc
adc
mov
js
xor
dec
mov
pop
adc
jne
dec
mov
pop
inc
push
jbe
dec
call
mov
xor
and
aaa
imul
add
mov
mov
or
jne
int3
pushf
into
xchg
fcmovnu
xor
adc
xor
adc
xchg
sub
and
pop
(bad)
imul
add
mov
cmp
sub
out
mov
mov
imul
pop
imul
xchg
rcl
cs
and
add
div
and
add
test
xor
xor
mov
and
pop
xchg
and
xor
xor
xor
je
addr16
mov
mov
hlt
xor
and
jae
and
xchg
pop
test
xor
and
add
div
and
add
test
xor
xor
push
add
xor
dec
jne
imul
imul
sub
hlt
xor
(bad)
ins
jbe
dec
mov
gs
mov
enter
imul
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
cmps
pop
xchg
and
xor
adc
rcr
mov
add
ins
jbe
dec
ins
out
sub
xor
icebp
xchg
xor
xchg
sub
xor
adc
xor
adc
xchg
sub
and
jb
jle
and
pop
retf
and
xor
and
xor
dec
mov
sub
out
mov
mov
imul
push
imul
imul
add
gs
imul
push
retf
data16
jae
call
and
pop
jg
mov
jmp
fsubrp
mov
mov
push
hlt
xor
and
xor
int3
(bad)
push
imul
imul
add
gs
imul
push
retf
data16
jae
xor
imul
imul
jg
mov
jmp
fisub
(bad)
hlt
xor
and
xor
int3
xchg
push
imul
xchg
or
mov
pop
adc
jne
dec
mov
pop
inc
push
jbe
dec
scas
pop
inc
dec
push
imul
add
mov
dec
push
sub
xor
imul
xor
rcl
sub
xor
adc
xor
adc
xchg
sub
sub
inc
faddp
imul
jg
mov
jmp
fsubrp
mov
mov
push
hlt
xor
and
xor
int3
sbb
hlt
gs
imul
add
gs
imul
jo
gs
jl
sub
popf
push
mov
jne
mov
jmp
(bad)
mov
mov
xchg
std
hlt
xor
and
inc
dec
and
xchg
repz
xor
jg
retf
xchg
lods
dec
sbb
in
fisttp
xor
jg
lods
push
mov
cmp
arpl
adc
shl
dec
add
sahf
push
xor
push
mov
retf
loop
(bad)
mov
mov
cmp
retf
xchg
cmps
jb
enter
imul
pop
imul
cmp
gs
ins
add
inc
fs
and
xor
adc
xor
scas
repz
fs
dec
pop
cs
pop
imul
imul
add
imul
and
xor
and
fdivr
pusha
push
jne
dec
mov
pop
adc
jne
dec
mov
add
cmp
(bad)
call
xor
and
and
mov
dec
jg
sub
out
mov
mov
imul
adc
and
xor
gs
test
xor
dec
mov
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
call
psllq
call
jne
and
sub
push
sub
out
mov
mov
imul
adc
and
push
retf
data16
imul
imul
outs
dec
mov
imul
imul
and
xor
and
cmp
xor
dec
and
mov
add
add
div
(bad)
retf
pop
adc
jne
dec
mov
pop
inc
push
jbe
dec
rcr
dec
mov
xor
je
call
out
(bad)
hlt
xor
and
(bad)
xchg
cmp
and
fimul
data16
imul
and
fadd
cmp
jbe
dec
mov
sub
pop
test
je
mov
push
mov
jbe
adc
and
and
xor
imul
fdiv
gs
adc
mov
xor
xor
and
jp
and
retf
pop
int3
sub
int3
shr
imul
xchg
adc
xor
adc
xchg
sub
sbb
mov
pop
dec
mov
xor
je
call
out
(bad)
hlt
xor
and
arpl
xchg
jmp
hlt
xor
fdiv
xor
adc
xor
adc
xchg
sub
sbb
mov
push
dec
mov
xor
daa
mov
cmp
sub
mov
data16
imul
sub
adc
fcom
ror
add
add
div
and
add
test
xor
xor
mov
and
pop
add
and
xor
and
pop
cmp
hlt
xor
(bad)
ins
jbe
dec
mov
mov
mov
enter
imul
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
cmps
pop
or
xor
and
imul
mov
imul
add
jbe
dec
ins
out
sub
xor
test
lods
sub
fstp
mov
mov
fdiv
adc
xor
adc
xchg
sub
and
fnstenv
xor
and
push
add
xor
dec
movs
out
sub
out
mov
mov
imul
sub
adc
pop
imul
add
gs
imul
jo
gs
jnp
loopne
shl
xor
test
xor
je
xor
push
xor
and
pop
jne
mov
inc
dec
add
div
and
add
test
xor
xor
shr
mov
lea
xor
cmp
xor
and
pop
adc
(bad)
ins
jbe
dec
mov
cmp
pop
jbe
dec
mov
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
cmps
pop
xchg
and
xor
(bad)
pop
imul
add
jbe
dec
ins
out
sub
xor
xchg
stos
xor
xchg
xchg
sub
xor
adc
xor
adc
xchg
sub
sub
cmps
mov
imul
jg
mov
jmp
fisub
(bad)
hlt
xor
and
xor
int3
into
sub
adc
mov
cmps
iret
xor
dec
mov
pop
adc
jne
dec
mov
pop
inc
push
jbe
dec
scas
pop
inc
dec
lock
jg
mov
jmp
fsubrp
mov
mov
push
hlt
xor
and
xor
int3
mov
imul
imul
add
gs
imul
push
retf
data16
jae
rcr
dec
mov
fs
imul
and
xor
and
fsubr
mov
enter
imul
pop
adc
jne
dec
mov
pop
pusha
push
jne
dec
mov
xor
fs
imul
imul
add
outs
jbe
dec
dec
in
sub
xor
jmp
cs
sub
sbb
ret
aas
jno
lods
jno
mov
dec
retf
xor
jg
lods
push
mov
cmp
bound
xchg
add
sub
int3
pushf
ret
aas
jno
lods
jno
imul
and
aaa
add
aaa
add
xor
fcmovnb
cmp
mov
jo
xchg
fstp
xor
and
fdiv
cmp
loopne
fnstsw
dec
xor
popa
inc
xor
mov
xchg
rcl
cs
aas
repz
inc
fs
inc
fs
dec
fs
push
cmps
pop
push
nop
hlt
xor
and
call
jae
jmp
sbb
xor
push
dec
pop
cmp
hlt
xor
jo
jbe
fcmovnb
cmp
dec
retf
call
fdivr
xor
and
jno
je
inc
jnp
mov
imul
adc
dec
retf
call
adc
call
mov
push
mov
cmp
inc
aas
les
aas
repnz
xchg
(bad)
mov
xchg
je
imul
fcom
sub
int
idiv
imul
hlt
xor
mov
out
pop
cmp
xor
aam
(bad)
dec
xchg
es
and
imul
cmp
retf
push
xchg
hlt
xor
mov
out
imul
xor
xor
mov
out
and
retf
xchg
je
fistp
mov
lods
movs
retf
retf
outs
push
cmps
pop
pop
xchg
hlt
xor
mov
out
movs
xor
xor
xor
mov
out
and
retf
xchg
je
cmp
push
(bad)
test
and
mov
fisttp
cmp
push
and
ss
xchg
sub
and
imul
sub
sbb
push
fstp
test
and
mov
fisttp
cmp
fisub
imul
xchg
cs
and
imul
xor
imul
push
hlt
xor
mov
out
push
xor
cmp
xor
mov
out
and
retf
xchg
je
adc
mov
fstp
xchg
and
mov
fisttp
cmp
cmps
and
aas
les
dec
retf
loop
ss
xchg
sub
and
imul
fs
xor
dec
mov
imul
and
jg
data16
out
and
retf
xchg
je
xor
gs
xchg
dec
retf
add
outs
jbe
dec
or
hlt
gs
aaa
(bad)
add
xchg
cmp
imul
lea
dec
mov
xchg
fucomi
outs
mov
lods
push
addr16
fwait
push
xor
jbe
int3
inc
fdivr
repz
loopne
in
cmp
xor
js
xor
test
dec
mov
sub
hlt
pop
sub
xor
int3
loop
imul
xor
xor
aas
shr
enter
and
bound
mov
sub
aaa
ret
mov
jmp
inc
fldenv
mov
xchg
je
pop
jge
mov
lods
ds
shr
mov
imul
int3
xchg
(bad)
mov
push
cmps
pop
(bad)
xchg
hlt
xor
mov
out
xchg
xor
int3
xchg
(bad)
sub
mov
ror
cmp
push
and
mov
push
cmps
pop
mov
pop
ret
xchg
(bad)
fsub
and
out
rol
lods
jo
(bad)
xlat
dec
retf
xchg
and
and
imul
add
(bad)
xchg
fisttp
push
xor
mov
out
leave
inc
retf
xchg
je
mov
and
mov
xlat
dec
retf
xchg
and
and
imul
or
imul
push
xor
mov
out
leave
inc
retf
xchg
je
addr16
mov
fwait
and
or
xchg
fisttp
push
xor
mov
out
leave
inc
retf
xchg
je
pop
jle
mov
(bad)
xlat
dec
retf
xchg
sub
add
fstp
mov
(bad)
xchg
fisttp
push
xor
mov
out
leave
inc
retf
xchg
je
retf
jg
mov
(bad)
xlat
dec
retf
xchg
das
ret
and
imul
fs
xor
lods
inc
ret
lea
dec
mov
xchg
fisttp
push
xor
mov
out
leave
inc
retf
xchg
je
mov
mov
(bad)
xlat
dec
retf
xchg
sub
and
imul
add
(bad)
xchg
fisttp
push
xor
mov
out
leave
inc
retf
xchg
je
mov
sbb
ret
xchg
(bad)
fdivr
dec
retf
loop
inc
shl
mov
aas
repnz
imul
and
int
fisttp
scas
xor
mov
ror
jmp
inc
int3
xchg
fild
pushf
fisttp
mov
aaa
(bad)
das
mov
loop
inc
shl
mov
aas
repnz
aam
repnz
(bad)
fdiv
push
push
jbe
int3
div
xchg
(bad)
fcom
sub
out
imul
xor
cdq
dec
enter
cmp
in
mov
imul
mov
mov
xor
push
mov
out
fisttp
xchg
and
jle
and
ret
lea
dec
mov
xchg
fisttp
add
outs
jbe
test
dec
and
cmp
cdq
dec
int3
xchg
(bad)
sub
and
idiv
aas
aam
loop
inc
fisubr
cmp
mov
xchg
fmul
mov
xor
xor
push
sbb
outs
jbe
test
dec
xor
xor
lods
inc
sbb
sti
test
xor
cmp
imul
fs
xor
cmps
jb
sub
outs
and
mov
xchg
je
pop
jg
mov
fdivr
xor
ret
mov
loop
mov
fmul
cmp
sub
mov
fimul
cmp
or
imul
mov
mov
out
fmul
xchg
je
sti
jl
mov
scas
xor
mov
fimul
cmp
mov
mov
fmul
call
mov
out
xchg
cld
hlt
xor
mov
out
adc
mov
call
test
dec
add
pop
lahf
cld
hlt
xor
mov
out
adc
mov
push
push
mov
out
fmul
xchg
cmps
jbe
cmp
push
imul
out
fmul
xchg
lods
inc
ret
lea
dec
mov
xchg
fisttp
mov
dec
adc
dec
push
in
sub
mov
fmul
cmp
mov
imul
sub
mov
fimul
cmp
and
and
mov
fimul
cmp
and
and
mov
ror
add
mov
ror
jmp
mov
xchg
fisttp
push
xor
mov
ror
lods
mov
dec
xor
sub
mov
cdq
(bad)
inc
mov
lods
xor
pushf
fisttp
lods
fild
int3
xchg
fisttp
out
fmul
xchg
je
loop
data16
out
fmul
xchg
je
dec
jge
mov
scas
xor
mov
fmul
cmp
jb
imul
mov
cdq
dec
retf
loope
fnstenv
mov
loopne
jle
xchg
fstp
dec
ins
xor
pop
sub
push
imul
lahf
fmul
jmp
mov
fmul
cmp
add
xchg
fisttp
sbb
mov
out
sbb
cdq
dec
retf
loope
(bad)
ror
xchg
test
pop
addr16
mov
out
fmul
xchg
je
xor
xchg
inc
int3
xchg
fcmovnu
(bad)
sbb
imul
xor
mov
cmp
bound
xchg
fmul
cmp
add
cmps
jb
loop
mov
leave
xchg
fisttp
xchg
dec
retf
cmp
imul
pop
sub
xor
adc
cdq
xchg
fisttp
xor
and
mov
imul
jnp
mov
cmp
fst
mov
sub
xor
and
xchg
imul
iret
retf
(bad)
in
and
int3
out
imul
sub
fcomip
sbb
xor
popa
mov
xor
and
test
imul
pushf
(bad)
aas
mov
leave
dec
retf
loop
fisub
mov
or
mov
imul
and
pop
jp
mov
pop
xor
xchg
and
aaa
fild
and
test
push
mov
xor
and
mov
out
xchg
pop
retf
xchg
je
aas
lock
scas
xor
retf
xchg
and
cmp
cmp
inc
fbld
cmp
add
sub
dec
xor
nop
hlt
xor
out
imul
jg
mov
mov
lods
ja
and
test
ins
loop
xor
mov
xchg
loop
xchg
adc
jg
mov
fstp
or
es
cmps
gs
inc
fisubr
cmp
mov
loop
mov
xchg
movs
xor
loope
add
cmp
in
not
push
mov
lods
mov
mov
dec
xor
imul
mov
retf
xchg
pop
jo
ror
retf
pop
test
dec
add
in
sub
mov
enter
int3
mov
(bad)
sub
and
mov
enter
test
dec
sub
imul
and
xchg
test
dec
fs
retf
xchg
cmps
jb
add
mov
enter
int3
mov
imul
adc
xor
movs
inc
ret
dec
and
pop
(bad)
cld
hlt
xor
mov
jbe
dec
jo
sub
je
gs
leave
aaa
mov
out
aam
xchg
fstp
add
hlt
xor
add
rcl
imul
and
repnz
mov
sbb
xor
lods
outs
sbb
(bad)
or
retf
xchg
test
mov
jbe
mov
cwde
inc
adc
hlt
xor
mov
jbe
dec
jo
sub
adc
fs
sub
mov
out
push
fst
hlt
xor
pop
mov
imul
xchg
add
es
sub
repnz
mov
imul
xor
cmps
jb
out
or
xchg
fstp
add
sub
adc
test
mov
imul
imul
imul
add
jne
int3
cmp
aas
jno
dec
mov
imul
or
mov
push
fs
add
xchg
(bad)
fdivr
sub
fist
or
ret
int
and
inc
shl
mov
xchg
jae
inc
(bad)
push
imul
out
push
add
faddp
mov
retf
push
nop
pop
repz
mov
cmp
xor
jecxz
mov
push
fs
add
xchg
(bad)
fcomp
xor
add
xchg
(bad)
or
ret
int
and
inc
shl
mov
xchg
jae
inc
(bad)
xor
imul
out
push
add
faddp
mov
retf
push
nop
pop
pop
fs
retf
push
nop
pop
aas
gs
mov
(bad)
aas
mov
leave
dec
retf
loopne
push
fst
push
out
sub
jno
test
jno
test
mov
cs
xor
and
pop
imul
cmp
aas
jno
dec
mov
imul
sbb
in
iret
bound
mov
mov
imul
stc
xor
xor
popa
outs
repz
mov
imul
inc
cld
aas
imul
mov
cs
mov
imul
xlat
je
cmps
fs
pop
imul
add
gs
imul
imul
imul
imul
add
ins
jbe
dec
push
out
sub
xor
and
stos
sub
mov
imul
sub
mov
add
xchg
fcomp
dec
mov
and
data16
or
mov
sbb
fisub
jno
mov
add
jbe
je
adc
mov
out
mov
xchg
movs
pop
xchg
jl
mov
test
and
pop
retf
xchg
jecxz
cwde
test
dec
xor
mov
mov
outs
mov
xchg
dec
fs
sbb
xchg
(bad)
pop
pop
nop
hlt
xor
pop
outs
jbe
dec
out
sub
xor
in
dec
retf
call
push
mov
dec
dec
add
and
xor
nop
hlt
xor
and
xor
mov
retf
xchg
lods
outs
sbb
out
mov
xchg
je
xor
and
fcomp
fs
imul
sub
cmp
cmp
cmp
pop
imul
and
xor
and
(bad)
mov
or
imul
lahf
and
dec
add
div
jge
xor
iret
scas
mov
shr
mov
jmp
jno
je
and
pop
imul
imul
cmp
mov
push
in
je
imul
jmp
bound
scas
or
inc
aaa
repz
mov
loopne
mov
mov
and
xor
push
push
mov
mov
xor
xor
and
or
mov
pop
aas
mov
out
mov
xor
adc
mov
mov
mov
mov
faddp
mov
mov
pop
dec
add
int3
mov
xchg
fstp
mov
(bad)
loop
mov
loop
(bad)
mov
mov
fmulp
dec
retf
xchg
int3
xchg
rcl
xor
xchg
fisttp
out
cld
dec
retf
xchg
je
add
sub
mov
imul
fs
adc
xchg
sub
ret
addr16
cmp
out
les
xchg
rdpmc
in
xchg
fisttp
and
mov
inc
mov
leave
xchg
fisttp
mov
(bad)
inc
mov
xor
loopne
fisttp
(bad)
call
inc
pop
dec
mov
out
ror
rdpmc
call
loopne
push
leave
xchg
fistp
retf
cmp
pop
imul
jo
gs
shr
xor
rcr
or
nop
hlt
xor
sub
hlt
ins
and
xchg
seto
xor
dec
add
movs
inc
push
push
and
mov
inc
add
and
or
nop
hlt
xor
push
mov
sbb
retf
xchg
jge
or
nop
hlt
xor
sub
mov
pop
dec
add
int3
leave
rcl
mov
loop
mov
loop
pop
xor
gs
cs
mov
and
xor
mov
xor
mov
retf
jne
sbb
dec
inc
arpl
mov
cs
and
ret
mov
dec
mov
imul
xchg
fisttp
pushf
dec
pushf
xor
pop
mov
enter
das
pop
mov
retf
inc
push
pop
mov
repnz
pop
pop
mov
mul
inc
inc
pop
mov
enter
dec
pop
mov
retf
inc
ja
mov
enter
jg
mov
hlt
gs
addr16
mov
hlt
gs
out
(bad)
mov
imul
push
xor
xlat
addr16
mov
xchg
pop
mov
retf
inc
jnp
mov
enter
arpl
mov
repnz
dec
push
and
and
inc
jnp
push
cmp
fmulp
xchg
(bad)
stos
addr16
mov
mov
pushf
ret
aas
mov
(bad)
loop
xor
retf
imul
xor
mov
out
in
mov
loop
pop
leave
xchg
(bad)
repz
ds
cmp
imul
pop
xchg
and
xor
mov
out
pop
int3
sub
int3
pop
imul
push
dec
retf
imul
imul
cmp
hlt
xor
and
arpl
mov
pop
int3
sub
int3
mov
imul
outs
and
mov
lods
scas
xor
out
ror
xchg
loop
ret
dec
xor
sbb
sub
mov
out
mov
dec
xor
and
mov
fisttp
cmp
xor
cs
out
mov
xchg
(bad)
or
ret
int
fdiv
pop
xor
mov
in
xchg
mov
retf
call
(bad)
xor
and
pop
mov
mov
imul
imul
out
test
xor
push
mov
xor
push
mov
and
ret
mov
dec
mov
xchg
fisttp
out
inc
leave
xchg
(bad)
pop
inc
cld
hlt
xor
mov
out
jmp
loopne
pop
xchg
and
xor
mov
out
pop
cmp
je
int3
pop
cmp
push
dec
retf
imul
imul
gs
hlt
xor
and
arpl
mov
pop
cmp
je
int3
mov
imul
outs
and
mov
xchg
cmps
jle
sub
mov
xor
adc
and
xor
ret
popa
jbe
dec
mov
dec
cs
xchg
adc
sti
bound
(bad)
mov
mov
push
sub
mov
fisttp
loope
mov
xchg
fisttp
pop
pop
mov
push
pop
xchg
pop
imul
mov
hlt
xor
and
xlat
bound
retf
pop
cmp
je
int3
es
outs
and
mov
and
retf
xchg
and
dec
retf
push
xor
(bad)
loop
lahf
int3
loop
cmp
cmp
dec
add
outs
jbe
test
dec
xor
and
(bad)
xor
xchg
adc
xchg
sub
retf
arpl
mov
and
ret
adc
and
xor
jecxz
jbe
dec
mov
add
ss
sub
and
mov
bound
mov
jmp
mov
fisttp
cmp
dec
add
outs
jbe
test
dec
or
xor
cmps
jb
add
mov
imul
fs
adc
mov
(bad)
and
ret
adc
and
xor
mov
imul
imul
pop
fwait
arpl
(bad)
daa
mov
loop
xchg
loop
cmp
cmp
dec
add
xor
xchg
fisttp
and
xor
cmps
jb
add
mov
imul
fs
adc
sbb
mov
(bad)
and
ret
adc
and
xor
dec
popa
jbe
dec
mov
icebp
sub
xor
adc
jae
and
fst
mov
out
mov
xchg
(bad)
or
ret
int
fdiv
pop
imul
and
xor
inc
mov
sbb
gs
jns
mov
and
xor
loop
retf
xchg
fisttp
sbb
sub
dec
retf
xchg
scas
xor
push
dec
retf
push
adc
xor
enter
fdiv
or
imul
dec
sub
xor
adc
out
and
(bad)
mov
mov
out
fisttp
xchg
sbb
sbb
out
and
cmp
cmp
sub
mov
(bad)
cmp
outs
cmp
jnp
dec
xor
and
mov
fisttp
cmp
adc
mov
sub
mov
jmp
mov
xchg
(bad)
pop
imul
and
xor
mov
adc
gs
xor
mov
sub
imul
retf
dec
xor
sbb
retf
xchg
scas
xor
push
dec
retf
push
adc
xor
enter
fdiv
retf
imul
add
adc
das
ins
and
frstor
mov
jmp
dec
retf
mov
out
dec
retf
xchg
cmps
jle
sub
cmp
mov
retf
(bad)
neg
mov
int3
pop
fdivr
repz
mov
xchg
(bad)
mov
xchg
je
sbb
ror
xchg
je
cmp
mov
scas
xor
mov
and
ret
mov
dec
mov
xchg
lods
jno
imul
outs
dec
mov
imul
fidiv
mov
std
and
retf
fdiv
add
xor
xchg
inc
retf
pop
xchg
outs
and
mov
push
add
and
jae
sub
cld
xchg
fs
ret
int
out
xor
mov
leave
xchg
fnsetpm(287
add
das
je
fild
rcl
mov
add
mov
(bad)
cmp
pop
fwait
(bad)
hlt
xor
xchg
inc
retf
pop
mov
mov
out
dec
retf
xchg
cmps
jle
sub
pop
imul
cmp
dec
addr16
xchg
inc
retf
pop
cmps
outs
and
pop
imul
add
faddp
mov
retf
(bad)
dec
retf
xchg
int3
into
xor
dec
sbb
fild
(bad)
and
xor
and
xor
and
xor
and
pop
dec
mov
xor
popf
mov
imul
mov
out
ror
scas
xor
xchg
fisttp
lods
dec
mov
imul
(bad)
dec
retf
xchg
int3
add
imul
sti
xchg
xor
in
dec
je
sbb
test
(bad)
cmp
movs
leave
data16
(bad)
dec
retf
xchg
int3
inc
xor
fdiv
mov
out
push
pop
loop
and
sbb
fild
rcl
mov
lods
and
sub
mov
imul
inc
fdivr
repz
fdiv
add
jbe
dec
iret
in
sub
fbld
pop
push
mov
and
sub
and
arpl
mov
imul
loop
push
leave
xchg
fstp
repz
and
push
mov
xlat
outs
and
imul
jecxz
mov
loope
push
sub
push
pusha
mov
mov
lods
scas
repz
mov
imul
in
and
mov
xor
cmp
jecxz
xor
pop
xor
fild
fdiv
and
shl
popa
dec
mov
mul
inc
pusha
fild
fsubr
and
xchg
sub
aas
xchg
adc
pop
outs
and
divps
sub
push
mov
je
int3
jmp
ret
aas
jno
lods
jno
pop
cmp
je
push
mov
jne
int3
div
imul
push
das
dec
add
div
or
adc
gs
jg
mov
mov
push
das
dec
add
xor
adc
mov
je
mov
mov
push
xor
out
test
xor
shl
mov
cs
repz
dec
xor
and
xor
adc
xchg
sub
xor
cmp
add
div
and
xor
retf
jnp
imul
push
and
xor
adc
xor
cmp
xchg
sub
xor
and
xor
adc
xchg
sub
xor
cmp
out
pop
ss
inc
jg
ret
and
push
mov
xor
pop
xor
jecxz
imul
xor
je
imul
arpl
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
mov
aad
mov
loop
or
xchg
pop
dec
lods
dec
je
int3
out
imul
(bad)
in
sbb
push
or
dec
fbstp
mov
inc
outs
cmps
dec
adc
xlat
pop
xor
(bad)
in
xor
fcom
fsubr
and
pop
je
out
mov
and
xor
or
xor
mov
imul
dec
fist
imul
rcr
dec
retf
xchg
mov
outs
mov
dec
sub
mov
iret
mov
jecxz
pusha
xchg
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
xlat
hlt
xor
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
hlt
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
shl
xor
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
and
adc
mov
xor
.byte
