js
mov
push
cs
ret
add
pop
xor
scas
imul
or
ja
push
fimul
(bad)
fmul
std
jg
and
xchg
out
cmp
xor
and
jge
retf
ja
fs
dec
ins
mov
fsubrp
mov
cwde
rcl
not
mov
xor
cli
jne
ins
mov
dec
ret
imul
pop
ss
dec
push
jl
jns
lods
push
xor
inc
push
int3
inc
adc
sbb
mov
jle
bound
lods
hlt
mov
fist
push
retf
mov
inc
mov
add
jg
jae
out
push
out
sti
and
es
sbb
les
cmp
xchg
loopne
in
fld
jmp
int3
retf
dec
cmps
psrad
pop
test
pop
push
mov
(bad)
mov
call
jnp
push
mov
lea
jae
cmp
xor
ja
pusha
lea
call
pusha
lea
jae
dec
inc
seto
mov
mov
jmp
mov
pushf
inc
call
push
adc
push
lea
jmp
sub
cmp
stos
aas
aas
adc
mov
cmp
ins
xchg
mov
pop
jmp
or
push
shl
(bad)
outs
push
pop
js
popf
mov
stc
mov
and
or
daa
sbb
ins
ret
lahf
xchg
mov
sahf
neg
mov
xchg
(bad)
mov
leave
lds
dec
in
cmp
jb
xchg
repnz
ror
jb
call
dec
inc
loope
mov
int3
push
sub
or
std
cmp
popf
std
inc
dec
or
imul
fld
mov
xlat
or
adc
inc
or
aad
add
icebp
jbe
push
cmp
das
mov
pusha
les
inc
adc
fsubr
call
in
and
mov
fdivr
scas
sub
loopne
and
xchg
(bad)
stc
cs
inc
adc
pop
sar
daa
add
inc
std
adc
fidivr
fwait
xchg
mov
or
ror
jmp
pop
inc
out
in
and
and
mov
sahf
cmp
bound
cmp
push
xlat
ja
aad
jmp
fsubr
fs
daa
xor
fnstsw
jo
xchg
test
pop
cmp
jge
scas
or
rol
pop
add
cmp
jno
cld
mov
std
lods
xlat
in
jp
loopne
inc
jbe
push
out
sahf
hlt
and
sub
adc
outs
and
sti
adc
jae
pop
sub
test
lahf
test
addr16
dec
mov
or
jp
sub
ret
fwait
mov
mov
ror
mov
lods
mov
xchg
sub
test
dec
loope
dec
ins
addr16
jmp
ret
ja
xchg
or
fld
dec
inc
sbb
add
nop
mov
lock
adc
imul
test
mov
pop
jae
pop
(bad)
(bad)
fld
dec
fld
sub
and
pop
retf
out
xchg
jno
xchg
hlt
ins
jns
imul
pop
xor
or
fadd
cmp
xor
mov
dec
aas
cli
jno
xchg
jnp
js
mov
mov
add
call
jmp
jmp
add
inc
gs
gs
imul
add
inc
gs
imul
add
mov
(bad)
cmps
push
pop
bt
push
cmp
jmp
and
not
stc
mov
mov
call
pushf
pusha
lea
call
pusha
lea
jmp
add
cmp
movzx
add
shld
neg
rcl
ror
mov
clc
bt
jmp
lea
ja
pushf
setb
call
call
lea
jae
pusha
cmc
cmp
sub
call
add
call
ret
loop
xor
cmps
pop
inc
clc
xor
and
jecxz
movs
sahf
imul
(bad)
sbb
sub
or
pop
mov
mov
push
inc
cmps
jl
jne
dec
jae
addr16
mov
rcr
pop
mov
ja
push
mov
test
ret
mov
aas
or
adc
je
inc
and
cmp
xor
mov
mov
lock
mov
nop
add
sub
push
(bad)
inc
out
out
pop
jmp
jle
push
aas
mov
mov
adc
call
inc
cdq
jl
jle
in
dec
mov
xlat
mov
add
ds
aad
out
inc
mov
mov
push
adc
push
ror
scas
call
scas
sub
test
outs
sbb
push
xor
les
(bad)
mul
jl
pusha
sar
nop
fistp
mov
adc
xchg
out
cwde
cmp
adc
pop
or
pop
pop
ret
mov
or
mov
adc
jl
lock
push
aaa
adc
call
dec
sub
add
mov
cwde
cwde
xchg
fsub
cmp
test
scas
jnp
outs
mov
rol
and
aaa
add
jae
test
fld
fs
aas
pusha
mov
scas
sub
std
or
pop
jl
sub
mov
lods
daa
cli
dec
mov
mov
mov
addr16
jns
xchg
jecxz
sbb
mov
fwait
ror
mov
jnp
dec
sub
jmp
cwde
in
rcl
lods
out
xchg
enter
and
shr
fdivr
xor
jg
xchg
(bad)
mov
inc
int
and
push
cli
xor
mov
push
lahf
push
or
cmp
dec
inc
xchg
ror
and
push
mov
mov
mov
pop
cmp
mov
or
xor
cdq
cmp
jmp
push
push
lea
call
pushf
push
jmp
mov
mov
mov
pusha
mov
mov
lea
jmp
bt
stc
add
pusha
push
mov
lea
jmp
stos
mov
mov
push
lea
jmp
add
jae
jb
outs
je
add
test
xchg
add
xlat
imul
movsx
mov
movsx
lahf
movsx
pushf
lea
mov
pusha
pushf
mov
mov
call
call
mov
cmp
movs
rcl
sub
or
push
popf
xchg
jp
repnz
mov
mov
pusha
retf
and
sbb
cmp
push
jae
(bad)
outs
or
inc
mov
dec
les
stos
jns
cs
lods
fidivr
in
push
rcr
add
mov
jb
rcr
dec
out
ss
into
pop
mov
push
ins
sub
or
gs
jne
jb
outs
je
imul
jns
add
dec
add
add
dec
outs
je
jb
gs
jo
outs
inc
add
lods
push
sub
xchg
cwde
lahf
mov
and
imul
sbb
mov
daa
xor
push
sbb
cdq
js
test
push
add
jae
in
fmul
xchg
stos
arpl
mov
imul
mov
pop
imul
push
and
pop
cli
pop
ins
clc
jg
jecxz
sub
cwde
cmp
jl
int3
xor
adc
movs
push
lods
icebp
add
ins
test
jae
push
gs
rcl
or
jns
mov
lods
adc
out
fidivr
add
push
out
pop
fnstsw
ss
shl
sub
jno
xor
xor
sbb
jg
sub
aaa
movs
mov
sub
adc
push
mov
lea
jae
pusha
lea
jne
call
shl
neg
shl
mov
lea
shl
mov
call
pusha
ret
sar
inc
lahf
repnz
bound
les
xor
inc
or
int3
mov
mov
(bad)
dec
test
gs
cmp
ss
and
or
mov
fisttp
(bad)
inc
sbb
repnz
fldenv
push
fsub
sbb
in
cmp
jp
out
xchg
cmps
pop
jae
fsub
inc
lock
pop
cmp
aad
mov
ss
ins
rcr
mov
aaa
fild
jl
push
dec
std
sub
and
dec
dec
popa
ret
jne
js
jb
aas
cmp
xor
into
add
gs
dec
and
push
dec
into
inc
ds
rol
(bad)
lock
jmp
add
and
out
push
iret
pop
pop
lahf
movs
loopne
int
add
push
mov
stc
js
fdiv
cmp
xor
sbb
(bad)
cwde
hlt
test
mov
mov
mov
sub
push
jmp
mov
test
jmp
cs
jmp
cmps
arpl
ins
movs
enter
outs
xor
xchg
mov
adc
or
fdiv
jae
test
jmp
jl
xchg
cwde
cwde
xchg
test
cdq
repnz
push
inc
fdivr
cmp
add
xor
dec
adc
cmps
ins
into
bound
xchg
rol
sar
cli
and
add
cmp
sub
mov
stc
call
add
dec
je
jo
jne
jb
dec
outs
outs
inc
add
gs
xor
fs
ins
add
mov
mov
and
jmp
or
mov
add
ins
mov
add
add
clc
jmp
cmps
lds
add
add
inc
cmp
add
das
mov
add
mov
add
jmp
ins
stos
add
adc
add
outs
jmp
dec
push
add
in
add
and
add
shr
add
aam
add
cmp
add
ret
scas
add
gs
add
push
cmp
add
add
cld
data16
ret
ret
add
lods
outs
add
pop
mov
add
inc
mov
add
cwde
ret
add
add
add
repnz
pop
popa
add
add
add
sub
add
test
add
add
add
mov
add
imul
shld
ret
add
add
add
mov
add
jo
add
xchg
mov
add
data16
add
add
adc
test
add
stos
ret
add
add
add
add
mov
add
movs
pop
add
jae
add
add
add
push
add
add
mov
add
add
xor
add
and
add
mov
add
repz
add
add
add
add
sub
add
add
mov
push
add
and
add
xor
add
add
add
imul
add
add
retf
add
add
lahf
jmp
inc
popa
add
add
add
outs
jmp
clc
mov
add
aaa
add
add
mov
add
inc
popa
add
add
add
outs
jmp
clc
mov
add
aaa
add
add
mov
add
add
inc
gs
jb
arpl
jae
gs
jo
call
dec
push
dec
dec
push
inc
push
dec
cs
dec
dec
add
add
imul
gs
imul
ins
dec
inc
dec
push
dec
inc
push
add
add
gs
je
push
jb
arpl
jae
add
shl
setle
xor
jmp
mov
mov
push
ret
clc
xor
sar
add
pushf
clc
rol
sete
mov
ror
neg
mov
pusha
push
pushf
stos
jmp
add
inc
gs
jb
jbe
push
jns
gs
or
mov
add
ins
mov
add
add
clc
jmp
cmps
lds
add
add
inc
cmp
add
das
mov
add
mov
add
jmp
ins
stos
add
adc
add
outs
jmp
dec
push
add
in
add
and
add
shr
add
aam
add
cmp
add
ret
scas
add
gs
add
push
cmp
add
add
cld
data16
ret
ret
add
lods
outs
add
pop
mov
add
inc
mov
add
cwde
ret
add
add
add
repnz
pop
popa
add
add
add
sub
add
test
add
add
add
mov
add
imul
shld
ret
add
add
add
mov
add
jo
add
xchg
mov
add
data16
add
add
adc
test
add
stos
ret
add
add
add
add
mov
add
movs
pop
add
jae
add
add
add
push
add
add
mov
add
add
xor
add
and
add
mov
add
repz
add
add
add
add
sub
add
add
mov
push
add
and
add
xor
add
add
add
imul
add
add
retf
add
add
lahf
jmp
inc
popa
add
add
add
outs
jmp
clc
mov
add
aaa
add
add
mov
add
inc
popa
add
add
add
outs
jmp
clc
mov
add
aaa
add
add
mov
add
adc
pusha
movs
cld
shr
pushf
jb
xchg
test
push
rcl
imul
out
jmp
repz
jg
mov
in
jnp
fisttp
std
mov
mov
sbb
(bad)
imul
push
mov
into
cmp
fs
test
(bad)
test
jo
mov
push
out
cli
mov
adc
sbb
imul
pop
cmp
push
cld
push
sub
call
das
inc
sub
adc
sbb
fadd
pop
mov
dec
dec
ins
jle
sub
inc
push
pop
mov
sub
fs
inc
rcl
jnp
mov
or
lahf
fmul
adc
adc
mov
ds
xchg
leave
sub
hlt
daa
adc
out
inc
inc
xchg
push
dec
push
(bad)
(bad)
out
cdq
arpl
cli
mov
popf
push
dec
test
out
jmp
in
repnz
inc
mov
push
mov
lea
mov
pop
test
dec
dec
mov
push
sbb
ins
jge
xchg
push
jecxz
mov
fsubp
sub
jecxz
sbb
add
mov
mov
mov
and
lock
je
or
or
rcr
adc
mov
arpl
bnd
sbb
sti
add
mov
fdivr
aam
push
push
push
mov
dec
shr
in
mov
mov
adc
pminub
rcl
and
pushf
mov
push
and
jo
add
scas
inc
jle
leave
mov
imul
cmc
das
add
popa
ins
push
inc
sar
cdq
adc
(bad)
sbb
cmp
clc
sub
loope
xor
scas
(bad)
sar
test
xor
ss
fwait
repnz
jmp
add
xchg
jae
aad
dec
xor
xor
ret
sti
repnz
aam
or
cmp
cli
mov
rcr
retf
mov
or
mov
retf
pop
jge
imul
xchg
mov
or
fisubr
jge
jno
or
leave
pop
dec
fadd
dec
lds
push
cli
fwait
js
and
jg
in
push
imul
mov
sub
or
retf
or
jle
retf
dec
pop
outs
jb
test
mov
inc
clc
ins
call
inc
fcomip
mov
push
add
iret
cmps
retf
arpl
outs
mov
adc
(bad)
sub
movs
pop
fcomp
loop
sbb
xchg
in
btc
imul
jno
cdq
push
sahf
pop
es
mov
jae
or
call
test
push
cs
mov
pushf
cli
rcl
mov
lahf
nop
cdq
je
push
mov
mov
ins
add
add
ins
nop
xchg
push
and
inc
dec
fstp
cmp
adc
jecxz
test
(bad)
lods
jnp
xlat
cmp
add
mov
mov
jle
or
cmps
cmp
sub
lahf
in
sti
cmp
dec
loopne
inc
aaa
(bad)
pop
push
push
mov
fidiv
popf
cdq
mov
movs
test
or
jle
out
jns
jns
imul
pop
cmp
rol
sbb
adc
iret
pop
and
xchg
ins
add
cmp
sbb
daa
cmp
xor
nop
cmp
and
push
inc
jmp
movs
dec
sti
or
adc
in
inc
fmul
jmp
loopne
and
out
dec
sub
popa
jb
push
fcomip
test
or
fisubr
imul
cmp
mul
pop
fsubrp
xor
in
idiv
shl
and
in
mov
xor
out
cmp
mov
mov
into
pusha
jb
int
push
mov
(bad)
jmp
or
cld
mov
adc
retf
pusha
push
not
aad
(bad)
jp
(bad)
jne
xchg
das
test
loopne
out
or
sbb
scas
add
sti
pop
adc
sub
add
dec
cmp
mov
jno
jmp
stos
arpl
neg
push
out
test
mov
xor
pop
(bad)
sbb
pop
cmp
retf
add
stc
mov
sbb
mov
jo
test
inc
clc
jns
rcl
pushf
xchg
test
pop
sub
pusha
loope
int3
jle
mov
jno
mov
inc
jbe
add
cmps
(bad)
push
cmps
cli
imul
es
push
jecxz
mov
iret
jnp
mov
dec
jg
mov
out
pusha
xor
add
call
inc
jge
dec
jae
leave
fld
ds
inc
call
lea
or
mov
popa
dec
jmp
popa
mov
mov
push
xchg
push
or
sbb
mov
adc
sti
(bad)
push
sub
inc
pop
push
pop
cmp
xor
inc
jno
adc
push
fidivr
xor
(bad)
fs
and
or
jb
or
add
pop
addr16
pop
sbb
mov
xchg
ror
sub
ins
mov
push
pop
popa
xor
xchg
gs
xchg
push
push
(bad)
xlat
cmp
and
loop
or
outs
mov
mov
xchg
ja
dec
out
mov
mov
ret
je
inc
mov
mov
push
fsubr
add
int
xchg
lds
xchg
push
xchg
jecxz
jecxz
inc
jno
sar
and
or
ja
aam
in
adc
jae
push
cmps
jns
push
loopne
aas
arpl
mov
rcl
sub
xchg
pusha
clc
test
(bad)
call
jbe
inc
jecxz
neg
xor
or
jbe
jno
cmp
inc
shl
jns
xor
adc
sbb
cmps
xchg
repnz
(bad)
inc
test
jge
mov
push
pop
loope
mov
inc
or
and
and
add
add
cmp
sub
dec
jp
pushf
pop
ja
pop
ins
xor
pusha
in
data16
add
dec
je
jp
cmp
into
aad
inc
mov
scas
push
das
dec
shl
loope
repz
mov
ror
pop
jl
add
fsubr
push
mov
cmc
call
jbe
iret
idiv
test
xor
scas
xchg
ds
and
lea
jns
dec
mov
jb
cs
rcr
push
cmp
push
fmul
jl
mov
rcl
stos
in
jb
gs
pop
xchg
inc
scas
push
xchg
dec
and
xor
adc
daa
sbb
xchg
cmp
xor
and
mov
stos
iret
sbb
outs
or
mov
fild
pop
ja
fcom
hlt
add
pusha
mov
and
nop
mov
mov
mov
repz
lahf
push
mov
aaa
push
(bad)
aam
push
mov
mov
cmc
imul
lds
jnp
dec
lahf
push
pop
ja
aad
int
loope
pop
mov
out
xor
sub
mov
dec
or
xor
leave
dec
aad
es
in
shl
push
sbb
stos
jmp
jb
inc
mov
ins
cmc
push
mov
loope
sub
cmps
aaa
add
iret
aas
cld
mov
xchg
xor
dec
pop
jecxz
shl
(bad)
hlt
jb
dec
mov
mov
(bad)
test
inc
icebp
rcr
popa
ins
loope
jb
mov
fmul
pop
mov
test
add
in
popa
(bad)
call
in
and
sbb
inc
or
rcl
frstor
push
jl
out
pop
fistp
cmps
pop
call
retf
mul
cmp
mov
inc
cmps
jge
jbe
mov
mov
xchg
out
inc
lock
mov
sti
jle
popa
mov
inc
das
test
cmp
push
push
inc
(bad)
add
dec
jnp
shl
xor
mov
leave
pop
jno
add
dec
push
popf
(bad)
(bad)
dec
mov
push
ds
push
cmp
mov
lods
mov
cmp
loope
stos
jnp
sub
jge
fdiv
test
leave
out
adc
mov
movaps
jmp
call
inc
dec
or
add
xacquire
std
pop
shl
mov
jg
clc
or
out
mov
push
pusha
movs
push
sbb
dec
dec
xor
xchg
sti
cmp
cwde
iret
iret
rcl
jnp
jl
inc
jl
les
bound
mov
cwde
mov
ins
cdq
jmp
outs
stos
popf
xchg
js
repz
xchg
sub
jp
cmc
or
jb
jmp
jecxz
ja
inc
and
aam
dec
int
ins
cmp
inc
dec
adc
mov
or
add
sub
cld
call
dec
mov
ret
into
mov
dec
aam
mov
fwait
into
psubusw
movs
pop
xor
cmp
gs
pop
dec
xchg
mov
cdq
cmovl
xor
mov
fsubr
pop
movs
cmps
xor
cmp
jle
arpl
sti
scas
cdq
aas
adc
int3
movs
(bad)
mov
clc
jl
in
sbb
push
arpl
ficomp
or
leave
enter
(bad)
repnz
or
inc
fdiv
fdivr
push
ins
mov
das
sbb
(bad)
gs
and
std
sub
mov
in
movs
popa
and
adc
xor
sub
add
mov
push
pop
shr
adc
mov
sti
or
in
stc
in
push
adc
xchg
mov
cmc
xor
jecxz
scas
fisttp
imul
cmp
add
aam
ds
inc
es
cli
fs
xor
test
adc
cmp
into
loopne
div
push
xor
xchg
das
fstp
sub
aad
ins
adc
mov
les
ins
gs
mov
movs
scas
pop
ins
pushf
out
xor
add
gs
out
in
dec
xchg
add
add
out
stc
push
in
push
cmp
xchg
ss
shl
fild
mov
jb
adc
retf
xchg
pop
xchg
cmp
aam
dec
add
adc
out
pusha
and
addr16
(bad)
mov
xor
in
mov
std
mov
int3
mov
push
sub
pop
mov
fadd
pop
(bad)
shl
retf
ja
mov
and
jmp
aad
push
mov
inc
scas
ror
mov
loop
sbb
push
rcr
cmp
and
xor
imul
jl
push
jnp
xchg
(bad)
push
int3
jae
cmp
jne
dec
dec
xchg
dec
and
stc
imul
xchg
sbb
push
or
not
enter
sbb
int
fiadd
jnp
in
aas
rcl
fistp
std
cld
int
jae
(bad)
mov
mov
fcmovnu
inc
pmaxsw
adc
test
ret
pop
icebp
fsub
sub
pop
mov
repz
xchg
shr
mov
push
addr16
push
xchg
ret
dec
mov
mov
inc
sbb
mov
aam
push
jmp
sub
js
loop
xchg
test
xchg
jns
push
mov
mov
sbb
add
mov
nop
dec
xor
mov
adc
lahf
pushf
push
ror
sahf
push
inc
and
xchg
jo
rcl
mov
jne
push
pop
cli
aas
fs
(bad)
mov
dec
pop
inc
jne
in
lahf
or
ret
(bad)
xchg
aaa
xor
mov
cdq
mov
inc
je
loop
sub
inc
jmp
mov
mov
ret
xor
mov
xchg
out
bswap
jmp
ins
(bad)
cdq
rcl
inc
push
dec
jge
loop
fnstenv
cmp
pop
inc
sbb
mov
push
jnp
dec
push
jno
aas
jl
mov
push
loope
or
out
mov
push
or
adc
sub
sti
mov
sbb
aaa
push
inc
push
frstor
imul
imul
outs
inc
out
mov
adc
and
jmp
lea
loopne
add
cmp
mov
sub
ret
lahf
out
call
mov
jae
inc
adc
imul
fs
mov
push
das
(bad)
mov
out
scas
and
lods
inc
dec
mov
adc
add
ins
gs
arpl
add
inc
push
add
jb
(bad)
dec
push
pop
mov
movs
shl
cdq
loop
mov
outs
movzx
enter
in
inc
enter
mov
cmps
les
int
leave
jecxz
add
leave
neg
jmp
out
sub
daa
out
shr
and
stos
cmc
lea
jl
jg
push
cmps
adc
jbe
sub
das
clc
mov
pushf
sub
shrd
lea
test
bt
sub
call
cmp
sub
pusha
mov
inc
lea
call
stc
xor
rcl
bsr
mov
clc
pusha
cmc
cmp
pusha
push
call
pushf
call
sar
retf
js
jnp
mov
and
fidivr
ins
out
dec
adc
pop
sub
test
mov
dec
movhps
aas
dec
icebp
or
addr16
ficomp
(bad)
in
adc
or
sti
and
xlat
dec
xor
push
and
xchg
dec
aam
fsub
sub
jmp
inc
enter
ret
or
xor
aas
std
mov
repnz
mov
cmps
jge
mov
fwait
movs
imul
push
scas
gs
pop
ins
in
xlat
ss
inc
jg
(bad)
and
loop
xchg
icebp
push
jecxz
mov
ins
push
mov
add
retf
ja
inc
in
pop
ss
in
dec
fwait
fwait
mov
in
sub
xor
inc
lock
pop
shr
sbb
enter
clc
gs
adc
std
sbb
add
or
in
inc
xor
dec
or
aam
inc
add
rol
lea
gs
xor
(bad)
add
push
js
popf
cdq
ins
bndldx
pop
mov
pop
mov
aas
fnstcw
cmp
dec
aad
ins
aaa
or
idiv
int
call
sbb
test
pop
sub
sbb
cli
(bad)
mov
pop
dec
jmp
push
vcvtsi2sd
cmp
not
lock
mov
pop
jo
or
scas
sub
test
dec
mov
ins
shl
(bad)
aad
pop
mov
push
iret
pop
lods
adc
mov
mov
ret
sub
adc
cli
enter
adc
ret
call
mov
retf
mov
enter
cmp
push
add
jae
inc
jecxz
adc
loopne
xchg
pop
popa
scas
lock
xor
iret
mov
mov
cmp
je
and
shr
mov
and
into
mov
adc
cmp
pop
scas
nop
jns
dec
js
push
fld
je
push
mov
pop
call
or
push
out
cmp
out
xor
pushf
cdq
rcr
int
popa
lock
push
add
mov
pop
xor
cli
sbb
sub
(bad)
dec
movs
mov
retf
retf
(bad)
xchg
add
jnp
scas
or
(bad)
lahf
cmp
jbe
jmp
push
mov
pop
enter
mov
xor
ret
call
mov
stc
clc
stc
add
pushf
test
mov
mov
bsr
shld
call
setg
bt
stc
ror
call
shl
cmp
add
rcl
shl
neg
pusha
mov
mov
test
jmp
add
inc
gs
outs
fs
gs
imul
add
arpl
inc
gs
gs
jo
popa
je
inc
add
scas
test
jnp
add
jmp
pushf
mov
mov
setne
cwde
mov
lea
bswap
not
mov
lea
pushf
pushf
mov
push
mov
mov
mov
push
push
ret
jmp
pusha
into
xchg
call
pop
inc
xor
aad
sbb
and
push
pop
call
mov
mov
fwait
cwde
inc
push
fmul
or
mov
dec
mov
push
cmovp
xlat
dec
(bad)
cmps
out
push
lock
or
sbb
aam
cmp
add
aam
xchg
mov
jg
pop
iret
(bad)
retf
jo
out
ins
nop
mov
push
je
out
in
mov
outs
and
mov
add
fadd
sbb
dec
mov
pusha
cmps
lock
and
cld
xchg
int3
retf
dec
lock
out
sub
dec
mov
nop
daa
mov
dec
sbb
mov
int
mov
jb
sar
pop
dec
push
jae
mov
inc
and
push
int
bound
cmp
sbb
mov
movs
ds
cwde
pop
inc
aas
and
push
sub
scas
test
scas
int
pop
into
repnz
mov
and
inc
xchg
daa
jl
mov
dec
inc
dec
sub
and
mov
inc
sub
dec
cli
sub
jle
lds
cmps
xor
adc
ins
and
or
or
push
push
jp
cmc
clc
sar
xchg
pop
cmps
push
nop
or
xor
stos
fstp
lods
xor
sbb
fld
popf
call
mov
jmp
dec
mov
call
pop
fst
push
jo
pop
(bad)
jp
jnp
xchg
mov
int
push
mov
sbb
xchg
cwde
fs
xchg
dec
fisttp
es
hlt
popa
(bad)
leave
sbb
mov
in
jmp
mov
mov
jecxz
cmp
jmp
int
mov
(bad)
xchg
nop
pop
enter
inc
sbb
fidivr
imul
push
push
sub
daa
fcom
pop
push
pop
daa
jmp
cmp
test
fsub
jmp
stos
xchg
adc
daa
out
mov
add
pushf
das
xchg
jno
mov
mov
mov
movs
xchg
scas
jnp
dec
fsubr
neg
add
sbb
and
sbb
mov
stc
test
push
lea
je
call
call
add
push
dec
gs
jo
outs
inc
outs
jne
push
add
stc
ror
test
cmc
add
pusha
rol
stc
cmp
test
neg
jmp
lea
call
push
pushf
mov
mov
lea
jae
dec
mov
push
mov
call
dec
push
push
cs
ins
add
shl
pushf
clc
jmp
cmc
sub
push
lea
jne
jmp
dec
mov
push
mov
shl
jmp
scas
idiv
nop
leave
pop
and
jne
mov
pop
cmps
mov
and
sbb
cdq
sub
in
inc
aam
sub
sub
aam
sbb
xor
inc
call
xchg
add
mov
mov
pop
cmp
call
dec
scas
pusha
enter
mov
cmps
clc
cmc
arpl
cld
dec
out
fimul
imul
test
idiv
adc
jo
push
lahf
out
imul
ins
push
fld
mov
fwait
imul
add
bt
xchg
add
sbb
mov
mov
pop
pop
jmp
popa
push
mov
iret
retf
cmp
cld
xchg
out
mov
jecxz
aaa
es
push
mov
ins
mov
jnp
call
js
(bad)
leave
mov
lods
push
enter
xchg
sub
jbe
push
js
sti
outs
inc
fiadd
fdiv
outs
shl
frstor
xchg
out
mov
jecxz
test
shl
dec
fmulp
xlat
and
imul
xchg
in
inc
aas
aaa
pop
int
or
sbb
mov
es
jmp
jo
outs
fs
gs
gs
inc
add
add
fs
imul
add
inc
push
dec
cs
dec
dec
add
xchg
or
add
jmp
dec
cld
shl
mov
bt
shl
add
test
shr
ror
add
mov
shl
movzx
add
pushf
mov
lea
pushf
pushf
jmp
jmp
pushf
pushf
lea
jae
pusha
call
lea
je
dec
xor
shl
inc
add
call
add
inc
jne
ins
imul
imul
lea
ja
jmp
call
add
inc
gs
imul
bound
gs
add
mov
add
add
add
push
xor
rol
or
add
push
add
add
add
or
add
push
cmp
or
add
add
add
jb
lds
add
add
adc
add
push
xor
pop
cmp
inc
cmp
add
and
add
add
add
ss
cmp
cmp
add
add
or
add
pop
cmp
add
or
add
call
add
add
pop
xor
add
add
adc
add
fwait
xor
xor
or
add
aam
add
mov
add
add
pop
cmp
or
rol
sub
add
std
xor
or
lea
movs
cmp
cmp
cmp
mov
cld
ds
aas
aas
aas
aam
fistp
add
add
sub
add
dec
xor
xor
xor
xor
jno
movs
ss
aaa
movs
aaa
push
cmp
add
adc
add
add
inc
add
add
mov
jp
mov
cdq
xor
div
out
pop
xor
jae
les
shl
sub
push
cmp
cmp
cmp
popf
cmp
pusha
or
mov
lock
adc
add
xor
xor
xor
add
add
add
add
add
fnsave
out
xor
aaa
inc
cmp
ss
ds
aas
add
add
add
sbb
add
mov
inc
xor
aam
inc
aaa
dec
cmp
cmp
or
push
dec
bt
pushf
pushf
xchg
push
neg
xchg
bts
btr
bsf
movzx
mov
btc
xchg
dec
not
mov
adc
mov
push
shld
mov
cmc
push
mov
cmp
rol
xor
lea
call
pushf
test
push
pop
cmc
cmp
clc
cmp
lea
jnp
pusha
lea
ja
neg
sub
inc
sub
and
shrd
adc
add
sar
mov
add
rcl
mov
ja
cmc
repnz
pushf
push
mov
mov
lea
jne
pusha
call
call
not
inc
setl
inc
shl
rcl
inc
xchg
bsr
aas
adc
mov
cmc
mov
stc
mov
btr
rcl
shl
mov
pushf
sub
pushf
pushf
rep
pusha
mov
mov
pushf
push
push
push
lea
jmp
stc
push
sub
cmp
clc
pusha
cmp
jmp
add
inc
gs
outs
imul
jbe
jae
rep
call
stc
test
pushf
pushf
jmp
not
mov
lea
jmp
lea
mul
jmp
popf
mov
loopne
push
and
mov
ficom
mov
aad
movd
cdq
xchg
xchg
data16
mov
and
fs
or
xchg
mov
pop
icebp
or
inc
inc
mov
fsub
mov
test
pop
(bad)
(bad)
jmp
pop
adc
das
mov
dec
cmp
pop
xchg
sub
fst
push
push
adc
das
rol
and
rcr
repz
rcl
movs
jg
stos
ins
sbb
push
or
ins
mov
pop
fcmovb
push
inc
int
inc
jmp
loopne
cmp
shr
push
adc
ffreep
jno
sbb
(bad)
adc
rol
(bad)
mov
mov
movs
adc
inc
cs
aam
mov
mov
jmp
test
add
lea
movsx
jmp
jmp
push
call
add
shr
mov
clc
jmp
mov
mov
pusha
push
push
ret
xchg
pushf
pusha
call
test
pusha
shr
push
mov
jmp
lea
je
call
add
inc
gs
outs
fs
gs
imul
js
add
add
gs
inc
inc
add
inc
and
pop
push
lea
jne
pusha
mov
bt
inc
shr
sub
mov
sub
btr
lea
lea
cmc
sub
cmc
push
pop
clc
test
jmp
add
inc
jb
popa
je
push
outs
outs
ins
push
xor
popa
jo
push
aaa
pop
jmp
cmc
cmc
test
sub
clc
stc
test
cmp
pusha
push
call
add
push
dec
inc
gs
outs
ins
fs
popa
je
push
add
pop
and
lea
jae
pushf
lea
jmp
jmp
cmp
clc
call
sub
bt
bt
cmp
pushf
call
add
push
push
pushf
pushf
lea
jmp
pusha
cmp
call
jmp
lea
je
pushf
cmp
pushf
lea
js
je
pushf
pusha
lea
jmp
mov
lea
jne
push
call
jns
mov
gs
mov
in
inc
cmp
aaa
push
add
mov
dec
xchg
movs
mov
jmp
loopne
cwde
sbb
mov
cmp
xor
push
mov
iret
mov
cmps
inc
sti
add
rcr
enter
in
repz
add
rol
fistp
in
not
ja
push
imul
mov
stc
bt
add
mov
lea
jmp
lea
jne
jmp
call
mov
jmp
add
push
jb
arpl
jae
xor
js
add
in
xchg
xor
cmp
lock
jmp
mov
ins
pop
icebp
movs
xchg
fsubr
imul
pop
pop
pop
imul
adc
push
sub
dec
sbb
cmp
loop
outs
xchg
paddb
mov
arpl
xchg
(bad)
out
mov
in
jge
jbe
cdq
pop
fdiv
xlat
push
mov
jbe
push
lods
xchg
cmp
inc
jae
dec
ja
(bad)
jl
(bad)
mov
and
mov
xor
mov
push
mov
pop
xchg
and
lods
dec
jo
loop
in
shr
add
jge
out
jle
pop
sub
mov
loopne
jmp
lea
ja
jmp
add
inc
gs
imul
push
jo
arpl
add
add
je
jns
je
ins
dec
outs
outs
add
adc
ror
add
add
mov
add
push
pushf
lea
jmp
add
inc
gs
imul
arpl
les
push
inc
push
dec
xor
cs
ins
add
shl
inc
add
outs
push
jb
arpl
jae
add
and
add
xchg
add
add
add
cmp
add
lds
add
add
mov
add
cmp
add
inc
add
sub
add
movs
add
or
add
cmp
add
inc
add
inc
cmp
add
lds
add
add
pop
cmp
add
add
add
jl
add
push
cmp
add
test
add
inc
add
mov
add
add
add
add
add
jl
add
test
add
cwde
add
test
add
add
add
add
add
inc
add
sar
xchg
add
pushf
inc
add
fdivr
add
inc
add
in
add
xchg
add
rol
add
inc
and
sti
jg
fimul
and
xor
(bad)
push
pushf
push
mov
lea
jmp
mov
lea
jae
cmp
pushf
mov
bts
inc
sbb
mov
sar
sub
adc
mov
pusha
pushf
xor
call
mov
test
jmp
add
dec
outs
je
jb
gs
outs
outs
outs
arpl
push
push
mov
mov
push
mov
pushf
mov
mov
pushf
push
lea
jmp
lea
jne
or
jae
mov
rcl
sub
ror
mov
call
lea
ja
jmp
mov
add
inc
push
in
lods
retf
jecxz
sub
mov
loope
icebp
pop
sar
adc
jle
inc
xchg
jno
cmc
std
es
call
bound
pop
mov
push
jl
repz
pop
pcmpeqd
and
add
mov
lea
test
stc
inc
loop
(bad)
jb
or
jb
sbb
add
js
data16
lahf
mov
push
adc
jb
aas
enter
adc
sbb
lods
jmp
or
cmps
jo
lods
xor
mov
adc
or
sub
dec
push
inc
jmp
in
lods
jl
or
iret
(bad)
xchg
mov
mov
lods
push
jp
cmc
cmp
outs
cmps
adc
mov
xchg
jns
fdiv
sbb
mov
call
or
adc
rcl
iret
(bad)
dec
popa
enter
add
mov
mov
stc
dec
xlat
jo
aam
rcr
das
into
adc
sub
sbb
cmp
call
out
jg
xor
inc
ds
iret
inc
dec
dec
iret
les
outs
xchg
mov
push
iret
(bad)
xchg
mov
mov
jmp
add
jnp
adc
and
push
mov
cmp
push
pushf
mov
jmp
bswap
jmp
jmp
add
push
gs
gs
jae
inc
inc
add
inc
push
add
xor
test
sub
push
lea
xchg
mov
pusha
pushf
mov
jmp
mov
push
pusha
push
ret
call
pushf
push
neg
cld
bt
cmc
push
popfw
jmp
mov
jge
cmc
mov
dec
fiadd
mov
fwait
stos
pop
clc
cmp
jecxz
jnp
pop
out
mov
add
push
xor
or
lock
pop
shr
xor
jl
std
push
jnp
xchg
pop
mov
inc
fisubr
shl
mov
movs
and
out
sahf
mov
sahf
rcr
rcl
cmp
pop
push
xchg
cdq
mov
or
mov
xchg
mov
cmps
jecxz
add
sub
retf
push
adc
pop
jb
cmp
jo
xchg
pop
mov
pop
sbb
nop
mov
pop
stos
repnz
push
mov
outs
push
pop
xor
pop
adc
ret
jmp
std
aaa
jnp
or
jp
fidivr
pop
cmp
hlt
cmp
xchg
add
pop
ds
lea
mov
fwait
xchg
and
pop
pop
xchg
int3
adc
and
cld
xchg
pop
ror
add
pop
adc
inc
dec
mov
dec
std
or
fsubr
or
cdq
mov
dec
push
jmp
dec
lock
shl
std
sahf
movs
std
aas
jmp
push
iret
push
xchg
lods
fldcw
int
cmp
retf
sub
cmp
add
push
xor
pop
inc
xchg
scas
push
iret
js
iret
pop
jo
cmp
add
adc
push
xchg
fs
into
hlt
lods
pop
or
pop
ja
not
mov
pop
jne
sub
jg
sub
outs
xchg
inc
cli
clc
daa
pop
addr16
sub
xchg
dec
call
xchg
ds
(bad)
xor
test
xchg
fldenv
push
jg
pop
and
pop
push
xchg
popa
cmp
stos
(bad)
sti
movs
je
pushf
ja
inc
inc
xchg
fstp
inc
jp
push
pop
(bad)
xchg
stos
aas
out
mov
mov
pop
jle
ror
pop
pop
xchg
bound
xchg
imul
push
add
call
ja
dec
ficom
fwait
pop
ret
imul
call
or
les
mov
inc
fild
daa
jl
fwait
xor
ret
xor
sbb
aam
jmp
retf
or
sbb
xor
stc
or
out
mov
scas
push
jmp
call
jmp
inc
inc
pusha
push
pushf
push
mov
mov
jmp
mov
pusha
lea
call
cmp
bt
call
test
or
pusha
lea
jnp
je
pusha
add
movsx
stc
sub
ror
shr
call
sub
call
xchg
(bad)
imul
gs
es
push
mov
inc
push
push
in
inc
jge
(bad)
sub
jnp
(bad)
dec
cmps
add
fs
cwde
sub
xchg
(bad)
ins
and
adc
(bad)
outs
outs
popa
jbe
inc
ins
sar
xor
cmp
lahf
xor
ja
scas
push
dec
pop
sub
push
push
fnsave
pop
(bad)
stos
xor
(bad)
push
push
and
push
sbb
dec
xchg
or
stos
fistp
(bad)
mov
lea
(bad)
test
fwait
push
or
dec
loopne
retf
push
add
call
jecxz
mov
push
in
dec
inc
mov
cmp
adc
xchg
inc
inc
sbb
test
add
stos
imul
jmp
test
mov
pop
test
mov
mov
(bad)
mov
shl
mov
imul
push
add
xchg
(bad)
out
pop
xlat
mov
mov
pop
lds
shl
pop
xor
cdq
and
test
adc
and
jns
jnp
push
sahf
cmp
or
retf
pop
ins
stos
sbb
fs
aaa
es
sti
jns
jp
cmp
cmp
and
mov
pop
mov
sub
paddsb
sbb
cmp
or
scas
pop
sbb
add
bound
mov
and
shl
add
cmp
mov
(bad)
stc
sub
ret
pushf
inc
jnp
jl
mov
adc
mov
add
pop
cmp
mov
mov
ja
daa
jns
daa
mov
xor
stos
jmp
in
sub
popf
mov
out
push
mov
jmp
jns
mov
out
mov
iret
mov
sbb
cmp
retf
mov
jg
mov
add
xchg
and
adc
xchg
lock
push
punpckhwd
mov
jmp
fiadd
ins
xor
cmp
mov
dec
inc
mov
fsubr
mov
xchg
out
inc
pop
cli
scas
or
inc
jp
dec
inc
popf
mov
inc
xor
cmps
retf
xor
cmova
jb
mov
sub
mov
sub
aaa
fld
add
mov
(bad)
mov
sub
xor
pop
jg
sbb
or
in
inc
pop
aaa
leave
daa
retf
int3
cmp
fisubr
shr
add
adc
xor
daa
jle
add
and
ins
xor
mov
shr
fs
(bad)
cli
adc
or
mov
sar
mov
retf
add
and
xor
into
push
lahf
and
rol
mov
xor
daa
sub
mov
push
mov
jnp
mov
mov
fstp
mov
xchg
sub
pop
dec
cli
daa
jge
xor
mov
pop
sbb
sbb
sti
popf
cmp
shr
jmp
cdq
pop
inc
test
stc
jmp
dec
imul
sub
inc
xor
add
xor
cli
(bad)
add
mov
pop
sub
push
mov
aas
sbb
mov
xor
or
(bad)
or
in
pop
rcl
mov
cmps
ins
popa
pop
ret
popa
mov
cmp
mov
cdq
pop
movs
cdq
mov
arpl
pop
lea
pushf
cli
mov
iret
mov
cmps
fdivr
bound
mov
idiv
mov
mov
out
inc
sub
or
js
enter
test
pop
sub
fstp
mov
cmp
dec
jbe
cmp
xor
ret
cmp
fld1
shl
xchg
dec
std
add
loope
push
mov
xchg
push
sbb
and
rcr
jb
jne
les
call
jb
rcr
cmp
add
call
out
cmps
mov
xchg
out
sar
stos
jge
add
dec
sbb
movs
sahf
mov
cmp
dec
call
fiadd
lods
jle
mov
jbe
lea
ins
inc
inc
inc
mov
call
and
xchg
dec
xor
adc
mov
sub
mov
mov
in
pop
dec
fdivr
test
(bad)
fidivr
loopne
sti
jmp
js
rol
mov
pop
and
loop
cmps
sbb
gs
neg
loope
mov
das
in
mov
in
xchg
sbb
outs
data16
add
das
stos
ss
mov
mov
fdiv
jb
in
pusha
sbb
push
xor
ficom
cld
inc
(bad)
daa
fsubrp
sbb
dec
mov
(bad)
retf
pusha
test
sub
cmp
xchg
sbb
adc
fld
dec
daa
aaa
push
add
fstp
div
pop
pop
mov
add
xchg
es
ror
(bad)
rol
shr
sbb
add
push
(bad)
out
clc
jae
sub
cmc
and
gs
pop
int
pop
fstp
jnp
in
jne
fsub
pminub
or
fwait
push
mov
and
fidiv
adc
mov
imul
dec
dec
imul
mov
call
fstp
cld
sbb
add
ret
push
aas
mov
sbb
jle
adc
clc
dec
out
cmps
stos
xor
ret
mov
push
push
mov
aas
inc
jp
pop
xor
and
fidivr
cld
das
pop
adc
pop
mov
add
mov
or
mov
cmp
cld
jne
jnp
cmp
and
push
js
or
dec
xor
(bad)
stos
out
push
mov
inc
sbb
add
(bad)
xor
lods
xchg
(bad)
lock
and
or
(bad)
jge
xlat
adc
cmp
ja
pop
mov
xor
int3
add
das
add
sbb
jp
call
(bad)
stos
mov
pop
xor
pop
or
xchg
mov
(bad)
cmp
ror
pop
daa
cwde
mov
inc
pop
nop
inc
enter
push
jbe
inc
(bad)
fmul
cmp
jno
cmps
cmp
popf
and
cld
push
dec
add
mov
add
aaa
adc
jge
dec
cli
loop
jge
add
psubq
retf
aas
xor
adc
cs
pop
sbb
mov
adc
jmp
ins
xor
outs
cmp
and
loope
inc
aas
icebp
and
jmp
aaa
call
jp
mov
ficom
sbb
pop
jae
imul
cmps
loop
xlat
mov
xor
mov
stc
adc
xchg
idiv
adc
fisub
data16
sub
xadd
clc
inc
inc
mov
dec
scas
dec
mov
retf
adc
inc
push
es
out
fdiv
add
je
pop
cld
jnp
xlat
bound
shl
inc
mov
sub
cmp
pop
cli
movs
aas
hlt
pop
mov
xor
xchg
(bad)
xchg
sbb
bound
push
xlat
mov
(bad)
pop
mov
mov
(bad)
pop
mov
mov
sub
adc
jecxz
xlat
cmps
add
cmc
ins
dec
(bad)
or
mov
adc
inc
dec
aaa
idiv
jp
cdq
fs
stc
mov
ss
adc
test
in
jae
(bad)
sub
cmps
and
jp
jns
mov
fstp
inc
aaa
dec
push
add
add
les
mov
ja
(bad)
mov
js
jbe
out
adc
daa
cmp
inc
xor
inc
lea
(bad)
push
pop
(bad)
mov
mov
out
add
add
(bad)
out
jbe
dec
push
out
ja
jg
int3
jp
dec
fild
and
jae
inc
jge
pop
jmp
sub
xor
inc
cmp
pushf
fidiv
(bad)
cli
cli
dec
and
mov
aaa
sub
stc
dec
xchg
pop
movs
pop
lea
cmp
cli
dec
lods
and
jp
das
dec
jmp
xor
stos
arpl
(bad)
js
loope
mov
frstor
loop
pop
js
ins
into
adc
int3
enter
dec
mov
imul
and
std
pop
mov
rol
pop
pop
adc
in
pushf
cmp
inc
sti
mov
push
dec
jbe
mov
jp
mov
sbb
repz
retf
mov
dec
push
sbb
pop
inc
xor
fisttp
mov
pop
stc
data16
gs
fiadd
(bad)
mov
inc
ds
push
or
push
icebp
xchg
sar
mov
xor
cmps
rol
push
mov
push
adc
sbb
cmp
jmp
push
ins
push
ss
into
(bad)
mov
adc
mov
push
ja
cmp
cwde
add
mov
popf
mov
shl
jge
push
add
or
jl
sub
cli
push
pusha
adc
hlt
and
mov
jecxz
push
(bad)
pop
xor
mov
dec
imul
jbe
xor
mov
sti
repz
sub
dec
pusha
cmp
(bad)
scas
or
out
add
call
push
call
jmp
loope
shr
ret
cmp
sub
into
push
cli
push
add
mov
pop
inc
xor
repnz
(bad)
in
jmp
or
and
jns
mov
mov
dec
out
cmp
cmp
ret
jp
test
mov
aaa
jl
(bad)
test
call
dec
test
xor
nop
mov
add
mov
push
imul
in
cwde
(bad)
mov
jecxz
mov
cdq
cmp
test
mov
neg
pop
add
pop
sub
repz
xchg
daa
hlt
rol
fild
pop
push
js
fld
xor
adc
adc
cmc
icebp
mov
jmp
cdq
inc
xor
sbb
jb
push
retf
addr16
add
ds
lds
mov
mov
ret
xchg
scas
inc
mov
jp
xchg
mov
inc
fdiv
pop
leave
jg
(bad)
sub
jmp
and
sbb
cdq
jp
test
int3
add
pop
ret
cmp
call
inc
pop
inc
(bad)
das
stos
int3
scas
mov
dec
loopne
add
cmp
out
dec
cmp
add
add
push
popa
out
pushf
jp
or
(bad)
sub
xchg
jno
xchg
add
out
fsubr
ins
mov
xchg
xor
jo
jmp
add
inc
jmp
(bad)
cmps
dec
push
sub
mov
jnp
stos
shr
push
icebp
std
cli
(bad)
jecxz
lea
(bad)
xchg
jae
movs
dec
mov
add
scas
(bad)
std
daa
cmp
jecxz
pop
out
fsubr
mov
rcl
dec
xchg
cli
(bad)
adc
or
(bad)
int
dec
push
sbb
int3
ja
fs
(bad)
pop
and
and
pushf
retf
sar
(bad)
mov
imul
and
leave
xor
mov
sbb
(bad)
out
jp
lidtd
clc
cmp
xor
test
mov
or
daa
xchg
call
jmp
inc
(bad)
test
xchg
pop
imul
adc
xchg
movs
daa
xor
adc
stc
cli
sbb
cmp
push
inc
cld
mov
out
pop
xor
aad
adc
mov
retf
mov
mov
xor
lods
mov
(bad)
cmp
dec
jecxz
mov
ficomp
pop
aas
jno
cmps
adc
mov
cmp
add
mov
shl
pop
cld
aas
leave
cmp
or
cmp
adc
movs
(bad)
aam
sar
dec
xchg
lods
jns
jnp
or
mov
add
inc
mov
jno
outs
inc
cmp
cmp
xor
js
xchg
add
sahf
lock
sub
sahf
(bad)
sbb
and
(bad)
mov
pop
ds
sub
test
push
inc
inc
pop
loopne
sbb
jnp
mov
fsubp
clc
ins
(bad)
ds
scas
add
int3
jmp
(bad)
mov
xchg
test
jns
scas
dec
pop
sbb
out
cdq
(bad)
enter
ret
(bad)
mov
retf
mov
add
push
loopne
(bad)
cmp
iret
aad
inc
ins
pop
cli
test
inc
ror
mov
daa
into
cmps
sbb
adc
pop
lea
fsqrt
scas
mov
js
jg
ret
(bad)
pop
gs
pop
jp
cmp
add
or
lahf
push
stos
and
inc
add
jnp
jl
adc
addr16
xchg
and
mov
and
push
dec
(bad)
push
fisubr
xor
push
push
int3
js
pop
(bad)
out
adc
int
push
mov
add
add
dec
mov
add
jno
dec
mov
test
sub
aaa
(bad)
retf
adc
in
hlt
idiv
(bad)
loopne
inc
jmp
pop
sbb
lea
mov
sub
xlat
add
(bad)
sbb
push
aas
test
cmc
mov
adc
pop
das
rcr
adc
jp
int3
pop
push
call
ficom
fldcw
cld
jno
and
aas
jmp
xchg
into
cld
mov
adc
jmp
neg
shl
pop
iret
xor
add
inc
cmp
enter
hlt
aaa
jmp
mov
sbb
je
jmp
cli
adc
imul
or
add
(bad)
mov
mov
movs
mov
shl
push
cmps
bound
push
in
mov
loopne
js
fnstsw
lea
rcr
adc
test
loopne
mov
fwait
aaa
ins
mov
adc
and
mov
shl
out
push
cmp
and
or
sbb
btc
and
push
(bad)
(bad)
sub
pop
enter
pop
imul
jg
mov
mov
sub
add
je
cmp
mov
mov
(bad)
push
(bad)
fcmovb
enter
mov
sub
lds
iret
sbb
lahf
ret
xor
scas
aaa
push
xor
out
fnsave
test
push
inc
pop
jmp
popa
fwait
pop
aad
push
dec
xchg
inc
inc
inc
add
cs
in
(bad)
das
(bad)
rcr
lea
mov
jns
movs
(bad)
out
fadd
cwde
rcl
int
shrd
mov
out
xlat
push
stos
xchg
(bad)
mov
sub
bound
pop
push
push
aam
xchg
inc
rol
jns
inc
ret
lods
enter
les
add
push
call
(bad)
into
ret
std
add
in
les
ret
aad
retf
mov
sahf
ss
mov
icebp
sbb
fistp
mov
imul
sbb
lahf
dec
lahf
xor
xlat
aaa
mul
pop
jbe
jmp
imul
pop
push
push
inc
enter
xchg
mov
xor
push
jmp
dec
leave
inc
ret
add
out
xor
add
add
jmp
in
scas
out
xchg
ins
push
mov
add
mov
fwait
lahf
dec
sbb
imul
inc
dec
(bad)
dec
add
in
call
dec
test
inc
cmp
mov
repnz
cmps
add
cld
mov
or
jg
mov
mul
pop
mov
push
push
ja
push
xchg
push
mov
push
sbb
imul
push
stc
push
xchg
inc
sub
xchg
cdq
push
adc
sbb
lods
mov
adc
cmp
cld
cmc
in
ins
xor
mov
repz
out
test
cmp
sub
stos
repz
lods
dec
out
and
pop
fisttp
dec
iret
dec
dec
dec
mov
dec
ja
mov
xor
dec
pop
dec
call
jle
call
scas
sahf
jmp
fs
pusha
sbb
call
xchg
leave
mov
xor
cmp
cmp
shl
jmp
mov
sahf
xor
push
mov
call
xchg
leave
sub
icebp
mov
mov
mov
xchg
push
push
xor
xor
pop
mov
push
sbb
dec
retf
inc
push
xor
push
sub
dec
sub
inc
and
fdivr
xchg
ds
jle
call
ins
call
sub
xor
mov
push
sbb
test
popa
pop
pop
xchg
push
ror
inc
inc
inc
jle
inc
jp
ins
enter
xor
pop
xchg
xor
into
lahf
lea
lods
mov
xchg
xlat
mov
push
push
ja
push
(bad)
push
or
pop
clc
ins
jns
loop
pusha
popa
popf
sbb
mov
std
dec
aaa
jae
lods
push
adc
jno
mov
xchg
add
add
add
std
outs
in
scas
test
sub
out
into
scas
dec
outs
mov
sti
outs
ss
mov
popa
pop
pop
lahf
push
(bad)
inc
add
cmp
and
adc
xor
fistp
mov
and
push
xlat
shl
push
scas
lods
push
pushf
push
xchg
dec
adc
xchg
das
outs
dec
add
adc
add
std
pushf
cld
ficom
lahf
add
jmp
es
sbb
out
dec
scas
inc
outs
(bad)
mov
repz
pop
dec
pushf
clc
dec
repnz
ins
test
les
cmp
xor
in
scas
pop
sub
in
cmps
lods
add
in
mov
fwait
popa
dec
mov
add
call
cmc
lods
or
pop
ins
(bad)
and
cmps
mov
mov
inc
mov
and
out
adc
jg
cmps
scas
jecxz
adc
xor
lock
sub
out
cmp
fwait
add
in
cs
xchg
jns
ins
inc
sub
adc
lods
sahf
ficom
and
xchg
sub
mov
inc
stos
cmp
inc
or
mov
dec
fimul
out
pop
sbb
scas
push
add
ret
in
adc
mov
mov
mov
pop
add
mov
loopne
mov
test
rol
(bad)
test
mov
inc
int
pop
paddd
push
mov
in
leave
fwait
and
(bad)
icebp
push
jp
mov
sub
xchg
adc
(bad)
push
stos
sahf
lock
daa
jns
imul
js
dec
and
sbb
sar
push
mov
mov
push
out
pushf
cmp
cmp
inc
sahf
frstor
jp
fldcw
and
ret
pop
cli
or
imul
es
sub
xchg
dec
(bad)
outs
bound
stc
jo
sub
xchg
xlat
inc
shl
jmp
loope
or
inc
mov
mov
(bad)
(bad)
xor
inc
(bad)
mov
add
imul
and
clc
nop
mov
in
pusha
or
mov
ret
aaa
rcl
and
das
popa
lock
mov
out
fnsetpm(287
(bad)
loope
out
adc
push
and
call
scas
inc
add
jnp
stos
dec
mov
dec
movs
mov
retf
and
fcmovnu
ja
hlt
inc
mov
push
(bad)
mov
push
aaa
dec
sbb
jo
add
mov
outs
sub
pop
(bad)
and
jecxz
mov
pusha
ds
sar
(bad)
arpl
int
jg
adc
jnp
jl
(bad)
fmul
sti
add
jb
jns
xor
pop
or
aam
test
or
je
jns
mov
pop
add
mov
pop
test
aas
cs
jl
aaa
add
xchg
aaa
fadd
aad
adc
call
pmullw
call
jno
dec
das
data16
retf
xchg
daa
scas
push
rcr
add
xor
mov
inc
adc
arpl
mov
(bad)
jbe
xor
das
jg
xor
cmp
jne
cmp
ds
sbb
std
dec
xor
pop
lahf
loope
hlt
movhlps
mov
and
(bad)
clc
xchg
bound
sbb
mov
push
xchg
aad
cmp
inc
dec
mov
add
vpsadbw
shr
cmp
outs
(bad)
cmp
ja
fs
pop
loop
enter
fnstsw
pop
in
pop
(bad)
push
mov
xor
cmp
add
(bad)
push
ja
cs
das
enter
(bad)
dec
imul
hlt
cli
pop
es
inc
adc
inc
or
in
popf
jbe
ds
mov
adc
enter
or
jge
inc
xor
dec
jae
add
adc
xchg
hlt
pop
scas
out
and
inc
mov
jb
leave
cmps
ja
add
(bad)
sbb
pop
inc
dec
mov
pop
movs
(bad)
popf
movs
(bad)
lahf
fisttp
dec
ins
xchg
cmps
(bad)
out
loop
dec
(bad)
neg
enter
sbb
xchg
fidiv
shl
(bad)
rcr
or
jecxz
movs
in
rcl
(bad)
daa
mov
test
enter
add
mov
bswap
jb
mov
daa
and
dec
lea
iret
inc
out
cli
cdq
mov
loopne
fmul
jns
pop
jnp
and
mov
mov
xor
repnz
sahf
aad
fs
(bad)
addr16
or
(bad)
ja
nop
pusha
out
adc
fsubr
fs
jno
(bad)
bound
stos
(bad)
push
mov
rcr
fsub
dec
sbb
and
jnp
mov
shl
int
inc
mov
enter
fsin
jo
pushf
aad
mov
add
test
lods
loopne
fmul
loope
pop
arpl
not
mov
pop
xlat
cmc
(bad)
out
div
and
jbe
mov
(bad)
adc
fisttp
int3
inc
adc
ficom
bound
lahf
jmp
cld
arpl
aad
lock
fsubr
loope
(bad)
out
inc
ja
imul
stc
cli
enter
ret
xor
(bad)
(bad)
cmc
retf
jne
sub
mov
adc
sub
push
add
mov
mov
and
mov
je
mov
dec
add
gs
(bad)
out
sub
cdq
adc
or
jmp
jns
movs
or
mov
push
sub
sub
pop
mov
jmp
sbb
(bad)
in
movs
cmp
(bad)
das
or
and
gs
cmp
repz
xchg
jecxz
sbb
pushf
xor
add
in
aaa
add
mov
add
or
outs
push
ret
outs
cmp
loopne
dec
mov
outs
dec
or
(bad)
jmp
jns
or
sbb
(bad)
sahf
xor
mov
call
(bad)
push
pop
jl
test
ror
and
mov
sbb
test
scas
call
popf
add
dec
xor
fs
or
jg
pop
in
cli
fisttp
nop
loope
dec
cmp
cmc
add
inc
jge
out
add
mov
(bad)
int3
imul
movups
jno
adc
jmp
(bad)
in
adc
jmp
dec
sub
imul
(bad)
adc
aam
pop
mov
sub
clc
(bad)
mov
add
fimul
das
arpl
sbb
xor
daa
sub
xor
or
sar
test
adc
or
stc
loope
lock
imul
test
out
outs
pop
cmp
rcr
cmps
mov
mov
dec
popf
inc
or
or
(bad)
loope
cmp
test
stc
xchg
pop
and
imul
movs
jnp
(bad)
shr
leave
jae
enter
jno
popa
mov
cli
push
retf
cdq
bswap
popf
inc
aaa
jecxz
add
inc
in
mov
pushf
outs
inc
mov
loopne
dec
sub
ss
ja
imul
cli
inc
jg
(bad)
out
std
adc
sub
xchg
inc
dec
call
(bad)
js
loope
jecxz
ins
inc
(bad)
and
jno
sub
pop
les
inc
lods
out
pop
into
inc
(bad)
idiv
adc
cmps
mov
cld
mov
push
pop
pop
enter
imul
arpl
pop
xchg
cmp
adc
shl
mov
ret
in
enter
sub
stos
daa
retf
cmp
cdq
int3
loopne
js
dec
(bad)
out
retf
lock
cmp
aam
fisubr
mov
mov
sub
retf
stc
(bad)
jns
(bad)
pop
in
mov
(bad)
fstp
jb
das
mov
jecxz
xchg
add
(bad)
out
stc
repz
sub
mov
fmul
(bad)
cld
pop
scas
repnz
mov
imul
mov
pop
movs
fisub
push
fldenv
xchg
sub
inc
dec
in
adc
xor
test
enter
cmp
clc
jmp
dec
mov
arpl
icebp
xor
push
dec
mov
das
jbe
cdq
and
add
xor
(bad)
adc
xor
ds
mov
inc
jl
(bad)
aam
push
aad
xchg
loop
ins
repnz
fadd
popf
or
leave
movs
and
or
(bad)
fmulp
lods
mov
xor
push
sbb
xor
push
dec
cmp
retf
or
adc
and
sar
imul
popa
and
jns
iret
xlat
cmps
(bad)
daa
cmp
sbb
retf
mov
ins
jg
cld
les
ja
jl
inc
dec
and
mov
das
adc
xor
dec
cli
movs
inc
push
sub
and
cli
mov
jp
cld
sbb
push
push
aam
xchg
in
dec
or
(bad)
loopne
lods
fld
sbb
or
mov
dec
jbe
or
je
push
cmps
outs
pushf
aaa
(bad)
push
xor
pop
mov
fcomp
xor
xchg
mov
rcl
int
arpl
(bad)
fs
sbb
fwait
jae
jnp
test
retf
jnp
stc
sti
pop
in
out
jns
(bad)
ins
and
xlat
mov
dec
pop
nop
das
(bad)
mov
repnz
lock
movs
pop
xchg
aaa
jb
inc
sbb
arpl
or
sbb
sbb
(bad)
jmp
or
push
or
cli
and
retf
jns
stc
or
inc
jmp
jmp
dec
lea
aaa
rcl
arpl
adc
push
mov
cmp
sbb
push
(bad)
call
outs
cld
(bad)
inc
movd
fwait
outs
sub
fsubr
loope
(bad)
jno
popf
aad
ins
fsin
fst
jo
leave
mov
test
or
aad
and
push
cmp
pop
jmp
dec
(bad)
movs
and
sbb
jmp
xchg
xlat
(bad)
dec
(bad)
mov
shr
(bad)
and
xor
(bad)
das
fwait
or
pop
mov
cmp
mov
fcomp
ja
adc
xchg
je
xchg
mov
pop
or
std
repz
sub
popf
adc
ins
add
aaa
xchg
adc
out
int3
pop
(bad)
(bad)
jmp
(bad)
jae
pop
daa
fs
add
pop
aam
jbe
mov
and
inc
enter
test
dec
mov
daa
sub
sbb
or
pop
sub
or
sub
or
xchg
icebp
jp
shl
pop
mov
xor
push
cld
cvtpi2ps
retf
imul
das
mov
(bad)
cld
dec
inc
shl
pop
inc
(bad)
or
sub
xor
pop
xor
out
(bad)
outs
jecxz
enter
pop
mov
sbb
sbb
(bad)
mov
push
mov
push
je
jno
aam
sub
das
push
xor
in
jns
sbb
stc
jno
test
popf
cli
push
sub
ins
dec
vmread
nop
cmp
bnd
add
pop
and
sbb
outs
sub
lock
mov
jbe
or
jbe
jp
outs
packssdw
dec
es
cmp
dec
mov
jecxz
(bad)
cmps
in
pop
jge
test
inc
dec
add
scas
jmp
sbb
aad
les
(bad)
mov
pop
mov
pop
jnp
arpl
cmp
jp
inc
mov
pusha
dec
pop
add
retf
add
jl
out
adc
iret
int
aad
cmp
mov
pop
mov
fild
jge
or
mov
loope
mov
add
(bad)
test
cmp
jmp
push
xor
(bad)
fdivp
loop
mov
cmps
sub
cld
cld
leave
scas
push
inc
jns
xor
sbb
sub
shl
and
push
(bad)
rcr
iret
dec
nop
pop
(bad)
mov
adc
call
xchg
sub
mov
pushf
fsubrp
cmp
ror
fmul
pop
int
mov
lahf
sub
(bad)
scas
(bad)
int3
stos
and
(bad)
std
out
icebp
in
loope
lahf
push
(bad)
xor
out
inc
ja
(bad)
loop
fdivr
call
pusha
xor
ret
cmc
inc
mov
pushf
(bad)
jmp
stos
xlat
stos
inc
jg
sar
or
loope
mov
daa
pushf
fcmovbe
sub
mov
or
and
mov
jp
loopne
enter
add
ja
outs
ins
das
pushf
sbb
mov
sub
bnd
xchg
xor
(bad)
or
mov
add
sub
loope
dec
in
cmps
(bad)
movs
mov
mov
cli
pop
(bad)
xchg
mov
jg
inc
out
sahf
mov
mov
adc
jnp
imul
cdq
(bad)
pop
jmp
or
mov
test
ins
xor
out
pop
das
out
sub
inc
push
rcr
loopne
enter
mov
add
add
ret
(bad)
mov
fdivp
dec
xor
aad
ins
(bad)
scas
std
call
mov
mov
mov
das
mov
aad
(bad)
(bad)
jp
jle
out
pop
icebp
fwait
int
jb
cli
cmp
(bad)
and
repz
mov
popa
in
into
fcomp
jbe
dec
fucomip
cmp
(bad)
icebp
and
shl
push
mov
mov
das
mov
in
adc
out
dec
pop
and
pop
test
das
leave
dec
and
cwde
ja
fistp
retf
inc
pop
xor
mov
(bad)
sub
test
aaa
inc
ja
jne
scas
or
call
scas
loop
jnp
adc
shl
ror
shl
xchg
mov
pop
inc
mov
sbb
mov
fsub
jecxz
(bad)
jno
int
mov
dec
movs
cli
mov
and
cs
push
(bad)
jmp
push
jns
shl
mov
sbb
arpl
(bad)
pop
dec
fs
jae
aam
fmulp
pusha
add
jb
cli
jmp
push
retf
mov
std
arpl
xchg
fidivr
jo
mov
lock
adc
aas
mov
mov
retf
push
mov
mov
cli
jb
sbb
mov
(bad)
jmp
in
dec
push
and
dec
clc
mov
(bad)
outs
mov
(bad)
stc
jmp
push
int3
mov
retf
(bad)
and
iret
dec
adc
fnstsw
imul
js
data16
push
pop
lds
cli
ja
xchg
push
jmp
mov
retf
push
xchg
sar
add
mov
add
cli
lea
fdivr
std
sti
scas
(bad)
in
xchg
mov
jp
mov
or
inc
rcr
arpl
dec
test
sub
xor
in
in
mov
mov
inc
push
(bad)
sub
(bad)
and
aam
out
lods
cld
es
inc
(bad)
mov
sbb
(bad)
and
dec
xor
stos
sti
adc
nop
sub
call
xor
and
adc
xor
and
pop
(bad)
mov
and
es
mov
leave
sbb
pop
sar
stos
xchg
pop
sub
(bad)
cmp
xor
js
sti
xchg
mov
ja
dec
ficomp
repz
stos
xchg
xchg
cmp
mov
dec
scas
pop
(bad)
jp
add
cdq
movs
leave
dec
adc
xor
imul
mov
and
jg
jno
inc
mov
stos
jns
pop
dec
or
jl
adc
cmp
dec
daa
das
sbb
out
(bad)
outs
adc
cmp
fucomip
jns
inc
leave
xchg
and
mov
call
sub
fdivrp
movs
dec
aam
adc
and
push
xor
popa
bound
cmp
pop
(bad)
fistp
enter
sbb
inc
loop
cld
mov
cdq
gs
mov
push
shr
(bad)
jl
fstp
retf
and
(bad)
nop
enter
sub
adc
jp
in
jno
jbe
mov
jp
call
cmps
sub
paddw
jecxz
pop
(bad)
sub
cmp
mov
dec
push
enter
inc
xchg
aaa
addr16
retf
dec
outs
(bad)
jno
stos
pop
rol
inc
fdivr
and
pop
push
int3
xor
inc
inc
and
enter
icebp
jmp
(bad)
ja
int
mov
retf
aam
pop
push
enter
outs
add
cli
imul
jecxz
mov
cmp
scas
mov
(bad)
xchg
shr
icebp
aaa
jmp
pop
(bad)
jl
sbb
pop
lea
mov
call
push
imul
ret
stc
cwde
fcmovb
fsin
mov
jmp
pop
in
ss
lods
mov
pop
mov
jmp
push
sub
sbb
mul
pop
mov
adc
dec
daa
dec
add
pop
mov
cli
inc
lahf
out
rcl
(bad)
and
mov
loop
adc
xor
sub
xchg
push
mov
stos
lods
jmp
or
pop
dec
bound
(bad)
jno
(bad)
in
xchg
movs
ja
stc
xor
xor
aas
push
and
(bad)
(bad)
pushf
pop
fcom
xchg
icebp
ins
aas
int3
pop
arpl
pop
in
pop
js
ja
cmp
fadd
(bad)
mov
repnz
inc
jge
imul
cdq
push
(bad)
fdivr
jp
mov
jg
xor
cli
imul
or
rcr
fisttp
jae
sub
imul
ret
outs
pop
(bad)
jp
or
test
out
fisub
mov
std
repnz
adc
and
sub
retf
dec
mov
inc
fsubr
cwde
xchg
sbb
(bad)
jb
test
rep
retf
js
add
dec
popa
jae
in
dec
shl
dec
loope
jg
push
and
sbb
sub
clc
add
test
(bad)
push
jb
retf
scas
dec
(bad)
mov
push
cmp
aaa
mov
inc
stc
sub
popf
rcl
mov
push
inc
sti
dec
dec
call
retf
inc
cmps
punpckhbw
ins
sar
dec
(bad)
cmp
xor
loopne
mov
mov
repnz
(bad)
das
clc
icebp
or
mov
(bad)
fidiv
(bad)
ja
int
xchg
(bad)
fstp
xor
loop
sbb
fsub
daa
dec
outs
pop
lock
jmp
ja
and
pop
call
mov
(bad)
mov
lock
or
push
cwde
push
neg
and
mov
clc
sub
loopne
add
mov
(bad)
in
call
jno
xor
idiv
adc
mov
(bad)
sti
cmp
(bad)
jl
pop
push
inc
out
mov
loop
pushf
mov
cli
fstp
adc
jmp
inc
pop
sub
sub
(bad)
call
loop
in
(bad)
mov
int3
aas
mov
fcmovne
cmp
push
mov
cdq
(bad)
in
mov
and
out
std
loop
inc
cs
(bad)
repnz
addr16
in
sub
(bad)
mov
push
test
jno
xchg
adc
adc
arpl
cli
jnp
mov
bnd
pop
aaa
jnp
neg
mov
jne
sub
test
cli
imul
cmp
enter
call
movs
daa
hlt
stos
div
lods
sub
retf
jle
add
inc
push
test
or
or
cmc
(bad)
jbe
fs
mov
xlat
fcomip
and
jae
retf
add
in
imul
pop
ins
xchg
das
add
cli
fcom
mov
jmp
(bad)
mov
inc
pop
addr16
mov
iret
xlat
pop
jmp
outs
fisub
arpl
xchg
dec
or
dec
mov
(bad)
repz
sahf
(bad)
dec
push
push
xchg
imul
loop
or
mov
das
xor
xchg
out
mov
push
adc
pop
mov
es
mov
int3
call
jp
and
inc
je
(bad)
xor
enter
push
cs
mov
dec
adc
(bad)
fst
sub
repnz
out
(bad)
sbb
jno
and
pop
emms
xor
adc
(bad)
nop
call
(bad)
jno
and
xor
xor
cmp
push
mov
int
sub
aaa
and
adc
pop
dec
cli
and
shl
int3
push
out
or
js
cmove
adc
or
mov
cmp
(bad)
jae
outs
push
jnp
cmp
fbld
sub
xor
xchg
and
add
mov
aad
and
leave
jns
loopne
or
xor
sbb
ret
lods
jl
mov
(bad)
out
adc
out
inc
pop
dec
or
stos
push
(bad)
cmc
popa
dec
fiadd
jmp
mov
(bad)
clc
pop
mov
fdiv
popf
lock
shl
rcl
adc
pop
lds
push
das
les
inc
int3
aaa
idiv
fisub
pushf
ja
inc
and
out
dec
dec
and
out
jmp
jl
movs
clc
and
jnp
loopne
cs
or
jae
(bad)
jnp
add
cdq
jno
sbb
lahf
dec
sub
inc
(bad)
xor
bnd
xchg
in
mov
(bad)
inc
or
xlat
pop
rcr
dec
(bad)
cmps
in
lock
mov
lahf
jp
imul
mul
jp
adc
pop
or
pop
push
or
xchg
pop
enter
xor
cmc
nop
mov
test
jge
int3
jmp
dec
js
inc
(bad)
and
sbb
xchg
test
and
pusha
cs
add
or
test
cld
imul
xor
add
imul
cli
jns
jmp
in
clc
mov
(bad)
scas
in
(bad)
sub
adc
pop
int
jb
push
mov
jnp
retf
out
das
pop
jecxz
fild
pop
ins
arpl
xor
add
test
add
neg
ficom
mov
out
or
(bad)
(bad)
sub
out
sti
fdiv
fwait
mov
loopne
pop
add
sahf
jmp
movs
(bad)
mov
lds
(bad)
jmp
pushf
and
movs
(bad)
mov
mov
ja
sub
(bad)
xchg
(bad)
arpl
add
inc
ins
xor
gs
pop
sub
xchg
push
dec
mov
pop
ins
pop
inc
sbb
inc
loop
sub
dec
loopne
inc
jae
pop
ss
xchg
frstor
(bad)
xor
push
sub
adc
xor
and
cs
mov
arpl
push
std
xchg
imul
popa
jnp
pop
push
stos
dec
std
dec
out
cmp
inc
jmp
das
cmps
or
sar
gs
dec
out
movs
add
pop
xchg
xor
pop
das
and
mov
(bad)
repz
mov
(bad)
sbb
xor
(bad)
and
dec
mov
movs
sbb
(bad)
outs
call
lahf
jns
mov
mov
xor
sbb
pop
imul
out
adc
outs
jae
xchg
sbb
sbb
cwde
stos
lock
inc
sub
push
sti
mov
retf
sbb
sbb
gs
xchg
or
packuswb
or
push
sub
sbb
jns
out
arpl
jg
loope
push
cmps
dec
out
xor
adc
int
cmp
add
jg
and
jae
mov
outs
xor
xchg
jp
idiv
arpl
pop
or
xor
imul
mov
add
out
cmps
pop
push
inc
jae
xchg
sbb
ja
imul
mov
setg
mov
out
daa
jg
ja
jae
jns
(bad)
lock
cmp
jnp
outs
cld
das
jae
mov
mov
iret
jns
adc
mov
jnp
pop
(bad)
push
add
ins
and
lock
xor
daa
cli
adc
and
sbb
xor
cmp
(bad)
(bad)
jns
jp
addr16
mov
pop
dec
(bad)
mov
pop
xor
(bad)
(bad)
and
sub
data16
arpl
jb
xchg
cdq
xchg
jo
adc
(bad)
cmp
adc
pop
add
and
xor
cmp
lahf
(bad)
gs
pusha
in
mov
jl
cmp
xchg
jecxz
push
pop
adc
ret
jmp
movs
dec
cmp
psraw
dec
pop
(bad)
aas
cs
bound
loopne
jnp
sub
mov
push
leave
dec
es
xor
rol
into
addr16
dec
(bad)
scas
and
sti
(bad)
in
std
xor
inc
jmp
outs
mov
pop
dec
retf
mov
xchg
sbb
jne
mov
mov
sbb
sar
int
and
ja
jmp
lds
jnp
jp
pop
jnp
imul
or
(bad)
ins
push
gs
xor
lahf
out
cdq
movs
pushf
jo
loop
mov
sub
std
ror
mov
and
ja
ret
dec
pop
fld
jae
cmp
mov
popf
mov
and
(bad)
std
out
mov
jne
jl
push
icebp
test
and
ret
repz
movs
rol
adc
adc
out
pop
pop
ja
mov
xor
dec
pop
lock
mov
repnz
out
(bad)
jmp
aam
ficomp
cwde
pop
sar
pop
mov
sbb
retf
push
test
push
enter
pop
mov
mov
sub
xadd
(bad)
jge
cmps
outs
std
lods
lds
in
cs
or
cmp
inc
xchg
(bad)
push
in
mov
mov
(bad)
mov
sbb
fdivrp
loopne
leave
clc
adc
mov
or
push
out
and
pop
mov
(bad)
sub
in
iret
cmps
cld
(bad)
das
jl
jns
push
(bad)
mov
adc
cmp
and
das
fwait
jl
dec
sar
push
sub
repnz
gs
jb
(bad)
cmp
(bad)
es
inc
jnp
out
jg
fwait
sub
int3
cs
pop
js
mov
arpl
fcomp
jle
adc
mov
inc
and
mov
xchg
in
adc
lock
push
mov
or
js
cmc
and
out
movs
aam
outs
cmp
add
and
and
fs
cli
pop
sbb
mov
mov
pop
jne
retf
pop
(bad)
sub
out
repnz
aad
addr16
movs
lods
pop
mov
test
aaa
mov
mov
push
dec
and
outs
loop
(bad)
sahf
test
lods
jp
enter
push
add
sub
push
jl
(bad)
(bad)
loop
imul
xlat
jns
ss
aaa
dec
fs
or
xchg
pop
or
xor
cmp
push
(bad)
loop
mov
push
pop
or
sbb
mov
(bad)
(bad)
imul
outs
push
fisttp
fs
loop
pusha
dec
daa
add
or
xchg
popf
sub
jae
mov
jg
adc
out
(bad)
and
(bad)
jno
jae
popa
lock
xchg
mov
str
fidiv
ja
inc
xlat
retf
daa
add
mov
sar
movs
jl
out
pop
and
inc
sub
add
cmps
idiv
push
jle
jnp
scas
cdq
mov
mov
out
(bad)
imul
push
push
add
mov
sub
xor
pop
enter
aam
mov
mov
push
jae
lahf
pop
jl
(bad)
(bad)
arpl
mov
int
jmp
cmp
(bad)
addr16
(bad)
ins
test
loopne
mov
ja
mov
dec
and
jo
(bad)
ret
loope
(bad)
rcr
loop
fdiv
test
movs
adc
pop
les
enter
dec
pop
movs
push
jp
xchg
jno
lea
add
aad
in
mov
xchg
pop
adc
push
pop
loop
mov
cli
fbstp
imul
ss
mov
mov
(bad)
out
retf
and
sar
mov
and
(bad)
cld
inc
mov
push
dec
popa
xor
(bad)
icebp
mov
sti
xor
xor
mov
imul
fwait
(bad)
and
in
mov
mov
ins
fstp
mov
iret
(bad)
jmp
mov
sbb
mov
clc
loop
jp
js
pop
sbb
jp
ret
mov
pop
sti
das
cmp
dec
dec
ret
iret
fdivr
(bad)
mov
mov
or
retf
jmp
pop
pop
mov
pop
enter
mov
test
xor
pop
fidivr
xor
movs
xchg
fidivr
pop
and
(bad)
js
cli
add
add
in
mov
out
(bad)
inc
shl
lock
mov
(bad)
in
mov
and
das
xchg
(bad)
enter
jmp
xchg
(bad)
and
fadd
push
sar
pmulhuw
int3
lds
(bad)
aam
push
cmp
jl
xor
mov
in
push
scas
dec
mov
movs
xor
loopne
dec
out
hlt
jo
dec
jp
je
pushf
jmp
add
or
lahf
sti
dec
mov
cmp
neg
daa
mov
jmp
mov
rol
inc
jns
dec
inc
std
sub
cmp
pop
jo
mov
push
dec
mov
retf
inc
inc
pop
and
sub
jnp
daa
sub
add
xchg
push
xchg
jmp
adc
inc
cld
ret
(bad)
fmul
adc
push
shr
repnz
xor
jmp
in
enter
imul
inc
push
fist
pop
fisubr
jnp
popf
pop
mov
mov
mov
sbb
sub
jnp
dec
pushf
push
(bad)
pop
fs
repz
jae
(bad)
pop
dec
test
and
int3
(bad)
in
in
mov
out
mov
or
sub
ins
xchg
mov
xchg
inc
inc
aaa
dec
mov
js
pusha
mov
pop
mov
sbb
xor
or
sbb
lods
call
or
cmp
cmp
aaa
adc
mov
fist
imul
outs
sub
mov
dec
pop
rol
(bad)
outs
and
xor
retf
mov
in
inc
jmp
xlat
loopne
(bad)
(bad)
out
mov
push
push
cli
sahf
dec
stos
jmp
mov
retf
stc
fild
(bad)
push
pop
sysenter
out
(bad)
jmp
int
rcl
mov
mov
mov
ins
mov
fild
(bad)
gs
stc
dec
or
lock
fimul
fldcw
inc
(bad)
(bad)
stc
mov
nop
(bad)
ror
test
loopne
movs
enter
push
or
lock
iret
dec
push
dec
call
fnsave
(bad)
outs
out
in
mov
cld
mov
push
mov
pop
sub
ret
std
dec
leave
xchg
loop
fstp
push
dec
jecxz
imul
xchg
call
xchg
cmp
cs
dec
fcom
cli
loopne
or
in
and
jnp
mov
inc
xor
in
cdq
cld
pop
lahf
sbb
jae
add
lahf
movs
jns
aad
push
xor
stos
sar
leave
retf
stos
ror
push
add
adc
xlat
and
mov
mov
push
mov
mov
pop
aam
fcmovne
dec
inc
inc
jnp
cwde
jno
jge
(bad)
jne
push
or
push
mov
js
jns
xor
add
cli
mov
cmp
sar
call
xor
fadd
sub
adc
mov
mov
(bad)
lahf
fistp
cld
loop
int3
and
test
mov
je
jl
mov
fidiv
mov
mov
adc
out
(bad)
cmp
adc
and
mov
mov
sub
and
out
cmc
dec
jne
imul
xor
aad
jns
adc
cmp
call
jae
jbe
das
pop
outs
xchg
ficomp
out
in
popf
or
jecxz
or
loope
arpl
scas
add
loop
ja
push
stos
das
aas
dec
mov
dec
cdq
inc
jg
into
xchg
push
dec
add
jbe
pop
and
shl
xchg
push
cmc
jmp
pop
fidivr
dec
xchg
sar
stos
sub
aas
(bad)
pusha
pop
xchg
jl
adc
aam
inc
sub
in
iret
in
sar
cmp
jb
pop
push
ins
(bad)
pop
(bad)
stc
adc
mov
push
(bad)
ja
sub
jmp
int
inc
adc
push
dec
pop
es
test
sub
xor
(bad)
loop
ins
fisub
pop
vphadddq
xchg
jns
dec
or
fucom
cdq
jnp
jmp
jo
jg
fdivr
adc
(bad)
call
cld
jmp
jp
jmp
adc
push
cmp
(bad)
mov
mov
mov
fsub
(bad)
sbb
inc
pop
push
ds
out
in
fsub
push
sub
mov
daa
clc
pop
retf
inc
inc
mov
jnp
cs
daa
or
fwait
pop
cmp
pop
sbb
pop
setnp
(bad)
cdq
mov
in
(bad)
es
(bad)
xchg
(bad)
add
pop
shl
cmps
cmp
xor
das
mov
sub
inc
xchg
cmp
dec
and
jecxz
add
mov
or
mov
sub
jns
leave
neg
call
test
or
pop
retf
pushf
data16
fs
clc
mov
out
(bad)
loop
outs
jo
pop
inc
(bad)
mov
ficom
xor
in
iret
sbb
pop
in
add
adc
clc
not
fidiv
arpl
enter
pop
fs
mov
in
mov
sbb
enter
push
(bad)
fidiv
xor
pop
call
mov
imul
inc
jg
movzx
je
jns
lock
test
retf
xor
cmps
mov
jmp
lods
dec
jb
mov
fstp
mov
rcl
xor
and
mov
pop
mov
sbb
add
dec
je
jae
nop
cmp
in
sbb
and
push
inc
aam
(bad)
mov
fbstp
cdq
loop
(bad)
movs
or
xor
cli
fs
xor
and
(bad)
outs
fucomp
mov
mov
adc
rcpps
sub
pushf
rep
dec
sbb
fld
retf
pop
inc
mov
and
xor
xchg
and
cmc
int
jbe
ins
add
fdiv
cli
cmp
inc
or
adc
popa
cs
add
jbe
mov
retf
aaa
push
mov
loopne
jl
cmp
xor
cmp
sahf
sub
out
fsub
and
ins
jo
mov
dec
(bad)
call
sar
loope
call
(bad)
push
pop
mov
xchg
inc
pushf
(bad)
jo
aad
fist
fs
hlt
sti
out
idiv
loope
adc
(bad)
mov
test
(bad)
mov
sti
loop
pop
push
(bad)
movs
mov
test
jmp
jle
pop
mov
mov
call
test
es
(bad)
lods
add
cli
dec
push
mov
aad
mov
mul
mov
adc
loope
dec
or
dec
push
mov
cli
sub
and
dec
jns
pop
or
and
daa
movs
inc
pop
mov
sbb
fmul
and
loope
adc
nop
ja
inc
(bad)
sahf
outs
xor
sbb
mov
out
(bad)
imul
ret
adc
jbe
jmp
and
xchg
adc
aaa
iret
sbb
cld
ja
(bad)
pop
out
pop
dec
push
(bad)
cmp
adc
mov
pop
sbb
jecxz
push
(bad)
fcomip
sbb
jl
sahf
loop
xor
add
jmp
add
popf
sar
scas
add
(bad)
clc
loopne
(bad)
jmp
repz
fistp
es
imul
mov
jno
mov
fwait
cmps
push
(bad)
pop
adc
(bad)
fs
inc
xor
retf
sub
scas
mov
xchg
and
jp
mov
mov
cli
(bad)
pop
lock
fdivr
(bad)
(bad)
cmp
retf
xor
enter
jb
into
movs
js
(bad)
adc
and
enter
pop
orps
scas
jns
jns
int3
mov
add
cli
pusha
in
mov
adc
pop
pushf
ds
fbld
cmp
not
int3
scas
pop
lods
mov
mov
fsin
mov
aaa
ja
mov
repnz
int
mov
(bad)
das
fdecstp
in
mov
outs
pop
ds
jne
mov
sbb
(bad)
(bad)
sbb
xchg
fs
in
(bad)
push
mov
bound
inc
cli
jnp
and
fimul
jne
stc
retf
sbb
mov
sar
add
mov
pushf
test
mov
inc
call
fnstsw
mov
push
xchg
loop
jmp
nop
pop
in
push
out
pushf
add
dec
mov
out
outs
xchg
add
xchg
jle
mov
popf
xor
adc
mov
das
adc
and
sbb
or
clc
mov
fsincos
inc
scas
dec
jnp
dec
xor
jge
(bad)
add
hlt
xor
gs
lods
adc
or
mov
mov
aad
push
pop
in
sub
dec
clc
or
cmc
outs
(bad)
xchg
jp
enter
retf
(bad)
(bad)
pop
add
jmp
jno
pop
aad
(bad)
(bad)
arpl
es
scas
(bad)
dec
mov
push
inc
add
inc
xor
repnz
retf
sbb
movs
dec
or
(bad)
and
pop
or
stos
and
cwde
sahf
mov
pop
add
inc
mov
push
clc
mov
jns
push
out
xor
add
jmp
mov
adc
jno
(bad)
ja
pop
sti
mov
pop
dec
xor
fsub
pushf
pop
pop
fst
jae
and
or
xchg
cmp
(bad)
cmp
popfw
adc
pop
loopne
int3
dec
and
bound
inc
pop
pushf
gs
lock
jne
add
ret
(bad)
(bad)
jno
mov
je
push
imul
pop
out
enter
mov
cli
xchg
loope
sbb
retf
add
popa
popf
or
fs
loop
push
dec
imul
scas
sbb
inc
(bad)
cli
and
cdq
aaa
aas
xchg
pop
jns
std
fsub
push
cmp
mov
sub
repnz
fcomp
and
jmp
dec
xchg
and
int
jmp
mov
jg
out
and
xor
cli
mov
inc
jle
leave
cmp
jno
xor
push
scas
loop
ja
retf
retf
mov
lock
push
enter
out
add
aam
nop
retf
scas
sbb
shl
and
rcr
inc
dec
das
sub
(bad)
pop
enter
dec
and
(bad)
imul
mov
sub
mov
fdiv
mov
sub
dec
mov
bound
(bad)
test
mov
das
loop
push
pop
pop
inc
not
mov
rol
(bad)
ins
aad
cwde
out
loopne
sahf
out
cmp
sub
sub
xchg
iret
test
(bad)
es
mov
jg
hlt
out
xlat
test
xor
rcl
ud0
sub
pop
aaa
(bad)
aad
xor
jp
or
or
fs
clc
(bad)
retf
cli
int
xor
xor
(bad)
jae
fsub
test
cmp
scas
and
stos
sbb
pop
(bad)
mov
(bad)
data16
cli
dec
push
adc
aaa
out
(bad)
pushf
sub
and
xor
dec
clc
(bad)
add
(bad)
fld
mov
lock
and
(bad)
push
xchg
mov
xor
aad
push
mov
add
cdq
push
and
xor
cmps
(bad)
stc
mov
out
adc
inc
mov
dec
adc
in
lods
inc
and
(bad)
mov
cmc
dec
dec
das
push
(bad)
jno
out
nop
dec
push
aaa
mov
xchg
push
dec
cli
xor
outs
icebp
and
inc
fistp
inc
int3
cmp
(bad)
ss
sub
imul
jnp
cwde
push
das
pop
in
pop
ins
sbb
daa
(bad)
cmc
xchg
push
sub
ja
push
mov
jb
stos
or
mov
movs
and
in
jb
jns
pusha
enter
push
push
push
popa
jns
movs
in
and
sbb
xlat
(bad)
cdq
dec
loopne
enter
dec
dec
sub
pop
mov
mov
daa
adc
arpl
sbb
lahf
mov
jp
loope
out
jecxz
fcom
mov
pop
(bad)
loop
inc
cmp
lods
stos
(bad)
push
xor
mov
sub
scas
xchg
add
and
retf
int3
mov
retf
jb
inc
das
movs
xchg
push
lods
out
cmps
cld
movs
push
sub
or
sbb
repz
jmp
cmp
xor
pop
pop
retf
mov
shl
(bad)
loopne
lock
add
inc
retf
pushf
sub
push
mov
stos
cwde
xchg
cmp
mov
or
(bad)
sub
les
retf
adc
sub
dec
xchg
pop
and
daa
or
(bad)
push
fisub
cmp
cmps
ret
pop
jae
inc
ja
call
adc
in
or
repnz
sbb
adc
sub
mov
jl
(bad)
pusha
(bad)
add
iret
out
js
push
mov
fcmovne
(bad)
mov
inc
and
xor
xchg
scas
in
add
add
adc
jp
jmp
ins
ds
add
adc
(bad)
and
jne
cmp
mov
fbld
iret
stos
(bad)
fs
addr16
xor
daa
popa
in
mov
pop
vpunpcklbw
shr
retf
jmp
ss
inc
rcl
xor
fld
outs
(bad)
jp
or
lods
cld
(bad)
jns
in
inc
add
(bad)
sub
pop
adc
push
mov
ja
sbb
(bad)
mov
xor
cld
jg
add
xor
add
int
(bad)
fstp
pop
call
out
(bad)
addr16
enter
sub
shr
ds
scas
(bad)
adc
mov
retf
jmp
shl
jp
lods
shl
retf
inc
scas
cwde
jnp
icebp
int
xor
ror
shl
ins
and
dec
dec
jmp
or
add
movs
retf
add
sbb
(bad)
push
mov
cli
stc
xor
movs
daa
mov
outs
sbb
mov
(bad)
pop
jecxz
aam
cmp
enter
and
pop
movs
jno
xor
xor
in
into
mov
int
loop
popf
aam
mov
fucom
pop
into
dec
test
push
jns
lock
ins
ja
(bad)
jp
mov
sbb
aaa
scas
ins
cmps
fs
jecxz
daa
adc
test
idiv
arpl
add
(bad)
neg
push
and
jecxz
loope
jp
lds
aas
pop
or
push
bound
scas
sar
fnsave
repz
bnd
xor
clc
push
or
shr
aas
lds
jmp
in
adc
jle
ss
aam
push
rcr
dec
lods
inc
xor
dec
and
gs
cld
ins
dec
js
mov
xchg
add
xchg
push
adc
push
cli
jle
jl
(bad)
test
in
sub
cmp
cmps
push
inc
scas
pop
sub
mov
sub
pop
pop
mov
mov
popa
xor
test
aad
xchg
(bad)
push
cdq
jle
inc
fbstp
cmps
fimul
dec
or
pop
das
sub
jecxz
jno
leave
mov
pop
pop
(bad)
push
popa
enter
std
add
je
test
shl
(bad)
aam
push
xchg
dec
dec
pop
and
repnz
movs
mov
or
jns
ja
jmp
jnp
or
imul
das
(bad)
movs
push
push
loopne
mov
es
loope
scas
shl
cwde
mov
jnp
sbb
mov
ja
repz
jne
(bad)
add
cld
mov
push
dec
(bad)
fdivp
cmp
(bad)
mov
lahf
pop
gs
pop
inc
stos
retf
clc
mov
inc
fs
jno
jb
(bad)
cmc
ins
mov
out
(bad)
adc
add
out
fucomp
jnp
inc
push
ja
cmc
xchg
(bad)
xor
push
pop
fidivr
jns
push
outs
pop
push
scas
add
mov
out
imul
add
js
inc
ins
xor
push
in
loope
(bad)
popf
pusha
sbb
dec
scas
sbb
out
fwait
(bad)
sub
add
and
(bad)
clc
mov
aas
data16
mov
and
sbb
test
inc
pusha
(bad)
call
ret
out
mov
jmp
add
jns
cmp
xor
outs
shr
ss
pop
add
jns
repz
mov
xlat
sar
jge
xor
or
inc
mov
fdivr
jnp
xor
mov
push
cli
clc
mov
inc
pop
jle
add
jecxz
out
push
sub
or
inc
repz
jg
adc
and
sar
push
pushf
push
das
(bad)
jnp
and
sub
fsubr
in
mov
outs
ins
std
pop
or
dec
and
jns
mov
scas
and
jne
out
fadd
push
or
out
xor
pop
idiv
mov
shl
cld
aam
loopne
mov
ins
jp
leave
jecxz
mov
mov
jnp
(bad)
ss
fldenv
jbe
(bad)
rol
loop
xor
add
mov
fidivr
jge
lea
iret
idiv
mov
mov
or
fisubr
xor
ins
ror
pop
fdivrp
add
push
cli
cmp
(bad)
jecxz
mov
sub
cdq
jns
iret
mov
mov
(bad)
xlat
mov
mov
das
xor
cdq
ins
(bad)
sti
ret
les
movs
dec
gs
clc
adc
cmps
in
dec
ret
pop
das
sbb
loope
xchg
movs
je
out
(bad)
ds
and
pop
mov
sub
pop
test
jb
pushf
mov
add
not
cs
in
and
push
(bad)
mov
addr16
sbb
and
jecxz
std
xor
add
sub
pop
mov
and
jmp
add
cli
fidivr
adc
dec
xor
and
ja
stc
mov
add
leave
(bad)
fucom
shl
rcl
into
(bad)
mov
jmp
ja
retf
pushf
(bad)
xchg
(bad)
xor
loopne
sar
add
push
les
in
arpl
lahf
out
pop
or
popf
cli
aad
inc
pop
jns
fnstsw
and
test
arpl
das
jbe
and
imul
pop
rcr
mov
mov
push
call
sahf
jle
sbb
leave
jne
out
test
aad
ret
xor
xor
fisubr
sbb
clc
in
xchg
les
adc
aam
xabort
out
push
movs
(bad)
xchg
push
ret
popa
xor
dec
lahf
pop
cli
mov
sbb
and
or
cli
call
xlat
add
arpl
add
push
js
daa
retf
sbb
outs
cmp
jb
push
imul
adc
shl
cld
pop
pop
inc
out
sub
fdivrp
cli
sti
inc
data16
out
popa
(bad)
sbb
shl
scas
addr16
pusha
(bad)
cs
(bad)
jne
inc
jp
push
and
or
cld
cmps
cmps
xchg
xor
xor
cli
add
ficomp
fistp
push
dec
mov
and
and
mov
mov
mov
test
jnp
mov
movs
lock
dec
loop
sbb
(bad)
mov
fdivrp
mov
sbb
daa
movs
lods
push
mov
ds
pmulhuw
test
repz
(bad)
ficom
push
pop
fcom
and
into
mov
dec
loop
hlt
and
jg
pop
sbb
daa
inc
enter
(bad)
xlat
retf
lahf
sbb
push
cmp
inc
sbb
and
vandps
cmp
sbb
rcl
call
daa
(bad)
pop
pushf
adc
movs
jl
icebp
ja
dec
dec
das
test
mov
xlat
jnp
mov
inc
jge
and
or
retf
mov
inc
add
sub
lods
loope
jp
add
jno
retf
pop
adc
data16
in
pop
or
(bad)
cmp
add
sar
(bad)
nop
mov
fiadd
mov
push
xor
xchg
(bad)
xor
loop
fucomp
cli
out
mov
shl
add
push
icebp
ins
sub
(bad)
arpl
(bad)
stc
mov
scas
cli
rol
int
ret
aam
or
out
je
cmp
adc
leave
sbb
(bad)
fidivr
push
pop
cmps
adc
mov
sbb
ds
out
and
(bad)
cli
jle
(bad)
repz
jge
(bad)
xor
add
sti
(bad)
out
xchg
out
push
mov
aam
inc
(bad)
dec
ret
shr
pushf
jecxz
jp
mov
adc
push
aaa
std
dec
in
shl
add
adc
sar
push
sub
and
xchg
or
arpl
jle
jae
pop
push
xor
mov
dec
sti
xchg
inc
fidivr
pop
cdq
scas
sub
sar
cld
cmp
icebp
sahf
pop
fdivrp
cs
push
and
(bad)
cmps
loop
lds
xchg
or
fsubrp
sbb
xor
cmp
xchg
mov
pop
jp
leave
arpl
dec
sbb
jmp
mov
push
xor
iret
popa
jns
ss
sbb
sub
(bad)
(bad)
(bad)
lock
out
sub
(bad)
outs
and
pop
(bad)
jmp
dec
inc
ins
fisttp
aas
js
or
(bad)
in
lods
jp
mov
inc
and
adc
push
mov
push
(bad)
cli
xor
pop
rcl
pop
(bad)
test
lods
mov
mov
jmp
xor
popa
jecxz
dec
xchg
add
jmp
xor
into
adc
mov
aad
jmp
shr
pop
(bad)
mov
pop
out
(bad)
std
mov
mov
or
inc
(bad)
jecxz
(bad)
push
nop
cmp
and
aaa
jne
(bad)
aam
cli
mov
outs
adc
add
ss
sbb
(bad)
cmc
xchg
or
and
inc
es
dec
dec
sub
(bad)
fcomi
loop
inc
js
sub
(bad)
stos
mov
jne
and
cmp
push
stc
mov
jae
adc
rcr
inc
lock
push
add
pop
pop
sar
jae
out
and
push
(bad)
sbb
test
inc
and
(bad)
mov
loope
sub
pop
jmp
jp
shl
push
bsf
push
inc
or
and
sub
enter
mov
mov
mov
dec
js
jo
pop
outs
out
and
or
fwait
and
dec
movs
sub
stc
mov
jmp
dec
in
xchg
and
daa
dec
sub
(bad)
arpl
dec
xor
mov
inc
add
adc
cmp
movs
or
mov
aas
cmp
xchg
mov
mov
das
mov
fld
jbe
dec
out
cmp
inc
ficom
sbb
push
fstp
in
inc
or
cmp
push
jp
xor
or
or
ret
js
(bad)
or
xor
iret
mov
ds
xor
xor
es
xor
jnp
adc
sbb
mov
jnp
icebp
pop
movs
and
outs
xchg
adc
cmovne
aas
mov
loope
xchg
daa
mov
fimul
mov
sti
adc
(bad)
mov
or
mov
bnd
xor
xor
xor
jp
arpl
pop
retf
fcom
addr16
shr
pop
mov
in
or
cmp
pop
in
jns
xor
push
inc
daa
mov
popa
cmp
mov
imul
dec
cmp
jns
mov
xor
jge
and
leave
push
or
mov
mov
dec
jg
ret
inc
stos
nop
push
cmp
mov
cmps
mov
rcr
and
jecxz
mov
pop
lods
shl
or
xchg
pop
es
test
dec
and
xor
mov
sbb
dec
(bad)
mov
xor
sub
(bad)
mov
mov
pop
mov
cli
mov
adc
sbb
sbb
fwait
cmp
(bad)
xor
(bad)
stc
adc
retf
pop
xchg
add
adc
inc
mov
sub
(bad)
sub
push
shl
jmp
jp
fnstcw
shr
ret
push
cmps
ret
out
mov
in
inc
repnz
mov
shr
mov
(bad)
cmp
jmp
into
mov
cmp
cmp
stos
das
push
sub
mov
scas
das
xor
aad
(bad)
movs
call
mov
dec
push
ror
leave
jo
jl
fcomp
jmp
or
mov
adc
ja
dec
mov
bound
adc
pop
(bad)
xor
stc
into
mov
cmp
inc
push
and
adc
cmp
mov
push
sbb
daa
push
cmc
shl
or
mov
or
loope
mov
push
push
push
shr
aas
push
add
dec
pop
outs
loope
in
xchg
cwde
(bad)
sub
adc
jp
pop
dec
mov
or
pop
mov
pop
daa
inc
cmp
inc
adc
repnz
clc
(bad)
(bad)
jp
mov
inc
dec
cmps
lods
out
shl
push
dec
pop
jle
out
jle
inc
cmp
in
mov
lds
dec
mov
jb
(bad)
scas
or
test
cld
or
loope
movs
inc
pop
sub
cmp
xchg
pop
je
inc
adc
test
inc
or
pop
pop
(bad)
in
std
adc
sub
hlt
call
or
cmp
sar
gs
out
mov
inc
jg
cli
mov
outs
jns
fwait
push
cmp
lds
jo
mov
mov
cmp
pop
hlt
cmp
mov
mov
in
lods
jns
jnp
inc
ins
xchg
lds
call
sub
or
aaa
mov
mov
xor
arpl
outs
or
fnstcw
add
xchg
nop
aaa
or
into
dec
fsubr
pop
push
xchg
pop
jo
pop
lea
cmp
(bad)
fidivr
jge
adc
fsub
inc
pop
jmp
(bad)
sub
cmp
es
lahf
mov
or
push
enter
(bad)
lock
inc
pop
dec
sbb
(bad)
(bad)
jnp
sub
cmps
mov
(bad)
push
push
xor
(bad)
lahf
imul
inc
outs
mov
mov
jl
add
(bad)
loop
and
mov
mov
sub
add
jl
inc
mov
cli
xor
ins
sbb
pop
out
push
(bad)
outs
clc
pop
call
cmp
fstp
(bad)
div
shr
icebp
in
sti
push
xlat
ins
in
rcl
movs
add
arpl
add
sub
cmp
add
pop
clc
shl
pushf
movs
scas
push
ss
das
jne
scas
aam
xchg
inc
stos
cmps
pop
xor
and
call
mov
test
imul
pop
mov
clc
sub
jns
dec
shr
jnp
fdecstp
dec
das
stos
cli
test
push
mov
and
movnti
out
addr16
stos
xchg
(bad)
je
xchg
aam
(bad)
jl
mov
inc
scas
nop
sub
inc
jb
fsubp
push
cwde
sub
(bad)
xchg
adc
scas
jno
in
daa
js
inc
cs
inc
loopne
cli
in
hlt
out
or
fdivrp
pop
cmps
fwait
(bad)
jb
mov
(bad)
mov
nop
(bad)
(bad)
(bad)
push
sbb
loope
test
jo
outs
test
lar
mov
in
imul
hlt
push
pop
mov
icebp
push
xor
imul
(bad)
cmps
loopne
mov
mov
inc
loope
jns
push
(bad)
lods
mov
out
cmp
jnp
out
mov
pusha
fild
jae
jmp
clc
cdq
xor
or
pop
sub
ins
fs
adc
dec
cld
or
ret
ret
pop
mov
xor
ins
jmp
sti
lea
jns
inc
sub
pop
push
jae
jbe
cmp
in
retf
adc
clc
pop
xchg
and
cmp
mov
mov
sti
sub
mov
pop
add
mov
cmp
jmp
cmp
push
add
clc
cmp
mov
rcr
aad
pop
adc
pusha
jl
xor
fcom
sub
xor
arpl
mov
sar
mov
es
jecxz
and
std
imul
xchg
int
dec
mov
cmp
ja
jge
das
mov
dec
(bad)
ficom
fimul
int
cld
lds
outs
lea
add
scas
imul
(bad)
(bad)
sub
jmp
push
sar
dec
mov
rcl
imul
(bad)
sbb
inc
icebp
or
stos
(bad)
cmp
dec
cli
or
aaa
push
(bad)
jmp
cs
mov
daa
out
sub
(bad)
mov
mov
push
sub
and
adc
imul
(bad)
stos
popf
jmp
icebp
loope
(bad)
pop
adc
jmp
pop
xchg
inc
or
dec
xchg
iret
mov
push
scas
sbb
pop
rcr
adc
push
sub
mov
add
movs
fisub
call
fidiv
dec
fld
fwait
daa
cld
das
pop
leave
cmp
out
mov
aaa
push
sub
movs
jp
pushf
dec
das
pop
sub
jnp
mov
pop
xor
and
inc
add
xchg
icebp
push
dec
das
cmp
jl
movlps
sub
cli
mov
xor
test
xchg
jl
adc
out
das
and
push
fnsave
pop
xor
cmp
aaa
lds
fadd
sub
test
cmp
sar
inc
hlt
daa
ins
jp
jge
pop
or
jnp
dec
test
js
pop
aaa
and
rcl
aad
out
and
daa
in
sub
lea
add
jge
mov
daa
mov
shl
int
dec
mov
sub
les
and
arpl
es
mov
pop
sbb
cmp
shl
test
cmps
mov
movs
xchg
cmp
and
mov
mov
sub
cmp
out
fsub
mov
cwde
cs
shl
mov
pop
js
pop
stc
pop
or
sub
dec
mov
xchg
cmp
fs
add
inc
into
clc
and
cdq
(bad)
test
sub
sbb
push
sub
js
repnz
adc
call
add
jge
xchg
mov
push
out
call
cmp
test
cmps
add
fnsave
jmp
mov
mov
push
daa
rcr
cmp
(bad)
(bad)
movs
(bad)
stos
xchg
sub
and
and
(bad)
push
out
sub
(bad)
hlt
out
xchg
faddp
(bad)
mov
cmc
pop
nop
lahf
loopne
xor
push
push
loop
rcr
jge
push
jo
(bad)
and
ret
icebp
cmp
xor
xchg
pop
mov
and
or
sbb
cs
jns
and
ds
sbb
dec
enter
xchg
sbb
or
xchg
mov
pop
mov
daa
call
or
sub
jl
in
mov
retf
push
xlat
movsx
cmp
cmp
mov
xor
adc
xor
mov
pop
out
inc
cmp
dec
arpl
dec
xchg
jl
pop
dec
xor
add
cmp
inc
cli
xlat
js
jo
pop
cmp
dec
adc
adc
dec
cmp
or
xchg
push
and
das
lock
lea
jnp
jne
ja
dec
lods
sub
(bad)
jae
loopne
pop
pop
dec
movs
(bad)
fdivr
call
es
pushf
xor
jne
(bad)
pusha
shl
aad
or
std
in
sub
jns
shl
call
inc
and
jns
mov
mov
(bad)
sub
rol
ja
out
or
sub
adc
lods
clc
mov
xor
ins
or
jns
loopne
shr
jecxz
dec
jns
call
ins
fdivrp
add
add
pop
in
xor
pop
out
sub
dec
jbe
js
mov
lods
fistp
mov
sub
dec
mov
int
mov
sub
cs
mov
and
push
(bad)
in
push
aas
jb
scas
cmp
xchg
push
mov
das
(bad)
xor
and
mov
loopne
popf
jle
jmp
(bad)
scas
pop
in
mov
(bad)
addr16
enter
dec
pop
pop
fmulp
ret
push
cli
sbb
pop
gs
push
inc
add
(bad)
sbb
retf
sub
(bad)
mov
push
jp
into
dec
sbb
jbe
inc
(bad)
jge
pushaw
add
leave
shr
es
outs
daa
cmp
bound
popf
sbb
aaa
ins
addr16
xor
add
and
lods
fild
test
push
in
or
mov
lea
add
push
ret
(bad)
test
popf
and
sbb
sub
(bad)
xlat
cdq
out
aam
int
(bad)
and
add
mov
jmp
into
mov
jns
add
xchg
push
push
js
or
fst
inc
and
mov
enter
adc
jnp
pop
js
pop
mov
cmp
mov
(bad)
or
call
pop
inc
dec
add
push
xor
aaa
and
repz
daa
mov
cmp
mov
fistp
mov
repz
call
add
jg
or
sub
or
das
jl
add
cli
inc
cmp
fadd
mov
pop
pop
dec
(bad)
mov
dec
out
pop
into
sar
call
adc
shl
(bad)
arpl
mov
mov
mov
pop
int3
xor
push
mov
mov
test
fsubr
js
jmp
arpl
sti
fst
jno
mov
(bad)
repz
jae
int3
es
push
mov
mov
in
xor
pop
adc
adc
stc
inc
jp
andnps
add
sbb
and
es
and
ret
and
add
icebp
inc
fisttp
nop
inc
scas
adc
(bad)
push
dec
xchg
pop
(bad)
icebp
push
test
adc
pop
in
fcmovne
mov
clc
push
xor
rcr
mov
adc
push
gs
or
(bad)
jl
(bad)
sub
inc
out
call
inc
fidiv
mov
cmp
push
int
sbb
add
jo
sti
and
push
push
pop
adc
or
repz
sbb
popf
mov
xor
jmp
std
sbb
cld
in
fmul
xor
add
popf
lock
pop
dec
(bad)
sbb
xor
cwde
sub
inc
xor
mov
cmps
xchg
sub
mov
xchg
sub
sbb
cli
cmp
and
icebp
or
xchg
jmp
pop
add
sbb
or
and
adc
ss
xchg
mov
sti
out
and
mov
xchg
cdq
adc
mov
mov
clc
cmp
lock
mov
mov
mov
sar
xor
js
cdq
and
add
pop
ds
sub
loope
cld
xor
sbb
jnp
pop
rcl
pop
fwait
stc
cmp
xlat
lahf
call
test
xchg
xor
aaa
add
(bad)
nop
inc
iret
out
sahf
mov
dec
mov
sbb
pop
hlt
fwait
ret
(bad)
inc
jbe
push
or
and
add
cmps
das
lahf
or
cmp
sahf
stos
retf
inc
sbb
dec
pop
call
xlat
(bad)
repz
cmp
cmp
sub
add
inc
xor
imul
add
(bad)
pop
lahf
clc
jmp
jbe
pop
(bad)
mov
dec
shr
sbb
and
sub
idiv
adc
add
(bad)
inc
sbb
ficomp
shl
pop
push
cmp
cli
xchg
xchg
pop
cmp
dec
mov
stc
cwde
out
mov
mov
into
jbe
jmp
pop
mov
sub
out
aad
sub
ret
xchg
dec
das
jl
rol
adc
js
mov
mov
pop
movs
outs
xchg
lds
adc
add
dec
adc
and
call
aaa
mov
add
cmp
mov
mul
jnp
adc
hlt
(bad)
test
pop
add
ret
cmp
fdivr
mov
xor
daa
hlt
sbb
test
xchg
sub
mov
cmc
sahf
clc
mov
mov
ficom
dec
jp
fsubp
and
movs
sub
ss
stos
mov
cdq
mov
xor
sub
ss
(bad)
pop
mov
out
ror
jmp
xchg
lock
pop
int
in
in
pop
ret
inc
dec
dec
jns
sbb
retf
fsub
(bad)
fstp
inc
sahf
gs
in
(bad)
out
pop
add
mov
(bad)
jl
not
mov
out
jae
out
out
(bad)
sti
stc
dec
mov
sub
fstp
jne
cdq
adc
mov
cmc
pop
lahf
movs
mov
xchg
mov
cmp
push
in
pusha
fwait
jle
test
rcl
cmp
fmul
mov
iret
pop
xchg
adc
cmp
mov
fidiv
outs
xchg
pop
sub
pop
pop
cli
dec
scas
hlt
cli
scas
mov
das
push
inc
inc
pop
pop
jmp
pop
jl
xor
dec
adc
add
int
mov
(bad)
cwde
dec
xchg
mov
xchg
push
sar
dec
push
push
loope
adc
test
xor
into
mov
cmp
xlat
(bad)
add
lock
jmp
pop
mov
inc
(bad)
jo
dec
inc
sbb
cmp
push
aaa
jb
mov
add
xor
std
(bad)
popf
ret
push
push
mov
mov
lahf
jns
loopne
clc
dec
sbb
push
out
call
data16
xor
add
popf
dec
(bad)
icebp
lds
xor
mov
jmp
ja
push
ror
sbb
dec
push
fadd
pop
in
neg
mov
or
mov
add
inc
jge
jns
cmc
push
popa
mov
push
clc
xor
ffreep
cli
jns
daa
mov
xchg
inc
imul
lds
sahf
sar
js
jp
push
pop
dec
sbb
adc
lods
ret
add
xlat
aaa
push
cld
lods
data16
xor
ss
ret
xor
and
inc
in
(bad)
js
repz
enter
hlt
and
cmps
mov
mov
(bad)
push
adc
sub
(bad)
jmp
gs
xchg
scas
mov
xor
xchg
inc
test
mov
xchg
cli
add
mov
aam
dec
in
mov
jbe
aas
stc
imul
lods
inc
aaa
iret
fmul
or
test
cmc
xor
aas
test
in
pop
inc
fwait
mov
cld
call
clc
or
out
sub
das
(bad)
pop
sbb
sub
cs
nop
adc
sub
jp
(bad)
int
jb
mov
mov
xlat
ss
mov
gs
loop
mov
xor
rcr
outs
or
dec
int
aad
je
jle
sbb
add
jmp
push
je
movs
popa
xchg
mov
or
pop
sbb
jmp
inc
mov
daa
inc
sar
cmp
(bad)
imul
clc
imul
pop
test
fs
lahf
ret
sti
es
rcl
push
(bad)
push
clc
jp
sahf
or
mov
ins
aaa
jmp
jle
out
sbb
cwde
dec
psrld
dec
or
mov
(bad)
sbb
xor
inc
sbb
dec
mov
lods
ins
pop
push
mov
(bad)
jno
inc
and
adc
pop
push
(bad)
(bad)
xchg
sub
inc
jl
mov
cmp
jmp
call
loope
mov
xor
out
mov
(bad)
cmps
ror
into
cmp
dec
rcl
pop
fisub
(bad)
xchg
pop
inc
test
cwde
mov
ror
xchg
sbb
inc
and
dec
mov
sub
(bad)
mov
stos
daa
loope
call
adc
xor
and
jle
fwait
adc
gs
leave
(bad)
fnstcw
data16
repz
sar
jbe
sbb
mov
mov
iret
loopne
cmp
fidivr
adc
ss
mov
cdq
(bad)
data16
mov
pop
xor
inc
loop
cmp
rol
xchg
imul
dec
xor
xchg
call
xlat
jl
add
xor
xchg
mov
push
mov
rol
sub
popf
xchg
sub
xchg
inc
or
cmp
xchg
jne
mov
popf
(bad)
push
jp
cwde
in
loopne
dec
inc
add
mov
mov
push
(bad)
jl
jmp
push
mov
call
sub
outs
cmp
inc
mov
mov
ret
pop
pop
ins
bnd
mov
push
ins
sahf
ret
cmp
jae
dec
xchg
sbb
lahf
test
dec
or
inc
or
frstor
(bad)
(bad)
addr16
lods
fwait
nop
lea
adc
dec
xchg
std
mov
scas
popa
imul
cwde
mov
hlt
xor
aaa
sub
inc
and
pushf
fs
mov
mov
add
(bad)
test
dec
(bad)
stc
cmc
and
jg
mov
xchg
jb
(bad)
cmp
hlt
aad
fnstenv
cmp
dec
and
in
push
xchg
(bad)
(bad)
pop
and
cdq
cmc
mov
sbb
syscall
xchg
(bad)
(bad)
(bad)
idiv
inc
mov
dec
push
xor
xor
pop
fsub
and
das
ret
(bad)
mov
bound
lea
outs
pop
or
(bad)
out
push
cmp
and
std
dec
inc
mov
sbb
xchg
(bad)
imul
cmp
lahf
cmp
push
aaa
outs
dec
mov
ret
fadd
jns
cdq
test
je
fwait
jns
int
imul
(bad)
repz
mov
sub
loope
add
jo
imul
imul
mov
iret
shr
cli
jns
gs
jb
push
(bad)
out
adc
adc
sub
test
push
stos
add
dec
scas
xor
jnp
pop
daa
mov
mov
stc
loope
push
jae
cmp
mov
cmp
setb
int
daa
adc
push
loopne
push
push
xlat
sub
add
pop
fs
repz
(bad)
mov
stos
mov
add
dec
mov
mov
outs
(bad)
cmp
pop
in
pop
clts
inc
cmp
fwait
jg
and
mov
or
(bad)
cs
sbb
pop
sbb
std
and
pop
(bad)
or
inc
adc
add
jge
fstp
int
cli
cwde
les
jle
add
inc
clc
and
inc
pop
mov
inc
push
push
and
aaa
daa
sbb
adc
cld
mov
mov
dec
bound
mov
dec
ret
out
cli
iret
push
(bad)
mov
or
cmp
psadbw
mov
call
and
(bad)
addr16
js
add
ror
push
inc
cmp
jnp
xor
jns
cmp
and
gs
cmp
test
call
cmp
pop
es
das
and
int3
cdq
pop
mov
or
sti
ins
mov
in
fadd
mov
inc
xor
mul
fadd
gs
pop
xor
scas
cdq
adc
mov
mov
cmps
pop
(bad)
repz
jl
(bad)
jns
sub
(bad)
push
mov
call
cmps
shl
js
and
mov
rsqrtps
push
sahf
fist
cmps
jno
popf
sti
scas
inc
mov
data16
or
mov
and
mov
or
add
xor
jns
or
mov
sbb
xlat
test
jmp
sbb
aas
pop
cmp
ins
fiadd
daa
aaa
mov
cmps
ds
add
push
add
ss
xchg
pop
and
shl
lods
sbb
bound
loope
(bad)
cs
outs
add
cld
or
shl
hlt
mov
jge
repnz
xor
xor
dec
cli
cld
sar
mov
mov
push
mov
xor
sbb
xchg
dec
cmp
mov
rcl
push
ja
sub
jb
mov
jge
pop
retf
push
(bad)
lods
popa
push
sub
and
sar
add
push
and
out
add
(bad)
xchg
cld
sti
leave
outs
adc
jl
fst
repz
jns
fld
or
mov
ss
sar
add
cmps
adc
das
fdivr
jb
call
loope
cld
sbb
rcr
daa
arpl
out
test
(bad)
shr
retf
std
sub
or
pop
sbb
ret
dec
xor
dec
int3
(bad)
adc
jl
inc
jns
dec
dec
(bad)
adc
rol
cmp
gs
xor
xchg
aad
je
fld
(bad)
daa
inc
mov
mov
or
sbb
repz
fild
mov
adc
pop
int
inc
retf
pop
hlt
sbb
pop
mov
fadd
and
(bad)
fstp
iret
push
cmps
ss
xlat
or
(bad)
fwait
sub
mov
out
mov
jnp
test
sbb
in
push
jne
sub
inc
into
pushf
test
ret
and
xchg
cmp
ins
xchg
into
outs
cmc
rol
fsubr
das
jbe
jnp
pop
dec
add
fsub
sbb
inc
(bad)
sub
fwait
mov
add
(bad)
loop
int3
dec
xchg
jb
mov
sub
(bad)
cld
js
(bad)
cli
mov
sbb
lds
add
dec
xor
movs
mov
aad
aam
es
(bad)
lods
enter
outs
(bad)
cmp
test
test
cmp
sbb
int
mov
jecxz
setp
pop
dec
sub
out
sub
int3
(bad)
nop
in
and
ret
fdiv
dec
adc
test
mov
dec
mov
dec
(bad)
je
int
nop
ja
hlt
pop
mov
or
xchg
test
jmp
adc
(bad)
mov
ret
test
(bad)
jmp
call
fiadd
xchg
(bad)
es
stos
cmp
cli
jmp
and
sbb
push
inc
jb
xchg
std
(bad)
sbb
(bad)
sbb
adc
(bad)
lock
in
(bad)
aam
jp
jmp
repnz
dec
call
push
adc
mov
and
stc
cmps
or
jae
paddq
mov
dec
in
lsl
in
mov
sar
addr16
fnstenv
sar
xor
ja
sub
es
les
(bad)
or
stos
inc
jmp
loope
ficom
pusha
fild
push
mov
adc
test
leave
pusha
push
xor
jns
sbb
lea
inc
xchg
aad
add
dec
(bad)
ss
or
lods
scas
sbb
or
xlat
adc
inc
inc
sub
retf
fimul
jne
or
ficom
xchg
jb
(bad)
call
packuswb
push
jne
add
and
outs
cwde
mov
pop
sbb
shl
add
xor
cmp
movaps
pop
popf
jmp
add
xor
sbb
cmps
or
or
jae
xlat
mov
dec
(bad)
sub
sbb
mov
(bad)
es
adc
lods
cmc
add
pop
(bad)
inc
mov
aaa
push
mov
outs
div
xchg
ins
add
push
sub
cmp
dec
or
fbstp
fadd
mov
addr16
cli
add
(bad)
sar
mov
jae
inc
mov
js
mov
clc
out
(bad)
not
and
cmp
fldcw
dec
aaa
retf
mov
sbb
mov
(bad)
and
sar
imul
fist
lea
daa
pop
and
hlt
aaa
adc
mov
xor
mov
add
dec
jp
scas
mov
mov
mov
fistp
adc
ins
dec
js
mov
ds
ret
clc
and
mov
or
(bad)
cli
mov
loopne
fld
inc
xor
cmp
(bad)
test
xor
lock
into
js
ss
cmp
stos
(bad)
push
push
adc
nop
mov
jnp
and
xor
scas
pop
jbe
xchg
xchg
xchg
sub
sub
pusha
inc
(bad)
pop
es
sar
stos
jbe
retf
jmp
xor
ja
jne
sti
in
in
push
cmp
add
mov
pop
push
scas
mov
dec
jg
lahf
mov
(bad)
adc
push
push
int
jmp
daa
cwde
fild
ins
xchg
xchg
(bad)
fwait
inc
daa
jecxz
in
(bad)
fild
dec
and
jb
(bad)
xor
je
cmp
leave
imul
pop
shl
bound
(bad)
xchg
scas
imul
pop
jecxz
mov
pusha
and
aas
movs
xchg
xor
mov
mov
mov
add
pop
lods
pusha
(bad)
sbb
retf
bnd
cld
retf
mov
or
scas
mov
je
cmps
sub
inc
xchg
les
ins
pop
cli
adc
out
dec
fisub
cmp
(bad)
scas
and
dec
sbb
xor
sub
and
push
mov
nop
imul
pop
pop
mov
into
pop
cmp
inc
(bad)
mov
(bad)
repz
in
pop
mov
sub
jno
in
sbb
(bad)
fld
mov
and
into
scas
inc
ret
xor
xor
in
jbe
out
jns
or
push
mov
mov
push
cmp
fimul
xor
icebp
lahf
push
(bad)
fbstp
mov
fmul
push
lods
lea
sbb
dec
addr16
sub
pop
push
sub
out
jp
push
jl
mov
leave
sbb
rol
jmp
imul
(bad)
clc
xchg
rcl
out
clc
sub
push
cmp
mov
or
mov
cmc
aad
xor
fimul
les
or
pop
dec
pop
dec
push
scas
(bad)
outs
je
inc
add
movs
mov
int
xlat
out
sti
mov
jp
icebp
fdiv
repz
jl
cld
adc
pushf
je
jns
cvtdq2ps
and
lahf
bnd
iret
lods
mov
push
adc
jae
cmp
shl
sbb
icebp
outs
push
(bad)
cli
or
(bad)
mov
into
and
sbb
push
mov
xchg
aaa
les
or
pop
xchg
call
mov
adc
inc
jns
jp
sbb
cmp
pop
(bad)
sahf
fcom
mov
xchg
(bad)
push
cdq
pusha
pop
and
jae
xor
into
mov
pop
dec
sub
(bad)
mov
imul
addr16
add
jmp
cmps
push
mov
mov
xchg
push
add
mov
mov
loope
push
sti
xchg
mov
xchg
or
aaa
pop
adc
sbb
cwde
xchg
sbb
xchg
add
gs
mov
pop
and
setb
adc
xlat
pop
pop
mov
popa
sahf
sub
pushf
xor
(bad)
repnz
mov
sti
cmp
push
aad
and
std
add
cli
fistp
mov
jecxz
dec
cdq
pop
out
cwde
fidivr
(bad)
mov
mov
aaa
je
aas
jmp
test
add
int
scas
call
inc
cmp
in
mov
jbe
xchg
pop
sbb
(bad)
out
mov
mov
pop
jns
jnp
or
ret
sbb
(bad)
push
jmp
cmps
int3
fnsave
gs
add
xor
ins
or
js
loopne
loop
dec
cli
cld
adc
lahf
enter
mov
sub
sbb
add
sets
retf
mov
int
and
mov
mov
movs
jl
jo
dec
int
into
dec
cmps
mov
xchg
xchg
mov
(bad)
hlt
fwait
dec
push
outs
push
loope
(bad)
mov
in
jns
outs
jle
pop
rcl
enter
test
xor
pop
adc
dec
fistp
addr16
xchg
out
jb
stc
rcl
setge
call
sub
aaa
pop
add
xchg
test
jo
ret
sub
sub
mov
fcmovbe
xor
jns
push
repz
shrd
lahf
stos
(bad)
adc
jmp
jne
int3
test
pop
ror
(bad)
lods
xchg
pop
icebp
loop
(bad)
mov
xor
pop
adc
clc
jbe
jmp
int
movs
pop
mov
sub
shl
outs
out
inc
mov
inc
pop
mov
das
or
pop
addr16
pop
add
fs
iret
mov
mov
cmp
dec
xchg
jge
xchg
movs
sbb
das
and
sub
sbb
mov
mov
jmp
in
repnz
call
(bad)
jno
dec
or
xor
jno
test
leave
loope
add
aad
mov
pop
jmp
pusha
hlt
add
dec
rcl
fnstenv
retf
add
jmp
sbb
cmp
push
jnp
pop
(bad)
(bad)
daa
mov
fwait
sbb
pop
fcomp
and
ja
push
push
push
cmps
mov
stos
add
jmp
sbb
mov
dec
mov
mov
cli
inc
or
aad
aas
pop
mov
sbb
add
shl
mov
dec
adc
mov
js
sub
jp
(bad)
or
out
repz
xor
jne
or
stos
add
or
sbb
(bad)
movs
aad
push
or
test
and
inc
sbb
out
dec
js
cmp
mov
and
pop
jp
in
sbb
pop
or
add
pop
add
pop
ficom
inc
and
push
out
movs
pop
fdivr
cmp
sar
inc
add
imul
xor
invd
(bad)
in
test
mov
push
add
mov
into
stc
(bad)
sti
leave
jnp
out
cwde
and
call
or
or
sbb
jecxz
pop
mov
or
inc
and
pushf
mov
movs
inc
xchg
dec
into
ja
pop
xor
fisub
(bad)
jecxz
aam
push
sbb
(bad)
outs
mov
rol
xchg
mov
clc
sub
add
push
push
lss
jp
add
repz
sbb
int3
push
dec
sbb
pop
(bad)
mov
xchg
jecxz
jb
cdq
sub
lock
or
popa
neg
fisttp
out
jo
xor
sbb
(bad)
fwait
ins
aad
dec
jae
xor
(bad)
fisubr
addr16
(bad)
hlt
ds
jne
push
es
and
inc
mov
adc
add
pop
rol
int
loop
icebp
lods
cmp
pop
mov
addr16
out
and
jg
and
push
jno
cwde
leave
mov
xor
pop
pop
add
mov
pop
xor
movs
scas
repz
jl
cwde
sub
shr
fld
call
sbb
ins
mov
(bad)
jle
and
sar
and
pop
and
jecxz
mov
sub
ja
pcmpeqd
call
jp
out
or
jp
push
addr16
psrlq
sub
dec
(bad)
jecxz
popf
sub
int3
jp
xor
mov
lods
(bad)
cli
adc
aas
dec
int3
neg
sub
jo
jae
xchg
inc
cmp
mov
lods
ins
pop
shl
and
fcomp
jns
sbb
ins
sets
adc
js
push
icebp
popf
movs
sbb
pop
jnp
cmp
xchg
or
push
(bad)
out
dec
add
les
fnstcw
in
inc
push
sbb
add
dec
cmp
and
(bad)
and
pop
mov
test
and
sbb
lahf
(bad)
cld
sub
cmps
adc
outs
das
bnd
(bad)
lock
adc
adc
mov
push
dec
jge
sub
sbb
mov
pop
push
test
cli
pop
dec
cmp
jl
sub
mov
loope
xor
stos
stos
push
pop
(bad)
pop
mov
pop
ja
imul
xchg
pop
dec
out
pop
jae
pop
mov
dec
mov
in
jle
fisub
cmp
paddb
adc
(bad)
jns
xchg
add
(bad)
in
ins
sub
cli
and
cmc
jo
push
jg
in
adc
loope
push
pop
xor
es
jno
xchg
int3
jg
ds
std
or
in
or
ror
mov
(bad)
xor
popa
fdivrp
shr
out
fsub
xchg
repz
sar
movs
test
stos
sbb
xchg
inc
(bad)
sbb
(bad)
sub
aas
and
mov
cli
test
sub
adc
cmps
enter
inc
inc
pop
scas
mov
jl
sbb
sub
ins
xlat
das
pop
adc
sub
sbb
mov
mov
inc
sbb
js
push
mov
in
xchg
sbb
inc
and
clc
out
fild
push
das
test
cmp
mov
(bad)
test
dec
mov
(bad)
repnz
mov
mov
inc
jp
mov
movzx
enter
or
in
push
sbb
or
aam
sub
pop
cmps
pop
mov
push
xor
movs
dec
jle
popa
(bad)
mov
mov
scas
pop
fwait
ret
stos
xlat
test
(bad)
stos
aaa
mov
jmp
jp
neg
out
int
psraw
jecxz
jbe
and
inc
shl
hlt
pop
bnd
scas
cs
push
clc
xor
pop
dec
push
mov
adc
loop
pop
cmp
pop
push
cmp
sbb
cmp
jecxz
adc
add
inc
dec
sub
pop
or
xchg
inc
pop
syscall
jns
inc
mov
add
xor
jl
int3
mov
jne
mov
push
mov
stos
(bad)
sbb
fstp
out
das
mov
stc
dec
inc
sbb
adc
mov
cmps
xor
std
mov
fidivr
adc
(bad)
mov
inc
sar
jecxz
jp
and
mov
daa
aas
dec
call
jns
adc
idiv
pop
ret
adc
cmp
pop
pop
mov
(bad)
fdivr
dec
sub
xor
out
add
mov
pop
and
(bad)
idiv
mov
popa
sub
push
add
mov
mov
call
fdiv
popa
addr16
jp
add
fcom
in
add
cmps
das
(bad)
mov
in
sbb
fisttp
pop
xchg
(bad)
hlt
push
int3
js
arpl
mov
cs
(bad)
mov
adc
push
repnz
push
xchg
cdq
or
rcr
xor
ins
(bad)
mov
imul
dec
ss
shr
push
mov
mov
call
pop
inc
cld
ds
dec
jns
pop
shl
add
dec
inc
jecxz
xchg
pop
mov
inc
push
pushf
in
(bad)
idiv
lods
ret
jmp
aad
inc
mov
xchg
sti
ret
cld
or
jns
int3
push
cmp
jle
pop
cwde
(bad)
xchg
xor
repz
cli
sub
cdq
daa
cmp
jp
sahf
(bad)
push
imul
add
mov
mov
(bad)
bound
(bad)
adc
add
cwde
ja
sahf
(bad)
pop
lods
sbb
jo
mov
(bad)
and
fwait
push
cli
cmps
mov
imul
das
(bad)
movs
cmp
mov
gs
(bad)
sbb
in
lds
test
daa
(bad)
jl
sbb
fst
lahf
xlat
lock
and
movs
(bad)
adc
gs
add
dec
xor
xor
pushf
jmp
lock
daa
pop
(bad)
(bad)
(bad)
hlt
and
into
adc
(bad)
nop
mov
xor
test
sti
sub
dec
dec
xchg
js
ss
push
(bad)
loopne
fild
add
cmps
fcomp
xlat
mov
mov
mov
std
xor
clc
rcl
push
pop
sti
inc
pop
mov
in
cmps
dec
sbb
push
sbb
mov
imul
xchg
jno
sar
dec
cwde
test
scas
mov
sti
ret
dec
jle
std
fs
arpl
jb
inc
jne
mov
xchg
lahf
inc
inc
pop
je
pop
fidivr
jg
pop
(bad)
sbb
add
and
push
clc
mov
cwde
jmp
popf
loop
(bad)
fsub
jg
fbstp
and
out
bnd
push
mov
xchg
imul
pop
xchg
xor
into
ficom
cmp
cmp
xchg
(bad)
dec
rcl
scas
xchg
(bad)
sub
jle
inc
loope
push
(bad)
aaa
cli
mov
xchg
sbb
std
or
rcr
(bad)
mov
(bad)
xchg
sub
xchg
inc
loope
dec
imul
ins
or
sbb
cli
pop
push
inc
mov
pop
stos
(bad)
lahf
jmp
inc
je
sub
inc
test
xchg
int
inc
jge
cmp
(bad)
pop
(bad)
mov
call
lea
(bad)
cmp
and
repz
fild
das
cmp
sbb
or
dec
(bad)
data16
cld
in
test
fnstcw
pop
push
fsub
imul
stc
mov
ret
stos
add
fsub
jbe
add
enter
and
movs
daa
(bad)
cmps
shl
dec
stc
cli
mov
adc
sub
cld
or
push
div
sar
inc
mov
js
sub
adc
xchg
daa
shl
jnp
test
mov
sbb
das
pop
std
push
or
shl
fistp
hlt
inc
retf
push
shl
and
pop
cmp
retf
dec
leave
sbb
xor
(bad)
test
mov
xor
js
adc
retf
sub
and
and
adc
and
add
ins
xor
inc
sbb
adc
ins
jle
sti
sbb
mov
jl
mov
dec
test
jbe
add
daa
sub
jmp
mov
das
push
jns
inc
add
xchg
rcl
or
cli
add
push
or
fldcw
(bad)
mov
out
out
retf
das
jl
pop
(bad)
adc
cwde
fisttp
pop
fwait
pop
iret
dec
fisubr
leave
loopne
or
mov
loop
pop
or
cmc
jp
out
call
test
sbb
and
(bad)
xor
retf
cmp
mov
or
push
in
add
(bad)
(bad)
xor
add
aas
and
movs
mov
ja
cli
in
or
mov
and
mov
lock
sbb
gs
cli
inc
cli
ss
inc
imul
adc
cmp
ins
jge
cmp
mov
inc
mov
pop
popf
(bad)
mov
imul
mov
cld
pop
or
pushf
cmp
(bad)
or
rol
lods
outs
idiv
outs
cmp
adc
nop
aaa
iret
mov
xor
dec
xor
dec
fcom
mov
sub
test
cmp
(bad)
jno
mov
jnp
lahf
mov
stos
inc
sbb
sub
ins
add
pop
loopne
fld
mov
lock
hlt
inc
mov
xchg
les
mov
retf
jg
adc
sub
cmp
es
loopne
sub
sahf
addr16
loop
add
lea
mov
lea
sahf
sbb
push
pop
jg
add
ret
cld
fld
mov
nop
and
or
cmc
aam
mov
xlat
clc
add
pop
mov
add
jge
icebp
stc
mov
sbb
sbb
push
lods
in
shl
imul
cmp
ficomp
xor
push
and
shl
sub
xchg
cmp
xor
gs
fwait
mov
popf
mov
or
enter
xor
jo
ror
pop
lock
rcr
push
das
in
stos
rol
call
add
inc
mov
mov
retf
loope
(bad)
mov
or
sbb
mov
das
cmps
es
add
retf
jbe
cli
in
jp
iret
xor
add
mov
mov
lods
mov
xor
pop
sar
or
mov
mov
arpl
mov
dec
inc
popf
mov
cdq
int3
test
and
add
inc
dec
cmps
dec
add
xor
adc
inc
add
mov
imul
jmp
mov
inc
jp
fistp
inc
or
movs
test
and
cli
mov
int3
dec
mov
add
xchg
(bad)
xchg
push
sub
push
aaa
jg
dec
xor
lods
mov
jmp
(bad)
sub
sti
inc
xor
(bad)
in
cmc
fbld
in
(bad)
sahf
scas
mov
(bad)
xchg
push
or
mov
pushw
clc
mov
ins
in
dec
sahf
daa
fwait
xchg
fnstsw
stos
jp
jle
in
cdq
stc
sub
dec
xchg
fimul
(bad)
aam
xor
pop
mov
(bad)
into
cmp
(bad)
mov
inc
xchg
cmp
leave
pmaddwd
shl
cli
dec
and
sub
add
ret
lods
push
mov
mov
dec
(bad)
mov
sbb
dec
cld
jae
(bad)
mov
fwait
leave
push
xor
push
jo
(bad)
sbb
mov
pop
stos
pop
gs
(bad)
(bad)
pop
leave
retf
cld
mov
cli
and
cmp
sbb
xchg
cmp
or
das
int3
cmovp
cmp
xchg
dec
(bad)
jns
cmps
aaa
xor
nop
movd
dec
jbe
add
add
cmp
mov
ss
xchg
xchg
and
int3
ds
(bad)
popa
jp
mov
lea
dec
jns
das
adc
(bad)
mov
xchg
fldcw
mov
into
push
push
sub
pop
aam
loopne
pop
daa
cmps
aad
and
(bad)
(bad)
pop
mov
pusha
mov
push
push
andnps
mov
inc
das
clc
out
ret
or
mul
popa
repnz
jle
mov
pop
sub
es
rcl
sub
(bad)
jo
dec
mov
jp
in
and
test
push
mov
push
lods
cli
(bad)
jmp
shl
push
mov
aam
sahf
mov
cmp
push
and
in
cs
mov
addr16
push
inc
popa
mov
cmp
aas
mov
je
frstor
inc
(bad)
neg
fwait
addr16
dec
inc
movs
push
inc
(bad)
imul
add
cli
bound
ds
outs
xor
add
dec
fwait
dec
sbb
(bad)
int3
xchg
mov
mov
(bad)
(bad)
mov
jo
inc
lahf
xlat
ss
int3
fdivrp
fcomp
and
and
jno
cli
inc
sbb
pop
xlat
bound
rcl
add
cmp
fisubr
inc
bound
mov
inc
adc
(bad)
mov
mov
retf
jp
xlat
add
and
test
ret
cmp
ins
sbb
fdiv
stc
rcr
push
cld
mov
sbb
push
inc
inc
shr
xchg
(bad)
hlt
in
lods
push
mov
cwde
(bad)
sub
jge
rcl
ror
arpl
and
mov
or
inc
int3
(bad)
in
cli
cli
test
push
out
mov
test
dec
add
das
mov
std
lods
or
mul
daa
cld
sub
mov
test
mov
add
xor
cld
inc
loope
xor
es
(bad)
mov
shl
js
mov
push
stos
pop
cmp
adc
mov
out
xor
clc
inc
add
sbb
sbb
fs
mov
cmp
gs
or
or
cmps
mov
cmps
stos
aam
add
ror
pop
adc
mov
in
mov
push
adc
shr
mov
into
mov
call
push
cmp
test
sbb
adc
mov
cmp
in
mov
sti
rol
sbb
sbb
nop
sbb
rcr
adc
sbb
das
push
daa
int3
adc
shl
add
les
(bad)
adc
xor
cmp
scas
call
dec
jmp
push
xchg
adc
(bad)
icebp
jp
fild
add
sbb
xchg
(bad)
mov
xor
fdivr
das
test
dec
leave
ja
jae
(bad)
into
adc
jnp
mov
(bad)
jne
lods
in
mov
imul
(bad)
call
stos
jmp
jne
cmps
mov
add
dec
pop
shl
xchg
sar
jmp
scas
add
inc
cmp
jecxz
or
mov
or
xor
push
mov
sahf
aam
mov
ss
pop
fidiv
rcr
pop
cld
ins
cmp
daa
mov
rcr
mov
fwait
push
mov
push
mov
mov
nop
shr
aam
fild
(bad)
clc
fwait
pop
in
js
imul
jmp
mov
xchg
pop
cmp
pop
xchg
cli
push
out
mov
push
cmp
and
mov
mov
aaa
ret
cmp
pop
mov
pop
mov
cli
retf
inc
mov
dec
fild
outs
jnp
sbb
mov
push
pop
add
outs
addr16
jp
scas
or
mov
cli
adc
jns
cmp
cld
push
mov
sbb
sbb
jg
push
gs
dec
mov
sar
out
je
xchg
push
daa
pop
es
aas
add
xchg
cmp
shr
xor
fs
sbb
fsubr
sub
push
(bad)
mov
sub
popf
mov
(bad)
jmp
clc
pusha
cmp
pop
push
jne
push
push
sub
and
out
xchg
jle
das
sub
fist
shl
ins
sub
retf
(bad)
arpl
pop
or
mov
lods
jnp
jge
inc
mov
mov
movs
sahf
stos
fidiv
jle
jl
mov
(bad)
repnz
dec
mov
jbe
test
cli
mov
add
and
and
loopne
sub
cmp
sub
sub
(bad)
adc
sbb
xor
cmp
cmp
iret
call
cld
sar
cmc
mov
inc
mov
fsubr
aam
sbb
add
sub
add
(bad)
jmp
dec
fbstp
scas
out
fsubr
call
sbb
(bad)
nop
jnp
lahf
mov
and
cmp
xlat
clc
push
add
pop
pop
aas
mov
icebp
dec
cmc
pop
xchg
mov
add
pop
inc
pop
arpl
jmp
add
xchg
pop
clc
(bad)
xor
fadd
mov
mov
sub
xor
add
rcl
loop
out
push
sub
cmc
xor
dec
clc
das
mov
mov
ror
push
or
outs
sub
mov
cmp
push
sbb
fadd
and
push
dec
data16
rol
and
sbb
sub
aad
stos
call
fmul
out
test
shr
(bad)
jp
ja
add
arpl
dec
test
outs
add
aad
add
imul
sbb
popf
jle
pop
call
out
scas
sub
lods
bound
cmc
mov
and
popf
das
push
in
adc
movs
jl
sub
mov
in
sbb
test
wbinvd
pop
(bad)
jp
and
pop
mov
popf
cmp
adc
mov
test
mov
mov
cmp
xchg
nop
and
ret
add
iret
and
ja
or
and
test
cmp
pop
call
push
or
jmp
stos
(bad)
mov
pop
out
out
cmp
stos
leave
push
add
stc
xor
ror
sub
xor
cmp
rcl
adc
push
xchg
arpl
sub
mov
retf
jp
fimul
xchg
adc
adc
(bad)
mov
ror
ret
ja
inc
dec
(bad)
ficom
inc
std
adc
fcmovb
imul
push
(bad)
in
scas
dec
aad
sbb
or
xor
iret
push
or
(bad)
jecxz
ins
aaa
mov
jg
fist
sbb
xchg
das
movs
xchg
cmp
push
scas
ficom
mov
(bad)
ror
and
shl
sar
nop
xchg
ror
mov
jnp
mov
ficom
pop
(bad)
push
mov
or
sar
jp
mov
ficom
and
lods
mov
add
icebp
(bad)
adc
pusha
repz
idiv
les
movs
(bad)
cmp
pop
movs
jmp
enter
jno
push
ss
(bad)
mov
fstp
in
fldenv
icebp
je
pop
add
cs
xchg
int
xlat
mov
iret
push
rol
nop
inc
xchg
or
enter
int
cwde
cli
aas
dec
dec
or
retf
mov
and
jp
adc
aam
loope
push
sti
sub
adc
fmul
rol
xchg
xchg
adc
(bad)
jp
cmps
aaa
imul
jle
lds
cmc
jno
gs
cmp
cli
xchg
cmps
mov
push
push
sar
test
cld
cmps
dec
jg
sub
mov
cmp
lods
sub
fs
nop
xchg
stc
cdq
out
inc
sbb
mov
loope
cmove
enter
das
sbb
add
sub
pop
shl
nop
pop
sub
xlat
sub
and
mov
cmp
shl
cwde
dec
mov
daa
pop
push
fwait
sub
cli
push
(bad)
call
daa
sub
mov
xchg
inc
ins
(bad)
(bad)
retf
push
xchg
mov
pop
cli
dec
xor
test
and
inc
pop
mov
push
cld
call
fistp
addr16
sbb
push
loop
sub
into
in
xchg
(bad)
pop
add
mov
ja
mov
aaa
and
lahf
scas
cli
(bad)
in
outs
add
test
jns
hlt
mov
fdiv
pop
mov
(bad)
aad
ja
addr16
sbb
std
sub
xor
pop
stos
(bad)
hlt
mov
cwde
mov
outs
aad
lahf
xchg
mov
mov
xchg
adc
mov
loop
(bad)
fild
fwait
jno
mov
(bad)
popf
or
sbb
and
jg
aas
shr
mov
ja
retf
out
adc
sub
adc
aaa
enter
xchg
mov
jae
jmp
lock
(bad)
push
out
shr
cmp
jo
and
fisttp
clc
cld
jmp
and
scas
(bad)
cmp
sub
imul
push
fstp
stos
cmp
or
mov
data16
push
or
adc
and
push
mov
mov
or
adc
add
dec
jns
ins
out
or
arpl
mov
fmul
mov
(bad)
mov
ins
sbb
jns
pop
ret
bound
xchg
pop
add
js
fdivr
jns
and
retf
retf
and
inc
cwde
or
pop
test
mov
add
mov
or
(bad)
addr16
pop
sub
pushf
mov
cmp
mov
pop
xchg
xor
ins
pop
in
sti
xor
sub
pop
mov
fbstp
dec
imul
lods
jb
and
movaps
shr
push
fdivr
test
sbb
xor
lods
outs
in
inc
(bad)
mov
xchg
pop
add
popf
cmps
das
mov
test
sub
imul
test
test
jmp
clc
inc
test
sbb
std
add
into
clc
je
jl
ins
xchg
and
fcmovu
cmp
jo
xchg
iret
cli
or
cli
sbb
mov
out
cmp
out
push
xchg
cmp
cmp
sbb
xor
call
cmp
in
mov
aaa
push
pop
aaa
shr
cmp
xor
bnd
ror
das
ins
shl
jp
adc
jle
sbb
xor
addr16
cmp
cmp
into
inc
das
push
jecxz
mov
ficom
int3
aas
bound
fcomp
call
clc
dec
sar
out
in
adc
pop
in
add
dec
aad
cwde
lea
xchg
pop
pop
mov
pop
in
stc
fimul
dec
cli
aaa
shl
sub
adc
jle
daa
data16
and
outs
jmp
push
cmp
aas
lods
xor
hlt
in
sub
pop
or
dec
aaa
xor
daa
pop
cmp
push
cmp
jnp
cmp
pusha
add
or
(bad)
mov
(bad)
cmp
mov
push
sbb
and
ret
jl
adc
jbe
mov
and
retf
fs
mov
push
ficom
mov
retf
and
dec
dec
fs
dec
mov
cmp
sti
shl
mov
push
js
test
loope
mov
nop
sbb
jge
in
push
adc
xor
cmp
retf
loope
sbb
mov
arpl
test
dec
adc
dec
cli
push
and
add
inc
ret
repnz
shl
fcomp
clc
(bad)
arpl
cdq
cmps
ja
repnz
das
out
or
add
ins
iret
xchg
dec
xchg
xor
inc
mov
sub
(bad)
sbb
mov
(bad)
mov
ja
mov
xchg
repz
pop
adc
xor
fcomip
(bad)
nop
pop
mov
adc
xor
into
and
sbb
push
jbe
mov
pop
enter
(bad)
cwde
and
leave
push
sbb
fimul
stc
xchg
movs
(bad)
jo
add
(bad)
(bad)
in
sub
sub
sbb
lds
ror
cmc
mov
xlat
push
ror
jbe
icebp
inc
ret
loop
xor
dec
pop
sar
sbb
pop
leave
dec
adc
jnp
pop
lods
or
cwde
sbb
xor
mov
shrd
shl
add
or
hlt
mov
sub
xchg
mov
nop
retf
pop
push
mov
mov
mov
out
mov
mov
dec
or
int
mov
out
enter
add
adc
pop
and
and
cmp
add
xchg
dec
cs
mov
fimul
mov
sbb
pop
ret
cmp
xor
or
jno
mov
mov
push
imul
cwde
dec
jno
je
(bad)
outs
(bad)
in
pop
sbb
loopne
stc
(bad)
movs
mov
mov
in
jecxz
ss
mov
mov
aaa
dec
cmp
(bad)
push
lods
push
push
and
sub
jecxz
clc
retf
(bad)
fs
(bad)
adc
push
mov
push
jl
xchg
(bad)
mov
and
(bad)
pop
xor
and
mov
cmp
sgdtd
out
jno
inc
sub
repz
jnp
jae
fcmovu
xor
jge
or
mov
xchg
retf
icebp
fadd
jno
inc
push
fsubr
and
sbb
popa
hlt
sbb
pop
out
(bad)
dec
ins
cmp
pop
es
mov
mov
loop
and
rcl
cld
imul
das
jne
icebp
xor
xchg
imul
jae
cli
in
mov
or
jle
inc
ins
mov
cs
imul
out
cmc
push
mov
inc
and
(bad)
(bad)
lods
jb
mov
pushf
test
(bad)
cmp
mov
mov
mov
cmp
cli
xchg
out
xchg
addr16
and
mov
shl
pop
dec
inc
(bad)
(bad)
and
mov
jg
mov
pop
adc
ss
lahf
cs
sar
fs
mov
xchg
popa
(bad)
push
mov
pop
out
test
adc
jno
in
inc
aaa
pusha
(bad)
cli
lahf
scas
leave
xchg
aas
add
jae
push
icebp
push
repz
jbe
aaa
add
jb
(bad)
arpl
sbb
movs
and
icebp
mov
call
sbb
and
jmp
xchg
rcr
into
pop
test
(bad)
(bad)
mov
mov
pop
cmovns
cmc
scas
dec
jns
fsin
loop
hlt
aaa
and
xor
stc
(bad)
icebp
cmc
cld
sbb
or
mov
push
imul
lods
mov
xchg
scas
(bad)
and
fldcw
mov
sub
dec
mov
ja
sub
ja
mov
aaa
ins
out
xor
out
and
outs
jns
inc
imul
bound
mov
das
push
dec
pop
sbb
jl
xor
pop
mov
mov
ins
cmp
xor
dec
jge
dec
(bad)
rep
je
aam
inc
push
mov
stc
xor
cld
dec
cmp
mov
lock
outs
stc
dec
dec
ja
xor
cli
cmp
pop
pop
fwait
mov
mov
add
cli
inc
shl
dec
jae
ins
jmp
push
xchg
cmp
pop
pop
(bad)
popf
sub
js
inc
xchg
rcl
es
(bad)
cmp
fidivr
(bad)
and
adc
ins
adc
pop
sbb
cmp
cli
mov
(bad)
sti
shr
fldenv
mov
xor
leave
(bad)
push
scas
jp
pop
inc
mov
inc
or
(bad)
push
sbb
pop
clc
mov
fisub
(bad)
movs
fwait
aaa
mov
(bad)
movs
les
int
test
push
pop
push
aad
in
and
xchg
push
retf
pop
pop
mov
js
adc
pop
inc
sbb
mov
sub
cmp
xchg
dec
jge
pop
add
inc
jmp
sahf
cmp
add
adc
dec
adc
xor
xchg
sti
fxch
add
inc
fidivr
outs
push
es
dec
jp
and
pop
(bad)
rcl
aaa
cmp
adc
xor
xchg
das
dec
call
pop
and
xor
popa
xor
xor
fldcw
ret
repz
pop
(bad)
lahf
es
and
dec
xlat
dec
stc
inc
xchg
test
inc
cmp
mov
out
pop
pop
(bad)
mov
daa
cs
les
fsin
retf
test
sub
adc
sub
(bad)
test
xchg
fwait
inc
add
ret
push
mov
stc
out
mov
call
enter
mov
retf
add
push
adc
lods
fisubr
dec
jne
mov
mov
ds
mov
dec
mov
add
jo
mov
(bad)
out
mov
leave
xchg
fdivr
cmp
xor
jbe
xchg
sbb
jno
sbb
int3
fcmove
dec
fidiv
cli
dec
js
mov
cmc
inc
jmp
cmc
clc
(bad)
cli
sbb
sar
dec
cmps
jp
cmps
mov
mov
mov
mov
xor
adc
mov
jo
stos
sbb
in
mov
pop
push
dec
ss
nop
push
sar
jns
and
jp
sub
fisttp
mov
cwde
repnz
mov
imul
jbe
outs
(bad)
push
in
mov
cld
(bad)
xor
(bad)
dec
(bad)
sbb
cli
xchg
sbb
adc
(bad)
test
cmps
sbb
xor
adc
sub
(bad)
jbe
int3
in
icebp
jae
into
push
sar
mov
cdq
add
sbb
mov
dec
adc
xor
out
aas
fiadd
fldenv
mov
shl
add
sahf
mov
std
(bad)
(bad)
fmul
sub
xor
push
mov
(bad)
addr16
dec
sub
je
aas
jnp
stos
dec
sub
xchg
inc
adc
cli
inc
inc
jg
std
addr16
sbb
outs
jecxz
fisttp
enter
hlt
out
jge
jns
jnp
mov
mov
cs
push
pop
les
aas
add
sub
(bad)
xchg
inc
pop
mov
in
xor
aas
dec
neg
add
mov
xchg
sub
mov
inc
pop
jp
dec
pop
mov
xor
idiv
and
jg
add
arpl
xor
push
cmps
adc
repnz
mov
mov
xlat
mov
pop
repnz
(bad)
add
mov
mov
ins
and
fwait
jmp
std
pop
and
addr16
mov
xchg
jle
mov
dec
mov
dec
ins
hlt
mov
mov
into
loope
jecxz
popf
cli
inc
jecxz
test
cmp
scas
inc
dec
and
mov
fbstp
outs
jp
leave
mov
sbb
xchg
inc
jo
mov
into
or
aad
push
jns
shl
cmovne
mov
mov
pop
jmp
or
ins
aaa
pop
jns
or
xor
cmps
mov
fisttp
stos
repz
dec
sub
hlt
cmp
stos
in
gs
jmp
retf
add
popf
cmps
pop
(bad)
cli
push
xor
and
mov
ret
(bad)
sbb
pop
fstp
dec
push
and
sbb
dec
push
dec
mov
mov
retf
jp
shr
push
mov
sahf
push
dec
and
ss
xor
mov
gs
mov
pop
je
out
or
push
jmp
pop
push
push
xor
push
lods
(bad)
mov
loope
retf
mov
pop
daa
jnp
mov
jecxz
or
mov
daa
xchg
stos
adc
jle
dec
mov
repnz
imul
pushf
add
jecxz
jae
or
test
pop
jmp
ss
jp
lahf
in
mov
(bad)
xor
or
xor
retf
pusha
(bad)
call
hlt
lods
xchg
pop
ins
push
(bad)
add
pop
(bad)
sbb
popa
ss
dec
xor
jecxz
cs
ja
push
in
pop
out
push
jae
and
xchg
out
dec
sub
(bad)
mov
push
adc
jmp
pop
xlat
retf
mov
dec
adc
and
push
mov
arpl
jmp
and
in
je
or
mov
gs
jns
or
xor
bnd
call
test
sub
xor
das
dec
loopne
xchg
imul
mov
add
in
daa
retf
sahf
mov
or
and
xor
stos
int
adc
push
iret
dec
fcmovne
jmp
fs
jg
cld
cmp
lahf
push
xor
(bad)
push
ror
cwde
xor
aaa
loop
in
(bad)
fs
add
sbb
(bad)
imul
out
(bad)
(bad)
cwde
or
jl
mov
(bad)
sbb
sub
or
mov
adc
dec
jns
retf
popa
or
xchg
and
into
cdq
ret
imul
mov
xor
mov
imul
lahf
fs
fcom
clc
adc
(bad)
pop
mov
push
xor
scas
cli
inc
inc
xchg
adc
pop
sbb
pop
btr
xor
xchg
adc
sub
inc
repnz
jp
xor
sbb
lea
inc
mov
arpl
ror
xor
dec
jecxz
retf
scas
(bad)
push
jp
sbb
iret
xor
lods
jns
(bad)
cld
bnd
out
bound
adc
cdq
retf
(bad)
data16
sub
(bad)
mov
out
jecxz
mov
xor
bound
and
pop
(bad)
loopne
dec
jnp
jge
push
jns
push
cld
mov
pop
sub
cmp
sahf
(bad)
repz
call
(bad)
and
dec
loop
sar
hlt
dec
pop
inc
mov
test
mov
mov
(bad)
pop
mov
bound
(bad)
data16
xor
retf
loopne
mov
xor
push
cli
pop
push
(bad)
pop
test
add
cld
sub
xchg
cmovnp
sbb
inc
push
xor
add
int3
push
lock
(bad)
mov
add
or
dec
or
or
xor
nop
or
mov
jae
(bad)
out
mov
out
div
pop
push
stc
jecxz
aas
inc
and
into
bound
pop
fistp
movs
ds
xchg
outs
jmp
(bad)
aas
mov
push
jae
xor
outs
daa
fdivr
jge
adc
ins
dec
inc
sbb
nop
(bad)
mov
(bad)
sub
test
add
fadd
xor
dec
loope
and
or
(bad)
jmp
in
push
in
push
rcl
jns
cs
in
lods
movsx
(bad)
push
xor
mov
dec
(bad)
inc
int
cli
dec
jo
xor
xor
ins
jecxz
xor
popf
pop
cmc
jg
cmps
icebp
push
(bad)
sub
dec
loop
or
mov
xor
inc
sub
aaa
jae
push
(bad)
ja
cmp
add
pop
pop
push
jmp
fcomp
mov
mov
or
idiv
xor
sub
add
jns
and
cmp
repz
js
std
xor
ror
lods
push
fisubr
pop
sub
(bad)
jns
ds
dec
inc
push
mov
aaa
xor
into
mov
ja
and
jg
pop
jns
push
retf
dec
pop
xor
call
sub
out
(bad)
xor
aaa
push
out
mov
cmp
push
imul
and
jnp
or
xor
and
js
je
adc
clc
adc
call
jecxz
in
fisttp
inc
xchg
dec
stos
push
aas
and
call
loop
cdq
sbb
jne
sub
imul
push
sbb
mov
retf
add
pop
clc
(bad)
lods
cdq
cld
out
fsub
ins
adc
dec
xchg
aas
mov
jns
in
adc
aaa
icebp
hlt
add
pop
test
push
idiv
ss
int
out
(bad)
push
sub
xor
sbb
loopne
jp
push
cmp
movs
test
pop
pop
scas
int3
mov
mov
fistp
(bad)
xchg
push
std
sar
xlat
ins
(bad)
enter
inc
js
fbld
push
xchg
in
sub
dec
mov
cs
pop
out
jb
sbb
jns
pop
pushf
pop
call
or
retf
std
push
cmp
cmp
dec
dec
and
(bad)
(bad)
push
ret
imul
fmulp
(bad)
mov
sbb
bndldx
fdiv
pusha
(bad)
out
sbb
(bad)
scas
(bad)
jmp
fcmovnu
dec
ja
add
cmp
adc
das
(bad)
hlt
sub
jb
cmp
scas
js
pop
aaa
repnz
aad
push
xchg
jno
iret
(bad)
adc
retf
inc
sub
inc
stc
cmp
icebp
and
sti
dec
jo
(bad)
sbb
xor
ins
mov
xchg
out
imul
adc
push
add
(bad)
jge
movs
mov
(bad)
(bad)
pop
cs
jb
outs
sub
lahf
dec
jmp
or
loope
fisubr
dec
xor
xlat
inc
data16
call
aas
jns
xchg
mov
popa
mov
(bad)
fdivr
pushf
clc
add
outs
stos
push
stos
aaa
loope
xor
leave
cmp
dec
fs
nop
xor
dec
das
pop
(bad)
mov
mov
(bad)
pop
call
mov
bound
ret
push
(bad)
call
(bad)
xor
sbb
(bad)
sub
outs
mov
loop
(bad)
xchg
inc
pop
jmp
sub
mov
mov
xchg
out
sub
test
imul
sar
(bad)
add
clc
jns
cdq
loope
and
mov
inc
add
xchg
or
repnz
or
sbb
dec
loope
dec
outs
sar
jmp
or
dec
out
daa
mov
repz
cmp
iret
sub
sbb
pop
scas
addr16
jb
retf
sahf
pop
rol
dec
cli
ins
sub
xchg
add
(bad)
jno
pop
inc
push
fucom
sbb
pop
dec
ffreep
popa
push
mov
mov
add
cs
sub
das
mov
mov
jmp
inc
push
add
pop
dec
sbb
imul
(bad)
mov
or
xchg
or
push
pop
movs
movs
clc
test
daa
mov
out
loop
push
loop
loopne
cmp
pop
int
frstor
das
mov
inc
cmp
sbb
dec
popa
mov
xlat
(bad)
sbb
rcr
or
pop
mov
sbb
repz
fcmovnbe
pop
and
test
div
imul
sub
add
fs
pop
jmp
mov
xor
mov
jmp
hlt
loope
and
mov
(bad)
adc
fdivr
mov
jnp
adc
sbb
dec
sbb
push
mov
inc
xlat
imul
pop
fcmovu
jno
mov
(bad)
inc
mov
xor
leave
sbb
dec
(bad)
pop
pop
call
sbb
xchg
dec
or
xor
xchg
dec
das
fsub
(bad)
and
dec
ret
add
mov
push
nop
(bad)
test
xlat
xchg
add
cmp
ret
stc
in
test
daa
fidivr
or
jo
pop
cmp
mov
ss
add
xor
nop
in
or
xor
xchg
xchg
or
shl
add
outs
cmp
jg
pop
add
shl
mov
or
stos
out
aaa
ja
dec
(bad)
in
lock
sub
cmp
jae
xchg
jno
cli
into
cmps
push
icebp
fist
popf
popf
dec
retf
cmps
cmp
shl
sbb
pop
(bad)
xor
arpl
push
lea
out
addr16
inc
or
add
and
pop
jmp
jmp
call
dec
dec
or
lahf
pop
dec
and
jmp
jp
jmp
pop
fdiv
pop
pop
or
cmp
pop
jl
lahf
in
stos
cld
sub
xchg
cli
sub
push
das
mov
pop
shr
jmp
inc
xor
jns
mov
addr16
or
loope
into
sub
xchg
stos
mov
(bad)
(bad)
mov
mov
jno
(bad)
icebp
(bad)
mov
loop
xchg
sti
adc
or
pop
aaa
sbb
mov
wrmsr
out
jns
adc
adc
(bad)
fsubr
data16
(bad)
out
lahf
ins
sub
(bad)
push
and
pop
jae
in
out
outs
popf
dec
pop
sub
int3
jg
fs
push
cli
ja
icebp
fadd
inc
jg
and
fucomi
dec
lds
(bad)
dec
jmp
dec
loopne
sbb
repnz
xchg
mov
inc
(bad)
(bad)
push
in
fucomi
xor
push
pop
aad
and
mov
pop
shr
sub
sbb
ret
aaa
mul
xor
int3
xor
or
mov
inc
lahf
shr
sub
out
xor
loopne
lea
fistp
das
nop
hlt
enter
jmp
loopne
jbe
mov
pop
pop
mulps
sahf
and
dec
mov
and
adc
cmp
add
dec
and
add
aam
xor
jmp
lock
pop
mov
jae
mov
pop
out
mov
or
add
data16
adc
pusha
dec
jmp
test
imul
retf
imul
repnz
sbb
jge
(bad)
jbe
fisubr
(bad)
fdiv
dec
sub
arpl
cli
sar
sbb
ret
mov
(bad)
cld
out
adc
adc
lock
(bad)
cs
lahf
pop
xor
add
or
scas
clc
xor
jne
dec
int3
jl
xor
inc
or
(bad)
jmp
inc
(bad)
cmp
xor
cli
stos
mov
scas
xchg
adc
xor
sub
adc
dec
jbe
imul
pop
rol
pop
jns
adc
aam
xor
dec
pop
repz
daa
(bad)
(bad)
and
pop
mov
loop
sub
fsub
adc
ja
mov
das
loope
mov
sbb
dec
hlt
icebp
cmp
je
push
jge
in
cli
loop
mov
mov
pop
pop
push
stc
(bad)
fstp
inc
fwait
dec
push
test
mov
lds
jle
lahf
ins
pop
icebp
jae
add
(bad)
xor
mov
xor
inc
pop
loop
fidivr
push
fist
(bad)
sub
ss
jl
dec
out
push
push
out
or
(bad)
jecxz
aas
inc
arpl
ja
jo
cwde
mov
movs
xor
inc
xchg
cs
xor
jl
xor
pop
or
call
and
push
mov
(bad)
jg
je
stos
and
test
mov
pop
add
(bad)
out
clc
mov
ja
push
(bad)
push
xchg
arpl
fwait
hlt
inc
mov
xor
sbb
jo
test
sbb
(bad)
adc
out
(bad)
pop
add
js
add
pop
sub
xchg
and
out
pop
aam
inc
xor
inc
jns
repz
repnz
or
sbb
iret
mov
lods
stos
push
outs
xor
bound
imul
adc
fdivr
jnp
(bad)
pop
imul
xor
cmp
pop
loopne
jp
xor
pushf
(bad)
rcr
(bad)
popa
jge
sub
xlat
jmp
(bad)
lock
and
ficomp
jb
push
add
xor
cld
imul
(bad)
jne
jae
(bad)
call
and
popf
push
js
lods
jmp
pop
cmps
sti
fidiv
jns
stc
icebp
stos
pop
dec
out
pop
sbb
xchg
je
loop
sub
xor
pop
outs
retf
std
icebp
push
int3
ret
inc
cmp
xor
inc
cmp
enter
scas
(bad)
pop
jo
pop
loop
dec
jno
mov
cs
pop
aaa
ja
jg
jmp
sbb
idiv
adc
jb
push
or
repnz
dec
jmp
pop
scas
loopne
jg
(bad)
in
mov
inc
push
jp
push
or
and
jns
xor
pop
sub
loope
imul
jmp
dec
sub
sbb
cmp
sbb
sbb
sub
sub
pop
jl
(bad)
aaa
xor
(bad)
stc
mov
xchg
sbb
(bad)
call
mov
(bad)
cmp
xchg
lods
cmp
shr
ins
xor
dec
(bad)
mov
xchg
(bad)
sub
lods
arpl
out
jl
(bad)
icebp
jmp
loop
inc
popa
(bad)
sbb
inc
adc
shl
out
xor
(bad)
mov
or
(bad)
fcom
std
mov
cwde
mov
sub
fistp
mov
aas
or
retf
idiv
fdivr
jmp
pop
push
cld
(bad)
sbb
jae
outs
lock
push
xor
mov
ins
inc
sti
test
rcr
(bad)
(bad)
mov
ror
(bad)
mov
std
push
or
cmp
sub
mov
pop
aaa
mov
shr
pop
jb
stos
adc
xchg
jae
and
add
push
out
sti
fnsave
(bad)
test
outs
jnp
xor
sub
mov
stos
mov
and
pop
cmp
sti
test
fsubr
mov
mov
gs
mov
pop
lock
xor
mov
xor
jl
inc
jne
push
shr
or
xor
mov
(bad)
fld
push
(bad)
loopne
inc
adc
idiv
lds
push
js
pop
adc
(bad)
pusha
dec
inc
out
out
(bad)
sub
cmp
inc
icebp
aad
dec
mov
iret
sub
fs
push
cli
mov
sbb
jmp
mov
(bad)
jle
cmp
sub
cmp
pop
push
jae
cmp
loopne
dec
adc
mov
sub
mov
adc
in
ins
(bad)
fdiv
clc
rsm
stos
mov
lods
jmp
xchg
mov
rcl
cmp
and
sub
fwait
ret
xor
imul
call
xor
jle
mov
stos
sub
mov
shl
loop
xlat
retf
inc
pop
xchg
jge
arpl
sbb
test
push
out
mov
jp
xor
push
xor
loope
sbb
jns
push
xchg
xor
add
xor
jns
aad
(bad)
retf
jbe
jl
inc
shl
cld
pop
mov
or
ret
pop
je
(bad)
jge
add
retf
cld
cld
and
pop
fimul
pop
out
rcl
inc
dec
psubd
cld
inc
sbb
mov
fwait
jns
dec
jp
sub
jmp
adc
pop
lahf
int3
mov
in
dec
mov
pop
push
or
sar
test
(bad)
lahf
dec
imul
lock
xchg
outs
adc
loope
fs
mov
ret
and
adc
push
xor
jmp
pop
in
bound
add
sti
(bad)
pop
repnz
sahf
dec
in
push
mov
(bad)
lock
scas
cmps
clc
retf
or
pop
and
jb
jbe
loop
out
test
push
sub
enter
into
and
jns
ffree
lods
std
pop
mov
repnz
jle
jo
pop
arpl
enter
out
inc
inc
fnstsw
std
fs
mov
sub
jnp
mov
imul
adc
retf
sbb
mov
xor
push
and
add
add
sub
mov
push
pop
xlat
and
fdivr
jmp
cmp
dec
and
inc
outs
jns
retf
call
dec
lock
ret
add
or
repz
sub
je
fisttp
or
cwde
not
xchg
movs
clc
call
sbb
push
mov
jmp
mov
sub
cld
push
dec
(bad)
addr16
push
jns
xchg
pop
push
jbe
cdq
xlat
mov
sbb
sub
pop
sti
push
add
paddd
(bad)
out
sbb
ins
scas
pusha
ret
dec
out
and
jae
ins
lahf
inc
inc
and
xchg
(bad)
mov
in
pushf
or
sub
pop
adc
test
pop
bswap
scas
xchg
adc
add
xor
aad
cmp
add
xor
xchg
jno
pop
out
add
or
(bad)
dec
dec
push
xor
cs
push
mov
cmp
jecxz
lock
cli
sub
or
lds
mov
(bad)
push
mov
mov
das
inc
fs
icebp
xor
stc
lods
(bad)
xchg
add
mov
mov
psllq
lods
xor
push
cli
jmp
popa
cmp
mov
add
fs
mov
cmp
aaa
loop
cmps
(bad)
sbb
imul
add
jp
cmps
imul
or
jns
mov
mov
sub
adc
(bad)
mov
cs
sbb
pusha
pop
cmp
call
sahf
xor
in
mov
xor
ss
aas
psubd
sub
xor
fs
outs
push
xlat
and
je
retf
jp
aam
xchg
jne
pop
loope
push
inc
cdq
in
gs
(bad)
sub
inc
sub
sub
cli
fs
inc
and
retf
mov
(bad)
xor
mov
sub
add
mov
dec
push
and
adc
pop
add
pop
popa
ins
mov
lods
pop
hlt
add
sbb
mov
jns
sbb
or
jmp
aad
xchg
test
fcmove
sub
das
mov
jge
ja
(bad)
xor
es
and
test
xor
cmp
shld
jns
cmp
pusha
sar
add
(bad)
cmc
cmp
add
aad
loop
pop
les
adc
jp
push
pop
out
pop
cld
xor
stos
aas
jns
mov
mov
dec
lahf
dec
xor
out
or
jp
add
repnz
pop
cmps
jmp
rol
or
imul
cld
jp
or
adc
lods
div
pop
outs
sbb
(bad)
cs
ins
test
aas
fcom
xchg
and
sbb
jmp
retf
fld
lock
and
dec
call
jp
or
push
and
add
and
xor
fld
mov
ins
xor
imul
push
add
sub
inc
pop
and
mov
mov
ins
out
jae
xchg
inc
or
add
cmp
add
and
sbb
retf
pop
rdtsc
call
call
push
pop
and
in
loope
test
adc
pop
mov
mov
(bad)
das
lahf
mov
sbb
add
add
add
ss
sbb
sbb
jnp
icebp
mov
pushf
(bad)
adc
retf
lea
mov
fwait
or
inc
cwde
outs
pop
js
lods
sar
jae
stos
push
push
sbb
xor
daa
rol
adc
aas
push
add
dec
sti
push
pop
out
inc
mov
xor
jmp
xor
cld
mov
test
ss
cli
jg
xchg
(bad)
or
mul
cmps
cs
jmp
ins
mov
jp
sbb
iret
and
adc
jb
dec
mov
inc
dec
jne
(bad)
ror
lods
mov
loop
xchg
cmp
outs
fldcw
fdiv
cmp
fidiv
mov
push
xchg
add
push
jl
fsub
ret
fadd
es
je
mov
cs
in
xor
cli
add
adc
cmp
cmp
(bad)
jbe
cmp
mov
ret
stos
lods
or
jmp
push
adc
or
mov
in
daa
repz
(bad)
(bad)
xor
sub
dec
sbb
dec
xor
sbb
xor
mov
cli
push
ret
pop
sub
mov
popf
cwde
(bad)
int3
cmp
pop
and
xor
mov
cli
bnd
idiv
call
out
out
popf
pop
cli
cmps
aaa
mov
retf
sbb
cwde
stc
push
and
dec
jns
out
pop
cmp
ss
pop
std
(bad)
xor
mov
inc
icebp
mov
jp
rcr
fsin
mov
jo
clc
pop
jmp
xor
idiv
adc
push
repnz
dec
mov
mov
rcr
punpckhbw
mov
mov
cmp
movs
jmp
xor
xor
or
jecxz
adc
mov
(bad)
pop
fs
std
dec
sar
pop
lods
mov
mov
push
inc
(bad)
mov
xor
cwde
repnz
fadd
adc
(bad)
jnp
in
retf
mov
xor
nop
jae
cmp
mov
jl
jmp
arpl
jns
cmp
xchg
dec
popa
dec
cli
in
and
(bad)
mov
push
out
pop
idiv
dec
ins
xchg
pop
inc
cmp
es
mov
and
cs
imul
imul
xor
xor
sub
sub
das
sub
and
inc
jmp
cs
cli
adc
cmc
lods
loop
aaa
daa
in
out
add
adc
ins
mov
and
das
int3
adc
jp
mov
cwde
add
sub
sub
(bad)
pop
xor
call
data16
repnz
dec
pop
(bad)
push
add
not
(bad)
daa
cli
jecxz
mov
dec
or
add
icebp
xchg
(bad)
push
sub
push
nop
pop
call
or
xchg
add
inc
mov
and
jno
(bad)
xlat
and
xor
push
xchg
in
nop
movs
cs
jae
daa
add
fdivr
xor
outs
(bad)
jmp
arpl
xlat
mov
pop
call
add
xchg
pusha
push
fcom
dec
pushf
ja
cli
and
fadd
sub
imul
sub
dec
jns
ds
in
sbb
xor
std
sub
and
sar
inc
mov
jp
int3
lock
aaa
iret
xor
(bad)
das
mov
clc
sahf
inc
sub
pop
sti
(bad)
ins
cmp
mov
mov
fsubr
repnz
cwde
jg
or
icebp
shr
in
dec
iret
ficom
or
xor
popf
xchg
push
adc
push
mov
(bad)
fucom
out
pusha
fdivr
jmp
pop
push
shl
push
loope
pop
sbb
loopne
lock
mov
jbe
gs
dec
loope
pop
stos
or
and
xor
dec
imul
repnz
pusha
aad
sub
clc
xor
mov
and
pop
loop
sub
or
push
lods
out
pop
xor
mov
daa
adc
loope
js
fs
pop
sbb
cdq
add
pop
out
loopne
shl
xlat
sahf
pop
pop
imul
(bad)
mov
adc
push
not
sub
mov
cmovp
das
add
retf
ror
ret
(bad)
es
(bad)
mov
lahf
(bad)
arpl
scas
pusha
mov
loopne
(bad)
fwait
cwde
call
dec
xchg
test
jae
push
stos
jp
jge
sti
mov
idiv
leave
mov
xor
out
dec
(bad)
sub
push
outs
iret
bound
xor
test
push
jns
cli
push
dec
cs
pop
pop
andps
call
fcomp
stos
jle
adc
or
jl
inc
and
inc
or
and
ret
cmp
adc
xor
iret
loop
sysexit
adc
ds
out
repnz
mov
int
je
sar
jmp
xchg
imul
js
sti
dec
push
sbb
outs
dec
das
fs
loope
cwde
add
inc
aaa
jns
rol
sbb
inc
sbb
call
outs
dec
xchg
mov
mov
loope
sahf
push
daa
icebp
pop
jmp
daa
push
fisub
mov
inc
sbb
xor
fidivr
js
jg
in
call
ficomp
das
std
sbb
(bad)
cmp
add
mov
in
cmps
xor
or
idiv
lea
out
mov
xor
test
imul
mov
mov
shl
push
xlat
push
xchg
xchg
test
pop
imul
sub
(bad)
pop
clc
dec
cmp
mov
test
(bad)
cmp
mov
or
lock
fucomp
xor
ret
adc
leave
mov
pop
mov
stc
sub
xor
aas
xor
sti
(bad)
cmps
popf
out
mov
(bad)
pusha
sub
push
stc
pop
cmp
inc
repz
lods
push
jne
cmp
and
xor
jecxz
mov
add
mov
cmps
in
xchg
push
inc
jp
add
sahf
js
lock
mov
pop
jmp
xor
inc
das
loopne
imul
in
pop
push
pop
jecxz
lock
sub
cmp
xlat
jmp
jnp
cdq
std
aaa
(bad)
loope
push
mov
(bad)
fnstsw
out
cs
jnp
sub
or
js
mov
pop
xor
ret
retf
mov
add
mov
(bad)
shl
xor
cld
arpl
and
jmp
jge
add
inc
sbb
(bad)
jmp
jle
xchg
ja
jae
jo
xlat
jnp
ss
in
(bad)
outs
push
out
call
jo
jmp
shr
lods
(bad)
(bad)
mov
ficom
push
das
shl
lea
repnz
fdiv
mov
shr
jnp
push
ret
dec
and
push
hlt
test
lods
shr
ins
sbb
sbb
imul
cmp
stc
push
je
mov
cmp
test
mov
sub
mov
sbb
(bad)
lods
xlat
jmp
add
daa
inc
retf
dec
adc
pop
cmps
jp
sub
ficomp
jmp
sub
adc
(bad)
sub
dec
call
ins
enter
(bad)
movs
out
repnz
int
cmp
les
into
pushf
out
mov
cs
(bad)
sub
(bad)
mov
pop
xchg
xchg
(bad)
xor
ror
jns
sub
inc
mov
pop
(bad)
pop
fimul
enter
sbb
(bad)
loopne
outs
mov
movs
fisubr
mov
mov
jno
inc
in
push
add
or
xlat
push
pushf
stos
mov
mov
or
pop
sar
mov
iret
std
pop
retf
pop
sub
daa
add
jecxz
cmp
jbe
rol
jp
test
dec
jp
add
sbb
xor
sbb
mov
mov
xor
push
cmp
sbb
cmp
in
sbb
push
mov
and
inc
movq
cli
fdivr
mov
pop
sub
add
test
mov
jp
cmp
bound
bound
mov
inc
push
out
ret
cmp
call
fsub
lock
xchg
inc
xchg
xchg
pop
cmp
dec
jp
shl
pop
adc
push
add
pop
push
pop
arpl
daa
nop
jge
add
fstp
das
rol
xor
bndstx
rcr
and
je
fs
fisubr
mov
adc
sbb
pusha
outs
push
test
pop
popf
jmp
jecxz
arpl
cmp
cmp
(bad)
das
ins
xor
fistp
sub
out
retf
ret
cli
cmc
or
imul
lahf
out
scas
mov
test
dec
(bad)
shr
(bad)
mov
ja
or
sbb
mov
imul
mov
rcl
add
cmps
pushf
ja
inc
cmps
jmp
inc
push
dec
adc
cld
xor
jp
xchg
push
movs
cmp
out
jae
pop
pop
shl
xor
ins
sti
bswap
cmps
add
daa
mov
ss
lahf
cmc
arpl
(bad)
push
mov
addr16
fsubr
pop
xchg
xor
xchg
mov
mov
and
sar
xor
hlt
mov
(bad)
les
(bad)
xor
ret
ins
(bad)
fild
mov
aam
mov
sbb
jg
(bad)
push
xor
pop
(bad)
jmp
mov
xchg
sub
ins
push
pushf
add
jp
xchg
int3
and
cli
test
push
test
mov
std
in
(bad)
mov
popa
rcl
dec
xor
sbb
(bad)
push
mov
test
mov
add
cmp
fld
je
xor
test
mov
pop
fbld
and
nop
mov
dec
(bad)
pop
ret
ja
(bad)
aaa
pop
nop
xchg
hlt
and
test
jne
in
fidivr
mov
mov
fadd
rcr
jns
or
pop
fnstcw
pop
and
inc
cld
leave
imul
lahf
(bad)
xor
mov
cli
jecxz
cmp
xchg
xchg
jmp
pushf
das
mov
pop
call
jmp
fs
sti
sbb
fnstsw
or
out
aad
pop
rcl
cli
xor
and
xchg
xchg
cmp
jmp
dec
cs
or
lahf
js
pop
push
jmp
inc
mov
frstpm(287
test
(bad)
or
jae
adc
aad
loop
cld
jmp
fadd
cli
push
dec
dec
cli
rcr
xor
mov
inc
mov
mov
stos
shr
ja
mov
stc
push
pop
push
mov
fs
xchg
xchg
fistp
add
adc
pop
and
pop
pop
xor
pop
pop
adc
fimul
jno
xchg
push
fwait
or
(bad)
cld
jno
in
mov
aaa
jge
jp
jle
ins
push
sbb
out
inc
pop
das
adc
adc
aas
pusha
stc
and
pop
aaa
inc
xor
add
ja
es
sub
mov
sar
push
xor
cld
sbb
mov
sub
addr16
shl
add
popa
loope
pop
pop
push
mov
(bad)
mov
popf
inc
pop
std
mov
mov
lods
add
(bad)
pop
aam
cwde
dec
stc
mov
cli
push
jne
rcl
or
mov
pop
imul
outs
(bad)
inc
mov
cli
push
xor
lods
push
scas
pop
push
popf
movs
cmp
inc
stos
inc
adc
(bad)
cmp
jg
(bad)
jmp
mov
xchg
jnp
adc
or
xlat
jg
mov
push
lock
mov
jl
mov
les
ins
aaa
lds
(bad)
push
xchg
in
push
mov
push
inc
pushf
sbb
cli
sub
rol
(bad)
aaa
inc
std
jl
pop
repz
fxch
mov
cmc
jg
(bad)
cmp
add
xor
jns
(bad)
(bad)
and
sub
loope
inc
inc
das
and
iret
jbe
cdq
imul
and
xchg
dec
(bad)
cmp
mov
adc
pop
add
sbb
ret
mov
jnp
mov
lods
daa
jge
xor
test
cli
inc
cmp
sub
or
cmps
in
pop
or
sub
adc
sbb
add
and
test
xor
inc
iret
test
int
ret
or
jmp
cli
icebp
pop
addr16
pop
cmp
xor
mov
cmp
xchg
inc
ss
aad
inc
stc
mov
cmp
adc
shl
ss
fcmovne
jns
pusha
dec
js
movs
sbb
scas
out
(bad)
fdivr
push
out
scas
repnz
cli
out
jp
xlat
inc
pop
rol
hlt
xor
leave
sar
pop
pop
or
lds
lahf
movs
sbb
rol
cs
cli
cmp
(bad)
shr
or
test
loope
adc
vfmsubadd231ps
sbb
mov
sub
add
hlt
imul
dec
bound
(bad)
(bad)
out
sbb
xor
(bad)
(bad)
pop
dec
dec
mov
loop
outs
cmps
xor
sub
push
adc
pop
add
pop
es
pop
push
fnstenv
mov
pop
fimul
rol
leave
fcomp
mov
mov
sbb
xchg
cmp
outs
ja
aaa
sbb
jg
lock
fmul
mov
xor
loop
std
and
cmp
cwde
jns
sbb
js
shl
popf
cmc
xchg
inc
retf
cld
xchg
and
stos
stc
mov
lds
sbb
cmp
cmps
(bad)
mov
jb
in
add
or
jmp
stos
pop
add
loopne
fwait
jbe
dec
push
lahf
push
popa
add
or
into
daa
xor
add
push
cli
jbe
jb
fdiv
xor
mov
leave
shr
xor
cmps
mov
test
std
daa
xor
mov
and
sbb
icebp
pop
jnp
sti
and
jp
dec
aam
mov
sub
sub
retf
xchg
mov
mov
jp
cmp
and
dec
cmp
or
lds
pop
mov
adc
mov
rcr
sar
xor
pop
pop
femms
sub
shl
(bad)
ins
add
enter
shr
add
mov
in
inc
push
cmp
xor
mov
out
push
out
adc
dec
xchg
(bad)
jmp
push
das
mov
sub
in
and
jnp
dec
int3
push
setbe
adc
pop
sub
mov
loope
sbb
mov
daa
jecxz
adc
cmps
in
or
sbb
test
movs
xlat
test
test
dec
sbb
add
cmp
int
das
bound
into
sub
mov
daa
stc
clc
and
int3
in
pop
adc
cmps
pop
cmp
clc
jge
(bad)
push
mov
(bad)
shl
cs
dec
lahf
sbb
mov
in
mov
out
fsub
bnd
jge
mov
mov
clc
jae
add
imul
adc
stos
in
(bad)
bound
iret
inc
pop
pop
xor
bound
xchg
push
pop
rcr
cmp
je
cmp
imul
push
ins
add
xor
mov
call
ins
movs
or
mov
mov
je
mov
lahf
ss
in
mov
xchg
ss
sbb
call
xlat
imul
fdivr
inc
xchg
outs
push
ja
ror
ja
pop
mov
inc
cmp
push
loopne
pop
lds
ins
mov
mov
out
xor
dec
stc
daa
mov
cmp
dec
aad
ror
sub
xchg
cmps
shl
or
fisttp
add
mov
(bad)
and
test
psllw
xchg
and
sar
fnstsw
add
jae
mov
mov
mov
lods
mov
xchg
xor
jne
pop
cli
dec
dec
mov
cmp
mov
call
mov
jae
mov
ja
jne
push
and
mov
(bad)
adc
out
mov
cmp
dec
push
cmps
jae
push
push
adc
adc
xchg
mov
cli
xchg
add
cmp
stos
inc
add
(bad)
(bad)
sbb
(bad)
repz
xchg
push
int
jns
sti
cmp
fwait
std
test
(bad)
jecxz
out
and
pop
mov
push
icebp
shr
push
add
cld
(bad)
cdq
dec
mov
ja
jp
xor
enter
add
adc
int
aad
out
das
push
sbb
fs
imul
pop
(bad)
ja
fcmovnbe
xchg
mov
gs
adc
mov
and
mov
mov
fisub
cs
and
xor
scas
mov
cmp
adc
movs
sar
xor
stc
out
dec
out
pusha
mov
aad
(bad)
xchg
sub
jp
hlt
jmp
xchg
fisttp
adc
push
and
or
sbb
neg
retf
mov
dec
add
inc
lock
in
daa
adc
and
dec
cmp
(bad)
pop
add
lods
rcr
adc
xor
mov
cli
(bad)
push
(bad)
cdq
dec
jns
(bad)
mov
dec
mov
push
das
add
call
scas
std
fsubp
cmovbe
aad
jmp
mov
aas
ss
mov
das
sti
mov
inc
(bad)
cli
mov
sar
aam
cli
outs
scas
add
or
sti
inc
(bad)
fwait
lods
pop
sub
sbb
jg
pop
scas
das
frstor
jns
bound
mov
(bad)
std
lahf
or
push
jmp
pop
imul
sbb
xchg
xchg
jle
loop
jae
mov
inc
in
add
push
inc
(bad)
mov
jmp
push
mov
push
fadd
xchg
sar
popf
les
cmp
sub
div
push
rcl
aad
fstp
stos
lahf
outs
mov
inc
shr
(bad)
pop
mov
rcr
(bad)
pop
addr16
call
dec
cmp
jle
(bad)
jbe
cmp
das
(bad)
xor
pop
xlat
and
xchg
les
and
lea
push
(bad)
cld
je
pushf
mov
xor
and
dec
in
(bad)
loop
ficomp
loope
(bad)
cmps
popa
adc
jge
in
add
aad
cs
mov
inc
xchg
mov
scas
cdq
mov
das
jecxz
inc
call
pop
mov
pop
pop
cmp
cmp
ret
sbb
or
dec
inc
adc
cmp
jecxz
lock
xchg
outs
jns
xchg
or
sub
loope
out
mov
std
daa
adc
addr16
(bad)
(bad)
sbb
or
mov
stos
shl
pop
inc
outs
mov
sahf
sub
aad
dec
push
outs
out
mov
sbb
push
push
dec
ss
jg
push
shl
sbb
mov
pop
scas
mul
ja
or
adc
cdq
sub
stos
in
push
outs
pop
and
add
adc
inc
enter
lahf
scas
(bad)
xchg
fadd
xor
cmp
pop
push
mov
and
ficomp
mov
add
push
loope
cwde
cmps
sti
retf
sub
aaa
lahf
xchg
xchg
sbb
in
cmp
mov
lods
push
repnz
movs
xlat
sbb
cmp
jns
(bad)
inc
jecxz
mov
push
cli
lds
inc
cmp
stos
(bad)
sub
ror
mov
stos
in
mov
(bad)
jecxz
xlat
sub
cmp
ret
inc
(bad)
in
xor
dec
jno
lahf
frstor
pop
add
cmp
into
pushf
mov
(bad)
mov
cmp
xor
mov
dec
push
jns
pop
jnp
test
mov
bnd
mov
daa
icebp
lods
jle
sbb
fdiv
dec
adc
fcomp
jp
mov
pop
(bad)
and
loope
jo
push
cli
and
sbb
dec
(bad)
cli
push
std
test
jbe
arpl
adc
mov
xchg
mov
fisttp
(bad)
jp
dec
gs
inc
xchg
mov
or
ins
test
push
jo
outs
mov
(bad)
sbb
pushf
stos
inc
cmp
fst
int3
dec
xor
push
(bad)
aam
fcom
sub
inc
jns
nop
jb
(bad)
vunpcklps
scas
xor
jp
lahf
je
adc
jns
push
int
add
lods
add
mov
jne
repz
out
lahf
mov
or
daa
loopne
icebp
cmp
mov
push
ret
(bad)
mov
in
(bad)
mov
push
mov
xchg
neg
sub
xor
pop
jmp
rcr
inc
aaa
inc
and
mov
jb
cli
fs
lds
pop
imul
add
and
lahf
loope
imul
pop
(bad)
sub
int3
lods
(bad)
lods
nop
ficomp
sub
leave
inc
add
dec
mov
arpl
scas
inc
and
out
(bad)
pusha
mov
or
sbb
shl
fcomip
jnp
xchg
arpl
popa
dec
out
jg
jns
adc
add
outs
cmps
add
div
addr16
test
add
pop
and
cmp
mov
data16
push
push
cwde
mov
inc
gs
shl
(bad)
pop
fmul
mov
inc
lea
(bad)
push
push
and
and
(bad)
sar
fucomi
push
mov
(bad)
xchg
syscall
inc
mov
sub
jp
jmp
(bad)
cmp
rol
sar
clc
inc
sub
fdivr
ja
outs
inc
mov
fdivp
inc
enter
sbb
push
shl
loopne
lahf
aas
lods
(bad)
out
dec
out
test
xor
adc
add
mov
dec
loop
xchg
jnp
aaa
or
xchg
mov
jge
in
or
inc
fs
mov
(bad)
jae
pop
int
xlat
outs
mov
mov
ins
jns
(bad)
in
and
mov
retf
push
leave
push
cmp
mov
scas
xchg
movs
pop
fs
mov
clc
loope
rdmsr
(bad)
sbb
ds
ffreep
sub
imul
jg
pushf
push
sub
out
pop
cmp
mov
(bad)
in
xor
ds
mov
add
mov
dec
jecxz
xor
adc
mov
jns
ins
push
dec
mov
jne
ret
call
in
jnp
xchg
stc
(bad)
mov
cmp
sbb
imul
(bad)
ja
dec
or
mov
push
out
xchg
in
(bad)
aas
inc
pop
mov
fcmovne
(bad)
push
and
clc
retf
mov
inc
jnp
xor
scas
ins
call
mov
add
ins
or
(bad)
repz
mov
dec
add
mov
pop
in
push
pop
rol
sub
dec
std
jmp
xor
pop
sbb
or
sbb
movs
push
mov
ret
(bad)
mov
(bad)
test
popa
lods
jne
add
or
adc
pop
std
daa
fadd
xor
jp
sub
add
mov
fiadd
and
aas
inc
aaa
cmc
push
outs
jb
sbb
cmps
lds
fs
in
pop
les
rol
(bad)
lods
inc
inc
adc
jns
(bad)
xor
ds
push
jmp
(bad)
lock
mov
pop
xchg
addr16
pop
or
call
sbb
fiadd
mov
mov
pop
cwde
xor
fcomp
dec
mov
fld
dec
adc
and
inc
mov
fdiv
push
(bad)
pop
sub
pop
lock
inc
push
das
imul
(bad)
loop
xchg
xchg
je
mov
shl
out
xchg
ins
pop
(bad)
in
cmps
push
aaa
pop
call
icebp
mov
pop
dec
mov
jmp
dec
movs
cdq
in
xchg
jp
(bad)
push
mov
dec
adc
test
fidiv
(bad)
js
hlt
jbe
sbb
jmp
push
sub
or
xchg
dec
fucomp
push
(bad)
ins
jmpw
mov
sub
push
adc
jge
dec
mov
das
cmp
jecxz
ds
pop
xchg
(bad)
or
jmp
sahf
jp
xchg
mov
je
sar
dec
and
cmp
push
inc
jle
fist
ja
cmps
xchg
dec
dec
and
std
inc
(bad)
sub
cli
dec
mov
ins
(bad)
aad
loopne
dec
(bad)
stos
mov
data16
movs
and
(bad)
(bad)
das
daa
xchg
cmp
xor
pop
xchg
pop
dec
push
pushf
mov
mov
pop
adc
daa
adc
loope
cmps
sbb
imul
inc
mov
stos
dec
daa
(bad)
xchg
in
xchg
clc
arpl
lock
(bad)
int3
pop
inc
mov
pop
push
loop
dec
mov
sahf
pop
jecxz
mov
out
sar
fwait
mov
or
sub
jge
sub
jb
or
(bad)
js
add
sbb
jecxz
(bad)
cmp
ss
dec
pushf
or
mov
dec
loopne
retf
xor
cli
fadd
rcr
mov
ins
and
(bad)
pop
fisttp
cli
sbb
xchg
sbb
js
push
mov
ror
mov
inc
or
repnz
mov
pusha
jmp
fcomp
jge
(bad)
fdivrp
loop
dec
sahf
mov
cli
and
in
(bad)
ins
jecxz
daa
push
rol
xor
cmps
jg
inc
and
(bad)
scas
sub
mov
psubusw
(bad)
push
lods
leave
sbb
(bad)
mov
js
rcr
sub
cli
inc
cld
(bad)
sub
dec
sahf
aam
(bad)
push
jge
je
add
mov
pop
ss
jns
pop
push
sbb
aam
mov
arpl
push
mov
jmp
int3
sbb
mov
mov
mov
dec
xchg
loope
(bad)
jbe
aam
sahf
ror
(bad)
mov
les
pop
out
(bad)
in
(bad)
xchg
(bad)
adc
pop
sbb
or
and
outs
cmp
mov
adc
(bad)
cmp
inc
jl
mov
ins
leave
pop
sub
mov
or
sub
inc
mov
movsx
clc
out
lds
pop
adc
(bad)
loopne
or
inc
ins
imul
daa
call
fs
jns
mov
add
(bad)
std
or
pop
adc
pop
into
inc
sub
and
clc
(bad)
sbb
mov
mov
push
dec
cld
test
mov
(bad)
or
and
adc
mov
or
dec
popf
jnp
cli
adc
cmps
mov
and
or
dec
mov
fidivr
in
adc
inc
cs
mov
(bad)
leave
mov
fcmovnb
(bad)
repz
add
inc
or
ds
es
cmp
mov
and
sub
into
dec
arpl
lods
fmul
or
add
and
cmp
mov
ins
or
mov
adc
out
sub
and
icebp
shl
cmp
clc
jp
cmp
cld
test
and
(bad)
and
seta
dec
inc
inc
arpl
dec
call
lods
or
fs
push
mov
inc
ja
hlt
(bad)
mov
inc
sub
stos
jmp
fld
popa
jl
sbb
rcr
ret
cmp
xor
pop
add
cmp
inc
and
test
cwde
and
cmp
or
das
cmps
and
ror
in
dec
fiadd
xor
mov
les
nop
cli
scas
outs
cmp
fucompp
(bad)
adc
outs
(bad)
and
xor
mov
xor
fstp
cs
clc
pushf
sbb
push
pushf
push
lods
sar
adc
sub
fbstp
cli
std
es
fwait
add
aaa
xchg
pop
push
rcr
es
xor
inc
jmp
sub
mov
sahf
fisub
clc
repz
scas
pop
push
(bad)
sub
cmp
jl
xchg
sub
inc
js
sbb
mov
add
lds
sbb
(bad)
push
stc
stos
lods
mov
cli
dec
(bad)
addr16
clc
jle
pop
ss
dec
and
(bad)
mov
push
dec
cmp
rcr
repnz
mov
bound
jp
and
icebp
mov
call
pop
jns
inc
mov
sub
sbb
ins
add
add
test
or
cmp
adc
inc
pop
adc
int3
pop
cmp
ja
(bad)
fwait
jg
fcomip
(bad)
and
popf
ins
ds
repz
mov
pop
xchg
mov
mov
mov
js
jno
loop
jp
or
dec
(bad)
and
sub
dec
in
push
shl
pop
jae
jbe
mov
cmps
pop
sub
adc
std
test
scas
adc
(bad)
lods
fsubr
dec
jne
aam
jns
pop
mov
and
aaa
dec
push
mov
aaa
push
dec
jbe
xor
sub
sub
xlat
push
sub
mov
jge
(bad)
loope
ficom
jns
nop
popf
(bad)
sahf
jb
adc
and
(bad)
xchg
jle
adc
nop
mov
daa
ds
or
lock
(bad)
or
sahf
xchg
jecxz
imul
popf
(bad)
adc
jle
ss
cmps
mov
or
push
mov
dec
push
pop
mov
push
cdq
stc
adc
cld
jge
les
sbb
mov
(bad)
popa
stos
(bad)
stos
dec
xchg
xchg
xor
jmp
push
pop
push
retf
test
dec
fld
or
ja
pmaxsw
inc
pop
shl
mov
aaa
int
sub
aas
shl
xor
sahf
bound
dec
stc
pop
out
adc
adc
or
push
sti
pop
mov
lods
mov
sbb
sub
dec
xor
xchg
(bad)
or
fistp
das
and
pop
or
adc
pop
jp
out
in
out
sbb
cmp
sub
popf
test
nop
aaa
jg
pop
aas
and
sbb
aad
push
mov
xchg
xrelease
bound
mov
mov
(bad)
retf
cdq
stos
adc
and
imul
cmp
mov
arpl
jle
movs
fcom
daa
cmp
and
jnp
daa
packuswb
cli
cld
mov
shr
hlt
cmps
xor
cmp
add
repz
pop
in
imul
xchg
mov
pop
mov
fidivr
dec
(bad)
push
xchg
sbb
and
pop
daa
xchg
mov
fld
mov
clc
sub
fiadd
jnp
pop
shl
stos
cld
jae
pop
mov
pop
push
unpcklps
movd
mov
fsubr
pop
cmp
mov
mov
xor
mov
xchg
push
sub
(bad)
pop
fsubr
test
ss
xor
out
jne
mov
(bad)
mov
inc
cmp
mov
add
cmp
cld
loope
jns
cdq
sub
dec
(bad)
adc
or
lea
or
imul
dec
(bad)
push
cwde
out
mov
es
xchg
fmul
fidiv
or
lods
mov
pop
jb
adc
(bad)
sbb
clc
rol
add
cli
sti
arpl
shr
xor
mov
push
(bad)
fadd
xlat
(bad)
xor
ret
ss
xor
cmp
adc
mov
jns
(bad)
pop
cmp
and
imul
jmp
cmps
inc
push
mov
xchg
fdivr
mov
sar
shr
lods
sbb
test
mov
(bad)
in
fcomp
jg
mov
cmp
inc
inc
aaa
sub
scas
dec
pop
ins
sub
jmp
shl
jg
or
inc
js
ss
stos
xor
xor
sbb
loop
sub
repz
dec
stos
mov
cmp
dec
xor
mov
push
lock
mov
(bad)
fnstsw
jae
mov
in
mov
ds
call
stos
scas
jge
xchg
daa
add
xchg
inc
jnp
dec
and
fistp
dec
or
(bad)
in
fwait
scas
repz
retf
ret
mov
cmps
lods
cli
xchg
sub
es
outs
mov
stos
add
stc
rcl
ds
addr16
or
das
(bad)
adc
lods
cmp
jnp
std
xor
aaa
mov
xor
fst
test
test
inc
(bad)
idiv
dec
js
cs
mov
call
aam
(bad)
mov
adc
or
iret
mov
or
gs
pop
inc
jmp
push
jo
test
outs
jns
(bad)
in
dec
pop
or
dec
sbb
pop
ret
sub
scas
mov
xor
jno
(bad)
das
adc
cli
inc
sub
hlt
mov
adc
add
(bad)
mov
xchg
xor
pop
jne
inc
ins
mov
addr16
popa
test
inc
xor
add
loopne
mov
xor
xchg
fnsave
push
fs
pop
mov
(bad)
aaa
aam
mov
(bad)
push
js
sbb
pop
(bad)
sahf
retf
(bad)
sub
loopne
pop
inc
fistp
or
int3
rol
and
mov
mov
(bad)
ss
movaps
xor
jmp
pushf
sbb
stos
(bad)
fs
aaa
arpl
rcl
das
(bad)
popa
and
sbb
int3
hlt
dec
mov
pop
fcmovbe
inc
pop
inc
das
mov
add
pop
pop
and
iret
aam
cwde
(bad)
xchg
mov
(bad)
mov
(bad)
std
retf
rcl
clc
jg
sbb
retf
sti
shl
mov
add
xchg
ret
add
jbe
sbb
clc
jbe
push
pushf
(bad)
xor
cmp
push
xor
(bad)
mov
inc
in
lahf
add
(bad)
das
xchg
jb
in
mov
(bad)
movs
adc
loopne
jge
idiv
scas
or
mov
out
icebp
fwait
bound
xchg
xchg
add
fnstsw
je
ret
pop
idiv
push
jno
popa
lods
add
or
rcl
xchg
mov
outs
(bad)
sbb
jne
add
adc
rcr
push
mov
xor
mov
or
inc
mov
push
mov
rcl
xchg
mov
pop
sar
lock
ret
xchg
adc
cdq
xor
fistp
inc
jp
xchg
mov
fisub
jno
cmp
sbb
sbb
mov
mov
push
mov
in
or
dec
(bad)
arpl
jae
push
fadd
cmps
mov
(bad)
cli
retfw
pop
cmp
mov
movs
test
xor
jmp
bnd
cld
es
adc
jle
sub
mov
push
sbb
adc
fwait
clc
mov
mov
sti
jne
xlat
cmp
mov
and
jmp
aad
inc
cmp
test
sti
mov
ss
dec
pop
and
in
into
inc
hlt
mov
xchg
jns
push
inc
mov
out
repnz
loop
sahf
test
and
dec
popf
test
(bad)
push
(bad)
push
int3
jns
push
mov
(bad)
cld
and
iret
(bad)
fdiv
push
(bad)
push
shr
mov
jns
ja
pop
inc
sbb
(bad)
mov
loopne
stos
jp
pop
push
test
out
lds
in
outs
js
data16
shr
(bad)
adc
add
cvtpi2ps
ror
mov
cli
and
repz
data16
mov
mov
jbe
xchg
adc
cmp
out
(bad)
sbb
cmp
fdivr
in
inc
mov
jle
add
push
(bad)
lods
mov
out
ins
cmc
inc
lock
shl
imul
and
fcmove
clc
out
sbb
(bad)
cmps
ffree
inc
inc
pop
and
cli
cmp
or
add
adc
push
mul
sbb
and
stc
fnsave
dec
xchg
cdq
xor
add
mov
mov
and
push
cmc
call
jp
jecxz
aas
(bad)
div
sub
cmp
push
scas
cvtps2pi
sbb
adc
cmp
xor
pop
sub
sbb
outs
push
mov
xlat
call
(bad)
std
inc
in
add
pop
jle
retf
(bad)
js
and
inc
adc
adc
mov
aas
mov
xor
jmp
imul
sahf
jp
cmc
sub
cmps
mov
mov
int3
(bad)
out
cmc
cwde
push
xchg
xchg
sbb
dec
jns
add
fcmovb
mov
retf
push
inc
inc
add
cmp
and
pop
sbb
cmp
aad
mov
arpl
pop
push
inc
fbld
and
sbb
inc
das
test
fcomp
and
inc
cld
xor
sub
test
mov
and
test
add
xchg
inc
pop
dec
jnp
aas
dec
in
pop
sub
jp
icebp
adc
shl
pop
xchg
cdq
add
cmps
out
fldcw
gs
(bad)
inc
mov
fild
add
ss
jnp
mov
pop
push
sub
push
push
dec
mov
mov
xchg
mov
out
xchg
icebp
inc
sub
push
cmp
pop
jns
pop
jg
in
jg
adc
sbb
cmp
addr16
push
sub
pop
xor
inc
aaa
mov
jns
mov
test
add
(bad)
in
js
cmp
cld
mov
das
mov
sbb
popf
repz
imul
adc
mov
and
sahf
cli
sub
clc
jl
test
cli
mov
xor
push
addr16
iret
xchg
jmp
mov
test
mov
add
mov
jmp
pop
mov
js
xor
lea
rcr
cmp
mov
cmp
loop
loopne
out
into
add
ss
and
jbe
in
or
lgdtd
call
cmps
jg
fchs
jl
sbb
aas
jp
shl
aaa
pop
retf
daa
push
sub
mov
inc
cld
inc
or
mov
inc
(bad)
adc
cmp
lahf
xchg
push
rol
sub
mov
ret
bound
rcr
mov
aas
cmps
fstp
scas
or
dec
cmp
sub
(bad)
(bad)
cmc
in
mov
jae
in
(bad)
and
sbb
jbe
mov
push
push
cmp
pop
xor
mov
sti
mov
pop
in
cdq
gs
mov
add
push
cwde
mov
mov
mov
xor
xor
xchg
xchg
das
sub
xchg
mov
sti
push
mov
(bad)
rcl
xor
(bad)
xchg
inc
dec
jae
xchg
outs
dec
(bad)
push
pop
fisub
or
mov
cli
popf
dec
xchg
sbb
js
fsub
push
sub
shr
fld
pop
ins
mov
adc
call
(bad)
cld
frstor
sbb
scas
outs
pop
cli
push
jo
dec
jne
std
stos
test
push
clc
mov
mov
sub
inc
push
mov
add
ret
(bad)
xchg
mov
push
or
mov
retf
std
cmp
jle
xor
fbstp
mov
mov
cmp
sub
dec
aad
stos
jnp
push
div
or
fwait
das
(bad)
pushf
in
mov
dec
or
sub
test
pop
push
xchg
jne
pop
mov
(bad)
xchg
neg
cmp
jge
mov
pop
inc
jl
push
in
dec
not
jo
jg
(bad)
ror
in
xlat
iret
pop
xor
mov
mov
sbb
ins
cmp
int
into
adc
and
in
inc
lahf
sbb
mov
dec
mov
pop
cmp
and
cmp
cli
push
out
and
stc
mov
(bad)
jge
(bad)
(bad)
sub
inc
in
dec
xchg
mov
push
jl
mov
xlat
dec
mov
add
(bad)
pop
inc
and
mov
ret
cmps
iret
jmp
and
cmp
cdq
imul
pop
out
add
lods
(bad)
push
int
leave
movs
ret
mov
ja
jp
mov
push
add
fisubr
sbb
lods
dec
jp
mov
mov
idiv
call
popf
push
stc
jne
outs
pop
cmp
call
cli
xchg
rcr
xor
lsl
mov
cmps
push
cmp
sar
aaa
mov
jns
pop
ins
and
pop
bound
loopne
sbb
fnstcw
push
(bad)
mov
(bad)
pop
or
aam
mov
xlat
mov
stc
push
pop
mov
push
popa
sbb
les
sbb
loope
xchg
inc
mov
sub
mov
pop
in
clc
arpl
pop
bound
out
scas
jge
add
and
mov
xor
adc
sub
adc
pop
adc
(bad)
(bad)
out
pop
jl
rcl
idiv
mov
or
aaa
mov
push
push
pop
push
inc
scas
mov
xor
mov
mov
(bad)
das
mov
jge
in
sbb
push
call
pop
jp
mov
sbb
je
movs
ret
(bad)
adc
fadd
ret
das
sub
mov
mov
sar
xor
cmp
fwait
and
pop
iret
pop
add
dec
and
nop
cmp
mov
test
sub
sbb
add
inc
(bad)
fistp
imul
sbb
aas
movs
or
and
add
(bad)
sub
xchg
es
xchg
mov
add
bound
pop
das
inc
inc
(bad)
(bad)
sub
sahf
jns
int3
clc
movs
ins
sysenter
xchg
sar
push
dec
xchg
jno
mov
ja
push
retf
into
dec
sbb
dec
adc
call
xor
xchg
mov
adc
rcr
xor
or
mov
mov
sysenter
pushf
push
push
out
xor
or
cli
dec
xchg
cmp
mov
mov
(bad)
or
cmps
nop
jbe
fsubr
rcl
cli
mov
test
(bad)
fwait
movs
pop
lock
mov
jge
aam
js
loop
(bad)
loopne
mov
push
jbe
xchg
mov
popa
push
pop
in
mov
dec
cmp
push
pop
or
adc
cli
out
pop
jmp
add
call
mov
cwde
test
xor
jo
jge
add
mov
fstp
jnp
aaa
ins
xchg
adc
dec
jnp
shl
clc
cmp
xchg
les
rol
xor
stos
(bad)
retf
daa
inc
cmps
rol
(bad)
mov
mov
pop
sub
add
(bad)
out
inc
inc
daa
ins
add
adc
and
(bad)
int
(bad)
fs
test
cmc
(bad)
jae
pop
mov
or
and
mov
jb
xlat
sbb
in
mov
(bad)
pushf
cdq
enter
xchg
adc
xor
fcmovbe
adc
pop
ja
ficom
cld
or
push
jmp
out
mov
add
jle
pop
add
xchg
mov
jmp
jnp
shl
push
jne
div
aaa
lahf
icebp
sub
(bad)
retf
sub
push
and
in
(bad)
xchg
or
das
je
pop
mov
sbb
lock
outs
out
ret
cmps
xchg
push
xor
xlat
int3
(bad)
cli
in
call
shl
ins
(bad)
mov
and
(bad)
xchg
cmc
popa
jge
aam
and
ss
test
mov
sti
push
hlt
out
jmp
or
jb
adc
pop
pop
iret
sar
call
jecxz
cmp
rcl
shl
pop
enter
mov
xor
ds
test
and
or
adc
aaa
retf
stos
jbe
into
fs
in
ss
adc
addr16
test
and
and
adc
jecxz
fdivr
lods
jo
(bad)
cmps
aam
fistp
mov
cli
mov
mov
mov
sub
(bad)
push
bound
push
hlt
jne
shl
mov
fwait
sti
stc
xor
lods
fmul
sbb
add
push
mov
test
cmova
(bad)
sub
retf
(bad)
mov
push
mov
scas
mov
stc
jle
add
mov
dec
jp
(bad)
xchg
lods
ficomp
pop
test
sbb
inc
or
daa
push
aas
enter
aam
push
inc
pop
out
xor
call
mov
clc
mov
mov
adc
xchg
daa
pop
jle
lahf
jb
add
out
cli
xlat
ja
ret
leave
or
jbe
adc
sbb
into
fmul
movs
jns
xchg
xchg
(bad)
imul
mov
xchg
(bad)
sbb
mov
xor
inc
or
(bad)
push
cmp
sti
fcmovne
idiv
xchg
xchg
mov
jnp
scas
outs
mov
in
mov
and
loopne
dec
adc
fdivr
sub
push
push
(bad)
fidivr
das
scas
lods
jle
(bad)
outs
clc
xchg
push
fs
xor
add
repz
aam
mov
sti
or
pop
imul
imul
popf
nop
(bad)
ins
xor
psadbw
lods
jne
enter
add
and
pop
(bad)
and
inc
sbb
movs
dec
mov
inc
mov
xor
inc
imul
inc
rcr
mov
jp
xor
nop
pop
sbb
out
sub
scas
mov
stos
in
xchg
std
jl
mov
test
fld
sub
inc
pop
mov
(bad)
(bad)
push
adc
mov
cli
add
mov
movs
(bad)
(bad)
xchg
mov
push
or
outs
jns
ret
pushf
inc
jns
mov
pop
sbb
push
stc
and
dec
mov
xchg
pop
(bad)
jae
push
lahf
xchg
xor
shl
sub
call
ret
aam
pop
sbb
or
stos
pop
stc
and
(bad)
loopne
xor
repz
cld
cmps
ja
sub
das
bnd
popa
inc
sbb
stos
dec
(bad)
jne
cmc
out
mov
rcl
cmp
jp
lods
inc
pushf
test
loope
aam
xor
cmp
das
sub
(bad)
fcomp
sahf
lahf
push
mov
pop
jecxz
dec
inc
dec
mov
aaa
jbe
shl
jmp
pop
jmp
mov
ror
push
inc
imul
inc
(bad)
mov
xor
(bad)
cdq
(bad)
movs
stos
fsubr
je
outs
push
add
cmps
imul
andnps
inc
retf
test
(bad)
xchg
jle
pop
jmp
xchg
xchg
push
pop
sub
and
xchg
pop
cli
mov
add
out
and
mov
loope
cmp
sub
mov
neg
das
in
add
mov
mov
sbb
icebp
jae
sub
icebp
mov
retf
jge
and
lahf
mov
inc
mov
cmps
cmp
int
dec
(bad)
sub
je
out
xor
test
push
dec
and
jmp
nop
add
ja
ins
comiss
arpl
leave
pop
(bad)
and
sti
(bad)
pop
sub
cld
sub
mov
jmp
cmp
pop
in
stc
jne
add
xchg
popa
in
mov
lds
movs
xchg
jmp
imul
nop
cmp
xchg
inc
mov
add
stc
jmp
and
push
push
enter
mov
fnstcw
mul
cmp
mov
arpl
mov
cmp
movs
pop
fs
cmp
fadd
add
scas
inc
xchg
cmp
retf
cmp
adc
jne
or
jecxz
in
jg
aaa
dec
add
bound
lods
pop
inc
xor
mov
movs
cwde
mov
aam
inc
icebp
xor
fadd
icebp
aas
sbb
push
in
and
loop
fidiv
(bad)
or
mov
mov
addr16
cwde
rol
cmps
or
push
xor
rcl
ds
cmp
jne
(bad)
and
adc
enter
pop
mov
pop
loope
outs
scas
pop
mov
and
lock
pop
cli
cmp
inc
mov
dec
cdq
inc
out
mov
sbb
in
cmp
sbb
and
xchg
arpl
xor
push
les
xchg
mov
cdq
ins
jns
sbb
xor
pop
leave
and
mov
push
iret
(bad)
pop
(bad)
icebp
sub
jecxz
cdq
(bad)
in
jp
push
xchg
dec
mov
daa
inc
rol
test
add
out
(bad)
pop
mov
lods
jecxz
(bad)
mov
cmc
sbb
(bad)
(bad)
leave
push
(bad)
jae
scas
xchg
or
push
inc
das
xchg
sti
aad
mov
mov
pop
cmp
ftst
in
(bad)
(bad)
sub
enter
mov
pop
or
pop
lods
pop
push
mov
shl
jmp
xchg
cmp
mov
add
ror
iret
dec
xchg
xchg
cld
inc
bound
cmp
shr
stc
cmps
or
bound
add
mov
shr
ss
and
(bad)
dec
cmps
pushf
jno
pop
(bad)
loopne
mov
or
adc
loop
in
repz
dec
mov
(bad)
int
(bad)
aas
mov
ficom
cmps
cdq
sti
inc
scas
arpl
mov
xchg
inc
(bad)
cdq
(bad)
leave
lods
js
push
mov
gs
inc
dec
mov
(bad)
ins
mov
fimul
repz
ret
mov
xor
(bad)
adc
sub
xchg
in
(bad)
lods
add
sahf
movs
aas
adc
or
aam
(bad)
mov
add
ja
inc
leave
xchg
outs
pop
and
push
sbb
(bad)
cmp
popf
mov
or
fcomp
lea
or
inc
scas
inc
stos
popf
push
mov
jns
imul
push
shld
sub
test
dec
xor
arpl
fs
jno
retf
mov
push
outs
or
rol
(bad)
cmp
sbb
out
cmp
sbb
(bad)
sub
fistp
or
(bad)
mov
mov
sbb
xacquire
retf
js
in
sbb
nop
jb
mov
lods
(bad)
and
push
push
jmp
pop
sbb
movs
mov
fadd
cmp
xchg
pop
gs
retf
dec
push
ja
mov
push
adc
outs
retf
daa
push
push
dec
test
fisttp
dec
add
outs
stos
pop
sbb
mov
repnz
gs
lods
sbb
and
cwde
sub
push
retf
std
(bad)
in
or
shl
add
sub
int
mov
test
dec
clc
dec
aaa
fdivrp
sahf
psubd
lock
sbb
hlt
std
adc
push
add
(bad)
in
push
push
fisubr
(bad)
or
dec
(bad)
adc
jl
and
and
pop
outs
outs
xchg
in
inc
cmp
push
cmps
jb
inc
jns
test
jo
test
(bad)
cmp
cmp
and
lock
sbb
jecxz
pusha
arpl
outs
test
cli
dec
push
shl
pop
add
mov
push
gs
loopne
(bad)
cld
jo
push
cli
loope
push
pop
fyl2x
dec
ret
dec
retf
mov
dec
jns
cmp
std
les
adc
or
xor
dec
retf
out
cmp
add
mov
inc
cmps
cmp
sub
inc
dec
movs
pop
inc
xor
aas
or
ret
and
pop
mov
stos
xor
in
es
lsl
mov
mov
xchg
or
jno
out
cmp
arpl
xor
sar
mov
stc
loopne
add
not
jmp
les
(bad)
adc
bound
repz
stos
cli
fadd
inc
and
push
add
(bad)
and
jg
nop
cmp
dec
push
cli
repnz
stc
aaa
mov
push
or
out
scas
std
(bad)
cli
ds
imul
outs
ja
pop
das
(bad)
fs
in
dec
(bad)
jge
cli
cmc
jno
enter
in
push
int
(bad)
aam
push
xor
jle
dec
jnp
sbb
fistp
xchg
mov
xchg
ds
retf
ss
jecxz
nop
dec
xchg
xchg
jmp
js
and
rcr
xor
mov
cdq
(bad)
daa
pop
cld
std
pop
pop
sar
leave
pmuludq
jmp
sub
xchg
push
pop
dec
out
dec
cmovnp
sbb
idiv
lock
xchg
inc
sub
(bad)
jge
mov
sti
(bad)
call
data16
cmps
(bad)
cmc
and
sbb
out
(bad)
jle
sub
mov
push
ja
cmp
stos
cmp
pop
idiv
adc
ins
sbb
pop
sbb
pop
ja
(bad)
and
daa
lods
push
sub
pop
xchg
and
mov
pop
pusha
dec
inc
jmp
add
xor
inc
mov
leave
dec
lods
adc
(bad)
mov
stc
pop
in
mov
add
xor
push
fidivr
mov
outs
xlat
pop
(bad)
ror
push
xchg
inc
mov
sub
add
mov
pop
movmskps
(bad)
pop
imul
mov
pop
push
das
xor
movs
fcomp
add
xor
sahf
add
fisttp
xor
(bad)
jmp
inc
lods
xor
ins
fcomp
xor
and
leave
(bad)
inc
mov
push
mov
push
dec
xchg
push
cmp
ins
push
out
das
sar
out
mov
or
adc
sub
cmp
jb
outs
popf
push
(bad)
outs
or
ins
jbe
fwait
xchg
scas
xchg
mov
daa
(bad)
mov
test
dec
stc
or
xor
sbb
(bad)
cmp
(bad)
lods
or
movs
xchg
pop
push
xchg
push
and
(bad)
sbb
into
fstcw
daa
ret
imul
push
les
nop
aam
jbe
(bad)
add
stc
pop
test
xcrypt-ctr
cmps
ficomp
mov
movzx
repnz
sahf
jl
jecxz
lods
mov
mov
sub
sbb
(bad)
and
add
adc
and
movs
inc
loopne
xor
data16
inc
or
fsubr
fdivr
mov
dec
sub
cld
popf
loop
jbe
sbb
outs
inc
inc
std
adc
jae
mov
xlat
add
adc
imul
or
dec
mov
jecxz
daa
jp
(bad)
fmul
(bad)
adc
mov
in
xor
xlat
cmc
(bad)
cwde
retf
lahf
adc
sub
sub
bound
or
xchg
xor
pop
inc
fisttp
jne
inc
add
int3
cmp
sub
sbb
stos
jmp
cmp
mov
lods
push
mov
xor
dec
jbe
call
pop
cld
(bad)
sbb
inc
scas
sub
or
jns
or
sub
inc
dec
(bad)
adc
test
mov
cmp
fcomp
fwait
adc
pop
push
xor
out
pop
cmp
xor
dec
adc
push
push
sbb
mov
mov
sub
(bad)
(bad)
sti
fsub
std
inc
test
aad
mov
inc
(bad)
setb
jmp
pop
data16
lods
(bad)
pusha
jnp
jecxz
(bad)
sub
add
jo
ret
fistp
mov
das
fisub
(bad)
pop
nop
fidiv
ss
jp
sub
leave
push
jae
sub
dec
(bad)
lods
add
xor
(bad)
sub
sub
xor
shl
(bad)
dec
jp
lock
icebp
mov
stos
xor
xchg
xor
mov
xchg
pusha
sub
hlt
mov
out
mov
xor
ffree
pop
lea
xor
xchg
aam
cmps
std
jg
push
jle
(bad)
sub
loope
icebp
loop
adc
xchg
cmp
inc
push
and
ret
jecxz
and
sub
icebp
jnp
rol
jbe
mov
push
mov
or
enter
mov
cld
aas
jnp
mov
aad
(bad)
ret
aaa
xchg
pop
gs
and
xor
mov
pop
retf
or
inc
sub
stc
shl
mov
and
leave
adc
pop
pop
ret
add
cdq
mov
inc
xchg
mov
cmp
(bad)
in
idiv
mov
jno
nop
sub
fisubr
cld
push
mov
dec
jnp
mov
in
leave
adc
in
ins
xor
and
(bad)
cmc
mov
mov
cmp
mov
cli
dec
jno
(bad)
int
push
jp
lods
pop
ret
jbe
sar
retf
or
xor
out
xor
xor
and
jnp
mov
sub
gs
dec
ret
dec
hlt
mov
pop
clc
test
cli
sti
pop
in
call
jmp
cld
clc
xchg
xchg
cmp
js
sbb
mov
cli
(bad)
sub
mov
pop
jge
test
fidivr
ror
xor
jns
mov
xchg
popf
xchg
(bad)
loopne
test
daa
mov
and
stos
cmp
or
psllw
lock
clc
jp
inc
jne
mov
jnp
enter
jnp
je
sbb
xchg
cmp
cmp
adc
das
mov
clc
(bad)
adc
xor
aaa
daa
add
and
ret
and
mov
or
std
xor
sar
dec
call
add
test
push
ret
add
push
mov
popa
(bad)
push
xor
sar
xor
mov
pop
mov
mov
cmps
fisttp
add
ret
xor
(bad)
pop
mov
ficom
xchg
(bad)
push
out
repz
xchg
xchg
mov
dec
call
or
in
pop
stos
push
fs
imul
loop
add
push
mov
pop
jge
push
js
mov
xchg
pop
add
cli
and
mov
push
mov
test
rcl
cmp
fdivr
mov
lods
dec
mov
or
adc
pusha
mov
inc
or
stos
mov
pop
mov
xor
out
mov
(bad)
and
adc
add
lods
(bad)
xor
jl
lea
in
adc
mov
jle
jge
push
inc
(bad)
outs
xchg
jg
and
jb
add
or
outs
movs
inc
js
cmp
mov
sub
cmps
clc
cwde
or
dec
in
or
fidivr
pushf
nop
mov
add
cmp
call
xchg
mov
mov
cmps
inc
inc
inc
int3
dec
xchg
xchg
(bad)
scas
mov
dec
ret
aam
and
cmp
pop
imul
xchg
test
pusha
dec
inc
stc
lods
imul
cmovne
fadd
loopne
(bad)
add
xor
push
xchg
inc
(bad)
(bad)
mov
cmp
xchg
mov
in
(bad)
sbb
inc
addr16
cmc
xor
mov
(bad)
and
push
push
push
add
and
lods
je
frstor
dec
in
cdq
push
sub
cmp
sub
test
daa
push
aad
call
sub
popf
(bad)
mov
call
mov
and
mov
in
jnp
add
cmp
cli
in
xor
mov
dec
mov
std
inc
inc
xlat
sbb
aad
shl
and
xchg
hlt
pop
fwait
sbb
jb
cmp
icebp
adc
cmps
jns
lods
(bad)
xor
out
xor
fisubr
enter
fistp
fld
stc
das
push
sbb
mov
(bad)
ins
xchg
std
adc
scas
mov
xchg
or
in
call
jnp
sbb
mov
jns
lods
mov
shl
jmp
in
jno
push
es
das
or
add
sar
jns
add
imul
sbb
test
cld
repnz
call
or
and
std
icebp
cmp
inc
fidivr
and
retf
(bad)
(bad)
mov
sub
sti
(bad)
jmp
lds
sbb
fistp
xchg
arpl
add
fidivr
inc
lahf
and
data16
call
mov
mov
xchg
mov
repnz
pop
cmp
test
mov
lods
cld
popf
enter
fdivr
dec
fwait
xor
sbb
fiadd
repz
fcomp
aam
dec
addr16
lahf
cdq
out
outs
cli
ins
and
mov
mov
push
sub
lea
jne
push
xor
out
adc
das
fcomip
outs
cwde
xor
mov
jns
(bad)
jmp
inc
xor
(bad)
jne
mov
out
loop
sbb
mov
pop
out
sub
ret
xchg
inc
es
mov
enter
jae
pop
adc
jmp
jmp
mov
dec
jne
cs
(bad)
ss
fcom
jmp
mov
push
cmp
dec
cmc
add
sub
dec
inc
adc
jmp
arpl
xor
cdq
dec
mov
leave
mul
fdiv
(bad)
int
sahf
or
lds
(bad)
sub
xor
data16
or
and
pop
xchg
jne
loop
(bad)
sbb
mov
xchg
clc
inc
push
jmp
inc
pop
sub
das
sub
fwait
xor
ja
jmp
mov
dec
jp
gs
out
sbb
jmp
fstp
(bad)
jp
push
and
jmp
mov
xor
pop
pop
add
add
mov
cmp
in
xchg
inc
retf
in
sbb
imul
cmp
push
cld
call
cmps
inc
jecxz
pop
imul
cld
push
(bad)
and
push
retf
dec
inc
mov
cmp
xor
mov
frstpm(287
cmp
lods
jns
data16
scas
cld
jne
mov
dec
rcr
int3
and
mov
int3
adc
ret
popa
pop
sub
push
stc
push
dec
fild
pop
cmp
movsx
test
inc
xor
adc
push
sub
jge
in
into
aad
lods
inc
or
cld
(bad)
xor
add
mov
frstor
rol
std
ret
(bad)
dec
dec
and
(bad)
push
outs
pop
push
xor
(bad)
pop
sbb
ror
stc
(bad)
jns
les
movs
es
jecxz
xor
dec
scas
aas
or
dec
cmps
or
jno
mov
fldl2e
cld
sub
adc
dec
(bad)
jmp
add
inc
hlt
push
jae
pop
push
stc
repz
jno
and
adc
sbb
fidivr
xor
into
sbb
(bad)
push
aas
clc
push
ja
and
bswap
xchg
mov
pop
adc
mov
xchg
shl
mov
imul
cs
jbe
xor
out
sbb
and
mov
dec
clc
call
mov
in
out
xor
dec
out
and
dec
or
jne
daa
dec
(bad)
fld
jbe
je
in
add
jp
iret
push
in
cli
pushf
inc
xchg
jne
(bad)
dec
add
adc
gs
dec
dec
lds
push
xor
retf
xor
add
dec
inc
(bad)
sub
push
push
aad
push
cmp
fld
inc
aas
add
cli
and
int
or
cli
cli
jge
inc
inc
(bad)
cmp
pop
pop
(bad)
aas
adc
ficom
adc
pop
sbb
fadd
cmp
adc
out
inc
mov
ja
sbb
ss
ja
mov
das
pop
adc
adc
mov
(bad)
fs
cmp
stos
dec
push
cmp
clc
loop
add
call
(bad)
lods
mov
and
and
pop
in
inc
push
fnstsw
fmul
inc
gs
int3
ret
mov
pop
inc
sbb
out
inc
dec
inc
xchg
or
inc
pop
add
inc
lods
push
ja
jecxz
ins
adc
dec
dec
inc
fsubp
lds
sti
lahf
push
inc
adc
dec
push
jnp
jl
enter
aas
jne
(bad)
imul
pop
(bad)
hlt
ret
mov
fimul
push
nop
push
add
add
fwait
mov
xlat
pop
call
add
cwde
sar
and
mov
mov
xor
jp
bound
mov
pop
fadd
sbb
test
imul
in
inc
fsubr
xor
lock
ficomp
sbb
pop
mov
push
ds
pop
xor
loope
push
scas
loop
sub
pop
pop
out
dec
mov
jl
mov
leave
or
inc
jnp
and
frstor
fcom
mov
mov
cmps
out
lods
mov
adc
fisttp
cld
sbb
fdivrp
scas
stos
in
inc
mov
mov
pop
pop
add
lahf
xchg
sub
cmps
(bad)
in
xchg
fwait
jne
loopne
(bad)
fsubp
imul
xchg
mov
dec
jmp
push
jle
(bad)
das
dec
cmp
pop
out
cmp
dec
fdivr
(bad)
mov
(bad)
jnp
out
(bad)
ret
cmc
mov
mov
fwait
retf
loope
call
fsub
gs
fsubrp
ins
idiv
rcr
adc
mov
outs
inc
imul
mov
dec
jnp
fsqrt
fnstsw
and
(bad)
ins
fmul
pop
jl
jecxz
pop
mov
lahf
aaa
in
popf
mov
mov
fwait
xchg
push
push
imul
xlat
mov
mov
sub
add
mov
addr16
cmp
scas
(bad)
cmp
(bad)
and
pusha
add
dec
mov
rcl
scas
and
sub
scas
ins
mov
jg
jp
lods
mov
enter
xlat
mov
imul
test
push
add
aaa
daa
mov
ss
call
out
pop
(bad)
push
fistp
in
loopne
jns
add
xchg
pop
das
jmp
cs
pop
inc
iret
jmp
scas
cli
cmp
movs
in
fdiv
mov
jge
dec
adc
hlt
jp
pusha
out
add
test
lahf
(bad)
cdq
mov
(bad)
(bad)
xchg
xchg
jns
sar
xor
nop
dec
sbb
push
lods
leave
xchg
jae
out
cld
mov
in
mov
lock
sbb
aas
outs
adc
mov
cmp
pop
mov
(bad)
(bad)
jmp
jb
test
call
push
daa
iret
in
shl
dec
rcr
sbb
aad
jns
dec
xor
inc
sbb
stos
ds
arpl
inc
push
sti
mov
dec
stc
scas
aad
setle
mov
mov
inc
cwde
fcomp
gs
mov
lods
mov
sub
sbb
loope
mov
sar
ds
(bad)
(bad)
mov
sub
sbb
mov
xchg
movaps
jecxz
pop
loop
and
mov
(bad)
gs
adc
dec
sbb
inc
stos
clc
bound
cli
inc
dec
add
jp
loope
jmp
loopne
inc
cld
fild
pushf
or
xchg
xchg
jno
(bad)
dec
xchg
pop
jle
scas
jle
(bad)
adc
mov
test
(bad)
jp
(bad)
inc
(bad)
ja
dec
call
mov
fsubr
mov
retf
fst
mov
sub
xor
test
stc
(bad)
jmp
xchg
lods
mov
mov
add
mov
pop
(bad)
and
arpl
fist
fisub
cmc
movs
in
xchg
(bad)
pusha
cmp
cld
cwde
int
dec
outs
xchg
mov
idiv
push
dec
in
test
cmp
mov
dec
inc
dec
inc
adc
pushf
call
lds
jp
loop
mov
inc
cld
(bad)
ds
in
inc
loopne
and
push
dec
sub
adc
mov
lods
mov
(bad)
and
sbb
jge
cli
pushf
jne
mov
cmps
xchg
add
enter
adc
rcl
cdq
test
(bad)
jge
(bad)
in
fisttp
fsubr
(bad)
fidiv
xchg
ds
pop
xchg
fwait
sub
mov
stc
dec
das
xor
or
push
(bad)
xchg
jmp
jmp
fs
(bad)
loopne
add
jecxz
xchg
fiadd
jb
das
stos
push
scas
out
loop
mov
outs
sbb
xor
add
jle
xlat
retf
out
adc
(bad)
cmps
dec
fist
sbb
xchg
js
or
xor
jg
cmp
jnp
dec
arpl
cmp
cdq
mov
aaa
inc
mov
cmp
arpl
retf
dec
mov
cli
retf
add
pop
cmp
and
inc
shl
les
idiv
sbb
popf
cli
mov
mov
sbb
repnz
cmp
int3
(bad)
ja
push
cmp
or
add
add
pop
mov
daa
xchg
ins
les
test
fnstcw
inc
test
add
out
mov
or
inc
sbb
mov
cli
inc
push
in
pop
xor
sti
js
stc
out
inc
adc
retf
adc
push
adc
mov
mul
out
inc
jne
and
sbb
ins
(bad)
push
sub
popa
push
mov
mov
adc
shr
das
adc
mov
cs
aad
test
pusha
mov
jmp
jle
dec
jno
int3
fdivr
jp
mov
movs
cmp
adc
ins
add
repz
or
mov
in
dec
jno
cld
jnp
add
pop
loope
adc
data16
call
pop
jp
cmp
cli
call
inc
ds
jp
xor
mov
mov
xor
(bad)
xor
js
sbb
xchg
retf
cmp
add
out
cs
jno
movaps
(bad)
shr
sub
dec
add
sbb
das
pop
ret
ja
pop
es
data16
add
(bad)
retf
not
jl
std
ror
jb
outs
adc
(bad)
neg
jp
mov
or
es
or
(bad)
stc
add
call
les
sbb
out
push
cmp
xlat
inc
rcr
pop
call
loopne
push
inc
daa
in
xor
imul
inc
por
jecxz
idiv
dec
and
hlt
xchg
lahf
inc
or
mov
repnz
jmp
outs
jp
(bad)
mov
fnstcw
mov
fist
mov
push
test
clc
(bad)
jle
inc
lea
sub
mov
or
add
mov
cli
or
or
add
adc
adc
inc
inc
xchg
enter
mov
nop
dec
retf
aad
mov
mov
add
mov
das
pop
in
daa
mov
out
rol
sub
dec
xor
mov
outs
sub
mov
sbb
lock
xor
int
adc
and
pop
leave
sbb
dec
jbe
xchg
aaa
mov
sbb
ret
xchg
(bad)
stos
jmp
imul
sti
fstp
mov
pop
and
jo
and
addr16
(bad)
jg
cli
or
xor
sti
inc
jmp
lock
inc
sub
xchg
add
push
mul
sbb
js
aaa
jmp
aas
lock
pop
pop
sub
cli
mov
cdq
daa
movs
mov
add
inc
cli
jmp
add
sub
mov
fsub
jne
sub
push
add
xor
adc
pop
out
xor
mov
jns
cmp
pop
add
jecxz
jnp
pop
cmp
jle
add
shl
add
sbb
jp
adc
iret
or
daa
movq
movs
add
les
lahf
xor
pop
cmps
aas
push
arpl
xor
js
enter
in
aaa
mov
jecxz
inc
addr16
inc
sbb
popa
inc
loop
add
div
or
inc
(bad)
in
adc
adc
sbb
add
dec
pop
sti
inc
dec
or
pop
adc
(bad)
ds
xchg
push
dec
cmp
sti
sub
adc
out
inc
inc
aas
cli
add
add
jp
or
fistp
dec
sbb
cmp
imul
ja
push
dec
pop
inc
push
pop
cmps
jmp
push
inc
sbb
dec
wbinvd
dec
fist
fsin
dec
ds
sbb
inc
cmp
cmp
aad
retf
dec
out
(bad)
and
push
pusha
outs
push
sbb
clc
and
xor
fwait
outs
aaa
xchg
jne
push
adc
add
inc
pop
jnp
rol
das
adc
add
cs
mov
push
mov
add
sbb
(bad)
cs
(bad)
push
ret
push
jmp
adc
push
add
cmps
imul
inc
dec
dec
fwait
cli
push
mov
inc
jnp
and
mov
cli
out
adc
fwait
push
or
gs
mov
stos
push
dec
fistp
cmps
ror
daa
and
aas
(bad)
nop
retf
mul
inc
sbb
sub
cmp
and
jle
data16
mov
sbb
push
cs
pop
cmps
shl
jne
pop
cmp
jno
mov
jg
clc
inc
xchg
repz
mov
pxor
push
repz
xadd
push
ja
(bad)
push
hlt
and
xor
push
fidivr
push
test
pop
(bad)
(bad)
push
xchg
sub
mov
scas
ja
(bad)
mov
pop
xor
jle
dec
xor
mov
add
dec
cmp
(bad)
ja
in
ror
les
mov
sub
mov
leave
dec
retf
imul
das
add
xor
aas
xchg
cdq
dec
add
mov
push
cmc
inc
sbb
test
(bad)
xor
repz
addr16
out
inc
(bad)
jp
xor
arpl
loope
rsqrtps
sahf
or
fimul
mov
fstp
in
push
call
mov
mov
sbb
adc
lds
pop
inc
mov
jne
xchg
das
enter
jecxz
pop
mov
sub
jae
(bad)
sahf
loope
(bad)
jbe
xchg
nop
in
arpl
fucomi
stos
(bad)
call
xor
retf
out
adc
adc
add
cli
pop
lods
add
in
add
adc
jae
add
cli
call
dec
or
mov
enter
inc
inc
xor
pop
adc
scas
popa
add
cld
mov
adc
sbb
jl
(bad)
(bad)
aad
fisttp
outs
sub
or
sub
xor
test
lods
mov
jge
cli
shl
cmp
call
jno
and
rcr
xchg
jl
xor
mov
popa
sbb
cmps
mov
xchg
loopne
fcmovnb
pop
push
xchg
lea
dec
test
xchg
xchg
sub
cmp
jbe
in
fnstcw
iret
fisttp
mov
(bad)
mov
mov
stos
(bad)
jge
dec
in
loope
ror
pop
add
cmp
sbb
pop
sbb
lds
lahf
(bad)
(bad)
ins
rcr
(bad)
ret
mov
dec
nop
adc
jbe
(bad)
sub
aas
rcr
js
mov
jb
pop
dec
pop
xor
pop
xchg
in
movs
outs
repz
stos
fadd
inc
pop
bnd
jmp
ficom
inc
das
scas
mov
es
hlt
xchg
push
cmps
int
sub
mov
imul
or
aas
inc
sti
jp
in
sbb
or
cmp
out
sub
in
xor
fbld
ja
sub
or
loope
cmp
xor
not
(bad)
xchg
push
inc
shl
jnp
sub
jne
data16
fiadd
lahf
mov
jnp
cmc
pop
out
daa
dec
push
daa
sub
lods
push
jmp
sbb
ret
pop
xchg
inc
inc
(bad)
push
(bad)
mov
(bad)
sub
call
mov
push
xor
push
jns
popf
(bad)
dec
sbb
aam
jnp
adc
aaa
fist
cmp
cmp
bound
jne
fsubr
sbb
jecxz
outs
inc
(bad)
jbe
mov
mov
arpl
fnsave
fidivr
or
enter
push
pop
inc
inc
pop
in
push
dec
push
(bad)
mov
xlat
ret
mov
scas
(bad)
fsubp
ret
mov
fcom
aaa
add
loope
xor
cli
push
sar
or
sbb
rcl
adc
stc
push
(bad)
jb
test
mov
into
jmp
xor
sub
test
xor
data16
sbb
dec
(bad)
jns
and
loopne
hlt
cmp
push
(bad)
test
leave
in
rol
pop
(bad)
cli
out
cdq
mov
stc
dec
fst
sbb
daa
out
dec
jl
sub
rcr
xchg
jnp
adc
pop
loopne
daa
lds
cli
fcomp
mov
pop
sar
jnp
pop
ins
bound
in
std
out
cdq
jp
outs
mov
into
jnp
cmc
stc
mov
push
ficomp
fdivr
mov
aad
(bad)
push
pop
fs
inc
inc
lds
into
pop
push
jmp
gs
fmulp
push
inc
neg
sub
(bad)
aad
or
fs
dec
pop
idiv
mov
xchg
mov
repz
(bad)
and
loope
mov
mov
sub
(bad)
call
pop
(bad)
sbb
cld
shl
and
pusha
jnp
cs
(bad)
scas
or
inc
popf
rol
add
retf
ficomp
pop
jae
cmp
and
imul
(bad)
outs
jge
mov
(bad)
mov
xor
cmp
(bad)
hlt
cmp
pop
dec
add
sbb
aaa
jmp
aad
or
add
pop
fisttp
jnp
sbb
popf
call
cmp
inc
push
xor
(bad)
jno
rcr
icebp
jnp
fdivrp
pop
push
test
sar
(bad)
xchg
push
fisttp
arpl
sub
sub
imul
(bad)
enter
cmps
jmp
dec
gs
pop
fnstsw
stos
(bad)
jecxz
sbb
or
cmc
jo
push
or
add
jl
mov
mov
fwait
jl
(bad)
sub
rol
outs
sbb
jmp
mov
fld
aaa
rcr
add
nop
add
dec
inc
cld
sub
xor
push
xor
aaa
mov
and
or
mov
pop
shl
sub
mov
je
(bad)
jb
or
mov
xchg
fdiv
pusha
jp
jmp
mov
pop
cli
mov
jmp
into
mov
(bad)
sbb
push
(bad)
clc
fdivr
pop
inc
sbb
(bad)
push
cmp
out
ds
sbb
push
xchg
in
iret
mov
aam
idiv
adc
call
std
pop
add
mov
xchg
inc
cli
adc
jbe
mov
cmp
inc
or
push
movs
mov
jl
js
push
pop
mov
stos
outs
jnp
push
push
imul
xor
test
sti
test
out
(bad)
in
xor
int
dec
shl
sub
or
mov
or
(bad)
cmp
sar
push
push
cmp
jle
inc
(bad)
mov
movups
pop
(bad)
cmps
mov
popa
retf
push
pop
sbb
pop
cs
pop
mov
fld
fsubr
arpl
xlat
xor
inc
loope
ftst
ds
jl
and
jmp
jecxz
fisubr
repnz
jmp
jo
retf
fwait
outs
xchg
sub
das
es
mov
test
adc
mov
jecxz
scas
add
out
mov
ret
(bad)
sub
fdivp
ins
(bad)
retf
jo
cdq
das
or
push
and
sub
pop
inc
adc
xchg
and
push
fidivr
fdivr
adc
pop
add
mov
xor
outs
(bad)
(bad)
fwait
popf
(bad)
pop
jnp
push
jecxz
adc
lods
push
(bad)
clc
mov
repnz
out
adc
ret
aas
in
and
sub
inc
push
pushf
data16
push
push
(bad)
rcl
xchg
jns
or
dec
pop
add
or
sub
xor
cli
ret
iret
movs
cli
sahf
xchg
jg
push
(bad)
bound
cmp
(bad)
ja
shl
in
shr
out
sub
fisub
cli
push
unpcklps
stc
fiadd
popa
inc
cli
fcmovnbe
idiv
out
ret
mov
enter
sbb
cmp
mov
mov
cwde
add
ret
das
mov
and
cmp
jo
xchg
xor
fucom
fcomp
daa
dec
jle
fwait
mov
and
fild
(bad)
arpl
jnp
(bad)
sbb
adc
sub
inc
shl
xchg
(bad)
out
or
jne
cmp
jns
pop
inc
cmp
pop
movs
js
in
dec
pop
pop
jmp
cli
stos
scas
test
call
sti
pop
jl
movs
sbb
(bad)
arpl
shr
ror
retf
pop
jp
in
push
xor
fisttp
leave
fimul
and
popa
daa
ss
fidiv
fbld
das
pop
xchg
fidiv
ret
jge
in
in
add
inc
or
aaa
adc
xchg
cli
jae
shl
pushf
js
into
jbe
or
mov
clc
sub
repnz
push
jle
clc
mov
mov
(bad)
lods
add
arpl
xor
sti
pop
mov
(bad)
stos
cmp
mov
jl
add
push
xchg
pop
inc
and
mov
fnsave
xor
dec
pop
push
and
mov
ds
jmp
mov
pop
pop
jl
cs
icebp
(bad)
pop
jg
cli
in
inc
repz
retf
pop
daa
jl
inc
test
jb
(bad)
dec
(bad)
in
add
and
(bad)
mov
mov
jae
es
pop
movs
dec
inc
in
add
sub
dec
cmp
mov
and
mov
sbb
sub
dec
rcl
mov
mov
cmp
pop
inc
adc
add
sub
adc
jl
push
ss
sub
cld
mov
scas
jbe
dec
jp
out
shl
sub
mov
bswap
stc
push
bound
std
push
mov
iret
sbb
in
das
push
fcmovne
xchg
ds
mov
dec
je
(bad)
push
outs
movs
push
push
or
mov
(bad)
xchg
push
ins
adc
sub
dec
jnp
nop
xchg
pop
test
test
inc
retf
dec
hlt
lock
in
xchg
out
pop
mov
and
dec
cmp
out
jbe
cli
xchg
(bad)
js
js
call
pop
addr16
xchg
cmps
sbb
(bad)
push
add
mov
(bad)
clc
xor
cdq
(bad)
cmc
nop
icebp
jo
out
adc
push
outs
cmp
es
mov
enter
or
mov
cld
mov
outs
test
sub
pop
aas
or
adc
xor
and
cld
mov
daa
dec
mov
pop
movs
es
stc
mov
dec
sub
fldenv
jnp
mov
sbb
adc
jb
sub
div
xchg
push
pop
sahf
cmp
cmp
test
add
clc
add
inc
mov
cli
inc
fadd
pop
pusha
adc
(bad)
sar
rol
mov
xchg
sbb
push
daa
jno
aaa
out
mov
mov
adc
pusha
or
jge
mov
jg
out
inc
test
or
ja
xor
scas
cmp
stc
xchg
loop
jmp
push
out
pop
test
iret
movs
mov
daa
xchg
adc
xor
pop
mov
jg
je
mov
in
aaa
ds
fisub
jnp
sub
cmp
dec
xor
in
dec
shr
(bad)
add
sub
jns
fist
sub
(bad)
stos
jp
retf
ins
fdivr
call
mov
(bad)
dec
jo
add
sbb
mov
lea
mov
ins
lahf
ins
pop
shl
cmp
add
mov
pop
popa
cld
je
pop
out
cmps
add
xchg
(bad)
nop
jno
jne
popf
mov
(bad)
adc
and
sub
jp
imul
addr16
jae
cmps
aaa
dec
mov
pop
(bad)
sub
inc
inc
adc
pushf
add
repnz
jno
(bad)
gs
sti
xchg
ins
outs
fsubr
ja
push
popa
mov
jle
mov
int3
cli
mov
lods
push
pop
neg
sub
and
xchg
mov
inc
pushf
sub
mov
movs
rcr
jg
xor
or
xor
ss
xchg
fmul
paddb
nop
pop
data16
cmp
ficomp
aam
sbb
mov
sub
movs
cmps
or
(bad)
fmul
cld
xor
inc
lods
aaa
ins
cmp
and
retf
retf
aas
retf
ds
adc
jmp
sub
cmp
mov
jno
jmp
add
lock
test
in
sub
das
enter
jo
xchg
mov
xor
aad
cdq
xor
jno
xor
mov
fdivr
std
pop
sub
xchg
imul
mov
test
shr
cmp
mov
leave
push
lds
mov
nop
cmp
mov
aas
mov
sbb
ret
and
js
nop
not
lea
mov
fimul
adc
xor
sub
push
or
ret
sub
cmp
mov
rcl
hlt
mov
js
cmp
mov
or
daa
pop
(bad)
mov
sbb
dec
pop
or
jnp
or
pop
jg
xchg
xchg
gs
jbe
add
and
in
mov
cmp
dec
cld
sar
aaa
push
cmp
mov
sub
sub
leave
pop
jns
mov
fiadd
jmp
inc
mov
ficomp
(bad)
fld
jl
scas
dec
sub
inc
repnz
mov
mov
xchg
ds
in
mov
movs
and
pop
xchg
js
rcl
int
and
mov
pop
ja
stos
lock
stos
or
fmul
ror
mov
cdq
fmul
out
pop
cmp
leave
pop
loopne
pop
mov
add
sbb
gs
xor
retf
call
jae
jg
cli
push
cmp
sub
fcomp
sbb
clc
ss
daa
pop
xchg
cmp
mov
shl
pop
jmp
add
fdiv
rol
out
adc
jmp
shl
xor
dec
jbe
mov
dec
jae
clc
inc
stos
cld
adc
mov
cmp
iret
jbe
and
clc
adc
cmp
(bad)
pop
sub
sbb
cld
mov
cmp
comiss
in
test
sub
lock
jns
mov
sub
lods
cmps
hlt
ret
mov
out
(bad)
mov
stc
mov
cmp
mov
push
jbe
and
jp
cmp
push
mov
dec
pop
xchg
cli
pop
mov
stc
pop
mov
mov
ror
gs
es
(bad)
mov
sub
or
inc
icebp
push
retf
cmp
(bad)
cmp
cli
iret
in
idiv
xor
rcl
mov
daa
not
test
xchg
and
xchg
icebp
movs
jns
mov
and
xchg
ss
into
fist
js
cmp
xor
iret
mov
je
adc
cmp
cmp
rcr
hlt
ins
sahf
push
test
xchg
std
sub
cmps
mov
mov
mov
and
cmp
add
cmp
jmp
sbb
push
in
mov
fadd
repnz
add
jne
dec
fldenv
adc
idiv
xor
cmp
xor
fidiv
(bad)
cld
mov
cmp
adc
add
fsubr
ja
xchg
in
mov
xor
call
fcomi
push
xchg
mov
retf
sub
out
adc
sub
sub
inc
jmp
jg
stos
jbe
and
clc
fcmove
or
cli
jns
cmp
scas
mov
mov
mov
leave
sbb
mov
int3
mov
jo
xor
xchg
jge
xlat
xchg
jecxz
into
cmp
push
add
inc
pop
nop
loopne
xor
fcmove
stos
ror
(bad)
out
push
loopne
ret
imul
out
(bad)
leave
stos
lea
sar
fld
fild
xor
pop
push
pop
cmp
jl
test
pop
and
sub
add
stc
mov
mov
mov
pop
add
xor
jl
xor
gs
jle
cmp
icebp
daa
stos
sbb
cld
js
push
bsf
jge
cmp
or
in
js
inc
xor
or
push
inc
add
and
jle
pop
cmp
addr16
jnp
jl
sub
mov
dec
dec
sub
ja
imul
push
aas
int3
repnz
dec
push
ins
clc
js
js
movs
es
outs
ds
repnz
ins
in
push
shr
mov
inc
jns
hlt
inc
mov
lds
and
cmp
cld
pop
retf
fnsave
push
shr
cmp
sbb
xor
ret
cs
(bad)
or
sar
mov
adc
aas
daa
scas
mov
icebp
mov
cli
mov
sbb
lods
mov
cld
sub
pop
xor
sti
add
mov
retf
cmp
pop
inc
mov
sti
aaa
aaa
mov
je
shl
sub
add
push
cmps
(bad)
lock
ins
ja
mov
test
mov
(bad)
mov
push
sbb
popa
mov
(bad)
xor
sub
sub
add
mov
stos
inc
rcr
cmp
fst
or
pop
push
cmp
xor
gs
dec
cmp
(bad)
pop
inc
or
ret
xchg
enter
in
jb
cmps
hlt
jae
mov
jl
shr
push
dec
call
clc
or
pop
jnp
je
test
inc
or
mov
mov
push
pop
mul
stc
into
dec
test
dec
into
int
lds
repnz
ja
pop
cmp
call
data16
out
mov
push
jecxz
(bad)
jmp
(bad)
fnstsw
repnz
arpl
inc
inc
sbb
rcl
jecxz
mov
push
xor
cmp
adc
dec
rcr
cmp
push
je
mov
int3
sbb
lea
pop
sub
rcr
ss
mov
sub
push
add
inc
mov
loop
leave
mov
sub
inc
sahf
and
add
jns
lock
ret
xchg
cmp
cli
mov
fucomi
inc
enter
icebp
mov
push
repz
jge
test
dec
iret
inc
add
cmp
ret
in
or
clc
pop
xor
cmp
iret
je
pop
jne
sub
test
(bad)
(bad)
mov
xchg
inc
sbb
sbb
jbe
rcr
add
enter
dec
or
jmp
mov
scas
jbe
js
pop
xor
mov
xchg
lock
stos
cmp
mov
out
cmps
cli
mov
mov
test
cmp
adc
das
jno
loope
inc
mov
mov
ret
sub
add
jmp
mov
mov
jmp
xor
mov
jae
test
mov
daa
sub
mov
mov
loope
cld
mov
out
dec
das
sbb
(bad)
mov
pop
aad
cmps
out
inc
(bad)
pop
aad
mov
and
pop
retf
call
lods
stos
daa
mov
xchg
sbb
jb
clc
aas
in
sbb
pop
fist
sti
clc
stos
daa
icebp
stc
xor
sbb
inc
es
(bad)
xor
inc
mov
shl
shl
outs
sbb
mov
pusha
clc
loope
dec
daa
add
(bad)
in
xchg
ja
mov
push
and
add
clc
add
ins
faddp
xchg
sti
in
retf
stos
jmp
sbb
sub
xchg
fisub
aas
dec
aaa
jne
loopne
mov
or
lods
xor
pop
mov
xor
dec
sub
test
lea
(bad)
nop
fst
push
sub
sar
sbb
sbb
inc
shl
out
jmp
hlt
jns
fdivr
stc
add
cmp
nop
pop
mov
into
sbb
and
call
inc
pushf
xchg
retf
(bad)
cs
mov
xchg
xchg
xor
mov
es
dec
call
aaa
xchg
das
rcl
xor
inc
scas
mov
cmp
aas
cmp
cs
data16
push
iret
(bad)
jp
mov
sub
pop
pop
mov
shl
xor
xlat
adc
(bad)
push
aas
xor
jno
pop
sbb
jp
lock
imul
retf
dec
pop
sbb
int
cld
xor
arpl
out
outs
fadd
xor
fcmovb
std
cmp
dec
retf
retf
push
int3
sub
dec
xor
inc
stos
shl
(bad)
not
lods
sub
sbb
repnz
xor
xchg
and
sub
dec
out
les
movs
mov
stos
retf
in
push
int3
xchg
(bad)
dec
cmp
sub
xchg
pop
cmp
rcl
cmp
jnp
aaa
xchg
or
mov
sbb
lgs
dec
mov
inc
jbe
sets
addr16
mov
lea
pop
pop
mov
jg
retf
call
std
cld
or
cmp
scas
mov
mov
data16
add
aad
jae
sti
xchg
sbb
shl
or
add
imul
loope
inc
movzx
mov
out
in
mov
sub
jle
mov
lods
retf
data16
fstp
clc
pop
std
sbb
xchg
ret
xor
js
and
mov
and
popf
sub
cmps
out
stc
and
int3
sub
pusha
dec
mov
mov
add
les
adc
cld
sub
jge
neg
mov
pop
jbe
cs
stc
pop
and
hlt
xor
and
adc
mov
stos
retf
loopne
out
or
cmp
retf
ja
or
pop
adc
stc
ror
jmp
add
adc
and
sti
pop
pushf
jl
sub
call
dec
sub
xchg
cmp
repnz
mov
retf
adc
mov
adc
js
xor
(bad)
fist
ds
inc
cdq
jne
sar
add
cli
mov
dec
sub
leave
and
push
sbb
xchg
inc
aam
xor
add
jne
test
retf
aaa
cmp
in
cmp
fisttp
nop
lea
pop
cmp
or
xchg
cmp
sub
xchg
push
jns
cs
sub
and
outs
and
pop
push
fsub
dec
mov
fwait
(bad)
out
xor
adc
shl
sti
cmp
jp
rcr
xor
adc
inc
imul
sub
cmp
pushf
rcl
sub
aam
shr
xchg
jmp
retf
dec
mov
test
mov
xor
out
xor
or
and
push
push
mov
cmp
mov
leave
pop
push
push
out
and
jnp
sub
jge
ret
fist
jmp
(bad)
xor
inc
cmp
push
sub
enter
jmp
xchg
sbb
imul
mov
xchg
pop
cmp
cs
call
retf
loopne
in
cmp
gs
mov
xchg
mov
or
aas
(bad)
sub
aam
xor
mov
xchg
leave
mov
jmp
cmp
pop
inc
push
push
ds
ret
sub
fisub
push
cmp
sub
mov
lea
sbb
sbb
dec
loope
xchg
test
pop
jbe
jmp
adc
and
mov
sub
adc
jnp
arpl
inc
fimul
aaa
inc
mov
mov
add
in
fdiv
retw
ret
daa
inc
adc
or
cmps
mov
mov
movs
rcl
push
inc
add
not
push
or
jmp
cmps
idiv
pop
fsubr
icebp
push
xor
push
add
push
xchg
cli
cli
fistp
ud0
mov
ret
xor
pop
aam
xor
cmp
pop
adc
pop
mov
jle
cld
mov
out
jecxz
lea
adc
cld
xor
pop
popa
shr
inc
mov
ins
ror
(bad)
adc
sar
jb
cmp
mov
cmp
cli
aad
pop
jns
jg
jbe
fnstenv
jmp
ins
push
mov
xor
xchg
and
sbb
vpsrlq
xchg
sbb
fld
inc
stos
xor
(bad)
wrmsr
js
mov
rcr
push
daa
pop
xor
sub
clc
(bad)
cmp
pop
test
lahf
dec
push
push
mov
in
cli
rol
dec
sub
or
(bad)
xor
ret
stos
mov
jge
xchg
test
fisttp
(bad)
jb
ds
add
ret
sbb
mov
xchg
mov
cmc
imul
daa
pop
sub
pop
ss
fwait
aad
ss
cwde
fisttp
add
cmp
std
and
daa
adc
std
idiv
lds
(bad)
aas
mov
or
adc
out
je
cmp
in
ss
cmp
ss
scas
cmp
cmp
cmp
ret
sbb
jb
sar
sar
cmp
je
push
div
les
xor
cmp
mov
stc
lods
aaa
repnz
add
cli
call
sub
out
scas
xor
push
push
sbb
ss
out
pop
repnz
sub
pusha
cmc
int3
inc
das
adc
cs
clc
sub
push
and
mov
das
mov
cmps
ins
xor
fucomp
fstp
xor
cmp
xchg
or
test
adc
xor
and
sti
cmp
lods
mov
je
cs
cmp
jbe
aaa
or
sbb
cmp
mov
(bad)
jb
cmp
add
cmp
sub
div
add
dec
mov
cs
push
cmp
mov
or
in
sbb
or
repnz
in
and
les
aam
rcr
add
add
(bad)
loope
div
xor
xor
or
jo
clc
sahf
xor
add
sbb
stos
cs
hlt
cld
cmp
mov
adc
sbb
xor
sbb
or
sbb
sub
adc
adc
sbb
sub
add
cmp
test
jb
cs
xor
std
stos
sub
or
push
xor
sub
adc
jb
ins
in
and
cmp
xor
adc
das
xchg
sub
xor
dec
or
call
sbb
xor
pop
shr
repnz
cmp
ins
mov
repnz
pop
or
xor
cmc
or
xchg
and
call
mov
cmp
fsubr
dec
sub
cmps
push
mov
push
inc
mov
xor
das
pushf
pop
jecxz
pop
xor
xor
pop
cmp
clc
add
(bad)
and
stos
adc
je
rcr
mov
mov
xor
(bad)
sar
sbb
pop
sub
ret
sar
adc
(bad)
fimul
cmp
fdiv
push
mov
xchg
fs
sbb
shl
cmp
stos
xchg
add
adc
movs
stos
dec
shr
xor
xchg
mov
push
mov
mov
daa
aaa
adc
sub
jae
fcmovnu
loopne
repnz
imul
sub
cs
cmc
imul
psraw
loopne
in
repnz
cmp
pushf
(bad)
es
stos
ror
lods
loop
das
daa
add
mov
arpl
or
imul
leave
adc
mov
jle
retf
fadd
out
ror
imul
xor
idiv
pop
mov
(bad)
fucomi
pop
rol
cld
pop
int
push
inc
xchg
and
jbe
adc
repz
rcr
ror
jno
xchg
sub
pop
xchg
mov
or
out
ja
add
push
mov
mov
pop
xor
sbb
stc
adc
pop
shl
cdq
test
icebp
xchg
add
inc
push
pop
aaa
and
sub
mov
ins
sbb
dec
fdiv
mov
ror
xchg
popf
cmc
xchg
pop
pushf
mov
sbb
jnp
mov
add
test
jp
in
cmp
scas
data16
das
sub
pop
iret
and
stos
je
imul
fld
mov
xchg
sbb
rcl
xchg
push
adc
mov
add
movs
sub
cmp
mov
add
xor
pop
mov
adc
mov
mov
retf
mov
cmp
js
mov
ror
inc
mov
pusha
popa
js
gs
sub
or
mov
es
fdivrp
in
push
daa
push
jbe
sub
pop
xchg
inc
repnz
(bad)
mov
stc
xchg
les
mov
add
xor
fidiv
retf
dec
mov
aas
adc
sub
bound
stos
fdivr
push
cmp
mov
mov
fcomp
mov
(bad)
fistp
add
adc
test
gs
lea
or
push
lods
je
sub
and
hlt
pop
inc
pop
aam
bound
scas
sub
and
jno
push
loop
leave
test
mov
shr
cmp
adc
hlt
aam
fld
mov
rdpmc
add
ror
fwait
call
out
repz
cmp
jnp
mov
into
mov
add
jl
addr16
add
sti
js
cmps
sbb
and
movs
mov
and
std
mov
inc
add
xlat
hlt
cmp
pop
pop
jge
add
into
ret
es
inc
dec
rcl
hlt
stos
fist
jge
push
sahf
add
aam
mov
xor
ror
cmps
inc
xor
es
xor
loope
cmp
repz
test
mov
mov
stos
sub
adc
and
fs
mov
or
cmps
jle
jle
push
jmp
add
xchg
jbe
js
xor
sbb
arpl
stos
add
or
fcomp
hlt
fidiv
push
out
or
mov
shr
jne
inc
adc
dec
es
and
cmp
inc
jns
scas
or
dec
inc
fnstsw
push
mov
inc
cmp
xchg
or
cli
js
mov
out
xchg
outs
push
int
mov
jbe
ss
andnps
pause
sbb
jb
jns
cmps
sub
sbb
arpl
out
sub
jns
mov
ins
cmp
daa
mov
mov
sbb
rcr
pcmpgtw
mov
xor
rcr
jb
jno
(bad)
jnp
shl
mov
sti
retf
call
test
clc
enter
inc
dec
mov
adc
fs
mov
sub
pop
inc
cs
sbb
(bad)
stc
adc
dec
and
call
stos
repnz
jnp
dec
iret
loop
pop
xor
sub
inc
add
cld
jmp
sahf
cld
inc
and
popa
pop
cmp
test
jecxz
pop
xor
shl
cs
in
je
sub
sub
sbb
dec
cmp
pop
jp
loope
adc
and
mov
mov
pop
mov
lmsw
imul
mov
cmc
sub
pop
xchg
pop
fistp
shl
add
call
sub
add
adc
inc
mov
fdivr
sub
dec
fst
lds
(bad)
adc
lds
and
gs
xchg
mov
xchg
js
shl
push
or
add
(bad)
jbe
sbb
and
lds
sub
mov
push
jmp
push
jle
das
adc
jg
icebp
lods
xchg
lock
lock
fst
xchg
jmp
xor
arpl
stos
daa
mov
dec
or
data16
rcl
(bad)
cmp
(bad)
cld
cmps
xor
mov
cmp
sub
mov
fdivr
jmp
pop
test
sub
lock
jbe
(bad)
mul
shl
in
das
sbb
jns
sub
push
fcomp
and
fstp
xchg
in
push
stos
cmps
into
(bad)
mov
mov
add
cmp
fwait
and
call
fsub
test
pop
cmp
adc
in
sar
sub
shl
sar
xor
jb
icebp
arpl
daa
pop
sbb
es
movs
ror
mov
fidiv
inc
cli
rcr
cmps
and
push
sub
mov
cmp
sahf
inc
int3
dec
xor
or
mov
cmp
fadd
cmc
adc
lahf
mov
and
shl
jae
scas
and
pop
cmp
or
inc
das
fstp
sub
dec
(bad)
sahf
xchg
loop
loop
inc
xor
dec
cmps
fsub
xchg
outs
rol
test
xchg
pushf
(bad)
fdiv
icebp
mov
sub
dec
pop
xor
jb
push
daa
mov
xor
add
dec
fidivr
add
int
cmp
sub
or
xor
test
cmp
or
dec
sub
test
popa
pop
adc
adc
gs
repnz
xlat
push
lock
ss
adc
pop
jecxz
add
sbb
out
sbb
fadd
inc
jnp
sbb
clc
add
icebp
aas
ss
mov
adc
test
ds
push
rcr
out
cmp
out
sub
dec
pmulhw
jnp
movs
or
jae
xchg
shl
icebp
pop
out
jmp
mov
das
mov
xor
mul
mov
cs
push
or
inc
mov
cld
mov
mov
jbe
mov
adc
arpl
(bad)
and
add
jb
cmps
xchg
xchg
cs
xchg
dec
jbe
mov
psubw
pop
xchg
or
or
cmp
popf
jnp
retf
out
sub
jbe
jg
jbe
or
popf
cwde
sti
daa
add
(bad)
adc
call
mov
sbb
lea
mov
push
fcmovu
lds
sub
mov
jnp
and
push
aas
or
ror
dec
into
push
mov
inc
mov
jno
sbb
or
jnp
leave
mov
rol
call
fcom
mov
iret
clc
sub
shr
(bad)
jmp
xchg
int
stos
pop
sub
sti
xor
repnz
arpl
mov
xor
in
cld
or
jae
gs
mov
jne
les
movs
int
jmp
sbb
(bad)
sti
jle
fbstp
pop
es
imul
jmp
xchg
je
aam
cdq
test
xlat
rcr
inc
or
pop
test
pop
mov
inc
test
fidivr
es
cmp
call
pand
aas
sbb
mov
scas
loopne
nop
cmp
mov
or
clc
sar
sub
shr
leave
sub
test
shr
dec
fmul
add
sub
mov
push
inc
sub
mov
mov
mov
pop
mov
and
fidivr
dec
xchg
sbb
sub
inc
daa
and
xor
and
add
pop
fcmovne
jns
xor
jmp
and
adc
rol
loopne
fldenv
leave
neg
data16
add
scas
stos
mov
in
clc
aas
aaa
shl
retf
and
add
add
mov
xchg
rol
aas
xor
retf
adc
push
jns
retf
jmp
mov
cmp
lods
xchg
stc
jns
stc
shl
jl
and
jmp
and
push
pop
cli
ja
fwait
push
adc
sbb
iret
sar
test
sbb
adc
mov
clc
(bad)
call
stos
js
lds
jle
ds
das
cmp
xchg
aam
cs
sti
add
jle
mov
mov
jmp
fisub
inc
call
shl
jnp
add
(bad)
gs
pop
dec
xor
sahf
loopne
scas
fst
mov
jne
mov
mov
pushf
xor
sub
mov
arpl
sub
(bad)
or
nop
cmps
mov
sbb
mov
pusha
scas
mov
(bad)
shl
jl
or
push
jno
adc
enter
inc
bound
push
lods
sbb
lods
push
es
idiv
push
push
fimul
out
sub
clc
scas
out
sti
fisub
add
mov
cmps
xor
fiadd
ja
cmp
pop
nop
shr
mov
js
ins
cdq
add
mov
jnp
retf
in
adc
add
rcl
mov
fld
adc
mov
mov
pop
sar
ud2
frstor
in
dec
lods
(bad)
jp
ret
daa
retf
mov
push
mov
adc
adc
aad
lods
ds
adc
idiv
jmp
adc
xchg
and
dec
dec
or
or
mov
and
jbe
cdq
or
pop
enter
rcr
retf
push
cmp
loope
imul
pop
les
pop
mov
add
mov
add
shr
cmp
jne
test
fstp
push
xor
xor
inc
popf
(bad)
mov
add
arpl
jo
xcrypt-cfb
cmps
out
pushf
stos
shl
mov
mov
nop
lock
test
xchg
add
xchg
out
repz
adc
stc
mov
ja
and
mov
cli
and
pop
in
lock
cld
jge
sub
sub
add
lods
push
inc
dec
jmp
jge
fisub
test
std
cmp
clc
mov
xor
icebp
out
mov
das
ins
pop
cmps
push
push
xchg
sub
mov
fldcw
scas
cmp
xor
mov
pop
in
xchg
aas
leave
jmp
and
jbe
stos
xchg
push
movs
jb
pusha
inc
mov
or
xchg
cmp
inc
mov
(bad)
pop
xchg
ins
xchg
cmp
call
mov
mov
dec
mov
out
or
stos
mov
jb
cmp
sub
push
icebp
ror
add
mov
push
clc
ss
loop
cmp
fsubr
add
cmp
or
fdiv
int
cmc
jle
adc
adc
fstp
xchg
or
adc
lock
dec
leave
stos
adc
test
jns
pop
mov
movs
xor
mov
mov
push
jb
cmp
adc
sub
xor
jecxz
adc
jns
and
add
pop
sub
mov
dec
aad
es
cmp
mov
and
pop
and
jnp
cdq
jle
cli
pop
cmp
dec
cmp
nop
cmps
jg
in
sub
jb
xor
std
inc
cmp
jmp
rol
(bad)
pop
leave
inc
adc
in
dec
xor
add
jl
mov
gs
in
cs
enter
jge
stc
call
xor
daa
std
or
jmp
das
stc
fstp
imul
xlat
loop
mov
cdq
mov
push
icebp
inc
jp
sbb
inc
ret
jns
movs
pop
sbb
fdivr
retf
inc
fadd
movs
xor
lahf
cdq
leave
xor
nop
pop
inc
fistp
cmp
shl
dec
xor
adc
sar
mov
les
pop
jg
shl
enter
jmp
lahf
hlt
mov
xlat
push
xchg
enter
cld
clc
mov
inc
nop
or
jno
cmp
sar
mov
mov
ins
int
jb
ins
jb
mov
pop
jp
cmp
(bad)
adc
les
pop
xor
push
rcl
stc
out
sar
(bad)
mov
aad
fcom
in
adc
ins
(bad)
pop
inc
lods
(bad)
imul
(bad)
int3
pushf
mov
or
inc
retf
daa
pop
cmp
mov
pop
fnstcw
arpl
or
jle
add
inc
xchg
inc
jbe
mov
scas
ja
das
and
xchg
inc
jo
add
mov
cmp
retf
shl
and
and
gs
(bad)
add
push
rol
pop
add
adc
inc
aam
mov
es
and
shl
push
xor
jae
call
and
push
rcl
push
ins
(bad)
and
repz
mov
jg
add
shl
ds
mov
add
cli
mov
rol
sub
cmps
scas
cmp
das
cmps
outs
imul
mov
add
push
das
movs
fcmovne
sub
cmp
add
ret
xchg
aad
xchg
cmc
aaa
call
in
fdivr
fwait
cmp
pop
jae
aas
sub
test
cld
jb
lds
clc
movs
jae
and
inc
bound
dec
fucom
jae
add
cmps
pop
shl
ja
xchg
(bad)
cdq
stos
sub
cmp
idiv
jbe
pop
mov
xor
jns
or
icebp
fmul
and
cs
es
retf
adc
mov
cmps
cmp
xor
jnp
jle
push
add
and
rcr
jg
and
icebp
cmp
xor
adc
add
xchg
scas
rcr
idiv
add
outs
stc
jp
mov
sahf
dec
sub
jns
retf
rol
out
jbe
mov
clc
push
nop
mov
in
dec
pop
add
test
or
inc
icebp
cld
mul
ja
jecxz
outs
daa
jg
sbb
dec
lds
adc
aas
mov
jno
mov
out
mov
mov
fistp
pop
jb
add
adc
pop
outs
aaa
in
daa
cmp
push
popa
aaa
add
pop
jae
(bad)
pop
add
test
add
out
dec
daa
mov
cmp
inc
cmps
test
push
mov
sbb
stos
dec
enter
add
aam
sbb
ret
test
movs
es
push
cld
add
(bad)
aam
(bad)
sub
retf
sti
adc
repz
pop
pop
inc
lock
daa
out
push
cmp
adc
jo
mov
je
xor
outs
loopne
xor
cmp
(bad)
les
lds
xchg
pop
pop
push
ret
or
xor
add
(bad)
xchg
mov
add
aaa
mov
xchg
or
push
sub
lahf
pop
and
pusha
cs
test
ja
fdiv
fstp
call
rcr
xchg
pop
mov
and
mov
stos
push
or
pop
cmp
xchg
fidivr
pushf
je
jae
or
cmpps
sub
push
jb
jbe
ins
mov
pop
xor
mov
inc
add
cmp
(bad)
sub
inc
xchg
lods
mov
gs
stos
in
mov
or
xor
call
out
fmul
retf
fmul
cld
mov
outs
inc
jg
push
and
mov
push
repnz
es
or
push
sub
clc
or
sbb
ud2
mov
mov
push
pop
or
(bad)
movs
mov
clc
js
pop
stos
test
pop
xchg
add
jne
lds
cmp
xor
xlat
fsubr
xor
xor
fld
sub
lock
ins
in
cmps
xchg
and
shl
adc
retf
xor
in
jl
movs
and
adc
push
add
push
xchg
ins
xchg
iret
mov
xchg
stos
dec
push
in
xor
int
retf
cld
mov
sub
popa
jle
lock
sub
fcomp
stos
push
rep
cld
icebp
mov
lods
add
cmps
push
mov
xor
mov
or
dec
pop
cmp
or
xchg
xchg
jmp
cmp
adc
retf
mov
mov
pop
add
cmps
mov
sar
push
mov
fisubr
add
and
movs
out
mov
fs
add
int3
(bad)
xor
ret
enter
mov
sti
xchg
push
sbb
cli
cld
cs
xchg
cwde
sar
sbb
pop
es
push
cmp
and
lods
sub
test
fmul
pxor
inc
cmps
adc
rcl
leave
in
repnz
push
adc
push
std
mov
std
sbb
fsub
inc
les
ror
in
mov
ror
fisttp
mov
mov
sub
fdivr
cld
jge
push
pop
jl
outs
mov
jle
sbb
pop
jnp
fnstenv
or
call
stos
mov
lock
in
push
or
add
and
sbb
les
data16
xchg
mov
mov
sbb
lods
and
into
cmp
jnp
or
and
pop
lahf
and
inc
jne
cmc
xchg
or
repnz
ror
pop
or
out
daa
stc
and
pusha
retf
mov
addr16
scas
sub
shr
jmp
cmp
mov
xchg
addr16
add
mov
push
push
jmp
lea
aam
mov
shl
call
mov
retf
cld
xor
retf
cwde
cmp
mov
mov
sar
lds
ret
push
ret
add
leave
inc
mov
ins
outs
pop
sbb
rol
rcr
in
xchg
push
fild
arpl
jl
lock
fs
mov
sbb
dec
nop
jo
fsub
out
inc
fst
adc
jge
mov
retf
adc
inc
ss
out
leave
in
enter
sti
ret
sti
enter
enter
inc
add
stos
dec
jns
dec
stos
jne
jne
out
enter
add
cmc
push
push
sbb
cmp
jg
jns
cld
jle
sbb
daa
xlat
pop
jge
daa
xchg
cmp
cmp
aaa
jnp
xchg
(bad)
rol
test
in
dec
call
ja
das
ror
xor
dec
push
inc
call
call
es
and
rcl
test
adc
pop
ficom
push
adc
pop
push
jl
push
mov
dec
outs
and
cmovp
push
lock
mov
inc
sub
sub
add
int
lds
xchg
jmp
cmps
inc
add
mov
cmp
xchg
xchg
test
xor
test
leave
pop
dec
adc
push
dec
(bad)
jmp
dec
repnz
nop
inc
test
xchg
fdiv
inc
ds
gs
xor
cmp
xor
imul
daa
pop
movs
scas
scas
cmps
inc
xor
and
or
mov
add
loop
xchg
mov
fisttp
(bad)
xor
dec
cmp
pushf
xchg
inc
jmp
mov
lods
jmp
ja
sbb
lock
push
lock
or
ss
in
push
mov
fild
jle
cmps
js
xchg
out
and
ins
jge
pop
mov
adc
jb
mov
pop
pushf
adc
lods
mov
mov
les
push
dec
push
addr16
sbb
daa
icebp
inc
cld
add
sbb
mov
inc
inc
inc
movlps
dec
push
sahf
in
mov
mov
lahf
pop
adc
int
push
leave
dec
pop
and
add
inc
loopne
add
push
adc
syscall
mov
movs
jle
ins
(bad)
not
dec
push
sbb
push
rcl
inc
and
call
add
inc
imul
and
call
call
push
dec
inc
dec
dec
xor
cs
ins
add
pop
jmp
inc
mov
add
out
rol
adc
xor
loope
xchg
mov
cmc
nop
lock
stos
out
in
xchg
gs
test
call
or
call
push
fadd
adc
out
push
es
inc
pop
std
inc
mov
mov
mov
dec
dec
pop
add
fsubr
xor
test
xchg
gs
mov
scas
ins
aas
pop
xor
pop
daa
jp
test
jne
icebp
in
retf
bound
(bad)
jne
xor
and
push
jge
(bad)
dec
dec
sbb
jg
sub
push
les
adc
imul
dec
retf
mov
dec
je
jecxz
repnz
outs
retf
dec
(bad)
cmp
test
add
rol
cdq
call
lds
adc
inc
mov
call
mov
loop
call
sub
sbb
cdq
out
mov
push
xchg
enter
cmp
jnp
mov
push
out
jmp
cmp
(bad)
dec
mov
fisttp
and
hlt
pop
je
push
cmc
xchg
jae
dec
add
jo
cmp
stc
and
imul
push
aam
movs
cli
dec
fistp
icebp
jg
xor
mov
in
imul
xchg
les
scas
push
test
mov
pop
cmp
xchg
or
push
movs
jl
in
fbstp
xor
(bad)
clc
(bad)
mov
pop
sbb
jg
mov
(bad)
cdq
sbb
adc
cdq
jle
call
xchg
pushf
stos
adc
popa
adc
jb
adc
leave
je
pop
sub
jb
pop
shl
dec
inc
jnp
cmp
mov
je
mov
(bad)
fstp
add
push
(bad)
sub
jmp
ins
adc
mov
mov
arpl
in
push
or
sbb
clc
ss
xor
clc
and
ret
add
inc
jb
popa
je
push
gs
ins
dec
outs
outs
ja
push
imul
pusha
lea
je
sub
add
dec
cmp
sub
bt
setnp
jmp
mov
and
sub
mov
fcom
dec
dec
aam
mov
xor
std
pop
mov
imul
and
push
mov
mov
mov
cmc
add
adc
(bad)
mov
or
pop
int
mov
jmp
or
push
stos
imul
scas
push
ins
and
dec
xor
inc
aas
loope
clc
dec
pop
push
arpl
cmp
movs
sti
das
and
push
rcl
pop
lds
mov
dec
mov
push
jge
dec
test
sub
mov
mov
jecxz
shr
and
add
add
sub
repnz
lea
call
stc
jmp
mov
pop
mov
pushf
jmp
add
or
mov
bt
test
jmp
or
sub
mov
inc
xor
pop
mov
jmp
adc
cs
push
movs
mov
cmps
in
inc
stos
in
push
test
push
cmp
scas
in
and
outs
dec
cmp
xchg
mov
xchg
xor
add
scas
inc
leave
jl
push
mov
data16
mov
clc
sub
push
data16
sub
scas
sbb
nop
nop
pop
push
clc
sbb
fimul
mov
inc
fnstsw
xchg
sti
lea
add
int3
mov
in
sub
inc
(bad)
(bad)
inc
add
popa
ins
inc
jb
add
pusha
lods
bt
push
bt
rol
mov
cmc
push
xor
call
add
inc
gs
gs
je
jo
imul
inc
adc
adc
pop
adc
das
push
in
inc
pop
adc
jb
adc
repz
scas
xchg
jge
iret
inc
fadd
movd
sbb
icebp
pop
or
adc
pop
jecxz
sbb
jecxz
or
fcmovb
int
out
imul
xchg
jle
jae
mov
mov
out
rol
mov
call
out
cmp
repnz
test
cmp
mov
fwait
loopne
inc
pop
js
pop
aad
movs
lds
adc
fcomp
and
or
sbb
sbb
cmps
jae
pop
rcr
fsubr
mov
mov
add
test
test
jne
ret
shl
ins
ins
mov
push
xor
dec
add
ds
pop
jne
pop
jmp
popa
cmp
push
(bad)
pop
fidivr
or
mov
fs
repnz
jbe
aaa
adc
inc
int
sti
mov
aaa
ins
fisttp
push
es
mov
pop
icebp
or
int3
mov
ud2
fldcw
sub
push
clc
hlt
sub
sbb
adc
cwde
and
push
repz
scas
je
(bad)
push
mov
test
inc
cmp
jno
in
inc
push
stc
or
pop
jnp
sbb
into
sbb
cmc
fsubr
xor
sbb
imul
push
adc
xlat
inc
pavgw
cmp
test
inc
retf
mov
dec
popa
or
in
mov
xchg
xor
cmp
sahf
mov
push
jbe
fnsave
lea
daa
js
sub
cmp
mov
rcl
jmp
and
xor
mov
add
je
jne
jb
outs
je
jb
arpl
jae
pusha
push
mov
push
push
ret
push
pushf
mov
jmp
inc
fisub
mov
fstp
inc
jmp
inc
xor
mov
popa
sub
dec
scas
xor
shl
push
mov
add
inc
(bad)
push
mov
inc
inc
xchg
enter
rcl
sub
retf
xchg
mov
adc
test
arpl
cdq
lds
dec
push
push
fldenv
and
dec
lea
retf
cmps
cmp
inc
push
xor
hlt
pop
cmp
cdq
jns
call
push
inc
xchg
add
div
cld
pop
or
dec
jno
ds
cmc
adc
out
sub
adc
dec
imul
loope
das
adc
dec
dec
sub
ret
fs
movs
out
movs
jae
fs
mov
pop
pusha
cmp
pushf
jmp
pushf
push
mov
mov
jmp
cmp
popa
scas
cmps
bound
mov
xor
sbb
pushf
mov
lods
ins
and
add
outs
cmp
mov
je
push
cmc
aas
and
push
pop
adc
ins
cdq
popf
mov
mov
add
jno
mov
call
addr16
ins
test
mov
cld
mov
fdiv
xchg
mov
dec
nop
pop
(bad)
pop
out
es
bound
cwde
call
fimul
cld
inc
push
push
mov
pop
adc
cmc
push
loopne
dec
lds
cdq
repnz
jae
push
and
loope
or
xchg
pushf
sub
add
scas
jae
lahf
jbe
inc
imul
mov
out
cmp
xlat
dec
pop
les
hlt
fstp
push
dec
jbe
stc
mov
out
lods
add
lds
add
sbb
push
xchg
retf
cli
inc
fst
sub
dec
xor
cdq
cmp
mov
(bad)
hlt
cwde
jge
int3
cmp
hlt
js
js
jge
cmps
pop
jno
inc
retf
shl
inc
inc
xchg
cmp
inc
or
push
adc
outs
mov
mov
cwde
(bad)
aam
dec
sbb
js
test
repnz
les
mov
repz
(bad)
inc
adc
push
les
test
add
and
mov
cdq
push
or
gs
add
sbb
je
jne
adc
mov
or
(bad)
pop
push
mov
repz
jge
mov
call
icebp
stos
dec
mov
push
pop
ret
sub
add
shl
push
push
es
pushf
scas
test
adc
sub
test
(bad)
push
cs
aad
cmp
mov
add
test
xor
(bad)
mov
iret
push
pop
sub
or
std
mov
test
xlat
xchg
fwait
inc
call
je
dec
fisubr
ins
push
xlat
mov
dec
fst
jl
and
pop
mov
xchg
mov
gs
gs
inc
imul
mov
and
sub
repz
aad
sub
cwde
jecxz
pop
mov
inc
mov
xchg
mov
mov
ins
push
fldcw
leave
into
add
pop
sbb
mov
std
mov
lds
push
ret
and
das
or
adc
and
fcmovb
push
fistp
enter
pusha
push
imul
gs
aad
adc
xchg
icebp
xchg
add
jns
(bad)
aas
jmp
aas
lea
jne
cmc
bswap
mov
call
neg
clc
jmp
rol
rol
or
push
jmp
add
inc
gs
outs
fs
gs
popa
outs
fs
gs
add
pushf
pop
pushf
not
rcl
setb
mov
clc
cmc
ror
cmp
bt
cmc
add
jmp
pusha
mov
mov
mov
jmp
stc
add
mov
cmp
mov
lea
jmp
lea
not
bswap
lea
mov
mov
lea
ja
jmp
xchg
cmp
sub
movsx
mov
rol
btr
mov
pusha
shr
neg
ror
pusha
mov
pushf
cmc
cmc
push
or
mov
lea
je
adc
or
rol
xchg
add
btr
dec
mov
sub
btc
sbb
lea
adc
shr
btc
mov
stc
movsx
shr
add
clc
movsx
add
movzx
mov
pusha
call
add
dec
gs
jo
gs
ins
ins
outs
arpl
add
inc
ins
outs
jae
dec
popa
outs
fs
add
inc
sub
and
lea
jmp
jmp
pushf
lea
mov
pushf
lea
call
push
lea
ja
bt
push
pushf
bt
imul
call
jmp
repnz
push
lea
jne
setno
movsx
cwde
movzx
mov
mov
mov
pushf
movzx
mov
not
lea
jmp
add
inc
imul
ins
popa
addr16
outs
push
je
gs
ins
add
fs
jle
push
cmc
ror
pushf
test
pusha
add
bt
stc
jmp
or
dec
mov
sbb
pop
inc
aaa
push
mov
and
inc
inc
push
pop
je
cmps
test
enter
sub
mov
or
mov
(bad)
mov
push
bound
mov
daa
hlt
cmps
fnstcw
add
dec
or
jmp
cld
cmp
ja
inc
jmp
fnstsw
jmp
xchg
sub
test
xchg
popf
push
jmp
mov
jno
mov
xor
mov
lock
fdiv
sub
xchg
push
das
cld
sbb
xor
cmp
test
push
add
sub
lds
cmc
xor
xor
adc
adc
scas
scas
and
pusha
std
push
jge
mov
movs
fcomp
inc
cmp
pop
push
cmp
test
pushf
popa
and
jo
call
nop
nop
mov
les
out
push
je
cmps
test
sub
ror
and
into
inc
pop
lods
js
sahf
jae
test
hlt
push
jg
add
and
xchg
cmp
gs
retf
std
xchg
and
xchg
test
jno
jl
repz
push
xor
push
inc
jno
adc
or
jbe
pop
arpl
popf
cwde
fld
mov
pop
ja
add
pop
add
loope
repz
das
sub
fdiv
fidivr
pop
retf
fadd
aad
cmp
xchg
hlt
dec
int3
ja
mov
(bad)
cmp
or
dec
adc
fld
xchg
xchg
repz
arpl
(bad)
aam
or
jp
sub
cmp
jge
test
das
fcom
cs
and
movs
push
out
adc
in
cdq
daa
clc
es
dec
shr
(bad)
mov
icebp
push
xchg
mov
adc
adc
ret
add
popf
sbb
inc
hlt
xchg
jmp
cld
popf
fistp
scas
lods
mov
mov
fadd
cwde
shl
inc
pusha
ja
push
inc
inc
pushf
test
or
jmp
in
xor
adc
iret
int3
sahf
jmp
xor
mov
pop
mov
test
pop
mov
loope
or
pushf
into
ret
ret
inc
mov
scas
lock
retf
popf
test
aad
pop
mov
pop
or
xor
cmps
js
cld
movs
in
mov
xchg
stos
cdq
lahf
jge
daa
mov
or
or
repnz
push
push
xor
adc
inc
mov
jg
xor
inc
in
stc
sub
(bad)
loope
retf
ds
mov
pop
movs
jo
xor
out
xchg
(bad)
ret
push
leave
lods
jge
jmp
scas
lods
cmp
push
dec
gs
ins
outs
jae
inc
outs
jne
add
clc
cmp
push
pushf
lea
jne
call
clc
push
cmp
push
call
cmc
mov
pusha
cmc
test
pusha
lea
je
pusha
mov
sub
pusha
clc
cmp
push
jmp
add
inc
gs
fs
jo
gs
dec
outs
outs
add
(bad)
pushf
test
add
mov
jmp
push
dec
dec
dec
dec
inc
push
cs
ins
add
fs
jb
cmc
cmc
cmp
pusha
call
bsf
call
add
inc
gs
imul
imul
jns
add
add
arpl
outs
imul
gs
bound
jae
imul
ja
push
imul
mov
stc
add
push
mov
pusha
lea
jmp
mov
call
add
dec
outs
je
jb
gs
gs
jo
imul
mov
mov
or
loop
push
or
dec
retf
das
ficom
data16
jnp
add
jnp
or
inc
rol
repz
retf
pop
retf
imul
mov
fst
jne
pushf
icebp
nop
stos
js
dec
je
jg
popf
adc
xor
jmp
add
cmp
cmps
dec
iret
ror
mov
add
mov
cmp
mov
add
arpl
ins
push
test
pop
nop
in
cmp
mov
cmp
jecxz
xchg
jg
fwait
test
fmul
es
xchg
and
(bad)
push
test
mov
mov
ror
adc
ins
stos
mov
jae
scas
stos
and
scas
pushf
jmp
call
imul
bt
pusha
test
bt
add
push
pushf
pushf
pushf
lea
jmp
jmp
clc
test
cmp
pusha
push
push
lea
jae
pushf
cmp
call
add
inc
gs
je
jb
jne
dec
outs
outs
inc
add
xchg
push
pushf
push
jmp
dec
mov
pushf
pusha
mov
clc
cmp
call
call
add
inc
imul
inc
imul
push
je
cmp
bt
sub
call
(bad)
imul
fldenv
mov
lods
ss
(bad)
cmc
sbb
hlt
xchg
sub
pop
rcl
mov
fxsave
ins
lods
popf
dec
dec
scas
dec
enter
ins
xchg
xor
mov
sub
sub
bound
jmp
ja
cmp
lock
push
lea
les
(bad)
loopne
imul
cld
jp
sar
test
scas
je
out
mov
fisubr
or
xor
cmp
adc
add
retf
mov
cmp
xor
fs
mov
pop
xor
cmp
mov
outs
les
(bad)
inc
in
stc
cmps
and
cmp
pop
daa
in
dec
int
inc
xchg
mov
inc
jmp
add
ret
or
cmc
mov
cmp
pusha
mov
lea
jae
pushf
lea
jne
cmp
shl
sbb
sub
aaa
mov
call
add
inc
imul
popa
addr16
outs
arpl
gs
push
imul
mov
scas
repnz
inc
add
gs
je
inc
outs
ins
jo
je
bound
inc
add
push
and
lea
ja
rol
push
sub
bsr
lea
add
mov
setle
bt
mov
push
mov
cmp
pusha
call
pusha
push
mov
pushf
call
add
push
jb
arpl
jae
xor
jb
je
pushf
inc
push
jmp
add
inc
gs
jb
jbe
push
jns
gs
add
cmp
cmp
mov
pushf
mov
lea
jne
push
test
clc
sbb
mov
bt
call
mov
pushf
cmp
call
add
inc
gs
gs
dec
bound
arpl
add
ins
arpl
push
arpl
add
outs
fs
imul
gs
add
push
movzx
mov
mov
mov
pushf
lea
jmp
mov
pushf
cmp
clc
shr
push
cmc
cmp
push
lea
je
stc
cmc
call
xlat
dec
hlt
or
pop
xor
sub
xchg
inc
adc
in
lea
mov
sbb
gs
lock
mov
jbe
mov
cmp
in
ins
cdq
xor
add
scas
int
adc
adc
sbb
rol
data16
cmc
pusha
scas
cmps
imul
icebp
pop
cwde
xchg
stos
sbb
retf
mov
ja
and
gs
mov
push
xchg
add
xor
and
xor
jmp
pop
add
pop
test
lea
jne
not
shrd
xor
bswap
cmc
mov
sbb
seta
cmc
add
shr
shl
not
adc
mov
pusha
pusha
cmc
test
pushf
jmp
add
pop
ja
jae
arpl
add
out
xchg
btc
mov
call
add
inc
js
je
jb
arpl
jae
jmp
mov
push
lea
je
pusha
pushf
lea
jmp
bswap
pop
not
pop
jmp
pop
dec
jnp
mov
cmp
adc
push
cmps
mov
loop
cld
sub
fdiv
push
mov
push
or
pop
jnp
imul
(bad)
aaa
iret
lods
popa
es
adc
fmul
fld
adc
in
call
jle
push
sbb
mov
mov
xor
jne
repnz
dec
fnsave
adc
inc
loope
jnp
je
add
sbb
sbb
mov
dec
call
lock
aaa
dec
les
and
addr16
mov
rcl
add
je
gs
jo
imul
add
add
popa
ins
inc
ins
ins
outs
arpl
add
pop
jae
ja
jb
outs
je
add
add
je
popa
jae
inc
jb
outs
jb
movsx
mov
push
mov
pusha
push
ret
clc
cmp
jmp
lea
je
push
sub
cmc
cmp
pushf
push
lea
ja
push
imul
stc
clc
cmp
add
pusha
lea
jmp
add
inc
gs
jns
je
ins
inc
imul
jns
add
ret
btr
rol
mov
cmc
cmc
pusha
cmp
mov
pushf
lea
jne
shl
bsr
neg
sub
stc
xor
mov
cmc
pusha
inc
pusha
add
xor
not
mov
pushf
push
call
sbb
xor
pop
sahf
sub
mov
lods
jnp
mov
and
outs
lods
lods
imul
stos
ins
cmps
jns
mov
ja
fdiv
je
add
add
aaa
fs
dec
and
je
outs
mov
pushf
cmc
xchg
fwait
test
push
scas
fdiv
mov
cmp
inc
fdivr
xor
mov
dec
mov
pop
sti
(bad)
fld
mov
adc
and
push
int3
mov
sub
dec
retf
mov
dec
je
lds
iret
popf
adc
aas
dec
stos
fidivr
fisttp
scas
push
fadd
cmps
mov
xor
stos
push
int3
(bad)
enter
jno
outs
(bad)
or
or
sbb
adc
or
sbb
unpcklps
sub
dec
into
repnz
loopne
dec
mov
pop
es
push
mov
popf
jl
scas
jne
outs
sub
mov
or
retf
enter
push
jecxz
icebp
dec
push
mov
push
cmp
mov
shr
shr
cwde
std
cli
jbe
pop
test
pop
(bad)
mov
cmp
jae
cmp
lea
or
mov
mov
ds
sahf
pop
jecxz
jmp
mov
inc
adc
arpl
test
cmps
fisttp
icebp
jl
dec
mov
sub
inc
retf
scas
mov
hlt
mov
fs
push
arpl
xlat
test
mov
or
add
lock
int3
ret
imul
in
inc
inc
or
and
repnz
stos
mov
jge
push
and
pop
dec
sbb
imul
fisub
sub
daa
(bad)
xchg
xchg
lods
fistp
jns
jo
inc
mov
or
and
xchg
ins
loop
bound
and
mov
arpl
push
pushf
push
ret
mov
mov
mov
pusha
push
ret
push
mov
pushf
pusha
lea
jmp
inc
mul
mov
push
pop
(bad)
mov
call
add
xor
jp
sar
inc
xlat
inc
and
in
js
(bad)
fnstenv
push
es
test
aam
test
leave
push
xlat
sub
jae
das
fs
inc
retf
mov
in
loope
out
inc
cmps
pop
sti
and
pop
pop
int
fcmovnb
retf
mov
outs
rcl
mov
inc
adc
(bad)
in
pusha
pop
std
pop
mov
js
and
mov
xchg
add
push
cmc
add
stc
cmc
bt
call
jmp
lea
ja
rol
setbe
shr
sub
sub
shld
btr
bsr
add
stc
mov
ror
sar
shl
mov
clc
repnz
call
xor
outs
sbb
push
or
cmp
test
mov
xchg
mov
mov
aas
pop
and
in
xor
repz
cwde
xor
bound
pop
sbb
push
add
jl
in
ds
mov
dec
xchg
icebp
shl
aad
pop
popa
fwait
mov
test
imul
rcl
pop
sub
pop
mov
ret
add
outs
push
jb
arpl
jae
outs
imul
add
inc
imul
add
sub
xor
fs
cmp
clc
xchg
out
inc
push
icebp
int3
xor
movs
fist
in
mov
jmpw
call
cmps
xor
cli
xor
movs
mov
pop
or
fbld
push
stos
and
mov
sbb
repnz
mov
sub
out
aaa
loop
(bad)
cwde
xchg
mov
mov
(bad)
jae
sti
fisttp
aaa
loop
and
div
dec
fist
pop
stos
adc
fidiv
hlt
sbb
adc
rcl
not
sub
jno
sub
loope
(bad)
shl
push
out
cmps
cmp
xlat
aaa
lods
fcomi
mov
ds
and
(bad)
sbb
or
movs
bound
dec
leave
js
scas
fist
push
ror
jle
mov
ret
or
push
int3
gs
shl
jmp
aaa
and
out
cmp
test
xor
adc
fbstp
jbe
nop
jae
aam
or
das
sub
aaa
mov
cwde
and
adc
lods
stos
movs
repz
imul
cmp
addr16
sbb
inc
cmps
jb
jmp
cs
stos
jmp
cmp
jmp
mov
sub
push
dec
jle
or
aam
es
cmps
cmp
mov
fcomi
mov
dec
mov
jmp
xor
inc
aam
fnstsw
scas
ficom
sbb
adc
clc
jae
jge
mov
sub
pop
mov
adc
hlt
push
mov
out
cmps
cmp
or
loop
dec
cmp
adc
loop
adc
aas
or
pop
mov
sub
dec
mov
inc
mov
sub
xor
xor
push
fnsave
adc
int
mov
int
loop
push
inc
(bad)
mov
dec
add
ror
push
push
and
inc
fisttp
pop
mov
es
pop
or
add
scas
fiadd
xchg
test
shr
ficom
add
(bad)
stos
(bad)
jmp
fs
jae
pushf
call
add
adc
xor
mov
ins
jp
into
dec
or
jle
in
xchg
jmp
outs
stos
cdq
push
into
stos
and
or
stos
cmps
xor
movs
push
cwde
jl
dec
fcomip
int3
retf
sar
fwait
cld
icebp
mov
dec
adc
xor
cld
jg
stos
repnz
bound
popa
adc
hlt
das
and
cmp
std
(bad)
mov
inc
xchg
jae
mov
dec
dec
aas
in
sub
sub
adc
rsm
stos
out
xchg
fisttp
mov
iret
add
dec
gs
jo
jb
gs
pop
cmps
(bad)
jmp
xchg
rol
inc
cmp
add
not
lods
ret
mov
pop
hlt
adc
pop
scas
popa
push
jge
mov
ins
sahf
ins
scas
or
xchg
dec
lahf
mov
outs
mov
out
inc
or
push
cs
inc
xchg
jle
and
dec
dec
out
sbb
jl
jno
test
dec
push
sbb
jnp
cli
xchg
retf
clc
cmp
cmps
sbb
inc
inc
and
mov
mov
mov
pop
test
dec
dec
cmps
xchg
movs
sub
fwait
inc
mov
xor
arpl
pop
and
add
pop
adc
lds
pop
call
pushf
lea
ja
cmc
pusha
imul
pusha
clc
clc
test
add
pushf
pushf
push
pushf
lea
jmp
add
push
gs
fs
imul
inc
add
je
outs
ins
jo
je
jb
popa
ins
gs
add
add
gs
je
push
je
gs
ins
dec
outs
dec
inc
ins
outs
bound
add
add
je
outs
ins
jne
gs
outs
outs
jb
popa
je
outs
outs
inc
add
xchg
(bad)
jmp
in
xchg
xor
cmp
gs
jmp
mov
cdq
adc
call
mov
pusha
adc
pop
fcomi
into
adc
jl
mov
cs
sbb
out
pop
inc
jae
fwait
push
cmps
adc
jp
pusha
sahf
paddb
xchg
icebp
imul
ins
lds
mov
pop
cli
aas
push
push
mov
jbe
pop
add
fistp
shr
outs
rol
out
(bad)
inc
sub
mov
mov
xchg
sbb
mov
mov
pop
lea
cs
dec
ret
add
in
jmp
addr16
sub
add
inc
gs
outs
imul
outs
outs
jb
popa
je
outs
outs
add
out
sub
add
jnp
test
jne
ror
cwde
sub
adc
sbb
mov
cmp
inc
add
jmp
rcl
shld
jmp
pusha
lea
ja
neg
sbb
sub
clc
add
bsf
adc
mov
or
adc
clc
mov
push
test
cmp
call
push
mov
mov
mov
mov
mov
pushf
push
ret
stos
mov
mov
push
pusha
lea
jmp
lea
jne
cwde
lea
sub
neg
test
aad
movsx
mov
test
jmp
jmp
bt
imul
cmp
test
test
add
pusha
push
pushf
mov
lea
jmp
add
inc
gs
imul
je
add
dec
outs
je
jb
gs
ins
outs
jae
dec
popa
outs
fs
add
fs
ins
cs
ins
add
inc
push
xor
cs
ins
add
add
lea
jae
cmp
call
push
lock
std
std
(bad)
out
push
nop
mov
inc
stos
test
(bad)
mov
pushf
mov
pop
cmp
xor
mov
or
jge
mov
inc
inc
and
aam
push
lds
in
daa
adc
test
jns
xchg
xor
repz
(bad)
lods
add
xchg
push
lods
hlt
xor
test
fsub
lock
fld
clc
stc
ror
jmp
add
ins
gs
jae
je
push
repnz
pushf
lea
jne
lahf
push
mov
pushf
mov
lahf
cwde
movsx
lea
mov
push
mov
jmp
push
lea
je
and
and
adc
add
mov
sbb
cmc
shl
test
add
cmc
btc
or
mov
bt
test
call
and
mov
add
lea
pushf
pushf
add
mov
call
push
sub
shld
btc
lea
pusha
jmp
inc
inc
dec
xor
cs
ins
add
add
je
imul
jmp
mov
mov
push
lea
jmp
sub
push
pusha
jmp
mov
pushf
pop
call
add
push
ins
gs
mov
bt
pusha
cmp
mov
call
mov
dec
outs
sbb
es
xor
mov
mov
xchg
xchg
std
out
cli
pop
cmp
jb
inc
iret
push
or
ret
int
iret
push
pop
jp
ins
stc
test
adc
dec
mov
sub
stos
scas
add
into
leave
mov
cli
xchg
clc
push
aam
cmp
repz
mov
sahf
xor
rcl
or
ret
pop
mov
jne
jp
push
xchg
pop
repnz
ds
sbb
inc
xchg
jmp
xor
adc
xlat
sahf
mov
jmp
in
test
lahf
adc
xchg
mov
pop
les
adc
fld
add
or
adc
fnstcw
movs
cmp
and
cs
aas
jmp
and
or
jae
retf
aas
in
xor
outs
inc
push
or
loopne
sub
out
getsec
pop
mov
lea
cdq
cmps
addr16
repnz
icebp
pop
imul
(bad)
sub
inc
inc
and
pop
sub
mov
pop
ret
dec
mov
adc
xchg
pop
cmp
call
repz
add
or
or
out
mov
clc
push
xchg
and
cwde
test
js
ja
xor
mov
out
sub
push
mov
xchg
mov
or
pop
add
fwait
cwde
iret
pusha
stc
lock
mov
out
pop
dec
(bad)
outs
jg
stos
sub
fs
mov
clc
fnstcw
dec
mov
mov
jg
push
jns
mov
stos
loop
jbe
or
and
xchg
es
push
adc
imul
rcl
adc
sbb
mov
pop
sbb
rcr
push
in
pop
mov
xlat
fidiv
xor
js
push
and
sbb
addr16
cmp
mov
add
and
jp
add
dec
lods
int3
jns
cs
pop
add
pop
dec
pop
jg
push
push
inc
pop
pop
pop
sbb
adc
stc
pop
out
sbb
pop
neg
popa
fs
fwait
sub
ja
pop
loope
mov
jo
cmp
jbe
or
mov
ja
sub
push
cs
cmp
sub
movs
sbb
push
cwde
xchg
jmp
stos
inc
rol
pop
iret
pusha
or
jno
outs
(bad)
out
xlat
xchg
lock
pop
mov
mov
push
enter
call
add
inc
jb
popa
je
inc
imul
imul
popa
addr16
outs
arpl
gs
add
ret
adc
inc
ret
adc
fcom
push
mov
imul
dec
push
in
mov
mov
ja
ror
movs
xchg
dec
int3
and
in
not
xor
out
xchg
(bad)
push
mov
stos
push
ret
adc
pop
sti
or
add
in
xchg
fwait
push
(bad)
adc
push
xor
cmc
and
xchg
ret
inc
adc
push
adc
fs
pop
jbe
jmp
sub
cmps
push
dec
imul
in
mov
adc
cmp
icebp
cmp
stos
in
xchg
xchg
lahf
mov
nop
sbb
scas
jecxz
fs
mov
mov
mov
dec
or
cmp
push
xchg
mov
icebp
inc
jmp
leave
inc
rol
sub
add
daa
data16
xchg
mov
loope
pop
add
int3
les
push
mov
call
cmps
lock
jp
xor
rep
je
jb
stos
cmp
and
mov
mov
hlt
adc
sub
sbb
repz
inc
dec
pushf
add
shl
sti
into
inc
inc
test
pop
les
mov
push
in
xchg
fist
enter
shr
vcvtdq2ps
test
mov
mov
rcr
or
ja
xchg
adc
in
or
cmp
dec
lds
inc
jmp
in
adc
jns
clc
js
imul
sar
mov
fs
cmp
imul
in
mov
or
cmp
inc
rol
jmp
call
sbb
icebp
push
jle
sahf
mov
cld
pop
into
lods
sub
add
add
mov
shl
es
adc
dec
jo
fimul
sub
int3
es
iret
dec
pop
cmp
push
xor
das
cli
dec
adc
pop
and
and
jecxz
dec
jae
(bad)
cmps
jo
dec
leave
dec
pop
(bad)
outs
mov
push
xchg
scas
shr
cld
inc
(bad)
dec
inc
push
dec
inc
dec
xor
cs
ins
add
lock
add
mov
lea
jne
xor
sub
push
mov
jmp
fdivr
sbb
aaa
adc
dec
or
movzx
sub
out
cs
cld
fsub
add
add
cmp
lods
aas
push
out
cmp
xor
xor
mov
cmp
fdivr
pop
jp
push
or
cdq
(bad)
sti
cmp
pop
dec
mov
test
inc
cmp
wbinvd
jp
or
pop
mov
cmp
out
fld
sar
xchg
mov
dec
pop
in
out
in
add
cmp
fwait
ret
mov
sti
adc
cli
jnp
movlps
xchg
cld
sub
cmp
adc
aas
cmp
add
jp
test
add
xor
in
pushf
mov
push
inc
ds
pop
sub
fdiv
push
lea
and
shl
stos
pop
rol
cmp
add
dec
and
add
jnp
rol
cmps
jl
mov
cmp
adc
aaa
(bad)
xor
cmp
mov
dec
cmps
or
mov
xchg
mov
jge
pop
fcomp
xor
mov
in
xor
mov
xor
(bad)
push
mov
cmp
jmp
gs
and
xlat
rcr
imul
jbe
jnp
cli
iret
(bad)
retf
clc
pop
jle
sbb
pop
fbld
cli
rcl
(bad)
sub
xor
sbb
pop
adc
in
je
rcl
push
sbb
sub
xor
pop
shr
jge
jle
cmp
push
cmp
bound
and
dec
fist
gs
or
(bad)
pop
retf
daa
jbe
test
cld
mov
or
iret
inc
out
mov
fld
das
cmps
retf
lock
mov
xor
pop
pop
mov
pop
inc
mov
inc
cdq
xor
jnp
je
mov
fstp
call
dec
jae
cli
int
mov
sbb
add
and
daa
sbb
pop
xchg
jmp
cld
adc
stos
mov
add
mov
cmp
inc
mov
adc
call
arpl
jmp
stc
xor
fnstenv
mov
je
lahf
push
das
cld
rcl
add
jle
pop
jg
add
xchg
push
fwait
push
mov
loope
sar
or
or
int
xor
pop
push
lea
aas
idiv
sti
rcl
sub
out
and
sbb
aaa
xchg
in
cmp
fiadd
in
push
aas
sub
xor
pop
mov
push
sbb
shl
inc
aam
bound
ds
mov
or
lds
movs
movs
or
jp
ins
cmpps
pop
mov
out
add
and
jno
lods
or
std
sbb
adc
out
pop
dec
mov
cmp
jbe
jp
cld
xchg
mov
enter
invlpg
cwde
jmp
xchg
xor
mov
jp
cwde
call
inc
add
inc
cmp
outs
shl
mov
(bad)
jae
pusha
aaa
and
inc
mov
add
or
ss
sar
mov
dec
out
das
cmps
and
cmps
fucomp
jbe
fwait
cmp
inc
adc
inc
cmp
shr
and
mov
sbb
or
out
push
mov
pop
pop
xor
sbb
mov
mov
inc
ret
add
loopne
jl
xor
(bad)
mov
shr
cmp
(bad)
(bad)
sub
dec
mov
adc
inc
push
das
imul
inc
sub
xor
pop
in
jmp
sub
xlat
xchg
sub
ror
or
out
xchg
cmp
xchg
mov
adc
sub
shl
mov
sub
fld
rcl
movs
cmc
mov
inc
aaa
mov
retf
fucomip
add
cli
cmp
fsub
gs
dec
ja
jnp
add
xor
cmp
in
aaa
pop
sub
cli
and
into
xor
adc
xchg
and
je
dec
imul
sar
mov
lods
and
ss
jbe
push
mov
in
jb
mov
and
lock
aaa
je
adc
ds
sar
cli
jg
add
xor
dec
sbb
dec
adc
fincstp
pop
xlat
sub
dec
xchg
jno
std
pop
sbb
imul
(bad)
xchg
adc
sub
jmp
test
stos
retf
mov
movzx
cmp
jae
hlt
jmp
call
adc
aaa
in
shr
retf
and
retf
xor
xlat
cmp
and
add
xor
aaa
bound
shl
std
jnp
jmp
cmc
jp
adc
cmps
mov
mov
lea
sbb
push
stc
and
push
xor
cmc
push
cmps
push
and
das
sub
mov
test
int3
dec
outs
pop
sbb
pop
cs
lock
mov
add
inc
add
pop
adc
out
iret
mov
rcr
fdivr
pop
jmp
add
push
(bad)
xchg
es
das
aas
(bad)
les
and
mov
es
loop
inc
push
cdq
rol
sbb
mov
and
rcl
adc
mov
call
adc
mov
retf
ret
sub
cmp
dec
jmp
xchg
sti
add
shl
sub
mov
jne
push
pop
mov
enter
out
push
in
(bad)
ds
cs
cs
retf
stos
(bad)
enter
jle
mov
sub
out
or
pop
mov
mov
lock
lods
xor
ss
add
sbb
arpl
cmp
mov
int3
xor
add
or
adc
or
sub
jae
lods
pop
movs
add
retf
mov
jl
sub
inc
mov
pop
cmp
push
push
lds
je
cmp
sub
mov
cwde
shl
mov
sub
mov
jmp
cmp
sub
mov
xor
sbb
mov
add
pop
ret
mov
dec
xchg
pop
in
imul
es
stos
jne
in
cmp
push
fucom
cs
clc
mov
shr
sbb
add
daa
mov
inc
sar
mov
test
loop
mov
pop
stos
cmp
(bad)
jnp
lmsw
leave
and
aaa
call
mov
scas
sub
sbb
dec
mov
mov
cwde
hlt
data16
xor
mov
jge
mov
fs
int3
jl
or
(bad)
or
sti
jmp
add
mov
or
xor
scas
mov
enter
test
sbb
test
and
xor
mov
shr
push
imul
add
push
gs
adc
inc
fstp
imul
cmp
push
cmp
outs
(bad)
clc
fadd
stc
test
cwde
std
icebp
daa
sbb
loop
push
das
add
dec
or
xchg
ss
mov
lds
cdq
cmc
fnstcw
mov
imul
es
push
cmp
leave
movs
in
or
sar
cmp
cwde
aaa
repnz
test
les
push
pop
pop
lahf
mov
fadd
and
adc
xchg
jp
dec
call
fwait
xchg
mov
daa
and
js
push
outs
add
xchg
add
adc
not
or
mov
cmp
mov
add
jle
imul
int
add
xchg
or
ror
jp
test
and
mov
xor
sbb
(bad)
cmp
or
mov
xchg
shr
push
rcr
dec
push
xlat
stc
daa
pop
jecxz
cmp
push
iret
enter
jp
mov
xchg
outs
and
push
push
sub
shl
mov
cmp
adc
call
in
inc
jbe
cmp
repnz
jg
ficomp
or
mov
test
sub
and
es
adc
call
xor
cmp
call
and
push
test
jle
push
inc
mov
sub
push
mov
(bad)
clc
jle
pop
or
sbb
sub
fiadd
out
gs
xor
sub
sbb
daa
lock
fstp
shl
dec
(bad)
xor
sub
xor
mov
outs
xchg
ins
dec
adc
jecxz
mov
shr
fdiv
xor
cmc
and
jnp
bswap
or
maxps
loopne
mov
add
sub
mov
imul
pop
xchg
mov
sub
cmc
out
sub
jb
sub
xlat
xchg
sbb
pushf
aam
mov
pop
loopne
je
leave
pop
retf
cmp
mov
and
push
int
into
out
js
jecxz
je
jbe
mov
sti
fidivr
cld
mov
daa
mov
cdq
or
fisub
fidiv
add
enter
(bad)
sbb
cmp
adc
test
inc
cmp
movs
adc
data16
je
push
mov
mov
clc
sbb
daa
stc
repz
call
out
sbb
leave
das
lea
retf
add
in
shl
stos
adc
push
aaa
inc
cmp
jno
in
adc
in
mov
outs
xchg
and
movs
fsub
pop
leave
and
pop
jge
loope
in
sbb
sub
xchg
fdivr
add
aas
dec
arpl
mov
mov
shr
inc
sub
dec
daa
out
pusha
sub
ss
adc
std
call
mov
jecxz
xchg
popf
sub
maxps
call
jnp
push
rcr
mov
mov
popf
cmp
mov
mov
adc
ja
rcr
or
outs
jp
adc
cmp
pop
fstp
iret
js
lahf
mov
(bad)
xor
mov
add
inc
mov
xchg
xchg
retf
or
xor
cmp
push
inc
or
nop
xor
xor
lods
sbb
movs
outs
outs
(bad)
std
mov
mov
clc
inc
sbb
xchg
and
mov
add
test
push
pop
pop
and
cmp
sub
fmul
xor
bound
ds
xor
cmp
sti
cmp
jmp
xchg
adc
leave
cld
mov
in
call
imul
sub
sbb
gs
data16
aad
xchg
jmp
aaa
push
push
xchg
mov
sbb
shr
add
scas
in
loope
ds
pop
xchg
pop
sbb
shl
xor
dec
mov
mov
out
inc
xor
add
cmp
mov
imul
and
jne
add
or
pop
sub
jnp
or
lods
call
mov
mov
push
scas
in
fwait
bound
pop
jnp
xor
jp
nop
rol
pushf
inc
test
pop
cmc
sbb
jp
or
loope
(bad)
loope
pushf
call
mov
sub
adc
fstp
in
mov
call
arpl
push
xchg
sbb
jp
xchg
pop
sub
mulps
addr16
cmp
cmp
into
add
jmp
jnp
rcl
sbb
int3
clc
jnp
shl
cmp
fisub
out
idiv
mov
or
mov
mov
push
stc
xchg
push
mov
in
jno
movs
sub
mov
out
hlt
repnz
add
push
mov
loope
enter
ins
nop
call
mov
push
and
es
adc
into
fldcw
out
pop
cmp
jle
and
cmp
in
popf
push
call
mov
mov
shl
sbb
push
rcl
fimul
or
test
mov
movs
fstp
sti
mov
fidivr
rcl
cmp
in
mov
iret
pop
test
ja
jmp
or
mov
xchg
cdq
hlt
mov
push
clc
and
cmp
mov
sub
enter
mov
sub
sbb
or
cmps
jg
mov
sub
mov
mov
jne
sub
ficomp
icebp
int3
cwde
cmp
mov
jl
adc
popf
pop
sbb
das
jns
pop
dec
adc
iret
cmp
jecxz
cmp
mov
rcr
inc
push
cmp
mov
cmp
or
dec
mov
jl
push
fidiv
arpl
test
push
add
call
adc
sub
cs
repnz
cld
cli
dec
inc
sub
pop
inc
retf
and
sbb
fcmovb
xchg
stos
das
and
idiv
inc
bound
out
adc
std
adc
es
repnz
das
cdq
cwde
mov
xor
sbb
or
jb
ss
xor
cdq
sub
pop
sbb
adc
cld
xor
cmp
push
sbb
xor
mov
test
cmp
adc
sub
sub
push
or
repnz
xor
fiadd
xor
aaa
xor
or
stos
dec
mov
cmp
adc
ss
cmp
das
xchg
lods
and
sbb
in
jbe
dec
mov
sub
mov
lock
leave
icebp
in
cs
and
cs
sub
sub
aam
ss
cmps
sub
cmp
stos
std
aam
cmp
xor
das
in
push
das
pop
in
and
push
idiv
pop
fadd
in
cld
inc
mov
or
adc
es
xlat
sub
and
aaa
sbb
xor
pop
sub
lods
pushf
movs
or
adc
xor
sub
cwde
pop
jg
test
jo
jbe
push
(bad)
or
cmp
adc
xor
adc
pop
lds
or
sbb
cmp
mov
mov
lds
add
in
call
pop
or
jo
mov
push
or
adc
sub
pop
and
sub
cmovge
sar
xor
cmp
jl
sub
ret
pop
clc
and
cmp
sbb
cmp
fwait
loope
(bad)
push
repz
lock
loope
les
pop
push
jno
or
push
out
pop
ins
and
cmp
(bad)
xor
adc
mov
cmc
sub
icebp
cli
mov
out
dec
and
imul
push
scas
jne
(bad)
addr16
add
jnp
push
dec
inc
pop
dec
mov
fnstsw
aaa
sub
xchg
cmps
shl
repz
xor
xor
push
shl
push
leave
out
push
adc
and
xlat
div
push
jno
add
daa
add
arpl
sub
idiv
cmp
xchg
mov
mov
mov
jnp
pushf
repz
jbe
movs
sbb
rcl
fisub
addr16
xor
xchg
adc
mov
jle
unpckhps
enter
sub
pop
adc
push
movs
icebp
xor
(bad)
cmp
ror
stos
cmps
adc
push
pop
rcr
arpl
es
pop
push
out
mov
fwait
xor
fldl2t
imul
scas
pop
xchg
pop
cmp
inc
mov
mov
dec
sahf
mov
ret
or
lock
int
aaa
sub
stc
arpl
xchg
daa
popf
mov
rcr
pop
lods
add
(bad)
iret
xchg
sbb
out
jmp
mov
pop
enter
add
std
mov
jle
mov
sub
adc
into
(bad)
jmp
fadd
jne
xchg
call
dec
test
add
dec
fisttp
mov
dec
shl
adc
in
mov
sbb
cmp
push
cmc
(bad)
cmps
add
xor
fisttp
popa
retf
das
push
mov
outs
lock
cmp
cli
inc
inc
fucomi
pop
arpl
dec
xor
push
retf
and
dec
out
lock
dec
xor
dec
fstp
mov
ds
jae
arpl
fld
cmp
call
mov
cmps
add
and
leave
adc
and
aam
and
xor
cmp
mov
jg
aad
cmc
xchg
add
xchg
fcomp
(bad)
les
mov
xor
ds
arpl
out
std
stc
jnp
adc
jbe
mov
or
cmp
test
(bad)
in
cld
fdiv
(bad)
movs
sub
bound
add
jmp
inc
mov
adc
xor
sti
outs
pop
mov
mov
and
push
cwde
sub
inc
or
adc
cmp
retf
inc
cli
or
add
dec
add
outs
jae
add
shr
hlt
stos
and
bound
mov
jae
pop
mov
mov
xor
pop
push
ss
inc
lock
add
clc
(bad)
dec
js
daa
sbb
jge
les
mov
and
rcl
scas
mov
mov
add
test
movs
sub
xchg
inc
cmp
xchg
mov
or
mov
push
cmp
jne
fldl2t
das
sbb
inc
or
cmp
jp
lods
ds
xor
in
fs
mov
add
push
xchg
pop
xor
daa
lahf
xchg
outs
fisubr
out
dec
jmp
add
jo
jg
clc
sub
idiv
cmp
and
loope
pop
adc
rol
cmp
test
cs
clc
add
jmp
xlat
jmp
movs
sub
add
sub
ins
js
fsub
jae
daa
loope
jmp
mov
mov
mov
out
ret
sub
xchg
jne
(bad)
push
jmp
and
sbb
fs
and
pusha
sti
into
rol
sub
xor
jmp
cld
and
pop
mov
inc
add
cmp
jae
cmc
test
and
sbb
sub
xchg
dec
imul
lea
hlt
jno
ret
inc
or
shl
fcmovne
out
adc
mov
inc
outs
inc
ds
jae
ss
mov
xchg
and
sub
pop
push
(bad)
xchg
ds
add
in
mov
dec
push
pop
(bad)
lock
jl
inc
cli
(bad)
(bad)
clc
imul
mov
aam
outs
aad
pop
dec
pop
gs
fstp
xor
retf
scas
pop
dec
or
(bad)
outs
fsub
inc
ds
pushf
sub
leave
or
cwde
pop
outs
scas
adc
mov
push
hlt
inc
jecxz
mov
push
jg
jle
pop
(bad)
fistp
cmc
loopne
pop
pop
(bad)
sub
clc
mov
add
xor
scas
add
add
dec
mov
lods
pop
xchg
cmp
dec
mov
mov
popf
rcl
(bad)
and
hlt
push
in
mov
lahf
jmp
(bad)
ss
fimul
inc
cmp
jg
inc
repz
mov
mov
sub
das
(bad)
mov
sbb
es
or
scas
out
mov
in
retf
mov
fst
not
lds
stos
mov
push
cmp
cmp
jge
dec
jg
add
out
dec
(bad)
pop
loopne
pop
lods
sub
jp
xchg
inc
sar
xor
sbb
iret
pop
sahf
mov
add
sbb
jno
(bad)
daa
or
and
test
in
mov
xor
loop
adc
jnp
mov
(bad)
jne
lods
in
mov
pop
add
repnz
clc
rol
mov
popf
push
in
retf
das
jle
cmc
add
aad
dec
sbb
sti
push
inc
out
pop
jp
rol
xor
xchg
push
das
add
mov
push
push
dec
sbb
or
cmp
inc
and
mov
jmp
(bad)
sbb
mov
xor
pop
jp
mov
out
sub
loop
add
mov
pop
inc
cmp
(bad)
fistp
loop
stos
imul
cmp
movs
dec
cmp
movs
jno
push
jp
fist
jp
mov
ret
pop
das
movs
adc
ror
jge
mov
or
(bad)
xor
or
das
dec
bts
aas
das
fwait
cmp
pop
ja
xor
sar
cs
cmp
std
shl
sbb
sahf
jae
mov
jo
les
or
mov
mov
idiv
loopne
pop
jle
jmp
mov
popf
js
mov
mov
(bad)
pop
xor
mov
dec
cmc
nop
mov
arpl
push
inc
and
lahf
cmp
pop
xor
daa
inc
xor
iret
xchg
cmp
cmp
cwde
jp
push
dec
jmp
sub
cmp
ja
jp
xor
xchg
jae
pop
sub
(bad)
cdq
inc
xchg
mov
clc
pop
cmp
pop
sti
dec
enter
jo
cli
cmp
cmp
pop
cmp
fistp
(bad)
stos
(bad)
sub
and
(bad)
jb
or
cmp
fist
rol
les
test
aaa
fwait
in
loopne
sub
pop
mov
pop
cmp
ja
test
or
jp
ror
pop
fwait
sub
mov
aad
xchg
and
out
mov
inc
mov
pop
ds
jo
stos
je
aaa
lock
mov
addr16
mov
popa
push
jnp
jg
dec
into
(bad)
les
inc
test
xchg
sub
cmp
out
or
mov
(bad)
movs
icebp
cdq
mov
sbb
cmp
fisub
retf
pushf
std
adc
and
das
sbb
scas
adc
sub
cmps
cld
aaa
popa
jg
addr16
js
outs
dec
movs
aaa
daa
and
xor
add
ss
pop
movs
sbb
cld
repz
pop
cmps
mov
mov
mov
ror
enter
jecxz
fidivr
jp
cwde
inc
cmp
mov
jae
cli
aaa
lahf
fadd
repnz
jmp
in
inc
test
mov
sbb
jmp
(bad)
(bad)
(bad)
lahf
ret
(bad)
push
cmp
mov
pop
(bad)
aad
sbb
mov
jbe
push
imul
aas
mov
out
inc
(bad)
scas
dec
int
(bad)
pushf
clc
mov
stc
add
hlt
inc
outs
dec
sbb
pop
or
je
and
mov
outs
neg
pop
int3
andnps
xor
out
(bad)
mov
mov
(bad)
arpl
add
pop
aaa
dec
xor
test
mov
addr16
aaa
outs
mov
stc
ror
adc
(bad)
inc
pop
out
sub
mov
hlt
add
mov
aaa
jns
das
in
cmps
cdq
jecxz
dec
(bad)
loopne
inc
fs
cli
call
cmp
mov
daa
pop
and
cmp
popf
(bad)
jge
jae
mov
mov
jg
dec
pop
int3
arpl
int
jnp
and
addr16
jge
je
ret
jns
mov
vphaddudq
shl
dec
jbe
sub
and
xchg
mov
sbb
and
push
jecxz
sub
mov
test
cli
sub
(bad)
test
pop
(bad)
neg
mov
mov
nop
popf
in
retf
and
jb
sbb
shr
jns
ins
shl
sar
packssdw
(bad)
loopne
pop
cmp
cmp
lods
ins
call
mov
pop
cmp
push
clc
mov
add
jmp
xchg
hlt
or
xor
inc
jne
not
push
aas
mov
repz
mov
inc
xor
cmp
cmps
paddd
cmp
sbb
psubsw
(bad)
retf
sub
adc
std
test
xchg
sbb
pop
mov
aaa
stc
sbb
lds
xchg
and
sub
push
enter
jb
das
mov
pop
pop
dec
sub
push
sub
fbstp
pop
int3
and
pop
(bad)
call
pop
add
jge
das
cmps
arpl
xchg
out
retf
jp
cdq
cli
mov
rcl
dec
(bad)
js
or
mov
adc
add
les
pop
xchg
(bad)
cld
into
mov
cmp
push
(bad)
mov
or
mov
stc
push
jb
or
mov
dec
sub
jnp
ins
mov
ds
(bad)
mul
inc
mov
inc
xchg
cli
stos
ret
mov
xchg
xchg
sar
xor
fcom
and
lahf
cmp
sbb
adc
inc
lods
(bad)
jnp
and
outs
call
daa
mov
scas
adc
mov
xor
push
(bad)
jmp
repz
dec
pop
loopne
pop
add
xchg
push
ret
scas
stos
push
shl
inc
ss
(bad)
cwde
pop
xchg
pusha
jl
xchg
mov
inc
and
mov
out
mov
jmp
inc
pop
sar
in
pop
pop
aaa
jmp
sbb
dec
out
inc
lds
cmc
sbb
push
sbb
dec
jecxz
jmp
ret
cmp
mov
lock
(bad)
sahf
pop
mov
int3
scas
push
daa
pop
sbb
xor
sub
dec
and
ds
cmps
dec
dec
ja
mov
ficom
cmp
xor
aas
add
add
clc
ror
stos
cmp
xor
icebp
ret
fidivr
inc
inc
fcmovnbe
mov
aaa
int3
(bad)
neg
pop
push
rcr
pop
jne
adc
xor
repnz
scas
jl
in
pop
jle
cmp
movs
cmp
icebp
(bad)
xchg
sbb
rcr
(bad)
lock
inc
in
adc
and
(bad)
addr16
(bad)
test
cmps
push
push
(bad)
mov
dec
fwait
sbb
mov
mov
ret
push
adc
xchg
shl
cmp
mov
push
xor
dec
mov
ss
mov
(bad)
(bad)
fwait
push
js
xor
aaa
clc
outs
(bad)
jne
shl
bound
inc
sti
mov
cmps
sbb
mov
push
sub
(bad)
push
ins
mov
fbld
mov
les
adc
fld
dec
mov
bts
bsf
shr
jmp
add
inc
gs
outs
fs
gs
popa
outs
fs
gs
add
mov
mov
pusha
cmp
bt
and
call
add
push
dec
gs
outs
jne
push
gs
jne
arpl
add
loop
(bad)
(bad)
push
cmc
stc
cmp
mov
lea
ja
xchg
not
pop
movsx
jmp
call
add
inc
gs
jb
arpl
fs
jae
add
add
imul
ins
gs
bound
arpl
neg
sub
stc
cmp
pusha
pusha
mov
jmp
pusha
mov
jmp
call
push
mov
pusha
pushf
lods
bt
ror
cmc
add
stc
rol
call
push
mov
xor
outs
stos
js
pop
lds
shr
cmp
add
cmp
xchg
xchg
inc
inc
ja
fcmove
std
cmp
dec
call
xchg
mov
xchg
lods
jp
imul
outs
push
mov
ret
mov
xchg
cli
not
add
and
sbb
retf
leave
enter
cld
pop
jg
sub
sub
fmul
fistp
fidivr
loope
aaa
out
inc
and
scas
adc
(bad)
mov
push
xor
stos
adc
jns
xchg
(bad)
mov
jecxz
cmps
mov
sti
in
add
test
pop
sbb
pop
shl
loop
ins
sub
or
jecxz
xchg
clc
fild
pop
push
cwde
sub
push
retf
sub
cmp
push
test
repz
lock
daa
push
jns
scas
icebp
push
loopne
sbb
xlat
sub
add
mov
fnstcw
mov
inc
push
xchg
clc
xchg
pushf
test
daa
(bad)
daa
push
jl
hlt
xchg
xchg
ja
fsub
pop
add
and
sti
xchg
imul
pop
cmp
mov
stc
idiv
mov
call
push
test
sbb
clc
xor
call
dec
fistp
push
inc
sub
jp
mov
(bad)
outs
ror
mov
movsx
sub
test
push
lea
setno
btr
push
push
neg
aas
inc
mov
cmp
btc
pusha
bt
mov
bswap
mov
push
mov
cmc
test
call
push
lea
call
jmp
cmp
call
push
lea
jne
push
mov
pusha
jmp
pushf
mov
push
mov
mov
jmp
call
(bad)
(bad)
or
shl
outs
fst
mov
pop
pop
mov
les
push
jnp
fild
xchg
adc
jae
cmps
vmovaps
push
xor
mov
into
out
inc
mov
pop
cmp
ss
mov
adc
pop
add
and
jmp
ret
push
loop
test
and
scas
repnz
push
add
and
sub
push
pushf
mov
lea
jmp
push
jmp
or
in
mov
pop
inc
not
dec
out
daa
neg
scas
test
loop
cmp
nop
out
push
retf
ror
sti
adc
out
inc
add
sbb
dec
add
pop
push
dec
ficomp
mov
into
sub
pop
mov
xchg
test
push
in
push
mov
mov
xlat
dec
dec
xchg
mov
push
stos
(bad)
pop
sbb
cld
dec
aaa
popa
sub
jmp
jo
adc
mov
xlat
scas
fs
ror
fstp
repnz
push
mov
aas
pusha
jmp
jmp
fiadd
and
psubw
sub
std
cdq
sub
test
cwde
movs
mov
aaa
and
mov
pop
adc
dec
sahf
mov
mov
add
js
inc
out
es
sar
push
cmc
cdq
sbb
mov
mov
out
add
addr16
pop
inc
repz
mov
sbb
pop
stos
add
sbb
push
sbb
movs
fnstsw
and
fist
stc
dec
add
out
ficomp
popa
retf
add
pop
sahf
inc
jl
repnz
and
adc
or
or
out
sub
push
add
add
adc
into
ss
sbb
or
add
ffreep
fnstenv
fldcw
sub
push
ss
inc
scas
mov
out
sub
mov
and
mov
cwde
pop
jmp
imul
mov
scas
lock
(bad)
dec
lds
fwait
test
loopne
sbb
nop
(bad)
mov
les
mov
imul
sbb
sub
sbb
outs
(bad)
cli
aad
pusha
mov
adc
and
in
call
sahf
out
mov
ss
push
ror
fld
out
in
sbb
xchg
pop
data16
add
push
dec
inc
les
data16
or
shl
ret
loope
mov
pushf
jo
(bad)
xor
push
jmp
inc
movs
repnz
pop
xor
mov
add
add
jmp
adc
je
stos
mov
test
jae
lds
sub
mov
dec
repz
xchg
push
dec
lods
loope
cmp
sbb
mov
push
push
enter
dec
and
adc
mov
pop
mov
jns
jne
mov
mov
mov
not
popa
jne
out
ja
mov
loopne
pop
add
dec
jecxz
xchg
fldcw
push
mov
jp
cdq
leave
outs
fimul
cmc
cmp
loop
in
sar
cmps
cmp
int
imul
cmp
addr16
mov
and
inc
(bad)
cmp
das
fld
rcl
bound
aaa
dec
inc
fist
sbb
mov
pop
push
cmp
clc
gs
cmp
push
mov
push
outs
mov
cmps
call
push
cmp
dec
fmul
inc
clc
xchg
test
jne
or
mov
mov
call
lea
ja
jmp
pushf
lea
je
pusha
pusha
call
mov
lea
jne
jmp
shl
rcl
bt
adc
push
ror
shld
mov
call
lea
call
push
push
lea
jb
pushf
mov
push
ret
fst
sub
icebp
sbb
inc
int3
cdq
xchg
cmps
jmp
mov
mov
adc
(bad)
pop
and
stos
xor
out
imul
inc
sahf
sub
push
inc
jl
cmps
jmp
cmp
iret
ja
adc
scas
std
mov
pop
mov
mov
in
enter
cmp
and
adc
test
push
in
sti
dec
xchg
lods
fisub
mov
push
dec
int
add
xchg
xor
popa
xor
jle
sysret
mov
and
add
sbb
test
(bad)
call
push
fs
repz
loopne
daa
gs
mov
js
sbb
lea
fld
push
or
pop
or
mov
mov
int3
int
jbe
shl
scas
mov
pop
mov
int
mov
in
xor
(bad)
enter
pop
jno
inc
cld
pop
cmp
jp
pusha
ja
ret
pusha
(bad)
jo
sbb
ss
lea
mov
mov
adc
xchg
xchg
test
cmp
dec
aad
sbb
jne
scas
jo
outs
aaa
loope
sub
fs
mov
not
mov
dec
mov
and
call
mov
repnz
pushw
je
icebp
pop
mov
pop
int3
pop
leave
mov
jmp
mov
pop
push
or
arpl
pop
shl
loop
dec
xor
jae
fcomp
ror
scas
in
cmp
test
mov
xor
cld
add
cmc
bound
xor
jmp
rol
push
outs
test
sbb
push
rcr
mov
adc
in
outs
rol
in
xor
lods
push
test
inc
add
inc
ror
lds
loopne
jge
jle
pop
jne
outs
call
jp
dec
enter
retf
movs
cmp
and
cmp
sub
sub
add
fbld
imul
test
adc
cld
mov
mul
mov
data16
push
push
ja
xor
jne
out
add
repnz
sbb
add
xor
std
and
cmps
adc
call
sub
xchg
xlat
bound
je
jge
data16
inc
cmc
cmp
xor
ss
(bad)
push
mov
fisub
push
sbb
pop
retf
push
rol
lds
js
fisub
push
inc
fimul
dec
fsubr
sbb
daa
pop
mov
scas
jmp
ret
(bad)
leave
xor
adc
mov
pop
inc
cld
stc
les
sbb
push
dec
mov
jb
les
adc
stc
cwde
out
popf
js
jo
data16
cmp
xor
scas
inc
cmp
stos
jle
pusha
mov
out
mov
pop
rcl
xor
cli
xor
cmp
retf
into
pop
mov
ror
or
inc
and
mov
dec
dec
inc
inc
xchg
sub
dec
int
or
mov
mov
xor
add
mov
jg
and
sub
mov
sbb
mov
lods
ds
mov
and
push
xor
ins
mov
pop
stc
aam
in
inc
mov
push
(bad)
(bad)
pop
sbb
(bad)
xor
lods
outs
lods
add
xlat
and
push
sti
mov
cs
pop
into
jns
sub
sti
test
mov
ds
sbb
dec
and
rcl
push
pop
ds
retf
fcomp
pop
mov
aas
bound
add
and
ds
push
mov
(bad)
jle
movs
jnp
lods
ja
movs
mov
into
into
mov
mov
push
ror
fisttp
paddusw
push
jge
adc
xor
jg
pop
and
push
into
xlat
xor
lahf
test
fbstp
into
lea
adc
sub
xchg
sbb
xor
sbb
mul
dec
fdivr
scas
jmp
or
xor
add
mov
cmc
jnp
pop
fwait
dec
sub
(bad)
mov
xor
mov
or
jle
test
sbb
aas
fisubr
adc
and
push
fdivr
cwde
jo
pop
ins
ins
out
mov
loope
sub
in
and
or
adc
sbb
lock
push
xor
out
add
inc
hlt
imul
and
sbb
jge
mov
je
sbb
inc
aam
pusha
mov
cdq
mov
adc
mov
mov
sub
lea
jmp
cmp
call
retf
out
pop
mov
lds
mov
add
bound
stos
retf
mov
mov
ds
retf
in
cmp
pop
je
or
stc
loope
aad
test
addr16
adc
xor
test
mov
test
xchg
(bad)
mov
xchg
(bad)
push
jmp
push
mov
pushf
lea
je
pushf
lea
jmp
jmp
sub
sub
call
push
test
xor
and
repnz
dec
repz
mov
cmps
jge
jmp
mov
mov
push
popf
mov
cwde
das
sbb
out
pop
ins
mov
jnp
jecxz
out
inc
mov
adc
cmc
addr16
mov
and
das
outs
xor
inc
in
push
daa
fstp
cmp
sbb
add
jp
mov
(bad)
jecxz
add
and
cwde
retf
cmp
inc
inc
xchg
out
fnstsw
jae
jbe
ins
mov
sti
daa
loopne
pushf
inc
add
mov
cmc
cmp
push
pushf
call
sar
push
inc
mov
clc
clc
bt
bt
cmp
call
push
lock
std
std
add
gs
mov
(bad)
jo
dec
add
(bad)
lods
sub
add
ss
repz
or
and
inc
inc
and
aam
pop
mov
fldcw
adc
test
jle
add
push
inc
jbe
ret
in
xchg
push
push
lods
fs
out
inc
clc
dec
or
xor
jmp
push
(bad)
or
push
clc
stos
jo
pop
inc
mov
sbb
js
outs
push
cli
and
inc
cli
daa
xor
jb
ret
jnp
leave
xchg
inc
into
push
shr
mov
pop
not
or
out
inc
pop
outs
adc
iret
cmp
ret
clc
ss
sbb
dec
jmp
pop
and
mov
mov
and
inc
adc
(bad)
adc
dec
test
push
(bad)
jmp
mov
(bad)
iret
push
loop
sub
sbb
call
push
stos
call
sbb
and
int
clc
push
xor
push
aas
dec
mov
das
ss
aaa
cmp
sar
jg
push
into
xchg
mov
gs
(bad)
cli
pop
dec
(bad)
xor
popa
mov
ret
cmp
pushf
or
push
add
clc
xor
(bad)
push
add
inc
or
and
xchg
xor
pop
inc
lods
ss
sbb
popa
mov
inc
mov
xor
push
mov
loop
fsubr
and
jmp
jle
push
push
ret
cmps
jno
fwait
es
dec
cld
mov
add
mov
jo
rcl
dec
push
sbb
or
pop
cmp
iret
mov
inc
aam
cmps
test
scas
add
mov
icebp
push
sbb
out
test
retf
pushf
xchg
cmp
mov
mov
sub
mov
and
adc
adc
push
retf
push
mov
loope
and
cs
clc
lahf
repnz
or
lock
fsubr
not
test
and
adc
jmp
lods
scas
mov
test
jg
popa
sub
mov
in
mov
stos
(bad)
adc
lods
popa
cmps
pop
retf
ins
mov
fidiv
jecxz
test
jp
icebp
mov
(bad)
mov
pusha
xlat
icebp
xor
push
jae
mov
icebp
sub
out
mov
sar
retf
ret
test
fucom
mov
scas
addr16
cmp
add
cmp
mov
jmp
push
jmp
pushf
push
lea
jne
mov
movzx
mov
mov
bswap
cwde
push
bswap
push
lea
jge
not
lea
push
call
add
dec
je
jo
jo
outs
push
gs
gs
inc
add
lods
repnz
mov
test
mov
push
adc
test
push
rcl
btc
push
bswap
bts
add
push
xchg
shld
bsr
mov
adc
not
adc
mov
inc
shl
mov
stc
clc
pusha
or
mov
lea
je
pushf
clc
pushf
or
push
pushf
lea
je
daa
jbe
movsx
sub
add
adc
xchg
mov
jmp
mov
push
dec
jmp
push
fild
xor
pop
rcl
loop
mov
push
lods
jae
pop
mul
mov
ja
into
pop
loope
repnz
xor
pop
into
xchg
inc
rol
(bad)
repz
dec
rcl
inc
push
enter
stos
lock
out
(bad)
push
pushf
inc
sbb
xchg
xchg
inc
sbb
xchg
jp
(bad)
mov
aas
jmp
cmp
xlat
adc
into
adc
and
mov
cwde
cld
mov
add
push
das
arpl
scas
jecxz
mov
mov
add
gs
je
push
push
add
xor
aad
movs
dec
lock
inc
test
mov
push
sbb
dec
iret
cmps
and
mov
fwait
repnz
sub
cmp
das
icebp
mov
or
cmp
retf
(bad)
sahf
vpsrlvd
and
sbb
ds
inc
push
cdq
stc
sub
mov
mov
test
gs
or
fst
add
mov
dec
mov
push
fnstsw
(bad)
cs
imul
mov
arpl
fldenv
cmp
lea
mov
in
cmps
iret
inc
mov
and
mov
out
cmp
stc
sbb
sub
lock
(bad)
jne
jno
mov
push
cmps
hlt
call
int3
mov
sub
mov
inc
loopne
xchg
lea
cmp
xchg
aas
inc
pop
rcr
stos
(bad)
cli
xchg
and
pop
mov
stc
sbb
add
mov
mov
inc
in
pop
mov
dec
cwde
cmc
rol
inc
in
and
or
mov
mov
xor
inc
xchg
shl
inc
mov
std
enter
jl
int3
mov
(bad)
dec
(bad)
cmp
lock
(bad)
lds
mov
aad
mov
imul
(bad)
jae
ins
mov
dec
les
push
or
stc
inc
adc
fnstenv
mov
pop
or
or
mov
aaa
loop
mov
xor
lea
out
out
or
sbb
pop
aad
mov
aam
push
out
data16
xor
cmps
and
push
mov
jp
mov
ss
bound
cld
mov
fwait
add
test
jns
or
es
cmp
shl
addr16
cmc
cmp
imul
in
ficom
inc
retf
fmul
mov
call
push
ret
push
ins
xchg
mov
mov
neg
push
into
jns
shl
sbb
cmps
arpl
scas
movs
imul
scas
imul
jbe
xchg
and
xor
fsubrp
push
cmc
or
jge
popa
retf
(bad)
cwde
mov
popf
sub
mov
inc
aam
cmps
and
pop
retf
inc
fdiv
cmp
inc
mov
xor
stos
jecxz
cmp
(bad)
adc
addr16
jo
mov
bound
das
dec
les
mov
fild
add
add
pusha
mov
mov
mov
mov
push
lea
jmp
pop
inc
sub
lea
and
inc
push
dec
jb
aad
and
fucom
lahf
es
dec
shl
inc
test
or
mov
sub
adc
mov
xchg
sub
mov
aas
aam
in
adc
jge
sbb
jns
clc
sub
sub
fs
popa
bound
pop
and
dec
fmul
rcl
loope
shl
pusha
mov
enter
push
lds
jno
fs
out
sahf
loopne
mov
dec
push
push
je
sbb
int
mov
dec
xor
imul
cmp
sbb
fnsave
outs
(bad)
push
in
mov
xchg
js
mov
or
add
lea
in
mov
mov
push
cmp
ds
shr
pop
inc
add
xchg
sub
std
sub
push
ror
pop
cs
adc
jne
dec
dec
or
dec
xor
pop
or
mov
call
xchg
call
ret
je
or
loop
sub
mov
fist
lahf
out
cwde
jnp
add
call
iret
aam
dec
ins
sbb
outs
mov
out
cmps
cld
jecxz
stos
inc
inc
fnstcw
outs
jae
outs
jl
xor
into
(bad)
hlt
cmp
ja
or
bound
lahf
xchg
xchg
mov
lods
jl
jno
mov
cwde
and
mov
mov
xor
add
cmp
mov
push
retf
sub
sbb
cmp
sti
rcr
int3
jae
outs
cdq
pop
inc
jge
test
xor
jmp
out
xchg
test
or
pop
xchg
jp
mov
popf
xchg
repnz
xchg
das
and
movs
aaa
or
cmp
enter
out
in
and
sub
ins
scas
mov
sub
dec
or
std
nop
arpl
cli
unpcklps
jnp
mov
lods
aam
adc
js
mov
xlat
dec
(bad)
(bad)
pop
xchg
add
jno
sahf
enter
rcr
mov
bound
shl
mov
mov
push
ret
inc
movs
xchg
idiv
and
icebp
cmp
adc
and
and
lods
sub
dec
rcr
sbb
mov
inc
fwait
cmp
inc
adc
retf
rol
mov
aad
inc
sub
lea
call
mov
pop
daa
aas
pop
pop
fimul
test
shl
add
jg
pop
mov
imul
out
mov
and
fidiv
mov
ja
fmul
sub
add
gs
clc
push
mov
fidivr
xchg
fcomi
dec
cld
fld
outs
adc
pop
or
vaddss
jnp
jbe
stos
jo
ret
test
lods
pusha
mov
call
pusha
cmp
add
pusha
pushf
mov
lea
jne
not
mov
call
pusha
lea
je
pusha
call
add
dec
gs
jo
ins
ins
outs
arpl
repnz
call
rol
pushf
stc
neg
pushf
lea
call
pushf
cmp
call
bsr
neg
xchg
mov
shl
and
stc
ror
add
call
bswap
xchg
pop
bswap
push
xchg
mov
movzx
mov
pusha
push
mov
call
shl
or
cmp
int
and
imul
loop
cmp
stos
out
clc
push
xor
inc
jns
push
xchg
mov
popf
jge
ret
test
in
movs
and
adc
aas
sbb
fidiv
es
shr
mul
fdivr
sub
in
out
rol
mov
cmp
push
push
addr16
fisubr
and
scas
pop
xchg
mov
fcmovne
outs
rcl
in
jmp
inc
push
or
sti
sbb
mov
mov
int3
je
pop
mov
ret
ins
mov
pop
scas
sti
xchg
xchg
loope
mov
daa
aad
dec
push
pusha
call
outs
ins
xor
cs
ins
add
add
je
outs
fs
gs
imul
add
jmp
add
dec
outs
je
jb
gs
gs
fs
imul
outs
bound
inc
ins
ins
outs
arpl
xchg
xchg
push
std
pop
inc
test
sbb
jmp
push
ins
jecxz
and
dec
mov
add
and
fdiv
add
and
inc
(bad)
cmp
mov
mov
push
jmp
inc
fist
pusha
or
or
inc
int
xor
jns
xor
out
xor
mov
out
push
outs
jle
or
jl
lods
jno
cmp
das
adc
sbb
sbb
jnp
push
retf
in
fnstenv
pop
dec
out
test
loop
fdiv
mov
shl
inc
inc
pop
xchg
fcmovnb
aad
mov
(bad)
inc
aad
sub
dec
ficom
dec
mov
and
mov
jmp
addr16
push
repz
xchg
cli
idiv
rol
xchg
mov
xchg
mov
test
cmp
pop
add
loopne
push
nop
push
es
push
cs
imul
pop
add
or
jp
movs
mov
inc
or
js
cmc
dec
cmc
adc
xchg
and
or
or
mov
mov
push
push
outs
jg
add
in
shl
push
jle
ror
adc
pop
lea
sub
mov
xlat
inc
in
pop
fnstsw
or
mov
adc
out
sub
mov
sub
adc
xor
cmp
std
sbb
adc
mov
les
add
inc
jb
popa
je
inc
imul
(bad)
dec
xchg
cld
(bad)
jmp
mov
adc
push
mov
mov
lea
jae
call
add
inc
ins
outs
bound
inc
jb
add
out
shl
retf
mov
call
pushf
mov
lea
jbe
movsx
xadd
rcr
shr
mov
lea
add
not
mov
jmp
add
inc
imul
jae
dec
ins
popa
add
jnp
leave
xchg
pop
push
(bad)
xchg
int
pop
push
outs
loop
add
pop
jne
mov
mov
imul
mov
div
mov
inc
ds
ror
jno
xchg
es
sbb
push
out
dec
loope
repnz
or
ds
push
shl
jmp
in
mov
out
add
bsr
bt
mov
xor
shl
shl
mov
cmc
stc
cmp
push
push
pushf
jmp
lea
call
cmp
jmp
push
lea
je
test
sub
jmp
inc
sub
add
scas
sub
int3
push
push
or
loop
cmp
pop
and
mov
mov
ss
jecxz
rcr
pop
xor
cmp
fstp
cli
sub
mov
sahf
mov
adc
pop
sahf
repz
js
xchg
(bad)
push
jecxz
(bad)
sbb
or
sbb
popf
call
call
push
push
push
pusha
adc
push
lea
jae
push
pushf
call
jo
pusha
pusha
lea
je
push
push
push
pusha
lea
jmp
shr
shl
mov
sbb
add
dec
shrd
cmc
add
cmp
rol
movzx
mov
push
push
cmc
shr
cmc
cmp
jmp
push
call
pop
mov
loope
mov
mov
clc
cld
ror
into
or
mov
aaa
or
pop
mov
mov
mov
inc
adc
lds
dec
stos
mov
dec
call
push
xor
dec
sar
test
push
fcom
fucomp
cmp
adc
cmp
loopne
push
out
shr
jecxz
stc
sbb
ss
sahf
div
inc
fild
shr
iret
fs
xchg
xchg
xchg
mov
ins
sbb
mov
mov
(bad)
aad
push
repz
sub
aas
jmp
popa
jbe
cmp
or
inc
in
mov
jp
mov
xor
mov
jl
or
je
mov
mov
inc
jbe
icebp
mov
mov
mov
xchg
mov
or
ja
inc
push
neg
ret
pop
inc
les
sbb
sub
loope
outs
and
loop
shr
and
push
xlat
pop
or
bound
push
adc
stos
mov
in
nop
cmps
ins
pop
shr
bound
push
int
sbb
mov
inc
inc
lahf
test
fistp
push
fbstp
ficom
mov
sbb
xchg
jmp
ins
adc
cdq
inc
xchg
nop
mov
je
retf
mov
mov
cmc
add
ja
pusha
mov
neg
adc
leave
bound
mov
cmp
cmp
sub
mov
dec
loopne
stos
movs
pop
xor
loopne
(bad)
push
fimul
lahf
or
repnz
pushf
cmp
arpl
xor
pop
dec
loopne
loope
scas
xchg
mov
or
cs
push
fldcw
mov
mov
push
test
popa
pop
push
clc
sub
call
push
ins
sbb
sbb
cld
sbb
shl
dec
jg
push
jecxz
mov
loop
cwde
jae
fs
pop
sbb
les
lods
outs
mov
inc
out
sub
rol
jp
es
mov
push
enter
clc
(bad)
(bad)
jmp
or
dec
cmp
mov
fnsave
xchg
out
js
aam
adc
mov
or
int3
bound
or
lock
scas
(bad)
mov
jae
neg
sbb
(bad)
jbe
jge
dec
fnstcw
ss
pop
jg
adc
cli
cli
ja
dec
retf
(bad)
out
mov
adc
or
mov
ss
out
add
rcr
cmp
and
outs
repz
sbb
lods
ins
pop
frstor
mov
loop
pop
add
lock
pop
push
fcomip
into
sub
(bad)
loope
jo
daa
ror
in
pop
push
(bad)
ret
out
pop
jb
or
cmp
sub
fdiv
out
out
in
pusha
pop
adc
mov
dec
pop
jnp
mov
mov
(bad)
mov
or
jmp
sub
bound
arpl
push
jne
inc
into
jns
adc
push
out
cmp
push
(bad)
pushf
jnp
mov
clc
int3
mov
shr
mul
frstor
stc
sbb
xor
pop
inc
fprem
mov
loopne
dec
fimul
ret
xor
lock
ins
fabs
cmp
cmps
fdivr
inc
pop
je
call
outs
mov
or
sar
inc
inc
xor
fldenv
mul
sbb
pop
xor
sbb
(bad)
pop
xor
inc
sti
xor
and
pushw
mov
int3
(bad)
sub
dec
test
sbb
jl
in
jnp
pop
pop
inc
icebp
sbb
fdivr
sbb
cmp
push
xchg
fxch
ficomp
fisub
push
mov
fs
sub
aas
pop
or
mov
pop
add
jns
mov
ja
and
shl
sub
inc
out
or
jbe
adc
(bad)
adc
sbb
retf
fst
test
stos
pop
sbb
push
pop
movs
fldcw
cdq
add
add
jmp
mov
or
mov
or
pop
mov
fcomi
dec
xchg
(bad)
push
inc
adc
int3
fstp
pop
fisubr
and
and
repz
dec
pop
adc
cmp
dec
pop
jecxz
je
mov
pop
(bad)
repnz
ret
inc
scas
push
bound
pop
retf
pop
add
out
daa
adc
sub
xor
ins
add
xchg
push
loope
je
xor
leave
xor
mov
retf
cmp
pop
dec
mov
pop
cmp
pop
vpconflictq
xchg
sbb
icebp
retf
adc
ss
pushf
pushf
inc
push
push
inc
xor
neg
pusha
clc
xchg
aad
daa
mov
and
neg
adc
rol
mov
cmp
pushf
cmp
mov
test
mov
clc
test
stc
clc
sub
push
call
imul
ins
ins
add
shl
shr
sub
cmc
bt
test
mov
repnz
mov
lea
jne
neg
xor
cmc
mov
call
popf
sti
bound
push
test
std
push
iret
mov
stos
test
push
jne
bound
dec
aas
and
in
out
xor
jg
retf
fidivr
push
test
jle
sbb
stos
loop
xor
repnz
push
enter
jecxz
repnz
xor
inc
jbe
inc
aam
icebp
sbb
sub
xor
(bad)
mov
add
jg
ja
sub
mov
pusha
test
inc
test
dec
mov
mov
or
jl
leave
sub
pop
nop
mov
xchg
clc
jle
or
jge
mov
js
dec
inc
xchg
sbb
loopne
stc
add
clc
pop
mov
pop
push
es
jmp
push
rep
dec
daa
adc
ins
xchg
fidivr
fld
inc
cmp
nop
(bad)
and
mov
ficom
call
add
sub
lahf
sbb
stos
aaa
add
inc
sti
dec
xor
pop
mov
lock
jg
and
mov
icebp
cmp
es
xor
pop
scas
popa
mov
into
inc
in
retf
and
out
out
cmp
ss
and
mov
lea
je
cmc
clc
test
pushf
cmp
push
pushf
jmp
mov
bt
call
add
inc
gs
jae
jb
popa
ins
gs
add
std
push
sub
pop
inc
pusha
push
jno
pop
xor
pushf
dec
cld
sbb
push
or
jl
enter
mov
and
test
data16
sub
fwait
inc
push
cmp
popf
movs
fsub
scas
cmp
(bad)
stos
lds
imul
push
ins
mov
aad
mov
add
inc
xor
mov
fidivr
(bad)
out
or
fwait
jmp
push
repnz
push
mov
pop
push
cli
add
loop
ins
movs
cli
cmp
push
loope
iret
push
clc
into
ja
imul
push
sbb
cmp
fsub
push
jmp
fadd
ins
cmc
je
ror
rol
dec
les
cmp
cmp
mov
or
cs
mov
out
call
(bad)
mov
jle
iret
js
aam
call
pop
jp
(bad)
sbb
fstp
ins
rcr
xchg
gs
xchg
xchg
fisttp
mov
cmp
mov
jb
test
scas
xchg
mov
mov
sar
fild
sbb
sub
loopne
pushf
icebp
rol
js
test
sub
les
sbb
or
jecxz
or
fs
or
fld
lahf
cmc
jmp
mov
stos
ror
jbe
adc
aad
iret
xor
fs
xchg
imul
imul
out
add
xchg
ss
je
or
xchg
rcr
les
pushf
inc
in
stos
ror
test
mov
mov
inc
push
jecxz
cmp
inc
movs
fst
push
xor
cmc
pop
sub
sbb
add
in
mov
sub
or
xor
xchg
mov
add
pop
pop
add
xor
fwait
enter
test
fwait
iret
int
mov
pusha
into
inc
(bad)
dec
sbb
cmp
fst
mov
xor
mov
mov
cmp
cmc
sub
jmp
lea
call
pusha
pushf
pusha
pushf
adc
pushf
jmp
call
mov
push
lea
je
stc
cmp
pushf
mov
lea
je
cmp
pusha
push
clc
cmp
pushf
lea
je
push
mov
push
lea
jmp
add
inc
imul
popa
jb
jne
add
fucomip
lods
push
(bad)
jmp
push
lea
jae
pushf
push
jmp
and
cmp
bt
cmc
add
pusha
push
mov
lea
jmp
pushf
test
mov
lea
je
bt
jmp
add
inc
jb
popa
je
inc
dec
inc
push
arpl
outs
add
and
(bad)
dec
mov
push
(bad)
lea
add
adc
(bad)
jmp
cmp
pusha
pushf
lea
jae
add
mov
movzx
mov
bt
mov
bswap
mov
js
push
cmp
sub
stc
clc
clc
repnz
jmp
push
loop
cmp
loop
loop
inc
or
fistp
cmp
pop
pop
inc
fild
in
add
jb
mov
add
cwde
and
or
nop
rcl
xor
jle
adc
mov
or
cmc
sbb
mov
out
xchg
cdq
lock
lods
xor
mov
fdivr
aaa
cdq
js
or
rcl
test
mov
pop
xchg
xchg
jge
fbstp
fisubr
push
test
adc
mov
cld
pop
ins
imul
pop
add
push
pop
jae
sbb
or
xchg
icebp
repz
mov
xlat
(bad)
and
sub
sar
fadd
adc
cmp
jbe
push
mov
sub
xchg
call
xor
test
xor
xchg
pop
mov
pop
mov
imul
sub
jecxz
jbe
std
in
sbb
into
push
stos
movs
icebp
out
push
mov
pop
enter
add
dec
iret
dec
mov
jmp
jge
mov
jno
dec
movs
or
(bad)
hlt
cmc
inc
mov
mov
pop
nop
out
je
and
mov
adc
and
jns
bound
jns
cs
fcmovnb
addr16
(bad)
mov
popa
pop
mov
mov
fs
mov
push
pop
push
shl
mov
ins
sbb
mov
mov
pop
add
hlt
ss
xchg
push
or
fild
mov
add
pusha
sbb
add
push
retf
arpl
mov
mov
or
cmps
pop
aaa
xor
cmc
push
ja
dec
jmp
aaa
fiadd
ins
pop
into
inc
pushf
lods
inc
lahf
jbe
stos
cmps
std
dec
push
xor
aad
movs
dec
dec
lods
in
adc
add
retf
add
push
add
cdq
js
cmps
imul
add
mov
add
push
or
xor
jecxz
pause
mov
stos
repnz
shr
inc
push
cs
push
int
stc
fisttp
aas
jmp
movs
in
lock
lods
pop
dec
cli
fwait
push
pop
jle
sbb
fidiv
test
jmp
mov
pop
dec
sahf
lds
scas
pop
stc
cmp
push
push
lods
push
retf
daa
mov
add
push
adc
mov
scas
inc
adc
add
mov
retf
ror
dec
clc
fmul
mov
pusha
xchg
(bad)
shr
stos
test
xchg
call
and
scas
enter
and
add
inc
pop
ins
cmp
bound
sub
push
inc
int
mov
in
xor
out
xor
cmps
add
in
xor
lds
shl
mov
pusha
daa
cwde
jmp
mov
cmp
xchg
jg
add
das
retf
clc
aaa
xor
or
push
sahf
jb
add
sub
(bad)
repz
and
jmp
xchg
mov
(bad)
loop
clc
bound
add
adc
lahf
hlt
push
imul
or
xor
mov
dec
ficom
sbb
cmp
popf
repz
fwait
cmp
pop
ja
test
sbb
es
push
inc
push
enter
fld
sub
fld
mov
clc
mov
shl
ficomp
movs
int
push
push
adc
sub
or
(bad)
jmp
in
xchg
adc
cmps
test
test
mov
pop
inc
sbb
in
fs
call
sbb
xlat
stos
sub
ss
sbb
xchg
in
adc
(bad)
push
aam
sub
or
sub
xor
cli
add
outs
sbb
pop
adc
nop
mov
push
test
xchg
(bad)
out
inc
inc
cwde
sub
call
lea
bound
cmp
ds
pop
push
adc
js
sbb
lods
cmp
inc
ss
aaa
xchg
cmp
xor
pop
xchg
and
jge
movs
fmul
pop
shl
daa
in
mov
sbb
aam
inc
loopne
loopne
mov
jp
mov
icebp
sub
xor
sar
or
inc
or
int
loopne
stc
fs
sub
pop
mov
pop
out
xchg
push
or
or
out
repnz
pop
je
push
push
in
(bad)
push
ins
sbb
or
out
ds
cli
cmp
idiv
jmp
stc
dec
sub
sbb
sub
add
ins
popa
(bad)
(bad)
cwde
in
mov
call
test
inc
push
mov
adc
fs
ja
push
push
bt
clc
sub
rcl
lea
cmp
lea
add
clc
bsf
mov
push
mov
cmc
push
repnz
push
pushf
lea
jne
push
pusha
movzx
mov
pusha
lahf
mov
mov
bswap
lahf
lea
mov
mov
pushf
call
push
lea
jae
pushf
test
cmp
pushf
pusha
mov
mov
lea
jae
stc
push
cmp
push
pushf
lea
jl
pushf
lea
ja
dec
setns
inc
not
push
dec
mov
inc
lea
test
xchg
bts
mov
jmp
push
push
jns
jmp
mov
push
xlat
ins
test
mov
pop
cmp
js
mov
adc
pop
jmp
sti
sub
fidivr
jns
lahf
jl
xchg
(bad)
pop
and
sbb
ror
push
repz
push
and
inc
int3
mov
cmp
mov
cmp
cdq
gs
(bad)
jmp
mov
fld
cmp
iret
sub
inc
mov
ret
dec
retf
in
in
sub
lods
mov
inc
mov
xchg
and
repz
enter
sti
call
jg
xor
jo
in
icebp
sub
mov
icebp
xchg
xor
mov
jp
jecxz
fisub
pop
push
test
xor
jae
xlat
sub
mov
add
push
call
inc
fidivr
jno
fwait
test
mov
outs
xor
js
pop
sub
pop
scas
push
fidiv
hlt
inc
dec
adc
and
test
xor
sub
adc
outs
test
mov
test
inc
fisub
(bad)
push
call
push
sub
aam
std
out
fbld
xchg
jnp
mov
aad
xor
(bad)
xchg
(bad)
sbb
mov
rcl
ror
push
ret
pushf
pusha
stos
mov
pushf
push
push
lea
jmp
clc
cmp
shr
push
jmp
jmp
jmp
pushf
pushf
lea
je
jmp
dec
xor
xor
das
shl
pusha
mov
rcr
add
ror
pushf
mov
pushf
cmc
mov
pushf
test
push
mov
lea
je
stc
cmp
sub
stc
test
push
call
sub
push
mov
pushf
lea
jmp
jmp
call
mov
push
pushf
pushf
lea
jmp
mov
jmp
call
not
mov
mov
jmp
jmp
or
call
bsr
mov
rcr
mov
mov
pusha
add
call
jmp
pushf
movzx
clc
xor
push
pushf
push
cmc
ror
mov
pusha
xor
pushf
mov
mov
mov
not
jmp
call
jmp
pushf
mov
mov
pushf
pop
push
push
pop
mov
mov
mov
lea
jmp
mov
repz
pop
pushf
mov
jmp
mov
mov
pushf
mov
call
pushf
mov
pushf
lea
jmp
push
pop
mov
push
mov
lea
jmp
aad
sub
mov
cmp
cmc
bt
sub
call
pusha
neg
mov
or
mov
clc
jmp
not
jmp
pusha
mov
movzx
mov
lea
not
not
call
sub
push
clc
bt
shr
call
pushf
and
mov
mov
push
push
call
push
pop
push
mov
mov
lea
jmp
pusha
repz
pop
jmp
pushf
mov
pushf
pusha
jmp
mov
push
push
pop
mov
lea
jmp
mov
pusha
mov
mov
pushf
push
lea
jmp
mov
pusha
call
call
pusha
pushf
add
mov
jmp
inc
shld
mov
test
sub
call
jmp
call
jmp
jmp
rol
mov
inc
add
mov
pusha
clc
pusha
add
pushf
mov
mov
pushf
pushf
lea
jmp
push
pop
mov
lea
jmp
mov
call
mov
pusha
jmp
pusha
push
mov
jmp
mov
jmp
jmp
pusha
call
push
mov
jmp
dec
mov
pusha
call
pusha
mov
pushf
repz
pop
mov
lea
jno
pushf
mov
jmp
mov
mov
push
call
dec
pushf
clc
sub
mov
clc
push
cmc
mov
cmc
pushf
sub
pushf
mov
mov
mov
mov
mov
lea
jmp
rol
mov
clc
cmc
cmp
xor
call
add
add
lea
jmp
mov
pushf
mov
pusha
push
ret
jmp
pushf
mov
push
mov
push
lea
jmp
mov
mov
pushf
mov
jmp
and
jmp
rcr
aad
cmp
mov
stc
sub
cmc
pushf
cmp
push
add
push
pushf
pop
call
mov
bt
cmp
sub
sub
jp
stc
shr
pushf
mov
mov
pusha
mov
pusha
call
aam
mov
cmc
shl
mov
shl
rcr
not
mov
jmp
jmp
push
pop
pusha
pushf
push
push
lea
jmp
pushf
pushf
pop
mov
lea
jno
push
push
push
pop
mov
lea
jmp
repz
pop
pusha
pusha
call
mov
test
add
pusha
pusha
mov
pushf
lea
jmp
jmp
rol
test
shrd
mov
movzx
movsx
jmp
cmc
push
pushf
add
clc
std
push
popf
pusha
push
lea
jmp
bt
cmc
rol
jmp
mov
mov
mov
push
jmp
call
pushf
mov
pushf
call
call
push
mov
repz
pop
call
pushf
push
repz
pop
pushf
call
xor
mov
push
stc
add
pusha
pushf
pop
jmp
push
push
mov
push
pushf
pop
mov
push
mov
jmp
mov
call
pushf
mov
pusha
lea
jns
pusha
pushf
pop
mov
push
push
pop
push
lea
jmp
mov
push
pushf
lea
jmp
mov
pushf
jmp
not
not
cmc
call
pusha
mov
pusha
push
pop
pushf
lea
jmp
bsf
shl
movzx
inc
movzx
cmc
xor
clc
pusha
ror
rcl
shl
xor
mov
call
bt
mov
sub
jmp
mov
call
cli
int3
mov
call
mov
(bad)
jle
mov
jmp
jmp
mov
call
fistp
jmp
int3
mov
dec
(bad)
mov
(bad)
jns
mov
call
iret
mov
(bad)
mov
sar
jmp
fdivr
jmp
mov
jmp
jmp
sar
call
iret
mov
push
fidivr
jmp
mov
call
sar
dec
enter
leave
mov
(bad)
jns
mov
push
loopne
jmp
fistp
jmp
mov
call
push
retf
mov
jmp
mov
push
fidivr
jmp
mov
jmp
(bad)
mov
jmp
loope
(bad)
cli
int3
mov
call
aad
jmp
jmp
loop
call
mov
inc
leave
mov
jmp
ret
inc
loopne
push
mov
(bad)
inc
mov
inc
loop
jmp
sar
jmp
mov
inc
aad
inc
mov
(bad)
inc
mov
push
(bad)
mov
(bad)
inc
mov
inc
fistp
jmp
mov
call
int
jmp
mov
call
mov
(bad)
cmp
mov
(bad)
cli
int3
mov
(bad)
cli
int3
mov
(bad)
jle
mov
jmp
sar
jmp
mov
call
fidivr
jmp
sar
inc
(bad)
mov
jmp
in
dec
enter
fidivr
push
lds
jmp
mov
inc
sar
call
mov
dec
enter
(bad)
mov
jmp
mov
(bad)
jle
mov
jmp
mov
jmp
sar
call
(bad)
inc
mov
jmp
sar
jmp
mov
call
mov
inc
(bad)
mov
call
mov
(bad)
inc
mov
inc
fdivr
call
fistp
jmp
mov
call
iret
mov
jmp
fdivr
call
int
call
mov
call
ret
mov
call
mov
dec
fdivr
jmp
jmp
fdivr
call
int
jmp
sar
call
fistp
jmp
mov
jmp
mov
jmp
mov
call
(bad)
out
retf
mov
inc
mov
jmp
mov
(bad)
call
retf
mov
(bad)
jns
mov
inc
loop
call
enter
int
jmp
mov
inc
loop
(bad)
jle
mov
inc
mov
call
jmp
mov
call
ret
mov
(bad)
call
aad
inc
(bad)
mov
(bad)
call
(bad)
mov
(bad)
jns
mov
inc
mov
sub
cmp
mov
jmp
bswap
bts
pushf
movzx
mov
and
cmp
sub
dec
mov
cmp
add
push
mov
pusha
push
mov
push
lea
jmp
call
pusha
mov
jmp
call
call
pusha
pushf
pop
pushf
pushf
push
pop
pushf
pushf
mov
lea
jmp
mov
push
jmp
mov
mov
pushf
push
push
lea
jmp
sub
jmp
mov
pushf
lea
jl
pushf
mov
pushf
push
ret
xor
pushf
mov
pushf
pushf
ror
jmp
clc
call
mov
mov
pushf
mov
lea
jmp
pushf
push
pop
push
push
lea
jmp
pushf
pop
mov
jmp
mov
mov
push
jmp
push
mov
mov
pushf
jmp
push
mov
call
mov
mov
pushf
push
push
pop
mov
lea
jmp
pushf
jp
push
push
pop
push
mov
pusha
lea
jmp
mov
mov
pushf
call
jmp
mov
pushf
push
pop
mov
pusha
lea
jmp
pushf
call
sets
cwde
push
mov
jmp
mov
pushf
jmp
test
pushf
test
mov
shr
pusha
pushf
mov
push
push
pushf
pushf
pop
mov
push
pop
mov
push
push
lea
jmp
das
mov
lahf
mov
bt
and
push
popf
jmp
mov
call
jmp
push
mov
push
pop
mov
push
push
lea
jmp
pushf
mov
push
bswap
push
movzx
mov
pushf
push
ret
mov
mov
mov
mov
push
pop
pushf
mov
mov
mov
lea
jmp
mov
call
sub
mov
jmp
mov
call
jmp
jmp
test
mov
sub
pushf
jmp
push
pop
push
lea
jmp
btr
not
neg
adc
sar
clc
xor
movsx
mov
call
push
and
mov
jmp
test
xchg
clc
mov
sub
cmc
cmc
xor
mov
push
push
ror
push
dec
jmp
jmp
jmp
lea
jmp
jmp
jmp
call
mov
pushf
mov
jmp
pushf
mov
mov
jmp
push
pushf
lea
jne
pushf
xor
pop
and
xor
push
mov
push
pusha
mov
pushf
lea
jmp
jmp
mov
call
pusha
mov
jmp
mov
pushf
pop
pushf
push
push
pop
push
lea
jmp
shl
sar
xor
push
dec
bt
btr
bswap
movsx
not
sub
sub
bsr
sub
cmc
cmc
movzx
pushf
rol
dec
movsx
movzx
xor
stc
jmp
movsx
push
movzx
mov
call
test
push
xor
pusha
push
not
cmp
clc
xor
pushf
call
push
mov
jmp
call
div
lea
jbe
pushf
push
mov
mov
pusha
pushf
mov
mov
pushf
pushf
pop
lea
jg
push
push
pushf
push
pop
push
lea
jmp
bsr
shrd
movzx
ror
neg
lea
pushf
stc
clc
mov
mov
jmp
cmp
mov
sbb
clc
mov
bt
mov
jmp
push
mov
mov
pushf
pop
push
mov
pushf
push
pop
push
mov
push
push
lea
jmp
push
jmp
lea
jle
pop
pushf
mov
pusha
push
lea
jmp
pushf
call
push
pusha
mov
mov
mov
jmp
pusha
rol
mov
bt
add
push
lea
jb
mov
jmp
pushf
lea
jns
pushf
push
pop
mov
pusha
mov
lea
jmp
pushf
mov
mov
pushf
call
mov
mov
push
mov
mov
pushf
push
pop
pushf
pushf
pushf
pushf
lea
jmp
push
jmp
pusha
pushf
mov
call
xor
cmp
pushf
cmp
bt
not
mov
test
pushf
xor
pushf
clc
test
push
sub
push
call
mov
mov
mov
lea
jmp
mov
jmp
lea
clc
mov
jmp
pushf
mov
bswap
rcr
xchg
mov
movzx
btc
push
pop
lea
cmc
xchg
push
bswap
rol
lea
mov
setno
rol
pusha
pusha
not
movzx
stc
ror
movzx
bsr
pop
push
lea
xadd
sub
rcr
xadd
sub
mov
rcl
mov
xchg
bt
mov
dec
add
push
xchg
mov
test
add
sets
xor
bt
not
not
pusha
ror
push
pushf
dec
btr
adc
or
shl
neg
neg
rcr
add
pushf
test
bts
movzx
sar
sub
shl
mov
stc
not
stc
stc
clc
jmp
push
pop
pushf
lea
jmp
call
mov
call
pushf
jmp
jmp
push
pop
mov
mov
lea
jmp
pusha
push
jmp
pushf
mov
mov
mov
mov
mov
pusha
lea
jo
push
mov
pusha
pushf
lea
jne
add
mov
clc
push
pushf
and
test
cmp
lea
js
pushf
pusha
pushf
lea
jne
rol
bsr
lea
xor
bswap
mov
setnp
jmp
pushf
call
mov
pusha
push
mov
mov
jmp
call
push
stc
mov
push
push
pushf
call
push
pop
mov
mov
mov
lea
jmp
push
pop
mov
pushf
mov
lea
jmp
pushf
mov
mov
mov
pusha
pushf
lea
jmp
mov
push
mov
pusha
pusha
call
push
jmp
mov
pushf
bswap
repz
pop
pop
lea
clc
mov
movsx
btr
rol
xchg
push
movzx
xchg
ror
movsx
not
movzx
xchg
jmp
push
pusha
mov
setp
call
mov
bt
push
add
push
push
mov
pusha
push
pushf
mov
lea
jmp
push
mov
pushf
lea
jmp
push
pop
push
pusha
lea
jmp
bts
adc
mov
movsx
mov
cmc
call
mov
jmp
bsr
shl
mov
sbb
rol
test
mov
cmp
jbe
pusha
add
push
jmp
mov
pushf
lea
jmp
push
call
cmc
test
pushf
cwde
call
repz
pop
call
rcr
mov
stc
jmp
add
push
mov
push
lea
jmp
test
neg
jmp
add
pushf
jmp
pusha
mov
mov
push
lea
jmp
pusha
bt
sub
jmp
ror
mov
sbb
inc
clc
sub
add
jmp
dec
pusha
xor
pusha
jmp
pushf
push
pop
pusha
lea
jmp
jmp
jmp
push
push
jmp
mov
jmp
jmp
ror
sub
ror
jns
mov
xor
sub
mov
stc
sub
cmp
shr
pushf
pushf
mov
pusha
mov
pushf
pushf
pop
jmp
push
mov
jmp
sub
test
call
stc
pushf
bt
add
push
pushf
push
mov
pushf
lea
jmp
push
call
xadd
rcr
mov
call
mov
call
mov
mov
mov
call
shr
or
bswap
bsr
rdtsc
stc
stc
call
cmc
stc
and
pushf
call
cmp
shl
lea
jl
mov
pusha
mov
lea
jp
pushf
push
pusha
call
cmc
xor
call
bswap
mov
bt
add
pusha
mov
push
lea
jmp
mov
mov
pushf
call
mov
pushf
call
sub
pusha
rcl
xor
btc
push
ror
cmp
neg
pop
ror
xor
or
shld
shld
sub
movzx
rol
sub
jmp
mov
mov
stc
sub
pusha
shr
call
jmp
call
push
pop
push
push
push
lea
jmp
mov
dec
cmc
sub
mov
clc
cwde
mov
test
bt
call
mov
pushf
pushf
mov
pushf
lea
jmp
sub
pusha
jmp
jmp
mov
pusha
call
call
lea
cpuid
bt
test
clc
clc
sub
push
mov
cmp
jmp
jmp
pushf
jmp
call
pusha
pushf
call
mov
jmp
btc
movzx
call
pushf
pop
call
mov
pusha
mov
pusha
pushf
call
mov
jmp
pushf
push
lea
je
cmc
pusha
sub
cmc
xchg
stc
cmc
pusha
mov
mov
cmc
mov
test
call
lea
or
rcl
adc
mov
rcr
sub
mov
xor
or
neg
stc
ror
bsf
or
movsx
sub
mov
lea
setb
dec
pusha
clc
clc
movzx
mov
push
cmp
clc
add
pushf
push
call
pushf
mov
pusha
pushf
lea
jne
stc
dec
or
mov
stc
pusha
stc
and
jmp
aaa
pushf
not
add
movzx
pushf
cmc
pusha
clc
xchg
mov
sub
test
push
cmc
xor
clc
call
pushf
pushf
mov
pushf
jmp
call
not
mov
lahf
movzx
mov
seto
mov
call
call
pushf
xor
pushf
bt
clc
sub
jmp
mov
push
push
lea
jmp
bt
call
mov
push
pusha
call
aas
adc
xor
shr
mov
pusha
bt
push
add
push
pushf
mov
pushf
mov
mov
mov
pushf
lea
jmp
seta
movsx
bswap
rol
mov
cmp
cmc
cmp
bswap
call
dec
not
call
mov
pusha
pusha
push
push
lea
jmp
mov
dec
call
movzx
test
mov
not
or
not
call
mov
call
push
mov
push
mov
push
mov
jmp
pushf
push
pop
pushf
pusha
push
lea
jmp
call
pop
push
mov
lea
jmp
pusha
pushf
mov
mov
mov
call
clc
das
lea
mov
bt
shl
mov
call
mov
jmp
pushf
pop
mov
jmp
sub
push
clc
bt
shl
pushf
push
mov
pushf
mov
pushf
pop
jmp
call
cmp
sub
sub
or
ror
neg
bt
test
sub
stc
not
btr
shl
xor
inc
dec
shrd
test
dec
sub
or
mov
pusha
sub
jl
stc
bt
add
call
mov
pushf
pushf
mov
push
mov
pusha
push
push
pushf
lea
jmp
mov
pushf
push
call
sub
cmc
add
jmp
call
mov
lea
jbe
repz
call
call
mov
pushf
lea
jmp
call
mov
pusha
call
sub
jmp
jmp
pushf
call
shl
movzx
jmp
mov
jmp
aam
mov
shr
stc
call
push
pop
pusha
mov
mov
lea
jmp
add
push
stc
clc
bt
shrd
pushf
mov
pushf
mov
call
mov
pushf
push
mov
push
mov
mov
push
push
call
jmp
stc
stc
test
not
test
test
call
push
mov
call
mov
pushf
lea
jmp
call
rcr
and
rcr
setg
movzx
test
jmp
mov
pusha
mov
mov
jmp
movzx
mov
add
neg
rcr
shld
mov
stc
pusha
not
mov
pusha
jmp
lea
ja
add
push
xadd
inc
lea
inc
lea
lahf
shl
bswap
sub
movzx
bsf
shr
lea
bt
xor
ror
and
shl
neg
test
sub
mov
mov
bswap
lea
pushf
movzx
jmp
pusha
movzx
test
mov
sub
je
lea
test
call
pushf
pushf
pop
jmp
bswap
bswap
movzx
mov
mov
call
aaa
mov
not
and
mov
jmp
mov
mov
mov
jmp
sub
push
cmc
not
stc
call
inc
mov
jmp
call
push
jmp
push
mov
jmp
call
jmp
pushf
pop
call
mov
mov
call
pushf
mov
add
mov
pusha
push
call
mov
jmp
mov
mov
pushf
mov
push
pushf
push
jmp
cld
std
mov
lea
jp
movsx
pushf
mov
std
cld
pusha
rep
cmp
mov
bt
shrd
shrd
mov
mov
pushf
test
pushf
push
popf
pushf
push
mov
pushf
lea
jmp
inc
mov
pushf
add
push
jmp
pusha
push
mov
pushf
push
push
pop
push
lea
jmp
rep
rcr
mov
rcl
dec
lea
mov
cld
push
popf
pusha
pushf
mov
lea
jmp
cmp
clc
clc
cmp
pushf
call
push
push
bt
not
clc
and
pushf
push
mov
pushf
pusha
push
pushf
pop
push
call
pushf
push
pop
pushf
mov
lea
jmp
pusha
repz
pop
jmp
call
push
mov
pushf
push
lea
jmp
jmp
lahf
dec
mov
cmp
push
cmp
clc
sub
jmp
mov
call
mov
push
mov
push
push
call
mov
mov
mov
call
jmp
neg
setne
mov
mov
bt
sub
clc
push
cmc
add
jmp
mov
push
push
push
pop
mov
push
lea
jmp
push
call
repz
pop
mov
call
pushf
bt
clc
sub
cmc
bt
sub
jmp
push
mov
push
pushf
push
lea
jmp
jmp
add
pushf
call
cmc
bt
jmp
pusha
pushf
lea
jne
sub
sar
btr
sbb
xor
movsx
pop
pushf
lea
jmp
setae
call
sar
mov
jmp
and
mov
add
mov
pushf
not
stc
stc
cmp
sub
jb
not
stc
call
cmc
rcl
shl
shld
movzx
call
stc
push
clc
sub
ja
push
push
pusha
add
std
push
cmp
clc
push
popf
mov
mov
pushf
push
lea
jmp
pop
push
mov
push
mov
lea
jmp
mov
pushf
mov
mov
pushf
pushf
push
pop
pushf
mov
mov
lea
jmp
call
pushf
pushf
pop
call
mov
pusha
mov
push
lea
jmp
call
mov
pushf
lea
jmp
mov
pushf
mov
lea
jmp
push
pop
push
push
pusha
pushf
lea
jmp
pushf
lea
stc
pusha
cmc
xor
mov
stc
ror
jmp
mov
call
pusha
pushf
jmp
pusha
pusha
mov
push
pushf
call
sub
pushf
mov
push
push
lea
jmp
pusha
push
mov
push
jmp
cmc
cmc
add
pusha
pusha
cmp
cmp
shld
jmp
call
aas
bt
cdq
mov
btc
setns
pop
adc
adc
cmc
pop
bt
bts
pop
aaa
shl
pop
aaa
cmp
bsr
pop
pushf
stc
mov
daa
bsf
daa
rdtsc
mov
call
xor
cmc
push
add
jle
cmc
not
pusha
lea
pushf
sub
clc
pushf
rol
cmc
test
bt
push
xor
cmp
jmp
push
jmp
cmp
call
mov
mov
mov
push
mov
jmp
push
call
mov
call
sbb
aas
bt
lea
jmp
jmp
mov
call
shl
mov
mov
call
jmp
movzx
lahf
mov
push
mov
push
mov
mov
pusha
push
lea
jmp
sub
push
push
lea
jne
cmc
xor
pusha
xchg
pushf
call
push
cld
cld
pushf
jmp
sub
jmp
mov
mov
mov
push
pushf
push
ret
mov
mov
push
pop
mov
pushf
lea
jmp
pusha
pushf
repz
pop
mov
pusha
mov
call
mov
push
push
mov
pushf
push
ret
mov
dec
bt
test
xor
stc
stc
stc
pushf
cbw
sub
je
test
push
cwde
stc
sub
call
rcl
and
mov
pushf
push
mov
jmp
call
cmc
call
pushf
mov
mov
mov
pushf
lea
jmp
mov
pushf
jmp
mov
push
lea
jo
push
call
clc
ror
call
mov
jmp
mov
push
pushf
mov
call
push
jmp
not
mov
mov
jmp
mov
mov
jmp
mov
pusha
mov
sub
mov
mov
mov
mov
mov
lea
jmp
call
