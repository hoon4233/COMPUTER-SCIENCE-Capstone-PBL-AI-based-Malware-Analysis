import os
import pickle
import numpy as np

MALWARE_PATH = "../06_file_encoder/malware/"
NORMAL_PATH = "../06_file_encoder/normal/"
STOP_POINT = 2

def read_data(file_path):
    global STOP_POINT
    files = [file for file in os.listdir(file_path) if file.endswith(".pickle")]
    data = []
    count = 0
    for file in files:
        with open(file_path + file, 'rb') as f:
            data.append([[pickle.load(f)]])
        count += 1
        if count == STOP_POINT:
            break

    return data, count



def read_data_set():
    global MALWARE_PATH, NORMAL_PATH
    mal_data, len_mal_data = read_data(MALWARE_PATH)
    mal_label = [1 for _ in range(len_mal_data)]
    nor_data, len_nor_data = read_data(NORMAL_PATH)
    nor_label = [0 for _ in range(len_nor_data)]

    return np.asarray(mal_data+nor_data), np.asarray(mal_label+nor_label)



# if __name__=='__main__':
#     data, mal_label = read_data_set()
#     print(data, mal_label)








import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np

class CNN(nn.Module):
    def __init__(self):
        super(CNN, self).__init__()
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=3, kernel_size=(1,5), stride=1, padding=(0,1))
        self.conv2 = nn.Conv2d(in_channels=3, out_channels=10, kernel_size=(1,5), stride=1, padding=(0,1))
        self.fc1 = nn.Linear(10 * 12 * 12, 50)
        self.fc2 = nn.Linear(50, 10)

    def forward(self, x):
        print("연산 전", x.size())
        x = F.relu(self.conv1(x))
        print("conv1 연산 후", x.size())
        # print(x)
        x = F.relu(self.conv2(x))
        print("conv2 연산 후", x.size())
        # x = x.view(-1, 10 * 12 * 12)
        # print("차원 감소 후", x.size())
        # x = F.relu(self.fc1(x))
        # print("fc1 연산 후", x.size())
        # x = self.fc2(x)
        # print("fc2 연산 후", x.size())
        return x

if __name__=='__main__':
    cnn = CNN()
    input = np.zeros((4,1,1,10))
    input = torch.tensor(input, dtype=torch.float)
    print(input.shape)
    output = cnn(input)  # Input Size: (10, 1, 20, 20)