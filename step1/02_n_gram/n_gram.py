import pandas as pd
import os
from collections import defaultdict
import time
import pickle
from nltk.util import ngrams

MALWARE_DATA_PATH = "../data/opcode/malware/"
NORMAL_DATA_PATH = "../data/opcode/normal/"
MALWARE_GRAM_PATH = "./malware/"
NORMAL_GRAM_PATH = "./normal/"
MALWARE_ENCODING_BY_GRAM_PATH = "./malware_encoded/"
NORMAL_ENCODING_BY_GRAM_PATH = "./normal_encoded/"
RESULT_FILE_NAME = "data_analysis.xlsx"
N_OF_GRAMS = 3


def encodingByNgram(file_path, encoded_path, N):
    files = [file for file in os.listdir(file_path) if file.endswith(".txt")]
    count = 0
    for file in files:
        if not file:
            continue
        count += 1
        with open(file_path + file, 'r') as f:
            opcodes = f.readlines()
            n_grams = list(ngrams(opcodes, N))
            with open(encoded_path + file + ".pickle", 'wb') as bf:
                pickle.dump(n_grams, bf)
        # if count == 10 :
        #     break
        if count % 1000 == 0:
            print("Do 1000")


def makeNgramDict(file_path, file_type, gram_path, N):
    result = defaultdict(int)
    files = [file for file in os.listdir(file_path) if file.endswith(".txt")]
    count = 0
    for file in files:
        if not file:
            continue
        count += 1
        with open(file_path + file, 'r') as f:
            file_to_ngram = defaultdict(int)
            opcodes = f.readlines()
            n_grams = ngrams(opcodes, N)
            # print("n_grams :",n_grams)
            for gram in n_grams:
                file_to_ngram[gram] += 1
                result[gram] += 1
            # print("file_to_ngram :",file_to_ngram)
            with open(gram_path + file + ".pickle", 'wb') as bf:
                pickle.dump(file_to_ngram, bf)
        # if count == 10 :
        #     break

    with open(f"meta_data_{file_type}_about_{N}_grams.txt", "w") as f:
        f.write(f"How many kinds of grams for {file_type} : {len(result)}")
    with open(f"the_entire_ngram_{file_type}_about_{N}_grams.pickle", "wb") as f:
        pickle.dump(result, f)


start_time = time.time()
encodingByNgram(MALWARE_DATA_PATH, MALWARE_ENCODING_BY_GRAM_PATH, N_OF_GRAMS)
encodingByNgram(NORMAL_DATA_PATH, NORMAL_ENCODING_BY_GRAM_PATH, N_OF_GRAMS)
# makeNgramDict(MALWARE_DATA_PATH, "Malware", MALWARE_GRAM_PATH, N_OF_GRAMS)
# makeNgramDict(NORMAL_DATA_PATH, "Normal", NORMAL_GRAM_PATH, N_OF_GRAMS)
with open('execution_time.txt', 'a') as f:
    f.write("Execution time :" + str(time.time() - start_time) + "\n")
