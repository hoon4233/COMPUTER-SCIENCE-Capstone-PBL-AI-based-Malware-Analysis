import os
import torch
import torch.nn as nn
import torch.optim as optim
from torch.optim import lr_scheduler
import torch.backends.cudnn as cudnn

import torchvision
import torchvision.transforms as transforms

from models import wide_resnet, MyDataset
import argparse

from util import read_data_set
from collections import Counter
from torchsummary import summary

parser = argparse.ArgumentParser(description='cifar10 classification models')
parser.add_argument('--lr', default=0.1, help='')
parser.add_argument('--resume', default=None, help='')
parser.add_argument('--batch_size', default=128, help='')
parser.add_argument('--num_worker', default=4, help='')
args = parser.parse_args()

device = 'cuda' if torch.cuda.is_available() else 'cpu'

print('==> Preparing data..')
transforms_train = transforms.Compose([
	transforms.ToTensor(),
	transforms.Normalize(0.5, 0.5),
])
transforms_test = transforms.Compose([
	transforms.ToTensor(),
	transforms.Normalize(0.5, 0.5),
])

data, label = read_data_set()
print(data.shape, Counter(label))
dataset = MyDataset(data, label)
train_loader = torch.utils.data.DataLoader(dataset, batch_size=args.batch_size,
	                      shuffle=True, num_workers=args.num_worker)
test_loader = torch.utils.data.DataLoader(dataset, batch_size=100,
	                     shuffle=False, num_workers=args.num_worker)

# there are 10 classes so the dataset name is cifar-10
classes = ('mal', 'nor')

print('==> Making model..')

net = wide_resnet()
net = net.to(device)
# summary(net, (data.shape[1], data.shape[2], data.shape[3]))
# exit()
if device == 'cuda':
	net = torch.nn.DataParallel(net)
	cudnn.benchmark = True

if args.resume is not None:
	checkpoint = torch.load('./save_model/' + args.resume)
	net.load_state_dict(checkpoint['net'])

criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(net.parameters(), lr=0.1,
	                  momentum=0.9, weight_decay=5e-4)
step_lr_scheduler = lr_scheduler.MultiStepLR(optimizer, milestones=[60, 120, 160], gamma=0.2)


def train(epoch):
	net.train()

	train_loss = 0
	correct = 0
	total = 0

	for batch_idx, (inputs, targets) in enumerate(train_loader):
		inputs = inputs.to(device)
		targets = targets.to(device)
		outputs = net(inputs)
		loss = criterion(outputs, targets)

		optimizer.zero_grad()
		loss.backward()
		optimizer.step()

		train_loss += loss.item()
		_, predicted = outputs.max(1)
		total += targets.size(0)
		correct += predicted.eq(targets).sum().item()
		print('epoch : {} [{}/{}]| loss: {:.3f} | acc: {:.3f}'.format(epoch, batch_idx,
			  len(train_loader), train_loss/(batch_idx+1), 100.*correct/total))



def test(epoch, best_acc):
	net.eval()

	test_loss = 0
	correct = 0
	total = 0

	with torch.no_grad():
		for batch_idx, (inputs, targets) in enumerate(test_loader):
			inputs = inputs.to(device)
			targets = targets.to(device)
			outputs = net(inputs)
			loss = criterion(outputs, targets)

			test_loss += loss.item()
			_, predicted = outputs.max(1)
			total += targets.size(0)
			correct += predicted.eq(targets).sum().item()

			print('epoch : {} [{}/{}]| loss: {:.3f} | acc: {:.3f}'.format(epoch, batch_idx,
			  len(test_loader), test_loss/(batch_idx+1), 100 * correct/total))

	acc = 100 * correct / total

	if acc > best_acc:
		print('==> Saving model..')
		state = {
		    'net': net.state_dict(),
		    'acc': acc,
		    'epoch': epoch,
		}
		if not os.path.isdir('save_model'):
		    os.mkdir('save_model')
		torch.save(state, './save_model/ckpt.pth')
		best_acc = acc

	return best_acc


if __name__=='__main__':
	best_acc = 0
	NUM_OF_EPOCH = 1
	if args.resume is None:
		for epoch in range(NUM_OF_EPOCH):
			step_lr_scheduler.step()
			train(epoch)
			best_acc = test(epoch, best_acc)
			print('best test accuracy is ', best_acc)
	else:
		test(epoch=0, best_acc=0)



# import numpy as np
# from collections import Counter
# from tqdm import tqdm
# from matplotlib import pyplot as plt
# from sklearn.metrics import classification_report
#
# from util import read_data_set
# from models import ResNet1D, MyDataset
#
# import torch
# import torch.optim as optim
# from torch.utils.data import Dataset, DataLoader
# from torchsummary import summary
#
# if __name__ == "__main__":
#
#     # make data
#     n_samples = 100
#     n_length = 70000
#     n_channel = 1
#     n_classes = 2
#     data, label = read_data_set()
#     print(data.shape, Counter(label))
#     dataset = MyDataset(data, label)
#     dataloader = DataLoader(dataset, shuffle=True, batch_size=64)
#
#     # make model
#     device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
#     ## change the hyper-parameters for your own data
#     # (n_block, downsample_gap, increasefilter_gap) = (8, 1, 2)
#     # 34 layer (16*2+2): 16, 2, 4
#     # 98 layer (48*2+2): 48, 6, 12
#     model = ResNet1D(
#         in_channels=n_channel,
#         base_filters=128,
#         kernel_size=16,
#         stride=2,
#         n_block=16,
#         groups=32,
#         n_classes=n_classes,
#         downsample_gap=1,
#         increasefilter_gap=2,
#         verbose=False)
#     model.to(device)
#     summary(model, (data.shape[1], data.shape[2]))
#     # exit()
#
#     # train
#     optimizer = optim.Adam(model.parameters(), lr=1e-3)
#     loss_func = torch.nn.CrossEntropyLoss()
#     all_loss = []
#     prog_iter = tqdm(dataloader, desc="Training", leave=False)
#     for batch_idx, batch in enumerate(prog_iter):
#         input_x, input_y = tuple(t.to(device) for t in batch)
#         pred = model(input_x)
#
#         loss = loss_func(pred, input_y)
#         optimizer.zero_grad()
#         loss.backward()
#         optimizer.step()
#
#         all_loss.append(loss.item())
#
#     plt.plot(all_loss)
#
#     # test
#     data_test, label_test = read_data_set()
#     print(data_test.shape, Counter(label_test))
#     dataset_test = MyDataset(data_test, label_test)
#     dataloader_test = DataLoader(dataset_test, batch_size=64, drop_last=False)
#     prog_iter_test = tqdm(dataloader_test, desc="Testing", leave=False)
#     all_pred_prob = []
#     for batch_idx, batch in enumerate(prog_iter_test):
#         input_x, input_y = tuple(t.to(device) for t in batch)
#         pred = model(input_x)
#         all_pred_prob.append(pred.cpu().data.numpy())
#     all_pred_prob = np.concatenate(all_pred_prob)
#     all_pred = np.argmax(all_pred_prob, axis=1)
#     ## classification report
#     print(classification_report(all_pred, label_test))