add
add
add
sub
push
sub
mov
jbe
aad
dec
and
mov
jns
pushf
aaa
xor
sbb
into
cli
xchg
mov
fwait
ins
lds
mov
cmps
test
sub
call
jbe
in
leave
dec
push
pop
call
pop
xchg
or
inc
pop
dec
sub
out
loopne
aaa
xchg
out
cmp
push
jle
xchg
jp
push
xor
dec
hlt
mov
mov
xor
push
in
lods
mov
cmp
hlt
sar
cmps
mov
mov
adc
in
mov
xchg
mov
fdivr
dec
scas
scas
neg
mov
cld
dec
dec
shr
data16
lea
mov
dec
repz
cmp
js
ins
add
mov
cwde
stos
call
or
sbb
jecxz
lock
sbb
xor
cld
fstp
into
sub
adc
push
cli
aam
jmp
sub
jno
call
inc
fild
fist
and
push
daa
push
ds
repnz
loope
gs
push
aas
sub
cli
mov
lds
mov
js
jns
cmps
cwde
sub
scas
repnz
push
mov
jp
cmp
adc
pop
rcl
je
outs
push
aaa
add
fnsetpm(287
mov
jmp
xchg
bound
inc
xor
out
rcr
xchg
retf
add
cmp
(bad)
pop
lods
out
xchg
fcmovbe
icebp
jmp
and
adc
mov
icebp
movs
bound
aam
in
(bad)
sbb
int
adc
loop
cwde
(bad)
jno
loop
mov
xor
cmp
test
cdq
sub
mov
(bad)
in
idiv
mov
int
sbb
jbe
cwde
add
out
push
jns
push
mov
add
loop
jns
in
xlat
push
cdq
fmul
dec
jae
push
xchg
and
fcom
mov
stc
retf
add
xor
test
stos
fwait
jecxz
dec
mov
fldl2t
stos
push
out
aad
fild
(bad)
repnz
xchg
daa
dec
jnp
fs
cmps
ror
test
push
push
jecxz
push
cwde
loope
jge
popf
out
into
dec
inc
jl
sbb
xchg
bound
pushf
jbe
dec
call
outs
cdq
pop
mov
inc
sub
and
or
lahf
aaa
or
push
ins
int3
cmps
dec
sbb
sbb
addr16
out
lea
cli
lock
add
test
push
jo
push
xchg
(bad)
inc
aaa
cmp
(bad)
and
jle
add
scas
jge
sub
ja
loope
call
fldenv
push
push
outs
pop
or
jns
in
fisub
pop
test
imul
or
stc
push
mov
jp
popf
(bad)
hlt
adc
sbb
cdq
and
xor
push
stc
fucom
lahf
movs
inc
(bad)
out
ins
lock
movs
test
ins
outs
push
cmp
data16
inc
and
push
push
stos
dec
dec
aaa
les
adc
and
mov
fldlg2
add
xor
stc
jns
or
neg
add
xor
add
rcl
or
cdq
mov
into
lds
jne
cmp
cmp
and
sub
ficom
sbb
int
cmp
out
dec
clc
jecxz
test
mov
push
mov
or
pop
xchg
fidivr
cmc
pop
add
dec
fidiv
adc
add
jbe
xor
mov
dec
pop
jae
cdq
nop
add
cld
or
cmp
adc
mov
popa
mov
push
imul
clc
mov
jnp
ret
push
jo
retf
push
jno
xchg
sub
(bad)
and
nop
clc
jg
xchg
mov
or
int
mov
inc
mov
lods
ja
ds
gs
fimul
es
dec
fcom
mov
out
add
fcomp
cmp
sahf
mov
in
es
pusha
fs
loope
hlt
xchg
add
xchg
xchg
push
not
add
scas
aaa
imul
stos
loope
aad
gs
or
fld
pop
test
push
(bad)
xchg
push
adc
pop
stos
(bad)
lds
mov
sub
add
add
ret
cmp
stos
inc
adc
inc
ror
mov
in
loopne
jl
dec
bound
push
pop
jae
mov
ins
jl
lock
sbb
mov
out
cmp
les
add
mov
jmp
std
sbb
mov
jb
mov
rcr
fs
sbb
test
or
(bad)
call
cmp
test
shl
ins
je
fidiv
dec
add
mov
test
jo
xor
fisttp
outs
push
ins
pop
shl
mov
stc
ins
xchg
(bad)
gs
and
aas
sbb
(bad)
ud2
add
xor
out
and
js
fstp
add
aad
jl
stc
mov
push
sub
add
ret
leave
aaa
(bad)
cmp
(bad)
fnstcw
cli
xor
or
mov
xor
jp
xchg
push
xchg
pop
cwde
or
add
shl
jne
mov
ficomp
aas
cdq
data16
push
jno
push
jno
cmps
pushf
gs
or
scas
adc
pop
push
sbb
xchg
in
stc
mov
inc
int
push
loopne
pop
mov
and
add
je
mov
mov
jge
(bad)
in
add
arpl
cwde
xor
sbb
aas
pop
cmp
loop
es
out
sbb
and
cmp
jmp
push
mov
xor
mov
push
dec
lods
jle
rcl
pop
lods
xchg
mov
inc
out
jnp
(bad)
xor
sub
and
push
das
pop
xor
adc
add
jb
cs
mov
in
push
das
inc
or
repnz
cmp
ror
loopne
xchg
mov
pop
add
shl
sbb
bound
push
fmul
call
sar
std
dec
pop
aad
mov
pop
mov
jmp
out
syscall
scas
mov
push
inc
jns
jmp
outs
in
jmp
dec
dec
jge
xor
add
movs
jne
aas
lock
mov
out
scas
jmp
jp
xor
jne
es
add
in
pushf
js
sbb
or
jns
mov
pop
sbb
mov
pop
jle
mov
mov
xor
cmp
test
push
mov
pop
jecxz
lea
push
jge
xchg
popa
cld
sbb
inc
mov
pop
lds
xchg
sar
out
div
test
out
pusha
inc
xlat
push
push
cmc
cwde
add
clc
daa
inc
push
sbb
test
ja
out
pusha
lea
das
leave
push
dec
or
xchg
mov
pop
cld
(bad)
cmc
mov
bound
mov
movs
clc
mov
jg
mov
(bad)
mov
add
fwait
into
in
pop
lea
mov
sbb
fs
js
(bad)
push
xchg
ffreep
test
jo
add
mov
lods
shr
xchg
mov
xor
push
(bad)
addr16
mov
or
jmp
icebp
in
push
enter
cmp
popf
cwde
push
mov
push
test
and
aaa
xchg
sub
sub
dec
sbb
cmp
sub
push
aad
xchg
shr
ficom
cmp
arpl
pop
mov
dec
or
lock
push
lds
rcr
pop
enter
push
sbb
mov
push
aas
mov
cld
mov
ins
(bad)
mov
and
mov
jp
xlat
mov
mov
xchg
cmp
out
adc
repz
inc
repnz
pop
adc
shr
inc
ins
mov
mov
retf
fimul
cmc
xchg
outs
add
mov
iret
mov
(bad)
pushf
cmc
(bad)
adc
test
jg
out
test
mov
jl
cmps
xchg
jae
jmp
sbb
rcl
sbb
lods
pop
mov
aas
out
fcom
xchg
fild
jne
test
clc
mov
imul
sub
jnp
or
add
cmp
stc
mov
dec
jle
mov
adc
adc
mov
pop
cmp
stos
aaa
inc
cmp
loopne
adc
stos
retf
xor
repnz
jnp
cmps
cmps
cdq
loopne
clc
jmp
fnstcw
push
xor
xchg
mov
push
fucomip
sbb
outs
stos
inc
sar
add
into
mov
xchg
out
aaa
xchg
adc
add
inc
mov
in
mov
inc
jbe
xchg
(bad)
dec
adc
jbe
xchg
inc
mov
ret
in
or
push
rol
xor
jge
pushf
cwde
mov
xchg
gs
inc
popa
shl
movs
pop
hlt
addr16
xchg
das
lock
jle
scas
push
test
and
mov
ds
cmp
sbb
inc
hlt
call
jecxz
scas
into
mov
mov
add
addr16
test
jp
push
jmp
dec
mov
loope
xchg
mov
int3
xchg
mov
push
jno
or
inc
xor
and
cwde
or
sbb
(bad)
xchg
out
sbb
cmp
cwde
sbb
ja
rcr
jo
cmps
or
mov
nop
xor
cmp
inc
pop
dec
fdivr
sbb
inc
push
push
test
repz
clc
lds
sbb
mov
loop
push
xor
xor
xchg
shl
mov
mov
ja
cdq
push
add
pop
je
sub
nop
jnp
pop
ret
sbb
mov
retf
jge
jp
(bad)
js
ss
imul
jmp
js
and
pop
inc
mov
jp
mov
xchg
push
add
add
enter
ja
xchg
loope
(bad)
clc
jmp
push
dec
inc
ret
xchg
mov
xchg
add
rcl
or
pop
out
cmps
add
jnp
sbb
ja
dec
(bad)
adc
pop
pop
test
mov
out
xchg
aaa
xchg
icebp
add
jl
sar
fdivp
push
shl
push
push
imul
dec
or
push
cs
inc
les
bound
sti
inc
stos
and
fild
ret
loope
arpl
sub
inc
out
pop
mov
scas
lahf
push
xlat
push
push
repz
rol
fadd
mov
mov
mov
mov
mov
mov
sbb
ret
xor
inc
pop
xor
jb
adc
push
fimul
ss
shr
xchg
push
outs
out
pop
std
test
adc
ins
xchg
add
push
repz
imul
mov
dec
mov
sti
inc
push
or
jmp
loope
nop
xor
imul
(bad)
loop
pushf
jnp
nop
arpl
dec
stos
int3
movs
rcr
jbe
xor
jecxz
hlt
jne
mov
mov
sbb
mov
test
scas
(bad)
jmp
jmp
mov
xchg
xlat
in
push
pop
out
loopne
mov
jns
frstor
mov
fcomp
pop
mov
xchg
sbb
sub
mov
cmp
cmp
inc
enter
jp
xchg
mov
and
out
jge
es
dec
xchg
adc
mov
xor
loop
sbb
lea
iret
aaa
icebp
add
scas
xchg
pop
xchg
inc
mov
jbe
sub
mov
sbb
ret
ss
stc
cmps
jmp
ficom
sti
sub
aam
cs
shr
cwde
mov
fsubr
adc
neg
ins
inc
sbb
int
test
sbb
pop
jge
dec
lahf
popa
mov
rcr
call
inc
jp
ja
adc
jmp
adc
or
and
or
mov
cmp
xchg
push
outs
mov
out
retf
mov
neg
xor
mov
loop
dec
out
test
icebp
sti
pop
jle
or
xor
sub
mov
test
add
sub
and
outs
push
mov
fdiv
sbb
pop
lods
loop
mov
mov
dec
ret
and
xchg
xchg
cli
mov
(bad)
repz
mov
add
xlat
aaa
lea
test
call
mov
sbb
call
call
not
sbb
cmps
outs
and
cmps
vpaddb
jbe
push
mov
shl
cmps
shr
xor
in
cwde
call
inc
dec
dec
nop
cmp
push
popf
outs
mov
ins
cld
imul
xchg
inc
inc
xchg
and
mov
dec
pusha
ds
mov
lods
int3
dec
es
pop
lds
xchg
in
xor
(bad)
adc
(bad)
and
loop
out
jnp
mov
dec
stos
mov
add
div
int3
lds
pop
rol
sti
fcom
fnstenv
pop
sbb
call
aas
(bad)
out
(bad)
mov
push
mov
(bad)
and
lahf
imul
adc
adc
aad
call
int3
icebp
adc
xor
mov
push
out
xchg
push
xor
jbe
xor
cmp
mov
std
or
sub
outs
movs
in
mov
test
inc
in
sub
pop
mov
inc
hlt
sub
mov
ror
add
test
mov
adc
xchg
push
add
stos
loop
sbb
pop
retf
or
loop
xor
pop
pushf
jo
aas
enter
and
or
out
retf
xchg
push
or
loop
xor
cmc
mov
pop
cmp
push
int3
es
cli
xor
addr16
add
in
out
mov
pop
sahf
mov
bnd
push
fiadd
fwait
xor
jecxz
sub
push
xchg
cdq
aaa
aam
gs
lfs
ja
and
or
mov
enter
divps
int
mov
xlat
or
pop
jmp
or
gs
pop
mov
mov
(bad)
jge
sbb
mov
dec
or
ss
fstp
sub
sub
jns
jo
out
cmp
xchg
add
outs
add
dec
xchg
stos
pop
pop
mov
test
push
test
loop
lock
inc
dec
and
je
xchg
jmp
and
push
mov
daa
inc
ficomp
out
jmp
je
out
mov
xchg
add
xchg
in
repz
dec
push
ds
mov
cmp
or
and
fidivr
mov
xor
test
ins
pop
xchg
mov
repnz
jno
mov
mov
add
xchg
out
mov
cmc
xor
outs
popf
mov
mov
sbb
or
push
sti
loopne
icebp
in
scas
or
lds
aad
and
retf
lods
icebp
xor
jne
mov
push
movs
popa
sub
jecxz
xor
rcr
lahf
leave
push
push
cwde
or
pop
icebp
sub
fisttp
addr16
mov
leave
jmp
stos
ds
and
or
clc
sub
cmp
jl
out
rcr
jb
cld
int3
(bad)
jl
lods
cmp
aaa
lods
call
scas
dec
push
je
dec
lahf
mov
lods
xchg
xor
mov
daa
cmp
ja
mul
outs
push
xchg
stos
jo
enter
sub
call
shl
and
pop
shl
cmc
cmp
mov
push
(bad)
in
xor
mov
xchg
arpl
jmp
mov
and
fistp
and
pusha
retf
out
sahf
and
or
aaa
mov
call
in
and
xlat
inc
add
loopne
sbb
lods
ja
and
mov
xor
rcl
addr16
push
mov
or
pop
fadd
dec
es
aas
cmp
movs
pop
ret
mov
xchg
or
jo
push
sbb
xchg
imul
or
clc
fistp
cmp
jbe
imul
mov
mov
retf
cmp
mov
retf
(bad)
mov
inc
push
int3
sbb
and
ins
or
mov
xor
mov
pop
bound
movs
or
mov
cmc
inc
sub
iret
sub
cmp
sub
dec
mov
jp
nop
neg
pop
mov
jmp
fwait
cwde
iret
sbb
inc
call
xchg
loop
pop
adc
push
(bad)
fidiv
push
nop
cmp
and
add
nop
xchg
inc
adc
or
stc
call
cmp
cmp
sub
(bad)
aad
mov
mov
and
out
out
repz
or
mov
xor
mov
ins
int3
(bad)
inc
push
or
xchg
in
sbb
ret
je
cmps
stc
inc
pusha
loop
(bad)
scas
sub
push
sub
mov
mov
mov
xchg
cmp
cld
shr
retf
in
adc
out
adc
push
pop
pop
and
test
xor
call
jp
outs
loope
cdq
mov
mov
push
pusha
loopne
or
sub
xor
xchg
in
mov
loop
cmp
cmp
mov
pop
daa
mov
sub
test
xchg
mov
repz
je
mov
pop
inc
push
jmp
pop
movlps
js
retf
push
gs
cmc
imul
pop
ret
sub
mov
clc
xor
push
int3
pusha
(bad)
dec
pop
out
mov
inc
jp
movs
push
(bad)
movs
pop
pop
inc
rcr
je
sbb
das
xchg
adc
mov
mov
and
and
(bad)
imul
fcomp
repz
stos
sub
xchg
gs
outs
popa
and
add
mov
(bad)
call
dec
fild
inc
sbb
push
jmp
mov
neg
ror
add
jno
pop
mov
cld
jae
xchg
push
(bad)
xlat
cmp
add
ret
xchg
mov
xchg
pop
dec
pop
outs
sbb
fadd
arpl
retf
xchg
sbb
hlt
lods
add
sbb
sbb
jg
imul
jae
ja
adc
enter
dec
icebp
lods
pop
pop
inc
jp
imul
(bad)
movs
mov
adc
(bad)
cmc
lea
repnz
xchg
pop
mov
cwde
pop
mov
pop
jmp
sar
cdq
mov
mov
jmp
inc
pop
and
int3
fisttp
fisubr
mov
push
inc
jmp
imul
jns
jno
pop
lods
cli
std
(bad)
call
cld
into
xchg
movs
pusha
icebp
sar
jle
(bad)
leave
imul
(bad)
ja
aaa
rcr
inc
out
inc
and
cmp
cs
inc
(bad)
mov
jno
out
iret
mov
stos
inc
mov
inc
test
jmp
les
rep
cmp
(bad)
mov
sbb
push
stc
dec
fwait
imul
pop
sar
xchg
mov
and
xchg
cmp
cmp
cmp
bound
dec
ss
mov
push
retf
out
lods
fidivr
adc
test
sahf
and
cld
jb
mov
dec
sti
dec
(bad)
mov
out
aas
xchg
xor
aas
lods
daa
shl
or
inc
mov
xor
xor
cdq
jmp
add
sbb
std
nop
cmps
hlt
fwait
retf
jg
gs
xor
imul
test
add
popf
or
and
sbb
int3
mov
dec
mov
stos
sahf
xchg
sbb
jnp
in
and
xor
xor
cmp
popa
popa
mov
sub
out
xchg
and
int
outs
mov
outs
dec
add
jmp
fcomp
cmp
aas
(bad)
lods
aaa
mov
ja
mov
add
cmp
mov
or
mov
out
(bad)
lds
push
fdivr
dec
pusha
jge
xchg
aad
inc
imul
sar
popf
aam
cs
std
xor
cwde
mov
retf
sbb
push
mov
iret
and
leave
pop
sub
clc
and
popf
jmp
loop
retf
adc
adc
sub
mov
ss
enter
div
test
pcmpgtd
(bad)
mov
loope
dec
test
fisub
(bad)
fcmovne
pusha
push
ret
dec
pop
mov
pop
cwde
cmp
scas
hlt
lea
cli
mov
dec
mov
pop
xchg
scas
pop
cmp
jl
mov
pop
vpsrlw
ret
sub
jb
add
cmp
repnz
xchg
nop
mov
movs
sub
ret
and
and
aad
movsx
cmp
ret
adc
xchg
ins
adc
pushf
int3
fs
mov
cmps
hlt
xchg
in
or
adc
ret
in
fs
jae
xchg
jl
inc
jne
or
add
push
mov
into
push
movs
and
mov
jb
lods
mov
fs
std
mov
mov
xchg
stos
and
test
and
xor
mov
xchg
lahf
das
loope
sub
sbb
mov
stos
fcomp
sbb
inc
cld
out
jns
sub
sahf
mov
jbe
repz
js
cmc
retf
(bad)
aas
pop
inc
adc
les
xor
inc
sbb
and
push
dec
sub
lea
(bad)
cli
cmp
pop
add
sub
xchg
call
mov
cmps
push
or
mov
lahf
sbb
adc
(bad)
loope
leave
ds
scas
adc
xor
jne
(bad)
or
or
scas
ja
repnz
sbb
jae
movs
sub
mov
fld
movs
add
mov
aaa
jg
pop
test
add
add
adc
or
xchg
pop
cmp
popa
mov
dec
push
sub
mov
mov
fst
mov
mov
sub
sub
sub
mov
cdq
fbstp
clc
sub
jg
repnz
xor
mov
fs
(bad)
hlt
pop
add
out
and
lds
xor
int3
sahf
(bad)
mov
ja
xchg
ss
jb
out
inc
xor
dec
jp
jge
mov
mov
xchg
repz
in
(bad)
sahf
dec
jne
pop
mov
sub
xor
syscall
ds
in
mov
pop
hlt
xchg
imul
in
mov
mov
or
fs
ja
test
loop
mov
jmp
mov
xchg
mov
sysexit
mov
ficom
mov
ret
xchg
add
or
jge
xchg
cmps
lahf
lahf
inc
dec
pop
adc
rol
push
inc
movs
loopne
mov
fwait
dec
jb
clc
loopne
lods
icebp
adc
push
aam
sub
movs
or
add
jge
mov
jno
jbe
repz
cs
(bad)
repz
cld
adc
popa
enter
and
(bad)
push
jae
outs
add
outs
ret
fs
js
call
or
mov
repnz
xor
popf
and
xchg
jp
cmp
push
call
lea
(bad)
adc
ret
outs
mov
jmp
pop
aaa
movs
add
movs
or
add
pop
pop
call
adc
stos
mov
in
sub
test
rcr
jae
rcr
fadd
lahf
sub
dec
enter
mov
arpl
add
push
lahf
adc
push
xor
cmp
push
pop
clc
test
lods
(bad)
dec
sub
arpl
ins
repz
lods
or
push
push
gs
push
add
(bad)
call
ins
mov
and
sti
mov
mov
push
out
(bad)
pusha
iret
mov
(bad)
mov
mov
sahf
iret
or
mov
and
add
push
mov
ret
sbb
sub
push
add
xchg
mov
jmp
or
inc
aad
mov
jno
mov
aam
dec
inc
pop
mov
stos
mov
pop
icebp
lds
(bad)
sbb
and
bound
shr
adc
retf
mov
pop
jmp
test
fistp
rcr
js
sub
fmul
in
sbb
xor
sbb
ja
test
xor
mov
mov
test
leave
fild
out
(bad)
ficomp
rcl
mov
push
mov
out
lea
sar
outs
cs
cld
xchg
nop
ret
ds
fcomp
cmp
cmp
les
inc
jmp
addr16
int
popf
scas
cdq
lds
xchg
xchg
sub
jle
mov
inc
xchg
pushf
inc
pusha
mov
xor
adc
pop
cmp
pop
popf
std
xchg
xchg
fld
sahf
(bad)
jmp
js
shr
adc
ret
pop
js
out
cmc
push
loope
cmps
mov
pop
hlt
sub
mov
enter
and
mov
inc
jmp
into
or
jle
sahf
push
push
in
jb
push
icebp
jnp
in
shl
shl
sahf
fmul
jno
xchg
add
ret
(bad)
lds
inc
dec
ins
rcr
dec
jmp
and
ja
loope
push
xchg
cmps
retf
cld
jns
test
int
mov
mov
cmc
mov
test
arpl
add
adc
dec
cmps
xchg
jno
push
stc
jg
cli
mov
sbb
or
mov
sbb
shl
loopne
push
ja
mov
push
sti
movs
xor
mov
jmp
sbb
in
sbb
and
(bad)
mov
mov
jmp
or
jl
jbe
cmps
mov
dec
mov
ret
pop
daa
aaa
pop
inc
adc
push
xchg
or
xor
(bad)
mov
sbb
and
add
or
xchg
adc
gs
adc
inc
fnsave
stc
lods
pop
xchg
in
ja
mov
or
mov
arpl
or
or
mov
cmp
mov
xchg
and
enter
je
les
lahf
push
jle
jne
xor
cmp
aas
clc
push
jecxz
mov
push
scas
in
dec
nop
push
mov
ins
jecxz
shr
stc
mov
adc
mov
pop
(bad)
movs
mul
ja
ficomp
xchg
repnz
rol
and
dec
in
dec
fadd
sti
in
xor
mov
popa
inc
and
stos
cmp
mov
xchg
test
inc
xor
xchg
movs
lea
sub
ss
clc
xor
xlat
xchg
inc
push
jb
push
shl
and
adc
mov
inc
xchg
call
div
pusha
adc
mov
push
outs
or
and
test
adc
sbb
and
jo
enter
icebp
mov
aad
popa
fild
cs
ret
rcl
repz
mov
fdecstp
mov
icebp
inc
xor
inc
dec
stos
fchs
cwde
js
dec
xchg
fimul
xchg
mov
jnp
stos
sub
jecxz
sub
dec
pop
mov
fild
out
sub
cmp
arpl
fwait
ds
cld
pop
daa
pcmpgtw
mov
mov
cmps
adc
into
jge
mov
sub
dec
pusha
push
les
bound
inc
pusha
stos
inc
pop
mov
pop
cmps
das
pusha
std
mov
jg
je
rcr
jge
shl
xchg
icebp
add
iret
pushf
jp
adc
std
dec
xlat
pop
sahf
xchg
push
jo
mov
lods
das
inc
push
std
mov
cs
mov
bsf
xor
jle
adc
rcl
lods
mov
gs
icebp
jnp
and
mov
sar
cs
mov
movs
add
lahf
and
fwait
add
(bad)
loope
mov
jg
int
mov
xchg
cmps
dec
dec
jns
adc
test
aam
pop
das
and
ins
jmp
cwde
jecxz
add
cmp
push
stos
jg
in
cmp
test
jb
mov
mov
and
add
jp
hlt
inc
popa
cmp
sti
mov
ds
and
aad
loopne
fadd
in
dec
fs
sbb
jmp
aad
jbe
xchg
test
retf
or
repz
fld
and
mov
out
cmp
fwait
mov
lock
loopne
jge
aaa
sbb
jnp
inc
scas
xor
push
popf
xor
jmp
(bad)
xchg
arpl
jle
test
ret
jmp
sbb
mov
jmp
mov
push
ret
or
and
push
mov
xchg
repz
mov
fist
cdq
adc
cmp
or
(bad)
mul
mov
or
mov
es
mov
sbb
adc
pop
(bad)
sub
mov
and
mov
jl
cmp
xchg
fsubr
sub
sti
fdivr
or
fisubr
stos
and
add
dec
pop
dec
(bad)
inc
fdiv
hlt
sbb
nop
not
jae
repz
mul
sbb
xor
lea
mov
jne
jg
dec
out
add
mov
inc
dec
nop
dec
ret
or
xor
jne
sub
dec
cli
aaa
sub
mov
mov
and
sbb
out
call
jnp
cmp
loopne
loop
sti
nop
jp
jp
lods
cdq
sbb
mov
hlt
adc
cmp
sti
rol
mov
cdq
into
aam
inc
loopne
jge
sub
pop
mov
std
xor
dec
mov
movs
fsub
mov
adc
cmps
push
sti
inc
jge
popf
cmp
jp
cli
jbe
call
in
bound
js
lods
nop
push
(bad)
(bad)
lock
pop
xchg
mov
sub
addr16
adc
mov
sbb
mov
dec
aas
(bad)
leave
loopne
mov
aaa
cmp
mov
jae
pushf
sub
sub
les
adc
add
repnz
pop
aam
and
cmc
mov
cmps
das
rcr
pop
push
loope
jmp
imul
dec
adc
add
daa
jbe
jnp
out
add
(bad)
push
add
repnz
aaa
sahf
or
xchg
jg
pop
iret
fs
icebp
hlt
mul
iret
pop
xchg
sub
pop
jns
jnp
mul
pop
dec
push
cmc
pop
jge
cwde
jmp
das
push
push
iret
sbb
int3
fcmovnu
xor
xor
mov
addr16
addr16
add
stos
cmp
sub
xchg
mov
bound
loope
dec
cmp
or
lods
call
fsubr
inc
xchg
sti
fwait
pop
sub
inc
(bad)
cmps
jno
mov
nop
mov
lds
jb
in
xchg
ins
lea
xor
push
xchg
jl
sub
icebp
cdq
add
jmp
adc
jnp
ja
xor
movs
rol
and
in
ja
dec
cli
xor
add
cmp
dec
lock
sub
loope
mov
dec
in
aas
mov
sbb
stc
(bad)
movs
mov
mov
xchg
jmp
pop
dec
mov
mov
ss
std
js
test
ss
mov
stos
xor
out
cli
jle
outs
inc
lods
mov
jp
clc
shr
mov
or
xor
in
aam
(bad)
mov
gs
enter
inc
ss
les
loope
dec
loopne
xor
ds
xchg
mov
pop
jne
sub
into
fldenv
mov
retf
sbb
sub
es
shl
xchg
retf
push
(bad)
aas
std
jmp
sub
pop
sbb
add
movs
push
cwde
int
ficomp
loopne
xor
xchg
popa
in
sub
fcom
mov
lods
popa
dec
call
(bad)
xor
xor
out
jle
movs
inc
inc
shl
dec
adc
adc
lods
loope
movs
pop
sub
fwait
or
call
and
ret
sar
mul
lods
cmp
leave
add
xchg
xor
push
xor
push
cs
in
nop
stos
cmp
popf
xchg
xchg
dec
mov
mov
fsub
jmp
lahf
mov
fnstenv
xchg
mov
int
mov
pop
push
fs
in
mov
fs
and
push
inc
xor
jne
out
fiadd
(bad)
push
js
mov
inc
xchg
add
aam
mov
loop
jp
outs
cli
cmc
mov
mov
xchg
std
xchg
jo
jo
dec
xchg
ja
xor
out
sub
inc
je
xchg
lds
mov
ret
out
mov
movs
cli
bound
loope
add
repnz
adc
lahf
dec
cmp
std
push
xchg
add
inc
add
xor
pushf
call
xor
loopne
pop
xchg
xor
mov
xchg
xlat
jns
(bad)
out
jne
xchg
add
dec
mov
add
enter
fisub
xchg
mov
jns
or
cs
xchg
loope
push
adc
add
bound
xor
cmp
jl
add
lea
ja
addr16
js
je
push
mov
mov
repnz
popa
add
cmp
mov
xchg
pop
inc
fcom
xor
fs
add
ins
mov
adc
mov
call
mov
cdq
das
sar
sub
es
sub
dec
mov
sbb
pop
cmp
sti
std
xor
inc
xchg
sub
xlat
push
inc
shl
xor
(bad)
cmovae
fadd
or
xor
jg
(bad)
push
cdq
mul
jmp
fmul
arpl
xchg
mov
(bad)
or
mov
cmp
aas
lods
mov
xchg
xchg
mov
test
out
mov
xrelease
dec
push
adc
in
cdq
mov
daa
clc
jmp
hlt
xor
icebp
add
stc
arpl
and
xor
scas
cwde
push
add
cmp
push
xchg
dec
lock
pusha
pushf
(bad)
dec
out
push
and
and
std
call
sub
js
xchg
xchg
sub
int3
pop
pop
mov
fpatan
push
(bad)
or
popa
lds
sub
push
sub
es
ret
xchg
cli
(bad)
(bad)
sub
sub
sar
xor
mov
loope
xor
xchg
inc
sub
je
mov
lods
xchg
cmp
xor
jg
je
stos
loopne
cld
sbb
cmp
pop
cmp
adc
cli
sbb
pop
outs
pop
aaa
cmc
sub
pop
mov
leave
dec
pop
xchg
sub
int3
jecxz
cmc
jge
inc
dec
push
popa
(bad)
pop
cmpxchg8b
fadd
lods
push
call
fwait
dec
mov
dec
daa
mov
mov
call
adc
imul
int3
nop
jae
leave
jecxz
add
mov
push
inc
mov
mov
loop
aam
aad
jge
mov
xchg
rcl
fmul
dec
icebp
pop
add
push
jecxz
aaa
push
clc
and
pop
outs
lods
js
xor
push
stos
pop
push
pop
js
mov
pop
in
cmps
int3
sbb
sub
aas
fwait
sbb
out
inc
leave
or
mov
das
and
int
iret
fldenv
ror
xlat
bound
imul
push
jmp
adc
lgs
aaa
test
test
mov
fidivr
pusha
sbb
fst
pop
add
(bad)
enter
das
lods
adc
jle
mov
pusha
add
jmp
jns
xchg
call
pop
and
(bad)
mov
jmp
outs
fmul
and
imul
adc
and
xchg
xchg
xor
mov
aaa
pop
jno
shl
(bad)
mov
xor
sar
mov
ss
pop
shl
out
inc
into
xor
in
xchg
or
cli
ds
scas
and
pusha
in
iret
test
sub
in
cmps
add
push
inc
test
sbb
add
xor
or
aas
cli
and
add
inc
mov
or
add
adc
ffree
ins
push
test
das
mov
mov
sbb
movnti
jb
adc
xchg
inc
ins
ins
cmc
and
push
callw
cmp
inc
adc
pop
shl
cmps
popf
aaa
push
mov
xor
pop
sub
cmp
test
lock
test
mul
fsub
adc
in
sbb
in
mov
cwde
mov
sahf
jno
adc
push
jne
mov
adc
xor
in
test
vpslld
add
inc
in
sbb
jmp
arpl
sub
push
jl
add
push
ins
sub
inc
mov
cmp
std
jb
jae
sbb
test
lods
arpl
fmul
pop
mov
out
push
in
mov
dec
mov
imul
in
fisttp
push
sub
jcxz
(bad)
(bad)
push
push
xchg
ja
(bad)
fsubr
lahf
mov
leave
fs
aaa
jp
bound
jo
pop
aaa
mov
push
lds
xor
dec
ja
push
adc
jp
push
push
inc
sbb
out
pop
sub
int
outs
lods
adc
(bad)
mov
mov
pop
dec
mov
popf
add
rcl
icebp
jge
outs
inc
jnp
xor
es
or
mov
adc
mov
jae
jp
pop
inc
fdiv
xchg
repz
sbb
mov
popa
fucomp
jmp
loope
push
inc
add
xchg
mov
cmp
jp
push
test
push
pop
mov
mov
or
js
hlt
iret
mov
pop
mov
add
fadd
ja
outs
movs
xor
adc
pop
arpl
jp
cwde
sub
mov
inc
les
gs
or
je
mov
and
pusha
cmps
scas
or
xchg
int3
adc
loope
adc
add
push
repnz
test
mov
push
in
jbe
es
lods
push
out
aaa
push
xchg
out
ds
jl
mov
jl
arpl
adc
scas
lds
mov
shr
(bad)
lahf
add
mov
push
repz
inc
enter
inc
xchg
mov
sbb
cmp
xor
add
outs
mov
stos
out
ins
cmc
popf
push
cs
push
xor
retf
ror
fst
imul
jmp
stos
jmp
add
push
mov
inc
aam
imul
mov
jp
call
inc
mov
push
hlt
dec
outs
mov
push
sub
inc
outs
stc
jnp
mov
fs
bound
and
loope
fs
or
and
daa
(bad)
add
nop
push
jns
aas
jnp
inc
test
xchg
daa
push
scas
jns
call
lods
and
mov
sub
aaa
das
stos
dec
add
lods
mov
cmp
js
jnp
sbb
loope
retf
(bad)
push
inc
xor
sbb
mov
jp
rol
xlat
fs
mov
add
in
jle
sub
adc
mov
push
mov
push
dec
cld
pop
in
pop
rcl
mov
scas
test
and
mul
test
mov
xchg
sbb
arpl
call
fld
call
fwait
stos
sbb
stos
ds
xor
ja
out
imul
fisub
iret
mov
mov
pop
(bad)
xchg
jmp
sub
cwde
xchg
stos
scas
ja
push
fimul
loop
jg
sbb
call
cli
les
in
add
pop
mov
and
mov
sub
call
sbb
into
repz
cmp
jp
adc
retf
pop
mov
mov
cmc
jge
jl
cmps
fisub
out
push
or
cs
xchg
jmp
xchg
xchg
push
cmp
or
xor
cs
cwde
aas
loope
and
mov
sub
lods
retf
mov
and
pop
shl
test
imul
fs
outs
mov
sub
fcmovnu
inc
or
out
jbe
test
hlt
loopne
mov
jle
lods
add
add
fst
pop
or
push
(bad)
fiadd
sub
idiv
test
push
(bad)
xchg
xor
ret
mov
and
test
in
jle
in
add
cwde
xor
add
xchg
or
pop
ins
enter
pushf
push
test
mov
dec
mov
cmp
jmp
add
imul
cmp
clc
popf
out
adc
jns
inc
cmp
cmp
xor
and
and
mov
fs
cmc
rep
cld
dec
push
xlat
lahf
cmp
sbb
sub
retf
push
adc
test
mov
mov
mov
(bad)
and
mov
test
mov
mov
adc
pop
mov
push
das
mov
sbb
test
ficom
out
pop
adc
mov
jecxz
sti
mov
cmps
jl
and
pop
repz
popf
leave
fisttp
out
adc
jle
pop
sbb
outs
sub
scas
sub
stc
push
gs
and
sbb
mov
inc
scas
pop
mov
lds
call
inc
test
mov
xor
pushf
ror
sub
jnp
out
or
add
mov
fsubr
(bad)
xchg
jns
inc
les
mov
std
mov
mov
sub
jl
sub
test
jmp
xor
(bad)
mov
mov
pop
xlat
sbb
lahf
outs
mov
and
ror
inc
mov
lods
scas
inc
push
ja
punpckhwd
lods
xchg
pop
cmp
int3
fistp
and
pop
pop
mov
data16
inc
ud0
xor
movs
ret
test
aaa
hlt
fcmove
les
in
adc
retf
jae
fsubr
push
push
push
(bad)
pushf
repnz
mov
popa
aaa
jge
jp
jns
dec
out
sbb
ret
xchg
(bad)
in
inc
mov
xchg
fs
mov
jecxz
in
add
or
js
jae
lock
(bad)
cli
ret
push
inc
jmp
mov
xchg
ret
push
sbb
bound
scas
pushf
xchg
fs
cdq
mov
jge
retf
xchg
sub
cli
in
sbb
sub
retf
retf
imul
fadd
jo
mov
test
pushf
pop
pop
popa
out
(bad)
add
dec
add
mov
jp
dec
sub
jno
shl
push
(bad)
pop
mov
enter
sbb
hlt
mov
clc
test
js
pop
pop
iret
mov
add
repz
pop
jmp
xor
lahf
and
push
inc
mov
and
iret
retf
test
pusha
xchg
test
xchg
pop
stos
fcom
enter
push
sbb
ret
or
outs
imul
add
xor
dec
cdq
sub
in
or
fcmovu
movs
and
std
mov
xor
iret
shl
aad
inc
pop
out
dec
stc
cmp
cmp
jo
xchg
xor
dec
mov
mov
sbb
jo
cmp
pusha
adc
out
add
xor
ficomp
inc
xchg
xchg
aam
push
lock
inc
push
pop
aad
add
cs
dec
dec
inc
cmp
fcmovbe
aaa
das
jo
sti
(bad)
xchg
sub
lods
inc
ss
jmp
int3
or
call
lods
pop
xor
sbb
sbb
jle
mov
adc
dec
hlt
test
lock
pop
arpl
mov
imul
fcomp
imul
repz
adc
pop
add
cmc
sub
pop
test
jbe
mov
(bad)
(bad)
nop
and
enter
retf
aam
cwde
dec
jo
enter
push
mov
rol
test
loop
push
inc
push
mov
ss
aad
cmp
scas
mov
sahf
es
jge
jp
movs
aas
sbb
mov
test
adc
cmps
pop
inc
daa
repnz
push
add
add
cmp
xor
mov
(bad)
pop
cdq
fsin
fldenv
mov
ins
push
jle
inc
aad
mov
mov
test
xor
xor
idiv
arpl
jmp
mov
fnstsw
js
or
out
add
and
jl
icebp
dec
push
call
aaa
push
pop
cmp
in
jnp
dec
pop
push
xchg
fst
outs
add
dec
(bad)
mov
sar
mov
dec
push
shr
xchg
int
mov
pop
mov
sbb
push
addr16
jo
xor
pop
dec
data16
mov
lock
(bad)
jmp
(bad)
out
retf
sub
sbb
call
std
sbb
and
pop
retf
xor
mov
mov
pop
xchg
add
and
sar
xchg
stos
imul
outs
inc
sbb
int3
repz
sbb
sahf
imul
loopne
fcomip
mov
xchg
mov
jnp
push
ret
adc
mov
and
pop
dec
sub
sub
add
mov
retf
les
loop
inc
inc
mov
scas
dec
(bad)
int3
adc
push
inc
arpl
outs
mov
icebp
cmp
mov
mov
int
(bad)
jmp
call
cmp
lahf
vpaddb
push
js
lock
test
pusha
push
pop
stc
fmul
int
bound
out
arpl
loop
cmp
les
sub
inc
mov
dec
lock
mov
add
mov
dec
test
or
cmp
xchg
dec
cs
stos
daa
push
stc
jp
call
dec
jmp
push
dec
lds
mov
jo
xor
hlt
push
adc
push
repnz
rcl
and
pop
loop
xor
push
cli
xchg
sahf
paddsb
push
xchg
push
adc
loopne
pop
(bad)
push
dec
(bad)
sahf
rcr
repnz
fcom
mov
imul
(bad)
dec
mov
movs
je
sahf
inc
or
mov
clc
jb
lock
mov
and
mov
cmps
(bad)
stc
dec
adc
and
(bad)
(bad)
aas
mov
add
nop
mov
add
xor
adc
cs
mov
dec
inc
nop
push
inc
out
mov
sbb
lahf
push
rcr
xchg
add
rol
mov
call
iret
mov
fs
or
mov
jnp
je
sbb
push
inc
jnp
or
scas
mov
push
sbb
add
mov
sbb
aam
jg
nop
(bad)
fdiv
cwde
(bad)
outs
xchg
pop
pop
inc
sbb
add
mov
xchg
movs
mov
xchg
into
sub
mov
xchg
bound
sbb
ret
sub
jne
push
cmp
stos
push
xchg
ja
(bad)
cmp
xlat
or
or
jbe
scas
shl
ins
inc
repnz
or
fsubr
pushf
mov
mov
lods
add
or
aas
sub
rcr
add
cmps
mov
add
loope
inc
aad
add
mov
inc
xchg
xor
(bad)
fisubr
pop
pushw
rcr
ficom
xor
(bad)
fcmovbe
jno
sub
test
stos
inc
cs
cmp
cmp
ror
jb
fs
test
xchg
add
imul
aas
or
pushf
dec
scas
test
mov
pop
mov
mov
jp
cmc
push
or
xchg
mov
and
pop
test
mov
lea
lahf
aas
jl
mov
ret
xchg
(bad)
(bad)
aam
imul
inc
push
adc
or
mov
cwde
mov
fstp
mov
pop
leave
cmp
xchg
push
inc
loope
enter
es
int
cmp
stos
xor
outs
cdq
xor
push
test
mov
ja
ss
and
(bad)
leave
(bad)
xor
movs
ja
pause
fst
xchg
ins
and
push
push
ins
mov
mov
jae
sbb
pusha
fstp
mov
cmps
test
and
push
(bad)
mov
addr16
dec
xchg
sub
dec
daa
icebp
(bad)
hlt
leave
cdq
shl
xchg
xchg
inc
sar
test
push
or
push
aas
mov
mov
dec
cdq
cmps
das
mov
dec
dec
mov
pop
add
mov
dec
pop
mov
fnstenv
add
cli
ret
mov
repz
cmp
push
out
dec
mov
popf
pop
and
jo
mov
sub
dec
ret
push
dec
mov
push
call
xchg
sbb
call
sub
jb
outs
fcom
lods
clc
leave
neg
cdq
mov
mov
jle
dec
mov
(bad)
mov
es
pusha
inc
dec
xchg
test
mov
jae
dec
movs
movs
adc
aas
or
mov
jmp
sub
cwde
(bad)
cmp
out
pop
scas
sbb
xchg
loope
fdivp
call
add
xchg
jle
cmps
in
inc
scas
cmc
adc
into
ror
xor
ds
mov
(bad)
inc
stos
jmp
(bad)
pop
call
dec
mov
inc
fmulp
mov
fld
pop
mov
mov
stc
mov
sti
popf
jp
or
or
inc
mov
dec
jl
and
inc
scas
push
jge
xlat
(bad)
gs
xchg
cmp
mov
mov
aaa
out
out
add
add
dec
cli
sub
clc
jo
cdq
push
sbb
jg
push
xor
ja
pop
jnp
repz
(bad)
dec
ins
add
mov
(bad)
sbb
pop
mov
mov
ror
icebp
cli
das
ss
sub
xchg
pusha
add
cmp
push
test
fisubr
hlt
xor
outs
inc
(bad)
cmp
jnp
popf
std
jge
xor
in
fwait
adc
cmp
push
xchg
or
or
xchg
mov
pop
or
fwait
mov
fild
stc
mov
in
shr
inc
daa
push
pop
and
nop
aam
fs
pusha
fstp
fbstp
fwait
push
or
pop
int3
pop
cli
pop
pop
cwde
nop
sbb
not
les
and
push
scas
xor
and
pop
cmp
and
je
adc
idiv
sbb
sub
add
jge
loop
outs
fsubrp
pop
pop
int3
mov
iret
cwde
xchg
add
stos
aaa
(bad)
les
mov
add
mul
mov
jne
sub
xchg
push
iret
test
inc
movs
(bad)
sti
loop
mov
mov
imul
mov
add
mov
jmp
mov
ins
rol
mov
dec
xor
mov
stc
das
pop
sbb
loopne
jle
mov
jg
lea
daa
mov
adc
cmp
gs
xchg
push
pop
outs
cli
iret
add
inc
clc
(bad)
int3
jge
ror
mov
pop
add
out
sar
lods
aas
inc
inc
test
mov
pushf
xor
mov
pop
add
(bad)
int3
inc
rcl
sub
jmp
xor
in
out
not
dec
jmp
adc
mov
add
loop
popa
inc
xor
mov
push
je
gs
pop
std
adc
cs
test
push
aad
jl
push
cmps
fmul
mov
outs
jmp
jo
ins
mov
ss
mov
les
dec
xchg
stos
mov
inc
pop
cmp
sbb
imul
add
and
mov
push
lods
js
inc
pushw
or
data16
aad
jl
cmc
(bad)
cmp
loopne
fcom
test
adc
jge
test
jmp
div
leave
(bad)
addr16
adc
ins
jmp
cwde
mov
sbb
fidivr
loop
adc
mov
aas
int
fiadd
call
sbb
stos
xor
add
fadd
add
idiv
add
cli
and
ins
jg
in
xchg
cmps
fdivr
leave
pop
nop
pop
push
repz
mov
iret
stos
sbb
sub
mov
xchg
mov
popa
scas
lds
aad
jns
add
les
sbb
jae
dec
jo
loopne
mov
pop
dec
mov
dec
push
cmp
jne
cmp
retf
bound
sub
inc
scas
pop
repz
imul
mov
les
sbb
jmp
sahf
mov
cmps
int3
call
pop
mov
add
jg
cmp
fst
jecxz
mov
pop
sbb
loop
fld
daa
push
retf
(bad)
pop
xchg
movs
rcr
out
loop
jle
fwait
jmp
stc
scas
pop
xor
xor
or
pop
stos
(bad)
out
add
gs
sub
sbb
push
dec
shl
ds
stos
pop
add
inc
mov
mov
push
pop
je
add
(bad)
in
inc
std
mov
mov
jne
or
nop
in
scas
clc
inc
jae
popf
call
push
push
(bad)
aas
dec
inc
cmp
pop
and
mov
push
call
cmps
imul
or
and
adc
jg
retf
repz
xchg
ins
nop
daa
add
cmp
xchg
jp
adc
int3
xlat
pusha
sbb
xor
jge
(bad)
std
pop
xchg
add
mov
jle
or
inc
dec
sahf
mov
daa
ins
pop
inc
adc
pop
jmp
dec
mov
cld
xchg
mov
cmp
xor
into
mov
add
(bad)
push
sahf
or
out
sar
popf
loope
es
(bad)
lods
test
mov
pop
movs
or
mov
or
lods
cmp
scas
sbb
outs
pushf
pop
mov
rol
mov
fcmovnbe
mov
(bad)
(bad)
jbe
xchg
jmp
out
int
mov
fs
mov
sub
inc
cvtdq2ps
sar
and
cwde
arpl
les
cmp
xor
push
sbb
ror
popf
daa
aas
mov
inc
lods
pop
stos
(bad)
popa
jg
in
pushf
pop
jae
push
cwde
and
retf
in
fmulp
cld
in
popf
xor
sub
cmp
or
or
sub
ficomp
dec
xor
fsubp
ds
jnp
inc
and
cli
ds
inc
mov
mov
xchg
cmp
out
out
and
adc
enter
leave
fldenv
mov
mov
mov
and
cmps
sbb
pop
imul
and
mov
inc
sub
adc
imul
fwait
xchg
scas
loop
out
inc
jg
jnp
fnstsw
int3
addr16
mov
arpl
out
jnp
cdq
jl
dec
cmp
sahf
dec
enter
xchg
mov
mov
dec
aam
fs
mov
into
pop
push
push
or
ret
xor
int3
mov
push
pop
mov
xchg
lock
rol
icebp
ss
aaa
mov
lea
jge
rcr
mov
jbe
jae
into
adc
xor
cld
xor
(bad)
es
add
test
fwait
jmp
fsubr
cmp
arpl
(bad)
mov
div
cmps
icebp
ficomp
test
inc
not
push
dec
and
movs
pushw
lahf
dec
mov
inc
jg
retf
(bad)
fs
ins
mov
int
mov
ret
popa
xchg
repz
cmp
mov
xor
dec
sahf
ret
mov
outs
mov
add
das
add
addr16
rcr
lds
movs
inc
jns
adc
jne
push
xor
or
int3
ss
xchg
das
in
cmps
mov
fcomp
mov
nop
cwde
out
xor
dec
dec
aas
fsubr
pop
jbe
(bad)
xchg
push
and
xlat
fild
movs
mov
jmp
pusha
pushf
xor
leave
shl
arpl
or
loope
xchg
repz
push
retf
xor
retf
cmp
aad
loope
mov
into
sub
mov
out
push
fnstsw
cli
popa
pop
pop
sbb
ins
pop
jo
and
adc
cmp
jo
call
mov
cwde
push
out
ds
lea
sub
sub
cmps
sub
jns
mov
fnsave
(bad)
xor
iret
fst
dec
dec
inc
ins
test
cmp
test
pop
(bad)
(bad)
mov
dec
xor
mov
es
xor
(bad)
into
pushf
sub
lods
push
mov
stc
leave
xor
sahf
push
ftst
sub
lahf
adc
ret
(bad)
push
pop
dec
lahf
inc
push
xchg
cmp
stc
lods
adc
jno
adc
mov
jb
xor
mov
xchg
cs
inc
pop
xchg
pop
leave
gs
lock
or
pop
mov
pop
push
es
pop
or
and
fld
icebp
dec
xchg
aam
cmp
and
xchg
repnz
jg
push
mov
mov
adc
test
xor
pop
xor
cmp
sub
push
xchg
sahf
jb
pop
(bad)
fs
bound
out
mov
xchg
jge
push
hlt
jb
jl
aas
bound
aaa
jbe
lea
mov
add
std
sub
sub
fdivr
out
mov
sub
pop
rcr
xchg
and
dec
inc
jns
loop
and
not
pop
stos
repz
in
outs
retf
sar
mov
mov
dec
or
xor
ret
ins
mov
cld
xchg
mov
jecxz
sub
js
out
jmp
push
pop
dec
xor
and
mov
in
xor
or
jp
or
pusha
push
(bad)
fs
xor
fist
mov
push
adc
arpl
fild
dec
les
mov
cwde
clc
scas
sahf
mov
in
test
sbb
mov
or
fdivr
ds
sub
hlt
fs
and
inc
(bad)
out
shr
cli
cmp
push
es
imul
sub
das
xchg
or
and
xchg
adc
jne
imul
ins
mov
fisttp
rol
sub
dec
xor
repnz
lods
sbb
vmread
fld
dec
pop
sub
stos
add
sub
dec
push
xchg
push
int3
out
adc
sbb
jmp
into
jl
mov
mov
imul
pop
cwde
sbb
mov
sub
inc
ins
xchg
cmp
jmp
stos
ror
ret
(bad)
(bad)
xor
out
mov
add
mov
inc
sub
adc
or
adc
jmp
xchg
retf
ffreep
fadd
retf
div
loopne
repnz
and
xor
pushf
inc
mov
mov
xor
ficom
add
sbb
mov
inc
or
add
mov
or
xor
mov
fcom
clc
fcom
loopne
cmps
cmp
xor
scas
xchg
mov
push
sbb
iret
es
push
push
ja
mov
xchg
inc
stc
iret
lods
jle
adc
mov
call
adc
js
push
sub
lds
xchg
fisttp
dec
aad
rcr
jp
pop
jne
lods
or
sahf
stc
xlat
sbb
jo
xlat
movs
mov
dec
or
das
jecxz
pop
xchg
or
jne
add
lock
and
nop
pop
mov
retf
add
jne
clc
mov
outs
jge
dec
inc
pop
dec
dec
mov
dec
pop
pop
inc
inc
call
sar
ror
push
and
or
cs
lea
sbb
xchg
fld
mov
push
ja
shl
cli
jno
fsubr
inc
mov
mov
sub
adc
cmp
out
pop
bnd
push
pop
push
movs
sbb
pop
push
jnp
sub
sub
pop
and
stos
icebp
shl
(bad)
sub
lock
dec
test
imul
es
aam
fcmovne
out
mov
mov
sets
fdivr
xchg
mov
test
xor
scas
sbb
out
sub
mul
repz
add
cli
inc
adc
push
jecxz
dec
mov
sbb
push
add
ins
inc
mov
cli
adc
repnz
xchg
push
test
cmp
or
inc
sub
mov
sub
cmp
cmps
xchg
pop
inc
lahf
lods
aad
(bad)
mov
icebp
es
inc
data16
(bad)
nop
dec
stos
retf
test
jno
cmp
cmp
xchg
sub
add
je
neg
mov
jp
xor
mov
xchg
outs
sahf
loope
ret
jmp
or
aas
push
fisttp
ror
(bad)
out
les
xor
push
xchg
cmp
gs
js
jmp
cmp
imul
ret
cmp
cld
loope
mov
call
mov
xchg
jbe
les
inc
xchg
inc
jno
pop
xlat
scas
mov
mov
arpl
jl
xlat
shl
xchg
mov
stos
jmp
jecxz
add
inc
(bad)
stc
pop
mov
jl
add
jg
sub
fchs
mov
inc
push
mov
rcl
adc
or
sbb
sysenter
test
jb
xchg
nop
rol
(bad)
jp
or
sbb
inc
inc
jmp
push
adc
(bad)
mov
jge
cli
mov
cmps
adc
jne
mov
les
sub
jns
jnp
mov
fwait
xor
xor
pop
rol
and
into
cmc
das
dec
or
jo
movs
pop
inc
nop
fidiv
or
jle
nop
pusha
jg
neg
rol
dec
push
inc
cmp
pop
(bad)
in
jb
dec
test
int3
cwde
push
call
pop
sub
out
push
sbb
aas
rol
fwait
sbb
and
pop
je
test
scas
sub
xor
dec
push
(bad)
mov
mov
lods
push
call
xor
xchg
dec
call
and
fwait
sbb
adc
jecxz
sub
push
pop
push
(bad)
data16
or
sar
jg
xor
pop
xchg
ins
sar
jp
cmp
aas
js
cs
push
dec
in
hlt
mov
push
add
cdq
dec
jecxz
sub
popa
or
cmp
sbb
lods
pop
dec
mov
adc
dec
scas
xchg
je
adc
int
sbb
ja
mov
icebp
ror
adc
into
lods
sbb
mov
xor
sub
cmp
shl
push
add
mov
adc
sbb
dec
sbb
pextrw
dec
jb
enter
pop
lds
ja
aas
into
pop
sbb
mov
jmp
xchg
push
jecxz
xor
xor
loope
mov
fcmovnu
int
mov
mov
xor
nop
pop
and
pop
int3
(bad)
cdq
cmp
aaa
ss
xchg
test
mov
mov
jmp
das
nop
mov
call
adc
daa
ins
stc
jp
jp
cmp
inc
cwde
inc
popf
dec
pop
add
stos
sti
call
push
hlt
pop
jo
pop
lahf
ja
daa
shl
icebp
lock
push
fsubr
sub
shr
mov
push
mov
add
xchg
sar
mov
mov
add
pop
mov
cmps
dec
mov
sti
mul
imul
(bad)
fisttp
add
sbb
outs
sub
and
sub
outs
or
lock
je
mov
popf
xor
sbb
cs
push
test
jmp
adc
in
bound
and
mov
xchg
ret
sbb
imul
cmp
or
push
jmp
dec
(bad)
mov
arpl
popf
push
loop
retf
mov
xor
add
sbb
jb
popa
dec
stc
sub
enter
cmc
nop
mov
popa
enter
push
push
test
lea
jmp
retf
push
xor
ror
aad
xor
sbb
xchg
push
rcr
ror
stos
outs
stc
add
stos
pop
rcl
push
and
and
sub
retf
push
add
nop
sub
adc
(bad)
mov
mov
(bad)
mov
xor
into
(bad)
movs
scas
je
and
daa
pop
daa
lock
mul
xchg
out
and
aad
pop
xchg
mov
in
jae
push
idiv
(bad)
push
ror
outs
outs
mov
mov
inc
jae
in
std
jae
lods
mov
rcl
ds
mov
add
les
xor
sub
test
push
sub
fld
lods
(bad)
adc
mov
retf
push
rol
inc
jbe
pusha
jl
fsubr
das
cs
arpl
cmp
pop
retf
pop
push
repz
call
inc
jne
dec
mov
dec
in
push
pop
inc
jnp
push
(bad)
aaa
shl
mov
cwde
aas
cmp
fidivr
add
out
stos
in
repnz
mov
cmp
sti
xchg
push
ret
loop
lods
sahf
ins
push
bound
add
(bad)
cld
cmp
(bad)
imul
xlat
outs
fild
addr16
mov
ret
data16
cmp
lods
inc
sub
out
lock
sahf
xor
push
push
loope
mov
bound
xor
fisttp
add
dec
outs
in
push
int
pop
rep
and
shl
scas
jp
(bad)
js
movs
les
jmp
jmp
lods
scas
adc
xchg
add
pusha
icebp
inc
loope
xor
int
add
jp
xchg
push
pusha
pusha
xchg
push
jecxz
mov
pop
jb
sbb
pop
jle
ss
pop
(bad)
iret
not
(bad)
std
jl
sub
push
ret
cmp
mov
add
movs
daa
or
in
xor
inc
sbb
and
push
push
inc
(bad)
jp
cmp
mov
loop
test
in
mov
cmp
arpl
ins
shl
adc
pop
and
pop
or
mov
(bad)
mov
fdivp
ret
sub
sbb
stos
dec
rcr
imul
call
pop
xchg
inc
inc
jp
xchg
icebp
jmp
mov
cmp
push
sahf
jo
repnz
jnp
jmp
mov
cmc
pop
push
cmp
movs
ret
mov
lock
xchg
cs
xchg
je
jns
mov
pop
mov
adc
cmp
arpl
or
sbb
hlt
pop
pop
mov
cmp
jmp
pop
movs
push
stc
and
push
sub
jbe
dec
cmp
fdivr
cmp
mov
neg
lahf
cs
je
add
and
(bad)
push
sbb
imul
imul
fiadd
cmp
outs
repz
into
inc
jge
ins
test
sub
cmp
retf
das
add
mov
xor
scas
mov
dec
ds
xchg
adc
sub
int3
pop
ret
pop
xor
icebp
test
jle
das
xchg
cmps
mov
(bad)
rol
loopne
dec
cs
push
push
(bad)
lods
mov
ja
cmps
pop
dec
div
pusha
jmp
mov
cmp
jg
cdq
jmp
in
cmps
and
neg
lods
in
iret
inc
jbe
pusha
loop
ja
or
int3
ins
sub
int3
std
sub
push
(bad)
hlt
xor
movzx
mov
mov
scas
add
add
test
rcl
nop
mov
stos
fldcw
in
cmp
pop
stos
leave
push
mov
mov
retf
daa
sar
push
pop
neg
(bad)
pop
daa
sbb
xor
mov
fcomp
mov
push
add
xor
xor
jne
aaa
mov
ret
scas
adc
sbb
add
daa
mov
push
fucomi
int3
mov
call
sub
retf
inc
mov
(bad)
xor
or
or
fimul
pop
loop
jns
arpl
adc
js
add
scas
inc
xchg
fld
out
pop
cmp
out
out
ins
in
mov
movs
push
add
ret
push
dec
rcl
pop
mov
push
dec
lea
add
retf
jbe
imul
jmp
sbb
cmps
or
test
mov
ds
adc
in
ja
sub
cld
enter
dec
jb
retf
add
retf
jmp
jb
xor
enter
xchg
stos
sub
test
inc
call
arpl
pop
aam
adc
adc
sbb
int3
jo
pop
shld
jno
enter
mov
cmc
ins
loopne
cmp
adc
test
fcom
xchg
and
xchg
pop
test
lods
mov
pop
sti
dec
int3
loopne
fimul
out
aam
ss
fwait
dec
jecxz
pop
inc
(bad)
les
rol
in
jge
pop
jg
xchg
adc
and
pop
loop
fwait
(bad)
imul
push
jo
push
jmp
xor
xchg
call
cmp
sub
stos
aas
retf
fsubr
mov
imul
test
pusha
cld
std
or
and
das
sub
ds
das
inc
pop
(bad)
jnp
inc
ss
mov
jbe
in
(bad)
ret
outs
ins
mov
xor
fwait
adc
aam
cs
out
xchg
test
ss
adc
(bad)
jecxz
dec
jns
leave
jno
add
jl
push
mov
outs
mov
add
push
sbb
pop
js
(bad)
xchg
rcr
movs
cmp
fild
cmp
mov
sub
rcr
add
xor
aad
mov
push
inc
mov
jg
lods
cmp
fcomp
sbb
jmp
bound
gs
test
cmp
mov
add
fcmovne
inc
repnz
xrelease
mov
sbb
push
imul
mov
pop
cwde
neg
arpl
sub
(bad)
xchg
lods
fisttp
xchg
adc
sub
push
and
das
cmp
mov
cli
lock
jnp
lahf
inc
push
jle
xor
pop
mov
mov
xchg
mov
pop
push
aas
pop
(bad)
fisttp
xchg
cli
std
xchg
sbb
or
mov
or
push
dec
mov
out
jnp
pop
pushf
adc
retf
imul
in
cli
or
push
jnp
xor
and
xor
pop
sub
or
jg
mov
lahf
mov
inc
and
xchg
aad
pop
jmp
cmp
es
xchg
js
adc
mov
aaa
lea
sbb
mov
repnz
mov
fdiv
mov
outs
push
in
adc
push
sbb
sub
push
cmp
and
xchg
shl
mov
pop
pushf
mov
dec
rcr
mov
add
pop
movs
inc
popf
clc
clc
jnp
cmps
movs
fdivr
adc
nop
lods
mov
ss
inc
jmp
or
push
daa
mov
jp
mov
ins
cmc
dec
xlat
in
mov
mov
add
add
cli
repnz
jno
(bad)
sub
cmc
lea
add
mov
jmp
aas
shr
js
inc
lea
dec
test
inc
xor
or
mov
xor
dec
daa
js
and
jmp
adc
sub
mov
pop
jecxz
mov
cmps
sbb
rol
pop
js
sahf
adc
pop
xchg
(bad)
idiv
mov
imul
loop
pop
ret
lods
inc
outs
inc
mov
pop
lods
data16
push
or
push
dec
or
pop
daa
jg
inc
mov
lds
test
mov
push
inc
cwde
or
leave
xchg
jnp
gs
sub
popf
sub
xor
sbb
inc
test
iret
sbb
mov
jne
jne
(bad)
out
push
test
inc
std
mov
add
mov
or
jae
stc
mov
or
cld
adc
(bad)
sub
es
add
ja
and
sbb
pop
mov
push
js
ins
bound
in
xchg
sbb
pop
inc
xchg
shl
mov
sti
mov
leave
lods
test
xor
inc
push
cmp
sahf
(bad)
jl
or
ds
mov
arpl
scas
jecxz
in
cmp
or
cmps
jecxz
xlat
mov
outs
aas
cmp
outs
jmp
cmp
shr
aaa
(bad)
mov
and
and
jno
push
lock
or
ss
sub
in
inc
inc
sub
pfmax
jmp
mov
mov
lods
and
ss
xchg
loope
fisubr
fwait
mov
xor
stos
cmp
xor
dec
or
mov
and
pop
(bad)
cmc
cmp
xlat
push
add
enter
mov
push
xchg
push
mov
sub
jmp
jne
dec
(bad)
(bad)
cld
jb
push
cwde
les
pop
jb
lods
fwait
jmp
in
(bad)
gs
repz
push
jl
adc
jl
adc
mulps
jo
rcr
sub
and
add
mov
sti
or
pop
movhps
in
in
aas
int
push
mov
xchg
cmp
clc
pop
mov
jbe
sbb
and
mov
sub
loop
mov
inc
mov
fcom
nop
leave
jb
dec
xchg
aad
shl
das
push
mov
pop
jmp
inc
add
pop
mov
shl
dec
push
xchg
jnp
ins
cld
sbb
(bad)
cwde
ds
sub
sub
push
mov
inc
cmp
shl
test
and
cmps
fst
fcmovb
xchg
mov
aad
into
jp
mov
fstp
out
pop
fisub
aam
std
out
pop
pushf
js
lods
sbb
sbb
lahf
cmp
scas
adc
push
dec
add
push
dec
lock
pop
mov
movs
xchg
xchg
gs
cmp
sub
mov
enter
jge
mov
aaa
xchg
into
out
pop
adc
xchg
adc
ffreep
pop
push
into
jmp
(bad)
imul
pop
push
cli
adc
in
mov
cli
or
pop
pop
loope
sbb
push
or
xor
inc
jae
std
popf
cmps
xchg
and
mov
or
adc
sbb
leave
stos
mov
ins
ror
(bad)
push
inc
test
and
cld
cmp
inc
arpl
pop
jl
inc
out
inc
aad
retf
lods
sub
and
test
movs
les
(bad)
sahf
hlt
pop
fiadd
ds
pop
fcomp
push
outs
adc
push
jno
pushf
nop
mov
add
jp
jno
inc
xor
sahf
jmp
pusha
imul
int
xchg
jnp
aam
std
int
in
(bad)
fadd
add
hlt
mov
jle
push
or
pop
jge
rol
or
fild
mov
and
out
push
or
(bad)
or
push
and
pop
xchg
sub
and
dec
iret
jbe
jbe
imul
fs
mov
sahf
cwde
outs
retf
sti
inc
and
push
cmp
int3
jle
mov
add
pop
fimul
inc
push
jmp
or
js
ficomp
mov
mov
das
jmp
xchg
sub
add
out
(bad)
jo
es
inc
(bad)
or
or
pop
adc
jae
mov
inc
inc
cmp
mov
jbe
mov
mov
movs
dec
loope
retf
xor
mov
jg
or
imul
push
pop
push
inc
jns
push
repnz
bswap
xor
and
adc
loop
ins
(bad)
add
inc
cdq
pop
clc
jl
repnz
cmc
mov
pop
cmp
loop
sbb
mov
jns
daa
push
add
xor
dec
dec
scas
lock
dec
jmp
loopne
out
push
ds
aam
scas
(bad)
loope
out
popa
xchg
cmp
daa
and
fiadd
mov
mov
iret
data16
call
pop
sbb
shl
jno
mov
push
cmp
fidivr
popa
mov
es
inc
mov
inc
dec
dec
sar
inc
mov
xchg
or
in
dec
scas
pusha
stos
mov
mov
or
mov
loope
lahf
sahf
das
jmp
dec
stc
xor
pop
pop
aaa
(bad)
pop
les
adc
fdiv
sub
inc
dec
mov
and
xor
xchg
paddusb
fnstsw
xchg
es
jo
in
cli
das
sar
inc
test
jp
call
jo
add
add
cmp
and
test
minps
and
sbb
xlat
mov
add
stos
(bad)
outs
mov
or
cmp
xor
in
in
adc
jmp
js
mov
mov
ins
das
fstp
add
in
loop
int3
movs
push
or
cmc
xor
sub
in
leave
push
retf
fwait
jmp
pusha
shl
push
xlat
clc
rcr
cmps
lods
and
adc
mov
xor
jns
push
add
add
mov
out
pop
mov
fs
out
mov
outs
adc
sub
fisttp
fwait
outs
xor
and
or
xchg
scas
call
in
dec
xor
cmc
mov
aad
and
jmp
mov
jae
mov
test
sti
fidiv
ja
outs
out
lea
aad
mov
inc
dec
(bad)
sub
sub
push
mov
aad
push
mov
xchg
or
scas
repnz
xchg
jo
rcr
adc
cwde
les
push
retf
fstp
jns
and
icebp
add
push
imul
inc
cmp
sbb
sbb
ficomp
fsub
retf
mov
xchg
jne
lods
es
enter
dec
sti
loopne
test
or
pusha
xchg
ror
in
movs
dec
inc
adc
fisttp
sbb
retf
push
out
cmp
sub
mov
std
imul
or
out
inc
repnz
sub
in
ja
stos
test
adc
jo
aad
xor
retf
pop
or
cs
daa
fcomp
cmps
cmp
pop
mov
inc
shl
pop
xor
xor
cmps
pushf
dec
jl
xchg
pusha
dec
push
ror
add
pop
dec
cdq
daa
jae
(bad)
pop
sbb
lds
sbb
mov
adc
dec
sub
cli
push
mov
iret
sti
in
push
fnstcw
xor
push
movs
add
xchg
or
push
mov
(bad)
ror
lods
js
and
imul
aaa
sahf
cmp
xor
pop
iret
dec
add
dec
movs
push
pop
pop
aam
mov
pushf
sub
and
movs
div
out
(bad)
ss
pop
dec
retf
jb
add
addr16
cmps
rcr
inc
push
call
adc
aas
xor
sbb
pop
push
mov
and
pushf
repnz
sar
pop
xchg
not
les
add
and
mov
dec
inc
and
out
or
test
adc
loop
bound
or
out
and
out
daa
mov
mov
jl
ins
leave
xor
push
clc
into
(bad)
faddp
sub
dec
dec
call
(bad)
dec
mov
jl
stos
ret
jmp
mov
div
jl
(bad)
repz
mov
pop
mov
iret
in
in
and
mov
sbb
das
mov
inc
repnz
cdq
push
jne
pop
movs
call
into
cmp
inc
test
popf
mov
in
mov
lods
shl
repz
frstor
es
sub
scas
push
call
xor
sub
sbb
mov
add
jge
adc
lds
jl
and
retf
(bad)
cwde
xor
loopne
int
stc
push
xor
sahf
dec
scas
add
pushf
xor
jb
stos
call
adc
mov
sbb
dec
add
shl
pop
mov
add
shl
ret
jne
dec
in
mov
jmp
cs
pop
mov
mov
mov
mov
or
or
push
fs
cmp
mov
mov
nop
pop
nop
dec
mov
mov
jmp
pushf
add
add
shr
dec
into
daa
or
mov
arpl
cmp
je
sbb
push
retf
pusha
sbb
xchg
imul
mov
test
xchg
cmp
xchg
dec
xchg
nop
add
cmps
jle
mov
int3
push
arpl
cmp
mov
xor
loopne
loopne
jne
fs
push
add
mov
xor
mov
push
sub
js
push
(bad)
mov
xor
sub
mov
jnp
mov
cmp
inc
or
xor
(bad)
gs
lods
mov
sub
mov
mov
ins
ins
fistp
mov
out
(bad)
std
enter
(bad)
pusha
sahf
inc
and
int
cld
cmps
mul
ins
fistp
dec
jno
repnz
push
aas
test
adc
lods
outs
inc
mov
sbb
lods
stos
sub
add
ds
jecxz
pop
mov
push
cs
test
jge
loopne
cdq
call
add
sbb
shl
pop
mov
cmp
outs
mov
adc
aad
popf
push
mov
mov
ret
ret
arpl
mov
in
sbb
aad
out
mov
cmc
daa
inc
push
push
add
sub
cmps
sahf
lock
fisttp
data16
xchg
clc
mov
mov
push
fnstcw
and
ficom
and
imul
sub
cmps
sbb
jg
cmp
mov
sub
stc
icebp
test
enter
push
in
faddp
add
(bad)
imul
cmp
jo
retf
adc
add
dec
leave
sbb
push
xchg
dec
xchg
push
push
stos
lods
pop
pop
sbb
jle
std
es
jl
jne
je
jne
mov
adc
mov
das
mov
mov
xor
stc
xchg
loop
stc
into
and
inc
inc
mov
add
sbb
stc
add
dec
retf
(bad)
loope
mov
outs
(bad)
xlat
push
sub
imul
cmp
pusha
dec
dec
dec
dec
cmps
jnp
sub
nop
pop
gs
mov
sub
popf
aaa
cmp
test
shl
mov
imul
fs
xchg
adc
xchg
ss
aas
out
add
mov
add
adc
ds
push
std
fdiv
cmp
xchg
or
adc
leave
out
inc
(bad)
cmps
mov
imul
out
(bad)
pop
fnstcw
(bad)
xlat
out
(bad)
jne
sahf
add
pop
in
jne
stc
out
jle
xor
cmps
ret
add
jbe
int
xchg
add
fisttp
lahf
popa
ds
jmp
or
in
cmp
cmps
pop
rcl
pop
mov
mov
retf
aad
les
fist
and
push
dec
mov
(bad)
or
dec
fsubr
aas
adc
fsubr
sbb
xor
jbe
clc
sbb
adc
(bad)
outs
dec
pop
xchg
jno
cmps
mov
test
aas
cmps
sub
outs
inc
pop
add
xchg
mov
jg
xchg
mov
adc
or
jmp
retf
pop
pop
sbb
sbb
ret
or
push
sti
sbb
inc
mov
(bad)
repz
push
push
cmc
nop
xchg
push
out
adc
mov
add
das
cs
xchg
shl
dec
dec
popa
xor
pop
jo
scas
pop
cmp
addr16
add
mov
aas
ins
outs
sahf
jno
repnz
nop
iret
arpl
or
lock
push
iret
xchg
fnstcw
mov
cli
inc
xchg
shl
fadd
nop
neg
mov
add
in
add
sub
ja
xchg
adc
ins
sub
and
mov
or
jg
pop
mov
mov
xchg
bound
or
out
stos
xchg
dec
pop
std
dec
add
cmp
jne
dec
adc
ret
cli
popa
scas
xchg
sub
jge
sbb
gs
adc
pop
call
ss
adc
test
sub
add
jmp
popf
sub
pop
jae
cld
xor
mov
(bad)
jecxz
rcr
add
xor
nop
out
(bad)
xchg
add
(bad)
retf
ret
or
sbb
popa
outs
dec
(bad)
pop
lods
pop
cwde
pop
cmp
pop
push
jnp
adc
mov
out
inc
pop
cmps
fmul
jg
movs
mov
xchg
pop
jbe
scas
push
mov
mov
push
int
inc
xchg
dec
ret
icebp
jno
jb
sahf
inc
(bad)
jecxz
xchg
pop
and
inc
adc
xchg
xchg
and
add
dec
sub
stc
push
movs
pop
dec
aam
jno
adc
scas
aam
sbb
cmc
std
and
cmp
xchg
xor
or
dec
mov
inc
and
xchg
test
add
or
xor
sahf
dec
xor
push
ror
xchg
jmp
hlt
mov
jmp
inc
push
movs
mov
pop
or
shl
mov
ins
jmp
inc
and
adc
mov
mov
inc
icebp
addr16
mov
xchg
mov
mov
test
sbb
xor
mov
jne
jmp
sbb
icebp
out
sub
jg
mov
cmp
adc
xor
stos
push
stos
iret
in
jmp
inc
sbb
daa
(bad)
(bad)
rcl
add
mov
inc
xchg
xor
mov
dec
xchg
(bad)
aam
xchg
jmp
push
mov
in
sbb
sub
push
jge
add
mov
out
ficom
rol
inc
jmp
fisttp
pop
repnz
add
out
xchg
jg
sub
out
xchg
jmp
dec
adc
jno
rcr
dec
popa
mov
pop
fcmove
jmp
adc
push
(bad)
push
aaa
add
fnstcw
xchg
push
cmps
push
pop
dec
mov
push
std
movs
std
leave
icebp
loopne
and
ja
fldcw
push
in
xor
inc
jge
pop
jb
or
jns
shr
ja
cmp
xchg
mov
mov
sub
(bad)
je
std
sar
adc
pop
push
xchg
push
mov
repnz
fdiv
sahf
mov
lea
jle
jnp
fldcw
sub
dec
test
push
push
icebp
sbb
mov
lea
dec
sbb
lods
cmc
jecxz
call
mov
sbb
ja
mov
mov
xchg
push
cmc
in
mov
or
pop
xor
or
leave
jne
repnz
dec
cmp
pop
test
mov
mov
pop
pop
popf
stos
mov
(bad)
push
loopne
jmp
jo
mov
and
shl
xchg
mov
inc
dec
xor
pop
clc
dec
popa
mov
arpl
pop
cld
mov
stos
sub
outs
outs
stos
mov
outs
xor
in
fnstenv
(bad)
mov
cwde
icebp
rcr
and
fmul
nop
mov
sbb
(bad)
mov
mov
mov
inc
ins
loopne
mov
test
xchg
pushf
ins
jecxz
dec
jmp
gs
sub
inc
fisttp
and
jl
jbe
sub
sbb
retf
pop
sub
mov
push
add
xor
fisubr
and
fcmovbe
fst
cmp
or
and
or
push
inc
mov
cdq
jnp
fmulp
add
loop
call
shl
cmp
cld
inc
mov
call
inc
jecxz
pop
cli
xor
push
push
popf
sbb
sar
shl
(bad)
(bad)
jp
inc
mov
push
dec
dec
icebp
pop
imul
push
aam
mov
pop
test
daa
popf
cmp
push
pop
enter
aam
imul
cmp
mov
aam
mov
imul
cmp
cmp
adc
or
jecxz
inc
xor
fcmovu
and
push
lods
sub
(bad)
lea
sub
mov
adc
dec
sti
mov
and
inc
mov
push
arpl
stos
popa
jle
pop
out
shr
test
mov
dec
out
ins
mov
dec
mov
and
add
in
(bad)
mov
cmp
sbb
rcl
jbe
push
(bad)
mov
lea
sbb
inc
add
jge
scas
(bad)
xor
and
push
adc
fdiv
arpl
stc
cwde
xchg
adc
push
push
sub
jle
xchg
cwde
jbe
pop
inc
cs
std
and
fldenv
mov
pop
pop
lea
xor
jo
dec
xchg
ja
movs
mov
lods
sbb
inc
scas
std
jmp
imul
or
xchg
es
mov
push
cmc
mov
jmp
jae
dec
xchg
dec
popa
push
mov
push
push
cmp
loopne
retf
cmp
mov
ficom
push
mov
pop
add
gs
mov
ss
adc
push
mov
or
ret
jg
mov
and
pop
inc
push
pushf
adc
retf
mov
pop
xchg
outs
mov
push
jl
cwde
addr16
xchg
das
gs
adc
mov
fld
call
scas
popf
sub
dec
stos
test
push
jo
xor
mov
jno
mov
jp
pop
movs
stos
cld
in
sbb
(bad)
iret
cmp
out
mov
cmp
mov
retf
mov
mov
or
repnz
cmp
lods
mov
(bad)
test
xchg
or
xor
repz
rcr
xchg
inc
jae
popa
pop
aas
and
pop
hlt
das
cwde
dec
aam
popf
out
sub
fmul
push
inc
stos
sub
cmp
sti
or
adc
pop
dec
stos
int
jb
jns
sbb
cmp
sub
dec
push
(bad)
loop
jo
cmc
aad
jae
stos
adc
push
les
call
or
scas
xchg
in
mov
dec
xor
(bad)
adc
imul
add
icebp
mov
lea
pop
pop
inc
pop
ficomp
and
dec
pop
dec
adc
jbe
xchg
push
add
cmp
stos
lock
lds
stos
ror
sbb
shl
fisub
mov
mov
jmp
shl
gs
hlt
hlt
add
test
clc
inc
jmp
inc
stc
lods
xchg
pop
xor
ret
scas
pushf
test
(bad)
aas
les
sar
jmp
pop
dec
xchg
mov
mov
nop
dec
les
xor
movs
es
adc
loop
cmps
(bad)
nop
icebp
mov
add
mov
adc
ins
lods
or
call
mov
mov
in
add
imul
xchg
push
sbb
inc
pop
mov
mov
mov
jle
call
mov
out
jp
pop
mov
into
es
test
std
xor
fidiv
cmp
outs
xchg
repnz
loope
mov
xchg
xor
cli
fiadd
sub
xchg
cmps
call
jle
or
inc
sub
xchg
pushf
push
sahf
ret
es
lds
cli
stos
cmps
push
in
aaa
leave
push
(bad)
and
mov
or
lods
add
ret
sub
addr16
jp
aad
(bad)
sbb
fdivr
arpl
xor
mov
xchg
mov
add
aaa
push
out
jb
xchg
out
xchg
enter
hlt
lds
xor
enter
mov
xchg
sub
lods
xchg
ja
ds
rcr
call
sbb
push
and
iret
dec
fldcw
(bad)
movs
xor
out
mov
mov
xchg
pop
dec
pmullw
mov
mov
add
cmp
sub
scas
or
(bad)
int
loop
popf
mov
in
ja
push
gs
(bad)
(bad)
cmp
(bad)
xor
fs
sub
push
shl
idiv
xor
mov
test
add
test
(bad)
cld
je
repnz
xlat
sub
in
dec
push
xor
sti
ds
inc
mov
int3
arpl
mul
repz
retf
cmp
das
mov
sub
mov
push
bound
fiadd
lahf
mov
xor
lea
dec
adc
push
mov
or
rcl
xor
sahf
bound
fist
ss
icebp
nop
dec
adc
push
jnp
add
xor
xchg
and
movs
mov
outs
loopne
inc
and
shr
jno
fadd
or
je
cmp
cdq
lds
add
dec
jb
pop
xchg
xchg
rol
dec
push
rcr
shl
(bad)
push
jae
cmps
stc
xor
xor
in
and
shl
xor
leave
pop
xchg
rcr
push
add
loopne
dec
and
(bad)
fidivr
cmp
xor
cmps
add
xchg
jo
lock
leave
inc
xchg
inc
popf
inc
test
pop
mov
add
jmp
loopne
dec
cmc
pop
fnstsw
add
mov
mov
pop
jl
pop
(bad)
jmp
dec
push
and
inc
dec
fcmovbe
fcmovnu
jge
test
aas
pop
push
ins
or
pop
add
inc
cmp
pop
(bad)
clc
minps
call
add
ss
cmp
sub
xlat
mov
and
sbb
dec
add
cli
stos
and
dec
pop
push
addr16
jle
sub
mov
mov
xchg
xchg
pop
dec
push
test
std
retf
sub
mov
mov
cmps
mov
jbe
xchg
ret
or
call
jmp
jge
push
stos
sub
jnp
adc
mov
imul
fnstenv
xor
mov
pop
sar
in
or
icebp
rcl
popa
xchg
cli
sub
loopne
cli
push
sbb
xchg
xchg
add
sbb
mov
mov
xor
iret
dec
jno
jmp
add
push
push
ret
cmp
movs
dec
mov
iret
or
daa
sbb
icebp
sub
bound
out
aas
pop
into
push
pop
scas
push
xor
repz
mov
cmp
add
cmp
adc
xchg
shl
in
mov
pop
push
test
nop
xor
xor
repnz
jmp
aas
pop
and
mov
mov
loope
ins
mov
lock
xor
fmul
(bad)
fwait
enter
add
sbb
(bad)
das
add
das
xor
ja
(bad)
fisttp
sub
dec
jne
or
xor
xor
(bad)
xchg
cmp
xchg
shl
js
cmps
outs
jb
pop
ins
jno
ds
loopne
retf
sub
pop
mov
inc
jnp
inc
cmps
jmp
sbb
jp
(bad)
dec
imul
test
cmp
xor
sti
sub
xor
cmp
and
lahf
cmps
mov
fwait
leave
test
inc
fldenv
cmp
in
fldcw
xor
and
sub
pop
adc
inc
rcl
ficom
adc
out
imul
int
(bad)
sbb
pop
(bad)
dec
imul
dec
pop
adc
mov
pop
sbb
jge
stos
(bad)
mov
call
or
jmp
xor
adc
adc
mov
mov
(bad)
std
addr16
mov
leave
das
inc
(bad)
lahf
aas
pop
repz
cld
fidivr
fadd
mov
jo
xor
(bad)
pop
xor
xor
mov
add
add
jns
cmp
pusha
add
mov
sbb
iret
adc
mov
repz
aam
ss
push
xor
cli
mov
dec
add
fnsave
dec
sbb
sub
icebp
cmp
call
sar
pop
test
or
sbb
jge
dec
cmp
shr
cmp
fs
rol
das
mov
cld
push
jb
push
stos
cli
sbb
sub
mov
add
mov
imul
push
mov
sbb
jae
push
sahf
loope
imul
aam
in
xchg
xor
lods
in
out
(bad)
popf
call
sub
retf
outs
enter
and
popf
in
bnd
sub
jg
fisttp
adc
mov
jmp
sbb
sub
mov
cli
cmp
sub
iret
cli
jle
lds
jg
pop
jle
cmps
xchg
data16
inc
mov
stos
shl
xchg
mov
cmp
(bad)
jmp
pop
xlat
je
into
fidivr
cmp
pop
push
mov
adc
fmul
add
adc
xchg
inc
test
(bad)
cwde
shr
inc
mov
xor
sbb
xor
bound
xchg
jmp
sbb
in
ja
fcomp
repz
mov
mov
ret
test
retf
rcl
pop
je
add
xchg
loopne
or
ret
imul
inc
mov
mov
fild
int3
aas
loope
(bad)
xor
mov
(bad)
mov
push
cmp
(bad)
fs
push
jno
sti
out
ja
inc
add
(bad)
mov
xor
mov
cmp
sub
enter
lds
dec
enter
js
sub
pop
push
movs
cmp
imul
mov
in
mov
popf
sar
rcl
xor
or
lods
push
retf
pop
dec
fs
(bad)
sbb
jl
sub
out
pop
(bad)
div
sub
and
push
or
sbb
(bad)
jmp
ins
loope
pop
nop
(bad)
cdq
ficom
pop
movs
adc
hlt
xchg
cmp
int3
adc
mov
cld
fsubrp
dec
lea
cdq
sbb
movs
pop
xor
outs
mov
cdq
mov
fst
push
sub
es
fimul
pop
outs
mov
aam
push
movs
and
dec
push
jmp
mov
push
out
js
or
add
add
xchg
das
mov
push
icebp
dec
out
(bad)
mov
mov
loop
(bad)
or
jmp
pushf
xor
xchg
popa
rcr
mov
jmp
nop
mov
out
aad
mov
inc
xchg
pop
inc
js
push
sbb
dec
(bad)
pop
pushf
sub
adc
leave
cmc
js
jns
add
inc
add
sbb
xor
and
push
sbb
loope
in
mov
pop
xor
or
inc
jns
retf
loopne
add
xchg
sub
rcl
sbb
shl
les
imul
mov
out
xor
loopne
inc
mov
push
mov
jmp
fsubrp
jno
pushf
xor
xor
xlat
and
or
xor
repz
cmp
add
xchg
sbb
sahf
adc
mov
pop
in
test
xor
scas
xor
rcr
loopne
mov
(bad)
push
leave
jmp
adc
mov
ds
fistp
lea
jle
call
xchg
mov
scas
or
into
repnz
push
cmp
sub
add
xor
rcl
nop
push
mov
push
push
adc
sbb
pushf
fcmovnbe
cmp
mov
retf
push
and
sub
jo
xor
sbb
dec
ret
lahf
or
(bad)
outs
or
mov
xlat
push
mov
inc
sub
mov
mov
test
cmp
ret
dec
outs
popf
and
int
sbb
je
js
or
sahf
dec
shl
jne
test
cmp
pop
test
retf
test
or
push
cmp
adc
add
jno
sbb
fild
sahf
les
ins
or
out
dec
or
clc
ss
jmp
lahf
(bad)
call
cmp
dec
dec
ds
or
jne
fnstenv
xor
or
sbb
sub
and
sub
sbb
int3
inc
mov
cmc
cmp
retf
cs
xor
mov
mov
xor
push
cli
loope
ins
mov
enter
mov
and
xchg
mov
repnz
in
dec
ins
ds
jae
fsubr
jge
sub
pusha
ins
(bad)
jns
adc
das
(bad)
adc
mov
arpl
xchg
clc
dec
into
jge
dec
inc
les
aam
adc
mov
int3
cmp
shl
inc
call
out
mov
neg
xchg
inc
sbb
add
cmps
out
and
imul
stos
ret
ins
push
mov
sub
sbb
mov
mov
mov
xchg
mov
or
cmp
jne
test
outs
cmc
test
popf
and
xchg
jp
(bad)
movs
iret
cwde
mov
xchg
mov
shl
push
repz
je
nop
repz
pop
call
scas
cmp
sub
xchg
nop
iret
cwde
fs
adc
out
sub
div
imul
or
mov
hlt
adc
pop
sbb
aad
add
sub
cmp
jge
ins
mov
dec
fcmovnbe
std
out
scas
adc
cld
lahf
ret
xor
add
imul
jne
sti
int
(bad)
fst
cmps
fsub
retf
repz
mov
cli
lods
cmp
xchg
pop
mov
test
mov
pop
aad
(bad)
pop
fmulp
xchg
or
fdivr
sub
call
sub
inc
jo
sar
push
xchg
pop
into
pop
jmp
add
pop
aad
mov
pop
adc
call
lock
pop
fs
pop
(bad)
loope
(bad)
hlt
sub
jmp
inc
mov
leave
sbb
push
and
push
xchg
adc
push
(bad)
cmps
xor
and
bound
imul
sti
sub
pop
adc
cld
xor
rcl
cmp
movs
movs
cmp
hlt
(bad)
cmp
into
cdq
and
ficomp
jle
leavew
les
inc
scas
int3
or
mov
adc
xor
loope
popf
jl
sbb
int3
cdq
jo
ret
lods
js
daa
mov
xchg
cdq
push
loope
int3
push
fs
lea
ret
cmps
and
inc
xchg
pop
popf
ret
imul
push
aad
jg
popf
push
push
pop
dec
icebp
add
pushf
or
adc
jbe
mov
inc
cmp
imul
rcr
into
sub
sub
(bad)
popa
shr
pop
fsubr
(bad)
(bad)
cmp
and
and
jne
dec
stos
idiv
dec
sub
mov
pop
mov
gs
arpl
repnz
mov
xchg
push
icebp
sbb
ins
and
and
jne
pushf
push
adc
fmul
xor
scas
ds
fisub
cmps
ficomp
dec
movs
ja
add
sub
stc
push
sar
cwde
fadd
sub
data16
pop
(bad)
push
sub
mov
sbb
sar
add
inc
mov
cmps
gs
cli
pop
frstor
mov
nop
call
add
fsubr
loop
jg
mul
xor
mov
mov
pop
or
imul
xor
dec
mov
sbb
adc
adc
mov
aam
adc
dec
push
sbb
jae
inc
fisubr
ins
sub
(bad)
xor
ins
imul
jmp
dec
(bad)
int
ret
ins
jne
fucomip
xchg
jb
jno
cmp
sub
loopne
cmp
sbb
(bad)
fdiv
pop
pop
dec
les
push
movs
sbb
sbb
mov
jb
xor
adc
xchg
mov
loopne
pop
jne
or
(bad)
int3
paddd
fadd
add
imul
pop
cmc
addr16
std
neg
push
pop
mov
push
pop
jnp
enter
(bad)
jmp
cs
out
(bad)
cmp
mov
lods
xor
mov
push
push
sub
in
cmp
push
cmp
mov
pop
addr16
test
sti
cmp
adc
icebp
retf
xor
jl
div
test
mov
das
sub
sub
push
pop
push
inc
xchg
int3
add
inc
daa
mov
or
jbe
xchg
in
lds
in
out
js
inc
call
(bad)
std
sub
in
aaa
push
ins
push
adc
scas
pop
or
or
cwde
fs
sbb
test
or
sbb
mov
neg
push
setno
jo
mov
scas
in
dec
lods
int
cli
sar
pop
jl
fmul
push
cld
or
jl
pushf
mov
(bad)
pushf
retf
cmp
lods
loope
cmp
lahf
movs
addr16
or
dec
inc
jo
fs
jge
scas
jl
jle
mov
nop
in
sahf
cmps
in
ror
hlt
fsub
imul
pop
les
enter
pushf
idiv
inc
addr16
test
sub
inc
imul
jns
pop
ret
add
daa
dec
fidiv
in
mov
ja
stos
or
stos
dec
push
les
(bad)
loop
or
jno
mov
loopne
dec
and
mov
push
add
out
dec
adc
in
xchg
jle
or
pop
out
pop
test
aad
bound
aas
xchg
ins
xchg
cdq
(bad)
xchg
lods
sti
or
xor
push
inc
fucomi
or
rcr
ins
loope
jl
dec
nop
push
add
cmp
dec
retf
and
xor
xchg
ret
outs
cmp
(bad)
jle
repnz
inc
test
xchg
dec
inc
lods
test
sar
ja
add
cmp
dec
ins
iret
pop
shr
imul
sbb
pop
add
shr
shl
pop
loop
dec
jns
(bad)
cwde
pusha
inc
cmp
mov
fnstenv
cld
(bad)
fcmovnbe
cmps
in
daa
push
jo
sti
mov
sahf
loopne
xchg
lea
mov
dec
call
popf
dec
jp
outs
(bad)
jnp
mov
leave
adc
jle
lock
mov
mov
pop
pop
popa
cmp
and
int
lods
js
ret
or
ss
aaa
pop
lods
imul
or
es
adc
in
mov
test
aam
in
stos
dec
add
fadd
bound
push
ja
pop
jo
sub
rcl
clc
call
in
or
repz
stos
add
mov
xchg
sahf
mov
mov
ins
mov
das
in
pop
sub
fucomp
inc
icebp
jae
mov
repnz
inc
repnz
ins
retf
sbb
pop
adc
sub
imul
mov
add
xor
gs
mov
fwait
jne
cld
xor
cmps
sub
or
ins
cmp
inc
loope
xchg
(bad)
mov
push
in
addr16
hlt
stos
push
sub
mov
xor
ins
dec
dec
cmp
and
call
adc
jmp
sub
xchg
mov
mov
call
xchg
mov
add
jle
fdiv
jecxz
jbe
or
not
mov
mov
adc
ins
clc
(bad)
cmps
fsub
sub
lods
add
stos
jecxz
sub
out
mov
cmps
movs
jmp
push
jmp
ret
lds
imul
mov
in
mov
and
popf
das
(bad)
mov
jmp
retf
and
scas
imul
add
mov
sub
movs
pop
into
daa
sar
xor
or
push
mov
enter
or
movs
xchg
adc
int3
aam
into
pop
or
jns
mov
repnz
(bad)
inc
mov
icebp
int3
retf
pop
movs
sar
inc
and
es
int3
stos
mov
pop
div
movs
in
in
into
scas
cmp
xchg
mov
adc
je
sti
in
lods
xchg
dec
icebp
jmp
loopne
mov
jmp
ins
push
inc
mov
dec
mov
lea
outs
push
adc
sbb
stc
cmp
int3
mov
push
xchg
adc
outs
mov
jbe
xchg
shr
mov
add
inc
jmp
ds
cwde
add
loope
retf
jb
sub
xlat
outs
mov
outs
fist
pop
(bad)
sahf
pop
retf
cmp
out
retf
outs
jne
aas
and
push
rcr
(bad)
fsub
dec
inc
jae
dec
adc
or
sti
nop
jo
push
aaa
sbb
xchg
imul
push
sub
xchg
bound
dec
fisubr
jmp
lahf
rcr
push
xchg
ret
pop
shr
mov
sbb
rcr
cmps
or
daa
jecxz
iret
add
shr
add
dec
loopne
int3
int
push
ret
call
(bad)
push
add
inc
out
pushf
out
mov
add
xchg
fmulp
pop
lods
ins
adc
fmul
(bad)
mov
retf
sar
cmp
mov
jns
loopne
add
sub
repnz
pusha
or
push
aad
add
ret
vandnps
addr16
fidivr
retf
push
je
mov
fsubr
imul
jmp
test
xchg
scas
sbb
in
dec
cmp
sub
mov
push
dec
scas
in
jmp
retf
inc
mov
fwait
in
ret
add
je
pop
mov
push
adc
arpl
mov
cs
data16
rcl
jb
inc
mov
xchg
adc
cmp
push
jae
inc
or
mov
mov
in
jo
and
mov
mov
movs
jl
adc
xchg
push
movs
movs
xor
mov
sub
jp
add
nop
dec
imul
pop
mov
sbb
xor
ds
xlat
cmp
dec
call
sbb
fist
xor
jb
fidivr
aaa
popa
adc
jne
sbb
adc
lock
pop
cmp
pop
pop
dec
jb
loopne
lahf
dec
sub
aam
gs
cmps
loopne
daa
mov
xchg
rcl
mov
repz
fcomi
jmp
push
inc
xchg
dec
and
fisttp
cmovbe
push
fisubr
mov
lea
loopne
fnstsw
jecxz
and
lea
fnsave
lock
jmp
mov
inc
fsub
and
mov
jb
mov
jp
dec
call
outs
jns
ins
hlt
int
stos
daa
xchg
sahf
int3
mov
popa
in
dec
(bad)
dec
enter
inc
jmp
imul
(bad)
lea
push
dec
sbb
sahf
xchg
mov
lock
pop
xor
dec
xchg
xchg
test
jb
bound
inc
mov
adc
test
inc
out
cli
lds
(bad)
push
ret
fist
add
xchg
jno
cli
cmp
enter
gs
inc
(bad)
repnz
not
xchg
gs
lock
icebp
xchg
and
jmp
xor
push
ins
out
mov
lock
xor
cmps
retf
leave
pusha
neg
lds
dec
inc
fwait
sar
in
and
jmp
arpl
xchg
sub
jns
mov
mov
stc
iret
xor
jg
mov
inc
xchg
mov
inc
xchg
std
push
enter
div
sbb
push
sahf
leave
xor
lahf
jno
(bad)
jle
sar
int
scas
repnz
mov
jg
dec
fs
int3
ret
dec
inc
fbstp
jns
movs
pop
inc
xchg
xchg
jae
cmp
in
pop
icebp
loope
add
mov
sbb
cmps
mov
push
int3
retf
pop
movs
xchg
fisubr
mov
daa
jg
xor
mov
pop
mov
cld
add
push
retf
mov
jp
inc
ss
cmps
push
call
mov
into
sbb
mov
mov
das
cmp
std
xchg
xchg
push
sbb
movs
imul
call
in
fisubr
xchg
xlat
mov
pop
out
nop
rol
and
sub
dec
fprem
cmp
sub
pop
mov
sbb
das
or
inc
jecxz
shr
aam
xchg
jo
add
mul
sub
nop
sub
retf
sub
or
ret
inc
adc
je
outs
cmps
and
ins
aaa
or
inc
cs
dec
mov
pop
ffreep
call
ins
fcmovnb
outs
jge
icebp
cmp
jb
jl
xchg
push
xchg
add
push
rol
xchg
(bad)
inc
push
push
es
jmp
add
stos
adc
data16
adc
lods
push
and
mov
sub
push
int3
pop
mov
ja
shr
push
fiadd
mov
imul
scas
mov
ins
std
es
cmp
ror
test
fcomp
xchg
mov
sub
jnp
cld
cmps
int3
retf
aam
fisubr
jo
adc
and
je
jne
xchg
inc
jecxz
adc
mov
xchg
mov
sub
hlt
hlt
push
mov
ret
not
dec
pop
mov
pop
inc
xor
cmp
int
and
repnz
inc
or
fs
data16
dec
dec
aas
inc
mov
arpl
aaa
sub
ror
xor
loopne
jnp
iret
jae
stc
cmp
scas
push
xor
mov
lea
push
sub
sub
lods
aam
mov
rcl
push
mov
loopne
repz
pusha
call
jl
jno
(bad)
push
(bad)
popa
(bad)
out
loope
repnz
retf
cmps
repz
popfw
daa
mov
leave
push
sbb
inc
ds
xchg
inc
(bad)
addr16
pop
(bad)
xor
jae
scas
add
xor
movs
jae
inc
or
xchg
push
shr
fisub
pop
jnp
mov
or
dec
pop
cmp
retf
jne
mov
gs
shl
mov
test
dec
pop
push
mov
test
push
pop
fimul
sub
cdq
push
pop
jnp
int3
and
out
mov
dec
pushf
adc
and
xor
xor
and
dec
into
out
fwait
neg
ret
sub
out
mov
dec
dec
mov
mov
(bad)
pop
xchg
mov
mov
fdiv
xchg
mov
mov
xchg
push
imul
loope
fild
xchg
dec
xchg
pop
jb
and
cmp
add
test
jae
aam
push
inc
gs
add
jb
cmp
xor
xchg
xchg
dec
adc
adc
xor
scas
shr
retf
ficomp
sar
jge
fadd
mov
xchg
pusha
jo
jbe
fwait
out
popa
sub
mov
repz
cmp
hlt
sub
popf
mov
(bad)
call
dec
or
div
pop
mov
pop
daa
inc
inc
int
mov
fdivr
in
lahf
sti
mov
test
fst
xor
mov
test
dec
lds
mov
dec
pop
mov
mov
xor
inc
punpckhdq
xor
enter
pop
jo
add
stos
in
fistp
cmp
add
pop
inc
outs
and
mov
and
es
dec
and
xchg
jmp
mov
clc
and
test
aas
adc
lds
xchg
(bad)
dec
jns
mov
shr
jl
icebp
jle
(bad)
stos
pushf
nop
xor
jg
xchg
fnstenv
inc
je
loope
xchg
shr
sbb
push
push
jo
cld
inc
mov
fmulp
add
add
(bad)
outs
mov
inc
inc
and
cmp
js
inc
dec
nop
mov
adc
lea
xchg
stc
dec
rcr
ret
pop
pop
hlt
outs
mov
jmp
and
cld
sbb
jo
idiv
sub
push
mov
fs
pop
inc
cmc
jo
push
lds
out
loopne
add
pop
loopne
lds
sub
shr
cmp
outs
mov
bound
ret
push
lods
daa
pop
and
mov
imul
pop
sub
jmp
lods
mov
or
lods
mov
lods
xor
fst
sub
mov
xchg
clc
hlt
sbb
scas
(bad)
or
pop
push
dec
pushf
ret
jae
in
sbb
cmp
jno
fst
ins
xchg
(bad)
js
addr16
add
jecxz
outs
and
xchg
mov
push
das
pop
mov
xor
cmp
jmp
xor
iret
neg
aam
rcr
imul
cmp
dec
sbb
inc
jl
xor
xchg
rol
fst
(bad)
call
xor
xor
(bad)
mov
sub
lahf
mov
test
fcomp
mov
cs
mov
imul
xchg
call
adc
int
nop
or
shl
mov
dec
es
div
stos
repnz
mov
pop
and
scas
fst
pop
lahf
ins
(bad)
test
(bad)
ficom
leave
push
sbb
outs
cmp
push
aad
and
sbb
and
lea
jbe
je
xchg
push
and
ficomp
mov
mov
call
jne
lods
pop
mov
jmp
add
mov
rcl
push
adc
scas
pop
push
mov
adc
iret
pop
jne
cs
fadd
sahf
jo
push
nop
addr16
out
add
pop
dec
mov
mov
or
das
gs
out
and
stos
int
or
sbb
adc
jae
sub
mov
lea
movs
test
test
mov
xor
inc
push
mov
pop
(bad)
sti
jne
mov
je
scas
scas
add
loope
dec
pushf
fisttp
mov
jmp
test
push
jg
inc
inc
push
inc
ins
xlat
(bad)
lahf
mov
xchg
inc
add
adc
xor
lahf
movs
jg
(bad)
adc
inc
cmp
(bad)
ins
push
xchg
inc
mov
iret
fdivr
enter
nop
sub
rcr
int3
scas
fs
sub
mov
pop
aam
fwait
dec
fsubrp
dec
popa
cmp
cli
pop
mov
jbe
sbb
sub
inc
fstp
outs
int
adc
add
stos
pop
test
test
lods
pop
push
ja
inc
pop
sbb
cli
mov
scas
xor
stc
test
mov
xor
in
adc
adc
ins
adc
into
in
shl
push
fadd
imul
cmp
mov
stos
test
push
dec
push
adc
fisubr
mov
add
js
pop
mov
push
sub
fmul
jmp
jge
test
sar
cmp
add
mov
in
sub
jnp
ins
je
push
push
jmp
fild
inc
mov
sub
lea
push
movs
and
jnp
mov
fistp
sbb
ins
xchg
push
aam
retf
inc
inc
mov
shl
test
js
les
pop
out
fwait
xchg
stc
mov
mov
sub
ds
test
icebp
sahf
mov
test
mov
push
loop
rcr
(bad)
mov
sahf
(bad)
repz
packuswb
jnp
dec
dec
or
in
xchg
iret
xor
sub
and
mov
call
jle
fldenv
sub
mov
loopne
adc
push
mov
mov
ins
jecxz
mov
cmps
paddq
mov
(bad)
mov
cwde
xor
push
loope
sub
mov
cdq
and
or
fcmovnu
les
jmp
mov
jecxz
nop
cdq
test
add
lahf
cmp
dec
dec
xor
mov
mov
inc
retf
bound
test
push
mov
or
outs
lods
fs
pop
jo
xchg
and
mov
movs
lock
xlat
sbb
fmul
ret
pop
retf
shr
movs
xor
xlat
mov
in
pop
cs
sbb
(bad)
shl
(bad)
ss
test
mov
loope
in
das
fisub
mov
icebp
cmp
int3
mov
mov
xor
bound
stc
sub
fs
fnstsw
inc
jmp
cdq
or
dec
in
jmp
inc
and
movs
hlt
jge
mov
mov
enter
loopne
push
mov
(bad)
in
push
inc
mov
inc
mov
push
shr
inc
xchg
jg
mov
adc
test
adc
ret
ret
std
loop
dec
and
add
adc
in
push
das
mov
mov
imul
xchg
add
call
arpl
mov
mov
inc
xchg
gs
cli
pop
pop
ror
ins
bound
cmp
aaa
inc
cs
aaa
jbe
pop
adc
or
aaa
xor
adc
fadd
test
mov
push
or
jp
rcr
push
jg
scas
adc
sbb
js
sub
imul
sbb
not
sbb
fs
jmp
in
cmc
sahf
fcmovu
pop
adc
push
adc
les
adc
jge
xor
pop
pop
inc
cmp
jns
xor
jbe
rcr
pop
dec
movs
mov
mov
test
cmp
out
icebp
push
push
inc
sbb
push
or
aad
sahf
outs
cmp
int3
outs
xchg
pop
mov
adc
xor
mov
jo
fnstenv
mov
ret
adc
adc
push
fiadd
or
outs
xchg
xchg
add
retf
les
lods
lock
rcl
stos
jbe
inc
dec
shl
and
cmp
das
lahf
clc
ds
push
mov
daa
loopne
fs
xor
test
(bad)
sahf
cmps
frstor
rcr
dec
aaa
fs
(bad)
inc
add
and
pop
jbe
mov
std
xchg
sub
mov
dec
int
aam
dec
ret
and
ins
inc
pop
fstp
mov
adc
pop
sub
ds
jae
xor
xor
dec
jo
fstp
mov
xchg
fsub
ficom
stos
icebp
xor
cmp
scas
les
lods
jg
push
mov
stos
imul
aad
cmps
fcmovne
stos
jnp
xor
sub
sbb
mov
sub
xor
cmps
mov
mov
mov
mov
or
pop
shr
repnz
jge
loopne
ss
jge
test
loopne
inc
sbb
aaa
cmp
out
mov
in
loop
mov
adc
cs
neg
aad
sbb
inc
push
mov
add
and
or
mov
repnz
(bad)
mov
sbb
icebp
retf
daa
cmp
test
ins
sbb
lods
(bad)
mov
xchg
imul
retf
inc
sbb
jo
jmp
add
std
cld
aas
add
out
xchg
pusha
inc
int3
lea
in
inc
jns
sub
xlat
je
arpl
push
xor
lahf
xor
mov
push
neg
loop
xchg
in
mov
hlt
mov
mov
push
push
fsubp
dec
jmp
fisttp
sub
rcr
stc
minps
bound
cdq
dec
test
and
lods
jp
rol
or
pop
mov
int
into
sub
cmps
and
(bad)
fs
das
pop
fsubr
fistp
xchg
pop
push
push
ret
inc
mov
push
in
out
sbb
push
in
stos
mov
cli
sbb
popa
jge
xchg
mov
fild
add
mov
mov
pushf
xlat
icebp
sub
dec
fstp
cli
jl
sub
repnz
popa
dec
into
cmps
and
ds
pop
mov
jecxz
mov
push
call
and
out
leave
xor
cli
mov
mov
and
sbb
outs
lods
sti
mov
fisttp
and
and
fs
push
mov
std
cmc
xlat
add
frstor
xchg
outs
jecxz
pop
out
ja
pop
sar
mov
add
jns
outs
in
out
fsubr
jns
(bad)
addr16
sub
loope
mov
popa
mov
sub
add
loope
xchg
test
(bad)
mov
cmp
outs
jle
outs
mov
dec
xlat
cs
loopne
in
dec
sbb
jl
enter
mov
inc
inc
add
imul
pop
nop
jo
(bad)
pusha
jns
fnsetpm(287
xchg
pop
fxch
push
outs
dec
sbb
add
and
and
mov
iret
fs
dec
or
mov
and
dec
mov
icebp
fcmove
and
and
mov
xchg
adc
dec
xchg
es
mov
push
sub
cdq
iret
(bad)
dec
dec
mov
shr
inc
nop
pop
retf
aas
(bad)
xchg
(bad)
pop
ds
outs
pop
or
xchg
pop
jnp
imul
push
and
ret
popf
cmps
mov
out
add
lock
loop
push
pop
into
or
sbb
mov
cmp
movs
push
pop
push
mov
test
pop
pop
outs
out
add
or
je
adc
mov
mov
mov
sub
fnstcw
nop
mov
xchg
jle
aaa
out
int3
push
fwait
cmp
or
or
adc
aam
cmp
jecxz
cs
sbb
in
mov
add
mov
pushf
sti
scas
pop
xchg
lods
push
movs
cwde
push
jmp
sub
stc
adc
mov
mov
sbb
pop
cmp
clc
cmp
push
cmp
jo
stos
arpl
xor
mov
mov
sti
pusha
div
pop
or
rcl
push
mov
adc
cmps
into
jg
pushf
js
outs
pop
inc
inc
nop
sub
fimul
bound
das
jecxz
jbe
pusha
xor
outs
loopne
push
cmovge
shl
call
dec
dec
jg
stc
pop
xchg
or
sub
ror
fist
(bad)
mov
mov
or
push
ins
add
ja
ret
mov
jne
sub
push
nop
mov
popf
cwde
in
fs
or
mov
mov
cmp
cwde
mov
adc
adc
inc
iret
adc
imul
sub
lds
mov
es
push
sbb
jmp
jae
jmp
jae
push
(bad)
fstp
pop
lds
or
pop
sub
stos
movs
push
jl
push
sbb
mov
xchg
mov
sub
mov
out
add
jle
dec
les
mov
jmp
mov
sbb
fsubr
jp
mov
inc
sub
je
jle
xor
sub
(bad)
sub
leave
test
ins
(bad)
pop
push
xchg
jecxz
mov
leave
mov
stos
js
or
xor
add
pop
sbb
iret
pop
jb
and
sub
sahf
jo
cmc
dec
push
or
in
dec
mov
sbb
imul
jp
iret
popfw
xor
pop
add
sub
mov
push
sbb
sar
ret
mov
xchg
pop
dec
int
jl
adc
add
pop
jle
jl
pop
sub
push
movs
xchg
mov
pop
enter
mov
mov
call
mov
lock
imul
arpl
aam
jl
in
cmp
ds
cmp
lods
out
adc
lahf
cmp
dec
xchg
fnsave
mov
cs
(bad)
jle
shl
mov
mov
loopne
pop
aas
loop
cdq
mov
call
loope
mov
sbb
push
sub
imul
push
jo
adc
fcmovu
cmp
icebp
aaa
cld
(bad)
push
pop
retf
push
loopne
daa
idiv
mov
jb
fild
div
pop
jae
and
repnz
jle
push
test
push
push
sar
adc
xor
pop
pop
stos
mov
imul
add
mov
push
(bad)
cmp
push
stos
fidivr
xchg
and
inc
cmp
sbb
xor
pop
retf
xchg
add
add
repz
enter
call
inc
lds
scas
out
cmps
cmp
mov
jmp
mov
push
pushf
jo
dec
aaa
lds
les
jns
js
fs
and
inc
repnz
into
repz
shr
aam
shl
hlt
push
cs
push
sub
cld
stos
lock
ins
clc
in
mov
cmps
xor
pop
popa
out
hlt
ins
xchg
add
add
sbb
pop
and
mov
cli
pop
mov
shl
movs
cmp
inc
mov
leave
cmp
cmp
jl
push
mov
sbb
dec
inc
cmp
cli
ret
ins
loopne
sbb
sub
and
jl
clc
popf
dec
and
xchg
ffreep
ja
mul
loop
(bad)
cld
movs
push
xchg
test
cmc
(bad)
push
pusha
cmc
inc
inc
jp
aam
jmp
mov
sub
scas
rcr
jns
push
fnstenv
test
std
pusha
enter
(bad)
mov
pop
das
sbb
and
out
lods
test
lock
lds
mov
mov
sbb
push
imul
xchg
mov
cmps
push
push
sub
loopne
sub
add
ror
push
mov
outs
outs
shl
xor
or
enter
sbb
push
repnz
mov
shl
lods
rcl
add
loopne
and
rcr
xchg
mov
(bad)
cmp
ret
xchg
cmc
adc
cli
mov
fild
fwait
repnz
adc
fnsave
cmp
(bad)
jmp
movs
(bad)
nop
jnp
mov
mov
mov
pop
popf
sbb
sbb
mov
ror
jae
adc
add
cld
mov
mov
xor
pop
jb
inc
jmp
cdq
pop
jl
in
jo
jbe
mov
fcomip
cs
rcr
dec
and
test
sbb
lock
xor
jns
inc
jmp
fidivr
push
ja
inc
mov
fmul
and
shr
mov
push
movs
pop
sbb
sbb
mov
imul
call
or
std
call
in
(bad)
out
outs
in
xchg
push
pop
push
xchg
pusha
rcr
mov
lods
mov
test
in
jg
adc
cmps
mov
in
jno
repnz
push
(bad)
xlat
enter
pop
jecxz
pop
ud0
mov
mov
pop
dec
adc
or
sbb
test
xchg
sbb
or
retf
adc
jl
(bad)
cmp
fdivr
mov
xchg
arpl
test
inc
pop
imul
pop
xchg
push
test
and
int
push
arpl
in
nop
stos
pop
jge
pop
test
js
adc
mov
jg
mov
es
ss
jb
test
fiadd
sub
retf
jmp
in
push
jmp
mov
adc
mov
adc
fidiv
call
outs
nop
(bad)
cmc
dec
pop
xchg
sbb
and
jmp
inc
bound
ficomp
icebp
pushf
xchg
int
rcl
fimul
lods
jbe
test
inc
or
xor
outs
inc
xchg
xor
mov
xchg
add
cld
rcr
jb
adc
mov
rol
call
push
adc
mov
adc
pop
or
pop
in
jecxz
imul
test
sar
je
push
test
jge
aad
xor
(bad)
pop
mov
xchg
(bad)
(bad)
sbb
jns
jmp
mov
test
inc
sbb
add
or
add
mov
push
xchg
stos
aad
ficom
mov
xor
and
pop
adc
cmp
ss
rcr
int3
mov
imul
stos
mov
(bad)
dec
cs
icebp
adc
loope
sbb
dec
shr
jmp
sbb
dec
jecxz
xor
nop
leave
sbb
or
add
aam
aas
sub
pop
lock
(bad)
sar
sysexit
and
popf
jg
shr
mov
loopne
xchg
dec
push
or
bnd
adc
dec
lods
cmp
cld
jp
ror
pop
jno
hlt
std
ins
jo
lea
clc
mov
pop
jb
cmps
movs
jae
cmp
add
out
inc
jl
movs
stos
je
xor
xchg
iret
scas
push
(bad)
ror
loop
or
sahf
jge
mov
mov
int
push
mov
xor
jbe
imul
push
fwait
xor
idiv
adc
(bad)
jne
pop
sbb
or
dec
jbe
cdq
int3
ror
xchg
xchg
fstp
mov
mov
pop
dec
push
je
data16
jecxz
sub
push
xlat
sub
fst
rcr
add
or
or
jl
scas
and
mov
xchg
clc
in
mov
(bad)
dec
jnp
aaa
scas
and
jecxz
xchg
xchg
xchg
inc
dec
jg
popa
or
shl
(bad)
xchg
test
jl
jb
cmps
inc
cmp
hlt
sub
and
(bad)
daa
out
pop
nop
mov
xchg
ins
popa
jge
lahf
icebp
aas
stos
ficom
aas
out
dec
and
jb
pop
lock
stos
mov
data16
dec
add
or
fistp
test
mov
movs
xchg
loop
sbb
(bad)
adc
add
or
mov
leave
ins
add
test
mov
sub
movs
xchg
and
(bad)
cmps
shr
adc
out
add
mov
dec
icebp
es
xlat
(bad)
sti
fistp
and
xchg
sub
je
ds
xor
shr
test
fcom
xchg
or
loopne
stos
xor
xchg
cmps
call
test
(bad)
mov
int
pusha
pop
mov
cs
rcl
sub
add
or
xor
int3
fild
(bad)
jns
or
ret
inc
pavgb
bnd
hlt
inc
rol
sub
mov
in
out
in
dec
mov
mov
cdq
jle
in
mov
adc
and
(bad)
jae
mov
ja
mov
xor
icebp
fimul
xor
push
movs
sbb
add
pop
jg
ds
sbb
in
and
xor
push
pop
mov
mov
shr
aaa
or
sbb
cmp
mov
pop
mov
(bad)
in
adc
pusha
inc
add
movs
inc
aad
cmp
cmp
dec
jg
sbb
xor
sahf
cmp
cwde
and
popa
(bad)
repz
ja
and
les
jge
aad
sub
dec
push
jmp
jno
icebp
add
cmc
mov
inc
cmc
cmp
ror
xchg
(bad)
push
inc
mov
retf
int3
mov
inc
sub
sub
call
jl
sti
mov
mov
pop
movsx
pop
retf
mov
pop
test
pusha
popf
sbb
and
shl
in
push
jle
test
mov
pop
adc
lods
test
loop
or
lea
jae
std
jne
in
fcmovu
mov
mov
clc
cwde
pop
mov
dec
inc
pop
lahf
inc
push
xchg
jb
push
mov
lahf
sbb
or
pop
adc
add
pop
inc
mov
ret
loop
das
bound
mov
test
ds
fcom
aam
mov
fadd
and
sub
xor
dec
mov
pop
cmps
dec
cli
call
or
test
xchg
sbb
and
in
mov
mov
xor
push
inc
adc
add
xor
shr
ror
pop
and
pop
hlt
mov
imul
rcl
imul
xor
push
jns
and
sbb
dec
sub
jp
fnstsw
bound
pop
cmp
scas
push
or
inc
push
cli
outs
sbb
cmp
push
add
scas
cmps
pop
(bad)
jnp
cld
xor
or
jno
sub
inc
stos
es
mov
loope
cmp
push
inc
(bad)
lds
xchg
and
add
and
mov
jmp
(bad)
xchg
sbb
clc
mov
leave
call
xor
mov
imul
(bad)
adc
or
retf
sub
add
or
mov
pop
sbb
dec
mov
bnd
mov
stc
cmp
fld
jl
jg
cli
jmp
add
xchg
xchg
adc
pop
cmps
cmp
pop
push
outs
mov
xor
scas
mov
(bad)
pushw
out
loopne
pop
sub
mov
ins
or
push
adc
adc
fwait
pop
sub
imul
stos
add
inc
inc
mov
test
add
pop
xchg
rol
cmp
jg
sar
pop
outs
lods
test
loop
jne
push
imul
or
mov
scas
std
cmp
hlt
vpunpcklbw
pop
test
jb
jnp
mov
mov
xor
mov
add
in
adc
test
xchg
dec
cmc
cmp
adc
or
shl
lahf
test
jg
repnz
and
mov
popa
push
out
int3
mul
cmp
pop
add
add
je
cld
sbb
lods
mov
movs
(bad)
or
mov
push
mov
outs
and
scas
push
sahf
xor
test
inc
xor
out
jecxz
or
cmp
sub
sti
dec
jle
cmps
mov
and
adc
xchg
jns
push
cmp
or
xor
jo
mov
(bad)
xchg
(bad)
xchg
call
(bad)
aad
aaa
or
cmps
or
sbb
jmp
(bad)
xor
imul
dec
call
mov
jno
xchg
dec
(bad)
pushf
jle
add
outs
jle
mov
xor
sub
xor
sub
ds
pop
imul
cli
dec
jle
xchg
or
mov
int3
aas
in
ficomp
clc
dec
retf
pushf
lahf
mov
dec
dec
rcr
pop
fiadd
xchg
cmp
cmps
mov
mov
mov
fsub
fild
mov
adc
int3
adc
(bad)
(bad)
popa
adc
pop
inc
add
xchg
dec
dec
mov
idiv
dec
shl
pushf
rcr
mov
dec
push
cmp
sbb
and
retf
sbb
sbb
xchg
test
or
jb
dec
and
pop
lea
and
sbb
push
cmp
sub
call
lock
inc
or
sbb
out
cmp
jp
outs
mov
cld
repnz
xchg
push
xchg
jae
add
shr
pop
pushf
ret
in
and
push
test
ins
pop
out
call
pop
or
dec
jmp
shl
sbb
(bad)
shl
adc
adc
(bad)
sbb
iret
jmp
sti
int3
jmp
arpl
(bad)
loopne
pop
test
push
jbe
retf
mov
fwait
xlat
in
sub
outs
sbb
or
frstor
test
xchg
ja
imul
std
(bad)
out
(bad)
pop
xchg
(bad)
mov
in
retf
and
repz
cmp
and
mov
data16
nop
daa
cld
add
sar
xlat
add
sbb
mov
test
sbb
mov
rol
cdq
xchg
pop
and
pop
sbb
movs
pop
dec
in
gs
clc
fwait
inc
inc
jne
fs
mov
rol
xchg
pushf
wbinvd
mov
push
push
mov
xor
fdivp
retf
pop
mov
test
add
clc
pop
clc
add
sub
pop
jne
xor
sar
sbb
loop
mov
call
adc
mov
popa
inc
pop
imul
mov
out
sbb
cmp
mov
dec
cli
sbb
sbb
aas
or
xchg
mov
xchg
xchg
test
jg
add
aam
stos
ret
xchg
jnp
mov
push
int3
cmps
fistp
jb
xchg
mov
and
jp
jns
cli
ss
mov
rcr
cmp
pop
loop
sbb
mov
lods
adc
sub
fisub
mov
jbe
cmp
inc
test
call
movs
xchg
fistp
ss
mov
mov
shr
ret
xchg
mov
push
out
jmp
xchg
mov
cmp
out
mov
mov
icebp
sbb
add
adc
fcom
sbb
and
jns
inc
mov
jo
push
push
jp
fcmovu
jmp
hlt
into
out
icebp
xchg
adc
ret
fstp
jno
and
push
or
sti
outs
movs
xor
add
sbb
jle
shl
mov
jl
push
push
sub
mov
rcr
loope
push
push
xor
pop
jb
push
mov
scas
dec
push
stos
sub
and
ret
mov
mov
push
js
mov
scas
sub
test
or
add
cmc
and
sbb
mov
push
mov
pop
shl
inc
movs
jno
enter
test
ss
lock
jecxz
das
adc
ja
add
adc
cdq
sti
loope
aas
inc
and
(bad)
(bad)
pushf
jge
mov
push
pop
sbb
sub
and
mov
fstp
mov
mov
add
repz
loope
push
scas
dec
push
gs
dec
sbb
xor
sbb
or
cmp
test
sbb
ret
cmc
shl
dec
sub
bound
arpl
mov
mov
hlt
adc
mov
loop
mov
xlat
xor
test
sbb
repz
pop
into
jb
pusha
stos
dec
aad
mov
inc
(bad)
jns
loope
jp
jbe
mov
xchg
mov
gs
cdq
js
mov
sbb
mov
out
pop
inc
xchg
fistp
or
js
jnp
(bad)
lods
call
mov
xchg
jecxz
pop
sar
sub
(bad)
outs
(bad)
push
arpl
dec
or
mov
and
dec
(bad)
jmp
sbb
dec
(bad)
mov
sbb
add
rcl
outs
das
pop
dec
jns
test
xor
xchg
repz
in
(bad)
out
jmp
xor
jne
mov
pop
fld
pop
js
inc
push
enter
sub
mov
or
call
outs
ret
push
enter
inc
or
inc
ror
sbb
lods
test
adc
adc
je
mov
sub
xchg
aad
inc
mov
xor
dec
imul
clc
stos
ss
aas
pop
wrmsr
jmp
xor
push
(bad)
jg
adc
sar
xor
ffreep
inc
xor
loopne
into
jmp
add
test
outs
fidivr
push
cmps
jg
enter
ret
leave
das
xchg
xchg
sti
jg
shr
or
add
mov
in
mov
xor
pop
xor
fld
test
sub
pop
jnp
push
in
ins
mov
cmp
mov
cld
sahf
or
mov
mov
outs
inc
in
xchg
jno
rol
mov
xchg
mov
mov
dec
cmc
fisubr
sub
int3
lahf
pop
pushf
ret
into
pop
les
xchg
adc
imul
shr
imul
mov
inc
and
aas
push
sbb
jecxz
daa
push
jmp
pop
or
arpl
push
arpl
in
push
fisub
out
ins
xchg
dec
and
lods
fs
int3
iret
jno
xchg
cmp
adc
and
lahf
push
fcom
inc
pop
dec
pushf
int3
ret
mov
nop
add
mov
or
inc
ret
in
dec
jo
aaa
in
dec
jb
xor
lahf
movs
int3
mov
neg
cdq
xlat
in
sbb
pop
push
sar
fwait
add
or
inc
and
add
ret
(bad)
or
fadd
loopne
loopne
fistp
jnp
xchg
fst
leave
nop
daa
aad
aas
xor
mov
cdq
cmp
ret
pusha
sub
adc
scas
mov
pusha
repz
adc
and
push
mov
xlat
mov
repnz
mov
je
out
aas
pop
retf
push
inc
retf
xchg
or
or
loopne
fild
out
das
dec
xchg
fdiv
adc
xchg
or
push
mov
xchg
xchg
xchg
arpl
je
inc
jo
xor
out
fadd
jg
inc
ins
push
shr
add
clc
cmps
xor
popa
pop
fcom
inc
jmp
sar
into
sbb
rol
fisttp
xchg
mov
xor
xlat
rcl
or
jecxz
and
iret
ret
js
test
jg
out
mov
cmps
dec
pop
and
das
popf
movs
jecxz
xchg
fld
mov
lods
(bad)
or
cld
push
(bad)
aad
add
jae
into
jnp
xchg
aaa
out
pop
pop
or
cld
loopne
ficomp
mov
jl
push
sub
pop
xor
adc
imul
mov
mov
mov
test
out
xchg
mov
fisubr
mov
sti
cld
sahf
sbb
adc
imul
and
int3
test
pop
dec
push
popf
add
jnp
shl
cmp
jp
js
jecxz
retf
cmp
push
fdivp
jne
jmp
pop
out
add
push
mov
pop
push
pop
add
gs
push
ds
adc
sbb
(bad)
cli
repz
retf
out
pushf
xor
xor
push
jp
hlt
fisttp
pop
inc
push
push
fs
fs
fs
dec
out
inc
cwde
or
or
pushf
adc
ins
jle
arpl
adc
shr
adc
retf
das
inc
fidiv
lds
pop
sub
adc
pop
pop
fs
movs
xchg
popa
xchg
xchg
test
aas
push
jecxz
shl
movs
sti
and
xchg
jb
fdiv
nop
popf
jecxz
inc
push
mov
pop
je
inc
mov
shl
add
mov
mov
xchg
imul
out
test
(bad)
jno
ss
push
dec
in
cmp
mov
mov
nop
popf
sbb
mul
push
jmp
sbb
ins
dec
sahf
cld
out
mov
pusha
pop
pop
out
mov
lock
aas
push
xchg
inc
cwde
scas
cmp
aam
and
ficom
xchg
sbb
das
and
sub
mov
mov
cdq
imul
ffree
inc
push
in
call
mov
shl
mov
sub
sti
in
and
or
std
popf
push
ja
mov
lahf
ror
lock
jb
xchg
lea
ss
dec
xor
bound
ror
pushf
fwait
imul
ret
xchg
popa
lea
inc
dec
loope
sub
aaa
pop
call
jno
fdiv
mov
fdiv
dec
(bad)
and
loop
fsubr
imul
rep
test
jge
jecxz
(bad)
ins
idiv
xlat
pop
in
mov
cmp
std
sti
imul
inc
mov
aaa
mov
pop
adc
push
and
(bad)
add
stos
and
pop
inc
(bad)
(bad)
gs
add
jnp
imul
jns
shr
gs
sub
cmc
jo
cmp
cs
mov
pop
and
cmps
mov
xor
ret
jo
loope
jl
ror
xchg
ret
or
dec
(bad)
clc
fwait
dec
mov
adc
inc
sti
fist
rol
outs
aad
stos
clc
mov
dec
pushw
cmp
fisubr
xlat
jl
call
cmc
fstp
rcl
(bad)
leave
mov
adc
dec
pop
js
icebp
adc
push
out
mov
imul
dec
jb
stc
(bad)
arpl
int
scas
xchg
cdq
xor
stos
push
fisub
pop
cmovne
int
rol
push
repnz
xchg
out
jle
dec
mov
sub
mov
add
cmp
xlat
lahf
rcl
int
xchg
(bad)
outs
shl
(bad)
retf
and
mov
call
push
(bad)
shr
mov
jmp
mov
lahf
mov
xchg
test
adc
sub
js
mov
out
cdq
push
adc
dec
loopne
outs
mov
jb
(bad)
xchg
push
cmps
pop
neg
mov
mov
pop
clc
jl
push
hlt
mov
push
aaa
add
or
shl
movs
lods
lods
add
push
or
hlt
ss
inc
loope
push
icebp
sub
sahf
pusha
xchg
pop
inc
adc
pop
mov
mov
xchg
cmp
push
jmp
fadd
stos
xlat
cmp
mov
cld
in
rcl
add
stos
call
rcr
test
ret
loop
inc
pop
inc
or
jge
mov
or
mov
xchg
nop
outs
push
idiv
mov
addr16
cmp
adc
xor
icebp
movs
jge
dec
cmp
loop
or
out
mov
sub
loope
pop
ins
div
bound
pop
ss
sub
add
call
mov
sub
or
ds
push
int
mov
sub
push
xchg
outs
addr16
call
fwait
cmp
jge
push
inc
cmp
shr
mov
bts
(bad)
je
(bad)
jmp
pop
popf
jmp
mov
call
xchg
es
stos
push
in
lahf
add
sub
in
stos
int
pusha
inc
movs
into
jno
sub
dec
int3
bnd
test
inc
not
xor
sti
fnstenv
loope
sub
test
mov
or
repz
adc
fsubr
xchg
clc
clc
fmul
adc
jge
mov
fiadd
lds
popa
push
push
and
adc
adc
dec
push
push
enter
fnsave
mov
pop
rcr
out
mov
push
nop
loope
pop
jne
(bad)
fisttp
cmc
pop
out
imul
daa
mov
addr16
fldpi
loop
popa
mov
idiv
adc
add
shl
xor
leave
int
or
and
stos
es
cmps
push
inc
jnp
data16
inc
mul
nop
xchg
xchg
inc
(bad)
(bad)
push
cwde
repnz
mov
xor
mov
jo
enter
stos
mov
les
mov
and
sbb
xchg
popf
nop
lods
xchg
ja
mov
mov
and
xchg
xor
lods
sbb
bnd
imul
cld
adc
ss
mov
loop
leave
sub
out
loope
retf
cmp
js
ja
mov
lahf
jle
arpl
add
repz
xchg
mov
out
inc
jmp
and
fs
into
rcr
xchg
adc
mov
pop
movs
clc
mov
inc
xor
out
mov
loope
jl
add
cli
pop
ret
add
adc
fdiv
loopne
pop
cli
adc
mov
fldln2
xchg
cmp
enter
push
stc
fsubr
cmps
mov
shr
push
mov
push
sti
loopne
fwait
jbe
or
xchg
pushf
mov
into
pop
(bad)
ins
popa
ret
sti
stos
adc
icebp
mov
xor
dec
call
mov
clc
scas
push
shl
stos
xor
xchg
ffreep
jne
jae
pop
loope
(bad)
jmp
cmp
mov
cmc
mov
mov
jle
pop
popa
(bad)
cld
adc
sub
or
xchg
add
jmp
pop
addr16
add
and
nop
mov
inc
shl
dec
fild
push
int3
jns
ret
aam
sar
cmps
ror
mov
les
push
mov
jl
adc
sub
mov
cmp
fcmove
call
scas
mov
call
mov
cli
dec
pushf
mov
and
adc
shl
mov
stc
push
pop
jmp
sub
mov
or
sbb
cmp
ret
aas
scas
aaa
(bad)
popf
sti
cmp
bound
mov
mov
jno
scas
clc
and
inc
dec
pop
clc
in
pop
sub
mov
add
adc
mov
icebp
dec
and
test
sub
loopne
cmp
jbe
jbe
fistp
push
dec
cmp
pop
stc
jle
mov
dec
pop
call
jge
jns
dec
inc
int3
xchg
test
stc
mov
scas
shl
lea
(bad)
sahf
jecxz
imul
xor
mov
mov
test
stos
dec
mov
cdq
mov
xchg
push
jnp
out
dec
lods
arpl
call
cmp
mov
das
xor
sbb
inc
xchg
cld
pop
icebp
and
and
(bad)
sub
loop
push
cld
pop
in
pop
push
adc
ret
scas
(bad)
and
pop
pop
or
ja
mov
frstor
cmc
imul
inc
addr16
arpl
xchg
aas
push
adc
mov
or
test
test
jle
out
cli
dec
hlt
adc
pop
int
pushf
mov
mov
in
pop
imul
xchg
cmp
in
sti
add
dec
cmps
and
dec
das
sbb
push
mov
stos
jns
mov
in
fist
mov
cs
add
mov
popf
adc
ret
or
xchg
xor
sbb
jb
push
pop
dec
dec
mov
in
inc
lods
call
fidivr
fcomp
mov
jmp
cmps
push
adc
loope
push
test
lock
inc
inc
mov
pop
jmp
jecxz
jo
enter
ja
in
mov
(bad)
ins
jnp
nop
cmp
add
jge
jp
aas
xchg
(bad)
pop
out
sub
ins
cs
add
cmc
jmp
into
add
xchg
lods
lods
jae
cwde
push
ins
ins
cmp
std
sbb
imul
test
mov
cdq
aad
aaa
xchg
lahf
in
dec
and
add
cmps
cld
pop
out
inc
push
mov
adc
push
jno
in
add
push
pop
mov
retf
mov
jmp
fsubr
add
push
jmp
xchg
out
fld
add
fimul
jb
xchg
leave
xchg
and
sbb
sbb
aas
mov
jns
mov
imul
adc
retf
or
cmp
push
(bad)
adc
push
pavgb
aas
addr16
ja
push
pop
add
xchg
pop
stos
mov
and
popa
std
ror
xchg
mov
ret
outs
lock
arpl
adc
enter
rol
push
clc
fidiv
inc
out
or
fld
push
mov
daa
jg
ds
sub
push
dec
cmp
repz
test
les
and
adc
(bad)
mov
adc
outs
push
mov
fsub
test
clc
jno
push
adc
pop
pop
rol
repnz
pop
rcr
pusha
pusha
mov
es
fimul
fs
imul
sbb
imul
fs
mov
cmp
ja
data16
jl
pop
mov
sub
mov
div
sti
(bad)
fisubr
inc
imul
pop
inc
ja
out
pop
and
push
js
inc
xor
xchg
mov
nop
jp
sub
(bad)
mov
cmp
stos
fs
mov
nop
pop
neg
cmps
in
dec
push
mov
dec
in
pop
cs
lahf
pop
mov
and
call
mov
xchg
pop
add
mov
int
(bad)
sub
fwait
icebp
test
mov
adc
jmp
nop
sbb
pop
cmp
push
movs
xchg
lahf
das
jge
or
mov
xor
sbb
mov
movs
scas
jnp
or
pop
adc
int
enter
mov
cmp
xor
popf
jns
test
not
pop
mov
shl
retf
neg
mov
fidivr
cmps
mov
mov
fstp
std
pop
dec
cld
cdq
aam
(bad)
mov
push
push
(bad)
or
mov
mov
and
or
xor
(bad)
fsubr
adc
sbb
push
ss
mov
or
mov
daa
push
in
scas
pop
lods
pop
sar
scas
sub
jp
imul
js
test
lea
mov
inc
scas
cmp
dec
cmp
adc
adc
out
adc
push
jnp
loopne
movs
push
dec
mov
dec
xor
enter
scas
jg
lds
loopne
inc
(bad)
nop
xchg
push
adc
mov
and
jns
retf
int3
inc
fstp
dec
push
jnp
mov
pop
aas
or
mov
aaa
stos
mov
nop
push
mov
(bad)
sar
outs
push
xchg
push
cmps
mov
ret
mov
mov
pop
fidivr
(bad)
nop
sbb
push
mov
std
imul
aad
ficom
jge
data16
dec
jecxz
je
push
sbb
jmp
add
push
or
push
in
mov
jle
mov
dec
pop
or
push
or
xlat
mov
jmp
sub
fwait
xchg
or
jl
jmp
loop
aaa
loopne
scas
mov
fsub
xchg
ins
fistp
imul
lea
(bad)
jmp
cmps
pop
leave
cdq
push
xor
int
cli
hlt
mov
push
mov
cmp
data16
sub
lods
scas
sbb
outs
and
dec
fild
push
icebp
ja
push
inc
sub
inc
cmp
adc
pop
je
mov
sbb
dec
lock
xchg
xchg
xor
gs
cmp
push
out
mov
inc
fcom
mov
push
call
in
loope
popf
jo
xchg
mov
dec
adc
ins
cld
inc
js
enter
push
pop
mov
sub
push
ja
sbb
fnstenv
and
ret
xor
lahf
mov
leave
(bad)
jmp
dec
aad
pop
movs
repnz
sub
jg
sub
push
pop
mov
in
push
push
stos
and
ja
cmp
and
jmp
inc
push
outs
sub
adc
out
jle
pusha
rol
shr
movs
hlt
sbb
mov
das
movs
push
or
shl
mov
stc
jae
lea
in
push
ficomp
loop
or
add
xor
sti
imul
cdq
inc
in
sbb
sbb
inc
adc
sbb
mov
sub
cmp
movs
sub
push
jg
outs
hlt
jae
lahf
cmps
jb
jbe
xor
sub
mov
jmp
pop
jg
dec
push
ss
cmp
loopne
jnp
mov
inc
push
iret
mov
fild
jmp
je
fwait
call
je
addr16
movs
cmp
cmps
xchg
dec
mov
dec
lods
fnstenv
mov
add
ret
sahf
push
dec
(bad)
cld
pop
or
leave
xchg
mov
mov
jno
adc
ja
jne
retf
adc
jmp
fiadd
jmp
ins
add
sar
repz
mov
stos
xchg
dec
test
into
push
scas
stos
into
cmp
cmc
sub
es
pusha
mov
mov
sub
enter
and
or
mov
in
pop
pop
ds
mov
mov
cmp
je
jo
push
xchg
xchg
xchg
rcl
sub
sbb
sbb
repnz
(bad)
nop
std
add
jl
sbb
fistp
push
adc
or
data16
aam
dec
sahf
adc
pop
sbb
push
jo
jp
pop
cmp
xchg
retf
idiv
mov
cmp
push
sbb
push
or
xchg
mov
mov
push
mov
mul
fnsave
daa
pop
mov
pop
dec
or
test
mov
dec
push
(bad)
in
mov
jo
pop
sbb
cmps
ins
lahf
or
cmp
sub
jle
loop
inc
data16
sub
dec
int3
mov
add
sub
or
xchg
rcr
into
mov
jae
cmp
rcl
xchg
xor
das
mov
mov
push
sahf
(bad)
stos
add
rcl
mov
or
jno
mov
jo
add
pop
cmp
cmp
mov
aas
pop
xlat
stc
fsubr
xor
mov
fsubr
je
call
stos
(bad)
dec
shl
adc
xchg
jg
mov
cmps
mov
ins
daa
out
jo
mov
iret
xchg
in
out
mov
ja
mov
sar
push
mov
(bad)
rol
pop
inc
repz
icebp
dec
mov
jns
adc
sub
jbe
dec
pop
jle
mov
movs
and
mov
js
mov
inc
fsubr
mov
cmp
and
jge
cmp
and
pop
sbb
jg
dec
in
push
out
inc
jmp
mov
in
sub
std
ret
sti
js
add
add
sbb
call
xchg
mov
je
cs
jne
mov
mov
xor
fimul
add
sub
xchg
sub
call
inc
cdq
out
call
dec
pop
push
fsub
rcl
jg
inc
add
xchg
xlat
jbe
popa
adc
into
jbe
or
adc
inc
cmp
jecxz
push
inc
and
push
pop
inc
fdivr
popa
cwde
fdiv
pop
sub
xchg
jmp
sbb
leave
shr
sbb
and
(bad)
sub
adc
push
inc
jge
(bad)
mov
jne
cld
fstp
movs
int3
pop
mov
movs
add
adc
lea
mov
daa
imul
ins
cmp
je
xor
mov
adc
sbb
xchg
pop
rcl
or
mov
pop
xor
test
cmps
jge
mov
test
mov
xor
jg
jp
xlat
repz
movs
call
movs
jecxz
sbb
fimul
or
repz
pop
stc
movs
cmp
aad
or
adc
cmp
adc
vaddsubps
xchg
inc
popf
mov
test
pop
lock
retf
sbb
xor
or
test
dec
jmp
pop
add
(bad)
in
add
inc
ds
jbe
call
xchg
pop
sbb
in
scas
inc
mov
(bad)
aam
cmp
xor
pop
jg
vmovaps
inc
mov
into
mov
jg
leave
aad
mov
pop
dec
aad
jnp
and
stos
nop
add
jmp
adc
nop
loopne
loop
js
sub
jp
pusha
fmul
pop
mov
xchg
add
sar
repz
xchg
sub
push
std
sbb
push
gs
rol
ficomp
inc
adc
and
jle
lods
mov
fdivr
jge
loopne
test
test
inc
std
rol
fld
mov
aad
scas
mov
add
loopne
into
cmp
retf
mov
jmp
mov
or
mov
cmp
sub
jp
mov
retf
cmc
and
aad
and
imul
sub
imul
std
mov
and
ja
in
push
div
inc
jle
inc
xchg
(bad)
xchg
test
fcmovnb
es
cs
mov
mov
pushf
sti
sub
cmp
sbb
shl
ja
dec
retf
cmp
mov
ret
and
cmp
and
mov
je
add
sbb
and
sbb
pushf
mov
add
push
mov
xor
mov
push
inc
inc
outs
ins
jo
arpl
add
lods
sbb
out
pop
cmp
mov
data16
repnz
and
test
lea
into
mov
out
std
add
sbb
mov
and
push
fadd
div
lods
test
jl
in
mov
lods
icebp
jbe
loope
adc
push
add
jbe
xchg
into
pop
adc
adc
mov
jmp
mov
sbb
cmp
mov
cdq
cmp
mov
int3
mov
pop
retf
cmp
jns
push
pop
test
pop
mov
fst
inc
fwait
in
jge
lahf
jb
int
fistp
ins
aam
mov
dec
cdq
es
dec
fwait
and
push
push
test
xor
jmp
cmc
(bad)
fmul
fs
lea
scas
pusha
mov
jg
mov
sub
fcomp
(bad)
in
or
addr16
pop
aad
cmps
scas
push
sahf
xchg
loop
and
mov
ret
aad
cwde
dec
out
std
xchg
mov
sub
call
dec
aaa
or
and
popf
xchg
inc
imul
mov
inc
add
sbb
and
dec
mov
sub
ficomp
dec
paddusb
mov
xchg
jge
jnp
mov
sti
stc
ret
shl
pop
sub
jl
scas
jnp
aad
mov
scas
mov
fmul
mov
sub
or
movs
xchg
sbb
cmc
jo
and
pop
and
push
(bad)
loope
jae
mov
cmc
pop
adc
leave
sub
pop
pop
push
into
ret
out
ret
enter
loopne
mov
jo
ja
jmp
jge
pop
sub
test
adc
xchg
cmc
rcl
stos
mov
repnz
stos
repnz
and
push
mov
fdiv
jl
outs
dec
dec
mov
cld
push
out
scas
sub
(bad)
arpl
pusha
mov
fidiv
ret
es
and
jl
lahf
iret
movs
iret
mov
cmp
or
aam
mov
pop
lods
adc
adc
(bad)
jns
push
in
xchg
inc
ret
stos
mov
adc
push
movs
aad
mov
xor
icebp
xor
gs
inc
popf
int
cmps
nop
cmp
adc
jp
lahf
cmp
(bad)
jp
test
add
cmps
aad
test
xchg
dec
enter
jecxz
cmp
xor
bound
jno
popa
leave
inc
das
or
popa
lahf
into
mov
jne
dec
(bad)
pop
scas
xchg
and
outs
pop
lods
sbb
hlt
add
mov
cmps
push
pusha
iret
xchg
mov
cmps
cmp
mov
jge
test
div
mov
ror
out
sbb
cmp
add
into
inc
loopne
data16
mov
xor
adc
lods
outs
mov
sub
call
test
je
mov
leave
jo
dec
pop
xchg
and
mov
cmp
outs
push
add
jbe
cmps
mov
jge
cmps
(bad)
lahf
aad
mov
add
add
adc
fwait
std
fstp
cmp
sbb
jg
es
push
shl
xchg
daa
cmp
push
and
pop
in
lods
std
add
lods
jb
in
adc
cmps
mov
dec
add
bound
inc
jmp
aas
retf
cdq
sbb
xchg
and
hlt
jge
and
and
mov
cmps
add
mov
iret
imul
push
dec
mov
fmul
jmp
inc
mov
inc
mov
jg
mov
push
movs
aad
sub
mov
es
scas
push
xor
mov
dec
mov
dec
lea
cwde
pop
inc
test
inc
test
dec
sbb
jge
inc
push
js
and
nop
mov
inc
xchg
mov
pusha
mov
sub
mov
jo
ficomp
inc
stos
test
or
fbld
push
and
cmp
push
repz
outs
mov
pop
imul
xor
int3
lahf
js
add
push
sar
mov
sar
sub
jge
cs
fs
out
call
jne
clc
sub
out
pop
(bad)
mov
repz
pop
div
js
clc
lea
inc
or
cli
out
mov
fnsave
jge
sbb
ret
mov
xchg
and
jecxz
mov
jl
push
dec
(bad)
sbb
dec
(bad)
cmp
and
div
outs
cmps
sbb
out
jne
cld
imul
adc
inc
js
add
outs
daa
iret
mov
enter
ficomp
sbb
and
loope
ret
or
movs
cmp
dec
inc
sbb
scas
icebp
sar
adc
mov
not
mov
and
sbb
or
dec
in
js
and
dec
imul
out
lea
sbb
adc
repz
and
jo
adc
(bad)
out
les
xchg
into
sub
cmps
ja
test
out
or
pop
mov
add
fistp
es
xor
into
mov
dec
das
jns
popf
call
(bad)
xor
retf
cdq
xchg
pop
push
cdq
ret
jno
ins
movs
mov
repz
and
cmps
in
cmp
test
pop
aam
adc
(bad)
test
add
pop
mov
adc
dec
push
pop
sub
adc
adc
add
jo
inc
cmp
jae
popf
jl
shl
xor
mov
ss
fwait
mov
test
push
pushf
ret
mov
cmp
addr16
int
test
xchg
push
fbld
scas
enter
xchg
mov
add
inc
dec
call
pop
jb
loopne
test
inc
sar
loopne
push
adc
lds
xor
mov
movs
cmp
bswap
mov
pusha
jg
push
inc
adc
scas
dec
pop
test
fnstsw
jmp
xchg
cld
lea
clc
jnp
xchg
lds
mov
not
ins
jle
sbb
inc
cmp
push
xchg
pop
sti
or
pop
pop
sti
push
mov
lahf
jo
or
fcomp
fcmovb
jne
sub
stc
into
(bad)
sar
fst
cmp
fwait
push
mov
enter
dec
sub
ja
adc
pop
pop
sti
adc
nop
mov
fcmovnb
imul
nop
(bad)
mov
inc
jae
mov
fwait
sub
int
fs
adc
dec
mov
inc
and
cmp
xchg
push
sub
scas
rcl
cmp
push
(bad)
lea
out
mov
sub
cmp
pop
jge
add
mov
out
mov
add
les
dec
jmp
rcl
adc
lods
pop
jmp
ficom
and
sbb
clc
lds
rcr
push
loopne
les
cmp
sbb
jg
sbb
in
jmp
sbb
mov
xchg
ss
outs
adc
rcr
jae
push
inc
or
hlt
and
cmp
push
mov
xchg
movs
rcl
xchg
mov
sbb
dec
scas
stos
aas
int
xor
outs
pop
xor
and
in
or
jmp
loop
xchg
out
aad
pop
stos
in
xor
sahf
jp
push
bound
mov
(bad)
xor
and
push
out
rcr
xchg
rcl
xchg
push
pop
add
dec
jmp
addr16
dec
call
push
dec
cmp
mov
push
adc
jns
rcr
mov
into
cmp
sete
ror
scas
sub
mov
mov
movs
mov
test
dec
mov
add
push
cmc
test
xlat
jg
cmp
jo
out
or
shr
lock
jmpw
dec
jp
and
retf
xchg
int
(bad)
in
or
out
pusha
pop
nop
(bad)
fistp
jp
push
or
or
aad
sub
lock
mov
inc
xchg
fnstsw
mov
adc
ficom
lods
xchg
adc
lods
xchg
dec
div
fisub
xor
xor
pop
arpl
pop
cs
fnsave
pop
sahf
cmp
aas
mov
pop
movnti
xchg
iret
imul
push
leave
fimul
das
cmp
cmp
jge
inc
cmps
xchg
sti
(bad)
ss
or
adc
xor
xor
cs
pop
inc
push
in
dec
inc
mov
xlat
lea
and
add
lock
addr16
int3
dec
adc
jmp
dec
out
std
cmp
leave
dec
or
out
adc
push
es
adc
mov
sbb
call
adc
push
data16
sbb
mov
push
data16
es
ret
pop
imul
rol
loopne
popf
push
push
jae
nop
es
in
loopne
jp
in
outs
jmp
aaa
push
sub
dec
mov
inc
xor
sub
pop
movs
push
test
push
sub
jno
mov
add
add
repnz
sbb
repnz
out
imul
repz
dec
adc
sbb
fdivr
jae
cmp
push
pop
sti
outs
(bad)
sub
stc
icebp
cs
push
fistp
and
add
sbb
sbb
loope
adc
jo
in
outs
daa
dec
les
jl
sub
shr
out
and
fisub
fs
mov
adc
shl
in
lods
int3
daa
cmp
icebp
push
xchg
and
inc
jmp
sub
imul
out
or
fdivr
xchg
icebp
daa
icebp
add
xor
push
test
add
sub
out
xchg
jnp
or
sar
out
js
sbb
pop
xor
mov
or
push
test
lea
cmc
shl
and
cmps
xor
aam
mov
int3
or
dec
inc
mov
outs
cmc
push
ss
xor
fdiv
xchg
pextrw
xor
pop
pop
fwait
jae
xor
adc
push
mov
sub
or
dec
ins
jle
cwde
movs
ror
or
stc
cmp
pop
data16
xchg
cwde
ja
add
out
xor
addr16
mov
arpl
mov
cmc
adc
fimul
enter
cdq
mov
mov
push
fwait
ins
mov
jecxz
cmp
les
scas
pop
in
pop
cmp
dec
add
fdivp
leave
xor
cmp
jne
call
or
out
xchg
and
push
pop
jg
mov
add
scas
xor
sub
(bad)
bound
jge
inc
in
add
sub
xor
cdq
mov
repnz
adc
loopne
icebp
test
out
mov
mov
xor
pop
xchg
das
pop
push
jne
fs
and
in
xchg
repz
pushf
mov
mov
fwait
ins
adc
ins
mov
mov
retfw
loope
xor
add
pop
(bad)
jo
fisttp
xlat
pop
cs
sbb
cdq
inc
or
adc
mov
fisub
cli
pop
fcom
jmp
jb
hlt
cmc
jmp
sbb
mov
out
cwde
cmps
xchg
jge
test
addr16
sub
or
push
movs
dec
stos
iret
add
mov
adc
stos
sub
rol
mov
je
xor
sar
lahf
cmp
outs
addr16
aam
cwde
loopne
push
cmp
ds
lods
shl
sub
mov
fiadd
push
mov
jbe
call
aas
mov
and
fdivp
in
xor
movs
sbb
dec
ins
in
daa
jns
popa
(bad)
shl
std
xor
ds
std
int
cmp
push
push
call
pop
in
and
inc
mov
in
inc
cmp
int3
push
(bad)
pop
jp
test
jmp
cmp
jmp
dec
movs
sahf
out
stos
(bad)
dec
jbe
add
ins
js
and
dec
dec
in
test
jbe
sub
xlat
cdq
xlat
push
rcr
jae
mov
test
enter
dec
movs
or
jnp
push
ret
adc
in
jl
and
sbb
iret
push
xchg
and
add
ret
mov
pop
ret
xor
scas
dec
jb
mov
and
and
loopne
loopne
int
shr
add
or
or
and
pop
or
(bad)
je
in
into
sub
popa
cs
call
aam
aam
mov
lahf
scas
ins
fidiv
push
cwde
mov
lock
and
(bad)
ins
les
cmp
(bad)
imul
lds
adc
fsubr
pop
jb
cwde
jg
adc
daa
adc
aad
push
inc
mov
sbb
not
xor
gs
push
mov
dec
pusha
into
dec
test
or
cld
lods
jmp
sahf
pusha
ror
rcr
pop
dec
fidiv
int3
adc
cmp
out
sahf
imul
retf
mov
mov
in
repnz
(bad)
out
(bad)
xchg
ss
(bad)
inc
int
cmp
add
xchg
into
push
movlps
data16
mov
push
sbb
xchg
rol
stos
rcr
add
dec
or
ss
call
push
dec
push
push
add
push
je
mov
jp
cmp
adc
test
rcr
xor
push
(bad)
jns
aad
add
test
sub
xor
or
push
xchg
(bad)
stos
test
sahf
in
scas
xor
je
add
push
(bad)
repz
daa
int3
loope
cmp
pushf
call
xor
adc
rcr
call
mov
sbb
ins
sbb
add
lods
sub
(bad)
outs
mov
inc
(bad)
jp
add
scas
jns
mov
lahf
ficom
int
dec
dec
cmp
jb
mov
xor
push
nop
in
sbb
sti
stos
cmps
mov
xor
sbb
jl
sbb
cld
mov
mov
inc
sbb
push
(bad)
xlat
xchg
sub
gs
and
cmc
out
sub
ins
inc
xchg
mov
fwait
push
sub
js
or
test
sub
lods
cmc
nop
pop
push
add
pop
sub
nop
mov
xchg
push
in
jecxz
lods
mov
popf
pop
xchg
jge
mov
cmc
sub
push
fidiv
add
cmp
mov
addr16
bound
loop
cmc
jl
xor
jo
(bad)
fadd
inc
mov
xor
or
fwait
stos
dec
mov
mov
movs
movs
add
ficomp
dec
push
xor
cmp
adc
aas
mov
xchg
pusha
adc
test
loop
into
sbb
xchg
xchg
inc
dec
pop
mov
xor
or
jb
cmp
jb
adc
mov
xchg
repz
mov
sbb
js
push
idiv
fsubr
pop
or
jmp
pushf
or
xchg
shl
(bad)
in
arpl
fldl2e
fsub
in
xchg
pop
inc
or
fnstsw
push
push
pop
repz
sub
dec
jb
je
addr16
xchg
stos
dec
out
call
jne
push
cmps
adc
xor
add
push
loopne
or
sub
cmc
cmp
loope
sbb
xchg
mov
not
adc
mov
aaa
pushf
sub
popa
mov
test
mov
shl
mov
aam
mov
mov
popa
mov
pop
push
repnz
mov
int3
dec
outs
call
loope
sub
adc
std
mov
add
inc
or
stc
ror
or
inc
cmps
mov
ds
cmp
(bad)
cmp
xchg
mov
pop
push
dec
dec
pusha
pop
dec
fwait
dec
dec
repnz
pop
retf
dec
mov
pop
sub
adc
mov
lods
cmps
scas
mov
adc
pop
pop
or
nop
mov
ret
cli
dec
lods
test
cmp
and
jbe
cmp
adc
scas
mov
pop
sub
mov
xlat
retf
pop
inc
mov
add
jecxz
dec
push
mov
sub
dec
push
add
pushf
scas
frstor
mov
sub
dec
addr16
xor
ja
dec
lods
lea
mov
ins
jp
loop
jnp
mov
sbb
ss
dec
jne
sub
adc
shl
add
sub
rcl
adc
push
jp
mov
cld
xor
es
jp
push
adc
dec
jl
xchg
mov
das
adc
ss
ds
cdq
(bad)
push
inc
in
push
jno
test
frstor
cld
pop
hlt
mov
out
dec
stos
push
jnp
sub
daa
test
nop
out
sahf
lea
push
push
in
sbb
jge
push
enter
inc
push
pop
sbb
add
xchg
mov
pop
add
inc
push
repz
mov
inc
movs
pop
jge
sub
push
mov
jl
(bad)
dec
adc
fs
dec
mov
jmp
call
je
rol
rcl
xor
add
add
cdq
pop
mov
test
leave
mov
std
mov
(bad)
adc
repnz
mov
mov
or
mov
cld
pop
pop
dec
cdq
xor
fimul
lahf
icebp
mov
rcl
imul
push
adc
jb
inc
pushf
push
jecxz
mov
inc
inc
dec
ds
pop
dec
ret
mov
test
retf
jle
sub
retf
cmp
xor
push
nop
xor
outs
xor
xchg
cmps
shr
mov
jl
fidiv
test
sub
aas
imul
shl
pop
and
or
mov
shr
pop
jnp
test
dec
(bad)
mov
jle
dec
pop
or
xchg
cmps
stos
mov
jmp
lds
iret
call
shl
arpl
cmp
add
sub
mov
or
cs
out
jmp
mov
pop
jg
jl
push
js
int
xor
jge
mov
inc
mov
dec
mov
scas
shr
jbe
xor
adc
ins
or
scas
lods
inc
xchg
shr
(bad)
das
(bad)
dec
(bad)
cmp
in
ins
inc
pop
mov
and
scas
rcr
adc
push
bound
in
int
lahf
mov
dec
jmp
shl
les
mov
(bad)
popa
mov
adc
inc
test
test
out
fbstp
adc
sbb
ins
std
push
(bad)
repz
inc
pop
retf
sti
(bad)
test
lahf
ror
pop
xchg
jmp
mov
sub
or
jle
and
fwait
(bad)
jg
test
cmp
push
adc
icebp
arpl
mov
adc
jmp
cld
pop
xchg
les
dec
test
mul
and
and
icebp
sbb
pop
and
mov
cmp
or
rol
inc
jle
push
mov
jp
out
outs
leave
pop
jnp
mov
not
inc
cmp
push
leave
cmp
(bad)
pop
pop
mov
dec
pop
in
ret
pop
jmp
inc
inc
jno
js
lds
adc
stc
sbb
push
add
xchg
mov
jb
inc
loop
mov
xchg
xchg
xchg
test
in
mov
outs
pop
xchg
jmp
mov
(bad)
sub
add
sbb
vmovd
sbb
mov
int
xchg
sub
in
outs
or
fs
(bad)
mov
mov
retf
mov
and
daa
xchg
cmps
adc
mov
or
fisttp
fxch
dec
mov
cs
popa
popf
mov
push
inc
scas
xor
bound
sbb
popf
inc
xchg
xor
in
add
jecxz
and
pop
sub
ja
loopne
std
test
sbb
icebp
das
push
out
add
sbb
sbb
aas
(bad)
jge
fsubr
jbe
sub
inc
sbb
in
into
and
cmp
push
inc
ror
ds
pop
mov
xor
pop
aam
sub
sar
dec
xor
or
xlat
ins
mov
call
mov
lea
or
scas
pop
rol
jmp
scas
or
(bad)
int3
xchg
cmp
in
pop
or
add
pop
xchg
adc
jp
inc
pop
and
lods
dec
rcr
hlt
cmp
dec
data16
inc
call
aaa
mov
test
call
mov
or
out
xchg
pushf
mov
xchg
inc
mov
pop
ret
mov
dec
inc
mov
dec
dec
retf
jl
or
xchg
xchg
mov
xor
mov
ret
pop
int
sar
fs
retf
push
dec
or
fwait
jl
lods
pop
xchg
pop
sbb
aad
sbb
push
inc
sahf
aad
cld
jo
ret
aaa
scas
(bad)
mov
popf
pop
fist
imul
dec
push
xor
jg
sub
mov
inc
lahf
imul
push
movs
arpl
shl
clc
cwde
jno
bound
or
std
stos
and
ret
sbb
cmp
gs
mov
dec
or
or
retf
mov
jmp
adc
aaa
mov
inc
enter
cmp
pop
js
addr16
aaa
add
out
cdq
adc
mov
repnz
xchg
es
jnp
(bad)
xchg
or
pop
fnsave
sub
mov
ins
jnp
sahf
je
mov
mov
push
daa
mov
punpcklbw
fist
mov
(bad)
movs
cmp
(bad)
pushf
lods
fnstenv
or
and
push
mov
sbb
sahf
hlt
int3
out
cs
retf
push
mov
(bad)
cmc
rol
inc
jne
inc
data16
out
fwait
lea
imul
adc
aaa
adc
fs
imul
test
loop
std
scas
shr
adc
rol
mov
pop
sbb
scas
pusha
dec
mov
or
and
push
mov
sbb
ins
mov
xchg
and
stos
cwde
fwait
mov
push
jge
jnp
sub
inc
ds
dec
ds
cli
adc
mov
in
push
xchg
retf
ret
mov
fcmovnb
jmp
xchg
clc
out
push
pop
rcl
movs
dec
jne
stos
mov
cmp
push
test
nop
add
push
je
imul
fist
out
fstp
add
das
out
cmp
loop
aaa
mov
das
sub
xchg
mul
je
ins
lds
mov
xor
mov
shl
sbb
fs
mov
stos
out
xchg
pop
xor
adc
adc
sbb
mov
das
xchg
(bad)
fdivr
jmp
in
dec
int
xor
dec
stos
adc
mov
es
mov
imul
add
and
ds
mov
sub
xor
sbb
jle
shr
mov
(bad)
add
in
jb
fdiv
jnp
jle
repnz
imul
gs
mov
ja
push
int3
mov
jmp
(bad)
aaa
pop
sub
cvtps2pd
sub
mov
ins
out
out
mov
cmp
int3
adc
dec
icebp
jns
jo
(bad)
lea
xor
enter
lods
(bad)
inc
dec
(bad)
jmp
pop
mov
and
sbb
rol
mov
jg
xchg
cmc
cmp
pop
enter
xor
xor
xchg
push
sti
xor
test
js
xchg
mov
mov
jnp
mov
sub
push
add
bnd
in
out
retf
and
inc
pop
pop
mov
mov
ins
popf
mov
add
fdivr
pop
retf
push
mov
mov
outs
xchg
(bad)
(bad)
int
jo
push
xchg
scas
test
sbb
cwde
xchg
jb
push
xchg
dec
xchg
test
pop
aaa
cwde
inc
std
pop
(bad)
pop
pop
add
mov
mov
das
and
mov
jle
jae
pop
xchg
jg
xor
jns
push
jns
bound
jno
ds
lods
(bad)
stc
pop
jmp
pop
xor
mov
int3
outs
popa
fist
enter
push
and
inc
(bad)
xor
ret
ja
stos
bound
cmp
es
(bad)
popa
pusha
call
les
and
or
pop
xor
xor
mov
or
sub
mov
add
push
rcr
cmc
aad
bound
mov
sbb
push
fsub
ins
retf
(bad)
mov
cmps
(bad)
cmp
inc
in
push
out
sbb
cdq
into
adc
push
xchg
(bad)
std
mov
xor
sbb
add
sub
mov
jne
adc
dec
mov
jo
test
inc
out
adc
fisub
cwde
repz
mov
test
pop
push
mov
jp
addr16
and
pop
push
fs
sahf
mov
popf
out
jmp
push
pop
repz
out
das
aad
inc
popf
retf
pop
aam
outs
jmp
xor
push
dec
inc
adc
mov
and
add
add
mov
adc
out
ins
mov
loope
(bad)
call
rcl
sub
femms
loope
daa
dec
jbe
paddw
inc
cmps
xchg
jbe
lods
and
cmc
out
xor
(bad)
push
mov
xlat
clc
push
xor
mov
mov
cld
int
in
adc
in
out
scas
pop
repz
add
cmp
add
in
fisub
out
and
xchg
aas
aam
cs
adc
mov
push
push
and
shl
push
mov
push
mov
push
jmp
jbe
fimul
cwde
pop
xor
int
push
xor
(bad)
fistp
imul
das
inc
adc
loopne
inc
xchg
pop
cmps
inc
adc
mov
mov
pop
push
in
dec
and
push
jbe
test
sbb
leave
dec
xchg
popf
or
jo
movs
sub
inc
cwde
mov
xor
mov
inc
fs
jge
jbe
clc
cmp
fdiv
fnstsw
in
scas
add
int
cmps
xchg
in
stos
push
(bad)
jnp
pop
add
imul
iret
or
pop
rol
stos
popf
rcr
adc
std
and
mov
xchg
in
lea
pop
(bad)
leave
xchg
mov
mul
es
loope
xchg
int
std
(bad)
retf
call
loop
sbb
adc
jbe
sub
(bad)
mov
rol
icebp
inc
push
arpl
sub
push
clc
add
ins
inc
aam
push
xor
xor
xchg
repz
xchg
push
push
push
inc
pop
add
out
xor
clc
pop
inc
sbb
push
mov
shr
and
pop
sahf
pushf
lds
repnz
sbb
rcr
ds
jmp
xor
(bad)
pop
mov
jg
jmp
repnz
xchg
ror
mov
fsub
dec
mov
pop
add
or
and
xlat
sbb
out
adc
popa
dec
ds
mov
(bad)
shr
test
mov
xchg
add
outs
add
inc
xchg
or
repnz
ins
xchg
mov
sub
mov
scas
dec
loopne
jnp
sbb
popf
cwde
push
pop
lahf
jmp
call
rcr
popf
fs
daa
sbb
xchg
sbb
sahf
lods
dec
dec
pop
in
enter
inc
scas
(bad)
pop
cmp
mov
pop
add
cmp
cmp
loop
xchg
call
xchg
int3
rol
test
pusha
scas
inc
pop
fld
cli
push
scas
and
stos
and
in
fsubrp
por
in
xchg
int3
inc
ins
out
push
inc
in
jecxz
fdivr
cmp
inc
ja
xchg
fcom
bound
adc
mov
(bad)
out
outs
mov
push
push
xchg
leave
mov
push
pop
xchg
aad
jo
jb
aad
mov
dec
repnz
or
push
pusha
xchg
test
mov
dec
mov
dec
cdq
xlat
mov
dec
xchg
jmp
pop
inc
mov
xchg
(bad)
rcr
push
outs
test
call
out
mov
outs
and
ins
pushf
addr16
movs
outs
cmp
xor
dec
mov
lahf
or
cmps
mov
cmp
inc
and
mov
mov
xor
jmp
pop
add
not
mov
xor
lods
push
aam
(bad)
xlat
xchg
add
mov
retf
movs
adc
xchg
xor
inc
and
add
int
aad
push
mov
fwait
mov
mov
and
add
and
test
retf
push
out
lahf
leave
add
sub
arpl
je
in
or
sbb
rcr
inc
(bad)
xor
jge
adc
jb
dec
lods
mov
ret
inc
push
or
scas
fiadd
xchg
mov
mov
leave
mul
push
lods
inc
pop
mov
ret
sahf
xchg
shl
push
(bad)
rcr
ficomp
xchg
ds
fadd
jge
sub
test
inc
cs
push
sahf
adc
mov
mov
pop
mov
daa
jle
sub
xor
loop
nop
(bad)
adc
mov
and
inc
ins
jmp
add
mov
and
adc
mov
jb
retf
mov
fwait
ja
mov
aaa
das
loopne
in
outs
(bad)
add
repnz
popf
mov
push
or
add
mov
mov
xchg
sub
xchg
jmp
jmp
sbb
jg
and
ret
(bad)
or
inc
(bad)
lods
stos
xchg
or
adc
push
mov
or
push
xchg
(bad)
add
scas
pop
dec
in
mov
icebp
pushf
iret
pop
mov
mov
adc
add
call
push
mov
rcl
ja
add
(bad)
call
call
stc
lods
cmps
stos
mov
jne
sar
xchg
jle
ficom
mov
loopne
sub
test
outs
xchg
inc
jmp
outs
cmp
sbb
jecxz
sbb
pusha
xlat
fsub
or
pop
into
loope
std
test
sbb
jae
cmc
cmps
push
aam
mov
popf
outs
xchg
movs
mov
cld
push
mov
dec
inc
int
es
(bad)
(bad)
retf
scas
mov
xor
popa
adc
xchg
clc
scas
je
aad
out
cmc
push
jbe
jl
jp
or
sub
mov
inc
loope
xor
dec
mov
push
pop
inc
dec
lock
xchg
inc
xchg
ret
inc
clc
sub
mov
inc
call
jmp
outs
jb
ss
imul
(bad)
dec
out
je
push
push
inc
jecxz
nop
aaa
pop
push
mov
adc
mov
hlt
outs
sub
push
adc
ja
xor
mov
sti
jge
mov
test
jmp
sbb
xor
test
mov
daa
xor
and
ret
xchg
cmp
jo
(bad)
jmp
adc
adc
xchg
(bad)
cli
pop
sbb
fdiv
js
jo
outs
jno
xor
mov
push
mov
imul
dec
or
nop
xor
cld
scas
cmp
loope
adc
fnstenv
pandn
mov
outs
and
jbe
lea
shl
ins
mov
or
les
jp
inc
enter
in
mov
xchg
pop
mov
push
sbb
mov
in
(bad)
arpl
test
popa
int3
cwde
leave
les
jg
imul
add
dec
jp
out
push
xchg
out
sbb
mov
mov
(bad)
and
hlt
cmps
adc
xchg
sbb
adc
mov
jne
jle
mov
call
or
mov
loopne
sar
cmp
push
push
mov
outs
std
or
loop
xchg
loopne
push
push
je
mov
sbb
mov
dec
in
pop
std
fwait
mov
fstp
movs
or
leave
pop
xchg
(bad)
xchg
xchg
lock
jne
into
inc
mov
mov
cmp
loopne
iret
add
repz
(bad)
and
lds
push
adc
lods
pop
retf
vmovaps
aad
test
cmp
loope
push
adc
adc
loopne
mov
stc
jne
inc
inc
push
jge
mov
push
cmps
xchg
dec
inc
mov
call
jg
push
mov
mov
js
dec
stc
pop
enter
mov
arpl
ss
shr
les
or
es
mov
repz
cmp
aas
xchg
add
(bad)
retf
jns
jp
mov
mov
xor
sub
leave
push
outs
cmps
aaa
sbb
fld
ja
int
jno
cmp
sbb
push
sub
pop
push
shr
pop
fbstp
cmp
jecxz
pop
nop
daa
push
ror
loop
dec
ret
xor
jbe
mulps
mov
loopne
pop
or
push
pop
adc
push
les
jmp
xlat
popf
or
hlt
mov
popa
or
dec
int3
(bad)
fidiv
leave
aaa
mov
cld
movs
mov
lea
or
cmp
mov
ret
xchg
movs
imul
loope
mov
mov
iret
ja
loop
lea
dec
sbb
xchg
imul
pop
sub
std
cs
rcr
dec
xchg
jnp
lods
retf
(bad)
scas
cmp
mov
mov
ds
movs
mov
dec
add
sub
cmp
xor
dec
sbb
bound
add
aam
xor
push
mov
into
mov
int3
out
push
xor
cmp
xor
jp
fcom
add
je
adc
test
pop
or
xchg
out
push
mov
mov
dec
cli
cwde
outs
in
pop
xchg
jg
(bad)
(bad)
jmp
pop
pop
mov
shl
cdq
test
push
(bad)
jmp
mov
push
and
cmp
fbstp
adc
cmps
mov
div
push
push
dec
nop
push
(bad)
ins
push
sahf
bound
add
(bad)
xchg
mov
mov
(bad)
xchg
out
popa
xor
ja
dec
mov
inc
(bad)
sbb
outs
pop
outs
(bad)
mov
sbb
lods
jns
idiv
adc
test
add
std
movs
aas
retf
dec
sub
dec
mov
out
imul
push
gs
xor
xchg
or
and
xchg
in
cmp
fucom
pop
push
ret
sub
popa
fwait
popa
fisttp
loop
fnstenv
push
pop
stc
push
test
adc
lea
movlhps
pop
outs
bound
shr
jb
cmp
fcom
clc
sub
sbb
test
pusha
dec
and
dec
lahf
mov
xor
jb
xor
cmp
and
loop
outs
popw
adc
mov
dec
inc
adc
pop
test
xchg
or
sub
es
fdivr
call
shr
pushf
mov
(bad)
scas
loop
adc
call
fld
call
sub
scas
fisttp
cli
into
jbe
and
pop
imul
mov
sub
xlat
fs
fadd
sahf
inc
test
adc
adc
dec
je
xchg
es
sbb
mov
jae
cmp
mov
lds
sbb
or
hlt
xchg
jbe
into
idiv
test
stos
mov
fnclex
sahf
data16
fbstp
je
mov
dec
dec
lea
mov
jmp
fild
(bad)
and
and
repz
push
ret
stos
xor
xor
pop
(bad)
pop
inc
or
sbb
lods
(bad)
push
xlat
or
jge
ret
into
test
and
sahf
dec
cmp
xchg
cmc
imul
in
xchg
cdq
xchg
loope
jbe
xchg
sub
inc
loope
jmp
int3
imul
sbb
outs
jmp
adc
ja
xor
stos
fwait
retf
retf
cmp
jno
dec
lock
xor
pop
sub
pop
pop
shl
mov
cmc
xchg
inc
pop
and
push
jb
jge
out
mov
jb
push
sbb
cmp
sub
or
repnz
or
jge
hlt
mov
mov
cld
iret
jnp
mov
mov
icebp
in
daa
pop
push
mov
dec
and
add
neg
jmp
mov
xchg
adc
dec
and
and
push
stos
xchg
jo
fs
leave
jae
sbb
fidiv
push
xlat
leave
jge
jbe
mov
mov
enter
bound
sub
inc
sub
(bad)
inc
mov
add
(bad)
and
jbe
idiv
or
scas
rcr
mov
pop
daa
ret
dec
cwde
xchg
mov
adc
popa
pop
and
push
bound
inc
or
fsubrp
inc
idiv
mov
popf
dec
xchg
(bad)
ja
and
dec
jl
pop
in
mov
loopne
ja
xchg
pop
outs
in
mov
mov
in
lahf
test
fs
jnp
mov
pop
dec
sbb
bound
fnstcw
mov
cmp
or
pop
jbe
cmp
fisubr
mov
add
jo
shl
and
sbb
xor
inc
jl
adc
das
(bad)
out
mov
cdq
inc
or
std
outs
sbb
jbe
enter
les
mov
(bad)
(bad)
add
outs
add
aad
mov
or
sub
pop
jg
or
call
adc
mov
call
outs
(bad)
movntq
out
lods
inc
fcmovne
xlat
pop
js
ins
mov
dec
pusha
jp
cmp
and
rcl
adc
or
sub
cli
movs
mov
xchg
out
adc
and
adc
std
mov
inc
mov
gs
ror
pop
int3
std
lods
pop
lods
cmp
and
pop
repz
ret
cmps
loope
bound
jno
adc
and
and
sbb
outs
ror
pop
xchg
pop
lods
lods
lods
and
adc
push
mov
je
sar
cmp
sbb
cld
inc
or
cmp
pop
add
sbb
lahf
outs
sbb
call
js
push
add
retf
aas
fdivr
jno
imul
out
rcr
mov
adc
ret
push
gs
push
scas
inc
jg
enter
mov
(bad)
xchg
repnz
xor
jmp
shr
and
dec
cmps
sub
popf
in
mov
neg
inc
cmc
scas
lock
jno
fstp
lods
and
xor
fwait
mov
movs
call
fdiv
cmps
or
adc
cdq
adc
mov
xor
adc
int
leave
xchg
leave
fild
inc
adc
push
ja
ret
inc
(bad)
ds
push
mov
sbb
xor
mov
in
rol
mov
push
lods
pushf
dec
imul
pop
pop
dec
ds
fdivr
cmps
fist
push
mov
jle
mov
push
cmp
adc
sub
mov
adc
add
imul
or
pop
push
jecxz
cmp
jecxz
or
aad
add
in
sbb
sub
add
inc
lea
xchg
aad
ins
out
in
add
imul
mov
jle
cwde
cli
jl
and
inc
xor
and
xor
xchg
wrmsr
mov
in
iret
imul
and
sub
clc
dec
cmp
ret
out
add
outs
mov
call
ja
inc
cwde
pushf
fld
jo
add
leave
int3
cmp
stos
push
and
xor
retf
pop
call
push
dec
mov
cmp
test
cmp
add
into
cli
call
call
pop
sbb
cld
in
aam
(bad)
mov
sub
dec
adc
stc
scas
mov
inc
mov
xchg
xor
jno
call
sub
mov
test
and
jno
pop
movs
push
mov
inc
xor
call
cmp
push
or
xchg
stc
int3
sbb
inc
push
inc
popa
sar
or
lds
cmps
lds
inc
int
test
daa
lock
fucom
iret
mov
xchg
call
mov
daa
cmp
sub
sub
cmc
cdq
rcr
rol
(bad)
xchg
xor
ds
(bad)
cmp
pop
mov
icebp
in
inc
xchg
push
scas
adc
pusha
push
ss
les
out
cmp
xor
mul
(bad)
std
pop
outs
ret
mov
push
push
out
add
ja
jmp
int
dec
sub
ficomp
adc
ds
adc
or
lods
movs
pop
nop
cdq
int
ror
add
push
pop
daa
jno
mov
cdq
in
outs
dec
popa
xchg
jge
xlat
sub
loope
xchg
mov
out
or
and
cld
add
push
(bad)
mov
inc
iret
pop
xchg
xchg
shl
popf
jecxz
pop
pop
leave
cmc
or
out
pop
pop
in
(bad)
xor
push
ja
jmp
xchg
push
dec
ret
mov
push
in
jge
loop
scas
rcl
shr
mov
inc
adc
in
jl
daa
mov
xor
sahf
inc
aam
mov
push
jb
ins
add
sahf
loope
into
js
loopne
cwde
into
inc
jge
jae
sbb
xchg
mov
(bad)
out
lds
out
mov
mov
ffreep
(bad)
mov
outs
push
sub
mov
xor
inc
and
jo
sub
int3
pmuludq
imul
movs
les
daa
mov
add
push
add
pop
inc
jge
push
dec
sahf
adc
cs
aam
fcomp
xor
fisttp
repnz
pushf
and
mov
pop
stos
or
xor
fwait
mov
call
sub
and
inc
int3
enter
inc
and
test
(bad)
dec
rcl
fwait
pop
test
lods
test
add
scas
gs
xchg
rol
adc
xchg
cmp
push
(bad)
xchg
stos
cdq
popa
sbb
cs
dec
retf
sbb
dec
(bad)
call
or
mov
mul
nop
sub
sub
and
daa
and
mov
jb
xchg
adc
js
mov
mov
cld
(bad)
mov
jge
data16
fs
cmp
mov
popf
jbe
xchg
int3
and
popa
aas
mov
retf
xor
mov
loope
sbb
or
or
add
aad
mov
and
outs
lea
mov
ja
outs
mov
fldenv
call
test
std
or
cmps
cmp
pop
ret
aas
enter
mov
push
retf
add
cmp
push
imul
fbstp
outs
sub
push
pop
aaa
xor
mov
out
div
mov
mov
push
pop
pop
retf
lea
xchg
adc
inc
mov
in
sub
mov
mov
or
aam
add
sub
push
(bad)
mov
in
in
in
push
data16
std
jnp
push
movlhps
cmp
sub
pop
pop
test
ja
mov
xchg
adc
cmp
data16
jmp
imul
loope
jle
and
sub
scas
out
data16
fisubr
shl
sar
sub
fiadd
sar
mov
dec
cmp
mov
mov
dec
fldenv
mov
fld
out
adc
and
fs
ficomp
and
mov
aas
mov
cwde
int3
fcmovu
int
fmulp
sbb
test
inc
loope
pop
repz
cwde
xchg
retf
adc
test
jmp
dec
cs
ret
push
fild
fiadd
mov
push
nop
mov
sbb
add
sbb
js
aaa
or
addr16
imul
mov
or
dec
pop
cmp
fst
jge
cmps
shr
imul
jno
iret
jb
push
jle
(bad)
retf
push
loopne
ffreep
sub
idiv
xor
jle
mov
add
(bad)
mov
fild
and
imul
neg
stc
shl
dec
push
adc
aaa
(bad)
stc
push
mov
xor
xlat
jecxz
add
retf
aaa
fmul
push
in
cmps
loop
outs
shl
or
ret
out
imul
wbinvd
dec
xchg
xchg
test
test
jge
mov
aam
push
sbb
inc
in
jge
adc
test
pusha
xchg
xchg
mov
xor
cmps
mov
mov
cmp
add
not
and
sahf
fld
push
lahf
dec
mov
dec
inc
cmp
jp
loopne
(bad)
fcomp
jne
jmp
lahf
in
push
lods
and
scas
neg
sbb
fldenv
mov
dec
mov
pop
enter
mov
xchg
jmp
in
and
movs
enter
hlt
mov
mov
xchg
cmp
jg
ss
fs
out
mov
stc
cmp
out
shl
ds
and
dec
jle
cdq
int
mov
jne
cwde
iret
hlt
retf
xchg
rcr
mov
xchg
mov
fst
loope
push
ret
mov
mov
add
cmp
mov
pop
xor
std
pop
pop
dec
pop
mov
in
movs
cdq
xor
scas
push
mov
into
push
add
pop
cmp
mov
or
add
cmps
adc
fs
adc
inc
jmp
repnz
sbb
mov
sub
pop
divps
push
fidivr
push
inc
sbb
xchg
mov
xchg
mov
xor
cli
rcl
(bad)
pop
or
pop
jle
jge
pop
test
movaps
cmp
jle
mov
lods
xchg
mov
inc
test
stos
outs
jmp
mov
mov
test
ficomp
or
mov
imul
test
imul
pushf
aaa
sahf
or
dec
inc
loop
and
(bad)
ins
in
xchg
outs
icebp
mov
jge
dec
add
jns
cmc
dec
dec
xchg
fnsave
(bad)
add
dec
sysenter
xchg
or
inc
sub
cmp
and
(bad)
sbb
push
mov
dec
sti
fbld
jecxz
int3
das
lock
and
push
push
test
pop
outs
push
shr
cwde
leave
mov
sbb
xor
adc
dec
xchg
and
std
sub
adc
nop
mov
dec
mov
push
mov
cmp
adc
jnp
pop
lods
arpl
and
aam
push
mov
dec
rcr
mov
leave
cmps
mov
xchg
rcl
fild
adc
and
test
push
mov
pusha
and
mov
loope
xor
jo
xchg
mov
les
xor
ins
jmp
push
(bad)
mov
inc
inc
and
dec
data16
xchg
sbb
sub
adc
xchg
sub
mov
dec
clc
fsub
rcr
aas
adc
xor
dec
call
rcl
scas
out
mov
xchg
fbstp
lods
lock
mov
repz
fcom
daa
scas
or
out
(bad)
cmps
push
and
vmulss
call
popa
repz
pusha
sahf
fs
idiv
cdq
inc
add
xor
pop
mov
pop
int
out
xor
test
jmp
lea
ins
push
daa
sti
jg
jnp
mov
push
push
xchg
in
dec
cmp
ss
pop
dec
pusha
pop
outs
and
ins
test
lock
loop
push
cmp
mov
adc
inc
dec
ds
and
daa
pushf
pop
sub
aam
adc
sub
arpl
stc
and
stos
je
je
or
mov
and
icebp
adc
loop
xchg
inc
in
movs
jae
popa
pop
call
fwait
std
inc
xor
xchg
push
cs
pop
push
jle
adc
int
xchg
not
or
jmp
xchg
clc
in
call
mov
test
cmp
xchg
cmp
sti
and
(bad)
popf
add
test
lods
repz
icebp
and
test
dec
or
data16
push
lea
arpl
addr16
inc
leave
push
les
rcl
rol
std
mov
mov
iret
lea
adc
mov
into
sbb
mov
xchg
inc
dec
(bad)
(bad)
pop
xor
imul
enter
shr
(bad)
xchg
icebp
sbb
inc
jle
stc
inc
mov
xchg
jle
cmps
jp
gs
fwait
xlat
(bad)
out
xchg
xor
dec
adc
inc
lock
out
xlat
cwde
push
std
les
jns
stos
jae
mov
in
fs
outs
mov
mov
pop
dec
repnz
int3
repnz
jg
rcr
(bad)
mov
push
cmp
adc
push
adc
inc
(bad)
mov
div
pushf
js
stos
jb
xchg
daa
push
sahf
mov
push
xchg
add
pop
movs
repnz
mov
jl
mov
and
inc
mov
or
sti
mov
lea
inc
cmps
stos
sbb
loop
push
jge
and
loopne
mov
popf
pop
clc
sbb
(bad)
mov
fs
mov
sbb
cmp
ins
lock
dec
cmp
enter
or
pop
fmulp
inc
mov
loopne
cmps
fnstcw
les
pop
push
mov
jl
mov
lock
push
cmps
stos
mov
test
mov
cmp
mov
aam
cmp
sub
sbb
mov
loop
dec
dec
jg
(bad)
xor
popf
jns
xor
mov
or
daa
repnz
outs
fcom
pop
push
jns
test
(bad)
fcom
out
push
sbb
repnz
bound
js
fwait
and
cmps
ds
in
mov
(bad)
pop
mov
stos
clc
inc
aas
cmp
rcr
icebp
or
sbb
arpl
js
lods
adc
call
scas
outs
stc
jnp
test
or
jle
(bad)
cli
(bad)
push
dec
pop
ficomp
inc
scas
xor
push
pushf
inc
ss
mov
mov
(bad)
es
mov
iret
fld
ret
js
ins
mov
es
js
fcom
cli
push
movs
jl
push
and
push
adc
adc
ss
xchg
stos
jmp
cwde
dec
mov
and
cld
mov
fistp
shr
(bad)
xor
pop
(bad)
mov
pop
cmps
stos
jl
and
rol
fmul
pop
mov
push
xchg
retf
jns
ja
icebp
jb
jp
xor
loope
xchg
(bad)
in
rol
fisttp
xchg
fcmovbe
out
and
pushf
les
out
leave
mov
cmc
pushf
sbb
data16
pop
inc
jmp
jp
adc
int3
lods
std
int
mov
or
jo
mov
xchg
out
inc
jo
adc
sub
dec
adc
inc
popa
mov
mov
inc
cdq
adc
or
loop
ficom
mov
push
and
rcr
jb
inc
scas
dec
ror
rol
jo
sbb
adc
dec
imul
sahf
loope
xlat
push
das
arpl
xchg
cmps
mov
push
inc
fistp
push
add
xchg
sbb
mov
fucomp
mov
addr16
faddp
out
cwde
adc
(bad)
jmp
and
pusha
pop
push
(bad)
sub
and
rol
cmp
jmp
jecxz
push
in
movs
adc
icebp
shl
call
in
dec
cmp
rcr
xlat
sub
sbb
and
or
or
xchg
fwait
not
in
sahf
jmp
sub
xchg
fnsave
sub
sbb
pop
xchg
mov
cmp
and
scas
nop
adc
in
cmc
xchg
cmp
call
push
in
cdq
dec
cwde
and
in
inc
cld
fs
mov
jne
fcom
lods
call
inc
cmp
push
xchg
mov
sbb
push
jp
inc
cdq
shl
popf
ja
(bad)
fistp
add
sub
das
xor
adc
mov
mov
jns
xchg
add
dec
test
cmps
(bad)
call
cmp
jle
mov
sub
push
jmp
data16
je
adc
pusha
xchg
in
push
ja
test
cmp
repnz
enter
push
in
sub
js
sbb
shl
push
sbb
and
pusha
or
loop
test
or
push
mov
lds
and
jmp
and
addr16
(bad)
sub
mov
pop
fsub
xchg
(bad)
fisttp
add
mov
and
sub
mov
xor
add
gs
pop
lods
sub
mov
dec
call
mov
inc
imul
leave
ja
repz
push
scas
mov
cmp
cmps
pop
xchg
int3
(bad)
push
dec
mov
(bad)
mov
inc
xchg
pop
jl
inc
ret
pop
sub
inc
test
cmc
mov
es
jle
dec
aas
jnp
mov
pop
dec
mov
iret
rol
add
and
out
mov
mov
xchg
xor
test
jge
add
jbe
(bad)
xchg
mov
cmp
lods
mov
test
cwde
jbe
aaa
xor
mov
xchg
lea
imul
inc
ret
or
ja
cmc
pushf
add
push
sub
dec
jne
mov
icebp
aad
lds
jb
jno
seto
outs
xchg
xchg
mov
dec
cmp
push
adc
dec
pusha
add
sbb
cmp
mov
inc
pop
fnstcw
jae
push
jmp
mov
scas
ds
pop
or
sbb
out
jo
mov
cdq
mov
enter
add
mov
fs
adc
das
mov
ins
sub
sti
mov
push
ficom
scas
sti
xchg
or
push
scas
push
sub
out
jb
and
popa
mov
repnz
jg
mov
in
adc
scas
test
push
pop
out
into
les
loopne
mov
xor
adc
and
pop
jo
ss
sbb
(bad)
cwde
aad
xor
jno
mov
adc
lods
test
inc
or
sbb
fs
dec
lods
addr16
mov
rcl
int
xchg
mov
out
cs
push
fldenv
test
imul
add
xchg
mov
push
xchg
inc
pop
push
and
lds
fwait
push
inc
nop
fimul
xor
idiv
jnp
xor
adc
adc
xor
adc
dec
and
(bad)
popa
cmps
push
sub
mov
cmp
sbb
aaa
mov
cmp
and
inc
out
jo
movs
int3
data16
lods
and
pop
mov
les
push
rcl
xlat
mov
sti
push
xchg
xor
retf
imul
sbb
pop
xor
daa
ret
mov
cmc
mov
mov
push
xchg
(bad)
sub
jns
xchg
adc
sti
fadd
cld
out
retf
das
fwait
push
pop
cmp
cwde
ror
into
ffreep
xor
imul
and
in
loopne
or
sar
xor
cmp
xchg
out
add
push
xchg
fistp
cmp
jnp
or
pop
xor
inc
enter
movs
xor
stc
into
and
inc
sahf
neg
hlt
adc
push
adc
clc
jb
jno
imul
shr
pop
(bad)
or
mov
shl
sub
pop
push
fisubr
mov
call
pushf
push
loope
mov
sti
jmp
aam
add
add
sahf
stc
jle
sbb
fs
fld
aas
cmp
jns
xchg
push
xor
push
jp
or
into
push
lods
pop
cmp
scas
out
and
xchg
adc
lods
cwde
lock
outs
aas
lods
fcom
jbe
cmp
pop
in
cld
push
daa
stos
ret
sahf
loop
pusha
in
push
stos
jno
inc
adc
inc
cmp
mov
in
fwait
loopne
and
div
push
jbe
mov
(bad)
std
les
jb
nop
popf
dec
jbe
and
adc
mov
aaa
shl
rcl
jg
popa
imul
inc
imul
loope
inc
es
cmp
mov
xchg
push
push
adc
pop
sbb
in
rep
cwde
xchg
(bad)
add
push
imul
nop
or
aad
mov
mov
fwait
in
pop
add
push
push
add
push
repnz
mov
dec
mov
sbb
out
repnz
adc
rol
and
inc
dec
xor
xchg
jne
retf
out
sbb
int
inc
sub
stc
aam
out
push
fistp
cli
shl
dec
jp
inc
ror
inc
mov
mov
xlat
jle
mov
xchg
add
sub
push
jl
test
jecxz
popa
pop
cmp
pop
cmp
jne
pop
sbb
fild
sub
cld
push
dec
retf
push
mov
pop
pop
xchg
cdq
loope
jl
loope
fst
jbe
mov
dec
jns
mov
lods
push
ja
aaa
mov
add
mov
mov
jmp
xchg
(bad)
dec
inc
jp
add
lds
mov
test
(bad)
xchg
out
add
sub
fbstp
mov
jae
popa
scas
mov
ins
sbb
ss
pop
mov
(bad)
mov
sbb
mov
and
outs
dec
mov
xchg
sbb
scas
dec
sub
es
jnp
dec
xchg
jg
jmp
cwde
fsub
add
mov
ja
add
push
fld
icebp
and
push
shl
and
sub
xchg
dec
es
test
in
sub
pop
sbb
je
adc
inc
cdq
mov
pop
sub
xchg
cmp
cmp
mov
mov
pop
jo
inc
dec
fsub
cmp
imul
in
inc
pop
cmp
imul
popa
neg
scas
aas
xor
add
jmp
xchg
mov
xchg
add
es
xor
dec
shl
loopne
retf
jae
repnz
mov
cmp
mov
mov
popf
jge
mov
push
push
pop
mov
ins
inc
stc
lods
and
outs
shr
xor
cmc
push
stos
and
sub
adc
sbb
outs
je
mov
mov
and
xchg
aaa
xchg
xchg
(bad)
push
jmp
pop
dec
push
pop
int3
inc
cmc
stc
jmp
mov
ret
sub
movs
ret
jle
imul
mov
aas
inc
icebp
and
es
lock
pop
mov
jge
stos
test
push
or
shr
fadd
or
push
jne
mov
inc
push
(bad)
pushf
jp
or
mov
test
adc
or
js
pushf
sub
out
outs
fcomp
inc
or
cmc
mov
dec
pop
push
mov
dec
jp
xor
lods
or
sub
inc
cmp
mov
jge
pop
sub
or
jno
(bad)
jge
sbb
sbb
fstp
aaa
std
ror
jl
dec
cmp
xchg
rcl
adc
add
mov
popa
icebp
loop
add
cmp
ins
aas
(bad)
call
cmp
and
xor
jno
bound
bound
sub
out
shl
xor
retf
inc
out
dec
pop
adc
jno
in
mov
in
stos
das
loop
sbb
gs
in
loope
mov
popf
adc
out
push
adc
out
xchg
xchg
xor
add
bound
and
adc
int3
inc
adc
cmp
sbb
fcom
add
mov
stos
add
lea
xor
ret
bound
leave
je
dec
aad
je
xor
sbb
xchg
sub
into
shl
je
adc
dec
js
and
jl
ds
inc
add
int3
stc
(bad)
add
adc
call
add
mov
arpl
ficomp
or
sub
ficomp
and
add
and
cmps
dec
jo
cmp
sbb
(bad)
(bad)
lods
cmp
out
imul
scas
mov
add
adc
lds
js
pop
lock
ins
and
outs
sbb
xchg
ret
mov
les
jo
outs
test
in
pusha
dec
adc
leave
xchg
js
xchg
cmp
and
inc
mov
sbb
push
mov
imul
add
sahf
inc
(bad)
pop
inc
mov
repnz
xchg
dec
arpl
add
and
fcmovne
jmp
ror
xchg
dec
fwait
push
scas
lea
adc
mov
jb
and
pop
push
ss
jecxz
stos
imul
ror
mov
push
lock
lds
leave
call
pusha
cmp
lock
dec
stos
out
cmc
jle
dec
dec
cmps
lahf
adc
jmp
push
nop
xor
jo
out
pop
add
adc
sub
add
int
pop
loope
fimul
and
ins
jo
or
adc
mov
sub
xchg
cmc
add
lahf
loope
jmp
push
repnz
mov
pop
ja
(bad)
mov
movs
mov
mov
jmp
adc
or
xchg
pop
std
or
jnp
les
std
mov
outs
scas
cmp
outs
mov
add
mov
pop
xor
fld
aad
ins
lods
pop
cld
pop
ror
adc
jge
sub
not
cmps
xchg
lahf
dec
or
imul
aas
pop
fwait
mov
addr16
or
jmp
sub
xchg
sbb
pop
cmp
push
iret
(bad)
push
xchg
pop
dec
pushf
dec
or
dec
(bad)
ffreep
pop
cmps
xor
outs
popf
push
mov
xor
scas
movs
lods
out
dec
aam
inc
and
(bad)
mov
or
sub
fmul
pop
mov
mov
add
jmp
jbe
and
pop
imul
(bad)
fdivp
add
add
mov
fldenv
xor
mov
cmc
xor
in
scas
lods
sahf
cmc
pop
xchg
aas
(bad)
in
hlt
add
and
in
movs
inc
out
cld
pop
fcmovu
pop
cmp
jmp
stos
rcr
jb
mov
push
out
or
lods
icebp
add
cwde
pop
mov
in
js
aaa
iret
inc
(bad)
sar
es
add
and
popf
cmp
retf
inc
jmp
int3
xor
outs
push
mov
adc
push
pop
getsec
in
sub
(bad)
pusha
call
or
sbb
(bad)
fisttp
fist
and
in
dec
sbb
das
jbe
adc
mov
pop
ds
jbe
call
push
loope
xchg
mov
fisubr
enter
sub
pop
xchg
jmp
jg
fild
popa
xor
(bad)
rcl
stc
mov
mov
lods
xchg
push
out
sar
push
lods
jno
xlat
jae
xchg
test
dec
xchg
test
adc
pop
push
inc
aas
mov
push
ja
push
jbe
pop
xor
data16
sbb
stos
lock
call
test
adc
fdivr
mov
cmp
inc
mov
lahf
adc
sbb
pop
gs
or
lds
jp
jecxz
loopne
jbe
movs
mov
and
jns
out
and
jmp
in
jg
sub
cmc
push
into
js
arpl
add
fsub
retf
add
test
imul
sbb
mov
pop
aas
sti
mov
(bad)
out
push
jl
push
adc
xchg
sub
jge
jne
mov
in
xchg
adc
push
xor
fcomi
stos
cmp
sub
shr
jno
mov
movs
in
add
jo
add
ds
jno
or
call
add
int
dec
pop
scas
and
inc
arpl
mov
fwait
sbb
das
dec
lods
inc
xchg
lods
inc
cmp
aas
imul
and
mov
outs
inc
popf
push
inc
add
sbb
fdivr
mov
mov
fmul
jecxz
leave
and
mov
push
xchg
(bad)
fcomp
movs
mov
rcl
pop
and
jl
push
(bad)
in
push
lock
lea
(bad)
push
scas
sub
fwait
iret
push
lods
daa
bound
jbe
retf
xchg
xchg
fidivr
loope
cmps
psubb
scas
std
sub
jp
adc
loope
fs
or
aam
mov
xchg
out
pop
stc
mov
adc
fdivr
mov
mov
fwait
jnp
jno
ror
dec
out
pop
mov
leave
mov
sahf
mov
jecxz
sub
jmp
xchg
stc
add
adc
pop
pop
lea
cmp
ret
fsubr
mov
push
mov
dec
cmp
call
into
shl
add
cli
add
into
cmp
(bad)
xchg
mov
mov
(bad)
ja
mov
xor
adc
adc
lods
sbb
xchg
inc
mov
jl
cld
xlat
xor
mov
(bad)
movs
mov
jbe
mov
jno
in
sub
not
adc
les
mov
outs
jne
pop
in
adc
pop
xor
in
push
adc
fisttp
ret
push
mov
retf
loope
mov
push
(bad)
je
mov
inc
cmp
fisubr
lods
sbb
jle
sbb
mov
push
sbb
mov
mov
and
cmp
inc
loope
mov
push
push
test
mov
repz
test
in
xchg
outs
adc
and
push
inc
and
icebp
jg
ds
jmp
(bad)
push
loope
mov
sbb
or
gs
pop
push
pop
adc
dec
xor
sbb
xor
test
nop
jge
mov
addr16
jecxz
test
jge
adc
int3
scas
jl
cmps
xchg
dec
cmp
xor
push
ret
nop
jmp
sbb
in
sbb
xchg
hlt
and
jg
lods
xor
jae
pushf
jmp
cwde
icebp
push
gs
out
mov
outs
cmp
fnstsw
popa
(bad)
fbstp
outs
scas
dec
push
imul
jno
scas
cmp
sub
or
lods
jo
jnp
inc
add
call
pop
cld
std
mov
inc
adc
cld
ret
rcl
fnsetpm(287
add
push
jmp
xor
sub
paddb
dec
test
xchg
das
adc
push
push
sub
adc
xchg
pusha
xor
push
daa
retf
stos
xor
test
out
stos
adc
xlat
and
mov
dec
cmp
and
test
and
jg
mov
pop
or
push
jmp
and
add
mov
and
and
adc
enter
sbb
xchg
daa
in
mov
xchg
or
cdq
push
mov
xchg
and
add
scas
cmps
cld
mov
xor
jmp
je
mov
sub
push
outs
add
dec
sbb
das
push
xchg
jmp
adc
dec
cmp
fwait
icebp
call
mov
sbb
lods
inc
icebp
punpckhdq
sbb
push
repnz
frstor
das
sbb
data16
inc
jecxz
mov
repnz
mov
cdq
rcr
mov
loope
cs
and
outs
pushf
neg
mov
push
cld
les
cmps
neg
fist
jmp
hlt
fnstsw
inc
nop
jmp
jecxz
movs
add
sub
pop
push
ret
push
in
into
jg
out
mov
sbb
std
call
js
dec
loop
inc
sbb
inc
in
imul
(bad)
int
push
push
cmc
adc
cwde
xlat
inc
hlt
jmp
sub
jmp
mov
aaa
jb
jnp
xchg
sub
jbe
cmp
sbb
shr
rcl
das
in
scas
(bad)
lds
dec
fs
retf
pop
sbb
fcmovb
mov
xchg
test
pop
inc
(bad)
ficom
loope
dec
fnstsw
js
adc
cli
out
sub
push
es
aam
pop
xor
into
std
stos
adc
nop
out
pop
sub
into
xor
sub
out
pushf
(bad)
sti
outs
lods
hlt
imul
jge
dec
fwait
add
test
in
or
lods
mov
(bad)
push
in
mov
sbb
test
jl
push
in
int
(bad)
gs
inc
xchg
push
retf
(bad)
xchg
loop
and
jne
shl
add
add
cmc
mov
(bad)
or
sbb
jg
cli
add
push
and
dec
cmp
mov
mov
out
jno
cmc
mov
arpl
fisttp
out
icebp
fs
bnd
ss
mov
jg
jae
cmp
(bad)
jle
xchg
loope
xchg
sub
cld
mov
jb
int3
xor
inc
(bad)
jbe
dec
jne
push
push
push
movs
pop
adc
mov
sub
movs
enter
(bad)
test
das
mov
sbb
dec
test
add
iret
push
jge
popa
push
xor
aaa
lahf
repnz
push
jecxz
jno
jp
out
sub
in
lock
mov
adc
fsubr
or
pop
or
fisub
jle
xchg
aaa
adc
xchg
push
jecxz
mov
iret
rol
or
sbb
mov
sbb
bound
popa
std
sub
or
in
retf
sbb
mov
xchg
mov
or
test
sub
ficom
das
test
hlt
add
mov
mov
(bad)
mov
cwde
ins
repz
repz
mov
dec
dec
push
mov
out
ds
xchg
push
and
test
pusha
out
scas
dec
inc
or
and
(bad)
js
fistp
ret
rcl
loop
sub
std
in
xchg
sub
cmc
xor
push
je
pusha
add
es
xchg
mov
jmp
mov
or
sub
dec
push
mov
stc
dec
jnp
fimul
or
cmp
out
xchg
aam
add
dec
sub
ror
retf
(bad)
cmp
mov
xor
and
and
ficomp
lea
dec
test
outs
push
mov
add
in
pop
sbb
mov
push
int
lahf
sub
enter
call
push
ja
js
test
adc
(bad)
mov
xor
cmp
cmp
mov
xchg
pop
movs
test
cmps
popf
test
gs
jnp
pop
pop
and
inc
adc
out
xchg
sub
xor
(bad)
pop
cmp
mov
imul
or
cwde
xchg
add
mov
jo
shl
mov
cdq
pop
(bad)
cmp
xlat
retf
leave
scas
or
fmul
sahf
inc
int
sbb
add
jmp
outs
dec
in
inc
xor
sub
popa
repnz
jns
rcr
cmp
mov
xor
mov
retf
jecxz
inc
sbb
jmp
adc
test
std
(bad)
mov
das
test
mov
(bad)
jo
xchg
jo
add
pop
mov
packssdw
pop
imul
xchg
mov
icebp
push
jb
fisttp
movs
dec
js
fiadd
pushf
inc
cdq
mov
data16
and
jmp
mov
(bad)
rcr
ret
xchg
dec
sbb
loop
jg
sti
xor
mov
popf
cmp
or
dec
jp
repz
inc
loope
sbb
mov
pop
call
outs
dec
cs
pop
xchg
mov
xor
ds
jo
in
daa
mov
pop
retf
jno
mov
jmp
and
sub
mov
and
pushf
pop
ret
mov
xor
sar
ins
inc
or
push
lahf
mov
dec
xchg
stos
cs
jo
gs
repz
aam
test
mov
loopne
out
mov
push
jo
push
jle
das
jmp
or
std
int3
pop
lock
add
repz
adc
xor
(bad)
clc
ret
and
jle
cld
push
dec
mov
xchg
sub
rcl
outs
in
pop
pop
or
sub
mov
mov
inc
fist
aas
and
jbe
fldcw
ret
sahf
push
imul
fcomp
inc
retf
xchg
push
jno
push
pop
pop
adc
sub
imul
or
jle
jmp
ins
es
pop
push
retf
jns
test
int3
(bad)
jmp
adc
jns
mov
bnd
cdq
ror
out
mov
movs
adc
jmp
retf
hlt
outs
(bad)
pop
push
test
cmp
push
iret
arpl
mov
mov
and
xchg
fisttp
out
sbb
jnp
shr
pushf
jnp
les
jecxz
inc
push
push
imul
(bad)
fsubr
int
ds
mov
mov
fidivr
xchg
ficomp
pop
xchg
push
dec
cmp
out
push
ins
mov
retf
outs
push
mov
xor
ins
cdq
add
mov
fsub
scas
std
xchg
rcl
or
adc
pusha
jmp
jno
popa
in
sub
out
sub
js
inc
push
push
sahf
push
div
or
or
scas
das
xchg
jg
fnstcw
add
lea
sbb
clc
dec
lea
sbb
inc
shl
pop
mov
cmp
retf
mov
xchg
imul
lock
jo
movs
sti
pop
inc
sbb
dec
xchg
imul
jge
jp
mov
dec
leave
fcmovb
mov
leave
pusha
sub
push
ja
loope
dec
jg
or
adc
jmp
xchg
jnp
dec
mov
bound
cli
jne
mov
sub
add
sbb
aam
cmps
pusha
icebp
add
adc
mov
sub
dec
xchg
repz
inc
sbb
(bad)
jge
push
push
in
add
aam
add
push
pop
cli
fnsave
push
xlat
inc
xchg
pop
xor
je
fiadd
adc
(bad)
xchg
inc
out
bound
cwde
jae
retf
outs
jo
mov
shr
aaa
jno
cmps
jbe
ret
loop
mov
push
imul
pop
cld
mov
lods
jmp
shl
dec
movsx
outs
sub
cdq
sbb
retf
mov
jae
ret
mov
mov
push
(bad)
lods
sbb
dec
mov
sbb
retf
mov
pop
mov
xlat
call
jge
cld
not
sbb
inc
sbb
(bad)
sub
fucomp
mov
lahf
pop
jp
je
fdivr
fucomi
in
pop
xchg
stc
popa
pop
xchg
outs
ja
iret
inc
fucomp
cmp
sbb
dec
loop
xchg
push
leave
mov
(bad)
retf
pop
cmp
clc
add
jl
repnz
cmp
addr16
std
sti
dec
jnp
iret
mov
pop
push
fidiv
mov
and
pop
movs
mov
dec
xor
mov
sub
dec
or
fstp
xchg
aad
mov
xchg
jno
add
mov
jp
fcmovb
out
mov
repz
adc
sbb
(bad)
mov
test
mov
imul
pop
mov
jno
imul
inc
pop
enter
mov
lea
inc
sub
pop
xchg
dec
xchg
mov
ins
pop
adc
arpl
retf
fsubrp
xor
fstp
xchg
je
mov
xor
and
inc
loopne
mov
scas
mov
in
out
fwait
pop
mov
clc
xchg
pop
mov
xlat
and
and
jg
mov
xchg
(bad)
sar
mov
not
cwde
dec
shr
xchg
gs
ds
lock
dec
add
or
xor
dec
scas
fs
lahf
xor
cmc
inc
adc
daa
test
mov
inc
mov
retf
icebp
loopne
mov
mov
fsub
pop
data16
pop
and
popa
nop
xor
ret
inc
arpl
in
ss
ret
cwde
mov
mov
jbe
mov
ret
jnp
(bad)
in
push
cmp
xchg
movs
clc
arpl
jmp
pop
(bad)
mov
pop
adc
mov
pop
rol
addr16
call
push
lods
mov
sbb
mov
icebp
test
scas
jg
es
xlat
jmp
xchg
loop
inc
test
xchg
dec
sub
jp
mov
ror
aad
cmp
add
mov
cmp
xchg
mov
mov
sub
scas
stc
je
(bad)
push
add
and
push
movs
or
repnz
adc
and
rol
les
push
sbb
mov
pop
push
sbb
pop
rcr
call
xchg
xchg
sbb
imul
(bad)
push
das
gs
sub
ror
push
and
pop
ja
xor
cmp
cmc
idiv
sub
xor
cmps
adc
pop
cdq
fisttp
sbb
cli
push
inc
leave
and
jle
push
bound
pop
push
jle
ins
xchg
jge
xchg
jnp
and
mov
adc
stos
or
mul
push
xchg
xchg
popa
xchg
test
mov
rol
push
pop
xchg
adc
or
iret
adc
push
inc
cwde
xor
inc
inc
into
or
js
fsubrp
jecxz
arpl
add
test
adc
inc
inc
jbe
into
stos
pop
sbb
repnz
sub
inc
sbb
sbb
dec
mov
inc
clc
cdq
rol
movs
ss
push
sub
mov
pop
(bad)
push
sbb
pop
loop
test
(bad)
jns
mov
mov
mov
dec
xchg
inc
mov
mov
sub
pop
loop
and
xor
push
mov
jae
imul
rcr
mov
aaa
mov
test
mov
sub
xchg
and
jp
or
call
in
(bad)
or
in
push
adc
pop
sub
cld
xchg
cmp
jmp
jno
dec
ror
and
fdivr
aaa
fistp
fimul
push
cdq
mov
mov
and
and
sub
xchg
mov
loopne
lods
inc
add
jl
xchg
or
push
bound
out
cmps
inc
xor
fidivr
nop
push
push
int3
mov
mov
xchg
push
sbb
inc
mov
or
xlat
test
add
mov
sbb
and
jl
ds
xlat
push
jns
fadd
push
ds
jge
xchg
and
fwait
mov
jmp
and
push
adc
sbb
dec
movs
jecxz
fimul
mov
jb
and
mov
enter
push
mov
sub
push
or
loop
pop
ficom
mov
ret
sahf
jge
pop
push
mov
repz
retf
cmp
das
dec
pop
pop
jnp
inc
mov
cmp
or
xchg
adc
push
repz
sub
aad
jl
rcr
and
fwait
mov
pop
dec
adc
loopne
adc
adc
or
cdq
jg
mov
xchg
ds
add
push
sub
pop
aaa
jg
pop
cmc
push
push
lock
mov
mov
jne
or
xchg
cld
shr
imul
xchg
ins
leave
pop
out
je
sbb
push
lods
das
hlt
or
ss
into
ss
inc
jmp
jp
ins
call
add
aas
into
lods
je
sub
push
mov
or
ja
repnz
test
out
mov
(bad)
xchg
mov
jge
adc
inc
xor
xchg
jb
xchg
xchg
push
push
test
fistp
clc
push
push
xor
sbb
push
aaa
ret
pop
mov
xor
je
sub
ins
imul
mov
loopne
sbb
sub
mov
xor
arpl
test
movs
push
rcl
fucom
shl
pop
pop
inc
in
mov
mov
pop
sub
gs
cmc
mov
cmp
dec
cs
inc
outs
hlt
mov
xchg
adc
pop
aas
pop
test
dec
and
mov
or
daa
cmp
fisubr
aam
test
ins
and
sub
pop
adc
xchg
dec
stos
rcl
loop
and
xor
mov
loop
xor
loopne
dec
jle
mov
xor
je
test
out
daa
(bad)
scas
mov
scas
push
pop
cmp
mov
aad
rcr
cdq
int3
fisttp
push
mov
mov
sub
push
mov
(bad)
dec
loope
add
ds
mov
cmp
jae
fnstcw
push
adc
cs
dec
cmp
push
hlt
jne
clc
inc
or
shr
cmp
cld
push
in
mov
mov
mov
and
mov
add
jnp
or
clc
jns
dec
mov
mov
in
mov
xor
inc
ja
loope
sbb
sahf
or
adc
cdq
lahf
div
cmps
out
ss
mov
and
cdq
jbe
(bad)
xchg
imul
sbb
sbb
sbb
xchg
adc
pop
mov
(bad)
(bad)
sar
ss
(bad)
test
and
stc
shr
(bad)
(bad)
mov
sahf
cdq
stos
adc
xchg
(bad)
lods
xor
mov
cdq
jne
into
xor
add
arpl
cmc
inc
or
push
sbb
mov
jp
xchg
into
jae
sub
adc
clc
out
xor
hlt
rol
or
(bad)
daa
add
in
inc
mov
in
test
sub
stc
pop
dec
cwde
jns
mov
xor
mov
inc
xchg
repnz
jle
mov
stos
(bad)
sub
ins
push
iret
setg
jp
sbb
scas
pushf
pop
lods
stc
fmul
cmps
pop
jle
push
iret
call
mov
cmp
jecxz
add
adc
jl
popf
inc
adc
les
fisub
setbe
jno
rcr
add
pusha
push
pop
outs
into
inc
xchg
or
(bad)
enter
cmc
jae
adc
outs
fst
pop
or
movs
push
mov
add
cmp
test
rcl
lock
ret
xlat
in
inc
lahf
lahf
xlat
adc
or
stc
ds
cmp
inc
jne
jp
retf
xchg
stos
cmp
inc
jb
xchg
lock
inc
sar
jge
rep
pusha
cdq
push
pop
pop
addr16
push
adc
mov
mov
adc
jne
ja
xchg
ret
pop
fmul
xchg
cmp
jae
jb
cmp
cmp
jl
mov
int3
mov
mov
sti
xor
sbb
push
jno
sbb
in
push
sub
cmp
push
int3
enter
jns
cmc
pop
test
rcl
daa
dec
adc
mov
xchg
xchg
adc
inc
mov
xor
stos
push
fdiv
fcom
loopne
sbb
(bad)
xchg
dec
jns
cmp
inc
js
xchg
iret
shl
clc
cmp
rcr
(bad)
jo
jne
out
add
and
or
pop
and
cwde
mov
pop
xchg
xchg
push
or
fldenv
sbb
ret
and
cdq
out
scas
adc
fld
shr
cmp
shl
mov
lods
jmp
in
pop
mov
shl
push
lock
push
jae
imul
push
adc
aad
or
in
mov
test
and
pop
fld
bound
add
test
jae
mov
inc
je
ja
leave
mov
(bad)
dec
cmp
add
test
or
push
stc
sbb
mov
and
push
and
push
mov
xor
(bad)
(bad)
rcr
pop
adc
xchg
mov
or
mov
das
mov
out
lods
jne
push
dec
popa
or
dec
pop
mov
inc
mov
cli
xchg
pop
jg
les
inc
movs
test
xor
adc
sbb
push
stos
adc
sub
call
xchg
mov
int
bound
hlt
popa
mov
jae
pop
es
clc
(bad)
out
in
mov
push
loopne
sub
fcomi
daa
xchg
and
enter
fs
jg
sti
mov
enter
popf
sbb
sti
jp
cmp
aad
inc
call
and
icebp
div
js
fbstp
jae
inc
xchg
and
dec
movs
and
pop
loope
xchg
aam
(bad)
inc
stc
jb
int
lods
pop
mov
lods
out
and
push
add
add
out
rcr
arpl
test
fchs
adc
xchg
std
sbb
xchg
pop
lea
test
(bad)
iret
sub
retf
and
mov
jmp
jmp
ror
lods
loopne
aas
div
aad
cmp
jl
bndstx
lock
and
jne
je
scas
in
adc
sbb
jae
retf
fidivr
xor
add
pop
mov
inc
mov
mov
js
call
mov
sahf
pop
xor
(bad)
loopne
frstor
je
lds
jecxz
pop
mov
inc
sub
mov
imul
out
sub
push
adc
inc
xchg
popf
or
(bad)
dec
jge
mov
sbb
fmul
icebp
and
fs
sub
cmc
in
les
add
push
sub
data16
jnp
stc
inc
popa
or
mov
cmc
out
adc
jb
ss
adc
imul
ja
test
push
add
push
das
neg
call
push
out
je
or
xchg
out
pop
pop
(bad)
sbb
xchg
jo
inc
lahf
add
lods
jecxz
pusha
bound
imul
sub
xchg
jmp
or
dec
xchg
mov
jecxz
pop
cmps
sub
test
jno
push
pop
or
loopne
mov
mov
dec
or
sti
ficomp
mov
pop
shl
stc
ins
icebp
push
jbe
cmp
inc
fisub
clc
mov
pop
mul
jle
pop
xor
loope
sbb
ins
mov
mov
cwde
mov
cli
or
add
jbe
ret
bound
or
mov
scas
dec
ss
bound
adc
cmps
loopne
rcr
rol
call
add
hlt
mov
sbb
and
xor
jo
cmc
cld
in
shr
cld
shl
push
cmp
xor
mov
pop
or
sbb
inc
shr
retf
sbb
push
add
pop
mov
sub
jp
push
movs
stos
or
adc
push
das
ja
movs
sbb
ror
xor
pusha
mov
test
xchg
mov
jge
push
or
(bad)
jp
sbb
xor
jecxz
and
add
test
adc
sub
pop
cli
loop
push
mov
fisub
ins
pop
inc
sub
ds
cmp
push
pop
div
popa
(bad)
sbb
sbb
push
into
movs
movs
sub
xor
in
pop
fnstsw
push
pop
mov
add
push
xlat
hlt
mov
js
gs
adc
jnp
imul
push
fsubr
xor
jp
enter
inc
mov
and
pusha
xchg
cli
sub
cmps
aas
jmp
pop
sbb
repz
arpl
mov
mov
aam
pushf
xor
sbb
hlt
sbb
xlat
(bad)
jmp
rol
xchg
popf
clc
stos
mov
mov
push
ret
dec
cmp
cmp
ins
mov
jmp
jmp
jge
stos
pop
stc
xchg
sub
or
ss
popa
inc
dec
or
jl
sub
shl
stos
and
xor
jb
sar
call
mov
cmps
movs
adc
xchg
add
mul
aad
sub
adc
sub
es
in
jle
sub
xchg
cmp
and
add
mov
mov
int3
daa
jecxz
push
or
ror
sub
jae
in
int
stos
sahf
mov
sub
pop
cmps
popf
jp
ror
imul
jmp
ss
retf
xchg
inc
xchg
dec
ds
push
jno
sbb
in
mov
mov
pop
sbb
xor
jmp
data16
fmul
sub
loopne
cmp
mov
aas
enter
jp
ds
sar
lods
retf
frstor
dec
pop
or
jle
cmc
xor
les
push
ins
jmp
push
in
mov
push
pushf
loopne
mov
dec
cmps
popf
inc
shl
sub
jmp
and
pop
daa
mov
sub
jl
push
mov
mov
rol
push
sub
cmp
pop
cmp
fwait
test
loopne
clc
mov
jo
jle
outs
arpl
retf
mov
outs
dec
xor
inc
stos
test
xor
rol
es
call
icebp
pop
sti
sub
pop
inc
mov
sbb
cmp
(bad)
cs
in
or
jg
mov
mov
add
ds
cmp
cmp
push
mov
fild
sub
mov
mov
gs
or
adc
iret
(bad)
xor
mov
fstp
in
xchg
fisttp
in
test
cmp
sub
push
add
sub
test
or
mov
mov
sub
out
rcl
jnp
mov
das
ret
adc
mov
xor
xlat
push
push
aas
xchg
sbb
(bad)
xchg
dec
add
sub
pusha
mov
aas
sub
pusha
fbstp
enter
lods
push
dec
stos
call
mov
or
xor
mov
lds
push
dec
jmp
not
pop
movs
test
hlt
in
lods
pop
scas
cli
dec
idiv
pop
(bad)
sti
pop
mov
jmp
mov
mov
jnp
pushf
shl
or
or
popa
or
sbb
pop
dec
mov
out
jb
das
rcl
sbb
aaa
ja
imul
and
retw
push
push
imul
(bad)
dec
js
and
lods
mov
sbb
cmps
aaa
xchg
into
mov
adc
ret
call
pop
popf
test
fisttp
pop
inc
aam
pop
mov
dec
or
sti
jle
add
lock
fidiv
cli
mov
jp
sub
icebp
cld
xchg
cmp
mov
adc
inc
pop
into
in
in
test
adc
sbb
jns
mov
or
cmc
jno
pop
or
or
out
loopne
inc
dec
je
pop
inc
stos
loope
es
out
mov
adc
pusha
ss
jae
fist
mov
mov
(bad)
and
loop
mov
iret
push
mov
add
inc
cmps
addr16
inc
dec
xchg
gs
fdivr
(bad)
pop
in
dec
fs
cmps
ds
mov
or
rcr
int
fs
rol
ins
dec
fidiv
or
push
and
dec
add
imul
mov
leave
(bad)
add
xchg
(bad)
rol
jp
sub
or
ins
pushf
scas
xchg
test
push
addr16
add
das
test
add
dec
sbb
mov
(bad)
pusha
mov
movs
shr
mov
mov
pop
aas
arpl
sbb
push
sbb
retf
xor
and
shr
jecxz
push
and
mov
es
xchg
pushf
in
aaa
sbb
ret
inc
or
dec
stos
xor
mov
adc
repnz
jno
dec
(bad)
sbb
pop
inc
mov
jmp
inc
mov
or
push
mov
push
pop
cmp
sub
adc
push
cs
ret
xor
fnstcw
ins
in
lods
xlat
and
div
sbb
jl
sbb
rol
rcr
mov
aaa
dec
cld
(bad)
or
push
retf
mov
pop
shl
sub
lods
xor
aad
ss
inc
pop
xor
ds
cmp
arpl
outs
test
or
push
jp
into
inc
sbb
mov
pop
aas
stos
add
pop
inc
ret
xchg
adc
or
inc
imul
mov
sub
popf
mov
fisub
push
dec
enter
mov
mov
dec
adc
xor
mov
jg
push
push
out
add
pop
mov
stos
in
sub
es
xor
sahf
int3
stos
popa
xor
outs
(bad)
dec
adc
mov
inc
add
popa
popa
dec
xor
mov
aad
xor
mov
movs
push
hlt
inc
ja
test
movs
xor
aas
loop
and
sbb
int3
cwde
add
loop
adc
mov
sahf
adc
aas
xlat
sub
sub
pop
dec
mov
aaa
cmp
mov
outs
ret
(bad)
xchg
cmp
jmp
enter
fstp
(bad)
clc
test
cmp
rol
jne
push
sub
fs
(bad)
fist
lods
test
sbb
int
stc
imul
out
js
ret
arpl
cmp
adc
mov
test
mov
test
push
xchg
lods
jne
mov
or
pop
push
(bad)
fistp
loopne
mov
es
adc
(bad)
pop
pop
push
and
cmp
push
xor
enter
test
sti
bound
scas
inc
in
sbb
push
ret
jne
sub
cmc
js
mul
fs
add
or
xor
lods
jo
mov
movs
sub
mov
dec
mov
mov
adc
imul
dec
jno
push
adc
sbb
scas
arpl
mov
xor
sub
mov
jp
pop
and
mov
mov
mov
or
lds
mov
stos
pop
pushf
pop
arpl
rol
ffree
mov
push
fcomip
pop
jmp
fisttp
inc
sub
jmp
jnp
add
ins
and
and
jge
pushf
or
add
in
xchg
xor
retf
test
sti
mov
in
pop
inc
retf
popf
movs
sub
add
sub
cmp
ret
add
imul
dec
mov
mov
dec
dec
mov
or
push
inc
pop
rol
inc
stc
loope
cmp
cwde
neg
pop
je
pop
or
or
out
nop
in
lock
sti
out
popa
or
sub
fiadd
sbb
int
sub
jg
xchg
xchg
sti
mov
cmp
xchg
pop
mov
and
(bad)
ror
in
arpl
cli
dec
jmp
shr
and
and
punpckhbw
pop
out
fsubp
mov
push
dec
cmp
popf
xor
shl
push
push
in
bound
std
mov
jo
jmp
mov
mov
pop
mov
not
das
cmp
inc
adc
mov
adc
lahf
out
xor
retf
outs
cmps
pusha
pop
rcl
dec
mov
push
inc
sahf
pop
and
xchg
retf
mov
xchg
ja
xchg
movs
rol
lds
push
cmp
and
jnp
and
jmp
movs
test
pop
add
and
mov
fidiv
test
mov
adc
fisttp
(bad)
jnp
fimul
cmp
pop
mov
pop
js
push
pop
or
cld
imul
(bad)
out
xchg
lahf
out
iret
pushf
push
ins
sbb
push
jle
jecxz
cld
pusha
dec
ds
pushf
sbb
call
iret
xchg
sbb
inc
cld
scas
dec
js
(bad)
and
ror
shr
inc
push
cmc
mov
jmp
in
mov
push
sub
sub
xchg
or
gs
addr16
mov
cmc
popf
push
pop
mov
inc
jb
dec
and
lds
ins
out
jp
out
in
scas
jo
out
in
sti
fs
sub
clc
(bad)
test
test
add
add
and
out
in
push
push
dec
pop
sbb
mov
or
jne
add
dec
pop
push
fsub
dec
sbb
das
sub
enter
add
fcmovnb
mov
(bad)
scas
mov
adc
pop
enter
mov
popa
cmp
scas
dec
(bad)
sub
in
jno
lea
fwait
jecxz
sbb
jae
adc
sub
stos
jno
stos
adc
and
mov
fs
push
cmps
test
mov
mov
pusha
jnp
xor
add
mov
sub
aaa
lds
popa
mov
daa
out
mov
jmp
test
sub
movs
add
lods
(bad)
sbb
pop
test
lods
scas
and
in
push
retf
je
div
ja
cmps
cs
(bad)
stos
ss
and
aad
aaa
cmp
mov
jns
sbb
jl
dec
iret
enter
adc
pushf
into
(bad)
fsubr
mov
lea
icebp
(bad)
(bad)
pop
fistp
mov
inc
xor
pop
mov
add
push
icebp
lock
xchg
bswap
test
movs
pusha
jp
out
in
lea
sbb
cli
popa
or
rcr
imul
test
jo
mov
or
adc
dec
fsub
outs
pop
xlat
mov
sahf
rcl
std
sub
sbb
add
enter
and
xor
adc
leave
scas
mov
mov
popf
pop
or
sub
call
pop
or
xor
fst
cwde
icebp
and
int3
les
or
lahf
sub
pusha
and
movs
ins
xor
mov
sbb
mov
movs
ds
cmp
outs
mov
add
in
jl
cwde
adc
outs
dec
mov
and
sar
push
loopne
mov
inc
push
hlt
loopne
and
jp
xor
inc
mov
imul
pop
adc
xchg
push
inc
mov
lods
out
ss
mov
adc
cdq
add
movs
ficomp
or
sub
ret
push
imul
sar
les
push
outs
lea
mov
or
ret
call
push
fild
jo
ins
stos
dec
xchg
gs
jb
sbb
and
dec
xchg
xchg
cmps
not
ja
movs
jnp
es
sub
nop
xchg
inc
and
ins
mov
loopne
pop
in
mov
xor
xor
repz
shl
cmps
js
aad
test
shl
hlt
xor
clts
adc
gs
je
(bad)
stc
sub
dec
inc
add
mov
shl
push
loop
xchg
sub
ins
push
scas
lahf
ins
lahf
fnstcw
int3
adc
retf
cmc
inc
daa
(bad)
jp
cli
push
je
mov
pop
pusha
adc
jbe
or
jp
push
cli
and
test
add
inc
cmps
and
push
xor
clc
jno
jno
mov
icebp
pop
imul
jl
push
adc
xor
xor
sub
lahf
js
pop
shr
xor
cmps
dec
sar
test
or
(bad)
jb
and
or
xchg
or
(bad)
ss
mov
outs
jb
xor
rcr
mov
sub
(bad)
out
ror
inc
loop
fbld
retf
mov
dec
jae
nop
xchg
int3
xor
mov
and
cli
push
int3
or
sbb
dec
call
sub
jae
mov
cwde
mov
and
popa
std
movs
std
xchg
xchg
dec
push
or
loop
arpl
inc
xlat
add
ss
cli
bnd
push
xor
aas
jbe
loopne
mov
mov
mov
fcmovne
inc
div
scas
aas
stos
in
outs
xchg
rol
mov
pop
mov
enter
call
clc
cmp
hlt
test
or
sub
(bad)
cmps
sahf
cld
push
adc
dec
xlat
aaa
sbb
stos
out
mov
clc
push
lds
jae
mov
in
mov
lock
xchg
(bad)
sub
fist
inc
(bad)
test
pop
xor
addr16
pusha
sbb
dec
push
fwait
cmp
xor
fist
mov
and
xor
fcmovu
inc
xchg
or
setge
sbb
ds
xchg
jno
loope
or
pop
pop
xchg
mov
mov
inc
jge
push
pop
call
pop
outs
pop
dec
xor
inc
popf
fnstenv
cmp
inc
dec
push
cwde
call
jl
ja
daa
mov
mov
adc
in
mov
sub
jbe
dec
adc
addr16
sbb
addr16
cmps
cmps
(bad)
cmps
push
rol
fist
or
add
pop
popa
js
mov
sbb
mov
xor
iret
pop
out
mov
mov
cmp
push
dec
sub
sbb
js
pushf
and
add
out
es
pop
scas
mov
sub
sti
xor
mov
or
mov
xor
cmc
bound
ja
iret
dec
mov
in
sub
push
bound
cdq
dec
add
push
sbb
fs
dec
add
mov
lock
mov
pop
xchg
stos
add
inc
cli
fstp
mov
push
dec
call
dec
loopne
cmp
cwde
push
cmps
pop
add
rol
adc
cmc
stos
popa
sub
mov
psadbw
mov
shr
mov
push
push
ja
and
push
repnz
push
pop
das
test
rcl
mov
and
lods
inc
sub
imul
jle
or
jg
jno
idiv
ficom
(bad)
jle
retf
sub
scas
push
adc
jne
or
out
jmp
and
fwait
repz
bound
outs
or
sub
inc
jns
sub
movs
sbb
cmp
push
arpl
add
clc
push
stos
xchg
(bad)
fadd
dec
lahf
add
xchg
pop
inc
xor
dec
retf
dec
lods
push
inc
fsubr
pop
jbe
icebp
add
push
repz
test
mov
ds
sub
jae
scas
cld
pop
jb
xchg
(bad)
ds
movs
scas
jecxz
shl
pushf
aad
xor
test
mov
stos
repz
inc
daa
pop
sbb
cdq
out
in
popa
mov
pop
ret
push
push
popf
je
inc
mov
inc
scas
push
cmp
je
aaa
loopne
ins
pop
fst
mov
xor
fst
inc
xchg
pminsw
(bad)
loop
cmp
add
lds
dec
add
lods
and
pop
inc
mov
mov
add
xor
sub
jne
push
fcmovnu
add
lahf
nop
and
inc
fbld
sbb
mov
cmp
fadd
dec
inc
ret
mov
mov
int3
mov
push
sub
jae
mov
push
mov
mov
inc
daa
adc
stc
pushf
jno
xchg
ror
retf
xor
(bad)
xor
push
push
add
xlat
and
mov
pop
xchg
xchg
fcomp
out
push
sbb
xor
inc
out
dec
fcmovu
add
and
sbb
pusha
sub
xor
push
pop
loopne
mul
mov
fdivr
push
sahf
adc
jl
and
idiv
sub
daa
ret
pop
in
imul
add
push
mov
jno
push
fild
xchg
lods
mov
xchg
xor
add
aaa
jle
add
lods
xchg
rcl
xor
rol
xchg
ret
adc
inc
int
inc
xchg
xor
mov
test
psubw
lods
out
jbe
pusha
out
push
cmc
adc
dec
xor
dec
mov
(bad)
jmp
std
test
and
xor
sub
sub
cmp
mov
push
mov
mov
neg
sbb
jge
or
xchg
cmps
addr16
dec
iret
and
mov
jle
and
repnz
jp
scas
sub
dec
lock
push
nop
outs
and
scas
pop
cmp
dec
push
mov
hlt
or
int
push
(bad)
xor
retf
int
loope
loop
icebp
and
mov
gs
mov
jmp
in
js
popa
add
xchg
mov
stos
mov
jge
xchg
dec
cld
rol
in
xor
push
retf
stos
(bad)
dec
and
push
or
inc
add
mov
push
push
popf
(bad)
sub
inc
in
jecxz
iret
mov
mov
mov
lea
inc
mov
push
(bad)
into
test
callw
stos
mov
add
(bad)
enter
nop
movs
addr16
cwde
jnp
aad
dec
aad
inc
mov
mov
dec
test
jmp
mov
cs
adc
xchg
cdq
retf
jnp
and
push
lds
adc
mov
pop
test
pop
fwait
cmp
mov
retf
fmul
out
xchg
scas
xchg
xor
jns
movs
fdivr
and
xchg
je
inc
jb
mov
sub
fld
mov
sbb
push
out
jl
fiadd
push
aaa
dec
add
pop
push
push
dec
cdq
ret
adc
lea
retf
jle
jle
xchg
mov
jp
in
pop
daa
fisubr
inc
imul
mov
out
cmps
(bad)
fldenv
pop
mov
mov
test
cdq
mov
mov
xor
das
nop
adc
mov
pop
add
and
pop
pop
xchg
sub
mov
or
mov
retf
ins
sub
popf
ja
xchg
movd
retf
mov
out
mov
dec
(bad)
push
push
popf
xor
loop
fnstcw
and
adc
fst
sub
push
inc
retf
test
xor
in
popa
loopne
cli
pop
(bad)
ret
out
stc
sub
push
adc
call
out
hlt
cli
loopne
loopne
mov
js
or
daa
push
cmp
xchg
mov
mov
nop
pop
or
jmp
ret
call
jge
add
retf
cmps
loop
cwde
mov
mov
jg
push
mov
lea
loop
ror
(bad)
call
sbb
push
push
jbe
in
cmp
xor
cdq
pop
pop
mov
rol
call
inc
out
pusha
call
dec
push
sub
jmp
stos
or
(bad)
jbe
xor
clc
xor
dec
mov
xchg
mov
sub
gs
inc
retf
fnstsw
cs
jle
jp
jle
jmp
lods
pop
(bad)
xor
stc
out
jge
out
(bad)
aaa
sar
or
sub
jp
and
cmp
xor
sub
fnstcw
xchg
xor
jecxz
jno
inc
pop
cmps
adc
add
ins
pushf
pop
mov
gs
retf
dec
xchg
dec
cmp
mov
cmp
jl
xchg
test
jmp
mov
ds
xchg
out
call
arpl
shr
nop
gs
adc
ja
and
or
in
push
rcl
push
xchg
mov
adc
leave
cmp
add
stos
or
or
mul
std
les
les
nop
movs
xor
aas
mov
xchg
daa
xchg
stos
stos
in
or
xor
out
add
or
das
cmc
pop
jmp
sbb
add
test
mov
popf
cmps
call
sbb
stos
inc
sbb
ror
loopne
add
nop
jmp
xor
xchg
cs
jp
cwde
xor
call
ja
or
and
xor
not
and
lods
shl
xor
neg
cmps
add
and
cmps
mov
mov
adc
(bad)
push
fstp
sti
mov
dec
add
xchg
sub
inc
ret
jb
xor
call
ins
xor
jb
xchg
aad
(bad)
mov
dec
dec
(bad)
dec
jg
cmp
mov
sub
add
push
dec
int3
sahf
push
out
and
mov
and
add
scas
in
add
mov
mov
iret
sub
push
sar
dec
sahf
(bad)
in
ret
in
and
test
test
shl
pop
(bad)
nop
adc
in
pop
cmp
inc
lock
sub
xchg
push
xchg
dec
in
add
js
xchg
jp
jno
xor
sbb
adc
xchg
test
je
fwait
sti
pop
std
mov
pop
sti
jmp
inc
and
add
and
cdq
push
dec
(bad)
pop
and
aaa
inc
shl
jmp
cmp
cdq
mov
mov
into
push
jmp
fist
test
cmp
shl
outs
mov
add
dec
stc
pop
mov
sar
jbe
in
pushf
stos
ins
lods
loopne
pop
and
jnp
sbb
lock
mov
pop
mov
aaa
cwde
fst
stc
and
jno
jg
or
xor
movs
or
(bad)
xor
xor
cmp
sbb
sub
jns
xor
sub
loopne
jge
ja
mov
into
cmps
aad
sbb
adc
xchg
xchg
loop
dec
adc
jp
mov
pop
push
or
sahf
mov
das
es
add
adc
dec
loop
add
and
leave
out
cmps
dec
stos
retf
loop
stos
xchg
jmp
push
fsubr
xchg
add
cmps
xchg
mov
mov
jp
cld
in
mov
mov
fidiv
pop
push
jp
aaa
std
ficomp
jle
adc
and
ins
mov
xor
mov
and
(bad)
push
mov
pop
xchg
xchg
into
pop
xor
mov
(bad)
or
enter
sbb
mov
jp
jmp
adc
ins
mov
mov
or
sbb
mov
cmps
push
xlat
les
outs
outs
mov
pusha
adc
dec
js
mov
pop
jne
xor
out
and
add
lock
mov
jne
mov
(bad)
pop
mov
int3
out
(bad)
repz
jl
sub
inc
ds
or
sub
int
data16
mov
pop
scas
mov
les
(bad)
mov
inc
sbb
mov
add
loope
data16
mov
cli
or
xor
push
and
test
xchg
sbb
dec
retf
jo
ss
out
out
sahf
xchg
out
jbe
mov
lods
xor
adc
shr
or
fadd
(bad)
jbe
(bad)
mov
or
cmp
inc
pop
xchg
(bad)
mov
mov
aas
mov
xchg
jno
mov
fwait
inc
push
dec
hlt
ret
inc
xchg
xchg
pop
xlat
xchg
jmp
xchg
pop
aas
and
clc
xor
mov
lock
mov
dec
push
pop
sbb
hlt
xchg
adc
scas
xchg
mov
shl
stos
in
inc
call
cmp
xchg
cmp
cmp
xchg
mov
pusha
mov
ss
xchg
lahf
stc
jmp
and
retf
jo
inc
aas
(bad)
jne
inc
xor
xor
mov
xchg
pop
test
jp
dec
repz
mov
test
cmp
cli
xchg
in
dec
sub
lds
pop
sti
and
jbe
pop
in
addr16
xlat
cmp
popf
cmp
push
ret
xchg
imul
xor
enter
repnz
(bad)
(bad)
(bad)
mov
(bad)
fdiv
mov
retf
cmps
out
mov
call
or
pop
jp
cmp
sbb
into
lock
into
inc
sahf
jo
gs
(bad)
mov
add
sub
cmp
shl
and
xlat
neg
ficom
push
mov
test
mov
xchg
cmp
xor
dec
push
in
nop
call
bound
jle
xchg
or
dec
mov
out
and
leave
fstp
in
cmp
push
rol
jle
mov
pop
xchg
add
cld
std
xchg
cmp
call
call
or
outs
pop
push
push
add
dec
idiv
cmp
adc
(bad)
adc
add
js
pusha
dec
add
pop
mov
loopne
push
inc
jl
xlat
repnz
push
dec
dec
int3
in
or
push
arpl
mov
jg
hlt
sbb
add
cmp
pop
xor
out
je
mov
push
sbb
cwde
or
cmp
and
mov
ja
jmp
pop
mov
xlat
add
mov
xor
sub
leave
mov
jnp
xor
sub
and
pop
imul
js
stos
es
inc
add
mov
fbstp
in
and
xchg
push
rol
mov
mov
cmps
imul
cli
dec
jb
nop
lea
adc
and
test
aaa
xchg
xor
es
jne
pop
pop
dec
jmp
mov
adc
pop
lds
cmp
xchg
jno
mov
mov
pop
(bad)
xlat
aaa
in
add
cmp
mov
outs
dec
pop
fdiv
xor
aam
in
std
or
les
dec
add
ins
sub
xchg
mov
js
shr
pop
mov
jns
push
(bad)
dec
retf
stc
cmp
out
or
ins
cmp
das
or
ret
cmp
into
push
pop
leave
(bad)
imul
loop
ret
mov
aad
fistp
stos
test
xchg
jo
(bad)
mov
mov
mov
push
xchg
test
push
mov
mov
arpl
xor
aaa
or
(bad)
sar
arpl
mov
and
int3
push
push
dec
retf
sbb
les
push
(bad)
ret
aas
adc
mov
dec
repnz
cmp
xor
ss
enter
xor
fisubr
cmp
ret
dec
or
fwait
idiv
cmp
cmp
test
mov
pop
sbb
lods
sti
lahf
fbld
ss
sub
sbb
xor
xchg
aas
lods
jns
sub
adc
xor
lahf
cdq
sub
push
rol
mul
(bad)
pop
mov
mov
fnstenv
jmp
xchg
cdq
xchg
push
jmp
not
xor
jno
inc
scas
jl
cdq
cwde
or
jbe
mov
and
and
push
jmp
cmp
cmp
pop
pop
bound
mov
mov
lock
adc
dec
mov
std
add
test
sbb
sbb
shl
or
aad
sar
pop
ins
je
jo
adc
cmp
int3
test
outs
movs
jmp
mov
fwait
retf
add
cmp
out
ins
mov
push
cld
sub
test
and
mov
jo
xchg
mov
mov
or
icebp
cli
add
scas
nop
out
bnd
sbb
sbb
ds
pop
dec
fistp
xchg
adc
lods
xchg
stc
adc
dec
mov
addr16
and
leave
out
test
ja
xchg
or
(bad)
sbb
mov
xor
inc
cmps
daa
pop
arpl
adc
sbb
test
aas
dec
sahf
sub
lds
fidivr
xor
push
in
scas
sti
add
jno
mov
mov
jecxz
or
mov
addr16
repnz
stos
dec
push
cli
cmc
mul
xor
arpl
xchg
adc
(bad)
mov
jae
(bad)
(bad)
test
das
mov
push
lds
push
mov
xor
or
mov
repnz
adc
out
xchg
push
loop
jecxz
push
sar
dec
adc
cs
inc
pop
mov
dec
dec
aam
fwait
not
popa
call
push
inc
sbb
lahf
push
dec
dec
jg
pushaw
inc
loopne
sbb
sbb
lods
xchg
into
mov
cmps
mov
into
das
xchg
ins
daa
xchg
addr16
out
pushf
mov
or
test
xor
dec
enter
out
int3
aaa
test
out
imul
pshufw
(bad)
cmps
movs
sub
outs
mov
das
shr
adc
in
ins
out
mov
and
jmp
cmp
dec
mov
retf
pop
push
pop
jg
dec
pop
(bad)
stc
mov
mov
xchg
xchg
loop
push
xchg
popf
je
push
push
pop
sub
les
push
or
mov
dec
pop
maxps
xchg
mov
nop
rcl
outs
ret
adc
inc
add
and
sbb
inc
sub
call
xchg
dec
retf
push
popa
and
dec
(bad)
in
(bad)
jge
xor
mov
(bad)
or
add
cmps
movs
ss
leave
pop
inc
dec
adc
adc
cwde
lock
inc
and
fstp
test
pop
mov
jmp
in
xchg
add
mov
mov
nop
jnp
mov
lock
nop
jle
es
pop
out
sub
repz
add
fucomi
cmp
cmp
xor
cmp
push
mov
cli
in
jbe
stos
push
mov
jecxz
int3
mov
mov
lds
out
xchg
mov
mov
xchg
fwait
sbb
sbb
adc
push
(bad)
inc
jbe
or
cmp
pop
sub
cmp
dec
int3
cmps
mov
fcmovnbe
sti
rcl
push
add
test
mov
xchg
cmp
inc
push
adc
xor
sar
aaa
or
jne
jge
mov
dec
(bad)
stc
loope
js
shr
out
test
inc
popa
adc
sbb
and
jno
inc
mov
retf
xor
scas
push
stos
bound
xor
dec
sbb
dec
and
aas
xchg
test
jecxz
pushf
jns
int
xchg
out
cmp
(bad)
and
int
adc
cdq
adc
pop
mov
sbb
cmp
adc
(bad)
adc
jp
icebp
sti
ins
jmp
xchg
inc
cdq
xchg
adc
inc
pop
cdq
ss
cmp
cmps
add
xchg
push
xchg
mov
push
mov
cmc
cmp
int
inc
dec
ins
mov
push
push
cs
push
inc
sub
scas
adc
movs
mov
(bad)
or
in
mov
out
cmp
fld
jecxz
jns
sbb
sbb
pop
or
sahf
push
cs
cmp
add
sbb
and
rol
retf
and
dec
adc
iret
rol
dec
jp
out
mov
mov
gs
adc
and
outs
test
inc
cli
cmovno
dec
pushf
mov
lahf
int3
dec
ret
cmp
scas
and
jmp
in
loop
lahf
pop
sub
ds
mov
push
je
cmp
cwde
add
enter
dec
adc
fldcw
cmp
sahf
mov
ja
jge
out
xor
arpl
lods
outs
int
xchg
and
repz
mov
loopne
xor
jmp
aaa
xchg
test
fcomp
push
mov
(bad)
mov
jno
(bad)
jl
stc
rcr
cmp
data16
dec
mov
or
xchg
test
xor
mov
mov
or
daa
sub
das
pushf
and
push
in
int3
bound
pop
push
rol
daa
jl
daa
dec
push
(bad)
movs
sahf
mov
test
and
iret
xchg
jnp
ins
add
xor
push
inc
mov
mov
mov
mov
pop
mov
inc
sub
push
jb
mov
cmp
dec
inc
cli
mov
cmp
cwde
aam
cmc
inc
clc
xor
jmp
aam
jle
mov
jne
jns
adc
call
add
imul
mov
adc
or
xor
pop
imul
test
enter
(bad)
jnp
or
xchg
push
in
jmp
sar
movs
aas
das
pop
add
adc
cmp
test
popf
div
imul
adc
xlat
xchg
pop
inc
xor
dec
push
dec
dec
lahf
and
add
loope
or
test
push
cs
push
repnz
pop
imul
hlt
inc
mov
inc
jp
fisubr
mov
mov
inc
(bad)
fistp
ja
jmp
sub
fisubr
in
xchg
fisttp
je
push
mov
jle
test
(bad)
push
ja
(bad)
inc
fchs
xchg
pop
in
jae
jno
stc
cli
dec
leave
or
jb
jg
xlat
call
iret
jecxz
inc
pushf
repz
imul
dec
jle
fwait
lock
mov
inc
imul
pop
int3
sub
jge
cdq
adc
mov
add
in
or
mov
push
dec
fwait
int
pop
cdq
push
sbb
mov
cmp
std
xchg
loopne
leave
in
mov
pop
cli
out
xchg
mov
jnp
stos
lea
ja
pushf
lahf
cli
xchg
cmp
dec
add
push
cmp
jg
inc
push
inc
das
adc
pop
jmp
mov
mov
ror
icebp
cwde
sahf
cmp
pop
icebp
push
jo
xor
mov
outs
loope
pushf
add
pop
loope
enter
out
or
mov
pop
inc
jge
and
sub
mov
add
loopne
inc
scas
sub
mov
pop
pop
xchg
aam
mov
push
mov
adc
imul
cmps
in
outs
jae
cli
inc
sti
cmp
mov
hlt
xor
adc
hlt
add
jl
cli
dec
mul
sub
push
dec
add
es
nop
sti
jge
ror
and
sbb
out
shr
inc
in
ins
pop
push
xor
fst
cmc
(bad)
jb
or
sbb
lock
enter
mov
cmps
lahf
pop
stc
shl
cli
fdivr
mov
pusha
adc
or
push
mov
jmp
cmps
imul
(bad)
dec
call
pop
xor
imul
je
movs
hlt
fwait
add
mov
(bad)
in
loopne
xor
cli
ret
call
cmp
mov
sub
add
xchg
paddw
mov
xchg
hlt
popf
test
call
jo
dec
leave
cmps
and
in
or
das
inc
pop
pop
sbb
rol
fisub
cmp
or
jg
cmp
jmp
rcr
inc
(bad)
stos
xor
add
push
push
dec
loop
cmps
ds
xor
pop
sub
neg
clc
pop
test
fcom
push
add
aad
push
push
jle
sub
ret
mov
fld
jb
pop
xor
adc
mov
lds
int
call
outs
adc
call
into
mov
mov
loope
imul
(bad)
out
in
mov
dec
add
cmp
xchg
(bad)
call
mov
or
or
lea
push
call
imul
cmps
nop
mov
in
dec
sbb
mov
(bad)
out
xchg
push
outs
mov
rcl
mov
in
(bad)
mov
or
jne
xor
test
out
mov
scas
outs
push
std
rol
xlat
sbb
pusha
mov
cmp
mov
push
xchg
dec
(bad)
mov
dec
fnstcw
add
and
pop
xor
mov
outs
lods
out
inc
pop
pushf
stos
adc
rcl
xchg
hlt
or
inc
sub
pop
cmp
xchg
loope
sbb
add
dec
mov
lods
mov
enter
inc
sub
mov
fst
sahf
xor
mov
into
ins
mov
and
mov
xor
and
(bad)
out
xchg
ret
sti
(bad)
cmp
bound
jbe
mov
pop
nop
mov
mov
or
inc
jb
pop
(bad)
(bad)
push
inc
stc
pop
out
mov
and
inc
add
shl
rcr
movs
push
loop
out
pop
adc
mov
jne
xchg
aam
sub
dec
clc
nop
das
int3
ror
jne
mov
rcl
push
inc
mov
adc
mov
push
mov
push
call
push
fsubr
scas
pop
mov
dec
jmp
mov
push
mov
aam
mov
add
stos
movs
retf
fs
sbb
cmps
bound
cmp
cmp
push
rcl
int3
push
dec
imul
sub
mov
push
add
aam
mov
pushf
dec
fs
inc
repz
aad
enter
ud0
adc
xchg
pusha
shl
nop
dec
mov
mov
aad
xchg
aam
fcomip
mov
and
lock
add
sub
inc
add
jecxz
call
xchg
dec
xchg
xor
lock
jge
xchg
shl
mov
xchg
xor
(bad)
fidivr
pop
scas
jns
sahf
addr16
ret
xchg
and
mov
add
push
in
stc
adc
int
mov
outs
out
jae
or
and
mov
dec
dec
es
sub
aam
adc
stos
ret
push
scas
pop
mov
out
dec
xchg
lods
add
aam
repnz
mov
mov
in
js
lahf
pop
mov
imul
xor
(bad)
fstp
inc
int3
push
icebp
inc
jmp
mov
in
rcr
add
adc
jo
fucomi
inc
fdivrp
dec
or
ins
pop
ds
and
jb
pop
rol
out
(bad)
xor
pop
jnp
jecxz
scas
fdivr
jb
test
adc
pop
dec
xor
stc
cwde
cdq
shl
lahf
mov
cmps
pop
or
arpl
gs
call
cmp
mov
rcl
scas
and
retf
jmp
repz
cmp
cmps
cmps
sub
inc
loop
(bad)
test
cmp
aas
frstor
loopne
cmp
movs
pusha
(bad)
aam
and
cmp
lock
mov
imul
aas
ret
and
hlt
jl
dec
add
mov
les
outs
jg
shr
jnp
das
cdq
mov
sub
mov
mov
jp
push
lods
xchg
sbb
jmp
lds
test
cli
in
enter
push
xchg
dec
dec
and
std
adc
fild
fcmovu
out
imul
jno
add
pop
retf
mov
adc
scas
popa
movs
mov
movs
mov
sub
rcr
inc
fstp
push
cmp
pop
mov
mov
cmps
ret
loop
js
cmp
sbb
push
retf
inc
pop
movs
adc
inc
xor
fs
imul
jmp
xor
mov
rcl
arpl
add
daa
inc
xor
addr16
xor
ror
pop
inc
pop
adc
fnop
lods
adc
lock
and
retf
call
xchg
cmp
test
ret
xor
mov
xchg
icebp
out
mov
popf
push
lahf
and
daa
mov
les
pop
clc
adc
dec
and
and
mov
(bad)
push
sbb
into
adc
pop
fs
pop
out
aam
and
iret
cmps
xchg
add
dec
je
sub
dec
outs
out
sahf
pop
arpl
fild
nop
mov
aas
sub
push
sbb
sub
fsubr
movs
lods
dec
je
sbb
cwde
and
repnz
inc
rcl
jb
data16
sub
mov
or
fisttp
cmps
test
in
mov
jb
shl
mov
(bad)
into
js
loopne
mov
or
mov
(bad)
imul
(bad)
dec
dec
xchg
sub
jnp
pop
enter
sti
stc
cmp
shl
int
daa
push
call
inc
stos
jno
push
xchg
lahf
js
adc
arpl
fld
inc
shr
nop
lock
push
inc
inc
dec
xchg
cs
scas
popf
and
cmc
push
es
daa
pop
push
xchg
mov
dec
push
and
pop
sub
sbb
push
pop
je
dec
stos
jb
xchg
sbb
cmp
mov
imul
clc
leave
xor
sub
xor
inc
mov
sbb
cwde
inc
add
cwde
test
mov
mov
enter
mov
lds
lock
push
cmp
xor
adc
mov
js
cmp
std
aad
push
mov
xor
cmp
xor
add
and
add
mov
arpl
xor
xor
and
sahf
lock
dec
test
jl
adc
leave
movs
sbb
retf
loop
mov
mov
mov
test
dec
pop
sub
pop
cmp
in
add
mov
ins
sbb
jl
jg
xor
rcl
shl
sbb
daa
icebp
sub
pusha
dec
jno
sti
and
hlt
jg
mov
or
js
xlat
sub
cdq
data16
repnz
std
cmc
mov
mov
push
push
inc
outs
das
push
mov
idiv
jne
rcl
mov
mov
mov
pop
rol
xor
icebp
jae
mov
jg
inc
xor
ins
sbb
addr16
sub
leave
mov
jo
sahf
pop
mov
test
dec
xor
(bad)
jno
ja
sbb
jbe
mov
iret
repnz
lea
into
fsub
push
aas
loopne
or
push
mov
in
stc
jno
mov
repz
or
inc
push
lea
lods
(bad)
retf
inc
rol
jg
pop
aaa
or
dec
ret
dec
(bad)
and
jp
ja
pop
pop
fmul
cmp
int
fcmove
xor
jg
fidivr
jns
sub
std
add
mov
shr
pop
scas
or
mov
pop
hlt
rol
test
inc
cmp
clc
sub
inc
mov
bound
mov
inc
push
jge
movs
bswap
xchg
sub
cmp
mov
push
test
call
sub
test
movs
pop
shr
pop
push
js
push
fdiv
daa
inc
js
fidivr
xor
push
mov
adc
push
cdq
push
jnp
mov
in
lods
sub
lahf
je
dec
push
push
jl
xor
(bad)
std
push
int
scas
frstor
aad
mov
xor
xchg
test
(bad)
test
jl
cs
and
xlat
ret
scas
sub
mov
xor
dec
sbb
inc
jmp
mov
mov
(bad)
jg
jo
push
add
mov
ja
movs
add
not
test
jne
sub
fst
add
xor
fbstp
test
out
and
dec
icebp
enter
sub
loopne
sub
(bad)
ins
leave
test
loop
shl
out
lods
bound
jae
mov
iret
cmp
cmp
ja
adc
out
mov
jbe
xchg
loope
sub
scas
sub
fist
enter
rol
fisttp
sbb
cs
or
cmp
inc
popf
imul
mov
and
es
xchg
xchg
cmp
lods
ror
fild
test
pop
stc
sti
cmp
pop
and
and
das
pop
jg
inc
frstor
jb
jl
pop
arpl
outs
daa
fcomi
ins
push
div
or
jnp
repnz
pushf
scas
add
clc
jg
dec
pop
jmp
call
test
push
dec
out
inc
ins
out
jg
(bad)
sti
xchg
cmp
jnp
cmp
pop
fiadd
scas
inc
jge
cmc
and
jle
inc
cwde
mov
jmp
sbb
jns
pop
inc
data16
add
cmc
(bad)
jnp
mov
cs
(bad)
pop
iret
xchg
mov
test
sbb
idiv
mov
pop
popa
nop
cwde
fldenv
mov
sub
(bad)
call
fist
push
pushf
jb
cmp
ror
mov
retf
pop
sub
cmp
mov
mov
adc
mov
sbb
lds
add
dec
arpl
popa
cld
call
sub
sub
fdiv
adc
add
stc
ds
pop
mov
pop
leave
xchg
lea
rol
mov
jne
mov
jle
in
rol
es
push
nop
dec
mov
sbb
sub
mov
adc
jmp
outs
mov
mov
fs
dec
dec
loop
cld
pusha
jle
inc
enter
clc
out
(bad)
out
jmp
lea
pop
pop
jle
icebp
mov
scas
jnp
cmp
movs
mov
rol
popf
inc
sub
popa
in
test
sbb
mov
adc
sbb
jo
xor
dec
xchg
arpl
cmc
jae
xchg
mov
xlat
xchg
mov
clc
xor
adc
pop
pop
add
pop
(bad)
sub
adc
scas
lods
outs
push
stos
lea
xchg
aas
dec
lods
mov
sbb
dec
fidivr
ins
repnz
icebp
push
jno
retf
(bad)
test
mov
mov
inc
inc
adc
sbb
inc
je
cld
in
push
data16
daa
ret
mov
xchg
(bad)
fdivp
pop
adc
xor
xor
cmc
xor
mov
pop
scas
ins
rcr
mov
(bad)
jae
fisttp
cmp
mov
cmp
or
add
xor
add
jl
and
ret
inc
je
and
div
mov
sbb
imul
adc
(bad)
adc
xchg
push
repz
cmp
cmp
fbld
push
test
in
in
outs
enter
ins
hlt
mov
push
nop
ror
imul
out
stos
cmp
mov
cmp
dec
fild
dec
mov
sti
or
pop
inc
lds
sbb
jno
push
cdq
xor
mov
fsub
adc
hlt
xlat
std
mov
cmps
mov
inc
sti
out
dec
jge
push
fwait
adc
pop
mov
lods
int3
not
push
leave
retf
add
jbe
out
popa
push
xor
sbb
aad
lea
mul
pop
test
cmp
cmp
iret
rcl
and
cmc
lods
shl
(bad)
mov
jp
leave
(bad)
(bad)
mov
inc
sub
xchg
imul
fnstcw
sahf
es
adc
sub
fcomip
addr16
std
stc
dec
lock
ret
or
add
ret
sbb
out
retf
xchg
mov
rcr
aaa
in
sub
pushf
fdivr
xchg
inc
jmp
xchg
stos
push
bound
bound
hlt
stc
sub
gs
jp
pop
mov
fcmove
fwait
xor
cdq
mov
aam
push
fcom
jae
jmp
ja
pop
in
mov
adc
mov
and
pop
(bad)
jo
xchg
das
hlt
out
retf
bound
add
std
xlat
mov
ins
inc
pop
mov
push
cwde
es
lods
ss
std
mov
jecxz
imul
xor
not
leave
add
mov
push
test
mov
test
mov
or
ins
jae
cmp
inc
mov
int3
or
jno
into
mov
inc
test
mov
int
add
sub
pusha
fisub
sbb
pusha
cmp
pop
and
mov
rol
fdiv
ret
cmc
popf
repz
sub
addr16
jge
sbb
jno
psubb
mov
out
and
xor
fnsave
push
dec
dec
(bad)
xchg
pop
in
inc
aaa
inc
add
sbb
and
ds
int
fst
enter
mov
inc
enter
in
xlat
das
scas
pusha
cmps
jns
add
push
add
(bad)
lahf
sti
mov
iret
xor
rol
div
push
adc
movs
in
stos
rcl
push
push
xchg
cs
mov
out
mov
iret
mov
cmp
jge
sub
adc
(bad)
mov
mov
repnz
jp
cmp
cmp
lods
sub
pushf
adc
pushf
std
pop
fs
(bad)
mov
rol
leave
mov
mov
cld
pop
ds
sbb
call
push
repnz
inc
xchg
adc
xor
je
and
pushfw
xor
xchg
pop
xor
fcomp
push
and
leave
add
sti
add
adc
arpl
add
add
fidiv
fbstp
add
(bad)
shl
push
repz
pop
push
lock
hlt
hlt
les
lahf
push
cmps
imul
movs
call
dec
add
cmp
inc
aam
pop
pop
ja
sbb
pop
cmp
addr16
shr
mov
dec
mov
pop
mov
jmp
mov
pusha
aam
sub
adc
xor
dec
lods
xlat
inc
push
fld
fsubr
pop
cvttps2pi
mov
shl
xor
and
mov
popa
cld
ins
js
out
nop
mov
in
mov
push
inc
inc
cmp
(bad)
mov
leave
pop
xchg
cmp
sbb
dec
ins
inc
stos
aad
(bad)
hlt
stc
popa
cmc
and
xchg
fldcw
aam
fisub
jecxz
mov
and
int
in
enter
xor
(bad)
lds
call
jne
leave
dec
sbb
movs
sbb
mov
dec
adc
fist
inc
fs
stos
dec
loop
(bad)
mov
and
mov
pop
mov
push
pop
or
push
fs
leave
out
sub
test
push
les
adc
adc
xchg
add
inc
pop
mov
ins
mov
sbb
sbb
or
jmp
and
sub
mov
ins
push
jmp
pushf
pop
repz
aam
push
pop
and
in
or
inc
and
test
enter
inc
es
data16
xor
inc
inc
push
pop
fld
aad
idiv
add
leave
push
add
sub
out
cwde
jmp
jne
push
fdivr
jle
adc
outs
sub
push
and
ret
jle
jge
out
test
dec
push
cwde
ror
popa
ss
adc
and
inc
div
test
rcr
mov
sub
cwde
bound
xchg
jmp
pop
out
cmps
mov
xlat
nop
jno
jne
aad
mov
(bad)
ds
shl
std
es
inc
add
cdq
in
aaa
push
inc
hlt
popa
sub
ret
out
scas
mov
and
stos
inc
(bad)
je
mov
retf
fsubr
aas
sub
lock
stos
imul
in
push
or
mov
mov
adc
cmc
fcmovb
add
(bad)
fstp
sub
mov
fistp
xchg
jle
sbb
jbe
pop
jle
adc
ret
aad
ret
fcomi
das
call
mov
add
jnp
vmwrite
es
mov
retf
sbb
adc
dec
addr16
stos
inc
adc
sahf
dec
or
jmp
jno
jmp
pop
leave
out
dec
cs
mov
movs
mov
mov
call
int
ret
add
(bad)
dec
lock
jp
dec
popa
inc
jne
push
popf
dec
push
cmps
mov
sahf
mov
imul
sbb
inc
les
pop
adc
inc
xchg
push
jnp
arpl
jl
xchg
pop
jge
adc
stos
adc
test
push
pop
push
or
ss
pop
js
hlt
jbe
mov
or
xchg
or
xor
sti
(bad)
pop
hlt
push
addr16
cs
mov
cdq
xchg
push
inc
mov
(bad)
mov
cmp
(bad)
xor
shl
ins
scas
and
cmc
add
into
add
imul
(bad)
jns
(bad)
bound
pop
lock
add
xlat
neg
gs
adc
mov
sahf
outs
fldenv
sub
jp
jae
in
mov
pop
neg
(bad)
mov
or
cmp
cmp
(bad)
cli
sub
inc
push
fist
xchg
clc
ins
shl
and
add
pop
aaa
jge
xchg
stos
sbb
mov
call
jb
jp
fsubrp
mov
mov
jb
add
jo
mov
push
(bad)
or
and
fs
mov
adc
inc
dec
or
push
fs
scas
call
mov
in
mov
das
pop
sub
add
xor
sysret
dec
and
(bad)
add
mov
or
cmps
sub
scas
es
push
pop
and
mov
cmps
cmp
cld
cmp
movs
(bad)
mov
loopne
push
and
cmp
stc
std
iret
add
adc
cmp
jb
sub
loop
out
cmc
fwait
xchg
jmp
push
in
shl
scas
or
retf
mov
test
pushf
sbb
pop
sub
mov
ret
pop
xor
stc
add
mov
leave
xchg
mov
pop
cmp
loop
mov
or
std
shl
cli
xchg
fistp
sbb
xor
pop
(bad)
or
mov
enter
aad
ins
fild
mov
ds
pop
stos
or
test
jecxz
mov
jnp
test
xlat
xchg
add
jne
adc
int3
out
pop
call
or
mov
jo
loop
xchg
into
push
add
outs
iret
in
ins
xchg
rcr
in
fs
dec
(bad)
mov
sub
xchg
cs
aam
out
mov
push
jmp
jno
and
leave
(bad)
out
jne
(bad)
cdq
pop
addr16
xor
push
xchg
pop
cmp
fwait
and
add
jmp
cmp
and
sbb
pop
adc
or
fcom
pop
call
mov
fs
and
push
jecxz
jp
lock
mov
xor
ja
mov
scas
mov
cmp
inc
dec
mov
jmp
jmp
xchg
push
call
imul
lods
xchg
adc
and
dec
stc
adc
jmp
pop
mov
jnp
sbb
xchg
dec
shr
sub
retf
or
setne
cmp
mov
(bad)
jl
push
sti
mov
rol
push
int
stos
sbb
gs
dec
cmp
icebp
scas
mov
outs
rcl
add
mov
mov
inc
or
lock
dec
pop
cwde
xchg
push
nop
sar
or
xchg
in
xchg
jl
cwde
retf
jg
xchg
idiv
inc
add
xchg
sahf
dec
add
or
arpl
outs
push
jmp
bound
add
rcl
adc
imul
(bad)
add
inc
jg
cmp
cmp
in
aad
push
not
pop
es
pop
xchg
(bad)
icebp
sbb
fld
(bad)
shl
ins
add
sub
dec
inc
jle
mov
jge
call
mov
je
jae
mov
inc
aaa
scas
and
loope
repnz
ds
push
stos
xor
jecxz
push
stos
or
or
mov
retf
add
mov
pop
jo
mov
mov
ins
cmp
add
cmp
sahf
xchg
adc
add
loope
jp
jecxz
ins
retf
int3
mov
dec
or
and
or
inc
test
xor
call
sub
adc
(bad)
cwde
push
or
mov
frstor
aad
xchg
pslld
jl
daa
test
ds
mov
repnz
stc
popf
retf
(bad)
push
dec
push
or
test
cmc
cmp
xchg
ja
popf
retf
pop
movs
ins
jp
ror
fwait
cmc
and
dec
fidiv
out
jp
bound
icebp
movs
ins
rol
loop
repz
retf
pop
sbb
scas
mov
xchg
pop
push
sbb
and
std
lock
mov
imul
add
mov
(bad)
cmp
je
jecxz
sbb
sub
lahf
aam
jns
int3
mov
pop
mov
cdq
sahf
adc
xor
push
push
sbb
iret
pop
adc
sbb
fsub
ins
pop
hlt
sub
outs
sub
ds
xchg
add
dec
pop
pusha
lods
dec
std
jae
dec
mov
cmp
loop
out
test
iret
mov
pop
stos
ins
inc
in
push
or
sbb
jp
movs
neg
mov
pop
(bad)
cmp
in
inc
push
xchg
call
push
test
aas
dec
cmp
call
or
add
push
(bad)
aad
pop
cmp
pop
test
jae
jp
dec
mov
push
mov
or
les
vmovntpd
stc
fs
outs
mov
push
xchg
mov
ds
xchg
int3
jecxz
rol
dec
cmp
xor
and
sub
aaa
call
cmp
sub
pop
jno
pop
mov
xor
and
out
jo
mov
mov
gs
jmp
pop
cmp
and
jecxz
mov
mov
gs
pop
pop
sbb
xchg
rol
xor
xchg
sbb
(bad)
bound
lods
les
icebp
ror
mov
test
sbb
sbb
adc
rol
ja
outs
movs
and
bound
in
loope
cld
jge
nop
mov
retf
loopne
mov
jae
mov
xchg
aaa
cmp
xchg
push
scas
ins
inc
out
jmp
mov
call
jae
adc
inc
dec
jae
sahf
pusha
outs
add
cmps
cwde
out
pushf
pcmpgtb
pop
sbb
ficomp
arpl
test
mov
add
mov
retf
push
stos
sbb
faddp
jl
dec
leave
int3
loopne
push
adc
and
sub
or
lods
or
pop
cdq
(bad)
cld
xchg
arpl
daa
sbb
repz
int3
ja
pop
je
paddq
test
xor
inc
inc
or
adc
(bad)
dec
out
push
and
in
pop
in
fdiv
pop
mov
imul
mov
std
sub
pop
test
bswap
mov
out
sub
inc
inc
mov
sub
push
inc
test
or
js
push
cld
inc
push
adc
sub
inc
es
push
xor
xchg
cmp
or
div
and
xor
add
fsubr
ja
mov
sub
mov
or
push
fdivr
das
pop
dec
fs
xchg
xchg
sbb
clc
push
pop
int
(bad)
retf
fs
pop
bound
sti
fwait
sub
cmp
xor
sub
and
popa
leave
jge
jmp
pop
sbb
and
fimul
add
cdq
fimul
xor
xchg
jae
test
rcl
popf
inc
cmp
xor
data16
loope
mov
sbb
loop
push
(bad)
popa
push
enter
jnp
mov
adc
and
jl
je
add
or
dec
ror
popf
out
test
dec
cmp
add
inc
dec
int3
fcom
sub
push
inc
pusha
inc
arpl
inc
shl
fmul
daa
int3
pop
dec
inc
gs
mov
imul
inc
push
xor
cld
cmp
leave
js
clc
adc
rcr
cmp
test
je
rol
push
fisub
scas
cmc
sub
hlt
xlat
push
in
jbe
mov
das
fstp
ss
test
add
xor
aam
push
dec
or
push
jmp
inc
add
outs
mov
mov
adc
adc
adc
test
addr16
in
(bad)
or
xchg
repz
or
adc
mov
retf
sti
div
retf
fiadd
shr
mov
rcr
pop
sbb
popa
dec
inc
jle
or
ins
ss
call
lea
cwde
dec
in
pop
pop
sti
or
inc
pop
push
inc
or
push
sbb
in
ds
or
and
fsubr
test
cwde
outs
add
push
xchg
das
les
xor
or
aas
test
jne
push
cmp
cmp
pop
cmps
add
pop
out
mov
lds
leave
ja
cmp
out
fmul
jmpw
ret
rol
push
int3
mov
sub
push
xchg
and
cmp
loopne
xor
or
cld
cwde
jmp
push
mov
xchg
out
pop
jp
rcr
mov
pop
mov
das
pop
fwait
clc
ret
pusha
pop
pop
fucomp
out
inc
xor
jg
movs
aaa
sti
stc
mov
push
clc
adc
sbb
retf
enter
std
cwde
shl
push
dec
rol
fwait
push
push
xor
inc
into
sbb
sbb
popa
call
mov
fs
fld
retf
mov
(bad)
cmps
movs
ret
(bad)
cmp
or
aas
aam
cmp
movs
iret
add
out
mov
xchg
stc
push
mov
imul
fimul
inc
cs
mov
nop
pop
inc
and
into
adc
jle
xchg
dec
and
cld
jns
div
cmp
or
stc
pop
xor
dec
lods
xor
jae
rcr
mov
(bad)
sar
shl
mov
inc
sub
aaa
inc
mov
cmp
cli
add
stc
mov
sub
jo
lds
aaa
pop
push
add
rcl
add
jae
sbb
mov
dec
(bad)
shl
adc
rcr
in
ins
sbb
pop
mov
mov
xchg
(bad)
mov
int
int
dec
in
das
jns
xchg
je
adc
cmp
retf
mov
sub
(bad)
loopne
add
jmp
mov
dec
pop
pop
call
inc
ja
push
sbb
push
ins
shl
mov
pop
jge
add
mov
and
rol
add
repz
aaa
jne
mov
sub
mov
jmp
cmp
pop
add
bound
ss
movs
xor
cld
icebp
push
lods
cmps
int3
out
push
mov
fdivr
into
add
mov
imul
mov
lea
sbb
mov
aam
stos
(bad)
std
sbb
cmp
push
and
jo
jb
iret
adc
cmps
push
xchg
loope
jb
adc
scas
inc
fwait
loop
imul
xor
sbb
jecxz
mov
pop
js
int
fucomi
es
fistp
mov
test
in
dec
stc
ja
push
repz
ror
ret
jmp
mov
xchg
repnz
dec
sahf
scas
dec
ror
fbstp
jae
mov
sar
leave
sub
sub
xchg
sub
int
ds
inc
std
popf
out
je
jmp
sub
push
jge
cmp
push
mov
fmul
dec
cmps
sbb
rcr
mov
and
or
mov
and
inc
js
sbb
outs
nop
pop
lock
or
mov
xor
gs
les
adc
xchg
cmp
in
mov
push
and
cmps
push
pop
xchg
add
(bad)
jge
cmp
mov
and
sahf
in
fsub
cmp
pop
sub
cli
fwait
jmp
cmp
loopne
lods
jns
mov
add
inc
pop
aas
mov
dec
bound
cli
sbb
sub
scas
xchg
cld
loop
out
int
adc
aam
adc
mov
add
xor
sub
movs
enter
xchg
mov
test
mov
mov
retfw
int
div
push
sbb
std
xor
and
popf
mov
daa
or
xchg
imul
inc
and
add
jp
adc
and
imul
das
das
(bad)
xchg
movs
loop
jmp
jno
leave
mov
mov
pusha
jmp
pop
scas
inc
out
leave
mov
in
imul
inc
pusha
mov
mov
sub
mov
cmps
mov
aad
scas
jno
cli
adc
jmp
mov
xor
lods
movs
pop
pop
cmp
mov
stos
mov
(bad)
stc
inc
pop
repz
mov
scas
jp
cmps
adc
enter
xchg
ss
fsub
push
dec
test
lahf
push
and
push
cli
iret
out
in
jg
loope
or
(bad)
repnz
pop
sbb
repz
sub
mov
mov
jbe
jnp
call
push
cmp
xchg
repnz
das
xor
mov
pop
in
or
mov
xchg
mov
pop
sub
pop
arpl
clc
sbb
into
retf
call
test
mov
cmp
lea
dec
sub
cdq
(bad)
in
sub
cmp
fisub
adc
push
xor
adc
cli
jge
dec
js
add
les
shl
test
out
sub
mov
mov
pop
or
cs
lock
inc
pop
and
inc
xor
mov
fsqrt
fcom
(bad)
aad
shl
push
jmp
daa
cmp
xchg
sub
and
sub
xor
and
mov
repnz
pop
movs
jb
inc
(bad)
xchg
adc
add
jmp
shr
inc
je
mov
and
xchg
in
sbb
cmp
loope
adc
push
jne
push
sbb
inc
pop
mov
clc
test
cmps
sahf
adc
pop
adc
sub
or
mov
imul
fst
mov
pop
pop
cdq
adc
sub
enter
mov
sub
lea
and
and
inc
cmp
mov
adc
aad
call
jae
jp
test
gs
enterw
pop
std
push
pop
jnp
movs
imul
or
mov
addr16
pop
outs
into
(bad)
mov
dec
push
sub
cmc
push
push
fld
mov
xchg
call
test
mov
mov
cmp
mov
fwait
ins
push
xchg
add
inc
xchg
sbb
cmps
mov
popa
outs
mov
inc
cmp
and
jp
push
xchg
mov
mov
pop
push
adc
loope
cmps
push
cmp
mov
push
cmp
dec
lahf
mov
xor
xchg
aaa
add
pop
xlat
out
rcl
mov
push
mov
scas
sti
or
push
cmp
loop
mov
or
in
daa
jmp
and
push
outs
add
sbb
add
xchg
cmp
shr
sub
inc
stc
mov
xlat
jno
pop
inc
call
inc
dec
dec
adc
ss
cmc
pop
ja
or
fnsave
repnz
mov
dec
push
cdq
mov
cmp
jae
pop
ds
dec
ret
dec
xor
fsubr
mov
repnz
sbb
js
and
sub
adc
jle
shr
daa
jmp
xchg
outs
bound
mov
scas
iret
dec
push
fld
cwde
pop
movs
hlt
imul
js
cmp
and
sub
popf
out
cmp
push
movs
fisubr
mov
div
adc
and
cld
adc
cmp
popa
push
xor
jl
fisub
test
sbb
fidiv
ins
xchg
adc
xchg
loope
dec
sbb
sti
iret
fucomi
pushf
cmp
jo
cmp
adc
data16
push
cmp
add
scas
dec
jnp
push
push
push
xor
test
adc
loop
cdq
dec
ins
icebp
pop
out
mov
and
mov
retf
mov
cmp
ss
cmp
and
in
aam
sub
sub
xor
ins
xchg
in
xchg
pop
adc
dec
aad
(bad)
out
jg
data16
sbb
xchg
retf
fnstsw
out
addr16
sbb
fs
mov
push
xchg
and
mov
aam
dec
fidiv
(bad)
cmps
push
jns
in
push
adc
jecxz
lahf
xor
loope
xor
je
cmp
frstor
sbb
push
mov
jnp
pusha
add
and
or
imul
inc
sub
out
cmp
js
cmp
sbb
neg
retf
xchg
dec
sar
or
fld
loop
jmp
or
(bad)
dec
or
mov
xor
fcom
xchg
pop
pop
add
nop
cli
cwde
or
int3
cmps
sub
push
pushf
or
xchg
xor
ss
adc
dec
xor
xchg
(bad)
in
js
xor
stos
ficomp
mov
sbb
push
push
or
fwait
rcr
in
mov
add
xor
or
lods
sbb
loopne
neg
cdq
lea
scas
sub
pop
inc
mov
mov
mov
jnp
mov
rol
fist
sub
cmp
pushf
int3
in
pop
out
mov
fdivr
sbb
mov
sub
fadd
add
xor
out
and
dec
xlat
sub
ins
mov
mov
ins
cmp
xlat
sbb
out
(bad)
ins
daa
cli
test
pop
call
mov
dec
and
enter
pop
jecxz
or
data16
bound
sub
fadd
fnsave
out
mov
sti
mov
push
retf
ret
adc
sub
dec
mov
mov
int3
jns
inc
push
outs
jmp
in
leave
icebp
mov
jg
sbb
fwait
sbb
icebp
(bad)
sub
shl
nop
nop
mov
xor
loop
jb
sbb
and
test
call
jl
push
jg
sbb
cs
mov
add
cmps
outs
ret
inc
cwde
lds
or
mov
inc
fidivr
leave
xor
cmp
pop
xor
loopne
inc
adc
and
mov
cmc
mov
mov
xlat
jge
mov
shl
into
shl
jbe
inc
(bad)
jp
pop
push
in
jg
or
mov
or
fisttp
pop
sub
xor
inc
retf
sub
pop
xor
loope
sahf
daa
cmps
ja
pop
outs
(bad)
jp
bound
and
sub
aas
(bad)
fisubr
ins
ds
pop
push
sbb
repz
sti
xor
into
pop
inc
push
pop
or
call
fidiv
or
mov
push
cwde
das
sub
iret
jnp
cmp
mov
push
lods
adc
push
fild
xor
xchg
or
mov
pop
ret
fld
in
push
cld
(bad)
(bad)
out
mov
sbb
cmc
ds
(bad)
dec
enter
and
push
push
fcmovnu
jmp
xor
jne
dec
(bad)
not
add
sub
dec
stos
loopne
bound
inc
xchg
push
adc
rol
idiv
mov
xchg
test
push
(bad)
leave
and
out
mov
icebp
pop
pop
mov
mov
in
mov
repnz
sbb
pop
rcl
call
push
or
and
or
jbe
dec
imul
lock
fstp
jle
push
cmp
lds
aad
xchg
xor
cmps
and
xor
das
rcl
aas
call
sub
fnstsw
xor
cli
push
(bad)
sbb
and
and
movs
or
bound
add
adc
(bad)
push
stos
cmps
std
mov
mov
sub
xchg
cs
aad
sub
sub
sub
fsub
imul
push
cmp
sbb
jecxz
call
inc
jmp
sti
mov
cmps
stc
mov
out
test
mov
pop
mov
add
mov
mov
mov
rcr
clc
shl
xor
and
jns
sbb
xchg
xlat
les
clc
aam
loope
adc
jae
xor
mov
add
mov
out
mov
lea
retf
sbb
jnp
push
nop
pop
(bad)
addr16
movs
mov
pop
jnp
inc
inc
add
add
pop
rcr
out
xchg
enter
lods
lds
jo
and
int
dec
pop
es
push
mov
scas
neg
ss
mov
dec
and
push
xchg
test
push
int3
jbe
es
cdq
es
(bad)
mov
jle
pop
data16
push
jge
adc
inc
cdq
popf
sti
jl
out
mov
jbe
push
jecxz
arpl
and
and
test
jle
lock
mov
or
add
inc
and
sbb
(bad)
shl
pop
arpl
mov
mov
lods
fdiv
push
sbb
mov
shr
jmp
test
sar
push
sub
cmp
sub
pop
pushf
push
push
xchg
add
jmp
fcomp
out
out
add
cmp
sbb
add
fcom
stc
mov
inc
and
add
daa
imul
stos
dec
repz
push
mov
dec
mov
fsubr
cmp
jb
xor
cmp
jmp
mov
add
out
mov
sbb
outs
dec
and
cld
pushf
outs
sbb
lahf
clc
std
jecxz
lock
mov
or
(bad)
sub
xor
arpl
and
retf
inc
stos
add
jge
js
rcl
add
mov
mov
fdivrp
icebp
sbb
sub
imul
mov
cs
fldcw
mov
mov
repz
aad
icebp
cmp
movs
ins
inc
std
pop
add
sub
cs
or
or
imul
adc
shr
pop
nop
sbb
(bad)
cmp
mov
ds
cmc
add
and
rcl
cmp
xor
mov
cld
mov
outs
sub
sbb
pop
or
aaa
mov
cmp
jns
inc
jmp
push
loop
push
lahf
movs
or
jge
je
call
and
dec
mov
and
movs
push
adc
adc
mov
jnp
add
stos
(bad)
fiadd
fsubr
arpl
enter
cdq
mov
shl
clc
sbb
mov
(bad)
stc
int
jmp
and
loope
daa
and
add
ret
and
test
out
dec
add
pop
mov
push
pop
lds
mov
pop
xchg
loopne
in
sti
jmp
jp
out
inc
mov
mov
gs
dec
add
xchg
movs
cmp
mov
dec
sub
push
push
inc
fsub
shl
gs
pop
test
enter
mov
test
ret
pop
xchg
mov
daa
aaa
in
adc
aaa
aas
add
lahf
stos
lods
in
fld
mov
outs
bound
jle
push
jne
pop
outs
mov
xlat
movs
or
(bad)
(bad)
cld
jae
popf
iret
xchg
(bad)
hlt
push
xchg
xchg
retf
je
push
pop
cmp
mov
mov
fbstp
adc
je
clc
ret
in
pop
pop
in
test
mov
(bad)
lds
xlat
sar
daa
repz
cmp
gs
out
pop
mov
test
jb
sbb
rcl
push
cmp
push
cs
or
(bad)
std
ret
scas
sbb
cmp
jmp
mov
popa
jecxz
(bad)
cmc
pop
inc
mov
xchg
mov
sub
push
add
retf
imul
daa
push
or
inc
aad
mov
inc
lea
push
mov
mov
retf
imul
mov
retf
add
pop
and
scas
fnsetpm(287
aaa
mov
enter
jl
data16
sub
dec
dec
loopne
outs
retf
nop
gs
sahf
xchg
sbb
mov
pop
sbb
push
scas
stos
or
mov
js
dec
je
fstp
aam
aaa
cmp
cmp
retf
pop
cmp
lahf
into
sub
loope
jmp
arpl
stc
mov
adc
or
inc
call
adc
test
mov
out
dec
pop
hlt
scas
lds
push
mov
out
cli
add
mov
add
stc
(bad)
mov
in
sub
or
fdiv
shl
or
lods
cmp
mov
inc
mov
rcr
loopne
add
lds
xor
arpl
inc
push
push
movs
fsubr
and
jno
test
and
jmp
xlat
clc
repnz
mov
add
retf
les
fiadd
mov
aad
jl
in
jnp
int
outs
mov
ret
test
or
add
fs
daa
into
inc
xchg
sub
jle
inc
push
mov
sbb
ficomp
lods
mov
and
cmps
rcr
dec
call
(bad)
jmp
sar
adc
xor
cwde
jg
pop
lahf
push
call
jmp
dec
(bad)
pop
and
mov
push
shl
pop
pop
xor
and
push
mov
stos
cmp
cmps
retf
hlt
dec
inc
push
and
or
out
je
out
inc
cdq
sbb
mov
lea
stos
push
ins
sub
test
add
and
retw
je
xchg
ret
dec
mov
mov
(bad)
std
jmp
adc
sub
push
push
in
ds
jo
sub
in
fisub
inc
mov
jae
xchg
retf
xor
scas
popf
push
dec
iret
jnp
adc
loopne
dec
ins
adc
retf
sub
adc
mov
xchg
aas
mov
or
cmp
sub
out
or
out
dec
mov
inc
loop
sbb
sbb
inc
xchg
pop
adc
add
shr
test
dec
stos
xor
jo
movs
push
inc
mov
and
sbb
and
mov
jns
and
aaa
sub
fcom
jnp
cmps
mov
jp
shr
ins
dec
mov
push
scas
(bad)
(bad)
mov
mov
jl
pop
mov
cdq
mov
repnz
cmp
fcmovbe
and
mov
cmc
ret
sub
rol
ret
std
pop
shl
fadd
cmps
mov
adc
add
mov
fbstp
popf
push
xchg
push
in
lahf
push
push
mov
(bad)
jp
or
xchg
idiv
outs
je
int3
leave
cs
dec
dec
adc
xchg
cmp
push
inc
imul
push
ds
dec
or
sti
jg
mov
cmc
outs
dec
mov
mul
aam
sub
pop
adc
call
adc
and
push
jp
test
cmps
scas
aas
dec
sbb
pop
add
shl
add
xor
sbb
cmp
(bad)
fiadd
jb
ja
ficom
fs
out
fadd
femms
fld
pop
test
int3
imul
add
xor
jo
icebp
xor
pop
(bad)
bound
mov
dec
inc
das
repnz
mov
retf
pusha
or
jb
jge
pop
mov
leave
sub
shl
sub
jns
xchg
frstor
cmps
xor
lock
xor
or
int3
add
fwait
add
mov
out
(bad)
adc
add
jp
inc
lods
cli
lock
cdq
push
fstp
mov
retf
cmp
cli
test
push
pop
lods
iret
lods
push
daa
push
fs
jg
adc
adc
inc
ds
stc
inc
fcomp
lds
pop
jb
enter
mov
mov
xchg
lahf
jno
lahf
hlt
push
(bad)
std
mov
push
and
sti
cmc
stc
in
or
pop
xchg
jo
stc
not
dec
dec
lds
sub
clc
aam
add
sub
push
in
dec
inc
mov
aaa
popa
imul
dec
sub
int
cmp
xlat
mov
repnz
lock
xor
mov
mov
sub
mov
stc
xchg
loopne
push
es
sbb
jmp
xchg
dec
cmp
enter
sub
mov
push
ins
push
or
push
cmp
and
sbb
push
inc
adc
ja
repz
xlat
jno
ds
mov
sbb
or
icebp
mov
and
mov
cdq
loop
mov
shl
neg
test
cmp
mov
inc
mov
jo
sbb
inc
jae
or
jmp
add
shr
mov
push
xchg
sub
sub
popf
inc
xor
add
shl
loop
cmp
sub
stc
popf
mov
push
enter
add
loope
int
retf
cld
jns
in
inc
imul
das
push
pop
mov
iret
inc
xchg
mov
loope
test
popf
sbb
loopne
fld
xchg
sub
add
add
xlat
jl
add
xchg
add
cdq
sub
pop
and
outs
les
aaa
sub
mov
xor
or
mov
pop
sbb
jb
test
xchg
dec
add
jnp
loopne
cmc
inc
(bad)
std
mov
cmp
jmp
mov
mov
mov
jnp
movs
adc
out
jns
iret
and
mov
cdq
pop
or
cmc
pop
cmp
jecxz
push
pushf
cmp
dec
xlat
lods
xor
das
push
out
sti
shl
add
repz
sahf
mov
cmp
fcom
cdq
out
sub
add
mov
mov
pop
lods
push
nop
imul
inc
stos
and
lock
push
xor
movs
pusha
imul
adc
sbb
sub
xor
repz
aam
test
adc
mov
add
loope
stc
jno
arpl
mov
add
aam
mov
add
vucomiss
or
jg
scas
lods
retf
das
inc
stc
ret
mov
out
pop
jecxz
xchg
mov
sub
js
mov
movs
and
add
dec
or
jb
sahf
imul
out
or
enter
call
cmps
mov
jge
repnz
lods
call
sbb
retf
cdq
call
cmp
bnd
mov
xchg
cmp
push
imul
inc
fisubr
jle
fcomp
stc
add
fld
in
fiadd
loop
cmp
xchg
mov
mov
pop
into
xchg
dec
jecxz
in
pop
jne
sub
icebp
inc
cmp
push
ins
sub
je
push
sub
dec
int
add
popf
stos
and
inc
ja
jno
enter
and
cmp
mov
movs
shl
lods
(bad)
outs
mov
enter
shr
mov
arpl
pop
shl
push
lods
cmp
jne
aad
rol
lahf
mov
or
sub
adc
xor
outs
aaa
iret
add
adc
mov
cmp
ja
sti
adc
mov
jb
call
data16
lahf
sub
not
pop
dec
pop
repz
in
shl
loop
dec
dec
es
xor
xchg
xor
jecxz
mov
loopne
sub
sbb
cwde
push
les
push
bound
or
pop
sbb
xor
add
(bad)
cli
(bad)
or
cdq
mov
pop
hlt
es
pop
push
loopne
jle
mov
mov
mov
fistp
or
into
cmps
test
fidivr
nop
dec
adc
retf
xor
push
sar
and
scas
call
sahf
add
adc
enter
jno
outs
push
inc
mov
bound
clc
sbb
push
fiadd
dec
mov
mov
cld
xor
adc
add
dec
stos
in
pushf
cdq
mov
xor
pop
call
inc
mov
push
inc
shr
stc
cmp
and
xchg
and
mov
cs
pusha
je
cmps
xchg
in
sbb
addr16
push
adc
std
js
and
ret
xchg
popf
hlt
fwait
xchg
pop
aad
lods
leave
jmp
fidiv
jmp
add
fst
jbe
push
fmul
cmp
stos
jmp
jne
inc
fwait
outs
ret
mov
mov
retf
cmps
push
ss
clc
out
cmp
mov
mov
vphadddq
call
ins
dec
sbb
mov
mov
dec
bound
aad
scas
inc
pop
and
out
lahf
or
xor
xlat
xor
jns
addr16
lods
inc
xor
xor
xor
pop
push
or
loop
retf
pop
ja
sbb
out
xchg
pusha
pop
or
je
xchg
scas
dec
xcrypt-ctr
cmps
pop
mov
into
jmp
xchg
push
push
scas
shl
lahf
enter
ret
or
jp
xor
pop
mov
mov
cmp
or
inc
adc
sbb
shl
sub
xor
dec
mov
push
inc
outs
mul
dec
and
push
bound
std
ins
mov
sbb
jle
loope
daa
int
mov
xlat
push
test
mul
mov
pop
mul
push
pushf
cdq
adc
fs
cmp
dec
mov
jecxz
imul
jl
repnz
stos
inc
not
inc
neg
(bad)
idiv
mov
int
sub
ror
push
scas
jbe
movs
sbb
je
inc
ins
mov
adc
fsubrp
pop
mov
ins
sbb
sub
arpl
call
outs
fwait
jl
imul
aas
in
push
jmp
icebp
mov
enter
jno
jp
mov
mov
mov
paddusb
adc
mov
dec
sbb
xor
(bad)
and
cmps
mov
push
popa
add
xor
xchg
jae
jg
int3
jmp
bound
add
(bad)
push
xor
jno
adc
jle
clc
and
xchg
xor
icebp
(bad)
pushf
std
call
rcr
xor
push
push
or
das
push
add
xor
inc
out
inc
fucomi
call
pop
test
add
std
ret
xor
nop
enter
mov
shl
dec
ins
std
(bad)
sub
dec
pop
jb
mov
hlt
repnz
or
test
repnz
retf
nop
sub
xor
rcl
daa
sbb
sahf
lods
aaa
into
add
dec
call
pop
or
add
push
ja
inc
retf
frstor
mov
int
nop
sti
and
mov
arpl
cmp
sub
nop
in
sbb
scas
in
and
psubsb
cmp
xchg
mov
inc
sbb
adc
out
mov
mov
jns
sub
cmp
xor
aad
mov
rcr
cmpxchg
pop
xor
adc
idiv
xlat
inc
jg
aaa
popa
dec
lea
pushf
xlat
je
add
cli
xchg
(bad)
pushf
idiv
icebp
dec
sub
pop
call
sbb
push
mov
ror
fld
xchg
mov
popa
inc
rol
ds
idiv
ror
fmul
adc
retf
mov
mov
test
xlat
dec
sahf
lds
dec
vmovlps
inc
or
mov
cmovge
hlt
mov
or
lods
out
inc
lods
mov
cmp
push
inc
in
sub
xchg
push
cmp
imul
call
cmp
inc
fimul
ret
or
push
mov
pop
and
cs
mul
mov
fbld
ss
clc
pop
int3
outs
adc
and
push
cmps
xchg
mov
add
mov
fld
xor
inc
clc
pop
fild
int
push
shr
xchg
mov
icebp
imul
jmp
xchg
test
es
leave
mov
xchg
fisubr
hlt
mov
inc
or
pop
xchg
inc
lods
in
fsub
inc
jne
push
push
or
jns
xlat
dec
in
sahf
fiadd
push
int3
pushf
xor
cmp
pop
(bad)
aad
add
dec
inc
rol
enter
(bad)
clc
nop
retf
repz
push
out
mov
aam
pop
mov
rol
lods
xchg
std
sbb
hlt
dec
jnp
daa
cs
ins
push
mov
or
push
add
mov
retf
outs
and
in
icebp
daa
pushf
cwde
in
push
aad
ins
mov
xchg
add
mov
scas
pop
or
data16
hlt
ds
push
(bad)
pop
jb
call
loopne
dec
retf
mov
dec
mov
in
fwait
outs
sub
cli
mov
pop
cwde
(bad)
(bad)
ds
jmp
push
xchg
fs
lods
mov
add
jmp
add
cmp
call
pop
lahf
movs
sti
lods
and
mov
aad
adc
(bad)
jmp
add
mov
int
push
and
mov
mov
jmp
(bad)
stc
push
popa
(bad)
test
mov
jmp
add
aam
aaa
sbb
imul
loop
js
stos
and
inc
aam
mov
sbb
sbb
imul
cld
push
jbe
push
cdq
or
cmp
sub
mov
sub
cmc
sub
xor
cld
cmp
ja
dec
daa
cmp
imul
ins
addr16
xchg
add
fs
daa
sbb
cdq
pop
dec
fld
or
retf
lea
and
nop
std
pusha
pop
dec
call
pusha
frstor
inc
cdq
into
inc
or
cmp
mov
sbb
iret
imul
cmovs
lods
pop
sbb
jp
or
(bad)
pop
ja
push
xchg
ds
jb
aad
sbb
xchg
rol
jne
loop
dec
stos
je
cmp
imul
pop
mov
stos
sbb
cmc
inc
arpl
cwde
xor
iret
arpl
int
loop
stos
mov
xor
sar
pop
jmp
pushf
and
stos
cdq
fs
inc
mov
adc
in
mov
xchg
xor
arpl
(bad)
fcmove
xchg
mov
cmp
add
in
femms
add
jne
push
sbb
xlat
adc
(bad)
fdivr
(bad)
loope
xchg
add
push
sub
in
pop
sub
shr
imul
pop
xchg
mov
push
sub
and
add
aad
adc
out
addr16
jl
sti
aaa
dec
xor
mov
cmp
sahf
js
push
loop
adc
push
jmp
out
aaa
or
mov
jl
add
xlat
popf
add
jg
jle
rcl
movhps
adc
add
scas
shl
mov
mov
jge
mov
adc
xor
adc
sub
xor
sub
cs
scas
call
aad
mov
dec
mov
mov
dec
push
fstp
dec
cmp
in
in
aam
ins
hlt
xchg
adc
and
arpl
data16
and
in
pop
mov
fild
std
out
sub
dec
inc
ret
mov
pop
fldenv
ret
lahf
arpl
lds
gs
xor
je
pop
or
adc
and
outs
push
popf
add
lds
dec
mov
jns
cli
jp
fistp
and
lahf
pop
enter
iret
cs
imul
sbb
mov
or
clc
jmp
mov
in
jns
fisubr
lods
rcr
mov
dec
sub
mov
mov
dec
sbb
in
jecxz
push
push
fadd
test
jp
imul
adc
or
test
mov
in
sub
jp
sahf
loope
retf
iret
(bad)
pop
add
mov
fstp
out
(bad)
(bad)
push
cli
mov
shl
pop
and
or
test
adc
dec
xor
fidiv
sub
mov
add
(bad)
retf
add
das
leave
and
retf
xchg
ja
sub
add
add
mov
xchg
xchg
stos
sbb
xchg
and
(bad)
call
cmp
rol
stos
sub
out
cs
ja
ins
mov
(bad)
xor
xor
fwait
sbb
fcomp
jecxz
test
jecxz
mov
sub
(bad)
imul
in
fwait
adc
xchg
xchg
push
push
aam
mov
stos
add
adc
(bad)
xchg
inc
xor
and
repz
push
xchg
jmp
call
mov
fistp
or
mov
sbb
push
out
sbb
and
add
mov
jge
pop
cmp
cmps
xor
outs
shr
stos
sub
das
xor
lea
push
push
inc
outs
pop
cs
cmp
xlat
aad
push
push
psubsw
int3
cld
add
rcl
jmp
adc
sbb
mov
xchg
shl
popa
or
fwait
add
jae
sub
stos
scas
in
xchg
sbb
inc
mov
adc
cmp
enter
dec
lds
xchg
cmps
inc
jo
xor
aaa
jno
cli
jmp
ins
add
inc
int3
leave
retf
and
cmp
xor
fcom
fadd
push
ror
shl
mov
aas
xchg
ror
xor
push
xchg
lahf
lahf
mov
cmc
push
pop
cmp
std
aaa
pop
pushw
sub
lds
mov
add
inc
shl
pop
ret
es
fild
enter
sbb
sbb
outs
sar
jge
aad
ret
mov
pop
icebp
shr
int
pop
inc
psrlw
in
cmp
mov
imul
imul
inc
retf
and
cmp
lds
sub
xchg
sub
xchg
sbb
int
xor
add
or
jg
shl
xlat
add
pop
push
ror
fwait
push
jno
ret
adc
test
dec
xor
pop
mov
dec
or
retf
inc
lods
push
pop
lock
test
mul
sub
add
or
dec
scas
and
inc
and
enter
int
mov
stos
inc
ins
(bad)
in
inc
mov
fiadd
int
(bad)
lock
repnz
neg
fidivr
inc
xchg
aam
mov
and
leave
push
movs
add
add
sbb
gs
cmp
cli
xchg
cwde
pop
push
(bad)
sbb
add
imul
mov
(bad)
hlt
mov
sbb
mov
xor
dec
ds
xchg
stos
test
dec
adc
inc
xor
repnz
adc
or
jne
pop
bound
mov
popa
cmps
jo
and
cli
sub
shr
movs
out
jle
call
dec
add
cld
sub
dec
mov
cmp
cmp
add
pusha
push
test
sti
mov
push
dec
mov
(bad)
(bad)
mov
call
mov
retf
push
push
imul
and
ficomp
adc
cmps
mov
add
popf
or
adc
pop
fcmovbe
inc
jb
push
jle
icebp
push
rcl
push
inc
sub
pop
sbb
push
ins
cld
inc
rcl
mov
inc
into
call
ss
test
xor
xor
add
mov
push
out
cmp
or
fwait
arpl
sbb
gs
(bad)
cmc
popa
and
fwait
lahf
cmp
and
and
std
sahf
mul
outs
push
inc
push
out
enter
cmp
xchg
cli
fsubrp
pusha
mov
push
pushf
mov
fldcw
mov
pop
pop
xchg
adc
push
aaa
jmp
sbb
pop
retf
nop
mov
scas
data16
popf
iret
ret
test
lahf
cmp
pop
sar
cmps
or
sub
push
jle
out
(bad)
inc
gs
mov
iret
and
inc
lods
mov
ins
aad
jle
push
push
pop
rcr
inc
jecxz
jb
(bad)
cli
lods
or
pop
out
enter
sar
fld
sub
inc
pop
dec
in
popf
mov
in
jne
mov
in
add
mov
cmp
in
sar
data16
retf
call
cmp
es
out
and
int3
mov
adc
xchg
out
adc
aas
gs
cmc
or
xchg
mov
pop
or
dec
sbb
inc
jb
mov
or
sahf
sub
les
lds
nop
rol
xor
jbe
outs
mov
push
fiadd
xchg
ret
jb
xchg
sar
test
cmp
sub
ins
enter
mov
js
pop
dec
call
aaa
or
(bad)
int3
sbb
fist
xchg
aas
dec
mov
mov
leave
mov
es
mov
adc
jecxz
sbb
xchg
sub
cmp
ds
inc
retf
sbb
jl
lds
push
adc
std
sbb
sbb
push
inc
sbb
scas
xchg
cwde
jo
and
push
sti
enter
sub
mul
aam
(bad)
(bad)
and
or
in
xchg
popa
and
aam
les
or
mov
stos
xchg
aaa
pop
test
sti
arpl
jbe
cmp
push
stc
sbb
pop
repnz
push
stc
test
and
mov
inc
cmp
push
adc
xchg
(bad)
adc
mov
cld
push
call
sub
aas
pop
or
lahf
push
ins
xor
push
sti
mov
mov
jmp
aaa
sbb
aam
push
xchg
test
dec
mov
pop
sub
xor
jmp
mov
je
in
dec
sub
sbb
mov
cmp
push
sbb
jmp
push
sbb
mov
aam
pop
pop
or
mov
xchg
enter
clc
sbb
inc
loope
push
js
push
sub
or
add
cwde
das
cwde
sahf
cmp
lahf
or
mov
jp
in
js
xchg
sar
and
cmc
pop
fisub
int
sub
dec
std
pusha
push
adc
test
jae
jmp
dec
loopne
aad
inc
and
stos
push
adc
xchg
pop
iret
cmp
test
lahf
fistp
add
je
fwait
sti
popa
adc
loope
clc
sti
push
jmp
cmp
xor
dec
mov
les
daa
in
push
jae
mov
adc
call
mov
pop
jo
pop
inc
shl
in
add
cmp
es
mov
xor
enter
daa
xchg
test
ret
ds
cmp
ins
repz
pop
add
xchg
xor
xor
pop
out
jno
ins
cmps
and
call
leave
(bad)
jp
mov
cli
inc
cmp
mov
mov
dec
sub
cmp
jmp
(bad)
mov
(bad)
mov
push
push
jo
outs
sahf
(bad)
ins
dec
cmps
mov
clc
inc
neg
push
cld
jge
ins
dec
gs
push
mov
pusha
push
leave
retf
(bad)
das
xchg
hlt
lods
jp
xlat
lahf
stos
sbb
leave
push
cmp
cli
test
ins
out
sbb
call
xchg
push
mov
push
xor
jecxz
test
add
cmp
jg
call
call
xchg
div
fcmovnb
ret
cdq
or
mov
dec
test
call
pop
not
mov
cld
out
push
aam
iret
(bad)
jmp
and
adc
mov
mov
cmp
mov
cli
imul
mov
in
pushf
mov
pushf
mov
call
xor
sbb
fldcw
ja
cs
xor
fbld
push
dec
lock
mov
sub
rcr
sbb
cmp
sub
push
cli
dec
imul
mov
dec
inc
fistp
xchg
cld
dec
scas
mov
sbb
aas
into
js
jl
fs
nop
jmp
std
hlt
out
retf
xor
int
es
xchg
fisub
push
fisubr
mov
jnp
imul
lea
add
mov
or
xor
mov
push
aaa
call
sbb
int3
fst
ins
outs
dec
(bad)
sti
push
or
mov
and
dec
repnz
inc
jnp
pusha
pop
adc
mov
(bad)
repz
sbb
in
stc
mov
test
inc
push
dec
loop
xor
cmps
inc
inc
lahf
mov
sub
cwde
xchg
fwait
adc
xchg
(bad)
fdivp
adc
add
xchg
cmps
xchg
test
lds
out
xchg
mov
pop
jmp
enter
js
or
jecxz
mov
cvtpi2ps
and
mov
mov
mov
ds
inc
xchg
and
test
int
mov
sub
push
ss
mov
es
(bad)
test
mov
cmp
nop
std
or
xor
jb
add
inc
cld
push
dec
push
add
sbb
or
sbb
movs
(bad)
xchg
add
mov
stos
sub
mov
sar
lea
push
test
outs
and
mov
push
fs
test
loop
jmp
fcmovnu
mov
ret
cmps
mov
lea
daa
pop
clc
jmp
jg
jnp
cs
xor
and
stos
aam
test
push
and
push
xchg
lea
cld
std
imul
xlat
test
outs
or
inc
bound
repz
push
cmc
xor
sub
jg
fwait
jb
push
inc
pop
rcl
mov
imul
aad
sub
test
sti
imul
pop
imul
pop
mov
cmp
dec
sub
inc
popf
jae
jno
ret
cmp
in
sub
mov
rcr
mov
fwait
mov
xor
xchg
mov
and
jecxz
mov
mov
lock
jg
cmp
push
sub
icebp
dec
add
push
out
add
cmps
pusha
nop
and
loop
(bad)
out
test
aam
rol
sbb
pop
adc
jae
xlat
out
pop
pop
mov
pushf
ins
or
mov
pop
and
(bad)
mov
imul
ins
sbb
xchg
inc
test
adc
(bad)
sbb
cwde
or
sahf
in
das
out
call
sub
aad
sbb
test
loop
popa
push
push
bound
addr16
loop
adc
mov
mov
movs
jg
(bad)
int3
or
leave
cmc
cmps
xchg
retf
cwde
jb
and
js
cmc
push
cmp
mov
inc
pop
mov
mov
clc
mov
dec
repz
and
mul
sar
xchg
mov
mov
ret
movs
pop
mov
hlt
or
sbb
iret
arpl
iret
inc
enter
mov
mov
clc
pop
imul
pusha
aaa
dec
jmp
sub
cmps
fld
cmc
retf
(bad)
addr16
je
and
movs
loopne
les
dec
in
pop
dec
or
mov
ret
retf
mov
fidivr
jl
(bad)
fiadd
lods
sbb
cmps
mov
push
xchg
adc
or
loop
and
add
pop
and
cmps
mov
adc
scas
push
pusha
sti
shl
retf
pop
jae
jne
test
in
lahf
loopne
fcmovnu
shl
fcmovu
lock
or
fdivr
int
pop
adc
retf
ins
push
inc
jecxz
dec
xlat
jl
pop
int3
fcom
mov
data16
xchg
fwait
addr16
addr16
jbe
xchg
(bad)
push
pop
adc
dec
ja
movs
cli
in
mov
sti
mov
push
sub
sub
(bad)
lahf
lods
mov
sti
(bad)
jno
fldenv
pop
stos
push
daa
mov
pop
jmp
popf
dec
test
test
adc
retf
test
mov
cmp
pop
pop
(bad)
fcmovu
fimul
jns
idiv
cwde
scas
fst
mov
add
push
pop
mov
xchg
es
retf
xchg
retf
fist
pushf
xchg
int
ds
or
aad
in
jmp
out
jle
pop
and
or
xchg
sar
pop
imul
rol
inc
and
stos
jb
dec
dec
(bad)
aad
inc
xchg
fsubr
mov
sub
mov
dec
push
imul
mov
or
xor
push
int3
div
lods
jg
push
pop
jecxz
adc
xor
mov
add
cmc
mov
push
sbb
mov
mov
call
and
inc
ins
movs
int3
and
and
sti
cmps
jmp
adc
stc
outs
xchg
outs
in
pop
ror
mov
inc
fs
es
sbb
ja
push
imul
push
popf
xor
std
lds
gs
imul
(bad)
push
cmp
ss
cmp
push
loopne
shl
pop
sbb
xor
mov
scas
jecxz
mov
fs
rol
xchg
outs
push
mov
or
cmp
fs
inc
xor
(bad)
stc
lea
xor
xlat
pop
inc
sub
fld
push
dec
xor
inc
scas
jbe
mov
nop
jmp
call
cmps
out
and
lock
xchg
test
mov
xchg
and
in
in
xor
push
inc
xor
in
jmp
inc
imul
push
inc
jbe
push
lock
out
(bad)
sbb
sbb
fild
inc
fsubr
mov
adc
pop
mov
enter
sub
call
mov
pop
(bad)
fsub
and
jp
add
ja
arpl
test
cmp
jmp
call
fild
xchg
test
mov
fnstsw
stos
iret
cmp
loop
push
fwait
jl
lock
aam
cmps
ret
sub
dec
fs
neg
stos
leave
jmp
xchg
test
cmps
pop
sbb
xchg
bndldx
bound
pop
lock
test
js
test
loopne
or
xor
arpl
mov
jnp
push
cmp
xchg
jl
mov
fcmovbe
xchg
shl
sub
push
inc
add
inc
sahf
xchg
jge
sbb
sti
jp
std
shl
dec
jl
outs
adc
ja
enter
sbb
fsub
fidiv
dec
shl
aam
push
adc
daa
dec
das
fldcw
inc
mov
cmp
stc
ficomp
xchg
mov
jbe
adc
fwait
in
sbb
jl
adc
dec
repz
repz
push
mov
and
cmp
xor
xlat
hlt
fldcw
mov
fwait
(bad)
cld
xor
mov
push
std
test
js
push
fsubr
xchg
int3
out
stos
(bad)
iret
cmps
js
aad
js
xchg
jecxz
mov
sbb
mov
jge
mov
jecxz
das
lods
push
jmp
nop
xchg
imul
push
das
ins
(bad)
addr16
mov
arpl
and
adc
in
xlat
(bad)
push
aam
movs
pop
push
sub
(bad)
(bad)
mov
shl
sbb
rol
mov
add
push
test
test
hlt
cmp
out
lods
inc
jmp
ins
scas
mov
test
(bad)
packuswb
sahf
sub
mov
inc
fbstp
sbb
dec
dec
mov
xchg
sar
fcom
mov
imul
ja
call
sub
es
scas
mov
mov
fadd
sub
nop
and
shl
dec
add
fs
retf
xchg
pop
(bad)
ja
and
mov
cmps
adc
das
add
cmc
pop
call
xchg
repz
mov
xor
(bad)
(bad)
mov
sti
rol
xor
nop
out
xchg
xchg
xchg
mov
jne
dec
test
sahf
mov
ror
mov
cmc
and
dec
xor
xchg
push
xchg
jge
idiv
add
ret
mov
outs
mov
movs
jae
aaa
xor
adc
push
pop
pushf
pop
cmp
xor
out
popf
pop
jae
and
pop
push
(bad)
mov
xchg
or
sbb
cmp
fst
and
ins
test
xchg
std
and
xchg
clc
les
or
mov
add
cmp
xchg
mov
enter
lock
add
stos
add
popa
mov
hlt
rol
lods
cmps
in
or
nop
sbb
not
dec
add
pop
push
outs
rol
ret
mov
cli
pop
lods
iret
pop
adc
out
outs
mov
mov
hlt
or
lds
xchg
jmp
cmp
mov
sbb
mov
rol
push
loope
out
and
cdq
movs
(bad)
ss
lods
(bad)
test
mul
outs
sbb
mov
scas
cmp
mov
jl
loope
cmp
push
xor
push
add
loop
inc
lock
pop
jb
push
movs
mov
xchg
xchg
xlat
pusha
nop
outs
jecxz
sti
cmp
xchg
fs
repnz
dec
cmp
cmc
jbe
jno
mov
mov
ds
aam
mov
mov
nop
enter
mov
aam
outs
test
jl
lods
adc
lock
outs
xor
mov
xor
jg
loope
int
retf
jno
mov
into
leave
inc
push
cli
xchg
mov
mov
xor
push
mov
mov
push
test
out
xor
cmp
xchg
xlat
jo
sub
jle
icebp
mov
xchg
pop
popf
xor
pushf
adc
icebp
shl
outs
es
inc
xchg
xchg
push
jg
aam
push
dec
shl
adc
mov
je
movs
sbb
int3
les
adc
mov
das
dec
or
push
aam
(bad)
push
enter
xor
arpl
dec
add
aaa
cld
retf
retf
aam
jbe
inc
push
push
pop
xlat
and
jle
lea
aas
addr16
pusha
rcr
(bad)
and
inc
cli
(bad)
dec
retf
jno
iret
and
out
adc
mov
shl
jae
movs
mov
cld
sbb
mov
scas
dec
fdiv
sub
xor
lds
sub
mov
sub
fld
jb
add
stos
imul
adc
add
and
(bad)
scas
in
hlt
xchg
lds
(bad)
rcr
adc
xchg
sahf
icebp
mov
dec
mov
das
lock
mov
mov
xor
adc
ds
std
xor
repnz
push
popf
(bad)
outs
mov
test
pop
ror
pop
and
punpckhdq
add
mov
std
mov
das
icebp
sbb
mov
jp
jmp
in
rcl
mov
je
mov
pop
rcl
dec
repnz
add
enter
sbb
add
aaa
or
call
shl
and
or
cmc
(bad)
loop
xor
(bad)
stos
cmp
in
retf
inc
sub
adc
(bad)
pop
dec
xor
or
push
jge
mov
out
pop
mov
leave
mov
xor
ror
mov
push
pop
inc
jmp
ss
inc
cmp
nop
std
or
mov
add
in
xchg
test
and
pop
daa
xrelease
pop
pop
mov
imul
aaa
fwait
arpl
mov
dec
mov
xchg
xor
sar
push
fld
push
cdq
shl
or
and
ror
jbe
adc
adc
add
cld
add
pop
add
ins
push
lea
cmc
sar
sub
and
jnp
out
xor
sbb
sbb
pop
or
test
iret
repnz
or
mov
push
xchg
push
jb
inc
aam
xor
add
xchg
and
xor
in
retf
cmp
mov
pop
mov
xchg
inc
push
or
adc
(bad)
cmp
sub
stos
sub
and
inc
(bad)
(bad)
stos
mov
repnz
adc
out
jmp
(bad)
repnz
xor
imul
cmps
and
xor
ins
retf
sbb
fs
mov
call
cmc
ja
sti
dec
lods
test
cmp
and
(bad)
icebp
and
and
or
inc
mov
pusha
mov
or
icebp
mov
jbe
push
test
mov
xchg
pop
(bad)
push
mov
fcomp
cmp
icebp
in
aas
mov
mov
add
outs
xchg
pusha
shr
neg
jnp
ins
xchg
fisub
cmp
sahf
add
outs
mov
dec
fild
push
xor
pop
xchg
das
add
outs
mov
mov
rcl
and
pop
shl
or
jae
lock
mov
xchg
pusha
shl
push
ret
jmp
cmp
mov
idiv
xchg
sub
jb
sub
jne
add
pushf
add
ins
popf
inc
ins
lock
pushf
inc
sbb
sbb
inc
cmps
arpl
and
mov
inc
aad
xlat
jp
aaa
sbb
pop
lahf
aam
(bad)
dec
daa
(bad)
(bad)
push
sub
add
mov
sbb
hlt
mov
mov
adc
cmp
jle
fmul
inc
mov
pop
sbb
inc
dec
cmp
cdq
and
pop
pop
cmp
push
push
sub
cli
jecxz
shl
es
jge
push
cmp
jns
jae
fmul
ds
nop
(bad)
(bad)
push
and
adc
jmp
les
and
push
fsubr
xor
jae
mov
fild
cmp
repnz
jno
dec
retf
cmp
pop
jnp
ret
cmp
and
dec
fwait
jno
clc
mov
push
loope
loope
mov
sbb
loopne
jg
xor
popf
int3
pop
jmp
imul
test
pop
push
jge
cmp
ds
stos
pop
bound
jno
jo
and
mov
outs
repz
mov
fdivr
jno
add
enter
push
das
and
dec
mov
jbe
imul
out
push
call
imul
push
jns
ds
push
inc
sbb
pop
dec
adc
js
sbb
and
jns
jo
imul
xchg
aaa
lods
push
mov
int
and
pop
pop
mov
jecxz
fsub
xchg
cdq
cmp
cs
cmp
fcomp
xor
dec
adc
mov
push
cmps
hlt
rol
add
shl
ret
cmps
stos
or
xchg
outs
js
adc
or
mov
inc
sub
in
mov
scas
pop
out
sub
les
push
test
and
and
add
jb
sbb
sub
add
push
or
ret
mov
mov
mov
sbb
outs
icebp
pop
fidiv
lods
loop
push
sbb
sub
jb
inc
add
sub
test
(bad)
xlat
xchg
sahf
ss
jns
nop
adc
adc
pop
mov
or
repz
ret
stc
xchg
push
rol
mov
icebp
mov
ins
xchg
iret
adc
in
retf
in
add
pop
inc
inc
adc
jmp
cli
cmp
dec
sub
iret
add
jg
mov
cmp
mov
push
in
pop
push
stc
pop
mov
es
imul
mov
mov
jmp
shr
dec
dec
jmp
push
adc
mov
push
adc
in
cmps
hlt
mov
push
push
and
in
stc
xor
imul
push
bnd
xor
std
fild
cld
and
popa
xor
sti
push
mov
jae
cmp
mov
add
jns
mov
rcr
cdq
cld
mov
jb
add
mov
xchg
dec
mov
jns
cmp
jno
ins
xchg
loopne
push
pop
leave
and
dec
cmp
out
std
pop
mov
sub
std
das
inc
and
fisttp
fldenv
mov
aad
cwde
in
arpl
out
ret
gs
mov
pop
and
add
les
call
push
jecxz
retf
sbb
in
(bad)
inc
fwait
xor
push
mov
fisttp
dec
dec
dec
cmp
dec
pop
add
or
jl
(bad)
mov
data16
rcr
test
cmp
sub
pop
int
xor
popa
xchg
xchg
mov
stos
stos
(bad)
cmp
pop
xchg
and
jecxz
mov
std
lahf
jb
inc
pop
js
push
inc
cdq
jmp
sub
jne
out
cmc
out
repz
mov
mov
push
lods
xchg
push
push
rcr
lods
rcr
pop
push
push
ins
cdq
and
xor
or
out
jmp
rcr
fiadd
sbb
xchg
lock
loope
int
mov
pop
pop
mov
mov
lea
dec
stos
xchg
adc
stos
in
inc
es
adc
aaa
into
dec
jbe
and
sar
bswap
bound
retf
mov
adc
in
dec
jge
push
cmc
(bad)
jmp
je
ins
mov
xor
aaa
jae
dec
jle
and
scas
gs
mov
pop
ja
pop
(bad)
sbb
hlt
push
mov
sub
es
jmp
in
out
mov
or
test
mov
sbb
lahf
jecxz
retf
out
inc
mov
push
jecxz
push
mov
mov
xchg
pop
cs
cmp
es
mov
push
adc
cmp
mov
mov
mov
inc
mov
js
sbb
inc
jne
xchg
jo
cmp
pop
push
int
inc
rol
(bad)
ins
jmp
dec
test
call
pop
call
sub
(bad)
(bad)
xchg
mov
add
mov
xchg
int3
and
xchg
push
or
inc
adc
add
and
das
cmp
adc
mov
call
movs
dec
mov
ss
xchg
ss
and
mov
outs
fnstcw
fbstp
ss
lahf
or
pushf
mov
push
push
mov
xchg
aad
jbe
cmc
push
dec
and
scas
inc
mov
sub
dec
inc
cwde
fdivr
sub
clc
or
push
push
pop
(bad)
jnp
pop
(bad)
push
(bad)
retf
scas
xor
test
ds
jno
xchg
pusha
push
add
jge
mov
lods
cmps
xor
push
jbe
and
ja
cmps
hlt
je
jae
xlat
xchg
mov
shr
and
addr16
leave
mov
or
fdiv
adc
mov
pop
ror
(bad)
rcl
sub
pop
mov
lds
cs
in
jecxz
jecxz
sbb
test
clc
mov
retf
or
dec
popf
sti
sbb
jno
inc
mov
xor
inc
lds
mov
je
pop
push
dec
clc
leave
clc
dec
add
int3
and
xchg
stos
cs
pusha
sub
test
cwde
jno
dec
dec
push
sbb
and
lods
dec
mov
in
jbe
movs
sub
mov
push
ret
sbb
push
mov
ret
and
pop
jp
aaa
nop
xlat
cwde
or
xor
pop
es
pop
test
push
test
dec
xor
popf
sub
and
dec
sbb
scas
shr
jge
mov
les
jp
pop
ins
test
mov
jne
mov
sub
sbb
sbb
rcl
jl
test
lea
xor
cmps
xchg
je
adc
popa
pusha
push
jg
fwait
jmp
mov
lods
cmp
cwde
cmp
add
push
in
pop
inc
sub
sub
out
adc
aaa
mov
sub
jle
dec
jno
cdq
inc
inc
lods
fadd
les
aas
adc
push
clc
fldcw
jmp
jge
scas
(bad)
xchg
mov
movs
dec
lods
adc
lds
daa
mov
(bad)
cmp
dec
xlat
cmp
dec
out
sbb
ds
add
xchg
push
lods
mov
jmp
add
xchg
mov
push
daa
jae
icebp
mov
mov
fadd
(bad)
mov
daa
push
in
push
jmp
adc
out
jns
je
cmc
pusha
int3
push
mov
adc
jnp
jae
mov
ins
(bad)
pop
push
fimul
jl
out
stc
mov
add
pushf
sub
lock
or
adc
mov
jnp
imul
pop
jmp
(bad)
sahf
or
fwait
stc
bound
inc
or
and
ret
mov
mov
jg
cmp
jp
xor
add
popa
mov
adc
out
mov
mov
jmp
inc
fidiv
ds
cmp
jae
out
xchg
mov
inc
xor
movs
arpl
mov
ss
fs
sbb
cmp
pop
mov
inc
mov
cmove
pop
or
stos
in
rol
cmc
mov
mov
popa
jb
cmp
mov
fld
sub
clc
mov
sbb
retf
push
out
(bad)
mov
cmp
mov
in
aaa
xchg
mov
xchg
leave
neg
dec
jns
push
cmp
or
sub
fsubr
pause
mov
(bad)
movs
xchg
jae
sbb
call
pop
dec
pop
bound
inc
and
ins
es
fwait
push
cwde
mov
mov
adc
inc
fbstp
pop
or
inc
aaa
lods
inc
scas
fwait
jp
loop
mul
inc
or
sar
xchg
or
fcmovbe
dec
dec
jb
and
fmul
(bad)
adc
xor
cmps
mov
mov
mov
mov
sbb
cli
fisubr
cmp
xchg
mov
shl
sub
cld
sahf
test
mov
mov
xor
hlt
pop
pop
jp
adc
cmps
aas
mov
xor
retf
scas
jle
mov
mov
inc
call
mov
pop
jae
js
nop
or
mov
inc
mov
mov
(bad)
mov
ds
ret
mov
add
dec
sbb
xor
jp
dec
lods
(bad)
adc
mov
add
or
(bad)
mov
data16
push
shl
and
retf
aas
add
mov
dec
stos
xlat
push
add
in
(bad)
pop
repz
in
mov
mov
int
fmul
fsub
jp
sub
add
in
mov
or
or
retf
sub
inc
xor
cwde
jg
inc
inc
dec
mov
sbb
or
hlt
(bad)
cli
jl
cmps
xor
push
or
mov
sbb
lods
sub
clc
inc
daa
test
lods
mov
outs
sti
mov
jae
xchg
fst
pop
mov
fbstp
push
mov
stos
mov
mov
(bad)
loop
mov
inc
jl
in
ss
jmp
or
xchg
mov
outs
mov
dec
jecxz
imul
shr
out
cmp
add
bound
jbe
je
push
fucomp
xchg
push
push
sbb
pop
jne
sti
imul
mov
aaa
mov
xor
jl
lods
mov
and
sbb
pop
push
gs
ret
or
mov
cmp
fsub
shl
or
or
retf
inc
jmp
pop
cld
xchg
mov
mov
ror
mov
nop
cmp
push
pop
cld
push
sbb
(bad)
jno
cmp
xor
wrmsr
fnstenv
jnp
adc
sbb
test
and
test
les
outs
bound
push
aaa
mov
mov
repnz
xchg
xor
mov
inc
push
jns
and
jo
aaa
in
addr16
addr16
cmps
iret
ret
cwde
out
ret
test
sbb
xor
or
adc
hlt
adc
xchg
and
aas
cmp
vandps
dec
fwait
mov
mov
stos
xor
mov
jg
fisub
mov
sub
stos
out
xor
adc
mov
add
sub
pop
cld
dec
sbb
sub
xor
enter
or
and
cmp
addr16
mov
pop
sahf
adc
jo
ror
(bad)
cld
lock
inc
pop
jne
movs
lock
ins
(bad)
aaa
into
and
addr16
mov
je
mov
lock
push
call
add
sbb
push
inc
stos
test
mov
mov
sub
sbb
adc
fcom
jle
push
sbb
add
sub
sub
imul
leave
pushf
test
mov
test
fcom
popa
xchg
and
pusha
inc
mov
inc
push
push
addr16
push
mov
adc
push
xchg
jnp
add
les
mov
int3
outs
shl
and
push
adc
scas
mov
jecxz
or
sbb
fistp
or
jne
das
inc
sbb
sub
(bad)
jle
inc
leave
xor
sti
enter
fsubr
mov
push
lods
push
in
sbb
les
lahf
cmps
not
dec
add
es
gs
add
clc
push
fcomp
and
adc
push
fwait
push
stos
lea
in
add
mov
loope
adc
xchg
or
jbe
inc
push
xchg
pop
cmp
int3
mov
addr16
cdq
and
xor
shl
jne
sbb
or
stos
jae
cmp
jae
loopne
sbb
aas
jle
mov
fist
popa
test
popf
mov
mov
enter
rcl
sar
jp
sbb
push
shl
out
fisubr
mov
and
lock
(bad)
repnz
jns
jno
dec
push
pushf
push
fst
xchg
cmps
inc
jmp
inc
mov
loop
(bad)
cmp
cmp
jmp
cmp
repnz
test
push
cmp
lods
popf
test
jl
pop
outs
daa
xor
ja
xchg
fcom
or
xor
xchg
repnz
pop
pop
leave
jno
ins
popf
mov
push
in
pop
mov
sub
outs
cmps
jecxz
call
sub
mov
rcl
test
movsx
push
stos
mov
push
inc
aam
cmps
adc
ror
call
pop
jo
push
addr16
push
fdivr
jmp
add
pop
add
mov
(bad)
mov
sbb
cmp
mov
cdq
push
cmp
sub
sub
mov
pop
xor
scas
push
sti
retf
imul
shl
out
push
stos
and
push
sahf
sub
or
in
jg
fsubr
in
popf
xor
outs
imul
mov
mov
imul
adc
loopne
mov
xchg
adc
je
(bad)
xor
fwait
lods
movhps
pop
push
retf
and
mov
push
mov
js
push
push
mov
jmp
dec
sub
sar
gs
jmp
jl
xchg
or
retf
sub
sub
sahf
or
mov
mov
mov
adc
and
dec
out
jnp
jmp
shl
mov
mov
add
add
ja
and
ins
jo
lods
int3
dec
or
into
jmp
jae
push
adc
sahf
mov
jno
fisub
adc
add
arpl
jg
and
add
inc
ds
repnz
xor
mov
sub
xor
inc
sbb
and
popf
mov
inc
lods
out
nop
mov
jo
and
repnz
inc
mov
mov
mov
outs
pop
xor
test
inc
mov
sar
clc
jmp
hlt
xchg
pop
mov
cs
cs
pop
adc
pop
call
popf
jg
mov
(bad)
mov
loope
arpl
sar
sbb
retf
mov
popa
and
adc
sub
xor
loopne
imul
push
jge
and
cmp
fidivr
xchg
test
outs
or
adc
push
adc
into
lds
in
retf
dec
call
inc
xchg
scas
pop
and
and
or
loope
xor
nop
mov
or
lock
and
push
bound
pop
stos
pop
popa
mov
or
cmps
mov
mov
out
jle
div
ins
hlt
add
dec
leave
mov
nop
ss
add
popf
fistp
aam
clc
inc
sbb
mov
repnz
sub
(bad)
jp
rcl
fs
mov
mov
pusha
or
jge
fisubr
jecxz
push
icebp
sub
or
jle
sbb
scas
daa
mov
daa
icebp
mov
or
mov
in
jp
jo
adc
fs
dec
jmp
mov
addr16
mov
or
pusha
dec
mov
test
adc
lahf
dec
mov
inc
pop
out
add
enter
jae
sahf
pop
mov
outs
and
ins
dec
pop
hlt
pop
inc
ds
pop
add
mov
inc
mov
repz
enter
mov
pop
jno
cwde
add
(bad)
in
add
stc
jecxz
int
test
lar
retf
les
pop
sbb
adc
mov
pushf
cmp
sbb
fld
pushf
pop
and
mov
and
fnstsw
sub
movs
mov
jb
pop
add
lock
xor
ins
aam
push
and
rcl
movq
mov
jle
nop
push
addr16
dec
jno
sub
lahf
jmp
or
or
stos
inc
jmp
shl
stos
into
sti
sbb
rcl
cmp
pusha
fs
inc
out
fadd
sub
sub
mov
adc
adc
cmp
or
pop
xchg
mov
mov
xchg
and
pop
jne
daa
sbb
xor
imul
cmp
punpckhdq
cdq
test
aas
jge
clc
pop
ins
inc
(bad)
(bad)
mov
fidiv
rcr
add
sbb
xchg
int3
inc
dec
test
ret
aad
repnz
les
call
rol
nop
in
shl
(bad)
and
popa
add
scas
fwait
xor
jmp
xchg
sbb
jecxz
retf
or
pop
je
(bad)
inc
mov
or
push
xor
fsubrp
(bad)
cmp
mov
jns
pusha
jmp
jnp
sub
sub
hlt
adc
jp
push
pop
add
test
adc
jo
test
jle
push
xor
mov
outs
xor
adc
or
int
add
ds
rcl
ins
or
xor
xchg
pop
arpl
enter
les
popa
cmp
jmp
cmp
sub
arpl
outs
scas
scas
cmps
in
js
fstp
cmp
pop
cmp
xlat
dec
mov
jmp
xchg
jno
rcr
xchg
jge
mov
lods
adc
xchg
sub
jo
lea
sbb
pop
jbe
les
xchg
out
js
addr16
sbb
pop
xchg
mov
out
fsub
push
pushf
sub
mov
xchg
cwde
push
mov
adc
sbb
mov
adc
jb
add
sbb
adc
je
inc
mov
jge
call
add
int
outs
or
cmps
and
and
(bad)
jmp
enter
mov
popf
outs
loopne
sbb
jp
and
xchg
and
pop
cdq
cmp
stos
lods
xchg
out
popf
retf
test
cdq
fimul
adc
pop
xlat
fsubr
mov
imul
imul
dec
int3
mov
imul
repz
adc
dec
cmp
lds
push
test
jecxz
cmp
ss
mov
mov
pop
mov
ficom
pushf
sbb
mov
mov
das
aam
int
sub
or
fisttp
loopne
pop
addr16
test
sbb
lea
in
push
fs
jl
mov
aam
jns
mov
adc
mov
loop
leave
sub
inc
xchg
mov
inc
mov
sub
adc
fmul
in
(bad)
jl
push
rcr
sbb
push
gs
dec
pusha
and
(bad)
cmp
push
dec
inc
sahf
retf
pop
mov
push
adc
sbb
push
push
pop
xor
jge
inc
push
adc
cmp
fimul
dec
sub
mov
in
adc
loopne
add
mov
mov
fcom
sahf
js
ss
out
loopne
dec
(bad)
xchg
lods
ret
inc
jns
xchg
or
inc
lods
addr16
add
push
mov
int
dec
adc
int3
xchg
and
mov
and
inc
add
inc
pop
test
call
fsubr
fstp
inc
addr16
(bad)
sbb
arpl
ins
mov
add
xor
add
xor
or
aam
add
add
scas
ficom
jge
fstp
sti
mov
cdq
aad
jns
mov
jo
retf
sbb
popa
push
pop
xor
push
push
lods
std
mov
sbb
mov
ds
mov
dec
mov
pushf
jo
jae
sub
inc
pop
dec
mov
punpcklwd
adc
lds
clc
adc
push
sbb
push
sti
out
movs
sub
sar
inc
mov
cmc
add
xchg
les
out
test
test
frstor
adc
shl
loop
push
test
(bad)
mov
mov
xor
sub
xor
jge
adc
(bad)
pop
sbb
loope
jnp
bound
addr16
out
add
mov
sub
inc
sub
and
jns
xor
loopne
cld
fadd
sbb
cld
bts
ret
adc
pop
call
sahf
adc
adc
repz
push
pushf
lock
retf
in
out
push
or
xor
movs
inc
mov
out
jecxz
sbb
or
inc
(bad)
packssdw
mov
rcr
mov
adc
test
iret
adc
inc
xor
stos
ins
lock
cmp
lea
sar
cmc
add
aam
ror
popa
push
(bad)
mov
fld
sub
mov
add
push
and
xchg
xor
push
lods
out
push
mov
bound
bound
mov
sbb
dec
sbb
out
inc
icebp
pop
(bad)
mov
fbstp
cmp
sti
data16
and
push
and
call
and
adc
sbb
mov
or
jo
cdq
call
sar
imul
loopne
repnz
movs
lahf
mov
movs
mov
pop
mov
sbb
fidiv
or
aam
dec
push
mov
fmul
push
cmp
adc
ins
mov
inc
or
and
out
jmp
sub
cmp
shl
xchg
icebp
(bad)
and
adc
faddp
mov
addr16
xor
das
das
out
xchg
test
lds
cmp
push
dec
xchg
in
test
ret
xabort
mov
ficom
fsubr
(bad)
fwait
adc
or
xor
mov
out
jns
mov
loopne
mov
test
or
mov
or
loope
clc
daa
and
adc
ret
push
sub
sbb
jne
rol
dec
ss
call
inc
push
add
test
das
jle
adc
jb
clc
(bad)
jp
xlat
and
ret
jb
add
mov
sbb
dec
add
cli
xor
int
popf
scas
pop
jne
add
repnz
cmc
jne
xchg
outs
cmp
ds
pushf
jo
inc
xchg
(bad)
ficom
hlt
popf
pop
xchg
jns
imul
leave
push
ins
sbb
cmp
and
iret
int3
dec
and
or
mov
cmp
push
pop
movs
or
jb
in
repz
cdq
mov
dec
outs
rcr
fiadd
cmps
rcr
mov
test
jmp
mov
push
call
xor
test
mov
and
rol
lea
xor
div
cmp
mov
xchg
loope
enter
jmp
ret
sbb
or
test
add
sbb
repnz
xor
add
fmulp
outs
add
mov
jp
fisub
xor
fidiv
call
shl
jb
aas
dec
mov
sti
test
mov
inc
mov
inc
jge
xchg
pop
push
jno
xor
xchg
xchg
fild
dec
loope
ds
repz
mov
cmp
popf
cdq
or
sbb
out
lds
movs
ins
mov
dec
inc
add
sahf
clc
out
mov
jl
ficomp
sub
bound
dec
mov
mov
and
pusha
fsub
maxps
push
std
mov
clc
ds
jecxz
mov
dec
sbb
outs
fsub
sub
imul
lods
aam
mul
xchg
mov
shl
push
adc
fadd
or
cmp
xchg
cmp
inc
retf
ins
push
pusha
stos
xchg
adc
cmp
inc
(bad)
xor
scas
lods
ror
data16
jmp
jo
ret
(bad)
fs
mov
dec
outs
out
or
lea
inc
bswap
jo
adc
cmps
stc
in
popa
pop
xchg
out
neg
(bad)
(bad)
mov
xchg
leave
dec
pop
or
inc
div
movs
test
aam
xor
and
inc
stos
ret
mov
cmp
movs
int
adc
repz
and
pop
inc
(bad)
ja
iret
dec
stc
inc
push
sub
pop
dec
mov
dec
cmp
fwait
mov
sbb
jo
gs
dec
mov
push
push
(bad)
cwde
dec
lea
sbb
xor
imul
mov
sti
cmp
not
hlt
repz
fcomip
pop
and
out
pusha
rcl
xor
dec
fs
aaa
dec
push
jge
into
pop
(bad)
aas
pop
sub
std
rol
in
(bad)
cmp
(bad)
xor
push
xchg
sbb
jb
cwde
sub
cdq
xchg
std
je
out
dec
sbb
fidiv
xchg
loop
mov
pop
pop
pusha
das
test
mov
xor
xchg
cld
push
or
mov
jmp
mov
dec
jae
pop
add
inc
ss
dec
cwde
pop
(bad)
add
cdq
dec
mov
inc
and
and
js
mov
inc
adc
adc
retf
pop
xor
movs
jmp
neg
call
jle
cmp
std
sbb
(bad)
dec
add
fs
cs
test
sbb
sub
nop
cmp
cmp
mov
imul
ins
sbb
cmp
mov
dec
ror
inc
call
(bad)
sub
repz
mov
push
cwde
pop
jp
mov
(bad)
lods
sbb
clc
bound
mov
pushf
sti
dec
out
dec
in
dec
adc
jmp
nop
cmc
xchg
icebp
les
pop
or
jle
lahf
and
adc
inc
push
sub
pop
push
cwde
mov
mov
int
adc
dec
xor
es
aam
xlat
sbb
fistp
sub
out
aaa
jno
int3
clc
and
retf
jne
ret
push
lock
xor
jl
sub
(bad)
xchg
fmul
xlat
arpl
mov
sub
mov
popf
pop
ins
sbb
xchg
fisubr
mov
fnsave
pop
xor
and
and
cmps
adc
loop
nop
mov
pop
fldcw
clc
adc
fs
xor
or
ror
xchg
daa
and
mov
push
out
dec
stos
dec
jg
imul
outs
push
out
ret
inc
rol
adc
jmp
clc
call
sbb
and
cmp
scas
mov
cdq
mov
pusha
or
(bad)
into
xchg
movs
xor
push
inc
icebp
adc
fistp
out
cmps
loop
ins
mov
pop
push
and
dec
dec
arpl
ja
add
cmp
mov
(bad)
xchg
jns
and
mov
aam
push
xchg
iret
es
pop
xchg
mov
retf
sub
scas
repnz
push
push
xchg
sub
ret
xchg
adc
ficomp
sbb
pop
int3
call
shr
movs
loopne
mov
mov
pop
jno
add
in
mov
xchg
sub
dec
icebp
inc
js
inc
out
ret
xchg
cmc
fist
jl
xor
pop
aaa
push
retf
repnz
test
outs
adc
call
cwde
aad
jmp
push
pop
add
test
jg
test
fdiv
int3
sbb
test
push
dec
cmps
pop
ret
jbe
test
push
mov
cmp
dec
pop
add
rcr
inc
movs
aas
sub
loopne
inc
cld
push
xor
mov
push
inc
xchg
mov
clc
push
push
call
cmp
push
xor
sbb
icebp
xlat
dec
fild
adc
and
sub
(bad)
dec
add
cmp
mov
xlat
out
fst
ret
jmp
lods
enter
sbb
fdivrp
push
int
cmp
jge
aad
jg
(bad)
lods
dec
(bad)
lock
retf
push
dec
int
mov
movs
ins
test
xor
cmp
lahf
or
push
add
clc
sti
sbb
test
fild
div
cmps
sahf
out
or
mov
add
mov
arpl
cmp
pop
in
frstor
ret
push
sub
dec
hlt
bts
mov
xchg
ds
xchg
js
aaa
and
sbb
dec
jbe
in
xor
ret
and
jmp
dec
xchg
fs
adc
xchg
mov
push
push
xor
iret
cmc
in
fisubr
and
stos
push
pop
pop
loopne
push
cmp
(bad)
mov
add
sub
and
adc
push
in
ficomp
cmp
je
sub
hlt
pushf
xchg
into
movs
pop
not
xor
push
push
popf
cmc
pop
and
dec
push
push
fmul
retf
pop
(bad)
jmp
inc
mov
mov
in
jae
pextrw
es
movs
rcr
dec
aas
sub
les
cmp
aaa
or
jecxz
adc
ins
retf
shl
in
out
sbb
push
movs
jge
xchg
js
mov
cmp
call
fiadd
es
mov
ins
mov
pop
adc
loop
dec
rcr
mov
fist
dec
ficom
mov
adc
cli
inc
mov
movs
dec
sar
adc
scas
dec
movs
and
adc
movs
mov
mov
test
(bad)
jmp
sbb
call
push
(bad)
je
add
call
rol
dec
mov
xchg
stc
inc
ja
cmp
mov
and
mov
aaa
sar
(bad)
movs
xor
cmp
ss
rol
xlat
vpunpckhqdq
push
lds
sub
jno
xchg
jg
stos
addr16
imul
jno
pop
sbb
push
jge
push
repnz
lahf
xchg
xlat
add
xor
pop
and
inc
add
dec
and
jecxz
div
jg
inc
and
outs
xor
out
push
ficomp
hlt
jb
xor
add
jmp
pop
call
lahf
jle
push
pop
stos
aaa
jle
mov
push
(bad)
scas
test
pop
js
(bad)
(bad)
rcr
ins
ret
sahf
jbe
inc
ja
push
mov
add
lods
aam
and
movlps
jp
aaa
push
mov
push
sbb
test
cmc
leave
mov
or
enter
sar
inc
js
adc
sbb
les
pop
aad
pop
sbb
push
aam
mov
push
mov
jns
xor
iret
fld
stos
sar
cdq
div
and
cmps
int
(bad)
inc
pop
es
mov
lds
mov
mov
mov
cmps
je
fwait
add
mov
mov
jnp
cmc
cmp
icebp
dec
sahf
jns
pop
jmp
or
ret
xor
fstp
mov
dec
adc
test
dec
add
cmp
push
pop
mov
rol
push
push
fimul
push
mov
scas
sbb
(bad)
push
retf
jnp
pop
pop
mov
ror
mov
inc
call
inc
jo
gs
cmp
in
ror
daa
sub
and
push
aad
or
(bad)
push
pop
fcmove
inc
adc
pop
test
test
call
retf
scas
in
retf
out
in
dec
out
adc
xlat
loope
jg
mov
movs
cdq
(bad)
call
pop
mov
mov
cmps
xchg
cmp
sbb
stc
add
ins
ins
mov
cmp
push
push
inc
(bad)
xor
jmp
adc
jmp
sbb
push
pop
popa
xlat
outs
clc
outs
(bad)
sti
jmp
into
out
mov
jmp
push
repz
sbb
clc
arpl
(bad)
imul
jne
jp
data16
add
or
int3
lahf
scas
cmp
lea
lods
lahf
pushf
cmp
inc
ret
pushf
lods
push
mov
mov
fmul
push
or
dec
mov
test
and
aad
in
jmp
sbb
push
ja
pop
inc
int
inc
int3
xchg
add
pop
popa
std
loop
aas
push
retf
xor
sbb
push
push
ror
lods
repz
adc
pusha
test
cmp
out
inc
imul
mov
loopne
sbb
sbb
imul
icebp
xor
jmp
outs
scas
jmp
push
lea
rcl
fsub
mov
add
and
inc
sub
mov
adc
ss
clc
sbb
lods
mov
dec
ja
sub
mov
ror
pop
cmp
ss
aaa
outs
bts
sbb
pushf
cmps
jge
mov
aad
bound
jno
pushf
fsubr
jecxz
ds
xchg
ret
call
push
sbb
jb
sub
pop
pop
rol
outs
aad
adc
aas
cs
adc
sar
add
xchg
mov
xchg
xchg
cld
add
jmp
jo
dec
mov
aas
inc
sti
cli
or
xchg
xchg
test
add
lds
or
cmps
mov
out
call
sub
push
push
xor
movs
or
dec
fmul
or
in
xchg
enter
shl
shr
or
inc
repz
nop
arpl
inc
call
push
jb
das
jecxz
sub
(bad)
push
mov
adc
call
mov
out
out
sub
mov
and
(bad)
fstp
shl
sub
(bad)
mov
push
push
das
popa
xor
mov
jge
cmc
mov
xor
jo
xlat
sahf
ret
into
cwde
add
es
popa
jl
xor
mov
cmp
mov
mul
add
jmp
sub
loopne
mov
push
mov
mov
adc
inc
push
das
inc
adc
es
push
sbb
loopne
stc
icebp
lods
dec
fdivrp
movs
jne
test
dec
xchg
out
xchg
js
jo
ins
out
cli
pop
movs
jge
je
pop
and
lock
aad
ja
add
push
ins
cmps
xchg
dec
pusha
cmc
into
mov
aaa
jmp
aaa
add
addr16
adc
inc
out
arpl
pop
mov
out
stos
arpl
(bad)
mov
addr16
ins
cdq
cmps
mov
mov
cmps
ret
outs
sbb
cmps
arpl
dec
cmps
and
add
ds
inc
retf
shr
mov
xor
adc
leave
lea
xchg
nop
add
pusha
(bad)
fbld
add
mov
add
das
lods
(bad)
or
popa
jmp
cwde
mov
mov
add
dec
js
test
xchg
adc
or
in
dec
rcl
imul
ds
mov
and
call
and
hlt
(bad)
or
jae
icebp
test
jbe
inc
xchg
test
imul
adc
into
jp
int
fiadd
imul
stc
mov
call
lahf
and
mov
xchg
push
add
push
shl
push
lock
add
pusha
int3
pop
sub
push
mov
mov
call
js
sub
hlt
adc
jne
int3
inc
inc
mov
mov
cmp
jno
pop
std
es
jae
or
scas
aas
inc
scas
adc
stc
mov
daa
sbb
and
call
in
adc
push
aaa
adc
jle
cmp
out
cwde
push
mov
sbb
push
xchg
rol
mov
jle
push
xor
pop
and
aam
fmul
and
aaa
ins
fwait
sti
xor
mov
or
push
dec
lahf
mov
inc
pusha
(bad)
pop
mov
loop
fimul
mov
xchg
mov
mov
outs
fisubr
lods
inc
inc
and
jbe
cmps
push
push
idiv
(bad)
into
mov
cmp
add
mov
jmp
push
mov
lea
jecxz
ss
scas
mov
inc
clc
adc
aaa
inc
pop
add
add
leave
clc
int3
mov
cwde
repz
repz
fnsave
lock
setle
stos
push
cmc
mov
scas
xchg
into
mov
cmp
jnp
repz
(bad)
pop
sub
xor
icebp
jmp
movs
fstp
or
lods
push
or
in
loop
jle
stc
inc
aad
(bad)
outs
popf
cmps
addr16
sar
sbb
mov
dec
in
mov
sbb
jl
hlt
das
outs
sub
xor
dec
jp
cs
into
adc
cdq
mov
ficomp
xor
cs
dec
scas
inc
cmp
leave
dec
not
mov
sahf
in
cmps
gs
sbb
sbb
enter
sar
jmp
es
mov
xchg
add
(bad)
fyl2x
sbb
(bad)
shl
push
loope
dec
fst
or
js
lea
mov
mov
sub
adc
lods
push
out
mov
xchg
mov
sahf
push
fbld
xor
inc
mov
bound
icebp
jg
mov
stc
push
sahf
push
into
pushf
fcomp
jp
pop
fstp
push
out
in
fsubr
mov
jp
xchg
adc
cmps
xchg
jmp
jle
and
outs
xor
mov
pop
cli
sti
cli
xchg
inc
icebp
leave
mov
icebp
enter
pop
add
test
pop
or
shl
(bad)
or
mov
mov
sahf
adc
mov
icebp
and
jg
fwait
and
adc
sub
repz
pop
shl
fidivr
addr16
and
or
stc
fcomp
and
mov
test
push
mov
push
jecxz
(bad)
mov
dec
(bad)
xchg
mov
sahf
ret
and
je
pop
imul
ins
push
nop
outs
jp
xchg
push
pandn
push
push
aas
test
cmp
inc
out
sub
pop
dec
or
test
xor
lods
add
sub
jp
pop
shl
inc
pop
xor
mov
push
jb
das
pop
arpl
mov
ins
jns
int3
bound
xchg
jno
jg
jle
stos
add
sbb
inc
int
mov
sub
mov
mov
push
retf
mov
and
rcr
imul
in
or
out
dec
jge
jecxz
mov
cmp
sar
xlat
shl
leave
jmp
mov
sub
pop
or
lock
cmp
dec
adc
daa
add
jle
out
and
mov
push
into
stos
in
je
jns
mov
lock
add
out
pop
ds
jp
sti
inc
push
call
mov
fadd
test
add
xor
addr16
mov
mov
lds
inc
jbe
fimul
std
fld
iret
fnstenv
popf
(bad)
test
mov
test
jmp
scas
(bad)
pusha
add
nop
aas
xor
xlat
shr
xchg
(bad)
adc
push
adc
and
je
outs
scas
icebp
stos
mov
mov
lods
ins
mov
mov
or
adc
arpl
xchg
inc
push
pusha
adc
mov
in
jg
and
data16
adc
jnp
mov
mov
in
iret
loopne
pop
xor
jp
push
push
arpl
xor
jno
jo
push
sub
call
fistp
(bad)
mov
call
pushf
in
cmc
mov
clc
sub
addr16
loopne
xor
gs
add
lea
repz
dec
mov
mov
mov
pop
add
retf
mov
add
dec
ret
out
jg
and
cmp
int3
push
cmp
into
sbb
and
push
int
push
mov
std
pmuludq
or
sub
popf
xor
mov
pop
aaa
ss
sbb
stos
fist
aad
xor
inc
div
cmps
pop
cmp
int
mov
add
cmps
cmc
and
leave
pop
dec
out
xchg
retf
sahf
mov
es
loope
cmp
mov
sbb
ins
sbb
pop
or
cmp
imul
fbld
cmp
in
js
push
or
add
mov
das
pop
cmp
(bad)
mov
sub
stc
jge
sar
call
loopne
mov
xchg
clc
icebp
push
xchg
push
js
cwde
pop
add
xlat
retf
(bad)
and
sub
dec
mov
lds
das
lahf
mov
sub
pusha
pop
loope
in
fadd
jecxz
xchg
push
or
lock
mov
inc
cli
and
fwait
push
jmp
imul
fimul
cwde
scas
hlt
scas
push
rol
dec
pop
jl
dec
jb
out
clc
xchg
mov
gs
xchg
dec
cmp
(bad)
mov
mov
imul
jns
data16
mov
cmp
push
xor
add
leave
cmp
les
pop
jo
mov
jbe
pop
(bad)
jmp
jo
int
mov
ret
mov
jle
push
and
and
and
sbb
dec
lods
repnz
inc
(bad)
in
inc
inc
(bad)
push
xor
scas
sub
or
jge
and
ret
in
aad
imul
mov
(bad)
inc
push
ror
je
inc
sbb
out
cmp
mov
rcl
cmp
fwait
push
push
fnstcw
ffreep
sbb
out
inc
dec
jmp
in
(bad)
loope
(bad)
int3
inc
add
repnz
pop
pusha
mov
into
jae
xor
cwde
(bad)
iret
add
and
or
and
loopne
push
scas
in
cmps
cmps
jl
pop
mov
in
cs
xchg
pusha
(bad)
movs
mov
sub
jmp
(bad)
rcr
mov
dec
sar
ret
pusha
imul
cmp
push
mov
and
sbb
pusha
mov
es
scas
and
mov
outs
mov
add
cld
sbb
push
cs
mov
pushf
pop
cmp
jecxz
sbb
sub
les
(bad)
lahf
js
pop
(bad)
xchg
movzx
lea
ins
jp
mov
xor
movs
cwde
push
sbb
add
jmp
jmp
fisttp
mov
adc
mov
push
add
cmps
out
std
mov
retf
cmps
or
in
pop
fwait
xchg
xchg
out
xor
cmp
inc
mov
cmp
add
add
push
fistp
mov
jl
jecxz
in
test
(bad)
pop
fidiv
aad
mov
jmp
loopne
ds
dec
mov
fist
neg
xor
pop
and
pop
mov
test
jmp
imul
and
xchg
sbb
cli
push
stos
clc
push
pop
or
pop
dec
fnsave
xchg
jnp
cmps
adc
lea
pop
push
or
push
push
sub
addr16
pop
or
loop
jne
xabort
and
stc
sbb
ja
js
loop
add
enter
dec
mov
rcr
push
loopne
rcr
cmp
mov
stc
jle
aas
movs
and
xor
or
add
cld
(bad)
(bad)
sbb
cs
add
inc
in
test
xor
push
xchg
scas
mov
add
out
sbb
jle
enter
and
stos
shr
adc
mov
jmp
fsub
fnstenv
xchg
je
xor
sub
sub
jp
bnd
pop
mov
jp
cli
leave
mov
jnp
arpl
pop
push
push
mov
loope
pop
mov
aaa
xor
test
mov
movs
cmp
cmp
ret
jg
inc
sub
or
fild
loope
pushf
fdivr
jl
cdq
fwait
xchg
into
inc
jmp
ret
cdq
daa
(bad)
(bad)
jne
pop
aas
dec
int3
inc
daa
cld
pusha
pop
cmps
sbb
data16
mov
jg
add
inc
in
mov
mov
out
in
aam
stos
aad
adc
sbb
and
retf
dec
movs
or
sbb
add
or
stos
dec
(bad)
ficomp
push
lods
cmp
idiv
in
repz
jl
and
(bad)
and
cdq
mov
rcl
sar
rcl
mov
ss
inc
jno
lods
pop
jmp
cmp
inc
out
push
adc
pusha
push
cmp
push
dec
xchg
jo
jo
jo
(bad)
jmp
lea
pusha
fld
nop
pop
call
mov
sbb
push
fadd
stc
pusha
repz
lods
cmps
imul
pop
mov
pop
ja
pop
jo
and
dec
sbb
mov
ins
jp
inc
mov
sbb
xchg
mov
fild
xchg
push
sbb
repz
sbb
mov
sub
lods
mov
add
push
mov
ins
xchg
cmp
lea
call
dec
push
int
cmp
mov
mov
faddp
fldenv
dec
pop
outs
cs
lods
mov
jge
in
mov
xor
mov
mov
cmp
sub
imul
gs
fbstp
jo
les
arpl
mov
xchg
sub
cwde
xchg
dec
es
sbb
push
cmps
test
es
sti
retf
sbb
pusha
leave
out
xchg
and
add
fwait
mov
xor
mov
in
mov
push
cmc
ret
xor
sbb
xor
jae
or
(bad)
ins
cmp
call
scas
pushf
popf
neg
test
sbb
lea
push
test
push
xor
add
mov
lea
movs
outs
mov
cmp
xchg
push
fsubr
sub
stos
mov
sub
pop
xor
jg
mov
sbb
call
jp
add
into
jns
mov
cmc
push
sub
ins
pop
data16
dec
cs
jnp
cld
data16
lods
cmp
mov
mov
repnz
mov
iret
aam
(bad)
mov
inc
adc
(bad)
neg
mov
(bad)
movs
mov
push
cmc
hlt
push
das
ss
outs
pop
mov
(bad)
iret
pop
add
mov
and
add
sahf
retf
mov
call
pop
pop
scas
arpl
imul
test
jo
jl
out
mov
out
mov
data16
pusha
popf
mov
xor
jge
mov
(bad)
mov
jp
xchg
xor
pminub
push
inc
test
pushf
mov
sar
xchg
loop
cmp
pop
cmp
and
jo
cmps
inc
push
fimul
dec
pushf
cmps
push
clc
sbb
inc
pop
imul
inc
hlt
adc
mov
mov
mov
or
js
ffreep
mov
ins
lock
rol
(bad)
cli
call
inc
jmp
bound
jl
les
pop
jge
lds
push
mov
dec
add
rcr
ins
push
scas
mov
or
adc
mov
add
dec
jmp
repz
loopne
scas
adc
dec
lds
lock
mov
jmp
inc
xchg
out
inc
inc
ss
xchg
loopne
fwait
xor
pop
add
mov
dec
xlat
sbb
push
call
bound
out
fistp
dec
addr16
jp
sub
push
lds
js
aaa
dec
outs
mov
jo
cmp
jmp
aas
retf
loopne
mov
loopne
mov
pop
add
mov
pop
out
sbb
ins
lahf
and
aas
test
shl
das
xchg
jecxz
jne
and
ret
or
push
js
in
dec
or
fwait
lods
gs
adc
mov
sbb
push
fild
push
lds
push
mov
(bad)
fsubr
(bad)
mov
ss
ds
push
stos
push
les
mov
pushf
pop
ins
add
dec
xchg
mov
jnp
push
les
std
mov
pop
xor
imul
repz
cs
imul
jmp
fwait
and
xchg
in
scas
or
and
addr16
adc
mov
es
cmp
bound
or
push
lahf
add
jns
iret
daa
mov
cmps
cdq
mov
call
ror
jbe
mov
jo
shl
dec
cvtpi2ps
les
mov
hlt
push
adc
cld
aaa
pop
cwde
xchg
out
scas
lahf
mov
cmp
mov
retf
mov
or
inc
imul
cmp
xchg
sti
daa
xchg
fistp
aas
jl
xor
sti
cmps
jge
xor
scas
mov
adc
and
aad
xor
cmps
aas
and
xchg
ds
xchg
push
push
les
or
call
in
mov
dec
cmp
fdivr
push
scas
dec
mov
dec
aad
pop
aaa
mov
rcl
adc
scas
mov
aas
icebp
mov
imul
cwde
fcomip
sub
out
push
push
mov
cmp
and
imul
push
xor
jbe
jae
ins
push
mov
popa
ss
loop
sub
arpl
cwde
es
cld
scas
xchg
in
mov
stc
or
leave
dec
inc
fist
fisttp
sub
scas
inc
or
lds
adc
or
jo
aaa
mov
repnz
clc
xchg
push
cdq
retf
jae
int3
cmp
fistp
not
jns
lea
hlt
push
dec
jmp
sysexit
mul
push
sbb
adc
jl
inc
xor
iret
and
or
retf
test
inc
fdiv
scas
rcl
fs
push
cmc
lods
outs
mov
and
or
mov
and
push
popa
jne
push
je
in
add
mov
mov
rcl
aam
xor
mov
push
sbb
imul
lods
jnp
stos
mov
test
cmp
arpl
adc
and
ficomp
sbb
push
mov
mov
outs
and
inc
push
movs
jmp
cs
push
xor
mov
test
test
jl
mov
dec
popa
cmp
in
dec
jmp
iret
push
push
enter
mov
jg
fcom
and
pop
(bad)
out
cld
pop
xor
sbb
jmp
shl
(bad)
test
pop
shr
cmps
in
cmc
xchg
retf
into
cmps
push
arpl
mov
adc
test
xchg
cmp
cli
mov
cld
jecxz
pop
or
and
push
pushf
inc
pop
or
sbb
stos
retf
rol
sub
lock
int3
mov
hlt
dec
push
dec
push
cli
jae
lods
arpl
push
or
movs
repz
shr
inc
rcl
jle
add
cmps
push
cmp
xchg
mov
out
jb
shl
xor
(bad)
mov
pushf
out
nop
ja
cs
push
nop
(bad)
xchg
test
and
ins
jno
fwait
rcl
jg
dec
adc
sub
outs
cdq
jns
cdq
jp
adc
test
sub
jnp
xor
retf
xchg
scas
dec
test
loop
ja
xor
stc
ins
add
mov
xor
mov
cmp
xor
cmps
mov
daa
mov
and
mov
pop
dec
movs
stos
pop
push
test
aas
mov
jl
pushf
mov
fadd
lods
xor
mov
fadd
mov
jae
sub
cld
lods
stos
mov
outs
add
mov
xlat
sbb
stos
mov
(bad)
and
lahf
push
mov
pop
add
cli
test
rcl
ret
mov
pop
int3
inc
mov
test
aas
(bad)
sub
xchg
test
imul
popfw
std
in
or
dec
xlat
sbb
outs
fadd
mov
push
and
addr16
outs
sbb
enter
pop
jmp
mov
pop
inc
gs
call
inc
mov
push
adc
popf
neg
lods
push
fisubr
mov
dec
sbb
mov
idiv
stos
das
cmp
jns
ret
popa
xchg
pushf
cmp
jecxz
adc
xor
sbb
cwde
push
jns
jl
ror
adc
in
into
cmp
push
call
or
gs
sub
adc
jp
stc
push
dec
call
(bad)
mov
outs
lds
rcl
aam
fimul
add
ret
mov
mov
pop
rol
mov
mov
pop
jne
rcr
and
dec
ins
push
fdivr
xchg
inc
aas
dec
fwait
or
pop
sub
add
xchg
ds
push
dec
adc
mov
icebp
retf
stc
fs
ret
cmp
loop
retf
lea
push
outs
mov
mov
arpl
mov
mov
test
shl
and
imul
xor
call
in
mov
loopne
sub
mov
call
adc
sub
sar
fwait
pushf
hlt
jle
hlt
dec
or
mov
fstp
mov
adc
jb
(bad)
cld
sub
test
int3
js
fwait
ret
adc
xor
jno
dec
and
and
or
out
(bad)
jmp
jge
sub
je
jno
mov
into
adc
arpl
out
xchg
cli
mov
stc
pop
mov
adc
sbb
shl
jbe
dec
dec
cmp
stc
and
pop
sbb
push
mov
shr
cli
das
pop
sub
sbb
lods
test
pop
test
mov
in
adc
xlat
inc
pop
sub
pop
loop
out
inc
mov
and
push
sar
cmc
xor
pop
punpckhwd
idiv
adc
ins
xchg
inc
inc
sbb
js
lock
add
pop
or
mov
rcl
mov
movs
jns
push
(bad)
aaa
lahf
inc
ins
mov
mov
push
gs
out
and
jo
dec
or
xchg
mov
and
fs
adc
jle
fcmovb
cmc
das
pop
mov
scas
js
ret
pop
aas
ss
pop
push
(bad)
dec
xlat
and
add
iret
xchg
xor
aad
push
mov
ja
xor
jb
jmp
mov
(bad)
mov
out
inc
aas
inc
aam
pop
not
out
inc
jecxz
mov
mov
sbb
pop
dec
and
test
test
iret
clc
pop
jmp
jmp
scas
shl
cdq
lahf
in
out
or
cmp
test
retf
or
push
shr
js
jb
cmp
inc
fwait
mov
xchg
sbb
sbb
data16
pop
test
dec
sub
add
in
pushf
mov
js
pop
je
das
xor
(bad)
out
je
shl
aaa
mov
leave
fidivr
pop
cdq
push
mov
xchg
or
hlt
(bad)
sbb
ja
xchg
mov
push
ins
add
(bad)
push
mov
ret
and
repz
cld
out
and
call
ins
std
(bad)
scas
mov
outs
jo
xchg
inc
adc
fprem1
lahf
xor
add
clc
sbb
imul
rol
out
jge
or
push
outs
jne
inc
test
sti
retf
inc
xor
stos
push
pop
ror
cld
lds
push
mov
adc
jb
sub
pusha
jle
or
je
mov
lock
popa
cmp
jmp
sahf
adc
push
ret
and
(bad)
fnstcw
and
daa
jnp
dec
sbb
cmp
test
mov
out
ins
dec
mov
loopne
pop
(bad)
clc
in
loope
add
push
outs
mov
stc
repz
ret
arpl
sar
add
fnstenv
push
stos
xchg
mov
push
dec
sub
push
fld
adc
mov
call
xor
retf
fst
in
setnp
jp
mov
pop
or
outs
xchg
sbb
ret
cmp
xchg
pop
dec
sahf
shr
sbb
inc
sbb
adc
jmp
and
dec
sub
add
ins
mov
iret
in
je
push
cli
gs
cmc
repz
nop
movs
arpl
pop
or
ficomp
shr
bound
push
cmp
daa
or
ja
xchg
aad
enter
test
pop
cmc
mov
es
mov
ror
sub
imul
jbe
inc
cmp
dec
(bad)
out
cmp
popa
mov
add
data16
mov
gs
repnz
adc
sahf
ds
adc
test
inc
and
jo
mov
stos
dec
adc
test
repnz
lods
(bad)
xchg
fs
sbb
sub
ds
inc
push
push
cmp
(bad)
mov
add
mov
ret
or
fild
push
mov
loopne
retf
push
stos
mov
out
mov
fsubr
inc
hlt
ins
imul
outs
xor
push
add
imul
bswap
cmp
shl
push
mov
push
xor
jle
imul
jmp
dec
cmp
(bad)
mov
sub
jl
clc
adc
jno
lahf
ror
(bad)
fdiv
push
lgs
(bad)
ffree
mov
ja
shl
adc
ficom
and
xlat
fist
add
xchg
inc
mov
aad
js
xchg
sub
mov
addr16
push
push
retf
iret
inc
ffreep
xchg
loop
xchg
xlat
lods
push
pop
cwde
fld
in
and
pop
cmc
add
cmp
or
cmps
movnti
xchg
jge
es
push
sub
and
ret
cmp
test
pop
mov
and
dec
mov
js
call
shr
in
adc
xchg
sbb
hlt
fs
cmps
iret
(bad)
mov
xor
movs
imul
aam
pop
test
pop
add
jmp
mov
jno
push
push
cmp
and
mov
ror
into
push
mov
inc
pop
not
dec
pop
mov
push
inc
push
repz
aas
jns
cld
add
in
or
cmp
(bad)
(bad)
inc
ret
(bad)
pop
xor
je
call
pop
mov
push
cmps
xchg
jb
dec
mov
lahf
outs
je
scas
pusha
gs
aas
jle
add
mov
inc
xlat
dec
xchg
lea
data16
iret
sbb
stc
or
(bad)
xchg
cli
pop
repnz
or
retf
sar
mov
fs
jbe
sub
jg
rcl
fs
mov
mov
sub
jecxz
mov
and
call
and
pop
cvtpi2ps
enter
sub
scas
mov
pushf
out
cmp
int
test
jmp
out
fsubp
and
dec
in
mov
out
push
push
clc
out
sbb
push
or
pop
rcr
dec
pop
dec
pop
ficomp
mov
iret
xchg
jecxz
imul
mov
mov
loope
push
mov
ret
push
jl
cmp
(bad)
icebp
jge
pop
cwde
cmc
xor
or
in
and
les
xor
add
sar
(bad)
shl
(bad)
push
les
dec
sti
or
aaa
out
or
mov
lahf
mov
ret
ss
jbe
arpl
and
gs
int
cwde
xchg
jmp
fldcw
clc
outs
test
mov
push
fldenv
inc
ret
loope
enter
cmp
xlat
jle
push
cmc
stos
jno
mov
not
aas
jmp
lods
jl
test
mov
mul
push
lods
mov
cdq
or
dec
(bad)
push
mov
push
mov
push
mov
cdq
adc
sar
mov
xor
dec
movs
sub
xor
in
push
mov
xchg
gs
cmp
repz
sahf
std
rcl
ret
add
ins
inc
pop
mov
daa
dec
jmp
iret
or
es
popf
mov
popf
push
sbb
movs
sbb
pop
pop
fmul
xor
lds
xchg
xlat
fsub
mov
dec
iret
pop
call
popf
inc
sbb
sub
mov
fs
mov
mov
xor
scas
xchg
in
enter
loopne
fdiv
sbb
bnd
jae
mov
into
dec
gs
cmp
retf
or
mov
daa
sub
or
call
or
loop
push
in
inc
enter
push
pop
xor
test
mov
(bad)
imul
inc
test
(bad)
xchg
pushf
call
pop
mov
push
clc
add
cmp
loopne
fsub
sub
mov
xchg
cdq
das
add
fisub
dec
jne
scas
jae
mov
pop
enter
and
pop
sbb
push
and
stos
inc
push
cmp
in
mov
in
inc
pop
pop
loop
fld
inc
jge
xor
pop
xchg
ret
loopne
cmp
cmps
add
dec
nop
fnstcw
dec
xor
into
xor
sub
cli
or
enter
dec
dec
pop
mov
push
fbld
lods
jmp
lods
pop
pop
mov
clc
xor
pop
hlt
stc
(bad)
fiadd
test
test
movs
sbb
fsubr
pop
mov
sbb
add
add
xchg
das
ins
dec
push
arpl
jbe
call
out
add
lods
push
ret
jnp
das
xlat
aas
movs
aaa
or
mov
push
ins
shr
xchg
leave
jl
and
leave
fstp
sbb
imul
repz
push
mov
mov
inc
pop
jl
push
into
iret
scas
aaa
fdiv
jmp
arpl
add
mov
ins
adc
mov
ss
xchg
inc
and
sbb
xchg
mov
sub
xor
add
mov
stos
add
in
dec
lea
aam
dec
into
push
xchg
mov
sti
loop
popf
adc
outs
ffree
into
pop
pop
mov
and
js
lods
xchg
sub
fst
add
xchg
movs
mov
push
mov
inc
dec
push
fldcw
fbstp
xor
mov
cwde
sbb
jmp
dec
inc
in
push
pop
push
xor
xor
retf
das
cmp
and
mov
scas
ret
out
pop
sub
cmps
mov
push
inc
mov
jecxz
mov
add
pushf
mov
dec
inc
popf
imul
iret
fimul
mov
cmp
stos
mov
jb
loope
and
xor
mov
pop
mov
addr16
call
iret
(bad)
sbb
pusha
outs
lds
inc
sbb
das
mov
sub
loop
adc
push
jbe
xchg
xor
into
jmp
mov
int3
ficom
dec
pop
xchg
retf
(bad)
dec
jno
addr16
retf
lods
ja
and
(bad)
jmp
mov
mov
add
(bad)
dec
xlat
sub
fdiv
popa
add
enter
loope
inc
and
addr16
push
sbb
xchg
addr16
mov
mov
movs
inc
icebp
ret
mov
fldlg2
mov
in
in
leave
fwait
scas
cwde
mov
aad
pop
inc
mov
mov
arpl
pop
jge
pop
add
aad
xchg
mov
jge
xor
lahf
mov
pushf
xor
and
mov
and
das
push
pop
(bad)
dec
sub
das
pop
ficom
cld
cwde
push
aaa
mov
jmp
xlat
jecxz
leave
outs
push
arpl
fldcw
add
(bad)
fs
xchg
fist
sbb
gs
int
mov
ins
push
mov
dec
scas
xor
mov
inc
add
mov
sahf
xchg
adc
xchg
ss
xor
enter
lock
loope
mul
fsincos
repz
das
mov
pushf
out
and
test
mov
ret
stos
jmp
and
fistp
sti
xor
or
push
mov
jb
gs
into
mov
and
mov
cli
and
pop
mov
dec
retf
sub
lea
mov
add
mov
xor
mov
or
je
cmp
outs
cmp
ja
push
sub
add
adc
jbe
jg
push
test
dec
test
jl
test
lea
push
jmp
mov
mov
xor
mov
into
jle
out
or
in
push
xor
sbb
mov
std
fxch
cmp
and
popf
mov
scas
push
inc
xchg
add
add
cmovl
test
inc
jnp
jnp
mov
daa
sub
add
push
mov
inc
mov
sub
pop
cs
and
into
add
sbb
xchg
icebp
xchg
push
xor
inc
cmps
xchg
mov
dec
xchg
mov
and
add
arpl
pop
pop
out
push
std
pop
and
xchg
pop
xchg
inc
movs
lock
mov
inc
ror
pop
sti
mov
ror
(bad)
cmp
cli
fadd
popa
xchg
xor
ret
ret
scas
pop
hlt
lods
cdq
(bad)
in
sub
jo
xor
mov
push
push
sti
sub
pusha
fisttp
mov
jle
fldcw
aas
xchg
pop
call
jge
push
sbb
xchg
inc
sbb
sub
fst
xchg
xchg
mov
cld
scas
adc
add
push
xchg
adc
sub
test
clc
mov
cwde
jl
mov
addr16
push
fiadd
xlat
xor
ja
xor
pop
pop
iret
and
fs
or
(bad)
out
adc
dec
pop
test
push
push
or
sbb
cwde
xor
xchg
pop
jne
test
or
pushf
test
pop
pushf
cmps
enter
xchg
xchg
pop
mov
mov
jg
mov
test
daa
cmp
(bad)
imul
movs
mov
lds
mov
loop
jp
fistp
pop
into
dec
in
and
mov
add
js
jg
loopne
mov
inc
data16
lahf
jl
hlt
pop
fidiv
fdiv
pop
(bad)
xchg
pop
cwde
or
(bad)
jno
cmp
ret
scas
sbb
stc
or
pop
mov
bound
and
add
sub
test
sahf
xchg
movs
mov
sub
and
arpl
mov
pushf
dec
jmp
cmp
push
aad
loopne
jecxz
sbb
movs
cmp
jmp
in
mov
xchg
test
and
stos
sbb
dec
fiadd
mov
test
mov
pusha
call
dec
pop
icebp
lock
repz
test
mov
add
sbb
out
cmp
cmp
loopne
xchg
cmps
aaa
mov
sub
adc
add
mov
das
fptan
push
mov
(bad)
rol
mov
mov
sbb
hlt
mov
pusha
test
inc
xchg
fstp
addr16
outs
je
cmp
cdq
xor
dec
add
sbb
dec
mov
lock
cmp
jns
inc
loope
xor
mov
in
ret
xor
and
sbb
call
and
or
cli
cmp
mov
ret
outs
pop
adc
fmul
cld
jmp
cld
pop
je
(bad)
mov
in
adc
sub
sub
jb
or
pop
and
mov
mov
div
mov
pop
ja
shr
out
and
dec
add
iret
ss
mov
and
in
push
popa
imul
ror
js
(bad)
popa
cdq
inc
dec
cld
addr16
addr16
mov
int3
(bad)
jl
fst
repnz
jge
mov
or
mov
in
pop
outs
call
shl
add
xchg
pop
inc
fs
les
cs
cdq
aaa
test
dec
push
add
inc
mov
push
jmp
pop
cli
dec
je
mov
ins
jecxz
into
lea
daa
mov
js
xchg
sbb
jns
jb
(bad)
retf
xchg
test
test
pop
push
inc
mov
out
jae
jl
xchg
rol
dec
inc
push
mov
push
sbb
pop
add
cmp
jnp
(bad)
lods
inc
es
adc
or
pop
ins
pop
mov
lea
mov
fcom
or
xor
cmp
jnp
jbe
adc
mov
or
sub
xchg
ret
xor
pop
ret
cmp
(bad)
imul
movs
shl
es
or
or
daa
or
and
or
loop
cmp
inc
sbb
pusha
xchg
pop
adc
sub
mov
mov
test
loope
mov
jnp
leave
scas
push
sub
lahf
test
mov
ins
xor
inc
rcr
stos
loopne
arpl
push
aam
js
mov
dec
jp
jg
inc
retf
push
iret
lock
scas
lds
or
fsubr
xor
das
push
sub
inc
inc
mov
fadd
aaa
cmc
test
mov
loop
jl
inc
sbb
shl
sub
and
in
and
int3
inc
ja
repz
fiadd
pop
loop
movs
test
outs
mul
jecxz
jg
es
jg
fdivrp
mov
push
lea
inc
and
jmp
sub
(bad)
push
jo
test
jg
mov
les
and
cli
or
mov
fprem1
mov
nop
cmp
push
push
push
inc
mov
pop
icebp
sub
push
fnstenv
(bad)
rcl
cmp
(bad)
movs
repz
push
jg
js
dec
push
sahf
jg
outs
rcr
cmc
aas
add
push
iret
and
sub
outs
adc
pop
jne
mov
fnstcw
sub
push
rcl
push
aad
jb
and
sbb
push
repnz
add
ins
and
and
and
add
adc
icebp
mov
xchg
push
cmp
mov
ret
test
mov
mov
jno
push
jmp
je
pop
mov
jle
fs
out
or
dec
fwait
sbb
call
popf
or
jle
dec
inc
(bad)
sub
jnp
inc
push
(bad)
push
lahf
xor
test
sahf
dec
xchg
popf
and
mov
or
jge
lds
sbb
aas
jg
adc
inc
div
pop
scas
frstor
xchg
(bad)
ja
cmp
popa
adc
bound
sahf
jl
sub
js
mov
pop
jo
adc
cli
mov
test
scas
push
inc
and
jle
cmp
repnz
fild
sbb
add
mov
clc
xor
aad
jl
nop
or
and
sbb
cmc
and
add
hlt
clc
lock
sub
sub
cmp
dec
pop
mov
jno
jmp
rcl
xor
push
stos
xchg
xor
sub
sar
push
mov
xchg
pop
mov
jp
cli
icebp
jne
cwde
xchg
push
pop
inc
jno
mov
sub
adc
into
sub
mov
aam
jg
(bad)
imul
ja
hlt
retf
pop
add
es
imul
dec
xor
xchg
bound
es
repz
std
aas
mov
retf
ins
ret
jmp
loopne
sbb
sbb
jg
push
cmp
jg
data16
inc
ret
and
daa
and
or
out
(bad)
or
and
js
cwde
dec
pop
nop
ds
sahf
(bad)
out
xor
out
call
loop
xchg
pusha
pop
jp
pushf
adc
push
pop
pusha
xor
xchg
jl
mov
xchg
shl
or
jmp
in
xlat
sar
xchg
fisub
cmp
pop
mov
jb
fidiv
cmp
mov
(bad)
stos
push
xlat
or
and
addr16
popa
cli
adc
cmp
in
fdiv
loop
out
cmps
setp
jle
mov
shr
add
or
lods
fmul
jmp
fbld
cmp
fcomp
sub
mov
clc
(bad)
scas
dec
mov
movs
stc
push
adc
leave
in
pop
cmp
cld
js
pusha
adc
popf
loop
lods
rcr
sub
cdq
ret
sbb
int
mov
push
and
out
std
xor
mov
push
pop
push
loop
fcomip
sub
xor
adc
sub
movs
fdiv
cli
jb
pop
sub
rcr
and
jae
mov
inc
movs
popa
rcr
jl
inc
test
ds
mul
aas
test
cmc
mov
aam
pushf
cld
dec
xchg
sub
jnp
aad
jns
in
imul
add
out
fst
mov
ficom
leave
call
cdq
aad
cdq
or
pop
call
dec
jle
lds
cdq
mov
and
in
mov
inc
cmp
mov
je
popf
or
add
fiadd
dec
ror
loop
les
xor
push
xor
push
shl
mov
push
jns
movs
pop
inc
lahf
cmp
jno
dec
mov
mov
and
mov
test
push
imul
jmp
icebp
mov
inc
imul
and
xchg
fld
pushf
sbb
test
shr
inc
ffreep
and
xlat
add
jmp
ret
add
lods
push
retf
mov
leave
repz
outs
clc
jle
mov
movs
push
aad
adc
xor
scas
addr16
(bad)
and
out
rol
and
in
das
lds
xor
fistp
rcl
es
lds
mov
adc
xor
test
jae
stc
dec
cmc
jbe
add
mov
ret
call
popa
dec
xchg
stc
lds
mov
neg
add
stos
mov
test
jg
mov
cmps
dec
push
in
scas
mov
or
lods
mul
addr16
adc
push
ins
jl
sbb
jg
cmp
and
fld
jo
mov
dec
inc
push
adc
add
shr
dec
mov
xchg
add
outs
imul
pop
xlat
mov
dec
push
add
ja
mov
adc
popf
sbb
pop
cmp
dec
xor
std
cdq
mov
mov
sbb
movs
inc
cmps
in
inc
jmp
pop
dec
sub
inc
jle
and
in
jno
(bad)
out
or
scas
pop
retf
cmps
push
out
push
loope
mov
xchg
mov
xchg
setl
pop
sbb
bound
adc
data16
mov
cmc
jnp
or
or
sub
add
pop
shr
movs
rol
int
and
add
fld
sbb
repnz
xor
retf
push
retf
mov
mov
add
fidiv
mul
adc
dec
xchg
(bad)
in
jl
ins
mov
xor
push
loopne
retf
gs
dec
pop
test
neg
mov
add
sbb
fdivr
(bad)
jae
ret
jne
xor
adc
jp
retf
and
scas
push
sbb
mov
std
mov
in
and
shl
sbb
fdivr
sti
sbb
mov
les
enter
inc
xchg
and
cmp
(bad)
xchg
inc
push
aas
jge
mov
jle
mov
xor
inc
xchg
mov
mov
mov
and
mov
push
je
cmp
mov
sbb
xchg
sub
fist
or
dec
add
push
dec
iret
pop
into
aas
cmc
dec
sbb
push
xchg
mov
aad
(bad)
xchg
inc
and
in
icebp
mov
xchg
out
(bad)
ror
test
adc
out
xchg
mov
into
scas
les
retf
data16
dec
mov
inc
nop
mov
mov
xor
jo
xor
mov
add
in
sbb
call
(bad)
cmp
retf
or
add
mov
or
inc
mov
mov
daa
pop
and
(bad)
(bad)
fstp
cmp
and
jp
lahf
ss
add
mov
adc
and
clc
mov
mov
out
stos
xchg
xlat
sahf
bound
and
cld
or
dec
xchg
pop
(bad)
adc
out
sbb
add
rcl
pop
xchg
cwde
je
hlt
rol
data16
or
sub
stos
nop
cwde
mov
dec
loope
test
xchg
sbb
aam
xchg
add
(bad)
hlt
or
cwde
call
mov
push
mov
out
mov
sub
daa
pop
xchg
out
adc
jnp
popf
xor
adc
push
aad
mov
add
pop
mov
pop
bound
ret
sub
jge
and
adc
mov
into
addr16
adc
repz
in
retf
push
mov
cmp
mov
data16
and
push
iret
int
pop
pop
ins
test
cmp
test
xchg
lods
or
stos
mov
add
aam
cmc
out
sub
push
cli
xor
xor
je
mov
sub
js
dec
mov
xchg
jp
aam
xor
or
sbb
cmp
gs
fwait
inc
jne
inc
ss
xchg
rol
popf
fist
repnz
xchg
mov
imul
enter
xchg
test
push
iret
shr
xchg
cmp
ror
mov
sbb
jb
cmp
fmul
data16
pop
retf
pop
or
add
sub
jae
push
push
inc
or
mov
push
sub
xchg
inc
mov
shl
jmp
inc
ret
inc
mov
inc
jae
inc
cmps
xor
pop
jbe
and
jne
(bad)
(bad)
cmps
xchg
outs
sbb
inc
sbb
or
cld
mov
out
pop
fbld
enter
jmp
sbb
adc
adc
jmp
sub
push
adc
mov
pop
call
dec
scas
adc
sahf
das
mov
scas
and
dec
mov
cmp
inc
sbb
out
or
push
clc
clc
fdivr
xchg
mov
lods
mov
sub
jl
mov
movs
jp
dec
mov
push
int3
fbstp
sbb
xchg
sub
test
cmp
fadd
fstp
sar
rol
adc
ins
or
add
pop
lea
inc
xchg
cmps
push
cmc
mov
fisttp
push
xchg
lahf
xchg
out
adc
pop
and
or
jne
xchg
neg
pop
imul
cmps
sub
addr16
sub
test
sbb
dec
cwde
inc
and
mov
aam
mov
(bad)
leave
iret
enter
jnp
rcr
mov
imul
xchg
xor
int3
cmps
aaa
pop
pop
and
adc
jns
jns
push
sub
jp
mov
and
jl
xor
loop
mov
mov
je
mov
adc
push
mov
xchg
push
mov
xor
or
sub
es
out
clc
rcl
imul
add
ja
imul
inc
mov
data16
cmps
repnz
out
imul
mov
ret
mov
popf
and
fwait
pop
dec
int3
ss
push
call
mov
cmp
pushf
les
mov
add
dec
movs
fs
sbb
add
push
pusha
add
jp
call
out
inc
test
(bad)
push
jo
push
add
pop
jmp
enter
div
inc
hlt
shl
xchg
mov
iret
jo
out
sbb
pop
sbb
popa
cmc
popa
lea
cdq
fld
jl
pop
(bad)
ret
call
ror
sub
mov
mov
and
push
data16
sub
je
and
test
jp
jp
and
cmps
loope
inc
sub
mov
jmp
fstp
leave
nop
mov
jae
inc
sbb
mov
xchg
addr16
mov
cmp
mov
(bad)
lock
or
ror
jno
ret
out
cmp
jecxz
lock
outs
es
jl
ret
clc
stos
xchg
dec
mov
dec
push
shr
jmp
movs
fnstsw
dec
dec
fistp
pop
mov
sub
xchg
(bad)
or
jbe
dec
push
cmp
inc
and
mov
aaa
jge
mov
je
sbb
out
xchg
les
mov
mov
cmp
inc
inc
push
mov
sub
hlt
or
nop
dec
jle
idiv
pop
test
cmp
mov
inc
push
inc
lds
outs
cmps
pop
mov
sub
mov
lods
push
fidivr
(bad)
or
xchg
sbb
sub
rcl
outs
ret
or
js
jle
lods
xchg
push
xor
sub
push
movs
inc
lock
push
add
out
dec
retf
pop
jb
arpl
pop
mov
fwait
lock
or
mov
inc
cmp
cld
cmps
pop
ins
mov
ss
je
in
xor
std
int
jmp
sbb
push
test
ss
xchg
pop
xlat
adc
pop
push
dec
ins
mov
adc
push
test
outs
xchg
and
push
rol
dec
arpl
mov
add
cmc
adc
add
rol
outs
stos
rcr
adc
xor
fidivr
adc
ss
mov
out
jmp
dec
jnp
ja
rcr
push
(bad)
add
sub
add
popf
inc
das
pop
and
popa
ret
lods
mov
cli
retf
dec
mov
xor
outs
stos
xchg
push
xchg
jae
dec
xchg
pop
mov
sub
pusha
adc
or
neg
add
mov
arpl
or
cmps
in
xor
(bad)
in
int
jne
cmps
pop
test
dec
sbb
mov
mov
or
test
and
jbe
cmp
inc
inc
ss
out
cmp
sbb
leave
ror
sbb
mov
imul
(bad)
arpl
cld
xacquire
xchg
and
cmc
cmp
cmp
stos
(bad)
cmp
ror
jae
mov
movs
xchg
sbb
mov
inc
ins
pop
pop
adc
loop
hlt
fsubr
xchg
(bad)
cmp
add
pop
push
arpl
push
mov
pop
adc
adc
push
adc
in
aad
sar
mov
and
xchg
leave
ret
push
test
outs
sub
imul
or
ss
in
repnz
mov
test
scas
out
adc
fld
scas
pop
(bad)
jmp
jno
cmp
aad
outs
jno
clc
sbb
call
call
inc
retf
popf
cli
loop
jecxz
xor
aaa
sbb
daa
cmp
in
lahf
sar
push
dec
mov
stc
xchg
fbstp
inc
inc
mov
sub
dec
or
(bad)
cs
fs
lahf
dec
pop
xchg
mov
loopne
cld
dec
dec
mov
jmp
adc
(bad)
fcomp
lods
(bad)
ja
int3
dec
push
add
dec
or
cdq
pop
(bad)
adc
xor
jmp
sub
(bad)
js
in
ror
inc
jne
(bad)
iret
dec
inc
sar
and
or
xor
push
ss
test
mov
mov
ins
xor
cdq
xchg
stos
pop
jb
data16
stos
jl
outs
pop
mov
loope
inc
rol
test
xlat
adc
xchg
mov
dec
bound
in
xchg
dec
and
(bad)
mov
jae
shl
mov
sbb
fldcw
pop
(bad)
pushf
sub
ror
push
sub
mov
xor
mov
retf
ins
push
mov
pop
jmp
stos
push
jae
fimul
out
adc
push
jo
imul
jl
push
pop
sti
sub
fild
jp
loopne
and
lea
sahf
jae
out
sub
push
test
xor
xchg
push
or
add
push
dec
shl
retf
repnz
clc
call
push
clc
xor
push
in
inc
enter
push
adc
or
jae
dec
cmp
mov
nop
mov
(bad)
aam
mov
pushf
dec
movs
push
or
pop
push
cmp
les
in
mov
es
out
ins
dec
loop
adc
ret
ret
daa
out
les
mov
mov
fs
or
mov
lock
test
adc
cmp
scas
ficom
and
in
dec
cmps
jbe
xchg
add
mov
sbb
imul
(bad)
into
mov
cwde
adc
sbb
jmp
js
xchg
mov
xor
jmp
xor
icebp
hlt
mov
add
pop
push
into
dec
sbb
add
sub
dec
fdivr
fisub
cmp
add
in
div
mov
push
sub
push
jmp
mov
popf
sbb
dec
into
push
dec
dec
jbe
or
loopne
mov
pop
mov
mov
ffree
cwde
sbb
jo
and
cmp
push
pop
push
pop
ret
pop
das
std
enter
add
mov
mov
rol
xchg
les
pop
mov
lahf
dec
aas
inc
jne
jle
mov
out
cli
mov
dec
out
adc
xor
jp
adc
cdq
cli
jmp
ja
xchg
cli
inc
lea
enter
pop
cmp
enter
jge
adc
mov
mov
mov
out
lea
aaa
mov
retf
(bad)
shr
jmp
retf
xor
add
clc
rcr
and
or
or
not
cld
mov
call
sub
and
dec
add
xor
repnz
je
pop
xor
jae
dec
gs
mov
pop
dec
movs
fistp
rcl
pop
adc
push
sub
sub
rcl
rol
inc
scas
cmp
fsub
fs
or
mov
dec
mul
ja
popa
jbe
xor
dec
mov
idiv
imul
adc
and
aam
call
xlat
xchg
(bad)
cmps
shr
or
and
adc
pushf
jb
jle
pop
or
add
jno
dec
or
mov
dec
sar
mov
fmul
jg
xchg
mov
xchg
xchg
mov
ins
inc
dec
add
lds
hlt
or
jecxz
inc
mov
sub
pusha
or
mov
push
frstor
or
sub
mov
hlt
sub
inc
aam
aad
lock
test
sbb
add
sbb
fucom
aas
dec
rcl
xor
inc
mov
mov
inc
arpl
jno
jg
xchg
addr16
xor
arpl
scas
lea
adc
in
and
xchg
inc
jmp
push
xchg
stos
jge
lods
pop
(bad)
sub
js
pop
lods
pop
ins
mov
add
out
or
pop
nop
cmp
ret
mov
fst
popf
push
push
jnp
xor
call
add
cmp
std
sub
add
xchg
cmc
jbe
(bad)
mov
and
jne
mov
xor
mov
jg
fdiv
jo
ret
and
xor
or
cmp
(bad)
fst
pop
repnz
push
adc
and
mov
push
ds
ret
pop
fcom
scas
repz
jne
jmp
and
pop
int3
adc
inc
inc
hlt
xchg
jmp
xor
add
mov
xchg
sahf
retf
or
xchg
jle
(bad)
inc
out
mov
dec
rol
or
jo
inc
repnz
xor
sub
int
stc
sbb
and
and
adc
es
clc
dec
daa
jbe
and
icebp
or
int3
rcr
enter
pop
out
scas
push
and
jne
mov
push
call
jmp
hlt
hlt
mov
xlat
cmc
mov
cmp
inc
jmp
aas
in
sbb
inc
jp
(bad)
xlat
sbb
shl
and
(bad)
inc
ret
pop
iret
sub
add
test
add
js
imul
call
lahf
fadd
mov
jb
sub
mov
cmc
cmp
and
(bad)
lods
lods
adc
call
lods
lea
sbb
push
push
pop
cld
sbb
cld
jno
xchg
shr
and
mov
inc
push
cdq
loopne
mov
mov
cmc
pusha
outs
std
mov
in
pop
ret
xlat
stos
jg
icebp
(bad)
jno
pusha
inc
push
fwait
cmp
imul
inc
fs
xor
pop
cmp
lods
sub
pop
push
das
sub
dec
ja
and
mov
mov
inc
test
mov
hlt
or
sti
xchg
repz
mov
mov
mov
in
sar
enter
add
jb
or
nop
adc
adc
je
pop
and
xchg
mov
adc
data16
xchg
(bad)
loopne
shl
pop
dec
pop
popf
mov
std
xor
int
cs
push
movs
jg
cli
repz
mov
(bad)
mov
mov
sbb
mov
xor
aaa
jno
div
push
sub
shl
test
xor
inc
mov
xor
popf
pop
sbb
push
jl
mov
test
out
scas
jmp
cmps
mov
jge
lock
xchg
and
(bad)
sahf
sub
dec
or
and
in
push
mov
or
lea
pop
aam
daa
sbb
js
test
mov
xchg
sub
jl
ds
or
lods
add
cwde
jl
dec
add
ja
and
or
imul
jle
mov
adc
mov
retf
rcl
stos
add
push
out
shl
pop
in
ss
aam
xlat
sub
xchg
mov
mov
xchg
int
movs
cmps
cli
outs
pop
test
int3
hlt
sti
clc
xlat
rol
add
mov
or
popf
(bad)
cmp
mov
push
push
mov
mov
cmps
inc
into
sti
push
nop
into
dec
jns
shl
out
stos
jmp
das
in
test
push
jne
and
pop
mov
jecxz
mov
ds
outs
mov
stos
rol
xor
mov
test
mov
and
xor
(bad)
mov
iret
(bad)
bnd
clc
xor
sub
(bad)
mov
cmp
gs
sub
dec
cs
sbb
fstp
xlat
or
pop
xchg
outs
mov
icebp
mov
rcr
mov
bound
lods
xor
pushf
sbb
inc
xlat
aam
sub
cmp
rol
mov
fwait
movs
ins
retf
cmp
xor
jle
pop
cs
shr
jp
mov
and
add
mov
imul
std
scas
(bad)
int
pusha
into
inc
xor
lock
loope
(bad)
in
mov
movs
std
mov
mov
mov
(bad)
mov
ror
das
push
and
out
sahf
mov
not
outs
mov
mov
jbe
(bad)
(bad)
fiadd
pop
mov
inc
sbb
cmps
cdq
jmp
ret
mov
ins
xchg
out
xchg
mov
lods
iret
sti
cdq
or
xchg
ss
add
in
repnz
inc
jmp
sbb
cmp
xchg
inc
push
xor
add
jle
jbe
inc
sub
add
jbe
pop
push
inc
ret
add
jnp
xchg
pop
pop
cmp
js
out
cmps
jo
mov
or
stos
sahf
push
sar
mov
cmp
sbb
pop
loope
or
mov
push
mov
(bad)
pop
mov
in
dec
out
mov
adc
ja
and
aam
push
jecxz
cwde
inc
and
dec
mov
in
or
enter
out
in
in
jg
imul
sbb
fcmovu
aam
sbb
mov
mov
xchg
std
mov
mov
mov
not
fcmove
xchg
out
or
pop
in
mov
iret
jmp
lahf
popa
(bad)
lar
dec
jb
jo
daa
xchg
(bad)
cmp
sbb
xor
or
pop
xchg
mov
push
repz
mov
retfw
mov
push
dec
push
mov
or
adc
scas
mov
pop
xor
jne
cmp
ret
mov
push
ror
jne
pusha
ficom
cmp
mov
dec
popf
push
xchg
enter
jmp
int3
mov
add
mov
inc
mov
aas
sbb
xor
xor
mov
call
cld
add
cmp
mov
stos
jns
mov
loope
clc
into
mov
mov
shl
mov
push
adc
hlt
push
mov
lahf
mov
inc
cmc
mov
ss
lahf
mov
aaa
repnz
icebp
adc
(bad)
lea
aam
int
sahf
cmps
dec
mov
lss
out
ret
movs
fs
mov
jmp
push
inc
jo
xor
xor
add
sub
mov
test
sti
pusha
dec
push
idiv
sbb
mov
cmp
push
daa
xchg
xchg
les
retf
int
lahf
cdq
mov
loope
mov
cs
cdq
jecxz
leave
ja
aad
call
push
mov
xchg
dec
shl
mov
out
sub
push
addr16
hlt
jg
xchg
push
xchg
jnp
aas
shl
fucom
mov
xor
fidivr
aaa
mov
mov
adc
xchg
adc
push
out
dec
inc
xchg
add
daa
call
gs
cmps
xor
mov
jmp
int3
adc
mov
outs
in
test
cli
or
sbb
and
js
lea
lea
jle
std
ja
xor
xchg
aam
xchg
pop
dec
shl
aad
jnp
push
cmp
jle
pushf
push
sub
dec
sbb
lds
popa
sbb
add
cs
arpl
cmp
adc
(bad)
retf
sub
imul
mov
test
out
xchg
mov
sub
or
out
jb
iret
scas
les
repnz
iret
xchg
outs
jbe
sbb
movs
movs
lds
faddp
jo
test
cmps
mov
inc
mov
jns
dec
ret
mov
out
mov
mov
mov
js
out
or
xchg
cmps
xor
pop
mov
in
sbb
sahf
push
push
sbb
retf
or
aas
inc
add
lds
loope
pop
jmp
movs
mov
cs
sub
sub
out
dec
xor
ja
xchg
jg
leave
mov
lods
hlt
int3
jge
lock
dec
rcl
or
adc
aad
iret
fsubp
push
mov
inc
sbb
push
pop
jmp
inc
fs
xrelease
pop
lahf
sub
(bad)
sahf
mov
ds
mov
es
sub
cmp
icebp
mov
mov
mov
bound
mov
fwait
pop
xchg
cli
outs
daa
mov
adc
lea
or
test
jbe
lds
out
lods
jle
jb
sbb
call
loope
(bad)
div
pop
ja
inc
stos
adc
les
xchg
xor
xchg
gs
hlt
imul
das
cdq
scas
adc
sbb
inc
mov
cmp
inc
int3
cmp
ins
pop
lods
push
push
out
mov
adc
jae
xchg
mov
mov
dec
or
add
fnstenv
mov
add
aad
out
fwait
jo
nop
rcr
or
push
daa
adc
cmp
aaa
sbb
or
cmps
pushf
mov
mov
mov
aad
inc
and
push
mov
(bad)
test
lea
daa
enter
ror
call
(bad)
fcmovnb
in
out
adc
mov
xchg
shl
dec
loope
in
sahf
and
pusha
out
add
xor
mov
xor
imul
or
or
aad
mov
push
ins
imul
inc
mov
push
out
aas
clc
jne
jge
fucomip
adc
xchg
nop
ret
aad
and
cmp
or
pop
in
add
or
imul
(bad)
aas
es
push
sbb
aad
lock
outs
cmps
or
pop
pop
mov
arpl
push
inc
cmp
jne
push
adc
(bad)
fldcw
xor
or
adc
mov
mov
push
data16
sbb
xchg
xchg
inc
data16
repz
mov
lods
xor
push
lea
sbb
test
retf
das
loopne
mov
out
sbb
mov
mov
jle
gs
in
into
xchg
and
inc
les
pop
pop
push
loopne
pcmpeqw
pop
inc
stos
out
mov
stos
adc
jg
sbb
popf
sub
std
loopne
or
call
xor
push
cmp
jle
lock
push
dec
dec
add
cmp
imul
rep
xchg
mov
ins
and
rcl
syscall
sub
push
pop
sbb
adc
test
adc
(bad)
fldcw
xchg
gs
js
push
and
jge
repz
lahf
inc
cmps
scas
adc
icebp
dec
pusha
dec
outs
mov
fnstsw
ror
cmps
int3
mov
sub
pop
push
out
xchg
pop
jle
mov
test
dec
stc
test
test
out
mov
rol
imul
sub
add
dec
nop
mov
cmp
clc
nop
xor
scas
cmp
std
or
cmp
movs
push
or
push
cld
xchg
mov
jae
es
xor
(bad)
shl
xor
mov
xchg
sbb
inc
and
fcmovbe
cld
int3
xor
clc
inc
fiadd
sub
in
jp
mov
test
mov
ja
add
push
mov
adc
lock
out
sbb
in
push
pop
pop
stc
push
outs
mov
lahf
dec
loop
in
stos
pop
dec
and
cwde
ret
cwde
mul
out
push
rcl
xchg
jg
sar
hlt
aaa
into
aaa
xchg
cmp
jb
addr16
lods
add
or
leave
cmp
dec
fs
mov
sub
ins
icebp
bound
cmp
(bad)
lods
mov
jmp
add
les
shl
push
mov
out
js
sbb
dec
xchg
mov
inc
inc
addr16
retf
mov
or
sbb
sbb
jl
mov
rcl
xchg
pushf
xchg
lock
fild
call
and
gs
push
push
xchg
pop
fimul
inc
loop
sbb
mov
pop
mov
scas
add
sbb
pop
rcr
test
add
mov
adc
push
adc
push
pop
mov
xchg
xchg
leave
push
repnz
pop
mov
sbb
jle
addr16
cmp
call
xchg
xchg
mov
out
dec
into
xchg
pop
sub
xchg
in
push
inc
stos
add
xchg
(bad)
add
sub
mov
rcr
sub
nop
add
cmc
repnz
stc
jns
xchg
cmp
mov
cmps
add
in
sub
adc
sbb
jmpw
mov
and
jno
jp
jmp
cmps
dec
fucomi
dec
pushf
sbb
das
inc
in
leave
test
sar
mov
aas
cmp
vpperm
adc
(bad)
and
cmp
ret
sbb
xor
sub
mov
cmp
imul
adc
xor
fild
mov
mov
test
rcr
cmp
push
mov
ss
ret
or
add
cld
popf
fld
sar
push
lds
sub
jp
add
jle
imul
mov
pusha
out
lahf
sti
arpl
cmp
cdq
(bad)
retf
mov
(bad)
cmps
pop
dec
(bad)
fmul
ds
mov
or
cmp
add
mov
aam
nop
xor
cmp
sub
into
inc
mov
push
pop
retf
push
sub
bnd
repnz
call
or
mov
jle
cmp
rcl
pop
clc
out
lahf
cmp
add
cmc
ss
shr
mov
out
or
xor
push
sub
lahf
dec
xchg
stc
xlat
popa
mov
add
inc
iret
arpl
push
loope
jmp
mov
das
pop
(bad)
mov
std
push
or
daa
xor
push
jb
inc
add
(bad)
cmp
sbb
add
inc
or
cmc
ret
push
jge
jmp
jnp
es
ret
scas
test
popa
or
fld
mov
cmc
or
sbb
xchg
mov
cmc
ret
add
inc
(bad)
fisubr
pop
lock
gs
(bad)
fistp
mov
repnz
push
xchg
sbb
mov
aad
call
in
sbb
mov
leave
leave
add
cmp
fwait
cmp
push
ds
mov
xor
pop
and
xor
sub
mov
and
bnd
pop
es
dec
mov
add
repz
out
jns
cwde
push
pusha
mov
aaa
shl
mov
cmps
inc
and
cmp
je
dec
outs
jne
sbb
and
movs
or
ins
retf
mov
jns
ret
sahf
cwde
mov
into
push
int3
shl
leave
dec
popa
sbb
mov
or
stos
or
adc
test
add
push
shl
dec
mov
aaa
fdivp
jbe
mov
mov
sub
les
mov
in
push
add
mov
jo
mov
adc
ret
gs
add
inc
cmp
ja
(bad)
pop
pop
sub
push
int
fs
fcomp
xchg
mov
ror
repnz
mov
int
xor
bound
cmp
mov
inc
xor
sub
mov
sbb
dec
into
(bad)
sahf
ss
and
outs
xchg
repnz
add
leave
bound
pop
nop
mov
add
add
pop
ror
aad
loopne
push
idiv
fwait
xchg
dec
xor
inc
bnd
jno
sbb
enter
jmp
xchg
out
out
movs
pop
test
and
cld
hlt
xchg
or
push
pop
fisttp
sbb
arpl
cld
arpl
js
fstp
ins
lahf
jmp
pop
xor
pop
push
add
jecxz
stos
dec
retf
imul
mov
sub
sub
cs
mov
mov
push
or
pop
mov
xor
loop
sub
mov
cs
adc
sahf
mov
sub
rcr
push
dec
xchg
fisubr
imul
push
mov
mov
xlat
jle
pop
sub
dec
fidiv
push
std
or
enter
xchg
cmp
push
fs
add
mov
add
sbb
push
(bad)
movs
or
and
xchg
inc
dec
cli
adc
xchg
xor
in
mov
lahf
push
jno
fld
mov
sets
push
call
push
xor
mov
jmp
dec
icebp
not
retf
xchg
imul
sbb
jno
mov
jg
fidiv
push
mov
cmp
push
push
sub
idiv
loope
cdq
inc
mov
push
inc
mov
adc
sbb
sbb
cmp
mov
inc
add
imul
xchg
or
inc
xchg
jmp
inc
xor
pop
add
cmp
jns
jl
or
loope
xor
or
push
and
adc
inc
outs
rcl
jo
push
or
inc
pusha
jl
daa
(bad)
loope
test
mov
adc
push
cmps
sbb
icebp
mov
dec
dec
ja
jns
or
test
das
lea
js
mov
test
repz
add
popf
mov
cdq
test
dec
xchg
dec
out
sahf
xchg
js
and
sbb
mov
int3
pop
mov
daa
mov
xchg
clc
cdq
or
sbb
repnz
inc
xchg
retf
daa
jg
retf
jl
mov
pop
arpl
mov
fiadd
mov
jns
sub
or
adc
ins
sbb
clc
call
pop
lahf
xchg
(bad)
repnz
aam
int3
ja
fld
xchg
xchg
add
js
in
(bad)
leave
pop
mov
ret
mov
cmp
addr16
popa
lods
vcvtdq2pd
dec
pop
push
mov
push
mov
shl
xlat
jo
shr
outs
cdq
rcr
lds
adc
loopne
push
enter
jo
sub
mov
mov
add
not
mov
cmc
xchg
addr16
cmp
icebp
dec
out
loop
popf
inc
movs
outs
pop
shl
jg
sub
xchg
xchg
or
add
inc
add
xchg
cmp
and
sahf
aaa
pop
jmp
out
(bad)
push
mov
push
mov
fdiv
adc
clc
vaddsd
mov
test
out
lods
(bad)
adc
rol
jmp
pop
loopne
mov
cmps
jo
jo
lock
or
lea
ret
test
push
lods
sbb
mov
addr16
mov
ins
dec
test
sub
aam
mov
inc
push
push
test
xor
cwde
push
sub
into
(bad)
xchg
dec
dec
dec
nop
mov
and
cwde
mov
push
mov
xchg
xchg
mov
daa
ficomp
ja
retf
test
lea
or
mov
adc
repnz
inc
push
pop
pop
ins
nop
cmp
pop
dec
pushf
aaa
sbb
xchg
cwde
adc
cmp
mov
xor
movs
scas
add
xchg
push
mov
jge
and
add
mov
pop
fs
movs
cmps
data16
(bad)
sub
sbb
sar
loope
or
xchg
xchg
(bad)
mov
mov
outs
rcl
push
cwde
mov
push
mov
in
fwait
sub
sub
xchg
inc
das
xlat
fisttp
adc
sub
daa
and
inc
xor
xchg
cmps
je
xchg
jbe
and
and
mov
push
cmps
aas
inc
or
mov
dec
xchg
mov
retf
ficom
dec
retf
pop
and
hlt
xchg
sahf
test
and
push
add
fcom
mov
add
push
jb
pushf
frstor
loope
sbb
sbb
sub
jl
sub
push
int3
dec
cmp
aas
jmp
std
or
call
adc
jge
mov
test
imul
lods
shl
movs
sbb
inc
mov
cmp
inc
(bad)
cld
xor
jb
push
es
call
loope
xchg
xor
jmp
mov
jnp
push
sti
arpl
aas
enter
imul
mov
jbe
add
outs
shl
sub
jle
int
pop
mov
cs
ja
scas
cmps
daa
xor
(bad)
scas
push
mov
and
retf
popa
ror
mov
fwait
sub
add
(bad)
cmps
mov
inc
pop
hlt
mov
cmps
into
push
xchg
mov
(bad)
lahf
(bad)
in
cld
into
jg
fidivr
mov
lahf
movs
add
mov
outs
(bad)
mov
loopne
adc
xchg
scas
not
mov
cmp
mov
dec
dec
inc
jno
mov
push
retf
cwde
pusha
jns
movs
repnz
xor
out
ja
bnd
mov
dec
adc
cmp
mov
xlat
mov
sti
push
add
retf
cmp
or
sub
jmp
fadd
mov
imul
adc
xlat
test
jbe
fisttp
int3
inc
push
ins
mov
mov
popa
lahf
fild
ss
mov
das
inc
cmp
dec
xchg
(bad)
out
xchg
in
or
sub
add
jmp
xchg
stos
sub
test
cmp
inc
mov
pop
mov
adc
or
cmp
je
or
ret
shr
jmp
jle
mov
mov
dec
sub
lds
test
add
pop
test
pop
push
inc
mov
sar
nop
inc
dec
std
inc
adc
mov
sub
(bad)
pop
ror
cmp
cmc
inc
sub
js
mov
add
es
fld
push
jmp
mov
dec
jns
mov
clc
repnz
mov
daa
icebp
dec
jne
(bad)
sub
js
xchg
push
xor
sbb
or
dec
jg
in
mov
mov
js
mov
mov
cmp
outs
das
mov
cld
adc
mov
xor
popa
dec
dec
lods
mov
rcl
mov
inc
daa
mov
inc
sti
inc
repz
mov
adc
std
lds
mov
out
xchg
mov
in
or
push
sub
int
push
stos
jecxz
sbb
(bad)
loop
jne
pop
mov
jo
das
es
pop
xchg
bound
aaa
ja
fdiv
scas
push
imul
outs
lods
xchg
jmp
sahf
push
and
jmp
ins
movs
shr
jne
pop
fld
repz
push
repnz
and
cli
mov
xchg
xlat
mov
test
stos
mov
jns
sub
mov
and
pop
xchg
xchg
ret
rcl
leave
sbb
xor
shr
cwde
(bad)
and
dec
pop
cmp
cs
and
fwait
or
imul
dec
in
inc
push
jl
pop
mov
test
jnp
inc
(bad)
cmp
aam
xor
xchg
mov
sahf
adc
mov
push
jns
and
pop
sbb
rcr
loope
fdiv
cdq
push
dec
(bad)
sbb
cmp
lahf
std
push
out
(bad)
add
inc
cmp
jecxz
mov
pop
retf
(bad)
scas
push
scas
aad
jl
mov
jl
in
jg
daa
jmp
add
push
inc
mov
mov
push
in
and
jno
mov
mov
out
xor
aam
ds
aaa
test
imul
xor
jmp
pop
test
jp
mov
and
loope
cmp
or
mov
in
inc
mov
sbb
call
cmovae
popf
mov
mov
jns
mov
idiv
push
xchg
push
mov
aas
stos
mov
in
xchg
into
jg
imul
jns
nop
js
adc
mov
scas
icebp
aad
push
xchg
mov
fsubr
repz
ins
jmp
jl
push
sti
(bad)
dec
jb
in
sbb
push
dec
stos
data16
cmp
call
shr
mov
arpl
mov
stc
idiv
retf
adc
imul
pextrw
mov
xchg
mov
mov
jbe
rcl
cmps
test
adc
repnz
mov
rcl
xchg
repnz
cld
popf
in
nop
stc
popf
cmp
pop
rcl
enter
push
jmp
div
xchg
daa
loop
ss
mov
retf
ins
es
jp
in
mov
xchg
xor
int
or
vmulsd
xor
aam
popa
jp
arpl
sub
test
xchg
(bad)
mov
or
or
(bad)
or
dec
jmp
popf
mov
dec
repz
mov
jmp
jl
jg
pop
dec
inc
mov
test
push
push
repz
int3
pop
sahf
data16
adc
xor
popf
loopne
mov
sub
adc
ja
mov
imul
mov
cli
push
sub
dec
add
int
call
push
push
mov
aad
(bad)
push
iret
aaa
scas
fcomp
fsubr
pushf
imul
sub
call
jmp
xchg
(bad)
push
movs
imul
(bad)
sahf
dec
pop
adc
mov
out
adc
pop
cdq
rcl
arpl
xchg
std
cmp
or
(bad)
jmp
xlat
xchg
add
rcr
test
shr
xchg
out
cwde
mov
rcl
(bad)
idiv
inc
pusha
pop
in
jne
jmp
(bad)
aam
jmp
adc
jecxz
push
adc
ror
push
(bad)
fs
int3
mov
jae
push
std
ret
cmp
fs
pop
std
or
sar
xchg
cs
push
push
mul
push
sub
mov
push
or
shl
jle
mov
fisttp
jp
add
sub
fbld
xlat
jae
inc
jb
fist
lods
pop
aam
mov
test
les
adc
ret
and
xchg
test
fs
cmp
push
in
data16
jp
and
out
mov
aad
cmps
xchg
fcomp
pop
(bad)
fistp
xor
scas
xchg
pop
mov
sub
cdq
mov
clc
ja
dec
mov
push
mov
repnz
aam
sbb
xor
sbb
scas
ret
lock
sahf
rcl
jae
cmc
into
xchg
jp
sub
fdiv
cs
sti
in
sbb
xlat
aad
sbb
pop
arpl
jo
cmp
popf
leave
pusha
stos
imul
fwait
retf
sahf
sub
xchg
(bad)
sbb
fmul
or
mov
add
test
mov
sbb
push
mov
xchg
imul
mov
jns
fsub
and
sbb
mov
retf
iret
sbb
lds
jns
adc
sbb
(bad)
movs
sub
in
stos
jmp
and
js
mov
xor
stos
inc
stos
inc
xlat
mov
lds
outs
fnsave
je
je
xor
jb
adc
pop
adc
dec
mov
in
dec
loopne
(bad)
sub
aam
cdq
xchg
add
sub
xchg
cmp
imul
hlt
jne
ret
and
outs
jae
pusha
xchg
jne
push
cli
retf
pop
cmp
xchg
jae
or
jo
mov
or
sbb
dec
fidiv
push
cli
daa
xor
push
repz
iret
ret
xchg
cld
js
inc
and
jbe
adc
mov
jo
inc
mov
pop
inc
loop
and
cwde
xor
jo
lock
pushf
rcl
adc
ret
jae
push
pushf
cmps
cmp
sub
push
adc
cmps
jne
inc
push
arpl
or
ror
mov
and
fidiv
vmulsd
xchg
fsubrp
sub
into
stos
pop
aad
pop
pop
jp
jmp
aaa
pop
inc
aaa
jbe
call
outs
call
mov
cmps
mov
xor
lods
pop
rol
and
xor
jl
ja
xor
jg
and
scas
mov
int
or
push
int
rol
fild
jb
xchg
mov
xchg
imul
in
xchg
pop
(bad)
fwait
(bad)
push
jno
je
xchg
movs
jl
or
ficom
(bad)
xor
adc
mov
sbb
pop
data16
fdiv
mov
cwde
push
jl
fcmovnu
out
mov
xor
mov
aam
xchg
fld
sbb
mov
mov
pushf
int3
push
push
mov
cmp
fs
inc
xchg
movs
test
ins
and
pop
and
mov
loope
jne
loopne
loope
pop
inc
mov
fwait
ins
mov
idiv
loop
jle
push
mov
div
xchg
fmul
pop
je
adc
in
shr
(bad)
fcomip
cld
mov
into
inc
pop
xor
retf
dec
mov
push
ins
mov
inc
sbb
nop
push
out
fs
or
fdiv
add
adc
push
cmc
in
push
stos
mov
into
clc
cmp
not
sbb
or
iret
inc
ja
lock
int
outs
fadd
aam
enter
aas
shr
lock
cli
rol
mov
arpl
add
nop
imul
std
sub
pop
movs
mov
nop
fcmovnbe
pop
ins
mov
dec
jp
arpl
es
add
cmp
and
jo
jmp
jecxz
mov
sbb
lahf
popa
repnz
ins
jl
mov
inc
outs
dec
pop
repnz
and
sub
test
movs
aam
add
add
inc
mov
cmp
test
cld
push
jo
xchg
sbb
pop
loop
mov
cmp
xchg
in
or
cmp
and
adc
xor
mov
mov
or
test
mov
rcr
dec
repz
and
(bad)
bound
aad
push
ins
jge
jge
das
imul
lds
sub
repz
stc
push
in
xor
fiadd
push
and
mov
inc
cli
leave
push
push
imul
mov
pop
jae
lods
ins
int3
jle
jmp
stc
mov
hlt
push
je
adc
scas
popa
jmp
cmp
jge
jmp
cmp
or
in
xchg
jl
push
lods
je
jecxz
ss
jl
icebp
push
or
rcl
retf
nop
mov
out
and
mov
test
mov
stos
pop
mov
xchg
cmps
movs
sbb
mov
xchg
call
cld
sub
xlat
xchg
pop
loopne
shr
or
mov
inc
out
and
cdq
ins
ins
push
inc
ds
mov
xor
sbb
mov
pop
push
inc
cld
les
fwait
out
cld
daa
sbb
pop
int3
retf
jb
loopne
push
mov
xchg
enter
outs
adc
pop
sbb
out
push
(bad)
repz
mov
popa
cmc
ret
xchg
jg
lock
and
cld
gs
push
mov
out
clc
inc
pushf
push
sbb
pop
inc
test
xchg
mov
xor
cwde
and
stos
adc
imul
pushf
mov
xor
xor
sbb
dec
pop
dec
fadd
nop
cli
push
stc
sahf
xchg
popf
iret
inc
and
and
cmp
cmp
dec
ins
rcl
sbb
mov
jne
xchg
xchg
xchg
pop
push
fsub
gs
sbb
mov
movs
mov
mov
dec
mov
fidiv
lea
nop
sub
xor
mov
jl
dec
cmps
cmps
inc
popa
xchg
mov
adc
jne
test
mov
mov
pop
mov
bound
xor
les
pop
(bad)
sbb
daa
or
pop
cmp
push
pop
sbb
jbe
arpl
nop
mov
mov
imul
hlt
sti
and
cmps
std
mov
mov
pushf
mov
mov
or
pop
xor
mov
and
pop
movs
pop
pop
mov
adc
pusha
sbb
xchg
fcomi
push
call
mov
and
inc
jbe
mov
into
emms
jbe
stc
mov
mov
rcr
das
inc
fistp
jb
jb
sbb
xchg
jge
xchg
neg
outs
lds
dec
cdq
lods
xor
mov
daa
rcr
lods
jp
sub
push
mov
retf
xchg
push
int3
mov
push
icebp
loopne
sub
sbb
cmp
or
(bad)
call
xchg
cs
stos
mov
jmp
into
imul
push
dec
jns
enter
push
lahf
jmp
test
shl
fisub
xchg
movs
sbb
aam
arpl
mov
icebp
outs
pop
xchg
mov
xchg
js
iret
jo
xor
adc
stos
add
mov
dec
jmp
call
or
jmp
inc
retf
add
(bad)
test
xchg
lea
mov
shr
mov
push
pop
add
outs
add
push
sbb
jo
fnstsw
fs
inc
(bad)
dec
mov
sbb
inc
mov
cmp
pop
sahf
jns
arpl
xor
or
inc
cmp
fs
xchg
xchg
jge
inc
jle
fwait
js
setns
gs
mov
xlat
pop
and
push
jns
push
and
inc
es
lods
shl
or
push
ret
dec
xor
(bad)
inc
cmp
xlat
xchg
cld
mov
es
lods
leave
test
imul
rcr
mov
mov
sub
daa
mov
dec
pop
sub
mov
in
jmp
cmp
es
cmc
mov
cmp
in
sub
in
jmp
pop
mov
xor
mov
arpl
leave
test
jne
mov
or
push
outs
repz
shl
(bad)
pusha
stc
dec
mov
ss
lds
imul
push
test
pop
cwde
test
sbb
add
add
pop
div
dec
cld
push
mov
or
shr
movs
mov
lahf
daa
nop
aaa
lahf
daa
or
cmp
not
inc
dec
jae
aam
mov
mov
cs
leave
push
adc
mov
div
push
mov
mov
sub
push
mov
aam
rol
out
push
mov
scas
mov
es
xor
push
sub
push
scas
fisttp
and
adc
pop
cmp
inc
loope
dec
mov
test
shl
(bad)
jbe
xor
jne
arpl
sub
ds
inc
xlat
cmp
mov
ret
ss
(bad)
(bad)
mov
jne
sbb
or
es
scas
imul
shl
pminsw
test
hlt
jnp
out
retf
icebp
fcmovb
xchg
cmp
pusha
outs
popf
xchg
mov
in
and
lods
sahf
inc
sbb
mov
iret
lods
sub
cmp
pop
(bad)
aaa
add
mov
nop
ss
push
mov
push
jle
or
aaa
pop
rcr
and
mov
inc
pop
add
test
mov
cmp
sbb
or
pop
dec
in
push
adc
jne
fdiv
push
stos
pop
sub
fld
mov
or
jmp
je
xor
(bad)
rcr
daa
cli
xor
ror
loope
dec
ud1
repnz
mov
inc
std
dec
mov
vpmaxsb
sahf
jge
gs
adc
rol
dec
inc
mov
aas
shl
lahf
mov
add
repnz
mov
xor
pushf
cdq
dec
and
pop
cmp
pop
int
icebp
adc
mov
arpl
(bad)
(bad)
into
movs
adc
arpl
mov
jbe
sub
fcom
clc
mov
(bad)
mov
mov
mov
xor
(bad)
loopne
mov
mov
sqrtps
frstor
enter
dec
push
loop
(bad)
xchg
jns
out
xlat
sub
iret
cli
stos
ss
xchg
push
xlat
shl
gs
daa
cmp
dec
cmp
xor
xchg
adc
push
sub
sub
inc
sbb
jae
xchg
loop
addr16
in
aad
xor
push
retf
push
add
dec
movs
xchg
pop
inc
adc
and
mov
ss
scas
test
mov
mov
inc
dec
mov
lea
sbb
lods
or
lahf
fucomi
mov
mov
dec
jo
cwde
cwde
mov
fistp
jge
mov
xchg
adc
sbb
iret
xchg
(bad)
cmp
jno
test
sbb
popf
add
stc
pop
clc
jmp
sti
mov
xchg
aad
mov
cmp
or
arpl
jg
mov
cmp
sbb
or
mov
addr16
jmp
jno
in
cmp
mov
sahf
ss
out
add
pop
jmp
(bad)
jmp
mov
pop
or
daa
or
pop
add
inc
(bad)
clc
inc
sub
lock
add
mov
idiv
cmp
push
sub
mov
cmps
repz
cmc
mov
jno
mov
imul
cwde
xchg
mov
and
and
movs
cmps
pop
mov
adc
or
pop
int3
stos
je
ret
and
cld
xchg
push
imul
cmps
stos
jo
mov
inc
mov
and
mov
xchg
daa
mov
out
xchg
cmp
sbb
pop
repz
retf
xor
ret
push
fwait
jae
jmp
int3
in
repz
sahf
stc
and
lods
pop
jmp
cmps
mov
jmp
cmps
sbb
push
bound
lea
not
adc
xor
in
sbb
cmp
ret
add
retf
outs
sbb
adc
xchg
cmp
cmp
adc
aaa
imul
mov
cmp
pop
in
mov
dec
pop
push
pop
sbb
pop
xchg
ja
mov
mov
or
cli
push
movs
ror
imul
dec
imul
das
pop
ja
shr
and
fcomp
dec
addr16
and
or
leave
push
aad
pushf
and
jecxz
add
push
scas
xchg
push
cmp
fisubr
mov
inc
aad
jge
jge
pushf
imul
inc
enter
fsub
push
push
idiv
push
mov
mov
sbb
(bad)
stc
sbb
(bad)
sub
sbb
into
lahf
rcl
outs
and
sbb
dec
retf
arpl
inc
lahf
or
jp
and
daa
call
ja
sbb
sub
ret
pop
and
xor
movs
movs
out
(bad)
mov
(bad)
aaa
inc
shl
call
enter
jae
imul
shl
mov
jbe
cmp
scas
inc
fwait
div
cmps
add
push
hlt
push
sahf
pop
and
jp
ror
cmps
in
mov
out
inc
mov
xchg
ret
add
bound
jmp
div
repnz
in
sub
mov
sbb
fld
mov
xor
fsubrp
xchg
and
jbe
in
xor
test
int
jmp
lds
adc
and
nop
mov
int
scas
aaa
cmp
mov
xor
mov
popf
mov
jnp
xchg
lea
or
fsubr
fiadd
jne
stos
jmp
aas
iret
push
cmp
popf
mov
(bad)
jno
je
ret
outs
loopne
lahf
pop
pop
or
xchg
jns
bound
movs
out
add
adc
jecxz
cdq
out
inc
fs
dec
in
out
loop
cmp
sub
mov
ret
pop
icebp
fwait
push
and
into
lods
pop
or
mov
add
xchg
pop
dec
push
cmp
xor
adc
std
outs
fs
lds
push
sub
or
dec
shr
mov
test
jecxz
pop
or
scas
jmp
(bad)
call
rol
xchg
jns
xor
xchg
mov
sub
(bad)
dec
pop
and
mov
inc
scas
(bad)
in
popf
and
stc
cmp
pop
lods
adc
xor
fisub
gs
cmp
jl
in
xchg
ss
imul
xchg
xchg
cs
fsubr
add
push
popf
(bad)
repz
aas
xchg
xor
dec
cmps
aas
add
pop
push
call
mov
mov
repz
jmp
push
pop
pop
push
or
stos
xor
xchg
push
cmp
adc
shr
ds
adc
sub
xor
push
and
fild
xchg
stc
dec
and
adc
ja
mov
int3
push
and
jb
scas
pop
xlat
mov
popf
ins
push
enter
and
adc
test
dec
retf
push
es
jo
fwait
push
imul
dec
sahf
das
icebp
xor
add
ss
lods
mov
xor
loopne
push
les
test
jp
sar
mov
outs
sub
push
jmp
xor
xchg
lods
mov
cs
hlt
mov
sar
xchg
cmp
pop
or
test
adc
jecxz
pop
pop
test
cmp
mov
addr16
adc
popf
pusha
les
cs
sbb
add
ror
dec
pop
jge
pop
out
fst
push
out
xchg
add
icebp
int3
jge
push
jmp
sub
lock
jge
xchg
inc
(bad)
fiadd
sbb
pop
inc
pop
pop
push
xor
loopne
mov
pop
sbb
xchg
out
bound
and
cmp
mov
out
xchg
fcomip
pop
aad
mov
fadd
aam
mov
pop
outs
ins
fadd
pop
fistp
imul
cmps
inc
add
out
in
pop
das
cmp
or
add
jecxz
dec
lods
xchg
sbb
dec
and
sbb
jle
mov
cmp
jae
leave
test
mov
push
pop
popf
aas
imul
es
adc
and
and
daa
xor
outs
stc
ret
std
jmp
repnz
out
xchg
mov
sbb
call
pusha
gs
movs
pop
xchg
out
jl
and
mov
mov
pop
int3
ins
ret
adc
or
adc
scas
mov
cmp
or
mov
dec
pop
in
or
xlat
mov
or
add
sub
mov
xchg
test
xchg
mov
mov
cmp
dec
cmp
pop
add
add
scas
ds
sbb
adc
jmp
xchg
mov
js
xchg
push
cmc
push
sbb
mov
and
cmps
iret
rcr
sub
mov
add
pop
adc
cmp
test
cld
mov
retf
cmp
popf
push
jmp
stc
sbb
dec
shl
ja
jmp
xor
xchg
fs
dec
lock
mov
jecxz
stos
cmp
push
add
mov
cmp
test
mov
sub
stos
leave
push
rcl
inc
sbb
lahf
clc
jecxz
add
ja
pop
adc
jbe
cmp
mov
test
xor
fwait
ret
mov
jo
repz
cdq
shl
cmc
data16
mov
lahf
jmp
daa
pop
je
inc
adc
(bad)
call
mov
daa
adc
mov
mov
retf
xchg
lea
cmp
int3
mov
jmp
loope
add
popf
inc
cli
in
mov
in
pop
(bad)
jbe
dec
sbb
push
test
or
aaa
test
lds
xor
jns
pop
hlt
cmp
sub
pop
cmps
mov
out
xor
jbe
xor
ins
sub
fwait
int
jno
popa
gs
and
ins
cmc
sbb
sub
cs
mov
adc
inc
mov
push
sbb
mov
adc
rcr
(bad)
ror
arpl
mov
and
fwait
inc
mov
aaa
xchg
pop
cmp
pop
test
fdivr
push
ret
in
int
outs
push
cwde
cdq
dec
daa
or
out
pop
movs
ins
xchg
fcmove
pop
or
adc
and
ror
inc
pop
popa
inc
mov
jg
mov
neg
cs
mov
aaa
in
iret
jo
and
push
push
jnp
inc
sub
stc
xchg
cmp
mov
lods
mov
mov
mov
push
mov
aam
int
sbb
stc
adc
jecxz
xor
lahf
or
pop
push
xor
mov
pop
xchg
(bad)
fsubr
push
mov
je
and
dec
(bad)
pusha
fnstsw
int3
in
jge
mov
cmps
xchg
mov
aaa
xor
xchg
cmps
pop
pop
sub
adc
lock
sahf
xor
push
mov
inc
jmp
das
jns
dec
cdq
pop
gs
stos
ret
arpl
adc
movs
ret
enter
aas
inc
(bad)
jmp
sbb
fsub
xlat
dec
inc
ja
jbe
ficomp
fisub
pushw
jo
push
ret
jle
hlt
lods
sbb
dec
out
xchg
pop
rcr
push
sar
mov
neg
loop
sti
cmps
lea
push
fwait
(bad)
loop
test
jb
pop
movs
daa
mov
mov
sar
mov
add
(bad)
jbe
das
int
xor
jg
enter
or
lock
sbb
(bad)
sbb
retf
psubb
sbb
dec
pop
mov
adc
dec
mov
in
xchg
mov
xchg
clc
inc
pop
push
inc
neg
or
or
cmps
cwde
add
inc
enter
cs
popf
inc
cmp
cmp
push
xor
retf
rcr
mov
cmp
in
mov
popf
lods
push
push
add
cmp
(bad)
cmp
fisttp
imul
ret
fimul
ret
push
xor
seto
xchg
(bad)
clc
into
push
shl
cld
or
aaa
mov
imul
arpl
mov
mov
f2xm1
imul
jo
nop
fbld
je
dec
xor
or
xor
repz
mov
jno
mov
cdq
and
pop
pusha
jmp
ja
fld
inc
fidivr
jmp
fcmovnbe
jae
inc
cmp
pop
dec
adc
mov
mov
sub
mov
fistp
call
inc
rol
sub
out
sbb
dec
sub
retf
dec
std
or
and
rcl
in
dec
sub
adc
adc
int3
inc
adc
shl
push
lds
mov
mov
outs
push
stos
adc
push
xchg
jmp
lods
pop
aas
(bad)
jecxz
and
cli
mov
les
dec
and
adc
jl
mov
inc
add
inc
sub
add
inc
jge
or
jmp
add
mov
cmc
push
setb
cmp
das
mov
lods
out
imul
xor
cwde
outs
imul
jmp
jae
jmp
xchg
pushf
stos
mov
jb
mov
aas
into
inc
inc
inc
jae
push
nop
jle
fstp
cs
xchg
xchg
lods
(bad)
les
out
jne
adc
mov
out
pop
jg
out
sbb
into
pusha
into
or
jl
(bad)
jnp
cmp
pop
dec
or
push
push
mov
hlt
imul
mov
scas
cmp
push
xor
inc
and
sbb
and
jo
and
mov
aas
fs
sub
(bad)
test
cmp
cmp
fisub
jne
jle
xor
mov
test
or
adc
mov
enter
sbb
into
fwait
push
mov
in
dec
adc
cmp
popa
mov
ret
mov
enter
xor
leave
cmp
mov
pop
xor
movs
sbb
gs
sub
int3
push
xchg
fninit
test
pop
cwde
mul
push
addr16
mov
sub
loope
mov
xchg
pusha
ror
pop
push
mov
xchg
fidiv
dec
fnop
stos
std
cs
gs
adc
push
loopne
add
stos
and
test
test
ficomp
call
cvtdq2ps
inc
push
test
mov
test
xchg
push
inc
add
push
imul
inc
dec
inc
outs
ret
loopne
jg
out
ins
cs
lock
adc
loop
push
nop
mov
mov
stos
loop
sub
test
jno
mov
hlt
retf
mov
into
lea
cld
sbb
sbb
out
cmps
call
test
retf
mov
push
sbb
div
mov
inc
leave
xlat
int3
shl
or
cmp
es
jle
mov
pop
cmp
pushf
xor
adc
div
shr
pop
cld
pop
push
fcom
fisttp
fcom
cld
pop
jecxz
pushf
adc
push
mov
cmp
or
jg
push
cmp
das
popa
cmp
jae
je
mov
les
sbb
jmp
inc
mov
jge
xchg
sbb
imul
(bad)
ins
mov
xchg
mov
sbb
test
js
addr16
xor
popa
loope
mov
mov
stos
jns
cli
sar
daa
xlat
dec
cwde
mov
(bad)
sbb
pusha
xchg
repz
sub
(bad)
(bad)
les
or
sub
fwait
inc
adc
int3
popf
jo
test
call
dec
dec
jb
imul
mov
cld
xor
int
pusha
repnz
pop
pop
xchg
pop
push
fist
dec
cmp
and
(bad)
jo
adc
xchg
xchg
mov
dec
call
aaa
or
inc
clc
dec
adc
aam
mov
add
in
xchg
lock
sub
cs
pop
lock
imul
pop
retf
push
jb
popa
dec
inc
(bad)
out
ins
aam
pop
pushf
mov
les
lock
pop
jnp
add
(bad)
pop
ror
mov
cdq
inc
ds
mov
mov
bound
mov
xchg
dec
xlat
pusha
gs
push
rcpps
push
mov
call
cmps
sbb
pop
cmps
call
shr
repz
cmps
inc
imul
mov
mov
adc
sub
xchg
ins
mov
sbb
sbb
fcomp
cld
out
scas
sbb
cs
mov
cmp
rcl
xchg
mul
out
mov
fidivr
and
jns
es
inc
pop
movs
xor
adc
lds
push
mov
mov
xor
add
retf
mov
add
pop
fwait
cmps
dec
jmp
mov
mov
xchg
inc
adc
les
popa
aam
mov
cmps
xchg
push
loop
dec
xchg
inc
mov
push
cmp
pop
imul
mov
les
xor
(bad)
mov
dec
data16
sub
ins
data16
fimul
daa
and
jne
ins
mov
daa
ins
push
inc
shl
sar
mov
lea
mov
daa
popa
aam
jb
stos
push
pop
popa
loope
or
std
sbb
out
(bad)
mov
jg
pop
hlt
leave
mov
add
mov
cmc
fsub
xchg
fidivr
mov
clc
jmp
out
in
cmp
xchg
jne
ret
nop
fnsave
and
cmp
lods
mov
dec
cli
jmp
ins
mov
push
mov
sbb
aas
rcr
cmps
ret
pop
or
and
jbe
xor
inc
(bad)
fistp
leave
cmp
cmp
loop
pop
into
add
bound
mov
xchg
int
and
retf
mov
rcr
sub
mov
mov
mov
push
mov
cmps
fiadd
cmc
push
push
push
fst
fbld
mov
cmps
in
jmp
enter
int3
and
cmp
es
fmul
int3
loopne
mov
cld
cmps
test
jb
xor
mov
daa
test
fiadd
or
mov
(bad)
inc
imul
jmp
out
xchg
repnz
add
dec
xor
jb
jb
dec
add
and
mov
add
in
add
adc
mov
or
push
fst
popa
sbb
jo
xor
pop
add
shl
mov
sub
shl
xor
xor
mov
and
rcl
mov
mov
(bad)
and
in
fcomp
pop
pop
addr16
add
inc
add
imul
inc
fst
sbb
pop
mov
movs
stc
fadd
pop
dec
cld
add
sahf
jle
jl
pop
add
iret
add
push
xor
and
push
xchg
sbb
add
mov
xchg
std
cmp
movs
aad
ficom
xor
dec
ss
fs
repz
fcmovnu
add
cdq
icebp
mov
mov
xchg
test
fild
retf
or
shl
rcr
aad
or
enter
jmp
call
mov
pop
push
call
dec
scas
loope
and
mov
adc
inc
jmp
div
push
mov
dec
das
fwait
stc
bound
mov
sub
add
leave
or
jecxz
xor
lods
aad
mov
lds
outs
out
(bad)
adc
pop
mov
lahf
add
cmp
xchg
add
xor
add
cmps
add
pop
xor
test
mov
popa
and
mov
mov
popf
sub
pop
xchg
pop
mov
cmps
iret
dec
lods
or
loop
fld
sbb
shl
test
pop
mov
out
aad
neg
js
xchg
mov
(bad)
movs
ins
jp
inc
stc
adc
lods
cs
in
(bad)
xor
mov
jmp
int
mov
icebp
or
(bad)
(bad)
adc
xchg
push
popf
sbb
pop
mov
mov
(bad)
aam
inc
pop
cmp
dec
pop
stc
pusha
cmps
stc
adc
xor
icebp
add
sbb
(bad)
pop
add
adc
xchg
pushf
pop
add
add
or
xchg
adc
shl
jnp
fcomp
xchg
inc
push
push
mov
and
mov
fistp
push
mov
xchg
repnz
cld
and
xor
pop
daa
inc
mov
and
jmp
fs
ins
add
pusha
adc
jmp
adc
stos
cmc
sub
push
retf
shl
daa
dec
shr
out
jg
adc
xchg
jb
popa
xchg
pop
or
(bad)
movs
mov
pop
jge
dec
mov
imul
jl
mov
mov
mov
pop
stc
mov
sar
iret
add
hlt
push
inc
(bad)
enter
xlat
sbb
push
dec
xor
jmp
sahf
cli
jecxz
mov
sbb
pop
gs
loopne
mov
cmp
dec
(bad)
xor
in
inc
sub
pop
cmps
pop
fidivr
out
cmp
push
ins
jae
retf
es
shl
dec
jne
xor
cmp
sub
cld
sbb
jo
add
inc
outs
xor
or
mov
xchg
cli
div
shl
jg
cmp
mov
rcr
clc
lahf
test
mov
movs
aaa
jns
sbb
mov
retf
sub
push
dec
not
mov
mov
arpl
dec
sar
sbb
rol
ret
loope
jmp
test
dec
imul
(bad)
dec
int
dec
ficom
or
push
inc
call
sub
pop
adc
sub
(bad)
pushf
clc
sub
mov
adc
mov
(bad)
jge
fnstsw
fdivr
call
fcom
push
jnp
push
add
sub
rol
out
(bad)
repz
repnz
(bad)
fcmovne
fmul
test
into
adc
add
enter
inc
retf
dec
xchg
xchg
imul
loop
dec
and
(bad)
xchg
jmp
fidiv
loope
dec
jmp
dec
cmp
mov
lahf
or
(bad)
mov
int3
ss
imul
fcmovnu
sub
xchg
dec
mov
mov
add
sbb
shr
pop
xchg
in
fxch
bound
add
dec
cld
mov
mov
out
stos
in
mov
js
mov
into
sbb
pop
cmp
and
adc
cmp
fwait
ror
inc
es
shl
adc
mov
sbb
mov
stos
mov
jl
les
mov
pop
out
push
mov
lds
les
lds
sti
out
inc
nop
xchg
bound
pop
sub
adc
fdivrp
lock
and
xchg
lods
push
dec
jecxz
fimul
push
xor
aaa
push
pop
xchg
lock
shl
retf
mov
test
and
push
repnz
cs
stos
mov
jo
sbb
int3
lea
rcl
repnz
pop
push
shr
or
jne
push
xor
cs
jmp
or
mov
add
fimul
(bad)
cwde
outs
or
sbb
cmp
xor
inc
and
test
(bad)
xchg
jp
ins
ret
xor
cmp
or
xbegin
shl
mov
mov
bound
out
adc
mov
pop
dec
sar
pop
mov
add
es
add
cmp
popa
cli
loopne
sub
dec
and
mov
(bad)
cmc
or
aam
mov
adc
cmp
jle
cld
cli
xor
mov
fld
fisttp
fidivr
sbb
and
out
add
cmps
fimul
cwde
push
fwait
adc
std
lds
sbb
mov
sub
icebp
and
lods
repnz
jecxz
enter
retf
add
or
adc
inc
(bad)
pop
jp
in
imul
aas
cmp
mul
pop
pusha
mov
clc
cmp
out
(bad)
out
fsubr
ret
sub
cmp
test
retf
jnp
idiv
repz
mov
repz
std
sbb
inc
xlat
jnp
xchg
fs
leave
je
mov
repnz
or
mov
imul
xchg
daa
cwde
std
ins
rol
call
imul
jo
(bad)
or
and
sub
daa
mov
in
repz
movs
lea
sbb
movzx
test
inc
mov
(bad)
pushf
movs
div
mul
xor
rcr
sub
ins
sub
mov
cwde
mov
push
lods
stos
mov
pop
or
mov
sub
push
cmps
sub
mov
fcomp
cmps
arpl
aad
xchg
sub
ss
test
jne
jmp
adc
pusha
add
jbe
out
jmp
mov
xlat
out
xchg
enter
hlt
jb
adc
idiv
push
aad
mov
pop
das
sub
retf
jge
scas
xor
inc
sbb
into
les
imul
aad
retf
out
retf
dec
rcr
loope
movs
inc
pop
cmp
int3
data16
and
jecxz
xor
mov
imul
sub
(bad)
mov
and
ror
call
pop
pop
push
add
int
and
fstp
aad
inc
hlt
(bad)
mov
adc
push
(bad)
xor
cmp
call
jnp
hlt
xor
sub
mov
shr
lahf
xchg
fcom
inc
mov
aaa
icebp
sub
bound
loope
pushf
cmp
add
fist
lods
inc
mul
lahf
pop
push
dec
mov
mov
ficomp
daa
repz
cmp
mov
popf
push
mov
popf
pusha
add
mov
clc
cmp
mul
pusha
cmps
dec
and
pop
jne
or
add
inc
aad
add
repz
mov
test
mov
dec
std
push
adc
outs
(bad)
adc
pusha
push
cld
push
dec
(bad)
xor
lock
add
pop
test
mov
scas
or
mov
adc
dec
test
xor
push
push
daa
ins
xor
xor
adc
inc
xor
xchg
add
add
dec
sub
movs
xor
stos
add
sub
xchg
xor
jmp
sbb
pusha
mov
xchg
xor
out
or
sbb
rcr
int3
loopne
test
in
inc
add
dec
sub
push
add
test
inc
js
pop
cmp
jl
pop
ja
mov
jge
in
dec
aaa
jns
push
push
pop
cmp
pop
or
jmp
sub
or
xchg
mov
mov
pop
xlat
cmp
call
repnz
mov
jmp
cmps
inc
mov
mov
enter
and
fimul
int3
test
cmc
shl
or
bound
push
sbb
mov
jge
adc
xor
aad
sbb
iret
aas
jae
scas
ins
pop
scas
jbe
mov
test
repnz
xchg
clc
mov
push
jl
test
test
sub
mov
neg
xchg
lea
(bad)
fdivr
mov
xor
jecxz
mov
hlt
jae
imul
and
jmp
adc
xchg
mov
dec
and
jns
leave
cli
pop
out
jl
dec
mov
jmp
mov
clc
sbb
gs
cs
xchg
fwait
push
add
pop
loopne
cmp
push
xchg
push
mov
sbb
jo
in
and
inc
jns
movs
lods
mov
mov
mov
les
data16
les
or
clc
mov
push
lock
es
retf
sbb
pop
dec
sub
das
dec
pop
into
or
push
loope
dec
ret
std
mov
mov
out
retf
ret
push
pop
div
cmp
jge
lods
test
xor
aas
imul
(bad)
mov
mov
pop
pop
int3
lea
ficom
pop
je
dec
sub
icebp
sbb
dec
ins
adc
sbb
push
xchg
add
(bad)
ss
je
js
mov
push
mov
jnp
das
jmp
sahf
mov
fstp
(bad)
movs
xor
sar
jecxz
or
add
sub
outs
clc
adc
add
cmp
pop
cli
mov
outs
bnd
fsub
out
inc
pop
jle
jae
pop
dec
ret
jl
mov
jl
inc
je
mov
shl
mov
mov
outs
mov
push
popf
or
shl
enter
(bad)
cli
cmps
sub
mov
mov
jecxz
mov
les
arpl
pop
or
sbb
es
pop
mov
add
dec
mov
push
sbb
outs
pop
fcmovb
in
adc
mov
xchg
out
or
jge
aaa
jnp
push
push
into
out
mov
inc
mov
je
sbb
nop
bound
in
inc
into
add
or
lods
inc
xor
jg
in
nop
std
loopne
outs
popf
sahf
leave
push
sbb
pop
mov
xor
lods
cld
pusha
cs
lock
push
pop
add
fimul
cmp
sbb
inc
bound
popa
cld
fdivr
sub
dec
scas
call
inc
rol
mov
out
sub
daa
repz
les
xchg
jg
mov
into
call
test
call
stos
stc
adc
push
or
sbb
retf
in
mov
mov
inc
jmp
cwde
aam
add
fadd
push
out
sub
mov
lods
(bad)
cmp
sbb
popf
imul
jl
xchg
cmp
stc
add
mov
icebp
xor
aam
jge
int
loope
sub
mov
addr16
push
sub
pop
call
inc
jmp
cmp
(bad)
mov
adc
fwait
dec
adc
out
sahf
test
popf
rol
jmp
cmp
xchg
push
xor
xor
dec
push
jle
aas
adc
or
rcl
mov
pop
adc
cmps
and
jne
push
inc
icebp
in
outs
and
mov
xor
lods
fmul
adc
ds
fld
mov
mov
push
in
add
xchg
fs
test
in
cmp
fsub
cwde
pushf
xor
in
cmp
cmp
es
push
in
sub
cmp
push
and
mov
(bad)
dec
pop
(bad)
das
lods
xchg
adc
xor
scas
data16
cld
pop
lds
mov
jmp
pop
mov
mov
stc
mov
xor
push
xor
ds
xchg
or
lods
fist
xchg
sbb
adc
sbb
jmp
fwait
mov
je
loop
xor
stc
push
movs
std
lds
outs
add
push
retf
movs
mov
fs
leave
jnp
(bad)
mov
jnp
into
or
stc
lock
and
imul
or
push
into
sbb
mov
jmp
test
repz
rcr
aas
cdq
hlt
(bad)
adc
jge
jnp
jmp
mov
cmp
mov
gs
dec
stc
pop
mov
cmps
mov
pop
mov
mov
mov
rcl
js
daa
ins
jnp
cmps
jge
sbb
jne
imul
jecxz
or
pusha
push
dec
outs
cmps
inc
push
mov
or
cmp
pop
nop
dec
popf
gs
popf
cmp
and
jp
cli
inc
aam
adc
test
inc
cmp
sub
out
jb
mov
mov
(bad)
in
iret
xor
std
in
loopne
sahf
sbb
xchg
mov
mov
sbb
jl
cmc
adc
inc
jle
mov
pop
sub
mov
cmp
(bad)
test
sbb
add
inc
jne
dec
fmulp
and
mov
scas
adc
fsubr
mov
adc
xor
iret
xchg
inc
aas
or
and
les
(bad)
mov
call
or
add
or
arpl
test
xchg
pusha
jl
jecxz
dec
hlt
cmp
in
test
push
outs
fild
repnz
cmp
mov
and
imul
movs
xchg
xor
fdiv
mov
shr
mov
das
test
cmp
push
cld
outs
imul
mov
jge
cli
imul
daa
imul
jle
(bad)
cmp
cmps
dec
sar
jp
mov
sub
mov
mov
push
popf
into
and
xor
call
icebp
add
mov
popf
xor
push
dec
js
cmp
test
pop
loopne
call
dec
in
jl
jo
cs
and
fadd
lea
popa
adc
mov
sub
int
inc
or
xor
mov
adc
mov
cld
std
outs
loope
or
mov
mov
fstp
sbb
mov
cmp
xchg
mov
loop
mov
jl
out
pusha
gs
push
dec
and
push
jle
mov
cwde
fisub
jp
rol
sub
ds
out
mov
mov
or
mov
sbb
cdq
xor
xlat
iret
rol
movs
mov
mov
cmc
(bad)
call
in
xor
and
in
sti
mov
ss
pop
fmulp
push
push
movs
mov
dec
leave
jnp
xchg
fidiv
test
scas
cld
test
jge
or
sub
sub
and
xor
jae
mov
mov
cmp
loop
cld
sub
das
and
push
pop
cdq
dec
push
(bad)
xor
inc
test
outs
cmc
rol
xor
sbb
pop
lea
cwde
or
jno
mov
xor
in
mov
(bad)
rcl
jo
out
cmp
adc
push
inc
mov
daa
cmp
cmp
das
mov
test
mov
iret
pop
jns
enter
stos
dec
xor
lahf
out
inc
xor
out
retf
vmovups
pusha
jmp
sub
inc
inc
inc
sahf
jmp
dec
push
cmp
jge
lods
cmp
sbb
sbb
fidivr
sbb
pop
lods
es
sub
lahf
sbb
mov
or
ds
daa
bound
sbb
mov
jmp
sub
dec
pop
stos
(bad)
push
push
xchg
outs
nop
sbb
cmps
push
jno
lock
shr
lea
rol
add
inc
ds
mov
mov
sbb
scas
not
add
push
gs
sbb
add
pop
inc
out
ret
popa
fdiv
jno
mov
sbb
xchg
or
(bad)
stc
dec
sti
mov
dec
test
movs
movs
or
arpl
cwde
imul
jle
dec
xor
addr16
into
mov
dec
sub
jnp
inc
push
sub
enter
sbb
sub
in
cmps
dec
shr
sub
or
mov
cmp
inc
dec
cmc
nop
add
sbb
pop
adc
dec
call
out
adc
sti
jns
pop
rcr
imul
mov
inc
or
data16
jl
mul
stos
fs
mov
loopne
aam
sub
popa
out
dec
jmp
mov
lock
mov
imul
mov
jbe
mov
mov
cmp
xchg
les
or
(bad)
hlt
in
xor
stos
pusha
add
inc
fidivr
dec
add
pop
scas
mov
out
je
mov
daa
pop
sbb
or
aad
lods
lods
dec
xor
lds
cmp
pop
int3
sbb
mov
dec
and
and
adc
js
lods
jbe
sub
sbb
data16
mov
mov
jns
xor
ss
jecxz
jecxz
(bad)
hlt
mov
cmp
je
aaa
retf
cmps
mov
mov
mov
sbb
add
cld
inc
sar
cmps
mov
and
pop
pop
cli
sbb
aad
lea
loopne
push
jnp
fwait
cmp
call
jp
sti
in
mov
pop
imul
jae
mov
ja
cmp
fsubr
scas
bound
inc
loope
jmp
or
loop
and
shr
loopne
ins
sbb
into
lods
lock
sub
or
mov
std
fstp
in
imul
jns
sub
sbb
jmp
mov
popa
add
ror
ja
sub
retf
inc
adc
cli
inc
call
test
xchg
and
in
xchg
jae
shl
pop
cli
pop
cmp
mov
and
and
mov
push
lods
call
(bad)
jmp
fwait
clc
jg
mov
arpl
lock
jmp
inc
fdivr
ins
push
jns
ror
call
enter
push
push
loopne
nop
xchg
imul
rol
(bad)
cmp
rcr
sub
scas
inc
loopne
mov
jg
aad
jno
mov
imul
inc
movs
inc
mov
jne
in
cmp
es
jmp
lods
cdq
jp
ins
jne
lock
push
adc
fldenv
sub
jmp
aad
pop
mov
sbb
cwde
das
mov
in
fxch
stc
pop
xlat
mov
jg
fdivr
fcomp
or
mov
jns
hlt
icebp
outs
cmp
mov
inc
ret
dec
or
push
inc
ds
ret
sbb
in
imul
cs
leave
xchg
sub
fsubr
fist
ds
xchg
mov
mov
or
pop
mov
xchg
sahf
sbb
xor
xchg
cmps
or
sbb
sbb
xor
stmxcsr
cmps
add
data16
mov
sar
mov
cmps
lahf
shl
jg
xchg
mov
mov
or
out
adc
add
jl
add
lock
out
adc
dec
mov
ss
jl
sub
fiadd
xor
out
outs
movs
mov
mov
push
mov
(bad)
stc
(bad)
out
jge
pusha
cli
dec
imul
pop
mov
cmp
add
lods
js
cmps
dec
xor
xor
add
inc
popa
test
pop
inc
pop
mov
jl
repnz
je
loopne
or
daa
dec
adc
jno
test
icebp
int3
pusha
inc
jnp
mov
jle
adc
aam
push
dec
das
jmp
lea
js
xchg
xor
mov
adc
cmc
mov
loop
cmps
rcr
cmp
sbb
cdq
lahf
or
pop
mov
mov
out
cmp
out
or
mov
xor
fwait
adc
mov
in
xchg
(bad)
pusha
pop
ja
test
xor
sub
xor
sub
es
push
icebp
mov
test
in
sbb
push
jne
rcl
cmp
dec
test
xor
fld
add
rcl
mov
daa
sbb
mov
xchg
xor
add
push
mov
data16
dec
lea
pcmpeqd
push
in
ins
popa
test
in
fdiv
xchg
sub
adc
fidivr
imul
pop
sahf
shr
adc
add
sub
or
mov
(bad)
push
ins
or
cmp
sub
sbb
adc
rcl
push
(bad)
sub
sbb
movs
pop
or
js
lahf
inc
(bad)
push
loop
jo
and
inc
daa
aad
js
xor
std
into
pop
push
xchg
sub
out
ss
mov
mov
jecxz
daa
in
pusha
cmps
std
icebp
pop
arpl
cmp
jecxz
fisubr
sub
pushf
dec
imul
sub
test
xor
sub
jmp
shl
xor
adc
inc
adc
jne
pop
jl
mov
ror
cmc
fiadd
sar
push
dec
push
jns
(bad)
popf
mov
jo
scas
xchg
adc
inc
sti
cmps
pushf
cs
inc
aaa
shl
pop
(bad)
retf
rcl
mov
jns
push
mov
pop
sbb
fstp
jb
adc
inc
pop
mov
in
imul
pop
mov
stos
fwait
pop
jp
xchg
dec
mov
push
cwde
inc
adc
out
fimul
adc
xchg
ja
(bad)
jns
and
lods
pop
xor
imul
or
jg
jge
push
test
data16
lods
iret
push
(bad)
retf
aam
or
pop
jnp
lock
push
lock
call
(bad)
xor
scas
push
test
sub
fwait
jae
cld
jb
jmp
shl
imul
cld
jle
xchg
ins
add
dec
push
popa
push
ds
hlt
cdq
leave
int
cmp
or
xchg
mov
pop
in
mov
cmc
scas
add
xchg
adc
sahf
sbb
addr16
je
ror
or
add
js
mov
sbb
(bad)
ss
stos
call
add
lods
cmp
xor
in
push
xor
jecxz
pop
mov
dec
jbe
mov
dec
push
rcl
aas
repnz
inc
ins
in
loopne
test
sahf
xor
push
dec
pop
in
sub
pop
idiv
addr16
xor
xor
test
int3
jecxz
mov
mov
js
je
mov
xchg
mov
cli
jmp
les
or
mov
iret
pop
ficom
loope
in
dec
add
push
push
je
div
retf
aam
popf
idiv
in
ss
dec
pushw
inc
dec
xlat
mov
mov
add
repz
dec
jl
jle
dec
dec
lahf
lock
lods
popa
into
mov
xchg
retf
loop
jo
xchg
mov
sbb
pusha
aad
xor
sub
loope
call
adc
stos
push
shl
loopne
pop
xor
adc
push
cmp
sbb
or
dec
fcom
clc
jl
int
(bad)
fs
adc
dec
test
loope
sar
bound
fs
push
push
or
dec
outs
test
mov
adc
shr
repz
loop
movs
pop
stos
adc
lea
or
fstp
add
cmp
outs
outs
imul
hlt
xor
xor
lahf
aas
xor
leave
lock
fiadd
pop
mov
jae
sub
test
dec
int
mov
mov
mov
push
arpl
mov
fld
mov
mov
xchg
or
pop
fmul
sbb
icebp
mov
loopne
shr
sub
inc
add
lods
loop
stos
jl
and
daa
mov
push
and
dec
mov
sbb
fisub
gs
shr
in
pop
mov
dec
adc
gs
push
adc
adc
inc
sub
aam
adc
jbe
jg
fwait
dec
add
mov
cwde
(bad)
xor
adc
cmp
dec
out
add
cld
and
jge
push
test
fwait
cdq
push
rcl
inc
and
mov
pop
leave
add
popa
push
sahf
dec
repz
inc
xor
push
int3
mov
and
arpl
arpl
jge
xor
jge
inc
sbb
lods
dec
loop
in
pop
pop
push
shr
cmps
test
int
mov
adc
cld
fsub
dec
(bad)
hlt
adc
xchg
test
sub
fsubp
rcr
sub
push
mov
ins
push
sub
xchg
sub
xchg
sbb
addr16
push
inc
jnp
push
xchg
mov
xchg
mov
inc
add
pop
ret
xor
mov
rcl
pop
push
sub
enter
mov
jno
out
sahf
gs
dec
push
xchg
sbb
ficom
cmp
cld
xchg
mov
(bad)
addr16
jbe
movs
xchg
pushf
xchg
icebp
sub
or
add
test
or
push
rol
add
(bad)
cmc
cmp
(bad)
mov
pop
movs
mov
shl
cld
retf
add
repz
out
outs
mov
jnp
jecxz
pop
lahf
imul
inc
aad
addr16
and
adc
popf
clc
mov
jmp
mov
pop
pushf
mov
mov
jge
jnp
(bad)
mov
push
mov
ins
fsub
and
call
ins
mov
mov
fistp
cmp
mov
and
inc
cmps
retf
popa
xor
mov
or
iret
shl
add
(bad)
fsubr
and
(bad)
fadd
mov
enter
pop
cli
lods
movs
icebp
call
pusha
add
mov
mov
popa
dec
pop
jl
xor
push
popf
jnp
(bad)
pop
jns
int3
movnti
pop
int3
mov
add
dec
cmp
clc
mov
pop
mov
sub
nop
inc
fsubr
sub
icebp
loop
mov
div
ret
or
mov
and
mov
cli
sbb
lock
mov
lds
mov
lds
jo
(bad)
pop
push
call
adc
clc
fadd
cmovge
cmp
xor
or
dec
sbb
cwde
adc
sub
mov
sub
add
and
rol
push
jmp
je
sbb
cmp
adc
sub
or
jnp
sub
inc
nop
add
in
outs
pushf
dec
jl
inc
inc
sub
cmp
add
pop
cmp
inc
xchg
faddp
mov
stos
pop
cmp
cmp
adc
mov
cmc
cmps
mov
push
test
cmp
sub
xchg
rcl
or
out
pop
dec
jl
cmc
call
sahf
fstp
pushf
pop
sar
iret
outs
pop
and
test
sub
mov
push
inc
hlt
adc
int3
and
dec
push
inc
inc
push
repz
sahf
mov
cmp
imul
push
call
and
cld
jmp
cmp
imul
inc
pop
jns
repnz
je
xchg
sbb
jno
lds
mov
pop
adc
test
ret
mov
lock
push
cmp
add
adc
clc
xchg
mov
scas
movs
repnz
into
mov
cmp
mov
movs
adc
pop
cmc
and
mov
xchg
fs
adc
outs
xchg
push
stc
mov
sub
jg
repz
test
xchg
test
(bad)
je
push
out
(bad)
sti
xchg
jmp
cmp
aad
cmp
mov
pop
lods
cwde
popf
js
mov
scas
pop
and
push
mov
cmp
jnp
mov
pusha
mov
sub
outs
jmp
mov
inc
jb
push
and
sahf
ja
mov
retf
clc
shl
jmp
addr16
inc
xchg
and
push
fimul
pop
mov
sar
addr16
cld
xor
into
inc
pop
aaa
(bad)
fidiv
pop
mov
dec
adc
test
data16
xchg
cmp
ja
inc
xchg
adc
inc
out
aad
pop
mov
xchg
and
pop
(bad)
sub
loopne
inc
iret
or
pop
cmp
dec
int3
movs
je
retf
add
fisubr
push
cmp
pop
ret
shr
xor
popf
clc
and
cmps
cmp
mov
adc
xor
mov
sub
pop
mov
xchg
pop
push
adc
std
daa
pop
inc
push
sub
adc
mov
cmp
sbb
(bad)
adc
inc
mov
int
mov
xor
sahf
retf
pop
es
dec
jmp
adc
fist
call
sar
aam
sbb
pop
push
xor
pop
mov
pop
out
popa
or
(bad)
sub
iret
outs
jge
stos
jne
sahf
jnp
adc
fmul
test
jbe
lock
fidivr
lods
pop
ror
xchg
fist
out
inc
fs
das
ins
add
adc
add
pushf
xchg
cmp
sbb
es
pop
sbb
mov
clc
ss
lods
dec
add
ror
scas
iret
xchg
enter
popa
jbe
in
xchg
dec
cmp
psubw
bound
popf
xchg
movsx
ss
ror
out
(bad)
mov
cmps
ja
inc
mov
call
mov
jnp
xchg
mov
push
mov
xchg
adc
lahf
adc
push
or
(bad)
mov
fmul
sbb
bound
arpl
adc
cli
xchg
call
pop
dec
jle
inc
lahf
mov
aas
iret
mov
jp
mov
inc
mov
cdq
ja
loop
mov
pop
retf
or
clc
in
out
sar
push
in
loope
aad
push
fcom
sub
out
mov
jge
pushf
xor
cmp
and
(bad)
jle
or
(bad)
pop
dec
int
sub
pop
loop
imul
sub
int
jle
push
add
pop
enter
movs
dec
sbb
popa
push
shl
cmp
scas
ret
mov
pushf
clc
jne
jl
cmp
and
call
nop
fcmovnbe
ror
adc
cmp
push
jns
sub
jmp
cmp
out
push
pop
pop
mov
or
(bad)
cld
leave
dec
aaa
add
sub
xchg
mov
pop
ficomp
repnz
icebp
dec
jbe
stos
ja
and
int
mov
and
enter
call
dec
rcr
dec
sbb
outs
push
mov
or
stos
test
iret
mov
js
mov
cmp
xchg
dec
aas
(bad)
les
sbb
rcr
xor
mov
or
mov
(bad)
mov
les
(bad)
aaa
push
or
mov
xor
mov
and
mov
push
sbb
mov
addr16
or
sbb
push
gs
arpl
inc
xor
out
push
xchg
jle
dec
sbb
mov
cld
mov
pop
out
call
lock
adc
push
(bad)
jp
push
add
sub
push
mov
adc
test
dec
mov
add
dec
sti
push
inc
rol
nop
shl
xor
jae
jge
out
sub
nop
mov
div
and
jae
shr
imul
int
test
loop
adc
or
test
xchg
ins
xchg
mov
ja
pushf
mov
xchg
or
add
xchg
lods
sbb
in
lock
jno
mov
aam
adc
inc
jnp
and
xor
pop
mov
les
enter
(bad)
push
cmp
ret
aam
es
popf
iret
push
ss
add
inc
pop
xor
inc
jns
cld
mov
aaa
jne
mov
outs
mov
rep
add
mov
fimul
adc
popa
adc
pop
das
pop
inc
and
jmp
test
and
adc
cmp
cmps
sub
int3
pop
mov
hlt
(bad)
sbb
jns
pop
call
adc
push
sar
(bad)
iret
dec
mov
outs
lods
hlt
std
xchg
pushf
cli
stos
pop
mov
xor
xor
test
xor
jecxz
push
inc
adc
(bad)
aaa
shl
shr
fwait
outs
lods
lahf
and
dec
ss
mov
lods
xor
mov
and
in
in
mov
test
mov
jmp
retf
pop
test
lds
fstp
fwait
xchg
mov
mov
loopne
imul
imul
je
cmp
or
jns
and
ja
call
cmp
pop
xlat
je
push
pop
(bad)
stos
out
in
in
adc
movs
lods
shl
outs
retf
ret
jo
inc
mov
outs
dec
and
add
mov
ret
add
addr16
push
push
mov
mov
sahf
mov
mov
mov
and
retf
sbb
pop
inc
mov
mov
pop
mov
outs
test
xchg
cdq
sti
movs
mov
xchg
jo
sbb
int
jae
or
and
cwde
sbb
dec
aad
mov
pop
mov
pop
pop
shr
add
mov
jnp
out
jecxz
and
popf
fmul
sub
pop
xchg
xor
aad
push
pcmpeqw
outs
fcomp
sub
inc
fistp
pop
sub
ss
mov
pop
dec
fdivr
adc
and
lds
cmp
leave
xchg
fst
pop
add
sahf
scas
not
out
(bad)
sti
xchg
push
xor
fisttp
outs
das
cmp
push
dec
jge
cmp
cmps
sar
dec
dec
test
shr
add
cmp
mov
push
fwait
ret
mov
lods
fst
cmps
push
loop
xor
fwait
xor
push
push
in
popa
je
les
jno
jl
push
pop
lods
jnp
ss
movs
shl
inc
sti
cmp
int
or
aaa
jnp
or
pop
jg
or
dec
inc
cwde
gs
gs
inc
dec
cmc
les
and
and
retf
and
cli
cwde
nop
jmp
dec
mov
adc
leave
ret
in
dec
mov
test
jmp
stos
inc
ror
ds
and
mov
int
pop
ins
inc
jl
and
jnp
lds
rol
pop
and
popa
or
shr
pop
sbb
fwait
stos
iret
jno
mov
or
mov
movs
inc
ds
pop
and
fs
dec
outs
movs
mov
xor
stc
pop
pop
dec
pushw
or
push
(bad)
loopne
outs
shl
mov
cmp
pop
call
adc
test
xor
in
out
and
sbb
aas
outs
cmc
mov
fcmovu
es
inc
ret
shr
retf
into
push
div
sahf
mov
in
sbb
or
leave
test
mov
or
lahf
jmp
dec
add
out
xor
push
ds
dec
xchg
jmp
dec
jns
out
dec
and
daa
cmp
cmp
lods
mov
mov
call
(bad)
xchg
fiadd
lods
test
dec
je
sbb
ds
push
cld
fcomip
inc
pop
pop
adc
mov
std
and
and
mov
fcom
or
inc
push
xor
sub
lds
rcr
inc
sub
cmps
rol
and
mov
rol
scas
daa
les
movs
and
jmp
mov
adc
sbb
(bad)
fnstenv
(bad)
adc
sbb
fstp
fs
pop
nop
movs
push
xor
xchg
or
cmp
hlt
ror
inc
mov
jo
or
sub
jl
stos
fidivr
adc
mov
ins
or
sub
inc
sub
add
push
(bad)
outs
xchg
ret
mov
mov
aad
jmp
jns
or
jmp
hlt
enter
es
add
fldenv
out
pop
xor
mov
ror
ins
fild
or
pushf
fstp
push
cmp
aad
cdq
jmp
rcl
popf
fsubr
jmp
mov
adc
inc
icebp
mov
outs
sub
clc
sti
test
out
aaa
push
pop
(bad)
push
cld
sbb
or
inc
adc
mov
mov
out
mov
sbb
repz
je
bound
sti
rcl
sub
dec
add
(bad)
dec
xchg
sar
mov
mov
icebp
je
call
test
xor
dec
es
cmc
adc
jl
add
jnp
rcr
or
mov
sub
push
mov
cmp
lods
ror
lahf
dec
fst
ffreep
aam
scas
data16
xor
ds
scas
out
or
ficomp
xchg
mov
out
out
das
and
add
clc
imul
xchg
shr
stos
inc
cmps
jg
xor
test
fdivr
xor
or
xor
int
es
outs
jp
out
inc
sbb
xlat
(bad)
mov
loop
mov
rcr
gs
ja
dec
mov
fwait
mov
cmp
in
and
mov
adc
mov
cmc
pushf
jmp
fprem
loopne
fbstp
add
add
xor
mov
mov
jae
sbb
sbb
mov
out
ins
dec
sub
rol
out
xor
iret
xchg
cs
cmc
mov
cs
push
xchg
test
imul
leave
mov
and
popf
(bad)
fs
adc
imul
aam
xor
mov
mov
xchg
mov
imul
out
inc
ret
mov
push
in
outs
or
push
cld
imul
lock
mov
scas
ret
push
mov
out
mov
jmp
out
or
push
push
jmp
ror
icebp
dec
(bad)
sbb
rol
cmp
xchg
jae
(bad)
aam
push
sbb
cs
adc
repnz
push
(bad)
push
fild
icebp
add
cld
inc
jmp
sub
in
adc
jg
dec
fisttp
loope
in
and
push
jp
push
int3
pop
jle
fst
fnstsw
dec
shl
sub
fcmovu
ss
push
push
sbb
loop
ins
movs
(bad)
(bad)
call
adc
push
fst
jl
mov
enter
inc
xor
hlt
aas
paddw
add
pop
pop
imul
pushf
pop
js
int
shl
xor
adc
mov
mov
pop
inc
or
arpl
jmp
mov
movs
lods
dec
fs
dec
push
cmp
mov
stc
(bad)
loope
aad
mov
ss
outs
cdq
mul
cmp
pop
xchg
cmps
sub
lahf
jno
mov
int
inc
popf
sub
mov
pop
stc
mov
or
push
fsubr
mov
xchg
rcr
mov
push
push
pop
xchg
jbe
adc
repz
cmp
sub
mov
jnp
imul
sbb
retf
imul
sbb
adc
or
xor
inc
xchg
or
and
and
mov
add
dec
xor
mov
sbb
or
test
fcomp
xchg
adc
or
adc
push
clc
inc
mov
adc
lds
scas
es
shl
add
test
scas
fsub
repz
cmp
lahf
mov
add
in
sbb
add
or
bound
stos
(bad)
xor
pusha
xor
push
mov
into
lahf
xchg
mov
ret
imul
mov
add
cmp
push
pusha
out
mov
inc
(bad)
(bad)
ins
ja
arpl
lock
nop
sbb
fxch
adc
xchg
test
iret
push
sbb
jno
mov
fistp
mov
out
sbb
pushw
cmp
ja
mov
pshufw
cmp
pop
add
adc
sbb
push
jecxz
add
out
mov
sti
add
or
xlat
pusha
outs
stc
push
mov
ror
xchg
lods
lods
jle
popa
cld
cdq
retf
add
push
push
sub
popa
das
movs
mov
lahf
xchg
mov
int3
cmp
ror
pop
mov
pusha
cmp
test
(bad)
or
arpl
xor
sbb
xchg
imul
jo
nop
adc
jmp
mov
shld
or
push
mov
pop
aaa
dec
inc
push
fsub
xchg
mov
not
daa
jno
(bad)
adc
and
jl
pusha
lds
mov
fisttp
repnz
cmp
jp
outs
test
and
mov
or
dec
loope
sub
and
test
sti
mov
mov
push
dec
push
daa
jp
adc
out
in
xchg
xor
repnz
rcl
mov
test
sbb
or
fnstcw
sub
test
sbb
in
cmp
fmul
retf
push
sti
dec
and
movs
icebp
rcr
jbe
jne
and
gs
cmp
inc
int3
fsub
mov
xor
movs
fld
xchg
xchg
les
repnz
mov
mov
fwait
cmps
or
mov
out
pop
xchg
pop
adc
(bad)
je
loope
mov
sbb
xchg
cmp
das
dec
sub
jge
je
outs
push
int
hlt
mov
or
or
push
out
(bad)
jae
(bad)
ins
cmc
inc
bound
push
lahf
cmp
mov
lds
out
push
ret
ja
sti
fs
cmc
jmp
mov
fistp
cmp
stos
pop
aam
xlat
ja
movs
or
cmp
or
mov
jb
(bad)
push
(bad)
stos
xor
(bad)
mov
fld
mov
cmps
push
mov
sbb
test
stos
jns
mov
cld
shl
test
push
push
(bad)
mov
push
call
inc
lds
fcomip
mov
xlat
push
dec
outs
les
popa
cmp
dec
lahf
inc
cmps
pop
inc
out
mov
out
movs
fimul
cmp
lahf
add
in
dec
push
(bad)
(bad)
call
mov
inc
or
sbb
rcl
test
push
add
inc
adc
adc
lods
sub
daa
(bad)
push
repz
and
xchg
add
aad
xchg
pop
daa
pop
push
movs
jmp
dec
imul
push
cmp
enter
out
movs
call
sbb
jo
jl
pop
cmp
in
stc
iret
fs
test
mov
xchg
xchg
icebp
mov
nop
xchg
hlt
cmp
lock
ret
jg
fstp
mov
std
test
jecxz
push
add
in
int3
xchg
jns
iret
stos
test
mov
sbb
inc
mov
pop
mov
xor
cmp
and
fmul
adc
shl
es
jae
push
and
shl
fsubr
hlt
dec
inc
xchg
or
icebp
sbb
cwde
dec
pop
pop
sub
or
xchg
sub
mov
cmp
inc
shl
dec
adc
test
cwde
gs
es
mov
add
mov
mov
cmp
push
push
aas
pop
mov
(bad)
into
pop
retf
pop
movs
sub
movs
or
fisubr
(bad)
retf
test
cwde
retf
pop
pop
sub
dec
add
fisubr
fistp
jg
sub
outs
(bad)
ja
adc
push
not
mov
pop
mov
jmp
call
push
adc
mov
jb
jb
daa
mov
fcomp
aad
scas
mov
jmp
shr
or
add
xchg
jbe
jbe
push
outs
and
sub
mov
jno
(bad)
outs
ret
mov
sbb
or
retf
dec
push
dec
push
jbe
dec
dec
mov
mov
pop
xor
jl
jmp
cmps
jl
rcl
push
cdq
movs
popf
and
out
or
xor
int
and
das
pop
mov
pop
xor
test
jl
xchg
push
(bad)
sbb
xchg
mov
mov
xchg
lock
dec
in
jno
enter
js
and
or
mov
shl
inc
jns
rcl
cmps
das
cdq
in
dec
pop
sbb
rcl
into
(bad)
adc
test
dec
xchg
mov
mov
sub
loopne
shr
sub
lahf
cwde
data16
mov
mov
mov
js
add
pop
(bad)
dec
jmp
cli
clc
(bad)
sar
pusha
pop
in
lock
push
dec
cmp
js
mov
cld
inc
push
jno
sbb
int
aaa
jae
je
imul
pop
dec
cmc
movs
push
movs
cs
jbe
dec
stos
out
sub
or
xchg
push
icebp
add
jmp
bswap
mov
push
add
and
sbb
fimul
call
jb
lods
enter
mov
jl
fadd
cli
fcomp
mov
in
aam
sbb
js
jno
adc
push
sbb
mov
push
inc
loope
and
dec
add
pusha
ja
mov
mov
or
jbe
aaa
jecxz
es
(bad)
hlt
cs
xchg
lea
fsubr
sbb
cwde
pop
cmp
cs
dec
into
popa
sahf
or
das
mov
ret
push
in
test
jae
push
xchg
repz
data16
xor
sbb
fwait
sbb
xchg
mov
sub
mov
cmps
push
inc
fstp
(bad)
(bad)
dec
int
and
inc
adc
ja
adc
mov
inc
out
call
inc
les
mov
std
and
sub
sub
scas
call
push
lods
mov
adc
or
imul
push
inc
daa
push
mov
add
jnp
pop
jg
lods
(bad)
outs
jne
xchg
add
inc
sub
not
lods
(bad)
loop
push
pop
stc
test
or
aas
les
mov
mov
js
add
push
outs
push
inc
jge
ja
pop
test
mov
pop
dec
ins
mov
movs
sbb
cmps
or
jbe
and
test
pop
jecxz
jecxz
aad
mov
sbb
das
pop
sahf
loopne
fidiv
ret
xor
and
repz
push
out
jmp
sub
sar
mov
sbb
sub
mov
fwait
jno
jp
sti
and
pop
sbb
dec
sbb
inc
mov
daa
mov
enter
gs
arpl
and
xchg
gs
adc
test
cmp
and
ja
call
mov
retf
pop
pop
cmps
sahf
fist
les
pop
and
adc
pusha
add
mov
xchg
neg
jle
xchg
enter
pop
sbb
or
int
icebp
inc
mov
inc
int
add
xchg
(bad)
push
sub
jmp
stc
test
movs
out
push
jnp
push
lahf
inc
scas
ret
add
pop
sbb
stc
xchg
retf
sub
dec
in
xchg
xchg
repnz
mov
addr16
inc
fisubr
xchg
loop
retf
dec
pop
mov
mov
sub
repz
jge
jl
fisub
frstor
jae
addps
pop
dec
push
(bad)
in
jo
jge
cmps
adc
movs
nop
and
jbe
int
push
sbb
sti
inc
gs
rcl
nop
bnd
inc
sub
and
pop
add
xor
adc
xchg
hlt
cld
push
mov
movs
rcr
popf
ja
adc
jo
fisubr
dec
lock
push
pop
sbb
jecxz
push
(bad)
lods
out
jge
inc
jmp
imul
fstp
push
mov
mov
push
sbb
xchg
inc
mov
fs
sub
push
loopne
inc
and
xor
fist
or
mov
popf
sar
mov
add
xchg
pop
das
pop
adc
lds
stos
ret
arpl
nop
stos
sbb
sub
cmps
nop
xchg
mov
ss
outs
cld
pop
leave
in
sub
pop
sbb
mov
sar
and
pop
pusha
adc
mov
imul
mov
xchg
test
sbb
inc
jnp
dec
mov
mov
dec
in
cmp
sub
mov
sahf
jge
sub
and
in
and
push
dec
stc
int
or
inc
(bad)
cwde
outs
out
push
loopne
in
scas
inc
or
cwde
shr
cmp
sbb
ficom
pop
aad
inc
lahf
loopne
mov
xchg
inc
xchg
sar
xchg
stos
or
inc
(bad)
mov
in
mov
jmp
retf
jecxz
ret
inc
cmps
sub
out
sti
callw
ror
aas
out
mov
es
mov
jl
sub
inc
xor
cdq
jae
mov
aam
sub
and
(bad)
mov
pop
inc
fs
adc
cmc
fs
aas
jecxz
ss
scas
dec
dec
test
adc
inc
outs
mov
ret
scas
sub
jno
mov
ja
test
pop
mov
dec
mov
shld
mov
call
push
inc
mov
push
xchg
fistp
in
iret
adc
mov
mov
and
aam
fnsave
xchg
frstor
enter
fiadd
jno
cld
call
loope
mov
rcr
rcl
addr16
or
xor
sti
add
lahf
dec
mov
test
pop
pushf
xchg
lods
pop
retf
pusha
sub
xor
lods
daa
or
jns
push
add
les
pop
mov
out
pop
or
xchg
clc
addr16
push
mov
hlt
icebp
inc
div
and
push
add
cmp
shr
xchg
ins
xor
jo
ins
pop
mov
cmp
stos
test
sbb
cmps
jecxz
sub
add
mov
out
inc
cs
call
xchg
pop
cwde
xchg
imul
ins
mov
enter
fisubr
mov
in
xchg
mov
fwait
in
out
pop
pop
hlt
cmp
cli
and
or
test
cmps
and
sahf
lea
dec
(bad)
pop
sub
jmp
mov
push
dec
jmp
aas
dec
ins
pop
push
push
ror
sbb
(bad)
stos
out
test
cmp
inc
mov
rol
sahf
cmps
sbb
xor
cmp
adc
dec
mov
and
dec
mov
dec
bound
adc
xchg
pop
xchg
leave
mov
cmp
push
(bad)
(bad)
out
repnz
sbb
jp
mov
dec
push
xor
push
sbb
int3
lahf
ins
mov
mov
lock
in
lods
xchg
out
xor
mov
pop
test
cmps
mov
and
jbe
lods
and
and
dec
out
fs
xor
enter
pop
test
mov
xchg
mov
iret
push
icebp
or
jp
mov
xchg
retf
sbb
imul
fwait
adc
cmc
retf
mov
sbb
mov
out
in
fstp
stos
leave
mov
sbb
into
mov
push
and
dec
cwde
or
test
sbb
ja
xor
jo
loop
pop
out
das
movs
cld
fnstenv
clc
mov
and
int3
or
std
lea
retf
repnz
mov
stc
test
lds
add
mov
in
xchg
or
xchg
mov
scas
mov
stos
in
cwde
mov
arpl
and
xlat
shr
fs
or
cmp
xchg
icebp
cdq
push
shl
sub
test
repz
push
jo
cwde
xor
sub
mov
pop
dec
push
int
add
cld
das
mov
aam
movlps
mov
ja
push
mov
xor
aad
cmp
push
out
jmp
inc
mov
pop
js
in
cmp
mov
pop
into
int3
popa
dec
loop
cmp
inc
or
push
imul
js
xor
or
lods
cmp
retf
push
popa
xor
cli
xchg
or
sbb
dec
scas
data16
fsubr
and
into
cmp
sbb
inc
push
std
and
cld
sbb
mov
jbe
sub
adc
out
xor
jecxz
xor
push
push
sti
ret
fs
jecxz
pop
mov
pop
retf
call
in
ficomp
mov
aam
inc
mov
repz
mov
dec
jb
ds
pop
push
push
cmps
mov
(bad)
push
js
ds
sahf
sub
xchg
cli
mov
cmp
fist
mov
push
fcom
mov
into
int
call
pushf
jge
hlt
pop
arpl
rcl
inc
jae
sub
fbld
jecxz
push
enter
sub
lods
mov
loop
xchg
sub
js
sahf
psubusb
pop
(bad)
aas
cmp
repnz
js
xchg
inc
lods
(bad)
or
and
and
(bad)
scas
loopne
jns
sub
mov
inc
fsub
push
repz
mov
mov
mov
add
mov
push
xchg
jne
dec
in
mov
in
leave
sbb
not
ror
cmp
push
loope
and
push
sub
push
aas
push
je
push
rol
xchg
cmp
inc
js
sbb
mov
adc
mov
pop
sub
aam
jmp
hlt
idiv
xchg
or
int
shr
cld
fst
neg
cwde
aam
mov
pop
cwde
pop
enter
je
mov
dec
mov
popa
and
out
sbb
dec
test
or
dec
dec
mov
cmp
fnsave
test
xor
les
sub
lds
fisubr
sub
xchg
pop
adc
or
ins
jnp
lock
and
outs
movs
fucomip
jmp
or
jp
dec
stos
pop
iret
mov
and
outs
out
mov
outs
pop
jno
loop
repz
xor
dec
sub
mov
pop
cmp
pop
cmp
out
adc
stos
lds
mov
mov
aad
aad
push
mov
test
jg
mov
push
mov
pop
jb
fstp
pusha
enter
test
push
sar
xor
adc
sub
test
sbb
mov
ret
rcl
mov
pushf
ds
xor
loope
ja
in
(bad)
out
jnp
cmp
lods
mov
lock
das
add
test
pop
push
push
fnstsw
jg
jbe
pause
mov
push
not
sub
aaa
call
push
(bad)
cwde
sbb
sbb
adc
outs
into
dec
pop
dec
and
xchg
cmps
inc
pop
sbb
dec
adc
push
add
dec
or
mov
loope
cmps
and
icebp
shl
aaa
dec
jo
mov
in
sbb
shl
dec
(bad)
xchg
pop
leave
cmp
ins
sbb
adc
ins
xor
adc
hlt
mov
xlat
out
(bad)
in
out
sbb
movs
icebp
movs
push
xchg
ins
in
bnd
mov
cmp
je
cmp
xor
leave
mov
mov
dec
adc
adc
mov
sub
adc
test
jmp
jle
xor
mov
setp
sub
xchg
fs
popf
(bad)
push
shl
pop
lock
sti
push
jae
jno
push
jbe
push
cdq
imul
inc
or
popf
xchg
cli
sar
(bad)
(bad)
sub
out
mov
into
sbb
cmc
xchg
stos
xchg
xchg
das
xchg
add
inc
pop
idiv
xor
pop
fcomp
sahf
sbb
and
dec
sbb
das
jp
ds
jae
push
mov
(bad)
jbe
pop
sbb
jg
pop
inc
add
or
or
jno
scas
popa
popf
and
jmp
cmp
sub
mov
jg
xchg
cmp
out
and
push
and
pop
xor
xchg
pop
in
pop
pop
fild
jl
(bad)
fs
jmp
pop
mov
jns
mov
or
and
arpl
test
cmp
mov
add
adc
retf
retf
inc
xchg
imul
mov
not
mov
rcr
push
lods
dec
in
sub
sbb
test
nop
dec
es
inc
pop
pop
leave
daa
into
enter
sub
jp
xchg
out
(bad)
cmp
mov
xor
sahf
xchg
xchg
pop
int
mov
(bad)
or
adc
imul
dec
jecxz
iret
sahf
and
sbb
cli
mov
cmps
push
xchg
addr16
dec
xor
mov
call
inc
pusha
add
popf
pop
out
pop
js
cwde
cs
or
ins
stos
pop
push
jg
add
mov
sub
cmp
xor
xchg
mov
movs
pop
cmp
adc
adc
sahf
test
fs
cmc
add
add
pusha
xchg
ins
dec
xor
fadd
jge
mov
psubw
imul
mov
dec
adc
es
mov
mov
lock
jnp
push
bound
cwde
lahf
mov
or
and
dec
xor
add
pop
push
div
js
dec
xor
add
mov
inc
xchg
or
out
inc
cmp
xor
sbb
push
retf
lods
pusha
xchg
icebp
dec
lds
cmp
mov
lea
repnz
sub
out
popa
adc
push
dec
fs
dec
cmp
retf
mov
in
loop
jmp
push
and
nop
addr16
cmc
in
cmp
add
inc
aam
retf
sbb
mov
dec
sub
call
dec
sub
adc
or
ins
aam
es
cmp
sub
mov
loop
xor
sti
mov
popf
cld
mov
lahf
inc
sub
shr
ins
ret
in
scas
arpl
push
mov
or
push
rcr
push
jecxz
retf
fs
mov
xchg
adc
xchg
gs
lods
sbb
mov
dec
les
or
dec
lds
and
push
push
push
test
repnz
xor
fldcw
inc
shr
mov
ds
enter
ja
sub
xchg
push
bound
xchg
jnp
sub
leave
push
jb
jp
lods
or
mov
fsub
out
sbb
dec
inc
out
adc
mov
shl
push
mov
mov
inc
jne
out
xchg
(bad)
fidiv
sbb
dec
pop
in
repz
dec
mov
xchg
push
pop
sbb
sub
xchg
push
cwde
outs
mov
pop
cmc
pop
adc
push
jae
jo
pop
push
int
push
rcl
mov
or
jmp
shl
in
enter
jmp
(bad)
xlat
add
bts
jecxz
iret
push
stc
inc
or
push
jmp
nop
mov
mov
fild
sub
or
dec
aam
nop
fst
enter
push
sbb
test
test
inc
stc
sbb
not
jg
cld
dec
inc
movs
jmp
int3
adc
push
arpl
sub
loopne
jg
cmp
(bad)
sbb
push
out
movs
clc
js
pop
mov
cmp
mov
push
mov
std
xor
pop
idiv
lahf
iret
mov
mov
outs
cmc
sbb
cmp
mov
popa
ins
or
cdq
pop
jmp
jg
inc
icebp
into
ins
aad
(bad)
jle
int
stos
ss
test
pop
lods
movs
and
pop
je
jl
aad
ja
mov
cdq
inc
mov
fsubr
adc
enter
les
or
mov
scas
pop
pop
fnsave
(bad)
iret
sbb
mov
call
sub
rcl
dec
cwde
xor
fld
jae
(bad)
xor
repz
and
loope
test
sar
in
lds
fdivr
test
inc
cld
sub
dec
jmp
lock
js
fwait
pop
push
push
test
sar
arpl
js
fild
mov
jp
je
xchg
jmp
retf
(bad)
mov
sub
add
adc
sub
and
pusha
mov
mov
push
jo
xchg
and
fistp
nop
dec
mov
jmp
or
call
push
scas
ins
mov
sub
pop
out
int
bound
das
pop
push
pop
mov
pop
div
dec
sbb
mul
mov
(bad)
xlat
sbb
mov
aaa
lahf
mov
and
stc
mov
lds
xor
adc
adc
or
xor
adc
mov
addr16
and
adc
imul
inc
sub
cmp
jmp
push
out
nop
sub
in
and
loopne
xor
adc
jmp
jmp
xchg
inc
adc
and
xchg
and
mov
cmps
lahf
mov
shr
push
fsub
imul
(bad)
push
bound
and
xor
popf
add
es
fistp
xchg
lock
loope
pushf
pop
rcr
shr
cmp
mov
rcl
push
enter
fnop
imul
inc
ins
fmul
sub
fnsave
push
call
pop
pop
in
in
mov
mov
adc
stos
adc
pop
scas
push
lea
jecxz
push
xchg
in
rol
xor
sub
into
into
xor
add
adc
test
dec
mov
xor
call
cdq
adc
leave
daa
sub
lahf
xchg
adc
inc
pop
xor
or
mov
cmps
or
rcr
xor
add
clc
outs
setno
repnz
ret
lock
pop
push
bound
lahf
arpl
int
lods
neg
inc
and
mov
cmp
push
loop
mov
mov
ror
mov
xor
mov
sub
lea
mov
loopne
push
dec
xor
cs
pop
xchg
dec
fcmovne
rol
mov
dec
pop
cmp
dec
cmps
pop
pusha
mov
imul
sbb
sub
repz
mov
add
and
rol
cmp
fsub
mov
test
xor
jg
add
(bad)
fst
mov
and
in
cmp
in
sbb
jmp
sub
fdivr
test
add
pop
mov
xchg
hlt
je
aam
sbb
xchg
jo
lods
inc
dec
mov
dec
repnz
and
cmp
push
jb
jle
jae
stc
jmp
mov
mov
inc
push
ins
sbb
cli
dec
in
(bad)
test
lds
bound
neg
inc
rcl
cmp
lahf
cmc
inc
es
jp
pop
mov
pop
repnz
cmp
enter
bound
cmp
inc
mul
je
std
and
icebp
mov
push
sysret
pop
sahf
fs
(bad)
fdivp
clc
fdecstp
cdq
push
mov
jl
fbstp
or
push
mov
sub
ds
add
scas
fs
icebp
inc
(bad)
mov
fwait
cmp
inc
aam
sahf
loope
and
sti
mov
ins
and
and
add
and
gs
test
mov
out
inc
adc
fstp
jecxz
cmp
leave
loop
(bad)
sub
js
sbb
push
dec
test
sbb
add
mov
adc
mov
stos
pusha
test
aas
scas
repz
sub
push
fstp
sub
jmp
jp
(bad)
rcl
push
jle
add
popa
jmp
rol
test
mov
inc
or
xor
inc
test
and
mov
mov
mov
xchg
sub
ds
mov
(bad)
jnp
cld
mov
icebp
fidiv
jo
rcl
mov
xchg
hlt
pop
test
mov
inc
cwde
cwde
jmp
data16
mov
jne
repz
int3
and
ficomp
lea
xor
test
push
inc
mov
aam
dec
movs
pop
inc
stos
mov
cmp
mov
dec
call
int
(bad)
and
add
and
movs
inc
jno
in
cmp
jmp
(bad)
sub
call
stos
adc
es
nop
push
lock
mov
lea
jl
fild
scas
ss
int3
fild
jl
jp
mov
ds
xchg
push
int
add
push
mov
retf
movs
into
jmp
nop
sub
jo
and
adc
popf
loopne
pop
inc
lods
cmc
mov
es
cdq
retf
mov
xchg
sbb
bswap
mov
imul
sar
mov
movs
mov
pop
inc
scas
inc
sahf
inc
or
pop
test
in
repz
xchg
mov
jne
sub
mov
shr
cmp
mov
pop
icebp
in
(bad)
mov
mov
outs
les
mov
icebp
push
xchg
and
xchg
into
ficom
inc
jmp
outs
dec
leave
out
xor
inc
(bad)
loope
out
ja
or
lds
gs
fadd
not
(bad)
push
adc
or
pop
mov
pop
cs
or
lods
retf
test
mov
inc
imul
mov
icebp
shl
je
sub
rcl
aaa
pop
sti
jns
dec
mov
or
push
dec
jge
imul
add
push
dec
hlt
push
(bad)
push
gs
mov
or
scas
test
(bad)
js
cli
push
cmps
(bad)
popa
data16
mov
and
add
jmp
cwde
sbb
out
call
stc
push
sub
leave
xor
out
mov
xor
outs
popa
loopne
scas
push
mov
mov
out
jmp
shl
(bad)
jbe
cwde
jb
mov
ret
add
dec
cmp
add
(bad)
rcr
(bad)
jp
cmc
xor
ror
jecxz
icebp
aas
rcr
nop
dec
push
push
jle
dec
mov
call
fsubr
ds
rcl
aaa
cmp
sti
inc
push
and
in
pop
sar
mov
sub
pop
mov
nop
jle
sub
test
inc
cmp
mov
fs
out
xor
inc
inc
int
rol
inc
shr
mov
sti
push
(bad)
(bad)
retf
movs
inc
inc
pushf
std
ins
xchg
ins
sub
adc
pop
stos
and
jl
or
sub
mov
mov
int3
push
adc
or
mov
mov
popf
inc
mov
nop
dec
or
xchg
stos
cli
pop
cdq
mov
rcr
je
jp
out
out
jnp
mov
arpl
ret
or
sar
and
daa
in
fst
jb
mov
in
sbb
dec
xor
mov
and
sbb
xchg
push
lds
xchg
ja
in
ret
add
xchg
imul
mov
pop
add
jl
popf
mov
push
loopne
stos
push
sbb
jp
sbb
bound
mov
cmp
push
inc
sub
ins
jg
cdq
dec
jo
aad
cdq
sti
shl
ficom
jns
aam
inc
or
jle
pop
push
pop
xor
cmps
je
mov
and
test
aam
mov
xor
mov
push
sub
sub
jmp
mov
movs
cdq
sub
pop
scas
jno
unpckhps
inc
(bad)
dec
fsubr
ret
data16
ins
xor
push
xor
and
xchg
push
ret
add
lock
retf
or
dec
sbb
mov
fiadd
xor
mov
sub
push
push
loop
scas
push
and
fcmovne
mov
jle
dec
xchg
mov
xor
jae
cmp
retf
nop
inc
cmp
sub
jge
popa
in
mov
or
push
out
mov
lods
aad
pop
xor
pop
in
push
xlat
pop
cmps
(bad)
clc
mov
addr16
data16
push
mov
aaa
lds
pop
icebp
repz
div
outs
imul
pop
lock
call
xchg
fldenv
call
xchg
mov
scas
js
inc
inc
repz
add
dec
xor
and
test
inc
test
rol
ss
mov
addr16
mov
imul
push
xor
lahf
mov
push
sbb
sub
sub
imul
enter
daa
jae
ror
gs
push
hlt
jbe
or
dec
sub
xchg
in
icebp
jnp
lock
and
out
push
push
sbb
frstor
rol
cdq
add
mov
inc
jp
mov
pop
mov
les
inc
movs
mov
sti
(bad)
mov
clc
into
dec
inc
cmps
cmp
stos
test
mov
popf
sbb
and
push
xchg
aas
int3
(bad)
jae
mov
ret
(bad)
xchg
jp
xchg
nop
gs
xor
ins
mov
mov
fdivr
push
dec
jno
xchg
adc
jno
adc
or
adc
xor
push
cmp
jae
adc
cmp
test
jl
cmp
xor
cmc
inc
movs
mov
aaa
push
adc
fstp
and
or
aas
sti
das
mov
cmp
add
fidivr
mov
fidiv
loop
popa
pop
iret
push
hlt
pop
mov
enter
dec
jle
mov
rol
into
xor
sub
add
add
call
add
jg
add
mov
xor
mov
sub
call
enter
fsubr
cwde
cdq
(bad)
xchg
daa
mov
pop
fst
cmp
xlat
or
push
dec
gs
std
test
jo
clc
(bad)
jns
dec
adc
dec
and
data16
lods
call
xchg
jecxz
pop
jecxz
inc
popa
stos
ja
js
xchg
sbb
add
cmps
push
mov
rol
outs
mov
scas
sbb
dec
mov
dec
ds
jb
(bad)
pop
in
fsub
arpl
in
pop
cdq
out
gs
add
dec
cmp
rol
int3
pop
mov
xchg
iret
push
mov
stos
sub
xor
push
cmp
bound
push
xchg
loopne
pop
jmp
fs
and
(bad)
or
retf
mov
lds
cmp
jg
cmp
in
add
movs
pop
cmps
in
add
in
jae
clc
mov
imul
inc
jb
mov
inc
scas
ins
push
xor
imul
outs
fisubr
sub
outs
icebp
pop
push
mov
xor
mov
pop
mov
pop
mov
imul
(bad)
sbb
loopne
fild
fisttp
sti
or
call
inc
repnz
push
js
aaa
pop
fucom
neg
and
hlt
xchg
xor
mov
in
iret
cmp
lea
adc
xchg
popf
mov
push
call
jb
or
sub
cli
int3
loope
lock
clc
(bad)
stos
xchg
(bad)
fbld
les
mov
pop
retf
and
jo
ins
xlat
sub
fmul
mov
ds
push
xor
das
jb
jno
jmp
popa
aas
mov
xlat
in
push
pop
dec
push
in
cld
(bad)
or
jbe
mov
ficom
cwde
fcmovb
test
push
imul
ins
xchg
xchg
mov
adc
mov
icebp
inc
jge
out
inc
sub
retf
push
xchg
cmp
sub
push
sbb
push
mov
ins
cdq
into
shr
movs
adc
xor
test
hlt
cmp
and
jnp
mov
inc
push
push
mov
mov
or
mov
fwait
push
or
mov
arpl
ins
test
push
daa
inc
dec
arpl
test
ins
call
ds
scas
sbb
movs
add
clc
mov
mov
in
pop
jl
jmp
xor
cmp
add
(bad)
or
daa
out
ins
shr
adc
cwde
dec
push
aad
push
mov
fstp
inc
shl
(bad)
js
or
jnp
daa
sbb
cli
repz
sub
xor
push
pop
push
mov
imul
and
aad
aaa
and
ds
mov
retf
mov
scas
(bad)
jmp
pop
data16
cmp
cmc
sub
xchg
adc
ins
clc
mov
push
ins
stos
in
aam
int
push
mov
push
sbb
movs
mov
mov
arpl
dec
sbb
add
clc
adc
xlat
xchg
fdiv
sub
(bad)
lock
hlt
push
cs
add
out
pop
mov
dec
mov
pusha
outs
fstp
xor
mov
mov
sub
jge
push
dec
or
sub
push
pusha
inc
pop
call
inc
cmps
sub
jmp
pushf
das
sbb
push
lods
dec
adc
sub
and
jmp
les
shl
shl
adc
jmp
jb
xor
sar
pop
push
outs
outs
xor
dec
mov
inc
xchg
mov
xor
sbb
adc
xor
lahf
hlt
or
sbb
xchg
mov
or
jae
test
aas
sub
fild
scas
sahf
retf
mov
inc
outs
dec
test
or
cs
xor
push
push
or
stos
push
mov
or
pop
sbb
js
cmp
inc
rcr
div
lea
mov
and
cdq
adc
stos
fisub
jb
loopne
mov
inc
and
cwde
mov
cmps
std
lds
xor
xor
pop
cmp
lock
jno
fstp
pop
outs
stc
mov
inc
pop
push
add
int3
(bad)
sub
dec
inc
pop
ss
fdiv
mov
shr
enter
loope
dec
in
out
xchg
sbb
jl
out
add
je
dec
(bad)
fdiv
dec
scas
adc
inc
lods
pop
mov
inc
in
inc
jbe
int3
mov
jg
lea
fnsave
pop
shl
test
mov
mov
mov
std
test
inc
and
inc
or
sbb
out
push
out
mov
add
imul
add
sbb
(bad)
add
push
popf
add
gs
or
pop
pusha
pop
inc
jmp
adc
mov
jge
dec
pushf
sbb
mov
into
sub
mov
mov
adc
mov
pusha
and
inc
call
pop
(bad)
push
popf
fistp
mov
pop
and
pushf
sub
lods
cld
imul
dec
sbb
neg
mov
adc
xlat
std
punpckldq
pop
or
xchg
jo
frstor
push
or
iret
inc
jbe
int
movq
stc
inc
mov
xchg
aad
je
inc
cmp
call
fistp
js
add
inc
xor
fldenv
test
cmp
mov
sbb
jne
ror
out
jp
inc
xor
fld
mov
lods
dec
pop
mov
dec
sbb
cli
jbe
mov
sub
adc
movs
xor
mov
in
pushf
mov
xor
xchg
in
outs
das
cmp
mov
push
js
mov
jmp
scas
scas
sbb
in
and
sbb
add
bound
fwait
mov
and
xor
fs
loop
sti
out
and
sbb
xchg
stos
shl
or
pusha
rol
jne
dec
repz
xlat
and
xor
and
cmp
xor
jl
add
(bad)
adc
add
mov
(bad)
ins
push
push
and
fmul
into
cld
ja
test
cmc
or
sub
in
mov
pop
test
(bad)
mov
fiadd
shl
pop
add
cmp
data16
imul
scas
out
fs
cmc
mov
aaa
add
ins
mov
mov
cmp
sbb
stc
retf
or
aaa
leave
adc
and
ja
in
adc
cmp
jbe
pop
out
xchg
ror
arpl
ins
popf
push
jne
loop
push
jmp
inc
cmp
mov
cs
js
lea
xchg
adc
retf
out
cmp
mov
in
shl
popa
ss
mov
pop
dec
adc
dec
fcomp
sbb
into
test
push
mov
xchg
jnp
add
xlat
rcl
adc
inc
xor
adc
or
cmps
mov
int3
cmps
or
arpl
test
sbb
shr
jecxz
test
and
loop
push
call
push
and
jmp
sub
les
inc
pushf
in
rcl
icebp
pop
(bad)
out
call
jo
push
cmps
dec
dec
and
cmp
push
and
adc
cmps
push
mov
jnp
lock
nop
test
jnp
dec
(bad)
icebp
cmp
push
mov
sbb
jnp
popf
xchg
sub
cld
xor
rol
xor
adc
nop
cmp
in
or
xchg
test
xor
mov
aam
inc
fisub
mov
cmp
xchg
(bad)
(bad)
xor
xor
retf
jp
inc
pop
aam
dec
cwde
inc
ficom
inc
cmp
fwait
jecxz
ins
inc
enter
repnz
push
xchg
and
xor
cs
cdq
clc
loopne
inc
jmp
mov
mov
adc
cli
jno
xor
cmp
xchg
jb
inc
or
xor
and
icebp
test
scas
hlt
test
and
jmp
popf
pop
loopne
rcr
pop
outs
test
aad
mov
(bad)
repz
pop
(bad)
rcr
adc
mov
int3
imul
pop
pop
sbb
dec
movs
mov
mov
ror
jle
xor
gs
mov
inc
lods
retf
mov
dec
lahf
sub
pop
xchg
sti
popa
outs
cdq
or
ins
sbb
or
add
loopne
es
out
sahf
cdq
gs
mov
aas
jo
add
xor
stos
(bad)
fist
cmp
cs
repnz
out
mov
out
mul
mov
ds
xchg
sbb
out
pop
pop
adc
adc
loop
mov
or
int3
aad
sahf
pop
pop
cld
(bad)
mov
int3
les
push
mov
adc
inc
ds
movs
ret
enter
mov
jg
stos
fst
xchg
jb
in
ret
enter
ins
mov
sub
inc
in
inc
movs
mov
mov
mov
popa
sbb
jmp
push
mov
loop
adc
(bad)
pusha
fmul
mov
icebp
test
push
pop
sbb
pop
sar
and
pop
push
pop
pop
out
(bad)
pop
ror
ror
pop
push
or
mov
sub
cmp
cmps
aam
add
mov
jecxz
pop
jno
clc
dec
push
into
popa
pushf
mov
retf
adc
jecxz
pop
sti
xchg
dec
les
lahf
stos
push
push
jno
mov
jmp
pop
mov
fsubr
pop
pop
cmp
out
clc
jmp
int3
sub
bnd
ss
loopne
pop
stc
mov
hlt
pop
sub
(bad)
mov
sbb
and
mov
pop
fadd
sub
pop
push
mov
dec
sti
enter
out
repnz
call
cmp
jno
pop
sub
dec
enter
imul
mov
pop
cmps
and
pxor
test
jo
dec
aam
fcom
xchg
ret
or
sub
lock
mov
pop
movs
cwde
jmp
xchg
pop
xchg
mov
mov
enter
stc
and
push
stos
push
dec
push
inc
mov
inc
sbb
psrlq
mov
push
dec
int
and
adc
(bad)
fdiv
int3
and
inc
popf
dec
and
dec
adc
inc
out
jp
ins
and
sbb
cmp
repz
fyl2x
and
frstor
xchg
(bad)
dec
fld
call
adc
jbe
sahf
jbe
sahf
and
(bad)
sbb
cmp
and
lock
sbb
pushf
rcr
int3
lods
loopne
inc
or
mov
jge
sub
call
rcl
in
mov
sahf
popa
in
je
sub
in
aas
xor
sar
add
lds
sti
or
sti
jge
mov
js
cli
mov
rcr
adc
shl
mov
push
popf
outs
xchg
xor
arpl
ret
sti
mov
leave
lea
dec
push
enter
dec
sub
mov
cmps
aad
ror
xchg
lahf
ds
lods
mov
pop
or
sbb
es
push
jle
icebp
scas
div
mov
xchg
pop
mov
mov
cmp
dec
ins
jae
retf
mov
sbb
call
psrld
pop
imul
mov
xor
push
xchg
add
arpl
mov
push
sbb
push
repnz
test
or
add
mov
sbb
jb
and
aas
dec
hlt
mov
dec
rcr
call
cmp
ins
mov
popf
jg
scas
in
gs
inc
cmp
cmp
mov
scas
aaa
push
cwde
pop
jl
pop
add
je
jg
sub
addr16
test
loopne
mov
stos
stc
out
xchg
jp
vphsubwd
out
and
sbb
ja
and
cmp
in
xor
fsub
sbb
mov
xor
jecxz
push
xchg
fnstcw
out
pop
retf
cmp
out
sub
test
int
bswap
sbb
lea
jno
jmp
je
(bad)
mov
fstp
mov
int
cmp
sbb
pop
test
ss
arpl
call
cs
arpl
gs
retf
mov
sbb
sar
ss
inc
inc
(bad)
icebp
sub
in
mov
cmps
or
dec
aas
cmp
sbb
aad
mov
mov
ds
mov
jno
(bad)
(bad)
(bad)
daa
loopne
jo
jecxz
out
pop
fisub
iret
xor
xor
scas
in
push
(bad)
xchg
mov
lds
push
and
fldenv
add
leave
in
shr
jmp
stc
gs
cld
mov
fistp
(bad)
jmp
cmp
leave
daa
mov
sub
retf
dec
std
or
int3
mov
inc
mov
add
push
(bad)
adc
mov
je
mov
test
jmp
out
adc
mov
push
mov
icebp
fmulp
cmp
sti
js
cmc
bound
pop
jle
pop
add
fsubr
jae
cmps
inc
push
fidiv
mov
cmp
fs
cmc
sbb
js
shr
test
dec
push
adc
jns
into
jle
cmp
xchg
xchg
xchg
je
adc
lods
test
jg
stos
ret
ss
jne
adc
add
clc
jl
cs
ja
dec
fcomp
shl
cli
jg
cmps
cs
mov
ror
rol
enter
pop
data16
and
and
loopne
pop
jbe
xchg
lds
add
nop
inc
sbb
and
in
mov
jmp
push
(bad)
ins
inc
test
rcl
and
push
dec
jp
loope
pop
mov
mov
mov
rcr
inc
sahf
movs
fs
fwait
lods
cmc
movs
jae
xor
ret
outs
dec
lahf
pop
fwait
xor
sbb
cmp
in
(bad)
int
std
cs
loop
fnstcw
cmc
sub
add
or
mov
stos
inc
pop
and
mov
pop
sub
pop
push
push
int3
ja
shl
dec
sub
leave
cmp
push
popa
xchg
sub
lds
dec
inc
out
sub
loop
xor
push
rol
pop
mov
bnd
adc
cdq
ja
mov
mov
dec
xor
or
lods
pusha
pusha
inc
mov
add
sti
push
sbb
gs
push
and
xchg
and
idiv
dec
arpl
cs
lods
ins
repz
leave
enter
repnz
rol
sbb
lock
(bad)
std
fs
fs
push
inc
ja
loope
mov
test
and
or
loope
mov
fwait
inc
pushf
scas
sbb
mov
push
mov
xchg
mov
shr
mov
cmp
or
inc
mov
lea
push
je
cmp
fstp
pop
sub
mov
push
or
popa
pop
popa
sahf
xor
mov
cmp
sar
rol
mov
in
and
jmp
inc
shl
in
out
repz
mov
xchg
ds
stc
test
neg
inc
movs
mov
mov
fiadd
and
lea
mov
lods
test
cmp
lea
aad
stos
adc
imul
push
into
or
and
cld
leave
sub
adc
je
stos
test
push
jb
loopne
jmp
jns
je
(bad)
push
adc
cmp
out
hlt
mov
call
rcl
ror
lds
xor
mov
jge
push
add
pop
pushf
adc
and
sub
femms
(bad)
icebp
rcr
mov
sbb
arpl
xchg
fst
and
adc
stc
loop
std
jns
or
std
mov
add
cmp
jne
pop
ins
stos
retf
sbb
adc
jge
arpl
inc
xchg
stos
ror
dec
out
pop
push
(bad)
xor
jle
add
mov
stos
pushf
add
fs
(bad)
clc
and
retf
jo
jae
jecxz
sti
imul
test
aaa
popf
stos
jmp
and
xor
(bad)
iret
call
dec
fnstcw
daa
jl
aaa
pop
and
pop
jmp
jne
mov
stos
rcr
fstp
mov
jmp
es
das
xchg
ret
xchg
mov
popa
cmps
inc
push
rol
mov
pop
mov
xlat
mov
xor
mov
add
mov
scas
mov
mov
fnstenv
cld
or
add
push
popa
retf
push
iret
pop
push
pop
leave
dec
push
xor
mov
daa
cmc
iret
push
xor
stos
or
(bad)
es
sub
add
popa
les
stc
or
bound
daa
std
add
dec
clc
int
xor
pusha
xchg
movs
push
aad
sahf
fsub
scas
imul
lea
mov
das
aas
mov
pop
pop
in
mov
add
sbb
cmc
jle
cld
ins
sbb
jmp
mov
lds
out
mov
pop
pusha
inc
xor
dec
or
jecxz
inc
mov
add
and
(bad)
loopne
and
mov
jnp
cmp
test
or
ficomp
loope
sar
mov
mov
movs
push
out
test
add
lds
cli
mov
jle
sub
mov
cld
push
call
sub
xchg
push
je
sbb
jnp
dec
scas
jne
xchg
cmp
push
fist
sbb
jae
ret
cmp
jb
loope
mov
data16
(bad)
rcr
shl
test
mov
cmp
sar
arpl
data16
jno
dec
loop
sub
xchg
test
xor
sbb
sbb
xchg
mov
out
adc
shl
cmp
rol
icebp
mov
iret
ins
ret
cmps
fiadd
pusha
or
push
call
mov
mov
std
or
xor
(bad)
mov
cmps
inc
sub
lods
or
xlat
aaa
xor
pushf
sub
sahf
pop
call
xchg
and
mov
and
stos
pop
(bad)
dec
imul
inc
push
cmp
and
pop
cmp
xor
cld
add
fdiv
and
test
jno
or
test
mov
pop
imul
mov
int3
mov
xor
rol
pusha
mov
ds
ins
mov
xchg
or
icebp
data16
pop
hlt
or
(bad)
push
cld
fld
outs
lahf
inc
cld
pushf
(bad)
jge
cmps
cwde
icebp
call
sub
je
dec
outs
leave
lods
aaa
xchg
pop
rol
push
jecxz
mov
rcl
pop
xchg
popf
sbb
mov
outs
fldcw
and
sub
adc
mov
cmps
and
inc
push
dec
(bad)
cmps
inc
jno
cmps
imul
adc
adc
nop
out
hlt
cli
or
inc
push
int3
out
pop
mov
shl
scas
sbb
dec
fs
add
pop
mov
push
inc
cmps
outs
shr
ss
call
fst
push
sbb
jmp
mov
xlat
pop
jns
cmp
popa
icebp
scas
pop
stos
mov
sub
imul
loope
not
les
push
jg
out
repz
mov
call
jmp
mov
mov
loope
inc
sub
pusha
call
inc
push
rol
add
sub
test
xor
cmps
sbb
test
push
jno
mov
adc
adc
mov
jbe
clc
jmp
xlat
shl
mov
jno
push
jecxz
and
cmp
in
sub
jae
fnstcw
adc
cmc
in
jecxz
cli
sub
or
pop
rol
les
jmp
adc
bound
xor
enter
bound
xchg
add
add
lahf
shl
loope
scas
dec
or
mov
iret
bound
mov
push
ins
cmp
mov
stc
mov
iret
rcl
sub
add
pop
cld
jb
inc
imul
rol
and
adc
(bad)
js
cwde
cwde
add
cmc
call
ret
fisubr
out
push
out
pop
shl
icebp
fst
xchg
inc
mov
jecxz
es
out
jne
retf
leave
add
adc
cmps
mov
pushf
or
or
cmp
lods
cli
das
ins
not
aas
adc
icebp
dec
adc
cmp
mov
xor
cmp
and
push
ret
daa
inc
mov
arpl
arpl
inc
test
inc
inc
inc
outs
sbb
sub
fwait
mov
mov
iret
in
or
pop
mov
int
cmp
int
pop
mov
jno
dec
cmp
(bad)
jmp
sahf
mov
adc
sahf
aaa
add
pop
inc
adc
and
sahf
xor
push
mov
mov
xchg
loopne
mov
test
fwait
xor
test
push
dec
ins
out
pop
xlat
je
jle
jecxz
cmp
pop
sbb
les
ja
adc
movs
inc
pusha
mov
pop
push
pop
xor
loop
sar
fisubr
adc
mov
call
sub
xor
cmp
movs
int3
add
ins
mov
add
int3
call
out
mov
sar
(bad)
dec
dec
inc
jo
bound
fnstcw
adc
add
push
pop
lahf
stos
xchg
das
mov
mov
ss
mov
jmp
inc
adc
shl
mov
dec
jo
or
loopne
(bad)
cmc
test
push
sbb
mov
push
jnp
sub
sub
ror
ja
in
and
test
dec
rol
mov
push
cmp
daa
dec
cmp
cmp
pushf
push
imul
dec
(bad)
jbe
mov
mul
adc
mov
pop
sub
shl
fwait
daa
fcomp
ins
xchg
jnp
and
lock
cmp
pop
inc
jns
ds
ja
xchg
fld
aad
add
xchg
loope
mov
mov
cmp
out
daa
loope
mov
test
scas
and
ins
mov
out
popa
or
push
call
leave
mov
pop
jp
push
xor
push
cwde
mov
shl
stc
jge
fsubrp
xor
and
mov
mov
repnz
repnz
inc
pop
pop
stos
les
fld
cmp
mov
cmp
ds
dec
dec
cs
shl
jmp
or
adc
iret
je
cmc
fcomp
xor
ss
mov
sub
xchg
sub
icebp
loop
imul
sbb
push
jbe
jl
cmp
int3
(bad)
dec
push
scas
inc
icebp
jecxz
mov
jne
add
sbb
scas
xchg
xchg
cmp
ror
sar
jmp
or
nop
pop
jae
adc
sub
shl
cld
enter
ins
adc
push
retf
lods
push
movs
push
mov
(bad)
aad
sar
dec
sbb
jmp
add
sub
rcr
(bad)
mov
sbb
cmp
pusha
sbb
lock
mov
inc
(bad)
add
sbb
(bad)
repz
hlt
lock
pop
mov
jecxz
mov
push
out
pop
retf
popf
dec
mov
mov
pop
add
inc
pop
mov
or
test
sbb
repz
cmp
push
mov
xor
add
enter
pop
gs
pop
mov
call
mov
mov
pop
popf
mov
xchg
loope
repnz
inc
nop
cmp
mov
and
mov
jae
shr
mov
push
test
push
push
nop
arpl
pop
data16
sbb
and
scas
adc
arpl
mov
lahf
push
nop
cmp
std
cld
call
mov
enter
out
(bad)
jbe
lahf
leave
and
sbb
sbb
cs
icebp
mov
and
inc
sub
sub
pop
iret
cmp
(bad)
add
(bad)
xchg
push
xchg
(bad)
ret
pushf
mov
fild
popf
xor
movs
iret
or
retf
cdq
cmc
(bad)
dec
mov
iret
add
mov
arpl
es
stos
push
daa
xchg
gs
pop
xchg
sub
mov
std
dec
int
loop
loope
mov
pusha
not
or
and
mov
dec
ja
xchg
inc
fadd
mov
cmp
jbe
arpl
cli
ds
cmc
adc
mov
xchg
jecxz
sbb
add
sub
xchg
sub
or
outs
cmps
mov
inc
jl
fwait
scas
xchg
cwde
pusha
iret
test
jo
rcr
loop
pop
sub
ss
test
loopne
pop
inc
jg
xor
cmp
push
add
je
mov
mov
xchg
mov
int3
aas
xor
push
cmp
jmp
icebp
cwde
push
leave
push
xor
shr
scas
fisub
pushf
jmp
call
in
dec
(bad)
icebp
sar
sub
cs
out
test
nop
add
adc
dec
div
fdiv
xchg
int
into
xchg
movs
ret
push
mov
and
dec
sub
mov
outs
jmp
xchg
add
push
rdpmc
into
aas
test
mov
mov
push
hlt
sti
scas
pop
jle
dec
test
int3
outs
lods
push
imul
inc
addr16
and
dec
cmp
clc
das
xchg
int3
mov
cmps
je
cld
cmp
jbe
out
mul
lock
in
test
xchg
sbb
outs
inc
lods
jge
mov
mov
loopne
cli
lds
add
and
mov
mov
dec
leave
push
adc
cmp
cs
push
jmp
lea
dec
pop
mov
inc
mov
loop
ret
pop
mov
bound
inc
mov
cs
mov
cmps
and
je
jno
jle
adc
mov
scas
pushf
hlt
mov
in
mov
inc
xchg
cmp
test
jno
sahf
jmp
inc
cmps
lds
rcl
(bad)
sbb
cmp
or
or
scas
mov
es
js
sub
sahf
inc
mov
dec
fcom
es
cmp
or
xchg
lds
mov
pop
add
ret
shr
xor
ins
push
fbstp
or
sar
into
push
in
push
fcomp
ins
dec
pop
or
push
daa
dec
or
inc
and
fidiv
repnz
icebp
adc
addr16
(bad)
jne
les
shl
mov
rol
stc
std
call
and
dec
and
adc
pop
xchg
xor
push
sahf
add
mov
sbb
mov
mov
inc
js
repz
push
sbb
mov
add
jmp
imul
enter
pop
ss
div
mov
and
lds
dec
jbe
mov
ins
cli
or
fmul
ds
rcr
pop
(bad)
push
dec
sbb
shr
outs
not
adc
adc
pop
out
repz
ins
scas
and
inc
aad
aad
mov
xor
add
lock
jp
pop
xchg
in
dec
xor
enter
mov
cli
ss
imul
pcmpeqw
sub
jno
je
inc
mov
out
outs
sub
inc
adc
jl
cmp
cli
push
xchg
mul
cmp
aas
aaa
jle
call
ret
mov
mov
das
mov
sbb
push
cmp
pop
xchg
mov
push
popf
xchg
icebp
xor
xchg
shl
jg
in
jge
call
mov
dec
pop
aaa
ja
fiadd
mov
shl
jl
inc
jg
adc
cmp
lahf
in
adc
cmp
(bad)
imul
mov
mov
cmp
inc
test
mov
fcom
fnsave
movs
push
and
mov
cli
mov
cmc
xchg
sub
cmp
es
rol
dec
mov
das
(bad)
mov
pop
mov
mov
ret
pop
mov
pop
pop
std
ss
xchg
iret
inc
add
imul
push
lods
mov
dec
jl
inc
push
cld
mov
stos
ficom
xchg
push
in
arpl
ins
or
jbe
aaa
and
jmp
and
cmp
jle
call
mov
sahf
repnz
add
pop
mov
or
xchg
mov
(bad)
cmc
(bad)
cld
jmp
or
in
retf
bound
fwait
pop
pushf
imul
arpl
cmc
mul
xor
daa
cmp
xor
mov
pop
and
mov
push
aam
repz
xchg
add
call
into
push
jns
sar
pusha
popa
ins
loop
ja
fdiv
fbstp
mov
xor
pushf
int
dec
add
movs
pop
mov
xchg
aam
lods
rcr
sub
mov
jl
repz
clc
inc
pop
lods
mov
mov
lods
inc
push
aaa
(bad)
adc
inc
jmp
push
test
cmp
clc
mov
add
(bad)
push
aam
mov
sub
dec
add
repnz
pop
xchg
push
adc
jb
xchg
inc
dec
push
xlat
adc
call
jg
arpl
aaa
and
(bad)
push
rcl
adc
repz
shl
cld
mov
push
cs
loope
fdivr
jecxz
push
lods
imul
mov
call
lahf
scas
adc
jns
stc
js
mov
cdq
pop
push
push
pusha
lock
add
(bad)
mov
mov
and
push
adc
pop
retf
mov
xor
lea
hlt
call
ficom
retf
xchg
inc
jl
test
stos
adc
clc
mov
rol
es
leave
int3
hlt
gs
sub
cld
mov
mov
nop
ja
add
arpl
rol
and
jnp
inc
mov
and
jg
lahf
mov
push
push
add
jns
push
not
xlat
clc
push
fsub
addr16
push
cmp
push
je
aam
les
or
jge
ror
(bad)
std
pop
push
retf
cld
ret
aam
sbb
push
icebp
into
pop
pop
cmp
mov
cli
imul
sbb
push
inc
les
adc
sub
mov
cli
push
sub
test
sar
or
stc
xchg
cs
xchg
mov
div
sar
mov
mov
pusha
jmp
mov
pop
and
jmp
adc
fiadd
mov
pusha
(bad)
imul
addr16
mov
jmp
ins
fist
adc
mov
out
sbb
cmc
fcmovbe
pop
sti
jno
xchg
mov
lds
push
movs
mov
and
sbb
xchg
sbb
sub
xchg
xor
sahf
jp
addr16
retf
cmp
push
ja
or
imul
inc
pop
jg
jne
sub
xchg
outs
xchg
xchg
jo
pop
mov
call
repnz
sub
xor
arpl
dec
shl
xor
xlat
or
mov
pop
add
(bad)
out
idiv
sbb
mov
jnp
and
rol
jmp
xchg
xlat
ss
cmp
jae
outs
out
push
add
pop
icebp
push
dec
jge
sahf
enter
dec
sub
daa
cld
lock
hlt
das
es
jg
add
call
sub
cld
add
psrlq
mov
jmp
xchg
in
pop
ins
jp
out
mov
pushf
add
add
and
pop
mov
push
mov
in
int
and
fadd
ja
int3
sti
mov
xchg
or
mov
mov
xor
mov
pop
sub
les
out
fistp
add
ins
out
nop
test
enter
les
sub
ja
call
mov
cld
add
add
pcmpeqw
push
scas
sahf
popw
mov
inc
xor
sub
mov
cmps
xchg
test
xchg
je
or
(bad)
pop
and
aas
jmp
mov
cmp
fstp
add
mov
cwde
jne
push
outs
aaa
clc
in
ss
dec
stos
dec
add
out
(bad)
out
pop
and
pop
adc
sbb
push
jno
ins
or
pop
push
dec
movs
fsub
test
ror
and
rol
add
fldcw
outs
and
mov
or
out
ret
mov
pop
cmp
enter
mov
mov
adc
test
ret
adc
lods
sbb
dec
lea
cmp
les
sbb
mov
adc
or
xor
add
stc
xchg
dec
sub
cmps
xchg
dec
cmc
jl
js
loope
ret
jg
fdivr
call
jne
xor
dec
out
pop
icebp
mov
cmp
xchg
clc
shr
retf
fisub
mov
loop
sti
or
mov
rol
sub
mov
sub
ins
fadd
mov
loop
ret
pushf
push
xchg
in
and
jbe
pop
push
inc
mov
stos
xchg
sub
mov
mov
rcr
mov
dec
xor
lods
cmp
dec
mov
jmp
sub
in
out
(bad)
sahf
pushf
in
push
xchg
cmps
mov
ja
idiv
lahf
addr16
jp
retf
or
clc
or
ins
js
mov
mov
(bad)
retf
add
dec
movs
imul
popa
sti
in
lods
loopne
mov
sbb
jne
movs
or
outs
ficom
mov
repnz
push
ret
out
and
test
ins
inc
(bad)
movs
push
pop
into
pop
push
jmp
xchg
enter
xor
xchg
pop
mov
bound
xchg
rep
xlat
lods
sahf
xchg
xor
xchg
mov
(bad)
mov
scas
test
fmul
mov
in
mov
xchg
mov
ret
fistp
cwde
adc
dec
lds
inc
adc
sub
enter
call
retf
test
ins
mov
in
test
add
xchg
sub
pop
push
adc
bound
cmp
pop
ficom
pop
test
imul
lods
sbb
cli
push
jno
fistp
std
fwait
pop
stos
adc
mov
rcl
fisubr
int
cmp
mov
jg
dec
or
jecxz
mov
jge
iret
mov
mov
mov
popa
jge
movs
mov
or
jmp
out
jp
fs
push
fcom
push
cld
movs
sub
adc
or
not
loope
popf
cwde
seta
ins
arpl
mov
lods
cli
adc
(bad)
mov
and
fwait
xchg
aam
addr16
pushf
adc
test
cmp
mov
sbb
cmp
pop
shl
xchg
sar
enter
or
add
pop
aad
cmp
mov
xchg
gs
out
cli
out
jp
jecxz
and
bound
mov
or
push
cld
cwde
inc
mov
scas
sub
mov
pop
movs
cmp
cli
pop
sbb
neg
sub
add
jne
mov
adc
movs
dec
add
lods
mov
push
adc
(bad)
jmp
in
mov
mov
mov
add
add
push
gs
call
in
inc
ficomp
movs
pop
fld
popa
mov
and
mov
and
shr
retf
ss
jecxz
repnz
jmp
cmp
or
or
jo
jmp
inc
or
adc
sbb
in
shr
movs
mov
jno
and
push
sti
pop
retf
xchg
ret
leave
xor
cmp
jbe
adc
cmp
int
repnz
xor
pop
mov
fiadd
pop
cwde
addr16
cmp
push
sbb
sub
mov
mov
mov
mov
lock
inc
clc
jp
cmp
test
sub
xchg
jg
push
leave
std
push
scas
mov
sbb
push
lds
ja
xor
push
ins
lods
sar
xchg
es
xchg
mov
sub
xlat
push
push
mov
pop
mov
pop
gs
add
lods
add
push
cmp
or
or
inc
dec
fcomp
mov
loopne
inc
sbb
ins
pop
jecxz
lods
ret
lods
push
test
jns
outs
xchg
mov
mov
mov
dec
call
xchg
loop
xchg
nop
sti
fild
inc
mov
add
aad
stc
and
inc
cmp
cmc
pop
rcr
(bad)
xor
hlt
xchg
and
pop
cmp
adc
inc
cmp
cmc
jb
iret
(bad)
(bad)
xlat
aam
mov
retf
sub
enter
int3
xor
add
rol
aad
int
pop
xor
xor
xor
pop
je
popf
imul
push
sub
or
test
hlt
cwde
jne
retf
pop
mov
std
fisubr
sbb
jb
ins
mov
xchg
imul
cdq
sub
repz
sbb
mov
test
repnz
in
mov
adc
movs
jp
in
inc
das
fwait
sub
xor
(bad)
js
jge
or
repnz
js
les
pusha
sub
not
mov
je
jge
cmp
dec
je
sbb
ret
sbb
jl
outs
int3
push
ds
adc
iret
arpl
push
push
jae
bound
pslld
push
adc
dec
sub
mov
sti
mov
mov
in
jns
sbb
add
std
mov
int
adc
out
and
jl
rcr
bound
pop
pop
and
jge
inc
add
in
scas
out
mov
dec
test
mov
pslld
(bad)
retf
and
pop
mov
retf
xchg
lock
sub
lds
xor
into
xchg
mov
xlat
xor
mov
loop
pop
ins
dec
add
jo
push
cmp
pop
push
dec
dec
add
jg
push
or
ins
pop
or
cmps
jp
inc
lahf
dec
jg
push
cmp
pop
bts
inc
pop
dec
rcl
clc
ror
mov
sub
push
sbb
mov
(bad)
int3
mov
packsswb
push
mov
and
dec
iret
scas
push
daa
dec
sbb
addr16
ins
scas
cdq
adc
ret
sbb
dec
push
rcl
mov
push
fisub
(bad)
push
stos
cdq
pop
xlat
xchg
std
mov
cmps
imul
mov
in
cmp
jbe
jne
dec
nop
push
add
sbb
in
arpl
cld
out
sti
lods
inc
add
arpl
out
push
pop
cmp
sahf
pusha
retf
mov
rcl
fwait
jmp
(bad)
and
sub
jns
pop
shr
ret
stc
mov
out
stos
into
xor
loopne
xor
push
pop
adc
out
(bad)
push
mov
fsubr
pop
sub
jo
mov
(bad)
sahf
dec
push
ins
or
stc
daa
pop
(bad)
cli
pop
rcl
dec
jmp
lock
popf
jle
sub
mov
ds
inc
retf
in
xchg
inc
popf
mov
mov
outs
jl
push
imul
test
jecxz
std
stos
dec
mov
cmps
call
shr
pop
inc
movs
ins
imul
pop
pop
scas
mov
loopne
xor
or
retf
je
cdq
push
mov
jge
rol
jmp
stos
xchg
inc
fistp
adc
rcr
lock
push
pop
push
iret
adc
dec
movs
push
ds
inc
retf
inc
add
inc
call
pop
push
inc
or
pop
dec
sbb
or
xor
out
nop
sar
aam
fdiv
in
gs
xchg
and
adc
retf
push
adc
dec
mov
jecxz
push
pop
xchg
pushf
add
dec
push
adc
lds
dec
in
cmc
(bad)
jle
push
clc
retf
dec
enter
out
add
mov
mov
cmps
in
ins
loopne
test
inc
aaa
aas
mov
mov
mov
in
test
rol
ret
int
adc
jnp
cwde
mov
imul
add
dec
xor
gs
inc
(bad)
fisubr
stc
out
div
adc
adc
shr
or
stc
xor
mov
clc
call
js
mov
ret
(bad)
jne
sub
jle
or
add
inc
pop
or
and
mov
add
inc
cmp
mov
push
mov
dec
test
addr16
cld
adc
icebp
and
dec
jp
adc
xchg
out
movs
pop
nop
jle
aam
and
mov
jmp
adc
dec
or
xor
cld
js
mov
scas
push
mov
inc
or
xor
mov
aad
int
pop
outs
dec
repz
daa
into
rcr
imul
dec
push
ds
(bad)
std
and
(bad)
jne
pusha
or
cmp
and
inc
sar
jne
in
inc
out
std
xchg
popf
dec
rcr
movs
stos
nop
in
push
cdq
jl
dec
and
fst
push
mov
imul
pop
push
jno
jno
sbb
xor
fisttp
mov
fistp
outs
jb
ss
cmp
and
test
std
js
xchg
cmp
xchg
ins
fbld
mov
xchg
in
movs
clc
mov
mov
inc
dec
scas
call
movs
inc
stos
popf
mov
mov
inc
fldcw
or
test
ror
adc
cmp
data16
sahf
loop
fnstsw
adc
fild
push
mov
loop
cmps
add
mov
push
inc
dec
(bad)
jmp
xor
adc
xchg
pop
test
mov
sahf
xchg
and
push
add
sar
mov
ror
sbb
add
fdiv
dec
out
call
test
in
cmp
pop
ja
not
dec
sub
call
pop
push
or
jmp
jmp
in
pop
out
and
cdq
fwait
sub
sbb
push
push
mov
dec
outs
popf
jae
add
dec
push
jb
rol
inc
(bad)
mov
cmp
or
sub
retf
cmp
dec
cmp
js
jecxz
scas
sub
pop
sbb
sub
clc
jl
xor
call
test
jmp
fnsave
adc
mov
lahf
mov
push
fisttp
lods
push
sti
cmp
aam
stos
das
stos
lods
stc
das
scas
inc
aam
imul
iret
sbb
lahf
jae
mov
push
out
test
mov
rcr
sbb
int3
(bad)
stos
push
aas
mov
lea
cs
pop
movs
mov
jle
mov
pop
aaa
cwde
sbb
jno
loop
(bad)
sbb
lea
and
pushf
cmp
cdq
push
stos
movs
jmp
in
push
jnp
and
and
repz
push
mov
int3
fcomp
xlat
mov
movs
and
mov
cmovl
movs
cmp
inc
lahf
fbstp
iret
repz
jmp
dec
outs
pop
inc
dec
dec
push
scas
int3
dec
sbb
loope
sbb
ins
xchg
and
enter
les
into
adc
add
enter
mov
jnp
jge
ret
sti
push
pop
mov
jge
mov
cmp
cmp
(bad)
cwde
inc
out
out
dec
sbb
(bad)
mov
adc
popf
add
data16
cmp
xchg
push
sbb
mov
mov
ds
jl
mov
jae
pop
add
out
adc
dec
stc
in
dec
test
jb
inc
addr16
test
(bad)
aas
adc
cs
cwde
aad
sub
imul
loope
scas
jmp
sbb
repz
jnp
pop
xor
xor
daa
inc
jo
scas
shr
sub
xor
jg
in
pop
adc
pop
fisttp
pxor
pop
dec
inc
and
push
jne
out
es
movs
ss
cld
(bad)
cld
lods
adc
repnz
in
fs
ja
ror
add
adc
lods
ins
mov
push
xlat
xor
mov
inc
sbb
sar
pop
daa
(bad)
mov
cli
fs
repz
iret
daa
(bad)
je
mov
fisttp
fisubr
xchg
nop
jne
ret
jno
shr
dec
jmp
nop
jecxz
cmp
xor
ficom
adc
mov
and
(bad)
mov
test
out
rcl
mov
cmp
cmps
out
sub
mov
add
jo
popf
or
or
icebp
pop
movs
mov
not
mov
pusha
jns
mov
popa
int3
pop
pushf
xor
push
cmp
test
lods
mov
and
cmp
leave
pop
mov
paddsw
scas
int3
or
dec
cmp
jae
loopne
xor
add
add
sar
outs
xchg
scas
shr
inc
jg
aad
mov
dec
push
or
push
sti
mov
push
in
mov
or
(bad)
jae
cdq
add
xor
shl
js
fs
lds
scas
add
fimul
imul
cmps
cmp
(bad)
int3
arpl
adc
adc
or
mov
add
mov
idiv
es
loop
fdivr
mov
mov
push
lods
or
add
cli
iret
and
int3
xchg
sar
push
xor
mov
xor
mov
jo
or
popf
mov
(bad)
mov
mov
or
sbb
mov
es
je
(bad)
cli
adc
imul
pushf
aam
(bad)
mov
cmps
push
cdq
lods
jge
push
sub
and
or
add
sub
test
sub
pop
es
call
ficomp
xchg
movs
mov
aad
(bad)
out
jge
mov
mov
push
lods
mov
mov
jle
xor
adc
push
sar
or
outs
xor
bound
mov
imul
or
cmp
lds
push
mov
je
jmp
and
or
and
icebp
or
jecxz
je
rcr
dec
in
mov
retf
sub
pop
adc
mov
mov
xor
mov
mov
dec
mov
out
mov
ins
push
add
sub
lahf
mov
in
sub
add
push
loopne
cmp
cs
orps
jb
and
(bad)
fcmovbe
dec
enter
sahf
pusha
loopne
mov
fwait
repnz
test
add
cdq
fst
xchg
cwde
int3
lock
hlt
mov
call
push
fcom
lock
mov
je
cmp
adc
pop
pop
ja
jl
inc
push
inc
fild
fcomp
movs
ins
call
or
pushf
or
mov
sti
cmc
loop
dec
and
in
and
mov
cmp
lea
mov
or
cdq
ret
icebp
test
sbb
mov
mov
push
jb
jae
inc
sub
adc
mov
sbb
int3
and
or
call
and
jl
sti
into
das
dec
push
jmp
fimul
push
xor
mov
shl
xor
and
jb
push
xlat
jmp
sub
push
push
or
jne
xchg
into
adc
xchg
cmp
xor
pop
daa
push
lods
mov
mov
mov
add
dec
pop
fadd
push
mov
leave
mov
fisttp
sbb
int3
call
sub
mov
mov
mov
retf
js
dec
fld
shr
rcl
adc
stos
(bad)
ins
stc
js
and
or
int3
into
fimul
or
jne
or
retf
sub
jnp
xor
and
add
push
daa
lods
cli
jge
imul
(bad)
mov
inc
sbb
sti
int
jno
push
out
push
add
inc
into
jmp
out
jbe
sub
out
jmp
retf
pop
or
ret
jecxz
imul
test
inc
shr
in
push
xchg
bound
retf
ror
outs
and
es
inc
add
inc
stc
repz
xchg
adc
mov
neg
jnp
dec
fdivr
outs
dec
xor
movs
cmps
push
ret
test
cld
movs
lea
mov
adc
cld
(bad)
mov
jbe
sub
and
or
sub
mov
push
ins
popf
push
xchg
cmp
mov
adc
xchg
fist
or
and
xor
xchg
cmps
(bad)
jg
lods
neg
hlt
inc
push
(bad)
mov
mov
test
cmp
inc
icebp
jo
inc
inc
lldt
push
fsub
(bad)
pusha
mov
ss
or
fsub
jno
sub
xor
out
mov
mov
aad
jno
xor
pushf
jo
xor
ins
in
cmc
test
pop
out
adc
sbb
xlat
jo
jge
iret
shr
outs
sti
xchg
mov
pop
lds
in
mov
rcl
sbb
cwde
dec
cmps
imul
not
pop
push
dec
or
call
mov
jg
sbb
pop
dec
popa
and
movs
inc
sub
and
jmp
push
mov
push
or
ss
mov
fist
dec
aam
cs
in
push
inc
js
(bad)
inc
adc
in
ror
icebp
test
or
xor
bound
int
jecxz
pop
sub
jmp
adc
cmps
or
fild
loop
(bad)
fisubr
ins
xor
iret
jl
test
ror
(bad)
int
test
dec
idiv
add
stc
mov
pop
sub
mov
mov
sub
(bad)
iret
retf
add
push
or
ror
mov
mov
sub
xor
dec
push
cmp
mov
retf
out
sub
(bad)
stc
test
sub
arpl
inc
imul
int3
repz
xchg
test
pop
jne
mov
test
pop
dec
cmp
je
retf
mov
pop
cli
sub
iret
icebp
xlat
mov
cmp
mov
and
in
or
sbb
add
dec
(bad)
mov
rcr
and
jmp
mov
sub
outs
mov
and
(bad)
sti
das
cwde
xor
and
adc
lahf
je
mov
leave
inc
dec
mov
cmp
adc
add
scas
sbb
lock
rcl
lods
retf
xchg
aad
sbb
sub
pop
call
pop
add
inc
(bad)
mov
pop
cld
rcr
js
mov
dec
pushf
iret
adc
aaa
jno
fidiv
mov
mov
pop
fistp
call
sub
jo
jbe
addr16
and
pop
std
sub
repz
jnp
fbld
addr16
mov
and
je
call
call
cmc
adc
pop
sub
sub
in
clc
mov
jmp
aam
mov
or
repz
addr16
cs
push
imul
data16
mov
test
dec
aad
ror
repz
jmp
shl
dec
pop
push
movs
dec
fsubp
mov
cmp
test
call
sar
cmp
cmc
cmps
pop
out
repnz
sbb
inc
rcl
sbb
adc
jnp
dec
stos
mov
add
fistp
inc
mov
dec
xor
mov
sbb
test
mov
call
and
imul
sub
iret
add
aaa
scas
(bad)
jae
hlt
ror
add
dec
cli
sbb
add
call
stc
mov
xchg
shr
aam
mov
nop
outs
push
sbb
jbe
ins
and
xchg
leave
fisttp
and
(bad)
ds
adc
(bad)
loop
ror
ds
cli
jl
mov
mov
int
xchg
daa
cmps
imul
push
(bad)
push
lock
test
jne
push
enter
cdq
mov
les
sahf
sub
pop
pop
mov
cmp
xchg
int3
lock
ror
inc
test
dec
sub
fs
retf
push
fisttp
lea
mov
retf
jae
cmc
mov
inc
sub
sub
enter
or
cmp
movs
cmp
adc
push
je
mov
mov
cmp
mov
pop
push
arpl
sbb
mov
mov
xor
dec
mov
pop
jbe
lods
lods
jp
cld
sub
repnz
inc
sub
xchg
test
imul
outs
jecxz
bound
xor
cmp
stos
mov
jb
or
iret
sti
icebp
xchg
ret
test
pop
mov
arpl
and
clc
(bad)
mov
or
ins
add
aad
call
ja
xor
and
mov
inc
pop
xchg
push
dec
jo
scas
adc
mov
fstp
scas
or
(bad)
xchg
dec
mov
fbld
jb
pop
sbb
jns
xchg
sbb
pop
test
push
fisubr
or
mov
es
mov
dec
loope
test
cmp
inc
ins
and
les
lock
cmp
stc
xor
ja
sbb
sub
(bad)
mov
stos
add
clc
nop
leave
mov
enter
pop
push
pop
inc
scas
iret
xchg
out
cmp
inc
(bad)
pop
cwde
(bad)
imul
xchg
mov
xchg
or
popf
sub
pop
and
mov
test
xlat
lods
push
div
fldl2t
sub
xor
mov
shl
ss
mov
ss
xchg
and
xchg
in
outs
(bad)
mov
fild
or
ins
scas
push
pop
mov
rol
jb
mov
scas
fbld
ror
and
sub
jnp
jmp
fbstp
lea
dec
cmp
out
test
pop
mov
xchg
int
call
push
(bad)
mov
adc
ins
cmp
jge
cmps
push
xor
outs
pop
call
lahf
and
adc
popf
sbb
sbb
test
dec
int
arpl
jb
dec
inc
xchg
dec
pop
es
add
mov
mov
ret
or
int
dec
fadd
out
retf
sub
mov
aad
cli
jge
daa
dec
jecxz
out
retf
movs
mov
jge
fld
fcmovne
sub
dec
popf
mov
and
dec
(bad)
lock
mov
jmp
and
mov
into
mov
push
shr
test
and
cmps
mov
jle
mov
sbb
call
movs
jnp
mov
ins
or
scas
mov
test
pop
adc
pop
out
mov
mov
int
mov
adc
jns
data16
inc
(bad)
sub
int3
test
and
fidivr
push
fistp
mov
add
out
std
test
xchg
cmc
cdq
es
rcr
and
mov
in
aas
sub
dec
add
mov
mov
mov
cmp
and
cmps
mov
xchg
repnz
xchg
scas
cld
adc
push
xchg
mov
test
dec
es
adc
in
and
pop
jmp
xor
sahf
aad
stos
clc
mov
or
jecxz
sub
loope
add
dec
dec
pop
pop
lds
push
lds
push
ret
pop
sub
mov
sub
into
jb
xor
cmp
or
call
and
push
mov
jmp
jmp
jns
popa
cmp
out
sub
ret
rcr
lahf
push
stos
neg
inc
mov
scas
push
xor
fldenv
arpl
pushf
sbb
adc
push
sub
add
pop
pop
sbb
or
push
add
mov
push
outs
cdq
imul
jnp
es
(bad)
cmp
mov
adc
jmp
sti
mov
adc
jg
jnp
cmc
mov
lods
adc
mov
out
(bad)
lods
fisttp
sti
sub
nop
stc
mov
xchg
int3
aad
mov
in
jo
pop
popf
jmp
inc
ss
cmc
ins
ret
or
fst
mov
jge
push
inc
mov
jae
xchg
sub
cwde
add
pop
(bad)
xor
mov
sbb
sti
das
pop
mov
das
jp
pop
xor
fsubr
xchg
add
cmc
inc
mov
and
mov
dec
ret
cmps
cli
les
sti
mov
add
icebp
mov
daa
push
xchg
fidivr
imul
inc
pop
test
fldenv
sub
lock
jl
push
popf
sahf
icebp
out
push
out
cli
sub
jg
mov
std
cmp
sahf
(bad)
arpl
test
fmul
sub
loopne
std
imul
aad
jle
sub
pop
and
jmp
sub
int3
shl
cmp
sahf
sub
push
push
fs
mov
out
adc
or
mov
sub
aam
stos
iret
iret
and
mov
fs
sub
mov
mov
test
and
inc
addr16
ret
lods
pop
lods
push
adc
shr
shl
scas
arpl
cmps
jno
add
lock
xor
xchg
xchg
sbb
jg
(bad)
hlt
jno
stc
xor
fadd
je
add
aas
sub
cld
fist
mov
push
push
ret
jne
enter
repnz
xchg
test
pop
pop
repz
fidivr
call
(bad)
sti
xchg
fst
sub
fwait
mov
xor
xor
ja
sbb
shr
cdq
push
sahf
lds
xchg
in
repz
imul
cmps
sub
sar
fld
push
icebp
add
lock
stc
mov
cdq
xchg
movs
pop
out
push
mov
jecxz
int
jbe
xor
retf
mov
aam
dec
hlt
xchg
jno
mov
(bad)
mov
loop
popa
js
jmp
mul
call
lahf
mov
sub
imul
cld
outs
out
dec
loop
ret
aad
push
xchg
inc
and
sahf
jne
iret
idiv
xor
adc
or
idiv
cwde
sub
sub
fisub
push
xor
push
movs
jmp
fdivrp
mov
fs
inc
cmps
lgs
movs
loopne
sbb
pop
xor
ds
hlt
dec
jo
cs
retf
sbb
rol
xor
js
push
and
jne
out
mov
je
(bad)
cld
aaa
les
test
sbb
jmp
retf
sbb
clc
mov
sub
out
rcl
in
mov
and
int
sbb
addr16
mov
shl
cli
pusha
es
mov
imul
pop
add
xchg
mov
sub
ins
mov
leave
xor
inc
stos
jl
or
add
ins
adc
xchg
and
les
xchg
inc
scas
les
dec
in
xor
(bad)
sbb
pop
(bad)
mov
push
popa
clc
loopne
aam
out
add
popa
test
retf
mov
adc
dec
mov
mov
inc
jg
xchg
sti
shl
mov
ror
in
push
push
bound
adc
push
add
jecxz
test
scas
xchg
popa
adc
in
jbe
retf
or
int3
xor
mov
add
ds
pop
pop
adc
push
cmp
not
sbb
paddusb
push
cld
int
sub
xor
sub
jle
cvttps2pi
(bad)
retfw
mov
and
mov
into
inc
sub
jae
outs
(bad)
out
mov
std
cli
dec
ja
xor
arpl
in
pop
jg
outs
add
jae
nop
push
fcomp
call
push
retf
add
dec
in
movs
fst
imul
xlat
and
xor
jle
fmul
and
jb
shl
fcmovu
jbe
icebp
jle
in
mov
cs
jae
adc
inc
mov
sbb
add
cmps
add
shl
in
scas
xchg
xchg
xchg
ds
sub
pop
and
ss
sub
dec
push
(bad)
nop
pop
pusha
and
movs
icebp
xlat
inc
adc
cmc
lods
push
call
sbb
retf
pop
stos
clc
aaa
(bad)
xchg
pop
fisttp
retf
rol
mov
loop
fsubr
sbb
scas
jbe
xchg
pushf
int
fild
add
dec
xor
sti
lock
cmp
add
repnz
dec
retf
(bad)
sbb
inc
sub
or
loop
in
cmp
repnz
jp
stc
or
outs
mov
fadd
shl
xlat
shl
mov
rol
fwait
sbb
call
add
or
adc
out
enter
daa
inc
push
sub
dec
push
push
pop
pop
int
dec
or
repz
lods
nop
es
xor
popf
ss
xchg
fs
mov
ret
test
mov
sti
xchg
rcl
nop
movs
cmps
cmp
xchg
xlat
(bad)
xlat
popf
push
xchg
xchg
(bad)
mov
xor
or
in
lods
mov
into
inc
push
test
mov
mov
mov
jae
dec
scas
xchg
arpl
mov
nop
cmp
push
fwait
sub
fldenv
dec
mov
int
adc
sbb
out
push
mov
bound
bound
js
mov
ja
adc
in
or
je
jo
xchg
scas
xor
loope
ds
call
or
inc
pop
test
aaa
sub
mov
and
sub
and
retf
cmps
inc
in
add
das
outs
lods
cli
and
mov
mov
(bad)
test
hlt
data16
mov
call
aaa
fcom
fld
jne
cmp
mov
inc
jnp
xchg
xor
mov
outs
xchg
xor
sbb
add
shl
jbe
sub
push
pop
rol
cmp
xchg
je
inc
out
test
nop
lea
outs
lea
push
add
dec
imul
test
imul
(bad)
movs
or
bound
mov
dec
cmc
fcmovbe
inc
dec
ds
push
outs
imul
call
pop
add
xor
sub
mov
sbb
in
push
xchg
jmp
or
adc
add
in
xor
xchg
sub
inc
sub
cmp
scas
mov
lods
pop
mov
ins
mov
repnz
jae
js
mov
pop
pop
test
and
jle
gs
outs
lds
test
xchg
add
shr
xor
sar
addr16
inc
call
jno
jp
imul
cdq
jecxz
lahf
movs
mov
dec
push
dec
mov
repnz
pop
in
test
cmp
gs
xchg
sub
int3
sbb
clc
in
add
dec
xor
pop
cmps
ficomp
jo
fs
cld
aad
addr16
and
rcl
arpl
out
push
adc
pop
xchg
movs
bound
push
(bad)
das
pop
pop
pop
jmp
xor
and
sbb
mov
mov
sbb
and
(bad)
ins
and
jmp
repnz
mul
js
or
int3
ds
nop
xchg
imul
neg
mov
xchg
adc
xchg
and
mov
or
jmp
mov
xlat
or
fs
cmc
jnp
xchg
rol
jb
inc
sub
ins
push
data16
and
out
int
jo
div
repz
test
leave
pop
out
fwait
loope
push
fwait
(bad)
inc
mov
or
test
jno
jge
and
out
adc
cmc
pop
push
push
add
out
fld
hlt
fs
sub
dec
call
arpl
js
arpl
cs
popa
imul
cs
popf
fistp
popa
mov
mov
xchg
nop
inc
ins
es
jl
push
cmp
gs
push
test
xchg
ror
or
push
mov
aas
js
in
add
or
jno
or
xor
sub
imul
iret
leave
fcomp
sub
or
ja
enter
mov
jp
adc
cmps
mov
mov
pusha
ja
cmc
add
push
push
hlt
outs
(bad)
mov
and
scas
sbb
inc
loope
jmp
jae
test
push
aad
outs
sbb
(bad)
out
jp
out
in
lock
mov
sbb
push
sbb
jb
xchg
pop
test
repnz
dec
fsub
loope
fmul
out
xchg
inc
jo
adc
cmp
(bad)
fwait
mov
mov
test
adc
inc
pusha
xchg
adc
mov
movs
cmps
pop
xchg
fistp
popa
add
enter
pop
fcmove
repz
push
inc
jbe
movs
outs
jo
pop
dec
xor
mov
aam
hlt
cmp
pop
adc
mov
cmp
mov
adc
add
dec
dec
ror
mov
lea
clc
in
hlt
imul
mov
sub
push
test
or
test
neg
mov
iret
icebp
jno
daa
pusha
jle
lahf
es
pushf
mov
loop
out
es
(bad)
out
jnp
repnz
inc
or
or
mov
(bad)
loop
xor
xchg
add
push
in
(bad)
je
jmp
(bad)
retf
sar
adc
push
mov
hlt
gs
push
or
push
pop
neg
loopne
adc
out
mov
jbe
and
push
mov
je
in
add
jns
mov
dec
lds
mov
fidivr
adc
(bad)
cli
std
or
sbb
jns
outs
not
and
lahf
xchg
fimul
jno
enter
cmp
xor
into
loop
popf
adc
ins
mov
cmps
in
or
mov
bound
lods
cmp
gs
and
js
out
mov
pop
stos
stc
nop
jae
dec
jmp
inc
mov
(bad)
push
fwait
adc
(bad)
lock
lahf
aam
jg
and
xchg
sbb
push
loopne
xchg
sahf
rcl
loope
push
add
repnz
xor
std
gs
pop
and
cmps
pop
lock
and
int
xor
rcl
inc
bound
xchg
imul
pop
shl
bound
call
pop
cmp
ret
pusha
test
mov
out
push
cs
mov
iret
and
and
mov
sub
sbb
sbb
inc
mov
add
mov
push
bound
jp
cmp
loopne
cmps
dec
cmp
and
xchg
ins
fnstcw
mov
fwait
fwait
mov
sub
aaa
mov
test
dec
push
ss
cmp
mov
pusha
or
in
mov
cmp
out
shl
cdq
pop
mov
rol
test
retf
out
in
xchg
sbb
cmp
call
jne
mov
fsub
pop
bound
xchg
lahf
lea
pushf
imul
pop
adc
or
or
mov
arpl
jmp
push
fstp
sbb
mov
pop
ja
inc
shl
jmp
push
xchg
jmp
daa
fdivr
sub
jp
clc
out
loopne
cmp
xchg
es
mov
pushf
out
xchg
mov
fadd
push
fisub
imul
retf
shl
and
mov
and
lahf
xchg
push
stos
aaa
jo
hlt
cmp
push
pushf
mov
shr
xchg
nop
sahf
and
xchg
ins
sbb
mov
xchg
pop
jns
xor
or
int
jge
sub
ins
mov
push
mov
popf
sbb
clc
mov
pop
xor
les
gs
pop
cmp
jle
push
jbe
ficomp
movs
jmp
xor
je
or
xchg
or
loopne
dec
dec
inc
mov
or
shl
imul
and
pushf
inc
fs
mov
add
xchg
fdivrp
(bad)
stos
xchg
add
add
dec
mov
jmp
ds
cmp
mov
aam
jno
sti
xchg
xchg
cli
add
stos
and
and
rcr
mov
in
sti
popf
mov
aam
mov
xlat
outs
scas
clc
hlt
sar
stos
and
das
sub
xchg
daa
fbstp
cmp
inc
gs
gs
bound
mov
leave
dec
nop
scas
xchg
retf
jmp
rol
sub
mov
int3
scas
leave
push
aad
pushf
mov
push
cwde
add
jge
inc
(bad)
lds
mov
and
out
jb
dec
push
(bad)
arpl
clc
dec
cmp
repnz
xor
jae
fwait
pop
push
imul
lahf
inc
ret
pop
test
fs
pop
loopne
popa
test
sbb
or
mov
sub
addr16
mov
mul
aam
(bad)
iret
sub
xlat
adc
dec
cmp
jmp
out
jmp
or
dec
mov
(bad)
sub
or
push
hlt
dec
ret
xor
leave
mov
pop
aad
xchg
es
push
push
xor
enter
mov
sub
add
in
sbb
mov
mov
ins
movs
push
lahf
sbb
adc
add
lds
pop
test
mov
(bad)
lahf
lds
and
adc
push
das
aad
inc
sbb
ins
cli
int
and
jg
jmp
test
xlat
(bad)
cld
pop
retf
dec
hlt
daa
or
stc
data16
shl
sub
lods
and
lods
cmps
push
mov
cmps
push
fstp
(bad)
ins
adc
jge
ss
mov
inc
mov
pop
mov
and
cmc
push
push
xlat
xor
dec
jge
ja
cmp
fstp
mov
dec
pop
pop
pop
mov
(bad)
cmps
out
test
add
mov
xor
add
jne
rol
xchg
mov
push
inc
push
(bad)
sbb
mov
sub
out
sub
cwde
loopne
sbb
jno
and
js
adc
cmps
jmp
icebp
mov
inc
mov
mov
retf
int
outs
or
add
jge
adc
imul
cmp
dec
popf
ficom
push
je
dec
pop
aam
ins
cmc
shl
inc
icebp
jo
sub
lods
adc
xor
aam
mov
cli
cli
push
ja
retf
jo
push
xchg
push
xor
mov
xchg
aad
fucom
dec
mov
sbb
cmp
in
lds
loope
mov
scas
adc
mov
scas
mov
scas
cs
out
mov
mov
into
mov
sti
stc
or
mov
and
shl
in
les
pushf
or
push
sub
inc
sub
imul
xchg
cmp
push
mov
xchg
arpl
idiv
fisubr
or
jb
mov
(bad)
sbb
adc
lea
stos
ror
jp
jae
out
sti
dec
or
dec
jns
imul
add
cdq
mov
lock
outs
mov
jg
sub
jne
out
pop
hlt
adc
adc
cwde
aam
ja
fwait
icebp
(bad)
cld
movs
fsub
xor
inc
jae
pop
pop
es
push
add
jecxz
jno
add
add
mov
sub
xor
enter
repz
xor
in
or
test
sub
shl
push
aam
out
fist
packsswb
adc
push
pop
test
sbb
sbb
xchg
xchg
fsub
mov
lods
fsub
inc
fs
pop
sub
test
add
and
mov
xor
popa
adc
sub
sbb
pop
or
outs
pop
movs
adc
sub
ins
fidiv
int3
lock
jae
loope
add
das
shr
movs
rol
ja
mov
int3
mov
fidiv
mov
mov
in
out
cld
inc
push
xchg
jmp
test
aad
sti
push
sbb
adc
or
mov
xor
fidiv
mov
nop
aam
xor
outs
fcomp
in
aas
mov
xchg
(bad)
mov
cmps
dec
mov
mov
adc
dec
cld
(bad)
addr16
rcr
mov
out
xor
sbb
add
pop
mov
movs
mov
adc
sub
lods
mov
xchg
std
mov
(bad)
push
jns
std
loope
mov
imul
and
ins
out
jle
sub
cdq
daa
cmps
cli
rcl
(bad)
sahf
cmp
js
push
sub
inc
fwait
jno
sub
imul
push
sbb
cs
inc
cmp
push
pop
jl
jo
loopne
cld
pop
rcl
jg
repz
fsubr
dec
adc
(bad)
data16
pop
popa
out
aad
push
gs
rol
movs
arpl
and
int
dec
dec
xor
xor
rcr
cmps
add
pop
rcl
mov
and
mov
add
nop
lods
mov
sbb
loope
movs
mov
(bad)
jo
addr16
jns
xchg
and
add
xor
stos
mov
add
(bad)
jl
jnp
pop
clts
rol
(bad)
mov
icebp
xor
cs
pushf
repnz
cmp
in
and
push
and
imul
loope
retf
jae
lods
loope
jb
sub
pop
(bad)
sub
cmp
gs
imul
nop
outs
pop
adc
les
cmp
in
sub
(bad)
and
test
icebp
adc
nop
dec
pusha
pop
fbstp
cmp
add
jle
jne
cli
int
nop
(bad)
mov
mov
stos
aas
pop
or
mov
stos
dec
rcl
jle
xchg
and
imul
out
aam
dec
xor
jbe
xchg
add
jnp
xlat
addr16
mov
jmp
pusha
cmc
sbb
pushf
ffree
push
cmp
add
ret
call
fsubr
clc
dec
stos
fbld
mov
outs
ja
or
pop
int
xchg
mov
sub
sub
xchg
cmp
outs
inc
nop
sub
mov
mov
int3
out
mov
sbb
in
(bad)
push
or
fisttp
jne
gs
fyl2x
jle
aas
jnp
shl
(bad)
inc
cmp
and
es
add
xor
xor
shl
ret
sub
lock
add
int3
xor
jle
pushf
pop
pop
mov
lods
(bad)
add
lds
mov
scas
movs
add
sahf
push
into
rcl
mov
pop
fwait
inc
push
xchg
cdq
jae
mov
out
add
jp
std
shr
jl
lds
into
lds
jb
outs
loopne
mov
retf
es
push
mov
jle
xchg
xchg
data16
mov
js
xchg
push
xchg
lea
int3
mov
gs
mov
mov
xchg
push
popf
push
or
dec
stos
call
inc
add
(bad)
pop
loopne
loope
shr
inc
or
dec
push
scas
pop
frstor
out
clc
cld
in
iret
push
popa
call
call
jmp
repnz
cmc
out
mov
push
gs
inc
(bad)
out
mov
ret
fisub
bound
lea
clc
jge
ret
pushw
push
dec
es
jae
in
test
(bad)
pop
imul
imul
pop
jbe
into
inc
pop
or
jecxz
outs
pop
std
rcl
pop
fadd
xchg
adc
retf
popf
loope
sbb
mov
pop
pop
and
daa
jmp
mov
jae
or
cmp
dec
fld
inc
lock
dec
xchg
jnp
in
fcmovnb
mov
fiadd
in
outs
xchg
sbb
outs
xchg
hlt
loopne
mov
cli
into
aas
xlat
lods
fprem
out
fsub
mov
push
sti
cwde
aam
pop
repnz
pop
test
hlt
cdq
mov
cmp
pop
xor
jmp
mov
fucomip
pop
mov
jnp
dec
mov
out
push
and
and
in
int3
shr
rcl
lods
dec
(bad)
movs
ret
mov
lods
scas
dec
cdq
fist
imul
jns
pop
mov
mov
mov
int
stos
dec
popf
mov
int
sub
loopne
inc
inc
test
pop
addr16
rcr
pop
sub
pop
mov
out
pop
mov
sub
xchg
xchg
loope
je
popa
pop
adc
ins
add
push
dec
mov
lahf
idiv
push
(bad)
popf
pop
sbb
retf
cs
and
mov
nop
cmp
sti
ror
jl
xor
sub
test
test
out
xlat
int
clc
arpl
fisubr
dec
aam
leave
push
and
aad
sbb
sbb
xor
xchg
repz
cmp
outs
movs
cmp
or
add
ret
pop
mov
stos
mov
or
lahf
ret
test
mov
out
and
jbe
pop
sbb
push
cmp
xchg
pop
mov
mov
adc
lods
ss
and
repz
fcomp
sbb
dec
push
ret
push
aaa
pop
lds
les
push
out
mov
push
imul
test
mov
stos
mov
xor
xlat
sbb
retf
mov
stc
iret
cmp
mov
xor
out
jne
iret
add
into
jmp
sub
mov
ja
popa
gs
jo
mov
xchg
xchg
jmp
dec
sbb
test
das
cli
push
sub
in
inc
add
sbb
dec
retf
jno
cmp
sbb
rcl
dec
std
jmp
jecxz
(bad)
mov
nop
mov
stos
pushf
imul
outs
cmps
push
lea
pop
shl
cmp
clc
pushf
cs
add
test
bound
dec
sbb
out
data16
aas
mov
imul
add
sub
and
cmp
test
dec
into
push
in
or
cld
pushf
jnp
cmps
ret
jecxz
sbb
pop
fcomp
and
mov
push
ins
fisub
pop
xlat
jecxz
or
add
test
cmps
lahf
jge
mov
cmp
jnp
pop
nop
cmps
sub
test
fistp
push
ja
xor
or
dec
shl
cwde
stos
xchg
dec
mov
(bad)
pop
cli
xchg
pop
arpl
ss
jmp
dec
pop
mov
xor
mov
pminub
shr
dec
pop
test
xchg
aam
call
jb
stos
push
ins
mov
loop
xchg
inc
sbb
hlt
loopne
adc
inc
stos
mov
dec
shl
sbb
outs
push
fmul
(bad)
iret
fsub
scas
mov
iret
ds
mov
mov
jl
jle
sub
fsubrp
xchg
mov
retf
cmp
inc
mov
dec
xor
out
cdq
dec
cmp
ret
xchg
scas
inc
scas
and
xchg
jmp
push
xchg
or
adc
sub
aaa
sub
call
inc
into
mov
sub
push
sbb
add
test
mov
stc
in
and
and
cmc
imul
dec
fidivr
xlat
push
xchg
inc
jae
cwde
jo
or
cmp
dec
dec
data16
add
sub
xlat
mov
cmps
rcl
scas
mov
mov
xor
je
lea
and
mov
into
inc
sbb
popf
xchg
adc
add
aad
dec
adc
cmp
mov
pop
pop
adc
push
mov
shl
adc
cmps
jnp
pushf
mov
sub
nop
mov
test
orps
lds
int
jmp
repnz
data16
stos
into
aas
gs
cmp
sar
cli
sar
push
(bad)
jb
inc
retf
cmp
lods
and
lods
or
push
inc
add
dec
loope
mov
dec
add
bound
iret
(bad)
mov
mov
jb
dec
add
xchg
xchg
and
mov
cmc
idiv
pop
dec
call
mov
loope
imul
inc
dec
mov
aam
dec
movs
scas
jge
shr
and
sub
retf
push
shl
les
pusha
stos
push
(bad)
jne
pop
dec
ins
ss
xchg
in
xor
fnstenv
cmp
inc
pop
inc
pop
dec
pop
das
dec
dec
aad
dec
adc
push
hlt
movs
push
fsub
sbb
dec
sbb
jbe
push
fdivr
iret
aaa
icebp
xchg
shl
pop
and
add
inc
and
sub
mov
dec
jbe
mov
stos
rcl
xor
pop
push
add
imul
lods
add
mov
test
adc
adc
sbb
iret
scas
add
imul
adc
jbe
and
jne
popf
call
jb
mov
dec
repz
pop
retf
cmp
hlt
sub
cmc
shl
add
mov
fs
pop
cld
jl
xchg
jo
inc
mov
jmp
jno
fiadd
push
cmps
inc
test
push
sub
mov
and
dec
dec
or
mov
mov
mov
mov
mov
icebp
repnz
pop
test
cwde
and
sbb
mov
out
sbb
inc
test
movs
leave
pop
jl
ret
aad
push
cmovne
ret
cmp
cmps
jmp
push
cmps
xchg
push
mov
mov
fdivp
(bad)
lock
retf
pop
cmp
imul
imul
stos
out
sub
cmp
adc
and
retf
mov
in
test
dec
pop
sub
pop
mov
jb
outs
out
cmp
xchg
cmp
ja
ins
jl
push
(bad)
xchg
jae
cld
xor
dec
xchg
push
push
xor
lods
pop
mov
nop
mov
shl
cmps
fwait
pop
cld
out
push
jo
push
push
aad
cmp
and
ret
gs
and
aad
clc
fs
jl
test
xor
loopne
fisubr
sbb
pop
fsubr
cmp
cli
(bad)
fs
int3
loope
outs
sub
pop
imul
stos
cli
inc
and
jmp
sti
inc
ins
pop
push
jp
mov
push
jo
add
in
lods
popa
jmp
xchg
fprem1
fadd
out
test
sub
fwait
xchg
fld
inc
retf
call
mov
fucom
sbb
into
xor
push
(bad)
cmp
jbe
dec
cmp
pop
mov
adc
(bad)
out
xchg
dec
mov
pop
jle
inc
or
dec
xchg
icebp
es
outs
cmp
jnp
out
jl
mov
push
fbstp
adc
pop
pop
fstp
loopne
and
fimul
and
cmp
pop
loopne
das
out
in
cld
je
adc
push
push
mov
pop
shl
vpsubw
mov
xchg
fwait
out
in
adc
gs
into
fsub
mov
push
call
scas
sbb
imul
(bad)
sbb
xor
(bad)
cmp
xchg
push
cmps
mov
test
cmp
movs
inc
add
sbb
(bad)
fadd
add
cmp
loopne
pop
es
push
imul
popa
sub
fcmovb
lods
adc
jo
xlat
pop
mov
or
ret
shl
gs
pushf
cli
sbb
bnd
adc
push
jne
adc
out
cdq
das
(bad)
jbe
movs
push
cs
inc
cmps
adc
xor
or
sahf
cmp
retf
mov
pop
leave
or
scas
push
outs
les
mov
xchg
mov
mov
pusha
xchg
test
push
pop
retf
jl
popf
lods
pop
sub
f2xm1
add
leave
xchg
mov
outs
div
scas
mov
add
popa
pop
enter
pop
aad
mov
(bad)
jbe
dec
aam
mov
mov
and
push
out
inc
cli
cwde
dec
inc
or
popa
adc
lock
mov
pop
cmp
scas
xchg
inc
and
ret
jns
and
xchg
sub
popf
push
aam
cmp
stos
sbb
cmp
push
(bad)
fwait
test
xchg
test
out
ins
mov
mov
out
inc
sub
add
add
sub
jno
les
mov
sbb
int
sbb
bsf
loop
aam
xor
ins
pop
dec
xchg
fbld
dec
push
inc
jmp
add
mov
pop
and
ficomp
out
repz
cli
out
jae
xchg
pushf
push
or
icebp
jmp
arpl
add
xor
(bad)
ds
lods
jle
cld
fwait
stc
xor
lock
ins
pop
pusha
mov
aaa
cmps
out
adc
es
cdq
xor
out
cli
iret
pop
lock
fdiv
adc
jb
dec
push
sub
mov
mov
push
fwait
ror
movs
aad
mov
jb
(bad)
jmp
stc
add
int
ja
sbb
leave
(bad)
sub
iret
jmp
inc
push
frstor
les
fidiv
retf
xchg
gs
push
aad
xchg
or
inc
in
add
cdq
mov
push
dec
sub
xor
inc
fnstenv
and
pop
leave
pusha
dec
jmp
adc
mov
jns
test
sub
or
jg
test
cwde
push
test
ret
adc
fnstcw
(bad)
pop
popf
xor
dec
pop
xor
cmp
sbb
sub
push
jl
out
jge
jecxz
push
scas
pcmpgtb
int3
test
sbb
(bad)
lds
sar
mov
mov
les
scas
jae
dec
xor
rcl
pusha
xchg
pop
inc
or
rep
adc
adc
push
jno
mov
(bad)
aad
jae
bound
lock
or
loop
je
lea
bound
fwait
adc
push
jo
out
pop
sub
test
xchg
retf
xchg
dec
jne
test
not
add
test
bnd
ins
jne
push
bound
mov
mov
push
outs
outs
jne
(bad)
push
ret
retf
icebp
mov
ret
jmp
push
ss
cli
inc
jecxz
into
mov
iret
out
lahf
pop
outs
jbe
das
add
mov
or
jmp
aas
out
jns
leave
pop
in
movs
(bad)
fsubr
ret
xchg
into
inc
das
mov
xor
cmps
adc
(bad)
xor
push
imul
xor
out
jmp
scas
mov
in
cmc
inc
sbb
iret
mov
push
retf
sbb
cmp
fnclex
scas
sub
xchg
(bad)
sub
mov
push
es
in
pop
or
dec
push
inc
fild
scas
in
(bad)
cld
jmp
out
xchg
push
rep
std
cmp
or
sub
and
adc
dec
jp
arpl
in
xchg
inc
push
add
xor
add
and
mov
push
cmp
sub
sbb
test
mov
push
(bad)
lea
loope
and
mov
(bad)
sbb
fadd
ja
adc
or
inc
xchg
(bad)
jb
cs
stos
ins
mov
mov
mov
push
or
cli
jl
icebp
push
cmp
adc
out
mov
xchg
retf
adc
pop
out
xor
push
inc
addr16
(bad)
inc
mov
xchg
pop
pop
mul
leave
outs
aam
push
dec
push
cwde
jp
dec
retf
repz
jmp
sbb
push
shl
xchg
inc
adc
jmp
ds
push
push
cmc
sub
mov
sub
std
pop
icebp
ror
jle
pop
not
dec
(bad)
cs
dec
ins
dec
mov
push
add
stc
jb
jge
mov
ins
push
fmul
mov
inc
xchg
jecxz
xchg
mov
jae
dec
scas
xor
fcomp
out
out
adc
pusha
in
cmp
cmps
sbb
or
out
pop
jge
adc
mov
pop
ret
mov
inc
cmps
mov
(bad)
bound
push
jo
lods
pop
push
cmp
gs
mov
push
push
fsub
cmp
mov
or
jne
add
cmp
cmp
imul
ins
pop
popf
push
mov
mov
sub
fidiv
mov
fldcw
jle
pop
pop
mov
mov
and
ins
pop
dec
test
jecxz
into
in
dec
div
inc
mov
xor
mov
fild
and
inc
hlt
cmp
sub
xchg
ror
or
test
sbb
pushf
push
push
pop
and
sub
pop
loope
stos
sti
aaa
ss
push
dec
hlt
jbe
fs
rcl
xor
cs
pusha
nop
popf
adc
cmp
add
pop
fs
(bad)
mov
rol
les
pop
dec
outs
jge
add
jg
nop
and
jbe
xor
push
or
mov
add
xor
retf
(bad)
imul
(bad)
sub
sub
loop
out
mov
push
stos
scas
mov
inc
pop
int
in
cdq
cmps
sysret
mov
movs
add
cmp
out
test
sub
pop
or
les
xchg
jmp
and
je
popa
popa
mov
xchg
ins
mov
cmp
imul
loopne
out
mov
xchg
test
xor
cmps
cmp
ins
mov
frstor
jbe
dec
add
inc
pop
test
dec
mov
dec
(bad)
imul
or
mov
test
jo
scas
jb
stos
int
in
pop
push
repz
jns
mov
jmp
in
stos
cmps
sbb
out
adc
mov
dec
dec
dec
jmp
jmp
xlat
jno
and
add
gs
ja
mul
add
stc
ss
push
cmp
pop
loopne
stc
and
jb
jmp
out
stos
sbb
mov
pop
cmp
push
nop
scas
sub
xchg
mov
pop
mov
or
sbb
jno
data16
mov
mov
xchg
adc
mov
xlat
push
or
fidivr
pushf
mov
xor
mov
pop
out
mov
enter
jne
push
lock
and
outs
imul
shr
fs
adc
inc
jb
pushf
or
mov
push
sbb
shl
adc
jns
cmps
mov
sub
mov
cmp
pop
mov
scas
adc
(bad)
adc
mul
lods
test
mov
sbb
test
push
xchg
retf
pusha
lods
sub
mov
xchg
ret
cmps
sti
loope
inc
xor
add
xor
jb
or
out
mov
and
mov
mov
repnz
fadd
dec
and
xor
dec
inc
inc
or
scas
pop
(bad)
dec
out
out
loop
mov
jo
sbb
xchg
fs
or
lock
pop
adc
in
mov
xchg
sbb
pushf
pusha
mov
cmps
inc
mov
sub
push
test
int
gs
sub
mov
pop
rcl
in
sbb
inc
loopne
jo
push
inc
mov
mov
rcl
lock
loope
and
sbb
pop
frndint
ror
mov
adc
nop
push
xchg
inc
arpl
mov
test
xor
bswap
mov
and
mov
dec
lods
into
sbb
cmp
(bad)
sub
or
ret
inc
inc
and
cmps
sbb
sub
stc
int3
xlat
mov
in
int3
daa
mov
or
jecxz
xchg
and
inc
stos
inc
cmps
enter
or
js
dec
add
popa
xchg
xor
pop
lds
jno
adc
call
add
data16
xor
cli
xlat
xchg
mov
inc
pushf
sbb
dec
movs
popf
add
das
and
inc
xor
and
popf
mov
mov
cld
sahf
mov
(bad)
add
sub
aas
je
or
fstp
push
add
xchg
jp
and
sbb
cmps
retf
jg
mov
mov
pop
and
and
sahf
mov
mov
je
dec
inc
jp
mov
pop
push
xchg
loopne
adc
in
xchg
inc
mov
fist
xor
cmc
and
arpl
sbb
hlt
outs
or
xchg
aas
(bad)
stos
fs
jmp
sbb
push
or
xor
mov
jmp
ss
pop
movs
nop
add
dec
mov
push
cmp
jle
lock
icebp
rol
outs
outs
imul
push
and
mov
shr
xchg
pop
pop
ins
loop
jno
dec
(bad)
fisub
clc
js
gs
gs
cmp
outs
xor
stos
fwait
loop
pushf
shl
stos
xor
mov
ret
scas
cld
mov
or
sti
loopne
fld
dec
daa
sbb
imul
movs
adc
fucomp
add
pop
xchg
sub
pop
push
xor
cmovno
mov
inc
sahf
test
sub
and
fyl2xp1
dec
adc
or
xlat
ret
cld
dec
xlat
test
sub
outs
sti
int
jns
in
adc
in
repz
inc
and
push
sub
repnz
mov
call
mov
cmp
add
fsubr
sub
addr16
lahf
push
aas
pusha
lods
clc
jmp
cmp
repnz
imul
pusha
fmul
mov
out
mov
test
aaa
inc
push
push
inc
mov
mov
ins
jl
sub
(bad)
popa
cld
push
lahf
or
and
ret
xchg
dec
retf
arpl
test
lds
leave
pop
xlat
pusha
cs
cmp
aam
data16
sbb
mov
retf
inc
test
inc
mov
fimul
adc
loop
popa
push
sbb
or
and
adc
ss
fistp
xor
js
push
jbe
jecxz
jp
inc
and
adc
mov
adc
stos
imul
(bad)
movs
lods
sbb
jne
pusha
daa
push
daa
mov
mov
fcom
fwait
adc
ficom
sub
in
push
pop
or
(bad)
in
out
add
out
mov
es
and
inc
sbb
cld
push
sar
icebp
mov
pushf
or
add
popf
movs
push
sub
mov
sbb
cmc
div
mov
sbb
mov
xor
xor
call
push
out
cmc
(bad)
or
stos
(bad)
sbb
popf
mov
dec
ja
inc
mov
mov
dec
ret
stos
pushf
lds
ins
xor
mov
xor
and
ret
fild
clc
adc
push
pop
pop
in
int
adc
shl
std
jle
xchg
mov
std
adc
inc
mov
xchg
inc
inc
adc
cmp
xor
ss
jne
pop
sbb
sub
nop
and
mov
sub
add
in
dec
xchg
push
sahf
mov
bound
ficom
div
xor
jmp
loop
push
cdq
clc
mov
jns
nop
push
fnstsw
push
pop
mov
mov
sub
push
popf
add
(bad)
js
xor
or
sbb
idiv
fistp
test
jnp
lock
jl
xlat
ret
sbb
inc
and
add
inc
xchg
inc
jg
popa
xlat
stos
dec
les
add
cmp
mov
out
ror
push
jns
pop
push
shr
test
xchg
cdq
sub
dec
xor
jbe
dec
sub
adc
lds
adc
xchg
dec
xchg
sub
dec
cmps
cld
dec
ss
enter
pop
pushf
movs
rcr
stos
fidivr
dec
xlat
(bad)
fcomp
and
mov
jle
push
mov
add
sbb
mov
outs
and
adc
add
out
sti
adc
ror
aam
in
sub
dec
jmp
push
into
mov
es
std
cmps
add
push
addr16
and
imul
(bad)
or
call
sbb
push
cmp
loope
cmp
dec
xlat
popa
test
fsubr
iret
push
adc
retf
or
dec
mov
mov
pop
out
fst
adc
add
jg
jmp
sub
fsubr
pop
pop
cld
xor
push
xchg
cmp
mov
leave
fadd
jge
std
dec
cdq
adc
fdivr
popa
dec
call
pop
test
cmp
or
jg
push
adc
inc
mov
sbb
bound
int3
push
out
or
mov
add
add
fucomp
hlt
icebp
ficomp
xchg
mov
adc
inc
stos
fnsave
inc
mov
movs
mov
sbb
fadd
scas
(bad)
cdq
cmps
gs
cmp
mov
aad
ins
ds
or
(bad)
popa
jb
cmp
xor
add
sbb
hlt
jecxz
pop
pop
pop
jmp
lods
sub
adc
dec
sbb
rcr
xor
hlt
ds
pusha
and
adc
inc
sub
jnp
xchg
fisubr
xor
hlt
lods
jo
pop
jecxz
mov
jp
push
or
jmp
rcl
mov
mov
data16
(bad)
xlat
jns
push
paddw
push
xor
and
stc
dec
xchg
dec
adc
lods
xchg
sti
es
push
xor
and
pushf
data16
test
out
popf
cmp
xor
mov
push
inc
add
aaa
movs
gs
popa
pop
neg
push
cmps
sbb
mov
pop
jae
add
sbb
and
cmp
pop
nop
sti
jmp
mov
jmp
add
or
arpl
ficomp
xor
and
push
std
xor
inc
stos
add
xor
dec
movs
fadd
jb
shl
xlat
jmp
ja
imul
jp
stos
add
ret
mov
sub
std
cmps
xor
and
jae
pop
mov
(bad)
cmps
dec
idiv
icebp
loopne
mov
push
push
and
ror
leave
(bad)
fisttp
rol
inc
loop
push
mov
scas
enter
(bad)
sti
jns
lods
pop
dec
lahf
out
inc
mov
into
xor
mov
jp
xchg
outs
cli
dec
dec
scas
lds
lods
outs
arpl
cmp
push
add
arpl
mov
dec
sti
adc
mov
xor
std
pusha
inc
cmp
sbb
mov
adc
(bad)
xor
add
and
dec
jecxz
das
cmps
or
(bad)
mov
xchg
push
xor
sar
pavgw
push
jae
push
pop
adc
retf
or
pop
or
or
test
js
aad
std
or
retf
mov
push
outs
push
scas
(bad)
cmc
pop
cmp
jle
xchg
les
retf
mov
adc
xor
mov
mov
outs
push
mov
dec
fisttp
(bad)
pop
adc
adc
(bad)
test
test
cwde
test
xchg
(bad)
fist
xchg
lods
cmp
jno
ss
lahf
sub
push
rcl
adc
into
push
stos
imul
jae
cmp
mov
retf
test
mov
inc
adc
pop
or
cmp
(bad)
jmp
gs
in
das
std
loope
add
aam
mov
hlt
sbb
jp
jb
outs
xchg
int
or
or
test
sbb
fs
enter
and
push
(bad)
xlat
xor
lods
(bad)
jnp
mov
mov
and
adc
seto
pop
mov
xchg
xchg
push
jp
clc
and
mov
or
idiv
fwait
cmp
sbb
jg
jne
push
jmp
jle
sbb
addr16
pop
xor
add
dec
int3
or
inc
out
jae
push
std
hlt
sbb
mov
xchg
inc
xchg
mov
pop
cmps
js
sub
adc
inc
fisttp
xchg
jnp
push
clc
popf
ret
retf
cld
mov
call
aaa
sub
das
sub
loop
mov
faddp
mov
mov
std
shl
(bad)
test
gs
pop
test
xchg
push
popf
mov
call
fild
loopne
cmps
sub
fld
test
sbb
in
sbb
push
xchg
cld
leave
add
push
dec
lods
das
dec
enter
jne
and
dec
mov
fcomp
cmp
push
sbb
ds
sti
lods
leave
push
xor
out
cmp
adc
outs
jl
in
repnz
cmp
push
adc
out
repz
add
cmc
push
jbe
cdq
mov
jo
adc
and
jge
fiadd
mov
xchg
mov
outs
sbb
scas
dec
or
aas
mov
mul
cmp
add
mov
push
mov
pop
push
mov
or
js
inc
fisttp
sbb
jne
pop
shl
xor
and
sub
pop
xchg
fsubr
mov
fdiv
mov
sub
adc
sub
jle
sahf
in
je
inc
ret
in
jecxz
fwait
ss
add
lahf
mov
(bad)
scas
jl
jb
push
mov
bnd
inc
nop
fdivp
jnp
call
inc
movs
or
pop
mov
or
xchg
sbb
adc
cmp
xchg
sar
sahf
fdivr
fcom
push
adc
das
inc
mov
add
scas
lea
jno
inc
jno
dec
popf
xchg
xchg
fnstcw
mov
cmp
in
stos
xchg
or
sbb
pop
daa
out
mov
cli
or
dec
push
mov
pop
mov
int3
popa
stos
shl
sbb
aad
loopne
retf
(bad)
push
in
sbb
cwde
stos
or
inc
imul
lds
stc
pop
scas
xchg
repz
adc
pop
and
mov
push
das
adc
in
clc
pop
xchg
in
stc
mov
aas
pop
mov
and
nop
out
ret
and
outs
or
push
ret
scas
sbb
sub
inc
cmp
xchg
push
fistp
xor
les
fstp
(bad)
in
mul
mov
xchg
sub
pop
mov
imul
(bad)
or
mov
test
ret
push
mov
lods
test
addr16
dec
mov
pop
dec
scas
test
test
mov
test
dec
bound
lods
jmp
hlt
iret
jl
pusha
movs
je
ror
mov
pop
mov
sub
and
fs
add
sbb
jo
aam
and
mov
mov
addr16
(bad)
ret
sub
scas
idiv
nop
retf
xor
sbb
in
cmp
and
sbb
pop
fwait
sbb
ret
sbb
call
fidivr
ss
xchg
dec
(bad)
scas
test
jne
sbb
ja
sub
int
mov
nop
imul
xlat
cmp
mov
fucomip
loopne
inc
outs
leave
push
jp
cdq
and
js
mov
call
mov
inc
test
je
cli
mov
push
addr16
sub
mov
les
cld
pop
sub
(bad)
clc
jmp
and
cs
adc
call
dec
adc
(bad)
rcl
pop
cld
retf
or
in
sti
ins
mov
adc
lods
sbb
inc
inc
and
sbb
cmps
jno
ret
loopne
jmp
fadd
adc
xchg
mov
mov
dec
lock
mov
ja
pop
rol
jle
popa
std
(bad)
fcomp
push
scas
push
pusha
jg
jp
jg
inc
inc
movs
test
in
push
out
sub
xchg
cmps
mov
mov
lds
mov
aas
push
mov
retf
stc
int3
retf
mov
lock
fwait
cmc
imul
pop
std
mov
lock
push
mov
in
push
neg
pop
dec
pop
sahf
bound
out
stos
or
je
pop
add
ror
test
lock
mov
cmc
outs
jns
jmp
mov
add
ja
fstp
fwait
xchg
stc
scas
push
sbb
(bad)
or
xchg
or
mov
loopne
mul
xor
popf
lea
pop
jnp
loopne
int3
and
or
mov
cmp
add
shr
outs
pop
dec
mov
test
test
imul
or
add
add
push
jne
addr16
dec
arpl
push
(bad)
mov
cmp
or
sub
xchg
not
adc
fistp
pop
or
mov
in
jns
inc
cwde
xchg
adc
push
stos
aaa
cmp
imul
imul
adc
nop
cld
sbb
xor
pop
mov
mov
and
jl
imul
mov
push
cmp
adc
bound
and
dec
mov
jecxz
dec
or
push
aam
xchg
and
das
aas
data16
mov
xor
pop
xor
shl
fisttp
pop
out
in
mov
xchg
out
xchg
arpl
xor
out
in
out
push
inc
or
xchg
movs
xchg
test
loope
or
dec
add
cmovl
sar
mov
pop
int3
push
test
xor
mov
xchg
mov
xor
mov
repnz
mov
(bad)
pop
or
jl
dec
cmc
xor
loopne
cmp
iret
xor
jae
ins
sahf
and
cld
outs
jno
test
imul
push
(bad)
cmp
icebp
push
pop
push
mov
cmps
outs
mov
fsubr
cmp
popf
push
push
dec
or
inc
iret
mov
sub
cwde
push
or
mov
jl
retf
add
aad
mov
ret
mov
xchg
pop
cmp
ss
mov
xchg
(bad)
ret
ret
pop
jl
int
or
(bad)
not
movs
das
fmul
cmp
mov
add
mov
into
lock
mov
xor
inc
jne
cmp
sar
std
ins
aam
(bad)
jnp
jb
jne
add
xchg
mov
xchg
retf
imul
aad
ins
out
xor
repz
inc
cld
jle
or
mov
iret
(bad)
(bad)
gs
jmp
mov
fwait
cmp
cld
sbb
pop
cmp
pop
dec
xor
and
mov
lea
pusha
and
mov
push
in
sub
les
cli
mul
loop
jns
sahf
outs
daa
add
mov
sub
pop
push
arpl
fild
xchg
scas
stc
mov
jnp
mov
cmc
lahf
lahf
mov
sub
and
mov
jne
clc
fwait
mov
pop
sbb
sub
les
(bad)
jae
mov
mov
pop
xchg
test
sbb
pop
xor
(bad)
sub
stos
and
rcl
int
repz
movs
jnp
repz
scas
ins
mov
mul
add
je
cmp
push
fistp
shr
and
inc
es
dec
imul
rol
retf
jmp
sbb
sub
aad
int3
(bad)
mov
aad
rcl
lods
inc
adc
sbb
and
ja
pop
inc
das
push
je
pop
add
xor
cmc
jp
and
adc
popa
push
test
mov
xor
test
icebp
cmovo
inc
xor
jno
push
mov
cli
mov
shl
adc
mov
inc
push
aam
into
pop
sub
mov
sbb
adc
das
out
loope
stos
mov
xchg
pop
dec
lock
mov
dec
jne
ss
lea
sub
test
cmp
xor
fs
retf
ss
add
or
pop
shl
add
enter
jne
xor
not
xor
retf
movd
popa
popa
sub
or
or
sub
or
or
push
sti
jnp
mov
shr
stos
sub
jbe
call
inc
adc
add
(bad)
ds
pop
fadd
or
scas
fimul
adc
add
push
lods
pop
sbb
xor
push
xlat
fidivr
sub
outs
or
(bad)
xor
aam
mov
add
jo
pop
push
pop
ret
or
sub
push
or
jmp
(bad)
push
daa
out
rcl
repz
mov
shl
and
pop
js
ret
les
pop
iret
jp
xchg
jo
inc
ja
stos
sbb
and
jb
add
data16
add
cmp
and
ins
push
mov
pusha
push
xchg
pop
popa
jmp
stc
jno
bnd
inc
sbb
push
sbb
jl
repnz
cmp
push
jnp
adc
cmp
cld
enter
pop
or
cmps
xchg
mov
sbb
jae
mov
pop
xor
push
fadd
std
ja
add
mov
dec
xchg
pop
push
jo
jb
xor
pop
cmp
and
cmp
call
fmul
arpl
test
call
sbb
mov
jbe
push
cs
sbb
xor
arpl
mov
cmc
ret
test
pop
icebp
push
test
hlt
lock
mov
inc
ss
repnz
inc
inc
stc
and
cs
push
jle
ins
pop
push
enter
inc
or
es
(bad)
int
cmc
std
stos
xchg
add
mov
jne
xlat
jne
push
mov
enter
shl
jg
call
stc
int
pushf
bound
xchg
pop
sub
cld
or
jle
popf
dec
xlat
lods
inc
inc
dec
sahf
jns
(bad)
cmp
pop
(bad)
ins
test
mov
inc
xlat
dec
movs
jl
loop
mov
in
test
push
add
push
pusha
ins
out
or
cmps
pop
push
mov
call
(bad)
cwde
dec
add
daa
cmps
fisttp
ficomp
xchg
jp
adc
lea
mov
lods
mov
fwait
mov
std
ins
adc
into
pop
test
push
push
pop
cs
pop
or
push
jmp
dec
rcl
jecxz
push
cmp
xor
or
pop
or
pop
dec
dec
es
inc
lods
jb
adc
add
pop
icebp
xchg
inc
fiadd
lods
xchg
dec
add
xor
jmp
loope
aas
and
rol
sbb
pop
shl
inc
push
iret
in
mov
cwde
(bad)
xchg
mov
dec
fisub
and
call
lahf
pop
stos
mov
in
push
gs
push
sub
cmp
inc
cld
xlat
inc
mov
fwait
mov
(bad)
xchg
movs
std
outs
shl
xor
call
jecxz
or
and
bound
cmc
mov
push
ins
mov
dec
retf
test
pop
mov
mov
inc
ins
pop
mov
test
cmps
push
inc
test
ret
jmp
int
pop
loop
and
(bad)
ins
push
lods
pushf
pop
and
mov
sub
push
jae
add
mov
inc
jae
and
push
push
test
dec
add
retf
stc
sub
ins
stos
mov
mov
lock
mov
fbld
sub
std
mov
daa
mov
fdivr
push
jnp
push
cmp
or
inc
pop
mov
jne
movq
jmp
int3
inc
jnp
and
add
mov
sub
retf
mov
inc
cmc
(bad)
inc
fs
inc
sahf
ret
jno
into
(bad)
int
and
lods
iret
sub
rcr
imul
dec
mov
cmp
push
in
jge
shl
fild
xchg
pop
fist
das
out
pop
into
(bad)
mov
(bad)
cmp
out
cmps
icebp
(bad)
jmp
xchg
xor
add
ds
and
das
ins
jge
pop
xor
ins
mov
fsub
push
ret
dec
adc
sti
sar
cmp
mov
call
test
mov
inc
stos
in
sbb
lock
mov
sbb
rol
mov
iret
xchg
and
imul
out
inc
loopne
xchg
ficomp
pushf
mov
dec
lahf
aas
ins
cmps
mov
sbb
mov
lods
mov
inc
and
mov
fs
loope
ss
fs
aaa
outs
mov
jecxz
cmp
test
xchg
gs
mov
pop
sti
mov
shl
add
push
cld
ds
mov
shl
call
stos
mov
pushf
out
jnp
test
(bad)
push
xor
mov
imul
xor
cli
mov
lock
sti
or
and
dec
adc
repnz
stos
fist
cld
dec
inc
pop
addr16
sar
jmp
(bad)
leave
ret
cmovns
sbb
mov
xor
add
xor
cmps
clc
push
push
adc
push
loope
in
add
inc
cmp
scas
and
les
stos
push
mov
arpl
cmps
fstp
mov
adc
mov
lds
(bad)
push
aaa
(bad)
inc
lods
inc
cld
into
pop
and
lock
popf
mov
push
iret
mov
in
inc
cld
mov
cmc
xchg
jnp
mov
push
adc
push
pop
pushf
test
xchg
mov
mov
dec
ret
and
sbb
mov
mov
fs
test
mov
mov
nop
hlt
push
cmp
es
bound
adc
std
rcl
outs
aad
clc
pop
jo
jbe
es
xor
jmp
cmc
mov
scas
sbb
ret
sub
jecxz
jne
sub
sub
xor
scas
daa
fsub
test
and
sub
inc
cmp
jmp
xchg
mov
cmp
repnz
sbb
fimul
pop
ror
shrd
cmp
mov
jb
add
mov
adc
(bad)
rcr
sbb
mov
or
in
std
mov
test
popf
add
and
ror
jge
mov
mov
push
outs
dec
jne
test
or
cmc
jb
movs
out
rcr
jnp
dec
call
push
jno
icebp
mov
fcomp
fidivr
pusha
mov
cmp
add
pop
and
dec
inc
inc
(bad)
lods
pop
sbb
dec
mov
lea
fcomp
aaa
cmp
push
icebp
pop
je
fstp
mov
daa
dec
sub
pop
les
clc
jge
mov
jne
mov
ins
sub
test
iret
jge
mov
mov
outs
shr
pop
js
sbb
rcr
das
lahf
inc
shl
mov
stos
mov
repz
dec
aam
test
sub
movs
sub
je
jle
mov
sub
xchg
push
jo
and
enter
xor
sbb
addr16
leave
jecxz
add
xchg
sub
sbb
rol
ss
jmp
mov
mov
mov
mov
sub
fistp
and
inc
ret
lds
jo
stos
jnp
imul
imul
leave
push
cmc
and
jmp
stc
or
push
or
jne
inc
jge
cmp
pop
fstp
sub
push
dec
and
rcr
retf
or
repz
mov
ins
add
mov
call
or
xchg
or
aam
retf
adc
or
es
call
sbb
or
and
xchg
cmp
in
(bad)
clc
pop
shl
retf
fs
ror
mov
(bad)
in
jnp
xchg
mov
ret
scas
or
call
pop
ds
xchg
cmp
xchg
call
or
jp
inc
pusha
xchg
and
sbb
shl
push
ins
mov
and
dec
(bad)
leave
mov
enter
mov
(bad)
outs
das
in
rol
in
mov
outs
in
lods
jecxz
int3
js
pop
int3
mov
add
and
fistp
retf
and
xor
bound
hlt
rol
(bad)
pop
pop
aaa
mov
pop
das
jnp
sti
sar
or
cmp
cwde
cmps
in
test
int3
adc
sbb
sbb
loope
or
lock
fcmovbe
and
int3
push
cmps
dec
out
dec
push
sub
sbb
out
xor
sbb
stos
push
out
mov
dec
dec
gs
or
imul
inc
in
and
aam
out
xchg
jnp
pop
mov
cmp
mov
call
fisubr
loopne
xchg
sub
shl
inc
shl
cmp
(bad)
and
(bad)
mov
popa
cmp
pmaxsw
cmp
mov
jge
enter
ins
rcl
push
movs
xchg
(bad)
or
jle
adc
fistp
xchg
test
mov
loopne
jne
lea
push
out
outs
fs
sub
push
push
jecxz
mov
xor
mov
ja
call
repnz
inc
jmp
in
pop
test
ret
add
dec
(bad)
fstp
jnp
xor
jmp
lock
repnz
inc
mov
cld
punpckldq
dec
mov
aas
xchg
call
mov
sti
inc
mov
jge
aaa
jno
cmp
stos
jne
or
iret
sbb
cwde
xchg
call
repz
push
sahf
jbe
mov
test
test
jp
sti
loop
inc
push
(bad)
dec
xor
lea
gs
add
cmp
test
js
jge
es
mov
xor
adc
sub
les
fnstcw
fild
jb
movs
inc
or
adc
adc
dec
pop
cmovnp
fiadd
mov
mov
mov
mov
js
pop
scas
aas
jnp
popf
push
retf
add
imul
shl
or
jae
cli
cli
fucomp
gs
scas
popa
dec
pop
sub
data16
into
popf
xchg
fsub
xor
fild
aad
pop
dec
movs
test
inc
pop
and
test
push
xor
sbb
out
rol
sub
(bad)
mov
fs
xchg
int3
aaa
test
ss
outs
xchg
xchg
in
icebp
test
jns
dec
pop
push
dec
xchg
inc
push
(bad)
retf
int3
mov
imul
xchg
daa
(bad)
adc
xor
push
jecxz
adc
push
repnz
cmp
sub
jmp
leave
cmp
clc
retf
dec
popa
xchg
ror
adc
mov
in
gs
scas
aaa
rcl
rcr
push
outs
mov
sub
mov
outs
mov
mov
lods
movs
adc
add
outs
pop
jb
jge
push
lods
jge
xor
cmps
(bad)
leave
xor
and
pop
mov
xchg
jge
fmul
mov
jb
jg
bound
inc
and
fbld
pusha
jle
repz
inc
ins
loopne
fnstsw
jecxz
sub
ror
and
inc
std
aaa
push
inc
push
gs
push
cmp
test
inc
pop
and
fidivr
fcmovnb
in
call
dec
dec
mov
xor
retf
aas
jb
mov
sub
scas
or
jo
mov
jp
inc
stc
(bad)
cmc
xor
cmp
cmp
xor
arpl
outs
add
sbb
imul
push
push
sar
jmp
push
sub
stos
add
jae
inc
jo
jno
dec
jno
cmp
pop
fcom
icebp
jbe
loopne
arpl
push
leave
ffree
leave
or
(bad)
ins
sbb
sub
das
jns
sbb
xchg
adc
adc
sbb
xlat
pop
push
pop
mov
inc
xchg
ror
cmps
inc
loop
in
jo
push
push
push
and
xor
repz
mov
jmp
jge
(bad)
adc
sub
iret
ror
mov
mov
pop
xor
mov
test
sbb
in
mov
and
int
push
mov
loopne
or
mov
dec
pop
rol
xor
(bad)
call
pushf
sub
aam
in
imul
popa
aas
cmp
push
cmp
xchg
mov
xchg
or
cmps
push
and
ror
ret
mov
jge
cmps
fbstp
daa
loope
xlat
push
and
out
jmp
push
cld
(bad)
fwait
lods
jb
mov
mov
ret
ret
icebp
ins
test
ds
repz
fwait
mov
xchg
jl
jmp
add
mov
or
add
sbb
fwait
stos
jmp
mov
icebp
mov
mov
loope
outs
sub
jle
and
scas
adc
iret
mov
out
movs
dec
jbe
jns
int3
push
mov
xor
xor
jae
add
movs
nop
inc
out
shr
stos
aam
cmp
jns
xchg
loope
xor
loope
rcl
add
add
shl
(bad)
or
xchg
jmp
movnti
shl
repz
dec
movs
jbe
enter
test
rol
jg
nop
data16
xchg
xchg
das
xchg
popf
xchg
sahf
sub
mov
sbb
dec
aaa
lea
dec
pop
adc
dec
jg
mov
jns
(bad)
aaa
pusha
popf
sub
mov
mov
(bad)
ss
test
xchg
jmp
and
pop
pusha
push
inc
int3
push
pushf
ss
ins
sbb
adc
cmps
and
mov
or
push
mov
inc
add
sti
mov
sub
add
cs
adc
jo
sub
mov
xor
sub
inc
mov
fld
scas
int3
mov
mov
add
or
inc
cmps
test
jmp
nop
pop
aas
sub
in
jns
call
jle
jbe
pushf
pop
mov
jp
dec
xchg
jmp
into
pop
repz
push
fnsave
fsubr
jmp
push
aad
aam
push
jne
mov
inc
mov
xchg
mul
addr16
pushf
out
inc
out
add
ins
pusha
push
mov
aas
and
addr16
dec
aad
jl
fmulp
mov
into
fld
scas
fnstenv
pop
and
xor
cdq
and
outs
stos
xlat
fmul
repnz
lea
and
scas
jp
test
jo
pop
in
cmps
and
push
loopne
in
jae
mov
fcomp
mov
pop
in
or
inc
or
xlat
dec
pop
repz
nop
sub
pop
dec
mov
imul
inc
scas
cmp
jge
mov
in
daa
ins
or
out
sbb
cwde
add
push
out
xor
and
inc
jle
mov
sbb
call
cld
test
add
or
daa
xor
pop
pop
iret
push
pop
xor
mov
mov
mov
fst
int
pusha
neg
xchg
vpackusdw
sbb
loopne
pop
das
pushf
mov
mov
ret
repz
(bad)
aas
pushf
loop
add
or
push
stos
mov
int3
push
push
cld
mov
loop
mov
scas
(bad)
and
or
test
std
aas
outs
pop
sub
dec
xchg
call
mov
jbe
clc
hlt
inc
cld
cmp
dec
sub
pop
mov
dec
icebp
mov
lods
inc
iret
jle
mov
jg
mov
push
push
div
inc
imul
(bad)
adc
(bad)
pushf
mov
pop
psubsb
jo
push
mov
imul
cdq
xchg
mov
adc
push
mov
mov
loope
adc
xor
xchg
sbb
push
or
cld
xchg
scas
mov
retf
mov
push
ds
xchg
mov
outs
xor
push
adc
ins
hlt
test
jnp
scas
mov
fnstsw
add
out
mov
sub
inc
or
popf
cmp
cmp
jl
cwde
stos
xor
dec
cld
dec
mov
pop
movs
ins
adc
hlt
adc
push
push
push
sub
outs
ds
push
mul
test
or
in
sbb
je
lock
mov
mov
jbe
mov
or
fimul
dec
repz
lds
punpcklbw
pop
jmp
adc
out
jne
mov
mov
add
push
mov
jae
add
pop
les
xchg
ror
jnp
fwait
mov
scas
(bad)
fs
ins
sbb
or
dec
retf
dec
dec
mov
mov
fucomip
push
push
jle
gs
or
xor
add
loope
sub
and
(bad)
sbb
push
pop
jecxz
mov
inc
out
pop
or
ror
popa
jge
mov
cmp
addr16
fldenv
mov
aad
and
aad
outs
(bad)
inc
movs
jo
push
xor
xlat
shl
loopne
xchg
adc
mov
sub
and
adc
lahf
and
stc
or
fld
lds
mov
call
test
inc
test
sub
int
mov
out
xor
add
push
sbb
and
push
and
cmp
lods
mov
(bad)
mov
mov
pop
mov
loop
xor
push
hlt
int
and
loope
push
sub
ret
and
pop
in
in
cmps
mov
(bad)
addr16
cli
arpl
repz
dec
mov
stc
sahf
shl
push
push
or
test
pop
pop
dec
mov
call
fild
mov
cwde
cmp
cld
mov
jge
loop
hlt
or
outs
in
add
adc
shld
push
push
add
pop
mov
mov
gs
stos
loopne
inc
(bad)
jge
popa
inc
cmp
adc
loopne
icebp
ret
inc
jge
xlat
ret
ja
mov
pop
es
jmp
sub
int3
jnp
mov
mov
sti
mov
div
rcl
push
imul
adc
arpl
mov
and
cli
and
xchg
lea
neg
mov
cmc
push
jno
(bad)
daa
mov
addr16
repnz
and
and
xor
jo
scas
lds
jl
bound
inc
jns
pop
mov
movs
adc
push
test
adc
push
add
and
mov
inc
aaa
push
idiv
sar
or
and
push
jbe
lock
in
call
in
or
daa
sbb
push
xchg
mov
xor
xor
retf
je
lea
jmp
in
mov
inc
inc
stos
fs
push
sub
dec
xchg
dec
jne
cmp
ret
add
bound
movs
xchg
jp
pop
ins
sbb
cmp
fimul
fild
cmp
xchg
pop
jbe
inc
int
mov
popa
std
or
loopne
ds
jmp
sbb
pop
inc
jmp
jle
sub
fild
mov
jmp
cmp
mov
xchg
inc
stos
and
rcl
jo
mul
xchg
xchg
xchg
cld
jae
cli
outs
pop
mov
retf
jb
xor
je
loop
xchg
out
mov
xchg
jl
mov
iret
sbb
inc
sub
shr
mov
inc
inc
dec
jne
dec
inc
inc
dec
push
shr
xchg
aaa
add
jmp
cmp
or
add
cmp
test
inc
out
test
inc
add
mov
mov
leave
dec
mov
add
pusha
iret
iret
adc
aas
mov
sub
xor
in
stc
push
and
test
aaa
mov
outs
lahf
sti
aad
mov
add
(bad)
mov
out
add
or
jb
and
adc
(bad)
rol
ss
adc
mov
jmp
push
sti
pop
mov
push
push
cs
cmp
cmova
cmps
mov
xor
inc
rol
xchg
dec
shr
xor
jne
std
mov
sbb
scas
push
xchg
mov
mov
dec
cs
loop
pop
mov
pop
and
or
mov
mov
cmp
push
call
pop
push
sti
ret
mov
aad
fild
rol
int
and
aam
jbe
mov
cmps
and
xchg
in
inc
fdivr
xchg
sub
mov
fisub
dec
ficom
mov
adc
(bad)
leave
mov
pop
iret
dec
mov
dec
and
test
lahf
lahf
cld
push
mov
mov
gs
out
jb
(bad)
pop
add
sbb
test
call
push
mov
mov
or
das
call
pop
xor
mov
or
pop
or
jl
pop
ins
retf
and
cmps
or
xchg
sub
sar
(bad)
repz
jle
shl
xor
add
jbe
stos
or
mov
mov
outs
xchg
xlat
jo
ins
xchg
bound
pop
lock
inc
dec
pop
imul
adc
test
adc
add
add
xchg
test
sar
lahf
loope
and
adc
scas
movs
mov
aam
inc
inc
ja
push
loop
xchg
cmp
ins
inc
mov
js
gs
lock
jg
cmp
pusha
mov
jmp
and
ins
mov
xor
enter
adc
mov
and
fistp
jg
mov
stos
ja
jg
fidiv
xor
mov
ins
dec
repz
add
stos
jb
pop
mov
sbb
pusha
inc
or
sub
inc
mov
aad
pushf
cmp
mov
or
inc
push
loope
sbb
pop
sbb
sub
loopne
and
repnz
sbb
mov
movzx
xchg
icebp
jmp
(bad)
retf
xor
pop
jge
mov
imul
xchg
adc
daa
jge
dec
xchg
jmp
std
push
mul
(bad)
int
sub
nop
lahf
xor
push
sub
(bad)
jo
fistp
dec
leave
pushf
aam
imul
and
(bad)
dec
mov
mov
or
mov
inc
scas
test
xor
cmp
cdq
(bad)
imul
mov
ds
jecxz
call
jmp
push
enter
sub
sbb
dec
push
cmp
dec
pop
and
scas
in
aas
and
nop
ds
inc
in
into
push
mov
mov
sub
sub
xor
push
les
adc
sub
push
movs
in
pop
lea
dec
jo
pop
bound
add
fwait
adc
push
nop
or
xchg
or
data16
mov
in
call
push
push
gs
inc
call
in
or
imul
and
pop
mov
cmps
cld
movs
retf
inc
and
and
push
jg
or
sub
cmc
arpl
jmp
xchg
movs
sbb
leave
mov
pop
popf
shr
pop
lahf
dec
sub
enter
jmp
rcr
call
mov
mov
(bad)
mov
sbb
aad
scas
fnsave
and
enter
push
and
aad
pop
sbb
jns
fs
sub
jecxz
js
loope
in
pop
outs
pop
jae
les
or
and
push
pusha
jb
sahf
mov
cmp
into
ins
test
jmp
sbb
frstor
xchg
push
add
sbb
pop
jmp
sub
les
dec
sub
pop
mov
mov
rcr
loop
jo
fisub
lds
push
push
mov
xchg
sub
lahf
sub
out
sbb
data16
jnp
stos
std
push
jnp
push
scas
xor
mov
add
pop
dec
addr16
adc
imul
jns
in
test
loop
sub
loopne
and
rcl
pop
je
mov
scas
gs
pusha
inc
pop
mov
(bad)
adc
jmp
adc
inc
cmp
mov
push
mov
push
out
mov
call
inc
cmp
mov
xchg
scas
pop
test
test
(bad)
pusha
inc
jmp
add
dec
jmp
cmp
dec
lods
cld
pop
shl
addr16
dec
or
add
xchg
lds
lahf
adc
shl
sbb
xchg
push
mov
(bad)
(bad)
les
pop
out
mov
(bad)
rcr
xor
out
lods
xor
jmp
mov
movs
pop
add
test
fimul
push
xchg
mov
iret
dec
stc
xor
loope
cmps
in
in
(bad)
stos
cmps
pusha
icebp
in
cmp
cmp
xchg
sub
jae
fwait
movs
mov
add
pop
shl
jne
adc
cmp
mov
adc
retf
sub
in
add
sbb
sti
popf
sub
push
jmp
mov
pop
lods
test
movs
lds
in
fadd
pop
(bad)
cld
mov
nop
xchg
jne
mov
push
test
inc
in
pusha
movs
cmp
dec
pop
neg
or
pop
imul
outs
in
pop
sbb
cli
jg
xchg
adc
div
test
ins
ficomp
cmp
out
imul
jmp
pop
sub
sub
push
jmp
pop
imul
add
cmp
sub
sbb
mov
nop
fsub
push
sub
add
dec
shr
and
mov
push
lea
out
xchg
leave
mov
cld
pop
push
mov
push
mov
jnp
ror
cmp
pop
inc
mov
ret
gs
xchg
outs
int3
mov
pop
and
mov
neg
(bad)
fimul
cld
and
mov
jg
mov
gs
stos
xchg
call
call
inc
push
aaa
int
mov
jae
(bad)
out
or
stos
push
ret
in
movs
(bad)
call
push
mov
repnz
push
jp
sbb
push
test
sahf
cmp
pop
cmp
out
mov
mov
imul
xor
adc
mov
cmp
cmp
sbb
ins
jmp
data16
mov
xchg
jne
fcmovnu
and
push
and
mov
ud2
(bad)
mov
(bad)
std
call
test
cdq
and
enter
xchg
jp
outs
inc
sub
sar
mov
icebp
mov
call
push
xchg
int
inc
daa
cmp
pop
sbb
dec
or
or
stc
nop
dec
push
int
and
cwde
leave
sbb
imul
shr
and
cmp
push
sbb
fldcw
rcl
stos
enter
scas
xchg
jno
xchg
pop
jns
mov
jnp
push
lods
pop
lea
sbb
fwait
mov
jae
movd
test
xor
sbb
sbb
inc
sahf
imul
pop
out
aam
test
sbb
inc
add
sub
movs
out
mov
xor
in
cs
out
enter
push
int
inc
ret
hlt
pop
sub
clc
push
fwait
movs
and
pop
xor
or
and
dec
or
and
ins
and
ret
and
and
and
(bad)
jmp
push
inc
cmps
outs
test
mov
scas
jo
(bad)
pop
call
mov
movs
sub
addr16
xor
mov
rol
int3
push
pop
sbb
sbb
call
sub
xor
adc
xor
fstp
outs
sbb
cmp
jnp
jge
jp
std
aas
pop
push
in
lods
mov
sbb
xor
idiv
push
dec
xlat
xchg
jl
jecxz
mov
popf
cmp
xchg
es
in
fmul
xor
into
retf
aam
shl
daa
push
and
xor
xchg
jp
ja
mov
sbb
or
lahf
fist
imul
clc
mov
push
dec
pop
lea
aaa
cli
sub
and
inc
or
jbe
or
(bad)
aaa
dec
sub
sbb
hlt
ins
mov
mov
shl
arpl
adc
sbb
add
jne
push
xchg
adc
mov
ja
pop
pcmpgtd
inc
and
rcr
jle
and
mov
sub
sets
mov
or
pop
sub
lock
mov
icebp
loopne
out
ins
ins
or
jl
(bad)
xchg
pop
out
cli
dec
sbb
(bad)
out
rcl
jae
or
int
dec
and
mov
lahf
nop
stc
adc
push
imul
mov
adc
ins
mov
out
mov
dec
push
in
adc
sub
daa
push
mov
movs
pop
mov
add
sbb
add
movs
ficomp
or
cmp
sub
ins
in
ins
push
mov
jno
mov
iret
movs
scas
lahf
aaa
lods
fstp
stos
jg
adc
dec
sub
cmp
out
xor
popf
inc
addr16
das
int
adc
int
inc
pusha
pusha
sub
mov
popf
and
jae
sbb
jmp
hlt
sub
xchg
mov
inc
add
mov
stc
xchg
loope
cli
add
iret
xor
gs
cdq
jl
sub
das
pop
fistp
mov
pushf
std
repz
inc
data16
(bad)
stos
fsubp
or
or
stos
mov
lock
js
fidivr
(bad)
retf
sbb
mov
retf
lods
in
push
cmp
xlat
sbb
aaa
mov
or
xlat
jnp
aas
lds
xor
iretw
or
jle
inc
mov
pop
adc
mov
fst
fcmove
int
loop
mov
push
(bad)
push
sub
adc
rcl
mov
and
xchg
jno
xchg
mov
mov
ds
and
int3
(bad)
push
xchg
pop
aaa
pop
cmp
jo
inc
loopne
mov
(bad)
fwait
sub
outs
js
fild
call
popf
fistp
out
lods
test
mov
inc
out
mov
out
lods
push
cmc
mov
pushf
jl
xchg
fwait
data16
or
outs
out
mov
stc
mov
bound
stos
div
xor
or
adc
stos
jmp
dec
test
inc
inc
out
pop
mov
stos
ficomp
inc
add
mov
loopne
scas
xor
inc
leave
xor
ret
loop
dec
xor
hlt
cmps
mov
jecxz
push
test
push
pop
leave
inc
push
movs
aam
cmp
sbb
mov
imul
adc
pop
mov
scas
leave
fld
sbb
and
jecxz
add
xchg
(bad)
out
mov
push
cmp
cmovp
mov
adc
mov
test
inc
mov
fiadd
jle
test
jg
mov
dec
adc
dec
xchg
and
xor
dec
aas
cli
out
aam
lods
push
cmps
and
mov
push
xor
fwait
jle
or
mov
lea
cmp
ret
mov
xor
mov
mov
lahf
dec
movs
in
outs
or
jae
mov
mov
out
mov
and
test
mov
adc
sub
mov
ss
sub
mov
push
fild
or
es
es
jle
xchg
cmp
pop
pop
arpl
enter
mov
xchg
lock
xchg
imul
icebp
or
call
rcl
lds
dec
retf
aaa
pop
sub
sbb
scas
shl
xor
mov
push
push
xor
enter
sub
add
cwde
(bad)
xor
data16
sub
push
and
adc
cmc
and
js
pop
stos
or
dec
jb
mov
fld
mov
cmp
sbb
pop
and
pop
stos
cmps
jno
xor
popa
jne
(bad)
(bad)
lods
sbb
ret
ror
push
(bad)
sub
hlt
jecxz
stos
cmp
and
push
js
sbb
lahf
cmp
dec
jns
lahf
push
fisub
mov
mov
cdq
in
test
cmp
mov
dec
cwde
out
mov
and
xchg
in
shr
push
lock
outs
cmp
movs
call
mov
add
popa
loop
xlat
in
cmp
push
dec
mov
in
jmp
pop
lea
mov
cmc
rol
loope
add
mov
int3
cmp
sbb
push
out
xchg
and
ret
mov
arpl
mov
fdivr
nop
call
jnp
xlat
in
in
add
cmp
pop
stc
stos
mov
dec
add
shr
outs
xlat
imul
mov
and
and
cwde
xor
pop
cmp
dec
out
popf
pop
jae
pushf
push
clc
pop
adc
xchg
cmps
dec
jbe
hlt
and
and
jp
imul
(bad)
jbe
stc
mov
dec
push
or
jmp
lock
mov
inc
repz
popf
jno
inc
cli
mov
add
sbb
and
cmps
or
push
fwait
clc
nop
mov
bndstx
lods
adc
iret
bound
xchg
loope
test
xor
jb
mov
retf
in
ins
xchg
mov
inc
mov
add
mov
jg
inc
or
ret
bndldx
push
fbld
pop
mov
pop
(bad)
imul
bswap
push
jmp
dec
sub
mov
mov
daa
scas
lea
nop
shl
leave
cdq
xor
inc
out
lock
push
xchg
pop
test
rcl
pop
repnz
jns
sbb
jmp
iret
sbb
retf
mov
pusha
shl
mov
dec
pop
cdq
and
add
cmps
jae
sbb
pushf
xlat
mov
int3
adc
dec
loope
(bad)
mov
lods
pop
dec
pop
mov
dec
shr
or
ds
dec
xor
in
jmp
cmp
pop
sbb
pop
and
into
cdq
cdq
out
adc
aad
xchg
pop
les
fs
jg
mov
inc
mov
outs
jnp
inc
ins
xor
ds
push
pop
test
mov
jge
mov
popf
popa
int3
inc
pop
scas
inc
push
cmp
aam
call
adc
push
lods
or
cdq
rol
cmps
repnz
or
add
retf
mov
xchg
cdq
sub
jns
clc
movs
repz
sbb
inc
jmp
mov
mov
int3
imul
xchg
add
mov
push
mov
inc
sub
shufps
jmp
leave
xchg
push
adc
xor
pcmpgtb
mov
std
test
les
gs
cmc
retf
mov
cdq
mov
push
sti
enter
sysexit
popa
jno
jbe
rcr
cmp
call
pop
cwde
sbb
mov
aad
push
cmp
cwde
dec
dec
repnz
push
xchg
mov
daa
xor
xor
stos
pusha
sub
pop
aad
cdq
test
fcomp
dec
pop
cmc
push
cmp
aad
push
mov
daa
ficomp
shl
mov
fimul
mov
xchg
xchg
bound
pop
fcmovne
xor
adc
leave
mov
inc
sub
jns
ror
xchg
lds
push
xor
lea
scas
in
stos
dec
je
pop
sbb
mov
jne
fs
jno
lock
mov
push
aam
fdiv
push
pop
add
loope
(bad)
mov
adc
fdiv
push
iret
xacquire
xchg
imul
xor
in
mov
sub
bound
and
ds
arpl
pop
or
or
inc
ja
pcmpeqb
jmp
or
add
jge
xchg
push
lea
test
jns
jb
mov
or
loope
jns
cmp
fsubr
push
and
pushf
inc
jge
mov
mov
jg
xchg
outs
or
jbe
ds
test
rcl
mov
add
sub
outs
ffreep
data16
js
dec
lods
sbb
out
movs
sbb
es
add
popa
lock
mov
add
shl
daa
fsubr
or
movs
add
dec
nop
mov
outs
ret
adc
push
outs
xor
scas
fld
cs
in
cld
push
pop
cld
mov
sbb
mov
push
dec
outs
fild
inc
or
mov
dec
push
sbb
bound
cmp
lock
ja
call
add
mov
lock
xchg
mov
cmp
xchg
es
sub
out
inc
call
pop
test
sbb
and
call
mov
pop
sar
cmc
xchg
sbb
repnz
loop
add
xchg
and
mov
stos
inc
xor
(bad)
hlt
test
das
scas
std
dec
adc
push
jae
mov
daa
sub
dec
mul
les
mov
adc
push
arpl
sbb
add
ss
sar
pop
aad
jo
xor
push
xlat
mov
nop
lahf
jo
jmp
add
test
popa
mov
add
sub
lods
test
jne
mov
and
cmp
fsub
cld
bound
ficom
pop
sub
fstp
xor
xchg
xor
push
aaa
and
fstp
mov
stc
aad
fldenv
iret
mov
cmp
jns
data16
jle
imul
stc
dec
xor
push
inc
and
inc
pop
repz
sbb
pop
xchg
sbb
rol
jnp
sub
cwde
bound
rcr
fstp
xchg
fwait
cmps
dec
mov
sbb
push
mov
or
fimul
shl
xor
gs
ret
pop
mov
mov
mov
mul
not
mov
pop
ds
push
clc
call
mov
dec
pop
jmp
ja
cmp
fidiv
push
add
add
shr
mov
inc
adc
test
imul
fistp
clc
jae
sub
pop
xor
mov
dec
fld
int3
xchg
(bad)
sub
xor
mov
sbb
mov
mov
jnp
xlat
mov
data16
out
scas
retf
dec
jle
sub
cmp
xlat
push
pop
cs
std
daa
xor
inc
int3
mov
xchg
loopne
dec
push
inc
mov
jle
or
inc
mov
cmp
inc
dec
mov
(bad)
push
jl
in
gs
jne
fnstsw
push
sbb
cli
test
out
loop
not
xor
jge
jle
out
sbb
dec
fs
call
out
outs
mov
cmps
test
test
scas
sbb
ret
sahf
adc
je
pusha
cdq
cmp
mov
xor
and
enter
call
aad
int
adc
inc
dec
adc
mov
pop
(bad)
adc
mov
sahf
ins
mov
ins
sbb
stos
test
xchg
jns
loop
movs
(bad)
out
push
fxch
fbld
cmp
push
dec
mov
jmp
jne
sbb
mov
jg
aad
cdq
jb
aad
fiadd
xlat
inc
or
aaa
stc
mov
add
mov
in
xchg
jne
xor
pop
scas
shl
jmp
and
into
call
ret
sbb
test
div
push
hlt
xor
daa
cmc
dec
mov
fldlg2
mov
stos
dec
add
fidiv
xchg
pop
mov
xchg
xchg
xor
xchg
mov
sbb
arpl
ins
shl
pop
pop
add
mov
xor
jae
dec
inc
jp
jle
(bad)
ror
jmp
add
inc
int3
xchg
and
sub
(bad)
xchg
shl
mov
ret
or
std
bound
or
in
ss
pop
jmp
out
and
xchg
pop
add
jl
xchg
outs
xchg
imul
cmp
cdq
addr16
and
mov
cmc
xchg
jb
push
in
and
loop
xor
test
xchg
dec
fsubr
arpl
in
std
scas
cwde
test
stos
shl
or
mov
push
jg
outs
xchg
mov
iret
retw
jae
dec
mov
adc
pop
dec
adc
pop
xchg
or
popa
jmp
sub
jecxz
repnz
leave
mov
cmpxchg
add
dec
mov
mov
add
enter
cmp
fstp
or
pop
sub
cmp
dec
out
daa
cs
adc
sbb
inc
jle
mov
xor
add
out
loop
or
dec
rcr
and
int3
outs
scas
test
lahf
or
iret
pushf
and
clc
or
arpl
gs
clc
and
sbb
pop
ins
xchg
mov
xor
xchg
pusha
jl
fidivr
shl
fdivr
mov
shl
call
xchg
in
mov
fild
push
push
sti
push
mov
mov
adc
jmp
bound
push
cld
sbb
xchg
imul
mov
movs
mov
mov
inc
and
scas
(bad)
rcl
fisubr
shl
test
outs
bound
lahf
nop
cs
out
mov
(bad)
(bad)
sbb
int
out
cmp
mov
test
scas
out
popf
mov
pop
mov
or
sub
jmp
mov
test
lods
std
jecxz
cmp
sub
jno
xchg
xchg
xchg
daa
(bad)
xchg
(bad)
sti
pop
pusha
xchg
retf
out
dec
push
into
mov
push
sbb
aaa
adc
cld
cli
adc
cmp
pusha
jp
mov
je
xchg
pop
xchg
sub
lds
and
jmp
mov
mov
sub
dec
dec
sub
sbb
adc
push
cmp
fs
outs
mov
lods
outs
fdiv
cs
dec
inc
mov
ja
mov
out
hlt
mov
push
loopne
push
mov
popf
push
icebp
stos
ins
mov
mov
sub
in
xchg
sub
dec
enter
jo
rcr
pushf
xor
sti
dec
xchg
cmp
test
cmp
cs
cmp
jo
stos
jns
or
push
call
sub
jne
xor
ja
pop
leave
dec
jl
loope
dec
xor
int3
rcl
nop
bound
inc
scas
addr16
jle
lods
push
pop
push
xchg
scas
push
rcr
movs
adc
sbb
pop
not
sub
test
cmp
mov
pop
sbb
cli
adc
push
dec
push
movs
call
jl
ret
(bad)
and
or
pop
xchg
cmp
leave
ins
adc
xchg
retf
xchg
fiadd
popa
sub
shl
mov
jg
cwde
push
dec
add
pop
pop
(bad)
mov
inc
inc
jmp
out
arpl
add
lahf
nop
and
push
xchg
sub
sbb
and
push
jno
mov
jno
(bad)
sbb
sub
add
cmp
retf
and
or
add
cmp
push
cld
data16
std
pop
aas
mov
xor
in
rol
pushf
dec
mov
(bad)
les
lea
push
lods
mov
dec
xchg
ss
test
sbb
and
jno
cwde
dec
out
(bad)
mov
sub
push
lods
cmp
minps
push
(bad)
in
inc
repz
jae
pop
repz
sub
je
mov
xor
jbe
mov
inc
push
and
push
or
cdq
outs
(bad)
lock
xor
fdiv
push
scas
lock
into
lea
cdq
sub
leave
ins
dec
test
push
stc
push
cmp
popf
xchg
lods
cmp
cmp
xor
test
xlat
clc
(bad)
and
pop
xor
cmps
lods
rcr
cwde
or
(bad)
push
ins
ror
sahf
loope
je
push
push
int
lea
lahf
mov
daa
test
dec
or
mov
dec
aam
sbb
xchg
push
mov
push
add
in
adc
sub
and
and
mov
push
fs
sbb
cmp
sbb
repnz
setl
push
call
xor
cmp
mov
hlt
daa
sbb
movs
mov
cmp
jne
or
xlat
ror
sbb
dec
push
mul
mov
sahf
pop
jle
mov
lea
jno
xor
(bad)
push
jbe
xchg
in
inc
jo
mov
sbb
test
jmp
imul
das
push
pop
jmp
stos
repz
inc
mov
call
icebp
xor
cmps
push
ins
lock
clc
push
ret
dec
jp
aad
mov
ins
pop
inc
aad
pop
dec
lods
and
push
mov
push
cmp
push
call
dec
les
imul
iret
scas
daa
inc
and
icebp
jl
pop
push
les
(bad)
mov
fsub
xchg
(bad)
neg
mov
mov
cmp
jmp
retf
lds
lds
and
mov
pop
cdq
jno
sti
inc
popa
sahf
pop
jae
gs
dec
sbb
js
sbb
pushf
or
ret
movs
mov
fwait
clc
xchg
outs
mov
xchg
pop
icebp
inc
sbb
aam
sahf
xchg
mov
cli
sbb
jg
xor
std
add
add
popf
repz
dec
mov
mov
mov
loope
mov
cld
rcr
pop
push
sbb
jmp
push
or
sub
jle
cmps
adc
fptan
mov
push
cmp
dec
je
mov
mov
pop
outs
mov
ds
fisub
pmulhuw
outs
mov
imul
je
push
aas
lahf
ins
sbb
pusha
(bad)
rol
sbb
cmp
xlat
mov
fcom
daa
pushf
shl
leave
adc
in
ja
xor
xchg
push
out
sar
test
fucomi
pop
xchg
cs
(bad)
(bad)
test
mov
cmc
mov
mov
fwait
mov
xor
aad
xchg
dec
mov
out
mov
(bad)
jl
adc
sub
in
lock
out
repnz
lea
scas
mov
retf
adc
es
push
sub
jns
and
dec
in
jge
pop
fild
dec
jne
dec
rcr
xchg
fdiv
sbb
arpl
retf
cmp
add
pop
inc
aas
cmps
or
adc
push
inc
bound
add
out
mov
retf
in
xor
or
gs
ret
int3
movs
mov
cmp
test
gs
dec
push
add
sub
push
sbb
je
scas
pmaxub
das
mov
scas
cld
mov
dec
pop
sbb
not
ja
cmp
push
int3
lds
loopne
es
mov
cmp
gs
mov
rcl
ds
xor
or
jmp
sub
out
popa
out
js
jae
in
adc
mov
xlat
loop
jbe
mov
les
cmp
pop
mov
sub
movs
or
mov
xchg
movs
cmp
push
stos
ds
mul
cmp
bnd
jae
rcl
xlat
jmp
mov
jg
xchg
adc
mov
mov
dec
ds
push
inc
cmp
adc
xchg
out
fbstp
sbb
mov
xchg
loopne
or
and
add
nop
loopne
out
aam
jnp
cmc
iret
xor
push
lods
lods
js
sahf
mov
xor
adc
inc
dec
and
lock
mov
add
xchg
test
and
or
pop
adc
mov
cmp
fs
jmp
fdivrp
xchg
add
fwait
mov
fs
nop
inc
mov
sbb
ret
xor
ret
mov
test
gs
aad
add
out
ret
mov
call
fstp
out
imul
fidiv
push
rol
sub
xchg
jecxz
jnp
sahf
mov
sub
mov
dec
xchg
cmp
lods
dec
int
push
iret
hlt
xor
inc
sbb
xor
sub
test
push
addr16
test
sub
cmp
or
bswap
cmp
shl
jmp
sub
jbe
push
call
inc
xlat
dec
fnstenv
add
imul
or
push
int
loop
cs
scas
std
push
(bad)
data16
mov
popa
ins
mov
mov
pop
xor
adc
popa
pop
cwde
jmp
push
jmp
push
dec
aas
out
rol
sahf
xor
addr16
and
push
dec
stos
jecxz
or
jne
out
repz
push
div
fidiv
push
mov
xchg
push
jnp
mov
retf
push
iret
(bad)
fdivrp
push
jne
jl
nop
xchg
cs
in
pop
pop
add
push
mov
ins
(bad)
or
test
fist
jae
mov
xchg
fwait
cmp
loope
mov
jecxz
cmps
out
data16
ret
mov
mov
loop
xchg
enter
sub
jecxz
in
jp
push
enter
ds
dec
addr16
dec
and
cli
dec
cmp
dec
push
xchg
daa
mov
push
scas
mov
xchg
push
cli
pusha
mov
scas
popf
or
scas
jbe
inc
jmp
xor
lock
pop
(bad)
ins
or
adc
test
jno
jae
rol
fdiv
fldl2t
sub
out
push
pop
fsub
ss
inc
inc
sbb
mov
jns
sbb
or
ss
add
dec
ror
inc
mov
scas
xor
mov
sahf
fsubr
mov
sub
adc
cmp
cmps
xor
pop
jmp
or
cmp
cmp
in
adc
mov
outs
lahf
test
dec
shr
pop
loop
gs
imul
shr
lea
push
pop
(bad)
scas
es
xchg
aam
ds
repz
sub
sbb
jl
push
mov
jp
(bad)
shl
push
pop
or
push
retf
xchg
leave
out
(bad)
dec
jle
pop
jmp
(bad)
cmp
pop
gs
sub
ror
mov
jecxz
stos
test
adc
push
jp
mov
mov
sbb
in
fcom
dec
dec
jb
jb
lea
push
adc
inc
or
pusha
inc
cwde
push
xor
adc
sub
pusha
cmp
dec
mov
jne
sbb
dec
enter
cmc
inc
xchg
mov
pop
adc
icebp
cmp
mov
mov
push
jecxz
add
lods
dec
in
fld
fstp
mov
jb
ja
aaa
ja
or
clc
mov
mov
mov
pop
add
in
mov
out
repz
mov
or
neg
outs
ds
retf
inc
or
push
fwait
jmp
mov
sbb
xor
cmc
add
pop
pushf
pop
lds
cmp
sbb
fisttp
adc
or
popa
mov
pop
call
mov
push
mov
retf
aas
(bad)
cmp
dec
lock
aaa
add
div
push
movs
push
dec
push
inc
ret
fs
shl
addr16
cmp
or
jns
in
repz
cli
push
iret
fmul
aad
addr16
(bad)
cmp
mov
jbe
cdq
add
xor
inc
push
jbe
in
mov
outs
jg
pop
sbb
sbb
mov
(bad)
dec
sbb
dec
xchg
popa
sub
fild
into
and
mov
bound
int
daa
jbe
adc
fist
in
jge
dec
sub
pop
iret
mov
imul
int3
mov
jge
loop
cmp
aad
mov
adc
cs
pop
ja
sub
clc
push
sub
inc
inc
mov
dec
int
hlt
sbb
sbb
xchg
fnsave
fiadd
jmp
xchg
(bad)
arpl
push
test
stc
add
push
cmp
fnstenv
aaa
les
jmp
mov
scas
mov
and
sahf
jp
daa
mov
and
sub
push
dec
outs
test
add
dec
sub
iret
rcl
push
mov
rol
push
das
out
pusha
mov
call
inc
pop
stc
test
mov
cmp
out
std
pop
in
aam
jmp
and
movs
sub
movs
sub
sub
sub
fs
test
jns
lods
mov
fsubr
mov
cmp
into
aad
inc
push
sub
scas
pop
dec
(bad)
mov
push
popa
test
xchg
test
mov
cmp
sbb
mov
movs
les
mov
and
retf
xchg
es
sub
sahf
mov
mov
mov
dec
mov
push
in
pop
inc
lds
mov
ja
dec
dec
sbb
mov
addr16
mov
sub
(bad)
jmp
ds
pop
scas
les
mov
and
dec
loope
pop
dec
xchg
icebp
xchg
sahf
js
adc
icebp
mov
lods
and
jns
pushf
imul
push
aam
mov
sbb
push
addr16
adc
out
aad
jl
jne
pop
jg
sbb
mov
in
dec
xor
cmc
dec
xchg
push
in
dec
pop
sbb
sub
push
adc
inc
cmps
bound
mov
mov
nop
ins
popa
inc
push
adc
xchg
push
mov
retf
je
(bad)
mov
out
inc
stos
and
jecxz
aas
or
out
push
add
shl
adc
cli
retf
scas
inc
ficom
mov
sbb
cmp
leave
je
mov
jl
ss
js
and
and
jne
jl
ins
mov
enter
js
add
push
aam
out
les
call
outs
es
ja
xchg
sub
rol
mov
movs
bswap
or
inc
or
loope
xchg
shl
mov
mov
add
aad
and
add
addr16
loope
sbb
adc
mov
in
jns
and
enter
mov
add
les
pop
adc
and
lods
dec
sbb
sbb
enter
mov
adc
dec
push
in
pop
cmp
neg
(bad)
sbb
shr
std
in
mov
pop
pop
push
xchg
jns
jnp
daa
fwait
push
cdq
pop
nop
push
inc
scas
push
mov
sbb
mov
test
daa
int
pop
or
cmp
mov
adc
dec
inc
fbstp
inc
lods
repz
cmps
jmp
sub
test
xor
and
dec
popa
das
out
mov
mov
sbb
jo
test
fist
mov
mov
mov
pop
scas
xchg
xlat
mov
ret
mov
mov
dec
js
xor
std
sub
xchg
or
fldenv
(bad)
pop
and
cli
sbb
js
fwait
cmp
int
add
sub
imul
inc
test
sub
inc
ins
pusha
mov
ffreep
repz
or
push
icebp
xchg
and
add
in
ret
mov
jb
xchg
jmp
out
and
arpl
jg
jp
scas
mov
jo
pop
sbb
cdq
pop
hlt
sub
stc
inc
add
sbb
popf
jbe
push
dec
icebp
adc
rcl
mov
sub
mov
mov
pop
cmp
rcr
loope
mov
(bad)
jno
and
or
xlat
sub
jmp
aas
in
dec
mov
or
cmps
jo
shl
jmp
into
inc
movs
fucom
popa
icebp
cmp
loope
rol
xchg
mov
shl
xor
dec
and
sbb
out
mov
xor
out
sub
lods
rcl
pop
dec
sbb
leave
jle
loope
mov
bound
mov
push
retf
mov
mov
push
rol
call
adc
into
add
adc
push
fdivr
pop
jl
dec
fadd
cmp
cmp
dec
test
fild
in
in
inc
dec
scas
sbb
xor
jp
cld
rol
repz
push
and
push
repnz
inc
add
fwait
test
test
popf
add
and
inc
cmc
sar
adc
mov
xchg
push
les
and
add
test
jae
pusha
les
cs
and
pop
push
data16
imul
aaa
cmp
(bad)
(bad)
fcmovbe
and
mov
push
mov
iret
adc
push
pushf
jmp
mov
and
and
ins
pop
stos
pop
sub
inc
aas
xchg
repnz
jl
imul
ret
and
jne
mov
dec
adc
pop
(bad)
sub
and
mov
sar
jle
push
fsub
ficomp
fwait
sbb
xchg
fist
adc
jg
adc
jp
mov
mov
cmp
repz
push
xor
aaa
jmp
test
test
(bad)
pop
push
sbb
loop
add
ror
loop
or
popf
inc
mov
pop
gs
loope
test
mov
pop
(bad)
shl
fucom
sti
pop
imul
mov
pop
xchg
push
adc
popf
lahf
inc
cmps
dec
nop
xchg
sar
dec
pop
sti
mov
ja
leave
sbb
mov
dec
retf
and
xor
pushf
or
cld
in
mov
push
std
jge
jo
std
retf
xchg
test
mov
ins
push
test
pop
pop
fst
push
cdq
hlt
fsubr
(bad)
jno
adc
(bad)
push
mov
sbb
add
ret
imul
dec
jno
cmpps
sub
add
adc
fnstsw
push
jno
mov
sti
enter
xor
mov
fs
in
push
add
or
shr
inc
stos
cdq
jmp
xchg
mov
mov
jmp
stos
cdq
fbld
stos
cmp
push
shl
pop
cmp
and
dec
loopne
and
mov
xchg
add
push
push
popa
jne
in
(bad)
fsubrp
call
or
cwde
or
imul
pop
in
inc
xor
out
jo
mov
lahf
xchg
adc
lea
pop
xchg
paddb
pop
lock
clc
and
push
pop
mov
cmp
leave
mov
test
inc
push
(bad)
and
(bad)
push
out
(bad)
xor
daa
xor
test
inc
je
push
jecxz
adc
frstor
inc
jmp
mov
mov
out
add
stos
addr16
sub
jle
rol
inc
retf
int3
(bad)
repz
icebp
data16
fistp
mov
out
fnstenv
jnp
dec
adc
xor
aas
mov
xchg
stos
mov
pop
repnz
push
or
pop
sbb
je
aad
sub
iret
fldenv
mov
popf
or
xchg
fistp
iret
pushf
push
aaa
add
test
cwde
or
cmp
(bad)
shl
imul
fs
push
dec
sbb
jns
mov
cmp
js
enter
jmp
rcl
inc
leave
and
push
(bad)
cmp
dec
pop
jl
push
sbb
mov
pop
fild
mov
stos
xor
sub
cmp
mov
daa
popa
jp
lds
imul
call
cmp
scas
hlt
adc
fbld
repnz
int3
add
xchg
repz
push
ret
mov
nop
sahf
or
push
(bad)
inc
arpl
cmp
ins
pop
dec
call
jg
inc
stos
movs
or
xchg
xor
std
sub
sti
sbb
sbb
jns
xchg
ss
cmp
xor
mov
std
and
or
xchg
push
push
push
fs
test
fsub
sar
clc
aas
es
nop
adc
jo
add
popa
xlat
fwait
mov
sbb
mov
ret
repz
retf
fwait
or
cmp
int3
and
jae
fcomi
aad
mov
jbe
fsubr
pusha
fadd
mov
xor
data16
cmp
xchg
inc
test
(bad)
mov
jmp
fld
setge
out
outs
out
test
xchg
jne
cmps
pop
push
cmc
push
xor
(bad)
add
addr16
stos
xchg
and
hlt
pop
pop
clc
out
clc
idiv
out
cs
ja
movs
mov
iret
xor
loopne
fs
xor
ror
repz
jns
in
lds
mov
scas
or
mov
and
(bad)
sti
add
sbb
xchg
pop
cld
jg
popf
sbb
mov
popa
fbstp
add
mov
arpl
in
lds
inc
test
adc
pop
push
not
dec
inc
sub
shl
adc
jp
or
data16
pop
call
call
jns
xchg
and
mov
push
pushf
(bad)
sbb
mov
cwde
cmp
cld
ja
cli
jns
inc
je
sbb
dec
mov
xchg
cmp
retf
mov
or
jae
pop
jg
fisubr
in
test
ds
mov
dec
test
pop
nop
outs
dec
cmp
shl
adc
dec
into
aam
inc
in
aaa
xchg
gs
sbb
adc
or
sar
pusha
test
in
iret
sub
scas
mov
call
ss
push
fs
fld
and
jmp
movs
adc
sbb
ja
(bad)
and
imul
aam
ret
add
imul
mov
or
shl
ret
loopne
and
cld
cli
cmp
sbb
sbb
cmp
cmp
jnp
sub
push
(bad)
mov
jmp
dec
sub
xor
pop
xor
mov
sbb
pop
pop
(bad)
lods
push
inc
lea
inc
dec
xchg
call
push
std
push
xchg
data16
ds
jge
xchg
sbb
xor
mov
test
sub
mov
cmp
xchg
test
jmp
inc
or
sub
test
sbb
sbb
jmp
bound
mov
or
enter
mov
test
sub
xor
jg
test
xor
xchg
(bad)
pop
mov
add
sub
(bad)
jp
cmps
neg
shl
jns
ins
sub
daa
rol
xchg
out
mov
(bad)
dec
xor
cs
or
hlt
add
fwait
add
inc
sub
shl
xchg
and
scas
imul
sbb
inc
adc
jne
cs
jmp
and
push
lock
movs
sbb
jl
icebp
inc
test
cmps
into
push
stc
es
call
gs
movs
das
mov
and
dec
adc
jl
scas
imul
pop
push
ret
pop
mov
das
push
dec
mov
lods
sbb
sub
je
mov
outs
and
jb
scas
xchg
sub
in
jnp
adc
stos
jg
dec
in
xlat
sti
jmp
aam
pop
xor
cwde
jmp
in
jb
ret
jns
adc
test
cmp
mov
arpl
cmp
mov
stos
xchg
sbb
test
mov
ja
test
xlat
adc
into
push
mov
(bad)
sub
jae
fistp
loope
retf
ds
and
loope
sub
lgs
pop
int3
add
dec
popf
mov
push
test
xor
mov
push
add
add
pop
adc
les
dec
aad
(bad)
bound
out
ss
add
aam
inc
inc
dec
out
repnz
cdq
mov
test
bound
pop
(bad)
ss
jo
jmp
sub
or
(bad)
adc
and
imul
mov
cmp
push
div
mov
inc
inc
js
shr
cld
repz
push
push
push
mov
or
mov
out
and
jne
ret
lahf
mov
push
loope
adc
push
test
sbb
inc
jl
js
out
dec
pusha
xchg
lds
icebp
sbb
jo
cmps
mov
xor
loop
cmps
xlat
cld
sub
or
push
xlat
push
mov
je
xchg
xor
jle
ja
cmp
or
xchg
xchg
mov
shl
ja
xchg
pop
call
popf
push
jl
dec
addr16
sbb
(bad)
xor
rcr
sub
adc
push
loop
pusha
push
cmps
dec
mov
test
jbe
ss
xchg
xor
push
inc
cmp
fadd
jmp
jmp
fnstenv
jle
mov
fmul
enter
mov
xchg
mov
mov
xor
sub
adc
pusha
jae
add
or
xchg
mov
das
or
sti
lods
jbe
and
push
mov
xchg
and
gs
push
into
jl
pop
xchg
push
je
aaa
pop
imul
ins
mov
xor
sbb
shl
pop
cmp
aaa
jmp
adc
loop
xor
sub
arpl
sbb
loope
push
cmp
shr
cmc
pop
pop
std
sbb
popf
or
xchg
lahf
cmc
cmp
pusha
cmp
sbb
mov
pop
ret
sahf
scas
adc
add
in
imul
(bad)
retf
pop
push
dec
or
pop
not
or
cmps
pop
sbb
adc
test
cmp
vmovd
pop
push
add
mov
mov
push
sar
add
jl
mov
cwde
ja
out
mov
mov
jae
imul
or
add
jle
pop
inc
pop
push
dec
mov
xor
outs
jg
daa
dec
dec
inc
test
add
sub
imul
lahf
pop
enter
inc
adc
ret
and
xor
jle
xlat
pusha
pop
push
clc
int3
xor
inc
mov
pop
push
sti
dec
scas
mov
mov
adc
or
lock
push
retf
xchg
enter
cmps
xchg
sti
gs
stos
fwait
push
adc
lahf
and
retf
pop
out
jb
stos
cmp
retf
add
stc
out
out
iret
repz
clc
xchg
aaa
(bad)
cmp
sub
add
jge
or
mov
push
pushf
pop
adc
shr
pop
mov
div
sbb
lods
stos
leave
xacquire
nop
pop
ja
daa
jl
add
cli
fld
mov
push
test
push
ror
lods
jp
jmp
sub
jg
sbb
cmp
and
out
pop
xlat
cmps
sub
jl
add
add
jge
jns
scas
adc
mov
sbb
jl
push
shl
std
mov
mov
cmp
dec
pop
call
lods
xchg
inc
cmp
and
cmp
cmps
mov
push
xchg
fucomip
stc
rcl
mov
or
in
imul
leave
and
adc
mul
mov
add
test
sub
repnz
nop
fs
sbb
shl
shl
cli
add
cmps
shl
int3
clc
or
adc
movs
loope
aas
xchg
adc
mov
aad
cmp
(bad)
(bad)
mov
push
push
xor
mov
adc
ins
mov
sbb
cmp
popa
jbe
call
mov
out
pop
or
and
stos
das
out
cli
pop
dec
sub
xlat
and
leave
pop
jmp
xchg
cld
clc
mov
and
loope
or
scas
push
mov
add
dec
add
and
adc
pop
repz
psubusw
dec
mov
test
ficomp
push
je
movs
or
xor
and
cli
int3
adc
mov
push
cdq
jp
(bad)
jns
mov
arpl
enter
clc
sub
sub
xchg
mov
mov
jb
retf
shl
lea
stos
fild
xor
(bad)
rcr
jo
int3
sbb
fiadd
movs
mov
xor
xchg
xchg
jmp
jbe
pop
dec
xor
or
pop
ja
(bad)
pushf
gs
mov
gs
loope
fisttp
aaa
ins
int3
(bad)
movs
sub
sub
jne
push
lahf
not
nop
or
retf
push
pop
nop
aad
cwde
ss
into
mov
mov
sbb
jns
cmp
shl
jp
stos
(bad)
imul
adc
outs
xor
and
out
in
xchg
mov
sub
repz
xor
push
jmp
sbb
pop
sub
jmp
out
not
mov
iret
push
imul
xchg
pop
movs
(bad)
lods
fimul
bound
and
xchg
popa
push
loop
jle
and
bnd
mov
out
pop
jl
rcl
loope
or
mov
fidiv
out
cmp
jae
std
pop
pop
shl
cld
mov
mov
xor
xor
jmp
adc
sahf
cmp
fstp
repnz
pop
int
retf
clc
push
scas
ret
shl
out
or
ret
jo
pop
iret
movs
xchg
test
or
sub
pop
pop
test
mov
data16
lods
mov
cmp
imul
dec
addr16
clc
fs
or
mov
or
pop
jmp
sub
or
icebp
jb
je
outs
vmovss
cli
xchg
dec
push
xchg
fdiv
rcr
mov
mov
(bad)
fidiv
sahf
mov
mov
xlat
push
test
xchg
jle
sahf
gs
sbb
sbb
lea
scas
mov
std
sti
jl
adc
rcr
into
jno
jnp
sbb
fidiv
push
xchg
stos
in
ja
or
mov
in
adc
jge
mov
ja
adc
sub
jl
mov
fistp
aas
test
cmp
mov
mov
sbb
dec
fimul
jno
pop
xchg
(bad)
out
inc
sub
scas
cli
mul
imul
or
mov
fsubr
add
sub
xor
(bad)
mov
dec
pop
sub
push
xchg
and
lea
(bad)
mov
aaa
outs
lidtd
int
dec
ss
jnp
cmp
push
sbb
mov
sbb
xor
fdivr
mov
jle
sub
mov
adc
add
js
pop
push
outs
int3
shr
pop
loop
xchg
xchg
in
jp
mov
xlat
out
adc
out
jns
inc
inc
das
out
pop
es
test
pop
into
jmp
xor
and
movs
cmp
cmps
cmovne
xchg
pushf
or
icebp
cmp
popf
sub
inc
add
xchg
cli
xchg
sbb
mov
jmp
call
inc
out
pop
inc
add
dec
sub
inc
pop
jne
clc
ret
iret
not
es
or
jae
scas
xchg
mov
(bad)
into
data16
clc
into
idiv
adc
bound
rcr
sub
rcl
jp
shl
pop
shr
or
outs
mov
adc
jns
push
movs
pushaw
add
arpl
test
enter
add
inc
cmp
stos
pop
addr16
cmps
inc
mov
les
push
outs
jns
cmp
jb
add
mov
lods
xchg
sar
add
fild
fldenv
retf
sbb
push
jge
mov
mov
jno
adc
fwait
inc
sub
rcr
or
dec
mov
pop
pop
push
popa
mov
dec
inc
xchg
lock
movs
and
movs
dec
mov
cld
sahf
mov
jle
fdivrp
or
jmp
sti
ficomp
pop
test
mov
clc
pop
in
into
inc
mov
aad
jecxz
push
in
push
mov
mov
pop
scas
ins
rol
mov
es
pop
ja
aam
or
push
ss
stos
pop
mov
dec
pushf
jne
out
jmp
mov
rcr
mov
adc
stos
pushf
and
ins
not
mov
adc
push
dec
pop
xchg
dec
jo
in
add
push
jmp
jne
daa
rcr
fcmovu
pop
add
stos
lds
lock
push
jmp
pop
jge
cmp
imul
push
in
std
sbb
jl
push
or
je
add
push
or
sub
inc
jl
test
sub
into
retf
mov
pop
fisub
push
pop
mov
bound
sub
inc
loope
inc
add
test
inc
push
inc
sbb
call
mov
retf
in
sub
aad
lods
push
scas
xchg
adc
sbb
add
not
sbb
bound
(bad)
jmp
mov
cmps
das
adc
dec
jo
mov
mov
inc
mov
cmps
inc
movs
mov
fnsave
xchg
xor
cmp
inc
neg
pop
ret
aas
xor
nop
pop
adc
aad
inc
mov
test
stc
mov
jbe
nop
sub
aam
sub
neg
out
ret
push
fcmovne
pop
sbb
and
mov
in
pop
and
sub
lea
cmp
dec
push
cmp
int
xor
push
lods
js
nop
push
mov
jmp
sub
pop
xchg
fisub
adc
mov
das
mov
xchg
jnp
sub
mov
mov
(bad)
xchg
mov
cmp
push
aaa
pop
sub
mov
movs
xor
pop
adc
ficom
cmps
stos
cs
mov
xor
stos
pop
push
sub
jmp
xchg
adc
scas
mov
mov
popf
mov
imul
rcr
dec
std
loop
push
mov
adc
out
xlat
test
xor
ins
aam
sub
jne
int
push
push
mov
lds
hlt
loopne
mov
push
jge
add
pop
xchg
sar
jecxz
(bad)
mov
jle
jg
and
out
fsubr
repz
fisub
cmp
mov
mov
fbstp
add
sbb
sti
add
mov
test
loope
cld
sti
imul
jae
(bad)
cmp
pop
repz
push
and
aaa
and
sub
pop
daa
mov
pop
aad
ins
lock
fadd
pop
add
or
push
test
or
(bad)
ss
pushf
xchg
pop
repnz
push
(bad)
in
or
movs
pop
mov
icebp
push
pop
stos
daa
movs
mov
add
hlt
mov
mov
push
pushf
loopne
pop
fcom
lea
xchg
outs
mov
fbld
(bad)
mov
sti
pop
movs
inc
jbe
jp
das
dec
pop
jg
sbb
xor
pop
out
popf
inc
fwait
iret
push
xor
popf
mov
repnz
ret
js
test
ffree
out
fdivr
push
mov
mov
pushf
sub
sbb
or
mov
aad
mov
pop
mov
bound
ss
std
test
pop
daa
xchg
xor
jo
cli
mov
pusha
adc
xlat
jne
adc
fistp
ror
dec
imul
xchg
loopne
pop
and
cmp
and
adc
and
pusha
out
dec
cwde
mov
out
scas
and
xchg
jle
xchg
dec
inc
in
xor
test
adc
adc
adc
popa
jle
aam
jg
sub
fld
or
outs
mov
dec
or
in
and
(bad)
stos
fs
mov
fcom
aas
jle
jbe
push
(bad)
rol
cld
mov
cli
dec
push
call
test
fnstcw
push
pop
ret
rcl
ficom
and
pop
pop
iret
retf
fist
cdq
movs
out
xor
cwde
gs
fist
sub
push
pop
call
xchg
cmp
jmp
cld
das
jp
mov
pop
js
mov
rcr
sbb
rol
loopne
cli
es
sbb
in
shr
lock
lock
push
fiadd
adc
mov
push
lahf
inc
mov
mov
and
jnp
out
jmp
inc
inc
sbb
cmp
cmp
fucomp
aam
adc
sbb
test
sub
lea
cmp
pop
jnp
arpl
fist
mov
pop
(bad)
test
push
mov
inc
in
fwait
cwde
cmovs
pop
cmp
lahf
or
leave
inc
imul
or
add
jbe
ret
jne
mov
test
sti
adc
jg
pop
jns
inc
lds
add
cwde
mov
jo
movs
popf
pop
jne
das
pop
pop
iret
xor
mov
enter
int3
cwde
mov
mov
out
cdq
push
imul
aaa
add
mov
mov
rcl
sub
add
ja
stc
xor
mov
mov
shr
lods
push
and
xchg
mov
test
call
push
xchg
dec
pop
mov
out
or
jno
push
stc
jb
enter
pop
sub
sub
mov
gs
in
out
push
push
adc
mov
jle
fwait
enter
pop
push
push
mov
lock
arpl
shl
(bad)
fistp
out
aam
ficomp
add
mov
inc
dec
fld
in
mov
or
sti
or
mov
jmp
jmp
xor
leave
les
mov
enter
fild
in
dec
sahf
cli
jl
jmp
and
in
pop
mov
mov
cdq
mov
sub
sub
lods
sbb
pop
sub
cmp
inc
cmp
sbb
inc
sub
sub
cmps
es
jnp
pop
push
mov
stos
out
push
bound
push
lock
das
lods
ss
jecxz
add
sbb
retf
jae
aaa
dec
pusha
leave
or
pusha
outs
test
xchg
adc
adc
cmp
or
bts
cmp
outs
pushf
or
les
rcl
scas
mov
mov
ffreep
data16
movs
or
inc
in
xor
bound
fs
dec
call
fucomi
nop
sar
sub
mov
rcl
xchg
add
inc
cmp
and
adc
xchg
shl
nop
add
push
out
imul
mov
xchg
jb
sti
mov
mov
sbb
nop
lds
add
jle
mov
push
jo
ins
mov
or
cmp
mov
mov
jmp
leave
sub
cmp
loope
std
fidiv
popa
mov
cmc
clc
push
jns
and
mov
lods
daa
xor
daa
out
push
retf
dec
mov
xchg
or
sahf
mov
sahf
pop
mul
ficomp
div
aaa
fidivr
cwde
pop
in
add
mov
repz
jne
leave
(bad)
cdq
shr
mov
mov
je
sahf
dec
les
fdivr
outs
ds
fiadd
cld
stos
adc
pop
enter
dec
lahf
push
int
loope
dec
ret
cdq
jb
sbb
xchg
mov
xchg
nop
mov
or
das
adc
in
scas
sbb
fist
cmp
mov
mov
(bad)
popf
pop
cwde
sbb
sub
pop
dec
ds
int
pop
inc
push
mov
popa
repz
sbb
das
sahf
inc
jne
push
cmp
push
xchg
call
stc
pop
mov
adc
mov
lea
inc
stos
mov
xor
es
mov
(bad)
push
pop
mov
rcr
iret
jecxz
pop
cmp
mov
sti
popf
or
add
mov
jcxz
stos
ds
pop
dec
push
push
mov
dec
pop
(bad)
or
jl
pop
sbb
pusha
retf
xchg
daa
ins
int3
sbb
arpl
and
test
out
sub
daa
lahf
retf
mov
xor
lds
pushf
test
mov
mov
sti
sub
fadd
mov
daa
les
xchg
lahf
or
pop
jg
and
dec
scas
jo
fldenv
ret
cs
loope
xchg
movs
sbb
push
add
jmp
mov
fisubr
pop
xchg
movs
in
repz
jmp
mul
cmp
mov
fldcw
push
sub
movs
movs
loope
cli
into
cmp
fild
fsubr
cmp
jnp
sar
cs
mov
das
mov
fs
pop
popa
fwait
pop
loope
std
adc
in
clc
sub
sub
scas
add
repnz
call
jl
inc
xchg
out
and
cmp
loop
cmps
pushf
push
aam
add
add
cmps
fild
xchg
out
push
push
aam
pushf
mov
test
jns
pop
test
das
and
out
xor
and
inc
sub
adc
mov
sub
pushf
inc
sub
outs
cwde
push
xor
mov
add
aam
push
ror
pop
sbb
mov
les
mov
sti
sub
addr16
jl
fld
out
jmp
or
pop
dec
mov
add
mov
mov
mov
xor
ins
je
lahf
in
mov
jle
xchg
jns
out
stos
jbe
cmp
dec
ss
push
xchg
js
(bad)
xchg
retf
sbb
add
fs
xchg
xchg
(bad)
call
jae
pop
and
jg
push
add
mov
adc
xchg
in
add
xchg
mov
scas
popa
inc
icebp
repz
imul
les
aad
mov
sub
push
test
mov
add
jge
es
mov
pop
repnz
jno
test
mov
mov
cmp
sub
(bad)
pop
mov
(bad)
or
pop
shl
cmc
fist
fmul
jg
shl
inc
outs
inc
and
jb
(bad)
cli
xchg
jl
push
mov
cmp
fidiv
sti
test
out
and
addr16
mov
cmc
push
aas
mov
in
and
dec
dec
inc
dec
jb
mov
pop
shr
mov
xchg
sbb
xchg
stos
sub
movs
mov
cmc
mov
xor
dec
sub
and
xchg
lea
adc
hlt
jecxz
cmp
cmp
je
dec
sbb
ins
rcl
xor
bound
nop
sbb
or
ja
mov
mov
xchg
sbb
test
xchg
pop
(bad)
inc
mov
and
pop
out
mov
cld
shr
xlat
fwait
xor
ins
je
xchg
test
or
push
cmc
add
outs
pop
or
popa
int
gs
js
fstp
in
adc
bts
(bad)
call
repnz
inc
inc
ror
pop
das
int3
pop
jge
cmp
push
and
mov
shl
sbb
nop
out
mov
scas
stos
sub
or
sub
jmp
mov
rcl
pop
aad
cld
mov
loopne
ret
xor
movs
or
mov
popa
ror
icebp
mov
xor
push
mov
dec
and
and
and
mov
sub
ja
push
cli
jp
call
push
inc
jnp
mov
lods
ss
stos
ret
out
out
popf
test
sub
jg
sub
xor
clc
mov
fdivp
pop
cwde
je
push
loope
xchg
clc
cmp
popa
imul
sub
std
mov
mov
xlat
aaa
sub
mov
(bad)
pop
inc
jmp
mov
sti
mov
loopne
shl
stos
shl
cmc
and
push
jnp
(bad)
cs
jb
test
push
cwde
cmps
add
mov
test
inc
sub
popf
jnp
pop
pop
push
add
mov
lds
loopne
in
sahf
sahf
and
out
or
push
test
data16
xor
dec
xchg
or
loop
jb
inc
popf
cmp
sbb
ds
cmc
loope
pop
inc
ins
fiadd
adc
enter
push
mov
lods
aas
mov
xor
fbstp
push
sbb
pop
sbb
ins
arpl
push
sbb
jb
sbb
jne
and
cmp
or
out
jb
sub
xchg
pop
sbb
cld
aas
loopne
out
retf
icebp
xchg
iret
pop
pop
cmp
and
pop
cmc
xchg
mov
jmp
mov
mov
dec
repnz
inc
pop
push
sub
push
mov
push
data16
or
(bad)
cmp
add
adc
push
mov
sbb
ds
xor
and
xchg
daa
add
icebp
cmp
movnti
cmp
movs
div
je
xchg
xchg
cs
ss
rol
test
adc
adc
push
popa
mov
sbb
jge
leave
push
jmp
popa
or
push
leave
test
clc
add
or
dec
push
aas
repz
xchg
aaa
pop
push
adc
push
lahf
jmp
je
xor
dec
call
retf
sti
pop
mov
pop
and
inc
jmp
out
hlt
aad
call
mov
ret
mov
shr
in
inc
jne
loopne
shl
int
das
aam
cs
dec
es
adc
jmp
xchg
ins
xchg
sbb
leave
test
in
call
mov
sbb
or
add
outs
hlt
pop
push
fwait
scas
xor
jge
xor
mov
ins
data16
adc
and
mov
dec
aam
popf
mov
xor
mov
and
push
mov
and
sahf
outs
pusha
sub
mov
add
jl
cmp
pop
lods
por
xchg
fnstcw
jp
mov
xor
push
cmp
add
movs
in
test
push
int
lock
movs
adc
xchg
mov
retf
sbb
or
pop
xchg
cmps
sbb
in
mov
cmp
dec
push
icebp
out
das
push
fadd
cmp
jb
xor
pop
mov
push
movs
inc
sar
es
arpl
mov
push
or
dec
popf
lahf
ja
and
jecxz
mov
lds
lods
int
aaa
test
sbb
jmp
imul
mov
xor
pop
inc
pop
stc
pop
imul
mov
mov
inc
jmp
fiadd
cli
jge
repnz
icebp
into
dec
ftst
cmp
adc
lods
jl
pusha
iret
xchg
not
ds
cmps
dec
retf
ss
pop
(bad)
jae
xlat
es
or
retf
xor
ret
clc
cmp
fdivr
pop
shl
mov
xchg
mov
pop
cmp
mov
dec
ret
ins
fs
xor
stos
jle
pop
cs
loopne
sbb
jns
push
ds
and
aam
cmp
mov
cli
push
popa
aam
rol
loope
in
add
jge
dec
rol
xchg
dec
das
sub
sbb
add
nop
in
stc
pop
sub
xlat
inc
mov
sti
lods
push
addr16
xchg
rcl
dec
lea
mov
iret
fstp
or
aam
shl
sbb
fisttp
pop
cwde
sbb
fistp
add
mov
jb
aas
or
(bad)
mov
sbb
sub
adc
outs
mov
dec
push
add
cmp
imul
adc
or
arpl
out
cdq
test
dec
or
popf
jl
out
mov
mov
inc
in
and
(bad)
rcr
cld
pop
shl
icebp
enter
jae
gs
loop
in
sub
stos
sub
loope
fwait
pop
enter
lahf
adc
pop
stos
(bad)
xor
sbb
inc
push
mov
mov
je
bnd
je
inc
pop
ss
xor
xor
jns
pop
jl
cdq
jmp
shl
inc
xchg
out
js
test
mov
ins
pop
retf
pop
test
call
pop
pop
popf
inc
adc
and
ins
mov
cmc
mov
add
jo
sbb
mov
in
cmp
and
mov
cld
mov
sub
ret
les
dec
repz
stos
cs
div
adc
stc
das
mov
add
out
scas
mov
call
and
push
jnp
jp
ret
clc
cmp
retf
movs
pop
imul
mov
scas
cld
cwde
outs
sar
gs
mov
push
mov
xor
stos
sub
(bad)
push
push
(bad)
enter
push
(bad)
movs
fwait
ins
shl
jp
pop
adc
mov
mov
inc
sbb
pop
test
ja
adc
popa
cdq
fadd
outs
std
in
outs
mov
(bad)
shr
dec
mov
sbb
mov
test
or
ins
js
cmps
inc
xor
dec
mov
push
adc
add
vpsubb
lods
mov
inc
add
and
sub
daa
lea
hlt
mov
xlat
pandn
mov
pop
loope
shr
sbb
sbb
adc
pushf
das
pop
cmp
mov
aam
sbb
push
add
mov
jb
sti
outs
ret
loope
rcr
movs
or
aam
jle
and
adc
xchg
adc
fnstcw
mov
xchg
cmp
fisubr
(bad)
sti
aas
fcomp
adc
dec
cmp
je
out
mov
adc
das
cmp
cmp
(bad)
mov
fwait
in
or
push
or
bound
repnz
jle
adc
pop
fcmovu
push
ror
jne
xlat
sub
(bad)
pop
sar
mov
stos
stos
pop
scas
jmp
pop
push
in
xor
es
aas
aam
mov
mov
jns
pop
retf
fld
push
or
outs
mov
add
ins
dec
ja
mov
cld
jb
sbb
ds
ja
ins
and
mov
cmp
fstp
imul
ja
cld
xlat
push
in
xor
pop
stc
(bad)
aam
adc
add
jge
movs
lds
and
mov
xchg
imul
out
adc
or
iret
scas
mov
arpl
call
mov
sub
(bad)
(bad)
outs
pusha
dec
sar
pop
imul
xchg
mov
retf
int
int3
pushf
out
aad
inc
xor
pop
cs
dec
push
mov
inc
jno
push
in
and
icebp
add
gs
test
test
dec
add
je
lods
push
mov
in
rcl
sbb
jmp
push
push
rcr
pushf
jne
add
xchg
cmp
lods
mov
dec
mov
imul
dec
xlat
test
hlt
rol
cli
and
push
push
push
push
test
sti
add
shl
xor
ss
repz
pop
sbb
pop
repz
mov
stc
jmp
push
in
cmp
rcr
jmp
adc
jmp
ficomp
out
jg
pop
cs
mov
mov
push
inc
or
or
adc
(bad)
lock
loopne
dec
cmp
cmps
neg
icebp
cmps
dec
repz
test
pop
add
add
xlat
or
outs
cmp
mov
aas
sub
mov
push
mov
arpl
sub
mov
loope
jmp
ret
jl
bndldx
pop
lods
mov
xchg
sti
mov
js
add
mov
fild
lea
jns
dec
mov
jae
dec
ror
xchg
push
(bad)
(bad)
shr
pop
out
xor
adc
mov
jle
jl
aaa
jno
pop
in
mov
dec
inc
mov
cmp
add
add
sbb
arpl
in
es
out
cmp
ret
pop
cmp
xor
push
and
add
or
es
dec
mov
int3
mov
mov
movs
sahf
(bad)
imul
jnp
mov
out
push
mov
jmp
scas
add
jbe
sub
and
not
shl
clc
in
pop
mov
inc
je
daa
push
pop
xchg
in
fs
movs
mov
lods
mov
call
xchg
imul
retf
std
je
movs
push
mov
mov
fisttp
sub
imul
xor
lock
loope
iret
lahf
dec
adc
pop
xor
test
xchg
je
push
leave
pop
test
ins
in
les
retf
hlt
movs
outs
mov
aad
jle
mov
pop
std
inc
push
out
sbb
out
movs
inc
jbe
lock
retf
fld
in
sbb
(bad)
iret
xchg
jbe
inc
movs
stos
aaa
or
add
adc
aad
push
pusha
ret
mov
sub
jecxz
sbb
out
xchg
xchg
mov
cmp
ret
call
ins
jns
jmp
add
in
cmp
hlt
mov
mov
movs
jg
lods
push
ret
and
sbb
pop
stos
xor
xchg
lahf
dec
daa
dec
pop
dec
aas
jb
inc
adc
push
repz
cs
xor
inc
jbe
xchg
in
icebp
loope
iret
sbb
mov
adc
push
add
outs
xchg
jmp
push
push
jae
fiadd
jmp
into
mov
mov
pop
mov
mov
mov
ret
rcr
cmp
mov
arpl
push
xchg
mov
pop
mov
sbb
inc
test
push
pop
call
pop
repnz
mov
iret
leave
mov
bnd
sub
not
imul
(bad)
adc
icebp
ins
popa
out
mov
shl
cdq
add
mov
cmp
cdq
cmp
mov
(bad)
mov
ss
jo
xchg
pop
cdq
fwait
(bad)
inc
dec
movs
dec
(bad)
hlt
jge
mov
push
adc
adc
imul
ret
fcom
lods
fistp
hlt
pop
adc
lea
out
jmp
xor
pop
sub
adc
mov
inc
scas
xchg
popw
(bad)
je
cmc
xchg
xchg
fwait
std
mov
icebp
mov
sar
lods
sbb
retf
xor
mov
sbb
adc
adc
pusha
push
icebp
mov
mov
call
inc
ins
movs
aam
loop
fild
rcl
xor
cmp
stos
xchg
sub
test
aad
push
mov
in
in
retf
sub
in
repnz
cmp
out
rol
pusha
xchg
adc
fistp
xor
pop
cld
adc
pop
jl
lahf
das
dec
shl
sahf
es
pop
cmp
icebp
and
mov
cmp
jb
push
xchg
es
fisubr
cmp
push
rol
mov
xchg
inc
gs
inc
gs
int
mov
sub
lods
fld1
push
mulps
xchg
fdiv
std
mov
dec
jl
jns
push
in
xchg
lahf
push
(bad)
pop
into
push
jmp
fist
xchg
cdq
mov
sub
mov
dec
popf
xor
and
jo
sbb
(bad)
xor
cs
xor
ins
and
cmc
dec
mov
repz
hlt
clc
ss
jp
stos
aas
(bad)
popf
sub
scas
inc
inc
test
in
fsub
or
inc
pushf
cld
sub
inc
push
dec
or
movs
enter
ret
popf
xchg
xchg
mov
dec
and
(bad)
fisttp
out
push
dec
sub
jl
pop
push
jge
bound
aas
jbe
or
(bad)
gs
pushf
jo
and
or
cwde
int3
push
add
shr
pop
xchg
xchg
or
clc
jmp
imul
sbb
loop
sbb
cmp
push
cmps
pop
or
mov
mov
out
jnp
pop
leave
mov
(bad)
adc
call
lock
adc
mov
inc
in
enter
dec
stos
sub
ds
adc
bound
cmp
call
mov
iret
std
push
or
leave
mov
in
cmp
adc
push
sbb
ins
cld
jp
mov
cmp
inc
and
ja
sahf
pop
fnsave
or
push
rcl
push
(bad)
or
jecxz
cmp
push
rcr
xchg
mov
adc
jecxz
es
mov
mov
iret
loop
outs
pusha
sub
xchg
mov
mov
test
cli
or
mov
loope
jmp
xchg
retf
xchg
cli
fsub
xchg
pop
repz
pop
xchg
push
pop
jne
sub
cs
xor
call
cld
movs
adc
push
test
pushf
dec
jne
pop
cmps
sbb
mov
xchg
mov
adc
jp
push
mov
mov
jle
iret
mov
into
mov
push
in
fmul
repnz
xlat
loope
jns
int3
addr16
(bad)
out
repz
pop
ret
jo
daa
shr
mov
imul
pop
shl
cmps
sbb
fisub
or
cmp
retf
ret
sbb
mov
mov
mov
cmp
cld
stc
or
jmp
scas
bswap
cwde
loop
dec
sbb
in
push
sub
daa
jne
(bad)
fadd
ss
loop
cmps
in
popa
lods
or
cmc
cmps
test
fidiv
mov
scas
ins
outs
test
ja
or
and
sbb
pop
pop
or
add
push
jmp
sbb
sar
sub
or
out
pusha
add
pop
inc
pop
xor
shr
dec
test
lds
outs
jmp
ret
ds
imul
cmps
sbb
clc
pop
fidivr
scas
js
sar
mov
pop
movs
ja
add
leave
mov
shr
popa
test
adc
ss
leave
jecxz
mov
jle
adc
fild
or
outs
xlat
cmc
adc
(bad)
push
mov
std
pop
js
not
mov
xor
cs
pop
xchg
test
cld
ins
cmp
or
loop
push
bound
xor
(bad)
in
jns
mov
lds
(bad)
mov
es
cmp
out
cmp
dec
scas
sbb
push
adc
mov
sbb
enter
add
mov
in
sub
push
dec
jo
dec
rcl
dec
and
add
xchg
test
adc
(bad)
addr16
sbb
fidiv
mov
sub
xor
mov
sub
adc
cmp
add
mov
cld
sub
rcl
mov
xor
mov
imul
xchg
popf
call
cmps
sub
pop
movs
jno
(bad)
pop
or
push
dec
aam
retf
add
cli
push
mov
mov
imul
scas
mov
pop
add
pop
pop
lea
imul
int3
inc
aaa
mov
inc
or
out
xchg
das
sbb
mov
pop
push
daa
aad
push
adc
and
adc
in
imul
lahf
lock
sahf
jo
adc
ficomp
and
sub
pop
aad
pop
xor
or
rcl
repz
jne
add
shr
ins
jae
lock
inc
jbe
je
stos
mov
popf
test
je
mov
xchg
in
addr16
sub
or
xchg
dec
sbb
sar
inc
cmps
cmp
clc
xor
xor
repz
retf
add
push
xor
dec
xor
call
push
mov
jo
dec
pop
jle
mov
and
stc
lods
inc
dec
inc
cmp
test
(bad)
mov
inc
mov
xchg
call
fmul
cld
neg
sub
adc
sbb
ror
mov
sahf
lea
jo
jecxz
mov
std
sar
adc
mov
fstp
mov
ret
add
push
dec
imul
sti
xchg
jecxz
push
scas
xchg
std
hlt
cld
sbb
xor
stos
sub
sbb
jmp
bound
in
or
test
sar
or
mov
hlt
mov
call
test
outs
sbb
xor
fisubr
xchg
adc
sub
ds
xchg
es
lea
daa
push
xor
mov
fldl2t
cmp
and
mov
scas
sbb
repz
jmp
sub
jecxz
mov
cmp
mov
jns
lds
in
and
sub
ficomp
dec
mov
mov
mov
lea
pop
add
sbb
jmp
(bad)
and
lods
xchg
sbb
xchg
ficomp
fistp
in
div
and
mov
xor
mov
xor
push
push
stos
aaa
jns
stc
bound
fwait
(bad)
sbb
inc
and
nop
(bad)
jbe
xchg
(bad)
sub
into
out
sbb
scas
and
jno
cwde
xor
pop
popf
sbb
loope
(bad)
out
shl
jns
add
lock
mov
xlat
dec
mov
pop
lods
mov
fld
cld
jecxz
jle
cmp
test
mov
lods
sar
pop
outs
(bad)
fisttp
or
in
lds
mov
mov
pop
xlat
inc
jmp
lods
pop
add
lahf
sbb
ret
daa
lods
mov
lahf
cmp
fs
xor
cmp
fcmovnb
mov
sbb
mov
xor
das
popf
dec
jno
sub
outs
outs
sub
push
add
mov
push
(bad)
aam
nop
(bad)
and
pop
xor
and
aas
mov
cmp
dec
in
adc
xchg
mov
jae
test
ins
xchg
inc
sbb
jmp
retf
mov
xor
add
sub
pop
test
mov
xor
push
movs
xchg
xchg
mov
retf
dec
adc
push
mov
and
inc
push
sub
adc
adc
mul
sub
lods
jns
jmp
mov
fbstp
or
imul
shr
sar
scas
nop
and
xchg
(bad)
out
and
mov
mov
xor
mov
cwde
pop
inc
push
sbb
inc
icebp
sub
icebp
or
je
loope
jmp
and
out
cs
sbb
rcpps
neg
je
sub
ret
add
lods
aam
hlt
not
rol
mov
xor
mov
mov
test
movs
sti
loopne
dec
gs
dec
sub
xchg
pop
mov
jbe
ja
ins
and
dec
dec
in
sbb
sbb
push
(bad)
es
mov
out
(bad)
pushf
jmp
add
xor
adc
imul
pop
sbb
les
(bad)
fstp
xlat
inc
jb
push
int3
movs
dec
call
js
(bad)
(bad)
int
cmp
cmp
loop
cmp
pop
in
lds
sbb
or
and
jo
and
sub
jl
scas
into
(bad)
fild
sbb
and
cmc
ret
nop
fsub
cmp
in
test
xor
jle
sbb
and
aam
push
fsub
sar
sbb
mov
xchg
pop
ja
cld
arpl
add
mov
cwde
inc
loop
cmc
jg
mov
add
cld
adc
ss
(bad)
lods
iret
xchg
retf
fcmovbe
dec
sar
mov
cmp
fisubr
jbe
mov
mov
scas
mov
jo
aas
xchg
dec
std
and
sbb
jl
mov
ss
mov
shl
inc
mov
sahf
div
into
cmc
mov
xchg
in
sbb
in
dec
adc
add
jl
daa
rcr
rol
pop
mov
aam
cmps
pop
scas
scas
lea
sbb
lock
inc
mov
push
push
dec
imul
or
inc
loope
add
adc
add
ja
ret
mov
mov
add
in
pusha
outs
jae
mov
sub
dec
mov
jmp
cwde
dec
fdivr
jg
out
in
into
retf
sbb
jmp
cli
jae
ja
fdivr
ret
add
retf
push
jne
cs
sahf
and
ins
jecxz
sti
jno
and
mov
imul
iret
fwait
cmp
in
mov
in
and
mov
fsubr
ja
mov
xchg
pop
mov
movs
sub
add
mov
int
stc
push
add
or
push
(bad)
frstor
cmp
jno
(bad)
xchg
out
mov
pop
ins
popa
rol
push
pop
mov
sar
inc
test
std
push
sbb
xchg
popf
sub
dec
xor
into
cmp
mov
imul
nop
popf
pushf
popf
dec
or
aaa
push
fmul
aas
repnz
jge
aaa
into
mov
mov
sub
cmp
pusha
sub
sub
mov
cmps
jle
fwait
into
jnp
dec
cdq
es
mov
ja
call
dec
daa
jmp
mov
fwait
daa
jl
rcr
outs
xor
cmp
pop
dec
push
fdiv
mov
mov
adc
jp
mov
nop
int
or
ins
push
shl
add
xor
cdq
jecxz
loopne
jge
fxch
fidiv
adc
pop
mov
adc
add
enter
jge
nop
xor
ins
pop
dec
sbb
sub
or
dec
mov
out
cli
cs
mov
sub
popf
mov
xchg
pop
lea
dec
sub
bswap
popa
mov
add
test
repnz
(bad)
movs
dec
mov
and
cmp
loope
pop
adc
test
xor
pop
stos
and
icebp
push
(bad)
ldmxcsr
loop
imul
or
rol
scas
jecxz
fcmove
stos
mov
ret
sub
jl
jmp
push
inc
xor
out
pop
jb
in
je
leave
pop
push
cmp
or
push
movs
push
dec
jne
pop
stos
mov
fcomip
inc
inc
jns
mov
pop
jmp
mov
push
es
in
clc
fcmove
push
xchg
out
(bad)
(bad)
out
(bad)
mov
int
jge
xor
jg
inc
retf
mov
fisttp
fisttp
pop
push
xchg
stc
leave
jmp
jae
(bad)
mov
jecxz
inc
lods
jnp
cmp
mov
stos
pusha
add
out
int
fadd
rol
lds
adc
mov
fidivr
push
ins
cs
dec
mov
lock
cmp
push
aad
mov
ds
or
mov
cli
enter
pop
cwde
cwde
adc
in
(bad)
mov
xchg
and
sbb
inc
dec
mov
(bad)
jno
out
iret
jg
xor
daa
xor
push
xor
cs
pusha
cli
aas
pop
push
jmp
iret
scas
sub
adc
mov
jge
popa
rcr
xor
pushf
xlat
call
and
add
cmp
dec
aam
fild
dec
sbb
xchg
shr
(bad)
ss
cmps
inc
mov
push
icebp
movs
call
jne
xlat
pop
xor
rcl
daa
mov
and
jp
pop
bound
ficom
ret
mov
imul
bound
jnp
xchg
ror
jae
hlt
bound
add
pushf
adc
add
mov
pop
sub
inc
and
cmps
add
xchg
ror
and
addr16
or
cmp
leave
inc
aaa
les
ss
jge
adc
in
jp
in
rcl
sub
clc
lds
int3
or
fmul
pop
cmp
jns
jae
push
icebp
div
xor
ins
in
sbb
pushf
pusha
xchg
sbb
sub
(bad)
mov
mov
cmp
mov
xor
repnz
and
dec
(bad)
scas
(bad)
xlat
mov
sbb
pop
inc
dec
mov
cmc
inc
cwde
jno
enter
retf
push
mov
jmp
outs
repnz
cld
pop
add
test
(bad)
jns
nop
lock
cmp
inc
mov
mov
add
xchg
mov
ror
push
mov
or
arpl
sub
xor
jle
fisttp
pop
dec
xchg
js
int
ficom
push
stos
mov
stos
imul
sbb
ja
aaa
push
mov
add
test
mov
cli
pop
mov
cmp
je
sbb
aas
scas
scas
(bad)
int
cmp
pop
lock
aam
imul
movs
dec
pop
mov
cmps
mov
xchg
lods
mov
or
mov
ret
stos
aaa
pop
jno
mov
in
loopne
dec
fiadd
mov
add
add
inc
cmp
aaa
dec
inc
xor
ins
into
stos
icebp
in
dec
daa
push
mov
sti
fs
cmps
imul
sahf
mov
loopne
mov
inc
push
lea
inc
cmps
jo
popa
jmp
std
fidiv
xor
inc
shl
loop
inc
adc
xchg
xchg
lods
into
arpl
retf
xor
add
mov
iret
mov
dec
cld
add
test
mov
inc
daa
arpl
jge
std
sub
mov
or
adc
scas
lock
cmp
movs
sub
ror
dec
pop
imul
and
cwde
pop
inc
cli
and
xchg
mov
inc
fisub
jo
pop
add
pop
push
cmps
out
mov
jmp
(bad)
out
or
js
(bad)
je
leave
push
mov
pusha
push
call
das
and
xor
and
pop
(bad)
mov
mov
sbb
adc
or
sub
inc
mov
clc
or
jbe
test
mov
inc
jmp
aad
sbb
push
cli
movs
mov
push
(bad)
pop
shr
sub
icebp
and
es
movs
cmps
mov
in
xchg
in
mov
push
dec
repnz
sar
lods
jecxz
and
out
imul
into
xlat
or
imul
mov
xchg
call
lods
imul
dec
sbb
cmps
sub
mov
mov
mov
(bad)
xchg
push
sub
cmp
and
push
sar
lods
retf
push
lds
popf
gs
pop
mov
test
adc
sar
inc
cwde
sub
and
push
out
popf
lock
mov
or
xchg
in
inc
lock
aaa
fcom
cdq
sbb
cmp
push
add
retf
inc
ficom
and
sbb
int3
sbb
cmc
test
pop
or
loope
push
repnz
xor
xor
or
pop
pushf
scas
or
ror
mov
push
inc
cmp
push
(bad)
fild
pusha
jns
nop
sub
sub
sbb
stos
sar
mov
adc
sub
sub
inc
out
scas
jmp
stos
in
shr
sub
push
cmps
das
hlt
sbb
jle
push
les
dec
cmp
retf
cwde
retf
dec
(bad)
xor
pop
push
fadd
mov
pusha
add
out
xor
add
add
mov
in
into
xchg
mov
cld
cmps
xlat
add
test
push
adc
adc
in
mov
imul
shl
or
pop
sar
jmp
mov
jmp
lods
loope
sti
cmp
ins
shl
daa
add
inc
jle
and
(bad)
push
je
push
cdq
fild
pop
ss
retf
mov
outs
dec
test
ret
repz
pop
inc
fwait
adc
call
int
pop
mov
mov
push
or
leave
ret
test
jb
pop
push
sub
mov
pop
sbb
lods
es
cmp
ja
stc
jmp
test
add
jnp
sar
sbb
loope
pop
jmp
mov
shl
scas
ins
inc
sub
mov
pop
xlat
mov
fcomp
aaa
inc
mov
xor
or
dec
mov
xchg
mov
jmp
in
jnp
and
jmp
fwait
lds
adc
xor
movs
sub
xchg
fs
pop
pop
sti
mov
mov
fdivr
sub
icebp
inc
sbb
sub
sbb
(bad)
in
adc
and
pand
sub
retf
inc
pop
xor
push
in
es
and
sbb
ins
xchg
(bad)
mov
cmp
(bad)
cld
dec
jg
aam
sub
int
add
mov
loopne
sub
and
shr
xor
aam
fdivr
call
mov
mov
sub
pop
(bad)
push
je
call
or
iret
dec
inc
sub
sbb
adc
test
add
push
in
cmp
push
pop
mov
enter
inc
jl
mov
sti
cmps
xchg
sbb
jmp
outs
jno
push
inc
das
xchg
xchg
xor
inc
ins
sub
icebp
in
lds
xchg
xor
(bad)
shl
sbb
add
jg
lods
stos
sbb
cmp
adc
shl
push
add
push
mov
jmp
dec
mov
xor
lds
inc
xchg
dec
xchg
push
jge
das
mov
cmp
inc
push
addr16
aad
loop
sbb
in
rcr
nop
push
adc
out
inc
and
cmp
dec
or
outs
sar
jo
loop
or
test
cmp
add
lock
es
cmc
and
fwait
mov
(bad)
frstor
and
addr16
fsubr
fs
mov
sub
(bad)
(bad)
scas
jge
hlt
clc
into
pop
mov
dec
cld
add
test
aam
mov
cdq
mov
or
call
cmp
addr16
popa
pusha
sub
(bad)
push
mov
scas
aad
icebp
iret
test
mov
jle
push
push
or
jbe
cdq
push
popf
mov
jl
cdq
mov
push
es
stc
mov
add
jle
cwde
add
sbb
sbb
shr
push
dec
jmp
aas
jmp
jecxz
(bad)
jb
loopne
sub
xor
call
xchg
and
sbb
test
pushf
xchg
xchg
aas
add
lods
movs
xchg
dec
(bad)
and
adc
mov
cmp
mov
mov
cmp
retf
aaa
xchg
das
nop
stc
cmps
stc
sahf
repnz
xchg
mov
cmp
ret
fdivr
mov
dec
dec
ins
mov
mov
xchg
or
adc
daa
mov
stos
(bad)
cld
sti
mov
ficomp
int
jmp
shl
bound
push
mov
daa
jmp
outs
fisub
nop
shl
push
(bad)
rol
and
and
fsubp
xchg
sbb
outs
pop
iret
scas
dec
mov
cmps
jne
inc
sub
(bad)
pusha
call
inc
rcr
jno
sub
xor
retf
(bad)
loope
sbb
xchg
cmp
cmc
dec
sbb
cmp
add
ror
dec
pop
jge
retf
and
js
inc
test
fwait
rol
je
mov
rdmsr
pop
jge
aaa
pop
jo
iret
xor
or
jb
repnz
inc
xchg
imul
mov
ins
pop
or
xor
mov
mov
push
mov
ret
lock
and
enter
ret
outs
push
loope
push
outs
and
pop
cli
push
lock
cli
rcr
cmps
fmul
cld
push
gs
add
push
mov
add
scas
sbb
mov
ja
cmps
jns
ds
aas
sbb
int3
loop
iret
lock
cmp
fiadd
and
(bad)
rcr
and
or
shl
loop
push
or
adc
mov
sbb
inc
movs
adc
adc
(bad)
out
pop
pop
outs
sub
xor
les
movs
jns
sub
into
aaa
clc
pop
pop
stc
das
imul
push
mov
dec
or
inc
push
nop
in
scas
stos
hlt
aas
jecxz
mov
jne
xchg
mov
cld
jbe
test
popf
push
aas
adc
loope
push
call
push
dec
xchg
mov
cmc
rcr
mov
cld
clc
inc
repnz
call
pop
xchg
sub
ins
mov
ja
push
xor
retf
lds
out
and
xlat
or
pop
ins
xor
pop
ret
add
cmps
pop
pop
xor
cmp
pop
xlat
test
adc
or
call
cdq
out
mov
and
mov
xor
jae
push
push
fst
push
dec
sbb
sub
retf
adc
dec
(bad)
sub
mov
or
enter
and
fs
fisub
mov
lods
(bad)
sub
aas
cld
das
jp
je
xor
fidiv
sbb
in
pushf
in
mov
push
and
fisub
jmp
inc
xor
sub
loope
mov
addr16
mov
mov
add
cmp
adc
push
test
popf
dec
xchg
retf
cdq
into
adc
jbe
mov
js
push
shl
leave
jmp
push
inc
push
xchg
cmp
fdiv
and
cmp
mov
and
aad
cs
in
in
pop
stc
aam
sub
aad
mov
mov
dec
test
xchg
mov
mov
leave
mov
or
rol
cmps
(bad)
gs
rcl
imul
push
mov
jmp
out
mov
lahf
not
int
pop
push
or
aad
push
(bad)
fwait
test
add
cmc
loopne
sub
stos
pop
das
mov
jns
pushf
jb
test
jg
dec
xor
sbb
and
dec
into
xchg
test
cmp
arpl
int3
push
inc
loop
jmp
or
dec
add
mov
or
pop
mov
lods
call
adc
inc
adc
sub
gs
sub
cmp
test
pop
xchg
ret
stos
xchg
cld
inc
pop
add
jmp
cmp
cmp
cmc
pop
push
out
jg
dec
jae
inc
dec
mov
iret
mov
or
sbb
loop
sbb
add
fnstcw
mov
stc
stc
imul
scas
sti
fs
or
push
mov
xchg
mov
xchg
iret
dec
and
fcomp
addr16
mov
in
call
rol
loop
inc
mov
loopne
inc
dec
pusha
sbb
mov
(bad)
movs
fimul
out
(bad)
xor
dec
add
rcr
xor
(bad)
ja
in
or
mov
pop
xor
pop
jp
rcr
scas
scas
(bad)
or
sub
test
loope
cmp
add
mov
in
sub
push
je
aam
jmp
pop
fwait
sub
dec
xor
and
addr16
outs
mov
mov
push
jbe
loop
cld
jae
mov
push
or
mov
test
pop
repnz
pop
push
and
cdq
xchg
ss
call
mov
adc
lea
inc
add
jb
inc
push
xchg
jne
or
and
sub
mov
and
inc
jo
jmp
scas
adc
push
out
add
mov
push
iret
push
xchg
fnsave
repz
xchg
aam
ins
pop
sbb
dec
sbb
js
lods
popf
pop
mov
add
xchg
dec
push
cwde
jnp
pop
test
or
out
bswap
pop
pop
(bad)
mov
xor
inc
pop
mov
rcl
pop
xchg
call
dec
push
inc
pop
cmc
(bad)
scas
cs
mov
sub
ja
retf
mov
mov
pop
or
and
sbb
shl
aas
xor
sbb
add
div
ja
(bad)
jmp
(bad)
mov
inc
sbb
arpl
jb
por
popa
mov
je
and
dec
jecxz
dec
adc
jne
mov
dec
pop
enter
or
inc
sar
aad
mov
sub
inc
and
pop
lds
lahf
cmp
sub
ror
xchg
pop
sub
jns
das
rol
je
shl
lock
mov
out
adc
mov
addr16
add
jns
jbe
sub
fldcw
sbb
push
sub
pop
jle
ds
(bad)
(bad)
in
xor
mov
push
lahf
mov
xchg
in
push
adc
cmps
inc
aad
fwait
xchg
fidiv
repnz
(bad)
push
in
add
cli
adc
ficomp
xor
ins
adc
xor
fistp
ins
cmp
cwd
xlat
js
mov
sahf
shl
lock
and
jl
scas
(bad)
fwait
sbb
pop
test
adc
daa
ins
cs
popf
gs
sub
arpl
lods
(bad)
pusha
daa
aam
shr
jge
(bad)
xor
(bad)
fcomp
stos
je
push
out
mov
cmp
mov
rcl
gs
repz
stos
mov
(bad)
data16
icebp
adc
jl
lea
loope
mov
mov
bound
cmp
mov
(bad)
andnps
dec
pushf
sti
pop
aad
pop
cmovo
sbb
rcr
leave
cmp
adc
mov
loop
and
ds
push
cmc
retf
push
cmps
ins
pop
pusha
loopne
sbb
sub
movs
int
jmp
jl
jge
dec
cmp
rol
or
push
jo
pop
xchg
and
jl
add
cmc
sub
pusha
sahf
cmps
repnz
xor
fcom
jmp
jnp
jnp
mov
inc
test
sub
ror
inc
adc
xchg
sbb
adc
mov
mov
retf
fidivr
jb
loopne
mov
cmp
mov
xchg
ret
mov
(bad)
adc
loopne
imul
ja
out
mov
idiv
push
mov
in
jp
(bad)
sbb
push
jp
popa
(bad)
adc
xor
push
sub
mov
and
sub
or
ss
fwait
adc
pop
inc
lock
in
test
out
sub
pop
inc
xor
js
pop
int3
add
lods
cmp
stos
das
xor
ds
mov
jp
out
sbb
ret
fcmovne
das
cmp
fdivp
push
dec
aad
stos
add
ds
cmc
pop
ret
test
pop
sub
fdiv
and
pop
jo
inc
mov
mov
(bad)
loopne
call
aam
xor
pop
push
retf
fwait
jl
sti
loop
(bad)
xor
cmp
cmp
sub
mov
xchg
(bad)
pushf
sub
fcom
mov
push
pop
pop
(bad)
mulps
and
dec
stos
ret
adc
adc
out
into
sahf
jge
out
movs
pusha
dec
js
mov
pop
repnz
outs
das
sub
ret
fdivr
stc
inc
cmps
lods
jp
retf
hlt
push
pop
mov
or
inc
call
je
les
mov
xor
or
cmp
int3
mov
add
jg
fild
sub
adc
mov
inc
xchg
mov
cwde
jne
dec
dec
aad
jl
test
sub
pop
xchg
icebp
jl
jbe
(bad)
push
mov
xchg
xchg
pop
xlat
push
stc
lock
out
xchg
or
pop
or
cmp
mov
push
(bad)
jge
jg
test
ins
and
push
and
push
aaa
and
jp
sub
repnz
pop
fwait
int
sahf
mov
cmp
fwait
jo
mov
or
xor
data16
mov
xchg
lahf
ficom
les
add
jle
jge
and
inc
adc
jb
dec
sbb
sbb
jmp
dec
out
jg
inc
dec
cli
shl
jo
xor
xor
pop
sub
cmps
jb
out
dec
retf
lods
push
mov
stc
mov
xchg
mov
(bad)
loop
or
cmp
or
push
pop
mov
scas
mov
leave
push
ficomp
ins
lds
in
or
push
out
mov
cs
ret
jnp
push
rcl
repz
mov
and
mov
cli
stos
(bad)
arpl
test
(bad)
nop
push
lods
or
bound
ficomp
rcr
pop
jns
loopne
cwde
sbb
retf
mov
cdq
out
lods
jb
sar
cmp
in
(bad)
retf
cmp
clc
push
jnp
mov
push
xchg
out
hlt
rcr
mov
div
pop
inc
and
add
pop
mov
mov
pop
mov
arpl
cmp
idiv
pop
(bad)
sti
retf
shl
push
les
xor
leave
imul
push
sti
jmp
shl
or
stos
mov
xchg
push
xchg
xchg
inc
aam
mov
push
loope
aaa
fdivrp
loop
stc
nop
jge
xchg
loopne
add
je
test
outs
xchg
inc
pop
adc
imul
cwde
cmp
jbe
maskmovq
not
xor
lods
jb
fdiv
xchg
mov
mov
mov
sub
in
xor
push
rcr
fnstsw
push
retf
daa
pop
push
out
xor
inc
sub
fdiv
cld
push
adc
aad
call
ret
popa
retf
or
pop
cwde
lea
or
sbb
arpl
dec
(bad)
stc
xchg
cmp
fdiv
xchg
add
mov
cmp
mov
frstor
dec
sbb
retf
and
cmp
imul
jl
cmp
push
std
div
ret
dec
fimul
xor
mov
scas
das
and
sub
cli
lods
iret
push
sbb
jbe
pop
inc
dec
sub
inc
test
aas
pusha
movs
in
in
sub
fcmovnb
ret
sbb
aaa
rcl
scas
push
hlt
pop
bound
stos
mov
jnp
ds
fidiv
ret
sub
fstp
dec
adc
inc
fcom
aam
shl
push
stc
push
pop
jmp
in
mov
sbb
mov
lea
add
push
cdq
leave
enter
fstp
or
outs
lock
xor
out
fst
mov
add
arpl
inc
pop
test
mov
sahf
adc
sbb
(bad)
push
pop
ret
call
ins
dec
mov
shl
movs
pop
out
cmp
nop
int3
pop
(bad)
inc
mov
fistp
mov
dec
mov
and
mov
inc
xchg
iret
push
jp
inc
arpl
ss
or
sub
add
lds
aam
popf
mov
fcmovnu
xor
sbb
rcl
jne
cmps
ds
pop
das
dec
jecxz
mov
xor
std
xlat
ret
xchg
lods
jge
fdivr
ins
std
mov
xor
data16
sub
(bad)
enter
(bad)
mov
jae
xor
sub
leave
jmp
jge
daa
fadd
push
push
pop
das
xor
jno
adc
xor
dec
sbb
popa
sub
mov
xchg
sub
popf
loopne
stos
nop
sahf
fldcw
ins
cmp
or
not
xchg
(bad)
adc
add
repz
or
daa
pop
adc
add
int
or
xchg
cmp
xor
mov
dec
dec
ret
jne
cmps
cmp
sub
les
ror
push
sub
jp
xor
mov
call
mov
int3
push
(bad)
aam
stos
fwait
iret
stos
daa
dec
std
nop
jp
fisub
clc
cmps
loop
and
inc
rol
sti
dec
xchg
pop
lods
mov
push
push
sub
mov
das
xor
out
mov
mov
mov
push
cs
sbb
les
pop
mov
sub
lahf
into
scas
pop
push
or
pop
lahf
pop
loope
xchg
add
sub
andnps
or
(bad)
scas
adc
sti
in
push
cmp
not
clc
pop
cwde
dec
cmp
mov
dec
int
aas
push
gs
jecxz
int
sub
push
sub
cmc
cdq
pop
mov
adc
icebp
mov
push
and
mov
pop
add
(bad)
pop
xor
push
call
repz
jnp
sbb
push
imul
mov
call
(bad)
aam
movs
sbb
sahf
(bad)
hlt
sahf
in
dec
add
adc
in
aas
aam
imul
mov
pushf
or
pop
call
lods
or
push
movs
psllw
inc
jmp
mov
pop
aam
loop
cmovbe
popf
push
jns
in
pusha
in
xchg
lods
daa
rcl
pop
xchg
jb
mov
shl
call
movs
sahf
mov
pop
ret
inc
pop
call
aam
and
mov
imul
sbb
cmp
add
jmp
cmp
leave
xchg
jmp
fst
xchg
pop
(bad)
test
outs
add
adc
jmp
adc
neg
xor
aaa
movs
into
inc
lods
pop
push
and
push
call
retf
aaa
(bad)
push
icebp
xor
iret
jne
mov
aaa
fldcw
jbe
(bad)
std
mov
fstp
not
outs
imul
jns
dec
mov
mov
push
js
test
mov
cli
mov
dec
and
xor
dec
and
or
mov
sbb
add
push
repz
push
out
ins
dec
dec
cdq
mov
jo
pop
jo
pop
xor
jno
dec
mov
inc
rcl
dec
sbb
xchg
mov
pop
in
mov
jns
adc
jecxz
in
lock
les
mov
dec
sar
jo
movs
jle
mov
jecxz
inc
mov
in
jg
call
je
cmp
lock
scas
xchg
je
pop
(bad)
cmc
jecxz
adc
jb
or
gs
pop
inc
jb
shl
enter
mov
jnp
sub
mov
call
pushf
mov
enter
aad
loope
enter
cmp
into
and
icebp
enter
jo
push
dec
jno
xor
cmp
iret
jo
sub
dec
fisub
nop
pop
push
out
inc
inc
ds
shl
arpl
sahf
xor
pop
pop
mov
jmp
push
mov
jbe
inc
call
pusha
out
stc
arpl
clc
ret
movs
inc
int3
mov
cmp
mov
popa
push
leave
mov
scas
pushf
push
push
mov
ja
in
(bad)
pop
inc
jnp
sub
ins
and
push
(bad)
test
ja
cmp
inc
in
bound
mov
mov
outs
adc
loop
mov
nop
mov
inc
add
dec
xor
(bad)
rcr
add
dec
push
movs
xor
dec
dec
inc
or
shl
cmp
sub
add
dec
nop
jp
aaa
mov
jmp
jnp
loope
jnp
test
sub
mov
mov
mov
and
sar
mov
add
jl
or
imul
sbb
pop
push
int3
test
repz
add
outs
dec
sub
xor
sbb
ins
out
stc
icebp
inc
mov
jge
sub
and
jecxz
adc
call
adc
mov
fsubr
mov
sub
pop
or
xchg
mov
shl
adc
cmp
xor
(bad)
or
add
jl
adc
in
push
sub
or
adc
adc
and
mov
xchg
cmps
mov
stos
mov
es
fnstenv
stos
inc
repz
cs
pop
pop
sahf
cmps
stos
sub
pop
inc
dec
push
push
jp
xor
add
adc
inc
mov
ss
mov
cmp
sub
int
pop
add
jnp
out
jge
jbe
dec
mov
ret
aas
pop
mov
push
pushf
pushf
fisttp
stos
inc
inc
stos
and
pop
and
ins
cli
bound
dec
dec
add
mov
in
push
inc
push
mov
or
dec
jns
push
mov
fild
mov
adc
outs
mov
inc
inc
data16
imul
mov
fadd
jle
popa
pop
mov
lock
mov
addr16
icebp
mov
test
jecxz
and
add
inc
ins
jmp
or
mov
add
(bad)
push
adc
les
clts
mov
mov
push
pop
sub
mov
push
jbe
dec
in
jp
jecxz
ret
aam
mov
sbb
mov
push
sbb
or
xchg
dec
xor
add
rcr
pop
inc
mov
fbstp
jle
mov
add
cmps
fldenv
inc
sbb
jg
(bad)
dec
(bad)
scas
lods
cmp
cs
push
adc
jmp
icebp
inc
push
xchg
push
push
pop
adc
ret
outs
ret
pop
mov
jo
ins
retf
jmp
dec
pop
aad
cli
sub
int3
xchg
inc
cmps
xor
stc
jle
mov
arpl
popa
int
es
rcr
pinsrw
call
mov
lea
add
pop
xchg
sub
retf
jg
nop
add
mov
cmp
lock
(bad)
scas
xchg
(bad)
repnz
and
xchg
je
inc
test
out
js
mov
les
pop
add
in
and
jb
retf
sbb
fs
inc
ins
cmp
or
add
sub
rol
inc
or
dec
or
loopne
aaa
data16
dec
test
(bad)
adc
xor
and
cwde
xchg
cmp
dec
add
mov
cmp
ins
call
mov
rcr
cwde
clc
clc
adc
jmp
pop
jnp
imul
sbb
lea
ret
add
pushf
jb
es
jnp
imul
in
or
xchg
sub
sti
inc
lods
lods
stc
xchg
pop
xchg
nop
adc
xor
inc
fsub
dec
jmp
(bad)
aas
imul
pop
jno
ret
push
xchg
and
mov
popf
dec
add
loopne
rcl
cmps
add
ja
mov
pop
addr16
jb
ins
ds
les
mov
test
(bad)
sbb
cdq
div
outs
ja
add
jge
dec
push
mov
push
arpl
bound
ficomp
dec
jle
call
dec
xor
leave
int
fsub
aad
cmc
ret
iret
mov
retf
xor
outs
cmp
mov
xchg
imul
scas
sub
sbb
jle
add
mov
pop
adc
sbb
shr
mov
(bad)
shl
bound
jge
lahf
sub
aam
adc
dec
stc
xchg
adc
push
ret
and
(bad)
jmp
jnp
xchg
or
mov
popa
lock
and
int3
shl
je
adc
fisttp
push
movs
inc
sub
add
mov
imul
or
out
cli
std
add
sub
mov
jmp
mov
ficom
retf
inc
cmp
pop
loop
retf
dec
adc
jge
push
push
pop
jo
movs
aad
sub
loopne
dec
das
aas
sbb
hlt
cld
mov
mov
imul
jl
(bad)
push
(bad)
out
addr16
jecxz
dec
dec
lahf
and
loop
jb
mov
push
lods
scas
out
and
jmp
and
int
push
addr16
(bad)
xor
adc
xchg
mov
sub
retf
icebp
jno
or
sub
mov
jno
push
jmp
dec
les
or
fnclex
in
pmaddwd
mov
lds
push
les
das
sar
sbb
call
mov
ins
push
repnz
fild
outs
or
mov
sub
iret
jne
mov
xor
push
jae
pop
into
aam
push
jo
mov
cld
imul
sbb
mov
fwait
adc
xchg
cvtps2pi
fadd
cmc
cmp
adc
in
sub
mov
jg
lods
js
and
add
jg
enter
jge
mov
int3
jp
mov
or
sbb
ja
(bad)
iret
xor
pop
push
test
mov
mov
lods
sbb
mov
stos
jmp
push
push
aas
in
push
jnp
int
sub
cwde
gs
icebp
jns
push
ds
aas
fwait
(bad)
repz
jne
adc
fnstcw
and
loopne
add
inc
mov
sbb
xor
ins
inc
nop
or
das
loopne
dec
jno
aas
movs
mov
xchg
dec
mov
leave
movs
in
dec
cmp
add
cmp
movs
pop
(bad)
jle
shr
ins
lds
jnp
sbb
or
fdivr
movs
xor
mov
or
pop
or
pop
(bad)
mov
das
push
lods
xor
jl
out
outs
std
cs
std
aaa
cmps
es
jmp
sub
or
xchg
push
mov
(bad)
xchg
fstp
xor
or
ret
ja
std
in
out
sbb
das
outs
jae
push
loope
(bad)
stos
adc
xor
xchg
or
xchg
fwait
pop
in
push
xchg
mov
jb
stc
mov
lea
mov
enter
fwait
sub
les
push
adc
xchg
out
xor
jl
sti
sti
fld
jns
mov
dec
mov
and
fdivr
out
ret
jecxz
mov
fnstsw
xchg
cmp
mov
outs
lods
pop
and
inc
mov
es
sub
jl
mov
xor
inc
mov
adc
pop
jo
aas
inc
cs
pop
xor
ja
leave
xor
and
push
adc
stc
or
dec
xchg
bound
repz
jbe
mov
js
sub
mov
retf
dec
and
daa
mov
gs
xchg
pushf
pop
ins
mov
dec
inc
hlt
in
push
repnz
cmc
xchg
jae
sbb
jnp
or
push
xor
sbb
dec
inc
call
add
jnp
outs
sbb
cmps
pop
jl
push
ret
pushf
dec
clc
addr16
inc
and
mov
jmp
imul
xor
add
lahf
(bad)
(bad)
sub
jno
adc
inc
imul
push
dec
dec
add
rcr
scas
fidivr
pop
fistp
push
out
mov
mov
imul
pusha
imul
xchg
and
adc
pop
ret
not
mov
jp
jns
mov
in
cmps
xchg
shl
out
mov
adc
and
cmp
or
cdq
(bad)
pushf
fcom
out
aad
jns
cmc
pop
push
scas
pop
fimul
xchg
std
push
lods
mov
xchg
sub
adc
and
sbb
xchg
js
or
push
jne
rol
jp
or
in
jne
mov
or
pop
jge
clc
xor
cwde
ins
xchg
xchg
push
push
in
xor
sub
add
stos
stos
loop
dec
add
add
fsubr
ins
sub
dec
je
or
sub
cmp
dec
fimul
jmp
sbb
or
adc
push
sbb
cld
mov
inc
xchg
cdq
pop
sbb
pop
sar
dec
lods
pop
jg
retf
in
add
sbb
add
cld
pop
shr
retf
xchg
push
mov
mov
lods
fnstenv
gs
dec
adc
scas
and
sub
fsub
rcl
xor
test
cld
ins
sti
nop
dec
push
mov
xchg
cmp
push
dec
inc
mov
daa
movs
test
sub
ror
jmp
jl
cmp
cs
push
or
mov
ja
iret
xor
test
pop
inc
int
repnz
push
mov
outs
mov
cmp
dec
inc
dec
jno
les
adc
hlt
iret
jmp
test
pop
repz
repnz
sub
outs
(bad)
popa
clc
add
xlat
or
ins
jp
mov
inc
push
push
stos
mov
adc
push
(bad)
outs
movs
add
jge
fwait
data16
push
jp
dec
xchg
jmp
fcmovu
stos
adc
jle
sbb
(bad)
push
idiv
lea
aaa
cmc
inc
fwait
inc
ss
aad
push
popf
add
push
jp
sar
ss
and
adc
sbb
xchg
out
cmc
lods
mov
pop
rcr
and
pop
mov
cmp
adc
pop
repnz
jbe
mov
retf
dec
iret
jb
stos
repnz
and
ficomp
scas
jae
neg
repnz
jmp
aaa
shr
or
jns
sbb
jo
or
push
push
add
adc
jmp
fild
ds
punpckhdq
sbb
inc
xor
outs
not
movs
cmps
sbb
mov
xor
ror
rol
inc
push
pop
inc
ins
jbe
pop
cmp
push
shl
or
sbb
xchg
push
lock
imul
(bad)
cdq
imul
pop
(bad)
pop
pop
fldl2t
mov
call
mov
ja
inc
mov
or
sahf
fadd
js
push
push
push
loopne
cli
scas
xor
inc
add
mov
mov
scas
and
shl
jmp
jae
sub
jns
aad
in
adc
stos
dec
ror
pop
jb
push
push
aaa
(bad)
je
ret
movs
(bad)
pop
xchg
stos
daa
repz
and
aad
(bad)
int
mov
inc
mov
or
ins
mov
out
mov
inc
in
add
or
adc
push
pop
mov
push
sbb
mov
test
lock
rcr
pusha
enter
mov
cmps
sub
lahf
lods
mov
mov
jae
aam
push
jno
imul
push
sbb
inc
pop
jmp
mov
jb
pop
leave
cld
loop
movs
clc
(bad)
jo
mov
cmps
stos
add
inc
loop
out
lds
shl
imul
mov
adc
das
(bad)
push
add
sahf
ins
mov
ins
in
push
int
mov
gs
(bad)
in
jmp
jns
fldenv
push
sbb
out
xchg
mov
pop
or
ins
push
lock
es
sbb
mov
je
int
mov
add
push
test
xor
loope
ret
ret
or
mov
jmp
inc
cs
and
jl
mov
icebp
sbb
test
ror
inc
cmps
inc
add
xchg
and
jp
mov
pop
push
sub
jmp
cs
pop
jmp
lea
cmps
xchg
or
inc
mov
cld
xchg
sahf
push
pop
sbb
(bad)
cmp
cmc
or
cld
(bad)
cmp
xchg
(bad)
jnp
mov
iret
or
lea
cmps
inc
aas
push
adc
in
pop
xchg
pop
push
std
imul
fnstenv
mov
movs
and
pop
shl
cmc
and
sbb
fistp
push
or
sbb
adc
mov
popf
add
push
test
sti
mov
xchg
or
ret
dec
out
(bad)
pop
mov
pushf
cld
stc
rcl
jnp
mov
mov
ins
push
cmp
add
popa
xchg
jo
icebp
dec
addr16
jns
cdq
imul
or
aaa
or
sbb
xor
jmp
dec
sbb
push
or
xlat
cwde
pop
(bad)
or
pop
push
dec
add
adc
add
icebp
pop
cli
or
dec
divps
dec
loopne
push
scas
out
cmp
nop
push
jmp
mov
and
outs
or
cmps
push
stos
inc
aaa
dec
jb
jmp
jmp
sahf
(bad)
xchg
mov
mov
mov
jmp
push
jnp
add
dec
imul
fidiv
xchg
out
xchg
mov
mov
sbb
inc
xchg
cld
mov
inc
aam
sti
fidiv
jns
out
jo
rcl
ins
mov
out
hlt
adc
hlt
std
fucomip
movs
push
pop
in
iret
or
aaa
rcr
ds
or
jmp
add
ror
fisub
arpl
stos
xchg
fdiv
inc
fwait
ss
push
sub
mov
xor
dec
loope
lods
daa
loop
xor
xchg
stc
jne
add
cmp
popa
mov
fmul
push
popa
stos
(bad)
inc
(bad)
fist
inc
xor
adc
fs
sti
push
mov
(bad)
ficom
xchg
icebp
xchg
retf
dec
push
or
stos
jl
aad
pop
ja
push
stc
cmps
add
popa
cs
fbld
mov
frstor
push
int3
push
sbb
es
sub
out
mov
and
jbe
push
push
push
(bad)
fiadd
jb
xchg
fwait
cmp
dec
cmp
mov
ins
mov
mov
pop
in
stos
and
jmp
or
fldenv
xor
out
push
add
mov
dec
cli
inc
jmp
(bad)
in
icebp
iret
test
or
or
sti
aaa
(bad)
jl
js
sbb
sbb
dec
or
jo
or
dec
dec
outs
in
and
ret
fmulp
rol
shl
push
in
loopne
inc
(bad)
push
mov
icebp
dec
inc
jg
push
dec
xchg
test
pop
push
test
mov
cmp
aam
adc
inc
cld
add
mov
pop
stos
int
stc
enter
push
add
mov
iret
aad
sysret
sub
inc
jne
retf
loopne
out
cwde
pop
push
pop
adc
sbb
(bad)
in
lea
jmp
cmp
scas
cmps
scas
pushw
cmp
pop
sbb
add
movs
mov
mov
test
repnz
lea
(bad)
cmp
mov
ret
or
push
xchg
jmp
jne
inc
inc
xchg
clc
pop
pop
cmp
pop
mov
cdq
hlt
lock
adc
sub
xchg
test
sbb
pop
xlat
popf
cmp
fmul
dec
int
popa
fcmovnb
cs
fs
mov
loope
cmps
pop
js
jb
cmc
hlt
xor
dec
mul
movs
popa
sub
cmps
in
push
adc
or
jae
jmp
add
lods
cmp
push
fsubp
push
shl
sbb
sbb
ins
clc
icebp
adc
mov
stc
pmullw
sub
ins
pop
xlat
in
aam
jmp
add
add
int
sub
outs
scas
arpl
imul
sub
or
call
adc
neg
pushf
out
ss
cmp
adc
pop
xchg
test
cli
push
mov
inc
dec
mov
hlt
scas
add
fwait
aaa
and
adc
inc
sbb
sbb
cwde
mov
push
repz
(bad)
add
pusha
mov
adc
adc
xchg
loop
mov
(bad)
cmp
ds
sub
push
popa
xor
and
and
adc
popa
loop
pop
stc
mov
adc
cdq
xchg
fisubr
data16
xchg
stos
js
(bad)
repnz
xchg
addr16
rcl
outs
call
xor
lods
out
inc
jp
inc
pop
push
paddw
inc
iret
aas
sub
jge
aaa
fwait
xchg
adc
fiadd
cmps
in
(bad)
lahf
lahf
test
aad
mov
or
test
call
test
mov
ror
or
ret
cmp
repnz
pop
data16
into
mov
adc
mov
imul
test
add
stc
or
retf
add
cmp
inc
lods
outs
test
je
xor
add
mov
or
or
(bad)
cld
or
pop
call
jnp
jo
pop
push
jle
sub
addr16
imul
and
or
lahf
lods
xor
cmc
sti
pop
js
aam
cmp
popa
push
loope
adc
pop
xor
mov
xor
mov
cld
cld
rcr
cmp
out
push
test
je
add
add
mov
ret
popf
aad
mov
popa
test
mov
jg
push
and
push
cmp
into
movs
push
movs
sub
(bad)
stos
out
(bad)
clc
idiv
jge
retf
test
push
fistp
sbb
stos
fmul
push
sbb
xor
mov
dec
aas
mov
xor
sahf
std
pop
jae
mov
sbb
add
cmp
push
pop
int3
lds
(bad)
cmp
mov
push
cld
fstp
push
sbb
mov
pop
inc
dec
add
aas
in
dec
xor
inc
aas
int
call
mov
inc
mov
push
push
adc
test
clc
mov
scas
xchg
idiv
out
mov
loop
dec
dec
xchg
cli
pop
pop
loopne
and
hlt
inc
pop
adc
inc
xchg
or
sub
ins
push
mov
call
and
sbb
mov
add
aad
inc
adc
aam
pushf
bound
(bad)
push
pop
mov
cli
pop
call
xchg
inc
je
into
(bad)
pop
sbb
lock
bound
adc
xchg
das
jg
clc
aam
dec
loopne
nop
sbb
pusha
fsub
idiv
js
js
fistp
and
div
in
retf
enter
aas
cmp
jns
mov
in
loop
or
xor
cmp
mov
inc
adc
cmp
or
adc
xchg
int
into
hlt
(bad)
out
mov
cwde
les
sub
cld
inc
stos
jo
sbb
mov
pop
sub
push
(bad)
bound
call
fsub
(bad)
sub
out
xor
cmp
inc
aaa
pop
leave
cmp
rol
js
sar
pop
pop
or
popa
mov
sub
mov
push
cmp
cdq
ds
jne
mov
push
test
or
inc
repnz
js
sbb
shr
push
pop
cmp
inc
xchg
push
test
mov
test
mov
push
fs
es
cmc
pop
pushf
jb
aaa
jge
ret
xor
mov
cdq
(bad)
stc
test
(bad)
and
mov
test
int
pop
gs
add
pop
aam
div
push
and
stos
mov
retf
dec
jmp
jns
aam
dec
mov
stc
sub
sbb
(bad)
cs
pop
inc
call
push
call
retf
xchg
movs
inc
mov
add
clc
push
xchg
out
lock
js
sub
pop
ins
fcomp
mov
fisubr
adc
dec
add
push
cmp
or
rol
adc
cs
xor
mov
jae
sti
jne
push
pop
arpl
hlt
or
dec
add
pop
mov
inc
aad
fadd
push
mov
loop
inc
jp
stos
lods
push
inc
mov
dec
(bad)
mov
or
sbb
sub
mov
jbe
int3
hlt
mov
push
mov
dec
fisttp
shl
jecxz
adc
dec
mov
dec
xor
int3
add
push
dec
xor
inc
jnp
jno
sbb
add
mov
dec
es
xchg
xchg
(bad)
mov
fwait
in
mov
popa
mov
jb
push
movs
mov
loop
scas
dec
mov
inc
daa
test
repnz
xor
fnstsw
xchg
xlat
cmps
mov
cwde
mov
xor
jne
ret
in
cmps
mov
sbb
xchg
push
enter
jle
mov
sub
pushf
jo
xor
popa
xchg
xor
sbb
inc
sbb
repz
xor
mov
into
mov
and
and
cmps
push
mov
call
mov
cmp
cld
call
and
mov
aad
sbb
push
test
fisub
mov
movs
sti
ds
jae
lods
mov
fisubr
stc
push
mov
imul
ss
out
dec
js
sub
inc
stos
jle
and
outs
scas
lock
loopne
dec
xchg
stos
arpl
aam
imul
sahf
adc
ret
dec
subps
call
xchg
inc
pop
pop
out
rcr
cmps
or
pop
jne
inc
in
adc
mov
leave
les
pop
(bad)
stc
mov
retf
out
pop
stos
popa
pop
push
cmps
clc
xchg
pop
lea
out
jle
adc
pop
jecxz
mov
dec
cmp
sub
jb
jae
xchg
xchg
ss
cmps
lea
push
fs
mov
pop
in
or
adc
and
jnp
cmp
int3
jmp
imul
push
and
call
xor
xchg
mov
dec
xor
out
mov
scas
js
or
cmp
pop
jmp
shl
lea
or
sub
or
in
aad
add
sti
dec
in
jl
xchg
sub
inc
arpl
xchg
jmp
test
fdiv
mov
adc
mov
pop
sub
aas
mov
test
push
stos
mov
sub
add
lods
cmp
xchg
(bad)
pop
jl
add
dec
inc
or
mov
ins
(bad)
rcl
and
push
push
stos
daa
xchg
add
call
push
push
mov
mov
or
xlat
push
xor
faddp
imul
icebp
std
jg
sbb
mov
adc
mov
jnp
mov
mov
inc
add
popa
ins
jne
sbb
dec
inc
in
xor
popf
xchg
jg
(bad)
fs
(bad)
push
fdecstp
popf
mov
fs
test
mov
push
cmp
adc
jp
ja
mov
and
and
ins
stos
and
pop
push
sbb
daa
add
dec
je
push
xor
popf
call
xor
xor
repnz
jnp
or
(bad)
leave
inc
xchg
push
xor
stos
lds
popf
xchg
jmp
out
jmp
push
xlat
out
pop
dec
xor
daa
push
add
push
dec
ret
(bad)
dec
push
pop
push
in
xchg
mov
push
(bad)
int
push
scas
mov
jecxz
or
and
mov
lahf
mov
inc
sbb
inc
sub
test
pushf
sbb
ins
popf
pop
les
ret
ficomp
pop
xor
cmp
mov
mov
dec
mov
loope
mov
loop
aas
ret
rol
add
sbb
inc
ins
cli
xor
push
add
cmp
mov
jg
inc
push
(bad)
xchg
xchg
xchg
jbe
lahf
sub
test
mov
shr
add
dec
add
dec
mov
je
mov
and
shl
push
xchg
sahf
test
cdq
ret
mov
stos
xchg
js
mov
adc
cmp
sub
icebp
das
xor
dec
fcomip
fisttp
fs
adc
xor
rcr
sar
pop
inc
or
mov
push
push
adc
rcl
pop
mov
(bad)
mov
mov
mov
stos
popf
jns
outs
push
inc
xchg
xchg
(bad)
ins
sub
daa
dec
jl
in
push
xor
addr16
rol
jmp
xor
dec
sub
push
or
inc
xchg
and
stos
or
call
lahf
mov
in
pop
pop
xor
or
mov
loope
xchg
xor
scas
bound
ja
(bad)
cwde
ja
dec
aad
pop
(bad)
stc
cli
xchg
mov
das
and
jno
dec
scas
adc
das
lods
(bad)
and
and
mov
jp
mov
loop
adc
outs
retf
add
mov
stos
nop
push
ins
icebp
std
jmp
sbb
loopne
in
shl
imul
pop
fistp
add
mul
movs
cmp
pop
iret
cmp
sbb
jp
mov
les
xor
cmp
fsubrp
retf
push
cdq
mov
jo
jns
inc
dec
jmp
pop
pop
ja
pop
dec
int
lahf
mov
retf
inc
(bad)
jmp
cli
push
fistp
lds
jbe
jbe
cmps
mov
mov
popa
mov
daa
movs
xchg
lea
fs
shl
add
cmc
xchg
inc
jl
int
pop
lock
jle
pop
jno
jne
sbb
add
sub
sbb
leave
mov
retf
xchg
jno
scas
faddp
pop
xor
cmp
lods
push
cmp
jo
in
in
inc
aam
cmps
jle
sbb
jmp
and
daa
push
xor
push
mov
add
pop
sbb
jb
pop
jne
inc
test
inc
cmp
mov
push
cmc
jle
test
lea
cdq
dec
ins
mov
jg
fsubr
inc
rcr
movs
inc
cvttps2pi
cmp
fiadd
ins
jbe
dec
jns
cmps
aam
(bad)
cmc
mov
pop
ret
cmp
sbb
sub
mov
inc
cmp
aam
xchg
loop
xchg
rep
sbb
shl
add
xor
xchg
iret
and
pop
adc
and
push
mov
mov
int3
sar
push
dec
push
or
fmulp
(bad)
sbb
and
pop
scas
rcr
inc
jmp
repz
mov
jb
and
addr16
fs
mov
adc
outs
lods
aas
js
push
inc
lea
sar
stos
stos
ins
adc
in
mov
sub
call
xchg
xor
mov
sub
push
(bad)
iret
add
sub
imul
mov
(bad)
cmp
ret
mov
xchg
xchg
aad
jmp
pop
sbb
add
daa
jbe
jg
dec
icebp
pushw
push
out
mov
mul
call
pushf
dec
jmp
jnp
fwait
mov
sub
jo
and
push
pop
sbb
xor
rcl
mov
pop
inc
cli
mov
xlat
retf
out
in
stos
movs
ins
push
jl
mov
rol
enter
dec
ficomp
add
push
enter
add
mov
inc
jne
mov
cmp
pop
adc
das
cmp
push
shr
nop
ds
push
sub
lods
push
pop
cmp
lea
in
aad
les
adc
inc
ret
into
rol
xlat
push
ss
sub
cs
pop
mov
or
out
xchg
test
and
je
test
pop
dec
xor
lfs
test
pop
out
sbb
push
aad
push
lods
scas
aas
mov
inc
jg
jle
sub
inc
idiv
sbb
out
jecxz
js
cs
repz
push
aas
jecxz
push
dec
xchg
push
repz
scas
cmc
fidiv
fwait
xlat
add
or
call
jns
ja
dec
mov
jne
jmp
add
imul
movs
scas
ret
(bad)
lea
aaa
dec
push
sub
rcr
ret
dec
jl
out
pushw
cld
xlat
xchg
into
nop
leave
mov
push
pop
hlt
test
sti
xor
sar
shr
fist
jg
enter
pop
(bad)
adc
das
xchg
sbb
mov
test
and
aaa
(bad)
jmp
imul
fldl2e
fnstsw
(bad)
iret
pusha
sub
adc
cmps
scas
pop
in
cmc
fild
mov
xchg
lods
cli
cmps
fcomp
imul
js
and
fsubr
pop
pop
pop
push
hlt
int
loopne
mov
jmp
add
lock
js
in
lahf
mov
push
push
push
push
sbb
xchg
push
inc
(bad)
(bad)
popa
mov
stc
fmul
in
jae
push
or
or
outs
call
or
repnz
push
outs
adc
hlt
pop
pop
ds
imul
sbb
mov
push
and
sbb
push
push
mov
mov
xchg
mov
out
or
sub
shr
cmp
fidivr
iret
in
test
sbb
sbb
aaa
ss
adc
adc
push
pop
ret
in
dec
cmps
add
and
retf
add
(bad)
jne
mov
das
ret
lods
loope
push
jb
scas
dec
mov
out
sar
jge
call
pop
aad
enter
jb
push
js
das
sbb
loope
mov
inc
inc
cmp
add
fnstsw
mov
(bad)
mov
jl
pushf
mov
jns
xlat
jp
xor
mov
mov
jmp
pop
fwait
sbb
jnp
push
fild
jg
and
(bad)
int
ds
mov
retf
shl
xchg
je
dec
outs
cmp
pop
retf
arpl
fsubrp
rcr
or
sahf
jle
dec
scas
sahf
push
mov
dec
fisttp
and
push
das
mov
xchg
sbb
push
shr
or
and
xor
retf
dec
cs
xchg
imul
enter
cmps
push
gs
xchg
cmps
jae
mov
mul
xchg
not
dec
test
inc
pop
inc
push
adc
push
xchg
imul
mov
(bad)
cld
cmp
fs
mov
dec
movs
int
stc
cs
test
ja
loop
(bad)
sub
cmp
sub
xor
jbe
les
jl
leave
and
cld
jno
dec
mov
mov
add
adc
fwait
mov
or
jecxz
mov
(bad)
sub
js
aad
stos
adc
enter
popa
mov
adc
adc
adc
cmp
(bad)
dec
mov
or
gs
xchg
loopne
in
gs
xor
iret
jmp
movs
mov
data16
mov
in
sub
ins
pop
fwait
bound
test
stos
repz
adc
push
and
pop
jmp
fnstsw
jns
and
(bad)
xlat
inc
pop
out
in
sub
aad
mov
sahf
or
(bad)
